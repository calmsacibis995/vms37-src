;
;		MEMORY MANAGEMENT SERVICES TEST #6
;
;
	.TITLE	MMGLKWULW - TEST OF $LKWSET/$ULWSET SYSTEM SERVICES
	.IDENT	'V03-000'
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************

;++
; FACILITY: USER MODE MEMORY MANAGEMENT SERVICES TEST
;
; ABSTRACT: THIS SET OF ROUTINES TESTS THE MEMORY MANAGEMENT SERVICES
;
; ENVIRONMENT: USER MODE DIAGNOSTIC
;
; AUTHOR: PETER H. LIPMAN	, CREATION DATE: 6-JAN-77
;
; MODIFIED BY:
;
;	V02-012	SHZ0005		Stephen Zalewski	20-Aug-1980
;		Added further tests to system services tested in this
;		program.  Also incorporated program into MMG test
;		package.

;	V02-012	TSC0005		Thomas Clark		25-Jul-1980
;		Added further tests to system services tested in this
;		program.
;

	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;
	.SBTTL	MACROS
;
; MACROS:
;
	.MACRO	LIST
	.LIST	MEB
	.ENDM	LIST

	.MACRO	NLIST
	.NLIST	MEB
	.ENDM	NLIST

	.MACRO	CRETVA STARTVA,ENDVA,STATUS=S^#SS$_NORMAL,-
			INADR=W^INRANGE,RETADR=W^RETRANGE
	LIST
		.IF	NB,STARTVA
		MOVL	STARTVA,W^INRANGE
		.ENDC
		.IF	NB,ENDVA
		MOVL	ENDVA,W^INRANGE+4
		.ENDC
		MOVZWL	STATUS,R3
		MOVAL	INADR,R0
		MOVAL	RETADR,R1
		BSBW	CRETVASUBR
	NLIST
	.ENDM	CRETVA

	.MACRO	DELTVA STARTVA,ENDVA,STATUS=S^#SS$_NORMAL,-
			INADR=W^INRANGE,RETADR=W^RETRANGE
	LIST
		.IF	NB,STARTVA
		MOVL	STARTVA,W^INRANGE
		.ENDC
		.IF	NB,ENDVA
		MOVL	ENDVA,W^INRANGE+4
		.ENDC
		MOVZWL	STATUS,R3
		MOVAL	INADR,R0
		MOVAL	RETADR,R1
		BSBW	DELTVASUBR
	NLIST
	.ENDM	DELTVA

	.MACRO	EXPREG	PAGCNT,REGION=#0,STATUS=S^#SS$_NORMAL,-
		RETADR=W^RETRANGE
	LIST
		MOVZWL	STATUS,R3
		MOVL	PAGCNT,R4
		MOVAL	RETADR,R1
		.IF	IDN,<REGION>,<#0>
		CLRL	R5
		.IFF
		MOVL	REGION,R5
		.ENDC
		BSBW	EXPREGSUBR
	NLIST
	.ENDM	EXPREG

	.MACRO	LKWSET STARTVA,ENDVA,STATUS=S^#SS$_WASCLR,-
			INADR=W^INRANGE,RETADR=W^RETRANGE
	LIST
		.IF	NB,STARTVA
		MOVL	STARTVA,W^INRANGE
		.ENDC
		.IF	NB,ENDVA
		MOVL	ENDVA,W^INRANGE+4
		.ENDC
		MOVZWL	STATUS,R3
		MOVAL	INADR,R0
		MOVAL	RETADR,R1
		BSBW	LKWSETSUBR
	NLIST
	.ENDM	LKWSET

	.MACRO	ULWSET STARTVA,ENDVA,STATUS=S^#SS$_WASSET,-
			INADR=W^INRANGE,RETADR=W^RETRANGE
	LIST
		.IF	NB,STARTVA
		MOVL	STARTVA,W^INRANGE
		.ENDC
		.IF	NB,ENDVA
		MOVL	ENDVA,W^INRANGE+4
		.ENDC
		MOVZWL	STATUS,R3
		MOVAL	INADR,R0
		MOVAL	RETADR,R1
		BSBW	ULWSETSUBR
	NLIST
	.ENDM	ULWSET

;***************************************************************************
;	THIS MACRO USED TO CREATE PERMANENT GLOBAL SECTIONS.  THE FILE NAME
;	AND GBL SECTION DEVICE NAME ARE DECLARED INDEPENDANTLY OF THIS MACRO
;	AND ARE PUSHED ONTO THE STACK MANUALY BEFORE THE $CRMPSC SERVICE IS
;	CALLED.
;	  ALSO NOTE THE TEMPORARY FIX LOCATED AT THE BOTTOM OF THE MACRO.  THE
;	FIX IS NEEDED BECAUSE THE LAST GLOBAL SECTION MAY NOT HAVE BEEN DELETED
;	BY THE TIME THE NEXT MAPPED SECTION IS CREATED.  IN THIS CASE THE 
;	RETURNED ERROR IS TRAPPED AND THE SECTION IS REMAPPED UNTIL THE
;	SUCCESS CODE IS RETURNED.  THIS BUG IS SLATED TO BE FIXED.  WHEN THAT
;	IS ACCOMPLISHED REFER TO THE COMMENTS ABOVE THE FIX TO DETERMINE WHAT
;	LINES SHOULD BE REMOVED TO DELETE THE PATCH.
;*****************************************************************************
;
	.MACRO	CREMAPSEC -
		STARTVA		,-
		ENDVA		,-
		STATUS=S^#SS$_NORMAL ,-
		INADR=<W^INRANGE>,-		;INPUT RANGE
		RETADR=<W^RETRANGE>  ,-		;RETURN RANGE
		FLAGS=#0	,-		;SECTION FLAGS
		GSDNAM=<W^GBLSECNAM>,-		;GLOBAL SECTION NAME
		RELPAG=#0	,-		;RELATIVE PAGE
		FILNAM=<W^FILENAME>,-		;FILE NAME
		PAGCNT=#0	,-		;MAX SIZE OF SECTION
		VBN=#0		,-		;STARTING WIRT BLK NO. IN FILE
		?L1
	LIST
		.IF	NB,STARTVA
		MOVL	STARTVA,W^INRANGE
		.ENDC
		.IF	NB,ENDVA
		MOVL	ENDVA,W^INRANGE+4
		.ENDC
		MOVZWL	STATUS,R3
L1:
		PUSHL	VBN
		PUSHL	PAGCNT
		$PUSHADR	FILNAM
		PUSHL	RELPAG
		$PUSHADR	GSDNAM
		PUSHL	FLAGS
		$PUSHADR	RETADR
		$PUSHADR	INADR
		CALLS	#8,LIB$_CREMAPSEC
;*******
;IN ORDER TO DELTE THE PATCH MENTIONED ABOVE SIMPLY REMOVE THE LINES FROM
;HERE TO THE NEXT SET OF ASTERICS.
;
		CMPL	#^X1828A,R0		;IF PREVIOUS GBL SECTION HASN'T
		BEQL	L1			;BEEN DELETED TRY CREMAPSEC AGAIN.
;*******
		MOVAL	W^CRMPSCERR,R1
		BSBW	CHECK1
	NLIST
	.ENDM	CREMAPSEC

	.MACRO	RANGECHK ONOROFF
	LIST
	.IF	IDN <ONOROFF>,<OFF>
		BICL	#CTL$M_RNGCHK,W^CTLFLG
	.IFF
		BISL	#CTL$M_RNGCHK,W^CTLFLG
	.ENDC
	NLIST
	.ENDM	RANGECHK

;
; EQUATED SYMBOLS:
;
	$SSDEF
	$SECDEF
	$PRTDEF
	$GBLINI
	$VIELD	CTL,0,<-			;DEFINE CONTROL BITS IN R3
		<MEMLOOP,,MASK>,-		;LOOP IN MEMORY WRITE LOOP
		<TSTLOOP,,MASK>,-		;REDO ENTIRE TEST FROM TOP
		<PIDMSG,,MASK>,-		;PUT PROCESS ID IN EACH TYPEOUT
		<RNGCHK,,MASK>-			;ON IF CHECKING RETURN RANGE
	>
	PRT$C_NONE=1@4
;
; OWN STORAGE:
;

	.SBTTL	DATA STORAGE AND MESSAGE STRINGS
	.PSECT	DATA0,PAGE,WRT,NOEXE
INRANGE:
	.BLKL	2
RETRANGE:
	.BLKL	2
CTLFLG:	.LONG	CTL$M_TSTLOOP!CTL$M_PIDMSG
SAVEND:	.BLKL	1
PID:	.BLKL	1				;PROCESS ID
MAXPASSCNT:
	.LONG	3				;NUMBER OF PASSES TO RUN
PASSCNT:
	.BLKL	1				;PASS COUNTER
PREVPROT:
FAB:	$FAB	FAC=PUT, FNA=OUTNAMADR, FNS=OUTNAMSIZ ;FAB FOR OUTPUT
RAB:	$RAB	FAB=FAB				;RECORD ACCESS BLOCK FOR OUTPUT
MSGLEN:	.BLKL	1				;RETURN LENGTH FROM FAO
MSGBUFD:.LONG	MSGBUFSIZ,MSGBUF		;MESSAGE BUFFER DESCRIPTOR
PIDMSGD:
	.LONG	MSGBUF-PIDMSG,PIDMSG
;
; ***** DO NOT SEPARATE OR REORDER THE FOLLOWING LINES
;
MSGBUFID:
CRLF:	.BYTE	^O15,^O12
	.ASCII	$PROCESS $
PIDMSG:	.ASCII	$    $
MSGBUF:	.BLKB	160				;MESSAGE BUFFER USED BY FAO
	MSGBUFSIZ=.-MSGBUF
;
; ***** DO NOT SEPARATE OR REORDER THE PRECEEDING LINES
;


	.PSECT	CODE,PAGE,NOWRT,EXE

OUTNAMADR:
	.ASCII	/SYS$OUTPUT/
	OUTNAMSIZ=.-OUTNAMADR

CRETVAERRADR:
	.ASCII	$!/CRETVA ERROR - PC = !XL, STATUS WAS !XL, SHOULD BE !XL$
	.ASCII	$!/	INADR = !XL - !XL,  RETADR = !XL - !XL!/$
	CRETVAERRSIZ=.-CRETVAERRADR

DELTVAERRADR:
	.ASCII	$!/DELTVA ERROR - PC = !XL, STATUS WAS !XL, SHOULD BE !XL$
	.ASCII	$!/	INADR = !XL - !XL,  RETADR = !XL - !XL!/$
	DELTVAERRSIZ=.-DELTVAERRADR

CRMPSCERRADR:
	.ASCII	$!/CRMPSC ERROR - PC = !XL, STATUS WAS !XL, SHOULD BE !XL$
	.ASCII	$!/	INADR = !XL - !XL,  RETADR = !XL - !XL!/$
	CRMPSCERRSIZ=.-CRMPSCERRADR

LKWSETERRADR:
	.ASCII	$!/LKWSET ERROR - PC = !XL, STATUS WAS !XL, SHOULD BE !XL$
	.ASCII	$!/	INADR = !XL - !XL,  RETADR = !XL - !XL!/$
	LKWSETERRSIZ=.-LKWSETERRADR

ULWSETERRADR:
	.ASCII	$!/ULWSET ERROR - PC = !XL, STATUS WAS !XL, SHOULD BE !XL$
	.ASCII	$!/	INADR = !XL - !XL,  RETADR = !XL - !XL!/$
	ULWSETERRSIZ=.-ULWSETERRADR

EXPREGERRADR:
	.ASCII	$!/EXPREG ERROR - PC = !XL, STATUS WAS !XL, SHOULD BE !XL$
	.ASCII	$!/	PAGCNT = !SL, REGION = P!UB SPACE, $
	.ASCII	$RETADR = !XL - !XL!/$
	EXPREGERRSIZ=.-EXPREGERRADR

RANGERRADR:
	.ASCII	$!/RETURN RANGE ERROR - LOCATION = !XL$
	.ASCII	$!/	INADR = !XL - !XL, RETADR = !XL - !XL!/$
	RANGERRSIZ=.-RANGERRADR

IDMSGADR:
	.ASCII	$!/MEMORY MANAGEMENT SERVICES TEST #6 (LKWULW), PASS !UL!/$
	IDMSGSIZ=.-IDMSGADR

RUN1_MSGADR:
	.ASCII	$!/   *****   TEST WILL NOW BE RUN USING REGULAR VA SPACE   *****$
	.ASCII	$!/ $
	RUN1_MSGSIZ=.-RUN1_MSGADR

RUN2_MSGADR:
	.ASCII	$!/   *****   TEST WILL NOW BE RUN USING PERM GBL SECTIONS   *****$
	.ASCII	$!/ $
	RUN2_MSGSIZ=.-RUN2_MSGADR

RUN3_MSGADR:
	.ASCII	$!/   *****   TEST WILL NOW BE RUN USING PFN MAPPING   *****$
	.ASCII	$!/ $
	RUN3_MSGSIZ=.-RUN3_MSGADR

PIDCTLADR:
	.ASCII	$!UL$
	PIDCTLSIZ=.-PIDCTLADR

GBLSECNAMADR:
	.ASCII	$MMGTST$
	GBLSECNAMSIZ=.-GBLSECNAMADR

FILENAMEADR:
	.ASCII	$MMGTST.DAT$
	FILENAMESIZ=.-FILENAMEADR


;
; STRING DESCRIPTORS
;
	.ALIGN	LONG

CRETVAERR:
	.LONG	CRETVAERRSIZ,CRETVAERRADR
DELTVAERR:
	.LONG	DELTVAERRSIZ,DELTVAERRADR
CRMPSCERR:
	.LONG	CRMPSCERRSIZ,CRMPSCERRADR
EXPREGERR:
	.LONG	EXPREGERRSIZ,EXPREGERRADR
LKWSETERR:
	.LONG	LKWSETERRSIZ,LKWSETERRADR
ULWSETERR:
	.LONG	ULWSETERRSIZ,ULWSETERRADR
RANGERR:
	.LONG	RANGERRSIZ,RANGERRADR
IDMSG:
	.LONG	IDMSGSIZ,IDMSGADR
RUN1_MSG:
	.LONG	RUN1_MSGSIZ,RUN1_MSGADR
RUN2_MSG:
	.LONG	RUN2_MSGSIZ,RUN2_MSGADR
RUN3_MSG:
	.LONG	RUN3_MSGSIZ,RUN3_MSGADR
PIDCTL:
	.LONG	PIDCTLSIZ,PIDCTLADR
GBLSECNAM:
	.LONG	GBLSECNAMSIZ,GBLSECNAMADR
FILENAME:
	.LONG	FILENAMESIZ,FILENAMEADR


	.SBTTL	INITIALIZATION
;*****************************************************************************
;PROGRAM DESCRIPTION:
;
;	  THIS PROGRAM TESTS THE FOLLOWING SYSTEM SERVICES:
;		$LKWSET, $ULWSET
;
;	  THE SYSTEM SERVICES ARE TESTED IN THE FOLLOWING MANNER.  THE PROGRAM
;	IS DIVIDED INTO THREE SEPERATE SECTIONS.  THE FIRST SECTION DOES
;	SEVERAL LOCK AND UNLOCK TESTS  AND THEN FORCES POSSIBLE ERROR PATHS
;	FOR THE SYSTEM SERVICES.  THE NEXT SECTION DOES SEVERAL LOCK AND
;	UNLOCK SYSTEM SERVICE CALLS FOR GLOBAL SECTIONS.  FINALLY, THE THIRD
;	SECTION DOES THE SAME TESTS, ONLY USING PFN MAPPED SECTIONS.  EACH
;	OF THE SECTIONS IS RUN THREE TIMES, AND A MESSAGE IS SENT TO THE
;	OPR AT THE START OF EACH SECTION NOTIFYING HIM AS TO WHICH SECTION
;	OF TESTS IS ABOUT TO BE RUN.
;
;	  REFER TO MASD$:[MMGTST.COM]MMGTST.RAP FOR FURTHER INFORMATION
;	REGARDING JUST HOW COMPLETELY THE ABOVE MENTIONED SYSTEM SERVICES
;	ARE TESTED BY THIS PROGRAM.
;
;	  REFER TO MASD$:[MMGTST.COM]MMGTST.RAP FOR FURTHER INFORMATION
;	REGARDING JUST HOW COMPLETELY THE ABOVE MENTIONED SYSTEM SERVICES
;	ARE TESTED BY THIS PROGRAM.
;
;      *NOTE:
;	  THERE IS A BUG IN $CRMPSC THAT WILL BE FIXED IN THE FUTURE.  UNTIL
;	THIS FIX TAKES PLACE THERE AREA TEMPORARY PATCH'S LOCATED AT THE END
;	OF THE CREMAPSEC MACRO AND MAKVA MACRO WHICH CIRCUMVENT THIS
;	PROBLEM.  UPON CORRECTION OF THIS BUG REFER TO THESE ABOVE MENTIONED
;	MACROS TO FIND OUT HOW TO REMOVE THESE TEMPORARY PATCHES.
;	  ALSO, THE FILE MMGTST.DAT, WHICH IS CREATED BY RUNNING MMGCRTFIL.MAR,
;	IS NECESSARY TO RUN THIS PROGRAM AS IT IS REFERENCED BY CREMAPSEC.
;
;      *PRIVILEGES:
;	  IN ORDER TO RUN THIS PROGRAM YOU MUST HAVE IN YOUR POSSESION
;	THE PRIVILEGES PRMGBL AND PFNMAP.
;****************************************************************************
;
; START HERE
;
START:	.WORD	0				;ENTRY MASK
	$OPEN	W^FAB				;OPEN THE FILE "$OUTPUT"
	BLBC	R0,10$				;BRANCH IF ERROR
	$CONNECT W^RAB				;CONNECT THE RECORD ACCESS BLOCK
	BLBS	R0,20$
10$:	$EXIT_S	R0				;EXIT WITH STATUS IN R0
20$:	MOVL	#1,PASSCNT			;INITIALIZE THE PASS COUNT
	$RESUME_S PID				;SET UP PROCESS ID
	MOVZWL	PID,R0
	$FAO_S	PIDCTL,MSGLEN,PIDMSGD,R0 	;INIT THE PROCESS ID STRING

CRETVA_MESSAGE:
	$FAO_S	RUN1_MSG,MSGLEN,MSGBUFD		;INFORM OPR NORMAL VA USED FOR TEST
	BSBW	TYPEMSGBUF
	BICL	#CTL$M_PIDMSG,W^CTLFLG		;STOP PROCESS ID FROM PRINTING

RSTART_1:
	RANGECHK ON
	$FAO_S	IDMSG,MSGLEN,MSGBUFD,PASSCNT
	BSBW	TYPEMSGBUF
	EXPREG	#1
	MOVQ	W^RETRANGE,R2
	MOVQ	R2,W^INRANGE
	MOVL	R2,W^SAVEND

	.SBTTL	LOCK AND UNLOCK FROM WORKING SET TEST
;
; TEST LOCK/UNLOCK PAGES FROM WORKING SET
;
	MOVL	W^SAVEND,R10
	MOVAL	<3*512-1>(R10),R11
	CRETVA	R10,R11
	LKWSET
	ULWSET

	LKWSET	ENDVA=R10			;LOCK FIRST PAGE ONLY
	LKWSET	ENDVA=R11,STATUS=#SS$_WASSET 	;LOCK ALL, FIRST ALREADY LOCKED
	ULWSET	ENDVA=R10			;UNLOCK FIRST PAGE ONLY
	ULWSET	ENDVA=R11,STATUS=#SS$_WASCLR 	;UNLOCK ALL, FIRST ALREADY UNLOCKED

	LKWSET	STARTVA=R11			;LOCK LAST PAGE ONLY
	LKWSET	STARTVA=R10,STATUS=#SS$_WASSET 	;LOCK ALL, LAST ALREADY LOCKED
	ULWSET	STARTVA=R11			;UNLOCK LAST PAGE ONLY
	ULWSET	STARTVA=R10,STATUS=#SS$_WASCLR 	;UNLOCK ALL, LAST ALREADY UNLOCKED
	DELTVA					;CLEAN UP

	.SBTTL	FORCE ERRORS IN LOCK/UNLOCK FROM WORKING SET
;
; FORCE ERRORS IN LOCK/UNLOCK FROM WORKING SET
;
	LKWSET	#^X80000200,#^X80000A00,#SS$_NOPRIV ;LOCK SYSTEM PAGE
	ULWSET	STATUS=#SS$_NOPRIV		;UNLOCK SYSTEM PAGES
	LKWSET	#<1@31-<128@9>-1>,W^INRANGE,#SS$_PAGOWNVIO
						;LOCK PAGE OWNED BY SOMEONE ELSE
	ULWSET	STATUS=#SS$_PAGOWNVIO		;UNLOCK PAGE OWNED BY SOMEONE ELSE
	LKWSET	W^SAVEND,W^SAVEND,#SS$_ACCVIO 	;LOCK NONEXISTENT PAGE
	ULWSET	STATUS=#SS$_ACCVIO		;UNLOCK NONEXISTENT PAGE
	LKWSET	#0,#0,#SS$_ACCVIO		;LOCK DELETED PAGE
	ULWSET	STATUS=#SS$_ACCVIO		;UNLOCK DELETED PAGE

	MOVL	W^SAVEND,W^INRANGE
	ADDL3	#3*512-1,W^SAVEND,W^INRANGE+4
	CRETVA					;CREATE SOME PAGES
	LKWSET	STATUS=#SS$_ACCVIO,INADR=W^4 	;INPUT RANGE NOT ACCESSIBLE
	ULWSET	STATUS=#SS$_ACCVIO,INADR=W^4 	;INPUT RANGE NOT ACCESSIBLE
	LKWSET	STATUS=#SS$_ACCVIO,RETADR=W^8 	;RETURN RANGE NOT ACCESSIBLE
	ULWSET	STATUS=#SS$_ACCVIO,RETADR=W^8 	;RETURN RANGE NOT ACCESSIBLE
	CRETVA	W^SAVEND,#1@30-1,#SS$_VASFULL 	;CREATE ALL POSSIBLE PAGES
	LKWSET	STATUS=#SS$_LKWSETFUL		;AND TRY TO LOCK TOO MANY
	RANGECHK OFF
	ULWSET	INADR=W^RETRANGE		;UNLOCK ALL THAT WERE LOCKED
	DELTVA	#1@30-1,W^SAVEND		;DELETE ALL THAT WERE CREATED
	RANGECHK ON
;
;  END OF LOOP
;
	AOBLEQ	W^MAXPASSCNT,W^PASSCNT,150$
	BRW	GBL_SEC_MESSAGE
150$:	BRW	RSTART_1


	.SBTTL	TEST/FORCE ERRORS IN LOCK/UNLOCK GLOBAL SECTS
;
;TEST & FORCE ERRORS IN LOCKING/UNLOCKING GLOBAL SECTIONS
;
GBL_SEC_MESSAGE:
	BISL	#CTL$M_PIDMSG,W^CTLFLG		;ALLOW PROCESS ID TO PRINT
	$FAO_S	RUN2_MSG,MSGLEN,MSGBUFD		;INFORM OPR GBL SECTION VA SPACE BEING
	BSBW	TYPEMSGBUF			;USED FOR TESTS
	BICL	#CTL$M_PIDMSG,W^CTLFLG		;STOP PROCESS ID FROM PRINTING
	MOVL	#1,W^PASSCNT			;REINITIALIZE THE PASS COUNT

RSTART_2:
	RANGECHK ON
	$FAO_S	IDMSG,MSGLEN,MSGBUFD,PASSCNT
	BSBW	TYPEMSGBUF
	EXPREG	#1
	MOVQ	W^RETRANGE,R2
	MOVQ	R2,W^INRANGE
	MOVL	R2,W^SAVEND

	MOVL	W^SAVEND,W^INRANGE		;DEFINE INRANGE AT END OF CODE
	MOVL	W^SAVEND,W^INRANGE+4
	CREMAPSEC	-			;CREATE READ-ONLY GLOBAL SECTION
		INADR=<W^INRANGE>,-
		FLAGS=#<SEC$M_GBL!SEC$M_PERM>,-
		PAGCNT=#10,-
		RETADR=<W^RETRANGE>
	LKWSET	W^RETRANGE,W^RETRANGE+4		;LOCK READ-ONLY GLOBAL SECTION
	ULWSET	W^RETRANGE,W^RETRANGE+4		;UNLOCK WHAT WE LOCKED
	DELTVA					;DELETE WHAT WE CREATED
	$DGBLSC_S	-			;DELETE THE SECTION
		GSDNAM=<W^GBLSECNAM>
	MOVL	W^SAVEND,W^INRANGE
	MOVL	W^SAVEND,W^INRANGE+4
	CREMAPSEC	-			;CREATE A WRITABLE GLOBAL SECTION
		INADR=<W^INRANGE>,-
		FLAGS=#<SEC$M_GBL!SEC$M_WRT!SEC$M_PERM>,-
		PAGCNT=#10,-
		RETADR=<W^RETRANGE>
	LKWSET	W^RETRANGE,W^RETRANGE+4,STATUS=#SS$_NOPRIV	;TRY TO LOCK IT
	DELTVA					;DELETE WHAT WE CREATED
	$DGBLSC_S	-			;DELETE THE SECTION
		GSDNAM=<W^GBLSECNAM>
;
; END OF LOOP
;
	AOBLEQ	W^MAXPASSCNT,W^PASSCNT,160$
	BRW	PFNMAP_MESSAGE
160$:	BRW	RSTART_2

	.SBTTL	TEST/FORCE ERRORS IN LOCK/UNLOCK GLOBAL SECTS
;
;TEST & FORCE ERRORS IN LOCKING/UNLOCKING PFN MAPPED SECTIONS
;
PFNMAP_MESSAGE:
	BISL	#CTL$M_PIDMSG,W^CTLFLG		;ALLOW PROCESS ID TO PRINT
	$FAO_S	RUN3_MSG,MSGLEN,MSGBUFD		;INFORM OPR PFN MAPPING BEING
	BSBW	TYPEMSGBUF			;USED FOR TESTS
	BICL	#CTL$M_PIDMSG,W^CTLFLG		;STOP PROCESS ID FROM PRINTING
	MOVL	#1,W^PASSCNT			;REINITIALIZE THE PASS COUNT

RSTART_3:
	RANGECHK ON
	$FAO_S	IDMSG,MSGLEN,MSGBUFD,PASSCNT
	BSBW	TYPEMSGBUF
	EXPREG	#1
	MOVQ	W^RETRANGE,R2
	MOVQ	R2,W^INRANGE
	MOVL	R2,W^SAVEND

	MOVL	W^SAVEND,W^INRANGE		;DEFINE INRANGE AT END OF CODE
	MOVL	W^SAVEND,W^INRANGE+4
	MOVZWL	S^#SS$_NORMAL,R3		;SET EXPECTED RETURN STATUS
L1:
	$CRMPSC_S	-			;CREATE PFN MAPPED SECTION
		INADR=<W^INRANGE>,-
		RETADR=<W^RETRANGE>,-
		GSDNAM=<W^GBLSECNAM>,-
		VBN=#0,-
		FLAGS=#<SEC$M_GBL!SEC$M_PERM!SEC$M_PFNMAP>,-
		PAGCNT=#25
;*****
;IN ORDER TO REMOVE THE TEMPORARY FIX EXPLAINED ABOVE REMOVE THE LINES 
;STARTING FROM HERE AND EXTENDING THE THE NEXT SET OF ASTERICS.
;
		CMPL	#^X1828A,R0		;IF PREVIOUS GBL SECTION HASN'T
		BEQL	L1			;BEEN DELETED TRY CREMAPSEC AGAIN.
;*****
		MOVAL	W^CRMPSCERR,R1
		BSBW	CHECK1

	LKWSET	W^RETRANGE,W^RETRANGE+4		;LOCK READ-ONLY PFN MAPPED SECTION
	ULWSET	W^RETRANGE,W^RETRANGE+4		;UNLOCK WHAT WE LOCKED
	DELTVA					;DELETE WHAT WE CREATED
	$DGBLSC_S	-			;DELETE THE SECTION
		GSDNAM=<W^GBLSECNAM>
	MOVL	W^SAVEND,W^INRANGE
	MOVL	W^SAVEND,W^INRANGE+4
	MOVZWL	S^#SS$_NORMAL,R3		;SET EXPECTED RETURN STATUS
L2:
	$CRMPSC_S	-			;CREATE PFN MAPPED WRITABLE SECTION
		INADR=<W^INRANGE>,-
		RETADR=<W^RETRANGE>,-
		GSDNAM=<W^GBLSECNAM>,-
		VBN=#0,-
		FLAGS=#<SEC$M_GBL!SEC$M_PERM!SEC$M_PFNMAP!SEC$M_WRT>,-
		PAGCNT=#25
;*****
;IN ORDER TO REMOVE THE TEMPORARY FIX EXPLAINED ABOVE REMOVE THE LINES 
;STARTING FROM HERE AND EXTENDING THE THE NEXT SET OF ASTERICS.
;
		CMPL	#^X1828A,R0		;IF PREVIOUS GBL SECTION HASN'T
		BEQL	L2			;BEEN DELETED TRY CREMAPSEC AGAIN.
;*****
		MOVAL	W^CRMPSCERR,R1
		BSBW	CHECK1

	LKWSET	W^RETRANGE,W^RETRANGE+4,STATUS=#SS$_NOPRIV	;TRY TO LOCK IT
	DELTVA					;DELETE WHAT WE CREATED
	$DGBLSC_S	-			;DELETE THE SECTION
		GSDNAM=<W^GBLSECNAM>
;
; END OF LOOP
;
	AOBLEQ	W^MAXPASSCNT,W^PASSCNT,170$
	MOVL	#1,R0
	$EXIT_S	R0
170$:	BRW	RSTART_3


	.SBTTL	SUBROUTINES TO CALL THE SERVICES
;
; INPUT:
;
;	R0 = INADR
;	R1 = RETADR
;	R3 = DESIRED STATUS
;
; OUTPUT:
;
;	R2 PRESERVED
;
CRETVASUBR:
	$CRETVA_S (R0),(R1)
	MOVAL	W^CRETVAERR,R1			;ERROR CONTROL STRING
	BRB	CHECK1
;
; INPUT:
;
;	R0 = INADR
;	R1 = RETADR
;	R3 = DESIRED STATUS
;
; OUTPUT:
;
;	R2 PRESERVED
;
DELTVASUBR:
	$DELTVA_S (R0),(R1)
	MOVAL	W^DELTVAERR,R1			;ERROR CONTROL STRING
	BRB	CHECK1
;
; INPUT:
;
;	R0 = INADR
;	R1 = RETADR
;	R3 = DESIRED STATUS
;
; OUTPUT:
;
;	R2 PRESERVED
;
LKWSETSUBR:
	$LKWSET_S (R0),(R1)
	MOVAL	W^LKWSETERR,R1			;ERROR CONTROL STRING
	BRB	CHECK1
;
; INPUT:
;
;	R0 = INADR
;	R1 = RETADR
;	R3 = DESIRED STATUS
;
; OUTPUT:
;
;	R2 PRESERVED
;
ULWSETSUBR:
	$ULWSET_S (R0),(R1)
	MOVAL	W^ULWSETERR,R1			;ERROR CONTROL STRING

CHECK1:
	CMPL	R0,R3				;STATUS AS DESIRED
	BEQL	10$				;BRANCH IF YES
	CMPW	#SS$_VASFULL,R3			;IF EXPECTING VIRTUAL ADDRESS SPACE FULL
	BNEQ	15$
	CMPW	#SS$_EXQUOTA,R0			;THEN EXCEEDS QUOTA MAY ALSO BE RETURNED
	BEQL	10$
15$:
	CMPW	#SS$_NORMAL,R3			;IF EXPECTING NORMAL
	BNEQ	5$				;COMPLETION FOR CRMPSC
	CMPW	#SS$_CREATED,R0			;THEN GLOBAL SECTION CREATED
	BEQL	10$				;MAY BE RETURNED
5$:	PUSHL	R4
	MOVL	4(SP),R4			;ADDRESS OF ERROR
	$FAO_S	(R1),MSGLEN,MSGBUFD,R4,R0,R3,-
		INRANGE,INRANGE+4,RETRANGE,RETRANGE+4
	POPR	#^M<R4>
	BSBW	TYPEMSGBUF
	RSB
10$:
	BRW	RANGECHK			;GO CHECK THE RETURN RANGE

;
; INPUT:
;
;	R1 = RETADR
;	R3 = DESIRED STATUS
;	R4 = PAGCNT
;	R5 = REGION
;
; OUTPUT:
;
;	R2 PRESERVED
;
EXPREGSUBR:
	$EXPREG_S R4,(R1),,R5
	MOVAL	W^EXPREGERR,R1			;ERROR CONTROL STRING

CHECK2:
	CMPL	R0,R3				;STATUS AS DESIRED?
	BEQL	10$				;BRANCH IF YES
	PUSHL	R6
	MOVL	4(SP),R6			;ADDRESS OF ERROR
	$FAO_S	(R1),MSGLEN,MSGBUFD,R6,R0,R3,R4,R5,-
		RETRANGE,RETRANGE+4
	POPR	#^M<R6>
	BSBW	TYPEMSGBUF
	RSB
10$:	MOVL	W^RETRANGE,W^INRANGE		;MAKE INPUT RANGE LOOK LIKE CRETVA/DELTVA
	DECL	R4
	ASHL	#9,R4,R4
	ADDL3	R4,W^INRANGE,W^INRANGE+4
	BRB	RANGECHK			;AND CHECK THE RETURN RANGE


RANGECHK:
	BBC	#CTL$V_RNGCHK,W^CTLFLG,40$ 	;BRANCH IF RANGE CHECK IS DISABLED
	BLBC	R0,40$				;IF ERROR IN SERVICE, SKIP THE RANGE CHECK
	MOVQ	W^INRANGE,R0			;R0 = STARVA, R1 = ENDVA
	CMPL	R0,R1				;WHICH DIRECTION?
	BGTRU	10$				;BRANCH IF BACKWARDS
	BLSSU	5$				;BRANCH IF FORWARDS
	BBS	#30,R0,10$			;FOR EQUAL, P0 SPACE FORWARDS, P1 BACKWARDS
;
; REQUESTED RANGE IS FORWARDS
;
5$:	BICW	#^X1FF,R0			;FROM BYTE 0 OF STARTVA
	BISW	#^X1FF,R1			;THROUGH LAST BYTE OF ENDVA
	BRB	20$				;
;
; GOING BACKWARDS IN VIRTUAL ADDRESS SPACE
;
10$:	BISW	#^X1FF,R0			;LAST BYTE OF STARTVA
	BICW	#^X1FF,R1			;THROUGH FIRST BYTE OF ENDVA
20$:	CMPL	R0,W^RETRANGE			;IS THIS WHAT WAS RETURNED?
	BNEQ	30$				;BRANCH IF NOT, ERROR
	CMPL	R1,W^RETRANGE+4			;THIS ONE OK TOO?
	BEQL	40$				;BRANCH IF YES, RANGE OK
30$:	PUSHL	R3				;SAVE REGISTER
	MOVL	4(SP),R3			;TO USE FOR ERROR PC
	$FAO_S	<W^RANGERR>,MSGLEN,MSGBUFD,R3,- ;FORMAT THE ERROR MESSAGE
		INRANGE,INRANGE+4,RETRANGE,RETRANGE+4
	POPR	#^M<R3>				;RESTORE SAVE REGISTER
	BSBW	TYPEMSGBUF			;OUTPUT THE ERROR MESSAGE
40$:	RSB					;AND RETURN

	.SBTTL	MISCELLANEOUS SUBROUTINES
;
; TYPE A MESSAGE
;	MSGBUF IS THE ADDRESS OF THE BEGINNING OF THE STRING
;	MSGLEN CONTAINS THE SIZE (IN BYTES) OF THE STRING
;
TYPEMSGBUF:
	MOVL	W^MSGLEN,R0			;SIZE TO R0
	MOVAL	W^MSGBUF,R1			;ADDRESS TO R1
	BBC	#CTL$V_PIDMSG,W^CTLFLG,5$ 	;BRANCH IF NO PROCESS ID REQUIRED
	MOVAL	W^MSGBUFID,R1			;ADDRESS INCLUDING PID MSG
	ADDL	S^#<MSGBUF-MSGBUFID>,R0		;INCLUDE EXTRA BYTES IN COUNT
5$:
	MOVL	R1,W^RAB+RAB$L_RBF		;SET BUFFER ADDRESS
	MOVW	R0,W^RAB+RAB$W_RSZ		;AND SIZE
	$PUT	W^RAB				;OUTPUT THE MESSAGE
	BLBC	R0,20$
	RSB
20$:	$EXIT_S	R0				;EXIT WITH ERROR STATUS

	.END	START
