;
;		MEMORY MANAGEMENT SERVICES TEST #2
;
;
	.TITLE	MMGSETPRT - TEST OF $SETPRT SYSTEM SERVICE
	.IDENT	'V03-000'
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************

;++
; FACILITY: USER MODE MEMORY MANAGEMENT SERVICES TEST
;
; ABSTRACT: THIS SET OF ROUTINES TESTS THE MEMORY MANAGEMENT SERVICES
;
; ENVIRONMENT: USER MODE DIAGNOSTIC
;
; AUTHOR: PETER H. LIPMAN	, CREATION DATE: 6-JAN-77
;
; MODIFIED BY:
;
;	V02-012	SHZ0007		Stephen Zalewski	20-Aug-1980
;		Added further tests to system services tested in this
;		program.  Also incorporated program into MMG test
;		package.
;

	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;
	.SBTTL	MACROS
;
; MACROS:
;
	.MACRO	LIST
	.LIST	MEB
	.ENDM	LIST

	.MACRO	NLIST
	.NLIST	MEB
	.ENDM	NLIST

	.MACRO	READ SIZ=#1,ADR=(R2),?L1,?L2
	IFNORD	<SIZ>,<ADR>,L1
	BRB	L2
L1:	MOVAL	W^READERR,R1
	BSBW	PROBERR
L2:
	.ENDM	READ

	.MACRO	WRITE SIZ=#1,ADR=(R2),?L1,?L2
	IFNOWRT	<SIZ>,<ADR>,L1
	BRB	L2
L1:	MOVAL	W^WRITERR,R1
	BSBW	PROBERR
L2:
	.ENDM	WRITE

	.MACRO	NOREAD SIZ=#1,ADR=(R2),?L1
	IFNORD	<SIZ>,<ADR>,L1
	MOVAL	W^NOREADERR,R1
	BSBW	PROBERR
L1:
	.ENDM	NOREAD

	.MACRO	NOWRITE SIZ=#1,ADR=(R2),?L1
	IFNOWRT	<SIZ>,<ADR>,L1
	MOVAL	W^NOWRITERR,R1
	BSBW	PROBERR
L1:
	.ENDM	NOWRITE

	.MACRO	CRETVA STARTVA,ENDVA,STATUS=S^#SS$_NORMAL,-
			INADR=W^INRANGE,RETADR=W^RETRANGE
	LIST
		.IF	NB,STARTVA
		MOVL	STARTVA,W^INRANGE
		.ENDC
		.IF	NB,ENDVA
		MOVL	ENDVA,W^INRANGE+4
		.ENDC
		MOVZWL	STATUS,R3
		MOVAL	INADR,R0
		MOVAL	RETADR,R1
		BSBW	CRETVASUBR
	NLIST
	.ENDM	CRETVA

	.MACRO	DELTVA STARTVA,ENDVA,STATUS=S^#SS$_NORMAL,-
			INADR=W^INRANGE,RETADR=W^RETRANGE
	LIST
		.IF	NB,STARTVA
		MOVL	STARTVA,W^INRANGE
		.ENDC
		.IF	NB,ENDVA
		MOVL	ENDVA,W^INRANGE+4
		.ENDC
		MOVZWL	STATUS,R3
		MOVAL	INADR,R0
		MOVAL	RETADR,R1
		BSBW	DELTVASUBR
	NLIST
	.ENDM	DELTVA

	.MACRO	EXPREG	PAGCNT,REGION=#0,STATUS=S^#SS$_NORMAL,-
		RETADR=W^RETRANGE
	LIST
		MOVZWL	STATUS,R3
		MOVL	PAGCNT,R4
		MOVAL	RETADR,R1
		.IF	IDN,<REGION>,<#0>
		CLRL	R5
		.IFF
		MOVL	REGION,R5
		.ENDC
		BSBW	EXPREGSUBR
	NLIST
	.ENDM	EXPREG

	.MACRO	SETPRT ACC,STARTVA,ENDVA,STATUS=S^#SS$_NORMAL,-
			INADR=W^INRANGE,RETADR=W^RETRANGE,-
			PRVPRT=NONE,PRVPRTADR
	LIST
		.IF	NB,STARTVA
		MOVL	STARTVA,W^INRANGE
		.ENDC
		.IF	NB,ENDVA
		MOVL	ENDVA,W^INRANGE+4
		.ENDC
		MOVZWL	STATUS,R3
		MOVAL	INADR,R0
		MOVAL	RETADR,R1
		MOVZBL	S^#PRT$C_'ACC,R4
		MOVZBL	S^#PRT$C_'PRVPRT,R5
		.IF	B,PRVPRTADR
		.IF	DIF,<PRVPRT>,<NONE>
		MOVAL	W^PREVPROT,R6
		.IFF
		CLRL	R6
		.ENDC
		.IFF
		MOVAL	PRVPRTADR,R6
		.ENDC
		BSBW	SETPRTSUBR
	NLIST
	.ENDM	SETPRT

	.MACRO	RANGECHK ONOROFF
	LIST
	.IF	IDN <ONOROFF>,<OFF>
		BICL	#CTL$M_RNGCHK,W^CTLFLG
	.IFF
		BISL	#CTL$M_RNGCHK,W^CTLFLG
	.ENDC
	NLIST
	.ENDM	RANGECHK

;
; EQUATED SYMBOLS:
;
	$SECDEF
	$SSDEF
	$PRTDEF
	$GBLINI
	$VIELD	CTL,0,<-			;DEFINE CONTROL BITS IN R3
		<MEMLOOP,,MASK>,-		;LOOP IN MEMORY WRITE LOOP
		<TSTLOOP,,MASK>,-		;REDO ENTIRE TEST FROM TOP
		<PIDMSG,,MASK>,-		;PUT PROCESS ID IN EACH TYPEOUT
		<RNGCHK,,MASK>-			;ON IF CHECKING RETURN RANGE
	>
	PRT$C_NONE=1@4
	PRT$C_TOBIG=1@5
	PRT$C_RESERVE=1@0
;
; OWN STORAGE:
;

	.SBTTL	DATA STORAGE AND MESSAGE STRINGS
	.PSECT	DATA0,PAGE,WRT,NOEXE
INRANGE:
	.BLKL	2
RETRANGE:
	.BLKL	2
CTLFLG:	.LONG	CTL$M_TSTLOOP!CTL$M_PIDMSG
SAVEND:	.BLKL	1
PID:	.BLKL	1				;PROCESS ID
MAXPASSCNT:
	.LONG	3				;NUMBER OF PASSES TO RUN
PASSCNT:
	.BLKL	1				;PASS COUNTER
PREVPROT:
FAB:	$FAB	FAC=PUT, FNA=OUTNAMADR, FNS=OUTNAMSIZ ;FAB FOR OUTPUT
RAB:	$RAB	FAB=FAB				;RECORD ACCESS BLOCK FOR OUTPUT
MSGLEN:	.BLKL	1				;RETURN LENGTH FROM FAO
MSGBUFD:.LONG	MSGBUFSIZ,MSGBUF		;MESSAGE BUFFER DESCRIPTOR
PIDMSGD:
	.LONG	MSGBUF-PIDMSG,PIDMSG
;
; ***** DO NOT SEPARATE OR REORDER THE FOLLOWING LINES
;
MSGBUFID:
CRLF:	.BYTE	^O15,^O12
	.ASCII	$PROCESS $
PIDMSG:	.ASCII	$    $
MSGBUF:	.BLKB	160				;MESSAGE BUFFER USED BY FAO
	MSGBUFSIZ=.-MSGBUF
;
; ***** DO NOT SEPARATE OR REORDER THE PRECEEDING LINES
;


	.PSECT	CODE,PAGE,NOWRT,EXE

OUTNAMADR:
	.ASCII	/SYS$OUTPUT/
	OUTNAMSIZ=.-OUTNAMADR

CRETVAERRADR:
	.ASCII	$!/CRETVA ERROR - PC = !XL, STATUS WAS !XL, SHOULD BE !XL$
	.ASCII	$!/	INADR = !XL - !XL,  RETADR = !XL - !XL!/$
	CRETVAERRSIZ=.-CRETVAERRADR

DELTVAERRADR:
	.ASCII	$!/DELTVA ERROR - PC = !XL, STATUS WAS !XL, SHOULD BE !XL$
	.ASCII	$!/	INADR = !XL - !XL,  RETADR = !XL - !XL!/$
	DELTVAERRSIZ=.-DELTVAERRADR

EXPREGERRADR:
	.ASCII	$!/EXPREG ERROR - PC = !XL, STATUS WAS !XL, SHOULD BE !XL$
	.ASCII	$!/	PAGCNT = !SL, REGION = P!UB SPACE, $
	.ASCII	$RETADR = !XL - !XL!/$
	EXPREGERRSIZ=.-EXPREGERRADR

SETPRTERRADR:
	.ASCII	$!/SETPRT ERROR - PC = !XL, STATUS WAS !XL, SHOULD BE !XL$
	.ASCII	$!/	INADR = !XL - !XL,  RETADR = !XL - !XL$
	.ASCII	$!/	PREVIOUS PROTECTION WAS !1XB, SHOULD BE !1XB!/$
	SETPRTERRSIZ=.-SETPRTERRADR

READERRADR:
	.ASCII	$!/ READ ERROR - LOCATION = !XL !/$
	READERRSIZ=.-READERRADR

NOREADERRADR:
	.ASCII	$!/ NO-READ ERROR - LOCATION = !XL !/$
	NOREADERRSIZ=.-NOREADERRADR

WRITERRADR:
	.ASCII	$!/ WRITE ERROR - LOCATION = !XL !/$
	WRITERRSIZ=.-WRITERRADR

NOWRITERRADR:
	.ASCII	$!/ NO-WRITE ERROR - LOCATION = !XL !/$
	NOWRITERRSIZ=.-NOWRITERRADR

RANGERRADR:
	.ASCII	$!/RETURN RANGE ERROR - LOCATION = !XL$
	.ASCII	$!/	INADR = !XL - !XL, RETADR = !XL - !XL!/$
	RANGERRSIZ=.-RANGERRADR

IDMSGADR:
	.ASCII	$!/MEMORY MANAGEMENT SERVICES TEST #2 (SETPRT), PASS !UL!/$
	IDMSGSIZ=.-IDMSGADR

RUN1_MSGADR:
	.ASCII	$!/   *****   TEST WILL NOW BE RUN USING NORMAL VA SPACE   *****$
	.ASCII	$!/ $
	RUN1_MSGSIZ=.-RUN1_MSGADR

PIDCTLADR:
	.ASCII	$!UL$
	PIDCTLSIZ=.-PIDCTLADR

;
; STRING DESCRIPTORS
;
	.ALIGN	LONG

CRETVAERR:
	.LONG	CRETVAERRSIZ,CRETVAERRADR
DELTVAERR:
	.LONG	DELTVAERRSIZ,DELTVAERRADR
EXPREGERR:
	.LONG	EXPREGERRSIZ,EXPREGERRADR
SETPRTERR:
	.LONG	SETPRTERRSIZ,SETPRTERRADR
READERR:
	.LONG	READERRSIZ,READERRADR
NOREADERR:
	.LONG	NOREADERRSIZ,NOREADERRADR
WRITERR:
	.LONG	WRITERRSIZ,WRITERRADR
NOWRITERR:
	.LONG	NOWRITERRSIZ,NOWRITERRADR
RANGERR:
	.LONG	RANGERRSIZ,RANGERRADR
IDMSG:
	.LONG	IDMSGSIZ,IDMSGADR
RUN1_MSG:
	.LONG	RUN1_MSGSIZ,RUN1_MSGADR
PIDCTL:
	.LONG	PIDCTLSIZ,PIDCTLADR


	.SBTTL	INITIALIZATION
;*****************************************************************************
;PROGRAM DESCRIPTION:
;
;	  THIS PROGRAM TESTS THE FOLLOWING SYSTEM SERVICE:
;		$SETPRT
;
;	  THE PROGRAM FORCES POSSIBLE ERROR PATHS FOR THE ABOVE MENTIONED
;	SYSTEM SERVICES.  THREE PASSES ARE MADE THROUGH THE TEST LOOP
;	TO ENSURE PATH REPEATABILITY.  ONLY REGULAR VA SPACE IS USED IN
;	THIS TEST PROGRAM.
;
;	  REFER TO MASD$:[MMGSTS.COM]MMGTST.RAP FOR FURTHER INFORMATION
;	REGARDING JUST HOW COMPLETELY THE ABOVE MENTIONED SYSTEM SERVICES
;	ARE TESTED BY THIS PROGRAM.
;
;      *PRIVILEGES:
;	  THIS PROGRAM NEEDS NO SPECIAL PRIVILEGES TO EXECUTE.  
;****************************************************************************
;
; START HERE
;
START:	.WORD	0				;ENTRY MASK
	$OPEN	W^FAB				;OPEN THE FILE "$OUTPUT"
	BLBC	R0,10$				;BRANCH IF ERROR
	$CONNECT W^RAB				;CONNECT THE RECORD ACCESS BLOCK
	BLBS	R0,20$
10$:	$EXIT_S	R0				;EXIT WITH STATUS IN R0
20$:	MOVL	#1,PASSCNT			;INITIALIZE THE PASS COUNT
	$RESUME_S PID				;SET UP PROCESS ID
	MOVZWL	PID,R0
	$FAO_S	PIDCTL,MSGLEN,PIDMSGD,R0 	;INIT THE PROCESS ID STRING
;
; INFORM OPERATOR THAT TESTS WILL BE RUN USING ONLY NORMAL VA SPACE
;
	$FAO_S	RUN1_MSG,MSGLEN,MSGBUFD		;INFORM OPR NORMAL VA USED FOR TEST
	BSBW	TYPEMSGBUF
	BICL	#CTL$M_PIDMSG,W^CTLFLG		;STOP PROCESS ID FROM PRINTING
RSTART:
	RANGECHK ON
	$FAO_S	IDMSG,MSGLEN,MSGBUFD,PASSCNT
	BSBW	TYPEMSGBUF
	EXPREG	#1
	MOVQ	W^RETRANGE,R2
	MOVQ	R2,W^INRANGE
	MOVL	R2,W^SAVEND


	.SBTTL	FORCE ERRORS FROM SETPRT
;
; FORCE ERRORS IN SETPRT
;
	RANGECHK OFF
	DELTVA					;DELETE THE JUNK
	RANGECHK ON
	SETPRT	UW,STATUS=#SS$_LENVIO		;PROTECT OFF END OF P0 SPACE
	SETPRT	UW,#4,#8,#SS$_ACCVIO		;DELETED PAGE
	SETPRT	UR,#^X80000200,#^X80000A00,#SS$_NOPRIV
	SETPRT	UR,<#1@31-<128@9>-1>,W^INRANGE,#SS$_PAGOWNVIO
	ADDL3 #^X600,W^SAVEND,W^INRANGE+4
	CRETVA	W^SAVEND,W^INRANGE+4
	SETPRT	URSW,STATUS=#SS$_ACCVIO,-
		INADR=W^4			;INPUT RANGE NOT ACCESSIBLE
	SETPRT	UW
	SETPRT	URSW,STATUS=#SS$_ACCVIO,-
		RETADR=W^8			;RETURN RANGE NOT ACCESSIBLE
	SETPRT	UW
	SETPRT	URSW,STATUS=#SS$_ACCVIO,-
		RETADR=@W^INRANGE		;CHANGE PROTECTION OF RETURN RANGE PAGE
	SETPRT	UW
	SETPRT	URSW,STATUS=#SS$_ACCVIO,-
		PRVPRTADR=@W^INRANGE		;CHANGE PROTECTION OF PREVIOUS PROT ADR
	SETPRT	TOBIG,STATUS=#SS$_IVPROTECT	;PROTECTION CODE GREATER THAN 15
	SETPRT  RESERVE,STATUS=#SS$_IVPROTECT	;PASS RESERVED PROTECTION CODE
	NOWRITE
	DELTVA
;
;END OF LOOP
;
	AOBLEQ	W^MAXPASSCNT,W^PASSCNT,160$
150$:	MOVL	#1,R0
	$EXIT_S	R0
160$:	BRW	RSTART


	.SBTTL	SUBROUTINES TO CALL THE SERVICES
;
; INPUT:
;
;	R0 = INADR
;	R1 = RETADR
;	R3 = DESIRED STATUS
;
; OUTPUT:
;
;	R2 PRESERVED
;
CRETVASUBR:
	$CRETVA_S (R0),(R1)
	MOVAL	W^CRETVAERR,R1			;ERROR CONTROL STRING
	BRB	CHECK1
;
; INPUT:
;
;	R0 = INADR
;	R1 = RETADR
;	R3 = DESIRED STATUS
;
; OUTPUT:
;
;	R2 PRESERVED
;
DELTVASUBR:
	$DELTVA_S (R0),(R1)
	MOVAL	W^DELTVAERR,R1			;ERROR CONTROL STRING
	BRB	CHECK1
CHECK1:
	CMPL	R0,R3				;STATUS AS DESIRED
	BEQL	10$				;BRANCH IF YES
	CMPW	#SS$_VASFULL,R3			;IF EXPECTING VIRTUAL ADDRESS SPACE FULL
	BNEQ	5$
	CMPW	#SS$_EXQUOTA,R0			;THEN EXCEEDS QUOTA MAY ALSO BE RETURNED
	BEQL	10$
5$:	PUSHL	R4
	MOVL	4(SP),R4			;ADDRESS OF ERROR
	$FAO_S	(R1),MSGLEN,MSGBUFD,R4,R0,R3,-
		INRANGE,INRANGE+4,RETRANGE,RETRANGE+4
	POPR	#^M<R4>
	BSBW	TYPEMSGBUF
	RSB
10$:
	BRW	RANGECHK			;GO CHECK THE RETURN RANGE
;
; INPUT:
;
;	R1 = RETADR
;	R3 = DESIRED STATUS
;	R4 = PAGCNT
;	R5 = REGION
;
; OUTPUT:
;
;	R2 PRESERVED
;
EXPREGSUBR:
	$EXPREG_S R4,(R1),,R5
	MOVAL	W^EXPREGERR,R1			;ERROR CONTROL STRING
CHECK2:
	CMPL	R0,R3				;STATUS AS DESIRED?
	BEQL	10$				;BRANCH IF YES
	PUSHL	R6
	MOVL	4(SP),R6			;ADDRESS OF ERROR
	$FAO_S	(R1),MSGLEN,MSGBUFD,R6,R0,R3,R4,R5,-
		RETRANGE,RETRANGE+4
	POPR	#^M<R6>
	BSBW	TYPEMSGBUF
	RSB
10$:	MOVL	W^RETRANGE,W^INRANGE		;MAKE INPUT RANGE LOOK LIKE CRETVA/DELTVA
	DECL	R4
	ASHL	#9,R4,R4
	ADDL3	R4,W^INRANGE,W^INRANGE+4
	BRB	RANGECHK			;AND CHECK THE RETURN RANGE
;
; INPUT:
;
;	R0 = INADR
;	R1 = RETADR
;	R3 = DESIRED STATUS
;	R4 = PROTECTION TO BE SET
;	R5 = DEISRED PREVIOUS PROTECTION (1@4 MEANS NOT SPECIFIED)
;	R6 = ADDRESS TO RETURN PREVIOUS PROTECTION
;
; OUTPUT:
;
;	R2 PRESERVED
;
SETPRTSUBR:
	$SETPRT_S (R0),(R1),,R4,(R6)
	IFNOWRT	#1,(R6),10$			;SKIP PREVIOUS PROTECTION CHECK
						;IF IT WASN'T RETURNED
	CMPB	#1@4,R5				;OR IF IT WASN'T SPECIFIED
	BEQL	10$
	CMPB	R5,(R6)				;OTHERWISE CHECK IT
	BNEQ	20$				;AND BRANCH IF IT'S WRONG
10$:
	CMPL	R0,R3				;STATUS = DESIRED STATUS?
	BEQL	30$				;BRANCH IF YES
20$:
	PUSHL	R7
	MOVL	4(SP),R7			;ADDRESS OF ERROR
	$FAO_S	SETPRTERR,MSGLEN,MSGBUFD,R7,R0,R3,-
		INRANGE,INRANGE+4,RETRANGE,RETRANGE+4,-
		PREVPROT,R5
	POPL	R7
	BSBW	TYPEMSGBUF
	RSB
30$:
RANGECHK:
	BBC	#CTL$V_RNGCHK,W^CTLFLG,40$ 	;BRANCH IF RANGE CHECK IS DISABLED
	BLBC	R0,40$				;IF ERROR IN SERVICE, SKIP THE RANGE CHECK
	MOVQ	W^INRANGE,R0			;R0 = STARVA, R1 = ENDVA
	CMPL	R0,R1				;WHICH DIRECTION?
	BGTRU	10$				;BRANCH IF BACKWARDS
	BLSSU	5$				;BRANCH IF FORWARDS
	BBS	#30,R0,10$			;FOR EQUAL, P0 SPACE FORWARDS, P1 BACKWARDS
;
; REQUESTED RANGE IS FORWARDS
;
5$:	BICW	#^X1FF,R0			;FROM BYTE 0 OF STARTVA
	BISW	#^X1FF,R1			;THROUGH LAST BYTE OF ENDVA
	BRB	20$				;
;
; GOING BACKWARDS IN VIRTUAL ADDRESS SPACE
;
10$:	BISW	#^X1FF,R0			;LAST BYTE OF STARTVA
	BICW	#^X1FF,R1			;THROUGH FIRST BYTE OF ENDVA
20$:	CMPL	R0,W^RETRANGE			;IS THIS WHAT WAS RETURNED?
	BNEQ	30$				;BRANCH IF NOT, ERROR
	CMPL	R1,W^RETRANGE+4			;THIS ONE OK TOO?
	BEQL	40$				;BRANCH IF YES, RANGE OK
30$:	PUSHL	R3				;SAVE REGISTER
	MOVL	4(SP),R3			;TO USE FOR ERROR PC
	$FAO_S	<W^RANGERR>,MSGLEN,MSGBUFD,R3,- ;FORMAT THE ERROR MESSAGE
		INRANGE,INRANGE+4,RETRANGE,RETRANGE+4
	POPR	#^M<R3>				;RESTORE SAVE REGISTER
	BSBW	TYPEMSGBUF			;OUTPUT THE ERROR MESSAGE
40$:	RSB					;AND RETURN

	.SBTTL	MISCELLANEOUS SUBROUTINES
;
; TYPE A MESSAGE
;	MSGBUF IS THE ADDRESS OF THE BEGINNING OF THE STRING
;	MSGLEN CONTAINS THE SIZE (IN BYTES) OF THE STRING
;
TYPEMSGBUF:
	MOVL	W^MSGLEN,R0			;SIZE TO R0
	MOVAL	W^MSGBUF,R1			;ADDRESS TO R1
	BBC	#CTL$V_PIDMSG,W^CTLFLG,5$ 	;BRANCH IF NO PROCESS ID REQUIRED
	MOVAL	W^MSGBUFID,R1			;ADDRESS INCLUDING PID MSG
	ADDL	S^#<MSGBUF-MSGBUFID>,R0		;INCLUDE EXTRA BYTES IN COUNT
5$:
	MOVL	R1,W^RAB+RAB$L_RBF		;SET BUFFER ADDRESS
	MOVW	R0,W^RAB+RAB$W_RSZ		;AND SIZE
	$PUT	W^RAB				;OUTPUT THE MESSAGE
	BLBC	R0,20$
	RSB
20$:	$EXIT_S	R0				;EXIT WOTH ERROR STATUS
;
; INPUTS:
;
;	0(SP) = ADDRESS OF ERROR
;	R1 = ADDRESS OF FORMAT CONTROL STRING
;
; OUTPUTS:
;
;	R2 PRESERVED
;
PROBERR:
	PUSHL	R5
	MOVL	4(SP),R5
	$FAO_S	(R1),MSGLEN,MSGBUFD,R5
	POPR	#^M<R5>
	BSBW	TYPEMSGBUF
	RSB


	.END	START
