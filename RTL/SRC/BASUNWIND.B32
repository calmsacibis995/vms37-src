MODULE BAS$$UNWIND (				! UNWIND a BASIC frame
		IDENT = '1-007'			! File: BASUNWIND.B32
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!

!++
! FACILITY:  BASIC-PLUS-2 Frame Support
!
! ABSTRACT:
!
!	These routines set up and tear down frames for BASIC-PLUS-2.
!	Frames are used for main routines, external functions,
!	external subroutines, internal functions (both DEFs and DEF*s)
!	internal subroutines (GOSUBs) and condition handlers.
!
! ENVIRONMENT:  VAX-11 user mode
!
! AUTHOR: John Sauter, CREATION DATE: 05-JUN-1979
!
! MODIFIED BY:
!
! 1-001	- Original.
! 1-002	- Watch out for non-dynamic non-temporary strings.  This
!	   can happen if a string is FIELDed.  JBS 08-JUN-1979
! 1-003	- If there is I/O active in the frame being unwound, POP
!	   it.  JBS 24-JUL-1979
! 1-004	- Allow more than one CCB to be active in a frame.
!	   JBS 25-JUL-1979
! 1-005	- Correct an error in edit 004 that caused a loop.
!	   JBS 26-JUL-1979
! 1-006	- In the case of condition handlers, we must search through
!	   the stack to find the number of temp strings, since the
!	   root may be either a DEF or a DEF*, so we cannot use the
!	   base R10 to find the frame.  JBS 11-SEP-1979
! 1-007	- Make edit 006 cleverer to allow for ON ERROR GO BACK: the
!	   root frame must match in R10 and R11.  JBS 12-SEP-1979
!--

!
!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!

REQUIRE 'RTLIN:OTSLNK';				! Define OTS linkages

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    BAS$$UNWIND : NOVALUE,			! purge a frame
    BAS$$UNWIND_IO : NOVALUE;			! purge a frame's I/O

!
! INCLUDE FILES:
!

REQUIRE 'RTLIN:RTLPSECT';			! Macros for defining psects

REQUIRE 'RTLIN:BASFRAME';			! Define frame structure

REQUIRE 'RTLIN:BASINARG';			! Define argument list

REQUIRE 'RTLML:OTSISB';				! ISB symbols

LIBRARY 'RTLSTARLE';				! System symbols

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! PSECTS:
!
DECLARE_PSECTS (BAS);				! Declare psects for BAS$ facility
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    BAS$$STOP : NOVALUE,			! signals error
    STR$FREE1_DX,				! deallocate a string
    BAS$HANDLER,				! flags a BASIC frame
    BAS$$CB_POP : JSB_CB_POP;			! done with register CCB

!+
! This cell points to the currently active CCB.
!-

EXTERNAL
    OTS$$A_CUR_LUB;

!+
! The following are the error codes used in this module.
!-

EXTERNAL LITERAL
    BAS$K_RETWITGOS : UNSIGNED (8),		! RETURN without GOSUB
    BAS$K_PROLOSSOR : UNSIGNED (8);		! Program lost, sorry


GLOBAL ROUTINE BAS$$UNWIND (			! purge a frame
	FMP					! The frame being purged
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Purge a BASIC-PLUS-2 frame.  This is used when an UNWIND
!	is done through a frame.  It frees all of the strings
!	allocated in the frame.
!
! FORMAL PARAMETERS:
!
!	FMP.ra.v	The frame being purged.
!
!IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Deallocates the heap storage local to this
!	frame.
!
!--

    BEGIN

    MAP
	FMP : REF BLOCK [, BYTE] FIELD (BSF$FCD);

    LOCAL
	ARGLIST : REF BLOCK [0, BYTE] FIELD (BAS$INIT_ARGS),
	BSF$A_TEMP_STG : REF VECTOR;

!+
! Dispatch on frame type.  Only if the frame has strings
! allocated do we deallocate them.
!-

    CASE .FMP [BSF$B_PROC_CODE] FROM BSF$K_PROC_MAIN TO BSF$K_PROC_IOL OF
	SET

	[BSF$K_PROC_MAIN, BSF$K_PROC_SUB, BSF$K_PROC_EXTF, BSF$K_PROC_DEF, BSF$K_PROC_DEFS] :
	    BEGIN
!+
! Recover the parameter to the frame setup routine.  This is
! used to remember how many string descriptors there are, and
! where they are allocated.
!-
	    ARGLIST = .FMP [BSF$A_INIT_ARG];
!+
! Recover the pointer to temporary storage.
!-
	    BSF$A_TEMP_STG = .FMP [BSF$A_BASE_R9];
!+
! Deallocate any temporary string storage.
!-

	    INCR COUNTER FROM 1 TO .ARGLIST [BAS$L_IN_NO_TST] DO
		STR$FREE1_DX (BSF$A_TEMP_STG [(.COUNTER - 1)*2]);

!+
! Deallocate local dynamic strings.  Watch out for non-dynamic strings.
!-

	    INCR COUNTER FROM 1 TO .ARGLIST [BAS$W_IN_NO_DST] DO
		BEGIN

		LOCAL
		    DESC_ADDR : REF BLOCK [8, BYTE];

		DESC_ADDR = .FMP [BSF$A_STR_DESC] + ((.COUNTER - 1)*(2*%UPVAL));

		IF (.DESC_ADDR [DSC$B_CLASS] EQL DSC$K_CLASS_D) THEN STR$FREE1_DX (.DESC_ADDR);

		END

	    END;

	[BSF$K_PROC_ONER] :
	    BEGIN

	    LOCAL
		OLD_FMP : REF BLOCK [, BYTE] FIELD (BSF$FCD),
		SEARCH_DONE;

!+
! Recover the number of string temporaries allocated based on R9.
!-
	    SEARCH_DONE = 0;
	    OLD_FMP = .FMP;

	    WHILE ( NOT .SEARCH_DONE) DO
		BEGIN

		IF (.OLD_FMP EQLA 0) THEN BAS$$STOP (BAS$K_PROLOSSOR);

		IF (.OLD_FMP [BSF$A_HANDLER] NEQA BAS$HANDLER)
		THEN
		    OLD_FMP = .OLD_FMP [BSF$A_SAVED_FP]
		ELSE

		    CASE .OLD_FMP [BSF$B_PROC_CODE] FROM BSF$K_PROC_MAIN TO BSF$K_PROC_IOL OF
			SET

			[BSF$K_PROC_MAIN, BSF$K_PROC_SUB, BSF$K_PROC_EXTF, BSF$K_PROC_DEF, BSF$K_PROC_DEFS] :

			    IF ((.FMP [BSF$A_BASE_R11] EQLA .OLD_FMP [BSF$A_BASE_R11]) AND 	!
				(.FMP [BSF$A_BASE_R10] EQLA .OLD_FMP [BSF$A_BASE_R10]))
			    THEN
				SEARCH_DONE = 1
			    ELSE
				OLD_FMP = .OLD_FMP [BSF$A_SAVED_FP];

			[BSF$K_PROC_GOSB, BSF$K_PROC_ONER, BSF$K_PROC_IOL] :
			    OLD_FMP = .OLD_FMP [BSF$A_SAVED_FP];

			[OUTRANGE] :
			    BAS$$STOP (BAS$K_PROLOSSOR);
			TES;

		END;

	    ARGLIST = .OLD_FMP [BSF$A_INIT_ARG];
	    BSF$A_TEMP_STG = .FMP [BSF$A_BASE_R9];

	    INCR COUNTER FROM 1 TO .ARGLIST [BAS$L_IN_NO_TST] DO
		STR$FREE1_DX (BSF$A_TEMP_STG [(.COUNTER - 1)*2]);

	    END;

	[BSF$K_PROC_GOSB, BSF$K_PROC_IOL] :
	    BEGIN
	    0
	    END;

	[OUTRANGE] :
	    BAS$$STOP (BAS$K_PROLOSSOR);
	TES;

!+
! If the current I/O in progress was issued by this frame,
! POP it.
!-
    BAS$$UNWIND_IO (.FMP);
    RETURN;
    END;					! of BAS$$UNWIND


GLOBAL ROUTINE BAS$$UNWIND_IO (			! purge a frame's I/O
	FMP					! The frame being purged
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Purge a frame's I/O.  This is used when an UNWIND is done
!	through a frame and when a frame is restarted using RESUME.
!	It clears any I/O that may be in progress in this frame.
!
! FORMAL PARAMETERS:
!
!	FMP.ra.v	The frame being purged.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Terminates I/O in this frame.
!
!--

    BEGIN

    MAP
	FMP : REF BLOCK [, BYTE] FIELD (BSF$FCD);

    GLOBAL REGISTER
	CCB = K_CCB_REG : REF BLOCK [, BYTE];

    LOCAL
	POPPING_DONE;

    DO
	BEGIN
	POPPING_DONE = 0;
	CCB = .OTS$$A_CUR_LUB;

	IF (.CCB NEQA 0)
	THEN

	    IF (.CCB [ISB$A_USER_FP] EQLA .FMP)
	    THEN
		BEGIN
		BAS$$CB_POP ();
		POPPING_DONE = 1;
		END;

	END
    WHILE (.POPPING_DONE);

    RETURN;
    END;					! of BAS$$UNWIND_IO

END

ELUDOM
