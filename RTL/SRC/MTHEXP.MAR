	.TITLE	MTH$EXP		; Single Precision Floating Exponrntial 
				; Function (EXP)
	.IDENT /1-011/		; File: MTHEXP.MAR  Edit: RNH1011
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;
; FACILITY: MATH LIBRARY
;++
; ABSTRACT:
;
;	MTH$EXP is a function which returns the single floating point
; exponential of its single precision floating point argument.
; The call is standard call-by-reference.
;
;--
;
; VERSION: 0
;
; HISTORY:
; AUTHOR:
;	Peter Yuo, 15-Oct-76: Version 0
;
; MODIFIED BY:
;
; 0-1	Peter Yuo, 22-May-77
;
;

	.SBTTL	HISTORY	; Detailed Current Edit History

; Edit History for Version 0 of MTH$EXPDEXP
;
; 0-1	Code saving after code review March 1977
; 0-2	Finish error handling 10-June-1977
; 0-4	change RET to RSB in ERROR; fix undefined GLOBLs
; 0-5	add $SRMDEF macro
; 0-6	MTH$$ERROR changed to MTH$$SIGNAL.
;	MTH$_... changed to MTH__....
;	Changed error handling mechanism. Put error result in R0 before 
;	calling MTH$$SIGNAL in order to allow user modify error result.
; 0-7	Declared PSECTs and use SF$W_SAVE_PSW.  TNH 20-Dec-77
; 0-8	Invoke $SFDEF.  TNH 20-Dec-77
;
; Edit History for Version 1 of MTH$EXP
;
; 1-1	Split single and double precision routines into two parts;
;	Used more accurate and faster algorithms provided by M. Payne.
;	JMT 23-Jan-78
; 1-3	Fixed bug causing unexpected integer overflow.  JMT 24-MAR-78
; 1-4	Fixes for better accuracy.  Use ADDD.   JMT 11-Apr-78
; 1-5	Move .ENTRY mask definition to module header.  TNH 14-Aug-78
; 1-006	- Update version number and copyright notice.  JBS 16-NOV-78
; 1-007	- Change symbols MTH__FLOUNDMAT and MTH__FLOOVEMAT to
;	   MTH$K_FLOUNDMAT and MTH$K_FLOOVEMAT, respectively.
;	   JBS 07-DEC-78
; 1-008	- Add "_" to the PSECT directive.  JBS 22-DEC-78
; 1-009 - Declare externals.  SBL 17-May-1979
; 1-010 - Included logic to avoid the loss in significance in EMOD for
;         arguments greater than 2**4.  RNH 23-JUN-81
; 1-011 - Chaneged W^ to G^ in calls to MTH$$SIGNAL and MTH$$JACKET_TST
;	  RNH 09-Sept-1981

	.SBTTL	DECLARATIONS		; Declarative Part of Module

;
; INCLUDE FILES:	MTHJACKET.MAR
;

;
; EXTERNAL SYMBOLS:
;
	.DSABL	GBL
	.EXTRN	MTH$K_FLOUNDMAT
	.EXTRN	MTH$K_FLOOVEMAT
	.EXTRN	MTH$$SIGNAL		; SIGNAL SEVERE error
	.EXTRN	MTH$$JACKET_TST

; EQUATED SYMBOLS:

	ACMASK	= ^M<IV, R2, R3, R4>	; register saving mask and IV enable
	X_51	=	^O51		; Extension for operand in EMODF
;
; MACROS:
	$SFDEF				; define SF$ (stack frame) symbols
;
; PSECT DECLARATIONS:

	.PSECT	_MTH$CODE	PIC,SHR,LONG,EXE,NOWRT
					; program section for math routines
;
; OWN STORAGE:	none
;
; CONSTANTS:

;
; Table to be used for scaling. These constants here have been
; verified by M. Payne using her program ROOT16 on PDP-10.
;
TABLE:
	.WORD	^O040200,0		; 2**(0/16) = 1.0
	.WORD	^O040205,^O125303	; 2**(1/16)
	.WORD	^O040213,^O112702	; 2**(2/16)
	.WORD	^O040221,^O141723	; 2**(3/16)
	.WORD	^O040230,^O033760	; 2**(4/16)
	.WORD	^O040236,^O172462	; 2**(5/16)
	.WORD	^O040245,^O177327	; 2**(6/16)
	.WORD	^O040255,^O054077	; 2**(7/16)
	.WORD	^O040265,^O002363	; 2**(8/16)
	.WORD	^O040275,^O004244	; 2**(9/16)
	.WORD	^O040305,^O063452	; 2**(10/16)
	.WORD	^O040316,^O022214	; 2**(11/16)
	.WORD	^O040327,^O042375	; 2**(12/16)
	.WORD	^O040340,^O146337	; 2**(13/16)
	.WORD	^O040352,^O140307	; 2**(14/16)
	.WORD	^O040365,^O022575	; 2**(15/16)
;
; Table to be used for scaling. These constants here have been
; verified by M. Payne using her program ROOT16 on PDP-10.
;
TABDB:	.WORD	^O040200,0		; 2**(0/16) = 1.0
	.WORD	0,0
	.WORD	^O040205,^O125303	; 2**(1/16)
	.WORD	^O063714,^O044173
	.WORD	^O040213,^O112701	; 2**(2/16)
	.WORD	^O161752,^O105727
	.WORD	^O040221,^O141723	; 2**(3/16)
	.WORD	^O071653,^O010703
	.WORD	^O040230,^O033760	; 2**(4/16)
	.WORD	^O050615,^O134251
	.WORD	^O040236,^O172462	; 2**(5/16)
	.WORD	^O060221,^O120422
	.WORD	^O040245,^O177326	; 2**(6/16)
	.WORD	^O124661,^O050471
	.WORD	^O040255,^O054076	; 2**(7/16)
	.WORD	^O165102,^O120513
	.WORD	^O040265,^O002363	; 2**(8/16)
	.WORD	^O031771,^O157145
	.WORD	^O040275,^O004243	; 2**(9/16)
	.WORD	^O117530,^O006067
	.WORD	^O040305,^O063452	; 2**(10/16)
	.WORD	^O010525,^O003333
	.WORD	^O040316,^O022214	; 2**(11/16)
	.WORD	^O012437,^O102201
	.WORD	^O040327,^O042374	; 2**(12/16)
	.WORD	^O145326,^O116553
	.WORD	^O040340,^O146336	; 2**(13/16)
	.WORD	^O166052,^O112341
	.WORD	^O040352,^O140306	; 2**(14/16)
	.WORD	^O163735,^O022071
	.WORD	^O040365,^O022575	; 2**(15/16)
	.WORD	^O012444,^O103314
;
; Polynomial coefficient tables for POLYF.
;
EXPTAB:
	.WORD	^O032435,^O114444	;
	.WORD	^O034143,^O057433	;
	.WORD	^O035565,^O176760	;
	.WORD	^O037061,^O071027	;
	.WORD	0,0			; 0.0
EXPLEN = <.-EXPTAB>/4

EXPTB1:
	.WORD	^O037052,^O131463	;
	.WORD	^O037452,^O132525	;
	.WORD	^O037777,^O177777	;
	.WORD	^O040177,^O177777	;
	.WORD	^O040200,0		; 1.00000000254251
EXPLN1 = <.-EXPTB1>/4

F_16LOG2_E:				; LOG2(E) * 16
	.WORD	^O041270,^O125073
F_LN2_OV_16_HI:				; High 13 bits ln2/16
 	.LONG	^X70003E31
F_LN2_OV_16_LO:				; Low bits of ln2/16
	.LONG	^XFDF43705



	.SBTTL	MTH$EXP - Standard Single Precision Floating EXP


;++
; FUNCTIONAL DESCRIPTION:
;
; EXP  - single precision floating point function
;
; EXP(X) is computed using Chebyshev approximation 1001: about
; 27 bit accuracy.
;
;
; CALLING SEQUENCE:
;
;	Exponential.wf.v = MTH$EXP(x.rf.r)
;
; INPUT PARAMETERS:

	LONG = 4			; define longword multiplier
	x = 1 * LONG			; Contents of x is the argument

; IMPLICIT INPUTS:	none
;
; OUTPUT PARAMETERS:
;
;	VALUE:	floating exponential of the argument
;
; IMPLICIT OUTPUTS:	none
;
; SIDE EFFECTS:
;
; Signals: MTH$_FLOOVEMAT if X > 88.028 with reserved operand in R0/R1 (copied
; to the signal mechanism vector CHF$L_MCH_R0/R1 by LIB$SIGNAL).  Associated 
; message is: "FLOATING OVERFLOW IN MATH LIBRARY". Result is reserved operand 
; -0.0 unless a user supplied (or any) error handler changes CHF$L_MCH_R0/R1.
;	MTH$_FLOUNDMAT if X =< -89.416 and caller has hardware enable set.
; The result is set to +0.0. Associated message is: "FLOATING UNDERFLOW
; IN MATH LIBRARY"
;
; NOTE: This procedure disables floating point underflow, enable integer
; overflow, causes no floating overflow or other arithmetic traps, and
; preserves enables across the call.
;
;---


	.ENTRY	MTH$EXP, ACMASK	; standard call-by-reference entry
					; disable DV (and FU), enable IV
	MTH$FLAG_JACKET			; flag that this is a jacket procedure
					; in case of an error in special JSB 
					; routine
	MOVF	@x(AP), R0		; R0 = user's arg
	BSBB	MTH$EXP_R4		; R0 = special EXP(R0)
	RET				; return - result in R0

	.SBTTL	MTH$EXP_R4 - Special EXP routine

; Special EXP - used by the standard, and direct interfaces.
;
; CALLING SEQUENCE:
;	save anything needed in R0:R4
;	MOVF	...,R0			; input in R0
;	JSB	MTH$EXP_R4
;	return with result in R0

; Note: This routine is written to avoid causing any integer overflows, 
; floating overflows, or floating underflows or divide by 0 conditions, 
; whether enabled or  not.
;
; REGISTERS USED:
;	R0 - floating argument, then result
;	R2 - diddled exponent
;	R3 - scratch
;	R4 - integer part of X * LOG2(E)* 16


MTH$EXP_R4::				; special EXP routine
OVUND:	BICW3	#^X8000, R0, R2		; Preliminary test for over/underflow
	SUBW3	#^X3E00, R2, R3		; R3 = (4+exponent) + 1st 7 fract bits
	CMPW	#^X5B0, R3		; Compare |X| with 88
	BLSSU	SMTST			; to more tests if LSSU
					;  else, -4 < unbiased exp < 8
					;  no exceptions in EMODF or POLYF

	CMPW	R2, #^X4280		; Check for loss of significance in 
					; EMOD ( |X| >= 2**4
	BLSS	EVAL			; No loss of significance

;
; |X| >= 2**4.  EMOD will lose significance so the interger and fractional
; parts of X*16/ln2 must be obtained in seperate steps.
;
	MULF3	F_16LOG2_E, R0, R1	; Get integer part of X*16/ln2 in
	CVTFL	R1, R4			;    R4 (=I+J) as a longword and in
	CVTLF	R4, R1			;    R1 in F format
	MULF3	F_LN2_OV_16_HI, R1, R2	; Get fraction part of X*16/ln2 =
	SUBF	R2, R0			;    16/ln2*[ X - (I+J)*ln2/16 ]
	MULF	F_LN2_OV_16_LO, R1	;    in R0.
	SUBF	R1, R0			;
	MULF	F_16LOG2_E, R0		;
	BRB	POLY			;

EVAL:	EMODF	F_16LOG2_E, #X_51, R0, R4, R0
					; get X*16*LG2(E) with
					;  integer part in R4 (=I+J)
					;  fraction = W in R0/R1
POLY:	POLYF	R0, #EXPLEN-1, EXPTAB	; evaluate polynomial ap-
					;  proximation with POLY.
					;  5 coefficients.
	BICL3	#-16, R4, R2		; R2 = J
	MULF	TABLE[R2], R0		; else MUL by 2**(J/16)
	ADDD	TABDB[R2], R0		; add in DP 2**(J/16)
	CVTDF	R0, R0
	BICL	#15, R4			; R4 = I
	BEQL	RETURN			; if I=0, then done
	MOVAQ	(R0)[R4], R0		; shift I to exp position and
					; MUL by 2**I by exponent addition
	CMPW	R0, #^X7F		; test for over/underflow
	BLEQ	EXCEPT			; see what exception is if neg or = 0
RETURN:	RSB				; otherwise return result in R0

SMTST:
	BLSS	TOOBIG			; exception if exp+4 > 11
	CMPW	R2, #^X3400		; eliminate underflow if exp <-24
	BLSS	ONE			; bypass if E**ARG = 1
	POLYF	R0, #EXPLN1-1, EXPTB1	; evaluate alternate polynomial
	RSB

ONE:	MOVF	S^#1.0, R0		; E**ARG =1; store it
	RSB				; and return


;
; Handlers for software detected over/underflow conditions follow
;
TOOBIG:	TSTF	R0			; if big ARG > 0 goto OVERFLOW
	BGEQ	OVER
;
; Underflow; if user has FU set, signal error.  Always return 0.0
;
UNDER:
	MOVPSL	R2			; R2 = user's or jacket routine's PSL
	CALLS	#0, G^MTH$$JACKET_TST	; R0 = TRUE if JSB from jacket routine
	BLBC	R0, 10$			; branch if user did JSB
	MOVZWL	SF$W_SAVE_PSW(FP), R2	; get user PSL saved by CALL
10$:	CLRL	R0			; R0 = result. LIB$SIGNAL will save in
					; CHF$L_MCH_R0/R1 so any handler can fixup
	BBC	#6, R2, 20$		; has user enabled floating underflow?
	PUSHL	(SP)			; yes, return PC from special routine
	MOVZBL	#MTH$K_FLOUNDMAT, -(SP)	; trap code for hardware floating underflow
					; convert to MTH$_FLOUNDMAT (32-bit VAX-11 
					; exception code)
	CALLS	#2, G^MTH$$SIGNAL	; signal (condition, PC)
20$:	RSB				; return

EXCEPT:
	TSTL	R4			; test sign of I; if I < 0
	BLSS	UNDER			; go to underflow handler
;
; Signal floating overflow, return reserved operand, -0.0
;
OVER:					; else process for overflow
	PUSHL	(SP)			; return PC from special routine
	MOVZBL	#MTH$K_FLOOVEMAT, -(SP)	; hardware floating overflow
	ASHQ	#15, #1, R0		; R0 = result = reserved operand
					; -0.0. R0 will be copied to
					; signal mechanism vector (CHF$L_MCH_R0/R1)
					; so can be fixed up by any error
					; handler
	CALLS	#2, G^MTH$$SIGNAL	; signal (condition, PC)
	RSB				; return - R0 restoredd from CHF$L_MCH_R0/R1


	.END
