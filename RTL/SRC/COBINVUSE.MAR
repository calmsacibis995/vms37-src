	.TITLE	COB$$INVOKE_USE	COBOL Invoke USE Procedure
	.IDENT	/1-004/		; File: COBINVUSE.MAR

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
; FACILITY: COBOL SUPPORT
;++
; ABSTRACT:
;	This module contains the routine that invokes a COBOL USE procedure.
;
;
;--
;
; VERSION: 1
;
; HISTORY:
;
; AUTHOR:
;	Marty Jack, 2-May-1979
;
; MODIFIED BY:
;
;
;

	.SBTTL	HISTORY		; Detailed Current Edit History


; Edit History for Version 1 of COBINVUSE
;
; 1-001	- Original.  MLJ 2-May-1979
; 1-002 - Change entry point name to COB$$INVOKE_USE
; 1-003 - Signal "Recursive activation" directly. Cosmetic changes.
;	  RKR 20-OCT-79
; 1-004 - Signalling should be "Recursive activation of USE procedure"
;	  RKR 29-OCT-79

	.SBTTL	DECLARATIONS

;
; INCLUDE FILES:
	$SFDEF

;
; EXTERNAL SYMBOLS:
	.DISABLE GBL
	.EXTRN	LIB$STOP	; Signal a condition and stop
	.EXTRN	COB$HANDLER	; COBOL exception handler
	.EXTRN	COB$_USE_EXIT	; Special COBOL exception for USE EXIT
	.EXTRN	COB$_RECACTUSE	; Recursive activation of USE procedure
	.EXTRN	LIB$SIGNAL	; Signal a condition
	.EXTRN	LIB$STOP	; Signal a condition and stop
	.EXTRN	OTS$_FATINTERR	; Fatal internal error

;
; MACROS:
;	NONE
;

;
; PSECT DECLARATIONS:
	.PSECT	_COB$CODE	PIC, SHR, LONG, EXE, NOWRT

;
; EQUATED SYMBOLS:
;
;	NONE
;
; OWN STORAGE:
;	NONE
;

	.SBTTL	COB$$INVOKE_USE

;++
; FUNCTIONAL DESCRIPTION:
;
;	This routine invokes a COBOL USE procedure.
;
; CALLING SEQUENCE:
;
;	COB$$INVOKE_USE (proc.rl.v, uselist.rl.v, apval.rl.v, eopr.mq.r, pnc.ml.r)
;
; INPUT PARAMETERS:
;	
;	PROC.rl.v		The address of the USE procedure
;	USELIST.rl.v		The address of the USE list of the program
;				in which the original exception was detected
;	APVAL.rl.v		The AP of the program in which the original
;				exception was detected
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	EOPR.mq.r		The end of perform range block for the USE
;				procedure to be invoked.
;	PNC.ml.r		The perform nest counter for the module in
;				which the USE procedure is contained.
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; FUNCTION VALUE:
;
;	NONE
;
; SIDE EFFECTS:
;
;	The USE procedure is executed.
;	
;--


	.ENTRY	COB$$INVOKE_USE,-
		^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>
					; All registers MUST be saved since
					; the USE procedure will not.

proc=	4
uselist=8
apval=	12
eopr=	16
pnc=	20

;+
; Load most parameters into registers.  The USE-list pointer goes to -4(FP)
; and the AP value goes to AP.  Note that after this point, the argument
; list cannot be accessed, since AP has been modified.  The effect of this
; code is that the USE procedure will be executed with the same AP and the
; same USE-list as the routine that raised the exception originally.
;-
	MOVL	eopr(AP),R0		; Address of end of perform block
	MOVL	pnc(AP),R1		; Address of perform nest counter
	MOVL	proc(AP),R2		; Address of USE procedure
	PUSHL	uselist(AP)		; USE-list address to -4(FP)
	MOVL	apval(AP),AP		; AP value to AP

;+
; Ensure that the USE procedure is inactive.  If it is active, signal an
; error.
;-
	TSTL	(R0)			; Test for nonzero return address
	BEQL	1$			; Br if inactive
	PUSHL	#COB$_RECACTUSE		; Recursive activation of USE procedure
	CALLS	#1, G^LIB$STOP		;

;+
; Establish COB$HANDLER as the handler.  This is necessary so that (1) it will
; get control if an exception occurs during execution of the USE procedure and
; (2) so that COB$IOEXCEPTION will recognize that -4(FP) contains a valid
; USE-list pointer in case the USE procedure calls it (recursively).
;-
1$:	MOVAB	G^COB$HANDLER,(FP)

;+
; Save the return PC from the frame and overwrite it with the address of a
; handler that will get control if the USE procedure executes an EXIT PROGRAM
; (that is, a RET instruction).
;-
	PUSHL	SF$L_SAVE_PC(FP)	; Push return PC on stack
	MOVAB	B^10$,SF$L_SAVE_PC(FP)	; Overwrite with handler address

;+
; Invoke the USE procedure using the PERFORM invocation code.
;-
	DECL	(R1)			; Decrement the perform nest counter
	MOVL	(R1),4(R0)		; Move it to EOPR block
	MOVAB	B^2$,(R0)		; Move exit address to EOPR block
	JMP	(R2)			; Go to USE procedure

;+
; If control reaches this point, the USE procedure terminated by executing
; the end of perform range.  Restore the return address, and execute a RET
; to return to COB$IOEXCEPTION.
;-
2$:	MOVL	(SP)+,SF$L_SAVE_PC(FP)	; Restore return address
	RET				; Return

;+
; If control reaches this point, the USE procedure terminated by executing
; an EXIT PROGRAM.  (Note also that this removed the stack frame that we were
; executing in, and we are now executing in the frame of COB$IOEXCEPTION.)
; We must cause the program that originally invoked COB$IOEXCEPTION to return.
; We do this by signalling a condition that is intercepted by the COB$HANDLER
; that is declared in that frame, which will call SYS$UNWIND.
;-
10$:	PUSHL	#COB$_USE_EXIT		; Special exception condition
	CALLS	#1, G^LIB$SIGNAL	; Signal it
	PUSHL	#OTS$_FATINTERR		; If didn't unwind, fatal error
	CALLS	#1, G^LIB$STOP		;
;
	.END
