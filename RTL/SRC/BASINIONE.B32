MODULE BAS$INIT_ONER (				!
		IDENT = '1-003'			! File: BASINIONE.B32
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!

!++
! FACILITY:  BASIC-PLUS-2 Frame Support
!
! ABSTRACT:
!
!	These routines set up and tear down frames for BASIC-PLUS-2.
!	Frames are used for main routines, external functions,
!	external subroutines, internal functions (both DEFs and DEF*s)
!	internal subroutines (GOSUBs) and condition handlers.
!
! ENVIRONMENT:  VAX-11 user mode
!
! AUTHOR: John Sauter, CREATION DATE: 10-Oct-78
!
! MODIFIED BY:
!
! 1-001	- Original.
! 1-002	- Use BSF$ instead of BAS$ for stack frame prefix.  JBS 08-FEB-1979
! 1-003	- Set the IV bit in the PSW if requested.  JBS 11-SEP-1979
!--

!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!

LINKAGE
    BAS$COND_JSB = JSB : 			!
    GLOBAL (BSF$A_MAJOR_STG = 11, BSF$A_MINOR_STG = 10, BSF$A_TEMP_STG = 9)	!
    NOPRESERVE (8, 7, 6, 5, 4, 3, 2, 1, 0);

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    BAS$INIT_ONERR;				! start condition handler

!
! INCLUDE FILES:
!

LIBRARY 'RTLSTARLE';				! symbols for strings

REQUIRE 'RTLIN:RTLPSECT';			! macros for defing psects

REQUIRE 'RTLIN:BASFRAME';			! Define frame structure

REQUIRE 'RTLIN:BASINARG';			! Define frame parameters

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! PSECTS:
!
DECLARE_PSECTS (BAS);				! declare psects for BAS$ facility
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    BAS$HANDLER;				! handles signals


GLOBAL ROUTINE BAS$INIT_ONERR (			! start condition handler
	OLD_FMP, 				! frame of establisher
	NEW_PC					! where to start condition handler
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Set up a frame for a BASIC-PLUS-2 condition handler.
!	The frame is allocated on the stack, and R9 is left pointing
!	to its temporary storage.  R10 and R11 are set up from the
!	frame which declared the error handler.
!
! FORMAL PARAMETERS:
!
!	OLD_FMP.ra.v	Address of the frame of the establisher of
!			the error handler.
!	NEW_PC.ra.v	Address of the first line of the condition
!			handler.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	The value of R9, which points to the temporary storage,
!	and of R10 and R11, which point to the variables of the
!	establisher.
!
! ROUTINE VALUE:
!
!	The "value" of the routine is determined by how the condition
!	handler terminates.  See the BAS$ERROR module for the
!	termination routines and what value they cause to be returned.
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Leaves lots of things on the stack for use by the compiled
!	BASIC-PLUS-2 code.  This routine calls the compiled code, and
!	return to this routine's caller will be made when the compiled
!	code does a RESUME, ON ERROR GOTO 0 or ON ERROR GO BACK.
!	See the BAS$ERROR module for details.
!
!--

    BEGIN

    MAP
	OLD_FMP : REF BLOCK [0, BYTE] FIELD (BSF$FCD);

    BUILTIN
	FP,
	SP,
	BISPSW;

!+
! Define local variables as registers.  We connot have any stack
! locals since we manipulate the stack pointer in this routine.
!-

    REGISTER
	FMP : REF BLOCK [0, BYTE] FIELD (BSF$FCD),	! pointer to FCD
	ARGLIST : REF BLOCK [0, BYTE] FIELD (BAS$INIT_ARGS);	! points to establisher's arg list

!+
! The following registers are passed to the compiled code.
!-

    GLOBAL REGISTER
	BSF$A_MAJOR_STG = 11,
	BSF$A_MINOR_STG = 10,
	BSF$A_TEMP_STG = 9;

!+
! Allocate frame control data.
!-
    FMP = .FP;
    SP = .FMP - BSF$K_LENFCDONE;
!+
! Set up new temporary storage.
!-
    ARGLIST = .OLD_FMP [BSF$A_INIT_ARG];

    IF ((.ARGLIST [BAS$L_IN_NO_TST] NEQ 0) OR (.ARGLIST [BAS$L_IN_NO_NMT] NEQ 0))
    THEN
	BEGIN
!+
! We must set up R9.  First allocate string temporaries.
!-

	INCR COUNTER FROM 1 TO .ARGLIST [BAS$L_IN_NO_TST] DO
	    BEGIN
	    SP = .SP - %UPVAL;
	    .SP = 0;				! Pointer 0 implies not allocated.
	    SP = .SP - %UPVAL;
	    BLOCK [.SP, DSC$B_CLASS; 0, BYTE] = DSC$K_CLASS_D;
	    BLOCK [.SP, DSC$B_DTYPE; 0, BYTE] = DSC$K_DTYPE_T;
	    BLOCK [.SP, DSC$W_LENGTH; 0, BYTE] = 0;
	    END;

!+
! Point R9 to the last string descriptor allocated.
!-
	BSF$A_TEMP_STG = .SP;
!+
! Now allocate numeric temporaries.
!-
	SP = .SP - .ARGLIST [BAS$L_IN_NO_NMT];
	END;

!+
! Initialize the parts of the FCD relavent to a condition handler.
!-
    FMP [BSF$A_MARK] = 0;
    FMP [BSF$A_BASE_SP] = .SP;
    FMP [BSF$A_BASE_R11] = (BSF$A_MAJOR_STG = .OLD_FMP [BSF$A_BASE_R11]);
    FMP [BSF$A_BASE_R10] = (BSF$A_MINOR_STG = .OLD_FMP [BSF$A_BASE_R10]);
    FMP [BSF$A_BASE_R9] = .BSF$A_TEMP_STG;
!+
! The "PROCEDURE ID" is the address of the start of the condition handler.
!-
    FMP [BSF$A_PROC_ID] = .NEW_PC;
!+
! Copy the frame flags from the old frame.
!-
    FMP [BSF$W_FCD_FLAGS] = .OLD_FMP [BSF$W_FCD_FLAGS];
!+
! Set the frame ID to be "CONDITION HANDLER".  This frame ID is checked
! for by the RESUME, ON ERROR GOTO 0 and ON ERROR GO BACK routines.
!-
    FMP [BSF$B_PROC_CODE] = BSF$K_PROC_ONER;
!+
! Set the frame length field.
!-
    FMP [BSF$B_LEN_FCD] = BSF$K_LENFCDONE;
!+
! Set the integer interrupt enable bit in the PSW if requested.
!-

    IF ((.FMP [BSF$W_FCD_FLAGS] AND BSF$M_FCD_IV) NEQ 0) THEN BISPSW (%REF (PSW$M_IV));

!+
! Set up the exception handler.  This also marks the frame as a
! BASIC frame.
!-
    FMP [BSF$A_HANDLER] = BAS$HANDLER;
!+
! Branch to the compiled code.
!-
    BAS$COND_JSB (.NEW_PC);
!+
! The routine we "call" above will cut back the stack, and so never
! return here, but we must return a value to satisfy BLISS.
!-
    RETURN (0);
    END;					! of BAS$INIT_ONER

END

ELUDOM
