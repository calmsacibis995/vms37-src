	.TITLE	COM$R50ASC	; FORTRAN COMPATIBILITY - RADIX 50 TO ASCII CONVERSION ROUTINE
	.IDENT	/1-003/		; File: COMR50ASC.MAR  Edit: SBL1003

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;
; FACILITY: FORTRAN COMPATIBILITY LIBRARY
;++
; ABSTRACT:
;
;	R50ASC is a FORTRAN callable procedure to convert radix-50 strings
;	into ASCII Hollerith strings.
;
;--
;
; VERSION: 0
;
; HISTORY:
;
; AUTHOR:
;	Peter Yuo, 9-Sep-77: Version 0
;
; MODIFIED BY:
;
;
;

	.SBTTL	HISTORY		; Detailed Current Edit History


; Edit History for Version 01 of R50ASC
;

; 0-03	Correct constant values for EDIV instructions
; 00-06	- Change file name to COMR50ASC.MAR, PSECT to F4PCOMPAT.  TNH 5-Jan-78
; 00-07	- Bug fix: don't use no_output_char for input count!  JMT 13-Feb-78
; 1-001	- Update version number and copyright notice.  JBS 16-NOV-78
; 1-002	- Add "_" to PSECT directive.  JBS 21-DEC-78
; 1-003 - Fix bug where largest possible RAD50 value was considered
;	  invalid.  SBL 6-May-80

	.SBTTL	DECLARATIONS

;
; INCLUDE FILES:
;

;
; EXTERNAL SYMBOLS:
;

;
; MACROS:
;

;
; PSECT DECLARATIONS:
;
	.PSECT	_F4PCOMPAT$CODE	PIC,USR,CON,REL,LCL,SHR,EXE,RD,NOWRT

;
; EQUATED SYMBOLS:
;

	no_output_char	= 4		; no_output_char.rw.r
	radix50_array	= 8		; radix50_array.rbu.ra
	ascii_array	= 12		; ascii_array.wbu.ra
	L_50_POWER_2	= ^X0@16 + ^X640
					; 50(octal)**2

;
; OWN STORAGE:
;

ASCII_TAB:
	.BYTE	^O40			; 0 - space
	.BYTE	^O101			; 1 - 'A'
	.BYTE	^O102			; 2 - 'B'
	.BYTE	^O103			; 3 - 'C'
	.BYTE	^O104			; 4 - 'D'
	.BYTE	^O105			; 5 - 'E'
	.BYTE	^O106			; 6 - 'F'
	.BYTE	^O107			; 7 - 'G'
	.BYTE	^O110			; 10 - 'H'
	.BYTE	^O111			; 11 - 'I'
	.BYTE	^O112			; 12 - 'J'
	.BYTE	^O113			; 13 - 'K'
	.BYTE	^O114			; 14 - 'L'
	.BYTE	^O115			; 15 - 'M'
	.BYTE	^O116			; 16 - 'N'
	.BYTE	^O117			; 17 - 'O'
	.BYTE	^O120			; 20 - 'P'
	.BYTE	^O121			; 21 - 'Q'
	.BYTE	^O122			; 22 - 'R'
	.BYTE	^O123			; 23 - 'S'
	.BYTE	^O124			; 24 - 'T'
	.BYTE	^O125			; 25 - 'U'
	.BYTE	^O126			; 26 - 'V'
	.BYTE	^O127			; 27 - 'W'
	.BYTE	^O130			; 30 - 'X'
	.BYTE	^O131			; 31 - 'Y'
	.BYTE	^O132			; 32 - 'Z'
	.BYTE	^O44			; 33 - '$'
	.BYTE	^O56			; 34 - '.'
	.BYTE	^O77			; 35 - unused
	.BYTE	^O60			; 36 - '0'
	.BYTE	^O61			; 37 - '1'
	.BYTE	^O62			; 40 - '2'
	.BYTE	^O63			; 41 - '3'
	.BYTE	^O64			; 42 - '4'
	.BYTE	^O65			; 43 - '5'
	.BYTE	^O66			; 44 - '6'
	.BYTE	^O67			; 45 - '7'
	.BYTE	^O70			; 46 - '8'
	.BYTE	^O71			; 47 - '9'

;
; REGISTER USAGE:
;
; R0:R1 - current word for processing ( use quadword in order to use EDIV)
; R2 - holds remainder for EDIV
; R3 - CHARS_REM, remaining number of output chars to produce
; R4 - NEXT_INPUT_POSITION, next radix-50 input position
; R5 - NEXT_OUTPUT_POSITION, next ASCII output position
;

	.SBTTL	R50ASC - RADIX 50 TO ASCII CONVERSION ROUTINE

;++
; FUNCTIONAL DESCRIPTION:
;
;	Algoritmic steps:
;	1) Initialization
;	   CHARS_REM = no_output_char.rw.r
;	   NEXT_INPUT_POSITION = radix50_array.rbu.ra
;	   NEXT_OUTPUT_POSITION = ascii_array.wbu.ra
;	2) If CHARS_REM =< 0 then DONE
;	3) Get current word for processing
;	4) If overflow then (output '???', go to step 6)
;	5) Do conversion
;	   [Note] n is a word value, so longword division will not produce
;	   negative results
;	   a. (Let n = a2*50**2 + a1 * 50 + a0)
;	      Divide n by 50**2. (n = q1*50**2 + r1)
;	      ASCII_TAB[q1] is 1st ASCII char to output
;	   b. Divide r1 by 50. (r1 = q2*50 + r2)
;	      ASCII_TAB[q2] is 2nd ASCII char to output
;	      ASCII_TAB[r2] is 3rd ASCII char to output
;	6) CHARS_REM = CHARS_REM -3
;	7) Go back to step 2
;
; CALLING SEQUENCE:
;
;	CALL R50ASC (no_output_char.rw.r, radix50_array.rbu.ra,
;			ascii_array.rbu.ra)
;
;
; INPUT PARAMETERS:
;
;	no_output_char.rw.r	; the max number of output chars to produce
;	radix50_array.rbu.ra	; address of radix-50 input location
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;
;	ascii_array.wbu,ra	; addres of ascii output location
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	NONE
;
;--



	.ENTRY	R50ASC, ^M<IV, R2, R3, R4, R5>
					; standard call-by-reference entry
					; enable integer overflow
;
; Initialization
;

	MOVZWL	@no_output_char(AP), R3	; R3 = CHARS_REM
	MOVL	radix50_array(AP), R4	; R4 = NEXT_INPUT_POSITION
	MOVL	ascii_array(AP), R5	; R5 = NEXT_OUTPUT_POSITION
	CLRL	R1			; R1 always zero

;
; If CHARS_REM <= 0, then DONE
;

AGAIN:
	TSTL	R3
	BLEQ	DONE

;
; Get current word for processing
;

	MOVZWL	(R4)+, R0		; R0/R1 = current word for processing
					; use quadword for EDIV

;
; If overflow then output '???'
;

	CMPL	R0, #^O174777		; 174777(octal) is largest radix 50
					; value in a word
	BLEQ	GOOD			; branch if value is good
	MOVL	#^O134745, R0		; RAD50 for '???'

;
; Do actual conversion
;

GOOD:	DECL	R3			; dec byte count
	BLSS	DONE			; and quit if it was 0
	EDIV	#L_50_POWER_2, R0, R2, R0
					; divide current word (n) in R0/R1 by
					; 50(octal)**2,
					; n = q1 * 50(octal)**2 + r1
					; R2 = q1, R0 = r1
	MOVB	ASCII_TAB[R2], (R5)+	; output corresponding ascii char
	DECL	R3			; dec byte count again
	BLSS	DONE			; and branch if it was 0
	EDIV	#^O50, R0, R2, R0	; q1 = q2 * 50(octal) + r2
					; R0/R1 = q1, R2 = q2, R0 = r2
	MOVB	ASCII_TAB[R2], (R5)+	; output 2nd char
	DECL	R3			; last byte for this RAD50 word
	BLSS	DONE			; done if it was 0
	MOVB	ASCII_TAB[R0], (R5)+	; output 3rd char
	BRB	AGAIN			; get next input RAD50 word

;
; DONE
;
DONE:	RET

	.END
