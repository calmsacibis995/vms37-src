MODULE FOR$$ERROR (				! Internal FORTRAN error handling module
		IDENT = '1-020'			! File: FORERROR.B32  Edit: JAW1020
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  FORTRAN support library
!
! ABSTRACT:
!
!	This module contains the error handlers needed by
!	the common OTS for handling FORTRAN errors.  In particular
!	there is a handler for errors in OPEN/CLOSE where ERR=
!	means error return to caller rather than a transfer.
!	A second handler (FOR$$ERR_END_HND is provided
!	for I/O statements where the optional ERR= and END=
!	constructs require a transfer of control to the
!	user program rather than an an error return.
!	A third handler, FOR$$IOSTAT_HND is for auxilliary I/O statements
!	which either undwind with R0 containing an IOSTAT value or
!	resignal.
!	An argument specifies the cleanup to be performed if UNWIND occurs.
!
! ENVIRONMENT:  User mode, AST level or not or mixed.
!		Note: this module is both shared (with no entry vectors) and non-shared
!		if FORTRAN compatibility routines call.
!
! AUTHOR: Thomas N. Hastings, CREATION DATE: 03-Jun-77
!
! MODIFIED BY:
!
! 	Thomas N. Hastings, 03-Jun-77: VERSION 01
!	Steven B. Lionel, VAX/VMS V2.0
! Previous edit history deleted.  SBL 8-Oct-1980
! 1-001	- Update version number and copyright notice.  JBS 16-NOV-78
! 1-002	- Change REQUIRE file names from FOR... to OTS...  JBS 06-DEC-78
! 1-003	- Change OTSOPN back to FOROPN.  JBS 13-DEC-78
! 1-004 - Change FOR$$CB_RET to FOR$$CB_POP.  JBS 08-JAN-1979
! 1-005	- Move LIBRARY RTLSTARLE so that FOROPN can refer to
!	   its symbols.  JBS 10-APR-1979
! 1-006	- Use OTS$$CLOSE_FILE to close a file, since it does all of
!	   the RMS setups, and set LUB$V_DEALLOC to tell OTS$$POP_CCB
!	   to deallocate the CCB.  JBS 10-APR-1979
! 1-007 - Implement IOSTAT for OPEN, CLOSE, READ and WRITE.  SBL 25-Apr-79
! 1-008 - Deallocate the compiled format if any.  SBL 25-Apr-1979
! 1-009 - Move compiled format deallocation to OTS$$POP_CCB.  SBL 27-Apr-79
! 1-010 - Store OPEN/CLOSE IOSTAT directly.  Return -1 on all EOF errors,
!	  not just when user had END=.  SBL 27-Apr-1979
! 1-011 - Add FOR$$IOSTAT_HND.  SBL 1-May-1979
! 1-012 - Return correct error number for nos. 70-77.  Take ERR=
!	  branch on ALL errors, not just FORTRAN ones.  SBL 25-May-1979
! 1-013 - Check IOSTAT for being non-zero, instead of low bit!  SBL 7-Aug-1979
! 1-014 - Add floating faults to error codes.  SBL 24-Sept-1979
! 1-015 - Add FOR$$IO_IN_PROG handler.  SBL 24-Sept-1979
! 1-016 - Modify all error handlers so that they resignal if the error
!	  is not FOR$ or if another handler has already seen it.
!	  SBL 2-Oct-1979
! 1-017 - Fix bug where EOF IOSTAT was not being correctly returned.
!	  SBL 17-Oct-1979
! 1-018 - Don't store IOSTAT in ERR_OPECLO unless unwinding.  SBL 6-Feb-1980
! 1-019 - Look at FAO_COUNT in signal list to see where USER_PC is.  SBL 10-NOV-1980
! 1-020 - Reset RAB$L_UBF and RAB$W_USZ in CLEANUP_LUB.  JAW 08-Jun-1981
!--

!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!

REQUIRE 'RTLIN:OTSLNK';				! define all linkages

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    FOR$$ERR_OPECLO,				! Error handler for OPEN/CLOSE
    FOR$$ERR_ENDHND,				! ERR=/END= handler for I/O statements
    FOR$$IOSTAT_HND,				! IOSTAT only handler
    FOR$$IO_IN_PROG,				! I/O in progress handler
    CLEANUP_LUB : NOVALUE;			! Perform appropriate LUB cleanup if UNWIND.
						! signal list.

BUILTIN
    CALLG,					! Pass entire arg list along
    FP;						! Frame pointer

!
! INCLUDE FILES:
!

LIBRARY 'RTLSTARLE';				! STARLET library for macros and symbols

REQUIRE 'RTLML:FORERR';				! FORTRAN error number definitions

REQUIRE 'RTLML:OTSISB';				! ISB offset definitions

REQUIRE 'RTLML:OTSLUB';				! LUB offset definitions

REQUIRE 'RTLIN:OTSMAC';				! macros

REQUIRE 'RTLIN:RTLPSECT';			! Define DECLARE_PSECTS macro

REQUIRE 'RTLIN:FOROPN';				! FORTRAN OPEN/CLOSE parameter values

REQUIRE 'RTLML:FORPAR';				! FORTRAN inter-module parameters

REQUIRE 'RTLIN:RTLODBG';			! RTL debugging macros

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! PSECT DECLARATIONS:
!
DECLARE_PSECTS (FOR);				! declare PSECTs for FOR$ facility
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!
!+
! MAINTENANCE NOTE:  Since this module is called by FORTRAN compatibility
! routines which are un-shared and the entry points are not vectored,
! a separate copy of this module is linked with the user program when
! the user calls a FORTRAN compatibility routine.  In order to prevent
! data truncation errors from the linker, all external references are
! of addressing mode general (rather than word displacement) even for
! the same PSECT.
!-

EXTERNAL ROUTINE
    FOR$$CB_GET : JSB_CB_GET NOVALUE,		! Get current LUB/ISB/RAB
    						! Note: this non-shared routine is loaded if
    						! compatibility routines call, so can't reference
    						! OTS$$A_CUR_LUB directly.
    FOR$$CB_POP : JSB_CB_POP NOVALUE,		! Pop current LUB/ISB/RAB
    						! as specified by CCB.
    FOR$$FP_MATCH : CALL_CCB NOVALUE,		! Match FP in ISB chain
    FOR$$FREE_VM,				! Free virtual memory
    OTS$$CLOSE_FILE,				! RMS Close a file
    FOR$$SIG_FATINT : NOVALUE,			! SIGNAL_STOP OTS$_FATINTERR
    FOR$$SIG_DATCOR : NOVALUE,			! SIGNAL_STOP OTS$_INTDATCOR
    						! (FATAL INTERNAL ERROR IN RUN-TIME LIBRARY)
    LIB$SIG_TO_RET,				! convert a SIGNAL to error return
    						! to caller of establisher with R0 set to signal value.
    SYS$UNWIND;					! System service to unwind stack

EXTERNAL LITERAL
    FOR$_ENDDURREA : UNSIGNED (%BPVAL);		! Condition value = (24'END-OF-FILE DURING READ')


GLOBAL ROUTINE FOR$$ERR_OPECLO (		! Error condition handler for OPEN/CLOSE
	SIG_ARGS_ADR, 				! Adr. of SIGNAL args
	MCH_ARGS_ADR, 				! Adr. of mechanism args
	ENB_ARGS_ADR)				! Adr.  of ENABLE declared args
    = 						! Condition handlers always have values

!++
! FUNCTIONAL DESCRIPTION:
!
!	FOR$$ERR_OPECLO is an error conditon handler established by
!	the OPEN and CLOSE statement procedures.  If the user specified
!	an ERR= keyword parameter, the handler unwinds the stack after
!	storing the signaled error condition in the saved image of R0.
!	Otherwise, FOR$$ERR_OPECLO just resignals by simply returning
!	SS$_RESIGNAL (to CHF).
!	If and when an UNWIND occurs, the ENABLE arg UNWIND_ACT_ADR
!	specifies whether the LUB/ISB/RAB is to be pop, returned, or no-opped.
!	It is not popped if it had not yet been pushed as indicated
!	by the ENABLE arg UNWIND_ACT_ADR.
!
!	If ERR= and IOSTAT were both specified, then the returned
!	value is the FORTRAN small integer error code.
!
! FORMAL PARAMETERS:
!
!	SIG-ARG-ADR
!	SIG_ARGS_ADR.rl.ra	Adr. of Signal arg list
!	MCH_ARGS_ADR.rl.ra	Adr. of mechanism arg list
!	ENB_ARGS_ADR.rl.ra	Adr. of ENABLE arg list which contains:
!	    ENABLE_COUNT.rbu.v	No. of longword following in ENABLE arg list
!	    UNWIND_ACT_ADR.rl.r	Adr. of longword containing UNWIND action code.
!				Any of FOR$K_UNWINDNOP, FOR$K_UNWINDPOP,
!				FOR$K_UNWINDRET.
!	    [OPECLO_ADR.rlu.ra] Optional adr. of cannonical array of OPEN or CLOSE keyword
!				parameters after the encoded user parameter
!				list has been scanned and expanded into it.
!				Symbolic offsets into ENB_ARGS_ADR[1,OPEN$K_name] are of the
!				form OPEN$K_name as defined in FOROPN REQUIRE file.
!				If ommitted, assume no ERR= (DEFINE FILE, REWIND, etc)
!
! IMPLICIT INPUTS:
!
!	OTS$$A_CUR_LUB		Adr. of current LUB/ISB/RAB or 0
!				Note: obtained by calling FOR$$CB_GET
!				      rather than directly.
!
! IMPLICIT OUTPUTS:
!
!	SIG_ARGS_ADR[SIG$_USER_PC]	Set to user call PC to RTL
!
! COMPLETION CODES:
!
!	SS$_RESIGNAL if no ERR= was specified
!	SS$_NORMAL if ERR= was specified (ignored by CHF on UNWIND)
!
! SIDE EFFECTS:
!
!	If the user has specified ERR=, the stack is unwound to the
!	caller of the establisher (i.e., the user program) with the save image
!	of R0 set to the error status.
!	If no ERR= was specified,the error conditon is resignaled.
!	If UNWIND call, the current LUB/ISB/RAB may be popped or returned.
!--

    BEGIN

    BUILTIN
	AP;				! needed to pass entire argument list along TO LIB$SIG_TO_RET

    LITERAL 					! Define ENABLE arglist offsets
	ENABLE_COUNT = 0,			! Offset in ENB_ARGS_ADR of no. of enable args following
	UNWIND_ACT_ADR = 1,			! Adr. of longword containing
						! UNWIND action code.
	OPECLO_ADR = 2;				! Adr. of OPEN/CLOSE cannonical array

    MAP
	SIG_ARGS_ADR : REF BLOCK [, BYTE],	! SIGNAL args
	MCH_ARGS_ADR : REF BLOCK [, BYTE],	! mechanism args
	ENB_ARGS_ADR : REF VECTOR [OPECLO_ADR, LONG];	!ENABLE args list array

    LOCAL
	EST_FP : REF BLOCK [, BYTE],		! Establisher's FP
	SIG_PC_LOC: REF VECTOR [, LONG],	! Location of user PC in signal list
	OPECLO_ARRAY : REF VECTOR [OPEN$K_KEY_MAX + 1, LONG];	! OPEN/CLOSE cannonical array

    !+
    ! If this is unwind condition, perform cleanup. since
    ! Perform LUB cleanup indicated by EBABLE arg UNWIND_ACT_ADR
    ! (set by the establisher).
    !-

    IF .BLOCK [SIG_ARGS_ADR [CHF$L_SIG_NAME], STS$V_COND_ID;, BYTE] EQL (SS$_UNWIND^-3)
    THEN
	BEGIN
	CLEANUP_LUB (..ENB_ARGS_ADR [UNWIND_ACT_ADR]);
	RETURN SS$_NORMAL;
	END;

    OPECLO_ARRAY = .ENB_ARGS_ADR [OPECLO_ADR];

    !+
    ! If this is not a FOR$ error or if another RTL handler has seen this
    ! error (noted by signal argument for user PC being non-zero) then
    ! just resignal.
    !-

    IF .BLOCK [SIG_ARGS_ADR [CHF$L_SIG_NAME], STS$V_FAC_NO;, BYTE] NEQ FOR$K_FAC_NO
    THEN
	RETURN SS$_RESIGNAL;

    SIG_PC_LOC = SIG_ARGS_ADR [CHF$L_SIG_ARG1] + (.SIG_ARGS_ADR [CHF$L_SIG_ARG1] * %UPVAL);
    IF .SIG_PC_LOC [0] NEQ 0
    THEN
	RETURN SS$_RESIGNAL;

    !+
    ! Check if user provided ERR= keyword or not.  If yes, convert signal to
    ! a return to the caller of the establisher with condition value in R0.
    ! If IOSTAT is present, act as if ERR= is also.
    ! If caller omitted OPECLO_ADR entry in ENB_ARGS_ADR, treat as if no ERR=.
    !-

    IF .ENB_ARGS_ADR [ENABLE_COUNT] GEQU OPECLO_ADR AND (.OPECLO_ARRAY [OPEN$K_ERR] OR .OPECLO_ARRAY [
	    OPEN$K_IOSTAT]) NEQ 0
    THEN
	BEGIN

	!+
	! If IOSTAT was specified, store the value.
	!-

	IF .OPECLO_ARRAY [OPEN$K_IOSTAT] NEQ 0
	THEN
	    BEGIN

	    LOCAL
		IOSTAT;

	    IOSTAT = .BLOCK [SIG_ARGS_ADR [CHF$L_SIG_NAME], STS$V_CODE;, BYTE];

	    IF .OPECLO_ARRAY [OPEN$K_IOSTAT_L]
	    THEN
		.OPECLO_ARRAY [OPEN$K_IOSTAT] = .IOSTAT
	    ELSE
		BEGIN

		LOCAL
		    IOSTAT_ADR : REF BLOCK [, BYTE];

		IOSTAT_ADR = .OPECLO_ARRAY [OPEN$K_IOSTAT];
		IOSTAT_ADR [0, 0, 16, 0] = .IOSTAT;
		END;

	    END;

	IF NOT CALLG (.AP, LIB$SIG_TO_RET) THEN FOR$$SIG_FATINT ()

	END
    ELSE

    !+
    ! No ERR=, so set user call PC saved in stack frame of establisher and RESIGNAL
    !-

	BEGIN
	EST_FP = .MCH_ARGS_ADR [CHF$L_MCH_FRAME];
	SIG_PC_LOC [0] = .EST_FP [SF$L_SAVE_PC];

	END;					! End no ERR=

    !+
    ! Return resignal condition (ignored if SYS$UNWIND called).
    !-

    RETURN SS$_RESIGNAL
    END;					! End of FOR$$ERR_OPECLO handler


GLOBAL ROUTINE FOR$$ERR_ENDHND (		! FORTRAN I/O statement ERR=/END= error condition handler
	SIG_ARGS_ADR, 				! Adr. of signal arg list
	MCH_ARGS_ADR, 				! Adr. of mechanism arg list
	ENB_ARGS_ADR)				! Adr. of ENABLE arg list
    = 						! Return status for a condition handler

!++
! FUNCTIONAL DESCRIPTION:
!
!	FOR$$ERR_ENDHND is an error condition handler established
!	by each I/O statement which has an  ERR= and END= error transfer
!	mechanism (as an option of the user program).
!
!	If the signaled condition is FOR$_ENDDURREA (24='END-OF_FILE DURING READ')
!	and an END= has been specified by the user in his I/O statement
!	(.END_EQL_ADR NEQ 0), the handler unwinds to the user specified address (by calling
!	SYS$UNWIND with depth equal to CHF$L_MCH_DEPTH + ..INCR_DEPTH_ADR + 1)
!	and new_PC equal to ..END_EQL_ADR.
!	Otherwise, if an ERR= had been specified by the user in his I/O statement
!	(ERR_EQUL NEQ 0), the handler unwinds to the user specified address
!	by calling SYS$UNWIND with depth equal to CHF$L_MCH_DEPTH + ..INCR_DEPTH_ADR + 1
!	and new_PC equal to ..ERR_EQL_ADR.
!
!	If neither of the above cases holds, the error is resignaled
!	so that a user handler or the OTS default handler will get invoked.
!	If UNWIND occurs, the appropriate cleanup takes place,
!	as indicated by the establisher in the ENABLE arg UNWIND_ACT_ADR.
!	If FOR$K_UNWINDPOP is indicated, the current LUB/ISB/RAB is popped.
!	If FOR$K_UNWINDRET is indicated, the LUB/ISB/RAB is returned and the
!	file closed.
!	Otherwise (FOR$K_UNWINDNOP) nothing is done.
!
! FORMAL PARAMETERS:
!
!	SIG_ARGS_ADR.ml.ra	Adr. of signal arg list
!	MCH_ARGS_ADR.ml.ra	Adr. of mechanism arg list
!	ENB_ARGS_ADR.ml.ra	Adr. of ENABLE arg list which contains:
!	    UNWIND_ACT_ADR.rl.r	Adr. of longword contining UNWIND action code.
!				Any of FOR$K_UNWINDNOP, FOR$K_UNWINDPOP,
!				FOR$K_UNWINDRET.
!	    ERR_EQL_ADR.ra.r	Adr. of longword containing Adr. of the user address
!				to be transferred to or 0 on any error condition
!	    END_EQL_ADR.ra.r	Adr of longword containing Adr. of the user address
!				to be transferred to or 0 on end-of-file
!	    INCR_DEPTH_ADR.rl.r	Adr. of longword containing Incremental no. of frames between the establisher
!				and the users program (usually 0 or 1).
! Note:	All parameters to a condition handler must be addresses of values in BLISS if used in an ENABLE.
!
! IMPLICIT INPUTS:
!
!	OTS$$A_CUR_LUB		Adr. of current LUB/ISB/RAB or 0
!				Note: obtained by calling FOR$$CB_GET rather than directly.
!
! IMPLICIT OUTPUTS:
!
!	SIG_ARGS_ADR[SIG$_USER_PC]	Set to user call PC to RTL
!
! COMPLETION CODES:
!
!	SS$_RESIGNAL if no ERR= or END= was specified by user, so that
!	a user handler or the default OTS handler will get a chance.
!	SS$_NORMAL if unwind called (although ignored if unwind called)
!
! SIDE EFFECTS:
!
!	If END= and EOF OR ERR= was specified, the stack is unwound
!	to user and new_PC is set from ..END_EQL_ADR or .ERR_EQL_ADR.
!	If unwind, the current LUB/ISB/RAB may be popped or returned.
!--

    BEGIN

    LOCAL
	EST_FP : REF BLOCK [, BYTE],		! Establisher's FP
	SIG_PC_LOC: REF VECTOR [, LONG];	! Location of user PC in signal list

    LITERAL 					! Declare offsets in ENABLE VECTOR arg list
	UNWIND_ACT_ADR = 1,			! UNWIND action code
	ERR_EQL_ADR = 2,			! ERR= adr or 0
	END_EQL_ADR = 3,			! END= adr or 0
	INCR_DEPTH_ADR = 4;			! incremental depth

    MAP
	SIG_ARGS_ADR : REF BLOCK [, BYTE],	! SIGNAL arg list
	MCH_ARGS_ADR : REF BLOCK [, BYTE],	! mechanism arg list
	ENB_ARGS_ADR : REF VECTOR [INCR_DEPTH_ADR + 1, LONG];	! ENABLE arg list


    !+
    ! Check for unwinding since handler gets called when it does an unwind.
    ! If unwind, perform cleanup indicated by ENABLE arg UNWIND_ACT_ADR.
    ! Then return to the unwinder to keep unwinding (return value ignored).
    !-

    IF .BLOCK [SIG_ARGS_ADR [CHF$L_SIG_NAME], STS$V_COND_ID;, BYTE] EQL (SS$_UNWIND^-3)
    THEN
	BEGIN
	CLEANUP_LUB (..ENB_ARGS_ADR [UNWIND_ACT_ADR]);
	RETURN SS$_NORMAL;
	END;

    !+
    ! If error is not a FOR$ error or if another RTL handler has seen
    ! this error then resignal.
    !-

    IF .BLOCK [SIG_ARGS_ADR [CHF$L_SIG_NAME], STS$V_FAC_NO;, BYTE] NEQ FOR$K_FAC_NO
    THEN
	RETURN SS$_RESIGNAL;

    SIG_PC_LOC = SIG_ARGS_ADR [CHF$L_SIG_ARG1] + (.SIG_ARGS_ADR [CHF$L_SIG_ARG1] * %UPVAL);
    IF .SIG_PC_LOC [0] NEQ 0
    THEN
	RETURN SS$_RESIGNAL;

    !+
    ! Check for END= and ERR=.
    ! If this is end-of-file (during read)
    ! Unwind to the user with the new_pc being .END_ADR and with
    ! R0 as an IOSTAT value of -1.
    !-

    IF ..ENB_ARGS_ADR [END_EQL_ADR] NEQA 0 AND .SIG_ARGS_ADR [CHF$L_SIG_NAME] EQL FOR$_ENDDURREA
    THEN
	BEGIN

	LOCAL
	    T;

	MCH_ARGS_ADR [CHF$L_MCH_SAVR0] = -1;
	T = .MCH_ARGS_ADR [CHF$L_MCH_DEPTH] + ..ENB_ARGS_ADR [INCR_DEPTH_ADR] + 1;

	IF SYS$UNWIND (T, ..ENB_ARGS_ADR [END_EQL_ADR]) THEN RETURN SS$_NORMAL ELSE FOR$$SIG_FATINT ()

	END;

    !+
    ! If this is an error, and ERR= was specified by the user,
    ! Unwind to the user with the new-pc being .ERR_ADR and
    ! with R0 set to the proper IOSTAT value.
    !-

    IF ..ENB_ARGS_ADR [ERR_EQL_ADR] NEQA 0
    THEN
	BEGIN

	LOCAL
	    T;

	IF .SIG_ARGS_ADR [CHF$L_SIG_NAME] EQL FOR$_ENDDURREA
	THEN
	    MCH_ARGS_ADR [CHF$L_MCH_SAVR0] = -1
	ELSE
	    MCH_ARGS_ADR [CHF$L_MCH_SAVR0] = .BLOCK [SIG_ARGS_ADR [CHF$L_SIG_NAME], STS$V_CODE;, BYTE];

	T = .MCH_ARGS_ADR [CHF$L_MCH_DEPTH] + ..ENB_ARGS_ADR [INCR_DEPTH_ADR] + 1;

	IF SYS$UNWIND (T, ..ENB_ARGS_ADR [ERR_EQL_ADR]) THEN RETURN SS$_NORMAL ELSE FOR$$SIG_FATINT ()

	END;

    !+
    ! If neither END= nor ERR= specified by user.
    ! Scan back from frame of establisher to frame of routine to called by user.
    ! Set user CALL PC to library in SIGNAL arg list.
    ! Just indicate to the condition handling facility to resignal the condition
    ! so that a user supplied handler or the OTS default handler will get a chance to handle.
    !-

    EST_FP = .MCH_ARGS_ADR [CHF$L_MCH_FRAME];

    DECR I FROM ..ENB_ARGS_ADR [INCR_DEPTH_ADR] TO 1 DO
	EST_FP = .EST_FP [SF$L_SAVE_FP];

    SIG_PC_LOC [0] = .EST_FP [SF$L_SAVE_PC];

    RETURN SS$_RESIGNAL
    END;					!End of FOR$$ERR_ENDHND


GLOBAL ROUTINE FOR$$IOSTAT_HND (		! FORTRAN I/O IOSTAT handler
	SIG_ARGS_ADR, 				! Adr. of signal arg list
	MCH_ARGS_ADR, 				! Adr. of mechanism arg list
	ENB_ARGS_ADR)				! Adr. of ENABLE arg list
    = 						! Return status for a condition handler

!++
! FUNCTIONAL DESCRIPTION:
!
!	FOR$$IOSTAT_HND is an error condition handler established by each
!	auxilliary I/O statement which can have as optional arguments
!	ERR= and IOSTAT=.
!
!	If the enable argument ERR_EQL_ADR is non zero, FOR$$IOSTAT_HND
!	unwinds with the saved R0 set to the appropriate IOSTAT small
!	integer FORTRAN error number.  If ERR_EQL_ADR is zero, then it
!	is assumed that no ERR= is present and the error is resignalled.
!	Note that the unwind is not done to the ERR= address, rather the
!	compiled code makes a test of the returned value and branches
!	to the designated ERR= statement itself.
!
!	If UNWIND occurs, the appropriate cleanup takes place,
!	as indicated by the establisher in the ENABLE arg UNWIND_ACT_ADR.
!	If FOR$K_UNWINDPOP is indicated, the current LUB/ISB/RAB is popped.
!	If FOR$K_UNWINDRET is indicated, the LUB/ISB/RAB is returned and the
!	file closed.
!	Otherwise (FOR$K_UNWINDNOP) nothing is done.
!
! FORMAL PARAMETERS:
!
!	SIG_ARGS_ADR.ml.ra	Adr. of signal arg list
!	MCH_ARGS_ADR.ml.ra	Adr. of mechanism arg list
!	ENB_ARGS_ADR.ml.ra	Adr. of ENABLE arg list which contains:
!	    UNWIND_ACT_ADR.rl.r	Adr. of longword contining UNWIND action code.
!				Any of FOR$K_UNWINDNOP, FOR$K_UNWINDPOP,
!				FOR$K_UNWINDRET.
!	    ERR_EQL_ADR.rl.v	0 if there is no ERR= on the statement
!				1 if there is an ERR= present.
! Note:	All parameters to a condition handler must be addresses of values in BLISS if used in an ENABLE.
!
! IMPLICIT INPUTS:
!
!	OTS$$A_CUR_LUB		Adr. of current LUB/ISB/RAB or 0
!				Note: obtained by calling FOR$$CB_GET rather than directly.
!
! IMPLICIT OUTPUTS:
!
!	MCH_ARGS_ADR [CHF$L_MCH_SAVR0]	Set to an IOSTAT value
!
! COMPLETION CODES:
!
!	SS$_RESIGNAL if no ERR= or END= was specified by user, so that
!	a user handler or the default OTS handler will get a chance.
!	SS$_NORMAL if unwind called (although ignored if unwind called)
!
! SIDE EFFECTS:
!
!	If ERR= was specified, the stack is unwound to the user.
!	If unwind, the current LUB/ISB/RAB may be popped or returned.
!--

    BEGIN

    LOCAL
	EST_FP : REF BLOCK [, BYTE],		! Establisher's FP
	SIG_PC_LOC: REF VECTOR [, LONG];	! Location of user PC in signal list

    LITERAL 					! Declare offsets in ENABLE VECTOR arg list
	UNWIND_ACT_ADR = 1,			! UNWIND action code
	ERR_EQL_ADR = 2;			! ERR= present, 1 or 0

    MAP
	SIG_ARGS_ADR : REF BLOCK [, BYTE],	! SIGNAL arg list
	MCH_ARGS_ADR : REF BLOCK [, BYTE],	! mechanism arg list
	ENB_ARGS_ADR : REF VECTOR [ERR_EQL_ADR + 1, LONG];	! ENABLE arg list

    !+
    ! Check for unwinding since handler gets called when it does an unwind.
    ! If unwind, perform cleanup indicated by ENABLE arg UNWIND_ACT_ADR.
    ! Then return to the unwinder to keep unwinding (return value ignored).
    !-

    IF .BLOCK [SIG_ARGS_ADR [CHF$L_SIG_NAME], STS$V_COND_ID;, BYTE] EQL (SS$_UNWIND^-3)
    THEN
	BEGIN
	CLEANUP_LUB (..ENB_ARGS_ADR [UNWIND_ACT_ADR]);
	RETURN SS$_NORMAL;
	END;

    !+
    ! If this is not a FOR$ error or if another RTL handler has seen this
    ! error (noted by signal argument for user PC being non-zero) then
    ! just resignal.
    !-

    IF .BLOCK [SIG_ARGS_ADR [CHF$L_SIG_NAME], STS$V_FAC_NO;, BYTE] NEQ FOR$K_FAC_NO
    THEN
	RETURN SS$_RESIGNAL;
    SIG_PC_LOC = SIG_ARGS_ADR [CHF$L_SIG_ARG1] + (.SIG_ARGS_ADR [CHF$L_SIG_ARG1] * %UPVAL);
    IF .SIG_PC_LOC [0] NEQ 0
    THEN
	RETURN SS$_RESIGNAL;

    !+
    ! If this is an error, and ERR= was specified by the user,
    ! Unwind to the user with saved R0 being the IOSTAT value.
    !-

    IF ..ENB_ARGS_ADR [ERR_EQL_ADR] NEQA 0
    THEN
	BEGIN
	MCH_ARGS_ADR [CHF$L_MCH_SAVR0] = .BLOCK [SIG_ARGS_ADR [CHF$L_SIG_NAME], STS$V_CODE;, BYTE];

	IF SYS$UNWIND (0, 0) THEN RETURN SS$_NORMAL ELSE FOR$$SIG_FATINT ();

	END;

    !+
    ! If ERR= not specified by the user
    ! scan back from frame of establisher to frame of routine to called by user.
    ! Set user CALL PC to library in SIGNAL arg list.
    ! Just indicate to the condition handling facility to resignal the condition
    ! so that a user supplied handler or the OTS default handler will get a chance to handle.
    !-

    EST_FP = .MCH_ARGS_ADR [CHF$L_MCH_FRAME];
    SIG_PC_LOC [0] = .EST_FP [SF$L_SAVE_PC];
    RETURN SS$_RESIGNAL
    END;					!End of FOR$$IOSTAT_HND


GLOBAL ROUTINE FOR$$IO_IN_PROG (		! I/O in progress handler
	SIG_ARGS_ADR, 				! Address of signal arg list
	MCH_ARGS_ADR)				! Address of mechanism arg list
    =

!++
! FUNCTIONAL DESCRIPTION:
!
!	FOR$$IO_IN_PROG is a special handler that is designed to
!	allow the Run-Time Library to clean I/O that is in progress
!	when an error occurs during the processing of a multi-call
!	I/O statement.  For example, if evaluation of a variable
!	list item in a WRITE statement causes an error to be signalled,
!	there is no RTL handler in the stack frame to catch the error
!	and clean up in the case of an unwind.
!
!	This handler is enabled at the user's stack frame level.  The
!	address of whatever user handler that was in the frame is stored
!	in the ISB.  When an error is signalled, this handler finds
!	the address of the user handler, if any, and calls it.  There
!	should be no normally detectable difference caused by FOR$$IO_IN_PROG
!	being on the frame.  On unwind, the current ISB is popped and the
!	user's handler is called again.  This way, we are protected against
!	all errors on all call levels.
!
! FORMAL PARAMETERS:
!
!	SIG_ARGS_ADR.ml.ra	Address of signal arguments list
!	MCH_ARGS_ADR.ml.ra	Address of mechanism arguments list
!
! IMPLICIT INPUTS:
!
!	ISB/LUB/RAB database
!
! IMPLICIT OUTPUTS:
!
!	ISB/LUB/RAB database
!
! COMPLETION CODES:
!
!	Whatever is returned by the user handler.
!--

    BEGIN

    GLOBAL REGISTER
	CCB = 11 : REF BLOCK [, BYTE];

    BUILTIN
	AP;

    LOCAL
	USER_HANDLER,				! Address of user's handler
	EST_FP : REF BLOCK [, BYTE];		! Establisher's FP

    MAP
	SIG_ARGS_ADR : REF BLOCK [, BYTE],	! signal argument list
	MCH_ARGS_ADR : REF BLOCK [, BYTE];	! mechanism argument list

    !+
    ! Get establisher's FP
    !-

    EST_FP = .MCH_ARGS_ADR [CHF$L_MCH_FRAME];

    !+
    ! See if we are unwinding.
    !-

    IF .BLOCK [SIG_ARGS_ADR [CHF$L_SIG_NAME], STS$V_COND_ID;, BYTE] EQL (SS$_UNWIND^-3)
    THEN
	BEGIN
	FOR$$CB_GET ();				! Get address of current LUB

	IF .EST_FP NEQ .CCB [ISB$A_USER_FP] THEN FOR$$SIG_FATINT ();	! Error

	USER_HANDLER = .CCB [ISB$A_USR_HANDL];	! Get user's handler address
	CLEANUP_LUB (FOR$K_UNWINDPOP);		! Clean up LUB and restore user's handler

	IF .USER_HANDLER NEQ 0 THEN RETURN CALLG (.AP, .USER_HANDLER);

	RETURN SS$_NORMAL;
	END;

    !+
    ! This is a signal.  Find the ISB that matched the establisher's
    ! FP.
    !-

    FOR$$FP_MATCH (.EST_FP);

    !+
    ! Call user's handler and return.
    !-

    USER_HANDLER = .CCB [ISB$A_USR_HANDL];

    IF .USER_HANDLER NEQ 0 THEN RETURN CALLG (.AP, .USER_HANDLER) ELSE RETURN SS$_RESIGNAL;

    END;					! End of FOR$$IO_IN_PROG


ROUTINE CLEANUP_LUB (ACTION) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Perform the UNWIND action indicated by ACTION on the current LUB.
!
! FORMAL PARAMETERS:
!
!	ACTION.rlu.v		FOR$K_UNWINDNOP, FOR$K_UNWINDPOP, or FOR$K_UNWINDRET.
!
!--

    BEGIN

    GLOBAL REGISTER
	CCB = 11 : REF BLOCK [, BYTE];

    CASE .ACTION FROM FOR$K_UNWINDPOP TO FOR$K_UNWINDRET OF
	SET

	!+
	! If the UNWIND action is to pop the LUB/ISB/RAB, call CB_POP to do
	! the work.
	!-

	[FOR$K_UNWINDPOP] :
	    BEGIN

	    LOCAL
		USER_FP;			! User's FP

	    FOR$$CB_GET ();			! CCB set to adr. of current /LUB/ISB/RAB
	    USER_FP = .CCB [ISB$A_USER_FP];	! Get user's FP

	    IF .USER_FP NEQ 0 THEN .USER_FP = .CCB [ISB$A_USR_HANDL];	! Restore user's handler

	    CCB [RAB$L_UBF] = .CCB [LUB$A_RBUF_ADR];
	    CCB [RAB$W_USZ] = .CCB [LUB$W_RBUF_SIZE];
	    FOR$$CB_POP ();
	    END;

	!+
	! If the UNWIND action is NOP, do nothing.
	!-

	[FOR$K_UNWINDNOP] :
	;

	!+
	! If the UNWIND action is RET, then try to $CLOSE the file associated
	! with this LUB/ISB/RAB.  Deallocate any dynamic storage associated
	! with this LUB.  Return the LUB/ISB/RAB to free storage.

	[FOR$K_UNWINDRET] :
	    BEGIN
	    FOR$$CB_GET ();			! Set CCB to adr. of current LUB/ISB/RAB
!+
! See if file is RMS opened.
!-

	    IF (.CCB [LUB$W_IFI] NEQ 0)
	    THEN
!+
! Do an RMS Close of the file, and arrange to deallocate its LUB/ISB/RAB
! when all I/O to it is finished.  Normally, we are doing the only I/O
! to it.
!-
		OTS$$CLOSE_FILE ()
	    ELSE
!+
! Even though the file is not open, we wish to deallocate the LUB, since
! this is the simplest way to reinitialize it if the user tries to use
! the logical unit number again, so tell OTS$$POP_CCB to deallocate it.
!-
		CCB [LUB$V_DEALLOC] = 1;

!+
! We are done with the logical unit.
!-
	    FOR$$CB_POP ();
	    END;
	TES;

    END;

END						!End of module

ELUDOM
