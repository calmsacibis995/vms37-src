!
!<blf/width:80>
!
MODULE bpa$mesag (				! Message send/receive
		IDENT = '1-270'			! File: BPAMESAG.B32 EDIT:PL1270
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!<blf/uppercase_key>
!<blf/lowercase_user>
!

!++
! FACILITY: BASIC-PLUS AME
!
! ABSTRACT:
!
!	This module simulates some subfunctions of the RSTS monitor directive
!	.MESAG.
!	bpa$mess_dcl corresponds to SR$DCL
!	bpa$mess_lcl    - " -    to SR$LCL
!	bpa$mess_rcv    - " -    to SR$RCV
!	bpa$mess_rem    - " -    to SR$REM
!
! ENVIRONMENT: Native mode VAX processor, User mode.
!
! AUTHOR: V.Eriksson (CAP), CREATION DATE: 10 - May - 1979
!
! MODIFIED BY:
!
!	VERSION X01
!
! 	V.ERIKSSON (CAP), 27-JUNE-79
! 260	- The definition of IOSB (status block returned by QIOW) was wrong
!	  and has been changed.
!
! 	V.ERIKSSON (CAP), 27-JUNE-79
! 261	- A firqb-subfunction value has been inserted in bpa$mess_rcv.
! 1-262	- Remove REQUIRE 'REQ:AME' and added necessary
!	   BPA prefixes on the names.  JBS 02-OCT-1979
! 1-263	- Remove the XRB.  Instead, the caller will pass the necessary
!	   fields.  This is needed because in the VAX-11 BASIC environment
!	   addresses are 32-bits long, and the XRB only has 16 bits for
!	   the buffer address.  JBS 04-OCT-1979
! 1-264	- Add an exit handler, so that the logical name will be deleted
!	   when the image exits, in case it is unable to delete it.
!	   JBS 05-OCT-1979
! 1-265	- Correct some comments describing receiver selection
!	   and return 0 for job number.  JBS 07-OCT-1979
! 1-266	- Remember the parameter string, so it can be returned with each
!	   message segment read.  JBS 07-OCT-1979
! 1-267	- Correct an error in a comment.  JBS 16-OCT-1979
! 1-268 - If the permanent mailbox is already created and we do not have
!	  SYSNAM priv. to put the name of the mailbox in the table then
!	  instead of just signalling, first delete the permanent mailbox.
!	  FM 1-OCT-80
! 1-269 - Do not interpret FIRQB[FQB$W_BMAX] to be anything other than
!	  negative or positive.  Negative or zero means use temporary mailbox,
!	  and positive means use permanent mailbox. Use a constant for the
!	  size of message, when creating the mailbox. The buffer quota for
!	  the mailbox should be the system default. When these changes were
!	  made, BAS$SYS was also modified to support small send/receive.
!	  This call is simulated to look like a large send/receive to this
!	  module. As a result of adding small send/receive, we will now
!	  signal illegal sys usage instead of account or device in use
!	  if this is a small send/receive to be compatible with RSTS. FM 21-FEB_81.
! 1-270 - Use LIB$GET_EF to allocate event flags for $QIOWs.  PLL 30-Nov-81
!--

!
!<blf/page>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    bpa$mesag,				! Main routine, calls the others
    bpa$mess_dcl,				! Simulates declare receiver
    mess_rcvname : NOVALUE,	! Called by bpa$mess_decl and bpa$mess_lcl to
    ! create a logical mailbox name
    bpa$mess_lcl,			! Simulates send local data message
    bpa$mess_send : NOVALUE,	! Called by bpa$mess_lcl to send a message
    bpa$mess_rcv,			! Simulates receive local data message
    read_mailbox,		! Called by bpa$mess_rcv to read a mailbox
    ! into a buffer
    bpa$mess_rem,				! Simulates remove receiver
    bpa$mess_clear,		! Called by bpa$mess_rem to perform remove
    exit_handler : NOVALUE;			! Called at image exit

! receiver
!
! INCLUDE FILES:
!

REQUIRE 'RTLIN:BPASTRUCT';

REQUIRE 'RTLIN:BPAFQBDEF';

REQUIRE 'RTLIN:BPAMSGDEF';

REQUIRE 'RTLIN:BPAFUNDEF';

REQUIRE 'RTLIN:BPAERRDEF';

LIBRARY 'RTLSTARLE';

REQUIRE 'RTLIN:RTLPSECT';

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! PSECTS:
!
declare_psects (bpa);
!
! OWN STORAGE:
!

GLOBAL
    bpa$a_msg : $msg_def;			! Block with data needed to be

						! saved between calls

OWN
    exit_lock : INITIAL (0),		! One-time flag for exit handler
    exit_reason,
    exit_block : VECTOR [4] INITIAL (0, 0, 0, 0),
    param_string : VECTOR [20, BYTE];		! Last parameter string read

!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    LIB$GET_EF,					! allocate an event flag
    LIB$FREE_EF,				! deallocate an event flag
    bpa$wakeup;					! Routine to wake the process

						! when a message comes.


GLOBAL ROUTINE bpa$mesag (			! Main Routine
	firqb, 					! Address of the FIRQB
	buflen, 				! Length of the user's buffer
	bufadr, 				! Address of the user's buffer
	bytxfr				! Number of bytes actually transfered
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine calls one of bpa$mess_dcl, bpa$mess_lcl, bpa$mess_rcv
!	and bpa$mess_rem depending on the subfunction code in firqb. If the
!	subfunction code is faulty an error is signalled.
!
! FORMAL PARAMETERS:
!
!	firqb			=  firqb address
!	buflen.rl.v	Length of output data buffer in bytes, 0 to 512.
!	bufadr.ra.v	Starting address of data buffer
!	bytxfr.ww.r	Number of data bytes received
!
! IMPLICIT INPUTS:
!
!	Depending on the subfunction code, various fields in firqb and
!	bpa$a_msg are used as input.
!
! IMPLICIT OUTPUTS:
!
!	Depending on the subfunction code, various fields in firqb and
!	bpa$a_msg are used as output.
!
! ROUTINE VALUE:
!
!	1  -  success
!	?  -  failure
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	firqb : REF $fqb_def;			! Defines firqb

! Select the right subfunction and perform it.

    CASE .firqb [fqb$b_subfun] FROM fun$k_minsr TO fun$k_maxsr OF
	SET

	[fun$k_srlcl] :
	    bpa$mess_lcl (.firqb, .buflen, .bufadr);

	[fun$k_srrem] :
	    bpa$mess_rem (.firqb);

	[fun$k_srdcl] :
	    bpa$mess_dcl (.firqb);

	[fun$k_srrcv] :
	    bpa$mess_rcv (.firqb, .buflen, .bufadr, .bytxfr);

	[INRANGE, OUTRANGE] :
	    RETURN SIGNAL (errerr);
	TES;

    RETURN 1;
    END;					! End of bpa$mesag


ROUTINE bpa$mess_dcl (firqb) = 			! Simulates declare receiver

!++
! FUNCTIONAL DESCRIPTION:
!
!	A check is made that the caller isn't already a receiver and then
!	the input in firqb is checked. If the receivername given in firqb
!	isn't already in use, a mailbox is created with logical name equal
!	to the receivername prefixed by	'BPA$'and a buffer pointer is
!	zeroed to indicate that no partial message is outstanding.
!
! FORMAL PARAMETERS:
!
!	firqb				  =  firqb address
!
! IMPLICIT INPUTS:
!
!	firqb [fqb$t_rcvnam]              =  receiver logical name in ASCII,
!					     padded with zero (6 bytes)
!  	firqb [fqb$b_access]  		  =  1 (access type)
!	firqb [fqb$w_bmax] 		  =  max buffer area to be used for
!					     the receive queue.
!					     >0 => system memory is to be used
!					     <0 => user I/O buffer space is to
!						   be used
!	firqb [20, B_] - firqb [31, B_]   =  0
!	bpa$a_msg [msg$l_messchan] 	  =  0  (indicates that the caller
!						 isn't a receiver already)
!
! IMPLICIT OUTPUTS:
!
!	bpa$a_msg [msg$l_messchan]        =  channel opened to the mailbox
!	bpa$a_msg [msg$t_rcvname]	  =  logical name of the mailbox
!	bpa$a_msg [msg$t_namedesc]	  =  char. string desc. pointing to
!					     logical name of mailbox
!	bpa$a_msg [msg$l_buffptr]	  =  0 (pointer to the receive buffer)
!
! ROUTINE VALUE:
!
!	1  -  success
!	?  -  failure
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	firqb : REF $fqb_def;			! Defines firqb

    LOCAL
	sts,					! Status received from calls
						! to system services
	rslbuf : VECTOR [2, LONG],		! Char. string descriptor
						! pointing to $trnlog - buffer
	rslnam : BLOCK [63, BYTE],		! Buffer for $trnlog
	pribuf : VECTOR [2, LONG],		! Char. string descriptor
						! pointing to $getchn - buffer
	devbuf : BLOCK [200, BYTE],		! Buffer for $getchn
	devnam_desc : VECTOR [2, LONG],		! Char. string descr. pointing
						! to the mailbox device name
	devnam : BLOCK [9, BYTE],		! Mailbox device name
	fao_desc : VECTOR [2, LONG];		! Char. string desc. for

    						! commands to $fao

    LITERAL
	k_maxmsg_size = 512 + 20,		! max. message size.
	k_lrg_sndrcv = 22;			! Large send/receive.

    BIND
	chan = bpa$a_msg [msg$l_messchan],	! Channel
	lognam_desc = bpa$a_msg [msg$t_namedesc],	! Char.descr. of
						! receiver name.
	lognam = bpa$a_msg [msg$t_rcvname],	! Receiver name
						! $qiow
	buff_ptr = bpa$a_msg [msg$l_bufptr];	! Buffer pointer

! Is the caller already a receiver? If so, signal an error.
! If this is small send and receive then just return.

    IF .chan NEQU 0
    THEN

	IF .firqb [fqb$b_function] EQL k_lrg_sndrcv
	THEN
	    RETURN SIGNAL (inuse)
	ELSE
	    RETURN 1;

! Check input data.

    IF .firqb [fqb$b_access] NEQU 1 OR NOT CH$FAIL (CH$FIND_NOT_CH (12,
		firqb [20, b_], 0))
    THEN
	RETURN SIGNAL (badfuo);

! Create a logical name for the mailbox (receiver name from firqb, prefixed
! by 'BPA$').
    mess_rcvname (lognam_desc, lognam, .firqb);
! Check that the logical name isn't already in use.
    rslbuf [0] = 63;
    rslbuf [1] = rslnam;

    IF (sts = $trnlog (lognam = lognam_desc, rslbuf = rslbuf)) EQLU ss$_normal
    THEN
	RETURN SIGNAL (fiexst);

! Create a mailbox. If buffer maximum is negative, the mailbox should be
! temporary, otherwise permanent.

    IF .firqb [fqb$w_bmax] LEQ 0
    THEN
	sts = $crembx (prmflg = 0, chan = chan,
	    maxmsg = k_maxmsg_size, bufquo = 0)
    ELSE
	sts = $crembx (prmflg = 1, chan = chan, maxmsg = k_maxmsg_size,
	    bufquo = 0);

    IF NOT .sts THEN RETURN SIGNAL (.sts);

! Get the device name of the mailbox.
    pribuf [0] = 200;
    pribuf [1] = devbuf;

    IF NOT (sts = $getchn (chan = .chan, pribuf = pribuf))
    THEN
	RETURN SIGNAL (.sts);

    fao_desc [1] = UPLIT BYTE(%ASCIC'!AC!ZW:') + 1;
    fao_desc [0] = CH$RCHAR (.fao_desc [1] - 1);
    devnam_desc [1] = devnam;
    devnam_desc [0] = 9;

    IF NOT (sts = $fao (fao_desc, devnam_desc [0], devnam_desc,
	    devbuf [.devbuf [dib$w_devnamoff], a_], .devbuf [dib$w_unit]))
    THEN
	RETURN SIGNAL (.sts);

! Assign the logical name to the devicename of the mailbox

    IF NOT (sts = $crelog (eqlnam = devnam_desc, lognam = lognam_desc))
    THEN
	BEGIN
!+
! If we cannot create a logical then we must delete the permanent mailbox
! that we created above.
!-
	BEGIN

	IF .firqb [fqb$w_bmax] LSS 0 THEN $delmbx (chan = chan)

	END;
	RETURN SIGNAL (prviol, 0, .sts);
	END;

! Prepare for the receive calls by clearing the buffer pointer used by
! bpa$mess_rcv.
    buff_ptr = 0;
!+
! Declare an exit handler, to delete the name when the image exits.
! This may be needed if the user's program fails and it does not
! delete the name itself.
!-
    BEGIN

    LOCAL
	ast_status,
	dclexh_status;

    ast_status = $setast (enbflg = 0);

    IF ( NOT .exit_lock)
    THEN
	BEGIN
	exit_block [1] = exit_handler;
	exit_block [2] = 1;
	exit_block [3] = exit_reason;
	dclexh_status = $dclexh (desblk = exit_block);
	exit_lock = 1;
	END
    ELSE
	dclexh_status = 1;

    IF (.ast_status EQL ss$_wasset) THEN $setast (enbflg = 1);

    IF ( NOT .dclexh_status) THEN SIGNAL (badfuo, 0, .dclexh_status);

    END;
    RETURN 1;
    END;					!End of bpa$mess_dcl

ROUTINE mess_rcvname (name_desc, name, firqb) : NOVALUE = 	! Creates a
    						! logical
    						! mailbox name

!++
! FUNCTIONAL DESCRIPTION:
!
!	A string of receiver name from firqb, prefixed by 'BPA$' and  padded
!	with zeroes to 10 bytes, is given to the second parameter.
!	The character string descriptor of the string is given to the first
!	parameter.
!
! FORMAL PARAMETERS:
!
!	name_desc 	      = address to receive the char. string desc. of
!			        mailbox name
!	name      	      = address to receive the mailbox name string
!			        (max. 10 bytes)
!	firqb		      = address to firqb
!
! IMPLICIT INPUTS:
!
!	firqb [fqb$t_rcvnam]  =  receiver logical name in ASCII,
!			         padded with zero (6 bytes)
!
! IMPLICIT OUTPUTS:
!
!	name_desc	      = char. string desc. of mailbox name
!	name	  	      = string of 'BPA$' + receiver name in firqb,
!		    	        padded with zero
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	name_desc : REF VECTOR [2, LONG],	! Char. string descr.
						! of mailbox name
	name : REF BLOCK [, BYTE],		! Mailbox name
	firqb : REF $fqb_def;			! Defines firqb

    BIND
	prefix = UPLIT BYTE(%ASCIC'BPA$');	! First part of mailbox name

! Copy 'BPA$' + receiver name from firqb to recname
    CH$COPY (CH$RCHAR (prefix), prefix + 1, 6, firqb [fqb$t_rcvnam], 0, 10,
	.name);
! Initialise the character string descriptor
    name_desc [0] = CH$FIND_CH (10, .name, 0) - .name;

    IF .name_desc [0] LSS 0 THEN name_desc [0] = 10;

    name_desc [1] = .name;
    RETURN;
    END;					! End of mess_rcvname

ROUTINE bpa$mess_lcl (			! Simulate send local data message
	firqb, 					! Address of FIRQB
	buflen, 				! Length of buffer
	bufadr					! Address of buffer
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	The receiver mailbox name is created as receiver name from firqb,
!	prefixed by 'BPA$', and a channel is assigned to the mailbox.
! 	The input in firqb is checked and if faulty an error is signalled. The
!	parameterstring and the databuffer are copied into a buffer and sent
!	to the mailbox. Finally the channel is deassigned.
!
! FORMAL PARAMETERS:
!
!	firqb				  =  address to firqb
!	buflen.rl.v		Length of output data buffer in bytes
!	bufadr.ra.v		Starting address of data buffer
!
! IMPLICIT INPUTS:
!
!	firqb [fqb$b_jobnr]		  =  0
!	firqb [fqb$t_rcvnam] 		  =  receiver logical name in ASCII,
!					     padded with zero (6 bytes)
!	firqb [fqb$t_par_str]		  =  optional user parameter string,
!					     padded with zero (20 bytes)
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	1  -  success
!	?  -  failure
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	firqb : REF $fqb_def;			! Defines firqb

    LOCAL
	msg_buffer : BLOCK [532, BYTE],		! Buffer for output message
	sts,					! Status received from calls
						! to system services
	lognam_desc : VECTOR [2, LONG],		! Char. string descr. pointing
						! to the logical mailbox name
	lognam : BLOCK [10, BYTE],		! Logical name of mailbox
	chan;					! Channel to mailbox

! Create the logical name of the mailbox
    mess_rcvname (lognam_desc, lognam, .firqb);
! Assign a channnel to the mailbox

    IF NOT (sts = $assign (devnam = lognam_desc, chan = chan))
    THEN
	BEGIN

	IF .sts EQLU %X'144'
	THEN
	    RETURN SIGNAL (nosuch)
	ELSE
	    RETURN SIGNAL (.sts);

	END;

! Check input data.

    IF (.buflen GTRU 512) THEN RETURN SIGNAL (badfuo);

    IF .firqb [fqb$b_jobnr] NEQU 0 THEN RETURN SIGNAL (errerr);

! Fill msg_buffer from parameter string and data buffer
    CH$COPY (20, firqb [fqb$t_par_str], .buflen, .bufadr, 0, 532, msg_buffer);
! Send message to mailbox
    bpa$mess_send (.chan, msg_buffer, 20 + .buflen);
! Deassign the channel

    IF NOT (sts = $dassgn (chan = .chan)) THEN RETURN SIGNAL (.sts);

    RETURN 1;
    END;					!End of bpa$mess_lcl

ROUTINE bpa$mess_send (chan, p1, p2) : NOVALUE = 	! Sends message
    						! to a mailbox

!++
! FUNCTIONAL DESCRIPTION:
!
!	Sends a message to a mailbox using $qiow and checks the return
!	status.
!
! FORMAL PARAMETERS:
!
!	chan  =  channel number opened to mailbox
!	p1    =  pointer to databuffer
!	p2    =  number of bytes to send
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	?  -  failure
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	sts,				! Status received from calls to system
	status,				! need 2 locals for status
	event_flag,
	! services
	iosb : BLOCK [8, BYTE];		! Status block from $qiow		! M 260
!+
! Allocate an event flag.
!-

    sts = LIB$GET_EF (event_flag);
    IF (NOT .sts) THEN RETURN SIGNAL (.sts);

! Send the message

    sts = $qiow (efn = .event_flag, chan = .chan, iosb = iosb,
	    func = io$_writevblk OR io$m_now, p1 = .p1, p2 = .p2);
!+
! Make sure event flag is deallocated.
!-

	status = LIB$FREE_EF (event_flag);
	IF (NOT .status) THEN RETURN SIGNAL (.status); 

!+
! Now check return status from $QIOW.
!-
	IF NOT (.sts)
	THEN
	    BEGIN
		IF .sts EQLU %X'19C'
		THEN
		    RETURN SIGNAL (noroom)
		ELSE
		    RETURN SIGNAL (.sts);

	    END;


! Check status returned in iosb

    IF NOT .iosb [0, w_] THEN RETURN SIGNAL (.iosb [0, w_]);

    RETURN;
    END;					! End of bpa$mess_send

ROUTINE bpa$mess_rcv (				! Simulates receive message
	firqb, 					! Address of FIRQB
	buflen, 				! Length of input data buffer
	bufadr, 			! Starting address of data buffer
	bytxfr				! The number of bytes transferred
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	A check is made that the caller is a declared receiver and then
!	the input in firqb is checked. If no partial message is outstanding
!	the mailbox is read into a buffer and if a message is received the
!	parameter string is filled and the buffer pointer is moved 20 bytes
!	forward. The caller's data buffer is filled with data from buffer
!	pointer and onwards until the end of the message, and the buffer
!	pointer is updated. If the whole message is transferred to the caller
!	or the caller wants the message truncated, then the buffer pointer
!	is cleared to indicate that no partial message is outstanding.
!
! FORMAL PARAMETERS:
!
!	firqb				 =  firqb address
!	buflen.rl.v		Size of the receive data buffer, in bytes
!	bufadr.ra.v		Starting address of the data buffer
!	bytxfr.ww.r		Number of bytes transferred
!
! IMPLICIT INPUTS:
!
!	firqb [fqb$b_rmod]     	         =  receive modifiers :
!			                    bit 0 set -caller wants to wait
!					               for messages
!			      	            bit 1 set -caller wants message
!				                       truncated
!	firqb [8, W_] - firqb [10, W_]   =  0
!	firqb [fqb$w_sleep] 		 =  sleep time (in seconds)
!	firqb [20, W_] - firqb [31, W_]  =  0
!	bpa$a_msg [msg$l_remain]         =  the number of bytes that remain if
!				            a partial message is outstanding
!	bpa$a_msg [msg$t_buffer]         =  points to buffer containing the
!				            remaining bytes to transfer if a
!				            partial message is outstanding
!	bpa$a_msg [msg$l_messchan]       =  channel opened to mailbox by
!				            bpa$mess_dcl
!	bpa$a_msg [ms$l_buffptr]         =  points to next byte to be
!				            transferred in msg_buffer (0 if
!				            buffer is empty)
!
! IMPLICIT OUTPUTS:
!
!	firqb [fqb$w_not_tran] 	         =  number of data bytes not
!					    transferred
!	firqb [fqb$b_subfun] 	         =  -1				! A 261
!	firqb [fqb$t_par_str]            =  data passed as parameters by the
!					    sender, padded with zero
!	bpa$a_msg [msg$l_remain]         =  the number of bytes that remain if
!				            a partial message is outstanding
!	bpa$a_msg [msg$t_buffer]         =  contains the remaining bytes to
!					    transfer if a partial message is
!					    outstanding
!	bpa$a_msg [msg$l_buffptr]        =  points to next byte to be
!					    transferred in msg_buffer (0 if
!				            buffer is empty)
!	firqb [fqb$b_jobnr]		 =  0
!
! ROUTINE VALUE:
!
!	1  -  success
!	?  -  failure
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	firqb : REF $fqb_def,			! Defines firqb
	bytxfr : REF VECTOR [1, WORD];		! Where to store byte count

    BIND
	bytes_remain = bpa$a_msg [msg$l_remain],	! Remaining bytes
	buff_ptr = bpa$a_msg [msg$l_bufptr],	! Buffer pointer
	rcv_mod = firqb [fqb$b_rmod] : BITVECTOR [8],	! Receive modifier
	msg_buffer = bpa$a_msg [msg$t_buffer];	! Buffer

! Is the caller a declared receiver? If not, then signal an error.

    IF .bpa$a_msg [msg$l_messchan] EQLU 0 THEN RETURN SIGNAL (badfuo);

! Check input data

    IF ( NOT CH$FAIL (CH$FIND_NOT_CH (4, firqb [8, b_], 0)) OR 	!
	NOT CH$FAIL (CH$FIND_NOT_CH (12, firqb [20, b_], 0)))
    THEN
	RETURN SIGNAL (badfuo);

! If no partial message is outstanding (i.e. buffer pointer = 0), then try to
! read the mailbox into msg_buffer. The length of the received message is
! stored in bytes_remain.

    IF .buff_ptr EQLU 0
    THEN
	BEGIN
	bytes_remain = read_mailbox (.firqb);
! If a message is received, then fill the parameter buffer

	IF .bytes_remain LEQU 20
	THEN
	    BEGIN
	    CH$COPY (.bytes_remain, msg_buffer, 0, 20, param_string [0]);
	    bytes_remain = 0;
	    END
	ELSE
	    BEGIN
	    CH$COPY (20, msg_buffer, 0, 20, param_string [0]);
	    buff_ptr = msg_buffer + 20;
	    bytes_remain = .bytes_remain - 20;
	    END;

	END;

!+
! Place the parameter buffer in the FIRQB.  This will be either from the
! beginning of a message (above) or from the previous message.
!-
    CH$COPY (20, param_string [0], 0, 20, firqb [fqb$t_par_str]);
! If msg-buffer is empty, then clear 'number of bytes transferred' and
! 'number of bytes not transferred'.

    IF .bytes_remain EQLU 0
    THEN
	BEGIN
	bytxfr [0] = 0;
	firqb [fqb$w_not_tran] = 0;
	END
    ELSE
! If the number of bytes remaining in msg-buffer is less than bufferlength,
! then set 'number of bytes transferred' equal to number of bytes remaining
! and clear 'number of bytes not transferred'.
	BEGIN

	IF .bytes_remain LEQU .buflen
	THEN
	    BEGIN
	    bytxfr [0] = .bytes_remain;
	    firqb [fqb$w_not_tran] = 0;
	    END
	ELSE
! If the number of bytes remaining in msg-buffer is larger than bufferlength,
! then set 'number of bytes transferred' equal to bufferlength and 'number of
! bytes not transferred' equal to number of bytes remaining minus the buffer-
! length.
	    BEGIN
	    bytxfr [0] = .buflen;
	    firqb [fqb$w_not_tran] = .bytes_remain - .buflen;
	    END;

! Copy 'number of bytes transferred' from msg-buffer to receive buffer and
! update the buffer pointer.
	CH$COPY (.bytxfr [0], .buff_ptr, 0, .buflen, .bufadr);
	buff_ptr = .buff_ptr + .bytxfr [0];
	END;

! Set number of bytes remaining in msg-buffer equal to number of bytes not
! transferred.
    bytes_remain = .firqb [fqb$w_not_tran];
! Set the subfunction code for data message in firqb.			! A 261
    firqb [fqb$b_subfun] = fun$k_srlcl;		! A 261
! If all the message is transferred or if the caller wants the message
! truncated, clear the bufferpointer.

    IF .bytes_remain EQLU 0 OR .rcv_mod [1] THEN buff_ptr = 0;

!+
! In case the caller is using the job number field, set it to zero.
!-
    firqb [fqb$b_jobnr] = 0;
    RETURN 1;
    END;					!End of bpa$mess_rcv

ROUTINE read_mailbox (firqb) = 			! Reads the mailbox

!++
! FUNCTIONAL DESCRIPTION:
!
!	The receiver mailbox is read into a buffer. If a message is received,
!	the length of the message is returned to the caller. If no message is
!	received and the caller doesn't want to wait, an error is signalled.
!	If the caller wants to wait, an AST is set to awaken the process when
!	the message comes and the process is put to sleep. If a sleep time is
!	specified in firqb, the process is awakened when the time has expired.
!	When the process finally wakes up either by the arrival of a message
!	or by an expired sleep time, an error is signalled.
!
! FORMAL PARAMETERS:
!
!	firqb			    =  address to firqb
!
! IMPLICIT INPUTS:
!
!	bpa$a_msg [msg$l_messchan]  =  channel opened to mailbox by
!				       bpa$mess_dcl
!	bpa$a_msg [msg$t_buffer]    =  points to buffer for message from
!				       mailbox
!	firqb [fqb$b_rmod]	    =  receive modifier :
!				       bit 0 set - caller wants to wait for
!				                   messages
!	firqb [fqb$w_sleep]	    =  sleep time (in seconds)
!
! IMPLICIT OUTPUTS:
!
!	bpa$a_msg [msg$t_buffer]    =  points to buffer for received message
!
! ROUTINE VALUE:
!
!	length of received message (in bytes)
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    BUILTIN
	emul;

    MAP
	firqb : REF $fqb_def;			! Defines firqb

    LOCAL
	sts,					! Status received from calls
						! to system services
	status,					! need 2 locals for status
	event_flag,
	iosb : BLOCK [8, BYTE],		! Status block from $qiow	! M 260
	daytim : VECTOR [2, LONG];		! Stores sleeptime in system

    						! time format

    BIND
	chan = bpa$a_msg [msg$l_messchan],	! Channel
	msg_buffer = bpa$a_msg [msg$t_buffer],	! Buffer
	qiow_sts = iosb [0, w_] : WORD,		! Ret.stat.	! M 260
						! by $qiow
	transf_bytes = iosb [2, w_] : WORD,	! # of trans-! M 260
						! ferred bytes
	rcv_mod = firqb [fqb$b_rmod] : BITVECTOR [8];	! Receiver modifier

!+
! Allocate event flag.
!-

    sts = LIB$GET_EF (event_flag);
    IF (NOT .sts) THEN RETURN SIGNAL (.sts);

! Try to get a new message from the mailbox

    sts = $qiow (efn = .event_flag, chan = .chan, iosb = iosb,
	    func = io$_readvblk OR io$m_now, p1 = msg_buffer, p2 = 532);

!+
! Deallocate the event flag, and then check the status of the $QIOW.
!-

    status = LIB$FREE_EF (event_flag);
    IF NOT (.status) THEN RETURN SIGNAL (.status);

    IF NOT (.sts) THEN RETURN SIGNAL (.sts);

    IF NOT .qiow_sts AND .qiow_sts NEQU ss$_endoffile
    THEN
	RETURN SIGNAL (.qiow_sts);

! If a message is received, then return number of transferred bytes.

    IF .qiow_sts NEQU ss$_endoffile THEN RETURN .transf_bytes;

! If there is no message and the caller doesn't want to wait, then signal
! an error.

    IF NOT .rcv_mod [0] THEN RETURN SIGNAL (nosuch);

! If the caller wants to wait for the message and a sleeptime is specified,
! then schedule a wakeup.

    IF .firqb [fqb$w_sleep] NEQU 0
    THEN
	BEGIN
	emul (%REF (-10000000), firqb [fqb$w_sleep], %REF (0), daytim [0]);

	IF NOT (sts = $schdwk (daytim = daytim)) THEN RETURN SIGNAL (.sts);

	END
    ELSE
! If the caller wants to wait for the message but no sleeptime is specified,
! then set an attention AST (so that the process is awakened when the next
! message comes).
	BEGIN

	sts = LIB$GET_EF (event_flag);
	IF (NOT .sts) THEN RETURN SIGNAL (.sts);

	IF NOT (sts = $qiow (efn = .event_flag, chan = .chan, iosb = iosb,
		func = io$_setmode OR io$m_wrtattn, p1 = bpa$wakeup))
	THEN
	    RETURN SIGNAL (.sts);

	IF NOT .qiow_sts THEN RETURN SIGNAL (.qiow_sts);

	sts = LIB$FREE_EF (event_flag);
	IF (NOT .sts) THEN RETURN SIGNAL (.sts);

	END;

! Hibernate the process
    $hiber;
! When the process wakes up, return an error.
    RETURN SIGNAL (nosuch);
    END;					!End of read_mailbox

ROUTINE bpa$mess_rem (firqb) = 			! Simulates remove receiver

!++
! FUNCTIONAL DESCRIPTION:
!
!	The input in firqb is checked and if faulty an error is signalled.
!	The receiver is removed by calling, bpa$mess_clear.
!
! FORMAL PARAMETERS:
!
!	firqb				 =  address to firqb
!
! IMPLICIT INPUTS:
!
!	firqb [fqb$b_jobnr]		 =   0
!	firqb [6, B_] - firqb [31, B_]   =   0
!	bpa$a_msg [msg$l_messchan]	 =   channel opened to mailbox by
!					     receiver
!	bpa$a_msg [msg$t_namedesc]	 =   char. string desc. pointing
!					     to logical name of mailbox
!
! IMPLICIT OUTPUTS:
!
!	bpa$a_msg [msg$l_messchan]       =   0 (indicates that the receiver
!						is removed)
!
! ROUTINE VALUE:
!
!	1  -  success
!	?  -  failure
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	firqb : REF $fqb_def;			! Defines firqb

! Check input.

    IF NOT CH$FAIL (CH$FIND_NOT_CH (26, CH$PTR (firqb [6, b_]), 0))
    THEN
	RETURN SIGNAL (badfuo);

    IF .firqb [fqb$b_jobnr] NEQU 0 THEN RETURN SIGNAL (errerr);

! Perform 'remove receiver'
    bpa$mess_clear ();
    RETURN 1;
    END;					!End of bpa$mess_rem

ROUTINE exit_handler (				! Exit handler
	exit_reason				! reason
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This is the exit handler for the BASIC-PLUS message handler.
!	It deletes the system logical name defined by this user, in
!	case it hasn't been deleted already.
!
! FORMAL PARAMETERS:
!
!	EXIT_REASON.rl.r	Not used
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Deletes the system logical name, if there is one.
!
!--

    BEGIN
    bpa$mess_clear ();
    RETURN;
    END;					!End of exit_handler


GLOBAL ROUTINE bpa$mess_clear = 		! Removes a permanent receiver

!++
! FUNCTIONAL DESCRIPTION:
!
!	If the caller isn't a declared receiver, success is returned.
!	The reciver mailbox is deleted, the channel to the mailbox is
!	deassigned, the mailbox logical name is deleted and the channel is
!       zeroed to indicate that the caller no longer is a receiver.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	bpa$a_msg [msg$l_messchan]   =   channel opened to mailbox by receiver
!	bpa$a_msg [msg$t_namedesc]   =   char. string desc. pointing to the
!					 logical name of mailbox
!
! IMPLICIT OUTPUTS:
!
!	bpa$a_msg [msg$l_messchan]   =   0
!
! ROUTINE VALUE:
!
!	success  -  1
!	failure  -  ?
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	sts;					! Status received from

    						! calls to sys. serv.

    BIND
	chan = bpa$a_msg [msg$l_messchan],	! Channel
	lognam_desc = bpa$a_msg [msg$t_namedesc];	! Char. string desc.

    						! of mailbox name
! Is the caller a declared receiver? If not, then return success.

    IF .bpa$a_msg [msg$l_messchan] EQLU 0 THEN RETURN 1;

! Delete the mailbox

    IF NOT (sts = $delmbx (chan = .chan)) THEN RETURN SIGNAL (.sts);

! Deassign the channel

    IF NOT (sts = $dassgn (chan = .chan)) THEN RETURN SIGNAL (.sts);

! Delete the logical name

    IF NOT (sts = $dellog (lognam = lognam_desc)) THEN RETURN SIGNAL (.sts);

! Clear chan to indicate that the receiver is removed.
    chan = 0;
    RETURN 1;
    END;					!End of bpa$mess_clear

END						!End of module

ELUDOM
