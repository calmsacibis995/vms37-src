	.TITLE	LIB$MOVTUC - Move translated until escape character 
	.IDENT	/1-011/		; File: LIBMOVTUC.MAR  Edit: RKR1011

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY: General Utility Library
;
; ABSTRACT:
;
;	A translate and move of the source string to the destination 
;	is performed until an escape character is found.
;
; ENVIRONMENT: User Mode, AST Reentrant
;
;--
; AUTHOR: Donald G. Petersen, CREATION DATE: 03-Jan-78
;
; MODIFIED BY:
;
;	DGP, 03-Jan-78 : VERSION 00
; 01	- Original 
; 00-02	- DGP 06-Jan-78 - Point to escape character properly
; 00-03	- DGP 18-Jan-78 - add optional fifth argument (ECO)
; 1-001	- Update version number and copyright notice.  JBS 16-NOV-78
; 1-002	- Add "_" to PSECT directive.  JBS 21-DEC-78
; 1-003	- Handle dynamic destination strings.  JBS 20-MAR-1979
; 1-004	- Change OTS$S and LIB$S to STR$.  JBS 21-MAY-1979
; 1-005	- Put all externals in .EXTRN directives.  JBS 19-JUN-1979
; 1-006 - Return zero if source string exhausted with no escape.
;	  SPR 11-25936  SBL 7-Sept-1979
; 1-007	- Use general addressing when calling external routines, to
;	   make this routine position independent.  JBS 15-SEP-1979
; 1-008 - Enhance to recognize additional classes of string descriptors
;	  by invoking LIB$ANALYZE_SDESC_R3 to extract length and address
;	  of 1st data byte from descriptor.  
;	  Use LIB$SGET1_DD instead of STR$GET1_DX to allocate space.
;	  This should be faster and eliminates the need for establishing
;	  LIB$STRTO_RET as a handler.
;	  Fix error where bad results would be returned if the escape
;	  chararcter was the 65535th.
;	  RKR 22-MAY-1981
; 1-009 - Put back 1-006 fix, accidentally removed by 1-008.  Analyze
;	  source descriptor before allocating dest.  SBL 23-Sept-1981
; 1-010 - Add special-case code to process string descriptors that 
;	  "read" like fixed string descriptors.  
;	  Fix calling sequence to LIB$SGET1_DD.  Needs length by
;	  reference.
;	  RKR 8-OCT-1981.
; 1-011 - Redirect jsb's from LIB$ANALYZE_SDESC_R3 to
;	  LIB$ANALYZE_SDESC_R2.  Reorganize register usage to free
;	  R10 which can be removed from the entry mask.
;	  RKR 18-NOV-1981

	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;
	$DSCDEF				; Descriptor symbols
	$CHFDEF				; CHF definitions
;
; MACROS:
;
;	NONE
;
; EQUATED SYMBOLS:
;
;	NONE
;
; OWN STORAGE:
;
;	NONE
;
; PSECT DECLARATIONS:
;
	.PSECT _LIB$CODE PIC, SHR, LONG, EXE, NOWRT
;
; EXTERNALS
;
	.DSABL	GBL			; Only explicit externals
	.EXTRN	LIB$SGET1_DD		; Allocate a string
	.EXTRN	LIB$ANALYZE_SDESC_R2	; Extract length and address of
					; 1st data byte

	.SBTTL	LIB$MOVTUC  - translate and move until escape found 
;++
; FUNCTIONAL DESCRIPTION:
;
;	Each character of the source string is used as an index into 
;	the translation table.  If the translation character is the 
;	escape character then the move halts.
;	Otherwise the translated character is placed into the 
;	destination string.
;	Translation continues until either the source or destination 
;	strings are exhausted, or an escape character is found.
;	If an escape character is found, the relative index of the 
;	character in the source string which translated into the 
;	escape character is returned.  Otherwise; a zero is returned.  
;	If either string is of zero length, then a zero is returned.
;	If the destination string cannot be allocated, or a descriptor 
;	can't be handled by LIB$ANALYZE_SDESC, a -1 is returned.
;
; CALLING SEQUENCE:
;
;	esc_index.wl.v = LIB$MOVTUC (src.rt.dx, 
;				     esc.rt.dx, 
;				     table.rt.dx, 
;				     dst.wt.dx
;				     [,fill.rt.dx])
;
; INPUT PARAMETERS:
;
	SOURCE = 4			; Adr of source string desc.
	ESC = 8				; Adr of escape string desc
	TABLE = 12			; Adr of translation table desc
	FILL = 20			; Adr of fill character desc
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
	DEST = 16			; Adr of destination string desc
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; FUNCTION VALUE:
;
;	esc_index.wl.v
;
; SIDE EFFECTS:
;
;	May allocate storage for the destination.
;
;--

	.ENTRY LIB$MOVTUC , ^M<R2, R3, R4, R5, R6, R7, R8, R9> 
							; Entry point
;+
; Get the length and address of the source string.
;-
	MOVL	SOURCE(AP), R0		; Address of SOURCE descriptor
	CMPB	DSC$B_CLASS(R0), #DSC$K_CLASS_D	; read like fixed ?
	BGTRU	5$			; no
	MOVQ	@SOURCE(AP), R6		; length->R6, address->R7
	BRB	15$			; join common flow

5$:	JSB	G^LIB$ANALYZE_SDESC_R2	; Extract: length->R1, addr->R2
	BLBS	R0, 10$			; Skip if no error
	BRW	ERROR			; Error return

10$:	MOVQ	R1, R6			; save length and addr of SOURCE
					; length ->R6, addr ->R7

;+
; If the destination string is dynamic, allocate enough space for it
; that it will hold the whole translated source string.
;-
15$:	MOVL	DEST(AP), R0			; Point to dest descr.
	CMPB	#DSC$K_CLASS_D, DSC$B_CLASS(R0)	; Dynamic?
	BNEQ	20$				; No, use it as is.
	PUSHL	R6				; length
	PUSHL	R0				; address
	PUSHAW	4(SP)				; address of length
	CALLS	#2, G^LIB$SGET1_DD
	ADDL2	#4, SP				; realign stack
	BLBS	R0, 20$			; continue if successful
	BRW	ERROR			; else prepare to quit

;+
; Extract the various lengths and addresses we will need and leave
; in registers for the actual MOVTUC instruction to follow.
;-
20$:	MOVL	TABLE(AP), R0		; Address of TABLE descriptor
	CMPB	DSC$B_CLASS(R0), #DSC$K_CLASS_D	; read like fixed ?
	BGTRU	25$			; no
	MOVL	DSC$A_POINTER(R0), R8	; address of TABLE
	BRB	35$			; join common flow

25$:	JSB	G^LIB$ANALYZE_SDESC_R2	; Extract: length->R1, addr->R2
	BLBS	R0, 30$			; Quit if error
	BRW	ERROR			; .

30$:	MOVL	R2, R8			; save addr of TABLE

35$:	CMPB	(AP), #<FILL/4>		; Check for presence of fill
	BLSSU	45$			; if not there
	MOVL	FILL(AP), R0		; Address of FILL descriptor
	CMPB	DSC$B_CLASS(R0), #DSC$K_CLASS_D	; read like fill ?
	BGTRU	40$			; no
	MOVZBL	@DSC$A_POINTER(R0), R9	; value of fill character
	BRB	45$			; join common flow

40$:	JSB	G^LIB$ANALYZE_SDESC_R2	; Extract: length->R1, addr->R2
	BLBC	R0, ERROR		; Quit if error
	MOVZBL	(R2), R9		; value of fill character

45$:	MOVL	ESC(AP), R0		; Address of ESC descriptor
	CMPB	DSC$B_CLASS(R0), #DSC$K_CLASS_D	; read like fixed ?
	BGTRU	50$			; no
	MOVZBL	@DSC$A_POINTER(R0), R3	; value of ESC character
	BRB	55$			; join common flow

50$:	JSB	G^LIB$ANALYZE_SDESC_R2	; Extract: length->R1, addr->R2
	BLBC	R0, ERROR		; Quit if error

	MOVZBL	(R2), R3		; value of ESC character
55$:	MOVL	DEST(AP), R0		; Address of DEST descriptor
	CMPB	DSC$B_CLASS(R0), #DSC$K_CLASS_D	; read like fixed ?
	BGTRU	60$			; no
	MOVQ	@DEST(AP), R1		; length->R1, address->R2
	BRB	TEST_VS			; join common flow

60$:	JSB	G^LIB$ANALYZE_SDESC_R2	; Extract: length->R1, addr->R2
	BLBC	R0, ERROR		; Quit if error

;+
; Class_VS destination is handled as a special case.  We must try to
; force its current length (CURLEN) field to be the same size as the
; source length.  However, this new length must be the MIN( source_len,
; and MAXSTRLEN).  If source_len is greater than MAXSTRLEN, then output
; will be trunctated to MAXSTRLEN chars.
;-
TEST_VS:
	MOVL	DEST(AP), R0		; Address of DEST descriptor
	CMPB	DSC$B_CLASS(R0), #DSC$K_CLASS_VS	; Class _VS ?
	BNEQ	75$			; no, no special action needed
	CMPW	R6, DSC$W_MAXSTRLEN(R0)	; SOURCE len : MAXSTRLEN
	BLEQ	65$			; if SOURCE len leq
	MOVZWL	DSC$W_MAXSTRLEN(R0), R1	; use MAXSTRLEN for CURLEN
	BRB	70$

65$:	MOVZWL	R6, R1			; use SOURCE len for CURLEN
70$:	MOVW	R1, @DSC$A_POINTER(R0)	; rewrite CURLEN field
75$:

;+
;		For those of you who have lost track,
;		register contents at this point:
;
;		R0 = address of DEST descriptor
;		R1 = length of DEST string
;		R2 = address of 1st byte of DEST string
;		R3 = value of ESC character
;		R4 = garbage
;		R5 = garbage
;		R6 = length of SOURCE string
;		R7 = address of 1st byte of SOURCE string
;		R8 = address of 1st byte of TABLE
;		R9= value of FILL character (if supplied)
;+
; prototype movtc
;	movtuc srclen, srcaddr, escchar, tableaddr, dstlen, dstaddr
;-
	MOVTUC	R6, (R7), R3, (R8), R1, (R2)
				; State of regs after a MOVTUC instr.
				; R0 = number of bytes remaining in
				;      source string (including the
				;      byte which caused the escape.
				;      Is zero only if the entire source
				;      string was translated and moved
				;      without escape.
				; R1 = address of the byte which
				;      resulted in destination string
				;      exhaustion or escape.  If no
				;      exhaustion or escape, then
				;      address of one byte beyond the
				;      source string.
				; R2 = 0
				; R3 = address of the table
				; R4 = number of bytes remaining in the
				;      destinatin string.
				; R5 = address of the byte in the
				;      destination string which would
				;      have received the translated byte
				;      that caused the escape or would
				;      have received a translated byte
				;      if the source string were not
				;      exhausted.  If not exhaustion
				;      or escape, then address of one
				;      byte beyond the destination
				;      string.
	BVC	80$		; branch if no escape before source 
				; or destination string exhausted.
				; R0 is not zero if dest. string is
				; shorter than source string!
	SUBW3	R0, R6, R0	; R0 = length of source - no. of bytes
				; remaining in source including escape 
				; character
	INCL	R0		; 1 - origin
	BRB	85$

80$:	CLRL	R0		; We return zero if the destination 
				; string was full before an escape found
85$:	CMPB	(AP), #<FILL/4>	; Check for presence of fill character
	BLSSU	90$		; branch if no fill
	MOVL	R0, -(SP)	; save index on stack
	MOVC5	#0, 0(SP), R9, R4, (R5); fill destination string
	MOVL	(SP)+, R0	; R0 = return value
90$:	RET

;+
; Come here if the allocation of the destination string fails or a 
; descriptor is bad.  Return a -1, since the string position cannot 
; be -1.
;-
ERROR:	MNEGL	#1, R0		; Return -1
	RET			; to the caller.

	.END
