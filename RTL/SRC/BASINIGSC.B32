MODULE BAS$INIT_C_GSB (				!
		IDENT = '1-004'			! File: BASINIGSC.B32
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!

!++
! FACILITY:  BASIC-PLUS-2 Frame Support
!
! ABSTRACT:
!
!	These routines set up and tear down frames for BASIC-PLUS-2.
!	Frames are used for main routines, external functions,
!	external subroutines, internal functions (both DEFs and DEF*s)
!	internal subroutines (GOSUBs) and condition handlers.
!
! ENVIRONMENT:  VAX-11 user mode
!
! AUTHOR: John Sauter, CREATION DATE: 10-Oct-78
!
! MODIFIED BY:
!
! 1-001	- Original.  JBS 10-Oct-78
! 1-002	- Increment SP, not .SP.  JBS 02-JAN-1979
! 1-003	- Change stack frame prefixes from BAS$ to BSF$.  JBS 08-FEB-1979
! 1-004	- Set the IV bit in the PSW if requested.  JBS 11-SEP-1979
!--

!
!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!

LINKAGE
    BAS$GOSUB_LINK = CALL (STANDARD) : 		!
    GLOBAL (BSF$A_MAJOR_STG = 11, BSF$A_MINOR_STG = 10, BSF$A_TEMP_STG = 9),
!
    BAS$GOSUB_JSB = JSB : 			!
    GLOBAL (BSF$A_MAJOR_STG = 11, BSF$A_MINOR_STG = 10, BSF$A_TEMP_STG = 9)	!
    NOTUSED (8, 7, 6, 5, 4, 3, 2)
    NOPRESERVE (1, 0);

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    BAS$INIT_C_GSB : BAS$GOSUB_LINK NOVALUE;	! start computed GOSUB

!
! INCLUDE FILES:
!

REQUIRE 'RTLIN:RTLPSECT';			! macros for defing psects

REQUIRE 'RTLIN:BASFRAME';			! Define frame structure

LIBRARY 'RTLSTARLE';				! Define system symbols

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! PSECTS:
!
DECLARE_PSECTS (BAS);				! declare psects for BAS$ facility
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    BAS$$SIGNAL : NOVALUE,			! signals error
    BAS$HANDLER;				! handles signals

!
! The following are the error codes used in this module.
!

EXTERNAL LITERAL
    BAS$K_ON_STAOUT : UNSIGNED (8);		! On statement out of range


GLOBAL ROUTINE BAS$INIT_C_GSB (			! start computed GOSUB
	TABLE, 					! table of places to go
	INDEX					! index into table
    ) : BAS$GOSUB_LINK NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Compute the index for a computed GOSUB.  Then perform GOSUB
!	processing, just like BAS$INIT_GOSUB.
!
! FORMAL PARAMETERS:
!
!	TABLE.rx.r	A table of offsets to the lines starting
!			each subroutine.  The first longword is
!			the number of entries in the table, each
!			entry occupies a word.
!	INDEX.rl.v	The index into the table.  If this is out
!			of range we get an error message.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Leaves lots of things on the stack for use by the compiled
!	BASIC-PLUS-2 code.  These things will be removed by
!	BAS$END_GSB_R8.
!
!--

    BEGIN
!+
! The following external registers are mearly passed through to
! the compiled code.
!-

    EXTERNAL REGISTER
	BSF$A_MAJOR_STG,
	BSF$A_MINOR_STG,
	BSF$A_TEMP_STG;

    BUILTIN
	FP,
	SP,
	BISPSW;

!+
! Define local variables as registers.  We connot have any stack
! locals since we manipulate the stack pointer in this routine.
!-

    REGISTER
	FMP : REF BLOCK [0, BYTE] FIELD (BSF$FCD),	! pointer to FCD
	PREV_FMP : REF BLOCK [0, BYTE] FIELD (BSF$FCD),	! points to previous frame
	NEW_PC;					! PC of start of subroutine

!+
! Check for the index being out of range.
!-

    IF ((.INDEX LEQ 0) OR (.INDEX GTR ..TABLE)) THEN BAS$$SIGNAL (BAS$K_ON_STAOUT);

!+
! Fetch the PC of the head of the subroutine selected by the index.
!-
    NEW_PC = .BLOCK [.TABLE, (.INDEX*2) + 2, 0, 16, 1; 0, BYTE] + .TABLE;
!+
! Allocate frame control data.
!-
    FMP = .FP;
    SP = .FMP - BSF$K_LENFCDGSB;
!+
! Initialize the parts of the FCD relavent to a GOSUB.
!-
    FMP [BSF$A_MARK] = 0;
    FMP [BSF$A_BASE_SP] = .SP;
    FMP [BSF$A_BASE_R11] = .BSF$A_MAJOR_STG;
    FMP [BSF$A_BASE_R10] = .BSF$A_MINOR_STG;
    FMP [BSF$A_BASE_R9] = .BSF$A_TEMP_STG;
!+
! The "PROCEDURE ID" is the address of the start of the GOSUB.
!-
    FMP [BSF$A_PROC_ID] = .NEW_PC;
!+
! Copy the frame flags from the previous frame.  The previous
! frame had better be a basic frame.
!-
    PREV_FMP = .FMP [BSF$A_SAVED_FP];
    FMP [BSF$W_FCD_FLAGS] = .PREV_FMP [BSF$W_FCD_FLAGS];
!+
! Mark this as a "GOSUB" frame.  There is no need to distinguish a
!  frame created by "ON GOSUB" from one created by "GOSUB".
!-
    FMP [BSF$B_PROC_CODE] = BSF$K_PROC_GOSB;
!+
! Set the frame length field.
!-
    FMP [BSF$B_LEN_FCD] = BSF$K_LENFCDGSB;

    IF ((.FMP [BSF$W_FCD_FLAGS] AND BSF$M_FCD_IV) NEQ 0) THEN BISPSW (%REF (PSL$M_IV));

!+
! Set up the BASIC handler.  This marks the frame as a BASIC frame
!  and tells VAX/VMS CHF to call BAS$HANDLER for exceptions.
!-
    FMP [BSF$A_HANDLER] = BAS$HANDLER;
!+
! Branch to the compiled code.  This code will call BAS$END_GSB_R8
! rather than returning.
!-
    BAS$GOSUB_JSB (.NEW_PC);
    END;					! of BAS$INIT_C_GSB

END

ELUDOM
