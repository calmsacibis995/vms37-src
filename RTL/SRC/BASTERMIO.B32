MODULE BAS$UPI_TERM_IO (			! Terminal I/O UPI level
		IDENT = '1-005'			! File: BASTERMIO.B32
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY: Basic support library - User callable
!
! ABSTRACT:
!
! Provides the User Program Interface (UPI) level of support for Basic
! terminal I/O.
!
! ENVIRONMENT:	User access mode; AST reentrant
!
! AUTHOR:	Donald G. Petersen, CREATION DATE: 23-Aug-79
!
! MODIFIED BY:
!
! 1-001	- Original done in Macro-32, BASIOELEM.MAR.  DGP 20-Mar-78
! 1-002 - Rewrite BASIOELEM.MAR in Bliss.  DGP 23-Aug-79
! 1-003	- Make the BAS$ entry points GLOBAL.  JBS 12-SEP-1979
! 1-004	- Add BAS$IN_W_R.  JBS 12-SEP-1979
! 1-004 - Add linkages to CALL of UDF routines.  DGP 12-Sep-79
! 1-005 - BAS$OUT_D_V_B incorrectly uses a semicolon format character.  DGP
!	  17-Sep-79
!--

!<BLF/PAGE>

!
! SWITCHES
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES
!

REQUIRE 'RTLIN:BASLNK';				! some Basic linkages

REQUIRE 'RTLIN:OTSLNK';				! define all other linkages

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    BAS$IN_L_R : NOVALUE,			! Input longword by reference
    BAS$IN_W_R : NOVALUE,			! Input word by reference
    BAS$OUT_L_V_S : NOVALUE,			! output long by value, semi format char
    BAS$OUT_L_V_C : NOVALUE,			! output long by val, comma format char
    BAS$OUT_L_V_B : NOVALUE,			! output long by val, no format char
    BAS$IN_F_R : NOVALUE,			! input single float by ref
    BAS$OUT_F_V_S : NOVALUE,			! output float by val, semi format char
    BAS$OUT_F_V_C : NOVALUE,			! output float by val, comma format char
    BAS$OUT_F_V_B : NOVALUE,			! output float by val, no format char
    BAS$IN_D_R : NOVALUE,			! input double float by ref
    BAS$OUT_D_V_S : NOVALUE,			! output double by val, semi format char
    BAS$OUT_D_V_C : NOVALUE,			! output double by val, comma format char
    BAS$OUT_D_V_B : NOVALUE,			! output double by val, no format char
    BAS$IN_T_DX : NOVALUE,			! input text by descriptor
    BAS$OUT_T_DX_S : NOVALUE,			! output text by desc, semi format char
    BAS$OUT_T_DX_C : NOVALUE,			! output text by desc, comma format char
    BAS$OUT_T_DX_B : NOVALUE;			! output text by desc, no format char

!
! INCLUDE FILES:
!

REQUIRE 'RTLIN:RTLPSECT';			! PSECT macros

REQUIRE 'RTLML:BASPAR';				! Some Basic symbols

REQUIRE 'RTLML:OTSISB';				! I/O statement block (ISB)

REQUIRE 'RTLML:OTSLUB';				! logical unit block (LUB)

LIBRARY 'RTLSTARLE';				! STARTLET library for macros

!
! MACROS:
!
!	NONE
!
! PSECT DECLARATIONS:
!
DECLARE_PSECTS (BAS);				! PSECTs for BAS$ facility
!
! EQUATED SYMBOLS:
!

LITERAL
    K_WORD_LEN = 2,				! storage size in bytes of word
    K_LONG_LEN = 4,				! storage size in bytes of longword
    K_FLOAT_LEN = 4,				! storage size in bytes of float
    K_DOUBLE_LEN = 8;				! storage size in bytes of double

!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    BAS$$UDF_RL1 : CALL_CCB,		! UDF level element transmitter - Read
					! list directed
    BAS$$STOP : NOVALUE;		! signal an error and stop

EXTERNAL LITERAL
    BAS$K_DATTYPERR;				! data type error

EXTERNAL
    OTS$$A_CUR_LUB,				! Contains addr. of current LUB/ISB/RAB
    BAS$$AA_UDF_PR1 : VECTOR;			! dispatch vector to UDF element transmitters


GLOBAL ROUTINE BAS$IN_L_R (			! input longword by ref
	ELEM					! element to input by reference
    ) : NOVALUE = 				!

!++
! FUNCTIONAL DESCRIPTION:
!
! Input a longword, the destination is passed by reference
!
! FORMAL PARAMETERS:
!
!	ELEM.rl.r		where to store the longword input
!
! IMPLICIT INPUTS:
!
!	OTS$$A_CUR_LUB		current Logical Unit Block
!	ISB$B_STTM_TYPE		statement type of this I/O statement
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    GLOBAL REGISTER
	CCB = K_CCB_REG : REF BLOCK [, BYTE];

    CCB = .OTS$$A_CUR_LUB;
    BAS$$UDF_RL1 (DSC$K_DTYPE_L, 		! data type longword
	K_LONG_LEN, 				! length of data type
	.ELEM, 					! address of destination
	BAS$K_NULL);				! null format character
    RETURN;
    END;					!End of BAS$IN_L_R


GLOBAL ROUTINE BAS$IN_W_R (			! input word by ref
	ELEM					! element to input by reference
    ) : NOVALUE = 				!

!++
! FUNCTIONAL DESCRIPTION:
!
! Input a word, the destination is passed by reference
!
! FORMAL PARAMETERS:
!
!	ELEM.ww.r		where to store the longword input
!
! IMPLICIT INPUTS:
!
!	OTS$$A_CUR_LUB		current Logical Unit Block
!	ISB$B_STTM_TYPE		statement type of this I/O statement
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    GLOBAL REGISTER
	CCB = K_CCB_REG : REF BLOCK [, BYTE];

    CCB = .OTS$$A_CUR_LUB;
    BAS$$UDF_RL1 (DSC$K_DTYPE_W, 		! data type word
	K_WORD_LEN, 				! length of data type
	.ELEM, 					! address of destination
	BAS$K_NULL);				! null format character
    RETURN;
    END;					!End of BAS$IN_W_R


GLOBAL ROUTINE BAS$IN_F_R (			! input float by ref
	ELEM					! element to input by reference
    ) : NOVALUE = 				!

!++
! FUNCTIONAL DESCRIPTION:
!
! Input a single precision floating, the destination is passed by reference
!
! FORMAL PARAMETERS:
!
!	ELEM.rf.r		where to store the float input
!
! IMPLICIT INPUTS:
!
!	OTS$$A_CUR_LUB		current Logical Unit Block
!	ISB$B_STTM_TYPE		statement type of this I/O statement
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    GLOBAL REGISTER
	CCB = K_CCB_REG : REF BLOCK [, BYTE];

    CCB = .OTS$$A_CUR_LUB;
    BAS$$UDF_RL1 (DSC$K_DTYPE_F, 		! data type floating
	K_FLOAT_LEN, 				! length of data type
	.ELEM, 					! address of destination
	BAS$K_NULL);				! null format character
    RETURN;
    END;					!End of BAS$IN_F_R


GLOBAL ROUTINE BAS$IN_D_R (			! input double by ref
	ELEM					! element to input by reference
    ) : NOVALUE = 				!

!++
! FUNCTIONAL DESCRIPTION:
!
! Input a double, the destination is passed by reference
!
! FORMAL PARAMETERS:
!
!	ELEM.rd.r		where to store the double input
!
! IMPLICIT INPUTS:
!
!	OTS$$A_CUR_LUB		current Logical Unit Block
!	ISB$B_STTM_TYPE		statement type of this I/O statement
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    GLOBAL REGISTER
	CCB = K_CCB_REG : REF BLOCK [, BYTE];

    CCB = .OTS$$A_CUR_LUB;
    BAS$$UDF_RL1 (DSC$K_DTYPE_D, 		! data type
	K_DOUBLE_LEN, 				! length of data type
	.ELEM, 					! address of destination
	BAS$K_NULL);				! null format character
    RETURN;
    END;					!End of BAS$IN_D_R


GLOBAL ROUTINE BAS$IN_T_DX (			! input text by desc.
	ELEM					! element to input by reference
    ) : NOVALUE = 				!

!++
! FUNCTIONAL DESCRIPTION:
!
! Input text, the destination is passed by descriptor
!
! FORMAL PARAMETERS:
!
!	ELEM.rt.dx		where to store the text input
!
! IMPLICIT INPUTS:
!
!	OTS$$A_CUR_LUB		current Logical Unit Block
!	ISB$B_STTM_TYPE		statement type of this I/O statement
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    GLOBAL REGISTER
	CCB = K_CCB_REG : REF BLOCK [, BYTE];

    MAP
	ELEM : REF BLOCK [8, BYTE];

    CCB = .OTS$$A_CUR_LUB;
    BAS$$UDF_RL1 (DSC$K_DTYPE_T, 		! data type
	ELEM [DSC$W_LENGTH], 			! string length
	.ELEM, 					! address of descriptor
	BAS$K_NULL);				! null format character
    RETURN;
    END;					!End of BAS$IN_T_DX


GLOBAL ROUTINE BAS$OUT_L_V_S (			! print longword by value, semi format character
	ELEM					! element to print by value
    ) : NOVALUE = 				!

!++
! FUNCTIONAL DESCRIPTION:
!
! Output a longword, the source is passed by value
!
! FORMAL PARAMETERS:
!
!	ELEM.rl.v		longword to print
!
! IMPLICIT INPUTS:
!
!	OTS$$A_CUR_LUB		current Logical Unit Block
!	ISB$B_STTM_TYPE		statement type of this I/O statement
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    GLOBAL REGISTER
	CCB = K_CCB_REG : REF BLOCK [, BYTE];

    CCB = .OTS$$A_CUR_LUB;
!+
! Dispatch to the UDF level.  Dispatching is done because this may be a PRINT
! element transmit for prompting or for printing.  Therefore, based on the
! statement type, either the INPUT or the PRINT UDF will be called.
!-
    (BAS$$AA_UDF_PR1 + .BAS$$AA_UDF_PR1 [.CCB [ISB$B_STTM_TYPE] - ISB$K_BASSTTYLO + 1]) (DSC$K_DTYPE_L,
						! data type
	K_LONG_LEN, 				! length of data type
	ELEM, 					! address of value
	BAS$K_SEMI_FORM				! semicolon format character
    );
    RETURN;
    END;					!End of BAS$OUT_L_V_S


GLOBAL ROUTINE BAS$OUT_L_V_C (			! print a longword by value, comma format character
	ELEM					! element to output by value
    ) : NOVALUE = 				!

!++
! FUNCTIONAL DESCRIPTION:
!
! Output a longword, the source is passed by value
!
! FORMAL PARAMETERS:
!
!	ELEM.rl.v		longword to print
!
! IMPLICIT INPUTS:
!
!	OTS$$A_CUR_LUB		current Logical Unit Block
!	ISB$B_STTM_TYPE		statement type of this I/O statement
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    GLOBAL REGISTER
	CCB = K_CCB_REG : REF BLOCK [, BYTE];

    CCB = .OTS$$A_CUR_LUB;
!+
! Dispatch to the UDF level.  Dispatching is done because this may be a PRINT
! element transmit for prompting or for printing.  Therefore, based on the
! statement type, either the INPUT or the PRINT UDF will be called.
!-
    (BAS$$AA_UDF_PR1 + .BAS$$AA_UDF_PR1 [.CCB [ISB$B_STTM_TYPE] - ISB$K_BASSTTYLO + 1]) (DSC$K_DTYPE_L,
						! data type
	K_LONG_LEN, 				! length of data type
	ELEM, 					! address of value
	BAS$K_COMMA_FOR				! comma format character
    );
    RETURN;
    END;					!End of BAS$OUT_L_V_C


GLOBAL ROUTINE BAS$OUT_L_V_B (			! print longword by value, no format character
	ELEM					! element to output by value
    ) : NOVALUE = 				!

!++
! FUNCTIONAL DESCRIPTION:
!
! Output a longword, the source is passed by value
!
! FORMAL PARAMETERS:
!
!	ELEM.rl.v		longword to print
!
! IMPLICIT INPUTS:
!
!	OTS$$A_CUR_LUB		current Logical Unit Block
!	ISB$B_STTM_TYPE		statement type of this I/O statement
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    GLOBAL REGISTER
	CCB = K_CCB_REG : REF BLOCK [, BYTE];

    CCB = .OTS$$A_CUR_LUB;
!+
! Dispatch to the UDF level.  Dispatching is done because this may be a PRINT
! element transmit for prompting or for printing.  Therefore, based on the
! statement type, either the INPUT or the PRINT UDF will be called.
!-
    (BAS$$AA_UDF_PR1 + .BAS$$AA_UDF_PR1 [.CCB [ISB$B_STTM_TYPE] - ISB$K_BASSTTYLO + 1]) (DSC$K_DTYPE_L,
						! data type
	K_LONG_LEN, 				! length of data type
	ELEM, 					! address of value
	BAS$K_NO_FORM				! no format character
    );
    RETURN;
    END;					!End of BAS$OUT_L_V_B


GLOBAL ROUTINE BAS$OUT_F_V_S (			! print floating by value, semicolon format
	ELEM					! element to output by value
    ) : NOVALUE = 				!

!++
! FUNCTIONAL DESCRIPTION:
!
! Output a single precision floating, the source is passed by value
!
! FORMAL PARAMETERS:
!
!	ELEM.rf.v		floating to print
!
! IMPLICIT INPUTS:
!
!	OTS$$A_CUR_LUB		current Logical Unit Block
!	ISB$B_STTM_TYPE		statement type of this I/O statement
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    GLOBAL REGISTER
	CCB = K_CCB_REG : REF BLOCK [, BYTE];

    CCB = .OTS$$A_CUR_LUB;
!+
! Dispatch to the UDF level.  Dispatching is done because this may be a PRINT
! element transmit for prompting or for printing.  Therefore, based on the
! statement type, either the INPUT or the PRINT UDF will be called.
!-
    (BAS$$AA_UDF_PR1 + .BAS$$AA_UDF_PR1 [.CCB [ISB$B_STTM_TYPE] - ISB$K_BASSTTYLO + 1]) (DSC$K_DTYPE_F,
						! data type
	K_FLOAT_LEN, 				! length of data type
	ELEM, 					! address of value
	BAS$K_SEMI_FORM				! semicolon format character
    );
    RETURN;
    END;					!End of BAS$OUT_F_V_S


GLOBAL ROUTINE BAS$OUT_F_V_C (			! print floating by value, comma format
	ELEM					! element to output by value
    ) : NOVALUE = 				!

!++
! FUNCTIONAL DESCRIPTION:
!
! Output a single precision floating, the source is passed by value
!
! FORMAL PARAMETERS:
!
!	ELEM.rf.v		floating to print
!
! IMPLICIT INPUTS:
!
!	OTS$$A_CUR_LUB		current Logical Unit Block
!	ISB$B_STTM_TYPE		statement type of this I/O statement
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    GLOBAL REGISTER
	CCB = K_CCB_REG : REF BLOCK [, BYTE];

    CCB = .OTS$$A_CUR_LUB;
!+
! Dispatch to the UDF level.  Dispatching is done because this may be a PRINT
! element transmit for prompting or for printing.  Therefore, based on the
! statement type, either the INPUT or the PRINT UDF will be called.
!-
    (BAS$$AA_UDF_PR1 + .BAS$$AA_UDF_PR1 [.CCB [ISB$B_STTM_TYPE] - ISB$K_BASSTTYLO + 1]) (DSC$K_DTYPE_F,
						! data type
	K_FLOAT_LEN, 				! length of data type
	ELEM, 					! address of value
	BAS$K_COMMA_FOR				! comma format character
    );
    RETURN;
    END;					!End of BAS$OUT_F_V_C


GLOBAL ROUTINE BAS$OUT_F_V_B (			! print floating by value, no format
	ELEM					! element to output by value
    ) : NOVALUE = 				!

!++
! FUNCTIONAL DESCRIPTION:
!
! Output a single precision floating, the source is passed by value
!
! FORMAL PARAMETERS:
!
!	ELEM.rf.v		floating to print
!
! IMPLICIT INPUTS:
!
!	OTS$$A_CUR_LUB		current Logical Unit Block
!	ISB$B_STTM_TYPE		statement type of this I/O statement
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    GLOBAL REGISTER
	CCB = K_CCB_REG : REF BLOCK [, BYTE];

    CCB = .OTS$$A_CUR_LUB;
!+
! Dispatch to the UDF level.  Dispatching is done because this may be a PRINT
! element transmit for prompting or for printing.  Therefore, based on the
! statement type, either the INPUT or the PRINT UDF will be called.
!-
    (BAS$$AA_UDF_PR1 + .BAS$$AA_UDF_PR1 [.CCB [ISB$B_STTM_TYPE] - ISB$K_BASSTTYLO + 1]) (DSC$K_DTYPE_F,
						! data type
	K_FLOAT_LEN, 				! length of data type
	ELEM, 					! address of value
	BAS$K_NO_FORM				! no format character
    );
    RETURN;
    END;					!End of BAS$OUT_F_V_B


GLOBAL ROUTINE BAS$OUT_D_V_S (			! print double by value, semicolon format
	ELEM					! element to output by value
    ) : NOVALUE = 				!

!++
! FUNCTIONAL DESCRIPTION:
!
! Output a double precision floating, the source is passed by value
!
! FORMAL PARAMETERS:
!
!	ELEM.rd.v		double floating to print
!
! IMPLICIT INPUTS:
!
!	OTS$$A_CUR_LUB		current Logical Unit Block
!	ISB$B_STTM_TYPE		statement type of this I/O statement
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    GLOBAL REGISTER
	CCB = K_CCB_REG : REF BLOCK [, BYTE];

    CCB = .OTS$$A_CUR_LUB;
!+
! Dispatch to the UDF level.  Dispatching is done because this may be a PRINT
! element transmit for prompting or for printing.  Therefore, based on the
! statement type, either the INPUT or the PRINT UDF will be called.
!-
    (BAS$$AA_UDF_PR1 + .BAS$$AA_UDF_PR1 [.CCB [ISB$B_STTM_TYPE] - ISB$K_BASSTTYLO + 1]) (DSC$K_DTYPE_D,
						! data type
	K_DOUBLE_LEN, 				! length of data type
	ELEM, 					! address of value
	BAS$K_SEMI_FORM				! semicolon format character
    );
    RETURN;
    END;					!End of BAS$OUT_D_V_S


GLOBAL ROUTINE BAS$OUT_D_V_C (			! print double by value, comma format
	ELEM					! element to output by value
    ) : NOVALUE = 				!

!++
! FUNCTIONAL DESCRIPTION:
!
! Output a double precision floating, the source is passed by value
!
! FORMAL PARAMETERS:
!
!	ELEM.rd.v		double floating to print
!
! IMPLICIT INPUTS:
!
!	OTS$$A_CUR_LUB		current Logical Unit Block
!	ISB$B_STTM_TYPE		statement type of this I/O statement
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    GLOBAL REGISTER
	CCB = K_CCB_REG : REF BLOCK [, BYTE];

    CCB = .OTS$$A_CUR_LUB;
!+
! Dispatch to the UDF level.  Dispatching is done because this may be a PRINT
! element transmit for prompting or for printing.  Therefore, based on the
! statement type, either the INPUT or the PRINT UDF will be called.
!-
    (BAS$$AA_UDF_PR1 + .BAS$$AA_UDF_PR1 [.CCB [ISB$B_STTM_TYPE] - ISB$K_BASSTTYLO + 1]) (DSC$K_DTYPE_D,
						! data type
	K_DOUBLE_LEN, 				! length of data type
	ELEM, 					! address of value
	BAS$K_COMMA_FOR				! comma format character
    );
    RETURN;
    END;					!End of BAS$OUT_D_V_C


GLOBAL ROUTINE BAS$OUT_D_V_B (			! print double by value, no format
	ELEM					! element to output by value
    ) : NOVALUE = 				!

!++
! FUNCTIONAL DESCRIPTION:
!
! Output a double precision floating, the source is passed by value
!
! FORMAL PARAMETERS:
!
!	ELEM.rd.v		double floating to print
!
! IMPLICIT INPUTS:
!
!	OTS$$A_CUR_LUB		current Logical Unit Block
!	ISB$B_STTM_TYPE		statement type of this I/O statement
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    GLOBAL REGISTER
	CCB = K_CCB_REG : REF BLOCK [, BYTE];

    CCB = .OTS$$A_CUR_LUB;
!+
! Dispatch to the UDF level.  Dispatching is done because this may be a PRINT
! element transmit for prompting or for printing.  Therefore, based on the
! statement type, either the INPUT or the PRINT UDF will be called.
!-
    (BAS$$AA_UDF_PR1 + .BAS$$AA_UDF_PR1 [.CCB [ISB$B_STTM_TYPE] - ISB$K_BASSTTYLO + 1]) (DSC$K_DTYPE_D,
						! data type
	K_DOUBLE_LEN, 				! length of data type
	ELEM, 					! address of value
	BAS$K_NO_FORM				! no format character
    );
    RETURN;
    END;					!End of BAS$OUT_D_V_B


GLOBAL ROUTINE BAS$OUT_T_DX_S (			! print text by desc., semicolon format
	ELEM					! element to output by descriptor
    ) : NOVALUE = 				!

!++
! FUNCTIONAL DESCRIPTION:
!
! Output text, the source is passed by descriptor
!
! FORMAL PARAMETERS:
!
!	ELEM.rt.dx		text to print
!
! IMPLICIT INPUTS:
!
!	OTS$$A_CUR_LUB		current Logical Unit Block
!	ISB$B_STTM_TYPE		statement type of this I/O statement
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    GLOBAL REGISTER
	CCB = K_CCB_REG : REF BLOCK [, BYTE];

    MAP
	ELEM : REF BLOCK [8, BYTE];

    CCB = .OTS$$A_CUR_LUB;
!+
! Dispatch to the UDF level.  Dispatching is done because this may be a PRINT
! element transmit for prompting or for printing.  Therefore, based on the
! statement type, either the INPUT or the PRINT UDF will be called.
!-
    (BAS$$AA_UDF_PR1 + .BAS$$AA_UDF_PR1 [.CCB [ISB$B_STTM_TYPE] - ISB$K_BASSTTYLO + 1]) (DSC$K_DTYPE_T,
						! data type
	.ELEM [DSC$W_LENGTH], 			! length of data
	.ELEM, 					! address of desc
	BAS$K_SEMI_FORM				! semicolon format character
    );
    RETURN;
    END;					!End of BAS$OUT_T_DX_S


GLOBAL ROUTINE BAS$OUT_T_DX_C (			! print text by desc., comma format
	ELEM					! element to output by descriptor
    ) : NOVALUE = 				!

!++
! FUNCTIONAL DESCRIPTION:
!
! Output text, the source is passed by descriptor
!
! FORMAL PARAMETERS:
!
!	ELEM.rt.dx		text to print
!
! IMPLICIT INPUTS:
!
!	OTS$$A_CUR_LUB		current Logical Unit Block
!	ISB$B_STTM_TYPE		statement type of this I/O statement
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    GLOBAL REGISTER
	CCB = K_CCB_REG : REF BLOCK [, BYTE];

    MAP
	ELEM : REF BLOCK [8, BYTE];

    CCB = .OTS$$A_CUR_LUB;
!+
! Dispatch to the UDF level.  Dispatching is done because this may be a PRINT
! element transmit for prompting or for printing.  Therefore, based on the
! statement type, either the INPUT or the PRINT UDF will be called.
!-
    (BAS$$AA_UDF_PR1 + .BAS$$AA_UDF_PR1 [.CCB [ISB$B_STTM_TYPE] - ISB$K_BASSTTYLO + 1]) (DSC$K_DTYPE_T,
						! data type
	.ELEM [DSC$W_LENGTH], 			! length of data
	.ELEM, 					! address of desc
	BAS$K_COMMA_FOR				! comma format character
    );
    RETURN;
    END;					!End of BAS$OUT_T_DX_C


GLOBAL ROUTINE BAS$OUT_T_DX_B (			! print text by desc., no format
	ELEM					! element to output by descriptor
    ) : NOVALUE = 				!

!++
! FUNCTIONAL DESCRIPTION:
!
! Output text, the source is passed by descriptor
!
! FORMAL PARAMETERS:
!
!	ELEM.rt.dx		text to print
!
! IMPLICIT INPUTS:
!
!	OTS$$A_CUR_LUB		current Logical Unit Block
!	ISB$B_STTM_TYPE		statement type of this I/O statement
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    GLOBAL REGISTER
	CCB = K_CCB_REG : REF BLOCK [, BYTE];

    MAP
	ELEM : REF BLOCK [8, BYTE];

    CCB = .OTS$$A_CUR_LUB;
!+
! Dispatch to the UDF level.  Dispatching is done because this may be a PRINT
! element transmit for prompting or for printing.  Therefore, based on the
! statement type, either the INPUT or the PRINT UDF will be called.
!-
    (BAS$$AA_UDF_PR1 + .BAS$$AA_UDF_PR1 [.CCB [ISB$B_STTM_TYPE] - ISB$K_BASSTTYLO + 1]) (DSC$K_DTYPE_T,
						! data type
	.ELEM [DSC$W_LENGTH], 			! length of data
	.ELEM, 					! address of desc
	BAS$K_NO_FORM				! no format character
    );
    RETURN;
    END;					!End of BAS$OUT_T_DX_B


END						!End of module - BAS$UPI_TERM_IO

ELUDOM
