	.TITLE	LIB$LUN - Resource allocator for logical unit numbers
	.IDENT	/1-003/			; File: LIBLUN.MAR

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY: General Utility Library
;
; ABSTRACT:
;
;	Two routines for allocating and deallocating logical unit
;	numbers.  Using these routines allows use of logical
;	unit number by multiple procedures without conflicts.
;
; ENVIRONMENT: User Mode, AST Reentrant
;
;--
; AUTHOR: R. Reichert,	CREATION DATE: 04-JUN-79
;
; MODIFIED BY:
;
; 1-001	Original. RKR 04-JUNE-79
; 1-002 Removed entry point LIB$RESERVE_LUN and return status
;	LIB$_LUNALRRES (Lun already reserved).  RKR 20-JULY-79
; 1-003 Comment clean up. Made compares against LOW_LUN and HIGH_LUN
;	CMPL's. Made all references to LUN_POOL be G^LUN_POOL.
;	RKR. 24-JULY-79

	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;

;
; EXTERNAL DECLARATIONS:
;
	.DSABL	GBL				; Prevent undeclared
						; symbols from being
						; automatically global.

;		Error codes

	.EXTRN	LIB$_INSLUN			; Insufficient luns
	.EXTRN	LIB$_LUNALRFRE			; Lun already free
	.EXTRN	LIB$_LUNRESSYS			; Lun reserved to system

;
; MACROS:
;
;	NONE

;
; EQUATED SYMBOLS:
;
	LUN_NUMBER =	4	; logical unit number parameter
	HIGH_LUN =	119	; highest unit number dispensed
	LOW_LUN  =	100	; lowest unit number dispensed
;
; OWN STORAGE:
;
	.PSECT	_LIB$DATA RD, WRT, NOEXE, NOSHR, PIC, LONG, -
		         CON, LCL, REL, USR

LUN_POOL:			; Pool of available logical unit numbers
	.LONG	^XFFF00000
				; Low order bit represents logical
				; unit number 119, high order bit
				; logical unit number 88 .
				; Only unit numbers 119 to 100 are
				; dispensed by this routine.
;
; PSECT DECLARATIONS:
;
	.PSECT _LIB$CODE PIC, USR, CON, REL, LCL, SHR, -
			EXE, RD, NOWRT, LONG


	.SBTTL	LIB$GET_LUN - Allocate one logical unit number
;++
; FUNCTIONAL DESCRIPTION:
;
;	LIB$GET_LUN allocates one logical unit number from a process-wide
;	pool.  If a lun is available for use, its number is returned
;	to the caller.  If no luns are available, an error is returned
;	as the function value.
;
; CALLING SEQUENCE:
;
;	status.wlc.v = LIB$GET_LUN (LUN_NUMBER.wl.r)
;
; INPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT INPUTS:
;
;	LUN_POOL, a table of available logical unit numbers in OWN
;	storage.
;
; OUTPUT PARAMETERS:
;
;	LUN_NUMBER	- The number of the logical unit number allocated
;			  or -1 if none were available.
;
; IMPLICIT OUTPUTS:
;
;	If successful, an entry is made into LUN_POOL indicating that
;	a logical unit number has been reserved.
;
; FUNCTION VALUE:
; COMPLETION CODES:
;
;	SS$_NORMAL	- Routine successfully completed.
;
;	LIB$_INSLUN	- Insufficient logical unit numbers.  There were no
;			  more logical unit numbers available for allocation.
;			  If this error is returned, lun_number is
;			  also set to -1 in case the caller does not
;			  check for failure.
;
; SIDE EFFECTS:
;
;	NONE
;
;--

	.ENTRY LIB$GET_LUN, ^M<IV>	; Save nothing

;+
;	Scan LUN_POOL for first available logical unit number
;-

SCAN:
	FFC	#0, #32, G^LUN_POOL, R0
	BEQL	ALL_OUT			; Not found

;+
;	Now recheck and set the bit in an uninterruptable fashion,
;	in case someone has set it at AST level in the meantime.
;-

FOUND:
	BBSS	R0, G^LUN_POOL, SCAN	; Repeat scan if already set

;+
;	Return success with logical unit number in lun_number.
;-

	SUBL3	R0, #HIGH_LUN, @LUN_NUMBER(AP)	; Subtract from HIGH_LUN
					; because lo order table bit is
					; lun "high_lun".

	MOVL	#1, R0			; SS$_NORMAL
	RET				; Exit

;+
;	Return error since no logical unit numbers available
;-

ALL_OUT:
	MNEGL	#1, @LUN_NUMBER(AP)	; Set LUN_NUMBER to -1
	MOVL	#LIB$_INSLUN, R0	; Insufficient logical unit numbers
	RET				; Exit


	.SBTTL	LIB$FREE_LUN - Deallocate one logical unit number
;++
; FUNCTIONAL DESCRIPTION:
;
;	LIB$FREE_LUN is the complement of LIB$GET_LUN.  When a routine
;	called LIB$GET_LUN to allocate a logical unit number, and no
;	longer needs it, LIB$FREE_LUN should be called to free the
;	logical unit number for use by other routines.
;
; CALLING SEQUENCE:
;
;	status.wlc.v = LIB$FREE_LUN (LUN_NUMBER.rl.r)
;
; INPUT PARAMETERS:
;
;	LUN_NUMBER	- The number of the logical unit to be 
;			  deallocated.  This is the value returned
;			  to the user by LIB$GET_LUN.
;
; IMPLICIT INPUTS:
;
;	LUN_POOL, a table of available logical unit numbers in OWN
;	storage.
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	An entry is made in LUN_POOL indicating that the logical unit
;	number is free for use.
;
; FUNCTION VALUE:
; COMPLETION CODES:
;
;	SS$_NORMAL	- Routine successfully completed.
;
;	LIB$_LUNALRFRE	- Logical unit number already free.
;
;	LIB$_LUNRESSYS	- Logical unit number reserved to system.  This
;			  occurs if lun_number is outside the range
;			  of "LOW_LUN" and "HIGH_LUN".
;
; SIDE EFFECTS:
;
;	NONE
;
;--

	.ENTRY LIB$FREE_LUN, ^M<IV>	; Save nothing

;+
;	Check to see if lun_number is in the proper range.
;-

	CMPL	@LUN_NUMBER(AP), #HIGH_LUN	; Bigger than high_lun?
	BGTR	RES_SYS_1			; Yes, error
	CMPL	@LUN_NUMBER(AP), #LOW_LUN	; Less than lowest ?
	BLSS	RES_SYS_1			; Yes, error

;+
;	LUN_NUMBER is in range.  Now, unset the bit.
;-

OK_1:
	SUBL3	@LUN_NUMBER(AP), #HIGH_LUN, R0	; Convert to bit offset
	BBCC	R0, G^LUN_POOL, ALR_FRE		; Clear but error if 
						; already clear.

;+
;	Return success
;-

	MOVL	#1, R0			; SS$_NORMAL
	RET

;+
;	Error if logical unit number reserved to system or
;	out of range.
;-

RES_SYS_1:
	MOVL	#LIB$_LUNRESSYS, R0	; Logical unit number reserved
	RET

;+
;	Error if logical unit number already free.
;-

ALR_FRE:
	MOVL	#LIB$_LUNALRFRE, R0	; Logical unit number already free
	RET

	.END
