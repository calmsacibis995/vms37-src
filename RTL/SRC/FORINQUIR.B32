MODULE FOR$INQUIRE (				! FORTRAN INQUIRE
		IDENT = '1-013'			! File: FORINQUIR.B32  Edit: SBL1013
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY: FORTRAN Language Support Library
!
! ABSTRACT:
!
!	Implements the FORTRAN INQUIRE statement.
!
! ENVIRONMENT: User mode, AST reentrant.
!
! AUTHOR: Steven B. Lionel, CREATION DATE: 28-August-1979
!
! EDIT HISTORY:
!
! 1-001 - Original.  SBL 28-August-1979
! 1-002 - Add comments about AST disabling.  Also report errors
!	  RMS$_TYP and RMS$_VER as file name syntax errors.  SBL
! 1-003 - Instead of giving an error, just pretend units "poisoned"
!	  with DEFINE FILE, etc. aren't open.  SBL 21-Sept-1979
! 1-004 - Improve error handling.  SBL 8-Oct-1979
! 1-005 - Remove file name editing.  RMS does it now.  SBL 12-Oct-1979
! 1-006 - If FILEname invalid, return user supplied filename as NAME.  SBL 19-Oct-1979
! 1-007 - Add CARRIAGECONTROL keyword.  SBL 4-Dec-1979
! 1-008 - Class RMS$_SYN as file name specification error.  If wildcard
!	  present, don't report phony RMS error and don't scan LUNs.  SBL 6-Feb-1980
! 1-009 - Have NEXTREC simply fetch LUB$L_LOG_RECNO.  Remove the erroneous
!	  MIN which caused it to always return 1!  Correct the comment
!	  for MAXREC to conform to the code and spec.  Move declaration
!	  of ACTUALCOUNT to the inside of the routine which uses it.
!	  SBL 21-August-1980
! 1-010 - Add support for DEFAULTFILE.  JAW 01-Jul-1981
! 1-011 - Allow DEFAULTFILE value to be ASCIZ.  JAW 02-Jul-1981
! 1-012 - Open file for shared access.  SBL 2-Nov-1981
! 1-013 - Declare LIB$STOP external.  SBL 30-Nov-1981
!--

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!

REQUIRE 'RTLIN:OTSLNK';

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
	FOR$INQUIRE,			! Process INQUIRE statement
	PUSH_CCB : CALL_CCB;		! Calls FOR$$CB_PUSH

!
! INCLUDE FILES:
!

LIBRARY 'RTLSTARLE';		! RMS macros and symbols
REQUIRE 'RTLML:FORMSG';		! FORTRAN 32 bit error codes
REQUIRE 'RTLML:OTSLUB';		! LUB definitions
REQUIRE 'RTLIN:OTSMAC';		! RTL macros
REQUIRE 'RTLIN:RTLPSECT';	! PSECT definitions
REQUIRE 'RTLIN:FOROPN';		! OPEN/INQUIRE keyword symbols
REQUIRE 'RTLML:FORPAR';		! Error handler symbols

!
! MACROS:
!

!
! FIELDS:
!
    FIELD
	INQ_FIELDS =
	    SET
	    UNIT_OK	= [0,0,1,0],	! 1 if UNIT is valid
	    NAME_OK	= [0,1,1,0],	! 1 if name is valid
	    CCB_OK	= [0,2,1,0],	! 1 if CCB valid
	    EXISTS	= [0,3,1,0],	! 1 if file exists
	    FAB_OK	= [0,4,1,0]	! 1 if FAB is valid
	    TES;

!
! EQUATED SYMBOLS:
!

!+
! Codes for string responses.  These values are put into vector
! RESP_VEC when the correct response is determined.
!-
LITERAL
    BLANK		= 0,
    YES			= 1,
    NO			= 2,
    UNKNOWN		= 3,
    DIRECT		= 4,
    KEYED		= 5,
    SEQUENTIAL		= 6,
    FORMATTED		= 7,
    UNFORMATTED		= 8,
    RELATIVE		= 9,
    INDEXED		= 10,
    NULL		= 11,
    ZERO		= 12,
    FIXED		= 13,
    VARIABLE		= 14,
    SEGMENTED		= 15,
    FORTRAN		= 16,
    LIST		= 17,
    NONE		= 18;

!
! OWN STORAGE:
!

DISPATCH_PSECTS (FOR);		! Make OWN be in $CODE psect

!+
! String responses are stored here in a PIC table.
!-
OWN
    RESP_VALS : VECTOR [19,LONG] INITIAL (
	UPLIT BYTE (' ') - RESP_VALS,		! 0
	UPLIT BYTE ('YES') - RESP_VALS,		! 1
	UPLIT BYTE ('NO') - RESP_VALS,		! 2
	UPLIT BYTE ('UNKNOWN') - RESP_VALS,	! 3
	UPLIT BYTE ('DIRECT') - RESP_VALS,	! 4
	UPLIT BYTE ('KEYED') - RESP_VALS,	! 5
	UPLIT BYTE ('SEQUENTIAL') - RESP_VALS,	! 6
	UPLIT BYTE ('FORMATTED') - RESP_VALS,	! 7
	UPLIT BYTE ('UNFORMATTED') - RESP_VALS,	! 8
	UPLIT BYTE ('RELATIVE') - RESP_VALS,	! 9
	UPLIT BYTE ('INDEXED') - RESP_VALS,	! 10
	UPLIT BYTE ('NULL') - RESP_VALS,	! 11
	UPLIT BYTE ('ZERO') - RESP_VALS,	! 12
	UPLIT BYTE ('FIXED') - RESP_VALS,	! 13
	UPLIT BYTE ('VARIABLE') - RESP_VALS,	! 14
	UPLIT BYTE ('SEGMENTED') - RESP_VALS,	! 15
	UPLIT BYTE ('FORTRAN') - RESP_VALS,	! 16
	UPLIT BYTE ('LIST') - RESP_VALS,	! 17
	UPLIT BYTE ('NONE') - RESP_VALS		! 18
	);

!+
! Lengths of string responses.
!-
OWN
    RESP_LENS : VECTOR [19,BYTE] INITIAL (BYTE (
	%CHARCOUNT (' '),		! 0
	%CHARCOUNT ('YES'),		! 1
	%CHARCOUNT ('NO'),		! 2
	%CHARCOUNT ('UNKNOWN'),		! 3
	%CHARCOUNT ('DIRECT'),		! 4
	%CHARCOUNT ('KEYED'),		! 5
	%CHARCOUNT ('SEQUENTIAL'),	! 6
	%CHARCOUNT ('FORMATTED'),	! 7
	%CHARCOUNT ('UNFORMATTED'),	! 8
	%CHARCOUNT ('RELATIVE'),	! 9
	%CHARCOUNT ('INDEXED'),		! 10
	%CHARCOUNT ('NULL'),		! 11
	%CHARCOUNT ('ZERO'),		! 12
	%CHARCOUNT ('FIXED'),		! 13
	%CHARCOUNT ('VARIABLE'),	! 14
	%CHARCOUNT ('SEGMENTED'),	! 15
	%CHARCOUNT ('FORTRAN'),		! 16
	%CHARCOUNT ('LIST'),		! 17
	%CHARCOUNT ('NONE')		! 18
	));

!+
! Vector which is indexed by the keyword number.  Values are:
! 0 = do nothing, 1 = numeric, 2 = string.
!-
OWN
    RESP_TYPES : VECTOR [INQ$K_KEY_MAX + 1, BYTE] INITIAL (BYTE (
	REP INQ$K_IOSTAT OF (0),		! Up to but not including IOSTAT
	1,	! IOSTAT
	REP INQ$K_EXIST - (INQ$K_IOSTAT + 1) OF (0),	! Unused space
	1,	! EXIST
	1,	! OPENED
	1,	! NUMBER
	1,	! NAMED
	0,	! NAME (name is stored separately)
	2,	! ACCESS
	2,	! SEQUENTIAL
	2,	! DIRECT
	2,	! FORM
	2,	! FORMATTED
	2,	! UNFORMATTED
	1,	! RECL
	1,	! NEXTREC
	2,	! BLANK
	2,	! ORGANIZATION
	2,	! RECORDTYPE
	2,	! KEYED
	2	! CARRIAGECONTROL
	));

!
! PSECT DECLARATIONS:
!

DECLARE_PSECTS (FOR);

!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    FOR$$ERR_OPECLO,			! Error handler
    FOR$$ERRSNS_SAV : NOVALUE,		! Save ERRSNS values
    FOR$$OPECLO_ARG,			! Process argument list
    FOR$$CB_PUSH : JSB_CB_PUSH,		! Get a CCB
    FOR$$CB_POP : JSB_CB_POP NOVALUE,	! Free a CCB
    FOR$$CB_FETCH : CALL_CCB NOVALUE,	! Fetch a CCB
    FOR$$SIG_NO_LUB : NOVALUE,		! Signal fatal error
    LIB$SIG_TO_RET,			! Condition handler
    LIB$STOP: NOVALUE,			! Signal non-continuable error
    FOR$$NEXT_LUN : NOVALUE;		! Find next allocated LUN

GLOBAL ROUTINE FOR$INQUIRE (
    KEYWD) =				! Argument list

!++
! FUNCTIONAL DESCRIPTION:
!
!	Processes the FORTRAN INQUIRE statement.
!
!	There are two ways to inquire - by file and by unit.
!	Inquiring by file returns information about that file
!	and about the unit on which it is opened, if any.
!	Inquiring by unit returns information about that unit
!	and about the file opened on it, if any.
!
! FORMAL PARAMETERS:
!
!	The entire argument list is comprised of groups of keywords
!	and values.  The format is identical to that for FOR$OPEN.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	Values are returned to the caller through addresses denoted
!	in the keyword list.
!
! COMPLETION CODES:
!
!	SS$_NORMAL - Successful completion
!	FOR$_FILNOTFOU - File not found
!	FOR$_NO_SUCDEV - No such device
!	FOR$_FILNAMSPE - File name specification error
!	FOR$_OPEFAI    - Open failure
!	FOR$_RECIO_OPE - Recursive I/O operation
!	FOR$_INSVIRMEM - Insufficient virtual memory
!
! SIDE EFFECTS:
!
!	On INQUIRE by FILE: disables ASTs while looking at a unit
!	to determine if it is open.  Inquiring about a unit or about
!	a file open on a unit is considered I/O on that unit and
!	follows the FORTRAN rules for recursive I/O (i.e., it's
!	not permitted).
!
!--

    BEGIN

    GLOBAL REGISTER
	CCB = 11 : REF BLOCK [, BYTE];

    BUILTIN
	ACTUALCOUNT;				! Number of arguments in call

    MAP
	KEYWD : BLOCKVECTOR [255, 1];		! Use the format arg list

    LOCAL
	NAM_DSC : DSC$DESCRIPTOR,		! String descriptor for file name
	DEF_DSC : DSC$DESCRIPTOR,		! String descriptor for default file name
	L_UNWIND_ACTION : VOLATILE,		! UNWIND action code for handler
	INQUIRE : VOLATILE VECTOR [INQ$K_KEY_MAX + 1],	! INQUIRE parameter array
	NAM : BLOCK [NAM$C_BLN, BYTE],			! NAM block
	FAB : BLOCK [FAB$C_BLN, BYTE],			! FAB block
	XAB : BLOCK [XAB$C_FHCLEN, BYTE],		! XAB block
	UNIT,						! LUN number
	RES_OR_EXP_NAME : VECTOR [NAM$C_MAXRSS, BYTE],	! RSN or ESN
	RES_OR_EXP_LEN,				! Length of resultant name
	INQ_FLAGS: BLOCK [4,BYTE] FIELD (INQ_FIELDS),	! Internal flags
	VAR_LENGTHS : VECTOR [INQ$K_KEY_MAX + 1, BYTE],	! Length in bits of variables
	RESP_VEC : VECTOR [INQ$K_KEY_MAX + 1, LONG],	! Response vector
	I,					! Loop index
	RMS_STATUS,				! Returned status from RMS calls
	RET_STATUS,				! Returned error code from FOR$INQUIRE
	SYS_STATUS,				! STV from RMS errors
	STATUS;					! Returned condition code

    ENABLE
	FOR$$ERR_OPECLO (L_UNWIND_ACTION, INQUIRE);	! Set up error handler

    !+
    ! Initialize internal flags and return status value.
    !-
    INQ_FLAGS [UNIT_OK] = 0;
    INQ_FLAGS [NAME_OK] = 0;
    INQ_FLAGS [CCB_OK] = 0;
    INQ_FLAGS [EXISTS] = 0;
    INQ_FLAGS [FAB_OK] = 0;
    RET_STATUS = 1;
    RMS_STATUS = 1;
    SYS_STATUS = 1;
    CH$FILL (0, (INQ$K_KEY_MAX +1) * %UPVAL, RESP_VEC);
    CH$FILL (0, INQ$K_KEY_MAX + 1, VAR_LENGTHS);
    RES_OR_EXP_LEN = 0;		! No name available yet

    !+
    ! Set UNWIND cleanup to be a no-op since LUB/ISB/RAB
    ! has not been pushed yet.
    !-

    L_UNWIND_ACTION = FOR$K_UNWINDNOP;

    !+
    ! Copy keyword argument list into array INQUIRE
    ! in canonical order.  If FILE= is ASCIZ string, NAM_DSC is set
    ! up as the name descriptor.  May signal FOR$_INVARGFOR after
    ! setup.
    !-

    FOR$$OPECLO_ARG (KEYWD, ACTUALCOUNT (), INQUIRE, INQ$K_KEY_MAX, NAM_DSC,
	DEF_DSC, 0, VAR_LENGTHS);

    !+
    ! Mark IOSTAT as word or longword.  This is done here so that
    ! the general variable storage algorithm will work for IOSTAT
    ! without penalizing OPEN and CLOSE by doing the work in
    ! FOR$$OPECLO_ARG.
    !-
    IF .INQUIRE [INQ$K_IOSTAT] NEQ 0
    THEN
	IF .INQUIRE [INQ$K_IOSTAT_L]
	THEN
	    VAR_LENGTHS [INQ$K_IOSTAT] = 32
	ELSE
	    VAR_LENGTHS [INQ$K_IOSTAT] = 16;

    !+
    ! Set up FAB, NAM and XAB blocks.
    !-

    CH$FILL (0, FAB$C_BLN, FAB);		! Set up FAB
    FAB [FAB$B_BID] = FAB$C_BID;
    FAB [FAB$B_BLN] = FAB$C_BLN;
    FAB [FAB$L_NAM] = NAM;
    CH$FILL (0, NAM$C_BLN, NAM);		! Set up NAM
    NAM [NAM$B_BID] = NAM$C_BID;
    NAM [NAM$B_BLN] = NAM$C_BLN;
    NAM [NAM$L_RSA] = NAM [NAM$L_ESA] = RES_OR_EXP_NAME;
    NAM [NAM$B_RSS] = NAM [NAM$B_ESS] = NAM$C_MAXRSS;
    FAB [FAB$B_DNS] = %CHARCOUNT ('.DAT');	! Default name size
    FAB [FAB$L_DNA] = UPLIT BYTE ('.DAT');	! Default name string
    FAB [FAB$V_SHRGET] = 1;			! Indicate shared access
    FAB [FAB$V_SHRPUT] = 1;
    FAB [FAB$V_SHRDEL] = 1;
    FAB [FAB$V_SHRUPD] = 1;
    FAB [FAB$V_UPI] = 1;			! Share sequential files
    CH$FILL (0, XAB$C_FHCLEN, XAB);		! Set up XAB
    XAB [XAB$B_COD] = XAB$C_FHC;
    XAB [XAB$B_BLN] = XAB$C_FHCLEN;
    FAB [FAB$L_XAB] = XAB;

    !+
    ! Now we split depending on whether this is an INQUIRE by FILE or
    ! an INQUIRE by UNIT.  If either FILE or DEFAULTFILE is present, it
    ! is an INQUIRE by FILE.  Otherwise it is an INQUIRE by UNIT.
    !-

    IF .INQUIRE [INQ$K_FILE] NEQA 0 OR .INQUIRE [INQ$K_DEFAULTF] NEQA 0
    THEN
	BEGIN

	!+
	! This is INQUIRE by FILE.  Put the specified filename and/or
	! default file name in the FAB and do a $OPEN to both see if the
	! file exists and to get a resultant name string.  Then $CLOSE
	! the file, because we no longer need it.
	!-

	IF .INQUIRE [INQ$K_DEFAULTF] NEQA 0
	THEN
	    BEGIN
	    LOCAL
		DNAME: REF DSC$DESCRIPTOR;	! Default filename descriptor
	    DNAME = .INQUIRE [INQ$K_DEFAULTF];	! Get file name address
	    IF .DNAME [DSC$W_LENGTH] GTRU 255
	    THEN
		FOR$$SIG_NO_LUB (FOR$_FILNAMSPE);
	    FAB [FAB$B_DNS] = .DNAME [DSC$W_LENGTH];
	    FAB [FAB$L_DNA] = .DNAME [DSC$A_POINTER];
	    END;

	IF .INQUIRE [INQ$K_FILE] NEQA 0
	THEN
	    BEGIN
	    LOCAL
		FNAME: REF DSC$DESCRIPTOR;	! Filename descriptor
	    FNAME = .INQUIRE [INQ$K_FILE];	! Get file name address
	    IF .FNAME [DSC$W_LENGTH] GTRU 255
	    THEN
		FOR$$SIG_NO_LUB (FOR$_FILNAMSPE);
	    FAB [FAB$B_FNS] = .FNAME [DSC$W_LENGTH];
	    FAB [FAB$L_FNA] = .FNAME [DSC$A_POINTER];
	    END;

	!+
	! Do a $PARSE and $SEARCH to see if the name is ok.
	!-
	IF $PARSE (FAB=FAB)
	THEN
	    BEGIN
	    $SEARCH (FAB=FAB);
	    INQ_FLAGS [NAME_OK] = 1;
	    END
	ELSE IF .FAB [FAB$L_STS] EQL RMS$_DNF
	THEN
	    INQ_FLAGS [NAME_OK] = 1;	! It's still a vaild filename
	FAB [FAB$V_NAM] = 1;
	!+
	! Now attempt to $OPEN the file.  We may fail for several
	! reasons, one of which is that someone else, maybe us, has
	! the file locked.  We try to recover from errors as gracefully
	! as we can.
	!-

	RMS_STATUS = $OPEN (FAB=FAB);
	    BEGIN
	    !+
	    ! If we successfully opened the file, all the necessary info
	    ! is now in the FAB.  We have to scan the logical units to see
	    ! if we have the file open.
	    !-

	    LOCAL
		LUN_FLAG;			! Flag to OTS$$NEXT_LUN

	    !+
	    ! Close the file right away, since we have all we need.
	    !-
	    IF .RMS_STATUS
	    THEN
		BEGIN
		$CLOSE (FAB=FAB);		! Shouldn't fail
		INQ_FLAGS [EXISTS] = 1;		! The file exists
		INQ_FLAGS [FAB_OK] = 1;		! The FAB is ok
		END
	    ELSE
		BEGIN
		SYS_STATUS = .FAB [FAB$L_STV];
		!+
		! If the file isn't found, we don't want to signal an error.
		!-
		IF .RMS_STATUS EQLU RMS$_FNF
		THEN
		    BEGIN
		    RMS_STATUS = 1;
		    SYS_STATUS = 1;
		    END
		ELSE
		!+
		! If the RSL is not zero, then the file exists.
		!-
		    IF .NAM [NAM$B_RSL] NEQ 0
		    THEN
			INQ_FLAGS [EXISTS] = 1;
		END;

	    !+
	    ! Currently, we do not allow wildcard characters in filenames.
	    ! Since $PARSE and $SEARCH do some wildcard processing, we must
	    ! explicitly forbid wildcards.
	    !-
	    IF .NAM [NAM$V_WILDCARD]
	    THEN
		BEGIN
		RET_STATUS = FOR$_FILNAMSPE;	! File name specification error
		RMS_STATUS = 1;
		SYS_STATUS = 1;
		INQ_FLAGS [EXISTS] = 0;
		INQ_FLAGS [NAME_OK] = 0;
		INQ_FLAGS [FAB_OK] = 0;
		NAM [NAM$L_ESA] = 0;		! Invalidate ESN and RSN
		NAM [NAM$L_RSA] = 0;
		NAM [NAM$B_ESL] = 0;
		NAM [NAM$B_RSL] = 0;
		END;
	    !+
	    ! Use Resultant name string or Expanded name string, in order
	    ! of preference.
	    !-
	    RES_OR_EXP_LEN = .NAM [NAM$B_RSL];	! Get length of result
	    IF .RES_OR_EXP_LEN EQL 0
	    THEN
		RES_OR_EXP_LEN = .NAM [NAM$B_ESL];
	    !+
	    ! Begin scan of allocated logical units.
	    !-
	    LUN_FLAG = 0;			! Initialize LUN_FLAG
	    IF .RET_STATUS THEN			! If no error so far
	    DO					! Until no more units
		BEGIN
		FOR$$NEXT_LUN (LUN_FLAG, UNIT);	! Get next used LUN
		IF .LUN_FLAG NEQ 0
		THEN
		    BEGIN
		    !+
		    ! We have a unit which has been allocated by FORTRAN.
		    ! We call FOR$$CB_FETCH to fetch the CCB.  If the
		    ! unit is opened and the names match then we use it,
		    ! else we try again.  This matching must be done while
		    ! ASTs are disabled so as to prevent someone from
		    ! playing in the LUB while we are deciding.
		    !-
		    LOCAL
			AST_STATUS;	! Returned from $SETAST
		    AST_STATUS = $SETAST (ENBFLG = 0);	! Disable ASTs
		    FOR$$CB_FETCH (.UNIT);	! Fetch the CCB for this unit
		    IF .CCB NEQ 0
		    THEN
			IF .CCB [LUB$V_OPENED]
			THEN
			    IF CH$EQL (.CCB [LUB$B_RSL], .CCB [LUB$A_RSN],
				.RES_OR_EXP_LEN, RES_OR_EXP_NAME, %C' ')
			    THEN
				BEGIN
				!+
				! We have a match.  Call PUSH_CCB to
				! push the unit and return any errors
				! as its value.  ASTs are still disabled.
				!-
				STATUS = PUSH_CCB (.UNIT);
				IF .AST_STATUS EQL SS$_WASSET
				THEN
				    $SETAST (ENBFLG = 1);	! Reenable ASTs
				IF .STATUS
				THEN
				    BEGIN
				    L_UNWIND_ACTION = FOR$K_UNWINDPOP;
				    INQ_FLAGS [UNIT_OK] = 1;
				    INQ_FLAGS [CCB_OK] = 1;
				    INQ_FLAGS [EXISTS] = 1;
				    RMS_STATUS = 1;	! No error there
				    SYS_STATUS = 1;
				    EXITLOOP;
				    END
				ELSE
				    BEGIN
				    !+
				    ! The push failed.  Set the
				    ! return status and exit the loop.
				    !-
				    RET_STATUS = .STATUS;
				    RMS_STATUS = 1;	! No RMS error
				    SYS_STATUS = 1;	! No system error
				    EXITLOOP;
				    END;
				END;
		    !+
		    ! No match.  Continue scanning units.
		    !-
		    IF .AST_STATUS EQL SS$_WASSET
		    THEN
			$SETAST (ENBFLG = 1);	! Reenable ASTs
		    END;
		END
	    UNTIL .LUN_FLAG EQL 0;	! Until no more LUNs

	    END;
	END

    ELSE

	BEGIN
	!+
	! This is INQUIRE by UNIT.
	!-

	UNIT = .INQUIRE [INQ$K_UNIT];	! Get unit number
	IF .UNIT GEQ LUB$K_LUN_MIN AND .UNIT LEQ LUB$K_LUN_MAX  ! Unit in range 0-99?
	THEN
	    BEGIN
	    INQ_FLAGS [UNIT_OK] = 1;
	    !+
	    ! We know that the unit is a valid number, but we don't
	    ! know if it has been opened by FORTRAN.  Call PUSH_CCB
	    ! to attempt the push.  It may fail because the unit was
	    ! not allocated by FORTRAN or because of recursive I/O,
	    ! or other reasons.
	    !-
	    STATUS = PUSH_CCB (.UNIT);
	    IF .STATUS
	    THEN
		BEGIN
		!+
		! Success.  Use this CCB.
		!-
		L_UNWIND_ACTION = FOR$K_UNWINDPOP;
		IF .CCB [LUB$V_OPENED]	! Unit open?
		THEN
		    BEGIN
		    INQ_FLAGS [CCB_OK] = 1;
		    INQ_FLAGS [EXISTS] = 1;
		    END
		ELSE
		    BEGIN
		    !+
		    ! The unit is not open.  Return it and try again.
		    !-
		    FOR$$CB_POP ();	!  Return the LUB
		    L_UNWIND_ACTION = FOR$K_UNWINDNOP;
		    END;
		END
	    ELSE
		!+
		! The push failed.
		!-
		RET_STATUS = .STATUS;
	    END;
	END;


    !+
    ! Now fill in return values.
    !-

    !+
    ! EXIST - Logical variable.
    !	By file - TRUE if file exists, otherwise FALSE.
    !	By unit - TRUE if unit exists (0-99), otherwise FALSE.
    !-
    IF .INQUIRE [INQ$K_EXIST] NEQ 0
    THEN
	IF .INQ_FLAGS [EXISTS] OR (.INQUIRE [INQ$K_FILE] EQL 0 AND
	    .INQ_FLAGS [UNIT_OK])
	THEN
	    RESP_VEC [INQ$K_EXIST] = -1
	ELSE
	    RESP_VEC [INQ$K_EXIST] = 0;

    !+
    ! OPENED - logical variable
    !	TRUE if unit is opened, otherwise FALSE.
    !-
    IF .INQUIRE [INQ$K_OPENED] NEQ 0
    THEN
	IF .INQ_FLAGS [CCB_OK]		! True if unit connected to a file
	THEN
	    RESP_VEC [INQ$K_OPENED] = -1
	ELSE
	    RESP_VEC [INQ$K_OPENED] = 0;

    !+
    ! NUMBER - integer variable
    !	By file - unit number that file is connected to.
    !	By unit - returns unit number if connected.
    !-

    IF .INQUIRE [INQ$K_NUMBER] NEQ 0
    THEN
	IF .INQ_FLAGS [CCB_OK]
	THEN
	    RESP_VEC [INQ$K_NUMBER] = .UNIT
	ELSE
	    RESP_VEC [INQ$K_NUMBER] = 0;

    !+
    ! NAMED - logical variable
    !	If file has a name, then this is TRUE.  If file is opened SCRATCH,
    !   then it is considered not to be named.
    !-
    IF .INQUIRE [INQ$K_NAMED] NEQ 0
    THEN
	BEGIN
	IF .INQ_FLAGS [NAME_OK] OR .INQ_FLAGS [CCB_OK]
	THEN
	    RESP_VEC [INQ$K_NAMED] = -1
	ELSE
	    RESP_VEC [INQ$K_NAMED] = 0;
	IF .INQ_FLAGS [CCB_OK] THEN IF .CCB [LUB$V_SCRATCH]
	THEN
	    RESP_VEC [INQ$K_NAMED] = 0;
	END;

    !+
    ! NAME - character variable
    !	If NAMED would be true, then the fully qualified file name that results.
    !	This file might not exist, but the filename is valid.
    !-
    IF .INQUIRE [INQ$K_NAME] NEQ 0
    THEN
	BEGIN
	LOCAL
	    NAME_DSC : REF DSC$DESCRIPTOR,
	    NAME_ADDR,
	    NAME_LEN;
	NAME_DSC = .INQUIRE [INQ$K_NAME];
	IF .INQ_FLAGS [NAME_OK]
	THEN
	    BEGIN
	    NAME_ADDR = RES_OR_EXP_NAME;
	    NAME_LEN = .RES_OR_EXP_LEN;
	    END
	ELSE IF .INQ_FLAGS [CCB_OK]
	THEN
	    BEGIN
	    NAME_ADDR = .CCB [LUB$A_RSN];
	    NAME_LEN = .CCB [LUB$B_RSL];
	    END
	ELSE IF .FAB [FAB$L_FNA] NEQ 0		! Invalid file name
	THEN
	    BEGIN
	    NAME_ADDR = .FAB [FAB$L_FNA];	! Return supplied string
	    NAME_LEN = .FAB [FAB$B_FNS];
	    END
	ELSE
	    BEGIN
	    NAME_ADDR = RES_OR_EXP_NAME;	! No chars will be moved
	    NAME_LEN = 0;			! To  blank fill result
	    END;
	CH$COPY (.NAME_LEN, .NAME_ADDR, %C' ',
	    .NAME_DSC [DSC$W_LENGTH], .NAME_DSC [DSC$A_POINTER]);
	END;

    !+
    ! ACCESS - character variable
    !	Access type specified by OPEN or DEFINE FILE.  Can be 'SEQUENTIAL',
    !	'DIRECT', 'KEYED' or 'UNKNOWN' if not connected.
    !-
    IF .INQUIRE [INQ$K_ACCESS] NEQ 0
    THEN
	BEGIN
	RESP_VEC [INQ$K_ACCESS] = UNKNOWN;
	IF .INQ_FLAGS [CCB_OK]
	THEN
	    IF .CCB [LUB$V_DIRECT]
	    THEN
		RESP_VEC [INQ$K_ACCESS] = DIRECT
	    ELSE IF .CCB [LUB$V_KEYED]
	    THEN
		RESP_VEC [INQ$K_ACCESS] = KEYED
	    ELSE
		RESP_VEC [INQ$K_ACCESS] = SEQUENTIAL
	ELSE
	    RESP_VEC [INQ$K_ACCESS] = UNKNOWN;
	END;

    !+
    ! SEQUENTIAL - character variable
    !	If ACCESS='SEQUENTIAL' is allowed for this file, then this is 'YES'.
    !	An answer of 'NO' is impossible for VAX, since ALL files can be accessed
    !	sequentially.  However, if we can't open the file, we return 'UNKNOWN'.
    !-
    IF .INQUIRE [INQ$K_SEQUENTIA] NEQ 0
    THEN
	IF .INQ_FLAGS [EXISTS]
	THEN
	    RESP_VEC [INQ$K_SEQUENTIA] = YES
	ELSE
	    RESP_VEC [INQ$K_SEQUENTIA] = UNKNOWN;

    !+
    ! DIRECT - character variable
    !	If ACCESS='DIRECT' is allowed for this file, then we answer 'YES'.
    !	If not allowed, answer 'NO'.  If we can't open the file, answer 'UNKNOWN'.
    !-
    IF .INQUIRE [INQ$K_DIRECT] NEQ 0
    THEN
	BEGIN
	RESP_VEC [INQ$K_DIRECT] = UNKNOWN;
	IF .INQ_FLAGS [EXISTS]
	THEN
	    BEGIN
	    IF .INQ_FLAGS [CCB_OK]
	    THEN
		CASE .CCB [LUB$B_ORGAN] FROM LUB$K_ORG_SEQUE TO LUB$K_ORG_INDEX OF
		    SET

		    [LUB$K_ORG_SEQUE] :
			IF .CCB [LUB$V_FIXED]
			THEN
			    RESP_VEC [INQ$K_DIRECT] = YES
			ELSE
			    RESP_VEC [INQ$K_DIRECT] = NO;
		    [LUB$K_ORG_RELAT] :
			RESP_VEC [INQ$K_DIRECT] = YES;
		    [LUB$K_ORG_INDEX] :
			RESP_VEC [INQ$K_DIRECT] = NO;
		    [INRANGE, OUTRANGE] :
			;

		    TES
	    ELSE IF .INQ_FLAGS [FAB_OK]
	    THEN
		SELECT .FAB [FAB$B_ORG] OF
		    SET

		    [FAB$C_SEQ] :
			IF .FAB [FAB$B_RFM] EQL FAB$C_FIX
			THEN
			    RESP_VEC [INQ$K_DIRECT] = YES
			ELSE
			    RESP_VEC [INQ$K_DIRECT] = NO;
		    [FAB$C_REL] :
			RESP_VEC [INQ$K_DIRECT] = YES;
		    [FAB$C_IDX] :
			RESP_VEC [INQ$K_DIRECT] = NO;
		
		    TES;
	    END;
	END;

    !+
    ! KEYED - character variable
    !	Is ACCESS='KEYED' allowed for this file?  'YES' if it's INDEXED
    !	organization, 'NO' if not and 'UNKNOWN' if we can't tell.
    !-
    IF .INQUIRE [INQ$K_KEYED] NEQ 0
    THEN
	BEGIN
	RESP_VEC [INQ$K_KEYED] = UNKNOWN;
	IF .INQ_FLAGS [EXISTS]
	THEN
	    BEGIN
	    IF .INQ_FLAGS [CCB_OK]
	    THEN
		CASE .CCB [LUB$B_ORGAN] FROM LUB$K_ORG_SEQUE TO LUB$K_ORG_INDEX OF
		    SET

		    [LUB$K_ORG_SEQUE, LUB$K_ORG_RELAT] :
			RESP_VEC [INQ$K_KEYED] = NO;
		    [LUB$K_ORG_INDEX] :
			RESP_VEC [INQ$K_KEYED] = YES;
		    [INRANGE, OUTRANGE] :
			;

		    TES
	    ELSE IF .INQ_FLAGS [FAB_OK]
	    THEN
		SELECT .FAB [FAB$B_ORG] OF
		    SET

		    [FAB$C_SEQ, FAB$C_REL] :
			RESP_VEC [INQ$K_KEYED] = NO;
		    [FAB$C_IDX] :
			RESP_VEC [INQ$K_KEYED] = YES;
		
		    TES;
	    END;
	END;

    !+
    ! FORM - character variable
    !	If the file is connected for FORMATTED or UNFORMATTED I/O, then
    !	return the string 'FORMATTED' or 'UNFORMATTED' as is appropriate.
    !	If we can't tell, return 'UNKNOWN'.
    !-

    IF .INQUIRE [INQ$K_FORM] NEQ 0
    THEN
	BEGIN
	RESP_VEC [INQ$K_FORM] = UNKNOWN;
	IF .INQ_FLAGS [CCB_OK]
	THEN
	    IF .CCB [LUB$V_FORMATTED]
	    THEN
		RESP_VEC [INQ$K_FORM] = FORMATTED
	    ELSE IF .CCB [LUB$V_UNFORMAT]
	    THEN
		RESP_VEC [INQ$K_FORM] = UNFORMATTED;
	END;

    !+
    ! FORMATTED - character variable
    !	If FORM='FORMATTED' allowed?  If so, answer 'YES'.  There is
    !	no way to answer 'NO'.
    !	'UNKNOWN' if we can't tell.
    !-

    IF .INQUIRE [INQ$K_FORMATTED] NEQ 0
    THEN
	IF .INQ_FLAGS [EXISTS]
	THEN
	    RESP_VEC [INQ$K_FORMATTED] = YES
	ELSE
	    RESP_VEC [INQ$K_FORMATTED] = UNKNOWN;


    !+
    ! UNFORMATTED - character variable
    !	Is FORM='UNFORMATTED' allowed?  If so, answer 'YES'.  
    !	'NO' is impossible.  'UNKNOWN' if we can't tell.
    !-

    IF .INQUIRE [INQ$K_UNFORMATT] NEQ 0
    THEN
	IF .INQ_FLAGS [EXISTS]
	THEN
	    RESP_VEC [INQ$K_UNFORMATT] = YES
	ELSE
	    RESP_VEC [INQ$K_UNFORMATT] = UNKNOWN;

    !+
    ! ORGANIZATION - character string
    !	Return the file organization as 'SEQUENTIAL', 'RELATIVE' or
    !	'INDEXED'.  Return 'UNKNOWN' if we can't open the file.
    !-

    IF .INQUIRE [INQ$K_ORGANIZAT] NEQ 0
    THEN
	BEGIN
	RESP_VEC [INQ$K_ORGANIZAT] = UNKNOWN;
	IF .INQ_FLAGS [EXISTS]
	THEN
	    IF .INQ_FLAGS [CCB_OK]
	    THEN
		CASE .CCB [LUB$B_ORGAN] FROM LUB$K_ORG_SEQUE TO LUB$K_ORG_INDEX OF
		    SET

		    [LUB$K_ORG_SEQUE] :
			RESP_VEC [INQ$K_ORGANIZAT] = SEQUENTIAL;
		    [LUB$K_ORG_RELAT] :
			RESP_VEC [INQ$K_ORGANIZAT] = RELATIVE;
		    [LUB$K_ORG_INDEX] :
			RESP_VEC [INQ$K_ORGANIZAT] = INDEXED;
		    [INRANGE, OUTRANGE] :
			;

		    TES
	    ELSE IF .INQ_FLAGS [FAB_OK]
	    THEN
		SELECT .FAB [FAB$B_ORG] OF
		    SET

		    [FAB$C_SEQ] :
			RESP_VEC [INQ$K_ORGANIZAT] = SEQUENTIAL;
		    [FAB$C_REL] :
			RESP_VEC [INQ$K_ORGANIZAT] = RELATIVE;
		    [FAB$C_IDX] :
			RESP_VEC [INQ$K_ORGANIZAT] = INDEXED;
		
		    TES;
	END;

    !+
    ! RECL - integer variable
    !	Return the record length of the file.  If the file is opened,
    !	the current length is taken.  Else if the file exists the
    !	size used is the MAX of FAB$W_MRS and XAB$W_LRL.
    !	The record length is in bytes unless the file is connected for
    !	UNFORMATTED, in which case the length is in longwords.  If
    !	the file is connected SEGMENTED, then 2 bytes are subtracted
    !	from the length.  This is the inverse of the calculations
    !	done by OPEN.  If the record length can not be determined,
    !	0 is returned.
    !-
    IF .INQUIRE [INQ$K_RECL] NEQ 0
    THEN
	BEGIN
	RESP_VEC [INQ$K_RECL] = 0;	! If recordsize is undefined
	IF .INQ_FLAGS [CCB_OK]
	THEN
	    BEGIN
	    IF .CCB [LUB$W_RBUF_SIZE] NEQ 0
	    THEN
		BEGIN
		RESP_VEC [INQ$K_RECL] = .CCB [LUB$W_RBUF_SIZE];
		IF .CCB [LUB$V_SEGMENTED]
		THEN
		    RESP_VEC [INQ$K_RECL] = .RESP_VEC [INQ$K_RECL] - 2;
		IF .CCB [LUB$V_UNFORMAT]
		THEN
		    RESP_VEC [INQ$K_RECL] = .RESP_VEC [INQ$K_RECL] / %UPVAL;
		END;
	    END
	ELSE IF .INQ_FLAGS [FAB_OK]
	THEN
	    RESP_VEC [INQ$K_RECL] = MAX (.FAB [FAB$W_MRS], .XAB [XAB$W_LRL]);
	END;

    !+
    ! NEXTREC - integer variable
    !	If the file is connected for direct access, return the next logical
    !	record number.  If it is not connected for direct access, return 0.
    !-
    IF .INQUIRE [INQ$K_NEXTREC] NEQ 0
    THEN
	BEGIN
	RESP_VEC [INQ$K_NEXTREC] = 0;
	IF .INQ_FLAGS [CCB_OK] THEN IF .CCB [LUB$V_DIRECT]
	THEN
	    RESP_VEC [INQ$K_NEXTREC] = .CCB [LUB$L_LOG_RECNO];
	END;

    !+
    ! BLANK - character variable
    !	If the file is connected for FORMATTED, return the BLANK=
    !	value in effect, either 'ZERO' or 'NULL'.  If we can't tell,
    !	return 'UNKNOWN'.
    !-
    IF .INQUIRE [INQ$K_BLANK] NEQ 0
    THEN
	BEGIN
	RESP_VEC [INQ$K_BLANK] = UNKNOWN;
	IF .INQ_FLAGS [CCB_OK] THEN IF .CCB [LUB$V_FORMATTED]
	THEN
	    BEGIN
	    IF .CCB [LUB$V_NULLBLNK]
	    THEN
		RESP_VEC [INQ$K_BLANK] = NULL
	    ELSE
		RESP_VEC [INQ$K_BLANK] = ZERO;
	    END;
	END;

    !+
    ! RECORDTYPE - character variable
    !	Return the file's recordtype.  'FIXED' or 'VARIABLE'.  Return
    !	'SEGMENTED' if the file is currently connected for SEGMENTED.
    !	'UNKNOWN' if we can't tell.
    !-
    IF .INQUIRE [INQ$K_RECORDTYP] NEQ 0
    THEN
	BEGIN
	RESP_VEC [INQ$K_RECORDTYP] = UNKNOWN;
	IF .INQ_FLAGS [EXISTS]
	THEN
	    IF .INQ_FLAGS [CCB_OK]
	    THEN
		BEGIN
		IF .CCB [LUB$V_FIXED]
		THEN
		    RESP_VEC [INQ$K_RECORDTYP] = FIXED
		ELSE IF .CCB [LUB$V_SEGMENTED]
		THEN
		    RESP_VEC [INQ$K_RECORDTYP] = SEGMENTED
		ELSE
		    RESP_VEC [INQ$K_RECORDTYP] = VARIABLE;
		END
	    ELSE IF .INQ_FLAGS [FAB_OK]
	    THEN
		SELECTONE .FAB [FAB$B_RFM] OF
		    SET

		    [FAB$C_FIX] :
			RESP_VEC [INQ$K_RECORDTYP] = FIXED;
		    [FAB$C_VAR, FAB$C_VFC] :
			RESP_VEC [INQ$K_RECORDTYP] = VARIABLE;

		    TES;
	END;

    !+
    ! CARRIAGECONTROL
    !-
    IF .INQUIRE [INQ$K_CARRIAGE] NEQ 0
    THEN
	BEGIN
	RESP_VEC [INQ$K_CARRIAGE] = UNKNOWN;
	IF .INQ_FLAGS [EXISTS]
	THEN
	    IF .INQ_FLAGS [CCB_OK]
	    THEN
		BEGIN
		IF .CCB [LUB$V_FTN]
		THEN
		    RESP_VEC [INQ$K_CARRIAGE] = FORTRAN
		ELSE IF .CCB [LUB$V_CR]
		THEN
		    RESP_VEC [INQ$K_CARRIAGE] = LIST
		ELSE IF NOT .CCB [LUB$V_PRN]
		THEN
		    RESP_VEC [INQ$K_CARRIAGE] = NONE;
		END
	    ELSE IF .INQ_FLAGS [FAB_OK]
	    THEN
		BEGIN
		IF .FAB [FAB$V_FTN]
		THEN
		    RESP_VEC [INQ$K_CARRIAGE] = FORTRAN
		ELSE IF .FAB [FAB$V_CR]
		THEN
		    RESP_VEC [INQ$K_CARRIAGE] = LIST
		ELSE IF NOT .FAB [FAB$V_PRN]
		THEN
		    RESP_VEC [INQ$K_CARRIAGE] = NONE;
		END
	END;

    !+
    ! Store all responses.
    !-

    !+
    ! Loop through keyword table and store value.  Value may be
    ! numeric, character or ignorable.
    !-

    INCR I FROM INQ$K_IOSTAT TO INQ$K_KEY_MAX DO
	IF .INQUIRE [.I] NEQ 0
	THEN
	    CASE .RESP_TYPES [.I] FROM 0 TO 2 OF
		SET

		[0] : 
		    ;	! Do nothing.  Value is already stored.

		[1] :   ! Numeric value.
		    BEGIN
		    LOCAL
			DEST : REF BLOCK [,BYTE];
		    DEST = .INQUIRE [.I];	! Address of destination
		    DEST [0, 0, .VAR_LENGTHS [.I], 1] = .RESP_VEC [.I];
		    END;

		[2] :	! Character value.
		    BEGIN
		    LOCAL
			DSC : REF DSC$DESCRIPTOR,
			WHICH;		!  Key of response value
		    DSC = .INQUIRE [.I];	! Result descriptor
		    WHICH = .RESP_VEC [.I];
		    CH$COPY (.RESP_LENS [.WHICH], .RESP_VALS [.WHICH] + RESP_VALS,
			%C' ', .DSC [DSC$W_LENGTH], .DSC [DSC$A_POINTER]);
		    END;

		TES;

    !+
    ! If we got an error, now's the time to signal it.
    !-
    IF NOT .RET_STATUS OR NOT .RMS_STATUS
    THEN
	BEGIN
	LOCAL
	    FILENAME : DSC$DESCRIPTOR;	! Filename descriptor
	IF NOT .RMS_STATUS
	THEN
	    RET_STATUS = (SELECTONEU .RMS_STATUS OF
		SET

		[RMS$_FNF] : FOR$_FILNOTFOU;
		[RMS$_DEV] : FOR$_NO_SUCDEV;
		[RMS$_FNM,RMS$_NOD,RMS$_SYN,RMS$_TYP,RMS$_VER] : FOR$_FILNAMSPE;
		[OTHERWISE] : FOR$_OPEFAI;

		TES);
	IF NOT .INQ_FLAGS [CCB_OK]
	THEN
	    UNIT = 0;
	IF .RMS_STATUS
	THEN
	    RMS_STATUS = 0;
	IF .SYS_STATUS
	THEN
	    SYS_STATUS = 0;
	!+
	! Set up filename descriptor.  The order of preference is:
	! 1: Resultant name string stored in LUB if any.
	! 2: Resultant or expanded string in local NAM block.
	! 3: Original file name in local FAB.
	! 4: A blank if all else fails.
	!-
	FILENAME [DSC$B_CLASS] = DSC$K_CLASS_S;
	FILENAME [DSC$B_DTYPE] = DSC$K_DTYPE_T;
	FILENAME [DSC$W_LENGTH] = .RES_OR_EXP_LEN;
	FILENAME [DSC$A_POINTER] = RES_OR_EXP_NAME;
	IF .RES_OR_EXP_LEN EQL 0
	THEN
	    BEGIN
	    FILENAME [DSC$W_LENGTH] = .FAB [FAB$B_FNS];
	    FILENAME [DSC$A_POINTER] = .FAB [FAB$L_FNA];
	    END;
	IF .INQ_FLAGS [CCB_OK]
	THEN
	    BEGIN
	    FILENAME [DSC$W_LENGTH] = .CCB [LUB$B_RSL];
	    FILENAME [DSC$A_POINTER] = .CCB [LUB$A_RSN];
	    END;

	!+
	! Call FOR$$ERRSNS_SAV to save the error for ERRSNS calls.
	!-

	FOR$$ERRSNS_SAV (
	    .BLOCK [RET_STATUS, STS$V_MSG_NO;, BYTE],
	    .RMS_STATUS,
	    .SYS_STATUS,
	    .UNIT,
	    .RET_STATUS);

	LIB$STOP (
	    .RET_STATUS,	! FORTRAN error code
	    3,			! number of FAO args to follow
	    .UNIT,		! Logical unit number
	    FILENAME,		! Filename descriptor (if any)
	    0,			! User PC to be filled in by handler
	    .RMS_STATUS,	! RMS error code 
	    .SYS_STATUS)	! System error code
	END;

    !+
    ! Pop the CCB if we have one.
    !-
    IF .INQ_FLAGS [CCB_OK]
    THEN
	FOR$$CB_POP ();


    !+
    ! Return success - we only get here if there has been no error
    !-

    RETURN 1;
    END;

ROUTINE PUSH_CCB (		! Call FOR$$CB_PUSH and return with value
	UNIT) : CALL_CCB =

!++
! ABSTRACT:
!
!	Call FOR$$CB_PUSH and return with a condition value as the function
!	result.  FOR$$CB_PUSH is not called directly as it may signal when
!	we do not desire it.
!
! FORMAL PARAMETERS:
!
!	UNIT	- The unit to be pushed
!
! FUNCTION RESULT:
!
!	Either SS$_NORMAL or the condition code of an error which was
!	signalled by FOR$$CB_PUSH.
!--

BEGIN

    EXTERNAL REGISTER
	CCB;

    ENABLE
	LIB$SIG_TO_RET;				! Convert signals to return values

    FOR$$CB_PUSH (.UNIT, LUB$K_ILUN_MIN);	! Push the CCB

    RETURN 1;					! Success

    END;


END				!End of module
ELUDOM
