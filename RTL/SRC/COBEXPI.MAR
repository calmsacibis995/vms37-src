	.TITLE COB$EXPI		COBOL Intermediate Exponentiate
	.IDENT /1-011/		; File: COBEXPI.MAR Edit:LB1011
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;
;	VERSION: 1
;
;	HISTORY:
;
;	AUTHOR:
;		Peter D Gilbert, 2-Aug-1979
;
;	MODIFIED BY:
;
;

	.SBTTL HISTORY		; Detailed current edit history
;
; Edit history for Version 1 of COBINTARI.MAR
;
; 1-001 - Original, with input and output multiplexors lifted from COBINTARI.
;	  PDG 2-Aug-1979
; 1-002 - Changed handling of negative bases.  PDG 22-Sep-1979.
; 1-003 - Make routine PIC.   RKR 24-SEPT-79
; 1-004 - Correct Undefined Exponentiation error code for LIB$SIGNAL
;	  RKR 27-SEPT-79
; 1-005 - Remove additional NON-PIC instruction MOVAW 1[R0], R0
;	  RKR 1-OCT-79
; 1-006	- Add additional entry point COB$EXPI_OSE, and minor code improvements
;	  PDG 3-OCT-79
; 1-007 - Complete implementation of COB$EXPI_OSE.  MLJ 09-Oct-79
; 1-008 - Replaced OTS$_FATINTERR signals by COB$_INVARG.
;	  Replaced all LIB$SIGNAL calls by LIB$STOP calls.
;	  Cosmetic changes.  RKR 21-OCT-79
; 1-009 - Added checks for out-of-range CIT's.  RKR 30-OCT-79
; 1-010 - Fix check for exponent overflow and underflow in FINISH.
;	  Guarantee that a fraction of zero has an exponent of zero.
;	  RKR 23-APR-80
; 1-011 - Changed the branch to FINISH in routine COB$EXPI at label 1$:
;	  to a RET instruction since FINISH expects the input argument
;	  to be in the proper format, where in this case, the argument is
;	  in error and therefore it was never put in the format that
;	  FINISH expects it to be.  LB  15-APR-81
;

	.SBTTL DECLARATIONS

	.DSABL	GBL

;
; INCLUDE FILES:
;

	$DSCDEF
	$INTDEF

;
; EXTERNAL SYMBOLS:
;
	.EXTRN	COB$CVTWI_R8		; Word to intermediate
	.EXTRN	COB$CVTLI_R8		; Longword to intermediate
	.EXTRN	COB$CVTQI_R8		; Quadword to intermediate
	.EXTRN	COB$CVTFI_R7		; Floating to intermediate
	.EXTRN	COB$CVTDI_R7		; Double to intermediate
	.EXTRN	COB$CVTPI_R9		; Packed to intermediate
	.EXTRN	COB$CVTIW_R8		; Intermediate to word
	.EXTRN	COB$CVTIL_R8		; Intermediate to longword
	.EXTRN	COB$CVTIQ_R8		; Intermediate to quadword
	.EXTRN	COB$CVTIF_R7		; Intermediate to floating
	.EXTRN	COB$CVTID_R7		; Intermediate to double
	.EXTRN	COB$CVTIP_R9		; Intermediate to packed
	.EXTRN	COB$_INVARG		; Signal -- Invalid arguments
	.EXTRN	COB$_INTRESOPE		; Intermediate reserved operand
	.EXTRN	COB$_INTEXPUND		; Intermediate underflow
	.EXTRN	COB$_INTEXPOVE		; Intermediate overflow
	.EXTRN  COB$_UNDEF_EXP		; Undefined exponentiation
	.EXTRN	LIB$STOP		; Signal msg and stop

;
; MACROS:
;
	.MACRO	DCL  SYM,SIZ	; To define offsets of stack temps
SYM	=	OFFSET
OFFSET	=	OFFSET + SIZ
	.ENDM
OFFSET	=	0

;
; PSECT DECLARATIONS
;
	.PSECT	_COB$CODE	PIC, SHR, LONG, EXE, NOWRT

;
; EQUATED SYMBOLS:
;
INT$P_I_FRACT=	2		; Temporary until Packed supported in MDL
				; Fraction field offset
;+
;
; OWN STORAGE:
;
;+

;
; log10( 10^k / (10^k-1) );  k=1,2,...,31 ;  ln( 1 + 10^(-k) )
;
TABLE1	= .-16
.PACKED	+0457574905606751254099441934852  ; +0105360515657826301227500980829
.PACKED	+0043648054024500846597442222456  ; +0010050335853501441183548857556
.PACKED	+0004345117740176913064656006946  ; +0001000500333583533500142982252
.PACKED	+0000434316198075103845560440232  ; +0000100005000333358335333500013
.PACKED	+0000043429665339013793521486461  ; +0000010000050000333335833353333
.PACKED	+0000004342946990506375442129173  ; +0000001000000500000333333583333
.PACKED	+0000000434294503617977370462100  ; +0000000100000005000000333333358
.PACKED	+0000000043429448407472425164385  ; +0000000010000000050000000333333
.PACKED	+0000000004342944821203990687473  ; +0000000001000000000500000000333
.PACKED	+0000000000434294481924966551746  ; +0000000000100000000005000000000
.PACKED	+0000000000043429448190542330006  ; +0000000000010000000000050000000
.PACKED	+0000000000004342944819034689748  ; +0000000000001000000000000500000
.PACKED	+0000000000000434294481903273542  ; +0000000000000100000000000005000
.PACKED	+0000000000000043429448190325399  ; +0000000000000010000000000000050
.PACKED	+0000000000000004342944819032518  ; +0000000000000001000000000000000
.PACKED	+0000000000000000434294481903251  ; +0000000000000000100000000000000
.PACKED	+0000000000000000043429448190325  ; +0000000000000000010000000000000
.PACKED	+0000000000000000004342944819032  ; +0000000000000000001000000000000
.PACKED	+0000000000000000000434294481903  ; +0000000000000000000100000000000
.PACKED	+0000000000000000000043429448190  ; +0000000000000000000010000000000
.PACKED	+0000000000000000000004342944819  ; +0000000000000000000001000000000
.PACKED	+0000000000000000000000434294481  ; +0000000000000000000000100000000
.PACKED	+0000000000000000000000043429448  ; +0000000000000000000000010000000
.PACKED	+0000000000000000000000004342944  ; +0000000000000000000000001000000
.PACKED	+0000000000000000000000000434294  ; +0000000000000000000000000100000
.PACKED	+0000000000000000000000000043429  ; +0000000000000000000000000010000
.PACKED	+0000000000000000000000000004342  ; +0000000000000000000000000001000
.PACKED	+0000000000000000000000000000434  ; +0000000000000000000000000000100
.PACKED	+0000000000000000000000000000043  ; +0000000000000000000000000000010
.PACKED	+0000000000000000000000000000004  ; +0000000000000000000000000000001
.PACKED	+0000000000000000000000000000000  ; +0000000000000000000000000000000
  

;
; log10( 1 + 10^(-k) );  k=0,1,2,...,31	  ;  ln( 1 + 10^(-k) )
;
TABLE2	= .
.packed	+3010299956639811952137388947245
.PACKED	+0413926851582250407501999712422  ; +0095310179804324860043952123279
.PACKED	+0043213737826425742751881782228  ; +0009950330853168082848215357544
.PACKED	+0004340774793186406689213877777  ; +0000999500333083533166809398920
.PACKED	+0000434272768626696373135275851  ; +0000099995000333308335333166681
.PACKED	+0000043429231044531868554934715  ; +0000009999950000333330833353333
.PACKED	+0000004342942647561556407439424  ; +0000000999999500000333333083333
.PACKED	+0000000434294460188529180136700  ; +0000000099999995000000333333308
.PACKED	+0000000043429447973177943261133  ; +0000000009999999950000000333333
.PACKED	+0000000004342944816861045868441  ; +0000000000999999999500000000333
.PACKED	+0000000000434294481881537103555  ; +0000000000099999999995000000000
.PACKED	+0000000000043429448190108035524  ; +0000000000009999999999950000000
.PACKED	+0000000000004342944819030346804  ; +0000000000000999999999999500000
.PACKED	+0000000000000434294481903230112  ; +0000000000000099999999999995000
.PACKED	+0000000000000043429448190324965  ; +0000000000000009999999999999950
.PACKED	+0000000000000004342944819032518  ; +0000000000000001000000000000000
.PACKED	+0000000000000000434294481903251  ; +0000000000000000100000000000000
.PACKED	+0000000000000000043429448190325  ; +0000000000000000010000000000000
.PACKED	+0000000000000000004342944819032  ; +0000000000000000001000000000000
.PACKED	+0000000000000000000434294481903  ; +0000000000000000000100000000000
.PACKED	+0000000000000000000043429448190  ; +0000000000000000000010000000000
.PACKED	+0000000000000000000004342944819  ; +0000000000000000000001000000000
.PACKED	+0000000000000000000000434294481  ; +0000000000000000000000100000000
.PACKED	+0000000000000000000000043429448  ; +0000000000000000000000010000000
.PACKED	+0000000000000000000000004342944  ; +0000000000000000000000001000000
.PACKED	+0000000000000000000000000434294  ; +0000000000000000000000000100000
.PACKED	+0000000000000000000000000043429  ; +0000000000000000000000000010000
.PACKED	+0000000000000000000000000004342  ; +0000000000000000000000000001000
.PACKED	+0000000000000000000000000000434  ; +0000000000000000000000000000100
.PACKED	+0000000000000000000000000000043  ; +0000000000000000000000000000010
.PACKED	+0000000000000000000000000000004  ; +0000000000000000000000000000001
.PACKED	+0000000000000000000000000000000  ; +0000000000000000000000000000000

P0:	.packed	+0	; Temp'ry 'til ass'bler ass'bles sh'rt p'cked const's.
P1:	.packed	+1
NINES:	.packed	+9999999999999999999999999999999	; 31 nines


	.SBTTL	MULBIG		Packed Multiply of Big numbers

;++
;
; FUNCTIONAL DESCRIPTION:
;
;	Perform a multiply of two 31-digit packed numbers, producing a
;	63-digit 'packed' result.
;
; CALLING SEQUENCE:
;
;	MULBIG (MULRADDR.ap, MULDADDR.ap, PRODADDR.ap)
;
; INPUT PARAMETERS:
;	
;	MULRADDR.ap		Address of Multiplier
;	MULDADDR.ap		Address of Multiplicand
;	PRODADDR.ap		Address of Product (32 bytes)
;
; IMPLICIT INPUTS:
;
;	The multiplier and multiplicand are modified during the multiply,
;	but are left unchanged at exit.  Overlapping operands will produce
;	incorrect results.
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
;--

;	.ENTRY	MULBIG,	^M<R2,R3,R4,R5,R8>	; Don't want this to be global
MULBIG:	.WORD		^M<R2,R3,R4,R5,R8>

A$	= 0
B$	= 18 + A$
C$	= 18 + B$
D$	= 12 + C$
E$	= 12 + D$

	SUBL2	#E$,SP

	MOVL	12(AP),R8

	MOVP	#31,@4(AP),   2+A$(SP)
	MOVC3	#5,2+0+A$(SP),0+A$(SP)
	MOVC3	#5,2+5+A$(SP),6+A$(SP)
	BICB3	#^XF0,5+12+A$(SP),R0
	MOVB	R0,   5+ 6+A$(SP)
	MOVB	R0,   5+ 0+A$(SP)

	MOVP	#31,@8(AP),   2+B$(SP)
	MOVC3	#5,2+0+B$(SP),0+B$(SP)
	MOVC3	#5,2+5+B$(SP),6+B$(SP)
	BICB3	#^XF0,5+12+B$(SP),R0
	MOVB	R0,   5+ 6+B$(SP)
	MOVB	R0,   5+ 0+B$(SP)

	CLRQ	0(R8)
	CLRQ	8(R8)
	MULP	#11,12+A$(SP),#11,12+B$(SP),#31,16(R8)	; A0xB0
	XORB3	  5+12+A$(SP),  5+12+B$(SP), R0
	BISB3	#^X0C,R0,31(R8)

	MULP	#11,12+A$(SP),#11, 6+B$(SP),#23,C$(SP)	; A0xB1
	MULP	#11, 6+A$(SP),#11,12+B$(SP),#23,D$(SP)	; A1xB0
	ADDP4	#23,   D$(SP),#23,   C$(SP)
	MOVB			11+15(R8), R4
	BICB3	#^XF0, 31(R8),	11+15(R8)
	ADDP4	#23,   C$(SP),#23, 15(R8)
	MOVB	R4,		11+15(R8)

	MULP	#11,12+A$(SP),#11, 0+B$(SP),#23,C$(SP)	; A0xB2
	MULP	#11, 6+A$(SP),#11, 6+B$(SP),#23,D$(SP)	; A1xB1
	ADDP4	#23,   D$(SP),#23,   C$(SP)
	MULP	#11, 0+A$(SP),#11,12+B$(SP),#23,D$(SP)	; A2xB0
	ADDP4	#23,   D$(SP),#23,   C$(SP)
	MOVB			11+10(R8), R4
	BICB3	#^XF0, 31(R8),	11+10(R8)
	ADDP4	#23,   C$(SP),#23, 10(R8)
	MOVB	R4,		11+10(R8)

	MULP	#11, 6+A$(SP),#11, 0+B$(SP),#23,C$(SP)	; A1xB2
	MULP	#11, 0+A$(SP),#11, 6+B$(SP),#23,D$(SP)	; A2xB1
	ADDP4	#23,   D$(SP),#23,   C$(SP)
	MOVB			11+ 5(R8), R4
	BICB3	#^XF0, 31(R8),	11+ 5(R8)
	ADDP4	#23,   C$(SP),#23,  5(R8)
	MOVB	R4,		11+ 5(R8)

	MULP	#11, 0+A$(SP),#11, 0+B$(SP),#23,C$(SP)	; A2xB2
	MOVB			11+ 0(R8), R4
	BICB3	#^XF0, 31(R8),	11+ 0(R8)
	ADDP4	#23,   C$(SP),#23,  0(R8)
	MOVB	R4,		11+ 0(R8)

	RET


	.SBTTL	COB$EXPI	Exponentiate intermediate temporary

;++
;
; FUNCTIONAL DESCRIPTION:
;
;	Accept any two supported data types as input, convert them to
;	Intermediate, exponentiate them, convert the Intermediate result
;	to the data type of the output argument, and return.
;
;	1.  If routine is confronted with unknown data type it
; SIGNALSTOPs COB$_INVARG.
;
;	2.  If presented with an input CIT which has an overflowed or
; underflowed exponent field it SIGNALSTOPs COB$_INTRESOPE.
;
;	3.  If entered at COB$EXPI_OSE  (on size error) and 
; exponentiation can't be done (e.g. exp < 0), returns 0.
;
;	4.  If entered at COB$EXPI and exponentiation can't be done
; it SIGNALSTOPs COB$_UNDEXP.
;
;	5.  If exponentiation is performed and
;			If resulting CIT has overflowed exponent field,
;			SIGNALSTOP COB$_INTEXPOVE.
;
;			If resulting CIT has underflowed exponent field,
;			SIGNALSTOP COB$_INTEXPUND.
; CALLING SEQUENCE:
;
;	COB$EXPI	(BASE.rx.dx, EXPONENT.rx.dx, POWER.wx.dx)
;	COB$EXPI_OSE	(BASE.rx.dx, EXPONENT.rx.dx, POWER.wx.dx)
;
; INPUT PARAMETERS:
;	
;	BASE.rx.dx		The operand to the left of the operator
;	EXPONENT.rx.dx		The operand to the right of the operator
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	POWER.wx.dx		The power BASE ** EXPONENT
;
; IMPLICIT OUTPUTS:
;
;	Different error handling for different entry points:
;	COB$EXPI -	Call LIB$STOP for bad exponentiation.
;	COB$EXPI_OSE -	Return R0 = 1 or 0 for success or failure.
;
; FUNCTION VALUE:
;
;	COB$EXPI_OSE -	1 or 0, depending on success or failure.
;
; SIDE EFFECTS:
;
;	NONE	
;
; QUOTES:
;	
;	"The invisible are insane."
;			- English translation of a Chinese translation of
;				an English proverb.
;
;	"The Stone the Builders Rejected".
;			- Inscription on Jack London's gravestone.
;--

	DCL	base_it,INT$K_I_LEN	; intermediate temp
	DCL	exp_it,	INT$K_I_LEN	; intermediate temp
	DCL	res_it,	INT$K_I_LEN	; intermediate temp
	DCL	x,	16		; for 31 digits
	DCL	y,	16		; for 31 digits
	DCL	z,	32		; for 63 digits
	DCL	res_sign,1		; sign of result 
	DCL	ose,	1		; remember entry point

ERR_0:					; Base = 0
	CMPP4	#INT$K_I_FRACT_D,-
		INT$P_I_FRACT+exp_it(SP),-
		#1,P0
	BLEQ	ERR_BAD			; If exponent > 0 return 0.0 (= base)
	MOVL	#1,R0
	BRW	FINISH
ERR_BAD:
	BLBS	ose(SP),1$		; Br if to return status
	PUSHL	#COB$_UNDEF_EXP		; Undefined exponentiation
	CALLS	#1,G^LIB$STOP		; Signal it and quit
1$:	CLRL	R0			; Error
	RET

	.ENTRY	COB$EXPI_OSE,^M<R2,R3,R4,R5,R6,R7,R8,R9>
	MOVL	#1,R0			; Remember flavor of call
	BRB	EXP_J
	.ENTRY	COB$EXPI,^M<R2,R3,R4,R5,R6,R7,R8,R9>
	;
	; Convert to intermediate
	;
	CLRL	R0
EXP_J:	SUBL2	#offset,SP
	MOVB	R0,ose(SP)
	MOVL	4(AP),R0
	MOVAB	base_it(SP),R1
	BSBW	CONVERT
	MOVL	8(AP),R0
	MOVAB	exp_it(SP),R1
	BSBW	CONVERT

	;
	; Compute the log base 10 of the base
	;
	TSTB	base_it+INT$P_I_FRACT(SP)	; See if base is zero
	BEQL	ERR_0				; What to do? ####
	;
	; Determine the correct sign of the result
	;
	MOVB	#^X0C,res_sign(SP)		; Assume positive
	BISB3	#^X10,<INT$K_I_FRACT_D/2>+INT$P_I_FRACT+base_it(SP),x(SP)
	CMPP3	#1,x(SP),P0
	BGEQ	1314$				; It is positive
	CVTWL	INT$W_I_EXP+exp_it(SP),R4	; If exp <= 0
	BLEQ	ERR_BAD				; then exponent isn't integral
	ASHP	R4,#INT$K_I_FRACT_D,-		; Look at the fractional part
		INT$P_I_FRACT+exp_it(SP),#0,#INT$K_I_FRACT_D,x(SP)
	BNEQ	ERR_BAD				; If non-zero, then bad
	SUBW2	#INT$K_I_FRACT_D,R4		; Look at the integer part
	ASHP	R4,#INT$K_I_FRACT_D,(R1),#0,#1,(R3)
	BBC	#4,(R3),1314$			; If even, result is positive
	MOVB	#^X0D,res_sign(SP)		; Else result is negative
1314$:	ASHP	#<30-INT$K_I_FRACT_D>,-
		#INT$K_I_FRACT_D,base_it+INT$P_I_FRACT(SP),-
		#0,#30,x(SP)			; set x
	BISB2	#^X0F,15+x(SP)			; make it positive
	ASHP	#-1,#30,(R3),#0,#29,z(SP)	; z <- x/10
	ASHP	#<31-1>,#1,P0,#0,#31,y(SP)	; y <- 0
	MNEGL	#1,R6				; k <- 1
2$:	CMPB	x(SP),#1			; x = 1 ?
	BGTR	3$				; br if x > 1
	CMPP4	#29,1+x(SP),#1,P0
	BEQL	10$				; br if log calculation is done
	CMPP3	#29,1+x(SP),z(SP)		; x-z >= 1 ?
	BLSS	4$				; br if not
3$:	SUBP4	#29,z(SP),#31,x(SP)		; x <- x-z
	ASHP	R6,#30,x(SP),#0,#29,z(SP)	; z <- x / 10^k
	MULL3	#-16,R6,R0			; k * 16
	ADDP4	#31,Table1[R0],#31,y(SP)	; y <- y + log( 10^k/(10^k-1) )
	BRB	2$
4$:	DECL	R6				; k <- k+1
	ASHP	R6,#30,x(SP),#0,#29,z(SP)	; z <- z / 10
	BNEQ	2$				; finished if k gets very large
10$:
;	00...0+	<= y <=	99...9+

;	E_d is the number of extra digits we need for the exponent,
;	rounded up to the nearest multiple of 2.

E_d	=	2
	.IIF	GE,INT$K_I_EXP_HI-100,		E_d = 4
	.IIF	LT,INT$K_I_EXP_LO+100,		E_d = 4
	.IIF	GE,INT$K_I_EXP_HI-10000,	E_d = 6
	.IIF	LT,INT$K_I_EXP_LO+10000,	E_d = 6

;	00...0+	<= y <	99...9+

	SUBP4	#31,NINES,#31,y(SP)		; Subtract one (essentially)
	CVTWL	INT$W_I_EXP+base_it(SP),R0	; need to add this on
	CVTLP	R0,#E_d+1,z(SP)
	ASHP	#31-E_d,#E_d+1,z(SP),#0,#31,x(SP)
	BICB2	#^X0F,15-<E_d/2>+y(SP)		; Move sign closer in y
	BISB2	#^X0D,15-<E_d/2>+y(SP)		; Remember it's negative now
	ADDP4	#31-E_d,y(SP),#31,x(SP)		; x <- y + exponent - 1


	ASHP	#31-INT$K_I_FRACT_D,-
		#INT$K_I_FRACT_D,INT$P_I_FRACT+exp_it(SP),-
		#0,#31,y(SP)
	PUSHAB	z+0(SP)				; z <- y * x
	PUSHAB	y+4(SP)				; (this is why z needs 63 digs)
	PUSHAB	x+8(SP)
	CALLS	#3,MULBIG

;	-099.9999  < z <  +099.9999

;
;   We want to grab the integer and fractional parts of this product.
;   Unfortunately, the VAX does not (yet) support 63 digit packed numbers.
;

	SKPC	#0,#31,z(SP)			; Skip leading zeroes
	movl	R0,R4				; Save # of bytes remaining
	cmpl	R0,#3				; Do we have at least 7 digits?
	bgtr	1001$				; Branch if so
	movab	1(R0)[R0],R0			; # of digits in product
	subl3	R0,#7,R2			; Calculate shift amount
	ashp	R2,R0,(R1),#0,#7,x(SP)		; Shift exponent into x
	brb	1002$				; Merge with other case
9191$:	BRW	ERR_BAD				; Branch point
1001$:	movb	3(R1),4+x(SP)			; Save these digs a moment
	bicb3	#^XF0,31+z(SP),3(R1)		; Put in the correct sign
	movp	#7,(R1),x(SP)			; The exponent's hidden in here
	movb	4+x(SP),3(R1)			; Restore digits
1002$:
	CVTWL	INT$W_I_EXP+exp_it(SP),R6	; Get the exponent's exponent
	MOVAW	-68+E_d(R6)[R4],R0		; Calculate shift amount (!)
	ASHP	R0,#7,x(SP),#0,#7,4+x(SP)
	BVS	9191$				; Exponent overflow ####
1004$:	CVTPL	#7,4+x(SP),R1
	CVTLW	R1,INT$W_I_EXP+res_it(SP)
	BVS	9191$
;
;	The decimal point is E_d+1+R6 places to the right of z
;
	CLRL	R4
	MOVAB	E_d+1(R6),R7
	BLEQ	1010$		; R4 is correct offset from z(SP)
	ASHL	#-1,R7,R4
	CMPL	R4,#16
	BLEQ	1010$		; R4 is correct offset from z(SP)
	MOVL	#16,R4		; R4 is correct offset from z(SP)
1010$:
;
;	Shift by  E_d + 1 + R6 - 2*R4	= R7 - 2*R4
;
	BICB3	#^XF0,31+z(SP),R0		; Put in a correct sign
	BICB2	#^X0F,15+z(SP)[R4]
	BISB2	R0,15+z(SP)[R4]
	EMUL	#-2,R4,R7,R0			; R7 - 2 * R4
	ASHP	R0,#31,z(SP)[R4],#0,#31,x(SP)	; Shift into x
	BGEQ	1011$				; >= 0 ?  D'lovely.
	ADDP4	#31,NINES,#31,x(SP)		; Add 1.0
	ADDP4	#1,P1,#31,x(SP)
	DECW	INT$W_I_EXP+res_it(SP)		; Decrease result's exponent
1011$:



;	+00000  <= x <=  +99999

	ASHP	#30,#1,P1,#0,#31,y(SP)		; y <- 1
	CLRL	R6				; k <- 0
11$:	MULL3	#-16,R6,R4
	CMPP3	#31,Table2[R4],x(SP)		; log(1+10^(-k)) > x ?
	BGTR	12$
	ASHP	R6,#31,y(SP),#0,#31,z(SP)	; y <- y + 10^(-k)y
	BEQL	20$
	ADDP4	#31,z(SP),#31,y(SP)
	SUBP4	#31,Table2[R4],#31,x(SP)	; x <- x - log(1+10^(-k))
	BRB	11$
12$:	DECL	R6				; k <- k + 1
	CMPP4	#31,x(SP),#1,P0			; if w = 0 then exitloop
	BNEQ	11$
20$:
	ASHP	#INT$K_I_FRACT_D-31,-		; Shift into result
		#31,y(SP),-
		#1,-				; (rounded ever so slightly)
		#INT$K_I_FRACT_D,-
		INT$P_I_FRACT+res_it(SP)
	BVC	21$
	MOVB	#1@<4*<1&INT$K_I_FRACT_D>>,(R3)	; Means answer = 1
	INCW	INT$W_I_EXP+res_it(SP)		; Increment exponent (#1)

21$:	INCW	INT$W_I_EXP+res_it(SP)		; Increment exponent (#2)
	;
	; Put in the correct sign
	;
	BICB2	#^X0F,INT$K_I_FRACT_D/2+INT$P_I_FRACT+res_it(SP)
	BISB2	res_sign(SP),INT$K_I_FRACT_D/2+INT$P_I_FRACT+res_it(SP)

	MOVAB	res_it(SP),SP			; B.O.H.I.
	MOVL	#1,R0				; Success.  Exaltation.
;	BRW	FINISH

;
; All done with the hard part.  Now fall through and convert to destination.
;


	.SBTTL	FINISH		Convert to destination type and return

;+
;	Enter by branch with (SP) containing the intermediate result
;	and 12(AP) pointing to the descriptor for the destination.
;	R0 contains routine status
;-

FINISH:
	TSTB	INT$P_I_FRACT(SP)	; is fraction zero ?
	BNEQ	8$			; no
	CLRW	INT$W_I_EXP(SP)		; force exponent to zero
	BRB	9$			; bypass overflow and underflow
					; checks
;+
; Check for out-of-range conditions first
; We do the check here for all destination type so that we can report
; overflow and underflow distinctly.  If we allow the flow to go
; directly to various COB$CVTI_x routines, what will be reported
; is COB$_INTRESOPE (which is not correct -- we just created the
; exception and did not access it -- creating an exception should
; distinguish between over_ and under_flow)
;-

8$:
	CMPW	INT$W_I_EXP(SP), #INT$K_I_EXP_HI ; Bigger than max ?
	BGTR	3$			         ; Yes, overflow
	CMPW	INT$W_I_EXP(SP), #INT$K_I_EXP_LO ; Less than min ?
	BLSS	5$				 ; Yes, underflow
9$:
	PUSHL	R0			; Save success status
					; Result now at 4(SP)

	MOVL	12(AP),R0
	CASEB	DSC$B_DTYPE(R0),#0,#31
10$:	.WORD	BAD_DT-10$	;  0 Z
	.WORD	BAD_DT-10$	;  1 V
	.WORD	BAD_DT-10$	;  2 BU
	.WORD	BAD_DT-10$	;  3 WU
	.WORD	BAD_DT-10$	;  4 LU
	.WORD	BAD_DT-10$	;  5 QU
	.WORD	BAD_DT-10$	;  6 B
	.WORD	20$-10$		;  7 W
	.WORD	30$-10$		;  8 L
	.WORD	40$-10$		;  9 Q
	.WORD	50$-10$		; 10 F
	.WORD	60$-10$		; 11 D
	.WORD	BAD_DT-10$	; 12 FC
	.WORD	BAD_DT-10$	; 13 DC
	.WORD	BAD_DT-10$	; 14 T
	.WORD	BAD_DT-10$	; 15 NU
	.WORD	BAD_DT-10$	; 16 NL
	.WORD	BAD_DT-10$	; 17 NLO
	.WORD	BAD_DT-10$	; 18 NR
	.WORD	BAD_DT-10$	; 19 NRO
	.WORD	BAD_DT-10$	; 20 NZ
	.WORD	70$-10$		; 21 P
	.WORD	BAD_DT-10$	; 22 ZI
	.WORD	BAD_DT-10$	; 23 ZEM
	.WORD	BAD_DT-10$	; 24 DSC
	.WORD	BAD_DT-10$	; 25 OU
	.WORD 	BAD_DT-10$	; 26 O
	.WORD	BAD_DT-10$	; 27 G
	.WORD	BAD_DT-10$	; 28 H
	.WORD	BAD_DT-10$	; 29 GC
	.WORD	BAD_DT-10$	; 30 HC
	.WORD	80$-10$		; 31 COBOL intermediate data type
	BRW	BAD_DT

;+
; CIT overflowed.
;-
3$:
	PUSHL	#COB$_INTEXPOVE		; Overflow signal
	BRB	6$			; go signal

;+
; CIT underflow
;-
5$:
	PUSHL	#COB$_INTEXPUND		; Underflow signal
6$:	CALLS	#1,G^LIB$STOP		; Signal and stop.

;+
; Destination is W
;-
20$:	CLRL	R6			; Assume class S
	CMPB	DSC$B_CLASS(R0),#DSC$K_CLASS_SD
	BNEQ	21$			; Branch if not class SD
	CVTBL	DSC$B_SCALE(R0),R6	; Get scale factor
	MNEGL	R6,R6			; Negate scale factor
21$:	MOVAB	4(SP),R7		; Get source address
	MOVL	DSC$A_POINTER(R0),R8	; Get destination address
	JSB	G^COB$CVTIW_R8		; Go to conversion routine
	MOVL	(SP)+,R0		; Restore status
	RET				; Return

;+
; Destination is L
;-
30$:	CLRL	R6			; Assume class S
	CMPB	DSC$B_CLASS(R0),#DSC$K_CLASS_SD
	BNEQ	31$			; Branch if not class SD
	CVTBL	DSC$B_SCALE(R0),R6	; Get scale factor
	MNEGL	R6,R6			; Negate scale factor
31$:	MOVAB	4(SP),R7		; Get source address
	MOVL	DSC$A_POINTER(R0),R8	; Get destination address
	JSB	G^COB$CVTIL_R8		; Go to conversion routine
	MOVL	(SP)+,R0		; Restore status
	RET				; Return

;+
; Destination is Q
;-
40$:	CLRL	R6			; Assume class S
	CMPB	DSC$B_CLASS(R0),#DSC$K_CLASS_SD
	BNEQ	41$			; Branch if not class SD
	CVTBL	DSC$B_SCALE(R0),R6	; Get negative of scale factor
	MNEGL	R6,R6			; 
41$:	MOVAB	4(SP),R7		; Get source address
	MOVL	DSC$A_POINTER(R0),R8	; Get destination address
	JSB	G^COB$CVTIQ_R8		; Go to conversion routine
	MOVL	(SP)+,R0		; Restore status
	RET				; Return

;+
; Destination is F
;-
50$:	MOVAB	4(SP),R6		; Get source address
	MOVL	DSC$A_POINTER(R0),R7	; Get destination address
	JSB	G^COB$CVTIF_R7		; Go to conversion routine
	MOVL	(SP)+,R0		; Restore status
	RET				; Return

;+
; Destination is D
;-
60$:	MOVAB	4(SP),R6		; Get source address
	MOVL	DSC$A_POINTER(R0),R7	; Get destination address
	JSB	G^COB$CVTID_R7		; Go to conversion routine
	MOVL	(SP)+,R0		; Restore status
	RET				; Return

;+
; Destination is P
;-
70$:	CLRL	R6			; Assume class S
	CMPB	DSC$B_CLASS(R0),#DSC$K_CLASS_SD
	BNEQ	71$			; Branch if not class SD
	CVTBL	DSC$B_SCALE(R0),R6	; Get negative of scale factor
	MNEGL	R6,R6			;
71$:	MOVAB	4(SP),R7		; Get source address
	MOVZWL	DSC$W_LENGTH(R0),R8	; Get destination length
	MOVL	DSC$A_POINTER(R0),R9	; Get destination address
	JSB	G^COB$CVTIP_R9		; Go to conversion routine
	MOVL	(SP)+,R0		; Restore status
	RET				; Return

;+
; Destination is intermediate
;-
80$:	MOVL	DSC$A_POINTER(R0),R0	; Get destination address
	MOVQ	4(SP),(R0)+		; Move 8 bytes
	MOVL	12(SP),(R0)		; Move 4 more bytes
	MOVL	(SP)+,R0		; Restore status
	RET				; Return
;

	.SBTTL	CONVERT		Internal routine to convert to intermediate

;+
;	Call by JSB
;	R0 points to descriptor (class = S or SD)
;	R1 points to output area (12 bytes)
;-

CONVERT:
	CASEB	DSC$B_DTYPE(R0),#0,#31	; Go to proper conversion code
10$:	.WORD	BAD_DT-10$	;  0 Z
	.WORD	BAD_DT-10$	;  1 V
	.WORD	BAD_DT-10$	;  2 BU
	.WORD	BAD_DT-10$	;  3 WU
	.WORD	BAD_DT-10$	;  4 LU
	.WORD	BAD_DT-10$	;  5 QU
	.WORD	BAD_DT-10$	;  6 B
	.WORD	20$-10$		;  7 W
	.WORD	30$-10$		;  8 L
	.WORD	40$-10$		;  9 Q
	.WORD	50$-10$		; 10 F
	.WORD	60$-10$		; 11 D
	.WORD	BAD_DT-10$	; 12 FC
	.WORD	BAD_DT-10$	; 13 DC
	.WORD	BAD_DT-10$	; 14 T
	.WORD	BAD_DT-10$	; 15 NU
	.WORD	BAD_DT-10$	; 16 NL
	.WORD	BAD_DT-10$	; 17 NLO
	.WORD	BAD_DT-10$	; 18 NR
	.WORD	BAD_DT-10$	; 19 NRO
	.WORD	BAD_DT-10$	; 20 NZ
	.WORD	70$-10$		; 21 P
	.WORD	BAD_DT-10$	; 22 ZI
	.WORD	BAD_DT-10$	; 23 ZEM
	.WORD	BAD_DT-10$	; 24 DSC
	.WORD	BAD_DT-10$	; 25 OU
	.WORD 	BAD_DT-10$	; 26 O
	.WORD	BAD_DT-10$	; 27 G
	.WORD	BAD_DT-10$	; 28 H
	.WORD	BAD_DT-10$	; 29 GC
	.WORD	BAD_DT-10$	; 30 HC
	.WORD	80$-10$		; 31 COBOL intermediate data type
	BRW	BAD_DT

;+
; Source is W
;-
20$:	CLRL	R6			; Assume class S
	CMPB	DSC$B_CLASS(R0),#DSC$K_CLASS_SD
	BNEQ	21$			; Branch if not class SD
	CVTBL	DSC$B_SCALE(R0),R6	; Get scale factor
21$:	MOVL	DSC$A_POINTER(R0),R7	; Get source address
	MOVL	R1,R8			; Get destination address
	JMP	G^COB$CVTWI_R8		; Go to conversion routine

;+
; Source is L
;-
30$:	CLRL	R6			; Assume class S
	CMPB	DSC$B_CLASS(R0),#DSC$K_CLASS_SD
	BNEQ	31$			; Branch if not class SD
	CVTBL	DSC$B_SCALE(R0),R6	; Get scale factor
31$:	MOVL	DSC$A_POINTER(R0),R7	; Get source address
	MOVL	R1,R8			; Get destination address
	JMP	G^COB$CVTLI_R8		; Go to conversion routine

;+
; Source is Q
;-
40$:	CLRL	R6			; Assume class S
	CMPB	DSC$B_CLASS(R0),#DSC$K_CLASS_SD
	BNEQ	41$			; Branch if not class SD
	CVTBL	DSC$B_SCALE(R0),R6	; Get scale factor
41$:	MOVL	DSC$A_POINTER(R0),R7	; Get source address
	MOVL	R1,R8			; Get destination address
	JMP	G^COB$CVTQI_R8		; Go to conversion routine

;+
; Source is F
;-
50$:	MOVL	DSC$A_POINTER(R0),R6	; Get source address
	MOVL	R1,R7			; Get destination address
	JMP	G^COB$CVTFI_R7		; Go to conversion routine

;+
; Source is D
;-
60$:	MOVL	DSC$A_POINTER(R0),R6	; Get source address
	MOVL	R1,R7			; Get destination address
	JMP	G^COB$CVTDI_R7		; Go to conversion routine

;+
; Source is P
;-
70$:	CLRL	R6			; Assume class S
	CMPB	DSC$B_CLASS(R0),#DSC$K_CLASS_SD
	BNEQ	71$			; Branch if not class SD
	CVTBL	DSC$B_SCALE(R0),R6	; Get scale factor
71$:	MOVZWL	DSC$W_LENGTH(R0),R7	; Get source length
	MOVL	DSC$A_POINTER(R0),R8	; Get source address
	MOVL	R1,R9			; Get destination address
	JMP	G^COB$CVTPI_R9		; Go to conversion routine

;+
; Source is intermediate
;-
80$:	MOVL	DSC$A_POINTER(R0),R0	; Get source address
	CMPW	INT$W_I_EXP(R0), #INT$K_I_EXP_HI ; Bigger than max ?
	BGTR	81$				 ; Yes, overflow
	CMPW	INT$W_I_EXP(R0), #INT$K_I_EXP_LO ; Less than min ?
	BLSS	81$				 ; Yes, underflow
	MOVQ	(R0)+,(R1)+		; Copy 8 bytes
	MOVL	(R0),(R1)		; Copy 4 more bytes
	RSB				; Done
81$:	PUSHL	#COB$_INTRESOPE		; Intermediate reserved operand
	CALLS	#1,G^LIB$STOP		; Signal the error

;+
; Here if not a supported data type.
;-
BAD_DT:	PUSHL	#COB$_INVARG		; "Invalid argument list"
	CALLS	#1,G^LIB$STOP

	.END

