!
!<blf/width:80>
!
MODULE BPA$GETFREBLK (			! Dynamic allocation of storage
		IDENT = '1-311'			! File: BPAGETBLK.B32
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!<blf/uppercase_key>
!<blf/lowercase_user>
!

!++
! FACILITY: BASIC-PLUS AME
!
! ABSTRACT:
!
!	This module contains the code to allocate and deallocate
!	blocks of heap storage.
!
! ENVIRONMENT: Native mode VAX processor, User mode, Common RTL.
!
! AUTHOR: Jeremy Barker, CREATION DATE: 16-Jan-79
!
! MODIFIED BY:
!
! 	VERSION X01
!
!	Viveka Eriksson, 17-Aug-79
! 309	- Modifications to comply with VAX RTL standards.
!
!	Jeremy Barker, 17-Aug-79
! 310	- Require REQ:ame so that generated code is in proper PSECT
!	  and is sharable (also makes image 1 page smaller)
! 1-311	- Replace reference to require file with DISPATCH_PSECTS macro.
!	   JBS 27-SEP-1979
!
!--

!
!<blf/page>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    bpa$get_block,				! allocate a block
    bpa$free_block;				! deallocate a block

!
! INCLUDE FILES:
!

REQUIRE 'RTLIN:RTLPSECT';			! Define DECLARE_PSECTS macro

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! PSECTS:
!
declare_psects (bpa);			! Declare psects for BPA$ facility
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    lib$get_vm : ADDRESSING_MODE (GENERAL),
					! allocate a heap storage block
    lib$free_vm : ADDRESSING_MODE (GENERAL);

					! deallocate heap storage block
!


GLOBAL ROUTINE bpa$get_block (block_size, BLOCK) = 	! allocate a block
    						! M 309

!++
! FUNCTIONAL DESCRIPTION:
!
!	A block of heap storage, 'block_size' bytes long, is allocated.
!	It is zeroed and its address is returned.
!
! FORMAL PARAMETERS:
!
!	block_size - The length of the block to allocate, in bytes.
!	block	   - Pointer to a longword to receive the starting
!		     address of the block allocated.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	success - 1
!	failure - ??
!
! SIDE EFFECTS:
!
!	A block of heap storage is allocated.
!	The size of the virtual image P0 region may be increased.
!
!--

    BEGIN

    MAP 					! A 309
	BLOCK : REF VECTOR [1, LONG];	! address of block allocated	! A 309

    LOCAL
	sts;					! status value of lib$get_vm

    IF (sts = lib$get_vm (block_size, BLOCK [0]))	! M 309
    THEN
	CH$FILL (0, .block_size, CH$PTR (.BLOCK [0]));

					! Zero the allocated block ! M 309
    RETURN .sts;				! M 309
    END;					!End of bpa$get_block

!


GLOBAL ROUTINE bpa$free_block (address, block_size) = 	! deallocate a block

!++
! FUNCTIONAL DESCRIPTION:
!
!	A block 'block_size' bytes long, starting at
!	address 'address' is returned to the heap storage.
!	The block must have been allocated using bpa$get_block.
!
! FORMAL PARAMETERS:
!
!	address - pointer to block to deallocate
!	block_size - length of block to deallocate, in bytes
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	success - 1,
!	failure - ??
!
! SIDE EFFECTS:
!
!	A block of heap storage is deallocated.
!
!--

    BEGIN
    RETURN lib$free_vm (block_size, address);	! M 309
    END;					!End of bpa$free_block

!
!<blf/page>

END						!End of module

ELUDOM
