	.TITLE	LIB$EMODG - Extended multiply and integerize G
	.IDENT	/1-003/		; File: LIBEMODG.MAR  Edit: SBL1003

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY: General Utility Library
;
; ABSTRACT:
;
;	Extend precision of multiplier, multiply by multiplicand
;	and extract integer and fractional portion of result.
;
; ENVIRONMENT: User Mode, AST Reentrant
;
;--
; AUTHOR: Steven B. Lionel, CREATION DATE: 05-Feb-79
;
; MODIFIED BY:
;

	.SBTTL	Edit History
; 1-001	- Original.  SBL 05-Feb-79
; 1-002 - Fix comments.  SBL 31-July-1979
; 1-003 - use local handler to resignal exceptions other than those documented
;	  as being returned as statuses.  SBL 25-Sept-1980
;

	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;
	$CHFDEF				; Condition handling macros
	$SSDEF				; System symbol definitions
;
; EXTERNAL SYMBOLS:
;

	.EXTRN	LIB$SIG_TO_RET		; Library routine to convert a signal
					; to error return to caller
					; of LIB$EMODG.
					; R0 = signaled condition


;
; MACROS:
;

;
; EQUATED SYMBOLS:
;

	mulr = 4			; multiplier
	mulrx = 8			; multiplier extension
	muld = 12			; multiplicand
	int = 16			; integer portion returned
	fract = 20			; fractional portion returned

;
; OWN STORAGE:
;

;
; PSECT DECLARATIONS:
;
	.PSECT _LIB$CODE	PIC, USR, CON, REL, LCL, SHR, -
			EXE, RD, NOWRT, LONG


	.SBTTL	LIB$EMODG  - Extended multiply and integerize
;++
; FUNCTIONAL DESCRIPTION:
;
;	LIB$EMODG provides the functionality of the VAX hardware
;	instruction EMODG to high-level language users.
;
;	The floating point multiplier extension operand (second operand)
;	is concatenated with the floating point multiplier (first
;	operand) to gain 11 additional low order fraction bits.
;	The multiplicand operand is multiplied by the extended
;	multiplier operand.  After multiplication, the integer
;	portion is extracted and a 64 bit floating point number is
;	formed from the fractional part of the product by truncating
;	extra bits.  The multiplication is such that the result is
;	equivalent to the exact product truncated to a fraction
;	field of 64 bits.  Regarding the result as the sum of an
;	integer and fraction of the same sign, the integer operand
;	is replaced by the integer part of the result and the 
;	fraction operand is replaced by the rounded fractional
;	part of the result.
;
; CALLING SEQUENCE:
;
;	status.wlc.v = LIB$EMODG (mulr.rg.r, mulrx.rw.r, muld.rg.r,
;				  int.wl.r, fract.wg.r)
;
; INPUT PARAMETERS:
;
;	mulr.rg.r 	- floating point multiplier
;	mulrx.rw.r	- word to be appended to multiplier fraction
;	muld.rg.r	- floating point multiplicand
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	int.wl.r	- integer portion of result
;	fract.wg.r	- fractional portion of result
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; FUNCTION VALUE:
;
;	SS$_NORMAL	- successful execution
;	SS$_INTOVF	- integer overflow or floating overflow
;	SS$_FLTUND	- floating underflow
;	SS$_ROPRAND	- reserved operand
;
; SIDE EFFECTS:
;
;	All other exceptions are signalled.
;
;--

	.ENTRY LIB$EMODG, ^M<IV>		; Entry point

	MOVAB	B^HANDLER, (FP)			; Enable local handler to
						; process exceptions

	EMODG	@mulr(AP), -			; perform multiplication
		@mulrx(AP), -			; trap on exception to
		@muld(AP), -			; handler which will
		@int(AP), -			; unwind a return error
		@fract(AP)			; condition in R0 to
						; caller of LIB$EMODG.

	MOVZBL	#1, R0				; success status code

	RET					; return

HANDLER:
	.WORD	0

;+
;   If the exception is one of the documented exceptions for this routine,
;   call LIB$SIG_TO_RET to return it as a status.  Otherwise, resignal.
;   Also, resignal if the depth is not zero.
;-

	MOVL	CHF$L_MCHARGLST(AP), R0		; Get mechanism vector address
	TSTL	CHF$L_MCH_DEPTH(R0)		; Is depth zero?
	BNEQ	90$				; If not, resignal
	MOVL	CHF$L_SIGARGLST(AP), R1		; Get signal vector address
	MOVL	CHF$L_SIG_NAME(R1), R0		; Get signalled condition
	CMPW	R0, #SS$_INTOVF			; Compare conditions
	BEQL	10$				; If it matches, don't resignal
	CMPW	R0, #SS$_FLTUND
	BEQL	10$
	CMPW	R0, #SS$_ROPRAND
	BEQL	10$
	CMPW	R0, #SS$_FLTUND_F
	BNEQ	90$
	MOVZWL	#SS$_FLTUND, CHF$L_SIG_NAME(R1)	; Change fault code to trap code
10$:	CALLG	(AP), G^LIB$SIG_TO_RET		; Return signal as a status
	RET
90$:	MOVZWL	#SS$_RESIGNAL, R0		; Resignal condition
	RET

	.END
