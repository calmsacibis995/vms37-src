	.TITLE	MTH$SINH 	; Floating Point Hyperbolic Sine routine
				; (SINH)
	.IDENT /1-007/		; File: MTHSINH.MAR  Edit: RNH1007
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;
; FACILITY: MATH LIBRARY
;++
; ABSTRACT:
;
; MTH$SINH is a function  which  returns the floating point hyperbolic sine
; of its single precision floating point argument. The call is standard
; call-by-reference.
;
;--
;
; VERSION: 01
;
; HISTORY:
; AUTHOR:
;	Peter Yuo, 29-Jun-77: Version 01
;
; MODIFIED BY:
;
;
;

	.SBTTL	HISTORY	; Detailed Current Edit History


; ALGORITHMIC DIFFERENCES FROM FP-11/C ROUTINE:	none
;
; Edit History for Version 01 of MTH$SINH 
;
; 0-2	MTH$$ERROR changed to MTH$$SIGNAL.
;	MTH$_... changed to MTH__....
;	Changed error handling mechanism. Put error result in R0 before 
;	calling MTH$$SIGNAL in order to allow user modify error result.
;
; 0-3	Six term Taylor series, in powers of the argument, replaced
;	by four term Chebyshev series, in powers of ARG**2, with
;	overhang, for small arguments; this improves accuracy.
;	18-May-1978; Mary Payne
; 1-001	- Update version number and copyright notice.  JBS 16-NOV-78
; 1-002	- Change MTH__FLOOVEMAT to MTH$K_FLOOVEMAT.  JBS 07-DEC-78
; 1-003	- Remove $SRMDEF macro - not needed.  JBS 16-DEC-78
; 1-004	- Add "_" to the PSECT directive.  JBS 22-DEC-78
; 1-005 - Declare externals.  SBL 17-May-1979
; 1-006 - Changed lower limit for Chebyshev approximation from 2**-11 to
;	  2**-12.
;	- Eliminated second call to EXP for input values between 12.5*ln2
;	  and 127*ln2.
;	- Changed all final floating point divisions by 2 to interger 
;	  subrtracts of 1 from the exponent field.
;	- Extended maximum range from 87.69 to 128*ln2=88.72.
;	- Chaneged logic for computing EXP(|x|-ln2) to reduce error.
;	- RNH 10-FEB-81
; 1-007 - Change W^ to G^ on call to MTH$$SIGNAL RNH 09-Sept-1981

	.SBTTL	DECLARATIONS	; Declarative Part of Module

;
; INCLUDE FILES:	MTHJACKET.MAR
;

;
; EXTERNAL SYMBOLS:
;
	.DSABL	GBL
	.EXTRN	MTH$EXP_R4
	.EXTRN	MTH$K_FLOOVEMAT
	.EXTRN	MTH$$SIGNAL

;
; EQUATED SYMBOLS:

	LF_127_LOG_2	= ^X0F3343B0	; 127*ln2
	LF_128_LOG_2	= ^X721643B1	; 128*ln2-2**-24
	LF_12.5_LOG_2	= ^XA123420A	; 12.5*ln2
	LF_LOG_2_HI	= ^X72804031	; (high 17 bits of ln2) + 2**-17
	LF_LOG_2_LO	= ^X1100B7D0	; ln2 - LF_LOG_2_HI
	SF_1.0	= ^F1.0			; 1.0
	value	= 4			; value.rf.r

;
; MACROS:	none
;
;
; PSECT DECLARATIONS:

	.PSECT	_MTH$CODE	PIC,SHR,LONG,EXE,NOWRT
					; program section for math routines
;
; OWN STORAGE:	none
;
;
; CONSTANTS:
;


SINHTAB:
	.WORD	^O035120,^O064613	; DECIMAL:    0.1987574E-03
	.WORD	^O036410,^O104172	; DECIMAL:    0.8333320E-02
	.WORD	^O037452,^O125253	; DECIMAL:    0.1666667E+00
	.WORD	0,0			; DECIMAL: 0.D0
SINHLEN	= .- SINHTAB/4


	.SBTTL	MTH$SINH  - Standard Single Precision Floating SINH


;++
; FUNCTIONAL DESCRIPTION:
;
; SINH  - single precision floating point function
;
; SINH(X) is computed as:
;
;	If |X| < 2**-12, SINH(X) = X.
;	IF 2**-12 =< |X| < 0.25, SINH(X) = Chebyshev Series
;	If 0.25 =< |X| < 12.5*ln2, SINH(X) = (EXP(X) - EXP(-X))/2
;	If 12.5=< |X| < 127*ln2, SINH(X) = sign(X)*EXP(|X|)/2
;	If 127*ln2 =< |X| < 128*ln2, then SINH(X) = sign(X)* EXP(|X|-LOG(2)).
;	If 128*ln2 =< |X|, then overflow.
;
; CALLING SEQUENCE:
;
;	SINH.wf.v = MTH$SINH(x.rf.r)
;
; INPUT PARAMETERS:

	LONG = 4			; define longword multiplier
	x = 1 * LONG			; Contents of x is the argument

; IMPLICIT INPUTS:	none
;
; OUTPUT PARAMETERS:
;
;	VALUE:	floating hyperbolic sine of the argument
;
; IMPLICIT OUTPUTS:	none
;
; COMPLETION CODES:	none
;
; SIDE EFFECTS:
;
; Signal: MTH$_FLOOVEMAT if 128*ln2 =< |X| with reserved operand in R0 (copied
; to the signal mechanism vector CHF$L_MCH_R0/R1 by LIB$SIGNAL). Associated
; message is: "FLOATING OVERFLOW IN MATH LIBRARY". Result is reserved operand -0.0
; unless a user supplied (or any) error handler changes CHF$L_MCH_R0/R1.
;
; NOTE: This procedure disables floating point underflow, enables integer
; overflow.
;
;---


	.ENTRY	MTH$SINH, ^M<IV, R2, R3, R4, R5>
					; standard call-by-reference entry
					; disable DV (and FU), enable IV
	MTH$FLAG_JACKET			; flag that this is a jacket procedure in
					; case of an error in routine
					; If an error, convert signal to user PC
					; and resignal
	MOVF	@value(AP), R5		; R5 = X = @value(AP)
	MOVF	R5, R0
	BICW2	#^X8000, R0		; R0 = |X|
	CMPW	R0, #^X3F80		; compare |X| with 0.25
	BGEQ	GEQ_TO_0.25		; branch if |X| >= 0.25

;
; |X| < 0.25
;

	CMPW	R0, #^X3A80		; compare |X| with 2**-12
	BGEQ	GEQ_TO_2M12		; branch if |X| >= 2**-12

;
; |X| < 2**-12
;

	MOVF	R5, R0			; R0 = X
	RET				; return with result = Argument

;
; 2**-12 =< |X| < 0.25
;

GEQ_TO_2M12:
	MULF	R0, R0			; Get ARG**2 for POLYF
	POLYF	R0, #SINHLEN-1, SINHTAB	; R0 = SUM(Ci*X**(2*i))
					; Last coefficient is zero
	MULF	R5, R0			; MUL by ARG and then
	ADDF	R5, R0			; add in ARG with overhang
	RET				; return with result in R0

;
; 0.25 =< |X|
;

GEQ_TO_0.25:
	CMPF	R0, #LF_127_LOG_2		; compare |X| with 127*ln2
	BGTR	GTR_THAN_127_LOG_2		; branch if X > 127*ln2

;
; 0.25 =< |X| =< 127*ln2
;

	CMPF	R0, #LF_12.5_LOG_2	; Compare |X| to 12.5*ln2.  If greater,
	BGTR	ONE_TERM_ONLY		; only one call to EXP is needed
;
; 0.25 =< |X| < 12.5*ln2
;

	MOVF	R5, R0			; R0 = X
	JSB	MTH$EXP_R4		; R0 = EXP(X)
	PUSHL	R0			; push EXP(X) on stack
	MNEGF	R5, R0			; R0 = -X
	JSB	MTH$EXP_R4		; R0 = EXP(-X)
	SUBF3	R0, (SP)+, R0		; R0 = EXP(X) - EXP(-X)
	SUBW	#^X0080, R0		; R0 = (EXP(X) - EXP(-X))/2
	RET				; return with result in R0

;
; 12.5 =< |x| < 127*ln2
;

ONE_TERM_ONLY:
	JSB	MTH$EXP_R4		; R0 = EXP(|X|)
	TSTF	R5			; If X is negative, change
	BGTR	POSITIVE		; the sign of EXP(|X|)
	MNEGF	R0,R0			;
POSITIVE:				; R0 = sign(X)*EXP(|X|)
	SUBW	#^X0080, R0		; R0 = sign(X)*EXP(|X|)/2
	RET

;
; 127*ln2 =< |X|
;

GTR_THAN_127_LOG_2:
	CMPF	R0, #LF_128_LOG_2	; Compare |X| with 128*ln2. If greater,
	BGEQ	ERROR			; overflow is signaled

;
; 127*ln2 =< |X| < 128*ln2 
;

	SUBF	#LF_LOG_2_HI, R0	; R0 = |X|-(high order bits of ln2)
	JSB	MTH$EXP_R4		; R0 = EXP(|X|-(high order bits of ln2)
	MULF3	#LF_LOG_2_LO, R0, R1	;
	SUBF	R1, R0			; R0 = EXP (|X| - ln2)
	TSTF	R5			; test the sign of X
	BGEQ	10$			; branch if X >= 0
	MNEGF	R0, R0			; R0 = sign(X) * EXP(|X|-LOG(2))
10$:	RET				; return with result in R0

;
; 128*ln2 =< |X|, error
;

ERROR:	MOVZBL	#MTH$K_FLOOVEMAT, -(SP)	; condition value
	ASHL	#15, #1, R0		; R0 = result = reserved operand -0.0
					; goes to signal mechanism vector
					; (CHF$L_MCH_R0/R1) so error handler
					; can modify the result.
	CALLS	#1, G^MTH$$SIGNAL	; signal error and use real user's PC
					; independent of CALL vs JSB
	RET				; return - R0 restored from CHF$L_MCH_R0/R1



	.END
