	.TITLE	MTH$GASIN 	; G Floating Point Sine routine
				; (GASIN,GASIND)
	.IDENT /1-005/		; File: MTHGASIN.MAR  EDIT:  RNH1005
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;
; FACILITY: MATH LIBRARY
;++
; ABSTRACT:
;
; MTH$GASIN is a function which returns the G floating point arcsine in 
; radians of its G floating point argument. The call is standard
; call-by-reference.
;
; MTH$GASIND is a function which returns the G floating point arcsine 
; in degrees of its G floating point argument. The call is standard
; call-by-reference.
;
;--
;
; VERSION: 1
;
; HISTORY:
; AUTHOR:
;	Steven B. Lionel, 15-Jan-79: Version 1
;
; MODIFIED BY:
;
;
;

	.SBTTL	HISTORY	; Detailed Current Edit History


; ALGORITHMIC DIFFERENCES FROM FP-11/C ROUTINE:	none
;
; Edit History for Version 1 of MTH$GASIN 
;
; 1-001 - Adapted from MTH$DASIN version 1-001.  SBL 15-Jan-79
; 1-002 - Change JSB entry to MTH$GASIN_R7.  RBG 28-Sept-1979
; 1-003 - Added degree entry points.  RNH 29-MAR-1981
; 1-004 - Changed shared external references to G^ RNH 25-Sept-1981
; 1-005 - Eliminate symbolic short literals.  RNH 15-Oct-81

	.SBTTL	DECLARATIONS	; Declarative Part of Module

;
; INCLUDE FILES:	OTSPARAMS.MAR
;
; EXTERNAL SYMBOLS:

	.DSABL	GBL			; Force error for undefineds
	.EXTRN	MTH$GSQRT_R5		; Square root routine
	.EXTRN	MTH$GATAN_R7		; Arctangent routine
	.EXTRN	MTH$GATAND_R7		; Arctangent routine
	.EXTRN	MTH$$SIGNAL		; Math signal routine
	.EXTRN	MTH$K_INVARGMAT		; Error code

;
; EQUATED SYMBOLS:

	value	= 4			; value.rg.r

;
; MACROS:	none
;
; PSECT DECLARATIONS:

	.PSECT	_MTH$CODE	PIC,SHR,LONG,EXE,NOWRT
					; program section for math routines
;
; OWN STORAGE:	none
;
;
; CONSTANTS:
;

G_PI_OVER_2:
	.WORD	^O040031, ^O020773, ^O052104, ^O026430
					; PI/2
G_PI:
	.WORD	^O040051, ^O020773, ^O052104, ^O026430
					; PI
G_90:
	.LONG	^X80004076, ^X0		; 90


	.SBTTL	MTH$GASIN  - Standard G Floating GASIN


;++
; FUNCTIONAL DESCRIPTION:
;
; GASIN  - G floating point function
;
; GASIN(X) is computed as:
;
;	If X = 0, then GASIN(X) = 0.
;	If X = 1, then GASIN(X) = PI/2.
;	If X = -1, then GASIN(X) = -PI/2.
;	If 0 < |X| < 1, then GASIN(X) = ATAN(X/SQRT(1-X**2)).
;	If 1 < |X|, error.
;
; CALLING SEQUENCE:
;
;	gasin.wg.v = MTH$GASIN(x.rg.r)
;
; INPUT PARAMETERS:

	LONG = 4			; define longword multiplier
	x = 1 * LONG			; Contents of x is the argument

; IMPLICIT INPUTS:	none
;
; OUTPUT PARAMETERS:
;
;	VALUE:	G floating arcsine of the argument
;
; IMPLICIT OUTPUTS:	none
;
; COMPLETION CODES:	none
;
; SIDE EFFECTS:
;
; Signals: MTH$_INVARGMAT if |X| > 1 with reserved operand in R0/R1
; (copied to the signal mechanism vector CHF$L_MCH_R0/R1 by LIB$SIGNAL).
; Associated message is: "INVALID ARGUMENT". Result is reserved
; operand -0.0 unless a user supplied (or any) error handler changes CHF$L_MCH_R0/R1.
;
; NOTE: This procedure disables floating point underflow, enables integer
; overflow.
;
;---


	.ENTRY	MTH$GASIN, ^M<IV, R2, R3, R4, R5, R6, R7>
					; standard call-by-reference entry
					; disable DV (and FU), enable IV
	MTH$FLAG_JACKET			; flag that this is a jacket procedure in
					; case of an error in routine
					; If an error, convert signal to user PC
					; and resignal
	MOVG	@value(AP), R0		; R0/R1 = |X| = @value(AP)
	BSBB	MTH$GASIN_R7		; call special GASIN routine
	RET				; return with result in R0/R1


	.SBTTL	MTH$GASIN_R7 - Special GASIN routine

; Special GASIN - used by the standard routine and direct JSB call.
;
; CALLING SEQUENCE:
;	save anything needed in R0:R7
;	MOVG	..., R0			; input in R0/R1
;	JSB	MTH$GASIN_R7
;	RSB				; return with result in R0/R1
;

MTH$GASIN_R7::				; special GASIN routine
MTH$GASIN_R9::				; Release 1 name
	MOVG	R0, R6			; save X in R6/R7
	BEQL	RETURN			; return DASIN(0) = 0

;
; 0 < |X|
;

	BICW	#^X8000, R0		; R0/R1 = |X|
	CMPG	R0, #1			; compare |X| with 1.0
	BGEQ	GEQ_TO_1.0		; branch if |X| >= 1.0

;
; 0 < |X| < 1.0
;

	MULG2	R0, R0			; R0/R1 = X**2
	SUBG3	R0, #1, R0		; R0/R1 = 1.0 - X**2
	JSB	MTH$GSQRT_R5		; R0/R1 = GSQRT(1-X**2)
	DIVG3	R0, R6, R0		; R0/R1 = X/GSQRT(1-X**2)
	JMP	G^MTH$GATAN_R7		; R0/R1 = GATAN(X/GSQRT(1-X**2))


;
; 1 =< |X| 
;

GEQ_TO_1.0:
	BGTR	ERROR			; branch to ERROR if |X| > 1.0


;
; |X| = 1.0
;

	MOVQ	G_PI_OVER_2, R0		; R0/R1 = PI/2
	TSTG	R6			; test the sign of X
	BGEQ	RETURN			; branch if X > 0
	MNEGG	R0, R0			; R0/R1 = -PI/2
RETURN:	RSB				; return with result in R0/R1

;
; 1 < |X|, error
;

ERROR:	PUSHL	(SP)			; return PC from JSB routine
	MOVZBL	#MTH$K_INVARGMAT, -(SP)	; condition value
	ASHQ	#15, #1, R0		; R0 = result = reserved operand -0.0
					; goes to signal mechanism vector
					; (CHF$L_MCH_R0/R1) so error handler
					; can modify the result.
	CALLS	#2, G^MTH$$SIGNAL	; signal error and use real user's PC
					; independent of CALL vs JSB
	RSB				; return - R0 restored from CHF$L_MCH_R0/R1



	.SBTTL	MTH$GASIND  - Standard G Floating GASIND


;++
; FUNCTIONAL DESCRIPTION:
;
; GASIND  - G floating point function
;
; GASIND(X) is computed as:
;
;	If X = 0, then GASIND(X) = 0.
;	If X = 1, then GASIND(X) = 90.
;	If X = -1, then GASIND(X) = -90.
;	If 0 < |X| < 1, then GASIND(X) = ATAND(X/SQRT(1-X**2)).
;	If 1 < |X|, error.
;
; CALLING SEQUENCE:
;
;	gasind.wg.v = MTH$GASIND(x.rg.r)
;
; INPUT PARAMETERS:

	LONG = 4			; define longword multiplier
	x = 1 * LONG			; Contents of x is the argument

; IMPLICIT INPUTS:	none
;
; OUTPUT PARAMETERS:
;
;	VALUE:	G floating arcsine of the argument
;
; IMPLICIT OUTPUTS:	none
;
; COMPLETION CODES:	none
;
; SIDE EFFECTS:
;
; Signals: MTH$_INVARGMAT if |X| > 1 with reserved operand in R0/R1
; (co90ed to the signal mechanism vector CHF$L_MCH_R0/R1 by LIB$SIGNAL).
; Associated message is: "INVALID ARGUMENT". Result is reserved
; operand -0.0 unless a user supplied (or any) error handler changes CHF$L_MCH_R0/R1.
;
; NOTE: This procedure disables floating point underflow, enables integer
; overflow.
;
;---


	.ENTRY	MTH$GASIND, ^M<IV, R2, R3, R4, R5, R6, R7>
					; standard call-by-reference entry
					; disable DV (and FU), enable IV
	MTH$FLAG_JACKET			; flag that this is a jacket procedure in
					; case of an error in routine
					; If an error, convert signal to user PC
					; and resignal
	MOVG	@value(AP), R0		; R0/R1 = |X| = @value(AP)
	BSBB	MTH$GASIND_R7		; call special GASIND routine
	RET				; return with result in R0/R1


	.SBTTL	MTH$GASIND_R7 - Special GASIND routine

; Special GASIND - used by the standard routine and direct JSB call.
;
; CALLING SEQUENCE:
;	save anything needed in R0:R7
;	MOVG	..., R0			; input in R0/R1
;	JSB	MTH$GASIND_R7
;	RSB				; return with result in R0/R1
;

MTH$GASIND_R7::				; special GASIND routine
	MOVG	R0, R6			; save X in R6/R7
	BEQL	D_RETURN		; return DASIND(0) = 0

;
; 0 < |X|
;

	BICW	#^X8000, R0		; R0/R1 = |X|
	CMPG	R0, #1			; compare |X| with 1.0
	BGEQ	D_GEQ_TO_1.0		; branch if |X| >= 1.0

;
; 0 < |X| < 1.0
;

	MULG2	R0, R0			; R0/R1 = X**2
	SUBG3	R0, #1, R0		; R0/R1 = 1.0 - X**2
	JSB	MTH$GSQRT_R5		; R0/R1 = GSQRT(1-X**2)
	DIVG3	R0, R6, R0		; R0/R1 = X/GSQRT(1-X**2)
	JMP	G^MTH$GATAND_R7		; R0/R1 = GATAND(X/GSQRT(1-X**2))


;
; 1 =< |X| 
;

D_GEQ_TO_1.0:
	BGTR	ERROR			; branch to ERROR if |X| > 1.0


;
; |X| = 1.0
;

	MOVQ	G_90, R0		; R0/R1 = 90
	TSTG	R6			; test the sign of X
	BGEQ	D_RETURN		; branch if X > 0
	MNEGG	R0, R0			; R0/R1 = -90
D_RETURN:	RSB			; return with result in R0/R1


	.END
