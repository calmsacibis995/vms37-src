MODULE BAS$VAL (				! Routines to do BASIC VAL function
		IDENT = '1-013'			! File: BASVAL.B32 Edit: JBS1013
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY: BASIC Support Library
!
! ABSTRACT:
!
!	This module has 3 entry points, one each for floating, double
!	and long.  The double routine checks for a BASIC frame and picks
!	up the scale factor.  Then all routines convert a numeric string
!	to the correct numeric type value (by a CALL to the correct
!	OTS$ or BAS$ conversion routine).  If the string is
!	non-numeric (or not an integer for the LONG entry point), a
!	non-continuable error is signaled.
!
! ENVIRONMENT: User mode, AST level or not or mixed
!
! AUTHOR: R. Will, CREATION DATE: 1-Mar-79
!
! MODIFIED BY:
!
! R. Will, 1-Mar-79: VERSION 01
! 01	- original
! 1-002	- Change entry point name to BAS$VAL_L.  JBS 02-MAY-1979
! 1-003 - Add BASIC linkages for scaling.  RW  26-JUN-79
! 1-004 - Use new conversion routines.  RW 9-Jul-79
! 1-005	- Add an optional second argument to BAS$VAL_D.  JBS 30-JUL-1979
! 1-006 - Don't let conversion routine round for single precision. RW 20-Aug-79
! 1-007 - Change bit set for integer ignore tabs.  RW  30-Aug-79
! 1-008 - Rechange bit set for integer ignore tabs.  RW  31-Aug-79
! 1-009 - KLUDGE!!!! WORKAROUND OTSCVTTIL BUG.  CHANGE CALL BACK.  RW 7-SEPT-79
! 1-010 - Remove kludge of edit 9.  RW  11-Sept-79
! 1-011 - String cleanup, don't use $STR$ macros.  30-Oct-79
! 1-012	- Integerize after scaling.  JBS 18-DEC-1979
! 1-013	- Change MTH$DFLOOR to MTH$DINT.  JBS 20-DEC-1979
!--

!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!
!	NONE
!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    BAS$VAL_L,					! Find VAL% of an integer string
    BAS$VAL_F,					! Find floating VAL of a string
    BAS$VAL_D : NOVALUE;			! Find double VAL of a string

!
! INCLUDE FILES:
!

REQUIRE 'RTLIN:RTLPSECT';			! Declare PSECTs code

REQUIRE 'RTLIN:BASLNK';				! BASIC scaling linkages

REQUIRE 'RTLIN:BASFRAME';			! Define offsets in a BASIC frame

LIBRARY 'RTLSTARLE';				! STARLET library for macros and symbols

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!

LITERAL
    ignore_blanks = 1^0,			! set bit 0 to ignore all blanks
    						!  for both real and integer
    only_e = 1^1,				! E & e are only exponent letter
    dont_round = 1^3,				! don't round double for single
    						!  precision entry point
    ignore_tabs = 1^4,				! ignore tabs in input
    exp_letter_req = 1^5,			! require letter e in exponent
    force_scale = 1^6,				! always use scale factor
    longword = 4;				! number of bytes in longword

!
! PSECT DECLARATIONS
!
DECLARE_PSECTS (BAS);
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    OTS$CVT_TI_L,				! Convert string to integer
    OTS$CVT_T_D,				! Convert string to float or double
    MTH$DINT,					! Integerize a double-precision number
    BAS$$STOP : NOVALUE;			! Signal Fatal BASIC error

EXTERNAL LITERAL
    BAS$K_ILLNUM : UNSIGNED (8);		! Error signaled if non-numeric string


GLOBAL ROUTINE BAS$VAL_L (STRING) : = 		! Find numeric value of this string

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine computes the integer numeric value of an input string
!	by calling an RTL conversion routine and returns the value in R0.
!	If the input string doesn't contain
!	a legitimate integer the routine will signal a noncontinuable error.
!
! FORMAL PARAMETERS:
!
!	STRING.rt.dx		pointer to input string descriptor
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	The routine value is the integer value of the string
!
! SIDE EFFECTS:
!
!	This routine calls the conversion routine and therefore may signal any
!	of its errors or have any of its side effects.  In particular the
!	conversion routine calls STR$ routines and so may allocate or deallocate
!	dynamic string space and write lock strings for a short time.  It
!	may also signal BAS$K_ILLNUM if a non-numeric string is input.
!
!--

    BEGIN

    MAP
	STRING : REF BLOCK [8, BYTE];

    LOCAL
	VALUE;					! Place for conversion routine

    						! to return value

    IF OTS$CVT_TI_L (STRING [0, 0, 0, 0], 	! string containng integer value
	    VALUE, 				! place to return value
	    longword, 				! # of bytes to return-longword
	    ignore_blanks + ignore_tabs)	! set flags
	NEQU SS$_NORMAL
    THEN
	BAS$$STOP (BAS$K_ILLNUM);		! input non-integer, error

    RETURN .VALUE;				! input integer string, return
    END;					!End of BAS$VAL_L


GLOBAL ROUTINE BAS$VAL_F (STRING) : = 		! Find numeric value of this string

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine computes the floating numeric value of an input string
!	by calling an RTL conversion routine and returns the value in R0.
!	If the input string doesn't contain a legitimate floating
!	point number the routine will signal a noncontinuable error.
!
! FORMAL PARAMETERS:
!
!	STRING.rt.dx		pointer to input string descriptor
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	The routine value is the floating value of the string
!
! SIDE EFFECTS:
!
!	This routine calls the conversion routine and therefore may signal any
!	of its errors or have any of its side effects.  In particular the
!	conversion routine calls STR$ routines and so may allocate or deallocate
!	dynamic string space and write lock strings for a short time.  It
!	may also signal BAS$K_ILLNUM if a non-numeric string is input.
!
!--

    BEGIN

    BUILTIN
	CVTDF;					! Convert D_floating to F_floating

    MAP
	STRING : REF BLOCK [8, BYTE];

    LOCAL
	VALUE : VECTOR [2, LONG];		! Place for conversion routine to return value

    IF OTS$CVT_T_D (STRING [0, 0, 0, 0], 	! string to be converted
	    VALUE, 				! place to put value
	    0, 					! don't specify digits in fraction
	    0, 					! don't scale
	    ignore_blanks + only_e + ignore_tabs + exp_letter_req + force_scale + dont_round)	!
	NEQU SS$_NORMAL
    THEN
	BAS$$STOP (BAS$K_ILLNUM);		! input non-numeric, error

    CVTDF (VALUE, VALUE [0]);			! round truncated double
    						!  precision into float
    RETURN .VALUE [0];				! input numeric string, return
    END;					!End of BAS$VAL_F


GLOBAL ROUTINE BAS$VAL_D (			! Find numeric value of this string
	STRING, 				! String to find value of
	SCALE_VALUE				! Optional scale factor
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine computes the double precision numeric value of an input
!	string by calling an RTL conversion routine and returns the value in
!	R0 and R1.  If the caller is a BASIC frame, then the scaling information is
!	taken from the BASIC frame and passed to the conversion routine,
!	otherwise a 0 is passed.  If the input string doesn't contain
!	a legitimate integer the routine will signal a noncontinuable error.
!	Information in the caller's frame can be overridden by the (optional)
!	second argument.  This second argument is never used from compiled
!	code; it is used by the compiler at compile time.
!
! FORMAL PARAMETERS:
!
!	STRING.rt.dx		pointer to input string descriptor
!	SCALE_VALUE.rl.v	optional scale value
!
! IMPLICIT INPUTS:
!
!	The scale from the caller's frame, if the caller is BASIC and
!	the second argument is omitted.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	The routine value is the double precision value of the string
!
! SIDE EFFECTS:
!
!	This routine calls the conversion routine and therefore may signal any
!	of its errors or have any of its side effects.  In particular the
!	conversion routine calls STR$ routines and so may allocate or deallocate
!	dynamic string space and write lock strings for a short time.  It
!	may also signal BAS$K_ILLNUM if a non-numeric string is input.
!
!--

    BEGIN

    BUILTIN
	ACTUALCOUNT;

    MAP
	STRING : REF BLOCK [8, BYTE];

    LOCAL
	SCALE_VAL,				! Value of scale factor to use
	VALUE : VECTOR [2];			! Place for conversion routine to return value

!+
! Compute scale factor.
!-
    SCALE_VAL = (IF (ACTUALCOUNT () GEQ 2) THEN .SCALE_VALUE ELSE $BAS$SCALE);

    IF (OTS$CVT_T_D (STRING [0, 0, 0, 0], 	! pass input string
	    VALUE, 				! where to return value
	    0, 					! default digits-in-fract
	    .SCALE_VAL, 			! Scale factor (or 0)
	    ignore_blanks + only_e + ignore_tabs + exp_letter_req + force_scale)	!
	NEQU SS$_NORMAL)
    THEN
	BAS$$STOP (BAS$K_ILLNUM);		! input non-numeric, error

!+
! Input string was numeric
! Integerize if the scale factor was non-zero.
! The call to MTH$DINT also loads the result into R0/R1.
!-

    IF (.SCALE_VAL NEQ 0)
    THEN
	BEGIN
	MTH$DINT (VALUE [0]);
	RETURN
	END
    ELSE
!+
! No integerizing is necessary.
! Load the result into R0/R1.
!_
	BEGIN

	REGISTER
	    R0 = 0,
	    R1 = 1;

	R0 = .VALUE [0];
	R1 = .VALUE [1];
	RETURN
	END;

    END;					!End of BAS$VAL_D

!<BLF/PAGE>

END						!End of module BAS$VAL

ELUDOM
