	.TITLE	MTH$DSQRT 	; Double Floating Point Square Root routine
				; (DSQRT)
	.IDENT /1-015/		; File: MTHDSQRT.MAR	EDIT:	RNH1015
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;
; FACILITY: MATH LIBRARY
;++
; ABSTRACT:
;
; MTH$DSQRT is a function which  returns the floating point square root
; of its single precision floating point argument. The call is standard
; call-by-reference.
; MTH$DSQRT_R5  is  a  special routine  which  is the same as MTH$DSQRT
; except  a  faster non-standard JSB call is used with the  argument in
; R0 and no registers are saved.
;
;--
;
; VERSION: 01
;
; HISTORY:
; AUTHOR:
;	Peter Yuo, 15-Oct-76: Version 01
;
; MODIFIED BY:
;
; 01-1	Peter Yuo, 22-May-77
; 01-2	Peter Yuo, 31-May-77
;
;

	.SBTTL	HISTORY	; Detailed Current Edit History


; ALGORITHMIC DIFFERENCES FROM FP-11/C ROUTINE:
;	1. Last DIVD is rounded instead of truncated. Results should be
;	   correct within 2 LSB's.
;
; Edit History for Version 01 of MTH$DSQRT 
;
; 01-1	Code saving after code review March 1977
; 01-2	ROTL shift in garbage into highest bit. Use ASHL instead.
;	ADDL instruction after ADJUST has been changed into ADDW to prevent
;	overflow if R1<31:16> = FFFF and R0<31:16> = FFFF

; 01-3	Finish error handling 10-June-1977
; 0-4	MTH$$ERROR changed to MTH$$SIGNAL.
;	MTH$_... changed to MTH__....
;	Changed error handling mechanism. Put error result in R0:R1 before
;	calling MTH$$SIGNAL in order to allow user modify error result.
; 01-5	- Return -0.0 on negative arg.  TNH 20-Dec-77
; 01-6	- Remove undefined $15 global.  TNH 20-Dec-77
; 01-7	- Add Rich Lary's code bums.  JMT 26-Jan-78
; 01-9	- Move .ENTRY symbol definition to module header.  TNH 14-Aug-78
; 1-010	- Update version number and copyright notice.  JBS 16-NOV-78
; 1-011	- Change symbol MTH__SQUROONEG to MTH$K_SQUROONEG.  JBS 07-DEC-78
; 1-012	- Add "_" to the PSECT directive.  JBS 22-DEC-78
; 1-013 - Declare externals.  SBL 17-May-1979
; 1-014 - Use ASHQ, not ASHL, to generate reserved operand.  JAW 12-Oct-1979
; 1-015 - Changed W^ to G^ in call to MTH$$SIGNAL RNH 09-Sept-1981

	.SBTTL	DECLARATIONS	; Declarative Part of Module

;
; INCLUDE FILES:	MTHJACKET.MAR
;

;
; EXTERNAL SYMBOLS:
;
	.DSABL	GBL
	.EXTRN	MTH$K_SQUROONEG
	.EXTRN	MTH$$SIGNAL		; SIGNAL SEVERE error

;
; EQUATED SYMBOLS:	
;

	ACMASK = ^M<IV, R2, R3, R4, R5>	; register save mask and IV enable
;
; MACROS:	none
;
; PSECT DECLARATIONS:

	.PSECT	_MTH$CODE	PIC,SHR,LONG,EXE,NOWRT
					; program section for math routines
;
; OWN STORAGE:	none
;
; CONSTANTS:

;
; Constants A and B chosen for k = odd
;
	LF_ODD_A_E63	=	^X13CD5FD4
	LF_ODD_B_EM63	=	^X3C4A2018
;
; Constants A and B chosen for k = even
;
	LF_EVEN_A	=	^XF61A4015
	LF_EVEN_B_EM64	=	^X4B231FD7

	.SBTTL	MTH$DSQRT  - Standard Double Precision Floating DSQRT


;++
; FUNCTIONAL DESCRIPTION:
;
; DSQRT  - double precision floating point function
;
; DSQRT(X) is computed using the following approximation technique:
;
;	If X <= 0 , error.  Let X = |X|.
;
;	Let X = 2**K * F where F is the fractional part.
;
;	If K = even, X = 2**(2P) * F,
;		DSQRT(X) = 2**P * DSQRT(F), 1/2 =< F < 1
;
;	If K = odd, X = 2**(2P+1) * F = 2**(2P+2) * (F/2),
;		DSQRT(X) = 2**(P+1) * DSQRT(F/2), 1/4 =< F/2 < 1/2.
;
;	Let F' = A*F + B,
;			  A = 0.453730314(octal),
;			  B = 0.327226214(octal), for K = even.
;	       = A*(F/2) + B,
;			  A = 0.650117146(octal),
;			  B = 0.230170444(octal), for K = odd.
;	and
;	    K' = P,	 for K = even
;	       = P + 1	 for K = odd.
;
;	Let Y0 = 2**K' * F' as a staight line approximation wthin the
;	given interval using coefficients A and B which minimize the
;	absolute error at the midpoint and endpoint.
;
;	Starting with Y0, three Newton-Raphson iterations are performed.
;
;	Y[n+1] = (1/2) * ( Y[n] + X/Y[n])
;
;	The relative error is < 10**-17.
;
; CALLING SEQUENCE:
;
;	dsqrt.wd.v = MTH$DSQRT(x.rd.r)
;
; INPUT PARAMETERS:

	LONG = 4			; define longword multiplier
	x = 1 * LONG			; Contents of x is the argument

; IMPLICIT INPUTS:	none
;
; OUTPUT PARAMETERS:
;
;	VALUE:	double precision square root of the argument
;
; IMPLICIT OUTPUTS:	none
;
; COMPLETION CODES:	none
;
; SIDE EFFECTS:
;
; Signals: MTH$_SQUROONEG if X < 0.0 with reserved operand in R0/R1
; (copied to the signal mechanism vector CHF$L_MCH_R0/R1 by LIB$SIGNAL).
; Associated message is: "SQUARE ROOT OF NEGATIVE VALUE". Result is reserved
; operand -0.0 unless a user supplied (or any) error handler changes CHF$L_MCH_R0/R1.
;
; NOTE: This procedure disables floating point underflow, enables integer
; overflow, causes no floating overflow or other arithmetic traps, and
; preserves enables across the call.
;
;---


	.ENTRY	MTH$DSQRT, ACMASK	; standard call-by-reference entry
					; disable DV (and FU), enable IV
	MTH$FLAG_JACKET			; flag that this is a jacket procedure in
					; case of an error in special routine
	MOVD	@x(AP), R0		; R0/R1 = arg 
	BSBB	MTH$DSQRT_R5 		; call kernel DSQRT rountine
	RET				; return - result in R0/R1

	.SBTTL	MTH$DSQRT_R5  - Special DSQRT routine

; Special DSQRT - used by the standard routine, and directly.
;
; CALLING SEQUENCE:
;	save anything in R2:R5
;	MOVD	..., R0			; input in R0/R1
;	JSB	MTH$DSQRT_R5
;	return with result in R0/R1
; Note: This routine is written to avoid causing any integer overflows, floating
; overflows, floating underflows or divide by 0 conditions, whether enabled or
; not.
;
; REGISTERS USED:
;	R0/R1 - Floating argument then result
;	R2/R3 - scratch
;	R4/R5 - hold X during calc of F', K'.

MTH$DSQRT_R5::				; JSB routine for DSQRT
	MOVD	R0, R4			; test sign of X and save it in R4/R5.
	BLEQ	ZERO_NEG		; branch to ZERO_NEG if X =< 0
;
; X > 0
;
POS:	MOVZWL	R0, R1			; isolate low 16 bits (sign,exp,>fract) in R2
	CLRB	R1			; R1 now has sign and left 7 exp bits
	BICW	R1, R0			; clear sign and left 7 exp bits
	TSTB	R0			; check low bit of exp
	BGEQ	EVEN			; and branch if 1
	MULF	#LF_ODD_A_E63, R0	; add 64 (half of bias) to (exponent-2)
					; and start approximation calc
	ADDF	#LF_ODD_B_EM63, R0	; R0 = (first approx) * 2**-64
	BRB	ADJUST			; go adjust

EVEN:
	ADDW	#^X2000, R0		; exp is 0 - make it 64 (2**-64) for legality
	MULF	#LF_EVEN_A, R0
	ADDF	#LF_EVEN_B_EM64, R0	; R0 = (first approx) * 2**-64
ADJUST:
	ROTL	#31, R1, R1		; divide R1 (exp+bias) by 2,
					; giving (exp/2+64)
	ADDW	R1, R0			; insert exp/2 in first approx and
					; re-bias it.

; first iteration - single precision is sufficient
;
	DIVF3	R0, R4, R1		; R1 = X/Y0
	ADDF	R1, R0			; R0 = Y0 + X/Y0
	SUBW	#^X80, R0		; R0 = Y1 = (1/2)(Y0 + X/Y0)
					; no overflow possible

; second iteration, do in double precision to get truncated( rather than
; rounded) result.
;
	CLRL	R1			; lower part (X) = 0
	DIVD3	R0, R4, R2		; R2/R3 = X/Y1
	ADDD	R2, R0			; R0/R1 = Y1 + higher_part(X/Y1)
	SUBW	#^X80, R0		; R0/R1 = Y2 = (1/2) (Y1+X/Y1)

; third iteration, do in double precision.
;
	DIVD3	R0, R4, R2		; R2/R3 = X/Y2
	ADDD	R2, R0			; R0 = Y2+X/Y2
	SUBW	#^X80, R0		; R0/R1 = DSQRT(X) =
					; (1/2) (Y2+X/Y2)
SQRTX:	RSB				; return, R0/R1 = result

; X =< 0
;
ZERO_NEG:
	BEQL	SQRTX			; return with R0 = result = 0
	PUSHL	(SP)			; return PC from JSB routine
	MOVZBL	#MTH$K_SQUROONEG, -(SP)	; condition value
	ASHQ	#15, #1, R0		; R0/R1 = result = reserved operand -0.0
					; R0/R1 goes to signal mechanism vector
					; (CHF$L_MCH_R0/R1) so error handler
					; can modify the result.
	CALLS	#2, G^MTH$$SIGNAL	; signal error and use real user's PC
					; independent of CALL vs JSB
	RSB				; return - R0 restored from CHF$L_MCH_R0/R1

	.END
