	.TITLE	LIB$EDIV - Execute EDIV instruction
	.IDENT	/1-001/			; File: LIBEDIV.MAR Edit: SBL1001

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY: General Utility Library
;
; ABSTRACT:
;
;	This module contains LIB$EDIV, which makes the VAX EDIV instruction
;	available as a callable procedure.
;
; ENVIRONMENT: Runs at any access mode, AST Reentrant
;
; AUTHOR: Steven B. Lionel, CREATION DATE: 8-July-1981
;
; MODIFIED BY:
;
; 1-001	- Original. SBL 8-July-1981
;--

	.SBTTL	DECLARATIONS
;
; LIBRARY MACRO CALLS:
;
	$SSDEF			; Define SS$ symbols
	$CHFDEF			; Define CHF$ symbols
;
; EXTERNAL DECLARATIONS:
;
	.DSABL	GBL		; Force all external symbols to be declared
	.EXTRN	LIB$SIG_TO_RET	; Convert signal to return with status
;
; MACROS:
;
;	NONE
;
; EQUATED SYMBOLS:
;
;	NONE
;
; OWN STORAGE:
;
;	NONE
;
; PSECT DECLARATIONS:
;
	.PSECT _LIB$CODE PIC, USR, CON, REL, LCL, SHR, -
			EXE, RD, NOWRT, LONG


	.SBTTL	LIB$EDIV - Execute EDIV instruction
;++
; FUNCTIONAL DESCRIPTION:
;
;	This procedure makes the VAX EDIV instruction available as
;	a callable procedure.
;
;	The dividend argument is divided by the divisor argument;
;	the quotient argument is replaced by the quotient and the
;	remainder argument is replaced by the remainder.
;
;	For more information, see the VAX-11 Architecture Handbook.
;
; CALLING SEQUENCE:
;
;	status.wlc.v = LIB$EDIV (divisor.rl.r, dividend.rq.r,
;				 quotient.wl.r, remainder.wl.r)
;
; FORMAL PARAMETERS:
;
	divisor = 4		; The address of the longword integer divisor.

	dividend = 8		; The address of the quadword integer dividend.

	quotient = 12		; The address of the longword integer location
				; where the quotient will be stored.

	remainder = 16		; The address of the longword integer location
				; where the remainder will be stored.
;
; IMPLICIT INPUTS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION STATUS:
;
;	SS$_NORMAL, normal successful completion
;	SS$_INTOVF, integer overflow
;	SS$_INTDIV, integer divide by zero
;
; SIDE EFFECTS:
;
;	If integer overflow or divide-by-zero occur, then the quotient
;	operand is replaced by bits 31:0 of the dividend operand, and the
;	remainder is replaced by zero.
;
;--

	.ENTRY LIB$EDIV, ^M<IV>		; Entry point
					; IV must be enabled

	MOVAB	B^HANDLER, (FP)		; Enable local condition handler
					; to intercept exceptions

	EDIV	@divisor(AP), @dividend(AP), -
		@quotient(AP), @remainder(AP)

;+
; If the EDIV caused an exception, HANDLER will unwind to our caller
; with the correct status.
;-

	MOVL	#SS$_NORMAL, R0		; Successful completion
	RET

;+
; Local condition handler to return SS$_INTOVF and SS$_INTDIV as return
; statuses, all other exceptions resignal.
;-

HANDLER:
	.WORD	^M<>			; Entry mask

	MOVL	CHF$L_MCHARGLST(AP), R0	; Get mechanism args list address
	TSTL	CHF$L_MCH_DEPTH(R0)	; Is signal depth zero?
	BNEQ	90$			; If not, resignal
	MOVL	CHF$L_SIGARGLST(AP), R0	; Get signal args list address
	CMPL	CHF$L_SIG_NAME(R0), #SS$_INTOVF
					; Is it integer overflow?
	BEQL	10$			; If so, return with status
	CMPL	CHF$L_SIG_NAME(R0), #SS$_INTDIV
					; Is it integer divide-by-zero?
	BNEQ	90$			; If not, resignal
10$:	CALLG	(AP), G^LIB$SIG_TO_RET	; Return to our establisher's caller
					; with condition code in R0
90$:	MOVL	#SS$_RESIGNAL, R0	; Resignal (ignored if we just called
					; LIB$SIG_TO_RET)
	RET

	.END				; End of module LIB$EDIV
