MODULE BAS$MARGIN (				!
		IDENT = '1-0013'		! File: BASMARGIN.B32 EDIT:PL10013
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  BASIC-PLUS-2 Miscellaneous I/O
!
! ABSTRACT:
!
!	This module contains the BASIC MARGIN function, which returns
!	the margin of the file open on a channel.  The margin setting
!	can also be changed.
!
! ENVIRONMENT:  VAX-11 User Mode
!
! AUTHOR: John Sauter, CREATION DATE: 08-MAY-1979
!
! MODIFIED BY:
!
! 1-001	- Original.
! 1-002	- Allow MAR% on channel 0 before it is open.  JBS 23-MAY-1979
! 1-003	- Make the margin 16 bits.  JBS 30-MAY-1979
! 1-004	- If the new margin is larger than the record size (on unit 0
!	   only) increase the record size.  JBS 31-MAY-1979
! 1-005	- Update RAB$L_UBF and RAB$W_USZ when increasing the record
!	   size.  JBS 04-JUN-1979
! 1-006	- Add BAS$NOMARGIN.  JBS 13-JUL-1979
! 1-007	- Set up ISB$A_USER_FP.  JBS 25-JUL-1979
! 1-008	- Correct a coding error in the call to LIB$FREE_VM.
!	   QAR N11-03250.  JBS 29-NOV-1979
! 1-009	- When relocating LUB fields, dont forget LUB$A_UBF.  JBS 29-NOV-1979
! 1-0010- BAS$NOMARGIN needs to do a BAS$$CB_POP before return. FM 9-FEB-81
! 1-0011- MARGIN should operate only on terminal format files.  PLL 12-May-81
! 1-0012- NOMARGIN should also operate only on terminal format
!	  files.  PLL 05-JUN-81
! 1-0013- LIB$STOP should be declared EXTERNAL.  PLL 20-Nov-81
!--

!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!

REQUIRE 'RTLIN:OTSLNK';				! Define linkages

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    BAS$MARGIN,					! Return right margin
    BAS$NOMARGIN : NOVALUE;			! Turn off right margin

!
! INCLUDE FILES:
!

REQUIRE 'RTLML:OTSLUB';				! Get LUB definitions

REQUIRE 'RTLML:OTSISB';				! Get ISB definitions

REQUIRE 'RTLIN:RTLPSECT';			! Macros for defining psects

LIBRARY 'RTLSTARLE';				! System symbols

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! PSECTS:
!
DECLARE_PSECTS (BAS);				! Declare psects for BAS$ facility
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    LIB$STOP : NOVALUE,				! Signal fatal error
    LIB$FREE_VM,				! Deallocate storage
    LIB$GET_VM,					! Allocate storage
    BAS$$CB_PUSH : JSB_CB_PUSH NOVALUE,		! Load register CCB
    BAS$$CB_POP : JSB_CB_POP NOVALUE,		! Done with register CCB
    BAS$$STOP_IO : NOVALUE,			! Signal fatal I/O error
    BAS$$STOP : NOVALUE,			! Signal fatal error
    BAS$$OPEN_ZERO : CALL_CCB NOVALUE;		! Open channel zero.

!+
! The following are the error codes used in this module.
!-

EXTERNAL LITERAL
    BAS$K_ILLIO_CHA : UNSIGNED (8),		! Illegal I/O channel
    BAS$K_IO_CHANOT : UNSIGNED (8),		! I/O Channel not open
    BAS$K_ILLOPE : UNSIGNED (8),		! Illegal operation
    BAS$K_MAXMEMEXC : UNSIGNED (8),		! Maximum memory exceeded
    OTS$_FATINTERR;				! Fatal internal error


GLOBAL ROUTINE BAS$MARGIN (			! Return right margin
	CHAN, 					! Channel whose margin to return
	NEW_MARGIN				! Optional new setting
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Returns the right margin of the specified channel.  Optionally,
!	a new right margin can be specified.  If the right margin of the
!	user's terminal (channel 0) is being extended, this routine will
!	reallocate the channel buffer if necessary so that there is
!	enough room for a line out to the margin.
!
! FORMAL PARAMETERS:
!
!	CHAN.rl.v	The channel whose margin to return.
!	NEW_MARGIN.rl.v	Optionally, the new right margin.  0 means
!			return to default.
!
! IMPLICIT INPUTS:
!
!	LUB$W_R_MARGIN	The channel's current right margin
!	LUB$W_D_MARGIN	The channel's default right margin
!	LUB$W_RBUF_SIZE	The length of the record buffer.
!
! IMPLICIT OUTPUTS:
!
!	LUB$W_R_MARGIN	The channel's current right margin
!	LUB$W_RBUF_SIZE	The length of the record buffer
!	LUB$A_UBF	The address of the record buffer
!	Various other fields in the LUB and RAB that point into the
!	 record buffer, which get relocated.
!
! ROUTINE VALUE:
!
!	The right margin of the channel, before any changes made
!	by this routine.
!
! SIDE EFFECTS:
!
!	May change the right margin of this channel.
!	If channel 0 is not open, opens it.
!	BAS$$CB_PUSH will signal if the channel number is invalid.
!	If it must expand the channel buffer, will disable ASTs while
!	doing so, and relocate some LUB and RAB fields.
!
!--

    BEGIN

    BUILTIN
	FP;

    GLOBAL REGISTER
	CCB = K_CCB_REG : REF BLOCK [, BYTE];

    BUILTIN
	ACTUALCOUNT;

    LOCAL
	FMP : REF BLOCK [, BYTE],
	RIGHT_MARGIN,
	LOG_UNIT;

    FMP = .FP;
!+
! Get the LUB for the channel.  Signal if the channel number is invalid.
!-
    LOG_UNIT =
    BEGIN

    IF (.CHAN GTR 0)
    THEN
	.CHAN
    ELSE

	IF (.CHAN EQL 0)
	THEN
	    LUB$K_LUN_BPRI
	ELSE
	    BEGIN
	    BAS$$STOP (BAS$K_ILLIO_CHA);
	    0
	    END

    END;
    BAS$$CB_PUSH (.LOG_UNIT, LUB$K_LUN_BPRI);
    CCB [ISB$A_USER_FP] = .FMP [SF$L_SAVE_FP];
!+
! If the channel is zero and not open, open it.
!-

    IF (.CHAN EQL 0)
    THEN
	BEGIN

	IF ( NOT .CCB [LUB$V_OPENED]) THEN BAS$$OPEN_ZERO (.FMP [SF$L_SAVE_FP]);

	END;

!+
! If the channel is not now open, we have an error.
!-

    IF ( NOT .CCB [LUB$V_OPENED]) THEN BAS$$STOP_IO (BAS$K_IO_CHANOT);

!+
! If this is anything but a terminal format file, the MARGIN state-
! ment is unreasonable.
!-

    IF (.CCB [LUB$B_ORGAN] NEQ LUB$K_ORG_TERMI) THEN BAS$$STOP_IO (BAS$K_ILLOPE);

!+
! Fetch the current margin, so we can return it.
!-
    RIGHT_MARGIN = .CCB [LUB$W_R_MARGIN];
!+
! If a new margin is specified, change to it.  If the new margin is
! zero, change instead to the default margin.
!-

    IF (ACTUALCOUNT () GEQ 2)
    THEN
	BEGIN
	CCB [LUB$W_R_MARGIN] =
	BEGIN

	IF (.NEW_MARGIN EQL 0) THEN .CCB [LUB$W_D_MARGIN] ELSE .NEW_MARGIN

	END;
!+
! If the margin is larger than the buffer, and this is channel 0
! (which means the user has no control over the size of the buffer
! since he cannot open channel 0 himself), increase the buffer
! size to match the new margin.
!-

	IF ((.CCB [LUB$W_R_MARGIN] GTR .CCB [LUB$W_RBUF_SIZE]) AND .CCB [LUB$V_UNIT_0] AND ( NOT .CCB [
		LUB$V_USER_RBUF]))
	THEN
	    BEGIN

	    LOCAL
		NEW_BUFFER,
		GET_VM_STATUS,
		FREE_VM_STATUS,
		AST_STATUS,
		OLD_BUFFER,
		OLD_SIZE,
		NEW_SIZE;

!+
! We must be sure that an AST does not fool with the buffer as we
! are reallocating it.
!-
	    AST_STATUS = $SETAST (ENBFLG = 0);
!+
! Allocate a new buffer.
!-
	    NEW_SIZE = MAX (.CCB [LUB$W_RBUF_SIZE], .CCB [LUB$W_D_MARGIN], .CCB [LUB$W_R_MARGIN]);
	    GET_VM_STATUS = LIB$GET_VM (NEW_SIZE, NEW_BUFFER);

	    IF ( NOT .GET_VM_STATUS) THEN BAS$$STOP_IO (BAS$K_MAXMEMEXC);

!+
! Remember the old buffer address and length for later.
!-
	    OLD_BUFFER = .CCB [LUB$A_UBF];
	    OLD_SIZE = .CCB [LUB$W_RBUF_SIZE];
!+
! Point the LUB to the new buffer.
!-
	    CCB [LUB$A_UBF] = .NEW_BUFFER;
	    CCB [LUB$W_RBUF_SIZE] = .NEW_SIZE;
	    CCB [RAB$W_USZ] = .NEW_SIZE;
!+
! Now relocate all of the LUB fields that point into the buffer.
!-
	    CCB [LUB$A_RBUF_ADR] = .CCB [LUB$A_RBUF_ADR] - .OLD_BUFFER + .NEW_BUFFER;
	    CCB [LUB$A_BUF_PTR] = .CCB [LUB$A_BUF_PTR] - .OLD_BUFFER + .NEW_BUFFER;
	    CCB [LUB$A_BUF_END] = .CCB [LUB$A_BUF_END] - .OLD_BUFFER + .NEW_BUFFER;
	    CCB [LUB$A_BUF_BEG] = .CCB [LUB$A_BUF_BEG] - .OLD_BUFFER + .NEW_BUFFER;
	    CCB [LUB$A_BUF_HIGH] = .CCB [LUB$A_BUF_HIGH] - .OLD_BUFFER + .NEW_BUFFER;
	    CCB [RAB$L_UBF] = .CCB [RAB$L_UBF] - .OLD_BUFFER + .NEW_BUFFER;
!+
! Copy the data from the old buffer to the new.
!-
	    CH$COPY (.OLD_SIZE, .OLD_BUFFER, 0, .NEW_SIZE, .NEW_BUFFER);
!+
! Now that the CCB is updated, we can turn ASts back on.
!-

	    IF (.AST_STATUS EQL SS$_WASSET) THEN $SETAST (ENBFLG = 1);

!+
! Free the old buffer.
!-
	    FREE_VM_STATUS = LIB$FREE_VM (OLD_SIZE, OLD_BUFFER);

	    IF ( NOT .FREE_VM_STATUS) THEN LIB$STOP (OTS$_FATINTERR);

	    END;

!+
! Since we now have a right margin, make sure the NOMARGIN bit
! is clear.
!-
	CCB [LUB$V_NOMARGIN] = 0;
	END;

!+
! We are done with register CCB.
!-
    BAS$$CB_POP ();
!+
! Return the previous (or unchanged) right margin.
!-
    RETURN (.RIGHT_MARGIN);
    END;					! end of BAS$MARGIN


GLOBAL ROUTINE BAS$NOMARGIN (			! Disable right margin
	CHAN					! Channel whose margin to disable
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Disable the right margin feature of a channel.
!
! FORMAL PARAMETERS:
!
!	CHAN.rl.v	The channel whose margin to disable.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	LUB$V_NOMARGIN	Set to 1.  This causes the formatting
!			routines to not enforce any right
!			margin.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	If channel 0 is not open, opens it.
!	BAS$$CB_PUSH will signal if the channel number is invalid.
!
!--

    BEGIN

    BUILTIN
	FP;

    GLOBAL REGISTER
	CCB = K_CCB_REG : REF BLOCK [, BYTE];

    LOCAL
	FMP : REF BLOCK [, BYTE],
	LOG_UNIT;

    FMP = .FP;
!+
! Get the LUB for the channel.  Signal if the channel number is invalid.
!-
    LOG_UNIT =
    BEGIN

    IF (.CHAN GTR 0)
    THEN
	.CHAN
    ELSE

	IF (.CHAN EQL 0)
	THEN
	    LUB$K_LUN_BPRI
	ELSE
	    BEGIN
	    BAS$$STOP (BAS$K_ILLIO_CHA);
	    0
	    END

    END;
    BAS$$CB_PUSH (.LOG_UNIT, LUB$K_LUN_BPRI);
    CCB [ISB$A_USER_FP] = .FMP [SF$L_SAVE_FP];
!+
! If the channel is zero and not open, open it.
!-

    IF (.CHAN EQL 0)
    THEN
	BEGIN

	IF ( NOT .CCB [LUB$V_OPENED]) THEN BAS$$OPEN_ZERO (.FMP [SF$L_SAVE_FP]);

	END;

!+
! If the channel is not now open, we have an error.
!-

    IF ( NOT .CCB [LUB$V_OPENED]) THEN BAS$$STOP_IO (BAS$K_IO_CHANOT);

!+
! If this is anything but a terminal format file, the NOMARGIN statement is unreasonable.
!-

    IF (.CCB [LUB$B_ORGAN] NEQ LUB$K_ORG_TERMI) THEN BAS$$STOP_IO (BAS$K_ILLOPE);

!+
! Set the NOMARGIN bit, so the margin will not be enforced.
!-
    CCB [LUB$V_NOMARGIN] = 1;
!+
! Set the margin cell to 0, so the margin function will
! return a zero.
!-
    CCB [LUB$W_R_MARGIN] = 0;
!+
! Pop the channel information.
!-
    BAS$$CB_POP ();
    RETURN;
    END;					! end of BAS$NOMARGIN

END						! end of module BAS$MARGIN

ELUDOM
