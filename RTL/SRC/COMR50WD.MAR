	.TITLE	COM$$R50WD	; FORTRAN COMPATIBILITY - ASCII TO RADIX-50 CONVERSION ROUTINE
	.IDENT	/1-004/		; File: COMR50WD.MAR

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;
; FACILITY: FORTRAN COMPATABILITY LIBRARY
;++
; ABSTRACT:
;
;	COM$$R50WD_R6 performs conversion of 3 ASCII characters to 1 word.
;	It is used by FORTRAN compatibility routines RAD50 and IRAD50.
;
;--
;
; VERSION: 0
;
; HISTORY:
;
; AUTHOR:
;	Peter Yuo, 12-Sep-77: Version 0
;
; MODIFIED BY:
;
;
;

	.SBTTL	HISTORY		; Detailed Current Edit History


; Edit History for Version 01 of ASCR5O
;
; 0-03	Clear RADIX_VALUE at initialization in R50WD_R6
; 00-06	- Define formal for RAD50 so no access vio.  TNH 5-Jan-78
; 00-07	- Make PSECT be F4PCOMPAT$CODE.  TNH 5-Jan-78
; 0-8	- Bug fix for RAD50.  JMT 5-Jan-78
; 0-9	- Another bug fix for RAD50.  JMT 9-Jan-77
; 1-1	- Break module COM$ASCR50 into 3 modules:
;		COM$RAD50 - routine RAD50
;		COM$IRAD50 - routine IRAD50
;		COM$$R50WD - common ASCII to RAD50 conversion routine
; 1-002	- Update copyright notice.  JBS 16-NOV-78
; 1-003	- Add "_" to PSECT directive.  JBS 21-DEC-78
; 1-004 - Blanks were not being counted as characters converted.
;	  Also, routine did not stop at first non-rad50 char as
;	  specified.  Recode to conform with PDP-11.
;	  SPR 11-26803  SBL 31-Oct-1979

	.SBTTL	DECLARATIONS

;
; INCLUDE FILES:
;

;
; EXTERNAL SYMBOLS:
;
	.DSABL	GBL

;
; MACROS:
;

;
; PSECT DECLARATIONS:
;
	.PSECT	_F4PCOMPAT$CODE	PIC,USR,CON,REL,LCL,SHR,EXE,RD,NOWRT

;
; EQUATED SYMBOLS:
;

;
; OWN STORAGE:
;

	.SBTTL	COM$$R50WD_R6 - CONVERT 3 ASCII CHARS INTO ONE WORD RADIX-50 VALUE


;++
; FUNCTIONAL DESCRIPTION:
;
;	Algorithmic steps:
;	1) Initialization
;	   REM_CHAR_IN_WORD = 3 (3 radix50 chars/word)
;	2) If (CHARS_REM - 1) < 0 then (CURRENT_CHAR = 0, go to
;					step 5 to fill up the rest of the word)
;	   otherwise (CURRENT_CHAR = CHAR(NEXT_INPUT_POSITION),
;		      NEXT_INPUT_POSITION = NEXT_INPUT_POSITION + 1).
;	3) Get the corresponding radix-50 value
;	   a. If ASCII('A') =< ASCII(CURRENT_CHAR) =< ASCII('Z') then
;	      CURRENT_CHAR = ASCII(CURRENT_CHAR) - 100(octal)
;	   b. If ASCII('0') =< ASCII(CURRENT_CHAR) =< ASCII('9') then
;	      CURRENT_CHAR = ASCII(CURRENT_CHAR) - 22(octal)
;	   c. If ASCII(CURRENT_CHAR) = ASCII(' ') then
;	      CURRENT_CHAR = ASCII(' ') - 40(octal)
;	   d. If ASCII(CURRENT_CHAR) = ASCII('$') then
;	      CURRENT_CHAR = ASCII('$') - 11(octal)
;	   e. If ASCII(CURRENT_CHAR) = ASCII('.') then
;	      CURRENT_CHAR = ASCII('.') - 22(octal)
;	   f. If none of the above then terminate.
;	ADD_COUNT:
;	4) ACTUAL_CHAR_COUNT = ACTUAL_CHAR_COUNT + 1
;	ACCUM:
;	5) RADIX_VALUE = RADIX_VALUE * 50(octal) + CURRENT_CHAR
;	6) If (CHARS_REM = CHARS_REM - 1) > 0 THEN go back to step 2
;	7) return with the result in RADIX-VLAUE
;--

COM$$R50WD_R6::
;
; Initialization
;

	MOVL	#3, R6			; R6 = CHARS_REM_IN_WORD = 3
	CLRL	R1			; clear RADIX_VALUE

;
; Clear CHARRENT_CHAR
; If (CHARS_REM - 1) =< 0 then (CURRENT_CHAR = 0, go to ACCUM to fill
;				up the rest of the word)
; else (CURRENT_CHAR = CHAR (NEXT_INPUT_POSITION),
;	NEXT_INPUT_POSITION = NEXT_INPUT_POSITION + 1)
;
AGAIN1:	CLRL	R3			; clear CURRENT_CHAR
	DECL	R5			; CHARS_REM = CHARS_REM - 1
	BLSS	ACCUM			; branch to fill up the rest of the word
	MOVZBL	(R2)+, R3		; CURRENT_CHAR = next input char
					; and advance NEXT_INPUT_POSITION

;
; Get the corresponding RADIX-50 value
; a. If ASCII(CURRENT_CHAR) =< ASCII(' ') then go to SPACE
; b. If ASCII(CURRENT_CHAR) > ASCII('Z') then terminate scan
; c. If ASCII(CURRENT_CHAR) < ASCII('A') then go to CHECK_NUMBER
; d. current char is A-Z, so CURRENT_CHAR = CURRENT_CHAR - 100(octal)
;    go to ACCUM
; CHECK_NUMBER:
; e. If ASCII(CURRENT_CHAR) < ASCII('0') then go to CHECK_DOLLAR
; f. If ASCII(CURRENT_CHAR) > ASCII('9') then terminate scan
; g. current char is 0-9, so CURRENT_CHAR = CURRENT_CHAR - 22(octal)
;    go to ACCUM
; CHECK_DOLLAR:
; h. If ASCII(CURRENT_CHAR) = ASCII('$') then (CURRENT_CHAR = 33(octal),
;						go to ACCUM)
; i. If ASCII(CURRENT_CHAR) = ASCII('.') then (CURRENT_CHAR = 34(octal),
;						go to ACCUM)
;

	CMPB	R3, #^A/ /		; compare CURRENT_CHAR with space
	BEQL	SPACE			; a space character?
	BLSS	ILLEGAL			; not a RAD50 character
	CMPB	R3, #^A/Z/		; compare CURRENT_CHAR with 'Z'
	BGTR	ILLEGAL			; not a RAD50 character
	CMPB	R3, #^A/A/		; compare CURRENT_CHAR with 'A'
	BLSS	CHECK_NUMBER		; branch to check if CURRENT_CHAR is
					; a number
	SUBL	#^O100, R3		; R3 = correspondin radix-50 value
					; for A-Z
	BRB	ADD_COUNT		; branch to add acutal count
CHECK_NUMBER:
	CMPB	R3, #^A/0/		; compare CURRENT_CHAR  with '0'
	BLSS	CHECK_DOLLAR		; go to check for '$'
	CMPB	R3, #^A/9/		; compare CURRENT_CHAR with '9'
	BGTR	ILLEGAL			; Not a RAD50 character
	SUBL	#^O22, R3		; get corresponding radix-50 value
					; for 0-9
	BRB	ADD_COUNT		; branch to add actual count
CHECK_DOLLAR:
	CMPB	R3, #^A/$/		; compare CURRENT_CHAR with '$'
	BNEQ	CHECK_PERIOD		; branch to check for period
	MOVL	#^O33, R3		; CURRENT_CHAR = corresponding
					; radix-50 value
	BRB	ADD_COUNT		; branch to add to ACUTAL_COUNT
CHECK_PERIOD:
	CMPB	R3, #^A/./		; compare CURRENT_CHAR with '.'
	BNEQ	ILLEGAL			; not a RAD50 character
	MOVL	#^O34, R3		; get corresponding radix-50 value
	BRB	ADD_COUNT		; branch to add ACTUAL_COUNT
SPACE:
	CLRL	R3			; CURRENT_CHAR = 0


;
; Accumulate ACTUAL_COUNT
;

ADD_COUNT:
	INCL	R0			; ACTUAL_COUNT = ACTUAL_COUNT + 1

;
; Accumulate ACTUAL_VALUE
;

ACCUM:	ASHL	#3, R1, R1		; R1 = 8*RADIX_VALUE
	ADDL	R1, R3			; R3 = 8*RADIX_VALUE + CURRENT_CHAR
	ASHL	#2, R1, R1		; R1 = 32*RADIX_VALUE
	ADDL	R3, R1			; R1 = 40*RADIX_VALUE + CURRENT_CHAR
					; = 50(octal)*RADIX_VALUE + CURRENT_CHAR

;
; If any more char to process go back, otherwise return
;

	DECL	R6			; decrement CHARS_REM_IN_WORD by 1
	BGTR	AGAIN1			; go back to process more char
	RSB				; return with R1 = RADIX_VALUE
					; R0 = ACTUAL_COUNT

ILLEGAL:
	CLRL	R5			; Illegal character, terminate scan
	RSB				; Return with R1 = RADIX_VALUE
					; R0 = ACTUAL_COUNT


	.END
