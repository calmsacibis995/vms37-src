	.TITLE	BAS$MAT_NULL
	.IDENT	/1-003/		; File: BASMATNUL.MAR EDIT:RNH1003

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY: BASIC code support
;
; ABSTRACT:
;
;	This module initializes a string matrix to have a null string
;	for each element.
;
; ENVIRONMENT: User Mode, AST Reentrant
;
;--
; AUTHOR: R. Will, CREATION DATE: 30-May-79
;
; MODIFIED BY:
;
; 1-001	- Original 
; 1-002 - Make references to bounds signed.  Rw 7-Jun-79
; 1-003 - Change shared external references to G^ RNH 25-Sep-81

	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;

	$DSCDEF					; define descriptors

;
; EXTERNAL DECLARATIONS:
;

	.DSABL	GBL				; Prevent undeclared
						;  symbols from being
						;  automatically global.
	.EXTRN	BAS$K_ARGDONMAT			; signalled if all 3 blocks
						;  not present in array desc
						;  or dimct = 0
	.EXTRN	BAS$STORE_BFA			; array element store
	.EXTRN	BAS$$STOP			; signal fatal errors

;
; MACROS:
;

;
; EQUATED SYMBOLS:
;

	index1 = 12				; stack offset of index1
						;  before call to store
	index2 = 16				; stack offset of index2
						;  before call to store
	dsc$l_l1_1 = 24				; desc offset if 1 sub
	dsc$l_u1_1 = 28				; desc offset if 1 sub
	dsc$l_l1_2 = 28				; desc offset if 2 sub
	dsc$l_u1_2 = 32				; desc offset if 2 sub
	dsc$l_l2_2 = 36				; desc offset if 2 sub
	dsc$l_u2_2 = 40				; desc offset if 2 sub

;
; OWN STORAGE:
;

;
; PSECT DECLARATIONS:
;
	.PSECT _BAS$CODE PIC, USR, CON, REL, LCL, SHR, -
			EXE, RD, NOWRT, LONG


	.SBTTL	BAS$MAT_NULL  - Initialize a string matrix to null matrix
;++
; FUNCTIONAL DESCRIPTION:
;
;	This routine initializes each element of a string array to the
;	null string.  It does this by copying a null string to each elemnt.
;
; CALLING SEQUENCE:
;
;	CALL BASMAT_NULL (matrix.wx.da)
;
; INPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
	matrix = 4
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; FUNCTION VALUE:
; COMPLETION CODES:
;
;	NONE
;
; SIDE EFFECTS:
;
;	This routine will call the BASIC array fetch and store routines and so
;	may cause any of their errors to be signalled.  It may also signal any
;	of the errors listed in the externals section.
;
;--


;+
;	REGISTER USAGE
;	R2	current bound for 1st subscript
;	R3	upper bound for 1st subscript
;	R4	lower bound for 2nd subscript
;	R5	upper bound for 2nd subscript
;	R6	current value of 2nd subscript
;-

	.ENTRY BAS$MAT_NULL, ^M<R2,R3,R4,R5,R6,IV>

;+
; If block 2 of array descriptor (multipliers) is not present then error.
;-

	MOVL	matrix(AP), R0			; get pointer to mat descriptr
	BBC	#DSC$V_FL_BOUNDS, DSC$B_AFLAGS(R0), ERR_ARGDONMAT
						; exit if block 3 not
						; present in descriptor

;+
; Initialize stack for CALLG to element store routine.  Then divide algorithm
; based on number of subscripts.
;-

	CLRL	-(SP)				; pointer of descriptor
	PUSHL	#<<DSC$K_CLASS_S @ 24> + <DSC$K_DTYPE_T @ 16>> ; 1st desc word
						; class, type and 0 length
	CLRQ	-(SP)				; space for indices
	PUSHL	R0				; ptr to dest desc for call
	PUSHAL	12(SP)				; pointer to NULL descriptor
	CMPB	DSC$B_DIMCT(R0), #1		; determine # of subscripts
	BEQLU	INIT_ONE_SUB			; 1 sub, go init
	BGTRU	INIT_TWO_SUBS			; >=2 subs, go init
	BRW	ERR_ARGDONMAT			; 0 subs, error

;+
; There is only 1 subscript.  Make both upper and lower bound for 2nd
; subscript a 1.  A second subscript will be passed to and ignored by the
; store routine because the argcount in the arglist of the CALL will not
; include the 2nd subscript.  Put bounds for 1st subscript into registers.
;-

INIT_ONE_SUB:
	PUSHL	#3				; 3 arguments to store routine
						;  ignores 2nd index
	MOVL	dsc$l_u1_1(R0), R3		; 1st upper bound
	MOVL	dsc$l_l1_1(R0), R2		; 1st lower bound
	BGTR	1$				; not 0 or neg, init 2nd bound
	MOVL	#1, R2				; don't alter row 0
1$:	MOVL	#1, R4				; set 2nd lower bnd to 1
	MOVL	#1, R5				; set 2nd upper bnd to 1
	BRB	LOOP_1ST_SUB			; go loop

;+
; There are 2 subscripts.  Put the upper bound for both subscripts in
; registers and make sure that the lower bound for both subscripts will start
; at 1 (do not alter row or col 0)
;-

INIT_TWO_SUBS:
	PUSHL	#4				; 4 arguments to store routine
	MOVL	dsc$l_u2_2(R0), R5		; 2nd upper bound
	MOVL	dsc$l_l2_2(R0), R4		; 2nd lower bound
	BGTR	1$				; not col 0 or neg, do cols
	MOVL	#1, R4				; start with col 1
1$:	MOVL	dsc$l_u1_2(R0), R3		; 1st upper bound
	MOVL	dsc$l_l1_2(R0), R2		; 1st lower bound
	BGTR	LOOP_1ST_SUB			; not row 0 or neg, go loop
	MOVL	#1, R2				; start with row 1

;+
; Loop through all the rows.  Row and column upper and lower bounds have been
; initialized in registers.
;-

LOOP_1ST_SUB:
	MOVL	R4, R6				; R6 has 1st lower bound

;+
; Loop through all the elements (columns) of the current row.  Column lower
; bound is initialized in R6.  Column upper bound is in R5.
;-

LOOP_2ND_SUB:

	MOVL	R6, index2(SP)			; current column
	MOVL	R2, index1(SP)			; current row
	CALLG	(SP), BAS$STORE_BFA		; store in array
	INCL	R6				; get next column
	CMPL	R6, R5				; see if last column done
	BLEQ	LOOP_2ND_SUB			; no, continue inner loop

;+
; Have completed entire row.  See if it was the last row.  If not,
; continue with next row.
;-

	INCL	R2				; get next row
	CMPL	R2, R3				; see if last row done
	BLEQ	LOOP_1ST_SUB			; no, continue outer loop

	RET					; yes, finished

ERR_ARGDONMAT:
	PUSHL	#BAS$K_ARGDONMAT		; signal error, 0 for dimct
	CALLS	#1, G^BAS$$STOP			; or block 2 or 3 absent

	.END					; end of BAS$MAT_NULL
