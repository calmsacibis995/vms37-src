	.TITLE	FOR$DECODE_MO - entry point for FORTRAN DECODE OBJECT-FORMATTED
	.IDENT	/1-011/		File: FORDECOMO.MAR  Edit: JAW1011
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;
;++
; FACILITY: FORTRAN Support Library - user callable
;
; ABSTRACT:
;
;	This module contains the entry point for the FORTRAN 
;	DECODE OBJECT-FORMATTED I/O statement.  It is simply
;	a call to FOR$$IO_BEG with bits in R0 which describe the
;	parameter list.  FOR$$IO_BEG interprets the parameters.
;
; MAINTENANCE NOTE:
;	The transfer vector (RTLVECTOR+ALLGBL) must have the following:
;
;	.TRANSFER	FOR$DECODE_MO
;	.MASK		FOR$$IO_BEG
;	BRW		FOR$DECODE_MO+2
;
;	This puts the correct mask in entry vector, that is FOR$$IO_BEG entry mask.
;	Furthermore this module must only use R0 and R1
;	since any other register might not be in the entry mask for FOR$$IO_BEG.
;
; ENVIRONMENT: User access mode; mixture of AST level or not
;
; AUTHOR:	Richard B. Grove, CREATION DATE: 28-May-78
;
; MODIFIED BY:
;	T. Hastings, 29-July-78

	.SBTTL	HISTORY		; Detailed Current Edit History


; Edit History for Version 1
;
; 0-10	- Add comment about vectors.  TNH 23-June-78
; 0-12	- Pass arg in R0, not R0R, add comments.  TNH 29-July-78
; 1-001	- Update version number and copyright notice.  JBS 16-NOV-78
; 1-002	- Change statement type symbols to be LUB$K...  JBS 07-DEC-78
; 1-003	- Change statement type symbols to be ISB$K...  JBS 11-DEC-78
; 1-004	- Add "_" to the PSECT directive.  JBS 22-DEC-78
; 1-005 - Add FOR$READ_KF, FOR$READ_KO, FOR$REWRITE_SF, FOR$REWRITE_SO,
;	  FOR$READ_IF, FOR$READ_IO, FOR$WRITE_IF, FOR$WRITE_IO,
;	  FOR$READ_KU, FOR$REWRITE_SU,
;	  SBL 2-May-1979
; 1-006	- Remove all entry points that need object time formatting,
;	   putting them in FOR$ENTRY_OBJ so that we can arrange to
;	   load the format compiler only when it is needed.
;	   JBS 26-JUN-1979
; 1-007	- Remove entry point FOR$ENCODE_MF; we will code a new module
;	   for it and FOR$$IO_BEG, to see how much I/O initiation time
;	   improves.  JBS 02-JUL-1979
; 1-008	- Do likewuse for FOR$READ_DU and FOR$WRITE_DU.  JBS 03-JUL-1979
; 1-009	- Remove all entry points and add FOR$READ_SO;  each entry
;	   point gets its own module do we can selectively load
;	   the necessary UDF and REC modules.  JBS 09-JUL-1979
; 1-010 - New parameter format for FOR$$IO_BEG.  SBL 5-Dec-1979
; 1-011 - Change BRW FOR$$IO_BEG+2 to JMP G^FOR$$IO_BEG+2.  JAW 21-Feb-1981

	.SBTTL	DECLARATIONS

;
; INCLUDE FILES:
;

	$FORPAR				; Define inter-module FORTRAN symbols
	$ISBDEF				; Define statement type symbols

;
; EXTERNAL SYMBOLS:
;

	.DSABL	GBL			; Declare all external symbols
	.EXTRN	FOR$$IO_BEG		; common I/O statement processing
;+
; The following references are to make sure the necessary UDF and REC
; modules are loaded.  These are the routines which are called through
; the dispatch tables in FOR$$DISPAT.
;-
	.EXTRN	FOR$$UDF_RF0, FOR$$UDF_RF1, FOR$$UDF_RF9
	.EXTRN	FOR$$REC_RMF0, FOR$$REC_RMF1, FOR$$REC_RMF9
;+
; The following reference makes sure the format compiler is loaded.
;-
	.EXTRN	FOR$$FMT_COMPIL

;
; MACROS:
;
;	NONE
;
; PSECT DECLARATIONS:
;

	.PSECT	_FOR$CODE PIC,USR,CON,REL,LCL,SHR,EXE,RD,NOWRT,LONG

;
; EQUATED SYMBOLS:
;


;
; OWN STORAGE:
;
;	NONE
;

	.SBTTL	FOR$DECODE_MO - DECODE OBJECT-FORMATTED

;++
; FUNCTIONAL DESCRIPTION:
;
;	Initialize the FORTRAN I/O system to perform
;	a DECODE OBJECT-FORMATTED I/O statement.
;
; CALLING SEQUENCE:
;
;	CALL FOR$DECODE_MO (char_cnt.rlu.v, format_adr.rt.r, usr_buf_adr.wt.ra
;		[, err_adr.j.r [, end_adr.j.r]])
;
; INPUT PARAMETERS:
;
;	unit.rl.v		logical unit number
;	format_adr.rt.r		format string (needs compilation)
;	usr_buf_adr.wt.ra	adr. of user's buffer
;	[err_adr.j.r]		optional ERR= address
;	[end_adr.j.r]		optional END= address
;
; IMPLICIT INPUTS:
;
;	NONE except those used by FOR$$IO_BEG.
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE except those left by FOR$$IO_BEG.
;
; COMPLETION CODES:
;
;	NONE
;
; SIDE EFFECTS:
;
;	NONE except those of FOR$$IO_BEG.
;
;--

FOR$DECODE_MO::	.MASK	FOR$$IO_BEG
	MOVZWL	#ISB$K_ST_TY_RMF+	-
		<1@FOR$V_OBJ_FMT>, R0	; Statement type
	JMP	G^FOR$$IO_BEG+2		; branch past call mask


	.END
