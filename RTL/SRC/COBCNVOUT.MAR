	.TITLE	COB$CNVOUT - Convert Real (D, G, H) to Text
	.IDENT	/1-005/			; File: COBCNVOUT.MAR EDIT:LEB1005

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;

;++
; FACILITY: COBOL Language Support Library
;
; ABSTRACT:
;
;	Routines to convert D, G and H floating values to text representations.
;	This module produces the FORTRAN E format as an aid
;	to the conversion between D, F, Q, and Packed data types for
;	COBOL runtime routines.
;
; ENVIRONMENT: User Mode, AST Reentrant
;
;--
; AUTHOR: R. REICHERT, CREATION DATE: 27-Sept-1979
;

	.SBTTL	Edit History
;
; 1-001 - Original by lifting code from FORCVTRT.MAR (Version 1-007)
;	  Only the code in support of the entry point FOR$CNV_OUT_E
;	  is reflected in this module. RKR 27-SEP-79
; 1-002 - Cosmetic changes.  RKR 21-OCT-79
; 1-003 - Delete all code not needed by COBOL.  RKR 7-NOV-79
; 1-004	- Simplify code to find temp_string length (taken from FORCVTRT)
;	  PDG 7-AUG-81
; 1-005 - Added EDIT field for use in checkin's audit trail.  Updated
;	  copyright date.  LB 24-AUG-81

	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;

;
; EXTERNAL DECLARATIONS:
;
	.DSABL	GBL				; Prevent undeclared
						; symbols from being
						; automatically global.
	.EXTRN	OTS$$CVT_D_T_R8			; Kernel convert routine
	.EXTRN	OTS$_FATINTERR			; Error code

;
; MACROS:
;

;
; EQUATED SYMBOLS:
;

; Stack frame offsets from FP
;; Common frame for kernel convert routines
	PACKED = -8			; Temp for packed representation
	FLAGS = PACKED - 4		; Flags for outer and inner routines
	SIG_DIGITS = FLAGS - 4		; Significant digits
	STRING_ADDR = SIG_DIGITS - 4	; Address of temp string
	SIGN = STRING_ADDR - 4		; Sign
	DEC_EXP = SIGN - 4		; Decimal exponent
	OFFSET = DEC_EXP - 4		; Offset
	RT_RND = OFFSET - 4		; Right round point
	COMMON_FRAME = RT_RND		; Common frame size
;; Not-in-common stack frame
	EXP_LETTER = COMMON_FRAME - 4	; Exponent letter to use
	S_SCALE = EXP_LETTER - 4	; Saved scale factor
	S_DI = S_SCALE - 4		; Saved digits in integer
	S_DE = S_DI - 4			; Saved digits in exponent
	S_DF = S_DE - 4			; Saved digits in fraction
	LEAD_DIGITS = S_DF - 4		; Number of leading digits
	LEAD_ZERO = LEAD_DIGITS - 4	; Number of zeroes after decimal pt.
	TRAIL_DIGITS = LEAD_ZERO - 4	; Number of trailing digits
	FRAME = TRAIL_DIGITS		; Frame size

	M_TRUNCATE = 1@24		; Flag to kernel routine
	M_RT_ROUND = 1@25		;

;
; OWN STORAGE:
;

;
; PSECT DECLARATIONS:
;
	.PSECT _COB$CODE PIC, USR, CON, REL, LCL, SHR, -
			EXE, RD, NOWRT, LONG


	.SBTTL	COB$CNVOUT - Convert real to text
;++
; FUNCTIONAL DESCRIPTION:
;
;	This routine performs conversion of floating values
;	to text representations.  
;
;
; CALLING SEQUENCE:
;	status.wlc.v = COB$CNVOUT (value.rx.r, out_string.wt.ds,
;				     digits_in_fract.rlu.v)
;
;
; INPUT PARAMETERS:
;
	value		= 4		; The address of the floating value to be converted.
	digits_in_fract	= 12		; The number of digits in the fraction
					; portion.
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
	out_string	= 8		; The address of the descriptor of the result
					; string.  The string must be
					; class S. (Scalar)
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	SS$_NORMAL - Successful completion
;	OTS$_FATINTERR - Output conversion error.  The value did not
;		fit in the given string.
;
; SIDE EFFECTS:
;
;	SS$_ROPRAND - If the value to be converted is a reserved
;		      floating operand.  
;
;--


	.ENTRY	COB$CNVOUT, ^M<R2,R3,R4,R5,R6,R7,R8>
	MOVAB	FRAME(FP), SP		; Set up stack frame
	MOVB	#^A/E/, EXP_LETTER(FP)	; Use letter E
;+
; look at the argument list and fill in the appropriate
; values in the local frame.
;-

INITIALIZE:
	CLRL	FLAGS(FP)		; No flags initially
	MOVL	#2, S_DE(FP)		; Digits in exponent
	CLRL	S_DI(FP)		; Digits in integer
	CLRL	S_SCALE(FP)		; Scale factor
90$:	MOVL	digits_in_fract(AP), S_DF(FP)	; Store digits_in_fract
	MOVL	S_DF(FP), SIG_DIGITS(FP)	; Initial number of sig. digits
10$:	ADDL3	#19, SIG_DIGITS(FP), R2	; Find temp_string length
	SUBL2	R2, SP			; Create string on stack
	MOVL	SP, STRING_ADDR(FP)	; Temp string address
	MOVL	value(AP), R0		; Value address
	MOVL	FP, R1			; Local frame address
	JSB	OTS$$CVT_D_T_R8		; Call kernel conversion routine
	ADDL2	OFFSET(FP), STRING_ADDR(FP) ; Get first character pos.
E_CONVERT:
	TSTL	SIGN(FP)		; Is value zero?
	BNEQ	20$			; No
	CLRL	DEC_EXP(FP)		; Yes, exponent is zero
20$:	MOVL	S_DF(FP), TRAIL_DIGITS(FP)
	CLRL	LEAD_DIGITS(FP)		; Yes
	CLRL	LEAD_ZERO(FP)
30$:
;+
; Format the digits in the output string.
;
; The string will be constructed as follows:
;
;	n1 blanks, where n1 is calculated
;	LEAD_DIGITS digits
;	a decimal point
;	LEAD_ZERO zeroes
;	TRAIL_DIGITS digits
;
;	The sign is inserted where appropriate.  If LEAD_DIGITS is
;	zero, an optional leading zero is inserted if there is
;	room.
;-

FORM_DIGIT:
	MOVL	STRING_ADDR(FP), R6		; Address of first digit
	MOVQ	@out_string(AP), R2		; Get string descriptor
	MOVZWL	R2, R2
	SUBL3	LEAD_DIGITS(FP), R2, R0		; Find leading blanks
	SUBL2	TRAIL_DIGITS(FP), R0
	SUBL2	S_DE(FP), R0
	SUBL2	#2, R0				; Compensate for exponent
10$:	TSTL	SIGN(FP)			; Negative?
	BGEQ	20$				; No
15$:	DECL	R0				; Use another character
20$:	DECL	R0				; For decimal point
	BGEQ	24$				; If room left
	BRW	ERROR				; No room left
24$:	MOVL	R0, R7
	BEQL	22$				; Skip if no blanks
21$:	MOVB	#^A/ /, (R3)+			; Insert leading blanks
	SOBGTR	R0, 21$				; Loop till done
22$:	TSTL	SIGN(FP)			; Negative?
	BGEQ	30$				; No
25$:	MOVB	#^A/-/, (R3)+			; Minus sign
30$:	
35$:	TSTL	R7				; Is there room?
	BLEQ	40$				; No, skip it
37$:	CMPB	-(R3), #^A/ /			; Is last char a blank?
	BEQL	38$				; Yes, dont move it
	MOVB	(R3), -1(R3)			; Move sign
38$:	MOVB	#^A/0/, (R3)+			; Insert zero
	BRB	42$
40$:	MOVC3	LEAD_DIGITS(FP), (R6), (R3)	; Move leading digits
	MOVL	R1, R6
42$:	MOVB	#^A/./, (R3)+			; Move decimal point
	MOVL	LEAD_ZERO(FP), R0		; Insert leading zeroes
	BLEQ	50$				; Skip if none
45$:	MOVB	#^A/0/, (R3)+			; Move a zero
	SOBGTR	R0, 45$				; Loop till done
50$:	MOVL	TRAIL_DIGITS(FP), R0		; Move trailing digits
	BLEQ	60$				; Skip if none
	MOVC3	R0, (R6), (R3)			; Move trailing digits
60$:


	MOVB	EXP_LETTER(FP), (R3)+	; Move exponent letter
	MOVL	R3, R4			; Save address
	CVTLP	DEC_EXP(FP), #5, PACKED(FP) ; Convert exponent
	CVTPS	#5, PACKED(FP), S_DE(FP), (R4)
	BVC	70$			; Overflow?
	INCL	S_DE(FP)		; Try another digit
	DECL	R3
	CVTPS	#5, PACKED(FP), S_DE(FP), (R3)
	BVC	70$			; No overflow
	BRW	ERROR			; Overflow
70$:	ADDL2	S_DE(FP), R3		; Move string pointer
	INCL	R3
;+
; Blank fill the remainder of the string and return to the caller.
;-
	MOVQ	@out_string(AP), R0	; Get string descriptor

FINISH:
	MOVZWL	R0, R0
	ADDL2	R0, R1			; Find last character
	SUBL2	R3, R1			; Subtract characters used
	BEQL	EXIT			; If none left, exit
	MOVC5	#0, (SP), #^A/ /, R1, (R3)	; Blank fill remainder
EXIT:	MOVL	#1, R0			; SS$_NORMAL
	RET

ERROR:
	MOVQ	@out_string(AP), R0
	MOVC5	#0, (SP), #^A/*/, R0, (R1)
	MOVL	#OTS$_FATINTERR, R0
	RET


	.END
