	.TITLE	OTS$POWCJ - COMPLEX ** INTEGER*4 power routine
	.IDENT	/1-004/		; File OTSPOWCJ.MAR  Edit: SBL1004
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;
; FACILITY: Language support library - user callable
;++
; ABSTRACT:
;
;	COMPLEX base to INTEGER*4 power.
;	Floating overflow can occur.
;	Undefined exponentiation can occur if
;	base = (0.,0.) and exp <=0
;
;--
;
; VERSION: 0
;
; HISTORY:
; AUTHOR:
;	Jonathan M. Taylor, 29-jun-77: Version 0
;
; Edit history for version 0
;

	.SBTTL	HISTORY		; Detailed Current Edit History


; Edit History for Version 0 of OTS$POWCJ
; 0-2 change MTH$$ERROR to MTH$$SIGNAL JMT 5-OCT-77
; 0-6	- Change FOR$FLAG_JACKET to MTH$FLAG_JACKET.  TNH 17-July-78
; 0-7	- Fix bug giving divide fault, or wrong results for
;	  some negative powers. Also clean up comments.
;	  SPR 20364  SBL 27-Oct-78
; 1-001	- Change version number to 1 and MTH__UNDEXP
;	   to MTH$K_UNDEXP.  JBS 07-DEC-78
; 1-002	- Add "_" to the PSECT directive.  JBS 22-DEC-78
; 1-003 - Declare externals.  SBL 17-May-1979
; 1-004 - Use general mode addressing.  SBL 30-Nov-1981

	.SBTTL	DECLARATIONS

;
; INCLUDE FILES:
;

; EXTERNAL SYMBOLS:
;

	.DSABL	GBL
	.EXTRN	MTH$$SIGNAL		; Math error routine
	.EXTRN	OTS$DIVC		; COMPLEX division routine
	.EXTRN	MTH$K_UNDEXP

;
; MACROS:
;

;
; EQUATED SYMBOLS:
;
	base = 4			; base input formal - by-value
	exp = 12			; exponent intpu formal - by-value

;
; OWN STORAGE:
;

;
; PSECT DECLARATIONS:
;

	.PSECT	_OTS$CODE PIC,SHR,LONG,EXE,NOWRT
					; program section for OTS$ code


	.SBTTL	OTS$POWCJ - COMPLEX*8 ** INTEGER*4
                                                                                ;**-1
;++
; FUNCTIONAL DESCRIPTION:
;
;	COMPLEX result = COMPLEX base ** INTEGER*4 exponent
;	The COMPLEX result is given by:
;
;	base		exponent	result
;
;	any		  >0		PRODUCT (base * 2**i) where
;					i is each non-zero bit in
;					exponent.
;
;	(0., 0.)	 <=0		Undefined exponentiation.
;
;	not (0., 0.)	  <0		PRODUCT (base * 2**i) where
;					i is each non-zero bit in
;					|exponent|.
;
;	not (0., 0.)	  =0		(1.0, 0.0)
;
;                                                                               ;**-16
;	Floating overflow can occur.
;	Undefined exponentiation occurs if base is 0 and
;	exponent is 0 or negative.
;
; CALLING SEQUENCE:
;
;	Power.wfc.v = OTS$POWCJ (base.rfc.v,  exponent.rl.v)
;
; INPUT PARAMETERS:
;	The base input parameter is standard FORTRAN COMPLEX.
;	The exponent input parameter is a signed longword integer.
;	Both input parameters are CALL BY VALUE.
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; FUNCTION VALUE:
;
;	COMPLEX base ** INTEGER*4 exponent
;
; SIDE EFFECTS:
;
;	SIGNALs SS$_ARITH with floating overflow hardware code if
;	floating overflow.
;	SIGNALs MTH$_UNDEXP (82 = ' UNDEFINED EXPONENTATION') if
;	base is 0 and exponent is 0 or negative.
;
;--

	.ENTRY	OTS$POWCJ, ^M<R2,R3,R4,R5,R6>
					; disable integer overflow
	MOVQ	base(AP), R2		; R2/R3 gets COMPLEX base
	MOVL	exp(AP), R4		; R4 = longword exponent
	BGEQ	1$			; R4 = | exponent |
	MNEGL	R4, R4
1$:	BBCC	#0, R4, EVEN		; branch if even and clear low bit
	MOVQ	R2, R0			; R0/R1 = initial result
	ROTL	#-1, R4, R4		; R4 = unsigned_exponent / 2
	BEQL	DONE			; done if exponent was 1
	BRB	SQUAR1			; else use rest of exponent

EVEN:
	MOVD	#1, R0			; R0/R1 = initial result
	ROTL	#-1, R4, R4		; R4 = unsigned_exponent / 2
	BNEQ	SQUAR1			; branch if exponent not 0
	TSTF	R2			; exponent was 0, text RP(base)
	BNEQ	DONE			; done if non-0, answer is 1.0
	TSTF	R3			; IP(base) better not be zero
	BNEQ	DONE			; it isn't return 1.0

UNDEFINED:
	ASHQ	#15, #1, R0		; return R0 = reserved operand
	MOVZBL	#MTH$K_UNDEXP, -(SP)	; FORTRAN error number
	CALLS	#1, G^MTH$$SIGNAL	; convert to 32-bit condition code
					; and SIGNAL MTH$_UNDEXP
	RET

SQUAR:
	ASHL	#-1, R4, R4		; R4 = |reduced exponent| / 2
;
; R2/R3 = square current base
;
SQUAR1:
	MULF3	R2, R3, R5		; R5 = tmp = RP(base)*IP(base)
	MULF	R2, R2			; R2 = RP(base)**2
	MULF	R3, R3			; R3 = IP(base)**2
	SUBF	R3, R2			; R2 = RP(base)**2 - IP(base)**2
	ADDF3	R5, R5, R3		; R3 = 2*RP(base)*IP(base)
	BLBC	R4, SQUAR		; branch if next exponent bit is 0
;
; R0/R1 = partial result * current power of base
;
	MULF3	R0, R3, R5		; R5 = tmp = RP(part) * IP(base)
	MULF	R2, R0			; R0 = RP(part) * RP(base)
	MULF3	R1, R3, R6		; R6 = tmp = IP(part) * IP(base)
	SUBF	R6, R0			; R0=RP(part)*RP(base)-IP(part)*IP(base)
	MULF	R2, R1			; R1 = IP(part) * RP(base)
	ADDF	R5, R1			; R1=IP(part)*RP(base)+RP(part)*IP(base)
	ASHL	#-1, R4, R4		; R4 = |reduced exponent| / 2
	BNEQ	SQUAR1			; loop if more exponent bits left
DONE:
	TSTL	exp(AP)			; test exponent sign
	BGEQ	POWCJ			; done if positive
	TSTF	R0			; test RP(result)
	BNEQ	RECIP			; if non-0, OK to take reciprocal
	TSTF	R1			; RP(result) was 0, test IP(result)     ;**-1
	BEQL	UNDEFINED		; undefined (0.0+0.0i) ** -n
RECIP:
	MOVQ	R0, -(SP)		; second arg pair is divisor
	MOVD	S^#1, -(SP)		; push (1.,0.) on stack
	CALLS	#4, G^OTS$DIVC		; R0/R1 = reciprocal
POWCJ:                                                                          ;**-3
	RET				; result in R0/R1

	.END
