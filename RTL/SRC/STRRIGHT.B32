MODULE STR$RIGHT (		! Extract a substr on the right

		IDENT = '1-013'	! File: STRRIGHT.B32	Edit: RKR1013

		 ) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY: String support library
!
! ABSTRACT:
!
!	This module extracts a substring according to the
!	BASIC-PLUS-2 syntax.  It finds the substring of a main string
!	starting at the character position specified by the input 
!	parameter and continues through the last character of the 
!	string.  This substring is copied to the destination string.
!
! ENVIRONMENT: User mode, AST level or not or mixed
!
! AUTHOR: R. Will, CREATION DATE: 19-Feb-79
!
! MODIFIED BY:
!
!  R. Will, 19-Feb-79: VERSION 01
! 1-001	- Original
! 1-002	- Change linkage and call to COPY routine. 15-mar-79
! 1-003	- Change string linkages to start with STR$.  JBS 04-JUN-1979
! 1-004	- Change call to STR$$COPY.  JBS 16-JUL-1979
! 1-006	- Define an aux variable to improve the code generated.
!	  JBS 11-OCT-1979
! 1-007 - Change name to STR$, string cleanup.  RW  31-Oct-79
! 1-008	- Change to new interlock macros.  JBS 06-NOV-1979
! 1-009 - Use string interlocks from CALL entry.  RW  15-Nov-79
! 1-010 - String speedup, remove edit 9.  RW  8-Jan-1980
! 1-011 - Enhance to recognize additonal classes of descriptors by
!	  using $STR$GET_LEN_ADDR to extract length and address of
!	  1st data byte from descriptor.  Remove all string interlocking
!	  code.	RKR 27-APR-81
! 1-012 - Speed up code.  RKR 7-OCT-1981.
! 1-013 - Use STR$COPY_R_R8 for copy operation.  Use $STR$SIGNAL_FATAL
!	  instead of $STR$CHECK_STATUS.  RKR 18-NOV-1981.
!--

!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE 
		(EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!

REQUIRE 'RTLIN:STRLNK';		! Use require file with string linkage

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    STR$RIGHT,			  ! Find the RIGHT of a str, CALL
    STR$RIGHT_R8 : STR$JSB_RIGHT; ! Find the RIGHT of a str, JSB

!
! INCLUDE FILES:
!

REQUIRE 'RTLIN:RTLPSECT';	! Declare PSECTs code

REQUIRE 'RTLIN:STRMACROS';	! use string macros to code

LIBRARY 'RTLSTARLE';		! STARLET library for macros and symbol

!
! MACROS: NONE
!

!
! EQUATED SYMBOLS: NONE
!

!
! PSECT DECLARATIONS
!

DECLARE_PSECTS (STR);

!
! OWN STORAGE: NONE
!

!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    LIB$STOP,					! signal fatal errors
    STR$COPY_R_R8 : STR$JSB_COPY_R ;		! Routine to do the copy

EXTERNAL LITERAL
    STR$_NORMAL,			! Successful completion
    STR$_ILLSTRPOS;			! pos was - or > str length

GLOBAL ROUTINE STR$RIGHT (		! Extract a substr on the right

	DEST_DESC,		! Pointer to destination descriptor
	SRC_DESC,		! Pointer to source descriptor
	CHAR_POS		! First character to be included

			 ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine extracts the characters starting at the
!	character position in the source string specified by the input
!	parameter and continuing through the last character of the 
!	source string and copies that substring
!	to the destination string (by JSB to STR$COPY_R_R8) according
!	to the syntax of the class of the destination string.
!	If the input character position is < 2 then the entire source
!	string is copied.  If the input character position is > the 
!	length of the source string, then the destination string becomes
!	a null string.  It computes the RIGHT by JSBing to the JSB entry
!	point.
!
! FORMAL PARAMETERS:
!
!	DEST_DESC.wt.dx		pointer to destination string descriptor
!	SRC_DESC.rt.dx		pointer to source string descriptor
!	CHAR_POS.rl.r		character position in source to start 
!				substring
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION CODES:
!
!	same as STR$RIGHT_R8
!
! SIDE EFFECTS:
!
!	same as STR$RIGHT_R8 since it JSBs to that routine.
!
!--

    BEGIN

    MAP
	SRC_DESC  : REF $STR$DESCRIPTOR,
	DEST_DESC : REF $STR$DESCRIPTOR;

    RETURN STR$RIGHT_R8 (DEST_DESC [0,0,0,0], 
			 SRC_DESC [0,0,0,0], 
			 ..CHAR_POS);
    END;					!End of STR$RIGHT

GLOBAL ROUTINE STR$RIGHT_R8 (		! Extract a substr on the right

	DEST_DESC,		! Pointer to destination descriptor
	SRC_DESC,		! Pointer to source descriptor
	CHAR_POS		! First character to be included

			    ) : STR$JSB_RIGHT =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine extracts the characters starting at the
!	character position in the source string specified by the input
!	parameter (where the first character in the string is at 
!	position 1) and continuing through the last character of the 
!	source string and copies that substring to the destination 
!	string (by JSB to STR$$COPY_R_R8) according
!	to the syntax of the class of the destination string.
!	If the input character position is < 2 then the entire source
!	string is copied.  If the input character position is > the 
!	length of the source string, then the destination string 
!	becomes a null string.
!
! FORMAL PARAMETERS:
!
!	DEST_DESC.wt.dx		pointer to destination string descriptor
!	SRC_DESC.rt.dx		pointer to source string descriptor
!	CHAR_POS.rl.v		character position in src to start 
!				substring
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION CODES:
!
!	SS$_NORMAL	Success
!	STR$_ILLSTRPOS	Character position reference outside of string
!	STR$_ILLSTRSPE  End pos < start pos, or length too long
!	STR$_NEGSTRLEN	Negative length supplied, 0 used
!	STR$_TRU	Truncation occured in copying to destination
!			(Warning)
!
! SIDE EFFECTS:
!
!	May signal:
!	    STR$_FATINTERR	Fatal internal error
!	    STR$_ILLSTRCLA	Illegal (or unsupported) string class
!	    STR$_INSVIRMEM	Insufficient virtual memory for
!				reallocation of dynamic string
!
!--

    BEGIN

    LOCAL
	IN_LEN,			! length of input string
	IN_ADDR,		! address of 1st data byte of input str
	RETURN_STATUS,		! keep the status of this routine
	COPY_STATUS,		! status returned from STR$COPY
	LENGTH;			! length to be copied

    MAP
	SRC_DESC  : REF $STR$DESCRIPTOR,
	DEST_DESC : REF $STR$DESCRIPTOR;

    RETURN_STATUS = 1 ;		! Assume success to follow

!+
! compute length and address of 1st data byte of input string
!-
    $STR$GET_LEN_ADDR ( SRC_DESC, IN_LEN, IN_ADDR) ;

!+
! Compute the correct substring and call the COPY routine using
! the substring length and pointer.  LENGTH is length to be skipped is
! the actual starting position (after testing for errors) - 1
! (which must be >= 0 and <= src len)
!-

    LENGTH =
	BEGIN
	IF .IN_LEN LSS .CHAR_POS - 1
	THEN
	    BEGIN
	    RETURN_STATUS = STR$_ILLSTRPOS;	! input start to big
	    .IN_LEN				! use srclen and 
						! remember error
	    END
	ELSE .CHAR_POS - 1
	END;

    IF .LENGTH LSS 0 THEN
	BEGIN
	LENGTH = 0;				! input length is 
						! negative
	RETURN_STATUS = STR$_ILLSTRPOS;		! use 0 and remember 
						! error
	END;

!+
! copy to destination descriptor for srclen - (startpos - 1) starting
! srcptr + startpos - 1
!-
    COPY_STATUS = STR$COPY_R_R8 ( .DEST_DESC, 
				  .IN_LEN - .LENGTH, 
				  CH$PLUS (.IN_ADDR, .LENGTH) );

    IF .COPY_STATUS NEQ SS$_NORMAL
    THEN RETURN_STATUS = .COPY_STATUS;	! copy truncated, return 
					! truncate
					! instead of previous status

    $STR$SIGNAL_FATAL (RETURN_STATUS);		! signal fatal errors
    RETURN .RETURN_STATUS;
    END;					!End of STR$RIGHT

END						!End of module

ELUDOM
