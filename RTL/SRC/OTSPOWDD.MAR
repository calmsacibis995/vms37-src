	.TITLE	OTS$POWDD - DOUBLE PRECISION ** DOUBLE PRECISION power routine
	.IDENT	/1-007/		; File: OTSPOWDD.MAR  Edit: SBL1007

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;
; FACILITY: Language support library - user callable
;++
; ABSTRACT:
;
;	1)  Double base to double power.
;	2)  Floating base to double power.
;	3)  Double base to floating power.
;
;	Floating overflow can occur
;	Undefined exponentiation can occur if:
;		1)  Negative base
;		2)  0 base and power is 0 or negative.
;
;
;
;--
;
; VERSION: 0
;
; HISTORY:
;
; AUTHOR:
;	Jonathan Taylor, 24-Jun-77: Version 0
;
; MODIFIED BY:
;
;
;

	.SBTTL	HISTORY		; Detailed current edit history


; Edit history for Version 0 of OTS$POWDD
;
; 0-06	- Change FOR$FLAG_JACKET to MTH$FLAG_JACKET.  TNH 17-July-78
; 0-07	- Change the other two FOR$FLAG_JACKETs to MTH$FLAG_JACKET.
;	  DGP 18-Jul-78
; 1-001	- Update version number and copyright notice.  JBS 16-NOV-78
; 1-002	- Include MTHJACKET at assembly time and change MTH__UNDEXP 
;	   to MTH$K_UNDEXP.  JBS 07-DEC-78
; 1-003	- Add "_" to the PSECT directive.  JBS 22-DEC-78
; 1-004	- Use 32-bit addresses for externals.  JBS 28-JAN-1979
; 1-005 - Declare externals.  SBL 17-May-1979
; 1-006 - Use MTH$DEXP_R6.  SBL 27-Sept-1979
; 1-007 - Use general mode addressing.  SBL 30-Nov-1981

	.SBTTL	DECLARATIONS

;
; INCLUDE FILES:
;
;	MTHJACKET			; Math jacketing macro

;
; EXTERNAL SYMBOLS:
;
	.DSABL	GBL
	.EXTRN	MTH$$SIGNAL		; Math error routine
	.EXTRN	MTH$DLOG_R8		; Double logarithm
	.EXTRN	MTH$DEXP_R6		; Double exponential
	.EXTRN	MTH$K_UNDEXP

;
; MACROS:
;

;
; EQUATED SYMBOLS:
;
	base	= 4			; base input formal - by-value
	exp	= 12			; exponent input formal - by-value
	fexp	= 8			; exponent when base is floating
					; by-value

;
; OWN STORAGE:
;

;
; PSECT DECLARATIONS:
;
	.PSECT	_OTS$CODE	PIC,SHR,LONG,EXE,NOWRT
					; program section for OTS$ code

	.SBTTL	OTS$POWDD - DOUBLE to DOUBLE giving DOUBLE result

;++
; FUNCTIONAL DESCRIPTION:
;
;	OTS$POWDR - DOUBLE result = DOUBLE base ** FLOATING exponent
;	OTS$POWRD - DOUBLE result = FLOATING base ** DOUBLE exponent
;	OTS$POWDD - DOUBLE result = DOUBLE base ** DOUBLE exponent
;
;	The DOUBLE result is given by:
;
;	base	exponent	result
;	----	--------	------
;
;	= 0	> 0		0.0
;	= 0	= 0		Undefined Exponentiation
;	= 0	< 0		Undefined Exponentiation
;
;	< 0	any		Undefined Exponentiation
;
;	> 0	> 0		EXP(exp * LOG(base))
;	> 0	= 0		1.0
;	> 0	< 0		EXP(exp * LOG(base))
;
;
;	Floating Overflow can occur.
;	Undefined Exponentiation can occur if:
;		1)  base is 0 and exponent is 0 or negative
;		2)  base is negative
;
; CALLING SEQUENCE:
;
;	power.wd.v = OTS$POWDR (base.rd.v, exponent.rf.v)
;	power.wd.v = OTS$POWRD (base.rf.v, exponent.rd.v)
;	power.wd.v = OTS$POWDD (base.rd.v, exponent.rd.v)
;
; INPUT PARAMETERS:
;	base and exponent parameters are call by value
;
; IMPLICIT INPUTS:
;	none
;
; OUTPUT PARAMETERS:
;	none
;
; IMPLICIT OUTPUTS:
;	none
;
; FUNCTIONAL VALUE:
;	OTS$POWDR - DOUBLE base ** FLOATING power
;	OTS$POWRD - FLOATING base ** DOUBLE power
;	OTS$POWDD - DOUBLE base ** DOUBLE power
;
; SIDE EFFECTS:
;
;	SIGNALs SS$_ARITH with floating overflow hardware code if
;	floating overflow.
;	SIGNALs MTH$_UNDEXP (82 = ' UNDEFINED EXPONENTIATION') if
;		1)  base is 0 and exponent is 0 or negative
;		2)  base is negative
;
;
;--

	.ENTRY	OTS$POWDR, ^M<IV,R2,R3,R4,R5,R6,R7,R8>	; enable integer overflow
	MTH$FLAG_JACKET			; establish math error handler
	CVTFD	exp(AP), R2		; convert FLOATING exponent to DOUBLE
	BRB	COMDB			; and merge for common DOUBLE base






	.ENTRY	OTS$POWRD, ^M<IV,R2,R3,R4,R5,R6,R7,R8> ; enable integer overflow
	MTH$FLAG_JACKET			; establish math error handler
	MOVD	fexp(AP), R2		; R2/R3 = DOUBLE exponent
	CVTFD	base(AP), R0		; R0/R1 = converted FLOATING base
	BRB	COM			; and merge with common code

	.ENTRY	OTS$POWDD, ^M<IV,R2,R3,R4,R5,R6,R7,R8> ; enable integer overflow
	MTH$FLAG_JACKET			; establish math error handler
	MOVD	exp(AP), R2		; R2/R3 = DOUBLE exponent
COMDB:
	MOVD	base(AP), R0		; R0/R1 = DOUBLE base
COM:
	BEQL	ZERO			; special case 0 ** n
	BLSS	ERR			; negative base is an error
	TSTD	R2			; test the exponent
	BEQL	ONE			; special case n ** 0
	MOVD	R2, -(SP)		; save exponent (R2/R3) across call
	JSB	G^MTH$DLOG_R8		; R0/R1 = LOG(base)
	MULD	(SP)+, R0		; R0/R1 = exp * LOG(base)
	JSB	G^MTH$DEXP_R6		; R0/R1 = EXP(exp * LOG(base))
	RET				; function value returned in R0/R1

ONE:
	MOVD	#1, R0			; answer is one
	RET				; returned in R0/R1

ZERO:
	CLRD	R0			; answer is zero
	TSTD	R2			; test the exponent (R2/R3)
	BGTR	RETURN			; return if positive exponent
ERR:
	ASHQ	#15, #1, R0		; R0/R1 = undefined operand
	MOVZBL	#MTH$K_UNDEXP, -(SP)	; FORTRAN error number
	CALLS	#1, G^MTH$$SIGNAL	; convert to 32-bit condition code
					; and SIGNAL MTH$UNDEXP
RETURN:
	RET				; return function value in R0/R1

	.END
