	.TITLE	OTS$CVTTOL	; Convert text to integer
	.IDENT	/1-003/		; File: OTSCVTTOL.MAR  Edit: SBL1003

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;
; FACILITY:  Language independent support library
;++
; ABSTRACT:
;
; This module contains routines to convert text representations of
; integers to longword (or other) values.  The text can be in 
; hexadecimal, octal or binary bases. 
;
;--
;
; VERSION 1
;
; HISTORY:
;
; AUTHOR: 
;	Steven B. Lionel, 21-Feb-1979: Version 1
;
; MODIFIED BY:
;

	.SBTTL	HISTORY


; Edit History for OTS$CVT_TO_L
;
; 1-001 - Original.  Complete rewrite replacing FOR$CNV_IN_O and
;	  FOR$CNV_IN_Z.  SBL 21-Feb-1979
; 1-002 - Add OTS$CVT_TB_L.  SBL 6-Nov-1980
; 1-003 - Fix undetected overflow bug.  SBL 4-Jan-1982

	.SBTTL	DECLARATIONS

;
; INCLUDE FILES: None
;

;
; EXTERNAL SYMBOLS:
;
	.DSABL	GBL			; Prevent undefineds from being
					; global.
	.EXTRN	OTS$_INPCONERR		; Input conversion error

;
; MACROS: None
;

;
; PSECT DECLARATIONS:
;
	.PSECT	_OTS$CODE	PIC,SHR,LONG,EXE,NOWRT

;
; EQUATED SYMBOLS: 
;
	REGMASK	= ^M<IV,R2,R3,R4,R5,R6>	; Register save mask

;
; OWN STORAGE:
;

TABLE:					; Converts characters to value
	.BYTE	0			; "0"
	.BYTE	1			; "1"
	.BYTE	2			; "2"
	.BYTE	3			; "3"
	.BYTE	4			; "4"
	.BYTE	5			; "5"
	.BYTE	6			; "6"
	.BYTE	7			; "7"
	.BYTE	8			; "8"
	.BYTE	9			; "9"
	.BYTE	-1			; invalid character
	.BYTE	-1			; invalid character
	.BYTE	-1			; invalid character
	.BYTE	-1			; invalid character
	.BYTE	-1			; invalid character
	.BYTE	-1			; invalid character
	.BYTE	-1			; invalid character
	.BYTE	10			; "A"
	.BYTE	11			; "B"
	.BYTE	12			; "C"
	.BYTE	13			; "D"
	.BYTE	14			; "E"
	.BYTE	15			; "F"


	.SBTTL	OTS$CVT_TO_L - Convert text (octal) to long

;++
; FUNCTIONAL DESCRIPTION:
;
;	Converts a text representation of a base 8 value to internal
;	form.  The usual result of this routine is one longword, but
;	values of any length (that is a multiple of 8 bits) may be
;	produced.
;
;	The valid characters for base 8 conversion are -space- and
;	"0" through "7".  No sign is permitted.
;
;	For compatibility with previous releases, the name
;	FOR$CNV_IN_O is equivalent to OTS$CVT_TO_L.
;
;
; CALLING SEQUENCE:
;
;	status.wlc.v = OTS$CVT_TO_L (in_string.rt.ds, value.wx.r 
;				     [, byte_count.rl.v
;				     [, caller_flags.rl.v]]
;
; INPUT PARAMETERS:
;
	in_string	= 4		; Input string by descriptor
	byte_count	= 12		; Optional count of bytes in
					; value, defaults to 4 if
					; omitted or zero.
	caller_flags	= 16		; Optional. 
	    V_BN	= 0		; If set, blanks are ignored;
					; otherwise blanks are zeroes.
;
; IMPLICIT INPUTS: None
;
; OUTPUT PARAMETERS:
;
	value		= 8		; Output value by reference.
					; Length is dependent on
					; byte_count.
;
; IMPLICIT OUTPUTS: None
;
; COMPLETION CODES:
;
;	SS$_NORMAL	- Successful completion
;	OTS$_INPCONERR	- Input conversion error.  Either an illegal
;			  character or overflow happened.
;
; SIDE EFFECTS: None
;
;--


FOR$CNV_IN_O::				; For compatibility
	.ENTRY	OTS$CVT_TO_L, REGMASK

	BSBW	SETUP			; Get parameters and set up
					; registers.
10$:	BSBW	GET_CHAR		; Get a character
	BLSS	EXIT_O			; Exit if done
	BEQL	20$			; Skip if zero
	CMPB	R0, #8			; Invalid character?
	BGEQ	ERROR_O			; If so, error
	CMPL	R6, #3			; Is there room for this digit?
	BGEQ	15$			; Yes
	CMPL	R6, #1			; 0, 1 or 2 bits left?
	BLSS	ERROR_O			; 0 or less is error
	BGTR	12$			; 2 bits
	CMPB	R0, #1			; 1 bit - digit 1?
	BGTR	ERROR_O			; No, error
	INSV	R0, R4, #1, (R3)	; Insert bit
	BRB	20$			; Continue
12$:	CMPB	R0, #3			; 2 bits -less than 4?
	BGTR	ERROR_O			; No, error
	INSV	R0, R4, #2, (R3)	; Insert bits
	BRB	20$			; Continue
15$:	INSV	R0, R4, #3, (R3)	; Insert bits
20$:	ADDL	#3, R4			; Increment bit position
	SUBL	#3, R6			; Decrement bit counter
	BRB	10$			; Loop back for more digits

EXIT_O:
	BRW	EXIT

ERROR_O:
	BRW	ERROR


	.SBTTL	OTS$CVT_TZ_L	 - Convert text (hex) to long

;++
; FUNCTIONAL DESCRIPTION:
;
;	Converts a text representation of a base 16 value to internal
;	form.  The usual result of this routine is one longword, but
;	values of any length (that is a multiple of 8 bits) may be
;	produced.
;
;	The valid characters for base 16 conversion are -space-,
;	"0" through "9" and "A" through "F".  No sign is permitted.
;	Lower case "a" through "f" are acceptible.
;
;	For compatibility with previous releases, the name
;	FOR$CNV_IN_Z is equivalent to OTS$CVT_TZ_L.
;
;
; CALLING SEQUENCE:
;
;	status.wlc.v = OTS$CVT_TZ_L (in_string.rt.ds, value.wx.r 
;				     [, byte_count.rl.v
;				     [, caller_flags.rl.v]]
;
; INPUT PARAMETERS:
;
	in_string	= 4		; Input string by descriptor
	byte_count	= 12		; Optional count of bytes in
					; value, defaults to 4 if
					; omitted or zero.
	caller_flags	= 16		; Optional. 
	    V_BN	= 0		; If set, blanks are ignored;
					; otherwise blanks are zeroes.
;
; IMPLICIT INPUTS: None
;
; OUTPUT PARAMETERS:
;
	value		= 8		; Output value by reference.
					; Length is dependent on
					; byte_count.
;
; IMPLICIT OUTPUTS: None
;
; COMPLETION CODES:
;
;	SS$_NORMAL	- Successful completion
;	OTS$_INPCONERR	- Input conversion error.  Either an illegal
;			  character or overflow happened.
;
; SIDE EFFECTS: None
;
;--


FOR$CNV_IN_Z::				; For compatibility
	.ENTRY	OTS$CVT_TZ_L, REGMASK

	BSBW	SETUP			; Get parameters and set up
					; registers.
10$:	BSBW	GET_CHAR		; Get a character
	BLSS	EXIT_Z			; Exit if done
	BEQL	20$			; Skip if zero
	TSTL	R6			; Is there room for this digit?
	BLEQ	ERROR_Z			; No, must be multiple of 4!
	INSV	R0, R4, #4, (R3)	; Insert bits
20$:	ADDL	#4, R4			; Increment bit position
	SUBL	#4, R6			; Decrement bit counter
	BRB	10$			; Loop back for more digits

EXIT_Z:
	BRW	EXIT

ERROR_Z:
	BRW	ERROR


	.SBTTL	OTS$CVT_TB_L	 - Convert text (binary) to long

;++
; FUNCTIONAL DESCRIPTION:
;
;	Converts a text representation of a base 2 value to internal
;	form.  The usual result of this routine is one longword, but
;	values of any length (that is a multiple of 8 bits) may be
;	produced.
;
;	The valid characters for base 2 conversion are -space-,
;	"0" and "1".  No sign is permitted.
;
; CALLING SEQUENCE:
;
;	status.wlc.v = OTS$CVT_TB_L (in_string.rt.ds, value.wx.r 
;				     [, byte_count.rl.v
;				     [, caller_flags.rl.v]]
;
; INPUT PARAMETERS:
;
	in_string	= 4		; Input string by descriptor
	byte_count	= 12		; Optional count of bytes in
					; value, defaults to 4 if
					; omitted or zero.
	caller_flags	= 16		; Optional. 
	    V_BN	= 0		; If set, blanks are ignored;
					; otherwise blanks are zeroes.
;
; IMPLICIT INPUTS: None
;
; OUTPUT PARAMETERS:
;
	value		= 8		; Output value by reference.
					; Length is dependent on
					; byte_count.
;
; IMPLICIT OUTPUTS: None
;
; COMPLETION CODES:
;
;	SS$_NORMAL	- Successful completion
;	OTS$_INPCONERR	- Input conversion error.  Either an illegal
;			  character or overflow happened.
;
; SIDE EFFECTS: None
;
;--


	.ENTRY	OTS$CVT_TB_L, REGMASK

	BSBW	SETUP			; Get parameters and set up
					; registers.
10$:	BSBW	GET_CHAR		; Get a character
	BLSS	EXIT_B			; Exit if done
	BEQL	20$			; Skip if zero
	CMPL	R0, #1			; Illegal character?
	BGTR	ERROR_B			; Yes
	TSTL	R6			; Is there room for this digit?
	BLEQ	ERROR_B			; No.
	INSV	R0, R4, #1, (R3)	; Insert bit
20$:	INCL	R4			; Increment bit position
	DECL	R6			; Decrement bit counter
	BRB	10$			; Loop back for more digits

EXIT_B:
	BRW	EXIT

ERROR_B:
	BRW	ERROR


	.SBTTL	Local Subroutines

;+
; EXIT - Exit successfully
;-

EXIT:
	MOVL	#1, R0			; Success status code
	RET				; Return

;+
; ERROR - Exit with error
;-

ERROR:
	BSBW	SETUP			; To re-zero the value
	MOVL	#OTS$_INPCONERR, R0	; Error code
	RET				; Return with failure



;+
; SETUP - Perform common initialization
;
;   1.   Determine if optional parameters are present.  Set defaults
;	 if any.
;   2.	 Zero the value.
;   3.	 Set up registers as follows:
;		R1 - Count of characters in string.
;		R2 - Points to one byte beyond string.
;		R3 - Address of value.
;		R4 - Set to zero, indicates current value bit offset.
;		R5 - Flag register, set to value of caller_flags.
;		R6 - Count of bits in value.
;-

SETUP:
	MOVL	#4, R6			; Initial size is 1 longword
	CMPB	(AP), #<byte_count/4>	; Is byte count present?
	BLSS	10$			; No
	TSTL	byte_count(AP)		; Is it zero?
	BLEQ	10$			; Yes (or neg), use default
	MOVL	byte_count(AP), R6	; Get byte count
10$:	MOVL	value(AP), R0		; Get value address
	MOVC5	#0, (SP), #0, R6, (R0)	; Fill with zero
					; R5 gets zero
	ASHL	#3, R6, R6		; R6 gets bit count
	MOVQ	@in_string(AP), R1	; R1 gets character count
					; R2 gets pointer
	MOVZWL	R1, R1			; Clear all but count
	ADDL	R1, R2			; Position pointer to 1 beyond
					; last character.
	MOVL	value(AP), R3		; Value address
	CLRL	R4			; Bit offset
	CMPB	(AP), #<caller_flags/4>	; Are caller_flags present?
	BLSS	20$			; No
	MOVL	caller_flags(AP), R5	; Set up caller flags
20$:	RSB				; Return

;++
; GET_CHAR - Get a character
;
;     Looks at the next character in the input string, right to
;     left.  If V_BN is set and character is a blank, it is ignored
;     and another character is read.  If V_BN is not set and the
;     character is a blank, it is converted to zero.
;
;     The character is translated to an actual value from 0 to 15.
;     If the character is not 0-9 or A-F, it branches to ERROR.
;
;     The value obtained is moved to R0.  If no characters remain,
;     R0 is set to -1.  Upon exit, the condition codes are set such
;     that branches depending on the value in R0 can be made.
;--

GET_CHAR:
	TSTL	R1			; Any characters left?
	BLEQ	EOS			; No, exit with -1
	MOVB	-(R2), R0		; Put character in R0
	DECL	R1			; Decrement count
	CMPB	R0, #^A/ /		; Is it a blank?
	BNEQ	10$			; No if not equal
	BBS	#V_BN, R5, GET_CHAR	; Ignore if V_BN set
	CLRL	R0			; Blanks are zero
	RSB				; Exit with zero
10$:	SUBL	#^A/0/, R0		; Subtract "0"
	BLSS	ERROR_G			; Error if neg
	CMPB	R0, #<^A/F/-^A/0/>	; Greater than "F"?
	BLEQ	20$			; Ok if not greater
	SUBL	#<^A/a/-^A/A/>, R0	; Try lower case
	BLSS	ERROR_G			; Error if between "F" and "P"
	CMPB	R0, #<^A/A/-^A/0/>	; In between "O" and "a"?
	BLSS	ERROR_G			; Yes, error
	CMPL	R0, #<^A/F/-^A/0/>	; Greater than "f"?
	BGTR	ERROR_G			; Yes, error
20$:	MOVB	TABLE[R0], R0		; Get actual value
	BLSS	ERROR_G			; Error if negative
	RSB				; Exit with condition codes set

EOS:
	MNEGL	#1, R0			; End of string
	RSB				; Exit

ERROR_G:
	BRW	ERROR			; Illegal character


	.END
