%TITLE	'LIB$BINARY_TREE - Subroutines to manipulate balanced binary trees'
MODULE LIB$BINARY_TREE (			! 
		IDENT = '1-001'			! File: LIBBINTRE.B32 Edit: BLS1001
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	General Utility Library
!
! ABSTRACT:
!
!	These procedures allow easy manipulation of balanced binary trees
!
! ENVIRONMENT:	Runs at any access mode - AST reentrant
!
! AUTHOR: Benn L. Schreiber, CREATION DATE: 08-May-1981
!
! MODIFIED BY:
!
! 1-001	- Original.  BLS 08-May-1981
!--


%SBTTL 'Declarations'
!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!

LINKAGE
    jsb_insert = JSB :				!Linkage for INSERT_NODE
		GLOBAL (currentnode = 11,
			keyname = 10,
			compare_routine = 9,
			alloc_routine = 8,
			blockretadr = 7,
			foundintree = 6,
			controlflags = 5,
			user_context = 4)
		PRESERVE (2,3),

    jsb_traverse = JSB (REGISTER = 0) :		!Linkage for traverse
		GLOBAL (action_routine = 11,
			user_context = 10)
		NOTUSED (2,3,4,5,6,7,8,9);

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    insert_node : jsb_insert,			!Insert node into tree
    lib$insert_tree,				!Entry point to insert node
    lib$lookup_tree,				!Entry point to lookup node
    traverse_tree : jsb_traverse,		!Internal routine to insert into tree
    lib$traverse_tree;				!Entry point to traverse tree

!
! INCLUDE FILES:
!

LIBRARY 'RTLSTARLE';				! System symbols, typically from SYS$LIBRARY:STARLET.L32

REQUIRE 'RTLIN:RTLPSECT';			! Define PSECT declarations macros

!
! MACROS:
!

MACRO
    !
    ! Define offsets in basic node
    !
    NODE$L_LEFT	= 0,0,32,0%,			!Left subtree pointer
    NODE$L_RIGHT = 4,0,32,0%,			!Right subtree pointer
    NODE$W_BAL = 8,0,16,1%,			!Current node balance
    NODE$L_PTR = 10,0,32,0%,			!Pointer to user data
    !
    ! Define flags in control_flags argument to lib$insert_tree
    !
    TREE$V_INS_DUP = 0,0,1,0%;			!Insert duplicates

!
! EQUATED SYMBOLS:
!

LITERAL
    true = 1,					!Success
    false = 0;					!Failure

!
! FIELDS:
!
!	NONE
!
! PSECTS:
!

DECLARE_PSECTS (LIB);				! Declare PSECTs for LIB$ facility

!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL LITERAL
    lib$_normal,				!Success
    lib$_keyalrins,				!Key already inserted--not reinserted
    lib$_keynotfou,				!Key not found
    lib$_insvirmem;				!Insufficient virtual memory

%SBTTL 'Data Structure Description'
!++
! A node is structured as follows:
!
!	!-----------------------!
!	!  Left link		!	(4 bytes)
!	!-----------------------!
!	!  Right link		!	(4 bytes)
!	!-----------------------!
!	! Your data ! Balance   !	(2 bytes)
!	!	    !-----------!
!	!    .			!
!	!    .			!
!	!    .			!
!	!-----------------------!
!
! Therefore, any data structures you declare that will be
! manipulated by these routines must contain 10 bytes of
! reserved data at the beginning for the binary tree routines.
!
! These routines can be used for data allocated in one of two ways:
!
! 1) The node (described above) is followed immediately by your data.
!	In this case your allocation routine must allocate a block
!	equal in size to the sum of your data + 10 node bytes.
!
! 2) The node which is allocated contains the data described above
!	and a longword pointer to your data.  This is useful if
!	some data must be entered into two or more tables
!	simultaneously.  The user_data argument passed to lib$insert_tree
!	should be the address of the data, which will be passed to
!	your compare and allocated routines.  The allocate routine
!	simply stores this user_data in the field of the allocated
!	node.
!
!--

%SBTTL	'INSERT_NODE - insert node into balanced tree'
ROUTINE insert_node : jsb_insert =
BEGIN
!
! Recursive routine to insert the new node into the tree
!
! IMPLICIT INPUTS:
!
!	currentnode	Current node in tree walk
!	keyname		Address of key
!	compare_routine	Address of routine to compare key with current node
!	alloc_routine	Address of routine to allocate new node
!	blockretadr	Address to return allocated node
!
! ROUTINE VALUE:
!
!	true [=1]	Tree is balanced
!	false [=0]	Tree not balanced
!
LOCAL
    down_left : REF BLOCK[,BYTE],				!Pointer to left son
    down_right : REF BLOCK[,BYTE],				!Pointer to right son
    save_current : REF BLOCK[,BYTE],				!Temp to save currentnode
    status,							!Return status from calls
    in_balance;							!True if subtree in balance

EXTERNAL REGISTER
    currentnode = 11 : REF BLOCK[,BYTE],			!Pointer to current node
    keyname = 10 : REF VECTOR[,BYTE],				!Pointer to new key
    compare_routine = 9,					!Address of caller's compare routine
    alloc_routine = 8,						!Address of caller's allocate node routine
    blockretadr = 7 : REF VECTOR[,LONG],			!Address to return result to caller
    foundintree = 6,						!True if entry found in tree, false if inserted
    controlflags = 5 : BLOCK[4,BYTE],				!User control flags
    user_context = 4;						!User context to pass to allocate node and compare routines

!
! Check for bottom of tree
!
IF .currentnode EQL 0
THEN BEGIN
    IF NOT (.alloc_routine) (.keyname,save_current,.user_context)	!Allocate a node
	THEN RETURN (foundintree = lib$_insvirmem);			! returning an error if no memory is available
    currentnode = .save_current;					!Set it as the current node
    currentnode[node$l_left] = 0;					!Initialize the node pointers
    currentnode[node$l_right] = 0;
    currentnode[node$w_bal] = 0;					!  and the node balance
    blockretadr[0] = .currentnode;					!Return address to caller
    RETURN false							!Return tree not balanced
    END;
!
! Check if key is to the left or right subtree
!
save_current = .currentnode;						!Save address of current node
IF (in_balance = (.compare_routine)(.keyname,.currentnode,		!Call caller's compare routine
						.user_context)) LEQ 0
THEN BEGIN
    !
    ! Insert the node into the left subtree
    !
    IF .in_balance EQL 0						!First check if this is really it
	AND NOT .controlflags[tree$v_ins_dup]				!  and that duplicates are not to be inserted
    THEN BEGIN
	!
	! We found a match in the table, and caller requested that
	!  duplicates are not to be inserted
	!
	blockretadr[0] = .currentnode;					! and if it is return to caller
	RETURN (foundintree = lib$_keyalrins)
	END;
    currentnode = .currentnode[node$l_left];				!Insert into left subtree
    in_balance = insert_node();						!Recurse to insert
    IF (.foundintree EQL lib$_keyalrins)				!If we found it
	OR (.foundintree EQL lib$_insvirmem)
	THEN RETURN true;						! then we are done
    down_left = .currentnode;						!Save address of new subtree
    currentnode = .save_current;					!Return to father node
    currentnode[node$l_left] = .down_left;				!Father points to new left subtree
    IF .in_balance							!If tree is in balance
    THEN RETURN true							! then all done, return true
    ELSE BEGIN
	!
	! The left subtree has grown higher, restore balance
	!
	currentnode[node$w_bal] = .currentnode[node$w_bal] - 1;		!Perform left shift of tree
	IF .currentnode[node$w_bal]  EQL 0 				! If in perfect balance
	THEN RETURN true						!  then return in balance
	ELSE BEGIN
	    IF .currentnode[node$w_bal]					!Exit if AVL balanced
		THEN RETURN false;					! Return tree not in balance
	    down_left = .currentnode[node$l_left];			!Get left subtree
	    IF .down_left[node$w_bal] LSS 0				!Test balance of left subtree
	    THEN BEGIN
		!
		! Perform single LL rotation
		!
		currentnode[node$l_left] = .down_left[node$l_right];
		down_left[node$l_right] = .currentnode;
		currentnode[node$w_bal] = 0;				!Mark in balance
		currentnode = .down_left;				!Set new root of subtree
		currentnode[node$w_bal] = 0;				!Mark in balance
		RETURN true						!Return tree in balance
		END
	    ELSE BEGIN
		!
		! Perform double LR rotation
		!
		down_right = .down_left[node$l_right];			!Get right son of left subtree
		down_left[node$l_right] = .down_right[node$l_left];
		down_right[node$l_left] = .down_left;
		currentnode[node$l_left] = .down_right[node$l_right];
		down_right[node$l_right] = .currentnode;
		currentnode[node$w_bal] = 0;				!Initialize to balanced
		down_left[node$w_bal] = 0;
		IF .down_right[node$w_bal] GTR 0			!Check balance of new subtree
		    THEN down_left[node$w_bal] = -1			! Mark left side heavy
		    ELSE IF .down_right[node$w_bal] LSS 0
			THEN currentnode[node$w_bal] = 1;		! Mark left side heavy
		currentnode = .down_right;				!Set new root of subtree
		currentnode[node$w_bal] = 0;				!Mark in balance
		RETURN true						!Return tree in balance
		END
	    END
	END
    END
!
! Insert node into the right subtree
!
ELSE BEGIN
    currentnode = .currentnode[node$l_right];				!Insert into right subtree
    in_balance = insert_node();						!Insert the node
    IF (.foundintree EQL lib$_keyalrins)				!If we found it
	OR (.foundintree EQL lib$_insvirmem)
	THEN RETURN true;						! then we are done
    down_right = .currentnode;						!Save address of new subtree
    currentnode = .save_current;					!Restore father
    currentnode[node$l_right] = .down_right;				!Father points to new right subtree
    IF .in_balance							!If tree is balanced
    THEN RETURN true							! Then return so
    ELSE BEGIN
	!
	! The right subtree has grown higher -- restore balance
	!
	currentnode[node$w_bal] = .currentnode[node$w_bal] + 1;		!Perform right shift of tree
	IF .currentnode[node$w_bal] EQL 0
	    THEN RETURN true;						!Return in balance
	IF .currentnode[node$w_bal]					!Exit if AVL balanced
	    THEN RETURN false;						!But mark not in balance
	down_right = .currentnode[node$l_right];			!Get pointer to right subtree
	IF .down_right[node$w_bal] GTR 0				!Test balance on that side
	THEN BEGIN
	    !
	    ! Perform single RR rotation
	    !
	    currentnode[node$l_right] = .down_right[node$l_left];
	    down_right[node$l_left] = .currentnode;
	    currentnode[node$w_bal] = 0;				!Mark in balance
	    currentnode = .down_right;					!Set new root of subtree
	    currentnode[node$w_bal] = 0;				!Mark in balance
	    RETURN true							!Return tree in balance
	    END
	ELSE BEGIN
	    !
	    ! Perform double RL rotation
	    !
	    down_left = .down_right[node$l_left];			!Get left son of right subtree
	    down_right[node$l_left] = .down_left[node$l_right];
	    down_left[node$l_right] = .down_right;
	    currentnode[node$l_right] = .down_left[node$l_left];
	    down_left[node$l_left] = .currentnode;
	    currentnode[node$w_bal] = 0;				!Initialize balance indicators
	    down_right[node$w_bal] = 0;
	    IF .down_left[node$w_bal] LSS 0				!Check balance of new subtree
		THEN down_right[node$w_bal] = 1				!Mark right side heavy
		ELSE IF .down_left[node$w_bal] GTR 0
		    THEN currentnode[node$w_bal] = -1;			!Mark left side heavy
	    currentnode = .down_left;					!Set new subtree
	    currentnode[node$w_bal] = 0;				!Mark subtree in balance
	    RETURN true							!Return tree in balance
	    END
    	END
    END;

END;									!Of insert_node

%SBTTL	'LIB$INSERT_TREE - User entry to insert in tree'
GLOBAL ROUTINE lib$insert_tree (treehead, symbolstring, control_flags,
				compare_rtn, alloc_rtn, blockaddr, user_data) =
BEGIN
!
! This routine adds an entry to a balanced binary tree
!
! INPUTS:
!
!	treehead	Address of listhead of tree
!	symbolstring	Address of name of thing to insert (this is simply passed along to the compare
!				and allocation routines--the binary tree routines do not inspect this argument)
!	control_flags	Address of control flags longword
!			Bit 0 (tree$v_ins_dup)	set ==> insert duplicate entries
!						clear ==> return address of existing entry if duplicate
!	compare_rtn	Address of routine to do compare.  Called via CALLS with
!			three arguments.  4(AP)=Address of key, 8(AP)=Address of
!			current node to compare with, 12(AP) =user_data argument
!	alloc_rtn	Address of routine to allocate new node.  Called via CALLS
!			with three arguments. 4(AP)=Address of key, 8(AP)=Address
!			of location to return allocated block address, 12(AP) = user_data argument
!			or 0 if none supplied
!	user_data	OPTIONAL - Longword of context to pass to allocation
!			routine.
!
! OUTPUTS:
!
!	blockaddr	Returns address of new (or found) entry
!
! ROUTINE VALUE:
!
!	lib$_normal	key inserted (success status)
!	lib$_keyalrins	key found in tree, not inserted (alternate success status)
!	lib$_insvirmem	allocation routine returned an error (error status)
!
MAP
    treehead : REF VECTOR[,LONG],
    control_flags : REF VECTOR[,LONG];

GLOBAL REGISTER
    currentnode = 11 : REF BLOCK[,BYTE],			!Pointer to current node
    keyname = 10 : REF VECTOR[,BYTE],				!Address of key to insert
    compare_routine = 9,					!Address of caller's compare routine
    alloc_routine = 8,						!Address of user's allocate node routine
    blockretadr = 7 : REF VECTOR[,LONG],			!Address to return result address
    foundintree = 6,						!True if found in tree, false if inserted
    controlflags = 5 : BLOCK[4,BYTE],				!Caller control flags
    user_context = 4;						!Caller context

BUILTIN
    NULLPARAMETER;

!
! Initialize registers
!
currentnode = .treehead[0];						!Get head of tree
keyname = .symbolstring;						!Point to key
compare_routine = .compare_rtn;						!Set address of compare routine
alloc_routine = .alloc_rtn;						!Set address of allocation routine
blockretadr = .blockaddr;						!Set address to return result in
foundintree = lib$_normal;						!Assume will not find in tree
controlflags = .control_flags[0];					!Pick up the caller's control flags
IF NOT NULLPARAMETER(7)							!If user_data argument supplied
    THEN user_context = .user_data					! then use it
    ELSE user_context = 0;						!  otherwise default to 0
!
! Call recursive routine to insert node into tree
!
insert_node();								!Insert new node into tree

IF .foundintree EQL lib$_normal						!If we inserted the node
    THEN treehead[0] = .currentnode;					!    then set new root of tree

RETURN .foundintree							!Return state of entry insert
END;						! End of routine LIB$INSERT_TREE

%SBTTL	'LIB$LOOKUP_TREE - User entry to lookup in tree'
GLOBAL ROUTINE lib$lookup_tree (treehead, symbolstring,
				compare_rtn,  blockaddr) =
BEGIN
!
! This routine adds an entry to a balanced binary tree
!
! INPUTS:
!
!	treehead	Address of listhead of tree
!	symbolstring	Address of ASCIC symbol name
!	compare_rtn	Address of routine to do compare.  Called via JSB with
!			two arguments.  R0=Address of key, R1=Address of
!			current node to compare with.
!
! OUTPUTS:
!
!	blockaddr	Returns address of new (or found) entry
!
! ROUTINE VALUE:
!
!	lib$_normal	key found (success status)
!	lib$_keynotfou	key not found (error status)
!
MAP
    treehead : REF VECTOR[,LONG],
    blockaddr : REF VECTOR[,LONG];

LOCAL
    ch_result;

GLOBAL REGISTER
    currentnode = 11 : REF BLOCK[,BYTE],				!Address of current node
    keyname = 10 : REF VECTOR[,BYTE],					!Address of key
    compare_routine = 9;						!Caller's compare routine

!
! Initialize registers
!
currentnode = .treehead[0];						!Get head of tree
keyname = .symbolstring;						!Point at key to lookup
compare_routine = .compare_rtn;						!Get caller compare routine address
!
! Search symbol table to see if already in table
!
WHILE .currentnode NEQ 0						!While there is a node to examine
DO IF (ch_result =							!Compare key with current node
		(.compare_routine)(.keyname,.currentnode)) EQL 0
    THEN BEGIN
	!
	! Found -- return address to caller
	!
	blockaddr[0] = .currentnode;
	RETURN lib$_normal
	END
    ELSE IF .ch_result LSS 0						!Test if left or right branch
	    THEN currentnode = .currentnode[node$l_left]
	    ELSE currentnode = .currentnode[node$l_right];

RETURN lib$_keynotfou							!Return entry not found
END;						! End of routine LIB$LOOKUP_TREE

%SBTTL 'traverse_tree - Internal routine to traverse the tree'
ROUTINE traverse_tree (currentnode) : jsb_traverse =
BEGIN
!
! Internal routine to traverse the tree recursively
!
! INPUTS:
!
!	currentnode	Address of current node
!
MAP
    currentnode : REF BLOCK[,BYTE];

EXTERNAL REGISTER
    action_routine = 11,					!Address of user routine to call
    user_context = 10;						!User_data argument

LOCAL
    status,
    right_subtree  : REF BLOCK[,BYTE];

IF .currentnode EQL 0						!If current node null
    THEN RETURN lib$_normal;					!  then simply return

IF .currentnode[node$l_left] NEQ 0				!Process the left subtree if it exists
    THEN IF NOT (status = traverse_tree(.currentnode[node$l_left]))
	THEN RETURN .status;

right_subtree = .currentnode[node$l_right];			!Get pointer to right subtree

IF NOT (status = (.action_routine)(.currentnode, .user_context))!Call user routine for current node
    THEN RETURN .status;

IF .right_subtree NEQ 0						!Process the right subtree if it exists
    THEN IF NOT (status = traverse_tree(.right_subtree))
	THEN RETURN .status;

RETURN lib$_normal

END;								!Of traverse_tree

%SBTTL	'LIB$TRAVERSE_TREE - traverse binary tree'
GLOBAL ROUTINE lib$traverse_tree (treehead, action_rtn, user_data) =
BEGIN
!
! This routine calls a routine for each node in the tree (in order)
!
! INPUTS:
!
!	treehead	Address of listhead of tree
!	action_rtn	Address of action routine to call
!			Called with 2 args. 4(AP) = node address,
!			8(AP) = user_data argument
!	user_data	OPTIONAL - longword of context passed to action routine
!
! ROUTINE VALUE:
!
!	lib$_normal	Traversal completed successfully
!	any other status Code returned by action routine
!--

MAP
    treehead : REF VECTOR[,LONG];

GLOBAL REGISTER
    action_routine = 11,			!Keep address of routine in a register
    user_context = 10;

BUILTIN
    NULLPARAMETER;

action_routine = .action_rtn;			!Set action routine address
IF NULLPARAMETER(3)
    THEN user_context = 0			!Send a 0 if not specified
    ELSE user_context = .user_data;		!Pick up user_data

RETURN traverse_tree (.treehead[0])		!Call routine to traverse the tree recursively

END;						! End of routine LIB$TRAVERSE_TREE

END						! End of module LIB$BINARY_TREE

ELUDOM
