MODULE STR$COMPARE_EQL (	! Compare 2 strings-contents and length

		IDENT = '1-005'	! File: STRCOMEQL.B32 Edit RKR1005

		       ) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY: String support library
!
! ABSTRACT: This module takes 2 input strings of any supported class 
! and dtype and returns a 0 if string1 is the same as string2 in both 
! length and contents and a 1 otherwise
!
! ENVIRONMENT: User mode, AST level or not or mixed
!
! AUTHOR: R. Will, CREATION DATE: 26-Mar-79
!
! MODIFIED BY:
!
! R. Will, 26-Mar-79 : VERSION 01
! 1-001	- Original
! 1-002 - String cleanup, change name to STR$COMEQL.  RW  5-Nov-79
! 1-003 - Make routine sensitive to additional classes of string
!	  descriptors by using $STR$GET_LEN_ADDR to extract length and
!	  starting addresses from descriptors.  Remove string
!	  interlocking code.  RKR 13-APR-81
! 1-004 - Speed up code. RKR 13-OCT-1981.
! 1-005 - Use SWITCHES ZIP to avoid some of the cross-jumping code
!	  that would normally get generated this module.
!	  RKR 18-NOV-1981.
!--
!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE 
		(EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

SWITCHES ZIP ;
!
! LINKAGES
!
REQUIRE 'RTLIN:STRLNK';		! Linkage to LIB$ANALYZE_DESC_R3

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    STR$COMPARE_EQL;	! compare 2 strings, same length and contents

!
! INCLUDE FILES:
!

REQUIRE 'RTLIN:RTLPSECT';	! Declare PSECTS code
REQUIRE 'RTLIN:STRMACROS';	! use string macros to write code
LIBRARY 'RTLSTARLE';		! STARLET library for macros and symbols

!
! MACROS: NONE
!

!
! EQUATED SYMBOLS: NONE
!

!
! PSECT DECLARATIONS
!

DECLARE_PSECTS (STR);

!
! OWN STORAGE: NONE
!

!
! EXTERNAL REFERENCES
!
!	NONE

GLOBAL ROUTINE STR$COMPARE_EQL ( ! compare strings-same len and contents

			    STRING1, ! pointer to 1st string descriptor
			    STRING2  ! pointer to 2nd string descriptor

			       ) : =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine takes two source strings of any supported
!	dtype and class, compares their length and contents and returns
!	a 0 if both are the same (length and contents)
!	and a 1 otherwise.
!
! FORMAL PARAMETERS:
!
!	STRING1.rt.dx		pointer to 1st string descriptor
!	STRING2.rt.dx		pointer to 2nd string descriptor
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	MATCH.wl.v	0 if same length and contents, otherwise 1
!
! SIDE EFFECTS:
!
!	May signal STR$_ILLSTRCLA on bad string class
!
!--

    BEGIN

    LOCAL
	MATCH;		! Local to return match or nomatch

    MAP STRING1 : REF $STR$DESCRIPTOR;
    MAP STRING2 : REF $STR$DESCRIPTOR;

!+
! Find out if this is a static or dynamic string to optimize the code 
! path
!-
    IF (.STRING1 [DSC$B_CLASS] LEQU DSC$K_CLASS_D) AND 
       (.STRING2 [DSC$B_CLASS] LEQU DSC$K_CLASS_D)
    THEN
	BEGIN
	!+
	! If lengths are equal and contents are same match = 0,
	! else match = 1
	!-

	IF (.STRING1 [DSC$W_LENGTH ] EQLU .STRING2 [DSC$W_LENGTH ] )
	THEN	! lengths equal 
	    BEGIN
	    !+
	    ! Use same length field to force generation of a CMPC3. This
	    ! is ok since lengths are the same.
	    !-
	    IF (CH$EQL 
		(.STRING1 [DSC$W_LENGTH], .STRING1 [DSC$A_POINTER],
		 .STRING1 [DSC$W_LENGTH], .STRING2 [DSC$A_POINTER] ) )
	    THEN MATCH = 0	! both length and contents match
	    ELSE MATCH = 1	! lengths match, contents don't
	    END
	ELSE MATCH = 1;		! lengths don't match

	END

    ELSE

	BEGIN
	LOCAL 
	    S1_LENGTH,	! length of first string
	    S1_ADDR,	! address of 1st data byte of first string
	    S2_LENGTH,	! length of second string
	    S2_ADDR;	! address of 1st data byte of second string
!+
!	Get the associated lengths and addresses of the strings
!-

	$STR$GET_LEN_ADDR (STRING1, S1_LENGTH, S1_ADDR) ;
	$STR$GET_LEN_ADDR (STRING2, S2_LENGTH, S2_ADDR) ;

!+
!	If lengths are equal and contents are same match = 0,
!	else match = 1
!-

	IF (.S1_LENGTH EQLU .S2_LENGTH )	! lengths = ?
	THEN
	    BEGIN
	    IF (CH$EQL (.S1_LENGTH, .S1_ADDR, 	! contents = ?
			.S1_LENGTH, .S2_ADDR) )	! use same length field
						! to force generation of
						! CMPC3 compare.  Its ok
						! since we know
						! S1_LENGTH = S2_LENGTH
	    THEN MATCH = 0	! both length and contents match
	    ELSE MATCH = 1	! lengths match, contents don't
	    END
	ELSE MATCH = 1;		! lengths don't match

	END;

    RETURN .MATCH;
    END;					! End of STR$COMPARE_EQL

END				!End of module
ELUDOM
