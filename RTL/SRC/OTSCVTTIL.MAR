	.TITLE	OTS$CVTTIL	; Convert text (integer) to longword
	.IDENT	/1-007/		; File: OTSCVTTIL.MAR  Edit: SBL1007

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;
;
; FACILITY: Language independent support library
;++
; ABSTRACT:
;
; OTS$CVT_TI_L converts a text representation of a decimal value to
; an internal binary form.  It replaces FOR$CNV_IN_I.
;
;--
;
; VERSION: 1
;
; HISTORY:
;
; AUTHOR:
;	Steven B. Lionel, 21-Feb-1979: Version 1
;
; MODIFIED BY:
;
;
;

	.SBTTL	HISTORY		; Detailed Current Edit History


; Edit History for Version 1 of OTS$CVT_TI_L
;
; 1-001 - Adapted from FOR$CNV_IN_I version 1-009.  SBL 21-Feb-79
; 1-002 - Added V_SKIPTABS.  SBL 11-JUL-1979
; 1-003 - Fix bug in overflow test.  SBL 12-July-1979
; 1-004 - Make V_SKIPTABS bit 4 to conform with floating.  SBL 30-Aug-1979
; 1-005 - Fix bug in tab skipping.  Add standard module headers. 
;	  SBL 11-Sept-1979
; 1-006 - Do correct thing if value_size is incorrect.  SBL 25-Feb-1980
; 1-007 - REALLY do correct thing if value_size is incorrect.  Previous code
;	  went into infinite loop.  SBL 5-Jan-1981

	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;

;
; EXTERNAL SYMBOLS:
;
	.DSABL	GBL
	.EXTRN	OTS$_INPCONERR

;
; MACROS:
;

;
; PSECT DECLARATIONS:
;

	.PSECT	_OTS$CODE	PIC, SHR, LONG, EXE, NOWRT


;
; EQUATED SYMBOLS:
;

	REGMASK		= ^M<R2, R3, R4, R5, R6>
	V_NEGATIVE	= 31		; 31th bit position of flag register

;
; OWN STORAGE:
;


	.SBTTL	OTS$CVT_TI_L	; convert text (integer) to longword

;++
;
; FUNCTIONAL DESCRIPTION:
;
;	OTS$CVT_TI_L converts an ASCII string containing a text
;	representation of a decimal number to internal binary form.
;
;	This routine supports FORTRAN I input format conversion as well
;	as similar types for other languages.
;
;	The text representation converted is:
;		<0 or more blanks>
;		<"+", "-" or nothing>
;		<0 or more ASCII digits from "0" through "9">
;		<end of string>
;
;	Notes:
;	  1.  If caller flag V_SKIPBLANKS is clear, then spaces are
;	      equivalent to "0".  If set, spaces are ignored.
;	  2.  If caller flag V_SKIPTABS is clear, then tab characters
;	      are illegal.  If set, tabs are ignored.
;
; CALLING SEQUENCE:
;
;	status.wlc.v = OTS$CVT_TI_L (in_str.rt.dx, value.wx.r
;			[, value_size.rl.v [, caller_flags.rlu.v]])
;
; INPUT PARAMETERS:
;
	in_str	= 4			; Input string by descriptor
	value_size = 12			; Size of value in bytes
					; Must be 1, 2 or 4.
	caller_flags = 16		; Caller flags by value
	V_SKIPBLANKS	= 0		; If set, blanks are ignored.
					; Else they are treated as
					; zeroes.
	V_SKIPTABS	= 4		; If set, tabs are ignored.
					; Else they are invalid.
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
	value	= 8			; Output value by reference
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	SS$_NORMAL	- Successful completion
;	OTS$_INPCONERR	- There was an invalid character in the input
;			  string, the value overflowed the range allowed,
;			  or value_size was invalid.  The result "value" is
;			  set to zero, unless value_size is invalid, in which
;			  case "value" is unpredictable.
;
; SIDE EFFECTS:
;
;	NONE
;
;--

FOR$CNV_IN_I::				; For compatibility
	.ENTRY	OTS$CVT_TI_L, REGMASK

	MOVQ	@in_str(AP), R0		; R0 = width of the input string
					; R1 = address of the input string
	CLRQ	R4			; R4/R5 = ACC = 0
	CLRL	R6			; clear flags 
	CMPB	(AP), #<caller_flags/4>	; Optional argument present?
	BLSS	5$			; No
	MOVB	caller_flags(AP), R6	; Yes, move it


;+
;-

5$:	SKPC	#^A/ /, R0, (R1)	; skip blanks
					; R0 = #CHAR_REMAINING
					; R1 = POINTER_TO_INPUT
					; Z bit is set if R0 = 0
	BEQL	DONE			; branch to DONE if no non-blank
	BBC	#V_SKIPTABS, R6, 7$	; Ignoring tabs?
	CMPB	(R1), #^X09		; Yes, is it a tab?
	BNEQ	7$			; If not, continue
	INCL	R1			; Bump pointer
	DECL	R0			; Decrement counter
	BRB	5$			; Look for more.
7$:	CMPB	(R1), #^A/-/		; is the current char a "-" sign?
	BNEQ	10$			; no, branch to 10$
	BBCS	#V_NEGATIVE, R6, DECIMAL
					; set negative flag and continue

10$:	CMPB	(R1), #^A/+/		; is current char a "+" sign?
	BNEQ	DIGIT_LOOP		; no, branch to check if it is a digit

;+
; skip over "-" or "+" sign
;-

DECIMAL:
	DECL	R0			; R0 = #CHAR_REMAINING
	INCL	R1			; R1 = POINTER_TO_INPUT

;+
; Loop to collect digits, treat blanks as zeroes, until the string is exhausted
; then branch to DONE
;-

DIGIT_LOOP:
	DECL	R0			; R0 = #CHAR_REMAINING
	BLSS	DONE			; branch to DONE if the string is exhausted

;+
; Get next character, converting blanks into zeroes unless V_SKIPBLANKS set.
;-

	MOVZBL	(R1)+, R3		; get current char and adjust POINTER_TO_INPUT 
	CMPB	R3, #^A/ /		; compare char with blank
	BEQL	10$			; possibly ignore or set to 0
	BBC	#V_SKIPTABS, R6, CHECK_DIGIT	; not ignoring tabs?
	CMPB	R3, #^X09		; Tab?
	BEQL	DIGIT_LOOP		; Yes, ignore it
	BRB	CHECK_DIGIT		; Continue
10$:	BBS	#V_SKIPBLANKS, R6, DIGIT_LOOP	; ignore if V_SKIPBLANKS set
	MOVL	#^A/0/, R3		; convert blank into zero

;+
; Check if current char is a legal digit, accumulate it in ACC if yes and
; then branch to DIGIT_LOOP if no overflow. Otherwise fall into ERROR.
;-

CHECK_DIGIT:
	SUBL	#^A/0/,	R3		; R3 = ASCII(current_char) - ASCII("0")
	BLSS	ERROR			; Error if less than "0"
	CMPB	R3, #9			; Is it greater than "9"?
	BGTR	ERROR			; If so, error
	EMUL	#10, R4, R3, R4		; #10 = radix
					; R4 = LP(ACC), only LP(ACC) will be used in EMUL,
					; since R5 (=HP(ACC)) must be zero
					; R3 = current digit
					; R4/R5 = ACC = ACC * radix + current_digit
	TSTL	R5			; compare R5 with 0, since a non-zero value
					; in HP(ACC) meand overflow
	BEQL	DIGIT_LOOP		; if no overflow branch back to get more
					; character. Otherwise fall into ERROR

;+
; ERROR return
;-

ERROR:	MOVL	#OTS$_INPCONERR, R0	; R0 = error return code
	CLRL	R4			; zero result
	BRB	EXIT			; exit with zero and error

;+
; DONE
;-

DONE:	MOVL	#1, R0			; return function value of SS$_NORMAL
	BBC	#V_NEGATIVE, R6, 10$	; branch if "-" wasn't seen
	CMPL	R4,#^X80000000		; is it 2**31?
	BEQL	EXIT			; yes, already correct!
	TSTL	R4			; test for overflow
	BLSS	ERROR			; if already negative, overflow
	MNEGL	R4, R4			; answer is -R4
	BRB	EXIT			; Store result
10$:	TSTL	R4			; Overflow?
	BLSS	ERROR			; If negative, yes
EXIT:	CMPB	(AP), #<value_size/4>	; Is arg present?
	BLSS	40$			; If not, assume longword
	CMPL	value_size(AP), #4	; If so, is it a longword?
	BEQL	40$			; Yes
	CMPL	value_size(AP), #2	; Word?
	BEQL	20$			; Yes
	CMPL	value_size(AP), #1	; Byte?
	BNEQ	BADSIZE			; No, bad size
	CVTLB	R4, @value(AP)		; Convert byte
	BVS	ERROR			; Overflow?
	BRB	50$			; No, exit
20$:	CVTLW	R4, @value(AP)		; Convert to word
	BVS	ERROR			; Overflow?
	BRB	50$			; No, exit
40$:	MOVL	R4, @value(AP)		; Move longword
50$:	RET

;+
; Come here when value_size is incorrect.
;-

BADSIZE:
	MOVL	#OTS$_INPCONERR, R0	; Input conversion error
	RET

	.END
