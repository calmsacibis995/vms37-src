MODULE BAS$RSTS_CVT (				!
		IDENT = '1-005'			! File: BASRSTSCV.B32
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  BASIC-PLUS-2 Miscellaneous
!
! ABSTRACT:
!
!	This module contains the RSTS-compatable CVT functions: CVT$%,
!	CVT%$, CVT$F, CVTF$, and the double precision versions of
!	CVT$F and CVTF$.
!
! ENVIRONMENT:  VAX-11 User Mode
!
! AUTHOR: John Sauter, CREATION DATE: 26-FEB-1979
!
! MODIFIED BY:
!
! 1-001	- Original.  JBS 26-FEB-1979
! 1-002	- If the string provided is too short for the conversion function,
!	   pad with zeros.  JBS 27-FEB-1979
! 1-003	- Change LIB$S and OTS$S to STR$.  JBS 21-MAY-1979
! 1-004	- Make BAS$CVT_D_S take its input by value.  JBS 20-AUG-1979
! 1-005	- Sign-extend the result of BAS$CVT_S_W to 32 bits.  JBS 24-SEP-1979
!--

!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!
!	NONE
!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    BAS$CVT_W_S : NOVALUE,			! Convert word to string
    BAS$CVT_S_W,				! Convert string to word
    BAS$CVT_F_S : NOVALUE,			! Convert floating to string
    BAS$CVT_D_S : NOVALUE,			! Convert double to string
    BAS$CVT_S_F,				! Convert string to floating
    BAS$CVT_S_D : NOVALUE;			! Convert string to double

!
! INCLUDE FILES:
!

REQUIRE 'RTLIN:RTLPSECT';			! Macros for defining psects

LIBRARY 'RTLSTARLE';				! System definitions

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! PSECTS:
!
DECLARE_PSECTS (BAS);				! Declare psects for BAS$ facility
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    BAS$$STOP : NOVALUE,			! signals fatal error
    STR$GET1_DX,				! Allocate a string
    STR$FREE1_DX;				! Deallocate a string


GLOBAL ROUTINE BAS$CVT_W_S (			! Convert word to string
	STRING_DESC, 				! Descriptor for returned string
	VAL					! Word to convert
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Changes a word to a string, permuting the bytes in the process.
!	There is no justification for permuting the bytes except
!	compatability with RSTS/E BASIC-PLUS.
!
! FORMAL PARAMETERS:
!
!	STRING_DESC.wt.d	Descriptor for the result string
!	VAL.rw.v		The word to be "converted"
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	VAL : VECTOR [2, BYTE],
	STRING_DESC : REF BLOCK [8, BYTE];

    LOCAL
	STRING : REF VECTOR [65535, BYTE];

!+
! Be sure the result string has only enough storage to hold the
! two bytes we will be putting in it.
!-
    STR$FREE1_DX (.STRING_DESC);
    STR$GET1_DX (%REF (2), .STRING_DESC);
!+
! Now permute the bytes, putting the word into the string.
!-
    STRING = .STRING_DESC [DSC$A_POINTER];
    STRING [0] = .VAL [1];
    STRING [1] = .VAL [0];
    RETURN;
    END;					! end of BAS$CVT_W_S


GLOBAL ROUTINE BAS$CVT_S_W (			! Convert string to word
	STRING_DESC				! Descriptor for string
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Changes a string to a word, permuting the bytes in the process.
!	There is no justification for permuting the bytes except
!	compatability with RSTS/E BASIC-PLUS.
!
! FORMAL PARAMETERS:
!
!	STRING_DESC.rt.d	Descriptor for the string
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	The resultant 16-bit word.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	STRING_DESC : REF BLOCK [8, BYTE];

    LOCAL
	RESULT : VECTOR [4, BYTE, SIGNED],
	STRING : REF VECTOR [, BYTE, SIGNED];

!+
! Permute the bytes, putting the string into the word.
!-
    STRING = .STRING_DESC [DSC$A_POINTER];
    RESULT = 0;
    RESULT [0] = (IF (.STRING_DESC [DSC$W_LENGTH] LEQU 1) THEN 0 ELSE .STRING [1]);
    RESULT [1] = (IF (.STRING_DESC [DSC$W_LENGTH] LEQU 0) THEN 0 ELSE .STRING [0]);
!+
! Sign-extend the result, so if the caller is storing the result in a longword a
! sign test will still work.
!-
    RESULT [2] = (IF (.RESULT [1] LSS 0) THEN -1 ELSE 0);
    RESULT [3] = (IF (.RESULT [1] LSS 0) THEN -1 ELSE 0);
    RETURN (.RESULT);
    END;					! end of BAS$CVT_W_S


GLOBAL ROUTINE BAS$CVT_F_S (			! Convert floating to string
	STRING_DESC, 				! Descriptor for returned string
	VAL					! Floating number to convert
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Changes a floating value to a string, permuting the bytes in the process.
!	There is no justification for permuting the bytes except
!	compatability with RSTS/E BASIC-PLUS.
!
! FORMAL PARAMETERS:
!
!	STRING_DESC.wt.d	Descriptor for the result string
!	VAL.rf.v		The floating value to be "converted"
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	VAL : VECTOR [4, BYTE],
	STRING_DESC : REF BLOCK [8, BYTE];

    LOCAL
	STRING : REF VECTOR [65535, BYTE];

!+
! Be sure the result string has only enough storage to hold the
! four bytes we will be putting in it.
!-
    STR$FREE1_DX (.STRING_DESC);
    STR$GET1_DX (%REF (4), .STRING_DESC);
!+
! Now permute the bytes, putting the floating value into the string.
!-
    STRING = .STRING_DESC [DSC$A_POINTER];
    STRING [0] = .VAL [3];
    STRING [1] = .VAL [2];
    STRING [2] = .VAL [1];
    STRING [3] = .VAL [0];
    RETURN;
    END;					! end of BAS$CVT_F_S


GLOBAL ROUTINE BAS$CVT_D_S (			! Convert double to string
	STRING_DESC, 				! Descriptor for returned string
	VAL					! Double number to convert
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Changes a double value to a string, permuting the bytes in the process.
!	There is no justification for permuting the bytes except
!	compatability with RSTS/E BASIC-PLUS.
!
! FORMAL PARAMETERS:
!
!	STRING_DESC.wt.d	Descriptor for the result string
!	VAL.rd.v		The double value to be "converted"
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	VAL : VECTOR [8, BYTE],
	STRING_DESC : REF BLOCK [8, BYTE];

    LOCAL
	STRING : REF VECTOR [65535, BYTE];

!+
! Be sure the result string has only enough storage to hold the
! eight bytes we will be putting in it.
!-
    STR$FREE1_DX (.STRING_DESC);
    STR$GET1_DX (%REF (8), .STRING_DESC);
!+
! Now permute the bytes, putting the double value into the string.
!-
    STRING = .STRING_DESC [DSC$A_POINTER];
    STRING [0] = .VAL [7];
    STRING [1] = .VAL [6];
    STRING [2] = .VAL [5];
    STRING [3] = .VAL [4];
    STRING [4] = .VAL [3];
    STRING [5] = .VAL [2];
    STRING [6] = .VAL [1];
    STRING [7] = .VAL [0];
    RETURN;
    END;					! end of BAS$CVT_D_S


GLOBAL ROUTINE BAS$CVT_S_F (			! Convert string to floating
	STRING_DESC				! Descriptor for string
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Changes a string to a floating value, permuting the bytes in the process.
!	There is no justification for permuting the bytes except
!	compatability with RSTS/E BASIC-PLUS.
!
! FORMAL PARAMETERS:
!
!	STRING_DESC.rt.d	Descriptor for the string
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	The resultant floating value.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	STRING_DESC : REF BLOCK [8, BYTE];

    LOCAL
	RESULT : VECTOR [4, BYTE],
	STRING : REF VECTOR [, BYTE];

!+
! Permute the bytes, putting the string into the floating result.
!-
    STRING = .STRING_DESC [DSC$A_POINTER];
    RESULT [0] = (IF (.STRING_DESC [DSC$W_LENGTH] LEQU 3) THEN 0 ELSE .STRING [3]);
    RESULT [1] = (IF (.STRING_DESC [DSC$W_LENGTH] LEQU 2) THEN 0 ELSE .STRING [2]);
    RESULT [2] = (IF (.STRING_DESC [DSC$W_LENGTH] LEQU 1) THEN 0 ELSE .STRING [1]);
    RESULT [3] = (IF (.STRING_DESC [DSC$W_LENGTH] LEQU 0) THEN 0 ELSE .STRING [0]);
    RETURN (.RESULT);
    END;					! end of BAS$CVT_F_S


GLOBAL ROUTINE BAS$CVT_S_D (			! Convert string to double
	STRING_DESC				! Descriptor for string
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Changes a string to a double value, permuting the bytes in the process.
!	There is no justification for permuting the bytes except
!	compatability with RSTS/E BASIC-PLUS.
!
! FORMAL PARAMETERS:
!
!	STRING_DESC.rt.d	Descriptor for the string
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	The resultant double value.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	STRING_DESC : REF BLOCK [8, BYTE];

    LOCAL
	RESULT : VECTOR [8, BYTE],
	STRING : REF VECTOR [, BYTE];

!+
! Permute the bytes, putting the string into the floating result.
!-
    STRING = .STRING_DESC [DSC$A_POINTER];
    RESULT [0] = (IF (.STRING_DESC [DSC$W_LENGTH] LEQU 7) THEN 0 ELSE .STRING [7]);
    RESULT [1] = (IF (.STRING_DESC [DSC$W_LENGTH] LEQU 6) THEN 0 ELSE .STRING [6]);
    RESULT [2] = (IF (.STRING_DESC [DSC$W_LENGTH] LEQU 5) THEN 0 ELSE .STRING [5]);
    RESULT [3] = (IF (.STRING_DESC [DSC$W_LENGTH] LEQU 4) THEN 0 ELSE .STRING [4]);
    RESULT [4] = (IF (.STRING_DESC [DSC$W_LENGTH] LEQU 3) THEN 0 ELSE .STRING [3]);
    RESULT [5] = (IF (.STRING_DESC [DSC$W_LENGTH] LEQU 2) THEN 0 ELSE .STRING [2]);
    RESULT [6] = (IF (.STRING_DESC [DSC$W_LENGTH] LEQU 1) THEN 0 ELSE .STRING [1]);
    RESULT [7] = (IF (.STRING_DESC [DSC$W_LENGTH] LEQU 0) THEN 0 ELSE .STRING [0]);
!+
! Returning a double precision number is a little tricky in BLISS.
!-
    BEGIN

    REGISTER
	R0 = 0,
	R1 = 1;

    MAP
	RESULT : BLOCK [8, BYTE];

    R0 = .RESULT [0, 0, %BPVAL, 0];
    R1 = .RESULT [%UPVAL, 0, %BPVAL, 0];
    RETURN;
    END;
    END;					! end of BAS$CVT_F_S

END						! end of module BAS$RSTS_CVT

ELUDOM
