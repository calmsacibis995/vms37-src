	.TITLE	BAS$RANDOM - BASIC Random Number Support
	.IDENT	/1-005/		; File: BASRANDOM.MAR

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY: BASIC Support Library
;
; ABSTRACT:
;
;	This module provides support for all BASIC random number
;	functions.  The seed is kept in OWN storage in this module.
;	There are 2 entry points.  The first initializes the seed
;	based on the time of day to prevent getting the same sequence
;	each time a program is run.  The second picks up the seed
;	and generates a random number.
;	This is a general random number generator. It is
;	of the multiplicative congruential type, and hence
;	is fast, although prone to certain classes of
;	non-random sequences.
;
; ENVIRONMENT:	any access mode, normally user mode
;		modular, non-AST reentrant procedure
;--
;+
; AUTHOR: R. Will, CREATION DATE: 29-Nov-78
;
; MODIFIED BY:
;
;	R. Will, 29-Nov-78: VERSION 01
; 01	- Original creation.
; 1-002	- Add "_" to the PSECT directives.  JBS 22-DEC-78
; 1-003	- Add BAS$$RAND_INIT.  JBS 04-JUN-1979
; 1-004	- Don't cause integer overflow.  JBS 05-AUG-1979
; 1-005	- Start the generator at 1C5983F7, so it doesn't give 0 the
;	   first time it is called.  JBS 01-SEP-1979
;-

	.SBTTL	DECLARATIONS

;
; INCLUDE FILES:
;
;	NONE
;
; EXTERNAL DECLARATIONS:
;
	.DSABL	GBL			; Prevents undeclared symbols
					; from being automatically global
	.EXTRN	SYS$GETTIM		; system services, current time
;
; MACROS:
;
;	NONE
;
; EQUATED SYMBOLS:
;
;
; OWN STORAGE:
;
	.PSECT	_BAS$DATA,PIC,NOSHR,WRT,LONG,NOEXE

SEED:	.LONG	^X1C5983F7		; Initial value of seed
;
;
; PSECT DECLARATIONS:
;
	.PSECT	_BAS$CODE,PIC,USR,CON,REL,LCL,RD,SHR,NOWRT,LONG,EXE

	.SBTTL	BAS$RANDOMIZE  - Initialize random number seed
;++
; FUNCTIONAL DESCRIPTION:
;
;	This routine initializes the seed by getting the current system
;	time and adding the low 32 bits to the high 32 bits to get the seed.
;
; CALLING SEQUENCE:
;
;	CALL BAS$RANDOMIZE ( )
;
; INPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	SEED.wlu
;
; FUNCTION VALUE:
; COMPLETION CODES:
;
;	NONE
;
; SIDE EFFECTS:
;
;	SEED is altered
;
;--

	.ENTRY BAS$RANDOMIZE , ^M<>		; Entry point

	CLRQ		-(SP)			; space on stack for time
	$GETTIM_S	(SP)			; get current time
						; as top 2 words on stack
	ADDL3		(SP)+,(SP)+,SEED	; add the two words of
						; current time to get
						; randomized seed
						; and clean up stack
	RET

	.SBTTL	BAS$$RAND_INIT  - Initialize random number seed
;++
; FUNCTIONAL DESCRIPTION:
;
;	This routine sets the seed to 1C5983F7.  It is used by the RUN
;	command when the environment is initialized.
;
; CALLING SEQUENCE:
;
;	CALL BAS$$RAND_INIT ( )
;
; INPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	SEED.wlu
;
; FUNCTION VALUE:
; COMPLETION CODES:
;
;	NONE
;
; SIDE EFFECTS:
;
;	SEED is altered
;
;--

	.ENTRY BAS$$RAND_INIT , ^M<>		; Entry point

	MOVL	#^X1C5983F7, SEED	; Initialize the seed
	RET				; and return

	.SBTTL	BAS$RND_F_R1 - BASIC Random Number Generator
;++
; FUNCTIONAL DESCRIPTION:
;
; RANDOM - BASIC Pseudo Random Number Generator
;
;	Call the function BAS$RND_F ( ) to obtain the
;	next pseudo-random number. The seed is updated by
;	the function automatically as a side effect. The
;	result is a floating point number that is uniformly
;	distributed in the range 0.0 inclusive to 1.0 exclusive.
;	There are no restrictions on the seed, although
;	it should be initialized to different values on
;	separate runs.
;
;	The algorithm used is to update the seed as:
;
;		seed = 69069. * seed + 1    (mod 2**32)
;
;	and then to convert the seed to floating point.
;
;	Note, because the result is never 1.0, a simple
;	way to get a uniform random integer selector is
;	to multiply by the number of cases. For example
;	if a uniform choice among 5 situations is to be
;	made, then the following BASIC statement will
;	work:
;		ON 1+INT(5.0*RND) 1,2,3,4,5
;
;	Note that the explicit INT is necessary before
;	adding 1 in order to avoid a possible rounding
;	during the normalization after the floating add.
;
;	This is a general random number generator. It is
;	of the multiplicative congruential type, and hence
;	is fast, although prone to certain classes of
;	non-random sequences. This non-random behavior
;	typically arises when considering triples of
;	numbers generated by this method.
;
;	For more information on congruential generators,
;	see:
;		Random Number Generation (pp. 1192-1197)
;		  by G. Marsaglia
;
;	in:	Encyclopedia of Computer Science
;		  edited by Anthony Ralston
;		  Petrocelli (New York, 1976)
;
; CALLING SEQUENCE:
;
;	JSB result.wf.v = BAS$RND_F_R1 ( )
;
; INPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT INPUTS:
;
;	SEED.mlu
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	SEED.mlu
;
; FUNCTION VALUE
;
;	Returns in R0 a single-precision floating point value between
;	0.0 inclusive and 1.0 exclusive.
;
; SIDE EFFECTS:
;
;	The value of SEED is altered
;
;--
BAS$RND_F_R1::				;JSB entry
;+
; Do the multiply in a way that will not cause an integer
; overflow.
;-
	EMUL	SEED,#69069,#1,R0	; compute product in R0/R1
	MOVL	R0,SEED			; ignore high-order bits of product

;+
; The next instructions convert the seed from unsigned integer
; to floating point in the range 0.0 to 1.0 exclusive.
;-

	EXTZV	#8,#24,SEED,R0		;Get the most significant bits
					; of the seed in the range
					; 0 .. (2**24)-1
	CVTLF	R0,R0			;Convert to floating without
					; rounding. The result is
					; positive and in the range
					; 0.0 .. (2.0**24)-1.0

;+
; If this were to be placed as an inline expansion, then
; MULF #^X00003480,R0 could replace the next two instructions.
;-

	BEQL	10$			;If zero, already correct
	SUBW	#24@7,R0		;DIVF #^F2.0**24
					; the result is now in the
					; range 0.0 .. 1.0 exclusive

10$:	RSB

	.END

