	.TITLE	MTH$DCOSH 	; Double Floating Hyperbolic Cosine routine
				; (DCOSH)
	.IDENT /1-008/		; File: MTHDCOSH.MAR  Edit: RNH1008
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;
; FACILITY: MATH LIBRARY
;++
; ABSTRACT:
;
; MTH$DCOSH is a function  which  returns the double floating hyperbolic cosine
; of its double precision floating point argument. The call is standard
; call-by-reference.
;
;--
;
; VERSION: 01
;
; HISTORY:
; AUTHOR:
;	Peter Yuo, 29-Jun-77: Version 01
;
; MODIFIED BY:
;
;
;

	.SBTTL	HISTORY	; Detailed Current Edit History


; ALGORITHMIC DIFFERENCES FROM FP-11/C ROUTINE:	none
;
; Edit History for Version 01 of MTH$DCOSH 
;
; 0-2	MTH$$ERROR changed to MTH$$SIGNAL.
;	MTH$_... changed to MTH__....
;	Changed error handling mechanism. Put error result in R0:R1 before
;	calling MTH$$SIGNAL in order to allow user modify error result.
;
;0-3	Seven term Taylor series, in powers of argument, replaced
;	by six term Chebyshev series, in powers of ARG**2,
;	with overhang, to improve accuracy. 18-May-1978; Mary Payne
; 0-4	Fix LOG(2) constant.  TNH 16-June-78
; 1-001	- Update version number and copyright notice.  JBS 16-NOV-78
; 1-002	- Change MTH__FLOOVEMAT to MTH$K_FLOOVEMAT.  JBS 07-DEC-78
; 1-003	- Removed $SRMDEF - not needed.  JBS 16-DEC-78
; 1-004	- Add "_" to the PSECT directive.  JBS 22-DEC-78
; 1-005 - Declare externals.  SBL 17-May-1979
; 1-006 - Use MTH$DEXP_R6.  SBL 27-Sept-1979
; 1-007 - Changed lower limit for Chebyshev approximation from 2**-27 to
;	  2**-28.
;	- Eliminated second call to EXP for input values between .25 and
;	  28.5*ln2 by computing COSH(x) = (Z + 1/Z)/2, with Z = EXP(|x|).
;	- Eliminated second call to EXP for input values between 28.5*ln2
;	  and 127*ln2.
;	- Changed all final floating point divisions by 2 to interger 
;	  subrtracts of 1 from the exponent field.
;	- Changed entry mask to excluded R7 - no longer needed.
;	- Extended maximum range from 87.69 to 128*ln2=88.72.
;	- Chaneged logic for computing EXP(|x|-ln2) to reduce error.
;	- RNH 10-FEB-81
; 1-003 - Changed W^ to G^ on call to MTH$$SIGNAL RNH 09-Sept-1981

	.SBTTL	DECLARATIONS	; Declarative Part of Module

;
; INCLUDE FILES:
;

;
; EXTERNAL SYMBOLS:
;
	.DSABL	GBL
	.EXTRN	MTH$DEXP_R6
	.EXTRN	MTH$K_FLOOVEMAT
	.EXTRN	MTH$$SIGNAL

;
; EQUATED SYMBOLS:

	SD_1.0	= ^F1.0			; 1.0
	value	= 4			; value.rd.r

;
; MACROS:	none
;
;
; PSECT DECLARATIONS:

	.PSECT	_MTH$CODE	PIC,SHR,LONG,EXE,NOWRT
					; program section for math routines
;
; OWN STORAGE:	none
;
;
; CONSTANTS:
;

D_127_LOG_2:
	.QUAD	^X2BDAC7E20F3343B0	; 127*ln2
D_128_LOG_2:
	.QUAD	^XCF79F7D1721743B1	; 128*ln2
D_2_POWER_28.5:
	.QUAD	^XDE6433F904F34EB5	; 2**28.5
D_LOG_2_HI:
	.QUAD	^XCF80F7D172174031	; (high 49 bits of ln2) + 2**-49
D_LOG_2_LO:
	.QUAD	^XFF81898C86C3A5CA	; ln2 - D_LOG_2_HI	

DCOSHTAB:
	.WORD	^O032624,^O024123
	.WORD	^O037354,^O155722	; DECIMAL: 0.2759648863787355D-06
	.WORD	^O034320,^O006361
	.WORD	^O125450,^O145117	; DECIMAL: 0.2480155975461668D-04
	.WORD	^O035666,^O005540
	.WORD	^O134001,^O177010	; DECIMAL: 0.1388888889781712D-02
	.WORD	^O037052,^O125252
	.WORD	^O125252,^O067704	; DECIMAL: 0.4166666666665359D-01
	.WORD	^O040000,0
	.WORD	0,^O000005		; DECIMAL: 0.5000000000000000D0
	.WORD	^O040200,0
	.WORD	0,0			; DECIMAL: 0.1000000000000000D+01
DCOSHLEN	= .- DCOSHTAB/8


	.SBTTL	MTH$DCOSH  - Standard Double Precision Floating DCOSH


;++
; FUNCTIONAL DESCRIPTION:
;
; DCOSH  - double precision floating point function
;
; DCOSH(X) is computed as:
;
;	If |X| < 2**-28, DCOSH(X) = 1.
;	IF 2**-28 =< |X| < 0.25, DCOSH(X) = Chebyshev series
;	If 0.25 =< |X| =< 28.5*ln2, set Z = DEXP(|X|) and compute
;	     DCOSH(X) = (Z + 1/Z)/2.
;	If 28.5*ln2 < |X| =< 127*ln2  COSH(X) = EXP(|X|)/2
;	If 127*ln2 < |X| =< 128*ln2 then DCOSH(X) = DEXP(|X|-LOG(2)).
;	If 128*ln2 < |X| then overflow.
;
; CALLING SEQUENCE:
;
;	DCOSH.wd.v = MTH$DCOSH(x.rd.r)
;
; INPUT PARAMETERS:

	LONG = 4			; define longword multiplier
	x = 1 * LONG			; Contents of x is the argument

; IMPLICIT INPUTS:	none
;
; OUTPUT PARAMETERS:
;
;	VALUE:	double precision floating hyperbolic cosine of the argument
;
; IMPLICIT OUTPUTS:	none
;
; COMPLETION CODES:	none
;
; SIDE EFFECTS:
;
; Signal: MTH$_FLOOVEMAT if 128*ln2 < |X| with reserved operand in R0/R1
; (copied to the signal mechanism vector CHF$L_MCH_R0/R1 by LIB$SIGNAL).
; Associated message is: "FLOATING OVERFLOW IN MATH LIBRARY". Result is reserved
; operand -0.0 unless a user supplied (or any) error handler changes CHF$L_MCH_R0/R1.
;
; NOTE: This procedure disables floating point underflow, enables integer
; overflow.
;
;---


	.ENTRY	MTH$DCOSH, ^M<IV, R2, R3, R4, R5, R6 >
					; standard call-by-reference entry
					; disable DV (and FU), enable IV
	MTH$FLAG_JACKET			; flag that this is a jacket procedure in
					; case of an error in routine
					; If an error, convert signal to user PC
					; and resignal
	MOVD	@value(AP), R0		; R0/R1 = |X| = @value(AP)
	BICW2	#^X8000, R0		; R0/R1 = |X|
	CMPW	R0, #^X3F80		; compare |X| with 0.25
	BGEQ	GEQ_TO_0.25		; branch if |X| >= 0.25

;
; |X| < 0.25
;

	CMPW	R0, #^X3280		; compare |X| with 2**-28
	BGEQ	GEQ_TO_2M28		; branch if |X| >= 2**-28

;
; |X| < 2**-28
;

	MOVD	S^#SD_1.0, R0		; R0/R1 = 1.0
	RET				; return with result = 1.0

;
; 2**-28 =< |X| < 0.25
;

GEQ_TO_2M28:
	MULD	R0,R0			;Get ARG**2 for POLYD.
	POLYD	R0, #DCOSHLEN-1, DCOSHTAB	
					; R0/R1 = SUM(Ci*X**i)
	RET				; return with result in R0

;
; 0.25 =< |X|
;

GEQ_TO_0.25:
	CMPD	R0, D_127_LOG_2		; compare |X| with 127*ln2
	BGTR	GTR_THAN_127_LOG_2	; branch if |X| > 127*ln2

;
; 0.25 =< |X| =< 127*ln2
;

	JSB	MTH$DEXP_R6		; R0/R1 = DEXP(X)
	CMPD	R0, D_2_POWER_28.5	; See if the DEXP(-|X|) is significant
        BGTR	ONE_TERM_ONLY		; if not skip computation
	DIVD3	R0, S^#SD_1.0, R2	; R2/R3 = DEXP(-|X|)
	ADDD	R2, R0			; R0/R1 = DEXP(X) + DEXP(-X)
ONE_TERM_ONLY:
	SUBW	#^X0080, R0		; R0/R1 = (DEXP(X) + DEXP(-X))/2
	RET				; return with result in R0/R1

;
; 127*ln2 < |X|
;

GTR_THAN_127_LOG_2:
	CMPD	R0, D_128_LOG_2		; Check for possible overflow
	BGTR	ERROR			;
	SUBD	D_LOG_2_HI, R0		;
	JSB	MTH$DEXP_R6		;
	MULD3	D_LOG_2_LO, R0, R2	;
	SUBD	R2, R0
	RET
;
; 128*ln2 < |X| 
;

ERROR:	MOVZBL	#MTH$K_FLOOVEMAT, -(SP)	; condition value
	ASHQ	#15, #1, R0		; R0 = result = reserved operand -0.0
					; goes to signal mechanism vector
					; (CHF$L_MCH_R0/R1) so error handler
					; can modify the result.
	CALLS	#1, G^MTH$$SIGNAL	; signal error and use real user's PC
					; independent of CALL vs JSB
	RET				; return - R0/R1 restored from CHF$L_MCH_R0/R1



	.END
