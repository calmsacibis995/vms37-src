MODULE STR$LEN_EXTR (		! Extract a substr by length

		IDENT = '1-012'	! File: STRLENEXT.B32	Edit: RKR1012

		    ) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY: String support library
!
! ABSTRACT:
!
!	This module extracts a substring according to the BASIC-PLUS-2
!	syntax.  It finds the substring of a main string starting at the
!	character position specified by the second input parameter and
!	continues for the number of characters specified by the third
!	input parameter.  This substring is copied to the destination 
!	string.
!
! ENVIRONMENT: User mode, AST level or not or mixed
!
! AUTHOR: R. Will, CREATION DATE: 21-Feb-79
!
! MODIFIED BY:
!
!  R. Will, 21-Feb-79: VERSION 01
! 1-001	- Original
! 1-002	- Change linkage and call to COPY routine.  15-Mar-79 RW
! 1-003	- Change string linkages to start with STR$.  JBS 04-JUN-1979
! 1-004	- Change call to STR$$COPY.  JBS 16-JUL-1979
! 1-005 - String cleanup, change name to STR$.  RW  1-Nov-79
! 1-006	- Make the module name agree with the entry point name, and
!	  correct the PSECT name.  JBS 02-NOV-1979
! 1-007	- Use new interlock macros.  JBS 06-NOV-1979
! 1-008 - Interlock only from CALL entry.  RW  15-Nov-79
! 1-009 - String speedup, remove edit 8.  RW  8-Jan-1980
! 1-010 - Enhance to recognize additional classes of descriptors by
!	  using $STR$GET_LEN_ADDR to extract length and address of
!	  1st data byte from a descriptor.  Remove string interlock
!	  code.  RKR 21-APR-81
! 1-011 - Speed up code.  RKR 7-OCT-1981.
! 1-012 - Use STR$COPY_R_R8 for copy operation.  Use $STR$SISGNAL_FATAL
!	  instead of $STR$CHECK_STATUS.  RKR 18-NOV-1981.
!--

!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE 
		(EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!

REQUIRE 'RTLIN:STRLNK';		! Use require file with string linkage

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    STR$LEN_EXTR,		       ! Extract a substring by len,CALL
    STR$LEN_EXTR_R8 : STR$JSB_LEN_EXT; ! Extract a substr by len,   JSB

!
! INCLUDE FILES:
!

REQUIRE 'RTLIN:RTLPSECT';	! Declare PSECTS code

REQUIRE 'RTLIN:STRMACROS';	! use string macros to code

LIBRARY 'RTLSTARLE';		! STARLET library for macros and symbol

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! PSECT DECLARATIONS
!

DECLARE_PSECTS (STR);

!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    LIB$STOP,					! signal fatal errors
    STR$COPY_R_R8 : STR$JSB_COPY_R ;		! Routine to do the copy

EXTERNAL LITERAL
    STR$_NORMAL,			! successful completion
    STR$_NEGSTRLEN,		! negative string length
    STR$_ILLSTRPOS,		! illegal string position
    STR$_ILLSTRSPE;		! illegal string specification

GLOBAL ROUTINE STR$LEN_EXTR (		! extract a substring by len

	DEST_DESC,		! Pointer to destination descriptor
	SRC_DESC,		! Pointer to source descriptor
	CHAR_POS,		! First character to be included
	SUB_LENGTH		! Length of the substring

			    ) : =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine extracts the characters starting at the
!	character position in the source string specified by the input
!	parameter and continuing for the number of characters specified
!	by the input, and copies that substring
!	to the destination string (by JSB to STR$COPY_R_R8) according
!	to the syntax of the class of the destination string.
!	If the input character position is < 1, 1 is used.  If
!	the input character position is > the length
!	of the source string, then the destination string becomes a null
!	string.  If the substring length is < 1 a null string is 
!	returned.
!	If character position + substring length - 1 > source string 
!	length then the source string length is used. The CALL entry 
!	point is implemented by calling the JSB entry point.
!
! FORMAL PARAMETERS:
!
!	DEST_DESC.wt.dx		pointer to destination string descriptor
!	SRC_DESC.rt.dx		pointer to source string descriptor
!	CHAR_POS.rl.r		character position in src to start 
!				substring
!	SUB_LENGTH.rl.r		length of substring
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION CODES:
!
!	SS$_NORMAL	Success
!	STR$_ILLSTRPOS	Character position reference outside of string
!	STR$_ILLSTRSPE  End pos < start pos, or length too long
!	STR$_NEGSTRLEN	Negative length supplied, 0 used
!	STR$_TRU	Truncation occured in copying to destination
!			(Warning)
!
! SIDE EFFECTS:
!
!	May signal:
!	    STR$_FATINTERR	Fatal internal error
!	    STR$_ILLSTRCLA	Illegal (or unsupported) string class
!	    STR$_INSVIRMEM	Insufficient virtual memory for
!				reallocation of dynamic string
!
!--

    BEGIN

    MAP
	SRC_DESC  : REF $STR$DESCRIPTOR,
	DEST_DESC : REF $STR$DESCRIPTOR;

    RETURN STR$LEN_EXTR_R8 ( DEST_DESC [0,0,0,0], 
			     SRC_DESC [0,0,0,0], 
			     ..CHAR_POS, 
			     ..SUB_LENGTH);
    END;					!End of STR$LEN_EXTR

GLOBAL ROUTINE STR$LEN_EXTR_R8 (	! extract a substring by len

	DEST_DESC,		! Pointer to destination descriptor
	SRC_DESC,		! Pointer to source descriptor
	CHAR_POS,		! First character to be included
	SUB_LENGTH		! Length of the substring

				) : STR$JSB_LEN_EXT =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine extracts the characters starting at the
!	character position in the source string specified by the input
!	parameter and continuing for the number of characters specified
!	by the input, and copies that substring
!	to the destination string (by JSB to STR$$COPY_R_R8) according
!	to the syntax of the class of the destination string.
!	If the input character position is < 1, 1 is used.  If
!	the input character position is > the length
!	of the source string, then the destination string becomes a null
!	string.  If the substring length is < 1 a null string is 
!	returned.
!	If character position + substring length - 1 > source string 
!	length then the source string length is used.
!
! FORMAL PARAMETERS:
!
!	DEST_DESC.wt.dx		pointer to destination string descriptor
!	SRC_DESC.rt.dx		pointer to source string descriptor
!	CHAR_POS.rl.v		character position in src to start 
!				substring
!	SUB_LENGTH.rl.v		length of substring
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION CODES:
!
!	SS$_NORMAL	Success
!	STR$_ILLSTRPOS	Character position reference outside of string
!	STR$_ILLSTRSPE  End pos < start pos, or length too long
!	STR$_NEGSTRLEN	Negative length supplied, 0 used
!	STR$_TRU	Truncation occured in copying to destination
!			(Warning)
!
! SIDE EFFECTS:
!
!	May signal:
!	    STR$_FATINTERR	Fatal internal error
!	    STR$_ILLSTRCLA	Illegal (or unsupported) string class
!	    STR$_INSVIRMEM	Insufficient virtual memory for
!				reallocation of dynamic string
!
!--

    BEGIN

    LOCAL
	IN_LEN,			! Length of source string
	IN_ADDR,		! addr of 1st byte of source string
	START_POS,		! CHAR_POS corrected for errors
	LENGTH,			! SUB_LENGTH corrected for errors
	COPY_STATUS,		! status returned by copy
	RETURN_STATUS;		! keep the routine status

    MAP
	SRC_DESC  : REF $STR$DESCRIPTOR,
	DEST_DESC : REF $STR$DESCRIPTOR;

    RETURN_STATUS = 1 ;		! Assume success to follow

!+
! Extract length and address of 1st byte of source string.  Signal fatal
! errors encountered.
!-
    $STR$GET_LEN_ADDR ( SRC_DESC, IN_LEN, IN_ADDR ) ;

    START_POS = 
	BEGIN
	IF .IN_LEN LSS .CHAR_POS - 1
	THEN
	    BEGIN
	    RETURN_STATUS = STR$_ILLSTRPOS; ! input position is illegal

	    .IN_LEN			! use srclen and remember error
	    END
	ELSE 
	    .CHAR_POS - 1		! use original position
	END;

    IF .START_POS LSS 0 THEN
	BEGIN
	START_POS = 0;			! input position is negative
	RETURN_STATUS = STR$_ILLSTRPOS;	! use 0 and remember error
	END;

    LENGTH =
	BEGIN
	IF (.IN_LEN - .START_POS) LSS .SUB_LENGTH
	THEN
	    BEGIN
	    RETURN_STATUS = STR$_ILLSTRSPE;! input length is too large

	    .IN_LEN - .START_POS 	   ! compute length, give error
	    END

	ELSE 
	    .SUB_LENGTH			   ! use orignal length
	END;

    IF .LENGTH LSS 0 THEN
	BEGIN
	LENGTH = 0;			! input length is negative
	RETURN_STATUS = STR$_NEGSTRLEN;	! use 0, remember error
	END;

!+
! Copy to descriptor of the destination for length as computed above.
! Pointer is the sum - 1 of the source pointer and input character
! position (which must be  > 0 and <= source length).
!-
    COPY_STATUS = 
		STR$COPY_R_R8 ( .DEST_DESC, .LENGTH, 
				  CH$PLUS (.IN_ADDR, .START_POS) ) ;

    IF .COPY_STATUS NEQ SS$_NORMAL
    THEN RETURN_STATUS = .COPY_STATUS;	! copy truncated, return 
					! truncate instead of previous 
					! status

    $STR$SIGNAL_FATAL (RETURN_STATUS);		! signal fatal errors
    RETURN .RETURN_STATUS;
    END;					!End of STR$LEN_EXTR_R8

END						!End of module

ELUDOM
