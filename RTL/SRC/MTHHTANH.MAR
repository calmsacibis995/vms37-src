	.TITLE	MTH$HTANH 	; H Floating Hyperbolic Tangent routine
				; (HTANH)
	.IDENT /1-005/		; File: MTHHTANH.MAR  Edit:  SBL1005
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;
; FACILITY: MATH LIBRARY
;++
; ABSTRACT:
;
; MTH$HTANH is a function  which  returns the H floating hyperbolic tangent
; of its H floating argument. The call is standard call-by-reference.
;
;--
;
; VERSION: 1
;
; HISTORY:
; AUTHOR:
;	John A. Wheeler, 20-Oct-1979: Version 1
;
; MODIFIED BY:
;
;
;

	.SBTTL	HISTORY	; Detailed Current Edit History


; Edit History for Version 1 of MTH$HTANH 
;
; 1-001 - Adapted from MTH$GTANH version 1-002.  JAW 20-Oct-1979
; 1-002 - Change constant 16.0 to 40.0 to correct inaccuracy.  The
;	   value of X above which 1.0 is the best machine approximation
;	   to HTANH(X) is about 39.86.  The next higher number that can
;	   be represented as a short literal is 40.0.  JAW 19-Sep-80
; 1-003 - Eliminated symbolic short literals.  RNH 15-Oct-81
; 1-004 - Changed #40 to S^#40 to circumvent assembler problem RNH 23-Oct-81
; 1-005 - Use general mode addressing.  SBL 30-Nov-1981

	.SBTTL	DECLARATIONS	; Declarative Part of Module

;
; INCLUDE FILES:
;
; EXTERNAL SYMBOLS:	MTH$JACKET_HDLR
;
	.DSABL	GBL			; Force .EXTRN on all symbols
	.EXTRN	MTH$HCOSH		; HCOSH
	.EXTRN	MTH$HSINH		; HSINH
	.EXTRN	MTH$HEXP_R6		; EXP
;
; EQUATED SYMBOLS:
;

	y = 4				; Offset for first argument

;
; MACROS:	none
;
; PSECT DECLARATIONS:

	.PSECT	_MTH$CODE	PIC,SHR,LONG,EXE,NOWRT
					; Program section for math routines
;
; OWN STORAGE:	none
;
;
; CONSTANTS:
;

H_0.25:
	.LONG	^X00003FFF, ^X00000000	; 0.25
	.LONG	^X00000000, ^X00000000
H_2_POWER_M59:
	.LONG	^X00003FC6, ^X00000000	; 2**-59
	.LONG	^X00000000, ^X00000000


	.SBTTL	MTH$HTANH  - H Floating Point TANH


;++
; FUNCTIONAL DESCRIPTION:
;
; HTANH  - H floating point hyperbolic tangent function
;
; HTANH(X) is computed as:
;
;	If |X| <= 2**-59, then HTANH(X) = X.
;	If 2**-59 < |X| <= 0.25, then HTANH(X) = HSINH(X)/HCOSH(X).
;	If 0.25 < |X| < 40.0, then HTANH(X) = (HEXP(2*X) - 1) / (HEXP(2*X) + 1)
;	If 40.0 <= |X|, then HTANH(X) = sign(X) * 1
;
; CALLING SEQUENCE:
;
;	htanh.wh.v = MTH$HTANH(x.rh.r)
;
;		-or-
;
;	CALL MTH$HTANH(htanh.wh.r, x.rh.r)
;
;	Because an H-floating result cannot be expressed in 64 bits, it is
;	returned as the first argument, with the input parameter displaced
;	to the second argument, in accordance with the Procedure Calling
;	Standard.
;
; INPUT PARAMETERS:

	LONG = 4			; Define longword multiplier
	x = 2 * LONG			; Contents of x is the argument

; IMPLICIT INPUTS:	none
;
; OUTPUT PARAMETERS:
;
;	VALUE:	H floating hyperbolic tangent of the argument
;
	htanh = 1 * LONG		; htanh is the result
;
; IMPLICIT OUTPUTS:	none
;
; COMPLETION CODES:	none
;
; SIDE EFFECTS:	none
;
; NOTE: This procedure disables floating point underflow, enables integer
; overflow.
;
;---


	.ENTRY	MTH$HTANH, ^M<IV, R2, R3, R4, R5, R6, R7>
					; Standard call-by-reference entry
					; Disable DV (and FU), enable IV
	MTH$FLAG_JACKET			; Flag that this is a jacket procedure in
					; case of an error in routine
					; If an error, convert signal to user PC
					; and resignal
	MOVH	@x(AP), R0		; R0/R3 = X = @x(AP)
	BICW	#^X8000, R0		; R0/R3 = |X|
	CMPH	R0, H_2_POWER_M59	; Compare |X| with 2**-59
	BLEQ	OUT_X			; Branch if |X| <= 2**-59

;
; 2**-59 < |X|
;

	CMPH	R0, S^#40		; Compare |X| with 40.0
	BGEQ	GEQ_TO_40.0		; Branch if |X| >= 40.0

;
; 2**-59 < |X| < 40.0
;

	CMPH	R0, H_0.25		; Compare |X| with 0.25
	BLEQ	LEQ_TO_0.25		; Branch if |X| <= 0.25

;
; 0.25 < |X| < 40.0
;

	ADDH3	@x(AP), @x(AP), R0	; R0/R3 = 2*X
	JSB	G^MTH$HEXP_R6		; R0/R3 = HEXP(2*X)
	ADDH3	#1, R0, R4		; R4/R7 = HEXP(2*X) + 1
	SUBH2	#1, R0			; R0/R3 = HEXP(2*X) - 1
	DIVH2	R4, R0			; R0/R3 = (HEXP(2*X) - 1) / (HEXP(2*X) + 1)
	BRB	RETURN			; Store result and return

;
; 2**-59 < |X| <= 0.25
;

LEQ_TO_0.25:
	CALLG	(AP), G^MTH$HCOSH	; @y(AP) = HCOSH(X)
	MOVO	@y(AP), R4		; R4/R7 = HCOSH(X)
	CALLG	(AP), G^MTH$HSINH	; @y(AP) = HSINH(X)
	MOVO	@y(AP), R0		; R0/R3 = HSINH(X)
	DIVH2	R4, R0			; R0/R3 = HSINH(X) / HCOSH(X)
	BRB	RETURN			; Store result and return

;
; |X| >= 40.0
;

GEQ_TO_40.0:
	MOVH	#1, R0			; R0/R3 = 1.0
	TSTH	@x(AP)			; Test the sign of X
	BGEQ	RETURN			; Branch if X >= 0
	MNEGH	R0, R0			; R0/R3 = -1
RETURN:	MOVO	R0, @htanh(AP)		; Store result in first argument
	RET				; Return to caller

;
; |X| <= 2**-59
;

OUT_X:	MOVO	@x(AP), @htanh(AP)	; Store result in first argument
	RET				; Return to caller

	.END
