MODULE FOR$ERRSNS (	! FORTRAN ERRSNS and save error info
	IDENT = '1-002', ! File: FORERRSNS.B32
	LINKAGE (FORTRAN)
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  FORTRAN Support Library
!
! ABSTRACT:
!
!
!	Return information about last FORTRAN error (ERRSNS).
!	Also an internal routine to save that information when
!	an error occurs in OWN storage.
!
! ENVIRONMENT:  User Mode - AST re-entrant
!
! AUTHOR:  Thomas N. Hastings, CREATION DATE:  8-Nov-1977
!
! MODIFIED BY:
!
! 	Thomas N. Hastings, 8-Nov-1977: VERSION 0
! 01	- original
! 0-4	- Fixed loop limit bug.  TNH 01-Dec-77
! 0-5	- Add optional 5th parameter.  TNH 16-Dec-77
! 0-6	- FOR$$ERRSNS_SAV takes 5 parameters.  TNH 30-Dec-77.
! 0-7	- Fix access violation in FOR$ERRSNS_W.  TNH 15-Feb-78.
! 0-8	- Change to STARLET library.  DGP 20-Apr-78
! 0-09	- Change REQUIRE files for VAX system build.  DGP 28-Apr-78
! 0-10	- Change STARLET to RTLSTARLE to avoid conflicts.  DGP 1-May-78
! 0-11	- Accept either FORTRAN error number or 32-bit condition value.  TNH 10-June-78
! 0-12	- Change file name to FORERRSNS.B32, and change the names of
!	   the REQUIRE files similarly.  JBS 14-NOV-78
! 1-001	- Update copyright statement and version number.  JBS 16-NOV-78
! 1-002	- Declare NULLPARAMETER and ACTUALPARAMETER for new BLISS 
!	   compiler.  JBS 22-NOV-78
!--

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
	FOR$ERRSNS: NOVALUE,		! Return error information about last error
	FOR$ERRSNS_W: NOVALUE,		! Same except word size args
	FOR$$ERRSNS_SAV: NOVALUE;	! Internal routine to save information

!
! INCLUDE FILES:
!
	REQUIRE 'RTLML:FORERR';		! FORTRAN error numbers
	REQUIRE 'RTLIN:RTLPSECT';	! Declare PSECT macro
	REQUIRE 'RTLML:MTHERR';		! Math library error numbers
	LIBRARY 'RTLSTARLE';	! STARLET library for macros and symbols
!
! MACROS:
!

!
! EQUATED SYMBOLS:
!
!	The following offsets are used to access OWN vectors, LOCAL vectors, and formals:
!
LITERAL
	NPARMAX = 5;			! No. of parameters max.
!
! PSECT DECLARATIONS:
!

	DECLARE_PSECTS (FOR);		! declare PSECTs for FOR$ facility

!
! OWN STORAGE:
!
OWN
	LAST_ERROR_INFO: VECTOR [NPARMAX+1],	! Last error info (non-AST level)
	LAST_AST_INFO: VECTOR [NPARMAX+1];	! Last error info (AST level)
						! 0th entry not used

!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
	LIB$AST_IN_PROG: ADDRESSING_MODE (GENERAL);	! TRUE if AST in progress

GLOBAL ROUTINE FOR$ERRSNS (	! FORTRAN get last error info
	FORT_ERR_NO,		! Optional adr. to get FORTRAN error no.
	RMS_STS,		! Optional adr. ro get RMS status
	RMS_STV,		! Optional adr. to get RMS/VMS value
	FORT_LUN,		! Optional adr. to get FORTRAN logical unit number
	VAX_11_COND_VAL)	! Optional adr. to get VAX-11 condition value
	:NOVALUE =			! No value returned
!++
! FUNCTIONAL DESCRIPTION:
!
!	Returns information about last FORTRAN error, if any, and clears it to 0
!	Separate data bases are kept for AST and non-AST level
!	so that they do not conflict.  That is the last error returned
!	is that which occurred at the level of the caller (AST level
!	or not AST level).  Therefore a modular re-entrant procedure
!	can CALL FOR$ERRSNS and still remain AST re-entrant
!	provided that FOR$ERRSNS is called after an I/O statement
!	with no intervening calls (which might call FOR$ERRSNS).
!	All parameters are optional.  A call with no parameters
!	has the effect of clearing the error information at the current level.
!	It is good practice to CALL FOR$ERRSNS before doing
!	I/O to initialize the OWN storage.  Otherwise a previous
!	I/O error may have left error information in the OWN storage.
!	Note: successful I/O operations do not affect the
!	error information OWN storage.
!
! FORMAL PARAMETERS:
!
!	[FORT_ERR_NO.wlu.r	Optional adr. to receive FORTRAN error no.
!	[RMS_STS.wlu.r		Optional adr. to receive RMS status
!	[RMS_STV.wlu.r		Optional adr. to receive RMS/VMS value
!	[FORT_LUN.wlu.r	Optional adr. to receive FORTRAN logical unit no.
!	[VAX_11_COND_VAL.wlc.r]]]]] Optional adr. to receive VAX-11 condition value
!
! IMPLICIT INPUTS:
!
!	VMS info whether an AST is in progress or not (using LIB$AST_IN_PROG)
!	Either LAST_ERROR_INFO vector or LAST_AST_INFO vector
!
! IMPLICIT OUTPUTS:
!
!	Either LAST_ERROR_INFO vector or LAST_AST_INFO vector is cleared
!	depending on the level of the caller (AST or in progress or not)
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	The OWN storage used to remember the last error is set to 0.
!--

    BEGIN

    BUILTIN NULLPARAMETER, ACTUALPARAMETER;

    LOCAL
	LAST_INFO: REF VECTOR[NPARMAX+1,LONG];	! Base pointer to either LAST_ERROR_INFO or LAST_AST_INFO


    !+
    ! Determine whether an AST is in progress or not and set up
    ! base pointer LAST_INFO to point to OWN storage for that level.
    !-

    LAST_INFO = (IF LIB$AST_IN_PROG () THEN LAST_AST_INFO ELSE LAST_ERROR_INFO);

    !+
    ! Copy appropriate OWN storage to the caller's parameters
    ! which are present and clear each OWN storage location.
    !-

    INCR I FROM 1 TO NPARMAX DO
	BEGIN
	IF NOT NULLPARAMETER (.I) THEN ACTUALPARAMETER(.I) = .LAST_INFO[.I];
	LAST_INFO[.I] = 0;
	END;

    !+
    ! Return
    !-

    RETURN
    END;

GLOBAL ROUTINE FOR$ERRSNS_W (	! FORTRAN get last error info - WORD values
				! This routine same as FOR$ERRSNS except for data size.
	FORT_ERR_NO,		! Optional adr. to get FORTRAN error no.
	RMS_STS,		! Optional adr. ro get RMS status
	RMS_STV,		! Optional adr. to get RMS/VMS value
	FORT_LUN,		! Optional adr. to get FORTRAN logical unit number
	VAX_11_COND_VAL)	! Optional adr. to get VAX-11 condition value
	:NOVALUE =			! No value returned
!++
! FUNCTIONAL DESCRIPTION:
!
!	FOR$ERRSNS and FOR$ERRSNS_W are the same routines except
!	for the data size returned.
!	Returns information about last FORTRAN error, if any, and clears it to 0
!	Separate data bases are kept for AST and non-AST level
!	so that they do not conflict.  That is the last error returned
!	is that which occurred at the level of the caller (AST level
!	or not AST level).  Therefore a modular re-entrant procedure
!	can CALL FOR$ERRSNS_W and still remain AST re-entrant
!	provided that FOR$ERRSNS_W is called after an I/O statement
!	with no intervening calls (which might call FOR$ERRSNS_W).
!	All parameters are optional.  A call with no parameters
!	has the effect of clearing the error information at the current level.
!	It is good practice to CALL FOR$ERRSNS_W before doing
!	I/O to initialize the OWN storage.  Otherwise a previous
!	I/O error may have left error information in the OWN storage.
!	Note: successful I/O operations do not affect the
!	error information OWN storage.
!
! FORMAL PARAMETERS:
!
!	[FORT_ERR_NO.wwu.r	Optional adr. to receive FORTRAN error no.
!	[RMS_STS.wwu.r		Optional adr. to receive RMS status
!	[RMS_STV.wwu.r		Optional adr. to receive RMS/VMS value
!	[FORT_LUN.wwu.r		Optional adr. to receive FORTRAN logical unit no.
!	[VAX_11_COND_VAL.wwu.r]]]]] Optional adr. to receive VAX-11 condition value<15:0>
!
! IMPLICIT INPUTS:
!
!	VMS info whether an AST is in progress or not (using LIB$AST_IN_PROG)
!	Either LAST_ERROR_INFO vector or LAST_AST_INFO vector
!
! IMPLICIT OUTPUTS:
!
!	Either LAST_ERROR_INFO vector or LAST_AST_INFO vector is cleared
!	depending on the level of the caller (AST or in progress or not)
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	The OWN storage used to remember the last error is set to 0.
!--

    BEGIN

    BUILTIN NULLPARAMETER, ACTUALPARAMETER;

    LOCAL
	NPARMAX_LONGS: VECTOR[NPARMAX,LONG];	! Five longwords to contain results from FOR$ERRSNS


    !+
    ! Get ERRSNS data into longword LOCAL storage
    !-

    FOR$ERRSNS (NPARMAX_LONGS[0], NPARMAX_LONGS[1], NPARMAX_LONGS[2],
	NPARMAX_LONGS[3], NPARMAX_LONGS[4]);

    !+
    ! Copy longwords back to caller's word parameters
    ! Parameters are 1-origin, VECTOR is 0-origin.
    !-

    INCR I FROM 1 TO NPARMAX DO
	IF NOT NULLPARAMETER (.I) THEN ACTUALPARAMETER(.I)<0,16> = .NPARMAX_LONGS[.I-1];

    !+
    ! Return
    !-

    RETURN
    END;

GLOBAL ROUTINE FOR$$ERRSNS_SAV (	! Internal FORTRAN routine to save last error info
				! Called whenever an error occurs
	FORT_ERR_NO,		! FORTRAN error number (0:120) or 32-bit cond value
				! for some other facility other than FOR$.
	RMS_STS,		! value to set RMS status
	RMS_STV,		! value to set RMS/VMS value
	FORT_LUN,		! value to set FORTRAN logical unit number
	VAX_11_COND_VAL)	! value to set VAX-11 condition value
	:NOVALUE =			! No value returned
!++
! FUNCTIONAL DESCRIPTION:
!
!	Called on every error condition.  Sets FORTRAN error info OWN storage
!	for use in sub-sequent calls by FOR$ERRSNS and FOR$ERRSNS_W.
!	Separate data bases are kept for AST and non-AST level
!	so that they do not conflict.  That is the last error returned
!	is that which occurred at the level of the caller (AST level
!	or not AST level).  Therefore a modular re-entrant procedure
!	can CALL FOR$ERRSNS_SAV and still remain AST re-entrant
!	Note: successful I/O operations do not affect the
!	error information OWN storage.
!	Non-FORTRAN specific errors should be indicated with:
!		FORT_ERR_NO = 32-bit condition value (not FOR$ facility)
!		VAX_11_COND_VAL = same, ie. OTS$_FATINTERR, OTS$_INTDATCOR
!	In this case, the FORTRAN error number stored will be FOR$K_NOTFORSPE
!	which has a value of 1 and indicated a non-FORTRAN specific error.
!
! FORMAL PARAMETERS:
!
!	FORT_ERR_NO.rlu.v	value to specify FORTRAN error number (0:120)
!				or 32-bit condition value for another facility error.
!	RMS_STS.wlu.v		value to set RMS status
!	RMS_STV.wlu.v		value to set RMS/VMS value
!	FORT_LUN.wlu.v		value to set FORTRAN logical unit no.
!	VAX_11_COND_VAL.wlc.v	value to set VAX-11 condition value
!
! IMPLICIT INPUTS:
!
!	VMS info whether an AST is in progress or not (using LIB$AST_IN_PROG)
!
! IMPLICIT OUTPUTS:
!
!	Either LAST_ERROR_INFO vector or LAST_AST_INFO vector is set
!	depending on the level of the caller (AST or in progress or not)
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	The OWN storage used to remember the last error is set.
!--

    BEGIN

    BUILTIN ACTUALPARAMETER;

    MAP
	VAX_11_COND_VAL : BLOCK[4, BYTE];	! Condition value
    LOCAL
	LAST_INFO: REF VECTOR[NPARMAX+1,LONG];	! Base pointer to either LAST_ERROR_INFO or LAST_AST_INFO


    !+
    ! Determine whether an AST is in progress or not and set up
    ! base pointer LAST_INFO to point to OWN storage for that level.
    !-

    LAST_INFO = (IF LIB$AST_IN_PROG () THEN LAST_AST_INFO ELSE LAST_ERROR_INFO);

    !+
    ! Copy all formals to OWN storage
    !-

    INCR I FROM 1 TO NPARMAX DO
	LAST_INFO[.I] = ACTUALPARAMETER(.I);

    !+
    ! Check FORTRAN error number, if already a 32-bit condition value
    ! change to FOR$K_NOTFORSPE to indicate a non-FORTRAN specific error
    ! (error number = 1).
    !-

    IF .FORT_ERR_NO GTRU FOR$K_MAX_ERR
    THEN
	LAST_INFO[1] = FOR$K_NOTFORSPE;

    !+
    ! Return
    !-

    RETURN
    END;
END				! end of module
ELUDOM
