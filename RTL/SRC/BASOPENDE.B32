MODULE BAS$$OPEN_DEFLT (			!
		IDENT = '1-040'			! File: BASOPENDE.B32 Edit:PLL1040
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  BASIC-PLUS-2 I/O Processing
!
! ABSTRACT:
!
!	This module contains BAS$$OPEN_DEFLT, the routine which
!	implicitly opens channel 0 for a BASIC-PLUS-2 program.
!
! ENVIRONMENT:  VAX-11 User Mode
!
! AUTHOR: John Sauter, CREATION DATE: 30-NOV-78
!
! MODIFIED BY:
!
! 1-001	- Original.  JBS 30-NOV-78
! 1-002	- Change REQUIRE file names from FOR... to OTS...  JBS 06-DEC-78
! 1-003	- Use symbols for LUN values for PRINT and INPUT.  JBS 07-DEC-78
! 1-004	- Change OPEN$K symbols to LUB$K symbols.  JBS 08-DEC-78
! 1-005	- Get LUB$K_PBUF_SIZ bytes for the prompt buffer.  JBS 12-DEC-78
! 1-006	- REQUIRE BASOPN to get default record length.  JBS 12-DEC-78
! 1-007	- Remove FILE_NAME_DESC, since BAS$$STOP_IO now gets the file
!	   name from the LUB.  JBS 12-DEC-78
! 1-008	- Use %REF to insure that the length argument to LIB$GET_VM is
!	   always a longword.  JBS 12-DEC-78
! 1-009	- Set up FAB fields RFM and ROP.  JBS 12-DEC-78
! 1-010	- Put attempted file name in the LUB in case the OPEN fails
!	   so badly that no name is returned.  JBS 19-DEC-78
! 1-011	- Put OPEN or CONNECT error status in the RAB in case it is not
!	   stored by the OPEN, CREATE or CONNECT call.  JBS 19-DEC-78
! 1-012	- Set up margin and default margin.  JBS 20-DEC-78
! 1-013	- Set record buffer size to the default if this is a new file.
!	   JBS 26-DEC-78
! 1-014	- Undo edit 11: make BAS$$STOP_IO extract the error code from
!	   the FAB if it is not in the RAB.  In support of this,
!	   we must tell BAS$STOP_IO whether the error happened on the
!	   $OPEN (OR $CREATE) or the $CONNECT.  JBS 27-DEC-78
! 1-015	- Open the terminal in CR format rather than PRN format.
!	   JBS 10-JAN-1979
! 1-016	- Set the TERM_FOR bit in the LUB to indicate terminal format.
!	   JBS 11-JAN-1979
! 1-017 - Signal Internal OTS failure rather than Program lost-Sorry
!	   on an OPEN to a wrong logical unit number.  JBS 15-JAN-1979
! 1-018	- Declare the OTS exit handler to purge I/O buffers and close
!	   the file.  JBS 24-JAN-1979
! 1-019	- Put two dollar signs on the non-user entry points.  JBS 26-JAN-1979
! 1-020	- Don't set record size in RAB because reading an EOF will clear
!	   it, even for fixed-length records.  JBS 31-JAN-1979
! 1-021	- Set SQO, since we will perform only sequential operations
!	   on the PRINT and INPUT files.  JBS 14-FEB-1979
! 1-022	- Use BASIOERR.REQ to define the I/O error codes.  JBS 20-FEB-1979
! 1-023	- Set the margin based on the BLS field returned in the FAB by
!	   OPEN, if the device being opened is a terminal.  JBS 22-FEB-1979
! 1-024	- Change BAS$$STOP to BAS$$STOP_IO, so that the channel number
!	   gets reported with the error message.  JBS 17-APR-1979
! 1-025	- Do not set RAB$B_RAC, record level does.  JBS 14-MAY-1979
! 1-026	- Make the margin 16 bits.  JBS 30-MAY-1979
! 1-027	- Mark the LUBs OPENed as being terminal format.  JBS 31-MAY-1979
! 1-028	- Do not use locate-mode processing, since it causes problems
!	   for BAS$MARGIN.  This is little loss, since RMS does not
!	   really do locate-mode processing on process permanent files,
!	   and channel 0 normally refers to process permanent files.
!	   JBS 04-JUN-1979
! 1-029	- Set the language byte in the LUB, so this file can be
!	   used only by BASIC programs.  This is no loss, since these
!	   LUNs are only intended for use by BASIC anyway.  JBS 30-JUN-1979
! 1-030	- If the device is a terminal, change it to PRN format,
!	   so it can be forcible.  JBS 10-JUL-1979
! 1-031	- If the LUB is opened with PRN format, mark it so.  JBS 12-JUL-1979
! 1-032	- PRN format requires VFC.  JBS 17-JUL-1979
! 1-033	- Change BAS$INPUT and BAS$PRINT to SYS$INPUT and SYS$OUTPUT.
!	   JBS 30-JUL-1979
! 1-034	- Use the BASIC-specific exit handler.  JBS 17-AUG-1979
! 1-035	- Make the initial margin on disk files be LUB$K_D_MARGIN, and on
!	   terminals be infinite.  JBS 24-AUG-1979
! 1-036	- Set up LUB$A_UBF.  JBS 15-NOV-1979
! 1-037 - Don't set the CIF or EOF bits in the FAB and APPEND bits in the LUB.
!	  DGP 26-Feb-80
! 1-038 - Set FAB$B_RAT and LUB$B_RAT so that BAS$REC_RSL0 will add CR to 
!	  records input from command files.  PLL 18-Aug-81
! 1-039 - Don't set FAB$B_RAT, RMS sets it.  PLL 19-Nov-81
! 1-040 - LIB$STOP should be declared EXTERNAL.  PLL 20-Nov-81
!--

!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!

REQUIRE 'RTLIN:OTSLNK';				! define linkages

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    BAS$$OPEN_DEFLT : CALL_CCB NOVALUE;		! Do a default open

!
! INCLUDE FILES:
!

REQUIRE 'RTLIN:RTLPSECT';			! Macros for defining psects

REQUIRE 'RTLML:OTSLUB';				! Logical Unit Block definitions

REQUIRE 'RTLIN:BASOPN';				! OPEN literals

REQUIRE 'RTLIN:BASIOERR';			! Define I/O error codes

LIBRARY 'RTLSTARLE';				! system definitions

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! PSECTS:
!
DECLARE_PSECTS (BAS);				! Declare psects for BAS$ facility
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    LIB$STOP : NOVALUE,				! signal fatal error
    BAS$$STOP_IO : NOVALUE,			! signals fatal I/O error
    LIB$GET_VM,					! get virtual storage
    BAS$$DECL_EXITH : NOVALUE;			! Declare BASIC exit handler

EXTERNAL
    BAS$$L_XIT_LOCK;				! True if exit handler already declared

!+
! The following are the BASIC error codes used in this module.
!-

EXTERNAL LITERAL
    BAS$K_IO_CHAALR : UNSIGNED (8),		! I/O channel already open
    BAS$K_SYNERR : UNSIGNED (8),		! Syntax error
    BAS$K_FATSYSIO_ : UNSIGNED (8),		! Fatal system I/O error
    BAS$K_FILATTNOT : UNSIGNED (8),		! File attributes not matched
    BAS$K_ILLUSA : UNSIGNED (8),		! Illegal Usage
    BAS$K_MAXMEMEXC : UNSIGNED (8);		! Maximum memory exceeded

EXTERNAL LITERAL
    OTS$_FATINTERR;				! OTS Fatal internal error


GLOBAL ROUTINE BAS$$OPEN_DEFLT 			! Default open
    : NOVALUE CALL_CCB =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Do a default open.  This routine is called when an input or
!	output statement is done to channel 0 ( = a negative LUN) and
!	it is not open.  This routine opens the LUN as a terminal format
!	file.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	The CCB, which is passed in a register.
!
! IMPLICIT OUTPUTS:
!
!	A lot of fields in the LUB.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Either opens a file, thus permitting use of channel 0
!	by BASIC I/O statements, or calls BAS$$STOP_IO, thus not
!	returning to its caller.
!
!--

    BEGIN

    EXTERNAL REGISTER
	CCB : REF BLOCK [0, BYTE];

    LOCAL
	OPEN_STATUS,				! RMS status returned by $OPEN or $CREATE
	CONNECT_STATUS,				! RMS status returned by $CONNECT
	FAB_BLOCK : BLOCK [FAB$C_BLN, BYTE],	! local FAB
	FAB : REF BLOCK [FAB$C_BLN, BYTE],	! pointer to FAB
	NAM_BLOCK : BLOCK [NAM$C_BLN, BYTE],	! local NAM block
	XAB_BLOCK : BLOCK [XAB$C_FHCLEN, BYTE],	! local XABFHC block
	FILE_NAME : BLOCK [NAM$C_MAXRSS, BYTE];	! text for file name

!+
! In BASIC, only channel 0 can go through default open.  This maps
! into one LUN for INPUT, LINPUT and INPUT LINE, and another LUN
! for PRINT and PRINT USING.  In the code below, we first do the
! common setups, and then a SELECTONE statement separates the
! setups for the two LUNs.
!-
    FAB = FAB_BLOCK;
    CH$FILL (0, FAB$C_BLN, .FAB);		! clear the FAB
    FAB [FAB$B_BID] = FAB$C_BID;		! this is a FAB
    FAB [FAB$B_BLN] = FAB$C_BLN;		! length of a FAB
    FAB [FAB$B_RFM] = FAB$C_VAR;		! Variable length records
    FAB [FAB$V_CR] = 1;				! Assume LF before record and CR after
    FAB [FAB$V_SQO] = 1;			! Only sequential operations
!+
! Set up the LUB.
!-
    CCB [LUB$A_FAB] = .FAB;			! Store FAB pointer in the LUB
    CCB [LUB$V_FORMATTED] = 1;			! This file must be formatted
    CCB [LUB$L_LOG_RECNO] = 1;			! We are on record number 1
    CCB [LUB$B_ORGAN] = LUB$K_ORG_TERMI;	! terminal organization
    CCB [LUB$B_RAT] = FAB [FAB$B_RAT];		! store FAB record attribute
!+
! Set up the right margin and default right margin.
!-
    CCB [LUB$W_D_MARGIN] = LUB$K_D_MARGIN;
    CCB [LUB$W_R_MARGIN] = .CCB [LUB$W_D_MARGIN];
    CCB [LUB$V_NOMARGIN] = 0;
    CCB [LUB$V_UNIT_0] = 1;			! This is BASIC channel 0
    CCB [LUB$V_TERM_FOR] = 1;			! File is in terminal format
!+
! Set up the RAB
!-
    CCB [RAB$B_BID] = RAB$C_BID;		! This is a RAB
    CCB [RAB$B_BLN] = RAB$C_BLN;		! Length of a RAB
    CCB [RAB$V_LOC] = 0;			! Do not do locate-mode GETs
    CCB [RAB$L_FAB] = .FAB;			! Store pointer to FAB
!+
! Set up the NAM block
!-
    CH$FILL (0, NAM$C_BLN, NAM_BLOCK);		! Clear the NAM block
    NAM_BLOCK [NAM$B_BID] = NAM$C_BID;		! This is a NAM block
    NAM_BLOCK [NAM$B_BLN] = NAM$C_BLN;		! Length of a NAM block
!+
! Set up file name pointers and lengths
!-
    NAM_BLOCK [NAM$L_RSA] = NAM_BLOCK [NAM$L_ESA] = FILE_NAME;
    NAM_BLOCK [NAM$B_RSS] = NAM_BLOCK [NAM$B_ESS] = NAM$C_MAXRSS;
    FAB [FAB$L_NAM] = NAM_BLOCK;		! Store pointer in FAB
!+
! Initialize the FHC XAB.
!-
    CH$FILL (0, XAB$C_FHCLEN, XAB_BLOCK);	! Clear XAB
    XAB_BLOCK [XAB$B_COD] = XAB$C_FHC;		! This is an FHC XAB
    XAB_BLOCK [XAB$B_BLN] = XAB$C_FHCLEN;	! Length of an FHC XAB
    FAB [FAB$L_XAB] = XAB_BLOCK;		! Store pointer in FAB
!+
! The remainder of the initialization is done differently depending
! on whether this is an input-type default open or an output-type
! default open.
!-

    SELECTONE (.CCB [LUB$W_LUN]) OF
	SET

	[LUB$K_LUN_INPU] : 			! INPUT statement
	    BEGIN
!+
! Set up a file name of SYS$INPUT:SYSINPUT.DAT
!-
	    FAB [FAB$B_DNS] = %CHARCOUNT ('SYSINPUT.DAT');
	    FAB [FAB$L_DNA] = UPLIT ('SYSINPUT.DAT');
	    FAB [FAB$B_FNS] = %CHARCOUNT ('SYS$INPUT:');
	    FAB [FAB$L_FNA] = UPLIT ('SYS$INPUT:');
	    CCB [LUB$B_RSL] = %CHARCOUNT ('SYS$INPUT:SYSINPUT.DAT');
	    CCB [LUB$A_RSN] = UPLIT ('SYS$INPUT:SYSINPUT.DAT');
	    CCB [RAB$V_PMT] = 1;		! Use prompt buffer on read
!+
! Point the RAB to the Prompt buffer.
! It is allocated dynamically.
! It must be deallocated when the file is closed.
!-
	    BEGIN

	    LOCAL
		GET_VM_RESULT;

	    IF ( NOT (GET_VM_RESULT = LIB$GET_VM (%REF (LUB$K_PBUF_SIZ), CCB [RAB$L_PBF])))
	    THEN
		BAS$$STOP_IO (BAS$K_MAXMEMEXC);

	    END;
	    CCB [RAB$B_PSZ] = 0;		! Will be filled in as needed
	    FAB [FAB$V_GET] = 1;		! only allow reading from this LUN
	    FAB [FAB$V_SHRGET] = 1;		! allow others to read also
	    CCB [LUB$V_READ_ONLY] = 1;		! We will only read from this LUN
	    CCB [LUB$V_OLD_FILE] = 1;		! File must already exist
	    END;
!+
! Default OPEN for BASIC PRINT statement.
!-

	[LUB$K_LUN_BPRI] : 			! PRINT statement
	    BEGIN
!+
! Set the file name to SYS$OUTPUT:SYSOUTPUT.DAT
!-
	    FAB [FAB$B_DNS] = %CHARCOUNT ('SYSOUTPUT.DAT');
	    FAB [FAB$L_DNA] = UPLIT ('SYSOUTPUT.DAT');
	    FAB [FAB$B_FNS] = %CHARCOUNT ('SYS$OUTPUT:');
	    FAB [FAB$L_FNA] = UPLIT ('SYS$OUTPUT:');
	    CCB [LUB$B_RSL] = %CHARCOUNT ('SYS$OUTPUT:SYSOUTPUT.DAT');
	    CCB [LUB$A_RSN] = UPLIT ('SYS$OUTPUT:SYSOUTPUT.DAT');
	    FAB [FAB$V_PUT] = 1;		! Only allow PUTs to this LUN
	    FAB [FAB$V_NIL] = 1;		! no others may access this file
	    END;

	[OTHERWISE] :
	    LIB$STOP (OTS$_FATINTERR);
	TES;

!<BLF/PAGE>

!+
! Now open the file.
!-
    OPEN_STATUS = (IF (.CCB [LUB$V_OLD_FILE]) THEN $OPEN (FAB = .FAB) ELSE $CREATE (FAB = .FAB));
!+
! If the OPEN succeeded, check for a terminal format file on a terminal device,
! and change to PRN format if so.  This is so that the terminal is forcible.
!-

    IF (.OPEN_STATUS)
    THEN
	BEGIN

	IF ((.FAB [FAB$L_DEV] AND DEV$M_TRM) NEQ 0)
	THEN
	    BEGIN
!+
! Close and re-open the FAB, since we do not have $MODIFY.
!-

	    IF ( NOT $CLOSE (FAB = .FAB)) THEN BAS$$STOP_IO (BAS$K_IOERR_REC);

!+
! Turn off CR and turn on PRN.
!-
	    FAB [FAB$V_CR] = 0;
	    FAB [FAB$V_PRN] = 1;
	    CCB [RAB$L_RHB] = CCB [LUB$W_BAS_VFC];
	    FAB [FAB$B_RFM] = FAB$C_VFC;
!+
! Re-open the user's file.
!-
	    OPEN_STATUS = $OPEN (FAB = .FAB);
	    CCB [LUB$V_FORCIBLE] = 1;
	    END;

	END;

    IF (.OPEN_STATUS) THEN CONNECT_STATUS = $CONNECT (RAB = .CCB);

!+
! Store away the Directory ID in case CLOSE needs to delete the file.
! Also save the IFI.
!-
    CH$MOVE (NAM$S_DID, NAM_BLOCK [NAM$W_DID], CCB [LUB$W_DID]);
    CCB [LUB$W_IFI] = .FAB [FAB$W_IFI];
!+
! If we have an expanded name string or a resultant name string, point
! the LUB to it instead of the user-supplied name, to improve error
! messages.
!-

    IF (.NAM_BLOCK [NAM$B_RSL] NEQA 0)
    THEN
	BEGIN
	CCB [LUB$A_RSN] = .NAM_BLOCK [NAM$L_RSA];
	CCB [LUB$B_RSL] = .NAM_BLOCK [NAM$B_RSL];
	END
    ELSE

	IF (.NAM_BLOCK [NAM$B_ESL] NEQA 0)
	THEN
	    BEGIN
	    CCB [LUB$A_RSN] = .NAM_BLOCK [NAM$L_ESA];
	    CCB [LUB$B_RSL] = .NAM_BLOCK [NAM$B_ESL];
	    END;

!+
! If OPEN or CREATE got an error, give an appropriate error message.
!-

    IF ( NOT .OPEN_STATUS) THEN BAS$$STOP_IO (BAS$K_IOERR_OPE);

!+
! If CONNECT got an error, give an appropriate error message.
!-

    IF ( NOT .CONNECT_STATUS) THEN BAS$$STOP_IO (BAS$K_IOERR_CON);

!+
! If the device opened is a terminal, set the TERM_DEV bit in the LUB
! and set the default margin based on the width of the terminal, which is
! returned in the BLS field of the FAB.
!-

    IF ((.FAB [FAB$L_DEV] AND DEV$M_TRM) NEQ 0)
    THEN
	BEGIN
	CCB [LUB$V_TERM_DEV] = 1;
	CCB [LUB$W_D_MARGIN] = .FAB [FAB$W_BLS];
	CCB [LUB$W_R_MARGIN] = 0;
	CCB [LUB$V_NOMARGIN] = 1;
	END;

!+
! If the file just opened was already in existence, perform
! consistency checks between the file's attributes and the
! default parameters.
!-

    IF (.CCB [LUB$V_OLD_FILE])
    THEN
	BEGIN
!+
! Organization check: must be sequential.
!-

	IF (.FAB [FAB$B_ORG] NEQ FAB$C_SEQ) THEN BAS$$STOP_IO (BAS$K_FILATTNOT);

!+
! If the file is in PRN format, record the fact.
!-

	IF (.FAB [FAB$V_PRN]) THEN CCB [LUB$V_PRN] = 1;

!+
! Compute the record size and store it in the LUB.
!-
	CCB [LUB$W_RBUF_SIZE] = MAXU (.FAB [FAB$W_MRS], .XAB_BLOCK [XAB$W_LRL], BAS$K_DEF_RECLE);
	END					! end of old file processing
    ELSE
	BEGIN
!+
! The following processing is done only if this is a new file.
!-
!+
! Set the record buffer size to the default.
!-
	CCB [LUB$W_RBUF_SIZE] = BAS$K_DEF_RECLE;
	END;					! end of new file processing

!+
! Don't permit the 'undefined' record format, since it can be used
! only with block I/O.
!-

    SELECTONE (.FAB [FAB$B_RFM]) OF
	SET

	[FAB$C_FIX, FAB$C_VAR, FAB$C_VFC] : 	! ok, do nothing.
	;

	[OTHERWISE] :
	    BAS$$STOP_IO (BAS$K_ILLUSA);
	TES;

!+
! Allocate a record buffer.
!-
    BEGIN

    LOCAL
	GET_VM_RESULT;

    GET_VM_RESULT = LIB$GET_VM (%REF (.CCB [LUB$W_RBUF_SIZE]), CCB [LUB$A_RBUF_ADR]);

    IF ( NOT .GET_VM_RESULT) THEN BAS$$STOP_IO (BAS$K_MAXMEMEXC);

    END;
!+
! Allocate dynamic storage for the file name so that the name can be
! used later for error diagnostics.  Point the LUB to the new location.
! Indicate that the space pointed to must be deallocated when the file
! is closed.
!-
    BEGIN

    LOCAL
	GET_VM_RESULT,
	OLD_ADDRESS;

    OLD_ADDRESS = .CCB [LUB$A_RSN];
    GET_VM_RESULT = LIB$GET_VM (%REF (.CCB [LUB$B_RSL]), CCB [LUB$A_RSN]);

    IF ( NOT .GET_VM_RESULT) THEN LIB$STOP (.GET_VM_RESULT);

    CH$MOVE (.CCB [LUB$B_RSL], .OLD_ADDRESS, .CCB [LUB$A_RSN]);
    CCB [LUB$V_VIRT_RSN] = 1;
    END;
!+
! Set those RAB fields that seldom change.
!-
    CCB [RAB$L_UBF] = .CCB [LUB$A_RBUF_ADR];
    CCB [RAB$W_USZ] = .CCB [LUB$W_RBUF_SIZE];
    CCB [LUB$A_UBF] = .CCB [LUB$A_RBUF_ADR];
!+
! Clear LUB$A_FAB to indicate that the FAB is no longer present.
!-
    CCB [LUB$A_FAB] = 0;
!+
! Indicate that the file is now open for BASIC.
!-
    CCB [LUB$B_LANGUAGE] = LUB$K_LANG_BAS;
    CCB [LUB$V_OPENED] = 1;
!+
! Declare the BASIC exit handler to purge I/O buffers and close the
! file when the image exits.
!-

    IF ( NOT BAS$$L_XIT_LOCK) THEN BAS$$DECL_EXITH ();

    RETURN;
    END;					! of routine BAS$$OPEN_DEFLT

END						! end of module BAS$$OPEN_DEFLT

ELUDOM
