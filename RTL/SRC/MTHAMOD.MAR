	.TITLE	MTH$AMOD
	.IDENT	/2-001/		; File: MTHAMOD.MAR

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;
;
; FACILITY: MATH LIBRARY
;++
; ABSTRACT:
;	This module contains routine MTH$AMOD:
;	Returns the value:
;		arg1 - (int(arg1/arg2))*arg2
;
;
;--
;
; AUTHOR:
;	Jonathan M. Taylor, 4-Aug-77: Version 0
;
; MODIFIED BY:
;	R. Schaefer, 10-Nov-77
;	Steven B. Lionel, 18-Sept-1979
;
;
;

	.SBTTL	HISTORY		; Detailed Current Edit History


; Edit History for Version 2 of MTH$AMOD
;
; 0-3	R. Schaefer	Alter algorithm to ignore integer part from EMODF
; 0-4	- Interchange EMODF 1st and 3rd operands FPA bug.  TNH 28-Dec-77
; 0-5	- Remove MTH$FLAG_JACKET.  TNH 4-July-78
; 1-001	- Update version number and copyright notice.  JBS 16-NOV-78
; 1-002	- Add "_" to the PSECT directive.  JBS 21-DEC-78
; 2-001 - Add check of quotient exponent for loss of significance.
;	  SPR 11-23605  SBL 4-Sept-1979

	.SBTTL	DECLARATIONS

;
; INCLUDE FILES:
;
;

;
; EXTERNAL SYMBOLS:
;
	.DSABL	GBL
	.EXTRN	MTH$K_SIGLOSMAT		; Significance lost error
	.EXTRN	MTH$$SIGNAL		; Signal Math error
;
; MACROS:
;	NONE
;

;
; PSECT DECLARATIONS:
	.PSECT	_MTH$CODE	PIC, SHR, LONG, EXE, NOWRT

;
; EQUATED SYMBOLS:
;
	K_BIAS		= 128		; Exponent bias for F_floating
	K_PRECISION	= 24		; Fraction precision in bits
;
; OWN STORAGE:
;	NONE
;

	.SBTTL	MTH$AMOD - REAL*4 remainder

;++
; FUNCTIONAL DESCRIPTION:
;	Return the remainder of arg1/arg2 in floating format
;	Remainder = arg1 - (int(arg1/arg2))*arg2
;
;
; CALLING SEQUENCE:
;	Remainder.wf.v =MTH$AMOD (dividend.rf.r, divisor.rf.r)
;	
;
;
; INPUT PARAMETERS:
;
	dividend	= 4		; Dividend argument
	divisor		= 8		; Divisor argument
;	
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	MTH$_SIGLOSMAT - Significance loss in math library.  If the
;	quotient of arg1/arg2 is greater in magnitude than the
;	precision of the datatype. (2**23 for F_floating)
;	If this occurs, the default result is the reserved operand.
;	SS$_FLTOVF - Floating overflow
;	SS$_ROPRAND - Reserved operand
;	
;--



	.ENTRY	MTH$AMOD,	^M<>
	DIVF3	@divisor(AP), @dividend(AP), R0	; R0 = arg1/arg2
;
;   Check the quotient to see if we have lost any significant bits.
;   If we have, signal error MTH$_SIGLOSMAT.
;
	CMPZV	#7, #8, R0, #<K_BIAS+K_PRECISION>
	BGEQ	ERROR			; If so, its an error
	EMODF	#1, #0, R0, R1, R1	; R1 = fract(arg1/arg2)
	SUBF2	R1, R0			; R0 = int(arg1/arg2)			
	MULF2	@divisor(AP), R0	; R0 = int(arg1/arg2)*arg2
	SUBF3	R0, @dividend(AP), R0	; R0 = arg1 - int(arg1/arg2)*arg2
	RET

;+
; Come here if significance has been lost.
;-
ERROR:
	ASHL	#1, #15, R0		; R0 = reserved operand
	MOVZBL	#MTH$K_SIGLOSMAT, -(SP)	; Error code
	CALLS	#1, G^MTH$$SIGNAL	; Signal the error
	RET				; Return to caller


	.END
