	.TITLE	COB$DIVQ_R8	COBOL Divide Quadwords
	.IDENT	/1-012/		; File: COBDIVQ.MAR EDIT:PDG1012

;
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;
;
; FACILITY: COBOL ARITHMETIC
;++
; ABSTRACT:
;	This module contains the routine which divides two
;	quadwords, producing a quadword result.
;
;--
;
; VERSION: 1
;
; HISTORY:
;
; AUTHOR:
;	John Sauter, 26-DEC-78
;
; MODIFIED BY:
;
;
;

	.SBTTL	HISTORY		; Detailed Current Edit History


; Edit History for Version 1 of COBDIVQ
;
; 1-001	- Original from COBOL-74, MODULE FASB4 ROUTINE FAST_DIV_4
; 1-002	- Make the entry point symbol global.  JBS 03-JAN-1979
; 1-003	- Minor editing cleanups.  JBS 11-JAN-1979
; 1-004 - Complete rewrite.  MLJ 11-Mar-1979
; 1-005 - 19 digit temps and other minor changes.  MLJ 13-Mar-1979
; 1-006	- Correct DIVP round towarrds zero problem.  PDG 12-Jul-1979
; 1-007 - Make it work correctly with overlapping input and output
;	  operands.   RKR 24-SEPT-79
; 1-008 - Cosmetic changes.  RKR 21-OCT-79
; 1-009 - Complete rewrite.  PDG 15-Jun-1981
;	  This includes several of the ideas from FAST_DIV_4.
; 1-010 - Added EDIT field for use in checkin's audit trail.  LB 28-JUL-81
; 1-011 - Updated copyright date.  LB 30-JUL-81
; 1-012	- Some bug fix.  PDG 9-Aug-1981

	.SBTTL	DECLARATIONS

;
; INCLUDE FILES:
;

;
; EXTERNAL SYMBOLS:
;	NONE
;

;
; MACROS:
;	NONE
;

;
; PSECT DECLARATIONS:
	.PSECT	_COB$CODE	PIC, SHR, LONG, EXE, NOWRT

;
; EQUATED SYMBOLS:
;	NONE
;

;
; OWN STORAGE:
;
;	NONE
;

	.SBTTL	COB$DIVQ_R8

;++
; FUNCTIONAL DESCRIPTION:
;
;	Divides two quadwords, producing a quadword result.
;
; CALLING SEQUENCE:
;
;	JSB COB$DIVQ_R8 (divisor.rq.r, dividend.rq.r, quotient.wq.r)
;
;	Arguments are passed in R6, R7 and R8.
;
; INPUT PARAMETERS:
;	
;	DIVISOR.rq.r		The divisonr.
;	DIVIDEND.rq.r		The dividend.
;
; IMPLICIT INPUTS:
;
;	All of the trap bits in the PSL are assumed off.
;
; OUTPUT PARAMETERS:
;
;	QUOTIENT.wq.r		The result of the division; DIVIDEND/DIVISOR.
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	NONE
;
; SIDE EFFECTS:
;
;	Destroys R0 through R8.
;
;	If the divisor equals zero, a "divide by zero" exception is raised.
;	Integer overflow occurs if only if the largest negative integer is
;	divided by -1.  The result is the largest negative integer.
;	
; NOTES:
;
;	In comments below, the following conventions are used:
;
;	Equations describe the current state of the registers.
;	A prefix of "S" indicates the longword is to be considered signed.
;	A prefix of "U" indicates the longword is to be considered unsigned.
;	A primed value represents the an value of a register.
;--

COB$DIVQ_R8::
	CMPV	#31, #1, (R6), 4(R6)	; Divisor in longword range?
	BNEQ	200$			; No, do slow code
;+
;
; The divisor is a longword, so (hopefully), a single EDIV will work
;
;-
	EDIV	(R6), (R7), R1, R0	; Try the EDIV
	BVS	100$			; Branch if failed
	MOVL	R1, (R8)+		; Store quotient
	EXTV	#31, #1, R1, (R8)+	; Store high-order longword
	RSB				; Return
100$:
;+
;
; The divisor is a longword, but a single EDIV doesn't work
;
;-
	MOVQ	(R7), R2		; Grab dividend
	MOVL	(R6), R6		; Grab divisor
	;
	; We want to compute:
	;
	; SR3x2^32 + UR2 = SR6 x (SR1x2^32 + UR0) + remainder
	;
	; where the remainder is of the same sign as the numerator,
	; and is less (in absolute value) than the divisor.
	;
	EXTV	#31, #1, R3, R4		; Sign extend dividend to R4-R3-R2
	EDIV	R6, R3, R1, R3		; First EDIV (can't overflow)
	;
	; SR4x2^32 + UR3' = SR3' = SR6 x SR1 + SR3
	;
	; Now try the second EDIV
	;
	EDIV	R6, R2, R0, R5
	BVC	107$
	;
	; We know that the quotient will fit into 32 bits, but because, (in
	; the true quad result of the divide), bit 32 doesn't equal bit 31,
	; EDIV sets overflow and trashes the results.  We borrow (carry?) from
	; the high longword of the quotient so that bits 32 and 31 of the true
	; quadword quotient will be equal.  The signs of the remainder and the
	; dividend may differ, but that's okay (for now).
	;
	XORL3	R6, R3, R5		; Determine sign of true result
	BLSS	103$			; Branch if true result is negative
	SUBL2	R6, R3			; Subtract SR6x2^32 from dividend
	INCL	R1			; Increase quotient by 2^32
	BRB	104$
103$:	ADDL2	R6, R3			; Add SR6x2^32 to dividend
	DECL	R1			; Decrease quotient by 2^32
104$:	EDIV	R6, R2, R0, R5		; Re-try the second EDIV
107$:	;
	; SR3x2^32 + UR2 = SR6 x SR0 + SR5
	;
	; SR3'x2^32 + UR2  = SR6 x SR1 x 2^32 + SR3x2^32 + UR2
	;	= SR6 x SR1 x 2^32 + SR6 x SR0 + SR5
	;	= SR6 x (SR1x2^32 + SR0) + SR5		(getting close)
	;
	BGEQ	108$			; Make R0 unsigned
	DECL	R1
108$:	;
	; SR3'x2^32 + UR2 = SR6 x (SR1x2^32 + UR0) + SR5
	;
	; Fix up the result if the remainder has the wrong sign
	;
	XORL3	R5, R4, R3		; Signs same?
	BGEQ	102$			; If so, OK.
	TSTL	R5			; See if remainder is zero
	BEQL	102$			; If so, the quotient is correct
	TSTL	R4			; Was original dividend plus or minus?
	BGEQ	105$
	INCL	R0			; Increment the result
	ADWC	#0, R1
	BRB	102$
105$:	DECL	R0			; Decrement the result
	SBWC	#0, R1
102$:	MOVQ	R0, (R8)		; Store result
	RSB				; And return (remainder = psuedo R5)
200$:
;+
;
; The divisor doesn't fit into a signed longword
;
;-
	CLRL	-(SP)			; Clear negate flag
	MOVQ	(R7), R2		; Grab dividend into R3-R2
	BGEQ	201$			; Skip if positive
	INCB	(SP)			; Toggle negate flag
	MNEGL	R2, R2			; Negate dividend
	ADWC	#0, R3
	MNEGL	R3, R3
201$:	MOVQ	(R6), R6		; Grab divisor into R7-R6
	BGEQ	202$			; Skip if positive
	INCB	(SP)			; Toggle negate flag
	MNEGL	R6, R6			; Negate divisor
	ADWC	#0, R7
	MNEGL	R7, R7
202$:	;
	; Normalize the divisor
	;
	BISL3	#1, R7, R0		; Make sure high longword not zero
	CVTLF	R0, R0			; To find most significant bit
;;;;;;;	BGTR	207$			; Branch if everything okay
	BLSS	203$			; Branch if divisor still negative!
207$:	CLRL	R4	; needed?	; Clear R4 in case we don't shift
	EXTZV	#7, #8, R0, R0		; Move the exponent into low byte
	SUBB3	R0, #159, R0		; Un-normalize the exponent
	BLSS	213$	; needed?	; Don't shift right! (loses accuracy)
	ASHQ	R0, R6, R6		; Shift the divisor into R7-R6
	;
	; Shift dividend by same amount, into R4-R3-R2
	;
	SUBL3	R0, #32, R1		; Get offset in bits for R4
	EXTZV	R1, R0, R3, R4		; Grab portion for R4 (must be extZv!)
	ASHQ	R0, R2, R2		; Shift lower two
213$:	;
	; Divide R4-R3-R2 by R7-R6 giving R5-R4 remainder R3-R2
	;
	; First, divide R4-R3 by R7 giving R4 remainder R3
	;
	CLRL	R5			; Clear high longword of quotient
	EDIV	R7, R3, R1, R0		; R4-R3 / R7 = R5-R4 rem R3
;;;;;;;	BVC	222$			; Branch if no overflow
	BVS	291$			; Branch if we had overflow
222$:	MOVQ	R0, R3			; Quotient in R5-R4, remainder in R3
	;
	;	SR7 x SR4 + SR3 = SR4'x2^32 + UR3'
	;
	; Multiply back and subtract to compute remainder by using the formula:
	;
	;	SR4'x2^64 + UR3'x2^32 + UR2 - (SR7x2^32 + UR6) x SR4
	;    =	SR3x2^32 + UR2 - UR6 x SR4
	;
295$:	EMUL	R6, R4, #0, R0		; R1-R0 = UR6 x SR4
	BBC	#31, R6, 209$		; Consider R6 unsigned
	ADDL2	R4, R1
209$:	SUBL2	R0, R2			; Subtract the product
	SBWC	R1, R3
	BGEQ	205$			; Was estimate too big?
204$:	DECL	R4			; Yes, decrement estimate
	SBWC	#0, R5
	ADDL2	R6, R2			; And add back divisor
	ADWC	R7, R3
	BLSS	204$			; And continue until positive
205$:	;
	; See if we must negate the quotient
	;	
	BLBC	(SP)+, 206$		; Skip if no negate required
	MNEGL	R4, R4			; Negate result
	ADWC	#0, R5
	MNEGL	R5, R5
206$:	MOVQ	R4, (R8)		; Store quotient
	RSB				; Return
;+
;
; This code was moved out of line so that 'usual' cases don't cause branches.
;
;-
203$:	;
	; The divisor was still negative!  This is because the original divisor
	; was equal to -2^63.  The only possible quotients are zero and one,
	; depending on whether the dividend also equals 2^32.
	;
	EXTZV	#31, #1, R3, R5		; Get low longword of result
	MOVQ	R5, (R8)		; Store quotient (R6 = 0, remember?)
	TSTL	(SP)+			; Throw away the negate flag
	RSB				; And return
;+
;
; This code was moved out of line so that 'usual' cases don't cause branches.
;
;-
291$:	;
	; Since we had overflow, we know that, before normalizing:
	;
	; 2^63   >= dividend >= 2^62
	; 2^32+7 >= divisor  >= 2^31
	; 2^32   >= quotient >= 2^31	(true quotient, that is)
	;
	; Also, on overflow, EDIV sets the remainder to zero.
	;
	; We can compute the desired results via:
	;
	; ( (R4-R3) - R7x2^31 ) / R7 + 2^31 = R1 rem R0
	;
	; Unless this also causes an overflow, in which case, we know that
	; quotient must equal 2^32.
	;
	EMUL	#1@31, R7, #0, R0	; Multiply by -2^31
	ADDL2	R3, R0			; Compute the difference
	ADWC	#0, R1
	ADDL2	R4, R1
	EDIV	R7, R0, R1, R0		; Try the EDIV one more time
	BVS	292$			; Oh, damn!
	BBCS	#31, R1, 222$		; Add 2^31 to the quotient
	HALT				; We should NEVER get here
292$:	SUBL3	R7, R4, R0		; Compute the remainder
	CLRL	R1			; Set low longword of quotient
	INCL	R5			; Set high longword of quotient
	BRB	222$			; Join common code

	.END
