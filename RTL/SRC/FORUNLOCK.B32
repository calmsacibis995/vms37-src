MODULE FOR$UNLOCK (				! Implements FORTRAN UNLOCK statement
		IDENT = '1-002'			! File: FORUNLOCK.B32 Edit: JBS1002
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY: FORTRAN Support Library - User Callable
!
! ABSTRACT:
!
!	This module implements the FORTRAN UNLOCK statement.
!
! ENVIRONMENT: User access mode; mixture of AST level or not.
!
! AUTHOR: Steven B. Lionel, CREATION DATE: 17-May-1979
!
! MODIFIED BY:
!
! 1-001 - Original.  SBL 17-May-1979
! 1-002	- Move the BUILTIN ACTUALCOUNT into the routine, since the next
!	  BLISS compiler will require it to be there.  While we are here,
!	  clean up the source text a little.  Note that this edit does not
!	  change the code.  JBS 22-Aug-1980
!--

!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!

REQUIRE 'RTLIN:OTSLNK';				! define all linkages

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    FOR$UNLOCK;					! FORTRAN UNLOCK statement

!
! INCLUDE FILES:
!

LIBRARY 'RTLSTARLE';				! System symbols

REQUIRE 'RTLML:FORERR';				! FORTRAN error number definitions

REQUIRE 'RTLML:FORPAR';				! Inter-module constants

REQUIRE 'RTLIN:RTLPSECT';			! Define DECLARE_PSECTS macro

REQUIRE 'RTLML:OTSLUB';				! Get LUB offsets

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    FOR$$IOSTAT_HND,				! Error handler
    FOR$$SIGNAL_STO : NOVALUE,			! convert error code and signal
    FOR$$CB_PUSH : JSB_CB_PUSH NOVALUE,		! Get a control block
    FOR$$CB_POP : JSB_CB_POP NOVALUE;		! Return a control block

!
! PSECT DECLARATIONS:
!
DECLARE_PSECTS (FOR);				! Declare PSECTS for FOR$ facility


GLOBAL ROUTINE FOR$UNLOCK (UNIT, ERR_EQL) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Call CB_PUSH to get a control block for this UNIT.
!	Do an RMS $FREE on the unit.
!	Return I/O system to previous state.
!
! FORMAL PARAMETERS:
!
!	UNIT.rlu.v		Unit number (call by value)
!	ERR_EQL.rl.v		If 1, return IOSTAT value
!				If omitted or zero, signal all errors
!
! IMPLICIT INPUTS:
!
!	LUB$V_OPENED		1 if file previously opened
!	LUB$V_NOTSEQORG		1 if file not sequential organization
!
! IMPLICIT OUTPUTS:
!
!
! ROUTINE VALUE:
!
!	An IOSTAT value.
!
! SIDE EFFECTS:
!
!	All locked records on the unit are unlocked.  If the unit is
!	not open, or is not relative or indexed organization, the error
!	FOR$UNLERR - UNLOCK error
!	is signalled.
!
!--

    BEGIN

    GLOBAL REGISTER
	CCB = K_CCB_REG : REF BLOCK [, BYTE];

    BUILTIN
	ACTUALCOUNT;

    LOCAL
	L_UNWIND_ACTION : VOLATILE,
	L_ERR_EQL_PRES : VOLATILE,
	STATUS;

    ENABLE
	FOR$$IOSTAT_HND (L_UNWIND_ACTION, L_ERR_EQL_PRES);

!+
! Set up unwind action and flag if ERR= or IOSTAT was present.
!-
    L_UNWIND_ACTION = FOR$K_UNWINDNOP;

    IF (ACTUALCOUNT () GTR 1) THEN L_ERR_EQL_PRES = .ERR_EQL ELSE L_ERR_EQL_PRES = 0;

!+
! Get a LUB for this unit.
! On return, CCB points to the current control block.
!-
    FOR$$CB_PUSH (.UNIT, LUB$K_LUN_MIN);
!+
! Error action is now to pop the LUB.
!-
    L_UNWIND_ACTION = FOR$K_UNWINDPOP;
!+
! If the file is not open, or is not relative or indexed organization,
! signal error FOR$_UNLERR.
!-

    IF (( NOT .CCB [LUB$V_OPENED]) OR ( NOT .CCB [LUB$V_NOTSEQORG])) THEN FOR$$SIGNAL_STO (FOR$K_UNLERR);

!+
! Now unlock the file.  Signal errors except for RMS$_RNL  which we
! choose to ignore (no records were locked).
!-

    IF ( NOT $FREE (RAB = .CCB))
    THEN
	BEGIN

	WHILE (.CCB [RAB$L_STS] EQL RMS$_RSA) DO
	    BEGIN
	    $WAIT (RAB = .CCB);
	    $FREE (RAB = .CCB)
	    END;

	IF (( NOT .CCB [RAB$L_STS]) AND (.CCB [RAB$L_STS] NEQU RMS$_RNL))	!
	THEN
	    FOR$$SIGNAL_STO (FOR$K_UNLERR);

	END;

!+
! Return the I/O system to its last state.
!-
    FOR$$CB_POP ();
!+
! Return a success IOSTAT code
!-
    RETURN 0;
    END;					! of routine FOR$UNLOCK

END						! of module FOR$UNLOCK

ELUDOM
