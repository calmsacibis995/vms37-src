MODULE LIB$ASN_WTH_MBX	(

	IDENT = '1-007'		! File: LIBASNMBX.B32  Edit: RKR1007

			) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	VMS Run Time Library (LIB)
!
! ABSTRACT:
!
!	This module contains a routine to create a unique mailbox and
!	assign a channel to a device with this mailbox assigned.
!
! ENVIRONMENT:	VAX/VMS Operating System
!
! AUTHOR:	Darrell Duffy	, CREATION DATE: 8-November-1979
!
! MODIFIED BY:
!
! 1-001 - Original.  8-Nov-1979
! 1-002 - SBL1002 - Make FAO control string PIC.  Also return error
!	  if $FAO fails.  SBL 10-Dec-1979
! 1-003 - Allow null second and third arguments.  SBL 16-Jan-1980
! 1-004 - Enhance to recognize additonal classes of string descriptors
!	  by copying the DEVNAM string into an internal buffer if
!	  we suspect it does not "read" like a CLASS_S string
!	  descriptor.
!	  RKR 29-MAY-1981
! 1-005 - Revise enhancement to accomplish the same thing by using
!	  LIB$ANALYZE_SDESC_R3 to fill in a local fixed-string descr.,
!	  rather than doing a copy operation.  This saves dragging in
!	  LIB$SCOPY and LIB$VM if this routine is linked with
!	  /NOSYSSHR.  RKR 4-SEP-1981.
! 1-006 - Add General Addressing for all external references.  DGP 25-Sep-1981.
! 1-007 - Redirect jsb's from LIB$ANALYZE_SDESC_R3 to
!	  LIB$ANALYZE_SDESC_R2.  RKR 18-NOV-1981.
!--

%SBTTL	'Definitions'

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! TABLE OF CONTENTS:
!


!
! INCLUDE FILES:
!

	REQUIRE 'RTLIN:STRLNK';	! for linkage to LIB$ANALYZE_SDESC_R2
	LIBRARY 'RTLSTARLE';
	REQUIRE 'RTLIN:RTLPSECT';

!
! MACROS:
!

!
! EQUATED SYMBOLS:
!


!
! PSECT DEFINITIONS:
!
	DECLARE_PSECTS (LIB);


!
! OWN STORAGE:
!


!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
	LIB$ANALYZE_SDESC_R2 : LIB$ANALYZE_SDESC_JSB_LINK ;

%SBTTL	'LIB$ASN_WTH_MBX  Assign to a Device with a Mailbox'
GLOBAL ROUTINE LIB$ASN_WTH_MBX (

	DEVNAM, 	! device name
	MAXMSG, 	! max messages in mailbox
	BUFQUO, 	! buffer quota for mailbox
	DEVCHN, 	! device channel
	MBXCHN		! macilbox channel

				) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine is used to assign a channel with a unique mailbox
!	for obtaining attention messages or network messages.  The 
!	mailbox is a unique mailbox which is not known by a logical 
!	name in the group logical name table.  The reason that this is 
!	desireable is that if more than one copy of the image is 
!	running in the same group the mailboxes will be the same and 
!	the mailbox messages will interfere.
!
!	The mailbox is refered to by physical name MBcuu instead of
!	logical name to save overhead in creating its name.
!
! FORMAL PARAMETERS:
!
!	DEVNAM.rt.dx	Address of a descriptor of the device name
!	MAXMSG.rl.r	Address of longword value of max messages in 
!			mailbox
!			If omitted, the system supplies a default value
!	BUFQUO.rl.r	Address of longword value of buffer quota for 
!			mailbox
!			If omitted, the system supplies a default value
!	DEVCHN.ww.r	Address to return the device channel as a word
!	MBXCHN.ww.r	Address to return the mailbox channel as a word
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Status from the system services
!	or from LIB$ANALYZE_SDESC_R2 if it fails.
!
! SIDE EFFECTS:
!
!	NONE
!
!--


    BEGIN

    LITERAL
	MBXSIZ = 10 ;			! Max size of a mailbox name

    LOCAL
	STATUS,				! Service status
	CHNCHAR : BLOCK [DIB$K_LENGTH, BYTE], ! Channel characteristics
	DIBDSC : VECTOR [2],		! Descriptor of CHNCHAR
	FAODSC : BLOCK [8, BYTE],	! FAO control string descriptor
	LOC_FIX_DESC : BLOCK [8, BYTE],	! local fixed-string descriptor
	MBXBUF : VECTOR [MBXSIZ, BYTE],	! Buffer to build mailbox name
	MBXLST : VECTOR [2],		! FAO list for mailbox name
	MBXDSC : VECTOR [2],		! Descriptor of mailbox name 
					! buffer
	PTR;				! General pointer

    MAP
	DEVNAM : REF BLOCK [, BYTE] ;	! Device name descriptor

    BUILTIN
	NULLPARAMETER;

!+
! 	First create the mailbox, with only owner protection
!-

    STATUS = $CREMBX (			! Create a mailbox
	    CHAN   = .MBXCHN,		! Return channel to caller
	    MAXMSG = (			! Maximum number of messages
		    IF NULLPARAMETER (2)
		    THEN 0
		    ELSE ..MAXMSG),
	    BUFQUO = (			! Buffer quota
		    IF NULLPARAMETER (3)
		    THEN 0
		    ELSE ..BUFQUO),
	    PROMSK = %X'FF00',		! System and Owner only RWED
	    LOGNAM = 0			! No logical name
		     );

    IF NOT .STATUS			! Return any error status here
    THEN RETURN .STATUS ;

    DIBDSC [0] = DIB$K_LENGTH;	! Build descriptor for char buffer
    DIBDSC [1] = CHNCHAR;

    STATUS = $GETCHN (			! Obtain the mailbox name
	    CHAN   = .(.MBXCHN) <0, 16, 0>, ! Mailbox channel
	    PRIBUF = DIBDSC		! Primary char buffer
		     );

    IF NOT .STATUS			! Return service status if error
    THEN RETURN .STATUS ;



!
!	Build parameters for FAO
!

    PTR = .CHNCHAR [DIB$W_DEVNAMOFF];	! Offset to the name

    IF .PTR EQL 0			! No device name returned?
    THEN  RETURN STATUS = SS$_IVDEVNAM ;! Return invalid device name

    MBXLST [0] = CHNCHAR + .PTR;	! Data list has pointer to the 
					! name
    MBXLST [1] = .CHNCHAR [DIB$W_UNIT];	! The unit number to convert

    MBXDSC [0] = MBXSIZ;		! buffer size
    MBXDSC [1] = MBXBUF;		! Address of the buffer

    !+
    ! Build FAO control string.
    !-

    FAODSC [DSC$B_CLASS] = DSC$K_CLASS_S;	! Static class
    FAODSC [DSC$B_DTYPE] = DSC$K_DTYPE_T;	! Text string
    FAODSC [DSC$W_LENGTH] = %CHARCOUNT ('_!AC!UW:');
    FAODSC [DSC$A_POINTER] = UPLIT BYTE ('_!AC!UW:');

    STATUS = $FAOL (			! Build the whole mailbox name
	CTRSTR = FAODSC,		! Control string descriptor
	OUTLEN = MBXDSC [0],		! Length goes back in descriptor
	OUTBUF = MBXDSC,		! Descriptor is here
	PRMLST = MBXLST			! Data list is here
		   );

    IF NOT .STATUS
    THEN RETURN .STATUS;			! Return FAO error code

!+
! If it cannot be readily determined that the device name string
! descriptor "reads" like a CLASS_S descriptor, we construct a local 
! fixed-length string descriptor to point to the "new" class of string.
! The length and address fields in the descriptor are filled with info 
! returned by calling LIB$ANALYZE_SDESC_R2.
!-
    IF .DEVNAM [DSC$B_CLASS] GTRU DSC$K_CLASS_D
    THEN
	BEGIN
	LOCAL
	    STAT;		! status from LIB$ANALYZE_SDESC_R2

	!+
	! Get length and address of DEVNAM string and put in descriptor.
	!-
	STAT = LIB$ANALYZE_SDESC_R2 ( .DEVNAM ;
				      LOC_FIX_DESC [DSC$W_LENGTH], 
				      LOC_FIX_DESC [DSC$A_POINTER] ) ;
	!+
	! If string class unrecognized, quit.
	!-
	IF NOT .STAT THEN RETURN .STAT ;

	!+
	! Fill in rest of fixed-length string descriptor
	!-
	LOC_FIX_DESC [DSC$B_CLASS]  = DSC$K_CLASS_S ;
	LOC_FIX_DESC [DSC$B_DTYPE]  = DSC$K_DTYPE_T ;

	END;

!+
! Now do the assign
!-
    STATUS = $ASSIGN (			! Assign a channel to the device
	    DEVNAM = (IF .DEVNAM [DSC$B_CLASS] GTRU DSC$K_CLASS_D 
			THEN LOC_FIX_DESC 	! use local descriptor
			ELSE .DEVNAM),		! else use caller's
	    CHAN   = .DEVCHN,		! Place to put channel number
	    MBXNAM = MBXDSC		! Name we built with FAO
		     );

    RETURN .STATUS			! Return final status

    END;
END				!End of module
ELUDOM
