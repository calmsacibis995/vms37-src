MODULE BAS$IO_END (				! BASIC End I/O statement
		IDENT = '1-023'			! File: BASIOEND.B32 Edit:DGP1023
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY: BASIC Support Library - user callable
!
! ABSTRACT:
!
!	This module terminates a BASIC I/O statement, writes
!	last record if output, and pops up the I/O system to
!	a previously active I/O statement if any.
!
! ENVIRONMENT: User access mode; mixture of AST level or not
!
! AUTHOR: Donald G. Petersen, CREATION DATE: 19-Mar-78
!
! MODIFIED BY:
!
! 0-14	- If ISB$B_ERR_NO is non-zero, SIGNAL its contents. JMT
!		14-Jan-78
!	Donald G. Petersen, 19-Mar-78 : VERSION 1-01
! 1-01	-  original BASIC
! 1-02	- debugging.  DGP 07-Jun-78
! 1-03	- debug.  DGP 07-Jun-78
! 1-05	- If there is a Prompt outstanding at I/O end, make it a Print.
!	  DGP 28-Sep-78
! 1-06	- Change declaration of CCB from EXTERNAL to GLOBAL
!	   DGP 09-Nov-78
! 1-07	- Change to JSB linkage.  DGP 14-Nov-78
! 1-009	- Add device names to REQUIRE files and update copyright
!	   notice.  JBS 29-NOV-78
! 1-010	- Change LUB$B_LUN to LUB$W_LUN.  JBS 05-DEC-78
! 1-011	- Change REQUIRE file names from FOR... to OTS...  JBS 06-DEC-78
! 1-012 - Change dispatch table references to longword.  DGP 11-Dec-78
! 1-013	- Change calls to FOR$$CB_POP to BAS$$CB_POP.  JBS 29-DEC-78
! 1-014 - Change reference to FOR$$FREE_VM to LIB$FREE_VM.  DGP 16-Jan-79
! 1-015	- Use 32 bit addresses for externals.  JBS 27-JAN-1979
! 1-016	- If ISB$W_FMT_LEN is zero, don't try to free any object
!	   time format.  JBS 12-MAR-1979
! 1-017 - Change PRINT_POS to longword.  DGP 19-Mar-79
! 1-018 - Clear ISB$W_FMT_LEN before calling CB_POP.  DGP 29-May-79
! 1-019 - Don't actually deallocate the format string.  DGP 30-May-79
! 1-020	- Use language-specific dispatah tables.  JBS 26-JUN-1979
! 1-021	- Use ISB symbols for dispatching.  JBS 12-JUL-1979
! 1-022	- Set up ISB$A_USER_FP.  JBS 27-JUL-1979
! 1-023 - Reset LUB$V_FORM_CHAR (format character pending flag) if ISB$V_PRINT_INI
!	  is still set indicating that there were no element transmitters.  DGP
!	  07-Mar-80
!--

!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
!	LINKAGES
!

REQUIRE 'RTLIN:OTSLNK';				! Initialize all linkages

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    BAS$IO_END : NOVALUE;			! End I/O statement

!
! INCLUDE FILES:
!

REQUIRE 'RTLML:OTSISB';				! I/O statement block (ISB)

REQUIRE 'RTLML:OTSLUB';				! needed only for LUB length

REQUIRE 'RTLIN:OTSMAC';				! macros

REQUIRE 'RTLIN:RTLPSECT';			! Define DECLARE_PSECTS macro

REQUIRE 'RTLML:BASPAR';				! BASIC inter-module parameters

LIBRARY 'RTLSTARLE';				! STARLET library for macros and symbols

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! PSECT DECLARATIONS:
!
DECLARE_PSECTS (BAS);				! declare PSECTs for BAS$ facility
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL LITERAL
    OTS$_FATINTERR;				! OTS Fatal Internal error

EXTERNAL
    OTS$$A_CUR_LUB : ADDRESSING_MODE (GENERAL),	! Adr of current LUB/ISB/RAB
!+
! Array of user data formatter (UDF) level of abstraction.
!-
    BAS$$AA_UDF_PR9 : VECTOR;

EXTERNAL ROUTINE
    BAS$PRINT,					! BASIC Print initialize
    BAS$OUT_T_DX_S,				! BASIC output text element transmitter
    BAS$OUT_T_DX_C,				! BASIC output text element transmitter
    BAS$OUT_T_DX_B,				! BASIC output text element transmitter
    LIB$FREE_VM,				! Return dynamically allocated virtual memory
    BAS$$CB_POP : JSB_CB_POP NOVALUE,		! Pop entire I/O system back to previous LUB/ISB/RAB
    LIB$STOP : NOVALUE,				! Signal OTS errors
    BAS$$SIGNAL : NOVALUE;			! Signal an error with a small error number


GLOBAL ROUTINE BAS$IO_END : NOVALUE = 		!

!++
! FUNCTIONAL DESCRIPTION:
!
!	Complete the processing of a BASIC I/O statement.  Any prompt
!	which has not been shown on the terminal (because it was not
!	followed by an input element) is turned into a PRINT.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	OTS$$A_CUR_LUB		current I/O control block
!	ISB$V_PRINT_INI		a Print statement was initialized
!	ISB$B_STTM_TYPE		I/O statement type code - index to
!				dispatch table entry.
!	FOR$A_UDF_PR1		Array of user data formatters
!				(UDF level of abstraction).
!	ISB$W_FMT_LEN		No. of char. allocated to object-time format or 0
!	ISB$A_FMT_BEG		Adr. of dynamically allocated object-time
!	ISB$B_ERR_NO		Last continuable error to occur in the state-
!				ment or 0.  SIGNAL if non-zero!
!				format array or 0 if none.
!	LUB$V_TERM_DEV		Indicates that the current device is a terminal.
!	LUB$L_PRINT_POS		Current cursor position.
!	ISB$V_P_FORM_CH		The format character that followed the last prompt
!	RAB$B_PSZ		Prompt buffer size
!	RAB$L_PBF		Address of the Prompt buffer
!
! IMPLICIT OUTPUTS:
!
!	ISB$W_FMT_LEN		Set to 0
!	ISB$A_FMT_BEG		Set to 0
!	LUB$V_FORM_CHAR		flag indicating a format character
!	RAB$B_PSZ		Prompt buffer size
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    GLOBAL REGISTER
	CCB = K_CCB_REG : REF BLOCK [, BYTE];	! current control block

    CCB = .OTS$$A_CUR_LUB;
!+
! If the print initialized flag is still set then there were no element transmitters
! and the format flag ought to be turned off before doing the PUT.
!-
    IF .CCB [ISB$V_PRINT_INI] AND (.CCB [ISB$B_STTM_TYPE] EQL ISB$K_ST_TY_PRI)
    THEN
	CCB [LUB$V_FORM_CHAR] = 0;
!+
! Call appropriate UDF termination routine
!-
    JSB_UDF9 (BAS$$AA_UDF_PR9 + .BAS$$AA_UDF_PR9 [.CCB [ISB$B_STTM_TYPE] - ISB$K_BASSTTYLO + 1]);
!+
! If this statement has an object-time format array allocated,
! set the length and address fields back to zero so CB_POP works correctly.
!-

    IF (.CCB [ISB$W_FMT_LEN] NEQ 0)
    THEN
	BEGIN
	CCB [ISB$W_FMT_LEN] = 0;
	CCB [ISB$A_FMT_BEG] = 0;
	END;

!+
! Check to see if there is an outstanding Prompt.  If there is and this
! is a terminal device, this means that
! an Input with a Prompt and no element transmitter was just processed.
! Do a PRINT of the prompt buffer.  This is a case of recursive I/O.
!-

    IF ((.CCB [RAB$B_PSZ] NEQU 0) AND .CCB [LUB$V_TERM_DEV])
    THEN
	BEGIN

	LOCAL
	    T_CCB,				! temp for CCB-needed because CCB is a
	    					! REF BLOCK
	    T_UNIT_NO,				! Unit on which the Prompt is pending
	    T_FORM_CHAR,			! temporary format char. from Prompt
	    T_DESC : BLOCK [8, BYTE],		! temporary desc. for Print string
	    T_PRINT_POS;			! temporary storage for print position

	T_UNIT_NO = (IF .CCB [LUB$W_LUN] LSS 0 THEN 0	! Unit 0 which is -1 or -2 internally
	ELSE .CCB [LUB$W_LUN]);
	T_DESC [DSC$W_LENGTH] = .CCB [RAB$B_PSZ];
	T_DESC [DSC$B_DTYPE] = DSC$K_DTYPE_T;
	T_DESC [DSC$B_CLASS] = DSC$K_CLASS_S;
	T_DESC [DSC$A_POINTER] = .CCB [RAB$L_PBF];
	T_FORM_CHAR = .CCB [ISB$V_P_FORM_CH];
	T_PRINT_POS = .CCB [LUB$L_PRINT_POS] - .CCB [RAB$B_PSZ];
	CCB [RAB$B_PSZ] = 0;
!+
! Initialize the Print of the outstanding Prompt.
!-
	BAS$PRINT (.T_UNIT_NO);
	T_CCB = .OTS$$A_CUR_LUB;
	BEGIN

	BUILTIN
	    FP;

	LOCAL
	    FMP : REF BLOCK [, BYTE];

	MAP
	    T_CCB : REF BLOCK [, BYTE];

	FMP = .FP;
	T_CCB [ISB$A_USER_FP] = .FMP [SF$L_SAVE_FP];
	T_CCB [LUB$L_PRINT_POS] = .T_PRINT_POS;
	END;

	CASE .T_FORM_CHAR FROM BAS$K_SEMI_FORM TO BAS$K_NO_FORM OF
	    SET

	    [BAS$K_SEMI_FORM, BAS$K_COMMA_FOR] :
!+
! The dangling Prompt ended in a semicolon or a comma format char.
! Note that all processing associated with comma format character
! has already been done by the Prompt handler so we will make this
! look like a semicolon format character.
!-
		BAS$OUT_T_DX_S (T_DESC);

	    [BAS$K_NO_FORM] :
!+
! Prompt ended with no format character.
! Carriage control for Prompts is contained explicitly in the Prompt
! buffer.  This Print will now be done using VFC so we must subtract
! two from the length for the carriage control already in the buffer.
!-
		BEGIN
		T_DESC [DSC$W_LENGTH] = .T_DESC [DSC$W_LENGTH] - 2;
		BAS$OUT_T_DX_B (T_DESC);
		END;
	    TES;

	BAS$IO_END ();
	END
    ELSE
!+
! Otherwise, just discard any prompt that may be left.  Prompting is
! not defined on non-terminal devices, anyway.
!-
	CCB [RAB$B_PSZ] = 0;

!+
! Indicate that we are done with this I/O statement.  If we are the last
! user of this LUB, it will be deallocated.  If we are doing recursive
! I/O, the I/O system is restored to the unit we interrupted.
! Clear ISB$W_FMT_LEN so that CB_POP doesn't try to deallocate the format
! string.
!-
    CCB [ISB$W_FMT_LEN] = 0;
    BAS$$CB_POP ();
    RETURN;
    END;					! End of routine

END						!End of module BAS$IO_END

ELUDOM
