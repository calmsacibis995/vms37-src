MODULE BAS$RSTS_FIELD (				! FIELD statement
		IDENT = '1-022'			! File: BASRSTSFI.B32 Edit:FM1022
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  VAX-11 BASIC Miscellaneous
!
! ABSTRACT:
!
!	This module contains the RSTS-compatable FIELD functions.
!	A FIELD variable is semi-interpreted, and routines in this
!	module "declare" such a variable, copy data to and from it,
!	and purge it when the block it was in is exited.
!
! ENVIRONMENT:  VAX-11 User Mode
!
! AUTHOR: John Sauter, CREATION DATE: 27-FEB-1979
!
! MODIFIED BY:
!
! 1-001	- Original.  JBS 27-FEB-1979
! 1-002	- Rearrange FIELD_SET so that the compiler can call it conveniently
!	   once for a FIELD statement.  JBS 01-MAR-1979
! 1-003	- Add a statement type parameter to FIELD_COPY.  JBS 02-APR-1979
! 1-004	- Correct STR$COPY to STR$COPY_DX.  JBS 03-APR-1979
! 1-005	- Re-order some parameters to make things easier on the BASIC-PLUS-2
!	   compiler.  JBS 18-MAY-1979
! 1-006	- Today the compiler began producing code for the FIELD
!	   statement, so begin debugging.  JBS 22-MAY-1979
! 1-007	- Add OPEN, CLOSE and KILL entry points.  JBS 24-MAY-1979
! 1-008	- Complete coding of the new entry points.  JBS 25-MAY-1979
! 1-009	- Add BAS$$FIELD_INIT.  JBS 04-JUN-1979
! 1-010	- Fix a bug in KILL which made it run forever.  JBS 07-JUN-1979
! 1-011	- Allow a virtual array to be fielded, but only if it is used
!	   exclusively for block I/O.  JBS 22-JUN-1979
! 1-012	- Add BAS$FIELD_COP_R.  JBS 13-JUL-1979
! 1-013	- Change calls to STR$COPY.  JBS 16-JUL-1979
! 1-014	- Set up ISB$A_USER_FP.  JBS 25-JUL-1979
! 1-015	- Call STR$FREE1_DX only for variables not already FIELDed.
!	   JBS 02-AUG-1979
! 1-016	- Call BAS$$CB_GET, so we don't have to be in the sharable
!	   library.  JBS 22-AUG-1979
! 1-017	- Make negative string lengths back up the address but set
!	   the variable's length to zero.  JBS 28-FEB-1980
! 1-018 - When opening a file, validate variables which may have been
!	   invalidated by the implied close.  JBS 23-MAY-1980
! 1-019 - Add 2 to lub$k_ilun_min before calling bas$$cb_push to force an
!	  error when -7 or -8 LUNs are used, at the same time put the code that
!	  opens channel 0 for upgrading bas$field_set to the level of the other
!	  I/O support routines.  FM 17-sep-80
! 1-020 - Make SYM$Q_ROOT global so that BAS$CLOSE can access it.
!	  PL 2-JUN-81
! 1-021 - BAS$CLOSE will not need SYM$Q_ROOT after all, so make it OWN again.
!	  PL 16-Jun-81
! 1-022 - Undo 19.  We can now do I/O to #0, becuase BAS$PUT will use foreign
!	  buffer mechanism to do PUTs to #0.  FM 9-JUL-81.
!--

!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!

REQUIRE 'RTLIN:OTSLNK';				! Define linkages

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    BAS$FIELD_SET : NOVALUE,			! Process a FIELD statement
    BAS$FIELD_VAR : CALL_CCB NOVALUE,		! Declare a FIELD variable
    BAS$FIELD_CLEAR : NOVALUE,			! Undeclare a FIELD variable
    BAS$FIELD_COPY : NOVALUE,			! Reference such a variable
    BAS$FIELD_COP_R : NOVALUE,			! Reference such a variable
    BAS$FIELD_PURGE : NOVALUE,			! Purge field variables
    BAS$FIELD_OPEN : NOVALUE,			! A file was just opened
    BAS$FIELD_CLOSE : NOVALUE,			! A file was just closed
    BAS$$FIELD_KILL : CALL_CCB NOVALUE,		! CLOSE appendage
    BAS$$FIELD_INIT : NOVALUE;			! Initialize the FIELD list

!
! INCLUDE FILES:
!

REQUIRE 'RTLIN:RTLPSECT';			! Macros for defining psects

REQUIRE 'RTLML:OTSLUB';				! Logical unit block definitions

REQUIRE 'RTLML:OTSISB';				! ISB definitions

REQUIRE 'RTLIN:BASFRAME';			! BASIC frame structure

LIBRARY 'RTLSTARLE';				! System definitions

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!

LITERAL
    STMT_TYPE_LSET = 0,				! LSET statement
    STMT_TYPE_RSET = 1;				! RSET statement

!
! PSECTS:
!
DECLARE_PSECTS (BAS);				! Declare psects for BAS$ facility
!
! OWN STORAGE:
!

OWN
    SYM$Q_ROOT : VECTOR [2] INITIAL (0, 0);	! Root for symbol table

!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    BAS$$STOP : NOVALUE,			! Signal fatal error
    BAS$$STOP_IO : NOVALUE,			! Signal fatal I/O error
    LIB$GET_VM,					! Get virtual memory
    LIB$FREE_VM,				! Free virtual memory
    BAS$$CB_PUSH : JSB_CB_PUSH NOVALUE,		! Load register CCB
    BAS$$CB_POP : JSB_CB_POP NOVALUE,		! Done with register CCB
    BAS$$CB_GET : JSB_CB_GET NOVALUE,		! Load CCB with current LUB
    STR$COPY_DX,				! Copy a string (LSET)
    STR$FREE1_DX,				! Free a string
    BAS$RSET,					! Copy a string (RSET)
    BAS$$OPEN_ZERO : NOVALUE;			! Open channel 0

!+
! The following are the error codes used in this module.
!-

EXTERNAL LITERAL
    BAS$K_MAXMEMEXC : UNSIGNED (8),		! Maximum memory exceeded
    BAS$K_PROLOSSOR : UNSIGNED (8),		! Program lost, sorry
    BAS$K_IO_CHANOT : UNSIGNED (8),		! I/O channel not open
    BAS$K_ILLILLACC : UNSIGNED (8),		! Illegal or illogical access
    BAS$K_FIEOVEBUF : UNSIGNED (8),		! Field overflows buffer
    BAS$K_ILLFIEVAR : UNSIGNED (8),		! Illegal FIELD variable
    BAS$K_ILLIO_CHA : UNSIGNED (8);		! Illegal I/O channel

!<BLF/PAGE>

!+
! The following field represents a symbol table entry.
!-

FIELD
    BAS$FIELD_SYM =
	SET
	SYM$A_NEXT = [0, 0, %BPADDR, 0],	! Next symbol table entry
	SYM$A_PREV = [%UPVAL, 0, %BPADDR, 0],	! Previous entry
	SYM$L_CHAN = [%UPVAL*2, 0, %BPVAL, 0],	! I/O channel
	SYM$L_OFFSET = [%UPVAL*3, 0, %BPVAL, 0],	! Offset into I/O buffer
	SYM$L_LEN = [%UPVAL*4, 0, %BPVAL, 0],	! Number of bytes referenced
	SYM$L_DECL = [%UPVAL*5, 0, %BPVAL, 0],	! Scope of the declaration
	SYM$A_VAR = [%UPVAL*6, 0, %BPADDR, 0],	! Address of descriptor
	SYM$V_INVALID = [%UPVAL*7, 0, 1, 0]	! "Invalid" bit
	TES;

LITERAL
    SYM$K_LENGTH = %UPVAL*8;			! Number of bytes to allocate


GLOBAL ROUTINE BAS$FIELD_SET 			! Execute a FIELD statement
    : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Execute a FIELD statement.  The compiler pushes all of the
!	variables in the FIELD statement from right to left and then
!	calls this routine.  As a result, the formal parameters are
!	arranged rather strangely.  This routine goes through them
!	calling BAS$FIELD_VAR for each variable.
!
!	The FIELD statement is formatted as follows:
!
!	FIELD #chan, exp BY var, exp BY var, ...
!
! FORMAL PARAMETERS:
!
!   The formal parameters are rather strange, for the convenience of
!   the compiler.  Because the compiler likes to push parameters in the
!   order in which it encounters them, the pairs of optional parameters
!   are first, followed by the fixed parameters.  The list below is of
!   the parameters in reverse order.
!
!	CHAN.rl.v	An I/O channel.  Must be open.
!	DECL.rl.v	An indication of the scope of the declaration
!			of the variable.  This is a pointer to the major
!			frame (R11) if the variable is in the scope of
!			the major procedure, or a pointer to the minor
!			frame (R10) if the variable is in the scope of
!			a DEF.
!
!   The following two parameters can be repeated as often as required.
!
!	LEN.rl.v	The number of bytes referenced by the variable
!	VAR.wt.d	The variable.  Since references to it ignore its
!			previous (non-FIELD) contents, we free it here.
!
! IMPLICIT INPUTS:
!
!	SYM$Q_ROOT.mq	The queue of FIELD variables : the symbol table.
!	LUB$V_VA_USE	If this bit is set, the file has been used
!			with a virtual array, and so cannot be used
!			with the FIELD statement.
!
! IMPLICIT OUTPUTS:
!
!	SYM$Q_ROOT.mq
!	LUB$V_BLK_USE	This bit is set to prevent the file from
!			being used with a virtual array.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Adds symbols to the interpreter's symbol table, and/or modifies
!	symbols already there.
!
!--

    BEGIN

    GLOBAL REGISTER
	CCB = K_CCB_REG : REF BLOCK [, BYTE];

    BUILTIN
	FP,
	ACTUALCOUNT,
	ACTUALPARAMETER;

    LOCAL
	FMP : REF BLOCK [, BYTE],
	NUMARGS,
	DECL,
	CHAN,
	LEN,
	VAR,
	OFFSET,
	LUN_NO,
	RBF,
	RSZ;

    FMP = .FP;
!+
! Start at the beginning of the buffer.
!-
    OFFSET = 0;
!+
! Fetch, from the pecucliar argument list, the DECL and CHAN parameters.
!-
    NUMARGS = ACTUALCOUNT ();
    CHAN = ACTUALPARAMETER (.NUMARGS);
    DECL = ACTUALPARAMETER (.NUMARGS - 1);
!+
! Compute the logical unit number corresponding to the channel, and
! validate it.
!-

    IF (.CHAN LSS 0) THEN BAS$$STOP (BAS$K_ILLIO_CHA);

    LUN_NO = (IF (.CHAN EQL 0) THEN LUB$K_LUN_INPU ELSE .CHAN);
    BAS$$CB_PUSH (.LUN_NO, LUB$K_ILUN_MIN);
    CCB [ISB$A_USER_FP] = .FMP [SF$L_SAVE_FP];

    IF ( NOT .CCB [LUB$V_OPENED])
    THEN
	IF  (.LUN_NO LSS 0)
	THEN
	    BEGIN
	    BAS$$OPEN_ZERO (.FMP [SF$L_SAVE_FP] );
	    END
	ELSE
	    BEGIN
	    BAS$$STOP_IO (BAS$K_IO_CHANOT);
	    END;

    IF (.CCB [LUB$A_CLOSE] EQLA 0) THEN CCB [LUB$A_CLOSE] = BAS$$FIELD_KILL;

    IF (.CCB [LUB$A_CLOSE] NEQA BAS$$FIELD_KILL) THEN BAS$$STOP_IO (BAS$K_ILLILLACC);

    CCB [LUB$V_BLK_USE] = 1;

    IF (.CCB [LUB$V_VA_USE]) THEN BAS$$STOP_IO (BAS$K_ILLILLACC);

!+
! Fetch the buffer address and length for later use
!-
    RBF = .CCB [LUB$A_RBUF_ADR];
    RSZ = .CCB [LUB$W_RBUF_SIZE];
!+
! Go through the optional arguments, associating each variable with
! its place in the I/O buffer.  We scan the variables from left to
! right in the FIELD statement in case the same variable appears twice:
! it should end up with its right-most association.
!-

    DECR ARGNO FROM .NUMARGS - 2 TO 1 BY 2 DO
	BEGIN

	LOCAL
	    LEN,
	    VAR;

	LEN = ACTUALPARAMETER (.ARGNO);
	VAR = ACTUALPARAMETER (.ARGNO - 1);

	IF (.OFFSET + .LEN GTR .RSZ) THEN BAS$$STOP_IO (BAS$K_FIEOVEBUF);

	BAS$FIELD_VAR (.CHAN, .OFFSET, .LEN, .DECL, .VAR, .RBF);
	OFFSET = .OFFSET + .LEN;
	END;

!+
! We are done with register CCB
!-
    BAS$$CB_POP ();
    RETURN;
    END;					! end of BAS$FIELD_SET


ROUTINE BAS$FIELD_VAR (				! "Declare" a field variable
	CHAN, 					! The I/O channel whose buffer this variable references
	OFFSET, 				! The offset in the buffer
	LEN, 					! The number of bytes referenced
	DECL, 					! Scope of the declaration
	VAR, 					! Address of this variable's descriptor
	RBF					! Start of the record buffer
    ) : CALL_CCB NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	"Declares" a field variable.  Such a variable refers to the
!	buffer of an I/O channel.  To avoid leaving obsolete addresses
!	in a user's program each reference to a FIELD variable is
!	interpreted.  This routine puts the variable in the interpreter
!	symbol table so it can be found by BAS$FIELD_COPY.
!
! FORMAL PARAMETERS:
!
!	CHAN.rl.v	An I/O channel.  Need not be open yet.
!	OFFSET.rl.v	The offset into that channel's buffer of the
!			start of the area referenced by the variable
!	LEN.rl.v	The number of bytes referenced by the variable
!	DECL.rl.v	An indication of the scope of the declaration
!			of the variable.  This is a pointer to the major
!			frame (R11) if the variable is in the scope of
!			the major procedure, or a pointer to the minor
!			frame (R10) if the variable is in the scope of
!			a DEF.
!	VAR.wt.d	The variable.  Its storage is freed and it is
!			made to point to the buffer, so the compiled
!			code can do read accesses through it.
!	RBF.ra.v	Address of the file's record buffer.
!
! IMPLICIT INPUTS:
!
!	SYM$Q_ROOT.mq	The queue of FIELD variables : the symbol table.
!
! IMPLICIT OUTPUTS:
!
!	SYM$Q_ROOT.mq
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Adds a symbol to the interpreter's symbol table, or modifies one
!	already there.
!
!--

    BEGIN

    EXTERNAL REGISTER
	CCB : REF BLOCK [, BYTE];

    MAP
	VAR : REF BLOCK [8, BYTE];

    LOCAL
	SYM : REF BLOCK [SYM$K_LENGTH, BYTE] FIELD (BAS$FIELD_SYM),
	SEARCH_DONE;

!+
! If the symbol table root has not yet been initialized, initialize it.
!-

    IF (.SYM$Q_ROOT [0] EQL 0)
    THEN
	BEGIN

	LOCAL
	    AST_STATUS;

	AST_STATUS = $SETAST (ENBFLG = 0);

	IF (.SYM$Q_ROOT [0] EQL 0)
	THEN
	    BEGIN
	    SYM$Q_ROOT [0] = SYM$Q_ROOT [1] = SYM$Q_ROOT [0];
	    END;

	IF (.AST_STATUS EQL SS$_WASSET) THEN $SETAST (ENBFLG = 1);

	END;

!+
! Search the queue to see if this variable is already on it.
!-
    SYM = .SYM$Q_ROOT [0];
    SEARCH_DONE = 0;

    DO
	BEGIN

	IF (.SYM EQLA SYM$Q_ROOT)
	THEN
	    SEARCH_DONE = 1
	ELSE

	    IF (.SYM [SYM$A_VAR] EQLA .VAR)
	    THEN
		BEGIN

		IF (.SYM [SYM$V_INVALID]) THEN BAS$$STOP_IO (BAS$K_ILLFIEVAR);

		SEARCH_DONE = 3;
		END;

	IF ( NOT .SEARCH_DONE) THEN SYM = .SYM [SYM$A_NEXT];

	END
    UNTIL (.SEARCH_DONE);

    IF (.SEARCH_DONE EQL 1)
    THEN
	BEGIN
!+
! We must create a symbol table entry.
!-

	BUILTIN
	    INSQUE;

	LOCAL
	    GET_VM_STATUS,
	    INSQUE_ADDR;

	GET_VM_STATUS = LIB$GET_VM (%REF (SYM$K_LENGTH), SYM);

	IF ( NOT .GET_VM_STATUS) THEN BAS$$STOP_IO (BAS$K_MAXMEMEXC);

	INSQUE_ADDR = SYM$Q_ROOT [1];
	INSQUE (.SYM, ..INSQUE_ADDR);		! Tail of queue
!+
! Make sure the string is empty.
!-
	STR$FREE1_DX (.VAR);
	END;

!+
! Fill in the symbol table entry
!-
    SYM [SYM$L_CHAN] = .CHAN;
    SYM [SYM$L_OFFSET] = .OFFSET;
    SYM [SYM$L_LEN] = .LEN;
    SYM [SYM$L_DECL] = .DECL;
    SYM [SYM$A_VAR] = .VAR;
    SYM [SYM$V_INVALID] = 0;
    VAR [DSC$W_LENGTH] = MAX (0, .LEN);
    VAR [DSC$B_CLASS] = DSC$K_CLASS_S;
    VAR [DSC$A_POINTER] = .RBF + .OFFSET;
    RETURN;
    END;					! end of BAS$FIELD_VAR


GLOBAL ROUTINE BAS$FIELD_CLEAR (		! Undeclare a field variable
	VAR					! The variable being cleared
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Undeclare a possible FIELD variable.  This routine is called
!	prior to any BASIC statement that causes a field variable to
!	lose its FIELD attribute, if that variable has a FIELD
!	statement associated with it anywhere in the program.
!
! FORMAL PARAMETERS:
!
!	VAR.at.d	The variable.  Only the address of its
!			descriptor is used, to scan the symbol table.
!
! IMPLICIT INPUTS:
!
!	SYM$Q_ROOT.mq	The queue of FIELD variables : the symbol table.
!
! IMPLICIT OUTPUTS:
!
!	SYM$Q_ROOT.mq
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	May remove a symbol from the symbol table.
!
!--

    BEGIN

    MAP
	VAR : REF BLOCK [8, BYTE];

    LOCAL
	SYM : REF BLOCK [SYM$K_LENGTH, BYTE] FIELD (BAS$FIELD_SYM),
	SEARCH_DONE;

!+
! If the symbol table root has not yet been initialized, initialize it.
!-

    IF (.SYM$Q_ROOT [0] EQL 0)
    THEN
	BEGIN

	LOCAL
	    AST_STATUS;

	AST_STATUS = $SETAST (ENBFLG = 0);

	IF (.SYM$Q_ROOT [0] EQL 0)
	THEN
	    BEGIN
	    SYM$Q_ROOT [0] = SYM$Q_ROOT [1] = SYM$Q_ROOT [0];
	    END;

	IF (.AST_STATUS EQL SS$_WASSET) THEN $SETAST (ENBFLG = 1);

	END;

!+
! Search the symbol table, removing this variable if it is present.
!-
    SYM = .SYM$Q_ROOT [0];
    SEARCH_DONE = 0;

    DO
	BEGIN

	IF (.SYM EQLA SYM$Q_ROOT)
	THEN
	    SEARCH_DONE = 1
	ELSE

	    IF (.SYM [SYM$A_VAR] EQL .VAR)
	    THEN
		BEGIN
!+
! We must delete this symbol from the symbol table.
!-

		BUILTIN
		    REMQUE;

		LOCAL
		    FREE_VM_STATUS,
		    TEMP;

		IF (.SYM [SYM$V_INVALID]) THEN BAS$$STOP (BAS$K_ILLFIEVAR);

		REMQUE (.SYM, TEMP);
		VAR [DSC$W_LENGTH] = 0;
		VAR [DSC$B_CLASS] = DSC$K_CLASS_D;
		VAR [DSC$A_POINTER] = 0;
		FREE_VM_STATUS = LIB$FREE_VM (%REF (SYM$K_LENGTH), TEMP);

		IF ( NOT .FREE_VM_STATUS) THEN BAS$$STOP (BAS$K_PROLOSSOR);

		SEARCH_DONE = 1
		END
	    ELSE
		SYM = .SYM [SYM$A_NEXT];

	END
    UNTIL (.SEARCH_DONE);

    END;					! end of BAS$FIELD_CLEAR


GLOBAL ROUTINE BAS$FIELD_COPY (			! Copy to or from a FIELD variable
	STMT_TYPE, 				! Either LSET or RSET
	VAR2, 					! The destination variable
	VAR1					! The source variable
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Copies between two string variables.  One or the other may
!	by FIELD variables, but not both.  Because the compiler cannot
!	be sure if a FIELD statement has been issued to a variable
!	(since it cannot trace program flow) it is possible that
!	neither variable is FIELD.
!
! FORMAL PARAMETERS:
!
!	STMT_TYPE.rl.v	0 = this is an LSET statement, 1 = RSET
!	VAR2.wt.dx	The destination of the copy.  This may be a
!			FIELD variable.
!	VAR1.rt.dx	The source for the copy.  This may be a FIELD
!			variable.
! IMPLICIT INPUTS:
!
!	SYM$Q_ROOT.rq	The queue of FIELD variables : the symbol table.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	May write into or read from an I/O buffer.
!
!--

    BEGIN

    BUILTIN
	FP;

    GLOBAL REGISTER
	CCB = K_CCB_REG : REF BLOCK [, BYTE];

    MAP
	VAR1 : REF BLOCK [8, BYTE],
	VAR2 : REF BLOCK [8, BYTE];

    LOCAL
	FMP : REF BLOCK [, BYTE],
	SYM : REF BLOCK [SYM$K_LENGTH, BYTE] FIELD (BAS$FIELD_SYM),
	SEARCH_DONE,
	VAR1_DESC : BLOCK [8, BYTE],
	VAR2_DESC : BLOCK [8, BYTE],
	VAR1_DESC_ADR : REF BLOCK [8, BYTE],
	VAR2_DESC_ADR : REF BLOCK [8, BYTE],
	VAR1_CHAN,
	VAR2_CHAN;

    FMP = .FP;
!+
! If the symbol table root has not yet been initialized, initialize it.
!-

    IF (.SYM$Q_ROOT [0] EQL 0)
    THEN
	BEGIN

	LOCAL
	    AST_STATUS;

	AST_STATUS = $SETAST (ENBFLG = 0);

	IF (.SYM$Q_ROOT [0] EQL 0)
	THEN
	    BEGIN
	    SYM$Q_ROOT [0] = SYM$Q_ROOT [1] = SYM$Q_ROOT [0];
	    END;

	IF (.AST_STATUS EQL SS$_WASSET) THEN $SETAST (ENBFLG = 1);

	END;

!+
! Search the queue to see if the input variable is on it.
!-
    SYM = .SYM$Q_ROOT [0];
    SEARCH_DONE = 0;

    DO
	BEGIN

	IF (.SYM EQLA SYM$Q_ROOT)
	THEN
	    SEARCH_DONE = 1
	ELSE

	    IF (.SYM [SYM$A_VAR] EQLA .VAR1) THEN SEARCH_DONE = 3;

	IF ( NOT .SEARCH_DONE) THEN SYM = .SYM [SYM$A_NEXT];

	END
    UNTIL (.SEARCH_DONE);

    IF (.SEARCH_DONE EQL 1)
    THEN
	BEGIN
!+
! The variable is not in the symbol table.  That must mean that it
! is not a FIELD variable.
!-
	VAR1_DESC_ADR = .VAR1;
	VAR1_CHAN = 0;
	END
    ELSE
	BEGIN
!+
! Don't touch a variable marked invalid.
!-

	IF (.SYM [SYM$V_INVALID]) THEN BAS$$STOP (BAS$K_ILLFIEVAR);

!+
! The variable is in the symbol table.  Construct a descriptor for it.
!-
	VAR1_DESC_ADR = VAR1_DESC;
	VAR1_DESC [DSC$W_LENGTH] = MAX (0, .SYM [SYM$L_LEN]);
	VAR1_DESC [DSC$B_DTYPE] = DSC$K_DTYPE_T;
	VAR1_DESC [DSC$B_CLASS] = DSC$K_CLASS_S;
	VAR1_CHAN = .SYM [SYM$L_CHAN];

	IF (.VAR1_CHAN EQL 0) THEN VAR1_CHAN = LUB$K_LUN_INPU;

	BAS$$CB_PUSH (.VAR1_CHAN, LUB$K_LUN_INPU);
	CCB [ISB$A_USER_FP] = .FMP [SF$L_SAVE_FP];
	VAR1_DESC [DSC$A_POINTER] = .CCB [LUB$A_RBUF_ADR] + .SYM [SYM$L_OFFSET];

	IF ( NOT .CCB [LUB$V_OPENED]) THEN BAS$$STOP (BAS$K_IO_CHANOT);

	IF (.CCB [LUB$W_RBUF_SIZE] LSSU .SYM [SYM$L_OFFSET] + .SYM [SYM$L_LEN])
	THEN
	    BAS$$STOP_IO (BAS$K_FIEOVEBUF);

	END;

!+
! Search the queue to see if the output variable is on it.
!-
    SYM = .SYM$Q_ROOT [0];
    SEARCH_DONE = 0;

    DO
	BEGIN

	IF (.SYM EQLA SYM$Q_ROOT)
	THEN
	    SEARCH_DONE = 1
	ELSE

	    IF (.SYM [SYM$A_VAR] EQLA .VAR2) THEN SEARCH_DONE = 3;

	IF ( NOT .SEARCH_DONE) THEN SYM = .SYM [SYM$A_NEXT];

	END
    UNTIL (.SEARCH_DONE);

    IF (.SEARCH_DONE EQL 1)
    THEN
	BEGIN
!+
! The variable is not in the symbol table.  That must mean that it
! is not a FIELD variable.
!-
	VAR2_DESC_ADR = .VAR2;
	VAR2_CHAN = 0;
	END
    ELSE
	BEGIN

	IF (.SYM [SYM$V_INVALID]) THEN BAS$$STOP (BAS$K_ILLFIEVAR);

!+
! The variable is in the symbol table.  Construct a descriptor for it.
!-
	VAR2_DESC_ADR = VAR2_DESC;
	VAR2_DESC [DSC$W_LENGTH] = MAX (0, .SYM [SYM$L_LEN]);
	VAR2_DESC [DSC$B_DTYPE] = DSC$K_DTYPE_T;
	VAR2_DESC [DSC$B_CLASS] = DSC$K_CLASS_S;
	VAR2_CHAN = .SYM [SYM$L_CHAN];

	IF (.VAR2_CHAN EQL 0) THEN VAR2_CHAN = LUB$K_LUN_INPU;

	BAS$$CB_PUSH (.VAR2_CHAN, LUB$K_LUN_INPU);
	CCB [ISB$A_USER_FP] = .FMP [SF$L_SAVE_FP];
	VAR2_DESC [DSC$A_POINTER] = .CCB [LUB$A_RBUF_ADR] + .SYM [SYM$L_OFFSET];

	IF ( NOT .CCB [LUB$V_OPENED]) THEN BAS$$STOP (BAS$K_IO_CHANOT);

	IF (.CCB [LUB$W_RBUF_SIZE] LSSU .SYM [SYM$L_OFFSET] + .SYM [SYM$L_LEN])
	THEN
	    BAS$$STOP_IO (BAS$K_FIEOVEBUF);

	END;

!+
! Copy from the input variable to the output variable.
! We must observe the semantics of the statement type.
!-

    CASE .STMT_TYPE FROM STMT_TYPE_LSET TO STMT_TYPE_RSET OF
	SET

	[STMT_TYPE_LSET] :
	    STR$COPY_DX (.VAR2_DESC_ADR, .VAR1_DESC_ADR);

	[STMT_TYPE_RSET] :
	    BAS$RSET (.VAR2_DESC_ADR, .VAR1_DESC_ADR);
	TES;

!+
! Release register CCB
!-

    IF (.VAR2_CHAN NEQ 0)
    THEN
	BEGIN
	BAS$$CB_GET ();
	BAS$$CB_POP ();
	END;

    IF (.VAR1_CHAN NEQ 0)
    THEN
	BEGIN
	BAS$$CB_GET ();
	BAS$$CB_POP ();
	END;

    END;					! end of BAS$FIELD_COPY


GLOBAL ROUTINE BAS$FIELD_COP_R (		! Copy to a FIELD variable
	STMT_TYPE, 				! Either LSET or RSET
	VAR2, 					! The destination variable
	VAR1_LEN, 				! Length of the source variable
	VAR1_ADDR				! Address of the source variable
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This is an alternate entry point for BAS$FIELD_COPY, which the
!	compiler uses to avoid having to build a descriptor for a string
!	constant.  This code builds the descriptor and calls BAS$FIELD_COPY.
!
! FORMAL PARAMETERS:
!
!	STMT_TYPE.rl.v	0 = this is an LSET statement, 1 = RSET
!	VAR2.wt.dx	The destination of the copy.  This may be a
!			FIELD variable.
!	VAR1_LEN.rl.v	The number of bytes in the source
!	VAR1_ADDR.rt.r	The address of the source
!
! IMPLICIT INPUTS:
!
!	SYM$Q_ROOT.rq	The queue of FIELD variables : the symbol table.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	May write into or read from an I/O buffer.
!
!--

    BEGIN

    LOCAL
	VAR1 : BLOCK [8, BYTE];			! Build source descriptor here

    VAR1 [DSC$W_LENGTH] = .VAR1_LEN;
    VAR1 [DSC$B_DTYPE] = DSC$K_DTYPE_T;
    VAR1 [DSC$B_CLASS] = DSC$K_CLASS_S;
    VAR1 [DSC$A_POINTER] = .VAR1_ADDR;
!+
! Now do the copy.
!-
    BAS$FIELD_COPY (.STMT_TYPE, .VAR2, VAR1);
    END;					! end of BAS$FIELD_COP_R


GLOBAL ROUTINE BAS$FIELD_PURGE (		! Purge field variables
	DECL					! Scope of the declaration
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Purge, or undeclare, field variables.  This routine is called
!	at the end of a block with declarations that might have been
!	FIELD variables.  It scans the symbol table and purges each
!	entry marked as declared in the block.
!
! FORMAL PARAMETERS:
!
!	DECL.rl.v	An indication of the scope of the declaration
!			of the variable.  This is a pointer to the major
!			frame (R11) if the variable is in the scope of
!			the major procedure, or a pointer to the minor
!			frame (R10) if the variable is in the scope of
!			a DEF.
!
! IMPLICIT INPUTS:
!
!	SYM$Q_ROOT.mq	The queue of FIELD variables : the symbol table.
!
! IMPLICIT OUTPUTS:
!
!	SYM$Q_ROOT.mq
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	May remove symbols from the symbol table.
!
!--

    BEGIN

    LOCAL
	SYM : REF BLOCK [SYM$K_LENGTH, BYTE] FIELD (BAS$FIELD_SYM),
	SEARCH_DONE;

!+
! If the symbol table root has not yet been initialized, initialize it.
!-

    IF (.SYM$Q_ROOT [0] EQL 0)
    THEN
	BEGIN

	LOCAL
	    AST_STATUS;

	AST_STATUS = $SETAST (ENBFLG = 0);

	IF (.SYM$Q_ROOT [0] EQL 0)
	THEN
	    BEGIN
	    SYM$Q_ROOT [0] = SYM$Q_ROOT [1] = SYM$Q_ROOT [0];
	    END;

	IF (.AST_STATUS EQL SS$_WASSET) THEN $SETAST (ENBFLG = 1);

	END;

!+
! Search the queue, removing any variables declared in this block.
!-
    SYM = .SYM$Q_ROOT [0];
    SEARCH_DONE = 0;

    DO
	BEGIN

	IF (.SYM EQLA SYM$Q_ROOT)
	THEN
	    SEARCH_DONE = 1
	ELSE

	    IF (.SYM [SYM$L_DECL] EQL .DECL)
	    THEN
		BEGIN
!+
! We must delete this symbol from the symbol table.
!-

		BUILTIN
		    REMQUE;

		LOCAL
		    FREE_VM_STATUS,
		    TEMP,
		    VAR : REF BLOCK [8, BYTE];

		REMQUE (.SYM, TEMP);

		IF (.SYM [SYM$V_INVALID]) THEN BAS$$STOP (BAS$K_ILLFIEVAR);

		VAR = .SYM [SYM$A_VAR];
		VAR [DSC$W_LENGTH] = 0;
		VAR [DSC$B_CLASS] = DSC$K_CLASS_D;
		VAR [DSC$A_POINTER] = 0;
		FREE_VM_STATUS = LIB$FREE_VM (%REF (SYM$K_LENGTH), TEMP);

		IF ( NOT .FREE_VM_STATUS) THEN BAS$$STOP (BAS$K_PROLOSSOR);

		SYM = .SYM$Q_ROOT [0];
		END
	    ELSE
		SYM = .SYM [SYM$A_NEXT];

	END
    UNTIL (.SEARCH_DONE);

    END;					! end of BAS$FIELD_PURGE


GLOBAL ROUTINE BAS$FIELD_OPEN (			! Account for OPENing a file
	CHAN					! Channel just OPENed
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Account for OPENing a file.  If the record length is shorter
!	than before, some variables may have to be un-fielded.
!
! FORMAL PARAMETERS:
!
!	CHAN.rl.v	The channel number of the file just opened.
!
! IMPLICIT INPUTS:
!
!	SYM$Q_ROOT.mq	The queue of FIELD variables : the symbol table.
!
! IMPLICIT OUTPUTS:
!
!	SYM$Q_ROOT.mq
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	May remove symbols from the symbol table.
!
!--

    BEGIN

    BUILTIN
	FP;

    GLOBAL REGISTER
	CCB = K_CCB_REG : REF BLOCK [, BYTE];

    LOCAL
	FMP : REF BLOCK [, BYTE],
	SYM : REF BLOCK [SYM$K_LENGTH, BYTE] FIELD (BAS$FIELD_SYM),
	SEARCH_DONE,
	LUN_NO,
	RSZ,
	RBF;

    FMP = .FP;
!+
! Compute the logical unit number from the channel number.
!-

    IF (.CHAN LSS 0) THEN BAS$$STOP (BAS$K_ILLIO_CHA);

    IF (.CHAN EQL 0) THEN LUN_NO = LUB$K_LUN_INPU ELSE LUN_NO = .CHAN;

!+
! If the symbol table root has not yet been initialized, initialize it.
!-

    IF (.SYM$Q_ROOT [0] EQL 0)
    THEN
	BEGIN

	LOCAL
	    AST_STATUS;

	AST_STATUS = $SETAST (ENBFLG = 0);

	IF (.SYM$Q_ROOT [0] EQL 0)
	THEN
	    BEGIN
	    SYM$Q_ROOT [0] = SYM$Q_ROOT [1] = SYM$Q_ROOT [0];
	    END;

	IF (.AST_STATUS EQL SS$_WASSET) THEN $SETAST (ENBFLG = 1);

	END;

!+
! Pick up the buffer size to compare against the variables.
!-
    BAS$$CB_PUSH (.LUN_NO, LUB$K_LUN_INPU);
    CCB [ISB$A_USER_FP] = .FMP [SF$L_SAVE_FP];
    RBF = .CCB [LUB$A_RBUF_ADR];
    RSZ = .CCB [LUB$W_RBUF_SIZE];
!+
! Search the queue, removing any variables which no longer fit in
! the current buffer.
!-
    SYM = .SYM$Q_ROOT [0];
    SEARCH_DONE = 0;

    DO
	BEGIN

	IF (.SYM EQLA SYM$Q_ROOT)
	THEN
	    SEARCH_DONE = 1
	ELSE

	    IF (.SYM [SYM$L_CHAN] EQL .CHAN)
	    THEN
		BEGIN

		IF (.SYM [SYM$L_OFFSET] + .SYM [SYM$L_LEN] LEQ .RSZ)
		THEN
		    BEGIN
!+
! The variable is still within the buffer, recompute its address,
! since the buffer may have been reallocated.
!-

		    LOCAL
			VAR : REF BLOCK [8, BYTE];

		    VAR = .SYM [SYM$A_VAR];
		    VAR [DSC$A_POINTER] = .RBF + .SYM [SYM$L_OFFSET];
!+
! Clear the "invalid" bit, since it may have been set by an implied close.
!-
		    SYM [SYM$V_INVALID] = 0;
		    SYM = .SYM [SYM$A_NEXT];
		    END
		ELSE
		    BEGIN
!+
! This variable is outside the new buffer, remove it.
!-

		    BUILTIN
			REMQUE;

		    LOCAL
			FREE_VM_STATUS,
			TEMP,
			VAR : REF BLOCK [8, BYTE];

		    REMQUE (.SYM, TEMP);
		    VAR = .SYM [SYM$A_VAR];
		    VAR [DSC$W_LENGTH] = 0;
		    VAR [DSC$B_CLASS] = DSC$K_CLASS_D;
		    VAR [DSC$A_POINTER] = 0;
		    FREE_VM_STATUS = LIB$FREE_VM (%REF (SYM$K_LENGTH), TEMP);

		    IF ( NOT .FREE_VM_STATUS) THEN BAS$$STOP (BAS$K_PROLOSSOR);

		    SYM = .SYM$Q_ROOT [0];
		    END

		END
	    ELSE
		SYM = .SYM [SYM$A_NEXT];

	END
    UNTIL (.SEARCH_DONE);

!+
! We are through with register CCB.
!-
    BAS$$CB_POP ();
    END;					! end of BAS$FIELD_OPEN


GLOBAL ROUTINE BAS$FIELD_CLOSE (		! Account for CLOSEing a file
	CHAN					! Channel about to be CLOSEed
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Account for CLOSEing a file.  Unfield all of the variables
!	on this channel.
!
! FORMAL PARAMETERS:
!
!	CHAN.rl.v	The channel number of the file about to be
!			CLOSEed.
!
! IMPLICIT INPUTS:
!
!	SYM$Q_ROOT.mq	The queue of FIELD variables : the symbol table.
!
! IMPLICIT OUTPUTS:
!
!	SYM$Q_ROOT.mq
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	May remove symbols from the symbol table.
!
!--

    BEGIN

    GLOBAL REGISTER
	CCB = K_CCB_REG : REF BLOCK [, BYTE];

    LOCAL
	SYM : REF BLOCK [SYM$K_LENGTH, BYTE] FIELD (BAS$FIELD_SYM),
	SEARCH_DONE;

!+
! If the symbol table root has not yet been initialized, initialize it.
!-

    IF (.SYM$Q_ROOT [0] EQL 0)
    THEN
	BEGIN

	LOCAL
	    AST_STATUS;

	AST_STATUS = $SETAST (ENBFLG = 0);

	IF (.SYM$Q_ROOT [0] EQL 0)
	THEN
	    BEGIN
	    SYM$Q_ROOT [0] = SYM$Q_ROOT [1] = SYM$Q_ROOT [0];
	    END;

	IF (.AST_STATUS EQL SS$_WASSET) THEN $SETAST (ENBFLG = 1);

	END;

!+
! Search the queue, removing any variables for this channel.
!-
    SYM = .SYM$Q_ROOT [0];
    SEARCH_DONE = 0;

    DO
	BEGIN

	IF (.SYM EQLA SYM$Q_ROOT)
	THEN
	    SEARCH_DONE = 1
	ELSE

	    IF (.SYM [SYM$L_CHAN] EQL .CHAN)
	    THEN
		BEGIN
!+
! We must delete this symbol from the symbol table.
!-

		BUILTIN
		    REMQUE;

		LOCAL
		    FREE_VM_STATUS,
		    TEMP,
		    VAR : REF BLOCK [8, BYTE];

		REMQUE (.SYM, TEMP);

		IF (.SYM [SYM$V_INVALID]) THEN BAS$$STOP (BAS$K_ILLFIEVAR);

		VAR = .SYM [SYM$A_VAR];
		VAR [DSC$W_LENGTH] = 0;
		VAR [DSC$B_CLASS] = DSC$K_CLASS_D;
		VAR [DSC$A_POINTER] = 0;
		FREE_VM_STATUS = LIB$FREE_VM (%REF (SYM$K_LENGTH), TEMP);

		IF ( NOT .FREE_VM_STATUS) THEN BAS$$STOP (BAS$K_PROLOSSOR);

		SYM = .SYM$Q_ROOT [0];
		END
	    ELSE
		SYM = .SYM [SYM$A_NEXT];

	END
    UNTIL (.SEARCH_DONE);

    END;					! end of BAS$FIELD_CLOSE


ROUTINE BAS$$FIELD_KILL 			! CLOSE appendage
    : CALL_CCB NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine is called while a file is being CLOSEd, for any
!	reason.  If the CLOSE was explicit and in the module containing
!	the FIELD statement(s), BAS$FIELD_CLOSE will already have
!	removed all of the field variables for this channel from the
!	symbol table, so this routine will find none.  If the CLOSE
!	is implicit or outside the module with the FIELD statement(s),
!	BAS$FIELD_CLOSE will not have been called and this routine
!	will mark some variables invalid.  An explicit CLOSE from
!	another module is considered a programming error, so it is
!	proper to give an error as soon as any of these variables are
!	referenced.  We cannot signal an error from here because this
!	may be the CLOSE from the exit handler (in which case the
!	variables will not be referenced again, so marking them
!	invalid is OK) or the implicit CLOSE from OPEN, in which case
!	(if the OPEN is from a module with FIELD) BAS$FIELD_OPEN will
!	re-validate the variables still in the buffer.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	SYM$Q_ROOT.mq	The queue of FIELD variables : the symbol table.
!	LUB$W_LUN	The logical unit number of the file being closed
!
! IMPLICIT OUTPUTS:
!
!	SYM$Q_ROOT.mq
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	May mark symbols invalid, but is most likely to have no net
!	effect.
!
!--

    BEGIN

    EXTERNAL REGISTER
	CCB : REF BLOCK [, BYTE];

    LOCAL
	SYM : REF BLOCK [SYM$K_LENGTH, BYTE] FIELD (BAS$FIELD_SYM),
	SEARCH_DONE,
	CHAN;

!+
! If the symbol table root has not yet been initialized, initialize it.
!-

    IF (.SYM$Q_ROOT [0] EQL 0)
    THEN
	BEGIN

	LOCAL
	    AST_STATUS;

	AST_STATUS = $SETAST (ENBFLG = 0);

	IF (.SYM$Q_ROOT [0] EQL 0)
	THEN
	    BEGIN
	    SYM$Q_ROOT [0] = SYM$Q_ROOT [1] = SYM$Q_ROOT [0];
	    END;

	IF (.AST_STATUS EQL SS$_WASSET) THEN $SETAST (ENBFLG = 1);

	END;

!+
! Compute the channel number from the logical unit number.
!-
    CHAN = (IF (.CCB [LUB$W_LUN] EQL LUB$K_LUN_INPU) THEN 0 ELSE .CCB [LUB$W_LUN]);
!+
! Search the queue, invalidating any variables for this channel.
!-
    SYM = .SYM$Q_ROOT [0];
    SEARCH_DONE = 0;

    DO
	BEGIN

	IF (.SYM EQLA SYM$Q_ROOT)
	THEN
	    SEARCH_DONE = 1
	ELSE

	    IF (.SYM [SYM$L_CHAN] EQL .CHAN)
	    THEN
		BEGIN
!+
! We must mark this symbol as invalid.
!-

		LOCAL
		    VAR : REF BLOCK [8, BYTE];

		VAR = .SYM [SYM$A_VAR];
		VAR [DSC$A_POINTER] = 0;
		SYM [SYM$V_INVALID] = 1;
		END;

	SYM = .SYM [SYM$A_NEXT];
	END
    UNTIL (.SEARCH_DONE);

    END;					! end of BAS$$FIELD_KILL


GLOBAL ROUTINE BAS$$FIELD_INIT : NOVALUE = 	! Initialize for RUN

!++
! FUNCTIONAL DESCRIPTION:
!
!	Initialize the FIELD symbol table for the RUN command.  All symbols are removed
!	from the table, even those marked invalid.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	SYM$Q_ROOT.mq	The queue of FIELD variables : the symbol table.
!
! IMPLICIT OUTPUTS:
!
!	SYM$Q_ROOT.mq
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Makes the symbol table empty.
!
!--

    BEGIN

    LOCAL
	SYM : REF BLOCK [SYM$K_LENGTH, BYTE] FIELD (BAS$FIELD_SYM),
	SEARCH_DONE;

!+
! If the symbol table root has not yet been initialized, initialize it.
!-

    IF (.SYM$Q_ROOT [0] EQL 0)
    THEN
	BEGIN

	LOCAL
	    AST_STATUS;

	AST_STATUS = $SETAST (ENBFLG = 0);

	IF (.SYM$Q_ROOT [0] EQL 0)
	THEN
	    BEGIN
	    SYM$Q_ROOT [0] = SYM$Q_ROOT [1] = SYM$Q_ROOT [0];
	    END;

	IF (.AST_STATUS EQL SS$_WASSET) THEN $SETAST (ENBFLG = 1);

	END;

!+
! Search the queue, deleting any symbols in it.
!-
    SYM = .SYM$Q_ROOT [0];
    SEARCH_DONE = 0;

    DO
	BEGIN

	IF (.SYM EQLA SYM$Q_ROOT)
	THEN
	    SEARCH_DONE = 1
	ELSE
	    BEGIN
!+
! We must delete this symbol from the symbol table.
!-

	    BUILTIN
		REMQUE;

	    LOCAL
		FREE_VM_STATUS,
		TEMP,
		VAR : REF BLOCK [8, BYTE];

	    REMQUE (.SYM, TEMP);
	    VAR = .SYM [SYM$A_VAR];
	    FREE_VM_STATUS = LIB$FREE_VM (%REF (SYM$K_LENGTH), TEMP);

	    IF ( NOT .FREE_VM_STATUS) THEN BAS$$STOP (BAS$K_PROLOSSOR);

	    SYM = .SYM$Q_ROOT [0];
	    END

	END
    UNTIL (.SEARCH_DONE);

    END;					! end of BAS$$FIELD_INIT

END						! end of module BAS$RSTS_FIELD

ELUDOM
