	.TITLE	MTH$HASIN 	; H Floating Point Arcsine routine
				; (HASIN,HASIND)
	.IDENT /1-004/		; File: MTHHASIN.MAR  RNH1004
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;
; FACILITY: MATH LIBRARY
;++
; ABSTRACT:
;
; MTH$HASIN is a function which returns the H floating point arcsine
; in radians of its H floating point argument. The call is standard call-
; by-reference.
;
; MTH$HASIND is a function which returns the H floating point arcsine
; in degrees of its H floating point argument. The call is standard call-
; by-reference.
;
;--
;
; VERSION: 1
;
; HISTORY:
; AUTHOR:
;	John A. Wheeler, 20-Oct-1979: Version 1
;
; MODIFIED BY:
;
;
;

	.SBTTL	HISTORY	; Detailed Current Edit History


; Edit History for Version 1 of MTH$HASIN 
;
; 1-001 - Adapted from MTH$GASIN version 1-002.  JAW 20-Oct-1979
; 1-002 - Added degree entry points.  RNH 29-MAR-1981
; 1-003 - Change shared external references to G^ RNH 25-Sep-81
; 1-004 - Eliminated symbolic short literals.  	RNH 15-Oct-81

	.SBTTL	DECLARATIONS	; Declarative Part of Module

;
; INCLUDE FILES:	OTSPARAMS.MAR
;
; EXTERNAL SYMBOLS:

	.DSABL	GBL			; Force error for undefineds
	.EXTRN	MTH$HSQRT_R8		; Square root routine
	.EXTRN	MTH$HATAN_R8		; Arctangent routine
	.EXTRN	MTH$HATAND_R8		; Arctangent routine
	.EXTRN	MTH$$SIGNAL		; Math signal routine
	.EXTRN	MTH$K_INVARGMAT		; Error code

;
; EQUATED SYMBOLS:


;
; MACROS:	none
;
; PSECT DECLARATIONS:

	.PSECT	_MTH$CODE	PIC,SHR,LONG,EXE,NOWRT
					; Program section for math routines
;
; OWN STORAGE:	none
;
;
; CONSTANTS:
;

H_PI_OVER_2:
 	.LONG	^X921F4001, ^X42D1B544	;  1.5707963267948966192313216916397514420
 	.LONG	^X898C8469, ^X01B8C517
H_90:
 	.LONG	^X68004007, ^X0		;  90
 	.LONG	^X0,	    ^X0


	.SBTTL	MTH$HASIN  - Standard H Floating Arcsine


;++
; FUNCTIONAL DESCRIPTION:
;
; HASIN  - H floating point arcsine function
;
; HASIN(X) is computed as:
;
;	If X = 0, then HASIN(X) = 0.
;	If X = 1, then HASIN(X) = PI/2.
;	If X = -1, then HASIN(X) = -PI/2.
;	If 0 < |X| < 1, then HASIN(X) = ATAN(X/SQRT(1-X**2)).
;	If 1 < |X|, error.
;
; CALLING SEQUENCE:
;
;	hasin.wh.v = MTH$HASIN(x.rh.r)
;
;		-or-
;
;	CALL MTH$HASIN(hasin.wh.r, x.rh.r)
;
;	Because an H-floating result cannot be expressed in 64 bits, it is
;	returned as the first argument, with the input parameter displaced
;	to the second argument, in accordance with the Procedure Calling
;	Standard.
;
; INPUT PARAMETERS:
;
	LONG = 4			; Define longword multiplier
	x = 2 * LONG			; Contents of x is the argument
;
; IMPLICIT INPUTS:	none
;
; OUTPUT PARAMETERS:
;
	hasin = 1 * LONG		; hasin is the result
;
;	VALUE:	H floating arcsine of the argument
;
; IMPLICIT OUTPUTS:	none
;
; COMPLETION CODES:	none
;
; SIDE EFFECTS:
;
; Signals: MTH$_INVARGMAT if |X| > 1 with reserved operand in R0/R3
; (copied to the signal mechanism vector CHF$L_MCH_R0/R1 by LIB$SIGNAL).
; Associated message is: "INVALID ARGUMENT". Result is reserved operand
; -0.0 unless a user supplied (or any) error handler changes CHF$L_MCH_R0/R1.
;
; NOTE: This procedure disables floating point underflow, enables integer
; overflow.
;
;---


	.ENTRY	MTH$HASIN, ^M<IV, R2, R3, R4, R5, R6, R7, R8>
					; Standard call-by-reference entry
					; Disable DV (and FU), enable IV
	MTH$FLAG_JACKET			; Flag that this is a jacket procedure in
					; case of an error in routine
					; If an error, convert signal to user PC
					; and resignal
	MOVH	@x(AP), R0		; R0/R3 = X = @x(AP)
	BSBB	MTH$HASIN_R8		; Call special HASIN routine
	MOVO	R0, @hasin(AP)		; Store result in first argument
	RET				; Return to caller


	.SBTTL	MTH$HASIN_R8 - Special HASIN routine

; Special HASIN - used by the standard routine and direct JSB call.
;
; CALLING SEQUENCE:
;	save anything needed in R0:R8
;	MOVH	..., R0			; Input in R0/R3
;	JSB	MTH$HASIN_R8
;	return with result in R0/R3
;

MTH$HASIN_R8::				; Special HASIN routine
	TSTW	R0			; Compare X with 0
	BEQL	RETURN			; If X = 0, return HASIN(0) = 0

;
; 0 < |X|
;

	MOVH	R0, -(SP)		; stack = R0/R3 = X
	BICW	#^X8000, R0		; R0/R3 = |X|
	CMPH	R0, #1			; Compare |X| with 1.0
	BGEQ	GEQ_TO_1.0		; Branch if |X| >= 1.0

;
; 0 < |X| < 1.0
;

	MULH2	R0, R0			; R0/R3 = X**2
	SUBH3	R0, #1, R0		; R0/R3 = 1.0 - X**2
	JSB	MTH$HSQRT_R8		; R0/R3 = HSQRT(1-X**2)
	DIVH3	R0, (SP)+, R0		; R0/R3 = X/HSQRT(1-X**2)
					; Also clear stack
	JMP	G^MTH$HATAN_R8		; R0/R3 = HATAN(X/HSQRT(1-X**2))

;
; 1 =< |X| 
;

GEQ_TO_1.0:
	BGTR	ERROR			; Branch to ERROR if |X| > 1.0

;
; |X| = 1.0
;

	MOVO	H_PI_OVER_2, R0		; R0/R3 = PI/2
	TSTH	(SP)+			; Test the sign of X and clear stack
	BGEQ	RETURN			; Branch if X > 0
	MNEGH	R0, R0			; R0/R3 = -PI/2
RETURN:	RSB

;
; 1 < |X|, error
;

ERROR:	TSTH	(SP)+			; Clear stack
	PUSHL	(SP)			; Return PC from JSB routine
	MOVZBL	#MTH$K_INVARGMAT, -(SP)	; Condition value
	ASHQ	#15, #1, R0		; R0 = result = reserved operand -0.0
					; Goes to signal mechanism vector
					; (CHF$L_MCH_R0/R1) so error handler
					; Can modify the result.
	CLRQ	R2			; ...
	CALLS	#2, G^MTH$$SIGNAL	; Signal error and use real user's PC
					; Independent of CALL vs JSB
	RSB				; Return - R0 restored from CHF$L_MCH_R0/R1


	.SBTTL	MTH$HASIND  - Standard H Floating Arcsine


;++
; FUNCTIONAL DESCRIPTION:
;
; HASIND  - H floating point arcsine function
;
; HASIND(X) is computed as:
;
;	If X = 0, then HASIND(X) = 0.
;	If X = 1, then HASIND(X) = 90.
;	If X = -1, then HASIND(X) = -90.
;	If 0 < |X| < 1, then HASIND(X) = ATAND(X/SQRT(1-X**2)).
;	If 1 < |X|, error.
;
; CALLING SEQUENCE:
;
;	hasind.wh.v = MTH$HASIND(x.rh.r)
;
;		-or-
;
;	CALL MTH$HASIND(hasind.wh.r, x.rh.r)
;
;	Because an H-floating result cannot be expressed in 64 bits, it is
;	returned as the first argument, with the input parameter displaced
;	to the second argument, in accordance with the Procedure Calling
;	Standard.
;
; INPUT PARAMETERS:
;
	LONG = 4			; Define longword multiplier
	x = 2 * LONG			; Contents of x is the argument
;
; IMPLICIT INPUTS:	none
;
; OUTPUT PARAMETERS:
;
	hasind = 1 * LONG		; hasind is the result
;
;	VALUE:	H floating arcsine of the argument
;
; IMPLICIT OUTPUTS:	none
;
; COMPLETION CODES:	none
;
; SIDE EFFECTS:
;
; Signals: MTH$_INVARGMAT if |X| > 1 with reserved operand in R0/R3
; (copied to the signal mechanism vector CHF$L_MCH_R0/R1 by LIB$SIGNAL).
; Associated message is: "INVALID ARGUMENT". Result is reserved operand
; -0.0 unless a user supplied (or any) error handler changes CHF$L_MCH_R0/R1.
;
; NOTE: This procedure disables floating point underflow, enables integer
; overflow.
;
;---


	.ENTRY	MTH$HASIND, ^M<IV, R2, R3, R4, R5, R6, R7, R8>
					; Standard call-by-reference entry
					; Disable DV (and FU), enable IV
	MTH$FLAG_JACKET			; Flag that this is a jacket procedure in
					; case of an error in routine
					; If an error, convert signal to user PC
					; and resignal
	MOVH	@x(AP), R0		; R0/R3 = X = @x(AP)
	BSBB	MTH$HASIND_R8		; Call special HASIND routine
	MOVO	R0, @hasind(AP)		; Store result in first argument
	RET				; Return to caller


	.SBTTL	MTH$HASIND_R8 - Special HASIND routine

; Special HASIND - used by the standard routine and direct JSB call.
;
; CALLING SEQUENCE:
;	save anything needed in R0:R8
;	MOVH	..., R0			; Input in R0/R3
;	JSB	MTH$HASIND_R8
;	return with result in R0/R3
;

MTH$HASIND_R8::				; Special HASIND routine
	TSTW	R0			; Compare X with 0
	BEQL	D_RETURN		; If X = 0, return HASIND(0) = 0

;
; 0 < |X|
;

	MOVH	R0, -(SP)		; stack = R0/R3 = X
	BICW	#^X8000, R0		; R0/R3 = |X|
	CMPH	R0, #1			; Compare |X| with 1.0
	BGEQ	D_GEQ_TO_1.0		; Branch if |X| >= 1.0

;
; 0 < |X| < 1.0
;

	MULH2	R0, R0			; R0/R3 = X**2
	SUBH3	R0, #1, R0		; R0/R3 = 1.0 - X**2
	JSB	MTH$HSQRT_R8		; R0/R3 = HSQRT(1-X**2)
	DIVH3	R0, (SP)+, R0		; R0/R3 = X/HSQRT(1-X**2)
					; Also clear stack
	JMP	G^MTH$HATAND_R8		; R0/R3 = HATAND(X/HSQRT(1-X**2))

;
; 1 =< |X| 
;

D_GEQ_TO_1.0:
	BGTR	ERROR			; Branch to ERROR if |X| > 1.0

;
; |X| = 1.0
;

	MOVO	H_90, R0		; R0/R3 = 90
	TSTH	(SP)+			; Test the sign of X and clear stack
	BGEQ	D_RETURN		; Branch if X > 0
	MNEGH	R0, R0			; R0/R3 = -90
D_RETURN:	RSB

	.END
