	.TITLE	MTH$HACOS 	; H Floating Point Arc-cosine routine
				; (HACOS,HACOSD)
	.IDENT /1-006/		; File: MTHHACOS.MAR  EDIT:  RNH1006
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;
; FACILITY: MATH LIBRARY
;++
; ABSTRACT:
;
; MTH$HACOS is a function which returns the H Floating point arc-cosine
; in radians of its H Floating point argument. The call is standard call-
; by-reference.
;
; MTH$HACOSD is a function which returns the H Floating point arc-cosine
; in radians of its H Floating point argument. The call is standard call-
; by-reference.
;
;--
;
; VERSION: 1
;
; HISTORY:
; AUTHOR:
;	John A. Wheeler, 20-Oct-1979: Version 1
;
; MODIFIED BY:
;
;
;

	.SBTTL	HISTORY	; Detailed Current Edit History


; Edit History for Version 1 of MTH$HACOS 
;
; 1-001 - Adapted from MTH$GACOS version 1-002.  JAW 20-Oct-1979
; 1-002 - Added degree entry points.  RNH 22-MAR-1981
; 1-003 - Modified computation of 1 - x^2 to avoid loss of significance
;           for arguments >=1/2
; 1-004 - Change shared external references to G^.  RNH 02-Oct-81
; 1-005 - Eliminated symbolic short literals.  RNH 15-Oct-81
; 1-006 - Changed MULH2 R2, R0 to MULH (SP)+, R0 in MTH$HACOSD.  RNH 20-Jan-82

	.SBTTL	DECLARATIONS	; Declarative Part of Module

;
; INCLUDE FILES:	OTSPARAMS.MAR
;
; EXTERNAL SYMBOLS:
;

	.DSABL	GBL			; Force undefineds to error
	.EXTRN	MTH$HATAN_R8		; Arctangent routine
	.EXTRN	MTH$HATAND_R8		; Arctangent routine
	.EXTRN	MTH$HSQRT_R8		; Square root routine
	.EXTRN	MTH$$SIGNAL		; Math signal routine
	.EXTRN	MTH$K_INVARGMAT		; Error code

; EQUATED SYMBOLS:


;
; MACROS:	none
;
; PSECT DECLARATIONS:

	.PSECT	_MTH$CODE	PIC,SHR,LONG,EXE,NOWRT
					; Program section for math routines
;
; OWN STORAGE:	none
;
;
; CONSTANTS:
;

H_PI_OVER_2:
 	.LONG	^X921F4001, ^X42D1B544	;  1.5707963267948966192313216916397514420
 	.LONG	^X898C8469, ^X01B8C517
H_PI:
 	.LONG	^X921F4002, ^X42D1B544	;  3.1415926535897932384626433832795028841
 	.LONG	^X898C8469, ^X01B8C517
H_90:
 	.LONG	^X68004007, ^X0		;  90
 	.LONG	^X0,	    ^X0
H_180:
 	.LONG	^X68004008, ^X0		;  180
 	.LONG	^X0,	    ^X0

	.SBTTL	MTH$HACOS  - Standard H Floating Arc cosine


;++
; FUNCTIONAL DESCRIPTION:
;
; HACOS  - H Floating point function
;
; HACOS(X) is computed as:
;
;	If X = 0, then HACOS(X) = PI/2.
;	If X = 1, then HACOS(X) = 0.
;	If X = -1, then HACOS(X) = PI.
;	If 0 < X < 1/2, then HACOS(X) = HATAN(SQRT(1-X**2)/X).
;	If 1/2 < X < 1, then HACOS(X) = HATAN(SQRT((1-X)*(1+X))/X).
;	If -1/2 < X < 0, then HACOS(X) = HATAN(SQRT(1-X**2)/X) + PI.
;	If -1 < X < -1/2, then HACOS(X) = HATAN(SQRT((1-X)*(1+X))/X).
;	If 1 < |X|, error.
;
; CALLING SEQUENCE:
;
;	hacos.wh.v = MTH$HACOS(x.rh.r)
;
;		-or-
;
;	CALL MTH$HACOS(hacos.wh.r, x.rh.r)
;
;	Because an H-floating result cannot be expressed in 64 bits, it is
;	returned as the first argument, with the input parameter displaced
;	to the second argument, in accordance with the Procedure Calling
;	Standard.
;
; INPUT PARAMETERS:

	LONG = 4			; Define longword multiplier
	x = 2 * LONG			; Contents of x is the argument

; IMPLICIT INPUTS:	none
;
; OUTPUT PARAMETERS:
;
	hacos = 1 * LONG		; hacos is the result
;
;	VALUE:	H Floating arc-cosine of the argument
;
; IMPLICIT OUTPUTS:	none
;
; COMPLETION CODES:	none
;
; SIDE EFFECTS:
;
; Signals: MTH$_INVARGMAT if |X| > 1 with reserved operand in R0/R1 (copied
; to the signal mechanism vector CHF$L_MCH_R0/R1 by LIB$SIGNAL).
; Associated message is: "INVALID ARGUMENT". Result is reserved operand -0.0
; unless a user supplied (or any) error handler changes CHF$L_MCH_R0/R1.
;
; NOTE: This procedure disables floating point underflow, enables integer
; overflow.
;
;---


	.ENTRY	MTH$HACOS, ^M<IV, R2, R3, R4, R5, R6, R7, R8>
					; Standard call-by-reference entry
					; Disable DV (and FU), enable IV
	MTH$FLAG_JACKET			; Flag that this is a jacket procedure in
					; Case of an error in routine
					; If an error, convert signal to user PC
					; And resignal
	MOVH	@x(AP), R0		; R0/R3 = X = @x(AP)
	BSBB	MTH$HACOS_R8		; Call special HACOS routine
	MOVO	R0, @hacos(AP)		; Store result in first argument
	RET				; Return to caller


	.SBTTL	MTH$HACOS_R8 - Special HACOS routine

; Special HACOS - used by the standard routine and direct JSB call.
;
; CALLING SEQUENCE:
;	save anything needed in R0:R8
;	MOVH	..., R0			; Input in R0/R3
;	JSB	MTH$HACOS_R8
;	return with result in R0/R3
;

MTH$HACOS_R8::				; Special HACOS routine
	TSTW	R0			; Compare X with 0
	BNEQ	TEST_FOR_1.0		; Branch if x = 0

;
; X = 0
;

	MOVO	H_PI_OVER_2, R0		; R0/R3 = PI/2
	RSB				; Return PI/2 if |X| = 0

;
; 0 < |X|
;

TEST_FOR_1.0:
	MOVH	R0, -(SP)		; Save X on stack
	BICW	#^X8000, R0		; R0/R3 = |X|
	CMPH	R0, #1			; Compare |X| with 1.0
	BGEQ	GEQ_TO_1.0		; Branch if |X| >= 1.0

;
; 0 < |X| < 1.0
;

	CMPW	#4000, R0		; Check for possible loss of 
	BGTR	1$			;   significance
	SUBH3	R0, #1, -(SP)		; (SP) = 1 - X
	ADDH2	#1, R0			; R0/R3 = 1 + X
	MULH2	(SP)+, R0		; R0/R3 = 1 - X^2
	BRB	2$			; Join main flow
1$:	MULH2	R0, R0			; R0/R3 = X**2
	SUBH3	R0, #1, R0		; R0/R3 = 1.0 - X**2
2$:	JSB	G^MTH$HSQRT_R8		; R0/R3 = HSQRT(1-X**2)
	DIVH2	(SP), R0		; R0/R3 = HSQRT(1-X**2)/X
	JSB	G^MTH$HATAN_R8		; R0/R3 = HATAN(HSQRT(1-X**2)/X)
	BRB	TEST_SIGN		; Branch to TEST_SIGN

;
; 1 <= |X| 
;

GEQ_TO_1.0:
	BGTR	ERROR			; Branch to ERROR if |X| > 1.0

;
; |X| = 1.0
;

	CLRH	R0			; R0/R3 = 0

;
; Test the sign of X in order to decide whether to add PI to the result
;

TEST_SIGN:
	TSTH	(SP)			; Test the sign of X
	BGEQ	RETURN			; Branch if X > 0
	ADDH2	H_PI, R0		; Add PI to R0/R3 if X < 0
RETURN:	ADDL2	#16, SP			; Clear stack
	RSB				; Return to caller

;
; 1 < |X|, error
;

ERROR:	ADDL2	#16, SP			; Clear stack
	PUSHL	(SP)			; Return PC from JSB routine
	MOVZBL	#MTH$K_INVARGMAT, -(SP)	; Condition value
	ASHQ	#15, #1, R0		; R0/R3 = result = reserved operand -0.0
					; goes to signal mechanism vector
					; (CHF$L_MCH_R0/R1) so error handler
					; can modify the result.
	CLRQ	R2			; ...
	CALLS	#2, G^MTH$$SIGNAL	; Signal error and use real user's PC
					; independent of CALL vs JSB
	RSB				; Return - R0 restored from CHF$L_MCH_R0/R1

	.SBTTL	MTH$HACOSD  - Standard H Floating Arc cosine


;++
; FUNCTIONAL DESCRIPTION:
;
; HACOSD  - H Floating point function
;
; HACOSD(X) is computed as:
;
;	If X = 0, then HACOSD(X) = 90.
;	If X = 1, then HACOSD(X) = 0.
;	If X = -1, then HACOSD(X) = 180.
;	If 0 < X < 1, then HACOSD(X) = ATAN(SQRT(1-X**2)/X).
;	If 1/2 < X < 1, then HACOSD(X) = HATAND(SQRT((1-X)*(1+X))/X).
;	If -1/2 < X < 0, then HACOSD(X) = HATAND(SQRT(1-X**2)/X) + 180.
;	If -1 < X < 1/2, then HACOSD(X) = HATAND(SQRT((1-X)*(1+X))/X) + 180.
;	If 1 < |X|, error.
;
; CALLING SEQUENCE:
;
;	hacosd.wh.v = MTH$HACOSD(x.rh.r)
;
;		-or-
;
;	CALL MTH$HACOSD(hacosd.wh.r, x.rh.r)
;
;	Because an H-floating result cannot be expressed in 64 bits, it is
;	returned as the first argument, with the input parameter displaced
;	to the second argument, in accordance with the Procedure Calling
;	Standard.
;
; INPUT PARAMETERS:

	LONG = 4			; Define longword multiplier
	x = 2 * LONG			; Contents of x is the argument

; IMPLICIT INPUTS:	none
;
; OUTPUT PARAMETERS:
;
	HACOSD = 1 * LONG		; HACOSD is the result
;
;	VALUE:	H Floating arc-cosine of the argument
;
; IMPLICIT OUTPUTS:	none
;
; COMPLETION CODES:	none
;
; SIDE EFFECTS:
;
; Signals: MTH$_INVARGMAT if |X| > 1 with reserved operand in R0/R1 (co180ed
; to the signal mechanism vector CHF$L_MCH_R0/R1 by LIB$SIGNAL).
; Associated message is: "INVALID ARGUMENT". Result is reserved operand -0.0
; unless a user supplied (or any) error handler changes CHF$L_MCH_R0/R1.
;
; NOTE: This procedure disables floating point underflow, enables integer
; overflow.
;
;---


	.ENTRY	MTH$HACOSD, ^M<IV, R2, R3, R4, R5, R6, R7, R8>
					; Standard call-by-reference entry
					; Disable DV (and FU), enable IV
	MTH$FLAG_JACKET			; Flag that this is a jacket procedure in
					; Case of an error in routine
					; If an error, convert signal to user PC
					; And resignal
	MOVH	@x(AP), R0		; R0/R3 = X = @x(AP)
	BSBB	MTH$HACOSD_R8		; Call special HACOSD routine
	MOVO	R0, @HACOSD(AP)		; Store result in first argument
	RET				; Return to caller


	.SBTTL	MTH$HACOSD_R8 - Special HACOSD routine

; Special HACOSD - used by the standard routine and direct JSB call.
;
; CALLING SEQUENCE:
;	save anything needed in R0:R8
;	MOVH	..., R0			; Input in R0/R3
;	JSB	MTH$HACOSD_R8
;	return with result in R0/R3
;

MTH$HACOSD_R8::				; Special HACOSD routine
	TSTW	R0			; Compare X with 0
	BNEQ	D_TEST_FOR_1.0		; Branch if x = 0

;
; X = 0
;

	MOVO	H_90, R0		; R0/R3 = 90
	RSB				; Return 90 if |X| = 0

;
; 0 < |X|
;

D_TEST_FOR_1.0:
	MOVH	R0, -(SP)		; Save X on stack
	BICW	#^X8000, R0		; R0/R3 = |X|
	CMPH	R0, #1			; Compare |X| with 1.0
	BGEQ	D_GEQ_TO_1.0		; Branch if |X| >= 1.0

;
; 0 < |X| < 1.0
;

	CMPW	#4000, R0		; Check for possible loss of 
	BGTR	1$			;   significance
	SUBH3	R0, #1, -(SP)		; (SP) = 1 - X
	ADDH2	#1, R0			; R0/R3 = 1 + X
	MULH2	(SP)+, R0		; R0/R3 = 1 - X^2
	BRB	2$			; Join main flow
1$:	MULH2	R0, R0			; R0/R3 = X**2
	SUBH3	R0, #1, R0		; R0/R3 = 1.0 - X**2
2$:	JSB	G^MTH$HSQRT_R8		; R0/R3 = HSQRT(1-X**2)
	DIVH2	(SP), R0		; R0/R3 = HSQRT(1-X**2)/X
	JSB	G^MTH$HATAND_R8		; R0/R3 = HATAND(HSQRT(1-X**2)/X)
	BRB	D_TEST_SIGN		; Branch to D_TEST_SIGN

;
; 1 <= |X| 
;

D_GEQ_TO_1.0:
	BEQL	10$
	BRW	ERROR			; Branch to ERROR if |X| > 1.0

;
; |X| = 1.0
;

10$:	CLRH	R0			; R0/R3 = 0

;
; Test the sign of X in order to decide whether to add 180 to the result
;

D_TEST_SIGN:
	TSTH	(SP)			; Test the sign of X
	BGEQ	D_RETURN		; Branch if X > 0
	ADDH2	H_180, R0		; Add 180 to R0/R3 if X < 0
D_RETURN:
	ADDL2	#16, SP			; Clear stack
	RSB				; Return to caller

;
; 1 < |X|, error
;



	.END
