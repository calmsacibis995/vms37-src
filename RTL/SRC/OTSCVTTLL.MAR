	.TITLE	OTS$CVTTLL - Convert text (logical) to longword
	.IDENT	/1-003/			; File: OTSCVTTLL.MAR  Edit: SBL1003

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY: Language independent support library
;
; ABSTRACT:
;
; A routine to convert a text string indicating "true" or "false" to
; a integer representation.
;
; ENVIRONMENT: User Mode, AST Reentrant
;
;--
; AUTHOR: Steven B. Lionel, CREATION DATE: 01-Mar-1979
;
; MODIFIED BY:
;
; Edit History

; 1-001 - Original.  Complete rewrite of FOR$CNV_IN_L.  SBL 01-Mar-1979
; 1-002 - SBL24781  Fix bug where SP is used instead of AP.  SBL 2-Jul-79
; 1-003 - Do correct thing if value_size is wrong.  SBL 25-Feb-1980

	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;

;
; EXTERNAL DECLARATIONS:
;
	.DSABL	GBL				; Prevent undeclared
						; symbols from being
						; automatically global.
	.EXTRN	OTS$_INPCONERR			; Error code

;
; MACROS:
;

;
; EQUATED SYMBOLS:
;

;
; OWN STORAGE:
;

;
; PSECT DECLARATIONS:
;
	.PSECT _OTS$CODE PIC, USR, CON, REL, LCL, SHR, -
			EXE, RD, NOWRT, LONG


	.SBTTL	OTS$CVT_TL_L - Convert text (logical) to longword
;++
; FUNCTIONAL DESCRIPTION:
;
;	This routine converts a text string to a longword value
;	using FORTRAN-77 type L format conversion.  The format of
;	the text accepted is as follows:
;
;		< 0 or more blanks >
;		<	< end of string >
;			or
;			<	< "." or nothing >
;			Letter: < "T", "t", "F", "f" >
;				< 0 or more of any character >
;				< end of string > > >
;	The value returned by OTS$CVT_TL_L is:
;
;		All 1 bits (-1) if the character
;		     denoted "Letter" above is "T" or "t".
;		Zero otherwise.
;
;	If the input string does not conform to the above specification,
;	value is set to zero (false), and the condition code
;	OTS$_INPCONERR is returned.
;
;	Note:  ANSI X3.9-1978 FORTRAN-77 does not allow for the input
;	field to be all blank, but since VAX-11 FORTRAN IV-PLUS did
;	allow it, (returning .FALSE.), it is allowed here too.
;
;	Note:  With this implementation, the strings ".TRUE." and
;	".FALSE." are valid.  In the previous version, they were not.
;
;	Note: For compatibility with previous releases, the global
;	symbol FOR$CNV_IN_L may be used to call OTS$CVT_TL_L.
;
;
; CALLING SEQUENCE:
;
;	status.wlc.v = OTS$CVT_TL_L (input_string.rt.ds, value.wl.r
;				     [, value_size.rl.v])
;
; INPUT PARAMETERS:
;
	input_string	= 4	; Input text string by descriptor
	value_size	= 12	; Size of value in bytes.  If not
				; specified, 4 is assumed.  Valid
				; values are 1, 2 and 4.  If invalid,
				; an error is returned.
				; If size is greater than 4, 4 is assumed.
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
	value		= 8	; Output value by reference
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	SS$_NORMAL	- Successful completion
;	OTS$_INPCONERR	- Input conversion error
;
; SIDE EFFECTS:
;
;	NONE
;
;--

FOR$CNV_IN_L::		; For compatibility
	.ENTRY	OTS$CVT_TL_L, ^M<R2>

	CLRL	R2			; Initial value is .FALSE.
	MOVQ	@input_string(AP), R0	; Get descriptor
	SKPC	#^A/ /, R0, (R1)	; Skip blanks
	BEQL	FALSE			; All blank, .FALSE.
	CMPB	#^A/./, (R1)		; A period?
	BNEQ	10$			; No
	DECL	R0			; Yes, decrement character count
	BEQL	ERROR			; Last character, error
	INCL	R1			; Skip over period
10$:	CMPB	#^A/T/, (R1)		; Test for .TRUE.
	BEQL	TRUE
	CMPB	#^A/t/, (R1)
	BEQL	TRUE
	CMPB	#^A/F/, (R1)		; Test for .FALSE.
	BEQL	FALSE
	CMPB	#^A/f/, (R1)
	BEQL	FALSE

;+
; Invalid character, return error OTS$_INPCONERR
;-
ERROR:	MOVL	#OTS$_INPCONERR, R0	; Error status code
	BRB	EXIT			; Return with value .FALSE.

;+
; Text string represents .TRUE.
;-
TRUE:	MNEGL	#1, R2			; Value is .TRUE.
	MOVL	#1, R0			; SS$_NORMAL
	BRB	EXIT			; Exit

;+
; Text string represents .FALSE.
; R2 is already cleared.
;-
FALSE:	MOVL	#1, R0			; SS$_NORMAL
	BRB	EXIT			; Exit

;+
; Return to caller with status value.
;-
EXIT:	CMPB	(AP), #<value_size/4>	; Is size present?
	BLSS	40$			; No, longword
	CMPL	value_size(AP), #4	; Is it a longword?
	BGEQ	40$			; Yes, at least
	CMPL	value_size(AP), #2	; Is it a word?
	BEQL	20$			; Yes
	CMPL	value_size(AP), #1	; Is it a byte?
	BNEQ	ERROR			; If not, it's an error
	MOVB	R2, @value(AP)		; Convert byte
	BRB	50$			; Exit
20$:	MOVW	R2, @value(AP)		; Move a word
	BRB	50$			; Exit
40$:	MOVL	R2, @value(AP)		; Move a longword
50$:	RET				; Return to caller

	.END
