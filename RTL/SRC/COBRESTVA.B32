MODULE COB$$RESTVA(
		IDENT = '1-005'			! file: COBRESTVA.B32
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!
!++
! FACILITY:	COBOL SUPPORT
!
! ABSTRACT
!
!
!
! ENVIRONMENT:	Vax-11 User Mode
!
! AUTHOR: MLJ , CREATION DATE: 05-MAY-1979
!
! MODIFIED BY:
!
! 1-001 - Original. MLJ  05-MAY-1979
! 1-002 - Added boilerplate and comments. RKR 24-AUG-1979
! 1-003 - Use RTLLIB for LIBRARY and define psect via macros. RKR 18-SEPT-79
! 1-004 - Rename to COBRESTVA from former SYSRESTVA  RKR 24-SEPT-79
!	  (Entry point becomes COB$$RESTVA)
! 1-005 - Make module name match entry point, cosmetic changes.
!	  RKR 18-OCT-79
!
!--

!<BLF/PAGE>

!
! SWITCHES
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES
!
!	NONE
!
! TABLE OF CONTENTS:
!
FORWARD ROUTINE

	COB$$RESTVA ;	! Restore virtual address from image file
!
! INCLUDE FILES
!
REQUIRE 'RTLIN:RTLPSECT';	! Macros for psect declarations
LIBRARY 'RTLLIB';	! Image header structures and sizes

!
! MACROS
!
!	NONE
!
! EQUATED SYMBOLS
!
!	NONE
!
! PSECT DECLARATIONS:
!
DECLARE_PSECTS (COB) ;	! Psects for COB$ facility

GLOBAL ROUTINE COB$$RESTVA (

			INADR,		! Input addr.'s to be restored
			CHAN,		! Channel number
			EFN		! Event flag number

			)=
!
!++	FUNCTIONAL DESCRIPTION
!
!
! FORMAL PARAMETERS:
!
!
! INADR.ra.r
!
!	address of a 2-longword array containing the starting and ending
!	virtual addresses in the process's virtual address space of the
!	area to be restored from the image file.
!
! CHAN.rl.v
!
!	number of the channel on which the image file has been accessed.
!	The file must have been accessed with an RMS $OPEN macro; the
!	file options parameter (FOP) in the FAB must indicate a user
!	file open (UFO) keyword).  The access mode at which the channel
!	was opened must be the same or less privileged than the access
!	mode of the caller.
!
! EFN.rl.v
!
!	Event flag number to use for I/O on CHAN.
!
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	SS$_BADIMGHDR	! Bad image header read
!	SS$_INSFARG	! Insufficient arguments to this routine
!	SS$_NORMAL	! Normal successful completion
!	SS$_PAGOWNVIO	! Page ownership violation
!
!	If read error occurs, RMS error status is returned.
!

!
! SIDE EFFECTS:
!
!	NONE
!
!--
!
!
    BEGIN
    MAP
	INADR:		REF VECTOR;

    LOCAL
	STATUS,					! System service status
	IHDBUF:		BLOCK[512,BYTE],	! Block buffer for image header
	IMGBUF:		VECTOR[512,BYTE],	! Block buffer for image file
	IOSB:		VECTOR[2],		! I/O status block
	ISD:		REF BLOCK[,BYTE],	! Pointer to image section descriptor
	IHDVBN,					! Current VBN of image header
	MAXIHDVBN;				! Maximum VBN of image header
    BUILTIN
	ACTUALCOUNT;

    
    
    !+
    ! Make sure enough arguments are present.
    !-
    IF ACTUALCOUNT() LSS 3 THEN RETURN SS$_INSFARG;



    !+
    ! Read the first (usually, only) block of the image header.
    !-
    IHDVBN = 1;
    STATUS = $QIOW(
	EFN=.EFN,
	CHAN=.CHAN,
	FUNC=IO$_READVBLK,
	IOSB=IOSB,
	P1=IHDBUF,
	P2=512,
	P3=1);
    IF NOT .STATUS THEN RETURN .STATUS;
    IF NOT .IOSB THEN RETURN .IOSB<0,16>;



    !+
    ! Save the number of blocks in the image header, make sure that the
    ! SIZE field is reasonable, and point to the first ISD.
    !-
    MAXIHDVBN = .IHDBUF[IHD$B_HDRBLKCNT];
    IF .IHDBUF[IHD$W_SIZE] GTRU 510 THEN RETURN SS$_BADIMGHDR;
    ISD = IHDBUF + .IHDBUF[IHD$W_SIZE];



    !+
    ! Loop over the requested virtual pages.
    !-
    INCRA VPN FROM .(INADR[0])<9,23> TO .(INADR[1])<9,23> DO
	BEGIN
	LOCAL
	    SVA,		! Starting virtual address
	    LEN;		! Length


	!+
	! Find the image section descriptor that describes the current
	! virtual page.  Since these occur in ascending sequence, we
	! just scan forward until the correct one is found, or we
	! discover one that describes a following page, or the end of
	! the table.  In the latter cases, the desired page is not
	! described by any ISD.
	!-
	WHILE .VPN GEQ .ISD[ISD$V_VPN]+.ISD[ISD$W_PAGCNT] DO
	    BEGIN


	    !+
	    ! Point to the next ISD, and make sure it exists.
	    !-
	    ISD = .ISD + .ISD[ISD$W_SIZE];
	    IF .ISD GTRA IHDBUF+510 THEN RETURN SS$_BADIMGHDR;


	    !+
	    ! If the SIZE field is zero, we have reached the end of the
	    ! table.  This indicates that the requested VPN is higher
	    ! than any page described by the ISDs.
	    !-
	    IF .ISD[ISD$W_SIZE] EQL 0
	    THEN
		RETURN SS$_PAGOWNVIO;


	    !+
	    ! If the SIZE field is -1, the next ISD is in the following
	    ! block.  Read it and continue searching.  However, make
	    ! sure not to run off the end of the image header.
	    !-
	    IF .ISD[ISD$W_SIZE] EQL %X'FFFF'
	    THEN
		BEGIN
		IF .IHDVBN EQL .MAXIHDVBN THEN RETURN SS$_BADIMGHDR;
		IHDVBN = .IHDVBN + 1;
		STATUS = $QIOW(
		    EFN=.EFN,
		    CHAN=.CHAN,
		    FUNC=IO$_READVBLK,
		    IOSB=IOSB,
		    P1=IHDBUF,
		    P2=512,
		    P3=.IHDVBN);
		IF NOT .STATUS THEN RETURN .STATUS;
		IF NOT .IOSB THEN RETURN .IOSB<0,16>;
		ISD = IHDBUF;
		END;
	    END;


	!+
	! If the current ISD is for a virtual page that follows the
	! requested one, this indicates that no ISD describes the
	! requested one, since the preceding ISD described pages that
	! precede the requested one.
	!-
	IF .VPN LSS .ISD[ISD$V_VPN]
	THEN
	    RETURN SS$_PAGOWNVIO;


	!+
	! Make sure that the ISD does not describe a global page.  We
	! do not support them.
	!-
	IF .ISD[ISD$V_GBL]
	THEN
	    RETURN SS$_PAGOWNVIO;


	!+
	! Compute the virtual address and length of the area within the
	! current page that will be restored.
	!-
	SVA = MAXA(.VPN^9, .INADR[0]);			! Find base address
	LEN = MINA(.VPN^9+511, .INADR[1]) - .SVA + 1;	! Find length


	!+
	! Do the restoration.  If the page is not writable, we will not
	! restore it, since it should not have changed (unless by
	! debugger).  If it is demand zero, just fill the region with
	! zero.  Otherwise, read the appropriate block from the image,
	! and copy the region over.
	!-
	IF .ISD[ISD$V_WRT]
	THEN
	    IF .ISD[ISD$V_DZRO]
	    THEN
		CH$FILL(0, .LEN, .SVA)
	    ELSE
		BEGIN
		STATUS = $QIOW(
		    EFN=.EFN,
		    CHAN=.CHAN,
		    FUNC=IO$_READVBLK,
		    IOSB=IOSB,
		    P1=IMGBUF,
		    P2=512,
		    P3=.ISD[ISD$L_VBN]+.VPN-.ISD[ISD$V_VPN]);
		IF NOT .STATUS THEN RETURN .STATUS;
		IF NOT .IOSB THEN RETURN .IOSB<0,16>;
		CH$MOVE(.LEN, IMGBUF[.SVA-(.VPN^9)], .SVA);	    
		END;
	END;


    SS$_NORMAL
    END;

END
ELUDOM
