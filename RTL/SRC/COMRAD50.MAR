	.TITLE	COM$RAD50	; FORTRAN COMPATIBILITY - ASCII to RAD50 conversion
	.IDENT	/1-004/		; File: COMRAD50.MAR  Edit: JAW1004

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;
; FACILITY: FORTRAN COMPATABILITY LIBRARY
;++
; ABSTRACT:
;
;	FORTRAN COMPATABILITY library routine RAD50 converts 6 ASCII
;	characters to 2 RAD50 words.
;
;--
;
; VERSION: 0
;
; HISTORY:
;
; AUTHOR:
;	Peter Yuo, 12-Sep-77: Version 0
;
; MODIFIED BY:
;
;

	.SBTTL	HISTORY		; Detailed Current Edit History

; Edit History for Version 01 of ASCR5O
;
; 0-03	Clear RADIX_VALUE at initialization in R50WD_R6
; 00-06	- Define formal for RAD50 so no access vio.  TNH 5-Jan-78
; 00-07	- Make PSECT be F4PCOMPAT$CODE.  TNH 5-Jan-78
; 0-8	- Bug fix for RAD50.  JMT 5-Jan-78
; 0-9	- Another bug fix for RAD50.  JMT 9-Jan-77
; 1-1	- Break module COM$ASCR50 into 3 modules:
;		COM$RAD50 - routine RAD50
;		COM$IRAD50 - routine IRAD50
;		COM$$R50WD - common ASCII to RAD50 conversion routine
; 1-002	- Update copyright notice.  JBS 16-NOV-78
; 1-003	- Add "_" to PSECT directive.  JBS 21-DEC-78
; 1-004 - Allow argument to be passed either by descriptor or by
;	  reference.  JAW 13-Feb-1981

	.SBTTL	DECLARATIONS

;
; INCLUDE FILES:
;

;
; EXTERNAL SYMBOLS:
;
	.DSABL	GBL
	.EXTRN	COM$$R50WD_R6

;
; MACROS:
;
	$DSCDEF				; Define descriptor symbols.

;
; PSECT DECLARATIONS:
;
	.PSECT	_F4PCOMPAT$CODE	PIC,USR,CON,REL,LCL,SHR,EXE,RD,NOWRT

;
; EQUATED SYMBOLS:
;

;
; OWN STORAGE:
;

	.SBTTL	RAD50 - CONVERT 6-CHAR ASCII STRING INTO RADIX-50 STRING


;++
; FUNCTIONAL DESCRIPTION:
;
; 	Algorithmic steps:
;	1) Initialization
;	   CHARS_REM = 6
;	   NEXT_INPUT_POSITION = char_array.rbu.ra
;	2) Call COM$$R50WD_R6 to convert one word at a time.
;
; CALLING SEQUENCE:
;
;	radix50_array.wbu.v = RAD50 (ascii_array.rbu.ra)
	ASCII_ARRAY = 4		; arg list offset
;

;
; INPUT PARAMETERS:

;	ascii_array.rbu.ra		; ascii string to be converted
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;
;	radix50_array.wlu.v		; output location for the result
;					; of the conversion
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	NONE
;
;--

	.ENTRY	RAD50, ^M<R2, R3, R4, R5, R6>
					; standard call-by-reference entry

;
; Initialization
;

	MOVL	#6, R5			; CHARS_REM = 6
	MOVL	ascii_array(AP), R2	; R2 = address of input string
					;  or descriptor
	CMPW	DSC$W_LENGTH(R2), #255	; Is length <= 255?
	BGTRU	5$			; If not, assume by reference.
	CMPB	DSC$B_DTYPE(R2), #DSC$K_DTYPE_T	; Is data type T?
	BNEQU	5$			; If not, assume by reference.
	CMPB	DSC$B_CLASS(R2), #DSC$K_CLASS_S	; Is class S?
	BNEQU	5$			; If not, assume by reference.
	MOVL	DSC$A_POINTER(R2), R2	; Use address in descriptor.

;
; Call COM$$R50WD_R6
;

5$:	JSB	COM$$R50WD_R6		; convert first word

;
; Save RADIX_VALUE on stack and call COM$$R50WD_R6 again
;

	PUSHL	R1			; save RADIX_VALUE on stack
	JSB	COM$$R50WD_R6		; call COM$$R50WD_R6 to convert 2nd word

;
; LP(R0) = saved RADIX_VALUE on stack (1st word)
; HP(R0) = RADIX_VALUE (2nd word)
;

	INSV	R1, #16, #16, (SP)	; HP(SP) = first word converted
	MOVL	(SP), R0		; giving result in R0
	RET				; return with result in R0


	.END
