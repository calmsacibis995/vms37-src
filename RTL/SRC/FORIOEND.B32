MODULE FOR$IO_END (				! FORTRAN End I/O statement
		IDENT = '1-010'			! File: FORIOEND.B32
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY: FORTRAN Support Library - user callable
!
! ABSTRACT:
!
!	This module terminates a FORTRAN I/O statement, writes
!	last record if output, and pops up the I/O system to
!	a previously active I/O statement if any.
!
! ENVIRONMENT: User access mode; mixture of AST level or not
!
! AUTHOR: Thomas N. Hastings, CREATION DATE: 03-Mar-77
!
! MODIFIED BY:
!
!	Thomas N. Hastings, 05-Mar-77 : VERSION 01
! 01	-  original
! 0-12	- Use FOR$K_abcmno12yz as E12TERNAL LITERALs.  TNH 27-Oct-77
! 0-13	- Use FERR and call FOR$$FREE_VM.  TNH 16-Dec-77
! 0-14	- If ISB$B_ERR_NO is non-zero, SIGNAL its contents.  JMT 14-Jan-78
! 0-15	- Global register CCB.  JMT 8-Apr-78
! 0-16	- Change REQUIRE files for VAX system build.  DGP 28-Apr-78
! 0-17	- Use JSB linkages.  TNH 21-May-78
! 0-18	- PIC dispatch tables.  TNH 10-June-78
! 0-19	- Change file name to FIOEND.B32, and change the names of
!	   the require files similarly.  JBS 14-NOV-78
! 1-001	- Update copyright notice and version number.  JBS 16-NOV-78
! 1-002	- Change REQUIRE file names from FOR... to OTS...  JBS 06-DEC-78
! 1-003 - Change references to I/O dispatch tables. DGP 08-Dec-78
! 1-004 - Change dispatch table references to longword.  DGP 11-Dec-78
! 1-005	- Use 32-bit addresses for externals.  JBS 27-JAN-1979
! 1-006 - Return IOSTAT status.  SBL 25-Apr-1979
! 1-007 - Move deallocation of run-time format to OTS$$POP_CCB.  SBL 27-Apr-79
! 1-008	- Use language-specific dispatch tables.  JBS 26-JUN-1979
! 1-009 - Use ISB symbols for dispatch offsets.  SBL 12-July-1979
! 1-010 - Add I/O in progress error handling.  SBL 24-Sept-1979
!--

!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!

REQUIRE 'RTLIN:OTSLNK';				! Define all linkages

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    FOR$IO_END;					! End I/O statement

!
! INCLUDE FILES:
!

LIBRARY 'RTLSTARLE';				! System library
REQUIRE 'RTLML:FORERR';				! FORTRAN error number definitions

REQUIRE 'RTLML:OTSISB';				! I/O statement block (ISB)

REQUIRE 'RTLML:OTSLUB';				! needed only for LUB length

REQUIRE 'RTLIN:OTSMAC';				! macros

REQUIRE 'RTLIN:RTLPSECT';			! Define DELCARE_PSECTS macro

REQUIRE 'RTLML:FORPAR';				! FORTRAN inter-module parameters

REQUIRE 'RTLIN:RTLODBG';			! debugging macros

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! PSECT DECLARATIONS:
!
DECLARE_PSECTS (FOR);				! declare PSECTs for FOR$ facility
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL
    OTS$$A_CUR_LUB : ADDRESSING_MODE (GENERAL),	! Pointer to current LUB/ISB/RAB
    FOR$$AA_UDF_PR9 : VECTOR;			! PIC array of user data

						! formatter (UDF) level of abstraction.

EXTERNAL ROUTINE
    FOR$$ERR_ENDHND,				! error condition handler for END= and ERR=
    FOR$$CB_POP : JSB_CB_POP NOVALUE,		! Pop entire I/O system back to previous LUB/ISB/RAB
    FOR$$SIGNAL : NOVALUE;			! Signal an error with a small error number


GLOBAL ROUTINE FOR$IO_END = 			!

!++
! FUNCTIONAL DESCRIPTION:
!
!
! CALLING SEQUENCE:
!
!	iostat.wl.v = FOR$IO_END ()
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	OTS$$A_CUR_LUB		Adr. of current logical unit
!				block (LUB). Used to setup ISB
!				to get current I/O statement type
!				code.
!	ISB$B_STTM_TYPE		I/O statement type code - index to
!				dispatch table entry.
!	FOR$AA_UDF_PR1		Array of user data formatters
!				(UDF level of abstraction).
!	ISB$B_ERR_NO		Last continuable error to occur in the state-
!				ment or 0.  SIGNAL if non-zero!
!				format array or 0 if none.
!
! IMPLICIT OUTPUTS:
!
!	OTS$$A_CUR_LUB		Adr. of pushed down LUB/ISB/RAB or 0
!				if no unit pushed down (usual)
!
! ROUTINE VALUE:
!
!	An IOSTAT small integer FORTRAN error number, either 0 if no
!	error or the number of whatever continuable error last occurred
!	in the I/O statement.
!
! SIDE EFFECTS:
!
!	If an error occurs, it is SIGNALed unless an ERR=
!	transfer parameter was specified when the I/O statement
!	initialization call was made (see module FOR$IO_BEG,
!	entry points FOR${READ,WRITE}_{SF,SO,SU,DF,DO,DU,SL} or
!	FOR${DECODE,ENCODE}_{MF,MO}), in which case control is
!	transferred to the specified address (after stack
!	unwind).
!
!--

    BEGIN

    GLOBAL REGISTER
	CCB = K_CCB_REG : REF BLOCK [, BYTE];

    LOCAL 					! Declare locals for each item to be passed to handler
						! Needed since can only pass address, not contents
	L_UNWIND_ACTION : VOLATILE,		! UNWIND action code.
	A_ERR_ADR : VOLATILE,			! ERR= user address
	A_END_ADR : VOLATILE,			! END= user address
	L_INCR_DEPTH : VOLATILE,		! additional frames between establisher and user (0)
	USER_FRAME : REF BLOCK [, BYTE],	! User's call frame
	IOSTAT;					! Local copy of ISB$B_ERR_NO

    ENABLE 					! Establish error conditon handler
	FOR$$ERR_ENDHND (L_UNWIND_ACTION, A_ERR_ADR, A_END_ADR, L_INCR_DEPTH);	! Pass UNWIND action code.

    						! Pass ERR= and END= user addresses or 0
    					! and the number of frames between the activator and the user (0)
    CCB = .OTS$$A_CUR_LUB;

    !+
    ! Setup LOCAL storage to be passed to error handler in case of a signal
    ! Indicate that UNWIND action is to pop current LUB/ISB/RAB if error
    !-

    L_UNWIND_ACTION = FOR$K_UNWINDPOP;
    A_ERR_ADR = .CCB [ISB$A_ERR_EQUAL];
    A_END_ADR = .CCB [ISB$A_END_EQUAL];
    L_INCR_DEPTH = 0;

    !+
    ! Restore user's handler in the frame, if any.
    !-
    USER_FRAME = .CCB [ISB$A_USER_FP];
    USER_FRAME [SF$A_HANDLER] = .CCB [ISB$A_USR_HANDL];

    !+
    ! Call appropriate UDF termination routine
    ! Any errors will be signaled.
    !-

    JSB_UDF9 (FOR$$AA_UDF_PR9 + .FOR$$AA_UDF_PR9 [.CCB [ISB$B_STTM_TYPE] -
						  ISB$K_FORSTTYLO + 1]);

    !+
    ! If a continuable error occured on the I/O statement (ISB$B_ERR_NO
    ! is non-zero) then SIGNAL the error.  The signalling is delayed until
    ! statement end time so the record is positioned correctly.
    !-

    IOSTAT = .CCB [ISB$B_ERR_NO];

    IF .IOSTAT NEQU 0 THEN FOR$$SIGNAL (.IOSTAT);

    ! Pop entire I/O system back to previous LUB/ISB/RAB if there was one when this
    ! I/O statement began (see FIOBEG) or indicate that I/O system is not.
    ! currently processing any I/O statement (usual)
    ! LUB for (old) current unit is saved for next I/O statement
    !-

    FOR$$CB_POP ();
    RETURN .IOSTAT;				! Return IOSTAT error value
    END;					! End of routine

END						!End of module FOR$IO_END

ELUDOM
