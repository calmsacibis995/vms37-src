	.TITLE	MTH$ATANH	; Single Precision Hyperbolic Arctangent
	.IDENT /2-003/		; File: MTHATANH.MAR  Edit: PDG2003
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;
; FACILITY: MATH LIBRARY
;++
; ABSTRACT:
;
; MTH$ATANH returns the single precision hyperbolic arctangent of the
; single precision argument.  The call is standard call-by-reference.
;
;--
;
; VERSION: 2
;
; HISTORY:
; AUTHOR:
;	Peter D Gilbert, 23-Jul-81: Version 2
;
; MODIFIED BY:
;
;

	.SBTTL	HISTORY	; Detailed Current Edit History

; VERSION 1
;
; 1-001 - Algorithm from PL/I math library.
;
; Edit History for Version 02 of MTH$ATANH
;
; 2-000	  Rewrite of PL/I version.	July 1981
; 2-001	- Change MOVZBL to CVTBL when accessing MTH$$AB_ALOG_V.  PDG 2-Dec-1981
; 2-002	- Change RSB to RET after error exit.  PDG 6-Jan-1981
; 2-003	- Repair problem with POLY instruction.  PDG 19-Mar-1982

	.SBTTL	DECLARATIONS	; Declarative Part of Module

;
; INCLUDE FILES:	MTHJACKET.MAR
;

;
; EXTERNAL SYMBOLS:
;
	.DSABL	GLOBAL
	.SHOW	BINARY,CALLS,CONDITIONALS,DEFINITIONS,EXPANSIONS
	.EXTRN	MTH$K_INVARGMAT 
	.EXTRN	MTH$$SIGNAL
	.EXTRN	MTH$$AB_ALOG_V
	.EXTRN	MTH$$AB_F_FHI

;
; EQUATED SYMBOLS:
;

;
; MACROS:
;

	.MACRO	OPDEF	X, OP, SH
	.OPDEF	ADDX	^X00@SH+OP,R'X,M'X
	.OPDEF	ADDX3	^X01@SH+OP,R'X,R'X,W'X
	.OPDEF	SUBX	^X02@SH+OP,R'X,M'X
	.OPDEF	SUBX3	^X03@SH+OP,R'X,R'X,W'X
	.OPDEF	MULX	^X04@SH+OP,R'X,M'X
	.OPDEF	MULX3	^X05@SH+OP,R'X,R'X,W'X
	.OPDEF	DIVX	^X06@SH+OP,R'X,M'X
	.OPDEF	DIVX3	^X07@SH+OP,R'X,R'X,W'X
	.OPDEF	CVTWX	^X0D@SH+OP,RW,W'X
	.OPDEF	POLYX	^X15@SH+OP,R'X,RW,AB
	.OPDEF	MOVX	^X00D0,RL,WL		; MOVL
	.OPDEF	MOVAX	^X00DE,AL,WL		; MOVAL
	.ENDM

	OPDEF	F, <^X0040>, 0

	F_EXP = 7	; Bit offset to exponent
	X_EXP = 7	; Bit offset to exponent

;
; PSECT DECLARATIONS:
;
	.PSECT	_MTH$CODE	PIC,SHR,LONG,EXE,NOWRT
					; program section for math routines
;
; OWN STORAGE:	none
;

; CONSTANTS:
;

	ACMASK = ^M<R2,R3,R4,R5>	; register entry mask and integer
					; overflow enable

LN2_HI:	.LONG	^X72003CB1		; (Hi 16 bits of ln2)*2**-7
LN2_LO:	.LONG	^XBE8E333F		; (Low bits of ln2)*2**-7


LOGTAB1:			; Constants for q(z).  Generated using eq.
				; 6.3.10 of Hart et. al. (sin(2a) = 1/32)
	.LONG	^XEABDBF2A	; C5 = -.16691108
	.LONG	^X0CDD3F4D	; C4 = 0.20024438
	.LONG	^XFFF6BF7F	; C3 = -.24999985
	.LONG	^XAAA73FAA	; C2 = 0.33333322
	.LONG	^X0000C000	; C1 = -.50000000
	;
	; Remove this constant, and do another multiply in-line.
	;
;;;;;;;	.LONG	^X00000000	; C0 =  .00000000
LOGLEN1 = .-LOGTAB1/4 - 1	; no. of floating point entries


LOGTAB2:			; Constants for p(z*z).  Generated using 
				; eq. 6.3.11 of Hart et. al. (sin(2a) = 
				; (b - 1)/(b + 1) where b = 2**(1/7))
	.LONG	^X6D943FCD	; C2 = 0.40122664
	.LONG	^XAA91402A	; C1 = 0.66666514
	.LONG	^X00004100	; C0 = 2.00000000
LOGLEN2 = .-LOGTAB2/4 - 1

	.SBTTL	MTH$ATANH	- Single Precision Hyperbolic Arctangent

;++
; FUNCTIONAL DESCRIPTION:
;
; ATANH  - Single precision floating point function
;
; ATANH(X) is computed using the following approximation technique:
;
;	If |X| >= 1.0, error.  Otherwise
;
;	Let (1+X)/(1-X) = f * (2**n), where 1/2 <= f < 1
;
;	If n is greater than or equal to 1 then
;	    set N = n - 1 and F1 = 2*f.
;	Else
;	    set N = n and F = f.
;
;	If |F - 1| < 2**-5 then
;	    2*atanh(X) =  N*ln(2) + W + W*P(W),
;		where W = ((1+F)/(1-F))*2**N - 1,
;		and P is a polynomial of degree F=5,D=9.
;	Else
;	    Obtain FHI (roughly equal to F) from table lookup.
;	    2*atanh(X) = ln((1+X)/(1-X)) = N*ln(2) + ln(FHI) + Z*Q(Z*Z),
;		where Q is a polynomial of degree F=2,D=5,
;		where Z = (F - FHI)/(F + FHI)
;		where F = (2**-N)*(1+X)/(1-X)
;	    Z is computed by:
;		Z = (X-D)/(1-X*D)
;		where Y = FHI*2**N
;		where D = (Y-1)/(Y+1)
;	    Note that Z may be computed in a variety of ways:
;		Z = [(1+X) - Y*(1-X)]/[(1+X) + Y*(1-X)]
;		Z = [1 + X - Y + X*Y]/[1 + X + Y - X*Y]
;		Z = [1 - Y + X + X*Y]/[1 + Y + X - X*Y]
;		Z = [(1-Y) + X*(1+Y)]/[(1+Y) + X*(1-Y)]
;
;       NOTE:	The quantities ln(A=FHI) and ln2 are used in the above
;		equations in two parts - a high part (containing the
;		high order bits) and a low part (containing the low
;		order bits.  In the code the high and low parts of the
;		constants are indicated by a _HI and _LO suffix respec-
;		tively.  The values were chosen such that N*LN2_HI +
;		LN_FHI_HI is exactly representable.
;
; CALLING SEQUENCE:
;
;	atanh.wf.v = MTH$ATANH(x.rf.r)
;
; INPUT PARAMETERS:

	X = 4				; Contents of x is the argument

; IMPLICIT INPUTS:	none
;
; OUTPUT PARAMETERS:
;
;	VALUE:	Single precision hyperbolic arctangent of the argument
;
; IMPLICIT OUTPUTS:	none
;
; COMPLETION CODES:	none
;
; SIDE EFFECTS:
;
; Signals: MTH$K_INVARGMAT if |X| >= 1.0 with reserved operand in R0 (copied to
; the signal mechanism vector CHF$L_MCH_R0/R1 by LIB$SIGNAL).
; Associated message is: "Floating overflow in math library". Result is
; reserved operand -0.0 unless a user supplied (or any) error handler changes
; CHF$L_MCH_R0/R1.
;
; NOTE: This procedure disables floating point underflow and integer
; overflow, causes no floating overflow or other arithmetic traps, and
; preserves enables across the call.
;
; Note: This routine is written to avoid causing any integer overflows,
; floating overflows, or floating underflows or divide by 0 conditions,
; whether enabled or not.
;
;---

ERR:	BRW	ERROR

	.ENTRY	MTH$ATANH, ACMASK	; standard call-by-reference entry
					; disable DV (and FU), enable IV
	MOVX	@X(AP), R0		; R0 = arg

	SUBF3	R0, S^#1.0, R2		; R2 = 1-X
	BLEQ	ERR			; ATANH(X) is not defined for X>=1
	ADDF3	R0, S^#1.0, R4		; R4 = 1+X
	BLEQ	ERR			; ATANH(X) is not defined for X<=-1
	DIVF2	R2, R4			; R4 = approximation to (1+X)/(1-X)
	MOVAB	G^MTH$$AB_ALOG_V, R5
	ADDL2	(R5), R5		; R5 = address of ALOG table
	BICW3	#1@F_EXP-1, R4, R3	; R3 = Biased exponent
	SUBW	#^X4000, R3		; R3 = Unbiased exponent
	BLEQ	NEG_EXP			; Branch to processing for n=<0

	SUBW	#1@F_EXP, R3		; Exponent is positive, R3 = N = n - 1
	SUBW	R3, R4			; R4 = F = 2f
	MOVZBL	R4, R4			; R4 = index into ALOG table
	.IF	NE, F_EXP-X_EXP
	DIVW2	#1@<F_EXP-X_EXP>, R3	; Shift R3 to scale X-floating
	.ENDC
	CVTWX	R3, -(SP)		; Push N onto the stack
	CVTBL	(R5)[R4], R5		; R5 = offset into FHI tables
	BLSS	LN_1_PLUS_W		; Branch to handle F close to 1
	MOVAX	G^MTH$$AB_F_FHI[R5], R5	; R5 = Address of FHI
	MOVX	(R5)+, R4		; R4 = FHI
;
; Compute Z = (F - FHI)/(F + FHI)
;		Z = [(1+X) - Y*(1-X)]/[(1+X) + Y*(1-X)]
;		Z = [1 + X - Y + X*Y]/[1 + X + Y - X*Y]
;	where Y = FHI*2**N, roughly equal to (1+X)/(1-X)
;
	ADDW	R3, R4			; R4 = FHI * 2**N = SFHI
	SUBX3	R4, S^#1.0, R2		; R2 = 1 - SFHI
	ADDX	S^#1.0, R4		; R4 = 1 + SFHI
	DIVX	R4, R2			; R2 = (1-SFHI)/(1+SFHI) = D
	ADDX3	R0, R2, R4		; R4 = D + X
	MULX	R0, R2			; R2 = D * X
	ADDX	S^#1.0, R2		; R2 = 1 + D*X
	DIVX	R2, R4			; R4 = (D+X)/(1+D*X) = Z
;
; Compute Z**2, P(Z**2) and Z*P(Z**2)
;
	MULX3	R4, R4, R0		; R0 = Z**2
	POLYX	R0, #LOGLEN2, LOGTAB2	; R0 = P(Z**2)
	MULX	R4, R0			; R0 = Z*P(Z**2)
;
; Compute B = N*LN2_LO + LN_FHI_LO + Z*P(Z*Z)
;
	MULX3	(SP), LN2_LO, R2	; R2 = N*LN2_LO
	ADDX	(R5)+, R2		; R2 = N*LN2_LO + LN_FHI_LO
	ADDX	R2, R0			; R0 = B
;
; Compute A = N*LN2_HI + LN_FHI_HI and ALOG(X)
;
	MULX3	(SP)+, LN2_HI, R2	; R2 = N*LN2_HI
	ADDX	(R5), R2		; R2 = A = N*LN2_HI + LN_FHI_HI
	ADDX	R2, R0			; R0 = A + B = ALOG(X)
	SUBW2	#1@X_EXP, R0		; Divide by 2
	RET

NEG_EXP:
	SUBW	R3, R4			; R4 = F = 2f
	MOVZBL	R4, R4			; R4 = index into ALOG table
	.IF	NE, F_EXP-X_EXP
	DIVW2	#1@<F_EXP-X_EXP>, R3	; Shift R3 to scale X-floating
	.ENDC
	CVTWX	R3, -(SP)		; Push N onto the stack
	CVTBL	(R5)[R4], R5		; R5 = offset into FHI tables
LN_1_PLUS_W:
	BLSS	LN_1_PLUS		; Branch to handle F close to 1
	MOVAX	G^MTH$$AB_F_FHI[R5], R5	; R5 = Address of FHI
	MOVX	(R5), R4		; R4 = FHI
;
; Compute Z = (F - FHI)/(F + FHI)
;		Z = [(1+X) - Y*(1-X)]/[(1+X) + Y*(1-X)]
;		Z = [1 + X - Y + X*Y]/[1 + X + Y - X*Y]
;	where Y = FHI*2**N, roughly equal to (1+X)/(1-X)
;
	ADDW	R3, R4			; R4 = FHI * 2**N = SFHI
	SUBX3	R4, S^#1.0, R2		; R2 = 1 - SFHI
	ADDX	S^#1.0, R4		; R4 = 1 + SFHI
	DIVX	R4, R2			; R2 = (1-SFHI)/(1+SFHI) = D
	ADDX3	R0, R2, R4		; R4 = D + X
	MULX	R0, R2			; R2 = D * X
	ADDX	S^#1.0, R2		; R2 = 1 + D*X
	DIVX	R2, R4			; R4 = (D+X)/(1+D*X) = Z
;
; Compute Z**2, P(Z**2) and Z*P(Z**2)
;
	MULX3	R4, R4, R0		; R0 = Z**2
	POLYX	R0, #LOGLEN2, LOGTAB2	; R0 = P(Z**2)
	MULX	R4, R0			; R0 = Z*P(Z**2)
;
; Compute B = N*LN2_LO + LN_FHI_LO + Z*P(Z*Z)
;
	MULX3	(SP), LN2_LO, R2	; R2 = N*LN2_LO
	ADDX	-(R5), R2		; R2 = N*LN2_LO + LN_FHI_LO
	ADDX	R2, R0			; R0 = B
;
; Compute A = N*LN2_HI + LN_FHI_HI and ALOG(X)
;
	MULX3	(SP)+, LN2_HI, R2	; R2 = N*LN2_HI
	SUBX	-(R5), R2		; R2 = A = N*LN2_HI + LN_FHI_HI
	ADDX	R2, R0			; R0 = A + B = ALOG(X)
	SUBW2	#1@X_EXP, R0		; Divide by 2
	RET

;
; Special logic for F close to 1
;

LN_1_PLUS:
	SUBX3	R0, S^#1.0, R4		; R4 = 1-X
	TSTW	R3			; Determine which way to calculate W
	BEQL	10$
	DIVX3	R4, S^#2.0, R4		; R4 = 2/(1-X)
	SUBX	S^#1.0, R4		; R4 = (1+X)/(1-X)
	SUBW	R3, R4			; Scale R4
	SUBX	S^#1.0, R4		; R4 = W
	BRB	20$
10$:	DIVX3	R4, R0, R4		; R4 = X / (1-X)
	ADDW	#1@X_EXP, R4		; R4 = W = 2*X/(1-X) = (1+X)/(1-X) - 1
20$:	POLYX	R4, #LOGLEN1, LOGTAB1	; R0 = Q(W)
	MULX	R4, R0			; Finish computing Q(W)
	MULX	R4, R0			; R0 = W*Q(W)
	MULX3	(SP), LN2_LO, R2	; R2 = N*LN2_LO
	ADDX	R2, R0			; R0 = N*LN2_LO + W*Q(W)
	ADDX	R4, R0			; R0 = N*LN2_LO + W*Q(W) + W
	MULX	LN2_HI, (SP)		; (SP) = N*LN2_HI
	ADDX	(SP)+, R0		; R0 = ALOG(X)
	SUBW2	#1@X_EXP, R0		; Divide by 2
	RET
;
; X <= 0.0, signal error
;
ERROR:	MOVZBL	#MTH$K_INVARGMAT, -(SP)	; condition value
	ASHL	#15, #1, R0		; R0 = result = reserved operand -0.0
					; goes to signal mechanism vector
					; (CHF$L_MCH_R0/R1) so error handler
					; can modify the result.
	CALLS	#1, G^MTH$$SIGNAL	; signal error and use real user's PC
					; independent of CALL vs JSB
	RET				; return - R0 restored from
					; CHF$L_MCH_R0/R1
	.END
