MODULE STR$UPCASE (		! copy source to dest and upcase

		IDENT = '1-005'	! File: STRUPCASE.B32	Edit: RKR1005

		  ) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY: String support library
!
! ABSTRACT:
!
!	This module takes strings of any supported class or dtype and 
!	copies the source string to the destination string, upcasing 
!	all letters a-z.
!	European languages with accented letters should use 
!	STR$TRANSLATE.
!	This routine is needed so that if a user wants any character
!	comparison to be case blind, he will first convert both strings
!	to upper case.
!
! ENVIRONMENT: User mode, AST level or not or mixed
!
! AUTHOR: R. Will, CREATION DATE: 1-Dec-79
!
! MODIFIED BY:
!
!  R. Will, 1-Dec-79: VERSION 01
! 1-001	- Original
! 1-002 - String speedup, status from macros.  RW  11-Jan-1980
! 1-003 - Enhance to recognize additional classes of descriptors by
!	  using $STR$GET_LEN_ADDR to extract length and address of
!	  first data byte.  Remove string interlocking code.
!	  RKR 29-APR-1981
! 1-004 - Speed up code.   RKR 7-OCT-1981.
! 1-005 - Use STR$COPY_R_R8 for copying.  Use $STR$SIGNAL_FATAL
!	  instead of $STR$CHECK_STATUS.  RKR 18-NOV-1981.
!--

!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE 
		(EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!

REQUIRE 'RTLIN:STRLNK';		! Use require file with string linkage

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    STR$UPCASE;			! convert lowercase to uppercase

!
! INCLUDE FILES:
!

REQUIRE 'RTLIN:RTLPSECT';	! Declare PSECTS code

REQUIRE 'RTLIN:STRMACROS';	! use string macros to code

LIBRARY 'RTLSTARLE';		! STARLET library for macros and symbl

!
! MACROS: NONE
!

!
! EQUATED SYMBOLS: NONE
!

!
! PSECT DECLARATIONS
!

DECLARE_PSECTS (STR);

!
! OWN STORAGE: NONE
!

!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    LIB$STOP,					! signal errors
    STR$COPY_R_R8 : STR$JSB_COPY_R ;		! Routine to do the copy

EXTERNAL LITERAL
    STR$_NORMAL;				! successful completion

GLOBAL ROUTINE STR$UPCASE (		! upcase

	DEST_DESC, 		! Pointer to destination descriptor
	SRC_DESC		! Pointer to source descriptor

			  ) : =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine copies the input string to the output string  and
!	changes all lower case letters a-z to upper case
!
! FORMAL PARAMETERS:
!
!	DEST_DESC.wt.dx		pointer to destination string descriptor
!	SRC_DESC.rt.dx		pointer to source string descriptor
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION CODES:
!
!	SS$_NORMAL	Success
!	STR$_TRU	Truncation occurred.  Warning.
!
! SIDE EFFECTS:
!
!	May signal:
!	    STR$_FATINTERR	Fatal internal error
!	    STR$_ILLSTRCLA	Illegal (or unsupported) string class
!	    STR$_INSVIRMEM	Insufficient virtual memory for
!				reallocation of dynamic string
!
!--

    BEGIN

    LOCAL
	IN_LEN,				! length of input string
	IN_ADDR,			! addr of 1st byte of input str.
	OUT_LEN,			! length of output string
					! (after copy operation)
	OUT_ADDR,			! addr of 1st byte of output
					! string (after copy operation)
	RETURN_STATUS;			! status from STR$COPY_R_R8

    MAP
	SRC_DESC  : REF $STR$DESCRIPTOR,
	DEST_DESC : REF $STR$DESCRIPTOR;

!+
! Compute the length and addr of 1st byte of input string and signal
! if fatal error returned.
!-
    $STR$GET_LEN_ADDR ( SRC_DESC, IN_LEN, IN_ADDR ) ;

!+
! Copy the string and signal if fatal error results.
!-

    RETURN_STATUS = STR$COPY_R_R8 ( .DEST_DESC, .IN_LEN, .IN_ADDR) ;
    $STR$SIGNAL_FATAL (RETURN_STATUS) ;

!+
! Compute the current length of the output string.
!-
    $STR$GET_LEN_ADDR ( DEST_DESC, OUT_LEN, OUT_ADDR ) ;

!+
! The copy is finished, now upcase the destination string.
!-

    CH$TRANSLATE (			! ASCII translation table
	CH$TRANSTABLE (			! upcase the string
	    0, 1, 2, 3, 4, 5, 6, 7, 8, 9,         ! translate to self
	    10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 
	    20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 
	    30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 
	    40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 
	    50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 
	    60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 
	    70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
	    80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 
	    90, 91, 92, 93, 94, 95, 96,

					65, 66, 67,	! lower to upper
	    68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 
	    78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 
	    88, 89, 90,

		        123, 124, 125, 126, 127), ! remainder of 
						  ! translate to self
	.OUT_LEN,				! from destination
	.OUT_ADDR,				!
	STR$K_FILL_CHAR,			! never used since same
						! string
	.OUT_LEN,				! to destination
	.OUT_ADDR);
    
    RETURN .RETURN_STATUS;
    END;					!End of STR$UPCASE

END						!End of module

ELUDOM
