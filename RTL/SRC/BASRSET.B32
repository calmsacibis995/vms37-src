MODULE BAS$RSET (				! Move string right justified, fixed semantics
		IDENT = '1-005'			! File: BASRSET.B32, Edit: JBS1005
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY: String support library
!
! ABSTRACT:
!
!	Copy one string of any class or dtype to another string of any class
!	or dtype.  Right justify the source string in the destination string
!	using fixed length semantics on the destination string, ie. do not
!	alter the current length for dynamic strings (or varying strings if
!	they are implemented).  Blank pad or truncate on the left.
!
! ENVIRONMENT: User mode, AST level or not or mixed
!
! AUTHOR: R. Will,  CREATION DATE: 02-Apr-79
!
! MODIFIED BY:
!
! 	R. Will, 02-Apr-79: VERSION 01
! 01	- original
! 1-002	- Use STR$K_FILL_CHAR.  JBS 15-APR-1979
! 1-003 - Add string by ref entry.  RW  18-JUL-79
! 1-004 - String clean up, don't use $STR$ macros.  RW  29-Oct-79
! 1-005	- Free temp string before exitting.  Not doing this caused a
!	   field test site's large file update to run out of virtual
!	   storage after 8 hours!  JBS 10-MAR-1980
!--

!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!

REQUIRE 'RTLIN:STRLNK';				! Use require file with string linkage

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    BAS$RSET : NOVALUE,				! Copy right justified using fixed sem
    BAS$RSET_R : NOVALUE;			! RSET with string by ref

!
! INCLUDE FILES:
!

REQUIRE 'RTLIN:RTLPSECT';			! Use to declare PSECTs

LIBRARY 'RTLSTARLE';				! STARLET library for macros and symbl

!
! MACROS: NONE
!
!
! EQUATED SYMBOLS: NONE
!
!
! PSECT DECLARATIONS
!
DECLARE_PSECTS (BAS);
!
! OWN STORAGE: NONE
!
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    STR$FREE1_DX_R4 : STR$JSB_GETFRE,		! deallocate a string
    STR$COPY_DX_R8 : STR$JSB_COPY_DX;		! copy string to and from temp


GLOBAL ROUTINE BAS$RSET (			! copy right justified
	DEST_DESC, 				! Pointer to dest str desc
	SRC_DESC)				! Pointer to src str desc
    : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine copies one string of any class or dtype to
!	a second string of any class or dtype but which is treated as
!	a fixed length string.  The source is right justified in the
!	destination with truncation or blank padding on the left.
!	This is accomplished by creating a temporary string with
!	the attributes of the destination string and using the temporary
!	so that the string cannot be moved from under us, since we
!	can't use the $STR$ interlock macros.
!
! FORMAL PARAMETERS:
!
!	DEST_DESC.wx.dx		pointer to destination string descriptor
!	SRC_DESC.rx.dx		pointer to source string descriptor
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	This routine calls STR$COPY and therefore may signal any of its errors.
!	It may also allocate and/or deallocate space in the destination string.
!	It will allocate and deallocate space for a temporary string.
!
!--

    BEGIN

    MAP
	DEST_DESC : REF BLOCK [8, BYTE];

    MAP
	SRC_DESC : REF BLOCK [8, BYTE];

    LOCAL
	TEMP_DESC : BLOCK [8, BYTE];

!+
! Copy the destination string to a temporary so that no one else may
! change its length or pointer if it is a dynamic string.
!-
    TEMP_DESC [DSC$W_LENGTH] = 0;
    TEMP_DESC [DSC$B_DTYPE] = DSC$K_DTYPE_T;
    TEMP_DESC [DSC$B_CLASS] = DSC$K_CLASS_D;
    TEMP_DESC [DSC$A_POINTER] = 0;
    STR$COPY_DX_R8 (TEMP_DESC [0, 0, 0, 0], DEST_DESC [0, 0, 0, 0]);
!+
! Treat the temporary destination as a fixed length string
!-

    IF .TEMP_DESC [DSC$W_LENGTH] LEQ .SRC_DESC [DSC$W_LENGTH]
!+
! The source string is longer than the destination
! string.  Compute the amount of the source string which must
! be truncated from the left and move the source starting there.
!-
    THEN
	CH$MOVE (				! copy the string
	    .TEMP_DESC [DSC$W_LENGTH], 		! move enuf chars to fill dest
	    CH$PLUS (				! start after trunc in source
		CH$PLUS (.SRC_DESC [DSC$A_POINTER], .SRC_DESC [DSC$W_LENGTH]), -.TEMP_DESC [DSC$W_LENGTH]),
						!
	    .TEMP_DESC [DSC$A_POINTER])		! start of dest string
!+
! The source string is shorter than or the same length as the
! destination.  Fill the number of characters to pad
! and then move the source.
!-
    ELSE
	CH$MOVE (				! fill the temp right justified
	    .SRC_DESC [DSC$W_LENGTH], 		! move length of source
	    .SRC_DESC [DSC$A_POINTER], 		! start at beginning of source
	    CH$FILL (' ', 			! start move after pad blanks
		.TEMP_DESC [DSC$W_LENGTH] - .SRC_DESC [DSC$W_LENGTH], 	!
		.TEMP_DESC [DSC$A_POINTER]));

!+
! Now put the string in the true destination
!-
    STR$COPY_DX_R8 (DEST_DESC [0, 0, 0, 0], TEMP_DESC [0, 0, 0, 0]);
!+
! Free the temporary string.
!-
    STR$FREE1_DX_R4 (TEMP_DESC [0, 0, 0, 0]);
    END;					!End of BAS$RSET


GLOBAL ROUTINE BAS$RSET_R (			! Copy right justified
	DEST_DESC, 				! Pointer to dest str desc
	SRC_LENGTH, 				! Length of source string
	SRC_POINTER)				! Pointer to source string
    : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine copies one string of any class or dtype to
!	a second string of any class or dtype but which is treated as
!	a fixed length string.  The source is right justified in the
!	destination with truncation or blank padding on the left.
!
! FORMAL PARAMETERS:
!
!	DEST_DESC.wx.dx		pointer to destination string descriptor
!	SRC_LENGHT.rlu.v	source string length
!	SRC_POINTER.rlu.v	pointer to source string
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	This routine calls STR$COPY and therefore may signal any of its errors.
!	It may also allocate and/or deallocate space in the destination string.
!	It will allocate and deallocate space for a temporary string.
!
!--

    BEGIN

    MAP
	DEST_DESC : REF BLOCK [8, BYTE];

    LOCAL
	TEMP_DESC : BLOCK [8, BYTE];

!+
! Copy the destination string to a temporary to preserve its length, so
! that no one may move the string from under us or change it's length
! while we are processing it.
!-
    TEMP_DESC [DSC$W_LENGTH] = 0;
    TEMP_DESC [DSC$B_DTYPE] = DSC$K_DTYPE_T;
    TEMP_DESC [DSC$B_CLASS] = DSC$K_CLASS_D;
    TEMP_DESC [DSC$A_POINTER] = 0;
    STR$COPY_DX_R8 (TEMP_DESC [0, 0, 0, 0], DEST_DESC [0, 0, 0, 0]);
!+
! Treat the destination as a fixed length string
!-

    IF .TEMP_DESC [DSC$W_LENGTH] LEQ .SRC_LENGTH
!+
! The source string is longer than the destination
! string.  Compute the amount of the source string which must
! be truncated from the left and move the source starting there.
!-
    THEN
	CH$MOVE (.TEMP_DESC [DSC$W_LENGTH], 	! move enuf chars to fill dest
	    .SRC_POINTER + 			! start after trunc in source
	    .SRC_LENGTH - .TEMP_DESC [DSC$W_LENGTH], .TEMP_DESC [DSC$A_POINTER])
						! start of dest string
!+
! The source string is shorter than or the same length as the
! destination.  Fill the number of characters to pad
! and then move the source.
!-
    ELSE
	CH$MOVE (.SRC_LENGTH, 			! move length of source
	    .SRC_POINTER, 			! start at beginning of source
	    CH$FILL (' ', 			! start move after pad blanks
		.TEMP_DESC [DSC$W_LENGTH] - .SRC_LENGTH, 	!
		.TEMP_DESC [DSC$A_POINTER]));

!+
! Now copy the temporary back into the destination
!-
    STR$COPY_DX_R8 (DEST_DESC [0, 0, 0, 0], TEMP_DESC [0, 0, 0, 0]);
!+
! Free the temporary string.
!-
    STR$FREE1_DX_R4 (TEMP_DESC [0, 0, 0, 0]);
    END;					!End of BAS$RSET_R

END						!End of module

ELUDOM
