MODULE LIB$SYS_TRNLOG (		! Translate logical name

	IDENT = '1-008'		! File: LIBTRNLOG.B32 EDIT: RKR1008

		      ) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  General Library Support
!
! ABSTRACT:
!
!	Using $TRNLOG translate a logical name, returning the 
! resultant string using the semantics of the caller's string.
! Parameter DSBMSK is presented to this routine by-reference and
! is promoted to by-value for presentation to $TRNLOG
!
! ENVIRONMENT:  VAX-11 User Mode
!
! AUTHOR: R. Reichert, CREATION DATE: 20-SEPT-1979
!
! MODIFIED BY:
!
! 1-001	- Original.  RKR 20-SEPT-1979
! 1-002 - Change name to LIB$SYS_TRNLOG. RKR 15-OCT-79
! 1-003	- Correct some minor errors in RSLLEN and returning
!	   status, and improve the comments.  JBS 19-OCT-1979
! 1-004 - Add code to promote by-reference parameter to by-value
!	  parameter.  RKR 1-NOV-79
! 1-005 - Change STR$ codes to LIB$ codes. RKR  22-JAN-80
! 1-006 - Enhance to recognize additional classes of string descriptors
!	  on output by always getting data into internal buffer and
!	  using LIB$SCOPY_DXDX6 to deliver to caller's buffer.
!	  LIB$ANALYZE_SDESC_R3 is used to compute the number of bytes
!	  actually copied after the copy operation completes.
!	  Change to use LIB$SCOPY_DXDX6 instead of STR$COPY_DX.  This
!	  avoids having to change STR$ statuses to LIB$ statuses and
!	  eliminates need for a handler.
!	  RKR 29-MAY-1981.
! 1-007 - Add special-case code to process string descriptors that
!	  "read" like fixed string descriptors.  RKR 7-OCT-1981.
! 1-008 - Redirect jsb's from LIB$ANALYZE_SDESC_R3 to
!	  LIB$ANALYZE_SDESC_R2.  Use LIB$SCOPY_RDX6 for copying.
!	  RKR 18-NOV-1981.
!--

!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE 
		(EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!
REQUIRE 'RTLIN:STRLNK';	! linkage for LIB$ANALZYE_SDESC_R3
!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    LIB$SYS_TRNLOG;		! Translate logical name

!
! INCLUDE FILES:
!

REQUIRE 'RTLIN:RTLPSECT';	! Macros for defining psects

LIBRARY 'RTLSTARLE';		! System symbols and macros

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!

LITERAL
    LOCAL_BUF_SIZE = 256;	! Max size of resultant string

!
! PSECTS:
!
DECLARE_PSECTS (LIB);		! Declare psects for LIB$ facility
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    LIB$ANALYZE_SDESC_R2 : LIB$ANALYZE_SDESC_JSB_LINK, ! Extract length
						       ! and address of
						       ! 1st data byte
						       ! from descriptor
    LIB$SFREE1_DD6 : STRING_JSB,! Free string space
    LIB$SCOPY_R_DX6 : STRING_JSB,	! Copy string by reference
    LIB$SCOPY_DXDX6 : STRING_JSB;	! Copy string by descriptor

GLOBAL ROUTINE LIB$SYS_TRNLOG (		! Translate logical name

	LOGNAM,		! address of logical name string descriptor
	RSLLEN,		! address of word to receive length of resultant
			! name string
	RSLBUF,		! address of result string buffer descriptor
	TABLE,		! address of byte to receive logical name 
			! table number
	ACMODE,		! address of byte to receive access mode of 
			! entry (process table only)
	DSBMSK		! table search disable mask

			       ) : =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Using $TRNLOG translate a logical name, returning the 
! resultant string using the semantics of the caller's string.
! Parameter DSBMSK is presented to this routine by-reference and
! is promoted to by-value for presentation to $TRNLOG
!
!	See $TRNLOG system service description
!
! FORMAL PARAMETERS:
!
!	LOGNAM.rt.dx	address of logical name string descriptor
!
!	RSLLEN.ww.r	address of word to receive length of
!			resultant name string
!			(Optional parameter)
!
!	RSLBUF.wt.dx	address of result string buffer descriptor
!
!	TABLE.wb.r	address of byte to receive logical name table
!			number
!			(Optional parameter)
!
!	ACMODE.wb.r	address of byte to receive access mode of entry
!			(process table only)
!			(Optional parameter)
!
!	DSBMSK.rbu.r	Address of
!			table search disable mask
!			(Optional parameter)
!
!			Bit Set	Meaning
!			-------	-------
!
!			0	Do not search system
!			1	Do not search group
!			2	Do not search process
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION CODES:
!
!	SS$_NORMAL	Procedure successfully completed
! From LIB$SCOPY_R_DX6 or LIB$SCOPY_DXDX6
!	LIB$_STRTRU	Success, but source string truncated
!	LIB$_INSVIRMEM	Insufficient virtual memory
!	LIB$_INVSTRDES	Invalid string descriptor
! From $TRNLOG
!	SS$_NOTRAN	Successful, but input logical name string was
!			placed in output buffer because no equivalence
!			name was found.
!	SS$_ACCVIO	The logical name string or string descriptor
!			cannot be read, or the output length, output
!			buffer, or table or access mode field cannot
!			be written by the caller.
!	SS$_IVLOGNAM	The specified logical name string has a length
!			of zero or has more than 63 characters.
!	SS$_RESULTOVF	The buffer to receive the resultant string
!			has a length of zero, or it is smaller than the
!			string.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    BUILTIN
	ACTUALCOUNT,
	NULLPARAMETER,
	ACTUALPARAMETER;

    LOCAL
	COPY_STATUS,		! Status from copy operation
	STR_STATUS,		! Status from $TRNLOG
	LOCAL_BUFF : VECTOR [LOCAL_BUF_SIZE, BYTE],	! Local buffer
	BUFFER_DESC : BLOCK [8, BYTE],	! Descriptor for local buffer
	LOC_DYN_DESC: BLOCK [8, BYTE];	! Local dynamic descriptor

    MAP
	DSBMSK: REF VECTOR [,BYTE],
	LOGNAM : REF BLOCK [, BYTE],
	RSLBUF : REF BLOCK [, BYTE],
	RSLLEN : REF VECTOR [, WORD];

!+
! Construct a static descriptor to receive the translated string from
! VAX/VMS
!-
    BUFFER_DESC [DSC$W_LENGTH] = LOCAL_BUF_SIZE;
    BUFFER_DESC [DSC$B_DTYPE] = DSC$K_DTYPE_T;
    BUFFER_DESC [DSC$B_CLASS] = DSC$K_CLASS_S;
    BUFFER_DESC [DSC$A_POINTER] = LOCAL_BUFF;

!+
! If the input string descriptor cannot be readily determined to be
! one that "reads" like a CLASS_S  or CLASS_D descriptor, we copy the
! input string into an internal dynamic buffer and use that instead
! as input to $TRNLOG call.
!-
    IF .LOGNAM [DSC$B_CLASS] GTRU DSC$K_CLASS_D
    THEN
	BEGIN
	!+
	! Set up virgin dynamic descriptor
	!-
	LOC_DYN_DESC [DSC$W_LENGTH] = 0;
	LOC_DYN_DESC [DSC$B_DTYPE] = DSC$K_DTYPE_T;
	LOC_DYN_DESC [DSC$B_CLASS] = DSC$K_CLASS_D;
	LOC_DYN_DESC [DSC$A_POINTER] = 0;
	!+
	! Copy caller's input string into our internal buffer.
	! If we fail, quit since either there is insufficient dynamic
	! memory left, or caller's descriptor is an unsupported class.
	! In either case, let him worry about it.
	!-
	COPY_STATUS = LIB$SCOPY_DXDX6 (.LOGNAM , LOC_DYN_DESC );
	IF NOT .COPY_STATUS THEN RETURN (.COPY_STATUS) ;
	END;
!+
! Call $TRNLOG with the appropriate combination of caller's
! parameters, default parameters and internal variables
!-
    STR_STATUS = $TRNLOG (
		LOGNAM = (IF .LOGNAM [DSC$B_CLASS] GTRU DSC$K_CLASS_D 
			  THEN LOC_DYN_DESC 
			  ELSE ACTUALPARAMETER (1)),	! Input string
		RSLLEN = BUFFER_DESC,	! Length of resulting string
		RSLBUF = BUFFER_DESC,	! Resulting string
		TABLE = (IF NULLPARAMETER (4) 	! Table number
			THEN 0 
			ELSE ACTUALPARAMETER (4)),
		ACMODE = (IF NULLPARAMETER (5)  ! Access mode
			THEN 0 
			ELSE ACTUALPARAMETER (5)),
		DSBMSK = (IF NULLPARAMETER (6)  ! Disable mask
			THEN 0 
			ELSE .DSBMSK[0] )
			 );
!+
! If we're using an internal dynamic string, we no longer need it.
! Give it back.
!-
    IF .LOGNAM [DSC$B_CLASS] GTRU DSC$K_CLASS_D 
	THEN LIB$SFREE1_DD6 (LOC_DYN_DESC) ;

!+
! Copy internal buffer to caller's buffer, letting LIB$SCOPY_R_DX6
! worry about its semantics.
!-
    COPY_STATUS = LIB$SCOPY_R_DX6 ( .BUFFER_DESC [DSC$W_LENGTH], 
				    .BUFFER_DESC [DSC$A_POINTER], 
				    .RSLBUF ) ;

!+
! If caller supplied optional length parameter, update it.
! To do this accurately, we need to inspect the resulting descriptor
! as it appears after the copy.  Get LIB$ANALYZE_SDESC_R2 to do it.
! No need to check LIB$ANALYZE_SDESC_R2 status.  If RSLBUF descr
! was bad, LIB$SCOPY_R_DX6 would have told us about it.
!-
    IF (NOT NULLPARAMETER(2)) 
    THEN 
	BEGIN
	LOCAL
	    RESULT_LEN,		! No. of bytes delivered to caller
	    RESULT_ADDRESS;	! Address of 1st data byte of callers
				! buffer
	IF .RSLBUF [DSC$B_CLASS] GTRU DSC$K_CLASS_D
	THEN		! Use generalized extraction of length
	    BEGIN
	    LIB$ANALYZE_SDESC_R2 ( .RSLBUF ; 
			           RESULT_LEN, RESULT_ADDRESS );
	    END

	ELSE		! Fetch length directly

	    RESULT_LEN = .RSLBUF [DSC$W_LENGTH] ;


	RSLLEN [0] = MIN (.BUFFER_DESC [DSC$W_LENGTH], .RESULT_LEN) ;
	END;
!+
! At this point we have 2 statuses that we could return to caller.
! Determine which one is the "most meaningful".
!-
    !+
    ! If original $TRNLOG call failed, tell him about that
    ! else give him the copy status.
    !-
    IF .STR_STATUS NEQ SS$_NORMAL THEN RETURN (.STR_STATUS)
		       		  ELSE RETURN (.COPY_STATUS) ;

    END;			! end of LIB$SYS_TRNLOG

END				! end of module LIB$SYS_TRNLOG

ELUDOM
