	.TITLE MTH$$SIGNAL	; MATH ERROR SIGNAL ROUTINE
	.IDENT	/1-003/		; File: MTHSIGNAL.MAR

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
; FACILITY:  Mathematical Library
;
; ABSTRACT:
;
;	SIGNAL math error as SEVERE, continue will return reserved operand
;
; ENVIRONMENT:
;
;--
;

	.SBTTL	HISTORY			; DETAILED
;
; AUTHOR:	P. Yuo, CREATION DATE: 28-Sep-77
;
; MODIFIED BY:
;	0-1, : VERSION
; 0-2	- Removed incorrect MTH$_abcmnoxyz defns.  TNH 3-Nov-77
; 0-3	- Reference previous frame properly.  TNH 10-Nov-77
; 0-4	- Signal SEVERE, set subsystem specific bit.  TNH 20-Dec-77
; 0-5	- Include FAO arg count.  TNH 10-Jan-78
; 0-6	- Remove all debugging FAO stuff.  JMT 17-Jan-78
; 0-7	- Make fake frame if JSB, so traceback same as CALL.  TNH 18-Apr-78
; 1-001	- Update version number and copyright information.  JBS 16-NOV-78
; 1-002	- Add "_" to the PSECT directive.  JBS 22-DEC-78
; 1-003 - Change shared external references to G^ RNH 25-Sep-81

	.SBTTL	DECLARATION

; INCLUDE FILES:	NONE
;
; EXTERNAL SYMBOLS:
;

	.DSABL	GBL			; Declare all externals explicitly
	.EXTRN	LIB$SIGNAL		; Signal exception

;
; MACROS:
;
	$MTHERR				; MTH$ symbols
	$SFDEF				; stack frame symbols
	$SSDEF				; STARLET completion codes
	$STSDEF				; condition value symbols

; EQUATED SYMBOLS:
;
	ERROR_CODE = 4			; error code is first formal
	JSB_PC = 8			; JSB PC (optional)

; PSECT DECLARATIONS:
;

	.PSECT	_MTH$CODE PIC,SHR,LONG,EXE,NOWRT
					; program section for MTH$ code


	.SBTTL	MTH$$JACKET_HND		; Math routine error handler

	.ENTRY	MTH$$JACKET_HND,0
	MOVZWL	#SS$_RESIGNAL, R0	; just resignal
	RET


	.SBTTL	MTH$$SIGNAL		; Signal any math error

;++
; FUNCTIONAL DESCRIPTION:
;
;	Algorithmic steps:
;	1) R0/R1 contain results from math routine and will be passed as
;	   implicit input to LIB$SIGNAL. LIB$SIGNAL will save R0/R1 in signal
;	   mechanism vector, CHF$L_MCH_R0/R1, so that when (user's or any)
;	   error handler get called CHF$L_MCH_R0/R1 may be modified.
;	2) Save implicit input R0/R1 on stack for later.
;	3) If called with only one argument then the math routine must have
;	   been called with CALL rathen then JSB.
;	4) If user called math routine with JSB, create extra stack
;	   frame and fill in return PCs so looks like user had CALLed instead.
;	   Get correct user PC depending on whether CALL or JSB.
;	5) Convert MTH$ error code to 32-bit VAX error code.
;		Set bits 31:16 to MTH$ facility code.
;		Shift small error code left 3 places to make room for severity code
;	6) Signal condition as SEVERE (CALL LIB$SIGNAL).
;	[NOTE: DO NOT RESTORE R0/R1]
;	7) If handler wishes to continue, return to caller (R0/R1 restored from
;	   CHF$L_MCH_R0/R1)
;
; CALLING SEQUENCE:
;
;	CALL	MTH$SIGNAL (error_message.rl.v [,call_pc.rl.v])
;
; INPUT PARAMETERS:
;
;	error_message.rl.v		; math error message
;	call_pc.rl.v			; present only if math routine is called
;					; by JSB
;
; IMPLICIT INPUTS:
;
;	R0:R1 - passed to LIB$SIGNAL to be put in signal mechanism vector
;		so user's or any error handler can fixup.
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	Signal error message.
;
;--


	.ENTRY	MTH$$SIGNAL, ^M<R2,R3>	; save R2:R3
					; but do not use R0:R1, (passed as
					; implicit input to LIB$SIGNAL) and
					; DO NOT RESTORE R0/R1, since they
					; may have been modified by error
					; handling routine.

;+
; Check number of arguments to see if math routine is called by CALL or JSB
;-

	CMPB	(AP), #1		; if called with only one arg
	BEQLU	5$			; assume mth routine called with CALL
					; (rather than JSB)

;+
; If math routine is called by JSB then check if its caller is a math
; routine or the user.
;-

	MOVL	JSB_PC(AP), R2		; R2 = JSB PC
	MOVAL	B^MTH$$JACKET_HND, R3	; R3 = absolute adr. of handler
					; setup by each CALL MTH$
					; (as opposed to JSB MTH$)
	CMPL	@SF$L_SAVE_FP(FP), R3	; compare prev. frame handler
	BNEQ	10$			; branch if not jacket handler

;+
; Previous frame had established MTH$$JACKET_HND as a handler
; so it must have been math routine called with CALL (not JSB)
; Get user PC stored by CALL instruction
;-

5$:	MOVL	SF$L_SAVE_FP(FP), R2	; R2 = previous frame adr.
					; i.e., math routine frame
	MOVL	SF$L_SAVE_PC(R2), R2	; R2 = saved user's PC
	BSBB	DO_SIGNAL		; signal error code 4(AP) and
					; user PC (R2)
	RET				; return to caller (math routine)

;+
; User called math routine with JSB - create extra frame
; so that stack looks just like user had called math routine with CALL.
; Then traceback and stack depth (handler argument) will be same
; for JSB and CALL.
;-

10$:	MOVL	SF$L_SAVE_PC(FP), R3	; R3 = return PC to math routine
	PUSHL	R3			; save return PC to math routine
	MOVL	R2, SF$L_SAVE_PC(FP)	; set return PC in frame to be user JSB PC
	CALLG	(AP), B^SIGNAL1		; create another frame and signal
	MOVL	(SP)+, SF$L_SAVE_PC(FP)	; restore return PC to math routine
	RET				; return to caller (math routine)

	.SBTTL	SIGNAL1			; Local signal routine (when user JSB)

;++
; FUNCTIONAL DESCRIPTION:
;
;	Move return PCs up a frame and signal error
;
; CALLING SEQUENCE:
;
;	MOVL	user JSB PC, R2
;	MOVL	return PC to math routine, R3
;	CALL	SIGNAL1 (error_message.rl.v [,ignored])
;
; INPUT PARAMETERS:
;
;	error_message.rl.v		; math error message
;
; IMPLICIT INPUTS:
;
;	R0/R1 - passed to LIB$SIGNAL to be put in signal mechanism vector
;		so user's or any error handler can fixup.
;	R2    - user JSB PC
;	R3    - return PC to math routine
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	Signal error message
;--

SIGNAL1:
	.WORD ^M<>			; save nothing - access R0:R3
	PUSHL	SF$L_SAVE_PC(FP)	; save return PC to MTH$$SIGNAL
	MOVL	R3, SF$L_SAVE_PC(FP)	; set return PC to be math routine
	BSBB	DO_SIGNAL		; signal using error code in R2
	MOVL	(SP)+, SF$L_SAVE_PC(FP)	; restore return PC to MTH$$SIGNAL
	RET				; return to caller (MTH$$SIGNAL)

	.SBTTL	DO_SIGNAL		; Local JSB routine to do signal

;++
; FUNCTIONAL DESCRIPTION:
;
;	Convert MTH$ error code to 32-bit VAX error code.
;	Set bits 31:16 to MTH$ facility code
;	Shift small error code left 3 places to make room for severity code
;	and then call LIB$SIGNAL with implicit input in R0/R1 (= math routine
;	result.  Then perform the following call to do signal:
;
;	CALL LIB$SIGNAL (cond_val, 1, user_PC)
;
; CALLING SEQUENCE:
;
;	JSB	DO_SIGNAL
;
; INPUT PARAMETERS:
;
;	error_code.rlu.v		small math error number
;
; IMPLICIT INPUTS:
;
;	R0/R1	Math routine function value to be copied to CHF$L_MCH_R0/R1
;	R2	User PC to be used in message
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;
;	Signal error
;--

DO_SIGNAL:				; Local JSB entry point
	PUSHL	R2			; setup last arg as user PC
	PUSHL	#1			; indicate that one FAO arg is following
					; so SYS$PUT_MESSAGE will know.
	ASHL	#16, #MTH$K_FAC_NO, -(SP)
					; MTH$ error prefix code to LH
	MOVB	#STS$K_SEVERE, (SP)	; set error severity to SEVERE
					; so image will EXIT unless user handles.
	INSV	ERROR_CODE(AP), #STS$V_CODE, -
		#STS$S_CODE, (SP)	; insert math code shifted left
	BISW	#STS$M_FAC_SP, (SP)	; Set subsystem specific message bit
					; 3 bits to make room for severity
	CALLS	#3, G^LIB$SIGNAL	; save R0/R1 in signal mechanism
					; vector (CHF$L_MCH_R0/R1)
					; return with R0/R1 = signal mechanism
					; vector CHF$L_MCH_R0/R1 which any
					; error handler may have modified
	RSB				; return

	.SBTTL	MTH$$JACKET_TST		; Routine to test for math jacket handler

	.ENTRY	MTH$$JACKET_TST,0
	CLRL	R0			; assume not jacket routine
					; setup as handler in previous fram
					; i.e., JSB to math routine
	MOVAL	MTH$$JACKET_HND, R1	; R1 = adr. of handler set up by
					; CALL MTH$xxx.
	CMPL	R1, @SF$L_SAVE_FP(FP)	; test previous frame handler
	BNEQ	10$			; branch if not jacket handler
	MOVL	#1, R0			; return TRUE
10$:	RET				; return


	.SBTTL	MTH$$SIGNAL_CON		; Error without signaling and continue

	.ENTRY	MTH$$SIGNAL_CON, 0
	MOVL	#SS$_CONTINUE, R0	; error condition and continue
	RET


	.END				; end of module
