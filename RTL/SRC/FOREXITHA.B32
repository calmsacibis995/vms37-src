MODULE FOR$$EXIT_HANDL (			! FORTRAN exit handler
		IDENT = '1-010'			! File: FOREXITHA.B32  Edit: SBL1010
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY: FORTRAN support library - Exit handler
!
! ABSTRACT:
!
!	This module is used when the image exits to do
!	FORTRAN post processing.  It purges I/O buffers
!	and closes files with proper disposition.
!
! ENVIRONMENT: User access mode; mixture of AST level or not.
!
! Author:	John Sauter, Creation date: 23-JAN-1979
!
! MODIFIED BY:
!
! 1-001	- Original from FOROPEN.  JBS 23-JAN-1979
! 1-002	- Call OTS$$PURGE_IOBU to flush any "dirty" buffer.  JBS 24-JAN-1979
! 1-003 - Move call to OTS$$PURGE_IOBU to OTS$CLOSE_FILE.  JBS 24-JAN-1979
! 1-004	- Change linkage for OTS$PUSH_CCB to JSB_CB_PUSH and for
!	   OTS$POP_CCB to JSB_CB_POP.  JBS 25-JAN-1979
! 1-005	- Use two dollar signs for non-user entries.  JBS 26-JAN-1979
! 1-006	- Add OTS$$CLOSE_ALL.  JBS 04-JUN-1979
! 1-007	- Change to FORTRAN-specific exit handler.  JBS 16-AUG-1979
! 1-008 - Clear FOR$$L_XIT_LOCK when EXIT_HANDLER is called.  This
!	  allows exit handler I/O to be cleaned up properly.  SBL 29-Apr-1980
! 1-009 - Request page alignment for the OWN PSECT when invoking
!	  DECLARE_PSECTS, to ensure that EXIT_BLOCK will not occupy the
!	  same page as a user variable that is being WATCHed, and thus
!	  be unwriteable when $DCLEXH is called.  JAW 19-FEB-1981
! 1-010 - Declare LIB$STOP external.  SBL 30-Nov-1981
!--

!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!

REQUIRE 'RTLIN:OTSLNK';				! Define all linkages

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    FOR$$DECL_EXITH : NOVALUE,			! Declare EXIT handler
    EXIT_HANDLER : NOVALUE,			! Exit Handler
    FOR$$CLOSE_ALL : NOVALUE,			! Close all files
    TRY_TO_CLOSE : CALL_CCB NOVALUE;		! Subroutine for EXIT_HANDLER

!
! INCLUDE FILES:
!

REQUIRE 'RTLML:OTSLUB';				! logical Unit Block definitions

REQUIRE 'RTLML:OTSISB';				! ISB definitions

REQUIRE 'RTLIN:OTSMAC';				! macros

REQUIRE 'RTLIN:RTLPSECT';			! Define DELCARE_PSECTS macro

LIBRARY 'RTLSTARLE';				! STARLET library for macros and symbols

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! PSECT DECLARATIONS:
!
!    Declare PSECTs for the FOR$ facility, specifying page alignment (9)
!    for the OWN PSECT, so that EXIT_BLOCK will not occupy the same page
!    as a user variable that is being WATCHed, and thus be unwriteable
!    when $DCLEXH is called.
!
DECLARE_PSECTS (FOR, 9);			! declare PSECTs for FOR$ facility
!
! OWN STORAGE:
!

OWN
    EXIT_REASON,				! VMS stuffs with reason for exiting
    EXIT_BLOCK : VECTOR [4] INITIAL (0,
					! Filled in by VMS with forward link to next EXIT control block
	0, 					! Set to EXIT_HANDLER if RTL sets up EXIT handler
	0, 					! Set to arg count (1) if RTL sets up EXIT handler
	0);					! Set to EXIT_REASON if RTL sets up EXIT handler

GLOBAL
    FOR$$L_XIT_LOCK : INITIAL (0);		! Clear if no handler linked yet

!
! (Used to make sure only one handler even if ASTs)
!
! EXTERNAL REFERENCES:
!

EXTERNAL LITERAL
    OTS$_FATINTERR;				! OTS Fatal Internal Error

EXTERNAL ROUTINE
    FOR$$CB_FETCH : NOVALUE,			! Load register CCB, no push
    FOR$$CB_PUSH : JSB_CB_PUSH NOVALUE,		! Load register CCB
    FOR$$CB_POP : JSB_CB_POP NOVALUE,		! Done with register CCB
    FOR$$NEXT_LUN : NOVALUE,			! Get next LUN that might be open
    OTS$$CLOSE_FILE : CALL_CCB,			! Internal file closer
    LIB$STOP: NOVALUE,				! Signal noncontinuable error
    LIB$SIG_TO_RET;				! convert signal to function value


GLOBAL ROUTINE FOR$$DECL_EXITH 			! Declare VMS EXIT handler
    : NOVALUE = 				!

!++
! FUNCTIONAL DESCRIPTION:
!
!	Declares VMS EXIT handler for FORTRAN.
!
! CALLING SEQUENCE:
!
!	IF (NOT .FOR$$L_XIT_LOCK) THEN FOR$$DECL_EXITH ()
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Declares VMS EXIT handler.
!--

    BEGIN

    LOCAL
	AST_STATUS,
	DCLEXH_STATUS;

!+
! We must disable ASTs to be sure that one and only one exit handler
! is declared for FORTRAN.
!-
    AST_STATUS = $SETAST (ENBFLG = 0);

    IF ( NOT .FOR$$L_XIT_LOCK)
    THEN
	BEGIN
!+
! Initialize EXIT handler control block (must do at run time to be PIC)
!-
	EXIT_BLOCK [1] = EXIT_HANDLER;		! Adr. of EXIT handler to be called on EXIT
	EXIT_BLOCK [2] = 1;			! arg count
	EXIT_BLOCK [3] = EXIT_REASON;		! adr. to store reason for EXIT
	DCLEXH_STATUS = $DCLEXH (DESBLK = EXIT_BLOCK);
	FOR$$L_XIT_LOCK = 1;
	END
    ELSE
	DCLEXH_STATUS = 1;

    IF (.AST_STATUS EQL SS$_WASSET) THEN $SETAST (ENBFLG = 1);

    IF ( NOT .DCLEXH_STATUS) THEN LIB$STOP (OTS$_FATINTERR);

    RETURN
    END;


ROUTINE EXIT_HANDLER (				! Exit Handler
	EXIT_REASON				! Reason
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This is the exit handler for FORTRAN.  Its only function is to
!	close all files.
!
!	Upon entering, it clears FOR$$L_XIT_LOCK.  This allows user
!	exit handlers to have their I/O cleaned up.
!
! FORMAL PARAMETERS:
!
!	EXIT_REASON.rl.r	not used
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	FOR$$L_XIT_LOCK is set to zero
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Closes all files by calling OTS$$CLOSE_ALL.
!--

    BEGIN
    FOR$$L_XIT_LOCK = 0;		! Clear exit handler interlock
    FOR$$CLOSE_ALL ();
    END;					! of routine EXIT_HANDLER

ROUTINE FOR$$CLOSE_ALL : NOVALUE = 		! Close all files

!++
! FUNCTIONAL DESCRIPTION:
!
!	Find every existing LUB (with a linear search through the LUB
!	table).  For each LUB, if the file is open, purge its I/O
!	buffers and close it.  If the file has been marked for PRINT
!	or DELETE, this will cause proper disposition of the file.
!	RMS will close all open files at image exit, but it doesn't know
!	about the above two DISPOSE conditions.  We couldn't set them at
!	OPEN time, since the user is allowed to specify a different
!	DISPOSE option at close time (with the CLOSE statement).
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Closes all files.
!--

    BEGIN

    GLOBAL REGISTER
	CCB = K_CCB_REG : REF BLOCK [, BYTE];

    LOCAL
	FLAG,
	LUN;

!+
! Scan through all FORTRAN logical units, closing them.
!-
    FLAG = 0;

    DO
	BEGIN
!+
! Get the next logical unit number.
!-
	FOR$$NEXT_LUN (FLAG, LUN);

	IF (.FLAG NEQ 0)
	THEN
	    BEGIN

	    LOCAL
		AST_STATUS;

!+
! LUN is the next logical unit number.  If the file it represents is
! open try to close it.  There may be I/O in progress on the file,
! in which case we cannot push it, and must close it with ASTs disabled.
!-
	    AST_STATUS = $SETAST (ENBFLG = 0);
	    FOR$$CB_FETCH (.LUN);

	    IF (.CCB NEQA 0)
	    THEN

		IF (.CCB [LUB$V_OPENED])
		THEN
		    BEGIN

		    IF (.CCB [LUB$V_IO_ACTIVE])
		    THEN
			BEGIN
!+
! There is active I/O on this LUN.  We cannot safely POP it, so we do
! the close "behind the back" of the current I/O.  We also mark the
! current I/O statement type so that any more element transmitters will
! cause an I/O error.  Note that ASTs are still disabled, so we need not
! worry about an AST trying to use this unit.
!-
			TRY_TO_CLOSE ();
			CCB [LUB$V_DEALLOC] = 0;
			CCB [ISB$B_STTM_TYPE] = ISB$K_FORSTTYLO - 1;
			CCB = 0;

			IF (.AST_STATUS EQL SS$_WASSET) THEN $SETAST (ENBFLG = 1);

			END
		    ELSE
			BEGIN
!+
! There is no I/O active on this LUN.  This means that we can PUSH and POP
! the LUB, which means that it will be deallocated when it is popped.
! We must leave ASTs disabled until the push is done so that the test above
! remains valid.
!-
			FOR$$CB_PUSH (.LUN, LUB$K_ILUN_MIN);

			IF (.AST_STATUS EQL SS$_WASSET) THEN $SETAST (ENBFLG = 1);

			TRY_TO_CLOSE ();
			FOR$$CB_POP ();
			END;

!+
! No error print yet.
!-
		    END;

	    END;

	END
    UNTIL (.FLAG EQL 0);

    RETURN;
    END;					! of routine FOR$$CLOSE_ALL

ROUTINE TRY_TO_CLOSE 				! Call OTS$$CLOSE_FILE and ignore errors
    : CALL_CCB NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Set up LIB$SIG_TO_RET to catch any signals from OTS$$CLOSE_FILE
!	and return the signal as routine value.  Since nobody looks at
!	the routine value, the signal vanishes!  CCB points to the control
!	block of the file to close.
!
!--

    BEGIN

    EXTERNAL REGISTER
	CCB : REF BLOCK [, BYTE];

    ENABLE
	LIB$SIG_TO_RET ();

    OTS$$CLOSE_FILE ();				! Then do an RMS Close of the file
    RETURN;
    END;
END						! End of OTS$$EXIT_HANDL module

ELUDOM
