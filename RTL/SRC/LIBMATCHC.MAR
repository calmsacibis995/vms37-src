	.TITLE	LIB$MATCHC - Match Character 
	.IDENT	/1-007/		; File: LIBMATCHC.MAR Edit: RKR1007

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY: General Utility Library
;
; ABSTRACT:
;
;	search a string for the first occurrence of a substring
;
; ENVIRONMENT: User Mode, AST Reentrant
;
;--
; AUTHOR: Donald G. Petersen, CREATION DATE: 03-Jan-78
;
; MODIFIED BY:
;
;	DGP, 03-Jan-78 : VERSION 00
; 01	- Original 
; 00-02	- DGP 06-Jan-78 - Change MATCHC operands
; 1-001	- Update version number and copyright notice.  JBS 16-NOV-78
; 1-002	- Add "_" to PSECT directive.  JBS 21-DEC-78
; 1-003 - Fix so it doesnt wipe out argument descriptors!. 
;	  Also clean up code.  SBL 02-Feb-79
; 1-004 - Enhance to recognize additional classes of string descriptors
;	  by invoking LIB$ANALYZE_SDESC_R3 to extract length and
;	  address of 1st byte of data.   RKR 22-MAY-1981
; 1-005 - Add special-case code to process string descriptors that 
;	  "read" like fixed strign descriptors.  RKR 7-OCT-1981.
; 1-006 - Redirect jsb's from LIB$ANALYZE_SDESC_R3 to
;	  LIB$ANALYZE_SDESC_R2.
;	  RKR 18-NOV-1981.
; 1-007 - Correct computation of matched position -- corrupted in edits
;	  4 through 6.  RKR 18-DEC-1981

	.SBTTL	DECLARATIONS
;
; INCLUDE FILES: NONE
;

; EXTERNAL SYMBOLS:
	.DSABL	GBL			; Explicit externals only
	.EXTRN	LIB$ANALYZE_SDESC_R2	; Extract length and address of
					; 1st data byte
;
; MACROS:
;
	$DSCDEF			; fields in a descriptor

;
; EQUATED SYMBOLS: NONE
;

;
; OWN STORAGE: NONE
;

;
; PSECT DECLARATIONS:
;
	.PSECT _LIB$CODE PIC, SHR, LONG, EXE, NOWRT


	.SBTTL	LIB$MATCHC  - match characters 
;++
; FUNCTIONAL DESCRIPTION:
;
;	The character string supplied is searched for the first 
;	incidence of the substring specified.  An index is returned 
;	which is the relative position of the first character of the 
;	substring within the string or zero if no occurrence of the 
;	substring was encountered.  If both strings have
;	zero length or if the substring has a zero length, then the 
;	routine returns as if the substring has been found at the 
;	first character position.  If the source string has a zero 
;	length and the substring a non-zero length, then a zero is 
;	returned.
;
; CALLING SEQUENCE:
;
;	index.wlu.v = LIB$MATCHC(sub_str.rt.dx,string.rt.dx)
;

; INPUT PARAMETERS:
;
	sub_string = 4				; Adr of substring desc
	src_string = 8				; Adr of src string desc
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; FUNCTION VALUE:
;
;	index.wlu.v - Position of substring in source, or zero
;		      if no match.
;
; SIDE EFFECTS:
;
;	NONE
;
;--

	.ENTRY LIB$MATCHC , ^M<R2, R3, R4, R5, R6> ; Entry point

	MOVL	SUB_STRING(AP), R0	; Address of sub_string descr.
	CMPB	DSC$B_CLASS(R0), #DSC$K_CLASS_D	; read like fixed ?
	BGTRU	1$			; no
	MOVQ	@SUB_STRING(AP), R4	; lenght->R4, address->R5
	BRB	2$			; join common flow

1$:	JSB	G^LIB$ANALYZE_SDESC_R2	; Extract: length->R1, addr->R2
	MOVZWL	R1, R4			; save sub_string length
	MOVL	R2, R5			; save sub_string address

2$:	MOVL	SRC_STRING(AP), R0	; Address of src_string descr.
	CMPB	DSC$B_CLASS(R0), #DSC$K_CLASS_D	; read like fixed ?
	BGTRU	3$			; no
	MOVQ	@SRC_STRING(AP), R1	; length->R1, address->R2
	BRB	4$			; join commmon flow

3$:	JSB	G^LIB$ANALYZE_SDESC_R2	; Extract: length->R1, addr->R2
4$:	MOVZWL	R1, R6			; save src_string length

	MATCHC	R4, (R5), R1, (R2)	; find sub_string in src_string
				; State of regs after a MATCHC instr.
				; R0 = If match occurred, 0,
				;      else number of bytes in object
				;      string.
				; R1 = If match occurred, the address of
				;      one byte beyond the object
				;      string,
				;      else address of the object string
				; R2 = If match occurred, the number of
				;      bytes remaining at the source
				;      string after the match,
				;      else 0
				; R3 = If match occurred, the address of
				;      one byte beyond the last byte
				;      matched,
				;      else address of one byte beyond
				;      the source string.
				;

	BNEQ	NOMATCH		; No match?
	SUBW3	R4, R6, R0	; R0 = diff. in string lengths.
				; Has to be non-neg else no match.
	MOVZWL	R0, R0	
	SUBL	R2, R0		; Subtract bytes left in source string 
				; giving offset into source.
	INCL	R0		; one origin
	RET

NOMATCH:
	CLRL	R0		; Indicate no match
	RET
	.END
