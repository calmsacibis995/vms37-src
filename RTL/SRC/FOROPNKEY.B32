MODULE FOR$$OPEN_KEYWD (	!
		IDENT = '1-002'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY: FORTRAN Support Library - Not user callable
!
! ABSTRACT:
!
!	This module implements OPEN/CLOSE keyword values passed
!	by string descriptor rather than by literal value.  It
!	scans its table for matching keywords and returns the
!	equivalent literal value.
!
! ENVIRONMENT: User access mode, AST reentrant
!
! AUTHOR: Steven B. Lionel, CREATION DATE: 18-April-1979
!
! MODIFIED BY:
!
!	Steven B. Lionel, 18-April-1979 : Version 1
! 1-001 - Original
! 1-002 - Male tables PIC.  SBL 1-May-1979
!--

!
! SWITCHES
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
	FOR$$OPEN_KEYWD		! Searches keyword table
	;		!

!
! INCLUDE FILES:
!

LIBRARY 'RTLSTARLE';
REQUIRE 'RTLIN:FOROPN';
REQUIRE 'RTLIN:RTLPSECT';

!
! MACROS:
!

    MACRO
	KWD (A,X) = WORD (%CHARCOUNT (X)), (UPLIT BYTE (X) - A)%,
	KWD$W_KEY = 0,0,16,0%,
	KWD$W_COUNT = 0,16,16,0%,
	KWD$A_KEYWD = 4,0,32,0%;

!
! EQUATED SYMBOLS:
!

!
! OWN STORAGE:
!

DISPATCH_PSECTS (FOR);

OWN
    KEYWD$ACCESS: VECTOR [9] INITIAL (
	WORD (OPEN$K_ACC_DIR), KWD (KEYWD$ACCESS, 'DIRECT'),
	WORD (OPEN$K_ACC_SEQ), KWD (KEYWD$ACCESS, 'SEQUENTIAL'),
	WORD (OPEN$K_ACC_APP), KWD (KEYWD$ACCESS, 'APPEND'),
	WORD (OPEN$K_ACC_KEY), KWD (KEYWD$ACCESS, 'KEYED'),
	0),

    KEYWD$BLANK: VECTOR [5] INITIAL (
	WORD (OPEN$K_BLK_ZER), KWD (KEYWD$BLANK, 'ZERO'),
	WORD (OPEN$K_BLK_NUL), KWD (KEYWD$BLANK, 'NULL'),
	0),

    KEYWD$CARRIAGE: VECTOR [7] INITIAL (
	WORD (OPEN$K_CAR_FOR), KWD (KEYWD$CARRIAGE, 'FORTRAN'),
	WORD (OPEN$K_CAR_LIS), KWD (KEYWD$CARRIAGE, 'LIST'),
	WORD (OPEN$K_CAR_NON), KWD (KEYWD$CARRIAGE, 'NONE'),
	0),

    KEYWD$DISPOSE: VECTOR [15] INITIAL (
	WORD (OPEN$K_DIS_SAV), KWD (KEYWD$DISPOSE, 'SAVE'),
	WORD (OPEN$K_DIS_SAV), KWD (KEYWD$DISPOSE, 'KEEP'),	! synonym
	WORD (OPEN$K_DIS_DEL), KWD (KEYWD$DISPOSE, 'DELETE'),
	WORD (OPEN$K_DIS_PRI), KWD (KEYWD$DISPOSE, 'PRINT'),
	WORD (OPEN$K_DIS_SUB), KWD (KEYWD$DISPOSE, 'SUBMIT'),
	WORD (OPEN$K_DIS_PRDE), KWD (KEYWD$DISPOSE, 'PRINT/DELETE'),
	WORD (OPEN$K_DIS_SUDE), KWD (KEYWD$DISPOSE, 'SUBMIT/DELETE'),
	0),

    KEYWD$FORM: VECTOR [5] INITIAL (
	WORD (OPEN$K_FOR_FOR), KWD (KEYWD$FORM, 'FORMATTED'),
	WORD (OPEN$K_FOR_UNF), KWD (KEYWD$FORM, 'UNFORMATTED'),
	0),

    KEYWD$ORGANIZ: VECTOR [7] INITIAL (
	WORD (OPEN$K_ORG_SEQ), KWD (KEYWD$ORGANIZ, 'SEQUENTIAL'),
	WORD (OPEN$K_ORG_REL), KWD (KEYWD$ORGANIZ, 'RELATIVE'),
	WORD (OPEN$K_ORG_IDX), KWD (KEYWD$ORGANIZ, 'INDEXED'),
	0),

    KEYWD$RECORDTY: VECTOR [7] INITIAL (
	WORD (OPEN$K_REC_FIX), KWD (KEYWD$RECORDTY, 'FIXED'),
	WORD (OPEN$K_REC_VAR), KWD (KEYWD$RECORDTY, 'VARIABLE'),
	WORD (OPEN$K_REC_SEGM), KWD (KEYWD$RECORDTY, 'SEGMENTED'),
	0),

    KEYWD$TYPE: VECTOR [9] INITIAL (
	WORD (OPEN$K_TYP_OLD), KWD (KEYWD$TYPE, 'OLD'),
	WORD (OPEN$K_TYP_NEW), KWD (KEYWD$TYPE, 'NEW'),
	WORD (OPEN$K_TYP_SCR), KWD (KEYWD$TYPE, 'SCRATCH'),
	WORD (OPEN$K_TYP_UNK), KWD (KEYWD$TYPE, 'UNKNOWN'),
	0),

    KEY_TABLE: VECTOR [OPEN$K_KEY_MAX + 1] INITIAL (
	0,					! 0 = not used
	0,					! 1 = UNIT
	(KEYWD$DISPOSE - KEY_TABLE),		! 2 = DISPOSE
	0,					! 3 = ERR
	(KEYWD$ACCESS - KEY_TABLE),		! 4 = ACCESS
	(KEYWD$FORM - KEY_TABLE),		! 5 = FORM
	0,					! 6 = RECORDSIZE
	(KEYWD$CARRIAGE - KEY_TABLE),		! 7 = CARRIAGECONTROL
	0,					! 8 = READONLY
	0,					! 9 = BUFFERCOUNT
	0,					! 10 = INITIALSIZE
	0,					! 11 = EXTENDSIZE
	0,					! 12 = NOSPANBLOCKS
	0,					! 13 = SHARED
	0,					! 14 = NAME
	(KEYWD$TYPE - KEY_TABLE),		! 15 = TYPE
	0,					! 16 = MAXREC
	0,					! 17 = ASSOCIATEVARIABLE
	0,					! 18 = BLOCKSIZE
	(KEYWD$ORGANIZ - KEY_TABLE),		! 19 = ORGANIZATION
	(KEYWD$RECORDTY - KEY_TABLE),		! 20 = RECORDTYPE
	0,					! 21 = USEROPEN
	0,					! 22 = IOSTAT
	0,					! 23 = KEY
	(KEYWD$BLANK - KEY_TABLE) );		! 24 = BLANK

DECLARE_PSECTS (FOR);

!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    FOR$$GET_VM	,			! Allocate virtual memory
    FOR$$FREE_VM;			! Free virtual memory


GLOBAL ROUTINE FOR$$OPEN_KEYWD (
	KEYWORD,
	KEYSTRING) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	FOR$$OPEN_KEYWD is called from FOR$$OPECLO_ARG inside
!	FOR$OPEN.  It is called when an OPEN or CLOSE keyword, which
!	normally has a literal value computed by the compiler, is
!	given as a run-time character string.
!
!	This routine looks up the given string and returns the
!	equivalent small integer literal value.  It automatically
!	forces upper case, and the comparison ignores trailing blanks.
!	Like in the FORTRAN compiler, leading and embedded blanks are
!	not allowed, and the strings must match exactly, i.e. no
!	abbreviations.
!
! CALLING SEQUENCE:
!
!	value.wl.v = FOR$$OPEN_KEYWD (keyword.rl.v, keystring.rx.dx)
!
!
! FORMAL PARAMETERS:
!
!	keyword		- The OPEN key number for the desired keyword.
!
!	keystring	- The address of a string descriptor containing
!			  the string to be looked up.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	-1 if "keyword" has no valid literal values.
!	 0 if "keystring" is not valid for keyword "keyword".
!	 The correct literal value otherwise.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	KEYSTRING: REF BLOCK [,BYTE];

    LOCAL
	KEY_TAB: REF BLOCK [,BYTE],	! Current table block address
	TAB_ADDR,			! Base address of keyword table entry
	STRING_ADDR,			! Address of allocated string
	STRING_SIZE;			! Size of allocated string

    !+
    !  Copy KEYSTRING to a local string, forcing upper case.
    !-

    STRING_SIZE = .KEYSTRING [DSC$W_LENGTH];
    STRING_ADDR = FOR$$GET_VM (.STRING_SIZE);

	BEGIN
	LOCAL
	    SOURCE,	! Source string address
	    DEST;	! Destination string address
	SOURCE = .KEYSTRING [DSC$A_POINTER];
	DEST = .STRING_ADDR;

	INCR I FROM 1 TO .STRING_SIZE DO
	    BEGIN
	    LOCAL
		C;	! Character read
	    C = CH$RCHAR_A (SOURCE);
	    IF (.C GEQU %C'a' AND .C LEQU %C'z')
	    THEN
		CH$WCHAR_A (.C - (%C'a' - %C'A'), DEST)
	    ELSE
		CH$WCHAR_A (.C, DEST);
	    END;
	END;

    !+
    !  See if KEYWORD has an entry in the table.  If not, there
    !  are no literal values allowed for this keyword.
    !-

    KEY_TAB = .KEY_TABLE [.KEYWORD];
    IF .KEY_TAB EQL 0
    THEN
	BEGIN
	FOR$$FREE_VM (.STRING_SIZE, .STRING_ADDR);
	RETURN (-1);	! Indicates invalid argument to routine
	END;

    !+
    !  Now get the true address of the keyword table entry
    !-

    KEY_TAB = KEY_TABLE + .KEY_TAB;
    TAB_ADDR = .KEY_TAB;		! Save base address for relative addressing

    !+
    !  Scan the keyword table to see if the key string matches a 
    !  valid keyword.
    !-

    WHILE .KEY_TAB [KWD$W_KEY] NEQ 0 DO
	BEGIN
	IF CH$EQL (.STRING_SIZE, .STRING_ADDR, .KEY_TAB [KWD$W_COUNT],
		   .TAB_ADDR + .KEY_TAB [KWD$A_KEYWD], %C' ')
	THEN
	    BEGIN
	    FOR$$FREE_VM (.STRING_SIZE, .STRING_ADDR);
	    RETURN (.KEY_TAB [KWD$W_KEY]);
	    END;
	KEY_TAB = .KEY_TAB + 8;		! Go to next keyword
	END;

    !+
    !  If we got here, then we must not have found a matching key.
    !-

    FOR$$FREE_VM (.STRING_SIZE, .STRING_ADDR);
    RETURN (0);	! Indicated keyword value error

    END;

END				!End of module
ELUDOM
