MODULE BAS$DATE_TIME (				! Date and Time functions
		IDENT = '1-013'			! File: BASDATETI.B32 EDIT:PL1013
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  BASIC-PLUS-2 Miscellaneous Support
!
! ABSTRACT:
!
!	This module contains the DATE and TIME functions as defined
!	in the BASIC-PLUS-2 language manual.
!
! ENVIRONMENT:  VAX-11 User Mode
!
! AUTHOR: John Sauter, CREATION DATE: 19-FEB-1979
!
! MODIFIED BY:
!
! 1-001	- Original.  JBS 19-FEB-1979
! 1-002	- Correct the computation of DATE$ to give a positive absolute
!	   time for the last call to $ASCTIM.  JBS 23-FEB-1979
! 1-003	- Correct bad offsets for the current time field in the string
!	   returned by LIB$DATE_TIME.  This will have to be tested at
!	   several hours of the day to verify that the offsets are
!	   fixed.  JBS 07-MAR-1979
! 1-004	- Return the second and third letters of the month in lower
!	   case.  JBS 07-MAR-1979
! 1-005	- Change the string entry point names to end with _T rather than
!	   _DX.  JBS 19-MAR-1979
! 1-006	- Change LIB$S and OTS$S to STR$.  JBS 21-MAY-1979
! 1-007	- Change calls to STR$COPY.  JBS 16-JUL-1979
! 1-008	- Correct a comment.  JBS 07-NOV-1979
! 1-009 - Add bounds checking for TIME$.  PLL 11-MAY-1981
! 1-010 - DATE$ should return 00-XXX-00 when passed an invalid 
!	  argument.  PL 05-JUN-81
! 1-011 - LIB$STOP should be declared EXTERNAL.  PLL 20-Nov-81
! 1-012 - Use LIB$GET_EF to obtain an event flag for $GETJPI.  If none is
!	  specified, efn zero is used, and this may interfere with other
!	  procedures.  PLL 30-Nov-81
! 1-013 - Finish last edit.  PLL 1-Dec-81
!--

!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!
!	NONE
!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    BAS$DATE_T : NOVALUE,			! Perform a DATE$ function
    BAS$TIME_T : NOVALUE,			! Perform a TIME$ function
    BAS$TIME_F;					! Perform a TIME function

!
! INCLUDE FILES:
!

REQUIRE 'RTLIN:RTLPSECT';			! Macros for defining psects

LIBRARY 'RTLSTARLE';				! Define system symbols

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! PSECTS:
!
DECLARE_PSECTS (BAS);				! Declare psects for BAS$ facility
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    LIB$GET_EF,					! allocate an event flag
    LIB$FREE_EF,				! deallocate an event flag
    LIB$STOP : NOVALUE,				! signal fatal error
    LIB$DATE_TIME : NOVALUE,			! Compute the present date and time
    LIB$SUBX,					! Subtract 64-bit integers
    STR$COPY_R,					! Copy a string by reference
    BAS$$STOP : NOVALUE,			! signals fatal error
    BAS$$SIGNAL : NOVALUE;			! signals an error

!+
! The following are the error codes used in this module.
!-

EXTERNAL LITERAL
    BAS$K_ARGOUTBOU : UNSIGNED (8),		! Argument Out of Bounds
    BAS$K_NOTIMP : UNSIGNED (8),		! Not implemented
    OTS$_FATINTERR;				! OTS Fatal Internal Error


GLOBAL ROUTINE BAS$DATE_T (			! Perform a DATE$ function
	DATE_STR, 				! Resulting string
	DAYNO					! The day number, as defined below
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Perform a DATE$ function, as follows:
!
!	DATE$(0%) returns the current date in the form dd-Mmm-yy
!	DATE$(n%) returns the date corresponding to day number
!		n, where n is the day of the year (1 to 365 or 366)
!		plus the number of years since 00-Jan-1970 * 1000.
!
! FORMAL PARAMETERS:
!
!	DATE_STR.wt.d	The result string
!	DAYNO.rl.v	The day number, or zero.
!
! IMPLICIT INPUTS:
!
!	The system date and time, if DAYNO = 0.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN
!+
! If the day number is zero, get the system day and time, and reformat
! it to conform to BASIC-PLUS-2's standard.
!-

    IF (.DAYNO EQL 0)
    THEN
	BEGIN

	LOCAL
	    DATE_DESC : BLOCK [8, BYTE],
	    DATE_BUF : VECTOR [24, BYTE];

!+
! Build the descriptor for the date string which will contain today's date.
!-
	DATE_DESC [DSC$W_LENGTH] = 24;
	DATE_DESC [DSC$B_DTYPE] = DSC$K_DTYPE_T;
	DATE_DESC [DSC$B_CLASS] = DSC$K_CLASS_S;
	DATE_DESC [DSC$A_POINTER] = DATE_BUF;
	LIB$DATE_TIME (DATE_DESC);
!+
! Suppress the century by putting the year on top of it.
!-
	DATE_BUF [7] = .DATE_BUF [9];
	DATE_BUF [8] = .DATE_BUF [10];
!+
! Make sure the leading character of the day is a zero rather rhan a blank.
!-

	IF (.DATE_BUF [0] EQL %C' ') THEN DATE_BUF [0] = %C'0';

!+
! Make sure that the second and third characters of the month name are
! in lower case.
!-
	DATE_BUF [4] = .DATE_BUF [4] OR 32;
	DATE_BUF [5] = .DATE_BUF [5] OR 32;
!+
! Return the string to the user.  We return only the first nine characters.
!-
	STR$COPY_R (.DATE_STR, %REF (9), DATE_BUF [0]);
	RETURN;
	END;

!+
! The day number is not zero.  Compute a date based on it.  The year is
! the day number modulo 1000, the day of the year is the day number
! divided by 1000.  To avoid having tables of the number of days in each
! month, and to avoid worrying about leap year (is the year 2100 a leap
! year?) we use the system time services.
!-
    BEGIN

    LOCAL
	DATE_BUF : VECTOR [24, BYTE],
	DAY_BUF : VECTOR [4, BYTE],
	DATE_DESC : BLOCK [8, BYTE],
	DAY_DESC : BLOCK [8, BYTE],
	YEAR,
	DAY,
	Q_BASE_DATE : VECTOR [2],
	Q_DELTA_DAYS : VECTOR [2],
	Q_FINAL_DATE : VECTOR [2];

!+
! Set up a dummy date string in case the DATE$ argument is invalid.
!-
	DATE_BUF [0] = %C'0';
	DATE_BUF [1] = %C'0';
	DATE_BUF [2] = %C'-';
	DATE_BUF [3] = %C'X';
	DATE_BUF [4] = %C'X';
	DATE_BUF [5] = %C'X';
	DATE_BUF [6] = %C'-';
	DATE_BUF [7] = %C'0';
	DATE_BUF [8] = %C'0';
!+
! If the argument is a negative number or the day is greater than 366, it's
! definitely invalid.  Return 00-XXX-00.  If the day number is 366,
! then make sure that year was a leap year.
!-

     DAY = (.DAYNO) MOD 1000;
     YEAR = 1970 + (.DAYNO/1000);
     IF (.DAYNO LSS 0) OR (.DAY GTR 366)
     THEN
	 BEGIN
	 STR$COPY_R (.DATE_STR, %REF(9), DATE_BUF [0]);
	 RETURN;
	 END;
    IF (.DAY EQL 366)
    THEN
        BEGIN
	IF ((.YEAR MOD 4) NEQ 0)
	THEN
	    BEGIN
	    STR$COPY_R (.DATE_STR, %REF (9), DATE_BUF [0]);
	    RETURN;
	    END;
	END;

!+
! Compute the binary time corresponding to the base date, which is
! 00-JAN-1970 plus the day number modulo 1000.
!-
    DATE_BUF [0] = %C'0';
    DATE_BUF [1] = %C'1';
    DATE_BUF [2] = %C'-';
    DATE_BUF [3] = %C'J';
    DATE_BUF [4] = %C'A';
    DATE_BUF [5] = %C'N';
    DATE_BUF [6] = %C'-';
    DATE_BUF [7] = ((.YEAR/1000) + %C'0');
    DATE_BUF [8] = (((.YEAR/100) MOD 10) + %C'0');
    DATE_BUF [9] = (((.YEAR/10) MOD 10) + %C'0');
    DATE_BUF [10] = ((.YEAR MOD 10) + %C'0');
    DATE_BUF [11] = %C' ';
    DATE_BUF [12] = %C'0';
    DATE_BUF [13] = %C'0';
    DATE_BUF [14] = %C':';
    DATE_BUF [15] = %C'0';
    DATE_BUF [16] = %C'0';
    DATE_BUF [17] = %C':';
    DATE_BUF [18] = %C'0';
    DATE_BUF [19] = %C'0';
    DATE_BUF [20] = %C'.';
    DATE_BUF [21] = %C'0';
    DATE_BUF [22] = %C'0';
    DATE_BUF [23] = %C' ';
!+
! Convert that to absolute system time format, which is a 64-bit integer.
!-
    DATE_DESC [DSC$W_LENGTH] = 24;
    DATE_DESC [DSC$B_DTYPE] = DSC$K_DTYPE_T;
    DATE_DESC [DSC$B_CLASS] = DSC$K_CLASS_S;
    DATE_DESC [DSC$A_POINTER] = DATE_BUF [0];
    $BINTIM (TIMBUF = DATE_DESC, TIMADR = Q_BASE_DATE);
!+
!+
! Now convert the specified number of days into a system-format
! delta time.
!-
    DAY_BUF [0] = %C'0';
    DAY_BUF [1] = (((.DAYNO - 1)/100) MOD 10) + %C'0';
    DAY_BUF [2] = (((.DAYNO - 1)/10) MOD 10) + %C'0';
    DAY_BUF [3] = ((.DAYNO - 1) MOD 10) + %C'0';
    DAY_DESC [DSC$W_LENGTH] = 4;
    DAY_DESC [DSC$B_DTYPE] = DSC$K_DTYPE_T;
    DAY_DESC [DSC$B_CLASS] = DSC$K_CLASS_S;
    DAY_DESC [DSC$A_POINTER] = DAY_BUF [0];
    $BINTIM (TIMBUF = DAY_DESC, TIMADR = Q_DELTA_DAYS);
!+
! Add the delta time to the base time.  This must be done with a subtract
! since the delta time is kept in negative format.  Also, it must be done
! with quadword arithmetic.
!-
    LIB$SUBX (Q_BASE_DATE, Q_DELTA_DAYS, Q_FINAL_DATE, %REF (2));
!+
! Now reconvert the system date to a readable date.
!-
    $ASCTIM (TIMBUF = DATE_DESC, TIMADR = Q_FINAL_DATE);
!+
! Proceed as above to suppress the century and return the nine-character
! string dd-Mmm-yy
!-
    DATE_BUF [7] = .DATE_BUF [9];
    DATE_BUF [8] = .DATE_BUF [10];

    IF (.DATE_BUF [0] EQL %C' ') THEN DATE_BUF [0] = %C'0';

    DATE_BUF [4] = .DATE_BUF [4] OR 32;
    DATE_BUF [5] = .DATE_BUF [5] OR 32;
    STR$COPY_R (.DATE_STR, %REF (9), DATE_BUF [0]);
    RETURN;
    END;
    END;					! end of BAS$DATE_T


GLOBAL ROUTINE BAS$TIME_T (			! Perform a TIME$ function
	TIME_STR, 				! Resulting string
	TIMENO					! The time number, as defined below
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Perform a TIME$ function, as follows:
!
!	TIME$(0%) returns the current time of day in the form hh:mm
!	TIME$(n%) returns the time corresponding to time number
!		n, where n is the number of minutes before midnight.
!
! FORMAL PARAMETERS:
!
!	TIME_STR.wt.d	The result string
!	TIMENO.rl.v	The time number, or zero.
!
! IMPLICIT INPUTS:
!
!	The system date and time, if TIMENO = 0.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN
!+
! If the time number is zero, get the system day and time, and reformat
! it to conform to BASIC-PLUS-2's standard.
!-

    IF (.TIMENO EQL 0)
    THEN
	BEGIN

	LOCAL
	    TIME_DESC : BLOCK [8, BYTE],
	    TIME_BUF : VECTOR [24, BYTE],
	    HOURS;

!+
! Build the descriptor for the string which will contain today's date and time.
!-
	TIME_DESC [DSC$W_LENGTH] = 24;
	TIME_DESC [DSC$B_DTYPE] = DSC$K_DTYPE_T;
	TIME_DESC [DSC$B_CLASS] = DSC$K_CLASS_S;
	TIME_DESC [DSC$A_POINTER] = TIME_BUF;
	LIB$DATE_TIME (TIME_DESC);
!+
! Convert from 24-hour time to AM/PM.  We do this by appending " AM" to the
! time part of the string and then correcting it if the hours are between
! 12 and 23.  There is also a special test for 0 hours.
!-
	TIME_BUF [17] = %C' ';
	TIME_BUF [18] = %C'A';
	TIME_BUF [19] = %C'M';
	HOURS = ((.TIME_BUF [12] - %C'0')*10) + (.TIME_BUF [13] - %C'0');

	SELECTONE .HOURS OF
	    SET

	    [0] :
		BEGIN				! It is AM, but we must change zero hours to 12.
		TIME_BUF [12] = %C'1';
		TIME_BUF [13] = %C'2';
		END;

	    [1 TO 11] :
		BEGIN				! It is AM, nothing special to do here.
		0
		END;

	    [12] :
		BEGIN				! It is PM, but the hour must not be corrected.
		TIME_BUF [18] = %C'P';
		END;

	    [13 TO 23] :
		BEGIN				! It is PM, and the hour must be corrected.
		HOURS = .HOURS - 12;
		TIME_BUF [12] = (.HOURS/10) + %C'0';
		TIME_BUF [13] = (.HOURS MOD 10) + %C'0';
		TIME_BUF [18] = %C'P'
		END;

	    [OTHERWISE] :
		BEGIN				! The time is quite unreasonable.  Give a fatal error.
		LIB$STOP (OTS$_FATINTERR);
		END;
	    TES;

!+
! Return the string to the user.  We return only the twelfth through
! nineteenth characters, which comprise hh:mm XM.
!-
	STR$COPY_R (.TIME_STR, %REF (8), TIME_BUF [12]);
	RETURN;
	END;

!+
! Come here if the time argument is not zero.  We must compute the
! time corresponding to TIMENO minutes before midnight.
!-
    BEGIN

    LOCAL
	HOURS,
	MINUTES,
	TIME_BUF : VECTOR [8, BYTE],
	AMPM;
!+
! Allow arguments in the range of 0 to 1440 (24 hrs
! before midnight) only.
!-

    SELECTONE (.TIMENO) OF 
	SET

	[0 TO 1440] :
	;

	[OTHERWISE] :
	    BAS$$STOP (BAS$K_ARGOUTBOU) ;
	TES;

    MINUTES = (24*60) - .TIMENO;
    HOURS = .MINUTES/60;
    MINUTES = .MINUTES - (.HOURS*60);
    AMPM = %C'A';

    SELECTONE (.HOURS) OF
	SET

	[0] :
	    HOURS = 12;

	[1 TO 11] :
	;

	[12] :
	    AMPM = %C'P';

	[13 TO 23] :
	    BEGIN
	    HOURS = .HOURS - 12;
	    AMPM = %C'P';
	    END;

	[OTHERWISE] :
	    LIB$STOP (OTS$_FATINTERR);
	TES;

!+
! Now store the time in the time buffer.
!-
    TIME_BUF [0] = ((.HOURS/10) + %C'0');
    TIME_BUF [1] = ((.HOURS MOD 10) + %C'0');
    TIME_BUF [2] = %C':';
    TIME_BUF [3] = ((.MINUTES/10) + %C'0');
    TIME_BUF [4] = ((.MINUTES MOD 10) + %C'0');
    TIME_BUF [5] = %C' ';
    TIME_BUF [6] = .AMPM;
    TIME_BUF [7] = %C'M';
!+
! Convey the buffer to the user's string.
!-
    STR$COPY_R (.TIME_STR, %REF (8), TIME_BUF [0]);
    RETURN;
    END;
    END;					! end of BAS$TIME_T


GLOBAL ROUTINE BAS$TIME_F (			! Perform a TIME function
	TYPE					! The type of time requested
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Perform a TIME function, as follows:
!
!	TIME(0%) returns the current time of day
!		in seconds since midnight
!	TIME(1%) returns the CPU time used by the current job in
!		tenths of a second (100-millisecond units)
!	TIME(2%) returns the connect time for the current job in minutes
!	TIME(3%) and TIME(4%) are not implemented on VAX/VMS.
!
!	Any other value of the argument is undefined.
!
! FORMAL PARAMETERS:
!
!	TYPE.rl.v	The type of time requested, see above.
!
! IMPLICIT INPUTS:
!
!	The system date and time, and other system timing statistics
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	The requested type of time, as a floating point number.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    BUILTIN
	CVTLF;

!+
! Compute the requested time value, based on the input argument.
!-

    CASE (.TYPE) FROM 0 TO 4 OF
	SET

	[0] :
	    BEGIN

	    LOCAL
		TIME_DESC : BLOCK [8, BYTE],
		TIME_BUF : VECTOR [24, BYTE],
		HOURS,
		MINUTES,
		SECONDS,
		RESULT;

!+
! Set up the buffer descriptor
!-
	    TIME_DESC [DSC$W_LENGTH] = 24;
	    TIME_DESC [DSC$B_DTYPE] = DSC$K_DTYPE_T;
	    TIME_DESC [DSC$B_CLASS] = DSC$K_CLASS_S;
	    TIME_DESC [DSC$A_POINTER] = TIME_BUF;
!+
! Extract the current time from the system.
!-
	    LIB$DATE_TIME (TIME_DESC);
!+
! Extract from the 24-character string the number of seconds since midnight.
!-
	    HOURS = ((.TIME_BUF [12] - %C'0')*10) + (.TIME_BUF [13] - %C'0');
	    MINUTES = ((.TIME_BUF [15] - %C'0')*10) + (.TIME_BUF [16] - %C'0');
	    SECONDS = ((.TIME_BUF [18] - %C'0')*10) + (.TIME_BUF [19] - %C'0');
!+
! Return the number of seconds since midnight, as a floating point number.
!-
	    CVTLF (%REF (.SECONDS + (.MINUTES*60) + (.HOURS*60*60)), RESULT);
	    RETURN (.RESULT);
	    END;

	[1] :
	    BEGIN

	    LOCAL
		GETJPI_LIST : BLOCK [16, BYTE],
		L_CPU_TIME,
		RESULT;

!+
! Fill in the GETJPI list.
!-
	    GETJPI_LIST [0, 0, 16, 0] = 4;	! Buffer length
	    GETJPI_LIST [2, 0, 16, 0] = JPI$_CPUTIM;	! Get CPU time
	    GETJPI_LIST [4, 0, %BPVAL, 0] = L_CPU_TIME;
	    GETJPI_LIST [8, 0, %BPVAL, 0] = 0;	! Don't return length
	    GETJPI_LIST [12, 0, %BPVAL, 0] = 0;	! That's all
!+
! Get the information from the system.
!-
	    BEGIN
	    LOCAL
		EVENT_FLAG,
		STATUS;

	    STATUS = LIB$GET_EF (EVENT_FLAG);
	    IF (NOT .STATUS) THEN LIB$STOP (.STATUS);

	    STATUS = $GETJPI (EFN = .EVENT_FLAG, ITMLST = GETJPI_LIST);
	    IF (NOT .STATUS) THEN LIB$STOP (.STATUS);

	    STATUS = LIB$FREE_EF (EVENT_FLAG);
	    IF (NOT .STATUS) THEN LIB$STOP (.STATUS);
	
	    END;
!+
! Convert the 10-millisecond units into 100-millisecond units.
!-
	    CVTLF (%REF (.L_CPU_TIME/10), RESULT);
!+
! Return the CPU time in 100-millisecond units as a floating point number
!-
	    RETURN (.RESULT);
	    END;

	[2] :
	    BEGIN

	    LOCAL
		GETJPI_LIST : BLOCK [16, BYTE],
		Q_CONN_TIME : VECTOR [2],
		Q_LOGIN_TIME : VECTOR [2],
		Q_NOW : VECTOR [2],
		RESULT,
		TIME_DESC : BLOCK [8, BYTE],
		TIME_BUF : VECTOR [17, BYTE],
		DAYS,
		HOURS,
		MINUTES,
		STATUS,
		EVENT_FLAG;

!+
! Fill in the GETJPI list.
!-
	    GETJPI_LIST [0, 0, 16, 0] = 8;	! Buffer length
	    GETJPI_LIST [2, 0, 16, 0] = JPI$_LOGINTIM;	! Login time
	    GETJPI_LIST [4, 0, %BPVAL, 0] = Q_LOGIN_TIME;
	    GETJPI_LIST [8, 0, %BPVAL, 0] = 0;	! Don't return length
	    GETJPI_LIST [12, 0, %BPVAL, 0] = 0;	! That's all

!+
! Allocate an event flag.
!-
	    STATUS = LIB$GET_EF (EVENT_FLAG);
	    IF (NOT .STATUS) THEN LIB$STOP (.STATUS);
!+
! Get the information from the system.
!-
	    STATUS = $GETJPI (EFN = .EVENT_FLAG, ITMLST = GETJPI_LIST);
	    IF (NOT .STATUS) THEN LIB$STOP (.STATUS);

!+
! Deallocate the event flag.
!-
	    STATUS = LIB$FREE_EF (EVENT_FLAG);
	    IF (NOT .STATUS) THEN LIB$STOP (.STATUS);

!+
! Now get the current time from the system.
!-
	    $GETTIM (TIMADR = Q_NOW);
!+
! Subtract the two to get the execution time.  This must be done
! using quadword arithmetic.
!-
	    LIB$SUBX (Q_LOGIN_TIME, Q_NOW, Q_CONN_TIME, %REF (2));
!+
! Use the $ASCTIM system service to convert the 64-bit connect time
! to a number of days, hours, minutes and seconds.
!-
	    TIME_DESC [DSC$W_LENGTH] = 17;
	    TIME_DESC [DSC$B_DTYPE] = DSC$K_DTYPE_T;
	    TIME_DESC [DSC$B_CLASS] = DSC$K_CLASS_S;
	    TIME_DESC [DSC$A_POINTER] = TIME_BUF;
	    $ASCTIM (TIMBUF = TIME_DESC, TIMADR = Q_CONN_TIME);
!+
! Turn leading blanks in the number of days into zeros.
!-

	    INCR COUNTER FROM 0 TO 3 DO

		IF (.TIME_BUF [.COUNTER] EQL %C' ') THEN TIME_BUF [.COUNTER] = %C'0';

!+
! Convert the string into a number of minutes.
!-
	    DAYS = ((.TIME_BUF [0] - %C'0')*1000) + 	!
	    ((.TIME_BUF [1] - %C'0')*100) + 	!
	    ((.TIME_BUF [2] - %C'0')*10) + 	!
	    (.TIME_BUF [3] - %C'0');
	    HOURS = ((.TIME_BUF [5] - %C'0')*10) + (.TIME_BUF [6] - %C'0');
	    MINUTES = ((.TIME_BUF [8] - %C'0')*10) + (.TIME_BUF [9] - %C'0');
!+
! Convert the total number of minutes to floating point.
!-
	    CVTLF (%REF (.MINUTES + (.HOURS*60) + (.DAYS*24*60)), RESULT);
!+
! Return the connect time in minutes as a floating point number.
!-
	    RETURN (.RESULT);
	    END;

	[3, 4] :
!+
! These functions are not implemented.  They returned the kilo-core
! ticks and device time in RSTS.  For compatability, return zero.
!-
	    RETURN (0);

	[OUTRANGE] :
!+
! Other values have never been implemented in anything we must be
! compatable with, so give an error message.
!-
	    BAS$$STOP (BAS$K_NOTIMP);
	TES;

!+
! In the unlikely event that the above CASE expression falls through,
! return a zero.
!-
    RETURN (0);
    END;					! end of BAS$TIME_F



END				! end of BAS$DATE_TIME
ELUDOM
