	.TITLE	MTH$DLOG 	; Floating Point Natural and Common
				; Logarithm Functions (DLOG,DLOG10)
	.IDENT /2-003/		; File: MTHDLOG.MAR  Edit: PDG2003
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;
; FACILITY: MATH LIBRARY
;++
; ABSTRACT:
;
; MTH$DLOG and MTH$DLOG10 are functions which return the double precision
; floating point natural or common logarithm of  their  double  precision 
; floating point argument. The call is standard call-by-reference.
; MTH$DLOG_R8  and  MTH$DLOG10_R8 are special routines which are the same 
; as MTH$DLOG and MTH$DLOG10 except a faster  non-standard  JSB  call  is 
; used with the argument in R0 and no registers are saved.
;
;--
;
; VERSION: 01
;
; HISTORY:
; AUTHOR:
;	Peter Yuo, 15-Oct-76: Version 01
;
; MODIFIED BY:
;
; 01-1	Peter Yuo, 22-May-77
;
; VERSION: 02
;
; HISTORY:
; AUTHOR:
;	Bob Hanek, 18-Jun-81: Version 02
;
;
;

	.SBTTL	HISTORY	; Detailed Current Edit History


; ALGORITHMIC DIFFERENCE FROM FP-11C ROUTINE:
;	1. Uses POLYD so greater accuracy.
;
; Edit History for Version 01 of MTH$DLOGDLOG10 
;
; 01-2	May 20, 1977	P. Yuo
;	Multiplication of EXPONENT(X) by ln(2) is done after POLY instead of 
;       before, so one less register is used.
; 01-4	May 22, 1977	P. Yuo
;	Code saving after code review
; 01-6	MTH$$ERROR changed to MTH$$SIGNAL.
;	MTH$_... changed to MTH__....
;	Changed error handling mechanism. Put error result in R0:R1 before
;	calling MTH$$SIGNAL in order to allow user modify error result.
; 01-8	Add Rich Lary's code bums for speed...  JMT 26-Jan-78
; 01-9	Move .ENTRY mask definition to module header.  TNH 14-Aug-78
; 1-010	- Update version number and copyright notice.  JBS 16-NOV-78
; 1-011	- Change MTH__LOGZERGEG to MTH$K_LOGZERNEG.  JBS 07-DEC-78
; 1-012	- Add "_" to the PSECT directive.  JBS 22-DEC-78
; 1-013 - Add comment explaining code trickery.  SBL 14-Feb-1979
; 1-014 - Declare externals.  SBL 17-May-1979
;
;
; Edit History for Version 02 of MTH$DLOGDLOG10 
;

; 2-001 - Add MTH$DLOG2.  RNH 08-Aug-1981
; 2-002 - Correct entry logic for JSB entries.  Use G^ addressing for
;	  externals.  SBL 24-Aug-1981
; 2-003	- Change D_FHI to the global symbol MTH$$AB_D_FHI.  PDG 3-Nov-81

	.SBTTL	DECLARATIONS	; Declarative Part of Module

;
; INCLUDE FILES:	MTHJACKET.MAR
;

;
; EXTERNAL SYMBOLS:
;
	.DSABL	GBL
	.EXTRN	MTH$K_LOGZERNEG
	.EXTRN	MTH$$SIGNAL
	.EXTRN	MTH$$AB_ALOG

;
; EQUATED SYMBOLS:

	ACMASK = ^M<IV, R2, R3, R4, R5, R6, R7, R8>
					; register save mask and IV enable
	SD_1		=	^F1.0	; short floating literal 1.0

;
; MACROS:	none
;
; PSECT DECLARATIONS:

	.PSECT	_MTH$CODE	PIC,SHR,LONG,EXE,NOWRT
					; program section for math routines
;
; OWN STORAGE:	none
;
; CONSTANTS:

;
;
;   The  D_FHI  table is accessed by an index obtained from the MTH$$AB_ALOG 
;   table.  The MTH$$AB_ALOG  table  is  located  in  MTHALOG.MAR.   Indices 
;   between  0  and  13  inclusive  are  used to access entries 0 through 13 
;   respectively.   For  these  indecies,  the  first  three  items  of  the 
;   corresponding entry are  FHI,  LN_FHI_LO  and  LN_FHI_HI .  The last two 
;   items  for  these  entries  are  not  used.  Indices  between  14 and 27 
;   inclusive access entries 13 through 0 respectively.  For  these indecies,
;   the last three items in the corresponding entry are LN_FHI_HI, LN_FHI_LO 
;   and FHI.  The first two items for these entries are not used.
;

MTH$$AB_D_FHI::
; Entry  0
	.QUAD	^X000000004F9040ED	; .18539905548095703E+01
	.QUAD	^X7C182E8EB8ED339C	; .18244885037187055E-07
	.QUAD	^X0000789E0A04401E	; .61734035439258150E+00
	.QUAD	^X81067183B292339C	; .18241995369217608E-07
	.QUAD	^X00000000149E400A	; .53937709331512451E+00
; Entry  1
	.QUAD	^X000000001D4340CF	; .16180804967880249E+01
	.QUAD	^X3D2E5B7AD371B40F	;-.33487088150728428E-07
	.QUAD	^X60000B76652B3FF6	; .48124060168191818E+00
	.QUAD	^X0B9C4628D935B40F	;-.33492331660229068E-07
	.QUAD	^X00000000364F401E	; .61801618337631226E+00
; Entry  2
	.QUAD	^X0000000068D440BA	; .14563241004943848E+01
	.QUAD	^XA61156F10CD33306	; .78027427538038965E-08
	.QUAD	^X60008AC077FF3FC0	; .37591551369422405E+00
	.QUAD	^XCDAD85CDA4CC3306	; .78372974978005425E-08
	.QUAD	^X00000000C8F9402F	; .68666034936904907E+00
; Entry  3
	.QUAD	^X00000000AD1D40AB	; .13412204980850220E+01
	.QUAD	^X0E198034C7A5B262	;-.33000814305226938E-08
	.QUAD	^X4000E416501E3F96	; .29358002218498314E+00
	.QUAD	^X4E4F98EBE03AB262	;-.33014787786590467E-08
	.QUAD	^X00000000DEF5403E	; .74558955430984497E+00
; Entry  4
	.QUAD	^X000000001DA240A1	; .12587168216705322E+01
	.QUAD	^XCD6919A2775532F6	; .71731088180994794E-08
	.QUAD	^X8000616B9D723F6B	; .23009279937366500E+00
	.QUAD	^XC455AB1549CA32F6	; .71679314343157716E-08
	.QUAD	^X0000000061B9404B	; .79445987939834595E+00
; Entry  5
	.QUAD	^X000000008BD24099	; .11995794773101807E+01
	.QUAD	^X670D0B74F961339A	; .18041364037815043E-07
	.QUAD	^X4000E4BA569D3F3A	; .18197104176084622E+00
	.QUAD	^XAFFF96B7FE36339A	; .18043562357555396E-07
	.QUAD	^X00000000687B4055	; .83362549543380737E+00
; Entry  6
	.QUAD	^X00000000FFA64093	; .11562392711639404E+01
	.QUAD	^XA6B0F8DAA4AF33D2	; .24522108738420825E-07
	.QUAD	^XA0006714A8273F14	; .14517270628599022E+00
	.QUAD	^XB4C359CDAACF33D2	; .24524892962309998E-07
	.QUAD	^X000000006850405D	; .86487293243408203E+00
; Entry  7
	.QUAD	^X00000000C18C408F	; .11230940818786621E+01
	.QUAD	^XEE2F7A5BB6A5330E	; .83070168326007080E-08
	.QUAD	^XA0009BEDBF403EED	; .11608744121413395E+00
	.QUAD	^X20E25DDFAD3A330E	; .83048753355949145E-08
	.QUAD	^X00000000F1154063	; .89039736986160278E+00
; Entry  8
	.QUAD	^X000000005B39408C	; .10965338945388794E+01
	.QUAD	^XC08B3EA88FDBB3B1	;-.20670930291477513E-07
	.QUAD	^XA0001EBCBB5A3EBC	; .92154220641148754E-01
	.QUAD	^XD0AD3C6F7941B3B1	;-.20660652275383675E-07
	.QUAD	^X0000000076814069	; .91196447610855103E+00
; Entry  9
	.QUAD	^X00000000B2B24089	; .10757658481597900E+01
	.QUAD	^X5EC72E3764A1340B	; .32454981566347323E-07
	.QUAD	^X8000761592373E95	; .73032792369019717E-01
	.QUAD	^X7ACE3A065ACA340B	; .32446032444473518E-07
	.QUAD	^X00000000F853406D	; .92957037687301636E+00
; Entry 10
	.QUAD	^X00000000B4DF4087	; .10602072477340698E+01
	.QUAD	^X26F6B5B8ADAD33B9	; .21615814400350767E-07
	.QUAD	^X60009CEF78593E6F	; .58464384127510982E-01
	.QUAD	^XE061C397B27D33B9	; .21618002968246588E-07
	.QUAD	^X0000000076554071	; .94321185350418091E+00
; Entry 11
	.QUAD	^X0000000054244086	; .10494427680969238E+01
	.QUAD	^XE9F0E38DB48AB412	;-.34157476452222763E-07
	.QUAD	^XA0006AC5AB9B3E45	; .48259360406838425E-01
	.QUAD	^X437DC492B075B412	;-.34153763436452798E-07
	.QUAD	^X00000000F0604073	; .95288658142089844E+00
; Entry 12
	.QUAD	^X0000000038494085	; .10407801866531372E+01
	.QUAD	^XAE5B42415CE33328	; .98000072579782171E-08
	.QUAD	^XA000A9A3B8363E23	; .39970601583469545E-01
	.QUAD	^XD4DA866C39CC3328	; .97920289877412402E-08
	.QUAD	^X00000000F8264075	; .96081769466400146E+00
; Entry 13
	.QUAD	^X000000006EE94084	; .10346347093582153E+01
	.QUAD	^X5D360D074E8B3345	; .11484767848640602E-07
	.QUAD	^X6000D68B76593E0B	; .34048415117204911E-01
	.QUAD	^X281BA6FA33443345	; .11478566232851673E-07
	.QUAD	^X000000006E2A4077	; .96652472019195557E+00

;
;  Polynomial constants tables
;

LOGTAB1:				; Constants for q(z).  Generated using
					; eq. 6.3.10 of Hart et. al. (sin(2a) 
					; = 1/32)
	.QUAD	^X1E51DE524D00BECD	; C9 =  -0.10024452856511271
	.QUAD	^X44C1F2BD0E683EE4	; C8 =   0.11135560980588577
	.QUAD	^X9B9BEC78FFDBBEFF	; C7 =  -0.12499973121073342
	.QUAD	^X4BB28A4649143F12	; C6 =   0.14285690397225510
	.QUAD	^X6C93AD01AAAABF2A	; C5 =  -0.16666666680280835
	.QUAD	^XC92CCE8DCCCC3F4C	; C4 =   0.20000000010208756
	.QUAD	^XDCE9FFFFFFFFBF7F	; C3 =  -0.24999999999996883
	.QUAD	^XA0A5AAAAAAAA3FAA	; C2 =   0.33333333333331553
	.QUAD	^X000000000000C000	; C1 =  -0.50000000000000000
	.QUAD	^X0000000000000000	; C0 =   0.00000000000000000
LOGLEN1 = .-LOGTAB1/8			; no. of floating point entries


LOGTAB2:				; Constants for p(z*z). Generated using
					; eq. 6.3.11 of Hart et. al. (sin(2a) =
					; (b - 1)/(b + 1) where b = 2**(1/7))
	.QUAD	^X88B900ED70B23F3B	; C5 =  0.183047086054451500
	.QUAD	^X5D2C3E008D3C3F63	; C4 =  0.222218457493082486
	.QUAD	^X185BC1CE49243F92	; C3 =  0.285714291246265538
	.QUAD	^X1CEFCCC4CCCC3FCC	; C2 =  0.399999999996049620
	.QUAD	^XAB02AAAAAAAA402A	; C1 =  0.666666666666667879
	.QUAD	^X0000000000004100	; C0 =  2.000000000000000000
LOGLEN2 = .-LOGTAB2/8



;+  The "128" in the constants is used to shift the unbiased exponent
;   right 7 places so that the rightmost bit is at bit 0.  
;-

D_LN_2_HI:
	.QUAD	^X7200F7B172173CB1	; (Hi 48 bits of ln2)/128
D_LN_2_LO:
	.QUAD	^X8ECEAF2775E62B81	; (Low bits of ln2)/128
D_DLOG10_E:				; LOG10(e)
	.WORD	^O037736,^O055730
	.WORD	^O124467,^O024162
D_INV_LN2_CONS:				; convert natural log to log base 2
	.DOUBLE	1.4426950408889634073599246810018921374266




	.SBTTL	MTH$DLOG  - Standard Double Precision Floating DLOG


;++
; FUNCTIONAL DESCRIPTION:
;
; DLOG  - single precision floating point function
;
; DLOG(X) is computed using the following approximation technique:
;
;	If X =< 0, error.  Otherwise
;
;	Let X = f * (2**n), where 1/2 <= f < 1
;
;       If n is greater than or equal to 1 than
;             set N = n - 1 and F = 2*f.  
;          Else
;             set N = n and F = f.  
;
;       Then  ln(x) = N*ln2 + ln(F)           
;
;       If |F - 1| < 2**-5 then
;             ln(F) =  W + W*P(W), where W = F - 1 and P 
;             is a polynomial of degree 8.
;          Else
;             ln(F) = ln(FHI) + Z*Q(Z*Z), where FHI is ob-
;             tained by table look-up, Q is a polynomial of
;             degree 5 and Z = (F - FHI)/(F + FHI)
;
;       NOTE: The quantities ln(FHI) and ln2 are used in the above
;             equations in two parts - a high part (containing the
;             high order bits) and a low part (containing the low
;             order bits.  In the code the high and low parts of the
;             constants are indicated by a _HI and _LO suffix respec-
;             tively.  The values were chosen such that N*LN_2_HI +
;             LN_FHI_HI is exactly representable.
;
;
; CALLING SEQUENCE:
;
;	logarithm.wd.v = MTH$DLOG(x.rd.r)
;
; INPUT PARAMETERS:

	LONG = 4			; define longword multiplier
	x = 1 * LONG			; Contents of x is the argument

; IMPLICIT INPUTS:	none
;
; OUTPUT PARAMETERS:
;
;	VALUE:	double precision floating logarithm of the argument
;
; IMPLICIT OUTPUTS:	none
;
; COMPLETION CODES:	none
;
; SIDE EFFECTS:
;
; Signals: MTH$_LOGZERNEG if |X| =< 0.0 with reserved operand in R0/R1
; (copied to the signal mechanism vector CHF$L_MCH_R0/R1 by LIB$SIGNAL).
; Associated message is: "LOGARITHM OF ZERO OR NEGATIVE VALUE". Result is 
; reserved operand -0.0 unless a user supplied (or any) error handler changes 
; CHF$L_MCH_R0/R1.
;
; NOTE: This procedure disables floating point underflow, enables integer
; overflow, causes no floating overflow or other arithmetic traps, and
; preserves enables across the call.
;
;---


	.ENTRY	MTH$DLOG, ACMASK	; standard call-by-reference entry
					; disable DV (and FU), enable IV
	MTH$FLAG_JACKET			; flag that this is a jacket procedure 
					; in case of an error in special JSB 
					; routine
	MOVD	@x(AP), R0		; R0/R1 = arg 
	BSBB	MTH$DLOG_R8 		; call special DLOG rountine
	RET				; return - result in R0


	.SBTTL	MTH$DLOG10 - Standard Single Precision Floating Common log

;++
; FUNCTIONAL DESCRIPTION:
;
; DLOG10  - single precision floating point function
;
; DLOG10(X) is computed as DLOG10(E) * DLOG(X).
;
; See description of MTH$DLOG 
;
; CALLING SEQUENCE:
;
;	logarithm_base_10.wd.v = MTH$DLOG10(x.rd.r)
;
; INPUT PARAMETERS:

	LONG = 4			; define longword multiplier
	x = 1 * LONG			; Contents of x is the argument 

;
; SIDE EFFECTS:	See description of MTH$DLOG
;
;--


	.ENTRY	MTH$DLOG10, ACMASK	; standard call-by-reference entry
					; disable DV (and FU), enable IV
	MTH$FLAG_JACKET			; flag that this is a jacket procedure
					; in case of an error in special JSB
					; routine
	MOVD	@x(AP), R0		; R0/R1 = arg 
	BSBB	MTH$DLOG10_R8 		; call special DLOG10 routine
	RET				; return - result in R0


	.SBTTL	MTH$DLOG2  - Standard Single Precision Floating Common logarithm

;++
; FUNCTIONAL DESCRIPTION:
;
; DLOG2  - double precision floating point function
;
; DLOG2(X) is computed as DLOG2(E) * DLOG(X).
;
; See description of MTH$DLOG 
;
; CALLING SEQUENCE:
;
;	logarithm_base_2.wd.v = MTH$DLOG2(x.rd.r)
;
; INPUT PARAMETERS:

	LONG = 4			; define longword multiplier
	x = 1 * LONG			; Contents of x is the argument 

;
; SIDE EFFECTS:	See description of MTH$DLOG
;
;--


	.ENTRY	MTH$DLOG2, ACMASK	; standard call-by-reference entry
					; disable DV (and FU), enable IV
	MTH$FLAG_JACKET			; flag that this is a jacket procedure 
					; in case of an error in special JSB 
					; routine
	MOVD	@x(AP), R0		; R0/R1 = arg 
	BSBB	MTH$DLOG_R8		; JSB to natural log
	MULD2	D_INV_LN2_CONS, R0	; convert to base 2
	RET				; return - result in R0


	.SBTTL	MTH$DLOGDLOG10_R8  - Special DLOG/DLOG10 routines

; Special DLOG/DLOG10 - used by the standard routine, and directly.
;
; CALLING SEQUENCE:
;	save anything needed in R0:R9
;	MOVD	..., R0			; input in R0/R1
;	JSB	MTH$DLOG10_R8 /MTH$DLOG_R8 
;	return with result in R0/R1
; Note: This routine is written to avoid causing any integer overflows, 
; floating overflows, or floating underflows or divide by 0 conditions, 
; whether enabled or not.
;
; REGISTERS USED:
;	R0/R1 - Double floating argument then result
;	R2/R3 - scratch
;	R0:R5 - POLYD
;	R6/R7 - W during POLYD
;	R8 - Pointer into D_FHI table



MTH$DLOG10_R8::				; special DLOG10 routine
	BICW3	#^X7F, R0, R8		; R8 = biased exponent
	BLEQ	ERR			; Error if <= 0
					; Note: ERROR routine depends on user
					; PC being on top of stack, so 
					; subroutine call to MTH$DLOG_R8 is 
					; not used
	BSBB	DLOG_COMMON_R8 		; call common DLOG/DLOG10 routine
	MULD	D_DLOG10_E, R0		; R0/R1 = DLOG10(e) * DLOG(X)
	RSB				; return

MTH$DLOG_R8::				; special LOG routine
	BICW3	#^X7F, R0, R8		; R8 = Biased exponent
	BLEQ	ERR			; DLOG(X) is not defined for X=<0
DLOG_COMMON_R8:
	SUBW	#^X4000, R8		; R8 = Unbiased exponent
	BLEQ	NEG_EXP			; Branch to processing for n=<0

;
; Exponent is positive.  N = n - 1 and F = 2f
;

	SUBW	#^X80, R8		; R8 = N = n - 1
	SUBW	R8, R0			; R0/R1 = F = 2f
	MOVZBL	R0, R3			; R3 = index into MTH$$AB_ALOG table
	MOVB	G^MTH$$AB_ALOG[R3], R3	; R3 = offset into D_FHI tables
	BLSS	LN_1_PLUS		; Branch to special processing 
					;   for F close to 1

;
; Compute Z, Z**2, P(Z**2) and Z*P(Z**2)
;

	CVTWD	R8, -(SP)		; Push N onto the stack
	MOVAQ	MTH$$AB_D_FHI[R3], R8	; R8 = Address of FHI
	MOVQ	(R8)+, R4		; R4/R5 = FHI
	SUBD3	R4, R0, R6		; R6/R7 = F - FHI
	ADDD	R4, R0			; R0/R1 = F + FHI
	DIVD	R0, R6			; R6/R7 = Z = (F - FHI)/(F + FHI)
	MULD3	R6, R6, R0		; R0/R1 = Z**2
	POLYD	R0, #LOGLEN2-1, LOGTAB2	; R0/R1 = P(Z**2)
	MULD	R6, R0			; R0/R1 = Z*P(Z**2)

;
; Compute B = N*LN_2_LO + LN_FHI_LO + Z*P(Z*Z)
;
	MULD3	(SP), D_LN_2_LO, R2	; R2/R3 = N*LN_2_LO
	ADDD	(R8)+, R2		; R2/R3 = N*LN_2_LO + LN_FHI_LO
	ADDD	R2, R0			; R0/R1 = B

;
; Compute A = N*LN_2_HI + LN_FHI_HI and DLOG(X)
;
	MULD3	(SP)+, D_LN_2_HI, R2	; R2/R3 = N*LN_2_HI
	ADDD	(R8), R2		; R2/R3 = A = N*LN_2_HI + LN_FHI_HI
	ADDD	R2, R0			; R0/R1 = A + B = DLOG(X)
	RSB

LN_1_PLUS:
        BRB	LN_1_PLUS_W		

ERR:	BRW	ERROR

;
; Exponent is negative.  N = n and F = f
;

NEG_EXP:SUBW	R8, R0			; R0/R1 = F = f
	MOVZBL	R0, R3			; R3 = index into MTH$$AB_ALOG table
	MOVB	G^MTH$$AB_ALOG[R3], R3	; R3 = offset into D_FHI tables
	BLSS	LN_1_PLUS_W		; Branch to special processing 
					;   for F close to 1

;
; Compute Z, Z**2, P(Z**2) and Z*P(Z**2)
;

	CVTWD	R8, -(SP)		; Push N onto the stack
	MOVAQ	MTH$$AB_D_FHI[R3], R8	; R8 = Address of FHI
	MOVQ	(R8), R4		; R4/R5 = FHI
	SUBD3	R4, R0, R6		; R6/R7 = F - FHI
	ADDD	R4, R0			; R0/R1 = F + FHI
	DIVD	R0, R6			; R6/R7 = Z = (F - FHI)/(F + FHI)
	MULD3	R6, R6, R0		; R0/R1 = Z**2
	POLYD	R0, #LOGLEN2-1, LOGTAB2	; R0/R1 = P(Z**2)
	MULD	R6, R0			; R0/R1 = Z*P(Z**2)

;
; Compute B = N*LN_2_LO + LN_FHI_LO + Z*P(Z*Z)
;
	MULD3	(SP), D_LN_2_LO, R2	; R2/R3 = N*LN_2_LO
	ADDD	-(R8), R2		; R2/R3 = N*LN_2_LO + LN_FHI_LO
	ADDD	R2, R0			; R0/R1 = B

;
; Compute A = N*LN_2_HI + LN_FHI_HI and DLOG(X)
;
	MULD3	(SP)+, D_LN_2_HI, R2	; R2/R3 = N*LN_2_HI
	SUBD	-(R8), R2		; R2/R3 = A = N*LN_2_HI + LN_FHI_HI
	ADDD	R2, R0			; R0/R1 = A + B = DLOG(X)
	RSB

;
; Special logic for F close to 1 
;

LN_1_PLUS_W:
	SUBD3	#SD_1, R0, R6		; R6/R7 = W = F - 1
	POLYD	R6, #LOGLEN1-1,LOGTAB1	; R0/R1 = Q(W)
	MULD	R6, R0			; R0/R1 = W*Q(W)
	CVTWD	R8, R4			; R4/R5 = N
	MULD3	R4, D_LN_2_LO, R2	; R2/R3 = N*LN_2_LO
	ADDD	R2, R0			; R0/R1 = N*LN_2_LO + W*Q(W)
	ADDD	R6, R0			; R0/R1 = N*LN_2_LO + LN(F)
	MULD	D_LN_2_HI, R4		; R4/R5 = N*LN_2_HI
	ADDD	R4, R0			; R0/R1 = DLOG(X)
	RSB

;
; X =< 0.0, signal error
;
ERROR:	PUSHL	(SP)			; return PC from JSB routine
	MOVZBL	#MTH$K_LOGZERNEG, -(SP)	; condition value
	ASHQ	#15, #1, R0		; R0 = result = reserved operand -0.0
					; goes to signal mechanism vector
					; (CHF$L_MCH_R0/R1) so error handler
					; can modify the result.
	CALLS	#2, G^MTH$$SIGNAL	; signal error and use real user's PC
					; independent of CALL vs JSB
	RSB				; return - R0 restored from 
					; CHF$L_MCH_R0/R1



	.END
