MODULE COM$ERRSET (		! FORTRAN compatibility error set (ERRSET)
	IDENT = '1-011',	! File: COMERRSET.B32
	LINKAGE (FORTRAN)	! Call-by-reference
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  FORTRAN compatibility Library
!
! ABSTRACT:
!
!	This module contains routine ERRSET to perform F4P-11 type
!	compatable error checking.
!
! ENVIRONMENT:  User Mode - AST re-entrant
!
! AUTHOR:  Thomas N. Hastings, CREATION DATE:  14-Dec-1977
!
! MODIFIED BY:
!
! 	Thomas N. Hastings, 14-Dec-1977: VERSION 0
! 00-01	- original
! 00-10	- Call back with indirect.  TNH 3-Jan-78.
! 00-14	- PSECT F4PCOMPAT$CODE.  TNH 5-Jan-78.
! 00-15	- Fix MAXLIM.  TNH 5-Jan-78.
! 00-16	- Down count ERROR_COUNT.  TNH 6-Jan-78
! 00-17	- Math errors are continue type.  TNH 6-Jan-78
! 00-21	- remove debugging printing.  TNH 9-Jan-78
!
!	Jonathan M. Taylor, 12-Jan-78: VERSION 1
! 1-1	- original; break module COM$ERRSET_TST into COM$ERRTST, COM$ERRSET,
!	  and COM$$ERRSET_TST.  JMT 12-Jan-78
! 1-3	- Bug fix.  Call SIG_NO_LUB, not SIGNAL_STOP.  JMT 8-Apr-78
! 1-04	- Change to STARLET library. DGP 20-Apr-78
! 0-05	- Change REQUIRE files for VAX system build.  DGP 28-Apr-78
! 1-06	- Change STARLET to RTLSTARLE to avoid conflicts.  DGP 1-May-78
! 1-07	- Change file name to COMERRSET.B32, and change REQUIRE
!	  file names similarly.  JBS 14-NOV-78
! 1-008	- Update copyright notice.  JBS 16-NOV-78
! 1-009	- Declare NULLPARAMETER for new BLISS compiler.  JBS 22-NOV-78
! 1-010 - REQUIRE RTLPSECT directly instead of through OTSMAC.  JBS 06-dec-78
! 1-011 - Fix bug where alteration of FU actually causes caller's
!	  saved PC to be munged!  SPR 11-26419 SBL 2-Oct-1979
!--

!
! TABLE OF CONTENTS:
!
FORWARD ROUTINE
	ERRSET: NOVALUE;		! FORTRAN compatibility CALL ERRSET

!
! INCLUDE FILES:
!
	LIBRARY	'RTLSTARLE';		! STARLET library for macros and symbols
REQUIRE 'RTLIN:RTLPSECT';		! Define DECLARE_PSECTS macro
REQUIRE 'RTLML:FORERR';			! for FOR$K_MAX_ERR
REQUIRE 'RTLIN:COMEST';			! COM$$ERR_TAB fields

!
! MACROS:
!
!	None

!
! EQUATED SYMBOLS:
!
!	None

!
! OWN STORAGE:
!
!	None

!
! PSECT DECLARATIONS:
!
	DECLARE_PSECTS (F4PCOMPAT);

!
! EXTERNAL REFERENCES:
!
EXTERNAL
	COM$$ERR_TAB: BLOCKVECTOR [FOR$K_MAX_ERR + 1, 1, BYTE] ADDRESSING_MODE (GENERAL),
	COM$$ERRORCOUNT: ADDRESSING_MODE (GENERAL);		! Image error count limit.
					! Decremented by COM_HANDLER.
					! EXIT on continuable error if 0.

EXTERNAL ROUTINE
	FOR$$SIG_NO_LUB: NOVALUE ADDRESSING_MODE (GENERAL);
					! SIGNAL_STOP FORTRAN error with no
					! LUB associated.

GLOBAL ROUTINE ERRSET (	! FORTRAN compatibility set error control
	FORT_ERR_NO,	! Adr. of word containing FORTRAN error number
	CONTIN,		! Adr. of word containing continue flag
	COUNT,		! Adr. of word containing count flag
	CONT_TYPE,		! Adr. of word containing continue type
	LOG,		! Adr. of word containing log flag
	MAXLIM)		! Adr. of word containing image max error limit
	:NOVALUE =			! No value is returned

!++
! FUNCTIONAL DESCRIPTION:
!
!
! FORMAL PARAMETERS:
!
!	FORT_ERR_NO.rw.r	Adr. of word containing FORTRAN error number 
!				to which the following parameters apply.
!	[CONTIN.rw.r		Optional adr. of word specifying whether or not to
!				continue after an error.  .TRUE. means continue
!				after the error is detected.  .FALSE. causes
!				an EXIT after the error.
!	[COUNT.rw.r		Optional adr. of word specifying whether to count
!				this error against the image's maximum
!				 error limit.  .TRUE. means count the error;
!				.FALSE. means do not count.
!	[CONT_TYPE.rw.r		Optional adr. of word specifying the type of continuation
!				to be performed after error detection.  
!				.TRUE. passes control to an ERR= transfer label
!				if supplied by the user;  .FALSE. causes
!				a return to the routine that detected the
!				error for default error recovery.
!	[LOG.rw.r		Optional adr. of word specifying whether to produce
!				an error message for this error.  .TRUE. produces
!				a message (using signal mechanism);
!				.FALSE. suppresses the message.
!	[MAXLIM.rw.r]]]]]	Optional adr. of word containing positive
!				integer used to set the image's maximum error limit.
!				The default value is set to 15 at image initialization.
!
! IMPLICIT INPUTS:
!
!	COM$$ERR_TAB byte table indexed by error number
!
! IMPLICIT OUTPUTS:
!
!	COM$$ERR_TAB byte table indexed by error number.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	OWN storage COM$$ERR_TAB is changed as specified.
!	SIGNAL_STOPs FOR$_INVARGFOR (48='INVALID ARGUMENT TO FORTRAN I/O LIBRARY')
!	If error number is floating underflow (74),
!	either enable or diable floating underflow for calling procedure
!	activation depending on final setting of LOG status bit for
!	error 74.  This is not quite the same as the PDP-11 where
!	the enable or disable affects all procedure activations not just caller.
!--

    BEGIN

    BUILTIN NULLPARAMETER;

    MAP
	FORT_ERR_NO:	REF VECTOR[1,WORD],
	CONTIN:		REF VECTOR[1,WORD],
	COUNT:		REF VECTOR[1,WORD],
	CONT_TYPE:		REF VECTOR[1,WORD],
	LOG:		REF VECTOR[1,WORD],
	MAXLIM:		REF VECTOR[1,WORD];
    LOCAL
	N;			! Temporary FORTRAN error number for this error

    !+
    ! If no FORT_ERR_NO, SIGNAL_STOP FOR$_INVARGFOR (48='INVALID ARGUMENT TO FORTRAN I/O LIBRARY')
    !-

    IF NULLPARAMETER (1) THEN FOR$$SIG_NO_LUB (FOR$K_INVARGFOR);
    N = .FORT_ERR_NO[0];

    !+
    ! Check range of FORTRAN error number and whether a defined error number
    !-

    IF .N GTRU FOR$K_MAX_ERR THEN FOR$$SIG_NO_LUB (FOR$K_INVARGFOR);
    IF .COM$$ERR_TAB[.N, B_EC_ANY] EQL 0 THEN FOR$$SIG_NO_LUB (FOR$K_INVARGFOR);

    !+
    ! Continuation arg - If TRUE, check if allowed to continue
    ! by making sure either continue or ERR= is allowed.
    !-

    IF NOT NULLPARAMETER (2)
    THEN
	BEGIN
	COM$$ERR_TAB[.N, V_EC_CONTINUE] = 0;
	IF .CONTIN[0]
	THEN
	    BEGIN
	    IF NOT .COM$$ERR_TAB[.N, V_EC_CONT_ALLOW] AND NOT .COM$$ERR_TAB[.N, V_EC_EREQ_ALLOW]
	    THEN
		FOR$$SIG_NO_LUB (FOR$K_INVARGFOR);
	    COM$$ERR_TAB[.N, V_EC_CONTINUE] = 1;
	    END
	END;

    !+
    ! Count control - if present, copy user arg
    !-

    IF NOT NULLPARAMETER (3) THEN COM$$ERR_TAB[.N, V_EC_COUNT] = .COUNT[0];

    !+
    ! Continuation type - If 1 (ERR=), check if allowed.
    ! If 0 (continue), check if allowed.
    !-

    IF NOT NULLPARAMETER (4)
    THEN
	BEGIN
	IF .CONT_TYPE[0]
	THEN		! User wants ERR=
	    BEGIN
	    IF NOT .COM$$ERR_TAB[.N, V_EC_EREQ_ALLOW] THEN FOR$$SIG_NO_LUB (FOR$K_INVARGFOR);
	    COM$$ERR_TAB[.N, V_EC_CONT_TYPE] = 1;
	    END
	ELSE		! User wants to continue in run-time library
	    BEGIN
	    IF NOT .COM$$ERR_TAB[.N, V_EC_CONT_ALLOW] THEN FOR$$SIG_NO_LUB (FOR$K_INVARGFOR);
	    COM$$ERR_TAB[.N, V_EC_CONT_TYPE] = 0;
	    END
	END;

    !+
    ! Log control - copy user arg
    !-

    IF NOT NULLPARAMETER (5) THEN COM$$ERR_TAB[.N, V_EC_LOG] = .LOG[0];

    !+
    ! Maximum error limit - copy user arg if present
    !-

    IF NOT NULLPARAMETER (6) THEN COM$$ERRORCOUNT = .MAXLIM[0];

    !+
    ! If this error is floating underflow (74)
    ! Set or clear floating underflow for calling procedure activation,
    ! depending on whether floating underflow is to be logged or not.
    ! Note: this is not quite the same as the PDP-11 where the enable
    ! takes effect for all procedure activations.
    !-

    IF .N EQL FOR$K_FLOUND
    THEN
	BEGIN
	BUILTIN FP;		! Stack frame pointer
	MAP FP: REF BLOCK[, BYTE];	! Use MDL definitions
	FP [SF$V_FU] = .COM$$ERR_TAB [FOR$K_FLOUND, V_EC_LOG];
	END;

    !+
    ! Return
    !-

    RETURN
    END;			! End of ERRSET


END
ELUDOM
