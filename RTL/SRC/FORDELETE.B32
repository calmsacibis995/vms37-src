MODULE FOR$DELETE (	! DELETE statement processor
		IDENT = '1-001'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY: FORTRAN Language Support Library
!
! ABSTRACT:
!
!	Contains routines to implement FORTRAN DELETE for relative
!	and indexed organization files.
!
! ENVIRONMENT:  User mode, AST reentrant
!
! AUTHOR: Steven B. Lionel, CREATION DATE: 14-May-1979
!
! EDIT HISTORY:
!
! 1-001 - Original.  SBL 14-May-1979
!--

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!

REQUIRE 'RTLIN:OTSLNK';				! Define all linkages

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
	FOR$DELETE : CALL_CCB,			! Sequential access delete entry
	FOR$DELETE_D : CALL_CCB;		! Direct access delete entry

BUILTIN
	ACTUALCOUNT;
!
! INCLUDE FILES:
!

LIBRARY 'RTLSTARLE';				! STARLET library for macros and symbols
REQUIRE 'RTLML:FORERR';				! FORTRAN error numbers
REQUIRE 'RTLML:OTSLUB';				! Logical Unit Block Definitions
REQUIRE 'RTLML:OTSISB';				! Inter-statement Block Definitions
REQUIRE 'RTLIN:RTLPSECT';			! P-SECT declaration macros
REQUIRE 'RTLML:FORPAR';				! Inter-module parameters

!
! MACROS:
!

!
! EQUATED SYMBOLS:
!

! 
! PSECT DEFINITIONS:
!

DECLARE_PSECTS (FOR);

!
! OWN STORAGE:
!

!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
 	FOR$$IOSTAT_HND,			! IOSTAT error handler
	FOR$$SIGNAL_STO : NOVALUE,		! Signal_stop routine
	FOR$$SIG_NO_LUB : NOVALUE,		! Signal without LUB
	FOR$$CB_PUSH : JSB_CB_PUSH NOVALUE,	! Push a CCB
	FOR$$CB_POP : JSB_CB_POP NOVALUE;	! Pop a CCB

GLOBAL ROUTINE FOR$DELETE (
	UNIT,			! Unit number on which to delete
	ERR_EQL			! 1 if ERR= or IOSTAT= present
	) : CALL_CCB = 

!++
! FUNCTIONAL DESCRIPTION:
!
! FOR$DELETE deletes the current record of the indexed or relative organization file
! open on unit UNIT.
!
! CALLING SEQUENCE:
!
!	iostat.wl.v = FOR$DELETE (unit.rl.v [, err_eql.rlu.v])
!
! FORMAL PARAMETERS:
!
!	unit		- The unit number on which to delete the record.
!			  There must be a "current record" on this unit.
!	err_eql		- If absent or zero, all errors are signalled.
!			- If 1, errors return an IOSTAT error code value.
!
! IMPLICIT INPUTS:
!
!	CCB
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	An IOSTAT value.
!
! SIDE EFFECTS:
!
!	SIGNAL_STOP's:
!	FOR$_WRIREAFIL - Write to read-only file
!	FOR$_NO_CURREC - No current record
!	FOR$_DELERR    - Delete error
!
!--

    BEGIN

    GLOBAL REGISTER
	CCB = 11: REF BLOCK [, BYTE];

    LOCAL
	L_UNWIND_ACTION : VOLATILE,
	L_ERR_EQL_PRES : VOLATILE,
	STATUS;

    ENABLE
	FOR$$IOSTAT_HND (L_UNWIND_ACTION, L_ERR_EQL_PRES);

    !+
    ! Determine if ERR_EQL is present.
    !-

    IF ACTUALCOUNT () GTR 1
    THEN
	L_ERR_EQL_PRES = .ERR_EQL
    ELSE
	L_ERR_EQL_PRES = 0;

    !+
    ! Unwind action is NO-OP (no LUB yet)
    !-

    L_UNWIND_ACTION= FOR$K_UNWINDNOP;

    !+
    ! Get a LUB for this unit.  On return, CCB points to the
    ! current control block.
    !-

    FOR$$CB_PUSH (.UNIT, LUB$K_LUN_MIN);

    !+
    ! Unwind action is now to POP the CCB.
    !-

    L_UNWIND_ACTION = FOR$K_UNWINDPOP;

    !+
    ! If file is not indexed or relative organization, or is direct access,
    ! signal error FOR$_DELERR.
    !-

    IF NOT .CCB [LUB$V_NOTSEQORG] OR .CCB [LUB$V_DIRECT]
    THEN
	FOR$$SIGNAL_STO (FOR$K_DELERR);

    !+
    ! If file is read-only, signal error FOR$_WRIREAFIL.
    !-

    IF .CCB [LUB$V_READ_ONLY]
    THEN
	FOR$$SIGNAL_STO (FOR$K_WRIREAFIL);

    !+
    ! Try to delete the current record.  If we get an error, signal it.
    !-

    IF NOT $DELETE (RAB=.CCB)
    THEN
	BEGIN
	WHILE .CCB [RAB$L_STS] EQL RMS$_RSA DO
	    BEGIN
	    $WAIT (RAB=.CCB);
	    $DELETE (RAB=.CCB);
	    END;
	IF NOT .CCB [RAB$L_STS]
	THEN
	     FOR$$SIGNAL_STO (
		SELECTONEU .CCB [RAB$L_STS] OF
		    SET
		    [RMS$_CUR, RMS$_RNL] : FOR$K_NO_CURREC;
		    [OTHERWISE] : FOR$K_DELERR;
		    TES);
	END;

    !+
    ! Return I/O system to previous state
    !-

    FOR$$CB_POP ();

    RETURN 0;		! Success IOSTAT value
    END;

GLOBAL ROUTINE FOR$DELETE_D (
	UNIT,			! Unit to delete on
	REC_NO,			! Record number to delete
	ERR_EQL			! 1 if ERR= or IOSTAT= specified
	) : CALL_CCB = 

!++
! FUNCTIONAL DESCRIPTION:
!
! Deletes the specified record on a relative organization file
! opened for direct access.
!
! CALLING SEQUENCE:
!
!	iostat.wl.v = FOR$DELETE_D (unit.rl.v, rec_no.rl.v [, err_eql.r;u.v])
!
! FORMAL PARAMETERS:
!
!	unit			- Unit number to delete on
!	rec_no			- Record number to delete
!	err_eql			- If present and 1, return IOSTAT
!				  values for errors.
!
! IMPLICIT INPUTS:
!
!	CCB
!	LUB$L_LOG_RECNO
!	LUB$V_FIND_LAST		! On if FIND was last operation
!
! IMPLICIT OUTPUTS:
!
!	LUB$V_FIND_LAST		! Cleared
!
! ROUTINE VALUE:
!
!	An IOSTAT value.
!
! SIDE EFFECTS:
!
!	SIGNAL STOPs:
!	FOR$_OPEDEFREQ - Open or define file required for direct or keyed access
!	FOR$_WRIREAFIL - Write to read-only file
!	FOR$_RECNUMOUT - Record number out of range
!	FOR$_ATTACCNON - Attempt to access non-existent record
!	FOR$_SPERECLOC - Specified record locked
!	FOR$_DELERR    - Delete error
!
!--

    BEGIN

    GLOBAL REGISTER
	CCB = 11: REF BLOCK [, BYTE];

    LOCAL
	L_UNWIND_ACTION : VOLATILE,
	L_ERR_EQL_PRES : VOLATILE;

    ENABLE
	FOR$$IOSTAT_HND (L_UNWIND_ACTION, L_ERR_EQL_PRES);

    !+
    ! Determine if ERR_EQL is present.
    !-

    IF ACTUALCOUNT () GTR 2
    THEN
	L_ERR_EQL_PRES = .ERR_EQL
    ELSE
	L_ERR_EQL_PRES = 0;

    !+
    ! Unwind action is NO-OP (no LUB yet)
    !-

    L_UNWIND_ACTION= FOR$K_UNWINDNOP;

    !+
    ! Get a LUB for this unit.  On return, CCB points to the
    ! current control block.
    !-

    FOR$$CB_PUSH (.UNIT, LUB$K_LUN_MIN);

    !+
    ! Unwind action is now to POP the CCB.
    !-

    L_UNWIND_ACTION = FOR$K_UNWINDPOP;

    !+
    ! If file is not relative organization, signal error FOR$_DELERR.
    !-

    IF .CCB [LUB$B_ORGAN] NEQU LUB$K_ORG_RELAT
    THEN
	FOR$$SIGNAL_STO (FOR$K_DELERR);

    !+
    ! If file is read-only, signal error FOR$_WRIREAFIL.
    !-

    IF .CCB [LUB$V_READ_ONLY]
    THEN
	FOR$$SIGNAL_STO (FOR$K_WRIREAFIL);

    !+
    ! If file is not direct access, signal error FOR$_OPEDEFREQ.
    !-

    IF NOT .CCB [LUB$V_DIRECT]
    THEN
	FOR$$SIGNAL_STO (FOR$K_OPEDEFREQ);

    !+
    ! If the record number passed is illegal, signal FOR$_RECNUMOUT.
    !-

    IF .REC_NO LEQ 0 OR (.CCB [LUB$L_REC_MAX] NEQ 0 AND .REC_NO GTRU .CCB [LUB$L_REC_MAX])
    THEN
	FOR$$SIGNAL_STO (FOR$K_RECNUMOUT);

    !+
    !  See if the requested record to be deleted may already be locked.
    !  If it is, we want to avoid doing a $FIND which would unlock the
    !  record.  To check, we compare REC_NO against (LUB$L_LOG_RECNO - 1)
    !  (or LUB$L_LOG_RECNO if LUB$V_FIND_LAST is set).  If they are equal,
    !  the last operation we did may have locked this record.  If it didn't,
    !  then we don't have a record locked.  Trying to delete the record
    !  will show if it's locked or not.  If not, we do a $FIND anyway.
    !-

    IF .REC_NO EQL 
	( IF .CCB [LUB$V_FIND_LAST]
	THEN
	    .CCB [LUB$L_LOG_RECNO]
	ELSE
	    .CCB [LUB$L_LOG_RECNO] - 1)
    THEN
	BEGIN

	CCB [LUB$V_FIND_LAST] = 0;		! Turn off bit

	!+
	! We may have it locked.  Try to delete it.
	!-

	IF NOT $DELETE (RAB=.CCB)
	THEN
	    WHILE .CCB [RAB$L_STS] EQL RMS$_RSA DO
		BEGIN
		$WAIT (RAB=.CCB);
		$DELETE (RAB=.CCB);
		END;

	!+
	! If we succeeded, return.
	!-

	IF .CCB [RAB$L_STS]
	THEN
	    BEGIN
	    FOR$$CB_POP ();	! Return I/O to previous state
	    RETURN 0;		! Success IOSTAT value
	    END;
	END;

    !+
    !  We don't have it locked.  Do a $FIND then a $DELETE.
    !-

    CCB [LUB$V_FIND_LAST] = 0;

    CCB [LUB$L_LOG_RECNO] = .REC_NO;
    IF NOT $FIND (RAB=.CCB)
    THEN
        BEGIN
        WHILE .CCB[RAB$L_STS] EQL RMS$_RSA DO
            BEGIN
    	$WAIT (RAB=.CCB);
    	$FIND (RAB=.CCB)
    	END;
        IF NOT .CCB [RAB$L_STS] THEN FOR$$SIGNAL_STO (
    	SELECTONEU .CCB [RAB$L_STS] OF
    	    SET
    	    [RMS$_RLK] : FOR$K_SPERECLOC;
    	    [RMS$_RNF, RMS$_EOF] : FOR$K_ATTACCNON;
    	    [OTHERWISE] : FOR$K_DELERR;
    	    TES);
        END;

    !+
    ! Try to delete the current record.  If we get an error, signal it.
    !-

    IF NOT $DELETE (RAB=.CCB)
    THEN
	BEGIN
	WHILE .CCB [RAB$L_STS] EQL RMS$_RSA DO
	    BEGIN
	    $WAIT (RAB=.CCB);
	    $DELETE (RAB=.CCB);
	    END;
	IF NOT .CCB [RAB$L_STS]
	THEN
	     FOR$$SIGNAL_STO (FOR$K_DELERR);
	END;

    !+
    ! Return I/O system to previous state
    !-

    FOR$$CB_POP ();

    RETURN 0;		! Success IOSTAT value
    END;

END				!End of module
ELUDOM
