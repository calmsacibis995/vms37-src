	.TITLE	MTH$ACOS 	; Floating Point Arc-cosine routine
				; (ACOS,ACOSD)
	.IDENT /1-013/		; File: MTHACOS.MAR  Edit: RNH1013
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;
; FACILITY: MATH LIBRARY
;++
; ABSTRACT:
;
; MTH$ACOS is a function which returns the floating point arc-cosine in
; radians of its single precision floating point argument. The call is 
; standard call-by-reference.
;
; MTH$ACOSD is a function which returns the floating point arc-cosine in
; degrees of its single precision floating point argument. The call is 
; standard call-by-reference.
;
;--
;
; VERSION: 01
;
; HISTORY:
; AUTHOR:
;	Peter Yuo, 29-Jun-77: Version 01
;
; MODIFIED BY:
;
;
;

	.SBTTL	HISTORY	; Detailed Current Edit History


; ALGORITHMIC DIFFERENCES FROM FP-11/C ROUTINE:	none
;
; Edit History for Version 01 of MTH$ACOS 
;
; 01-2	Changed MOVF #0, R0 into CLRL R0.
; 0-3	MTH$$ERROR changed to MTH$$SIGNAL.
;	MTH$_... changed to MTH__....
;	Changed error handling mechanism. Put error result in R0 (or R0:R1)
;	before calling MTH$$SIGNAL in order to allow user modify error result.
;
; 1-006	- Update copyright notice.  JBS 16-NOV-78
; 1-007	- Change MTH__INVARG to MTH$K_INVARGMAT.  JBS 07-DEC-78
; 1-008	- Add "_" to the PSECT directive.  JBS 21-DEC-78
; 1-009 - Declare externals.  SBL 17-May-1979
; 1-010 - Use MTH$SQRT_R3.  SBL 27-Sept-1979
; 1-011 - Change JSB entry to MTH$ACOS_R4.  RBG 28-Sept-1979
; 1-012 - Added degree entry points. RNH 22-MAR-1981
; 1-013 - Modified computation of 1 - x^2 for |x|>=1/2 RNH 2-Sept-81

	.SBTTL	DECLARATIONS	; Declarative Part of Module

;
; INCLUDE FILES:
;

;
; EXTERNAL SYMBOLS:
;
	.DSABL	GBL
	.EXTRN	MTH$SQRT_R3
	.EXTRN	MTH$ATAN_R4
	.EXTRN	MTH$ATAND_R4
	.EXTRN	MTH$K_INVARGMAT
	.EXTRN	MTH$$SIGNAL

; EQUATED SYMBOLS:

	SF_1.0	= ^F1.0			; 1.0
	LF_PI_OV_2	= ^O007733@16 + ^O040311
					; PI/2
	LF_PI		= ^O007733@16 + ^O040511
					; PI
	LF_90	= ^X000043B4		; 90
	LF_180	= ^X00004434		; 180
	value	= 4			; value.rf.r

;
; MACROS:	none
;
; PSECT DECLARATIONS:

	.PSECT	_MTH$CODE	PIC,SHR,LONG,EXE,NOWRT
					; program section for math routines
;
; OWN STORAGE:	none
;
;
; CONSTANTS:
;


	.SBTTL	MTH$ACOS  - Standard Single Precision Floating ACOS


;++
; FUNCTIONAL DESCRIPTION:
;
; ACOS  - single precision floating point function
;
; ACOS(X) is computed as:
;
;	If X = 0, then ACOS(X) = PI/2.
;	If X = 1, then ACOS(X) = 0.
;	If X = -1, then ACOS(X) = PI.
;	If 0 < X < 1/2, then ACOS(X) = ATAN(SQRT(1-X**2)/X).
;	If 1/2 < X < 1, then ACOS(X) = ATAN(SQRT((1-X)*(1+X))/X).
;	If -1/2 < X < 0, then ACOS(X) = ATAN(SQRT(1-X**2)/X) + PI.
;	If -1/2 < X < -1, then ACOS(X) = ATAN(SQRT((1-X)*(1+X))/X) + PI.
;	If 1 < |X|, error.
;
; CALLING SEQUENCE:
;
;	ACOS.wf.v = MTH$ACOS(x.rf.r)
;
; INPUT PARAMETERS:

	LONG = 4			; define longword multiplier
	x = 1 * LONG			; Contents of x is the argument

; IMPLICIT INPUTS:	none
;
; OUTPUT PARAMETERS:
;
;	VALUE:	floating arc-cosine of the argument
;
; IMPLICIT OUTPUTS:	none
;
; COMPLETION CODES:	none
;
; SIDE EFFECTS:
;
; Signals: MTH$_INVARG if |X| > 1 with reserved operand in R0 (copied to
; the signal mechanism vector CHF$L_MCH_R0/R1 by LIB$SIGNAL).
; Associated message is: "INVALID ARGUMENT". Result is reserved operand -0.0
; unless a user supplied (or any) error handler changes CHF$L_MCH_R0/R1.
;
; NOTE: This procedure disables floating point underflow, enables integer
; overflow.
;
;---


	.ENTRY	MTH$ACOS, ^M<IV, R2, R3, R4>
					; standard call-by-reference entry
					; disable DV (and FU), enable IV
	MTH$FLAG_JACKET			; flag that this is a jacket procedure in
					; case of an error in routine
					; If an error, convert signal to user PC
					; and resignal
	MOVF	@value(AP), R0		; R0 = |X| = @value(AP)
	BSBB	MTH$ACOS_R4		; call special ACOS routine
	RET				; return with result in R0


	.SBTTL	MTH$ACOS_R4 - Special ACOS routine

; Special ACOS - used by the standard routine, direct JSB call.
;
; CALLING SEQUENCE:
;	save anything needed in R0:R4
;	MOVF	..., R0			; input in R0
;	JSB	MTH$ACOS_R4
;	RSB				; return with result in R0
;

MTH$ACOS_R4::				; special ACOS routine
MTH$ACOS_R5::				; Release 1 name
	MOVF	R0, R4			; save X in R4
	BNEQ	TEST_FOR_1.0		; branch if |X| > 0

;
; X = 0
;

	MOVF	#LF_PI_OV_2, R0		; R0 = PI/2
	RSB				; return PI/2 if |X| = 0

;
; 0 < |X|
;

TEST_FOR_1.0:
	BICW	#^X8000, R0		; R0 = |X|
	CMPF	R0, S^#SF_1.0		; compare |X| with 1.0
	BGEQ	GEQ_TO_1.0		; branch if |X| >= 1.0

;
; 0 < |X| < 1.0
;

	CMPW	#^X4000, R0		; Check for loss of significance in
	BGTR	1$			;    computing 1 - x^2 and branch
	SUBF3	R0, #1, R1		; R1 = 1 - X
	ADDF	#1, R0			; R0 = 1 + X
	MULF	R1, R0			; R0 = 1 - X^2
	BRB	2$			; Join normal flow
1$:	MULF2	R0, R0			; R0 = X**2
	SUBF3	R0, S^#SF_1.0, R0	; R0 = 1.0 - X**2
2$:	JSB	MTH$SQRT_R3		; R0 = SQRT(1-X**2)
	DIVF	R4, R0			; R0 = SQRT(1-X**2)/X
	PUSHL	R4			; save sign of X for sign test
	JSB	MTH$ATAN_R4		; R0 = ATAN(SQRT(1-X**2)/X)
	MOVL	(SP)+, R4		; restore sign of X
	BRB	TEST_SIGN		; branch to TEST_SIGN

;
; 1 =< |X| 
;

GEQ_TO_1.0:
	BGTR	ERROR			; branch to ERROR if |X| > 1.0


;
; |X| = 1.0
;

	CLRF	R0			; R0 = 0


;
; Test the sign of X in order to decide if add PI to the result
;

TEST_SIGN:
	TSTF	R4			; test the sign of X
	BGEQ	10$			; branch if X > 0
	ADDF	#LF_PI, R0		; add PI to R0 if X < 0
10$:	RSB				; return with result in R0

;
; 1 < |X|, error
;

ERROR:	PUSHL	(SP)			; return PC from JSB routine
	MOVZBL	#MTH$K_INVARGMAT, -(SP)	; condition value
	ASHL	#15, #1, R0		; R0 = result = reserved operand -0.0
					; goes to signal mechanism vector
					; (CHF$L_MCH_R0/R1) so error handler
					; can modify the result.
	CALLS	#2, G^MTH$$SIGNAL	; signal error and use real user's PC
					; independent of CALL vs JSB
	RSB				; return - R0 restored from CHF$L_MCH_R0/R1


	.SBTTL	MTH$ACOSD  - Standard Single Precision Floating ACOSD


;++
; FUNCTIONAL DESCRIPTION:
;
; ACOSD  - single precision floating point function
;
; ACOSD(X) is computed as:
;
;	If X = 0, then ACOSD(X) = 90.
;	If X = 1, then ACOSD(X) = 0.
;	If X = -1, then ACOSD(X) = 180.
;	If 0 < X < 1/2, then ACOSD(X) = ATAND(SQRT(1-X**2)/X).
;	If 1/2 < X < 1, then ACOSD(X) = ATAND(SQRT((1-X)*(1+x))/X).
;	If -1/2 < X < 0, then ACOSD(X) = ATAND(SQRT(1-X**2)/X) + 180.
;	If -1 < X < -1/2, then ACOSD(X) = ATAND(SQRT((1-X)*(1+x))/X) + 180.
;	If 1 < |X|, error.
;
; CALLING SEQUENCE:
;
;	ACOSD.wf.v = MTH$ACOSD(x.rf.r)
;
; INPUT PARAMETERS:

	LONG = 4			; define longword multiplier
	x = 1 * LONG			; Contents of x is the argument

; IMPLICIT INPUTS:	none
;
; OUTPUT PARAMETERS:
;
;	VALUE:	floating arc-cosine of the argument
;
; IMPLICIT OUTPUTS:	none
;
; COMPLETION CODES:	none
;
; SIDE EFFECTS:
;
; Signals: MTH$_INVARG if |X| > 1 with reserved operand in R0 (co180ed to
; the signal mechanism vector CHF$L_MCH_R0/R1 by LIB$SIGNAL).
; Associated message is: "INVALID ARGUMENT". Result is reserved operand -0.0
; unless a user supplied (or any) error handler changes CHF$L_MCH_R0/R1.
;
; NOTE: This procedure disables floating point underflow, enables integer
; overflow.
;
;---


	.ENTRY	MTH$ACOSD, ^M<IV, R2, R3, R4>
					; standard call-by-reference entry
					; disable DV (and FU), enable IV
	MTH$FLAG_JACKET			; flag that this is a jacket procedure in
					; case of an error in routine
					; If an error, convert signal to user PC
					; and resignal
	MOVF	@value(AP), R0		; R0 = |X| = @value(AP)
	BSBB	MTH$ACOSD_R4		; call special ACOSD routine
	RET				; return with result in R0


	.SBTTL	MTH$ACOSD_R4 - Special ACOSD routine

; Special ACOSD - used by the standard routine, direct JSB call.
;
; CALLING SEQUENCE:
;	save anything needed in R0:R4
;	MOVF	..., R0			; input in R0
;	JSB	MTH$ACOSD_R4
;	RSB				; return with result in R0
;

MTH$ACOSD_R4::				; special ACOSD routine
	MOVF	R0, R4			; save X in R4
	BNEQ	D_TEST_FOR_1.0		; branch if |X| > 0

;
; X = 0
;

	MOVF	#LF_90, R0		; R0 = 90
	RSB				; return 90 if |X| = 0

;
; 0 < |X|
;

D_TEST_FOR_1.0:
	BICW	#^X8000, R0		; R0 = |X|
	CMPF	R0, S^#SF_1.0		; compare |X| with 1.0
	BGEQ	D_GEQ_TO_1.0		; branch if |X| >= 1.0

;
; 0 < |X| < 1.0
;

	CMPW	#^X4000, R0		; Check for possible loss of
	BGTR	1$			;    significance 
	SUBF3	R0, #1, R1		; R1 = 1 - X
	ADDF	#1, R0			; R0 = 1 + X
	MULF	R1, R0			; R0 = 1 - X^2
	BRB	2$			; Join main flow
1$:	MULF2	R0, R0			; R0 = X**2
	SUBF3	R0, S^#SF_1.0, R0	; R0 = 1.0 - X**2
2$:	JSB	MTH$SQRT_R3		; R0 = SQRT(1-X**2)
	DIVF	R4, R0			; R0 = SQRT(1-X**2)/X
	PUSHL	R4			; save sign of X for sign test
	JSB	MTH$ATAND_R4		; R0 = ATAND(SQRT(1-X**2)/X)
	MOVL	(SP)+, R4		; restore sign of X
	BRB	D_TEST_SIGN		; branch to TEST_SIGN

;
; 1 =< |X| 
;

D_GEQ_TO_1.0:
	BEQL	10$			; branch to ERROR if |X| > 1.0
	BRW	ERROR

;
; |X| = 1.0
;

10$:	CLRF	R0			; R0 = 0


;
; Test the sign of X in order to decide if add 180 to the result
;

D_TEST_SIGN:
	TSTF	R4			; test the sign of X
	BGEQ	10$			; branch if X > 0
	ADDF	#LF_180, R0		; add 180 to R0 if X < 0
10$:	RSB				; return with result in R0

	.END
