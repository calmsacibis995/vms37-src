MODULE BAS$FIND (				! Basic FIND construct
		IDENT = '1-006'			! File: BASFIND.B32
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:
!	Basic support library - user callable
!
! ABSTRACT:
!
!	This module is the UPI level of the Basic FIND construct.  Initially,
!	it contains only the code for sequential I/O.  This module will set
!	up the I/O data base for the LUN and go directly to the REC level.
!
!
! ENVIRONMENT:
!	User access mode - AST reentrant.
!
! AUTHOR: Donald G. Petersen, CREATION DATE: 27-Feb-79
!
! MODIFIED BY:
!
!	DGP, 27-Feb-79 : VERSION 01
! 1-001	- original.  DGP 27-Feb-79
! 1-002 - Add BAS$FIND_RECORD.  DGP 02-Mar-79
! 1-003 - More work on relative I/O.  DGP 05-Mar-79
! 1-004 - Add BAS$FIND_KEY.  DGP 06-Apr-79
! 1-005	- Set up ISB$A_USER_FP.  JBS 25-JUL-1979
! 1-006 - Check for virtual use of this file; set block use.  DGP 16-Oct-79
!--

!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES
!

REQUIRE 'RTLIN:OTSLNK';				! Define all linkages

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    BAS$FIND_KEY : NOVALUE,			! UPI level Indexed FIND
    BAS$FIND_RECORD : NOVALUE,			! UPI level Relative FIND
    BAS$FIND : NOVALUE;				! UPI level Sequential FIND

!
! INCLUDE FILES:
!

REQUIRE 'RTLML:OTSISB';				! ISB definitions

REQUIRE 'RTLML:OTSLUB';				! LUB definitions

REQUIRE 'RTLIN:RTLPSECT';			! Define DECLARE_PSECTS macro

LIBRARY 'RTLSTARLE';				! Starlet system macros

!
! MACROS:
!
!	NONE
!
!
! EQUATED SYMBOLS:
!	NONE
!
!
! PSECT DECLARATIONS:
!
DECLARE_PSECTS (BAS);
!
! OWN STORAGE:
!
!	NONE
!
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    BAS$$STOP_IO : NOVALUE,			! Signal fatal BASIC I/O error
    BAS$$REC_FIN : JSB_REC_IND NOVALUE,		! REC level - FIND indexed
    BAS$$REC_FRE : JSB_REC0 NOVALUE,		! REC level - RMS interface FIND relative
    BAS$$REC_FSE : JSB_REC0 NOVALUE,		! REC level processing - RMS interface
    						! FIND sequential
    BAS$$CB_PUSH : JSB_CB_PUSH NOVALUE,		! Load register CCB
    BAS$$CB_POP : JSB_CB_POP NOVALUE;		! Done with register CCB

!+
! The following are the error codes used in this module.
!-

EXTERNAL LITERAL
    BAS$K_ILLILLACC : UNSIGNED (8),		! Illegal or illogical access
    BAS$K_IO_CHANOT : UNSIGNED (8);		! I/O channel not open


GLOBAL ROUTINE BAS$FIND (			! FIND sequential
	UNIT					! logical unit number
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine will set up the I/O data base for this LUN if necessary
!	and then go directly to the REC level.  When control is returned to
!	this routine, it pops the CCB off of the I/O system.  The actual inter-
!	face to RMS is done at the REC level.  The next record is located.
!
! FORMAL PARAMETERS:
!
!	UNIT.rlu.v	logical unit number
!
! IMPLICIT INPUTS:
!
!	LUB$V_VA_USE		virtual use of this file
!
! IMPLICIT OUTPUTS:
!
!	ISB$B_STTM_TYPE		the statement type
!	LUB$V_BLK_USE		non-virtual array use of this file
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Signals:
!	BAS$K_IO_CHANOT (I/O channel not open)
!	BAS$K_ILLILLACC (illegal or illogical access)
!
!--

    BEGIN

    BUILTIN
	FP;

    GLOBAL REGISTER
	CCB = K_CCB_REG : REF BLOCK [, BYTE];

    LOCAL
	FMP : REF BLOCK [, BYTE];

    FMP = .FP;
!+
! Allocate the LUB/ISB/RAB for this unit if necessary.  Store new CB (con-
! trol block) in OTS$$A_CUR_LUB.  Store signed unit number in LUB$W_LUN.
!-
    BAS$$CB_PUSH (.UNIT, LUB$K_ILUN_MIN);
    CCB [ISB$A_USER_FP] = .FMP [SF$L_SAVE_FP];
!+
! If the channel is not open, give an error.
! FIND is not permitted on channel 0.
!-

    IF ( NOT .CCB [LUB$V_OPENED]) THEN BAS$$STOP_IO (BAS$K_IO_CHANOT);

!+
! Now that the data base is in place, store the statement type and  go
! directly to the REC level.
!-
    CCB [ISB$B_STTM_TYPE] = ISB$K_ST_TY_FSE;
!+
! Check for virtual array usage and set block usage
!-
    IF .CCB [LUB$V_VA_USE] THEN BAS$$STOP_IO(BAS$K_ILLILLACC);
    CCB [LUB$V_BLK_USE] = 1;
    BAS$$REC_FSE ();
!+
! Now that the FIND has been done, pop the CCB off the I/O system.
!-
    BAS$$CB_POP ();
    END;					!End of BAS$FIND


GLOBAL ROUTINE BAS$FIND_KEY (			! FIND indexed
	UNIT, 					! logical unit number
	KEY_NO, 				! key of reference number
	REL_OP, 				! relational operator
	KEY					! the key
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine will set up the I/O data base for this LUN if necessary
!	and then go directly to the REC level.  When control is returned to
!	this routine, it pops the CCB off of the I/O system.  The actual inter-
!	face to RMS is done at the REC level.  The next record is located
!	based on the key of reference specified.
!
! FORMAL PARAMETERS:
!
!	UNIT.rlu.v	logical unit number
!	KEY_NO.rl.v	key of reference number
!	REL_OP.rl.v	relational operator
!	KEY.rt.dx	the key desired
!
! IMPLICIT INPUTS:
!
!	LUB$V_VA_USE		virtual array use of this file
!
! IMPLICIT OUTPUTS:
!
!	ISB$B_STTM_TYPE		the statement type
!	LUB$V_BLK_USE		non-virtual use of this file
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Signals:
!	BAS$K_IO_CHANOT (I/O channel not open)
!	BAS$K_ILLILLACC (Illegal or illogical access)
!
!--

    BEGIN

    BUILTIN
	FP;

    GLOBAL REGISTER
	CCB = K_CCB_REG : REF BLOCK [, BYTE];

    LOCAL
	FMP : REF BLOCK [, BYTE];

    FMP = .FP;
!+
! Allocate the LUB/ISB/RAB for this unit if necessary.  Store new CB (con-
! trol block) in OTS$$A_CUR_LUB.  Store signed unit number in LUB$W_LUN.
!-
    BAS$$CB_PUSH (.UNIT, LUB$K_ILUN_MIN);
    CCB [ISB$A_USER_FP] = .FMP [SF$L_SAVE_FP];
!+
! If the channel is not open, give an error.
!-

    IF ( NOT .CCB [LUB$V_OPENED]) THEN BAS$$STOP_IO (BAS$K_IO_CHANOT);

!+
! Now that the data base is in place, store the statement type and  go
! directly to the REC level.
!-
    CCB [ISB$B_STTM_TYPE] = ISB$K_ST_TY_FIN;
!+
! Check for virtual array usage and set block usage
!-
    IF .CCB [LUB$V_VA_USE] THEN BAS$$STOP_IO(BAS$K_ILLILLACC);
    CCB [LUB$V_BLK_USE] = 1;
    BAS$$REC_FIN (.KEY_NO, .REL_OP, .KEY);
!+
! Now that the FIND has been done, pop the CCB off the I/O system.
!-
    BAS$$CB_POP ();
    END;					!End of BAS$FIND_KEY


GLOBAL ROUTINE BAS$FIND_RECORD (		! FIND relative
	UNIT, 					! logical unit number
	RECORD_NUM				! relative record number
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine will set up the I/O data base for this LUN if necessary
!	and then go directly to the REC level.  When control is returned to
!	this routine, it pops the CCB off of the I/O system.  The actual inter-
!	face to RMS is done at the REC level.  The next record is located.
!
! FORMAL PARAMETERS:
!
!	UNIT.rlu.v		logical unit number
!	RECORD_NUM.rl.v		relative record number
!
! IMPLICIT INPUTS:
!
!	LUB$V_VA_USE		virtual array use of this file
!
! IMPLICIT OUTPUTS:
!
!	ISB$B_STTM_TYPE		the statement type
!	LUB$V_BLK_USE		non-virtual array use of this file
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Signals:
!	BAS$K_IO_CHANOT (I/O channel not open)
!	BAS$K_ILLILLACC (Illegal or illogical access)
!
!--

    BEGIN

    BUILTIN
	FP;

    GLOBAL REGISTER
	CCB = K_CCB_REG : REF BLOCK [, BYTE];

    LOCAL
	FMP : REF BLOCK [, BYTE];

    FMP = .FP;
!+
! Allocate the LUB/ISB/RAB for this unit if necessary.  Store new CB (con-
! trol block) in OTS$$A_CUR_LUB.  Store signed unit number in LUB$W_LUN.
!-
    BAS$$CB_PUSH (.UNIT, LUB$K_ILUN_MIN);
    CCB [ISB$A_USER_FP] = .FMP [SF$L_SAVE_FP];
!+
! Give an error if the channel is not open.
!-

    IF ( NOT .CCB [LUB$V_OPENED]) THEN BAS$$STOP_IO (BAS$K_IO_CHANOT);

!+
! Now that the data base is in place, store the statement type, store the index, and  go
! directly to the REC level.
!-
    CCB [LUB$L_LOG_RECNO] = .RECORD_NUM;
    CCB [ISB$B_STTM_TYPE] = ISB$K_ST_TY_FRE;
!+
! Check for virtual array usage and set block usage
!-
    IF .CCB [LUB$V_VA_USE] THEN BAS$$STOP_IO(BAS$K_ILLILLACC);
    CCB [LUB$V_BLK_USE] = 1;
    BAS$$REC_FRE ();
!+
! Now that the FIND has been done, pop the CCB off the I/O system.
!-
    BAS$$CB_POP ();
    END;					!End of BAS$FIND_RECORD

END						!End of module - BAS$FIND

ELUDOM
