MODULE BAS$ERRTXT (				!
		IDENT = '1-002'			! File: BASERRTXT.B32
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!

!++
! FACILITY:  BASIC-PLUS-2 Error Messages
!
! ABSTRACT:
!
!	This module returns to a FORTRAN program the VAX/VMS 32-bit
!	condition value and error text corresponding to a BASIC
!	error code.  This module is used to produce BASMSG.MDL,
!	it is not part of the Run-time library.
!
! ENVIRONMENT:  VAX-11 user mode
!
! AUTHOR: John Sauter, CREATION DATE: 03-Nov-78
!
! MODIFIED BY:
!
! 1-001	- Original.
! 1-002	- Ignore fifth argument of ERR macro in ERROR_LIST.  JBS 28-DEC-78
!--

!
!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!
!	NONE
!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    ERRTXT;					! Return condition value and text

!
! INCLUDE FILES:
!

LIBRARY 'RTLSTARLE';				! Define system symbols

REQUIRE 'RTLIN:BASERRMSG.REQ';			! Define the ERROR_LIST macro

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!

LITERAL
    BAS$K_FAC_NO = 26;				! The facility code number for BASIC

!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    LIB$SCOPY_R_DX;				! copy a string


GLOBAL ROUTINE ERRTXT (			! get error info
	CODE,
						! BASIC error code
	VALUE,
						! 32-bit error code
	NAMLEN,
						! length of mnemonic
	NAME,
						! mnemonic
	TXTLEN,
						! length of text
	TEXT					! text of error message
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Return the 32-bit condition value, mnemonic and text of a BASIC
!	error code to a FORTRAN program.
!
! FORMAL PARAMETERS:
!
!	CODE.rl.r	The BASIC-PLUS-2 error code.  The codes and
!			their meanings are listed in file BASERRMSG.REQ.
!	VALUE.wl.r	The VAX/VMS condition value corresponding to
!			the BASIC error code.
!	NAMLEN.wl.r	The length of the VAX/VMS mnemonic for the
!			condition value.
!	NAME.wt.d	The VAX/VMS mnemonic for the condition value.
!			(Length as given above.)
!	TXTLEN.wl.r	The length of the text corresponding to the
!			BASIC error code.
!	TEXT.wt.d	The text corresponding to the BASIC error code.
!			(Length as given above.)
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	Always success (SS$_NORMAL)
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN
!+
! Define the severity code for each possible error.
!-

    MACRO
	ERR (NUMBER, CODE, TEXT, SEVERITY, SYSTEM_HANDLING) =
	(%IF (%IDENTICAL (SEVERITY, WARNING)) %THEN STS$K_WARNING %ELSE
	%IF (%IDENTICAL (SEVERITY, SUCCESS)) %THEN STS$K_SUCCESS %ELSE
	%IF (%IDENTICAL (SEVERITY, ERROR)) %THEN STS$K_ERROR %ELSE
	%IF (%IDENTICAL (SEVERITY, INFO)) %THEN STS$K_INFO %ELSE
	%IF (%IDENTICAL (SEVERITY, SEVERE)) %THEN STS$K_SEVERE %ELSE
	257 %FI %FI %FI %FI %FI) 
    %;

    BIND
	ERR_SEVERITY = UPLIT BYTE(ERROR_LIST) : VECTOR [256, BYTE];

    UNDECLARE %QUOTE
	ERR;

!+
! Define the text of each message.
!-

    MACRO
	ERR (NUMBER, CODE, TEXT, SEVERITY, SYSTEM_HANDLING) =
	UPLIT (%ASCIZ TEXT)
    %;

    BIND
	MESSAGE_TEXT = UPLIT(ERROR_LIST) : VECTOR [256];

    UNDECLARE %QUOTE
	ERR;

!+
! Define the length of each message.
!-

    MACRO
	ERR (NUMBER, CODE, TEXT, SEVERITY, SYSTEM_HANDLING) =
	%CHARCOUNT (TEXT)
    %;

    BIND
	MESSAGE_LEN = UPLIT(ERROR_LIST) : VECTOR [256];

    UNDECLARE %QUOTE
	ERR;

!+
! Define the name of each message.
!-

    MACRO
	ERR (NUMBER, CODE, TEXT, SEVERITY, SYSTEM_HANDLING) =
	UPLIT (%ASCIZ %STRING (CODE))
    %;

    BIND
	NAME_TEXT = UPLIT(ERROR_LIST) : VECTOR [256];

    UNDECLARE %QUOTE
	ERR;

!+
! Define the length of each name (will be 3, 6 or 9).
!-

    MACRO
	ERR (NUMBER, CODE, TEXT, SEVERITY, SYSTEM_HANDLING) =
	%CHARCOUNT (CODE)
    %;

    BIND
	NAME_LEN = UPLIT(ERROR_LIST) : VECTOR [256];

    UNDECLARE %QUOTE
	ERR;

    MAP
	VALUE : REF BLOCK [4, BYTE];		! 32-bit VAX/VMS condition value

!+
! Convert the BASIC error code to a 32-bit VAX/VMS error code.
! Conversion is done by copying the BASIC error number to the
! code field, setting the severity field based on the entry in
! the severity table for the code, and setting the facility
! to BAS$K_FAC_NO.  The facility specific bit is also set.
!-
    .VALUE = 0;
    VALUE [STS$V_SEVERITY] = .ERR_SEVERITY [..CODE];
    VALUE [STS$V_CODE] = ..CODE;
    VALUE [STS$V_FAC_SP] = 1;
    VALUE [STS$V_FAC_NO] = BAS$K_FAC_NO;
!+
! Copy the message text to the caller's descriptor.
!-
    LIB$SCOPY_R_DX (MESSAGE_LEN [..CODE], .MESSAGE_TEXT [..CODE], .TEXT);
!+
! Copy the message name to the caller's descriptor.
!-
    LIB$SCOPY_R_DX (NAME_LEN [..CODE], .NAME_TEXT [..CODE], .NAME);
!+
! Also return the lengths.
!-
    .NAMLEN = .NAME_LEN [..CODE];
    .TXTLEN = .MESSAGE_LEN [..CODE];
!+
! All done.
!-
    RETURN (SS$_NORMAL);
    END;					! of ERRTXT

END

ELUDOM
