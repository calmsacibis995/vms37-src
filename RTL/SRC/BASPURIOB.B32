MODULE BAS$$PUR_IO_BUF (			! Purge I/O buffer for a file.
		IDENT = '1-007'			! File: BASPURIOB.B32
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:
!
! ABSTRACT:
!
!	This module contains routines which will check the LUN indicated by R11
!	and print the contents of the associated I/O buffer if there is valid
!	data in the buffer.  These routines are intended to be called before
!	a file is closed (explicitly or implicitly at end of program) or if
!	an error occurs during an output element transmit.
!
! ENVIRONMENT: User mode - AST reentrant
!
! AUTHOR: Donald G. Petersen, CREATION DATE: 22-Jan-79
!
! MODIFIED BY:
!
! 	DGP, : VERSION 1-01
! 1-001	- original
! 1-002	- Use 32-bit addresses for externals.  JBS 27-JAN-1979
! 1-003	- Change entry point names so we have two: one for CLOSE
!	   and one for error handling.  JBS for DGP 07-MAR-1979
! 1-004 - Make PUR_IO_ERR purge the terminal on unit zero.  DGP 07-Mar-79
! 1-005	- Remove references to BAS$ routines.  JBS 10-MAY-1979
! 1-006	- Change from an OTS routine to a BAS routine, since FORTRAN
!	   does not need to purge I/O buffers.  JBS 20-AUG-1979
! 1-007	- Don't purge virtual arrays; it is quite complex, and CLOSE
!	   will do it.  JBS 30-AUG-1979
!--

!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!

REQUIRE 'RTLIN:OTSLNK';				! define all linkages

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    BAS$$PUR_IO_ERR : NOVALUE,			! Purge outstanding output buffer
    						! following an error
    BAS$$PUR_IO_CLO : CALL_CCB NOVALUE;		! Purge outstanding output buffer

						! during a close
!
! INCLUDE FILES:
!

REQUIRE 'RTLML:OTSLUB';				! I/O statement block

REQUIRE 'RTLIN:RTLPSECT';			! Define DECLARE_PSECTS macro

REQUIRE 'RTLIN:BASIOERR';			! Define I/O error symbols

LIBRARY 'RTLSTARLE';				! STARLET library

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!

LITERAL
    K_CR = %X'0D',				! ASCII CR
    K_NULL = %X'00',				! ASCII NUL
    K_LF = %X'0B';				! ASCII LF

!
! PSECT declarations
!
DECLARE_PSECTS (BAS);				! Put this in BAS psect
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    BAS$$CB_PUSH : JSB_CB_PUSH,			! Load register CCB
    BAS$$CB_POP : JSB_CB_POP NOVALUE,		! Done with register CCB
    BAS$$NEXT_LUN : NOVALUE,			! Get next logical unit number
    BAS$$STOP_IO : NOVALUE;			! Signal fatal BASIC I/O error


GLOBAL ROUTINE BAS$$PUR_IO_CLO 			! Purge the contents of an I/O buffer
    : CALL_CCB NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine will PUT the contents of the buffer associated with the LUN
!	passed to it if the buffer has valid data in it.  This routine is expected
!	to aid in closing a file either implicitly or explicitly if the last lan-
!	guage to access the file has the Basic semantics where an output record
!	may be continued across several output statements.  Therefore, an output
!	buffer may exist which has valid data in it which should be printed before
!	a program finishes executing.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	LUB$V_OUTBUF_DR		Flag to indicate the output buffer has valid
!				data in it
!	LUB$W_LUN		LUN number
!
! IMPLICIT OUTPUTS:
!
!	LUB$V_OUTBUF_DR		Flag to indicate the output buffer has valid
!	LUB$B_BAS_VFC2		'post' carriage control for PRN file format
!				data in it
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    EXTERNAL REGISTER
	CCB : REF BLOCK [, BYTE];

    IF (.CCB [LUB$V_OUTBUF_DR] AND (.CCB [LUB$B_ORGAN] NEQ LUB$K_ORG_VIRTU))
    THEN
	BEGIN
!+
! Write out the buffer.  This invloves a call to RMS.
!-
	CCB [RAB$W_RSZ] = .CCB [LUB$A_BUF_PTR] - .CCB [LUB$A_RBUF_ADR];
	CCB [RAB$L_RBF] = .CCB [LUB$A_RBUF_ADR];
	CCB [LUB$V_OUTBUF_DR] = 0;

	IF ( NOT $PUT (RAB = .CCB))
	THEN
	    BEGIN

	    WHILE (.CCB [RAB$L_STS] EQL RMS$_RSA) DO
		BEGIN
		$WAIT (RAB = .CCB);
		$PUT (RAB = .CCB);
		END;

	    IF ( NOT .CCB [RAB$L_STS]) THEN BAS$$STOP_IO (BAS$K_IOERR_REC);

	    END;

	CCB [LUB$B_BAS_VFC1] = K_LF;
	CCB [LUB$B_BAS_VFC2] = K_NULL;
!+
! Initialize the record buffer.
!-
	CCB [LUB$A_BUF_PTR] = .CCB [LUB$A_RBUF_ADR];
	CCB [LUB$A_BUF_END] = .CCB [LUB$A_RBUF_ADR] + .CCB [LUB$W_RBUF_SIZE];
	CCB [LUB$L_PRINT_POS] = 0;
	END;

    RETURN;
    END;					!End of BAS$$PUR_IO_CLO


GLOBAL ROUTINE BAS$$PUR_IO_ERR 			! Purge terminal I/O
    : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine will PUT the contents of any terminal buffer.
!	It is used just before printing an error message to be sure that
!	the message appears after any output produced before the error
!	condition.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	LUB$V_OUTBUF_DR		Flag to indicate the output buffer has valid
!				data in it
!
! IMPLICIT OUTPUTS:
!
!	LUB$V_OUTBUF_DR		Flag to indicate the output buffer has valid
!	LUB$B_BAS_VFC2		'post' carriage control for PRN file format
!				data in it
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    GLOBAL REGISTER
	CCB = K_CCB_REG : REF BLOCK [, BYTE];

    LOCAL
	FLAG,
	LUN;

!+
! Scan through all logical units, purging the ones OPEN to a terminal.
!-
    FLAG = 0;

    DO
	BEGIN
!+
! Get the next logical unit number.
!-
	BAS$$NEXT_LUN (FLAG, LUN);

	IF (.FLAG NEQ 0)
	THEN
	    BEGIN
!+
! LUN is the next logical unit number.  If the file it represents is
! open to a terminal, purge it.
!-
	    BAS$$CB_PUSH (.LUN, LUB$K_ILUN_MIN);

	    IF (.CCB [LUB$V_OPENED] AND .CCB [LUB$V_UNIT_0] AND .CCB [LUB$V_FORCIBLE])
	    THEN
		BAS$$PUR_IO_CLO ();

	    BAS$$CB_POP ();
	    END;

	END
    UNTIL (.FLAG EQL 0);

    RETURN;
    END;					!End of BAS$$PUR_IO_ERR

END						!End of module - BAS$$PUR_IO_BUF

ELUDOM
