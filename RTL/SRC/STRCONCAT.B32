MODULE STR$CONCAT (			! Concatenate several strings

		IDENT = '1-015'	! File: STRCONCAT.B32	Edit: RKR1015

		  ) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY: String support library
!
! ABSTRACT:
!
!	This module takes up to 254 input strings and concatenates
!	them into a result string.  The strings can be of any supported 
!	class and data type.
!
! ENVIRONMENT: VAX-11 User mode
!
! AUTHOR: R. Will, CREATION DATE: 12-Feb-79
!
! MODIFIED BY:
!
! R. Will, 12-Feb-79 : VERSION 01
!
! 1-001	- Original.
! 1-002	- Add multiple input strings (up to 254) to the CALL
!	   entry point.  JBS 19-MAR-1979
! 1-003	- Change facility name to STR.  JBS 19-MAR-1979
! 1-004	- Make several corrections based on the code review.  
!	  JBS 09-APR-1979
! 1-005	- Don't allow a concatenation to get longer than 65535 bytes,
!	  the limit of string lengths in the VAX architecture.
!	  JBS 09-APR-1979
! 1-006	- Use the new STR error codes.  JBS 16-MAY-1979
! 1-007	- Don't return truncate status unless the result length is less
!	  than the sum of the lengths of the sources.  JBS 02-JUL-1979
! 1-008	- Correct some typos in comments.  JBS 30-JUL-1979
! 1-009	- Remove BAS$CONCAT, it gets its own module, since it must 
!	  signal.  JBS 18-OCT-1979
! 1-010	- Add code for string interlock.  JBS 01-NOV-1979
! 1-011	- Convert to using the string macros to doing interlocks.
!	  JBS 06-NOV-1979
! 1-012 - String speedup, called routines don't signal.  RW  10-Jan-1980
! 1-013 - Extend to recognize additional classes of descriptors by
!	  using $STR$GET_LEN_ADDR to extract length and address from
!	  descriptors.  Remove string interlocking code.
!	  RKR 15-APR-1981
! 1-014 - Speed up code.  RKR 7-OCT-1981.
! 1-015 - Use $STR$SIGNAL_FATAL instead of $STR$CHECK_STATUS.
!	  RKR 18-NOV-1981.
!--

!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE 
		(EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!

REQUIRE 'RTLIN:STRLNK';		! Use require file with string linkages

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    STR$CONCAT;			! Concatenate two or more strings

!
! INCLUDE FILES:
!

REQUIRE 'RTLIN:RTLPSECT';	! Declare PSECTS code

REQUIRE 'RTLIN:STRMACROS';	! use string macros to write code

LIBRARY 'RTLSTARLE';		! STARLET library for macros and symbols

!
! MACROS: NONE
!
!
! EQUATED SYMBOLS:
!
!	NONE
!
! PSECT DECLARATIONS
!

DECLARE_PSECTS (STR);		! Declare psects for STR$ facility

!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    LIB$STOP;			     		! Signal fatal errors

!+
! The following are the error messages used in this module:
!-

EXTERNAL LITERAL
    STR$_NORMAL,			! Success
    STR$_STRIS_INT,			! String is interlocked
    STR$_ILLSTRCLA,			! Illegal string class
    STR$_TRU,				! Truncation
    STR$_FATINTERR,			! Fatal internal error
    STR$_STRTOOLON,			! String too long
    STR$_WRONUMARG;			! Wrong number of arguments


GLOBAL ROUTINE STR$CONCAT (		! Concatenate strings

	DEST_DESC		! pointer to destination descriptor

			  ) =

!++
! FUNCTIONAL DESCRIPTION
!
!	This routine takes up to 254 source strings of any supported 
!	DTYPE and CLASS, concatenates them, and assigns that value to 
!	the destination string.
!
! FORMAL PARAMETERS:
!
!	DEST_DESC.wt.dx		Pointer to destination descriptor
!	[INPUT].rt.dx		Pointer to input string descriptor.  
!				There can be up to 254 of these.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION CODES:
!
!	SS$_NORMAL	All of the characters in the input strings were
!			copied into the destination string.
!	STR$_TRU	One or more input characters were not copied.
!			This can only happen when the destination is a
!			string having fixed-length semantics.
!
! SIDE EFFECTS:
!
!	May allocate storage for the destination.
!	This routine signals if allocation fails (STR$_INSVIRMEM)
!	or a descriptor is bad (STR$_ILLSTRCLA).  An attempt to create a
!	dynamic string longer than 65535 bytes signals STR$_STRTOOLON,
!	STR$_FATINTERR if the debug switch is set in 
!	STRMACROS and there is some internal corruption, and 
!	STR$_WRONUMARG if there are not at least 2 arguments to this 
!	routine.
!
!--

    BEGIN

    BUILTIN
	ACTUALPARAMETER,
	ACTUALCOUNT;

    MAP
	DEST_DESC : REF $STR$DESCRIPTOR;

    LITERAL
	MAX_SIZE	= 65535,	! largest string we can handle
	FIRST_INPUT_ARG = 2;		! Argument number of the first 
					! input 
					! string

    LOCAL
	OUT_LEN,		! original length of destination string
	OUT_ADDR,		! address of 1st byte of original
				! destination string
	RETURN_STATUS,		! status from alloc and dealloc
	OVERLAP_FLAG,		! =1 if input strings overlap dest
	TOTAL_LENGTH,		! Sum of bytes in sources
	RESULT_LENGTH,		! Number of bytes in destination
	RESULT_CLASS;		! Descriptor class of destination

!+
! This routine contains a great deal of repetitious code.  This is done
! deliberately so that each class of destination string is handled
! as efficiently as possible with a minimal amount of invocations of
! common code.  As an overall guide to the following pages of code,
! note the overall structure of the code, as indicated below.
!
!	-----
!	|
!	| Loop to count up the total lengths of all the input strings
!	| and to detect whether any of the inputs overlap with the
!	| output area.  If overlaps exist, we must do concatenation
!	| into a temporary area, then move temporary area to true
!	| destination area.  If no overlap, copying directly into
!	| destination area will occur.
!	|
!	-----
!
!	----- CASE on class of output descriptor
!	|
!	| -- Classes S, Z, A, NCA and SD.  These classes have
!	|    fixed-length string semantics and are copied with
!	!    trailing padding if necessary.  Those that don't fit
!	|    return STR$_TRU
!	|
!	|	-----
!	|	|
!	|	| Code for fixed-length semantic strings, where one or
!	|	| more sources overlap destination string.
!	|	|
!	|	| or
!	|	|
!	|	| Code for fixed-length semantic strings, where there
!	|	| is no overlap.
!	|	|
!	|	-----
!	|
!	| -- Class D.  This class of descriptor has
!	|    dynamic-length string semantics and is copied with
!	!    no trailing padding.  Those that don't fit within 65K
!	|    signal STR$_TOOLON.
!	|
!	|	-----
!	|	|
!	|	| Code for dynamic-length semantic strings, where one or
!	|	| more sources overlap destination string.
!	|	|
!	|	| or
!	|	!
!	|	| Code for dynamic-length semantic strings, where there
!	|	| is no overlap.
!	|	|
!	|	-----
!	|
!	| -- Class VS.  This class of descriptor has
!	|    varying-length string semantics and is copied with
!	!    no trailing padding.  Those that don't fit within 
!	|    DSC$W_MAXSTRLEN return STR$_TRU.
!	|
!	|	-----
!	|	|
!	|	| Code for varying-length semantic strings, where one or
!	|	| more sources overlap destination string.
!	|	|
!	|	| or
!	|	!
!	|	| Code for varying-length semantic strings, where there
!	|	| is no overlap.
!	|	|
!	|	-----
!	-----

!+
! Check for a proper number of arguments and preset return status.
!-

    IF (ACTUALCOUNT () LSS FIRST_INPUT_ARG)
    THEN
	BEGIN
	!+
	! Build a local fixed-length descriptor pointing to name of this
	! routine and use it to signal STR$_WRONUMARG.
	!-
	LOCAL
	    ROUT_NAME_DESC : $STR$DESCRIPTOR;

	ROUT_NAME_DESC [DSC$W_LENGTH] = 10 ;
	ROUT_NAME_DESC [DSC$B_DTYPE] = DSC$K_DTYPE_T;
	ROUT_NAME_DESC [DSC$B_CLASS] = DSC$K_CLASS_S;
	ROUT_NAME_DESC [DSC$A_POINTER] = UPLIT (%ASCII'STR$CONCAT');
	LIB$STOP (STR$_WRONUMARG, 2, ACTUALCOUNT (), ROUT_NAME_DESC);
	END;

    RETURN_STATUS = 1 ;		! Assume success to follow

!+
! Extract length and address of destination string.
!-
    $STR$GET_LEN_ADDR (DEST_DESC, OUT_LEN, OUT_ADDR ) ;

!+
! Check each source argument for overlapping the destination.
! Note that the code below will sometimes decide we have overlap when 
! we do not: if the destination string is fixed-length and shorter 
! than the sum of the sources, we will reach beyond the end of the 
! destination string, and may run into a source string.  The consequent
! decrease in speed (because of using a temporary descriptor needlessly)
! is more than made up for by the improved speed of the scanning loop 
! below.
!-
    OVERLAP_FLAG = 0;
    TOTAL_LENGTH = 0;

    !+
    ! Now step through all the input descriptors
    !-
    INCR ARG_NO FROM FIRST_INPUT_ARG TO ACTUALCOUNT () DO
	BEGIN

	LOCAL
	    IN_LEN,			! length of Nth input string
	    IN_ADDR,			! addr of 1st byte of Nth string
	    SRC_DESC : REF $STR$DESCRIPTOR;	! addr of Nth input
						! string descriptor

	SRC_DESC = ACTUALPARAMETER (.ARG_NO);	! get Nth descr address

	!+
	! Extract length and address of this input string.
	!-
	$STR$GET_LEN_ADDR (SRC_DESC, IN_LEN, IN_ADDR) ;

	TOTAL_LENGTH = .TOTAL_LENGTH + .IN_LEN;

	!+
	! If this string overlaps destination then set OVERLAP.
	! In either case, continue looping through all sources so that 
	! we know total length involved.
	!-
	IF ($STR$OVERLAP ( .IN_ADDR, .IN_LEN, .OUT_ADDR, .TOTAL_LENGTH))
	THEN
	    OVERLAP_FLAG = 1;

	END;		! of total length of sources computation and
			! overlap detection
!+
! The remainder of the algorithm is different for each class of output 
! string descriptor.
!-
    RESULT_CLASS = .DEST_DESC [DSC$B_CLASS];	! Class of output desc

    CASE .RESULT_CLASS FROM DSC$K_CLASS_Z TO DSC$K_CLASS_VS OF
	SET


	[DSC$K_CLASS_Z, 		! Unspecific class (assume S)
	 DSC$K_CLASS_S,			! Fixed length string
	 DSC$K_CLASS_A,			! Array
	 DSC$K_CLASS_NCA,		! Non-contiguous array
	 DSC$K_CLASS_SD] :		! Scaled decimal
!+
! The destination string has fixed-length semantics.  Copy only as 
! much of the sources into it as its length allows.  If its storage 
! overlaps any of the source strings, do the concatenation into a 
! temporary string and then copy back to the destination string.
! If sum of source lengths less than destination length, pad with
! fill character.
!-

	    BEGIN			! Class_S, _Z, _A, _NCA, _SD
	    IF (.OVERLAP_FLAG)
	    THEN
		BEGIN

		LOCAL
		    CHR_PTR,		! Variable pointer into output
		    TEMP_DESC : $STR$DESCRIPTOR;

		RETURN_STATUS = 
		    $STR$ALLOC_TMP (MIN (MAX_SIZE, .TOTAL_LENGTH), 
				    TEMP_DESC);

		!+
		! If allocate didn't work, don't continue the 
		! concatenate
		!-

		IF .RETURN_STATUS
		THEN
		    BEGIN
		    CHR_PTR = .TEMP_DESC [DSC$A_POINTER]; ! init to
							  ! start of
							  ! temp output

		    INCR ARG_NO FROM FIRST_INPUT_ARG TO ACTUALCOUNT() DO
			BEGIN	! copying loop

			LOCAL
			    IN_LEN,	! length of Nth input string
			    IN_ADDR,	! address of 1st byte of Nth
					! input string

			    SRC_DESC : REF $STR$DESCRIPTOR;

			!+
			! Get Nth input descriptor address
			!-
			SRC_DESC = ACTUALPARAMETER (.ARG_NO);

			!+
			! Extract length and address of this input 
			! string.  There is no need to check status on 
			! these calls.  If there was anything
			! wrong with the input descriptors, we would 
			! have signaled our way out of the loop where 
			! we added up the total lengths of the inputs.
			!-
			$STR$GET_LEN_ADDR (SRC_DESC, IN_LEN, IN_ADDR) ;

			CHR_PTR = CH$MOVE (.IN_LEN, .IN_ADDR, .CHR_PTR);
			END;	! copying loop

		    !+
		    ! Now copy from the temporary descriptor to the real
		    ! destination.  The destination may be shorter than
		    ! TOTAL_LENGTH, in which case fewer characters will
		    ! be copied than were concatenated, or it may be 
		    ! longer, in which case the destination will be 
		    ! padded with blanks.
		    !-
		    CH$COPY ( MIN (MAX_SIZE, .TOTAL_LENGTH),
			      .TEMP_DESC [DSC$A_POINTER],
			      STR$K_FILL_CHAR,
			      .OUT_LEN,
			      .OUT_ADDR);

		    RETURN_STATUS = $STR$DEALOC_TMP (TEMP_DESC);
		    END;	! of concatenation and copy via temp

		    !+
		    ! Record actual size of constructed output string
		    ! for later evaluation of what status to return.
		    !-
		    RESULT_LENGTH = .OUT_LEN ;
		END		! of overlap subcase

	    ELSE
		BEGIN
		!+
		! This is the case of a fixed-length destination which 
		! does not overlap any of the sources.  We can copy 
		! directly into the destination space.
		!-

		LOCAL
		    CHR_PTR,
		    CHARS_MOVED,
		    ARG_NO;

		CHR_PTR = .OUT_ADDR;	! init to 1st byte of dest
		CHARS_MOVED = 0;
		ARG_NO = FIRST_INPUT_ARG;

		WHILE (.CHARS_MOVED NEQ .OUT_LEN) DO
		    BEGIN
		    !+
		    ! There is room for more characters in the 
		    ! destination string.  Copy as much of the next 
		    ! input string as will fit.
		    !-

		    LOCAL
			IN_LEN,		! length of Nth input string
			IN_ADDR, 	! address of 1st byte of Nth
					! input string
			CHARS_LEFT;

		    CHARS_LEFT = .OUT_LEN - .CHARS_MOVED;

		    IF (.ARG_NO GTR ACTUALCOUNT ())
		    THEN
			BEGIN
			!+
			! We have exhausted the parameters, fill the 
			! remainder of the destination string with 
			! blanks.
			!-
			CH$FILL (STR$K_FILL_CHAR, .CHARS_LEFT, .CHR_PTR);
			CHARS_MOVED = .CHARS_MOVED + .CHARS_LEFT;
			END

		    ELSE

			BEGIN		! copy of one string
			!+
			! We have another input string.  Copy it into 
			! the destination string, or as much of it as 
			! will fit.
			!-

			LOCAL
			    SRC_DESC : REF $STR$DESCRIPTOR;

			SRC_DESC = ACTUALPARAMETER (.ARG_NO);
			!+
			! Extract length and address of this input 
			! string.  There is no need to check status on 
			! these calls.  If there was anything
			! wrong with the input descriptors, we would 
			! have signaled our way out of the loop where 
			! we added up the total lengths of the inputs.
			!-
			$STR$GET_LEN_ADDR (SRC_DESC, IN_LEN, IN_ADDR) ;

			CHR_PTR = CH$MOVE ( MIN (.IN_LEN, .CHARS_LEFT),
					   .IN_ADDR, .CHR_PTR);

			CHARS_MOVED = .CHARS_MOVED +
					    MIN (.IN_LEN, .CHARS_LEFT);

			ARG_NO = .ARG_NO + 1;
			END;		! copy of one string

		    END;		! of WHILE loop

		    !+
		    ! Record the actual length of the output string
		    ! for later evaluation of the status to be returned.
		    !-
		    RESULT_LENGTH = .CHARS_MOVED ;

		END;			! of non-overlapped
					! concatenation operation

	    END;			! of Class_S, _Z, _A, _NCA, _SD

	[DSC$K_CLASS_D] :
!+
! If we must reallocate the destination string (because the old string
! was not as long as the sum of the lengths of the source strings)
! or if the source strings overlap the destination string (which means
! that we are concatenating a substring of the result string, and
! therefore must not store into the destination string until we finish
! fetching all of the source strings) then we must use a temporary
! descriptor to hold the concatenation.  This is important for the
! reallocation case so that an AST will see, when looking at
! any particular character position of the string, either the old
! character or the new one.  The AST will never see, for example,
! an empty string into which we have not yet copied the first input
! string.
!-
	    BEGIN

	    IF (.OVERLAP_FLAG
		OR
		$STR$NEED_ALLOC ( MIN (MAX_SIZE, .TOTAL_LENGTH),
				  $STR$DYN_AL_LEN (DEST_DESC))
		OR
		(.TOTAL_LENGTH GTR MAX_SIZE))
	    THEN
		BEGIN

		LOCAL
		    TEMP_DESC : $STR$DESCRIPTOR,
		    CHR_PTR,
		    CHARS_MOVED,
		    CHARS_LEFT;

		!+
		! Construct a dynamic string descriptor and try to 
		! allocate some space to it.
		!-
		TEMP_DESC [DSC$W_LENGTH] = 0;
		TEMP_DESC [DSC$B_DTYPE] = DEST_DESC [DSC$B_DTYPE] ;
		TEMP_DESC [DSC$B_CLASS] = DSC$K_CLASS_D ;
		TEMP_DESC [DSC$A_POINTER] = 0;
		RETURN_STATUS = $STR$ALLOCATE ( 
					MIN (MAX_SIZE, .TOTAL_LENGTH), 
					TEMP_DESC);

		!+
		! If the allocate did not succeed then don't proceed 
		! with concatenate.
		!-

		IF .RETURN_STATUS
		THEN
		    BEGIN
		    !+
		    ! Init pointer to output area to first byte
		    ! allocated to temp descriptor.
		    !-
		    CHR_PTR = .TEMP_DESC [DSC$A_POINTER] ;
		    CHARS_MOVED = 0;
		    CHARS_LEFT = MIN (MAX_SIZE, .TOTAL_LENGTH);

		    INCR ARG_NO FROM FIRST_INPUT_ARG TO ACTUALCOUNT() DO
			BEGIN

			LOCAL
			    IN_LEN,	! length of Nth input string
			    IN_ADDR,	! addr of 1st byte of Nth input
					! string
			    SRC_DESC : REF $STR$DESCRIPTOR;

			SRC_DESC = ACTUALPARAMETER (.ARG_NO);

			!+
			! Extract length and address of this input 
			! string.  There is no need to check status on 
			! these calls.  If there was anything
			! wrong with the input descriptors, we would 
			! have signaled our way out of the loop where 
			! we added up the total lengths of the inputs.
			!-
			$STR$GET_LEN_ADDR (SRC_DESC, IN_LEN, IN_ADDR) ;

			IF (.CHARS_LEFT GTR 0)
			THEN
			    BEGIN

			    LOCAL
				LEN;

			    LEN = MIN (.IN_LEN, .CHARS_LEFT);
			    CHR_PTR = CH$MOVE ( 
					      .LEN, .IN_ADDR, .CHR_PTR);

			    CHARS_MOVED = .CHARS_MOVED + LEN;
			    CHARS_LEFT = .CHARS_LEFT - .LEN;
			    END;

			END;		! concatenate into temp

		    !+
		    ! Now exchange our temporary descriptor with the 
		    ! original destination descriptor, thus changing it
		    ! from pointing to its old string to pointing to 
		    ! the concatenation.
		    !-
		    $STR$EXCH_DESCS (TEMP_DESC, DEST_DESC);

		    !+
		    ! Now free the space which was described by the 
		    ! destination descriptor on entry to this routine, 
		    ! since the caller no longer has access to it.
		    !-
		    RETURN_STATUS = $STR$DEALLOCATE (TEMP_DESC);

		    END;		! concatenate into temp and
					! exchange of temp and dest

		END			! of overlapped subcase

	    ELSE

		BEGIN
		!+
		! There is no overlap and the destination does not need
		! to be reallocated.  We can use the more efficient 
		! algorithm of concatenating directly into the 
		! destination string.
		!-

		LOCAL
		    CHR_PTR;

		CHR_PTR = .DEST_DESC [DSC$A_POINTER];

		INCR ARG_NO FROM FIRST_INPUT_ARG TO ACTUALCOUNT () DO
		    BEGIN

		    LOCAL
			IN_LEN,		! length of Nth input string
			IN_ADDR,	! addr of 1st byte of Nth input
					! string
			SRC_DESC : REF $STR$DESCRIPTOR;

		    SRC_DESC = ACTUALPARAMETER (.ARG_NO);

		    !+
		    ! Extract length and address of this input 
		    ! string.  There is no need to check status on 
		    ! these calls.  If there was anything
		    ! wrong with the input descriptors, we would 
		    ! have signaled our way out of the loop where 
		    ! we added up the total lengths of the inputs.
		    !-
		    $STR$GET_LEN_ADDR (SRC_DESC, IN_LEN, IN_ADDR) ;

		    CHR_PTR = CH$MOVE ( .IN_LEN, .IN_ADDR, .CHR_PTR);

		    END;	! copy directly into destination

		!+
		! The destination descriptor may (if it is a "short 
		! string") have been longer than the sum of the source 
		! lengths.  If so, shorten it.
		!-
		DEST_DESC [DSC$W_LENGTH]= MIN (MAX_SIZE, .TOTAL_LENGTH);

		END;		! of non-overlapped subcase

		!+
		! Record length of output string constructed for later
		! evaluation of what status to return.
		!-
		RESULT_LENGTH = .DEST_DESC [DSC$W_LENGTH] ;

	    END;		! of Class_D

	[DSC$K_CLASS_VS]:
!+
! The destination string has varying-length string semantics.   Copy 
! only as much of the sources into it as its DSC$W_MAXSTRLEN length 
! allows.  If its storage overlaps any of the source strings, do the 
! concatenation into a temporary string and then copy back to the 
! destination string.
! If sum of source lengths is less than or equal to DSC$W_MAXSTRLEN, 
! only its CURLEN field needs to be rewritten.  If sum of sources is 
! greater than DSC$W_MAXSTRLEN field, STR$_TRU is returned.
!-

	    BEGIN			! Class_VS

	    !+
	    ! Real length of a Class_VS destination is contained in
	    ! the MAXSTRLEN field.  Readjust our record of what can
	    ! be written into.
	    !-
	    OUT_LEN = .DEST_DESC [DSC$W_MAXSTRLEN] ;

	    IF (.OVERLAP_FLAG)
	    THEN
		BEGIN

		LOCAL
		    CHR_PTR,		! Variable pointer into output
		    TEMP_DESC : $STR$DESCRIPTOR;

		RETURN_STATUS = 
		    $STR$ALLOC_TMP (MIN (MAX_SIZE, .TOTAL_LENGTH), 
				    TEMP_DESC);

		!+
		! If allocate didn't work, don't continue the 
		! concatenate
		!-

		IF .RETURN_STATUS
		THEN
		    BEGIN
		    CHR_PTR = .TEMP_DESC [DSC$A_POINTER]; ! init to
							  ! start of
							  ! temp output

		    INCR ARG_NO FROM FIRST_INPUT_ARG TO ACTUALCOUNT() DO
			BEGIN	! INCR copying loop

			LOCAL
			    IN_LEN,	! length of Nth input string
			    IN_ADDR,	! address of 1st byte of Nth
					! input string

			    SRC_DESC : REF $STR$DESCRIPTOR;

			!+
			! Get Nth input descriptor address
			!-
			SRC_DESC = ACTUALPARAMETER (.ARG_NO);

			!+
			! Extract length and address of this input 
			! string.  There is no need to check status on 
			! these calls.  If there was anything
			! wrong with the input descriptors, we would 
			! have signaled our way out of the loop where 
			! we added up the total lengths of the inputs.
			!-
			$STR$GET_LEN_ADDR (SRC_DESC, IN_LEN, IN_ADDR) ;

			CHR_PTR = CH$MOVE (.IN_LEN, .IN_ADDR, .CHR_PTR);
			END;	! INCR copying loop

		    !+
		    ! Now copy from the temporary descriptor to the real
		    ! destination.  The destination may be shorter than
		    ! TOTAL_LENGTH, in which case fewer characters will
		    ! be copied than were concatenated.
		    !-
		    CH$MOVE ( MIN (.DEST_DESC [DSC$W_MAXSTRLEN],
				   .TOTAL_LENGTH),
			      .TEMP_DESC [DSC$A_POINTER],
			      .OUT_ADDR);

		    RETURN_STATUS = $STR$DEALOC_TMP (TEMP_DESC);

		    END;	! of concatenation and copy via temp

		    !+
		    ! Record actual size of output string written for
		    ! later evaluation of what status to return.
		    !-
		    RESULT_LENGTH = MIN ( .DEST_DESC [DSC$W_MAXSTRLEN],
					  .TOTAL_LENGTH) ;

		END		! of overlap subcase

	    ELSE

		BEGIN
		!+
		! This is the case of a varying_length string 
		! destination which does not overlap any of the sources.
		! We can copy directly into the destination space.
		!-

		LOCAL
		    CHR_PTR,
		    CHARS_MOVED,
		    ARG_NO;

		CHR_PTR = .OUT_ADDR;	! init to 1st byte of dest
		CHARS_MOVED = 0;
		ARG_NO = FIRST_INPUT_ARG;

		WHILE (.CHARS_MOVED NEQ .OUT_LEN) DO
		    BEGIN
		    !+
		    ! There is room for more characters in the 
		    ! destination string.  Copy as much of the next 
		    ! input string as will fit.
		    !-

		    LOCAL
			IN_LEN,		! length of Nth input string
			IN_ADDR, 	! address of 1st byte of Nth
					! input string
			CHARS_LEFT;

		    CHARS_LEFT = .OUT_LEN - .CHARS_MOVED;

		    IF (.ARG_NO GTR ACTUALCOUNT ())
		    THEN
			BEGIN
			!+
			! We have exhausted the parameters, fill the 
			! remainder of the destination string with 
			! blanks.
			!-
			EXITLOOP ;
			END

		    ELSE

			BEGIN		! copy of one more string
			!+
			! We have another input string.  Copy it into 
			! the destination string, or as much of it as 
			! will fit.
			!-

			LOCAL
			    SRC_DESC : REF $STR$DESCRIPTOR;

			SRC_DESC = ACTUALPARAMETER (.ARG_NO);
			!+
			! Extract length and address of this input 
			! string.  There is no need to check status on 
			! these calls.  If there was anything
			! wrong with the input descriptors, we would 
			! have signaled our way out of the loop where 
			! we added up the total lengths of the inputs.
			!-
			$STR$GET_LEN_ADDR (SRC_DESC, IN_LEN, IN_ADDR) ;

			CHR_PTR = CH$MOVE ( MIN (.IN_LEN, .CHARS_LEFT),
					   .IN_ADDR, .CHR_PTR);

			CHARS_MOVED = .CHARS_MOVED +
					    MIN (.IN_LEN, .CHARS_LEFT);

			ARG_NO = .ARG_NO + 1;
			END;		! copy of one more string

		    END;		! of WHILE loop

 		    !+
		    ! Record actual length of output string written for
		    ! later evaluation of status to be returned.
		    !-
		    RESULT_LENGTH = .CHARS_MOVED ;

		END;			! of non-overlapped
					! concatenation operation
	    !+
	    ! Adjust CURLEN field to reflect the new size of the
	    ! varying string.
	    !-
	    (.DEST_DESC [DSC$A_POINTER])<0,16> = .RESULT_LENGTH ;

	    END;			! of Class_VS

	[INRANGE, OUTRANGE] :
!+
! The class of the destination string is unknown.  Will cause an error 
! to be signaled.
!-
	    RETURN_STATUS = STR$_ILLSTRCLA;

	TES;

!+
! If any of the allocations or deallocations previously failed, or 
! illegal string class was found then signal the error.
!-
    $STR$SIGNAL_FATAL (RETURN_STATUS);	! Signal fatal error

    IF .RESULT_CLASS EQL DSC$K_CLASS_D
    THEN
	BEGIN		! special processing for dynamic semantics

	IF (.RESULT_LENGTH NEQ .TOTAL_LENGTH) THEN 
	    LIB$STOP (STR$_STRTOOLON);

	RETURN (STR$_NORMAL);		! used because bliss compiler
					!  doesn't understand routines
					!  that don't return

	END		! special processing for dynamic semantics

    ELSE		! special processing for fixed and varying
			! string semantics
	RETURN (IF (.RESULT_LENGTH GEQ .TOTAL_LENGTH) 
	    THEN 
		SS$_NORMAL 
	    ELSE 
		STR$_TRU  );

    END;				! End of STR$CONCAT

END					!End of module STR$CONCAT

ELUDOM
