MODULE BAS$CHANGE (				!
		IDENT = '1-009'			! File: BASCHANGE.B32 EDIT: PLL1009
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  BASIC-PLUS-2 Miscellaneous
!
! ABSTRACT:
!
!	This module contains routines which change a character string
!	to a list of numbers and vice-versa.
!
! ENVIRONMENT:  VAX-11 User Mode
!
! AUTHOR: John Sauter, CREATION DATE: 20-FEB-1979
!
! MODIFIED BY:
!
! 1-001	- Original.  JBS 20-FEB-1979
! 1-002	- Track changes in the virtual array support code.  JBS 03-APR-1979
! 1-003	- Continue to track changes in the virtual array support
!	   code.  JBS 04-APR-1979
! 1-004	- Change OTS$S and LIB$S to STR$.  JBS 21-MAY-1979
! 1-005	- Change the index parameters to BAS$FETCH_BFA and BAS$STORE_BFA
!	   from by reference to by value.  JBS 01-JUN-1979
! 1-006	- Use BASLNK.  JBS 26-JUN-1979
! 1-007	- Change call to STR$COPY.  JBS 16-JUL-1979
! 1-008 - BAS$CHANGE_S_NA must apply the double precision scale
!	  to double precision arrays, and BAS$CHANGE_NA_S must
!	  descale before converting to a string.  PLL 22-May-1981
! 1-009 - BAS$CHANGE_S_NA was eroneously calling BAS$FETCH_BFA to store
!	  an element in a 2 dimensional array.  PLL 18-Nov-1981
!--

!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!

REQUIRE 'RTLIN:BASLNK';				! Define virtual array linkages
REQUIRE 'RTLIN:BASFRAME';			! BSF symbols

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    BAS$CHANGE_NA_S : NOVALUE,			! Change list to string
    BAS$CHANGE_S_NA : NOVALUE,			! Change string to list
    FETCH,					! Fetch an array item
    STORE : NOVALUE;				! Store an array item

!
! INCLUDE FILES:
!

REQUIRE 'RTLIN:RTLPSECT';			! Macros for defining psects

LIBRARY 'RTLSTARLE';				! System definitions

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! PSECTS:
!
DECLARE_PSECTS (BAS);				! Declare psects for BAS$ facility
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    BAS$$STOP : NOVALUE,			! signals fatal error
    BAS$SCALE_D_R1 : BAS$SCALE_LINK NOVALUE,    ! scale  a value    
    BAS$DSCALE_D_R1 : BAS$SCALE_LINK NOVALUE,   ! descale a value
    BAS$FETCH_BFA : NOVALUE,			! Fetch an array item
    BAS$STORE_BFA : NOVALUE,			! Store an array item
    BAS$FET_FA_W_R8 : VA_JSB,			! Fetch a word
    BAS$STO_FA_W_R8 : VA_JSB NOVALUE,		! Store a word
    BAS$FET_FA_L_R8 : VA_JSB,			! Fetch a longword
    BAS$STO_FA_L_R8 : VA_JSB NOVALUE,		! Store a longword
    BAS$FET_FA_F_R8 : VA_JSB,			! Fetch a floating number
    BAS$STO_FA_F_R8 : VA_JSB NOVALUE,		! Store a floating value
    STR$GET1_DX,				! Allocate a string
    STR$COPY_DX;				! Copy a string

!+
! The following are the error codes used in this module.
!-

EXTERNAL LITERAL
    BAS$K_MAXMEMEXC : UNSIGNED (8),		! Maximum memory exceeded
    BAS$K_PROLOSSOR : UNSIGNED (8),		! Program lost, sorry
    BAS$K_DATTYPERR : UNSIGNED (8),		! Data type error
    BAS$K_ONEOR_TWO : UNSIGNED (8);		! One or two dimensions only


GLOBAL ROUTINE BAS$CHANGE_NA_S (		! Change list to string
	LIST_DESC, 				! Address of array descriptor
	STR_RESULT				! Result string
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Change the list of numbers to a string.  The first number is
!	the length of the string.
!
! FORMAL PARAMETERS:
!
!	LIST_DESC.rx.d	The list of numbers.  This may be word,
!			longword, floating or double.  It may be single-
!			or double-dimensioned.
!	STR_RESULT.wt.d	The descriptor for the string result.  It may
!			be dynamic or static.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	STR_LENGTH,
	STR_DESC : BLOCK [8, BYTE],
	STR_BUF : REF VECTOR [255, BYTE];

!+
! Get the length of the string from element zero.
!-
    STR_LENGTH = FETCH (.LIST_DESC, 0);
!+
! Build a string of that length.
!-
    STR_DESC [DSC$W_LENGTH] = 0;
    STR_DESC [DSC$B_DTYPE] = DSC$K_DTYPE_T;
    STR_DESC [DSC$B_CLASS] = DSC$K_CLASS_D;
    STR_DESC [DSC$A_POINTER] = 0;
    STR$GET1_DX (STR_LENGTH, STR_DESC);
    STR_BUF = .STR_DESC [DSC$A_POINTER];

    INCR COUNTER FROM 1 TO .STR_LENGTH DO
	STR_BUF [.COUNTER - 1] = FETCH (.LIST_DESC, .COUNTER);

!+
! Copy our string back to the caller
!-
    STR$COPY_DX (.STR_RESULT, STR_DESC);
    RETURN;
    END;					! end of BAS$CHANGE_NA_S


GLOBAL ROUTINE BAS$CHANGE_S_NA (		! Change string to list
	STR_DESC, 				! String to change
	LIST_RESULT				! Where to put result
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Change the string to a list of numbers.  The first number is
!	the length of the string.
!
! FORMAL PARAMETERS:
!
!	STR_DESC.rt.d	The string to be converted to numbers.
!	LIST_RESULT.wx.a The array of numbers to store in.  The type
!			 may be word, longword, floating or double.
!			 it may have one or two dimensions.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN
    
    MAP       
	STR_DESC : REF BLOCK [8, BYTE];

    LOCAL
	STR_BUF : REF VECTOR [255, BYTE];

!+
! Store the length of the string in element zero.
!-
    STORE (.STR_DESC [DSC$W_LENGTH], .LIST_RESULT, 0);
!+
! Copy each character of the string to an element of the array.
!-
    STR_BUF = .STR_DESC [DSC$A_POINTER];

    INCR COUNTER FROM 1 TO .STR_DESC [DSC$W_LENGTH] DO
	STORE (.STR_BUF [.COUNTER - 1], .LIST_RESULT, .COUNTER);

    RETURN;
    END;					! end of BAS$CHANGE_S_NA


ROUTINE FETCH (					! Fetch a value from an array
	ARRAY_DESC, 				! The array descriptor
	INDEX_VAL				! Index into the array
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Fetch a value from an array, given the low-order index.
!	The result is expressed as an integer.
!
! FORMAL PARAMETERS:
!
!	ARRAY_DESC.rx.d	The array from which to fetch.  It may be word,
!			longword, floating or double.  It may have one
!			or two dimensions.  It may even be a virtual
!			array!
!	INDEX_VAL.rl.v	The value of the low-order index.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	The value of the array item, expressed as an integer.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN
    
    GLOBAL REGISTER
	BSF$A_MAJOR_STG = 11,  
	BSF$A_MINOR_STG = 10,
	BSF$A_TEMP_STG = 9;

    MAP
	ARRAY_DESC : REF BLOCK [, BYTE];

!+
! First dispatch on the data type.  Only word, longword, floating and
! double are permitted.
!-

    CASE .ARRAY_DESC [DSC$B_DTYPE] FROM DSC$K_DTYPE_W TO DSC$K_DTYPE_D OF
	SET

	[DSC$K_DTYPE_W] :
!+
! This is an array of 16-bit words.  Fetch the specified one, extend it
! to a longword and return it.  The extra index will be ignored if the
! array is one-dimensional.
!-
	    RETURN (BAS$FET_FA_W_R8 (.ARRAY_DESC, .INDEX_VAL, 0));

	[DSC$K_DTYPE_L] :
!+
! This is an array of 32-bit longwords.  Return the indicated one.
!-
	    RETURN (BAS$FET_FA_L_R8 (.ARRAY_DESC, .INDEX_VAL, 0));

	[DSC$K_DTYPE_F] :
!+
! This is an array of single-precision floating point numbers.
! Fetch the indicated one, convert it to a longword, and return
! the longword.
!-
	    BEGIN

	    BUILTIN
		CVTFL;

	    LOCAL
		RESULT;

	    CVTFL (%REF (BAS$FET_FA_F_R8 (.ARRAY_DESC, .INDEX_VAL, 0)), RESULT);
	    RETURN (.RESULT);
	    END;

	[DSC$K_DTYPE_D] :
!+
! This is an array of double-precision floating point numbers.
! Fetch the indicated one, convert it to a longword, and return
! the longword.
!-
	    BEGIN

	    BUILTIN
		CVTDL;

	    LOCAL
		DOUBLE_RESULT : VECTOR [2],
		RESULT,
		DOUBLE_DESC : BLOCK [8, BYTE];

	    REGISTER
		R0=0,
		R1=1;
!+
! Build a descriptor for the double-precision value, since we cannot handle
! such things easily in BLISS.
!-
	    DOUBLE_DESC [DSC$W_LENGTH] = %UPVAL*2;
	    DOUBLE_DESC [DSC$B_DTYPE] = DSC$K_DTYPE_D;
	    DOUBLE_DESC [DSC$B_CLASS] = DSC$K_CLASS_S;
	    DOUBLE_DESC [DSC$A_POINTER] = DOUBLE_RESULT [0];
!+
! Fetch the double-precision value.
!-

	    CASE .ARRAY_DESC [DSC$B_DIMCT] FROM 1 TO 2 OF
		SET

		[1] :
		    BAS$FETCH_BFA (.ARRAY_DESC, DOUBLE_DESC, .INDEX_VAL);

		[2] :
		    BAS$FETCH_BFA (.ARRAY_DESC, DOUBLE_DESC, .INDEX_VAL, 0);

		[OUTRANGE] :
		    BAS$$STOP (BAS$K_ONEOR_TWO);
		TES;
!+
! The value was scaled before it was stored, so now descale it.
! DSCALE will return the value in R0, R1.

	     BAS$DSCALE_D_R1 (.DOUBLE_RESULT [0], .DOUBLE_RESULT [1]);
             DOUBLE_RESULT [0] = .R0;
	     DOUBLE_RESULT [1] = .R1;
!+
! Convert the value to a longword and return it.
!-
	    CVTDL (DOUBLE_RESULT [0], RESULT);
	    RETURN (.RESULT);
	    END;

	[INRANGE, OUTRANGE] :
!+
! This array descriptor is of an unsupported type.  Give a Data type error
! message.
!-
	    BAS$$STOP (BAS$K_DATTYPERR);
	TES;

!+
! In the unlikely case that the above CASE expression falls through, we must
! return something.  Return zero.
!-
    RETURN (0);
    END;					! end of FETCH

ROUTINE STORE (					! Store a value in an array
	ITEM_VAL, 				! Value of the item to store
	ARRAY_DESC, 				! The array descriptor
	INDEX_VAL				! Index into the array
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Store a value from an array, given the low-order index.
!	The value is expressed as an integer.
!
! FORMAL PARAMETERS:
!
!	ITEM_VAL.rl.v	The value of the item to store.
!	ARRAY_DESC.rx.d	The array in which to store.  It may be word,
!			longword, floating or double.  It may have one
!			or two dimensions.  It may even be a virtual
!			array!
!	INDEX_VAL.rl.v	The value of the low-order index.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    GLOBAL REGISTER
	BSF$A_MAJOR_STG = 11,
	BSF$A_MINOR_STG = 10,
	BSF$A_TEMP_STG = 9;

    MAP
	ARRAY_DESC : REF BLOCK [, BYTE];

!+
! First dispatch on the data type.  Only word, longword, floating and
! double are permitted.
!-

    CASE .ARRAY_DESC [DSC$B_DTYPE] FROM DSC$K_DTYPE_W TO DSC$K_DTYPE_D OF
	SET

	[DSC$K_DTYPE_W] :
!+
! This is an array of 16-bit words.  Store in the specified place
! in the array.  The extra index will be ignored if the
! array is one-dimensional.
!-
	    BEGIN
	    BAS$STO_FA_W_R8 (.ITEM_VAL, .ARRAY_DESC, .INDEX_VAL, 0);
	    RETURN;
	    END;

	[DSC$K_DTYPE_L] :
!+
! This is an array of 32-bit longwords.  Store in the indicated place.
!-
	    BEGIN
	    BAS$STO_FA_L_R8 (.ITEM_VAL, .ARRAY_DESC, .INDEX_VAL, 0);
	    RETURN;
	    END;

	[DSC$K_DTYPE_F] :
!+
! This is an array of single-precision floating point numbers.
! Convert the data to floating and store it in the indicated place.
!-
	    BEGIN

	    BUILTIN
		CVTLF;

	    LOCAL
		DATUM;

	    CVTLF (ITEM_VAL, DATUM);
	    BAS$STO_FA_F_R8 (.DATUM, .ARRAY_DESC, .INDEX_VAL, 0);
	    RETURN;
	    END;

	[DSC$K_DTYPE_D] :
!+
! This is an array of double-precision floating point numbers.
! Fetch the indicated one, convert it to a longword, and return
! the longword.
!-
	    BEGIN

	    BUILTIN
		CVTLD;

	    LOCAL
		DATUM : VECTOR [2],
		DOUBLE_DESC : BLOCK [8, BYTE];

            REGISTER
		R0=0,
		R1=1;

	    CVTLD (ITEM_VAL, DATUM);
!+
! Build a descriptor for the double-precision value, since we cannot handle
! such things easily in BLISS.
!-
	    DOUBLE_DESC [DSC$W_LENGTH] = %UPVAL*2;
	    DOUBLE_DESC [DSC$B_DTYPE] = DSC$K_DTYPE_D;
	    DOUBLE_DESC [DSC$B_CLASS] = DSC$K_CLASS_S;
	    DOUBLE_DESC [DSC$A_POINTER] = DATUM [0];

!+
! Apply the double precision scale factor.
! BAS$SCALE returns the scaled value in R0, R1.
!-

	   BAS$SCALE_D_R1 (.DATUM [0], .DATUM [1]);
           DATUM [0] = .R0;
	   DATUM [1] = .R1;
!+
! Compute the indices
!-
!+
! Store the double-precision datum in the array.
!-

	    CASE .ARRAY_DESC [DSC$B_DIMCT] FROM 1 TO 2 OF
		SET

		[1] :
		    BAS$STORE_BFA (DOUBLE_DESC, .ARRAY_DESC, .INDEX_VAL);

		[2] :
		    BAS$STORE_BFA (DOUBLE_DESC, .ARRAY_DESC, .INDEX_VAL, 0);

		[OUTRANGE] :
		    BAS$$STOP (BAS$K_ONEOR_TWO);
		TES;

	    
	    RETURN;
	    END;

	[INRANGE, OUTRANGE] :
!+
! This array descriptor is of an unsupported type.  Give a Data type error
! message.
!-
	    BAS$$STOP (BAS$K_DATTYPERR);
	TES;

!+
! In the unlikely case that the above CASE expression falls through, we must
! return.
!-
    RETURN;
    END;					! end of STORE
END						! end of module BAS$CHANGE

ELUDOM
