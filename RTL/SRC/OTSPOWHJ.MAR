	.TITLE	OTS$POWHJ - REAL*16 ** INTEGER*4 power routine
	.IDENT	/1-004/			; File: OTSPOWHJ.MAR  Edit: SBL1004

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;
; FACILITY: Language support library - user callable
;++
; ABSTRACT:
;
;	REAL*16 base to INTEGER*4 power.
;	Floating overflow and underflow can occur.
;	Undefined exponentation can occur if base is 0 and power
;	is 0 or negative.
;
;
;--
;
; VERSION: 1
;
; HISTORY:
; AUTHOR:
;	Steven B. Lionel, 1-Jun-79: Version 1
;
;
;
;

	.SBTTL	HISTORY		; Detailed Current Edit History


; Edit History for Version 1 of OTS$POWHJ
; 1-001 - Adapted from OTS$POWDJ version 1-001.  SBL 01-Jun-79
; 1-002	- Recast some comments.  JBS 30-JUL-1979
; 1-003 - Add handlers to catch SS$_FLTOVF and SS$_FLTDIV, and signal
;	  MTH$_FLOOVEMAT or MTH$_FLOUNDMAT instead, depending on the context.
;	  Also disable IV and change BLBS/ASHL at EXPGTR to BBSC/ROTL for
;	  uniformity with OTS$POWRJ.  JAW 26-Feb-1980.
; 1-004 - Use word-relative addressing for handler address.  SBL 9-Sep-1981
;	  

	.SBTTL	DECLARATIONS

;
; INCLUDE FILES:
;

;
; EXTERNAL SYMBOLS:
;

	.DSABL	GBL
	.EXTRN	MTH$K_UNDEXP, MTH$K_FLOOVEMAT, MTH$K_FLOUNDMAT
	.EXTRN	MTH$$SIGNAL		; Math error routine
	.EXTRN	SS$_FLTOVF, SS$_FLTOVF_F, SS$_FLTDIV, SS$_FLTDIV_F, SS$_CONTINUE
;
; MACROS:
;
	$CHFDEF				; Define condition handler symbols.
	$SFDEF				; Define stack frame symbols.
	$PSLDEF				; Define program status longword
					; symbols.

;
; EQUATED SYMBOLS:
;
	base = 4			; base input formal - by-value
	exp = 20			; exponent input formal - by-value
					; Note: quad floating by-value violates
					; calling standard, but ok since this
					; routine is a code support routine (OTS$)

;
; OWN STORAGE:
;

;
; PSECT DECLARATIONS:
;

	.PSECT	_OTS$CODE PIC,SHR,LONG,EXE,NOWRT
					; program section for OTS$ code


	.SBTTL	OTS$POWHJ_R3 - REAL*16 ** INTEGER*4

;++
; FUNCTIONAL DESCRIPTION:
;
;	REAL*16 result = REAL*16 base ** signed longword exponent
;	The REAL*16 result is given by:
;
;	base	exponent	result
;
;	any	> 0		product (base * 2**i) where i is each
;				non-zero bit position in exponent
;
;	> 0	= 0		1.0
;	= 0	= 0		Undefined exponentation
;	< 0	= 0		1.0
;
;	> 0	< 0		1.0 / product (base * 2**i)
;				where i is each non-zero bit position
;				in |exponent|
;	= 0	< 0		Undefined exponentation
;	< 0	< 0		1.0 / product (base * 2**i)
;				where i is each non-zero bit position
;				in |exponent|
;
;	Floating overflow can occur on either of the two MULH's.  If this
;	happens when the exponent is less than zero, the exception is caught by
;	a local condition handler named EXC_HNDLR_UNDER, which sets the result
;	to 0.0 and either signals MTH$_FLOUNDMAT (if FU is enabled in the
;	caller's PSW) or continues at POWHJX.  If it happens when the exponent
;	is greater than zero, the exception is caught by a local condition
;	handler named EXC_HNDLR_OVER, which sets the result to the reserved
;	operand (-0.0) and signals MTH$_FLOOVEMAT.
;
;	Floating overflow and floating divide by zero can occur on the DIVH.
;	These exceptions are caught by EXC_HNDLR_OVER, which sets the result to
;	the reserved operand (-0.0) and signals MTH$_FLOOVEMAT.
;
;	Undefined exponentiation occurs if base is 0 and 
;	exponent is 0 or negative.
;
; CALLING SEQUENCE:
;
;	Power.wh.v = OTS$POWHJ_R3 (base.rh.v, exponent.rl.v)
;
; INPUT PARAMETERS:
;	base		- REAL*16 base
;	exponent	- INTEGER*4 exponent
;
; IMPLICIT INPUTS:
;	The setting of FU in the caller's PSW.
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; FUNCTION VALUE:
;
;		WARNING !!
;
;	REAL*16 result in registers R0 through R3.
;	This is a serious violation of the VAX calling standard and can
;	kill programs if misused.  Beware!
;
; SIDE EFFECTS:
;
;	Destroys registers R2-R3!
;	Signals MTH$_FLOOVEMAT if floating overflow occurs on either of the two
;	    MULH's when exponent > 0, or if floating overflow or divide by zero
;	    occurs on the DIVH.
;	Signals MTH$_FLOUNDMAT if floating overflow occurs on either of the two
;	    MULH's when exponent < 0 and caller has FU enabled.
;	SIGNALs MTH$_UNDEXP (82 = ' UNDEFINED EXPONENTATION') if
;	base is 0 and exponent is 0 or negative.
;
;--



	.ENTRY	OTS$POWHJ_R3, ^M<R4, R5, R6, R7, R8>
					; Don't save registers R2 and R3!
					; Disable integer overflow.  (Occurs on
					; maximum negative exponent.)
	MOVAB	W^EXC_HNDLR_OVER, (FP)	; Translate exceptions to
					; MTH$_FLOOVEMAT.
	MOVH	#1, R0			; R0-R3 = initial result
	MOVH	base(AP), R4		; R4-R7 = base
	MOVL	exp(AP), R8		; R8 = exponent
	BGTR	EXPGTR			; branch if exponent > 0
	MOVAB	B^EXC_HNDLR_UNDER, (FP)	; Translate exceptions to
					; MTH$_FLOUNDMAT.

	TSTH	R4			; test base
	BEQL	UNDEFINED		; undefined 0**0 or 0**(-n)
	MNEGL	R8, R8			; R8 = |exponent|
	BEQL	POWHJX			; if exponent is 0, return R0 = 1.0

;+
; Exponent is > 0 or (exponent is =< 0 and base is not = 0 -- use |exponent|)
;-

EXPGTR:	BBSC	#0, R8, PARTIAL		; branch if |exponent| is odd
SQUAR:	ROTL	#-1, R8, R8		; R8 = |exponent|/2
SQUAR1:	MULH2	R4, R4			; R4-R7 = current power of base
					; floating overflow will trap or fault
					; and signal SS$_FLTOVF or SS$_FLTOVF_F.
	BLBC	R8, SQUAR		; branch if next bit in |exponent| is 0

;+
; Here when bit i of |exponent| is a 1.
; Partial result = partial result *  (base * 2**i)
;-

PARTIAL:
	MULH2	R4, R0			; R0-R3 = new partial result
	ASHL	#-1, R8, R8		; R8 = |exponent|/2
	BNEQ	SQUAR1			; loopback if more exponent bits are 1

	TSTL	exp(AP)			; test sign of exponent
	BGTR	POWHJX			; if exponent > 0, return R0
	MOVAB	B^EXC_HNDLR_OVER, (FP)	; Translate exceptions to
					; MTH$_FLOOVEMAT.
	DIVH3	R0, #1, R0		; R0-R3 = 1.0/result
POWHJX:	RET				; return, result in R0-R3

;+
; Undefined exponentation error - 0**0 or 0**(-n)
;-

UNDEFINED:
	ASHQ	#15, #1, R0		; R0-R3 = reserved floating operand
	CLRQ	R2			; second quadword
	MOVZBL	#MTH$K_UNDEXP, -(SP)	; Indicate undefined exponentiation.
	CALLS	#1, G^MTH$$SIGNAL	; convert to 32-bit condition code
					; and SIGNAL MTH$_UNDEXP
					; Note: 2nd arg not needed since no JSB OTS$POWHJ
					; is possible.
	RET				; return

;+
; The following handler is established to process exceptions which imply
; underflow of the final result (floating overflow in either of the two MULH's
; when exp < 0).  On the occurrence of such an exception, the handler signals
; MTH$_FLOUNDMAT.
;-

EXC_HNDLR_UNDER:
	.WORD	^M<R4, R5, R6>		; Entry mask.
					; Don't save registers R2 and R3.
	BSBB	SETUP			; Set up R0:R5 and identify condition.
					; Return only if FLTOVF or FLTDIV.
	BBC	#PSL$V_FU, SF$W_SAVE_PSW(R4), CON_U
					; Branch if caller has not enabled FU.
	MOVZBL	#MTH$K_FLOUNDMAT, R6	; Report MTH$_FLOUNDMAT, not SS$_FLTOVF.
	BRB	DO_SIG

;+
; The following handler is established to process exceptions which imply
; overflow of the final result (floating overflow in either of the two MULH's
; when exp > 0, floating overflow in the DIVH, or floating divide by zero in the
; DIVH).  On the occurrence of such an exception, the handler signals
; MTH$_FLOOVEMAT.
;-

EXC_HNDLR_OVER:
	.WORD	^M<R4, R5, R6>		; Entry mask
					; Don't save registers R2 and R3.
	BSBB	SETUP			; Set up R0:R5 and identify condition.
					; Return only if FLTOVF or FLTDIV.
	ASHL	#15, #1, R0		; Make the default result -0.0.
	MOVZBL	#MTH$K_FLOOVEMAT, R6	; Report MTH$_FLOOVEMAT, not SS$_FLTxxx.

DO_SIG:	PUSHL	SF$L_SAVE_PC(R4)	; Report caller's PC, not exception PC.
	PUSHL	R6			; Report MTH$_xxx, not SS$_xxx.
	CALLS	#2, G^MTH$$SIGNAL	; Signal the condition.
CON_U:	MOVQ	R0, CHF$L_MCH_SAVR0(R5)	; If continued, restore R0 and R1.
					; R2 and R3 will retain their values.
	MOVL	S^#SS$_CONTINUE, R0	; Continue from the original exception.
DO_RET:	RET				; Exit from handler.

;+
; Common setup routine for handlers.  Returns normally if exception was FLTOVF,
; FLTOVF_F, FLTDIV, or FLTDIV_F.  If the exception was anything else, it
; executes a RET, causing an exit from the handler with R0 = 0, which is
; equivalent to SS$_RESIGNAL.  In the case of a normal return (FLTOVF, FLTOVF_F,
; FLTDIV, or FLTDIV_F) it sets up R0:R5 as follows:
;	R0/R3:	0
;	R4:	address of establisher's frame
;	R5:	address of mechanism array
;-

SETUP:	CLRQ	R0			; Clear first half of default result.
	MOVQ	CHF$L_SIGARGLST(AP), R4	; R4 = address of signal array
					; R5 = address of mechanism array
	CMPW	CHF$L_SIG_NAME(R4), #SS$_FLTOVF
					; Was it a floating overflow trap?
	BEQL	DO_RSB			; Branch if yes.
	CMPW	CHF$L_SIG_NAME(R4), #SS$_FLTOVF_F
					; Or a floating overflow fault?
	BEQL	DO_RSB			; Branch if yes.
	CMPW	CHF$L_SIG_NAME(R4), #SS$_FLTDIV
					; Or a floating divide by zero trap?
	BEQL	DO_RSB			; Branch if yes.
	CMPW	CHF$L_SIG_NAME(R4), #SS$_FLTDIV_F
					; Or a floating divide by zero fault?
	BNEQ	DO_RET			; None of the above: return from handler
					; with R0 = 0.
DO_RSB:	MOVAB	B^POWHJX, CHF$L_SIG_NAME+4(R4)
					; Change return PC to POWHJX.
	MOVL	CHF$L_MCH_FRAME(R5), R4	; R4 = address of establisher's frame
	CLRQ	R2			; Clear second half of default result.
	RSB				; Return.

	.END
