	.TITLE	LIB$EMUL - Execute EMUL instruction
	.IDENT	/1-001/			; File: LIBEMUL.MAR Edit: SBL1001

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY: General Utility Library
;
; ABSTRACT:
;
;	This module contains LIB$EMUL, which makes the VAX EMUL instruction
;	available as a callable procedure.
;
; ENVIRONMENT: Runs at any access mode, AST Reentrant
;
; AUTHOR: Steven B. Lionel, CREATION DATE: 8-July-1981
;
; MODIFIED BY:
;
; 1-001	- Original. SBL 8-July-1981
;--

	.SBTTL	DECLARATIONS
;
; LIBRARY MACRO CALLS:
;
	$SSDEF			; Define SS$ symbols
;
; EXTERNAL DECLARATIONS:
;
	.DSABL	GBL		; Force all external symbols to be declared
;	NONE
;
; MACROS:
;
;	NONE
;
; EQUATED SYMBOLS:
;
;	NONE
;
; OWN STORAGE:
;
;	NONE
;
; PSECT DECLARATIONS:
;
	.PSECT _LIB$CODE PIC, USR, CON, REL, LCL, SHR, -
			EXE, RD, NOWRT, LONG


	.SBTTL	LIB$EMUL - Execute EMUL instruction
;++
; FUNCTIONAL DESCRIPTION:
;
;	This procedure makes the VAX EMUL instruction available as
;	a callable procedure.
;
;	The multiplicand argument is multiplied by the multiplier
;	argument giving a double-length result.  The addend argument
;	is sign-extended to double-length and added to the result, and
;	then the product argument is replaced by the final result.
;
;	For more information, see the VAX-11 Architecture Handbook.
;
; CALLING SEQUENCE:
;
;	status.wlc.v = LIB$EMUL (multiplier.rl.r, multiplicand.rl.r,
;				 addend.rl.r, product.wq.r)
;
; FORMAL PARAMETERS:
;
	multiplier = 4		; The address of the longword integer multiplier.

	multiplicand = 8	; The address of the longword integer multiplicand.

	addend = 12		; The address of the longword integer addend.

	product = 16		; The address of a quadword integer for the
				; product result.
;
; IMPLICIT INPUTS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION STATUS:
;
;	SS$_NORMAL, normal successful completion
;
; SIDE EFFECTS:
;
;	NONE
;
;--

	.ENTRY LIB$EMUL, ^M<IV>		; Entry point

	EMUL	@multiplicand(AP), @multiplier(AP), -
		@addend(AP), @product(AP)

	MOVL	#SS$_NORMAL, R0		; The EMUL can not fail
	RET

	.END				; End of module LIB$EMUL
