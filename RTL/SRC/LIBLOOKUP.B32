MODULE LIB$LOOKUP_KEY (		! Keyword lookup routine

	IDENT = '1-012'		! File: LIBLOOKUP.B32 Edit: RKR1012

		      ) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  General Utility Procedure library
!
! ABSTRACT:
!
!	This routine attempts to match a caller-specified character 
!	string with a table of keywords built by the caller.
!
! ENVIRONMENT:  User mode, AST re-entrant.  Non-shared library
!
! AUTHOR:  Ward Clark,	CREATION DATE:  10 January 1978
!
! MODIFIED BY:
!	Jonathan M. Taylor - 5-Mar-78
!
! 0-2	- Fixed call to LIB$SCOPY_R_DX after changing parameter
!	  order.  JMT 5-Mar-78
! 0-03	- Change to STARLET library.  DGP 20-Apr-78
! 0-04	- Change REQUIRE files for VAX system build.  DGP 28-Apr-78
! 0-05	- Change STARLET to RTLSTARLE to avoid conflicts.  DGP 1-May-78
! 0-06	- Addressing mode general for LIB$SCOPY.  TNH 17-June-78
! 0-08	- Change file name to LIBLOOKUP.B32.  JBS 14-NOV-78
! 1-001	- Update version number.  JBS 16-NOV-78
! 1-002	- Remove REQUIRE of LIBMAC.  Only LIBLOOKUP is using it so
!	   put its text directly in this file.  JBS 11-DEC-78
! 1-003	- Add REQUIRE of LIBMSG to define error symbols.  JBS 11-DEC-78
! 1-004	- Change LIB$S to STR$.  JBS 23-MAY-1979
! 1-005	- Change call to STR$COPY.  JBS 16-JUL-1979
! 1-006	- Declare message symbols as externals, add OUTLEN, and do some
!	   minor cleanups to the text.  JBS 18-SEP-1979
! 1-007	- Remove $LIB_KEY_TABLE, moved to RTLMACB32.REQ.  
!	  JBS 19-DEC-1979
! 1-008 - Use handler to translate signals.  RW  22-Jan-1980
! 1-009 - Fix bug where STR$COPY_R was being called with length passed
!	  by value rather than by reference.  SBL 11-Mar-1980
! 1-010 - Enhance to recognize additional classes of string descriptors
!	  by invoking LIB$ANALYZE_SDESC_R3 to extract length and 
!	  address of 1st data byte from descriptor.
!	  Change call to STR$COPY_R  to LIB$SCOPY_R_DX.
!	  This eliminates the need to establish a handler and the need
!	  to convert STR$ statuses to LIB$ statuses.
!	  RKR 28-MAY-1981.
! 1-011 - Add special-case code to process string descriptors that
!	  "read" like fixed string descriptors.  RKR 7-OCT-1981.
! 1-012 - Redirect jsb's from LIB$ANALYZE_SDESC_R3 to
!	  LIB$ANALYZE_SDESC_R2.  Use LIB$SCOPY_R_DX6 to do copying.
!	  RKR 18-NOV-1981.
!--
!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE 
		(EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES
!
REQUIRE 'RTLIN:STRLNK';		! Linkage for LIB$ANALYZE_SDESC_R2

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    LIB$LOOKUP_KEY;		! Keyword table scanning routine

!
! INCLUDE FILES:
!

LIBRARY 'RTLSTARLE';		! VAX/VMS Literals

REQUIRE 'RTLIN:RTLPSECT';	! Define DECLARE_PSECTS macro

!
! MACROS:
!
!+
! Macros used to access various elements of a keyword table built
! by a $LIB_KEY_TABLE macro for use with the LIB$KEY_TABLE keyword 
! lookup routine.
!-

MACRO
    $LIB_KEY_LENGTH (TABLE_POINTER) =
 .(.TABLE_POINTER)<0,8> %,	! Length of a keyword table string
    $LIB_KEY_STRING (TABLE_POINTER) =
 .TABLE_POINTER + 1 %,		! Address of a keyword table string
    $LIB_KEY_VALUE (TABLE_POINTER) =
 .(TABLE_POINTER + 4) %;	! Value corresponding to a keyword table entry

!
! EQUATED SYMBOLS:
!
!    None
!
! PSECT DECLARATIONS:
!
DECLARE_PSECTS (LIB);	! This module belongs to the LIB facility
!
! OWN STORAGE:
!
!    None
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    LIB$ANALYZE_SDESC_R2 : LIB$ANALYZE_SDESC_JSB_LINK, ! Extract length
						       ! and address of
						       ! 1st data byte
						       ! from descriptor
    LIB$SCOPY_R_DX6 : STRING_JSB ; ! Copy a by-reference string to a 
				! descriptor of any type.

!+
! The following are the conditions returned by this module
!-

EXTERNAL LITERAL
    LIB$_STRTRU,		! String truncated
    LIB$_AMBKEY,		! Multiple keyword match found
    LIB$_UNRKEY,		! No keyword match found
    LIB$_INVARG;		! Invalid argument(s)


GLOBAL ROUTINE LIB$LOOKUP_KEY (		! Keyword table scanning routine

	STRNG_DESC_ADDR, 			! Search string
	KEY_TABLE_ADDR, 			! Keyword table
	KEY_VALUE_ADDR, 			! Keyword value deposit
						! area
	FULL_DESC_ADDR, 			! Full keyword deposit 
						! area
	OUTLEN					! Number of bytes stored
						! in FULL_DESC_ADDR

			      ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This keyword lookup routine scans a table of keywords (see
!	below), attempting to find a keyword which matches a caller-
!	specified keyword or keyword abbreviation.
!
!
!	When a keyword match is found, the following information is
!	optionally returned to the caller:
!
!	     * longword value associated with the matched keyword
!	       (KEY_VALUE_ADDR)
!	     * full keyword string (any descriptor type)
!	       (FULL_DESC_ADDR)
!
!	If an exact keyword match is found (i.e., the caller's search
!	string is an unabbreviated keyword), no further processing is
!	performed and a normal completion code is returned to the
!	caller.  Otherwise, after a match has been found, the rest of
!	the keyword table is scanned.  If an additional match is found,
!	a "not enough characters" completion code is returned to the
!	caller.
!
!	The keyword table, which the caller creates for this routine
!	has the following structure:
!
!	          longword vector
!	   +---------------------------+
!	   |      vector size - 1      |
!	   +---------------------------+
!	   | address of keyword string |-------+
!	   | - - - - - - - - - - - - - |       |
!	   | associated keyword value  |       V
!	   +---------------------------+     +---+------------------+
!	   |             .             |     |   |  keyword string  |
!	   |             .             |     +---+------------------+
!	   |             .             |       counted ASCII string
!	   |                           |
!	   |                           |
!	   |                           |
!	   |                           |
!	   +---------------------------+
!
!	where the "counted ASCII string" starts with a byte which is
!	the unsigned count of the number of ASCII characters which
!	follow.
!
! FORMAL PARAMETERS:
!
!	STRNG_DESC_ADDR.rt.dx - Address of search string descriptor
!	KEY_TABLE_ADDR.rlu.ra - Address of keyword table
!	[KEY_VALUE_ADDR.wlu.r] - Address of keyword value deposit area 
!				 (optional)
!	[FULL_DESC_ADDR.wt.dx] - Address of full keyword deposit area 
!				 (optional)
!	[OUTLEN.ww.r] - Number of bytes stored in FULL_DESC_ADDR 
!			(optional)
!
! IMPLICIT INPUTS:
!
!	None
!
! IMPLICIT OUTPUTS:
!
!	None
!
! COMPLETION CODES:
!
!	SS$_NORMAL 	= Unique keyword match found
!	LIB$_FATERRLIB 	= Fatal error in library
! 	LIB$_INVSTRDES 	= Invalid string descriptor
!	LIB$_INVSIRMEM 	= Insufficient Virtual memory
!	LIB$_STRTRU 	= String is truncated
!	LIB$_AMBKEY 	= Multiple keyword match found (i.e., not enough
!		          characters specified)
!	LIB$_UNRKEY 	= No keyword match found
!	LIB$_INVARG 	= Invalid arguments, not enough arguments, bad 
!		          keyword table or bad string descriptor
!
! SIDE EFFECTS:
!
!	None
!
!--

    BEGIN

    BUILTIN
	ACTUALCOUNT,		! Actual parameter count
	NULLPARAMETER;		! Test for presence of parameter

    MAP
	STRNG_DESC_ADDR : REF BLOCK [, BYTE],	! caller's search string
	FULL_DESC_ADDR  : REF BLOCK [, BYTE],	! returned full key
	OUTLEN : REF VECTOR [1, WORD, UNSIGNED];  ! Number of bytes 
						  ! stored in 
						  ! FULL_DESC_ADDR

    BIND  ! Redefine some routine arguments:

	KEY_TABLE = .KEY_TABLE_ADDR : VECTOR,	! Caller's keyword table
	KEY_VALUE = .KEY_VALUE_ADDR;		! Caller's keyword 
						! value deposit area

    LOCAL
	STRING_LEN,		! Length of search string
	STRING_ADDR,		! Address of search string
	MATCH,			! Index of a matched keyword table entry
	RETURN_CODE;		! Routine return code

!+
! Verify that the caller provided a proper argument list.
!-

    IF (ACTUALCOUNT () LSSU 2) ! If less that 2 arguments were provided,
    THEN
	RETURN (LIB$_INVARG);  ! return an error code to the caller.

!+
! Prepare to scan the caller's keyword table.
!-
    RETURN_CODE = LIB$_UNRKEY;	! Initially assume no keyword match 
				! exists.
!+
! Extract length and address of 1st data byte of search string.
! If error results from attempt to extract, return that error.
!-
    IF .STRNG_DESC_ADDR [DSC$B_CLASS] GTRU DSC$K_CLASS_D
    THEN	! Use generalized extract
	BEGIN
	LOCAL RET_STATUS ;
	RET_STATUS = LIB$ANALYZE_SDESC_R2 ( .STRNG_DESC_ADDR ;
					STRING_LEN, STRING_ADDR ) ;

	IF NOT .RET_STATUS THEN RETURN (.RET_STATUS) ;
	END

    ELSE		! Fetch length and address directly

	BEGIN
	STRING_LEN = .STRNG_DESC_ADDR [DSC$W_LENGTH] ;
	STRING_ADDR = .STRNG_DESC_ADDR [DSC$A_POINTER] ;
	END;

!+
! Scan the keyword table for a match with the caller's string.
!-

    INCR INDEX FROM 1 TO .KEY_TABLE BY 2 DO 	! Loop until the end of 
						! the keyword table.
	BEGIN

	!+
	! First make sure that the caller's string is not longer than
	! the current keyword.
	!-
	IF (.STRING_LEN LEQU $LIB_KEY_LENGTH (KEY_TABLE [.INDEX]))
	THEN
	    !+
	    ! If the caller's string matches the current keyword begin 
	    ! additional checking.
	    !-
	    IF CH$EQL(.STRING_LEN, .STRING_ADDR, 
		      .STRING_LEN, $LIB_KEY_STRING (KEY_TABLE [.INDEX]))
	    THEN
		BEGIN

		!+
		! If the caller's search string is the same length as
		! the keyword it matches
		!-
		IF (.STRING_LEN EQLU 
		    $LIB_KEY_LENGTH (KEY_TABLE [.INDEX]))
		THEN
		    BEGIN ! special exact-match processing.
		    MATCH = .INDEX;	! Save the current keyword table
					! index,
		    RETURN_CODE = SS$_NORMAL;	! indicate a keyword 
						! match was found,
		    EXITLOOP;			! and bypass further key
						! word table scanning.
		    END;  ! special exact-match processing

		!+
		! If a match has not already been found,
		!-
		IF (.RETURN_CODE EQL LIB$_UNRKEY)
		THEN
		    BEGIN
		    MATCH = .INDEX; ! save the current keyword table 
				    ! index
		    RETURN_CODE = SS$_NORMAL;	! and indicate a match 
						! has been found.
		    END

		ELSE		! Otherwise, indicate that a multiple
				! keyword match has been found

		    BEGIN	
		    RETURN_CODE = LIB$_AMBKEY;	! (i.e., no enough 
						! characters provided)
		    EXITLOOP;			! and exit the keyword 
						! scanning loop.
		    END;

		END;		! End of keyword match processing.

	END;		! End of the keyword table searching loop.

!+
! If a keyword match was found, return the keyword information to the 
! caller.
!-

    IF (.RETURN_CODE NEQ LIB$_UNRKEY)	! Make sure a keyword match was 
					! found.
    THEN
	BEGIN	! match was found code
	!+
	! If the caller provided a parameter to receive the key value, 
	! return it to him.
	!-

	IF ( NOT NULLPARAMETER (3)) THEN 
		KEY_VALUE = $LIB_KEY_VALUE (KEY_TABLE [.MATCH]);

	!+
	! If the caller has provided a descriptor to receive the matched
	! key, return it to him.
	!-

	IF ( NOT NULLPARAMETER (4))
	THEN
	    BEGIN	! returning optional arguments

	    LOCAL
		RET_STATUS;

	    RET_STATUS = LIB$SCOPY_R_DX6 ( 
			$LIB_KEY_LENGTH (KEY_TABLE [.MATCH]), 
			$LIB_KEY_STRING (KEY_TABLE [.MATCH]), 
			.FULL_DESC_ADDR ) ;
	    !+
	    ! If the copy failed, record the status
	    !-
	    IF NOT .RET_STATUS THEN RETURN_CODE = .RET_STATUS ;

	    !+
	    ! If the caller is using fixed length strings, he may want 
	    ! to know how many characters we actually stored, not 
	    ! counting trailing pads.
	    ! There is no need to check status on call to 
	    ! LIB$ANALYZE_SDESC_R2.
	    ! If the descriptor was bad, it would have gotten caught 
	    ! during the copy operation above.
	    !-

	    IF ( NOT NULLPARAMETER (5))
	    THEN
		BEGIN	! returning length
		LOCAL
		    FULL_LEN,
		    FULL_ADDR;
		IF .FULL_DESC_ADDR [DSC$B_CLASS] GTRU DSC$K_CLASS_D
		THEN		! Use general length extraction
		    BEGIN
		    LIB$ANALYZE_SDESC_R2 ( .FULL_DESC_ADDR ;
				           FULL_LEN, FULL_ADDR ) ;
		    END

		ELSE		! Fetch length directly
		    FULL_LEN = .FULL_DESC_ADDR [DSC$W_LENGTH ] ;

		OUTLEN [0] = MIN ($LIB_KEY_LENGTH (KEY_TABLE [.MATCH]),
				  .FULL_LEN);
		END;	! returning length

	    END;	! returning optional arguments

	END;	! match as found code

!+
! Return the current keyword match return code to the caller.
!-
    RETURN (.RETURN_CODE);	! Return the current match code to the 
				! caller.
    END;			! End of LIB$LOOKUP_KEY routine

END				! End of LIB$LOOKUP_KEY module

ELUDOM
