	.TITLE	BAS$XLATE
	.IDENT	/1-004/			; File: BASXLATE.MAR EDIT: RNH1004

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY: BASIC code support
;
; ABSTRACT:
;
;	This module implements the BASIC-PLUS-2 XLATE function
;
; ENVIRONMENT: User Mode, AST Reentrant
;
;--
; AUTHOR: R. WILL, CREATION DATE: 18-May-79
;
; MODIFIED BY:
;
; R. Will, : VERSION 1
; 1-001	- Original 
; 1-002	- Change calls to STR$COPY.  JBS 16-JUL-1979
; 1-003 - Change a INCW R1 to INCL R1.  R1 contains an address. FM 5-FEB-81
; 1-004 - Change shared external references to G^ RNH 25-Sep-81

	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;

	$DSCDEF					; define descriptor offsets

;
; EXTERNAL DECLARATIONS:
;
	.DSABL	GBL				; Prevent undeclared
						; symbols from being
						; automatically global.

	.EXTRN	STR$COPY_DX_R8			; copy input string to temp
						; and temp string to output
	.EXTRN	STR$COPY_R_R8			; copy temp str to dest str
	.EXTRN	STR$GET1_DX			; allocate temp string
	.EXTRN	STR$FREE1_DX			; deallocate temp string
	.EXTRN	LIB$GET_VM			; allocate heap memory
	.EXTRN	LIB$FREE_VM			; deallocate heap memory

;
; MACROS:
;

;
; EQUATED SYMBOLS:
;

	null = ^X00

;
; OWN STORAGE:
;

;
; PSECT DECLARATIONS:
;
	.PSECT _BAS$CODE PIC, USR, CON, REL, LCL, SHR, -
			EXE, RD, NOWRT, LONG


	.SBTTL	BAS$XLATE	  - Perform BASIC XLATE function
;++
; FUNCTIONAL DESCRIPTION:
;
;	This routine implements the BASIC-PLUS-2 XLATE function.
;	For AST re-entrancy, the routine will create a local dynamic string
;	descriptor and call STR$COPY to copy the source string to the local
;	(instead of using any mechanism to prevent AST level routines
;	from writing to the source string and moving it from under us).
;	The routine will also create a local dynamic string descriptor and
;	call allocate to get a string to translate into.  The routine will
;	then use both local strings (which will not need to get larger) to do
;	the translating.  The routine will use the MOVTUC to translate until
;	the translated character is the NULL character.  The NULL will not be
;	written to the destination string, and the translation will continue
;	with the next character.  After the translating is finished,
;	the routine will call STR$COPY to copy the edited string to the
;	destination string.
;
; CALLING SEQUENCE:
;
;	CALL BAS$XLATE (dest_string.wx.dx, src_string.rx.dx, table.rx.dx)
;
; INPUT PARAMETERS:
;
	src_string = 8
	table = 12
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
	dest_string = 4
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; FUNCTION VALUE:
; COMPLETION CODES:
;
;	NONE
;
; SIDE EFFECTS:
;
;	This routine calls STR$COPY and STR$FREE1 and therefore will
;	allocate dynamic string space to a temporary, may allocate dynamic
;	string space to the destination string, and may cause any of the
;	their error messages to be signalled.  This routine also calls
;	LIB$GET_VM and LIB$FREE_VM and so any of their errors may be
;	signalled.
;
;--

	.ENTRY BAS$XLATE, ^M<R2,R3,R4,R5,R6,R7,R8,IV>

;+
; Create a local descriptor and copy the input string to it using STR$COPY
;-

	MOVL	src_string(AP), R1		; pointer to src string
	CLRL	-(SP)				; address of local string
	PUSHL	#<<DSC$K_CLASS_D @ 24> ! <DSC$K_DTYPE_T @ 16>>
						; fill type, class and length
	MOVL	SP, R0				; R0 points to local descriptr
	JSB	G^STR$COPY_DX_R8		; copy string to local

;+
; Create a local descriptor and allocate space to it, to use as destination
; string for MOVTUC
;-

	CLRL	-(SP)				; address of local string
	PUSHL	#<<DSC$K_CLASS_D @ 24> ! <DSC$K_DTYPE_T @ 16>>
						; fill type, class and len
	PUSHL	SP				; point to descriptor
	PUSHAW	@src_string(AP)			; length to allocate
	CALLS	#2, G^STR$GET1_DX		; allocate space

;+
; Call LIB$GET_VM to allocate 256 bytes to use for translate table
; and create the translation table
;-

	CLRL	-(SP)				; space for memory pointer
	MOVL	#256, -(SP)			; # bytes to allocate
	PUSHAL	4(SP)				; ptr to output parameter
	PUSHAL	4(SP)				; ptr to byte count
	CALLS	#2, G^LIB$GET_VM		; allocate the space
	MOVQ	@table(AP), R0			; get table pointer and length
	MOVC5	R0, (R1), #null, #256, @4(SP)	; fill the translate table

;+
; fill registers for the MOVTUC loop
;	R0	src len
;	R1	src pointer
;	R3	address of translation table
;	R4	dest len
;	R5	dest pointer
;-

	MOVQ	16(SP), R0			; R0 & R1 <- len & ptr for src
	MOVQ	8(SP), R4			; R4&R5 <- len & ptr for dest
	MOVL	4(SP), R3			; R3 has addr of extendd table

;+
; Registers are initialized, so MOVTUC until get a NULL, increment src ptr
; decrement src len to describe string remaining after NULL translation.
; Then continue translating.
;-

1$:	MOVTUC	R0, (R1), #null, (R3), R4, (R5)	; find null translation
	TSTW	R0
	BEQLU	FINISH				; all was translated
	DECW	R0				; subtract 1 from remain len
	INCL	R1				; add 1 to remaining pointer
	BRB	1$				; process remaining

;+
; The string has been translated.  Free the VM used for the translate table.
; Copy the temporory storage to the destination string.  (Note that the trans-
; lated length is the source length minus the number of unfilled bytes in the
; temporary string left in R4 by the MOVTUC.)  Deallocate the temporary string
; and the copied source string. Clean up the stack and return.
;-

FINISH:
	PUSHAL	4(SP)				; point to VM pointer
	PUSHAL	4(SP)				; point to VM length
	CALLS	#2, G^LIB$FREE_VM		; free the VM table copy
	CLRQ	(SP)+				; clean descr from stack

	SUBW3	R4, @src_string(AP), R1		; compute & store temp len
	MOVL	4(SP), R2			; point to src for copy
	MOVL	dest_string(AP), R0		; dest for copy
	JSB	G^STR$COPY_R_R8			; copy

	PUSHAL	(SP)				; point to temp dest descr
	CALLS	#1, G^STR$FREE1_DX		; deallocate it
	CLRQ	(SP)+				; clean the descr from stack

	PUSHAL	(SP)				; point to temp src descr
	CALLS	#1, G^STR$FREE1_DX		; deallocate it
	CLRQ	(SP)+				; clean the descr from stack

	RET

	.END					; End of BAS$XLATE
