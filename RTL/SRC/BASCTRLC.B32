MODULE BAS$CTRLC (				! Control C handler
		IDENT = '1-009'			! File: BASCTRLC.B32 Edit: PLL1009
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  VAX-11 BASIC Miscellaneous Support
!
! ABSTRACT:
!
!	This module contains routines for enabling, disabling, and
!	handling Control C interrupts.
!
! ENVIRONMENT:  VAX-11 User Mode
!
! AUTHOR: John Sauter, CREATION DATE: 19-FEB-1979
!
! MODIFIED BY:
!
! 1-001	- Original.  JBS 19-FEB-1979
! 1-002	- Add a handler to the AST routine to catch UNWINDS, making
!	   sure that they dismiss the AST properly.  JBS 20-FEB-1979
! 1-003	- Add BAS$$CTRLC_INIT, for the RUN command.  JBS 22-JUN-1979
! 1-004	- If a control C trap goes off but the user was not enabled,
!	   signal an INFO message to the keyboard monitor, who may
!	   wish to continue.  JBS 14-SEP-1979
! 1-005	- Use SYS$INPUT rather than TT.  JBS 20-SEP-1979
! 1-006	- Call SYS$CLRAST to clear the AST, rather than using CHMK.
!	   JBS 27-NOV-1979
! 1-007	- Do translations of SYS$INPUT until it fails to translate.
!	   JBS 24-JUL-1980
! 1-008 - Clear the AST immediately in CONTROL_C.  PLL 7-Aug-81
! 1-009 - Use LIB$GET_EF to obtain event flags for $QIOWs.  PLL 30-Nov-81
!--

!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!
!	NONE
!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    BAS$CTRLC,					! Enable Control C interrupts
    BAS$RCTRLC,					! Disable Control C interrupts
    BAS$$CTRLC_INIT : NOVALUE,			! Set up for RUN command
    CONTROL_C : NOVALUE;			! Handle a Control C interrupt

!
! INCLUDE FILES:
!

REQUIRE 'RTLIN:RTLPSECT';			! Macros for defining psects

LIBRARY 'RTLSTARLE';				! Define system symbols

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! PSECTS:
!
DECLARE_PSECTS (BAS);				! Declare psects for BAS$ facility
!
! OWN STORAGE:
!

OWN
    TT_CHAN : UNSIGNED WORD INITIAL (WORD (0)),	! The channel the terminal is assigned on
    RUN_CMD : BYTE INITIAL (BYTE (0)),		! Set if we are in the RUN command
    CC_ENABLED : BYTE INITIAL (BYTE (0)),	! Set if the user has control C traps enabled
    CC_DISABLED : BYTE INITIAL (BYTE (0));	! Set if this is a batch job.

!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    LIB$GET_EF,					! allocate an event flag
    LIB$FREE_EF,				! deallocate an event flag
    LIB$SIGNAL,					! Signal a condition
    LIB$STOP : NOVALUE,				! Signal a fatal error
    LIB$MATCH_COND,				! Match condition codes
    SYS$CLRAST;					! Clear AST level

!+
! The following are the error codes used in this module.
!-

EXTERNAL LITERAL
    BAS$_PROC__TRA;				! Programmable ^C trap


GLOBAL ROUTINE BAS$CTRLC = 			! Enable Control C interrupts

!++
! FUNCTIONAL DESCRIPTION:
!
!	Enable Control C traps, so that a Control C will cause the
!	user's program to take an ON ERROR GOTO branch.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	Always returns zero.
!
! SIDE EFFECTS:
!
!	Leaves Control C traps enabled unless this is a batch job.
!
!--

    BEGIN

    LOCAL
	ASSIGN_RESULT,
	QIO_RESULT,
	TRNLOG_RESULT,
	GETDEV_RESULT,
	DEVNAME : VECTOR [256, BYTE],
	DEVNAM_DESC : BLOCK [8, BYTE],
	DEVCHR : BLOCK [DIB$K_LENGTH, BYTE],
	DEVCHR_DESC : BLOCK [8, BYTE],
	TRNNAME : VECTOR [256, BYTE],
	TRNNAM_DESC : BLOCK [8, BYTE];

    IF ((.TT_CHAN EQLU 0) AND ( NOT .CC_DISABLED))
    THEN
	BEGIN
!+
! Set up the device name for the terminal.
!-
	DEVNAM_DESC [DSC$W_LENGTH] = %CHARCOUNT ('SYS$INPUT');
	DEVNAM_DESC [DSC$B_DTYPE] = DSC$K_DTYPE_T;
	DEVNAM_DESC [DSC$B_CLASS] = DSC$K_CLASS_S;
	DEVNAM_DESC [DSC$A_POINTER] = DEVNAME [0];
	CH$MOVE (%CHARCOUNT ('SYS$INPUT'), CH$PTR (UPLIT ('SYS$INPUT')), DEVNAME [0]);
!+
! Translate into the real name of the terminal.  Do as many translations as
! necessary.
!-

	DO
	    BEGIN
	    TRNNAM_DESC [DSC$W_LENGTH] = 256;
	    TRNNAM_DESC [DSC$B_DTYPE] = DSC$K_DTYPE_T;
	    TRNNAM_DESC [DSC$B_CLASS] = DSC$K_CLASS_S;
	    TRNNAM_DESC [DSC$A_POINTER] = TRNNAME [0];
	    TRNLOG_RESULT = $TRNLOG (LOGNAM = DEVNAM_DESC, RSLLEN = TRNNAM_DESC, RSLBUF = TRNNAM_DESC);

	    IF ( NOT .TRNLOG_RESULT) THEN LIB$STOP (.TRNLOG_RESULT);

	    IF (.TRNNAME [0] EQL 27)		! 27 = ASCII escape
	    THEN
		BEGIN
!+
! This is a process-permanent file, we must skip the first four bytes
! of the name.
!-
		TRNNAM_DESC [DSC$W_LENGTH] = .TRNNAM_DESC [DSC$W_LENGTH] - 4;
		TRNNAM_DESC [DSC$A_POINTER] = .TRNNAM_DESC [DSC$A_POINTER] + 4;
		END;

!+
! Copy the name to DEVNAME in case we have to translate again.
!-
	    CH$MOVE (.TRNNAM_DESC [DSC$W_LENGTH], .TRNNAM_DESC [DSC$A_POINTER], DEVNAME [0]);
	    DEVNAM_DESC [DSC$W_LENGTH] = .TRNNAM_DESC [DSC$W_LENGTH];
	    END
	UNTIL (.TRNLOG_RESULT EQL SS$_NOTRAN);

!+
! Discover if the device is a terminal.
!-
	DEVCHR_DESC [DSC$W_LENGTH] = DIB$K_LENGTH;
	DEVCHR_DESC [DSC$B_DTYPE] = DSC$K_DTYPE_Z;
	DEVCHR_DESC [DSC$B_CLASS] = DSC$K_CLASS_S;
	DEVCHR_DESC [DSC$A_POINTER] = DEVCHR [0, 0, 0, 0];
	GETDEV_RESULT = $GETDEV (DEVNAM = TRNNAM_DESC, PRILEN = DEVCHR_DESC, PRIBUF = DEVCHR_DESC);

	IF ( NOT .GETDEV_RESULT) THEN LIB$STOP (.GETDEV_RESULT);

	IF (.DEVCHR [DIB$B_DEVCLASS] EQL DC$_TERM)
	THEN
	    BEGIN
	    ASSIGN_RESULT = $ASSIGN (DEVNAM = TRNNAM_DESC, CHAN = TT_CHAN);

	    IF ( NOT .ASSIGN_RESULT) THEN LIB$STOP (.ASSIGN_RESULT);

	    END
	ELSE
	    CC_DISABLED = 1;

	END;

!+
! If CC_DISABLED is true, we are running under batch; do nothing.
!-

    IF ( NOT .CC_DISABLED)
    THEN
	BEGIN
!+
! If we are in the RUN command (where control Cs are always enabled)
! or if control Cs are already enabled, don't issue the QIO.
!-

	IF (( NOT .RUN_CMD) AND ( NOT .CC_ENABLED))
	THEN
	    BEGIN
	    LOCAL
		STATUS,
		EVENT_FLAG;

	    STATUS = LIB$GET_EF (EVENT_FLAG);
	    IF (NOT .STATUS) THEN LIB$STOP (.STATUS);
!+
! We now issue the QIO to enable ASTs and specify where to go when one
! goes off.
!-
	    QIO_RESULT = $QIOW (EFN = .EVENT_FLAG, CHAN = .TT_CHAN, FUNC = (IO$_SETMODE OR IO$M_CTRLCAST), P1 = CONTROL_C);

	    IF ( NOT .QIO_RESULT) THEN LIB$STOP (.QIO_RESULT);

	    STATUS = LIB$FREE_EF (EVENT_FLAG);
	    IF (NOT .STATUS) THEN LIB$STOP (.STATUS);

	    END;

!+
! Mark that the user has enabled control C trapping
!-
	CC_ENABLED = 1;
	END;

    RETURN (0);
    END;					! end of BAS$CTRLC


GLOBAL ROUTINE BAS$RCTRLC = 			! Disable Control C interrupts

!++
! FUNCTIONAL DESCRIPTION:
!
!	Disable Control C traps, so that a Control C will cause the
!	user's program to stop, as usual.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns zero.
!
! SIDE EFFECTS:
!
!	Leaves Control C traps disabled.
!
!--

    BEGIN

    LOCAL
	EVENT_FLAG,
	STATUS,
	QIO_RESULT;

!+
! If either BAS$CTRLC has not been called or we are running
! under batch, do nothing.
!-

    IF ((.TT_CHAN NEQU 0) AND ( NOT .CC_DISABLED))
    THEN
	BEGIN
!+
! If we are in the RUN command (where control Cs should always remain
! enabled) or if control Cs are not enabled, don't issue the QIO.
!-

	IF (( NOT .RUN_CMD) AND (.CC_ENABLED))
	THEN
	    BEGIN

	    STATUS = LIB$GET_EF (EVENT_FLAG);
	    IF (NOT .STATUS) THEN LIB$STOP (.STATUS);	
!+
! We now issue the QIO to enable ASTs and specify where to go when one
! goes off.
!-
	    QIO_RESULT = $QIOW (EFN = .EVENT_FLAG, CHAN = .TT_CHAN, FUNC = (IO$_SETMODE OR IO$M_CTRLCAST), P1 = 0);

	    IF ( NOT .QIO_RESULT) THEN LIB$STOP (.QIO_RESULT);

	    STATUS = LIB$FREE_EF (EVENT_FLAG);
	    IF (NOT .STATUS) THEN LIB$STOP (.STATUS);

	    END;

!+
! Indicate that the user does not want control C traps.
!-
	CC_ENABLED = 0;
	END;

    RETURN (0);
    END;					! end of BAS$RCTRLC


GLOBAL ROUTINE BAS$$CTRLC_INIT : NOVALUE = 	! Set up for RUN command

!++
! FUNCTIONAL DESCRIPTION:
!
!	Set up for the RUN environment.  Since this image is to run under the RUN
!	command, control C traps are always enabled, from the point of view of
!	VMS.  If one goes off when the user has not enabled for control C traps,
!	the user is not allowed to intercept the signal (because of its severity)
!	and the keyboard monitor gets it instead.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Leaves Control C traps disabled from the user's point of view, but
!	enabled from VMS's point of view.
!
!--

    BEGIN
!+
! Make sure the $ASSIGN and $QIO have been done.
!-
    BAS$CTRLC ();
!+
! Flag that we are in the RUN environment.  This will prevent the
! Control C enable from being turned off, from the point of view
! of VMS.
!-
    RUN_CMD = 1;
!+
! Turn control C enable off from the user's point of view.
!-
    BAS$RCTRLC ();
    RETURN;
    END;					! end of BAS$$CTRLC_INIT


ROUTINE CONTROL_C : NOVALUE = 			! Handle a Control C interrupt

!++
! FUNCTIONAL DESCRIPTION:
!
!	Takes a Control C interrupt, and signals it to the BASIC program.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Calls the user's code by Signaling.
!	If the user is not enabled (which means that the program must
!	be being run under the RUN command) then the signal goes to
!	the keyboard monitor, which may do a continue or an unwind.
!
!--

    BEGIN

    LOCAL
	WAS_ENABLED,
	COND_VAL : BLOCK [4, BYTE];

!+
! Dismiss the AST immediately.  This is necessary to avoid deadlock with
! other routines that wait for an AST that the user may use in his/her
! ctrl/c handler.
!-
    SYS$CLRAST();

!+
! Remember whether or not the user is enabled for Control C.
!-
    WAS_ENABLED = .CC_ENABLED;
!+
! The user is no longer enabled.
!-
    CC_ENABLED = 0;
!+
! If we are in the RUN environment, tell VMS that we wish to remain
! enabled.
!-

    IF (.RUN_CMD)
    THEN
	BEGIN

	LOCAL
	    STATUS,
	    EVENT_FLAG,
	    QIO_RESULT;

	STATUS = LIB$GET_EF (EVENT_FLAG);
	IF (NOT .STATUS) THEN LIB$STOP (.STATUS);

	QIO_RESULT = $QIOW (EFN = .EVENT_FLAG, CHAN = .TT_CHAN, FUNC = (IO$_SETMODE OR IO$M_CTRLCAST), P1 = CONTROL_C);

	IF ( NOT .QIO_RESULT) THEN LIB$STOP (.QIO_RESULT);

	STATUS = LIB$FREE_EF (EVENT_FLAG);
	IF (NOT .STATUS) THEN LIB$STOP (.STATUS);

	END;

!+
! Now signal the appropriate BASIC condition for Control C.
! If the user is not enabled, signal information.
!-
    COND_VAL = BAS$_PROC__TRA;

    IF ( NOT .WAS_ENABLED) THEN COND_VAL [STS$V_SEVERITY] = STS$K_INFO;

    LIB$SIGNAL (.COND_VAL);
!+
! If we get to here, the keyboard monitor received the CONTINUE command.
! Dismiss the AST.
!-
    RETURN;
    END;					! end of CONTROL_C
END						! end of module BAS$RESTORE

ELUDOM
