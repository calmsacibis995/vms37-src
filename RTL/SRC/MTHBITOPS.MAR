	.TITLE	MTH$BITOPS	ROUTINES FOR BIT OPERATIONS
	.IDENT	/1-005/		; File: MTHBITOPS.MAR  Edit: JAW1005

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;
; FACILITY: MATH LIBRARY
;++
; ABSTRACT:
;	This module contains routines for operations on individual
;	bits of arguments.
;
;
;--
;
; VERSION: 0
;
; HISTORY:
;
; AUTHOR:
;	Jonathan M. Taylor, 14-JUL-77: Version 0
;
; MODIFIED BY:
;
;
;

	.SBTTL	HISTORY		; Detailed Current Edit History


; Edit History for Version 0 of MTH$BITOPS
;
; 1-001	- Update version number and copyright notice.  The last
; 1-002	- Add "_" to the PSECT directive.  JBS 21-DEC-78
;	   edit number for version 0 was 3.  JBS 16-NOV-78
; 1-003 - Fix MTH$IIAND, MTH$JIAND.  SPR 11-25743  SBL 8-Aug-1979
; 1-004 - Add routines to support additional functions defined in
;	  MIL-STD 1753 for Fortran: MTH$IMVBITS, MTH$JMVBITS,
;	  MTH$IIBITS, MTH$JIBITS, MTH$IISHFTC, MTH$JISHFTC, MTH$BITEST,
;	  MTH$BJTEST, MTH$IIBSET, MTH$JIBSET, MTH$IIBCLR, MTH$JIBCLR.
;	  JAW  21-May-1981
; 1-005 - Remove the routines added in edit 1-004 and place them in
;	  FOR$BITOPS as FOR$ routines.  JAW 06-Jun-1981

	.SBTTL	DECLARATIONS

;
; INCLUDE FILES:
;	oerr.mar
;

;
; EXTERNAL SYMBOLS:
;	NONE
;

;
; MACROS:
;	NONE
;

;
; PSECT DECLARATIONS:
	.PSECT	_MTH$CODE	PIC, SHR, LONG, EXE, NOWRT

;
; EQUATED SYMBOLS:
;	NONE
;

;
; OWN STORAGE:
;	NONE
;

	.SBTTL	MTH$IIAND

;++
; FUNCTIONAL DESCRIPTION:
;	Return the bitwise AND of two one-word arguments.
;
;
; CALLING SEQUENCE:
;	Bitwise_AND.ww.v = MTH$IIAND (arg1.rw.r, arg2.rw.r)
;	
;
;
; INPUT PARAMETERS:
;	Both arguments are one-word values and are call-by-reference.
;	
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	NONE
;
;--

	.ENTRY	MTH$IIAND,	^M<>
	MCOMW	@4(AP), R0	; R0 = complemented first arg
	BICW3	R0, @8(AP), R0	; R0 = ANDed args
	RET

	.SBTTL	MTH$JIAND

;++
; FUNCTIONAL DESCRIPTION:
;	Return the bitwise AND of two longword arguments.
;
;
; CALLING SEQUENCE:
;	Bitwise_AND.wl.v = MTH$JIAND (arg1.rl.r, arg2.rl.r)
;	
;
;
; INPUT PARAMETERS:
;	The two parameters are longword values and are call-by-reference.
;	
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	NONE
;
;--


	.ENTRY	MTH$JIAND,	^M<>
	MCOML	@4(AP), R0	; R0 = complemented first arg
	BICL3	R0, @8(AP), R0	; R0 = ANDed args
	RET

	.SBTTL	MTH$IIOR

;++
; FUNCTIONAL DESCRIPTION:
;	Return the bitwise inclusive OR of two one-word arguments.
;
;
; CALLING SEQUENCE:
;	Bitwise_inclusive_OR.ww.v = MTH$IIOR (arg1.rw.r, arg2.rw.r)
;	
;
;
; INPUT PARAMETERS:
;	The two parameters are one-word values and are call-by-reference.
;	
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	NONE
;
;--


	.ENTRY	MTH$IIOR,	^M<>
	BISW3	@4(AP), @8(AP), R0 ; R0 = ORed args
	RET

	.SBTTL	MTH$JIOR

;++
; FUNCTIONAL DESCRIPTION:
;	Return the bitwise inclusive OR of two longword arguments.
;
;
; CALLING SEQUENCE:
;	Bitwise_inclusive_OR.wl.v = MTH$JIOR (arg1.rl.r, arg2.rl.r)
;	
;
;
; INPUT PARAMETERS:
;	The two parameters are longword values and are call-by-reference.
;	
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	NONE
;
;--


	.ENTRY	MTH$JIOR,	^M<>
	BISL3	@4(AP), @8(AP), R0 ; R0 = ORed args
	RET

	.SBTTL	MTH$IIEOR

;++
; FUNCTIONAL DESCRIPTION:
;	Return the bitwise XOR of two one-word arguments.
;
;
; CALLING SEQUENCE:
;	Bitwise_exclusive_OR.ww.v = MTH$IIEOR (arg1.rw.r, arg2.rw.r)
;	
;
;
; INPUT PARAMETERS:
;	The two parameters are one-word values and are call-by-reference.
;	
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	NONE
;
;--


	.ENTRY	MTH$IIEOR,	^M<>
	XORW3	@4(AP), @8(AP), R0 ; R0 = XORed args
	RET

	.SBTTL	MTH$JIEOR

;++
; FUNCTIONAL DESCRIPTION:
;	Return the bitwise XOR of two longword arguments.
;
;
; CALLING SEQUENCE:
;	Bitwise_exclusive_or.wl.v = MTH$JIEOR (arg1.rl.r, arg2.rl.r)
;	
;
;
; INPUT PARAMETERS:
;	The two arguments are longword values and are call-by-reference.
;	
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	NONE
;
;--


	.ENTRY	MTH$JIEOR,	^M<>
	XORL3	@4(AP), @8(AP), R0 ; R0 = XORed args
	RET

	.SBTTL	MTH$INOT

;++
; FUNCTIONAL DESCRIPTION:
;	Return the bitwise NOT of a one-word argument.
;
;
; CALLING SEQUENCE:
;	Bitwise_complement.ww.v = MTH$INOT (arg.rw.r)
;	
;
;
; INPUT PARAMETERS:
;	The one parameter is a one-word value and is call-by-reference.
;	
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	NONE
;
;--


	.ENTRY	MTH$INOT,	^M<>
	MCOMW	@4(AP), R0	; R0 = complemented arg
	RET

	.SBTTL	MTH$JNOT

;++
; FUNCTIONAL DESCRIPTION:
;	Return the bitwise NOT of a longword argument.
;
;
; CALLING SEQUENCE:
;	Bitwise_complement.wl.v=MTH$JNOT (arg.rl.r)
;	
;
;
; INPUT PARAMETERS:
;	The one parameter is a longword value and is call-by-reference.
;	
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	NONE
;
;--


	.ENTRY	MTH$JNOT,	^M<>
	MCOML	@4(AP), R0	; R0 = complemented arg
	RET

	.SBTTL	MTH$IISHFT

;++
; FUNCTIONAL DESCRIPTION:
;	Return the result of shifting arg1 by arg2 places.
;
;
; CALLING SEQUENCE:
;	Bitwise_shift.ww.v = MTH$IISHFT (arg1.rwu.r, shiftcount.rw.r)
;	
;
;
; INPUT PARAMETERS:
;	Both arguments are one-word values and are call-by-reference.
;	
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	NONE
;
;--


	.ENTRY	MTH$IISHFT,	^M<>
	MOVZWL	@4(AP), R0	; R0 = zero-extended arg
	ASHL	@8(AP), R0, R0	; so right shift brings in zeroes
	RET

	.SBTTL	MTH$JISHFT

;++
; FUNCTIONAL DESCRIPTION:
;
;	Return the result of shifting arg1 by arg2 places
; CALLING SEQUENCE:
;	Bitwise-shift.wl.v = MTH$JISHFT (arg1.rlu.r, shiftcount.rl.r)
;
;
; INPUT PARAMETERS:
;	Both arguments are longword values and are call-by-references.
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	NONE
;
;--


	.ENTRY	MTH$JISHFT,	^M<>
	MOVL	@4(AP), R0	; R0 = arg to shift
	CLRL	R1		; R1 = 0 so right shift brings in zeroes
	ASHQ	@8(AP), R0, R0	; shift R0 by arg2 bits
	RET

	.END
