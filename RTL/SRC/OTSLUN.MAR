	.TITLE	OTS$$LUN - Resource allocator for logical unit numbers
	.IDENT	/1-003/			; File: OTSLUN.MAR

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY: Language-independent language support
;
; ABSTRACT:
;
;	Three routines for allocating and deallocating logical unit
;	numbers.  Using these routines allows use of logical unit
;	numbers by multiple procedures without conflicts.
;
; ENVIRONMENT: User Mode, AST Reentrant
;
;--
; AUTHOR: John Sauter, CREATION DATE: 26-JAN-1979
;
; MODIFIED BY:
;

; 1-001	- Original from LIB$EF.  JBS 26-JAN-1979
; 1-002	- Don't try to use FFC with a 100-bit size.  JBS 26-JAN-1979
; 1-003	- Allocate 100 bits, not 99.  JBS 27-JAN-1979

	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;
	$LUBDEF			; Define LUB$K_LUN_MAX
;
; EXTERNAL DECLARATIONS:
;
	.DSABL	GBL				; Prevent undeclared
						; symbols from being
						; automatically global.
;
; MACROS:
;
;	NONE
;
; EQUATED SYMBOLS:
;
	lun = 4			; LUN parameter
;
; OWN STORAGE:
;
	.PSECT	_OTS$DATA RD, WRT, NOEXE, NOSHR, PIC, LONG, -
		         CON, LCL, REL, USR

LUN_POOL:			; Pool of available LUNs
	.BYTE	0[<LUB$K_LUN_MAX-LUB$K_LUN_MIN+8>/8]
;
; PSECT DECLARATIONS:
;
	.PSECT _OTS$CODE PIC, USR, CON, REL, LCL, SHR, -
			EXE, RD, NOWRT, LONG


	.SBTTL	OTS$$GET_LUN - Allocate one logical unit number
;++
; FUNCTIONAL DESCRIPTION:
;
;	OTS$$GET_LUN allocates one logical unit number from a process-wide
;	pool.  If a LUN is available for use, its number is returned
;	to the caller.  If no LUNs are available, an error is returned
;	as the function value.
;
; CALLING SEQUENCE:
;
;	status.wlc.v = OTS$$GET_LUN (LUN.wl.r)
;
; INPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT INPUTS:
;
;	LUN_POOL, a table of available logical unit numbers in
;	OWN storage
;
; OUTPUT PARAMETERS:
;
;	LUN.wl.r	- The LUN allocated, or -1 if none were available.
;
; IMPLICIT OUTPUTS:
;
;	If successful, an entry is made into LUN_POOL indicating that
;	a logical unit number has been reserved.
;
; FUNCTION VALUE:
; COMPLETION CODES:
;
;	1 = success, 0 = failure
; SIDE EFFECTS:
;
;	NONE
;
;--

	.ENTRY OTS$$GET_LUN, ^M<IV>	; Save nothing

;+
;	Scan LUN_POOL for first available LUN 
;-

SCAN:
	SKPC	#255, #<LUB$K_LUN_MAX+8>/8, LUN_POOL
	BEQL	ALL_OUT			; None available
	SUBL3	R0, #<LUB$K_LUN_MAX+8>/8, R0
	ASHL	#3, R0, R0		; Approximate LUN
	FFC	#0, #8, (R1), R1	; Find exact LUN
	BEQL	SCAN			; An AST took all in this byte
	ADDL2	R1, R0			; Exact LUN
	CMPL	R0, #LUB$K_LUN_MAX	; Is it too big?
	BGTR	ALL_OUT			; Yes, all LUNs are reserved

;+
;	Now recheck and set the bit under interlock, in case someone
;	has set it at AST level in the meantime.
;-

FOUND:
	BBSS	R0, LUN_POOL, SCAN	; Repeat scan if already set

;+
;	Return success with logical unit number in LUN.
;-

	MOVL	R0, @lun(AP)		; Store LUN
	MOVL	#1, R0			; SS$_NORMAL
	RET				; Exit

;+
;	Return error since no LUNs available
;-

ALL_OUT:
	MNEGL	#1, @lun(AP)		; Set LUN to -1
	CLRL	R0			; Insufficient LUNs
	RET				; Exit


	.SBTTL	OTS$$FREE_LUN - Deallocate one logical unit number
;++
; FUNCTIONAL DESCRIPTION:
;
;	OTS$$FREE_LUN is the complement of OTS$$GET_LUN.  When a routine
;	called OTS$$GET_LUN to allocate a LUN, and no
;	longer needs it, OTS$$FREE_LUN should be called to free the
;	LUN for use by other routines.
;
; CALLING SEQUENCE:
;
;	status.wlc.v = OTS$$FREE_LUN (LUN.rl.r)
;
; INPUT PARAMETERS:
;
;	LUN.rl.r	- The logical unit number to be
;			  deallocated.  This is the value returned
;			  to the user by OTS$$GET_LUN.
;
; IMPLICIT INPUTS:
;
;	LUN_POOL, a table of available logical unit numbers in OWN
;	storage.
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	An entry is made in LUN_POOL indicating that the LUN
;	is free for use.
;
; FUNCTION VALUE:
; COMPLETION CODES:
;
;	1 = success, 0 = failure
; SIDE EFFECTS:
;
;	NONE
;
;--

	.ENTRY OTS$$FREE_LUN, ^M<IV>	; Save nothing

;+
;	Check to see if LUN is in the proper range.
;-

	CMPL	@lun(AP), #LUB$K_LUN_MAX ; Bigger than 99?
	BGTR	RES_SYS_1		; Yes, error
	TSTL	@lun(AP)		; Less than 0?
	BLSS	RES_SYS_1		; Yes, error
;+
;	LUN is in range.  Now, unset the bit.
;-

	BBCC	@lun(AP), LUN_POOL, ALR_FRE	; Clear but error if 
					; already clear.

;+
;	Return success
;-

	MOVL	#1, R0			; SS$_NORMAL
	RET

;+
;	Error if LUN is not in the proper range
;-

RES_SYS_1:
	CLRL	R0			; LUN invalid
	RET

;+
;	Error if LUN already free.
;-

ALR_FRE:
	CLRL	R0			; LUN already free
	RET


	.SBTTL	OTS$$TAKE_LUN - Take a particular LUN
;++
; FUNCTIONAL DESCRIPTION:
;
;	OTS$$TAKE_LUN is used when a routine wants to allocate
;	a particular LUN.  This is different
;	from OTS$$GET_LUN which allocates an arbitrary LUN.
;
;	To deallocate an LUN reserved with OTS$$TAKE_LUN
;	use OTS$$FREE_LUN.
;
; CALLING SEQUENCE:
;
;	status.wlc.v = OTS$$TAKE_LUN (LUN.rl.r)
;
; INPUT PARAMETERS:
;
;	LUN	- The logical unit number desired to be
;			  allocated.
;
; IMPLICIT INPUTS:
;
;	LUN_POOL, a table of available LUNs located in OWN
;	storage.
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	An entry is made in LUN_POOL indicating that the LUN
;	is allocated.
;
; FUNCTION VALUE:
; COMPLETION CODES:
;
;	1 = success, 0 = failure
; SIDE EFFECTS:
;
;	NONE
;
;--

	.ENTRY OTS$$TAKE_LUN, ^M<IV>	; Save nothing

;+
;	First check to see if LUN is in range.
;-

	CMPL	@lun(AP), #LUB$K_LUN_MAX ; Greater than 99?
	BGTR	RES_SYS_2		; Yes, error
	TSTL	@lun(AP)		; Less than 0?
	BLSS	RES_SYS_2		; Yes, error
;+
;	Now attempt to allocate that LUN
;-

	BBSS	@lun(AP), LUN_POOL, ALR_RES ; Reserve it, but error
					; if already reserved.

;+
;	Return success
;-

	MOVL	#1, R0			; SS$_NORMAL
	RET				; Exit

;+
;	Error if LUN out of range
;-

RES_SYS_2:
	CLRL	R0			; Invalid logical unit number
	RET				; Exit

;+
;	Error if already allocated.
;-

ALR_RES:
	CLRL	R0			; Logical unit number taken already
	RET				; Exit

	.END
