%TITLE 'FOR$UNDERF - Fortran underflow exception handler'
MODULE FOR$UNDERF (
		IDENT = '1-003'		! File: FORUNDERF.B32  Edit: JAW1003
		) =
BEGIN
!++
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!
! FACILITY:	Fortran Support Library
!
! ABSTRACT:
!
!	This module contains a condition handler for floating underflow
!	exceptions and an exit handler to report the number of underflow
!	exceptions at image exit.
!
! ENVIRONMENT:	Runs at any access mode - AST reentrant
!
! AUTHOR: John A. Wheeler, CREATION DATE: 21-Aug-1981
!
! MODIFIED BY:
!
! 1-001	- Original.  JAW 21-Aug-1981
! 1-002 - Remove address of UNDERFLOW_COUNT from exit control block, as
!	  count is now referenced directly.  Remove unused external
!	  reference to LIB$MATCH_COND.  JAW 25-Aug-1981
! 1-003 - Change name of FOR$HANDLER to FOR$UNDERFLOW_HANDLER.  Give the
!	  threshold value a non-public name.  Include severity in
!	  condition check to preclude counting the same exception twice
!	  at more than one level.  JAW 29-Aug-1981
!--


%SBTTL 'Declarations'
!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!
!	NONE
!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    FOR$UNDERFLOW_HANDLER,
    EXIT_HANDLER : NOVALUE;

!
! INCLUDE FILES:
!

LIBRARY 'RTLSTARLE';

REQUIRE 'RTLML:FORMSG';
REQUIRE 'RTLML:OTSMSG';
REQUIRE 'RTLML:MTHMSG';

REQUIRE 'RTLIN:RTLPSECT';		! Define PSECT declaration macros

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!

LITERAL
    K_UNDERFLOW_THRESHOLD = 2;		! Message-printing threshold

!
! FIELDS:
!
!	NONE
!
! PSECTS:
!
!	Specify page alignment (9) for the OWN psect, so that EXIT_BLOCK
!	will not occupy the same page as a user variable that is being
!	WATCHed, and thus be unwriteable when $DCLEXH is called.

DECLARE_PSECTS (FOR, 9);		! Declare PSECTs for FOR$ facility

!
! OWN STORAGE:
!

    OWN
	UNDERFLOW_COUNT : VOLATILE,	! Number of underflows which have
					!  occurred (and have reached FOR$UNDERFLOW_HANDLER)
	EXIT_HNDLR_LOCK : INITIAL (0)	! Flag indicating whether exit
	    VOLATILE;			!  handler has been declared yet

!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    LIB$SIM_TRAP,
    LIB$SIGNAL,
    LIB$STOP;

GLOBAL ROUTINE FOR$UNDERFLOW_HANDLER (	! FORTRAN floating underflow handler
SIG_ARGS_ADR,				! Address of signal array
MCH_ARGS_ADR,				! Address of mechanism array
ENB_ARGS_ADR				! Address of enable array
    ) =					! A handler always has a value

    BEGIN

    MAP
	SIG_ARGS_ADR : REF BLOCK [, BYTE],
	MCH_ARGS_ADR : REF BLOCK [, BYTE],
	ENB_ARGS_ADR : REF VECTOR;

    OWN
	EXIT_REASON,			! Reason for image exit (not used)

	EXIT_BLOCK : VECTOR [4] INITIAL	! Exit control block for $DCLEXH
	    (0,				!  Forward link (filled in by VMS)
	    0,				!  Exit handler address
	    2,				!  Number of arguments to exit handler
	    0);				!  Address of EXIT_REASON

    LOCAL
	DCLEXH_STATUS,			! Result of $DCLEXH
	AST_STATUS;			! Result of $SETAST

    !+
    ! If the exception is any form of floating underflow (fault, trap or
    ! math library condition), count it, print a message if not yet over
    ! the limit, and continue.
    !-

    IF (.SIG_ARGS_ADR [CHF$L_SIG_NAME] AND (STS$M_COND_ID OR STS$M_SEVERITY)) EQL
			 (SS$_FLTUND_F AND (STS$M_COND_ID OR STS$M_SEVERITY))
    THEN

	!+
	! A fault.
	!
	! Convert the fault to a trap.  Control will not return from
	! LIB$SIM_TRAP; rather, a new exception (a trap) will occur.
	!-

	LIB$SIM_TRAP (.SIG_ARGS_ADR, .MCH_ARGS_ADR)

    ELSE
	IF ((.SIG_ARGS_ADR [CHF$L_SIG_NAME] AND (STS$M_COND_ID OR STS$M_SEVERITY)) EQL
				(SS$_FLTUND AND (STS$M_COND_ID OR STS$M_SEVERITY)))
	    OR
	   ((.SIG_ARGS_ADR [CHF$L_SIG_NAME] AND (STS$M_COND_ID OR STS$M_SEVERITY)) EQL
			    (MTH$_FLOUNDMAT AND (STS$M_COND_ID OR STS$M_SEVERITY)))
	THEN
	    BEGIN

	    !+
	    ! A trap or math library condition.
	    !
	    ! Count the underflow.  Then check EXIT_HNDLR_LOCK to see
	    ! whether the exit handler has been declared yet (1 = yes,
	    ! 0 = maybe).  If maybe, disable ASTs and recheck.  This
	    ! assures that the exit handler will be declared only once
	    ! even if underflows occur at AST level.
	    !-

	    UNDERFLOW_COUNT = .UNDERFLOW_COUNT + 1;

	    IF NOT .EXIT_HNDLR_LOCK
	    THEN
		BEGIN
		AST_STATUS = $SETAST (ENBFLG = 0);
		IF NOT .EXIT_HNDLR_LOCK
		THEN
		    BEGIN

		    !+
		    ! Fill in the exit control block (at run time, to
		    ! keep it position-independent), declare the exit
		    ! handler, and set the lock.
		    !-

		    EXIT_BLOCK [1] = EXIT_HANDLER;
		    EXIT_BLOCK [3] = EXIT_REASON;
		    DCLEXH_STATUS = $DCLEXH (DESBLK = EXIT_BLOCK);
		    EXIT_HNDLR_LOCK = 1
		    END
		ELSE
		    DCLEXH_STATUS = 1;

		IF .AST_STATUS EQL SS$_WASSET THEN $SETAST (ENBFLG = 1);

		IF NOT .DCLEXH_STATUS THEN LIB$STOP (OTS$_FATINTERR) ELSE 1
		END;

	    !+
	    ! If the number of underflows does not yet exceed the
	    ! message threshold, change the severity of the condition to
	    ! ERROR and resignal it so the catch-all handler will print
	    ! a message and continue.  Otherwise just continue.
	    !-

	    IF .UNDERFLOW_COUNT LEQ K_UNDERFLOW_THRESHOLD
	    THEN
		BEGIN
		BLOCK [SIG_ARGS_ADR [CHF$L_SIG_NAME], STS$V_SEVERITY; , BYTE] = STS$K_ERROR;
		RETURN SS$_RESIGNAL
		END
	    ELSE
		RETURN SS$_CONTINUE
	    END

	ELSE

	    !+
	    ! Resignal the exception, since it is not an underflow.
	    !-

	    RETURN SS$_RESIGNAL

    END;				! End of routine FOR$UNDERFLOW_HANDLER

ROUTINE EXIT_HANDLER (
	EXIT_REASON
    ) : NOVALUE =
    BEGIN

    !+
    ! Cause a message containing the total number of underflows to be
    ! printed if nonzero.  The severity is STS$K_INFO = 3 = INFORMATION.
    !-

    IF .UNDERFLOW_COUNT GTR 0
    THEN
	LIB$SIGNAL (FOR$_FLOUNDEXC, 1, .UNDERFLOW_COUNT);

    END;				! End of routine EXIT_HANDLER

END					! End of module FOR$UNDERF
ELUDOM
