	.TITLE	LIB$POLYF - Perform floating polynomial calculation
	.IDENT	/1-005/		; File: LIBPOLYF.MAR  Edit: SBL1005

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY: General Utility Library
;
; ABSTRACT:
;
;	Perform single precision floating point polynomial calculation.
;
; ENVIRONMENT: User Mode, AST Reentrant
;
;--
; AUTHOR: Steven B. Lionel, CREATION DATE: 05-Oct-78
;
; MODIFIED BY:
;
;	SBL, 05-Oct-78: VERSION 1
; 1-001	- Original 
; 1-002	- Put version number in standard format, with three digits in
;	   the edit number.  JBS 16-NOV-78
; 1-003	- Add "_" to the PSECT directive.  JBS 21-DEC-78
; 1-004 - Minor code improvements.  SBL 05-Feb-79
; 1-005 - Use local handler to insure that all exceptions other than those
;	  documented as being statuses are resignalled.  SBL 25-Sept-1980

	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;
	$CHFDEF					; Condition handling macros
	$SSDEF					; System symbols
;
; EXTERNAL DECLARATIONS:
;
	.EXTRN	LIB$SIG_TO_RET			; Library routine to convert
						; a signal to an error return
						; to caller of LIB$POLYF.
						; R0 = signalled condition

;
; MACROS:
;

;
; EQUATED SYMBOLS:
;

	arg = 4					; argument
	degree = 8				; degree of polynomial
	coeff = 12				; address of coefficient
	result = 16				; result of polynomial
						; table
;
; OWN STORAGE:
;

;
; PSECT DECLARATIONS:
;
	.PSECT _LIB$CODE PIC, USR, CON, REL, LCL, SHR, -
			EXE, RD, NOWRT, LONG


	.SBTTL	LIB$POLYF - Perform floating polynomial
;++
; FUNCTIONAL DESCRIPTION:
;
;	LIB$POLYF provides the functionality of the VAX hardware
;	instruction POLYF to high level language users.
;
;	The third operand points to a table (array) of single
;	precision floating point coefficients.  The coefficient of
;	the highest order term of the polynomial is pointed to
;	by the table address operand, i.e. the first table element.
;	The table is specified with lower order coefficients stored
;	at increasing addresses.
;
;	The evaluation is carried out by Horner's method, and the
;	result is stored at the location pointed to by the fourth
;	operand.  The result computed is:
;
;		if d = degree
;		and x = arg
;		result = C[0]+x*(C[1]+x*(C[2]+ ... x*C[d]))
;
;	The unsigned word degree operand specifies the highest
;	numbered coefficient to participate in the evaluation.
;
;	For further detail, refer to the VAX-11/780 Architecture
;	Handbook for the description of POLYF.
;
; CALLING SEQUENCE:
;
;	status.wlc.v = LIB$POLYF (arg.rf.r, degree.rw.r, coeff.rf.ra,
;				  result.wf.r)
;
; INPUT PARAMETERS:
;
;	arg.rf.r	- argument, "x" in polynomial
;	degree.rw.r	- degree of polynomial (GEQ 0)
;	coeff.rf.ra	- table of coefficients, floating
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	result.wf.r	- result of calculation
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; FUNCTION VALUE:
;
;	SS$_NORMAL	- successful execution
;	SS$_FLTOVF	- floating overflow
;	SS$_FLTUND	- floating underflow
;	SS$_ROPRAND	- reserved operand, see VAX Architecture
;			  manual for more details
;
; SIDE EFFECTS:
;
;	All other exceptions are signalled
;
;--

	.ENTRY	LIB$POLYF, ^M<IV,R2,R3>		; Entry point, enable int. ovf.
						; and save R2, R3

	MOVAB	B^HANDLER, (FP)			; Enable local handler to
						; exceptions

	POLYF	@arg(AP), -			; perform polynomial
		@degree(AP), -			; trap on exception to
		@coeff(AP)			; handler which will
						; unwind a return error
						; condition in R0 to
						; caller of LIB$POLYF.

	MOVL	R0, @result(AP)			; return value

	MOVZBL	#1, R0				; success status code

	RET					; return

HANDLER:
	.WORD	0

;+
;   If the exception is one of the documented exceptions for this routine,
;   call LIB$SIG_TO_RET to return it as a status.  Otherwise, resignal.
;   Also, resignal if the depth is not zero.
;-

	MOVL	CHF$L_MCHARGLST(AP), R0		; Get mechanism vector address
	TSTL	CHF$L_MCH_DEPTH(R0)		; Is depth zero?
	BNEQ	90$				; If not, resignal
	MOVL	CHF$L_SIGARGLST(AP), R1		; Get signal vector address
	MOVL	CHF$L_SIG_NAME(R1), R0		; Get signalled condition
	CMPW	R0, #SS$_FLTOVF			; Compare conditions
	BEQL	10$				; If it matches, don't resignal
	CMPW	R0, #SS$_FLTUND
	BEQL	10$
	CMPW	R0, #SS$_ROPRAND
	BEQL	10$
	CMPW	R0, #SS$_FLTUND_F
	BNEQ	5$
	MOVZWL	#SS$_FLTUND, CHF$L_SIG_NAME(R1)	; Change fault code to trap code
	BRB	10$
5$:	CMPW	R0, #SS$_FLTOVF_F
	BNEQ	90$
	MOVZWL	#SS$_FLTOVF, CHF$L_SIG_NAME(R1)
10$:	CALLG	(AP), G^LIB$SIG_TO_RET		; Return signal as a status
	RET
90$:	MOVZWL	#SS$_RESIGNAL, R0		; Resignal condition
	RET


	.END
