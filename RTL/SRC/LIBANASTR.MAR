	.TITLE	LIB$ANALYZE_SDESC - Analyze string descriptor
	.IDENT	/1-001/		; File: LIBANASTR.MAR Edit: RKR1001

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY: General Utility Library
;
; ABSTRACT:
;
;	This module contains routines which extract the length and
;	address of the first byte of a string from any supported
;	class of string descriptor.
;
; ENVIRONMENT: Runs at any access mode, AST Reentrant
;
; AUTHOR: R. Reichert, CREATION DATE: 2-NOV-1981
;
; MODIFIED BY:
;
; 1-001	- Original. RKR 2-NOV-1981
;--

	.SBTTL	DECLARATIONS
;
; LIBRARY MACRO CALLS:
;
	$DSCDEF			; DSC$_ symbols
	$SSDEF			; SS$_ symbols
;
; EXTERNAL DECLARATIONS:
;
; Prevent undeclared symbols from being automatically global.
;
	.DSABL	GBL
	.EXTRN	LIB$_INVSTRDES		; Invalid string descriptor
;
; MACROS:
;
;	NONE
;
; EQUATED SYMBOLS:
;
;	NONE
;
; OWN STORAGE:
;
	.PSECT _LIB$DATA PIC, USR, CON, REL, LCL, NOSHR, -
			NOEXE, RD, WRT, LONG
;
;	NONE
;
; PSECT DECLARATIONS:
;
	.PSECT _LIB$CODE PIC, USR, CON, REL, LCL, SHR, -
			EXE, RD, NOWRT, LONG


	.SBTTL	LIB$ANALYZE_SDESC - Analyze string descriptor
;++
; FUNCTIONAL DESCRIPTION:
;
;	Extracts length and address of 1st data byte from any supported
;	class of string descriptor.
;
; CALLING SEQUENCE:
;
;	ret_status.wlc.v = LIB$ANALYZE_SDESC (DESC.rt.dx,
;					      LENGTH.ww.r,
;					      ADDR.wa.r )
;
; FORMAL PARAMETERS:
;
;	DESC.rt.dx	address of a string descriptor
;
;	LENGTH.ww.r	address of a word to receive the strings length
;
;	ADDR.wa.r	address of a longword to receive the address
;			of the 1st data byte of the string.
; IMPLICIT INPUTS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION STATUS: 
;
;	SS$_NORMAL	Normal successful completion
;	LIB$_INVSTRDES	Invalid string descriptor
;
; SIDE EFFECTS:
;
;	NONE
;
;--

; Parameter displacements off AP
DESC		= 4
LENGTH		= 8
ADDR		= 12

	.ENTRY LIB$ANALYZE_SDESC, ^M<IV,R2>	; Entry point
	MOVL	DESC(AP), R0		; address of descriptor
	JSB	G^LIB$ANALYZE_SDESC_R2	; length ->R1
					; address->R2
					; status ->R0
	MOVW	R1, @LENGTH(AP)		; length to callers variable
	MOVL	R2, @ADDR(AP)		; address to callers variable
	RET				; Return, with status in R0.

	.SBTTL	LIB$ANALYZE_SDESC_R2 - Analyze string descriptor
;++
; FUNCTIONAL DESCRIPTION:
;
;	Extracts length and address of 1st data byte from any supported
;	class of string descriptor.
;
; CALLING SEQUENCE:
;
;	LIB$ANALYZE_SDESC (DESC.rt.dx, LENGTH.wl.v, ADDR.wa.v )
;
; FORMAL PARAMETERS:
;
;	DESC.rt.dx	(In R0) address of a string descriptor
;
;	LENGTH.wl.v	(Returned in R1) the strings length
;
;	ADDR.wa.v	(Returned in R2) the address
;			of the 1st data byte of the string.
; IMPLICIT INPUTS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION STATUS: 
;
;	SS$_NORMAL	Normal successful completion
;	LIB$_INVSTRDES	Invalid string descriptor
;
; SIDE EFFECTS:
;
;	NONE
;
;--

LIB$ANALYZE_SDESC_R2::

	MOVL	DSC$A_POINTER(R0), R2	; assume address of 1st byte
	CASEB	DSC$B_CLASS(R0), #DSC$K_CLASS_Z, #DSC$K_CLASS_VS
10$:	.WORD	CLASS_Z-10$	;  0	Z
	.WORD	CLASS_S-10$	;  1	S
	.WORD	CLASS_D-10$	;  2	D
	.WORD	CLASS_V-10$	;  3	V  (obsolete)
	.WORD	CLASS_A-10$	;  4	A
	.WORD	CLASS_P-10$	;  5	P  (obsolete)
	.WORD	CLASS_PI-10$	;  6	PI (obsolete)
	.WORD	CLASS_J-10$	;  7	J  (obsolete)
	.WORD	CLASS_JI-10$	;  8	JI (obsolete)
	.WORD	CLASS_SD-10$	;  9	SD
	.WORD	CLASS_NCA-10$	; 10	NCA
	.WORD	CLASS_VS-10$	; 11	VS

CLASS_V:			; obsolete classes
CLASS_P:
CLASS_PI:
CLASS_J:
CLASS_JI:
ERROR:	MOVL	#LIB$_INVSTRDES, R0	; unsupported descriptor or
					; invalid length in classes
					; _A or _NCA
	RSB				; return to caller

CLASS_Z:			; read like class _S
CLASS_S:
CLASS_D:
CLASS_SD:
	MOVZWL	DSC$W_LENGTH(R0), R1	; length
	MOVL	#SS$_NORMAL, R0		; success status
	RSB				; return to caller

CLASS_NCA:			; assume its really contiguous
CLASS_A:
	MOVL	DSC$L_ARSIZE(R0), R1
	BITL	#^XFFFF0000, R1		; make sure < 2**16 -1
	BNEQU	ERROR			; else reject
	MOVL	#SS$_NORMAL, R0		; success status
	RSB				; return to caller

CLASS_VS:			; varying string
	MOVZWL	(R2)+, R1		; length -> R1, R2 -> addr of
					; 1st data byte
	MOVL	#SS$_NORMAL, R0		; success status
	RSB				; return to caller

	.END			; End of module LIB$ANALYZE_SDESC
