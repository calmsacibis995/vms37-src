MODULE STR$DUPL_CHAR (		! Duplicate a character in a string

		IDENT = '1-008'	! File: STRDUPLCH.B32	Edit: RKR1008

		     ) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY: String support library
!
! ABSTRACT:
!
!	This routine fills a string with an input number (defaults to
!	1) of an input character (defaults to space).
!
! ENVIRONMENT: User mode, AST level or not or mixed
!
! AUTHOR: R. Will,  CREATION DATE: 13-Mar-79
!
! MODIFIED BY:
!
! 	R. Will, 13-Mar-79: VERSION 01
! 1-001	- Original
! 1-002	- Use STR$K_FILL_CHAR.  JBS 15-APR-1979
! 1-003 - String cleanup.  Change name to STR$.  RW  8-Nov-79
! 1-004	- Don't use the string interlock macros from JSB entry
!	  points.  JBS 15-NOV-1979
! 1-005 - String speedup.  RW  7-Jan-1980
! 1-006 - Enhance to accomodate additional classes of destination
!	  descriptors by using $STR$GET_LEN_ADDR to extract length
!	  and address of 1st data byte indicated by descriptor.
!	  Remove string interlocking code.
!	  RKR 20-APR-1981
! 1-007 - Speed up code.  RKR 7-OCT-1981.
! 1-008 - Use $STR$SIGNAL_FATAL rather that $STR$CHECK_STATUS.
!	  RKR 18-NOV-1981.
!--

!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE 
		(EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!

REQUIRE 'RTLIN:STRLNK';		! Use require file with string linkage

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    STR$DUPL_CHAR,			! Fill a string with a character
    STR$DUPL_CHARR8 : STR$JSB_DUPL_CH;	! JSB entry point

!
! INCLUDE FILES:
!

REQUIRE 'RTLIN:RTLPSECT';		! Use to declare PSECTs

REQUIRE 'RTLIN:STRMACROS';		! Use string macros to code

LIBRARY 'RTLSTARLE';			! STARLET library for macros 
					! and symbols

!
! MACROS : NONE
!

!
! EQUATED SYMBOLS:
!

LITERAL
    DEFAULT_LENGTH = 1;		! Default length of string produced

!
! PSECT DECLARATIONS
!
DECLARE_PSECTS (STR);
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    LIB$STOP;						! signal errors

EXTERNAL LITERAL
    STR$_ILLSTRCLA,			! illegal string class
    STR$_NEGSTRLEN,			! negative string length
    STR$_NORMAL,			! normal successful completion
    STR$_TRU,				! truncation occurred
    STR$_STRTOOLON;			! string too long, >65535

GLOBAL ROUTINE STR$DUPL_CHAR (		! Create a string of a char

	DEST_DESC,	 		! Pointer to dest str desc
	INPUT_LENGTH,			! Number of characters
	INPUT_CHAR	     		! Character to duplicate
			     ) : =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine writes LENGTH characters of CHAR into the string 
!	pointer to by DEST_DESC.  If the destination is a fixed length 
!	string, and LENGTH is greater than the length of the string, 
!	only as many CHARs as will fit are copied.  If destination is 
!	fixed length and LENGTH is less than the destination string 
!	length then LENGTH CHARs are copied and the destination is 
!	padded with blanks.  If the destination is a dynamic string, 
!	after execution of this routine the destination will have a 
!	length of LENGTH.  
!	If the destination has varying string semantics and the LENGTH
!	exceeds MAXSTRLEN, STR$_TRU is returned.
!	The call entry point is implemented by
!	JSBing to the JSB entry point.
!
! FORMAL PARAMETERS:
!
!	DEST_DESC.wt.dx		pointer to destination string descriptor
!	INPUT_LENGTH.rl.r	number of characters to duplicate
!	INPUT_CHAR.rbu.r	ASCII character to duplicate
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION CODES:
!
!	same as STR$DUPL_CHARR8
!
! SIDE EFFECTS:
!
!	same as STR$DUPL_CHARR8
!
!--

    BEGIN

    BUILTIN
	NULLPARAMETER;			! check for optional args

    LOCAL
	CHAR : BYTE,				! character to use
	LENGTH;					! length to use

    MAP
	DEST_DESC : REF $STR$DESCRIPTOR;

    IF NULLPARAMETER (3)		! if character is not input
    THEN 
	CHAR = STR$K_FILL_CHAR		! use the default character
    ELSE 
	CHAR = ..INPUT_CHAR;		! else use the input character

    IF NULLPARAMETER (2)		! if length is not input
    THEN 
	LENGTH = DEFAULT_LENGTH		! use the default
    ELSE 
	LENGTH = ..INPUT_LENGTH;	! else use the input value

    RETURN STR$DUPL_CHARR8 (DEST_DESC [0,0,0,0], .LENGTH, .CHAR);

    END;				!End of STR$DUPL_CHAR

GLOBAL ROUTINE STR$DUPL_CHARR8 (	! Create a string of a char

	DEST_DESC,	 		! Pointer to dest str desc
	INPUT_LENGTH,			! Number of characters
	INPUT_CHAR			! Character to duplicate

				) : STR$JSB_DUPL_CH =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine writes LENGTH characters of CHAR into the string 
!	pointer to by DEST_DESC.  If the destination is a fixed length 
!	string, and LENGTH is greater than the length of the string, 
!	only as many CHARs as will fit are copied.  If destination is 
!	fixed length and LENGTH is less than the destination string 
!	length then LENGTH CHARs are copied and the destination is 
!	padded with blanks.  If the destination is a dynamic string, 
!	after execution of this routine the destination will have a 
!	length of LENGTH.
!	If the destination has varying string semantics and the LENGTH
!	exceeds MAXSTRLEN, STR$_TRU is returned.
!
! FORMAL PARAMETERS:
!
!	DEST_DESC.wt.dx		pointer to destination string descriptor
!	INPUT_LENGTH.rl.v	value of no. of characters to duplicate
!	INPUT_CHAR.rbu.v	value of ASCII character to duplicate
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION CODES:
!
!	STR$_NORMAL	if successful completion
!	STR$_NEGSTRLEN	if string length is negative
!	STR$_TRU	if input length is greater than fixed string 
!			length or length greater than MAXSTRLEN for
!			varying string destination
!
! SIDE EFFECTS:
!
!	may allocate or deallocate dynamic string space
!	may signal errors
!		STR$_ILLSTRCLA 	if not supported string class
!		STR$_INSVIRMEM	if can't allocate more dynamic string 
!				space
!		STR$_STRTOOLON	if string length is > 65535 for Class_D
!		STR$_FATINTERR	if debug set in STRMACROS and 
!				consistency error
!
!--

    BEGIN

    LOCAL
	OUT_LEN,			! length of destination string
	OUT_ADDR,			! addr of 1st byte of 
					! destination string
	RETURN_STATUS;			! keep track of status

    MAP
	DEST_DESC : REF $STR$DESCRIPTOR;

!+
! Check for fatal error.
!-
    IF .INPUT_LENGTH GTR 65535
    THEN LIB$STOP (STR$_STRTOOLON);

!+
! Initialize return status.
!-

    RETURN_STATUS = STR$_NORMAL ;

    IF .INPUT_LENGTH LSS 0 
    THEN RETURN_STATUS = STR$_NEGSTRLEN;
!+
! Determine length and address of 1st byte of destination string.
!-
    $STR$GET_LEN_ADDR ( DEST_DESC, OUT_LEN, OUT_ADDR ) ;

!+
! algorithm differs based on the class of the destination string
!-

    CASE .DEST_DESC [DSC$B_CLASS] FROM DSC$K_CLASS_Z TO DSC$K_CLASS_VS OF
	SET

!+
! Classes using fixed-length semantics.
! *************************************
!-

	[DSC$K_CLASS_Z, 
	 DSC$K_CLASS_A,
	 DSC$K_CLASS_NCA,
	 DSC$K_CLASS_SD,
	 DSC$K_CLASS_S] :

	    IF .OUT_LEN LEQ .INPUT_LENGTH 	! if requested length
	    THEN 				! >= string length
		BEGIN
		CH$FILL (.INPUT_CHAR,	! just fill the string
		    .OUT_LEN,		!  for entire length
		    .OUT_ADDR);		!  from beginning of string

		IF .OUT_LEN LSS .INPUT_LENGTH	! if truncation
		THEN 
		    RETURN_STATUS = STR$_TRU;	! return status

		END

	    ELSE 				! else

		!+
		! Pad with fill character after filling with requested
		! character for requested length.
		!-
		CH$FILL (STR$K_FILL_CHAR, 
			 .OUT_LEN - MAX (0, .INPUT_LENGTH),
			 CH$FILL (.INPUT_CHAR,
				  MAX (0, .INPUT_LENGTH),
				  .OUT_ADDR));


!+
! dynamic destination string
! **************************
!-

	[DSC$K_CLASS_D] :
	    BEGIN

	    IF $STR$NEED_ALLOC (MAX (0, .INPUT_LENGTH),	! if allocation
		    ($STR$DYN_AL_LEN (DEST_DESC)))	! needed
	    THEN
		BEGIN			! cannot fill dest directly

		LOCAL
		    ALLOCATE_STATUS,	! get status from allocate
		    TEMP_DESC : $STR$DESCRIPTOR;! create temp descrip

		!+
		! If the allocate succeeds then create the string in
		! the temp, switch the temp and the destination and
		! deallocate the former destination.
		! If the allocate fails, then return the fatal error
		! status.
		!-
		IF (ALLOCATE_STATUS = $STR$ALLOCATE (
		    MAX (0, .INPUT_LENGTH), 	! alloc space to temp
		    TEMP_DESC))
		THEN
		    BEGIN
		    !+
		    ! Fill temp with request for requested length
		    ! from beginning of string.
		    CH$FILL (.INPUT_CHAR,
			     MAX (0, .INPUT_LENGTH),
			     .TEMP_DESC [DSC$A_POINTER]);

		    !+
		    ! Switch temp and destination descriptors.
		    !-
		    $STR$EXCH_DESCS (TEMP_DESC, DEST_DESC);

		    !+
		    ! If the deallocate fails, return the error status.
		    !-
		    IF (NOT (ALLOCATE_STATUS =
			$STR$DEALLOCATE (TEMP_DESC)))	! return former
							! string
		    THEN RETURN_STATUS = .ALLOCATE_STATUS;
		    END

		ELSE 

		    RETURN_STATUS = .ALLOCATE_STATUS;	! allocate 
							! failed
		END

	    ELSE				! else directly fill 
						! destination string
		BEGIN
		CH$FILL (.INPUT_CHAR,		! with requested char.
			 MAX (0, .INPUT_LENGTH),! for requested length
		         .OUT_ADDR);		! from start of string

		DEST_DESC [DSC$W_LENGTH] = MAX (0, .INPUT_LENGTH);
		END;

	    END;

!+
! Class_VS Varying string destination
! ***********************************
!-

	[DSC$K_CLASS_VS]:
	    BEGIN
	    IF .INPUT_LENGTH LEQU .DEST_DESC [DSC$W_MAXSTRLEN]
	    THEN
		BEGIN		! fits within MAXSTRLEN
		!+
		! Fill up to .INPUT_LENGTH chars into destination.
		!-
		CH$FILL (.INPUT_CHAR, 
			 MAX ( 0, .INPUT_LENGTH), 
			 .OUT_ADDR);

		!+
		! Reset CURLEN field to the number of characters copied
		!-
		(.DEST_DESC [DSC$A_POINTER])<0,16> = 
			MAX ( 0, .INPUT_LENGTH) ;

		RETURN_STATUS = STR$_NORMAL ;

		END		! fits within MAXSTRLEN

	    ELSE

		BEGIN		! doesn't fit within MAXSTRLEN
		!+
		! Fill up to MAXSTRLEN chars into destination.
		!-
		CH$FILL (.INPUT_CHAR, 
			 MAX ( 0, .DEST_DESC [DSC$W_MAXSTRLEN]), 
			 .OUT_ADDR) ;

		!+
		! Reset CURLEN field to the number of characters copied
		!-
		(.DEST_DESC [DSC$A_POINTER])<0,16> = 
			MAX ( 0, .DEST_DESC [DSC$W_MAXSTRLEN]) ;

		RETURN_STATUS = STR$_TRU ;

		END;		! doesn't fit within MAXSTRLEN

	    END;

!+
! other classes of descriptors
! ****************************
!-

	[INRANGE, OUTRANGE] : RETURN_STATUS = STR$_ILLSTRCLA;
	TES;

    $STR$SIGNAL_FATAL (RETURN_STATUS);	! Signal the fatal errors
    RETURN .RETURN_STATUS;
    END;					!End of STR$DUPL_CHARR8

END						!End of module

ELUDOM
