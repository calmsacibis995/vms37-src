MODULE FOR$$DISPATCH_T (			! I/O dispatch tables for FORTRAN
		IDENT = '1-019'			! File: FORDISPAT.B32  Edit: JAW1019
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	FORTRAN I/O
!
! ABSTRACT:
!
!	This module contains the Global dispatch tables for the UDF (user data
!	formatter) level and REC (record) level for FORTRAN.
!	In addition it contains a routine which signals errors for invalid
!	statement types.
!
! ENVIRONMENT:
!
!	AST reentrant - all OWN storage is read only
!
! AUTHOR: Donald G. Petersen	, CREATION DATE: 07-Dec-78
!
! MODIFIED BY:
!
! 	DGP,06-Dec-78 : VERSION 1-001
! 1-001	- original.  DGP 06-Dec-78
! 1-002 - Add some functionality to OTS$$SIGDIS_ERR.  DGP 08-Dec-78
! 1-003 - Change dispatch tables to longwords.  DGP 11-Dec-78
! 1-004 - Add Basic READ to dispatch tables.  DGP 12-Dec-78
! 1-005	- Change FORLNK require file to OTSLNK.  JBS 22-DEC-78
! 1-006 - Signal the proper errors in the error routine.  DGP 18-Jan-79
! 1-007	- Change file name to OTSDISPAT to agree with RTL standards
!	   and internal comments.  JBS 27-JAN-1979
! 1-008	- Use 32-bit addresses for externals.  JBS 27-JAN-1979
! 1-009	- Track SBL's changes to the statement types in the ISB.
!	   JBS 09-FEB-1979
! 1-010 - Add GET and PUT.  DGP 19-Feb-79
! 1-011 - Add PRINT USING and straighten up a lot of Basic stuff.  DGP
!	  15-May-79
! 1-012 - Add MAT INPUT.  DGP 05-Jun-79
! 1-013 - Add MAT PRINT.  DGP 15-Jun-79
! 1-014 - Add remaining FORTRAN statement types.  Indexed REWRITE,
!	  keyed READ, internal READ and WRITE.  SBL 18-Jun-1979
! 1-015	- Remove BASIC and change name to FOR$$DISPATCH_T.  The
!	   BASIC part is put into BAS$$DISPATCH_T.  JBS 26-JUN-1979
! 1-016 - Use ISB symbols to determine table size.  SBL 12-July-1979
! 1-017	- Add FOR$$SIGDIS_JSB.  JBS 01-JUL-1979
! ***** - VMS V2.0
! 1-018 - Add table entries for NAMELIST.  SBL 16-July-1980
! 1-019 - Make UDF- and REC-level references WEAK.  JAW 25-Aug-1981
!--

!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGE
!

REQUIRE 'RTLIN:OTSLNK';				! Define all linkages

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    FOR$$SIGDIS_ERR : CALL_CCB NOVALUE,		! Signal a dispatch error
    FOR$$SIGDIS_JSB : JSB_UDF0 NOVALUE;		! (JSB entry point)

!
! INCLUDE FILES:
!

REQUIRE 'RTLIN:RTLPSECT';

REQUIRE 'RTLML:OTSISB';				! Define ISB offsets

REQUIRE 'RTLML:OTSLUB';				! Define LUB offsets

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL LITERAL
    OTS$_FATINTERR,
    OTS$_IO_CONCLO;

EXTERNAL ROUTINE
    LIB$STOP : NOVALUE;				! Signal an error and stop

!+
! Formatting level of abstraction
!-

EXTERNAL ROUTINE
    FOR$$UDF_RF0 : JSB_UDF0 NOVALUE WEAK,	! Initialize read formatted
    FOR$$UDF_RF1 : CALL_CCB NOVALUE WEAK,	! format one I/O list element
    FOR$$UDF_RF9 : JSB_UDF9 NOVALUE WEAK,	! terminate read formatted
    FOR$$UDF_WF0 : JSB_UDF0 NOVALUE WEAK,	! Initialize write formatted
    FOR$$UDF_WF1 : CALL_CCB NOVALUE WEAK,	! Format one I/O list element
    FOR$$UDF_WF9 : JSB_UDF9 NOVALUE WEAK,	! Terminate write formatted
    FOR$$UDF_RU0 : JSB_UDF0 NOVALUE WEAK,	! Initialize read unformatted
    FOR$$UDF_RU1 : CALL_CCB NOVALUE WEAK,	! Transmit one I/O list element
    FOR$$UDF_RU9 : JSB_UDF9 NOVALUE WEAK,	! Terminate read unformatted
    FOR$$UDF_WU0 : JSB_UDF0 NOVALUE WEAK,	! Initialize write unformatted
    FOR$$UDF_WU1 : CALL_CCB NOVALUE WEAK,	! Transmit one I/O list element
    FOR$$UDF_WU9 : JSB_UDF9 NOVALUE WEAK,	! Terminate write unformatted
    FOR$$UDF_RL0 : JSB_UDF0 NOVALUE WEAK,	! Initialize read list-directed
    FOR$$UDF_RL1 : CALL_CCB NOVALUE WEAK,	! Transmit one I/O list element
    FOR$$UDF_RL9 : JSB_UDF9 NOVALUE WEAK,	! Terminate read list directed
    FOR$$UDF_WL0 : JSB_UDF0 NOVALUE WEAK,	! Initialize write list-directed
    FOR$$UDF_WL1 : CALL_CCB NOVALUE WEAK,	! Transmit one I/O list element
    FOR$$UDF_WL9 : JSB_UDF9 NOVALUE WEAK,	! Terminate write list-directed
    FOR$$UDF_RN0 : JSB_UDF0 NOVALUE WEAK,	! Initialize read NAMELIST
					! No UDF_RN1 exists
    FOR$$UDF_RN9 : JSB_UDF9 NOVALUE WEAK,	! Terminate read NAMELIST
    FOR$$UDF_WN0 : JSB_UDF0 NOVALUE WEAK,	! Initialize write NAMELIST
					! No UDF_WN1 exists
    FOR$$UDF_WN9 : JSB_UDF9 NOVALUE WEAK;	! Terminate write NAMELIST

!+
! Record processing level of abstraction
!-

EXTERNAL ROUTINE 				! Read sequential formatted record
    FOR$$REC_RSF0 : JSB_REC0 NOVALUE WEAK,	! read first record
    FOR$$REC_RSF1 : JSB_REC1 NOVALUE WEAK,	! read all subsequent records
    FOR$$REC_RSF9 : JSB_REC9 NOVALUE WEAK,	! terminate read write sequential
    ! formatted record
    FOR$$REC_WSF0 : JSB_REC0 NOVALUE WEAK,	! initialize output buffer
    FOR$$REC_WSF1 : JSB_REC1 NOVALUE WEAK,	! write all but last record
    FOR$$REC_WSF9 : JSB_REC9 NOVALUE WEAK,	! write last record
    ! read sequential unformatted record
    FOR$$REC_RSU0 : JSB_REC0 NOVALUE WEAK,	! read first record
    FOR$$REC_RSU1 : JSB_REC1 NOVALUE WEAK,	! read all subsequent records
    FOR$$REC_RSU9 : JSB_REC9 NOVALUE WEAK,	! terminate read
    ! write sequential unformatted record:
    FOR$$REC_WSU0 : JSB_REC0 NOVALUE WEAK,	! initialize output buffer
    FOR$$REC_WSU1 : JSB_REC1 NOVALUE WEAK,	! write all but last record
    FOR$$REC_WSU9 : JSB_REC9 NOVALUE WEAK,	! write last record
    ! read direct (formatted: and unformatted)
    FOR$$REC_RD0 : JSB_REC0 NOVALUE WEAK,	! read first record
    FOR$$REC_RD1 : JSB_REC1 NOVALUE WEAK,	! read next record
    FOR$$REC_RD9 : JSB_REC9 NOVALUE WEAK,	! terminate read
    ! write direct (formatted: and unformatted)
    FOR$$REC_WD0 : JSB_REC0 NOVALUE WEAK,	! initialize output buffer
    FOR$$REC_WD1 : JSB_REC1 NOVALUE WEAK,	! write next record
    FOR$$REC_WD9 : JSB_REC9 NOVALUE WEAK,	! write last record
    ! read sequential list-directed
    FOR$$REC_RSL0 : JSB_REC0 NOVALUE WEAK,	! read first record
    FOR$$REC_RSL1 : JSB_REC1 NOVALUE WEAK,	! read all subsequent records
    FOR$$REC_RSL9 : JSB_REC9 NOVALUE WEAK,	! terminate read
    ! write sequential list-directed
    FOR$$REC_WSL0 : JSB_REC0 NOVALUE WEAK,	! initialize output buffer
    FOR$$REC_WSL1 : JSB_REC1 NOVALUE WEAK,	! write all but last record
    FOR$$REC_WSL9 : JSB_REC9 NOVALUE WEAK,	! write last record
    ! read memory formatted (DECODE)
    FOR$$REC_RMF0 : JSB_REC0 NOVALUE WEAK,	! initialize pointers to user area
    FOR$$REC_RMF1 : JSB_REC1 NOVALUE WEAK,	! illegal
    FOR$$REC_RMF9 : JSB_REC9 NOVALUE WEAK,	! terminate read
    ! write memory formatted (ENCODE)
    FOR$$REC_WMF0 : JSB_REC0 NOVALUE WEAK,	! initialize output buffer to user area
    FOR$$REC_WMF1 : JSB_REC1 NOVALUE WEAK,	! illegal
    FOR$$REC_WMF9 : JSB_REC9 NOVALUE WEAK,	! terminate write
    FOR$$REC_RKF0 : JSB_REC0 NOVALUE WEAK,	! read keyed formatted
    FOR$$REC_RKF1 : JSB_REC1 NOVALUE,
    FOR$$REC_RKF9 : JSB_REC9 NOVALUE,
    FOR$$REC_RKU0 : JSB_REC0 NOVALUE WEAK,	! read keyed unformatted
    FOR$$REC_RKU1 : JSB_REC1 NOVALUE,
    FOR$$REC_RKU9 : JSB_REC9 NOVALUE,
    FOR$$REC_WXF0 : JSB_REC0 NOVALUE WEAK,	! REWRITE indexed formatted
    FOR$$REC_WXF1 : JSB_REC1 NOVALUE,
    FOR$$REC_WXF9 : JSB_REC9 NOVALUE,
    FOR$$REC_WXU0 : JSB_REC0 NOVALUE WEAK,	! REWRITE indexed unformatted
    FOR$$REC_WXU1 : JSB_REC1 NOVALUE,
    FOR$$REC_WXU9 : JSB_REC9 NOVALUE,
    FOR$$REC_WIF0 : JSB_REC0 NOVALUE WEAK,	! Write internal file
    FOR$$REC_WIF1 : JSB_REC1 NOVALUE,
    FOR$$REC_WIF9 : JSB_REC9 NOVALUE,
    FOR$$REC_RIF0 : JSB_REC0 NOVALUE WEAK,	! Read internal file
    FOR$$REC_RIF1 : JSB_REC1 NOVALUE,
    FOR$$REC_RIF9 : JSB_REC9 NOVALUE,
    FOR$$REC_WSN0 : JSB_REC0 NOVALUE WEAK,	! Write NAMELIST
    FOR$$REC_WSN1 : JSB_REC1 NOVALUE,
						! There is no 9 level REC
						! routine for Write NAMELIST
    FOR$$REC_RSN0 : JSB_REC0 NOVALUE WEAK,	! Read NAMELIST
    FOR$$REC_RSN1 : JSB_REC1 NOVALUE WEAK;
						! There is no 9 level REC
						! routine for Read NAMELIST

!
! OWN STORAGE:
!
DISPATCH_PSECTS (FOR);				! Define GLOBAL PSECTs same as code
						! so short offsets to reach
!<BLF/PAGE>

!+
! GLOBAL DISPATCH VECTORS (indexed by I/O statement type numbers):
! Connects the first level of abstraction (UPI) to the
! second level (UDF). Note: The comments down the
! side describe the I/O statement index (UPI level) into the
! dispatch table rather than the external routine contained in
! the entry (UDF level). The entries are the name of the
! User data formatters (UDF level = 2nd level of abstraction) -
! First letter: R = READ, W = WRITE; second letter: F = formatted,
! W = unformatted, L = list-directed.
! Declare as GLOBAL rather then GLOBAL BIND because
! BLISS doesn't allow BIND table = ... - table).
!-
!+
! Initialization of UDF level:
!-

GLOBAL
    FOR$$AA_UDF_PR0 : VECTOR [ISB$K_FORSTTYHI - ISB$K_FORSTTYLO + 2,, SIGNED] INITIAL (
				! I/O on closed unit
	    FOR$$SIGDIS_JSB - FOR$$AA_UDF_PR0,	! Error
				! I/O statement type:
	    FOR$$UDF_WF0 - FOR$$AA_UDF_PR0,	!  WRITE sequential formatted (WSF)
	    FOR$$UDF_RF0 - FOR$$AA_UDF_PR0,	! READ sequential formatted (RSF)
	    FOR$$UDF_WU0 - FOR$$AA_UDF_PR0,	! WRITE sequential unformatted (WSU)
	    FOR$$UDF_RU0 - FOR$$AA_UDF_PR0,	! READ sequential unformatted (RSU)
	    FOR$$UDF_WF0 - FOR$$AA_UDF_PR0,	! WRITE direct formatted (WDF)
	    FOR$$UDF_RF0 - FOR$$AA_UDF_PR0,	! READ direct formatted (RDF)
	    FOR$$UDF_WU0 - FOR$$AA_UDF_PR0,	! WRITE direct unformatted (WDU)
	    FOR$$UDF_RU0 - FOR$$AA_UDF_PR0,	! READ direct unformatted (RDU)
	    FOR$$UDF_WL0 - FOR$$AA_UDF_PR0,	! WRITE sequential list-direct (WSL)
	    FOR$$UDF_RL0 - FOR$$AA_UDF_PR0,	! READ sequential list-directed (RSL)
	    FOR$$UDF_WF0 - FOR$$AA_UDF_PR0,	! ENCODE (memory formatted) (WMF)
	    FOR$$UDF_RF0 - FOR$$AA_UDF_PR0,	! DECODE (memory formatted) (RMF)
	    FOR$$UDF_WF0 - FOR$$AA_UDF_PR0,	! FORTRAN REWRITE indexed formatted (WXF)
	    FOR$$UDF_RF0 - FOR$$AA_UDF_PR0,	! FORTRAN READ keyed formatted (RKF)
	    FOR$$UDF_WU0 - FOR$$AA_UDF_PR0,	! FORTRAN REWRITE indexed unformatted (WXU)
	    FOR$$UDF_RU0 - FOR$$AA_UDF_PR0,	! FORTRAN READ keyed unformatted (RKU)
	    FOR$$UDF_WF0 - FOR$$AA_UDF_PR0,	! FORTRAN WRITE internal formatted (WIF)
	    FOR$$UDF_RF0 - FOR$$AA_UDF_PR0,	! FORTRAN READ internal formatted (RIF)
	    FOR$$UDF_WN0 - FOR$$AA_UDF_PR0,	! FORTRAN WRITE NAMELIST
	    FOR$$UDF_RN0 - FOR$$AA_UDF_PR0);	! FORTRAN READ NAMELIST

!<BLF/PAGE>

!+
! Transmit a single I/O list element
!-

GLOBAL
    FOR$$AA_UDF_PR1 : VECTOR [ISB$K_FORSTTYHI - ISB$K_FORSTTYLO + 2,, SIGNED] INITIAL (
	    FOR$$SIGDIS_ERR - FOR$$AA_UDF_PR1,	! I/O on closed unit error
				! I/O statement type:
	    FOR$$UDF_WF1 - FOR$$AA_UDF_PR1,	! WRITE sequential formatted (WSF)
	    FOR$$UDF_RF1 - FOR$$AA_UDF_PR1,	! READ sequential formatted (RSF)
	    FOR$$UDF_WU1 - FOR$$AA_UDF_PR1,	! WRITE sequential unformatted (WSU)
	    FOR$$UDF_RU1 - FOR$$AA_UDF_PR1,	! READ sequential unformatted (RSU)
	    FOR$$UDF_WF1 - FOR$$AA_UDF_PR1,	! WRITE direct formatted (WDF)
	    FOR$$UDF_RF1 - FOR$$AA_UDF_PR1,	! READ direct formatted (RDF)
	    FOR$$UDF_WU1 - FOR$$AA_UDF_PR1,	! WRITE direct unformatted (WDU)
	    FOR$$UDF_RU1 - FOR$$AA_UDF_PR1,	! READ direct unformatted (RDU)
	    FOR$$UDF_WL1 - FOR$$AA_UDF_PR1,	! WRITE sequential list-direct (WSL)
	    FOR$$UDF_RL1 - FOR$$AA_UDF_PR1,	! READ sequential list-directed (RSL)
	    FOR$$UDF_WF1 - FOR$$AA_UDF_PR1,	! ENCODE (memory formatted) (WMF)
	    FOR$$UDF_RF1 - FOR$$AA_UDF_PR1,	! DECODE (memory formatted) (RMF)
	    FOR$$UDF_WF1 - FOR$$AA_UDF_PR1,	! FORTRAN REWRITE indexed formatted (WXF)
	    FOR$$UDF_RF1 - FOR$$AA_UDF_PR1,	! FORTRAN READ keyed formatted (RKF)
	    FOR$$UDF_WU1 - FOR$$AA_UDF_PR1,	! FORTRAN REWRITE indexed unformatted (WXU)
	    FOR$$UDF_RU1 - FOR$$AA_UDF_PR1,	! FORTRAN READ keyed unformatted (RKU)
	    FOR$$UDF_WF1 - FOR$$AA_UDF_PR1,	! FORTRAN WRITE internal formatted (WIF)
	    FOR$$UDF_RF1 - FOR$$AA_UDF_PR1,	! FORTRAN READ internal formatted (RIF)
	    FOR$$SIGDIS_ERR - FOR$$AA_UDF_PR1,	! No elements for WRITE NAMELIST
	    FOR$$SIGDIS_ERR - FOR$$AA_UDF_PR1);	! No elements for READ NAMELIST

!<BLF/PAGE>

!+
! End I/O list entry points:
!-

GLOBAL
    FOR$$AA_UDF_PR9 : VECTOR [ISB$K_FORSTTYHI - ISB$K_FORSTTYLO + 2,, SIGNED] INITIAL (
	    FOR$$SIGDIS_JSB - FOR$$AA_UDF_PR9,	! I/O on closed unit error
				! I/O statement type:
	    FOR$$UDF_WF9 - FOR$$AA_UDF_PR9,	! WRITE sequential formatted (WSF)
	    FOR$$UDF_RF9 - FOR$$AA_UDF_PR9,	! READ sequential formatted (RSF)
	    FOR$$UDF_WU9 - FOR$$AA_UDF_PR9,	! WRITE sequential unformatted (WSU)
	    FOR$$UDF_RU9 - FOR$$AA_UDF_PR9,	! READ sequential unformatted (RSU)
	    FOR$$UDF_WF9 - FOR$$AA_UDF_PR9,	! WRITE direct formatted (WDF)
	    FOR$$UDF_RF9 - FOR$$AA_UDF_PR9,	! READ direct formatted (RDF)
	    FOR$$UDF_WU9 - FOR$$AA_UDF_PR9,	! WRITE direct unformatted (WDU)
	    FOR$$UDF_RU9 - FOR$$AA_UDF_PR9,	! READ direct unformatted (RDU)
	    FOR$$UDF_WL9 - FOR$$AA_UDF_PR9,	! WRITE sequential list-direct (WSL)
	    FOR$$UDF_RL9 - FOR$$AA_UDF_PR9,	! READ sequential list-directed (RSL)
	    FOR$$UDF_WF9 - FOR$$AA_UDF_PR9,	! ENCODE (memory formatted) (WMF)
	    FOR$$UDF_RF9 - FOR$$AA_UDF_PR9,	! DECODE (memory formatted) (RMF)
	    FOR$$UDF_WF9 - FOR$$AA_UDF_PR9,	! FORTRAN REWRITE indexed formatted (WXF)
	    FOR$$UDF_RF9 - FOR$$AA_UDF_PR9,	! FORTRAN READ keyed formatted (RKF)
	    FOR$$UDF_WU9 - FOR$$AA_UDF_PR9,	! FORTRAN REWRITE indexed unformatted (WXU)
	    FOR$$UDF_RU9 - FOR$$AA_UDF_PR9,	! FORTRAN READ keyed unformatted (RKU)
	    FOR$$UDF_WF9 - FOR$$AA_UDF_PR9,	! FORTRAN WRITE internal formatted (WIF)
	    FOR$$UDF_RF9 - FOR$$AA_UDF_PR9,	! FORTRAN READ internal formatted (RIF)
	    FOR$$UDF_WN9 - FOR$$AA_UDF_PR9,	! FORTRAN WRITE NAMELIST
	    FOR$$UDF_RN9 - FOR$$AA_UDF_PR9);	! FORTRAN READ NAMELIST

!<BLF/PAGE>

!+
! Dispatch tables to call record processing level of abstraction
! routines (REC = 3rd level). Used to connect 2nd level of
! abstraction (UDF) to third level of abstraction (REC).
! The dispatch tables are indexed by I/O statement type (1st
! level UPI.)
! Record processing routine names have the form:
! First letters: R = READ, W = WRITE));
! Second letters: S = sequential, D = direct, M = memory));
! third letters: F = formatted, U = unformatted, L = list-directed.
!-
!+
! Initialize entry points (read first record or setup
! output buffer).
!-

GLOBAL
    FOR$$AA_REC_PR0 : VECTOR [ISB$K_FORSTTYHI - ISB$K_FORSTTYLO + 2,, SIGNED] INITIAL (
	    FOR$$SIGDIS_JSB - FOR$$AA_REC_PR0,	! I/O on closed unit error
				! I/O statement type:
	    FOR$$REC_WSF0 - FOR$$AA_REC_PR0,	! WRITE sequential formatted (WSF)
	    FOR$$REC_RSF0 - FOR$$AA_REC_PR0,	! READ sequential formatted (RSF)
	    FOR$$REC_WSU0 - FOR$$AA_REC_PR0,	! WRITE sequential unformatted (WSU)
	    FOR$$REC_RSU0 - FOR$$AA_REC_PR0,	! READ sequential unformatted (RSU)
	    FOR$$REC_WD0 - FOR$$AA_REC_PR0,	! WRITE direct formatted (WDF)
	    FOR$$REC_RD0 - FOR$$AA_REC_PR0,	! READ direct formatted (RDF)
	    FOR$$REC_WD0 - FOR$$AA_REC_PR0,	! WRITE direct unformatted (WDU)
	    FOR$$REC_RD0 - FOR$$AA_REC_PR0,	! READ direct unformatted (RDU)
	    FOR$$REC_WSL0 - FOR$$AA_REC_PR0,	! WRITE sequential list-direct (WSL)
	    FOR$$REC_RSL0 - FOR$$AA_REC_PR0,	! READ sequential list-directed (RSL)
	    FOR$$REC_WMF0 - FOR$$AA_REC_PR0,	! ENCODE (memory formatted) (WMF)
	    FOR$$REC_RMF0 - FOR$$AA_REC_PR0,	! DECODE (memory formatted) (RMF)
	    FOR$$REC_WXF0 - FOR$$AA_REC_PR0,	! FORTRAN REWRITE indexed formatted (WXF)
	    FOR$$REC_RKF0 - FOR$$AA_REC_PR0,	! FORTRAN READ keyed formatted (RKF)
	    FOR$$REC_WXU0 - FOR$$AA_REC_PR0,	! FORTRAN REWRITE indexed unformatted (WXU)
	    FOR$$REC_RKU0 - FOR$$AA_REC_PR0,	! FORTRAN READ keyed unformatted (RKU)
	    FOR$$REC_WIF0 - FOR$$AA_REC_PR0,	! FORTRAN WRITE internal formatted (WIF)
	    FOR$$REC_RIF0 - FOR$$AA_REC_PR0,	! FORTRAN READ internal formatted (RIF)
	    FOR$$REC_WSN0 - FOR$$AA_REC_PR0,	! FORTRAN WRITE NAMELIST
	    FOR$$REC_RSN0 - FOR$$AA_REC_PR0);	! FORTRAN READ NAMELIST

!<BLF/PAGE>

!+
! Intermediate transfer a record - read second and
! subsequent records for this I/O statement or write
! first and all but last record for this I/O statement.
!-

GLOBAL
    FOR$$AA_REC_PR1 : VECTOR [ISB$K_FORSTTYHI - ISB$K_FORSTTYLO + 2,, SIGNED] INITIAL (
	    FOR$$SIGDIS_JSB - FOR$$AA_REC_PR1,	! I/O on closed unit error
				! I/O statement type:
	    FOR$$REC_WSF1 - FOR$$AA_REC_PR1,	! WRITE sequential formatted (WSF)
	    FOR$$REC_RSF1 - FOR$$AA_REC_PR1,	! READ sequential formatted (RSF)
	    FOR$$REC_WSU1 - FOR$$AA_REC_PR1,	! WRITE sequential unformatted (WSU)
	    FOR$$REC_RSU1 - FOR$$AA_REC_PR1,	! READ sequential unformatted (RSU)
	    FOR$$REC_WD1 - FOR$$AA_REC_PR1,	! WRITE direct formatted (WDF)
	    FOR$$REC_RD1 - FOR$$AA_REC_PR1,	! READ direct formatted (RDF)
	    FOR$$REC_WD1 - FOR$$AA_REC_PR1,	! WRITE direct unformatted (WDU)
	    FOR$$REC_RD1 - FOR$$AA_REC_PR1,	! READ direct unformatted (RDU)
	    FOR$$REC_WSL1 - FOR$$AA_REC_PR1,	! WRITE sequential list-direct (WSL)
	    FOR$$REC_RSL1 - FOR$$AA_REC_PR1,	! READ sequential list-directed (RSL)
	    FOR$$REC_WMF1 - FOR$$AA_REC_PR1,	! ENCODE (memory formatted) (WMF)
	    FOR$$REC_RMF1 - FOR$$AA_REC_PR1,	! DECODE (memory formatted) (RMF)
	    FOR$$REC_WXF1 - FOR$$AA_REC_PR1,	! FORTRAN REWRITE indexed formatted (WXF)
	    FOR$$REC_RKF1 - FOR$$AA_REC_PR1,	! FORTRAN READ keyed formatted (RKF)
	    FOR$$REC_WXU1 - FOR$$AA_REC_PR1,	! FORTRAN REWRITE indexed unformatted (WXU)
	    FOR$$REC_RKU1 - FOR$$AA_REC_PR1,	! FORTRAN READ keyed unformatted (RKU)
	    FOR$$REC_WIF1 - FOR$$AA_REC_PR1,	! FORTRAN WRITE internal formatted (WIF)
	    FOR$$REC_RIF1 - FOR$$AA_REC_PR1,	! FORTRAN READ internal formatted (RIF)
	    FOR$$REC_WSN1 - FOR$$AA_REC_PR1,	! FORTRAN WRITE NAMELIST
	    FOR$$REC_RSN1 - FOR$$AA_REC_PR1);	! FORTRAN READ NAMELIST

!<BLF/PAGE>

!+
! End of I/O list record processing
!-

GLOBAL
    FOR$$AA_REC_PR9 : VECTOR [ISB$K_FORSTTYHI - ISB$K_FORSTTYLO + 2,, SIGNED] INITIAL (
	    FOR$$SIGDIS_JSB - FOR$$AA_REC_PR9,	! I/O on closed unit error
				! I/O statement type:
	    FOR$$REC_WSF9 - FOR$$AA_REC_PR9,	! WRITE sequential formatted (WSF)
	    FOR$$REC_RSF9 - FOR$$AA_REC_PR9,	! READ sequential formatted (RSF)
	    FOR$$REC_WSU9 - FOR$$AA_REC_PR9,	! WRITE sequential unformatted (WSU)
	    FOR$$REC_RSU9 - FOR$$AA_REC_PR9,	! READ sequential unformatted (RSU)
	    FOR$$REC_WD9 - FOR$$AA_REC_PR9,	! WRITE direct formatted (WDF)
	    FOR$$REC_RD9 - FOR$$AA_REC_PR9,	! READ direct formatted (RDF)
	    FOR$$REC_WD9 - FOR$$AA_REC_PR9,	! WRITE direct unformatted (WDU)
	    FOR$$REC_RD9 - FOR$$AA_REC_PR9,	! READ direct unformatted (RDU)
	    FOR$$REC_WSL9 - FOR$$AA_REC_PR9,	! WRITE sequential list-direct (WSL)
	    FOR$$REC_RSL9 - FOR$$AA_REC_PR9,	! READ sequential list-directed (RSL)
	    FOR$$REC_WMF9 - FOR$$AA_REC_PR9,	! ENCODE (memory formatted) (WMF)
	    FOR$$REC_RMF9 - FOR$$AA_REC_PR9,	! DECODE (memory formatted) (RMF)
	    FOR$$REC_WXF9 - FOR$$AA_REC_PR9,	! FORTRAN REWRITE indexed formatted (WXF)
	    FOR$$REC_RKF9 - FOR$$AA_REC_PR9,	! FORTRAN READ keyed formatted (RKF)
	    FOR$$REC_WXU9 - FOR$$AA_REC_PR9,	! FORTRAN REWRITE indexed unformatted (WXU)
	    FOR$$REC_RKU9 - FOR$$AA_REC_PR9,	! FORTRAN READ keyed unformatted (RKU)
	    FOR$$REC_WIF9 - FOR$$AA_REC_PR9,	! FORTRAN WRITE internal formatted (WIF)
	    FOR$$REC_RIF9 - FOR$$AA_REC_PR9,	! FORTRAN READ internal formatted (RIF)
	    FOR$$SIGDIS_JSB - FOR$$AA_REC_PR9,	! No REC9 for WRITE NAMELIST
	    FOR$$SIGDIS_JSB - FOR$$AA_REC_PR9);	! No REC9 for READ NAMELIST

!+
!	Return to normal PSECT definition
!-
DECLARE_PSECTS (FOR);
!

ROUTINE FOR$$SIGDIS_ERR : CALL_CCB NOVALUE = 	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	Signal an error from the I/O dispatch process.  The error code
!	signalled depends on the statement type.  One statement type is
!	used by CLOSE to catch dispatches on a closed unit, which can
!	happen if the CLOSE is done as part of recursive I/O.  If the
!	statement type is not the one used by CLOSE, we have an error
!	in the RTL (an invalid statement type).
!	Note that, at the present time, FORTRAN does not permit
!	recursive I/O.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	ISB$B_STTM_TYPE.rb.r		Statement type of I/O statement
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Signals OTS$_IO_CONCLO if the LUB is not open, or
!	OTS$_FATINTERR if it is.
!
!--

    BEGIN

    EXTERNAL REGISTER
	CCB : REF BLOCK [, BYTE];

    IF ( NOT .CCB [LUB$V_OPENED])
    THEN
!+
! The file must have been closed with I/O still active on it.
!-
	LIB$STOP (OTS$_IO_CONCLO)
    ELSE
!+
! This must be an attempt to use an unimplemented feature.  It represents
! an internal error in the OTS.
!-
	LIB$STOP (OTS$_FATINTERR);

    0
    END;					!End of FOR$$SIGDIS_ERR

ROUTINE FOR$$SIGDIS_JSB : JSB_UDF0 NOVALUE = 	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	Signal an error from the I/O dispatch process.  The error code
!	signalled depends on the statement type.  One statement type is
!	used by CLOSE to catch dispatches on a closed unit, which can
!	happen if the CLOSE is done as part of recursive I/O.  If the
!	statement type is not the one used by CLOSE, we have an error
!	in the RTL (an invalid statement type).
!	Note that, at the present time, FORTRAN does not permit
!	recursive I/O.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	ISB$B_STTM_TYPE.rb.r		Statement type of I/O statement
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Signals OTS$_IO_CONCLO if the LUB is not open, or
!	OTS$_FATINTERR if it is.
!
!--

    BEGIN

    EXTERNAL REGISTER
	CCB : REF BLOCK [, BYTE];

    IF ( NOT .CCB [LUB$V_OPENED])
    THEN
!+
! The file must have been closed with I/O still active on it.
!-
	LIB$STOP (OTS$_IO_CONCLO)
    ELSE
!+
! This must be an attempt to use an unimplemented feature.  It represents
! an internal error in the OTS.
!-
	LIB$STOP (OTS$_FATINTERR);

    0
    END;					!End of FOR$$SIGDIS_JSB
END						!End of module

ELUDOM
