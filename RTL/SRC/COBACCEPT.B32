MODULE COB$ACCEPT (			!
		   IDENT = '1-014'	! File: COBACCEPT.B32 EDIT:LEB1014
				   ) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  COBOL SUPPORT
!
! ABSTRACT:
!
!	Supports the COBOL ACCEPT statement.
!
!	Contains COB$$OPEN_IN  to open an RMS file for input, and
!		 COB$$READ_IN  to read a record from the file.
!
!
! ENVIRONMENT:  VAX-11 User Mode
!
! AUTHOR: Rich Reichert, CREATION DATE: 16-JULY-79
!
! MODIFIED BY:
!
! 1-001	- Original.  RKR 16-JULY-79
! 1-002 - Make COB$$OPEN_IN stop instead of signal on open error.
!	  RKR 4-SEPT-79
! 1-003 - Make COB$$READ_RMS signal COB$_EOFON_ACC if an EOF is
!	  encountered during reading.
!	  Do string copy into caller's buffer via CH$COPY instead of
!	  STR$COPY to avoid dependency on STR$ routines.
!	  RKR 14-SEPT-79
! 1-004 - Identify file name on bad RMS  status other than EOF.
!	  RKR 25-SEPT-79
! 1-005 - Change name of symbolic LIBRARY file. RKR 1-OCT-79
! 1-006 - Make module name match entry point.  RKR 20-OCT-79
! 1-007 - Change references to LIB$_INVARG to COB$_INVARG.
! 1-008 - Make sensitive to names in REQUIRE file.  RKR 21-OCT-79
! 1-009 - Improve errors signaled.  RKR 21-OCT-79
!	  Cosmetic changes.  RKR 21-OCT-79
! 1-010	- Imperative clean-ups, also try SYS$ logicals.
!	  PDG 00-FEB-81
! 1-011	- Fix call to $TRNLOG to test for SS$_NORMAL
!		(since SS$_NOTRAN is a success status).
!	  Add COB$ACCEPT_EOF to allow ACCEPT ... AT END imp-statement.
!	  Allow MAX(COB$K_ACC_SIZE, .STRING[DSC$W_LENGTH]) bytes for ACCEPT.
!	  PDG 24-Jul-1981
! 1-012 - Updated copyright date.  LB 9-Aug-81
! 1-013	- Removed COB$ACCEPT_EOF.  This functionality is provided by a flag
!	  passed to COB$ACCEPT.
! 1-014 - Add code in COB$ACCEPT to check the STV2 field in the RAB to
!	  determine if the terminator is an escape sequence, and if so,
!	  to return the escape sequence in the user's buffer.  This was
!	  done in response to an SPR regarding incompatibilities between
!	  COBOL-74 and VAX-11 COBOL.  LEB  16-FEB-82
!
!--


!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!


!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
	COB$ACCEPT,				! Perform ACCEPT
	COB$$OPEN_IN:	NOVALUE;		! Open for input

!
! INCLUDE FILES:
!
REQUIRE 'RTLIN:RTLPSECT';			! Macros for PSECTS
REQUIRE 'RTLIN:COBDEF';				! Unit names


LIBRARY 'RTLSTARLE';			! System symbols

!
! MACROS:
!
!	NONE
!


! EQUATED SYMBOLS:
!
LITERAL
    NUM_UNITS = COB$K_UNIT_MAX - COB$K_UNIT_MIN + 1; ! no. of units

!
! PSECTS:
!
DECLARE_PSECTS (COB);		! declare psects for COB$ facility

!
! GUARDS:
!
!   Since the code assumes that COB$K_UNIT_MIN equals 0, and COB_TABLE
!	has only 7 items in it, we safeguard this module.
!
%IF COB$K_UNIT_MIN NEQ 0 %THEN %ERROR('Unexpected COB$K_UNIT_MIN value') %FI
%IF COB$K_UNIT_MAX GTR 6 %THEN %ERROR('Unexpected COB$K_UNIT_MAX value') %FI


!
! OWN STORAGE:
!
!   The following OWN cells are used by the file I/O routines.
!
OWN
    READ_RAB:	VECTOR[NUM_UNITS] 		! Input RABs
		INITIAL (REP NUM_UNITS OF LONG (0)),

    READ_IFI:	VECTOR[NUM_UNITS, WORD] 	! Internal file identifiers
		INITIAL (REP NUM_UNITS OF WORD (0));


!
!   The following tables convert the UNIT number into a logical name.
!
MACRO
    DESC_(A) = UPLIT BYTE(%ASCIC A) - BASE %;
BIND
    BASE = UPLIT(REP 0 OF (0)),
    COB_TABLE = UPLIT(
	DESC_('COB$INPUT'),
	DESC_('COB$OUTPUT'),
	DESC_('COB$CONSOLE'),
	DESC_('COB$CARDREADER'),
	DESC_('COB$PAPERTAPEREADER'),
	DESC_('COB$LINEPRINTER'),
	DESC_('COB$PAPERTAPEPUNCH')):	VECTOR[NUM_UNITS],
    SYS_INPUT  = DESC_('SYS$INPUT'),
    SYS_OUTPUT = DESC_('SYS$OUTPUT'),
    SYS_ERROR  = DESC_('SYS$INPUT'),
    SYS_TABLE = UPLIT(
	SYS_INPUT,
	SYS_OUTPUT,
	SYS_ERROR,
	SYS_INPUT,
	SYS_INPUT,
	SYS_OUTPUT,
	SYS_OUTPUT):		VECTOR[NUM_UNITS];

!
! EXTERNAL REFERENCES:
!
EXTERNAL ROUTINE
	LIB$STOP,				! signals fatal error
	LIB$GET_VM;				! Get virtual memory

EXTERNAL LITERAL				! Error messages -
	COB$_INVARG,				! "invalid Argument"
	COB$_ERRDURACC,				! "Error during ACCEPT"
	COB$_FAIGET_VM,				! "Failure to get VM"
	COB$_EOFON_ACC;				! "EOF on ACCEPT"

GLOBAL ROUTINE COB$ACCEPT (UNIT, STRING) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Reads a record from specified unit and delivers record to
!	caller's string.
!
! FORMAL PARAMETERS:
!
!	UNIT.rbu.va	Byte integer unit number designating the unit from
!			which the string is to be read, followed by byte
!			flag indicating whether routine should (false) abort,
!			or (true) return status on RMS$_EOF.
!
!	STRING.wt.ds	The address of a fixed-string descriptor to
!			receive the string read.
!
! IMPLICIT INPUTS:
!
!	Status of whether the file in question is currently open.
!
! IMPLICIT OUTPUTS:
!
!	Updated status of the file just used.
!
! ROUTINE VALUE:
!
!	If .UNIT[1] is false:
!	    Unspecified.
!
!	If .UNIT[1] is true:
!	    Either true or false, indicating success or EOF, respectively.
!
! SIDE EFFECTS:
!
!	Reads a record from the designated unit.
!
!--

    BEGIN
    MAP
	UNIT:	VECTOR[,BYTE],
	STRING:	REF BLOCK[8, BYTE];

    LOCAL
	RAB:	REF $RAB_DECL,
	STATUS,
	DESCR:	BLOCK [8, BYTE],
	TERM_SIZE,
	BUFFER:	VECTOR [COB$K_ACC_SIZE, BYTE];

    IF .UNIT[0] GTRU COB$K_UNIT_MAX
    THEN
	RETURN LIB$STOP(COB$_INVARG);


    ! If this file is not open, open it.
    !
    IF .READ_RAB[.UNIT[0]] EQL 0
    THEN 
	COB$$OPEN_IN(.UNIT[0]);


    ! Read a record into our buffer or caller's buffer, whichever is larger.
    !
    RAB = .READ_RAB[.UNIT[0]];
    IF .STRING[DSC$W_LENGTH] GTRU COB$K_ACC_SIZE
    THEN
	BEGIN
	RAB[RAB$W_USZ] = .STRING[DSC$W_LENGTH];
	RAB[RAB$L_UBF] = .STRING[DSC$A_POINTER];
	END
    ELSE
	BEGIN
	RAB[RAB$W_USZ] = COB$K_ACC_SIZE;
	RAB[RAB$L_UBF] = BUFFER;
	END;

    ! Read the record.
    !
    WHILE $GET(RAB = .RAB) EQL RMS$_RSA DO $WAIT(RAB = .RAB);


    IF NOT .RAB[RAB$L_STS]
    THEN
	RETURN LIB$STOP(
	    (IF .RAB[RAB$L_STS] EQL RMS$_EOF
		THEN
		    IF .UNIT[1]
		    THEN RETURN 0
		    ELSE COB$_EOFON_ACC
		ELSE COB$_ERRDURACC),
	    1, .RAB+RAB$C_BLN, .RAB[RAB$L_STS], .RAB[RAB$L_STV]);

!+
! Check if the terminator size is greater than 1.  If it is,
! this indicates that the terminator string is an escape sequence.
! Return the entire escape sequence in the user's buffer.
!-

    TERM_SIZE = .RAB[RAB$W_STV2];			! Get terminator size
    IF .TERM_SIZE GTR 1
      THEN
	RAB[RAB$W_RSZ] = .RAB[RAB$W_RSZ] + .TERM_SIZE;

    CH$COPY( .RAB[RAB$W_RSZ], .RAB[RAB$L_UBF], %C' ',
	.STRING[DSC$W_LENGTH], .STRING[DSC$A_POINTER]);

    RETURN 1;
    END;

ROUTINE COB$$OPEN_IN (UNIT): NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Open a file for reading, given its unit number.
!
! FORMAL PARAMETERS:
!
!	UNIT.rl.v	integer unit number designating the device
!			from which the string is to be read.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN
    LITERAL
	MAX_BUF =	MAX(64, NAM$C_MAXRSS);
    LOCAL
	FAB:		$FAB_DECL,
	NAM:		$NAM_DECL,
	RAB:		REF $RAB_DECL,
	FILE_NAME:	BLOCK[8, BYTE],		! Descriptor for the file name
	TRANSLATE:	BLOCK[8, BYTE],
	P:		REF VECTOR[,BYTE],
	RSLBUF:		VECTOR[MAX_BUF,BYTE],
	STATUS;


    ! Determine whether the COB$xxx name is defined.
    ! If so, use it.  If not, use the corresponding SYS$xxx name.
    !
    TRANSLATE[DSC$B_DTYPE]   = DSC$K_DTYPE_T;
    TRANSLATE[DSC$B_CLASS]   = DSC$K_CLASS_S;
    TRANSLATE[DSC$W_LENGTH]  = MAX_BUF;
    TRANSLATE[DSC$A_POINTER] = RSLBUF;
    P = .COB_TABLE[.UNIT] + BASE;
    FILE_NAME[DSC$B_DTYPE]   = DSC$K_DTYPE_T;
    FILE_NAME[DSC$B_CLASS]   = DSC$K_CLASS_S;
    FILE_NAME[DSC$W_LENGTH]  = .P[0];
    FILE_NAME[DSC$A_POINTER] = P[1];
    IF $TRNLOG(LOGNAM = FILE_NAME, RSLBUF = TRANSLATE) NEQ SS$_NORMAL
    THEN
	BEGIN					! Use the SYS$xxx logical
	P = .SYS_TABLE[.UNIT] + BASE;
	FILE_NAME[DSC$W_LENGTH] = .P[0];
	FILE_NAME[DSC$A_POINTER] = P[1];
	END;


    $FAB_INIT(
	FAB = FAB,
	NAM = NAM,
	FAC = GET,
	FNA = .FILE_NAME[DSC$A_POINTER],
	FNS = .FILE_NAME[DSC$W_LENGTH],
	FOP = SQO);

    $NAM_INIT(
	NAM = NAM,
	ESA = RSLBUF,
	ESS = NAM$C_MAXRSS,
	RSA = RSLBUF,
	RSS = NAM$C_MAXRSS);

    STATUS = $OPEN(FAB = FAB);
    IF (TRANSLATE[DSC$W_LENGTH] = .NAM[NAM$B_RSL]) EQL 0 THEN
    IF (TRANSLATE[DSC$W_LENGTH] = .NAM[NAM$B_ESL]) EQL 0
    THEN
	BEGIN
	TRANSLATE[DSC$W_LENGTH] = .FAB[FAB$B_FNS];
	TRANSLATE[DSC$A_POINTER]= .FAB[FAB$L_FNA];
	END;


    IF NOT .STATUS
    THEN
	RETURN LIB$STOP(COB$_ERRDURACC, 1, TRANSLATE, .FAB[FAB$L_STS], .FAB[FAB$L_STV]);


    IF NOT (STATUS = LIB$GET_VM(%REF(RAB$C_BLN + 8 + .NAM[NAM$B_RSL]), RAB))
    THEN
	RETURN LIB$STOP(COB$_FAIGET_VM, 0, .STATUS);


    ! Save a descriptor for the resultant file name string,
    ! and the string itself, after the RAB
    !
    BEGIN
    LOCAL
	Q: REF BLOCK[,BYTE];
    Q = .RAB + RAB$C_BLN;
    Q[DSC$B_DTYPE]   = DSC$K_DTYPE_T;
    Q[DSC$B_CLASS]   = DSC$K_CLASS_S;
    Q[DSC$W_LENGTH]  = .TRANSLATE[DSC$W_LENGTH];
    Q[DSC$A_POINTER] = .RAB+RAB$C_BLN+8;
    CH$MOVE( .Q[DSC$W_LENGTH], .TRANSLATE[DSC$A_POINTER], .RAB+RAB$C_BLN+8 );
    END;


    $RAB_INIT(
	RAB = .RAB,
	FAB = FAB);

    IF NOT $CONNECT(RAB = .RAB)
    THEN
	RETURN LIB$STOP(COB$_ERRDURACC, 1, .RAB+RAB$C_BLN, .RAB[RAB$L_STS], .RAB[RAB$L_STV]);

    READ_RAB[.UNIT] = .RAB;
    READ_IFI[.UNIT] = .FAB[FAB$W_IFI];
    END;


END
ELUDOM
