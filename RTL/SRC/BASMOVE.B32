MODULE BAS$MOVE (				!
		IDENT = '1-006'			! File: BASMOVE.B32 EDIT:FM1006
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  BASIC-PLUS-2 Miscellaneous I/O
!
! ABSTRACT:
!
!	This module contains the routines called by compiled code
!	for the MOVE FROM and MOVE TO statements.
!
! ENVIRONMENT:  VAX-11 User Mode
!
! AUTHOR: John Sauter, CREATION DATE: 21-MAY-1979
!
! MODIFIED BY:
!
! 1-001	- Original.
! 1-002	- Call BAS$$CB_GET, so this module does not have to be in the
!	   sharable library.  JBS 22-AUG-1979
! 1-003	- Reverse the order of arguments to BAS$MOVE_BEG.  JBS 04-SEP-1979
! 1-004	- Add MOVE_TO and MOVE_FROM entry points, which we will split later.
!	   JBS 30-NOV-1979
! 1-005 - Channel zero should translate to the appropriate BASIC LUN (BAS$K_LUN_INPU).
!	   Call it an error if user calls with a negative channel, at the same
!	  time add 2 to lub$k_ilun_min to force bas$$cb_push to signal an 
!	  error if LUNs -7 or -8 are being pushed, the later is a temporary
!	  fix for #0 syntax in BASIC until the standard comm. decides on the
!	  issue.  
! 1-006 - Undo 5.  We can now do I/O to #0, because BAS$PUT will use foreign
!	  buffer mechanism to do PUTs to #0. FM 9-JUL-81.
!--

!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!

REQUIRE 'RTLIN:OTSLNK';				! Define linkages

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    BAS$MOVE_BEG : NOVALUE,			! Start of MOVE statement
    BAS$MOVE_END : NOVALUE;			! End of MOVE statement

!
! INCLUDE FILES:
!

REQUIRE 'RTLML:OTSLUB';				! Get LUB definitions

REQUIRE 'RTLML:OTSISB';				! Get ISB definitions

REQUIRE 'RTLIN:RTLPSECT';			! Macros for defining psects

LIBRARY 'RTLSTARLE';				! System symbols

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!

GLOBAL BIND
    ROUTINE
    BAS$MOVE_TO = BAS$MOVE_BEG;

GLOBAL BIND
    ROUTINE
    BAS$MOVE_FROM = BAS$MOVE_BEG;

!
! PSECTS:
!
DECLARE_PSECTS (BAS);				! Declare psects for BAS$ facility
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    BAS$$CB_PUSH : JSB_CB_PUSH NOVALUE,		! Load register CCB
    BAS$$CB_POP : JSB_CB_POP NOVALUE,		! Done with register CCB
    BAS$$CB_GET : JSB_CB_GET NOVALUE,		! Load current CCB
    BAS$$STOP : NOVALUE,			! Signal fatal error
    BAS$$STOP_IO : NOVALUE,			! Signal fatal I/O error
    BAS$$OPEN_ZERO : NOVALUE;			! OPEN channel 0

!+
! The following are the error codes used in this module.
!-

EXTERNAL LITERAL
    BAS$K_PROLOSSOR : UNSIGNED (8),		! Program lost, sorry
    BAS$K_IO_CHANOT : UNSIGNED (8),		! I/O channel not open
    BAS$K_ILLIO_CHA : UNSIGNED (8);		! Illegal I/O channel 

GLOBAL ROUTINE BAS$MOVE_BEG (			! Start of MOVE statement
	DESC, 					! Descriptor of buffer
	UNIT					! Channel to start MOVE on
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Start a MOVE statement on the specified channel.  We do this
!	by returning a descriptor of the buffer, which the compiled
!	code will use when accessing the I/O buffer.
!
! FORMAL PARAMETERS:
!
!	DESC.wq.r	Descriptor of the I/O buffer
!	UNIT.rl.v	The channel whose buffer descriptor to return.
!
! IMPLICIT INPUTS:
!
!	The LUB$W_RBUF_SIZE field of the LUB of the specified channel.
!	Also, LUB$A_RBUF_ADR.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Signals if an error is encountered.
!	BAS$$CB_PUSH will signal if the channel number is invalid.
!	Leaves the channel active.
!
!--

    BEGIN

    BUILTIN FP;

    GLOBAL REGISTER
	CCB = K_CCB_REG : REF BLOCK [, BYTE];

    MAP
	DESC : REF BLOCK [8, BYTE];

    LOCAL
	FMP : REF BLOCK [, BYTE], 
	ACTUAL_UNIT;

!+
! Store away FP
!-
    FMP = .FP;
!+
! If the unit is zero, use the appropriate unit for input side of channel 0.
! Load register CCB with a pointer to the LUB/ISB/RAB for the channel.
! Signal an invalid channel number.
!-
    IF (.UNIT LSS 0) THEN BAS$$STOP(BAS$K_ILLIO_CHA);
    ACTUAL_UNIT = (IF .UNIT EQL 0 THEN LUB$K_LUN_INPU ELSE .UNIT);

    BAS$$CB_PUSH (.ACTUAL_UNIT, LUB$K_ILUN_MIN);
    CCB [ISB$A_USER_FP] = .FMP [SF$L_SAVE_FP];
!+
! If the channel number is zero, make sure it is open.
!-
    IF ( NOT .CCB[LUB$V_OPENED] )
    THEN

	IF (.ACTUAL_UNIT EQL LUB$K_LUN_INPU)
	THEN
		BEGIN
		BAS$$OPEN_ZERO(.FMP[SF$L_SAVE_FP])
		END
	ELSE
		BEGIN
		BAS$$STOP_IO(BAS$K_IO_CHANOT);
		END;

!+
! Mark this as a MOVE statement.
!-
    CCB [ISB$B_STTM_TYPE] = ISB$K_ST_TY_MOV;

!+
! Return the caller a descriptor of the buffer.
!-
    DESC [DSC$W_LENGTH] = .CCB [LUB$W_RBUF_SIZE];
    DESC [DSC$B_DTYPE] = DSC$K_DTYPE_Z;
    DESC [DSC$B_CLASS] = DSC$K_CLASS_S;
    DESC [DSC$A_POINTER] = .CCB [LUB$A_RBUF_ADR];
!+
! All done.
!-
    RETURN
    END;					! end of BAS$MOVE_BEG


GLOBAL ROUTINE BAS$MOVE_END 			! End of MOVE statement
    : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	End a MOVE statement.  This is needed so we know when all uses
!	of the I/O buffer are done, so we can release the buffer after
!	a CLOSE.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	OTS$$A_CUR_LUB, the current logical unit.  This had better be
!	doing a MOVE statement.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Signals if there is no current I/O, or if the current I/O
!	is not a MOVE statement.
!
!--

    BEGIN

    GLOBAL REGISTER
	CCB = K_CCB_REG : REF BLOCK [, BYTE];

    BAS$$CB_GET ();

    IF (.CCB EQL 0) THEN BAS$$STOP (BAS$K_PROLOSSOR);

!+
! The channel might not be open due to a CLOSE at AST level.  Give
! an error in this case.  If we ignored this condition, the following
! GET or PUT would give the error, so we might as well give it as
! soon as possible.
!-

    IF ( NOT .CCB [LUB$V_OPENED]) THEN BAS$$STOP_IO (BAS$K_IO_CHANOT);

!+
! If the channel is not doing a MOVE statement we have a serious
! problem, probably a wild branch into the I/O list.
!-

    IF (.CCB [ISB$B_STTM_TYPE] NEQ ISB$K_ST_TY_MOV) THEN BAS$$STOP_IO (BAS$K_PROLOSSOR);

!+
! If all those tests succeed, pop the I/O system.
!-
    BAS$$CB_POP ();
!+
! All done.
!-
    RETURN
    END;					! end of BAS$MOVE_END

END						! end of module BAS$MOVE

ELUDOM
