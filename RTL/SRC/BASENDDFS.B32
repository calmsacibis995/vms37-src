MODULE BAS$END_DFS (				!
		IDENT = '1-003'			! File: BASENDDFS.B32
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!

!++
! FACILITY:  BASIC-PLUS-2 Frame Support
!
! ABSTRACT:
!
!	These routines set up and tear down frames for BASIC-PLUS-2.
!	Frames are used for main routines, external functions,
!	external subroutines, internal functions (both DEFs and DEF*s)
!	internal subroutines (GOSUBs) and condition handlers.
!
! ENVIRONMENT:  VAX-11 user mode
!
! AUTHOR: John Sauter, CREATION DATE: 10-Oct-78
!
! MODIFIED BY:
!
! 	, : VERSION
!
! 1-001	- Original.  This is just a skeleton.
! 1-002	- Change LIB$S and OTS$S to STR$.  JBS 21-MAY-1979
! 1-003	- Code this routine, based on BAS$END_DEF.  JBS 03-AUG-1979
!--

!
!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!

LINKAGE
    BAS$INIT_LINK = JSB (REGISTER = 0, REGISTER = 1, REGISTER = 2) : 	!
    GLOBAL (BSF$A_MAJOR_STG = 11, BSF$A_MINOR_STG = 10, BSF$A_TEMP_STG = 9)	!
    NOPRESERVE (8, 7, 6, 5, 4, 3, 2, 1, 0);

REQUIRE 'RTLIN:STRLNK';				! String facility linkages

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    BAS$END_DFS_R8 : NOVALUE BAS$INIT_LINK;	! end DEF*

!
! INCLUDE FILES:
!

REQUIRE 'RTLIN:RTLPSECT';			! macros for defing psects

REQUIRE 'RTLIN:BASFRAME';			! Define frame structure

REQUIRE 'RTLIN:BASINARG';			! Define argument list

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! PSECTS:
!
DECLARE_PSECTS (BAS);				! declare psects for BAS$ facility
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    BAS$$STOP : NOVALUE,			! signals error
    STR$FREE1_DX_R4 : STR$JSB_GETFRE,		! Deallocate a string
    BAS$$UNWIND : NOVALUE,			! Unwind a frame
    BAS$HANDLER;				! Marker for BASIC frame

!+
! The following are the error codes used in this module.
!-

EXTERNAL LITERAL
    BAS$K_RETWITGOS : UNSIGNED (8),		! RETURN without GOSUB
    BAS$K_PROLOSSOR : UNSIGNED (8),		! Program lost, sorry
    BAS$K_NOTIMP : UNSIGNED (8),		! Not implemented
    BAS$K_FNEWITFUN : UNSIGNED (8),		! FNEND without FUNCTION CALL
    BAS$K_ERRTRANEE : UNSIGNED (8);		! ERROR trap needs RESUME


GLOBAL ROUTINE BAS$END_DFS_R8 (			! end of DEF* frame
	ARGLIST					! arg list used to set up the frame
    ) : NOVALUE BAS$INIT_LINK =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Tear down a frame for a BASIC-PLUS-2 DEF*.
!	All heap storage is deallocated.  The argument is the same
!	as for BAS$INIT_DFS_R8, for validity checking.
!
! FORMAL PARAMETERS:
!
!	ARGLIST.ra.v	List of information used to set up the
!			frame.  See BASIC-PLUS-2/VAX Description
!			of Generated Code for details.
!
! IMPLICIT INPUTS:
!
!	The frame, as set up by BAS$INIT_DFS_R8.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Deallocates the heap storage local to this DEF*.
!
!--

    BEGIN

    EXTERNAL REGISTER
	BSF$A_MAJOR_STG : REF BLOCK [0, BYTE],
	BSF$A_MINOR_STG : REF BLOCK [0, BYTE],
	BSF$A_TEMP_STG : REF VECTOR;

    BUILTIN
	FP;

    MAP
	ARGLIST : REF BLOCK [0, BYTE] FIELD (BAS$INIT_ARGS);	! arg list

    REGISTER
	FMP : REF BLOCK [0, BYTE] FIELD (BSF$FCD),	! pointer to FCD
	PREV_FMP : REF BLOCK [0, BYTE] FIELD (BSF$FCD);	! previous FCD

!+
! First cut back any GOSUB frames.  We wish to make the presence of
! the GOSUB frame invisible except on traceback.
!-
    FMP = .FP;

    WHILE (.FMP [BSF$B_PROC_CODE] EQL BSF$K_PROC_GOSB) DO
	BEGIN
!+
! We have a GOSUB frame, remove it.  Note we do not restore any
!  registers it might have saved.
!-
	BAS$$UNWIND (.FMP);
	PREV_FMP = .FMP [BSF$A_SAVED_FP];

	IF (.PREV_FMP [BSF$A_HANDLER] NEQA BAS$HANDLER)
	THEN
!+
! The previous frame is not a BASIC frame.  This is unreasonable
! since GOSUBs should only be callable from inside a BASIC main
! procedure.
!-
	    BAS$$STOP (BAS$K_RETWITGOS);

	FMP = .PREV_FMP;
	END;

!+
! Make sure this is a DEF frame.
!-

    CASE .FMP [BSF$B_PROC_CODE] FROM BSF$K_PROC_MAIN TO BSF$K_PROC_IOL OF
	SET

	[BSF$K_PROC_ONER] :
	    BAS$$STOP (BAS$K_ERRTRANEE);

	[BSF$K_PROC_DEFS] :
	    BEGIN
	    0
	    END;

	[INRANGE, OUTRANGE] :
	    BAS$$STOP (BAS$K_PROLOSSOR);
	TES;

!+
! Check to be sure that this is the correct exit.  This should
! only fail if the user branches from one DEF* into the body of
! another.
!-

    IF (.FMP [BSF$A_INIT_ARG] NEQA .ARGLIST)
    THEN
!+
! The argument lists are not at the same address.  This exit must not
! correspond to the entry.  Signal an error.
!-
	BAS$$STOP (BAS$K_FNEWITFUN);

!+
! Deallocate any temporary string storage.
!-

    INCR COUNTER FROM 1 TO .ARGLIST [BAS$L_IN_NO_TST] DO
	STR$FREE1_DX_R4 (BSF$A_TEMP_STG [(.COUNTER - 1)*2]);

!+
! Deallocate local dynamic strings.
!-

    INCR COUNTER FROM 1 TO .ARGLIST [BAS$W_IN_NO_DST] DO
	STR$FREE1_DX_R4 (.FMP [BSF$A_STR_DESC] + (2*%UPVAL*(.COUNTER - 1)));

!+
! All done.  The 'RET' instruction done by the compiled code
! will cut back the stack, so we don't need to do it here.
!-
    FP = .FMP;
    RETURN;
    END;					! of BAS$END_DFS_R8

END

ELUDOM
