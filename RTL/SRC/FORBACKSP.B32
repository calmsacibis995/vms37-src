MODULE FOR$BACKSPACE (				! FORTRAN BACKSPACE statement
		IDENT = '1-008'			! File name: FORBACKSP.B32 Edit:JBS1008
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  FORTRAN Support Library
!
! ABSTRACT:
!
!	This module contains routine FOR$BACKSPACE (unit.rlu.v),
!	which implements the FORTRAN BACKSPACE statement.
!
! ENVIRONMENT:  User Mode - AST re-entrant
!
! AUTHOR:	Jonathan M. Taylor, CREATION DATE: 17-OCT-1977
!
! MODIFIED BY:
!
! 0-1	- original JMT 17-OCT-77
! 0-2	- Change call to FOR$$CB_POP not _RET! JMT 19-OCT-77
! 0-3	- Use FOR$K_abcmnoxyz as EXTERNAL LITERALs.  TNH 27-Oct-77
! 0-4	- Bug fix: check that file is unformatted before trying to
!	  look for segmented record info.  JMT 2-Nov-77
! 0-5	- Bug fix.  No error when reading ENDFILE records.  JMT 10-Nov-77
! 0-6	- Use FERR not FENO.  TNH 6-Dec-77
! 0-7	- Change NOSPANREC to SPANNED.  JMT 15-Dec-77
! 0-9	- Global register CCB.  JMT 8-Apr-78
! 0-10	- Change to STARLET library.  DGP 20-Apr-78
! 0-11	- Change REQUIRE files for VAX system build.  DGP 28-Apr-78
! 0-12	- Change STARLET to RTLSTARLE to avoid conflicts.  DGP 1-May-78
! 0-13	- Use JSB linkage.  TNH 22-May-78
! 0-14	- Pass OPEN$K_LUN_MIN to FOR$$CB_PUSH.  TNH 22-May-78
! 0-15	- Change file name to FORBACKSP.B32, and change the names
!	   of the REQUIRE files similarly.  JBS  14-NOV-78
! 1-001	- Update version number and copyright notice.  JBS 16-NOV-78
! 1-002	- Change REQUIRE file names from FOR... to OTS...  JBS 07-DEC-78
! 1-003	- Change OPEN prefix to LUB.  JBS 13-DEC-78
! 1-004 - Add ERR= with IOSTAT.  SBL 1-May-1979
! 1-005 - Signal error if not open or direct.  SBL 1-May-1979
! 1-006 - 1-005 is a mistake.  No-op if not open, error if
!	  not sequential org and access.  SBL 16-May-1979
! 1-007	- Use 32-bit addressing for all external references.  JBS 10-JUL-1979
! 1-008	- Move BUILTIN ACTUALCOUNT into the routine.  The next version of the
!	  BLISS compiler will demand this.  JBS 20-Aug-1980
!--

!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!

REQUIRE 'RTLIN:OTSLNK';				! define all linkages

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    FOR$BACKSPACE;				! FORTRAN BACKSPACE statement

!
! INCLUDE FILES:
!

REQUIRE 'RTLML:FORERR';				! FORTRAN error numbers

REQUIRE 'RTLML:OTSISB';				! Define ISB offsets

REQUIRE 'RTLML:OTSLUB';				! Define LUB offsets

REQUIRE 'RTLIN:OTSMAC';				! Define macros

REQUIRE 'RTLIN:RTLPSECT';			! Define DECLARE_PSECTS macro

REQUIRE 'RTLML:FORPAR';				! Inter-module parameters

LIBRARY 'RTLSTARLE';				! STARLET library for macros and symbols

!
! MACROS:
!
!
! EQUATED SYMBOLS:
!
!
! PSECT DECLARATIONS:
!
DECLARE_PSECTS (FOR);				! declare PSECTs for FOR$ facility
!
! OWN STORAGE:
!
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    FOR$$SIGNAL_STO : NOVALUE,			! convert error number and SIGNAL
    FOR$$CB_PUSH : JSB_CB_PUSH NOVALUE,		! Create LUB/ISB/RAB if needed
    FOR$$CB_POP : JSB_CB_POP NOVALUE,		! Return I/O system to previous state
    FOR$$IOSTAT_HND;				! Condition handler


GLOBAL ROUTINE FOR$BACKSPACE (			! FORTRAN BACKSPACE statement
	UNIT, 					! Logical unit
	ERR_EQL					! Error code (optional)
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!
! FORMAL PARAMETERS:
!
!	UNIT.rl.v		logical unit to perform backspace
!	ERR_EQL.rl.v		If 0 or omitted, all errors are signalled.
!				If non-zero, errors unwind to the caller.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	The returned value is always a correct IOSTAT small integer
!	FORTRAN error number.
!
! SIDE EFFECTS:
!
!	SIGNAL_STOPs FOR$_BACERR if RMS REWIND error or RMS $GET error.
!
!--

    BEGIN

    GLOBAL REGISTER
	CCB = K_CCB_REG : REF BLOCK [, BYTE];

    BUILTIN
	ACTUALCOUNT;

    LOCAL
	L_UNWIND_ACTION : VOLATILE,		! UNWIND action code
	L_ERR_EQL_PRES : VOLATILE;		! 1 if ERR= present, 0 otherwise

    ENABLE
	FOR$$IOSTAT_HND (L_UNWIND_ACTION, L_ERR_EQL_PRES);	! LUB cleanup with ERR= and IOSTAT

    !+
    ! Determine if ERR= is present.
    !-

    IF ACTUALCOUNT () GTR 1 THEN L_ERR_EQL_PRES = .ERR_EQL ELSE L_ERR_EQL_PRES = 0;

    !+
    ! Unwind action is NO-OP (no LUB to pop).
    !-

    L_UNWIND_ACTION = FOR$K_UNWINDNOP;
    !-

    ! Get a LUB for this logical unit.
    ! On return, CCB points to the current control block.
    !-

    FOR$$CB_PUSH (.UNIT, LUB$K_LUN_MIN);

    !+
    ! Unwind action (in case error occurs) is to pop the LUB/RAB/ISB.
    !-

    L_UNWIND_ACTION = FOR$K_UNWINDPOP;

    !+
    ! Check the LUB.  If the file is not open, then this is a no-op.
    ! If it is open, it must be sequential org and access.
    !-

    IF .CCB [LUB$V_OPENED]
    THEN

	IF NOT .CCB [LUB$V_DIRECT] AND NOT .CCB [LUB$V_NOTSEQORG]
	THEN
	    BEGIN

	    !+
	    ! If the file was opened for APPEND (ACCESS='APPEND') then fail.
	    ! If RMS can't rewind the file then fail.
	    !-

	    IF .CCB [LUB$V_APPEND] OR NOT $REWIND (RAB = .CCB) THEN FOR$$SIGNAL_STO (FOR$K_BACERR);

	    !+
	    ! Now read records until we're positioned one record before
	    ! the last record read.
	    !-

	    IF .CCB [LUB$L_LOG_RECNO] GTRU 1	! i.e. we're sitting somewhere in the file
	    THEN
		BEGIN

		LOCAL
		    I;				! local temp for counting

		I = .CCB [LUB$L_LOG_RECNO] - 1;	! Point to previous record
		CCB [LUB$L_LOG_RECNO] = 1;

		WHILE .CCB [LUB$L_LOG_RECNO] LSSU .I DO
		    BEGIN

		    !+
		    ! Call RMS to get next record.
		    !-

		    IF NOT $GET (RAB = .CCB) THEN FOR$$SIGNAL_STO (FOR$K_BACERR);

		    !+
		    ! If segmented record control, check the validity
		    ! of the records and for end-of-file.  Read the
		    ! following segments of the segmented record until
		    ! last record control info is seen.
		    !-

		    IF .CCB [LUB$V_UNFORMAT] AND .CCB [LUB$V_SEGMENTED]
		    THEN

			UNTIL
			    BEGIN

			    IF ((.CCB [RAB$W_RSZ] EQL 0)	!
				OR ((.CCB [RAB$W_RSZ] GEQU 2) AND (.(.CCB [RAB$L_RBF])<2, 14> NEQ 0)))
			    THEN
				FOR$$SIGNAL_STO (FOR$K_BACERR);

			    .(.CCB [RAB$L_RBF])<1, 1>
			    END
			DO

			    IF NOT $GET (RAB = .CCB) THEN FOR$$SIGNAL_STO (FOR$K_BACERR);

		    CCB [LUB$L_LOG_RECNO] = .CCB [LUB$L_LOG_RECNO] + 1;
		    END;

		END;

	    END
	ELSE
	    FOR$$SIGNAL_STO (FOR$K_BACERR);

    !+
    ! Return I/O system to previous state.
    !-

    FOR$$CB_POP ();
    RETURN 0;					! Success IOSTAT value
    END;

END

ELUDOM
