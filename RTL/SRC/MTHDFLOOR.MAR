	.TITLE	MTH$DFLOOR - Greatest integer routine for double
	.IDENT	/1-007/			; File: MTHDFLOOR.MAR	Edit: RXW1007

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY: Math Library
;
; ABSTRACT:
;
;	This routine finds the largest integer less than the input
;	value, i.e. it truncates toward negative infinity
;	for data type double.
;
; ENVIRONMENT: User Mode, AST Reentrant
;
;--
; AUTHOR:R. Will,	 CREATION DATE: 1-Dec-78
;
; MODIFIED BY:
;
; VERSION 00
; 1-001	- Original 
; 1-002	- Add "_" to the PSECT directive.  JBS 22-DEC-78
; 1-003 - Put MTH$AINT code in line.  RW 26-MAR-79
; 1-004 - Fix bug for -1 < input < 0.  RW  11-Jul-79
; 1-005	- Add a JSB entry point.  JBS 25-JUL-1979
; 1-006	- Change name to MTH$DFLOOR.  JBS 27-JUL-1979
; 1-007 - Disable IV in JSB routine.  RW  10-Dec-79

	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;

;
; EXTERNAL DECLARATIONS:
;
	.DSABL	GBL				; Prevent undeclared
						; symbols from being
						; automatically global.
;
; MACROS:
;

	$PSLDEF					; define PSL

;
; EQUATED SYMBOLS:
;

;
; OWN STORAGE:
;

;
; PSECT DECLARATIONS:
;
	.PSECT _MTH$CODE PIC, USR, CON, REL, LCL, SHR, -
			EXE, RD, NOWRT, LONG


	.SBTTL	MTH$DFLOOR  - greatest integer double routine
;++
; FUNCTIONAL DESCRIPTION:
;
;	This routine finds the floor by truncating, and then if the
;	input value is negative and not an integer subtracting 1.
;
; CALLING SEQUENCE:
;
;	CALL result_int.wd.v = MTH$DFLOOR (input.rd.r)
;
; INPUT PARAMETERS:
;
	input_addr = 4			; address of the double number
					; to get the floor of
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; FUNCTION VALUE:
; COMPLETION CODES:
;
;	the double value of the greatest integer
;
; SIDE EFFECTS:
;
;	NONE
;
;--

	.ENTRY	MTH$DFLOOR, ^M<R2, R3>		; entry point

	MOVD	@input_addr(AP), R0		; R0/R1 = input argument
	EMODD	R0, #0, #1, R2, R2		; R2/R3 = fraction_part (arg)
	SUBD2	R2, R0				; R0/R1 = integer_part (arg)

	BGTR	40$				; if > 0, have correct answer

	TSTD	R2				; look at fraction part
	BGEQ	40$				; if > 0 then 0 < input < 1 and
						;  we have the correct answer
						; if = 0 then input was integer
						;  and we have correct answer

	SUBD2	#1,R0				; subtract 1 from truncated
						; negative non-integer

40$:	RET

	.SBTTL	MTH$DFLOOR_R3  - greatest integer double routine
;++
; FUNCTIONAL DESCRIPTION:
;
;	This is the JSB entry point to MTH$DFLOOR.
;
; CALLING SEQUENCE:
;
;	JSB result_int.wd.v = MTH$DFLOOR_R3 (input.rd.v)
;
; INPUT PARAMETERS:
;
;	R0 and R1 contain the input value
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; FUNCTION VALUE:
; COMPLETION CODES:
;
;	the double value of the greatest integer
;
; SIDE EFFECTS:
;
;	IV is disabled temporarily
;
;--

MTH$DFLOOR_R3::					; entry point

	MOVPSL	-(SP)				; Save current PSL
	BICPSW	#PSL$M_IV			; Disable integer overflow
	EMODD	R0, #0, #1, R2, R2		; R2/R3 = fraction_part (arg)
	SUBD2	R2, R0				; R0/R1 = integer_part (arg)

	BGTR	40$				; if > 0, have correct answer

	TSTD	R2				; look at fraction part
	BGEQ	40$				; if > 0 then 0 < input < 1 and
						;  we have the correct answer
						; if = 0 then input was integer
						;  and we have correct answer

	SUBD2	#1,R0				; subtract 1 from truncated
						; negative non-integer

40$:	BICL3	#^C<PSL$M_IV>, (SP)+, R2	; Clear all but right byte
	BISPSW	R2				; Restore previous IV
	RSB

	.END
