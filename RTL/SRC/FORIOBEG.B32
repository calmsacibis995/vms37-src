MODULE FOR$$IO_BEG (				! FORTRAN READ/WRITE statement initialization user calls
		IDENT = '2-005'			! File: FORIOBEG.B32  Edit: JAW2005
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY: FORTRAN Support Library - Not user callable
!
! ABSTRACT:
!
!	This module contains the common initialization code for
!	all FORTRAN multi-call I/O statements (READ, WRITE, 
!	ENCODE, DECODE, REWRITE, PRINT, TYPE and ACCEPT).
!
! ENVIRONMENT: User access mode; mixture of AST level or not.
!
! AUTHOR: Thomas N. Hastings, CREATION DATE: 08-Mar-77: Version 01
!	  Steven B. Lionel, 4-Dec-1979: Version 2
!
!
! 2-001 - All new logic, optimized for high speed.  Steve Lionel
!	  with many helpful suggestions from Rich Grove.  4-Dec-1979
! 2-002 - Fixed bug in run-time formatting.  SBL 11-Dec-1979
! *****	- VMS V2.0
! 2-003 - Add support for NAMELIST.  Also move BUILTIN declaration of
!	  ACTUALCOUNT to inside the routine which uses it.  SBL 21-August-1980
! 2-004 - Declare ARGS to be 4 bytes since the second byte is looked at.  
!	  BLISS V2.0 didn't catch it, but V2.1 did.  SBL 14-Oct-1980
! 2-005 - Enhance MIXFILACC message.  JAW 22-Aug-1981
!--


!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE),
    ZIP;		! Optimize for speed

!
! LINKAGES:
!

REQUIRE 'RTLIN:OTSLNK';				! Define all linkages

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    FOR$$IO_BEG : CALL_FIOBEG NOVALUE;		! Common routine for all

						! I/O statements
!
! INCLUDE FILES:
!

LIBRARY 'RTLSTARLE';				! System symbols

REQUIRE 'RTLML:FORERR';				! FORTRAN error number definitions

REQUIRE 'RTLML:FORMSG';				! Fortran 32-bit error conditions

REQUIRE 'RTLML:OTSLUB';				! logical unit block (LUB) offsets

REQUIRE 'RTLML:OTSISB';				! I/O statement block (ISB) offsets

REQUIRE 'RTLIN:OTSMAC';				! Macros

REQUIRE 'RTLIN:RTLPSECT';			! Define DECLARE_PSECTS macro

REQUIRE 'RTLIN:FOROPN';				! FORTRAN OPEN parameter symbols

						! of form: OPEN$K_ keyword
						! and literal values of form:
						! OPEN$K_key_lit

REQUIRE 'RTLML:FORPAR';				! FORTRAN inter-module paramters (UNWIND, FOR$ENTRY)

!
! MACROS:
!

MACRO
    POS (A,B,C,D) = B %,	! Gets bit position from LUB$V symbol

    MASK (A,B,C,D) = 1^B %;	! Mask for LUB$V symbol

!
! EQUATED SYMBOLS:
!
LITERAL

    !+
    ! Masks for denoting which arguments are present for each statement
    ! type.  The two M_TST_ masks are used for testing combined attributes
    ! of a statement type.
    !-
    M_ARG_FMT	= 1^0,		! 1 if format is present
    M_ARG_REC	= 1^1,		! 1 if record number is present
    M_ARG_USR	= 1^2,		! 1 if user buffer is present
    M_ARG_KEY	= 1^3,		! 1 if key fields are present
    M_TST_INT	= 1^4,		! 1 if internal file or ENCODE/DECODE
    M_TST_FMT	= 1^5,		! 1 if formatted or list-directed

    !+
    ! Masks which select which unit attributes are NOT allowed for
    ! a statement type.
    !-
    M_ATR_RON	= MASK (LUB$V_READ_ONLY),	! 1 if READ_ONLY prohibited
    M_ATR_DIR	= MASK (LUB$V_DIRECT),		! 1 if DIRECT prohibited
    M_ATR_FMT	= MASK (LUB$V_FORMATTED),	! 1 if FORMATTED prohibited
    M_ATR_UNF	= MASK (LUB$V_UNFORMAT),	! 1 if UNFORMATTED prohibited
    M_ATR_SEQ	= MASK (LUB$V_SEQUENTIA),	! 1 if SEQUENTIAL prohibited
    M_ATR_KEY	= MASK (LUB$V_KEYED);		! 1 if KEYED prohibited

!
! FIELD DECLARATIONS:
!
FIELD

    ARG_FIELDS =
	!+
	! See definition of M_ARG_x and M_TST_x literals above.
	!-
	SET
	ARG_FMT = [0,0,1,0],
	ARG_REC = [0,1,1,0],
	ARG_USR = [0,2,1,0],
	ARG_KEY = [0,3,1,0],
	TST_INT = [0,4,1,0],
	TST_FMT = [0,5,1,0],
	TST_OBJ = [0,POS (FOR$V_OBJ_FMT),1,0]	! 1 if run-time format
	TES,

    ATR_FIELDS =
	!+
	! See definition of M_ATR_x literals above.
	!-
	SET
	ATR_RON = [0,POS (LUB$V_READ_ONLY),1,0],
	ATR_DIR = [0,POS (LUB$V_DIRECT),1,0],
	ATR_FMT = [0,POS (LUB$V_FORMATTED),1,0],
	ATR_UNF = [0,POS (LUB$V_UNFORMAT),1,0],
	ATR_SEQ = [0,POS (LUB$V_SEQUENTIA),1,0],
	ATR_KEY = [0,POS (LUB$V_KEYED),1,0]
	TES;

!
! PSECT DECLARATIONS:
!
DECLARE_PSECTS (FOR);				! declare PSECTs for FOR$ facility
!
! OWN STORAGE:
!

BIND
    ERR_ADR_IDX =	! For each statement type, gives
			! the argument list index for the
			! ERR= parameter.  Numbering starts
			! at 1.
	UPLIT BYTE (

		0,					! unused
		3,					! WRITE sequential formatted
		3,					! READ sequential formatted
		2,					! WRITE sequential unformatted
		2,					! READ sequential unformatted
		4,					! WRITE direct formatted
		4,					! READ direct formatted
		3,					! WRITE direct unformatted
		3,					! READ direct unformatted
		2,					! WRITE sequential list-directed
		2,					! READ sequential list-directed
		4,					! ENCODE formatted
		4,					! DECODE formatted
		3,					! REWRITE formatted
		6,					! READ keyed formatted
		2,					! REWRITE unformatted
		5,					! READ keyed unformatted
		3,					! WRITE internal formatted
		3,					! READ internal formatted
		3,					! WRITE sequential NAMELIST
		3					! READ sequential NAMELIST

	) : VECTOR [ISB$K_FORSTTYHI+1, BYTE],

    STMT_ARG = 				! A table indexed by statement type
					! that has a bit set in the appropriate
					! position if an argument is defined
					! for that statement.  Other bits
					! are used for combined tests.
					! See above for literal definitions.
	UPLIT BYTE (

	    0,						! unused
	    M_ARG_FMT+M_TST_FMT,			! WRITE sequential formatted
	    M_ARG_FMT+M_TST_FMT,			! READ sequential formatted
	    0,						! WRITE sequential unformatted
	    0,						! READ sequential unformatted
	    M_ARG_FMT+M_ARG_REC+M_TST_FMT,		! WRITE direct formatted
	    M_ARG_FMT+M_ARG_REC+M_TST_FMT,		! READ direct formatted
	    M_ARG_REC,					! WRITE direct unformatted
	    M_ARG_REC,					! READ direct unformatted
	    M_TST_FMT,					! WRITE sequential list-directed
	    M_TST_FMT,					! READ sequential list-directed
	    M_ARG_FMT+M_ARG_USR+M_TST_INT+M_TST_FMT,	! ENCODE formatted
	    M_ARG_FMT+M_ARG_USR+M_TST_INT+M_TST_FMT,	! DECODE formatted
	    M_ARG_FMT+M_TST_FMT,			! REWRITE formatted
	    M_ARG_FMT+M_ARG_KEY+M_TST_FMT,		! READ keyed formatted
	    0,						! REWRITE unformatted
	    M_ARG_KEY,					! READ keyed unformatted
	    M_ARG_FMT+M_TST_INT+M_TST_FMT,		! WRITE internal formatted
	    M_ARG_FMT+M_TST_INT+M_TST_FMT,		! READ internal formatted
	    M_ARG_FMT+M_TST_FMT,			! WRITE sequential NAMELIST
	    M_ARG_FMT+M_TST_FMT				! READ sequential NAMELIST

	    ) : VECTOR [ISB$K_FORSTTYHI+1,BYTE],

    STMT_ATR = 
						! A table of statement
						! attributes indexed by
						! statement type.  If a
						! bit is set, the corresponding
						! attribute is NOT permitted
						! to be defined for the unit.
						! A table entry is ANDed
						! with LUB$W_UNIT_ATTR.  If
						! the result is non-zero,
						! there is a disallowed
						! combination.
	UPLIT WORD (

	    0,						! unused
	    M_ATR_RON+M_ATR_DIR+M_ATR_UNF,		! WRITE sequential formatted
	    M_ATR_DIR+M_ATR_UNF,			! READ sequential formatted
	    M_ATR_RON+M_ATR_DIR+M_ATR_FMT,		! WRITE sequential unformatted
	    M_ATR_DIR+M_ATR_FMT,			! READ sequential unformatted
	    M_ATR_RON+M_ATR_SEQ+M_ATR_KEY+M_ATR_UNF,	! WRITE direct formatted
	    M_ATR_SEQ+M_ATR_KEY+M_ATR_UNF,		! READ direct formatted
	    M_ATR_RON+M_ATR_SEQ+M_ATR_KEY+M_ATR_FMT,	! WRITE direct unformatted
	    M_ATR_SEQ+M_ATR_KEY+M_ATR_FMT,		! READ direct unformatted
	    M_ATR_RON+M_ATR_DIR+M_ATR_KEY+M_ATR_UNF,	! WRITE sequential list-directed
	    M_ATR_DIR+M_ATR_KEY+M_ATR_UNF,		! READ sequential list-directed
	    0,						! ENCODE formatted
	    0,						! DECODE formatted
	    M_ATR_RON+M_ATR_DIR+M_ATR_UNF,		! REWRITE formatted
	    M_ATR_DIR+M_ATR_SEQ+M_ATR_UNF,		! READ keyed formatted
	    M_ATR_RON+M_ATR_DIR+M_ATR_FMT,		! REWRITE unformatted
	    M_ATR_DIR+M_ATR_SEQ+M_ATR_FMT,		! READ keyed unformatted
	    0,						! WRITE internal formatted
	    0,						! READ internal formatted
	    M_ATR_RON+M_ATR_DIR+M_ATR_UNF,		! WRITE sequential NAMELIST
	    M_ATR_DIR+M_ATR_UNF				! READ sequential NAMELIST

	) : VECTOR [ISB$K_FORSTTYHI+1, WORD];



!
!
! EXTERNAL REFERENCES:
!
!

EXTERNAL ROUTINE
    FOR$$CB_PUSH : JSB_CB_PUSH NOVALUE,		! Create LUB/ISB/RAB, if needed, for this unit and
    						! push down I/O system
    FOR$$FMT_COMPIL : WEAK,			! Format compiler - returns adr
    						! of compiled format
    FOR$$ERR_ENDHND,				! error condition handler for ERR= and END=
    FOR$$SIGNAL_STO : NOVALUE,			! Convert FORTRAN  err#
    						! to VAX error # and SIGNAL_STOP.
    FOR$$OPEN_DEFLT : CALL_CCB NOVALUE;		! Perform default OPEN

EXTERNAL
    FOR$$AA_UDF_PR0 : VECTOR,			! UDF level initialization dispatch
    						! table
    FOR$$IO_IN_PROG;				! I/O in progress handler


GLOBAL ROUTINE FOR$$IO_BEG (FLAGS_ARG, UNIT) : CALL_FIOBEG NOVALUE =
!+
! FUNCTIONAL DESCRIPTION:
!
!	Common I/O statement initialization:
!
!	1. Determine if ERR= and/or END= optional parameters
!	   are present or not.
!	2. Setup an error handler.
!	3. Setup a LUB/ISB/RAB control block for this logical unit
!	   if not setup already.
!	4. Check for incorrect mixing of I/O statements.
!	5. If unit not already OPEN, OPEN it.
!	6. Store away passed parameters.
!
! FORMAL PARAMETERS:
!
!	FLAGS_ARG.rl.v	- This contains the statement type number is
!			  bits 0:7.  If bit FOR$V_OBJ_FMT (8) is set,
!			  then this is a run-time (historically "object-time")
!			  formatted statement and requires the format
!			  compiler to be defined (via a strong .EXTERN
!			  somewhere else).
!			  This parameter is passed in R0.
!
!	UNIT		- The first of the arguments pointed to by the
!			  AP.  This is the unit number passed by value
!			  except for the following statements:
!				ENCODE,DECODE	- byte count
!				Internal file	- address of user
!						  variable descriptor.
!			  Remaining arguments are selected based on the
!			  ARG_TYPES vector of bits.
!
! IMPLICIT INPUTS:
!
!	LUB$V_SEQUENTIA		This unit has been specified for
!				sequential access by a previous OPEN.
!	LUB$V_DIRECT		This unit has been specified for
!				direct access by a previous OPEN
!				or DEFINE FILE.
!	LUB$V_KEYED		This unit has been specified for
!				keyed access by a previous OPEN.
!	LUB$V_FORMATTED		This unit has been specified for
!				formatted I/O by a previous OPEN
!				or default OPEN.
!	LUB$V_UNFORMAT		This unit has been specified for
!				unformatted I/O by a previous
!				OPEN, DEFINE FILE, or default OPEN.
!	LUB$V_READ_ONLY		This unit has been specified for
!				performing READs only by the current
!				OPEN or CALL FDBSET.
!	LUB$V_OPENED		This unit has been opened by a previous
!				OPEN, or default OPEN (for READ/WRITE
!				OR ENDFILE).
!
! IMPLICIT OUTPUTS:
!
!	LUB$L_LOG_RECNO		Current logical (or spanned)
!				record number for sequential access
!				files (needed for BACKSPACE of spanned
!				records). Current FORTRAN direct
!				access files 1 = first record.
!				0 never stored.
!	ISB$A_ERR_EQUAL		Adr. of jump to if error occurs
!				(ERR= supplied) or 0
!	ISB$A_END_EQUAL		Adr. to jump to if end of file
!				occurs (END= supplied) or 0.
!	ISB$B_ERR_NO		0.  Last continuable error during statement
!	ISB$A_FMT_BEG		If object-time format, Adr. of first
!				char in resultant format array.
!	RAB$B_KRF		set to keyid if present and not -1
!	RAB$V_KGE		set if match present and is 1
!	RAB$V_KGT		set if match present and is 2
!	RAB$L_KBF		set to the key address
!	RAB$B_KSZ		set to to key size or zero if not string
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Allocates a LUB/ISB/RAB block if necessary.
!	Initiates activity on an ISB.
!	Opens a unit if necessary.
!
! NOTES:
!	In the Run-Time Library, FOR$$IO_BEG is never actually called.
!	Each statement type has its own entry point which places the
!	correct type number in R0 and then branches to the FOR$$IO_BEG+2.
!	These separate entry points also make the required external
!	references to the UDF and REC level routines and the format
!	compiler if necessary.
!--

    BEGIN

    GLOBAL REGISTER
	CCB = K_CCB_REG : REF BLOCK [, BYTE];

    BUILTIN
	ACTUALCOUNT,			! The number of arguments we were called with
	FP,				! Our frame pointer
	AP;				! Reference to the "caller" argument list

    LOCAL 					! The first 4 locals are used by error-processing routines:
	L_UNWIND_ACTION : VOLATILE,		! Unwind action code (FOR$K_UNWIND{POP or NOP}
	A_ERR_ADR : VOLATILE,			! User-program supplied ERR= address  (0 if none)
	A_END_ADR : VOLATILE,			! User-program supplied END= address  (0 if none)
	L_UNWIND_DEPTH : VOLATILE,		! No. of additional frames to unwind if error
	! produced at compiled time or object time
	STMT_TYPE,				! Statement type number
	ERR_POS : REF VECTOR [,LONG],		! Address of err_adr parameter
	ARGS : BLOCK [4, BYTE] FIELD (ARG_FIELDS),	! Argument flags
	PTR : REF VECTOR [,LONG];		! Argument list pointer

    STACKLOCAL
	ARG_LIST_END;				! Address of last actual argument

    MAP
	FLAGS_ARG : BLOCK [4,BYTE],		! Passed in R0
	AP : REF VECTOR [,LONG],		! Pointer to argument list
	FP : REF BLOCK [,BYTE];

    ENABLE 					! Establish error handler and provide arguments:
	!   UNWIND action code, depth to unwind (0)
	!   ERR= and END= addresses from caller
	FOR$$ERR_ENDHND (L_UNWIND_ACTION, A_ERR_ADR, A_END_ADR, L_UNWIND_DEPTH);

    !+
    ! Copy flags argument passed by "caller" in R0
    !-

    !+
    ! Set STMT_TYPE to FORTRAN statement type. Set up ARGS with bit
    ! for run-time formatting.
    !-
    STMT_TYPE = .FLAGS_ARG [FOR$B_STMT_TYPE];
    FLAGS_ARG [FOR$B_STMT_TYPE] = 0;
    ARGS = .STMT_ARG [.STMT_TYPE] OR .FLAGS_ARG;

    !+
    ! Set cleanup action on UNWIND to no-operation (since
    ! LUB/ISB/RAB not pushed down yet).
    ! Also set L_UNWIND_DEPTH to additional no. of stack frames between
    ! establisher and user program to be unwound in order to
    ! get back to user program.
    !-

    L_UNWIND_ACTION = FOR$K_UNWINDNOP;

    !+
    ! Setup LOCAL A_ERR_ADR and A_END_ADR to pass to error handler
    ! in case of a SIGNAL.
    !-

    ARG_LIST_END = AP [ACTUALCOUNT ()];		! Get address of last entry
    ERR_POS = AP [.ERR_ADR_IDX [.STMT_TYPE]];
    IF .ARG_LIST_END GEQA ERR_POS [0]
    THEN
	BEGIN
	IF .ARG_LIST_END GTRA ERR_POS [0]
	THEN
	    A_END_ADR = .ERR_POS [1];
	A_ERR_ADR = .ERR_POS [0];
	END;



    !+
    ! Call FOR$$CB_PUSH to initiate I/O on this unit.  If this is
    ! an internal file I/O or ENCODE/DECODE, then use a special
    ! logical unit number.
    !-

    IF NOT .ARGS [TST_INT]		! Not internal file type
    THEN
	FOR$$CB_PUSH (.UNIT, LUB$K_DLUN_MIN)
    ELSE
	FOR$$CB_PUSH (LUB$K_LUN_ENCD, LUB$K_LUN_ENCD);

    L_UNWIND_ACTION = FOR$K_UNWINDPOP;

    !+
    ! Store away ERR= and END= address for duration of I/O
    ! statement.
    ! Store I/O statement type code for
    ! future dispatching to other levels of abstraction during
    ! this I/O statement.
    ! Clear last continuable error byte in ISB.
    !-

    CCB [ISB$A_ERR_EQUAL] = .A_ERR_ADR;
    CCB [ISB$A_END_EQUAL] = .A_END_ADR;
    CCB [ISB$B_ERR_NO] = 0;
    CCB [ISB$B_STTM_TYPE] = .STMT_TYPE;

    !+
    ! Check for the following errors:
    !	OPEN or DEFINE FILE required for keyed or direct access
    !	mixed file access modes
    !	write to READONLY file
    ! This is done by ANDing the word in the LUB that has unit attribute
    ! bits with the appropriate mask in STMT_ATR.  If any bit is still on,
    ! then at least one invalid combination was detected.  The bits are
    ! then analyzed to determine which error was found.
    !-

    IF (.STMT_ATR [.STMT_TYPE] AND .CCB [LUB$W_UNIT_ATTR]) NEQ 0
    THEN
	BEGIN
	!+
	! If we get here, then we know there is an invalid combination.
	! Give the appropriate error message depending on which bit
	! is still on.
	!-
	LOCAL
	    ATTR : BLOCK [1,WORD] FIELD (ATR_FIELDS);
	!+
	! The following assignment is done in two statements to prevent
	! BLISS from making a common subexpression with the above test.
	!-
	ATTR = .STMT_ATR [.STMT_TYPE];
	ATTR = .ATTR AND .CCB [LUB$W_UNIT_ATTR];
	IF .ATTR [ATR_SEQ]
	THEN
	    BEGIN	! Can't be ACCESS='SEQUENTIAL'
	    FOR$$SIGNAL_STO (FOR$K_OPEDEFREQ);
	    RETURN;
	    END;
 	IF .ATTR [ATR_RON]
	THEN
	    BEGIN	! Can't be READONLY
	    FOR$$SIGNAL_STO (FOR$K_WRIREAFIL);
	    RETURN;
	    END;
	!+
	! If it isn't either of the above, then it must be mixed access
	! modes or formatting types.  Signal MIXFILACC as the primary
	! message, with explanatory chained message.  Note that direct
	! or keyed I/O to a sequential unit has already been rejected
	! above with OPEDEFREQ.
	!-
	FOR$$SIGNAL_STO (FOR$K_MIXFILACC,
		!+
		! Choose the appropriate secondary message.
		!-
		IF      .ATTR [ATR_UNF] THEN FOR$_FMTIO_UNF
		ELSE IF .ATTR [ATR_FMT] THEN FOR$_UNFIO_FMT
		ELSE IF .ATTR [ATR_KEY] THEN FOR$_DIRIO_KEY
		ELSE IF .ATTR [ATR_DIR] THEN
		    IF .ARGS [ARG_KEY]		! Check statement type
			THEN FOR$_KEYIO_DIR
			ELSE FOR$_SEQIO_DIR
		ELSE 0
	    );
	RETURN;
	END;

    !+
    ! We now start picking up arguments from the argument list.  PTR
    ! will be the pointer to the current place in the argument list.
    ! Depending on bits set in ARGS, arguments will be taken and
    ! PTR advanced.
    !-

    PTR = AP [2];		! Start with second argument

    !+
    ! Get record number if present
    !-

    IF .ARGS [ARG_REC]
    THEN
	BEGIN
	IF .PTR [0] EQL 0 OR
	   (.CCB [LUB$L_REC_MAX] NEQ 0 AND (.PTR [0] GTRU .CCB [LUB$L_REC_MAX]))
	THEN
	    !+
	    ! The record number was zero or was greater than the
	    ! maximum for this file.
	    !-
	    BEGIN
	    FOR$$SIGNAL_STO (FOR$K_RECNUMOUT);
	    RETURN;
	    END;
	CCB [LUB$L_LOG_RECNO] = RLONG_A (PTR);	! Pick up logical record number
	END;

    !+
    ! If this is a run-time (object-time) format,
    ! compile format and store address and length in ISB.
    ! Otherwise store the address of the pre-compiled format into the ISB.
    ! Note: a NAMELIST description block is passed as if were a compiled
    ! format, so it is stored here.
    !-

    IF .ARGS [ARG_FMT]
    THEN
	IF NOT .ARGS [TST_OBJ]
	THEN
	    CCB [ISB$A_FMT_BEG] = RLONG_A (PTR)
	ELSE
	    FOR$$FMT_COMPIL (RLONG_A (PTR), CCB [ISB$W_FMT_LEN], CCB [ISB$A_FMT_BEG]);


    !+
    ! If the unit is open, check to see if it was opened by ENDFILE.
    ! If it was, complete the attribute specifications based on the
    ! statement type.
    ! If the unit is not open, open it using default attributes based
    ! on the statement type.
    !-

    IF .CCB [LUB$V_OPENED]		! Unit opened
    THEN
	BEGIN
	IF .CCB [LUB$V_ENDFILOPN]	! Opened by ENDFILE
	THEN
	    BEGIN
	    CCB [LUB$V_ENDFILOPN] = 0;	! Turn off bit
	    IF .ARGS [TST_FMT]		! Formatted or list-directed
	    THEN
		CCB [LUB$V_FORMATTED] = 1
	    ELSE
		BEGIN
		CCB [LUB$V_UNFORMAT] = 1;
		CCB [LUB$V_SEGMENTED] = 1;	! Has to be sequential
		END;
	    END;
	END
    ELSE IF NOT .ARGS [TST_INT]	
    THEN
	BEGIN		! Not internal file or ENCODE/DECODE
	L_UNWIND_ACTION = FOR$K_UNWINDRET;
	FOR$$OPEN_DEFLT (
		! ACCESS = 'SEQUENTIAL' or 'DIRECT'
		!
		(IF .ARGS [ARG_REC] THEN OPEN$K_ACC_DIR ELSE OPEN$K_ACC_SEQ),
		! TYPE = 'OLD' or 'NEW'
		!
		(IF .STMT_TYPE THEN OPEN$K_TYP_NEW ELSE OPEN$K_TYP_OLD),
		! FORM = 'FORMATTED' or 'UNFORMATTED'
		!
		(IF .ARGS [TST_FMT] THEN OPEN$K_FOR_FOR ELSE OPEN$K_FOR_UNF));
	L_UNWIND_ACTION = FOR$K_UNWINDPOP;
	END
    ELSE
	BEGIN
	!+
	! ENCODE/DECODE or internal file
	!-
	CCB [LUB$V_FORMATTED] = 1;
	CCB [ISB$V_DE_ENCODE] = 1;

	IF NOT .ARGS [ARG_USR]	! Not ENCODE/DECODE?
	THEN
	    CCB [LUB$A_BUF_PTR] = .PTR [-2]		! Descriptor is 2 arguments back
	ELSE
	    BEGIN
	    CCB [LUB$A_BUF_PTR] = RLONG_A (PTR);
	    CCB [LUB$A_BUF_END] = .CCB [LUB$A_BUF_PTR] + .PTR [-3];	! Length
	    END;

	END;


    !+
    ! Form local block so we have KEYVAL on stack at JSB time, if
    ! necessary.  It will only be used by UDF0.
    !-

    BEGIN

    LOCAL
	KEYVAL;		! Local copy of ISAM key for conversion between I*2 and I*4

    !+
    ! Fill in values for ISAM statements.
    ! Normally, this type of thing is done at the REC level, but
    ! why take up space in the ISB when the RAB is already here?
    !-

    IF .ARGS [ARG_KEY]
    THEN
	BEGIN

	LOCAL
	    KEY : REF BLOCK [, BYTE];

	KEY = RLONG_A (PTR);
	CCB [RAB$L_KBF] = .KEY [DSC$A_POINTER];

	IF .KEY [DSC$W_LENGTH] GTRU 255
	THEN
	    BEGIN
	    FOR$$SIGNAL_STO (FOR$K_INVKEYSPE);
	    RETURN;
	    END;

	!+
	! If this is a text string, then use its length.
	! If a byte array, treat as a string whose length is the
	! array size (for compatibility with PDP-11 FORTRAN IV-PLUS).
	! Otherwise, set the key size to zero, which lets RMS use
	! whatever key size it wants for numeric values.
	!-

	SELECTONEU .KEY [DSC$B_DTYPE] OF
	    SET

	    [DSC$K_DTYPE_T] :
		CCB [RAB$B_KSZ] = .KEY [DSC$W_LENGTH];

	    [DSC$K_DTYPE_BU, DSC$K_DTYPE_B] :
		BEGIN

		IF .KEY [DSC$B_CLASS] EQLU DSC$K_CLASS_A	! Byte array
		THEN
		    BEGIN

		    IF .KEY [DSC$L_ARSIZE] GTRU 255
		    THEN
			BEGIN
			FOR$$SIGNAL_STO (FOR$K_INVKEYSPE);
			RETURN;
			END;

		    CCB [RAB$B_KSZ] = .KEY [DSC$L_ARSIZE];
		    END
		ELSE
		    CCB [RAB$B_KSZ] = 0;

		END;

	    [DSC$K_DTYPE_W, DSC$K_DTYPE_WU] : 	! INTEGER*2
		BEGIN
		KEYVAL = .(.KEY [DSC$A_POINTER])<0, %BPVAL/2, 1>;	! Convert word to long
		CCB [RAB$L_KBF] = KEYVAL;	! Address of value
		CCB [RAB$B_KSZ] = 0;		! Keysize assumed correct
		END;

	    [OTHERWISE] :
		CCB [RAB$B_KSZ] = 0;		! RMS knows the proper key size
	    TES;

	!+
	! Set KEYID and MATCH parameters.
	!-

	CCB [RAB$V_KGE] = 0;
	CCB [RAB$V_KGT] = 0;

	IF .ARG_LIST_END GEQA .PTR
	THEN
	    BEGIN
	    LOCAL
		KEYID;
	    KEYID = RLONG_A (PTR);
	    IF .KEYID GEQ 0
	    THEN
		IF .KEYID GTR 254
		THEN
		    BEGIN
		    FOR$$SIGNAL_STO (FOR$K_INVKEYSPE);
		    RETURN;
		    END
		ELSE
		    CCB [RAB$B_KRF] = .KEYID;

	    IF .ARG_LIST_END GEQA .PTR
	    THEN
		CASE .PTR [0] FROM 0 TO 2 OF
		    SET

		    [0] :
			;			! Match equal to
		    [1] :
			CCB [RAB$V_KGE] = 1;	! Match greater or equal
		    [2] :
			CCB [RAB$V_KGT] = 1;	! Match greater than
		    [OUTRANGE] :
			BEGIN
			FOR$$SIGNAL_STO (FOR$K_INVARGFOR);
			RETURN;
			END;

		    TES;
	    END;

	END;

    !+
    ! Call appropriate User data formatted level of abstraction
    ! (UDF level = level 2) initialization routine.
    !-

    JSB_UDF0 (FOR$$AA_UDF_PR0 + .FOR$$AA_UDF_PR0 [.CCB [ISB$B_STTM_TYPE] - ISB$K_FORSTTYLO + 1])
    END;					! End of ISAM + JSB

    !+
    ! Set up I/O in progress handler in caller's frame
    !-

    BEGIN
    LOCAL
	FRAME : REF BLOCK [, BYTE];
    FRAME = .FP [SF$L_SAVE_FP];			! Our caller's frame
    CCB [ISB$A_USER_FP] = .FRAME;		! Store frame address
    CCB [ISB$A_USR_HANDL] = .FRAME [SF$A_HANDLER];	! Caller's handler
    FRAME [SF$A_HANDLER] = FOR$$IO_IN_PROG;	! Address of I/O in progress handler
    END;

    END;					! End of FOR$$IO_BEG routine

END						! End of FOR$$IO_BEG module

ELUDOM
