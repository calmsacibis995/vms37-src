	.TITLE	COB$CVTRFQ_R8	COBOL Convert Rounded Floating to Quadword
	.IDENT	/1-006/		; File: COBCVTRFQ.MAR

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
; FACILITY: COBOL SUPPORT
;++
; ABSTRACT:
;	This module contains the routine that converts floating
;	numbers to quadword with rounding.
;
;
;--
;
; VERSION: 1
;
; HISTORY:
;
; AUTHOR:
;	Marty Jack, 14-Mar-1979
;
; MODIFIED BY:
;
;
;

	.SBTTL	HISTORY		; Detailed Current Edit History


; Edit History for Version 1 of COBCVTRFQ
;
; 1-001	- Original.  MLJ 14-Mar-1979
; 1-002 - Correct problem with high order longword.  MLJ 22-Mar-1979
; 1-003	- Correct round toward zero problem.  PDG 12-Jun-1979
; 1-004 - Make external references explicit. RKR 17-JULY-1979
; 1-005 - Change all references to FOR$CNV_OUT_E to COB$CNVOUT
;	  RKR  27-SEPT-79
; 1-006 - Cosmetic changes. RKR 18-OCT-79

	.SBTTL	DECLARATIONS

;
; INCLUDE FILES:
;
	$DSCDEF

;
; EXTERNAL SYMBOLS:

	.DSABL	GBL		; Prevent undeclared symbols from being
				; automatically global.

	.EXTRN	COB$CNVOUT	; E-format conversion
	.EXTRN	LIB$STOP	; Error halt
	.EXTRN	OTS$_FATINTERR	; Fatal internal error code
;

;
; MACROS:
;	NONE
;

;
; PSECT DECLARATIONS:
	.PSECT	_COB$CODE	PIC, SHR, LONG, EXE, NOWRT

;
; EQUATED SYMBOLS:
;	NONE
;

;
; OWN STORAGE:
;
;+
; The following constant has the value 2**32.  It is used for scaling
; the high 32 bits and for compensating for unsigned arithmetic.
;-
BIAS:	.PACKED 4294967296
;+
; The following constant is 2**32-1.  It is subtracted from negative numbers,
; to compensate for DIVP truncating towards zero.
;-
BIAS_1:	.PACKED	4294967295
BIAS_DIGITS=10
;

	.SBTTL	COB$CVTRFQ_R8

;++
; FUNCTIONAL DESCRIPTION:
;
;	Converts a floating number to quadword with rounding.
;
; CALLING SEQUENCE:
;
;	JSB COB$CVTRFQ_R8 (scale.rl.v, src.rf.r, dst.wq.r)
;
;	Arguments are passed in R6, R7, and R8.
;
; INPUT PARAMETERS:
;	
;	SCALE.rl.v		The power of ten by which the internal
;				representation of the source must be
;				multiplied to scale the same as the 
;				internal representation of the dest.
;	SRC.rf.r		The number to be converted
;
; IMPLICIT INPUTS:
;
;	All of the trap bits in the PSL are assumed off.
;
; OUTPUT PARAMETERS:
;
;	DST.wq.r		The place to store the converted number
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; FUNCTION VALUE:
;
;	1 = SUCCESS, 0 = FAILURE
;
; SIDE EFFECTS:
;
;	Destroys registers R0 through R8.
;	
;--


COB$CVTRFQ_R8::
	SUBL2	#48,SP			; Allocate temp space
	CVTFD	(R7),(SP)		; Get input number
;
; Make a descriptor for the temporary string.
;
	PUSHAB	8(SP)			; Address = space reserved
	MOVB	#DSC$K_CLASS_S,-(SP)	; Class = static
	MOVB	#DSC$K_DTYPE_T,-(SP)	; Data type = ASCII string
	MOVW	#38,-(SP)		; Length in bytes
;
; Call COB$CNVOUT.
;
	PUSHL	#31			; Digits in fraction
	PUSHAB	4(SP)			; Output string descriptor
	PUSHAB	16(SP)			; Number to convert
	CALLS	#3,G^COB$CNVOUT		; Call conversion routine
	BLBC	R0,20$			; Should never fail
;
; Convert the exponent and correct for scale factor.
;
	CVTSP	#2,51(SP),#2,(SP)	; Make packed exponent
	CVTPL	#2,(SP),R0		; Make longword exponent
	MOVAB	-31(R6)[R0],R6		; Correct for fraction size and scale
;
; Convert the fraction to packed.
;
	MOVB	16(SP),18(SP)		; Move sign over "."
	CVTSP	#31,18(SP),#31,(SP)	; Make packed fraction
	ASHP	R6,#31,(SP),#5,#19,16(SP) ; Scale to temporary
					;     (also clears R0)
	BVS	10$			; Branch if won't fit in 19 digits
	CVTPL	#19,(R3),(R8)		; Convert to longword
					;     (also clears R0)
	BVS	11$			; Can't fit in 32 bits
	ASHL	#-31,(R8)+,(R8)		; Spread sign bit
	INCL	R0			; Indicate success, R0 = 1
10$:	ADDL2	#56,SP			; Delete stack temps
	RSB
;
; Come here if the packed number won't fit in 32 bits.
; Divide by 2**32 to get the high 32 bits of the quadword.
;
11$:	BLBC	9(R1),13$		; Skip if positive
	SUBP4	#BIAS_DIGITS,BIAS_1,#19,(R1)  ; Make more negative
13$:	DIVP	#BIAS_DIGITS,BIAS,#19,16(SP),#19,(SP)  ; Divide by 2**32
	CVTPL	#19,(SP),4(R8)		; Convert and store high bits
					;     (also clears R0)
	BVS	12$			; Number too large for a 64-bit integer
	INCL	R0			; Indicate success, R0 = 1
12$:	ADDL2	#56,SP			; Delete stack temps
	RSB				; Return
;
; Come here on failure of COB$CNVOUT.  This should never happen.
;
20$:	PUSHL	#OTS$_FATINTERR		; OTS fatal error message
	CALLS	#1,G^LIB$STOP		; Signal and don't return
;
	.END
