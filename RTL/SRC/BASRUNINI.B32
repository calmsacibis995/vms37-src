MODULE BAS$RUN_INIT (				! Initialize for RUN
		IDENT = '1-010'			! File: BASRUNINI.B32 Edit: JBS1010
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  BASIC-PLUS-2 Miscellaneous
!
! ABSTRACT:
!
!	This module is used by the BASIC compiler's RUN command to
!	initialize the user environment.
!
! ENVIRONMENT:  VAX-11 User Mode
!
! AUTHOR: John Sauter, CREATION DATE: 04-JUN-1979
!
! MODIFIED BY:
!
! 1-001	- Original.
! 1-002	- Unstack all recursive I/O before closing files.
!	   JBS 07-JUN-1979
! 1-003	- Add call to BAS$$CTRLC_INIT.  JBS 22-JUN-1979
! 1-004	- Change BAS$$DET_INIT to BAS$$DET_STORE.  JBS 16-JUL-1979
! 1-005	- Change BAS$$DET_STORE to BAS$$STORE_DET.  JBS 25-JUL-1979
! 1-006	- Change OTS$$CLOSE_ALL to BAS$$CLOSE_ALL.  JBS 21-AUG-1979
! 1-007	- Call BAS$$CB_GET so this module need not be in the sharable
!	   library.  JBS 22-AUG-1979
! 1-008	- Call BAS$$STOP_INIT.  JBS 14-SEP-1979
! 1-009	- Do an RMS $WAIT on each RAB popped, in case we are at AST
!	   level.  JBS 27-SEP-1979
! 1-010	- Call BAS$$STORE_DET correctly.  JBS 12-DEC-1979
!--

!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!

REQUIRE 'RTLIN:OTSLNK';				! Define all OTS linkages

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    BAS$RUN_INIT : NOVALUE;			! Initialize environment

!
! INCLUDE FILES:
!

REQUIRE 'RTLML:OTSLUB';				! Logical unit block definitions

REQUIRE 'RTLIN:RTLPSECT';			! Macros for defining psects

LIBRARY 'RTLSTARLE';				! System symbols

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! PSECTS:
!
DECLARE_PSECTS (BAS);				! Declare psects for BAS$ facility
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    BAS$$STOP : NOVALUE,			! Signal fatal BASIC error
    BAS$$CB_POP : JSB_CB_POP NOVALUE,		! Done with register CCB
    BAS$$CB_GET : JSB_CB_GET NOVALUE,		! Fetch current CCB
!+
! Note: some of the following initialization entry points are marked weak
! so they will not be loaded if they are not needed.
!-
    BAS$$CTRLC_INIT : NOVALUE,			! Set up control C for RUN
    BAS$$STORE_DET : NOVALUE WEAK,		! Initialize DET
    BAS$$NUM_INIT : NOVALUE WEAK,		! Initialize NUM
    BAS$$NUM2_INIT : NOVALUE WEAK,		! Initialize NUM2
    BAS$$RAND_INIT : NOVALUE WEAK,		! Initialize random number
    BAS$$RECOU_INIT : NOVALUE WEAK,		! Initialize RECOUNT
    BAS$$STATU_INIT : NOVALUE WEAK,		! Initialize STATUS
    BAS$$ERR_INIT : NOVALUE WEAK,		! Initialize error flag
    BAS$$FIELD_INIT : NOVALUE WEAK,		! Initialize FIELD variables
    BAS$$STOP_INIT : NOVALUE WEAK,		! Initialize STOP statement
    BAS$$CLOSE_ALL : NOVALUE;			! Close all files

!+
! The following are the error codes used in this module.
!-

EXTERNAL LITERAL
    BAS$K_PROLOSSOR : UNSIGNED (8);		! Program lost, sorry


GLOBAL ROUTINE BAS$RUN_INIT : NOVALUE = 	! Initialize for RUN command

!++
! FUNCTIONAL DESCRIPTION:
!
!	Initialize the environment for the RUN command.  All of the OWN
!	storage must be set to its initial state, in case this is not
!	the first RUN command.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	A lot of OWN storage is initialized, by calling subroutines.
!	If any of the initialization routines are not present, an error
!	is signaled.  I/O system problems can also be signaled.
!
!--

    BEGIN

    GLOBAL REGISTER
	CCB = K_CCB_REG : REF BLOCK [, BYTE];

!+
! Undo all recursive I/O.  This will fail if there is any non-BASIC I/O
! in progress, but this routine is only supposed to be used in a BASIC-only
! environment.
!-

    WHILE (BAS$$CB_GET (); .CCB NEQA 0) DO
	BEGIN
!+
! Issue a $WAIT to be sure that RMS is not using the RAB.
!-
	$WAIT (RAB = .CCB);
	BAS$$CB_POP ();
	END;

!+
! Close all files.  The compiler guarantees not to need
! any files open when calling this routine.
!-
    BAS$$CLOSE_ALL ();
!+
! Now, call each initialization routine.
!-

    IF (BAS$$STORE_DET NEQA 0) THEN BAS$$STORE_DET (UPLIT (0, 0)) ELSE BAS$$STOP (BAS$K_PROLOSSOR);

    IF (BAS$$NUM_INIT NEQA 0) THEN BAS$$NUM_INIT () ELSE BAS$$STOP (BAS$K_PROLOSSOR);

    IF (BAS$$NUM2_INIT NEQA 0) THEN BAS$$NUM2_INIT () ELSE BAS$$STOP (BAS$K_PROLOSSOR);

    IF (BAS$$RAND_INIT NEQA 0) THEN BAS$$RAND_INIT () ELSE BAS$$STOP (BAS$K_PROLOSSOR);

    IF (BAS$$RECOU_INIT NEQA 0) THEN BAS$$RECOU_INIT () ELSE BAS$$STOP (BAS$K_PROLOSSOR);

    IF (BAS$$STATU_INIT NEQA 0) THEN BAS$$STATU_INIT () ELSE BAS$$STOP (BAS$K_PROLOSSOR);

    IF (BAS$$ERR_INIT NEQA 0) THEN BAS$$ERR_INIT () ELSE BAS$$STOP (BAS$K_PROLOSSOR);

    IF (BAS$$FIELD_INIT NEQA 0) THEN BAS$$FIELD_INIT () ELSE BAS$$STOP (BAS$K_PROLOSSOR);

    IF (BAS$$STOP_INIT NEQA 0) THEN BAS$$STOP_INIT () ELSE BAS$$STOP (BAS$K_PROLOSSOR);

!+
! Initialize control C handling for the RUN environment.
!-
    BAS$$CTRLC_INIT ();
    END;					! of routine BAS$RUN_INIT

END						! of module BAS$RUN_INIT

ELUDOM
