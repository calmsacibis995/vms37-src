	.TITLE	MTH$GLOG 	; Floating Point Natural and Common
				; Logarithm Functions (GLOG,GLOG10)
	.IDENT /2-005/		; File: MTHGLOG.MAR	PDG2005
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;
; FACILITY: MATH LIBRARY
;++
; ABSTRACT:
;
; MTH$GLOG  and  MTH$GLOG10  are functions which return the G floating natural
; or common logarithm of their G floating point argument. The call is standard
; call-by-reference.  MTH$GLOG_R8 and MTH$GLOG10_R8 are special routines which
; are the same as MTH$GLOG and  MTH$GLOG10  except  a  faster non-standard JSB 
; call is used with the argument in R0 and no registers are saved.
;
;--
;
; VERSION: 1
;
; HISTORY:
; AUTHOR:
;	Steven B. Lionel, 18-Jan-1979
;
; MODIFIED BY:
;
;
; VERSION: 2
;
; HISTORY:
; AUTHOR:
;	Bob Hanek, 18-Jun-1981
;
;

	.SBTTL	HISTORY	; Detailed Current Edit History


; ALGORITHMIC DIFFERENCE FROM FP-11C ROUTINE:
; \\ D used in comparison, FP-11C has no G \\
;	1. Uses POLYD so greater accuracy.
;
; Edit History for Version 1 of MTH$GLOG 
;
; 1-001 - Adapted from MTH$DLOG version 1-010.  SBL 18-Jan-79
;
;
; Edit History for Version 2 of MTH$GLOG 
;
; 2-001 - Added MTH$GLOG2.  RNH 08-Aug-1981
; 2-002 - Correct entry logic in JSB entry points.  Use G^ addressing for
;	  externals.  SBL 24-Aug-1981
; 2-003 - Changed MTH$$AB_ALOG to MTH$$AB_ALOG_V  RNH 29-Sep-81
; 2-004 - Eliminated symbolic short literals.  RNH 15-Oct-81
; 2-005	- Changed G_FHI to the global symbol MTH$$AB_G_FHI.  PDG 3-Nov-81

	.SBTTL	DECLARATIONS	; Declarative Part of Module

;
; INCLUDE FILES:	MTHJACKET.MAR
;
; EXTERNAL SYMBOLS:
	.DSABL	GBL
	.EXTRN	MTH$K_LOGZERNEG		; Error code
	.EXTRN	MTH$$SIGNAL		; Math signal routine
	.EXTRN	MTH$$AB_ALOG_V		; Table of byte offsets

; EQUATED SYMBOLS:

	ACMASK = ^M<IV, R2, R3, R4, R5, R6, R7, R8>
					; register save mask and IV enable

;
; MACROS:	none
;
; PSECT DECLARATIONS:

	.PSECT	_MTH$CODE	PIC,SHR,LONG,EXE,NOWRT
					; program section for math routines
;
; OWN STORAGE:	none
;
; CONSTANTS:

;
;
;   The G_FHI table is accessed by an index obtained from the MTH$$AB_ALOG_V
;   table.  The MTH$$AB_ALOG_V table is  located  in  MTHALOG.MAR.   Indices 
;   between  0  and  13  inclusive  are  used  to access entries 0 through 13 
;   respectively.   For  these  indecies,  the  first  three  items  of  the 
;   corresponding entry are  FHI,  LN_FHI_LO  and  LN_FHI_HI .  The last two 
;   items  for  these  entries  are  not  used.  Indices  between  14 and 27 
;   inclusive access entries 13 through 0 respectively.  For  these indecies,
;   the last three items in the corresponding entry are LN_FHI_HI, LN_FHI_LO 
;   and FHI.  The first two items for these entries are not used.
;

MTH$$AB_G_FHI::
; Entry  0
	.QUAD	^X00000000A9F2401D	; .18539905548095703E+01
	.QUAD	^XCF83A5D1989D3E73	; .18250342005397692E-07
	.QUAD	^X00008F13C1404003	; .61734035438712453E+00
	.QUAD	^X70214E3094D23E73	; .18236538401006972E-07
	.QUAD	^X0000C00042934001	; .53937709331512451E+00
; Entry  1
	.QUAD	^X00006000E3A84019	; .16180804967880249E+01
	.QUAD	^X47A62B6FFA08BE81	;-.33484189136366529E-07
	.QUAD	^X0000616ECCA53FFE	; .48124060167901916E+00
	.QUAD	^X0174A8C5FB8CBE81	;-.33495230674590973E-07
	.QUAD	^X0000E000C6C94003	; .61801618337631226E+00
; Entry  2
	.QUAD	^X000080004D1A4017	; .14563241004943848E+01
	.QUAD	^X34C26ADEC1B23E60	; .78029132840604787E-08
	.QUAD	^X0000F1580EFF3FF8	; .37591551369405352E+00
	.QUAD	^XB9B690B9D4813E60	; .78371269675439607E-08
	.QUAD	^X00002000F91F4005	; .68666034936904907E+00
; Entry  3
	.QUAD	^X0000A00075A34015	; .13412204980850220E+01
	.QUAD	^X81C3B00652B4BE4C	;-.32972392595796534E-08
	.QUAD	^X0000DC82CA033FF2	; .29358002218214097E+00
	.QUAD	^X69CA531D6247BE4C	;-.33043209496020872E-08
	.QUAD	^X0000A000DBDE4007	; .74558955430984497E+00
; Entry  4
	.QUAD	^X0000400023B44014	; .12587168216705322E+01
	.QUAD	^X59ADA334CFCA3E5E	; .71739046259635306E-08
	.QUAD	^X00004C2D73AE3FED	; .23009279937286919E+00
	.QUAD	^XB88B5562C8593E5E	; .71671356264517206E-08
	.QUAD	^X000020006C374009	; .79445987939834595E+00
; Entry  5
	.QUAD	^X00004000317A4013	; .11995794773101807E+01
	.QUAD	^X8CE2216E5F503E73	; .18041875628584791E-07
	.QUAD	^X0000BC974AD33FE7	; .18197104176033463E+00
	.QUAD	^XF600D2D65FA23E73	; .18043050766785649E-07
	.QUAD	^X00006000AD0F400A	; .83362549543380737E+00
; Entry  6
	.QUAD	^X0000C0007FF44012	; .11562392711639404E+01
	.QUAD	^X54D6FF1B54DF3E7A	; .24523160341669750E-07
	.QUAD	^X0000ECE295043FE2	; .14517270628493861E+00
	.QUAD	^XB698EB39550F3E7A	; .24523841359061072E-07
	.QUAD	^X00000000AD0A400B	; .86487293243408203E+00
; Entry  7
	.QUAD	^X00008000F8314011	; .11230940818786621E+01
	.QUAD	^X7DC6AF4BD72E3E61	; .83076563210628923E-08
	.QUAD	^X0000137DB7E83FDD	; .11608744121349446E+00
	.QUAD	^XE41C4BBBD54D3E61	; .83042358471327300E-08
	.QUAD	^X0000A0007E22400C	; .89039736986160278E+00
; Entry  8
	.QUAD	^X000020008B674011	; .10965338945388794E+01
	.QUAD	^X181167D531D6BE76	;-.20670404489853049E-07
	.QUAD	^X000043D7976B3FD7	; .92154220640622952E-01
	.QUAD	^XFA16278D2F4DBE76	;-.20661178077008139E-07
	.QUAD	^X000020002ED0400D	; .91196447610855103E+00
; Entry  9
	.QUAD	^X0000400036564011	; .10757658481597900E+01
	.QUAD	^XEBD925C66CAA3E81	; .32455606843954793E-07
	.QUAD	^X0000EEC2B2463FD2	; .73032792368394439E-01
	.QUAD	^XCF5A47406B433E81	; .32445407166866051E-07
	.QUAD	^X00006000BF0A400D	; .92957037687301636E+00
; Entry 10
	.QUAD	^X0000E000F69B4010	; .10602072477340698E+01
	.QUAD	^X04DF36B735D33E77	; .21616233620564866E-07
	.QUAD	^X0000339DEF0B3FCD	; .58464384127091762E-01
	.QUAD	^XFC0C387236323E77	; .21617583748032489E-07
	.QUAD	^X0000A0002ECA400E	; .94321185350418091E+00
; Entry 11
	.QUAD	^X00008000CA844010	; .10494427680969238E+01
	.QUAD	^XBD3E1C715686BE82	;-.34157156707991671E-07
	.QUAD	^X00006D58B5733FC8	; .48259360406518681E-01
	.QUAD	^X4870F8925619BE82	;-.34154083180683893E-07
	.QUAD	^X000000007E0C400E	; .95288658142089844E+00
; Entry 12
	.QUAD	^X00002000A7094010	; .10407801866531372E+01
	.QUAD	^X35CB68480BB93E65	; .98002133153715869E-08
	.QUAD	^X0000D53477063FC4	; .39970601583263488E-01
	.QUAD	^X9A9B90CD071C3E65	; .97918229303478694E-08
	.QUAD	^X0000C000BF04400E	; .96081769466400146E+00
; Entry 13
	.QUAD	^X000020008DDD4010	; .10346347093582153E+01
	.QUAD	^XEBA761A0A9EC3E68	; .11484959695179258E-07
	.QUAD	^X00003AD16ECB3FC1	; .34048415117013064E-01
	.QUAD	^X450394DFA64D3E68	; .11478374386313017E-07
	.QUAD	^X00004000EDC5400E	; .96652472019195557E+00

;
;  Polynomial constants tables
;


LOGTAB1:				; Constants for q(z).  Generated using
					; eq. 6.3.10 of Hart et. al. (sin(2a) 
					; = 1/32)
	.QUAD	^XA8981E5781CD3FDC	; C8 =   0.11135560980588577
	.QUAD	^X38EFC0D00802BFE0	; C7 =  -0.12524446882930060
	.QUAD	^XC976914849223FE2	; C6 =   0.14285690397225509
	.QUAD	^XBBAC94875553BFE5	; C5 =  -0.16666645767642529
	.QUAD	^XB92699D199993FE9	; C4 =   0.20000000010208757
	.QUAD	^X0A5400140000BFF0	; C3 =  -0.25000000007290635
	.QUAD	^X5415555555553FF5	; C2 =   0.33333333333331555
	.QUAD	^XFF60FFFFFFFFBFFF	; C1 =  -0.49999999999999112
	.QUAD	^X0000000000000000	; C0 =   0.00000000000000000
LOGLEN1 = .-LOGTAB1/8			; no. of floating point entries


LOGTAB2:				; Constants for p(z*z). Generated using
					; eq. 6.3.11 of Hart et. al. (sin(2a) =
					; (b - 1)/(b + 1) where b = 2**(1/7))
	.QUAD	^XB117401D6E163FE7	; C5 =  0.183047086054451497
	.QUAD	^X0BA587C071A73FEC	; C4 =  0.222218457493082472
	.QUAD	^XC30B983949243FF2	; C3 =  0.285714291246265517
	.QUAD	^X839E999899993FF9	; C2 =  0.399999999996049627
	.QUAD	^X5560555555554005	; C1 =  0.666666666666667851
	.QUAD	^X0000000000004020	; C0 =  2.000000000000000000
LOGLEN2 = .-LOGTAB2/8

;+  The "16" in the constants is used to shift the unbiased exponent
;   right 4 places so that the rightmost bit is at bit 0.  
;-

G_LN_2_HI:
	.QUAD	^X2800FEF62E423FC6	; (Hi 42 bits of ln2)/16
G_LN_2_LO:
	.QUAD	^XF1DAD5E447BC3DA0	; (Low bits of ln2)/16
G_GLOG10_E:				; LOG10(e)
	.WORD	^O037773,^O145573
	.WORD	^O012446,^O162416
G_INV_LN2_CONS:
	.QUAD	^X82FE652B15474017


	.SBTTL	MTH$GLOG  - Standard G-Floating LOG


;++
; FUNCTIONAL DESCRIPTION:
;
; GLOG  - single precision floating point function
;
; GLOG(X) is computed using the following approximation technique:
;
;	If X =< 0, error.  Otherwise
;
;	Let X = f * (2**n), where 1/2 <= f < 1
;
;       If n is greater than or equal to 1 than
;             set N = n - 1 and F = 2*f.  
;          Else
;             set N = n and F = f.  
;
;       Then  ln(x) = N*ln2 + ln(F)           
;
;       If |F - 1| < 2**-5 then
;             ln(F) =  W + W*P(W), where W = F - 1 and P 
;             is a polynomial of degree 8.
;          Else
;             ln(F) = ln(FHI) + Z*Q(Z*Z), where FHI is ob-
;             tained by table look-up, Q is a polynomial of
;             degree 5 and Z = (F - FHI)/(F + FHI)
;
;       NOTE: The quantities ln(FHI) and ln2 are used in the above
;             equations in two parts - a high part (containing the
;             high order bits) and a low part (containing the low
;             order bits.  In the code the high and low parts of the
;             constants are indicated by a _HI and _LO suffix respec-
;             tively.  The values were chosen such that N*LN_2_HI +
;             LN_FHI_HI is exactly representable.
;
; CALLING SEQUENCE:
;
;	logarithm.wg.v = MTH$GLOG(x.rg.r)
;
; INPUT PARAMETERS:

	LONG = 4			; define longword multiplier
	x = 1 * LONG			; Contents of x is the argument

; IMPLICIT INPUTS:	none
;
; OUTPUT PARAMETERS:
;
;	VALUE:	G floating logarithm of the argument
;
; IMPLICIT OUTPUTS:	none
;
; COMPLETION CODES:	none
;
; SIDE EFFECTS:
;
; Signals: MTH$_LOGZERNEG if |X| =< 0.0 with reserved operand in R0/R1
; (copied to the signal mechanism vector CHF$L_MCH_R0/R1 by LIB$SIGNAL).
; Associated message is: "LOGARITHM OF ZERO OR NEGATIVE VALUE". Result is 
; reserved operand -0.0 unless a user supplied (or any) error handler changes 
; CHF$L_MCH_R0/R1.
;
; NOTE: This procedure disables floating point underflow, enables integer
; overflow, causes no floating overflow or other arithmetic traps, and
; preserves enables across the call.
;
;---


	.ENTRY	MTH$GLOG, ACMASK	; standard call-by-reference entry
					; disable DV (and FU), enable IV
	MTH$FLAG_JACKET			; flag that this is a jacket procedure
					; in case of an error in special JSB 
					; routine
	MOVG	@x(AP), R0		; R0/R1 = arg 
	BSBB	MTH$GLOG_R8 		; call special GLOG routine
	RET				; return - result in R0/R1


	.SBTTL	MTH$GLOG10  - Standard G Floating Common logarithm

;++
; FUNCTIONAL DESCRIPTION:
;
; GLOG10  - G floating point function
;
; GLOG10(X) is computed as GLOG10(E) * GLOG(X).
;
; See description of MTH$GLOG 
;
; CALLING SEQUENCE:
;
;	logarithm_base_10.wg.v = MTH$GLOG10(x.rg.r)
;
; INPUT PARAMETERS:

	LONG = 4			; define longword multiplier
	x = 1 * LONG			; Contents of x is the argument 

;
; SIDE EFFECTS:	See description of MTH$GLOG
;
;--


	.ENTRY	MTH$GLOG10, ACMASK	; standard call-by-reference entry
					; disable DV (and FU), enable IV
	MTH$FLAG_JACKET			; flag that this is a jacket procedure 
					; in case of an error in special JSB 
					; routine
	MOVG	@x(AP), R0		; R0/R1 = arg 
	BSBB	MTH$GLOG10_R8 		; call special GLOG10 routine
	RET				; return - result in R0/R1



	.SBTTL	MTH$GLOG2  - Standard G Floating Common logarithm

;++
; FUNCTIONAL DESCRIPTION:
;
; GLOG2  - G floating point function
;
; GLOG2(X) is computed as GLOG2(E) * GLOG(X).
;
; See description of MTH$GLOG 
;
; CALLING SEQUENCE:
;
;	logarithm_base_2.wg.v = MTH$GLOG2(x.rg.r)
;
; INPUT PARAMETERS:

	LONG = 4			; define longword multiplier
	x = 1 * LONG			; Contents of x is the argument 

;
; SIDE EFFECTS:	See description of MTH$GLOG
;
;--


	.ENTRY	MTH$GLOG2, ACMASK	; standard call-by-reference entry
					; disable DV (and FU), enable IV
	MTH$FLAG_JACKET			; flag that this is a jacket procedure 
					; in case of an error in special JSB 
					; routine
	MOVG	@x(AP), R0		; R0/R1 = arg 
	BSBB	MTH$GLOG_R8		; jump to natural log
	MULG2	G_INV_LN2_CONS, R0	; convert to log base 2
	RET				; return - result in R0/R1



	.SBTTL	MTH$GLOGGLOG10_R8  - Special GLOG/GLOG10 routines

; Special GLOG/GLOG10 - used by the standard routine, and directly.
;
; CALLING SEQUENCE:
;	save anything needed in R0:R9
;	MOVG	..., R0			; input in R0/R1
;	JSB	MTH$GLOG10_R8 /MTH$GLOG_R8 
;	return with result in R0/R1
; Note: This routine is written to avoid causing any integer overflows, 
; floating overflows, or floating underflows or divide by 0 conditions, 
; whether enabled or not.
;
; REGISTERS USED:
;	R0/R1 - G floating argument then result
;	R2/R3 - scratch
;	R0:R5 - POLYG
;	R6/R7 - W during POLYG
;	R8 - Pointer into G_FHI table



MTH$GLOG10_R8::				; special GLOG10 routine
	BICW3	#^XF, R0, R8		; R8 = Biased exponent
	BLEQ	ERR			; GLOG(X) is not defined for X=<0
					; user PC on top of stack
					; Note: ERROR routine depends on user
					; PC being on top of stack, so 
					; subroutine call to MTH$DLOG_R8 is not
					; used.
	BSBB	GLOG_COMMON_R8 		; call common GLOG/GLOG10 routine
	MULG2	G_GLOG10_E, R0		; R0/R1 = GLOG10(e) * GLOG(X)
	RSB				; return

ERR:	BRW	ERROR

MTH$GLOG_R8::				; special LOG routine
	BICW3	#^XF, R0, R8		; R8 = Biased exponent
	BLEQ	ERR			; GLOG(X) is not defined for X=<0
GLOG_COMMON_R8:
	SUBW	#^X4000, R8		; R8 = Unbiased exponent
	BLEQ	NEG_EXP			; Branch to processing for n=<0

;
; Exponent is positive.  N = n - 1 and F = 2f
;

	SUBW	#^X10, R8		; R8 = N = n - 1
	SUBW	R8, R0			; R0/R1 = F = 2f
	ROTL	#3, R0, R3		; R3 = index into MTH$$AB_ALOG_V table
	BICL	#-256, R3		;    = lo exp bit and 1st 7 fract bits
	MOVAL	G^MTH$$AB_ALOG_V, R2	; R2 = Address of RTL vector entry
	ADDL	(R2), R2		; R2 = Address of MTH$AB_ALOG table
	MOVB	(R2)[R3], R3		; R3 = offset into G_FHI tables	
	BLSS	LN_1_PLUS		; Branch to special processing 
					;   for F close to 1

;
; Compute Z, Z**2, P(Z**2) and Z*P(Z**2)
;

	CVTWG	R8, -(SP)		; Push N onto the stack
	MOVAQ	MTH$$AB_G_FHI[R3], R8	; R8 = Address of FHI
	MOVQ	(R8)+, R4		; R4/R5 = FHI
	SUBG3	R4, R0, R6		; R6/R7 = F - FHI
	ADDG2	R4, R0			; R0/R1 = F + FHI
	DIVG2	R0, R6			; R6/R7 = Z = (F - FHI)/(F + FHI)
	MULG3	R6, R6, R0		; R0/R1 = Z**2
	POLYG	R0, #LOGLEN2-1, LOGTAB2	; R0/R1 = P(Z**2)
	MULG2	R6, R0			; R0/R1 = Z*P(Z**2)

;
; Compute B = N*LN_2_LO + LN_FHI_LO + Z*P(Z*Z)
;
	MULG3	(SP), G_LN_2_LO, R2	; R2/R3 = N*LN_2_LO
	ADDG2	(R8)+, R2		; R2/R3 = N*LN_2_LO + LN_FHI_LO
	ADDG2	R2, R0			; R0/R1 = B

;
; Compute A = N*LN_2_HI + LN_FHI_HI and GLOG(X)
;
	MULG3	(SP)+, G_LN_2_HI, R2	; R2/R3 = N*LN_2_HI
	ADDG2	(R8), R2		; R2/R3 = A = N*LN_2_HI + LN_FHI_HI
	ADDG2	R2, R0			; R0/R1 = A + B = GLOG(X)
	RSB


LN_1_PLUS:
        BRB	LN_1_PLUS_W		


;
; Exponent is negative.  N = n and F = f
;

NEG_EXP:SUBW	R8, R0			; R0/R1 = F = f
	ROTL	#3, R0, R3		; R3 = index into MTH$$AB_ALOG table
	BICL	#-256, R3		;    = lo exp bit and 1st 7 fract bits
	MOVAL	G^MTH$$AB_ALOG_V, R2	; R2 = Address of RTL vector entry
	ADDL	(R2), R2		; R2 = Address of MTH$AB_ALOG table
	MOVB	(R2)[R3], R3		; R3 = offset into G_FHI tables	
	BLSS	LN_1_PLUS_W		; Branch to special processing 
					;   for F close to 1

;
; Compute Z, Z**2, P(Z**2) and Z*P(Z**2)
;

	CVTWG	R8, -(SP)		; Push N onto the stack
	MOVAQ	MTH$$AB_G_FHI[R3], R8	; R8 = Address of FHI
	MOVQ	(R8), R4		; R4/R5 = FHI
	SUBG3	R4, R0, R6		; R6/R7 = F - FHI
	ADDG2	R4, R0			; R0/R1 = F + FHI
	DIVG2	R0, R6			; R6/R7 = Z = (F - FHI)/(F + FHI)
	MULG3	R6, R6, R0		; R0/R1 = Z**2
	POLYG	R0, #LOGLEN2-1, LOGTAB2	; R0/R1 = P(Z**2)
	MULG2	R6, R0			; R0/R1 = Z*P(Z**2)

;
; Compute B = N*LN_2_LO + LN_FHI_LO + Z*P(Z*Z)
;
	MULG3	(SP), G_LN_2_LO, R2	; R2/R3 = N*LN_2_LO
	ADDG2	-(R8), R2		; R2/R3 = N*LN_2_LO + LN_FHI_LO
	ADDG2	R2, R0			; R0/R1 = B

;
; Compute A = N*LN_2_HI + LN_FHI_HI and GLOG(X)
;
	MULG3	(SP)+, G_LN_2_HI, R2	; R2/R3 = N*LN_2_HI
	SUBG2	-(R8), R2		; R2/R3 = A = N*LN_2_HI + LN_FHI_HI
	ADDG2	R2, R0			; R0/R1 = A + B = GLOG(X)
	RSB

;
; Special logic for F close to 1 
;

LN_1_PLUS_W:
	SUBG3	#1, R0, R6		; R6/R7 = W = F - 1
	POLYG	R6, #LOGLEN1-1,LOGTAB1	; R0/R1 = Q(W)
	MULG2	R6, R0			; R0/R1 = W*Q(W)
	CVTWG	R8, R4			; R4/R5 = N
	MULG3	R4, G_LN_2_LO, R2	; R2/R3 = N*LN_2_LO
	ADDG2	R2, R0			; R0/R1 = N*LN_2_LO + W*Q(W)
	ADDG2	R6, R0			; R0/R1 = N*LN_2_LO + LN(F)
	MULG2	G_LN_2_HI, R4		; R4/R5 = N*LN_2_HI
	ADDG2	R4, R0			; R0/R1 = GLOG(X)
	RSB

;
; X =< 0.0, signal error
;
ERROR:	PUSHL	(SP)			; return PC from JSB routine
	MOVZBL	#MTH$K_LOGZERNEG, -(SP)	; condition value
	ASHQ	#15, #1, R0		; R0 = result = reserved operand -0.0
					; goes to signal mechanism vector
					; (CHF$L_MCH_R0/R1) so error handler
					; can modify the result.
	CALLS	#2, G^MTH$$SIGNAL	; signal error and use real user's PC
					; independent of CALL vs JSB
	RSB				; return - R0 restored from 
					; CHF$L_MCH_R0/R1



	.END
