2 COB
 VAX-11 COBOL Error Messages

! COBOL Runtime error message HELP file		Edit: LEB1010
!
! Revision History
! ----------------
! 1-001 Orignal. RKR 12-DEC-1979
! 1-002 Reallign text.  RKR 14-DEC-1979
! 1-003 Remove FAO descriptors from text.  SBL 19-Dec-1979
! 1-004 Removed blank lines at beginning of file. RKR 31-DEC-1979
! 1-005 Change text for SUBOVELON and ORGNOTMAT. RKR 08-JAN-1980
! 1-006 Correct misspellings.  SBL 25-Sept-1980
! 1-007 Added the errors LSTHNDUSE,LSTHNDLDB,EXPDBOVER,KEYNOTMAT
!	and UNLUNOFIL for V3A.  LEB 20-AUG-1981
! 1-008 Added the errors RECNOTLOC and UNLNO_CUR for V3A.  LEB 1-DEC-1981
! 1-009 Updated text for UNLNO_CUR and deleted RECNOTLOC.  LEB 1-DEC-1981
! 1-010 Cleaned up the complete text file.  LEB 18-JAN-1982
!
3 CALFAI
 CALL failed on routine

 Explanation:  Failure to CALL the specified routine.   This
 may be due to one of several possible conditions:

     a.  The routine name  is  too  long  (greater  than  31
         characters).

     b.  The routine name is too  short  (for  example,  all
         blanks)

     c.  The routine name contains invalid characters.

     d.  The named routine is not in the linked image.

 User Action:   Either code the routine name  to  conform  to
 the  syntax  rules  for  proper  routine  name  formation or
 relink the image to include the missing  routine.

3 CANFAIL
 CANCEL failed on routine

 Explanation:  Failure  to  CANCEL  the  specified  routine.
 This may be due to a number of problems including:

     a.  The routine name  is  too  long  (greater  than  31
         characters).

     b.  The routine name is too  short  (for  example,  all
         blanks)

     c.  The routine name contains invalid characters.

     d.  The named routine is not in the linked image.

 User Action:   Either code the routine name  to  conform  to
 the  syntax  rules  for  proper  routine  name  formation or
 relink the image to include the missing  routine.

3 DELINCOPE
 DELETE on file incompatible with OPEN mode

 Explanation:  The DELETE operation is not  compatible  with
 the  open  mode  of the file.  The file status variable, if
 present, has been set to 94.  No applicable  USE  procedure
 was found.

 User Action:   Examine the mode in which  the file is opened
 (prior to the attempted DELETE  operation) and make the open
 mode consistent with the  DELETE operation.

3 DELNO_R_S
 attempting DELETE on file without previous READ or  START

 Explanation:  Attempting to perform a DELETE on  this  file
 without   having  previously  performed  a  READ  or  START
 operation.  The file status variable, if present, has  been
 set to 93.  No applicable USE procedure was found.

 User Action:   Your program must execute a  READ  or   START
 operation  (in  sequential  access mode) immediately  before
 executing the DELETE operation.  This must occur  for   each
 execution of the DELETE operation.

3 DELUNOFIL
 attempting DELETE on unopened file

 Explanation:  Attempting to perform  a  DELETE  before  the
 file  is opened.  The file status variable, if present, has
 been set to 94.  No applicable USE procedure was found.

 User Action:  Your  program  must  execute  an  appropriate
 OPEN  operation  before  attempting  to  perform  a  DELETE
 operation on the file.

3 EOFON_ACC
 end-of-file detected on ACCEPT from file

 Explanation:  An  end-of-file  condition  was  detected  in
 executing an ACCEPT statement.

 User  Action:  You  typed  a  CNTRL/Z,  which   caused   an
 end-of-file  condition  for  an  ACCEPT  statement.  If you
 wish to use CNTRL/Z as an end-of-file indicator, you should
 code the input operations using an ACCEPT AT END statement.

3 ERRDURACC
 error during ACCEPT from file

 Explanation:   An error condition was  detected  by  RMS  in
 executing   the  ACCEPT  operation.   The  subsequent  error
 message is the RMS error code associated with this error.

 User Action:   You typed an illegal character (such as BREAK
 key).   If  you  wish to trap such illegal input characters,
 code the input operation using a COBOL  READ  statement  and
 declare an appropriate USE procedure to handle the error.

3 ERRDURDIS
 error during DISPLAY on file

 Explanation:   An error condition was  detected  by  RMS  in
 executing  the  DISPLAY  operation.   The  subsequent  error
 message is the RMS error code associated with this error.

 User Action:   Examine the logical  name  assignment  and/or
 the  type  of  device  to  which  the  DISPLAY  statement is
 attempting to write output information.

3 ERRDURSOR
 error during SORT or MERGE

 Explanation:   An error has occurred during a SORT or  MERGE
 operation.   The  subsequent error message is the associated
 SORT or MERGE error code.

 User Action:   Examine the logic of the program to determine
 why  an  error  is  occurring  during  a  SORT or MERGE.  In
 particular, if the program contains input procedures for the
 SORT  or  MERGE  operation, ensure that at least one RELEASE
 operation is executed in the input procedure.  Failure to do
 so can cause this error condition.

3 ERRON_FIL
 error on file

 Explanation:   An error status has been returned by RMS that
 is  not  recognized  by  the VAX-11 COBOL I/O error handler.
 The subsequent error message is  the  associated  RMS  error
 code.  The file status variable, if present, has been set to
 30 (except for a CLOSE operation -- file status =  98).   No
 applicable USE procedure has been found.

 User Action:   Examine the subsequent error  message  issued
 by  RMS  and  respond accordingly, or code an applicable USE
 procedure to handle the I/O error.

3 EXPDBOVER
 expression  value  in  database  argument  list   overflows
 longword

 Explanation:   The value of an offset or  relative  position
 integer expression in a database record selection expression
 cannot be contained in a longword.

 User Action:   Determine why the  value  is  too  large  and
 correct  the program to use a value that is representable in
 a longword.

3 FAIGET_EF
 failure to get event flag

 Explanation:   An   internal   operation   associated   with
 execution  of  the  CANCEL  operation requires an event flag
 number.  The attempt to allocate the event flag  number  has
 failed.

 User  Action:   The  process  associated  with  your   COBOL
 program   has  allocated  a  number  of  event  flags.   The
 execution of the CANCEL operation  has  requested  one  more
 event  flag  than  is  available to the process.  Deallocate
 some  event  flag  before  executing   the   COBOL   program
 containing the CANCEL operation.

3 FAIGET_VM
 failure to get virtual memory

 Explanation:   An internal  operation  associated  with  the
 execution  of  an  ACCEPT  or DISPLAY statement requires the
 allocation  of  dynamic  virtual  memory.   The  attempt  to
 allocate this space has failed.

 User Action:   The executable  image  containing  the  COBOL
 ACCEPT  or  DISPLAY  operation  is using a large quantity of
 virtual memory.  The execution  of  the  ACCEPT  or  DISPLAY
 statement   has   requested  more  dynamic  memory  than  is
 available to the executable image.  Your  program  must  use
 less virtual memory if the COBOL ACCEPT or DISPLAY operation
 is to work successfully.

3 FATINTERR
 fatal internal error

 Explanation:   An internal  consistency  check  has  failed.
 This  represents  an  internal error in the Run-Time Library
 and should be reported to Digital Equipment  Corporation  by
 software performance report.

 User Action:   Either discuss this  error  with  your  local
 software support specialist or submit a software performance
 report with supporting documentation, including  the  system
 traceback listing.

3 FILALRCLO
 file already closed

 Explanation:   Attempting to CLOSE a file  that  is  already
 closed.   The file status variable, if present, has been set
 to 94.  No applicable USE procedure has been found.

 User  Action:   Examine  the  logic  of  your  program   and
 eliminate the redundant CLOSE operation.  Alternatively, you
 may discover the inadvertent omission of performing an  OPEN
 on this file.

3 FILALRLOC
 file is already locked

 Explanation:   In the file sharing  environment,  attempting
 to  open  a  file  for  which  another process has exclusive
 access.  The file status variable, if present, has been  set
 to 91.  No applicable USE procedure has been found.

 User Action:   Declare an applicable USE procedure for  this
 file to handle this I/O condition.

3 FILALROPE
 file is already open

 Explanation:   Attempting to open a  file  that  is  already
 open.  The file status variable, if present, has been set to
 94.  No applicable USE procedure has been found.

 User  Action:   Examine  the  logic  of  the   program   and
 eliminate  the redundant OPEN operation.  Alternatively, you
 may declare an  applicable  USE  procedure  to  handle  this
 error.

3 FILCLOLOC
 file is closed with LOCK

 Explanation:   Attempting to open a  file  that  is  already
 closed with LOCK.  The file status variable, if present, has
 been set to 94.  No applicable USE procedure has been found.

 User  Action:   Examine  the  logic  of  the   program   and
 eliminate   the   attempted  OPEN  operation  on  the  file.
 Alternatively, you may declare an applicable  USE  procedure
 to handle the error.

3 FILNOTFOU
 file not found on OPEN

 Explanation:   The named  file  was  not  found  during  the
 execution  of the OPEN statement.  The file status variable,
 if present, has been set to 97.  No applicable USE procedure
 has been found.

 User Action:   Examine the referenced directory to check for
 the  existence  of the named file.  Another common source of
 this error is a mistake in spelling the  file  specification
 for the file.

3 GOTO_ALT
 GO TO with no preceding ALTER

 Explanation:   Attempting to perform a GO  TO  that  has  no
 preceding ALTER.

 User Action:   Examine the logic of the  program  to  ensure
 that  the  execution  of  an  ALTER  statement  precedes the
 execution of the referenced GO TO statement.

3 INTDIVZER
 intermediate divide by zero

 Explanation:   Attempting to divide  by  COBOL  Intermediate
 Temporary that has a value of zero.

 User Action:   Examine the referenced expression in which  a
 division  operation occurs and determine why the divisor has
 a zero value.

3 INTEXPOVE
 intermediate exponent overflow

 Explanation:   A COBOL  Intermediate  Temporary  is  created
 that has an exponent that is greater than +99.

 User Action:   Examine the referenced  line  of  the  source
 program  containing  an  arithmetic  operation and determine
 what is causing a COBOL Intermediate Temporary to be created
 with too large an exponent.

3 INTEXPUND
 intermediate exponent underflow

 Explanation:   A COBOL  Intermediate  Temporary  is  created
 that has an exponent less than -99.

 User Action:   Examine the referenced  line  of  the  source
 program  containing  an  arithmetic  operation and determine
 what is causing a COBOL Intermediate Temporary to be created
 with too small an exponent.

3 INTRESOPE
 intermediate reserved operand

 Explanation:   Encountering  a  reference  to  a  previously
 created  COBOL  Intermediate  Temporary  whose  exponent  is
 greater than +99 or less than -99.

 User Action:   Examine the referenced  line  of  the  source
 program  containing  an  arithmetic  operation and determine
 what is causing a COBOL Intermediate Temporary to be created
 with  too  large  or  too  small an exponent in a previously
 executed statement.

3 INVARG
 invalid argument

 Explanation:   Internal consistency checking has detected an
 invalid  argument  being  passed  to  a routine in the COBOL
 Run-Time Library.  This represents  an  internal  error  and
 should be reported to Digital Equipment Corporation.

 User Action:   Submit a software performance report with the
 appropriate  supporting  documentation, including the system
 traceback listing.

3 INVDECDAT
 invalid decimal data

 Explanation:   Invalid decimal data has been encountered  in
 the  course of converting a numeric DISPLAY data item into a
 packed number.  One or more of the  following  problems  may
 exist:

     a.  The length of the source string is outside  of  the
         range 0 through 31.

     b.  The length of the destination packed decimal string
         is outside of the range 0 through 31.

     c.  The source string contains  an  invalid  byte.   An
         invalid byte is:

         -   Any character other than ASCII "0" through  "9"
             in a digit byte or an ASCII "+" or a space or a
             hyphen in the sign byte of a  leading  separate
             numeric data item.

         -   Any character other than ASCII "0" through  "9"
             in  any  high-order  byte  (that  is,  any byte
             except  the  least  significant  byte)   in   a
             trailing numeric data item.

     d.  In  the  case  of  trailing  numeric   input,   the
         translation of the least significant digit produces
         an invalid decimal digit or sign nibble.


 User  Action:   This  error  usually   occurs   when   space
 characters  are used in lieu of insignificant, leading, zero
 digit  positions  for  numeric  fields.   These  fields  are
 commonly  found  within  records  on  a  file.  Examine such
 numeric fields on the file  and  replace  all  insignificant
 leading spaces in these fields with numeric zero characters.
 Alternatively, before referencing these fields in arithmetic
 operations,    use   the   INSPECT   statement   to   change
 insignificant space characters to  zeros  in  these  fields.
 Another  alternative  is the NUMERIC class test to determine
 if numeric data items contain numeric characters only.  This
 class  test  should  be  executed  before these numeric data
 items are referenced in arithmetic operations.

3 INVDECDIG
 invalid decimal digit

 Explanation:   An invalid decimal digit has been encountered
 in the course of converting a packed decimal number.

 User Action:   Examine the logic of the program to determine
 why  illegal  data  is  being  discovered  in converting the
 packed decimal number.

3 INVLINVAL
 invalid LINAGE value on file

 Explanation:   An invalid value has been encountered in  one
 of the data names associated with the LINAGE clause for this
 file.

 User  Action:   Examine  the  logic  of  the   program   and
 determine  why  a data name value associated with the LINAGE
 clause  does  not  fall  within  the  range  of  values   as
 prescribed in the COBOL rules for the LINAGE clause.

3 KEYNOTMAT
 attempting to open indexed file whose actual  keys  do  not
 match those declared

 Explanation:   An OPEN was  attempted  on  an  indexed  file
 whose  keys  (as  described  in the program) do not have the
 same data-type, size, and position within the record as when
 the  file  was  created.   The  file  status  data  item, if
 specified, has been set to 94.  No applicable USE  procedure
 has been found.

 User Action:   Run SYS$SYSTEM:DSP to  determine  the  actual
 keys  within the file and change the program to describe the
 keys correctly.

3 LSTHNDLDB
 lost handler for database exception - environment corrupted

 Explanation:  The default  COBOL  handler  COB$$HANDLER  was
 deleted,  or a new handler was established that did not call
 COB$$HANDLER when a  program  was  attempting  to  execute a
 GLOBAL USE procedure for a DB-EXCEPTION.

 User Action:   Do not establish a new handler or include  in
 the  new  handler  a  call to  COB$$HANDLER for unrecognized
 conditions.

3 LSTHNDUSE
 lost handler for a USE procedure - environment corrupted

 Explanation:   The default  COBOL  handler COB$$HANDLER  was
 deleted,  or a new handler was established that did not call
 COB$$HANDLER when a  program  was  attempting  to  execute a
 GLOBAL USE procedure for an I/O statement.

 User Action:   Do not establish a new handler or include  in
 the  new  handler  a  call to  COB$$HANDLER for unrecognized
 conditions.

3 NESERRPER
 nesting error for PERFORM

 Explanation:   A logic error has  been  encountered  in  the
 order in which the nesting of PERFORM ranges are exited.

 User Action:   PERFORM ranges  must  be  exited  in  reverse
 order   from  which  these  PERFORM  ranges  are  activated.
 Examine the logic of the PERFORM range nesting  to  discover
 why  these PERFORM ranges are not exited in reverse order of
 their activation.

3 NO_SPACE
 no file space on device for file

 Explanation:   During the course of an OPEN,  a  failure  to
 find  additional space  on  a  particular  device  has  been
 detected.  The file status variable, if  present,  has  been
 set to 95.  No applicable USE procedure has been found.

 User Action:   Most likely, you have  many  outdated  and/or
 transient  files  on the device.  Examine the directories on
 the  particular  device  and  free-up  sufficient  space  by
 purging  or deleting unused files, then resubmit the program
 for execution.

3 OCCDEPOVE
 OCCURS DEPENDING value overflows longword

 Explanation:   The value of the data name associated with an
 OCCURS DEPENDING phrase cannot be contained in a longword.

 User Action:   Examine the referenced  line  in  the  source
 program  containing  an  implicit reference to the data name
 associated OCCURS DEPENDING phrase  to  determine  why  this
 value has overflowed a longword value.

3 ORGNOTMAT
 attempting to open file whose actual organization does  not
 match that declared

 Explanation:   There is a mismatch between the  organization
 of  the file as declared in the program and the organization
 of the file as it was created.  This mismatch is encountered
 on  the  OPEN  operation.   The  file  status  variable,  if
 present, has been set to 94.  No  applicable  USE  procedure
 has been found.

 User  Action:   Examine   the   program   and   change   the
 declaration  of  the  file's  organization to match the file
 organization attributes (sequential, relative,  or  indexed)
 when the file was initially created.

3 REAINCOPE
 READ on file incompatible with OPEN mode

 Explanation:   The  file  was  opened  in  a  mode  that  is
 incompatible  with  a  READ operation (that is, an open mode
 for which  READ  operations  are  disallowed).   This  error
 usually  represents bad logic in the user program.  The file
 status variable,  if  present,  has  been  set  to  94.   No
 applicable USE procedure has been found.

 User Action:   Examine the logic of the program to determine
 why a READ operation that is incompatible with the open mode
 is being attempted.  Change the open mode to allow the  READ
 operation or eliminate the READ operation.

3 REASMAMIN
 attempting READ of variable  length  smaller  than  minimum
 allowed from file

 Explanation:   Attempting to READ a record that  is  smaller
 than  the  minimum length record declared in the program for
 this file.  The file status variable, if present,  has  been
 set to 94.  No applicable USE procedure has been found.

 User Action:   Examine the length of the record on the  file
 being  read  and  then  change  the  minimum  record  length
 declared in the program for this file to allow a  successful
 READ operation on the record.

3 REAUNOFIL
 attempting READ on unopened file

 Explanation:   Attempting a READ operation on a file that is
 not  open  at  this  time.   This error usually represents a
 logic error in the user program.  The file status  variable,
 if present, has been set to 94.  No applicable USE procedure
 has been found.

 User Action:   Examine the logic of the program to determine
 why  a  READ  operation  is  attempted  on an unopened file.
 Change the logic of the program by opening the  file  or  by
 eliminating the READ operation.

3 RECACTPER
 recursive activation of PERFORM

 Explanation:   Attempting to PERFORM a paragraph or  section
 that   is  already  activated  due  to  a  previous  PERFORM
 statement.   This   constitutes   an   attempted   recursive
 activation of the paragraph or section and is illegal in the
 COBOL language.  The program must execute an EXIT  statement
 from  the  paragraph  or  section  before  this paragraph or
 section can be the subject of s subsequent PERFORM.

 User Action:   Examine the logic of the program to determine
 why  an  EXIT  from  the  paragraph  or section is not being
 executed before the subsequent PERFORM of the same paragraph
 or section.

3 RECACTUSE
 recursive activation of USE procedure

 Explanation:  Attempting  to   activate   (enter)   a   USE
 procedure  while that USE procedure is already active.  USE
 procedures are activated (or entered)  in  response  to  an
 error  or  condition  associated  with  an  I/O  operation.
 Within that USE procedure, another I/O operation  has  been
 attempted  that  caused  this  USE  procedure to be entered
 recursively before exiting from the initial  entry  to  the
 USE  procedure.   This  recursive  activation  of  the  USE
 procedure is illegal in the COBOL language.

 User  Action:  Examine  the  logic  of   the   program   to
 ascertain  the  condition  causing the recursive activation
 of the USE procedure and eliminate that  condition.

3 RECLOCDEL
 record on file is already locked (DELETE attempt)

 Explanation:   In the file sharing  environment,  attempting
 to  DELETE  a  record  that  is  already  locked by another,
 contending process.  The file status variable,  if  present,
 has  been  set  to 92.  No applicable USE procedure has been
 found.

 User Action:   Code an applicable USE procedure in which the
 problem of record contention may be handled properly by your
 own program.  Using USE procedures is important in the  file
 sharing environment.

3 RECLOCREA
 record on file is already locked (READ attempt)

 Explanation:   In the file sharing  environment,  attempting
 to  READ  a  record  that  is  already  locked  by  another,
 contending process.  The file status variable,  if  present,
 has  been  set  to 92.  No applicable USE procedure has been
 found.

 User Action:   Code an applicable USE procedure in which the
 problem of record contention may be handled properly by your
 own program.  Using USE procedures is important in the  file
 sharing environment.

3 RECLOCREW
 record on file is already locked (REWRITE attempt)

 Explanation:   In the file sharing  environment,  attempting
 to  REWRITE  a  record  that  is  already locked by another,
 contending process.  The file status variable,  if  present,
 has  been  set  to 92.  No applicable USE procedure has been
 found.

 User Action:   Code an applicable USE procedure in which the
 problem of record contention may be handled properly by your
 own program.  Using USE procedures is important in the  file
 sharing environment.

3 RECLOCSTA
 record on file is already locked (START attempt)

 Explanation:   In the file sharing  environment,  attempting
 to  perform  a START operation on a record already locked by
 another, contending process.  The file status  variable,  if
 present,  has  been  set to 92.  No applicable USE procedure
 has been found.

 User Action:   Code an applicable USE procedure in which the
 problem of record contention may be handled properly by your
 own program.  Using USE procedures is important in the  file
 sharing environment.

3 RECLOCWRI
 record on file is already locked (WRITE attempt)

 Explanation:   In the file sharing  environment,  attempting
 to  WRITE  a  record  that  is  already  locked  by another,
 contending process.  The file status variable,  if  present,
 has  been  set  to 92.  No applicable USE procedure has been
 found.

 User Action:   Code an applicable USE procedure in which the
 problem of record contention may be handled properly by your
 own program.  Using USE procedures is important in the  file
 sharing environment.

3 REWINCOPE
 REWRITE on file incompatible with OPEN mode

 Explanation:   The REWRITE operation is not compatible  with
 the  open  mode  of  the file.  The file status variable, if
 present, has been set to 94.  No  applicable  USE  procedure
 has been found.

 User Action:   Examine the mode in which the file was opened
 prior to the attempted REWRITE operation and change the open
 mode to allow  the  successful  completion  of  the  REWRITE
 operation.   Alternatively,  change the logic of the program
 to bypass the attempted REWRITE operation.

3 REWNO_R_S
 attempting REWRITE on file with no previous READ or START

 Explanation:   Attempting to perform a REWRITE on this  file
 without   having   previously  performed  a  READ  or  START
 operation.  The file status variable, if present,  has  been
 set to 93.  No applicable USE procedure has been found.

 User Action:   Your program must execute  a  READ  or  START
 operation  (that  is,  sequential  access  mode) immediately
 before executing the REWRITE operation.  This must occur for
 each execution of the REWRITE operation.

3 REWSMAMIN
 attempting REWRITE of variable length smaller than  minimum
 allowed on file

 Explanation:   Attempting  to  REWRITE  a  record  that   is
 smaller  than  the  minimum  record  length  declared in the
 program  for  this  file.   The  file  status  variable,  if
 present,  has  been  set to 94.  No applicable USE procedure
 has been found.

 User Action:   Examine the length of the record on the  file
 being  rewritten  and  then change the minimum record length
 attribute  in  the  program  for  the  file  to  allow   the
 successful REWRITE operation for this record.

3 REWUNOFIL
 attempting REWRITE on unopened file

 Explanation:   Attempting to perform a REWRITE operation  on
 this  file  before  the  file  is  opened.   The file status
 variable, if present, has been set to 94.  No applicable USE
 procedure has been found.

 User Action:   Examine the logic of the program to determine
 why  a  REWRITE  operation  is  attempted before the file is
 opened.  Change the logic of the program to  open  the  file
 or, alternatively, eliminate the REWRITE operation.

3 STAINCOPE
 START on file incompatible with OPEN mode

 Explanation:   The START operation is  not  compatible  with
 the  current  open  mode  of  the  file.   The  file  status
 variable, if present, has been set to 94.  No applicable USE
 procedure has been found.

 User Action:   Examine the mode in which the file was opened
 prior  to  the attempted START operation and change the open
 mode  to  allow  the  successful  completion  of  the  start
 operation.

3 STAUNOFIL
 attempting START on unopened file

 Explanation:   Attempting to perform a  START  operation  on
 this  file  before  the  file  is  opened.   The file status
 variable, if present, has been set to 94.  No applicable USE
 procedure has been found.

 User Action:   Examine the logic of the program to determine
 why  a  START  operation  is  attempted  before  the file is
 opened.  Change the logic of the program to  open  the  file
 or,  alternatively,  eliminate  the  START  operation before
 executing the OPEN.

3 SUBOVELON
 subscript or reference modifier overflows longword

 Explanation:   The evaluation of a  subscript  or  reference
 modifier  has produced a value that cannot be contained in a
 longword quantity.

 User Action:   Examine the referenced  line  of  the  source
 program  containing  the subscripting operation or reference
 modifier to determine why the  value  produced  overflows  a
 longword quantity.

3 TIMOVELON
 TIMES value overflows longword

 Explanation:   The   evaluation   of   the   TIMES   operand
 associated  with  the PERFORM statement has produced a value
 that cannot be contained in a longword quantity.

 User Action:   Examine the referenced  line  of  the  source
 program to determine why the evaluation of the TIMES operand
 produces a value that overflows a longword quantity.

3 UNDEF_EXP
 attempting undefined exponentiation -- negative base raised
 to fractional exponent

 Explanation:   Attempting    an    illegal    exponentiation
 operation  in  COBOL  in which a negative base is taken to a
 fractional power.

 User Action:   Examine the logic of the  source  program  to
 determine why this illegal operation is being attempted.

3 UNEINSCON
 INSPECT CONVERTING lengths unequal

 Explanation:   The lengths of  the  search  and  replacement
 strings are not equal in the INSPECT CONVERTING statement.

 User Action:   Examine  the  referenced  INSPECT  CONVERTING
 statement  to  determine  why  the lengths of the search and
 replacement strings are not equal.  These  lengths  must  be
 the same according to the rules of the COBOL language.

3 UNLNO_CUR
 attempting UNLOCK on file with no current record

 Explanation:   Attempting  to  perform  an   UNLOCK   RECORD
 statement  without having established a current record.  The
 file  status  variable,  if  present,  is  set  to  93.   No
 applicable USE procedure has been found.

 User Action:   Execute  a  record  operation  that  locks  a
 record,  and  therefore  establishes a current record before
 executing an UNLOCK RECORD statement.

3 UNLUNOFIL
 attempting UNLOCK on unopened file

 Explanation:   Attempting an UNLOCK operation on a file that
 is not open.  This error usually represents a logic error in
 the program.  The file status data  item,  if  present,  has
 been set to 94.  No applicable USE procedure has been found.

 User  Action:   Determine  why  an   UNLOCK   operation   is
 attempted  on  an unopened file.  Change the program to open
 the file or eliminate the UNLOCK operation.

3 WRIBEYBOU
 attempting WRITE beyond boundaries of file

 Explanation:   Attempting to WRITE a  record  at  a  logical
 position  that  is outside of the bounds of this file.  If a
 sequential  WRITE  has  been  attempted  on  a  sequentially
 organized  file, the file status variable has been set to 34
 and no applicable USE procedure was found.

 User Action:   This error usually occurs when  your  program
 attempts  to  write  records  to a volume that does not have
 sufficient free space to contain the file.  Delete or  purge
 as  many  files  as  possible to free-up sufficient space to
 contain the file being written.

3 WRIINCOPE
 WRITE on file incompatible with OPEN mode

 Explanation:   The WRITE operation is  not  compatible  with
 the  current  open  mode  of  the  file.   The  file  status
 variable, if present, has been set to 94.  No applicable USE
 procedure has been found.

 User Action:   Examine the mode in which the file was opened
 prior  to  the  attempted  WRITE  operation.  Alternatively,
 change the logic of the  program  to  bypass  the  attempted
 WRITE operation.

3 WRINOTASC
 attempting to WRITE non-ascending ISAM key on file

 Explanation:   Attempting  to  perform  a  sequential  WRITE
 operation to an indexed file in which the primary key is not
 in ascending sequence value.  The file status  variable,  if
 present,  has been set to 21.  No applicable exception label
 or USE procedure was found.

 User Action:   Examine the logic of the program to determine
 why  the primary key values are not written in ascending key
 value.

3 WRISMAMIN
 attempting WRITE of variable length  smaller  than  minimum
 allowed on file

 Explanation:   Attempting to WRITE a record that is  smaller
 than  the  minimum length record declared in the program for
 this file.  The file status variable, if present,  has  been
 set to 94.  No applicable USE procedure has been found.

 User Action:   Examine the logic of the program to determine
 why  it is shorter than the minimum length declared for this
 file in the program.

3 WRIUNOFIL
 attempting WRITE on unopened file

 Explanation:   Attempting to perform a  WRITE  operation  on
 this  file  before  the  file  is  opened.   The file status
 variable, if present, has been set to 94.  No applicable USE
 procedure has been found.

 User Action:   Examine the logic of the program to determine
 why  the  WRITE  operation  is  attempted before the file is
 opened.  Change the logic of the program to  open  the  file
 before  executing  the  WRITE.  Alternatively, eliminate the
 WRITE operation.

