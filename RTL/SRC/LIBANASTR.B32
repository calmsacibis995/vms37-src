%TITLE 'LIB$ANALYZE_SDESC - Extract length and start of data'
MODULE LIB$ANALYZE_SDESC (	! Extract length and start of data
		IDENT = '1-001'	! File: LIBANASTR.B32 Edit: RKR1001
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	General Utility Library
!
! ABSTRACT:
!
!	This is LIB$ANALYZE_SDESC.  It is used to extract the length 
! and the address at which the data starts, for a variety of descriptor
! classes.
!
! ENVIRONMENT:	Runs at any access mode - AST reentrant
!
! AUTHOR: R. Reichert, CREATION DATE: 26-JAN-1981
!
! MODIFIED BY:
!
! 1-001	- Original.  RKR 26-Jan-1981
!--


%SBTTL 'Declarations'
!
! SWITCHES:
!
SWITCHES ADDRESSING_MODE 
		(EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);
!
! LINKAGES:
!
LINKAGE LIB$ANALYZE_SDESC_JSB_LINK = JSB (REGISTER=0 ;
					 REGISTER=1, REGISTER=2 ) :
				         NOTUSED (4,5,6,7,8,9,10,11) 
				         NOPRESERVE (3);
!
! TABLE OF CONTENTS:
!
FORWARD ROUTINE
    LIB$ANALYZE_SDESC ,		 	! CALL entry point
    LIB$ANALYZE_SDESC_R3 : LIB$ANALYZE_SDESC_JSB_LINK ; !JSB entry point

!
! INCLUDE FILES:
!

LIBRARY 'RTLSTARLE';	! System symbols, 
			! typically from SYS$LIBRARY:STARLET.L32

REQUIRE 'RTLIN:RTLPSECT';	! Define PSECT declarations macros
REQUIRE 'RTLIN:STRMACROS';	! String macros

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
LITERAL
	MAX_SIZE = 65535;	! Maximum size string

!
! FIELDS:
!
!	NONE
!
! PSECTS:
!
DECLARE_PSECTS (LIB);		! Declare psects for LIB$ facility
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!
! EXTERNAL ROUTINE
!
!	NONE

EXTERNAL LITERAL 				! Condition value symbols
    LIB$_INVARG;				! Invalid argument


%SBTTL 'LIB$ANALYZE_SDESC - Extract length and data address'
GLOBAL ROUTINE LIB$ANALYZE_SDESC ( ! Extract length and data address

	INPUT_DSC,		! Input descriptor
	LENGTH,			! Returned length of data
	DATA_ADDR		! Returned address of start of data

		) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine extracts the length and the address of the first
!	byte of data from a variety of acceptable string descriptors.
!	The classes of string descriptors understood are:
!
!	CLASS	Description	 	Restrictions
!	_____	___________		_____________
!	Z	Unspecified		Treated as class S
!
!	S	Scalar, string
!
!	D	Dynamic string
!
!	A	Array 			DSC$B_DIMCT must = 1
!					(i.e., no. of dimensions = 1)
!					DSC$W_LENGTH must = 1
!					(i.e., length of each element of
!					 array must = 1)
!					DSC$L_ARSIZE must be < 65K
!					(i.e., string length < 65K)
!					DSC$B_DTYPE must be BU, T or Z
!
!	SD	Decimal scalar		DSC$B_DIGITS and DSC$B_SCALE
!				        will be ignored
!
!	NCA	Non-contiguous array	DSC$B_DIMCT must = 1
!					(i.e., no. of dimensions = 1)
!					DSC$W_LENGTH must = 1
!					(i.e., length of each element of
!					 array must = 1)
!					DSC$L_ARSIZE must be < 65K
!					(i.e., string length < 65K)
!					DSC$B_DTYPE must be BU, T or Z
!					DSC$L_S1 must = DSC$W_LENGTH
!					(contiguous)
!
!	VS	Varying string		Length returned will be CURLEN
!
!
! CALLING SEQUENCE:
!
!    ret_status.wlc.v = LIB$ANALYZE_SDESC ( INPUT_DSC, LENGTH, 
!					   DATA_ADDR )
!
! FORMAL PARAMETERS:
!
!	INPUT_DSC.rt.dx		! Address of input descriptor
!	LENGTH.ww.r		! Address of returned length of data
!	DATA_ADDR.wa.v		! Address of returned start of data
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS: 
!
!	SS$_NORMAL	Normal successful completion
!	LIB$_INVARG	Invalid argument -- Can be cause by:
!				Not enough arguments to this routine.
!				Descriptor is not a class we recognize
!				If class = A or NCA, DIMCT not = 1
!				If class = A or NCA, ARSIZE => 65K
!				If class = A or NCA, DTYPE not
!			                   equal to Z, BU or T.
!				If class = A or NCA, LENGTH not equal 1
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN
    MAP
	INPUT_DSC : REF BLOCK [ ,BYTE],		! Input descriptor
	LENGTH : REF VECTOR [1,WORD],		! Length of output
	DATA_ADDR : REF VECTOR [1,LONG] ;	! Start of data address

    BUILTIN
	ACTUALCOUNT;				! To check no. of args

    LOCAL
	ROUT_STATUS;

    !+
    ! If insufficient number of arguments, quit.
    !
    IF (ACTUALCOUNT () LSSU 3) THEN RETURN (LIB$_INVARG);

    ROUT_STATUS = LIB$ANALYZE_SDESC_R3 ( .INPUT_DSC; 
					LENGTH [0], DATA_ADDR [0]) ;

    RETURN .ROUT_STATUS ;
    END ;		! of routine LIB$ANALYZE_SDESC

%SBTTL 'LIB$ANALYZE_SDESC_R3 - Extract length and data address'
GLOBAL ROUTINE LIB$ANALYZE_SDESC_R3 ( ! Extract length and data address

	INPUT_DSC;		! Input descriptor
	LENGTH,			! Returned length of data
	DATA_ADDR		! Returned address of start of data

				   ) : LIB$ANALYZE_SDESC_JSB_LINK  =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine extracts the length and the address of the first
!	byte of data from a variety of acceptable string descriptors.
!	The classes of string descriptors understood are:
!
!	CLASS	Description	 	Restrictions
!	_____	___________		_____________
!	Z	Unspecified		Treated as class S
!
!	S	Scalar, string
!
!	D	Dynamic string
!
!	A	Array 			DSC$B_DIMCT must = 1
!					(i.e., no. of dimensions = 1)
!					DSC$W_LENGTH must = 1
!					(i.e., length of each element of
!					 array must = 1)
!					DSC$L_ARSIZE must be < 65K
!					(i.e., string length < 65K)
!					DSC$B_DTYPE must be BU, T or Z
!
!	SD	Decimal scalar		DSC$B_DIGITS and DSC$B_SCALE
!				        will be ignored
!
!	NCA	Non-contiguous array	DSC$B_DIMCT must = 1
!					(i.e., no. of dimensions = 1)
!					DSC$W_LENGTH must = 1
!					(i.e., length of each element of
!					 array must = 1)
!					DSC$L_ARSIZE must be < 65K
!					(i.e., string length < 65K)
!					DSC$B_DTYPE must be BU, T or Z
!					DSC$L_S1 must = DSC$W_LENGTH 
!					(contiguous)
!
!	VS	Varying string		Length returned will be CURLEN
!
!  In case of a error, a length of 0 is returned in the hopes that a
!  caller who receives an error but doesn't check for it and simply
!  uses the results, won't hurt himself too much.
!
! CALLING SEQUENCE:
!
!    ret_status.wlc.v = LIB$ANALYZE_SDESC ( INPUT_DSC; LENGTH, 
!					   DATA_ADDR )
!
! FORMAL PARAMETERS:
!
!	INPUT_DSC.rt.dx		! (in R0) Addr. of input descriptor
!	LENGTH.ww.r		! (in R1) returned length of data
!	DATA_ADDR.wa.v		! (in R2) returned start of data
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS: 
!
!	SS$_NORMAL	Normal successful completion
!	LIB$_INVARG	Invalid argument -- Can be cause by:
!				Not enough arguments to this routine.
!				Descriptor is not a class we recognize
!				If class = A or NCA, DIMCT not = 1
!				If class = A or NCA, ARSIZE => 65K
!				If class = A or NCA, DTYPE not
!			                   equal to Z, BU or T.
!				If class = A or NCA, Length not equal 1.
!				If class = NCA, stride not equal 1.
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN
    MAP
	INPUT_DSC : REF BLOCK [ ,BYTE],		! Input descriptor
	LENGTH : VECTOR [1,LONG],		! Length of output
	DATA_ADDR : VECTOR [1,LONG] ;	! Start of data address


    !+
    ! preset length to zero in case we encounter an error
    !-
    LENGTH [0] = 0 ;

    !+
    ! Select the class of descriptor.
    !-
    CASE .INPUT_DSC[DSC$B_CLASS] FROM DSC$K_CLASS_Z TO DSC$K_CLASS_VS OF
    SET
	[DSC$K_CLASS_Z,
	 DSC$K_CLASS_S]:	! Scalar, string descriptor
	    BEGIN
		LENGTH[0]    = .INPUT_DSC [DSC$W_LENGTH] ;
		DATA_ADDR[0] = .INPUT_DSC [DSC$A_POINTER] ;
	    END ;


	[DSC$K_CLASS_D]:	! Dynamic string descriptor
	    BEGIN
		LENGTH[0]    = .INPUT_DSC [DSC$W_LENGTH] ;
		DATA_ADDR[0] = .INPUT_DSC [DSC$A_POINTER] ;
	    END ;


	[DSC$K_CLASS_A]:	! Array descriptor
	    BEGIN
		!+
		! If number of dimensions not 1, quit
		!-
		IF .INPUT_DSC [DSC$B_DIMCT] NEQ 1
		THEN RETURN (LIB$_INVARG) ;

		!+
		! If length of each element not equal to 1, quit
		!-
		IF .INPUT_DSC [DSC$W_LENGTH] NEQ 1
		THEN RETURN (LIB$_INVARG ) ;

		!+
		! If size of string greater than max allowed, quit.
		!-
		IF .INPUT_DSC [DSC$L_ARSIZE] GTR MAX_SIZE
		THEN RETURN (LIB$_INVARG) ;

		!+
		! Check for an allowable data type
		!-
		SELECTONE .INPUT_DSC[DSC$B_DTYPE] OF
		SET
		    [DSC$K_DTYPE_Z,
		     DSC$K_DTYPE_BU, 
		     DSC$K_DTYPE_T]:
			BEGIN
			    LENGTH[0]    = .INPUT_DSC [DSC$L_ARSIZE] ;
			    DATA_ADDR[0] = .INPUT_DSC [DSC$A_POINTER] ;
			END ;

		    [OTHERWISE]:
			RETURN (LIB$_INVARG) ;
		TES;
	    END ;


	[DSC$K_CLASS_SD]:	! Decimal scalar descriptor
	    BEGIN
		LENGTH[0]    = .INPUT_DSC [DSC$W_LENGTH] ;
		DATA_ADDR[0] = .INPUT_DSC [DSC$A_POINTER] ;
	    END ;


	[DSC$K_CLASS_NCA]:	! Non-contiguous array descriptor
	    BEGIN
		!+
		! If number of dimesions not 1, quit
		!-
		IF .INPUT_DSC [DSC$B_DIMCT] NEQ 1
		THEN RETURN (LIB$_INVARG) ;

		!+
		! If length of each element of array not equal 1, quit
		!
		IF .INPUT_DSC [DSC$W_LENGTH] NEQ 1
		THEN RETURN (LIB$_INVARG) ;

		!+
		! If size of string greater than max allowed, quit.
		!-
		IF .INPUT_DSC [DSC$L_ARSIZE] GTR MAX_SIZE
		THEN RETURN (LIB$_INVARG) ;

		!+
		! If not contiguous, quit
		!-
		IF .INPUT_DSC [DSC$L_S1] NEQ .INPUT_DSC [DSC$W_LENGTH]
		THEN RETURN (LIB$_INVARG) ;

		!+
		! Check for an allowable data type
		!-
		SELECTONE .INPUT_DSC[DSC$B_DTYPE] OF
		SET
		    [DSC$K_DTYPE_Z,
		     DSC$K_DTYPE_BU, 
		     DSC$K_DTYPE_T]:
			BEGIN
			    LENGTH[0]    = .INPUT_DSC [DSC$L_ARSIZE] ;
			    DATA_ADDR[0] = .INPUT_DSC [DSC$A_POINTER] ;
			END ;

		    [OTHERWISE]:
			RETURN (LIB$_INVARG) ;
		TES;
	    END ;


	 [DSC$K_CLASS_VS]:	! Varying string descriptor
	    BEGIN
		LENGTH[0]    = .(.INPUT_DSC [DSC$A_POINTER])<0,16> ;
		DATA_ADDR[0] = .INPUT_DSC [DSC$A_POINTER] +2;
	    END ;



	[INRANGE, OUTRANGE]:	! Unsupported class of descriptor
	    RETURN (LIB$_INVARG) ;
    TES;

    RETURN (SS$_NORMAL);
    END;			! End of routine LIB$ANALYZE_SDESC_R3
!<BLF/PAGE>

END				! End of module LIB$ANALYZE_SDESC

ELUDOM
