; REQUIRE file for Logical Unit Block (LUB)
; File: OTSLUB.MDL Version 1-048, FM, 1-OCT-80
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
; Author: T.Hastings
; Change history:
; 0-23	- New bit VIRT_RSN.  JMT 18-Dec-77
; 0-29	- Add LUB$V_ENDFILOPE.  TNH 17-Jun-78
; 1-01	- Change to negative displacements.  DGP 04-May-78
; 1-02 - debug.  DGP 12-Jun-78
; 1-03	- Merge Basic LUB with Fortran LUB.  DGP 28-Nov-78
; 1-05	- Add some more entries for the complete Basic data base.  DGP
;	 04-Dec-78
; 1-006	- Add LUB$K_D_MARGIN.  JBS 05-DEC-78
; 1-007	- Remove LUB$B_REC_FORM and correct some comments.  JBS 06-DEC-78
; 1-008 - Change file name from FORLUB.MDL to OTSLUB.MDL.  JBS 06-DEC-78
; 1-009 - Add I/O statement type constants.  DGP 06-Dec-78
; 1-010	- Comment out the PRINT statement since the MAR output of MDL
;	   is now being used by FORENTRY.  JBS 07-DEC-78
; 1-011 - Add the symbolic literals for the LUNs with negative numbers. DGP
;	 08-Dec-78
; 1-012	- Add LUB$K_ILUN_MIN to define the minimum LUN number for the
;	   table of LUNs in FORCB.  JBS 11-DEC-78
; 1-013	- Add LUB$K_DLUN_MAX to define the maximum default OPEN LUN for
;	   FORTRAN OPEN.  JBS 11-DEC-78
; 1-014 - Add Basic READ statement type.  DGP 11-Dec-78
; 1-015	- Add LUB$K_PBUF_SIZ.  JBS 12-DEC-78
; 1-016 - Add BUF_BEG, BUF_PTR, BUF_END, BUF_HIGH, and BUDDY_PTR. DGP 15-Jan-79
; 1-017 - Add LUB$Q_QUEUE for AST re-entrant OTSCCB.  JBS 18-JAN-1979
; 1-018 - Add LUB$V_DEALLOC for AST re-entrant OTSCCB.  JBS 18-JAN-1979
; 1-019 - Add LUB$V_SUBMIT and LUB$V_BLANKS for FORTRAN.  SBL 09-FEB-79
; 1-020	- Add LUB$V_USER_RBUF for BASIC OPEN with MAP.  JBS 16-FEB-1979
; 1-021 - Make PRINT_POS a longword rather than a byte.  DGP 19-Mar-79
; 1-022	- Make the BASIC default units separate from the FORTRAN
;	   default units.  JBS 20-MAR-1979
; 1-023	- Add the fields needed by BASIC File Arrays.  JBS 04-APR-1979
; 1-024 - Add LUB$V_KEYED.  SBL 9-Apr-79
; 1-025 - Add LUB$V_NOECHO.  JBS 17-APR-1979
; 1-026	- Add LUB$V_ONECHR.  JBS 17-APR-1979
; 1-027 - Add LUB$B_RAT, for the BASIC FSP$ function.  JBS 18-APR-1979
; 1-028	- Add LUB$V_CCO, for the BASIC RCTRLO function.  JBS 19-APR-1979
; 1-029 - Change LUB$V_BLANKS to LUB$V_NULLBLNK.  SBL 19-Apr-1979
; 1-030 - Add LUB$V_CUR_REC.  SBL 1-May-1979
; 1-031	- Add LUB$V_PTA.  JBS 01-MAY-1979
; 1-032 - Add K_LUN_INQ.  SBL 10-May-1979
; 1-033 - Add an AST guard bit for BASIC.  DGP 14-May-79
; 1-034 - Change LUB$V_CUR_REC to LUB$V_FIND_LAST.  SBL 15-May-1979
; 1-035	- Since edit 033 put a seventeenth bit in STT2, move the AST
;	   guard bit to STT3.  JBS 29-MAY-1979
; 1-036	- Correct a rather foolish typo in edit 035.  JBS 29-MAY-1979
; 1-037	- Change the margin to 16 bits.  JBS 30-MAY-1979
; 1-038	- Remove LUB$V_NO_KEYS.  JBS 30-MAY-1979
; 1-039	- Add LUB$B_LANGUAGE.  JBS 30-JUN-1979
; 1-040 - Add V_PRN and V_NOMARGIN.  DGP 11-Jul-79
; 1-041 - Remove unit for INQUIRE.  SBL 17-Aug-1979
; 1-042	- Remove LUB$Q_BFA_QUEUE, no longer needed.  JBS 19-SEP-1979
; 1-043	- Add BLS, BLK, RMS and M_STREAM_C.  JBS 28-SEP-1979
; 1-044 - Make MAX_LUN 119 so LIB$GET_LUN works.  SBL 4-Oct-1979
; 1-045	- Add a cell to hold the user buffer pointer.  JBS 13-NOV-1979
; 1-046 - Rearrange some of the status bits so as to make FOR$$IO_BEG
;	  more efficient.  Add LUB$V_CR and LUB$V_FTN.  SBL 29-Nov-1979
; 1-047 - Add copyright notice.  SBL 11-MAR-1980
; 1-048 - Give LUB$A_ASSOC_VAR another name LUB$L_ALQ, this is to hold the 
;	  allocation quantity for files in BASIC.
;--
;+
; The LUB contains OTS OWN data associated with a
; particular logical unit which is needed between I/O statements.
; OWN data which is needed for several calls within a single
; I/O statement is allocated in the I/O Statement Block (ISB).
; Data which is needed during a single call is always LOCAL.
;
; The MDL field definition call is of the form:
;	F fieldname,unit,size,sign
;	where:	unit is: A,B,W,L,Q,or T
;		size is optional no of repeats of unit (default=1)
;		sign is omitted (unsigned) or S (signed).
;
; The MDL bit definition call is of the form:
;		V <
;		bit_name1	; comment
;		bit_name2	; comment
;		>
;-
;+
; LUB definition (-11 OTS equivalents are indicated in parens)
; Symbols are of the form: LUB$t_symbol where t is
; A,B,W,L,T,or V.
;-

	$STRUCT LUB

;+
; Define some constants that are used to set the organization field of the LUB
;-
	K ORG_SEQUE, 1		; Organization sequential
	K ORG_RELAT, 2		; Organization relative
	K ORG_INDEX, 3		; Organization indexed sequential
	K ORG_TERMI, 4		; Organization terminal format
	K ORG_VIRTU, 5		; Organization virtual
;+
; Define the symbols for the special LUNs with negative numbers.
;-

	K LUN_BPRI,-8	; Logical unit for BASIC PRINT
	K LUN_INPU,-7	; Logical unit no. for BASIC INPUT
	K LUN_BREAD,-6	; Logical unit for BASIC READ
	K LUN_ENCD,-5	; Logical unit for FORTRAN ENCODE/DECODE
	K LUN_READ,-4	; Logical unit no. for FORTRAN READ
	K LUN_ACCE,-3	; Logical unit no. for FORTRAN ACCEPT
	K LUN_TYPE,-2	; Logical unit no. for FORTRAN TYPE
	K LUN_PRIN,-1	; Logical unit no. for FORTRAN PRINT

	K ILUN_MIN,LUB$K_LUN_BPRI	; Min LUN (for LUN table)
	K DLUN_MIN,LUB$K_LUN_READ	; Min default-OPEN LUN for FORTRAN
	K DLUN_MAX,LUB$K_LUN_PRIN	; Max default-OPEN LUN for FORTRAN
	K LUN_MIN,0	; Min. explicit FORTRAN OPEN LUN
				; BASIC limit is .GT. this.
	K LUN_MAX,119	; Max. explicit or implicit LUN

;+
; Define a symbol for the default value of the right margin.  This value
; is used only by BASIC.
;-

	K D_MARGIN, 72		; default right margin for files

;+
; Define a symbol for the maximum length of the prompt buffer.
; This much space is allocated whenever a sequential file is opened
; in case we are to prompt for input from it.
;-

	K PBUF_SIZ, 80		; Size of prompt buffer

;+
; Lay out the storage of the LUB
;-

	-F			; dummy to start negative
	L NEG_BLN		; define negative length of LUB
	-F UBF, A		; RMS User Buffer.
	-F UNIT_STT3,W		; yet more flags
		V <
		NOECHO		; If the BASIC function NOECHO has been done.
				; (applies to terminals only)
		ONECHR		; If the BASIC function ONECHR has been done
				; (applies to terminals only)
		CCO		; Cancel control O (BASIC function RCTRLO)
				; (applies to terminals only)
		FIND_LAST	; 1 if last direct operation was FIND
				; (FORTRAN direct access)
		PTA		; Purge type ahead
				; (applies to terminals only)
		AST_GUARD	; (BAS-new) Used in I/O element transmit
				; to detect concurrence of ASTs using the
				; I/O data base.  If concurrence is detected
				; then the routine is repeated.
		CR		; 1 if FAB$V_CR is set. (FORTRAN)
		FTN		; 1 if FAB$V_FTN is set. (FORTRAN)
		PRN		; (BAS-new) =1, PRN format and semantics for
				; Basic stream files.
				; 1 if FAB$V_PRN is set. (FORTRAN)
		NOMARGIN	; (BAS-new) =1, the right margin for terminal
				; format files is infinite.
		USEROPEN	; 1 if file opened with USEROPEN
		NOTSEQORG	; 1 if file is not sequential organization.
				; Used by FORTRAN ENDFILE.
		,4		; This many bits remain in this status word
		>
	-F BLS,W		; Mag tape block size, from FAB$W_BLS
;+
; The following address, if non-zero, points to a routine to be called
; just before the LUB is CLOSEd.  This is used by the BASIC File Array
; support to write out the last buffer.
;-
	-F CLOSE,A		; Call here on CLOSE
;+
; The following quadword is used to link the LUB to the LUB table
; maintained by OTSCCB.
;-
	-F QUEUE,Q		; Link for INSQUE and REMQUE instructions
;+
; LUB Locations used by all User Data Formatted (UDF) level Procedures
; which are: FOR$$UDF_{R,W}{F,U,L} and BAS$$UDF_{RW}_L
;-

	-F BUF_PTR,A		; (FOR-BLBUF) Adr. of next byte in buffer to be
				; filled or emptied with user data
	-F BUF_END,A		; (FOR-EOLBUF) Adr.+1 of last byte in buffer
				; to be filled or emptied with user data.
;+
; This is the buddy pointer for BASIC I/O.  For all units except 0, it
; should point to itself.  For unit 0, the Print CCB will point to the
; Input CCB and vice versa
;-

	-F BUDDY_PTR,A		; pointer to the complementary CCB for Print and
				; Input.  Needed for recursive and continued I/O

;+
; LUB Locations used solely by the input or output dependent
; Formatted User Data Formatters .
;-

	-F BUF_BEG,A		; (FOR-LNBUF) Adr. of first byte in buffer (FOR-used
				; for T format).
	-F BUF_HIGH,A		; (FOR-TSPECP) Adr. of highest byte filled in
				; buffer during format processing (FOR-needed
				; because Tn format can move backwards).

;+
; LUB locations set by OPEN, default OPEN, CALL FDBSET, or
; DEFINE FILE, and checked on every I/O statement
;-

	-F ORGAN,B		; (BAS-IF.BLK-IF.TRF) File organization:
				; virtual block, sequential, relative, indexed
				; sequential or terminal format.
	-F BKS,B		; Bucket size, from FAB$B_BKS
	-F LUN,W,,S		; Logical unit number (0:99)
				; Note: signed! Negative LUNS used for:
				; INPUT and PRINT
	-F PRINT_POS,L		; (BAS-POSITN) printhead position
				; PRINT statements may end in a semicolon or
				; a comma requiring the printhead position to
				; be maintained to the next PRINT statement.
				; This is a longword because the longest string
				; (65K) may be put in the longest buffer (65K).
	-F WAIT_TIME,L		; (BAS-WATIM) Wait time for a WAIT operation
	-F IFI,W		; RMS internal file id, needed 
				; until $CLOSE
	-F RBUF_SIZE,W		; Record buffer size in bytes
				; Set by OPEN, default open, or DEFINE FILE.
				; Used to allocate record buffer at open.
				; Read by record level of abstraction
				; FOR$$REC_{R,W}{F,U,L}
	-F R_MARGIN,W		; (BAS-new) the right margin for
				; a terminal format file.  The default is
				; 72 for terminal format files, set to terminal
				; width otherwise.  Not the same as
				; buffer size because of embedded carriage con-
				; trol characters.  For terminal format files,
				; when the cursor position exceeds this value
				; the record is PUT.
	-F D_MARGIN,W		; Default right margin.
	-F LANGUAGE,B		; The language that opened the LUN, as follows:
	   K LANG_MIN, 0	; Minimum language code
	   K LANG_NONE, 0	; None (probably not open yet)
	   K LANG_BAS, 1	; VAX-11 BASIC-PLUS-2
	   K LANG_FOR, 2	; VAX-11 FORTRAN-IV PLUS
	   K LANG_MAX, 2	; Maximum language code
	-F RFM,B		; Record format, from FAB$B_RFM
	M 1
	-F BAS_VFC,W		; (BAS-new) fixed control block for carriage control
				; This is pointed to by the RAB so it is a part
				; of the RMS interface.  As a result, it is only
				; written to by the REC level.
	P 1
	-F BAS_VFC1,B		; overlay first byte of VFC
	-F BAS_VFC2,B		; overlay second byte of VFC
	M 1
	-F ASSOC_VAR,A		; Adr. of ASSOCIATEVARIABLE or 0 if none
				; Set by OPEN or DEFINEFILE.
				; LUB$V_ASS_VAR_L specifies word/longword
	P 1
	-F ALQ,L		; Allocation quantity for files, also used in assoc_var
	-F LOG_RECNO,L		; current or next Logical (or segmented)
				; record number for sequential access files
				; (needed for BACKSPACE of segmented records). Current or next
				; record number for
				; FORTRAN direct access files (0=1=first record)
	-F REC_MAX,L		; Direct access maximum record number
				; (RMS doesn't keep for Sequential organization
				; files). Set by DEFINE FILE or OPEN.
	-F FAB,A		; Address of FAB allocated by CALL ASSIGN,
				; CALL FDBSET, DEFINEFILE or OPEN.
				; 0 = ASSIGN, FDBSET, DEFINEFILE or
				; LUB not done.
				; NOTE: This field cannot move from an offset
				; of -24 due to Fortran compatibility routines
	-F RBUF_ADR,A		; Size in bytes of record buffer (includes
				; any FORTRAN information kept in the record)
	-F DID,W,3		; three words to hold directory ID from OPEN
	-F RAT,B		; The record attributes, from FAB$B_RAT.
	-F RSL,B		; size of resultant name string (0 = no string allocated)
	-F RSN,A		; address of resultant name string

;+
; The status bits were broken apart into 2 words due to an upper bound
; in MDL which can not support more than about 256 characters in a field
;-

	-F UNIT_ATTR,W		; (FOR-D.STAT) Unit attribute bits which are
				; needed between I/O statements.

				; NOTE: Some of these bits are in fixed
				; positions as noted.
		V <		; Status bits

;+
; Bits set by OPEN,default OPEN, CALL FDBSET,or
; DEFINEFILE, and checked on every I/O statement
;-

		OPENED		; (FOR-DV.OPN) LUB has been successfully
				; opened by OPEN or default OPEN.
				; Cleared by CLOSE or error during OPEN
				; NOTE: cannot be moved from offset -4,0 due
				; to Fortran compatibility.
		IO_ACTIVE	; (FOR--) An I/O statement is active on
				; this logical unit. Set to 0 on an error
				; or end of I/O list. Used to prevent recursive
				; I/O on the same logical unit.
		READ_ONLY	; (FOR-DV.RDO) No writes will (can) be
				; done to this file.
				; Set by CALL FDBSET or OPEN 'READONLY'.
				; NOTE: cannot be moved from offset -4,2 due
				; to Fortran compatibility.
		OLD_FILE	; (FOR-DV.OLD) Old (existing) file required,do 
				; OPEN not CREATE.  Set by TYPE='OLD' or
				; FDBSET 'OLD'.
				; NOTE: cannot be moved from offset -4,3 due to
				; Fortran compatibility.
		DIRECT		; (FOR-DV.DFD) FORTRAN direct access file.
				; Set by ACCESS='DIRECT' or DEFINEFILE.
				; Note: this bit is independent of RMS
				; file organization (Sequential or Relative).
				; Can not be moved from -4,4 unless
				; FOR$$IO_BEG is modified.
		SCRATCH		; (FOR-DV.SCR) TYPE='SCRATCH' specified.
		DELETE		; (FOR-DV.DEL) OPEN DISP='DELETE' specified.
				; Checked at CLOSE
		PRINT		; (FOR-DV.SPL) OPEN DISPOSE='PRINT' causes
				; spooling at CLOSE.
		FORMATTED	; (FOR-DV.FMP) File is FORTRAN formatted.
				; OPEN FORM='FORMATTED'
				; 0 = unspecified.
				; NOTE: Can not be moved from -4,8 unless
				; FOR$$IO_BEG is modified.
		UNFORMAT	; (FOR-DV.UFP) File is FORTRAN unformatted.
				; 0 = unspecified. Set by DEFINE FILE or OPEN.
				; Note: LUB$V_FORMATTED and LUB$V_UNFORMAT
				; can both be 0 on default OPEN done for
				; END FILE since the format may be either.
				; Can not be moved from -4,9 unless
				; FOR$$IO_BEG is modified.
		FIXED		; (FOR--) 1 = Record format is RMS fixed (FLR).
				; OPEN RECORDTYPE='FIXED'
				; 0 = Record format is RMS variable 
				; (VLR or VLRM, i.e., VLR on Relative
				; Organization file.  OPEN RECORDTYPE='VARIABLE'
		SEGMENTED	; (FOR--) Segmented (unformatted) records are
				; to be used. Otherwise only one
				; record (VLR or FLR) is to be read or
				; written with no segmented control info.
				; RECORDTYPE = 'SEGMENTED' in OPEN or TYPE not specified
				; for sequential unformatted file.
		ASS_VAR_L	; (FOR-DV.AI4) ASSOCIATEVARIABLE is a longword
				; 0 = ASSOCIATEVARIABLE is a word or not
				; present. Set by OPEN or
				; DEFINE FILE.   See LUB$A_ASSOC_VAR
		APPEND		; (FOR-DV.APD) File was opened ACCESS = 'APPEND'
				; also used as state bit (LOG_RECNO is undefined)
				; NOTE: cannot be moved from offset -4,13 due to
				; Fortran compatibilty.
		SEQUENTIA	; 1 if ACCESS='SEQUENTIAL' (FORTRAN)
				; Note: Can not be moved from -4,14
				; unless FOR$$IO_BEG is modified.
		KEYED		; 1 if ACCESS='KEYED' (FORTRAN)
				; Note: Can not be moved from -4,15
				; unless FOR$$IO_BEG is modified.
		>
	-F UNIT_STT2,W		; second word of status bits
		V <
		VIRT_RSN	; indicates that RSN points to dynamic memory
				; not local storage
		ENDFILOPN	; File was implicitly opened to do ENDFILE
				; When first I/O is done, there are a few
				; defaults which will be specified:
				; LUB$V_FORMATTED or LUB$V_UNFORMAT
				; LUB$V_SEGMENTED
				; Then LUB$V_ENDFIL_OPN is cleared.
		FORM_CHAR	; (BAS-new) the last output element transmitter ended
				; in a comma or semicolon.
		OUTBUF_DR	; (BAS-IF.WRT) the PRINT buffer already has 
				; something in it and should be dumped 
				; before continuing.  Set by BAS$$DO_WRITE
				; Used for same purpose by BASIC File Array support
		TERM_FOR	; (BAS-IF.TRF) terminal format file on any unit including 0
				; Set by OPEN info from user. = 1, term-
				; inal format
		TERM_DEV	; (BAS-IF.TRM) terminal device on any unit including 0
				; Set by OPEN info from RMS. = 1, term-
				; inal device
		FORCIBLE	; (BAS-IF.FRC) forcible device on any unit including 0
				; Set by OPEN info from RMS. = 1, term-
				; inal or line printer device
		UNIT_0		; (BAS-new?) terminal device - unit 0
				; Set by Default OPEN for PRINT and INPUT
		VA_USE		; (BAS-IF.VIR) marks a files first usage as a
				; virtual array.  Once used as virtual, it
				; cannot be used for block I/O.
		BLK_USE		; (BAS-BIO) Marks a file's first use as block
				; I/O.  Once used as block I/O , it cannot be
				; used for virtual I/O.
		M_STREAM	; (BAS-IF.CON) File is multistream connected.
		M_STR_C		; File is (or was) connected to.
;+
; The following bit is set by CLOSE to indicate that the LUB should be
; deallocated as soon as all recursive or nested I/O on it has
; completed.  It is cleared (in effect) by OTS$$POP_CCB deallocating the
; storage.  While it is set the LUN may not be OPENed since there is
; I/O outstanding which should be allowed to fail.
;-
		DEALLOC		;  Can deallocate this LUB
		SUBMIT		;  FORTRAN DISP='SUBMIT" if set.
		NULLBLNK	;  FORTRAN BLANK='ZERO' if clear,
				;  BLANK='NULL' if set.
		USER_RBUF	; If 1, the record buffer was allocated
				; by the user, don't deallocate it at
				; CLOSE time.
		>		; end of status bits
	K LUB_LEN, -LUB$K_NEG_BLN	; positive length of LUB
;	L LUB_LEN		; length of LUB in bytes as per MDL
	E			; End of LUB.

; End of file OTSLUB.MDL
