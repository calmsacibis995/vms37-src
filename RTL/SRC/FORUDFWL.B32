MODULE FOR$$UDF_WL (	! FORTRAN Write List Directed UDF
	IDENT ='1-027'	! File: FORUDFWL.B32  Edit: SBL1027
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY:  FORTRAN Support Library - not user callable
!
! ABSTRACT:
!
! ENVIRONMENT:  User access mode; reentrant AST level or not.
!
! AUTHOR:	Jonathan M. Taylor;	CREATION DATE: 27-Jul-77
!
! MODIFIED BY:
!	Jonathan M. Taylor, 27-Jul-77: Version 0
!	Steven B. Lionel, VAX/VMS V2.0
!
! Previous edit history deleted.  SBL 20-Oct-1980
! 1-001	- Update version number and copyright notice.  JBS 16-NOV-78
! 1-002	- Put value in impossible case of CASE statement to
!	   keep BLISS compiler happy.  JBS 27-NOV-78
! 1-003	- Change REQUIRE file names from FOR... to OTS...  JBS 07-DEC-78
! 1-004 - Change ISB$A_BUF_PTR, BUF_END, BUF_HIGH, BUF_BEG to LUB. DGP 08-Jan-79
! 1-005	- Use 32-bit addresses for externals.  JBS 27-JAN-1979
! 1-006 - Add G, H, DC, GC support.  SBL 14-Mar-1979
! 1-007 - Fix FC so that it doesnt access second longword of arg! SBL 14-Mar-79
! 1-008 - Add new integer output routines.  SBL 26-Mar-79
! 1-009 - Check for record overflow.  Make complex conform to ANSI
!	  standard.  SBL 30-Mar-1979
! 1-010 - Have D and G values only print 15 fraction digits.  SBL 18-Apr-79
! 1-011 - Complete H floating support.  SBL 12-Jun-1979
! 1-012 - REC level no longer puts in a first blank.  Put them in here.
!	  SBL 26-Jun-1979
! 1-013 - Put D and G back the way they were.  1PG25.16.  SBL 28-Jun-1979
! 1-014 - OTS$CVT_x_TG routines are now FOR$CVT_x_TG.  SBL 3-JUL-79
! 1-015 - If not sequential org, give "mixed file access modes".  SBL 3-Oct-1979
! 1-016 - Make 1-015 read sequential access.  SBL 4-Oct-1979
! 1-017 - Insert leading blank for continued character strings.  SBL 4-Oct-1979
! 1-018 - Remove access check, done in FOR$$IO_BEG.  SBL 5-Dec-1979
! 1-019 - Add DO_WRITE to do REC1 calls through dispatch table so that
!	  FOR$$UDF_WN (NAMELIST) can call UDF_WL1.  SBL 20-Oct-1980
! 1-020 - Add REPEAT_CNT parameter to UDF_WL1 for NAMELIST.  SBL 29-Oct-1980
! 1-021 - Signal FOR$_OUTSTAOVE immediately rather than storing in ISB.  SBL 7-Nov-1980
! 1-022 - Make leading blank and repeat count work correctly for complex.  SBL 10-Dec-1980
! 1-023 - Don't separate character values with a space, since the standard
!	  says not to.  Add BU datatype to be same as B.  SBL 9-June-1981
! 1-024 - Specify digits_in_exp as 3 for G_floating and 4 for H_floating
!	  since editing is implicitly Ew.dEe and the exponent letter
!	  therefore cannot be dropped, per standard.  JAW 25-Aug-1981
! 1-025 - Start a new record for any character string that won't fit in
!	  the current (partly-filled) record.  JAW 26-Aug-1981
! 1-026 - Finish edit 1-024, which should have increased the field size
!	  used for a complex G_floating value by one.  JAW 31-Aug-1981
! 1-027 - Remove extra leading space from D and G output and reduce
!	  the number of fraction digits for G to 15.  SBL 10-Nov-1981
!--

!
! SWITCHES:
!
SWITCHES ADDRESSING_MODE (EXTERNAL=GENERAL, NONEXTERNAL=WORD_RELATIVE);
!
! LINKAGES:
!
REQUIRE 'RTLIN:OTSLNK';		! Define all linkages

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
	FOR$$UDF_WL0: JSB_UDF0 NOVALUE,	! UDF initialization
	FOR$$UDF_WL1: CALL_CCB NOVALUE,	! format one user I/O list element
	FOR$$UDF_WL9: JSB_UDF9 NOVALUE,	! UDF termination
	DO_WRITE: JSB_REC1 NOVALUE;	! Call the REC level to write a record

!
! INCLUDE FILES:
!
REQUIRE 'RTLML:FORERR';		! FORTRAN error number definitions
REQUIRE 'RTLML:OTSISB';		! I/O statement block (ISB) offsets 
REQUIRE 'RTLML:OTSLUB';		! Only needed to get LUB length!
REQUIRE 'RTLIN:OTSMAC';		! Macros
REQUIRE 'RTLIN:RTLPSECT';	! Define DECLARE_PSECTS macro
LIBRARY	'RTLSTARLE';		! STARLET library for macros and symbols

!
! MACROS:
!


!
! EQUATED SYMBOLS:
!
!	NONE


!
! PSECT DECLARATIONS:
!

	DECLARE_PSECTS (FOR);	! declare PSECTs for FOR$ facility

!
! OWN STORAGE:
!
!	None
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE

    FOR$$SIGNAL_STO : NOVALUE,		! Signal fatal error

!    The following are general library routines available for any
!    one's use (value is true if fits in field):

    OTS$CVT_L_TL,			! Convert long to text, L format
    OTS$CVT_L_TI,			! Convert long to text, I format
    FOR$CVT_D_TG,			! Convert D to text, G format
    FOR$CVT_G_TG,			! Convert G to text, G format
    FOR$CVT_H_TG,			! Convert H to text, G format

    FOR$$REC_WSL0: JSB_REC0 NOVALUE,	! initialize list directed output
    FOR$$REC_WSL1: JSB_REC1 NOVALUE,	! write list directed
    FOR$$REC_WSL9: JSB_REC9 NOVALUE;	! end list directed output

EXTERNAL
    FOR$$AA_REC_PR1: VECTOR;		! PIC array of record processor procedures
					! Write a record in REC level of
					! abstraction. Indexed by I/O statement
					! type (ISB$B_STTM_TYPE)

GLOBAL ROUTINE FOR$$UDF_WL0
	: JSB_UDF0 NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Perform UDF level write list-directed I/O initialization.
!	Call record level processor to initialize buffer pointers.
!
! CALLING SEQUENCE:
!
!	JSB FOR$$UDF_WL0 ()
!
! FORMAL PARAMETERS:
!
!
! IMPLICIT INPUTS:
!
!	CCB			Pointer to current logical unit block (LUB)
!
! IMPLICIT OUTPUTS:
!
!	LUB$A_BUF_BEG set to start of buffer
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	FOR$_MIXFILACC if file is not sequential access.
!
!--
    BEGIN

    EXTERNAL REGISTER
	CCB : REF BLOCK [, BYTE];

    FOR$$REC_WSL0 ();
    CCB [LUB$A_BUF_BEG] = .CCB [LUB$A_BUF_PTR];	! Beginning of buffer

    END;

GLOBAL ROUTINE FOR$$UDF_WL1 (
	ELEM_TYPE,
	ELEM_SIZE,
	ELEM_ADR,
	FC_FLAG,
	REPEAT_CNT)
	: CALL_CCB NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Write list-directed User Data Formatter.
!	Accept an I/O element, format it, and put it in the record buffer.
!	Calls record level processors to perform the actual I/O.
!
! CALLING SEQUENCE:
!
!	CALL FOR$$UDF_WL1 (elem_type.rlu.v, elem_size.rlu.v, elem_adr.rx.r 
!			[, fc_flag.rlu.v [, repeat_cnt.rl.v]])
!
! FORMAL PARAMETERS:
!
!	ELEM_TYPE.rlu.v		Type code of user I/O list
!				element. Form: ELEM_TYPE_x
!				x = B,W,L,BU,WU,LU,F,D,FC or T.
!	ELEM_SIZE.rlu.v		Size of user I/O list element
!				in addressable machine units
!				If 0, this is end of I/O list call.
!	ELEM_ADR.rx.r		Adr. of user I/O list element
!				x = b, w, l, bu, wu, lu, f, d, fc, t,
!				g, h, dc or gc.
!	[FC_FLAG.rlu.v]		If present:
!				    0 - real part of COMPLEX number
!				    1 - imaginary part of COMPLEX number
!				    2 - not complex number, but repeat cnt present
!	[REPEAT_CNT.rl.v]	If present, the value written is to prefaced by
!				a repeat count of the form n*.  The value of the
!				parameter is the repeat count.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    EXTERNAL REGISTER
	CCB: REF BLOCK[, BYTE];

    BUILTIN
	ACTUALCOUNT;

    BIND
	FIELDSIZE =
	    UPLIT BYTE(
			0,	! not used
			0,	! not used
			5,	! BU (same as B for FORTRAN)
			2,	! WU
			2,	! LU
			0,	! not used
			5,	! B
			7,	! W
			12,	! L
			0,	! not used
			15,	! F
			24,	! D
			11,	! FC - absolute minimum for real part
			20,	! DC - absolute minimum for real part
				! types between DC and G not used
			24,	! G
			43,	! H
			19)	! GC - absolute minimum for real part
	    :VECTOR[, BYTE];
    MAP
	ELEM_ADR: REF VECTOR;	! element is call-by-reference

    LOCAL
	DIFF,			! number of bytes left in record buffer
	LELEM_TYPE,		! If first part of COMPLEX then FC else .ELEM_TYPE
	REPEAT_COUNT,		! Local copy of repeat count
	REPEAT_DSC: DSC$DESCRIPTOR,	! Descriptor for repeat string
	REPEAT_STR: VECTOR [12, BYTE],	! Repeat count string
	L;			! Field length of this element

    !+
    ! If we're being called to write the first part of a COMPLEX number,
    ! then change the ELEM_TYPE to COMPLEX.  If called for the second part
    ! of a COMPLEX number then just return since the first part really
    ! wrote both parts...
    !-

    LELEM_TYPE =
    (IF ACTUALCOUNT() GTR (FC_FLAG - ELEM_TYPE)/%UPVAL
    THEN
	BEGIN
	IF .FC_FLAG EQL 1
	THEN
	    RETURN;
	IF .FC_FLAG LSS 1
	THEN
	    SELECTONE .ELEM_TYPE OF
		SET
		[DSC$K_DTYPE_F]: DSC$K_DTYPE_FC;
		[DSC$K_DTYPE_D]: DSC$K_DTYPE_DC;
		[DSC$K_DTYPE_G]: DSC$K_DTYPE_GC;
		TES
	ELSE
	    .ELEM_TYPE
	END
    ELSE
	.ELEM_TYPE);

    !+
    ! compute field length
    !-

    L = (IF .LELEM_TYPE EQL DSC$K_DTYPE_T
         THEN
		2		! 1 character + leading blank minimum
	 ELSE
		IF .LELEM_TYPE GEQU DSC$K_DTYPE_G
		    THEN
			.FIELDSIZE[.LELEM_TYPE - (DSC$K_DTYPE_G-DSC$K_DTYPE_DC-1)]
		    ELSE
			.FIELDSIZE[.LELEM_TYPE]);

    !+
    ! Construct repeat count string.
    !-

    REPEAT_DSC [DSC$W_LENGTH] = 0;
    IF ACTUALCOUNT () GTR (REPEAT_CNT - ELEM_TYPE)/%UPVAL
    THEN
	BEGIN
	IF .REPEAT_CNT GTR 1
	THEN
	    BEGIN
	    LOCAL
		FAO_DSC: DSC$DESCRIPTOR;	! For FAO control string
	    REPEAT_DSC [DSC$A_POINTER] = REPEAT_STR;
	    REPEAT_DSC [DSC$W_LENGTH] = 12;
	    REPEAT_DSC [DSC$B_DTYPE] = DSC$K_DTYPE_T;
	    REPEAT_DSC [DSC$B_CLASS] = DSC$K_CLASS_S;
	    FAO_DSC [DSC$A_POINTER] = UPLIT BYTE ('!SL*');
	    FAO_DSC [DSC$W_LENGTH]  = %CHARCOUNT ('!SL*');
	    FAO_DSC [DSC$B_DTYPE] = DSC$K_DTYPE_T;
	    FAO_DSC [DSC$B_CLASS] = DSC$K_CLASS_S;
	    REPEAT_COUNT = .REPEAT_CNT;
	    $FAO (FAO_DSC,			! Control string descriptor
		  REPEAT_DSC [DSC$W_LENGTH],	! Return length here
		  REPEAT_DSC,			! Output string descriptor
		  .REPEAT_COUNT);		! Value
	    END;
	END;

    !+
    ! If there is not enough room in this record buffer for the element,
    ! then write this buffer and start anew.  If entire record wont
    ! fit value, return error FOR__OUTSTAOVE.
    !-

    IF (.L + .REPEAT_DSC [DSC$W_LENGTH]) GTR CH$DIFF (.CCB[LUB$A_BUF_END], .CCB[LUB$A_BUF_PTR])
    THEN
	IF (.L + .REPEAT_DSC [DSC$W_LENGTH]) GTR .CCB [LUB$W_RBUF_SIZE]
	    THEN
		BEGIN
		FOR$$SIGNAL_STO (FOR$K_OUTSTAOVE);
		RETURN;
		END
	    ELSE
		DO_WRITE ();

	
    !+
    ! If not complex, write leading space and repeat count.
    !-

    IF .ELEM_TYPE EQL .LELEM_TYPE	! True if not COMPLEX
    THEN
	BEGIN
	!+
	! Don't put the leading space if this is a CHARACTER value unless
	! it's also the beginning of the record.
	!-
	IF (.ELEM_TYPE NEQU DSC$K_DTYPE_T) OR
	   (.CCB [LUB$A_BUF_PTR] EQLA .CCB [LUB$A_BUF_BEG])
	THEN
	    CH$WCHAR_A (%C' ', CCB [LUB$A_BUF_PTR]);
	CCB [LUB$A_BUF_PTR] = CH$MOVE (.REPEAT_DSC [DSC$W_LENGTH], 
	    .REPEAT_DSC [DSC$A_POINTER], .CCB [LUB$A_BUF_PTR]);
	END;

    !+
    ! If the element is a string literal, then move it into the record.
    !-

    IF .LELEM_TYPE EQL DSC$K_DTYPE_T
    THEN
	BEGIN
	LOCAL
	    P;				! Pointer to the string literal

	P = CH$PTR (.ELEM_ADR);
	L = .ELEM_SIZE;

	!+
	! If the string won't fit in the remaining portion of the
	! buffer, and the buffer is not empty, write out the buffer and
	! start a new record.
	!-

	IF .L GTR CH$DIFF (.CCB [LUB$A_BUF_END], .CCB [LUB$A_BUF_PTR])
	    AND .CCB [LUB$A_BUF_PTR] NEQ .CCB [LUB$A_RBUF_ADR] + 1
	THEN
	    BEGIN
	    DO_WRITE ();
	    CH$WCHAR_A (%C' ', CCB [LUB$A_BUF_PTR]);
	    END;

	!+
	! If the string is longer than the record buffer,
	! move in the part that fits and write the record.
	!-

	WHILE .L GTR (DIFF = CH$DIFF (.CCB[LUB$A_BUF_END], .CCB[LUB$A_BUF_PTR]))
	DO
	    BEGIN
	    CCB[LUB$A_BUF_PTR] = CH$MOVE (.DIFF, .P, .CCB[LUB$A_BUF_PTR]);
	    P = CH$PLUS (.P, .DIFF);
	    L = .L - .DIFF;
	    IF .L GTR 0
	    THEN
		BEGIN
		DO_WRITE ();
		CH$WCHAR_A (%C' ', CCB [LUB$A_BUF_PTR]);
		END;
	    END;

	!+
	! move in the rest of the string.
	!-

	CCB[LUB$A_BUF_PTR] = CH$MOVE (.L, .P, .CCB[LUB$A_BUF_PTR]);

	END

    ELSE

	BEGIN

	LOCAL
	    DSC: BLOCK[8, BYTE];		! static string descriptor for output field

	!+
	! Perform the appropriate conversions.
	!-

	IF .ELEM_TYPE NEQU .LELEM_TYPE	! Only happens if item is complex
	THEN
	    BEGIN
	    LOCAL
		D_VALUE: VECTOR [2],	! Holds D or G value
		VALUE_ADDR,		! Address of value
		STRING1: VECTOR [23,BYTE], ! Result of conversions
		STRING2: VECTOR [23,BYTE],
		LENGTH1,		! Length of values
		LENGTH2,
		RPT_LENGTH,		! Length of repeat count
		LEFT1,
		LEFT2,
		CONVERT_RTN,		! Address of convert routine
		DIGITS,			! digits_in_fraction
		EXP_DIGITS;		! digits_in_exp
	    DSC [DSC$A_POINTER] = STRING1;
	    SELECTONE .LELEM_TYPE OF
		SET
		[DSC$K_DTYPE_FC]:
		    BEGIN
		    D_VALUE [0] = .ELEM_ADR [0];! Store F value
		    D_VALUE [1] = 0;
		    VALUE_ADDR = D_VALUE;
		    DIGITS = 7;
		    EXP_DIGITS = 2;
		    CONVERT_RTN = FOR$CVT_D_TG;
		    DSC [DSC$W_LENGTH] = 14;
		    END;
		[DSC$K_DTYPE_DC]:
		    BEGIN
		    VALUE_ADDR = .ELEM_ADR;
		    DIGITS = 16;
		    EXP_DIGITS = 2;
		    CONVERT_RTN = FOR$CVT_D_TG;
		    DSC [DSC$W_LENGTH] = 23;
		    END;
		[DSC$K_DTYPE_GC]:
		    BEGIN
		    VALUE_ADDR = .ELEM_ADR;
		    DIGITS = 15;
		    EXP_DIGITS = 3;
		    CONVERT_RTN = FOR$CVT_G_TG;
		    DSC [DSC$W_LENGTH] = 23;
		    END;
		TES;
	    IF NOT (.CONVERT_RTN) (.VALUE_ADDR, DSC, .DIGITS, 0, 1,
		.EXP_DIGITS)
		THEN
		    CCB [ISB$B_ERR_NO] = FOR$K_OUTCONERR;

	    !+
	    ! Get length of real part.
	    !-
	    BEGIN
	    LOCAL
		RIGHT;	! Boundary columns of converted value
	    LEFT1 = CH$FIND_NOT_CH (.DSC [DSC$W_LENGTH], .DSC [DSC$A_POINTER], %C' ');
	    RIGHT = CH$FIND_CH ( (.DSC [DSC$W_LENGTH] - CH$DIFF (.LEFT1, .DSC [DSC$A_POINTER])), .LEFT1, %C' ');
	    IF CH$FAIL (.RIGHT)
		THEN
		    RIGHT = CH$PLUS (.DSC [DSC$A_POINTER], .DSC [DSC$W_LENGTH]);
	    LENGTH1 = CH$DIFF (.RIGHT, .LEFT1);
	    END;
	    IF .LELEM_TYPE EQL DSC$K_DTYPE_FC
		THEN
		    D_VALUE [0] = .ELEM_ADR [1]
		ELSE
		    VALUE_ADDR = ELEM_ADR [2];
	    DSC [DSC$A_POINTER] = STRING2;
	    IF NOT (.CONVERT_RTN) (.VALUE_ADDR, DSC, .DIGITS, 0, 1,
		.EXP_DIGITS)
		THEN
		    CCB [ISB$B_ERR_NO] = FOR$K_OUTCONERR;

	    !+
	    ! Get length of imaginary part.
	    !-
	    BEGIN
	    LOCAL
		RIGHT;	! Boundary columns of converted value
	    LEFT2 = CH$FIND_NOT_CH (.DSC [DSC$W_LENGTH], .DSC [DSC$A_POINTER], %C' ');
	    RIGHT = CH$FIND_CH ( (.DSC [DSC$W_LENGTH] - CH$DIFF (.LEFT2, .DSC [DSC$A_POINTER])), .LEFT2, %C' ');
	    IF CH$FAIL (.RIGHT)
		THEN
		    RIGHT = CH$PLUS (.DSC [DSC$A_POINTER], .DSC [DSC$W_LENGTH]);
	    LENGTH2 = CH$DIFF (.RIGHT, .LEFT2);
	    END;

	    !+
	    ! If entire constant will fit on this line, put it there.
	    ! If it won't go on this line, but will go on a new line,
	    ! put entire constant on new line.
	    ! Otherwise, if it can be split, split it.  Error if either
	    ! part is larger than record buffer size.
	    !-

	    RPT_LENGTH = .REPEAT_DSC [DSC$W_LENGTH];
	    IF (.LENGTH1 + .LENGTH2 + .RPT_LENGTH + 3) LSSP .CCB [LUB$W_RBUF_SIZE]
		THEN
		    BEGIN
		    IF (.LENGTH1 + .LENGTH2 + .RPT_LENGTH + 3) GTRP CH$DIFF (.CCB [LUB$A_BUF_END],
							    .CCB[LUB$A_BUF_PTR])
			THEN
			    DO_WRITE ();
		    CH$WCHAR_A (%C' ', CCB [LUB$A_BUF_PTR]);
		    CCB [LUB$A_BUF_PTR] = CH$MOVE (.RPT_LENGTH,
			.REPEAT_DSC [DSC$A_POINTER], .CCB [LUB$A_BUF_PTR]);
		    CH$WCHAR_A (%C'(', CCB [LUB$A_BUF_PTR]);
		    CCB [LUB$A_BUF_PTR] = CH$MOVE (.LENGTH1, .LEFT1, .CCB [LUB$A_BUF_PTR]);
		    CH$WCHAR_A (%C',', CCB [LUB$A_BUF_PTR]);
		    CCB [LUB$A_BUF_PTR] = CH$MOVE (.LENGTH2, .LEFT2, .CCB [LUB$A_BUF_PTR]);
		    CH$WCHAR_A (%C')', CCB [LUB$A_BUF_PTR]);
		    END
		ELSE
		    BEGIN
		    IF (.LENGTH1 + .RPT_LENGTH + 2) GEQP .CCB [LUB$W_RBUF_SIZE]
			THEN
			    BEGIN
			    FOR$$SIGNAL_STO (FOR$K_OUTSTAOVE);
			    RETURN;
			    END;
		    IF (.LENGTH1 + .RPT_LENGTH + 2) GTRP CH$DIFF (.CCB [LUB$A_BUF_END],
						  .CCB [LUB$A_BUF_PTR])
			THEN
			    DO_WRITE ();
		    CH$WCHAR_A (%C' ', CCB [LUB$A_BUF_PTR]);
		    CCB [LUB$A_BUF_PTR] = CH$MOVE (.RPT_LENGTH,
			.REPEAT_DSC [DSC$A_POINTER], .CCB [LUB$A_BUF_PTR]);
		    CH$WCHAR_A (%C'(', CCB [LUB$A_BUF_PTR]);
		    CCB [LUB$A_BUF_PTR] = CH$MOVE (.LENGTH1, .LEFT1, .CCB [LUB$A_BUF_PTR]);
		    CH$WCHAR_A (%C',', CCB [LUB$A_BUF_PTR]);
		    IF (.LENGTH2 + 2) GTRP .CCB [LUB$W_RBUF_SIZE]
			THEN
			    BEGIN
			    FOR$$SIGNAL_STO (FOR$K_OUTSTAOVE);
			    RETURN;
			    END;
		    DO_WRITE ();
		    CH$WCHAR_A (%C' ', CCB [LUB$A_BUF_PTR]);
		    CCB [LUB$A_BUF_PTR] = CH$MOVE (.LENGTH2, .LEFT2, .CCB [LUB$A_BUF_PTR]);
		    CH$WCHAR_A (%C')', CCB [LUB$A_BUF_PTR]);
		    END;
	    END

	ELSE

	    BEGIN

	    DSC[DSC$W_LENGTH] = .L - 1;
	    DSC[DSC$A_POINTER] = .CCB[LUB$A_BUF_PTR];

	    IF NOT (
	    CASE .LELEM_TYPE FROM DSC$K_DTYPE_BU TO DSC$K_DTYPE_D OF
	    SET
	[ DSC$K_DTYPE_WU, DSC$K_DTYPE_LU]:
		OTS$CVT_L_TL (.ELEM_ADR, DSC);

	[ DSC$K_DTYPE_BU, DSC$K_DTYPE_B, DSC$K_DTYPE_W, DSC$K_DTYPE_L]:
		OTS$CVT_L_TI (.ELEM_ADR, DSC, 1, .ELEM_SIZE);

	[ DSC$K_DTYPE_F, DSC$K_DTYPE_D]:
		BEGIN
		LOCAL
		    D_VALUE: VECTOR[2];	! holds double precision floating value
		D_VALUE[0] = .ELEM_ADR[0];
		D_VALUE[1] = (IF .ELEM_SIZE EQL %UPVAL
				THEN
				    0
				ELSE
				    .ELEM_ADR[1]);
		FOR$CVT_D_TG(D_VALUE, DSC,
		    (IF .ELEM_TYPE EQL DSC$K_DTYPE_F
		     THEN
			7
		    ELSE
			16), 1)
		END;

	 [ INRANGE ]: 0;				! this can not happen

	[ OUTRANGE ]:
		CASE .LELEM_TYPE FROM DSC$K_DTYPE_G TO DSC$K_DTYPE_H OF
		    SET
		[DSC$K_DTYPE_G]:
			FOR$CVT_G_TG (ELEM_ADR[0], DSC, 15, 0, 1, 3);
				! 1 digit in integer part, 3 in exponent
		[DSC$K_DTYPE_H]:
			FOR$CVT_H_TG (ELEM_ADR[0], DSC, 33, 0, 1, 4);
				! 1 digit in integer part, 4 in exponent.
		    TES
	    TES)
	    THEN


		CCB[ISB$B_ERR_NO] = FOR$K_OUTCONERR;
	    CCB[LUB$A_BUF_PTR] = CH$PLUS(.CCB[LUB$A_BUF_PTR], .L - 1);

	    !+
	    ! If there was a repeat count, left justify the value.
	    !-

	    IF .REPEAT_DSC [DSC$W_LENGTH] GTR 0
	    THEN
		BEGIN
		LOCAL
		    POS;
		POS = CH$FIND_NOT_CH (.DSC [DSC$W_LENGTH], .DSC [DSC$A_POINTER], %C' ');
		IF NOT CH$FAIL (.POS)
		THEN
		    CCB [LUB$A_BUF_PTR] = CH$MOVE (CH$DIFF (.CCB [LUB$A_BUF_PTR], .POS),
						   .POS, .DSC [DSC$A_POINTER]);
		END;
		    
	    END;

	END;
    RETURN;
    END;

GLOBAL ROUTINE FOR$$UDF_WL9
	: JSB_UDF9 NOVALUE =

    BEGIN

    EXTERNAL REGISTER
	CCB;

    FOR$$REC_WSL9 ();

    END;


ROUTINE DO_WRITE 				! do per-record formatting and write record
    : JSB_REC1 NOVALUE =
!+
!FUNCTIONAL DESCRIPTION:
!
!	DO_WRITE calls the appropriate REC1 level routine depending on the
!	stament type ISB$B_STTM_TYPE.
!
! CALLING SEQUENCE:
!
!	JSB DO_WRITE
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	CCB			Pointer to current logical unit block
!
! IMPLICIT OUTPUTS:
!
!	See module FOR$$REC_PROC
!
!--

    BEGIN

    EXTERNAL REGISTER
	CCB : REF BLOCK [, BYTE];

    JSB_REC1 (FOR$$AA_REC_PR1 + .FOR$$AA_REC_PR1 [.CCB [ISB$B_STTM_TYPE] - ISB$K_FORSTTYLO + 1]);

    RETURN;					! Return from DO_WRITE routine
    END;					! End of DO_WRITE routine


END
ELUDOM
