	.TITLE	OTS$POWCGCG - G COMPLEX*16 ** G COMPLEX*16 routine
	.IDENT	/1-002/			; File: OTSPOWCGC.MAR  Edit: SBL1002

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY: Language support library - user callable
;
; ABSTRACT:
;
;	G COMPLEX*16 base to G COMPLEX*16 power giving G COMPLEX*16 result.
;
; ENVIRONMENT: User Mode, AST Reentrant
;
;--
; AUTHOR: Steven B. Lionel, CREATION DATE: 20-July-1979
;
; MODIFIED BY:
;
; 1-001	- Original.  Adapted from OTS$POWCC version 1-003.  SBL 20-Jul-1979
; 1-002 - Use general mode addressing.  SBL 30-Nov-1981

	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;

;
; EXTERNAL DECLARATIONS:
;
	.DSABL	GBL
	.EXTRN	MTH$CGEXP		; Complex exponentiation
	.EXTRN	MTH$CGLOG		; Complex logarithm
	.EXTRN	OTS$MULCG_R3		; Complex multiplication
;
; MACROS:
;

;
; EQUATED SYMBOLS:
;
	base = 4			; base input - by value
	exp = 20			; exponent input - by value
;
; OWN STORAGE:
;

;
; PSECT DECLARATIONS:
;
	.PSECT _OTS$CODE PIC, USR, CON, REL, LCL, SHR, -
			EXE, RD, NOWRT, LONG


	.SBTTL	OTS$POWCGCG_R3 - G COMPLEX*16 ** G COMPLEX*16
;++
; FUNCTIONAL DESCRIPTION:
;
;	OTS$POWCGCG_R3 evaluates the result of taking a complex base
;	to a complex power.  The ANS FORTRAN X3.9-1978 standard defines
;	complex exponentiation as:
;
;	x ** y = CEXP( y * CLOG(x))
;
;	where x and y are type G COMPLEX*16.
;
;	The arguments of OTS$POWCGCG_R3 are CALL BY VALUE.  
;
; CALLING SEQUENCE:
;
;	power.wgc.v = OTS$POWCGCG_R3 (base.rgc.v, exponent.rgc.v)
;
; INPUT PARAMETERS:
;
;	Both base and exponent are G COMPLEX*16 numbers, each consisting
;	of a G REAL*8 real part and a G REAL*8 imaginary part.  Both are
;	CALL BY VALUE.
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; FUNCTION VALUE:
;
;	The G COMPLEX*16 (REAL*8, REAL*8) result of taking the
;	COMPLEX base to the COMPLEX exponent power is returned
;	in registers R0-R3.  This is a violation of the VAX
;	calling standard, but is excused for compiled code
;	support routines.
;
; SIDE EFFECTS:
;
;	Modifies registers R0-R3.
;
;	Possible error signals are:
;
;	 MTH$_INVARGMAT if base is (0.,0.).
;	 MTH$_FLOOVEMAT if floating overflow occurs.
;	 MTH$_SINCOSSIG if absolute value of the imaginary part of
;		        (exponent * CLOG(base)) > PI*2**30.
;	 SS$_ROPRAND    if reserved floating operand is fetched.
;--

	.ENTRY	OTS$POWCGCG_R3, ^M<>		; disable integer ovflo

	MTH$FLAG_JACKET			; establish math error handler

;+
;	Get complex logarithm of base
;-
	SUBL2	#16, SP			; return complex on stack
	PUSHAL	base(AP)		; address of base
	PUSHAB	4(SP)			; address of result
	CALLS	#2, G^MTH$CGLOG		; (SP) gets LOG(base)

;+
;	CLOG(base) is at (SP).  Multiply by exponent.
;	Do multiplication out of line.
;-
	MOVQ	exp+8(AP), -(SP)	; Put exponent on stack
	MOVQ	exp(AP), -(SP)		; CLOG(base) is already there!
	CALLS	#8, G^OTS$MULCG_R3	; R0-R3 gets CLOG(base) * exp

;+
;	Now compute CEXP(product)
;-

	MOVQ	R2, -(SP)		; put product on stack
	MOVQ	R0, -(SP)
	SUBL2	#16, SP			; Make room for result
	PUSHAB	16(SP)			; Address of product
	PUSHAB	4(SP)			; Address of result
	CALLS	#2, G^MTH$CGEXP		; Result is at (SP)
	MOVQ	(SP)+, R0		; Pop result into R0-R3
	MOVQ	(SP)+, R2

	RET				; all done, exit
	.END
