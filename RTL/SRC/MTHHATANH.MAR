	.TITLE	MTH$HATANH	; H-floating Precision Hyperbolic Arctangent
	.IDENT /2-002/		; File: MTHHATANH.MAR  Edit: SBL2002
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;
; FACILITY: MATH LIBRARY
;++
; ABSTRACT:
;
; MTH$HATANH returns the H-floating precision hyperbolic arctangent of the
; H-floating precision argument.  The call is standard call-by-reference.
;
;--
;
; VERSION: 2
;
; HISTORY:
; AUTHOR:
;	Peter D Gilbert, 23-Jul-81: Version 2
;
; MODIFIED BY:
;
;

	.SBTTL	HISTORY	; Detailed Current Edit History

; VERSION 1
;
; 1-001 - Original from PL/I math library.
;
; Edit History for Version 02 of MTH$HATANH
;
; 2-000	  Original	July 1981
; 2-001	- Change MOVZBL to CVTBL when accessing MTH$$AB_ALOG_V.  PDG 2-Dec-1981
; 2-002 - Store reserved operand result after error.  SBL 6-Jan-1982
;

	.SBTTL	DECLARATIONS	; Declarative Part of Module

;
; INCLUDE FILES:	MTHJACKET.MAR
;

;
; EXTERNAL SYMBOLS:
;
	.DSABL	GLOBAL
	.SHOW	BINARY,CALLS,CONDITIONALS,DEFINITIONS,EXPANSIONS
	.EXTRN	MTH$K_INVARGMAT 
	.EXTRN	MTH$$SIGNAL
	.EXTRN	MTH$$AB_ALOG_V
	.EXTRN	MTH$$AB_H_FHI

;
; EQUATED SYMBOLS:
;

;
; MACROS:
;

	.MACRO	OPDEF	X, OP, SH
	.OPDEF	ADDX	^X00@SH+OP,R'X,M'X
	.OPDEF	ADDX3	^X01@SH+OP,R'X,R'X,W'X
	.OPDEF	SUBX	^X02@SH+OP,R'X,M'X
	.OPDEF	SUBX3	^X03@SH+OP,R'X,R'X,W'X
	.OPDEF	MULX	^X04@SH+OP,R'X,M'X
	.OPDEF	MULX3	^X05@SH+OP,R'X,R'X,W'X
	.OPDEF	DIVX	^X06@SH+OP,R'X,M'X
	.OPDEF	DIVX3	^X07@SH+OP,R'X,R'X,W'X
	.OPDEF	CVTWX	^X0D@SH+OP,RW,W'X
	.OPDEF	POLYX	^X15@SH+OP,R'X,RW,AB
	.OPDEF	MOVX	^X7DFD,RH,WH		; MOVO
	.OPDEF	MOVAX	^X7EFD,AH,WL		; MOVAO
	.ENDM

	OPDEF	H, <^X60FD>, 8

	F_EXP = 7	; Bit offset to exponent
	X_EXP =	0	; Bit offset to exponent

;
; PSECT DECLARATIONS:
;
	.PSECT	_MTH$CODE	PIC,SHR,LONG,EXE,NOWRT
					; program section for math routines
;
; OWN STORAGE:	none
;

; CONSTANTS:
;

	ACMASK = ^M<R2,R3,R4,R5,R6,R7,R8,R9,R10>
					; register entry mask and integer
					; overflow enable

LN2_HI:	.OCTA	^X0000673093C7F357A39E2FEF62E44000	; Hi 98 bits of ln2
LN2_LO:	.OCTA	^X069E16C54C5B933979A157A0F97B3F9A	; Low bits of ln2


LOGTAB1:	; Constants for q(z).  Generated using eq. 6.3.10 of Hart et. 
		; al. (sin(2a) = 1/32)

	.OCTA ^X5F95F1B2A5BAC3D8F5260A619B9BBFFC ;C19 = -.502448275362084878530895804226821E-01
	.OCTA ^X92DBE7A6765790596C52CC82B1293FFC ;C18 =  .528763765645499721329654320808376E-01
	.OCTA ^X7A54AC14946576FF14A540A3C71BBFFC ;C17 = -.555549871866289307439741718980372E-01
	.OCTA ^X5E0B06A18F25A3D84658C0D9E1E03FFC ;C16 =  .588229910446883153011455339050868E-01
	.OCTA ^XAE7E786DA6F3EE3D371F00330000BFFD ;C15 = -.625000007452811547077858181299735E-01
	.OCTA ^X4B4434C70327C8039543113E11113FFD ;C14 =  .666666673290174441426279704533825E-01
	.OCTA ^X298C1180F148E440879C49242492BFFD ;C13 = -.714285714279647469240206445726274E-01
	.OCTA ^XE563A213835C94C60AE7B13B3B133FFD ;C12 =  .769230769225774005169049575655602E-01
	.OCTA ^X2CB2BF3F9152C30A555655555555BFFD ;C11 = -.833333333333336505344135125934769E-01
	.OCTA ^X0A06F262E8796F50D1751745745D3FFD ;C10 =  .909090909090911469433015746992134E-01
	.OCTA ^X62840C662AF3997A999999999999BFFD ;C9  = -.999999999999999998935034661483933E-01
	.OCTA ^XFE968C1F7E77C7071C7171C7C71C3FFD ;C8  =  .111111111111111111040128283759802E+00
	.OCTA ^XED6B8E9000D70000000000000000BFFE ;C7  = -.125000000000000000000022288060961E+00
	.OCTA ^X47B3B871499F24929249492424923FFE ;C6  =  .142857142857142857142869876170464E+00
	.OCTA ^XBE5E4E9855555555555555555555BFFE ;C5  = -.166666666666666666666666663945744E+00
	.OCTA ^XCEED967D999999999999999999993FFE ;C4  =  .199999999999999999999999998744462E+00
	.OCTA ^X0DD2000000000000000000000000BFFF ;C3  = -.250000000000000000000000000000170E+00
	.OCTA ^X59F05555555555555555555555553FFF ;C2  =  .333333333333333333333333333333390E+00
	.OCTA ^X0000000000000000000000000000C000 ;C1  = -.500000000000000000000000000000000E+00
	.OCTA ^X00000000000000000000000000000000 ;C0  =  .000000000000000000000000000000000E+00

LOGLEN1 = .-LOGTAB1/16 - 1	; no. of floating point entries


LOGTAB2:	; Constants for p(z*z). Generated using eq. 6.3.11 of Hart et.
		; al. (sin(2a) = (b - 1)/(b + 1) where b = 2**(1/7))

	.OCTA ^X8441440A9DA422727A67F0448B243FFD ;C10= .964707742165502889622792644848776E-01
	.OCTA ^X0019B5C53BD4BEC761F97E57AF203FFD ;C9 = .105255597611288497278972991576336E+00
	.OCTA ^X85B2D52687082827EEF2E8F7E1E13FFD ;C8 = .117647085221446214132332887422407E+00
	.OCTA ^XC286BAD2232FAD441440110F11113FFE ;C7 = .133333333275487876088825048524888E+00
	.OCTA ^X90B321D3AF744625146BB13B3B133FFE ;C6 = .153846153846236465950762205453645E+00
	.OCTA ^XF8411CEE61EB3082D1741745745D3FFE ;C5 = .181818181818181740845065772564621E+00
	.OCTA ^X73AA312A4DE1C7231C7171C7C71C3FFE ;C4 = .222222222222222222268705851909093E+00
	.OCTA ^X5FBA09F648D224929249492424923FFF ;C3 = .285714285714285714285697218390631E+00
	.OCTA ^XDDA89DE8999999999999999999993FFF ;C2 = .400000000000000000000000003481293E+00
	.OCTA ^X480A5555555555555555555555554000 ;C1 = .666666666666666666666666666666339E+00
	.OCTA ^X00000000000000000000000000004002 ;C0 = .200000000000000000000000000000000E+01
LOGLEN2 = .-LOGTAB2/16 - 1

	.SBTTL	MTH$HATANH	- H-floating Precision Hyperbolic Arctangent

;++
; FUNCTIONAL DESCRIPTION:
;
; HATANH  - H-floating precision floating point function
;
; HATANH(X) is computed using the following approximation technique:
;
;	If |X| >= 1.0, error.  Otherwise
;
;	Let (1+X)/(1-X) = f * (2**n), where 1/2 <= f < 1
;
;	If n is greater than or equal to 1 then
;	    set N = n - 1 and F1 = 2*f.
;	Else
;	    set N = n and F = f.
;
;	If |F - 1| < 2**-5 then
;	    2*atanh(X) =  N*ln(2) + W + W*P(W),
;		where W = ((1+F)/(1-F))*2**N - 1,
;		and P is a polynomial of degree F=5,D=9.
;	Else
;	    Obtain FHI (roughly equal to F) from table lookup.
;	    2*atanh(X) = ln((1+X)/(1-X)) = N*ln(2) + ln(FHI) + Z*Q(Z*Z),
;		where Q is a polynomial of degree F=2,D=5,
;		where Z = (F - FHI)/(F + FHI)
;		where F = (2**-N)*(1+X)/(1-X)
;	    Z is computed by:
;		Z = (X-D)/(1-X*D)
;		where Y = FHI*2**N
;		where D = (Y-1)/(Y+1)
;	    Note that Z may be computed in a variety of ways:
;		Z = [(1+X) - Y*(1-X)]/[(1+X) + Y*(1-X)]
;		Z = [1 + X - Y + X*Y]/[1 + X + Y - X*Y]
;		Z = [1 - Y + X + X*Y]/[1 + Y + X - X*Y]
;		Z = [(1-Y) + X*(1+Y)]/[(1+Y) + X*(1-Y)]
;
;       NOTE:	The quantities ln(A=FHI) and ln2 are used in the above
;		equations in two parts - a high part (containing the
;		high order bits) and a low part (containing the low
;		order bits.  In the code the high and low parts of the
;		constants are indicated by a _HI and _LO suffix respec-
;		tively.  The values were chosen such that N*LN2_HI +
;		LN_FHI_HI is exactly representable.
;
; CALLING SEQUENCE:
;
;	MTH$HATANH(hatanh.wh.r, x.rh.r)
;
; INPUT PARAMETERS:

	Y = 4				; Address to store result
	X = 8				; Contents of x is the argument

; IMPLICIT INPUTS:	none
;
; OUTPUT PARAMETERS:
;
;	VALUE:	H-floating precision hyperbolic arctangent of the argument
;
; IMPLICIT OUTPUTS:	none
;
; COMPLETION CODES:	none
;
; SIDE EFFECTS:
;
; Signals: MTH$K_INVARGMAT if |X| >= 1.0 with reserved operand in R0 (copied to
; the signal mechanism vector CHF$L_MCH_R0/R1 by LIB$SIGNAL).
; Associated message is: "Floating overflow in math library". Result is
; reserved operand -0.0 unless a user supplied (or any) error handler changes
; CHF$L_MCH_R0/R1.
;
; NOTE: This procedure disables floating point underflow and integer
; overflow, causes no floating overflow or other arithmetic traps, and
; preserves enables across the call.
;
; Note: This routine is written to avoid causing any integer overflows,
; floating overflows, or floating underflows or divide by 0 conditions,
; whether enabled or not.
;
;---

ERR:	BRW	ERROR

	.ENTRY	MTH$HATANH, ACMASK	; standard call-by-reference entry
					; disable DV (and FU), enable IV
	MOVX	@X(AP), R0		; R0 = arg

	MOVX	R0, R6
	SUBX3	R6, S^#1.0, -(SP)	; (SP) = 1-X
	BLEQ	ERR			; ATANH(X) is not defined for X>=1
	ADDX	    S^#1.0, R6
	BLEQ	ERR			; ATANH(X) is not defined for X<=-1
	CVTHF	(SP)+, R4
	CVTHF	R6, R6
	DIVF2	R4, R6			; R6 = approximation to (1+X)/(1-X)
	MOVAB	G^MTH$$AB_ALOG_V, R10
	ADDL2	(R10), R10		; R10 = address of ALOG table
	BICW3	#1@F_EXP-1, R6, R5	; R5 = Biased exponent
	SUBW	#^X4000, R5		; R5 = Unbiased exponent
	BLEQ	NEG_EXP			; Branch to processing for n=<0

	SUBW	#1@F_EXP, R5		; Exponent is positive, R5 = N = n - 1
	SUBW	R5, R6			; R6 = F = 2f
	MOVZBL	R6, R6			; R6 = index into ALOG table
	.IF	NE, F_EXP-X_EXP
	DIVW2	#1@<F_EXP-X_EXP>, R5	; Shift R5 to scale X-floating
	.ENDC
	CVTWX	R5, -(SP)		; Push N onto the stack
	CVTBL	(R10)[R6], R10		; R10 = offset into FHI tables
	BLSS	LN_1_PLUS_W		; Branch to handle F close to 1
	MOVAX	G^MTH$$AB_H_FHI[R10], R10	; R10 = Address of FHI
	MOVX	(R10)+, R6		; R6 = FHI
;
; Compute Z = (F - FHI)/(F + FHI)
;		Z = [(1+X) - Y*(1-X)]/[(1+X) + Y*(1-X)]
;		Z = [1 + X - Y + X*Y]/[1 + X + Y - X*Y]
;	where Y = FHI*2**N, roughly equal to (1+X)/(1-X)
;
	ADDW	R5, R6			; R6 = FHI * 2**N = SFHI
	SUBX3	R6, S^#1.0, -(SP)	; (SP) = 1 - SFHI
	ADDX	S^#1.0, R6		; R6 = 1 + SFHI
	DIVX	R6, (SP)		; (SP) = (1-SFHI)/(1+SFHI) = D
	ADDX3	R0, (SP), R6		; R6 = D + X
	MULX	R0, (SP)		; (SP) = D * X
	ADDX	S^#1.0, (SP)		; (SP) = 1 + D*X
	DIVX	(SP)+, R6		; R6 = (D+X)/(1+D*X) = Z
;
; Compute Z**2, P(Z**2) and Z*P(Z**2)
;
	MULX3	R6, R6, R0		; R0 = Z**2
	POLYX	R0, #LOGLEN2, LOGTAB2	; R0 = P(Z**2)
	MULX	R6, R0			; R0 = Z*P(Z**2)
;
; Compute B = N*LN2_LO + LN_FHI_LO + Z*P(Z*Z)
;
	MULX3	(SP), LN2_LO, R6	; R6 = N*LN2_LO
	ADDX	(R10)+, R6		; R6 = N*LN2_LO + LN_FHI_LO
	ADDX	R6, R0			; R0 = B
;
; Compute A = N*LN2_HI + LN_FHI_HI and ALOG(X)
;
	MULX3	(SP)+, LN2_HI, R6	; R6 = N*LN2_HI
	ADDX	(R10), R6		; R6 = A = N*LN2_HI + LN_FHI_HI
	ADDX	R6, R0			; R0 = A + B = ALOG(X)
	SUBW2	#1@X_EXP, R0		; Divide by 2
	MOVX	R0, @Y(AP)		; Store result
	RET

NEG_EXP:
	SUBW	R5, R6			; R6 = F = 2f
	MOVZBL	R6, R6			; R6 = index into ALOG table
	.IF	NE, F_EXP-X_EXP
	DIVW2	#1@<F_EXP-X_EXP>, R5	; Shift R5 to scale X-floating
	.ENDC
	CVTWX	R5, -(SP)		; Push N onto the stack
	CVTBL	(R10)[R6], R10		; R10 = offset into FHI tables
LN_1_PLUS_W:
	BLSS	LN_1_PLUS		; Branch to handle F close to 1
	MOVAX	G^MTH$$AB_H_FHI[R10], R10	; R10 = Address of FHI
	MOVX	(R10), R6		; R6 = FHI
;
; Compute Z = (F - FHI)/(F + FHI)
;		Z = [(1+X) - Y*(1-X)]/[(1+X) + Y*(1-X)]
;		Z = [1 + X - Y + X*Y]/[1 + X + Y - X*Y]
;	where Y = FHI*2**N, roughly equal to (1+X)/(1-X)
;
	ADDW	R5, R6			; R6 = FHI * 2**N = SFHI
	SUBX3	R6, S^#1.0, -(SP)	; (SP) = 1 - SFHI
	ADDX	S^#1.0, R6		; R6 = 1 + SFHI
	DIVX	R6, (SP)		; (SP) = (1-SFHI)/(1+SFHI) = D
	ADDX3	R0, (SP), R6		; R6 = D + X
	MULX	R0, (SP)		; (SP) = D * X
	ADDX	S^#1.0, (SP)		; (SP) = 1 + D*X
	DIVX	(SP)+, R6		; R6 = (D+X)/(1+D*X) = Z
;
; Compute Z**2, P(Z**2) and Z*P(Z**2)
;
	MULX3	R6, R6, R0		; R0 = Z**2
	POLYX	R0, #LOGLEN2, LOGTAB2	; R0 = P(Z**2)
	MULX	R6, R0			; R0 = Z*P(Z**2)
;
; Compute B = N*LN2_LO + LN_FHI_LO + Z*P(Z*Z)
;
	MULX3	(SP), LN2_LO, R6	; R6 = N*LN2_LO
	ADDX	-(R10), R6		; R6 = N*LN2_LO + LN_FHI_LO
	ADDX	R6, R0			; R0 = B
;
; Compute A = N*LN2_HI + LN_FHI_HI and ALOG(X)
;
	MULX3	(SP)+, LN2_HI, R6	; R6 = N*LN2_HI
	SUBX	-(R10), R6		; R6 = A = N*LN2_HI + LN_FHI_HI
	ADDX	R6, R0			; R0 = A + B = ALOG(X)
	SUBW2	#1@X_EXP, R0		; Divide by 2
	MOVX	R0, @Y(AP)		; Store result
	RET

;
; Special logic for F close to 1
;

LN_1_PLUS:
	SUBX3	R0, S^#1.0, R6		; R6 = 1-X
	TSTW	R5			; Determine which way to calculate W
	BEQL	10$
	DIVX3	R6, S^#2.0, R6		; R6 = 2/(1-X)
	SUBX	S^#1.0, R6		; R6 = (1+X)/(1-X)
	SUBW	R5, R6			; Scale R6
	SUBX	S^#1.0, R6		; R6 = W
	BRB	20$
10$:	DIVX3	R6, R0, R6		; R6 = X / (1-X)
	ADDW	#1@X_EXP, R6		; R6 = W = 2*X/(1-X) = (1+X)/(1-X) - 1
20$:	POLYX	R6, #LOGLEN1, LOGTAB1	; R0 = Q(W)
	MULX	R6, R0			; R0 = W*Q(W)
	MULX3	(SP), LN2_LO, -(SP)	; (SP) = N*LN2_LO
	ADDX	(SP)+, R0		; R0 = N*LN2_LO + W*Q(W)
	ADDX	R6, R0			; R0 = N*LN2_LO + W*Q(W) + W
	MULX	LN2_HI, (SP)		; (SP) = N*LN2_HI
	ADDX	(SP)+, R0		; R0 = ALOG(X)
	SUBW2	#1@X_EXP, R0		; Divide by 2
	MOVX	R0, @Y(AP)		; Store result
	RET
;
; X <= 0.0, signal error
;
ERROR:	MOVZBL	#MTH$K_INVARGMAT, -(SP)	; condition value
	ASHQ	#15, #1, R0		; R0 = result = reserved operand -0.0
	CLRQ	R2
					; goes to signal mechanism vector
					; (CHF$L_MCH_R0/R1) so error handler
					; can modify the result.
	CALLS	#1, G^MTH$$SIGNAL	; signal error and use real user's PC
					; independent of CALL vs JSB
	MOVO	R0, @Y(AP)		; Store result
	RET				; return

	.END
