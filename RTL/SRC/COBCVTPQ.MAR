	.TITLE	COB$CVTPQ_R9	COBOL Convert Packed to Quad
	.IDENT	/1-006/		; File: COBCVTPQ.MAR

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
; FACILITY: COBOL TYPE CONVERSION
;++
; ABSTRACT:
;	This module contains the routine which converts signed packed
;	decimal numbers to quadword (64-bit) binary.
;
;
;--
;
; VERSION: 1
;
; HISTORY:
;
; AUTHOR:
;	John Sauter, 16-JAN-1979
;
; MODIFIED BY:
;
;

	.SBTTL	HISTORY		; Detailed Current Edit History


; Edit History for Version 1 of COBCVTPQ
;
; 1-001	- Original.  JBS 16-JAN-1979
; 1-002 - Bug fixes and cleanup.  MLJ 10-Mar-1979
; 1-003 - 19 digit temps.  MLJ 13-Mar-1979
; 1-004 - Correct problem with high order longword.  22-Mar-1979
; 1-005	- Correct round towards zero problem.  PDG 12-Jul-1979
; 1-006 - Cosmetic changes.  RKR 18-OCT-79

	.SBTTL	DECLARATIONS

;
; INCLUDE FILES:
;

;
; EXTERNAL SYMBOLS:
;	NONE
;

;
; MACROS:
;	NONE
;

;
; PSECT DECLARATIONS:
	.PSECT	_COB$CODE	PIC, SHR, LONG, EXE, NOWRT

;
; EQUATED SYMBOLS:
;	NONE
;

;
; OWN STORAGE:
;
;+
; The following constant has the value 2**32.  It is used for scaling
; the high 32 bits and for compensating for unsigned arithmetic.
;-
BIAS:	.PACKED	4294967296	; 2**32
;+
; The following constant is 2**32-1.  It's subtracted from negative numbers,
; to compensate for rounding towards zero.
;-
BIAS_1:	.PACKED 4294967295
BIAS_DIGITS=10
;

	.SBTTL	COB$CVTPQ_R9

;++
; FUNCTIONAL DESCRIPTION:
;
;	Converts packed to quadword (64-bit integer)
;
; CALLING SEQUENCE:
;
;	JSB COB$CVTPQ_R9 (scale.rl.v, srclen.rl.v, src.rp.r, dst.wq.r)
;
;	Arguments are passed in R6, R7, R8 and R9.
;
; INPUT PARAMETERS:
;	
;	SCALE.rl.v		The power of ten by which the internal
;				representation of the source must be
;				multiplied to scale the same as the 
;				internal representation of the dest.
;	SRCLEN.rl.v		The number of digits in the source
;	SRC.rp.r		The number to be converted
;
; IMPLICIT INPUTS:
;
;	All of the trap bits in the PSL are assumed off.
;
; OUTPUT PARAMETERS:
;
;	DST.wq.r		The place to store the converted number
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; FUNCTION VALUE:
;
;	1 = SUCCESS, 0 = FAILURE
;
; SIDE EFFECTS:
;
;	Destroys registers R0 through R9.
;	
;--


COB$CVTPQ_R9::
	SUBL2	#24,SP			; Make room for temp storage
	ASHP	R6,R7,(R8),#0,#19,(SP)	; Scale and integerize number
					;     (also clears R0)
	BVS	11$			; If overflow, won't fit in 64 bits
;+
; Since quadwords often have their high 32 bits unused, try to convert
; the packed number to a longword.  If it succeeds, we need only spread
; the sign bit.  If it fails we will have more work to do.
;-
	CVTPL	#19,(SP),(R9)		; Convert to longword
					;     (also clears R0)
	BVS	10$			; Can't fit in 32 bits
	ASHL	#-31,(R9)+,(R9)		; Success: spread sign bit
	INCL	R0			; Indicate success, R0 = 1
11$:	ADDL2	#24,SP			; Remove temp storage
	RSB				; Return to caller.
;+
; Come here if the packed number won't fit in 32 bits.
; Divide by 2**32 to get the high 32 bits of the quadword.
;-
10$:	BLBC	9(SP),13$		; Skip if positive
	SUBP4	#BIAS_DIGITS,BIAS_1,#19,(SP)  ; Make more negative
13$:	DIVP	#BIAS_DIGITS,BIAS,#19,(SP),#19,12(SP)
	CVTPL	#19,(R5),4(R9)		; Convert & store high bits (clears R0)
	BVS	12$			; Number too large for a 64-bit integer
	INCL	R0			; Indicate success, R0 = 1
12$:	ADDL2	#24,SP			; Remove temp storage
	RSB				; Return to caller

	.END
