MODULE $LIBDCFDEF;	/* Definitions for LIB$DECODE_FAULT

{****************************************************************************
{*									    *
{*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
{*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
{*  ALL RIGHTS RESERVED.						    *
{* 									    *
{*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
{*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
{*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
{*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
{*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
{*  TRANSFERRED.							    *
{* 									    *
{*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
{*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
{*  CORPORATION.							    *
{* 									    *
{*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
{*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
{* 									    *
{*									    *
{****************************************************************************

/*
/* Operand definition codes
/*
AGGREGATE LIB$B_DCF_OPERAND STRUCTURE PREFIX LIB$;
	DCFACC		BITFIELD LENGTH 3 MASK; /* Operand access type
	DCFTYP		BITFIELD LENGTH 5 MASK; /* Operand data type
	END LIB$B_DCF_OPERAND;

/*
/* Operand access type codes
/*
CONSTANT (
	  DCFACC_R	/* Operand is to be read
	, DCFACC_M	/* Operand is to be modified
	, DCFACC_W	/* Operand is to be written
	, DCFACC_A	/* Operand is an address
	, DCFACC_V	/* Operand is a field (may be register or address)
	, DCFACC_B	/* Operand is a branch displacement
	 ) EQUALS 1 INCREMENT 1 PREFIX LIB$;

/*
/* Operand data type codes
/*
CONSTANT (
	  DCFTYP_B	/* Operand is a byte
	, DCFTYP_W	/* Operand is a word
	, DCFTYP_L	/* Operand is a longword
	, DCFTYP_Q	/* Operand is a quadword
	, DCFTYP_O	/* Operand is an octaword
	, DCFTYP_F	/* Operand is an F_floating
	, DCFTYP_D	/* Operand is a D_floating
	, DCFTYP_G	/* Operand is a G_floating
	, DCFTYP_H	/* Operand is an H_floating
	 ) EQUALS 1 INCREMENT 1 PREFIX LIB$;

/*
/* Combined operand access and data type codes
/*
#ACC_A = 0;
#ACC_R = 1;
#ACC_M = 2;
#ACC_W = 3;
#ACC_V = 4;
#ACC_B = 5;
#TYP_B = 1@3;
#TYP_W = 2@3;
#TYP_L = 3@3;
#TYP_Q = 4@3;
#TYP_O = 5@3;
#TYP_F = 6@3;
#TYP_D = 7@3;
#TYP_G = 8@3;
#TYP_H = 9@3;

CONSTANT DCFOPR_AB EQUALS #ACC_A+#TYP_B PREFIX LIB$;
CONSTANT DCFOPR_RB EQUALS #ACC_R+#TYP_B PREFIX LIB$;
CONSTANT DCFOPR_MB EQUALS #ACC_M+#TYP_B PREFIX LIB$;
CONSTANT DCFOPR_WB EQUALS #ACC_W+#TYP_B PREFIX LIB$;
CONSTANT DCFOPR_VB EQUALS #ACC_V+#TYP_B PREFIX LIB$;
CONSTANT DCFOPR_BB EQUALS #ACC_B+#TYP_B PREFIX LIB$;

CONSTANT DCFOPR_AW EQUALS #ACC_A+#TYP_W PREFIX LIB$;
CONSTANT DCFOPR_RW EQUALS #ACC_R+#TYP_W PREFIX LIB$;
CONSTANT DCFOPR_MW EQUALS #ACC_M+#TYP_W PREFIX LIB$;
CONSTANT DCFOPR_WW EQUALS #ACC_W+#TYP_W PREFIX LIB$;
CONSTANT DCFOPR_VW EQUALS #ACC_V+#TYP_W PREFIX LIB$;
CONSTANT DCFOPR_BW EQUALS #ACC_B+#TYP_W PREFIX LIB$;

CONSTANT DCFOPR_AL EQUALS #ACC_A+#TYP_L PREFIX LIB$;
CONSTANT DCFOPR_RL EQUALS #ACC_R+#TYP_L PREFIX LIB$;
CONSTANT DCFOPR_ML EQUALS #ACC_M+#TYP_L PREFIX LIB$;
CONSTANT DCFOPR_WL EQUALS #ACC_W+#TYP_L PREFIX LIB$;
CONSTANT DCFOPR_VL EQUALS #ACC_V+#TYP_L PREFIX LIB$;
CONSTANT DCFOPR_BL EQUALS #ACC_B+#TYP_L PREFIX LIB$;

CONSTANT DCFOPR_AQ EQUALS #ACC_A+#TYP_Q PREFIX LIB$;
CONSTANT DCFOPR_RQ EQUALS #ACC_R+#TYP_Q PREFIX LIB$;
CONSTANT DCFOPR_MQ EQUALS #ACC_M+#TYP_Q PREFIX LIB$;
CONSTANT DCFOPR_WQ EQUALS #ACC_W+#TYP_Q PREFIX LIB$;
CONSTANT DCFOPR_VQ EQUALS #ACC_V+#TYP_Q PREFIX LIB$;

CONSTANT DCFOPR_AO EQUALS #ACC_A+#TYP_O PREFIX LIB$;
CONSTANT DCFOPR_RO EQUALS #ACC_R+#TYP_O PREFIX LIB$;
CONSTANT DCFOPR_MO EQUALS #ACC_M+#TYP_O PREFIX LIB$;
CONSTANT DCFOPR_WO EQUALS #ACC_W+#TYP_O PREFIX LIB$;
CONSTANT DCFOPR_VO EQUALS #ACC_V+#TYP_O PREFIX LIB$;

CONSTANT DCFOPR_AF EQUALS #ACC_A+#TYP_F PREFIX LIB$;
CONSTANT DCFOPR_RF EQUALS #ACC_R+#TYP_F PREFIX LIB$;
CONSTANT DCFOPR_MF EQUALS #ACC_M+#TYP_F PREFIX LIB$;
CONSTANT DCFOPR_WF EQUALS #ACC_W+#TYP_F PREFIX LIB$;
CONSTANT DCFOPR_VF EQUALS #ACC_V+#TYP_F PREFIX LIB$;

CONSTANT DCFOPR_AD EQUALS #ACC_A+#TYP_D PREFIX LIB$;
CONSTANT DCFOPR_RD EQUALS #ACC_R+#TYP_D PREFIX LIB$;
CONSTANT DCFOPR_MD EQUALS #ACC_M+#TYP_D PREFIX LIB$;
CONSTANT DCFOPR_WD EQUALS #ACC_W+#TYP_D PREFIX LIB$;
CONSTANT DCFOPR_VD EQUALS #ACC_V+#TYP_D PREFIX LIB$;

CONSTANT DCFOPR_AG EQUALS #ACC_A+#TYP_G PREFIX LIB$;
CONSTANT DCFOPR_RG EQUALS #ACC_R+#TYP_G PREFIX LIB$;
CONSTANT DCFOPR_MG EQUALS #ACC_M+#TYP_G PREFIX LIB$;
CONSTANT DCFOPR_WG EQUALS #ACC_W+#TYP_G PREFIX LIB$;
CONSTANT DCFOPR_VG EQUALS #ACC_V+#TYP_G PREFIX LIB$;

CONSTANT DCFOPR_AH EQUALS #ACC_A+#TYP_H PREFIX LIB$;
CONSTANT DCFOPR_RH EQUALS #ACC_R+#TYP_H PREFIX LIB$;
CONSTANT DCFOPR_MH EQUALS #ACC_M+#TYP_H PREFIX LIB$;
CONSTANT DCFOPR_WH EQUALS #ACC_W+#TYP_H PREFIX LIB$;
CONSTANT DCFOPR_VH EQUALS #ACC_V+#TYP_H PREFIX LIB$;

CONSTANT DCFOPR_END EQUALS 0 PREFIX LIB$;

/*
END_MODULE;
