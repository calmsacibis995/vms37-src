MODULE BAS$$EXIT_HANDL (			! BASIC exit handler
		IDENT = '1-016'			! File: BASEXITHA.B32 Edit: PL1016
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY: BASIC support library - Exit handler
!
! ABSTRACT:
!
!	This module is used when the image exits to do
!	BASIC post processing.  It purges I/O buffers
!	and closes files with proper disposition.
!
! ENVIRONMENT: User access mode; mixture of AST level or not.
!
! Author:	John Sauter, Creation date: 23-JAN-1979
!
! MODIFIED BY:
!
! 1-001	- Original from FOROPEN.  JBS 23-JAN-1979
! 1-002	- Call OTS$$PURGE_IOBU to flush any "dirty" buffer.  JBS 24-JAN-1979
! 1-003 - Move call to OTS$$PURGE_IOBU to OTS$CLOSE_FILE.  JBS 24-JAN-1979
! 1-004	- Change linkage for OTS$PUSH_CCB to JSB_CB_PUSH and for
!	   OTS$POP_CCB to JSB_CB_POP.  JBS 25-JAN-1979
! 1-005	- Use two dollar signs for non-user entries.  JBS 26-JAN-1979
! 1-006	- Add OTS$$CLOSE_ALL.  JBS 04-JUN-1979
! 1-007	- Change to BASIC-specific exit handler.  JBS 16-AUG-1979
! 1-008	- Call BAS$$PUR_IO_CLO to flush all buffers.  JBS 20-AUG-1979
! 1-009	- Make BAS$$CLOSE_ALL global, for BAS$$RUN_INIT.  JBS 21-AUG-1979
! 1-010	- Signal CLOSE errors, but make the severity "warning" so we
!	   don't lose control.  JBS 24-AUG-1979
! 1-011	- Do explicit signalling of CLOSE errors, since OTS$$CLOSE_FILE
!	   doesn't.  JBS 27-AUG-1979
! 1-012	- Give CLOSE_ALL an optional parameter, so we can close all of the
!	   streams connected to a base file.  JBS 28-SEP-1979
! 1-013 - Clear BAS$$L_XIT_LOCK upon entry to the exit handler.  This
!	  allows user exit handlers to perform I/O, and get the proper
!	  cleanup upon leaving.
! 1-014 - If There is a file X that Y and Z have connected to ( via open 
!	  clause CONNECT) then close Y and Z first and then close X.
!	  FM 12-aug-81.
! 1-015 - LIB$STOP should be declared EXTERNAL.  PLL 20-NOV-81
! 1-016 - Edit 1-014 breaks virtual files.  BAS$$CLOSE_ALL no longer
!	  tried to close them if they were open because LUB$V_M_STR_C
!	  was not set.  PLL 24-Feb-82
!--

!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!

REQUIRE 'RTLIN:OTSLNK';				! Define all linkages

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    BAS$$DECL_EXITH : NOVALUE,			! Declare EXIT handler
    EXIT_HANDLER : NOVALUE,			! Exit Handler
    BAS$$CLOSE_ALL : NOVALUE,			! Close all files
    TRY_TO_CLOSE : CALL_CCB NOVALUE,		! Subroutine for EXIT_HANDLER
    CLOSE_HANDLER;				! Handler for CLOSE errors

!
! INCLUDE FILES:
!

REQUIRE 'RTLML:OTSLUB';				! logical Unit Block definitions

REQUIRE 'RTLIN:OTSMAC';				! macros

REQUIRE 'RTLIN:BASIOERR';			! I/O error codes

REQUIRE 'RTLIN:RTLPSECT';			! Define DELCARE_PSECTS macro

LIBRARY 'RTLSTARLE';				! STARLET library for macros and symbols

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! PSECT DECLARATIONS:
!
DECLARE_PSECTS (BAS);				! declare PSECTs for BAS$ facility
!
! OWN STORAGE:
!

OWN
    EXIT_REASON,				! VMS stuffs with reason for exiting
    EXIT_BLOCK : VECTOR [4] INITIAL (0,
					! Filled in by VMS with forward link to next EXIT control block
	0, 					! Set to EXIT_HANDLER if RTL sets up EXIT handler
	0, 					! Set to arg count (1) if RTL sets up EXIT handler
	0);					! Set to EXIT_REASON if RTL sets up EXIT handler

GLOBAL
    BAS$$L_XIT_LOCK : INITIAL (0);		! Clear if no handler linked yet

!
! (Used to make sure only one handler even if ASTs)
!
! EXTERNAL REFERENCES:
!

EXTERNAL LITERAL
    OTS$_FATINTERR;				! OTS Fatal Internal Error

EXTERNAL ROUTINE
    LIB$STOP : NOVALUE,				! Signal a fatal error
    BAS$$CB_PUSH : JSB_CB_PUSH NOVALUE,		! Load register CCB
    BAS$$CB_POP : JSB_CB_POP NOVALUE,		! Done with register CCB
    BAS$$NEXT_LUN : NOVALUE,			! Get next LUN that might be open
    BAS$$PUR_IO_CLO : NOVALUE,			! Purge all I/O buffers
    OTS$$CLOSE_FILE : CALL_CCB,			! Internal file closer
    BAS$$SIGNAL_IO : CALL_CCB NOVALUE;		! Signal a BASIC I/O error


GLOBAL ROUTINE BAS$$DECL_EXITH 			! Declare VMS EXIT handler
    : NOVALUE = 				!

!++
! FUNCTIONAL DESCRIPTION:
!
!	Declares VMS EXIT handler for BASIC.
!
! CALLING SEQUENCE:
!
!	IF (NOT .BAS$$L_XIT_LOCK) THEN BAS$$DECL_EXITH ()
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Declares VMS EXIT handler.
!--

    BEGIN

    LOCAL
	AST_STATUS,
	DCLEXH_STATUS;

!+
! We must disable ASTs to be sure that one and only one exit handler
! is declared for BASIC.
!-
    AST_STATUS = $SETAST (ENBFLG = 0);

    IF ( NOT .BAS$$L_XIT_LOCK)
    THEN
	BEGIN
!+
! Initialize EXIT handler control block (must do at run time to be PIC)
!-
	EXIT_BLOCK [1] = EXIT_HANDLER;		! Adr. of EXIT handler to be called on EXIT
	EXIT_BLOCK [2] = 1;			! arg count
	EXIT_BLOCK [3] = EXIT_REASON;		! adr. to store reason for EXIT
	DCLEXH_STATUS = $DCLEXH (DESBLK = EXIT_BLOCK);
	BAS$$L_XIT_LOCK = 1;
	END
    ELSE
	DCLEXH_STATUS = 1;

    IF (.AST_STATUS EQL SS$_WASSET) THEN $SETAST (ENBFLG = 1);

    IF ( NOT .DCLEXH_STATUS) THEN LIB$STOP (OTS$_FATINTERR);

    RETURN
    END;


ROUTINE EXIT_HANDLER (				! Exit Handler
	EXIT_REASON				! Reason
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This is the exit handler for BASIC.  Its only function is to
!	purge I/O buffers and close all files.
!
!	Upon entry, it zeroes BAS$$L_XIT_LOCK so that user I/O in
!	exit handlers can get properly cleaned up.
!
! FORMAL PARAMETERS:
!
!	EXIT_REASON.rl.r	not used
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	BAS$$L_XIT_LOCK is zeroed.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Closes all files by calling BAS$$CLOSE_ALL.
!--

    BEGIN
    BAS$$L_XIT_LOCK = 0;			! Clear exit handler interlock
    BAS$$CLOSE_ALL ();
    END;					! of routine EXIT_HANDLER


GLOBAL ROUTINE BAS$$CLOSE_ALL (			! Close all files
	PARENT_IFI				! Optional IFI to look for
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Find every existing LUB (with a linear search through the LUB
!	table).  For each LUB, if the file is open, purge its I/O
!	buffers and close it.  If the file has been marked for PRINT
!	or DELETE, this will cause proper disposition of the file.
!	RMS will close all open files at image exit, but it doesn't know
!	about the above two DISPOSE conditions.  We couldn't set them at
!	OPEN time, since the user is allowed to specify a different
!	DISPOSE option at close time (with the CLOSE statement).
!	Note that BASIC does not yet have CLOSE options, so this code is
!	a provision for the future.
!
! FORMAL PARAMETERS:
!
!	PARENT_IFI.rl.v	If present, close all files with M_STREAM set
!			and this IFI.  This is used by CLOSE when closing
!			a file which has multiple streams.  The calls to
!			OTS$$CLOSE_FILE will actually result in $DISCONNECTs.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Closes all files.
!	Signals CLOSE and DISCONNECT errors as warnings.
!--

    BEGIN

    BUILTIN
	NULLPARAMETER;

    GLOBAL REGISTER
	CCB = K_CCB_REG : REF BLOCK [, BYTE];

    LOCAL
	FLAG,
	LUN;

!+
! Scan through all BASIC logical units, closing them.
!-
    FLAG = 0;

    DO
	BEGIN
!+
! Get the next logical unit number.
!-
	BAS$$NEXT_LUN (FLAG, LUN);

	IF (.FLAG NEQ 0)
	THEN
	    BEGIN
!+
! LUN is the next logical unit number.  If the file it represents is
! open try to close it.
!-
	    BAS$$CB_PUSH (.LUN, LUB$K_ILUN_MIN);

	    IF (.CCB [LUB$V_OPENED])
	    THEN
		BEGIN

		IF (NULLPARAMETER (1))
		THEN
		    BEGIN

		    IF (.CCB [LUB$V_M_STR_C])
		    THEN
			BEGIN
!+
! Close all the sons of the mother before closing the mother, i.e. if Y and
! Z are connected to X, and we are closing X, then we must close Y and Z and
! then close X.
!-
			BAS$$CLOSE_ALL (.CCB [LUB$W_IFI]);
			TRY_TO_CLOSE ();
			END
		    ELSE
			TRY_TO_CLOSE ();

		    END
		ELSE
!+
! Do the close (actually disconnect) only if
! the IFI matches and this is a connect.
!-

		    IF (.CCB [LUB$V_M_STREAM] AND (.CCB [LUB$W_IFI] EQL .PARENT_IFI)) THEN TRY_TO_CLOSE ();
		END;

	    BAS$$CB_POP ();
	    END;

	END
    UNTIL (.FLAG EQL 0);

    RETURN;
    END;					! of routine BAS$$CLOSE_ALL


ROUTINE TRY_TO_CLOSE 				! Call OTS$$CLOSE_FILE with errors as warnings
    : CALL_CCB NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	RMS CLOSE a file (by calling OTS$$CLOSE_FILE) but signal errors as warnings, to
!	avoid losing control.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	CCB		Pointer to the LUB/ISB/RAB of the file to CLOSE.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	RMS CLOSEs the file.
!	Signals CLOSE errors as warnings.
!--

    BEGIN

    EXTERNAL REGISTER
	CCB : REF BLOCK [, BYTE];

    ENABLE
	CLOSE_HANDLER ();

!+
! Write output buffers, then RMS CLOSE the file.
!-
    BAS$$PUR_IO_CLO ();

    IF ( NOT OTS$$CLOSE_FILE ()) THEN BAS$$SIGNAL_IO (BAS$K_IOERR_REC);

    RETURN;
    END;

ROUTINE CLOSE_HANDLER (				! Handle an error from CLOSE_ALL
	SIG, 					! Signal vector
	MECH, 					! Mechanism vector
	ENBL					! Enable vector
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	If we get an error trying to close a file in CLOSE_ALL, convert the severity
!	of the error to WARNING (if it is ERROR or SEVERE ERROR) so that we will not
!	lose control.  It is important not to lose control so that we can try (at least)
!	to close all the files.
!
! FORMAL PARAMETERS:
!
!	SIG.rl.a	A counted vector of parameters to LIB$SIGNAL/STOP
!	MECH.rl.a	A counted vector of info from CHF
!	ENBL.ra.a	A counted vector of ENABLE argument addresses.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION CODES:
!
!	Always SS$_RESIGNAL, which is ignored when unwinding.
!
! SIDE EFFECTS:
!
!	Reduces the severity of the error to WARNING.
!
!--

    BEGIN

    MAP
	SIG : REF VECTOR,
	MECH : REF VECTOR,
	ENBL : REF VECTOR;

    LOCAL
	COND_VALUE : BLOCK [4, BYTE];

    COND_VALUE = .SIG [1];
!+
! If the severity is ERROR or SEVERE ERROR, convert it to WARNING.
!-

    SELECTONE .COND_VALUE [STS$V_SEVERITY] OF
	SET

	[STS$K_ERROR, STS$K_SEVERE] :
	    BEGIN
	    COND_VALUE [STS$V_SEVERITY] = STS$K_WARNING;
	    SIG [1] = .COND_VALUE;
	    END;

	[OTHERWISE] :
	    BEGIN
	    0
	    END;
	TES;

    RETURN (SS$_RESIGNAL);
    END;					! end of CLOSE_HANDLER
END						! End of BAS$$EXIT_HANDL module

ELUDOM
