MODULE BAS$$RESTART_IO (			! Restart BASIC I/O statement
		IDENT = '1-002'			! File: BASRESTAR.B32
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY: BASIC + 2 Support Library - User callable
!
! ABSTRACT:
!
!	This module effects the restart of a BASIC I/O statement.
!	This only happens on certain typing errors from a terminal.
!
! ENVIRONMENT: 	VAX-11 User mode
!
! AUTHOR: John Sauter, CREATION DATE: 07-MAY-1979
!
! MODIFIED BY:
!
! 1-001	- Original.  JBS 07-MAY-1979
! 1-002	- Conform to new BAS$$IO_BEG.  JBS 24-JUL-1979
!--

!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES
!

REQUIRE 'RTLIN:OTSLNK';				! Define all linkages

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    BAS$$RESTART_IO;				! Restart an I/O statement

!
! INCLUDE FILES:
!

REQUIRE 'RTLML:OTSLUB';				! logical unit block (LUB) offsets

REQUIRE 'RTLML:OTSISB';				! I/O statement block (ISB) offsets

REQUIRE 'RTLIN:RTLPSECT';			! Define DECLARE_PSECTS macro

LIBRARY 'RTLSTARLE';				! STARLET macros and symbols

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! PSECT DECLARATIONS:
!
DECLARE_PSECTS (BAS);
!
! OWN STORAGE:
!
!	NONE
!
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    BAS$IO_END : NOVALUE,			! End of I/O statement
    BAS$$IO_BEG : NOVALUE;			! Start of I/O statement

EXTERNAL
    OTS$$A_CUR_LUB;				! Address of current logical unit block


GLOBAL ROUTINE BAS$$RESTART_IO = 		! Restart an I/O statement

!++
! ABSTRACT:
!
!	Restart a BASIC I/O statement after a typing error.
!	Information about the current statement is gathered, and then
!	the statement is put through a normal end by calling BAS$IO_END.
!	Using the gathered information the statement is initialized
!	again by calling BAS$$IO_BEG with its original parameters.
!	Return is made to the RESTART_IO subroutine in the error module,
!	which will branch to the start of the I/O list.
!
! FORMAL PAREMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	OTS$$A_CUR_LUB.ra	Pointer to the current LUB/ISB/RAB.
!
! IMPLICIT OUTPUTS:
!
!	The LUB/ISB/RAB is reinitialized for the I/O statement.
!
! ROUTINE VALUE:
!
!	The address of the beginning of the I/O list.
!
! SIDE EFFECTS:
!
!	NONE
!--

    BEGIN

    GLOBAL REGISTER
	CCB = K_CCB_REG : REF BLOCK [, BYTE];

    LOCAL
	RESTART_PC,				! Address of the start of the I/O list
	LUN,					! Logical unit number
	STMT_TYPE,				! Statement type
	FMP;					! User's frame pointer

!+
! Save the information needed to call BAS$$IO_BEG.
!-
    CCB = .OTS$$A_CUR_LUB;
    RESTART_PC = .CCB [ISB$A_RESTARTPC];
    LUN = .CCB [LUB$W_LUN];
    STMT_TYPE = .CCB [ISB$B_STTM_TYPE];
    FMP = .CCB [ISB$A_USER_FP];
!+
! Suppress any "dangling prompt".  The prompt will be produced again
! when we restart the I/O statement.
!-
    CCB [RAB$B_PSZ] = 0;
!+
! Now end the I/O statement.
!-
    BAS$IO_END ();
    CCB = 0;
!+
! Now start a new I/O statement, just like the one we ended.
!-
    BAS$$IO_BEG (.STMT_TYPE, .LUN, .FMP, .RESTART_PC);
!+
! Return the address of the I/O list to our caller, who will branch to
! it, thereby completing the restart of the I/O statement.
!-
    RETURN (.RESTART_PC);
    END;					! End of BAS$$RESTART_IO routine

END						! End of BAS$$RESTART_IO module

ELUDOM
