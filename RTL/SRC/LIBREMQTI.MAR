	.TITLE	LIB$REMQTI - Remove Entry from Queue at Tail, Interlocked
	.IDENT	/1-002/			; File: LIBREMQTI.MAR Edit: DGP1002

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY: General Utility Library
;
; ABSTRACT:
;
;	One of four procedures which give higher level languages access
;	to the interlocked, self-relative queue instructions on the
;	VAX-11/780 and all future machines. This library procedure permits
;	the high level language user to have access to the REMQTI instruction.
;
; ENVIRONMENT: User Mode, AST Reentrant
;
;--
; AUTHOR: R. E. Johnston, CREATION DATE: 03-Dec-79
;
; MODIFIED BY:
;
;  1-001 - Original.  REJ 03-Dec-79	
; 1-002 - Retry count is off by one.  DGP 14-Aug-1981
;--

	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;

;
; EXTERNAL DECLARATIONS:
;
	.DSABL	GBL			; Disable automatic generation
					; of .EXTRN
	.EXTRN	SS$_NORMAL		; Normal successful completion
	.EXTRN	LIB$_SECINTFAI		; Secondary Interlock still
					; locked after retry-cnt retrys
	.EXTRN	LIB$_ONEENTQUE		; Successful Completion but
					; the queue is now empty
	.EXTRN	LIB$_QUEWASEMP		; Queue was empty
					; Queue is not modified
					; Procedure is not successful
;						
; MACROS:
;

;
; EQUATED SYMBOLS:
;
	DEF_RETRY_CNT = 10		; Default retry count for
					; Secondary Interlock fails
;
; OWN STORAGE:
;

;
; PSECT DECLARATIONS:
;
	.PSECT _LIB$CODE PIC, SHR, LONG, EXE, NOWRT




	.SBTTL LIB$REMQTI - Remove Entry from Queue Tail
;++
; FUNCTIONAL DESCRIPTION:
;
;	
;	One of four procedures which give higher level languages access
;	to the interlocked, self-relative queue instructions on the
;	VAX-11/780 and all future machines. This library procedure permits
;	the high level language user to have access to the REMQTI instruction.
;	With this procedure the user may remove a queue entry from the tail of 
;	a user specified queue.
;
;	If the entry is successfully removed from the tail of the queue and the
;	queue now contains one or more entries, a successful completion status
;	is returned. If the entry is removed from the tail of the queue and no
;	other entries are now in the queue, the execution is successful but a
;	unique status value is returned indicating that the queue now contains 
;	no entries (LIB$_ONEENTQUE).
;
;	These queue instructions are synchronized across all processors 
;	through the use of a secondary interlock. The user may specify a 
;	secondary interlock retry count. (The default retry count is 10.)
;	If the secondary interlock remains locked through retry-count retrys,
;	a secondary interlock status is returned to the user (LIB$_SECINTFAI)
;	and the entry is NOT successfully removed from the tail of the queue.
;
;	If an attempt is made to remove an entry from a queue which is already
;	empty, a unique unsuccessful completion status is returned to the
;	user (LIB$_QUEWASEMP).
;
; CALLING SEQUENCE:
;
;   ret-status.wlc.v = LIB$REMQTI (header.mq.r, addr.wl.r[, retry-cnt.rlu.r])
;
;
; INPUT PARAMETERS:
;
	HEADER = 4			; Address of queue header
	ADDR = 8			; Address where queue entry address
					; is to be returned to user
	RETRY_CNT = 12			; Address of retry count
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; FUNCTION VALUE:
;
;	SS$_NORMAL     - Entry removed from tail of queue, queue still contains
;		         one or more entries	
;	LIB$_ONEENTQUE - Successful completion of instruction (REMQTI).
;			 Entry removed from tail of queue, but queue is now
;			 empty.
;	LIB$_SECINTFAI - Secondary Interlock failed, queue is not modified.
;	LIB$_QUEWASEMP - Unsuccessful completion of instruction (REMQTI).
;			 The queue was empty before the instruction was
;			 executed.
;
; SIDE EFFECTS:
;
;	SS$_ROPRAND - reserved operand fault for:
;		    1.) either the entry or the header is at an address
;			that is not quad word aligned.
;		    2.) address of header equals address of entry.
;
;--

	.ENTRY  LIB$REMQTI , ^M< >	; Entry point

	MOVL	#DEF_RETRY_CNT, R0	; R0 = Default retry count of 10
	CMPB	(AP), #<RETRY_CNT/4>	; Check for optional retry cnt operand
	BLSSU	20$			; Branch if default count to be used
	MOVL	@RETRY_CNT(AP), R0	; R0 = User specified retry count
20$:
	REMQTI	@HEADER(AP), @ADDR(AP)	; Do the instruction (REMQTI)
	BCS	40$			; Branch if C = 1
					; (Secondary Interlock fail)
	BEQL	30$			; Branch if Z = 1
					; (Queue is now empty)
	MOVL	#SS$_NORMAL, R0		; Normal status - Entry removed from
					; tail of queue and one or more entries
					; are still in queue
	RET				; Successful return to user
30$:
	BVS	50$			; Branch if V = 1
					; (There was nothing to remove)
	MOVL	#LIB$_ONEENTQUE, R0	; Assume the queue is just now empty
					; Entry successfully removed from queue
	RET				; Successful return to user
40$:
	SOBGEQ	R0, 20$			; Loop until retry count is exhausted
	MOVL	#LIB$_SECINTFAI, R0	; Retry count is exhausted 
					; Secondary Interlock fail status
	RET				; Unsuccessful return to user
50$:
	MOVL	#LIB$_QUEWASEMP, R0	; Queue was already empty before
					; this queue instruction was executed
	RET				; Unsuccessful return to user
	.END
