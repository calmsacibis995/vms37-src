	.TITLE	LIB$GET_OPCODE - Get opcode from debugger
	.IDENT	/1-001/			; File: LIBGETOPC.MAR Edit: SBL1001

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY: General Utility Library
;
; ABSTRACT:
;
;	This module contains a procedure which asks the debugger if
;	a particular instruction has been modified by it.
;
; ENVIRONMENT: Runs at any access mode, AST Reentrant
;
; AUTHOR: Steven B. Lionel, CREATION DATE: 04-Dec-1981
;
; MODIFIED BY:
;
; 1-001	- Original. SBL 04-DEC-1981
;--

	.SBTTL	DECLARATIONS
;
; LIBRARY MACRO CALLS:
;
	$SSDEF			; SS$_ symbols
	$CHFDEF			; Condition handling facility symbols
;
; EXTERNAL DECLARATIONS:
;
	.DSABL	GBL		; Force all external symbols to be declared
	.EXTRN	LIB$SIGNAL	; Signal exception

;
; MACROS:
;
;	NONE
;
; EQUATED SYMBOLS:
;
;	NONE
;
; OWN STORAGE:
;
;	NONE
;
; PSECT DECLARATIONS:
;
	.PSECT _LIB$CODE PIC, USR, CON, REL, LCL, SHR, -
			EXE, RD, NOWRT, LONG


	.SBTTL	LIB$GET_OPCODE
;++
; FUNCTIONAL DESCRIPTION:
;
;	LIB$GET__OPCODE returns as its function value the opcode of
;	an instruction which may have been replaced by a debugger. 
;	For example, VAX-11 DEBUG replaces instructions for which
;	breakpoints have been set with BPT. It is designed to be
;	used from condition handlers which understand instruction
;	faults and which need to know the original contents of the
;	instruction stream. 
;	
;	LIB$GET__OPCODE is called implicitly from LIB$DECODE__FAULT,
;	LIB$EMULATE, LIB$FIXUP__FLT and LIB$SIM__TRAP.  Therefore,
;	it should only be used from fault handlers which do not
;	employ LIB$DECODE__FAULT. 
;	
;	LIB$GET__OPCODE determines the original opcode by signalling
;	the special exception "SS$__DBGOPCREQ, debugger opcode
;	request".  This success-severity exception is signalled with
;	two FAO arguments: the first is the PC of the instruction
;	for which the request is being made, the second is the
;	address of a 16-bit word where the original instruction is
;	to be placed.  If the debugger is being used, it has a
;	handler in the primary exception vector.  This handler
;	recognizes SS$__DBGOPCREQ as a request for the original
;	opcode for the indicated PC.  If the debugger has changed
;	the instruction at that PC, it stores the original opcode at
;	the location given as the second FAO argument. If the
;	debugger has modified only one byte of the instruction
;	stream, it will only write one byte to the destination. The
;	debugger's handler then returns SS$__CONTINUE, causing
;	execution to continue after the signal. 
;	
;	If no debugger is present, the error will be resignalled and
;	will be intercepted by a handler inside LIB$GET__OPCODE,
;	which will then return SS$__CONTINUE.  LIB$GET__OPCODE
;	copies the instruction to the destination location before
;	signalling so that the original instruction is returned if
;	not modified by the debugger. 
;
; CALLING SEQUENCE:
;
;	opcode.wwu.v = LIB$GET__OPCODE (instruction.rzi.r)
;
; FORMAL PARAMETERS:
;
	instruction = 4		; The PC of the instruction 
				; which is to be inquired about.
;
; IMPLICIT INPUTS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; ROUTINE VALUE:
;
;	The original instruction.
;
; SIDE EFFECTS:
;
;	NONE
;
;--

	.ENTRY	LIB$GET_OPCODE, ^M<>	; Entry point
	MOVL	instruction(AP), R0	; Get instruction PC
	MOVZBL	(R0), -(SP)		; Push instruction in stack
	CMPB	(SP), #^XFD		; 2-byte opcode?
	BLSSU	10$			; Skip if not
	MOVZWL	(R0), (SP)		; Get 2-byte instruction
10$:	PUSHL	SP			; Push address of saved instruction
	PUSHL	R0			; Push instruction PC
	PUSHL	#SS$_DBGOPCREQ		; Push "debugger opcode request" message
	MOVAB	B^HANDLER, (FP)		; Enable local handler
	CALLS	#3, G^LIB$SIGNAL	; Signal SS$_DBGOPCREQ
	MOVL	(SP)+, R0		; Get "original" opcode in R0
	RET				; Return to caller

;++
; Local handler which does a SS$_CONTINUE if SS$_DBGOPCREQ seen.
;--

HANDLER:
	.WORD	0	; Save nothing
	MOVZBL	#SS$_CONTINUE, R0	; Assume continue
	MOVL	CHF$L_SIGARGLST(AP), R1	; Get signal arguments list
	CMPL	CHF$L_SIG_NAME(R1), #SS$_DBGOPCREQ ; Is it SS$_DBGOPCREQ?
	BEQL	10$			; Skip if yes
	MOVZWL	#SS$_RESIGNAL, R0	; Resignal all other exceptions
10$:	RET				; Return to condition handling

	.END				; End of module LIB$GET_OPCODE
