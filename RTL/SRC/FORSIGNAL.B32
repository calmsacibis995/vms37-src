MODULE FOR$$SIGNAL (	! FORTRAN SIGNAL, SIGNAL_STOP and SIG_NO_LUB
	IDENT = '1-006'	! File: FORSIGNAL.B32	Edit: SBL1006
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  FORTRAN Support Library
!
! ABSTRACT:
!
!	FORTRAN support routines to convert FORTRAN error code
!	to 32-bit VAX error code, and SIGNAL or SIGNAL_STOP
!	extra information in format compatible for SYS$PUT_MESSAGE:
!
! ENVIRONMENT:  User Mode - AST re-entrant
!		Note: this module is both shared and non-shared.
!		If compatibility routine calls it, a non-shared copy is included.
!		Hence, JSB to FOR$$CB_GET instead of accessing OTS$$A_CUR_LUB directly.
!
! AUTHOR:  Thomas N. Hastings, CREATION DATE:  8-Aug-1977
!
! MODIFIED BY:
!
! 	Thomas N. Hastings, 8-Aug-1977: VERSION 0
!	Steven B. Lionel, VAX/VMS V2.0
! [Previous edit history removed.  SBL 10-Nov-1980]
! 1-001	- Update version number and copyright notice.  JBS 16-NOV-78
! 1-002	- Change LUB$B_LUN to LUB$W_LUN.  JBS 05-DEC-78
! 1-003	- Change REQUIRE file names from FOR... to OTS...  JBS 06-DEC-78
! 1-004 - Get filename from FAB if all else fails.  SBL 29-Aug-1979
! 1-005 - Add optional FAB argument to FOR$$SIG_NO_LUB.  SBL 7-OCT-1979
! 1-006 - Allow extra FAO arguments and conditions to be passed to
!	  FOR$$SIGNAL and FOR$$SIGNAL_STO.  Remove debugging macros, no longer
!	  used.  SBL 10-Nov-1980
!--

!
! LINKAGES:
!
REQUIRE 'RTLIN:OTSLNK';			! Define routine linkages

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
	FOR$$SIGNAL: NOVALUE,		! SIGNAL 32-bit error code and LUB data
	FOR$$SIGNAL_STO: NOVALUE,	! SIGNAL_STOP 32-bit error code and LUB data
	FOR$$SIG_FATINT: NOVALUE,	! SIGNAL_STOP OTS$_FATINTERR (FATAL
					! INTERNAL ERROR IN RUN-TIME LIBRAY)
	FOR$$SIG_DATCOR: NOVALUE,	! SIGNAL_STOP OTS$_INTDATCOR (INTERNAL
					! DATA CORRUPTED IN RUN-TIME LIBRARY)
	DO_SIGNAL: NOVALUE,		! Do the work for FOR$$SIGNAL, FOR$$SIGNAL_STO
	FOR$$SIG_NO_LUB: NOVALUE,	!  SIGNAL_STOP with no LUB setup.
	COND_VALUE;			! Return 32-bit condition value given FORTRAN error #

!
! INCLUDE FILES:
!
REQUIRE 'RTLML:FORERR';		! Define FORTRAN error numbers
REQUIRE 'RTLML:OTSISB';		! ISB definitions
REQUIRE 'RTLML:OTSLUB';		! LUB definitions
REQUIRE 'RTLIN:OTSMAC';		! FORTRAN macros
REQUIRE 'RTLIN:RTLPSECT';	! Define DELCARE_PSECTS macro
LIBRARY 'RTLSTARLE';		! STARLET library for macros and symbols
!
! MACROS:
!

!
! EQUATED SYMBOLS:
!
LITERAL
	K_NO_FAO_SIGARG = 3;	! No. of FAO args in signal arg list
				! used by SYS$PUT_MESSAGE
!
! PSECT DECLARATIONS:
!

	DECLARE_PSECTS (FOR);		! declare PSECTs for FOR$ facility

!
! OWN STORAGE:
!
!	NONE

!
! EXTERNAL REFERENCES:
!

!+
! MAINTENANCE NOTE:  Since this module is called by FORTRAN compatibility
! routines which are un-shared and the entry points are not vectored,
! a separate copy of this module is linked with the user program when
! the user calls a FORTRAN compatibility routine.  In order to prevent
! data truncation errors from the linker, all external references are
! of addressing mode general (rather than word displacement) even for
! the same PSECT.
!-


EXTERNAL ROUTINE
	FOR$$CB_GET: JSB_CB_GET NOVALUE ADDRESSING_MODE (GENERAL),	! Set CCB to adr. of current LUB/ISB/RAB
	FOR$$ERRSNS_SAV: NOVALUE ADDRESSING_MODE (GENERAL),	! Save error info for FOR$ERRSNS.
	LIB$SIGNAL: NOVALUE ADDRESSING_MODE(GENERAL),	! SIGNAL error and continue
	LIB$STOP: NOVALUE ADDRESSING_MODE(GENERAL);	! SIGNAL error and STOP

EXTERNAL LITERAL
	OTS$_FATINTERR: UNSIGNED (%BPVAL),	! Condition value FATAL INTERNAL ERROR IN RUN-TIME LIBRARY
	OTS$_INTDATCOR: UNSIGNED (%BPVAL);	! Condition value INTERNAL DATA CORRUPTED IN RUN-TIME LIBRARY


GLOBAL ROUTINE FOR$$SIGNAL 	! SIGNAL FORTRAN error and continue
	:NOVALUE =		! No value returned.
!++
! FUNCTIONAL DESCRIPTION:
!
!	Signals a FORTRAN-specific error whose 32-bit condition code or
!	small-integer error number is the first argument.  If other arguments
!	are present, they represent extra FAO arguments for the first
!	condition and/or secondary conditions to be signalled.  See DO_SIGNAL
!	for more information
!
! CALLING SEQUENCE:
!
!	CALL FOR$$SIGNAL (fort_err_no.rc.v [,fao_args_0.rz.v, ...]
!			  [,secondary_msg.rc.v [,sec_fao_cnt.rl.v[, sec_fao_args.rz.v,...])

! FORMAL PARAMETERS:
!
!	fort_err_no	- A 32-bit FOR$ code or the small integer which is the
!			  error number part of a FOR$ code.
!	fao_args_0	- FAO arguments for this message.  The three FAO arguments
!			  unit number, filename and user PC are always used; if
!			  fao_args_0 are specified, they come before the default
!			  arguments.
!	secondary_msg	- Secondary message to be signalled.  MUST be a 32-bit code.
!	sec_fao_cnt	- FAO count for secondary message
!	sec_fao_args	- FAO arguments for secondary message
!
! IMPLICIT INPUTS:
!
!	See DO_SIGNAL
!
! IMPLICIT OUTPUTS:
!
!	See DO_SIGNAL
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Converts FORTRAN error code to 32-bit VAX-11 error code and SIGNALs.
!	Saves error info in FOR$ERRSNS OWN storage.
!--

    BEGIN

    BUILTIN
	AP;

    DO_SIGNAL (.AP, LIB$SIGNAL);

    RETURN
    END;

GLOBAL ROUTINE FOR$$SIGNAL_STO 	! SIGNAL_STOP FORTRAN error and STOP
	:NOVALUE =		! No value returned.
!++
! FUNCTIONAL DESCRIPTION:
!
!	Convert FORTRAN error code number to 32-bit VAX-11 error code.
!	See description for FOR$$SIGNAL above which is identical,
!	except that FOR$$SIGNAL_STO calls LIB$STOP instead of LIB$SIGNAL.
!--

    BEGIN

    BUILTIN
	AP;

    DO_SIGNAL (.AP, LIB$STOP);

    RETURN
    END;

GLOBAL ROUTINE FOR$$SIG_FATINT		! SIGNAL_STOP OTS$_FATINTERR and STOP
	:NOVALUE =		! No value returned.
!++
! FUNCTIONAL DESCRIPTION:
!
!	SIGNAL_STOP OTS$_FATINTERR = FATAL INTERNAL ERROR IN RUN-TIME LIBRARY.
!	Note: the current LUB (if any) is ignored and no UNIT is printed.
!--

    BEGIN
    FOR$$SIG_NO_LUB (OTS$_FATINTERR);
    RETURN
    END;

GLOBAL ROUTINE FOR$$SIG_DATCOR		! SIGNAL_STOP OTS$_INTDATCOR and STOP
	:NOVALUE =		! No value returned.
!++
! FUNCTIONAL DESCRIPTION:
!
!	SIGNAL_STOP OTS$_INTDATCOR = INTERNAL DATA CORRUPTED IN RUN-TIME LIBRARY.
!	Note: the current LUB (if any) is ignored and no UNIT is printed.
!--

    BEGIN
    FOR$$SIG_NO_LUB (OTS$_INTDATCOR);
    RETURN
    END;

ROUTINE DO_SIGNAL (		! Internal routine to do work for FOR$$SIGNAL and FOR$$SIGNAL_STO
	SIGNAL_LIST_ARG,	! list of arguments to signal routine
	SIGNAL_ROUTINE)		! adr. of LIB$SIGNAL or LIB$STOP
	: NOVALUE =		! No value returned
!++
! FUNCTIONAL DESCRIPTION:
!
!	Converts error code number to 32-bit VAX-11 error code.
!	See description of FOR$$SIGNAL above.
!
! FORMAL PARAMETERS:
!
!	SIGNAL_LIST_ARG		Contents of AP at time of call to FOR$$SIGNAL or
!				FOR$$SIGNAL_STO
!	SIGNAL_ROUTINE		Adr. of LIB$SIGNAL or LIB$STOP
!
! IMPLICIT INPUTS:
!
!	OTS$$A_CUR_LUB		Adr. of current LUB/ISB/RAB
!				Obtained by JSB to FOR$$CB_GET.
!	{FAB,RAB}$L_STS		RMS error status
!	{FAB,RAB}$L_STV		RMS error value or operating system error code
!
! IMPLICIT OUTPUTS:
!
!	{FAB,RAB}$L_STS		RMS error status - set to 0
!	{FAB,RAB}$L_STV		RMS error value or operating system error code - set to 0
!	FORTRAN error #, RMS STS, RMS STV, logical unit number saved in
!				OWN storage in FOR$ERRSNS module for later
!				call by user to ERRSNS.
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Converts FORTRAN error code to 32-bit VAX-11 error code and SIGNALs.
!	Saves error info in FOR$ERRSNS OWN storage.
!--


    BEGIN

    GLOBAL REGISTER
	CCB = K_CCB_REG: REF BLOCK [,BYTE];	! Adr. of current LUB/ISB/RAB

    LOCAL
	FILE_NAME_DSC: DSC$DESCRIPTOR,	! File name descriptor for resultant file name
	RABORFAB: REF BLOCK[, BYTE],
	STS,				! RMS RAB or FAB error status
	STV,				! RMS RAB or FAB error status
	GETMSG_VALS: VECTOR [4, BYTE],	! Returned values from $GETMSG
	SIGNAL_LIST: VECTOR [20, LONG],	! Argument list to LIB$SIGNAL/LIB$STOP
	LIST_PTR: REF VECTOR [, LONG],	! Pointer into signal list
	ARGS_PTR: REF VECTOR [, LONG],	! pointer into SIGNAL_LIST_ARG
	ARG_LIST_END,			! Address of argument list end
	COND_VAL: BLOCK [4,BYTE];	! 32-bit VAX-11 error code

    MAP
	SIGNAL_LIST_ARG: REF VECTOR [, LONG];

    BUILTIN
	CALLG;

    FOR$$CB_GET ();			! Set CCB to adr. of current LUB/ISB/RAB

    !+
    ! Convert FORTRAN error code to 32-bit VAX-11 error code. 
    ! Conversion is done by copying FORTRAN error number to code field,
    ! setting the severity code to SEVERE,
    ! for all errors except FOR$_OUTCONERR (63='OUTPUT CONVERSION ERROR')
    ! which is set to ERROR instead so that image will continue
    ! by default since output field is flagged with ***s.
    ! All other continuable errors are signaled SEVERE so that user
    ! must take overt action in order to continue past the error.
    ! setting the facility code to FOR$K_FAC_NO,
    ! and setting the facility specific bit (STS$V_FAC_SP).
    !-

    COND_VAL = COND_VALUE (.SIGNAL_LIST_ARG [1]);

    !+
    ! Call $GETMSG to see how many FAO parameters it takes.
    !-

	BEGIN
	LOCAL
	    DSC: VECTOR [2, LONG],
	    LEN;
	DSC [0] = 0;	! Null string descriptor
	DSC [1] = LEN;
	$GETMSG (
	    MSGID = .COND_VAL,
	    MSGLEN = LEN,
	    BUFADR = DSC,
	    FLAGS = 0,
	    OUTADR = GETMSG_VALS);
	END;

    !+
    ! Compute total number of signal arguments.
    !-

    SIGNAL_LIST [0] = (.SIGNAL_LIST_ARG [0])<0,8,0> + 6;
    ARG_LIST_END = SIGNAL_LIST_ARG [0] + ((.SIGNAL_LIST_ARG [0])<0,8,0> * %UPVAL);

    !+
    ! Fill in primary condition message.
    !-

    SIGNAL_LIST [1] = .COND_VAL;
    SIGNAL_LIST [2] = .GETMSG_VALS [1];	! Number of FAO parameters

    LIST_PTR = SIGNAL_LIST [3];
    ARGS_PTR = SIGNAL_LIST_ARG [2];

    !+
    ! Copy extra FAO arguments, if any.
    !-

    INCR I FROM 4 TO .SIGNAL_LIST [2] DO
	COPY_LONG_A (ARGS_PTR, LIST_PTR);

    !+
    ! Get RMS error status from RAB or if not error there from FAB (if any).
    ! Then set error status longwords to 0 so will not be found again.
    ! Note: this code depends on the fact that FAB$L_STS/STV have the same offsets
    ! as RAB$L_STS/STV.
    !-

    RABORFAB = .CCB;
    IF (.CCB[RAB$L_STS] OR .CCB[RAB$L_STS] EQL 0) AND .CCB[LUB$A_FAB] NEQA 0
    THEN
	RABORFAB = .CCB[LUB$A_FAB];

    IF NOT .RABORFAB[RAB$L_STS]
    THEN
	BEGIN
	STS = .RABORFAB[RAB$L_STS];
	STV = .RABORFAB[RAB$L_STV];
	END

    ELSE		! Neither FAB nor RAB have errors, report 0 for now \\\\
	STS = STV = 0;

    RABORFAB[RAB$L_STS] = 0;
    RABORFAB[RAB$L_STV] = 0;

    !+
    ! Save FORTRAN error number, RMS STS, RMS STV, logical unit number and VAX-11 condition value
    !-

    FOR$$ERRSNS_SAV (.COND_VAL [STS$V_CODE], .STS, .STV, .CCB[LUB$W_LUN], .COND_VAL);

    !+
    ! Set up resultant file name descriptor that gets put in signal arg list.
    ! If no resultant name string is around, use the FAB filename.
    !-

    FILE_NAME_DSC[DSC$W_LENGTH] = .CCB[LUB$B_RSL];
    FILE_NAME_DSC[DSC$B_DTYPE] = FILE_NAME_DSC[DSC$B_CLASS] = 0;
    FILE_NAME_DSC[DSC$A_POINTER] =
	( IF .CCB[LUB$B_RSL] EQLU 0
	  THEN
	      0
	  ELSE
	      .CCB[LUB$A_RSN]);
    IF .FILE_NAME_DSC[DSC$W_LENGTH] EQL 0 AND .CCB [LUB$A_FAB] NEQ 0
    THEN
	BEGIN
	LOCAL
	    FAB : REF BLOCK [,BYTE];
	FAB = .CCB [LUB$A_FAB];
	FILE_NAME_DSC[DSC$W_LENGTH] = .FAB [FAB$B_FNS];
	FILE_NAME_DSC[DSC$A_POINTER] = .FAB [FAB$L_FNA];
	END;

    !+
    ! Insert the three default FAO arguments plus the STS and STV.
    !-

    LIST_PTR [0] = .CCB [LUB$W_LUN];
    LIST_PTR [1] = FILE_NAME_DSC;
    LIST_PTR [2] = 0;			! For user PC
    LIST_PTR [3] = .STS;
    LIST_PTR [4] = .STV;
    LIST_PTR = LIST_PTR [5];
    
    WHILE .ARGS_PTR LEQ .ARG_LIST_END DO
	COPY_LONG_A (ARGS_PTR, LIST_PTR);

    !+
    ! Call LIB$STOP to STOP the error or LIB$SIGNAL to SIGNAL the error.
    !-

    CALLG (SIGNAL_LIST, .SIGNAL_ROUTINE);

    !+
    ! Return
    !-

    RETURN
    END;			! End of FOR$$SIGNAL_STO routine

GLOBAL ROUTINE FOR$$SIG_NO_LUB (	! SIGNAL_STOP FORTRAN error and STOP
	FORT_ERR_NO,		! FORTRAN error code 0:120 or 32-bit cond value
				! VAX-11 error code
	FORT_LUN,		! Optional FORTRAN logical unit number
	FAB)			! Optional FAB address
	:NOVALUE =		! No value returned.
!++
! FUNCTIONAL DESCRIPTION:
!
!	Convert FORTRAN error code number to 32-bit VAX-11 error code.
!	The following SIGNAL_STOP arguments are obtained from the
!	argument list only since no LUB/ISB/RAB yet:
!
!		VAX-11 error code: 
!			STS$V_SEVERITY = STS$K_SEVERE
!			STS$V_CODE = FORTRAN error number
!			STS$V_FAC_SP = 1 (facility specific error messages
!			STS$V_FAC_NO = FORTRAN facility no. (FOR$K_FAC_NO)
!		3 = No. of following FAO arguments
!		FORTRAN unit number if present or zero
!		File name string descriptor address or 0 if no FAB
!		User PC of call to library (set to 0 here, rewritten by handler before RESIGNAL)
!		RMS error code from FAB if present
!		System error code from FAB if present
!
! FORMAL PARAMETERS:
!
!	FORT_ERR_NO.rlu.v	FORTRAN error code (0:120) or 32-bit cond value
!				32-bit VAX-11 error code with LH already set.
!	[FORT_LUN.rlu.v]	Optional unit number, 0 used if not present
!	[FAB.rbu.ra]		Address of FAB if present
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Converts FORTRAN error code to 32-bit VAX-11 error code and SIGNAL_STOPs.
!--

    BEGIN
    LOCAL
	VAX_11_COND_VAL: BLOCK[4,BYTE],	! 32-bit VAX-11 error code
	NAME_DSC : DSC$DESCRIPTOR,	! File name descriptor
	STS,				! RMS error status
	STV;				! System error status
    MAP
	FORT_ERR_NO: BLOCK[,BYTE],	! MAKE 32-bit VAX-11 error code
	FAB : REF BLOCK [,BYTE];	! FAB is address of FAB
    BUILTIN
	ACTUALCOUNT;				! Actual no. of parameters

    !+
    ! Convert FORTRAN error code to 32-bit VAX-11 error code unless
    ! already converted by the caller.  Conversion is done
    ! by copying FORTRAN error number to code field,
    ! setting the severity code to SEVERE,
    ! setting the facility code to FOR$K_FAC_NO,
    ! and setting the facility specific bit (STS$V_FAC_SP).
    !-

    VAX_11_COND_VAL = COND_VALUE (.FORT_ERR_NO);

    !+
    ! If FAB argument is present,  retrieve RMS and SYSTEM error codes.
    !-

    IF ACTUALCOUNT () GTRU 2
    THEN
	BEGIN
	STS = (IF .FAB [FAB$L_STS] THEN 0 ELSE .FAB [FAB$L_STS]);
	STV = (IF .FAB [FAB$L_STV] THEN 0 ELSE .FAB [FAB$L_STV]);
	END
    ELSE
	BEGIN
	STS = 0;
	STV = 0;
	END;

    !+
    ! Save FORTRAN error #, RMS STS, RMS STV, logical unit number, and VAX-11 condition value.
    ! If FORT_LUN not present, use 0 (e.g., INVALID ARG TO FORTRAN I/O SYSTEM)
    !-

    FOR$$ERRSNS_SAV (.FORT_ERR_NO, .STS, .STV,
	(IF ACTUALCOUNT () GTRU 1 THEN .FORT_LUN ELSE 0), .VAX_11_COND_VAL);

    !+
    ! Set up file name descriptor
    !-
    NAME_DSC [DSC$B_CLASS] = DSC$K_CLASS_S;
    NAME_DSC [DSC$B_DTYPE] = DSC$K_DTYPE_T;
    IF ACTUALCOUNT () GTRU 2
    THEN
	BEGIN
	IF .FAB [FAB$L_NAM] NEQ 0
	THEN
	    BEGIN
	    LOCAL
		NAM : REF BLOCK [,BYTE];	! NAM block
	    NAM = .FAB [FAB$L_NAM];
	    IF .NAM [NAM$B_RSL] NEQ 0
	    THEN
		BEGIN
		NAME_DSC [DSC$W_LENGTH] = .NAM [NAM$B_RSL];
		NAME_DSC [DSC$A_POINTER] = .NAM [NAM$L_RSA];
		END
	    ELSE IF .NAM [NAM$B_ESL] NEQ 0
	    THEN
		BEGIN
		NAME_DSC [DSC$W_LENGTH] = .NAM [NAM$B_ESL];
		NAME_DSC [DSC$A_POINTER] = .NAM [NAM$L_ESA];
		END
	    ELSE
		BEGIN
		NAME_DSC [DSC$W_LENGTH] = .FAB [FAB$B_FNS];
		NAME_DSC [DSC$A_POINTER] = .FAB [FAB$L_FNA];
		END;
	    END
	ELSE
	    BEGIN
	    NAME_DSC [DSC$W_LENGTH] = .FAB [FAB$B_FNS];
	    NAME_DSC [DSC$A_POINTER] = .FAB [FAB$L_FNA];
	    END;
	END
    ELSE
	BEGIN
	NAME_DSC [DSC$W_LENGTH] = 0;
	NAME_DSC [DSC$A_POINTER] = 0;
	END;

    !+
    ! Call LIB$STOP to SIGNAL_STOP the error
    ! Order of args is same as defined in FPAR.MDL for use with SYS$PUT_MESSAGE
    !-

    LIB$STOP (
	.VAX_11_COND_VAL,	! 32-bit VAX-11 error code
	K_NO_FAO_SIGARG,	! no. of FAO arguments following in FORTRAN error message
	.FORT_LUN,		! FORTRAN logical unit number
	NAME_DSC,		! File name descriptor
	0,			! Leave room for user PC to be filled in
				! by FORTRAN specific handler established on user call
	.STS,			! RMS error code
	.STV);			! SYSTEM error code

    !+
    ! Return
    !-

    RETURN
    END;			! End of FOR$$SIG_NO_LUB routine

ROUTINE COND_VALUE (	! Internal routine to convert from FORTRAN error # 
				! to VAX-11 condition value
	FORT_ERR_NO)		! Value of FORTRAN error # (0:120) or 32-bit cond value
	 =			! Value is 32-bit VAX-11 condition value
!++
! FUNCTIONAL DESCRIPTION:
!
!	Converts from FORTRAN error number to 32-bit VAX-11 condition value
!	complete with proper severity and all other fields set.
!	If already a 32-bit condition value (ie GTRU FOR$K_ERR_MAX),
!	no converions is done.  Instead the FORTRAN error # is FOR$K_NOTFORSPE
!	which has a value of 1 and indicates a non-FORTRAN specific error.
!
! FORMAL PARAMETERS:
!
!	FORT_ERR_NO		! Value of FORTRAN error # (0:120) or 32-bit cond value
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	32-bit VAX-11 condition value.
!
! SIDE EFFECTS:
!
!	NONE
!--

    BEGIN
    MAP
	FORT_ERR_NO: BLOCK [4, BYTE];		! Could be a condition value
    LOCAL
	VAX_11_COND_VAL: BLOCK [4, BYTE];	! 32-bit VAX-11 error condition value

    !+
    ! Convert FORTRAN error code to 32-bit VAX-11 error code, unless already
    ! a 32-bit condition value (some other facility than FOR$ in LH).
    ! Conversion is done by copying FORTRAN error number to code field,
    ! setting the severity code to SEVERE, except error 63 (OUTPUT CONVERIOSN ERROR)
    ! in which case the severity is set to ERROR.
    ! Thus the user must do something explicit in order to continue
    ! for all errors, except 63 (but it has ***s so error flagged).
    ! Therefore the user will not inadverantly use data which had errors in it.
    ! setting the facility code to FOR$K_FAC_NO,
    ! and setting the facility specific bit (STS$V_FAC_SP).
    !-

    IF .FORT_ERR_NO LEQU FOR$K_MAX_ERR
    THEN
	BEGIN
	VAX_11_COND_VAL = 0;
	VAX_11_COND_VAL[STS$V_SEVERITY] = (IF .FORT_ERR_NO EQL FOR$K_OUTCONERR 
					  THEN 
						STS$K_ERROR 
					  ELSE 
						STS$K_SEVERE);	
	VAX_11_COND_VAL[STS$V_CODE] = .FORT_ERR_NO;
	VAX_11_COND_VAL[STS$V_FAC_SP] = 1;
	VAX_11_COND_VAL[STS$V_FAC_NO] = FOR$K_FAC_NO;
	END
    ELSE
	VAX_11_COND_VAL = .FORT_ERR_NO;

    RETURN .VAX_11_COND_VAL
    END;			! End of COND_VALUE routine
END				! End of module
ELUDOM
