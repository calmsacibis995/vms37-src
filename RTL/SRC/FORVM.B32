MODULE FOR$$VM (	! Internal FORTRAM Virtual memory allocation/deallocation
	IDENT = '1-001'	! File: FORVM.B32
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY:FORTRAN support library
!
! ABSTRACT:  

!	Dynamic virtual memory allocation and deallocation.
!	FORTRAN interface with LIB$GET_VM and LIB$FREE_VM
!	resourec allocation procedures.
!
! ENVIRONMENT: User access mode; mixture of AST level or not.
!	       This module is both shared and non-shared.  Hence all
!	       EXTERNAL references are of type GENERAL to prevent data truncation errors
!	       when linking with the non-shared FORTRAN compatibility routines.
!
! AUTHOR:	T. Hastings, CREATION DATE: 4-Dec-77; Version 01
!
! MODIFIED BY:
!
! 01	- original 
! 0-2	- Use FOR$$SIG_FATINT.  TNH 5-Dec-77
! 0-3	- Don't clear memory.  TNH 8-Dec-77
! 0-04	- Change REQUIRE files for VAX system build.  DGP 28-Apr-78
! 0-05	- Add optional second arg (FCB only).  TNH 22-MAY-78
! 0-06	- Use FOR$$SIG_DATCOR instead of FOR$$SIG_FATINT.  TNH 10-June-78
! 0-07	- Make all external references GENERAL, since this module
!	- is both shared and non-shared.  TNH 3-Aug-78
! 0-08	- Change file name to FORVM.B32, and change the names of
!	   the REQUIRE files similarly.  JBS 14-NOV-78
! 1-001	- Update version number and copyright notice.  JBS 16-NOV-78
!--

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
	FOR$$GET_VM,		! Allocate virtual memory - interface
	FOR$$FREE_VM: NOVALUE;	! Deallocate virtual memory - interface


!
! INCLUDE FILES:
!

	REQUIRE 'RTLML:FORERR';		! FORTRAN error numbers
	REQUIRE 'RTLIN:RTLPSECT';	! Define DECLARE_PSECTS macro

!
! MACROS:
!
!	NONE
!
! EQUATED SYSMBOLS:
!


!
! PSECT DECLARATIONS:
!

	DECLARE_PSECTS (FOR);	! declare PSECTs for FOR$ facility

!
! OWN STORAGE:
!

! EXTERNAL REFERENCES:
!
EXTERNAL ROUTINE

!+
! MAINTENANCE NOTE:  Since this module is called by FORTRAN compatibility
! routines which are un-shared and the entry points are not vectored,
! a separate copy of this module is linked with the user program when
! the user calls a FORTRAN compatibility routine.  In order to prevent
! data truncation errors from the linker, all external references are
! of addressing mode general (rather than word displacement) even for
! the same PSECT.
!-

	FOR$$SIGNAL_STO: ADDRESSING_MODE (GENERAL) NOVALUE,	! FORTRAN SIGNAL_STOP for current unit
	FOR$$SIG_DATCOR: ADDRESSING_MODE (GENERAL) NOVALUE,	! FORTRAN SIGNAL_STOP OTS$_INTDATCOR
								! INTERNAL DATA CORRUPTED IN RUN-TIME LIBRARY
	FOR$$SIG_NO_LUB: ADDRESSING_MODE (GENERAL) NOVALUE,	! FORTRAN SIGNAL_STOP when no current LUB/ISB/RAB allocated
	LIB$GET_VM: ADDRESSING_MODE (GENERAL),	! LIBRARY allocate virtual memory
	LIB$FREE_VM: ADDRESSING_MODE (GENERAL); ! LIBRARY deallocate virtual memory


GLOBAL ROUTINE FOR$$GET_VM (	! Allocate dynamic virtual memory
	NUM_BYTES,		! longword size in bytes
	LOGICAL_UNIT)		! optional logical unit (if LUB/ISB/RAB not allocated)
	=

!++
! FUNCTIONAL DESCRIPTION:
!
!       Allocates n virtually contiguous bytes at an arbitrary  place  in
!       the  program  region and returns the virtual address of the first byte.
!	See description of library LIB$GET_VM for details.
!	This procedure is provided only for convenience to FORTRAN support library.
!	It checks for errors and SIGNAL_STOPs any.
!	It does not clear core for speed.
!  
!  CALLING SEQUENCE:
!  
!	ALLOC_ADR.wa.v = FOR$$GET_VM (NUM_BYTES.rlu.v [, logical_unit.rlu.v])
!  
!  INPUT PARAMETERS:
!  
!       num_bytes is  an  unsigned   longword   integer value
!                 specifying  the number of virtually contiguous bytes to
!                 be  allocated.   Sufficient  pages  are  allocated   to
!                 satisfy  the  request.  however, the program should not
!                 reference  before  the  first  byte  address   assigned
!                 (base_address)    beyond   the   last   byte   assigned
!                 (base_adr+num_bytes - 1) since it may  be  assigned  to
!                 another procedure.
!  
!	[logical_unit.rlu.v] Optional logical unit number.  Used only if
!			an error occurs and LUB/ISB/RAB is not already allocated.
!
!  OUTPUT PARAMETERS:
!  
!	None.
!  
!  IMPLICIT INPUTS:
!  
!	OTS$$A_CUR_LUB contains the address of the current LUB/ISB/RAB
!	for which any errors detected will be signaled.
!	See also LIB$GET_VM.
!  
!  IMPLICIT OUTPUTS:
!  
!	See LIB$GET_VM.
!
!  FUNCTION VALUE:
!
!	The address of the block allocated is returned
!	as the function value.
!
!  SIDE EFFECTS:
!
!	The following errors are SIGNAL_STOPped:
!
!       FOR$_INSVIRMEM indicates 'INSUFFICIENT VIRTUAL MEMORY' when the
!       program
!       region was attempted to be expanded.
!       OTS$_INTDATCOR indicates 'BAD BLOCK SIZE either 0 oor
!       larger than FOR$K_MXVMBLK.
!       No partial assignment is made.
!       An appropriate number of virtual byes are removed from the  image
!       free  memory  list.   If needed the program region is expanded by
!       calling the SYS$EXPREG system service.  if too large  a  size  is
!       requested or the program region could not be expended as needed.
!--

    BEGIN
    BUILTIN
	ACTUALCOUNT;
    LOCAL
	TEMP_ADR;	! Adr. of block allocated
    IF NOT LIB$GET_VM (NUM_BYTES, TEMP_ADR)
    THEN 
	BEGIN
	IF ACTUALCOUNT() GTRU 1
	THEN
	    FOR$$SIG_NO_LUB (FOR$K_INSVIRMEM, .LOGICAL_UNIT)
	ELSE
	    FOR$$SIGNAL_STO (FOR$K_INSVIRMEM)
	END;
    RETURN .TEMP_ADR;
    END;		!  end of FOR$GET_VM routine

GLOBAL ROUTINE FOR$$FREE_VM (		! Internal FORTRAN deallocate virtual memory
		NUM_BYTES,		! size in bytes
		BASE_ADR)		! Adr. of block to be deallocated
	: NOVALUE	=

!++
!  FUNCTIONAL DESCRIPTION:
!  
!       Deallocates  n  virtually  contiguous  bytes  starting   at   the
!       specified   virtual   address.   The  number  of  bytes  actually
!       allocated is rouned up so that the smallest number of whole  quad
!       words  are  de-allocated.  Numerous error checks are made to make
!       sure that the block being returned is a legimate free area.
!  
!  CALLING SEQUENCE:
!  
!       CALL FOR$$FREE_VM(num_bytes.rlu.v, base_adr.ra.v)
!  
!  INPUT PARAMETERS:
!  
!       num_bytes is  an  unsigned   integer
!                 specifying  the number of virtually contiguous bytes to
!                 be deallocated.
!  
!       base_adr  is the address of
!                 the first byte to be deallocated.
!  
!  OUTPUT PARAMETERS:
!  
!  None.
!  
!  IMPLICIT INPUTS
!  
!	OTS$$A_CUR_LUB contains the address of the current LUB/ISB/RAB
!	for which the storage is being returned.  Any errors
!	are signaled on the logical unit.
!  
!  IMPLICIT OUTPUTS
!  
!       The pages are deallocated by calling $DEALTVA.   Then  the  pages
!       are  marked  as  available  in  the  OWN  storage  maintained  by
!       LIB$GET_VM.
!  
!  COMPLETION STATUS:
!  
!	None.
!
!  SIDE EFFECTS:
!
!	Any errors are signal_stopped on the current logical unit.
!       OTS$_INTDATCOR  indicates BAD BLOCK ADDRESS
!  
!     PUTS the indicated block back on the image free storage list.
!--

    BEGIN

    !+
    ! Deallocate virtual memory,  SIGNAL_STOP OTS$_INTDATCOR if error
    !-

    IF NOT LIB$FREE_VM (NUM_BYTES, BASE_ADR) THEN FOR$$SIG_DATCOR ();
    END;
END
ELUDOM
