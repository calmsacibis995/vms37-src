MODULE LIB$SCOPY (

		IDENT = '1-016'	! File: LIBSCOPY.B32	Edit: RKR1016

		 ) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY: General library: string handling
!
! ABSTRACT:
!
!	This module contains routines to allocate and deallocate
!	strings.  Also included are the basic string copying routines.
!
! ENVIRONMENT:  VAX-11 User Mode
!
! ORIGINAL AUTHOR: Tomas N. Hastings, 08-OCT-1977
! REWRITTEN BY: John Sauter, 14-MAR-1979
!
! MODIFIED BY:
!
! 0-09  - Pass by-reference.  TNH 19-DEC-77
! 0-10	- Change order of arguments to conform to manual.  JMT 5-Mar-78
! 0-11	- Fix typo in PIC case table.  DGP 29-Jun-78
! 0-12	- Change JSB entry point names to DX6.  TNH 5-July-78
! 0-14	- Add dynamic descriptors.  TNH 5-July-78
! 0-28	- Remove entry points not in manual.  TNH 1-Aug-78
! 0-29	- Make REMQUE be PIC.  TNH 2-Aug-78
! 0-31	- And INSQUE be PIC.  TNH 2-Aug-78
! 0-32	- Compute effective adr before REMQUE to be PIC.  TNH 2-Aug-78
! 1-001	- Update version number and copyright notice.  JBS 16-NOV-78
! 1-002	- Add "_" to the PSECT directives.  JBS 21-DEC-78
! 1-003	- Make external references use 32-bit addresses. JBS 11-FEB-1979
! 1-004	- Fix allocation of 1- and 2-character strings so that they
!	   don't expand the region unconditionally, but instead use
!	   an 8-character string.  JBS 11-FEB-1979
! 1-005	- Edit 004 introduced a bug: strings just too large for the
!	   queues try to allocate from them.  Fix it.  JBS 18-FEB-1979
! 1-006	- Do a total rewrite: these routines are now maintained
!	   just for compatability: they call the STR facility.
!	   JBS 20-MAR-1979
! 1-007	- Call the string facility using input scalars by reference.
!	   JBS 18-MAY-1979
! 1-008	- Change calls to STR$COPY.  JBS 16-JUL-1979
! 1-009 - LIB$SCOPY_DXDX was incorrectly checking for truncation.
!	  DGP 09-Oct-79
! 1-010 - Make compatible with release 1 return codes.  RW  21-Jan-1980
! 1-011 - Reorganized string routines to all find their way to
!	  LIB$SCOPY_R_DX6.  Introduce new classes of descriptors
!	  to be recognized by string copying routines.
!	  Change LIB$SFREEN_DD6 to accept count by immediate value,
!	  they way its external documentation says it should operate.
!	  RKR 27-MAR-1981
! 1-012 - Correct some comments to more accurately reflect actual code.
!	  RKR 24-AUG-1981
! 1-013 - Correct which error codes are returned in LIB$SCOPY_R_DX6.
!	  RKR 4-SEP-1981.
! 1-014 - Return an error if the caller attempts to deallocate a non-dynamic
!	  string.  SBL 9-Sep-1981
! 1-015 - Add special-case code to process string descriptors that
!	  "read" like fixed string descriptors.  RKR 7-OCT-1981.
! 1-016 - Change code in LIB$SGET1_DD and LIB$SGET1_DD_R6 so that
!	  if either is called with a descriptor that is not CLASS_D,
!	  no problems will result -- i.e., replace validity check for
!	  CLASS_D with code to force CLASS_D.  This is what occurred
!	  in VMS RTL V2.x of these routines.  Functionality was
!	  inadvertently changed in producing Version 3 routines.
!	  In LIB$SCOPY_DXDX6, don't use $STR$GET_LEN_ADDR macro, since
!	  this macro uses STR$ANALYZE_SDESC_R1 -- don't want the
!	  signaling routine used by a LIB$ routine.
!	  Redirect jsb's from LIB$ANALYZE_SDESC_R3 to
!	  LIB$ANALZYE_SDESC_R2.
!	  Remove checks on contents of desciptors other than insuring
!	  that DSC$A_ARSIZE is < 65K for class_A and class_NCA.
!	  RKR 18-NOV-1981.
!--

!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE 
		(EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!
REQUIRE 'RTLIN:STRLNK';		! Linkages

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    LIB$SGET1_DD,				! Allocate a string
    LIB$SGET1_DD_R6 : STRING_JSB,		! (JSB entry point)
    LIB$SFREE1_DD,				! Deallocate a string
    LIB$SFREE1_DD6 : STRING_JSB,		! (JSB entry point)
    LIB$SFREEN_DD,				! Deallocate N strings
    LIB$SFREEN_DD6 : STRING_JSB,		! (JSB entry point)
    LIB$SCOPY_DXDX,				! Copy a string by 
						! descriptor
    LIB$SCOPY_DXDX6 : STRING_JSB,		! (JSB entry point)
    LIB$SCOPY_R_DX,				! Copy a string by 
						! reference
    LIB$SCOPY_R_DX6 : STRING_JSB;		! (JSB entry point)

!
! INCLUDE FILES:
!

REQUIRE 'RTLIN:STRMACROS';	! String macros
REQUIRE 'RTLIN:RTLPSECT';	! Macros for defining psects

LIBRARY 'RTLSTARLE';		! System symbols

!
! MACROS: NONE
!
!
! EQUATED SYMBOLS:
!
LITERAL
	MAX_SIZE = 65535;	! Maximum size string

!
! PSECTS:
!
DECLARE_PSECTS (LIB);		! Declare psects for LIB$ facility
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL LITERAL
    STR$_NORMAL,		! (Used in macro $STR$DEALLOCATE)
    LIB$_FATERRLIB,		! Fatal error in the library
    LIB$_INSVIRMEM,		! Insufficient virtual memory
    LIB$_INVSTRDES,		! Invalid string descriptor
    LIB$_STRTRU;		! String truncated

EXTERNAL ROUTINE
    LIB$ANALYZE_SDESC_R2 : LIB$ANALYZE_SDESC_JSB_LINK ;

GLOBAL ROUTINE LIB$SGET1_DD (		! Allocate a dynamic string

	LEN,				! Number of bytes to allocate
	DESCRIP				! Descriptor to allocate into
			    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Allocate a string.  LEN bytes are allocated to DESCRIP, which
!	is assumed to be a dynamic descriptor.  If the descriptor
!	already has storage allocated to it, but not enough, the old
!	storage is deallocated.
!
! FORMAL PARAMETERS:
!
!	LEN.rwu.r	The number of bytes to allocate.
!	DESCRIP.wqu.r	The descriptor.  The DSC$B_DTYPE field is not
!			touched.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION CODES:
!
!	SS$_NORMAL	All is OK.
!	LIB$_INSVIRMEM	There was not enough virtual memory to allocate
!			the string.
!	LIB$_FATERRLIB	Fatal error in the library
!
! SIDE EFFECTS:
!
!	May deallocate the descriptor's storage and allocate new
!	storage for it.
!
!--

    BEGIN

    MAP
	DESCRIP : REF BLOCK [ , BYTE];

!+
! Deallocate old space (if necesaary) and allocate new space.
!-
    RETURN LIB$SGET1_DD_R6 ((..LEN AND %X'FFFF'), .DESCRIP) ;
    END;					! end of LIB$SGET1_DD

GLOBAL ROUTINE LIB$SGET1_DD_R6 (	! Allocate a dynamic string

	LEN,				! Number of bytes to allocate
	DESCRIP				! Descriptor to allocate into
			       ) : STRING_JSB =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Allocate a string.  LEN bytes are allocated to DESCRIP, which
!	is assumed to be a dynamic descriptor.  If the descriptor
!	already has storage allocated to it, but not enough, the old
!	storage is deallocated.
!
! FORMAL PARAMETERS:
!
!	LEN.rwu.v	The number of bytes to allocate.
!	DESCRIP.wqu.r	The descriptor.  The DSC$B_DTYPE field is not
!			touched.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION CODES:
!
!	SS$_NORMAL	All is OK.
!	LIB$_INSVIRMEM	There was not enough virtual memory to allocate
!			the string.
!	LIB$_FATERRLIB	Fatal error in the library
!
! SIDE EFFECTS:
!
!	May deallocate the descriptor's storage and allocate new
!	storage for it.
!
!--

    BEGIN
    LOCAL
	RETURN_STATUS ;

    MAP
	DESCRIP : REF BLOCK [, BYTE] ;

!+
! Make the descriptor be a dynamic string.
!-
    DESCRIP [DSC$B_CLASS] = DSC$K_CLASS_D;

    RETURN_STATUS = SS$_NORMAL ;	! assume success

!+
! see if current space needs to be deallocated and reallocated
!-
    IF ( $STR$NEED_ALLOC (( .LEN AND %X'FFFF'),
			    $STR$DYN_AL_LEN (DESCRIP)))
    THEN
	BEGIN
	!
	! give back old space
	!
	IF ( RETURN_STATUS = $STR$DEALLOCATE (DESCRIP))
	THEN
	    !
	    ! and get new space
	    !
	    RETURN_STATUS = $STR$ALLOCATE (( .LEN AND %X'FFFF'),
					     DESCRIP ) ;
	END

    ELSE

	! 
	! old space can be reused
	!
	$STR$LENGTH (DESCRIP) = (.LEN AND %X'FFFF') ;
!+
! at this point, RETURN_STATUS contains one of:
!	A.  originally assigned status i.e., SS$_NORMAL
!	B.  failure status from $STR$DEALLOCATE
!	C.  status from $STR$ALLOCATE
!-

    RETURN .RETURN_STATUS ;
    END ;			! of routine LIB$SGET1_DD_R6

GLOBAL ROUTINE LIB$SFREE1_DD (		! Deallocate a dynamic string

	DESCRIP				! The descriptor to deallocate
			     ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Deallocate a string.  The string is assumed to by dynamic.
!
! FORMAL PARAMETERS:
!
!	DESCRIP.wqu.r	The descriptor of the string to deallocate.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION CODES:
!
!	SS$_NORMAL	All is OK.
!	LIB$_INVSTRDES	Invalid string descriptor
!	LIB$_FATERRLIB	Fatal error in the library
!
! SIDE EFFECTS:
!
!	May deallocate virtual storage.
!
!--

    BEGIN


!+
! Free the string
!-
    RETURN LIB$SFREE1_DD6 (.DESCRIP) ;
    END;					! end of LIB$SFREE1_DD

GLOBAL ROUTINE LIB$SFREE1_DD6 (		! Deallocate a dynamic string

	DESCRIP				! The descriptor to deallocate

			      ) : STRING_JSB =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Deallocate a string.  The string is assumed to by dynamic.
!
! FORMAL PARAMETERS:
!
!	DESCRIP.wqu.r	The descriptor of the string to deallocate.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION CODES:
!
!	SS$_NORMAL	All is OK.
!	LIB$_INVSTRDES  Invalid string descriptor
!	LIB$_FATERRLIB	Fatal error in the library
!
! SIDE EFFECTS:
!
!	May deallocate virtual storage.
!
!--

    BEGIN

    LOCAL
	RETURN_STATUS ;

    MAP
	DESCRIP : REF BLOCK [ , BYTE] ;

    !
    ! see if this is a dynamic descriptor
    !
    IF .DESCRIP [DSC$B_CLASS] EQL DSC$K_CLASS_D
    THEN
	BEGIN
	!
	! deallocate the string
	!
	IF (RETURN_STATUS = $STR$DEALLOCATE (DESCRIP))
	THEN
	    BEGIN
	    !
	    ! Make sure the pointer and length field are zero, so the
	    ! user is less likely to mistakenly use an old address.
	    ! Also, if he calls to reallocate without reinitalizing,
	    ! he will not get confused.
	    !
	    DESCRIP [DSC$W_LENGTH]  = 0 ;
	    DESCRIP [DSC$A_POINTER] = 0 ;
	    END;
	END 
	!
	! at this point, RETURN_STATUS contains the status returned
	! by $STR$DEALLOCATE
	!
    ELSE
	!
	! not a dynamic descriptor
	!

	RETURN_STATUS = LIB$_INVSTRDES ;

    RETURN .RETURN_STATUS

    END ;			! of routine LIB$SFREE1_DD6

GLOBAL ROUTINE LIB$SFREEN_DD (		! Deallocate dynamic strings

	NUM_DESC,			! Number of descriptors
	DESC_PTR			! First descriptor to deallocate
			      ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Deallocate a number of strings.  The strings are all assumed
!	to be dynamic.
!
! FORMAL PARAMETERS:
!
!	NUM_DESC.rl.r	The number of descriptors to deallocate.
!	DESC_PTR.wqu.r	The first of these descriptors.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION CODES:
!
!	SS$_NORMAL
!	LIB$_FATERRLIB			Fatal error in the library
!
! SIDE EFFECTS:
!
!	May deallocate virtual storage.
!
!--

    BEGIN

    LIB$SFREEN_DD6 (..NUM_DESC, .DESC_PTR)

    END;					! end of LIB$SFREE1_DD


GLOBAL ROUTINE LIB$SFREEN_DD6 (		! Deallocate dynamic strings

	NUM_DESC,			! Number of descriptors
	DESC_PTR			! First descriptor to deallocate

			      ) : STRING_JSB =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Deallocate a number of strings.  The strings are all assumed
!	to be dynamic.
!
! FORMAL PARAMETERS:
!
!	NUM_DESC.rl.v	The number of descriptors to deallocate.
!	DESC_PTR.wqu.r	The first of these descriptors.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION CODES:
!
!	SS$_NORMAL
!	LIB$_FATERRLIB	Fatal error in the library
!
! SIDE EFFECTS:
!
!	May deallocate virtual storage.
!
!--

    BEGIN

    LOCAL
	RETURN_STATUS,
	DESCRIP : REF BLOCK [ , BYTE];

!+
! Loop through all the descriptors, freeing them.
! Quit when one fails to deallocate
!-

    INCR COUNTER FROM 1 TO .NUM_DESC DO
	BEGIN
	DESCRIP = .DESC_PTR + ((.COUNTER - 1)*DSC$K_D_BLN);

!+
! Now try freeing it.
!-
	RETURN_STATUS = LIB$SFREE1_DD6 (.DESCRIP) ;
	IF .RETURN_STATUS NEQ SS$_NORMAL
	THEN
	    RETURN .RETURN_STATUS ;

	END;	! of INCR loop

!+
! Since we fell out of the loop above, all strings have been
! successfully deallocated, so...
!-

    RETURN (SS$_NORMAL);
    END;					! end of LIB$SFREE1_DD6


GLOBAL ROUTINE LIB$SCOPY_DXDX (		! Copy string by descriptor

	SRC_DESC, 				! Source string
	DEST_DESC				! Destination string
			      ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Copy any supported class string passed by descriptor to any 
! supported class string passed by descriptor.
!
! FORMAL PARAMETERS:
!
!	SRC_DESC.rt.dx	Address of source string descriptor.
!	DEST_DESC.wt.dx	Address of destination descriptor.  
!			The class and dtype fields are not disturbed.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION CODES:
!
!	SS$_NORMAL	Success
!
!	LIB$_STRTRU	The source string was truncated to fit the
!			fixed-length destination string.
!
!	LIB$_INSVIRMEM	Not enough virtual memory available.
!
!	LIB$_INVSTRDES	Invalid DSC$B_CLASS field contents  or
!				If class = A or NCA, ARSIZE => 65K
!
! SIDE EFFECTS:
!
!	May allocate and deallocate virtual storage.
!
!--

    BEGIN
	RETURN LIB$SCOPY_DXDX6 (.SRC_DESC, .DEST_DESC) ;
    END;					! end of LIB$SCOPY_DXDX


GLOBAL ROUTINE LIB$SCOPY_DXDX6 (		! Copy string by descriptor
	SRC_DESC, 				! Source string
	DEST_DESC				! Destination string

			       ) : STRING_JSB =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Copy any supported class string passed by descriptor to any 
! supported class string passed by descriptor.
!
! FORMAL PARAMETERS:
!
!	SRC_DESC.rt.dx	Address of source string descriptor.
!	DEST_DESC.wt.dx	Address of destination string descriptor.  
!			The class and dtype fields are not disturbed.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION CODES:
!
!	SS$_NORMAL	Success
!
!	LIB$_STRTRU	The source string was truncated to fit the
!			fixed-length destination string.
!
!	LIB$_INSVIRMEM	Not enough virtual memory available.
!
!	LIB$_INVSTRDES	Invalid DSC$B_CLASS field contents  or
!				If class = A or NCA, ARSIZE => 65K
!
! SIDE EFFECTS:
!
!	May allocate and deallocate virtual storage.
!
!--

    BEGIN

    MAP
	SRC_DESC  : REF BLOCK [, BYTE],
	DEST_DESC : REF BLOCK [, BYTE];

!+
! Extract the length and address of 1st byte of data from the source 
! descriptor.  JSB to LIB$SCOPY_R_DX6 to do work.
!-
    IF .SRC_DESC [DSC$B_CLASS] GTRU DSC$K_CLASS_D
    THEN		! Use generalized extraction
	BEGIN
	LOCAL
	    LENGTH : VECTOR [1, LONG], 	! length of string
	    DATA_ADDR : VECTOR [1, LONG] ,	! start of data address
	    RETURN_STATUS ;

	RETURN_STATUS = LIB$ANALYZE_SDESC_R2 ( .SRC_DESC ;
					       LENGTH [0], 
					       DATA_ADDR [0]) ;

	IF NOT .RETURN_STATUS THEN RETURN (.RETURN_STATUS) ;

	RETURN (LIB$SCOPY_R_DX6 ( .LENGTH, .DATA_ADDR, .DEST_DESC)) ;

	END

    ELSE		! can jsb with lenth and address directly
	BEGIN
	RETURN (LIB$SCOPY_R_DX6 ( .SRC_DESC [DSC$W_LENGTH],
				  .SRC_DESC [DSC$A_POINTER],
				  .DEST_DESC ) ) ;
	END ;

    END;					! end of LIB$SCOPY_DXDX6


GLOBAL ROUTINE LIB$SCOPY_R_DX (		! Copy string by reference

	SRC_LEN, 				! Length of source
	SRC_ADDR, 				! Address of source data
	DEST_DESC				! Destination string
			      ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Copy any class string passed by reference to any supported 
! class string passed by descriptor.
!
! FORMAL PARAMETERS:
!
!	SRC_LEN.rwu.r	Address of length of source
!	SRC_ADDR.rt.r	Address of source
!	DEST_DESC.wt.dx	Address of destination string descriptor.  
!			The class and dtype fields are not disturbed.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION CODES:
!
!	SS$_NORMAL	Success
!
!	LIB$_STRTRU	The source string was truncated to fit the
!			fixed-length destination string.
!
!	LIB$_INSVIRMEM	Not enough virtual memory available.
!
!	LIB$_INVSTRDES	Invalid DSC$B_CLASS field contents  or
!				If class = A or NCA, ARSIZE => 65K
!
! SIDE EFFECTS:
!
!	May allocate and deallocate virtual storage.
!
!--

    BEGIN
    RETURN LIB$SCOPY_R_DX6 (..SRC_LEN, .SRC_ADDR, .DEST_DESC) ;
    END;					! end of LIB$SCOPY_R_DX


GLOBAL ROUTINE LIB$SCOPY_R_DX6 (	! Copy string by descriptor

	SRC_LEN,			! Number of bytes in source
	SRC_ADDR,			! Address of source data
	DEST_DESC			! Destination string

			       ) : STRING_JSB =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Copy any class string passed by reference to any supported 
! class string passed by descriptor.
!
! FORMAL PARAMETERS:
!
!	SRC_LEN.rwu.v		! (in R0) length of source
!	SRC_ADDR.rt.r		! (in R1) pointer to source string
!	DEST_DESC.wt.dx		! (in R2) pointer to destination 
!					  string descriptor
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION CODES:
!
!	SS$_NORMAL	Success
!
!	LIB$_STRTRU	The source string was truncated to fit the
!			fixed-length destination string.
!
!	LIB$_INSVIRMEM	Not enough virtual memory available.
!
!	LIB$_INVSTRDES	Invalid DSC$B_CLASS field contents  or
!				If class = A or NCA, ARSIZE => 65K
!
! SIDE EFFECTS:
!
!	May allocate and deallocate virtual storage.
!--

    BEGIN

    LOCAL
	RETURN_STATUS;

    MAP
	DEST_DESC : REF BLOCK [ , BYTE] , ! destination descriptor
	SRC_LEN : WORD UNSIGNED ;	  ! length of input



!+
! Select the class of descriptor.
! Return the status resulting from the copy operation.
!-

    RETURN_STATUS = SS$_NORMAL ;	! Assume success
    RETURN ( CASE .DEST_DESC[DSC$B_CLASS] 
		  FROM DSC$K_CLASS_Z TO DSC$K_CLASS_VS OF
    SET

!+
! fixed string descriptor (CLASS _Z, _S, _SD)
! **********************************************
!
! Use fixed length semantics. Copy to destination with fill or 
! truncation.
!-
	[DSC$K_CLASS_Z, 
	 DSC$K_CLASS_S,
	 DSC$K_CLASS_SD] :
	    BEGIN
	    BUILTIN R0;	! length of uncopied src from MOVC5

	    CH$COPY (.SRC_LEN, .SRC_ADDR, STR$K_FILL_CHAR, 
		     .DEST_DESC [DSC$W_LENGTH], 
		     .DEST_DESC [DSC$A_POINTER]); ! do copy

	    IF .R0 EQLU 0   ! if no uncopied src
		THEN
		    SS$_NORMAL			! then success
		ELSE
		    LIB$_STRTRU			! else truncation
	    END;


!+
! dynamic destination string
! **************************
!-
	[DSC$K_CLASS_D] :
	    BEGIN
	    IF $STR$NEED_ALLOC (.SRC_LEN, 
				($STR$DYN_AL_LEN (DEST_DESC)) )

%IF %BLISS (BLISS16) OR %BLISS (BLISS36)	! if not VAX must not
%THEN						! CH$MOVE with overlap
OR $STR$OVERLAP (.SRC_ADDR, .SRC_LEN, 
		 .DEST_DESC [DSC$A_POINTER], .SRC_LEN)
%FI
	    THEN
		BEGIN			! cannot directly fill dest
		LOCAL
		    LOC_RET_STAT,	! status of calls to Allocate
					!  and Deallocate
		    TEMP_DESC : $STR$DESCRIPTOR;	! create temp

		    LOC_RET_STAT = $STR$ALLOCATE (.SRC_LEN, TEMP_DESC);
							! alloc temp
		    !+
		    ! Allocate will only return STR$_NORMAL or 
		    ! STR$_INSVIRMEM, therefore if it wasn't success,
		    ! don't continue copying		    
		    !-

		    IF (.LOC_RET_STAT)
			THEN
			    BEGIN	! successful allocate
			    CH$MOVE (.SRC_LEN, .SRC_ADDR, ! copy to temp
				     .TEMP_DESC [DSC$A_POINTER]);
			    $STR$EXCH_DESCS (TEMP_DESC, DEST_DESC);
							! switch temp 
							! and dest
			    LOC_RET_STAT = $STR$DEALLOCATE (TEMP_DESC);
							! return former
							! string
			    !+
			    ! $STR$DEALLOCATE returns either STR$_NORMAL
			    ! or STR$_FATINTERR.
			    !-
			    IF NOT .LOC_RET_STAT
			    THEN
				RETURN_STATUS = LIB$_FATERRLIB ;
			    END		! successful allocate
			ELSE
			    RETURN_STATUS = LIB$_INSVIRMEM ;
		END			! cannot directly fill dest

	    ELSE

		BEGIN			! directly fill dest
		CH$MOVE (.SRC_LEN, .SRC_ADDR, 	! write dest
			 .DEST_DESC [DSC$A_POINTER]);
		DEST_DESC [DSC$W_LENGTH] = .SRC_LEN;
		END;			! directly fill dest

	    .RETURN_STATUS			! return the status
	    END;


!+
! Class A and NCA array descriptor
! ********************************
!-
	[DSC$K_CLASS_A,		! Class A Array descriptor
	 DSC$K_CLASS_NCA]:	! Class NCA array descriptor
	    BEGIN
	    BUILTIN R0;	! len of uncopied src from MOVC5

	    IF .DEST_DESC [DSC$L_ARSIZE] GTR MAX_SIZE ! If size>max
	    THEN LIB$_INVSTRDES ;		  	  ! then quit

	    CH$COPY (.SRC_LEN, .SRC_ADDR, STR$K_FILL_CHAR, 
		     .DEST_DESC [DSC$L_ARSIZE], 
		     .DEST_DESC [DSC$A_POINTER]); ! do copy

	    IF .R0 EQLU 0   ! if no uncopied src
	    THEN
		RETURN_STATUS = SS$_NORMAL  	! then success
	    ELSE
		RETURN_STATUS = LIB$_STRTRU   !else truncation

	    END ;		! of Class A and NCA Array Descriptor

!+
! Varying string descriptor
! *************************
!-

	 [DSC$K_CLASS_VS]:	! Varying string descriptor
	    BEGIN
	    IF (.SRC_LEN LEQU .DEST_DESC [DSC$W_MAXSTRLEN] )
	    THEN	! fits within MAXLEN, copy and update CURLEN
		BEGIN
		CH$MOVE (.SRC_LEN, .SRC_ADDR,
		         .DEST_DESC [DSC$A_POINTER] + 2);
		(.DEST_DESC [DSC$A_POINTER])<0,16> = .SRC_LEN ;
		SS$_NORMAL	! return success status
		END

	    ELSE	! Won't fit within MAXLEN. Only copy MAXLEN's 
			! worth of data and update CURLEN to MAXLEN

		BEGIN
		CH$MOVE (.DEST_DESC [DSC$W_MAXSTRLEN], .SRC_ADDR,
		         .DEST_DESC [DSC$A_POINTER] + 2);
		(.DEST_DESC [DSC$A_POINTER])<0,16> = 
					.DEST_DESC [DSC$W_MAXSTRLEN] ;
		LIB$_STRTRU	! return truncation status
		END

	    END ;		! of Varying string descriptor


!+
! Unsupported class descriptor
! ****************************
!-

	[INRANGE, OUTRANGE]:	! Unsupported class of descriptor
	    LIB$_INVSTRDES ;
    TES);			! end of set on class code

    END;					! end of LIB$SCOPY_R_DX6

END
ELUDOM
