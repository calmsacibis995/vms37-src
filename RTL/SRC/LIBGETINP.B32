MODULE LIB$GET_INPUT (		! Library $GET on device SYS$INPUT

	IDENT = '1-012'		! File: LIBGETINP.B32  Edit: RKR1012

		     ) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  General Uitlity Library
!
! ABSTRACT:
!
!	Output a string as a record on device SYS$INPUT.
!
! ENVIRONMENT:  User Mode - AST re-entrant
!
! AUTHOR:  Thomas N. Hastings, CREATION DATE:  8-Aug-1977
!
! MODIFIED BY:
!
! 	Thomas N. Hastings, 8-Aug-1977: VERSION 0
! 01	- original
! 04	- change to SYS$INPUT
! 05	- change to do OPEN at first time
! 06	- change to set up RAB for GET_STRING
! 0-7	- fix comment
! 0-10	- Change to STARLET library.  DGP 20-Apr-78
! 0-11	- Remove EXTERNAL RMS$_RTB.  TNH 24-Apr-78
! 0-12	- Change REQUIRE files for VAX system build.  DGP 28-Apr-78
! 0-13	- Change STARLET to RTLSTARLE to avoid conflicts.  DGP 1-May-78
! 0-14	- Add LIB$GET_COMMAND entry point.  TNH 17-June-78
!	  For now, just copy entire routine.
! 0-15	- Make wait if record stream active so AST re-entrant.
!	  Also allocate dynamic string if passed.  TNH 29-July-78
! 0-18	- Make common routine.  TNH 29-July-78
! 0-19	- Use LIB$SOPY_R_DX, not DD.  TNH 2-Aug-78
! 0-20	- Change file name to LIBGETINP.B32, and change the name of
!	   the REQUIRE file similarly.  JBS 14-NOV-78
! 1-001	- Update version number and copyright notice.  JBS 16-NOV-78
! 1-002	- Declare NULLPARAMETER for new BLISS compiler.  JBS 22-NOV-78
! 1-003	- Change REQUIRE file names from FOR... to OTS...  JBS 07-DEC-78
! 1-003 - Put in extra RETURN to avoid INFO message about a null
!	   expression in a value-required context.  JBS 22-NOV-78
! 1-004	- Change LIB$S to STR$.  JBS 23-MAY-1979
! 1-005	- Change call to STR$COPY.  JBS 16-JUL-1979
! 1-006	- Optionally return the number of characters in the record, so 
!	  callers with fixed strings can ignore trailing blanks.  
!	  JBS 06-SEP-1979
! 1-007	- Revise edit 006 to not return more than the number of bytes 
!	  requested, and return as a word.  This is similar to system 
!	  services.  JBS 18-SEP-1979
! 1-008 - Use LIB$SCOPY_R_DX to copy string since STR$COPY_R signals 
!	  errors.
!	  Do string copy even if $GET fails because the string may have
!	  been returned.  When waiting for record stream to become 
!	  inactive, do $GET's, not $PUT's!  SBL 22-Jan-1980
! 1-009 - Enhance to recognize additional classes of string descriptors
!	  by invokine LIB$ANALYZE_SDESC_R3 to extract length and address
!	  of 1st data byte from descriptor.  RKR 27-MAY-1981.
! 1-010 - Correct bugs caused by fact that LIB$ANALYZE_SDESC_R3 returns
!	  a word length rather than a byte or longword.  SBL 4-Sep-1981
! 1-011 - Correct comment regarding statuses returned. 
!	  Add special-case code for string descriptors that "read" like
!	  fixed string descriptors to avoid calls to 
!	  LIB$ANALYZE_SDESC_R3.  RKR 7-OCT-1981
! 1-012 - Redirect jsb's from LIB$ANALYZE_SDESC_R3 to
!	  LIB$ANALYZE_SDESC_R2.  Use LIB$SCOPY_R_DX6 to do copying.
!	  RKR 18-NOV-1981.
!--
!<BLF/PAGE>

!
! SWITCHES
!

SWITCHES ADDRESSING_MODE 
		(EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES
!
    REQUIRE 'RTLIN:STRLNK';	! linkage for LIB$ANALYZE_SDESC_R2

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    LIB$GET_INPUT,		! Get string from device SYS$INPUT
    LIB$GET_COMMAND,		! Get string from device SYS$COMMAND
    DO_GET;			! Common rout. to do main part of above.

!
! INCLUDE FILES:
!

REQUIRE 'RTLIN:RTLPSECT';		! Define DECLARE_PSECTS macro

LIBRARY 'RTLSTARLE';		! STARLET library for macros and symbols

!
! MACROS:
!
!
! EQUATED SYMBOLS:
!

LITERAL

    K_DYN_STR_MAX = 256;	! Max. size of dynamic string which can
				! be handled before truncation
!
! PSECT DECLARATIONS:
!
DECLARE_PSECTS (LIB);		! declare PSECTs for LIB$ facility
!
! OWN STORAGE:
!

OWN
    SYS_INPUT_ISI : WORD INITIAL (0),		! ISI for SYS$INPUT
    SYS_COMMAND_ISI : WORD INITIAL (0);		! ISI for SYS$COMMAND

!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    LIB$ANALYZE_SDESC_R2 : LIB$ANALYZE_SDESC_JSB_LINK, ! Extract length
						       ! and address of
						       ! 1st data byte
						       ! from descriptor
    LIB$SCOPY_R_DX6 : STRING_JSB ;	! Copy to any class string

EXTERNAL
    LIB$_FATERRLIB,		! LIB -- FATAL ERROR IN LIBRARY
    LIB$_INPSTRTRU;		! LIB -- INPUT STRING TRUNCATED


GLOBAL ROUTINE LIB$GET_INPUT (		! Input string from SYS$INPUT

	GET_STRING,		! Adr. of string descriptor
	PROMPT_STRING,		! Adr. of optional PROMPT_STRING string
				! descriptor
	OUTLEN			! Optional number of bytes returned

			     ) = ! Value returned is RMS completion code

!++
! FUNCTIONAL DESCRIPTION:
!
!	A line from the current controlling input device, SYS$INPUT, is
!	obtained.  If an optional PROMPT_STRING is given, output will 
!	appear on the device, SYS$INPUT, if the device is a terminal;
!	otherwise the  PROMPT_STRING is ignored.  No CRLF is  
!	appended to the record obtained from RMS.  On first call, 
!	device SYS$INPUT is opened.
!	Thus the user can assign the logical name SYS$INPUT to any file 
!	name in order to redirect I/O.
!
! CALLING SEQUENCE:
!
!      RET_STATUS.wlc.v = LIB$GET_INPUT (get_string.wt.dx 
!					 [,prompt_string.rt.dx 
!					 [,outlen.ww.r]])
!
! INPUT PARAMETERS:
!
!      prompt_string  is the address of a string  descriptor  specifying
!                     an  optional prompt which is output to the
!                     controlling input device.  Where other conventions
!                     are   not   established,  it  is  recommended  for
!                     consistency  to  make  prompts be an English  word
!                     followed  by  a  colon(:),  one  (1) space, and no
!                     CRLF.
!
! OUTPUT PARAMETERS:
!
!      get_string     is the address of string descriptor  of  any  type
!		      of descriptor supported by LIB$ANALYZE_SDESC.
!
!	outlen	      Is the number of characters placed in the string.
!
! IMPLICIT INPUTS:
!
!      SYS_INPUT_ISI	Set on first call to RMS internal stream 
!			identifier.
!
! IMPLICIT OUTPUTS:
!
!      SYS_INPUT_ISI	Set to RMS internal stream identifier
! 			on first call when SYS$INPUT is OPENed.
!
!
! COMPLETION STATUS:
!
!      SS$_NORMAL if success.
!
!	LIB$_INPSTRTRU if input string is bigger than the caller's
!		       fixed length string.
!	LIB$_INVSTRDES  if the input descriptor's class is not a 
!			recognized string class.
!	RMS$_xyz if any RMS error.
!
! SIDE EFFECTS:
!
!     Opens file SYS$INPUT on first call and remembers ISI for 
! subsequent calls.
!--

    BEGIN

    BUILTIN
	NULLPARAMETER;

    RETURN DO_GET (.GET_STRING, 		! String to return
	    (IF NULLPARAMETER (2) THEN 0 ELSE .PROMPT_STRING),! Optional
							      ! prompt
	    (IF NULLPARAMETER (3) THEN 0 ELSE .OUTLEN), ! Optional 
							! number of 
							! bytes returned
	    SYS_INPUT_ISI,	! internal stream id for SYS$INPUT
	    9,			! length of SYS$INPUT stirng
	    UPLIT ('SYS$INPUT'));	! name to open first time

    END;			! End of LIB$GET_INPUT routine

GLOBAL ROUTINE LIB$GET_COMMAND (	! Input string from SYS$COMMAND

	GET_STRING,		! Adr. of string descriptor
	PROMPT_STRING,		! Adr of optional PROMPT_STRING
				! descriptor
	OUTLEN			! Number of chars returned

			       ) = ! Value returned is RMS completion 
				   ! code

!++
! FUNCTIONAL DESCRIPTION:
!
!	A line from the current controlling input device,  SYS$COMMAND,
!	is obtained.   If an optional PROMPT_STRING is given, output 
!	will appear on the device, SYS$COMMAND, if the device is  a  
!	terminal;  otherwise the PROMPT_STRING is ignored.  No CRLF is 
!	appended to the record obtained from RMS.  On first call, 
!	device SYS$COMMAND is opened.
!	Thus the user can assign the logical name SYS$COMMAND to any 
!	file name in order to redirect I/O.  Note: Generally 
!	LIB$GET_INTPUT should be used rather than LIB$GET_COMMAND.  
!	LIB$GET_COMMAND should only be used when the user has indicated
!	that the terminal is explicitly wanted when in an indirect file.
!	For example, $INQUIRE or /COMFIRM qualifier.
!	Normally, SYS$INPUT and SYS$COMMAND are the same file 
!	(interactive and batch).  It is only when an interactive user 
!	uses an indirect file that the devices are different 
!	(SYS$INPUT = indirect file, SYS$COMMAND remaining associated 
!	with the terminal).
!
! CALLING SEQUENCE:
!
!      RET_STATUS.wlc.v = LIB$GET_COMMAND (get_string.wt.dx 
!					   [,prompt_string.rt.dx 
!					   [,outlen.ww.r]])
!
! INPUT PARAMETERS:
!
!      prompt_string  is the address of a string  descriptor  specifying
!                     an  optional prompt which is output to the
!                     controlling input device.  Where other conventions
!                     are   not   established,  it  is  recommended  for
!                     consistency  to  make  prompts be an English  word
!                     followed  by  a  colon(:),  one  (1) space, and no
!                     CRLF.
!
! OUTPUT PARAMETERS:
!
!      get_string     is the address of string descriptor  of  any  type
!                     (unspecified,   static,  dynamic,  or  varying  as
!                     specified by the DSC$B_CLASS  field)  which  is to
!                     receive  the string.  (See Chapter 2 -- Section on
!                     passing  strings  as  output  parameters  for  the
!                     semantics of each string type.)
!	outlen	      Is the number of characters returned to the 
!		      caller.
!
! IMPLICIT INPUTS:
!
!      SYS_COMMAND_ISI	Set on first call to RMS internal stream 
!			identifier.
!
! IMPLICIT OUTPUTS:
!
!      SYS_COMMAND_ISI	Set to RMS internal stream identifier
! 			on first call when SYS$COMMAND is OPENed.
!
!
! COMPLETION STATUS:
!
!      SS$_NORMAL if success.
!
!	LIB$_INPSTRTRU if input string is bigger than the caller's
!		fixed length string.
!	LIB$_INVARG if the input descriptor's class is not a recognized
!		string type.
!	RMS$_xyz if any RMS error.
!
! SIDE EFFECTS:
!
!	Opens file SYS$COMMAND on first call and remembers ISI for 
!	subsequent calls.
!--

    BEGIN

    BUILTIN
	NULLPARAMETER;

    RETURN DO_GET (.GET_STRING, 		! String to return
	    (IF NULLPARAMETER (2) THEN 0 ELSE .PROMPT_STRING),! Optional
							      ! prompt 
							      ! string
	    (IF NULLPARAMETER (3) THEN 0 ELSE .OUTLEN),	! Optional 
							! number of 
							! chars returned
	    SYS_COMMAND_ISI,	! internal stream id for SYS$COMMAND
	    11,			! length of SYS$COMMAND string
	    UPLIT ('SYS$COMMAND'));	! name to open first time

    END;				! End of LIB$GET_COMMAND routine

ROUTINE DO_GET (	! Input string from SYS$INPUT or SYS$COMMAND

	GET_STRING,		! Adr. of string descriptor 
	PROMPT_STRING,		! Adr. of optional PROMPT_STRING string
				! descriptor
	OUTLEN,			! Number of chars returned to the caller
	GET_ISI,		! Adr. of ISI word for this file
	DEVICE_NAME_LEN,	! Length of device name string
	DEVICE_NAME		! Adr. of device name string

	       ) = ! Value returned is RMS completion code

!++
! FUNCTIONAL DESCRIPTION:
!
!	A line from the current controlling input device, DEVICE_NAME,
!	is obtained.   If an optional PROMPT_STRING is given, output 
!	will appear on the device, DEVICE_NAME, if the device is a 
!	terminal;  otherwise the PROMPT_STRING is ignored.  No CRLF is 
!	appended to the record obtained from RMS.  On first call, device
!	DEVICE_NAME is opened.
!	Thus the user can assign the logical name DEVICE_NAME to any 
!	file name in order to redirect I/O.
!
! CALLING SEQUENCE:
!
!      ret_status.wlc.v = DO_GET (get_string.wt.dx, 
!				  [prompt_string.rt.dx], 
!				  [outlen.ww.r],
!	   			  get_isi.mw.r, 
!				  device_name_len.rl.v, 
!				  device_name.rt.r)
!
! INPUT PARAMETERS:
!
!      prompt_string  is the address of a string  descriptor  specifying
!                     an  optional prompt which is output to the
!                     controlling input device.  Where other conventions
!                     are   not   established,  it  is  recommended  for
!                     consistency  to  make  prompts be an English  word
!                     followed  by  a  colon(:),  one  (1) space, and no
!                     CRLF.
!
!
!      get_isi		Set on first call to RMS internal stream 
!			identifier.
!
!      device_name_len	is the length of the device_name string in 
!			bytes.
!
!      device_name	is the adr. of the device name to be opened 
!			the first time.
!
! OUTPUT PARAMETERS:
!
!      get_string     is the address of the string descriptor
!                     which  is  to receive  the string.
!	outlen	      Is the number of characters returned to the caller
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS:
!
!      SS$_NORMAL if success.
!
!	LIB$_INPSTRTRU if input string is bigger than the caller's
!		       fixed length string.
!	LIB$_INVSTRDES  if the input descriptor's class is not a 
!			recognized string class.
!	RMS$_xyz if any RMS error.
!
! SIDE EFFECTS:
!
!	Opens file DEVICE_NAME on first call and remembers ISI for 
!	subsequent calls by storing ISI in get_isi.
!--

    BEGIN

    BUILTIN
	NULLPARAMETER;

    LOCAL
	GET_STRING_LEN: WORD,			! length of buffer
	GET_STRING_ADDR, 			! addr of buffer
	PROMPT_STRING_LEN: WORD,		! length of prompt
						! string
	PROMPT_STRING_ADDR,			! addr of prompt string
	GET_STATUS,				! status from $GET
	RET_STATUS,				! status from other 
						! calls
	FAB : $FAB_DECL,			! FAB
	RAB : $RAB_DECL,			! RAB
	DYNAMIC_STR_BUF : VECTOR [K_DYN_STR_MAX, BYTE, UNSIGNED];
						! temporary buffer for 
						! dynamic string case.

    MAP
	GET_STRING : REF BLOCK [8, BYTE],	! String descriptor
	PROMPT_STRING : REF BLOCK [8, BYTE],	! String descriptor
	OUTLEN : REF VECTOR [1, WORD, UNSIGNED],! Number of characters 
						! returned to the user
	GET_ISI : REF VECTOR [1, WORD, UNSIGNED]; ! Place to remember 
						  ! ISI in static 
						  ! storage

    IF (.GET_ISI [0] EQL 0)
    THEN
	!+
	! First call, initialize FAB
	!-
	BEGIN
	$FAB_INIT (FAB = FAB, 
		   FAC = GET, 		! file access: GET
	           FNA = .DEVICE_NAME,	! file name: DEVICE_NAME 
					! (SYS$INPUT or SYS$COMMAND)
	           FNS = .DEVICE_NAME_LEN); ! file name size: 
					    ! 9 or 11 bytes

	!+
	! Open DEVICE_NAME, remember RMS internal stream identifier
	!-
	RET_STATUS = $OPEN (FAB = FAB);		! fab addr : FAB

	!+
	! If the OPEN fails, return the RMS status code.
	!-

	IF ( NOT .RET_STATUS) THEN RETURN (.RET_STATUS);

	$RAB_INIT (FAB = FAB, RAB = RAB);
	RET_STATUS = $CONNECT (RAB = RAB);  ! connect RAB to the file

	!+
	! Similarly, if the CONNECT fails, return the RMS status code.
	!-

	IF ( NOT .RET_STATUS) THEN RETURN (.RET_STATUS);

	GET_ISI [0] = .RAB [RAB$W_ISI];		! remember ISI
	END		! of first call

    ELSE

	!+
	! file already open, just initialize RAB
	! including internal stream identifier returned from first $OPEN
	!-
	BEGIN		! file aready open
	$RAB_INIT (FAB = FAB, RAB = RAB);
	RAB [RAB$W_ISI] = .GET_ISI [0];
	END;		! file aready open

!+
! Determine which buffer area to read into, and how long it is.
! Use LIB$ANALYZE_SDESC_R2 to get length and address of 1st data byte
! of caller's buffer.
! If the descriptor is invalid, return status returned by
! LIB$ANALYZE_SDESC_R2.
!-
	IF .GET_STRING [DSC$B_CLASS] GTRU DSC$K_CLASS_D
	THEN		! Use generalized extraction
	    BEGIN
	    LOCAL RET_STATUS ;
	    RET_STATUS = LIB$ANALYZE_SDESC_R2 ( .GET_STRING ;
					        GET_STRING_LEN,
					        GET_STRING_ADDR ) ;

	    IF NOT .RET_STATUS THEN RETURN (.RET_STATUS) ;
	    END

	ELSE		! Fetch length and address directly

	    BEGIN
	    GET_STRING_LEN = .GET_STRING [DSC$W_LENGTH] ;
	    GET_STRING_ADDR = .GET_STRING [DSC$A_POINTER] ;
	    END ;

!+
! If GET_STRING is dynamic, we arrange to read onto a area of the
! stack since the dynamic string may not be allocated.
!-
    IF .GET_STRING [DSC$B_CLASS] EQL DSC$K_CLASS_D
    THEN
	BEGIN
	GET_STRING_LEN = K_DYN_STR_MAX;
	GET_STRING_ADDR = DYNAMIC_STR_BUF;
	END;

!+
! If GET_STRING was varying, the length we want is MAXSTRLEN, not
! CURLEN as returned by LIB$ANALYZE_SDESC_R2.
!-
    IF .GET_STRING [DSC$B_CLASS] EQL DSC$K_CLASS_VS
    THEN
	BEGIN
	GET_STRING_LEN = .GET_STRING [DSC$W_MAXSTRLEN] ;
	END;
!+
! Set up RAB buffer address and length fields based on our computations.
!-
    RAB [RAB$L_UBF] = .GET_STRING_ADDR;
    RAB [RAB$W_USZ] = .GET_STRING_LEN;

!+
! Setup prompt buffer address and size in RAB if PROMPT_STRING string 
! present.  If Prompt string descriptor invalid, return status returned
! by LIB$ANALYZE_SDESC_R2.
!-

    IF ( NOT NULLPARAMETER (2))
    THEN
	BEGIN
	IF .PROMPT_STRING [DSC$B_CLASS] GTRU DSC$K_CLASS_D
	THEN		! Use generalized extraction
	    BEGIN
	    LOCAL RET_STATUS ;
	    RET_STATUS = LIB$ANALYZE_SDESC_R2 ( .PROMPT_STRING ;
					        PROMPT_STRING_LEN,
					        RAB [RAB$L_PBF] );!addr.
	    IF NOT .RET_STATUS THEN RETURN (.RET_STATUS) ;
	    END

	ELSE		! Fetch length and address directly
	    BEGIN
	    PROMPT_STRING_LEN = .PROMPT_STRING [DSC$W_LENGTH] ;
	    RAB [RAB$L_PBF]   = .PROMPT_STRING [DSC$A_POINTER ] ;
	    END;

	RAB [RAB$B_PSZ] = MINU (255, .PROMPT_STRING_LEN);
	RAB [RAB$V_PMT] = 1;
	END;

!+
! Input the string as a single record
! Return RMS error status if not RECORD TOO BIG or RECORD STREAM ACTIVE.
! On record stream active, wait and try again.
!-
    GET_STATUS = $GET (RAB = RAB);

    IF NOT .GET_STATUS
    THEN
	BEGIN
	WHILE (.RAB [RAB$L_STS] EQL RMS$_RSA) DO
	    BEGIN
	    $WAIT (RAB = RAB);
	    GET_STATUS = $GET (RAB = RAB);
	    END;
	END;

!+
! Having read the record, we now have to worry about the semantics of
! GET_STRING.
! If GET_STRING has fixed-length semantics, we must blank fill the tail
!	end of the buffer that RMS didn't fill.
! If GET_STRING has dynamic semantics, the input got read into an area
!	on the stack and needs to be copied to GET_STRING.
! If GET_STRING has varying string semantics we need to adjust the
!	CURLEN field to reflect how many bytes it really contains.
!-
    CASE .GET_STRING [DSC$B_CLASS] 
    FROM DSC$K_CLASS_Z TO DSC$K_CLASS_VS OF 
    SET
	!+
	! Classes with fixed-length string semantics
	!-
	[DSC$K_CLASS_Z,		! Unspecified
	 DSC$K_CLASS_S,		! Scalar
	 DSC$K_CLASS_A,		! Array
	 DSC$K_CLASS_SD,	! Scaled decimal
	 DSC$K_CLASS_NCA]:	! Non-contigious array
	    BEGIN	! fixed length processing
	    !+
	    ! Because we opened the file in MOVE mode and used the 
	    ! caller's string as the UBF, we need only blank pad the 
	    ! area beyond the string; the actual data has been
	    ! moved into the front of the user's string by RMS.
	    !-
	    CH$FILL (%C' ', 
		     .GET_STRING_LEN  - .RAB [RAB$W_RSZ],
		     .GET_STRING_ADDR + .RAB [RAB$W_RSZ]);
	    RET_STATUS = 1;			! To denote copy success
	    END;	! fixed length processing


	!+
	! Classes with varying string semantics
	!-
	[DSC$K_CLASS_VS]:	! Varying string
	    BEGIN	! varying length processing
	    (.GET_STRING [DSC$A_POINTER])<0,16> = .RAB [RAB$W_RSZ] ;
						! CURLEN <- bytes gotten
	    RET_STATUS = 1;			! To denote copy success
	    END;	! varying length processing


	!+
	! Classes with dynamic string semantics
	!-
	[DSC$K_CLASS_D]:	! Dynamic string
	    BEGIN	! dynamic length processing
	    RET_STATUS = LIB$SCOPY_R_DX6 (.RAB [RAB$W_RSZ], 
					 DYNAMIC_STR_BUF, 
					 .GET_STRING)
	    END;	! dynamic length processing

	[INRANGE, OUTRANGE]:	! Should never take this path since
				! a bad descriptor class code should
				! have gotten caught the first time
				! we tried to get GET_STRING's length
				! and address.
		RETURN (LIB$_FATERRLIB) ;
    TES;
!+
! If requested, tell the caller the number of bytes actually returned, 
! not counting blank padding, if any.
!-

    IF ( NOT NULLPARAMETER (3)) 
	THEN OUTLEN [0] = MINU (.RAB [RAB$W_RSZ], .GET_STRING_LEN);

!+
! Return proper status code.
!-

    IF .GET_STATUS EQLU RMS$_RTB		! Record too big
    THEN
	RETURN (LIB$_INPSTRTRU)
    ELSE IF NOT .GET_STATUS
    THEN
	RETURN .GET_STATUS
    ELSE IF NOT .RET_STATUS
    THEN
	RETURN .RET_STATUS
    ELSE RETURN SS$_NORMAL;

    END;				! End of routine DO_GET
END					!End of module LIB$GET_INPUT

ELUDOM
