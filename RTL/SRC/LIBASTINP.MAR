	.TITLE	LIB$AST_IN_PROG - Inquire if AST in progress
	.IDENT	/1-003/			; File: LIBASTINP.MAR Edit SBL1003

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY: General Utility Library
;
; ABSTRACT:
;
;	Return SUCCESS (1) if an AST is active in the current mode.
;
; ENVIRONMENT: All Modes, AST Reentrant
;
;--
; AUTHOR: Jonathan M. Taylor, CREATION DATE: 23-Jan-78
;
; MODIFIED BY:
;
;	JMT, 23-Jan-78 : VERSION 0
; 01	- Original 
; 1-001	- Update version number and copyright notice.  The edit number
;	   on version 0 was 4.  JBS 16-NOV-78
; 1-002	- Add "_" to the PSECT directive.  JBS 21-DEC-78
; 1-003 - Allocate an event flag number for the $GETJPI using LIB$GET_EF.
;	  SBL 24-Nov-1981

	.SBTTL	DECLARATIONS

;
; EXTERNAL SYMBOLS:
;
	.DSABL	GBL
	.EXTRN	LIB$STOP
	.EXTRN	LIB$GET_EF
	.EXTRN	LIB$FREE_EF
	.EXTRN	LIB$_FATERRLIB

;
; INCLUDE FILES:
;

;
; MACROS:
;
	$JPIDEF				; define system service constants

;
; EQUATED SYMBOLS:
;	none

;
; OWN STORAGE:
;	none

;
; PSECT DECLARATIONS:
;
	.PSECT _LIB$CODE PIC, SHR, LONG, EXE, NOWRT

	.SBTTL	LIB$AST_IN_PROG  - is AST in progress?

;++
; FUNCTIONAL DESCRIPTION:
;
;	Call system service GETJPI to get access modes with active
;	ASTs.  Pick off the bit corresponding to the current-mode
;	(taken from the PSL) and return it.
;
; CALLING SEQUENCE:
;
;	at_ast_level.wl.v = LIB$AST_IN_PROG ([efn.rl.r])
;
; INPUT PARAMETERS:
;
	efn = 4		; Longword event flag number to use for $GETJPI,
			; passed by reference.  Optional.  If omitted,
			; LIB$GET_EF is called to allocate a number.
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; FUNCTION VALUE:
;
;	Returns SUCCESS (1) if we're currently as AST level, otherwise 0.
;
;
; SIDE EFFECTS:
;
;	May signal LIB$_FATERRLIB
;
;--
	.ENTRY	LIB$AST_IN_PROG, ^M<>
	CLRL	-(SP)			; set up a one-item item-list
	CLRQ	-(SP)			;	+--------------+
	PUSHAL	8(SP)			;ITMLST:|_0300_|___4___|
	PUSHL	#<JPI$_ASTACT@16>+4	;	|______*_______+---+
					;	|______0_______|   |
					;	|______0_______|   |
					;	|______0_______| <-+
	MOVL	SP, R1
	TSTB	(AP)			; Zero arguments?
	BEQL	GET_EF			; Yes, call LIB$GET_EF
	TSTL	efn(AP)			; Omitted by reference?
	BEQL	GET_EF			; Yes, call LIB$GET_EF
	$GETJPI_S	EFN=@efn(AP), ITMLST=(R1)
	BLBC	R0, ERROR		; Signal if error
	BRB	OK			; Skip to common processing

;+
; Come here if we need to allocate an event flag number
;-
GET_EF:
	CLRL	-(SP)			; Make a place for the event flag number
	PUSHAB	(SP)			; Address of efn
	CALLS	#1, G^LIB$GET_EF	; Get an efn
	BLBC	R0, ERROR		; Exit if unsuccessful
	MOVL	SP, R0			; Move address of EFN
	$GETJPI_S	EFN=(R0), ITMLST=(R1)
	BLBC	R0, ERROR		; branch if not successful
	PUSHAB	(SP)			; Address of efn
	CALLS	#1, G^LIB$FREE_EF	; Free the efn
	BLBC	R0, ERROR		; Signal if error
	BRB	OK			; Skip to finish up

;+
; Come here for final processing
OK:
	MOVL	-4(FP), R0		; R0 = bitvector by mode
	MOVPSL	R1
	ROTL	#8, R1, R1
	BICB	#-4, R1			; R1<0:7> = current mode
	MNEGB	R1, R1			; R1 = 0,-1,-2,-3
	ROTL	R1, R0, R0		; get proper flag into lsb
	RET

ERROR:
	PUSHL	R0			; Push original error code
	CLRL	-(SP)			; Zero FAO parameters
	PUSHL	#LIB$_FATERRLIB
	CALLS	#3, G^LIB$STOP		; Can't return
	RET				; But have signalled PC in this module

	.END
