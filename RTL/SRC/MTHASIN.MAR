	.TITLE	MTH$ASIN 	; Floating Point Arcsine routine
				; (ASIN,ASIND)
	.IDENT /1-007/		; File: MTHASIN.MAR  Edit: RNH1007
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;
; FACILITY: MATH LIBRARY
;++
; ABSTRACT:
;
; MTH$ASIN is a function  which  returns the floating point arcsine in
; radians of its single precision floating point argument. The call is 
; standard call-by-reference.
;
; MTH$ASIND is a function  which  returns the floating point arcsine in
; defrees of its single precision floating point argument. The call is 
; standard call-by-reference.
;
;--
;
; VERSION: 01
;
; HISTORY:
; AUTHOR:
;	Peter Yuo, 29-Jun-77: Version 01
;
; MODIFIED BY:
;
;
;

	.SBTTL	HISTORY	; Detailed Current Edit History


; ALGORITHMIC DIFFERENCES FROM FP-11/C ROUTINE:	none
;
; Edit History for Version 01 of MTH$ASIN 
;
; 0-2	MTH$$ERROR changed to MTH$$SIGNAL.
;	MTH$_... changed to MTH__....
;	Changed error handling mechanism. Put error result in R0 before 
;	calling MTH$$SIGNAL in order to allow user modify error result.
; 1-001	- Update version number and copyright notice.  JBS 16-NOV-78
; 1-002	- Change MTH__INVARG to MTH$K_INVARGMAT.  JBS 07-DEC-78
; 1-003	- Add "_" to the PSECT directive.  JBS 21-DEC-78
; 1-004 - Declare externals.  SBL 17-May-1979
; 1-005 - Use MTH$SQRT_R3.  SBL 27-Sept-1979
; 1-006 - Change JSB entry to MTH$ASIN_R4.  RBG 28-Sept-1979
; 1-007 - Added degree entry points. RNH 29-MAR-1981
;

	.SBTTL	DECLARATIONS	; Declarative Part of Module

;
; INCLUDE FILES:
;

;
; EXTERNAL SYMBOLS:
;
	.DSABL	GBL
	.EXTRN	MTH$SQRT_R3
	.EXTRN	MTH$ATAN_R4
	.EXTRN	MTH$ATAND_R4
	.EXTRN	MTH$K_INVARGMAT
	.EXTRN	MTH$$SIGNAL

;
; EQUATED SYMBOLS:

	SF_1.0	= ^F1.0			; 1.0
	LF_PI_OV_2	= ^O007733@16 + ^O040311
					; PI/2
	LF_90	= ^X000043B4		; 90
	value	= 4			; value.rf.r

;
; MACROS:	none
;
; PSECT DECLARATIONS:

	.PSECT	_MTH$CODE	PIC,SHR,LONG,EXE,NOWRT
					; program section for math routines
;
; OWN STORAGE:	none
;
;
; CONSTANTS:
;


	.SBTTL	MTH$ASIN  - Standard Single Precision Floating ASIN


;++
; FUNCTIONAL DESCRIPTION:
;
; ASIN  - single precision floating point function
;
; ASIN(X) is computed as:
;
;	If X = 0, then ASIN(X) = 0.
;	If X = 1, then ASIN(X) = PI/2.
;	If X = -1, then ASIN(X) = -PI/2.
;	If 0 < |X| < 1, then ASIN(X) = ATAN(X/SQRT(1-X**2)).
;	If 1 < |X|, error.
;
; CALLING SEQUENCE:
;
;	ASIN.wf.v = MTH$ASIN(x.rf.r)
;
; INPUT PARAMETERS:

	LONG = 4			; define longword multiplier
	x = 1 * LONG			; Contents of x is the argument

; IMPLICIT INPUTS:	none
;
; OUTPUT PARAMETERS:
;
;	VALUE:	floating arcsine of the argument
;
; IMPLICIT OUTPUTS:	none
;
; COMPLETION CODES:	none
;
; SIDE EFFECTS:
;
; Signals: MTH$_INVARG if |X| > 1 with reserved operand in R0 (copied to
; the signal mechanism vector CHF$L_MCH_R0/R1 by LIB$SIGNAL).
; Associated message is: "INVALID ARGUMENT". Result is reserved
; operand -0.0 unless a user supplied (or any) error handler changes CHF$L_MCH_R0/R1.
;
; NOTE: This procedure disables floating point underflow, enables integer
; overflow.
;
;---


	.ENTRY	MTH$ASIN, ^M<IV, R2, R3, R4>
					; standard call-by-reference entry
					; disable DV (and FU), enable IV
	MTH$FLAG_JACKET			; flag that this is a jacket procedure in
					; case of an error in routine
					; If an error, convert signal to user PC
					; and resignal
	MOVF	@value(AP), R0		; R0 = |X| = @value(AP)
	BSBB	MTH$ASIN_R4		; call special ASIN routine
	RET				; return with result in R0


	.SBTTL	MTH$ASIN_R4 - Special ASIN routine

; Special ASIN - used by the standard routine, direct JSB call.
;
; CALLING SEQUENCE:
;	save anything needed in R0:R4
;	MOVF	..., R0			; input in R0
;	JSB	MTH$ASIN_R4
;	RSB				; return with result in R0
;

MTH$ASIN_R4::				; special ASIN routine
MTH$ASIN_R5::				; Release 1 name
	MOVF	R0, R4			; save X in R4
	BEQL	RETURN			; Return ASIN(0) = 0

;
; 0 < |X|
;

	BICW	#^X8000, R0		; R0 = |X|
	CMPF	R0, S^#SF_1.0		; compare |X| with 1.0
	BGEQ	GEQ_TO_1.0		; branch if |X| >= 1.0

;
; 0 < |X| < 1.0
;

	MULF2	R0, R0			; R0 = X**2
	SUBF3	R0, S^#SF_1.0, R0	; R0 = 1.0 - X**2
	JSB	MTH$SQRT_R3		; R0 = SQRT(1-X**2)
	DIVF3	R0, R4, R0		; R0 = X/SQRT(1-X**2)
	JMP	MTH$ATAN_R4		; R0 = ATAN(X/SQRT(1-X**2))


;
; 1 =< |X| 
;

GEQ_TO_1.0:
	BGTR	ERROR			; branch to ERROR if |X| > 1.0


;
; |X| = 1.0
;

	MOVF	#LF_PI_OV_2, R0		; R0 = PI/2
	TSTF	R4			; test the sign of X
	BGEQ	RETURN			; branch if X > 0
	MNEGF	R0, R0			; R0 = -PI/2
RETURN:	RSB				; return with result in R0

;
; 1 < |X|, error
;

ERROR:	PUSHL	(SP)			; return PC from JSB routine
	MOVZBL	#MTH$K_INVARGMAT, -(SP)	; condition value
	ASHL	#15, #1, R0		; R0 = result = reserved operand -0.0
					; goes to signal mechanism vector
					; (CHF$L_MCH_R0/R1) so error handler
					; can modify the result.
	CALLS	#2, G^MTH$$SIGNAL	; signal error and use real user's PC
					; independent of CALL vs JSB
	RSB				; return - R0 restored from CHF$L_MCH_R0/R1



	.SBTTL	MTH$ASIND  - Standard Single Precision Floating ASIND


;++
; FUNCTIONAL DESCRIPTION:
;
; ASIND  - single precision floating point function
;
; ASIND(X) is computed as:
;
;	If X = 0, then ASIND(X) = 0.
;	If X = 1, then ASIND(X) = 90.
;	If X = -1, then ASIND(X) = -90.
;	If 0 < |X| < 1, then ASIND(X) = ATAND(X/SQRT(1-X**2)).
;	If 1 < |X|, error.
;
; CALLING SEQUENCE:
;
;	asind.wf.v = MTH$ASIND(x.rf.r)
;
; INPUT PARAMETERS:

	LONG = 4			; define longword multiplier
	x = 1 * LONG			; Contents of x is the argument

; IMPLICIT INPUTS:	none
;
; OUTPUT PARAMETERS:
;
;	VALUE:	floating arcsine of the argument
;
; IMPLICIT OUTPUTS:	none
;
; COMPLETION CODES:	none
;
; SIDE EFFECTS:
;
; Signals: MTH$_INVARG if |X| > 1 with reserved operand in R0 (copied to
; the signal mechanism vector CHF$L_MCH_R0/R1 by LIB$SIGNAL).
; Associated message is: "INVALID ARGUMENT". Result is reserved
; operand -0.0 unless a user supplied (or any) error handler changes CHF$L_MCH_R0/R1.
;
; NOTE: This procedure disables floating point underflow, enables integer
; overflow.
;
;---


	.ENTRY	MTH$ASIND, ^M<IV, R2, R3, R4>
					; standard call-by-reference entry
					; disable DV (and FU), enable IV
	MTH$FLAG_JACKET			; flag that this is a jacket procedure in
					; case of an error in routine
					; If an error, convert signal to user PC
					; and resignal
	MOVF	@value(AP), R0		; R0 = |X| = @value(AP)
	BSBB	MTH$ASIND_R4		; call special ASIND routine
	RET				; return with result in R0


	.SBTTL	MTH$ASIND_R4 - Special ASIND routine

; Special ASIND - used by the standard routine, direct JSB call.
;
; CALLING SEQUENCE:
;	save anything needed in R0:R4
;	MOVF	..., R0			; input in R0
;	JSB	MTH$ASIND_R4
;	RSB				; return with result in R0
;

MTH$ASIND_R4::				; special ASIND routine
	MOVF	R0, R4			; save X in R4
	BEQL	D_RETURN		; Return ASIND(0) = 0

;
; 0 < |X|
;

	BICW	#^X8000, R0		; R0 = |X|
	CMPF	R0, S^#SF_1.0		; compare |X| with 1.0
	BGEQ	D_GEQ_TO_1.0		; branch if |X| >= 1.0

;
; 0 < |X| < 1.0
;

	MULF2	R0, R0			; R0 = X**2
	SUBF3	R0, S^#SF_1.0, R0	; R0 = 1.0 - X**2
	JSB	MTH$SQRT_R3		; R0 = SQRT(1-X**2)
	DIVF3	R0, R4, R0		; R0 = X/SQRT(1-X**2)
	JMP	MTH$ATAND_R4		; R0 = ATAND(X/SQRT(1-X**2))


;
; 1 =< |X| 
;

D_GEQ_TO_1.0:
	BGTR	ERROR			; branch to ERROR if |X| > 1.0


;
; |X| = 1.0
;

	MOVF	#LF_90, R0		; R0 = 90
	TSTF	R4			; test the sign of X
	BGEQ	RETURN			; branch if X > 0
	MNEGF	R0, R0			; R0 = -90
D_RETURN:
	RSB				; return with result in R0



	.END
