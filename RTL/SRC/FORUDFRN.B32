%TITLE 'FOR$$UDF_RN - NAMELIST input UDF level'
MODULE FOR$$UDF_RN (				! FORTRAN NAMELIST input UDF level
		IDENT = '1-003'			! File: FORUDFRN.B32 Edit: SBL1003
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	FORTRAN Language Support
!
! ABSTRACT:
!
!	This module contains the User Data Formatter level code for
!	FORTRAN NAMELIST input.
!
! ENVIRONMENT:	Runs at any access mode - AST reentrant
!
! AUTHOR: Steven B. Lionel, CREATION DATE: 11-July-1980
!
! MODIFIED BY:
!
! 1-001	- Original.  SBL 11-July-1980
! 1-002 - Correct call for syntax error.  Remove declaration of CALLG, not used.  SBL 18-Nov-1980
! 1-003 - Add diagram of NAMELIST descriptor block.  SBL 15-April-1981
!--


%SBTTL 'Declarations'
!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!

REQUIRE 'RTLIN:OTSLNK';				! Linkage definitions

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    FOR$$UDF_RN0 : JSB_UDF0 NOVALUE,		! Start NAMELIST processing
    PROCESS_LIST : CALL_CCB NOVALUE,		! Do bulk of NAMELIST processing
    FOR$$UDF_RN9 : JSB_UDF9 NOVALUE;		! End NAMELIST processing

!
! INCLUDE FILES:
!

LIBRARY 'RTLSTARLE';				! System symbols, typically from SYS$LIBRARY:STARLET.L32

LIBRARY 'RTLTPAMAC';				! TPARSE macro definitions

REQUIRE 'RTLIN:RTLPSECT';			! Define PSECT declarations macros

REQUIRE 'RTLIN:FORNML';				! Define NML$ fields

REQUIRE 'RTLML:OTSLUB';				! Logical unit block definitions

REQUIRE 'RTLML:OTSISB';				! Intra-statement block definitions
!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! PSECTS:
!
DECLARE_PSECTS (FOR);				! Declare PSECTs for FOR$ facility
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    FOR$$REC_RSN0 : JSB_UDF0 NOVALUE,		! Read a record
    FOR$$SIGNAL_STO: NOVALUE,
    LIB$TPARSE;					! Parse input records

EXTERNAL LITERAL
    FOR$_SYNERRNAM;				! Syntax error in NAMELIST input

EXTERNAL
    FOR$$A_NMLSTATE,				! TPARSE state tables
    FOR$$A_NMLKEYWD;				! TPARSE keyword block


%SBTTL 'FOR$$UDF_RN0 - NAMELIST input UDF level'
GLOBAL ROUTINE FOR$$UDF_RN0: JSB_UDF0 NOVALUE				! NAMELIST input initialization
     =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Initialize NAMELIST input.
!
! CALLING SEQUENCE:
!
!	JSB FOR$$UDF_RN0
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	CCB		Pointer to current logical unit block
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS:
!
!	NONE
!
! SIDE EFFECTS:
!
!	See PROCESS_LIST.
!
!--

    BEGIN

    EXTERNAL REGISTER
	CCB : REF BLOCK [, BYTE];

    !+
    ! Call PROCESS_LIST to do all the NAMELIST processing.  Note that
    ! this is done from the initialization call since there are no element
    ! transmit calls for NAMELIST.
    !-

    PROCESS_LIST ();

    RETURN;
    END;					! End of routine FOR$$UDF_RN0
!<BLF/PAGE>

%SBTTL 'PROCESS_LIST - Process NAMELIST input'
ROUTINE PROCESS_LIST				! Process NAMELIST input
    : CALL_CCB NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Process NAMELIST input.  Read records from the current unit until a
!	NAMELIST group with the specified name is found.  Process NAMELIST
!	assignments to user variables until the group end is found.
!
! CALLING SEQUENCE:
!
!	CALL PROCESS_LIST
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	CCB		Pointer to current logical unit block
!	ISB$A_FMT_BEG	Pointer to NAMELIST descriptor block
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Reads one or more records from the input file.  Performs zero or more
!	user variable assignments.
!
!--

!<BLF/PAGE>

!++
!   Each NAMELIST descriptor block has the following form:
!
!         3 3 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1
!         1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
!
!        +---------------------------------------------------------------+
!     0  |            Address of ASCIC name of NAMELIST group            |
!        +---------------------------------------------------------------+
!     1  |           Reserved           |   Count of NAMELIST variables  |
!        +---------------------------------------------------------------+
!     2  |              Address of ASCIC name of variable 1              |
!        +---------------------------------------------------------------+
!     3  |       Address of standard VAX descriptor for variable 1       |
!        +---------------------------------------------------------------+
!     4  |                              ...                              |
!        +---------------------------------------------------------------+
!     5  |              Address of ASCIC name of variable n              |
!        +---------------------------------------------------------------+
!     6  |       Address of standard VAX descriptor for variable n       |
!        +---------------------------------------------------------------+
!
!
!   The NAMELIST group name and the variable names which are pointed to in
!   the  NAMELIST  descriptor  block  are  upper  case  only.  The FORTRAN
!   compiler or other calling program is responsible for  case  conversion
!   of the name strings.  In NAMELIST input data, case is significant only
!   in character literals.  The run-time library is responsible  for  case
!   conversion of NAMELIST input data.
!   
!   The allowable data types in variable descriptors are  BU  (BYTE),  WU,
!   LU,  W,  L,  F,  D, G, H, T, FC, DC, and GC.  The allowable descriptor
!   classes are scalar and array.  For the  array  class  descriptor,  the
!   descriptor  flags  COLUMN,  COEFF,  and BOUNDS must be set, indicating
!   column-major order and the presence of coefficient and bounds  blocks.
!   The number of dimensions must not exceed 7.
!--

!<BLF/PAGE>

    BEGIN

    EXTERNAL REGISTER
	CCB : REF BLOCK [, BYTE];

    LOCAL
	PARAM_BLOCK : BLOCK [NML$K_BLKLENGTH, BYTE] FIELD (NML$FIELDS);

    !+
    ! Fill in basic fields of TPARSE parameter block
    !-

    CH$FILL (0, NML$K_BLKLENGTH, PARAM_BLOCK);	! Fill with zeroes
    PARAM_BLOCK [TPA$L_COUNT] = TPA$K_COUNT0;
    PARAM_BLOCK [NML$A_LISTBLOCK] = .CCB [ISB$A_FMT_BEG];	! NAMELIST block address
    PARAM_BLOCK [NML$A_CCB] = .CCB;		! CCB address

    !+
    ! Find name of NAMELIST group and read records until it is found.
    !-

	BEGIN
	LOCAL
	    GROUP_NAME: REF VECTOR [, BYTE],
	    RECORD_ADR: REF VECTOR [, BYTE];

	GROUP_NAME = ..PARAM_BLOCK [NML$A_LISTBLOCK];
	WHILE 1 DO
	    BEGIN

	    !+
	    ! Read a record and see if it has the right group name.
	    ! STRING will be the remainder of the line if the search succeeds.
	    !-

	    FOR$$REC_RSN0 ();			! Get next record
	    RECORD_ADR = .CCB [LUB$A_BUF_PTR];	! Record buffer address
	    IF RECORD_ADR [2] LSSA .CCB [LUB$A_BUF_END]	! Group name possible?
	    THEN
		IF .RECORD_ADR [1] EQLU %C'$' OR .RECORD_ADR [1] EQLU %C'&'
		THEN
		    BEGIN
		    LOCAL
			GROUPNAME_LEN;
		    GROUPNAME_LEN = .GROUP_NAME [0];
		    RECORD_ADR = RECORD_ADR [1];	! Start with second char
		    !+
		    ! Set up STRINGPTR to be the remainder of the record after
		    ! the first blank, if any.
		    !-

		    PARAM_BLOCK [TPA$L_STRINGPTR] = CH$FIND_CH ((.CCB [LUB$A_BUF_END] -
								 .RECORD_ADR),
								.RECORD_ADR,
								%C' ');
		    IF CH$FAIL (.PARAM_BLOCK [TPA$L_STRINGPTR])
		    THEN
			PARAM_BLOCK [TPA$L_STRINGPTR] = .CCB [LUB$A_BUF_END];
		    PARAM_BLOCK [TPA$L_STRINGCNT] = .CCB [LUB$A_BUF_END] -
						    .PARAM_BLOCK [TPA$L_STRINGPTR];

		    !+
		    ! Compare the group name with the string after the $ or &
		    !-

		    IF .GROUPNAME_LEN EQL ((.PARAM_BLOCK [TPA$L_STRINGPTR] - .RECORD_ADR) - 1)
		    THEN IF (INCR POS FROM 1 TO .GROUPNAME_LEN DO
			BEGIN
			IF .GROUP_NAME [.POS] NEQ
			    (
			    IF (.RECORD_ADR [.POS] GEQ %C'a') AND 
			       (.RECORD_ADR [.POS] LEQ %C'z')
			    THEN
				.RECORD_ADR [.POS] - (%C'a' - %C'A')
			    ELSE
				.RECORD_ADR [.POS]
			    )
			THEN
			    EXITLOOP 0;	! Mismatch found
			END) NEQ 0
		    THEN
			EXITLOOP;	! Match found
		    END;
	    END;		! Loop forever until EOF or match

	END;

    !+
    ! At this point, STRINGPTR and STRINGCNT reflect the rest of the record
    ! after the group name (possibly empty).  We now call LIB$TPARSE to
    ! analyze and execute any assignments contained in the NAMELIST input.
    ! The parse will terminate when a end-of-block or error is found.
    !-

    IF NOT LIB$TPARSE (PARAM_BLOCK, FOR$$A_NMLSTATE, FOR$$A_NMLKEYWD)
    THEN
	FOR$$SIGNAL_STO (FOR$_SYNERRNAM, PARAM_BLOCK [TPA$L_TOKENCNT]);

    RETURN;
    END;					! End of routine FOR$$UDF_RN0
!<BLF/PAGE>

%SBTTL 'FOR$$UDF_RN9 - Terminate NAMELIST input'
GLOBAL ROUTINE FOR$$UDF_RN9 				! Terminate NAMELIST input
    : JSB_UDF9 NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Terminate NAMELIST input.  This procedure is necessary because 
!	FOR$IO_END dispatches to a UDF9 routine for all statement types.
!
! CALLING SEQUENCE:
!
!	JSB FOR$$UDF_RN9
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    RETURN;

    END;					! End of routine FOR$$UDF_RN9
!<BLF/PAGE>

END						! End of module FOR$$UDF_RN

ELUDOM
