	.TITLE	LIB$$PACK_ARITH		PACKED ARITHMETIC
	.IDENT	/1-004/			; FILE:LIBPKARIT.MAR EDIT:LEB1004

;
;			  COPYRIGHT (c) 1982 BY
;	      DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.
;
; THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED
; ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE
; INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER
; COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY
; OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY
; TRANSFERRED.
;
; THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE
; AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT
; CORPORATION.
;
; DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE OR  RELIABILITY  OF  ITS
; SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.
;
;
;	VERSION: 1
;
;	HISTORY:
;
;	AUTHOR:
;		Linda E. Benson		1-August-1981
;
;	MODIFIED BY:
;
;
;

	.SBTTL	HISTORY		; Detailed current edit history

;
; Edit history for Version 1 of PACKARITH
;
; 1-001 Original LEB 01-Aug-81
; 1-002 Change shared external reference to G^ and added PSECT declarations
;	_STR$DATA and _STR$CODE.  RNH 25-Sep-81
; 1-003 Changed PSECT declarations to use LIB$ prefixes instead of STR$
;	prefixes.  Also changed code to now return a status instead of
;	signalling.  Supplied default info on parameters to the routines
;	and changed the order of some of the input parameters to conform
;	to the calling standard.  LEB 29-DEC-81
; 1-004 Fixed the ASHP in LIB$$CVT_STR_PACK_R9 so it doesn't use overlapping
;	operands.  A similar fix was made to LIB$$MUL_PACK_R10.  LEB 1-APR-82.
;

	.SBTTL 	DECLARATIONS

;
; INCLUDE FILES
;

;
; EXTERNAL SYMBOLS
;

	.DSABL		GBL				;\Prevent undefined symbols
							;/from being automatically global

	.EXTRN		LIB$STOP			; Signal a condition and stop
	.EXTRN		LIB$_INVARG			; Invalid argument
	.EXTRN		SS$_NORMAL			; Successful completion
	.EXTRN		LIB$AB_CVTTP_U
	.EXTRN		LIB$AB_CVTPT_U
;
; MACROS
;
;	NONE
;

;
; PSECT DECLARATIONS
;

	.PSECT	_LIB$DATA	RD, WRT, NOEXE, NOSHR, PIC

;
; EQUATED SYMBOLS
;

; 
; CONSTANTS
;

RADIX:		.PACKED		1000000000000000
RADIX_M_1:	.PACKED		999999999999999
ZERO:		.PACKED		000000000000000
FIVE:		.PACKED		5
ONE:		.PACKED		1
BLOCK:		.BLKB		8

;
; CODE PSECT
;

	.PSECT	_LIB$CODE	RD, NOWRT, EXE, SHR, PIC


	.SBTTL	LIB$$CVT_STR_PACK_R9	Converts a string to packed array

;++
; FUNCTIONAL DESCRIPTION:
;
;	This routine converts a string of decimal digits to an array of
;	packed decimal values.  Each entry in the array contains 15 digits.
;
; FORMAL PARAMETERS:
;   addr.rnu.r		R6	Address of string of decimal digits
;   num_digs.rl.v	R7	Number of digits in string
;   num_ents.rl.v	R8	Number of entries in array
;   retn_str.wp.r	R9	Address of packed decimal array
;
; IMPLICIT INPUTS:
;	-NONE
;
; ROUTINE VALUE:
;	-NONE
;
; COMPLETION CODES:
;	-NONE
;
; MACROS:
;	-NONE
;
; SIDE EFFECTS:
;	-NONE
;--

;+
; For reference:
;		R6	Address of string
;		R7	Number of digits in string
;		R8	Number of entries in array
;		R9	Address of packed decimal array
;-

LIB$$CVT_STR_PACK_R9::
	MOVAB	-1(R6)[R7], R7
	MOVAQ	-1(R9)[R8], R8
1$:	ACBL	R7, #15, R6, 2$
	BRB	4$
2$:	ACBL	R8, #8, R9, 3$
	RSB
3$:	CVTTP	#15, -15(R6), LIB$AB_CVTTP_U, #15, -8(R9)
	BRB	1$

4$:	SUBL	R6, R7
	ADDL	#16, R7
	CVTTP	R7, -15(R6), LIB$AB_CVTTP_U, #15, (R9)
	SUBL3	R7, #15, R7
	ASHP	R7, #15, (R9), #0, #15, BLOCK
	MOVQ	BLOCK, (R9)
	BRB	6$
5$:	MOVP	#15, ZERO, (R9)
6$:	ACBL	R8, #8, R9, 5$
	RSB	


	.SBTTL	LIB$$CALC_D_R7		Calculates normalization factor

;++
; FUNCTIONAL DESCRIPTION:
;
;	This routine calculates the normalization factor, d = int(b/(v1+1))
;	NOTE: This routine returns R0 = 1 is d = 1 and 0 otherwise.
;
; FORMAL PARAMETERS:
;    addr_v1.rp.r	R6	Address of v1
;    addr_d.rp.r	R7	Address of d
;
; IMPLICIT INPUTS:
;	-NONE
;
; ROUTINE VALUE:
;	-NONE
;
; COMPLETION CODES:
;	-NONE
;
; MACROS:
;	-NONE
;
; SIDE EFFECTS:
;	-NONE
;--

;+
; For reference:
;		R6	Address of v1
;		R7	Address of d
;-

LIB$$CALC_D_R7::
	SUBL	#12, SP				; Allocate space on stack for
						;   intermediate results
	ADDP6	#1, ONE, #15, (R6), #16, (SP)	; RESULT = v1+1
	DIVP	#16, (SP), #16, RADIX, #15, (R7); (R7) = d, R0 = 0
	CMPP4	#1, ONE, #15, (R7)		; Check for d = 1
	BNEQ	1$				; d neq 1, return status = 0
	MOVB	#1, R0				; Return status = 1
1$:	ADDL	#12, SP				; Deallocate stack
	RSB	

	.SBTTL	LIB$$CALC_Q_R9		COMPUTE A QUOTIENT DIGIT

;++
; FUNCTIONAL DESCRIPTION:
;
; This routine calculates an approximation to single quotient digit.  
; The initial computation may not be accurate enough.  In the latter
; case, the initial value is "adjusted" by one.  The adjustment process
; will only be attempted twice.
;
; FORMAL PARAMETERS:
;    addr_v1.rp.r	R6	Address of v(1)
;    addr_uj.rp.r	R7	Address of u(j)
;    flag.rl.v		R8	flag - A non-zero value indicates that the 
;			        divisor, B, consists of only one 15 digit chunk
;			        and consequently an abbreviated algorithm for 
;			        computing q(j) can be used.
;
;    addr_qj.wp.r	R9	Address of q(j)
;
; IMPLICIT INPUTS:
;	-NONE
;
; ROUTINE VALUE:
;	-NONE
;
; COMPLETION CODES:
;	-LIB$_INVARG
;	-SS$_NORMAL
;
; MACROS:
;	-NONE
;
; SIDE EFFECTS:
;	-NONE
;--


;+
; The following is the equation that will calculate
; a quotient digit.
; q = (u(j)*RADIX + u(j+1))/v(1);
; For reference:
;		R6	Address of v(1)
;		R7	Address of u(j)
;		R8	flag - A non-zero value indicates that the divisor, B, 
;			       consists of only one 15 digit chunk, and conse-
;			       quently an abbreviated algorithm for computing 
;			       q(j) can be used.
;		R9	Address of q(j)

LIB$$CALC_Q_R9::
	SUBL	#32, SP				; Allocate stack space for
						;    intermediate calculations
	ASHP	#15, #15, (R7), #0, #30, (SP)	; (SP) = u(j)*radix
	ADDP4	#15, 8(R7) ,#30, (SP)		; RESULT = u(j)*radix + u(j+1)
	CMPP3	#15, (R6), (R7)			; Compare u(j) and V(1)
	BNEQ	1$				;
	MOVP	#15, RADIX_M_1, (R9)		; q = radix - 1
	BRB	2$
1$:	DIVP	#15, (R6), #30, (SP), #15, (R9)	; (R9) = q
2$:	TSTL	R8				; see if adjustment is needed
	BNEQ	RETURN				; R8 = 0 means no adjustment

	MULP	#15, (R9), #15, (R6), #30, 16(SP)
						; 16(SP) = V1 = q*v(1)
	SUBP4	#30, 16(SP), #30, (SP)	     	; (SP) = U1 = 
						;     u(j)*radix+u(j+1)-V1
	ASHP	#15, #30, (SP), #0, #30, 16(SP)	; 16(SP) = U2 = U1*radix
	ADDP4	#15, 16(R7), #30, 16(SP)	; 16(SP) = U2+u(j+2) = U3
	MULP	#15, (R9), #15, 8(R6), #30, (SP); (SP) = V2 = q*v(2)
	SUBP4	#30, (SP), #30, 16(SP)		; 16(SP) = U3 - V2
	BGEQ	RETURN

;
; Quotient digit must be adjusted.
; 

	SUBP4	#1, ONE, #15, (R9)		; (R9) = q - 1
	ASHP	#15, #15, (R6), #0, #30, (SP)	; (SP) = v(1)*radix
	ADDP4	#15, 8(R6), #30, (SP)		; (SP) = v(1)*radix+v(2)
	ADDP4	#30, (SP), #30, 16(SP)		; 16(SP) = new test value
	BGEQ	RETURN

;
; Quotient digit must be adjusted again.
; 

	SUBP4	#1, ONE, #15, (R9)		; (R9) = q - 1
	ASHP	#15, #15, (R6), #0, #30, (SP)	; (SP) = v(1)*radix
	ADDP4	#15, 8(R6), #30, (SP)		; (SP) = v(1)*radix+v(2)
	ADDP4	#30, (SP), #30, 16(SP)		; 16(SP) = new test value
	BGEQ	RETURN

;
; If adjustment needs to be made more than twice, something is wrong.
;

ERR:	MOVL	#LIB$_INVARG,R0
	RSB

RETURN:	ADDL	#32, SP				; Deallocate stack space
	MOVL	#SS$_NORMAL,R0
	RSB


	.SBTTL	LIB$$ADJUST_Q_R9

;++
; FUNCTIONAL DESCRIPTION:
;
;	This routine is used to adjust the intermediated results of the divi-
;       sion algorithm.  In particular when the difference of v(j)v(j+1)...
;	v(j+m) and q*u(1)u(2)...u(m) is negative, this routine is called to 
;	subtract one from the value of q and add u(1)u(2)...u(m) to the
;	previously mentioned difference to get a positive result.
;
; FORMAL PARAMETERS:
;    b_chunks.rl.v	R6	Number of chunks in B ( i.e. the value of m)/
;				Maximum value of index
;    addr_u1.rp.r	R7	Addr of u(j)
;    addr_v1.rp.r	R8	Addr of v(1)
;    addr_q.mp.r	R9	Addr of q / carry flag
;
; IMPLICIT INPUTS:
;	-NONE
;
; ROUTINE VALUE:
;	-NONE
;
; COMPLETION CODES:
;	-NONE
;
; MACROS:
;	-NONE
;
; SIDE EFFECTS:
;	-NONE
;--

;+
; For reference:
;		R6	Number of chunks in B ( i.e. the value of m) / Maximum
;			value of index
;		R7	Addr of u(j+1)
;		R8	Addr of v(1)
;		R9	Addr of q / carry flag
;-

LIB$$ADJUST_Q_R9::
	SUBP4	#1, ONE, #15, (R9)	; Decrement q
	CLRL	R9			; Set carry flag to 0
	MOVAQ	-8[R6], R6		; Set upper index value
	BRB	2$
1$:	BBCC	#0, R9, 2$		; Check and clear carry flag
	ADDP4	#1, ONE, #15, (R7)[R6]	; Add in carry from last iteration
	BVC	2$			; Branch if no carry
	MOVB	#1, R9			; Set carry flag
2$:	ADDP4	#15, (R8)[R6], #15, (R7)[R6]
					; Add u(m-i) to v(j+m-i)
	BVC	3$			; Branch if no carry
	MOVB	#1, R9			; Set carry flag
3$:	ACBL	#0, #-8, R6, 1$		; Loop until all chunks are processed
	RSB
	

	.SBTTL	LIB$$MUL_PACK_R10	  MULTIPLY PACKED STRINGS
;++
; FUNCTIONAL DESCRIPTION:
;
;	This routine multiplies an array of 15 digit packed decimal values
;	by a 15 digit packid decimal multiplier and stores the result in an
;	array of 15 digit packed decimal values.  The size of the result
;	array is either the same as the size of the multiplicand or one entry
;	larger, depending on the passed parameters
;
;		product <-- multiplicand * multiplier
;
; FORMAL PARAMETERS:
;    mulpr.rp.r		R6	Addr of the packed multiplier
;    mulpd.rp.r		R7	Addr of the packed multiplicand array
;    len_mulpd.rl.v	R8	Length of packed multiplicand array
;    len_prod.rl.v	R9	Length of packed product array
;    prod.wp.r		R10	Addr of the packed product array
;
; IMPLICIT INPUTS:
;	-NONE
;
; ROUTINE VALUE:
;	-NONE
;
; COMPLETION CODES:
;	-NONE
;
; MACROS:
;	-NONE
;
; SIDE EFFECTS:
;	-NONE
;--

;+
; For reference:
;		R6	Addr of the packed multiplier
;		R7	Addr of the packed multiplicand array
;		R8	Length of packed multiplicand array
;		R9	Length of packed product array
;		R10	Addr of the packed product array
;-

LIB$$MUL_PACK_R10::
	SUBL	#24, SP			; Allocate stack space for intermediate
					;   results
	SUBL	R8, R9			; R9 = difference in product and 
					;       multiplicand array lengths
	MOVAQ	-8[R8], R8		; R8 = largest permissible index value
	CLRQ	(SP)			; Set CARRY = 0 for first iteration
1$:	MULP	#15, (R6), #15, (R7)[R8], #30, 8(SP)
					; 8(SP) = the product of the ith entry
                                	;          of the multiplicand and the 
					;          multiplier.
	ADDP4	#15, (SP), #30, 8(SP)	; Add in carry from previous iteration
	MOVP	#15, 16(SP), (R10)[R8]	; Store low order 15 digits of this 
					;    iteration in the ith entry of the
					;    product array
	MOVB	#^X0C, 16(SP)		; Add a low order zero and plus sign to
					;    to high order digits
	ASHP	#-1, #16, 8(SP), #0, #15, BLOCK
	MOVQ	BLOCK, (SP)
					; CARRY = High 15 digits of this 
					;         iteration
	ACBL	#0, #-8, R8, 1$		; Loop until all entries in the multi-
					;    plicand array have been processed
	TSTL	R9			; Check if the carry from the last iter-
					;    ation should be returned with the
					;    product
	BEQL	2$			;
	MOVP	#15, (SP), (R10)[R8]	; Return carry digits
2$:	ADDL	#24, SP			; Deallocate stack space
	RSB				; Return


	.SBTTL	LIB$$SUB_PACK_R8	SUBTRACT PACKED STRINGS

;++
; FUNCTIONAL DESCRIPTION:
;
;	This routine subtracts one array of packed decimal values from another.
;	The lengths of the input strings are assumed to be equal.
;		difference <-- difference - subtrahend
;	NOTE:  This routine returns R0 = 1 if the difference is less than zero
;               and 0 otherwise
;
; FORMAL PARAMETERS:
;    num_digs.rl.v	R6	Number of 15 digits chunks minus one in subtrahend
;    addr_mind.rp.r	R7	Address of minuend (difference) array
;    addr_subd.rp.r	R8	Address of subtrahend array
;
; IMPLICIT INPUTS:
;	-NONE
;
; ROUTINE VALUE:
;	-NONE
;
; COMPLETION CODES:
;	-NONE
;
; MACROS:
;	-NONE
;
; SIDE EFFECTS:
;	-NONE
;--

;+
; For reference:
;		R6	Number of 15 digits chunks minus one in subtrahend
;		R7	Address of minuend (difference) array
;		R8	Address of subtrahend array
;-

LIB$$SUB_PACK_R8::
	MOVAQ	0[R6], R6		; Compute largest index value
	BRB	2$			; Not necessary to check for borrow
					;    on first iteration
1$:	TSTL	R0			; Check for borrow on last iteration
	BEQL	2$			; Branck if no borrow
	SUBP4	#1, ONE, #15, (R7)[R6]	; Process borrow. 
2$:	SUBP4	#15, (R8)[R6], #15, (R7)[R6]	
					; Subtract one 15 digit chunk.  Note
					;   that R0 = 0 after execution.
	BGEQ	3$			; Branch if no borrow is necessary
	ADDP4	#16, RADIX, #15, (R7)[R6]
					; Adjust last diference to make it >= 0
	MOVB	#1, R0			; Set borrow flag
3$:	ACBL	#0, #-8, R6, 1$		; Loop until all chunks are processed
	RSB


	.SBTTL	LIB$$ROUND_R7		Rounds packed decimal array

;++
; FUNCTIONAL DESCRIPTION:
;
;	This routine rounds an array of packed decimal values to a given
;	value of significant digits
;
; FORMAL PARAMETERS:
;    addr_dig.rp.r	R6	Address of 15 digit chunk in which rounding
;				occurs
;    position.rl.v	R7	Position within low order chunk at which the 
;				rounding occurs
;
; IMPLICIT INPUTS:
;	-NONE
;
; ROUTINE VALUE:
;	-NONE
;
; COMPLETION CODES:
;	-NONE
;
; MACROS:
;	-NONE
;
; SIDE EFFECTS:
;	-NONE
;--

;+
; For reference:
;		R6	Address of 15 digit chunk in which rounding occurs
;		R7	Position within low order chunk at which the 
;			rounding occurs
;-

LIB$$ROUND_R7::
	SUBL	#8, SP				; Allocate stack space for 
						;    intermediate results
	ASHP	R7, #1, FIVE, #0, #15, (SP)	; Get value to add to
						;    array to effect rounding
	ADDP4	#15, (SP), #15, (R6)		; Add rounding value to array
	BVC	2$				; If no carry, we are done
1$:	SUBL	#8, R6				; Get addr of next higher chunk
	ADDP4	#1, ONE, #15, (R6)		; Propagate carry
	BVS	1$				; If necessary continue to 
						;    propagate carry
2$:	ADDL	#8, SP				; Deallocate stack space
	RSB					


	.SBTTL	LIB$$CVT_PACK_STR_R8	Converts a packed array to string

;++
; FUNCTIONAL DESCRIPTION:
;
;	This routine converts an array of packed decimal values to a string 
;	of decimal digits.  Each entry in the array contains 15 digits.
;
; FORMAL PARAMETERS:
;    array.rp.ra	R6	Address of packed decimal array
;    array_ent.rl.v	R7	Number of entries in array
;    ret_string.wt.r	R8	Address of return string
;
; IMPLICIT INPUTS:
;	-NONE
;
; ROUTINE VALUE:
;	-NONE
;
; COMPLETION CODES:
;	-NONE
;
; MACROS:
;	-NONE
;
; SIDE EFFECTS:
;	-NONE
;--

;+
; For reference:
;		R6	Address of packed decimal array
;		R7	Number of entries in array
;		R8	Address of return string
;-

LIB$$CVT_PACK_STR_R8::
	MULL3	#15, R7, R3
	ADDL	R8, R3		; R3 = R8 + 15*R7
	MOVAQ	-8[R7], R7
1$:	CVTPT	#15, (R6)[R7], LIB$AB_CVTPT_U, #15, -15(R3)
	ACBL	#0, #-8, R7, 1$ ;\Decr counter of # of chunks
				;/of 15 packed digits
	RSB

	.END
	
