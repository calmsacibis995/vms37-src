MODULE LIB$SIG_TO_RET (	! Library routine to convert a signal to a return
	IDENT = '1-010'		! File: LIBSIGRET.B32
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  Utility Library
!
! ABSTRACT:
!
!	LIB$SIG_TO_RET converts any signaled condition value into
!	an ordinary procedure return to the caller of the procedure
!	which established the handler which called LIB$SIG_TO_RET.
!
! ENVIRONMENT:  User mode, re-entrant, AST level or not or mixed.
!
! AUTHOR:	Thomas N. Hastings CREATION DATE:  09-June-1977
!
! MODIFIED BY:
!
! 	Thomas N. Hastings, 09-June-1977: VERSION 01
! 01	-  original
! 01-06	- Change to STARLET library.  DGP 20-Apr-78
! 01-07	- Change REQUIRE files for VAX system build.  DGP 28-Apr-78
! 01-08	- Change STARLET to RTLSTARLE to avoid conflicts.  DGP 1-May-78
! 01-09	- Change file name to LIBSIGRET.B32, and change the name of
!	   the REQUIRE file similarly.
! 1-010	- Update the copyright notice.  JBS 16-NOV-78
!--

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
	LIB$SIG_TO_RET;		! Convert a signal to a return

!
! INCLUDE FILES:
!

	REQUIRE 'RTLIN:RTLPSECT';	! Define DECLARE_PSECTS  macro
	LIBRARY 'RTLSTARLE';	! STARLET library for macros and symbols

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! PSECT DECLARATIONS:
!

	DECLARE_PSECTS (LIB);	! declare PSECTs LIB LIB$ facility

!
! OWN STORAGE:
!

!
! EXTERNAL REFERENCES:
!


GLOBAL ROUTINE LIB$SIG_TO_RET  (	! Convert a signal to a return
	SIG_ARGS_ADR,	! Adr. of signal args vector
	MCH_ARGS_ADR)	! Adr. of mechanism args vector
		=	! Value is success, unless failure from SYS$UNWIND

!++
! FUNCTIONAL DESCRIPTION:
!
!	LIB$SIG_TO_RET is called with the argument list passed to a condition
!	handler by the condition handling facility.  It converts the
!	signaled condition into a return to the procedure which called the
!	procedure which established the handler handling the signal.  The
!	stack is unwound to the caller of the establisher and the condition code
!	is returned as the value in R0.
!
!	In BLISS the argument list can be passed in toto by using the
!	BUILTIN function CALLG and AP register, thus:
!
!		status = CALLG (.AP, LIB$SIG_TO_RET);
!
!	Or more simply by: ENABLE LIB$SIG_TO_RET ();
!	If there is no need for the handler to do any more processing
!
! FORMAL PARAMETERS:
!
!	SIG_ARGS_ADR.rl.ra	Adr. of signal args vector
!	MCH_ARGS_ADR.ml.ra	Adr. of mechanism args vector
!	any other args to handler
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	SS$_NORMAL if SYS$UNWIND ok, else error codes form SYS$UNWIND.
!
! SIDE EFFECTS:
!
!	Causes the stack to marked to be unwound to the caller of the
!	establishing procedure of the handler which was called on this signal.
!
!--

    BEGIN
    MAP
	SIG_ARGS_ADR: REF BLOCK[8, BYTE],	! Signal vector
	MCH_ARGS_ADR: REF BLOCK[20, BYTE];	! mechanism vector

    !+
    ! If this is unwind condition, just let unwinding continue since
    ! propably it was this handler which invoked the unwind.
    !-

    IF .SIG_ARGS_ADR[CHF$L_SIG_NAME] EQL SS$_UNWIND THEN RETURN SS$_NORMAL;

    !+
    ! Copy condition value to saved image of R0
    !-

    MCH_ARGS_ADR[CHF$L_MCH_SAVR0] = .SIG_ARGS_ADR[CHF$L_SIG_NAME];

    !+
    ! Set to unwind stack using default depth and default new PC,
    ! namely return to caller of the procedure which established the handler
    !-

    RETURN $UNWIND ();
    END;			! End of LIB$SIG_TO_RET routine

END				! End of module LIB$SIG_TO_RET
ELUDOM
