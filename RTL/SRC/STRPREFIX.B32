MODULE STR$PREFIX (! Prefix a string to the beginning of the destination

		IDENT = '1-005'	! File: STRPREFIX.B32	Edit: RKR1005

		  ) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY: String support library
!
! ABSTRACT: 
!	This routine prefixes the input string onto the beginning of the
!	the destination string.  It will handle strings of any supported
!	dtype or class.
!
! ENVIRONMENT: User mode, AST level or not or mixed
!
! AUTHOR: R. Will, CREATION DATE: 1-Dec-79
!
! MODIFIED BY:
!
! R. Will, 1-Dec-79 : VERSION 01
! 1-001	- Original
! 1-002 - String speedup, status from macros.  RW  11-Jan-1980
! 1-003 - Enhance to recognize additional classes of descriptors by
!	  using $STR$GET_LEN_ADDR to extract length and address
!	  of 1st byte of data of source string.  Remove string
!	  interlocking code.	RKR 22-APR-81.
! 1-004 - Fix bug in code where class_vs destination must be truncated.
!	  (non-overlap case).
!	  RKR 25-AUG-1981
! 1-005 - Speed up code.  RKR 7-OCT-1981.
!--
!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE 
		(EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!

REQUIRE 'RTLIN:STRLNK';		! Use require file with string linkages

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    STR$PREFIX;			! prefix the input string to the 
				! beginning of the destination string

!
! INCLUDE FILES:
!

REQUIRE 'RTLIN:RTLPSECT';	! Declare PSECTS code
REQUIRE 'RTLIN:STRMACROS';	! use string macros to write code
LIBRARY 'RTLSTARLE';		! STARLET library for macros and symbols

!
! MACROS : NONE
!

!
! EQUATED SYMBOLS: NONE
!

!
! PSECT DECLARATIONS
!

DECLARE_PSECTS (STR);

!
! OWN STORAGE: NONE
!

!
! EXTERNAL REFERENCES:
!
EXTERNAL LITERAL
    STR$_ILLSTRCLA,			! signal illegal class error
    STR$_TRU,				! warning, truncation
    STR$_NORMAL;			! successful append

EXTERNAL ROUTINE
    LIB$STOP;				! signal errors

GLOBAL ROUTINE STR$PREFIX ( ! Prefix a string to the start of another

		   DEST_DESC,	! pointer to destination descriptor
		   SRC_DESC	! pointer to source descriptor

			  ) =

!++
! FUNCTIONAL DESCRIPTION:
!
! 	This routine takes a source string of any supported dtype and 
!	class, and prefixes that string to the beginning of the
!	destination string, which may be of any supported class or 
!	dtype , except that it is impossible to add something to the 
!	beginning of a string having fixed length semantics so an error
!	will always be signalled in that case
!
! FORMAL PARAMETERS:
!
!	DEST_DESC.wt.dx		pointer to destination descriptor
!	SRC_DESC.rt.dx		pointer to source descriptor
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION CODES:
!
!	STR$_NORMAL		Success
!	STR$_TRU		Truncation occurred.   Warning.
!
! SIDE EFFECTS:
!
!	STR$_ILLSTRCLA may be signalled if the destination string has 
!	fixed length semantics or undefined class.
!	Dynamic string space may be allocated or deallocated
!
!--

    BEGIN

    LOCAL
	IN_LEN,			! length of source string
	IN_ADDR,		! address of 1st byte of source string
	RETURN_STATUS;		! statuses from macros

    MAP 
	SRC_DESC  : REF $STR$DESCRIPTOR,
	DEST_DESC : REF $STR$DESCRIPTOR;

    RETURN_STATUS = 1 ;		! Assume success to follow

!+
! Extract length and address of 1st data byte of source string.
! Signal if a fatal error results.
!-
    $STR$GET_LEN_ADDR ( SRC_DESC, IN_LEN, IN_ADDR) ;

!+
! algorithm differs based on the class of the destination descriptor
!-

    CASE .DEST_DESC [DSC$B_CLASS] 
    FROM DSC$K_CLASS_Z TO DSC$K_CLASS_VS OF
	SET

!+
! dynamic destination strings
! ***************************
!-

	[DSC$K_CLASS_D]:
	    BEGIN
	    IF
	    %IF %BLISS (BLISS16) OR %BLISS (BLISS36)
	    %THEN				! except on VAX
	    $STR$OVERLAP (			! If dest overlaps
		.DEST_DESC [DSC$A_POINTER],	! with where it will be
		.DEST_DESC [DSC$W_LENGTH],	! written
		CH$PLUS (.DEST_DESC [DSC$A_POINTER], 
			 .DEST_DESC [DSC$W_LENGTH]),
		.DEST_DESC [DSC$W_LENGTH])
	    OR
	    %FI
	    $STR$OVERLAP (			! or if dest will be 
						! written on top of
		.IN_ADDR,			! source when moved
		.IN_LEN, 
		CH$PLUS (.DEST_DESC [DSC$A_POINTER], .IN_ADDR),
		.DEST_DESC [DSC$W_LENGTH])
	    OR					! or if destination not
						! large enough for
	    ($STR$NEED_ALLOC (			! prefix
		.IN_ADDR + .DEST_DESC [DSC$W_LENGTH],
		($STR$DYN_AL_LEN (DEST_DESC) ) ) )
	    THEN				! then allocate a temp 
						! and use it for
		BEGIN				! building output string
		LOCAL TEMP_DESC : $STR$DESCRIPTOR;
		!+
		! If allocate is successful, continue the operation, 
		! otherwise remember a fatal error
		!-
		IF (RETURN_STATUS = $STR$ALLOCATE (
		    .IN_LEN + .DEST_DESC [DSC$W_LENGTH],
		    TEMP_DESC))
		THEN
		    BEGIN
		    !+
		    ! move source to temp
		    !-
		    CH$MOVE (.IN_LEN, .IN_ADDR, 
			     .TEMP_DESC [DSC$A_POINTER]);

		    !+
		    ! move destination to end of temp
		    !-
		    CH$MOVE (.DEST_DESC [DSC$W_LENGTH],
			     .DEST_DESC [DSC$A_POINTER],
			     CH$PLUS (.TEMP_DESC [DSC$A_POINTER], 
				      .IN_LEN));

		    !+
		    ! switch temp and destination descriptors
		    !-
		    $STR$EXCH_DESCS (TEMP_DESC, DEST_DESC);

		    !+
		    ! deallocate temp
		    !-
		    RETURN_STATUS = $STR$DEALLOCATE (TEMP_DESC);
		    END;
		END

	    ELSE

		BEGIN
		!+
		! move destination down
		!-
		CH$MOVE (.DEST_DESC [DSC$W_LENGTH],
			 .DEST_DESC [DSC$A_POINTER],
			 CH$PLUS (.DEST_DESC [DSC$A_POINTER], 
				  .IN_LEN));

		!+
		! move source in front of it
		!-
		CH$MOVE (.IN_LEN, .IN_ADDR, .DEST_DESC [DSC$A_POINTER]);

		!+
		! readjust length of output
		!-
		DEST_DESC [DSC$W_LENGTH] = .DEST_DESC [DSC$W_LENGTH] +
					   .IN_ADDR;
		END;
	    END;


!+
! Varying string destination
! **************************
!-

	[DSC$K_CLASS_VS]:
	    BEGIN
	    LOCAL
		OUT_LEN,	! current destination length
		OUT_ADDR,	! current pointer to destination
		TOT_LEN;	! MIN of sum of IN_LEN + OUT_LEN
				! and MAXSTRLEN

	    !+
	    ! set up current length and address of 1st byte of data for
	    ! a varying string destination.
	    !-
	    OUT_LEN = .(.DEST_DESC [DSC$A_POINTER])<0,16> ;
	    OUT_ADDR = .DEST_DESC [DSC$A_POINTER] + 2 ;
	    TOT_LEN = MIN ( .IN_LEN + .OUT_LEN, 
			    .DEST_DESC [DSC$W_MAXSTRLEN]) ;

	    IF
	    %IF %BLISS (BLISS16) OR %BLISS (BLISS36)
	    %THEN				! except on VAX
	    $STR$OVERLAP (			! If dest overlaps
		.OUT_ADDR,			! with where it will be
		.OUT_LEN,			! written
		CH$PLUS (.OUT_ADDR, 
			 .OUT_LEN,
		.OUT_LEN)
	    OR
	    %FI
	    $STR$OVERLAP (			! or if dest will be 
						! written on top of
		.IN_ADDR,			! source when moved
		.IN_LEN, 
		CH$PLUS (.OUT_ADDR, .IN_ADDR),
		.OUT_LEN)
	    THEN				! then allocate a temp 
						! and use it for
						! building output string
		BEGIN		! Overlap case
		LOCAL TEMP_DESC : $STR$DESCRIPTOR;
		!+
		! If allocate is successful, continue the operation, 
		! otherwise remember a fatal error
		!-
		IF (RETURN_STATUS = $STR$ALLOCATE (
		    .IN_LEN + .OUT_LEN,
		    TEMP_DESC))
		THEN
		    BEGIN	! copy via temp descr after succ alloc
		    !+
		    ! move source to temp
		    !-
		    CH$MOVE (.IN_LEN, .IN_ADDR, 
			     .TEMP_DESC [DSC$A_POINTER]);

		    !+
		    ! move destination to end of temp
		    !-
		    CH$MOVE (.OUT_LEN,
			     .OUT_ADDR,
			     CH$PLUS (.TEMP_DESC [DSC$A_POINTER], 
				      .IN_LEN));

		    !+
		    ! copy temp to varying string destination
		    !-
		    CH$MOVE ( .TOT_LEN, 
			      .TEMP_DESC [DSC$A_POINTER], 
			      .OUT_ADDR) ;

		    !+
		    ! deallocate temp
		    !-
		    RETURN_STATUS = $STR$DEALLOCATE (TEMP_DESC);
		    END;	! copy via temp descr after succ alloc
		END		! Overlap case

	    ELSE

		BEGIN		! non-overlap case
		!+
		! move destination down within destination string
		!-
		CH$MOVE (MIN ( .OUT_LEN, 
				MAX (
			       .DEST_DESC [DSC$W_MAXSTRLEN] - .IN_LEN,
				 0)),
			 .OUT_ADDR,
			 CH$PLUS (.OUT_ADDR, 
				  .IN_LEN));

		!+
		! move source in front of it
		!-
		CH$MOVE (MIN (.IN_LEN, 
			      .DEST_DESC [DSC$W_MAXSTRLEN]),
			 .IN_ADDR, 
			 .OUT_ADDR);

		END;		! non-overlap case

	    !+
	    ! readjust length of output -- the CURLEN field
	    !-
	    (.DEST_DESC [DSC$A_POINTER])<0,16> = .TOT_LEN ;

	    !+
	    ! if truncation occurred in copying, make a note of it
	    !-
	    IF .IN_LEN + .OUT_LEN GTRU .DEST_DESC [DSC$W_MAXSTRLEN]
	    THEN RETURN_STATUS = STR$_TRU ;

	    END;		! of DSC$K_CLASS_VS

!+
! all other classes of descriptors describe strings that can't be 
! prefixed or are unsupported classes, or are unknown classes.
!-
	[INRANGE, OUTRANGE]:
	    RETURN_STATUS = STR$_ILLSTRCLA;
	TES;

    $STR$SIGNAL_FATAL (RETURN_STATUS);		! signal severe errors
    RETURN .RETURN_STATUS;			! 
    END;					! End of STR$PREFIX
END				!End of module
ELUDOM
