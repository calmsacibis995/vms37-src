MODULE STR$COPY (			! Copy one string to another

		IDENT = '1-013'	! File: STRCOPY.B32	Edit: RKR1013

		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY: String support library
!
! ABSTRACT:
!
!	This module copies one string of any supported class and any 
! supported dtype to a second string of any supported class and any 
! supported dtype.
!
! ENVIRONMENT: User mode, AST level or not or mixed
!
! AUTHOR: R. Will,  CREATION DATE: 20-Jan-79
!
! MODIFIED BY:
!
! 	R. Will, 20-Jan-79: VERSION 01
! 01	- original
! 02	- add by reference entries, rename by descriptor entries 15-Mar-79 RW
! 1-003	- Change FILL_CHAR to STR$K_FILL_CHAR.  JBS 09-APR-1979
! 1-004 - Make CALL entry points accept scalars by ref.  RW 21-MAY-79
! 1-005 - Make Length references word instead of long.  RW 23-May-79
! 1-006	- Change linkage names to start with STR$.  JBS 04-JUN-1979
! 1-007 - Change order of src and dest parameters.  RW 16-Jul-79
! 1-008	- Correct a typo in edit 007.  JBS 17-JUL-1979
! 1-009	- Use new interlock macros.  JBS 06-NOV-1979
! 1-010	- The interlock macros cannot be used from a routine called
!	   with a JBS because of the ENABLE.  JBS 15-NOV-1979
! 1-011 - String speedup, remove edit 10.  RW  8-Jan-1980
! 1-012 - Reorganize string copying routines to use the corresponding
!	  LIB$SCOPY_xxx entry points to do the real work.
!	  This makes them sensitive to the newly-added classes of 
!	  descriptors.  Remove string interlocking code. RKR 31-MAR-1981
! 1-013 - Speed up by special-casing classes of descriptors that "read"
!	  like fixed string descriptors.
!	  To bring performance back to Version 2 levels, it became
!	  necessary to replicate the logic found in LIB$SCOPY_R_DX6
!	  in STR$COPY_R_R8.
!	  RKR 18-NOV-1981
!--

!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE 
		(EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);
!SWITCHES LIST (EXPAND);

!
! LINKAGES:
!
REQUIRE 'RTLIN:STRLNK';		! Use require file with string linkage

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    STR$COPY_DX,			! Copy string to another, 
					! CALL entry
    STR$COPY_R,				! Copy string by ref, CALL entry
    STR$COPY_DX_R8 : STR$JSB_COPY_DX,	! Copy string to another, 
					! JSB entry
    STR$COPY_R_R8  : STR$JSB_COPY_R;	! Copy string by ref, JSB entry

!
! INCLUDE FILES:
!

REQUIRE 'RTLIN:RTLPSECT';	! Use to declare PSECTs

REQUIRE 'RTLIN:STRMACROS';	! Use string macros to code

LIBRARY 'RTLSTARLE';		! STARLET library for macros and symbol

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
LITERAL
	MAX_SIZE = 65535 ;	! Maximum string size
!
! PSECT DECLARATIONS
!

DECLARE_PSECTS (STR);

!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL LITERAL
    STR$_FATINTERR,				! Fatal internal error
    STR$_INSVIRMEM,				! Insufficient virt. mem
    STR$_ILLSTRCLA,				! Illegal string desc
    STR$_TRU,					! String truncated
    STR$_NORMAL;				! success

EXTERNAL ROUTINE
    LIB$STOP;					! signal errors

GLOBAL ROUTINE STR$COPY_DX (			! Copy string

	DEST_DESC,			! Pointer to dest str desc
	SRC_DESC			! Pointer to input str desc
			   ) =

!++
! FUNCTIONAL DESCRIPTION:
!	This routine copies a source string to a destination string 
! where both the source and destination may be of any class or any 
! dtype.  This is the CALL entry point, it puts the parameters in the 
! correct place and JSBs to the JSB entry point.
!
! FORMAL PARAMETERS:
!
!	DEST_DESC.wt.dx		pointer to destination string descriptor
!	SRC_DESC.rt.dx		pointer to source string descriptor
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION CODES:
!
!	SS$_NORMAL	Success
!	STR$_TRU	Truncation occured.  Warning.
!
! SIDE EFFECTS:
!
! Will signal STR$_INSVIRMEM if no heap memory to allocate strings or
! STR$_ILLSTRCLA if class in descriptor is not supported.
!
!--

    BEGIN
	RETURN (STR$COPY_DX_R8 ( .DEST_DESC, .SRC_DESC) );
    END;					!End of STR$COPY_DX

GLOBAL ROUTINE STR$COPY_R (		! Copy a string

	DEST_DESC,			! Pointer to dest str desc
	SRC_LEN,			! Value of src string length
	SRC_ADDR			! Pointer to source string
			  ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine copies a source string to a destination string 
! where both the source and destination may be of any class or any 
! dtype.  This is the CALL with source string by reference
! entry point, it puts the parameters in the correct
! place and JSBs to the JSB entry point.
!
! FORMAL PARAMETERS:
!
!	DEST_DESC.wt.dx		pointer to destination string descriptor
!	SRC_LEN.rwu.r		addr of value of length of source string
!	SRC_ADDR.rt.r		pointer to source string
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION CODES:
!
!	SS$_NORMAL	Success
!	STR$_TRU	Truncation occured.  Warning.
!
! SIDE EFFECTS:
!
! Will signal STR$_INSVIRMEM if no heap memory to allocate strings or
! STR$_ILLSTRCLA if class in descriptor is not supported.
!
!
!--

    BEGIN
    RETURN (STR$COPY_R_R8 (.DEST_DESC, ..SRC_LEN, .SRC_ADDR) ) ;
    END;					!End of STR$COPY_R

GLOBAL ROUTINE STR$COPY_DX_R8 (		! Copy string

	DEST_DESC,			! Pointer to dest str desc
	SRC_DESC			! Pointer to input str desc

			      ) : STR$JSB_COPY_DX =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine copies a source string to a destination string 
! where both the source and destination may be of any supported class.
! It JSBs to the routine which does the actual copy by reference on 
! the source.
!
! FORMAL PARAMETERS:
!
!	DEST_DESC.wt.dx		pointer to destination string descriptor
!	SRC_DESC.rt.dx		pointer to source string descriptor
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION CODES:
!
!	SS$_NORMAL	Success.
!	STR$_TRU	Truncation occurred.  Warning.
!
! SIDE EFFECTS:
!
! Will signal STR$_INSVIRMEM if no heap memory to allocate strings or
! STR$_ILLSTRCLA if class in descriptor is not supported.
!
!--

    BEGIN

    MAP
	SRC_DESC : REF BLOCK [,BYTE];

    IF .SRC_DESC [DSC$B_CLASS] LEQU DSC$K_CLASS_D
    THEN
	BEGIN
	RETURN (STR$COPY_R_R8 ( .DEST_DESC, 
				.SRC_DESC [DSC$W_LENGTH],
				.SRC_DESC [DSC$A_POINTER] ) )  ;
	END
    ELSE
	BEGIN
	LOCAL
	    IN_LEN,
	    IN_ADDR ;
	$STR$GET_LEN_ADDR ( SRC_DESC, IN_LEN, IN_ADDR ) ;
	RETURN (STR$COPY_R_R8 (.DEST_DESC, .IN_LEN, .IN_ADDR ) ) ;
	END;

    END;					!End of STR$COPY_DX_R8

GLOBAL ROUTINE STR$COPY_R_R8 (		! Copy a string

	DEST_DESC,			! Pointer to dest str desc
	SRC_LEN,			! Value of len of src string
	SRC_ADDR			! Pointer to source string

			      ) : STR$JSB_COPY_R =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine copies a source string specified by a length and a
! pointer, to a destination string specified by a descriptor, 
! where both the source and destination may be of any class or any 
! dtype.  This routine uses the macros to prevent ASTs on the source and
! destination strings, and then JSBs to the routine which does
! the actual copy by reference on the source
!
! FORMAL PARAMETERS:
!
!	DEST_DESC.wt.dx		pointer to destination string descriptor
!	SRC_LEN.rwu.v		value of source string length
!	SRC_ADDR.rt.r		pointer to the source string
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION CODES:
!
!	SS$_NORMAL	Sucess.
!	STR$_TRU	Truncation occurred.  Warning.
!
! SIDE EFFECTS:
!
!	Will signal STR$_INSVIRMEM if no heap memory to allocate to 
! strings, and STR$_ILLSTRCLA if class in descriptor is not one 
! supported by SRM
!
!--

    BEGIN

    LOCAL
	RETURN_STATUS;
    MAP
	DEST_DESC : REF BLOCK [,BYTE],
        SRC_LEN : WORD UNSIGNED ;
!+
! Select the class of descriptor.
! Return the status resulting from the copy operation.
!-

    RETURN_STATUS = SS$_NORMAL ;	! Assume success
    RETURN_STATUS =  ( CASE .DEST_DESC[DSC$B_CLASS] 
		  FROM DSC$K_CLASS_Z TO DSC$K_CLASS_VS OF
    SET

!+
! fixed string descriptor (CLASS _Z, _S, _SD)
! **********************************************
!
! Use fixed length semantics. Copy to destination with fill or 
! truncation.
!-
	[DSC$K_CLASS_Z, 
	 DSC$K_CLASS_S,
	 DSC$K_CLASS_SD] :
	    BEGIN
	    BUILTIN R0;	! length of uncopied src from MOVC5

	    CH$COPY (.SRC_LEN, .SRC_ADDR, STR$K_FILL_CHAR, 
		     .DEST_DESC [DSC$W_LENGTH], 
		     .DEST_DESC [DSC$A_POINTER]); ! do copy

	    IF .R0 EQLU 0   ! if no uncopied src
		THEN
		    SS$_NORMAL			! then success
		ELSE
		    STR$_TRU			! else truncation
	    END;


!+
! dynamic destination string
! **************************
!-
	[DSC$K_CLASS_D] :
	    BEGIN
	    IF $STR$NEED_ALLOC (.SRC_LEN, 
				($STR$DYN_AL_LEN (DEST_DESC)) )

%IF %BLISS (BLISS16) OR %BLISS (BLISS36)	! if not VAX must not
%THEN						! CH$MOVE with overlap
OR $STR$OVERLAP (.SRC_ADDR, .SRC_LEN, 
		 .DEST_DESC [DSC$A_POINTER], .SRC_LEN)
%FI
	    THEN
		BEGIN			! cannot directly fill dest
		LOCAL
		    LOC_RET_STAT,	! status of calls to Allocate
					!  and Deallocate
		    TEMP_DESC : $STR$DESCRIPTOR;	! create temp

		    LOC_RET_STAT = $STR$ALLOCATE (.SRC_LEN, TEMP_DESC);
							! alloc temp
		    !+
		    ! Allocate will only return STR$_NORMAL or 
		    ! STR$_INSVIRMEM, therefore if it wasn't success,
		    ! don't continue copying		    
		    !-

		    IF (.LOC_RET_STAT)
			THEN
			    BEGIN	! successful allocate
			    CH$MOVE (.SRC_LEN, .SRC_ADDR, ! copy to temp
				     .TEMP_DESC [DSC$A_POINTER]);
			    $STR$EXCH_DESCS (TEMP_DESC, DEST_DESC);
							! switch temp 
							! and dest
			    LOC_RET_STAT = $STR$DEALLOCATE (TEMP_DESC);
							! return former
							! string
			    !+
			    ! $STR$DEALLOCATE returns either STR$_NORMAL
			    ! or STR$_FATINTERR.
			    !-
			    IF NOT .LOC_RET_STAT
			    THEN
				RETURN_STATUS = STR$_FATINTERR ;
			    END		! successful allocate
			ELSE
			    RETURN_STATUS = STR$_INSVIRMEM ;
		END			! cannot directly fill dest

	    ELSE

		BEGIN			! directly fill dest
		CH$MOVE (.SRC_LEN, .SRC_ADDR, 	! write dest
			 .DEST_DESC [DSC$A_POINTER]);
		DEST_DESC [DSC$W_LENGTH] = .SRC_LEN;
		END;			! directly fill dest

	    .RETURN_STATUS			! return the status
	    END;


!+
! Class A and NCA array descriptor
! ********************************
!-
	[DSC$K_CLASS_A,		! Class A Array descriptor
	 DSC$K_CLASS_NCA]:	! Class NCA array descriptor
	    BEGIN
	    BUILTIN R0;	! len of uncopied src from MOVC5

	    IF .DEST_DESC [DSC$L_ARSIZE] GTR MAX_SIZE ! If size>max
	    THEN STR$_ILLSTRCLA ;		  	  ! then quit

	    CH$COPY (.SRC_LEN, .SRC_ADDR, STR$K_FILL_CHAR, 
		     .DEST_DESC [DSC$L_ARSIZE], 
		     .DEST_DESC [DSC$A_POINTER]); ! do copy

	    IF .R0 EQLU 0   ! if no uncopied src
	    THEN
		RETURN_STATUS = SS$_NORMAL  	! then success
	    ELSE
		RETURN_STATUS = STR$_TRU      !else truncation

	    END ;		! of Class A and NCA Array Descriptor

!+
! Varying string descriptor
! *************************
!-

	 [DSC$K_CLASS_VS]:	! Varying string descriptor
	    BEGIN
	    IF (.SRC_LEN LEQU .DEST_DESC [DSC$W_MAXSTRLEN] )
	    THEN	! fits within MAXLEN, copy and update CURLEN
		BEGIN
		CH$MOVE (.SRC_LEN, .SRC_ADDR,
		         .DEST_DESC [DSC$A_POINTER] + 2);
		(.DEST_DESC [DSC$A_POINTER])<0,16> = .SRC_LEN ;
		SS$_NORMAL	! return success status
		END

	    ELSE	! Won't fit within MAXLEN. Only copy MAXLEN's 
			! worth of data and update CURLEN to MAXLEN

		BEGIN
		CH$MOVE (.DEST_DESC [DSC$W_MAXSTRLEN], .SRC_ADDR,
		         .DEST_DESC [DSC$A_POINTER] + 2);
		(.DEST_DESC [DSC$A_POINTER])<0,16> = 
					.DEST_DESC [DSC$W_MAXSTRLEN] ;
		STR$_TRU	! return truncation status
		END

	    END ;		! of Varying string descriptor


!+
! Unsupported class descriptor
! ****************************
!-

	[INRANGE, OUTRANGE]:	! Unsupported class of descriptor
	    STR$_ILLSTRCLA ;
    TES);			! end of set on class code
    $STR$SIGNAL_FATAL (RETURN_STATUS) ;
    RETURN .RETURN_STATUS;
    END;					!End of STR$COPY_R_R8

END						!End of module

ELUDOM
