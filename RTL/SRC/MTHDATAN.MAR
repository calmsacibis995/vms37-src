	.TITLE	MTH$DATAN	; Floating Point Arc Tangent Functions 
				; (DATAN,DATAN2,DATAND,DATAND2)
	.IDENT /2-004/		; File: MTHDATAN.MAR  EDIT: RNH2004
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;
; FACILITY: MATH LIBRARY
;++
; ABSTRACT:
;
; MTH$DATAN is a function which returns the floating point arctangent 
; value (in radians) of its double precision floating point argument.
; MTH$DATAN2 is two argument double floating arctangent. The  call is 
; standard call-by-reference.
; MTH$DATAN_R7  is  a  special routine which is the same as MTH$DATAN
; except a  faster non-standard JSB call is used with the argument in
; R0 and no registers are saved.
;
; MTH$DATAND is a function which returns the floating point arctangent 
; value (in degrees) of its double precision  floating point argument.
; MTH$DATAND2 is two  argument double floating arctangent. The call is
; standard call-by-reference.
; MTH$DATAND_R7 is  a  special routine which is the same as MTH$DATAND
; except  a  faster non-standard JSB call is used with the argument in
; R0 and no registers are saved.
;
;--
;
; VERSION: 01
;
; HISTORY:
; AUTHOR:
;	Peter Yuo, 15-Oct-76: Version 01
;
; MODIFIED BY:
;
; 01-1	Peter Yuo, 22-May-77
;
; VERSION: 02
;
; HISTORY:
; AUTHOR:
;	Bob Hanek, 05-Jun-81: Version 02
;
; MODIFIED BY:
;
;



; ALGORITHMIC DIFFERENCES FROM FP-11/C ROUTINE:
;	1. To avoid various flags subroutine calls have been used.
;
; Edit History for Version 01 of MTH$DATANDATAN2
;


; 01-1	Code saving after code review March 1977
;	In DATAN2, fix references to OWN constants so DATAN2 will work.
; 01-3	In MTH$DATAN2, comparison of exponents of arguments X and
;	Y is with 58 instead of 26.
;
; 01-8	- Signal INVALID ARG TO MATH LIBRARY if x=y=0.  TNH 16-June-78
; 01-9	- Fix comments.  TNH 16-June-78
; 01-10	- Move .ENTRY mask to module header.  TNH 14-Aug-78
; 1-011	- Update version number and copyright notice.  JBS 16-NOV-78
; 1-012	- Change MTH__INVARG to MTH$K_INVARGMAT.  JBS 07-DEC-78
; 1-013	- Add "_" to the PSECT directive.  JBS 22-DEC-78
; 1-014 - Declare externals.  SBL 17-May-1979
; 1-015 - Added deree entry points.  RNH 15-MAR-1981
;
;
; Edit History for Version 01 of MTH$DATANDATAN2
;
;
; 2-002 - Use G^ addressing for externals.  SBL 24-Aug-1981
; 2-003 - Changed MTH$DATAND2 entry to MTH$DATAN2D in order to conform
;	  to the original specification.  RNH 05-Oct-81
; 2-004 - Un-did previous edit to be consistent with PL/1
; 	- Modified small argument processing to avoid a microcode bug
;         in the FPA.  RNH 18-Dec-81

	.SBTTL	DECLARATIONS	; Declarative Part of Module

;
; INCLUDE FILES:	MTHJACKET.MAR, MTHATAN.MAR
;

;
; EXTERNAL SYMBOLS:
;
	.DSABL	GBL
	.EXTRN	MTH$K_INVARGMAT
	.EXTRN	MTH$$SIGNAL		; Signal SEVERE error
	.EXTRN  MTH$$AB_ATAN		; Gobal table used by all Arctangent
					;    routines.  Part of MTHATAN.MAR
;

; EQUATED SYMBOLS:
;
	ACMASK = ^M<IV, R2, R3, R4, R5, R6, R7>	; .ENTRY register mask, int 
						;  ovf enabled

;
; MACROS:	none
;
; PSECT DECLARATIONS:

	.PSECT	_MTH$CODE	PIC,SHR,LONG,EXE,NOWRT
					; program section for math routines
;
; OWN STORAGE:	none
;
; EXTERNALS:
;
	.EXTRN	MTH$$SIGNAL		; Signal a severe error
	.EXTRN	MTH$K_INVARGMAT		; Invalid argument to math library
	.DSABL	GBL			; No other externals allowed
;
; CONSTANTS:
;

;
;   ************************** Constants for DATAN ***************************
;   
;   
;   Each  entry of the DATAN_TABLE contains the the values of XHI, DATAN_XHI_LO
;   and DATAN_XHI_HI respectively.  The table is indexed by a pointer  obtained
;   from the MTH$$AB_ATAN table. The MTH$$AB_ATAN table is common to all of the
;   arctangent  routines  and is included as part of the MTHATAN module.  NOTE:
;   For performance reasons it is important to have  the  DATAN_TABLE  longword
;   aligned.
;   
;   
	.ALIGN	LONG

DATAN_TABLE:
; Entry  0
	.QUAD	^X00000000F87E3ED7	;  0.10545442998409271E+00
	.QUAD	^XE21C5BB4E52DA277	; -0.83990168661711120E-18
	.QUAD	^XB377B27A2CE63ED7	;  0.10506611091781236E+00
; Entry  1
	.QUAD	^X00000000FB703F03	;  0.12888884544372559E+00
	.QUAD	^X8EC751056B81A001	; -0.27405738718612654E-19
	.QUAD	^XDC7B37BC422F3F03	;  0.12818216111847079E+00
; Entry  2
	.QUAD	^X00000000F63E3F1F	;  0.15621277689933777E+00
	.QUAD	^X215F05DEB08D22D7	;  0.14615699319155353E-17
	.QUAD	^X3692CB13ADF03F1E	;  0.15496040572616338E+00
; Entry  3
	.QUAD	^X00000000E4EC3F47	;  0.19520920515060425E+00
	.QUAD	^X7B53697203519EEA	; -0.61942715015325782E-20
	.QUAD	^XCF73AADA69613F45	;  0.19278481107058050E+00
; Entry  4
	.QUAD	^X00000000C3D13F7F	;  0.24977041780948639E+00
	.QUAD	^XB4E3255F9F63A232	; -0.60519693165102660E-18
	.QUAD	^XC6A74C33A30A3F7A	;  0.24476257410146354E+00
; Entry  5
	.QUAD	^X00000000DB973F9F	;  0.31222221255302429E+00
	.QUAD	^X94AB79A557201F4A	;  0.10711808370652331E-19
	.QUAD	^XAEB45198F28D3F9A	;  0.30263177510309217E+00
; Entry  6
	.QUAD	^X000000009E8E3FC7	;  0.38988155126571655E+00
	.QUAD	^X37BDC0BBD813A29B	; -0.10560403693868137E-17
	.QUAD	^XD2E26F7856713FBE	;  0.37175325856916232E+00
; Entry  7
	.QUAD	^X0000000033B63FFF	;  0.49844139814376831E+00
	.QUAD	^XE8718A35E17DA331	; -0.24107346684847003E-17
	.QUAD	^X3007B09BBFAF3FEC	;  0.46239995032155439E+00
; Entry  8
	.QUAD	^X00000000F8EB4026	;  0.65223568677902222E+00
	.QUAD	^X05D855B7DF45A3BB	; -0.50922848759855227E-17
	.QUAD	^XB5B6B9DCF4384013	;  0.57794527566576090E+00
; Entry  9
	.QUAD	^X000000000712405E	;  0.86729538440704346E+00
	.QUAD	^XF2BF420EDB20A3C7	; -0.54171066766593593E-17
	.QUAD	^XE63CB34AE62B4036	;  0.71444962622890612E+00
; Entry 10
	.QUAD	^X00000000CBD84095	;  0.11702833175659180E+01
	.QUAD	^X69749B082D47A3EC	; -0.64015869933736197E-17
	.QUAD	^X665302221B62405D	;  0.86369907905682312E+00
; Entry 11
	.QUAD	^X000000008DEB40D2	;  0.16449559926986694E+01
	.QUAD	^XA226B1AA552C242C	;  0.93421751035229859E-17
	.QUAD	^X01D0C30925404083	;  0.10245743706054911E+01
; Entry 12
	.QUAD	^X0000000088054124	;  0.25708019733428955E+01
	.QUAD	^XD3691BCACD08244B	;  0.11048069196521280E-16
	.QUAD	^X45BD59C493CA4099	;  0.11998227060617363E+01
; Entry 13
	.QUAD	^X000000007D0E41AB	;  0.53590154647827148E+01
	.QUAD	^X73B917584359A428	; -0.91215597452526939E-17
	.QUAD	^XDFB5323772D240B1	;  0.13863165612417540E+01

;
; Tables to be used in POLYD for computing DATAN:  DATANTAB1 is obtained
; from Hart et. al. (No. 4904).  DATANTAB2 is the same as DATANTAB1 except
; that C0 is set to 0
;

DATANTAB1:

	.QUAD	^X4B4F7B0BFCA13E98	; C6 = 0.74700604980000000E-01
	.QUAD	^XBA534D4C1F19BEBA	; C5 = -.90879628821850000E-01
	.QUAD	^XD5B0D0E58E1E3EE3	; C4 = 0.11111091685300320E+00
	.QUAD	^XEEBF86F94924BF12	; C3 = -.14285714219884826E+00
	.QUAD	^X200FCCC8CCCC3F4C	; C2 = 0.19999999999893708E+00
	.QUAD	^XAA4EAAAAAAAABFAA	; C1 = -.33333333333333269E+00
	.QUAD	^X0000000000004080	; C0 = 0.10000000000000000E+01
DATANLEN1 = .- DATANTAB1/8

DATANTAB2:
	.QUAD	^X4B4F7B0BFCA13E98	; C6 = 0.74700604980000000E-01
	.QUAD	^XBA534D4C1F19BEBA	; C5 = -.90879628821850000E-01
	.QUAD	^XD5B0D0E58E1E3EE3	; C4 = 0.11111091685300320E+00
	.QUAD	^XEEBF86F94924BF12	; C3 = -.14285714219884826E+00
	.QUAD	^X200FCCC8CCCC3F4C	; C2 = 0.19999999999893708E+00
	.QUAD	^XAA4EAAAAAAAABFAA	; C1 = -.33333333333333269E+00
	.QUAD	^X0000000000000000	; C0 = 0.00000000000000000E+00
DATANLEN2 = .- DATANTAB2/8

D_PI:
	.QUAD	^X68C2A2210FDA4149	; pi
D_PI_OVER_2:
	.QUAD	^X68C2A2210FDA40C9	; pi/2
D_MPI_OVER_2:
	.QUAD	^X68C2A2210FDAC0C9	; -pi/2
D_PI_OVER_2_HI:
	.QUAD	^X68C2A2210FDA40C9	; High order bits of pi/2
D_PI_OVER_2_LO:
	.QUAD	^X03708A2E131923D3	; Low order bits of pi/2


;
; ************************* Constants for ATAND ******************************
;   
; Each entry of the DATAND_TABLE contains the the values of XHI, DATAND_XHI_LO
; and DATAND_XHI_HI respectively.  The table is indexed by a pointer  obtained
; from  the MTH$$AB_ATAN table. The MTH$$AB_ATAN table is common to all of the
; arctangent routines and is included as part of the MTHATAN module. NOTE: For
; performance reasons it is important to have the DATAN_TABLE longword aligned.
;   
;   

DATAND_TABLE:
; Entry  0
	.QUAD	^X00000000F87E3ED7	;  0.10545442998409271E+00
	.QUAD	^XEC84E32B2B2BA44F	; -0.11230634392205251E-16
	.QUAD	^XF76467D8A29141C0	;  0.60198447254440279E+01
; Entry  1
	.QUAD	^X00000000FB703F03	;  0.12888884544372559E+00
	.QUAD	^X96F9C4C8A0012420	;  0.87075001607967749E-17
	.QUAD	^X795BCF00047A41EB	;  0.73442968409542958E+01
; Entry  2
	.QUAD	^X00000000F63E3F1F	;  0.15621277689933777E+00
	.QUAD	^XFC66745AF63822CA	;  0.13753226458048320E-17
	.QUAD	^X5E9101FB0EA7420E	;  0.88785772397440363E+01
; Entry  3
	.QUAD	^X00000000E4EC3F47	;  0.19520920515060425E+00
	.QUAD	^X728CB36C241C25C2	;  0.84195264883526611E-16
	.QUAD	^XEE5FAC64BB6A4230	;  0.11045756028571212E+02
; Entry  4
	.QUAD	^X00000000C3D13F7F	;  0.24977041780948639E+00
	.QUAD	^X72036DE93B89A5D5	; -0.92474884414648262E-16
	.QUAD	^XD4B09F5E61BD4260	;  0.14023862478771928E+02
; Entry  5
	.QUAD	^X00000000DB973F9F	;  0.31222221255302429E+00
	.QUAD	^XB8A22FB80616A565	; -0.49661615106200334E-16
	.QUAD	^X018A1366B758428A	;  0.17339523459959485E+02
; Entry  6
	.QUAD	^X000000009E8E3FC7	;  0.38988155126571655E+00
	.QUAD	^X344BEAEDE7C2A489	; -0.14951724532714388E-16
	.QUAD	^XF73829B3662E42AA	;  0.21299892736248605E+02
; Entry  7
	.QUAD	^X0000000033B63FFF	;  0.49844139814376831E+00
	.QUAD	^X752E7920CC7825F9	;  0.10833292304647813E-15
	.QUAD	^X13348584F2D242D3	;  0.26493565600483999E+02
; Entry  8
	.QUAD	^X00000000F8EB4026	;  0.65223568677902222E+00
	.QUAD	^X906EBE7331EC258D	;  0.61233578397063759E-16
	.QUAD	^X214E9029748E4304	;  0.33113825085173017E+02
; Entry  9
	.QUAD	^X000000000712405E	;  0.86729538440704346E+00
	.QUAD	^X61B2D72E6F942641	;  0.16777886794863949E-15
	.QUAD	^XA4871377BD634323	;  0.40934948257615480E+02
; Entry 10
	.QUAD	^X00000000CBD84095	;  0.11702833175659180E+01
	.QUAD	^XF3FAEAF9FCD82585	;  0.58107895623740531E-16
	.QUAD	^X722AC5D2F1FB4345	;  0.49486311999291994E+02
; Entry 11
	.QUAD	^X000000008DEB40D2	;  0.16449559926986694E+01
	.QUAD	^XE4C2D4E79E22A6C5	; -0.34281209639921420E-15
	.QUAD	^XBF6999B3D0AD436A	;  0.58703787232967309E+02
; Entry 12
	.QUAD	^X0000000088054124	;  0.25708019733428955E+01
	.QUAD	^XBEDD635C359CA65C	; -0.19100122312198548E-15
	.QUAD	^X9ABE70A07D534389	;  0.68744777221303021E+02
; Entry 13
	.QUAD	^X000000007D0E41AB	;  0.53590154647827148E+01
	.QUAD	^X58110A0452C3A4B5	; -0.19659110337997096E-16
	.QUAD	^X66B57F7FDC34439E	;  0.79430088028242020E+02

;
; Tables to be used in POLYD for computing DATAND:  DATANDTAB1 is obtained
; by multiplying the coefficients given in Hart et. al. (No. 4904) by
; 180/pi.  DATANDTAB2 is the same as DATANDTAB1 except that C0 is set to
; 180/pi - 64 instead of 180/pi.
;

DATANDTAB1:
	.QUAD	^XB22B334CF6004188	; C6 = 0.42800293924279392E+01
	.QUAD	^X270AAD659FE6C1A6	; C5 = -.52070191752074788E+01
	.QUAD	^XF448F26AB7CC41CB	; C4 = 0.63661865935060939E+01
	.QUAD	^X404149F1F637C202	; C3 = -.81851113212942581E+01
	.QUAD	^XDD37DC1358B34237	; C2 = 0.11459155902555563E+02
	.QUAD	^X5F813769C9EBC298	; C1 = -.19098593171027404E+02
	.QUAD	^X0FBED31E2EE04365	; C0 = 0.57295779513082321E+02
DATANDLEN1 = .- DATANDTAB1/8

DATANDTAB2:
	.QUAD	^XB22B334CF6004188	; C6 = 0.42800293924279392E+01
	.QUAD	^X270AAD659FE6C1A6	; C5 = -.52070191752074788E+01
	.QUAD	^XF448F26AB7CC41CB	; C4 = 0.63661865935060939E+01
	.QUAD	^X404149F1F637C202	; C3 = -.81851113212942581E+01
	.QUAD	^XDD37DC1358B34237	; C2 = 0.11459155902555563E+02
	.QUAD	^X5F813769C9EBC298	; C1 = -.19098593171027404E+02
D_PI_OV_180_M_64:
	.QUAD	^X8212670F88F9C1D6	; C0 = -.67042204869176791E+01
DATANDLEN2 = .- DATANDTAB2/8


D_90:
	.QUAD	^X00000000000043B4	; 90.
D_M90:
	.QUAD	^X000000000000C3B4	; -90.
D_180:
	.QUAD	^X0000000000004434	; 180


	.SBTTL	MTH$DATAN - Standard Single Precision Floating Arc Tangent


;++
; FUNCTIONAL DESCRIPTION:
;
; DATAN - double precision floating point function
;
; DATAN is computed using the following steps:
; 
;    1. If X > 11 then
;       a. Let W = 1/X.
;       b. Compute DATAN(W) = W*P(W**2), where P is a polynomial of 
;          degree 6.
;       c. Set DATAN(X) = pi/2 - DATAN(W)
;    2. If 3/32 =< X =< 11 then
;       a. Obtain XHI by table look-up.
;       b. Compute Z = (X - XHI)/(1 + X*XHI).
;       c. Compute DATAN(Z) = Z*P(Z**2), where P is a polynomial of 
;          degree 6.
;       d. Obtain DATAN(XHI) by table look-up.  DATAN(XHI) will have
;          two parts - the high order bits, DATAN_XHI_HI, and the low
;          order bits, DATAN_XHI_LO.
;       e. Compute DATAN(X) = DATAN_XHI_HI + (DATAN_XHI_LO + DATAN(Z)).
;    3. If 0 =< X < 3/32 then
;       a. Compute DATAN(X) = X + X*Q(X**2), where Q is a polynomial
;          of degree 6.
;    4. If X < 0 then
;       a. Compute Y = DATAN(|X|) using steps 1 to 3.
;       b. Set DATAN(X) = -Y.
; 
;
; CALLING SEQUENCE:
;
;	Arctangent.wd.v = MTH$DATAN(x.rd.r)
;
; INPUT PARAMETERS:

	LONG = 4			; define longword multiplier
	x = 1 * LONG			; x is an angle in radians
;
; IMPLICIT INPUTS:	none
;
; OUTPUT PARAMETERS:
;
;	VALUE:	double precision floating arctangent angle of the argument
;
; IMPLICIT OUTPUTS:	none
;
; SIDE EFFECTS:
;
; Signals:	none
;
; NOTE: This procedure disables floating point underflow, enable integer
; overflow, causes no floating overflow or other arithmetic traps, and
; preserves enables across the call.
;
;---


	.ENTRY	MTH$DATAN, ACMASK	; standard call-by-reference entry
					; disable DV (and FU), enable IV
	MTH$FLAG_JACKET			; flag that this is a jacket procedure 
					; in case of an error in special JSB 
					; routine
	MOVD	@x(AP), R0		; R0/R1 = arg 
	BSBB	MTH$DATAN_R7		; call special DATAN rountine
	RET				; return - result in R0


	.SBTTL	MTH$DATAN2 - Standard Double Floating Arctangent With 2 Arguments
;++
; FUNCTIONAL DESCRIPTION:
;
; DATAN2  - double precision floating point function
;
; DATAN2(X,Y) is computed as following:
;
;	If Y = 0 or X/Y > 2**57, DATAN2(X,Y) = PI/2 * (sign X)
;	If Y > 0 and X/Y =< 2**57, DATAN2(X,Y) = DATAN(X/Y)
;	If Y < 0 and X/Y =< 2**57, DATAN2(X,Y) = PI * (sign X) + DATAN(X/Y)
;
;
; CALLING SEQUENCE:
;
;	Arctangent2.wd.v = MTH$DATAN2(x.rd.r, y.rd.r)
;
; INPUT PARAMETERS:

	x = 1 * LONG			; x is the first argument
	y = 2 * LONG			; y is the second argument

; SIDE EFFECTS:	See description of MTH$DATAN 
;
;--


	.ENTRY	MTH$DATAN2, ACMASK	; standard call-by-reference entry
					; disable DV (and FU), enable IV
	MTH$FLAG_JACKET			; flag that this is a jacket procedure
					; in case of an error in special JSB
					; routine
	MOVD	@x(AP), R0		; R0/R1 = arg1 
	MOVD	@y(AP), R2		; R2/R3 = arg2
;
; Test if Y = 0 or X/Y > 2**57
;
	BEQL	INF			; branch to INF if Y = 0
	BICW3	#^X807F, R0, R4		; R4 = exponent(X)
	BICW3	#^X807F, R2, R5		; R5 = exponent(Y)
	SUBW	R5, R4			; R4 = exponent(X) - exponent(Y)
	CMPW	R4, #58*128		; compare R4 with 58
	BGTR	INF			; if X/Y > 2**57, branch to INF
;
; Test if Y > 0 or Y < 0
;
	TSTW	R2			; test the sign of Y
	BGTR	A2PLUS			; branch to A2PLUS if Y > 0
	TSTW	R0			; test the sign of X
	BGEQ	A1PLUS			; branch to A1PLUS if X >= 0
;
; Y < 0 and X < 0 and X/Y =< 2**57
;
	BSBB	MTH$DATAN_R7D		; R0/R1 = DATAN(X/Y)
	SUBD	D_PI, R0		; R0/R1 = -PI + DATAN(X/Y)
	RET				; return
;
; Y < 0 and X > 0 and X/Y =< 2**57
;
A1PLUS:
	BSBB	MTH$DATAN_R7D		; R0/R1 = DATAN(X/Y)
	ADDD	D_PI, R0		; R0/R1 = PI + DATAN(X/Y)
	RET				; return
;
; Y > 0 and X/Y =< 2**57
;
A2PLUS:
	BSBB	MTH$DATAN_R7D		; R0/R1 = DATAN(X/Y)
	RET				; return
;
; Y = 0 or X/Y > 2**57
;
INF:
	TSTW	R0			; test the sign of X
	BGTR	1$			; branch if X > 0
	BEQL	2$			; branch if X = 0
	MOVD	D_MPI_OVER_2, R0	; R0/R1 = DATAN(X/Y) = -PI/2
	RET				; return

1$:	MOVD	D_PI_OVER_2, R0		; R0/R1 = DATAN(X/Y) = PI/2
	RET				; return

;+
; Here if both X = 0 and Y = 0.  Signal INVALID ARG TO MATH LIBRARY
;-

2$:	ASHQ	#15, #1, R0		; R0/R1 = reserved operand, copied
					; to CHF$L_MCH_SAVR0/R1 so handlers
					; can change if they want to continue.
	MOVZBL	#MTH$K_INVARGMAT, -(SP)	; code for INVALID ARG TO MATH LIBRARY
	CALLS	#1, G^MTH$$SIGNAL	; Signal SEVERE error
	RET				; return if a handler says SS$_CONTINUE

	.SBTTL	MTH$DATAN_R7 - Special DATAN routine

; Special DATAN - used by the standard routine, and directly.
;
; CALLING SEQUENCES:
;	save anything needed in R0:R7
;	MOVD	...,R0			; input in R0/R1
;	JSB	MTH$DATAN_R7
;	return with result in R0/R1
; Note:  This  routine  is written to avoid causing any integer overflows, 
;    floating overflows, or floating underflows or divide by 0 conditions, 
;    whether enabled or not.
;
; REGISTERS USED:
;	R0/R1 - Floating argument then result
;	R0:R5 - POLYD
;	R6    - Pointer into DATAN_TABLE
;	R6/R7 - Y during POLYD


MTH$DATAN_R7D:				; for local use only!
	DIVD	R2, R0
MTH$DATAN_R7::				; Special DATAN routine
	TSTF	R0			; R6 = X = argument
	BLSS	NEG_ARG			; Branch to negative argument logic
;
; Argument is positive
;
	SUBW3	#^X3EC0, R0, R6		; Argument is less than 3/32,
	BLSS	SMALL			;  branch to small argument logic
	CMPW	#^X036F, R6		; Argument is greater that 11,
	BLSS	LARGE_ARG		;  branch to large argument logic
;
; Logic for positive medium sized arguments.  Get pointer into DATAN_TABLE.
;
	ROTL	#-4, R6, R6		; R6 = index into MTH$$AB_ATAN table
	BICL	#-256, R6		; zero high order bits of index
	MOVB	G^MTH$$AB_ATAN[R6], R6	; R6 = offset into DATAN_TABLE
	MOVAQ	DATAN_TABLE[R6], R6	; R6 = pointer to XHI
;
; Compute Z
;
	MOVQ	(R6)+, R2		; R2 = XHI
	MULD3	R2, R0, R4		; R4 = X*XHI
	ADDD	#1, R4			; R4 = 1 + X*XHI
	SUBD	R2, R0			; R0 = X - XHI
	DIVD	R4, R0			; R0 = Z = (X - XHI)/(1 + X*XHI)
;
; Evaluate Z*P(Z**2)
;
	MOVQ	R0, -(SP)		; Push Z onto the stack
	MULD	R0, R0			; R0 = Z**2
	POLYD	R0, #DATANLEN1-1, DATANTAB1
					; R0 = P(Z**2)
	MULD	(SP)+, R0		; R0 = DATAN(Z) = Z*P(Z**2)
	ADDD	(R6)+, R0		; R0 = DATAN_XHI_LO + DATAN(Z)
	ADDD	(R6), R0		; R0 = DATAN(X) = DATAN_XHI_HI +
					;      (DATAN_XHI_LO + DATAN(Z))
	RSB				; Return


SMALL:	BRW	SMALL_ARG		; Dummy label used to avoid adding
					;   an extra insrtuction in the 
					;   medium argument logic
;
; Large positive argument logic.
;

LARGE_ARG:
	DIVD3	R0, #-1, R6		; R6 = -W = -1/X
	MULD3	R6, R6, R0		; R0 = W**2
	POLYD	R0, #DATANLEN1-1, DATANTAB1
					; R0 = P(W**2)
	MULD	R6, R0			; R0 = DATAN(W) = -W*P(W**2)
	ADDD	D_PI_OVER_2_LO, R0	; 
	ADDD	D_PI_OVER_2_HI, R0	; R0 = DATAN(X) = PI/2 - DATAN(W)
	RSB				; Return

;
; Logic for negative arguments
;

NEG_ARG:
	SUBW3	#^XBEC0, R0, R6		; Argument is less than 3/32,
	BLSS	SMALL_ARG		;  branch to small argument logic
	CMPW	#^X036F, R6		; Argument is greater than 11,
	BLSS	N_LARGE_ARG		;  branch to large argument logic
;
; Logic for negative medium sized arguments.  Get index into DATAN_TABLE.
;
	ROTL	#-4, R6, R6		; R6 = index into MTH$$AB_ATAN table
	BICL	#-256, R6		; clear high order (unused) bits of ind
	MOVB	G^MTH$$AB_ATAN[R6], R6	; R6 = offset into DATAN_TABLE
	MOVAQ	DATAN_TABLE[R6], R6	; R6 = pointer to XHI
;
; Compute Z
;
	MOVQ	(R6)+, R2		; R2 = XHI
	MULD3	R2, R0, R4		; R4 = X*XHI
	SUBD3	R4, #1, R4		; R4 = 1 - X*XHI = 1 + X*(-XHI)
	ADDD	R2, R0			; R0 = X + XHI = X - (-XHI)
	DIVD	R4, R0			; R0 = Z 
;
; Evaluate Z*P(Z**2)
;
	MOVQ	R0, -(SP)		; Push Z onto the stack
	MULD	R0, R0			; R0 = Z**2
	POLYD	R0, #DATANLEN1-1, DATANTAB1
					; R0 = P(Z**2)
	MULD	(SP)+, R0		; R0 = DATAN(Z) = Z*P(Z**2)
	SUBD	(R6)+, R0		; R0 = DATAN_XHI_LO + DATAN(Z)
	SUBD	(R6), R0		; R0 = DATAN(X) = DATAN_XHI_HI +
					;      (DATAN_XHI_LO + DATAN(Z))
	RSB				; Return
;
; Logic for large negative  arguments
;

N_LARGE_ARG:
	DIVD3	R0, #-1, R6		; R6 = W = 1/|X|
	MULD3	R6, R6, R0		; R0 = W**2
	POLYD	R0, #DATANLEN1-1, DATANTAB1
					; R0 = P(W**2)
	MULD	R6, R0			; R0 = DATAN(W) = W*P(W**2)
	SUBD	D_PI_OVER_2_LO, R0	; 
	SUBD	D_PI_OVER_2_HI, R0	; R0 = DATAN(X) = DATAN(W) - PI/2
	RSB				; Return

;
; Small argument logic.
;

SMALL_ARG:
	MOVQ	R0, R6			; R6 = argument = X
	BICW	#^X8000, R0		; R0 = |X|
	CMPW	#^X3280, R0		; Compare 2^-28 to |X|
	BLSS	1$			; Branch to Polyinomial evaluation
	MOVQ	R6, R0			; Return with answer equal to argument
	RSB				;

1$:	MULD	R0, R0			; R0 = X**2
	POLYD	R0, #DATANLEN2-1, DATANTAB2
					; R0 = Q(X**2)
	MULD	R6, R0			; R0 = X*Q(X**2)
	ADDD	R6, R0			; R0 = DATAN(X) = X + X*Q(X**2)
	RSB				; Return


	.SBTTL	MTH$DATAND - Standard Single Precision Floating Arc Tangent


;++
; FUNCTIONAL DESCRIPTION:
;
; DATAND - double precision floating point function
;
; DATAN is computed using the following steps:
; 
;    1. If X > 11 then
;       a. Let W = 1/X.
;       b. Compute DATAN(W) = W*P(W**2), where P is a polynomial of 
;          degree 6.
;       c. Set DATAN(X) = pi/2 - DATAN(W)
;    2. If 3/32 =< X =< 11 then
;       a. Obtain XHI by table look-up.
;       b. Compute Z = (X - XHI)/(1 + X*XHI).
;       c. Compute DATAN(Z) = Z*P(Z**2), where P is a polynomial of 
;          degree 6.
;       d. Obtain DATAN(XHI) by table look-up.  DATAN(XHI) will have
;          two parts - the high order bits, DATAN_XHI_HI, and the low
;          order bits, DATAN_XHI_LO.
;       e. Compute DATAN(X) = DATAN_XHI_HI + (DATAN_XHI_LO + DATAN(Z)).
;    3. If 0 =< X < 3/32 then
;       a. Compute DATAN(X) = X + X*Q(X**2), where Q is a polynomial
;          of degree 6.
;    4. If X < 0 then
;       a. Compute Y = DATAN(|X|) using steps 1 to 3.
;       b. Set DATAN(X) = -Y.
;
; CALLING SEQUENCE:
;
;	Arctangent.wd.v = MTH$DATAND(x.rd.r)
;
; INPUT PARAMETERS:

	LONG = 4			; define longword multiplier
	x = 1 * LONG			; x is an angle in radians
;
; IMPLICIT INPUTS:	none
;
; OUTPUT PARAMETERS:
;
;	VALUE:	double precision floating arctangent angle of the argument
;
; IMPLICIT OUTPUTS:	none
;
; SIDE EFFECTS:
;
; Signals:	none
;
; NOTE: This  procedure disables floating point underflow, enable integer
;    overflow, causes no floating overflow or other arithmetic traps, and
;    preserves enables across the call.
;
;---


	.ENTRY	MTH$DATAND, ACMASK	; standard call-by-reference entry
					; disable DV (and FU), enable IV
	MTH$FLAG_JACKET			; flag that this is a jacket procedure
					; in case of an error in special JSB 
					; routine
	MOVD	@x(AP), R0		; R0/R1 = arg 
	BSBB	MTH$DATAND_R7		; call special DATAND rountine
	RET				; return - result in R0


	.SBTTL	MTH$DATAND2 - Standard Double Floating Arctangent With 2 Arguments
;++
; FUNCTIONAL DESCRIPTION:
;
; DATAND2  - double precision floating point function
;
; DATAND2(X,Y) is computed as following:
;
;	If Y = 0 or X/Y > 2**57, DATAND2(X,Y) = 90 * (sign X)
;	If Y > 0 and X/Y =< 2**57, DATAND2(X,Y) = DATAND(X/Y)
;	If Y < 0 and X/Y =< 2**57, DATAND2(X,Y) = 180 * (sign X) + DATAND(X/Y)
;
;
; CALLING SEQUENCE:
;
;	Arctangent2.wd.v = MTH$DATAND2(x.rd.r, y.rd.r)
;
; INPUT PARAMETERS:

	x = 1 * LONG			; x is the first argument
	y = 2 * LONG			; y is the second argument

; SIDE EFFECTS:	See description of MTH$DATAND 
;
;--


	.ENTRY	MTH$DATAND2, ACMASK	; standard call-by-reference entry
					; disable DV (and FU), enable IV
	MTH$FLAG_JACKET			; flag that this is a jacket procedure
					; in case of an error in special JSB
					; routine
	MOVD	@x(AP), R0		; R0/R1 = arg1 
	MOVD	@y(AP), R2		; R2/R3 = arg2
;
; Test if Y = 0 or X/Y > 2**57
;
	BEQL	INF_DEG			; branch to INF_DEG if Y = 0
	BICW3	#^X807F, R0, R4		; R4 = exponent(X)
	BICW3	#^X807F, R2, R5		; R5 = exponent(Y)
	SUBW	R5, R4			; R4 = exponent(X) - exponent(Y)
	CMPW	R4, #58*128		; compare R4 with 58
	BGTR	INF_DEG			; if X/Y > 2**57, branch to INF_DEG
;
; Test if Y > 0 or Y < 0
;
	TSTW	R2			; test the sign of Y
	BGTR	A2PLUSD			; branch to A2PLUSD if Y > 0
	TSTW	R0			; test the sign of X
	BGEQ	A1PLUSD			; branch to A1PLUSD if X >= 0
;
; Y < 0 and X < 0 and X/Y =< 2**57
;
	BSBB	MTH$DATAND_R7D		; R0/R1 = DATAND(X/Y)
	SUBD	D_180, R0		; R0/R1 = -180 + DATAND(X/Y)
	RET				; return
;
; Y < 0 and X > 0 and X/Y =< 2**57
;
A1PLUSD:
	BSBB	MTH$DATAND_R7D		; R0/R1 = DATAND(X/Y)
	ADDD	D_180, R0		; R0/R1 = 180 + DATAND(X/Y)
	RET				; return
;
; Y > 0 and X/Y =< 2**57
;
A2PLUSD:
	BSBB	MTH$DATAND_R7D		; R0/R1 = DATAND(X/Y)
	RET				; return
;
; Y = 0 or X/Y > 2**57
;
INF_DEG:
	TSTW	R0			; test the sign of X
	BGTR	1$			; branch if X > 0
	BEQL	2$			; branch if X = 0
	MOVD	D_M90, R0	; R0/R1 = DATAND(X/Y) = -90
	RET				; return

1$:	MOVD	D_90, R0		; R0/R1 = DATAND(X/Y) = 90
	RET				; return

;+
; Here if both X = 0 and Y = 0.  Signal INVALID ARG TO MATH LIBRARY
;-

2$:	ASHQ	#15, #1, R0		; R0/R1 = reserved operand, co180ed
					; to CHF$L_MCH_SAVR0/R1 so handlers
					; can change if they want to continue.
	MOVZBL	#MTH$K_INVARGMAT, -(SP)	; code for INVALID ARG TO MATH LIBRARY
	CALLS	#1, G^MTH$$SIGNAL	; Signal SEVERE error
	RET				; return if a handler says SS$_CONTINUE

	.SBTTL	MTH$DATAND_R7 - Special DATAND routine

; Special DATAND - used by the standard routine, and directly.
;
; CALLING SEQUENCES:
;	save anything needed in R0:R7
;	MOVD	...,R0			; input in R0/R1
;	JSB	MTH$DATAND_R7
;	return with result in R0/R1
; Note: This routine is written to avoid causing any  integer  overflows, 
;   floating overflows, or floating underflows or divide by 0 conditions, 
;   whether enabled or not.
;
; REGISTERS USED:
;	R0/R1 - Floating argument then result
;	R0:R5 - POLYD
;       R6    - Pointer into DATAND_TABLE
;	R6/R7 - Y during POLYD


MTH$DATAND_R7D:				; for local use only!
	DIVD	R2, R0
MTH$DATAND_R7::				; Special DATAND routine
	TSTF	R0			; R6 = X = argument
	BLSS	NEG_ARGD		; Branch to negative argument logic
;
; Argument is positive
;
	SUBW3	#^X3EC0, R0, R6		; Argument is less than 3/32,
	BLSS	SMALLD			;  branch to small argument logic
	CMPW	#^X036F, R6		; Argument is greater that 11,
	BLSS	LARGE_ARGD		;  branch to large argument logic
;
; Logic for positive medium sized arguments.  Get pointer into DATAND_TABLE.
;
	ROTL	#-4, R6, R6		; R6 = index into AB_ATAN table
	BICL	#-256, R6		; zero high order bits of index
	MOVB	G^MTH$$AB_ATAN[R6], R6	; R6 = offset into DATAND_TABLE
	MOVAQ	DATAND_TABLE[R6], R6	; R6 = pointer to XHI
;
; Compute z
;
	MOVQ	(R6)+, R2		; R2 = XHI
	MULD3	R2, R0, R4		; R4 = X*XHI
	ADDD	#1, R4			; R4 = 1 + X*XHI
	SUBD	R2, R0			; R0 = X - XHI
	DIVD	R4, R0			; R0 = Z = (X - XHI)/(1 + X*XHI)
;
; Evaluate Z*P(Z**2)
;
	MOVQ	R0, -(SP)		; Push Z onto the stack
	MULD	R0, R0			; R0 = Z**2
	POLYD	R0, #DATANDLEN1-1, DATANDTAB1
					; R0 = P(Z**2)
	MULD	(SP)+, R0		; R0 = DATAND(Z) = Z*Q(Z**2)
	ADDD	(R6)+, R0		; R0 = DATAND_XHI_LO + DATAND(Z)
	ADDD	(R6), R0		; R0 = DATAND(X) = DATAND_XHI_HI +
					;      (DATAND_XHI_LO + DATAND(Z))
	RSB				; Return


SMALLD:	BRW	SMALL_ARGD		; Dummy label used to avoid adding
					;   an extra insrtuction in the 
					;   medium argument logic
;
; Large positive argument logic.
;

LARGE_ARGD:
	DIVD3	R0, #-1, R6		; R6 = -W = -1/X
	MULD3	R6, R6, R0		; R0 = W**2
	POLYD	R0, #DATANDLEN1-1, DATANDTAB1
					; R0 = P(W**2)
	MULD	R6, R0			; R0 = -DATAND(Z) = -Z*P(W**2)
	ADDD	D_90, R0		; R0 = DATAND(X) = 90 - DATAND(Z)
	RSB				; Return

;
; Logic for negative arguments
;

NEG_ARGD:
	SUBW3	#^XBEC0, R0, R6		; Argument is less than 3/32,
	BLSS	SMALL_ARGD		;  branch to small argument logic
	CMPW	#^X036F, R6		; Argument is greater than 11,
	BLSS	N_LARGE_ARGD		;  branch to large argument logic
;
; Logic for negative medium sized arguments.  Get index into DATAND_TABLE.
;
	ROTL	#-4, R6, R6		; R6 = index into MTH$$AB_ATAN table
	BICL	#-256, R6		; clear high order (unused) bits of ind
	MOVB	G^MTH$$AB_ATAN[R6], R6	; R6 = offset into DATAN_TABLE
	MOVAQ	DATAND_TABLE[R6], R6	; R6 = pointer to XHI
;
; Compute Z
;
	MOVQ	(R6)+, R2		; R2 = XHI
	MULD3	R2, R0, R4		; R4 = X*XHI
	SUBD3	R4, #1, R4		; R4 = 1 - X*XHI = 1 + X*(-XHI)
	ADDD	R2, R0			; R0 = X + XHI = X - (-XHI)
	DIVD	R4, R0			; R0 = Z 
;
; Evaluate Z*P(Z**2)
;
	MOVQ	R0, -(SP)		; Push Z onto the stack
	MULD	R0, R0			; R0 = Z**2
	POLYD	R0, #DATANDLEN1-1, DATANDTAB1
					; R0 = P(Z**2)
	MULD	(SP)+, R0		; R0 = DATAND(Z) = Z*P(Z**2)
	SUBD	(R6)+, R0		; R0 = DATAND_XHI_LO + DATAND(Z)
	SUBD	(R6), R0		; R0 = DATAND(X) = DATAND_XHI_HI +
					;      (DATAND_XHI_LO + DATAND(Z))
	RSB				; Return
;
; Logic for large negative  arguments
;

N_LARGE_ARGD:
	DIVD3	R0, #-1, R6		; R6 = W = 1/|X|
	MULD3	R6, R6, R0		; R0 = W**2
	POLYD	R0, #DATANDLEN1-1, DATANDTAB1
					; R0 = P(W**2)
	MULD	R6, R0			; R0 = DATAND(W) = W*P(W**2)
	SUBD	D_90, R0		; R0 = DATAND(X) = DATAND(W) - 90
	RSB				; Return

;
; Small argument logic.
;

SMALL_ARGD:
	MOVD	R0, R6			; R6 = argument = X
	BEQL	3$			;
	BICW	#^X8000, R0		; R0 = |X|
	CMPW	#^X3280, R0		; Compare 2^-28 to |X|
	BLSS	1$			; Branch to Polyinomial evaluation
	MULD3	D_PI_OV_180_M_64, R6 ,R0; R0 = X*(pi/180 - 64)
	BRB 2$				;
1$:	MULD	R0, R0			; R0 = X**2
	POLYD	R0, #DATANDLEN2-1, DATANDTAB2
					; R0 = Q(X**2)
	MULD	R6, R0			; R0 = X*Q(X**2)
2$:	ADDW	#^X300, R6		; R6 = X*2**6
	ADDD	R6, R0			; R0 = DATAND(X) = X*2**6 + X*Q(X**2)
3$:	RSB				; Return


	.END

