MODULE STR$TRANSLATE (		! copy source to dest and translate

		IDENT = '1-008'	! File: STRTRANSL.B32	Edit: PDG1008

		     ) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY: String support library
!
! ABSTRACT:
!
!	This module takes strings of any supported class or dtype and 
!	copies the source string to the destination string, replacing 
!	any character in the source string that matches a character in 
!	the match string by the corresponding character in the replace 
!	string.
!
! ENVIRONMENT: User mode, AST level or not or mixed
!
! AUTHOR: R. Will, CREATION DATE: 1-Dec-79
!
! MODIFIED BY:
!
!  R. Will, 1-Dec-79: VERSION 01
! 1-001	- Orignal
! 1-002 - String speedup, get status from macro.  RW  11-Jan-1980
! 1-003 - Make trans-table byte, fix signal macro.  RW  11-Feb-1980
! 1-004 - Enhance to recognize additional classes of descriptors by
!	  using $STR$GET_LEN_ADDR to extract length and address of
!	  first byte of data from descriptor.  Remove string
!	  code.  RKR 29-APR-1981
! 1-005 - Expand translate table to 256 bytes so we can accommodate
!	  full 256 character set. RKR 13-MAY-1981
! 1-006 - Speed up code.  RKR 7-OCT-1981.
! 1-007 - Use STR$COPY_R_R8 for copy operation.  Use $STR$SIGNAL_FATAL
!	  instead of $STR$CHECK_STATUS.  RKR 18-NOV-1981.
! 1-008	- Fix bug introduced by edit 6.  Speed up code.  Use DECR in creating
!	  translation table; thus, if a character occurs several times in the
!	  match string, the first is used for translation.  Use STR$COPY_DX_R8
!	  for the copy operation.  PDG 31-Dec-1981
!--

!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE 
		(EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!

REQUIRE 'RTLIN:STRLNK';		! Use require file with string linkage

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    STR$TRANSLATE;		! translate routine

!
! INCLUDE FILES:
!

REQUIRE 'RTLIN:RTLPSECT';	! Declare PSECTS code

REQUIRE 'RTLIN:STRMACROS';	! use string macros to code

LIBRARY 'RTLSTARLE';		! STARLET library for macros and symbol

!
! MACROS: NONE
!

!
! EQUATED SYMBOLS: NONE
!

!
! PSECT DECLARATIONS
!

DECLARE_PSECTS (STR);

!
! OWN STORAGE: NONE
!

!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    LIB$STOP,					! Signal errors
    STR$COPY_DX_R8 : STR$JSB_COPY_DX ;		! Routine to do the copy

EXTERNAL LITERAL
    STR$_NORMAL;			! successful completion

GLOBAL ROUTINE STR$TRANSLATE (		! translate

	DEST_DESC, 		! Pointer to destination descriptor
	SRC_DESC,		! Pointer to source descriptor
	TRANSLATE_DESC,		! Pointer to translation string desc
	MATCH_DESC		! pointer to match string desc

			     ) : =
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine copies the input string to the output string  and
!	translates all characters in the source string which are also in
!	the match string to the corresponding character in the 
!	translate string.  If the translate string is shorter than the 
!	match string, the replace string is expanded to the length of 
!	the match string with blanks.
!
! FORMAL PARAMETERS:
!
!	DEST_DESC.wt.dx		pointer to destination string descriptor
!	SRC_DESC.rt.dx		pointer to source string descriptor
!	TRANSLATE_DESC.rt.dx	pointer to translate string descriptor
!	MATCH_DESC.rt.dx	pointer to match string descriptor
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION CODES:
!
!	SS$_NORMAL	Success
!	STR$_TRU	Truncation occurred.  Warning.
!
! SIDE EFFECTS:
!
!	May signal:
!	    STR$_FATINTERR	Fatal internal error
!	    STR$_ILLSTRCLA	Illegal (or unsupported) string class
!	    STR$_INSVIRMEM	Insufficient virtual memory for
!				reallocation of dynamic string
!
!--

    BEGIN

    LOCAL
	MATCH_LEN,				! length of match string
	MATCH_ADDR,				! addr of 1st byte of
						! match string
	TRANS_LEN,				! length of translate
						! string
	TRANS_ADDR,				! addr of 1st byte of
						! translate string
	DEST_LEN,				! length of destination
						! string
	DEST_ADDR,				! addr of 1st byte of
						! destination string
	MIN_LEN,
	RETURN_STATUS, 				! status from STR$COPY
	TRANSLATE_TABLE : VECTOR [256, BYTE];	! table to do translate

    MAP
	DEST_DESC      : REF $STR$DESCRIPTOR,
	SRC_DESC       : REF $STR$DESCRIPTOR,
	TRANSLATE_DESC : REF $STR$DESCRIPTOR,
	MATCH_DESC     : REF $STR$DESCRIPTOR;

!+
! compute length and address of 1st data byte of strings involved
! and signal if any fatal errors result
!-
    $STR$GET_LEN_ADDR ( MATCH_DESC, MATCH_LEN, MATCH_ADDR ) ;
    $STR$GET_LEN_ADDR ( TRANSLATE_DESC, TRANS_LEN, TRANS_ADDR ) ;

!+
! Copy source to the destination string and signal fatal errors.
!-

    RETURN_STATUS = STR$COPY_DX_R8 ( .DEST_DESC, .SRC_DESC );

    $STR$SIGNAL_FATAL (RETURN_STATUS) ;

!+
! Get length and addr of 1st byte of destination after copy operation.
!-
    $STR$GET_LEN_ADDR ( DEST_DESC, DEST_LEN, DEST_ADDR ) ;
!+
! The copy is finished, now create the translate table
!-

    BEGIN	! This block does the equivalent of:
    		! INCR I FROM 0 TO 255 DO TRANSLATE_TABLE[.I]=.I ;
		! but does it a longword at a time
    LOCAL
	X: REF VECTOR;
    X = TRANSLATE_TABLE;
    X[0] = %X'03020100';
    DECR I FROM 256/%UPVAL-2 TO 0 DO	! initilize to translate to self
	BEGIN
	X[1] = .X[0] + %X'04040404';
	X = .X + %UPVAL;
	END;
    END;

    MIN_LEN = MINU(.MATCH_LEN, .TRANS_LEN);

    INCR I FROM .MIN_LEN TO .MATCH_LEN-1 DO
	TRANSLATE_TABLE [CH$RCHAR (CH$PLUS (.MATCH_ADDR, .I))] =
	    STR$K_FILL_CHAR;


    DECR I FROM .MIN_LEN-1 TO 0 DO	! fill in users translate
	TRANSLATE_TABLE [CH$RCHAR (CH$PLUS (.MATCH_ADDR, .I))] =
	    CH$RCHAR (CH$PLUS (.TRANS_ADDR, .I));

!+
! Now translate the destination string in place.
!-

    CH$TRANSLATE (
	TRANSLATE_TABLE,		! ASCII translation table
	.DEST_LEN,			! from destination
	.DEST_ADDR,			!
	STR$K_FILL_CHAR,		! never used since same string
	.DEST_LEN,			! to destination
	.DEST_ADDR);
    
    RETURN .RETURN_STATUS;
    END;					!End of STR$TRANSLATE

END						!End of module
ELUDOM
