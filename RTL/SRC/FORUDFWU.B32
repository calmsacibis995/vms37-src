MODULE FOR$$UDF_WU (				! FORTRAN Write unformatted UDF
		IDENT = '1-012'			! File: FORUDFWU.B32  Edit: JAW1012
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY:  FORTRAN Support Library - not user callable
!
! ABSTRACT:
!
!	This module implements FORTRAN Write unformatted I/O
!	statements (sequential access - S, direct access - D,
!	at the User data Formatter level of
!	abstraction (UDF level is 2nd level). This module
!	calls the appropriate write record
!	routine at the record handling level of abstraction (REC
!	level is 3rd level) to write a record.
!
! ENVIRONMENT:  User access mode; reentrant AST level or not.
!
! AUTHOR:  Thomas N. Hastings;	 CREATION DATE: 20-Feb-77
!
! MODIFIED BY:
!	Thomas N. Hastings, 12-Mar-77: Version 01
! 01	-  original
! 0-4	- Removed parameters to record level routines JMT 17-OCT-77
! 0-05	- Use FOR$K_abcmno05yz as E05TERNAL LITERALs.  TNH 27-Oct-77
! 0-06	- Global register CCB.  JMT 8-Apr-78
! 0-07	- Change REQUIRE files for VAX system build.  DGP 28-Apr-78
! 0-08	- Use JSB linkages.  TNH 22-May-78
! 0-09	- PIC dispatch tables.  TNH 7-June-78
! 0-10	- Change file name to FORUDFWU.B32, and change the names of the
!	   REQUIRE files similarly.  JBS 14-NOV-78
! 1-001	- Update version number and copyright notice.  JBS 16-NOV-78
! 1-002	- Change REQUIRE file names from FOR... to OTS...  JBS 06-DEC-78
! 1-003 - Change references to I/O dipatch tables.  DGP 08-Dec-78
! 1-004 - Change dispatch tables references to longwords.  DGP 11-Dec-78
! 1-005 - Change ISB$A_BUF_PTR, BUF_BEG, BUF_END, BUF_HIGH to LUB. DGP 08-Jan-79
! 1-006	- Use 32-bit addresses for externals.  JBS 27-JAN-1979
! 1-007	- Use language-specific dispatch tables.  JBS 26-JUN-1979
! 1-008 - Use ISB dispatch offset symbols.  SBL 12-July-1979
! 1-009 - Signal an error if the record overflows and its not
!	  segmented.  V2 FT1 Report #61  SBL 18-Sept-1979
! 1-010 - Implement unbuffered transfers for single-element lists: if
!	  recordtype is not segmented and record size permits, set up
!	  RAB so record will be written directly from element, and do
!	  not copy element to buffer.  JAW 06-May-1981
! 1-011 - Continuation of 1-010.  Simplify tests in FOR$$UDF_WU1.
!	  JAW 02-Jun-1981
! 1-012 - Continuation of 1-010.  Recast test in FOR$$UDF_WU1 for better
!	  code.  Remove unnecessary resetting of flag in FOR$$UDF_WU9.
!	  JAW 06-Jun-1981
!--

!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!

REQUIRE 'RTLIN:OTSLNK';				! Define all linkages

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    FOR$$UDF_WU0 : JSB_UDF0 NOVALUE,		! initialization
    FOR$$UDF_WU1 : CALL_CCB NOVALUE,		! format one user I/O list element
    FOR$$UDF_WU9 : JSB_UDF9 NOVALUE;		! end of user I/O list - finish

!
! INCLUDE FILES:
!

REQUIRE 'RTLML:FORERR';				! FORTRAN error codes
REQUIRE 'RTLML:OTSISB';				! I/O statement block (ISB) offsets

REQUIRE 'RTLML:OTSLUB';				! Logical unit block (LUB)

REQUIRE 'RTLIN:OTSMAC';				! Macros

REQUIRE 'RTLIN:RTLPSECT';			! Define DELCARE_PSECTS macro

REQUIRE 'RTLIN:RTLODBG';			! RTL debugging macros

LIBRARY 'RTLSTARLE';

!
! MACROS:
!
!
! EQUATED SYMBOLS:
!
						! all other FORTRAN data type codes are larger valued
!
! PSECT DECLARATIONS:
!
DECLARE_PSECTS (FOR);				! declare PSECTs for FOR$ facility
!
! OWN STORAGE:
!
!	None
!
! EXTERNAL REFERENCES:
!

EXTERNAL
    FOR$$AA_REC_PR0 : VECTOR,			! PIC array of record processor
    						! procedure-initializations in REC
    						! level of abstraction. Indexed by
    						! I/O statement type (ISB$B_STTM_TYPE)
    FOR$$AA_REC_PR1 : VECTOR,			! PIC array of record processor procedures
    						! Write a record in REC level of
    						! abstraction. Indexed by I/O statement
    						! type (ISB$B_STTM_TYPE)
    FOR$$AA_REC_PR9 : VECTOR;			! PIC array of record processor procedures

						! Write last record in REC level of
						! abstraction. Indexed by I/O
						! statement type (ISB$B_STTM_TYPE)

EXTERNAL ROUTINE
    FOR$$SIGNAL_STO : NOVALUE;			! Signal fatal error

GLOBAL ROUTINE FOR$$UDF_WU0 			! Write unformatted UDF initialization
    : JSB_UDF0 NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
! Initialize Write unformatted User data formatter (UDF)
!
! CALLING SEQUENCE:
!
!	JSB FOR$$UDF_WU0 ()
!
! FORMAL PARAMETERS:
!
!	None.
!
! IMPLICIT INPUTS:
!
!	CCB			Pointer to current logical unit block
!	ISB$B_STTM_TYPE		I/O statement type code - set by
!				each I/O statement initialization
!
! IMPLICIT OUTPUTS:
!
!	LUB$A_BUF_PTR		Adr. of next byte of output
!				data buffer
!	LUB$A_BUF_END		Adr. of end+1 byte position of output buffer
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    EXTERNAL REGISTER
	CCB : REF BLOCK [, BYTE];

    !+
    ! Initialize Record processing level of abstraction.
    ! Set pointer to current (LUB$A_BUF_PTR)  and last+1
    ! (LUB$A_BUF_END) character position for user data in
    ! output buffer
    !-

    JSB_REC0 (FOR$$AA_REC_PR0 + .FOR$$AA_REC_PR0 [.CCB [ISB$B_STTM_TYPE] -
						  ISB$K_FORSTTYLO + 1]);

    RETURN;
    END;					! End of FOR$$UDF_WU0 routine


GLOBAL ROUTINE FOR$$UDF_WU1 (			! Copy one user output element
	ELEM_TYPE, 				! Type code of user I/O list element
	ELEM_SIZE, 				! No. of addressable units in element
	ELEM_ADR)				! Adr. of element
    : CALL_CCB NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	FOR$$UDF_WU1 copies a single user I/O list element
!	and places it in the current output buffer.
!	If the entire user element will not fit in the buffer,
!	only part if copied and the buffer is output by calling
!	the proper record level (3rd level of abstraction).
!
!	If an unbuffered transfer is possible, no data is copied, and
!	the RAB is set up to point to the element itself.
!
!	FOR$$UDF_WU is the same for all access modes.
!
! CALLING SEQUENCE:
!
!	CALL FOR$$UDF_WU1 (elem_type.rlu.v, elem_size.rlu.v, elem_adr.rx.r)
!
! FORMAL PARAMETERS:
!
!	ELEM_TYPE.rlu.v		Type code of user I/O list
!				element. Form: ELEM_TYPE_x
!				x = B,W,L,WU,LU,F,D,FC,T,G,H,DC or GC.
!	ELEM_SIZE.rlu.v		Size of user I/O list element
!				in addressable machine units
!	ELEM_ADR.rx.r		Adr. of user I/O list element
!				x = b, w, l, wu, lu, f, d, fc, t,
!				g, h, dc or gc.
!
! IMPLICIT INPUTS:
!
!	OTS$$A_CUR_LUB		Pointer to current logical unit block
!				(LUB). Used to setup base pointer ISB
!				to current I/O statement block
!	ISB$B_STTM_TYPE		I/O statement type code - set by each
!				I/O statement initialization
!	ISB$V_SNGL_ELEM		Flag indicating that this element is the
!				only element in the current I/O list.
!
! The following ISB locations are set only by previous calls to
! FOR$$UDF_WU{0,1}, i.e., are effectively OWN.
!
!	LUB$A_BUF_PTR		Pointer to next char. position
!				in user data part of output buffer
!	LUB$A_BUF_END		Adr. of last+1 byte position of output buffer
!
! IMPLICIT OUTPUTS:
!
!	ISB$V_SNGL_ELEM		This flag is cleared if an unbuffered
!				transfer is not possible.
!
! The following ISB locations are set only by previous calls
! to FOR$$UDF_WU{0,1}, i.e., are effectively OWN.
!
!	LUB$A_BUF_PTR		Pointer to next char. position
!				in user data part of output buffer
!
! FUNCTIONAL VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	SIGNAL_STOPs FOR$_OUTSTAOVE (Output statement overflows record)
!--

    BEGIN

    EXTERNAL REGISTER
	CCB : REF BLOCK [, BYTE];

    !+
    ! If this is a single-element list, check to see if the conditions
    ! for an unbuffered transfer are met.  If so, set RAB$L_RBF and
    ! RAB$W_RSZ to point directly to the element, and return leaving
    ! ISB$V_SNGL_ELEM set as an indication to REC level not to change
    ! them.  Otherwise clear ISB$V_SNGL_ELEM and proceed normally.
    !-

    IF .CCB [ISB$V_SNGL_ELEM]
    THEN
	IF NOT .CCB [LUB$V_SEGMENTED] AND
	    (IF .CCB [LUB$V_FIXED] THEN .ELEM_SIZE EQLU .CCB [LUB$W_RBUF_SIZE]
	    ELSE .ELEM_SIZE LSSU .CCB [LUB$W_RBUF_SIZE])
	THEN
	    BEGIN
		CCB [RAB$L_RBF] = .ELEM_ADR;
		CCB [RAB$W_RSZ] = .ELEM_SIZE;
		RETURN;
	    END
	ELSE
	    CCB [ISB$V_SNGL_ELEM] = 0;

    BEGIN

    LOCAL
	TMP_ELEM_SIZE,			! temp no. ob bytes left in user element to copy
	TMP_ELEM_ADR,			! temp adr. of rest of user element to copy
	TMP_DIFF;				! temp. no. of bytes to move each time in loop

    !+
    ! If the record will overflow, write as much as will fit.  If this
    ! is done, and the file is not SEGMENTED, then error FOR$_OUTSTAOVE.
    ! If segmented, continue writing records until overflow is removed.
    !-

    TMP_ELEM_SIZE = .ELEM_SIZE;
    TMP_ELEM_ADR = .ELEM_ADR;

    WHILE .CCB [LUB$A_BUF_PTR] + .TMP_ELEM_SIZE GTRA .CCB [LUB$A_BUF_END] DO
	BEGIN
	TMP_DIFF = .CCB [LUB$A_BUF_END] - .CCB [LUB$A_BUF_PTR];
	CCB [LUB$A_BUF_PTR] = CH$MOVE (.TMP_DIFF, .TMP_ELEM_ADR, .CCB [LUB$A_BUF_PTR]);
	TMP_ELEM_SIZE = .TMP_ELEM_SIZE - .TMP_DIFF;
	TMP_ELEM_ADR = .TMP_ELEM_ADR + .TMP_DIFF;

	JSB_REC1 (FOR$$AA_REC_PR1 + .FOR$$AA_REC_PR1 [.CCB [ISB$B_STTM_TYPE] -
						  ISB$K_FORSTTYLO + 1]);
	IF NOT .CCB [LUB$V_SEGMENTED]
	THEN
	    FOR$$SIGNAL_STO (FOR$K_OUTSTAOVE);
	END;

	!+
	! Copy the remainder of the user element that will fit into the output buffer
	! Update buffer pointer (LUB$A_BUF_PTR) to point to last byte+1 moved.
	!-

	CCB [LUB$A_BUF_PTR] = CH$MOVE (.TMP_ELEM_SIZE, .TMP_ELEM_ADR, .CCB [LUB$A_BUF_PTR]);
	RETURN;					! Return from FOR$$UDF_WF1 routine
    END;
END;					!	End of FOR$$UDF_WU1


GLOBAL ROUTINE FOR$$UDF_WU9 			! unformatted output - end of I/O list call
    : JSB_UDF9 NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	FOR$$UDF_WU9 performs end of I/O list output formatting.
!
! CALLING SEQUENCE:
!
!	JSB FOR$$UDF_WU9 ()
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	See FOR$$UDF_WU1
!
!
! IMPLICIT OUTPUTS:
!
!	See FOR$$UDF_WU1
!
! FUNCTION VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	See FOR$$UDF_WU1
!--

    BEGIN

    EXTERNAL REGISTER
	CCB : REF BLOCK [, BYTE];

    !+
    ! Call record level of abstraction to output buffer from beginning up to but not including LUB$A_BUF_PTR
    !-

    JSB_REC9 (FOR$$AA_REC_PR9 + .FOR$$AA_REC_PR9 [.CCB [ISB$B_STTM_TYPE] -
						  ISB$K_FORSTTYLO + 1]);

    RETURN;
    END;					! End of FOR$$UDF_WU9 Routine

END						! End of FOR$$UDF_WU Module

ELUDOM
