MODULE BAS$RESTORE (				! Basic RESTORE construct
		IDENT = '1-005'			! File: BASRESTOR.B32
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:
!	Basic support library - user callable
!
! ABSTRACT:
!	This module is the UPI level of the Basic RESTORE construct.  Initially,
!	it contains only the code for sequential I/O.  This module will set
!	up the I/O data base for the LUN and go directly to the REC level.
!	The code for RESTORE (no channel number) is appended as an
!	afterthought.
!
!
! ENVIRONMENT:
!	User access mode - AST reentrant.
!
! AUTHOR: Donald G. Petersen, CREATION DATE: 27-Feb-79
!
! MODIFIED BY:
!
!	DGP, 27-Feb-79 : VERSION 01
! 1-001	- original.  DGP 27-Feb-79
! 1-002	- Add code for RESTORE_DATA from old version of the
!	   RESTORE module.  JBS 28-FEB-1979
! 1-003 - Add RESTORE_KEY.  DGP 06-Apr-79
! 1-004	- Set up ISB$A_USER_FP.  JBS 25-JUL-1979
! 1-005 - Check for virtual array use of this file.  DGP 16-Oct-79
!--

!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES
!

REQUIRE 'RTLIN:OTSLNK';				! Define all linkages

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    BAS$RESTORE_KEY : NOVALUE,			! UPI level Indexed RESTORE
    BAS$RESTORE : NOVALUE,			! UPI level Sequential RESTORE
    BAS$RESTORE_DAT : NOVALUE;			! RESTORE (DATA statement)

!
! INCLUDE FILES:
!

REQUIRE 'RTLIN:BASFRAME';			! BASIC stack frame definitions

REQUIRE 'RTLIN:BASINARG';			! Frame init argument list

REQUIRE 'RTLML:OTSISB';				! ISB definitions

REQUIRE 'RTLML:OTSLUB';				! LUB definitions

REQUIRE 'RTLIN:RTLPSECT';			! Define DECLARE_PSECTS macro

LIBRARY 'RTLSTARLE';				! Starlet system macros

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!	NONE
!
!
! PSECT DECLARATIONS:
!
DECLARE_PSECTS (BAS);
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    BAS$$REC_RIN : JSB_REC_IND,			! REC level processing - indexed I/O
    BAS$$REC_RSE : JSB_REC0 NOVALUE,		! REC level processing - RMS interface
    						! RESTORE sequential
    BAS$$CB_PUSH : JSB_CB_PUSH NOVALUE,		! Load register CCB
    BAS$$CB_POP : JSB_CB_POP NOVALUE,		! Done with register CCB
    BAS$$STOP : NOVALUE,			! Signal fatal error
    BAS$$STOP_IO : NOVALUE,			! Signal fatal I/O error
    BAS$HANDLER;				! flags a BASIC frame

!+
! The following are the error codes used in this module.
!-

EXTERNAL LITERAL
    BAS$K_PROLOSSOR : UNSIGNED (8),		! Program lost, sorry
    BAS$K_ILLILLACC : UNSIGNED (8),		! illegal or illogical access
    BAS$K_IO_CHANOT : UNSIGNED (8);		! I/O channel not open


GLOBAL ROUTINE BAS$RESTORE (			! RESTORE sequential
	UNIT					! logical unit number
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine will set up the I/O data base for this LUN if necessary
!	and then go directly to the REC level.  When control is returned to
!	this routine, it pops the CCB off of the I/O system.  The actual inter-
!	face to RMS is done at the REC level.  The file is rewound.
!
! FORMAL PARAMETERS:
!
!	UNIT.rlu.v	logical unit number
!
! IMPLICIT INPUTS:
!
!	LUB$V_VA_USE		virtual array use
!
! IMPLICIT OUTPUTS:
!
!	ISB$B_STTM_TYPE		the statement type
!	LUB$V_BLK_USE		non-virtual array use
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Signals:
!	BAS$K_IO_CHANOT (I/O channel not open)
!	BAS$K_ILLILLACC (illegal or illogical access)
!
!--

    BEGIN

    BUILTIN
	FP;

    GLOBAL REGISTER
	CCB = K_CCB_REG : REF BLOCK [, BYTE];

    LOCAL
	FMP : REF BLOCK [, BYTE];

    FMP = .FP;
!+
! Allocate the LUB/ISB/RAB for this unit if necessary.  Store new CB (con-
! trol block) in OTS$$A_CUR_LUB.  Store signed unit number in LUB$W_LUN.
!-
    BAS$$CB_PUSH (.UNIT, LUB$K_ILUN_MIN);
    CCB [ISB$A_USER_FP] = .FMP [SF$L_SAVE_FP];
!+
! If the channel is not open, give an error message.
! Channel 0 is not valid.
!-

    IF ( NOT .CCB [LUB$V_OPENED]) THEN BAS$$STOP_IO (BAS$K_IO_CHANOT);

!+
! Now that the data base is in place, store the statement type and  go
! directly to the REC level.
!-
    CCB [ISB$B_STTM_TYPE] = ISB$K_ST_TY_RES;
!+
! Check for virtual array usage and set block usage
!-
    IF .CCB [LUB$V_VA_USE] THEN BAS$$STOP_IO(BAS$K_ILLILLACC);
    CCB [LUB$V_BLK_USE] = 1;
    BAS$$REC_RSE ();
!+
! Now that the RESTORE has been done, pop the CCB off the I/O system.
!-
    BAS$$CB_POP ();
    END;					!End of BAS$RESTORE


GLOBAL ROUTINE BAS$RESTORE_KEY (		! RESTORE indexed
	UNIT, 					! logical unit number
	KEY_NO					! key number
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine will set up the I/O data base for this LUN if necessary
!	and then go directly to the REC level.  When control is returned to
!	this routine, it pops the CCB off of the I/O system.  The actual inter-
!	face to RMS is done at the REC level.  The file is rewound based on the
!	key specified.
!
! FORMAL PARAMETERS:
!
!	UNIT.rlu.v	logical unit number
!	KEY_NO.rlu.v	key of reference number
!
! IMPLICIT INPUTS:
!
!	LUB$V_VA_USE		virtual array use of file
!
! IMPLICIT OUTPUTS:
!
!	ISB$B_STTM_TYPE		the statement type
!	LUB$V_BLK_USE		non-virtual use of file
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Signals:
!	BAS$K_IO_CHANOT (I/O channel not open)
!	BAS$K_ILLILLACC (illegal or illogical access)
!
!--

    BEGIN

    BUILTIN
	FP;

    GLOBAL REGISTER
	CCB = K_CCB_REG : REF BLOCK [, BYTE];

    LOCAL
	FMP : REF BLOCK [, BYTE];

    FMP = .FP;
!+
! Allocate the LUB/ISB/RAB for this unit if necessary.  Store new CB (con-
! trol block) in OTS$$A_CUR_LUB.  Store signed unit number in LUB$W_LUN.
!-
    BAS$$CB_PUSH (.UNIT, LUB$K_ILUN_MIN);
    CCB [ISB$A_USER_FP] = .FMP [SF$L_SAVE_FP];
!+
! If the channel is not open, give an error message.
!-

    IF ( NOT .CCB [LUB$V_OPENED]) THEN BAS$$STOP_IO (BAS$K_IO_CHANOT);

!+
! Now that the data base is in place, store the statement type and  go
! directly to the REC level.
!-
    CCB [ISB$B_STTM_TYPE] = ISB$K_ST_TY_RIN;
!+
! Check for virtual array usage and set block usage
!-
    IF .CCB [LUB$V_VA_USE] THEN BAS$$STOP_IO(BAS$K_ILLILLACC);
    CCB [LUB$V_BLK_USE] = 1;
    BAS$$REC_RIN (.KEY_NO);
!+
! Now that the GET has been done, pop the CCB off the I/O system.
!-
    BAS$$CB_POP ();
    END;


GLOBAL ROUTINE BAS$RESTORE_DAT : NOVALUE = 	! Restore DATA pointer

!++
! FUNCTIONAL DESCRIPTION:
!
!	Restore the current DATA pointer, so that it again points
!	to the beginning of the DATA text.  This routine is called
!	by the RESTORE BASIC statement.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	BAS$L_IN_BEG_DA.rl	Offset to the beginning of the DATA
!				string (in the argument list to the
!				routine that initialized the frame)
!	BSF$L_INIT_REL.rl	Base for the above offset
!	BSF$A_INIT_ARG.ra	Address of the arg list (which contains
!				BAS$L_IN_BEG_DA)
!
! IMPLICIT OUTPUTS:
!
!	BSF$A_CUR_DTA.wa	Current position in the DATA string
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Manipulates the frame of its caller, which must be a BASIC frame.
!
!--

    BEGIN

    BUILTIN
	FP;

    LOCAL
	FMP : REF BLOCK [0, BYTE] FIELD (BSF$FCD),	! our frame
	CALLERS_FCD : REF BLOCK [0, BYTE] FIELD (BSF$FCD),	! caller's frame
	INIT_ARG : REF BLOCK [0, BYTE] FIELD (BAS$INIT_ARGS),	! init arg list
	MAJOR_FCD : REF BLOCK [0, BYTE] FIELD (BSF$FCD);	! caller's major frame

!+
! Get pointer to caller's frame.
!-
    FMP = .FP;
    CALLERS_FCD = .FMP [BSF$A_SAVED_FP];
!+
! If the caller's frame is not a BASIC frame, we have a fatal error.
!-

    IF (.CALLERS_FCD [BSF$A_HANDLER] NEQA BAS$HANDLER) THEN BAS$$STOP (BAS$K_PROLOSSOR);

!+
! Get a pointer to the caller's major frame.  This may be the same as
! the caller's frame, but it will be different if, for example, the
! RESTORE is in a GOSUB, DEF or condition handler.
!-
    MAJOR_FCD = .CALLERS_FCD [BSF$A_BASE_R11] + %FIELDEXPAND (BSF$FRAME_BASE, 0);
!+
! Get a pointer to the initialization argument list for the caller's
! frame.  The initialization routine cleverly saved such a pointer
! for us in the major frame.
!-
    INIT_ARG = .MAJOR_FCD [BSF$A_INIT_ARG];
!+
! Relocate the offset to the beginning of the DATA text, and store
! it in the frame as the current pointer to the DATA text.
!-
    MAJOR_FCD [BSF$A_CUR_DATA] = .INIT_ARG [BAS$L_IN_BEG_DA] + .MAJOR_FCD [BSF$L_INIT_REL];
!+
! All done.
!-
    END;					! end of BAS$RESTORE_DAT

END						!End of module - BAS$RESTORE

ELUDOM
