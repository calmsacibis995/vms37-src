	.TITLE	MTH$DTANH 	; Floating Point Hyperbolic Tangent routine
				; (DTANH)
	.IDENT /1-010/		; File: MTHDTANH.MAR  Edit: SBL1010
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;
; FACILITY: MATH LIBRARY
;++
; ABSTRACT:
;
; MTH$DTANH is a function  which  returns the floating point hyperbolic tangent
; of its single precision floating point argument. The call is standard
; call-by-reference.
;
;--
;
; VERSION: 01
;
; HISTORY:
; AUTHOR:
;	Peter Yuo, 29-Jun-77: Version 01
;
; MODIFIED BY:
;
;
;

	.SBTTL	HISTORY	; Detailed Current Edit History


; ALGORITHMIC DIFFERENCES FROM FP-11/C ROUTINE:	none
;
; Edit History for Version 01 of MTH$DTANH 
;
; 0-3	Call MTH$DCOSH, MTH$DSINH directly instead of using POLY.
; 0-4	- Add .EXTRNs.  TNH 13-June-78
; 0-5	- Use W offset on externals.  TNH 13-June-78
;	More accurrate.  TNH 13-June-78
; 1-006	- Update version number and copyright notice.  JBS 16-NOV-78
; 1-007	- Add "_" to the PSECT directive.  JBS 22-DEC-78
; 1-008 - Use MTH$DEXP_R6.  SBL 27-Sept-1979
; 1-009 - Change constant 16.0 to 22.0 to correct inaccuracy.  The
;	   value of X above which 1.0 is the best machine approximation
;	   to DTANH(X) is about 20.10.  The next higher number that can
;	   be represented as a short literal is 22.0.  JAW 19-Sep-80
; 1-010 - Use general mode addressing.  SBL 30-Nov-1981

	.SBTTL	DECLARATIONS	; Declarative Part of Module

;
; INCLUDE FILES:
;
; EXTERNAL SYMBOLS:	MTH$JACKET_HDLR
;
	.DSABL	GBL			; Force .EXTRN on all symbols
	.EXTRN	MTH$DCOSH		; DCOSH
	.EXTRN	MTH$DSINH		; DSINH
	.EXTRN	MTH$DEXP_R6		; EXP
; EQUATED SYMBOLS:

	SD_1.0	= ^F1.0			; 1.0
	SD_22.0	= ^F22.0			; 22.0
	value	= 4			; value.rd.r

;
; MACROS:	none
;
; PSECT DECLARATIONS:

	.PSECT	_MTH$CODE	PIC,SHR,LONG,EXE,NOWRT
					; program section for math routines
;
; OWN STORAGE:	none
;
;
; CONSTANTS:
;

D_0.25:
	.WORD	^X3F80, 0, 0, 0		; 0.25
D_2_POWER_M14:
	.WORD	^X3980, 0, 0, 0		; 2**-14


	.SBTTL	MTH$DTANH  - Standard DOUBLE Precision Floating DTANH


;++
; FUNCTIONAL DESCRIPTION:
;
; DTANH  - double precision floating point function
;
; DTANH(X) is computed as:
;
;	If |X| =< 2**-14, then DTANH(X) = X.
;	If 2**-14 < |X| =< 0.25, then DTANH(X) = DSINH(X)/DCOSH(X).
;	If 0.25 < |X| < 22.0, then DTANH(X) = (DEXP(2*X) - 1) / (DEXP(2*X) + 1)
;	If 22.0 =< |X|, then DTANH(X) = sign(X) * 1
;
; CALLING SEQUENCE:
;
;	DTANH.wd.v = MTH$DTANH(x.rd.r)
;
; INPUT PARAMETERS:

	LONG = 4			; define longword multiplier
	x = 1 * LONG			; Contents of x is the argument

; IMPLICIT INPUTS:	none
;
; OUTPUT PARAMETERS:
;
;	VALUE:	double precision floating hyperbolic tangent of the argument
;
; IMPLICIT OUTPUTS:	none
;
; COMPLETION CODES:	none
;
; SIDE EFFECTS:	none
;
; NOTE: This procedure disables floating point underflow, enables integer
; overflow.
;
;---


	.ENTRY	MTH$DTANH, ^M<IV, R2, R3, R4, R5, R6>
					; standard call-by-reference entry
					; disable DV (and FU), enable IV
	MTH$FLAG_JACKET			; flag that this is a jacket procedure in
					; case of an error in routine
					; If an error, convert signal to user PC
					; and resignal
	MOVD	@value(AP), R0		; R0/R1 = |X| = @value(AP)
	BICW	#^X8000, R0		; R0/R1 = |X|
	CMPD	R0, D_2_POWER_M14	; compare |X| with 2**-14
	BLEQ	OUT_X			; branch if |X| =< 2**-14

;
; 2**-14 < |X|
;

	CMPD	R0, S^#SD_22.0		; compare |X| with 22.0
	BGEQ	GEQ_TO_22.0		; branch if |X| >= 22.0

;
; 2**-14 < |X| < 22.0
;

	CMPD	R0, D_0.25		; compare |X| with 0.25
	BLEQ	LEQ_TO_0.25		; branch if |X| =< 0.25

;
; 0.25 < |X| < 22.0
;

	ADDD3	@value(AP), @value(AP), R0
					; R0/R1 = 2*X
	JSB	G^MTH$DEXP_R6		; R0/R1 = DEXP(2*X)
	ADDD3	S^#SD_1.0, R0, R2	; R2/R3 = DEXP(2*X) + 1
	SUBD	S^#SD_1.0, R0		; R0/R1 = DEXP(2*X) - 1
	DIVD	R2, R0			; R0/R1 = (DEXP(2*X) - 1) / (DEXP(2*X) + 1)
	RET				; return with result in R0/R1

;
; 2**-1R6 < |X| =< 0.25
;

LEQ_TO_0.25:
	CALLG	(AP), G^MTH$DCOSH	; R0/R1 = DCOSH(X)
	MOVD	R0, R2			; R2/R3 = DCOSH(X)
	CALLG	(AP), G^MTH$DSINH	; R0/R1 = DSINH(X)
	DIVD	R2, R0			; R0/R1 = DSINH(X) / DCOSH(X)
	RET				; return with result in R0

;
; |X| >= 22.0
;

GEQ_TO_22.0:
	MOVD	S^#SD_1.0, R0		; R0/R1 = 1.0
	TSTD	@value(AP)		; test the sign of X
	BGEQ	10$			; branch if X >= 0
	MNEGD	R0, R0			; R0/R1 = -1
10$:	RET				; return with result in R0

;
; |X| =< 2**-14
;

OUT_X:	MOVD	@value(AP), R0		; R0/R1 = DTANH(X) = X
	RET				; return with result in R0/R1



	.END
