	.TITLE	MTH$GTAN 	; G Floating Point Tangent routine
				; (GTAN,GTAND)
	.IDENT /1-011/		; File: MTHGTAN.MAR  EDIT: SBL1011
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;
; FACILITY: MATH LIBRARY
;++
; ABSTRACT:
;
; MTH$GTAN is a function  which  returns the G floating point tangent
; of its G floating point radian argument. The call is standard
; call-by-reference.  It JSB to MTH$GTAN_R7.
;
; MTH$GTAND is a function  which  returns the G floating point tangent
; of its G floating point degree argument. The call is standard
; call-by-reference.  It JSB to MTH$GTAND_R7.
;
;--
;
; VERSION: 1
;
; HISTORY:
; AUTHOR:
;	Steven B. Lionel, 12-Jan-79: Version 1
;
; MODIFIED BY:
;
;
;

	.SBTTL	HISTORY	; Detailed Current Edit History


; Edit History for Version 1 of MTH$GTAN 
;
; 1-001 - Adapted from MTH$DTAN version 1-002.  SBL 15-Jan-79
; 1-002	- Handle exceptions correctly and use general addressing for
;	  externals.  JBS 16-AUG-1979
; 1-003	- Add JSB entry point.  JBS 16-AUG-1979
; 1-004	- Correct a typo in edit 003.  JBS 17-AUG-1979
; 1-005 - Do range check in JSB routine with CMPZV rather than with a pair of
;	  CMPG's.  JAW 16-Oct-1979
; 1-006 - Change MOVD to MOVG in JSB routine.  JAW 17-Oct-1979
; 1-007 - Have CALL use JSB routine.  Fix error handling.
;	  SBL 31-Oct-1979
; 1-008 - Added degree entry points. RNH 8-MAR-1981
; 1-009 - Modify MTH$GTAN_R7 and MTH$GTAND_R7 to JSB to MTH$GSINCOS_R7 and
;	  MTH$GSINCOSD_R7 instead of MTH$GSIN_R7, MTH$GCOS_R7, and
;	  MTH$GSIND_R7, MTH$GCOSD_R7.  RNH 27-AUG-81.
; 1-010 - Change shared external references to G^ RNH 25-Sep-81
; 1-012 - Use general mode addressing.  SBL 30-Nov-1981
;

	.SBTTL	DECLARATIONS	; Declarative Part of Module

;
; INCLUDE FILES:
;
; EXTERNAL SYMBOLS:
	.DSABL	GBL		; prevent undefineds from becoming
				; global
	.EXTRN	MTH$GSINCOS_R7	; G Floating sine cosine routine (radian)
	.EXTRN	MTH$GSINCOSD_R7	; G Floating sine cosine routine (degree)
	.EXTRN	MTH$$SIGNAL	; Math error signal routine
	.EXTRN	MTH$K_FLOOVEMAT	; Overflow error code
	.EXTRN	MTH$K_FLOUNDMAT ; Underflow error code
	.EXTRN	MTH$$JACKET_TST
;
; EQUATED SYMBOLS:	none
;
; MACROS:	
	$SFDEF			; Define SF (Stack Frame)  symbols
;
;
; PSECT DECLARATIONS:

	.PSECT	_MTH$CODE	PIC,SHR,LONG,EXE,NOWRT
					; program section for math routines
;
; OWN STORAGE:	none
;
; CONSTANTS: 

	X = 4				;Position of argument from AP.

G_SMALLEST_DEG:
	.LONG	^XA5DC006C, ^XC1F81A63	; 180/pi*2**1024


	.SBTTL	MTH$GTAN  - Standard G Floating GTAN


;++
; FUNCTIONAL DESCRIPTION:
;
; GTAN  - G floating point function
;
;	For algorithm, see MTH$GTAN_R7.
;
; CALLING SEQUENCE:
;
;	gtan.wg.v = MTH$GTAN(X.rg.r)
;
; INPUT PARAMETERS:
;
;	X.rg.r			;Adrress of value of angle in radians.
;
; IMPLICIT INPUTS:	none
;
; OUTPUT PARAMETERS:
;
;	VALUE:	G floating tangent of the argument
;
; IMPLICIT OUTPUTS:	none
;
; COMPLETION CODES:	none
;
; SIDE EFFECTS:
;
;	See MTH$GTAN_R7
;
;---


	.ENTRY	MTH$GTAN, ^M<IV, R2, R3, R4, R5, R6, R7>
					; standard call-by-reference entry
					; disable DV (and FU), enable IV
	MTH$FLAG_JACKET
	MOVG	@X(AP), R0		; R0/R1 = argument
	BSBB	MTH$GTAN_R7		; Get the tangent
	RET				; With result in R0-R1

	.SBTTL	MTH$GTAN_R7 - JSB entry point
;
;++
; FUNCTIONAL DESCRIPTION:
;
; GTAN - JSB entry point
;
; Algorithmic steps:
;  1. Compute GSIN and GCOS.
;  2. If GCOS is zero, we have an error.
;  3. Return GSIN / GCOS.
;
; CALLING SEQUENCE:
;
;	MOVG	argument, R0
;	JSB	MTH$GTAN_R7
;
; INPUT PARAMETERS:
;
;	R0 / R1 contains x
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	The result is the tangent of x, in G_floating.
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; SIDE EFFECTS:
;
;	NONE
;--
MTH$GTAN_R7::				; entry point
	JSB	G^MTH$GSINCOS_R7		; Compute GSIN(X), and GCOS(X).
	TSTG	R2			; Is GCOS(X) zero ?
	BEQL	COSZER			; If zero, error
	DIVG2	R2, R0			; Compute GSIN / GCOS
	RSB				; Return.


	.SBTTL	MTH$GTAND  - Standard G Floating GTAND


;++
; FUNCTIONAL DESCRIPTION:
;
; GTAND  - G floating point function
;
;	For algorithm, see MTH$GTAND_R7.
;
; CALLING SEQUENCE:
;
;	GTAND.wg.v = MTH$GTAND(x.rg.r)
;
; INPUT PARAMETERS:
;
;	X.rg.r				;Address of value of angle in degrees.
;
; IMPLICIT INPUTS:	none
;
; OUTPUT PARAMETERS:
;
;	VALUE:	G floating tangent of the argument
;
; IMPLICIT OUTPUTS:	none
;
; COMPLETION CODES:	none
;
; SIDE EFFECTS:
;
;	See MTH$GTAND_R7
;
;---


	.ENTRY	MTH$GTAND, ^M<IV, R2, R3, R4, R5, R6, R7>
					; standard call-by-reference entry
					; disable DV (and FU), enable IV
	MTH$FLAG_JACKET
	MOVG	@X(AP), R0		; R0/R1 = argument
	BSBB	MTH$GTAND_R7		; Get the tangent
	RET				; With result in R0-R1

	.SBTTL	MTH$GTAND_R7 - JSB entry point
;
;++
; FUNCTIONAL DESCRIPTION:
;
; GTAND - JSB entry point
;
; Algorithmic steps:
;  1. Make sure that the absolute value of the argument is greater than
;     180/pi*2**-1024, otherwise GSIND will underflow.
;  2. Compute GSIND and GCOSD.
;  3. If GCOSD is zero, we have an error.
;  4. Return GSIND / GCOSD.
;
; CALLING SEQUENCE:
;
;	MOVG	argument, R0
;	JSB	MTH$GTAND_R7
;
; INPUT PARAMETERS:
;
;	R0 / R1 contains x
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	The result is the tangent of x, in G_floating.
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; SIDE EFFECTS:
;
;	NONE
;
;--
MTH$GTAND_R7::				
	MOVG	R0, R2			; Save argument
	BICW	#^X8000, R2		; R2/R3 = |argument|
	CMPW	#^X70, R2		; Compare |arg| with 2**-1017
	BLEQ	20$			; No possible underflow, compute GCOSD
	CMPG	G_SMALLEST_DEG, R2	; Possible underflow, use better test
	BLEQ	20$			; No possible underflow, compute GCOSD
	TSTG	R2			; Check for arg = 0
	BNEQ	UNFL			; Branch to underflow logic if not zero
	CLRG	R0			; Load R0/R1 with 0
	RSB				; Return with value equal zero
20$:
	JSB	G^MTH$GSINCOSD_R7		; Compute GSIND(X) and GCOSD(X).
	TSTG	R2			; Is GCOSD(X) zero ?
	BEQL	COSZER			; If yes, error
	DIVG2	R2, R0			; Compute GSIND / GCOSD
	RSB				; Return.


;
;	COMMON ERROR CODE
;

;
; Underflow; if user has FU set, signal error.  Always return 0.0
;
UNFL:
	MOVPSL	R2			; R2 = user's or jacket routine's PSL
	CALLS	#0, G^MTH$$JACKET_TST	; R0 = TRUE if JSB from jacket routine
	BLBC	R0, 10$			; branch if user did JSB
	MOVZWL	SF$W_SAVE_PSW(FP), R2	; get user PSL saved by CALL
10$:	CLRL	R0			; R0 = result. LIB$SIGNAL will save in
					; CHF$L_MCH_R0/R1 so any handler can fixup
	BBC	#6, R2, 20$		; has user enabled floating underflow?
	PUSHL	(SP)			; yes, return PC from special routine
	MOVZBL	#MTH$K_FLOUNDMAT, -(SP)	; trap code for hardware floating underflow
					; convert to MTH$_FLOUNDMAT (32-bit VAX-11 
					; exception code)
	CALLS	#2, G^MTH$$SIGNAL	; signal (condition, PC)
20$:	RSB				; return

;+
; COS was zero, so TAN is infinite, signal an error.
;-
COSZER:
	PUSHL	(SP)			; Push "caller" PC
	MOVZBL	#MTH$K_FLOOVEMAT, -(SP)	; Condition value
	ASHQ	#15, #1, R0		; R0/R1 = reserved operand
	CALLS	#2, G^MTH$$SIGNAL	; Signal an error
	RSB				; Return to caller

	.END
