	.TITLE	FOR$BITOPS	; MIL-STD 1753 bit operations
	.IDENT	/1-002/		; File: FORBITOPS.MAR  Edit: JAW1002

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;
; FACILITY: Fortran Support Library - user callable
;++
;
; ABSTRACT:
;	This module contains routines for operations on individual
;	bits of arguments.
;
;--
;
; VERSION: 1
;
; HISTORY:
;
; AUTHOR:
;	John A. Wheeler, 5-Jun-1981: Version 1
;
; MODIFIED BY:
;
;
;

	.SBTTL	HISTORY			; Detailed Current Edit History


; Edit History for Version 1 of FOR$BITOPS
;
; 1-001	- Original.  JAW 05-Jun-1981
; 1-002 - Interpret count modulo length in FOR$IISHFTC and FOR$JISHFTC.
;	  JAW 08-Jun-1981

	.SBTTL	DECLARATIONS

;
; INCLUDE FILES:
;
;	NONE
;
; EXTERNAL SYMBOLS:
;
;	NONE
;
; MACROS:
;
;	NONE
;
; PSECT DECLARATIONS:
;
	.PSECT	_FOR$CODE	PIC, SHR, LONG, EXE, NOWRT
;
; EQUATED SYMBOLS:
;
;	NONE
;
; OWN STORAGE:
;
;	NONE
;

	.SBTTL	FOR$IMVBITS - Move bit field to bit field (word)

;++
; FUNCTIONAL DESCRIPTION:
;
;	This routine moves a bit field contained in the first argument
;	to a bit field contained in the fourth argument.  FOR$IMVBITS
;	and FOR$JMVBITS implement the Fortran MIL-STD 1753 subroutine
;	MVBITS.
;
; CALLING SEQUENCE:
;
;	CALL FOR$IMVBITS(M1.rw.r, POS1.rw.r, LEN.rw.r, M2.ww.r, POS2.rw.r)
;
; FORMAL PARAMETERS:
;
	m1	= 4			; Address of source word
	pos1	= 8			; Address of bit position in source
	len	= 12			; Address of field length
	m2	= 16			; Address of destination word
	pos2	= 20			; Address of bit position in destination
;
; IMPLICIT INPUTS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION STATUS:
;
;	NONE
;
; SIDE EFFECTS:
;
;	NONE
;
;--

	.ENTRY	FOR$IMVBITS, ^M<R2>	; Entry mask
	MOVZWL	@pos1(AP), R0		; R0 = source bit position
	MOVZWL	@len(AP), R1		; R1 = length
	MOVZWL	@pos2(AP), R2		; R2 = destination bit position
	EXTZV	R0, R1, @m1(AP), R0	; Extract desired bits.
	INSV	R0, R2, R1, @m2(AP)	; Store in destination.
	RET				; Return to caller.

	.SBTTL	FOR$JMVBITS - Move bit field to bit field (longword)

;++
; FUNCTIONAL DESCRIPTION:
;
;	This routine moves a bit field contained in the first argument
;	to a bit field contained in the fourth argument.  FOR$JMVBITS
;	and FOR$IMVBITS implement the Fortran MIL-STD 1753 subroutine
;	MVBITS.
;
; CALLING SEQUENCE:
;
;	CALL FOR$JMVBITS(M1.rl.r, POS1.rl.r, LEN.rl.r, M2.wl.r, POS2.rl.r)
;
; FORMAL PARAMETERS:
;
	m1	= 4			; Address of source longword
	pos1	= 8			; Address of bit position in source
	len	= 12			; Address of field length
	m2	= 16			; Address of destination longword
	pos2	= 20			; Address of bit position in destination
;
; IMPLICIT INPUTS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION STATUS:
;
;	NONE
;
; SIDE EFFECTS:
;
;	NONE
;
;--

	.ENTRY	FOR$JMVBITS, ^M<>	; Entry mask
	MOVL	@len(AP), R0		; R0 = length
	EXTZV	@pos1(AP), R0, @m1(AP), R1 ; Extract desired bits.
	INSV	R1, @pos2(AP), R0, @m2(AP) ; Store in destination.
	RET				; Return to caller.

	.SBTTL	FOR$IIBITS - Extract bit field (word)

;++
; FUNCTIONAL DESCRIPTION:
;
;	This function extracts and returns a bit field contained in the
;	first argument.  FOR$IIBITS and FOR$JIBITS implement the Fortran
;	MIL-STD 1753 function IBITS.
;
; CALLING SEQUENCE:
;
;	result.ww.v = FOR$IIBITS(M.rw.r, POS.rw.r, LEN.rw.r)
;
; FORMAL PARAMETERS:
;
	m	= 4			; Address of source word
	pos	= 8			; Address of bit position in source
	len	= 12			; Address of field length
;
; IMPLICIT INPUTS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; ROUTINE VALUE:
;
;	The specified bit field is returned in R0.
;
; SIDE EFFECTS:
;
;	NONE
;
;--

	.ENTRY	FOR$IIBITS, ^M<>	; Entry mask
	MOVZWL	@pos(AP), R0		; R0 = source bit position
	EXTZV	R0, @len(AP), @m(AP), R0 ; R0 = m<pos, len>
	RET				; Return to caller.

	.SBTTL	FOR$JIBITS - Extract bit field (longword)

;++
; FUNCTIONAL DESCRIPTION:
;
;	This function extracts and returns a bit field contained in the
;	first argument.  FOR$JIBITS and FOR$IIBITS implement the Fortran
;	MIL-STD 1753 function IBITS.
;
; CALLING SEQUENCE:
;
;	result.wl.v = FOR$JIBITS(M.rl.r, POS.rl.r, LEN.rl.r)
;
; FORMAL PARAMETERS:
;
	m	= 4			; Address of source longword
	pos	= 8			; Address of bit position in source
	len	= 12			; Address of field length
;
; IMPLICIT INPUTS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; ROUTINE VALUE:
;
;	The specified bit field is returned in R0.
;
; SIDE EFFECTS:
;
;	NONE
;
;--

	.ENTRY	FOR$JIBITS, ^M<>	; Entry mask
	EXTZV	@pos(AP), @len(AP), @m(AP), R0
					; R0 = m<pos, len>
	RET				; Return to caller.

	.SBTTL	FOR$IISHFTC - Circular shift of low-order bits (word)

;++
; FUNCTIONAL DESCRIPTION:
;
;	This function returns the first argument after shifting the low-
;	order len bits by cnt positions.  FOR$IISHFTC and FOR$JISHFTC
;	implement the Fortran MIL-STD 1753 function ISHFTC.  The count
;	is taken modulo length if |cnt| > len.
;	
;
; CALLING SEQUENCE:
;
;	result.ww.v = FOR$IISHFTC(M.rw.r, CNT.rw.r, LEN.rw.r)
;
; FORMAL PARAMETERS:
;
	m	= 4			; Address of source word
	cnt	= 8			; Address of shift count
	len	= 12			; Address of field length
;
; IMPLICIT INPUTS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; ROUTINE VALUE:
;
;	The first argument with its low-order len bits shifted by cnt
;	positions is returned in R0.
;
; SIDE EFFECTS:
;
;	NONE
;
;--

	.ENTRY	FOR$IISHFTC, ^M<R2, R3, R4> ; Entry mask
	MOVZWL	@m(AP), R0		; R0 = word containing field
	MOVZWL	@len(AP), R1		; R1 = field length
	CVTWL	@cnt(AP), R2		; R2 = shift count
	BRB	COMM1			; Join common code.


	.SBTTL	FOR$JISHFTC - Circular shift of low-order bits (longword)

;++
; FUNCTIONAL DESCRIPTION:
;
;	This function returns the first argument after shifting the low-
;	order len bits by cnt positions.  FOR$JISHFTC and FOR$IISHFTC
;	implement the Fortran MIL-STD 1753 function ISHFTC.  The count
;	is taken modulo length if |cnt| > len.
;
; CALLING SEQUENCE:
;
;	result.wl.v = FOR$JISHFTC(M.rl.r, CNT.rl.r, LEN.rl.r)
;
; FORMAL PARAMETERS:
;
	m	= 4			; Address of source longword
	cnt	= 8			; Address of shift count
	len	= 12			; Address of field length
;
; IMPLICIT INPUTS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; ROUTINE VALUE:
;
;	The first argument with its low-order len bits shifted by cnt
;	positions is returned in R0.
;
; SIDE EFFECTS:
;
;	NONE
;
;--
	.ENTRY	FOR$JISHFTC, ^M<R2, R3, R4> ; Entry mask
	MOVL	@m(AP), R0		; R0 = longword containing field
	MOVL	@len(AP), R1		; R1 = field length
	MOVL	@cnt(AP), R2		; R2 = shift count
;+
; Enter here from FOR$IISHFTC
;-
COMM1:	BGEQ	10$			; If cnt < 0,
	ADDL	R1, R2			;  add len to cnt.
10$:	CMPL	R2, R1			; Is 0 <= cnt <= len?
	BLEQU	30$			; Branch if yes.
;+
; Here if the count is (still) negative, or greater than len.  Reduce it
; to the range [0, len].
;-
	MOVL	R2, R4			; R4 = tmp = cnt
	BGEQ	20$			; If tmp < 0,
	SUBL	R1, R4			;  decrease it by len - 1
	INCL	R4			;  so division rounds downward.
20$:	DIVL	R1, R4			; R4 = tmp/len
	MULL	R1, R4			; R4 = (tmp/len)*len
	SUBL	R4, R2			; R2 = cnt-(tmp/len)*len)
;+
; The reduced count is now in R2.  Do the actual shift by locating the
; boundary between the "high part" and the "low part" of the field, and
; exchanging the two parts.
;-
30$:	SUBL3	R2, R1, R3		; R3 = boundary position
	EXTZV	#0, R3, R0, R1		; Extract low-order part.
	EXTZV	R3, R2, R0, R4		; Extract high-order part.
	INSV	R1, R2, R3, R0		; Make low-order part high.
	INSV	R4, #0, R2, R0		; Make high-order part low.
	RET				; Return to caller.

	.SBTTL	FOR$BITEST - Test single bit (word)

;++
; FUNCTIONAL DESCRIPTION:
;
;	This function returns .TRUE. if the specified bit in the first
;	argument is 1 and .FALSE. if it is 0.  FOR$BITEST and FOR$BJTEST
;	implement the Fortran MIL-STD 1753 function BTEST.
;
; CALLING SEQUENCE:
;
;	result.ww.v = FOR$BITEST(M.rw.r, POS.rw.r)
;
; FORMAL PARAMETERS:
;
	m	= 4			; Address of source word
	pos	= 8			; Address of bit position
;
; IMPLICIT INPUTS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; ROUTINE VALUE:
;
;	.TRUE. or .FALSE.
;
; SIDE EFFECTS:
;
;	NONE
;
;--

	.ENTRY	FOR$BITEST, ^M<>	; Entry mask
	MOVZWL	@pos(AP), R0		; R0 = source bit position
	EXTV	R0, #1, @m(AP), R0	; R0 = SEXT(specified bit)
	RET				; Return to caller.

	.SBTTL	FOR$BJTEST - Test single bit (longword)

;++
; FUNCTIONAL DESCRIPTION:
;
;	This function returns .TRUE. if the specified bit in the first
;	argument is 1 and .FALSE. if it is 0.  FOR$BJTEST and FOR$BITEST
;	implement the Fortran MIL-STD 1753 function BTEST.
;
; CALLING SEQUENCE:
;
;	result.wl.v = FOR$BJTEST(M.rl.r, POS.rl.r)
;
; FORMAL PARAMETERS:
;
	m	= 4			; Address of source longword
	pos	= 8			; Address of bit position
;
; IMPLICIT INPUTS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; ROUTINE VALUE:
;
;	.TRUE. or .FALSE.
;
; SIDE EFFECTS:
;
;	NONE
;
;--

	.ENTRY	FOR$BJTEST, ^M<>	; Entry mask
	EXTV	@pos(AP), #1, @m(AP), R0 ; R0 = SEXT(specified bit)
	RET				; Return to caller.


	.SBTTL	FOR$IIBSET - Set single bit (word)

;++
; FUNCTIONAL DESCRIPTION:
;
;	This function returns the first argument with the specified bit
;	set.  FOR$IIBSET and FOR$JIBSET implement the Fortran MIL-STD
;	1753 function IBSET.
;
; CALLING SEQUENCE:
;
;	result.ww.v = FOR$IIBSET(M.rw.r, POS.rw.r)
;
; FORMAL PARAMETERS:
;
	m	= 4			; Address of source word
	pos	= 8			; Address of bit position
;
; IMPLICIT INPUTS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; ROUTINE VALUE:
;
;	The first argument with the specified bit set is returned in R0.
;
; SIDE EFFECTS:
;
;	NONE
;
;--

	.ENTRY	FOR$IIBSET, ^M<>	; Entry mask
	MOVZWL	@m(AP), R0		; R0 = word containing bit
	MOVZWL	@pos(AP), R1		; R1 = source bit position
	BBSS	R1, R0, 10$		; Set specified bit.
10$:	RET				; Return to caller


	.SBTTL	FOR$JIBSET - Set single bit (longword)

;++
; FUNCTIONAL DESCRIPTION:
;
;	This function returns the first argument with the specified bit
;	set.  FOR$JIBSET and FOR$IIBSET implement the Fortran MIL-STD
;	1753 function IBSET.
;
; CALLING SEQUENCE:
;
;	result.wl.v = FOR$JIBSET(M.rl.r, POS.rl.r)
;
; FORMAL PARAMETERS:
;
	m	= 4			; Address of source longword
	pos	= 8			; Address of bit position
;
; IMPLICIT INPUTS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; ROUTINE VALUE:
;
;	The first argument with the specified bit set is returned in R0.
;
; SIDE EFFECTS:
;
;	NONE
;
;--

	.ENTRY	FOR$JIBSET, ^M<>	; Entry mask
	MOVL	@m(AP), R0		; R0 = longword containing bit
	BBSS	@pos(AP), R0, 10$	; Set specified bit.
10$:	RET				; Return to caller


	.SBTTL	FOR$IIBCLR - Clear single bit (word)

;++
; FUNCTIONAL DESCRIPTION:
;
;	This function returns the first argument with the specified bit
;	cleared.  FOR$IIBCLR and FOR$JIBCLR implement the Fortran
;	MIL-STD 1753 function IBCLR.
;
; CALLING SEQUENCE:
;
;	result.ww.v = FOR$IIBCLR(M.rw.r, POS.rw.r)
;
; FORMAL PARAMETERS:
;
	m	= 4			; Address of source word
	pos	= 8			; Address of bit position
;
; IMPLICIT INPUTS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; ROUTINE VALUE:
;
;	The first argument with the specified bit cleared is returned in
;	R0.
;
; SIDE EFFECTS:
;
;	NONE
;
;--

	.ENTRY	FOR$IIBCLR, ^M<>	; Entry mask
	MOVZWL	@m(AP), R0		; R0 = word containing bit
	MOVZWL	@pos(AP), R1		; R1 = source bit position
	BBCC	R1, R0, 10$		; Clear specified bit.
10$:	RET				; Return to caller


	.SBTTL	FOR$JIBCLR - Clear single bit (longword)

;++
; FUNCTIONAL DESCRIPTION:
;
;	This function returns the first argument with the specified bit
;	cleared.  FOR$JIBCLR and FOR$IIBCLR implement the Fortran
;	MIL-STD 1753 function IBCLR.
;
; CALLING SEQUENCE:
;
;	result.wl.v = FOR$JIBCLR(M.rl.r, POS.rl.r)
;
; FORMAL PARAMETERS:
;
	m	= 4			; Address of source longword
	pos	= 8			; Address of bit position
;
; IMPLICIT INPUTS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; ROUTINE VALUE:
;
;	The first argument with the specified bit cleared is returned in
;	R0.
;
; SIDE EFFECTS:
;
;	NONE
;
;--

	.ENTRY	FOR$JIBCLR, ^M<>	; Entry mask
	MOVL	@m(AP), R0		; R0 = longword containing bit
	BBCC	@pos(AP), R0, 10$	; Clear specified bit.
10$:	RET				; Return to caller

	.END				; End of module FOR$BITOPS
