MODULE BAS$PUT (				! Basic PUT construct
		IDENT = '1-011'			! File: BASPUT.B32 Edit:FM1011
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:
!	Basic support library - user callable
!
! ABSTRACT:
!
!	This module is the UPI level of the Basic PUT construct.  Initially,
!	it contains only the code for sequential I/O.  This module will set
!	up the I/O data base for the LUN and go directly to the REC level.
!
!
! ENVIRONMENT:
!	User access mode - AST reentrant.
!
! AUTHOR: Donald G. Petersen, CREATION DATE: 19-Feb-79
!
! MODIFIED BY:
!
!	DGP, 19-Feb-79 : VERSION 01
! 1-001	- original.  DGP 19-Feb-79
! 1-002 - Add PUT with count.  DGP 02-Mar-79
! 1-003 - Add PUT_RECORD, PUT_REC_CNT.  DGP 02-Mar-79
! 1-004 - More work on relative I/O.  DGP 05-Mar-79
! 1-005 - Put in the junk for foreign buffers.  DGP 28-Mar-79
! 1-006	- Set up ISB$A_USER_FP.  JBS 25-JUL-1979
! 1-007	- Pass count to record level correctly.  JBS 31-JUL-1979
! 1-008 - Signal if file has been used for virtual I/O; set BLK_USE flag.
!	  DGP 16-Oct-79
! 1-009 - Signal ILLIO_CHA if channel passed is less than zero.
! 1-010 - Pass to bas$$cb_push, lub$k_ilun_min+2 so GET #0 BASIC statement
! 	  generate an error.  FM 17-SEP-80
! 1-011 - Lift the 1-010 restriction that was put on at V2.2.  Use foreign
!	  buffer mechanism for channel 0.  FM 9-jul-81.
!--

!<BLF/PAGE>

!
! SWITCHES
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES
!

REQUIRE 'RTLIN:OTSLNK';				! Define all linkages

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    BAS$PUT_REC_CNT : NOVALUE,			! UPI level Relative PUT with count
    BAS$PUT_RECORD : NOVALUE,			! UPI level Relative PUT
    BAS$PUT_COUNT : NOVALUE,			! UPI level Sequential PUT with count
    BAS$PUT : NOVALUE;				! UPI level Sequential PUT

!
! INCLUDE FILES:
!

REQUIRE 'RTLML:OTSISB';				! ISB definitions

REQUIRE 'RTLML:BASPAR';				! Basic specific parameters

REQUIRE 'RTLML:OTSLUB';				! LUB definitions

REQUIRE 'RTLIN:RTLPSECT';			! Define DECLARE_PSECTS macro

LIBRARY 'RTLSTARLE';				! Starlet system macros

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
!
! PSECT DECLARATIONS:
!
DECLARE_PSECTS (BAS);
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    BAS$$STOP_IO : NOVALUE,			! Signal fatal BASIC I/O errors
    BAS$$STOP : NOVALUE,			! Signal errors
    BAS$$REC_PSE : JSB_PUT NOVALUE,		! REC level processing - RMS interface
    						! PUT sequential
    BAS$$REC_PRE : JSB_PUT NOVALUE,		! REC level processing - RMS
    						! interface PUT relative
    BAS$$OPEN_ZERO : NOVALUE,			! Open channel zero
    BAS$$CB_PUSH : JSB_CB_PUSH NOVALUE,		! Load register CCB
    BAS$$CB_POP : JSB_CB_POP NOVALUE;		! Done with register CCB

!+
! The following are the error codes used in this module.
!-

EXTERNAL LITERAL
    BAS$K_ILLILLACC : UNSIGNED (8),		! Illegal or illogical access
    BAS$K_ILLIO_CHA : UNSIGNED (8),		! Illegal I/O channel
    BAS$K_IO_CHANOT : UNSIGNED (8);		! I/O channel not open


GLOBAL ROUTINE BAS$PUT (			! PUT sequential
	UNIT					! logical unit number
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine will set up the I/O data base for this LUN if necessary
!	and then go to the REC level directly.  When control is returned to
!	this routine, it pops the CCB off of the I/O system.  The actual inter-
!	face to RMS is done at the REC level.  One record is written.
!
! FORMAL PARAMETERS:
!
!	UNIT.rlu.v	logical unit number
!
! IMPLICIT INPUTS:
!
!	LUB$V_READ_ONLY			file is read only
!	LUB$V_VA_USE			indicates virtual array usage
!
! IMPLICIT OUTPUTS:
!
!	LUB$V_BLK_USE			indicates non-virtual array usage
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Signals:
!	BAS$K_IO_CHANOT and
!	BAS$K_ILLIO_CHA for foreign buffers
!	BAS$K_ILLILLACC		illegal or illogical access
!
!--

    BEGIN

    BUILTIN
	FP;

    GLOBAL REGISTER
	CCB = K_CCB_REG : REF BLOCK [, BYTE];

    LOCAL
	BUFFER_SIZE,
	FMP : REF BLOCK [, BYTE],
	ACTUAL_UNIT,				! Unit number, without foreign buffer
	TEMP_R11;				! CCB for foreign buffer, or 0

!+
! If channel passed is less than zero then this is an error.
!-

    IF (.UNIT LSS 0) THEN BAS$$STOP (BAS$K_ILLIO_CHA);

    FMP = .FP;
!+
! Check for "foreign buffers".  If the unit number exceeds 255 then a foreign
! buffer is specified.  The foreign buffer is actually a unit number whose
! buffer is to be used to do the PUT.  The "foreign buffer" unit
! is pushed to pick up the CB address which is passed to the REC level.  Then
! the unit pointing to the file is pushed so that the CCB points to the log-
! ical unit which actually do the I/O.  Upon return, the necessary RAB fields
! (USZ and UBF) have been restored and two CB_POPs are done if necessary.
! Explicit use of channel zero e.g. GET #0, PUT #0.... are similar to
! foreign buffer in the sense that we use the buffer of input side of
! channel 0 to do the PUT but output side of channel 0 for other characteristics.
!-
    TEMP_R11 = 0;
    ACTUAL_UNIT = .UNIT;

    IF (.UNIT GTR LUB$K_LUN_MAX OR .UNIT EQL 0)
    THEN
	BEGIN

	LOCAL
	    FOREIGN_BUFFER;

	IF .UNIT EQL 0
	THEN

!+
!This is a explicit channel 0 operation.  Treat input side of channel zero 
!as a foreign buffer.
!-
	    BEGIN
	    FOREIGN_BUFFER = LUB$K_LUN_INPU;
	    ACTUAL_UNIT = LUB$K_LUN_BPRI;
	    END
	ELSE

!+
!This is a regular foreign buffer operation.
!-
	    BEGIN
	    FOREIGN_BUFFER = .UNIT/BAS$K_LUN_MAX;
	    ACTUAL_UNIT = .UNIT MOD BAS$K_LUN_MAX;
	    END;

	IF (.UNIT NEQ 0 AND .FOREIGN_BUFFER GTRU BAS$K_MAX_FOR_B) THEN BAS$$STOP (BAS$K_ILLIO_CHA);

	BAS$$CB_PUSH (.FOREIGN_BUFFER, LUB$K_ILUN_MIN);
	CCB [ISB$A_USER_FP] = .FMP [SF$L_SAVE_FP];
	BUFFER_SIZE = .CCB [LUB$W_RBUF_SIZE];

	IF ( NOT .CCB [LUB$V_OPENED] AND .UNIT NEQ 0) THEN BAS$$STOP_IO (BAS$K_IO_CHANOT);

	TEMP_R11 = .CCB;
	END;

    BAS$$CB_PUSH (.ACTUAL_UNIT, LUB$K_ILUN_MIN);
    CCB [ISB$A_USER_FP] = .FMP [SF$L_SAVE_FP];
!+
! If we are on a default unit (unit number less than zero) then
! we can open it if it is not already open.  Otherwise it must
! be open already.
!-

    IF ( NOT .CCB [LUB$V_OPENED])
    THEN

	IF (.ACTUAL_UNIT LSS 0)
	THEN
	    BEGIN
	    BAS$$OPEN_ZERO (.FMP [SF$L_SAVE_FP])
	    END
	ELSE
	    BEGIN
	    BAS$$STOP_IO (BAS$K_IO_CHANOT);
	    END;

    IF (.TEMP_R11 EQLA 0) THEN BUFFER_SIZE = .CCB [LUB$W_RBUF_SIZE];

!+
! Now that the data base is in place, store the statement type and  go
! directly to the REC level.
!-
    CCB [ISB$B_STTM_TYPE] = ISB$K_ST_TY_PSE;
!+
! Check for virtual array usage and set block usage
!-

    IF .CCB [LUB$V_VA_USE] OR .CCB [LUB$V_READ_ONLY] THEN BAS$$STOP_IO (BAS$K_ILLILLACC);

    CCB [LUB$V_BLK_USE] = 1;
    BAS$$REC_PSE (.BUFFER_SIZE, .TEMP_R11);
!+
! Now that the PUT has been done, pop the CCB off the I/O system.
!-
    BAS$$CB_POP ();
!+
! Pop the "foreign buffer" CB if necessary.  It is kept on the CB stack until
! now to guard against an AST closing the foreign buffer channel.
!-

    IF (.TEMP_R11 NEQA 0)
    THEN
	BEGIN
	CCB = .TEMP_R11;
	BAS$$CB_POP ();
	END;

    END;					!End of BAS$PUT


GLOBAL ROUTINE BAS$PUT_RECORD (			! PUT sequential
	UNIT, 					! logical unit number
	RECORD_NUM				! relative record number
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine will set up the I/O data base for this LUN if necessary
!	and then go to the REC level directly.  When control is returned to
!	this routine, it pops the CCB off of the I/O system.  The actual inter-
!	face to RMS is done at the REC level.  One record is written.
!
! FORMAL PARAMETERS:
!
!	UNIT.rlu.v		logical unit number
!	RECORD_NUM.rl.v		relative record number
!
! IMPLICIT INPUTS:
!
!	LUB$V_VA_USE		indicates virtual array usage
!	LUB$V_READ_ONLY		file is read only
!
! IMPLICIT OUTPUTS:
!
!	LUB$V_BLK_USE		indicates non-virtual I/O usage
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Signals:
!	BAS$K_ILLIO_CHA and
!	BAS$K_IO_CHANOT for foreign buffers
!	BAS$K_ILLILLACC
!
!--

    BEGIN

    BUILTIN
	FP;

    GLOBAL REGISTER
	CCB = K_CCB_REG : REF BLOCK [, BYTE];

    LOCAL
	BUFFER_SIZE,
	FMP : REF BLOCK [, BYTE],
	ACTUAL_UNIT,				! Unit number, without foreign buffer
	TEMP_R11;				! CCB for foreign buffer, or 0

    FMP = .FP;
!+
! Check for "foreign buffers".  If the unit number exceeds 255 then a foreign
! buffer is specified.  The foreign buffer is actually a unit number whose
! buffer is to receive the record which is read.  The "foreign buffer" unit
! is pushed to pick up the CB address which is passed to the REC level.  Then
! the unit pointing to the file is pushed so that the CCB points to the log-
! ical unit which actually do the I/O.  Upon return, the necessary RAB fields
! (USZ and UBF) have been restored and two CB_POPs are done if necessary.
!-
    TEMP_R11 = 0;
    ACTUAL_UNIT = .UNIT;

    IF (.UNIT GTR LUB$K_LUN_MAX)
    THEN
	BEGIN

	LOCAL
	    FOREIGN_BUFFER;

	FOREIGN_BUFFER = .UNIT/BAS$K_LUN_MAX;
	ACTUAL_UNIT = .UNIT MOD BAS$K_LUN_MAX;

	IF (.FOREIGN_BUFFER GTRU BAS$K_MAX_FOR_B) THEN BAS$$STOP (BAS$K_ILLIO_CHA);

	BAS$$CB_PUSH (.FOREIGN_BUFFER, LUB$K_LUN_MIN);
	CCB [ISB$A_USER_FP] = .FMP [SF$L_SAVE_FP];

	IF ( NOT .CCB [LUB$V_OPENED]) THEN BAS$$STOP_IO (BAS$K_IO_CHANOT);

	BUFFER_SIZE = .CCB [LUB$W_RBUF_SIZE];
	TEMP_R11 = .CCB;
	END;

    BAS$$CB_PUSH (.ACTUAL_UNIT, LUB$K_ILUN_MIN);
    CCB [ISB$A_USER_FP] = .FMP [SF$L_SAVE_FP];

    IF ( NOT .CCB [LUB$V_OPENED]) THEN BAS$$STOP_IO (BAS$K_IO_CHANOT);

    IF (.TEMP_R11 EQLA 0) THEN BUFFER_SIZE = .CCB [LUB$W_RBUF_SIZE];

!+
! Now that the data base is in place, store the statement type, store the key, and  go
! directly to the REC level.
!-
    CCB [LUB$L_LOG_RECNO] = .RECORD_NUM;
    CCB [ISB$B_STTM_TYPE] = ISB$K_ST_TY_PRE;
!+
! Check for virtual array usage and set block usage
!-

    IF .CCB [LUB$V_VA_USE] OR .CCB [LUB$V_READ_ONLY] THEN BAS$$STOP_IO (BAS$K_ILLILLACC);

    CCB [LUB$V_BLK_USE] = 1;
    BAS$$REC_PRE (.BUFFER_SIZE, .TEMP_R11);
!+
! Now that the PUT has been done, pop the CCB off the I/O system.
!-
    BAS$$CB_POP ();
!+
! Pop the "foreign buffer" CB if necessary.  It is kept on the CB stack until
! now to guard against an AST closing the foreign buffer channel.
!-

    IF (.TEMP_R11 NEQA 0)
    THEN
	BEGIN
	CCB = .TEMP_R11;
	BAS$$CB_POP ();
	END;

    END;					!End of BAS$PUT


GLOBAL ROUTINE BAS$PUT_COUNT (			! PUT sequential with count
	UNIT, 					! logical unit number
	COUNT					! No. of bytes in record
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine will set up the I/O data base for this LUN if necessary
!	and then go to the REC level directly.  When control is returned to
!	this routine, it pops the CCB off of the I/O system.  The actual inter-
!	face to RMS is done at the REC level.  One record is written.
!
! FORMAL PARAMETERS:
!
!	UNIT.rlu.v	logical unit number
!	COUNT.rl.v	no.of bytes in record
!
! IMPLICIT INPUTS:
!
!	LUB$V_READ_ONLY		file is read only
!	LUB$V_VA_USE		virtual array I/O usage
!
! IMPLICIT OUTPUTS:
!
!	LUB$V_BLK_USE		non-virtual array I/O usage
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Signals:
!	BAS$K_IO_CHANOT and
!	BAS$K_ILLIO_CHA for foreign buffers
!	BAS$K_ILLILLACC
!
!--

    BEGIN

    BUILTIN
	FP;

    GLOBAL REGISTER
	CCB = K_CCB_REG : REF BLOCK [, BYTE];

    LOCAL
	FMP : REF BLOCK [, BYTE],
	ACTUAL_UNIT,				! Unit number, without foreign buffer
	TEMP_R11;				! CCB for foreign buffer, or 0

    FMP = .FP;
!+
! Check for "foreign buffers".  If the unit number exceeds 255 then a foreign
! buffer is specified.  The foreign buffer is actually a unit number whose
! buffer is used for the PUT operation.  The "foreign buffer" unit
! is pushed to pick up the CB address which is passed to the REC level.  Then
! the unit pointing to the file is pushed so that the CCB points to the log-
! ical unit which actually do the I/O.  Upon return, the necessary RAB fields
! (USZ and UBF) have been restored and two CB_POPs are done if necessary.
! Explicit channel zero operation is similar to foreign buffers in the sense
! that it uses input side of channel zero for buffer but output side of channel
! zero for everything else.
!-
    TEMP_R11 = 0;
    ACTUAL_UNIT = .UNIT;

    IF (.UNIT GTR LUB$K_LUN_MAX OR .UNIT EQL 0)
    THEN
	BEGIN

	LOCAL
	    FOREIGN_BUFFER;

	IF .UNIT EQL 0
	THEN

!+
!This is a explicit channel 0 operation.  Treat input side of channel zero 
!as a foreign buffer.
!-
	    BEGIN
	    FOREIGN_BUFFER = LUB$K_LUN_INPU;
	    ACTUAL_UNIT = LUB$K_LUN_BPRI;
	    END
	ELSE

!+
!This is a regular foreign buffer operation.
!-
	    BEGIN
	    FOREIGN_BUFFER = .UNIT/BAS$K_LUN_MAX;
	    ACTUAL_UNIT = .UNIT MOD BAS$K_LUN_MAX;
	    END;

	IF (.UNIT NEQ 0 AND .FOREIGN_BUFFER GTRU BAS$K_MAX_FOR_B) THEN BAS$$STOP (BAS$K_ILLIO_CHA);

	BAS$$CB_PUSH (.FOREIGN_BUFFER, LUB$K_ILUN_MIN);
	CCB [ISB$A_USER_FP] = .FMP [SF$L_SAVE_FP];

	IF ( NOT .CCB [LUB$V_OPENED] AND .UNIT NEQ 0) THEN BAS$$STOP_IO (BAS$K_IO_CHANOT);

	TEMP_R11 = .CCB;
	END;

    BAS$$CB_PUSH (.ACTUAL_UNIT, LUB$K_ILUN_MIN);
    CCB [ISB$A_USER_FP] = .FMP [SF$L_SAVE_FP];
!+
! If we are on a default unit (unit number less than zero) then
! we can open it if it is not already open.  Otherwise it must
! be open already.
!-

    IF ( NOT .CCB [LUB$V_OPENED])
    THEN

	IF (.ACTUAL_UNIT LSS 0)
	THEN
	    BEGIN
	    BAS$$OPEN_ZERO (.FMP [SF$L_SAVE_FP])
	    END
	ELSE
	    BEGIN
	    BAS$$STOP_IO (BAS$K_IO_CHANOT);
	    END;

!+
! Now that the data base is in place, store the statement type and  go
! directly to the REC level.
!-
    CCB [ISB$B_STTM_TYPE] = ISB$K_ST_TY_PSE;
!+
! Check for virtual array usage and set block usage
!-

    IF .CCB [LUB$V_VA_USE] OR .CCB [LUB$V_READ_ONLY] THEN BAS$$STOP_IO (BAS$K_ILLILLACC);

    CCB [LUB$V_BLK_USE] = 1;
    BAS$$REC_PSE (.COUNT, .TEMP_R11);
!+
! Now that the PUT has been done, pop the CCB off the I/O system.
!-
    BAS$$CB_POP ();
!+
! Pop the "foreign buffer" CB if necessary.  It is kept on the CB stack until
! now to guard against an AST closing the foreign buffer channel.
!-

    IF (.TEMP_R11 NEQA 0)
    THEN
	BEGIN
	CCB = .TEMP_R11;
	BAS$$CB_POP ();
	END;

    END;					!End of BAS$PUT_COUNT


GLOBAL ROUTINE BAS$PUT_REC_CNT (		! PUT relative with count
	UNIT, 					! logical unit number
	RECORD_NUM, 				! relative record number
	COUNT					! No. of bytes in record
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine will set up the I/O data base for this LUN if necessary
!	and then go to the REC level directly.  When control is returned to
!	this routine, it pops the CCB off of the I/O system.  The actual inter-
!	face to RMS is done at the REC level.  One record is written.
!
! FORMAL PARAMETERS:
!
!	UNIT.rlu.v		logical unit number
!	RECORD_NUM.rl.v		relative record number
!	COUNT.rl.v		no.of bytes in record
!
! IMPLICIT INPUTS:
!
!	LUB$V_READ_ONLY		file is read only
!	LUB$V_VA_USE		virtual array usage
!
! IMPLICIT OUTPUTS:
!
!	LUB$V_BLK_USE		non-virtual array use
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Signals:
!	BAS$K_ILLIO_CHA and
!	BAS$K_IO_CHANOT for foreign buffers
!	BAS$K_ILLILLACC
!
!--

    BEGIN

    BUILTIN
	FP;

    GLOBAL REGISTER
	CCB = K_CCB_REG : REF BLOCK [, BYTE];

    LOCAL
	FMP : REF BLOCK [, BYTE],
	ACTUAL_UNIT,				! Unit number, without foreign buffer
	TEMP_R11;				! CCB for foreign buffer, or 0

    FMP = .FP;
!+
! Check for "foreign buffers".  If the unit number exceeds 255 then a foreign
! buffer is specified.  The foreign buffer is actually a unit number whose
! buffer is to receive the record which is read.  The "foreign buffer" unit
! is pushed to pick up the CB address which is passed to the REC level.  Then
! the unit pointing to the file is pushed so that the CCB points to the log-
! ical unit which actually do the I/O.  Upon return, the necessary RAB fields
! (USZ and UBF) have been restored and two CB_POPs are done if necessary.
!-
    TEMP_R11 = 0;
    ACTUAL_UNIT = .UNIT;

    IF (.UNIT GTR LUB$K_LUN_MAX)
    THEN
	BEGIN

	LOCAL
	    FOREIGN_BUFFER;

	FOREIGN_BUFFER = .UNIT/BAS$K_LUN_MAX;
	ACTUAL_UNIT = .UNIT MOD BAS$K_LUN_MAX;

	IF (.FOREIGN_BUFFER GTRU BAS$K_MAX_FOR_B) THEN BAS$$STOP (BAS$K_ILLIO_CHA);

	BAS$$CB_PUSH (.FOREIGN_BUFFER, LUB$K_LUN_MIN);
	CCB [ISB$A_USER_FP] = .FMP [SF$L_SAVE_FP];

	IF ( NOT .CCB [LUB$V_OPENED]) THEN BAS$$STOP_IO (BAS$K_IO_CHANOT);

	TEMP_R11 = .CCB;
	END;

    BAS$$CB_PUSH (.ACTUAL_UNIT, LUB$K_ILUN_MIN);
    CCB [ISB$A_USER_FP] = .FMP [SF$L_SAVE_FP];

    IF ( NOT .CCB [LUB$V_OPENED]) THEN BAS$$STOP_IO (BAS$K_IO_CHANOT);

!+
! Now that the data base is in place, store the statement type, store the index, and  go
! directly to the REC level.
!-
    CCB [LUB$L_LOG_RECNO] = .RECORD_NUM;
    CCB [ISB$B_STTM_TYPE] = ISB$K_ST_TY_PRE;
!+
! Check for virtual array usage and set block usage
!-

    IF .CCB [LUB$V_VA_USE] OR .CCB [LUB$V_READ_ONLY] THEN BAS$$STOP_IO (BAS$K_ILLILLACC);

    CCB [LUB$V_BLK_USE] = 1;
    BAS$$REC_PRE (.COUNT, .TEMP_R11);
!+
! Now that the PUT has been done, pop the CCB off the I/O system.
!-
    BAS$$CB_POP ();
!+
! Pop the "foreign buffer" CB if necessary.  It is kept on the CB stack until
! now to guard against an AST closing the foreign buffer channel.
!-

    IF (.TEMP_R11 NEQA 0)
    THEN
	BEGIN
	CCB = .TEMP_R11;
	BAS$$CB_POP ();
	END;

    END;					!End of BAS$PUT_REC_CNT

END						!End of module - BAS$PUT

ELUDOM
