MODULE BAS$$OPEN_ZERO (				!
		IDENT = '1-002'			! File: BASOPENZE.B32
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  BASIC-PLUS-2 Miscellaneous I/O
!
! ABSTRACT:
!
!	This module contains an internal subroutine used by several
!	of the BASIC functions which can operate on the terminal.
!	The BASIC language definition assumes that the terminal is
!	"always open", but on VAX we do not open it until we need to.
!	To make this as easy as possible, this module OPENs channel
!	zero whenever anyone needs it.
!
! ENVIRONMENT:  VAX-11 User Mode
!
! AUTHOR: John Sauter, CREATION DATE: 17-APR-1979
!
! MODIFIED BY:
!
! 1-001	- Original.
! 1-002	- Set ISB$A_USER_FP.  JBS 25-JUL-1979
!--

!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!

REQUIRE 'RTLIN:OTSLNK';				! Define linkages

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    BAS$$OPEN_ZERO : NOVALUE;			! Open channel zero

!
! INCLUDE FILES:
!

REQUIRE 'RTLML:OTSLUB';				! Get LUB definitions

REQUIRE 'RTLML:OTSISB';				! Get ISB definitions

REQUIRE 'RTLIN:RTLPSECT';			! Macros for defining psects

LIBRARY 'RTLSTARLE';				! System symbols

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! PSECTS:
!
DECLARE_PSECTS (BAS);				! Declare psects for BAS$ facility
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    BAS$$CB_PUSH : JSB_CB_PUSH NOVALUE,		! Load register CCB
    BAS$$CB_POP : JSB_CB_POP NOVALUE,		! Done with register CCB
    BAS$$OPEN_DEFLT : CALL_CCB NOVALUE;		! Open one side of chan. 0


GLOBAL ROUTINE BAS$$OPEN_ZERO (			! Open channel zero
	FMP					! User's frame pointer
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Opens BASIC "channel 0", which is implemented as two LUNs,
!	linked together.
!
! FORMAL PARAMETERS:
!
!	FMP.ra.v	Address of the user's frame.
!
! IMPLICIT INPUTS:
!
!	The LUNs for BASIC "channel 0"
!
! IMPLICIT OUTPUTS:
!
!	The LUNs for BASIC "channel 0"
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Disables ASTs during most of its execution.
!	OPENs two LUNs.  Any errors encountered are signaled.
!
!--

    BEGIN

    GLOBAL REGISTER
	CCB = K_CCB_REG : REF BLOCK [, BYTE];

    MAP
	FMP : REF BLOCK [, BYTE];

    LOCAL
	AST_STATUS,
	INPUT_CCB : REF BLOCK [, BYTE],
	OUTPUT_CCB : REF BLOCK [, BYTE];

!+
! We are called only if one of the LUNs on channel 0 is not
! open, but we don't want to depend on which, so we will call
! BAS$$CB_PUSH for each LUN, thereby using recursive I/O.
! First get the CCB for the input side of channel 0.
!-
    BAS$$CB_PUSH (LUB$K_LUN_INPU, LUB$K_ILUN_MIN);
    CCB [ISB$A_USER_FP] = .FMP [SF$L_SAVE_FP];
    INPUT_CCB = .CCB;
!+
! Now get the CCB for the output side of channel 0.
!-
    BAS$$CB_PUSH (LUB$K_LUN_BPRI, LUB$K_ILUN_MIN);
    CCB [ISB$A_USER_FP] = .FMP [SF$L_SAVE_FP];
    OUTPUT_CCB = .CCB;
!+
! OPEN the two LUNs.  Since only this routine opens channel 0,
! and since it is not closed until image exit, both LUNs should
! be closed.  If an AST causes us to re-enter this code we can
! get into serious trouble with RMS, so we must (regretfully)
! disable ASTs during the two OPENs.
!-
    AST_STATUS = $SETAST (ENBFLG = 0);

    IF ( NOT .INPUT_CCB [LUB$V_OPENED])
    THEN
	BEGIN
	CCB = .INPUT_CCB;
	BAS$$OPEN_DEFLT ();
	CCB = .OUTPUT_CCB;
	BAS$$OPEN_DEFLT ();
!+
! Now link together the two LUNs so they can share information
! easily.
!-
	INPUT_CCB [LUB$A_BUDDY_PTR] = .OUTPUT_CCB;
	OUTPUT_CCB [LUB$A_BUDDY_PTR] = .INPUT_CCB;
	END;

!+
! Now that the LUNs are set up, we can re-enable ASTs.
!-

    IF (.AST_STATUS EQL SS$_WASSET) THEN $SETAST (ENBFLG = 1);

!+
! Release the two CCBs, in the proper order.
!-
    CCB = .OUTPUT_CCB;
    BAS$$CB_POP ();
    CCB = .INPUT_CCB;
    BAS$$CB_POP ();
!+
! Our caller, who is holding the address of one of those CCBs,
! should now find that it is open.
!-
    END;					! of routine BAS$$OPEN_ZERO

END						! of module BAS$$OPEN_ZERO

ELUDOM
