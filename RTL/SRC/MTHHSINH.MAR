	.TITLE	MTH$HSINH 	; H floating Hyperbolic Sine routine
				; (HSINH)
	.IDENT /1-006/		; File: MTHHSINH.MAR	EDIT: RNH1006
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;
; FACILITY: MATH LIBRARY
;++
; ABSTRACT:
;
; MTH$HSINH is a function which returns the H floating hyperbolic sine
; of its H floating point argument. The call is standard
; call-by-reference.
;
;--
;
; VERSION: 1
;
; HISTORY:
; AUTHOR:
;	John A. Wheeler, 11-Sep-1979: Version 1
;
; MODIFIED BY:
;
;
;

	.SBTTL	HISTORY	; Detailed Current Edit History


; ALGORITHMIC DIFFERENCES FROM FP-11/C ROUTINE:	none
;
; Edit History for Version 1 of MTH$HSINH 
;
; 1-001 - Adapted from MTH$GSINH version 1-001.  JAW 11-Sep-1979.
; 1-002 - Use MTH$HEXP_R6.  SBL 3-Oct-1979
; 1-003 - Make H_0.25 a literal.  SBL 8-Oct-1979
; 1-004 - Don't store reserved operand before signal.  SBL 7-Feb-1980
; 1-005 - Changed lower limit for Chebyshev approximation from 2**-56 to
;	  2**-57.
;	- Eliminated second call to EXP for input values between 57*ln2
;	  and 16383*ln2.
;	- Changed all final floating point divisions by 2 to interger 
;	  subrtracts of 1 from the exponent field.
;	- Extended maximum range to 16384*ln2.
;	- Chaneged logic for computing EXP(|x|-ln2) to reduce error.
;	- RNH 10-FEB-81
; 1-006 - Changed @hsinh to @hsinh(AP) in error logic RNH 22-Sept-81

	.SBTTL	DECLARATIONS	; Declarative Part of Module

;
; INCLUDE FILES:
;
; EXTERNAL SYMBOLS:
	.DSABL	GBL
	.EXTRN	MTH$$SIGNAL
	.EXTRN	MTH$K_FLOOVEMAT
	.EXTRN	MTH$HEXP_R6
;
; EQUATED SYMBOLS:


;
; MACROS:	none
;


;
; PSECT DECLARATIONS:

	.PSECT	_MTH$CODE	PIC,SHR,LONG,EXE,NOWRT
					; program section for math routines
;
; OWN STORAGE:	none
;
;
; CONSTANTS:
;

H_57_LOG_2:
	.QUAD	^X6DB93AB13C134006
	.QUAD	^XC70997E6FF9D90B9	; 57*ln2
H_16383_LOG_2:
	.QUAD	^XE3E0A45E62DE400E
	.QUAD	^X6B251812C66964DB	; 16383*ln2
H_16384_LOG_2:
	.QUAD	^XA39E2FEF62E4400E
	.QUAD	^X07E6673093C7F357	; 16384*ln2
H_LOG_2_HI:
	.QUAD	^XA39E2FEF62E44000
	.QUAD	^X4000673093C7F357	; (high 99 bits of ln2)+2**-99
H_LOG_2_LO:
	.QUAD	^XF0CB950BC0D0BF9D
	.QUAD	^X5F359D27D674CD98	; ln2 - H_LOG_2_HI

HSINHTAB:
 	.LONG	^X42343FAD,^XC377E97C	;  6.506912239471978471647518358407046E -26
 	.LONG	^X6AD9DE9B,^XD9E845CE
 	.LONG	^X76163FB6,^X5242FAE8	;  3.867997522833381902976185781667616E -23
 	.LONG	^XF929D90B,^XBF470195
 	.LONG	^X71B83FBF,^X5CAAF302	;  1.957294395551957859061134358006348E -20
 	.LONG	^XF2CF3417,^X90698008
 	.LONG	^X2F493FC8,^X2521B466	;  8.220635243500749521323757431341128E -18
 	.LONG	^X67B8FB06,^X56487466
 	.LONG	^X952C3FD0,^X0C3D7703	;  2.811457254347797192926287843860811E -15
 	.LONG	^X385C5DA8,^X9ED3038D
 	.LONG	^XAE7F3FD8,^X3B813E73	;  7.647163731819805091328739180656633E -13
 	.LONG	^X36713CB8,^XA43FC7A1
 	.LONG	^X61243FE0,^X86D0613A	;  1.605904383682161463834581885720363E -10
 	.LONG	^XF1979807,^X6618C597
 	.LONG	^XAE643FE7,^X544E567F	;  2.505210838544171877496282899225692E  -8
 	.LONG	^X583338FE,^X05071710
 	.LONG	^X71DE3FEE,^X6C733A55	;  2.755731922398589065255745053025947E  -6
 	.LONG	^XAC2438FA,^XEBFCDB75
 	.LONG	^XA01A3FF4,^X1A0101A0	;  1.984126984126984126984126972636750E  -4
 	.LONG	^X01A0A01A,^XDDDB1717
 	.LONG	^X11113FFA,^X11111111	;  8.333333333333333333333333333385565E  -3
 	.LONG	^X11111111,^X98AB1111
 	.LONG	^X55553FFE,^X55555555	;  1.666666666666666666666666666666657E  -1
 	.LONG	^X55555555,^X552F5555
 	.LONG	^X00000000,^X00000000	;  0.000000000000000000000000000000000E   0
 	.LONG	^X00000000,^X00000000
  
HSINHLEN	= .- HSINHTAB/16


	.SBTTL	MTH$HSINH  - Standard H floating SINH


;++
; FUNCTIONAL DESCRIPTION:
;
; HSINH  - H floating point function
;
; HSINH(X) is computed as:
;
;	If |X| < 2**-57, HSINH(X) = X.
;	IF 2**-57 =< |X| < 0.25, HSINH(X) = Chebyshev Series.
;	If 0.25 =< |X| < 57*ln2, HSINH(X) = (HEXP(X) - HEXP(-X))/2.
;	If 57*ln2 =< |X| < 16383*ln2, HSINH(X) = sign(X)*HEXP(|X|)/2.
;	If 16383*ln2 =< |X| < 16384*ln2, then HSINH(X) = sign(X)*HEXP(|X|-ln2).
;	If 16384*ln2 =< |X|, then overflow.
;
; CALLING SEQUENCE:
;
;	hsinh.wh.v = MTH$HSINH(x.rh.r)
;
;		-or-
;
;	CALL MTH$HSINH(hsinh.wh.r, x.rh.r)
;
;	Because an H-floating result cannot be expressed in 64 bits, it is
;	returned as the first argument, with the input parameter displaced
;	to the second argument, in accordance with the Procedure Calling
;	Standard.
;
;
; INPUT PARAMETERS:

	LONG = 4			; define longword multiplier
	x = 2 * LONG			; Contents of x is the argument

; IMPLICIT INPUTS:	none
;
; OUTPUT PARAMETERS:
;
	hsinh = 1 * LONG
;
; IMPLICIT OUTPUTS:	none
;
; COMPLETION CODES:	none
;
; SIDE EFFECTS:
;
; Signal: MTH$_FLOOVEMAT if 16384*ln2 < |X| with reserved operand in R0/R3
; (copied to the signal mechanism vector CHF$L_MCH_R0/R1 by LIB$SIGNAL).
; Associated message is: "FLOATING OVERFLOW IN MATH LIBRARY". Result is reserved
; operand -0.0 unless a user supplied (or any) error handler changes CHF$L_MCH_R0/R1.
;
; NOTE: This procedure disables floating point underflow, enables integer
; overflow.
;
;---


	.ENTRY	MTH$HSINH, ^M<IV, R2, R3, R4, R5, R6, R7, R8, R9, R10>
					; standard call-by-reference entry
					; disable DV (and FU), enable IV
	MTH$FLAG_JACKET			; flag that this is a jacket procedure in
					; case of an error in routine
	MOVAB	G^MTH$$JACKET_HND, (FP) ; Set handler address to jacket handler
					; If an error, convert signal to user PC
					; and resignal
	MOVH	@x(AP), R0		; R0/R3 = |X| = @value(AP)
	MOVO	R0, R7
	BICW2	#^X8000, R0		; R0/R3 = |X|
	CMPW	R0, #^X3FFF		; compare |X| with 0.25
	BGEQ	GEQ_TO_0.25		; branch if |X| >= 0.25

;
; |X| < 0.25
;

	CMPW	R0, #^X3FC8		; compare |X| with 2**-57
	BGEQ	GEQ_TO_2M57		; branch if |X| >= 2**-57

;
; |X| < 2**-57
;

	MOVO	R7, @hsinh(AP)		; Result = argument
	RET				; return 

;
; 2**-57 =< |X| < 0.25
;

GEQ_TO_2M57:
	MULH2	R0,R0			; Get ARG**2 for POLYG
	POLYH	R0, #HSINHLEN-1, HSINHTAB
					; R0/R3 = SUM(Ci*X**i), with
					; last coefficient zero
	MULH2	R7, R0			; MULH2 by ARG, and then
	ADDH3	R7, R0, @hsinh(AP)	; add in ARG with overhang and return
	RET				; with result in first argument

;
; 0.25 =< |X|
;

GEQ_TO_0.25:
	CMPH	R0, H_16383_LOG_2		; compare |X| with 16383*ln2
	BGTR	GTR_THAN_16383_LOG_2		; branch if |X| > 16383*ln2

;
; 0.25 =< |X| =< 16383*ln2
;

	CMPH	R0, H_57_LOG_2		; Compare |X| to 57*ln2.  If greater
	BGTR	ONLY_ONE_TERM		; only one call to HEXP is necessary.
;
; 0.25 =< |X| < 57*ln2
;

	MNEGH	R7, R0			; R0/R3 = -X
	JSB	MTH$HEXP_R6		; R0/R3 = HEXP(-X)
	MOVO	R0, -(SP)		; push HEXP(-X) on stack
	MOVO	R7, R0			; R0/R3 = X
	JSB	MTH$HEXP_R6		; R0/R3 = HEXP(X)
	SUBH2	(SP)+, R0 		; R0/R3 = HEXP(X) - HEXP(-X)
	SUBW2	#^X0001, R0 		; R0/R3 = (HEXP(X)-HEXP(-X))/2
        MOVO	R0, @hsinh(AP)		; Return SINH(x) in fisrt argument
	RET				; 
;
; 57*ln2 =< |X| < 16383*ln2
;

ONLY_ONE_TERM:
	JSB	MTH$HEXP_R6		; R0/R3 = HEXP(|X|)
	TSTG	R7			; Check sign of X
	BGTR	POSITIVE		; If negative change sign of
	MNEGG	R0, R0			; HEXP(|X|)
POSITIVE:
	SUBW2	#^X0001, R0		; R0/R3 = sign(X)*HEXP(|X|)/2
        MOVO	R0, @hsinh(AP)		; Return SINH(x) in fisrt argument
	RET				; 
;
; 16383*ln2 =< |X|
;

GTR_THAN_16383_LOG_2:
	CMPH	R0, H_16384_LOG_2	; Compare |X| to 16384*ln2
	BGEQ	ERROR			; if 16384*ln2 =<|X|, overflow occurs


;
; 16383*ln2 < |X| < 16384*ln2
;

	SUBH2	H_LOG_2_HI, R0		; R0/R3=|X|-H_LOG_2_HI
	JSB	MTH$HEXP_R6		; R0/R3 = HEXP(|X|-H_LOG_2_HI)
	TSTH	R7			; test the sign of X
	BGEQ	10$			; branch if X >= 0
	MNEGH	R0, R0			; R0/R3=sign(X)*HEXP(|X|-H_LOG_2_HI)
10$:	MULH3	H_LOG_2_LO, R0, R4	; R4/R3=HEXP(|X|-H_LOG_2_HI)*H_LOG_2_LO
	SUBH3	R4, R0, @hsinh(AP)	; Return HEXP(|X|-ln2) in first
	RET				; argument



;
; 16384*ln2 =< |X|, error
;

ERROR:	MOVZBL	#MTH$K_FLOOVEMAT, -(SP)	; condition value
	ASHQ	#15, #1, R0		; R0/R3 = result = reserved operand -0.0
					; so error handler can modify the result
	CLRQ	R2			; ...
	CALLS	#1, MTH$$SIGNAL 	; signal error and use real user's PC
	MOVO	R0, @hsinh(AP)		; Restore result
	RET				; return 



	.END
