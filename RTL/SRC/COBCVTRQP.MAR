	.TITLE	COB$CVTRQP_R9	COBOL Convert Rounded Quad to Packed
	.IDENT	/1-007/		; File: COBCVTRQP.MAR

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
; FACILITY: COBOL TYPE CONVERSION
;++
; ABSTRACT:
;	This module contains the routine which converts signed quadwords
;	to packed with rounding.
;
;
;--
;
; VERSION: 1
;
; HISTORY:
;
; AUTHOR:
;	John Sauter, 29-DEC-78
;
; MODIFIED BY:
;
;
;

	.SBTTL	HISTORY		; Detailed Current Edit History


; Edit History for Version 1 of COBCVTRQP
;
; 1-001	- Original from Marty Jack.
; 1-002	- Use byte displacement lengths.  JBS 29-DEC-78
; 1-003	- Make entry point symbol global.  JBS 03-JAN-1979
; 1-004	- Minor editing cleanup.  JBS 11-JAN-1979
; 1-005 - Bug fixes and cleanup.  MLJ 10-Mar-1979
; 1-006 - 19 digit temps.  MLJ 13-Mar-1979
; 1-007 - Cosmetic changes.  RKR 18-OCT-79

	.SBTTL	DECLARATIONS

;
; INCLUDE FILES:
;

;
; EXTERNAL SYMBOLS:
;	NONE
;

;
; MACROS:
;	NONE
;

;
; PSECT DECLARATIONS:
	.PSECT	_COB$CODE	PIC, SHR, LONG, EXE, NOWRT

;
; EQUATED SYMBOLS:
;	NONE
;

;
; OWN STORAGE:
;
;+
; The following constant has the value 2**32.  It is used for scaling
; the high 32 bits and for compensating for unsigned arithmetic.
;-
BIAS:	.PACKED	4294967296	; 2**32
BIAS_DIGITS=10
;

	.SBTTL	COB$CVTRQP_R9

;++
; FUNCTIONAL DESCRIPTION:
;
;	Converts a 64-bit (quadword) integer to packed with rounding.
;
; CALLING SEQUENCE:
;
;	JSB COB$CVTRQP_R9 (scale.rl.v, src.rq.r, dstlen.rl.v, dst.wp.r)
;
;	Arguments are passed in R6, R7, R8 and R9.
;
; INPUT PARAMETERS:
;	
;	SCALE.rl.v		The power of ten by which the internal
;				representation of the source must be
;				multiplied to scale the same as the 
;				internal representation of the dest.
;	SRC.rq.r		The number to be converted
;	DSTLEN.rl.v		The number of digits in the destination
;
; IMPLICIT INPUTS:
;
;	All of the trap bits in the PSL are assumed off.
;
; OUTPUT PARAMETERS:
;
;	DST.wp.r		The place to store the converted number
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	NONE
;
; SIDE EFFECTS:
;
;	Destroys registers R0 through R9.
;	
;--

COB$CVTRQP_R9::
	SUBL2	#20,SP			; Allocate temp space
	CMPV	#31,#1,(R7),4(R7)	; Is number in longword range?
	BNEQ	11$			; Br if not to do slower code
	CVTLP	(R7),#10,(SP)		; Convert low order longword
	ASHP	R6,#10,(SP),#5,R8,(R9)	; Scale to destination
					;     (also clears R0)
	BVS	10$			; Br if overflowed
	INCL	R0			; Indicate success, R0 = 1
10$:	ADDL2	#20,SP			; Deallocate temp space
	RSB				; Return
;+
; Come here if the input number is not in longword range.  Sum the
; converted high order longword, multiplied by 2**32, and the converted
; low order longword, considered as an unsigned number.
;-
11$:	CVTLP	4(R7),#10,(SP)		; Convert high order longword
	MULP	#BIAS_DIGITS,BIAS,#10,(SP),#19,8(SP)
					; Multiply by 2**32
	CVTLP	(R7),#10,(SP)		; Convert low order longword
	BGEQ	12$			; Br if nonnegative
	ADDP4	#BIAS_DIGITS,BIAS,#10,(SP)
					; Correct for signed conversion
12$:	ADDP4	#10,(SP),#19,8(SP)	; Sum low and high order parts
	ASHP	R6,#19,(R3),#5,R8,(R9)	; Scale to destination
					;     (also clears R0)
	BVS	13$			; Br if overflowed
	INCL	R0			; Indicate success, R0 = 1
13$:	ADDL2	#20,SP			; Deallocate temp space
	RSB				; Return
;
	.END
