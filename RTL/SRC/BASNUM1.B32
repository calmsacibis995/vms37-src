MODULE BAS$NUM1 (			! Routines to do BASIC NUM1$ function
		IDENT = '1-006'		! module BASNUM1.B32
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY: BASIC Support Library
!
! ABSTRACT:
!
!	This module has 2 entry points, one each for floating and double.
!	The double routine checks for a BASIC frame and picks
!	up the scale factor.  Then both routines convert a number
!	to a numeric string with no leading or trailing spaces and no E format
!	by a CALL to the correct BAS$ conversion routine.
!
! ENVIRONMENT: User mode, AST level or not or mixed
!
! AUTHOR: R. Will, CREATION DATE: 10-Mar-79
!
! MODIFIED BY:
!
! R. Will, 10-Mar-79: VERSION 01
! 01	- original
! 1-002	- Change linkage names for string linkages to STR$.  JBS 04-JUN-1979
! 1-003 - Add BASLNK for BASIC scaling linkages.  RW  26-JUN-79
! 1-004 - Change to use new conversion routines.  RW  6-JUL-79
! 1-005 - Add longword entry point.  RW  10-Jul-79
! 1-006 - String cleanup, don't use STR$ macros.  RW  30-Oct-79
!--
!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES: NONE
!

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    BAS$NUM1_F : NOVALUE,		! Find NUM1$ of a floating value
    BAS$NUM1_D : NOVALUE, 		! Find NUM1$ of a double value
    BAS$NUM1_L : NOVALUE;		! Find NUM1$ of a longword value

!
! INCLUDE FILES:
!

REQUIRE 'RTLIN:RTLPSECT';		! Declare PSECTs code
REQUIRE 'RTLIN:BASLNK';			! Linkage for BASIC scaling routines
REQUIRE 'RTLIN:BASFRAME';		! Define offsets in a BASIC frame

!
! MACROS: NONE
!

BUILTIN
    CVTLD;				! convert longword to double precision

!
! EQUATED SYMBOLS:
!

LITERAL
    strip_spaces = 1,			! flag to strip spaces
    floating_dec = 32;			! flag to use floating decimal point

!
! PSECT DECLARATIONS
!

DECLARE_PSECTS (BAS);

!
! OWN STORAGE: NONE
!

!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    BAS$CVT_OUT_F_F,			! Convert # to BASIC string format
    BAS$CVT_OUT_D_F;			! Convert # to BASIC double str format

GLOBAL ROUTINE BAS$NUM1_F (		! convert floating to string
			  STRING,	! Address of destination descriptor
			  VALUE) :	! Create string with this value
			  NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine takes a floating number and formats it
!	with no leading or trailing spaces and no E format, 6 significant
!	digits, and gives that value to the destination string.
!
! FORMAL PARAMETERS:
!
!	STRING.wt.dx		pointer to input string descriptor
!	VALUE.rf.v		value of a floating number
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	This routine calls the conversion routine and so may signal any of its
!	errors or have any of its side effects.  In particular, the conversion
!	routine calls STR$ routines and so may allocate or deallocate
!	dynamic string space and write lock a string for a short time.
!
!--

    BEGIN

    MAP
	STRING : REF BLOCK [8,BYTE];

    LOCAL
	STR_LENGTH : WORD;			! cvt returns str lengtht

    BAS$CVT_OUT_F_F (VALUE,			! convert this value to string
		   0,				! don't specify integer digits
		   0,				! don't specify fraction digits
		   strip_spaces + floating_dec,	! set flags
		   STR_LENGTH,			! return bytes needed for str
		   STRING [0,0,0,0]);		! return string
		   
    RETURN;
    END;					!End of BAS$NUM1_F

GLOBAL ROUTINE BAS$NUM1_D (		! convert double to string
			  STRING,	! Address of destination descriptor
			  VALUE1,	! 1st longword of double value to put in
			  VALUE2) :	! 2nd longwrd of double value for string
			  NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine takes a double number and formats it without
!	leading or trailing spaces, and no E format, 16 significant digits,
!	and gives that value to the destination string.
!	Note that this routine violates the calling standard by accepting
!	and passing double floating numbers by value
!
! FORMAL PARAMETERS:
!
!	STRING.wt.dx		pointer to input string descriptor
!	VALUE.rd.v		value of a double number
!	(VALUE1 and VALUE2 used to pick up the 2 longwords of double value)
!
! IMPLICIT INPUTS:
!
!	scale from callers frame for double scaling
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	This routine calls the conversion routine and so may signal any of its
!	errors or have any of its side effects.  In particular, the conversion
!	routine calls STR$ routines and so may allocate or deallocate
!	dynamic string space and write lock a string for a short time.
!
!--

    BEGIN

    MAP
	STRING : REF BLOCK [8,BYTE];

    LOCAL
	STR_LENGTH : WORD;			! conversion rtn returns len

    BAS$CVT_OUT_D_F (VALUE1,			! convert this value to string
		   0,				! don't specify integer digits
		   0,				! don't specify fraction digits
		   strip_spaces + floating_dec,	! set flags
		   STR_LENGTH,			! return bytes needed for str
		   STRING [0,0,0,0],		! return string
		   $BAS$SCALE);			! scale factor		   
		   
    RETURN;
    END;					!End of BAS$NUM1_D

GLOBAL ROUTINE BAS$NUM1_L (		! convert longword to string
			  STRING,	! Address of destination descriptor
			  VALUE) :	! longword value to put in string
			  NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine takes a longword number and formats it without
!	leading or trailing spaces, and no E format, 16 significant digits,
!	and gives that value to the destination string.
!
! FORMAL PARAMETERS:
!
!	STRING.wt.dx		pointer to input string descriptor
!	VALUE.rl.v		value of a double number
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	This routine calls the conversion routine and so may signal any of its
!	errors or have any of its side effects.  In particular, the conversion
!	routine calls STR$ routines and so may allocate or deallocate
!	dynamic string space and write lock a string for a short time.
!
!--

    BEGIN

    MAP
	STRING : REF BLOCK [8,BYTE];

    LOCAL
	STR_LENGTH : WORD,			! conversion rtn returns len
	DOUBLE_VALUE : VECTOR [2, LONG];	! place to store double

    CVTLD (VALUE, DOUBLE_VALUE [0]);		! convert logn to double and
						!  then use double conversion
    BAS$CVT_OUT_D_F (DOUBLE_VALUE [0],		! double value to convert
		   0,				! don't specify integer digits
		   0,				! don't specify fraction digits
		   strip_spaces + floating_dec,	! set flags
		   STR_LENGTH,			! return bytes needed for str
		   STRING [0,0,0,0]);		! return string
		   
    RETURN;
    END;			!End of BAS$NUM1_L

END				!End of module
ELUDOM
