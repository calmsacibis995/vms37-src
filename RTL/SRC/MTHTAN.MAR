	.TITLE	MTH$TAN 	; Floating Point Tangent routine
				; (TAN, TAND)
	.IDENT /1-020/		; File: MTHTAN.MAR  EDIT:RNH1020
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;
; FACILITY: MATH LIBRARY
;++
; ABSTRACT:
;
; MTH$TAN is a function  which  returns the floating point tangent
; of its single precision floating point radian argument. The call is 
; standard call-by-reference.  It does a JSB to MTH$TAN_R5.
;
; MTH$TAND is a function  which  returns the floating point tangent
; of its single precision floating point degree argument. The call is 
; standard call-by-reference.  It does a JSB to MTH$TAND_R5.
;
; MTH$TAN_R5, and MTH$TAND_R5 are JSB entry points that JSB to MTH$SINCOS_R5
; and MTH$SINCOSD_R5 respectively.  MTH$TAN_R4, and MTH$TAND_R4 cannot use
; the above two routines because they are _R4 routines, so they JSB to
; MTH$SIN_R4, MTH$COS_R4, and MTH$SIND_R4, MTH$COSD_R4 routines.
;
;--
;
; VERSION: 1
;
; HISTORY:
; AUTHOR:
;	Peter Yuo, 29-Jun-77: Version 01
;
; MODIFIED BY:
;
;
;

	.SBTTL	HISTORY	; Detailed Current Edit History


; ALGORITHMIC DIFFERENCES FROM FP-11/C ROUTINE:	none
;
;	The result is reserved operand when COS(X) = 0, instead
;	of largest or smallest representable floating number.
;
; Edit History 
;
; 01-2	Error handling mechanism changed. Instead of having 
;	MTH$FLG_JACKET at the entrance, MTH$$ERROR_CONT is stored on the
;	top of the stack frame so when error happened in MTH$SIN or MTH$COS
;	the message will be hided away, but will get signalled in MTH$TAN.
; 01-3	The call to MTH$ERROR_CONT is changed to MTH$SIGNAL_CON
; 0-4	MTH$$ERROR changed to MTH$$SIGNAL.
;	MTH$_... changed to MTH__....
;	Changed error handling mechanism. Put error result in R0 before 
;	calling MTH$$SIGNAL in order to allow user modify error result.
; 1-005	- Put version number in standard format (three digits of edit
;	   number) and update copyright notice.  JBS 16-NOV-78
; 1-006	- Change MTH__FLOOVEMAT to MTH$K_FLOOVEMAT.  JBS 07-DEC-78
; 1-007	- Remove $SRMDEF macro - not needed.  JBS 16-DEC-78
; 1-008	- Add "_" to the PSECT directive.  JBS 22-DEC-78
; 1-009 - Fix error handling and detection.  SBL 02-Feb-79
; 1-010 - Declare externals.  SBL 17-May-1979
; 1-011	- Add JSB entry point.  JBS 16-AUG-1979
; 1-012	- Make external references longword, and remove MTH$$SIGNAL_CON
;	   when doing our own signal.  JBS 16-AUG-1979
; 1-013	- Correct a typo in edit 011.  JBS 17-AUG-1979
; 1-014 - Have CALL entry JSB to JSB entry.  Use correct signalling
;	  technique for JSB entry.  SBL 31-Oct-1979
; 1-015 - Reduce argument limit to 2**30 to match SIN/COS.  SBL 2-Nov-1979
; 1-016 - Added degree entry points. RNH 8-MAR-1981
; 1-017 - Undo edit 1-015.  SIN/COS can now accept this argument limit. RNH 26-AUG-81.
; 1-018 - Add MTH$TAN_R5, and MTH$TAND_R5.  Rearange the routine for simplicity.
;	  RNH 27-AUG-81.
; 1-019 - Change external references from W^ to G^. RNH 06-Oct-81
; 1-020 - Missed a W^.  RNH 08-Oct-81

	.SBTTL	DECLARATIONS	; Declarative Part of Module

;
; INCLUDE FILES:
;

;
; EXTERNAL SYMBOLS:
;
	.DSABL	GBL
	.EXTRN	MTH$SINCOS_R5
	.EXTRN	MTH$SINCOSD_R5
	.EXTRN	MTH$SIN_R4
	.EXTRN	MTH$COS_R4
	.EXTRN	MTH$K_FLOOVEMAT
	.EXTRN	MTH$$SIGNAL
	.EXTRN	MTH$K_FLOUNDMAT
	.EXTRN	MTH$$JACKET_TST
	.EXTRN	MTH$SIND_R4
	.EXTRN	MTH$COSD_R4

;
; EQUATED SYMBOLS:	
	F_SMALLEST_DEG = ^X2EE10365
;
; MACROS:	
	$SFDEF			; Define SF (Stack Frame) symbols
;
;
; PSECT DECLARATIONS:

	.PSECT	_MTH$CODE	PIC,SHR,LONG,EXE,NOWRT
					; program section for math routines
;
; OWN STORAGE:	none
;
; CONSTANTS:

	X = 4				;Position of argument from AP.

	.SBTTL	MTH$TAN  - Standard Single Precision Floating TAN


;++
; FUNCTIONAL DESCRIPTION:
;
; TAN  - single precision floating point function
;
;	For algorithm, see MTH$TAN_R5.
;
; CALLING SEQUENCE:
;
;	TAN.wf.v = MTH$TAN(X.rf.r)
;
; INPUT PARAMETERS:
;
;	X.rf.r		Address of value of angle in radians.
;
; IMPLICIT INPUTS:	none
;
; OUTPUT PARAMETERS:
;
;	VALUE:	floating tangent of the argument
;
; IMPLICIT OUTPUTS:	none
;
; COMPLETION CODES:	none
;
; SIDE EFFECTS:
;
;	NONE
;
;---


	.ENTRY	MTH$TAN, ^M<IV, R2, R3, R4, R5>
					; standard call-by-reference entry
					; disable DV (and FU), enable IV
	MTH$FLAG_JACKET
	MOVF	@X(AP), R0		; R0 = argument
	BSBB	MTH$TAN_R5		; Get the tangent
	RET				; Return with result in R0

	.SBTTL	MTH$TAN_R5 - JSB entry point

;++
; FUNCTIONAL DESCRIPTION
;
; TAN - single precision floating point function
;
; Algorithmic steps:
;
; 1.	Compute SIN and COS in one JSB.  Neither computation should fail.
; 2.	If COS is zero, error MTH$_FLOOVEMAT and return with reserved operand.
; 3.	Return SIN / COS.
;
; CALLING SEQUENCE:
;
;	MOVF	argument, R0
;	JSB	MTH$TAN_R5
;
; INPUT PARAMETERS:
;
;	R0 contains x
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; RESULT VALUE:
;
;	The tangent of x
;
; SIDE EFFECTS:
;
;	NONE
;	
;--
MTH$TAN_R5::					
	JSB	MTH$SINCOS_R5			; Compute SIN(X), and COS(x)
	TSTF	R1				; Is COS(X) EQL 0 ?
	BEQL	20$				; If so, error
	DIVF2	R1, R0				; Compute SIN(x) / COS(x)
	RSB					; Return to caller
;
; Branch to common error code
;
20$:
	BRW	COSZER				;

	.SBTTL	MTH$TAN_R4 - JSB entry point

;++
; FUNCTIONAL DESCRIPTION
;
; TAN - single precision floating point function
;
; Algorithmic steps:
;
; 1.	Compute SIN, and then COS.  Neither computation should fail.
; 2.	If COS is zero, error MTH$_FLOOVEMAT and return with reserved operand.
; 3.	Return SIN / COS.
;
; CALLING SEQUENCE:
;
;	MOVF	argument, R0
;	JSB	MTH$TAN_R4
;
; INPUT PARAMETERS:
;
;	R0 contains x
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; RESULT VALUE:
;
;	The tangent of x
;
; SIDE EFFECTS:
;
;	NONE
;	
;--
MTH$TAN_R4::					; entry point
	PUSHL	R0				; Save argument
	JSB	MTH$COS_R4			; Compute COS(x)
	MOVF	R0, -(SP)			; Put on stack and test for zero
	BEQL	20$				; If so, error
	MOVL	4(SP), R0			; Get argument back
	JSB	MTH$SIN_R4			; Compute SIN(x)
	DIVF2	(SP)+, R0			; Compute SIN(x) / COS(x)
	ADDL2	#4, SP				; Remove argument from stack
	RSB					; Return to caller
;+
; Restore stack, and go to common error code.
;-
20$:
	ADDL2	#8, SP				; Discard COS and argument
	BRW	COSZER				; Go to common error code

	.SBTTL	MTH$TAND  - Standard Single Precision Floating TAN


;++
; FUNCTIONAL DESCRIPTION:
;
; TAND  - Single precision floating point function
;
;         For algorithm, see MTH$TAND_R5.
;
; CALLING SEQUENCE:
;
;	TAND.wf.v = MTH$TAND(X.rf.r)
;
; INPUT PARAMETERS:
;
;	X.rf.r				;Address of value of angle in degrees.
;
; IMPLICIT INPUTS:	none
;
; OUTPUT PARAMETERS:
;
;	VALUE:	floating tangent of the argument
;
; IMPLICIT OUTPUTS:	none
;
; COMPLETION CODES:	none
;
; SIDE EFFECTS:
;
;	NONE
;
;---


	.ENTRY	MTH$TAND, ^M<IV, R2, R3, R4, R5>
					; standard call-by-reference entry
					; disable DV (and FU), enable IV
	MTH$FLAG_JACKET
	MOVF	@X(AP), R0		; R0 = argument
	BSBB	MTH$TAND_R5		; Get the tangent
	RET				; Return with result in R0

	.SBTTL	MTH$TAND_R5 - JSB entry point

;++
; FUNCTIONAL DESCRIPTION
;
; TAND - Single precision floating point function
;
; Algorithmic steps:
;
; 1.    Check for argument too small for SIND.  If so, return zero, and
;       signal floating point underflow if enabled.
; 2.	Compute SIND and COSD in one JSB.  Neither computation should fail.
; 3.	If COSD is zero, error MTH$_FLOOVEMAT and return with reserved operand.
; 4.	Return SIND / COSD.
;
; CALLING SEQUENCE:
;
;	MOVF	argument, R0
;	JSB	MTH$TAND_R5
;
; INPUT PARAMETERS:
;
;	R0 contains x
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; RESULT VALUE:
;
;	The tangent of x
;
; SIDE EFFECTS:
;
;	
;	
;       Signal MTH$_FLOUNDMAT if |x| < 180/pi*2**-128
;--


MTH$TAND_R5::					
	BICL3	#^X8000, R0, R1			; R1 = |X|
	CMPW	#^X380, R1			; Compare with 2**-121
	BGEQ	30$				; No underflow possible
	CMPF	#F_SMALLEST_DEG, R1		; Better test.  Compare 
	BLSS	30$				; |X| with 180/pi*2**-128
	TSTL	R0				; Check for zero
	BNEQ	UNFL				; ARG too small and not 0
	RSB					; Return R0 = 0
;+
; We now know that MTH$SINCOSD_R5 routine will not fail, and that the
; divide following them will not fail.
;-
30$:	
	JSB	MTH$SINCOSD_R5			; Compute SIND(X), and COSD(X)
	TSTF	R1				; Is COSD(X) EQL 0 ?
	BEQL	COSZER				; If so, error
	DIVF2	R1, R0				; Compute SIND(x) / COSD(x)
	RSB					; Return to caller


	.SBTTL	MTH$TAND_R4 - JSB entry point

;++
; FUNCTIONAL DESCRIPTION
;
; TAND - Single precision floating point function
;
; Algorithmic steps:
;
; 1.    Check for argument too small for SIND.  If so, return zero, and
;       signal floating point underflow if enabled.
; 2.	Compute SIND, and then COSD.  Neither computation should fail.
; 3.	If COSD is zero, error MTH$_FLOOVEMAT and return with reserved operand.
; 4.	Return SIND / COSD.
;
; CALLING SEQUENCE:
;
;	MOVF	argument, R0
;	JSB	MTH$TAND_R4
;
; INPUT PARAMETERS:
;
;	R0 contains x
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; RESULT VALUE:
;
;	The tangent of x
;
; SIDE EFFECTS:
;
;	
;	
;       Signal MTH$_FLOUNDMAT if |x| < 180/pi*2**-128
;--


MTH$TAND_R4::					; entry point
	BICL3	#^X8000, R0, R1				; R1 = |X|
	CMPW	#^X380, R1			; Compare with 2**-121
	BGEQ	30$				; No underflow possible
	CMPF	#F_SMALLEST_DEG, R1		; Better test.  Compare 
	BLSS	30$				; |X| with 180/pi*2**-128
	TSTL	R0				; Check for zero
	BNEQ	UNFL				; ARG too small and not 0
	RSB					; Return R0 = 0
;+
; We now know that the SIND and COSD routines will not fail, and that the
; divide following them will not fail.
;-
30$:	PUSHL	R0				; Save argument
	JSB	MTH$COSD_R4			; Compute COSD(x)
	MOVF	R0, -(SP)			; Put on stack and test for zero
	BEQL	20$				; If so, error
	MOVL	4(SP), R0			; Get argument back
	JSB	MTH$SIND_R4			; Compute SIND(x)
	DIVF2	(SP)+, R0			; Compute SIND(x) / COSD(x)
	ADDL2	#4, SP				; Remove argument from stack
	RSB					; Return to caller
;+
; Restore stack, and go to common error code.
;-
20$:
	ADDL2	#8, SP				; Discard COSD and argument
	BRW	COSZER				; Go to common error code

;
; COMMON ERROR PATHS
;


;
; Come here if underflow; signal error if FU is set.  Always return 0.0
;
UNFL:
	MOVPSL	R2			; R2 = user's or jacket routine's PSL
	CALLS	#0, G^MTH$$JACKET_TST	; R0 = TRUE if JSB from jacket routine
	BLBC	R0, 10$			; branch if user did JSB
	MOVZWL	SF$W_SAVE_PSW(FP), R2	; get user PSL saved by CALL
10$:	CLRL	R0			; R0 = result. LIB$SIGNAL will save in
					; CHF$L_MCH_R0/R1 so any handler can fixup
	BBC	#6, R2, 20$		; has user enabled floating underflow?
	PUSHL	(SP)			; yes, return PC from special routine
	MOVZBL	#MTH$K_FLOUNDMAT, -(SP)	; trap code for hardware floating underflow
					; convert to MTH$_FLOUNDMAT (32-bit VAX-11 
					; exception code)
	CALLS	#2, G^MTH$$SIGNAL	; signal (condition, PC)
20$:	RSB				; return

;+
; Come here if COS(X) or COSD(X) is zero.  This means that TAN(X) is infinite.
;-
COSZER:	
	PUSHL	(SP)				; User "call" PC
	MOVZBL	#MTH$K_FLOOVEMAT, -(SP)		; Condition value
	ASHL	#15, #1, R0			; R0 = reserved operand
	CALLS	#2, G^MTH$$SIGNAL		; Signal the error
	RSB					; Return to caller.

	.END
