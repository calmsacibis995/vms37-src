	.TITLE	LIB$CVTMAC	MACRO-32 support for LIB$CVT_DX_DX
	.IDENT	/1-002/ 	; File: LIBCVTMAC.MAR  EDIT: FM1002

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
; FACILITY: Run-time library.
;
; ABSTRACT:
;	This module contains the MACRO-32 support routines for LIB$CVT_DX_DX
;	routine.  All of the entry points are JSB entry points.
;
; ENVIRONMENT:
;	Some entry points require the Caller to have LIB$EMULATE or the
;	machine have the full instruction set of VAX-11 architecture.
;	Note that this module is for specific support of LIB$CVT_DX_DX routine,
;	hence it has no  RTL "globally defined" entry point, therefore this 
;	module assumes that the caller has IV, FU, DV bits in PSW turned on.
;
; AUTHOR:
;	AUTHORS :  FAROKH MORSHED, PETER GILBERT  7-FEB-81, VERSION 1, VMS V3.0.
;
; MODIFIED BY:
;
; VERSION: 1
; 1001	Original.
; 1002	Make references to LIB$SIGNAL General mode addressing.  FM 30-OCT-81.
;--
;

	.SBTTL	DECLARATIONS

;
; PSECT DECLARATIONS:
;
	.PSECT	_LIB$CODE	PIC, SHR, LONG, EXE, NOWRT
;
; EXTERNAL ROUTINES
;
	.EXTERNAL	LIB$SIGNAL
;
;	MACRO
;
	$SSDEF


	.SBTTL	LIB$$CVT_CVTLB_R1

;++
; FUNCTIONAL DESCRIPTION:
;	Convert LONGWORD to BYTE
;
;
; CALLING SEQUENCE:
;	LIB$$CVT_CVTLB_R1 ( long.rl.r, byte.wb.r )
;	This is a JSB entry point.	
;
;
; FORMAL PARAMETERS:
;	R0 --> long	R1 --> byte
;
;
; IMPLICIT INPUTS:
;	NONE
;
;
; IMPLICIT OUTPUTS:
;	NONE
;
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;
;
;--

LIB$$CVT_CVTLB_R1 ::
	CVTLB	(R0), (R1)		;Convert LONGWORD to BYTE
	RSB

	.SBTTL	LIB$$CVT_CVTLW_R1

;++
; FUNCTIONAL DESCRIPTION:
;	Convert LONGWORD to WORD.
;
;
; CALLING SEQUENCE:
;	LIB$$CVT_CVTLW_R1 ( long.rl.r, word.ww.r )
;	This is a JSB entry point.	
;
;
; FORMAL PARAMETERS:
;	R0 --> long	R1 --> word
;
;
; IMPLICIT INPUTS:
;	NONE
;
;
; IMPLICIT OUTPUTS:
;	NONE
;
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;
;
;--

LIB$$CVT_CVTLW_R1 ::
	CVTLW 	(R0), (R1)		;Convert LONGWORD to WORD
	RSB

	.SBTTL	LIB$$CVT_CVTLH_R1

;++
; FUNCTIONAL DESCRIPTION:
;	Convert LONGWORD to H_FLOATING.
;
;
; CALLING SEQUENCE:
;	LIB$$CVT_CVTLH_R1 ( long.rl.r, hfloat.wh.r )
;	This is a JSB entry point.	
;
;
; FORMAL PARAMETERS:
;	R0 --> long	R1 --> hfloat
;
;
; IMPLICIT INPUTS:
;	NONE
;
;
; IMPLICIT OUTPUTS:
;	NONE
;
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	OPCODE RESERVED TO DIGITAL error is possible, see ENVIRONMENT.
;
;--

LIB$$CVT_CVTLH_R1 ::
	CVTLH 	(R0), (R1)		;Convert LONGWORD to H_FLOATING
	RSB


	.SBTTL	LIB$$CVT_CVTROUF_R1

;++
; FUNCTIONAL DESCRIPTION:
;	Convert unsigned OCTAWORD to FLOAT.
;
;
; CALLING SEQUENCE:
;	LIB$$CVT_CVTROUF_R1 ( octa.ro.r, float.wf.r )
;	This is a JSB entry point.	
;
;
; FORMAL PARAMETERS:
;	R0 --> octa	R1 --> float
;
;
; IMPLICIT INPUTS:
;	NONE
;
;
; IMPLICIT OUTPUTS:
;	NONE
;
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	OPCODE RESERVED TO DIGITAL error is possible, see ENVIRONMENT.
;
;--

;
;	  DEFINE SOME CONSTANTS
;
FDUMMY:	.BLKL		1	
	.F_FLOATING	79228162514264337593543950336	;2**96
	.F_FLOATING	18446744073709551616		;2**64
F32:	.F_FLOATING	4294967296			;2**32
	.F_FLOATING	1				;
;
;	 FIND THE FLOATING ATOMIC DATA TYPE BY MULTIPLYING EACH LONGWORD
;	 OF OCTAWORD BY AN APPROPRIATE CONSTANT. 
;
LIB$$CVT_CVTROUF_R1 ::
	PUSHR	#^M<R0,R1,R2,R3>
	CLRF	(R1)			;Initialize destination.
	MOVL	#4, R2			;Set up the loop counter for 4 times
10$:	CVTLF	(R0), R3		;Convert the next LONGWORD to floating
	BGTR	13$			;This longword is positive
	ADDF2	F32, R3			;Negative, so add the difference
13$:	MULF2	FDUMMY[R2], R3		;Multiply the result by the constant
	ADDF2	R3, (R1)		;Add in the result to destination
15$:	DECB	R2			;One less time to go around in the loop
	BEQL	20$			;Finished if counter is zero
	TSTL	(R0)+			;Next longword of OCTA
	TSTL	(R0)			;Is it zero ?
	BEQL	15$			;Yes, so ignore it
	BRB	10$			;Loop to chomp some more on the OCTA
20$:
	POPR	#^M<R0,R1,R2,R3>
	RSB

	.SBTTL	LIB$$CVT_CVTROUD_R1

;++
; FUNCTIONAL DESCRIPTION:
;	Convert unsigned OCTAWORD to D_FLOATING.
;
;
; CALLING SEQUENCE:
;	LIB$$CVT_CVTROUD_R1 ( octa.ro.r, dfloat.wd.r )
;	This is a JSB entry point.	
;
;
; FORMAL PARAMETERS:
;	R0 --> octa	R1 --> dfloat
;
;
; IMPLICIT INPUTS:
;	NONE
;
;
; IMPLICIT OUTPUTS:
;	NONE
;
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	OPCODE RESERVED TO DIGITAL error is possible, see ENVIRONMENT.
;
;--

;
;	  DEFINE SOME CONSTANTS
;
DDUMMY:	.BLKL		2
	.D_FLOATING	79228162514264337593543950336	;2**96
	.D_FLOATING	18446744073709551616		;2**64
D32:	.D_FLOATING	4294967296			;2**32
	.D_FLOATING	1				;
;
;	 FIND THE FLOATING ATOMIC DATA TYPE BY MULTIPLYING EACH LONGWORD
;	 OF OCTAWORD BY AN APPROPRIATE CONSTANT. 
;
LIB$$CVT_CVTROUD_R1 ::
	PUSHR	#^M<R0,R1,R2,R3,R4>
	CLRD 	(R1)			;Initialize destination
	MOVL	#4, R2			;Set up the loop counter for 4 times
10$:	CVTLD	(R0), R3		;Convert the next LONGWORD to floating
	BGTR	13$			;This longword is positive
	ADDD2	D32, R3			;Negative, so add the difference
13$:	MULD2	DDUMMY[R2], R3		;Multiply the result by the constant
	ADDD2	R3, (R1)		;Add in the result to destination
15$:	DECB	R2			;One less time to go around in the loop
	BEQL	20$			;Finished if counter is zero
	TSTL	(R0)+			;Next longword of OCTA
	TSTL	(R0)			;Is it zero
	BEQL	15$			;Yes, so ignore it
	BRB	10$			;Loop to chomp some more on the OCTA
20$:
	POPR	#^M<R0,R1,R2,R3,R4>
	RSB

	.SBTTL	LIB$$CVT_CVTROUG_R1

;++
; FUNCTIONAL DESCRIPTION:
;	Convert unsigned OCTAWORD to G_FLOATING
;
;
; CALLING SEQUENCE:
;	LIB$$CVT_CVTROUG_R1 ( octa.ro.r, gfloat.wg.r )
;	This is a JSB entry point.	
;
;
; FORMAL PARAMETERS:
;	R0 --> octa	R1 --> gfloat
;
;
; IMPLICIT INPUTS:
;	NONE
;
;
; IMPLICIT OUTPUTS:
;	NONE
;
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	OPCODE RESERVED TO DIGITAL error is possible, see ENVIRONMENT.
;
;--

;
;	  DEFINE SOME CONSTANTS
;
GDUMMY:	.BLKL		2
	.G_FLOATING	79228162514264337593543950336;2**96
	.G_FLOATING	18446744073709551616;2**64
G32:	.G_FLOATING	4294967296;2**32
	.G_FLOATING	1;
;
;	 FIND THE FLOATING ATOMIC DATA TYPE BY MULTIPLYING EACH LONGWORD
;	 OF OCTAWORD BY AN APPROPRIATE CONSTANT. 
;
LIB$$CVT_CVTROUG_R1 ::
	PUSHR	#^M<R0,R1,R2,R3,R4>
	CLRG	(R1)			;Initialize destination
	MOVL	#4, R2			;Set up the loop counter for 4 times
10$:	CVTLG	(R0), R3		;Convert the next LONGWORD to floating
	BGTR	13$			;This longword is positive
	ADDG2	G32, R3			;Negative, so add the difference
13$:	MULG2	GDUMMY[R2], R3		;Multiply the result by the constant
	ADDG2	R3, (R1)		;Add in the result to destination
15$:	DECB	R2			;One less time to go around in the loop
	BEQL	20$			;Finished if counter is zero
	TSTL	(R0)+			;Next longword of OCTA
	TSTL	(R0)			;Is it zero ?
	BEQL	15$			;Yes, so ignore it
	BRB	10$			;Loop to chomp some more on the OCTA
20$:
	POPR	#^M<R0,R1,R2,R3,R4>
	RSB

	.SBTTL	LIB$$CVT_CVTROUH_R1

;++
; FUNCTIONAL DESCRIPTION:
;	Convert unsigned OCTAWORD to H_FLOATING rounded.
;
;
; CALLING SEQUENCE:
;	LIB$$CVT_CVTROUH_R1 ( octa.ro.r, hfloat.wh.r )
;	This is a JSB entry point.	
;
;
; FORMAL PARAMETERS:
;	R0 --> octa	R1 --> hfloat
;
;
; IMPLICIT INPUTS:
;	NONE
;
;
; IMPLICIT OUTPUTS:
;	NONE
;
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;
;--

LIB$$CVT_CVTROUH_R1 ::
	PUSHR	#^M<R0,R1,R2,R3>
	TSTL	(R0)			;If OU is zero, return zero.
	BNEQ	5$			;....
	TSTL	4(R0)			;....
	BNEQ	5$			;....
	TSTL	8(R0)			;....
	BNEQ	5$			;....
	TSTL	12(R0)			;....
	BNEQ	5$			;....
	CLRL	(R1)+			;Return 0 in H.
	CLRL	(R1)+			;....
	CLRL	(R1)+			;....
	CLRL	(R1)			;....
	BRW	50$			;Go to RSB back to caller.
5$:
	SUBL2	#18, SP			;Make room for nomalized OU.
; 
; Move source to top of stack to normalize it
;
	MOVQ	(R0), (SP)		;Put OU in here to be
	MOVQ	8(R0), 8(SP)		;	worked on.
	CLRW	16(SP)			;We need this extra word for ADWC.
;
; Initialize some locations
;
	CLRL	R2			;R2 will contain number of shifts.
	CLRL	R3			;Temporary.
	BICPSW	#^X20			;Turn off IV so we can ASHQ
;
; This loop will shift OU left until MSB is a one.
;
10$:
	DECL	R2			;Count number of shifts.
	BSBW	SHIFT_OU_LEFT		;Shift OU left one time.
	TSTB	15(SP)			;Is MSB of normalized OU set ?
	BGEQ	10$			;No, loop again.
;
; Round the OU if needed
;
	BBC	#14, (SP), 30$		;If the bit beyond LSB of H clear no
					;	rounding is needed.
	BBCS	#15, (SP), 30$		;If this bit is clear we just need
					;	to set it and it is rounded.
	BICB2	#^X80, 1(SP)		;Painfully round this bit pattern.
	ADDL2	#1, 2(SP)		;.....
	ADWC	#0, 6(SP)		;.....
	ADWC	#0, 10(SP)		;.....
	ADWC	#0, 14(SP)		;.....
; 
; Normalize this bit pattern
;
	BLBS	16(SP), 40$		;If this bit is on, it means that we
					;	had an overflow on the last
					;	word, so it is already
					;	normalized.
30$:
	BSBW	SHIFT_OU_LEFT		;Normalize it.
;
; Put what we have cooked up in the H destination
;
40$:
	ADDL2	#128, R2		;exp = length of OU (128) - #of shifts.
	MOVW	R2, (R1)		;Put in exponent.
	BISB2	#^X40, 1(R1)		;Set the excess bit.
	MOVW	14(SP), 2(R1)		;Put in the fraction.
	MOVW	12(SP), 4(R1)		;......
	MOVW	10(SP), 6(R1)		;......
	MOVW	8(SP), 8(R1)		;......
	MOVW	6(SP), 10(R1)		;......
	MOVW	4(SP), 12(R1)		;......
	MOVW	2(SP), 14(R1)		;......
	BISPSW	#^X20			;Turn IV back on.
	ADDL2	#18, SP			;Restore SP 
50$:	POPR	#^M<R0,R1,R2,R3>
	RSB				;RSB back to caller.
;
; Subroutine to shift OU one to the left
;
SHIFT_OU_LEFT:
	CLRB	R3			;Initialize R3
	TSTB	11(SP)			;Is MSB of low quad set.
	BGEQ	10$			;No.
	INCB	R3			;Yes, remember it.
10$:
	ASHQ	#1, 4(SP), 4(SP)	;Shift low quad one time.
	ASHQ	#1, 12(SP), 12(SP)	;Shift high quad one time.
	INSV	R3, #0, #1, 12(SP)	;If MSB of low quad was set then set
					;LSB of high quad.
	RSB				;Return to main routine.

	.SBTTL	LIB$$CVT_CVTRDQ_R1

;++
; FUNCTIONAL DESCRIPTION:
;	Convert D_FLOATING to QUADWORD rounded.
;
;
; CALLING SEQUENCE:
;	LIB$$CVT_CVTRDQ_R1 ( dfloat.rd.r, quad.wq.r )
;	This is a JSB entry point.	
;
;
; FORMAL PARAMETERS:
;	R0 --> dfloat	R1 --> QUADWORD
;
;
; IMPLICIT INPUTS:
;	NONE
;
;
; IMPLICIT OUTPUTS:
;	NONE
;
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	NONE
;
;--

D_OFF	= 7				; Offset to exponent (double)

LIB$$CVT_CVTRDQ_R1 ::
	PUSHR	#^M<R0,R1,R2,R3>	; Save these registers
	CLRD	(R1)			; Initialize result to zero
	MOVD	(R0), R2		; Grab source (reserved operand?)
	BEQL	20$			; Branch if result is zero
	SUBW2	#32@D_OFF, R2		; Scale down by 2**32
	CVTRDL	R2, 4(R1)		; Store high-order longword of result
	ADDW2	#32@D_OFF, R2		; Scale up by 2**32
	CVTLD	4(R1), -(SP)		; Convert long back to double
	BEQL	10$			; Skip if zero
	ADDW2	#32@D_OFF, (SP)		; Scale up by 2**32
10$:	SUBD2	(SP)+, R2		; Subtract high-order longword
	CVTRDL	R2, (R1)		; Convert rounded remainder to long
	BGEQ	20$			; Skip if positive
	DECL	4(R1)			; Sign-extend low-order longword
20$:	POPR	#^M<R0,R1,R2,R3>	; Restore these registers
	RSB

	.SBTTL	LIB$$CVT_CVTDH_R1

;++
; FUNCTIONAL DESCRIPTION:
;	Convert D_FLOATING to H_FLOATING.
;
;
; CALLING SEQUENCE:
;	LIB$$CVT_CVTDH_R1 ( dfloat.rd.r, hfloat.wh.r )
;	This is a JSB entry point.	
;
;
; FORMAL PARAMETERS:
;	R0 --> dfloat	R1 --> hfloat
;
;
; IMPLICIT INPUTS:
;	NONE
;
;
; IMPLICIT OUTPUTS:
;	NONE
;
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	OPCODE RESERVED TO DIGITAL error is possible, see ENVIRONMENT.
;
;--

LIB$$CVT_CVTDH_R1 ::
	CVTDH	(R0), (R1)		;Convert D_FLOATING to H_FLOATING
	RSB

	.SBTTL	LIB$$CVT_CVTRHL_R1

;++
; FUNCTIONAL DESCRIPTION:
;	Convert H_FLOATING to LONGWORD rounded.
;
;
; CALLING SEQUENCE:
;	LIB$$CVT_CVTRHL_R1 ( hfloat.rh.r, long.wl.r )
;	This is a JSB entry point.	
;
;
; FORMAL PARAMETERS:
;	R0 --> hfloat	R1 --> long
;
;
; IMPLICIT INPUTS:
;	NONE
;
;
; IMPLICIT OUTPUTS:
;	NONE
;
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	OPCODE RESERVED TO DIGITAL error is possible, see ENVIRONMENT.
;
;--
LIB$$CVT_CVTRHL_R1 ::
	CVTRHL	(R0), (R1)		;Convert H_FLOATING to LONGWORD rounded
	RSB

	.SBTTL	LIB$$CVT_CVTRHQ_R1
;++
; FUNCTIONAL DESCRIPTION:
;	Convert H_FLOATING to QUADWORD rounded.
;
;
; CALLING SEQUENCE:
;	LIB$$CVT_CVTRHQ_R1 ( hfloat.rh.r, quad.wq.r )
;	This is a JSB entry point.	
;
;
; FORMAL PARAMETERS:
;	R0 --> hfloat	R1 --> quad
;
;
; IMPLICIT INPUTS:
;	NONE
;
;
; IMPLICIT OUTPUTS:
;	NONE
;
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;
;
;--
LIB$$CVT_CVTRHQ_R1 ::
	PUSHR	#^M<R0,R1,R2,R3>	; Save these registers
	CLRQ	(R1)			; Initialize result to zero
	CLRL	R3			; Initialize rounding bit
;
;	 Find the exponent
;
	EXTZV	#0, #15, (R0), R2	; Extract the exponent
	BEQL	5$			; Call the number zero if expo. is zero
	SUBL2	#^X4000, R2		; Take out the excess
	BLSS	50$			; If negative then Quad is zero
	BGTR	10$			; Is exponent zero ?
	INCL	(R1)			; Yes, call it a one
5$:
	BRW	50$			; Go to the finish line
;
;	 Check for overflow.  If exponent is 63, find rounding bit before we
;	 lose it.
;
10$:
	SUBL2	#63, R2			; Bring '.' to right of bit 0
	BLSS	20$			; If exponent < 63, skip this
	BGTR	15$			; If exponent > 63, we have IV
	EXTZV	#14, #1, 8(R0), R3	; Exponent is 63, R3 is the round bit
	BRB	20$			; Cont.
15$:
	PUSHL	#SS$_INTOVF		; Signal IV
	CALLS	#1, G^LIB$SIGNAL	;
;
;	 Move the fraction to the QUAD, and put in a positive sign and MSB
;
20$:
	MOVW	8(R0), (R1)		; Move the fraction to QUAD
	MOVW	6(R0), 2(R1)		;
	MOVW	4(R0), 4(R1)		;
	MOVW	2(R0), 6(R1)		;
	ASHQ	#-2, (R1), (R1)		; Make room for sign and MSB
	BICB2	#^XC0, 7(R1)		; Make sure two high bits are off
	BISB2	#^X40, 7(R1)		; Sign is '+', MSB is 1
;
;	 Find rounding bit if not already done
;
	TSTL	R3			; Is rounding bit already found ?
	BGTR	30$			; Yes
	MNEGL	R2, R3			; R3 will contain rounding bit
	DECL	R3			; Look at the right of decimal point
	EXTZV	R3, #1, (R1), R3	; This is the rounding bit
;
;	 Shift the QAUD R2 times
;
30$:
	ASHQ	R2, (R1), (R1)		; Shift the QUAD R2 times
	TSTB	R3			; Do we need to round
	BEQL	40$			; No
	MOVL	(R1), R2		; Do the rounding
	MOVAB	1(R2), (R1)		; ...
	ADWC	#0, 4(R1)		; ...
40$:	TSTW	(R0)			; Is the H negative ?
	BGTR	50$			; No
	MCOML	(R1), (R1)		; Negate the QUAD
	MCOML	4(R1), 4(R1)		; ...
	MOVL	(R1), R0		; ...
	MOVAB	1(R0), (R1)		; ...
	ADWC	#0, 4(R1)		; ...
50$:
	POPR	#^M<R0,R1,R2,R3>	; Restore these registers
	RSB

	.SBTTL	LIB$$CVT_CVTRHO_R1
;++
; FUNCTIONAL DESCRIPTION:
;	Convert H_FLOATING to OCTAWORD rounded.
;
;
; CALLING SEQUENCE:
;	LIB$$CVT_CVTRHO_R1 ( hfloat.rh.r, octa.wo.r )
;	This is a JSB entry point.	
;
;
; FORMAL PARAMETERS:
;	R0 --> hfloat	R1 --> octa
;
;
; IMPLICIT INPUTS:
;	NONE
;
;
; IMPLICIT OUTPUTS:
;	NONE
;
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	OPCODE RESERVED TO DIGITAL error is possible, see ENVIRONMENT.
;
;--
O_LEN	= 4		; Length in longwords (octaword)

LIB$$CVT_CVTRHO_R1 ::
	;
	; Initialization
	;
	PUSHR	#^M<R0,R1,R2,R3,R4,R5>	; Save these registers
	CLRQ	(R1)			; Initialize result to zero
	CLRQ	8(R1)			; Initialize result to zero
	MOVH	(R0), -(SP)		; Grab source (reserved operand?)
	BEQL	30$			; Branch if result is zero
	;
	; The source is not zero; initialize other registers
	;
	ADDL2	#O_LEN*4, R1		; Address past octaword
	MOVL	R1, R4			; Save this address
	MOVL	#O_LEN-1, R5		; Loop counter
	;
10$:	; Loop for each longword of destination
	;
	ASHL	#5, R5, R2		; Scaling amount (2**5 = 32)
	MOVL	R1, R3			; Address where we start decrementing
	SUBW2	R2, (SP)		; Scale down by 2**(32*n)
	CVTRHL	(SP), -(R1)		; Store high-order longword of result
	ADDW2	R2, (SP)		; Scale up by 2**(32*n)
	CVTLH	(R1), -(SP)		; Convert long back to double
	BEQL	20$			; Skip if zero
	BRB	13$			; Jump into decrement loop
	;
	; If the longword was negative, we must sign-extend the result
	;
11$:	CMPL	(R3), #^X80000000	; Compare with largest negative number
	BEQL	12$			; If not equal, do a simple decrement
	MCOML	(R3), (R3)+		; Subtract one and consider negative
	BRB	14$			; Stay in loop, as result is negative
12$:	DECL	(R3)+			; Decrement this longword
13$:	BGEQ	15$			; Jump out of loop if positive
14$:	CMPL	R3, R4			; See if we are done decrementing
	BLSSU	11$			; If not past octaword, keep going
	;
	; Scale up the longword (if not zero), and subtract from stack temp
	;
15$:	ADDW2	R2, (SP)		; Scale up by 2**(32*n)
20$:	SUBH2	(SP)+, (SP)		; Subtract high-order longword
	;
	; Decrease loop counter, and continue, if more longwords required
	;
	SOBGEQ	R5, 10$			; Continue looping
	;
30$:	; Clean up the stack, and restore registers
	;
	CLRH	(SP)+			; Pop huge from the stack
	POPR	#^M<R0,R1,R2,R3,R4,R5>	; Restore these registers
	RSB				; Return from subroutine


	.SBTTL	LIB$$CVT_CVTHF_R1

;++
; FUNCTIONAL DESCRIPTION:
;	Convert H_FLOATING to FLOATING
;
;
; CALLING SEQUENCE:
;	LIB$$CVT_CVTHF_R1 (hfloat.rh.r, float.wf.r )
;	This is a JSB entry point.	
;
;
; FORMAL PARAMETERS:
;	R0 --> hfloat	R1 --> float
;
;
; IMPLICIT INPUTS:
;	NONE
;
;
; IMPLICIT OUTPUTS:
;	NONE
;
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	OPCODE RESERVED TO DIGITAL error is possible, see ENVIRONMENT.
;
;--
LIB$$CVT_CVTHF_R1 ::
	CVTHF	(R0), (R1)		;Convert H_FLOATING to FLOAT
	RSB

	.SBTTL	LIB$$CVT_CVTHD_R1

;++
; FUNCTIONAL DESCRIPTION:
;	Convert H_FLOATING to D_FLOATING
;
;
; CALLING SEQUENCE:
;	LIB$$CVT_CVTHD_R1 ( hfloat.rh.r, dfloat.wd.r )
;	This is a JSB entry point.	
;
;
; FORMAL PARAMETERS:
;	R0 --> hfloat	R1 --> dfloat
;
;
; IMPLICIT INPUTS:
;	NONE
;
;
; IMPLICIT OUTPUTS:
;	NONE
;
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	OPCODE RESERVED TO DIGITAL error is possible, see ENVIRONMENT.
;
;--
LIB$$CVT_CVTHD_R1 ::
	CVTHD	(R0), (R1)		;Convert H_FLOATING to D_FLOATING
	RSB

	.SBTTL	LIB$$CVT_CVTHG_R1

;++
; FUNCTIONAL DESCRIPTION:
;	Convert H_FLOATING to G_FLOATING
;
;
; CALLING SEQUENCE:
;	LIB$$CVT_CVTHG_R1 ( hfloat.rh.r, gfloat.wg.r )
;	This is a JSB entry point.	
;
;
; FORMAL PARAMETERS:
;	R0 --> hfloat	R1 --> gfloat
;
;
; IMPLICIT INPUTS:
;	NONE
;
;
; IMPLICIT OUTPUTS:
;	NONE
;
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	OPCODE RESERVED TO DIGITAL error is possible, see ENVIRONMENT.
;
;--
LIB$$CVT_CVTHG_R1 ::
	CVTHG	(R0), (R1)		;Convert H_FLOATING to G_FLOATING
	RSB

	.SBTTL	LIB$$CVT_CVTGH_R1

;++
; FUNCTIONAL DESCRIPTION:
;	Convert G_FLOATING to H_FLOATING
;
;
; CALLING SEQUENCE:
;	LIB$$CVT_CVTGH_R1 ( gfloat.rg.r, hfloat.wh.r )
;	This is a JSB entry point.	
;
;
; FORMAL PARAMETERS:
;	R0 --> gfloat	R1 --> hfloat
;
;
; IMPLICIT INPUTS:
;	NONE
;
;
; IMPLICIT OUTPUTS:
;	NONE
;
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	OPCODE RESERVED TO DIGITAL error is possible, see ENVIRONMENT.
;
;--
LIB$$CVT_CVTGH_R1 ::
	CVTGH 	(R0), (R1)		;Convert G_FLOATING TO H_FLOATING
	RSB

	.SBTTL	LIB$$CVT_SCALE_OU_UP_BY_10_R1

;++
; FUNCTIONAL DESCRIPTION:
;	Scale an unsigned OCTAWORD up by 10.
;
;
; CALLING SEQUENCE:
;	LIB$$CVT_SCALE_OU_UP_BY_10_R1 ( octa.mo.r )
;	This is a JSB entry point.	
;
;
; FORMAL PARAMETERS:
;	R0 --> octa	
;
;
; IMPLICIT INPUTS:
;	NONE
;
;
; IMPLICIT OUTPUTS:
;	NONE
;
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	
;	NONE
;--
LIB$$CVT_SCALE_OU_UP_BY_10_R1 ::
	PUSHR	#^M<R0,R1,R2,R3,R4>
	MOVL	#4, R4				; Do four longwords
	CLRL	R3				; Clear the 'carry'
10$:	EMUL	#10, (R0), R3, R1		; Multiply low-order longwords
	BGEQ	20$				; Make sure low-order longword
	ADDL2	#10, R2				;    is seen as unsigned
20$:	MOVL	R1, (R0)+			; Store low longword
	MOVL	R2, R3				; Save the 'carry'
	SOBGTR	R4, 10$				; Continue looping
	TSTL	R3				; Check for overflow
	BEQL	30$				; Branch if no overflow
	MOVL	#SS$_INTOVF, -(SP)		; Integer overflow
	CALLS	#1, G^LIB$SIGNAL		; Signal the error
30$:	POPR	#^M<R0,R1,R2,R3,R4>
	RSB					; Return


	.SBTTL	LIB$$CVT_SCALE_OU_DOWN_BY_10_R1

;++
; FUNCTIONAL DESCRIPTION:
;	Scales down an OCTAWORD by 10.
;
;
; CALLING SEQUENCE:
;	LIB$$CVT_SCALE_OU_DOWN_BY_10_R1 ( octa.mo.r )
;	This is a JSB entry point.	
;
;
; FORMAL PARAMETERS:
;	R0 --> octa	
;
;
; IMPLICIT INPUTS:
;	NONE
;
;
; IMPLICIT OUTPUTS:
;	NONE
;
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	NONE
;
;--
LIB$$CVT_SCALE_OU_DOWN_BY_10_R1::
	PUSHR	#^M<R0,R1,R2,R3,R4>
	MOVL	#3, R4				; Do four longwords
	CLRL	R2				; Clear high longword of quad
10$:	MOVL	(R0)[R4], R1			; Grab low longword of quad
	EDIV	#10, R1, (R0)[R4], R2		; Do a divide
30$:	CMPL	#5, R2				; See if remainder too large
	BGTRU	50$				;    for the next EDIV
	BLEQ	40$				; Simply make remainder smaller
	ADDL2	#10, R2				; Make remainder positive
	DECL	(R0)[R4]			; Make quotient smaller
	BRB	30$				; Join the looping code
40$:	SUBL2	#10, R2				; Make remainder smaller
50$:	SOBGEQ	R4, 10$				; Continue looping
	POPR	#^M<R0,R1,R2,R3,R4>
	RSB					; Return
	

	.SBTTL	LIB$$CVT_MULD2_R1

;++
; FUNCTIONAL DESCRIPTION:
;	multiply two DOUBLE floating values.
;
;
; CALLING SEQUENCE:
;	LIB$$CVT_MULD2_R1 ( mulr.rd.r, prod.md.r )
;	This is a JSB entry point.	
;
;
; FORMAL PARAMETERS:
;	R0 --> mulr	R1 --> prod
;
;
; IMPLICIT INPUTS:
;	NONE
;
;
; IMPLICIT OUTPUTS:
;	NONE
;
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	NONE
;
;--
LIB$$CVT_MULD2_R1 ::
	MULD2	(R0), (R1)		;Multiply two D_FLOATING
	RSB

	.SBTTL	LIB$$CVT_DIVD2_R1

;++
; FUNCTIONAL DESCRIPTION:
;	Divide two DOUBLE floating values.
;
;
; CALLING SEQUENCE:
;	LIB$$CVT_DIVD2_R1 ( divr.rd.r, quo.md.r )
;	This is a JSB entry point.	
;
;
; FORMAL PARAMETERS:
;	R0 --> divr	R1 --> quo
;
;
; IMPLICIT INPUTS:
;	NONE
;
;
; IMPLICIT OUTPUTS:
;	NONE
;
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	NONE
;
;--
LIB$$CVT_DIVD2_R1 ::
	DIVD2	(R0), (R1)		;Divide two D_FLOATING
	RSB

	.SBTTL	LIB$$CVT_MULH2_R1

;++
; FUNCTIONAL DESCRIPTION:
;	multiply two H_FLOATING floating values.
;
;
; CALLING SEQUENCE:
;	LIB$$CVT_MULH2_R1 ( mulr.rh.r, prod.mh.r )
;	This is a JSB entry point.	
;
;
; FORMAL PARAMETERS:
;	R0 --> mulr	R1 --> prod
;
;
; IMPLICIT INPUTS:
;	NONE
;
;
; IMPLICIT OUTPUTS:
;	NONE
;
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;
;	OPCODE RESERVED TO DIGITAL error is possible, see ENVIRONMENT.
;
;--
LIB$$CVT_MULH2_R1 ::
	MULH2	(R0), (R1)		;Multiply two H_FLOATING
	RSB

	.SBTTL	LIB$$CVT_DIVH2_R1

;++
; FUNCTIONAL DESCRIPTION:
;	Divide two H_FLOATING floating values.
;
;
; CALLING SEQUENCE:
;	LIB$$CVT_DIVH2_R1 ( divr.rh.r, quo.mh.r )
;	This is a JSB entry point.	
;
;
; FORMAL PARAMETERS:
;	R0 --> divr	R1 --> quo
;
;
; IMPLICIT INPUTS:
;	NONE
;
;
; IMPLICIT OUTPUTS:
;	NONE
;
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;
;	OPCODE RESERVED TO DIGITAL error is possible, see ENVIRONMENT.
;
;--
LIB$$CVT_DIVH2_R1 ::
	DIVH2	(R0), (R1)		;Divide two H_FLOATING
	RSB

	.SBTTL	LIB$$CVT_ASHP_R1

;++
; FUNCTIONAL DESCRIPTION:
;	Scale a packed decimal number.
;
;
; CALLING SEQUENCE:
;	LIB$$CVT_ASHP_R1 (cnt.rw.r, srclen.rw.r, srcaddr.ra.r,
;			round.rb.r, dstlen.rw.r, dstaddr.ra.r )
;	This is a JSB entry point.	
;
;
; FORMAL PARAMETERS:
;	R0 --> cnt	R1 = srclen	R2 --> srcaddr	R3 = round
;	R4 --> dstlen	R5 = dstaddr
;
;
; IMPLICIT INPUTS:
;	NONE
;
;
; IMPLICIT OUTPUTS:
;	NONE
;
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	NONE
;
;--
LIB$$CVT_ASHP_R1 ::
	PUSHR	#^M<R0,R1,R2,R3,R4,R5>
	ASHP	(R0), (R1), (R2), (R3), (R4), (R5)
	POPR	#^M<R0,R1,R2,R3,R4,R5>
	RSB

	.SBTTL	LIB$$CVT_CMPH_R1

;++
; FUNCTIONAL DESCRIPTION:
;	Compare two H floating values
;
;
; CALLING SEQUENCE:
;	STATUS = LIB$$CVT_CMPH_R1 ( src1.rh.r, src2.rh.r )
;	This is a JSB entry point.	
;
;
; FORMAL PARAMETERS:
;	R0 --> src1	R1 --> src2
;
;
; IMPLICIT INPUTS:
;	NONE
;
;
; IMPLICIT OUTPUTS:
;	NONE
;
;
; COMPLETION CODES:
;	R0 = -1 if src1 < src2
;	R0 = 0  if src1 = src2
;	R0 = 1  if src1 > src2 
;
; SIDE EFFECTS:
;	OPCODE RESERVED TO DIGITAL error is possible, see ENVIRONMENT.
;
;--
LIB$$CVT_CMPH_R1 ::
	CMPH	(R0), (R1)
	BEQL	10$
	BLSS	20$
	MNEGL	#1, R0			;src1 > src2
	RSB				;Finished
10$:
	CLRL	R0			;They are equal
	RSB				;Finished
20$:
	MOVL	#-1, R0			;src1 < src2
	RSB				;Finished


.END
