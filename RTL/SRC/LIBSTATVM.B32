MODULE LIB$STAT_VM (				! Gather statistics from LIB$VM
		IDENT = '1-003'			! File: LIBSTATVM.B32
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY: General Library
!
! ABSTRACT:
!
!	This module returns LIB$GET_VM statistics to the user.
!	These are the number of calls to GET and FREE, and the
!	the number of bytes gotten but not yet freed.
!
! ENVIRONMENT: User mode, AST reentrant.
!
! AUTHOR: John Sauter, CREATION DATE: 26-OCT-1979
!
! MODIFIED BY:
!
! 1-001	- Original.  JBS 28-OCT-1979
! 1-002	- Don't use LIB$SYS_FAO, since it isn't in the sharable library.
!	   JBS 29-OCT-1979
! 1-003	- Correct a comment.  JBS 30-NOV-1979
!--

!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!
!	NONE
!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    LIB$SHOW_VM,				! Show VM statistics as text
    LIB$STAT_VM;				! Show VM statistics in binary

!
! INCLUDE FILES:
!

REQUIRE 'RTLIN:RTLPSECT';			! DECLARE_PSECTS macro

LIBRARY 'RTLSTARLE';				! System symbols

!
! EQUATED SYMBOLS:
!

LITERAL
    K_GET = 1,					! Number of calls to LIB$GET_VM
    K_FREE = 2,					! Number of calls to LIB$FREE_VM
    K_IN_USE = 3,				! Number of bytes in use
    MAX_CODE = 3,				! Max codes for reporting
    K_MAX_STR_LEN = 255;			! Max FAO string length

!
! PSECTS
!
DECLARE_PSECTS (LIB);				! Define psects
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    LIB$PUT_OUTPUT;				! Sends string to SYS$OUTPUT

!+
! The following are the statistics cells maintained by LIB$GET_VM.
!-

EXTERNAL
    LIB$$GL_GETVM_C,				! Number of calls to LIB$GET_VM
    LIB$$GL_FREVM_C,				! Number of calls to LIB$FREE_VM
    LIB$$GL_VMINUSE;				! Number of bytes allocated but not freed

!+
! The following are the error codes used in this module.
!-

EXTERNAL LITERAL
    LIB$_INVARG;				! Invalid argument error condition


GLOBAL ROUTINE LIB$SHOW_VM (			! Show VM statistics
	CODE, 					! Code for what to show
	ACTION, 				! Action routine to print text
	USERARG					! User argument for action routine
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	LIB$SHOW_VM is used to obtain the accumulated statistics
!	from calls to LIB$GET_VM and LIB$SHOW_VM.  In the default
!	mode, with neither CODE nor ACTION specified in the call, the
!	routine will output to SYS$OUTPUT a line giving the following
!	three items of information:
!
! 999 calls to LIB$GET_VM, 999 calls to LIB$FREE_VM, 999 bytes still allocated
!
!	Optionally, only one of the three statistics can be output to
!	SYS$OUTPUT and/or the line of information can be passed to a
!	user-specified "action routine", for processing different from
!	the default.
!
! CALLING SEQUENCE:
!
!	status.wlc.v = LIB$SHOW_VM ([[[code.rl.r],
!					action.flc.rp], userarg.xx.x])
!
! FORMAL PARAMETERS:
!
!	code	- (Optional) Specifies the particular statistic desired.
!		  If given, it must be one of the following values:
!			1 = Number of calls to LIB$GET_VM
!			2 = Number of calls to LIB$FREE_VM
!			3 = Number of bytes allocated by LIB$GET_VM but not
!			    yet deallocated by LIB$FREE_VM.
!		  If omitted or zero, all three statistics will be returned
!		  on one line.
!
!	action
!	userarg	- (Optional)  These two parameters allow the user to direct
!		  the output of LIB$SHOW_VM somewhere other than SYS$OUTPUT.
!		  If "action" is given, it is the address of a function
!		  procedure to call.  The arguments to this function are
!		  described below.  The function should return either
!		  a success of failure condition value, which will be
!		  returned as the value of LIB$SHOW_VM.
!
!	CALLING SEQUENCE OF ACTION ROUTINE:
!
!		status.wlc.v = (action) (out_string.rt.dx [, userarg.rl.v])
!
!		out_string	- A descriptor of a string
!				  containing the statistics desired.  It
!				  is formatted exactly as it would be if
!				  output to SYS$OUTPUT.  The leading character
!				  is blank.
!
!		userarg		- If "userarg" is passed to LIB$SHOW_VM,
!				  it is passed directly on to the action
!				  routine.  The 32-bit value in LIB$SHOW_VM's
!				  argument list is passed to the action
!				  routine without interpretation.
!
! IMPLICIT INPUTS:
!
!	The statistics cells maintained by LIB$VM.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION CODES:
!
!	SS$_NORMAL	- Successful completion.
!	LIB$_INVARG	- Invalid arguments.  This can be caused by an
!			  invalid value for "code".
!	Other codes as may be returned by LIB$PUT_OUTPUT or the user's
!	action routine.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    BUILTIN
	NULLPARAMETER;

    LOCAL
	STATUS,					! Returned condition values
	TEMPCODE,				! Local value of CODE
	OUT_BUF : VECTOR [K_MAX_STR_LEN, BYTE],	! FAO result string
	OUT_DESC : BLOCK [8, BYTE],		! Output string descriptor
	FAO_DESC : BLOCK [8, BYTE],		! Input string for FAO
	FAO_PRMLIST : VECTOR [3, LONG];		! Input parameter list for FAO

!+
! Set up out_string descriptor
!-
    OUT_DESC [DSC$W_LENGTH] = K_MAX_STR_LEN;
    OUT_DESC [DSC$B_DTYPE] = DSC$K_DTYPE_T;
    OUT_DESC [DSC$B_CLASS] = DSC$K_CLASS_S;
    OUT_DESC [DSC$A_POINTER] = OUT_BUF [0];
!+
! Now "output" the result, depending on the value of CODE.
!-
    FAO_DESC [DSC$B_DTYPE] = DSC$K_DTYPE_T;
    FAO_DESC [DSC$B_CLASS] = DSC$K_CLASS_S;

    IF (NULLPARAMETER (1)) THEN TEMPCODE = 0 ELSE TEMPCODE = ..CODE;

    CASE .TEMPCODE FROM 0 TO MAX_CODE OF
	SET

	[0] : 					! Default case, all three values
	    BEGIN
	    FAO_DESC [DSC$A_POINTER] = UPLIT (BYTE (' !UL calls to LIB$GET_VM,',
		' !UL calls to LIB$FREE_VM, !UL bytes still allocated'));
	    FAO_DESC [DSC$W_LENGTH] = %CHARCOUNT (' !UL calls to LIB$GET_VM,',
		' !UL calls to LIB$FREE_VM, !UL bytes still allocated');
	    FAO_PRMLIST [0] = .LIB$$GL_GETVM_C;
	    FAO_PRMLIST [1] = .LIB$$GL_FREVM_C;
	    FAO_PRMLIST [2] = .LIB$$GL_VMINUSE;
	    STATUS = $FAOL (CTRSTR = FAO_DESC, OUTLEN = OUT_DESC [DSC$W_LENGTH], OUTBUF = OUT_DESC,
		PRMLST = FAO_PRMLIST);
	    END;

	[K_GET] : 				! Calls to LIB$GET_VM only
	    BEGIN
	    FAO_DESC [DSC$A_POINTER] = UPLIT (BYTE (' !UL calls to LIB$GET_VM'));
	    FAO_DESC [DSC$W_LENGTH] = %CHARCOUNT (' !UL calls to LIB$GET_VM');
	    FAO_PRMLIST [0] = .LIB$$GL_GETVM_C;
	    STATUS = $FAOL (CTRSTR = FAO_DESC, OUTLEN = OUT_DESC [DSC$W_LENGTH], OUTBUF = OUT_DESC,
		PRMLST = FAO_PRMLIST);
	    END;

	[K_FREE] : 				! Calls to LIB$FREE_VM only
	    BEGIN
	    FAO_DESC [DSC$A_POINTER] = UPLIT (BYTE (' !UL calls to LIB$FREE_VM'));
	    FAO_DESC [DSC$W_LENGTH] = %CHARCOUNT (' !UL calls to LIB$FREE_VM');
	    FAO_PRMLIST [0] = .LIB$$GL_FREVM_C;
	    STATUS = $FAOL (CTRSTR = FAO_DESC, OUTLEN = OUT_DESC [DSC$W_LENGTH], OUTBUF = OUT_DESC,
		PRMLST = FAO_PRMLIST);
	    END;

	[K_IN_USE] : 				! Number of bytes in use, only
	    BEGIN
	    FAO_DESC [DSC$A_POINTER] = UPLIT (BYTE (' !UL bytes still allocated'));
	    FAO_DESC [DSC$W_LENGTH] = %CHARCOUNT (' !UL bytes still allocated');
	    FAO_PRMLIST [0] = .LIB$$GL_VMINUSE;
	    STATUS = $FAOL (CTRSTR = FAO_DESC, OUTLEN = OUT_DESC [DSC$W_LENGTH], OUTBUF = OUT_DESC,
		PRMLST = FAO_PRMLIST);
	    END;

	[OUTRANGE] :
	    STATUS = LIB$_INVARG;
	TES;

    IF ( NOT .STATUS) THEN RETURN (.STATUS);

    IF (NULLPARAMETER (2))			! "action" not given?
    THEN
	STATUS = LIB$PUT_OUTPUT (OUT_DESC)	! Default to SYS$OUTPUT
    ELSE

	IF (NULLPARAMETER (3))			! "userarg" not given?
	THEN
	    STATUS = (.ACTION) (OUT_DESC)	! Call "action" without "userarg"
	ELSE
	    STATUS = (.ACTION) (OUT_DESC, .USERARG);	! Call "action" with "userarg"

    RETURN (.STATUS);				! Exit
    END;					! End of routine LIB$SHOW_VM


GLOBAL ROUTINE LIB$STAT_VM (			! Fetch LIB$VM statistics
	CODE, 					! Which one to fetch
	VALUE					! Where to put the value
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	LIB$STAT_VM returns to its caller one of three available
!	statistics.  Unlike LIB$SHOW_VM which formats the values
!	for output, LIB$STAT_VM returns the value to a location
!	specified as a parameter.
!
!	Only one of the three statistics can be returned by one call
!	to LIB$STAT_VM.  "code" must be one of the three values
!	described for LIB$SHOW_VM.  A "code" of zero is invalid.
!
! CALLING SEQUENCE:
!
!	status.wlc.v = LIB$STAT_VM (code.rl.r, value.wl.r)
!
! FORMAL PARAMETERS:
!
!	code	- Specifies which statistic is to be returned.  Allowed
!		  values are:
!			1 = Number of calls to LIB$GET_VM
!			2 = Number of calls to LIB$FREE_VM
!			3 = Number of bytes allocated by LIB$GET_VM but
!			    not yet freed by LIB$FREE_VM.
!		  Note that it is invalid to omit "code"  or to give
!		  a "code" of zero.
!
!	value	- The location to store the result.  All values are
!		  longword integers.
!
! IMPLICIT INPUTS:
!
!	The statistics cells maintained by LIB$VM.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION CODES:
!
!	SS$_NORMAL	- Successful completion
!	LIB$_INVARG	- Invalid argument.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    BUILTIN
	NULLPARAMETER;

    LOCAL
	STATUS;					! Returned status condition

!+
! Now return appropriate statistic determined by CODE
!-

    CASE ..CODE FROM 1 TO MAX_CODE OF
	SET

	[K_GET] : 				! Calls to LIB$GET_VM
	    .VALUE = .LIB$$GL_GETVM_C;

	[K_FREE] : 				! Calls to LIB$FREE_VM
	    .VALUE = .LIB$$GL_FREVM_C;

	[K_IN_USE] : 				! Bytes outstanding
	    .VALUE = .LIB$$GL_VMINUSE;

	[OUTRANGE] :
	    RETURN (LIB$_INVARG);
	TES;

    RETURN (SS$_NORMAL);			! Exit
    END;					! End of routine LIB$STAT_VM

END						!End of module LIB$STAT_VM

ELUDOM
