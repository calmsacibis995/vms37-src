MODULE BAS$$CB (				! Push, Pop, Allocate, and deallocate LUB/ISB/RAB
		IDENT = '1-020'			! File: BASCB.B32
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY: BASIC language support library
!
! ABSTRACT:
!
!	This module interfaces to OTS$CCB from BASIC to allocate,
!	deallocate, push and pop the LUB/ISB/RAB data structure, which
!	is central to the I/O system.
!
! ENVIRONMENT: User mode, AST level or not or mixed
!
! AUTHOR:  Thomas N. Hastings, CREATION DATE: 01-June-77
!
! MODIFIED BY:
!
! 	Thomas N. Hastings, 01-June-77: VERSION 01
! 01	-  original
! 0-26	- Set RMS RAB$V_UIF bit TNH 19-SEP-77
! 0-27	- Set RMS RAB$V_TPT bit (truncate on sequential $PUT not at EOF TNH 24-SEP-77
! 0-28	- Use FOR$$SIG_NO_LUB since no LUB.  TNH 24-SEP-77
! 0-30	- Set RAB bits for read-ahead, write-behind, locate mode JMT 21-OCT-77
! 0-31	- Use FOR$K_abcmnoxyz as EXTERNAL LITERALs.  TNH 27-Oct-77
! 0-32	- Made second arg optional.  TNH 9-Nov-77
! 0-33	- Use OTS$_FATINTERR.  TNH 01-Dec-77
! 0-34	- Clear FAB after call to LIB$GET_VM.  TNH 9-Dec-77
! 0-35	- Call FOR$SIG_FATINT.  TNH 30-Dec-77
! 0-36	- Have CB_POP signal FATINT if LUB not active;
!	  Add routine CB_CND_POP to conditionally pop if LUB active,
!	  otherwise NO-OP (OTS exit handler calls this).  JMT 10-Jan-78
! 0-37	- Remove CB_CND_POP; I didn't really want it, anyway...  JMT 11-Jan-78
! 0-37	- Global register CCB.  JMT 8-Apr-78
! 0-39	- Change to STARLET library.  DGP 20-Apr-78
! 0-40	- Change REQUIRE files for VAX system build.  DGP 28-Apr-78
! 0-41	- Change STARLET to RTLSTARLE to avoid conflicts.  DGP 1-May-78
! 0-42	- Make JSB linkage.  TNH 19-May-78
! 0-46	- Use FOR$$GET_VM with new optional 2nd arg.  TNH 21-May-78
! 0-47	- Remove setting ISB to -1.  TNH 30-May-78.
! 0-48	- Add sanity check of data base.  TNH 10-June-78
! 0-49	- Add call to FOR$$SIG_DATCOR.  TNH 10-June-78
! 0-50	- Add FOR$$CB_GET entry for non-shared access to OTS$$A_CUR_LUB. TNH 2-Aug-78
! 0-52	- Fix AST re-entrant timing hole.  TNH 9-Aug-78
! 0-53	- Change file name to FORCB.B32, and change the names of the
!	   REQUIRE files similarly.  JBS 14-NOV-78
! 1-001	- Update version number and copyright notice.  JBS 16-NOV-78
! 1-002	- Change LUB$B_LUN to LUB$W_LUN.  JBS 05-DEC-78
! 1-003	- Change REQUIRE file names from FOR... to OTS...  JBS 07-DEC-78
! 1-004	- Include TNH's version, which uses a bit table to provide
!	   AST re-entrancy.  JBS 11-DEC-78
! 1-005	- Remove REQUIRE of OTSMAC; not needed.  JBS 11-DEC-78
! 1-006	- Add FOR$$CB_NEXT, which gets the next LUN for the CLOSE loop
!	   in FOROPEN.B32.  JBS 11-DEC-78
! 1-007	- Fix coding errors in FOR$$CB_NEXT and make OTS$$AA_LUB_TAB
!	   OWN.  JBS 18-DEC-78
! 1-008	- Change file and module name to OTSCB and add specialized
!	   BASIC entry points.  This is in preparation for recursive
!	   I/O.  JBS 29-DEC-78
! 1-009	- Add BAS$$CB_CLEANUP.  JBS 29-DEC-78
! 1-010 - Add recursive I/O for BASIC.  JBS 08-JAN-1979
! 1-011 - Divide into three files: OTSCCB, BASCB and FORCB.  This file,
!	   BASCB, retains the BASIC code.  JBS 09-JAN-1979
! 1-012	- Change ISB$B_STTM_STAT to ISB$W_STTM_STAT.  JBS 20-JAN-1979
! 1-013	- Don't clear ISB$W_STTM_STAT -- let OTSCCB do it.  JBS 23-JAN-1979
! 1-014	- Change linkage for OTS$PUSH_CCB to JSB_CB_PUSH and for
!	   OTS$POP_CCB to JSB_CB_POP.  JBS 25-JAN-1979
! 1-015	- Put two dollar signs on non-user entry points.  JBS 26-JAN-1979
! 1-016 - Change OTSCCB.REQ to OTSCCBREQ.REQ so as not to conflict with
!	  OTSCCB.B32 at system build time.  SBL 10-May-1979
! 1-017	- Check that the LUN is not owned by a foreign language.
!	   JBS 14-JUL-1979
! 1-018	- Interface to the new organization of FOR$$CB.  JBS 20-AUG-1979
! 1-019	- Fix a bug in BAS$$NEXT_LUN that turned up only with the shared
!	   library.  JBS 22-AUG-1979
! 1-020	- Add BAS$$CB_GET.  JBS 22-AUG-1979
!--

!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!

REQUIRE 'RTLIN:OTSLNK';				! Define LINKAGEs

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    BAS$$CB_PUSH : JSB_CB_PUSH NOVALUE,		! Allocate or find  LUB/ISB/RAB - beg of each I/O statment
    BAS$$CB_POP : JSB_CB_POP NOVALUE,		! Pop LUB/ISB/RAB - end of each I/O statement
    BAS$$CB_GET : JSB_CB_GET NOVALUE,		! Get LUB/ISB/RAB (non-shr code)
    BAS$$NEXT_LUN : NOVALUE;			! Get next BASIC LUN

!
! INCLUDE FILES:
!

REQUIRE 'RTLML:OTSLUB';				! get length of LUB

REQUIRE 'RTLIN:RTLPSECT';			! Define DECLARE_PSECTs macro

REQUIRE 'RTLIN:OTSCCBREQ';			! Define return codes for OTS$$PUSH_CCB

LIBRARY 'RTLSTARLE';				! STARLET library for macros and symbols

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! PSECT DECLARATIONS:
!
DECLARE_PSECTS (BAS);				! declare PSECTs for BAS$ facility
!
! GLOBAL STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    BAS$$STOP : NOVALUE,			! Signal a fatal BASIC error
    BAS$$STOP_IO : NOVALUE,			! Signal a fatal BASIC I/O error
    LIB$STOP : NOVALUE,				! Signal a fatal error
    OTS$$PUSH_CCB : JSB_CB_PUSH,		! Load register CCB
    OTS$$POP_CCB : JSB_CB_POP NOVALUE;		! Done with register CCB

!+
! The following cell is set by OTS$$PUSH_CCB and OTS$$POP_CCB.  It is defined
! here because BAS$$CB_GET returns it.
!-

EXTERNAL
    OTS$$A_CUR_LUB;

!+
! The following bits are used to segregate the logical unit numbers
! between the languages.  BASIC has a bit which, when set, prevents
! any other language from using the LUN.
!-

EXTERNAL
    OTS$$V_LUN_OWNR : BLOCKVECTOR 		!
	[-LUB$K_ILUN_MIN + LUB$K_LUN_MAX + 1, 	!
	    ((LUB$K_LANG_MAX + %BPUNIT)/%BPUNIT), BYTE]	!
	VOLATILE FIELD (OTS$$V_OWNR_FLD);

EXTERNAL LITERAL
    OTS$_INTDATCOR : UNSIGNED (%BPVAL),
    OTS$_FATINTERR : UNSIGNED (%BPVAL);

!+
! The following are the BASIC error codes used in this module.
!-

EXTERNAL LITERAL
    BAS$K_ILLIO_CHA : UNSIGNED (8),		! Illegal I/O channel
    BAS$K_MAXMEMEXC : UNSIGNED (8),		! Maximum memory exceeded
    BAS$K_ILLILLACC : UNSIGNED (8);		! Illegal or illogical access


GLOBAL ROUTINE BAS$$CB_PUSH (			! Allocate or find LUB/ISB/RAB - beg of each I/O statement
	LOGICAL_UNIT, 				! Logical unit no. (by-value)
	LUN_MIN)				! Minimum logical unit number (by-value)
    : JSB_CB_PUSH NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	BAS$$CB_PUSH checks for legal logical UNIT number
!	which varyies depending on whether this is OPEN or
!	default open.  If logical_unit already has
!	a LUB/ISB/RAB allocated, only part of the per I/O statement part
!	of LUB/ISB/RAB is cleared, namely just the status bits in ISB.
!	Otherwise virtual memory is allocated BAS this logical_unit
!	and the entire block is initialized to 0.  Then the allocated address
!	is remembered in OWN table OTS$$A_LUB_TAB indexed by
!	logical_unit.  The RAB is initialized to constants which
!	do not change during execution.
!
!	If an I/O statement on another unit is already in progress,
!	push it down by storing the address
!	in the new current LUB/ISB/RAB.  Finally set GLOBAL OTS$$A_CUR_LUB
!	to the address of the new current LUB/ISB/RAB.
!
! CALLING SEQUENCE:
!
!	JSB BAS$$CB_PUSH (R2=logical_unit.rl.v [, R0=lun_min.rl.v])
!
! FORMAL PARAMETERS:
!
!	LOGICAL_UNIT.rl.v	Value of logical unit for which LUB/ISB/RAB is desired (signed)
!				May be negative for channel 0 and READ
!	LUN_MIN.rl.v		Value of minimum legal logical unit number (signed)
!				Since in a register, must be present.
!
! IMPLICIT INPUTS:
!
!	OTS$$AA_LUB_TAB[logical_unit]	Adr. of LUB/ISB/RAB or 0 for
!					this unit
!
! IMPLICIT OUTPUTS:
!
!	CCB				Base pointer set to adr. of LUB/ISB/RAB BAS logical_unit.
!	OTS$$AA_LUB_TAB[logical_unit]	Adr. of LUB/ISB/RAB BAS logical_unit
!	LUB$W_LUN			signed logical unit number
!	RAB$B_BID
!	RAB$B_BLN
!	RAB$V_UIF			1
!	RAB$V_TPT			1
!	RAB$V_RAH			1
!	RAB$V_WBH			1
!	RAB$V_LOC			1
!
! ROUTINE VALUE:
!
!	None
!
! SIDE EFFECTS:
!
!	Allocates virtual memory if needed.
!	Signals fatal error 46 ("Illegal I/O channel") if LOGICAL_UNIT
!	is out of range, or 126 ("Maximum memory exceeded") if
!	LIB$GET_VM fails.
!--

    BEGIN

    EXTERNAL REGISTER
	CCB : REF BLOCK [, BYTE];

!+
! Check range of logical_unit.  If out of range,
! give error Illegal I/O channel.
!-

    IF ((.LOGICAL_UNIT GTR LUB$K_LUN_MAX) OR (.LOGICAL_UNIT LSS .LUN_MIN)) THEN BAS$$STOP (BAS$K_ILLIO_CHA);

!+
! Make sure we own this LUN
!-
    OTS$$V_LUN_OWNR [.LOGICAL_UNIT - LUB$K_ILUN_MIN, OTS$$V_OWNR_BAS] = 1;

    IF (.OTS$$V_LUN_OWNR [.LOGICAL_UNIT - LUB$K_ILUN_MIN, OTS$$V_OWNR] NEQ OTS$$M_OWNR_BAS)
    THEN
	BEGIN
	OTS$$V_LUN_OWNR [.LOGICAL_UNIT - LUB$K_ILUN_MIN, OTS$$V_OWNR_BAS] = 0;
	BAS$$STOP (BAS$K_ILLILLACC);
	END;

!+
! Call the language-independent routine to fetch the value of CCB
! corresponding to this LUN.  It will allocate space for the CCB
! if required, and push down an active ISB if required.
!-

    CASE OTS$$PUSH_CCB (.LOGICAL_UNIT) FROM OTS$K_PUSH_MIN TO OTS$K_PUSH_MAX OF
	SET

	[OTS$K_PUSH_OK, OTS$K_PUSH_ACT] :
!+
! Register CCB was loaded successfully.
!-
	    BEGIN
!+
! Do the sanity checks on the CCB, since it is not protected from a wild
! user program.
!-

	    IF ((.CCB [LUB$W_LUN] NEQ .LOGICAL_UNIT) OR (.CCB [RAB$B_BID] NEQU RAB$C_BID))
	    THEN
		BEGIN
		LIB$STOP (OTS$_INTDATCOR);
		RETURN;
		END;

	    END;

	[OTS$K_PUSH_FAIL] :
!+
! The attempt to get space for the LUB/ISB/RAB failed.  Signal an
! "out of storage" error.
!-
	    BEGIN
	    BAS$$STOP (BAS$K_MAXMEMEXC);
	    RETURN;
	    END;

	[OUTRANGE] :
!+
! Something serious has gone wrong with PUSH_CCB.
!-
	    BEGIN
	    LIB$STOP (OTS$_FATINTERR);
	    RETURN;
	    END;
	TES;

!+
! Make sure the LUN is not owned by a foreign language.
!-

    CASE .CCB [LUB$B_LANGUAGE] FROM LUB$K_LANG_MIN TO LUB$K_LANG_MAX OF
	SET

	[LUB$K_LANG_NONE, LUB$K_LANG_BAS] :
	    BEGIN
	    0
	    END;

	[INRANGE, OUTRANGE] :
	    BEGIN
	    BAS$$STOP_IO (BAS$K_ILLILLACC);
	    RETURN;
	    END;
	TES;

!+
! All is OK, return with register CCB loaded.
!-
    RETURN;
    END;					!End of BAS$$CB_PUSH


GLOBAL ROUTINE BAS$$CB_POP 			! Pop current LUB/ISB/RAB - end of I/O statement
    : JSB_CB_POP NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	BAS$$CB_POP pops the curents LUB/ISB/RAB and restores the
!	previous pushed doen LUB/ISB/RAB, if any (usually none).
!	Flags old current LUB/ISB/RAB as no longer having as active I/O statement
!
! CALLING SEQUENCE:
!
!	JSB BAS$$CB_POP ()
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	CCB			Adr. of current LUB/ISB/RAB
!
! IMPLICIT OUTPUTS:
!
!	CCB			Set to 0 (to catch attempt to reference after a pop).
!	LUB$V_IO_ACTIVE		Clear I/O active bit to indicate
!				that this logical unit no longer has
!				an I/O statement in progress
!
! COMPLETION CODES:
! RETURN VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Changes entire I/O system to another logical unit or none at all
!	SIGNAL_STOPs Internal Error if LUN was not active.
!--

    BEGIN

    EXTERNAL REGISTER
	CCB : REF BLOCK [, BYTE];

    LOCAL
	LOGICAL_UNIT;

    LOGICAL_UNIT = .CCB [LUB$W_LUN];
!+
! Flag old current LUB/ISB/RAB as no longer having
! an I/O statement in progress.
! If LUB was not active, then signal OTS$_INTDATCOR (INTERNAL DATA
! CORRUPTED IN RUN-TIME LIBRARY).
!-

    IF ( NOT .CCB [LUB$V_IO_ACTIVE]) THEN LIB$STOP (OTS$_INTDATCOR);

!+
! Pop current LUB/ISB/RAB and restore previous LUB/ISB/RAB to OTS$$A_CUR_LUB
! OWN storage table indexed by logical unit number.
!-
    OTS$$POP_CCB ();
!+
! If register CCB is set to 0, the LUB was deallocated.  In that case, the
! LUN no longer has an owner.
!-

    IF (.CCB EQLA 0) THEN OTS$$V_LUN_OWNR [.LOGICAL_UNIT - LUB$K_ILUN_MIN, OTS$$V_OWNR_BAS] = 0 ELSE CCB = 0;

    RETURN;
    END;					! End of BAS$$CB_POP routine


GLOBAL ROUTINE BAS$$CB_GET 			! GET current LUB/ISB/RAB - called only from non-shared code
    : JSB_CB_GET NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	BAS$$CB_GET gets the curents LUB/ISB/RAB.
!	This routine is only called from non-shared procedures which
!	can't access OTS$$A_CUR_LUB directly.  (Entry vectors for
!	data would mean that the code would have to change when the
!	decision to make a module shared or non-shared is changed.
!	Unless the LINKER got smarter and changed the level of indirection
!	on data references which were vectored.)
!
! CALLING SEQUENCE:
!
!	JSB FOR$$CB_GET ()
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	OTS$$A_CUR_LUB		Adr. of current LUB/ISB/RAB
!
! IMPLICIT OUTPUTS:
!
!	CCB			Set to adr. of current LUB/ISB/RAB.
!
! RETURN VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!--

    BEGIN

    EXTERNAL REGISTER
	CCB : REF BLOCK [, BYTE];

    CCB = .OTS$$A_CUR_LUB;
    RETURN
    END;					! End of BAS$$CB_GET routine


GLOBAL ROUTINE BAS$$NEXT_LUN (			! Get next LUN which might be open
	FLAG, 					! First-time and last-time flag
	LUN					! Logical Unit Number
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	BAS$$NEXT_LUN gets a LUN which might be open.  It is used by
!	the exit handler declared by BASIC OPEN, which must look
!	through all the LUNs and do the DELETE or PRINT handling by
!	calling CLOSE.  (RMS close won't do DELETE or PRINT handling.)
!	This routine scans the table of LUB pointers and returns those
!	which are non-zero.  The caller must use CB_PUSH and CB_POP
!	to obtain control of the LUB.
!
! CALLING SEQUENCE:
!
!	CALL BAS$$NEXT_LUN (FLAG, LUN)
!
! FORMAL PARAMETERS:
!
!	FLAG.mv.r		If 0 on entry, this is the first call
!				and LUN is invalid.  If 1 on entry, LUN
!				is the last LUN processed.  On exit, 0
!				means that there are no more LUNs, and 1
!				means that LUN contains the Logical Unit
!				Number to process.
!	LUN.ml.r		Logical Unit Number, as described above.
!
! IMPLICIT INPUTS:
!
!	OTS$$V_LUN_OWNR		Table of LUN owners
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION CODES:
! RETURN VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!--

    BEGIN
!+
! If this is the first entry, arrange to return the first logical
! unit.
!-

    IF ( NOT ..FLAG)
    THEN
	BEGIN
	(.FLAG)<0, 1> = 1;
	.LUN = LUB$K_ILUN_MIN;
	END
    ELSE
	BEGIN
	.LUN = ..LUN + 1;

	IF (..LUN GTR LUB$K_LUN_MAX)
	THEN
	    BEGIN
	    (.FLAG)<0, 1> = 0;
	    RETURN;
	    END;

	END;

!+
! Now that LUN is valid, search the table of LUBs for one which is
! allocated.  The caller is obliged to check to see if it is open.
!-

    UNTIL (.OTS$$V_LUN_OWNR [..LUN - LUB$K_ILUN_MIN, OTS$$V_OWNR_BAS]) DO
!+
! We wish to skip over this LUB, but we have to return with FLAG false
! if we have exhausted the table.
!-

	IF (..LUN EQL LUB$K_LUN_MAX)
	THEN
	    BEGIN
	    (.FLAG)<0, 1> = 0;
	    RETURN;
	    END
	ELSE
	    .LUN = ..LUN + 1;

!+
! Since we have fallen out of the UNTIL without returning, we must have
! a good LUN.  Return it.
!-
    RETURN;
    END;					! End of BAS$$NEXT_LUN routine

END						!End of module BAS$$CB

ELUDOM
