	.TITLE	MTH$CSINCOS	COMPLEX SINE AND COSINE
	.IDENT	/1-002/		; File: MTHCSINCO.MAR

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;
; FACILITY: MATH LIBRARY
;++
; ABSTRACT:
;	Return the SINE of a complex number
;	Return the COSINE of a complex number
;
;
;--
;
; VERSION: 0
;
; HISTORY:
;
; AUTHOR:
;	Jonathan M. Taylor, 19-JUL-77: Version 0
;
; MODIFIED BY:
;
;
;

	.SBTTL	HISTORY		; Detailed Current Edit History


; Edit History for Version 0 of MTH$CSINCO
;
; 1-001	- Update version number and copyright notice.  The last edit
; 1-002	- Add "_" to the PSECT directive.  JBS 21-DEC-78
;	   number in version 0 was 3.  JBS 16-NOV-78

	.SBTTL	DECLARATIONS

;
; INCLUDE FILES:
;	OERR.MAR

;
; EXTERNAL SYMBOLS:
	.GLOBL	MTH$SIN_R4
	.GLOBL	MTH$COS_R4
	.GLOBL	MTH$EXP_R4

;
; MACROS:
;	NONE

;
; PSECT DECLARATIONS:
	.PSECT	_MTH$CODE	PIC, SHR, LONG, EXE, NOWRT

;
; EQUATED SYMBOLS:
	argadr	=	4	; offset from AP of arg addr

;
; OWN STORAGE:
;	NONE

	.SBTTL	MTH$CSIN - COMPLEX SINE

;++
; FUNCTIONAL DESCRIPTION:
;
;	MTH$CSIN computes the SINE of a COMPLEX number (r, i) as
;
;	result = (SIN(r) * COSH(i), COS(r) * SINH(i))
;
; CALLING SEQUENCE:
;	Sine.wfc.v	= MTH$CSIN(arg.rfc.r)
;
;
; INPUT PARAMETERS:
;	The one input parameter is the address of a COMPLEX number (r, i),
;	where r and i are both single-precision floating point values.
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	Signals:	Reserved Operand if r or i are invalid (-0.0)
;			MTH$_SINSIGLOS if |r| > 2*PI*2**31.
;			Floating Overflow if i > 88.028.
;
;--


	.ENTRY	MTH$CSIN,	^M<R2,R3,R4,R5,R6,R7>
	JSB	WORKER			; R0 = SIN(r)
					; R1 = COS(r)
					; R2 = SINH(i)
					; R3 = COSH(i)
	MULF	R3, R0			; R0 = SIN(r) * COSH(i)
	MULF	R2, R1			; R1 = COS(r) * SINH(i)
	RET

	.SBTTL	MTH$CCOS - COMPLEX COSINE

;++
; FUNCTIONAL DESCRIPTION:
;
;	MTH$CCOS computes the COSINE of COMPLEX number (r, i) as follows:
;
;	result = (COS(r) * COSH(i), -SIN(r) * SINH(-i))
;
; CALLING SEQUENCE:
;	Cosine.wfc.v	= MTH$CCOS (arg.rfc.r)
;
;
; INPUT PARAMETERS:
;	The one input parameter is the address of a COMPLEX number (r, i),
;	where r and i are both single-precision floating point values.
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	Signals:	Reserved Operand if r or i are invalid (-0.0)
;			MTH$_SINSIGLOS if |r| > 2*PI*2**31.
;			Floating Overflow if i > 88.028.
;
;--


	.ENTRY	MTH$CCOS,	^M<R2,R3,R4,R5,R6,R7>
	JSB	WORKER			; R0 = SIN(r)
					; R1 = COS(r)
					; R2 = SINH(i)
					; R3 = COSH(i)
	MULF	R1, R3			; R3 = COS(r) * COSH(i)
	MNEGF	R0, R0			; R0 = -SIN(r)
	MULF3	R0, R2, R1		; R1 = -SIN(r) * SINH(i)
	MOVL	R3, R0			; R0 = COS(r) * COSH(i)
	RET

	.SBTTL	WORKER - do all the work

;+
; Setup error handler
; Compute:
;	R0 = SIN(r)
;	R1 = COS(r)
;	R2 = SINH(i)
;	R3 = COSH(i)
;-

WORKER:
	MTH$FLAG_JACKET			; set up error handler
	MOVL	argadr(AP), R0		; R0 -> (r, i)
	MOVF	4(R0), R0		; R0 = i
	JSB	MTH$EXP_R4		; R0 = EXP(i)
	DIVF3	R0, #1.0, R1		; R1 = EXP(-i)

	SUBF3	R1, R0, R5		; R5 = EXP(i) - EXP(-i)
	MULF	#0.5, R5		; R5 = (EXP(i) - EXP(-i))/2

	ADDF3	R1, R0, R6		; R6 = EXP(i) + EXP(-i)
	MULF	#0.5, R6		; R6 = (EXP(i) + EXP(-i))/2

	MOVF	@argadr(AP), R0		; R0 = r
	JSB	MTH$COS_R4		; R0 = COS(r)
	MOVL	R0, R7			; R7 = COS(r)

	MOVF	@argadr(AP), R0		; R0 = r
	JSB	MTH$SIN_R4		; R0 = SIN(r)

	MOVL	R7, R1			; R1 = COS(r)
	MOVL	R5, R2			; R2 = SINH(i)
	MOVL	R6, R3			; R3 = COSH(i)

	RSB



	.END
