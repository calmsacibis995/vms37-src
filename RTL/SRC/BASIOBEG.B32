MODULE BAS$IO_BEG (				! BASIC READ/WRITE statement initialization user calls
		IDENT = '1-054' 		! File: BASIOBEG.B32 Edit:PL1054
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY: BASIC + 2 Support LIbrary - User callable
!
! ABSTRACT:
!
!	This module (plus BAS$IO_ELM and BAS$IO_END modules)
!	implements BASIC READ/WRITE (INPUT
!	and PRINT) statements at the user program interface level
!	of abstraction. (UPI = first level). To implement
!	a single I/O statement a user program calls one of the
!	initialization routines in this module followed by zero
!	or more calls to be BAS$IO_ELM module and terminated by a
!	call to the BAS$IO_END module. This module also defines the
!	vectors for the 2nd and 3rd levels of abstraction (used
!	data formatters (UDF) and record processors (REC).
!
! ENVIRONMENT: User access mode; mixture of AST level or not.
!
! AUTHOR: Donald G. Petersen, CREATION DATE: 14-Mar-78: Version 01
!
! MODIFIED BY:
!
! 0-37	- Don't set the record number into LOG_RECNO until after OPEN,
!	  since OPEN sets it to 1.  JMT 27-Jan-78
!	Donald G. Petersen, 14-Mar-78 : VERSION 1-01
! 01	- original
! 02	- debug.  DGP 06-Jun-78 1430
! 03	- change dispatch tables to OWN storage.  DGP 06-Jun-78 1530
! 1-04	- Make PRINT and INPUT logical unit Nos. -1 & -2. DGP 07-Jun-78
! 1-05	- change to JSB linkages.  DGP 14-Nov-78
! 1-06	- Change names of require files.  DGP 28-Nov-78
! 1-007	- Add device names to REQUIRE files and update copyright
!	   notice.  JBS 29-NOV-78
! 1-008 - Change call to OPEN_DEFLT.  Remove FORMATTED arg.  DGP 04-Dec-78
! 1-009 - Change require of BASOPN to FOROPN.  DGP 05-Dec-78
! 1-010	- Change REQUIRE file names from FOR... to OTS...  JBS 06-DEC-78
! 1-011 - Change the statement types passed by the UPI to conform with new
!	  names.  DGP 07-Dec-78
! 1-012 - Change statement types to ISB prefix.  DGP 08-Dec-78
! 1-013 - Add READ.  DGP 12-Dec-78
! 1-014 - Modify whole module to eliminate primitive BLISS argument passing
!	  techniques.  DGP 13-Dec-78
! 1-015 - Add some more stuff for READ.  DGP 19-Dec-78
! 1-016 - Change call to CB_PUSH to pass ILUN_MIN instead of DLUN_MIN. DGP
!	  21-Dec-78
! 1-017	- Change call to FOR$$CB_PUSH to call BAS$$CB_PUSH.  JBS 29-DEC-78
! 1-018 - Change ISB$A_BUF_PTR, BUF_BEG, BUF_END to LUB.  DGP 05-Jan-79
! 1-019 - Remove REQUIRE of BASPAR--not needed.  JBS 10-JAN-1979
! 1-020 - Bug fix to signal I/O channel not open logic. DGP 10-Jan-79
! 1-021 - Add code to BAS$INPUT to handle prompting and 'dirty' Print buffers
!	  in recursive I/O situations.  DGP 13-Jan-79
! 1-022 - Fix bug in buddy pointer handling.  DGP 19-Jan-79
! 1-023 - Reset Print buffer pointer to BUF_BEG if contents are transferred
!	  to the Prompt buffer.  DGP 24-Jan-79
! 1-024	- Clear ISB$W_FMT_LEN, so IO_END will not try to deallocate
!	   a supposed object-time format.  JBS 12-MAR-1979
! 1-025 - Fix a bug in BUDDY_PTR assignment on non-zero channels.  DGP 05-Apr-79
! 1-026 - A check is made for a terminal device before doing Prompt business.
!	  DGP 06-Apr-79
! 1-027	- Use BAS$$OPEN_ZERO to open channel 0 instead of calling
!	   BAS$$OPEN_DEFLT twice.  JBS 17-APR-1979
! 1-028	- Store address of start of I/O list in ISB$A_RESTARTPC so
!	   that I/O statements can be restarted.  JBS 07-MAY-1979
! 1-029 - Add Basic PRINT USING.  DGP 14-May-79
! 1-030 - Make a few more changes for PRINT USING.  DGP 21-May-79
! 1-031	- Correct a typo in PRINT USING that made all I/O
!	   statements fail.  JBS 22-MAY-1979
! 1-032 - Initialize ISB$W_LEN_REM.  DGP 22-May-79
! 1-033 - Add MAT PRINT.  DGP 15-Jun-79
! 1-034	- Use language-specific dispatch tables.  JBS 26-JUN-1979
! 1-035	- Check the language byte in the LUB to verify that
!	   the file was opened by BASIC.  JBS 30-JUN-1979
! 1-036	- Use ISB symbols for dispatching.  JBS 12-JUL-1979
! 1-037 - Add BAS$MAT_READ, BAS$MAT_LINPUT.  DGP 13-Jul-79
! 1-038	- Remove edit 035: the language check is now being done
!	   in BAS$$CB.  JBS 14-JUL-1979
! 1-039	- Store caller's FP in the ISB, so we can call BAS$$CB_POP
!	   after an I/O error (from BAS$$UNWIND), and do not depend
!	   on inheriting R11.  JBS 24-JUL-1979
! 1-040	- Change call to BAS$$OPEN_ZERO.  JBS 26-JUL-1979
! 1-041	- Remove the reference to BAS$$SIGDIS_ERR.  JBS 01-AUG-1979
! 1-042 - Dirty buffer check now checks for Print Using as well as Print
!	  DGP 01-Aug-79
! 1-043	- These I/O statements are allowed only on terminal format and
!	   sequential files.  JBS 01-AUG-1979
! 1-044	- Improve edit 043 by testing LUB$V_NOTSEQORG.  JBS 08-JUL-1979
! 1-045 - MAT_PRINT now passes unit number by value.  DGP 06-Sep-79
! 1-046 - Check for VIRTUAL usage.  Set BLOCK usage.  PRINT and others like
!	  it check for READONLY.  DGP 13-Sep-79
! 1-047 - Use the proper statement types for MAT READ and MAT LINPUT.
!	  DGP 10-Oct-79
! 1-048 - Stuff the scale factor into the ISB.  DGP  15-Nov-79
! 1-049 - Use new name ISB$B_SCA_FAC_D.  DGP 26-Nov-79
! 1-050 - Both Input and Print only store the -6 to 0 scale factor in the
!	  ISB.  DGP 28-Nov-79
! 1-051 - Clear the print format character flag if moving it into the prompt
!	  buffer.  DGP 10-Dec-79
! 1-052 - Clear RAB$B_PSZ and LUB$L_PRINT_POS in BAS$$IO_BEG to cure the problem of
!	  concatenating to the prompt buffer the same prompt in case of 
!	  ^C trapping and resume to that input statement.
!	  At the same time we have taken out the
!	  statement in PUSH_ACTIVE routine that clears this byte to keep
!	  the locality consistent. FM 4-SEP-1980
! 1-053 - Check for negative channel numbers passed from compiled code in every
!	  routine except BAS$MAT_READ and BAS$_READ, if found signal ILLIO_CHA.
!	  FM 9-SEP-1980
! 1-054 - Cursor position is not updated properly on INPUT if the previous
!         PRINT terminator was a semicolon or comma.  PLL 7-May-81
!--

!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES
!

REQUIRE 'RTLIN:OTSLNK';				! Define all linkages
REQUIRE 'RTLIN:BASLNK';			! Some BASIC specific linkages

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    BAS$MAT_LINPUT : NOVALUE,			! MAT LINPUT
    BAS$MAT_READ : NOVALUE,			! MAT READ
    BAS$MAT_INPUT : NOVALUE,			! MAT INPUT
    BAS$MAT_PRINT : NOVALUE,			! MAT PRINT
    BAS$PRINT_USING : NOVALUE,			! PRINT USING
    BAS$READ : NOVALUE,				! READ data
    BAS$LINPUT : NOVALUE,			! READ (LINPUT)
    BAS$INPUT_LINE : NOVALUE,			! READ (INPUT LINE)
    BAS$INPUT : NOVALUE,			! READ sequential list-directed
    BAS$PRINT : NOVALUE,			! WRITE sequential list-directed
    BAS$$IO_BEG : NOVALUE;			! Common routine for all I/O statements

!
! INCLUDE FILES:
!

REQUIRE 'RTLML:OTSLUB';				! logical unit block (LUB) offsets

REQUIRE 'RTLML:OTSISB';				! I/O statement block (ISB) offsets

REQUIRE 'RTLIN:OTSMAC';				! Macros

REQUIRE 'RTLIN:RTLPSECT';			! Define DECLARE_PSECTS macro

REQUIRE 'RTLIN:BASFRAME';			! BASIC frame structure

LIBRARY 'RTLSTARLE';				! STARLET macros and symbols

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! PSECT DECLARATIONS:
!
DECLARE_PSECTS (BAS);
!
! OWN STORAGE:
!A
!	NONE
!
!
! EXTERNAL REFERENCES:
!

EXTERNAL LITERAL
    BAS$K_ILLILLACC : UNSIGNED (8),		! Illogical or illegal access
    BAS$K_IO_CHANOT : UNSIGNED (8),		! I/O channel not open
    BAS$K_TERFORFIL : UNSIGNED (8),		! Terminal format file required
    BAS$K_ILLIO_CHA : UNSIGNED (8);		! Illegal I/O channel

EXTERNAL ROUTINE
    BAS$$SCALE_L_R1 : BAS$SCALE_JSB,		! Fetch the scale factor
    BAS$$SCALE_R1 : BAS$SCALE_JSB,		! Fetch a scale factor
    BAS$$CB_PUSH : JSB_CB_PUSH NOVALUE,		! Load register CCB
    BAS$$CB_POP : JSB_CB_POP NOVALUE,		! Done with register CCB
    BAS$$STOP_IO : NOVALUE,			! Signal a fatal BASIC I/O error
    BAS$$OPEN_ZERO : NOVALUE,			! Open channel zero.
    BAS$$STOP : NOVALUE;			! Signal a fatal error.

!+
! User data formatter level of abstraction (UDF is 2nd level)
!-

EXTERNAL
    BAS$$AA_UDF_PR0 : VECTOR;			! Dispatch table for UDF level

!+
! This value, if in 0(FP), marks the frame as a BASIC frame.
!-

EXTERNAL
    BAS$HANDLER;


GLOBAL ROUTINE BAS$LINPUT (			! READ sequential list-directed
	UNIT					! logical unit
    ) : NOVALUE =

!++
! ABSTRACT:
!
!	Initialize the BASIC I/O system to perform
!	a READ sequential list-directed.
!
! FORMAL PARAMETERS:
!
!	UNIT.rl.v	logical unit number
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	LUB/ISB/RAB control blocks allocated and file
!	opened if not already. SIGNAL_STOPs many errors.
!--

    BEGIN

    BUILTIN
	FP;

    LOCAL
	FMP : REF BLOCK [, BYTE];

    FMP = .FP;
!+
! If channel number is less than zero then it is an illegal channel.
!-
    IF ( .UNIT LSS 0 ) THEN BAS$$STOP(BAS$K_ILLIO_CHA);

!+
! Perform default OPEN if UNIT not already opened.
! Check for  improper mixing of I/O statements. SIGNAL_STOP
! any errors.  Store I/O statement type code. Call
! UDF level initialization.
!-
    BAS$$IO_BEG (ISB$K_ST_TY_LIN, (IF (.UNIT EQL 0) THEN LUB$K_LUN_INPU ELSE .UNIT), .FMP [SF$L_SAVE_FP],
	.FMP [SF$L_SAVE_PC]);
    END;


GLOBAL ROUTINE BAS$MAT_LINPUT (			! READ sequential list-directed
	UNIT					! logical unit
    ) : NOVALUE =

!++
! ABSTRACT:
!
!	Initialize the BASIC I/O system to perform
!	a READ sequential list-directed.
!
! FORMAL PARAMETERS:
!
!	UNIT.rl.v	logical unit number
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	LUB/ISB/RAB control blocks allocated and file
!	opened if not already. SIGNAL_STOPs many errors.
!--

    BEGIN

    BUILTIN
	FP;

    LOCAL
	FMP : REF BLOCK [, BYTE];

    FMP = .FP;
!+
! If channel number is less than zero then it is an illegal channel.
!-
    IF ( .UNIT LSS 0 ) THEN BAS$$STOP(BAS$K_ILLIO_CHA);

!+
! Perform default OPEN if UNIT not already opened.
! Check for  improper mixing of I/O statements. SIGNAL_STOP
! any errors.  Store I/O statement type code. Call
! UDF level initialization.
!-
    BAS$$IO_BEG (ISB$K_ST_TY_MLI, (IF (.UNIT EQL 0) THEN LUB$K_LUN_INPU ELSE .UNIT), .FMP [SF$L_SAVE_FP],
	.FMP [SF$L_SAVE_PC]);
    END;


GLOBAL ROUTINE BAS$READ 			! READ
    : NOVALUE =

!++
! ABSTRACT:
!
!	Initialize the BASIC I/O system to perform
!	a READ of a compile time initialized DATA area.
!
! FORMAL PAREMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	R11.rl.v		pointer to most recent Basic major frame
!
! IMPLICIT OUTPUTS:
!
!	ISB$L_MAJ_F_PTR		Basic major frame pointer
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	LUB/ISB/RAB control blocks allocated and file
!	opened if not already.
!--

    BEGIN

    BUILTIN
	FP;

    LOCAL
	FMP : REF BLOCK [, BYTE];

    FMP = .FP;
!+
! Perform default OPEN if UNIT not already opened.
! Check for  improper mixing of I/O statements. SIGNAL_STOP
! any errors.  Store I/O statement type code. Call
! UDF level initialization.
!-
    BAS$$IO_BEG (ISB$K_ST_TY_REA, LUB$K_LUN_BREAD, .FMP [SF$L_SAVE_FP], .FMP [SF$L_SAVE_PC]);
    END;


GLOBAL ROUTINE BAS$MAT_READ 			! MAT READ
    : NOVALUE =

!++
! ABSTRACT:
!
!	Initialize the BASIC I/O system to perform
!	a READ of a compile time initialized DATA area.
!
! FORMAL PAREMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	R11.rl.v		pointer to most recent Basic major frame
!
! IMPLICIT OUTPUTS:
!
!	ISB$L_MAJ_F_PTR		Basic major frame pointer
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	LUB/ISB/RAB control blocks allocated and file
!	opened if not already.
!--

    BEGIN

    BUILTIN
	FP;

    LOCAL
	FMP : REF BLOCK [, BYTE];

    FMP = .FP;
!+
! Perform default OPEN if UNIT not already opened.
! Check for  improper mixing of I/O statements. SIGNAL_STOP
! any errors.  Store I/O statement type code. Call
! UDF level initialization.
!-
    BAS$$IO_BEG (ISB$K_ST_TY_MRE, LUB$K_LUN_BREAD, .FMP [SF$L_SAVE_FP], .FMP [SF$L_SAVE_PC]);
    END;			! end of BAS$MAT_READ


GLOBAL ROUTINE BAS$INPUT_LINE (			! READ sequential list-directed
	UNIT					! logical unit
    ) : NOVALUE =

!++
! ABSTRACT:
!
!	Initialize the BASIC I/O system to perform
!	a READ sequential list-directed.
!
! FORMAL PAREMETERS:
!
!	UNIT.rl.v	logical unit number
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	LUB/ISB/RAB control blocks allocated and file
!	opened if not already. SIGNAL_STOPs many errors.
!--

    BEGIN

    BUILTIN
	FP;

    LOCAL
	FMP : REF BLOCK [, BYTE];

    FMP = .FP;
!+
! If channel number is less than zero then it is an illegal channel.
!-
    IF ( .UNIT LSS 0 ) THEN BAS$$STOP(BAS$K_ILLIO_CHA);

!+
! Perform default OPEN if UNIT not already opened.
! Check for  improper mixing of I/O statements. SIGNAL_STOP
! any errors.  Store I/O statement type code. Call
! UDF level initialization.
!-
    BAS$$IO_BEG (ISB$K_ST_TY_INL, (IF (.UNIT EQL 0) THEN LUB$K_LUN_INPU ELSE .UNIT), .FMP [SF$L_SAVE_FP],
	.FMP [SF$L_SAVE_PC]);
    END;


GLOBAL ROUTINE BAS$INPUT (			! READ sequential list-directed
	UNIT					! logical unit
    ) : NOVALUE =

!++
! ABSTRACT:
!
!	Initialize the BASIC I/O system to perform
!	a READ sequential list-directed.
!
! FORMAL PAREMETERS:
!
!	UNIT.rl.v	logical unit number
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	LUB/ISB/RAB control blocks allocated and file
!	opened if not already. SIGNAL_STOPs many errors.
!--

    BEGIN

    BUILTIN
	FP;

    LOCAL
	FMP : REF BLOCK [, BYTE];

    FMP = .FP;
!+
! If channel number is less than zero then it is an illegal channel.
!-
    IF ( .UNIT LSS 0 ) THEN BAS$$STOP(BAS$K_ILLIO_CHA);

!+
! Perform default OPEN if UNIT not already opened.
! Check for  improper mixing of I/O statements. SIGNAL_STOP
! any errors.  Store I/O statement type code. Call
! UDF level initialization.
! If the unit number is 0, then change it.
!-
    BAS$$IO_BEG (ISB$K_ST_TY_INP, (IF (.UNIT EQL 0) THEN LUB$K_LUN_INPU ELSE .UNIT), .FMP [SF$L_SAVE_FP],
	.FMP [SF$L_SAVE_PC]);
    END;


GLOBAL ROUTINE BAS$MAT_INPUT (			! MAT INPUT
	UNIT					! logical unit
    ) : NOVALUE =

!++
! ABSTRACT:
!
!	Initialize the BASIC I/O system to perform
!	the input of an array.  The array is named in the element transmitter.
!
! FORMAL PAREMETERS:
!
!	UNIT.rl.v	logical unit number
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	LUB/ISB/RAB control blocks allocated and file
!	opened if not already. SIGNAL_STOPs many errors.
!--

    BEGIN

    BUILTIN
	FP;

    LOCAL
	FMP : REF BLOCK [, BYTE];

    FMP = .FP;
!+
! If channel number is less than zero then it is an illegal channel.
!-
    IF ( .UNIT LSS 0 ) THEN BAS$$STOP(BAS$K_ILLIO_CHA);

!+
! Perform default OPEN if UNIT not already opened.
! Check for  improper mixing of I/O statements. SIGNAL_STOP
! any errors.  Store I/O statement type code. Call
! UDF level initialization.
! If the unit number is 0, then change it.
!-
    BAS$$IO_BEG (ISB$K_ST_TY_MIN, (IF (.UNIT EQL 0) THEN LUB$K_LUN_INPU ELSE .UNIT), .FMP [SF$L_SAVE_FP],
	.FMP [SF$L_SAVE_PC]);
    END;					! End of BAS$MAT_INPUT


GLOBAL ROUTINE BAS$PRINT (			! WRITE sequential list-directed
	UNIT					! logical unit
    ) : NOVALUE =

!++
! ABSTRACT:
!
!	Initialize the BASIC I/O system to perform
!	a PRINT sequential list-directed.
!
! FORMAL PAREMETERS:
!
!	UNIT.rl.v	logical unit number
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	LUB/ISB/RAB control blocks allocated and file
!	opened if not already. SIGNAL_STOPs many errors
!--

    BEGIN

    BUILTIN
	FP;

    LOCAL
	FMP : REF BLOCK [, BYTE];

    FMP = .FP;
!+
! If channel number is less than zero then it is an illegal channel.
!-
    IF ( .UNIT LSS 0 ) THEN BAS$$STOP(BAS$K_ILLIO_CHA);

    BAS$$IO_BEG (ISB$K_ST_TY_PRI, (IF (.UNIT EQL 0) THEN LUB$K_LUN_BPRI ELSE .UNIT), .FMP [SF$L_SAVE_FP],
	.FMP [SF$L_SAVE_PC]);
    END;					! End of BAS$PRINT


GLOBAL ROUTINE BAS$MAT_PRINT (			! MAT PRINT
	UNIT, 					! logical unit
	UPPER_BOUND1, 				! No. of columns
	UPPER_BOUND2				! No. of rows
    ) : NOVALUE =

!++
! ABSTRACT:
!
!	Initialize the BASIC I/O system to perform
!	the printing of a matrix
!
! FORMAL PAREMETERS:
!
!	UNIT.rl.v		logical unit number
!	UPPER_BOUND1.rl.v	no. of columns
!	UPPER_BOUND2.rl.v	no. of rows
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	LUB/ISB/RAB control blocks allocated and file
!	opened if not already. SIGNAL_STOPs many errors
!--

    BEGIN

    BUILTIN
	FP;

    LOCAL
	FMP : REF BLOCK [, BYTE];

    FMP = .FP;
!+
! If channel number is less than zero then it is an illegal channel.
!-
    IF ( .UNIT LSS 0 ) THEN BAS$$STOP(BAS$K_ILLIO_CHA);

    BAS$$IO_BEG (ISB$K_ST_TY_MPR, (IF (.UNIT EQL 0) THEN LUB$K_LUN_BPRI ELSE .UNIT), .FMP [SF$L_SAVE_FP],
	.FMP [SF$L_SAVE_PC]);
    END;					! End of BAS$MAT_PRINT


GLOBAL ROUTINE BAS$PRINT_USING (		! WRITE formatted
	UNIT, 					! logical unit
	FORMAT_STRING				! format string
!	CURRENCY,				! currency symbol for this stmt
!	SEPARATOR,				! digit group separator
!	DECIMAL_POINT				! decimal point
    ) : NOVALUE =

!++
! ABSTRACT:
!
!	Initialize the BASIC I/O system to perform
!	a PRINT USING formatted output statement.
!
! FORMAL PAREMETERS:
!
!	UNIT.rl.v	logical unit number
!	FORMAT_STR.rt.dx	format string
!	CURRENCY.rt.dx		optional currency symbol
!	SEPARATOR.rt.dx		optional digit group separator symbol
!	DECIMAL_POINT.rt.dx	optional decimal point symbol
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	LUB/ISB/RAB control blocks allocated and file
!	opened if not already. SIGNAL_STOPs many errors
!--

    BEGIN

    BUILTIN
	ACTUALCOUNT,
	FP;

    LOCAL
	FMP : REF BLOCK [, BYTE];

    FMP = .FP;

!+
! If channel number is less than zero then it is an illegal channel.
!-
    IF ( .UNIT LSS 0 ) THEN BAS$$STOP(BAS$K_ILLIO_CHA);

    !+
    ! Call the routine which will set up the I/O data base and initialize a
    ! few areas
    !-

    BAS$$IO_BEG (ISB$K_ST_TY_PRU, (IF (.UNIT EQL 0) THEN LUB$K_LUN_BPRI ELSE .UNIT), .FMP [SF$L_SAVE_FP],
	.FMP [SF$L_SAVE_PC], .FORMAT_STRING);

    !+
    ! Now set a few Print Using specific areas in the ISB.  These are the currency
    ! symbol, the digit group separator, and the decimal point.
    !-

!    CCB = .OTS$$A_CUR_LUB;
!    CASE .ACTUAL_COUNT() FROM K_NONE TO K_DECIMAL_POINT OF
!    SET
!    [K_NONE, OUTRANGE]:
!	;
!    [K_CURRENCY]:
!	CCB[ISB$] = .CURRENCY;
!    [K_SEPARATOR]:
!	BEGIN
!	CCB[ISB$] = .CURRENCY;
!	CCB[ISB$] = .SEPARATOR;
!	END;
!    [K_DECIMAL_POINT]:
!	BEGIN
!	CCB[ISB$] = .CURRENCY;
!	CCB[ISB$] = .SEPARATOR;
!	CCB[ISB$] = .DECIMAL_POINT;
!	END;
!    TES;
    RETURN;
    END;					! End of routine BAS$PRINT_USING


GLOBAL ROUTINE BAS$$IO_BEG (			! Do common I/O statement initialization
	STTM_TYPE, 				! Statement type - defined in ISB
	UNIT, 					! Unit number (LUN) for this I/O statement
	FMP, 					! User's frame
	RESTART_PC, 				! PC at which to restart I/O list
	FORMAT_STR				! Format string (for PRINT USING)
    ) : NOVALUE =
!+
! FUNCTIONAL DESCRIPTION:
!
!	Common I/O statement initialization:
!
!	1. Setup a LUB/ISB/RAB control block for this logical unit
!	   if not setup already.
!	2. If unit not already OPEN, OPEN it.
!	3. Check for incorrect mixing of I/O statements.
!	4. Initialize values in the LUB/ISB/RAB
!
! FORMAL PARAMETERS:
!
!	STTM_TYPE.rl.v		I/O statement type
!	UNIT.rl.v		logical unit number
!	FMP.ra.v		User's frame pointer, for getting major frame address
!	RESTART_PC.ra.v		Pointer to I/O list code, for restarts.
!	FORMAT_STR.rt.dx	Format string for write formatted
!
! IMPLICIT INPUTS:
!
!	LUB$V_FORCIBLE		Flag indicating a forcible device.
!	LUB$V_FORMATTED		This unit has been specified for
!				formatted I/O by a previous OPEN
!				or default OPEN.
!	LUB$W_LUN		 logical unit number, if unit
!				not already open
!	LUB$V_OPENED		This unit has been opened by a previous
!				OPEN, or default OPEN (for READ/WRITE
!				OR ENDFILE).
!	LUB$V_OUTBUF_DR		Flag to indicate that the output buffer has
!				valid data in it.
!	LUB$V_READ_ONLY		This unit has been specified for
!				performing READs only by the current
!				OPEN or CALL FDBSET.
!	LUB$V_UNFORMAT		This unit has been specified for
!				unformatted I/O by a previous
!				OPEN, DEFINE FILE, or default OPEN.
!
! IMPLICIT OUTPUTS:
!
!	ISB$B_SCALE_FAC		Scale factor in range of -6 -> 0.
!	ISB$B_STTM_TYPE		Statement type.  Used as an index into the UDF
!				level dispatch tables.
!	ISB$V_DE_ENCODE		ENCODE/DECODE being done
!	LUB$A_BUF_PTR		Pointer to next character in buffer.
!	LUB$A_BUF_END		Pointer to end+1 of buffer.
!	LUB$L_LOG_RECNO		Current logical (or spanned)
!				record number for sequential access
!				files (needed for BACKSPACE of spanned
!				records). Current FORTRAN direct
!				access files 1 = first record.
!				0 never stored.
!	ISB$B_ERR_NO		 FORTRAN 0.  Last continuable error during statement
!	LUB$V_IO_ACTIVE		Flag I/O active on this unit.
!	ISB$W_FMT_LEN		If object-time format, no. of char.
!				allocated dynamically.  Needed for deallocation
!	ISB$A_FMT_BEG		If object-time format, Adr. of first
!				char in resultant format array.
!	ISB$A_RESTARTPC		PC at which to restart the I/O list after
!				certain errors.
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Allocates LUB/ISB/RAB if not already allocated for
!	this unit. Opens logical unit if not already open.
!	Pushes down old current LUB/ISB/RAB (if any) and sets
!	OTS$$A_CUR_LUB to new current LUB/ISB/RAB.
!
!	Signals:
!	ILLEGAL OR ILLOGICAL ACCESS
!	NOTE: An assumption is made that a Print statement that ends with a comma
!	or a semicolon and that is followed by an Input statement is actually intended
!	as a prompt.  The major implication is that there is not an error issued
!	for trying to do output in the middle of input from a terminal format file
!	(emphasis on file).  Instead the contents of the Print buffer are thrown
!	away if we are not inputting from a terminal device.
!
!--

    BEGIN

    GLOBAL REGISTER
	CCB = K_CCB_REG : REF BLOCK [, BYTE];

    LITERAL
	K_FORMAT_STR = 5;			! Arg. No. of format string

    BUILTIN
	ACTUALCOUNT;

    MAP
	FMP : REF BLOCK [, BYTE] FIELD (BSF$FCD);

    LOCAL
!+
! Temp CCB for copying the contents of the Print
! buffer into the Prompt buffer if necessary
!-
	TEMP_CCB : REF BLOCK [, BYTE];

!+
! Allocate LUB/ISB/RAB for unit if not already setup
! Push down active I/O.
! Stores new LUB/ISB/RAB address in OTS Common OTS$$A_CUR_LUB.
! If unit number out of range (LUB$K_ILUN_MIN:LUB$K_LUN_MAX)
! SIGNAL BAS$_INVLOGUNI (32='INVALID LOGICAL UNIT NUMBER')
! Store signed unit number in LUB$W_LUN.
!-
    BAS$$CB_PUSH (.UNIT, LUB$K_ILUN_MIN);
!+
! Now that the data base for this logical unit has been found, store off
! the pointer to the most recent Basic major frame in the ISB.
! Also store the restart address.
!-
    CCB [ISB$A_RESTARTPC] = .RESTART_PC;
    CCB [ISB$A_MAJ_F_PTR] =
    BEGIN

    IF (.FMP [BSF$A_HANDLER] EQLA BAS$HANDLER) THEN .FMP [BSF$A_BASE_R11] ELSE 0

    END;
    CCB [ISB$A_USER_FP] = .FMP;
    CCB [ISB$B_STTM_TYPE] = .STTM_TYPE;
!+
! Check for READONLY with an output operation or VIRTUAL usage.  Either error
! signals ILLEGAL OR ILLOGICAL ACCESS.  Set the BLOCK USE bit.
!-
	IF (.CCB [LUB$V_VA_USE] EQL 1)
	 OR (.CCB [LUB$V_READ_ONLY] AND .STTM_TYPE)
	THEN
	    BAS$$STOP_IO(BAS$K_ILLILLACC);
    CCB [LUB$V_BLK_USE] = 1;
!+
! Check to see if there is a format string.
! If there is, store the address away in two places in the ISB.  One copy is used
! by the write formatted routines to keep their place in the format string; the
! other is left pointing at the front of the string in case of reversion.
!-

    IF ACTUALCOUNT () GEQU K_FORMAT_STR
    THEN
	BEGIN

	MAP
	    FORMAT_STR : REF BLOCK [8, BYTE];

	CCB [ISB$A_FMT_PTR] = CCB [ISB$A_FMT_BEG] = .FORMAT_STR [DSC$A_POINTER];
	CCB [ISB$W_LEN_REM] = CCB [ISB$W_FMT_LEN] = .FORMAT_STR [DSC$W_LENGTH];
	END;

    IF (.CCB [LUB$W_LUN] EQL LUB$K_LUN_BREAD)
    THEN
	BEGIN
	CCB [LUB$V_FORMATTED] = 1;
	CCB [ISB$V_DE_ENCODE] = 1;
	END
!+
! If unit not already open and #0 then OPEN it.
! Otherwise, signal an error: UNOPENED FILE.
! Set ACCESS depending on whether this is a sequential or
! direct (.REC_NO > 0) access I/O statement
! Set FORM depending on whether this is a formatted or
! unformatted (.FORMAT_ADR = 0) I/O statement. Set
! TYPE to 'NEW' or 'OLD' depending on whether this is
! a write or read I/O statement. Note: Write statement type
! codes are true, read are false. Any OPEN errors are
! signaled.
!-
    ELSE
	BEGIN
!+
! This is not a READ. Do an open default if not opened and unit 0.
! Then check the opened flag and signal an error if it is not set.
!-

	IF (( NOT .CCB [LUB$V_OPENED]) AND (.UNIT LSS 0))
	THEN
	    BAS$$OPEN_ZERO (.FMP)
	ELSE

	    IF (.UNIT GTR 0)
	    THEN
!+
! Set LUB$A_BUDDY_PTR unconditionally for units > 0
!-
		CCB [LUB$A_BUDDY_PTR] = .CCB;

!+
! If, after all that, the LUB is not open, then either it is not
! channel zero or something went wrong in the OPEN code.  In either
! case, indicate an error.
!-

	IF ( NOT .CCB [LUB$V_OPENED]) THEN BAS$$STOP_IO (BAS$K_IO_CHANOT);

!+
! These I/O statements are permitted only on a terminal format or sequential
! file.
!-

	IF (.CCB [LUB$V_NOTSEQORG]) THEN BAS$$STOP_IO (BAS$K_TERFORFIL);

	END;
!+
! Store off the scale factor.
!-
    CCB [ISB$B_SCALE_FAC] = BAS$$SCALE_L_R1(.FMP);
!+
! Check the Print buffer to see if there is valid data which has not been Put.
! If there is valid data, then move it to the prompt buffer.  This is done
! now rather than at the element transmitter UDF or REC level so that if
! there is a prompt associated with this Input, it will be concatenated to
! the contents of the Print buffer in the correct order.
! We are able to look into LUB$A_BUDDY_PTR with great impugnity and not
! worry about an access violation because if Print is not already opened,
! Print is opened when Input is opened; we cannot get to this point unless Input
! is open.
!-
    TEMP_CCB = (IF (.CCB [LUB$A_BUDDY_PTR] NEQ 0) THEN .CCB [LUB$A_BUDDY_PTR] ELSE .CCB);

!+
! If this is a INPUT or LINPUT or INPUT LINE then clear prompt buffer size
! to prevent concatenation of prompts in case of ^C and resume.
! Also zero print position of buddy unless previous PRINT terminator was 
! a semicolon or comma.
!-
    IF .CCB [ISB$B_STTM_TYPE] EQLU ISB$K_ST_TY_LIN OR
       .CCB [ISB$B_STTM_TYPE] EQLU ISB$K_ST_TY_INP OR
       .CCB [ISB$B_STTM_TYPE] EQLU ISB$K_ST_TY_INL
    THEN 
	BEGIN       
	CCB [RAB$B_PSZ] = 0;
	TEMP_CCB [LUB$L_PRINT_POS] = (IF .TEMP_CCB [LUB$V_FORM_CHAR] EQLU 1
					THEN .TEMP_CCB [LUB$L_PRINT_POS]
					ELSE 0);
	END;

    IF (.TEMP_CCB [LUB$V_OUTBUF_DR]) AND ((.CCB [ISB$B_STTM_TYPE] NEQ ISB$K_ST_TY_PRI) AND (.CCB [
	    ISB$B_STTM_TYPE] NEQ ISB$K_ST_TY_PRU))
    THEN
	BEGIN
!+
! Check to see if this is a terminal device.  The contents of the Print
! buffer are put into the prompt buffer only if this is a terminal device.
! Otherwise, the contents of the Print buffer are thrown away.  Note that
! if we just forced a Print at this point, an error would result because
! we would be attempting to write in the middle of a sequential file.
!-

	IF (.CCB [LUB$V_TERM_DEV])
	THEN
	    BEGIN
!+
! The Print buffer has valid data in it.  Concatenate it to the Prompt
! buffer.  Clear the buffer dirty and format character flags.
! Use OTS$SCOPY instead of CH$COPY
!-
	    CH$COPY ((.TEMP_CCB [LUB$A_BUF_PTR] - .TEMP_CCB [LUB$A_BUF_BEG]), 	! Source element size
		.TEMP_CCB [LUB$A_BUF_BEG], 	! Source address
		' ', 				! Fill character
		(.TEMP_CCB [LUB$A_BUF_PTR] - .TEMP_CCB [LUB$A_BUF_BEG]), 	! Destination element size
		.CCB [RAB$B_PSZ] + .CCB [RAB$L_PBF]);	! Destination address
	    CCB [RAB$B_PSZ] = .CCB [RAB$B_PSZ] + (.TEMP_CCB [LUB$A_BUF_PTR] - .TEMP_CCB [LUB$A_BUF_BEG]);
	    TEMP_CCB [LUB$V_OUTBUF_DR] = 0;
	    TEMP_CCB [LUB$V_FORM_CHAR] = 0;
	    END;

!+
! Reset the Print buffer pointer now that is not 'dirty'.
!-
	TEMP_CCB [LUB$A_BUF_PTR] = .TEMP_CCB [LUB$A_BUF_BEG];
	END;

!+
! Call appropriate User data formatted level of abstraction
! (UDF level = level 2) initialization routine.
!-
    JSB_UDF0 (BAS$$AA_UDF_PR0 + .BAS$$AA_UDF_PR0 [.CCB [ISB$B_STTM_TYPE] - ISB$K_BASSTTYLO + 1]);
    END;					! End of BAS$$IO_BEG routine

END						! End of BAS$IO_BEG module

ELUDOM
