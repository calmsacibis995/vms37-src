	.TITLE	MTH$HEXP	; H Floating Exponential Function
				; (HEXP)
	.IDENT /1-002/		; File: MTHHEXP.MAR	Edit:RNH1002
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;
; FACILITY: MATH LIBRARY
;++
; ABSTRACT:
;
;	MTH$HEXP is a function which returns the H floating point
; exponential of its H floating point argument.  The call is standard
; call-by-reference.
;
;--
;
; VERSION: 1
;
; HISTORY:
; AUTHOR:
;	John A. Wheeler, 08-Aug-79: Version 1
;
; MODIFIED BY:
;
;
;

	.SBTTL	HISTORY	; Detailed Current Edit History

; Edit History for Version 1 of MTH$HEXP
;
; 1-001 - Adapted from MTH$GEXP version 1-002.  JAW 08-Aug-79
; 1-002 - Added large argument logic to prevent lose of significance
;         for arguments with absolute value greater than 2**7.  
;         RNH 24-JUN-81

	.SBTTL	DECLARATIONS		; Declarative Part of Module

;
; INCLUDE FILES:	MTHJACKET.MAR
;
; EXTERNAL SYMBOLS:
;
	.DSABL	GBL			; Declare all EXTRNs explicitly
	.EXTRN	MTH$$SIGNAL		; SIGNAL SEVERE error
	.EXTRN	MTH$$JACKET_TST		; Test to see if called with CALL or 
					; JSB
	.EXTRN	MTH$K_FLOUNDMAT		; Underflow error code
	.EXTRN	MTH$K_FLOOVEMAT		; Overflow error code

; EQUATED SYMBOLS:

	ACMASK	= ^M<IV, R2, R3, R4, R5, R6>	; .ENTRY mask + int ovf enable
	X_16LOG2E =	^X7D12		; Extension for operand in EMODH
;
; MACROS:
;
	$SFDEF				; Define SF$ (stack frame) symbols
;
; PSECT DECLARATIONS:

	.PSECT	_MTH$CODE	PIC,SHR,LONG,EXE,NOWRT
					; Program section for math routines
;
; OWN STORAGE:	none
;
; CONSTANTS:

;
; Table of 2**(I/16) for I = 0 to 15
;

TABHI:	.LONG	^X00004001,^X00000000	; 2**(0/16) =
	.LONG	^X00000000,^X00000000	;  0.1000000000000000000000000000000000E+01
	.LONG	^X0B554001,^X989086CF	; 2**(1/16) =
	.LONG	^X8B92F629,^X42AAB718	;  0.1044273782427413840321966478739929E+01
	.LONG	^X172B4001,^XD51783C7	; 2**(2/16) =
	.LONG	^XF7C8ADCD,^XB14AC50E	;  0.1090507732665257659207010655760707E+01
	.LONG	^X23874001,^X5623A6E7	; 2**(3/16) =
	.LONG	^X1FAD866C,^X5CB6B1C1	;  0.1138788634756691653703830283841511E+01
	.LONG	^X306F4001,^X1B71E0A3	; 2**(4/16) =
	.LONG	^X8D5A52DE,^X5C864630	;  0.1189207115002721066717499970560475E+01
	.LONG	^X3DEA4001,^X234264C1	; 2**(5/16) =
	.LONG	^X4122235B,^XD7743E13	;  0.1241857812073484048593677468726595E+01
	.LONG	^X4BFD4001,^X62A2AD53	; 2**(6/16) =
	.LONG	^X397A71D4,^X2E21FEC4	;  0.1296839554651009665933754117792451E+01
	.LONG	^X5AB04001,^X85427DD4	; 2**(7/16) =
	.LONG	^X9301958C,^XEB345191	;  0.1354255546936892728298014740140702E+01
	.LONG	^X6A094001,^XF3BCE667	; 2**(8/16) =
	.LONG	^XB2FBC908,^XEA951366	;  0.1414213562373095048801688724209697E+01
	.LONG	^X7A114001,^XB018473E	; 2**(9/16) =
	.LONG	^X51026D7D,^XDA1F3F6C	;  0.1476826145939499311386907480374049E+01
	.LONG	^X8ACE4001,^XAA0D5422	; 2**(10/16) =
	.LONG	^X7C55B5BA,^XC9BBA192	;  0.1542210825407940823612291862090734E+01
	.LONG	^X9C494001,^X3F09182A	; 2**(11/16) =
	.LONG	^XC46B01C7,^X2BE6071F	;  0.1610490331949254308179520667357400E+01
	.LONG	^XAE894001,^XAD3AF995	; 2**(12/16) =
	.LONG	^X734DD5E8,^X205A1773	;  0.1681792830507429086062250952466429E+01
	.LONG	^XC1994001,^X5529BDD8	; 2**(13/16) =
	.LONG	^X0CB1C222,^X1BA62A09	;  0.1756252160373299483112160619375313E+01
	.LONG	^XD5814001,^XBA488DCF	; 2**(14/16) =
	.LONG	^XA05A725D,^XE0DDEB66	;  0.1834008086409342463487083189588288E+01
	.LONG	^XEA4A4001,^X490DFA2A	; 2**(15/16) =
	.LONG	^XF73A9858,^XDB3018F5	;  0.1915206561397147293872611270295830E+01

;+
;	Each entry in TABLO gives the difference between the corresponding
;  entry in TABHI and the power of 2 which it approximates, i.e.,
;  TABHI[n] + TABLO[n] = 2**(n/16), to 226 bit accuracy.
;-

TABLO:	.LONG	^X00000000,^X00000000	;  0.000000000000000000000000000000000E+00
	.LONG	^X00000000,^X00000000
	.LONG	^XF26FBF8F,^XDD305BAF	; -9.374520292280427421957567419731049E-35
	.LONG	^X7575C53D,^X64EB15EA
	.LONG	^XE4803F8F,^X7FDFD542	;  9.112493410125022978511686101672356E-35
	.LONG	^XA4FC5D61,^XAF748F09
	.LONG	^XB13FBF8F,^X65BF35EA	; -8.148468844525851137325691767487803E-35
	.LONG	^X86C84825,^X1A8576FE
	.LONG	^X2134BF8D,^XBC9D3D8C	; -1.359830974688816973749875638246305E-35
	.LONG	^XD0E560AF,^X46820E93
	.LONG	^X174DBF8B,^XF6EF1F51	; -3.283170523176998601615065965334027E-36
	.LONG	^XAEEF660E,^X00C20344
	.LONG	^XFC9CBF8D,^XEA6345D1	; -2.391474797689109171622834301602562E-35
	.LONG	^X7D1BA860,^XCEB04EC6
	.LONG	^X76233F8F,^X4A035F20	;  7.036756889073265042421737190671412E-35
	.LONG	^XEF6D81A7,^X8A0C8B2F
	.LONG	^XF4F83F8F,^X05D4EB7B	;  9.422242548621832065692116736394105E-35
	.LONG	^X426749DD,^X642C68BD
	.LONG	^X7BD03F8F,^X5DE5AD9A	;  7.143528991563300614523273615092530E-35
	.LONG	^X7A08814C,^X5F016CD2
	.LONG	^XF3763F8E,^X3999B0F9	;  4.696933478358115495309739213201925E-35
	.LONG	^XA36C8251,^X006E7686
	.LONG	^XC894BF8F,^XF7A386BC	; -8.587318774298247068868655935103793E-35
	.LONG	^XBD2E9E4D,^X33A8A216
	.LONG	^XFEF03F8F,^XD7A9EB99	;  9.609733932128012784507558697141504E-35
	.LONG	^X58B5102C,^XD6D0AE09
	.LONG	^X9E513F8F,^X28D91259	;  7.792430785695864249456461125169745E-35
	.LONG	^X00109849,^XE9F9E5CC
	.LONG	^X5829BF8F,^X98FDD82A	; -6.472995147913347230035214575612342E-35
	.LONG	^X371FE240,^X70BA4139
	.LONG	^XF86D3F8D,^X610CEA20	;  2.371815422825174835691651228302996E-35
	.LONG	^X3EB7EEE1,^X6527BB00


;
; Constants used in evaluation of polynomials - small arguments
;

HXPTB1:	.LONG	^XAE853FD8,^XDEC1F87C	; 7.647630491059372752329451293833116E-13
 	.LONG	^XDC5D98EF,^X4B9443B8
 	.LONG	^X939E3FDC,^X75A10496	; 1.147149241385367053304343571061069E-11
 	.LONG	^X9AF19596,^X25CDBA3D
 	.LONG	^X61243FE0,^XC138612E	; 1.605904380491393922264232745268590E-10
 	.LONG	^X304B573E,^X140EFFAF
 	.LONG	^X1EED3FE4,^X9F318EF4	; 2.087675694046229638056530752087440E-9
 	.LONG	^X3F0F3F4B,^XCD5A1B98
 	.LONG	^XAE643FE7,^X5464567F	; 2.505210838544287614604977125833492E-8
 	.LONG	^X5A7615B2,^XD8953C87
 	.LONG	^X27E43FEB,^X8A08FB77	; 2.755731922398745755905032035036362E-7
 	.LONG	^X1DC546DE,^XB6CF00D8
 	.LONG	^X71DE3FEE,^X6C733A55	; 2.755731922398589062864821927508175E-6
 	.LONG	^X8C8138E3,^XEDA14A28
 	.LONG	^XA01A3FF1,^X1A0101A0	; 2.480158730158730155861058495567987E-5
 	.LONG	^X52309FF7,^XC141B47C
 	.LONG	^XA01A3FF4,^X1A0101A0	; 1.984126984126984126984155002657136E-4
 	.LONG	^X01BBA01A,^X339AD98C
 	.LONG	^X6C163FF7,^X16C1C16C	; 1.388888888888888888888917416932215E-3
 	.LONG	^XC18F6C16,^X431467A7
 	.LONG	^X11113FFA,^X11111111	; 8.333333333333333333333333331592122E-3
 	.LONG	^X11111111,^X68A010FF
 	.LONG	^X55553FFC,^X55555555	; 4.166666666666666666666666665273693E-2
 	.LONG	^X55555555,^X046C5532
 	.LONG	^X55553FFE,^X55555555	; 1.666666666666666666666666666666671E-1
 	.LONG	^X55555555,^X556A5555
 	.LONG	^X00004000,^X00000000	; 5.000000000000000000000000000000025E-1
 	.LONG	^X00000000,^X001B0000
 	.LONG	^X00004001,^X00000000	; 9.999999999999999999999999999999999E-1
 	.LONG	^X00000000,^X00000000
 	.LONG	^X00004001,^X00000000	; 9.999999999999999999999999999999999E-1
 	.LONG	^X00000000,^X00000000
HXPLN1=<.-HXPTB1>/16			; No. of entries in table

;
; Constants used in evaluation of polynomial - regular args
;


HXPTAB:	.LONG	^X314B3F9D,^X16B5D6A9	; 9.407666858107355479744879542837367E-31
 	.LONG	^X8EE63FD3,^XF4E26068
 	.LONG	^X81643FA5,^X0891E189	; 3.040223120834586251881679850732127E-28
 	.LONG	^X1B98895D,^XBB46C345
 	.LONG	^XC3BD3FAD,^XC99F650B	; 9.122813075645084240347638536340806E-26
 	.LONG	^X73EA4FC9,^XAEA0B58F
 	.LONG	^XE8CA3FB5,^X2604C730	; 2.526995938968732070859962578558151E-23
 	.LONG	^X39FFB102,^X913CE0B5
 	.LONG	^XE4CF3FBD,^XB8EF5158	; 6.416404740594923912425006007855017E-21
 	.LONG	^X5C67FBF4,^XD69EAB10
 	.LONG	^XB5253FC5,^X5E803D39	; 1.481106447934839518765528903490102E-18
 	.LONG	^XEA4B0789,^XD71F0E10
 	.LONG	^X62C03FCD,^X5C82223A	; 3.076970295548511084073493860214445E-16
 	.LONG	^X6C873FD7,^X41D8C305
 	.LONG	^XFFCB3FD4,^X8B0CFC58	; 5.682086126528620823749671267689669E-14
 	.LONG	^XFB8F6867,^X0F6A6EB0
 	.LONG	^X43093FDC,^X6C7812F8	; 9.181219573844438764117422957672360E-12
 	.LONG	^XB0A976F4,^X11C865C5
 	.LONG	^X5D873FE3,^XA673FE78	; 1.271587195055813162175391436085248E-9
 	.LONG	^X17F71107,^X1CE5E79C
 	.LONG	^X3B2A3FEA,^XA4E7B6FB	; 1.467610032291942926327372981814470E-7
 	.LONG	^XCBBE729C,^X87FF0B53
 	.LONG	^XC6B03FF0,^X4A0B8D70	; 1.355080777949745604324762299029330E-5
 	.LONG	^X3A76F8B3,^X34F12BB2
 	.LONG	^XEBFB3FF6,^X2C58DFF8	; 9.383847928089871575529346217317675E-4
 	.LONG	^XF16BEA86,^X973606EC
 	.LONG	^X62E43FFC,^XA39E2FEF	; 4.332169878499658183857700759113603E-2
 	.LONG	^X93C7F357,^X07E66730
 	.LONG	^X00000000,^X00000000	; 0.000000000000000000000000000000000E0
 	.LONG	^X00000000,^X00000000
HXPLN=<.-HXPTAB>/16			; No. of entries in table


H_16LOG2_E:				; LOG2(E) * 16
	.LONG	^X71544005,^XB82F7652
	.LONG	^X7D0FE177,^XD23AFDA0

H_LN2_OV_16_HI:
	.OCTA	^X0000673093C7F357A39E2FEF62E43FFC   ; Hi 95 bits of ln2/16

H_LN2_OV_16_LO:
	.OCTA	^X069E16C54C5B933979A157A0F97B3F96   ; Low bits of ln2/16


	.SBTTL	MTH$HEXP - Standard H Floating EXP


;++
; FUNCTIONAL DESCRIPTION:
;
; EXP  - H floating point function
;
; Uses a Chebyshev approximation, with overhang on last step.
;
;
; CALLING SEQUENCE:
;
;	exponential.wh.v = MTH$HEXP(x.rh.r)
;
;		-or-
;
;	CALL MTH$HEXP(exponential.wh.r, x.rh.r)
;
;	Because an H-floating result cannot be expressed in 64 bits, it is
;	returned as the first argument, with the input parameter displaced
;	to the second argument, in accordance with the Procedure Calling
;	Standard.
;
; INPUT PARAMETERS:

	LONG = 4			; Define longword multiplier
	x = 2 * LONG			; Contents of x is the argument

; IMPLICIT INPUTS:	none
;
; OUTPUT PARAMETERS:
;
	exp = 1 * LONG			; Contents of exp is the result

;	VALUE:	H floating exponential of the argument
;
; IMPLICIT OUTPUTS:	none
;
; SIDE EFFECTS:
;
; Signals: MTH$_FLOOVEMAT if X > 11355.83 with reserved operand in R0/R3 
; (copied to the signal mechanism vector CHF$L_MCH_R0/R1 by LIB$SIGNAL).
; Associated message is: "FLOATING OVERFLOW IN MATH LIBRARY". Result is 
; reserved operand -0.0 unless a user supplied (or any) error handler 
; changes CHF$L_MCH_R0/R1.
;	MTH$_FLOUNDMAT if X =< -11356.52 and caller has hardware enable set.
; The result is set to +0.0. Associated message is: "FLOATING UNDERFLOW
; IN MATH LIBRARY"
;
; NOTE: This procedure disables floating point underflow, enable integer
; overflow, causes no floating overflow or other arithmetic traps, and
; preserves enables across the call.
;
;--


	.ENTRY	MTH$HEXP, ACMASK	; Standard call-by-reference entry
					; Disable DV (and FU), enable IV
	MTH$FLAG_JACKET			; Flag that this is a jacket procedure
					; in case of an error in special JSB 
					; routine
	MOVH	@x(AP), R0		; R0/R3 = user's arg
	BSBB	MTH$HEXP_R6		; R0/R3 = special HEXP(R0/R3)
	MOVO	R0, @exp(AP)		; Store result in firat argumen t
	RET				; Return to caller

	.SBTTL	MTH$HEXP_R6 - Special HEXP routine

; Special HEXP - used by the standard, and direct interfaces.
;
; CALLING SEQUENCE:
;	save anything needed in R0:R6
;	MOVH	...,R0			; Input in R0/R3
;	JSB	MTH$HEXP_R6
;	return with result in R0/R3

; Note: This routine is written to avoid causing any integer overflows, 
; floating overflows, or floating underflows or divide by 0 conditions,
; whether enabled or not.
;
; REGISTERS USED:
;	R0/R3 - H-floating argument, then H-floating result


MTH$HEXP_R6::				; Special HEXP routine
;+
;   The  preliminary  test  for overflow works as follows:  First, the sign is
;   taken away, leaving just the biased exponent.  Then,  16384-4  (bias-4) is
;   subtracted, leaving  an  exponent  biased by 4.  This rebiased exponent is
;   compared against 18.  The comparison can have 3 outcomes.  If the rebiased
;   exponent is now negative, this means that the true exponent is < -4 - this
;   is a BLSSU test.  If the rebiased exponent is positive,  but  greater than 
;   18, then  the  actual  value  is  greater  than 16384, which is guaranteed
;   overflow or underflow, depending on the sign of X -  this  is a BLSS test. 
;   Otherwise,  X  is  somewhere in the range for the standard evaluation, and 
;   flow continues.
;
;-
	BICW3	#^X8000, R0, R4		; Preliminary test for over/underflow
					; R4 = exponent bits only
	SUBW3	#^X3FFC, R4, R5		; R5 = 4 + unbiased exponent
	CMPW	#18, R5			; Unsigned compare with 18
	BLSSU	SMTST			; To more tests if LSSU
					;  else, -4 < unbiased exp < 15
					;  no exceptions in EMODH or APPROX

	CMPW	R4, #^X400C		; Check for loss of significance in 
					; EMOD ( |X| >= 2**11)
	BLSS	EVAL			; No loss of significance

;
; |X| >= 2**4.  EMOD will lose significance so the interger and fractional
; parts of X*16/ln2 must be obtained in seperate steps.
;
	MULH3	H_16LOG2_E, R0, -(SP)	; Get integer part of X*16/ln2 in
	CVTHL	(SP), R6		;    R6 (=I+J) as a longword and in
	CVTLH	R6, (SP)		;    (SP) in H format
					; Get fraction part of X*16/ln2 =
	MULH3	H_LN2_OV_16_HI, (SP), -(SP)
	SUBH2	(SP)+, R0		;    16/ln2*[ X - (I+J)*ln2/16 ]
	MULH2	H_LN2_OV_16_LO, (SP)	;    in R0/R1.
	SUBH2	(SP)+, R0		;
	MULH2	H_16LOG2_E, R0		;
	BRB	APPROX			;

EVAL:	EMODH	H_16LOG2_E, #X_16LOG2E, R0, R6, R0
					; Get X*16*LOG2(E) with
					;  integer part in R6 (=16I+J)
					;  fraction in R0/R3

APPROX:	POLYH	R0,#HXPLN-1,HXPTAB	; Use Chebyshev series
					;  with last coefficient 0
					;  so that last ADDH has overhang

	BICL3	#-16, R6, R4		; R4 = J
	MULH2	TABHI[R4], R0		; Else MUL by 2**(J/16)
	ADDH2	TABLO[R4], R0		; Add in LO of 2**(J/16)
	ADDH2	TABHI[R4], R0		; And then HI of 2**(J/16)

	BICL	#15, R6			; R6 = I
	BEQL	20$			; If I=0, then done
	ASHL	#-4, R6, R6		; Position I for addition
	ADDL2	R6, R0			; Add I to exponent.
					; MUL by 2**I by exponent addition
	TSTW	R0			; Test for over/underflow
	BLEQ	EXCEPT			; See what exception is if neg or = 0
20$:	RSB				; Otherwise return result in R0

SMTST:
	BLSS	20$			; Exception if exp+4 > 18
	CMPW	R4, #^X3F8F		; Eliminate underflow from APPROX1
	BLSS	10$			; Bypass if E**ARG = 1

;+
; Use Chebyshev series for small arg
;-

	POLYH	R0,#HXPLN1-1,HXPTB1	;Use Chebyshev series
					;  last term is 1; this will
					;  give desired overhang.
	RSB				; Answer is OK, return

10$:	MOVH	S^#1.0, R0		; E**X is 1.0, store it
	RSB				; And return


;
; Handlers for software detected over/underflow conditions follow
;
20$:	TSTH	R0			; If big ARG > 0 goto OVERFLOW
	BGEQ	OVER
;
; Underflow; if user has FU set, signal error.  Always return 0.0
;
UNDER:
	MOVPSL	R4			; R4 = user's or jacket routine's PSL
	CALLS	#0, G^MTH$$JACKET_TST	; R0 = TRUE if JSB from jacket routine
	BLBC	R0, 10$			; Branch if user did JSB
	MOVZWL	SF$W_SAVE_PSW(FP), R4	; Get user PSL saved by CALL
10$:	CLRQ	R0			; R0 = result. LIB$SIGNAL will save in
					; CHF$L_MCH_R0/R1 so any handler can fixup
	CLRQ	R2			; ...
	BBC	#6, R4, 20$		; Has user enabled floating underflow?
	PUSHL	(SP)			; Yes, return PC from special routine
	MOVZBL	#MTH$K_FLOUNDMAT, -(SP)	; Trap code for hardware floating underflow
					; Convert to MTH$_FLOUNDMAT (32-bit VAX-11 
					; Exception code)
	CALLS	#2, G^MTH$$SIGNAL	; Signal (condition, PC)
20$:	RSB				; Return

EXCEPT:
	TSTL	R6			; Test sign of I; if I < 0
	BLSS	UNDER			; Go to underflow handler
;
; Signal floating overflow, return reserved operand, -0.0
;
OVER:					; Else process for overflow
	PUSHL	(SP)			; Return PC from special routine
	MOVZBL	#MTH$K_FLOOVEMAT, -(SP)	; Hardware floating overflow
	ASHQ	#15, #1, R0		; R0/R3 = result = reserved operand
					; -0.0. R0/0 will be copied to
					; Signal mechanism vector (CHF$L_MCH_R0/R1)
					; So can be fixed up by any error
					; Handler
	CLRQ	R2			; ...
	CALLS	#2, G^MTH$$SIGNAL	; Signal (condition, PC)
	RSB				; Return - R0 restored from CHF$L_MCH_R0/R1


	.END				; End of module MTH$HEXP
