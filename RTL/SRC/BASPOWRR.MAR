	.TITLE	BAS$POWRR		; BASIC real ** real routine
	.IDENT	/1-005/		; File: BASPOWRR.MAR Edit: RNH1005

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY: Basic Support Library
;
; ABSTRACT:
;
;	This module contains entry points to support exponentiation 
;	(** or ^) in BASIC-PLUS-2 for FLOATING ** FLOATING.
;
; ENVIRONMENT: User Mode, AST Reentrant
;
;--
; AUTHOR: R. Will	, CREATION DATE: 22-NOV-78
;
; MODIFIED BY:
;
; R. Will,	 : VERSION 01
; 1-01	- Original 
; 1-02  - Fix comments, change BRW to JMP.  RW 7-Dec-78
; 1-003	- Add "_" to the PSECT directive.  JBS 22-DEC-78
; 1-004	- Redo case analysis for base leq 0 for compatability
;	   with the PDP-11.  JBS 24-APR-1979
; 1-005 - Change shared external references to G^ RNH 25-Sep-81

	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;

;
; EXTERNAL DECLARATIONS:
;
	.DSABL	GBL			; Prevent undeclared
					; symbols from being
					; automatically global.

	.EXTRN	OTS$POWRR		; OTS$ real ** real exponentiation
	.EXTRN	OTS$POWRJ		; OTS$ real ** int exponentation
	.EXTRN	BAS$K_DIVBY_ZER		; Divide by Zero
	.EXTRN	BAS$K_ILLARGLOG		; Illegal argument in LOG
	.EXTRN	BAS$$STOP		; Error reporting routine

;
; MACROS:
;

;
; EQUATED SYMBOLS:
;

;
; OWN STORAGE:
;

;
; PSECT DECLARATIONS:
;
	.PSECT _BAS$CODE PIC, USR, CON, REL, LCL, SHR, -
			EXE, RD, NOWRT, LONG


	.SBTTL	BAS$POWRR  - BASIC floating ** floating 
;++
; FUNCTIONAL DESCRIPTION:
;
;	This routine takes BASE ** EXP, using the following table
;	for unusual cases:
;
;	BASE > 0			Call OTS$POWRR, normal case.
;	BASE = 0, EXP > 0		Return 0.0.
;	BASE = 0, EXP = 0		Return 1.0.
;	BASE = 0, EXP < 0		Error: divide by zero
;	BASE < 0, EXP even integer	Call OTS$POWRJ with -BASE
;	BASE < 0, EXP odd integer	Call OTS$POWRJ with -BASE, negate result
;	BASE < 0, EXP not integer	Error: illegal argument in LOG.
;
; CALLING SEQUENCE:
;
;	CALL result.wf.v = BAS$POWRR (base.rf.v, exponent.rf.v)
;
; INPUT PARAMETERS:
;
	base = 4
	exponent = 8
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; FUNCTION VALUE:
; COMPLETION CODES:
;
;	floating result of exponentiation
;
; SIDE EFFECTS:
;
;	Will signal Divide By Zero or Illegal argument in LOG if its
;	arguments are bad, and OTS$POWRR and OTS$POWRJ may also signal.
;
;--

BAS$POWRR::	.MASK OTS$POWRR		; Entry point
					; Since this routine uses no 
					; registers and usually transfers
					; control to OTS$POWRR, we copy
					; its register save mask and then
					; JMP past its save mask and only
					; save the registers once
	TSTF	base(AP)		; Test base relationship to zero
	BLEQ	1$			; If base leq 0, do case analysis
	JMP	G^OTS$POWRR+2		; Transfer control to the OTS$
					; routine to do exponentiation
;+
; Come here if the base is less than or equal to zero.  We must filter
; several special cases, as described above.
;-
1$:	BEQL	4$			; Branch if base = 0
	EMODF	exponent(AP), #0, #1, R0, R0
	BNEQ	3$			; Branch if exponent is not integer
;+
; The base is less than zero and the exponent is an integer.
; BASIC defines this as working the same way as if an integer was
; in the expression (making a floating variable which happens to
; contain an integer value equivalent to an integer variable).
;-
	CVTFL	exponent(AP), R0	; Convert exponent to integer
	PUSHL	R0			; Save for even/odd test
	PUSHL	R0			; Stack as parameter to OTS$POWRJ
	MNEGF	base(AP), -(SP)		; Stack -base also
	CALLS	#2, G^OTS$POWRJ		; Call integer power routines
	BLBC	(SP)+,2$		; Branch if exponent even
	MNEGF	R0, R0			; Exponent odd, negate the result
2$:	RET				; and return with it.
;+
; Come here if the base is less than zero but the exponent is not
; an integer.  BASIC defines this as an error.
;-
3$:	MOVZBL	#BAS$K_ILLARGLOG, -(SP)	; Illegal Argument in LOG
	CALLS	#1, G^BAS$$STOP		; Never return.
;+
; Come here if the base is equal to zero.  The value we return depends
; upon the sign of the exponent.
;-
4$:	TSTF	exponent(AP)		; Test the exponent against zero
	BLSS	6$			; Branch if exponent lss 0
	BEQL	5$			; Branch if exponent is 0
;+
; Come here if the base is zero and the exponent is greater than zero.
; BASIC defines this as 0.0.
;-
	CLRF	R0			; R0 = 0.0
	RET				; Return to caller
;+
; Come here if the base is zero and the exponent is zero.  BASIC defines
; this as 1.0.
;-
5$:	MOVF	#1, R0			; R0 = 1.0
	RET				; Return to caller.
;+
; Come here if the base is zero and the exponent is less than zero.
; BASIC defines this as an error.
;-
6$:	MOVZBL	#BAS$K_DIVBY_ZER, -(SP)	; Divide by zero
	CALLS	#1, G^BAS$$STOP		; Report error, never return.
;
	.END
