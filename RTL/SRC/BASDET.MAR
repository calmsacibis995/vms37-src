	.TITLE	BAS$DET			; fetch and store DET
	.IDENT	/1-003/			; File: BASDET.MAR	Edit: RW1003

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY: BASIC Language Support
;
; ABSTRACT:
;
; This module has routines to store a double precision value into the OWN
; storage that has the determinant of the last matrix inverted.  The store
; entry point is used by the BASIC initializer to initialize the DET to 0
; and by the matrix inversion routines to store the determinant.  There are
; entry points to retrieve the determinant as either a double value (as it
; is saved) or a floating value which is computed by rounding the double
; value into a floating value.
;
; ENVIRONMENT: User Mode, AST Reentrant
;
;--
; AUTHOR: R. Will, CREATION DATE:  24-Jul-79
;
; MODIFIED BY:
;
;	, : VERSION 1
; 1-001	- Original 
; 1-002	- Correct some typos.  JBS 25-JUL-1979
; 1-003 - Add scaling comments.  RW  31-Dec-1979

	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;

;
; EXTERNAL DECLARATIONS:
;
	.DSABL	GBL				; Prevent undeclared
						; symbols from being
						; automatically global.

;
; MACROS:
;

;
; EQUATED SYMBOLS:
;

;
; OWN STORAGE:
;

	.PSECT _BAS$DATA PIC, USR, CON, REL, LCL, NOSHR, NOEXE, -
			RD, WRT
DET:	.DOUBLE

;
; PSECT DECLARATIONS:
;
	.PSECT _BAS$CODE PIC, USR, CON, REL, LCL, SHR, -
			EXE, RD, NOWRT, LONG


	.SBTTL	BAS$DET_F  -  Fetch the determinant as a floating point value
;++
; FUNCTIONAL DESCRIPTION:
;
;	The determinant is stored as a double.  Convert it to floating and
;	return the value.  NOTE that since double and floating cannot be
;	mixed in a program, the fact that the determinant is being retrieved
;	as a floating number means that the program cannot be in double
;	which means that the program MAY NOT HAVE SCALING!!!.  Therefore
;	no descaling is required before the conversion to floating.
;
; CALLING SEQUENCE:
;
;	CALL BAS$DET_F
;
; INPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; FUNCTION VALUE:
; COMPLETION CODES:
;
;	The rounded floating point value of the OWN storage
;
; SIDE EFFECTS:
;
;	NONE
;
;--

	.ENTRY BAS$DET_F, ^M<>		; Entry point

					; read FUNCTION DESCRIPTION for
					; notes on scaling
	CVTDF	DET, R0			; convert to float
	RET

	.SBTTL	BAS$DET_D  -   Return the double precision value of DET
;++
; FUNCTIONAL DESCRIPTION:
;
;	Return the value in DET
;
; CALLING SEQUENCE:
;
;	CALL BAS$DET_D
;
; INPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; FUNCTION VALUE:
; COMPLETION CODES:
;
;	The double precision value in DET, scaled if scaling is present
;
; SIDE EFFECTS:
;
;	NONE
;
;--

	.ENTRY BAS$DET_D, ^M<>		; Entry point

	MOVD	DET, R0			; get the value
	RET

	.SBTTL	BAS$$STORE_DET	- Put a value into the OWN storage
;++
; FUNCTIONAL DESCRIPTION:
;
;	Store the value passed.
;
; CALLING SEQUENCE:
;
;	CALL BAS$$STORE_DET (determinant_value.rd.r)
;
; INPUT PARAMETERS:
;

	determinant = 4			; determinant must already be scaled
					; if scaling is present

;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; FUNCTION VALUE:
; COMPLETION CODES:
;
;	NONE
;
; SIDE EFFECTS:
;
;	NONE
;
;--

	.ENTRY BAS$$STORE_DET, ^M<>		; Entry point

	MOVD	@determinant(AP), DET		; store the value
	RET

	.END

