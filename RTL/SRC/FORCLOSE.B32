MODULE FOR$CLOSE (				! FORTRAN CLOSE and default CLOSE
		IDENT = '1-019'			! File: FORCLOSE.B32  Edit: DGP1019
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY: FORTRAN Support Library - user callable
!
! ABSTRACT:
!
!	This module closes a file on a specified logical unit
!	(LUN) and deallocates the I/O statement block (ISB) and
!	RMS Record Access Block (RAB) conrol blocks which were
!	allocated by OPEN or default OPEN for this LUN.
!
! ENVIRONMENT: User access level; re-entrant, AST level or not.
!
! AUTHOR:	Thomas N. Hastings, CREATION DATE: 28-Apr-77; Version 01
!
! MODIFIED BY:
!
! Thomas N. Hastings, 28-Apr-77, Version 01
! 01	- original
! 0-13	- unwind cleanup TNH
! 0-14	- set spool bit and FAB$V_DLT, not FAB$V_TMP 17-SEP-77 TNH
! 0-15	- Return success, instead of 0, so ERR= will work.  TNH 27-SEP-77
! 0-15	- Deallocate dynamic record buffer allocated at OPEN.  JMT 19-OCT-77
! 0-17	- Use FOR$K_abcmnoxyz as EXTERNAL LITERALs.  TNH 27-Oct-77
! 0-18	- Add code for CLOSE deletes files.  JMT 5-Nov-77
! 0-19	- Deallocate name block on CLOSE.  JMT 10-Nov-77
! 0-20	- Report any errors from FREE_VM. JMT 10-Nov-77
! 0-21	- Set LUB$A_FAB correctly for error status reporting.  JMT 16-Nov-77
! 0-22	- Call FOR$$SIG_FATINT.  TNH 1-Dec-77
! 0-23	- Make some global refernces addressing_mode (general). JMT 8-Dec-77
! 0-24	- Change CB_POP to CB_RET!  JMT 14-Dec-77
! 0-25	- Change LIB$FREE_VM to FOR$$FREE_VM.  JMT 18-Dec-77
! 0-26	- Put the file close code in a seperate procedure so that
!	  the exit handler can call to close files.  JMT 11-Jan-78
! 0-28	- Global register CCB.  JMT 8-Apr-78
! 0-30	- Change to STARLET library. DGP 20-Apr-78
! 0-31	- Change REQUIRE files for VAX system build.  DGP 28-Apr-78
! 0-32	- Change STARLET to RTLSTARLE to avoid conflicts.  DGP 1-May-78
! 0-33	- Use JSB linkages.  TNH 22-May-78
! 0-34	- Remove EXTERNAL FOR$$SIG_FATINT since not used.  TNH 10-June-78
! 0-35	- Fix close error message bug and PRINT.  TNH 17-June-78
! 0-36	- Fix DELETE.  TNH 17-June-78
! 0-37  - Fix invalid NAM block bug by forcing creation of
!	  NAM block.  SPR 20340  SBL 27-Oct-78
! 0-38	- Change file name for FORCLOSE.B32, and change the names
!	   of the REQUIRE files similarly.  JBS  14-NOV-78
! 1-001	- Update version number and copyright notice.  JBS 16-NOV-78
! 1-002	- Change REQUIRE file names from FOR... to OTS...  JBS 07-DEC-78
! 1-003	- Change prefix of LUN parameters from OPEN$ to LUB$  JBS 08-DEC-78
! 1-004	- Change OTSOPN back to FOROPN.  JBS 13-DEC-78
! 1-005 - Change FOR$$CB_RET back to FOR$$CB_POP.  JBS 08-JAN-1979
! 1-006 - Clear LUB$V_OPENED.  JBS 09-JAN-1979
! 1-007 - Free the prompt buffer, if there is one.  JBS 09-JAN-1979
! 1-008	- Instead of freeing the record buffer, resultant name string
!	   and prompt buffer, just set the DEALLOC bit so they will be
!	   freed when all I/O on the LUN is complete.  JBS 19-JAN-1979
! 1-009	- Split FOR$CLOSE_FILE off into OTS$CLOSE_FILE.  JBS 23-JAN-1979
! 1-010	- Move setting LUB$V_DEALLOC to OTS$CLOSE_FILE so that the
!	   exit handler will deallocate.  JBS 24-JAN-1979
! 1-011	- Use two dollar signs for non-user entry points.  JBS 26-JAN-1979
! 1-012	- When we call FOR$$OPECLO_ARG, tell it we are CLOSE so it won't
!	   try to allocate the logical unit number.  JBS 26-JAN-1979
! 1-013	- Move the LIBRARY RTLSTARLE so that FOROPN can use symbols
!	   in it.  JBS 10-APR-1979
! 1-014 - Add new DISPOSE options.  SBL 19-Apr-1979
! 1-015 - Add IOSTAT.  SBL 27-Apr-1979
! 1-016 - Allow DISP='SUBMIT' and 'PRINT' on READONLY.  Language change
!	  approved by Rich Grove.  SBL 18-Jan-1980
! 1-017	- Move the BUILTIN ACTUALCOUNT into the routine.
!	  The next BLISS compiler will require this.  JBS 20-Aug-1980
! 1-018 - Add DEF_DSC to calling sequence for FOR$$OPECLO_ARG.  JAW
!	  02-Jul-1981
! 1-019 - If there is a FAB still hanging around, deallocate it.  DGP 18-Dec-1981
!--

!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!

REQUIRE 'RTLIN:OTSLNK';				! define all linkages

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    FOR$CLOSE;					! FORTRAN CLOSE statement

!
! INCLUDE FILES:
!

LIBRARY 'RTLSTARLE';				! System symbols

REQUIRE 'RTLML:FORERR';				! FORTRAN error number definitions

REQUIRE 'RTLML:OTSLUB';				! logical unit block definitions

REQUIRE 'RTLIN:OTSMAC';				! macros

REQUIRE 'RTLIN:RTLPSECT';			! Define DECLARE_PSECTS macro

REQUIRE 'RTLIN:FOROPN';				! definitions of OPEN/CLOSE parameters

REQUIRE 'RTLML:FORPAR';				! FORTRAN inter-module paramters

!
! MACROS:
!
!	None
!
! EQUATED SYMBOLS:
!
!	None
!
! PSECT DECLARATIONS:
!
DECLARE_PSECTS (FOR);				! declare PSECTs for FOR$ facility
!
! OWN STORAGE:
!
!	None
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    FOR$$OPECLO_ARG : NOVALUE,			! Get OPEN/CLOSE arguments
    FOR$$SIGNAL_STO : NOVALUE,			! Convert FORTRAN error#
    						! to 32 condition code and SIGNAL_STOP
    FOR$$ERR_OPECLO,				! OPEN/CLOSE error condition handler
    					! resignals or unwinds depending on whether user specified ERR=
    						! (in OPEN module)
    FOR$$CB_PUSH : JSB_CB_PUSH NOVALUE,		! Push down active I/O and allocate
    						! LUB/ISB/RAB if not already for unit.
    FOR$$CB_POP : JSB_CB_RET NOVALUE,		! Pop LUB/ISB/RAB
    						! after popping back previous LUB/ISB/RAB, if any.
    FOR$$FREE_VM : NOVALUE,			! Deallocate FAB
    OTS$$CLOSE_FILE : CALL_CCB;			! Internal file close


GLOBAL ROUTINE FOR$CLOSE (			! FORTRAN CLOSE statement
	KEYWD, 					! keyword code - repeated arguments
	INFO)					! value of keyword (optional)
    = 						! value is TRUE iff successful,
    ! FALSE if error and err= present.

!++
! ABSTRACT:
!
!	Interpret CLOSE statement keywords:
!	attributes specified in the encoded keyword parameters.
!	The keywords are UNIT=, DISPOSE=, and ERR=.
!	DISPOSE= may have one of, 'SAVE', 'PRINT', or 'DELETE' values
!	which overrides the DISPOSE= specification of the OPEN
!	on that LUN.  Call OTS$$CLOSE_FILE to RMS close the file.
!	Flag the logical unit as closed.
!	Deallocate LUB/ISB/RAB for this LUN
!
! FORMAL PARAMETERS:
!
! The following pair is repeated for each user specified keyword:
!	KEYWD.rlu.v	Contains KEY<7:0>, ARGTYPE<15:8>, and
!			possibly INFO<31:16>
!	INFO.rlu.v	Optional informaion if need more
!			than 16 bits.
!
! IMPLICIT INPUTS:
!
!	OTS$$A_CUR_LUB	Current active LUB to be pushed down or 0
!			if no LUB has an I/O statement in progress (usual).
!	LUB$V_OPENED	1 if LUN is opened, 0 if already closed.
!	LUB$W_IFI	RMS internal file id of file on this LUN.
!			Needed as input to $CLOSE.
!	LUB$V_SCRATCH	1 if this is a scratch file.
!	LUB$V_READ_ONLY	1 if this file was specified READONLY in FORTRAN OPEN
!
! IMPLICIT OUTPUTS:
!
!
! COMPLETION STATUS:
!
!	TRUE if success, FALSE if failure and ERR= keyword present
!
! SIDE EFFECTS:
!
!	Deallocates LUB/ISB/RAB
!	SIGNALs or SIGNAL_STOPs the following errors unless
!	ERR= is present.
!	SIGNAL_STOPs  FOR$_CLOERR (28 = 'CLOSE ERROR')
!	SIGNAL_STOPs  FOR$_INCOPECLO (46 = 'INCONSISTENT OPEN/CLOSE
!	STATEMENT SPECIFICATONS')
!--

    BEGIN

    GLOBAL REGISTER
	CCB = 11 : REF BLOCK [, BYTE];

    BUILTIN
	ACTUALCOUNT;

    MAP
!+
! Use of formal argument list as a vector of blocks, each block
! is one longword.
!-
	KEYWD : BLOCKVECTOR [100, 1];

    LOCAL
	L_UNWIND_ACTION : VOLATILE,		! Unwind action code for handler
	CLOS : VOLATILE VECTOR [CLOS$K_KEY_MAX + 1],	! close parameter array
	NAM_DSC : DSC$DESCRIPTOR,		! string desc for ASCIZ
	DEF_DSC : DSC$DESCRIPTOR;		! string desc for ASCIZ

    ENABLE 					! Establish error handler to
	! RESIGNAL or UNWIND if ERR= present
	FOR$$ERR_OPECLO (L_UNWIND_ACTION, CLOS);	! Pass unwind action and

    						! pass CLOS array with  ERR= flag in CLOS[OPEN$K_ERR]
!+
! Set cleanup action on UNWIND to no-operation (since LUB/ISB/RAB
! not pushed down yet)
!-
    L_UNWIND_ACTION = FOR$K_UNWINDNOP;
!+
! Scan user parameter list and copy in sorted order to CLOS
! array.  SIGNAL_STOP FOR$_INVARGFOR (48'=INVALID ARGUMENT TO FORTRAN I/O SYSTEM')
! after scanning all parameters to see if ERR= is present
! and setting CLOS[OPEN$K_ERR] accordingly to 1 or 0
!-
    FOR$$OPECLO_ARG (KEYWD, ACTUALCOUNT (), CLOS, CLOS$K_KEY_MAX, NAM_DSC, DEF_DSC, 0);
!+
! Allocate LUB/ISB/RAB for unit 0:99 if not already setup
! Push down active I/O if on another unit. If unit already has
! active I/O, SIGNAL_STOP FOR$_RECIO_OPE (40 = 'RECURSIVE I/O OPERATION')
! If logical unit outside legal range, SIGNAL_STOP FOR$_INVLOGUNI (32='INVALID LOGICAL UNIT NUMBER')
! Stores new LUB/ISB/RAB address in OTS Common OTS$$A_CUR_LUB
! Finally indicate that UNWIND cleanup action is now to be to
! ret current LUB/ISB/RAB since it has now been sucessfully pushed.
! On return, CCB points to current control block.
!-
    FOR$$CB_PUSH (.CLOS [OPEN$K_UNIT], LUB$K_LUN_MIN);
    L_UNWIND_ACTION = FOR$K_UNWINDRET;
!+
! Check if file already CLOSEd (or not OPEN)
!-

    IF (.CCB [LUB$V_OPENED])
    THEN
	BEGIN
!+
! DISPOSE
!-

	IF .CLOS [OPEN$K_DISPOSE] NEQ 0
	THEN
	    BEGIN

	    !+
	    ! Turn off all dispose bits initially.
	    !-

	    CCB [LUB$V_DELETE] = 0;
	    CCB [LUB$V_PRINT] = 0;
	    CCB [LUB$V_SUBMIT] = 0;

	    SELECT .CLOS [OPEN$K_DISPOSE] OF
		SET

		[OPEN$K_DIS_SAV] :
		    ! DISPOSE = 'SAVE'
		    BEGIN

		    IF .CCB [LUB$V_SCRATCH] THEN FOR$$SIGNAL_STO (FOR$K_INCOPECLO);

		    END;

		[OPEN$K_DIS_DEL, OPEN$K_DIS_PRDE, OPEN$K_DIS_SUDE] :
		    ! DISPOSE = 'DELETE', 'PRINT/DELETE' or 'SUBMIT/DELETE'
		    BEGIN

		    IF .CCB [LUB$V_READ_ONLY] THEN FOR$$SIGNAL_STO (FOR$K_INCOPECLO);

		    CCB [LUB$V_DELETE] = 1;
		    END;

		[OPEN$K_DIS_PRI, OPEN$K_DIS_PRDE] :
		    ! DISPOSE = 'PRINT', 'PRINT/DELETE'
		    BEGIN

		    IF .CCB [LUB$V_SCRATCH] THEN FOR$$SIGNAL_STO (FOR$K_INCOPECLO);

		    CCB [LUB$V_PRINT] = 1;
		    END;

		[OPEN$K_DIS_SUB, OPEN$K_DIS_SUDE] :
		    ! DISPOSE = 'SUBMIT', 'SUBMIT/DELETE'

		    IF .CCB [LUB$V_SCRATCH]
		    THEN
			FOR$$SIGNAL_STO (FOR$K_INCOPECLO)
		    ELSE
			CCB [LUB$V_SUBMIT] = 1;

		[OTHERWISE] :
		    FOR$$SIGNAL_STO (FOR$K_INVARGFOR);
		TES;

	    END;

!+
! Call procedure OTS$$CLOSE_FILE to RMS close the file.
!-

	IF ( NOT OTS$$CLOSE_FILE ()) THEN FOR$$SIGNAL_STO (FOR$K_CLOERR);

	END
    ELSE
!+
! If there is a FAB, then a CALL ASSIGN, CALL FDBSET, or a DEFINEFILE was done
! without an OPEN.  Deallocate the FAB and set LUB$V_DEALLOC so FOR$$CB_POP
! will deallocate the rest of the LUN.
!-
	BEGIN
	IF .CCB [LUB$A_FAB] NEQA 0
	THEN
	    BEGIN
	    FOR$$FREE_VM(FAB$C_BLN, .CCB [LUB$A_FAB]);
	    CCB [LUB$A_FAB] = 0;
	    CCB [LUB$V_DEALLOC] = 0;
	    END
	END;
!+
! Pop back previous LUB or indicate that no I/O statement
! is currently active (OTS$$A_CUR_LUB = 0).
! In the latter case the deallocation will be performed right away.
!-
    FOR$$CB_POP ();

    !+
    !  Store success IOSTAT.  If there was an error, the handler would
    !  do the store.
    !-

    IF .CLOS [OPEN$K_IOSTAT] NEQ 0
    THEN

	IF .CLOS [OPEN$K_IOSTAT_L]
	THEN
	    .CLOS [OPEN$K_IOSTAT] = 0
	ELSE
	    BEGIN

	    LOCAL
		IOSTAT : REF BLOCK [, BYTE];

	    IOSTAT = .CLOS [OPEN$K_IOSTAT];
	    IOSTAT [0, 0, 16, 0] = 0;		! Store one word
	    END;

    RETURN SS$_NORMAL;				! RETURN success from FOR$CLOSE
    END;					! END of FOR$CLOSE routine

END						! END of FOR$CLOSE module

ELUDOM
