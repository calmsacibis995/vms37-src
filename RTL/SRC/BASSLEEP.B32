MODULE BAS$SLEEP (				! Sleep for a while
		IDENT = '3-002'			! File: BASSLEEP.B32, Edit: FM3002
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  VAX-11 BASIC Miscellaneous I/O
!
! ABSTRACT:
!
!	This module contains the BASIC SLEEP function.
!
! ENVIRONMENT:  VAX-11 User Mode
!
! AUTHOR: John Sauter, CREATION DATE: 19-APR-1979, REWRITTEN: 11-JUN-1980
!	  REWRITTEN by Farokh Morshed 18-NOV-81.
!
! MODIFIED BY:
!
! 2-001	- Rewrite this routine to use $QIO instead of RMS' read-with
!	   -timeout.  The previous version was 1-005.  JBS 11-JUN-1980
! 2-002	- Designate this version 2-002 to keep version numbers consistent
!	   since it is the "enhancement" version of BAS$SLEEP.  JBS 12-JUN-1980
! 3-001 - To implement type-ahead recovery, and SYS$INPUT translation using
!	  $PARSE, This module was rewritten.  Farokh Morshed 18-NOV-81.
! 3-002 - Get rid of all $TRNLOG code since system serivices do that now.
!		FM 14-DEC-81.
!--

!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!
!	NONE
!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    BAS$SLEEP : NOVALUE,			! Wait some seconds
    TAKE_AST : NOVALUE,				! Take the AST for QIO or SETIMR
    SLEEP_HANDLER;				! Clean up after UNWINDs

!
! INCLUDE FILES:
!

REQUIRE 'RTLIN:RTLPSECT';			! Macros for defining psects

LIBRARY 'RTLSTARLE';				! System symbols

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! PSECTS:
!
DECLARE_PSECTS (BAS);				! Declare psects for BAS$ facility
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    LIB$MATCH_COND,				! Match condition codes
    LIB$STOP;					! Signal a fatal error


GLOBAL ROUTINE BAS$SLEEP (			! Wait a while
	SECONDS					! Seconds to wait
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Wait the specified number of seconds, or until a terminator
!	is typed on the controlling terminal.
!
! FORMAL PARAMETERS:
!
!	SECONDS.rl.v	How many seconds to wait.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Signals if an error is encountered.
!
!--

    BEGIN

    LOCAL
	ASSIGNED_CHAN : VOLATILE,		!Assigned channel.  Zero if no channel is assigned.
	TIMER_REQID : VOLATILE;			!$SETIMR request ID.

!+
! Arrange to clean up if an UNWIND is done.  The most likely cause of an
! UNWIND is a ^C from the $HIBER.
!-

    ENABLE
	SLEEP_HANDLER (ASSIGNED_CHAN, TIMER_REQID);

!+
! Initialize these two variables so if the handler is called before the $SETIMR
! or $ASSIGN we won't try to cancel the functions.
!-
    ASSIGNED_CHAN = TIMER_REQID = 0;
!+
! Make sure there is not a $WAKE hanging around.
!-
    BEGIN

    LOCAL
	WAKE_STATUS,
	HIBER_STATUS;

    WAKE_STATUS = $WAKE ();

    IF ( NOT .WAKE_STATUS) THEN LIB$STOP (.WAKE_STATUS);

    HIBER_STATUS = $HIBER;

    IF ( NOT .HIBER_STATUS) THEN LIB$STOP (.HIBER_STATUS);

    END;
    BEGIN

    BUILTIN
	EMUL;

    LOCAL
	SETIMR_STATUS,
	TIMBUF : VECTOR [2];			!Translated seconds for $SETIMR.

!+
! Compute time to wake in system format
!-
    EMUL (%REF (-10000000), SECONDS, %REF (0), TIMBUF [0]);
!+
! Take an AST when that time comes.
! We will pick address of SECONDS to be our TIMER_REQID since this address
! is unique for each call.
!-
    TIMER_REQID = SECONDS;
    SETIMR_STATUS = $SETIMR (DAYTIM = TIMBUF [0], ASTADR = TAKE_AST, REQIDT = TIMER_REQID);

    IF ( NOT .SETIMR_STATUS) THEN LIB$STOP (.SETIMR_STATUS);

    END;
!+
! Stop early if a line terminator is typed.
!-
    BEGIN

    LOCAL
	DEVCHR : BLOCK [DIB$K_LENGTH, BYTE],
	DEVCHR_DESC : BLOCK [8, BYTE],
	GETDEV_STATUS,
	TRNNAM_DESC : BLOCK [8, BYTE];

    TRNNAM_DESC [DSC$W_LENGTH] = %CHARCOUNT('SYS$INPUT');
    TRNNAM_DESC [DSC$B_DTYPE] = DSC$K_DTYPE_Z;
    TRNNAM_DESC [DSC$B_CLASS] = DSC$K_CLASS_S;
    TRNNAM_DESC [DSC$A_POINTER] = UPLIT('SYS$INPUT');
!+
! Do a $GETDEV on this device name.  
!-
    DEVCHR_DESC [DSC$W_LENGTH] = DIB$K_LENGTH;
    DEVCHR_DESC [DSC$B_DTYPE] = DSC$K_DTYPE_Z;
    DEVCHR_DESC [DSC$B_CLASS] = DSC$K_CLASS_S;
    DEVCHR_DESC [DSC$A_POINTER] = DEVCHR;
    GETDEV_STATUS = $GETDEV (DEVNAM = TRNNAM_DESC, PRILEN = DEVCHR_DESC [DSC$W_LENGTH], PRIBUF = DEVCHR_DESC)
    ;

    IF (.DEVCHR [DIB$B_DEVCLASS] EQL DC$_TERM)
    THEN
!+
! SYS$INPUT is a terminal.  Arrange to take an AST if a terminator is typed
! on it.
!-
	BEGIN

	LOCAL
	    QIO_STATUS,
	    ASSIGN_STATUS;

	ASSIGN_STATUS = $ASSIGN (DEVNAM = TRNNAM_DESC, CHAN = ASSIGNED_CHAN);

	IF ( NOT .ASSIGN_STATUS) THEN LIB$STOP (.ASSIGN_STATUS);

	QIO_STATUS = $QIO (CHAN = .ASSIGNED_CHAN, FUNC = (IO$_SETMODE OR IO$M_OUTBAND OR IO$M_INCLUDE),
	    P1 = TAKE_AST, P2 = UPLIT (0, %X'2000'));	!Terminator is a CR.

	IF ( NOT .QIO_STATUS) THEN LIB$STOP (.QIO_STATUS);

	END;

    END;
!+
! Now wait for the $SETIMR to fire, or (if SYS$INPUT is a terminal)
! for a terminator to be typed.
!-
    BEGIN

    LOCAL
	HIBER_STATUS;

    HIBER_STATUS = $HIBER;

    IF ( NOT .HIBER_STATUS) THEN LIB$STOP (.HIBER_STATUS);

    END;
!+
! At this point either AST for $SETIMR or $QIO has gone off.  We don't care
! which, we just cancel both of them, and also deassign the channel.
!-
    BEGIN

    LOCAL
	DASSGN_STATUS,
	CANTIM_STATUS,
	QIO_STATUS;

    CANTIM_STATUS = $CANTIM (REQIDT = TIMER_REQID);

    IF ( NOT .CANTIM_STATUS) THEN LIB$STOP (.CANTIM_STATUS);

    IF .ASSIGNED_CHAN NEQ 0
    THEN
	BEGIN
	QIO_STATUS = $QIO (CHAN = .ASSIGNED_CHAN, FUNC = (IO$_SETMODE OR IO$M_OUTBAND OR IO$M_INCLUDE),
	    P1 = 0);

	IF ( NOT .QIO_STATUS) THEN LIB$STOP (.QIO_STATUS);

	DASSGN_STATUS = $DASSGN (CHAN = .ASSIGNED_CHAN);

	IF ( NOT .DASSGN_STATUS) THEN LIB$STOP (.DASSGN_STATUS);

	END;

    END;
!+
! Make sure there are not any $WAKE hanging around.  They could have appeared
! as a result of one of the ASTs timer or QIO going off just before we turned
! it off.
!-
    BEGIN

    LOCAL
	WAKE_STATUS,
	HIBER_STATUS;

    WAKE_STATUS = $WAKE ();

    IF ( NOT .WAKE_STATUS) THEN LIB$STOP (.WAKE_STATUS);

    HIBER_STATUS = $HIBER;

    IF ( NOT .HIBER_STATUS) THEN LIB$STOP (.HIBER_STATUS);

    END;
    RETURN;
    END;					! end of BAS$SLEEP


ROUTINE TAKE_AST (				! Take a QIO, or SETIMR AST.
	AST_PARAM				! AST parameter.
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Take an AST, either from $SETIMR when the sleep time is up, or from
!	the $QIO when it completes.  In both cases we simply do a $WAKE.
!
! FORMAL PARAMETERS:
!
!	AST_PARAM	Pointer to parameters for this AST.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN
    $WAKE ();
    RETURN;
    END;					! of TAKE_AST

ROUTINE SLEEP_HANDLER (				! Handler for BAS$SLEEP
	SIG, 					! signal args
	MECH, 					! mechanism args
	ENBL					!variables passed from BAS$SLEEP
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Handle an UNWIND while in BAS$SLEEP.  This is needed so that the
!	ASTs will not fire after their storage has been removed from the
!	stack.
!
! FORMAL PARAMETERS:
!
!	SIG.rl.a	Address of the signal vector.  This contains
!			the condition.
!	MECH.rl.a	Address of the mechanism vector.  This contains
!			the status of the frame that signalled.
!	ENBL.rl.a	Address of the enable vector.  This contains
!			some the local variables ASSIGNED_CHAN, and TIMER_REQID.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION CODES:
!
!	Always SS$_RESIGNAL, but this is ingored when we are
!	unwinding.
!
! SIDE EFFECTS:
!
!	Arranges that the ASTs will not fire after this routine
!	has completed its execution.
!
!--

    BEGIN

    MAP
	SIG : REF VECTOR,			! signal vector
	MECH : REF VECTOR,			! mechanism vector
	ENBL : REF VECTOR;			! enable vector

    BIND
	ASSIGNED_CHAN = .ENBL [1],
	TIMER_REQID = .ENBL [2];

!+
! If this is the UNWIND condition, cancel the SETIMR and QIO.
!-

    IF (LIB$MATCH_COND (SIG [1], %REF (SS$_UNWIND)))
    THEN
	BEGIN
!+
! Turn off the QIO and SETIMR.  We need to do this while no ASTs can go off
! because we are modifying ASSIGNED_CHAN, and TIMER_REQID.
!-
	$SETAST (ENBFLG = 0);
	BEGIN

	LOCAL
	    DASSGN_STATUS,
	    CANTIM_STATUS,
	    QIO_STATUS;

	QIO_STATUS = $QIO (CHAN = .ASSIGNED_CHAN, FUNC = (IO$_SETMODE OR IO$M_OUTBAND OR IO$M_INCLUDE),
	    P1 = 0);

	IF ( NOT .QIO_STATUS) THEN LIB$STOP (.QIO_STATUS);

	IF .ASSIGNED_CHAN NEQ 0
	THEN
	    BEGIN
	    DASSGN_STATUS = $DASSGN (CHAN = .ASSIGNED_CHAN);

	    IF ( NOT .DASSGN_STATUS) THEN LIB$STOP (.DASSGN_STATUS);

	    ASSIGNED_CHAN = 0;
	    END;

	IF .TIMER_REQID NEQ 0
	THEN
	    BEGIN
	    CANTIM_STATUS = $CANTIM (REQIDT = TIMER_REQID);

	    IF ( NOT .CANTIM_STATUS) THEN LIB$STOP (.CANTIM_STATUS);

	    TIMER_REQID = 0;
	    END;

	END;
	$SETAST (ENBFLG = 1);
!+
! Make sure there are not any $WAKE hanging around.  They could have appeared
! as a result of one of the ASTs timer or QIO going off just before we turned
! it off.
!-
	BEGIN

	LOCAL
	    WAKE_STATUS,
	    HIBER_STATUS;

	WAKE_STATUS = $WAKE ();

	IF ( NOT .WAKE_STATUS) THEN LIB$STOP (.WAKE_STATUS);

	HIBER_STATUS = $HIBER;

	IF ( NOT .HIBER_STATUS) THEN LIB$STOP (.HIBER_STATUS);

	END;
	END;

    RETURN (SS$_RESIGNAL);
    END;					! of HANDLER
END						! end of module BAS$SLEEP

ELUDOM
