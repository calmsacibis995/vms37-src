MODULE FOR$$UDF_RL (				! FORTRAN list-directed input, UDF level
		IDENT = '1-022'			! File: FORUDFRL.B32 Edit: DGP1022
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	FORTRAN support library - not user callable
!
! ABSTRACT:
!
!	This module implements FORTRAN read list-directed I/O statement
!	at the UDF level of abstraction.  This module calls the list-
!	directed record routines at the record level to read a record.
!
! ENVIRONMENT:	User access mode, reentrant AST level or not
!
! AUTHOR: Jonathan M. Taylor,	CREATION DATE: 5-SEP-77
!
! MODIFIED BY:
!
! [Previous edit history deleted.  SBL 9-June-1981]
! 1-001	- Update version number and copyright notice.  JBS 16-NOV-78
! 1-002	- Make SKIPBLANKS return a value to keep the BLISS
!	   compiler happy.  JBS 27-NOV-78
! 1-003	- Change REQUIRE file names from FOR... to OTS...  JBS 06-DEC-78
! 1-004	- Change module name to FOR$$UDF_RL to agree with file name.  JBS 11-DEC-78
! 1-005 - Change ISB$A_BUF_PTR, BUF_END, BUF_BEG, BUF_HIGH to LUB. DGP 08-Jan-79
! 1-006 - Fix bug with omitted values after repeats.  SPR 21789  SBL 22-Jan-79
! 1-007	- Use 32-bit addresses for externals.  JBS 27-JAN-1979
! 1-008 - Add support for G, H, DC, GC.  Allow lower case exponent
!	  letters.  Have Logical fields fetch second word.
!	  SBL 21-Mar-79
! 1-009 - Fix convert table lookup for G and bigger.  SBL 19-Apr-79
! 1-010 - Remove reference to MTH$GFLOTJ.  SBL 27-Apr-79
! 1-011 - Force integer conversion of repeat constants.  SBL 4-May-1979
! 1-012	- Remove references to MTH$DFLOTJ, MTH$JIDINT and MTH$SNGL.
!	   A side effect of this edit is that we now check for overflow
!	   when converting D to F.  JBS 26-JUN-1979
! 1-013 - Fix CONVERTTYPE table for datatypes F, FC, DC and GC.  SBL 13-Jul-1979
! 1-014 - Change to use local CONSBLOCK.  Do numeric repeat counts by
!	  resetting the buffer pointer to the beginning of the numeric
!	  constant.  Make byte variables signed.  SBL 18-Jul-1979
! 1-015 - If file is not sequential organization, give error
!	  "mixed file access modes".  SBL 3-Oct-1979
! 1-016 - Change 1-015 to read not sequential access.  SBL 4-Oct-1979
! 1-017 - Remove access check, done in FOR$$IO_BEG.  SBL 5-Dec-1979
! 1-018	- Move BUILTIN ACTUALCOUNT into the routine, in anticipation of the
!	  next BLISS compiler, which will require it to be there.
!	  JBS 22-Aug-1980
! 1-019 - Change local routine CONVERTTYPE to global routine
!	  FOR$$CVT_TYPE so that NAMELIST can use it.  SBL 28-August-1980
! 1-020 - Use new F_floating input conversion routine, OTS$CVT_T_F.
!	  14-Apr-1981  JAW
! 1-021 - Allow BU datatype to be the same as B.  Eliminate differentiation between integer
!	  and real constant type except where necessary, since the test wasn't guaranteed.   SBL 9-June-1981
! 1-022 - Signal Access Violations directly, do not change them into I/O Syntax
!	  Error.  DGP 15-Jan-1982
!--

!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!

REQUIRE 'RTLIN:OTSLNK';				! define all linkages

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    ! UDF routines
    !
    FOR$$UDF_RL0 : JSB_UDF0 NOVALUE,
    FOR$$UDF_RL1 : CALL_CCB NOVALUE,
    FOR$$UDF_RL9 : JSB_UDF9 NOVALUE,
    ! routines used by FOR$$UDF_RL0 and FOR$$UDF_RL1
    !
    GETCONST : CALL_CCB,
    FOR$$CVT_TYPE,
    LCL_HANDLER,			! Local handler for conversion routine
    GETFIELD : CALL_CCB,
    SKIPBLANKS : CALL_CCB,
    DELIM : CALL_CCB;

!
! INCLUDE FILES:
!

REQUIRE 'RTLML:FORERR';				! FORTRAN error number definitions

REQUIRE 'RTLML:OTSISB';				! I/O Statement Block

REQUIRE 'RTLML:OTSLUB';				! Logical Unit Block

REQUIRE 'RTLIN:OTSMAC';				! macros

REQUIRE 'RTLIN:RTLPSECT';			! Define DELCARE_PSECTS macro

LIBRARY 'RTLSTARLE';				! STARLET library for macros and symbols

!
! MACROS:
!

MACRO
    THISCHAR =
	(IF .CCB[LUB$A_BUF_PTR] GEQA .CCB[LUB$A_BUF_END]
	THEN
		-1
	ELSE
		.(.CCB[LUB$A_BUF_PTR])<0,8>) %,
    NEXTCHAR =
	BEGIN
	CCB[LUB$A_BUF_PTR] = .CCB[LUB$A_BUF_PTR] + 1;
	THISCHAR
	END %;

!
! EQUATED SYMBOLS:
!

LITERAL
    K_NULL = 0,					! types of constants which may appear in input record
    K_LOG = 1,
    K_INT = 2,
    K_REAL = 3,
    K_COMP = 4,
    K_CHAR = 5,
    K_TAB = 9;					! ASCII TAB

!
! PSECT declarations
!
DECLARE_PSECTS (FOR);				! declare PSECTS for FOR$ facility
!
! OWN STORAGE:
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    FOR$$GET_VM,				! Allocate virtual memory
    FOR$$FREE_VM : NOVALUE,			! Deallocate virtual memory
    FOR$$SIGNAL_STO : NOVALUE,			! Signal fatal error
    LIB$SIG_TO_RET,				! Convert a signal to a return code
!+
!  conversion routines
!-
    OTS$CVT_TL_L,
    OTS$CVT_TI_L,
    OTS$CVT_T_F,
    OTS$CVT_T_D,
    OTS$CVT_T_G,
    OTS$CVT_T_H,
!+
! record level routines for list-directed input
!-
    FOR$$REC_RSL0 : JSB_REC0 NOVALUE,
    FOR$$REC_RSL1 : JSB_REC1 NOVALUE,
    FOR$$REC_RSL9 : JSB_REC9 NOVALUE;


GLOBAL ROUTINE FOR$$UDF_RL0 : JSB_UDF0 NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Perform UDF level read list-directed I/O initialization.
!	Initialize module "own" storage in the ISB.
!	Call record level processor to get first input record.
!
! CALLING SEQUENCE:
!
!	JSB FOR$$UDF_RL0 ()
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	CCB			Pointer to current logical unit block (LUB)
!
! IMPLICIT OUTPUTS:
!
!	ISB$V_SLASH		0: no slash seen in this record
!	ISB$V_LIS_HEAP		0: no heap storage allocated for string constant
!	ISB$W_LIS_REP		0: no repeat count yet seen
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    EXTERNAL REGISTER
	CCB : REF BLOCK [, BYTE];

    !+
    ! Initialize module own storage used between calls to FOR$$UDF_RL1.
    !-

    CCB [ISB$V_SLASH] = 0;
    CCB [ISB$W_LIS_REP] = 0;
    CCB [ISB$V_LIS_HEAP] = 0;

    !+
    ! Call record level routine to read the first record.
    !-

    FOR$$REC_RSL0 ();
    END;


GLOBAL ROUTINE FOR$$UDF_RL1 (ELEM_TYPE, ELEM_SIZE, ELEM_ADR, FC_FLAG) : CALL_CCB NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Return the next input value to the user I/O list element.
!	The value obtained from the input record is converted to
!	the type of the list element.
!
! CALLING SEQUENCE:
!
!	CALL FOR$$UDF_RL1 (elem_type.rlu.v, elem_size.rlu.v, elem_adr.wx.r [,fc_flag.rb.v])
!
! FORMAL PARAMETERS:
!
!	ELEM_TYPE.rlu.v		Type code of user I/O list element
!	ELEM_SIZE.rlu.v		Size of user I/O list element
!	ELEM_ADR.wx.r		Address of user I/O list element,
!				x = b,w,l,bu,wu,lu,f,c,fc,dc,gc,g,h or t.
!	[FC_FLAG]		if present, then:
!				    0 - real part of COMPLEX type
!				    1 - imaginary part of COMPLEX type
!
! IMPLICIT INPUTS:
!
!	OTS$$A_CUR_LUB		Pointer to current logical unit block (LUB)
!
! IMPLICIT OUTPUTS:
!
!	ISB$W_LIS_HEAP		repeat count
!	ISB$B_LIS_CTYPE		type of constant found
!	ISB$A_LIS_STR	address of saved repeated string
!	ISB$V_HEAP		on if heap storage allocated by module
!	ISB$V_SLASH		on if slash seen (ignore all future calls)
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	SIGNALs FOR$_LISIO_SYN if a bum repeat count or an error
!	occurs when converting the constant from external form to
!	the type of the list element.
!
!--

    BEGIN

    EXTERNAL REGISTER
	CCB : REF BLOCK [, BYTE];

    MAP
	ELEM_ADR : REF VECTOR;

    BUILTIN
	ACTUALCOUNT;

    LOCAL
	CONSBLOCK : VECTOR [4, LONG],
	CONST_PTR,				! Pointer to beginning of constant
	CHARCONS : VECTOR [256, BYTE];

    !+
    ! If we're being called to get the second part of a COMPLEX number,
    ! just return since the call for the first part actually got
    ! both parts!
    !-

    IF ACTUALCOUNT () GTR (FC_FLAG - ELEM_TYPE)/%UPVAL
    THEN

	IF .FC_FLAG THEN RETURN;

    !+
    ! If a slash has been seen previously, just return as rest of record
    ! is ignored.
    !-

    IF .CCB [ISB$V_SLASH] THEN RETURN;

    !+
    ! If no currently active repeat count, find the next constant.
    !-

    IF .CCB [ISB$W_LIS_REP] EQL 0
    THEN
	BEGIN

	!+
	! Find a constant.  If a string constant is seen, have GETCONST
	! store it in stack-local CHARCONS.
	!-

	SKIPBLANKS ();
	CONSBLOCK [0] = CHARCONS;		! passing address of string area
	CCB [ISB$B_LIS_CTYPE] = GETCONST (CONSBLOCK, 1, .ELEM_TYPE);

	!+
	! If the next character after the constant is a star then the
	! constant is really a repeat count.  Make sure the repeat count
	! is legal and store away in the ISB for future calls.
	!-

	IF THISCHAR EQL %C'*'
	THEN
	    BEGIN
	    CCB [LUB$A_BUF_PTR] = .CCB [LUB$A_BUF_PTR] + 1;
	    CCB [ISB$W_LIS_REP] = (IF .CCB [ISB$B_LIS_CTYPE] NEQ K_INT OR .CONSBLOCK [0] LEQ 0 THEN
		BEGIN
		CCB [ISB$B_ERR_NO] = FOR$K_LISIO_SYN;
		1
		END
	    ELSE .CONSBLOCK [0]);

	    !+
	    ! Now that repeat count is taken care of, get the "real"
	    ! constant!
	    !-

	    CONSBLOCK [0] = CHARCONS;
	    CONST_PTR = .CCB [LUB$A_BUF_PTR];	! Save address of constant in input
	    CCB [ISB$B_LIS_CTYPE] = GETCONST (CONSBLOCK, 1, .ELEM_TYPE);

	    !+
	    ! If we just got a string constant (preceded by a repeat count),
	    ! then the string must be stored to preserve it between calls
	    ! to this routine.
	    !-

	    IF .CCB [ISB$B_LIS_CTYPE] EQL K_CHAR
	    THEN
		BEGIN

		LOCAL
		    T;

		T = FOR$$GET_VM (256);
		CH$MOVE (255, CHARCONS, .T);
		CCB [ISB$A_LIS_STR] = .T;
		CCB [ISB$V_LIS_HEAP] = 1;
		END

	    END
	ELSE
	    CCB [ISB$W_LIS_REP] = 1

	END
    ELSE

    !+
    ! This is pass 2 or more on a repeat count.  If the constant
    ! was not character, call GETCONST to reconvert the value.
    ! Otherwise,  put the address of the saved string in
    ! CONSBLOCK [0].
    !-

	IF .CCB [ISB$B_LIS_CTYPE] NEQ K_CHAR
	THEN
	    BEGIN
	    CONST_PTR = .CCB [LUB$A_BUF_PTR];	! Save address again
	    CCB [ISB$B_LIS_CTYPE] = GETCONST (CONSBLOCK, 0, .ELEM_TYPE);
	    END
	ELSE
	    CONSBLOCK [0] = .CCB [ISB$A_LIS_STR];

    IF .CCB [ISB$B_LIS_CTYPE] NEQ K_NULL
    THEN

	IF NOT FOR$$CVT_TYPE (.CCB [ISB$B_LIS_CTYPE], CONSBLOCK,

		IF ACTUALCOUNT () GTR (FC_FLAG - ELEM_TYPE)/%UPVAL
		THEN

		    SELECTONE .ELEM_TYPE OF
			SET

			[DSC$K_DTYPE_F] :
			    DSC$K_DTYPE_FC;

			[DSC$K_DTYPE_D] :
			    DSC$K_DTYPE_DC;

			[DSC$K_DTYPE_G] :
			    DSC$K_DTYPE_GC;
			TES

		ELSE
		    .ELEM_TYPE, .ELEM_ADR, .ELEM_SIZE)

	THEN
	    CCB [ISB$B_ERR_NO] = FOR$K_LISIO_SYN;

    !+
    ! If repeat count goes to zero deallocate heap if there is one
    ! and skip to next "significant" character.
    !-

    IF (CCB [ISB$W_LIS_REP] = .CCB [ISB$W_LIS_REP] - 1) EQL 0
    THEN
	BEGIN

	LOCAL
	    C;					! Local character storage

	IF .CCB [ISB$V_LIS_HEAP]
	THEN
	    BEGIN
	    FOR$$FREE_VM (256, .CCB [ISB$A_LIS_STR]);
	    CCB [ISB$V_LIS_HEAP] = 0;
	    END;

	!+
	! Skip over blanks and tabs until a real character is seen
	! or end-of-record is reached.  This puts us in a good position
	! for the next call.
	!-

	C = THISCHAR;

	WHILE .C EQL %C' ' OR .C EQL K_TAB DO
	    C = NEXTCHAR;

	IF .C EQL ',' THEN CCB [LUB$A_BUF_PTR] = .CCB [LUB$A_BUF_PTR] + 1;

	END
    ELSE

    !+
    ! There is still a repeat count active.  If this was a numeric
    ! value, reset the buffer pointer to point to the beginning of
    ! the constant for rescanning.  If character, the string has
    ! been saved in the location pointed to by CCB [ISB$A_LIS_STR].
    !-

	IF .CCB [ISB$B_LIS_CTYPE] NEQ K_CHAR THEN CCB [LUB$A_BUF_PTR] = .CONST_PTR;

    END;


GLOBAL ROUTINE FOR$$UDF_RL9 : JSB_UDF9 NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	List directed input UDF termination:
!	If any heap storage was allocated by RL1, deallocate it.
!
! CALLING SEQUENCE:
!
!	JSB FOR$$UDF_RL9 ()
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	CCB				Adr. of LUB/ISB/RAB
!	CCB[ISB$V_LIS_HEAP]		1 if storage currently allocated
!	CCB[ISB$A_LIS_STR]		address of allocated storage
!
! IMPLICIT OUTPUTS:
!
!	CCB[ISB$V_LIS_HEAP]		0
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    EXTERNAL REGISTER
	CCB : REF BLOCK [, BYTE];

    IF .CCB [ISB$V_LIS_HEAP]
    THEN
	BEGIN
	FOR$$FREE_VM (256, .CCB [ISB$A_LIS_STR]);
	CCB [ISB$V_LIS_HEAP] = 0;
	END;

    END;


GLOBAL ROUTINE FOR$$CVT_TYPE (IN_TYPE, IN_BLOCK, OUT_TYPE, OUT_BLOCK, OUT_SIZE) =

!++
! Functional description:
!
!	Convert the constant recovered from the input record to the
!	type the user requested.  If the input and output types
!	are both string constant, copy the string to the users area.
!
! Formal parameters:
!
!	IN_TYPE.rx.v		{L*4, I*4, REAL, CMPLX, CHAR}
!	IN_BLOCK.rl.r		address of the input constant
!				OR if the input is a char constant, then
!				the address of a pointer to the char constant.
!	OUT_TYPE.rl.v		{BU, WU, LU, B, W, L, F, D, FC, DC, GC, G, H or T}
!	OUT_ADR.wy.r		address of output area in user program
!	OUT_SIZE.rl.v		size of users output area (used for strings only)
!
! Returned value:
!	returns success(1) or failure(0) when conversion error occurs.
!
!--

    BEGIN

    MACRO
	B_0 =
	0,0,8,1 %,				! first byte (signed)
	W_0 =
	0,0,16,1 %,				! first word (sign extend)
	W_1 =
	0,16,16,0 %,				! second word
	L_0 =
	0,0,32,0 %,				! first longword
	L_1 =
	4,0,32,0 %,				! second longword
	L_2 =
	8,0,32,0 %,				! third longword
	L_3 =
	12,0,32,0 %,				! fourth longword
! fields used to access flag bits in FLAG
	!
	LOAD_FIRST_WORD =
	0,0,1,0 %,				! 000001
	LOAD_SEC_WORD =
	0,1,1,0 %,				! 000002
	LOAD_SEC_LONG =
	0,2,1,0 %,				! 000004
	CONV_J_TO_D =
	0,3,1,0 %,				! 000010
	CONV_D_TO_J =
	0,4,1,0 %,				! 000020
	CONV_D_TO_F =
	0,5,1,0 %,				! 000040
	CONV_J_TO_I =
	0,6,1,0 %,				! 000100
	CONV_J_TO_B =
	0,7,1,0 %,				! 000200
	STOR_FIRST_BYTE =
	0,8,1,0 %,				! 000400
	STOR_FIRST_WORD =
	0,9,1,0 %,				! 001000
	STOR_SEC_WORD =
	0,10,1,0 %,				! 002000
	STOR_SEC_LONG =
	0,11,1,0 %,				! 004000
	LOAD_SEC_QUAD =
	0,12,1,0 %,				! 010000
	STOR_SEC_QUAD =
	0,13,1,0 %,				! 020000
	CONV_L_TO_FDGH =
	0,14,1,0 %;				! 040000

    LOCAL
	FLAGS : BLOCK [1],
	T : BLOCK [16, BYTE];			! Local temp storage for intermediate results

    MAP
	IN_BLOCK : REF BLOCK [16, BYTE],	! Contains input value
	OUT_BLOCK : REF BLOCK [16, BYTE];	! Contains output value

    BIND
	FLAG_TAB = UPLIT WORD
	!
	!			I N P U T  D A T A  T Y P E
	!
	!	  LOG		  INT		  REAL		  CMPLX
	!
	(
		%O'603',	%O'603',	%O'627',	%O'401',	! BU (same as B)
		%O'1001',	%O'1103',	%O'1127',	%O'1001',	! WU
		%O'3003',	%O'3003',	%O'3027',	%O'3003',	! LU
		0,		0,		0,		0,		! QU (not used)
		%O'603',	%O'603',	%O'627',	%O'401',	! B
		%O'1001',	%O'1103',	%O'1127',	%O'1001',	! W
		%O'3003',	%O'3003',	%O'3027',	%O'3003',	! L
		0,		0,		0,		0,		! Q (not used)
		%O'43003',	%O'3003',	%O'3003',	%O'3003',	! F
		%O'47003',	%O'7007',	%O'7007',	%O'7007',	! D
		%O'47003',	%O'7003',	%O'7003',	%O'7007',	! FC
		%O'67003',	%O'27007',	%O'27007',	%O'37007',	! DC
		%O'47003',	%O'7007',	%O'7007',	%O'7007',	! G
		%O'67003',	%O'37007',	%O'37007',	%O'37007',	! H
		%O'67003',	%O'27007',	%O'27007',	%O'37007')	! GC

	: VECTOR [, WORD];

    ENABLE
	LCL_HANDLER();

    IF .IN_TYPE EQL K_CHAR AND .OUT_TYPE EQL DSC$K_DTYPE_T
    THEN
	BEGIN
	CH$COPY (255, ..IN_BLOCK, %C' ', .OUT_SIZE, .OUT_BLOCK);
	RETURN 1;
	END;

    IF .IN_TYPE EQL K_CHAR OR .OUT_TYPE EQL DSC$K_DTYPE_T THEN RETURN 0;	! type mis-match!

    FLAGS [L_0] = .FLAG_TAB [(.OUT_TYPE - DSC$K_DTYPE_BU - (IF .OUT_TYPE GEQU DSC$K_DTYPE_G THEN
	    DSC$K_DTYPE_G - DSC$K_DTYPE_DC - 1 ELSE 0))*4 + (.IN_TYPE - K_LOG)];

    !+
    ! Zero the third and fourth longwords of T so that storing short values
    ! into longer ones works.
    !-

    T [L_2] = 0;
    T [L_3] = 0;

    IF .FLAGS [LOAD_FIRST_WORD]			! load first word and sign extend
    THEN
	T [L_0] = .IN_BLOCK [W_0];

    IF .FLAGS [LOAD_SEC_WORD]			! load second word
    THEN
	T [W_1] = .IN_BLOCK [W_1];

    IF .FLAGS [LOAD_SEC_LONG]			! load third and fourth words
    THEN
	T [L_1] = .IN_BLOCK [L_1];

    IF .FLAGS [LOAD_SEC_QUAD]			! load second quadword
    THEN
	BEGIN
	T [L_2] = .IN_BLOCK [L_2];
	T [L_3] = .IN_BLOCK [L_3]
	END;

    IF .FLAGS [CONV_J_TO_D]			! convert J to D
    THEN
	BEGIN

	BUILTIN
	    CVTLD;

	CVTLD (T [L_0], T [L_0]);
	END;

    IF .FLAGS [CONV_L_TO_FDGH]			! Convert Logical to floating
    THEN
	BEGIN

	!+
	! If the logical falue is true, set the floating value to -1.
	! Otherwise it is already zero.
	!-

	IF .T [L_0]
	THEN
	    T [L_0] =
	    BEGIN

	    SELECTONE .OUT_TYPE OF
		SET

		[DSC$K_DTYPE_F, DSC$K_DTYPE_D, DSC$K_DTYPE_FC, DSC$K_DTYPE_DC] :
		    %X'C080';

		[DSC$K_DTYPE_G, DSC$K_DTYPE_GC] :
		    %X'C010';

		[DSC$K_DTYPE_H] :
		    %X'C001';
		TES

	    END;

	T [L_1] = 0;
	T [L_2] = 0;
	T [L_3] = 0;
	END;

    IF .FLAGS [CONV_D_TO_J]			! convert D to J
    THEN
	BEGIN

	BUILTIN
	    CVTDL;

	IF ( NOT CVTDL (T [L_0], T [L_0])) THEN RETURN 0;

	T [L_1] = 0;
	END;

    IF .FLAGS [CONV_D_TO_F]			! convert D to F (round)
    THEN
	BEGIN

	BUILTIN
	    CVTDF;

	IF ( NOT CVTDF (T [L_0], T [L_0])) THEN RETURN 0;

	T [L_1] = 0;
	END;

    IF .FLAGS [CONV_J_TO_I]			! convert longword to word (signed)
    THEN

	IF .T [0, 15, 1, 1] NEQ .T [0, 16, 16, 1] THEN RETURN 0;

    IF .FLAGS [CONV_J_TO_B]			! convert longword to byte (signed)
    THEN

	IF .T [0, 7, 1, 1] NEQ .T [0, 8, 24, 1] THEN RETURN 0;

    IF .FLAGS [STOR_FIRST_BYTE]			! store one byte
    THEN
	OUT_BLOCK [B_0] = .T [L_0];

    IF .FLAGS [STOR_FIRST_WORD]			! store one word
    THEN
	OUT_BLOCK [W_0] = .T [W_0];

    IF .FLAGS [STOR_SEC_WORD]			! store second word
    THEN
	OUT_BLOCK [W_1] = .T [W_1];

    IF .FLAGS [STOR_SEC_LONG]			! store third and fourth words
    THEN
	OUT_BLOCK [L_1] = .T [L_1];

    IF .FLAGS [STOR_SEC_QUAD]			! store second quadword
    THEN
	BEGIN
	OUT_BLOCK [L_2] = .T [L_2];
	OUT_BLOCK [L_3] = .T [L_3]
	END;

    RETURN 1;
    END;

ROUTINE GETCONST (CONSBLOCK, STRINGFLAG, ELEM_TYPE) : CALL_CCB =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Obtain a value from the external record using the format conversion
!	routines.  The conversion chosen is dependent on the contents of the
!	field of the record:
!		LOGICAL if the first char is 'T', 't', 'F', 'f' or the first
!		   character is '.' and the second is any of the above.
!		COMPLEX if the first char is '(';
!		CHAR if first char is ';
!		FLOATING otherwise.
!
!	A special case is made if the next character after the value
!	is '*', in which case it is a repeat count and is always
!	converted to integer.
!
! FORMAL PARAMETERS:
!
!	CONSBLOCK.mb.r		Two longword block in which to store
!				the constant found.
!	STRINGFLAG		0	if caller wishes not to have strings
!					returned to him.
!				1	if caller wants string returned:
!					CONSBLOCK[0] contains the address of
!					the 255 byte area to store the string.
!	ELEM_TYPE		The datatype of the destination.
!
! IMPLICIT INPUTS:
!
!
! IMPLICIT OUTPUTS:
!
!	If a string constant is seen and STRINGFLAG is one, the
!	string will be stored starting at the address specified in
!	CONSBLOCK[0].  The string will always be 255 bytes long (blank
!	padded).
!
! ROUTINE VALUE:
!
!	The type of the constant seen is returned (as a small number)
!	as the routine value.
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	SIGNALs FOR$LISIO_SYN if a conversion error occurs.
!
!--

    BEGIN

    EXTERNAL REGISTER
	CCB : REF BLOCK [, BYTE];

    MAP
	CONSBLOCK : REF VECTOR [4];

    LOCAL
	CTYPE : BYTE,				! local type of constant seen
	DSC : BLOCK [8, BYTE];

    !+
    ! The first character indicates what type of constant this is.
    ! Perform the appropriate action.
    !-

    SELECTONE THISCHAR OF
	SET

	!+
	! Complex constant
	!-

	[%C'('] :
	    BEGIN

	    LOCAL
		L_CONSBLOCK : VECTOR [4],
		B_CTYPE : BYTE,
		B_ERR_FLAG : BYTE;

	    !+
	    ! Set error flag to 0, skip over the '('.
	    !-

	    B_ERR_FLAG = 0;
	    CCB [LUB$A_BUF_PTR] = .CCB [LUB$A_BUF_PTR] + 1;

	    !+
	    ! Skip over any leading blanks and commas.  If a comma is seen
	    ! this is an error.
	    !-

	    IF DELIM () THEN B_ERR_FLAG = .B_ERR_FLAG + 1;

	    !+
	    ! Get the next constant from the input record.  Strings
	    ! are not allowed at this time!
	    !-

	    B_CTYPE = GETCONST (L_CONSBLOCK, 0, .ELEM_TYPE);

	    !+
	    ! If GETCONST found an error, increment our error counter
	    ! otherwise convert the constant just read into a REAL
	    ! quantity and store in CONSBLOCK[0].
	    !-

	    IF .B_CTYPE EQL K_NULL
	    THEN
		B_ERR_FLAG = .B_ERR_FLAG + 1
	    ELSE

		IF NOT FOR$$CVT_TYPE (.B_CTYPE, L_CONSBLOCK, .ELEM_TYPE, CONSBLOCK [0])
		THEN
		    B_ERR_FLAG = .B_ERR_FLAG + 1;

	    !+
	    ! Must be a comma here.
	    !-

	    IF NOT DELIM () THEN B_ERR_FLAG = .B_ERR_FLAG + 1;

	    !+
	    ! Get the imaginary part and convert it to a REAL quantity.
	    ! Store the result into CONSBLOCK[1 or 2].
	    !-

	    B_CTYPE = GETCONST (L_CONSBLOCK, 0, .ELEM_TYPE);

	    IF .B_CTYPE EQL K_NULL
	    THEN
		B_ERR_FLAG = .B_ERR_FLAG + 1
	    ELSE

		IF .ELEM_TYPE NEQ DSC$K_DTYPE_H
		THEN
		    BEGIN

		    IF NOT FOR$$CVT_TYPE (.B_CTYPE, L_CONSBLOCK, .ELEM_TYPE,

			    IF .ELEM_TYPE EQL DSC$K_DTYPE_F THEN CONSBLOCK [1] ELSE CONSBLOCK [2])

		    THEN
			B_ERR_FLAG = B_ERR_FLAG + 1;

		    END;

	    !+
	    ! Skip blanks here. Better not be a comma!
	    !-

	    IF DELIM () THEN B_ERR_FLAG = .B_ERR_FLAG + 1;

	    !+
	    ! Check for the required ')'
	    !-

	    IF .(.CCB [LUB$A_BUF_PTR])<0, 8> EQL %C')'
	    THEN
		CCB [LUB$A_BUF_PTR] = .CCB [LUB$A_BUF_PTR] + 1
	    ELSE
		B_ERR_FLAG = .B_ERR_FLAG + 1;

	    !+
	    ! If any errors occured return NULL else COMPLEX type.
	    !-

	    RETURN ((IF .B_ERR_FLAG EQL 0 THEN K_COMP ELSE
		    BEGIN
		    CCB [ISB$B_ERR_NO] = FOR$K_LISIO_SYN;
		    K_NULL
		    END
		));
	    END;

	!+
	! Logical constant.
	! Point descriptor DSC to the field and set type to LOG.
	!-

	[%C'T', %C'F', %C't', %C'f'] :
	    BEGIN
	    GETFIELD (DSC);
	    CTYPE = K_LOG;
	    END;

	!+
	! Possible logical constant.  Check second character.
	!-

	[%C'.'] :
	    BEGIN
	    CTYPE = GETFIELD (DSC);

	    IF .DSC [DSC$W_LENGTH] GEQ 1
	    THEN
		BEGIN

		LOCAL
		    C,				! second character
		    ADR : REF BLOCK [1];	! address of second character

		ADR = 1 + .DSC [DSC$A_POINTER];
		C = .ADR [0, 0, 8, 0];

		SELECT .C OF
		    SET

		    [%C'T', %C't', %C'F', %C'f'] :
			CTYPE = K_LOG;
		    TES;

		END

	    END;

	!+
	! Slash seen.
	! Set V_SLASH and return NULL value seen.
	!-

	[%C'/'] :
	    BEGIN
	    CCB [ISB$V_SLASH] = 1;
	    RETURN K_NULL;
	    END;

	!+
	! Comma or EOL.
	! Indicates null field.  Return NULL value seen.
	!-

	[%C',', -1] :
	    RETURN K_NULL;

	!+
	! String constant.
	! Gather up the string (handling double 's intelligently).
	! If STRINGFLAG is 1, store the string through CONSBLOCK[0].
	! The string returned is always 255 bytes long (blank padded).
	! If the string read is longer than 255 chars, SIGNAL LISIO_SYN
	! and ignore the rest of the characters after the 255th.
	!-

	[%C''''] :
	    BEGIN

	    LOCAL
		C,				! Local character holder
		A_BUF_PTR,			! if STRINGFLAG, points to callers buffer
		A_BUF_END;			! if STRINGFLAG, points to end of buffer

	    !+
	    ! Initialize locals
	    !-

	    IF .STRINGFLAG
	    THEN
		BEGIN
		A_BUF_PTR = .CONSBLOCK [0];
		A_BUF_END = .A_BUF_PTR + 255;
		END;

	    C = NEXTCHAR;

	    !+
	    ! Loop forever.  Loop logic does an EXITLOOP when the
	    ! closing quote character is found.
	    !-

	    WHILE 1 DO
		BEGIN

		!+
		! If End-Of-Line is seen read another record, get the
		! first character and continue looping.
		!-

		IF .C LSS 0
		THEN
		    BEGIN
		    FOR$$REC_RSL1 ();
		    C = THISCHAR;
		    END
		ELSE
		    BEGIN

		    IF .C EQL %C''''
		    THEN
			BEGIN
			C = NEXTCHAR;

			IF .C NEQ %C'''' THEN EXITLOOP;

			END;

		    !+
		    ! If the buffer just overflowed, SIGNAL LISIO_SYN.
		    ! If the buffer overflowed sometime previous to this
		    ! iteration, don't do anything with the character.
		    ! Otherwise (less than 255 chars seen), continue to
		    ! Store bytes in the users buffer.
		    !-

		    IF .STRINGFLAG
		    THEN
			BEGIN

			IF (.A_BUF_PTR LSSA .A_BUF_END)
			THEN
			    CH$WCHAR (.C, .A_BUF_PTR)
			ELSE

			    IF (.A_BUF_PTR EQLA .A_BUF_END) THEN CCB [ISB$B_ERR_NO] = FOR$K_LISIO_SYN;

			A_BUF_PTR = .A_BUF_PTR + 1;
			END;

		    C = NEXTCHAR;
		    END;

		END;				! End of main loop

	    !+
	    ! Blank pad the string to a length of 255 bytes.
	    !-

	    IF .STRINGFLAG THEN CH$FILL (%C' ', CH$DIFF (.A_BUF_END, .A_BUF_PTR), .A_BUF_PTR);

	    RETURN K_CHAR;
	    END;

	!+
	! It's an integer or real constant (I hope).
	! Gather the constant and return its type.
	!-

	[OTHERWISE] :
	    BEGIN
	    CTYPE = GETFIELD (DSC);

	    IF .DSC [DSC$W_LENGTH] EQL 0 THEN RETURN K_NULL;

	    END;
	TES;

    !+
    ! Make special case for next (this) character being '*'.  If so,
    ! then this is a repeat count and must be an integer.  If it isn't,
    ! the convert will fail.
    !-

    IF THISCHAR EQLU %C'*'
    THEN
	BEGIN

	IF OTS$CVT_TI_L (DSC, CONSBLOCK [0]) THEN RETURN K_INT;

	!+
	! If we get here, either the field wasn't an integer or it
	! got a conversion error.  In either case, having a type of
	! K_NULL will cause an error eventually.
	!-

	RETURN K_NULL;
	END;

    !+
    ! Now that we have the LOG, INT, or REAL constant (as a string pointed
    ! to by DSC), it must be converted into binary.  Use the library
    ! input conversion routines to store the resultant value into
    ! CONSBLOCK[0].  Return the type of constant seen as routine value.
    !-

    RETURN
	BEGIN

	IF NOT
	    BEGIN

	    SELECTONE .ELEM_TYPE OF
		SET

		[DSC$K_DTYPE_F] :

		    IF .CTYPE EQL K_LOG THEN OTS$CVT_TL_L ELSE OTS$CVT_T_F;

		[DSC$K_DTYPE_D] :

		    IF .CTYPE EQL K_LOG THEN OTS$CVT_TL_L ELSE OTS$CVT_T_D;

		[DSC$K_DTYPE_G] :

		    IF .CTYPE EQL K_LOG THEN OTS$CVT_TL_L ELSE OTS$CVT_T_G;

		[DSC$K_DTYPE_H] :

		    IF .CTYPE EQL K_LOG THEN OTS$CVT_TL_L ELSE OTS$CVT_T_H;

		[OTHERWISE] :

		    CASE .CTYPE FROM K_LOG TO K_REAL OF
			SET

			[K_LOG] :
			    OTS$CVT_TL_L;

			[K_INT] :
			    OTS$CVT_TI_L;

			[K_REAL] :
			    OTS$CVT_T_D;
			TES

		TES

	    END
	    (DSC, CONSBLOCK [0])
	THEN
	    BEGIN
	    CCB [ISB$B_ERR_NO] = FOR$K_LISIO_SYN;
	    K_NULL
	    END
	ELSE
	    .CTYPE

	END;
    END;

ROUTINE GETFIELD (DSC) : CALL_CCB =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Determine the length and type of the field pointed to by LUB$A_BUF_PTR.
!	Point string descriptor DSC to the field.
!	Return the type as the routine value.
!
! FORMAL PARAMETERS:
!
!	DSC.wl.r		String descriptor to point to field
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	Returns the type of constant seen (as a small integer).
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    EXTERNAL REGISTER
	CCB : REF BLOCK [, BYTE];

    MAP
	DSC : REF BLOCK [8, BYTE];

    LOCAL
	T,					! type of constant seen
	C;					! local character holder

    !+
    ! Point the descriptor pointer to the start of the field.
    !-

    DSC [DSC$A_POINTER] = .CCB [LUB$A_BUF_PTR];

    !+
    ! Assume type REAL
    !-

    T = K_REAL;
    C = THISCHAR;

    !+
    ! Skip through the string looking for delimiters.
    ! If a delimiter is seen,
    ! or we hit EOL, we've reached the end of the constant.
    !-

    WHILE .C GEQ 0 DO
	BEGIN

	IF NOT CH$FAIL (CH$FIND_CH (6, UPLIT (' 	,/*)'), .C)) THEN EXITLOOP;

	C = NEXTCHAR;
	END;

    DSC [DSC$W_LENGTH] = CH$DIFF (.CCB [LUB$A_BUF_PTR], .DSC [DSC$A_POINTER]);
    RETURN .T;
    END;

ROUTINE LCL_HANDLER (			! Local handler for conversion routine
	SIG_ARGS,			! Signal Argument list
	MECH_ARGS			! Mechanism Argument list
	) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Resignal Access Violation, otherwise call LIB$SIG_TO_RET.
!
! FORMAL PARAMETERS:
!
!	SIG_ARGS
!	MECH_ARGS
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION CODES:
!
!	Will return any error other than Access Violation as a status
!
! SIDE EFFECTS:
!
!	Resignals Access Violation
!
!--

    BEGIN
    MAP
	SIG_ARGS : REF BLOCK [, BYTE];
!+
! Check to see if the error is Access Violation.  If it is, resignal so that it
! is reported with the proper PC and PSL.  Otherwise, return all other errors as
! statuses.
!-
    IF .SIG_ARGS [CHF$L_SIG_NAME] NEQ SS$_ACCVIO THEN LIB$SIG_TO_RET(SIG_ARGS, MECH_ARGS);
!+
! LIB$SIG_TO_RET will not return to this routine.  If changes the error signal
! to a return status and unwinds to the caller of the establisher of this handler.
!-
    RETURN SS$_RESIGNAL
    END;		! Routine LCL_HANDLER

ROUTINE SKIPBLANKS : CALL_CCB =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Skip over blanks, tabs, and EOLs and return  the first
!	"real" character.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	LUB$A_BUF_PTR		points to first char to scan
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	Return the first real char found.
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Will cause a record to be read if no data is found in the current
!	record.
!
!--

    BEGIN

    EXTERNAL REGISTER
	CCB : REF BLOCK [, BYTE];

    LOCAL
	C;

    WHILE 1 DO
	BEGIN
	C = THISCHAR;

	WHILE .C EQL %C' ' OR .C EQL K_TAB DO
	    C = NEXTCHAR;

	IF .C GEQ 0 THEN RETURN .C;

	FOR$$REC_RSL1 ();
	END;

    RETURN (0);
    END;

ROUTINE DELIM : CALL_CCB =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Process blanks, tabs, EOLs and commas.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	LUB$A_BUF_PTR		points to first char to scan
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	1	if 1 comma encountered
!	0	if no commas or 2 commas (null field)
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    EXTERNAL REGISTER
	CCB : REF BLOCK [, BYTE];

    IF SKIPBLANKS () NEQ %C',' THEN RETURN 0;

    CCB [LUB$A_BUF_PTR] = .CCB [LUB$A_BUF_PTR] + 1;
    RETURN (SKIPBLANKS () NEQ %C',');
    END;
END

ELUDOM
