MODULE STR$POS_EXTR (		! Extract a substring by position

		IDENT = '1-012'	! File: STRPOSEXT.B32	Edit:	RKR1012

		    ) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY: String support library
!
! ABSTRACT:
!
!	This module extracts a substring according to the BASIC-PLUS-2
!	syntax.  It finds the substring of a main string starting at the
!	character position specified by the second input parameter and
!	continues for the number of characters specified by the third
!	input parameter.  This substring is copied to the destination 
!	string.
!
! ENVIRONMENT: User mode, AST level or not or mixed
!
! AUTHOR: R. Will, CREATION DATE: 21-Feb-79
!
! MODIFIED BY:
!
!  R. Will, 28-Feb-79: VERSION 01
! 1-001	- Original
! 1-002	- Change linkage and call to COPY routine.  15-Mar-79  RW
! 1-003	- Make the string linkages start with STR$.  JBS 04-JUN-1979
! 1-004	- Change call to STR$$COPY.  JBS 16-JUL-1979
! 1-005 - Change name to STR$, string cleanup.  RW  1-Nov-79
! 1-006	- Correct psect name.  JBS 02-NOV-1979
! 1-007	- Change to new interlock macros.  JBS 06-NOV-1979
! 1-008 - Use string interlocks in CALL entry.  RW  15-Nov-79
! 1-009 - String speedup, remove edit 8.  RW  8-Jan-1980
! 1-010 - Enhance routine to recognize additional classes of descriptors
!	  by using $STR$GET_LEN_ADDR to extract length and adddress
!	  of 1st byte of source descriptor.  Remove string interlocking
!	  code.  RKR 21-APR-81.
! 1-011 - Speed up code.  RKR 7-OCT-1981.
! 1-012 - Use STR$COPY_R_R8 for copying operation.  Use
!	  $STR$SIGNAL_FATAL instead of $STR$CHECK_STATUS.
!	  RKR 18-NOV-1981.
!--

!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE 
		(EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!

REQUIRE 'RTLIN:STRLNK';		! Use require file with string linkage

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    STR$POS_EXTR,		! Find a substr by position, CALL
    STR$POS_EXTR_R8 : STR$JSB_POS_EXT;	! find a substr by position, JSB

!
! INCLUDE FILES:
!

REQUIRE 'RTLIN:RTLPSECT';	! Declare PSECTs code

REQUIRE 'RTLIN:STRMACROS';	! use string macros to code

LIBRARY 'RTLSTARLE';		! STARLET library for macros and symbol

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! PSECT DECLARATIONS
!

DECLARE_PSECTS (STR);

!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    STR$COPY_R_R8 : STR$JSB_COPY_R ,		! to do copying
    LIB$STOP;					! signal fatal errors

EXTERNAL LITERAL
    STR$_NORMAL,		! successful completion
    STR$_ILLSTRSPE,		! illegal string specification
    STR$_ILLSTRPOS;		! illegal string position

GLOBAL ROUTINE STR$POS_EXTR (		! substring by position

	DEST_DESC,		! Pointer to destination descriptor
	SRC_DESC,		! Pointer to source descriptor
	START_POS,		! First character to be included
	END_POS			! Last character position to include

			    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine extracts the characters starting at the
!	character position in the source string specified by the 3rd 
!	input parameter and continuing to the character position in the
!	source string specified by the 4th input parameter, and copies 
!	that substring to the destination string (by JSB to 
!	STR$COPY_R_R8) according to the syntax of the class of the 
!	destination string.
!	If the starting position is < 1, 1 is used.  If the ending 
!	position is > length of the source string, the length of the 
!	source string is used.  If the starting position > the ending 
!	position, a null string is returned.  The call entry point is 
!	implemented by JSBing to the JSB entry point.
!
! FORMAL PARAMETERS:
!
!	DEST_DESC.wt.dx		pointer to destination string descriptor
!	SRC_DESC.rt.dx		pointer to source string descriptor
!	START_POS.rl.r		character position in src to start 
!				substring
!	END_POS.rl.r		character position in src to end 
!				substring
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION CODES:
!
!	SS$_NORMAL	Success
!	STR$_ILLSTRPOS	Character position reference outside of string
!	STR$_ILLSTRSPE  End pos < start pos, or length too long
!	STR$_NEGSTRLEN	Negative length supplied, 0 used
!	STR$_TRU	Truncation occured in copying to destination
!			(Warning)
!
! SIDE EFFECTS:
!
!	May signal:
!	    STR$_FATINTERR	Fatal internal error
!	    STR$_ILLSTRCLA	Illegal (or unsupported) string class
!	    STR$_INSVIRMEM	Insufficient virtual memory for
!				reallocation of dynamic string
!
!--

    BEGIN

    MAP
	SRC_DESC  : REF $STR$DESCRIPTOR,
	DEST_DESC : REF $STR$DESCRIPTOR;

    RETURN STR$POS_EXTR_R8 ( DEST_DESC [0,0,0,0], 
			     SRC_DESC [0,0,0,0], 
			     ..START_POS, 
			     ..END_POS);
    END;					!End of STR$POS_EXTR

GLOBAL ROUTINE STR$POS_EXTR_R8 (	! extract substring by position

	DEST_DESC, 		! Pointer to destination descriptor
	SRC_DESC,		! Pointer to source descriptor
	START_POS,		! First character to be included
	END_POS			! Last character position to include

			       ) : STR$JSB_POS_EXT =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine extracts the characters starting at the
!	character position in the source string specified by the 3rd 
!	input parameter and continuing to the character position in the
!	source string specified by the 4th input parameter, and copies 
!	that substring to the destination string (by JSB to 
!	STR$COPY_R_R8) according to the syntax of the class of the 
!	destination string.
!	If the starting position is < 1, 1 is used.  If the ending 
!	position is > length of the source string, the length of the 
!	source string is used.  If the starting position > the ending 
!	position, a null string is returned.
!
! FORMAL PARAMETERS:
!
!	DEST_DESC.wt.dx		pointer to destination string descriptor
!	SRC_DESC.rt.dx		pointer to source string descriptor
!	START_POS.rl.v		character position in src to start 
!				substring
!	END_POS.rl.v		character position in src to end 
!				substring
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION CODES:
!
!	SS$_NORMAL	Success
!	STR$_ILLSTRPOS	Character position reference outside of string
!	STR$_ILLSTRSPE  End pos < start pos, or length too long
!	STR$_NEGSTRLEN	Negative length supplied, 0 used
!	STR$_TRU	Truncation occured in copying to destination
!			(Warning)
!
! SIDE EFFECTS:
!
!	May signal:
!	    STR$_FATINTERR	Fatal internal error
!	    STR$_ILLSTRCLA	Illegal (or unsupported) string class
!	    STR$_INSVIRMEM	Insufficient virtual memory for
!				reallocation of dynamic string
!
!--

    BEGIN

    LOCAL
	IN_LEN,				! length of source string
	IN_ADDR, 			! addr of 1st byte of source
	ACTUAL_START,			! MAX (1, .START_POS)
	LENGTH,				! length to copy
	COPY_STATUS,			! status returned by copy
	RETURN_STATUS;			! save status for this routine

    MAP
	SRC_DESC  : REF $STR$DESCRIPTOR,
	DEST_DESC : REF $STR$DESCRIPTOR;

    RETURN_STATUS = 1 ;		! Assume success to follow

!+
! Extract length and address of 1st byte of source string.
!-
    $STR$GET_LEN_ADDR ( SRC_DESC, IN_LEN, IN_ADDR ) ;

    ACTUAL_START = .START_POS;

!+
! length is >=0 and the smaller of the 
! (input end_pos and src len) - start pos (must be >0) + 1
!-
    LENGTH = 1 +			! length = end - start + 1
	BEGIN
	IF .IN_LEN LSS .END_POS
	THEN
	    BEGIN
	    RETURN_STATUS = STR$_ILLSTRPOS;	! END_POS is too large

	    .IN_LEN				! use srclen, remember 
						! error
	    END
	ELSE 
	    .END_POS				! use specified
	END

	-

	BEGIN
	IF .START_POS LSS 1
	THEN
	    BEGIN
	    RETURN_STATUS = STR$_ILLSTRPOS;	! START_POS is too small
	    ACTUAL_START = 1;			! use 1, remember error
	    1
	    END
	ELSE 
	    .START_POS				! use specified
	END;

    IF .LENGTH LSS 0 THEN
	BEGIN
	LENGTH = 0;
	RETURN_STATUS = STR$_ILLSTRSPE;		! START_POS > END_POS
	END;					! null string, remember
						! error

!+
! Copy to destination descriptor for length as computed above.
! Input pointer is  the sum - 1 of the source pointer and input
! start position ( which must be > 0).
!-

    COPY_STATUS = 
		STR$COPY_R_R8 ( .DEST_DESC, .LENGTH, 
				CH$PLUS (.IN_ADDR, .ACTUAL_START - 1) );

    IF .COPY_STATUS NEQ SS$_NORMAL
    THEN RETURN_STATUS = .COPY_STATUS;		! copy truncated, 
						! return truncate
						! instead of previous 
						! status

    $STR$SIGNAL_FATAL (RETURN_STATUS);		! signal fatal errors
    RETURN .RETURN_STATUS;
    END;					!End of STR$POS_EXTR_R8

END						!End of module

ELUDOM
