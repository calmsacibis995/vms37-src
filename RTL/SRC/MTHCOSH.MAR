	.TITLE	MTH$COSH 	; Floating Point Hyperbolic Cosine routine
				; (COSH)
	.IDENT /1-006/		; File: MTHCOSH.MAR  Edit: RNH1006
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;
; FACILITY: MATH LIBRARY
;++
; ABSTRACT:
;
; MTH$COSH is a function  which  returns the floating point hyperbolic cosine
; of its single precision floating point argument. The call is standard
; call-by-reference.
;
;--
;
; VERSION: 01
;
; HISTORY:
; AUTHOR:
;	Peter Yuo, 29-Jun-77: Version 01
;
; MODIFIED BY:
;
;
;

	.SBTTL	HISTORY	; Detailed Current Edit History


; ALGORITHMIC DIFFERENCES FROM FP-11/C ROUTINE:	none
;
; Edit History for Version 01 of MTH$COSH 
;
; 0-2	MTH$$ERROR changed to MTH$$SIGNAL.
;	MTH$_... changed to MTH__....
;	Changed error handling mechanism. Put error result in R0 before 
;	calling MTH$$SIGNAL in order to allow user modify error result.
;
;0-3	Series changed from four term Taylor series to four term
;	Chebyshev series, to improve accuracy. 18-May-1978; Mary Payne
; 1-001	- Update copyright notice and version number.  JBS 16-NOV-78
; 1-002	- Change MTH__FLOOVEMAT to MTH$K_FLOOVEMAT.  JBS 07-DEC-78
; 1-003	- Remove $SRMDEF macro -- not needed.  JBS 16-DEC-78
; 1-004	- Add "_" to the PSECT directive.  JBS 21-DEC-78
; 1-005 - Declare externals.  SBL 17-May-1979
; 1-006 - Changed lower limit for Chebyshev approximation from 2**-11 to
;	  2**-12.
;	- Eliminated second call to EXP for input values between .25 and
;	  12.5*ln2 by computing COSH(x) = (Z + 1/Z)/2, with Z = EXP(|x|).
;	- Eliminated second call to EXP for input values between 12.5*ln2
;	  and 127*ln2.
;	- Changed all final floating point divisions by 2 to interger 
;	  subrtracts of 1 from the exponent field.
;	- Changed entry mask to excluded R5 - no longer needed.
;	- Extended maximum range from 87.69 to 128*ln2=88.72.
;	- Chaneged logic for computing EXP(|x|-ln2) to reduce error.
;	- RNH 10-FEB-81

	.SBTTL	DECLARATIONS	; Declarative Part of Module

;
; INCLUDE FILES:
;

;
; EXTERNAL SYMBOLS:
;
	.DSABL	GBL
	.EXTRN	MTH$EXP_R4
	.EXTRN	MTH$K_FLOOVEMAT
	.EXTRN	MTH$$SIGNAL

;
; EQUATED SYMBOLS:

	LF_LOG_2_HI	= ^X72804031	; high 17 bit of ln2 + 2**-17
	LF_LOG_2_LO	= ^X105CB7D0	; ln2 - LF_LOG_2_HI
	LF_2_POWER_12.5	= ^X04F346B5	; 2**12.5 = 5792.6188
	LF_127_LOG_2	= ^X0F3343B0	; 127*ln2 = 88.029613
	LF_128_LOG_2    = ^X721743B1	; 128*ln2 = 88.722839
	SF_1.0	= ^F1.0			; 1.0
	value	= 4			; value.rf.r

;
; MACROS:
;



;
;
; PSECT DECLARATIONS:

	.PSECT	_MTH$CODE	PIC,SHR,LONG,EXE,NOWRT
					; program section for math routines
;
; OWN STORAGE:	none
;
;
; CONSTANTS:
;

COSHTAB:
	.WORD	^O035666,^O071601	; DECIMAL: 0.1391992E-02
	.WORD	^O37052,^O125212	; DECIMAL: 0.416654E-01
	.WORD	^O040000,0		; DECIMAL: 0.5000000E+00
	.WORD	^O040200,0		; DECIMAL: 0.1000000E+01
  
COSHLEN	= .- COSHTAB/4


	.SBTTL	MTH$COSH  - Standard Single Precision Floating COSH


;++
; FUNCTIONAL DESCRIPTION:
;
; COSH  - single precision floating point function
;
; COSH(X) is computed as:
;
;	If |X| < 2**-12, COSH(X) = 1.
;	IF 2**-12 =< |X| < 0.25, COSH(X) = Chebyshev series
;	If 0.25 =< |X| =< 8.6643975, set Z = EXP(|X|), and compute
;	    COSH(X) = (Z + 1/Z)/2
;	If 8.6643975 < |X| < 88.029613 then COSH(X) = EXP(|X|)/2
;	If 88.029613 < |X| < 88.722839 then COSH(X) = EXP(|X|-ln2)
;	If 88.722839 <= |X| overflow is signaled
;
; CALLING SEQUENCE:
;
;	COSH.wf.v = MTH$COSH(x.rf.r)
;
; INPUT PARAMETERS:

	LONG = 4			; define longword multiplier
	x = 1 * LONG			; Contents of x is the argument

; IMPLICIT INPUTS:	none
;
; OUTPUT PARAMETERS:
;
;	VALUE:	floating hyperbolic cosine of the argument
;
; IMPLICIT OUTPUTS:	none
;
; COMPLETION CODES:	none
;
; SIDE EFFECTS:
;
; Signal: MTH$_FLOOVEMAT if 88.722839 <= |X| with reserved operand in R0
; (copied to the signal mechanism vector CHF$L_MCH_R0/R1 by LIB$SIGNAL).
; Associated message is: "FLOATING OVERFLOW IN MATH LIBRARY". Result is reserved
; operand -0.0 unless a user supplied (or any) error handler changes CHF$L_MCH_R0/R1.
;
; NOTE: This procedure disables floating point underflow, enables integer
; overflow.
;
;---


	.ENTRY	MTH$COSH, ^M<IV ,R2, R3, R4>
					; standard call-by-reference entry
					; disable DV (and FU), enable IV
	MTH$FLAG_JACKET			; flag that this is a jacket procedure in
					; case of an error in routine
					; If an error, convert signal to user PC
					; and resignal
	MOVF	@value(AP), R0		; R0 = X = @value(AP)
	BICW2	#^X8000, R0		; R0 = |X|
	CMPW	R0, #^X3F80		; compare |X| with 0.25
	BGEQ	GEQ_TO_0.25		; branch if |X| >= 0.25

;
; |X| < 0.25
;

	CMPW	R0, #^X3A80		; compare |X| with 2**-12
	BGEQ	GEQ_TO_2M12		; branch if |X| >= 2**-12

;
; |X| < 2**-12
;

	MOVF	S^#SF_1.0, R0		; R0 = 1.0
	RET				; return with result = 1.0

;
; 2**-12 =< |X| < 0.25
;

GEQ_TO_2M12:
	MULF	R0,R0			; Get ARG**2 for POLYF
	POLYF	R0, #COSHLEN-1, COSHTAB	; R0 = SUM(Ci*X**(2*i))
					; Last coefficient of 1.0
					; provides overhang.
	RET				; return with result in R0

;
; 0.25 =< |X|
;

GEQ_TO_0.25:
	CMPF	R0, #LF_127_LOG_2	; compare |X| with 127*ln2
	BGTR	GTR_THAN_127_LOG_2	; branch if |X| > 127*ln2

;
; 0.25 =< |X| =< 127*ln2
;

	JSB	MTH$EXP_R4		; R0 = EXP(|X|)
	CMPF	R0, #LF_2_POWER_12.5	; compare EXP(|X|) with 2**12.5
	BGTR	ONE_TERM_ONLY		; If smaller EXP(-|X|) is significant
					; and must be added in
	DIVF3	R0, #SF_1.0, R1		; R1 = EXP(-|X|)
	ADDF	R1, R0			; R0 = EXP(X) + EXP(-X)
ONE_TERM_ONLY:
	SUBW	#^X0080, R0		; R0 = (EXP(X) + EXP(-X))/2
	RET				; return with result in R0


;
; 127*ln2 < |X|
;

GTR_THAN_127_LOG_2:
	CMPF 	R0, #LF_128_LOG_2	; Check for possible overflow
	BGTR 	ERROR			; If greater, COSH(X) will overflow
	SUBF	#LF_LOG_2_HI, R0	; R0 = |X| - (high order bits of ln2)
	JSB	MTH$EXP_R4		; R0 = EXP(|X|-LF_LOG_2_HI)
	MULF3	#LF_LOG_2_LO, R0, R1	; 
	SUBF	R1, R0			;
	RET



;
; 128*ln2 =< |X|, error
;

ERROR:	MOVZBL	#MTH$K_FLOOVEMAT, -(SP)	; condition value
	ASHL	#15, #1, R0		; R0 = result = reserved operand -0.0
					; goes to signal mechanism vector
					; (CHF$L_MCH_R0/R1) so error handler
					; can modify the result.
	CALLS	#1, G^MTH$$SIGNAL	; signal error and use real user's PC
					; independent of CALL vs JSB
	RET				; return - R0 restored from CHF$L_MCH_R0/R1



	.END
