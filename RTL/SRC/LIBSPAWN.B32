%TITLE 'LIB$SPAWN - Spawn command subprocess'
MODULE LIB$SPAWN (				!
		IDENT = '1-002'			! File: LIBSPAWN.B32 Edit: SBL1002
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	General Utility Library
!
! ABSTRACT:
!
!	This module contains LIB$SPAWN, a procedure to spawn
!	a command subprocess
!
! ENVIRONMENT:	User mode - AST reentrant
!
! AUTHOR: Steven B. Lionel, CREATION DATE: 15-Dec-1981
!
! MODIFIED BY:
!
! 1-001	- Original.  SBL 15-Dec-1981
! 1-002 - Remove CLI_NAME parameter.  Set EFN to -1 if omitted.
!	  Improve comments.  SBL 4-Jan-1982
!--


%SBTTL 'Declarations'
!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!

LINKAGE
    JSB_ANALYZE_SDESC = JSB (REGISTER=0; REGISTER=1, REGISTER=2) :
    			    NOTUSED (3,4,5,6,7,8,9,10,11);
!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    LIB$SPAWN;					! Spawn command subprocess

!
! INCLUDE FILES:
!

LIBRARY 'RTLSTARLE';				! System symbols, typically from SYS$LIBRARY:STARLET.L32

REQUIRE 'RTLIN:RTLPSECT';			! Define PSECT declarations macros

REQUIRE 'RTLML:CLIMSG';				! CLI$_ messages

!
! MACROS:
!
!	MACRO MOVEDESC builds a S-type string descriptor at _TO
!	which points to the same data area as that pointed to by 
!	the string descriptor at _FROM.  NB: since the _TO
!	descriptor will be used only by SYS$CLI which ignores the
!	DTYPE and CLASS fields, only the LENGTH and POINTER fields
!	are built by MOVEDESC.
!
    MACRO MOVEDESC (_FROM, _TO) =
	BEGIN
	REGISTER
	    RET_STATUS = 0;
	RET_STATUS = LIB$ANALYZE_SDESC_R2 ( _FROM;
	 BLOCK [_TO, DSC$W_LENGTH; , BYTE],
	 BLOCK [_TO, DSC$A_POINTER; , BYTE] );
	IF NOT .RET_STATUS
	THEN
	    RETURN (.RET_STATUS);
	END%;

!
! EQUATED SYMBOLS:
!
!	NONE
!
! FIELDS:
!
!	NONE
!
! PSECTS:
!

DECLARE_PSECTS (LIB);				! Declare PSECTs for LIB$ facility

!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    LIB$ANALYZE_SDESC_R2: JSB_ANALYZE_SDESC,	! Analyze string descriptor
    SYS$CLI;					! Request CLI callback

EXTERNAL LITERAL 				! Condition value symbols
    LIB$_INVARG,				! Invalid argument
    LIB$_NOCLI;					! No CLI present


%SBTTL 'LIB$SPAWN - Spawn command subprocess'
GLOBAL ROUTINE LIB$SPAWN (
	COMMAND_STRING: REF BLOCK [, BYTE],
	INPUT_FILE: REF BLOCK [, BYTE],
	OUTPUT_FILE: REF BLOCK [, BYTE],
	FLAGS: REF BLOCK [, BYTE],
	PROCESS_NAME: REF BLOCK [, BYTE],
	PROCESS_ID: REF VECTOR [, LONG],
	PROCESS_STATUS: REF VECTOR [, LONG],
	TERMINATION_EFN: REF VECTOR [, BYTE],
	TERMINATION_ASTADR,
	TERMINATION_ASTPRM
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	LIB$SPAWN requests the calling process's Command Language Interpreter 
!	(CLI) to spawn a subprocess for executing CLI commands.  It provides 
!	the same function as the DCL SPAWN command.
!
! CALLING SEQUENCE:
!
!	status.wlc.v = LIB$SPAWN ([command_string.rt.dx] 
!	[, [input_file.rt.dx] [, [output_file.rt.dx] 
!	[, [flags.rlu.r] [, [process_name.rt.dx]
!	[, [out_pid.wlu.r] [, [process_status.wlc.r]
!	[, [termination_efn.rbu.r] [, [termination_astadr.szem.r]
!	[, termination_astprm.rz.v]]]]]]]]]]])
!
! FORMAL PARAMETERS:
!
!   COMMAND_STRING
!	A CLI command to be executed by the spawned subprocess, 
!	passed by descriptor. This is an optional parameter.  If omitted, 
!	commands are taken from the file specified by input-file.  
!
!   INPUT_FILE
!	An equivalence name to be associated with the logical name 
!	SYS$INPUT in the logical name table for the subprocess, passed 
!	by descriptor.  This is an optional parameter.  If omitted, 
!	the default is the parent terminal.
!
!   OUTPUT_FILE
!	An equivalence name to be associated with the logical name 
!	SYS$OUTPUT in the logical name table for the subprocess, passed 
!	by descriptor.  This is an optional parameter.  If omitted, 
!	the default is the parent terminal.
!
!   FLAGS
!	A longword of flag-bits designating optional behavior, passed by 
!	reference. This is an optional parameter.  If omitted, the 
!	default is that all flags are zero.  The flags defined are:
!	   Bit 0 - NOWAIT
!		If set, the calling process continues executing in 
!		parallel with the subprocess.  If clear, the calling 
!		process hibernates until the subprocess completes.  
!	   Bit 1 - NOCLISYM
!		If set, the spawned subprocess does not inherit CLI symbols
!		from its caller.  If clear, the subprocess inherits all
!		currently defined CLI symbols.
!	   Bit 2 - NOLOGNAM
!		If set, the spawned subprocess does not inherit process
!		logical names from its caller.  If clear, the subprocess
!		inherits all currently defined process logical names.
!	Bits 3 through 31 are reserved for future expansion and must be zero.
!
!   PROCESS_NAME
!	The name desired for the subprocess, passed by descriptor.  
!	This is an optional parameter.  If omitted, a unique process 
!	name will be generated.
!
!   OUT_PID
!	The longword to receive the process identification of the 
!	spawned subprocess, passed by reference.  This is an optional 
!	parameter.  This value is only meaningful if the NOWAIT flags 
!	bit is set.
!
!   PROCESS_STATUS
!	The longword to receive the spawned subprocess' final termination
!	status, passed by reference.  This is an optional parameter.
!	If the NOWAIT flags bit is set, this value is not stored until the
!	subprocess terminates.
!
!   TERMINATION_EFN
!	The unsigned byte number of a local event flag to be set when the
!	spawned subprocess terminates, passed by reference.  This is an
!	optional parameter.  If omitted, no event flag is set. Specifying this 
!	parameter is only meaningful if the NOWAIT flags bit is set.
!
!   TERMINATION_ASTADR
!	The entry mask of a procedure to be called by means of an AST when
!	the subprocess terminates, passed by reference.  This is an optional
!	parameter.  Specifying this parameter is only meaningful if the
!	NOWAIT flags bit is set.
!
!   TERMINATION_ASTPRM
!	A value to be passed to the procedure specified by TERMINATION_ASTADR
!	as an AST routine parameter.  Typically, this would be the address of
!	a block of storage to be read or written by the AST procedure.  This
!	is an optional parameter.  Specifying this parameter is only meaningful
!	if the NOWAIT flags bit is set and if TERMINATION_ASTADR has been
!	specified.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS:
!
!	SS$_NORMAL	Normal successful completion
!	SS$_ACCVIO	Access violation
!	SS$_DUPLNAM	Duplicate process name
!	LIB$_INVARG	Invalid argument
!	LIB$_NOCLI	No CLI to perform function
!	fac$_xxx	Other error trying to create subprocess
!
! SIDE EFFECTS:
!
!	A command subprocess is spawned.  The caller's process hibernates
!	until the subprocess exits or until an ATTACH back to the calling
!	process is done, unless NOWAIT is specified.
!
!--

    BEGIN

    BUILTIN
	NULLPARAMETER;				

    LOCAL
	CLI_DESC: BLOCK [CLI$K_SRVDESC, BYTE],	! CLI service descriptor
	RETURN_STATUS: BLOCK [4, BYTE];

    !+
    ! Initialize service request descriptor
    !-

    CH$FILL (0, CLI$K_SRVDESC, CLI_DESC);
    CLI_DESC [CLI$B_RQTYPE] = CLI$K_CLISERV;
    CLI_DESC [CLI$W_SERVCOD] = CLI$K_SPAWN;

    !+
    ! Fill in request descriptor from arguments.
    !-

    !+
    ! CLI$Q_CMDSTR is descriptor of command string.
    !-
    IF NOT NULLPARAMETER (1)
    THEN
	MOVEDESC (COMMAND_STRING [0,0,0,0], CLI_DESC [CLI$Q_CMDSTR]);

    !+
    ! CLI$Q_INPUT is descriptor of SYS$INPUT equivalence name.
    !-
    IF NOT NULLPARAMETER (2)
    THEN
	MOVEDESC (INPUT_FILE [0,0,0,0], CLI_DESC [CLI$Q_INPUT]);

    !+
    ! CLI$Q_OUTPUT is descriptor of SYS$OUTPUT equivalence name.
    !-
    IF NOT NULLPARAMETER (3)
    THEN
	MOVEDESC (OUTPUT_FILE [0,0,0,0], CLI_DESC [CLI$Q_OUTPUT]);

    !+
    ! Currently, only a byte of flags is defined in the SPAWN service
    ! request descriptor.  This may be expanded in future versions.
    !-
    IF NOT NULLPARAMETER (4)
    THEN
	BEGIN
	IF .FLAGS [0,3,29,0] NEQU 0
	THEN
	    RETURN LIB$_INVARG;
	CLI_DESC [CLI$B_FLAGS] = .FLAGS [0,0,8,0];
	END;

    !+
    ! CLI$Q_PRCNAM is descriptor of process name.
    !-
    IF NOT NULLPARAMETER (5)
    THEN
	MOVEDESC (PROCESS_NAME [0,0,0,0], CLI_DESC [CLI$Q_PRCNAM]);

    !+
    ! CLI$L_LSTATUS is address of longword where the subprocess' final
    ! termination status is to be stored.  If NOWAIT is specified, the
    ! value is not stored until the subprocess actually terminates.
    !-
    IF NOT NULLPARAMETER (7)
    THEN
	CLI_DESC [CLI$L_LSTSTATUS] = PROCESS_STATUS [0];

    !+
    ! CLI$B_EFN is the number of the local event flag to set upon
    ! termination of the subprocess.  If -1, no event flag is set.
    !-
    IF NOT NULLPARAMETER (8)
    THEN
	CLI_DESC [CLI$B_EFN] = .TERMINATION_EFN [0]
    ELSE
	CLI_DESC [CLI$B_EFN] = -1;

    !+
    ! CLI$L_ASTADR is the address of the AST routine's entry mask.
    !-
    IF NOT NULLPARAMETER (9)
    THEN
	CLI_DESC [CLI$L_ASTADR] = .TERMINATION_ASTADR;

    !+
    ! CLI$L_ASTPRM is the AST routine parameter.
    !-
    IF NOT NULLPARAMETER (10)
    THEN
	CLI_DESC [CLI$L_ASTPRM] = .TERMINATION_ASTPRM;

    !+
    ! Call CLI with request.
    !-

    RETURN_STATUS = SYS$CLI (CLI_DESC);

    !+
    ! Adjust error return status, if any.
    !-

    IF NOT .RETURN_STATUS
    THEN
	BEGIN
	IF .RETURN_STATUS EQLU CLI$_INVREQTYP
	THEN
	    RETURN_STATUS = LIB$_NOCLI;
	END
    ELSE
	RETURN_STATUS = SS$_NORMAL;

    !+
    ! Store output arguments.
    !-

    IF NOT NULLPARAMETER (6)
    THEN
	PROCESS_ID [0] = .CLI_DESC [CLI$L_OUTPID];


    RETURN .RETURN_STATUS;

    END;					! End of routine LIB$SPAWN
!<BLF/PAGE>

END						! End of module LIB$SPAWN

ELUDOM
