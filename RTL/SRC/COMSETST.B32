MODULE COM$$ERRSET_TST (			! FORTRAN compatibility error set and test (ERRTST/ERRSET)
		IDENT = '1-022'			! File: COMSETST.B32  Edit: SBL1022
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  FORTRAN compatibility Library
!
! ABSTRACT:
!
!	FORTRAN compatibility error set and test and condition handler.
!	FOR$$COM_HANDLE performs default error handling
!	which creates an environment compatible with the PDP-11
!	FORTRAN IV-PLUS error environment.
!	This environment is only created if the user has a:
!	CALL ERRTST or CALL ERRSET in his program.
!
! ENVIRONMENT:  User Mode - AST re-entrant
!
! AUTHOR:  Thomas N. Hastings, CREATION DATE:  14-Dec-1977
!
! MODIFIED BY:
!
! 	Thomas N. Hastings, 14-Dec-1977: VERSION 0
! [Previous edit history removed.  SBL 11-Nov-1980]
! 1-13	- Change file name to COMSETST.B32, and change the names of
!	   the REQUIRE files similarly.  JBS 14-NOV-78
! 1-014	- Update the copyright notice.  JBS 16-NOV-78
! 1-015	- Change the REQUIRE file names from FOR... to OTS...  JBS 07-DEC-78
! 1-016 - Add error numbers 49-57. SBL 09-Feb-1979
! 1-017 - Rename errors 36, 50.  SBL 6-Apr-79
! 1-018 - Change error 93 to allow continuation.  SBL 25-May-1979
! 1-019	- Correct a typo in the PSECT declaration that was not caught by
!	   earlier BLISS compilers.  Also, remove unnecessary REQUIRE
!	   files and put through PRETTY.  JBS 06-SEP-1979
! 1-020	- Change MTH$K_SINCOSSIG to MTH$K_SIGLOSMAT.  JBS 19-SEP-1979
! 1-021 - Add handling of floating faults.  Update names of error
!	  codes to match latest list.  SBL 20-Nov-1979
! 1-021 - Add errors 17-19.  SBL 11-Nov-1980
!--

!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    COM_STARTUP,				! Compatibility startup routine
    COM_HANDLER;				! FORTRAN compatibility error handler

!
! INCLUDE FILES:
!

REQUIRE 'RTLIN:COMEST';				! Common ERRTST, ERRSET macros

REQUIRE 'RTLML:FORERR';				! FORTRAN error numbers

REQUIRE 'RTLIN:RTLPSECT';			! Define DECLARE_PSECTS macro

REQUIRE 'RTLML:MTHERR';				! Math library error numbers

LIBRARY 'RTLSTARLE';				! STARLET library for macros and symbols

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!

LITERAL
    S_SEVERITY = 3,				! size of condition value severity field
    K_ERROR_LIMIT = 15;				! initial image error count limit

!
! OWN STORAGE:
!
!	NONE
!
!   PSECT DECLARATIONS:
!

PSECT
    PLIT = LIB$INITIALIZE ( READ, NOWRITE, NOEXECUTE, NOSHARE, NOPIC, CONCATENATE, GLOBAL, ALIGN (2),
    ADDRESSING_MODE (GENERAL));

!+
! Make LIB$INITIALIZE PSECT contribution so LIBINITIALIZE will call
! COM_STARTUP which will setup default handler and co-routine back.
! Don't use LIB$INITIALIZD_ PSECT, since that for Common Run-time library standard features.
!-

BIND
    VECT = UPLIT (COM_STARTUP);

!+
! Now declare usual PSECTs
!-
DECLARE_PSECTS (F4PCOMPAT);			! declare PSECTs for F4PCOMPAT$ facility
						! Keep separate from sharable library

GLOBAL
    COM$$ERRORCOUNT : INITIAL (K_ERROR_LIMIT) VOLATILE;	! Image error count limit.

						! Decremented  by COM_HANDLER.
						! EXIT on continuable error if 0.
!+
!	Define FORTRAN compatibility error byte table
!	One byte per FORTRAN error number.
!
!	Define macro to generate byte data for initializing OWN COM$$ERR_TAB.
!-

MACRO
    A (OCCURRED, 				! error occurred since last CALL ERRTST
	EREQ_ALLOW, 				! ERR= allowed
	CONT_ALLOW, 				! continue allowed
	LOG, 					! print error message
	CONT_TYPE, 				! 1 = take ERR= if present, else EXIT; 0 = continue
	COUNT, 					! count against image limit
	CONTINUE				! 1 = continuable (or ERR=), 0 = EXIT
    ) =
		(OCCURRED^7 + EREQ_ALLOW^6 + CONT_ALLOW^5 +
		LOG^3 + CONT_TYPE^2 + COUNT^1 + CONTINUE) %;

!+
! Statically allocate a byte table, one byte for each FORTRAN error number
! Each byte contains the error control status bits.
!-

GLOBAL
    COM$$ERR_TAB : BLOCKVECTOR [FOR$K_MAX_ERR + 1, 1, BYTE] INITIAL (BYTE (

	!+
	! O E C L C C C
	! C R O O O O O
	! C E N G N U N
	! U Q T   T N T
	! R _ _   _ T I
	! R A A   T   N
	! E L L   Y   U
	! D L L   P   E
	!   O O   E
	!   W W
	!-

	0,			! 0
	A(0,1,0,1,1,1,1),	! NOTFORSPE,	1	! NOT A FORTRAN-SPECIFIC ERROR
				! Used as a catch-all error number
				! for error other than FOR$ and MTH$
	REP 17-1-1 OF BYTE (0),	! skip 2-16
	A(0,1,0,1,1,1,1),	! SYNERRNAM,	17	! SYNTAX ERROR IN NAMELIST
	A(0,1,0,1,1,1,1),	! TOOMANVAL,	18	! TOO MANY VALUES IN NAMELIST
	A(0,1,0,1,1,1,1),	! INVREFVAR,	19	! INVALID REFERENCE TO VARIABLE
	A(0,1,0,1,1,1,1),	! REWERR,	20	! REWIND ERROR
	A(0,1,0,1,1,1,1),	! DUPFILSPE,	21	! DUPLICATE FILE SPECIFICATIONS
	A(0,1,0,1,1,1,1),	! INPRECTOO,	22	! INPUT RECORD TOO LONG
	A(0,1,0,1,1,1,1),	! BACERR,	23	! BACKSPACE ERROR
	A(0,1,0,1,1,1,1),	! ENDDURREA,	24	! END-OF-FILE DURING READ
	A(0,1,0,1,1,1,1),	! RECNUMOUT,	25	! RECORD NUMBER OUTSIDE RANGE
	A(0,1,0,1,1,1,1),	! OPEDEFREQ,	26	! OPEN OR DEFINEFILE REQUIRED TO SPECIFY DIRECT OR KEYED ACCESS
	A(0,1,0,1,1,1,1),	! TOOMANREC,	27	! TOO MANY RECORDS IN I/O STATEMENT
	A(0,1,0,1,1,1,1),	! CLOERR,	28	! CLOSE ERROR
	A(0,1,0,1,1,1,1),	! FILNOTFOU,	29	! FILE NOT FOUND
	A(0,1,0,1,1,1,1),	! OPEFAI,	30	! OPEN FAILURE
	A(0,1,0,1,1,1,1),	! MIXFILACC,	31	! MIXED FILE ACCESS MODES
	A(0,1,0,1,1,1,1),	! INVLOGUNI,	32	! INVALID LOGICAL UNIT NUMBER
	A(0,1,0,1,1,1,1),	! ENDFILERR,	33	! ENDFILE ERROR
	A(0,1,0,1,1,1,1),	! UNIALROPE,	34	! UNIT ALREADY OPEN
	A(0,1,0,1,1,1,1),	! SEGRECFOR,	35	! SEGMENTED RECORD FORMAT ERROR
	A(0,1,0,1,1,1,1),	! ATTACCNON,	36	! ATTEMPT TO ACCESS NON-EXISTENT RECORD
	A(0,1,0,1,1,1,1),	! INCRECLEN,	37	! INCONSISTENT RECORD LENGTH
	A(0,1,0,1,1,1,1),	! ERRDURWRI,	38	! ERROR DURING WRITE
	A(0,1,0,1,1,1,1),	! ERRDURREA,	39	! ERROR DURING READ
	A(0,1,0,1,1,1,1),	! RECIO_OPE,	40	! RECURSIVE I/O OPERATION
	A(0,1,0,1,1,1,1),	! INSVIRMEM,	41	! INSUFFICIENT VIRTUAL MEMORY
	A(0,1,0,1,1,1,1),	! NO_SUCDEV,	42	! NO SUCH DEVICE 
	A(0,1,0,1,1,1,1),	! FILNAMSPE,	43	! FILE NAME SPECIFICATION ERROR 
	A(0,1,0,1,1,1,1),	! INCRECTYP,	44	! INCONSISTENT RECORD TYPE
	A(0,1,0,1,1,1,1),	! KEYVALERR,	45	! KEYWORD VALUE ERROR IN OPEN STATEMENT
	A(0,1,0,1,1,1,1),	! INCOPECLO,	46	! INCONSISTENT OPEN/CLOSE PARAMETERS
	A(0,1,0,1,1,1,1),	! WRIREAFIL,	47	! WRITE TO READONLY FILE
	A(0,1,0,1,1,1,1),	! INVARGFOR,	48	! INVALID ARGUMENT TO FORTRAN I/O LIBRARY
	A(0,1,0,1,1,1,1),	! INVKEYSPE,	49	! INVALID KEY SPECIFICATION
	A(0,1,0,1,1,1,1),	! INCKEYCHG,	50	! INCONSISTENT KEY CHANGE OR DUPLICATE KEY
	A(0,1,0,1,1,1,1),	! INCFILORG,	51	! INCONSISTENT FILE ORGANIZATION
	A(0,1,0,1,1,1,1),	! SPERECLOC,	52	! SPECIFIED RECORD LOCKED
	A(0,1,0,1,1,1,1),	! NO_CURREC,	53	! NO CURRENT RECORD
	A(0,1,0,1,1,1,1),	! REWRITERR,	54	! REWRITE ERROR
	A(0,1,0,1,1,1,1),	! DELERR,	55	! DELETE ERROR
	A(0,1,0,1,1,1,1),	! UNLERR,	56	! UNLOCK ERROR
	A(0,1,0,1,1,1,1),	! FINERR,	57	! FIND ERROR
	0,			! Unused: 58
	A(0,1,1,1,1,0,1),	! LISIO_SYN,	59	! LIST-DIRECTED I/O SYNTAX ERROR
	A(0,1,0,1,1,1,1),	! INFFORLOO,	60	! INFINITE FORMAT LOOP
	A(0,1,1,1,1,1,1),	! FORVARMIS,	61	! FORMAT/VARIABLE-TYPE MISMATCH
	A(0,1,0,1,1,1,1),	! SYNERRFOR,	62	! SYNTAX ERROR IN FORMAT
	A(0,1,1,1,0,0,1),	! OUTCONERR,	63	! OUTPUT CONVERSION ERROR
	A(0,1,1,1,1,1,1),	! INPCONERR,	64	! INPUT CONVERSION ERROR

	0,			! skip 65

	A(0,1,0,1,1,1,1),	! OUTSTAOVE,	66	! OUTPUT STATEMENT OVERFLOWED RECORD
	A(0,1,0,1,1,1,1),	! INPSTAREQ,	67	! INPUT STATEMENT REQUIRED TOO MUCH DATA
	A(0,1,1,1,1,1,1),	! VFEVALERR,	68	! VARIABLE FORMAT EXPRESSION VALUE ERROR

	0,			! skip 69

	A(0,0,1,1,0,1,1),	! INTOVF,	70	! INTEGER OVERFLOW
	A(0,0,1,1,0,1,1),	! INTZERDIV,	71	! INTEGER ZERO DIVIDE
	A(0,0,1,1,0,1,1),	! FLOOVE,	72	! FLOATING OVERFLOW
	A(0,0,1,1,0,1,1),	! FLOZERDIV,	73	! FLOATING ZERO DIVIDE
	A(0,0,1,1,0,1,1),	! FLOUND,	74	! FLOATING UNDERFLOW

	0,			! skip 75

	A(0,0,1,1,0,1,1),	! DECSTROVE,	76	! DECIMAL STRING OVERFLOW
	A(0,0,1,1,0,1,1),	! ARRREFOUT,	77	! ARRAY REFERENCE OUTSIDE ARRAY

	0,0,			! skip 78, 79

	A(0,0,0,1,0,1,1),	! WRONUMARG, 	80	! wrong number of arguments
	A(0,0,0,1,0,1,1),	! INVARGMTH, 	81	! invalid argument to math library
	A(0,0,1,1,0,1,1),	! UNDEXP, 	82	! undefined exponentiation
	A(0,0,1,1,0,1,1),	! LOGZERNEG, 	83	! logarithm of zero or negative value
	A(0,0,1,1,0,1,1),	! SQUROONEG, 	84	! square root of negative value

	0, 0,			! Skip 85 and 86 (used on PDP-11),

	A(0,0,1,1,0,1,1),	! SIGLOSMAT, 	87	! significance lost in math library
	A(0,0,1,1,0,1,1),	! FLOOVEMAT, 	88	! floating overflow in math library
	A(0,0,1,1,0,1,1),	! FLOUNDMAT, 	89	! floating underflow in math library

	REP 93-89-1 OF BYTE (0),	! skip 90-92


		    A (0, 0, 1, 1, 0, 1, 1)));	! ADJARRDIM,	93	! ADJUSTABLE ARRAY DIMENSION ERROR

!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    FOR$$ERRSNS_SAV : NOVALUE,			! Save FORTRAN error info for ERRSNS
    						! No logical unit associated with it.
    LIB$FIXUP_FLT,				! Fixup reserved floating operands
    LIB$SIM_TRAP,				! Simulate floating traps
    LIB$INITIALIZE;				! Cause LIB$INITIALIZE to be

						! linked in so called before main program
						! causes COM$$STARTUP to be called
						! before main program.

ROUTINE COM_STARTUP (				!  Initialize FORTRAN compatibility ERRTST, ERRSET support
	CO_ROUT_INIT, 				! Adr. of co-routine entry in LIB$INITIALIZE
	CLI_CO_ROUT)				! Adr. of CLI co-routine
    = 						! Value returned is main program completion code

!++
! FUNCTIONAL DESCRIPTION:
!
!	It establishes a ERRTST/ERRSET default handler.
!	Then it performs a co-routine call-back to LIB$INITIALIZE
!	which keeps the handler on the stack before the main program.
!
! FORMAL PARAMETERS:
!
!	co_rout_init			Adr. of a procedure to be called in order
!					to affect a co-routine linkage with the
!					caller (LIB$INITIALIZE).
!	cli_co_rout			Adr. of CLI co-routine
!	..				Any other arguments passed to main programs
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	The completion code returned by the main program
!
! SIDE EFFECTS:
!
!	Sets up a handler and does a co-routine call-back using co_rout_init.
!--

    BEGIN

    ENABLE
	COM_HANDLER;				! Establish language independent handler

    !+
    ! Perform co-routine call-back to caller (LIB$INITIALIZE)
    ! which will call any other library and user initialization procedures
    ! and then call the main program.
    ! When the main program return, return its completion status to caller
    ! which will get back to debugger or CLI.
    !-

    RETURN (.CO_ROUT_INIT) ();
    END;					! End of COM_STARTUP routine

ROUTINE COM_HANDLER (				!  FORTRAN compatibility default error handler
	SIG_ARGS_ADR, 				! Adr. of signal arg list
	MCH_ARGS_ADR)				! Adr. of mechanism arg list
    = 						! Value is that of a condition handler

!++
! FUNCTIONAL DESCRIPTION:
!
!	COM_HANDLER performs default error handling
!	which creates an environment compatible with the PDP-11
!	FORTRAN IV-PLUS error environment.
!	This environment is only created if the user has a:
!	The actions taken depends on the conditon code being signaled:
!
!	SS$_UNWIND	Just return and keep unwinding.
!	SS$_SSFAIL	Return SS$_CONTINUE so O.S. caller
!			can check error status at call site.
!	SS$_ROPRAND	Fixup floating/double operand by calling LIB$FIXUP_FLT.
!	SS$_FLTOVF_F...SS$_FLTUND_F Convert to trap by calling LIB$SIM_TRAP.
!	SS$_INTOVF...SS$_SUBRNG Convert to FORTRAN error number from
!			arithemtic trap condition value.
!
!	If a math error which returns a reserved operand, change it to +0.0 and continue
!	    execution with no message printed.
!	If not a FOR$ error, save error info for ERRSNS
!	(If a FOR$ error, FOR$$ERRSNS_SAV already called when signaled).
!	Determine FORTRAN error number from condition value.
!	Use 1 (NOT FORTRAN SPECIFIC ERROR) if not a FORTRAN specific error.
!	Flag that error number has had an occurrence (for ERRTST)
!	If error can never continue or ERR=, set severity to SEVERE and resignal (which EXITs).
!	If error is ERR= type, set severity to SEVERE and resignal (which EXITSs),
!	    since ERR= transfer would already have taken place if present.
!	If error wants to be counted, decrement image error count.
!	    If exceed limit, set severity to SEVERE and resignal (which EXITs).
!	If error is to continue, set severity to ERROR, else to SEVERE.
!	If error is to be logged, resignal else continue.
!
! FORMAL PARAMETERS:
!
!	SIG_ARGS_ADR.ml.ra	Adr. of signal arg list
!	MCH_ARGS_ADR.ml.ra	Adr. of mechanism arg list
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	Decrements OWN count of no. of continuable error remaining before EXIT (ERROR_LIMIT).
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	SS$_CONTINUE if signaled code was SS$_SSFAIL or error is to be continued without logging.
!	SS$_RESIGNAL otherwise.
!
! SIDE EFFECTS:
!
!	Signaled condition value is changed to ERROR or SEVERE
!	in order to cause image to continue or EXIT after printing message.
!--

    BEGIN

    LOCAL
	FORT_ERR_NO;				! FORTRAN error number

    MAP
	SIG_ARGS_ADR : REF BLOCK [8, BYTE],	! SIGNAL arg list
	MCH_ARGS_ADR : REF BLOCK [5, BYTE];	! mechanism arg list

    !+
    ! Check for unwinding since handler gets called when it does an unwind.
    ! Just return to continue unwinding, since nothing to do.
    !-

    IF .SIG_ARGS_ADR [CHF$L_SIG_NAME] EQL SS$_UNWIND THEN RETURN SS$_NORMAL;

    !+
    ! Check if this is a system service failure exception (i.e., SSFAIL mode
    ! set by user in violation of modularity standards).  If yes just return
    ! SS$_CONTINUE status to condition handling facility which will return to the
    ! OTS call-site to operating system which will check error code returned in R0.
    !-

    IF .SIG_ARGS_ADR [CHF$L_SIG_NAME] EQL SS$_SSFAIL THEN RETURN SS$_CONTINUE;

    !+
    ! If signal is SS$_ROPRAND (reserved operand fault),
    ! go fixup if floating point by setting operand to +0.0.
    ! Then continue execution without a message.  Do not convert this error
    ! to a FORTRAN error # since this error didn't happen on the PDP-11.
    !-

    IF LIB$FIXUP_FLT (.SIG_ARGS_ADR, .MCH_ARGS_ADR) THEN RETURN SS$_CONTINUE;

    !+
    ! If this is a floating fault, convert it to a trap by calling
    ! LIB$SIM_TRAP.  LIB$SIM_TRAP will return SS$_RESIGNAL if this is
    ! not a floating fault, else it will simulate a trap and "resignal".
    ! If this happens, control will never return here.  The return
    ! of SS$_CONTINUE is just to keep BLISS happy - it will never execute.
    !-

    IF LIB$SIM_TRAP (.SIG_ARGS_ADR, .MCH_ARGS_ADR) THEN RETURN SS$_CONTINUE;

    !+
    ! If this is a math library error which is about to return a reserved operand,
    ! convert R0/R1 to +0.0 in mechanism arg list so user program
    ! will get the same function value as on the PDP-11.
    !-

    IF .STS_FAC_NO EQL MTH$K_FAC_NO
    THEN

	CASE .STS_CODE FROM MTH$K_UNDEXP TO MTH$K_FLOOVEMAT OF
	    SET

	    [MTH$K_UNDEXP, MTH$K_LOGZERNEG, MTH$K_SQUROONEG, MTH$K_SIGLOSMAT, MTH$K_FLOOVEMAT] :
		BEGIN
		MCH_ARGS_ADR [CHF$L_MCH_SAVR0] = 0;
		MCH_ARGS_ADR [CHF$L_MCH_SAVR1] = 0;
		END;

	    [INRANGE] :
	    ;					! do nothing

	    [OUTRANGE] : 			! do nothing
	    TES;

    !+
    ! If this is an arithmetic trap error, map to FORTRAN error number.
    ! Condition values are: _INTOVF, _INTDIV, _FLTOVF, _FLTDIV, _FLTUND, _DEVOFV, _SUBRNG.
    ! and are assumed to be consectutive and in ascending order according
    ! to hardware trap number.  Trap codes 1:5 map to error 70:74
    ! and trap code 7 maps to error 77.  Other codes map to error 1.
    !-

    IF .STS_COND_ID GEQU SS$_INTOVF^-S_SEVERITY AND .STS_COND_ID LEQU SS$_SUBRNG^-S_SEVERITY
    THEN
	BEGIN

	BIND
	    TRAN = UPLIT BYTE(70, 71, 72, 73, 74, 1, 77);

	MAP
	    TRAN : VECTOR [7, BYTE];

	FORT_ERR_NO = .TRAN [.STS_COND_ID - (SS$_INTOVF^-S_SEVERITY)];
	END
    ELSE

    !+
    ! Setup FORTRAN error number and check range for index into error table.
    ! If out of range, map to error 1 (NOT FORTRAN SPECIFIC ERROR)
    !-

	FORT_ERR_NO = (SELECTONEU .STS_FAC_NO OF
	    SET
	    [FOR$K_FAC_NO] : .STS_CODE;		! FOR$ errors
	    [MTH$K_FAC_NO] : .STS_CODE;		! MTH$ errors
	    [OTHERWISE] : FOR$K_NOTFORSPE;	! other, use error code 1
	    					! NOT FORTRAN SPECIFIC ERROR
	    TES);

    !+
    ! If error table has no bits set for this error, also map to 1
    ! since error is not defined.
    !-

    IF .COM$$ERR_TAB [.FORT_ERR_NO, B_EC_ANY] EQL 0 THEN FORT_ERR_NO = FOR$K_NOTFORSPE;

    !+
    ! Save error info for ERRSNS if this error is not FOR$ error.
    ! (FOR$ errors already called FOR$$ERRSNS_SAV when error was signaled).
    !-

    IF .STS_FAC_NO NEQ FOR$K_FAC_NO
    THEN
	FOR$$ERRSNS_SAV (.FORT_ERR_NO, 0, 0, 0,
	    .SIG_ARGS_ADR [CHF$L_SIG_NAME]);

    !+
    ! Flag that this FORTRAN error number happened for subsequent CALL ERRTST
    !-

    COM$$ERR_TAB [.FORT_ERR_NO, V_EC_OCCURRED] = 1;

    !+
    ! If this error can never continue (or ERR=) or continue type
    ! is ERR= (if present in I/O statement), set severity to SEVERE and resignal.
    ! Note: if continue type is ERR=, user did not supply if control
    ! gets here to defualt condition handler setup before main program called.
    !-

    IF NOT .COM$$ERR_TAB [.FORT_ERR_NO, V_EC_CONTINUE] OR .COM$$ERR_TAB [.FORT_ERR_NO, V_EC_CONT_TYPE]
    THEN
	BEGIN
	STS_SEVERITY = STS$K_SEVERE;
	RETURN SS$_RESIGNAL
	END;

    !+
    ! If this error wants to be counted, decrement image error count limit.
    !-

    IF .COM$$ERR_TAB [.FORT_ERR_NO, V_EC_COUNT]
    THEN
	BEGIN
	COM$$ERRORCOUNT = .COM$$ERRORCOUNT - 1;

	!+
	! If error limit goes to 0, set error severity
	! to SEVERE and resignal so that image exits after printing message.
	!-

	IF .COM$$ERRORCOUNT LEQ 0
	THEN
	    BEGIN
	    STS_SEVERITY = STS$K_SEVERE;
	    RETURN SS$_RESIGNAL
	    END;

	END;

    !+
    ! If here, error is to continue (V_EC_CONTINUE = 0),
    ! set severity to ERROR so continue if resignaled (ie if logged).
    !-

    STS_SEVERITY = STS$K_ERROR;

    !+
    ! If this error is to be logged, log it by resignaling and continue image.
    ! Otherwise just continue image (without resignaling so no message).
    !-

    IF .COM$$ERR_TAB [.FORT_ERR_NO, V_EC_LOG] THEN RETURN SS$_RESIGNAL ELSE RETURN SS$_CONTINUE

    END;					! End of COM_HANDLER
END						! End of module

ELUDOM
