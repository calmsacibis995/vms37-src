!
!<blf/width:80>
!
MODULE bpa$assdeas (			! Assign and deassign monitor calls
		IDENT = '1-328'			! File: BPASSDEAS.B32  Edit: SBL1328
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!<blf/uppercase_key>
!<blf/lowercase_user>
!

!++
! FACILITY: PDP-11 BASIC-PLUS/VAX
!
! ABSTRACT:
!
!	This module contains the routines to support ASSIGN, DEASSIGN
!	and DEASSIGN ALL functions.
!
! ENVIRONMENT: Native mode VAX processor, User mode.
!
! AUTHOR: Jim Ibbett, CREATION DATE: 18-May-79.
!
! MODIFIED BY:
!
!	VERSION X01
!
!	2-Jul-79, Jim Ibbett
! 278	- Put logical names in process table (were in group table
!	  during testing).
!
!	5-Jul-79, Jim Ibbett
! 245	- Fix bug in CNV_DEVNAM.
!
!	5-Sep-79, V. Eriksson
! 309	- Modifications to comply with VAX RTL standards.
!
!	10-Sep-79, V.Eriksson
! 319	- Modifications to comply with VAX RTL standards.
!
!	17-Sep-79, Jim Ibbett
! 325	- Fix bpa$ascii so null chars are ignored
! 1-326	- Change require files around.  JBS 03-OCT-1979
! 1-327	- Make PIC.  JBS 16-OCT-1979
! 1-328 - Replace signal of BPA$_INTCONCHK with OTS$_FATINTERR.  SBL 16-Mar-1982
!--

!
!<blf/page>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    bpa$assign,
    bpa$deassign,
    bpa$deass_all,
    bpa$find_dab : NOVALUE,			! M 319
    bpa$make_dab,
    bpa$release_dab,
    bpa$ascii,
    cnv_devnam : NOVALUE,			! M 319
    cnv_ppn,
    exit_handler : NOVALUE;

!
! INCLUDE FILES:
!

REQUIRE 'RTLIN:RTLPSECT';

REQUIRE 'RTLIN:BPASTRUCT';

REQUIRE 'RTLIN:BPAFQBDEF';

REQUIRE 'RTLIN:BPADABDEF';

REQUIRE 'RTLIN:BPAERRDEF';

LIBRARY 'RTLSTARLE';

!
! MACROS:
!
!	NONE
!
!
! EQUATED SYMBOLS:
!
!	NONE
!
! PSECTS:
!
declare_psects (bpa);
!
! OWN STORAGE:
!

OWN
    exit_reason,
    exit_block : VECTOR [4] INITIAL (0, 0, 0, 0),
    queue_initted : INITIAL (0),
    bpa$al_dabhead : VECTOR [2, LONG];

!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    bpa$get_block,
    bpa$free_block;

BUILTIN
    INSQUE,
    REMQUE;

EXTERNAL
    bpa$gb_usr_prot : BYTE,
    bpa$gb_usr_real : BYTE,
    bpa$al_usrppn : VECTOR [, LONG];

EXTERNAL LITERAL
    OTS$_FATINTERR;

GLOBAL ROUTINE bpa$assign (firqb) = 		! M 319

!++
! FUNCTIONAL DESCRIPTION:
!
!	Routine provides support for RSTS assign command
!	which has various flavours, see below...
!
! FORMAL PARAMETERS:
!
!	firqb = Pointer to firqb					! M 319
!
! IMPLICIT INPUTS:
!
!	FIRQB contains either:-
!		a) logical device name & real device name,
!		b) ppn,
!		c) protection code,
!	or	d) device name.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	Returns TRUE or signals fatal errors.
!
! SIDE EFFECTS:
!
!	Dependant upon function (a,b,c,d above) :-
!	a) logical name entered into process logical name table,
!	b) default user ppn established,
!	c) default user protection code established,
!   or	d) specified device is allocated to user.
!
!--

    BEGIN

    MAP 					! A 319
	firqb : REF $fqb_def;			! Defines firqb			! A 319

    LOCAL
	ppn : VECTOR [10, BYTE],		! ppn string
	len : BYTE,				! length of string(s)
	sts,				! return status from subr calls
	dot,					! string pointer
	descrip1 : BLOCK [8, BYTE],
	descrip2 : BLOCK [8, BYTE],
	asc1 : BLOCK [6, BYTE],			! buffer for device name
	asc2 : BLOCK [6, BYTE];			! buffer for device name

    descrip2 [dsc$w_length] = 0;
    descrip2 [dsc$b_dtype] = dsc$k_dtype_t;
    descrip2 [dsc$b_class] = dsc$k_class_s;
    descrip2 [dsc$a_pointer] = asc2;

    IF .firqb [fqb$w_fqnam1] NEQU 0
    THEN
	BEGIN
	cnv_devnam (asc2, descrip2 [dsc$w_length], .firqb);	! M 319
	bpa$ascii (.firqb [fqb$w_fqnam1], len, asc1);
	descrip1 [dsc$w_length] = 0;
	descrip1 [dsc$b_dtype] = dsc$k_dtype_t;
	descrip1 [dsc$b_class] = dsc$k_class_s;
	descrip1 [dsc$a_pointer] = asc1;
	bpa$ascii (.firqb [fqb$w_fqnam2], descrip1 [dsc$w_length], asc1 + 3);
	descrip1 [dsc$w_length] = .descrip1 [dsc$w_length] + .len;
	sts = $crelog (tblflg = 2, lognam = descrip1, eqlnam = descrip2);
						! M278

	IF NOT .sts THEN RETURN SIGNAL (badfuo, 0, .sts);

	END
    ELSE

	IF .firqb [fqb$w_ppn] NEQU 0
	THEN
	    BEGIN
	    dot = 0;
	    ppn [.dot] = '[';
	    dot = .dot + 1;
	    cnv_ppn (.firqb [fqb$b_proj], len, ppn [.dot]);
	    dot = .dot + .len;
	    ppn [.dot] = ',';
	    dot = .dot + 1;
	    cnv_ppn (.firqb [fqb$b_prog], len, ppn [.dot]);
	    dot = .dot + .len;
	    ppn [.dot] = ']';
	    dot = .dot + 1;
	    CH$MOVE (.dot, ppn, .bpa$al_usrppn [1]);
	    bpa$al_usrppn [0] = .dot;
	    END
	ELSE

	    IF .firqb [fqb$b_prot_real] NEQU 0
	    THEN
		BEGIN
		bpa$gb_usr_prot = .firqb [fqb$b_prot_code];
		bpa$gb_usr_real = 1;
		END
	    ELSE
		BEGIN
		cnv_devnam (asc2, descrip2 [dsc$w_length], .firqb);
						! M 319
		bpa$find_dab (.descrip2 [dsc$w_length],
		    .descrip2 [dsc$a_pointer], sts);	! M 319

		IF .sts EQLU 0
		THEN
		    BEGIN
		    sts = $alloc (devnam = descrip2);

		    IF NOT .sts
		    THEN
			RETURN SIGNAL (badfuo, 0, .sts)
		    ELSE
			bpa$make_dab (.descrip2 [dsc$w_length],
			    .descrip2 [dsc$a_pointer]);

		    END;

		END;

    RETURN 1;
    END;					!End of bpa$assign


GLOBAL ROUTINE bpa$deassign (firqb) = 		! M 319

!++
! FUNCTIONAL DESCRIPTION:
!
!	Routine provides support for the RSTS deassign command
!	which has several flavours, see below...
!
! FORMAL PARAMETERS:
!
!	firqb = Pointer to firqb					! M 319
!
! IMPLICIT INPUTS:
!
!	FIRQB contains either:-
!		a) logical device name,
!		b) ppn,
!		c) protection code,
!	or	d) device name.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	Always returns TRUE.
!
! SIDE EFFECTS:
!
!	Dependant upon function (a,b,c,d above):-
!	a) logical name removed from process logical name table,
!	b) default user ppn cleared,
!	c) default protection cleared,
!   or  d) device is deallocated.
!
!--

    BEGIN

    MAP 					! A 319
	firqb : REF $fqb_def;			! Defines firqb			! A 319

    LOCAL
	sts,
	descrip1 : BLOCK [8, BYTE],
	descrip2 : BLOCK [8, BYTE],
	asc1 : VECTOR [6, BYTE],
	asc2 : VECTOR [6, BYTE],
	length;

    IF .firqb [fqb$w_fqnam1] NEQU 0
    THEN
	BEGIN
	bpa$ascii (.firqb [fqb$w_fqnam1], sts, asc1);
	bpa$ascii (.firqb [fqb$w_fqnam2], length, asc1 + 3);
	length = .length + .sts;
	descrip1 [dsc$w_length] = .length;
	descrip1 [dsc$b_dtype] = dsc$k_dtype_t;
	descrip1 [dsc$b_class] = dsc$k_class_s;
	descrip1 [dsc$a_pointer] = asc1;
	$dellog (tblflg = 2, lognam = descrip1);	! M278
	END
    ELSE

	IF .firqb [fqb$w_ppn] NEQU 0
	THEN
	    bpa$al_usrppn [0] = 0
	ELSE

	    IF .firqb [fqb$b_prot_real] NEQU 0
	    THEN
		bpa$gb_usr_real = 0
	    ELSE
		BEGIN
		descrip2 [dsc$w_length] = 0;
		descrip2 [dsc$b_dtype] = dsc$k_dtype_t;
		descrip2 [dsc$b_class] = dsc$k_class_s;
		descrip2 [dsc$a_pointer] = asc2;
		cnv_devnam (asc2, descrip2 [dsc$w_length], .firqb);
						! M 319
		bpa$find_dab (.descrip2 [dsc$w_length],
		    .descrip2 [dsc$a_pointer], sts);	! M 319

		IF .sts NEQU 0 THEN bpa$release_dab (.sts);

		END;

    RETURN 1;
    END;					!End of bpa$deassign


GLOBAL ROUTINE bpa$deass_all =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Routine provides support for the RSTS deassign_all
!	command. All allocated devices are deallocated.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	bpa$al_dabhead is a double longword header of the DAB deque.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	Always returns TRUE.
!
! SIDE EFFECTS:
!
!	Removes all entries from the DAB deque.
!
!--

    BEGIN

    UNTIL .bpa$al_dabhead EQLU bpa$al_dabhead DO
	bpa$release_dab (.bpa$al_dabhead);

    RETURN 1;
    END;					!End of bpa$deass_all


ROUTINE bpa$find_dab (length, addr, answer) : NOVALUE = 	! M 319

!++
! FUNCTIONAL DESCRIPTION:
!
!	Routine scans the dab list to find an entry containing
!	an identical device name string to that passed to it.
!
! FORMAL PARAMETERS:
!
!	length = length of string
!	addr   = address of string
!	answer = pointer to a longword to receive the address of the 	! A 319
!		 dab entry if a match is found	( = 0 if not found).	! A 319
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE								! M 319
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	length : REF VECTOR [, WORD],
	addr : REF VECTOR [, LONG],
	answer : REF VECTOR [1, LONG];		! A 319

    LOCAL
	sts,
	next,
	dab1 : REF $dab_def,
	dab2 : REF $dab_def;

    next = 0;
    answer [0] = 0;				! M 319
!+
! Initialize the queue.
!-

    IF ( NOT .queue_initted)
    THEN
	BEGIN

	LOCAL
	    ast_status,
	    dclexh_status;

	ast_status = $setast (enbflg = 0);

	IF ( NOT .queue_initted)
	THEN
	    BEGIN
	    bpa$al_dabhead [0] = bpa$al_dabhead [1] = bpa$al_dabhead [0];
	    exit_block [1] = exit_handler;
	    exit_block [2] = 1;
	    exit_block [3] = exit_reason;
	    dclexh_status = $dclexh (desblk = exit_block);
	    queue_initted = 1;
	    END
	ELSE
	    dclexh_status = 1;

	IF (.ast_status EQL ss$_wasset) THEN $setast (enbflg = 1);

	IF ( NOT .dclexh_status) THEN SIGNAL (badfuo, 0, .dclexh_status);

	END;

    IF .bpa$al_dabhead EQLU bpa$al_dabhead THEN RETURN;	! M 319

    dab2 = .bpa$al_dabhead;

    DO
	BEGIN

	IF .dab2 [dab$b_length] EQLU length [0]
	THEN
	    BEGIN
	    sts = CH$COMPARE (length [0], addr [0], length [0],
		dab2 [dab$a_name]);

	    IF .sts EQL 0
	    THEN
		BEGIN
		answer [0] = .dab2;		! M 319
		EXITLOOP;
		END;

	    END;

	next = .dab2 [dab$l_next];
	dab2 = .next;
	END
    UNTIL .next EQLU bpa$al_dabhead;

    END;					! End of bpa$find_dab

ROUTINE bpa$make_dab (length, addr) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Routine inserts a dab into the dab list.
!
! FORMAL PARAMETERS:
!
!	length = length of device name string
!	addr   = address of string
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	Always returns TRUE.
!
! SIDE EFFECTS:
!
!	The required # of bytes are got from free core.
!
!--

    BEGIN

    MAP
	length : REF VECTOR [, WORD],
	addr : REF VECTOR [, LONG];

    LOCAL 					! A 309
	sts,				! Status returned from calls	! A 309
	dab2 : REF $dab_def;

    IF NOT (sts = bpa$get_block (dab$k_length_f + length [0], 	! M 309
	    dab2))				! A 309
    THEN 					! A 309
	RETURN SIGNAL (badfuo, 0, .sts);	! A 309

    CH$MOVE (length [0], addr [0], dab2 [dab$a_name]);
    dab2 [dab$b_length] = length [0];
    dab2 [dab$w_mode] = 0;
    INSQUE (.dab2, bpa$al_dabhead);
    RETURN 1;
    END;					! End of bpa$make_dab

ROUTINE bpa$release_dab (dab_addr) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Routine removes the specified dab entry from the list
!	and deallocates the device described by the entry.
!
! FORMAL PARAMETERS:
!
!	dab_addr = address of dab entry in list
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	Always returns TRUE.
!
! SIDE EFFECTS:
!
!	The unlinked entry is returned to free core.
!
!--

    BEGIN

    MAP
	dab_addr : REF VECTOR [, LONG];

    LOCAL
	sts,				! Status returned from calls	! A 309
	dab : REF $dab_def,
	addr,
	descrip : BLOCK [8, BYTE];

    dab = dab_addr [0];
    descrip [dsc$w_length] = .dab [dab$b_length];
    descrip [dsc$b_dtype] = dsc$k_dtype_t;
    descrip [dsc$b_class] = dsc$k_class_s;
    descrip [dsc$a_pointer] = dab [dab$a_name];
    $dalloc (devnam = descrip);
    REMQUE (dab_addr [0], addr);

    IF NOT (sts = bpa$free_block (dab_addr [0], 	! M 309
	    dab$k_length_f + .dab [dab$b_length]))	! A 309
    THEN 					! A 309
	RETURN SIGNAL (badfuo, 0, .sts);	! A 309

    RETURN 1;
    END;					! End of bpa$release_dab
!


GLOBAL ROUTINE bpa$ascii (addr, length, asc) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Routine converts a word containing a rad-50 representation
!	of upto 3 characters into an ascii string.
!
! NOTE:- Imbedded spaces will be ignored !
!	i.e. A<space>B or <space>AB will become AB<null>
!	(These are illegal in filenames anyway!)
!
!
! FORMAL PARAMETERS:
!
!	On input : addr = word containing rad-50
!
!	On output : asc is 3 byte vector containing upto 3 ascii chars
!		    length contains # of chars in string
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	Always returns TRUE.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	length : REF VECTOR [, WORD],
	asc : REF VECTOR [, BYTE];

    LOCAL
	rad,
	rcode;

    length [0] = 0;
    rad = .addr;

    DECR x FROM 2 TO 0 DO
	BEGIN
	rcode = .rad MOD %O'50';
	rad = .rad - .rcode;
	rad = .rad/%O'50';

	CASE .rcode FROM %O'0' TO %O'47' OF
	    SET

	    [%O'1' TO %O'32'] :
		rcode = .rcode + %O'100';

	    [%O'36' TO %O'47'] :
		rcode = .rcode + %O'22';

	    [%O'33'] :
		rcode = %C'$';

	    [%O'34'] :
		rcode = %C'.';

	    [INRANGE] :
		rcode = %O'0';			! Ignore 0 & 35				! M325

	    [OUTRANGE] :
		RETURN SIGNAL (OTS$_FATINTERR);
	    TES;

	asc [.x] = .rcode;

	IF (.rcode NEQU 0) THEN length [0] = .length [0] + 1;

	END;

    RETURN 1;
    END;					!End of bpa$ascii


ROUTINE cnv_ppn (addr, length, ppn) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Routine converts a decimal ppn # (max 377) to an
!	ASCII string.
!
! FORMAL PARAMETERS:
!
!	On input : addr = ppn #
!
!	On output : ppn is a 3 byte vector containing the ascii string
!		    length contains the # of chars.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	Always returns TRUE.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	length : REF VECTOR [, WORD],
	ppn : REF VECTOR [, BYTE];

    LOCAL
	c : VECTOR [3, BYTE],
	val;

    length [0] = 0;
    val = .addr;
    c [0] = .val/100;
    c [1] = (.val - .c [0]*100)/10;
    c [2] = .val - (.c [1]*10 + .c [0]*100);

    INCR x FROM 0 TO 2 DO
	BEGIN
	ppn [.x] = .c [.x] + %C'0';
	length [0] = .length [0] + 1;
	END;

    RETURN 1;
    END;					!End of cnv_ppn

ROUTINE cnv_devnam (asc, dot, firqb) : NOVALUE = 	! M 319

!++
! FUNCTIONAL DESCRIPTION:
!
!	Routine converts the RSTS-type device name described
!	in the FIRQB into a VAX-type ascii string.
!	e.g. KB64 -> TTE0:
!
! FORMAL PARAMETERS:
!
!	asc = address of 6-byte vector to store string.
!	dot = Pointer to a longword to receive the length of the string	! A 319
!	firqb = Pointer to firqb					! A 319
!
! IMPLICIT INPUTS:
!
!	firqb [fqb$w_devnam]  contains the device name as 2 ascii characters,
!	firqb [fqb$b_devunit]  contains the device decimal unit #.
!
! IMPLICIT OUTPUTS:
!
!	The asc vector contains the ascii string.
!
! ROUTINE VALUE:
!
!	NONE								! M 319
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	num,
	un;

    MAP
	firqb : REF $fqb_def,			! Defines firqb			! A 319
	asc : REF VECTOR [, BYTE],
	dot : REF VECTOR [1, WORD];		! A 319

    dot [0] = 0;				! M 319

    IF .firqb [fqb$w_devnam] EQLU %ASCII'KB'
    THEN
	CH$MOVE (2,
	    UPLIT BYTE('TT'), asc [.dot [0]])	! M 319
    ELSE
	CH$MOVE (2, firqb [fqb$w_devnam], asc [.dot [0]]);	! M 319

    dot [0] = .dot [0] + 2;			! M 319
    num = .firqb [fqb$b_devunit];
    un = (.num^(-4)) + 'A';
    num = .num AND %O'17';
    asc [.dot [0]] = .un;			! M 319
    dot [0] = .dot [0] + 1;			! M 319

    IF .num GTRU 9
    THEN
	BEGIN
	asc [.dot [0]] = '1';			! M 319
	dot [0] = .dot [0] + 1;			! M 319
	num = .num - 10;
	END;

    asc [.dot [0]] = .num + '0';		! M 319
    dot [0] = .dot [0] + 1;			! M 319
    asc [.dot [0]] = ':';			! M 319
    dot [0] = .dot [0] + 1;			! M 319
    END;					!End of cnv_devnam

ROUTINE exit_handler (				! Exit handler
	exit_reason				! reason
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This is the exit handler for assign/deassign.
!	It deallocates all devices, in case any have not been
!	deallocated already.
!
! FORMAL PARAMETERS:
!
!	EXIT_REASON.rl.r	Not used
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Deassigns the devices, if there are any.
!
!--

    BEGIN
    bpa$deass_all ();
    RETURN;
    END;					!End of exit_handler
END						!End of module bpa$assdeas

ELUDOM
