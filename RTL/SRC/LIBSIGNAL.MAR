	.TITLE	LIB$SIGNAL - Condition Handling Facility SIGNAL and STOP
	.IDENT	/1-018/			; File: LIBSIGNAL.MAR  Edit: ACG0183

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY:	Condition Handling
;
; ABSTRACT:
;
;	The Condition Handling Facility supports the exception
;	handling mechanisms needed by each of the common languages.
;	It provides the programmer with some control over fixup,
;	reporting, and flow of control on errors.  It provides
;	subsystem and application writers with the ability to
;	override system messages in order to give a more suitable
;	application oriented interface.
;
;	The CHF includes procedures to allow higher level language
;	users to change the hardware enables, and to establish and
;	revert condition handlers. This module includes procedures
;	to signal exceptions (LIB$SIGNAL and LIB$STOP).  The
;	facility also includes a procedure to unwind the stack
;	from a handler to its establisher (SYS$SET_UNWIND).
;
;	To understand CHF more fully, refer to its functional
;	specification and to the STARLET exception routine (EXCEPTION).
;
;
; ENVIRONMENT:	Any access mode--normally user mode
;		AST reentrant
;
; AUTHOR: Peter F. Conklin, CREATION DATE: 12-Nov-76

	.SBTTL	Modification History
;
; MODIFIED BY:
;
;  Peter F. Conklin, 27-Jan-78 VERSION 01
; 01	-  Original, based on CHF Rev 4 spec.
; 02	-  Changed to Rev 5 spec.
; 03	-  Exit with "no handler" or "access violation" if bad stack.
; 04	-  Copy signal args; add PSL and PC.
; 05	-  Reformat stack to mimic EXCEPTION exactly.
; 06	-  Change to PSECT LIB$CODE
; 07	-  Use $GETJPI, SYS$EXCMSG, SS$_NOHANDLER
;		support last chance handler,
;		STOP forces severe at every handler call.
; 08	- Change name to SYS$EXCMSG.  TNH 24-Jan-78
; 09	- Remember EXCVEC address.
; 10	- Continue from STOP now vectors to a Panic EXIT.
; 11	- Change name of OWN PSECT to LIB$DATA.
; 12	- Use G^ addressing in call to SYS$UNWIND.  JMT 28-Feb-78
; 13	- Make OWN be PIC.  TNH 27-June-78
; 1-014	- Reformatted version number to have three digits in the
;	   edit number field.  JBS 16-NOV-78
; 1-015	- Add "_" to the PSECT directives.  JBS 21-DEC-78
; 1-016 - Make sure that SP stays below needed information.
;	  SPR 11-24926  SBL 13-July-1979
; 1-017 - Remove restriction that the stack frame must be in P1 space.
;	  SBL 22-May-1980
; 1-018 - ACG0183: Andrew C. Goldstein  30-Dec-1980  15:44
;	  Complete rewrite, to correct stack management bugs in
;	  building of signal vectors, and to use SYS$SRCHANDLER entry
;	  to the EXEC's handler search logic, eliminating duplicated
;	  condition handler search algorithms.
;--

	.SBTTL	DECLARATIONS

;
; EXTERNAL REFERENCES:
;
	.DSABL	GBL

	.EXTRN	SYS$SRCHANDLER

;
; INCLUDE FILES:
;
	$LIBDEF				;Library status defs
	$SFDEF				;Stack frame offsets

;
; MACROS:
;

;
; This macro defines the formals to a procedure
;

	.MACRO	$FORMAL	LIST
$$FORMAL=0
	.IRP	L,<LIST>
$$FORMAL=$$FORMAL+4
L=$$FORMAL
	.ENDM
	.ENDM	$FORMAL

;
; EQUATED SYMBOLS:
;
;	NONE
;
; OWN STORAGE:
;
;	NONE
;

	.PSECT	_LIB$CODE,PIC,SHR,NOWRT,LONG

	.SBTTL	LIB$STOP -  Stop execution via signalling
;++
; FUNCTIONAL DESCRIPTION:
;
;	This procedure is called whenever it is impossible
;	to continue execution and no recovery is possible.
;	It signals the exception. It always forces the
;	severity code of severe_error on each call to
;	a handler. Handler requests to continue are
;	treated as an error and produce a panic exit.
;	This procedure is guaranteed to never return.
;
;
; CALLING SEQUENCE:
;
;	CALL LIB$STOP (
;
;	CONDITON_VALUE.rlc.v,	standard signal name
;
;	{ARGS.rl.v})		additional FAO parameters for message
;				(stop adds PC and PSL to end)
;
; INPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	NONE
;
; SIDE EFFECTS:
;
;	Never returns
;
;--

	$FORMAL	<-
CONDITION_VALUE-		;signal code
	>			; {parameters}

	.ENTRY	LIB$STOP,0		;No registers (assumed below)
	PUSHL	#2			;Set code for STOP
	BRB	SIGNAL			;Go do the signallling

	.SBTTL	LIB$SIGNAL -  Signal Exceptional Condition
;++
; FUNCTIONAL DESCRIPTION:
;
;	This procedure is called whenever it is necessary
;	to indicate an exceptional condition and the procedure
;	can not return a status code. If a handler returns
;	with a continue code, LIB$SIGNAL returns with
;	all registers including R0 and R1 preserved.  Thus,
;	LIB$SIGNAL can also be used to plant performance and
;	debugging traps in any code.  If no handler is found,
;	or all resignal, a catch-all handler is CALLed.
;
; CALLING SEQUENCE:
;
;	CALL LIB$SIGNAL (
;
;	CONDITION_VALUE.rlc.v,	standard signal name
;
;	{ARGS.rl.v})		additional FAO parameters for message
;				(signal adds PC and PSL to end)
;
; INPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	NONE
;
; SIDE EFFECTS:
;
;	If a handler unwinds, then control will not return.
;	A handler could also modify R0/R1 and change the
;	flow of control.  If neither is done, then all
;	registers are preserved.
;
;--

	.ENTRY	LIB$SIGNAL,0		;No registers (assumed below)
	PUSHL	#1			;Set code for SIGNAL
	BRB	SIGNAL			;go do the signalling

	.SBTTL	SIGNAL -  Internal Routine to Signal Exceptions
;++
; FUNCTIONAL DESCRIPTION:
;
;	This routine is used by LIB$STOP and LIB$SIGNAL to do
;	the actual exception signaling. It converts the call frame
;	and argument list into mechanism and signal vectors.
;	It then jumps to the EXEC's common condition handler
;	search routine.
;
;
; CALLING SEQUENCE:
;
;	PUSHL	#code		;1=SIGNAL, 2=STOP
;	BR	SIGNAL
;
; INPUT PARAMETERS:
;
;	AP points to the arg list
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	NONE
;
; SIDE EFFECTS:
;
;	If a handler unwinds, then control will not return.
;	A handler could also modify R0/R1 and change the flow
;	of control. If neither is done, then all registers
;	are preserved.
;
;--

;
; The following is a dummy signal argument list that is
; used if the call has no arguments. This dummy list
; has just one argument, in particular the signal code.
;

DUMMY_SIG_ARG:
	.LONG	1,LIB$_SIGNO_ARG	;dummy arg list

;+
; The code for the signal routine is straightforward
; and consists of the following three parts:
;
;	evaporate the call stack
;	format the handler argument list
;	jump to common handler search routine
;
; The only peculiar algorithm has to do with evaporating
; the call frame. This is needed so that the format of
; the stack is the same whether the signal was an
; explicit call to signal or was a hardware detected
; exception. The latter has no frame because the hardware
; pushes the PSL, the PC, and some arguments. The exception
; handler in the system adds a reason code to identify the
; exception and then goes into a duplicate of this code.
;
; The algorithm to evaporate the frame is different for
; the cases of being called by CALLG or CALLS. In the latter
; case, the arguments also must be evaporated (by incorporation
; into the signal vector). In the former case, the argument
; list must be copied in order to allow
; the handler to alter the severity and resignal. At the
; same time, the caller's PSL and PC are appended to
; the list for consistency with the hardware detected
; exceptions. In both cases, the only trick in the algorithm
; is to ensure that SP stays below any information on the
; stack, and to allow for various number of parameters
; including the 0 to 3 byte stack alignment on call.
;-

SIGNAL:
	PUSHR	#^M<R0,R1>		;save user's R1'R0
	BBC	#SF$V_CALLS,SF$W_SAVE_MASK(FP),40$
					;go handle CALLG call

;
; Here on a CALLS with the stack:
;
;	(SP) = -12(FP) = caller's R0
;	       -08(FP) = caller's R1
;	       -04(FP) = code for LIB$STOP or LIB$SIGNAL
;		00(FP) = 0 (this incarnation's handler)
;		04(FP) = CALL frame mask and caller's PSW
;		08(FP) = caller's AP
;		12(FP) = caller's FP
;		16(FP) = caller's PC
;		  ...	 0 to 3 bytes of alignment filler
;		00(AP) = number of arguments
;		04(AP)++ arguments to SIGNAL
;

	PUSHL	SF$L_SAVE_AP(FP)	;save caller's AP
	MOVPSL	-(SP)			;save PSL
	MOVW	SF$W_SAVE_PSW(FP),(SP)	;update with caller's PSW
	PUSHL	SF$L_SAVE_PC(FP)	;save caller's PC
	MOVL	SF$L_SAVE_FP(FP),FP	;restore caller's FP
					;the stack frame is now officially gone
5$:	MOVZBL	(AP),R1			;get number of args
	BNEQU	10$			;branch if some
	MOVL	DUMMY_SIG_ARG+4,(AP)	;use dummy if none
	MOVL	#1,-(AP)		;make room and count as one arg
	BRB	5$			;proceed

10$:	MOVAB	-8(AP),R0		;point to top of signal vector
	ADDL3	#2,R1,(AP)		;add PC & PSL to argument count
20$:	MOVL	(AP)+,-12(AP)		;copy args into signal vector
	SOBGEQ	R1,20$

	MOVQ	(SP)+,-(AP)		;put away PSL'PC pair
	MOVL	(SP)+,AP		;restore caller's AP
	MOVL	8(SP),-(R0)		;store code for SIGNAL/STOP
	MOVQ	(SP),-(R0)		;store caller's R1'R0
	MOVL	R0,SP			;clean off unused space
	BRB	80$			;go join common code

;
; Here on a CALLG
;
;
; At this point the stack is:
;
;	(SP) = -12(FP) = caller's R0
;	       -08(FP) = caller's R1
;	       -04(FP) = code for LIB$STOP or LIB$SIGNAL
;		00(FP) = 0 (this incarnation's handler)
;		04(FP) = CALL frame mask and caller's PSW
;		08(FP) = caller's AP
;		12(FP) = caller's FP
;		16(FP) = caller's PC
;		  ...	 0 to 3 bytes of alignment filler
;
; NOTE: In the computation below, SP is set two long words lower
; then seems obviously needed. The two longword bias is necessary to
; guarantee that SP is not being set above the current location of
; the saved R0'R1 for the case of the smallest possible argument list.
;

40$:	MOVL	FP,R0			;point to current frame
	BSBB	OLD_SP			;calculate pre-CALL SP into R0
50$:	MOVZBL	(AP),R1			;get arg count
	BNEQU	60$			;proceed if not empty
	MOVAB	DUMMY_SIG_ARG,AP	;use default if empty
	BRB	50$			;and try again

60$:	MNEGL	R1,R1			;compute variable part of vector
	MOVAL	-32(R0)[R1],SP		;set SP to final value
	MOVL	-4(FP),R1		;save code for SIGNAL/STOP
	MOVQ	-12(FP),8(SP)		;put R1'R0 in correct place
	MOVL	R1,16(SP)		;store code in vector
	MOVL	SF$L_SAVE_AP(FP),4(SP)	;save caller's AP for a moment
	MOVPSL	(SP)			;save PSL for a moment
	MOVW	SF$W_SAVE_PSW(FP),(SP)	;change PSL to caller's
	PUSHL	SF$L_SAVE_PC(FP)	;save caller's PC for a moment
	MOVL	SF$L_SAVE_FP(FP),FP	;shift FP back to caller's FP

;
; At this point, the extra frame created by the CALL to us
; has been removed. We can now proceed to build the signal
; and mechanism vectors and the final arg list.
;

	MOVQ	(SP)+,-(R0)		;move caller's PSL'PC to vector
	MOVZBL	(AP),R1			;get arg count
70$:	MOVL	(AP)[R1],-(R0)		;copy args to signal vector
	SOBGTR	R1,70$			; top down
	MOVZBL	(AP),R1			;get arg count
	ADDL3	#2,R1,-(R0)		;signal count is 2+arg count
	MOVL	(SP)+,AP		;change AP to caller's AP
					;CALLS entry joins here
80$:	MNEGL	#3,-(SP)		;initialize depth
	PUSHL	FP			;initialize frame
	PUSHL	#4			;set mechanism vector length
	PUSHAB	(SP)			;2nd arg is mechanism vector
	PUSHAB	28(SP)			;1st arg is signal vector
	PUSHL	#2			;two arguments

;
;  At this point the stack is all set for a call to any handler:
;
;	00(SP) = 2
;	04(SP) = signal vector address		( 36(SP) )
;	08(SP) = mechanism vector address	( 12(SP) )
;	12(SP) = mechanism vector length (4)	\
;	16(SP) = mechanism vector frame (FP)	 |
;	20(SP) = mechanism vector depth (-3)	 | mechanism
;	24(SP) = mechanism vector caller's R0	 |
;	28(SP) = mechanism vector caller's R1	/
;	32(SP) = code for LIB$STOP or LIB$SIGNAL
;	36(SP) = 2+number of caller's args	\
;	40(SP)++ copy of caller's signal args	 | signal
;	  ...	 caller's return PC		 |   args
;	  ...	 caller's PSL			/
;
;	The next higher location on the stack is the
;	value of the caller's SP just before the CALL.
;
; AP and FP have been restored to the caller's values.
;

	JMP	G^SYS$SRCHANDLER	;go find a handler

	.SBTTL	OLD_SP -  Internal Routine to Calculate Old SP
;++
; FUNCTIONAL DESCRIPTION:
;
;	This routine is called to calculate what SP was before
;	a particular CALLG that resulted in a specific stack
;	frame.  RESTRICTION: CALLS not handled.
;
; CALLING SEQUENCE:
;
;	NONE
;
; INPUT PARAMETERS:
;
;	R0 = address of stack frame in question
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	R0 = value of SP before CALL in question
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	NONE
;
; SIDE EFFECTS:
;
;	R1 is clobbered
;
;--



OLD_SP:
	EXTZV	#SF$V_STACKOFFS,#SF$S_STACKOFFS,-
		SF$W_SAVE_MASK(R0),-(SP) ;get stack offset
	EXTZV	#SF$V_SAVE_MASK,#SF$S_SAVE_MASK,SF$W_SAVE_MASK(R0),R1
					;get register mask
	ADDL2	#SF$L_SAVE_REGS,R0	;standard frame
	ADDL2	(SP)+,R0		;SP correction
10$:	BLBC	R1,20$			;if register bit set,
	ADDL2	#4,R0			; count the register
20$:	ASHL	#-1,R1,R1		;discard bit
	BNEQU	10$			;loop until all done
	RSB				;return



	.END
