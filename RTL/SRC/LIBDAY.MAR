	.TITLE	LIB$DAY - Get number of days since zero date
	.IDENT	/1-002/			; File: LIBDAY.MAR

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY: General Utility Library
;
; ABSTRACT:
;
; LIB$DAY returns a longword integer containing the number of days
; since the system zero date of November 17, 1858.  This is useful
; for keeping track of transaction dates, for the values can be
; easily subtracted and compared, unlike ASCII date formats.
;
; ENVIRONMENT: User Mode, AST Reentrant
;
;--
; AUTHOR: Steven B. Lionel, CREATION DATE: 04-April-1979
;

	.SBTTL	Edit History
;
; 1-001 - Original.  SBL 04-Apr-1979
; 1-002 - Return day number explicitly, to conform with LIB$ standard.
;	  Add day_time result.  SBL 28-Jun-1979


	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;

;
; EXTERNAL DECLARATIONS:
;
	.DSABL	GBL				; Prevent undeclared
						; symbols from being
						; automatically global.
	.EXTRN	SS$_INTOVF			; Integer overflow

;
; MACROS:
;

;
; EQUATED SYMBOLS:
;

;+
; Stack offsets for local values:
;-
	SYSTIM = 0			; System quadword time
	YEAR = 8			; Year number (not used)
	MONTH = 10			; Month number (not used)
	DAY = 12			; Day number (not used)
	HOUR = 14			; Hour  of day
	MINUTE = 16			; Minute of hour
	SECOND = 18			; Second of minute
	HUNDREDTHS = 20			; Hundredths of seconds

;
; OWN STORAGE:
;

;
; PSECT DECLARATIONS:
;
	.PSECT _LIB$CODE PIC, USR, CON, REL, LCL, SHR, -
			EXE, RD, NOWRT, LONG


	.SBTTL	LIB$DAY - Return day number as a longword integer
;++
; FUNCTIONAL DESCRIPTION:
;
;	LIB$DAY is a routine which returns the number days
;	since the system zero date of November 17, 1858.  Optionally,
;	the caller can supply a quadword by reference containing a
;	time in system time format to be used instead of the system
;	time.
;
;	An optional return argument is a longword integer containing
;	the number of 10 millisecond units since midnight.
;
;	Day zero is November 17, 1858.
;
;	NOTE:  If the caller supplies a quadword time, it is not
;	verified at all.  If it is negative (bit 63 on), the day_number
;	value returned will be negative.
;
; CALLING SEQUENCE:
;
;	status.wlc.v = LIB$DAY (day_number.wl.r, [user_time.rq.r
;				[, day_time.wl.r]])
;
; INPUT PARAMETERS:
;
	user_time = 8		; Optional.  A quadword containing
				; a time in 10 microsecond units.
				; If omitted, the current system
				; time will be used.
				; One way for FORTRAN programmers to
				; provide a quadword is to declare:
				;	INTEGER*4 TIME(2)
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
	day_number = 4		; A longword integer containing the
				; number of days since the system
				; zero date. 
	day_time = 12		; The number of 10 millisecond (.01 second)
				; units since midnight.

;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
; SS$_NORMAL - Successful completion.
; SS$_INTOVF - The optional argument user_time is present and represents
;	       a date past the year 8600.
;
;--

	.ENTRY LIB$DAY , ^M<IV>		; Entry point

	SUBL2	#24, SP			; Create quadword block for
					; system time plus result block
					; for $NUMTIM.
	CMPB	(AP), #<user_time/4>	; Optional arg present?
	BLSS	10$			; No
	TSTL	user_time(AP)		; Omitted by reference?
	BEQL	10$			; Yes
	MOVQ	@user_time(AP), SYSTIM(SP)  ; Get user supplied time
	BRB	20$			; Don't get system time

10$:	$GETTIM_S	SYSTIM(SP)	; Get system time
	BLBC	R0, ERROR		; Should NEVER happen, but
					; is good practice to check.

20$:	EDIV	#1000000000, (SP), R0, R1  ; Convert to number of days.
	DIVL3	#864, R0, @day_number(AP)  ; and store.
	CMPB	(AP), #<day_time/4>	; Day time requested?
	BLSS	EXIT			; No
	TSTL	day_time(AP)		; Omitted by reference?
	BEQL	EXIT			; Yes
	TSTL	SYSTIM+4(SP)		; Is system time negative?
	BGEQ	30$			; No
	MCOML	SYSTIM(SP), SYSTIM(SP)	; Yes, force it positive
	MCOML	SYSTIM+4(SP), SYSTIM+4(SP)
	INCL	SYSTIM(SP)
	ADWC	#0, SYSTIM+4(SP)
	BVS	OVFLO			; Overflow?
30$:	MOVL	SP, R0			; Save stack pointer
	$NUMTIM_S	YEAR(R0), SYSTIM(R0)	; Get numeric time
	BLBC	R0, ERROR		; Error?
	CLRQ	R0			; Find time in units of .01 secs
	MULW3	#60, HOUR(SP), R0
	ADDW2	MINUTE(SP), R0		; R0 has minutes
	MULL2	#60, R0
	MOVW	SECOND(SP), R1
	ADDL2	R1, R0			; R0 has seconds
	MULL2	#100, R0
	MOVW	HUNDREDTHS(SP), R1
	ADDL3	R1, R0, @day_time(AP)	; store .01 seconds

EXIT:
	MOVL	#1, R0				; Return with SS$_NORMAL
	RET

OVFLO:
	MOVL	#SS$_INTOVF, R0			; Return with error status
ERROR:
	RET					; Return with error status
	.END
