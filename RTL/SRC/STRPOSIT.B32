MODULE STR$POSITION (		! Find the position of a substring

		IDENT = '1-014'	! File: STRPOSIT.B32	Edit: RKR1014

		    ) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY: String support library
!
! ABSTRACT: This module takes 2 input strings of any supported class and
!	dtype and returns the position of the substring in the main 
!	string starting at an input position
!
! ENVIRONMENT: User mode, AST level or not or mixed
!
! AUTHOR: R. Will, CREATION DATE: 10-Mar-79
!
! MODIFIED BY:
!
! R. Will, 10-Mar-79 : VERSION 01
! 1-001	- Original
! 1-002 - Fix bug with starting pos > searched string length.  
!	  RW  14-Jul-79
! 1-003	- Correct a typo in edit 002.  JBS 25-JUL-1979
! 1-004 - Make POS agree with DEC BASIC Standard Proposal.  
!	  RW  23-Sept-79
! 1-005 - Change name to STR$, string cleanup.  RW  1-NOV-79
! 1-006	- Correct the psect name.  JBS 02-NOV-1979
! 1-007	- Use the new interlock macros.  JBS 06-NOV-1979
! 1-008 - Return only after freeing interlocks.  RW  9-Nov-79
! 1-009 - Use interlocks in Call entry.  RW  15-Nov-79
! 1-010 - String speedup.  Remove edit 9.  RW  8-Jan-1980
! 1-011 - Remove improper declaration and use of ACTUALCOUNT from 
!	  STR$POSITION_R6.
!	  Add comments to indicate argument registers.  SBL 10-Dec-1980
! 1-012 - Enhance to recognize additional classes of descriptors by
!	  using $STR$GET_LEN_ADDR to extract length and address of
!	  first data byte from the given descriptors.  Remove string
!	  interlocking code.   RKR 21-APR-81
! 1-013 - Fix bug relating to START_POS.  SBL 28-Sep-1981
! 1-014 - Speed up code.  RKR 19-OCT-1981.
!--

!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE 
		(EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!

REQUIRE 'RTLIN:STRLNK';		! Use require file with string linkages

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    STR$POSITION,		! find substring position
    STR$POSITION_R6 : STR$JSB_POSIT;	! find substring position, JSB

!
! INCLUDE FILES:
!

REQUIRE 'RTLIN:RTLPSECT';	! Declare PSECTS code

REQUIRE 'RTLIN:STRMACROS';	! use string macros to write code

LIBRARY 'RTLSTARLE';		! STARLET library for macros and symbols

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! PSECT DECLARATIONS
!
DECLARE_PSECTS (STR);
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL LITERAL
    STR$_ILLSTRCLA;				! Illegal string class


GLOBAL ROUTINE STR$POSITION (	! find position of substring

	SRC_DESC,		! descriptor of string to search
	SUB_DESC,		! descriptor of string to find
	START_POS		! value of position to start search

			    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine takes two source strings of any supported
!	dtype and class and finds the position of the substring in the
!	source string starting at the input starting position.  The 
!	routine returns the position of the substring in the source 
!	string.
!	The first character of the source string is at position 1.
!	The call entry point is implemented by JSBing to the JSB entry.
!
! FORMAL PARAMETERS:
!
!	SRC_DESC.rt.dx		pointer to descriptor of string to be 
!				searched
!	SUB_DESC.rt.dx		pointer to descriptor of string to find
!	START_POS.rl.r		position in source to begin 
!				search [optional arg, default = 1]
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	FIND_POS.wlu.v		value of start position of substring in 
!				source string.  0 ==> not found.
!
! SIDE EFFECTS:
!
!	May signal STR$_ILLSTRCLA
!--

    BEGIN

    BUILTIN
	ACTUALCOUNT;

    LOCAL
	ACTUAL_START;				! if no START_POS then 1

    MAP
	SRC_DESC : REF $STR$DESCRIPTOR,
	SUB_DESC : REF $STR$DESCRIPTOR;

    IF (ACTUALCOUNT () EQL 2)
	THEN 
	    ACTUAL_START = 1 
	ELSE 
	    ACTUAL_START = ..START_POS;

    RETURN STR$POSITION_R6 ( SRC_DESC [0,0,0,0], 
			     SUB_DESC [0,0,0,0], 
			     .ACTUAL_START);
    END;					!End of STR$POSITION

GLOBAL ROUTINE STR$POSITION_R6 (	! find position of substring

	SRC_DESC,		! descriptor of string to search
	SUB_DESC,		! descriptor of string to find
	START_POS		! value of position to start search

			       ) : STR$JSB_POSIT =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine takes two source strings of any supported
!	dtype and class and finds the position of the substring in the
!	source string starting at the input starting position.  
!	The routine returns the position of the substring in the source
!	string.
!	The first character in the source string is at position 1.
!
! FORMAL PARAMETERS:
!
!	SRC_DESC.rt.dx = R0	pointer to descriptor of string to be 
!				searched
!	SUB_DESC.rt.dx = R1	pointer to descriptor of string to find
!	START_POS.rl.v = R2	value of position in source to begin 
!				search
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	FIND_POS.wlu.v		value of start position of substring in
!				source string. 0 ==> Not found.
!
! SIDE EFFECTS:
!
!	may allocate or deallocate dynamic string space
!	may signal STR$_ILLSTRCLA if not an acceptable string class
!
!--

    BEGIN

    LOCAL
	MAIN_IN_LEN,		! length of main string
	MAIN_IN_ADDR,		! addr of 1st data byte of main string
	SUB_IN_LEN,		! length of substring
	SUB_IN_ADDR,		! addr of 1st data byte of substring
	START_OFFSET,		! Offset into string of start position
	FIND_POINTER;		! position of substring in source string

    MAP
	SRC_DESC : REF $STR$DESCRIPTOR,
	SUB_DESC : REF $STR$DESCRIPTOR;

!+
! Set START_OFFSET based on START_POS.  Note that offset is 0-origin.
!-

    START_OFFSET = .START_POS - 1;
    IF .START_OFFSET LSS 0
    THEN
	START_OFFSET = 0;

!+
! Extract the length and address of 1st data byte of strings involved.
! Signal if we find any errors.
!-
	$STR$GET_LEN_ADDR (SRC_DESC, MAIN_IN_LEN, MAIN_IN_ADDR );
	$STR$GET_LEN_ADDR ( SUB_DESC, SUB_IN_LEN, SUB_IN_ADDR );

!+
! Adjust length of source string for starting offset.  Make
! sure that the length doesn't go negative.
!-

    IF .START_OFFSET GTR .MAIN_IN_LEN
    THEN
	START_OFFSET = .MAIN_IN_LEN;
    MAIN_IN_LEN = .MAIN_IN_LEN - .START_OFFSET;

!+
! Find the address of the substring in the string described by
! starting at START_OFFSET in the source string
!-
    FIND_POINTER = CH$FIND_SUB (
	.MAIN_IN_LEN,		! len of string to search
	CH$PLUS (.MAIN_IN_ADDR, .START_OFFSET),	! ptr to string to search
	.SUB_IN_LEN, 		! len of str being searched for
	.SUB_IN_ADDR);		! ptr to str being searched for

!+
! Return 0 if the substring was not found, otherwise return the position
! of the substring, 1-origin.
!-

    RETURN (
	IF CH$FAIL (.FIND_POINTER)
	THEN
	    0
	ELSE
	    CH$DIFF (.FIND_POINTER, .MAIN_IN_ADDR) + 1
	   );

    END;					!End of STR$POSITION_R6

END						!End of module

ELUDOM
