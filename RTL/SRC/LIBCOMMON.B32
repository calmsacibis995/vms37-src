MODULE LIB$COMMON (			! Get and put common

	IDENT = '1-006'		! File: LIBCOMMON.B32 Edit: RKR1006

		  ) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY: VAX-11 COMMON RTL
!
! ABSTRACT:
!
!	This module contains routines to move strings to and from the
!	process permanent common area.
!
! ENVIRONMENT: Native mode VAX processor, Any mode.
!
! AUTHOR: V. Eriksson, CREATION DATE: 7-Nov-79
!
! MODIFIED BY:
!
! 	VERSION 1.0
!
! 01	-
! 1-002	- Fit into the RTL's build procedure and convert to LIB$ width, 
!	  case and commenting conventions.  JBS 02-DEC-1979
! 1-003	- Change return codes from STR$ to LIB$.  JBS 22-JAN-1980
! 1-004 - Change copy call from STR$COPY_DX to LIB$SCOPY_DXDX6.  This
!	  eliminates the need for a handler and the need to convert
!	  STR$ statuses to LIB$ statuses.  Also faster.
!	  RKR 26-MAY-1981.
! 1-005 - Add special-case code to process classes of string descriptors
!	  that "read" like fixed strings.  RKR 7-OCT-1981.
! 1-006 - Redirect jsb's from LIB$ANALYZE_DESC_R3 to
!	  LIB$ANALYZE_SDESC_R2.  Use LIB$SCOPY_R_DX6 instead of
!	  LIB$SCOPY_DXDX6 to pick up some more speed.  RKR 18-NOV-1981.
!--

!<blf/page>

!
! SWITCHES :
!

SWITCHES ADDRESSING_MODE 
		(EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES
!

REQUIRE 'RTLIN:STRLNK';		! Linkages for LIB$ANALYZE_SDESC_R2

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    LIB$PUT_COMMON,		! Puts a string into the common area
    LIB$GET_COMMON;		! Gets a string from the common area

!
! INCLUDE FILES:
!

LIBRARY 'RTLSTARLE';		! Get descriptor field definitions

REQUIRE 'RTLIN:RTLPSECT';	! Define the declare_psects macro

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!

LITERAL
    COMMON_LENGTH = 256,	! Length of common area in P1 space
    COMMON_OFFSET = 0;		! Offset of common area from base in 
				! P1 space pointed to by descriptor

!
! PSECTS:
!
DECLARE_PSECTS (LIB);		! Declare psects for the LIB$ facility
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    LIB$ANALYZE_SDESC_R2 : LIB$ANALYZE_SDESC_JSB_LINK, ! Routine to 
						       ! extract length
						       ! and address of
						       ! 1st data byte
    LIB$SCOPY_R_DX6 : STRING_JSB;	! Routine to copy string

EXTERNAL
    SYS$GL_COMMON : REF BLOCK [, BYTE];		! Pointer to descriptor 
						! of common area in P1 
						! space.

!+
! The following error codes are used in this module
!-

EXTERNAL LITERAL
    LIB$_INVSTRDES,				! invalid string descr.
    LIB$_STRTRU;				! string truncated


GLOBAL ROUTINE LIB$PUT_COMMON (		! Put string into common area

	STRING_DESCR,			! String to put
	BYTES_COPIED			! Number of bytes copied

			      ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	The string (described by first parameter) is copied to the
!	common area. The length of the string is moved to the
!	first longword of the area. If the string is too long, then
!	only part of the string is copied. The number of bytes copied is
!	returned in the parameter bytes_copied, if the routine is called
!	by two parameters.
!
! FORMAL PARAMETERS:
!
!	string_descr.rt.dx -	Pointer to desriptor of string to be 
!				copied
!	bytes_copied.ww.r  -	Pointer to word to receive # bytes 
!				copied
!				(optional parameter)
!
! IMPLICIT INPUTS:
!
!	SYS$GL_COMMON	   -	Pointer to descriptor of the common area
!
! IMPLICIT OUTPUTS:
!
!	The common area is (partly) filled by the string.
!	The length of the string is put in the first longword
!	of the common area.
!
! CONDITION CODES:
!
!	SS$_NORMAL	- success
!	LIB$_INVSTRDES	- invalid string descriptor
!	LIB$_STRTRU	- common had room for only part of the string
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    BUILTIN
	NULLPARAMETER;

    MAP
	STRING_DESCR : REF BLOCK [, BYTE],	! Points to the string 
						! descr.
	BYTES_COPIED : REF VECTOR [, WORD];	! Points to word to 
						! receive number of 
						! bytes copied

    LOCAL
	SRC_LEN,				! Length of source
	SRC_ADDR,				! Address of 1st data
						! byte of source
	COMMON_DESCR : BLOCK [8, BYTE],		! Descriptor of common 
						! string area
	STS;					! Status to return to 
						! caller

!+
! Initialise the common string area descriptor.
!-
    COMMON_DESCR [DSC$W_LENGTH] = 
	MINU (.SYS$GL_COMMON [DSC$W_LENGTH], COMMON_LENGTH) - 4;
    COMMON_DESCR [DSC$A_POINTER] = 
	.SYS$GL_COMMON [DSC$A_POINTER] + COMMON_OFFSET + 4;
    COMMON_DESCR [DSC$B_DTYPE] = DSC$K_DTYPE_Z;
    COMMON_DESCR [DSC$B_CLASS] = DSC$K_CLASS_S;

!+
! Extract length and address of 1st data byte from source string
!-
    IF .STRING_DESCR [DSC$B_CLASS] GTRU DSC$K_CLASS_D
    THEN			! generalized extraction needed
	BEGIN
	STS = LIB$ANALYZE_SDESC_R2 ( .STRING_DESCR ;
				     SRC_LEN, SRC_ADDR ) ;
	END
    ELSE			! can fetch pieces directly

	BEGIN
	SRC_LEN = .STRING_DESCR [DSC$W_LENGTH] ;
	SRC_ADDR = .STRING_DESCR [DSC$A_POINTER] ;
	STS = SS$_NORMAL ;
	END ;
!+
! If status returned was not a success, skip the copy, but update
! BYTES_COPIED (if present).
!-

    IF NOT .STS
    THEN
	BEGIN	! bad source descriptor
	IF NOT NULLPARAMETER (2) THEN BYTES_COPIED [0] = 0 ;
	RETURN .STS ;
	END ;	! bad source descriptor

!+
! Move as much as possible of the string to the common string area.
!-
    STS = LIB$SCOPY_R_DX6 ( .SRC_LEN, .SRC_ADDR, COMMON_DESCR) ;

!+
! Put the number of bytes copied in the first word of the common
! area.
!-
    .SYS$GL_COMMON [DSC$A_POINTER] = 
		MINU (.SRC_LEN, .COMMON_DESCR [DSC$W_LENGTH] );

!+
! Put number of bytes copied in the parameter bytes_copied (if the 
! second parameter is specified).
!-
    IF NOT NULLPARAMETER (2) THEN 
		BYTES_COPIED [0] = .(.SYS$GL_COMMON [DSC$A_POINTER]);

    RETURN .STS;
    END;					! End of LIB$PUT_COMMON


GLOBAL ROUTINE LIB$GET_COMMON (		! Get a string from common area

	BUFFER_DESCR,		! Where to put string
	BYTES_COPIED		! Number of bytes actually copied

			      ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	The string in the common area is copied to the
!	buffer given by the parameter buffer_descr. The string
!	length is fetched from the first longword of the common
!	area. If the string is too long for the buffer, then only
!	part of the string is copied. The number of bytes copied
!	is returned by the parameter bytes_copied, if the routine is
!	called by two parameters.
!
! FORMAL PARAMETERS:
!
!	buffer_descr.rz.dx  -	Pointer to descr of buffer to receive 
!				string
!	bytes_copied.ww.r   -	Pointer to word to receive # bytes 
!				copied
!				(optional parameter)
!
! IMPLICIT INPUTS:
!
!	SYS$GL_COMMON	    -	Pointer to descriptor of common area
!
! IMPLICIT OUTPUTS:
!
!	The buffer described by the parameter buffer_descr is (partly) 
!	filled by the string from the common area.
!
! ROUTINE VALUE:
!
!	SS$_NORMAL	- success
!	LIB$_INVSTRDES	- invalid string descriptor
!	LIB$_STRTRU	- string was longer than buffer and was 
!			  truncated
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    BUILTIN
	NULLPARAMETER;

    MAP
	BUFFER_DESCR : REF BLOCK [, BYTE], ! Points to receive buffer
	BYTES_COPIED : REF VECTOR [, WORD];! Points to word to receive 
					   ! number of bytes copied

    LOCAL
	IN_LEN,				! Size of input area
	OUT_LEN,			! Size of output area
	OUT_ADDR,			! Address of 1st data byte of
					! output area
	COMMON_DESCR : BLOCK [8, BYTE],	! Descriptor of the common 
					! string area.
	STS;				! Status to return to caller

!+
! Move as much as possible of the string from the common area to
! the buffer.
!-
    IN_LEN = MINU (.(.SYS$GL_COMMON [DSC$A_POINTER]), 
		   COMMON_LENGTH - 4);

    STS = LIB$SCOPY_R_DX6 ( .IN_LEN, 				! length
			    .SYS$GL_COMMON [DSC$A_POINTER] + 	! addr
					COMMON_OFFSET + 4,
			    .BUFFER_DESCR) ;

! Move the number of bytes copied to the parameter bytes_copied, if the
! second parameter is specified.
!-
    IF NOT NULLPARAMETER (2)
    THEN
	BEGIN
	!+
	! Determine how many bytes actually got copied into destination
	! buffer by LIB$SCOPY_R_DX6.
	!-
	IF .BUFFER_DESCR [DSC$B_CLASS] GTRU DSC$K_CLASS_D
	THEN			! generalized extraction of length
	    BEGIN
	    LIB$ANALYZE_SDESC_R2 ( .BUFFER_DESCR ; OUT_LEN, OUT_ADDR ) ;
	    END

	ELSE			! can fetch length directly

	    OUT_LEN = .BUFFER_DESCR [DSC$W_LENGTH] ;

	BYTES_COPIED [0] = MINU (.IN_LEN, .OUT_LEN);

	END;
    RETURN .STS;
    END;				! End of LIB$GET_COMMON

END					! End of module LIB$COMMON

ELUDOM
