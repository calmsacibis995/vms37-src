MODULE BAS$SCALE (				! Support scaling
		IDENT = '1-008'			! File: BASSCALE.B32 Edit: PLL1008
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!

!++
! FACILITY:  BASIC-PLUS-2 Miscellaneous
!
! ABSTRACT:
!
!	This module contains compiled code support routines
!	for scaling and descaling.
!
! ENVIRONMENT:  VAX-11 user mode
!
! AUTHOR: John Sauter, CREATION DATE: 08-MAY-1979
!
! MODIFIED BY:
!
! 1-001	- Original.
! 1-002	- Add BAS$$SCALE_R1.  JBS 29-MAY-1979
! 1-003	- Use BAS$$COPY_D to fetch double-precision numbers.
!	   JBS 29-MAY-1979
! 1-004	- Add BAS$$SCALE_L_R1.  JBS 26-JUN-1979
! 1-005	- Change MTH$FLOOR_D to MTH$DFLOOR.  JBS 27-JUL-1979
! 1-006	- Change BAS$$COPY_D to BAS$$COPY_D_R1.  JBS 23-AUG-1979
! 1-007	- Change MTH$DFLOOR to MTH$DINT.  JBS 19-DEC-1979
! 1-008 - Remove the check for a BASIC frame from BAS$SCALE_D_R1
!	  and BAS$DSCALE_D_R1.  (This is so BAS$CHANGE can call
!	  them.)  PLL 22-MAY-1981
!--

!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!

REQUIRE 'RTLIN:BASLNK';				! BASIC linkages

LINKAGE
    COPY_JSB = JSB (REGISTER = 0, REGISTER = 1) : 	!
    NOTUSED (2, 3, 4, 5, 6, 7, 8, 9, 10, 11);

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    BAS$SCALE_D_R1 : NOVALUE BAS$SCALE_LINK,	! Scale a number
    BAS$DSCALE_D_R1 : NOVALUE BAS$SCALE_LINK,	! Descale a number
    BAS$$SCALE_R1 : NOVALUE BAS$SCALE_JSB,	! Fetch the scale as double
    BAS$$SCALE_L_R1 : BAS$SCALE_JSB;		! Fetch the scale power

!
! INCLUDE FILES:
!

REQUIRE 'RTLIN:BASFRAME';			! BSF symbols

LIBRARY 'RTLSTARLE';				! symbols for strings

REQUIRE 'RTLIN:RTLPSECT';			! macros for defing psects

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! PSECTS:
!
DECLARE_PSECTS (BAS);				! declare psects for BAS$ facility
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    MTH$DINT,					! Remove fraction part
    BAS$$COPY_D_R1 : COPY_JSB NOVALUE,		! Move a D_float number
    BAS$$MULD,					! Multiply D_float numbers
    BAS$$DIVD,					! Divide D_float numbers
    BAS$HANDLER;				! BASIC frame marker


GLOBAL ROUTINE BAS$SCALE_D_R1 (			! Scale a value
	VALHI, 					! High 32-bits of value
	VALLO					! Low 32-bits of value
    ) : NOVALUE BAS$SCALE_LINK =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Scale a value.  This is done by multiplying by the scale factor
!	and integerizing the result.  
!	
!
! FORMAL PARAMETERS:
!
!	VAL.rd.v	The D_floating value to be scaled, presented to
!			BLISS as VALHI and VALLO.
!
! IMPLICIT INPUTS:
!
!	The scale factor, in the major frame.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	The scaled, double precision number.
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	May get arithmetic faults.
!
!--

    BEGIN

    EXTERNAL REGISTER
	BSF$A_MAJOR_STG : REF BLOCK [0, BYTE] FIELD (BSF$MAJOR_FRAME),
	BSF$A_MINOR_STG,
	BSF$A_TEMP_STG;

    
    LOCAL
	VAL : VECTOR [2, LONG];			! D_floating value being manipulated

!+
! Save the input value, so we get some registers to work with.
!-
    VAL [0] = .VALHI;
    VAL [1] = .VALLO;

	BEGIN
!+
! Multiply the argument by the scale factor, and then integerize.
!-

	LOCAL
	    MAJOR_FMP : REF BLOCK [, BYTE] FIELD (BSF$FCD);

	MAJOR_FMP = BSF$A_MAJOR_STG [BSF$FRAME_BASE];
	BAS$$MULD (VAL [0], MAJOR_FMP [BSF$D_SCALE_DOU], VAL [0]);
	MTH$DINT (VAL [0]);
        END;
    RETURN;
    END;					! of BAS$SCALE_D_R1


GLOBAL ROUTINE BAS$DSCALE_D_R1 (		! Descale a value
	VALHI, 					! High 32-bits of value
	VALLO					! Low 32-bits of value
    ) : NOVALUE BAS$SCALE_LINK =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Descale a value.  This is done by dividing by the scale factor.
!	
!	
!
! FORMAL PARAMETERS:
!
!	VAL.rd.v	The D_floating value to be descaled, presented
!			to BLISS as VALHI and VALLO.
!
! IMPLICIT INPUTS:
!
!	The scale factor, in the major frame.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	The descaled, double precision number.
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	May get arithmetic faults.
!
!--

    BEGIN

    EXTERNAL REGISTER
	BSF$A_MAJOR_STG : REF BLOCK [0, BYTE] FIELD (BSF$MAJOR_FRAME),
	BSF$A_MINOR_STG,
	BSF$A_TEMP_STG;

    
    LOCAL
	VAL : VECTOR [2, LONG];			! D_floating value being manipulated

!+
! Save the input value, so we get some registers to work with.
!-
    VAL [0] = .VALHI;
    VAL [1] = .VALLO;

	BEGIN
!+
! Divide the argument by the scale factor, then load into R0 and R1.
!-

	LOCAL
	    MAJOR_FMP : REF BLOCK [, BYTE] FIELD (BSF$FCD);

	MAJOR_FMP = BSF$A_MAJOR_STG [BSF$FRAME_BASE];
	BAS$$DIVD (MAJOR_FMP [BSF$D_SCALE_DOU], VAL [0], VAL [0]);
	BEGIN

	REGISTER
	    R0 = 0,
	    R1 = 1;

	R0 = .VAL [0];
	R1 = .VAL [1];
	END;
        END;
    RETURN;
    END;					! of BAS$DSCALE_D_R1


GLOBAL ROUTINE BAS$$SCALE_R1 (			! Fetch the scale
	FMP					! Frame containing scale
    ) : NOVALUE BAS$SCALE_JSB =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Fetch the scale value from a frame.  This routine is for use by
!	math routines to fetch the scale from their caller.  If the
!	frame is not a BASIC frame, a double-precision 1.0 is returned.
!
! FORMAL PARAMETERS:
!
!	FMP.ra.v	The (possibly BASIC) frame containing the scale
!			factor.
!
! IMPLICIT INPUTS:
!
!	The scale factor, in the major frame.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	The scale factor, as a double-precision number.
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	May get arithmetic faults.
!
!--

    BEGIN

    MAP
	FMP : REF BLOCK [, BYTE] FIELD (BSF$FCD);

!+
! If this is not a BASIC frame, return 1.0.
!-

    IF (.FMP [BSF$A_HANDLER] NEQA BAS$HANDLER)
    THEN
	BEGIN

	REGISTER
	    R0 = 0,
	    R1 = 1;

	BUILTIN
	    CVTLD;

	CVTLD (%REF (1), R0);
	END
    ELSE
	BEGIN
!+
! Otherwise return the real scale factor.
!-

	LOCAL
	    MAJOR_FMP : REF BLOCK [, BYTE] FIELD (BSF$FCD),
	    BSF$A_MAJOR_STG : REF BLOCK [, BYTE] FIELD (BSF$MAJOR_FRAME),
	    VAL : VECTOR [2, LONG];

	BSF$A_MAJOR_STG = .FMP [BSF$A_BASE_R11];
	MAJOR_FMP = BSF$A_MAJOR_STG [BSF$FRAME_BASE];
	BAS$$COPY_D_R1 (MAJOR_FMP [BSF$D_SCALE_DOU], VAL);
	BEGIN

	REGISTER
	    R0 = 0,
	    R1 = 1;

	R0 = .VAL [0];
	R1 = .VAL [1];
	END;
	END;

    RETURN;
    END;					! of BAS$SCALE_R1


GLOBAL ROUTINE BAS$$SCALE_L_R1 (		! Fetch the scale
	FMP					! Frame containing scale
    ) : BAS$SCALE_JSB =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Fetch the scale value from a frame.  This routine is for use by
!	math routines to fetch the scale from their caller.  If the
!	frame is not a BASIC frame, 0 is returned.
!
! FORMAL PARAMETERS:
!
!	FMP.ra.v	The (possibly BASIC) frame containing the scale
!			factor.
!
! IMPLICIT INPUTS:
!
!	The scale factor, in the major frame.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	The scale factor, as an integer power of 10.
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	FMP : REF BLOCK [, BYTE] FIELD (BSF$FCD);

!+
! If this is not a BASIC frame, return 0.
!-

    IF (.FMP [BSF$A_HANDLER] NEQA BAS$HANDLER)
    THEN
	0
    ELSE
	BEGIN
!+
! Otherwise return the real scale factor.
!-

	LOCAL
	    MAJOR_FMP : REF BLOCK [, BYTE] FIELD (BSF$FCD),
	    BSF$A_MAJOR_STG : REF BLOCK [, BYTE] FIELD (BSF$MAJOR_FRAME),
	    VAL : VECTOR [2, LONG];

	BSF$A_MAJOR_STG = .FMP [BSF$A_BASE_R11];
	MAJOR_FMP = BSF$A_MAJOR_STG [BSF$FRAME_BASE];
	.MAJOR_FMP [BSF$B_SCA_V_DOU]
	END

    END;					! of BAS$SCALE_D_R1

END

ELUDOM
