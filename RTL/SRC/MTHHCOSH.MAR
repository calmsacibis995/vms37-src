	.TITLE	MTH$HCOSH 	; H floating Hyperbolic Cosine routine
				; (HCOSH)
	.IDENT /1-006/		; File: MTHHCOSH.MAR	EDIT: RNH1006
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;
; FACILITY: MATH LIBRARY
;++
; ABSTRACT:
;
; MTH$HCOSH is a function  which  returns the H floating hyperbolic cosine
; of its H floating point argument. The call is standard
; call-by-reference.
;
;--
;
; VERSION: 1
;
; HISTORY:
; AUTHOR:
;	John A. Wheeler, 12-Sep-1979: Version 1
;
; MODIFIED BY:
;
;
;

	.SBTTL	HISTORY	; Detailed Current Edit History


; Edit History for Version 1 of MTH$HCOSH 
;
; 1-001 - Adapted from MTH$GCOSH.  JW 12-Sep-1979
; 1-002 - Use MTH$HEXP_R6.  SBL 4-Oct-1979
; 1-003 - H_0.25 should be literal rather than own storage.  SBL 7-Oct-1979
; 1-004 - Don't store reserved operand before signal.  SBL 7-Feb-1980
; 1-005 - Changed lower limit for Chebyshev approximation from 2**-56 to
;	  2**-57.
;	- Eliminated second call to EXP for input values between .25 and
;	  57*ln2 by computing COSH(x) = (Z + 1/Z)/2, with Z = EXP(|x|).
;	- Eliminated second call to EXP for input values between 57*ln2
;	  and 16383*ln2.
;	- Changed all final floating point divisions by 2 to interger 
;	  subrtracts of 1 from the exponent field.
;	- Extended maximum range to 16384*ln2.
;	- Chaneged logic for computing EXP(|x|-ln2) to reduce error.
;	- RNH 10-FEB-81
; 1-006 - Eliminated symbolic short literals.  RNH 15-Oct-81

	.SBTTL	DECLARATIONS	; Declarative Part of Module

;
; INCLUDE FILES:
;
; EXTERNAL SYMBOLS:
	.DSABL	GBL
	.EXTRN	MTH$$SIGNAL
	.EXTRN	MTH$K_FLOOVEMAT
	.EXTRN	MTH$HEXP_R6
;
; EQUATED SYMBOLS:


;
; MACROS:	none
;


;
; PSECT DECLARATIONS:

	.PSECT	_MTH$CODE	PIC,SHR,LONG,EXE,NOWRT
					; program section for math routines
;
; OWN STORAGE:	none
;
;
; CONSTANTS:
;

H_16383_LOG_2:
	.QUAD	^XE3E0A45E62DE400E
	.QUAD	^X6B251812C66964DB 	; 16383*ln2
H_16384_LOG_2:
	.QUAD	^XA39E2FEF62E4400E                            
	.QUAD	^X07E6673093C7F357 	; 16384*ln2
H_LOG_2_HI:
	.QUAD	^XA39E2FEF62E44000
	.QUAD	^X4000673093C7F357 	; (high 109 bits of ln2)+2*-109
H_LOG_2_LO:
	.QUAD	^XF0CB950BC0D0BF9D
	.QUAD	^X5F359D27D674CD98 	; ln2 - H_LOG_2_HI
H_2_POWER_57:
	.QUAD	^X000000000000403A
	.QUAD	0			; 2*57

HCOSHTAB:
 	.LONG	^X8C8F3FA8,^X2B3EE172	;  2.502658279567823990162458156254711E -27
 	.LONG	^X5BD2E986,^XADEB4F57
 	.LONG	^XF2C93FB1,^XD01949AF	;  1.611665395066462480330719767236559E -24
 	.LONG	^X1DF63B8C,^XC60346B9
 	.LONG	^X0CE33FBB,^X64FF997D	;  8.896792721476872237647982378253568E -22
 	.LONG	^X0B3F40F3,^X7CB38AA4
 	.LONG	^XE5423FC3,^XF4FDBA3C	;  4.110317621712466937445902717251860E -19
 	.LONG	^X6DEFA6F1,^X60105113
 	.LONG	^X68273FCC,^X9928863B	;  1.561920696859944528721805191130865E -16
 	.LONG	^X54A49ACF,^XE533A92E
 	.LONG	^XAE7F3FD4,^X3B813E73	;  4.779477332387377634901255174808471E -14
 	.LONG	^XD10B2ED8,^X4B6B3FDC
 	.LONG	^X93973FDC,^X07C94A8C	;  1.147074559772972474513234083768590E -11
 	.LONG	^XFC3DD25A,^X7DE98CBB
 	.LONG	^X1EED3FE4,^X8D898EFF	;  2.087675698786809897912112497212423E  -9
 	.LONG	^X371B7B54,^X85215944
 	.LONG	^X27E43FEB,^X89F5FB77	;  2.755731922398589065255749092851911E  -7
 	.LONG	^XF01FC72E,^X94EA88C4
 	.LONG	^XA01A3FF1,^X1A0101A0	;  2.480158730158730158730158708693922E  -5
 	.LONG	^X01A0A01A,^X1BE015A7
 	.LONG	^X6C163FF7,^X16C1C16C	;  1.388888888888888888888888888904959E  -3
 	.LONG	^XC16C6C16,^XB9DF16C2
 	.LONG	^X55553FFC,^X55555555	;  4.166666666666666666666666666666603E  -2
 	.LONG	^X55555555,^X54ED5555
 	.LONG	^X00004000,^X00000000	;  5.000000000000000000000000000000000E  -1
 	.LONG	^X00000000,^X00000000
 	.LONG	^X00004001,^X00000000	;  9.999999999999999999999999999999999E  -1
 	.LONG	^X00000000,^X00000000

HCOSHLEN	= .- HCOSHTAB/16


	.SBTTL	MTH$HCOSH  - H Floating point COSH function


;++
; FUNCTIONAL DESCRIPTION:
;
; HCOSH  - double precision H floating point function
;
; HCOSH(X) is computed as:
;
;	If |X| < 2*-57, HCOSH(X) = 1.
;	IF 2*-57 =< |X| < 0.25, HCOSH(X) = Chebyshev series
;	If 0.25 =< |X| < 57*ln2, let Z = HEXP(|X|) and set HCOSH(X) = (Z+1/Z)/2
;	If 57*ln2 =< |X| 16383*ln2, then HCOSH(X) = HEXP(|X|)/2.
;	If 16383*ln2 =< |X| < 16384*ln2, then HCOSH(X) = HEXP(|X|-ln2).
;	If 16384*ln2 =< |X|, then overflow.
;
; CALLING SEQUENCE:
;
;	hcosh.wh.v = MTH$HCOSH(x.rh.r)
;
;		-or-
;
;	CALL MTH$HCOSH(hcosh.wh.r, x.rh.r)
;
;	Because an H-floating result cannot be expressed in 64 bits, it is
;	returned as the first argument, with the input parameter displaced
;	to the second argument, in accordance with the Procedure Calling

;
; INPUT PARAMETERS:

	LONG = 4			; define longword multiplier
	x = 2 * LONG			; Contents of x is the argument

; IMPLICIT INPUTS:	none
;
; OUTPUT PARAMETERS:
;
	hcosh = 1 * LONG
;
; IMPLICIT OUTPUTS:	none
;
; COMPLETION CODES:	none
;
; SIDE EFFECTS:
;
; Signal: MTH$_FLOOVEMAT if 16384*ln2 =< |X| with reserved operand in R0/R3
; (copied to the signal mechanism vector CHF$L_MCH_R0/R1 by LIB$SIGNAL).
; Associated message is: "FLOATING OVERFLOW IN MATH LIBRARY". Result is reserved
; operand -0.0 unless a user supplied (or any) error handler changes CHF$L_MCH_R0/R1.
;
; NOTE: This procedure disables floating point underflow, enables integer
; overflow.
;
;---


	.ENTRY	MTH$HCOSH, ^M<IV, R2, R3, R4, R5, R6, R7 >
					; standard call-by-reference entry
					; disable DV (and FU), enable IV
	MTH$FLAG_JACKET			; flag that this is a jacket procedure in
					; case of an error in routine
	MOVAB	G^MTH$$JACKET_HND, (FP) ; Set handler address to jacket handler
					; If an error, convert signal to user PC
					; and resignal
	MOVH	@x(AP), R0		; R0/R3 = |X| = @value(AP)
	BICW2	#^X8000, R0		; R0/R3 = |X|
	CMPW	R0, #^X3FFF		; compare |X| with 0.25
	BGEQ	GEQ_TO_0.25		; branch if |X| >= 0.25

;
; |X| < 0.25
;

	CMPW	R0, #^X3FC8 		; compare |X| with 2*-57
	BGEQ	GEQ_TO_2M57		; branch if |X| >= 2*-57

;
; |X| < 2*-57
;

	MOVH	#1, @hcosh(AP)		; Store 1.0 as result
	RET				; return 

;
; 2*-57 =< |X| < 0.25
;

GEQ_TO_2M57:
	MULH2	R0,R0			;Get ARG*2 for POLYH.
	POLYH	R0, #HCOSHLEN-1, HCOSHTAB
					; R0/R3 = SUM(Ci*X*i)
	MOVH	R0, @hcosh(AP)		; Store result in first argument
	RET				; return 

;
; 0.25 =< |X|
;

GEQ_TO_0.25:
	CMPH	R0, H_16383_LOG_2	; compare |X| with 16383*ln2
	BGTR	GTR_THAN_16383_LOG_2	; branch if |X| > 16383*ln2

;
; 0.25 =< |X| =< 16383*ln2
;

	JSB	MTH$HEXP_R6		; R0/R3 = HEXP(|X|)
	CMPH	R0, H_2_POWER_57	; Compare HEXP(|X|) with 2*57, if
	BGTR	ONE_TERM_ONLY		; larger, only one term is needed.
	DIVH3	R0, #1, R4		; R4/R7 = HEXP(-|X|)
	ADDH2	R4, R0			; R0/R3 = HEXP(X) + HEXP(-X)
ONE_TERM_ONLY:
	SUBW2	#^X0001, R0 		; R0/R3 = (HEXP(X) + HEXP(-X))/2 
        MOVO	R0, @hcosh(AP)		; move COSH(x) to first argument
	RET				; and return 

;
; 16383*ln2 < |X|
;

GTR_THAN_16383_LOG_2:
	CMPH	R0, H_16384_LOG_2	; compare |X| with 16384*ln2
	BGEQ	ERROR			; branch to ERROR if 16384*ln2 =<|X| 


;
; 16383*ln2 =< |X| < 16384*ln2 
;

	SUBH2	H_LOG_2_HI, R0		; R0/R3=|X|-(hi 109 bits of ln2+2*-109)
	JSB	MTH$HEXP_R6		; R0/R3=HEXP(|X|-H_LOG_2_HI)
	MULH3	H_LOG_2_LO, R0, R4	; R4/R7=H_LOG_2_LO*HEXP(|X|-H_LOG_2_LO)
	ADDH3	R4, R0, @hcosh(AP)	; Store HEXP(|X|-ln2) in 1st argument
	RET				; return 

;
; 16383*ln2 + LOG(2) =< |X|, error
;

ERROR:	MOVZBL	#MTH$K_FLOOVEMAT, -(SP)	; condition value
	ASHQ	#15, #1, R0		; R0 = result = reserved operand -0.0
					; goes to R0/R3 so error handler
					; can modify the result.
	CLRQ	R2			; ...
	CALLS	#1, MTH$$SIGNAL 	; signal error and use real user's PC
	MOVO	R0, @hcosh(AP)		; Restore result
	RET				; return 



	.END
