MODULE FOR$ENDFILE (	! FORTRAN ENDFILE statement 
	IDENT = '1-005'	! File: FORENDFIL.B32  Edit: SBL1005
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  FORTRAN Support Library
!
! ABSTRACT:
!
!	Contains routine FOR$ENDFILE for support of FORTRAN endfile
!	statement.
!
! ENVIRONMENT:  User Mode - AST re-entrant
!
! AUTHOR:  Jonathan M. Taylor, CREATION DATE: 24-Oct-1977
!
! MODIFIED BY:
!
! [Previous edit history deleted.  SBL 15-July-1981]
! 1-001	- Update version number and copyright notice.  JBS 16-NOV-78
! 1-002	- Change REQUIRE file names from FOR... to OTS...  JBS 07-DEC-78
! 1-003	- Change OTSOPN back to FOROPN, and change the prefix on LUN
!	   parameters from OPEN to LUB.  JBS 13-DEC-78
! 1-004 - Implement ERR= and IOSTAT=.  SBL 1-May-1979
! 1-005 - Correct module name.  SBL 15-July-1981
!--

!
! LINKAGES:
!
REQUIRE 'RTLIN:OTSLNK';		! define all linkages

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
	FOR$ENDFILE;

BUILTIN
	ACTUALCOUNT;

!
! INCLUDE FILES:
!
REQUIRE 'RTLML:FORERR';		! FORTRAN error number definitions
REQUIRE 'RTLIN:OTSMAC';		! Define macros
REQUIRE 'RTLIN:RTLPSECT';	! Define DECLARE_PSECTS macro
LIBRARY 'RTLSTARLE';		! STARLET library for symbols and macros
REQUIRE 'RTLIN:FOROPN';		! FORTRAN OPEN parameters
REQUIRE 'RTLML:FORPAR';		! inter-module constants
REQUIRE 'RTLML:OTSLUB';		! LUB offset definitions
REQUIRE 'RTLML:OTSISB';		! to get ISB length only
!
! MACROS:
!	NONE

!
! EQUATED SYMBOLS:
!	NONE

!
! PSECT DECLARATIONS:
!

	DECLARE_PSECTS (FOR);		! declare PSECTs for FOR$ facility

!
! OWN STORAGE:
!	NONE

!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
	FOR$$IOSTAT_HND,			! error handler
	FOR$$CB_PUSH: JSB_CB_PUSH NOVALUE,		! Get a LUB/ISB/RAB
	FOR$$CB_POP: JSB_CB_POP NOVALUE,		! Return the I/O system
	FOR$$SIGNAL_STO: NOVALUE,	! convert error number and signal_stop
	FOR$$OPEN_DEFLT: CALL_CCB NOVALUE;	! default OPEN routine

GLOBAL ROUTINE FOR$ENDFILE  (	! FORTRAN ENDFILE statement support 
	UNIT,
	ERR_EQL)
	=
!++
! FUNCTIONAL DESCRIPTION:
!
!	Perform FORTRAN ENDFILE semantics.  Check file and record type
!	for legality of the ENDFILE.
!	Open the file if not already open and set flag to finish defaults later.
!	Write a one byte ^Z record.
!
! FORMAL PARAMETERS:
!
!	UNIT.rlu.v			logical unit number
!	ERR_EQL.rl.v			If 0 or omitted, all errors are signalled.
!					If non-zero, errors unwind to caller.
!
! IMPLICIT INPUTS:
!
!	LUB$V_NOTSEQORG			1 if ORGANIZATION is not 'SEQUENTIAL'
!	LUB$V_DIRECT			1 if ACCESS = 'DIRECT' or define file done
!	LUB$V_FIXED			1 if fixed length records specified in open
!	LUB$V_UNFORMAT			1 if FORMAT = 'UNFORMATTED' or define
!					file done
!	LUB$V_SEGMENTED			1 if SEGMENTED RECORDTYPE in OPEN statement
!					or defaulted that way
!	LUB$V_OPENED			1 if file already open on this unit
!
! IMPLICIT OUTPUTS:
!
!	LUB$L_LOG_RECNO			Incremented if ^Z record written
!
! ROUTINE VALUE:
!
!	An IOSTAT value.
!
! SIDE EFFECTS:
!
!	File is opened if closed previous to ENDFILE
!	SIGNAL_STOPs error FOR$_ENDFILERR if ENDFILE ignored for this type file
!	SIGNAL_STOPs FOR$_ENDFILERR if RMS $PUT error.
!
!--

    BEGIN

    GLOBAL REGISTER
	CCB = 11: REF BLOCK[, BYTE];

    LOCAL
	L_UNWIND_ACTION: VOLATILE,
	L_ERR_EQL_PRES: VOLATILE,
	L_EOF_CHAR: BYTE;

    ENABLE
	FOR$$IOSTAT_HND (L_UNWIND_ACTION, L_ERR_EQL_PRES);

    !+
    ! Determine if ERR= is present.
    !-

    IF ACTUALCOUNT () GTR 1 
    THEN
	L_ERR_EQL_PRES = .ERR_EQL
    ELSE
	L_ERR_EQL_PRES = 0;

    !+
    ! Action on error is not to pop a LUB.
    !-

    L_UNWIND_ACTION = FOR$K_UNWINDNOP;

    !+
    ! Allocate a LUB/ISB/RAB for this logical unit.
    ! ON return, CCB points to the current control block.
    !-

    FOR$$CB_PUSH (.UNIT, LUB$K_LUN_MIN);

    !+
    ! UNwind action is now to pop the LUB.
    !-

    L_UNWIND_ACTION = FOR$K_UNWINDPOP;

    !+
    ! Check various file attributes.  File must be:
    !	Sequential organization
    !	Sequential access
    !	Variable length records
    !	Must have segmented records if unformatteed
    !-

    IF .CCB[LUB$V_NOTSEQORG] OR
	.CCB[LUB$V_DIRECT] OR
	.CCB[LUB$V_FIXED] OR
	(.CCB[LUB$V_UNFORMAT] AND .CCB[LUB$V_SEGMENTED] EQL 0)
    THEN
	FOR$$SIGNAL_STO (FOR$K_ENDFILERR)
    ELSE

	BEGIN

	!+
	! If the file is not open, default open it.
	! But do not specify whether formatted or unformatted.
	! That will depend on the next I/O statement executed
	! so just set LUB$V_ENDFILOPN to be tested on every I/O statement.
	! When set, it will be cleared and the remaining defaults will be specified.
	!-

	IF .CCB[LUB$V_OPENED] EQL 0
	THEN
	    BEGIN
	    FOR$$OPEN_DEFLT (OPEN$K_ACC_SEQ,
			     OPEN$K_TYP_NEW,
			     OPEN$K_FOR_UNS);
	    CCB[LUB$V_ENDFILOPN] = 1;
	    END;

	!+
	! Manually write a one byte control Z record to the file.
	!-

	L_EOF_CHAR = FOR$K_CONTROL_Z;
	CCB[RAB$L_RBF] = L_EOF_CHAR;
	CCB[RAB$W_RSZ] = 1;

	IF NOT $PUT (RAB = .CCB)
	THEN
	    FOR$$SIGNAL_STO (FOR$K_ENDFILERR);

	!+
	! Increment the logical record number for backspace.
	!-

	CCB[LUB$L_LOG_RECNO] = .CCB[LUB$L_LOG_RECNO] + 1;

	END;

    !+
    ! Return the I/O system to its former state.
    !-

    FOR$$CB_POP ();

    RETURN 0;		! Success IOSTAT value
    END;

END
ELUDOM
