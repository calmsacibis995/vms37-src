MODULE LIB$GET_FOREIGN (		! Get a "foreign" command line
		IDENT = '1-011'	! File: LIBGETFOR.B32  Edit: RKR1011
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY: General Purpose Library
!
! ABSTRACT:
!
!	Contains a routine to return the command line from the
!	last entered CLI foreign command.  An optional prompt
!	string may be supplied.
!
! ENVIRONMENT: User mode - AST reentrant
!
! AUTHOR: Benn Schreiber and Steven Lionel, CREATION DATE: 18-May-1979
!
! EDIT HISTORY:
!
! 1-001 - Original.  Adapted from Benn Schreiber's MACRO version.  SBL 18-May-1979
! 1-002 - Call LIB$GET_COMMAND instead of LIB$GET_INPUT.  SBL 10-Jul-1979
! 1-003	- Optionally, return the number of characters returned.  Also, use
!	   the STR facility for string copies.  JBS 18-SEP-1979
! 1-004 - Back to SYS$INPUT if no command line.  SBL 28-Sept-1979
! 1-005 - If invoked via MCR, strip off first token.  SBL 8-Oct-1979
! 1-006 - If no prompt supplied, don't call LIB$GET_INPUT.  This was
!	  the original design, but edit 1-003 changed it.  SBL 16-Oct-1979
! 1-007 - If LIB$GET_INPUT returns an error, return it.  SBL 15-Jan-1980
! 1-008 - Use LIB$ routines instead of STR$.  SBL 22-Jan-1980
! 1-009 - Don't store OUTLEN until after the copy.  SPR 11-40365  SBL 27-Aug-1981
! 1-010 - Add optional parameter "force_prompt" and upcase string from
!	  LIB$GET_INPUT.  SBL 4-Nov-1981
! 1-011 - Change to do copying via LIB$SCOPY_DXDX6.  RKR 18-NOV-1981
!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

! LINKAGES:

REQUIRE 'RTLIN:STRLNK';			! linkage to LIB$SCOPY_DXDX6

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    LIB$GET_FOREIGN;			! Get foreign command line

!
! INCLUDE FILES:
!

LIBRARY 'RTLSTARLE';

REQUIRE 'RTLIN:RTLPSECT';

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! PSECT DEFINITIONS:
!
DECLARE_PSECTS (LIB);
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    SYS$CLI,				! Get command line from CLI
    LIB$SCOPY_DXDX6 : STRING_JSB,	! Copy strings of any type to 
					! any type
    LIB$SFREE1_DD,			! Free a dynamic string
    LIB$GET_INPUT;			! Get string from SYS$INPUT:

EXTERNAL LITERAL
    LIB$_INPSTRTRU,				! Input string truncated
    LIB$_STRTRU;				! String truncated (success)

EXTERNAL
    LIB$AB_UPCASE;				! Upcase translate table

GLOBAL ROUTINE LIB$GET_FOREIGN (		! Get a "foreign" command line
	GET_STRING: REF BLOCK [, BYTE],		! Returned string
	USER_PROMPT: REF BLOCK [, BYTE],	! Optional prompt
	OUTLEN: REF VECTOR [, WORD],		! Number of bytes stored in GET_STRING
        FORCE_PROMPT: REF VECTOR [, LONG]	! Force call to LIB$GET_INPUT
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	LIB$GET_FOREIGN obtains text from the command line that
!	activated the current image.  The user program can then
!	interpret this text in any manner it desires.  Using this
!	facility, user programs can be made to look like commands
!	which are intrinsic to the system.
!
!	The most useful way of using LIB$GET_FOREIGN, is if it is
!	called from a program activated by a DCL "foreign command",
!	hence the name.  A foreign command allows any image to be run
!	by means of its own command name.
!
!	To define a foreign command, use the following DCL command:
!
!	$ command_name :== $filespec
!
!	where "command_name" is the name of the foreign command you
!	wish to define and "filespec" is the fully qualified file specification
!	of the executable image to be run when "command_name" is invoked.
!
!	For example:
!
!	$ VULCAN :== $DB0:[SPOCK]VULCAN.EXE
!
!	The "$" is required and must immediately precede the file specification.
!
!	Assuming that the above command VULCAN was defined, the command
!	line:
!
!	$ VULCAN /OUTPUT=GANYMEDE TITAN.DAT
!
!	would start running the image DB0:[SPOCK]VULCAN.EXE.  If that
!	program then calls LIB$GET_FOREIGN, it can obtain the remainder
!	of the command line, which in the example would be the string
!
!	"/OUTPUT=GANYMEDE TITAN.DAT"
!
!	(without the quotes, of course).
!
!	The user program can then analyze this returned string in any manner
!	it desires.  No interpretation is done by DCL.
!
!	If the image resides in the SYS$SYSTEM: directory, it can be
!	run using the MCR command.  Normally, the first token in the
!	returned text would be the name of the image being run, but
!	LIB$GET_FOREIGN makes a special check and skips over that token.
!
!	The optional parameters "user_prompt" and "force_prompt" allow
!	LIB$GET_INPUT to be called to prompt the user for the command line
!	if no text was entered on the line that activated the program.  To
!	use this feature, specify a prompt string for "user_prompt"; if no
!	text is found on the command line, LIB$GET_INPUT will be called to
!	prompt for the text.  Text returned from LIB$GET_INPUT is translated
!	to upper case so as to minimize the differences between prompted-for
!	text and command-line text.
!
!	Some applications may wish to call LIB$GET_FOREIGN in a loop, having
!	it retrieve the command line on the first invocation, but prompting
!	with LIB$GET_INPUT on the second and subsequent invocations.  To
!	accomplish this, specify the parameter "force_prompt" as an integer
!	variable which is initialized before the loop to zero.  LIB$GET_FOREIGN
!	will set this variable to 1 before returning.  If "force_prompt" is
!	1 upon entry to LIB$GET_FOREIGN, LIB$GET_INPUT will be called directly.
!	Note that "user_prompt" must also be specified for prompting to occur.
!
!	If no command line is present and if "user_prompt" is omitted, a zero-length
!	string is returned.
!
!
! CALLING SEQUENCE:
!
!	status.wlc.v = LIB$GET_FOREIGN (get_string.wt.dx [, [user_prompt.rt.dx]
!			[, [outlen.ww.r] [, force_prompt.ml.r]]])
!
!
! FORMAL PARAMETERS:
!
!	get_string		- A string passed by descriptor into which
!				  is written the command line.
!
!	user_prompt		- An optional string passed by descriptor
!				  which is used for the prompt in the case
!				  that there is no information on the
!				  command line.  If omitted, no prompting
!				  is done.
!
!	outlen			- The number of bytes stored in get_string,
!				  not counting blank padding.
!
!	force_prompt		- An optional longword, passed by reference.
!				  If zero, the command line will be returned
!				  if present.  If one, LIB$GET_INPUT will
!				  be called instead.  "force_prompt" is set
!				  to 1 before returning.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION CODES:
!
!	SS$_NORMAL     - Successful completion
!	LIB$_INSVIRMEM - There was insufficient virtual memory to
!			 copy the string to the dynamic class output
!			 string.
!	LIB$_INVSTRDES - A string descriptor had an invalid format.
!	LIB$_INPSTRTRU - The command line was too big to fit in the
!			 output string.  It was truncated.
!	RMS$_xxx       - RMS errors returned by LIB$GET_INPUT.
!
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    BUILTIN
	NULLPARAMETER;

    LOCAL
	DYNAM_LEN,				! Length of dynamic string
	PROMPT_FLAG,				! Indicate whether or not to prompt
	RET_STATUS,				! Return status
	LGI_STATUS,				! Return status from LIB$GET_INPUT
	CLI_REQ_BLOCK : BLOCK [CLI$C_REQDESC, BYTE],	! CLI request block
	CLI_STATUS;				! Return status from SYS$CLI

!+
! Initialize CLI command request block.
!-
    CH$FILL (0, CLI$C_REQDESC, CLI_REQ_BLOCK);
    CLI_REQ_BLOCK [CLI$B_RQTYPE] = CLI$K_GETCMD;	! Request type = Get Command
    DYNAM_LEN = 0;					! No dynamic string yet
!+
! Determine if force_prompt is present.  If so and if 0, go ahead and call
! SYS$CLI.  If 1, don't call SYS$CLI but call LIB$GET_INPUT.
!-

    IF NULLPARAMETER (4)
    THEN
	PROMPT_FLAG = 0
    ELSE
	BEGIN
	PROMPT_FLAG = .FORCE_PROMPT [0];
	FORCE_PROMPT [0] = 1;
	END;

!+
! If PROMPT_FLAG is 0, then call SYS$CLI.
!-

    IF NOT .PROMPT_FLAG
    THEN
	BEGIN
    
    !+
    ! Get the command line from the CLI, if any.
    !-
	CLI_STATUS = SYS$CLI (CLI_REQ_BLOCK);

    !+
    ! If the image was invoked via MCR, skip over the first token which
    ! is the name of the image.
    !-

	IF .CLI_STATUS AND .CLI_REQ_BLOCK [CLI$B_RQSTAT] EQLU CLI$K_VERB_MCR
	THEN
	    BEGIN
	    LOCAL
		POINTER,				! Local pointer
		LENGTH,				! Local length
		ORIG_LENGTH,			! Original length
		CLI_DSC : REF BLOCK [8, BYTE];	! Pointer to CLI descriptor
	    CLI_DSC = CLI_REQ_BLOCK [CLI$Q_RQDESC];
	    POINTER = CH$FIND_CH (.CLI_DSC [DSC$W_LENGTH], .CLI_DSC [DSC$A_POINTER], %C' ');
	    IF CH$FAIL (.POINTER)	! Blank not found?
	    THEN
		CLI_DSC [DSC$W_LENGTH] = 0
	    ELSE
		BEGIN
		ORIG_LENGTH = .CLI_DSC [DSC$W_LENGTH];
		LENGTH = .ORIG_LENGTH - CH$DIFF (.POINTER, .CLI_DSC [DSC$A_POINTER]);
		POINTER = CH$FIND_NOT_CH (.LENGTH, .POINTER, %C' ');
		IF CH$FAIL (.POINTER)
		THEN
		    CLI_DSC [DSC$W_LENGTH] = 0
		ELSE
		    BEGIN
		    LENGTH = .ORIG_LENGTH - CH$DIFF (.POINTER, .CLI_DSC [DSC$A_POINTER]);
		    CLI_DSC [DSC$W_LENGTH] = .LENGTH;
		    CLI_DSC [DSC$A_POINTER] = .POINTER;
		    END;
		END;
	    END;
	END
    ELSE
	CLI_STATUS = 0;

!+
! Check for failure or null command line.  If so, call
! LIB$GET_INPUT if user supplied a prompt else return 0 length string.
!-

    LGI_STATUS = 1;		! Assume success
    IF (NOT .CLI_STATUS) OR (.CLI_REQ_BLOCK [CLI$W_RQSIZE] EQL 0)
    THEN
	BEGIN
	LOCAL
	    CLI_DSC : REF BLOCK [8, BYTE];
	CLI_DSC = CLI_REQ_BLOCK [CLI$Q_RQDESC];		! Descriptor address
	CLI_DSC [DSC$B_CLASS] = DSC$K_CLASS_D;		! Dynamic
	CLI_DSC [DSC$B_DTYPE] = DSC$K_DTYPE_T;		! Text
	CLI_DSC [DSC$W_LENGTH] = 0;			! 0-Length string
	CLI_DSC [DSC$A_POINTER] = 0;
	
	!+
	! If the user supplied a prompt, then call LIB$GET_INPUT
	! for the string.
	!-
	IF NOT NULLPARAMETER (2)
	THEN
	    LGI_STATUS = LIB$GET_INPUT (.CLI_DSC, .USER_PROMPT);
	DYNAM_LEN = .CLI_DSC [DSC$W_LENGTH];

	!+
	! Upcase the string
	!-

	CH$TRANSLATE (LIB$AB_UPCASE, .CLI_DSC [DSC$W_LENGTH],
		      .CLI_DSC [DSC$A_POINTER], %C' ',
		      .CLI_DSC [DSC$W_LENGTH], .CLI_DSC [DSC$A_POINTER]);
	END;

    !+
    ! Copy the string to the user's string with correct semantics.
    !-

    RET_STATUS = LIB$SCOPY_DXDX6 (CLI_REQ_BLOCK [CLI$Q_RQDESC], .GET_STRING);
    IF .RET_STATUS EQLU LIB$_STRTRU
    THEN
	RET_STATUS = LIB$_INPSTRTRU;

    !+
    ! If the user wants the length returned, return it.
    !-

    IF NOT NULLPARAMETER (3)
    THEN
	OUTLEN [0] = MINU (.CLI_REQ_BLOCK [CLI$W_RQSIZE], .GET_STRING [DSC$W_LENGTH]);

    !+
    ! Free our temporary string if we have one.
    !-

    IF .DYNAM_LEN GTR 0
    THEN
	LIB$SFREE1_DD (CLI_REQ_BLOCK [CLI$Q_RQDESC]);

    !+
    ! Return to our caller with the worst return status.
    !-

    IF .LGI_STATUS
    THEN
	RETURN .RET_STATUS
    ELSE
	RETURN .LGI_STATUS;

    END;					! End of routine LIB$GET_FOREIGN

END						!End of module LIB$GET_FOREIGN

ELUDOM
