MODULE FOR$FIND (				! Implements FORTRAN FIND statement
		IDENT = '2-016'			! File: FORFIND.B32 Edit: JBS2016
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY: FORTRAN Support Library - User Callable
!
! ABSTRACT:
!
!	This module implements the FORTRAN FIND statement.
!	This is performed by doing everything a READ Direct
!	I/O statement would do, except actually doing the I/O.
!
! ENVIRONMENT: User access mode; mixture of AST level or not.
!
! AUTHOR: Jonathan M. Taylor, CREATION DATE: 1-OCT-77 : Version 0
!
! MODIFIED BY:
!
!	JMT, 24-OCT-77: VERSION 2
! 2-0	- original
! 2-1	- Use FOR$K_abcmnoxyz as EXTERNAL LITERALs.  TNH 27-Oct-77
! 2-2	- Change MIXADDMOD to OPEDEFREQ; INVRECNUM to RECNUMOUT.  TNH 29-Oct-77
! 2-4	- Use FERR.  TNH 16-Dec-77
! 2-5	- Global register CCB.  JMT 8-Apr-78
! 2-06	- Change REQUIRE files for VAX system build.  DGP 28-Apr-78
! 2-07	- Use JSB linkages.  TNH 22-May-78
! 2-08	- Pass OPEN$K_LUN_MIN to FOR$$CB_PUSH.  TNH 22-May-78
! 2-09	- Change file name to FORFIND.B32, and change the names of
!	   the REQUIRE files similarly.  JBS 14-NOV-78
! 2-010	- Update the copyright notice.  JBS 16-NOV-78
! 2-011	- Change the REQUIRE file names from FOR... to OTS...  JBS 07-DEC-78
! 2-012	- Change OTSOPN back to FOROPN, and change the prefix on
!	   LUN parameters from OPEN to LUB.  JBS 13-DEC-78
! 2-013	- Add LIBRARY RTLSTARLE so that FOROPN can use its symbols.
!	   JBS 10-APR-1979
! 2-014 - Actually do a $FIND here.  Use IOSTAT handler.  SBL 8-May-1979
! 2-015 - Set LUB$V_FIND_LAST.  SBL 15-May-1979
! 2-016	- Put BUILTIN ACTUALCOUNT in the routine, since the next version of
!	  the BLISS compiler will require it to be there.  Since we are
!	  editing this module, improve the source text layout.  Note that
!	  this edit changes no code.  JBS 21-Aug-1980
!--

!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!

REQUIRE 'RTLIN:OTSLNK';				! define all linkages

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    FOR$FIND;					! FORTRAN FIND statement

!
! INCLUDE FILES:
!

LIBRARY 'RTLSTARLE';				! System symbols

REQUIRE 'RTLML:FORERR';				! FORTRAN error number definitions

REQUIRE 'RTLML:FORPAR';				! Inter-module constants

REQUIRE 'RTLIN:FOROPN';				! FORTRAN OPEN/CLOSE parameters

REQUIRE 'RTLIN:RTLPSECT';			! Define DECLARE_PSECTS macro

REQUIRE 'RTLML:OTSLUB';				! Get LUB offsets

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    FOR$$IOSTAT_HND,				! Error handler
    FOR$$OPEN_DEFLT : CALL_CCB NOVALUE,		! FORTRAN default file opener
    FOR$$SIGNAL_STO : NOVALUE,			! convert error code and signal
    FOR$$ASSOC : CALL_CCB NOVALUE,		! store rec. # in assoc. variable
    FOR$$CB_PUSH : JSB_CB_PUSH NOVALUE,		! Get a control block
    FOR$$CB_POP : JSB_CB_POP NOVALUE;		! Return a control block

!
! PSECT DECLARATIONS:
!
DECLARE_PSECTS (FOR);				! Declare PSECTS for FOR$ facility


GLOBAL ROUTINE FOR$FIND (UNIT, REC_NO, ERR_EQL) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Call CB_PUSH to get a control block for this UNIT.
!	If has not been declared to be direct access then ERROR.
!	If not already open then open ad direct-access, OLD, unformatted.
!	Set the record number into the LUB and (optionally) into the
!	users associated variable.
!	Call RMS to $FIND and lock the record.  Return the I/O system to its previous state.
!
! FORMAL PARAMETERS:
!
!	UNIT.rlu.v		Unit number (call by value)
!	REC_NO.rl.v		Record number to seek (call by value)
!	ERR_EQL.rl.v		If 1, return IOSTAT value
!				If omitted or zero, signal all errors
!
! IMPLICIT INPUTS:
!
!	LUB$V_DIRECT		1 if DEFINE FILE done or OPEN with access='DIRECT'
!	LUB$V_OPENED		1 if file previously opened
!
! IMPLICIT OUTPUTS:
!
!	LUB$L_LOG_RECNO		Gets set to the record number passed as
!				a parameter.
!	ass. var.		Users associated variable gets new LOG_RECNO
!	LUB$V_FIND_LAST		Set to 1 after successful find, else 0.
!
! ROUTINE VALUE:
!	NONE
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	The file is positioned to the requested record and the record is locked.
!	Users associated variable (if present) takes the value of
!	the new record number.  The file is opened if it was never opened before.
!	SIGNAL_STOPs FOR$_OPEDEFREQ (26 = 'OPEN OR DEFINE FILE REQUIRED FOR DIRECT ACCESS')
!	SIGNAL_STOPs FOR$_RECNUMOUT (25 = 'RECORD NUMBER OUT OF RANGE')
! 	SIGNAL_STOPS FOR$_ATTACCNON (36 = 'ATTEMPT TO ACCESS NON-EXISTANT RECORD')
!	SIGNAL_STOPs FOR$_SPERECLOC (52 = 'SPECIFIED RECORD LOCKED')
!	SIGNAL_STOPs FOR$_FINERR    (57 = 'FIND ERROR')
!
!--

    BEGIN

    GLOBAL REGISTER
	CCB = K_CCB_REG : REF BLOCK [, BYTE];

    BUILTIN
	ACTUALCOUNT;

    LOCAL
	L_UNWIND_ACTION : VOLATILE,
	L_ERR_EQL_PRES : VOLATILE,
	STATUS;

    ENABLE
	FOR$$IOSTAT_HND (L_UNWIND_ACTION, L_ERR_EQL_PRES);

!+
! Set up unwind action and flag if ERR= or IOSTAT was present.
!-
    L_UNWIND_ACTION = FOR$K_UNWINDNOP;

    IF (ACTUALCOUNT () GTR 2) THEN L_ERR_EQL_PRES = .ERR_EQL ELSE L_ERR_EQL_PRES = 0;

!+
! Get a LUB for this unit.
! On return, CCB points to the current control block.
!-
    FOR$$CB_PUSH (.UNIT, LUB$K_LUN_MIN);
!+
! Error action is now to pop the LUB.
!-
    L_UNWIND_ACTION = FOR$K_UNWINDPOP;
!+
! If file not specified for direct access, then SIGNAL_STOP FOR$_OPEDEFREQ
! (26 = 'DIRECT ACCESS NOT SPECIFIED WHEN UNIT OPENED")
!-

    IF (.CCB [LUB$V_DIRECT] EQL 0) THEN FOR$$SIGNAL_STO (FOR$K_OPEDEFREQ);

!+
! If file has not been previously OPENed, default-open it.
!-

    IF (.CCB [LUB$V_OPENED] EQL 0) THEN FOR$$OPEN_DEFLT (OPEN$K_ACC_DIR, OPEN$K_TYP_OLD, OPEN$K_FOR_UNF);

!+
! If the logical record number passed is illegal then SIGNAL_STOP,
! else store in the LUB and users associated variable.
!-

    IF ((.REC_NO EQLU 0) OR ((.CCB [LUB$L_REC_MAX] NEQ 0) AND (.REC_NO GTRU .CCB [LUB$L_REC_MAX])))
    THEN
	FOR$$SIGNAL_STO (FOR$K_RECNUMOUT);

    CCB [LUB$L_LOG_RECNO] = .REC_NO;
!+
! Now FIND the record.  If any error, signal it.
!-
!+
! Set LUB$V_FIND_LAST to zero.  If successful, we will set to 1.
!-
    CCB [LUB$V_FIND_LAST] = 0;

    IF ( NOT $FIND (RAB = .CCB))
    THEN
	BEGIN

	WHILE (.CCB [RAB$L_STS] EQL RMS$_RSA) DO
	    BEGIN
	    $WAIT (RAB = .CCB);
	    $FIND (RAB = .CCB)
	    END;

	IF ( NOT .CCB [RAB$L_STS])
	THEN
	    FOR$$SIGNAL_STO (

		SELECTONEU .CCB [RAB$L_STS] OF
		    SET

		    [RMS$_RLK] :
			FOR$K_SPERECLOC;

		    [RMS$_RNF, RMS$_EOF] :
			FOR$K_ATTACCNON;

		    [OTHERWISE] :
			FOR$K_FINERR;
		    TES);

	END;

!+
! We succeeded.  Set LUB$V_FIND_LAST.
!-
    CCB [LUB$V_FIND_LAST] = 1;
!+
! Store the associated variable
!-
    FOR$$ASSOC ();
!+
! Return the I/O system to its last state.
!-
    FOR$$CB_POP ();
!+
! Return a success IOSTAT code
!-
    RETURN 0;
    END;					! of routine FOR$FIND

END						! of module FOR$FIND

ELUDOM
