MODULE COB$$HANDLER (
		IDENT = '1-020'		! FILE: COBHANDLE.B32 EDIT:LB1020
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!
!++
! FACILITY:	COBOL SUPPORT
!
! ABSTRACT:	This procedure is the error handler for COBOL error
!		conditions.  It gets invoked as a result of a call
!		to LIB$SIGNAL.
!
!
! ENVIRONMENT:	Vax-11 User Mode
!
! AUTHOR: MLJ , CREATION DATE: 03-MAY-1979
!
! MODIFIED BY:
!
! 1-001 - Original. MLJ  03-MAY-1979
! 1-002 - Added boilerplate and comments. RKR 18-JULY-1979
! 1-003 - Declare psects via library macro. RKR 23-AUG-1979
! 1-004 - Change symbolic name of LIBRARY file. RKR 1-OCT-79
! 1-005 - Change name of entry point to COB$$HANDLER. RKR 18-OCT-79
! 1-006 - Remove definition of COB$_USE_EXIT. Cosmetic changes.
!	  RKR 20-OCT-79
! 1-007 - But forgot to declare it as EXTERNAL LITERAL.
!	  RKR 20-OCT-79
! 1-008 - Check for COB$_USE_EXIT by using LIB$MATCH_COND.
!	  RKR 22-OCT-79
! 1-009 - Make arguments to LIBMATCHCOND be by REF.  RKR 31-OCT-79
! 1-010 - Add code to resignal a COBOL-specific error message if
!	  signal is SS$_ROPRAND and associated opcode was
!	  CVTTP or CVTSP.  RKR 21-NOV-79
! 1-011 - Correct resignaling code.  RKR 27-NOV-79
! 1-012 - Added abstract, functional description, comments and made
!	  cosmetic changes.  Added code that breaks up the CASE code
!	  for a USE procedure condition value into the appropriate types -
!	  file specific and mode specific.  This addition of code
!	  also involved introducing two new condition values and
!	  symbolic names for those values.  LB  3-MAR-81
! 1-013 - Added comments.  LB 09-MAR-81
! 1-014 - Added code for handling a data base USE procedure condition
!	  code (as a result of the new routine COB$DBEXCEPTION).  Also
!	  changed the range of the CASE statement from 0-3 to 0-5 to
!	  account for new error conditions.  And added yet more
!	  comments.  LB  12-MAR-81
! 1-015 - Added code to check for the DB code (check that COB$B_USE_CODE
!	  equals COB$K_DBUSE_CODE) before searching for the DB entry.
!	  This code used to reside in routine COB$DBEXCEPTION.  LB  16-MAR-81
! 1-016 - Replaced arbitrary signalled values for USE procedure checking
!	  code with appropriate symbol names which are now defined in
!	  COBMSGDEF.  Added corresponding entries in the EXTERNAL LITERAL
!	  declarations for this module.  LB  24-MAR-81
! 1-017 - Changed names of the external literals to correspond to changes
!	  made in COBMSG.MDL.  Deleted call to LIB$MATCH_COND and changed
!	  the CASE stmt to a SELECTONE stmt.  Changed labels in the 
!	  SELECTONE stmt (used to be a CASE) to be mnemonics instead of
!	  numbers.  Added comments.  LB  16-APR-81
! 1-018 - Deleted the external literals COB$_LSTHNDLOP and LSTHNDLFL and
!	  added LSTHNDUSE.  This was done as a result of a change made
!	  in COBOL regarding the scoping rules for USE procedures.  Also
!	  changed the macro name for the signalling arguments in the signal
!	  array to reflect changes made to COBDEF (the reference had been
!	  [COB$A_CHK_PROC] which has been changed and extended to the fields
!	  [COB$A_OPN_PROC] and [COB$A_FIL_PROC]).  LB  21-APR-81
! 1-019 - Entry point changed to COB$$HANDLER.  For some reason, it had
!	  remained a single $ entry point.  Resolves duplicate symbol
!	  problem with COBDHANDL.  LB 3-AUG-81
! 1-020 - Added external routine declaration for COB$HANDLER.  LB 4-AUG-81
!
!--

!<BLF/PAGE>

!+
! SWITCHES
!-

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!+
! LINKAGES
!	NONE
!-

!+
! TABLE OF CONTENTS:
!-

FORWARD ROUTINE

! changed name to cob$$handler
	COB$$HANDLER ;

!+
! INCLUDE FILES
!-

REQUIRE 'RTLIN:RTLPSECT' ;		! Macros for declaring psects
LIBRARY 'RTLSTARLE';			! RTL routines
REQUIRE 'RTLIN:COBDEF' ;		! COBOL specific RTL macros and literals

!+
! MACROS
!	NONE
!-

!+
! EQUATED SYMBOLS
!-

LITERAL
	CVTTP_OPCODE = %X'26',		! Opcode value for CVTTP instruction
	CVTSP_OPCODE = %X'09';		! Opcode value for CVTSP instruction

!+
! PSECT DECLARATIONS:
!-

DECLARE_PSECTS (COB) ;			! Psects for COB$ facility

!+
! EXTERNAL REFERENCES
!-

EXTERNAL ROUTINE
	COB$HANDLER;

EXTERNAL LITERAL
	COB$_NO_USEPRO,			! No USE procedure available - error on file !AS
	COB$_LSTHNDUSE,			! Lost handler for a USE procedure - environment corrupted !2(+)
	COB$_LSTHNDLDB,			! Lost handler for data base exception - environment corrupted !+
	COB$_USE_EXIT ,			! Special signal from COB$$INVOKE_USE
	COB$_INVDECDAT ;		! Invalid decimal data signal


! changed name to cob$$handler
GLOBAL ROUTINE COB$$HANDLER(SIGNAL,MECHANISM)=


!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine is the error handler for COBOL error conditions.
!	It gets invoked as a result of a call to LIB$SIGNAL.
!
! CALLING SEQUENCE:
!
!	COB$$HANDLER (signal.rr.r, mechanism.rr.r)
!
! FORMAL PARAMETERS:
!
!	SIGNAL.rr.r	Address of vector of longwords indicating
!			nature of condition.
!
!	MECHANISM.rr.r	Address of vector of longwords indicating
!			the state of the process.
!
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
! NOTES:
!
!	The macro field references beginning with 'CHF' refer to
!	condition handling argument list offsets.
!
!--

    BEGIN

      MAP
    	MECHANISM:	REF BLOCK[,BYTE],
	SIGNAL:		REF BLOCK[,BYTE];

    LOCAL
	CONDITION,			! Condition that was signalled

	USER_PC: ;			! Program counter where exception took
					! place

!+
! Find out if it is a signal of interest.
!-


    CONDITION = .SIGNAL[CHF$L_SIG_NAME];! Fetch condition value from signal array

!+
! Select appropriate action based on which one we have.
!-

    SELECTONE .CONDITION OF
      SET
	[COB$_USE_EXIT]:		! Special COBOL unwind signal

	        $UNWIND(); 		! Just unwind

	[SS$_ROPRAND]:			! Was a SS$_ROPRAND
	    BEGIN

		!+
		! Using the signal argument vector, extract
		! the program counter at the time the 
		! SS$_ROPRAND occurred.  Note that %BPVAL and
		! %UPVAL are pre-declared BLISS literals defining
		! bit per BLISS value and units per BLISS value.
		!-

		USER_PC = .SIGNAL[ (.SIGNAL[CHF$L_SIG_ARGS] - 1 ) * %UPVAL, 0, %BPVAL, 0 ] ;
								!\Produces the [8,0,32,0]
								!/field reference = PC

		!+
		! Check to see if a CVTTP or a CVTSP instruction
		! was the generator of the signal.  Note that the
		! PC is pointing to the instruction that caused the
		! fault.
		!-

		IF (  .(.USER_PC)<0,8> EQL CVTTP_OPCODE  OR
		      .(.USER_PC)<0,8> EQL CVTSP_OPCODE     )
		THEN	

		!+
		! Set the first longword of the signal argument
		! vector (the condition value field) to the
		! condition being signalled.  In this case, the
		! condition is invalid decimal data.
		!-

								!\Set to invalid
		    SIGNAL[CHF$L_SIG_NAME] = COB$_INVDECDAT ;	!/decimal data signal
	    END ;

    	[COB$_LSTHNDUSE]:					!\File specific, mode specific
								!/USE procedure conditions
    	    BEGIN

	      LOCAL
	    	FP:		REF BLOCK[,BYTE],
		SFP:		REF BLOCK[,BYTE],	! Saved FP
		USE:		REF BLOCK[,BYTE],	! Pointer to USE list
		USEENT:		REF BLOCK[,BYTE];	! Pointer to USE list entry

    	    EXTERNAL ROUTINE
    		COB$$INVOKE_USE:	NOVALUE;

	    FP = .MECHANISM[CHF$L_MCH_FRAME];		! Get FP of this program
	    SFP = .FP[SF$L_SAVE_FP];			! Get FP of program we want to look at
	    IF .SFP NEQ 0
	      THEN

		!+
		! This check is to ensure that the only way
		! you could get here is from a COBOL program.
		!-

		IF .SFP[SF$A_HANDLER] EQLA COB$HANDLER	!\Check if handler specified
		  THEN					!/is the COBOL handler
		    BEGIN				! COB$HANDLER it is.
		    USE = .SFP[COB$A_SF_USE];		! Get USE list
		    IF .USE NEQ 0			! If any DECLARATIVES
		      THEN
			    BEGIN

			!+
			! Search for a USE procedure declared for the specific file
			! on which the exception occurred.  Note that the
    			! COB$A_USE_FILES reference is the base of the 1st file
    			! entry and COB$B_GUSE_COUNT is the count of global
    			! file entries.
			!-

			    USEENT = USE[COB$A_USE_FILES];! Point to first file entry
			    DECR I FROM .USE[COB$B_GUSE_COUNT]-1 TO 0 DO
				BEGIN				! Loop over files
				IF .USEENT[COB$A_USE_PROC] EQLA .SIGNAL[COB$A_FIL_PROC]
				THEN
				    BEGIN
				    COB$$INVOKE_USE(		! Invoke USE
					.USEENT[COB$A_USE_PROC],! Addr of USE procedure	
					.USE,			! Ptr to USE list
					.FP[SF$L_SAVE_AP],	! Argument pointer
					.USEENT[COB$A_USE_EOPR],! Addr of EOPR block	
					.USE[COB$A_USE_PNC]);	! Addr of Perform Nest Ctr
				    RETURN SS$_CONTINUE;
				    END;
				USEENT = .USEENT + COB$S_USE_FILES;! Step to next
				END;
			      END;



   			    !+
			    ! Open Mode Only.
		  	    !
			    ! See if a procedure has been declared for the
    			    ! open mode.  Note that COB$A_USE_MODES refers to
    			    ! the base of the open mode entries.  The looping
			    ! values from 0-3 refer to the open modes i.e. INPUT,
			    ! OUTPUT,I-O, and EXTEND.
			    !-

			    USEENT = USE[COB$A_USE_MODES];	! Point to first
			    INCR I FROM 0 TO 3 BY 1 DO
				BEGIN				! Loop over files

			    !+
			    ! The check here for EOPR not equal to zero is
			    ! to ensure that the program is a local one.  If
			    ! EOPR equals zero, then the USE procedure is an
			    ! up-level reference; then the original condition
			    ! that was signalled, should be re-signalled.
			    ! Else, if EOPR is not equal to zero and the USE
			    ! procedure has been found, then call COB$INV_USE.
			    !-

				IF .USEENT[COB$A_USE_PROC] EQLA .SIGNAL[COB$A_OPN_PROC]
				    AND .USEENT[COB$A_USE_EOPR] NEQ 0
				  THEN
				    BEGIN
				    COB$$INVOKE_USE(		! Invoke USE
					.USEENT[COB$A_USE_PROC],! Addr of USE procedure
					.USE,			! Ptr to USE list
					.FP[SF$L_SAVE_AP],	! Argument ptr
					.USEENT[COB$A_USE_EOPR],! Addr of EOPR block
					.USE[COB$A_USE_PNC]);	! Addr of Perform Nest Ctr
				    RETURN SS$_CONTINUE;
				    END;
				USEENT = .USEENT + COB$S_USE_MODES;! Step to next
				END;
		    END;
		END;    

	!+
	! The following code handles the case of a Data Base
	! USE procedure condition.  Search through the COB$GDBUSE_CNT
	! entries and check for a match for the entry address with the
	! address of the USE procedure passed to this handler in the
	! signal argument vector.  If there is a match, then invoke the
	! USE procedure and return SS$_CONTINUE; otherwise, re-signal the
	! error (return SS$_RESIGNAL).
	!-

	  [COB$_LSTHNDLDB]:					
	    BEGIN

	      LOCAL
		FP: 	REF BLOCK [,BYTE],	
		SFP: 	REF BLOCK [,BYTE],			! Saved FP		
		DBUSE:	REF BLOCK [,BYTE],			! Ptr to Data Base USE list
		DBUSE_ENT:REF BLOCK [,BYTE];			! Ptr to Data Base USE list entry

	      EXTERNAL ROUTINE
		COB$$INVOKE_USE:NOVALUE;			! Invoke the USE procedure

	    FP = .MECHANISM[CHF$L_MCH_FRAME];			! Get FP of this program
	    SFP = .FP[SF$L_SAVE_FP];				! Get FP of program we want to look at
	    IF .SFP NEQ 0
	      THEN

		!+
		! This check is to ensure that the only
		! way you could get here is from a COBOL
		! program.
		!-

		IF .SFP[SF$A_HANDLER] EQL COB$HANDLER		!\Check if handler specified
								!/is the COBOL handler
		  THEN
		    BEGIN
		    DBUSE = .SFP[COB$A_DB_USE];			!\Fetch address of Data Base
								!/USE list
		    IF .DBUSE NEQ 0
		      THEN


			BEGIN

		    !+
		    ! The following check determines if this is a DB
		    ! USE list.  The COB$B_USE_CODE field should contain
		    ! the generic code for the class of data base
		    ! exceptions (equal to COB$K_DBUSE_CODE).
		    !-

			IF .DBUSE[COB$B_USE_CODE] EQL COB$K_DBUSE_CODE
			  THEN
			    BEGIN

		    !+
		    ! Search for a USE procedure for the corresponding
		    ! Data Base exception.  Note that the COB$A_DB_USE
		    ! reference is the address of the data base entry while
		    ! COB$B_DBUSE_CNT is the count of global Data Base
		    ! USE procedures defined in the local program.
		    !_

			    DBUSE_ENT = DBUSE[COB$A_DBUSE_ENT];	! Point to 1st data base entry
			    DECR I FROM .DBUSE[COB$B_GDBUSE_CNT] - 1 TO 0 DO
			      BEGIN
			      IF .DBUSE_ENT[COB$A_USE_PROC] EQLA .SIGNAL[COB$A_DBCHK_PROC]
				THEN
				  BEGIN
				  COB$$INVOKE_USE (		! Invoke the USE procedure
				    .DBUSE_ENT[COB$A_USE_PROC],	! Addr of DB USE procedure
				    .DBUSE,			! Ptr to DB USE list
				    .FP[SF$L_SAVE_AP],		! Argument pointer
				    .DBUSE_ENT[COB$A_USE_EOPR],	! Addr of EOPR block
				    .DBUSE[COB$A_DBUSE_PNC]);	! Addr of Perform Nest Ctr
				  RETURN SS$_CONTINUE;
				  END;
			      DBUSE_ENT = .DBUSE_ENT + COB$S_DBUSE;! Step to next entry
			      END;
			    END;
			END;
		    END;
	      END;
	  [OTHERWISE]:						! No match occurred
	    BEGIN
	    0;
	    END;

	TES;

    !+
    ! Resignal the error if the signalled condition was not one
    ! of the expected conditions to be handled.  Also resignal the
    ! error if a USE procedure wasn't found or if the error had been
    ! a SS$_ROPRAND since the signal name has been changed.
    !-

    RETURN SS$_RESIGNAL
    END;
END 
ELUDOM
