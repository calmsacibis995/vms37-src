	.TITLE	MTH$CVTDG - Convert D to G, G to D
	.IDENT	/2-002/			; File: MTHCVTDG.MAR  Edit: SBL2002

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;


;++
; FACILITY: Mathematics Library
;
; ABSTRACT:
;
;	Routines to convert a single value or a vector of values
;	from D floating to G floating, and in reverse.
;
; ENVIRONMENT: User Mode, AST Reentrant
;
;--
; AUTHOR: Steven B. Lionel, CREATION DATE: 23-Apr-79
;

	.SBTTL	Edit History
;
; 1-001 - Original.
; 1-002 - Allow zero count address as omission.  SBL 24-Apr-79
; 1-003 - Fix bug in ZERO_G.  SBL 14-Nov-1979
; 2-001 - Separate entry for array conversion.  Fault on reserved operand.
;	  SBL 31-Dec-1979
; 2-002 - Use general mode addressing.  SBL 30-Nov-1981


	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;

;
; EXTERNAL DECLARATIONS:
;
	.DSABL	GBL				; Prevent undeclared
						; symbols from being
						; automatically global.
	.EXTRN	MTH$$SIGNAL			; Math signal routine
	.EXTRN	MTH$K_FLOUNDMAT			; Underflow error code
	.EXTRN	MTH$K_FLOOVEMAT			; Overflow error code
	.EXTRN	SYS$UNWIND			; Unwind system service

;
; MACROS:
;
	$CHFDEF
	$SSDEF
	$SFDEF
	$PSLDEF
;
; EQUATED SYMBOLS:
;

;
; OWN STORAGE:
;

;
; PSECT DECLARATIONS:
;
	.PSECT	_MTH$CODE PIC, USR, CON, REL, LCL, SHR, -
			EXE, RD, NOWRT, LONG


	.SBTTL	MTH$CVT_D_G - Convert D to G
;++
; FUNCTIONAL DESCRIPTION:
;
;	MTH$CVT_D_G and MTH$CVT_DA_GA convert D_floating values to
;	G_floating.
;
;	MTH$CVT_G_D and MTH$CVT_GA_DA convert G_floating values to
;	D_floating.
;
;	MTH$CVT_D_G and MTH$CVT_G_D are functions which convert their
;	single argument to the destination datatype and return it as
;	a function value.
;
;	MTH$CVT_DA_GA and MTH$CVT_GA_DA are subroutines which convert
;	an array of values in a single call.
;
;	These routines are designed to function like hardware convert
;	instructions.  They will fault on reserved operands.  If
;	overflow is detected, or underflow with FU enabled, an error
;	is signaled.
;
;	All four routines are designed to function correctly on VAX-11
;	processors which do not have the G_floating instruction set.
;
; CALLING SEQUENCES:
;
;	result.wg.v = MTH$CVT_D_G (source.rd.r)
;	result.wd.v = MTH$CVT_G_D (source.rg.r)
;
;	CALL MTH$CVT_DA_GA (source.rd.ra, dest.rg.ra [, count.rl.r])
;	CALL MTH$CVT_GA_DA (source.rg.ra, dest.rd.ra [, count.rl.r])
;
; INPUT PARAMETERS:
;
	source	= 4		; Argument to be converted.  Either
				; a scalar, if count is omitted, or
				; an array.
	count	= 12		; Optional.  The count of array elements
				; in source and dest.  If omitted, 1 is
				; assumed.
;
; IMPLICIT INPUTS:
;
;	The callers PSL, which is examined to see if floating underflow
;	is enabled.
;
; OUTPUT PARAMETERS:
;
;	value			; The converted value returned in R0-R1
				; if MTH$CVT_D_G or MTH$CVT_G_D.
	dest	= 8		; The destination of the conversion.  It
				; must be the same length as source.  
				; If count is present, dest must also be
				; present.
				; Source and dest MUST either overlap
				; exactly, or be completely disjoint.
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; FUNCTION VALUE:
;
;	If only source is given, the result is returned as the function
;	value in R0-R1.
;
; SIDE EFFECTS:
;
;	MTH$CVT_G_D signals MTH$_FLOOVEMAT (Floating overflow in Math
;	library) if conversion overflows result.  Default result is
;	reserved operand.
;
;	MTH$CVT_G_D signals MTH$_FLOUNDMAT (Floating underflow in Math
;	library) if conversion underflows and the caller has floating
;	underflow enabled.  The default result is zero.
;
;	All routines detect reserved floating operands by creating
;	a reserved operand fault (SS$_ROPRAND).  If the reserved value
;	is changed to a non-reserved value, conversion will continue.
;--

	.ENTRY	MTH$CVT_DA_GA, ^M<R2,R3,R4,R5,R6,R7>

	MOVAB	W^CVT_D_G, R4		; Address of actual convert routine
	BRB	CVT_COMMON		; Join common routine


	.ENTRY	MTH$CVT_GA_DA, ^M<R2,R3,R4,R5,R6,R7>

	MOVAB	W^CVT_HANDLER, (FP)	; Enable local condition handler
	MOVAB	W^CVT_G_D, R4		; Address of actual convert routine
	BRB	CVT_COMMON		; Join common routine


	.ENTRY	MTH$CVT_D_G, ^M<R2,R3,R4,R5,R6,R7>

	MOVAB	W^CVT_D_G, R4		; Address of actual convert routine
	BRB	FUNC_COMMON		; Join common routine


	.ENTRY	MTH$CVT_G_D, ^M<R2,R3,R4,R5,R6,R7>

	MOVAB	W^CVT_HANDLER, (FP)	; Enable local condition handler
	MOVAB	W^CVT_G_D, R4		; Address of actual convert routine
	BRB	FUNC_COMMON		; Join common routine

	.SBTTL	CVT_COMMON - Common convert routine

CVT_COMMON:
	MOVZBL	#1, R7		; Default count is 1
	MOVL	source(AP), R5	; Get source address
	MOVL	dest(AP), R6	; Get destination address
	CMPB	(AP), #<count/4> ; Is count present?
	BLSS	LOOP		; If not, use default of 1
	TSTL	count(AP)	; Try other way
	BEQL	LOOP		; Still not there
	MOVL	@count(AP), R7	; Get count

LOOP:
	ROTL	#16, (R5)+, R1	; Get operand and swap words
	ROTL	#16, (R5)+, R0	;
	JSB	(R4)		; Do the appropriate conversion
	ROTL	#16, R1, (R6)+	; Store result
	ROTL	#16, R0, (R6)+	;
	SOBGTR	R7, LOOP	; Loop until done

	CLRQ	R0		; Just in case someone is looking
	RET			; Exit


FUNC_COMMON:
	MOVL	source(AP), R5	; Get operand address
	ROTL	#16, (R5)+, R1	; Get single operand
	ROTL	#16, (R5), R0	;
	JSB	(R4)		; Do the appropriate conversion
	ROTL	#16, R0, R2	; Swap words and longwords
	ROTL	#16, R1, R0	;
	MOVL	R2, R1		;
	RET			; Return

	.SBTTL	CVT_D_G - Convert D to G

CVT_D_G:
	EXTZV	#23, #8, R1, R2		; Get exponent in R2
	BEQL	ZERO_G			; If zero, return zero
	EXTZV	#2, #1, R0, R3		; Save rounding bit
	ASHQ	#-3, R0, R0		; Shift right 3 bits
	ADDW2	#<1024-128>, R2		; Change exponent bias from D to G
	INSV	R2, #20, #11, R1	; Insert G exponent
	BLBC	R3, EXIT_G		; Test for rounding
	INCL	R0			; Round up
	ADWC	#0, R1			; Propogate carry

EXIT_G:
	RSB				; Exit

ZERO_G:
	BBS	#31, R1, RES_D		; Reserved operand?
	CLRL	R0			; Zero fraction and exponent
	BICL2	#^X7FFFFFFF, R1		; Leave sign alone
	RSB				; Exit

RES_D:					; Here if D_floating reserved operand
	ROTL	#16, R0, R2		; Swap words, longwords
	ROTL	#16, R1, R0
	MOVL	R2, R1
	TSTD	R0			; Will fault on reserved operand
	ROTL	#16, R0, R2		; Reswap and try again
	ROTL	#16, R1, R0
	MOVL	R2, R1
	BRB	CVT_D_G

	.SBTTL	CVT_G_D - Convert G to D

CVT_G_D:
	EXTZV	#20, #11, R1, R2	; Extract G exponent
	BEQL	ZERO_D			; Return zero if zero
	EXTZV	#31, #1, R1, R3		; Save sign
	ASHQ	#3, R0, R0		; Shift left 3 bits
	SUBW2	#<1024-128>, R2		; Change bias from G to D
	BLEQ	UNDERFLOW		; Test for underflow
	CMPW	R2, #256		; Test for overflow
	BGEQ	OVERFLOW		;
	INSV	R2, #23, #8, R1		; Restore D exponent
	INSV	R3, #31, #1, R1		; Restore sign
	RSB

ZERO_D:
	BBS	#31, R1, RES_G		; Reserved operand?
	CLRL	R0			; Zero fraction and exponent
	BICL2	#^X7FFFFFFF, R1		; Clear all but sign, so that
					; reserved operand is set
					; correctly.
	RSB				; Return

UNDERFLOW:
	MOVZWL	SF$W_SAVE_PSW(FP), R2	; Get caller's PSW
	CLRQ	R0			; Default value is zero
	BBC	#PSL$V_FU, R2, ERROR_RET  ; If not enabled, return zero
	MOVZBL	#MTH$K_FLOUNDMAT, -(SP)	; Error code
	CALLS	#1, G^MTH$$SIGNAL	; Signal underflow
	BRB	ERROR_RET		; Return

OVERFLOW:
	ASHQ	#15, #1, R0		; Default reserved operand
	MOVZBL	#MTH$K_FLOOVEMAT, -(SP)	; Error code
	CALLS	#1, G^MTH$$SIGNAL	; Signal overflow

ERROR_RET:
	ROTL	#16, R0, R2		; Re-swap words, longwords
	ROTL	#16, R1, R0		; in case we return with non-
	MOVL	R2, R1			; zero value
	RSB				; Return

RES_G:					; Here if G_floating reserved operand
	ROTL	#16, R0, R2		; Swap words, longwords
	ROTL	#16, R1, R0
	MOVL	R2, R1
	TSTG	R0			; Will fault on reserved operand
					; If no G_floating hardware,
					; condition handler will take care
					; of it.
CVT_CONTINUE:				; Continue here from error
	ROTL	#16, R0, R2		; Reswap and try again
	ROTL	#16, R1, R0
	MOVL	R2, R1
	BRW	CVT_G_D


	.SBTTL	CVT_HANDLER - Local condition handler

;++
;
;	CVT_HANDLER allows MTH$CVT_G_D and MTH$CVT_GA_DA to detect
;	reserved operands using the TSTG instruction, regardless of
;	whether the processor supports that instruction.
;
;	When CVT_G_D sees a reserved operand, it executes a TSTG with
;	the G_floating operand in R0 and R1.  If the processor knows
;	about TSTG, a reserved operand fault is signaled.  However,
;	if it doesn't support TSTG, an "opcode reserved to Digital"
;	fault will occur. CVT_HANDLER turns this into a reserved operand
;	fault.
;
;	If the condition being signaled is not SS$_OPCDEC or if the
;	signaled instruction is not in the frame that established this
;	handler, then the exception is resignaled.  A test is made to
;	see if the saved R0-R1 is a G_floating reserved operand.  It
;	will be on the initial fault, but might not be if it has been
;	fixed up by another condition handler (i.e. LIB$FIXUP_FLT).
;	If it is a reserved operand, the signal name is changed to
;	SS$_ROPRAND and the exception is resignaled.  Otherwise,
;	execution continues with the instruction following the TSTG.
;
;--

CVT_HANDLER:
	.WORD	^M<>
	MOVL	4(AP), R0		; signal argument list
	CMPL	CHF$L_SIG_NAME(R0), #SS$_OPCDEC	; Opcode reserved to Digital fault?
	BNEQ	RESIGNAL		; No, resignal
	MOVL	8(AP), R1		; mechanism argument list
	TSTL	CHF$L_MCH_DEPTH(R1)	; Is depth zero?
	BNEQ	RESIGNAL		; If not, can't be this routine
	CMPZV	#4, #12, CHF$L_MCH_SAVR0(R1), #^X800	; Reserved operand?
	BNEQ	CONTINUE		; No, continue with next instruction
	MOVL	#SS$_ROPRAND, CHF$L_SIG_NAME(R0)  ; Change condition code name
RESIGNAL:
	MOVL	#SS$_RESIGNAL, R0	; Resignal exception
	RET

CONTINUE:
	SUBL3	#1, CHF$L_SIG_ARGS(R0), R1 ; Get position of PC
	MOVAL	W^CVT_CONTINUE, (R0)[R1] ; Set return address
	MOVL	#SS$_CONTINUE, R0	; Continue execution
	RET

	.END
