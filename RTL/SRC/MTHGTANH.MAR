	.TITLE	MTH$GTANH 	; G Floating Hyperbolic Tangent routine
				; (DTANH)
	.IDENT /1-004/		; File: MTHGTANH.MAR  Edit: RNH1004
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;
; FACILITY: MATH LIBRARY
;++
; ABSTRACT:
;
; MTH$GTANH is a function  which  returns the G floating hyperbolic tangent
; of its G floating point argument. The call is standard
; call-by-reference.
;
;--
;
; VERSION: 1
;
; HISTORY:
; AUTHOR:
;	Steven B. Lionel, 26-Jan-79: Version 1
;
; MODIFIED BY:
;
;
;

	.SBTTL	HISTORY	; Detailed Current Edit History


; ALGORITHMIC DIFFERENCES FROM FP-11/C ROUTINE:	none
;
; Edit History for Version 1 of MTH$GTANH 
;
; 1-001 - Adapted from MTH$DTANH version 1-006.  SBL 26-Jan-79
; 1-002 - Use MTH$GEXP_R6.  SBL 27-Sept-1979
; 1-003 - Change constant 16.0 to 20.0 to correct inaccuracy.  The
;	   value of X above which 1.0 is the best machine approximation
;	   to GTANH(X) is about 19.06.  The next higher number that can
;	   be represented as a short literal is 20.0.  JAW 19-Sep-80
; 1-004 - Eliminated symbolic short literals. RNH 15-Oct-81

	.SBTTL	DECLARATIONS	; Declarative Part of Module

;
; INCLUDE FILES:
;
; EXTERNAL SYMBOLS:	MTH$JACKET_HDLR
;
	.DSABL	GBL			; Force .EXTRN on all symbols
	.EXTRN	MTH$GCOSH		; GCOSH
	.EXTRN	MTH$GSINH		; GSINH
	.EXTRN	MTH$GEXP_R6		; EXP
; EQUATED SYMBOLS:

	value	= 4			; value.rg.r

;
; MACROS:	none
;
; PSECT DECLARATIONS:

	.PSECT	_MTH$CODE	PIC,SHR,LONG,EXE,NOWRT
					; program section for math routines
;
; OWN STORAGE:	none
;
;
; CONSTANTS:
;

G_0.25:
	.WORD	^X3FF0, 0, 0, 0		; 0.25
G_2_POWER_M14:
	.WORD	^X3F30, 0, 0, 0		; 2**-14


	.SBTTL	MTH$GTANH  - G Double Precision Floating DTANH


;++
; FUNCTIONAL DESCRIPTION:
;
; GTANH  - G floating point function
;
; GTANH(X) is computed as:
;
;	If |X| =< 2**-14, then GTANH(X) = X.
;	If 2**-14 < |X| =< 0.25, then GTANH(X) = GSINH(X)/GCOSH(X).
;	If 0.25 < |X| < 20.0, then GTANH(X) = (GEXP(2*X) - 1) / (GEXP(2*X) + 1)
;	If 20.0 =< |X|, then GTANH(X) = sign(X) * 1
;
; CALLING SEQUENCE:
;
;	GTANH.wg.v = MTH$GTANH(x.rg.r)
;
; INPUT PARAMETERS:

	LONG = 4			; define longword multiplier
	x = 1 * LONG			; Contents of x is the argument

; IMPLICIT INPUTS:	none
;
; OUTPUT PARAMETERS:
;
;	VALUE:	G floating hyperbolic tangent of the argument
;
; IMPLICIT OUTPUTS:	none
;
; COMPLETION CODES:	none
;
; SIDE EFFECTS:	none
;
; NOTE: This procedure disables floating point underflow, enables integer
; overflow.
;
;---


	.ENTRY	MTH$GTANH, ^M<IV, R2, R3, R4, R5, R6>
					;standard call-by-reference entry
					; disable DV (and FU), enable IV
	MTH$FLAG_JACKET			; flag that this is a jacket procedure in
					; case of an error in routine
					; If an error, convert signal to user PC
					; and resignal
	MOVG	@value(AP), R0		; R0/R1 = |X| = @value(AP)
	BICW	#^X8000, R0		; R0/R1 = |X|
	CMPG	R0, G_2_POWER_M14	; compare |X| with 2**-14
	BLEQ	OUT_X			; branch if |X| =< 2**-14

;
; 2**-14 < |X|
;

	CMPG	R0, #20			; compare |X| with 20.0
	BGEQ	GEQ_TO_20.0		; branch if |X| >= 20.0

;
; 2**-14 < |X| < 20.0
;

	CMPG	R0, G_0.25		; compare |X| with 0.25
	BLEQ	LEQ_TO_0.25		; branch if |X| =< 0.25

;
; 0.25 < |X| < 20.0
;

	ADDG3	@value(AP), @value(AP), R0
					; R0/R1 = 2*X
	JSB	W^MTH$GEXP_R6		; R0/R1 = GEXP(2*X)
	ADDG3	#1, R0, R2		; R2/R3 = GEXP(2*X) + 1
	SUBG2	#1, R0			; R0/R1 = GEXP(2*X) - 1
	DIVG2	R2, R0			; R0/R1 = (GEXP(2*X) - 1) / (GEXP(2*X) + 1)
	RET				; return with result in R0/R1

;
; 2**-1R6 < |X| =< 0.25
;

LEQ_TO_0.25:
	CALLG	(AP), W^MTH$GCOSH		; R0/R1 = GCOSH(X)
	MOVQ	R0, R2			; R2/R3 = GCOSH(X)
	CALLG	(AP), W^MTH$GSINH		; R0/R1 = GSINH(X)
	DIVG2	R2, R0			; R0/R1 = GSINH(X) / GCOSH(X)
	RET				; return with result in R0

;
; |X| >= 20.0
;

GEQ_TO_20.0:
	MOVG	#1, R0			; R0/R1 = 1.0
	TSTG	@value(AP)		; test the sign of X
	BGEQ	10$			; branch if X >= 0
	MNEGG	R0, R0			; R0/R1 = -1
10$:	RET				; return with result in R0

;
; |X| =< 2**-14
;

OUT_X:	MOVQ	@value(AP), R0		; R0/R1 = GTANH(X) = X
	RET				; return with result in R0/R1



	.END
