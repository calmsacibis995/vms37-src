	.TITLE	BAS$MAT_SCA_MUL		; Matrix multiply by a scalar
	.IDENT	/1-011/			; File: BASMATSCA.MAR	Edit: PLL1011

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY: BASIC code support
;
; ABSTRACT:
;
;	This module multiplies each element of an input array by a scalar.
;
; ENVIRONMENT: User Mode, AST Reentrant
;
; AUTHOR: R. Will, CREATION DATE: 25-Jun-79
;
; MODIFIED BY:
;++
; 1-001	- Original 
; 1-002 - Use correct entry point to FLOOR.  RW  24-JUN-79
; 1-003	- Change MTH$DFLOOR_R1 to MTH$DFLOOR_R3.  JBS 25-JUL-1979
; 1-004 - Fix bug with mixed data types.  RW  17-Sept-79
; 1-005 - Redo scaling.  RW  13-Dec-1979
; 1-006	- Change MTH$DFLOOR_R3 to MTH$DINT_R4.  JBS 19-DEC-1979
; 1-007 - Fixed the bug about multiply a double floating by a matrix with scale>0.
;	  FM 4-FEB-81.
; 1-008 - Change shared external references to G^ RNH 25-Sep-81
; 1-009 - Substitute a macro for the calls to the array fetch and store 
;	  routines.  This should speed things up.  PLL 9-Nov-81
; 1-010 - Correct a run-time expression in the FETCH and STORE macros.
;	  PLL 20-Jan-82
; 1-011 - Correct FETCH, STORE again.  PLL 23-Feb-82
;--

	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;

	$DSCDEF
	$SFDEF

;
; EXTERNAL DECLARATIONS:
;

	.DSABL	GBL				; Prevent undeclared
						;  symbols from being
						;  automatically global.
	.EXTRN	BAS$K_ARGDONMAT			; signalled if all 3 blocks
						;  not present in array desc
						;  or dimct = 0
	.EXTRN	BAS$K_DATTYPERR			; signalled if dtype of array
						; isn't word long float double
	.EXTRN	BAS$STO_FA_W_R8			; array element store for word
	.EXTRN	BAS$STO_FA_L_R8			; array element store for long
	.EXTRN	BAS$STO_FA_F_R8			; array element store - float
	.EXTRN	BAS$STO_FA_D_R8			; array element store - double
	.EXTRN	BAS$FET_FA_W_R8			; array element fetch - word
	.EXTRN	BAS$FET_FA_L_R8			; array element fetch - long
	.EXTRN	BAS$FET_FA_F_R8			; array element fetch - float
	.EXTRN	BAS$FET_FA_D_R8			; array element fetch - double
	.EXTRN	BAS$MAT_REDIM			; check if redimensioning of
						;  dest array is necessary, if
						;  so, do it
	.EXTRN	BAS$$SCALE_R1			; scale of the double precision
	.EXTRN	BAS$$STOP			; signal fatal errors
	.EXTRN	MTH$DINT_R4			; routine to integerize


;
; MACROS:
;

;	$BAS$MAT_SC_MUL	see below, defines entire scalar multiply algorithm
;	FETCH		fetch an element from an array
;	STORE		store an element into an array

;
; EQUATED SYMBOLS:
;

	lower_bnd2 = 0				; stack offset for temp
	lower_bnd1 = 4				; stack offset for temp
	upper_bnd1 = 8				; stack offset for temp
	save_scalar = 12			; stack offset for scalar
	scale = 20				; stack offset for scale
	dsc$l_l1_1 = 24				; desc offset if 1 sub
	dsc$l_u1_1 = 28				; desc offset if 1 sub
	dsc$l_l1_2 = 28				; desc offset if 2 sub
	dsc$l_u1_2 = 32				; desc offset if 2 sub
	dsc$l_l2_2 = 36				; desc offset if 2 sub
	dsc$l_u2_2 = 40				; desc offset if 2 sub

;
; OWN STORAGE:
;

;
; PSECT DECLARATIONS:
;
	.PSECT _BAS$CODE PIC, USR, CON, REL, LCL, SHR, -
			EXE, RD, NOWRT, LONG

;+
; These macros are a substitute for calls to the array fetch and store
; routines.  They will call the BAS$ routines only if the array is a 
; virtual array.  Otherwise, they will calculate the linear index into
; the array via the INDEX instruction.  (Note that BASIC programs must
; be able to handle FORTRAN arrays, so the code must check for arrays
; stored by column.)  The INDEX instructions should provide a significant
; performance improvement over calling a routine for each element of
; the array.
;-

	.LIST	ME
	.MACRO	FETCH	array_dtype,?L1,?L2,?L3,?L11,?L21 ; fetch an array element

	CMPB	dsc$b_class(R0), #dsc$k_class_bfa  ;virtual array?
	BNEQ	L1				; no
	JSB	BAS$FET_FA_'array_dtype'_R8	; yes, use the fetch routine
	BRW	L3				; done
L1:	BBS	#5, 10(R0), L2			; br if array stored by cols
	CMPB	dsc$b_dimct(R0), #1		; 1 or 2 dims?
	BNEQ	L11				; 2 dims
	MOVZWL	dsc$w_length(R0), R4		; make length longword
	INDEX	R1, dsc$l_l1_1(R0), dsc$l_u1_1(R0), R4, #0, R3
	ADDL	dsc$a_a0(R0), R3		; add start addr to offset
	MOV'array_dtype'	(R3), R0	; return element in R0
	BRW	L3				; 1 dim done
L11:	INDEX	R1, dsc$l_l1_2(R0), dsc$l_u1_2(R0), dsc$l_m2(R0), #0, R3
						; I * M2  [Li's are zero]
	MOVZWL	dsc$w_length(R0), R4		; need longword length for INDEX
	INDEX	R2, dsc$l_l2_2(R0), dsc$l_u2_2(R0), R4, R3, R3
						; (J + (I * M2)) * length 
	ADDL	dsc$a_a0(R0), R3		; compute addr of element 
	MOV'array_dtype'	(R3), R0	; return element in R0
	BRW	L3				; done
L2:	CMPB	dsc$b_dimct(R0), #1		; 1 or 2 dims?
	BNEQ	L21				; 2 dims
	MOVZWL	dsc$w_length(R0), R4		; make length longword
	INDEX	R2, dsc$l_l1_1(R0), dsc$l_u1_1(R0), R4, #0, R3
	ADDL	dsc$a_a0(R0), R3		; add start addr to offset
	MOV'array_dtype'	(R3), R0	; return element in R0
	BRW	L3				; 1 dim done
L21:	INDEX	R2, dsc$l_l2_2(R0), dsc$l_u2_2(R0), dsc$l_m1(R0), #0, R3
						; J * M1  [Li's are zero]
	MOVZWL	dsc$w_length(R0), R4		; need longword length for INDEX
	INDEX	R1, dsc$l_l1_2(R0), dsc$l_u1_2(R0), R4, R3, R3
						; (I + (J * M1)) * length
	ADDL	dsc$a_a0(R0), R3		; compute addr of element
	MOV'array_dtype'	(R3), R0	; return element in R0

L3:
	.ENDM



	.LIST	ME
	.MACRO	STORE	array_dtype,?L1,?L2,?L3,?L4,?L5,?L11,?L21,?L31,?L41

	.IF	IDN	'array_dtype', D	; array is double
	CMPB	dsc$b_class(R2), #dsc$k_class_bfa  ; virtual array?
	BNEQ	L1				; no
	JSB	BAS$STO_FA_'array_dtype'_R8	; call store routine
	BRW	L5				; done
L1:	BBS	#5, 10(R2), L2			; br if stored col-wise
	CMPB	dsc$b_dimct(R2), #1		; 1 or 2 dim?
	BNEQ	L11				; 2 dims
	MOVZWL	dsc$w_length(R2), R6		; make length a longword
	INDEX	R3, dsc$l_l1_1(R2), dsc$l_u1_1(R2), R6, #0, R5
	ADDL	dsc$a_a0(R2), R5		; add start addr to offset
	MOV'array_dtype'	R0, (R5)	; store element from R0
	BRW	L5				; 1 dim done
L11:	INDEX	R3, dsc$l_l1_2(R2), dsc$l_u1_2(R2), dsc$l_m2(R2), #0, R5
						; I * M2
	MOVZWL	dsc$w_length(R2), R6		; longword length for INDEX
	INDEX	R4, dsc$l_l2_2(R2), dsc$l_u2_2(R2), R6, R5, R5
						; (J + (I * M2)) * length
	ADDL	dsc$a_a0(R2), R5		; compute addr of element
	MOV'array_dtype'	R0, (R5)	; store element from R0
	BRW	L5				; done
L2:	CMPB	dsc$b_dimct(R2), #1		; 1 or 2 dim?
	BNEQ	L21				; 2 dims
	MOVZWL	dsc$w_length(R2), R6		; make length a longword
	INDEX	R4, dsc$l_l1_1(R2), dsc$l_u1_1(R2), R6, #0, R5
	ADDL	dsc$a_a0(R2), R5		; add start addr to offset
	MOV'array_dtype'	R0, (R5)	; store element from R0
	BRW	L5				; 1 dim done
L21:	INDEX	R4, dsc$l_l2_2(R2), dsc$l_u2_2(R2), dsc$l_m1(R2), #0, R5
						; J * M1
	MOVZWL	dsc$w_length(R2), R6		; longword length for INDEX
	INDEX	R3, dsc$l_l1_2(R2), dsc$l_u1_2(R2), R6, R5, R5
						; (I + (J * M1)) * length
	ADDL	dsc$a_a0(R2), R5		; compute addr of element
	MOV'array_dtype'	R0, (R5)	; store element from R0
	.IFF					; array type other than double
	CMPB	dsc$b_class(R1), #dsc$k_class_bfa  ;virtual array?
	BNEQ	L3				; no
	JSB	BAS$STO_FA_'array_dtype'_R8	; call store routine
	BRW	L5				; done
L3:	BBS	#5, 10(R1), L4			; br if stored col-wise
	CMPB	dsc$b_dimct(R1), #1		; 1 or 2 dims?
	BNEQ	L31				; 2 dims
	MOVZWL	dsc$w_length(R1), R6		; make length a longword
	INDEX	R2, dsc$l_l1_1(R1), dsc$l_u1_1(R1), R6, #0, R4
	ADDL	dsc$a_a0(R1), R4		; add start addr to offset
	MOV'array_dtype'	R0, (R4)	; store element from R0
	BRW	L5				; 1 dim done
L31:	INDEX	R2, dsc$l_l1_2(R1), dsc$l_u1_2(R1), dsc$l_m2(R1), #0, R4
						; I * M2
	MOVZWL	dsc$w_length(R1), R5		; longword length for INDEX
	INDEX	R3, dsc$l_l2_2(R1), dsc$l_u2_2(R1), R5, R4, R4
						; (J + (I * M2)) * length
	ADDL	dsc$a_a0(R1), R4		; compute addr of element
	MOV'array_dtype'	R0, (R4)	; store element from R0
	BRW	L5				; done
L4:	CMPB	dsc$b_dimct(R1), #1		; 1 or 2 dims?
	BNEQ	L41				; 2 dims
	MOVZWL	dsc$w_length(R1), R6		; make length a longword
	INDEX	R3, dsc$l_l1_1(R1), dsc$l_u1_1(R1), R6, #0, R4
	ADDL	dsc$a_a0(R1), R4		; add start addr to offset
	MOV'array_dtype'	R0, (R4)	; store element from R0
	BRW	L5				; 1 dim done
L41:	INDEX	R3, dsc$l_l2_2(R1), dsc$l_u2_2(R1), dsc$l_m1(R1), #0, R4
						; J * M1
	MOVZWL	dsc$w_length(R1), R5		; longword length for INDEX
	INDEX	R2, dsc$l_l1_2(R1), dsc$l_u1_2(R1), R5, R4, R4
						; (I + (J * M1)) * length
	ADDL	dsc$a_a0(R1), R4		; compute addr of element
	MOV'array_dtype'	R0, (R4)	; store element from R0
	.ENDC

L5:
	.ENDM



;+
; This macro contains the looping mechanism for accessing all elements of
; an array.  It also contains all the logic for all the combinations of data
; types and scaling.  A macro is used to make it easy to maintain the parallel
; code for all the different combinations of data types.
;-

	.MACRO	$BAS$MAT_SC_MUL src_dtype, scalar_dtype ; scalar mult algorithm

;+
; Decide what mode the multiplication must be done in and store the scalar
; in that data type.  If the data types of the source array and the scalar
; are the same, store the scalar as is.  Else convert the scalar to a common
; type and store.
;-

	.IF	IDN	scalar_dtype, src_dtype	; src array and scalar are
						;  same data type
	MOV'src_dtype	@scalar(AP), save_scalar(SP) ; save the scalar as is
	.IFF					; src arrays different dtype
	.IF	IDN	src_dtype, D		; source is double
	CVT'scalar_dtype'D	@scalar(AP), save_scalar(SP) ; cvt scalar to
						;  double & save
	.IFF					; 1st array not double
	.IF	IDN	scalar_dtype, D		; if scalar double
	MOVD	@scalar(AP), save_scalar(SP)	; save the scalar
	.IFF					; no double operands try float
	.IF	IDN	src_dtype, F		; is src array float
	CVT'scalar_dtype'F	@scalar(AP), save_scalar(SP) ; make scalar float
	.IFF					; 1st array not float
	.IF	IDN	scalar_dtype, F		; is scalar float
	MOVF	@scalar(AP), save_scalar(SP)	; yes-store scalar as is
	.IFF					; no double or float, try long
	.IF	IDN	src_dtype, L		; is src array long
	CVT'scalar_dtype'L	@scalar(AP), save_scalar(SP) ; make scalar long
						; know scalar is word but use
						;  macro for generality
	.IFF					; scalar must be long, because
						;  all that is left is word
						;  and word and that will be
						;  caught by 1st case
						; NOTE: if add more datatypes
						;  add condition to above and
						;  add more conditions
	MOVL	@scalar(AP), save_scalar(SP)	; save scalar as is
	.ENDC
	.ENDC
	.ENDC
	.ENDC
	.ENDC
	.ENDC

;+
; Loop through all the rows.  Row and column upper and lower bounds have been
; initialized on the stack.
;-

LOOP_1ST_SUB'scalar_dtype'src_dtype':
	MOVL	lower_bnd2(SP), R11		; R11 has 2nd lower bound

;+
; Loop through all the elements (columns) of the current row.  Column lower
; bound is initialized in R11.  Column upper bound is on the stack.
; Distinguish array by data type so that the correct fetch routine can 
; retrieve the data, the correct conversion can be done and the correct
; store routine can be called.
;-

LOOP_2ND_SUB'scalar_dtype'src_dtype':

;+
; Get the data from source array
;-

	MOVL	src_matrix(AP), R0		; pointer to array dest
	MOVL	lower_bnd1(SP), R1		; current row
	MOVL	R11, R2				; current col
	FETCH	'src_dtype'			; fetch data from src array

;+
; Multiply the source by the scalar.
; If the data types of source array and scalar are the same, do the arithmetic
; in that data type.  Else convert the src data to the type that scalar was
; stored in above, and multiply.
; Scaling is needed if the scalar or the src array or both is
; double.
;-

	MOVL	SP, R4				; point to stack temps for
						;  JSB to storage routine
	.IF	IDN	scalar_dtype, src_dtype	; src and scalar are same dtype
	MUL'src_dtype'2	save_scalar(SP), R0	; multiply by the scalar
	.IF	IDN	scalar_dtype, D		; if both are double
	DIVD2	scale(SP), R0			;  get rid of extra scale
	CMPD	scale(SP), #1			; if scale factor is 0
	BEQL	1$				;  don't integerize
	JSB	MTH$DINT_R4			; else, integerize
	MOVL	SP, R4				; We modified R4 in the above
						; JSB, so reload R4.
	.ENDC
1$:	BSBW	DEST_CASE_'src_dtype'		; store in the destination
	.IFF					; src & scalar different dtype
	.IF	IDN	src_dtype, D		; source is double =>
						;  scalar has been saved double
	MULD2	save_scalar(SP), R0		; multiply, don't need to descale
						;  because scalar wasn't scaled
						;  don't need to integerize
						;  becausue scalar was W or L
	BSBW	DEST_CASE_D			; cvrt double product to dest type
	.IFF					; 1st array not double
	.IF	IDN	scalar_dtype, D		; is scalar double
	CVT'src_dtype'D	R0, R0			; yes, make src double, is L or W
						;  so don't need integerize, don;t
						;  scale so don't need to descale
	MULD2	save_scalar(SP), R0		; compute the product
	BSBW	DEST_CASE_D			; cvrt double product to dest type
	.IFF					; no double operands try float
	.IF	IDN	src_dtype, F		; src element float =>
						;  scalar has been stored float
	MULF2	save_scalar(SP), R0		; multiply
	BSBW	DEST_CASE_F			; cvrt float product to dest type
	.IFF					; 1st array not float
	.IF	IDN	scalar_dtype, F		; is scalar float
	CVT'src_dtype'F	R0, R0			; yes-make src float
	MULF2	save_scalar(SP), R0		; multiply
	BSBW	DEST_CASE_F			; cvrt float product to dest type
	.IFF					; no double or float, try long
	.IF	IDN	src_dtype, L		; src array long => scalar long
	MULL2	save_scalar(SP), R0		; multiply
	BSBW	DEST_CASE_L			; convrt long product to dest type
	.IFF					; scalar must be long, because
						;  all that is left is word
						;  and word and that will be
						;  caught by 1st case
	CVT'src_dtype'L	R0, R0			; cvt src to long (know its
						;  type word, but use argument
						;  in case ever add byte
	MULL2	save_scalar(SP), R0		; multiply
	BSBW	DEST_CASE_L			; convrt long product to dest type
	.ENDC
	.ENDC
	.ENDC
	.ENDC
	.ENDC
	.ENDC

;+
; Product has now been stored in the destination array.  Continue looping
;-

	INCL	R11				; get next column
	CMPL	R11, R9				; see if last column done
	BGTR	3$
	BRW	LOOP_2ND_SUB'scalar_dtype'src_dtype' ; no, continue inner loop

;+
; Have completed entire row.  See if it was the last row.  If not,
; continue with next row.
;-

3$:	INCL	lower_bnd1(SP)			; get next row
	CMPL	lower_bnd1(SP), upper_bnd1(SP)	; see if last row done
	BGTR	5$
	BRW	LOOP_1ST_SUB'scalar_dtype'src_dtype' ; no, continue outer loop

5$:	RET					; yes, finished

	.ENDM

	.SBTTL	BAS$MAT_SCA_MUL  - Multiply each element of an array by scalar
;++
; FUNCTIONAL DESCRIPTION:
;
;	This routine multiplies each element of an input matrix by a scalar,
;	and stores it in the output matrix.  The algorithm is the same for the
;	4 supported BASIC data types.  In order to keep the code for the 14
;	data type combinations the same and to simplify the reading, the code
;	has been done as a macro, which the four data types use varying only
;	the letter (W, L, F, D) in multiplying by the scalar, converting from
;	source to dest type, and calling the array store routines.
;	The scalar must be the same datatype as the source matrix.
;
; CALLING SEQUENCE:
;
;	CALL BAS$MAT_SCA_MUL (scalar.rz.r, scalar_dtype.rlu.v,
;				srcmatrix.rx.da, destmatrix.wx.da)
;
; INPUT PARAMETERS:
;
	scalar = 4	; pointer to scalar of type specified in next parameter
	scalar_dtype = 8 ; VAX standard dtype code for data type of scalar
	src_matrix = 12	; pointer to descriptor for source matrix
;
; IMPLICIT INPUTS:
;
;	scale from callers BASIC frame if data type of either matrix is double
;
; OUTPUT PARAMETERS:
;
	dest_matrix = 16	; pointer to descriptor for destination matrix
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; FUNCTION VALUE:
; COMPLETION CODES:
;
;	NONE
;
; SIDE EFFECTS:
;
;	This routine calls the BASIC matrix fetch, store, and redimensioning
;	routines, and may cause any of their errors to be signalled.  It also
;	may signal any of the errors listed in the externals area.
;	It may also cause the destination array to have different dimensions.
;
;--

	.ENTRY BAS$MAT_SCA_MUL, ^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,IV>

;+
;	REGISTER USAGE
;	R0 - R8 destroyed by store routines
;	R9	upper bound for 2nd subscript
;	R10	pointer to destination array descriptor
;	R11	current value of 2nd subscript
;-

;+
; Put routine arguments into registers for ease of use.
; If block 2 of array descriptor (multipliers) is not present then error.
;-

	MOVL	src_matrix(AP), R2		; ptr to array descr in R2
	BBC	#DSC$V_FL_BOUNDS, DSC$B_AFLAGS(R2), ERR_ARGDONMAT
						; exit if block 3 not
						; present in descriptor
	MOVL	dest_matrix(AP), R10		; ptr to dest array descriptor
	MOVL	SF$L_SAVE_FP(FP), R0		; pass FP to get scale
	JSB	G^BAS$$SCALE_R1			; get scale in R0 & R1
						; call a BLISS routine because
						; the frame offsets are only
						; defined for BLISS
	MOVD	R0, -(SP)			; save the scale
	CLRQ	-(SP)				; save place for scalar on stack

;+
; Set up limits for looping through all elements
;-

	CMPB	DSC$B_DIMCT(R2), #1		; determine # of subscripts
	BEQLU	INIT_ONE_SUB			; 1 sub, go init
	BGTRU	INIT_TWO_SUBS			; >=2 subs, go init
						; 0 subs, fall into error proc

ERR_ARGDONMAT:
	PUSHL	#BAS$K_ARGDONMAT		; signal error, 0 for dimct
	CALLS	#1, G^BAS$$STOP			; or block 2 or 3 absent

;+
; There is only 1 subscript.  Redimension the destination array.
; Make both upper and lower bound for 2nd
; subscript a 1.  A second subscript will be passed to and ignored by the
; store routine.  Put bounds for 1st subscript on stack.
;-

INIT_ONE_SUB:
	PUSHL	dsc$l_u1_1(R2)			; get bound for redim
	PUSHL	R10				; pointer to dest array desc
	CALLS	#2, BAS$MAT_REDIM		; redimension the dest
	PUSHL	dsc$l_u1_1(R2)			; 1st upper bound
	PUSHL	dsc$l_l1_1(R2)			; 1st lower bound
	BGTR	1$				; not 0 or neg, do 2nd sub
	MOVL	#1, (SP)			; don't alter col 0
1$:	PUSHL	#1				; dummy 2nd upper bound
	MOVL	#1, R9				; dummy 2nd lower bound
	BRB	SEPARATE_DTYPES			; go loop

;+
; There are 2 subscripts.  Check and redimension the destination array if
; necessary.  Put the upper bound for both subscripts on the
; stack and make sure that the lower bound for both subscripts will start
; at 1 (do not alter row or col 0)
;-

INIT_TWO_SUBS:
	PUSHL	dsc$l_u2_2(R2)			; 2nd upper bound
	PUSHL	dsc$l_u1_2(R2)			; 1st upper bound
	PUSHL	R10				; dest array pointer
	CALLS	#3, BAS$MAT_REDIM		; redimension destination
	PUSHL	dsc$l_u1_2(R2)			; 1st upper bound
	PUSHL	dsc$l_l1_2(R2)			; 1st lower bound
	BGTR	1$				; not row 0 or neg, do cols
	MOVL	#1, (SP)			; start with row 1
1$:	MOVL	dsc$l_u2_2(R2), R9		; 2nd upper bound
	PUSHL	dsc$l_l2_2(R2)			; 2nd lower bound
	BGTR	SEPARATE_DTYPES			; not col 0 or neg, go loop
	MOVL	#1, (SP)			; start with col 1

;+
; Algorithm now differs according to source array data types
;-

SEPARATE_DTYPES:
	CASEB	DSC$B_DTYPE(R2), #DSC$K_DTYPE_W, #<DSC$K_DTYPE_D - DSC$K_DTYPE_W>
2$:	.WORD	WORD-2$				; code for word dtype
	.WORD	LONG-2$				; code for long dtype
	.WORD	ERR_DATTYPERR-2$		; quad not supported
	.WORD	FLOAT-2$			; code for float dtype
	.WORD	DOUBLE-2$			; code for double dtype

ERR_DATTYPERR:
	PUSHL	#BAS$K_DATTYPERR		; Signal error, unsupported
	CALLS	#1, G^BAS$$STOP			; dtype in array desc

	.PAGE
;+
; Source array is a word array.  Now differentiate on the scalar type.
;-

WORD:	CASEB	scalar_dtype(AP), #DSC$K_DTYPE_W, #<DSC$K_DTYPE_D - DSC$K_DTYPE_W>
1$:	.WORD	WORD_TO_WORD-1$			; code for word dtype
	.WORD	WORD_TO_LONG-1$			; code for long dtype
	.WORD	ERR_DATTYPERR-1$		; quad not supported
	.WORD	WORD_TO_FLOAT-1$		; code for float dtype
	.WORD	WORD_TO_DOUBLE-1$		; code for double dtype
	BRW	ERR_DATTYPERR			; unsupported dtype

;+
; Now type of source array and scalar are known.  Use the macro to
; generate the code for each case
;-

	.PAGE
WORD_TO_WORD:	$BAS$MAT_SC_MUL	W, W

	.PAGE
WORD_TO_LONG:	$BAS$MAT_SC_MUL	W, L

	.PAGE
WORD_TO_FLOAT:	$BAS$MAT_SC_MUL	W, F

	.PAGE
WORD_TO_DOUBLE:	$BAS$MAT_SC_MUL	W, D

	.PAGE
;+
; Source array is a longword array.  Now differentiate on the scalar type
;-

LONG:	CASEB	scalar_dtype(AP), #DSC$K_DTYPE_W, #<DSC$K_DTYPE_D - DSC$K_DTYPE_W>
1$:	.WORD	LONG_TO_WORD-1$			; code for word dtype
	.WORD	LONG_TO_LONG-1$			; code for long dtype
	.WORD	ERR_DATTYPERR-1$		; quad not supported
	.WORD	LONG_TO_FLOAT-1$		; code for float dtype
	.WORD	LONG_TO_DOUBLE-1$		; code for double dtype
	BRW	ERR_DATTYPERR			; unsupported dtype

;+
; Now type of source array and scalar are known.  Use the macro to
; generate the code for each case
;-

	.PAGE
LONG_TO_WORD:	$BAS$MAT_SC_MUL	L, W

	.PAGE
LONG_TO_LONG:	$BAS$MAT_SC_MUL	L, L

	.PAGE
LONG_TO_FLOAT:	$BAS$MAT_SC_MUL	L, F

	.PAGE
LONG_TO_DOUBLE:	$BAS$MAT_SC_MUL	L, D

	.PAGE
;+
; Source array is a floating array.  Now differentiate on the scalar type
;-

FLOAT:	CASEB	scalar_dtype(AP), #DSC$K_DTYPE_W, #<DSC$K_DTYPE_D - DSC$K_DTYPE_W>
1$:	.WORD	FLOAT_TO_WORD-1$		; code for word dtype
	.WORD	FLOAT_TO_LONG-1$		; code for long dtype
	.WORD	ERR_DATTYPERR-1$		; quad not supported
	.WORD	FLOAT_TO_FLOAT-1$		; code for float dtype
	.WORD	ERR_DATTYPERR-1$		; float unsupported w/ double
	BRW	ERR_DATTYPERR			; unsupported dtype

;+
; Now type of source array and scalar are known.  Use the macro to
; generate the code for each case
;-

	.PAGE
FLOAT_TO_WORD:	$BAS$MAT_SC_MUL	F, W

	.PAGE
FLOAT_TO_LONG:	$BAS$MAT_SC_MUL	F, L

	.PAGE
FLOAT_TO_FLOAT:	$BAS$MAT_SC_MUL	F, F

	.PAGE
;+
; Source array is a double array.  Now differentiate on the scalartype.
;-

DOUBLE:	CASEB	scalar_dtype(AP), #DSC$K_DTYPE_W, #<DSC$K_DTYPE_D - DSC$K_DTYPE_W>
1$:	.WORD	DOUBLE_TO_WORD-1$		; code for word dtype
	.WORD	DOUBLE_TO_LONG-1$		; code for long dtype
	.WORD	ERR_DATTYPERR-1$		; quad not supported
	.WORD	ERR_DATTYPERR-1$		; float unsupported w/ double
	.WORD	DOUBLE_TO_DOUBL-1$		; code for double dtype
	BRW	ERR_DATTYPERR			; unsupported dtype

;+
; Now type of source array and scalar are known.  Use the macro to
; generate the code for each case
;-

	.PAGE
DOUBLE_TO_WORD:	$BAS$MAT_SC_MUL	D, W

	.PAGE
DOUBLE_TO_LONG:	$BAS$MAT_SC_MUL	D, L

	.PAGE
DOUBLE_TO_DOUBL: $BAS$MAT_SC_MUL D, D





;+
; Multiply has been in word.  Determine destination type to convert to dest.
;-

DEST_CASE_W:
	CASEB	DSC$B_DTYPE(R10), #DSC$K_DTYPE_W, #<DSC$K_DTYPE_D - DSC$K_DTYPE_W>
1$:	.WORD	STORE_WORD-1$			; no conversion needed
	.WORD	DEST_W_TO_L-1$			; code for long dtype
	.WORD	ERR_DATTYPERR-1$		; quad not supported
	.WORD	DEST_W_TO_F-1$			; code for float dtype
	.WORD	DEST_W_TO_D-1$			; code for double dtype
	BRW	ERR_DATTYPERR			; unsupported dtype

;+
; Multiply has been in long.  Determine destination type to convert to dest.
;-

DEST_CASE_L:
	CASEB	DSC$B_DTYPE(R10), #DSC$K_DTYPE_W, #<DSC$K_DTYPE_D - DSC$K_DTYPE_W>
1$:	.WORD	DEST_L_TO_W-1$			; code for word dtype
	.WORD	STORE_LONG-1$			; no conversion needed
	.WORD	ERR_DATTYPERR-1$		; quad not supported
	.WORD	DEST_L_TO_F-1$			; code for float dtype
	.WORD	DEST_L_TO_D-1$			; code for double dtype
	BRW	ERR_DATTYPERR			; unsupported dtype

;+
; Multiply has been in float.  Determine destination type to convert to dest.
;-

DEST_CASE_F:
	CASEB	DSC$B_DTYPE(R10), #DSC$K_DTYPE_W, #<DSC$K_DTYPE_D - DSC$K_DTYPE_W>
1$:	.WORD	DEST_F_TO_W-1$			; code for word dtype
	.WORD	DEST_F_TO_L-1$			; code for long dtype
	.WORD	ERR_DATTYPERR-1$		; quad not supported
	.WORD	STORE_FLOAT-1$			; no conversion needed
	.WORD	ERR_DATTYPERR-1$		; double unsupported w/ float
	BRW	ERR_DATTYPERR			; unsupported dtype

;+
; Multiply has been in double.
; Determine destination type to convert to dest.
;-

DEST_CASE_D:
	CASEB	DSC$B_DTYPE(R10), #DSC$K_DTYPE_W, #<DSC$K_DTYPE_D - DSC$K_DTYPE_W>
1$:	.WORD	DEST_D_TO_W-1$			; code for word dtype
	.WORD	DEST_D_TO_L-1$			; code for long dtype
	.WORD	ERR_DATTYPERR-1$		; quad not supported
	.WORD	ERR_DATTYPERR-1$		; float unsupported w/ double
	.WORD	STORE_DOUBLE-1$			; store it as is
	BRW	ERR_DATTYPERR			; unsupported dtype

DEST_L_TO_W:
	CVTLW	R0, R0				; convert
	BRB	STORE_WORD			; go store

DEST_F_TO_W:
	CVTFW	R0, R0				; convert
	BRB	STORE_WORD			; go store

DEST_D_TO_W:
	DIVD2	scale(R4), R0			; descale the double
	CVTDW	R0, R0				; convert to word
						; fall in to word store

STORE_WORD:
	MOVL	R10, R1				; pointer to dest descriptor
	MOVL	lower_bnd1(R4), R2		; current row
	MOVL	R11, R3				; current column
	STORE	W				; store
	RSB					; go continue loop

DEST_W_TO_L:
	CVTWL	R0, R0				; convert
	BRB	STORE_LONG			; go store

DEST_F_TO_L:
	CVTFL	R0, R0				; convert
	BRB	STORE_LONG			; go store

DEST_D_TO_L:
	DIVD2	scale(R4), R0			; descale the double
	CVTDL	R0, R0				; convert
						; fall into long store

STORE_LONG:
	MOVL	R10, R1				; pointer to dest descriptor
	MOVL	lower_bnd1(R4), R2		; current row
	MOVL	R11, R3				; current column
	STORE	L				; store
	RSB					; go continue loop

DEST_W_TO_F:
	CVTWF	R0, R0				; convert
	BRB	STORE_FLOAT			; go store

DEST_L_TO_F:
	CVTLF	R0, R0				; convert
						; fall into store float

STORE_FLOAT:
	MOVL	R10, R1				; pointer to dest descriptor
	MOVL	lower_bnd1(R4), R2		; current row
	MOVL	R11, R3				; current column
	STORE	F				; store
	RSB					; go continue loop
						; fall into store float
DEST_W_TO_D:
	CVTWD	R0, R0				; get double
	MULD2	scale(R4), R0			; scale the double
						;  NOTE: no need for integerize
	BRB	STORE_DOUBLE			; go store

DEST_L_TO_D:
	CVTLD	R0, R0				; get double
	MULD2	scale(R4), R0			; scale for dest
						;  NOTE: no need for integerize
	BRB	STORE_DOUBLE			;  go store

STORE_DOUBLE:
	MOVL	R10, R2				; pointer to dest descriptor
	MOVL	lower_bnd1(R4), R3		; current row
	MOVL	R11, R4				; current column
	STORE	D				; store
	RSB					; go continue loop

	.END					; end of BAS$MAT_SCA_MUL
