	.TITLE	MTH$DSINH 	; Double Floating Hyperbolic Sine routine
				; (DSINH)
	.IDENT /1-008/		; File: MTHDSINH.MAR  Edit: RNH1008
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;
; FACILITY: MATH LIBRARY
;++
; ABSTRACT:
;
; MTH$DSINH is a function which returns the double floating hyperbolic sine
; of its double precision floating point argument. The call is standard
; call-by-reference.
;
;--
;
; VERSION: 01
;
; HISTORY:
; AUTHOR:
;	Peter Yuo, 29-Jun-77: Version 01
;
; MODIFIED BY:
;
;
;

	.SBTTL	HISTORY	; Detailed Current Edit History


; ALGORITHMIC DIFFERENCES FROM FP-11/C ROUTINE:	none
;
; Edit History for Version 01 of MTH$DSINH 
;
; 0-2	MTH$$ERROR changed to MTH$$SIGNAL.
;	MTH$_... changed to MTH__....
;	Changed error handling mechanism. Put error result in R0:R1 before
;	calling MTH$$SIGNAL in order to allow user modify error result.
;
; 0-3	Six term Taylor series, in powers of argument, replaced
;	by six term Chebyshev series, in powers of ARG**2,
;	with overhang provided. This improves accuracy. 18-May-1978;
;	Mary Payne.
; 0-4	Fix LOG(2) constant.  TNH 16-June-78
; 1-001	- Update version number and copyright notice.  JBS 16-NOV-78
; 1-002	- Change MTH__FLOOVEMAT to MTH$K_FLOOVEMAT.  JBS 07-DEC-78
; 1-003	- Remove $SRMDEF - not needed.  JBS 16-DEC-78
; 1-004	- Add "_" to the PSECT directive.  JBS 22-DEC-78
; 1-005 - Declare externals.  SBL 17-May-1979
; 1-006 - Use MTH$DEXP_R6.  SBL 27-Sept-1979
; 1-007 - Changed lower limit for Chebyshev approximation from 2**-27 to
;	  2**-28.
;	- Eliminated second call to EXP for input values between 28.5*ln2
;	  and 127*ln2.
;	- Changed all final floating point divisions by 2 to interger 
;	  subrtracts of 1 from the exponent field.
;	- Extended maximum range from 87.69 to 128*ln2=88.72.
;	- Chaneged logic for computing EXP(|x|-ln2) to reduce error.
;	- RNH 10-FEB-81
; 1-008 - Change W^ to G^ on call to MTH$$SIGNAL RNH 09-Sept-1981

	.SBTTL	DECLARATIONS	; Declarative Part of Module

;
; INCLUDE FILES:	MTHJACKET.MAR
;

;
; EXTERNAL SYMBOLS:
;
	.DSABL	GBL
	.EXTRN	MTH$DEXP_R6
	.EXTRN	MTH$K_FLOOVEMAT
	.EXTRN	MTH$$SIGNAL

;
; EQUATED SYMBOLS:

	SD_1.0	= ^F1.0			; 1.0
	value	= 4			; value.rd.r

;
; MACROS:	none
;
;
; PSECT DECLARATIONS:

	.PSECT	_MTH$CODE	PIC,SHR,LONG,EXE,NOWRT
					; program section for math routines
;
; OWN STORAGE:	none
;
;
; CONSTANTS:
;

D_127_LOG_2:
	.QUAD	^X2BDAC7E20F3343B0	; 127*ln2
D_128_LOG_2:
	.QUAD	^XCF78F7D1721743B1	; 128*ln2-2**-49
D_28.5_LOG_2:
	.QUAD	^XDCC858B60990429E	; 28.5*ln2
D_LOG_2_HI:
	.QUAD	^XCF80F7D172174031	; (high 49 bits of ln2)+2**-49
D_LOG_2_LO:
	.QUAD	^XFF81898C86C3A5CA	; ln2 - D_LOG_2_HI

DSINHTAB:

	.WORD	^O031727,^O072153
	.WORD	^O121466,^O073017	; DECIMAL:   0.2508223608819151D-07
	.WORD	^O033470,^O167423
	.WORD	^O154465,^O062340	; DECIMAL: 0.2755729803646086D-05
	.WORD	^O035120,^O006400
	.WORD	^O150502,^O041641	; DECIMAL: 0.1984126984813681D-03
	.WORD	^O036410,^O104210
	.WORD	^O104210,^O073152	; DECIMAL: 0.8333333333332327D-02
	.WORD	^O037452,^O125252
	.WORD	^O125252,^O125255	; DECIMAL: 0.1666666666666667D+00
	.WORD	0,0
	.WORD	0,0			; DECIMAL: 0.D0
  
DSINHLEN	= .- DSINHTAB/8


	.SBTTL	MTH$DSINH  - Standard Double Precision Floating DSINH


;++
; FUNCTIONAL DESCRIPTION:
;
; DSINH  - double precision floating point function
;
; DSINH(X) is computed as:
;
;	If |X| < 2**-28, DSINH(X) = X.
;	IF 2**-28 =< |X| < 0.25, DSINH(X) = Chebyshev Series.
;	If 0.25 =< |X| < 28.5*ln2, DSINH(X) = (DEXP(X) - DEXP(-X))/2.
;	If 28.5 =< |X| < 127*ln2, DSINH(X) = sign(X)*EXP(|X|)/2.
;	If 127*ln2 =< |X| < 128*ln2, then DSINH(X) = sign(X)* DEXP(|X|-ln2).
;	If 128*ln2 < |X|, then overflow.
;
; CALLING SEQUENCE:
;
;	DSINH.wd.v = MTH$DSINH(x.rd.r)
;
; INPUT PARAMETERS:

	LONG = 4			; define longword multiplier
	x = 1 * LONG			; Contents of x is the argument

; IMPLICIT INPUTS:	none
;
; OUTPUT PARAMETERS:
;
;	VALUE:	double precision floating hyperbolic sine of the argument
;
; IMPLICIT OUTPUTS:	none
;
; COMPLETION CODES:	none
;
; SIDE EFFECTS:
;
; Signal: MTH$_FLOOVEMAT if 128*ln2 =< |X| with reserved operand in R0/R1
; (copied to the signal mechanism vector CHF$L_MCH_R0/R1 by LIB$SIGNAL).
; Associated message is: "FLOATING OVERFLOW IN MATH LIBRARY". Result is reserved
; operand -0.0 unless a user supplied (or any) error handler changes CHF$L_MCH_R0/R1.
;
; NOTE: This procedure disables floating point underflow, enables integer
; overflow.
;
;---


	.ENTRY	MTH$DSINH, ^M<IV, R2, R3, R4, R5, R6, R7>
					; standard call-by-reference entry
					; disable DV (and FU), enable IV
	MTH$FLAG_JACKET			; flag that this is a jacket procedure in
					; case of an error in routine
					; If an error, convert signal to user PC
					; and resignal
	MOVD	@value(AP), R6		; R6/R7 = |X| = @value(AP)
	MOVQ	R6, R0
	BICW2	#^X8000, R0		; R0/R1 = |X|
	CMPW	R0, #^X3F80		; compare |X| with 0.25
	BGEQ	GEQ_TO_0.25		; branch if |X| >= 0.25

;
; |X| < 0.25
;

	CMPW	R0, #^X3280		; compare |X| with 2**-28
	BGEQ	GEQ_TO_2M28		; branch if |X| >= 2**-28

;
; |X| < 2**-28
;

	MOVQ	R6, R0			; R0/R1 = X
	RET				; return with result = argument

;
; 2**-28 =< |X| < 0.25
;

GEQ_TO_2M28:
	MULD	R0,R0			; Get ARG**2 for POLYD
	POLYD	R0, #DSINHLEN-1, DSINHTAB
					; R0/R1 = SUM(Ci*X**i), with
					; Last coefficient zero
	MULD	R6,R0			; MULD by ARG, and then
	ADDD	R6,R0			; Add in ARG with overhang.
	RET				; return with result in R0/R1

;
; 0.25 =< |X|
;

GEQ_TO_0.25:
	CMPD	R0, D_127_LOG_2		; compare |X| with 127*ln2
	BGTR	GTR_THAN_127_LOG_2	; branch if |X| > 127*ln2

;
; 0.25 =< |X| < 127*ln2
;

	CMPD	R0, D_28.5_LOG_2	; Compare |X| with 28.5*ln2, if
	BGTR	ONLY_ONE_TERM		; greater, only one of EXP(X) and
					; EXP(-X) is significant.
;
; 0.25 =< |X| < 28.5*ln2
;
	MOVQ	R6, R0			; R0/R1 = X
	JSB	MTH$DEXP_R6		; R0/R1 = DEXP(X)
	MOVQ	R0, -(SP)		; push DEXP(X) on stack
	MNEGD	@value(AP), R0		; R0/R1 = -X
	JSB	MTH$DEXP_R6		; R0/R1 = DEXP(-X)
	SUBD3	R0, (SP)+, R0		; R0/R1 = DEXP(X) - DEXP(-X)
	SUBW	#^X0080, R0		; R0/R1 = (DEXP(X)-DEXP(-X))/2
   	RET				; return with result in R0/R1

;
; 28.5*ln2 =< |X| <127*ln2
;

ONLY_ONE_TERM:
	JSB	MTH$DEXP_R6		; R0/R1 = DEXP(|X|)
	TSTD	@value(AP)		; Check sign of X
	BGTR	POSITIVE		; If negative change sign of
	MNEGD	R0, R0			; DEXP(|X|)
POSITIVE:
	SUBW	#^X0080, R0		; R0/R1 = sign(X)*DEXP(|X|)/2
	RET
;
; 127*ln2 < |X|
;

GTR_THAN_127_LOG_2:
	CMPD	R0, D_128_LOG_2		; Compare |X| to 128*ln2
	BGEQ	ERROR			; if 128*ln2 =<|X|, overflow occurs


;
; 127*ln2 < |X| < 128*ln2
;

	SUBD	D_LOG_2_HI, R0		; R0/R1=|X|-D_LOG_2_HI
	JSB	MTH$DEXP_R6		; R0/R1 = DEXP(|X|-D_LOG_2_HI)
	MULD3	D_LOG_2_LO, R0, R2	; R2/R3=DEXP(|X|-D_LOG_2_HI)*D_LOG_2_LO
	SUBD	R2, R0			; R0/R1=DEXP(|X|-ln2)
	TSTD	@value(AP)		; test the sign of X
	BGEQ	10$			; branch if X >= 0
	MNEGD	R0, R0			; R0/R1 = sign(X) * DEXP(|X|-ln2)
10$:	RET				; return with result in R0/R1

;
; 128*ln2 =< |X|, error
;

ERROR:	MOVZBL	#MTH$K_FLOOVEMAT, -(SP)	; condition value
	ASHQ	#15, #1, R0		; R0/R1 = result = reserved operand -0.0
					; goes to signal mechanism vector
					; (CHF$L_MCH_R0/R1) so error handler
					; can modify the result.
	CALLS	#1, G^MTH$$SIGNAL	; signal error and use real user's PC
					; independent of CALL vs JSB
	RET				; return - R0/R1 restored from CHF$L_MCH_R0/R1



	.END
