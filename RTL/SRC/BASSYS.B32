MODULE BAS$SYS (				! RSTS SYS Function
		IDENT = '1-013'			! File: BASSYS.B32 Edit: PL1013
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  VAX-11 BASIC RSTS COMPATABILITY
!
! ABSTRACT:
!
!	This module contains the RSTS-compatable SYS function.
!	Some of the more complex functions do calls to BPA routines.
!
! ENVIRONMENT:  VAX-11 User Mode
!
! AUTHOR: John Sauter, CREATION DATE: 01-OCT-1979
!
! MODIFIED BY:
!
! 1-001	- Original.
! 1-002	- Define BPA$A_HISEG as 0, to disable the checking for the end
!	   of the compatability-mode high segment, and allocate
!	   some global cells for ASSIGN/DEASSIGN.  JBS 02-OCT-1979
! 1-003	- Instead of passing the XRB to the message send/receive code,
!	   pass the relevant fields of the XRB.  Also, BPA$_HISEG is
!	   no longer needed.  JBS 04-OCT-1979
! 1-004	- Debug message send/receive.  JBS 05-OCT-1979
! 1-005	- Continue debugging message send/receive.  JBS 07-OCT-1979
! 1-006	- Fix some errors in calling terminal functions.  JBS 12-OCT-1979
! 1-007	- Handle short parameter strings correctly.  JBS 17-OCT-1979
! 1-008	- Add core common.  JBS 03-DEC-1979
! 1-009	- Add FSS.  JBS 04-DEC-1979
! 1-010	- Add setting priority.  JBS 04-DEC-1979
! 1-011	- Make "exit with no prompt" exit more quietly, fix a typo in putting
!	   into core common, and make ODT submode give an error message, since
!	   there isn't time to make it work right for this release.  JBS 26-FEB-1980
! 1-012 - Put in small send and receive. All four functions. FM 24-FEB-81.
! 1-013 - LIB$STOP should be declared EXTERNAL.  PL 20-Nov-81
!--

!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!

REQUIRE 'RTLIN:OTSLNK';				! I/O Linkages

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    BAS$SYS : NOVALUE,				! Do a SYS() function
    BAS$$UUO : NOVALUE;				! Do a UUO sub-function

!
! INCLUDE FILES:
!

REQUIRE 'RTLML:OTSLUB';				! LUB definitions

REQUIRE 'RTLIN:BPASTRUCT';			! Structureing definitions

REQUIRE 'RTLIN:BPAFQBDEF';			! FIRQB definitions

REQUIRE 'RTLIN:BPAFSBDEF';			! FSB definitions

REQUIRE 'RTLIN:BPAFUNDEF';			! Function definitions

REQUIRE 'RTLIN:RTLPSECT';			! Macros for defining psects

LIBRARY 'RTLSTARLE';				! System symbols

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! PSECTS:
!
DECLARE_PSECTS (BAS);				! Declare psects for BAS$ facility
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    LIB$STOP : NOVALUE,				! Signal a fatal error
    STR$COPY_DX,				! Copy a string by descriptor
    STR$COPY_R,					! Copy a string by reference
    STR$FREE1_DX,				! Free a string
    STR$CONCAT,					! Concatenate strings
    LIB$GET_COMMON,				! Fetch from process common
    LIB$PUT_COMMON,				! Store in process common
    BAS$$STOP : NOVALUE,			! Signal fatal error
    BAS$RCTRLO : NOVALUE,			! Clear control O
    BAS$NOECHO : NOVALUE,			! Turn off echoing
    BAS$ONECHR : NOVALUE,			! Enter ODT submode
    BAS$CANTYPAHEAD : NOVALUE,			! Cancel type-ahead
    BAS$CTRLC : NOVALUE,			! Enable control-C trapping
    BAS$ECHO : NOVALUE,				! Turn of echoing
    BAS$ERT : NOVALUE,				! Return error message
    BAS$$CB_PUSH : JSB_CB_PUSH NOVALUE,		! Load register CCB
    BAS$$CB_POP : JSB_CB_POP NOVALUE,		! Done with register CCB
    BAS$$STOP_IO : NOVALUE,			! Signal fatal I/O error
    BPA$MESAG,					! Do send/receive
    BPA$ASSIGN,					! Assign a device
    BPA$DEASSIGN,				! Deassign a device
    BPA$DEASS_ALL,				! Deassign all devices
    BPA$SET_DEF,				! Set default
    BPA$FSS,					! File string scan
    BPA$FREE_BLOCK,				! Free heap storage
    BPA$SET_PRI;				! Change priority

!+
! The following are the error codes used in this module.
!-

EXTERNAL LITERAL
    BAS$K_ILLIO_CHA : UNSIGNED (8),		! Illegal I/O channel
    BAS$K_IO_CHANOT : UNSIGNED (8),		! I/O channel not open
    BAS$K_ILLSYSUSA : UNSIGNED (8),		! Illegal SYS$() usage
    BAS$K_ILLBYTCOU : UNSIGNED (8),		! Illegal byte count for I/O
    BAS$K_NO_ROOUSE : UNSIGNED (8),		! No room for user on device
    BAS$K_MISSPEFEA : UNSIGNED (8);		! Missing special feature


GLOBAL ROUTINE BAS$SYS (			! Do a SYS() function
	RESULT_STR, 				! Result of the SYS() function
	CODE_STR				! String that tells what to do
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Do a RSTS/E compatable SYS() function.
!
! FORMAL PARAMETERS:
!
!	RESULT_STR.wz.dx	Result of the SYS() function
!	CODE_STR.rz.dx		A string of bytes which specify what to do.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	Depends on the function, see above.  Where the result is not
!	defined the null string is returned.
!
! SIDE EFFECTS:
!
!	Signals if an error is encountered.
!
!--

    BEGIN

    MAP
	CODE_STR : REF BLOCK [8, BYTE];

    BIND
	FIRST_BYTE = CODE_STR [DSC$A_POINTER] : REF VECTOR [, BYTE],
	STR_LENGTH = .CODE_STR [DSC$W_LENGTH];

    LOCAL
	RET_STRING : BLOCK [8, BYTE];

    RET_STRING [DSC$W_LENGTH] = 0;
    RET_STRING [DSC$B_DTYPE] = DSC$K_DTYPE_Z;
    RET_STRING [DSC$B_CLASS] = DSC$K_CLASS_D;
    RET_STRING [DSC$A_POINTER] = 0;
!+
! Dispatch on the first byte of the string.
!-

    IF (STR_LENGTH EQLU 0)
    THEN
	BAS$$STOP_IO (BAS$K_ILLSYSUSA)
    ELSE

	CASE .FIRST_BYTE [0] FROM 0 TO 12 OF
	    SET

	    [0] : 				! Cancel control O
		BAS$RCTRLO ((IF (STR_LENGTH GEQ 2) THEN .FIRST_BYTE [1] ELSE 0));

	    [1] : 				! Enter TAPE mode
		BAS$$STOP (BAS$K_MISSPEFEA);

	    [2] : 				! Enable echoing
		BAS$ECHO ((IF (STR_LENGTH GEQ 2) THEN .FIRST_BYTE [1] ELSE 0));

	    [3] : 				! Disable echoing
		BAS$NOECHO ((IF (STR_LENGTH GEQ 2) THEN .FIRST_BYTE [1] ELSE 0));

	    [4] : 				! ODT submode
		BEGIN
		BAS$$STOP (BAS$K_MISSPEFEA);
		BAS$ONECHR ((IF (STR_LENGTH GEQ 2) THEN .FIRST_BYTE [1] ELSE 0));
		END;

	    [5] : 				! Exit with no prompt
		$EXIT (CODE = SS$_NORMAL);

	    [6] : 				! Call file processor
		BAS$$UUO (RET_STRING, .CODE_STR);

	    [7] : 				! Get core common
		BEGIN

		LOCAL
		    STATUS;

		STATUS = LIB$GET_COMMON (RET_STRING);

		IF ( NOT .STATUS) THEN LIB$STOP (.STATUS);

		END;

	    [8] : 				! Put core common
		BEGIN

		LOCAL
		    STATUS,
		    LEN,
		    DESC : BLOCK [8, BYTE];

		LEN = STR_LENGTH - 1;

		IF (.LEN GTR 127) THEN LEN = 0;

		DESC [DSC$W_LENGTH] = .LEN;
		DESC [DSC$B_DTYPE] = DSC$K_DTYPE_Z;
		DESC [DSC$B_CLASS] = DSC$K_CLASS_S;
		DESC [DSC$A_POINTER] = FIRST_BYTE [1];
		STATUS = LIB$PUT_COMMON (DESC);

		IF ( NOT .STATUS) THEN LIB$STOP (.STATUS);

		END;

	    [9] : 				! Exit and clear program
		$EXIT (CODE = SS$_NORMAL);

	    [10] : 				! Special implementation
		BAS$$STOP (BAS$K_MISSPEFEA);

	    [11] : 				! Cancel type ahead
		BAS$CANTYPAHEAD ((IF (STR_LENGTH GEQ 2) THEN .FIRST_BYTE [1] ELSE 0));

	    [12] : 				! Info on last opened file
		BAS$$STOP (BAS$K_MISSPEFEA);

	    [OUTRANGE] : 			! Not defined
		BAS$$STOP (BAS$K_ILLSYSUSA);
	    TES;

    STR$COPY_DX (.RESULT_STR, RET_STRING);
    STR$FREE1_DX (RET_STRING);
    RETURN;
    END;					! of routine BAS$SYS


ROUTINE BAS$$UUO (				! Do a SYS(CHR$(6)) function
	RESULT_STR, 				! Result of the SYS() call
	CODE_STR				! String that tells what to do
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Do a RSTS/E compatable SYS() function, where the first byte of
!	the string is a 6.
!
! FORMAL PARAMETERS:
!
!	RESULT_STR.wz.dx	The result of the SYS() function
!	CODE_STR.rz.dx		A string of bytes which specify what to do.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	Depends on the function, see above.  Where the result is not
!	specified, the user's string is set to null.
!
! SIDE EFFECTS:
!
!	Signals if an error is encountered.
!
!--

    BEGIN

    EXTERNAL ROUTINE
	R50ASC : NOVALUE;

    MAP
	CODE_STR : REF BLOCK [8, BYTE];

    LOCAL
	RET_STRING : BLOCK [8, BYTE],
	FIRQB : BLOCK [512 + 41 + 2, BYTE] FIELD (FQB$FIELDS),
	FIRQB_DESC : BLOCK [8, BYTE];

    FIRQB_DESC [DSC$W_LENGTH] = 512 + 41;
    FIRQB_DESC [DSC$B_DTYPE] = DSC$K_DTYPE_BU;
    FIRQB_DESC [DSC$B_CLASS] = DSC$K_CLASS_S;
    FIRQB_DESC [DSC$A_POINTER] = FIRQB [2, B_];
    CH$COPY (.CODE_STR [DSC$W_LENGTH], .CODE_STR [DSC$A_POINTER], 0, 512 + 41, FIRQB [2, B_]);
    RET_STRING [DSC$W_LENGTH] = 0;
    RET_STRING [DSC$B_DTYPE] = DSC$K_DTYPE_Z;
    RET_STRING [DSC$B_CLASS] = DSC$K_CLASS_D;
    RET_STRING [DSC$A_POINTER] = 0;
!+
! Dispatch on the second byte of the string.
!-

    CASE .FIRQB [FQB$B_FUNCTION] FROM FUN$K_MINUUO TO FUN$K_MAXUUO OF
	SET

	[FUN$K_UUCCT] : 			! Control C trap enable
	    BAS$CTRLC ();

	[FUN$K_UUERR] : 			! Get error message
	    BEGIN

	    LOCAL
		ERR_STRING : BLOCK [8, BYTE],
		HEADER : BLOCK [8, BYTE];

	    ERR_STRING [DSC$W_LENGTH] = 0;
	    ERR_STRING [DSC$B_DTYPE] = DSC$K_DTYPE_T;
	    ERR_STRING [DSC$B_CLASS] = DSC$K_CLASS_D;
	    ERR_STRING [DSC$A_POINTER] = 0;
	    BAS$ERT (ERR_STRING, .FIRQB [FQB$B_ERRNUM]);
	    HEADER [DSC$W_LENGTH] = 2;
	    HEADER [DSC$B_DTYPE] = DSC$K_DTYPE_BU;
	    HEADER [DSC$B_CLASS] = DSC$K_CLASS_S;
	    HEADER [DSC$A_POINTER] = UPLIT (BYTE (0, 0));
	    STR$CONCAT (RET_STRING, HEADER, ERR_STRING);
	    STR$FREE1_DX (ERR_STRING);
	    END;

	[FUN$K_UUMES1] : 			! Small message send/receive
	    BEGIN

	    LITERAL
		K_SML_SEND = -1,
		K_SML_REMREC = 0,
		K_SML_DCLREC_REC = 1,
		K_SML_REC = 2;

	    LOCAL
		BYTXFR,				! Number of bytes actually transferred
		ASCII_LOGNAM : VECTOR [6, BYTE],	! A buffer to put the translated R50 name.
		RES_STRING : VECTOR [30, BYTE],	! Some place to put the result string temporarily.
		MESAG : VECTOR [20, BYTE];	! A temp. place to put the message.

!+
! Translate the name passed to ASCII.
!-
	    R50ASC (%REF (6), FIRQB [FQB$T_RCVNAM], ASCII_LOGNAM);

	    IF .ASCII_LOGNAM [0] EQL %C'?' THEN BAS$$STOP_IO (BAS$K_ILLSYSUSA);

!+
! Do each function seperately
!-

	    CASE .FIRQB [FQB$B_SUBFUN] FROM K_SML_SEND TO K_SML_REC OF
		SET

		[K_SML_SEND] :
		    BEGIN
		    CH$MOVE (20, FIRQB [10, B_], MESAG);
		    CH$MOVE (20, MESAG, FIRQB [12, B_]);	!The message
		    CH$MOVE (6, ASCII_LOGNAM, FIRQB [FQB$T_RCVNAM]);	!Logical name
		    END;

		[K_SML_REMREC] :
		    1;				! Looks the same, so don't do anything.

		[K_SML_DCLREC_REC] :
		    BEGIN
		    CH$MOVE (6, ASCII_LOGNAM, FIRQB [FQB$T_RCVNAM]);	!Logical name
		    FIRQB [FQB$W_BMAX] = -1;	! Use temporary mailboxes.
		    FIRQB [FQB$B_ACCESS] = 1;	! Local message.
		    BPA$MESAG (FIRQB, 0, 0, BYTXFR);
		    CH$FILL (0, 32, FIRQB [2, B_]);
		    FIRQB [FQB$B_SUBFUN] = K_SML_REC;
		    END;

		[K_SML_REC] :
		    BEGIN
		    CH$MOVE (6, ASCII_LOGNAM, FIRQB [FQB$T_RCVNAM]);	!Logical name
		    FIRQB [FQB$B_SUBFUN] = K_SML_DCLREC_REC;
		    FIRQB [FQB$W_BMAX] = -1;	! Use temporary mailboxes.
		    FIRQB [FQB$B_ACCESS] = 1;	! Local message.
		    BPA$MESAG (FIRQB, 0, 0, BYTXFR);
		    CH$FILL (0, 32, FIRQB [2, B_]);
		    FIRQB [FQB$B_SUBFUN] = K_SML_REC;
		    FIRQB [FQB$B_RMOD] = 1;	!Sleep indefinitely
		    END;
		TES;

!+
! Now call BPA$MESAG, to do the work.
!-
	    BPA$MESAG (FIRQB, 0, 0, BYTXFR);
	    CH$FILL (0, 30, RES_STRING);
	    CH$MOVE (20, FIRQB [FQB$T_PAR_STR], RES_STRING + 8);
	    STR$COPY_R (RET_STRING, %REF (30), RES_STRING);
	    END;

	[FUN$K_UUMES2] : 			! Large message send/receive
	    BEGIN

	    GLOBAL REGISTER
		CCB = K_CCB_REG : REF BLOCK [, BYTE];

	    LOCAL
		BUFLEN,				! Length of buffer
		BUFADR,				! Address of user's buffer
		BYTXFR;				! Number of bytes actually transferred

!+
! Set up buffer length, byte count and buffer address based on the SYS()
! string.
!-

	    IF (.FIRQB [12, B_] EQL 0)
	    THEN
		BEGIN
!+
! The buffer is in the string.
!-
		CCB = 0;

		IF (.CODE_STR [DSC$W_LENGTH] GTR 40)
		THEN
		    BEGIN
		    BUFADR = FIRQB [42, B_];
		    BUFLEN = .CODE_STR [DSC$W_LENGTH] - 40;
		    END
		ELSE
		    BEGIN
!+
! There is no buffer.
!-
		    BUFADR = BUFLEN = 0;
		    END

		END
	    ELSE
		BEGIN
!+
! The buffer is an I/O buffer.  The low seven bits of byte 11 are the
! channel number.
!-

		LOCAL
		    CHAN;

		CHAN = (.FIRQB [12, B_] AND 127);

		IF (.CHAN LEQ 0) THEN BAS$$STOP_IO (BAS$K_ILLIO_CHA);

		BAS$$CB_PUSH (.CHAN, LUB$K_LUN_MIN);

		IF ( NOT .CCB [LUB$V_OPENED]) THEN BAS$$STOP_IO (BAS$K_IO_CHANOT);

		IF ((.FIRQB [16, W_] + .FIRQB [14, W_]) GTRU .CCB [LUB$W_RBUF_SIZE])
		THEN
		    BAS$$STOP_IO (BAS$K_ILLBYTCOU);

		IF (.FIRQB [14, W_] EQL 0) THEN BAS$$STOP_IO (BAS$K_NO_ROOUSE);

		BUFADR = .CCB [LUB$A_RBUF_ADR] + .FIRQB [16, W_];
		BUFLEN = .FIRQB [14, W_];
		END;

!+
! Copy the user's parameter string to the FIRQB.
!-
	    CH$MOVE (20, FIRQB [22, B_], FIRQB [12, B_]);
!+
! Now do the RSTS/E .MESAG function
!-
	    BPA$MESAG (FIRQB, .BUFLEN, .BUFADR, BYTXFR);
!+
! Put things back.
!-
	    CH$MOVE (20, FIRQB [12, B_], FIRQB [22, B_]);
	    FIRQB [14, W_] = .BYTXFR;

	    IF (.CCB NEQA 0) THEN BAS$$CB_POP ();

	    STR$COPY_R (RET_STRING, %REF (40), .FIRQB_DESC [DSC$A_POINTER]);
	    END;

	[FUN$K_UUFSS1, FUN$K_UUFSS2] : 		! File string scan
	    BEGIN

	    LOCAL
		STATUS,
		FSB : $FSB_DEF;

	    STATUS = BPA$FSS (FIRQB, FSB, .CODE_STR [DSC$A_POINTER] + 2, .CODE_STR [DSC$W_LENGTH] - 2);

	    IF ( NOT .STATUS)
	    THEN
		LIB$STOP (.STATUS)
	    ELSE
		BEGIN

		LOCAL
		    STATUS;

		STATUS = BPA$FREE_BLOCK (.FSB [FSB$A_FSA], NAM$C_MAXRSS);

		IF ( NOT .STATUS) THEN LIB$STOP (.STATUS);

!+
! Return information to the user from the FIRQB and FSB.
!-
		FIRQB [3, B_] = .FIRQB [5, B_];
		FIRQB [16, W_] = .FIRQB [28, W_];
		FIRQB [20, W_] = .FIRQB [30, W_];
		FIRQB [28, W_] = .FSB [FSB$W_FLAG_1];
		FIRQB [30, W_] = .FSB [FSB$W_FLAG_2];
		STR$COPY_R (RET_STRING, %REF (30), .FIRQB_DESC [DSC$A_POINTER]);
		END;

	    END;

	[FUN$K_UUPRI] : 			! Set priority, etc.
!+
! Only priority setting is implemented; all else is ignored.
!-
	    BEGIN
	    BPA$SET_PRI (FIRQB);
	    END;

	[FUN$K_UUATR] : 			! Read/write file
	    BAS$$STOP (BAS$K_MISSPEFEA);

	[FUN$K_UUASS] : 			! Assign
	    BEGIN
	    BPA$ASSIGN (FIRQB);
	    STR$COPY_DX (RET_STRING, FIRQB_DESC);
	    END;

	[FUN$K_UUDEA] : 			! Deassign
	    BEGIN
	    BPA$DEASSIGN (FIRQB);
	    END;

	[FUN$K_UUDAL] : 			! Deassign all
	    BPA$DEASS_ALL ();

	[FUN$K_UUSDEF] : 			! Set default
	    BEGIN
	    BPA$SET_DEF (FIRQB);
	    END;

	[INRANGE] : 				! Unimplemented
	    BAS$$STOP (BAS$K_MISSPEFEA);

	[OUTRANGE] : 				! Not defined
	    BAS$$STOP (BAS$K_ILLSYSUSA);
	TES;

    STR$COPY_DX (.RESULT_STR, RET_STRING);
    STR$FREE1_DX (RET_STRING);
    RETURN;
    END;					! of routine BAS$$UUO
END						! of module BAS$SYS

ELUDOM
