	.TITLE	BAS$MAT_IDN
	.IDENT	/1-005/			; File: BASMATIDN.MAR Edit: PLL1005

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY: BASIC code support
;
; ABSTRACT:
;
;	This module initializes a matrix to have zeros everywhere except
;	ones on the diagonal.
;
; ENVIRONMENT: User Mode, AST Reentrant
;
;--
; AUTHOR: R. Will, CREATION DATE: 29-May-79
;
; MODIFIED BY:
;++
; 1-001	- Original 
; 1-002 - Reference bounds as signed, not unsigned.  RW 7-Jun-79
; 1-003 - Changed shared external references to G^ RNH 25-Sep-81
; 1-004 - Substitute a macro for the calls the array store
;	  routines.  This should speed things up.  PLL 6-Nov-81
; 1-005 - Correct a run-time expression in the STORE macro.
;	  PLL 20-Jan-82
;--

	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;

	$DSCDEF
	$SFDEF

;
; EXTERNAL DECLARATIONS:
;
	.DSABL	GBL				; Prevent undeclared
						;  symbols from being
						;  automatically global.
	.EXTRN	BAS$K_ARGDONMAT			; signalled if all 3 blocks
						;  not present in array desc
	.EXTRN	BAS$K_DATTYPERR			; signalled if dtype of array
						; isn't word long float double
	.EXTRN	BAS$K_MATDIMERR			; array wasn't 2 dimensional
	.EXTRN	BAS$STO_FA_W_R8			; array element store for word
	.EXTRN	BAS$STO_FA_L_R8			; array element store for long
	.EXTRN	BAS$STO_FA_F_R8			; array element store - float
	.EXTRN	BAS$STO_FA_D_R8			; array element store - double
	.EXTRN	BAS$$STOP			; signal fatal errors
	.EXTRN	BAS$$SCALE_R1			; get the scale for double

;
; MACROS:
;

;	$BAS$MAT_IDN	see below, defines entire identity init algorithm
;	STORE		store an element into an array

;
; EQUATED SYMBOLS:
;

	lower_bnd2 = 0				; stack offset for temp
	lower_bnd1 = 4				; stack offset for temp
	upper_bnd1 = 8				; stack offset for temp
	one_cvt = 12				; stack offset,converted one
	dsc$l_l1_2 = 28				; desc offset if 2 sub
	dsc$l_u1_2 = 32				; desc offset if 2 sub
	dsc$l_l2_2 = 36				; desc offset if 2 sub
	dsc$l_u2_2 = 40				; desc offset if 2 sub

;
; OWN STORAGE:
;

;
; PSECT DECLARATIONS:
;
	.PSECT _BAS$CODE PIC, USR, CON, REL, LCL, SHR, -
			EXE, RD, NOWRT, LONG


	.SBTTL	BAS$MAT_IDN  - Initialize a  matrix to identity matrix
;++
; FUNCTIONAL DESCRIPTION:
;
;	This routine initializes the input matrix to the identity matrix
;	by setting all diagonal elements to 1 and all the remaining elements
;	to zero.  The algorithm is the same for the 4 supported
;	BASIC data types.  In order to keep the code for the 4 data types
;	the same and to simplify the reading, the code has been done as
;	a macro, which the four data types use varying only the letters
;	(W, L, F, D) in converting the ones and zeros, in passing the constant
;	and calling the array store routines.
;
; CALLING SEQUENCE:
;
;	CALL BASMAT_IDN (matrix.wx.da)
;
; INPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT INPUTS:
;
;	Scaling from the callers frame (for the double precision one)
;
; OUTPUT PARAMETERS:
;
	matrix = 4
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; FUNCTION VALUE:
; COMPLETION CODES:
;
;	NONE
;
; SIDE EFFECTS:
;
;	This routine will call the BASIC array store routines and so may
;	cause any of their errors to be signalled.  It may also signal any
;	of the errors listed in the externals section.
;
;--


;+
; This macro is a substitute for calls to the array store
; routines.  It will call the BAS$ routines only if the array is a 
; virtual array.  Otherwise, it will calculate the linear index into
; the array via the INDEX instruction.  (Note that BASIC programs must
; be able to handle FORTRAN arrays, so the code must check for arrays
; stored by column.)  The INDEX instructions should provide a significant
; performance improvement over calling a routine for each element of
; the array.
;-

	.LIST	ME
	.MACRO	STORE	array_dtype,?L1,?L2,?L3,?L4,?L5

	.IF	IDN	'array_dtype', D	; array is double
	CMPB	dsc$b_class(R2), #dsc$k_class_bfa  ; virtual array?
	BNEQ	L1				; no
	JSB	BAS$STO_FA_'array_dtype'_R8	; call store routine
	BRW	L5				; done
L1:	BBS	#5, 10(R2), L2			; br if stored col-wise
	INDEX	R3, dsc$l_l1_2(R2), dsc$l_u1_2(R2), dsc$l_m2(R2), #0, R5
						; I * M2
	MOVZWL	dsc$w_length(R2), R6		; longword length for INDEX
	INDEX	R4, dsc$l_l2_2(R2), dsc$l_u2_2(R2), R6, R5, R5
						; (J + (I * M2)) * length
	ADDL	dsc$a_a0(R2), R5		; compute addr of element
	MOV'array_dtype'	R0, (R5)	; store element from R0
	BRW	L5				; done
L2:	INDEX	R4, dsc$l_l2_2(R2), dsc$l_u2_2(R2), dsc$l_m1(R2), #0, R5
						; J * M1
	MOVZWL	dsc$w_length(R2), R6		; longword length for INDEX
	INDEX	R3, dsc$l_l1_2(R2), dsc$l_u1_2(R2), R6, R5, R5
						; (I + (J * M1)) * length
	ADDL	dsc$a_a0(R2), R5		; compute addr of element
	MOV'array_dtype'	R0, (R5)	; store element from R0
	.IFF					; array type other than double
	CMPB	dsc$b_class(R1), #dsc$k_class_bfa  ;virtual array?
	BNEQ	L3				; no
	JSB	BAS$STO_FA_'array_dtype'_R8	; call store routine
	BRW	L5				; done
L3:	BBS	#5, 10(R1), L4			; br if stored col-wise
	INDEX	R2, dsc$l_l1_2(R1), dsc$l_u1_2(R1), dsc$l_m2(R1), #0, R4
						; I * M2
	MOVZWL	dsc$w_length(R1), R5		; longword length for INDEX
	INDEX	R3, dsc$l_l2_2(R1), dsc$l_u2_2(R1), R5, R4, R4
						; (J + (I * M2)) * length
	ADDL	dsc$a_a0(R1), R4		; compute addr of element
	MOV'array_dtype'	R0, (R4)	; store element from R0
	BRW	L5				; done
L4:	INDEX	R3, dsc$l_l2_2(R1), dsc$l_u2_2(R1), dsc$l_m1(R1), #0, R4
						; J * M1
	MOVZWL	dsc$w_length(R1), R5		; longword length for INDEX
	INDEX	R2, dsc$l_l1_2(R1), dsc$l_u1_2(R1), R5, R4, R4
						; (I + (J * M1)) * length
	ADDL	dsc$a_a0(R1), R4		; compute addr of element
	MOV'array_dtype'	R0, (R4)	; store element from R0
	.ENDC

L5:
	.ENDM



	.LIST	ME
	.MACRO	$BAS$MAT_IDN dtype		; identity init algorithm

;+
;	REGISTER USAGE
;	R0 - R8 destroyed by store routines
;	R9	upper bound for 2nd subscript
;	R10	pointer to array descriptor
;	R11	current value of 2nd subscript
;-

;+
; Set up limits for looping through all elements
;-

	MOV'dtype'	#1, -(SP)		; make constant same data type
						;  as array, save on stack
	.IF 	IDN	dtype, D		; array is double
	MOVL	SF$L_SAVE_FP(FP), R0		; pass FP to get scale
	JSB	G^BAS$$SCALE_R1			; get scale in R0 & R1
						; call a BLISS routine because
						; the frame offsets are only
						; defined for BLISS
	MULD2	R0, (SP)			; scale
	.ENDC
1$:	CMPB	DSC$B_DIMCT(R10), #2		; determine # of subscripts
	BEQLU	INIT_TWO_SUBS'dtype'		; 2 subs, go init
	BRW	ERR_MATDIMERR			; not 2 subs, error

;+
; There are 2 subscripts.  Put the upper bound for both subscripts on the
; stack and make sure that the lower bound for both subscripts will start
; at 1 (do not alter row or col 0 or any negative subscript)
;-

INIT_TWO_SUBS'dtype':
	PUSHL	dsc$l_u1_2(R10)			; 1st upper bound
	PUSHL	dsc$l_l1_2(R10)			; 1st lower bound
	BGTR	1$				; not row 0 or neg, do cols
	MOVL	#1, (SP)			; start with row 1
1$:	MOVL	dsc$l_u2_2(R10), R9		; 2nd upper bound
	PUSHL	dsc$l_l2_2(R10)			; 2nd lower bound
	BGTR	LOOP_2ND_SUB'dtype'		; not col 0 or neg, go loop
	MOVL	#1, (SP)			; start with col 1

;+
; Loop through all the rows.  Row and column upper and lower bounds have been
; initialized on the stack.
;-

LOOP_1ST_SUB'dtype':
	MOVL	lower_bnd2(SP), R11		; R11 has 2nd lower bound

;+
; Loop through all the elements (columns) of the current row.  Column lower
; bound is initialized in R11.  Column upper bound is on the stack.
;-

LOOP_2ND_SUB'dtype':

	CMPL	R11, lower_bnd1(SP)		; see if diagonal element
	BEQL	1$				; yes, go put 1
	CLR'dtype'	R0			; no, zero to be stored
	BRB	2$				; continue
1$:	MOV'dtype'	one_cvt(SP), R0		; put scaled 1 into R0
						;  R0 & R1 for double
;+
; Code is same for all datatypes except double, since double passed by value
; takes 2 words and all other supported datatypes by value takes 1 longword
;-

2$:	.IF	IDN	dtype, D		; see if datatype is double
	.IFF					; no, word, long, float
	MOVL	R10, R1				; pointer to array desc
	MOVL	lower_bnd1(SP), R2		; current row
	MOVL	R11, R3				; current column
	.IFT					; type is double
	MOVL	R10, R2				; pointer to array desc
	MOVL	lower_bnd1(SP), R3		; current row
	MOVL	R11, R4				; current column
	.ENDC					; code now same for all types
	STORE	'dtype'				; store in array
	INCL	R11				; get next column
	CMPL	R11, R9				; see if last column done
	BLEQ	LOOP_2ND_SUB'dtype'		; no, continue inner loop

;+
; Have completed entire row.  See if it was the last row.  If not,
; continue with next row.
;-

	INCL	lower_bnd1(SP)			; get next row
	CMPL	lower_bnd1(SP), upper_bnd1(SP)	; see if last row done
	BGTR	5$
	BRW	LOOP_1ST_SUB'dtype'		; no, continue outer loop

5$:	RET					; yes, finished
	.ENDM

	.ENTRY BAS$MAT_IDN, ^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,IV>

;+
; Put routine arguments into registers for ease of use.
; If block 2 of array descriptor (multipliers) is not present then error.
;-

	MOVL	matrix(AP), R10			; ptr to array descr in R10
	BBC	#DSC$V_FL_BOUNDS, DSC$B_AFLAGS(R10), ERR_ARGDONMAT
						; exit if block 3 not
						; present in descriptor

;+
; Algorithm now differs according to data types
;-

	CASEB	DSC$B_DTYPE(R10), #DSC$K_DTYPE_W, #<DSC$K_DTYPE_D - DSC$K_DTYPE_W>
1$:	.WORD	WORD-1$				; code for word dtype
	.WORD	LONG-1$				; code for long dtype
	.WORD	ERR_DATTYPERR-1$		; quad not supported
	.WORD	FLOAT-1$			; code for float dtype
	.WORD	DOUBLE-1$			; code for double dtype

ERR_DATTYPERR:
	PUSHL	#BAS$K_DATTYPERR		; Signal error, unsupported
	CALLS	#1, G^BAS$$STOP			; dtype in array desc

ERR_ARGDONMAT:
	PUSHL	#BAS$K_ARGDONMAT		; signal error,
	CALLS	#1, G^BAS$$STOP			; block 2 or 3 absent

ERR_MATDIMERR:
	PUSHL	#BAS$K_MATDIMERR		; signal error not 2 for dimct
	CALLS	#1, G^BAS$$STOP

	.PAGE
WORD:	$BAS$MAT_IDN W				; expand to word operations
	.PAGE
LONG:	$BAS$MAT_IDN L				; expand to long operations
	.PAGE
FLOAT:	$BAS$MAT_IDN F				; expand to float operations
	.PAGE
DOUBLE:	$BAS$MAT_IDN D				; expand to double operations

	.END					; end of BAS$MAT_IDN
