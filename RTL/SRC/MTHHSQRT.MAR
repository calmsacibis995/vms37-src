	.TITLE	MTH$HSQRT		; H Floating Point Square Root routine
					; (HSQRT)
	.IDENT	/1-001/			; File: MTHHSQRT.MAR	EDIT: JAW1001
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;
; FACILITY: MATH LIBRARY
;
;++
;
; ABSTRACT:
;
; MTH$HSQRT is a function which returns the H-floating square root of
; its H-floating argument.  The call is standard call-by-reference.
;
; MTH$HSQRT_R8 is a special routine which is the same as MTH$HSQRT
; except that a faster non-standard JSB call is used with the argument
; in R0/R3 and no registers are saved.
;
;--
;
; VERSION: 1
;
; HISTORY:
;
; AUTHOR:
;	John A. Wheeler, 25-Jul-79: Version 1
;
; MODIFIED BY:
;
;
;

	.SBTTL	HISTORY			; Detailed Current Edit History

; Edit History for Version 1 of MTH$HSQRT 
;
; 1-001 - Adapted from MTH$SQRT version 1-013, MTH$DSQRT version 1-013,
;	  and MTH$GSQRT version 1-001.  JAW 25-Jul-79.

	.SBTTL	DECLARATIONS		; Declarative Part of Module

;
; INCLUDE FILES:
;
; EXTERNAL SYMBOLS:
;
	.DSABL	GBL			; Declare all externals
	.EXTRN	MTH$$SIGNAL		; SIGNAL SEVERE error
	.EXTRN	MTH$K_SQUROONEG		; Error code

;
; EQUATED SYMBOLS:
;

	ACMASK = ^M<IV, R2, R3, R4, R5, R6, R7, R8>
					; Register save mask and IV enable

;
; MACROS:	None
;
; PSECT DECLARATIONS:

	.PSECT	_MTH$CODE	PIC,SHR,LONG,EXE,NOWRT
					; Program section for math routines

;
; OWN STORAGE:
;
;
; Constants A and B chosen for k odd
;
	LF_ODD_A  =  ^X13CD4054		; Decimal: 0.8284271
	LF_ODD_B  =  ^X3C4A3F98		; Decimal: 0.2973349
;
; Constants A and B chosen for k even
;
	LF_EVEN_A  =  ^XF61A4015	; Decimal: 0.5857865
	LF_EVEN_B  =  ^X4B233FD7	; Decimal: 0.4204951

	.SBTTL	MTH$HSQRT  -  Standard H-Floating SQRT


;++
; FUNCTIONAL DESCRIPTION:
;
; HSQRT  - H-floating point square root function
;
; HSQRT(X) is computed using the following approximation technique:
;
;	If X < 0, signal error.  If X = 0, return HSQRT(X) = 0.
;
;	Let X = 2**K * F where F is the fractional part.
;
;	If K is even, X = 2**(2P) * F,
;		HSQRT(X) = 2**P * HSQRT(F), 1/2 =< F < 1
;
;	If K is odd, X = 2**(2P+1) * F = 2**(2P+2) * (F/2),
;		HSQRT(X) = 2**(P+1) * HSQRT(F/2), 1/4 =< F/2 < 1/2.
;
;	Let F' = A*F + B,
;			  A = 0.453730314(octal),
;			  B = 0.327226214(octal), for K even.
;	       = A*(F/2) + B,
;			  A = 0.650117146(octal),
;			  B = 0.230170444(octal), for K odd.
;	and
;	    K' = P,	 for K even
;	       = P + 1	 for K odd.
;
;	Let Y0 = 2**K' * F' as a straight line approximation within the
;	given interval using coefficients A and B which minimize the
;	absolute error at the midpoint and endpoints.
;
;	Starting with Y0, five Newton-Raphson iterations are performed.
;
;	Y[n+1] = (1/2) * ( Y[n] + X/Y[n])
;
;	The relative error is < 10**-17.
;
; CALLING SEQUENCE:
;
;	hsqrt.wh.v = MTH$HSQRT(x.rh.r)
;
;		-or-
;
;	CALL MTH$HSQRT(hsqrt.wh.r, x.rh.r)
;
;	Because an H-floating result cannot be expressed in 64 bits, it is
;	returned as the first argument, with the input parameter displaced
;	to the second argument, in accordance with the Procedure Calling
;	Standard.
;
; INPUT PARAMETERS:

	LONG = 4			; Define longword multiplier
	x = 2 * LONG			; Contents of x is the argument

; IMPLICIT INPUTS:	None
;
; OUTPUT PARAMETERS:
;
	hsqrt = 1 * LONG		; Contents of hsqrt is the result
;
; IMPLICIT OUTPUTS:	None
;
; COMPLETION CODES:	None
;
; SIDE EFFECTS:
;
; Signals: MTH$_SQUROONEG if x < 0.0 with reserved operand in R0/R3
; (R0/R1 copied to the signal mechanism vector CHF$L_MCH_R0/R1 by LIB$SIGNAL).
; Associated message is: "SQUARE ROOT OF NEGATIVE VALUE". Result is reserved
; operand -0.0 unless a user supplied (or any) error handler changes CHF$L_MCH_R0/R1.
;
; NOTE: This procedure disables floating point underflow, enables integer
; overflow, causes no floating overflow or other arithmetic traps, and
; preserves enables across the call.
;
;---


	.ENTRY	MTH$HSQRT, ACMASK	; Standard call-by-reference entry
					; Disable DV (and FU), enable IV
	MTH$FLAG_JACKET			; Flag that this is a jacket procedure in
					; case of an error in special routine
	MOVH	@x(AP), R0		; Fetch x from second argument
	BSBB	MTH$HSQRT_R8		; Call kernel HSQRT routine
	MOVO	R0, @hsqrt(AP)		; Store result in first argument
	RET				; Return to caller

	.SBTTL	MTH$HSQRT_R8  -  Special HSQRT Routine

MTH$HSQRT_R8::
	MOVH	R0, R4			; Test value of x and save in R4/R7
	BGTR	POS			; If x > 0, proceed with computation
	BRW	ZERO_NEG		; Otherwise handle separately

;
; Here if x > 0.
;

POS:	BLBC	R0, EVEN		; Branch on odd/even exponent

ODD:	SUBW3	#^X3FFF, R0, R8		; Save scale factor in R8
	MOVW	#^X3FFF, R0		; Scale x
	MOVW	R0, R4			; Scale copy of x in R4
	CVTHF	R0, R0			; Convert x to single precision
	MULF2	#LF_ODD_A, R0		; Compute initial approximation
	ADDF2	#LF_ODD_B, R0		; ...
	BRB	ITERATE			; Go iterate

EVEN:	SUBW3	#^X4000, R0, R8		; Save scale factor in R8
	MOVW	#^X4000, R0		; Scale x
	MOVW	R0, R4			; Scale copy of x in R4
	CVTHF	R0, R0			; Convert x to single precision
	MULF2	#LF_EVEN_A, R0		; Compute first approximation
	ADDF2	#LF_EVEN_B, R0		; ...

ITERATE:

;
; first iteration - single precision
;

	CVTHF	R4, R1			; R1 = X
	DIVF3	R0, R1, R2		; R2 = X/Y0
	ADDF2	R2, R0			; R0 = Y0 + X/Y0
	SUBW2	#^X80, R0		; R0 = Y1 = (1/2)(Y0 + X/Y0)
					; No overflow possible

;
; second iteration - single precision
;
	
	DIVF3	R0, R1, R2		; R2 = X/Y1
	ADDF2	R2, R0			; R0 = Y1 + X/Y1
	SUBW2	#^X80, R0		; R0 = Y2 = (1/2)(Y1 + X/Y1)

;
; third iteration - double precision
;
	
	CVTHG	R4, R2			; R2/R3 = X
	CVTFG	R0, R0			; R0/R1 = Y2
	DIVG2	R0, R2			; R2 = X/Y2
	ADDG2	R2, R0			; R0 = Y2 + X/Y2
	SUBW2	#^X10, R0		; R0 = Y3 = (1/2)(Y2 + X/Y2)

;
; fourth iteration - quadruple precision
;
	
	CVTGH	R0, R0			; R0/R3 = Y3
	DIVH3	R0, R4, -(SP)		; Stack = X/Y3
	ADDH2	(SP), R0		; R0 = Y3 + X/Y3
	DECW	R0			; R0 = Y4 = (1/2)(Y3 + X/Y3)

;
; fifth iteration - quadruple precision
;
	
	DIVH3	R0, R4, (SP)		; Stack = X/Y4
	ADDH2	(SP), R0		; R0 = Y4 + X/Y4
	DECW	R0			; R0 = Y5 = (1/2)(Y4 + X/Y4)

; scale result by multiplying by scale_factor/2

	DIVW2	#2, R8			; Divide scale factor by 2
	ADDW2	R8, R0			; Scale the result
	ADDL2	#16, SP			; Reset stack pointer
SQRTX:	RSB				; Return with result in R0/R3

; Here if x =< 0

ZERO_NEG:
	BEQL	SQRTX			; Return with result = 0
	PUSHL	(SP)			; Return PC from JSB routine
	MOVZBL	#MTH$K_SQUROONEG, -(SP)	; Condition value
	ASHQ	#15, #1, R0		; R0/R3 = result = reserved operand -0.0
					; R0/R1 goes to signal mechanism vector
					; (CHF$L_MCH_R0/R1) so error handler
					; can modify the result.
	CLRQ	R2			; ...
	CALLS	#2, G^MTH$$SIGNAL	; Signal error and use real user's PC
					; Independent of CALL vs JSB
	RSB				; Return - R0 restored from CHF$L_MCH_R0/R1

	.END
