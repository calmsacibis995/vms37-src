MODULE BAS$CHAIN (				! CHAIN to another program
		IDENT = '1-003'			! File: BASCHAIN.B32 Edit: PLL1003
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  VAX-11 BASIC Miscellaneous
!
! ABSTRACT:
!
!	This module causes the current program to end and another
!	program to be run in its place.
!
! ENVIRONMENT:  VAX-11 User Mode
!
! AUTHOR: John Sauter, CREATION DATE: 13-NOV-1979
!
! MODIFIED BY:
!
! 1-001	- Original.  JBS 15-NOV-1979
! 1-002	- Make the entry point global.  JBS 28-NOV-1979
! 1-003 - CHAIN to a non-existent file should generate an error,
!	  not just return to DCL.  PLL 17-Nov-1981
!--

!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!
!	NONE
!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    BAS$CHAIN : NOVALUE;			! End this program and start another

!
! INCLUDE FILES:
!

REQUIRE 'RTLIN:RTLPSECT';			! Macros for defining PSECTs
LIBRARY 'RTLSTARLE';				
!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! PSECTS:
!
DECLARE_PSECTS (BAS);				! Declare psects for BAS$ facility
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    BAS$$SIGNAL : NOVALUE,			! Signal an error
    BAS$$STOP : NOVALUE,			! Signal a fatal BASIC error
    LIB$RUN_PROGRAM;				! Run a program

!+
! The following are the error codes used in this module.
!-

EXTERNAL LITERAL
    BAS$K_FATSYSIO_ : UNSIGNED (8),		! Fatal system I/O error
    BAS$K_CANFINFIL : UNSIGNED (8),		! Can't find file or account
    BAS$K_NOTIMP : UNSIGNED (8);		! Not implemented


GLOBAL ROUTINE BAS$CHAIN (			! CHAIN to another program
	PGM_NAME, 				! Name of program to be RUN
	LINE_NO					! Line number to start program at
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Stop running this program and start running another.
!
! CALLING SEQUENCE:
!
!	CALL BAS$CHAIN (PGM_NAME.rt.dx, LINE_NO.rl.r)
!
! FORMAL PARAMETERS:
!
!	PGM_NAME.rt.dx	The name of the program to be run in place of this one.
!	LINE_NO.rl.r	The line number to start the program at
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Either signals or never returns to its caller.
!
!--

    BEGIN

    LOCAL
	FAB_BLOCK : $FAB_DECL,
	FAB : REF $FAB_DECL,
	NAM_BLOCK : $NAM_DECL,
	EXP_NAME : BLOCK [NAM$C_MAXRSS, BYTE],
	STATUS;

    BIND
	DEFAULT_NAME = UPLIT ('*.EXE');

    MAP
	PGM_NAME : REF BLOCK [0, BYTE];
	
    BUILTIN
	NULLPARAMETER;

!+
! The line number feature is not implemented, so give an error
! if it is specified.
!-

    IF ( NOT NULLPARAMETER (2)) THEN BAS$$STOP (BAS$K_NOTIMP);

!+
! If the user tries to CHAIN to a non-existent program, this should be
! returned as ERR=5, 'can't find file ...'.  Since LIB$RUN_PROGRAM will
! return to DCL level if an error other than invalid argument occurs,
! try to determine if the file exists before LIB$RUN_PROGRAM is called.
!-

    FAB = FAB_BLOCK;
    $FAB_INIT (FAB = .FAB);
    FAB [FAB$L_FNA] = .PGM_NAME [DSC$A_POINTER];
    FAB [FAB$B_FNS] = .PGM_NAME [DSC$W_LENGTH];
    FAB [FAB$L_DNA] = DEFAULT_NAME;
    FAB [FAB$B_DNS] = 5;

    $NAM_INIT (NAM = NAM_BLOCK);
    NAM_BLOCK [NAM$L_RSA] = NAM_BLOCK [NAM$L_ESA] = EXP_NAME;
    NAM_BLOCK [NAM$B_RSS] = NAM_BLOCK [NAM$B_ESS] = NAM$C_MAXRSS;

    FAB [FAB$L_NAM] = NAM_BLOCK;

!+
! Do not use $OPEN to look for the file because if the protection code
! is execute only, a privilege violation will occur.
!-

    STATUS = $PARSE (FAB = .FAB);
    IF (NOT .STATUS) THEN BAS$$STOP (BAS$K_FATSYSIO_);

    STATUS = $SEARCH (FAB = .FAB);
    SELECTONE .STATUS OF
	SET
	[RMS$_NORMAL]:
	    ;					! file exists
	[RMS$_FNF]:
	    BAS$$SIGNAL (BAS$K_CANFINFIL);	! file not found
	[OTHERWISE]:
	    BAS$$STOP (BAS$K_FATSYSIO_);	! random RMS error
	TES;


    LIB$RUN_PROGRAM (.PGM_NAME);
!+
! LIB$RUN_PROGRAM should never return.  If it does, we have an
! error of some kind.
!-
    BAS$$STOP (BAS$K_NOTIMP);

    END;					! end of BAS$CHAIN

END						! end of module BAS$CHAIN

ELUDOM
