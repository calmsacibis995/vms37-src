	.TITLE	LIB$INITIALIZE		; Library initialization dispatcher 
	.IDENT	/1-004/			; File: LIBINITIA.MAR  Edit: SBL1004

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
; FACILITY: RUN-TIME UTILITY PROCEDURE LIBRARY
;
; ENVIRONMENT:  User mode - not re-entrant.  Called only once 
;		per image activation.
;
;
; ABSTRACT:
;
;	LIB$INITIALIZE is a software architecture procedure
;	which permits any library or user modular procedure to specify an initialization procedure
;	to be called before the main program is called.
;	The initialization procedure can perform any once per-image
;	activation initialization which cannot be performed by the usual
;	compile-time and link-time static data initialization.
;
;--
;
; VERSION: 0
;
; HISTORY:
;
; AUTHOR:
;	Thomas N. Hastings, 6-Aug-77: Version 0
;
; MODIFIED BY:
;
;

	.SBTTL	HISTORY		; Detailed Current Edit History


; Edit History for Version 0
;

; 0-01	- initial version TNH 12-SEP-77
; 0-4	- Declare PSECT LIB$CODE SHR.  TNH 19-Dec-77
; 00-05	- Return after main prog., using OWN storage.  TNH 6-Jan-78.
; 00-08 - Change PSECT to LIB$CODE_NOSHR.  JMT 25-Jan-78
; 00-09	- Declare PSECT GBL.  TNH 10-Jun-78
; 00-10	- .PSECT LIB$DATA NOPIC.  TNH 28-June-78
; 1-001	- Update version number and copyright notice.  JBS 16-NOV-78
; 1-002	- Remove $SFDEF macro - not needed.  JBS 16-DEC-78
; 1-003	- Add "_" to certain PSECT directives.  (Don't change those
;	   documented in release 1.)  JBS 21-DEC-78
; 1-004 - Zero the "Environment Pointer" (R1) before calling
;	  initialization routines.  This insures that routines
;	  written in PASCAL, PL/I, etc. will work correctly.
;	  SBL 7-April-1980

	.SBTTL	DECLARATIONS

;
; INCLUDE FILES:
;
;
; EXTERNAL SYMBOLS:
;
	.DSABL	GBL			; Force .EXTRN declarations for externals
;
; MACROS:
;

;
; PSECT DECLARATIONS:
;
	.PSECT	LIB$INITIALIZDZ NOPIC,USR,CON,REL,GBL,NOSHR,NOEXE,RD,NOWRT,LONG
INIT_TABLE_BEG:				; First entry in table
	.PSECT	LIB$INITIALIZD_ NOPIC,USR,CON,REL,GBL,NOSHR,NOEXE,RD,NOWRT,LONG
					; Contribution from OTS$STARTUP
	.PSECT	LIB$INITIALIZE  NOPIC,USR,CON,REL,GBL,NOSHR,NOEXE,RD,NOWRT,LONG
					; Contributions from rest of library and users
	.PSECT	LIB$INITIALIZE$ NOPIC,USR,CON,REL,GBL,NOSHR,NOEXE,RD,NOWRT,LONG
INIT_TABLE_END:
	.LONG	0			; End of startup list

					; The code for this module
;
; EQUATED SYMBOLS:
;
;
; OWN STORAGE:
;

	.PSECT	_LIB$DATA	PIC,USR,CON,REL,LCL,NOSHR,NOEXE,RD,WRT

DISP_PTR:				; OWN variable containing
	.BLKL	1			; pointer to initialization dispatch table
SAV_START_ADR:				; OWN variable to save original
	.BLKL	1			; value of START_ADR_ADR arg list entry
SAV_AP:	.BLKL	1			; saved value of AP when called
					; needed to find original arg list
					; on co-routine call back.

	.PSECT	_LIB$CODE_NOSHR	PIC,USR,CON,REL,LCL,SHR,EXE,RD,NOWRT

	.SBTTL	LIB$INITIALIZE - Library initialization procedure dispatcher 

;++
; FUNCTIONAL DESCRIPTION:
;
;	LIB$INITIALIZE is a library procedure for initializing
;	library and user procedures at run-time which cannot
;	be done statically at compile-time or link-time.
;	LIB$INITIALIZE is called before the main program
;	if the GLOBAL symbol LIB$INITIALIZE is defined.  User procedures
;	and library procedures need only declare LIB$INITIALIZE
;	as an EXTERNAL (the compiler generates EXTERNAL OTS$LINKAGE
;	which generates the EXTERNAL LIB$INITIALIZE).
;	LIB$INITIALIZE calls every entrypoint contributed to
;	PSECT LIB$INITIALIZE.
;	Note:  this procedure is not re-entrant.  It can only be called
;	once per image activation as currently coded.   If multiple
;	main programs exist in an image, all but the first should be called
;	directly, rather than calling through the image startup list
;	setup by the linker.
;
; CALLING SEQUENCE:
;
;	Status.wlc.v = LIB$INITIALIZE (start_adr_adr.ma.r, cli_co_rout.flc.r, ...)

;
; INPUT PARAMETERS:
;
	START_ADR_ADR = 4		; Adr. of the entry
					; in the image startup vector
					; which is used to perform the call.

;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;
;	The completion code returned from the main program.
;
; SIDE EFFECTS:
;	Violates VAX-11 Procedure Calling standard by modifying arg list entry START_ADR_ADR.
;	Increments it by 4 to point to main program starting address.
;	This violation is acceptable, since LIB$INITIALIZE only called
;	by CLI and debugger.
;--




	.ENTRY	LIB$INITIALIZE, ^M<IV>	; entry point and entry mask
					; enable integer overflow
	MOVL	AP, SAV_AP		; save AP for co-routine restore
	MOVL	START_ADR_ADR(AP), -	; save pointer to startup list in OWN 
		SAV_START_ADR		; storage (SAV_START_ADR)
	MOVAL	B^CO_ROUT, -		; change arg list entry in case
		START_ADR_ADR(AP)	; an initialization procedure is called.
	MOVAL	INIT_TABLE_BEG, -	; initialize OWN storage (DISP_PTR)
		DISP_PTR		; to first address of user/library

;+
; Loop to scan table of user and library initialization procedure
; starting addresses in PSECT LIB$INITIALIZDZ, LIB$INITIALIZD_,
; LIB$INITIALIZE, and LIB$INITIALIZE$
;-

LOOP:	MOVL	@DISP_PTR, R0		; R0 = next user/library initialization
					; procedure address
	BEQL	CALL_MAIN		; zero means end of list
	CLRL	R1			; Clear environment pointer
	CALLG	(AP), (R0)		; call next user/library init proc.
	TSTL	@DISP_PTR		; test if dispatch address is zero
	BEQL	RET			; if yes, this must be return from
					; user initialization proc. which had
					; done co-routine call-back.
					; There fore this is return from main
					; program, so return to caller (of LIB$INITIALIZE or
					; caller or initializtion procedure)
					; may loop thru here for each init proc which co-routined

;+
; Here from co-routine call-back from an initialization routine
;-

DISPATCH_CONT:				; continue dispatching to initialization procedures
	ADDL	#4, DISP_PTR		; step dispatch pointer to next
					; init. proc. address
	BRB	LOOP			; loop

;+
; Here when entire initialization list has been scanned
; Call main program
;-

CALL_MAIN:				; here to call main program
	ADDL3	#4, SAV_START_ADR, -	; Restore initial argument and step
		START_ADR_ADR(AP)	; to next longword in image startup vector.
	MOVL	@START_ADR_ADR(AP), R0	; R0 = next start address (main program)
	CLRL	R1			; Clear environment pointer
	CALLG	(AP), (R0)		; call main program or main procedure
RET:	RET				; R0 = status returned by main program


;+
; Co-routine - may be called by library or user initialization procedure.
; Set AP to value it had when LIB$INITIALIZE originally called.
; This lets LIB$INITIALIZE re-use the same argument list 
;-

CO_ROUT:
	.WORD	^M<IV>			; no registers used.
	MOVL	SAV_AP, AP		; restore AP to original arg list
					; when LIB$INITIALIZE was called.
	BRB	DISPATCH_CONT		; go continue dispatch loop

	.END				; End of module LIB$INITIALIZE

