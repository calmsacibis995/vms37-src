MODULE FOR$$FMTCP (				! FORTRAN OBJECT TIME FORMAT COMPILER
		IDENT = '2-005'			! File: FORFMTCP.B32  Edit: SBL2005
		) =
BEGIN
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY: FORTRAN SUPPORT LIBRARY
!
! ABSTRACT:
!
!	This module is the run-time FORTRAN format compiler, FOR$$FMT_COMPIL.
!	It translates a format into the same form that the FORTRAN
!	compiler does.  This module is adapted from the equivalent
!	compiler module, therefore changes in this module should be
!	evaluated to see if the compiler should be changed, and vice versa.
!
! ENVIRONMENT: User access mode; AST re-entrant
!
! AUTHOR: Peter Yuo, CREATION DATE: 07-June-77
!
! MODIFIED BY:
!
!	  Joel Clinkenbeard (FORTRAN IV-PLUS)
!	  Steven B. Lionel (Run-Time Library)
!	  Version 2  15-May-1979
!
! EDIT HISTORY:
!
! 2-001 - Update to level of Version 2.0 FORTRAN compiler, including
!	  FORTRAN-77 format codes.  SBL 15-May-1979
! 2-002 - X is now the same as TR.  SBL 2-Aug-1979
! 2-003	- Eliminate an extraneous RETURN expression.  JBS 06-SEP-1979
! 2-004 - Allow sequences such as ",,", ",)" without error.  SBL 18-Dec-1979
! 2-005 - Allow null characters in quoted literals and Hollerith literals.
!	  SPR 11-44210 SBL 1-March-1982
!--

!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!

LINKAGE
    CALL_G3 = CALL : GLOBAL (SAVVAL = 11, SAVTYP = 10, PTR = 9);

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    FOR$$FMT_COMPIL : NOVALUE,
    REDUCE : NOVALUE CALL_G3,
    DEFER : NOVALUE CALL_G3,
    UNDEFER : NOVALUE CALL_G3,
    NZERO : NOVALUE CALL_G3,
    NSAVE : NOVALUE CALL_G3,
    PUTBYT : NOVALUE CALL_G3,
    BYTSIZ;

!
! INCLUDE FILES:
!

REQUIRE 'RTLML:FORERR';				! FORTRAN error number definitions

REQUIRE 'RTLIN:OTSMAC';				! macros

REQUIRE 'RTLIN:RTLPSECT';			! Define DELCARE_PSECTS macro

!
! MACROS:
!

MACRO
    ERROR (ERR_SYM) =
	(FOR$$SIGNAL_STO (FOR$K_SYNERRFOR);
	RETURN (0)) %,
    EXT_REG =
	EXTERNAL REGISTER
	    SAVVAL: REF VECTOR[,LONG],
	    SAVTYP: REF VECTOR[,LONG],
	    PTR: REF VECTOR[,LONG] %,
    GC =
 
	CH$RCHAR_A (FORMAT_PTR) %,
    GNB =
 
	BEGIN
	FORMAT_PTR = CH$FIND_NOT_CH (K_MAX_LENGTH, .FORMAT_PTR, %C' ') ;
	IF CH$FAIL (.FORMAT_PTR)
	THEN
	    ERROR (ERRFMTCHAR);
	BEGIN
	LOCAL
	    C;
	C = CH$RCHAR_A (FORMAT_PTR);
	IF (.C GEQU %C'a') AND (.C LEQU %C'z')
	THEN
	    .C - (%C'a' - %C'A')
	ELSE
	    .C
	END
	END %;

!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    FOR$$GET_VM,				! Get dynamic virtual memory
    FOR$$FREE_VM : NOVALUE,			! Free dynamic virtual memory
    FOR$$SIGNAL_STO : NOVALUE;			! signal-stop FOR$_abcmnoxyz, given

						! (short) Fortran error number (FOR$K_abcmnoxyz)
						! as a parameter
!
! PSECT DECLARATIONS:
!
DECLARE_PSECTS (FOR);				! declare PSECTs for FOR$ facility
!
! OWN STORAGE:
!
!	NONE
!
! EQUATED SYMBOLS:
!

LITERAL
    TRUE = 1,
    K_FMT_BUF_INIT = 256,			! initial length (bytes) of format buffer
    K_MAX_LENGTH = 65535,			! max. length of input character array

    !+
    ! Define offsets into LOCAL VECTOR pointed to by GLOBAL register PTR
    !-

    L_FDEFER = 0,				! format code for deffered item
    L_FCOUNT = 1,				! count of W, D, for deferred item
    L_PHASE = 2,				! index to SAVVAL and SAVTYP
    L_NEST = 3,					! parenthesis nest level
    L_SIGN = 4,					! non-zero if minus sign seen
    L_NVAL = 5,					! value of numberic item
    L_TYPE = 6,					! type of numeric item
    L_NCHAR = 7,				! character index within FMT_BUF
    A_FMT_BUF_BEG = 8,				! pointer to beginning of compiled output
    L_CPRIME = 9,				! previous character
    L_FMT_BUF_SIZ = 10,			! current size (bytes) of dynamically allocated format buffer

    !+
    ! Define size constants for the LOCAL structures
    !-

    K_PTR_SIZ = 11,				! No. of local variables pointed to by PTR
    K_SAVVAL_SIZ = 4,				! No. of longwords in SAVVAL
    K_SAVTYP_SIZ = 4,				! No. of longwords in SAVTYP
    K_PTR_OFFSET = K_SAVVAL_SIZ + K_SAVTYP_SIZ,	! Offset into local storage
    						! of PTR
    K_LOCAL_SIZ = K_PTR_OFFSET + K_PTR_SIZ;	! Total size of LOCAL storage (longwords)

BIND
    ! CHARACTER CLASS TABLE
    !
    K_CLASS_TAB_MAX = 132,			! MAX. LEGAL CHARACTER (OUTSIDE OF STRING CONSTANT)
    CLASS = UPLIT BYTE(
	     1,  0,  0,  0,  0,  0,  0,  0,	! 000
	     0,  0,  0,  0,  0,  0,  0,  0,	! 010
	     0,  0,  0,  0,  0,  0,  0,  0,	! 020
	     0,  0,  0,  0,  0,  0,  0,  0,	! 030
	     0,  0,  0,  0,  9,  0,  0, 13,	! 040
	     6,  7,  0,  3, 11,  2, 12,  8,	! 050
	     5,  5,  5,  5,  5,  5,  5,  5,	! 060
	     5,  5, 10,  0,  4,  0,  0,  0,	! 070
	     0, 14, 15,  0, 16, 17, 18, 19,	! 100
	    20, 21,  0,  0, 22,  0,  0, 23,	! 110
	    24, 25,  0, 26, 27,  0,  0,  0,	! 120
	28, 0, 29) : VECTOR [, BYTE];		! 130

BIND
    ! FORMAT CODES
    !
    TOPLVL = 1,					! Format reversion point
    LPAREN = 2,					! Left parenthesis
    RPAREN = 3,					! Right parenthesis
    ENDFMT = 4,					! End of format
    SLASH = 5,					! Slash
    DOLLAR = 6,					! Dollar sign
    COLON = 7,					! Colon
    SCODE = 9,					! S
    SPCODE = 10,				! SP
    SSCODE = 11,				! SS
    PCODE = 12,					! P
    TCODE = 13,					! T
    XCODE = 14,					! X
    HCODE = 15,					! H or quote
    BNCODE = 16,				! BN
    BZCODE = 17,				! BZ
    TLCODE = 18,				! TL
    TRCODE = 19,				! TR
    QCODE = 20,					! Q
    ACODE = 21,					! A
    LCODE = 22,					! L
    OCODE = 23,					! O
    ICODE = 24,					! I
    ZCODE = 25,					! Z
    FCODE = 30,					! F
    ECODE = 31,					! E
    GCODE = 32,					! G
    DCODE = 33,					! D
    IOZOFFSET = 3,				! Offset for Iw.m,Ow.m,Zw.m
    EGOFFSET = 3,				! Offset for E,G with Ee exponent
    OFFSET = 20;				! Offset to default A...D codes


GLOBAL ROUTINE FOR$$FMT_COMPIL (		! RUN-TIME FORMAT COMPILER
	FORMAT, 				! Address of the source format statement
	ALLOCATED_LEN, 				! Length of the encoded format
	ALLOCATED_ADR				! Address of the encoded format
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Process the format statement.  If there is any illegal
!	character encounted, calls error routine and return.
!	Otherwise, it will process each format code one at a time
!	and output compiled encoding whenever all the information
!	has been gathered.
!
! FORMAL PARAMETERS:
!
!	FORMAT.rbu.ra		Address of the source format statment text
!	ALLOCATED_LEN.ww.r	Address of a word containing the length of the
!				compiled format encoding fori the source
!				format statement
!	ALLOCATED_ADR.wa.r	Address of a longword containing the
!				address of the compiled format encoding for
!				the source format statement
!
! IMPLICIT INPUTS:
!
!	NONE
!
!
! IMPLICIT OUTPUTS:
!
!	FMTDAT array
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	SIGNAL_STOPs FOR$SYNERRFOR (62="SYNTAX ERROR IN FORMAT")
!
!--

    BEGIN

    MAP
	ALLOCATED_LEN : REF VECTOR [1, WORD],
	ALLOCATED_ADR : REF VECTOR [1, LONG];

    GLOBAL REGISTER
	SAVVAL = 11 : REF VECTOR [K_SAVVAL_SIZ],	! pointer to value N, W, D
	SAVTYP = 10 : REF VECTOR [K_SAVTYP_SIZ],	! pointer to type of N, W, D
	PTR = 9 : REF VECTOR [K_PTR_SIZ];	! pointer to rest of LOCAL array

    LOCAL
	CHAR,					! LAST CHARACTER FROM SOURCE
	FORMAT_PTR,				! Address of last character from source
	FMTDAT : VECTOR [K_LOCAL_SIZ];		! impure data for format processing

!+
! Bind names to LOCAL storage for this routine only.  Calls to other routines
! access these locations using .PTR[L_name].
!-

    BIND
	FDEFER = FMTDAT [K_PTR_OFFSET + L_FDEFER],	! FORMAT CODE FOR DEFERRED ITEM
	FCOUNT = FMTDAT [K_PTR_OFFSET + L_FCOUNT],	! COUNT OF W, D FOR DEFERRED ITEM
	PHASE = FMTDAT [K_PTR_OFFSET + L_PHASE],	! INDEX TO SAVVAL AND SAVTYP
	NEST = FMTDAT [K_PTR_OFFSET + L_NEST],	! PARENTHESIS NEST LEVEL
	SIGN = FMTDAT [K_PTR_OFFSET + L_SIGN],	! -1 if neg, 1 if pos, 0 if no sign
	NVAL = FMTDAT [K_PTR_OFFSET + L_NVAL],	! VALUE OF NUMERIC ITEM
	TYPE = FMTDAT [K_PTR_OFFSET + L_TYPE],	! TYPE OF NUMERIC ITEM
	! -1 = VARIABLE FORMAT EXPRESSION
	!  0 = NOT PRESENT
	! +1 = CONSTANT
	NCHAR = FMTDAT [K_PTR_OFFSET + L_NCHAR],	! CHARACTER INDEX WITHIN FMT_BUF
	FMT_BUF_BEG = FMTDAT [K_PTR_OFFSET + A_FMT_BUF_BEG],
						! POINTER TO BEGINING OF COMPILED OUTPUT FORMAT BUFFER
	CPRIME = FMTDAT [K_PTR_OFFSET + L_CPRIME],	! PREVIOUS CHARACTER
	FMT_BUF_SIZ = FMTDAT [K_PTR_OFFSET + L_FMT_BUF_SIZ];

						! CURRENT ALLOCATION FOR DYNAMICALLY ALLOCATED FORMAT BUFFER

    !+
    ! Setup GLOBAL registers to be passed to other routines
    !-

    SAVVAL = FMTDAT [0];			! Set pointer to value of N, W, D parameters
    SAVTYP = FMTDAT [K_SAVVAL_SIZ];		! Set pointer to type of N, W, D parameters
    PTR = FMTDAT [K_PTR_OFFSET];		! Set pointer to remainder of local storage
    ! ACTUALLY PROCESS THE FORMAT SPECIFICATION
    ! Clear LOCAL storage, and allocate initial format buffer
    !
    FILL_VAL (0, K_LOCAL_SIZ, FMTDAT);
    FMT_BUF_BEG = FOR$$GET_VM (K_FMT_BUF_INIT);
    FMT_BUF_SIZ = K_FMT_BUF_INIT;
    CPRIME = '(';
    FORMAT_PTR = CH$PTR (.FORMAT);
    FORMAT_PTR = CH$FIND_NOT_CH (K_MAX_LENGTH, .FORMAT_PTR, %C' ');

    IF CH$FAIL (.FORMAT_PTR) OR CH$RCHAR_A (FORMAT_PTR) NEQ %C'('
    THEN
	ERROR (ERRMISSDLM)
    ELSE
	BEGIN

	WHILE 1 DO
	    BEGIN
	    CHAR = GNB;				! Get next non-blank

	    IF .CHAR GTRU K_CLASS_TAB_MAX THEN ERROR (ERRFMTCHAR);

	    CASE .CLASS [.CHAR] FROM 0 TO 29 OF
		SET

		[0] :
		    ! 0 - INVALID CHARACTER
		    !
		    ERROR (ERRFMTCHAR);

		[1] :
		    ! 1 - NULL CHARACTER
		    !
		    ERROR (ERRFMTRPAR);

		[2] :
		    ! 2 - MINUS SIGN
		    !
		    BEGIN

		    IF .SIGN NEQ 0 OR .TYPE NEQ 0 THEN ERROR (ERRFMTCHAR);

		    SIGN = -1;
		    END;

		[3] :
		    ! 3 - PLUS SIGN
		    !
		    BEGIN

		    IF .SIGN NEQ 0 OR .TYPE NEQ 0 THEN ERROR (ERRFMTCHAR);

		    SIGN = 1;
		    END;

		[4] :
		    ! 4 - LEFT ANGLE BRACKET
		    !
		    ERROR (ERRFMTCHAR);

		[5] :
		    ! 5 - DIGIT
		    !
		    BEGIN
		    TYPE = 1;
		    NVAL = .NVAL*10 + .CHAR - '0';
		    END;

		[6] :
		    ! 6 - LEFT PARENTHESIS
		    !
		    BEGIN
		    NZERO ();
		    NSAVE ();

		    IF .NEST EQL 0 THEN PUTBYT (TOPLVL);

		    IF (NEST = .NEST + 1) GTR 8 THEN ERROR (ERRFMTNEST);

		    REDUCE (LPAREN);
		    END;

		[7] :
		    ! 7 - RIGHT PARENTHESIS
		    !
		    BEGIN

		    !+
		    ! When the VAX-11 FORTRAN compiler sees the sequence ",)",
		    ! it issues a warning message and otherwise ignores the
		    ! extra delimiter.  A deliberate decision was made for
		    ! release 2 to ignore this occurrence entirely in the
		    ! run-time format compiler.
		    !-
!		    IF .CPRIME EQL ',' THEN ERROR (ERRFMXTCOM);

		    UNDEFER ();

		    IF (NEST = .NEST - 1) LSS 0 THEN EXITLOOP;

		    PUTBYT (RPAREN);
		    END;

		[8] :
		    ! 8 - SLASH
		    !
		    BEGIN
		    UNDEFER ();
		    PUTBYT (SLASH);
		    END;

		[9] :
		    ! 9 - DOLLAR SIGN
		    !
		    BEGIN
		    UNDEFER ();
		    PUTBYT (DOLLAR);
		    END;

		[10] :
		    ! 10 - COLON
		    !
		    BEGIN
		    UNDEFER ();
		    PUTBYT (COLON);
		    END;

		[11] :
		    ! 11 - COMMA
		    !
		    BEGIN

		    !+
		    ! The sequence ",," or "(," is ignored here.  See comment
		    ! under RIGHT PARENTHESIS.
		    !-
!		    IF .CPRIME EQL ',' OR .CPRIME EQL '(' THEN ERROR (ERRFMXTCOM);

		    UNDEFER ();
		    END;

		[12] :
		    ! 12 - DECIMAL POINT
		    !
		    BEGIN

		    IF .TYPE EQL 0 THEN ERROR (ERRFMTNUMB);

		    IF .SIGN NEQ 0 THEN ERROR (ERRFMTRNGE);

		    IF .FCOUNT LSS 2 OR .PHASE NEQ 1 THEN ERROR (ERRFMTCHAR);

		    NSAVE ();
		    END;

		[13] :
		    ! 13 - QUOTE
		    !
		    BEGIN

		    LOCAL
			P;

		    UNDEFER ();
		    P = .FORMAT_PTR;

		    DO
			BEGIN

			DO
			    BEGIN
			    CHAR = GC;		! Get next character
			    NVAL = .NVAL + 1;
			    END
			WHILE .CHAR NEQ '''';

			CHAR = GC;
			END
		    WHILE .CHAR EQL '''';

		    FORMAT_PTR = .P;

		    IF (NVAL = P = .NVAL - 1) EQL 0 THEN ERROR (ERRZLSTR);

		    TYPE = 1;
		    PHASE = 1;
		    NSAVE ();
		    REDUCE (HCODE);

		    DECR I FROM .P TO 1 DO
			BEGIN

			IF (CHAR = GC) EQL '''' THEN GC;

			PUTBYT (.CHAR);
			END;

		    CHAR = GC;
		    END;

		[14] :
		    ! 14 - LETTER A
		    !
		    DEFER (ACODE, 1);

		[15] :
		    ! 15 - Letter B
		    !
		    BEGIN
		    UNDEFER ();

		    SELECTONE (CHAR = GNB) OF
			SET

			['N'] :
			    PUTBYT (BNCODE);

			['Z'] :
			    PUTBYT (BZCODE);

			[OTHERWISE] :
			    BEGIN
			    ERROR (ERRFMTCHAR);
			    END;
			TES;

		    END;

		[16] :
		    ! 16 - LETTER D
		    !
		    DEFER (DCODE, 2);

		[17] :
		    ! 17 - LETTER E
		    !

		    !+
		    ! If the third parameter of an edit type that allows four
		    ! parameters has been seen, then E is an exponent marker,
		    ! otherwise an edit specifier.
		    !-

		    IF .PHASE EQL 2 AND .FCOUNT EQL 3 THEN NSAVE () ELSE DEFER (ECODE, 3);

		[18] :
		    ! 18 - LETTER F
		    !
		    DEFER (FCODE, 2);

		[19] :
		    ! 19 - LETTER G
		    !
		    DEFER (GCODE, 3);

		[20] :
		    ! 20 - LETTER H
		    !
		    BEGIN

		    LOCAL
			P;

		    NZERO ();

		    IF .TYPE LSS 0 THEN ERROR (ERRFMTCHAR);

		    IF .TYPE EQL 0 THEN (NVAL = 1; TYPE = 1);

		    IF (P = .NVAL) EQL 0 THEN ERROR (ERRZLSTR);

		    PHASE = 1;
		    NSAVE ();
		    REDUCE (HCODE);

		    DECR I FROM .P TO 1 DO
			BEGIN

			CHAR = GC;

			PUTBYT (.CHAR);
			END;

		    CHAR = 0;
		    END;

		[21] :
		    ! 21 - LETTER I
		    !
		    DEFER (ICODE, 2);

		[22] :
		    ! 22 - LETTER L
		    !
		    DEFER (LCODE, 1);

		[23] :
		    ! 23 - LETTER O
		    !
		    DEFER (OCODE, 2);

		[24] :
		    ! 24 - LETTER P
		    !
		    BEGIN
		    NZERO ();

		    IF .TYPE EQL 0
		    THEN
			BEGIN

			IF .SIGN NEQ 0 THEN ERROR (ERRFMTNUMB);

			END;

		    IF .SIGN LSS 0 THEN NVAL = -.NVAL;

		    SIGN = 0;
		    PHASE = 1;
		    NSAVE ();
		    REDUCE (PCODE);
		    END;

		[25] :
		    ! 25 - LETTER Q
		    !
		    BEGIN
		    UNDEFER ();
		    PUTBYT (QCODE);
		    END;

		[26] :
		    ! 26 - Letter S
		    !
		    BEGIN
		    UNDEFER ();

		    SELECTONE (CHAR = GNB) OF
			SET

			['P'] :
			    PUTBYT (SPCODE);

			['S'] :
			    PUTBYT (SSCODE);

			[OTHERWISE] :
			    BEGIN
			    PUTBYT (SCODE);
			    FORMAT_PTR = .FORMAT_PTR - 1;
			    CHAR = 'S';
			    END;
			TES;

		    END;

		[27] :
		    ! 27 - LETTER T
		    !
		    BEGIN
		    UNDEFER ();

		    SELECTONE (CHAR = GNB) OF
			SET

			['L'] :
			    DEFER (TLCODE, 1);

			['R'] :
			    DEFER (TRCODE, 1);

			[OTHERWISE] :
			    BEGIN
			    DEFER (TCODE, 1);
			    FORMAT_PTR = .FORMAT_PTR - 1;
			    CHAR = 'T';
			    END;
			TES;

		    END;

		[28] :
		    ! 28 - LETTER X
		    !
		    BEGIN
		    NZERO ();

		    IF .TYPE EQL 0
		    THEN
			BEGIN
			TYPE = 1;
			NVAL = 1;
			END;

		    PHASE = 1;
		    NSAVE ();
		    REDUCE (TRCODE);		! X is same as TR
		    				! Old X is no longer used.
		    END;

		[29] :
		    ! 29 - LETTER Z
		    !
		    DEFER (ZCODE, 2)
		TES;

	    CPRIME = .CHAR;
	    END;

	!+
	! Put end of format code.
	! Then return size and location of format buffer.
	!-

	PUTBYT (ENDFMT);
	ALLOCATED_LEN [0] = .FMT_BUF_SIZ;
	ALLOCATED_ADR [0] = .FMT_BUF_BEG;
	END;

    END;


ROUTINE REDUCE (C) : CALL_G3 NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Output the compiled text corresponding to the format item
!	just scanned
!
! FORMAL PARAMETERS:
!
!	C	- format code
!
! IMPLICIT INPUTS:
!
!	FMTDAT array
!
!
! IMPLICIT OUTPUTS:
!
!	Compiled text output through argument
!	Reinitialization for another format item (per format code related
!	FMTDAT array updated)
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	SIGNAL_STOPs FOR$SYNERRFOR (62="SYNTAX ERROR IN FORMAT")
!
!--

    BEGIN
    EXT_REG;					! Declare external registers

    MACRO
	ALLBITS =
0,0,32,0%,					! WHOLE WORD
	RSBITS =
0,0,2,0%,					! REP COUNT SIZE
	SBIT =
0,2,1,0%,					! W FIELD SIZE
	XBIT =
0,7,1,0%;					! REPETITION COUNT EXISTS

    MACRO
	! Macro to pack flags for table FMT_PRM_LIMITS
	!
	FLAGBITS (F0, F1, F2, F3, F4, F5, F6, F7) =
	
	    (F0) OR (F1)^1 OR (F2)^2 OR (F3)^3 OR
	    (F4)^4 OR (F5)^5 OR (F6)^6 OR (F7)^7 %,
	! Field definitions for table FMT_PRM_LIMITS
	!
	FDFLTOK =
0,1,0%,						! Allows defaults if no parameters follow
	FMIN2 =
1,1,0%,						! Does not allow W without D
	F1OR2 =
2,1,0%,						! Allows W or W.M
	F2OR3 =
3,1,0%,						! Allows E type exponent
	F1EXACT =
4,1,0%,						! Must have exactly one parameter
! Macro to allow abbreviated reference to table FMT_PRM_LIMITS
	!
	FMT_CHECK (P0, S0, E0) =
	    .FMT_PRM_LIMITS[.C - TCODE, (P0), (S0), (E0)] %;

    BIND
	! Table of default options for parameters after a format edit
	! specifier.  Each row corresponds to an edit type.
	! The bits are defined above.  Edit specifiers not in the table
	! (S, SS, SP, P, '(' ) do not allow following parameters.
	!
	FMT_PRM_LIMITS = UPLIT BYTE(
	    FLAGBITS(0,  0,  0,  0,  1,  0,  0,  0),	! TCODE
	    FLAGBITS(0,  0,  0,  0,  0,  0,  0,  0),	! XCODE
	    FLAGBITS(0,  0,  0,  0,  0,  0,  0,  0),	! HCODE
	    FLAGBITS(0,  0,  0,  0,  0,  0,  0,  0),	! BNCODE
	    FLAGBITS(0,  0,  0,  0,  0,  0,  0,  0),	! BZCODE
	    FLAGBITS(0,  0,  0,  0,  1,  0,  0,  0),	! TLCODE
	    FLAGBITS(0,  0,  0,  0,  1,  0,  0,  0),	! TRCODE
	    FLAGBITS(0,  0,  0,  0,  0,  0,  0,  0),	! QCODE
	    FLAGBITS(1,  0,  0,  0,  0,  0,  0,  0),	! ACODE
	    FLAGBITS(1,  0,  0,  0,  0,  0,  0,  0),	! LCODE
	    FLAGBITS(1,  0,  1,  0,  0,  0,  0,  0),	! OCODE
	    FLAGBITS(1,  0,  1,  0,  0,  0,  0,  0),	! ICODE
	    FLAGBITS(1,  0,  1,  0,  0,  0,  0,  0),	! ZCODE
	    FLAGBITS(0,  0,  0,  0,  0,  0,  0,  0),	! --
	    FLAGBITS(0,  0,  0,  0,  0,  0,  0,  0),	! --
	    FLAGBITS(0,  0,  0,  0,  0,  0,  0,  0),	! --
	    FLAGBITS(0,  0,  0,  0,  0,  0,  0,  0),	! --
	    FLAGBITS(1,  1,  0,  0,  0,  0,  0,  0),	! FCODE
	    FLAGBITS(1,  1,  0,  1,  0,  0,  0,  0),	! ECODE
	    FLAGBITS(1,  1,  0,  1,  0,  0,  0,  0),	! GCODE
	    FLAGBITS(1,  1,  0,  1,  0,  0,  0,  0)	! DCODE
	    ) : BLOCK [, BYTE];

    LOCAL
	FC : BLOCK [1],				! Format code with modifications
	VFEM : BLOCK [1],			! VFE mask byte
	VFEB;					! Mask bit to or in to VFEM

    ! If C is zero, there is nothing to reduce
    !

    IF (FC = .C) NEQ 0
    THEN
	BEGIN
	! Check whether this is a code which might have to be adjusted for
	! a variable number of parameters
	!

	IF .C GEQ TCODE
	THEN
	    BEGIN
	    ! The following block-IF checks for parameter consistency and calculates
	    ! the correct format code for formats which allow variable numbers of
	    ! parameters.
	    !

	    IF .SAVTYP [1] EQL 0
	    THEN
	    ! No parameters are present.  If allowed, adjust format codes to
	    ! indicate that defaults are being taken; otherwise, error.
	    !
		BEGIN

		IF FMT_CHECK (FDFLTOK)
		THEN
		    BEGIN
		    FC = .FC + OFFSET;
		    SAVTYP [2] = SAVTYP [3] = 0;
		    END
		ELSE

		    IF FMT_CHECK (F1EXACT) THEN ERROR (ERRFMTNUMB)

		END
	    ELSE

		IF .SAVTYP [2] EQL 0
		THEN
		! W field with no D field.  This is an error for floating point
		! edit types
		!
		    BEGIN

		    IF FMT_CHECK (FMIN2)
		    THEN
			BEGIN
			ERROR (ERRFMTNUMB);
			END

		    END
		ELSE

		    IF .SAVTYP [3] EQL 0
		    THEN
		    ! W and D present, but not E.  Check if this is W.M type and
		    ! adjust format code if so.
		    !
			BEGIN

			IF FMT_CHECK (F1OR2) THEN FC = .FC + IOZOFFSET

			END
		    ELSE
		    ! W,D,E present.  If allowed, adjust format code, otherwise error.
		    !

			IF FMT_CHECK (F2OR3) THEN FC = .FC + EGOFFSET;

	    END;

	IF .C EQL HCODE AND (.SAVVAL [1] LSS 0 OR .SAVTYP [1] LEQ 0) THEN ERROR (ERRHOLLCNT);

	! Compute the VFE-mask
	!
	VFEM [ALLBITS] = 0;
	! Compute S and RS fields
	!
	! If rep count is absent (SAVTYP[0] = 0), is a VFE, or is 1, then
	! RSBIT = 0; otherwise it is the number of bytes necessary to
	! represent the repetition count.
	!

	IF .SAVTYP [0] LEQ 0 OR .SAVVAL [0] EQL 1
	THEN
	    VFEM [RSBITS] = 0
	ELSE
	    VFEM [RSBITS] = BYTSIZ (.SAVVAL [0]);

	IF .C NEQ PCODE AND .SAVTYP [1] NEQ -1
	THEN
	    VFEM [SBIT] = BYTSIZ (.SAVVAL [1]) - 1
	ELSE
	    VFEM [SBIT] = 0;

	VFEB = %O'200';

	INCR I FROM 0 TO 3 DO
	    BEGIN

	    IF .SAVTYP [.I] LSS 0 THEN VFEM = .VFEM OR .VFEB;

	    VFEB = .VFEB^(-1);
	    END;

	IF .VFEM [ALLBITS] NEQ 0 THEN FC [XBIT] = TRUE;

	! Output the code
	! Also, check range of constant parameters
	!
	PUTBYT (.FC);

	IF .VFEM [ALLBITS] NEQ 0 THEN PUTBYT (.VFEM [ALLBITS]);

	INCR I FROM 0 TO 3 DO

	    CASE .SAVTYP [.I] FROM -1 TO 1 OF
		SET
		! Case -1  Variable format expression
		!

		[-1] :
		    ERROR (ERRFMTCHAR);
		! Case 0   Not present
		!

		[0] :
		    0;
		! Case +1  Constant
		!

		[1] :
		    BEGIN

		    CASE .I FROM 0 TO 3 OF
			SET
			! 0 - Repetition factor
			!

			[0] :
			    BEGIN

			    IF .SAVVAL [0] LEQ 0 THEN ERROR (ERRFMTRNGE);

			    IF .SAVVAL [0] NEQ 1
			    THEN
				BEGIN
				PUTBYT (.SAVVAL [0]);

				IF .VFEM [RSBITS] EQL 2 THEN PUTBYT (.SAVVAL [0]/256);

				END;

			    END;
			! 1 - Width or scaling factor
			!

			[1] :
			    BEGIN

			    IF .C EQL PCODE
			    THEN

				IF .SAVVAL [1] LSS -128 OR .SAVVAL [1] GTR 127
				THEN
				    ERROR (ERRFMTRNGE)
				ELSE
				    0

			    ELSE

				IF .SAVVAL [1] LEQ 0 THEN ERROR (ERRFMTRNGE);

			    PUTBYT (.SAVVAL [1]);

			    IF .VFEM [SBIT] NEQ 0 THEN PUTBYT (.SAVVAL [1]/256);

			    END;
			! 2 - Decimal field width
			!

			[2] :
			    BEGIN

			    IF .SAVVAL [2] LSS 0 OR .SAVVAL [2] GTR 255 THEN ERROR (ERRFMTRNGE);

			    PUTBYT (.SAVVAL [2]);
			    END;
			! 3 - Exponent field
			!

			[3] :
			    BEGIN

			    IF .SAVVAL [3] LSS 0 OR .SAVVAL [3] GTR 255 THEN ERROR (ERRFMTRNGE);

			    PUTBYT (.SAVVAL [3]);
			    END;
			TES;

		    END
		TES;

	END;

    CH$FILL (0, %UPVAL*(K_PTR_OFFSET + L_NEST), SAVVAL [0]);	! Zero to but not including NEST
    END;

ROUTINE DEFER (C, N) : CALL_G3 NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Cuase the reduction of the current format item to be deferred
!	until the W.D portion has been read
!
! FORMAL PARAMETERS:
!
!	C	- format code
!	N	- number of parameters to follow (1 or 2)
!
! IMPLICIT INPUTS:
!
!	FMTDAT array
!
!
! IMPLICIT OUTPUTS:
!
!	repetition count, if any, saved in FMTDAT
!	format code and parameter count saved also in FMTDAT
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	SIGNAL_STOPs FOR$SYNERRFOR (62="SYNTAX ERROR IN FORMAT")
!
!--

    BEGIN
    EXT_REG;					! Declare external registers
    NZERO ();
    NSAVE ();
    PTR [L_FDEFER] = .C;
    PTR [L_FCOUNT] = .N;
    END;

ROUTINE UNDEFER : CALL_G3 NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Complete the reduction of a format item which was deferred
!
! FORMAL PARAMETERS:
!
!
! IMPLICIT INPUTS:
!
!	FMTDAT array
!
! IMPLICIT OUTPUTS:
!
!	FMTDAT array
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	SIGNAL_STOPs FOR$SYNERRFOR (62="SYNTAX ERROR IN FORMAT")
!
!--

    BEGIN
    EXT_REG;					! Declare external registers

    IF .PTR [L_FDEFER] NEQ 0
    THEN
	BEGIN
	NSAVE ();
	REDUCE (.PTR [L_FDEFER]);
	END
    ELSE
	BEGIN

	IF .PTR [L_TYPE] NEQ 0 THEN ERROR (ERRFMXTNUM);

	IF .PTR [L_SIGN] NEQ 0 THEN ERROR (ERRFMTCHAR);

	PTR [L_NVAL] = 0;
	PTR [L_TYPE] = 0;
	PTR [L_SIGN] = 0;
	END;

    END;

ROUTINE NZERO : CALL_G3 NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Check context for a format item with has an optional leading
!	number field. If there is a deferred item, then a separator is
!	required, and we have an ambiguous case.  The leading numeric
!	will be attached to the preceding format item.
!
! FORMAL PARAMETERS:
!
!	None
!
! IMPLICIT INPUTS:
!
!	FMTDAT array
!
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	SIGNAL_STOPs FOR$SYNERRFOR (62="SYNTAX ERROR IN FORMAT")
!
!--

    BEGIN
    EXT_REG;					! Declare external registers

    IF .PTR [L_FDEFER] NEQ 0 THEN ERROR (ERRFMTSEPR);

    END;

ROUTINE NSAVE : CALL_G3 NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Save the values of PTR[L_NVAL] and PTR[L_TYPE] in SAVTYP and SAVVAL
!
! FORMAL PARAMETERS:
!
!	None
!
! IMPLICIT INPUTS:
!
!	PTR[L_NVAL]	- value of a  numeric term
!	PTR[L_TYPE]	- PTR[L_TYPE] of the numeric term
!	PTR[L_SIGN]	- indicator if a minus PTR[L_SIGN] has been encounted
!	PTR[L_PHASE]	- indicator of what the PTR[L_NVAL] and PTR[L_TYPE] associate
!		  to repetition count, W or D.
!
! IMPLICIT OUTPUTS:
!
!	FMTDAT array
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	SIGNAL_STOPs FOR$SYNERRFOR (62="SYNTAX ERROR IN FORMAT")
!
!--

    BEGIN
    EXT_REG;					! Declare external registers

    IF .PTR [L_SIGN] NEQ 0 THEN ERROR (ERRFMTPTR [L_SIGN]);

    SAVVAL [.PTR [L_PHASE]] = .PTR [L_NVAL];
    SAVTYP [.PTR [L_PHASE]] = .PTR [L_TYPE];
    PTR [L_PHASE] = .PTR [L_PHASE] + 1;
    PTR [L_SIGN] = 0;
    PTR [L_NVAL] = 0;
    PTR [L_TYPE] = 0;
    END;

ROUTINE PUTBYT (V) : CALL_G3 NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Output a byte through argument
!
! FORMAL PARAMETERS:
!
!	V	- vaule to be output
!
! IMPLICIT INPUTS:
!
!	FMTDAT array
!
! IMPLICIT OUTPUTS:
!
!	FMTDAT array
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	SIGNAL_STOPs FOR$SYNERRFOR (62="SYNTAX ERROR IN FORMAT")
!
!--

    BEGIN

    LOCAL
	A_OLD_BUF_BEG;				! Place to save old format buffer address

    EXT_REG;					! Declare external registers

    !+
    ! Check if room in currently allocated format buffer.
    ! If not allocate twice as much and copy old format buffer,
    ! then deallocate old format buffer.
    !-

    IF .PTR [L_NCHAR] GEQ .PTR [L_FMT_BUF_SIZ]
    THEN
	BEGIN
	A_OLD_BUF_BEG = .PTR [A_FMT_BUF_BEG];

	IF .PTR [L_FMT_BUF_SIZ] GEQ 32768 THEN ERROR ();

	PTR [A_FMT_BUF_BEG] = FOR$$GET_VM (.PTR [L_FMT_BUF_SIZ]*2);
	CH$MOVE (.PTR [L_FMT_BUF_SIZ], .A_OLD_BUF_BEG, .PTR [A_FMT_BUF_BEG]);
	FOR$$FREE_VM (.PTR [L_FMT_BUF_SIZ], .A_OLD_BUF_BEG);
	PTR [L_FMT_BUF_SIZ] = .PTR [L_FMT_BUF_SIZ]*2;
	END;

    !+
    ! Store away the byte in format buffer
    !-

    (.PTR [A_FMT_BUF_BEG] + .PTR [L_NCHAR])<0, 8> = .V;
    PTR [L_NCHAR] = .PTR [L_NCHAR] + 1;
    END;

ROUTINE BYTSIZ (VAL) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Calculate the number of bytes to hold VAL
!
! FORMAL PARAMETERS:
!
!	VAL	- value to be sized
!
! IMPLICIT INPUTS:
!
!	NONE
!
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	SIGNAL_STOPs FOR$SYNERRFOR (62="SYNTAX ERROR IN FORMAT")
!
!--

    BEGIN

    MAP
	VAL : LONG UNSIGNED;

    IF .VAL LSS 0
    THEN
	ERROR (ERRFMTRNGE)
    ELSE

	IF .VAL LSS 256
	THEN
	    RETURN 1
	ELSE

	    IF .VAL LSS 65536 THEN RETURN 2 ELSE ERROR (ERRFMTRNGE);

    END;
END

ELUDOM
