MODULE BAS$$SIGNAL_IO (				!
		IDENT = '1-020'			! File: BASSIGNAL.B32 EDIT: PL1020
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	BASIC-PLUS-2 I/O and Error Handling
!
! ABSTRACT:
!
!	This module contains BAS$$SIGNAL_IO, which is called following
!	any I/O error.  If requested, it examines the RMS control blocks
!	and signals the proper BASIC error.  Another entry point,
!	BAS$$STOP_IO, guarantees never to return to the caller.
!
! ENVIRONMENT:	VAX/VMS user mode
!
! AUTHOR: John Sauter, CREATION DATE: 08-DEC-78
!
! MODIFIED BY:
!
! 1-001	- Original.  JBS 08-DEC-78
! 1-002	- Revise to take CCB via R11 and only need one explicit
!	   argument.  JBS 11-DEC-78
! 1-003	- Compute user PC.  JBS 19-DEC-78
! 1-004	- Put code in proper PSECT.  JBS 21-DEC-78
! 1-005	- If this is OPEN and there is no error code in the RAB, extract
!	   the error code from the FAB.  JBS 27-DEC-78
! 1-006	- Change the prefix for BASIC stack frame offsets to BSF$.
!	   JBS 08-FEB-1979
! 1-007	- Don't force the error code to SEVERE by calling LIB$STOP
!	   from BAS$SIGNAL_IO.  JBS 20-FEB-1979
! 1-008	- Use BASIOERR.REQ to define the I/O error codes.  JBS 20-FEB-1979
! 1-009	- Take numbers outside of the normal range of error codes
!	   to mean BASIC (rather than RMS) errors.  JBS 06-APR-1979
! 1-010	- Don't use BAS$K_ON_CHAFIL since it does not get defined.
!	   JBS 06-APR-1979
! 1-011	- Don't pass RMS information unless we are asked to compute the
!	   BASIC error code from it.  JBS 06-APR-1979
! 1-012	- Add the error codes for INDEXED I/O.  JBS 09-APR-1979
! 1-013	- If there is a FAB connected to the RAB, and the RAB does not
!	   show an error, get the status from the FAB.  This is for
!	   the $EXTEND macro issued by the virtual memory support.
!	   JBS 24-MAY-1979
! 1-014	- If the ISB indicates that this is a to-memory operation,
!	   transfer control to BAS$$STOP or BAS$$SIGNAL.
!	   JBS 24-MAY-1979
! 1-015	- Correct an error in the translate table.  JBS 30-JUL-1979
! 1-016	- Make the SQO error give "Illegal Operation".  JBS 02-AUG-1979
! 1-017	- Add BAS$$SIGNAL_RMS.  JBS 09-AUG-1979
! 1-018	- Change BAS$$SIGNAL_RMS to BAS$$STOP_RMS.  Only the comment
!	   above was actually wrong.  JBS 22-AUG-1979
! 1-019 - if 0(fp) is 0 then CALC_USER_PC should bail out before it gets a
!	  access violation.  FM 15-MAY-81.
! 1-020 - Map RMS$_TNS onto BAS$K_LINTOOLON, and RMS$_SPE onto BAS$K_ERRFILCOR.
!	  PL 27-Oct-81
!--

!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!

REQUIRE 'RTLIN:OTSLNK';				! Define all linkages

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    TRANSLATE_RMS,				! Translate an RMS error code
    CALC_USER_PC,				! Calculate the user's PC
    BAS$$SIGNAL_IO : CALL_CCB NOVALUE,		! Signal an I/O error
    BAS$$STOP_IO : CALL_CCB NOVALUE,		! Signal a fatal I/O error
    BAS$$STOP_RMS : NOVALUE;			! Signal a fatal I/O error

!
! INCLUDE FILES:
!

REQUIRE 'RTLIN:RTLPSECT';			! Define DECLARE_PSECTS macro

REQUIRE 'RTLML:OTSLUB';				! Logical Unit Block definitions

REQUIRE 'RTLML:OTSISB';				! I/O Statement Block definitions

REQUIRE 'RTLIN:BASFRAME';			! Define BASIC frame structure

REQUIRE 'RTLIN:BASIOERR';			! Define I/O error codes.

LIBRARY 'RTLSTARLE';				! System Library for RMS symbols

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! PSECTS:
!
DECLARE_PSECTS (BAS);				! Declare PSECTs for BAS facility
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    BAS$$STOP : NOVALUE,			! Signal a fatal BASIC error
    BAS$$SIGNAL : NOVALUE,			! Signal a BASIC error
    LIB$SIGNAL : NOVALUE,			! Signal a non-fatal error
    LIB$STOP : NOVALUE,				! Signal a fatal error
    BAS$HANDLER,				! Mark the user's frame
    BAS$$COND_VAL;				! Make 32-bit error codes

!+
! The following are the error codes used in this module.
! For the meanings of these error codes, see the BAS$ERRTXT module.
!-

EXTERNAL LITERAL
    BAS$K_BADDIRDEV : UNSIGNED (8),
    BAS$K_BADRECIDE : UNSIGNED (8),
    BAS$K_BADRECVAL : UNSIGNED (8),
    BAS$K_CANFINFIL : UNSIGNED (8),
    BAS$K_CANOPEFIL : UNSIGNED (8),
    BAS$K_CORFILSTR : UNSIGNED (8),
    BAS$K_DEVHUNWRI : UNSIGNED (8),
    BAS$K_DIRERR : UNSIGNED (8),
    BAS$K_ENDFILDEV : UNSIGNED (8),
    BAS$K_FILEXPDAT : UNSIGNED (8),
    BAS$K_FATSYSIO_ : UNSIGNED (8),
    BAS$K_FILACPFAI : UNSIGNED (8),
    BAS$K_FILIS_LOC : UNSIGNED (8),
    BAS$_FORFILUSE,
    BAS$K_ILLALLCLA : UNSIGNED (8),
    BAS$K_ILLFILNAM : UNSIGNED (8),
    BAS$K_ILLILLACC : UNSIGNED (8),
    BAS$K_ILLOPE : UNSIGNED (8),
    BAS$K_ILLRECACC : UNSIGNED (8),
    BAS$K_ILLRECFIL : UNSIGNED (8),
    BAS$K_ILLRECFOR : UNSIGNED (8),
    BAS$K_ILLUSA : UNSIGNED (8),
    BAS$K_ILLUSADEV : UNSIGNED (8),
    BAS$K_INVFILOPT : UNSIGNED (8),
    BAS$K_INVKEYREF : UNSIGNED (8),
    BAS$K_INVRFAFIE : UNSIGNED (8),
    BAS$K_KEYSIZTOO : UNSIGNED (8),
    BAS$K_KEYWAIEXH : UNSIGNED (8),
    BAS$K_NAMACCNOW : UNSIGNED (8),
    BAS$K_NODNAMERR : UNSIGNED (8),
    BAS$K_NOTENDFIL : UNSIGNED (8),
    BAS$K_NO_CURREC : UNSIGNED (8),
    BAS$K_NO_ROOUSE : UNSIGNED (8),
    BAS$_ON_CHAFIL,
    BAS$K_PROVIO : UNSIGNED (8),
    BAS$K_RECALREXI : UNSIGNED (8),
    BAS$K_RECBUCLOC : UNSIGNED (8),
    BAS$K_RECFILTOO : UNSIGNED (8),
    BAS$K_RECHASBEE : UNSIGNED (8),
    BAS$K_RECLOCFAI : UNSIGNED (8),
    BAS$K_RECNOTFOU : UNSIGNED (8),
    BAS$K_RECNUMEXC : UNSIGNED (8),
    BAS$K_SIZRECINV : UNSIGNED (8),
    BAS$K_TAPBOTDET : UNSIGNED (8),
    BAS$K_TAPNOTANS : UNSIGNED (8),
    BAS$K_TAPRECNOT : UNSIGNED (8),
    BAS$K_KEYNOTCHA : UNSIGNED (8),
    BAS$K_DUPKEYDET : UNSIGNED (8),
    BAS$K_ILLKEYATT : UNSIGNED (8),
    BAS$K_NO_PRIKEY : UNSIGNED (8),
    BAS$K_KEYFIEBEY : UNSIGNED (8),
    BAS$K_PRIKEYOUT : UNSIGNED (8),
    BAS$K_KEYLARTHA : UNSIGNED (8),
    BAS$K_INDNOTFUL : UNSIGNED (8),
    BAS$K_ERRFILCOR : UNSIGNED (8),
    BAS$K_LINTOOLON : UNSIGNED (8);


ROUTINE TRANSLATE_RMS (				! Translate an RMS error code
	STS, 					! The RMS STS longword
	STV, 					! The RMS STV longword
	OPEN_FLAG				! True if this is an OPEN failure
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Examines the status values to determine the nature of the RMS
!	error and returns the proper BASIC error code.
!
! FORMAL PARAMETERS:
!
!	STS.rl.v	The RMS STS field, which contains the major
!			information about the error.
!	STV.rl.v	The RMS STV field, which contains some extra
!			error information for some STS values.
!	OPEN_FLAG.rv.v	True (=1) if we are opening a file.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	The 32-bit BASIC error message code corresponding to the
!	RMS error.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	BASIC_ERR_CODE;				! The 32-bit BASIC error code

!+
! The following SELECTONE statement searches the translation table
! for the BASIC error code corresponding to the STS value passed.
!-
    BASIC_ERR_CODE = (SELECTONE (.STS) OF
	SET
	[RMS$_ANI] : BAS$K_TAPRECNOT;
	[RMS$_ATR] : BAS$K_FILACPFAI;
	[RMS$_ATW] : BAS$K_FILACPFAI;
	[RMS$_BOF] : BAS$K_TAPBOTDET;
	[RMS$_CHG] : BAS$K_KEYNOTCHA;
	[RMS$_CHK] : BAS$K_CORFILSTR;
	[RMS$_CUR] : BAS$K_NO_CURREC;
	[RMS$_DAC] : BAS$K_FILACPFAI;
	[RMS$_DEL] : BAS$K_RECHASBEE;
	[RMS$_DEV] : BAS$K_ILLUSADEV;
	[RMS$_DIR] : BAS$K_BADDIRDEV;
	[RMS$_DNF] : BAS$K_BADDIRDEV;
	[RMS$_DNR] : BAS$K_DEVHUNWRI;
	[RMS$_DPE] : BAS$K_FILACPFAI;
	[RMS$_DUP] : BAS$K_DUPKEYDET;
	[RMS$_ENV] : BAS$K_ILLUSA;
	[RMS$_EOF] : BAS$K_ENDFILDEV;
	[RMS$_EXP] : BAS$K_FILEXPDAT;		! New with BASIC-PLUS-2/VAX
	[RMS$_EXT] : BAS$K_FILACPFAI;
	[RMS$_FAC] : BAS$K_ILLILLACC;
	[RMS$_FEX] : BAS$K_NAMACCNOW;
	[RMS$_FLG] : BAS$K_ILLKEYATT;
	[RMS$_FLK] : BAS$K_FILIS_LOC;
	[RMS$_FNF] : BAS$K_CANFINFIL;
	[RMS$_FNM] : BAS$K_ILLFILNAM;
	[RMS$_FOP] : BAS$K_INVFILOPT;
	[RMS$_FUL] : BAS$K_NO_ROOUSE;
	[RMS$_IOP] : BAS$K_ILLOPE;
	[RMS$_IRC] : BAS$K_ILLRECFIL;
	[RMS$_KBF] : BAS$K_BADRECIDE;
	[RMS$_KEY] : BAS$K_BADRECIDE;
	[RMS$_KRF] : BAS$K_INVKEYREF;
	[RMS$_KSZ] : BAS$K_KEYSIZTOO;
	[RMS$_LBL] : BAS$K_TAPNOTANS;
	[RMS$_MKD] : BAS$K_FILACPFAI;
	[RMS$_MRN] : BAS$K_RECNUMEXC;
	[RMS$_MRS] : BAS$K_BADRECVAL;
	[RMS$_NEF] : BAS$K_NOTENDFIL;
	[RMS$_NOD] : BAS$K_NODNAMERR;		! New with BASIC-PLUS-2/VAX
	[RMS$_NPK] : BAS$K_NO_PRIKEY;
	[RMS$_OK_IDX] : BAS$K_INDNOTFUL;
	[RMS$_OK_RLK] : BAS$K_RECLOCFAI;
	[RMS$_PLG] : BAS$K_CORFILSTR;
	[RMS$_POS] : BAS$K_KEYFIEBEY;
	[RMS$_PRV] : BAS$K_PROVIO;
	[RMS$_RAC] : BAS$K_ILLRECACC;
	[RMS$_RAT] : BAS$K_ILLRECACC;
	[RMS$_RBF] : BAS$K_BADRECIDE;
	[RMS$_RER] : BAS$K_FILACPFAI;
	[RMS$_REX] : BAS$K_RECALREXI;
	[RMS$_RFA] : BAS$K_INVRFAFIE;
	[RMS$_RFM] : BAS$K_ILLRECFOR;
	[RMS$_RLK] : BAS$K_RECBUCLOC;
	[RMS$_RMV] : BAS$K_FILACPFAI;
	[RMS$_RNF] : BAS$K_RECNOTFOU;
	[RMS$_RPL] : BAS$K_FILACPFAI;
	[RMS$_RRV] : BAS$K_CORFILSTR;
	[RMS$_RSZ] : BAS$K_SIZRECINV;
	[RMS$_RTB] : BAS$K_RECFILTOO;
	[RMS$_SEQ] : BAS$K_PRIKEYOUT;
	[RMS$_SHR] : BAS$K_ILLALLCLA;
	[RMS$_SIZ] : BAS$K_KEYLARTHA;
	[RMS$_SPE] : BAS$K_ERRFILCOR;
	[RMS$_SQO] : BAS$K_ILLOPE;
	[RMS$_SYN] : BAS$K_ILLFILNAM;
	[RMS$_SYS] : BAS$K_DIRERR;
	[RMS$_TMO] : BAS$K_KEYWAIEXH;
	[RMS$_TNS] : BAS$K_LINTOOLON;
	[RMS$_TRE] : BAS$K_CORFILSTR;
	[RMS$_TYP] : BAS$K_ILLFILNAM;
	[RMS$_VER] : BAS$K_ILLFILNAM;
	[RMS$_WBE] : BAS$K_FILACPFAI;
	[RMS$_WER] : BAS$K_FILACPFAI;
	[RMS$_WLK] : BAS$K_DEVHUNWRI;
	[RMS$_WPL] : BAS$K_FILACPFAI;
	[OTHERWISE] : 0;
	TES);

    IF (.BASIC_ERR_CODE EQL 0)
    THEN
!+
! The code is not in the above table.  If we are opening a file give
! the message "Can't open file", otherwise "Fatal system I/O error".
!-

	IF (.OPEN_FLAG) THEN BASIC_ERR_CODE = BAS$K_CANOPEFIL ELSE BASIC_ERR_CODE = BAS$K_FATSYSIO_;

    RETURN (.BASIC_ERR_CODE);
    END;					! end of TRANSLATE_RMS

ROUTINE CALC_USER_PC = 				! Calculate the user's PC

!++
! FUNCTIONAL DESCRIPTION:
!
!	Search back through the stack to find the user's PC, and return
!	it.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	The stack, which holds the process history to this point.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	The user's PC, or 0 if no user PC can be found.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    BUILTIN
	FP;

    LOCAL
	FMP : REF BLOCK [0, BYTE] FIELD (BSF$FCD),	! Frame under consideration
	PREV_FMP : REF BLOCK [0, BYTE] FIELD (BSF$FCD),	! Its predecessor
	USER_PC,				! User PC, found in PREV_FMP
	SEARCH_COUNTER,				! Prevents the search from running forever
	SEARCH_DONE;				! Flags that the search is complete

!+
! Go back through the stack frames, starting with this one, to find
! one whose handler is BAS$HANDLER.  The PC stored by its call is the
! user PC.
!-
    SEARCH_DONE = 0;
    SEARCH_COUNTER = 0;
    FMP = .FP;

    WHILE (.SEARCH_DONE EQL 0) DO
	BEGIN
	PREV_FMP = .FMP;			! Remember previous frame
	FMP = .PREV_FMP [BSF$A_SAVED_FP];	! Point to this frame
	SEARCH_COUNTER = .SEARCH_COUNTER + 1;	! We are one level deeper

	IF (.SEARCH_COUNTER GTR 65535) OR .FMP EQLA 0
	THEN
	    BEGIN
!+
! We have searched too far, or 0(fp) is 0.
! The stack is probably messed up, or a non-BASIC fram.  Return
! a zero, and the traceback will show the user the mess.
!-
	    USER_PC = 0;
	    SEARCH_DONE = 1;
	    END
	ELSE
	    BEGIN
!+
! Check for a user frame.
!-

	    IF (.FMP [BSF$A_HANDLER] EQLA BAS$HANDLER)
	    THEN
		BEGIN
!+
! We have found the user's frame.  Get its PC.
!-
		USER_PC = .PREV_FMP [BSF$A_SAVED_PC];
		SEARCH_DONE = 1;
		END;

	    END;

	END;

!+
! At the completion of the WHILE loop, USER_PC is set to the value
! to return, either 0 or the user's PC.
!-
    RETURN (.USER_PC);
    END;					! end of CALC_USER_PC


GLOBAL ROUTINE BAS$$SIGNAL_IO (			! Signal an I/O error
	OPEN_FLAG				! Error code or translation guide
    ) : CALL_CCB NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Signals a BASIC I/O error.  If requested, the error number
!	is determined by examining the RMS error codes.
!
! FORMAL PARAMETERS:
!
!	OPEN_FLAG.rl.v	Either a BASIC error number or a code telling
!			how to translate the RMS error information.
!
! IMPLICIT INPUTS:
!
!	Various fields of the LUB and FAB.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	May never return to its caller, depending on the severity
!	of the error.
!
!--

    BEGIN

    EXTERNAL REGISTER
	CCB : REF BLOCK [0, BYTE];

    LOCAL
	BASIC_ERR_CODE : BLOCK [%UPVAL, BYTE],	! The 32-bit BASIC error code
	FILE_NAME_DESC : BLOCK [8, BYTE],	! Descriptor for file name
	USER_PC,				! The user's PC, determined by scanning the stack
	CHAN,					! The BASIC channel number
	STS,					! RMS completion status code
	STV;					! RMS status value

!+
! If this is a "memory" operation, just call BAS$$SIGNAL.
!-

    IF (.CCB [ISB$V_DE_ENCODE])
    THEN
	BEGIN
	BAS$$SIGNAL (.OPEN_FLAG);
	RETURN;
	END;

    IF (.OPEN_FLAG GEQ 0)
    THEN
	BEGIN
!+
! This is a BASIC I/O error, convert to a 32-bit VMS error code.
!-
	STS = 0;
	STV = 0;
	BASIC_ERR_CODE = BAS$$COND_VAL (.OPEN_FLAG);
	END
    ELSE
	BEGIN
!+
! This is an RMS error, we must compute the BASIC error number.
! Obtain the STS and STV values from the RAB or FAB.
!-

	IF (.OPEN_FLAG NEQ BAS$K_IOERR_OPE)
	THEN
	    BEGIN
	    STS = .CCB [RAB$L_STS];
	    STV = .CCB [RAB$L_STV];
	    END;

	IF ((.OPEN_FLAG EQL BAS$K_IOERR_OPE) OR (.STS AND (.CCB [LUB$A_FAB] NEQA 0)))
	THEN
	    BEGIN

	    LOCAL
		FAB : REF BLOCK [0, BYTE];

	    FAB = .CCB [LUB$A_FAB];
	    STS = .FAB [FAB$L_STS];
	    STV = .FAB [FAB$L_STV];
	    END;

!+
! Compute the BASIC error code corresponding to the RMS error.
!-
	BASIC_ERR_CODE = BAS$$COND_VAL (TRANSLATE_RMS (.STS, .STV,
		(IF (.OPEN_FLAG NEQ BAS$K_IOERR_REC) THEN 1 ELSE 0)));
	END;

!+
! Compute the BASIC channel number.
!-

    IF (.CCB [LUB$W_LUN] LSS 0) THEN CHAN = 0 ELSE CHAN = .CCB [LUB$W_LUN];

!+
! Compute user PC
!-
    USER_PC = CALC_USER_PC ();
!+
! Build a pointer to the file name from the LUB.
!-
    FILE_NAME_DESC [DSC$A_POINTER] = .CCB [LUB$A_RSN];
    FILE_NAME_DESC [DSC$W_LENGTH] = .CCB [LUB$B_RSL];
    FILE_NAME_DESC [DSC$B_CLASS] = DSC$K_CLASS_S;	! Scalar string
    FILE_NAME_DESC [DSC$B_DTYPE] = DSC$K_DTYPE_T;	! ASCII text
!+
! Signal an error.
!-
    LIB$SIGNAL (.BASIC_ERR_CODE, 		! The BASIC error code
	0, 					! No FAO arguments
	BAS$_ON_CHAFIL, 			! " on channel n for file aaa at user PC xxx "
	3, 					! Three FAO arguments
	.CHAN, 					! BASIC Channel number of error
	FILE_NAME_DESC, 			! File name
	.USER_PC, 				! User PC
	.STS, 					! First longword of RMS status
	.STV					! Second longword of RMS status
    );
!+
! All done.
!-
    END;					! end of BAS$$SIGNAL_IO


GLOBAL ROUTINE BAS$$STOP_IO (			! Signal a fatal I/O error
	OPEN_FLAG				! Error code or translation guide
    ) : CALL_CCB NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Signals a fatal BASIC I/O error.  If requested, the error number
!	is determined by examining the RMS error codes.
!
! FORMAL PARAMETERS:
!
!	OPEN_FLAG.rl.v	Either a BASIC error number or a code telling
!			how to translate the RMS error information.
!
! IMPLICIT INPUTS:
!
!	Various fields of the LUB and FAB.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Never returns to its caller.
!
!--

    BEGIN

    EXTERNAL REGISTER
	CCB : REF BLOCK [0, BYTE];

    LOCAL
	BASIC_ERR_CODE : BLOCK [%UPVAL, BYTE],	! The 32-bit BASIC error code
	FILE_NAME_DESC : BLOCK [8, BYTE],	! Descriptor for file name
	USER_PC,				! The user's PC, determined by scanning the stack
	CHAN,					! The BASIC channel number
	STS,					! RMS completion status code
	STV;					! RMS status value

!+
! If this is a "memory" operation, just call BAS$$STOP.
!-

    IF (.CCB [ISB$V_DE_ENCODE])
    THEN
	BEGIN
	BAS$$STOP (.OPEN_FLAG);
	RETURN;
	END;

    IF (.OPEN_FLAG GEQ 0)
    THEN
	BEGIN
!+
! This is a BASIC I/O error, convert to a 32-bit VMS error code.
!-
	STS = 0;
	STV = 0;
	BASIC_ERR_CODE = BAS$$COND_VAL (.OPEN_FLAG);
	END
    ELSE
	BEGIN
!+
! This is an RMS error, we must compute the BASIC error number.
! Obtain the STS and STV values from the RAB or FAB.
!-

	IF (.OPEN_FLAG NEQ BAS$K_IOERR_OPE)
	THEN
	    BEGIN
	    STS = .CCB [RAB$L_STS];
	    STV = .CCB [RAB$L_STV];
	    END;

	IF ((.OPEN_FLAG EQL BAS$K_IOERR_OPE) OR (.STS AND (.CCB [LUB$A_FAB] NEQA 0)))
	THEN
	    BEGIN

	    LOCAL
		FAB : REF BLOCK [0, BYTE];

	    FAB = .CCB [LUB$A_FAB];
	    STS = .FAB [FAB$L_STS];
	    STV = .FAB [FAB$L_STV];
	    END;

!+
! Compute the BASIC error code corresponding to the RMS error.
!-
	BASIC_ERR_CODE = BAS$$COND_VAL (TRANSLATE_RMS (.STS, .STV,
		(IF (.OPEN_FLAG NEQ BAS$K_IOERR_REC) THEN 1 ELSE 0)));
	END;

!+
! Compute the BASIC channel number.
!-

    IF (.CCB [LUB$W_LUN] LSS 0) THEN CHAN = 0 ELSE CHAN = .CCB [LUB$W_LUN];

!+
! Compute user PC
!-
    USER_PC = CALC_USER_PC ();
!+
! Build a pointer to the file name from the LUB.
!-
    FILE_NAME_DESC [DSC$A_POINTER] = .CCB [LUB$A_RSN];
    FILE_NAME_DESC [DSC$W_LENGTH] = .CCB [LUB$B_RSL];
    FILE_NAME_DESC [DSC$B_CLASS] = DSC$K_CLASS_S;	! Scalar string
    FILE_NAME_DESC [DSC$B_DTYPE] = DSC$K_DTYPE_T;	! ASCII text
!+
! Signal a fatal error.
!-
    LIB$STOP (.BASIC_ERR_CODE, 			! The BASIC error code
	0, 					! No FAO arguments
	BAS$_ON_CHAFIL, 			! " on channel n for file aaa at user PC xxx "
	3, 					! Three FAO arguments
	.CHAN, 					! BASIC Channel number of error
	FILE_NAME_DESC, 			! File name
	.USER_PC, 				! User PC
	.STS, 					! First longword of RMS status
	.STV					! Second longword of RMS status
    );
!+
! All done.
!-
    END;					! end of BAS$$STOP_IO


GLOBAL ROUTINE BAS$$STOP_RMS (			! Signal a fatal I/O error
	FILE_NAME, 				! The file on which the error happened
	STS, 					! The RMS STS value
	STV					! The RMS STV value
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Signals a fatal BASIC I/O error.  The error number
!	is determined by examining the RMS error codes.
!
! FORMAL PARAMETERS:
!
!	FILE_NAME.rt.dx	The name of the file which got the error
!	STS.rl.v	The RMS STS value
!	STV.rl.v	The RMS STV value
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Never returns to its caller.
!
!--

    BEGIN

    LOCAL
	BASIC_ERR_CODE : BLOCK [%UPVAL, BYTE];	! The 32-bit BASIC error code

!+
! Compute the BASIC error code corresponding to the RMS error.
!-
    BASIC_ERR_CODE = BAS$$COND_VAL (TRANSLATE_RMS (.STS, .STV, 0));
!+
! Signal a fatal error.
!-
    LIB$STOP (.BASIC_ERR_CODE, 			! The BASIC error code
	0, 					! No FAO arguments
	BAS$_FORFILUSE, 			! "for file"...
	2, 					! Two FAO arguments
	.FILE_NAME, 				! File name
	CALC_USER_PC (), 			! User PC
	.STS, 					! First longword of RMS status
	.STV					! Second longword of RMS status
    );
!+
! All done.
!-
    END;					! end of BAS$$STOP_RMS

END						! end of module BAS$$SIGNAL_IO

ELUDOM
