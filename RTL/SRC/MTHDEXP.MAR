	.TITLE	MTH$DEXP	; Double Precision Floating Exponential 
				; Function (DEXP)
	.IDENT /1-014/		; File: MTHDEXP.MAR  Edit: RNH1014
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;
; FACILITY: MATH LIBRARY
;++
; ABSTRACT:
;
;	MTH$DEXP is a function which returns the double floating point
; exponential of its double precision floating point argument.
; The call is standard call-by-reference.
;
;--
;
; VERSION: 1
;
; HISTORY:
; AUTHOR:
;	Peter Yuo, 15-Oct-76: Version 0
;	Mary Payne and Jud Leonard, 23-JAN-78: Version 1
;
; MODIFIED BY:
;
;
;

	.SBTTL	HISTORY	; Detailed Current Edit History

; Edit History for Version 1 of MTH$DEXP
;
; 1-1	Split single and double precision routines into two parts;
;	Used more accurate and faster algorithms provided by M. Payne.
;	JMT 23-Jan-78
; 1-3	Fixed bug causing unexpected integer overflow.  JMT 24-Mar-78
; 1-4	Change from rational approx. to Chebyshev approx. for
;	more accuracy with overhang.  MHP 18-May-78
; 1-5	Detect underflow properly.  TNH 16-June-78
; 1-6	Remove extra instruction.  TNH 16-June-78
; 1-7	Move .ENTRY mask to module header.  TNH 14-Aug-78
; 1-008	- Update version number and copyright notice.  JBS 16-NOV-78
; 1-009	- Change symbols MTH__FLOUNDMAT and MTH__FLOOVEMAT to
;	   MTH$K_FLOUNDMAT and MTH$K_FLOOVEMAT.  JBS 07-DEC-78
; 1-010	- Add "_" to the PSECT directive.  JBS 22-DEC-78
; 1-011 - Declare externals.  SBL 17-May-1979
; 1-012 - Use only through R6.  SBL 21-Sept-1979
; 1-013 - Included logic for large arguments (where EMOD loses 
;         significance).  RNH 23-JUN-81
; 1-014 - Changed W^ to G^ on calls th MTH$$SIGNAL and MTH$$JACKET_TST
;	  RNH 09-Sept-1981

	.SBTTL	DECLARATIONS		; Declarative Part of Module

;
; INCLUDE FILES:	MTHJACKET.MAR
;

;
; EXTERNAL SYMBOLS:
;
	.DSABL	GBL
	.EXTRN	MTH$K_FLOUNDMAT
	.EXTRN	MTH$K_FLOOVEMAT
	.EXTRN	MTH$$SIGNAL
	.EXTRN	MTH$$JACKET_TST

;
; EQUATED SYMBOLS:

	ACMASK	= ^M<IV, R2, R3, R4, R5, R6>	; .ENTRY mask + int ovf enable
	X_273	=	^O273		; Extension for operand in EMODD
	SD_60	=	^F60.
	SD_12	=	^F12.
	SD_120	=	^F120.
;
; MACROS:
	$SFDEF				; define SF$ (stack frame) symbols
;
; PSECT DECLARATIONS:

	.PSECT	_MTH$CODE	PIC,SHR,LONG,EXE,NOWRT
					; program section for math routines
;
; OWN STORAGE:	none
;
; CONSTANTS:

;
; Table to be used for scaling. These constants here have been
; verified by M. Payne using her program ROOT16 on PDP-10.
;
TABHI:	.WORD	^O040200,0		; 2**(0/16) = 1.0
	.WORD	0,0
	.WORD	^O040205,^O125303	; 2**(1/16)
	.WORD	^O063714,^O044173
	.WORD	^O040213,^O112701	; 2**(2/16)
	.WORD	^O161752,^O105727
	.WORD	^O040221,^O141723	; 2**(3/16)
	.WORD	^O071653,^O010703
	.WORD	^O040230,^O033760	; 2**(4/16)
	.WORD	^O050615,^O134251
	.WORD	^O040236,^O172462	; 2**(5/16)
	.WORD	^O060221,^O120422
	.WORD	^O040245,^O177326	; 2**(6/16)
	.WORD	^O124661,^O050471
	.WORD	^O040255,^O054076	; 2**(7/16)
	.WORD	^O165102,^O120513
	.WORD	^O040265,^O002363	; 2**(8/16)
	.WORD	^O031771,^O157145
	.WORD	^O040275,^O004243	; 2**(9/16)
	.WORD	^O117530,^O006067
	.WORD	^O040305,^O063452	; 2**(10/16)
	.WORD	^O010525,^O003333
	.WORD	^O040316,^O022214	; 2**(11/16)
	.WORD	^O012437,^O102201
	.WORD	^O040327,^O042374	; 2**(12/16)
	.WORD	^O145326,^O116553
	.WORD	^O040340,^O146336	; 2**(13/16)
	.WORD	^O166052,^O112341
	.WORD	^O040352,^O140306	; 2**(14/16)
	.WORD	^O163735,^O022071
	.WORD	^O040365,^O022575	; 2**(15/16)
	.WORD	^O012444,^O103314


TABLO:	.WORD	0,0			; DECIMAL: 0.D0
	.WORD	0,0
	.WORD	^O021446,^O027110	; DECIMAL: 0.2252169616881804D-17
	.WORD	0,0
	.WORD	^O121510,^O020320	; DECIMAL:-0.2712242510500122D-17
	.WORD	0,0
	.WORD	^O021730,^O037542	; DECIMAL: 0.5861402647731367D-17
	.WORD	0,0
	.WORD	^O022136,^O106532	; DECIMAL: 0.1206457647223494D-16
	.WORD	0,0
	.WORD	^O122044,^O137341	; DECIMAL:-0.8930877995013540D-17
	.WORD	0,0
	.WORD	^O121457,^O015020	; DECIMAL:-0.2373071989573779D-17
	.WORD	0,0
	.WORD	^O121746,^O154770	; DECIMAL:-0.6257240830881880D-17
	.WORD	0,0
	.WORD	^O122167,^O046406	; DECIMAL:-0.1340620676392399D-16
	.WORD	0,0
	.WORD	^O122002,^O127400	; DECIMAL:-0.7084371812598154D-17
	.WORD	0,0
	.WORD	^O121613,^O003526	; DECIMAL:-0.3768379065187162D-17
	.WORD	0,0
	.WORD	^O121540,^O167132	; DECIMAL:-0.3048384309613603D-17
	.WORD	0,0
	.WORD	^O121274,^O062600	; DECIMAL:-0.1276624235300040D-17
	.WORD	0,0
	.WORD	^O021410,^O031300	; DECIMAL: 0.1845830375854930D-17
	.WORD	0,0
	.WORD	^O021673,^O040264	; DECIMAL: 0.5075495866202897D-17
	.WORD	0,0
	.WORD	^O021661,^O167167	; DECIMAL: 0.4822843060675619D-17
	.WORD	0,0

;
; Constants used in evaluation of polynomials - small arguments
;
DXPTB1:	.WORD	^O034320,^O011310
	.WORD	^O055564,^O145030	; DECIMAL:   0.2480427857745020D-04
	.WORD	^O035120,^O011601
	.WORD	^O047461,^O113057	; DECIMAL:   0.1984369200268758D-03
	.WORD	^O035666,^O005540
	.WORD	^O120720,^O161470	; DECIMAL:   0.1388888879690042D-02
	.WORD	^O036410,^O104210
	.WORD	^O072406,^O171775	; DECIMAL:   0.8333333262370290D-02
	.WORD	^O037052,^O125252
	.WORD	^O125252,^O162167	; DECIMAL:   0.4166666666667950D-01
	.WORD	^O037452,^O125252
	.WORD	^O125253,^O000535	; DECIMAL:   0.1666666666667437D-00
	.WORD	^O040000,0
	.WORD	0,0			; DECIMAL:   0.5000000000000000D-00
	.WORD	^O040177,^O177777
	.WORD	^O177777,^O177777	; DECIMAL:   0.1000000000000000D+01
	.WORD	^O040200,0
	.WORD	0,0			; DECIMAL:   0.1000000000000000D+01
DXPLN1=<.-DXPTB1>/8			; no. of entries in table
  
;
; Constants used in evaluation of polynomial - regular args
;


DXPTAB:	.WORD	^O023261,^O061157
	.WORD	^O021767,^O125016	; DECIMAL:   0.3077130709430240D-15
	.WORD	^O025177,^O164725
	.WORD	^O143237,^O103423	; DECIMAL:   0.5682419384166091D-13
	.WORD	^O027041,^O102211
	.WORD	^O074021,^O127075	; DECIMAL:   0.9181219559808114D-11
	.WORD	^O030656,^O141777
	.WORD	^O033217,^O147273	; DECIMAL:   0.1271587192556359D-08
	.WORD	^O032435,^O112533
	.WORD	^O076722,^O074645	; DECIMAL:   0.1467610032291993D-06
	.WORD	^O034143,^O054106
	.WORD	^O134045,^O011314	; DECIMAL:   0.1355080777949815D-04
	.WORD	^O035565,^O176757
	.WORD	^O176026,^O026166	; DECIMAL:   0.9383847928089872D-03
	.WORD	^O037061,^O071027
	.WORD	^O173721,^O147572	; DECIMAL:   0.4332169878499658D-01
	.WORD	0,0
	.WORD	0,0			; DECIMAL:   0
DXPLN=<.-DXPTAB>/8			; no. of entries in table



D_16LOG2_E:				; LOG2(E) * 16
	.WORD	^O041270,^O125073
	.WORD	^O024534,^O013760
D_LN2_OV_16_HI:
	.QUAD	^XC800F7D172173E31	; Hi 45 bits of ln2/16
D_LN2_OV_16_LO:
	.QUAD	^X73003C76357927EF	; Low bits of ln2/16

	.SBTTL	MTH$DEXP - Standard Double Precision Floating EXP


;++
; FUNCTIONAL DESCRIPTION:
;
; EXP  - Double precision floating point function
;
; Uses a Chebyshev approximation, with overhang on last step.
;
;
; CALLING SEQUENCE:
;
;	Exponential.wd.v = MTH$EXP(x.rd.r)
;
; INPUT PARAMETERS:

	LONG = 4			; define longword multiplier
	x = 1 * LONG			; Contents of x is the argument

; IMPLICIT INPUTS:	none
;
; OUTPUT PARAMETERS:
;
;	VALUE:	floating exponential of the argument
;
; IMPLICIT OUTPUTS:	none
;
; SIDE EFFECTS:
;
; Signals: MTH$_FLOOVEMAT if X > 88.028 with reserved operand in R0/R1 (copied
; to the signal mechanism vector CHF$L_MCH_R0/R1 by LIB$SIGNAL).  Associated 
; message is: "FLOATING OVERFLOW IN MATH LIBRARY". Result is reserved operand 
; -0.0 unless a user supplied (or any) error handler changes CHF$L_MCH_R0/R1.
;	MTH$_FLOUNDMAT if X =< -89.416 and caller has hardware enable set.
; The result is set to +0.0. Associated message is: "FLOATING UNDERFLOW IN MATH
; LIBRARY"
;
; NOTE: This procedure disables floating point underflow, enable integer
; overflow, causes no floating overflow or other arithmetic traps, and
; preserves enables across the call.
;
;--


	.ENTRY	MTH$DEXP, ACMASK	; standard call-by-reference entry
					; disable DV (and FU), enable IV
	MTH$FLAG_JACKET			; flag that this is a jacket procedure
					; in case of an error in special JSB 
					; routine
	MOVD	@x(AP), R0		; R0/R1 = user's arg
	BSBB	MTH$DEXP_R6		; R0/R1 = special EXP(R0/R1)
	RET				; return - result in R0/R1

	.SBTTL	MTH$DEXP_R6 - Special DEXP routine

; Special DEXP - used by the standard, and direct interfaces.
;
; CALLING SEQUENCE:
;	save anything needed in R0:R6
;	MOVD	...,R0			; input in R0
;	JSB	MTH$DEXP_R6
;	return with result in R0/R1

; Note: This routine is written to avoid causing any integer overflows, 
; floating overflows, or floating underflows or divide by 0 conditions, 
; whether enabled or not.
;
; REGISTERS USED:
;	R0/R1 - floating argument, then result
;	R2/R3 - temp
;	R5 - integer scratch
;	R6 - integer part of X * LG2(E) * 16   (16I+J)


MTH$DEXP_R6::				; special DEXP routine
MTH$DEXP_R7::				; Release 1 name
	BICW3	#^X8000, R0, R2		; Preliminary test for over/underflow
					; R2 = 1st word of |X|
	SUBW3	#^X3E00, R2, R3		; R3 = 4 + unbiased exponent
	CMPW	#^X5B0, R3		; Compare |X| with 88
	BLSSU	SMTST			; to more tests if LSSU
					;  else, -4 < unbiased exp < 8
					;  no exceptions in EMODD or APPROX

	CMPW	R2, #^X4280		; Check for loss of significance in 
					; EMOD ( |X| >= 2**4
	BLSS	EVAL			; No loss of significance

;
; |X| >= 2**4.  EMOD will lose significance so the interger and fractional
; parts of X*16/ln2 must be obtained in seperate steps.
;
	MULD3	D_16LOG2_E, R0, R2	; Get integer part of X*16/ln2 in
	CVTDL	R2, R6			;    R6 (=I+J) as a longword and in
	CVTLD	R6, R2			;    R2/R3 in D format
	MULD3	D_LN2_OV_16_HI, R2, R4	; Get fraction part of X*16/ln2 =
	SUBD	R4, R0			;    16/ln2*[ X - (I+J)*ln2/16 ]
	MULD	D_LN2_OV_16_LO, R2	;    in R0/R1.
	SUBD	R2, R0			;
	MULD	D_16LOG2_E, R0		;
	BRB	APPROX			;

EVAL:	EMODD	D_16LOG2_E, #X_273, R0, R6, R0
					; get X*16*LG2(E) with
					;  integer part in R6 (=16I+J)
					;  fraction in R0/R1

APPROX:	POLYD	R0,#DXPLN-1,DXPTAB	; use Chebyshev series
					;  with last coefficient 0
					;  so that last ADDD has overhang

	BICL3	#-16, R6, R5		; R5 = J
	MULD	TABHI[R5], R0		; else MUL by 2**(J/16)
	ADDD	TABLO[R5], R0		; add in LO of 2**(J/16)
	ADDD	TABHI[R5], R0		; and then HI of 2**(J/16)

	BICL	#15, R6			; R6 = I
	BEQL	20$			; if I=0, then done
	MOVAQ	(R0)[R6], R0		; shift I to EXP position
					; MUL by 2**I by exponent addition
	CMPW	R0, #^X7F		; test for over/underflow
	BLEQ	EXCEPT			; see what exception is if neg or = 0
20$:	RSB				; otherwise return result in R0

SMTST:
	BLSS	20$			; exception if exp+4 > 11
	CMPW	R2, #^X2400		; eliminate underflow from APPROX1
	BLSS	10$			; bypass if E**ARG = 1

;+
; Use Chebyshev series for small arg
;-

	POLYD	R0,#DXPLN1-1,DXPTB1	;Use Chebyshev series
					;  last term is 1; this will
					;  give desired overhang.
	RSB				; answer is OK, return

10$:	MOVD	S^#1, R0		; E**X is 1, store it
	RSB				; and return


;
; Handlers for software detected over/underflow conditions follow
;
20$:	TSTD	R0			; if big ARG > 0 goto OVERFLOW
	BGEQ	OVER
;
; Underflow; if user has FU set, signal error.  Always return 0.0
;
UNDER:
	MOVPSL	R2			; R2 = user's or jacket routine's PSL
	CALLS	#0, G^MTH$$JACKET_TST	; R0 = TRUE if JSB from jacket routine
	BLBC	R0, 10$			; branch if user did JSB
	MOVZWL	SF$W_SAVE_PSW(FP), R2	; get user PSL saved by CALL
10$:	CLRQ	R0			; R0 = result. LIB$SIGNAL will save in
					; CHF$L_MCH_R0/R1 so any handler can fixup
	BBC	#6, R2, 20$		; has user enabled floating underflow?
	PUSHL	(SP)			; yes, return PC from special routine
	MOVZBL	#MTH$K_FLOUNDMAT, -(SP)	; trap code for hardware floating underflow
					; convert to MTH$_FLOUNDMAT (32-bit VAX-11 
					; exception code)
	CALLS	#2, G^MTH$$SIGNAL	; signal (condition, PC)
20$:	RSB				; return

EXCEPT:
	TSTL	R6			; test sign of I; if I < 0
	BLSS	UNDER			; go to underflow handler
;
; Signal floating overflow, return reserved operand, -0.0
;
OVER:					; else process for overflow
	PUSHL	(SP)			; return PC from special routine
	MOVZBL	#MTH$K_FLOOVEMAT, -(SP)	; hardware floating overflow
	ASHQ	#15, #1, R0		; R0/R1 = result = reserved operand
					; -0.0. R0/0 will be copied to
					; signal mechanism vector (CHF$L_MCH_R0/R1)
					; so can be fixed up by any error
					; handler
	CALLS	#2, G^MTH$$SIGNAL	; signal (condition, PC)
	RSB				; return - R0 restoredd from CHF$L_MCH_R0/R1


	.END
