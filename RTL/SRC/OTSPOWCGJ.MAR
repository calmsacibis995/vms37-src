	.TITLE	OTS$POWCGJ - G COMPLEX*16 ** INTEGER*4 power routine
	.IDENT	/1-003/		; File OTSPOWCGJ.MAR  Edit: SBL1003
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;
;
; FACILITY: Language support library - user callable
;++
; ABSTRACT:
;
;	G COMPLEX*16 base to INTEGER*4 power.
;	Floating overflow can occur.
;	Undefined exponentiation can occur if
;	base = (0.,0.) and exp <=0
;
;--
;
; VERSION: 1
;
; HISTORY:
; AUTHOR:
;	Steven B. Lionel, 27-July-1979
;

	.SBTTL	HISTORY		; Detailed Current Edit History


; Edit History
; 1-001 - Adapted from OTS$POWCJ version 1-003.  SBL 27-July-1979
; 1-002 - Fix bug in test for undefined exponentiation with negative powers.
;	  SPR 11-35362  SBL 22-Jan-1981
; 1-003 - Use general mode addressing.  SBL 30-Nov-1981

	.SBTTL	DECLARATIONS

;
; INCLUDE FILES:
;

; EXTERNAL SYMBOLS:
;

	.DSABL	GBL
	.EXTRN	MTH$$SIGNAL		; Math error routine
	.EXTRN	OTS$DIVCG_R3		; COMPLEX division routine
	.EXTRN	MTH$K_UNDEXP

;
; MACROS:
;

;
; EQUATED SYMBOLS:
;

;
; OWN STORAGE:
;

;
; PSECT DECLARATIONS:
;

	.PSECT	_OTS$CODE PIC,SHR,LONG,EXE,NOWRT
					; program section for OTS$ code


	.SBTTL	OTS$POWCGJ_R3 - G COMPLEX*16 ** INTEGER*4
;++
; FUNCTIONAL DESCRIPTION:
;
;	G COMPLEX*16 result = G COMPLEX*16 base ** INTEGER*4 exponent
;	The COMPLEX result is given by:
;
;	base		exponent	result
;
;	any		  >0		PRODUCT (base * 2**i) where
;					i is each non-zero bit in
;					exponent.
;
;	(0., 0.)	 <=0		Undefined exponentiation.
;
;	not (0., 0.)	  <0		PRODUCT (base * 2**i) where
;					i is each non-zero bit in
;					|exponent|.
;
;	not (0., 0.)	  =0		(1.0, 0.0)
;
;	Floating overflow can occur.
;	Undefined exponentiation occurs if base is 0 and
;	exponent is 0 or negative.
;
; CALLING SEQUENCE:
;
;	result.wgc.v = OTS$POWCGJ_R3 (base.rgc.v, exponent.rl.v)
;
; INPUT PARAMETERS:
	base	= 4		; G COMPLEX*16 base passed by VALUE!
	exponent = 20		; Longword integer exponent by value.
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; FUNCTION VALUE:
;
;	THE G COMPLEX*16 result is returned in registers R0-R3.
;	This is a violation of the VAX calling standard, but is
;	excused for compiled code support routines.

;
; SIDE EFFECTS:
;
;	Modifies registers R0-R3!
;	SS$_FLTOVF - Floating overflow
;	SIGNALs MTH$_UNDEXP (82 = ' UNDEFINED EXPONENTATION') if
;	base is 0 and exponent is 0 or negative.
;
;--

	.ENTRY	OTS$POWCGJ_R3, ^M<R4,R5,R6,R7,R8>
					; disable integer overflow
	MOVQ	base(AP), R4		; R4-R7 gets COMPLEX base
	MOVQ	base+8(AP), R6
	MOVL	exponent(AP), R8	; R8 = longword exponent
	BGEQ	1$			; R8 = | exponent |
	MNEGL	R8, R8
1$:	BBCC	#0, R8, EVEN		; branch if even and clear low bit
	MOVG	R4, R0			; R0-R3 = initial result
	MOVG	R6, R2	
	ROTL	#-1, R8, R8		; R8 = unsigned_exponent / 2
	BEQL	DONE			; done if exponent was 1
	BRB	SQUAR1			; else use rest of exponent

EVEN:
	MOVG	#1, R0			; R0-R3 = initial result
	CLRQ	R2			; (1.0, 0.0)
	ROTL	#-1, R8, R8		; R8 = unsigned_exponent / 2
	BNEQ	SQUAR1			; branch if exponent not 0
	TSTG	R4			; exponent was 0, text RP(base)
	BNEQ	DONE			; done if non-0, answer is 1.0
	TSTG	R6			; IP(base) better not be zero
	BNEQ	DONE			; it isn't return 1.0

UNDEFINED:
	ASHQ	#15, #1, R0		; return R0-R3 = reserved operands
	ASHQ	#15, #1, R2
	MOVZBL	#MTH$K_UNDEXP, -(SP)	; FORTRAN error number
	CALLS	#1, G^MTH$$SIGNAL		; convert to 32-bit condition code
					; and SIGNAL MTH$_UNDEXP
	RET

SQUAR:
	ASHL	#-1, R8, R8		; R8 = |reduced exponent| / 2
;
; R4-R7 = square current base
;
SQUAR1:
	MULG3	R4, R6, -(SP)		; (SP) = tmp = RP(base)*IP(base)
	MULG2	R4, R4			; R4-R5 = RP(base)**2
	MULG2	R6, R6			; R6-R7 = IP(base)**2
	SUBG2	R6, R4			; R4-R5 = RP(base)**2 - IP(base)**2
	ADDG3	(SP), (SP)+, R6		; R6-R7 = 2*(RP(base)*IP(base))
	BLBC	R8, SQUAR		; branch if next exponent bit is 0
;
; R0-R3 = partial result * current power of base
;
	MULG3	R0, R6, -(SP)		; (SP) = tmp = RP(part) * IP(base)
	MULG2	R4, R0			; R0-R1 = RP(part) * RP(base)
	MULG3	R2, R6, -(SP)		; (SP) = tmp = IP(part) * IP(base)
	SUBG2	(SP)+, R0		; R0-R1 = RP(part)*RP(base)-IP(part)*IP(base)
	MULG2	R4, R2			; R2-R3 = IP(part)*RP(base)
	ADDG2	(SP)+, R2		; R2-R3 = IP(part)*RP(base)+RP(part)*IP(base)
	ASHL	#-1, R8, R8		; R8 = |reduced exponent| / 2
	BNEQ	SQUAR1			; loop if more exponent bits left
DONE:
	TSTL	exponent(AP)		; test exponent sign
	BGEQ	POWCGJ			; done if positive
	TSTG	R0			; test RP(result)
	BNEQ	RECIP			; if non-0, OK to take reciprocal
	TSTG	R2			; RP(result) was 0, test IP(result)
	BEQL	UNDEFINED		; undefined (0.0+0.0i) ** -n
RECIP:
	MOVQ	R2, -(SP)		; second arg pair is divisor
	MOVQ	R0, -(SP)
	CLRQ	-(SP)			; push (1.0,0.0) on stack
	MOVG	#1, -(SP)
	CALLS	#8, G^OTS$DIVCG_R3	; R0-R3 = reciprocal
POWCGJ:
	RET				; result in R0-R3

	.END
