	.TITLE	MTH$GATAN	; G Floating Point Arc Tangent Functions 
				; (GATAN,GATAN2,GATAND,GATAND2)
	.IDENT /2-005/		; File: MTHGATAN.MAR  EDIT:  RNH2005
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;
; FACILITY: MATH LIBRARY
;++
; ABSTRACT:
;
; MTH$GATAN  is  a  function  which  returns  the G floating point arc-
; tangent value in radians of  its  G floating point argument.
; MTH$GATAN2  is  two  argument G floating arctangent. The call is
; standard call-by-reference.
; MTH$GATAN_R7  is  a  special routine which is the same as MTH$GATAN
; except a  faster non-standard JSB call is used with the argument in
; R0 and no registers are saved.
;
; MTH$GATAND is  a  function  which  returns  the G floating point arc-
; tangent value in radians of  its  G floating point argument.
; MTH$GATAND2  is  two  argument G floating arctangent. The call is
; standard call-by-reference.
; MTH$GATAND_R7  is  a  special routine which is the same as MTH$GATAND
; except a  faster non-standard JSB call is used with the argument in
; R0 and no registers are saved.
;
;--
;
; VERSION: 1
;
; HISTORY:
; AUTHOR:
;	Steven B. Lionel, 15-Jan-79: Version 1
;
; MODIFIED BY:
;
; VERSION: 2
;
; HISTORY:
; AUTHOR:
;	Bob Hanek, 08-Jun-81: Version 2
;
; MODIFIED BY:
;
;
;



; ALGORITHMIC DIFFERENCES FROM FP-11/C ROUTINE:
;	1. To avoid various flags subroutine calls have been used.
;
; Edit history for Version 1 of MTH$GATAN
;

; 1-001 - Adapted from MTH$DATAN version 1-001.  SBL 15-Jan-79
; 1-002 - Added degree entry points. RNH 15-MAR-1981
;
;
; Edit history for Version 2 of MTH$GATAN
;
;
; 2-002 - Use G^ addressing for externals.  SBL 24-August-1981
; 2-003 - Change MTH$$AB_ATAN to MTH$$AB_ATAN_V.  RNH 29-Sep-81
; 2-004 - Change MTH$GATAN2D entry to MTH$GATAND2 in order to conform 
;	  with original specification.  RNH 05-Oct-81
; 2-005 - Un-did previous edit to conform with PL/1.
;	- Modified small argument logic to avoid a microcode bug in the
;	  FPA. RNH 18-Dec-81

	.SBTTL	DECLARATIONS	; Declarative Part of Module

;
; INCLUDE FILES:	MTHJACKET.MAR, MTHATAN.MAR
;
; EXTERNAL SYMBOLS:
;
	.DSABL	GBL
	.EXTRN	MTH$K_INVARGMAT
	.EXTRN	MTH$$SIGNAL		; Signal SEVERE error
	.EXTRN  MTH$$AB_ATAN_V		; Gobal table used by all Arctangent
					;    routines.  Part of MTHATAN.MAR
;

; EQUATED SYMBOLS:
;
	ACMASK = ^M<IV, R2, R3, R4, R5, R6, R7>	; .ENTRY register mask, int 
						; ovf enabled

;
; MACROS:	none
;
; PSECT DECLARATIONS:

	.PSECT	_MTH$CODE	PIC,SHR,LONG,EXE,NOWRT
					; program section for math routines
;
; OWN STORAGE:	none
;
;
; CONSTANTS:
;
G_M1.0:
	.G_FLOATING	-1.0
;

;
;   ************************** Constants for GATAN ***************************
;   
;   
;   Each  entry of the GATAN_TABLE contains the the values of XHI, GATAN_XHI_LO
;   and GATAN_XHI_HI respectively.  The table is indexed by a pointer  obtained
;   from the MTH$$AB_ATAN_V table. The MTH$$AB_ATAN table is common to all of 
;   the arctangent  routines  and is included as part of the MTHATAN module.  
;   NOTE:  For performance reasons it is important to have  the  GATAN_TABLE  
;   longword aligned.
;   
;   
	.ALIGN	LONG

GATAN_TABLE:
 ;  Entry  0
	.QUAD	^X0000C000FF0F3FDA	; 0.10545442998409271E+00
	.QUAD	^XA7116ADDBF29BC67	; -.25746251625939183E-17
	.QUAD	^X566FD64FE59C3FDA	; 0.10506611091781236E+00
 ;  Entry  1
	.QUAD	^X000000007F6E3FE0	; 0.12888884544372559E+00
	.QUAD	^XDF4E8FD5EFD23C87	; 0.10380935117142230E-16
	.QUAD	^X9B8FE6F768453FE0	; 0.12818216111847078E+00
 ;  Entry  2
	.QUAD	^X0000C000FEC73FE3	; 0.15621277689933777E+00
	.QUAD	^X788534175EC23C83	; 0.84004638358227629E-17
	.QUAD	^X66D21962D5BE3FE3	; 0.15496040572616337E+00
 ;  Entry  3
	.QUAD	^X00008000FC9D3FE8	; 0.19520920515060425E+00
	.QUAD	^X5A36F2BAFC573C87	; 0.10402146584359310E-16
	.QUAD	^X59EE355BAD2C3FE8	; 0.19278481107058049E+00
 ;  Entry  4
	.QUAD	^X00002000F87A3FEF	; 0.24977041780948639E+00
	.QUAD	^X7ED48C95CA7DBC72	; -.40746438836046411E-17
	.QUAD	^X78D5498654613FEF	; 0.24476257410146354E+00
 ;  Entry  5
	.QUAD	^X0000E000FB723FF3	; 0.31222221255302429E+00
	.QUAD	^X196AA37EFCD6BC9F	; -.27744863807258262E-16
	.QUAD	^X15D7AA335E513FF3	; 0.30263177510309219E+00
 ;  Entry  6
	.QUAD	^X0000C000F3D13FF8	; 0.38988155126571655E+00
	.QUAD	^X1321B0FD909F3C8D	; 0.12821747438427643E-16
	.QUAD	^X1A5C2DEFCACE3FF7	; 0.37175325856916230E+00
 ;  Entry  7
	.QUAD	^X0000C000E6763FFF	; 0.49844139814376831E+00
	.QUAD	^XAF44EC518F0BBC85	; -.93496285723919294E-17
	.QUAD	^X6601F61397F53FFD	; 0.46239995032155440E+00
 ;  Entry  8
	.QUAD	^X00006000DF1D4004	; 0.65223568677902222E+00
	.QUAD	^XDC171556EF7DBCA2	; -.32847860491614434E-16
	.QUAD	^X96B7173B7E874002	; 0.57794527566576093E+00
 ;  Entry  9
	.QUAD	^X00004000C0E2400B	; 0.86729538440704346E+00
	.QUAD	^XC4357EF7E0933CAC	; 0.50094044554598468E-16
	.QUAD	^X5CC77669DCC54006	; 0.71444962622890607E+00
 ;  Entry 10
	.QUAD	^X00000000B97B4012	; 0.11702833175659180E+01
	.QUAD	^XDE5AE1934F4A3CA4	; 0.35231776430069749E-16
	.QUAD	^X4CCA4044A36C400B	; 0.86369907905682308E+00
 ;  Entry 11
	.QUAD	^X0000600051BD401A	; 0.16449559926986694E+01
	.QUAD	^X544596358AA53C85	; 0.93421751035229863E-17
	.QUAD	^X203A186164A84010	; 0.10245743706054911E+01
 ;  Entry 12
	.QUAD	^X0000A00091004024	; 0.25708019733428955E+01
	.QUAD	^XD4B2DF90D0CBBCB4	; -.72218657650365456E-16
	.QUAD	^X88B84B3832794013	; 0.11998227060617364E+01
 ;  Entry 13
	.QUAD	^X0000C0006FA14035	; 0.53590154647827148E+01
	.QUAD	^X61CF645DA10DBCBA	; -.92388286592139436E-16
	.QUAD	^XFBF746462E5A4016	; 0.13863165612417541E+01

;
; Tables to be used in POLYG for computing GATAN:  GATANTAB1 is obtained
; from Hart et. al. (No. 4904).  GATANTAB2 is the same as GATANTAB1 except
; that C0 is set to 0
;

GATANTAB1:
	.QUAD	^X696A2F611F943FD3	; C6 = 0.74700604980000002E-01
	.QUAD	^X974A29A943E3BFD7	; C5 = -.90879628821849995E-01
	.QUAD	^XBAB6DA1C71C33FDC	; C4 = 0.11111091685300320E+00
	.QUAD	^X3DD890DF4924BFE2	; C3 = -.14285714219884826E+00
	.QUAD	^X0402999999993FE9	; C2 = 0.19999999999893708E+00
	.QUAD	^X554A55555555BFF5	; C1 = -.33333333333333270E+00
	.QUAD	^X0000000000004010	; C0 = 0.10000000000000000E+01
GATANLEN1 = .- GATANTAB1/8

GATANTAB2:
	.QUAD	^X696A2F611F943FD3	; C6 = 0.74700604980000002E-01
	.QUAD	^X974A29A943E3BFD7	; C5 = -.90879628821849995E-01
	.QUAD	^XBAB6DA1C71C33FDC	; C4 = 0.11111091685300320E+00
	.QUAD	^X3DD890DF4924BFE2	; C3 = -.14285714219884826E+00
	.QUAD	^X0402999999993FE9	; C2 = 0.19999999999893708E+00
	.QUAD	^X554A55555555BFF5	; C1 = -.33333333333333270E+00
	.QUAD	^X0000000000000000	; C0 = 0.00000000000000000E+00
GATANLEN2 = .- GATANTAB2/8

G_PI:
	.QUAD	^X2D18544421FB4029	; pi
G_PI_OVER_2:
	.QUAD	^X2D18544421FB4019	; pi/2
G_MPI_OVER_2:
	.QUAD	^X2D18544421FBC019	; -pi/2
G_PI_OVER_2_HI:
	.QUAD	^X2D18544421FB4019	; High order bits of pi/2
G_PI_OVER_2_LO:
	.QUAD	^X5C073314A6263CB1	; Low order bits of pi/2


;
; ************************* Constants for ATAND ******************************
;   
; Each entry of the GATAND_TABLE contains the the values of XHI, GATAND_XHI_LO
; and GATAND_XHI_HI respectively.  The table is indexed by a pointer  obtained
; from  the MTH$$AB_ATAN_V table. The MTH$$AB_ATAN_V table is common to all
; of the arctangent routines and is included as part of the MTHATAN module.
; NOTE: For performance reasons it is important to have the GATAN_TABLE
; longword aligned. 
;   
;   

GATAND_TABLE:
 ;  Entry  0
	.QUAD	^X0000C000FF0F3FDA	; 0.10545442998409271E+00
	.QUAD	^XD413D41C30D43CDF	; 0.43285857545785734E-15
	.QUAD	^X1EEC2CFB14524038	; 0.60198447254440275E+01
 ;  Entry  1
	.QUAD	^X000000007F6E3FE0	; 0.12888884544372559E+00
	.QUAD	^XC89701C4A0A03CD8	; 0.34177440754834374E-15
	.QUAD	^X0F2B59E0608F403D	; 0.73442968409542955E+01
 ;  Entry  2
	.QUAD	^X0000C000FEC73FE3	; 0.15621277689933777E+00
	.QUAD	^X8B60C70E195E3CD0	; 0.22341992757083616E-15
	.QUAD	^X6BD2E03FC1D44041	; 0.88785772397440361E+01
 ;  Entry  3
	.QUAD	^X00008000FC9D3FE8	; 0.19520920515060425E+00
	.QUAD	^X38D734C9DDBEBCC3	; -.13784934004150469E-15
	.QUAD	^X9DCC558C176D4046	; 0.11045756028571212E+02
 ;  Entry  4
	.QUAD	^X00002000F87A3FEF	; 0.24977041780948639E+00
	.QUAD	^X2E402DBDA771BCBA	; -.92474884414648258E-16
	.QUAD	^XDA96B3EB0C37404C	; 0.14023862478771928E+02
 ;  Entry  5
	.QUAD	^X0000E000FB723FF3	; 0.31222221255302429E+00
	.QUAD	^X8E8FD3A035F33CEE	; 0.83851680459392492E-15
	.QUAD	^XC031026C56EB4051	; 0.17339523459959484E+02
 ;  Entry  6
	.QUAD	^X0000C000F3D13FF8	; 0.38988155126571655E+00
	.QUAD	^XA6895D5D3CF8BC91	; -.14951724532714387E-16
	.QUAD	^X7EE7C5364CC54055	; 0.21299892736248605E+02
 ;  Entry  7
	.QUAD	^X0000C000E6763FFF	; 0.49844139814376831E+00
	.QUAD	^XBF160F0D0C67BCFE	; -.16680239163537724E-14
	.QUAD	^X826750B07E5A405A	; 0.26493565600484001E+02
 ;  Entry  8
	.QUAD	^X00006000DF1D4004	; 0.65223568677902222E+00
	.QUAD	^X18DF2683E59CBCFE	; -.17151232610031867E-14
	.QUAD	^X242AD2058E914060	; 0.33113825085173019E+02
 ;  Entry  9
	.QUAD	^X00004000C0E2400B	; 0.86729538440704346E+00
	.QUAD	^X8CF25946F483BCE9	; -.72039955175148569E-15
	.QUAD	^XF491626E77AC4064	; 0.40934948257615481E+02
 ;  Entry 10
	.QUAD	^X00000000B97B4012	; 0.11702833175659180E+01
	.QUAD	^XF9F4D8EA85FC3D00	; 0.18344647350239910E-14
	.QUAD	^X4E4578BABE3F4068	; 0.49486311999291992E+02
 ;  Entry 11
	.QUAD	^X0000600051BD401A	; 0.16449559926986694E+01
	.QUAD	^X81B4D2B1A61D3CE3	; 0.54536632330091105E-15
	.QUAD	^X77EDB3365A15406D	; 0.58703787232967308E+02
 ;  Entry 12
	.QUAD	^X0000A00091004024	; 0.25708019733428955E+01
	.QUAD	^X5CBF9C63DC35BD10	; -.37437149019224865E-14
	.QUAD	^X13586E142FAA4071	; 0.68744777221303025E+02
 ;  Entry 13
	.QUAD	^X0000C0006FA14035	; 0.53590154647827148E+01
	.QUAD	^X408B586116AABD18	; -.53487296285387485E-14
	.QUAD	^XECD78FEFDB864073	; 0.79430088028242025E+02

;
; Tables to be used in POLYG for computing GATAND:  GATANDTAB1 is obtained
; by multiplying the coefficients given in Hart et. al. (No. 4904) by
; 180/pi.  GATANDTAB2 is the same as GATANDTAB1 except that C0 is set to
; 180/pi - 64 instead of 180/pi.
;

GATANDTAB1:
	.QUAD	^X964506691EC04031	; C6 = 0.42800293924279389E+01
	.QUAD	^XA4E1D5ACD3FCC034	; C5 = -.52070191752074786E+01
	.QUAD	^X5E899E4D76F94039	; C4 = 0.63661865935060939E+01
	.QUAD	^X2808E93E5EC6C040	; C3 = -.81851113212942579E+01
	.QUAD	^X7BA77B82EB164046	; C2 = 0.11459155902555564E+02
	.QUAD	^X2BF066ED193DC053	; C1 = -.19098593171027403E+02
	.QUAD	^XC1F81A63A5DC406C	; C0 = 0.57295779513082323E+02
GATANDLEN1 = .- GATANDTAB1/8

GATANDTAB2:
	.QUAD	^X964506691EC04031	; C6 = 0.42800293924279389E+01
	.QUAD	^XA4E1D5ACD3FCC034	; C5 = -.52070191752074786E+01
	.QUAD	^X5E899E4D76F94039	; C4 = 0.63661865935060939E+01
	.QUAD	^X2808E93E5EC6C040	; C3 = -.81851113212942579E+01
	.QUAD	^X7BA77B82EB164046	; C2 = 0.11459155902555564E+02
	.QUAD	^X2BF066ED193DC053	; C1 = -.19098593171027403E+02
G_PI_OV_180_M_64:
	.QUAD	^XF0422CE1D11FC03A	; C0 = -.67042204869176789E+01
GATANDLEN2 = .- GATANDTAB2/8


G_90:
	.QUAD	^X0000000080004076	; 90.
G_M90:
	.QUAD	^X000000008000C076	; -90.
G_180:
	.QUAD	^X0000000080004086	; 180

	.SBTTL	MTH$GATAN - Standard G Floating Arc Tangent


;++
; FUNCTIONAL DESCRIPTION:
;
; GATAN - G floating point function
;
; GATAN is computed using the following steps:
; 
;    1. If X > 11 then
;       a. Let W = 1/X.
;       b. Compute GATAN(W) = W*P(W**2), where P is a polynomial of 
;          degree 6.
;       c. Set GATAN(X) = pi/2 - GATAN(W)
;    2. If 3/32 =< X =< 11 then
;       a. Obtain XHI by table look-up.
;       b. Compute Z = (X - XHI)/(1 + X*XHI).
;       c. Compute GATAN(Z) = Z*P(Z**2), where P is a polynomial of 
;          degree 6.
;       d. Obtain GATAN(XHI) by table look-up.  GATAN(XHI) will have
;          two parts - the high order bits, GATAN_XHI_HI, and the low
;          order bits, GATAN_XHI_LO.
;       e. Compute GATAN(X) = GATAN_XHI_HI + (GATAN_XHI_LO + GATAN(Z)).
;    3. If 0 =< X < 3/32 then
;       a. Compute GATAN(X) = X + X*Q(X**2), where Q is a polynomial
;          of degree 6.
;    4. If X < 0 then
;       a. Compute Y = GATAN(|X|) using steps 1 to 3.
;       b. Set GATAN(X) = -Y.
; 
;
; CALLING SEQUENCE:
;
;	Arctangent.wg.v = MTH$GATAN(x.rg.r)
;
; INPUT PARAMETERS:

	LONG = 4			; define longword multiplier
	x = 1 * LONG			; x is an angle in radians
;
; IMPLICIT INPUTS:	none
;
; OUTPUT PARAMETERS:
;
;	VALUE:	G floating arctangent angle of the argument
;
; IMPLICIT OUTPUTS:	none
;
; SIDE EFFECTS:
;
; Signals:	none
;
; NOTE: This procedure disables floating point underflow, enable integer
; overflow, causes no floating overflow or other arithmetic traps, and
; preserves enables across the call.
;
;---


	.ENTRY	MTH$GATAN, ACMASK	; standard call-by-reference entry
					; disable DV (and FU), enable IV
	MTH$FLAG_JACKET			; flag that this is a jacket procedure in
					; case of an error in special JSB routine
	MOVG	@x(AP), R0		; R0/R1 = arg 
	BSBB	MTH$GATAN_R7		; call special GATAN routine
	RET				; return - result in R0


	.SBTTL	MTH$GATAN2 - Standard G Floating Arctangent With 2 Arguments
;++
; FUNCTIONAL DESCRIPTION:
;
; GATAN2  - G floating point function
;
; GATAN2(X,Y) is computed as following:
;
;	If Y = 0 or X/Y > 2**57, GATAN2(X,Y) = PI/2 * (sign X)
;	If Y > 0 and X/Y =< 2**57, GATAN2(X,Y) = GATAN(X/Y)
;	If Y < 0 and X/Y =< 2**57, GATAN2(X,Y) = PI * (sign X) + GATAN(X/Y)
;
;
; CALLING SEQUENCE:
;
;	Arctangent2.wg.v = MTH$GATAN2(x.rg.r, y.rg.r)
;
; INPUT PARAMETERS:

	x = 1 * LONG			; x is the first argument
	y = 2 * LONG			; y is the second argument

; SIDE EFFECTS:	See description of MTH$GATAN 
;
;--


	.ENTRY	MTH$GATAN2, ACMASK	; standard call-by-reference entry
					; disable DV (and FU), enable IV
	MTH$FLAG_JACKET			; flag that this is a jacket procedure in
					; case of an error in special JSB routine
	MOVG	@x(AP), R0		; R0/R1 = arg1 
	MOVG	@y(AP), R2		; R2/R3 = arg2
;
; Test if Y = 0 or X/Y > 2**57
;
	BEQL	INF			; branch to INF if Y = 0
	BICW3	#^X800F, R0, R4		; R4 = exponent(X)
	BICW3	#^X800F, R2, R5		; R5 = exponent(Y)
	SUBW	R5, R4			; R4 = exponent(X) - exponent(Y)
	CMPW	R4, #58*16		; compare R4 with 58
	BGTR	INF			; if X/Y > 2**57, branch to INF
;
; Test if Y > 0 or Y < 0
;
	TSTW	R2			; test the sign of Y
	BGTR	A2PLUS			; branch to A2PLUS if Y > 0
	TSTW	R0			; test the sign of X
	BGEQ	A1PLUS			; branch to A1PLUS if X >= 0
;
; Y < 0 and X < 0 and X/Y =< 2**57
;
	BSBB	MTH$GATAN_R7D		; R0/R1 = GATAN(X/Y)
	SUBG2	G_PI, R0		; R0/R1 = -PI + GATAN(X/Y)
	RET				; return
;
; Y < 0 and X > 0 and X/Y =< 2**57
;
A1PLUS:
	BSBB	MTH$GATAN_R7D		; R0/R1 = GATAN(X/Y)
	ADDG2	G_PI, R0		; R0/R1 = PI + GATAN(X/Y)
	RET				; return
;
; Y > 0 and X/Y =< 2**57
;
A2PLUS:
	BSBB	MTH$GATAN_R7D		; R0/R1 = GATAN(X/Y)
	RET				; return
;
; Y = 0 or X/Y > 2**57
;
INF:
	TSTW	R0			; test the sign of X
	BGTR	1$			; branch if X > 0
	BEQL	2$			; branch if X = 0
	MOVQ	G_MPI_OVER_2, R0	; R0/R1 = GATAN(X/Y) = -PI/2
	RET				; return

1$:	MOVQ	G_PI_OVER_2, R0		; R0/R1 = GATAN(X/Y) = PI/2
	RET				; return

;+
; Here if both X = 0 and Y = 0.  Signal INVALID ARG TO MATH LIBRARY
;-

2$:	ASHQ	#15, #1, R0		; R0/R1 = reserved operand, copied
					; to CHF$_MCH_SAVR0/R1 so handlers
					; can change if they want to continue.
	MOVZBL	#MTH$K_INVARGMAT, -(SP)	; code for INVALID ARGMAT TO MATH LIBRARY
	CALLS	#1, G^MTH$$SIGNAL	; Signal SEVERE error
	RET				; return if a handler says SS$_CONTINUE

	.SBTTL	MTH$GATAN_R7 - Special GATAN routine

; Special GATAN - used by the standard routine, and directly.
;
; CALLING SEQUENCES:
;	save anything needed in R0:R7
;	MOVG	...,R0			; input in R0/R1
;	JSB	MTH$GATAN_R7
;	return with result in R0/R1
; Note: This routine is written to avoid causing any integer overflows, floating
; overflows, or floating underflows or divide by 0 conditions, whether enabled or
; not.
;
; REGISTERS USED:
;	R0/R1 - Floating argument then result
;	R0:R5 - POLYG
;	R6/R7 - Y Guring POLYG



MTH$GATAN_R7D:				; for local use only!
	DIVG2	R2, R0
MTH$GATAN_R7::				; Special GATAN routine
	TSTG	R0			; R6 = X = argument
	BGEQ	POS_ARG
	BRW	NEG_ARG			; Branch to negative argument logic
;
; Argument is positive
;
POS_ARG:SUBW3	#^X3FD8, R0, R6		; Argument is less than 3/32,
	BLSS	SMALL			;  branch to small argument logic
	CMPW	#^X006D, R6		; Argument is greater that 11,
	BLSS	LARGE_ARG		;  branch to large argument logic
;
; Logic for positive medium sized arguments.  Get pointer into GATAN_TABLE.
;
	ROTL	#-1, R6, R6		; R6 = index into MTH$$AB_ATAN table
	BICL	#-256, R6		; zero high order bits of index
	MOVAL	G^MTH$$AB_ATAN_V, R3	; R3 = address of RTL vector entry
	ADDL	G^MTH$$AB_ATAN_V, R3	; R3 = address of MTH$$AB_ATAN table
	MOVB	(R3)[R6], R6		; R6 = offset into GATAN_TABLE
	MOVAQ	GATAN_TABLE[R6], R6	; R6 = pointer to XHI
;
; Compute Z
;
	MOVQ	(R6)+, R2		; R2 = XHI
	MULG3	R2, R0, R4		; R4 = X*XHI
	ADDG2	#1, R4			; R4 = 1 + X*XHI
	SUBG2	R2, R0			; R0 = X - XHI
	DIVG2	R4, R0			; R0 = Z = (X - XHI)/(1 + X*XHI)
;
; Evaluate Z*P(Z**2)
;
	MOVQ	R0, -(SP)		; Push Z onto the stack
	MULG2	R0, R0			; R0 = Z**2
	POLYG	R0, #GATANLEN1-1, GATANTAB1
					; R0 = P(Z**2)
	MULG2	(SP)+, R0		; R0 = GATAN(Z) = Z*P(Z**2)
	ADDG2	(R6)+, R0		; R0 = GATAN_XHI_LO + GATAN(Z)
	ADDG2	(R6), R0		; R0 = GATAN(X) = GATAN_XHI_HI +
					;      (GATAN_XHI_LO + GATAN(Z))
	RSB				; Return


SMALL:	BRW	SMALL_ARG		; Dummy label used to avoid adding
					;   an extra insrtuction in the 
					;   medium argument logic
;
; Large positive argument logic.
;

LARGE_ARG:
	DIVG3	R0, G_M1.0, R6		; R6 = -W = -1/X
	MULG3	R6, R6, R0		; R0 = W**2
	POLYG	R0, #GATANLEN1-1, GATANTAB1
					; R0 = P(W**2)
	MULG2	R6, R0			; R0 = GATAN(W) = -W*P(W**2)
	ADDG2	G_PI_OVER_2_LO, R0	; 
	ADDG2	G_PI_OVER_2_HI, R0	; R0 = GATAN(X) = PI/2 - GATAN(W)
	RSB				; Return

;
; Logic for negative arguments
;

NEG_ARG:
	SUBW3	#^XBFD8, R0, R6		; Argument is less than 3/32,
	BLSS	SMALL_ARG		;  branch to small argument logic
	CMPW	#^X006D, R6		; Argument is greater than 11,
	BLSS	N_LARGE_ARG		;  branch to large argument logic
;
; Logic for negative medium sized arguments.  Get index into GATAN_TABLE.
;
	ROTL	#-1, R6, R6		; R6 = index into MTH$$AB_ATAN table
	BICL	#-256, R6		; clear high order (unused) bits of ind
	MOVAL	G^MTH$$AB_ATAN_V, R3	; R3 = address of RTL vector entry
	ADDL	G^MTH$$AB_ATAN_V, R3	; R3 = address of MTH$$AB_ATAN table
	MOVB	(R3)[R6], R6		; R6 = offset into GATAN_TABLE
	MOVAQ	GATAN_TABLE[R6], R6	; R6 = pointer to XHI
;
; Compute Z
;
	MOVQ	(R6)+, R2		; R2 = XHI
	MULG3	R2, R0, R4		; R4 = X*XHI
	SUBG3	R4, #1, R4		; R4 = 1 - X*XHI = 1 + X*(-XHI)
	ADDG2	R2, R0			; R0 = X + XHI = X - (-XHI)
	DIVG2	R4, R0			; R0 = Z 
;
; Evaluate Z*P(Z**2)
;
	MOVQ	R0, -(SP)		; Push Z onto the stack
	MULG2	R0, R0			; R0 = Z**2
	POLYG	R0, #GATANLEN1-1, GATANTAB1
					; R0 = P(Z**2)
	MULG2	(SP)+, R0		; R0 = GATAN(Z) = Z*P(Z**2)
	SUBG2	(R6)+, R0		; R0 = GATAN_XHI_LO + GATAN(Z)
	SUBG2	(R6), R0		; R0 = GATAN(X) = GATAN_XHI_HI +
					;      (GATAN_XHI_LO + GATAN(Z))
	RSB				; Return
;
; Logic for large negative  arguments
;

N_LARGE_ARG:
	DIVG3	R0, G_M1.0, R6		; R6 = W = 1/|X|
	MULG3	R6, R6, R0		; R0 = W**2
	POLYG	R0, #GATANLEN1-1, GATANTAB1
					; R0 = P(W**2)
	MULG2	R6, R0			; R0 = GATAN(W) = W*P(W**2)
	SUBG2	G_PI_OVER_2_LO, R0	; 
	SUBG2	G_PI_OVER_2_HI, R0	; R0 = GATAN(X) = GATAN(W) - PI/2
	RSB				; Return

;
; Small argument logic.
;

SMALL_ARG:
	MOVQ	R0, R6			; R6 = argument = X
	BICW	#^X8000, R0 		; R0 = |X|
	CMPW	#^X3E70, R0		; Compare 2^-26 to |X|
	BLSS	1$			; Needs polynomial evaluation
	MOVQ	R6, R0			; Return with answer equal to 
	RSB				;    argument

1$:	MULG2	R0, R0			; R0 = X**2
	POLYG	R0, #GATANLEN2-1, GATANTAB2
					; R0 = Q(X**2)
	MULG2	R6, R0			; R0 = X*Q(X**2)
	ADDG2	R6, R0			; R0 = GATAN(X) = X + X*Q(X**2)
	RSB				; Return


	.SBTTL	MTH$GATAND - Standard G Floating Arc Tangent


;++
; FUNCTIONAL DESCRIPTION:
;
; GATAND - G floating point function
;
; GATAND is computed using the following steps:
; 
;    1. If X > 11 then
;       a. Let W = 1/X.
;       b. Compute GATAND(W) = W*P(W**2), where P is a polynomial of 
;          degree 6.
;       c. Set GATAND(X) = pi/2 - GATAND(W)
;    2. If 3/32 =< X =< 11 then
;       a. Obtain XHI by table look-up.
;       b. Compute Z = (X - XHI)/(1 + X*XHI).
;       c. Compute GATAND(Z) = Z*P(Z**2), where P is a polynomial of 
;          degree 6.
;       d. Obtain GATAND(XHI) by table look-up.  GATAND(XHI) will have
;          two parts - the high order bits, GATAND_XHI_HI, and the low
;          order bits, GATAND_XHI_LO.
;       e. Compute GATAND(X) = GATAND_XHI_HI + (GATAND_XHI_LO + GATAND(Z)).
;    3. If 0 =< X < 3/32 then
;       a. Compute GATAND(X) = X + X*Q(X**2), where Q is a polynomial
;          of degree 6.
;    4. If X < 0 then
;       a. Compute Y = GATAND(|X|) using steps 1 to 3.
;       b. Set GATAND(X) = -Y.
; 
;
; CALLING SEQUENCE:
;
;	Arctangent.wg.v = MTH$GATAND(x.rg.r)
;
; INPUT PARAMETERS:

	LONG = 4			; define longword multiplier
	x = 1 * LONG			; x is an angle in degrees
;
; IMPLICIT INPUTS:	none
;
; OUTPUT PARAMETERS:
;
;	VALUE:	G floating arctangent angle of the argument
;
; IMPLICIT OUTPUTS:	none
;
; SIDE EFFECTS:
;
; Signals:	none
;
; NOTE: This procedure disables floating point underflow, enable integer
; overflow, causes no floating overflow or other arithmetic traps, and
; preserves enables across the call.
;
;---


	.ENTRY	MTH$GATAND, ACMASK	; standard call-by-reference entry
					; disable DV (and FU), enable IV
	MTH$FLAG_JACKET			; flag that this is a jacket procedure in
					; case of an error in special JSB routine
	MOVG	@x(AP), R0		; R0/R1 = arg 
	BSBB	MTH$GATAND_R7		; call special GATAND routine
	RET				; return - result in R0


	.SBTTL	MTH$GATAND2 - Standard G Floating Arctangent With 2 Arguments
;++
; FUNCTIONAL DESCRIPTION:
;
; GATAND2  - G floating point function
;
; GATAND2(X,Y) is computed as following:
;
;	If Y = 0 or X/Y > 2**57, GATAND2(X,Y) = 90 * (sign X)
;	If Y > 0 and X/Y =< 2**57, GATAND2(X,Y) = GATAND(X/Y)
;	If Y < 0 and X/Y =< 2**57, GATAND2(X,Y) = 180 * (sign X) + GATAND(X/Y)
;
;
; CALLING SEQUENCE:
;
;	Arctangent2.wg.v = MTH$GATAND2(x.rg.r, y.rg.r)
;
; INPUT PARAMETERS:

	x = 1 * LONG			; x is the first argument
	y = 2 * LONG			; y is the second argument

; SIDE EFFECTS:	See description of MTH$GATAND 
;
;--


	.ENTRY	MTH$GATAND2, ACMASK	; standard call-by-reference entry
					; disable DV (and FU), enable IV
	MTH$FLAG_JACKET			; flag that this is a jacket procedure in
					; case of an error in special JSB routine
	MOVG	@x(AP), R0		; R0/R1 = arg1 
	MOVG	@y(AP), R2		; R2/R3 = arg2
;
; Test if Y = 0 or X/Y > 2**57
;
	BEQL	INF_DEG			; branch to INF_DEG if Y = 0
	BICW3	#^X800F, R0, R4		; R4 = exponent(X)
	BICW3	#^X800F, R2, R5		; R5 = exponent(Y)
	SUBW	R5, R4			; R4 = exponent(X) - exponent(Y)
	CMPW	R4, #58*16		; compare R4 with 58
	BGTR	INF_DEG			; if X/Y > 2**57, branch to INF_DEG
;
; Test if Y > 0 or Y < 0
;
	TSTW	R2			; test the sign of Y
	BGTR	A2PLUSD			; branch to A2PLUSD if Y > 0
	TSTW	R0			; test the sign of X
	BGEQ	A1PLUSD			; branch to A1PLUSD if X >= 0
;
; Y < 0 and X < 0 and X/Y =< 2**57
;
	BSBB	MTH$GATAND_R7D		; R0/R1 = GATAND(X/Y)
	SUBG2	G_180, R0		; R0/R1 = -180 + GATAND(X/Y)
	RET				; return
;
; Y < 0 and X > 0 and X/Y =< 2**57
;
A1PLUSD:
	BSBB	MTH$GATAND_R7D		; R0/R1 = GATAND(X/Y)
	ADDG2	G_180, R0		; R0/R1 = 180 + GATAND(X/Y)
	RET				; return
;
; Y > 0 and X/Y =< 2**57
;
A2PLUSD:
	BSBB	MTH$GATAND_R7D		; R0/R1 = GATAND(X/Y)
	RET				; return
;
; Y = 0 or X/Y > 2**57
;
INF_DEG:
	TSTW	R0			; test the sign of X
	BGTR	1$			; branch if X > 0
	BEQL	2$			; branch if X = 0
	MOVQ	G_M90, R0	; R0/R1 = GATAND(X/Y) = -90
	RET				; return

1$:	MOVQ	G_90, R0		; R0/R1 = GATAND(X/Y) = 90
	RET				; return

;+
; Here if both X = 0 and Y = 0.  Signal INVALID ARG TO MATH LIBRARY
;-

2$:	ASHQ	#15, #1, R0		; R0/R1 = reserved operand, co180ed
					; to CHF$_MCH_SAVR0/R1 so handlers
					; can change if they want to continue.
	MOVZBL	#MTH$K_INVARGMAT, -(SP)	; code for INVALID ARGMAT TO MATH LIBRARY
	CALLS	#1, G^MTH$$SIGNAL	; Signal SEVERE error
	RET				; return if a handler says SS$_CONTINUE

	.SBTTL	MTH$GATAND_R7 - Special GATAND routine

; Special GATAND - used by the standard routine, and directly.
;
; CALLING SEQUENCES:
;	save anything needed in R0:R7
;	MOVG	...,R0			; input in R0/R1
;	JSB	MTH$GATAND_R7
;	return with result in R0/R1
; Note: This routine is written to avoid causing any integer overflows, floating
; overflows, or floating underflows or divide by 0 conditions, whether enabled or
; not.
;
; REGISTERS USED:
;	R0/R1 - Floating argument then result
;	R0:R5 - POLYG
;	R6/R7 - Y during POLYG



MTH$GATAND_R7D:				; for local use only!
	DIVG2	R2, R0
MTH$GATAND_R7::				; Special GATAND routine
	TSTG	R0			; R6 = X = argument
	BGEQ	POS_ARGD
	BRW	NEG_ARGD		; Branch to negative argument logic
;
; Argument is positive
;
POS_ARGD:
	SUBW3	#^X3FD8, R0, R6		; Argument is less than 3/32,
	BLSS	SMALLD			;  branch to small argument logic
	CMPW	#^X006D, R6		; Argument is greater that 11,
	BLSS	LARGE_ARGD		;  branch to large argument logic
;
; Logic for positive medium sized arguments.  Get pointer into GATAND_TABLE.
;
	ROTL	#-1, R6, R6		; R6 = index into MTH$$AB_ATAN table
	BICL	#-256, R6		; zero high order bits of index
	MOVAL	G^MTH$$AB_ATAN_V, R3	; R3 = address of RTL vector entry
	ADDL	G^MTH$$AB_ATAN_V, R3	; R3 = address of MTH$$AB_ATAN table
	MOVB	(R3)[R6], R6		; R6 = offset into GATAND_TABLE
	MOVAQ	GATAND_TABLE[R6], R6	; R6 = pointer to XHI
;
; Compute z
;
	MOVQ	(R6)+, R2		; R2 = XHI
	MULG3	R2, R0, R4		; R4 = X*XHI
	ADDG2	#1, R4			; R4 = 1 + X*XHI
	SUBG2	R2, R0			; R0 = X - XHI
	DIVG2	R4, R0			; R0 = Z = (X - XHI)/(1 + X*XHI)
;
; Evaluate Z*P(Z**2)
;
	MOVQ	R0, -(SP)		; Push Z onto the stack
	MULG2	R0, R0			; R0 = Z**2
	POLYG	R0, #GATANDLEN1-1, GATANDTAB1
					; R0 = P(Z**2)
	MULG2	(SP)+, R0		; R0 = GATAND(Z) = Z*Q(Z**2)
	ADDG2	(R6)+, R0		; R0 = GATAND_XHI_LO + GATAND(Z)
	ADDG2	(R6), R0		; R0 = GATAND(X) = GATAND_XHI_HI +
					;      (GATAND_XHI_LO + GATAND(Z))
	RSB				; Return


SMALLD:	BRW	SMALL_ARGD		; Dummy label used to avoid adding
					;   an extra insrtuction in the 
					;   medium argument logic
;
; Large positive argument logic.
;

LARGE_ARGD:
	DIVG3	R0, G_M1.0, R6		; R6 = -W = -1/X
	MULG3	R6, R6, R0		; R0 = W**2
	POLYG	R0, #GATANDLEN1-1, GATANDTAB1
					; R0 = P(W**2)
	MULG2	R6, R0			; R0 = -GATAND(Z) = -Z*P(W**2)
	ADDG2	G_90, R0		; R0 = GATAND(X) = 90 - GATAND(Z)
	RSB				; Return

;
; Logic for negative arguments
;

NEG_ARGD:
	SUBW3	#^XBFD8, R0, R6		; Argument is less than 3/32,
	BLSS	SMALL_ARGD		;  branch to small argument logic
	CMPW	#^X006D, R6		; Argument is greater than 11,
	BLSS	N_LARGE_ARGD		;  branch to large argument logic
;
; Logic for negative medium sized arguments.  Get index into GATAND_TABLE.
;
	ROTL	#-1, R6, R6		; R6 = index into MTH$$AB_ATAN table
	BICL	#-256, R6		; clear high order (unused) bits of ind
	MOVAL	G^MTH$$AB_ATAN_V, R3	; R3 = address of RTL vector entry
	ADDL	G^MTH$$AB_ATAN_V, R3	; R3 = address of MTH$$AB_ATAN table
	MOVB	(R3)[R6], R6		; R6 = offset into GATAND_TABLE
	MOVAQ	GATAND_TABLE[R6], R6	; R6 = pointer to XHI
;
; Compute Z
;
	MOVQ	(R6)+, R2		; R2 = XHI
	MULG3	R2, R0, R4		; R4 = X*XHI
	SUBG3	R4, #1, R4		; R4 = 1 - X*XHI = 1 + X*(-XHI)
	ADDG2	R2, R0			; R0 = X + XHI = X - (-XHI)
	DIVG2	R4, R0			; R0 = Z 
;
; Evaluate Z*P(Z**2)
;
	MOVQ	R0, -(SP)		; Push Z onto the stack
	MULG2	R0, R0			; R0 = Z**2
	POLYG	R0, #GATANDLEN1-1, GATANDTAB1
					; R0 = P(Z**2)
	MULG2	(SP)+, R0		; R0 = GATAND(Z) = Z*P(Z**2)
	SUBG2	(R6)+, R0		; R0 = GATAND_XHI_LO + GATAND(Z)
	SUBG2	(R6), R0		; R0 = GATAND(X) = GATAND_XHI_HI +
					;      (GATAND_XHI_LO + GATAND(Z))
	RSB				; Return
;
; Logic for large negative  arguments
;

N_LARGE_ARGD:
	DIVG3	R0, G_M1.0, R6		; R6 = W = 1/|X|
	MULG3	R6, R6, R0		; R0 = W**2
	POLYG	R0, #GATANDLEN1-1, GATANDTAB1
					; R0 = P(W**2)
	MULG2	R6, R0			; R0 = GATAND(W) = W*P(W**2)
	SUBG2	G_90, R0		; R0 = GATAND(X) = GATAND(W) - 90
	RSB				; Return

;
; Small argument logic.
;

SMALL_ARGD:
	MOVG	R0, R6			; R6 = argument = X
	BEQL	3$			;
	BICW	#^X8000, R0 		; R0 = |X|
	CMPW	#^X3E70, R0		; Compare 2^-26 to |X|
	BLSS	1$			; Needs polynomial evaluation
	MULG3	G_PI_OV_180_M_64, R6, R0; R0 = X*(pi/180 - 64)
	BRB	2$			; 
1$:	MULG2	R0, R0			; R0 = X**2
	POLYG	R0, #GATANDLEN2-1, GATANDTAB2
					; R0 = Q(X**2)
	MULG2	R6, R0			; R0 = X*Q(X**2)
2$:	ADDW	#^X60, R6		; R6 = X*2**6
	ADDG2	R6, R0			; R0 = GATAND(X) = X*2**6 + X*Q(X**2)
3$:	RSB				; Return


	.END



	.END

