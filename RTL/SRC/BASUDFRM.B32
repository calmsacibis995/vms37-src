MODULE BAS$$UDF_RM (				! Basic READ memory
		IDENT = '1-005'			! File: BASUDFRM.B32
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:
!
!	BASIC support library - not user callable
!
! ABSTRACT:
!
!	Implement UDF level of abstraction - element transmitter for READ.
!
!
! ENVIRONMENT:
!
!	User access mode - AST reentrant
!
! AUTHOR: Donald G. Petersen, CREATION DATE: 19-Dec-78
!
! MODIFIED BY:
!
! 	DGP 19-Dec-78, : VERSION 1-001
! 1-001	- original.  DGP 19-Dec-78
! 1-002 - Make all routines global.  DGP 20-Dec-78
! 1-003	- Put code in proper PSECT.  JBS 21-DEC-78
! 1-004	- Change prefix for stack frame names to BSF$.  JBS 08-FEB-1979
! 1-005	- Change ISB$L_MAJ_F_PTR to ISB$A_MAJ_F_PTR.  JBS 24-JUL-1979
!--

!<BLF/PAGE>

!
! SWITCHES
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES
!

REQUIRE 'RTLIN:OTSLNK';				! define all linkages

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    BAS$$UDF_RMF0 : JSB_UDF0 NOVALUE,		! Initialize READ memory
    BAS$$UDF_RMF1 : CALL_CCB NOVALUE,		! element transmitter
    BAS$$UDF_RMF9 : JSB_UDF9 NOVALUE;		! end of memory READ

!
! INCLUDE FILES:
!

REQUIRE 'RTLML:OTSLUB';				! Logical unit block offsets

REQUIRE 'RTLML:OTSISB';				! I/O statement block offsets

REQUIRE 'RTLIN:BASFRAME';			! Basic frame offsets from R11

REQUIRE 'RTLIN:RTLPSECT';			! Declare psects macros

LIBRARY 'RTLSTARLE';

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! PSECTS:
!
DECLARE_PSECTS (BAS);				! Declare PSECTs for BAS facility
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    BAS$$UDF_RL1 : CALL_CCB NOVALUE,
    BAS$$REC_RMF0 : JSB_REC0 NOVALUE,
    BAS$$REC_RMF1 : JSB_REC1 NOVALUE,
    BAS$$REC_RMF9 : JSB_REC9 NOVALUE;


GLOBAL ROUTINE BAS$$UDF_RMF0 (FORMAT_ADR) : JSB_UDF0 NOVALUE = 	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	Call REC level of initialization to get all of the buffer pointers set
!	up.
!
!
! FORMAL PARAMETERS:
!
!	FORMAT_ADR.rl.r		not used
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    EXTERNAL REGISTER
	CCB = K_CCB_REG : REF BLOCK [0, BYTE];

    !+
    ! Call record level routine to initialize the various buffer pointers in
    ! the ISB.
    !-

    BAS$$REC_RMF0 ();
    RETURN;
    END;					!End of BAS$$UDF_RM0


GLOBAL ROUTINE BAS$$UDF_RMF1 (ELEM_TYPE, ELEM_SIZE, ELEM_ADR, FORMAT) : CALL_CCB NOVALUE = 	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	Call BAS$$UDF_RL1.  Then update CUR_DATA in the last major frame upon
!	return.  This done on each element transmitter rather than at the end
!	because there could be an embedded function in the element list which
!	does a READ.
!
!
! FORMAL PARAMETERS:
!
!	ELEM_TYPE.rlu.v		Type code of user I/O list element
!	ELEM_SIZE.rlu.v		Size of list element
!	ELEM_ADR.rlu.r		Adr of where to store the element
!				Points to a descriptor for a string
!	FORMAT.rlu.v		Format character following a Prompt string
!
! IMPLICIT INPUTS:
!
!	ISB$A_MAJ_F_PTR		pointer to last major frame
!	LUB$A_BUF_PTR		pointer in input buffer
!
! IMPLICIT OUTPUTS:
!
!	BSF$A_CUR_DTA		pointer to current location in DATA area in last
!				major frame
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    EXTERNAL REGISTER
	CCB = K_CCB_REG : REF BLOCK [0, BYTE];

    LOCAL
	BMF : REF BLOCK [0, BYTE] FIELD (BSF$MAJOR_FRAME);

    !+
    ! Pick up R11 which points into the last major frame from ISB.  Call
    ! BAS$$UDF_RL1 to do the actual element transmit.  Update CUR_DATA in the
    ! frame.  Return.
    !-

    BMF = .CCB [ISB$A_MAJ_F_PTR];
    BAS$$UDF_RL1 (.ELEM_TYPE, .ELEM_SIZE, .ELEM_ADR, .FORMAT);

    !+
    ! Add one to the current buffer pointer because of the general algorithm
    ! INPUT uses.
    !-

    BMF [BSF$A_CUR_DTA] = .CCB [LUB$A_BUF_PTR] + 1;
    RETURN;
    END;					!End of BAS$$UDF_RMF1


GLOBAL ROUTINE BAS$$UDF_RMF9 : JSB_UDF9 NOVALUE = 	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	Call REC level to waste time.
!
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    EXTERNAL REGISTER
	CCB = K_CCB_REG : REF BLOCK [0, BYTE];

    !+
    ! Call record level
    !-

    BAS$$REC_RMF9 ();
    RETURN;
    END;					!End of BAS$$UDF_RMF9

END						!End of module BAS$$UDF_RM

ELUDOM
