MODULE BAS$UPDATE (	! Basic UPDATE construct
		IDENT = '1-006'		! File: BASUPDATE.B32 Edit:FM1006
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:
!	Basic support library - user callable
!
! ABSTRACT:
!	This module is the UPI level of the Basic UPDATE construct.  Initially,
!	it contains only the code for sequential I/O.  This module will set
!	up the I/O data base for the LUN and go directly to the REC level.
!
!
! ENVIRONMENT:
!	User access mode - AST reentrant.
!
! AUTHOR: Donald G. Petersen, CREATION DATE: 27-Feb-79
!
! MODIFIED BY:
!
!	DGP, 27-Feb-79 : VERSION 01
! 1-001	- original.  DGP 27-Feb-79 
! 1-002 - Add Update with count.  DGP 28-Feb-79
! 1-003 - Add Addressing switches.  DGP 18-Jun-79
! 1-004 - Check for virtual array use and read only.  DGP 16-Oct-79
! 1-005 - If no count is specified, use the current record size, not the
!	  buffer size.  DGP 12-Feb-80
! 1-006 - If channel is not already open signal. FM 12-FEB-81.
!--

!
! SWITCHES
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES
!
	REQUIRE 'RTLIN:OTSLNK';		! Define all linkages

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
	BAS$UPDATE_COUN:NOVALUE,		! UPI UPDATE with count
	BAS$UPDATE:NOVALUE;		! UPI level Sequential UPDATE

!
! INCLUDE FILES:
!
	REQUIRE 'RTLML:OTSISB';		! ISB definitions
	REQUIRE 'RTLML:OTSLUB';		! LUB definitions
	REQUIRE 'RTLIN:RTLPSECT';	! Define DECLARE_PSECTS macro
	LIBRARY 'RTLSTARLE';		! Starlet system macros

!
! MACROS:
!
!	NONE

!
! EQUATED SYMBOLS:
!	NONE
!
!
! PSECT DECLARATIONS:
!
	DECLARE_PSECTS(BAS);
!
! OWN STORAGE:
!
!	NONE

!
! EXTERNAL REFERENCES:
!

EXTERNAL LITERAL
    BAS$K_IO_CHANOT : UNSIGNED (8),		! I/O channel not open
    BAS$K_ILLILLACC : UNSIGNED (8);		! illegal or illogical access

EXTERNAL ROUTINE
	BAS$$STOP_IO : NOVALUE,			! Signal I/O errors
	BAS$$REC_UPD:JSB_DO_WRITE NOVALUE,	! REC level processing - RMS interface
					! UPDATE sequential
	BAS$$CB_PUSH:JSB_CB_PUSH NOVALUE,
				! Create LUB/ISB/RAB and push down I/O system
	BAS$$CB_POP:JSB_CB_POP NOVALUE;	! Pop I/O system back one CB


GLOBAL ROUTINE BAS$UPDATE (	! UPDATE sequential
	UNIT			! logical unit number
	) :NOVALUE =	

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine will set up the I/O data base for this LUN if necessary
!	and then go directly to the REC level.  When control is returned to
!	this routine, it pops the CCB off of the I/O system.  The actual inter-
!	face to RMS is done at the REC level.  The current record is updated.
!
! FORMAL PARAMETERS:
!
!	UNIT.rlu.v	logical unit number
!
! IMPLICIT INPUTS:
!
!	LUB$V_VA_USE		indicates virtual array use of the file
!	LUB$V_READ_ONLY		file is read only
!	RAB$W_RSZ		the current buffer size
!
! IMPLICIT OUTPUTS:
!
!	ISB$B_STTM_TYPE		the statement type
!	LUB$V_BLK_USE		indicates non-virtual array use of file
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Signals:
!	BAS$K_ILLILLACC		illegal of illogical access
!
!--

    BEGIN
    GLOBAL REGISTER
	CCB = K_CCB_REG: REF BLOCK[, BYTE];

    !+
    ! Allocate the LUB/ISB/RAB for this unit if necessary.  Store new CB (con-
    ! trol block) in OTS$$A_CUR_LUB.  Store signed unit number in LUB$W_LUN.
    !-

    BAS$$CB_PUSH (.UNIT, LUB$K_ILUN_MIN);

    !+
    ! Now that the data base is in place, store the statement type and  go
    ! directly to the REC level.
    !-

    CCB[ISB$B_STTM_TYPE] = ISB$K_ST_TY_UPD;
!+
! Check for virtual array usage and set block usage
! If channel not already open, signal.
!-
    IF .CCB [LUB$V_VA_USE] OR .CCB [LUB$V_READ_ONLY] THEN BAS$$STOP_IO(BAS$K_ILLILLACC);
    IF ( NOT .CCB [LUB$V_OPENED]) THEN BAS$$STOP_IO (BAS$K_IO_CHANOT);

    
    CCB [LUB$V_BLK_USE] = 1;
    BAS$$REC_UPD(.CCB[RAB$W_RSZ]);

    !+
    ! Now that the UPDATE has been done, pop the CCB off the I/O system.
    !-

    BAS$$CB_POP ();



    END;			!End of BAS$UPDATE

GLOBAL ROUTINE BAS$UPDATE_COUN (	! UPDATE with count
	UNIT,			! logical unit number
	COUNT			! No. of bytes in record
	) :NOVALUE =	

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine will set up the I/O data base for this LUN if necessary
!	and then go directly to the REC level.  When control is returned to
!	this routine, it pops the CCB off of the I/O system.  The actual inter-
!	face to RMS is done at the REC level.  The current record is updated.
!
! FORMAL PARAMETERS:
!
!	UNIT.rlu.v	logical unit number
!	COUNT.rl.v	No. of bytes in the record
!
! IMPLICIT INPUTS:
!
!	LUB$V_VA_USE		virtual array use of file
!	LUB$V_READ_ONLY		file is read only
!
! IMPLICIT OUTPUTS:
!
!	ISB$B_STTM_TYPE		the statement type
!	LUB$V_BLK_USE		non-virtual array use of file
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Signals:
!	BAS$K_ILLILLACC		illegal or illogical access
!
!--

    BEGIN
    GLOBAL REGISTER
	CCB = K_CCB_REG: REF BLOCK[, BYTE];

    !+
    ! Allocate the LUB/ISB/RAB for this unit if necessary.  Store new CB (con-
    ! trol block) in OTS$$A_CUR_LUB.  Store signed unit number in LUB$W_LUN.
    !-

    BAS$$CB_PUSH (.UNIT, LUB$K_ILUN_MIN);

    !+
    ! Now that the data base is in place, store the statement type and  go
    ! directly to the REC level.
    !-

    CCB[ISB$B_STTM_TYPE] = ISB$K_ST_TY_UPD;
!+
! Check for virtual array usage and set block usage
!-
    IF .CCB [LUB$V_VA_USE] OR .CCB [LUB$V_READ_ONLY] THEN BAS$$STOP_IO(BAS$K_ILLILLACC);
    CCB [LUB$V_BLK_USE] = 1;
    BAS$$REC_UPD(.COUNT);

    !+
    ! Now that the UPDATE has been done, pop the CCB off the I/O system.
    !-

    BAS$$CB_POP ();



    END;			!End of BAS$UPDATE

END				!End of module - BAS$UPDATE
ELUDOM
