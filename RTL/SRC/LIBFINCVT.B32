%TITLE 'LIB$$FIND_CVT_PATH  for internal use of LIB$CVT_DX_DX'
MODULE LIB$$FIND_CVT_PATH (			! DFA of general data type conversion.
		IDENT = '1-004'			! File:LIBFINCVT.B32 Edit: FM1004
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	General Utility Library
!
! ABSTRACT:
!
!	This module contains LIB$$FIND_CVT_PATH routine which is called only
!	by LIB$CVT_DX_DX routine.  The reason that these two routines are in
!	different modules is because of anticipation of future updates to this
!	data conversion routines.  They are very large, and it is easier to
!	update them seperately.
!
! ENVIRONMENT:	User mode - AST reentrant
!
! AUTHOR:	Farokh Morshed		01-09-1981
!
! MODIFIED BY:
!
! 1-001	- Original.  FM1001	01-09-1981
! 1-002 - Put in a check for DSC$W_LENGTH to be 1 when class A, or NCA, and 
!	  if class NCA stride must be 1.  FM 9-9-81
! 1-003 - Put in a new data type, DSC$K_DTYPE_VT.  FM 1-DEC-81.
! 1-004 - Put in a feature where DST_INFO [D_LEN] can be picked up for 
!	  LIB$CVT_DX_DX. FM 2-DEC-81.
!--


%SBTTL 'Declarations'
!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!+
! LINKAGE
!-

LINKAGE
    JSB_R1 = JSB (REGISTER = 0, REGISTER = 1) : PRESERVE (0, 1);

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    LIB$$FIND_CVT_PATH;				! Routine to find the conversion

						! being done and report any
						! unsupported fields in the descriptors.
!
! INCLUDE FILES:
!

LIBRARY 'RTLSTARLE';				! System symbols, from SYS$LIBRARY:STARLET.L32

REQUIRE 'RTLIN:RTLPSECT';			! Define PSECT declarations macros

!
! PSECTS:
!
DECLARE_PSECTS (LIB);				! Declare PSECTs for LIB$ facility
!
! OWN STORAGE:
!
!	NONE

%SBTTL 'Deterministic Finite Automata for LIB$CVT_DX_DX'

GLOBAL ROUTINE LIB$$FIND_CVT_PATH (		! Deterministic Finite Automata
    						! that will parse the source
    						! and destination descriptors.
	SOURCE					! Source descriptor that was passed
						! to LIB$CVT_DX_DX.
    , DESTINATION				! Destination descriptor that was
						! passed to LIB$CVT_DX_DX.
    , SRC_INFO					! Address of a record that this
						! routine will put the source
						! information in.
    , DST_INFO					! Address of a record that this
						! routine will put the destination
						! information in.
    , CVT_PATH					! This code will determine what
						! label of the LIB$CVT_DX_DX
						! routine's CASE statement will
						! be taken.
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine is comprised of a Deterministic Finite Automaton, defined
!	as a 5 tuple :
!	STATES		: There is a state for each CLASS, and CLASS, DATA TYPE
!			  combination.
!	Alphabet	: Classes and Data types.
!	Mappings	: M(CLASS_S , DTYPE_B) := CLASS_S_DTYPE_B
!			  . . . . . . . . . . . . . . . . . . . .
!			  . . . . . . . . . . . . . . . . . . . .
!			  M(CLASS_D , DTYPE_W) := error
!			  . . . . . . . . . . . . . . . . . . . .
!			  . . . . . . . . . . . . . . . . . . . .
!	Start state	:
!	Final states	: All possible combinations of CLASS, DTYPE.
!			  Some of these combinations are allowed, others
!			  are not. The error combinations are denoted by
!			  negative numbers as states.
!
! MAINTENANCE OF THIS ROUTINE :
!
!This routine knows about all classes and data types of Appendix C V8.3.
!(You may want to update the above line everytime a change is made)
!To make an already existing CLASS, DATA TYPE combination a valid one, as
!opposed to an error you must :
!	1. Insert the symbol for that data type in DTYPE_TABLE in place of the
!	   error state.
!	2. Define a FINAL_STATE for this combination.
!	3. Give it an action routine.
!
!To add a new data type you must :
!	1. Increment K_MAX_DATA_TYPES.
!	2. Set K_MAX_DTYPE_STA to value of the new data type.
!	3. Does any of the following need to be changed ?
!		a. K_SMLFINSTA
!		b. K_LRGFINSTA
!		c. K_TOP_SD
!		d. K_BOTTOM_SD
!	4. Define a new FINAL_STATE.
!	5. Each category in DTYPE_TABLE must have a new entry for the data type.
!	   Note that the position (starting at 0) of each entry in each category is equivalent
!	   to the data type value.
!	6. Add the new lable into the action routines CASE statement and
!	   the sub-CASE statements in LIB$CVT_DX_DX will need to be modified to
!	   include this new data type.
!
!To add a new class you must :
!	1. Increment K_MAX_CLASSES
!	2. Set K_MAX_CLASS_STA to value of the new class.
!	3. Increment K_ACTUAL_CLASSES.
!	4. Make a new K_STATEx_CLASS_y, where x is class value and y is the
!	   symbol of the class.
!	5. Make a new FINAL_STATE.
!	6. Add a new category to the STATES structure at the end, with a index
!	   value of one higher than the last category.
!	7. Make a new entry in CLASS_TABLE.
!	8. Make a new category in DTYPE_TABLE.
!	9. Make a new lable in the action routine CASE statement.
!
!
! CALLING SEQUENCE:
!
!	ret_status.wlc.v = FIND_CVT_PATH ( SOURCE.rx.dx,
!				      DESTINATION.rx.dx,
!				      SRC_INFO.wr.r,
!				      DST_INFO.wr.r,
!				      CVT_PATH.wlu.r )
!
! FORMAL PARAMETERS:
!
!	SOURCE		Address of source descriptor passed to LIB$CVT_DX_DX.
!	DESTINATION	Address of destination descriptor passed to LIB$CVT_DX_DX.
!	SRC_INFO	Address of a record in LIB$CVT_DX_DX.
!	DST_INFO	Address of a record in LIB$CVT_DX_DX.
!	CVT_PATH	Address of a longword in LIB$CVT_DX_DX.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS: (or ROUTINE VALUE:)
!
!	K_UNSCLAROU		: -1 Unsupported CLASS by routine.
!	K_UNSDTYROU		: -2 Unsupported DTYPE by routine.
!	K_UNSDESROU		: -3 Unsupported descriptor by routine.
!	K_UNSDESSTA		: -4 Unsupported descriptor by standard.
!	K_UNSCLASTA		: -5 Unsupported CLASS by standard.
!	K_UNSDTYSTA		: -6 Unsupported DTYPE by standard.
!	K_INVNBDS		: -7 Invalid NBDS because array size is greater
!				     than WU or dimension is not one.
!	K_SUPPORTED		:  1 This descriptor is supported.
!
! SIDE EFFECTS:
!
!	Caller of LIB$CVT_DX_DX must have LIB$EMULATE as a handler, if the
!	source or destination descriptor explicitely ask for G, H, O conversions.
!
!--

    BEGIN

    BUILTIN
	CVTTP,
	CVTSP,
	CVTPT,
	CVTPS,
	CMPP;

!+
! MACRO
!-
!<BLF/MACRO>

    MACRO
!+
! These MACROs are used for clarity of code, since there is not builtin for them.
!-
	CVTGH =
	    LIB$$CVT_CVTGH_R1 %,
!+
! These MACROs define portions of intermediate data buffer.
!-
	LONG_1 =
	    0, 0, 32, 0 %,
	LONG_2 =
	    4, 0, 32, 0 %,
	LONG_3 =
	    8, 0, 32, 0 %,
	LONG_4 =
	    12, 0, 32, 0 %,
	LONG_5 =
	    16, 0, 32, 0 %,
	LONG_6 =
	    20, 0, 32, 0 %,
	LONG_7 =
	    24, 0, 32, 0 %,
	LONG_8 =
	    28, 0, 32, 0 %,
	S_LONG_1 =
	    0, 0, 32, 1 %,
	S_LONG_2 =
	    4, 0, 32, 1 %,
	S_BYTE_1 =
	    0, 0, 8, 1 %,
	BYTE_1 =
	    0, 0, 8, 0 %,
	BYTE_2 =
	    1, 0, 8, 0 %,
	S_WORD_1 =
	    0, 0, 16, 1 %,
	WORD_1 =
	    0, 0, 16, 0 %,
	WORD_2 =
	    2, 0, 16, 0 %,
	NIBBLE_1 =
	    0, 0, 4, 0 %,
!+
! This MACRO calculates final states given the state and the token.
!-
	FINAL_STATE (CLASS, DATA_TYPE) =
	    CLASS*K_MAX_DATA_TYPES + DATA_TYPE %,
!+
! This macro is used for SRC_INFO or DST_INFO scale field.
!-
	M_SCALE =
	    0, 0, 8, 1 %,
!+
! This macro is used for SRC_INFO or DST_INFO length field.
!-
	M_LEN =
	    5, 0, 16, 0 %,
!+
! Define the start state data structure of the DFA.
!-
	START_STATE =
	    VECTOR [K_MAX_CLASSES, BYTE, SIGNED] %;

!+
! EXTERNAL
!-

    EXTERNAL ROUTINE
	LIB$STOP : NOVALUE,
	CVTGH : JSB_R1 NOVALUE;

!+
! These are the translation tables used when translating from or to packed decimal.
!-

    EXTERNAL
	LIB$AB_CVTTP_U,
	LIB$AB_CVT_O_U,
	LIB$AB_CVTTP_O,
	LIB$AB_CVT_U_O,
	LIB$AB_CVTPT_U,
	LIB$AB_CVTPT_O,
	LIB$AB_CVTPT_Z,
	LIB$AB_CVTTP_Z;

    EXTERNAL LITERAL 				! Condition value symbols
	LIB$_FATERRLIB;				! Fatal error in library.


!+
! FIELD DECLARATIONS
!-

    FIELD
	SRC_INFO_FIELDS =
	    SET
	    S_SCALE = [0, 0, 8, 1],
	    S_POINTER = [1, 0, 32, 0],
	    S_LEN = [5, 0, 16, 0],
	    S_SIGN = [7, 0, 1, 0]
	    TES;

    FIELD
	DST_INFO_FIELDS =
	    SET
	    D_SCALE = [0, 0, 8, 1],
	    D_LEN = [5, 0, 16, 0]
	    TES;

!+
! Define some literals.
!-

    LITERAL
!+
!Status returned by FIND_CVT_PATH.
!-
	K_UNSCLAROU = -1,			! Unsupported CLASS by routine.
	K_UNSDTYROU = -2,			! Unsupported DATA TYPE by routine.
	K_UNSDESROU = -3,			! Unsupported descriptor by routine.
	K_UNSDESSTA = -4,			! Unsupported descriptor by standard.
	K_UNSCLASTA = -5,			! Unsupported CLASS by standard.
	K_UNSDTYSTA = -6,			! Unsupported DTYPE by standard
	K_INVNBDS = -7,				! Invalid NBDS
						! because either array size is larger
						! than a WU or it is not a one
						! dimensional array.
	K_SUPPORTED = 1,			! This descriptor is supported, and valid.
!+
!Some general values :
!-
	K_INTMED_DATA_LENGTH = 32,		! Intermediate data buffer length
	K_LRGST_WU = 65535,
	K_LRGST_LU = 4294967295,		! Largest unsigned longword.
	K_LRGST_NEG_L = -2147483648,		! Largest negative longword.
	K_LRGCLSSUP = DSC$K_CLASS_VS,		! Largest CLASS supported by routine
	K_SMLCLSSUP = DSC$K_CLASS_S,		! Smallest CLASS supported by routine
	K_MAX_DATA_TYPES = 38,			!Total number of DATA TYPES in the standard
	K_MAX_CLASSES = 15,			!Total number of classes supported,
						!Including the error case 0.
	K_MIN_CLASS = DSC$K_CLASS_S,		!Smalles class supported.
	K_MAX_CLASS = DSC$K_CLASS_VS,		!Largest class supported.
	K_MAX_CLASS_STA = DSC$K_CLASS_UBA,	!Max. class number supported by standard.
	K_MAX_DTYPE_STA = DSC$K_DTYPE_VT,	!Max. data type number supported by standard.
	K_ACTUAL_CLASSES = 6,			!Total classes that are allowed by the STATES table.
	K_MSTNEGERR = -7,			!Most negative error state
	K_SMLFINSTA = FINAL_STATE (DSC$K_CLASS_S, DSC$K_DTYPE_BU),	!Smallest final state supported.
	K_LRGFINSTA = FINAL_STATE (DSC$K_CLASS_VS, DSC$K_DTYPE_VT),	!Largest final state supported.
	K_TOP_SD = FINAL_STATE (DSC$K_CLASS_SD, DSC$K_DTYPE_H),	!Top state for class SD.
	K_BOTTOM_SD = FINAL_STATE (DSC$K_CLASS_SD, DSC$K_DTYPE_B),	!Bottom state for class SD.
!+
!These are the values of the members of K_ACTUAL_CLASSES :
!-
	K_STATE1_CLASS_S = DSC$K_CLASS_S,
	K_STATE2_CLASS_D = DSC$K_CLASS_D,
	K_STATE4_CLASS_A = DSC$K_CLASS_A,
	K_STATE9_CLASS_SD = DSC$K_CLASS_SD,
	K_STATE10_CLASS_NCA = DSC$K_CLASS_NCA,
	K_STATE11_CLASS_VS = DSC$K_CLASS_VS,
!+
!These are the final states that are valid CLASS, DATA TYPE combinations.
!The rest of the final states are error states.
!The first argument to the macro is CLASS, and the second is the DATA TYPE.
!-
	K_S_BU = FINAL_STATE (DSC$K_CLASS_S, DSC$K_DTYPE_BU),
	K_S_WU = FINAL_STATE (DSC$K_CLASS_S, DSC$K_DTYPE_WU),
	K_S_LU = FINAL_STATE (DSC$K_CLASS_S, DSC$K_DTYPE_LU),
	K_S_B = FINAL_STATE (DSC$K_CLASS_S, DSC$K_DTYPE_B),
	K_S_W = FINAL_STATE (DSC$K_CLASS_S, DSC$K_DTYPE_W),
	K_S_L = FINAL_STATE (DSC$K_CLASS_S, DSC$K_DTYPE_L),
	K_S_Q = FINAL_STATE (DSC$K_CLASS_S, DSC$K_DTYPE_Q),
	K_S_F = FINAL_STATE (DSC$K_CLASS_S, DSC$K_DTYPE_F),
	K_S_D = FINAL_STATE (DSC$K_CLASS_S, DSC$K_DTYPE_D),
	K_S_T = FINAL_STATE (DSC$K_CLASS_S, DSC$K_DTYPE_T),
	K_S_NU = FINAL_STATE (DSC$K_CLASS_S, DSC$K_DTYPE_NU),
	K_S_NL = FINAL_STATE (DSC$K_CLASS_S, DSC$K_DTYPE_NL),
	K_S_NLO = FINAL_STATE (DSC$K_CLASS_S, DSC$K_DTYPE_NLO),
	K_S_NR = FINAL_STATE (DSC$K_CLASS_S, DSC$K_DTYPE_NR),
	K_S_NRO = FINAL_STATE (DSC$K_CLASS_S, DSC$K_DTYPE_NRO),
	K_S_NZ = FINAL_STATE (DSC$K_CLASS_S, DSC$K_DTYPE_NZ),
	K_S_P = FINAL_STATE (DSC$K_CLASS_S, DSC$K_DTYPE_P),
	K_S_G = FINAL_STATE (DSC$K_CLASS_S, DSC$K_DTYPE_G),
	K_S_H = FINAL_STATE (DSC$K_CLASS_S, DSC$K_DTYPE_H),
	K_D_T = FINAL_STATE (DSC$K_CLASS_D, DSC$K_DTYPE_T),
	K_A_BU = FINAL_STATE (DSC$K_CLASS_A, DSC$K_DTYPE_BU),
	K_A_T = FINAL_STATE (DSC$K_CLASS_A, DSC$K_DTYPE_T),
	K_SD_BU = FINAL_STATE (DSC$K_CLASS_SD, DSC$K_DTYPE_BU),
	K_SD_WU = FINAL_STATE (DSC$K_CLASS_SD, DSC$K_DTYPE_WU),
	K_SD_LU = FINAL_STATE (DSC$K_CLASS_SD, DSC$K_DTYPE_LU),
	K_SD_B = FINAL_STATE (DSC$K_CLASS_SD, DSC$K_DTYPE_B),
	K_SD_W = FINAL_STATE (DSC$K_CLASS_SD, DSC$K_DTYPE_W),
	K_SD_L = FINAL_STATE (DSC$K_CLASS_SD, DSC$K_DTYPE_L),
	K_SD_Q = FINAL_STATE (DSC$K_CLASS_SD, DSC$K_DTYPE_Q),
	K_SD_F = FINAL_STATE (DSC$K_CLASS_SD, DSC$K_DTYPE_F),
	K_SD_D = FINAL_STATE (DSC$K_CLASS_SD, DSC$K_DTYPE_D),
	K_SD_G = FINAL_STATE (DSC$K_CLASS_SD, DSC$K_DTYPE_G),
	K_SD_H = FINAL_STATE (DSC$K_CLASS_SD, DSC$K_DTYPE_H),
	K_SD_T = FINAL_STATE (DSC$K_CLASS_SD, DSC$K_DTYPE_T),
	K_SD_NU = FINAL_STATE (DSC$K_CLASS_SD, DSC$K_DTYPE_NU),
	K_SD_NL = FINAL_STATE (DSC$K_CLASS_SD, DSC$K_DTYPE_NL),
	K_SD_NLO = FINAL_STATE (DSC$K_CLASS_SD, DSC$K_DTYPE_NLO),
	K_SD_NR = FINAL_STATE (DSC$K_CLASS_SD, DSC$K_DTYPE_NR),
	K_SD_NRO = FINAL_STATE (DSC$K_CLASS_SD, DSC$K_DTYPE_NRO),
	K_SD_NZ = FINAL_STATE (DSC$K_CLASS_SD, DSC$K_DTYPE_NZ),
	K_SD_P = FINAL_STATE (DSC$K_CLASS_SD, DSC$K_DTYPE_P),
	K_NCA_BU = FINAL_STATE (DSC$K_CLASS_NCA, DSC$K_DTYPE_BU),
	K_NCA_T = FINAL_STATE (DSC$K_CLASS_NCA, DSC$K_DTYPE_T),
	K_VS_T = FINAL_STATE (DSC$K_CLASS_VS, DSC$K_DTYPE_T),
	K_VS_VT = FINAL_STATE (DSC$K_CLASS_VS, DSC$K_DTYPE_VT),
!+
! These are the left or right hand side of the conversion index.
!-
	K_SMLINT = 1,
	K_LRGINT = 2,
	K_SMLFLT = 3,
	K_LRGFLT = 4,
	K_DEC = 5,
	K_NBDS = 6,
	K_TOT_CAT = 6;

!+
! Define two structures.
! START_STATE is just a vector of bytes, so we just use a macro to define it.
! STATES is a structure that we put all the states in other than the first state,
! and of course the final states and the states that never get used such as
! the states that contain non-supported CLASSes will not be in this structure.
!-

    STRUCTURE
	STATES [STATE, TOKEN] =
	    [K_ACTUAL_CLASSES*K_MAX_DATA_TYPES]
	    (STATES + (K_MAX_DATA_TYPES*
	    BEGIN

	    CASE STATE FROM K_MIN_CLASS TO K_MAX_CLASS OF
		SET

		[K_STATE1_CLASS_S] :
		    0;

		[K_STATE2_CLASS_D] :
		    1;

		[K_STATE4_CLASS_A] :
		    2;

		[K_STATE9_CLASS_SD] :
		    3;

		[K_STATE10_CLASS_NCA] :
		    4;

		[K_STATE11_CLASS_VS] :
		    5;

		[INRANGE, OUTRANGE] :
		    BEGIN
		    LIB$STOP (LIB$_FATERRLIB);
		    0
		    END;
		TES

	    END
	    ) + TOKEN)<0, %BPUNIT, 1>;

!+
! This is the start state entries.
! For each CLASS in the standard there is an entry here.  They are :
!       Z     ,S    ,D    ,V     ,A
!      ,P     ,none ,J    ,none  ,SD
!      ,NCA   ,VS   ,VSA  ,UBS   ,UBA.
!-

    BIND
	CLASS_TABLE = UPLIT BYTE
     %( Start state.  All classes. )%
     (K_UNSCLAROU,DSC$K_CLASS_S,DSC$K_CLASS_D,K_UNSCLAROU,DSC$K_CLASS_A
     ,K_UNSCLAROU,K_UNSCLASTA,K_UNSCLAROU,K_UNSCLASTA,DSC$K_CLASS_SD
     ,DSC$K_CLASS_NCA,DSC$K_CLASS_VS,K_UNSCLAROU,K_UNSCLAROU,K_UNSCLAROU) : START_STATE;

!+
! This is the rest of the state table.  It is seperate because of space efficiency
! Each state contains entries for each data type supported by the standard.
! Note that for space efficiency The final states are not in the vector.
! Also since each state represents a supported CLASS, if a CLASS is not
! supported ( by the standard or routine ), then the state has no entry in
! the vector.  The index table for the vector will index to the proper place
! in the vector below.
! This table shows graphically what descriptors are valid.
!                                  DSC$K__DTYPE__x
!                  BU WU LU B W L Q F D G H T NU NL NLO NR NRO NZ P VT
!DSC$K__CLASS__S   x  x  x  x x x x x x x x x x  x  x   x  x   x  x
!DSC$K__CLASS__D                            x
!DSC$K__CLASS__SD           x x x x x x x x x x  x  x   x  x   x  x
!DSC$K__CLASS__VS                           x                        x
!DSC$K__CLASS__A   x                        x
!DSC$K__CLASS__NCA x                        x
!
!
!Note that these data types are hard coded in ( zero based vector, and position
!of each data type is determined be the value of the symbol ) so if data type
!values are ever rearranged this table must be rearranged.
!-

    BIND
	DTYPE_TABLE = UPLIT BYTE
     %( State zero. Class z. )%
     %( State one.  Class s. )%
     (K_UNSDTYROU,K_UNSDTYROU,DSC$K_DTYPE_BU,DSC$K_DTYPE_WU,DSC$K_DTYPE_LU
     ,K_UNSDTYROU,DSC$K_DTYPE_B,DSC$K_DTYPE_W,DSC$K_DTYPE_L,DSC$K_DTYPE_Q
     ,DSC$K_DTYPE_F,DSC$K_DTYPE_D,K_UNSDTYROU,K_UNSDTYROU,DSC$K_DTYPE_T
     ,DSC$K_DTYPE_NU,DSC$K_DTYPE_NL,DSC$K_DTYPE_NLO,DSC$K_DTYPE_NR,DSC$K_DTYPE_NRO
     ,DSC$K_DTYPE_NZ,DSC$K_DTYPE_P,K_UNSDTYROU,K_UNSDTYROU,K_UNSDESSTA
     ,K_UNSDTYROU,K_UNSDTYROU,DSC$K_DTYPE_G,DSC$K_DTYPE_H,K_UNSDTYROU
     ,K_UNSDTYROU,K_UNSDTYROU,K_UNSDTYROU,K_UNSDTYROU,K_UNSDTYROU
     ,K_UNSDESSTA,K_UNSDESSTA,K_UNSDESSTA
     %( State two.  Class d. )%
     ,K_UNSDESSTA,K_UNSDESSTA,K_UNSDESSTA,K_UNSDESSTA,K_UNSDESSTA
     ,K_UNSDESSTA,K_UNSDESSTA,K_UNSDESSTA,K_UNSDESSTA,K_UNSDESSTA
     ,K_UNSDESSTA,K_UNSDESSTA,K_UNSDESSTA,K_UNSDESSTA,DSC$K_DTYPE_T
     ,K_UNSDESSTA,K_UNSDESSTA,K_UNSDESSTA,K_UNSDESSTA,K_UNSDESSTA
     ,K_UNSDESSTA,K_UNSDESSTA,K_UNSDESSTA,K_UNSDESSTA,K_UNSDESSTA
     ,K_UNSDESSTA,K_UNSDESSTA,K_UNSDESSTA,K_UNSDESSTA,K_UNSDESSTA
     ,K_UNSDESSTA,K_UNSDESSTA,K_UNSDESSTA,K_UNSDESSTA,K_UNSDESSTA
     ,K_UNSDESSTA,K_UNSDESSTA,K_UNSDESSTA
     %( State three.  Class v. )%
     %( State four.  Class a. )%
     ,K_UNSDTYROU,K_UNSDTYROU,DSC$K_DTYPE_BU,K_UNSDESROU,K_UNSDESROU
     ,K_UNSDTYROU,K_UNSDESROU,K_UNSDESROU,K_UNSDESROU,K_UNSDESROU
     ,K_UNSDESROU,K_UNSDESROU,K_UNSDTYROU,K_UNSDTYROU,DSC$K_DTYPE_T
     ,K_UNSDESSTA,K_UNSDESSTA,K_UNSDESSTA,K_UNSDESSTA,K_UNSDESSTA
     ,K_UNSDESSTA,K_UNSDESSTA,K_UNSDESSTA,K_UNSDESSTA,K_UNSDTYROU
     ,K_UNSDTYROU,K_UNSDTYROU,K_UNSDESROU,K_UNSDESROU,K_UNSDTYROU
     ,K_UNSDESSTA,K_UNSDTYROU,K_UNSDESSTA,K_UNSDESSTA,K_UNSDESSTA
     ,K_UNSDESSTA,K_UNSDESSTA,K_UNSDESSTA
     %( State five.  Class p. )%
     %( State six.  Class 'undefined' )%
     %( State seven.  Class j. )%
     %( State eight.  Class 'undefined' )%
     %( State nine.  Class sd. )%
     ,K_UNSDESSTA,K_UNSDESSTA,K_UNSDESSTA,K_UNSDESSTA,K_UNSDESSTA
     ,K_UNSDESSTA,DSC$K_DTYPE_B,DSC$K_DTYPE_W,DSC$K_DTYPE_L,DSC$K_DTYPE_Q
     ,DSC$K_DTYPE_F,DSC$K_DTYPE_D,K_UNSDESSTA,K_UNSDESSTA,DSC$K_DTYPE_T
     ,DSC$K_DTYPE_NU,DSC$K_DTYPE_NL,DSC$K_DTYPE_NLO,DSC$K_DTYPE_NR,DSC$K_DTYPE_NRO
     ,DSC$K_DTYPE_NZ,DSC$K_DTYPE_P,K_UNSDESSTA,K_UNSDESSTA,K_UNSDESSTA
     ,K_UNSDESSTA,K_UNSDTYROU,DSC$K_DTYPE_G,DSC$K_DTYPE_H,K_UNSDESSTA
     ,K_UNSDESSTA,K_UNSDESSTA,K_UNSDESSTA,K_UNSDESSTA,K_UNSDESSTA
     ,K_UNSDESSTA,K_UNSDESSTA,K_UNSDESSTA
     %( State ten.  Class nca. )%
     ,K_UNSDTYROU,K_UNSDTYROU,DSC$K_DTYPE_BU,K_UNSDESROU,K_UNSDESROU
     ,K_UNSDTYROU,K_UNSDESROU,K_UNSDESROU,K_UNSDESROU,K_UNSDESROU
     ,K_UNSDESROU,K_UNSDESROU,K_UNSDTYROU,K_UNSDTYROU,DSC$K_DTYPE_T
     ,K_UNSDESSTA,K_UNSDESSTA,K_UNSDESSTA,K_UNSDESSTA,K_UNSDESSTA
     ,K_UNSDESSTA,K_UNSDESSTA,K_UNSDESSTA,K_UNSDESSTA,K_UNSDTYROU
     ,K_UNSDTYROU,K_UNSDTYROU,K_UNSDESROU,K_UNSDESROU,K_UNSDTYROU
     ,K_UNSDESSTA,K_UNSDTYROU,K_UNSDESSTA,K_UNSDESSTA,K_UNSDESSTA
     ,K_UNSDESSTA,K_UNSDESSTA,K_UNSDESSTA
     %( State eleven.  Class vs. )%
     ,K_UNSDESSTA,K_UNSDESSTA,K_UNSDESSTA,K_UNSDESSTA,K_UNSDESSTA
     ,K_UNSDESSTA,K_UNSDESSTA,K_UNSDESSTA,K_UNSDESSTA,K_UNSDESSTA
     ,K_UNSDESSTA,K_UNSDESSTA,K_UNSDESSTA,K_UNSDESSTA,DSC$K_DTYPE_T
     ,K_UNSDESSTA,K_UNSDESSTA,K_UNSDESSTA,K_UNSDESSTA,K_UNSDESSTA
     ,K_UNSDESSTA,K_UNSDESSTA,K_UNSDESSTA,K_UNSDESSTA,K_UNSDESSTA
     ,K_UNSDESSTA,K_UNSDESSTA,K_UNSDESSTA,K_UNSDESSTA,K_UNSDESSTA
     ,K_UNSDESSTA,K_UNSDESSTA,K_UNSDESSTA,K_UNSDESSTA,K_UNSDESSTA
     ,K_UNSDESSTA,K_UNSDESSTA,DSC$K_DTYPE_VT
     %( State twelve.  Class vsa. )%
     %( State thirteen.  Class ubs. )%
     %( State fourteen.  Class uba. )%
     %( Add more states below )%
	) : STATES;

    LOCAL
	STATUS,					! Status of this routine
	STATE,					! State
	CLASS,					! Current CLASS being looked at
	DTYPE,					! Current DTYPE being looked at
	TOKEN,					! The value of each data type supported
	LEFT_CVT : VECTOR [1],			! Left side of conversion index.
	RIGHT_CVT : VECTOR [1],			! Right side of conversion index.
	LEFT_OR_RIGHT_CVT : REF VECTOR,		! Left or right side of conversion index.
	SRC_OR_DST_INFO : REF BLOCK [, BYTE],	! Source or destination info.
	SRC_OR_DST : REF BLOCK [, BYTE],	! Source or destination.
	TEMP_BUF : BLOCK [K_INTMED_DATA_LENGTH, BYTE];	! Temporary buffer for reshuffling things.

    MAP
	SOURCE : REF BLOCK [, BYTE],
	DESTINATION : REF BLOCK [, BYTE],
	SRC_INFO : REF BLOCK [, BYTE] FIELD (SRC_INFO_FIELDS),
	DST_INFO : REF BLOCK [, BYTE] FIELD (DST_INFO_FIELDS);

!+
! Traverse through the state table twice.  Once for source, and once for
! destination descriptor.
! Each time come up with a final state that indicates which left hand side
! (for the first traversing), or right hand side (for the second traversing) of
! conversion we have got, e.g. SMLINT, or LRGFLT, etc.
! The action codes also build SRC_INFO, and DST_INFO, and they do
! the conversions to the intermediate values.
! After we have the left hand side of conversion for source and the right hand
! side of conversion for destination
! descriptor, then stick them in a formula that maps these two into
! one final answer that indicates which general CLASS, DTYPE is being
! converted to which general CLASS, DTYPE, e.g. SMLINT_LRGFLT, or DEC_SMLFLT, etc.
! These final answers are the output parameter CVT_PATH that will end up as the
! index to the CASE statement in LIB$CVT_DX_DX.
!-
!+
! This loop is from 0 to 3, but we EXITLOOP at 2 because that is the second time
! through the loop and the end of the road.
! When the state table indicates an error, or we detect an error in an action routine,
! we will just EXITLOOP with the value given by the state table, or of our own choice.
! Note that we EXITLOOP when we detect errors in the action routines, e.g. if array
! size is greater than a WU.
!-
    BEGIN
    STATUS = (INCRU TURN FROM 0 TO 3 DO
	BEGIN
!+
! Determine CLASS and DTYPE of this go around, also set up LEFT_OR_RIGHT_CVT,
! and SRC_OR_DST, and SRC_OR_DST_INFO.
! If this is the third time through this loop, we are finished.
!-

	CASE .TURN FROM 0 TO 2 OF
	    SET

	    [0] :
		BEGIN
		CLASS = .SOURCE [DSC$B_CLASS];
		DTYPE = .SOURCE [DSC$B_DTYPE];
		SRC_OR_DST = .SOURCE;
		SRC_OR_DST_INFO = .SRC_INFO;
		LEFT_OR_RIGHT_CVT = LEFT_CVT;
		END;

	    [1] :
		BEGIN
		CLASS = .DESTINATION [DSC$B_CLASS];
		DTYPE = .DESTINATION [DSC$B_DTYPE];
		SRC_OR_DST = .DESTINATION;
		SRC_OR_DST_INFO = .DST_INFO;
		LEFT_OR_RIGHT_CVT = RIGHT_CVT;
		END;

	    [2] :
		EXITLOOP K_SUPPORTED;
	    TES;

!+
! Filter out the out-of-range CLASS and DTYPE.
!-

	IF .CLASS GTRU K_MAX_CLASS_STA THEN EXITLOOP K_UNSCLASTA;

	IF .DTYPE GTRU K_MAX_DTYPE_STA THEN EXITLOOP K_UNSDTYSTA;

!+
! Crank up the finite state machine. start looking in the start state.
!-
	STATE = .CLASS_TABLE [.CLASS];
!+
! Action code for each state that results from the start state.
!-

	CASE .STATE FROM K_MSTNEGERR TO K_LRGCLSSUP OF
	    SET

	    [K_INVNBDS TO K_UNSCLAROU] :
		EXITLOOP .STATE;		! Exit the INCR with the error
	    					! resulted from the start state.

	    [K_SMLCLSSUP TO K_LRGCLSSUP] :
		BEGIN
		TOKEN = .DTYPE_TABLE [.STATE, .DTYPE];	! This is a final state, but
						! some constants need to be
						! Applied to it yet.
						! This is just a data type, or a negative number if error.

		IF .TOKEN LSS 0 THEN EXITLOOP .TOKEN;	! Exit INCR with the error resulted

						! in a final state.
		STATE = FINAL_STATE (.STATE, .TOKEN);	! Find the final state.
		END;

	    [INRANGE, OUTRANGE] :
		LIB$STOP (LIB$_FATERRLIB);
	    TES;

!+
! This CASE statement contains the action code for each final state other than
! the error states.
! The caller of this routine has set up the pointer and length of SRC_INFO
! to be the intermediate data area (INTMED_DATA), so in the CASE below we
! will change pointer and length if needed (e.g. any NBDS), otherwise we never
! touch it.
! If .TURN is 0 then we are processing the left side of the conversion, when
! it is 1 we are processing the right side of the conversion. Another words
! if .TURN is 0 we are looking at the CLASS, DATA TYPE of source, and if
! it is 1 we are looking at CLASS, DATA TYPE of destination.
! These action codes determine which category (e.g. K_SMLINT or K_DEC as
! described in LIB$CVT_DX_DX documentation) source or destination data type
! falls into.  They also convert the source data type to an intermediate
! data type.  For more detail refer to the functional description of
! LIB$CVT_DX_DX.
!-

	CASE .STATE FROM K_SMLFINSTA TO K_LRGFINSTA OF
	    SET

	    [K_S_BU, K_SD_BU] :
		BEGIN
		.LEFT_OR_RIGHT_CVT = K_SMLINT;

		IF .TURN EQL 0
		THEN
		    .SRC_INFO [S_POINTER] = .BLOCK [.SOURCE [DSC$A_POINTER], 0, 0, 8, 0;,
			BYTE];

		END;

	    [K_S_WU, K_SD_WU] :
		BEGIN
		.LEFT_OR_RIGHT_CVT = K_SMLINT;

		IF .TURN EQL 0
		THEN
		    .SRC_INFO [S_POINTER] = .BLOCK [.SOURCE [DSC$A_POINTER], 0, 0, 16, 0;,
			BYTE];

		END;

	    [K_S_LU, K_SD_LU] :
		BEGIN
		.LEFT_OR_RIGHT_CVT = K_LRGINT;

		IF .TURN EQL 0
		THEN
		    .SRC_INFO [S_POINTER] = .BLOCK [.SOURCE [DSC$A_POINTER], 0, 0, 32, 0;,
			BYTE];

		END;

	    [K_S_B, K_SD_B] :
		BEGIN
		.LEFT_OR_RIGHT_CVT = K_SMLINT;

		IF .STATE EQL K_SD_B THEN SRC_OR_DST_INFO [M_SCALE] = .SRC_OR_DST [DSC$B_SCALE];

		IF .TURN EQL 0
		THEN
		    .SRC_INFO [S_POINTER] = .BLOCK [.SOURCE [DSC$A_POINTER], 0, 0, 8, 1;,
			BYTE];

		END;

	    [K_S_W, K_SD_W] :
		BEGIN
		.LEFT_OR_RIGHT_CVT = K_SMLINT;

		IF .STATE EQL K_SD_W THEN SRC_OR_DST_INFO [M_SCALE] = .SRC_OR_DST [DSC$B_SCALE];

		IF .TURN EQL 0
		THEN
		    .SRC_INFO [S_POINTER] = .BLOCK [.SOURCE [DSC$A_POINTER], 0, 0, 16, 1;,
			BYTE];

		END;

	    [K_S_L, K_SD_L] :
		BEGIN
		.LEFT_OR_RIGHT_CVT = K_SMLINT;

		IF .STATE EQL K_SD_L THEN SRC_OR_DST_INFO [M_SCALE] = .SRC_OR_DST [DSC$B_SCALE];

		IF .TURN EQL 0
		THEN
		    .SRC_INFO [S_POINTER] = .BLOCK [.SOURCE [DSC$A_POINTER], 0, 0, 32, 1;,
			BYTE];

		END;

	    [K_S_Q, K_SD_Q] :
		BEGIN
		.LEFT_OR_RIGHT_CVT = K_LRGINT;

		IF .STATE EQL K_SD_Q THEN SRC_OR_DST_INFO [M_SCALE] = .SRC_OR_DST [DSC$B_SCALE];

		IF .TURN EQL 0
		THEN
		    BEGIN
		    .SRC_INFO [S_POINTER] = .BLOCK [.SOURCE [DSC$A_POINTER], 0, 0, 32, 0;, BYTE];
		    (.SRC_INFO [S_POINTER] + 4) = .BLOCK [.SOURCE [DSC$A_POINTER] + 4, 0, 0, 32, 0;, BYTE];

		    IF .BLOCK [.SRC_INFO [S_POINTER], 4, 31, 1, 0;, BYTE]
		    THEN
			BEGIN
			.SRC_INFO [S_POINTER] = ..SRC_INFO [S_POINTER] XOR %X'FFFFFFFF';
			.SRC_INFO [S_POINTER] + 4 = .(.SRC_INFO [S_POINTER] + 4) XOR %X'FFFFFFFF';

			IF ..SRC_INFO [S_POINTER] EQLU K_LRGST_LU
			THEN
			    BEGIN
			    .SRC_INFO [S_POINTER] = 0;
			    .SRC_INFO [S_POINTER] + 4 = .(.SRC_INFO [S_POINTER] + 4) + 1;
			    END
			ELSE
			    .SRC_INFO [S_POINTER] = ..SRC_INFO [S_POINTER] + 1;

			SRC_INFO [S_SIGN] = 1;
			END;

		    END;

		END;

	    [K_S_F, K_SD_F] :
		BEGIN
		.LEFT_OR_RIGHT_CVT = K_SMLFLT;

		IF .STATE EQL K_SD_F THEN SRC_OR_DST_INFO [M_SCALE] = .SRC_OR_DST [DSC$B_SCALE];

		IF .TURN EQL 0
		THEN
		    .SRC_INFO [S_POINTER] = .BLOCK [.SOURCE [DSC$A_POINTER], 0, 0, 32, 0;,
			BYTE];

		END;

	    [K_S_D, K_SD_D] :
		BEGIN
		.LEFT_OR_RIGHT_CVT = K_SMLFLT;

		IF .STATE EQL K_SD_D THEN SRC_OR_DST_INFO [M_SCALE] = .SRC_OR_DST [DSC$B_SCALE];

		IF .TURN EQL 0
		THEN
		    BEGIN
		    .SRC_INFO [S_POINTER] = .BLOCK [.SOURCE [DSC$A_POINTER], 0, 0, 32, 0;, BYTE];
		    (.SRC_INFO [S_POINTER] + 4) = .BLOCK [.SOURCE [DSC$A_POINTER] + 4, 0, 0, 32, 0;, BYTE];
		    END;

		END;

	    [K_S_G, K_SD_G] :
		BEGIN
		.LEFT_OR_RIGHT_CVT = K_LRGFLT;

		IF .STATE EQL K_SD_G THEN SRC_OR_DST_INFO [M_SCALE] = .SRC_OR_DST [DSC$B_SCALE];

		IF .TURN EQL 0 THEN CVTGH (.SOURCE [DSC$A_POINTER], .SRC_INFO [S_POINTER]);

		END;

	    [K_S_H, K_SD_H] :
		BEGIN
		.LEFT_OR_RIGHT_CVT = K_LRGFLT;

		IF .STATE EQL K_SD_H THEN SRC_OR_DST_INFO [M_SCALE] = .SRC_OR_DST [DSC$B_SCALE];

		IF .TURN EQL 0 THEN CH$MOVE (16, .SOURCE [DSC$A_POINTER], .SRC_INFO [S_POINTER]);

		END;

	    [K_S_T, K_SD_T] :
		BEGIN
		.LEFT_OR_RIGHT_CVT = K_NBDS;
		SRC_OR_DST_INFO [M_LEN] = .SRC_OR_DST [DSC$W_LENGTH];

		IF .STATE EQL K_SD_T THEN SRC_OR_DST_INFO [M_SCALE] = .SRC_OR_DST [DSC$B_SCALE];

		IF .TURN EQL 0
		THEN
		    BEGIN
		    SRC_INFO [S_POINTER] = .SOURCE [DSC$A_POINTER];
		    END;

		END;

	    [K_S_NU, K_SD_NU] :
		BEGIN
		.LEFT_OR_RIGHT_CVT = K_DEC;

		IF .STATE EQL K_SD_NU THEN SRC_OR_DST_INFO [M_SCALE] = .SRC_OR_DST [DSC$B_SCALE];

		IF .TURN EQL 0
		THEN
		    BEGIN
		    SRC_INFO [S_LEN] = 31;
		    CVTTP (SOURCE [DSC$W_LENGTH], .SOURCE [DSC$A_POINTER], LIB$AB_CVTTP_U,
			SRC_INFO [S_LEN], .SRC_INFO [S_POINTER]);
		    END;

		END;

	    [K_S_NL, K_SD_NL] :
		BEGIN
		.LEFT_OR_RIGHT_CVT = K_DEC;

		IF .STATE EQL K_SD_NL THEN SRC_OR_DST_INFO [M_SCALE] = .SRC_OR_DST [DSC$B_SCALE];

		IF .TURN EQL 0
		THEN
		    BEGIN
		    SRC_INFO [S_LEN] = 31;
		    CVTSP (%REF (

			    IF .SOURCE [DSC$W_LENGTH] EQL 0 THEN 0 ELSE .SOURCE [DSC$W_LENGTH] - 1),
			.SOURCE [DSC$A_POINTER], SRC_INFO [S_LEN], .SRC_INFO [S_POINTER]);

		    END;

		END;

	    [K_S_NLO, K_SD_NLO] :
		BEGIN
		.LEFT_OR_RIGHT_CVT = K_DEC;

		IF .STATE EQL K_SD_NLO THEN SRC_OR_DST_INFO [M_SCALE] = .SRC_OR_DST [DSC$B_SCALE];

		IF .TURN EQL 0
		THEN
		    BEGIN

		    LOCAL
			PACK_ZERO : VECTOR [1, BYTE];

		    PACK_ZERO = UPLIT (%P'+0');
		    SRC_INFO [S_LEN] = 31;
		    CH$TRANSLATE (LIB$AB_CVT_O_U, .SOURCE [DSC$W_LENGTH], .SOURCE [DSC$A_POINTER], 0,
			.SOURCE [DSC$W_LENGTH], TEMP_BUF);
		    CVTTP (SOURCE [DSC$W_LENGTH], TEMP_BUF, LIB$AB_CVTTP_U, SRC_INFO [S_LEN],
			.SRC_INFO [S_POINTER]);

		    IF CMPP (SRC_INFO [S_LEN], .SRC_INFO [S_POINTER], %REF (1), PACK_ZERO) EQLU 0
		    THEN
			BLOCK [.SRC_INFO [S_POINTER] + .SRC_INFO [S_LEN]/2, 0, 0, 4, 0;, BYTE] = .BLOCK [
			    LIB$AB_CVTTP_O + ..SOURCE [DSC$A_POINTER], 0, 0, 4, 0;, BYTE];

		    END;

		END;

	    [K_S_NR, K_SD_NR] :
		BEGIN
		.LEFT_OR_RIGHT_CVT = K_DEC;

		IF .STATE EQL K_SD_NR THEN SRC_OR_DST_INFO [M_SCALE] = .SRC_OR_DST [DSC$B_SCALE];

		IF .TURN EQL 0
		THEN
		    BEGIN

		    LOCAL
			SOU_LEN;

		    SOU_LEN =
		    BEGIN

		    IF .SOURCE [DSC$W_LENGTH] EQL 0 THEN 0 ELSE .SOURCE [DSC$W_LENGTH] - 1

		    END;
		    TEMP_BUF [0, 0, 8, 0] = .BLOCK [.SOURCE [DSC$A_POINTER] + .SOU_LEN, 0, 0, 8, 0;, BYTE];
		    CH$MOVE (.SOU_LEN, .SOURCE [DSC$A_POINTER], TEMP_BUF + 1);
		    SRC_INFO [S_LEN] = 31;
		    CVTSP (SOU_LEN, TEMP_BUF, SRC_INFO [S_LEN], .SRC_INFO [S_POINTER]);
		    END;

		END;

	    [K_S_NRO, K_SD_NRO] :
		BEGIN
		.LEFT_OR_RIGHT_CVT = K_DEC;

		IF .STATE EQL K_SD_NRO THEN SRC_OR_DST_INFO [M_SCALE] = .SRC_OR_DST [DSC$B_SCALE];

		IF .TURN EQL 0
		THEN
		    BEGIN
		    SRC_INFO [S_LEN] = 31;
		    CVTTP (SOURCE [DSC$W_LENGTH], .SOURCE [DSC$A_POINTER], LIB$AB_CVTTP_O,
			SRC_INFO [S_LEN], .SRC_INFO [S_POINTER]);
		    END;

		END;

	    [K_S_NZ, K_SD_NZ] :
		BEGIN
		.LEFT_OR_RIGHT_CVT = K_DEC;

		IF .STATE EQL K_SD_NZ THEN SRC_OR_DST_INFO [M_SCALE] = .SRC_OR_DST [DSC$B_SCALE];

		IF .TURN EQL 0
		THEN
		    BEGIN
		    SRC_INFO [S_LEN] = 31;
		    CVTTP (SOURCE [DSC$W_LENGTH], .SOURCE [DSC$A_POINTER], LIB$AB_CVTTP_Z,
			SRC_INFO [S_LEN], .SRC_INFO [S_POINTER]);
		    END;

		END;

	    [K_S_P, K_SD_P] :
		BEGIN
		.LEFT_OR_RIGHT_CVT = K_DEC;

		IF .STATE EQL K_SD_P THEN SRC_OR_DST_INFO [M_SCALE] = .SRC_OR_DST [DSC$B_SCALE];

		IF .TURN EQL 0
		THEN
		    BEGIN
		    CVTPS (SOURCE [DSC$W_LENGTH], .SOURCE [DSC$A_POINTER], %REF (31), TEMP_BUF);
		    CVTSP (%REF (31), TEMP_BUF, %REF (31), .SRC_INFO [S_POINTER]);
		    SRC_INFO [S_LEN] = 31;
		    END;

		END;

	    [K_D_T] :
		BEGIN
		.LEFT_OR_RIGHT_CVT = K_NBDS;
		SRC_OR_DST_INFO [M_LEN] = .SRC_OR_DST [DSC$W_LENGTH];

		IF .TURN EQL 0
		THEN
		    BEGIN
		    SRC_INFO [S_POINTER] = .SOURCE [DSC$A_POINTER];
		    END;

		END;

	    [K_A_BU, K_A_T, K_NCA_BU, K_NCA_T] :
		BEGIN
		.LEFT_OR_RIGHT_CVT = K_NBDS;

		IF (.SRC_OR_DST [DSC$L_ARSIZE] GTR K_LRGST_WU OR .SRC_OR_DST [DSC$B_DIMCT] NEQ 1 OR
		    .SRC_OR_DST [DSC$W_LENGTH] NEQ 1)
		THEN
		    EXITLOOP K_INVNBDS;

		IF (.STATE EQL K_NCA_BU OR .STATE EQL K_NCA_T)
		THEN
		    BEGIN

		    IF .SRC_OR_DST [DSC$L_S1] NEQ 1 THEN EXITLOOP K_INVNBDS;

		    END;

		SRC_OR_DST_INFO [M_SCALE] = .SRC_OR_DST [DSC$B_SCALE];
		SRC_OR_DST_INFO [M_LEN] = .SRC_OR_DST [DSC$L_ARSIZE];

		IF .TURN EQL 0
		THEN
		    BEGIN
		    SRC_INFO [S_POINTER] = .SOURCE [DSC$A_POINTER];
		    END;

		END;

	    [K_VS_T, K_VS_VT] :
		BEGIN
		.LEFT_OR_RIGHT_CVT = K_NBDS;

		IF .TURN EQL 0
		THEN
		    BEGIN
		    SRC_INFO [S_POINTER] = .SOURCE [DSC$A_POINTER] + 2;
		    SRC_INFO [S_LEN] = .BLOCK [.SOURCE [DSC$A_POINTER], 0, 0, 16, 0;, BYTE];
		    END
		ELSE
		    DST_INFO [D_LEN] = .DESTINATION [DSC$W_LENGTH];

		END;

	    [INRANGE] :
		LIB$STOP (LIB$_FATERRLIB);
	    TES;

	END
    )						! End of INCRU, with a EXITLOOP value.
    END;					! End of STATUS.
!+
! Map the left and right of the conversion, (i.e. if the conversion is
! K_SMLINT_LRGFLT, then LEFT_CVT is SMLINT and RIGHT_CVT is LRGFLT)
! into a final conversion index and return with the status of this routine.
!-
    .CVT_PATH = (.LEFT_CVT - 1)*K_TOT_CAT + .RIGHT_CVT;
    RETURN .STATUS;
    END;					! End of routine LIB$$FIND_CVT_PATH

END						! End of module LIB$$FIND_CVT_PATH.

ELUDOM
