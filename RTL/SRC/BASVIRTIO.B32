MODULE BAS$$VIRT_IO (				! Virtual array I/O
		IDENT = '1-021'		! File: BASVIRTIO.B32 Edit: JBS1021
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  VAX-11 BASIC Virtual Array Support
!
! ABSTRACT:
!
!	This module contains the I/O support for VAX-11 BASIC
!	virtual arrays.  In the context of the RTL these are called
!	"BASIC File Arrays", since they are not properly a part of
!	the VAX architecture.  This module comprises the UDF and REC
!	levels of I/O for this very simple I/O interface.
!
! ENVIRONMENT:  VAX-11 User Mode
!
! AUTHOR: John Sauter, CREATION DATE: 04-APR-1979
!
! MODIFIED BY:
!
! 1-001	- Original.  This version does no buffering.  It is just for
!	   checking out the indexing routines.  JBS 04-APR-1979
! 1-002	- Change BAS$$STOP to BAS$$STOP_IO wherever possible.
!	   JBS 09-APR-1979
! 1-003	- Improve comments based on DGP's review.  JBS 09-APR-1979
! 1-004	- Recover from Record Stream Active RMS error.  JBS 09-APR-1979
!	   JBS 09-APR-1979
! 1-005	- Today (actually late last night) the compiler began producing
!	   code for virtual arrays, so start debugging.  JBS 24-MAY-1979
! 1-006	- Take the ALQ parameter out of the $FAB_INIT, so that FAB$L_ALQ
!	   appears in the cross reference.  JBS 24-MAY-1979
! 1-007	- Don't allocate if the file is already allocated beyond the
!	   current record.  JBS 25-MAY-1979
! 1-008	- Worry about two descriptors pointing to the same file.
!	   JBS 11-JUN-1979
! 1-009	- Remove the redundent DSC$ defintiions.  JBS 19-JUN-1979
! 1-010	- POP I/O on error.  JBS 25-JUL-1979
! 1-011	- The buffer size for a virtual array file must be 512 bytes.
!	   JBS 20-AUG-1979
! 1-012	- Correct a typo in BAS$VA_PURGE.  JBS 30-AUG-1979
! 1-013	- Check for RMS$_RNF in parallel with RMS$_EOF.  JBS 17-SEP-1979
! 1-014	- Disable EXTEND until it is fixed.  JBS 17-SEP-1979
! 1-015	- When unwinding, mark that we have no buffer in memory, since
!	   we want to retry all I/O operations.  JBS 17-SEP-1979
! 1-016	- Signal errors if the RELEASE fails.  This will have to be
!	   disabled to run under release 1.  JBS 17-SEP-1979
! 1-017	- The VAH was bad design, because we cannot purge the virtual
!	   arrays whenever we lose control (consider a divide by zero
!	   under an ON ERROR GO BACK).  Therefore, remove VAH and do not
!	   use the HANDLE field.  Also, put the code back to using release
!	   1 RMS.  JBS 18-SEP-1979
! 1-018	- Don't allow stores into virtual arrays opened read only.
!	   JBS 07-NOV-1979
! 1-019	- Convert to automatic record locking and NXR processing.
!	   JBS 09-NOV-1979
! 1-020	- Remove BAS$VA_PURGE, which has been a no-op since September 18,
!	   since the compiler no longer refers to it.  JBS 26-NOV-1979
! 1-021 - Don't call BAS$$CB_POP if the I/O data base has already been
!	   cleaned up.  JBS 11-JUN-1980
!--

!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!

REQUIRE 'RTLIN:OTSLNK';				! Define linkages

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    BAS$$VA_FETCH : NOVALUE,			! Fetch routine
    BAS$$VA_STORE : NOVALUE,			! Store routine
    BAS$$VA_CLOSE : CALL_CCB NOVALUE,		! CLOSE effector
    HANDLER;					! POP CCB on UNWIND

!
! INCLUDE FILES:
!

REQUIRE 'RTLML:OTSLUB';				! Get LUB definitions

REQUIRE 'RTLIN:BASIOERR';			! I/O error codes

REQUIRE 'RTLIN:RTLPSECT';			! Macros for defining psects

LIBRARY 'RTLSTARLE';				! System symbols

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!+
! The following literal determines the span of the interlock on shared
! files.  That is, the number of bytes which are interlocked after a
! reference to a location in a virtual array.  This is also the buffer
! size required on the OPEN for the file.
!-

LITERAL
    K_BLOCK_LENGTH = 512;			! Number of bytes in a virtual block

!
! PSECTS:
!
DECLARE_PSECTS (BAS);				! Declare psects for BAS$ facility
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    BAS$$STOP : NOVALUE,			! signals fatal error
    BAS$$CB_PUSH : JSB_CB_PUSH NOVALUE,		! Load register CCB
    BAS$$CB_POP : JSB_CB_POP NOVALUE,		! Done with register CCB
    BAS$$CB_GET : JSB_CB_GET NOVALUE,		! Fetch current value of CCB
    BAS$$STOP_IO : NOVALUE,			! Signal fatal I/O error
    LIB$STOP : NOVALUE,				! Signal fatal error
    LIB$MATCH_COND;				! Match condition values

!+
! The following are the error codes used in this module.
!-

EXTERNAL LITERAL
    BAS$K_VIRARROPE : UNSIGNED (8),		! Virtual array not opened
    BAS$K_VIRARRDIS : UNSIGNED (8),		! Virtual array not on disk
    BAS$K_VIRBUFTOO : UNSIGNED (8),		! Virtual buffer too large
    BAS$K_ILLOPE : UNSIGNED (8),		! Illegal operation
    BAS$K_ILLILLACC : UNSIGNED (8),		! Illegal or illogical access
    BAS$K_PROLOSSOR : UNSIGNED (8),		! Program lost, sorry
    OTS$_FATINTERR;				! Fatal internal OTS error


GLOBAL ROUTINE BAS$$VA_FETCH (			! Fetch routine
	DESCRIP, 				! The descriptor for this virtual array
	INDEX, 					! Linearized index
	VALUE					! Where to store array item
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Fetch a value from a virtual array.  Multiple bytes may be
!	fetched with a single call.
!
! FORMAL PARAMETERS:
!
!	DESCRIP.mz.r	The descriptor for the virtual array
!	INDEX.rl.v	The byte offset into the array
!	VALUE.wz.r	The place to store the value.  The number of
!			bytes to store is in the LENGTH field of
!			DESCRIP.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Signals if an error is encountered.
!
!--

    BEGIN

    MAP
	DESCRIP : REF BLOCK [8, BYTE];

    GLOBAL REGISTER
	CCB = K_CCB_REG : REF BLOCK [, BYTE];

    LOCAL
	CHAN,					! The channel this array is defined on
	HANDLE,					! Pointer to info for this array
	GET_STATUS,				! Last RMS GET status
	PUT_STATUS,				! Last RMS PUT status
	READ_RECORD,				! 1 = we must read the record
	SAVE_CCB : VOLATILE;			! CCB to POP, or zero.

!+
! Establish a handler to pop the CCB when unwinding.
!-

    ENABLE
	HANDLER (SAVE_CCB);

!+
! Fetch the array's channel number from its descriptor
!-
    CHAN = .DESCRIP [DSC$L_LOGUNIT];
!+
! Get a pointer to the LUB/ISB/RAB for this channel.  If the channel has not
! been opened yet, this call will allocate the LUB/ISB/RAB, but we will reject
! it for lack of the LUB$V_OPENED bit.
!-
    BAS$$CB_PUSH (.CHAN, LUB$K_LUN_MIN);
    SAVE_CCB = .CCB;

    IF ( NOT .CCB [LUB$V_OPENED]) THEN BAS$$STOP (BAS$K_VIRARROPE);

!+
! If the channel was not opened with organization VIRTUAL, reject it.  This
! also catches channel 0, which is always open but never has VIRTUAL
! organization.
!-

    IF (.CCB [LUB$B_ORGAN] NEQ LUB$K_ORG_VIRTU) THEN BAS$$STOP_IO (BAS$K_VIRARRDIS);

!+
! If this channel has been used for block I/O, reject it.
!-

    IF (.CCB [LUB$V_BLK_USE]) THEN BAS$$STOP_IO (BAS$K_ILLOPE);

!+
! If the record size declared for the file is not 512 bytes, reject it.
!-

    IF (.CCB [RAB$W_USZ] NEQ K_BLOCK_LENGTH) THEN BAS$$STOP_IO (BAS$K_VIRBUFTOO);

!+
! Mark the LUB as being used for a virtual array.
!-
    CCB [LUB$V_VA_USE] = 1;
!+
! Record access will always be by key
!-
    CCB [RAB$B_RAC] = RAB$C_KEY;
!+
! Mark the RAB so that a $GET to a non-existent record will still lock it.
!-
    CCB [RAB$V_NXR] = 1;
!+
! Set the address of our CLOSE appendage in the LUB.  If somebody else's
! is already there, we have a serious problem.
!-

    IF (.CCB [LUB$A_CLOSE] EQLA 0) THEN CCB [LUB$A_CLOSE] = BAS$$VA_CLOSE;

    IF (.CCB [LUB$A_CLOSE] NEQA BAS$$VA_CLOSE) THEN BAS$$STOP_IO (BAS$K_PROLOSSOR);

!+
! If this is not the first reference to this file, we may have to
! write out the current buffer.  We will write only if the current buffer
! is not the buffer we wish to access.  LUB$L_LOG_RECNO is initialized
! to zero for virtual files.
!-

    IF (.CCB [LUB$L_LOG_RECNO] EQL ((.INDEX + .DESCRIP [DSC$L_BYTEOFF])/K_BLOCK_LENGTH) + 1)
    THEN
	READ_RECORD = 0
    ELSE
	BEGIN
!+
! We actually do the PUT only if the buffer has been changed since we last
! read it, as recorded by LUB$V_OUTBUF_DR.
!-

	IF (.CCB [LUB$V_OUTBUF_DR])
	THEN
	    BEGIN
	    PUT_STATUS = $PUT (RAB = .CCB);
!+
! If the PUT fails, we must worry about the RSA error, which can happen if
! we are running at AST level, and the AST interrupted some RMS I/O.  If
! we get this error, wait for it to go away.  Any other RMS error is fatal.
!-

	    IF ( NOT .PUT_STATUS)
	    THEN
		BEGIN

		WHILE (.PUT_STATUS EQL RMS$_RSA) DO
		    BEGIN
		    $WAIT (RAB = .CCB);
		    PUT_STATUS = $PUT (RAB = .CCB);
		    END;

		IF ( NOT .PUT_STATUS) THEN BAS$$STOP_IO (BAS$K_IOERR_REC);

		END;

!+
! The buffer is no longer "dirty", mark it so.
!-
	    CCB [LUB$V_OUTBUF_DR] = 0;
	    END;

	READ_RECORD = 1;
	END;

!+
! If necessary, read in the record containing the element we want.
!-

    IF (.READ_RECORD)
    THEN
	BEGIN
	CCB [LUB$L_LOG_RECNO] = ((.INDEX + .DESCRIP [DSC$L_BYTEOFF])/K_BLOCK_LENGTH) + 1;
	GET_STATUS = $GET (RAB = .CCB);
!+
! If we get EOF, just clear the buffer.  This is compatable with
! the PDP-11.
!-

	IF ((.GET_STATUS EQL RMS$_EOF) OR (.GET_STATUS EQL RMS$_OK_RNF))
	THEN
	    BEGIN
	    CH$FILL (0, .CCB [RAB$W_USZ], .CCB [RAB$L_UBF]);
	    CCB [RAB$L_RBF] = .CCB [RAB$L_UBF];
	    CCB [RAB$W_RSZ] = .CCB [RAB$W_USZ];
	    END
	ELSE
	    BEGIN

	    IF ( NOT .GET_STATUS)
	    THEN
		BEGIN
!+
! Again, worry about the RSA RMS error.
!-

		WHILE (.GET_STATUS EQL RMS$_RSA) DO
		    BEGIN
		    $WAIT (RAB = .CCB);
		    GET_STATUS = $GET (RAB = .CCB);
		    END;

		IF ( NOT .GET_STATUS) THEN BAS$$STOP_IO (BAS$K_IOERR_REC);

		END;

	    END;

	END;

!+
! At this point, the proper record is in the buffer, and we can copy
! data from it.
!-
    CH$MOVE (.DESCRIP [DSC$W_LENGTH],
	.CCB [RAB$L_RBF] + ((.INDEX + .DESCRIP [DSC$L_BYTEOFF]) MOD K_BLOCK_LENGTH), .VALUE);
!+
! Done with this I/O channel.
!-
    BAS$$CB_POP ();
    END;					! end of BAS$$VA_FETCH


GLOBAL ROUTINE BAS$$VA_STORE (			! Store routine
	DESCRIP, 				! The descriptor for this virtual array
	INDEX, 					! Linearized index
	VALUE					! Where to find item for array
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Store a value in a virtual array.  Multiple bytes may be stored
!	with a single call.
!
! FORMAL PARAMETERS:
!
!	DESCRIP.mz.r	The descriptor for the virtual array
!	INDEX.rl.v	The byte offset into the array
!	VALUE.rz.r	The place from which to fetch the value.  The
!			number of bytes to store is in the LENGTH field
!			of DESCRIP.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Signals if an error is encountered.
!
!--

    BEGIN

    MAP
	DESCRIP : REF BLOCK [8, BYTE];

    GLOBAL REGISTER
	CCB = K_CCB_REG : REF BLOCK [, BYTE];

    LOCAL
	CHAN,					! The channel this array is defined on
	HANDLE,					! Pointer to info for this array
	GET_STATUS,				! Last RMS GET status
	PUT_STATUS,				! Last RMS PUT status
	READ_RECORD,				! 1 = we must read the record
	SAVE_CCB : VOLATILE;			! CCB to POP, or 0

!+
! Establish a handler to pop the CCB on unwind.
!-

    ENABLE
	HANDLER (SAVE_CCB);

!+
! Fetch the array's channel number from its descriptor
!-
    CHAN = .DESCRIP [DSC$L_LOGUNIT];
!+
! Get a pointer to the LUB/ISB/RAB for this channel.  If the channel has not
! been opened yet, this call will allocate the LUB/ISB/RAB, but we will reject
! it for lack of the LUB$V_OPENED bit.
!-
    BAS$$CB_PUSH (.CHAN, LUB$K_LUN_MIN);
    SAVE_CCB = .CCB;

    IF ( NOT .CCB [LUB$V_OPENED]) THEN BAS$$STOP (BAS$K_VIRARROPE);

!+
! If the channel was not opened with organization VIRTUAL, reject it.  This
! also catches channel 0, which is always open but never has VIRTUAL
! organization.
!-

    IF (.CCB [LUB$B_ORGAN] NEQ LUB$K_ORG_VIRTU) THEN BAS$$STOP_IO (BAS$K_VIRARRDIS);

!+
! If this channel has been used for block I/O, reject it.
!-

    IF (.CCB [LUB$V_BLK_USE]) THEN BAS$$STOP_IO (BAS$K_ILLOPE);

!+
! If the recordsize of the file is not 512 bytes, reject it.
!-

    IF (.CCB [RAB$W_USZ] NEQ K_BLOCK_LENGTH) THEN BAS$$STOP_IO (BAS$K_VIRBUFTOO);

!+
! If the file is marked read only, reject it.
!-

    IF (.CCB [LUB$V_READ_ONLY]) THEN BAS$$STOP_IO (BAS$K_ILLILLACC);

!+
! Mark the LUB as being used for a virtual array.
!-
    CCB [LUB$V_VA_USE] = 1;
!+
! Record access will always be by key
!-
    CCB [RAB$B_RAC] = RAB$C_KEY;
!+
! Set the RAB so that a $GET to a non-existent record will still lock
! that record.
!-
    CCB [RAB$V_NXR] = 1;
!+
! Set the address of our CLOSE appendage in the LUB.  If somebody else's
! is already there, we have a serious problem.
!-

    IF (.CCB [LUB$A_CLOSE] EQLA 0) THEN CCB [LUB$A_CLOSE] = BAS$$VA_CLOSE;

    IF (.CCB [LUB$A_CLOSE] NEQA BAS$$VA_CLOSE) THEN BAS$$STOP_IO (BAS$K_PROLOSSOR);

!+
! If this is not the first reference to this file, we may have to
! write out the current buffer.  We will write only if the current buffer
! is not the buffer we wish to access.  LUB$L_LOG_RECNO is initialized
! to zero for virtual files.
!-

    IF (.CCB [LUB$L_LOG_RECNO] EQL ((.INDEX + .DESCRIP [DSC$L_BYTEOFF])/K_BLOCK_LENGTH) + 1)
    THEN
	READ_RECORD = 0
    ELSE
	BEGIN
!+
! We actually do the PUT only if the buffer has been changed since we last
! read it, as recorded by LUB$V_OUTBUF_DR.
!-

	IF (.CCB [LUB$V_OUTBUF_DR])
	THEN
	    BEGIN
	    PUT_STATUS = $PUT (RAB = .CCB);
!+
! If the PUT fails, we must worry about the RSA error, which can happen if
! we are running at AST level, and the AST interrupted some RMS I/O.  If
! we get this error, wait for it to go away.  Any other RMS error is fatal.
!-

	    IF ( NOT .PUT_STATUS)
	    THEN
		BEGIN

		WHILE (.PUT_STATUS EQL RMS$_RSA) DO
		    BEGIN
		    $WAIT (RAB = .CCB);
		    PUT_STATUS = $PUT (RAB = .CCB);
		    END;

		IF ( NOT .PUT_STATUS) THEN BAS$$STOP_IO (BAS$K_IOERR_REC);

		END;

!+
! The buffer is no longer "dirty", mark it so.
!-
	    CCB [LUB$V_OUTBUF_DR] = 0;
	    END;

	READ_RECORD = 1;
	END;

!+
! If necessary, read in the record containing the element we want.
!-

    IF (.READ_RECORD)
    THEN
	BEGIN
	CCB [LUB$L_LOG_RECNO] = ((.INDEX + .DESCRIP [DSC$L_BYTEOFF])/K_BLOCK_LENGTH) + 1;
	GET_STATUS = $GET (RAB = .CCB);
!+
! If we are at EOF, extend the file.  This is compatable with the PDP-11.
!-

	IF ((.GET_STATUS EQL RMS$_EOF) OR (.GET_STATUS EQL RMS$_OK_RNF))
	THEN
	    BEGIN

	    LOCAL
		FAB_BLOCK : $FAB_DECL,
		EXTEND_STATUS;

!+
! If the file is already allocated beyond the current end-of-file point
! (which can happen on disk if the cluster size is greater than 1) then
! do not do any allocation.
!-

	    IF (.CCB [LUB$L_LOG_RECNO] GTR .CCB [LUB$L_REC_MAX])
	    THEN
		BEGIN
		$FAB_INIT (FAB = FAB_BLOCK);
		FAB_BLOCK [FAB$L_ALQ] = .CCB [LUB$L_LOG_RECNO] - .CCB [LUB$L_REC_MAX];
		FAB_BLOCK [FAB$W_IFI] = .CCB [LUB$W_IFI];
		CCB [LUB$A_FAB] = FAB_BLOCK;
		CCB [RAB$L_STS] = SS$_NORMAL;
		EXTEND_STATUS = $EXTEND (FAB = FAB_BLOCK);

		IF ( NOT .EXTEND_STATUS) THEN BAS$$STOP_IO (BAS$K_IOERR_REC);

		CCB [LUB$L_REC_MAX] = .CCB [LUB$L_REC_MAX] + .FAB_BLOCK [FAB$L_ALQ];
		CCB [LUB$A_FAB] = 0;
		END;

!+
! Since we did not really read a record, make sure the buffer contains
! all zeros.
!-
	    CH$FILL (0, .CCB [RAB$W_USZ], .CCB [RAB$L_UBF]);
	    CCB [RAB$W_RSZ] = .CCB [RAB$W_USZ];
	    CCB [RAB$L_RBF] = .CCB [RAB$L_UBF];
	    END
	ELSE
	    BEGIN

	    IF ( NOT .GET_STATUS)
	    THEN
		BEGIN
!+
! Again, worry about the RSA RMS error.
!-

		WHILE (.GET_STATUS EQL RMS$_RSA) DO
		    BEGIN
		    $WAIT (RAB = .CCB);
		    GET_STATUS = $GET (RAB = .CCB);
		    END;

		IF ( NOT .GET_STATUS) THEN BAS$$STOP_IO (BAS$K_IOERR_REC);

		END;

	    END;

	END;

!+
! At this point, the proper record is in the buffer, and we can copy
! data to it.
!-
    CH$MOVE (.DESCRIP [DSC$W_LENGTH], .VALUE,
	.CCB [RAB$L_RBF] + ((.INDEX + .DESCRIP [DSC$L_BYTEOFF]) MOD K_BLOCK_LENGTH));
!+
! Since the buffer differs from the disk, mark it "dirty" so it will be
! written out.
!-
    CCB [LUB$V_OUTBUF_DR] = 1;
!+
! Done with this I/O channel.
!-
    BAS$$CB_POP ();
    END;					! end of BAS$$VA_STORE


ROUTINE BAS$$VA_CLOSE 				! Close a virtual array
    : CALL_CCB NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Handle the closing of a virtual array.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Writes out the last I/O buffer (if it has been modified).
!
!--

    BEGIN

    EXTERNAL REGISTER
	CCB : REF BLOCK [, BYTE];

    LOCAL
	PUT_STATUS;				! Status of last RMS PUT

!+
! If the buffer is dirty, write it out.
!-

    IF (.CCB [LUB$V_OUTBUF_DR])
    THEN
	BEGIN
	PUT_STATUS = $PUT (RAB = .CCB);

	IF ( NOT .PUT_STATUS)
	THEN
	    BEGIN
!+
! Worry about RMS RSA error.
!-

	    WHILE (.PUT_STATUS EQL RMS$_RSA) DO
		BEGIN
		$WAIT (RAB = .CCB);
		PUT_STATUS = $PUT (RAB = .CCB);
		END;

	    IF ( NOT .PUT_STATUS) THEN BAS$$STOP_IO (BAS$K_IOERR_REC);

	    END;

	CCB [LUB$V_OUTBUF_DR] = 0;
	END;

    END;					! end of BAS$$VA_CLOSE

ROUTINE HANDLER (				! POP CCB on UNWIND
	SIG, 					! signal args
	MECH, 					! mechanism args
	ENBL					! variables
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	POP the CCB if one of the routines which does a PUSH gets an
!	error.  This is handled here rather than in the BASIC handler
!	so that the address of the frame of the caller does not have
!	to be passed all the way down to this module.  Also, we wish
!	to mark that there is no buffer in memory.
!
! FORMAL PARAMETERS:
!
!	SIG.rl.a	Address of the signal vector.  This contains
!			the condition.
!	MECH.rl.a	Address of the mechanism vector.  This contains
!			the status of the frame that signalled.
!	ENBL.rl.a	Address of the enable vector.  This contains
!			a pointer to the CCB, or 0.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
! COMPLETION CODES:
!
!	Always SS$_RESIGNAL, but this is ingored when we are
!	unwinding.
!
! SIDE EFFECTS:
!
!	Usually calls BAS$$CB_POP to complete the I/O.
!	Also marks the buffer empty.
!
!--

    BEGIN

    MAP
	SIG : REF VECTOR,			! signal vector
	MECH : REF VECTOR,			! mechanism vector
	ENBL : REF VECTOR;			! enable vector

    GLOBAL REGISTER
	CCB = K_CCB_REG : REF BLOCK [, BYTE];

    BIND
	SAVE_CCB = .ENBL [1];

!+
! If this is the unwind condition, restore the CCB.
! Mark that there is no buffer in memory.
!-

    IF ((LIB$MATCH_COND (SIG [1], %REF (SS$_UNWIND))) AND (.SAVE_CCB NEQA 0))
    THEN
	BEGIN
	BAS$$CB_GET ();

	IF (.CCB EQLA .SAVE_CCB)
	THEN
	    BEGIN
	    CCB [LUB$L_LOG_RECNO] = 0;
	    CCB [LUB$V_OUTBUF_DR] = 0;
	    BAS$$CB_POP ();
	    RETURN (SS$_RESIGNAL);
	    END
	ELSE

	    IF (.CCB NEQA 0) THEN LIB$STOP (OTS$_FATINTERR);

	END;

!+
! We do not recognize the signal, pass it without comment.
!-
    RETURN (SS$_RESIGNAL);
    END;					! of HANDLER
END						! end of module BAS$VIRT_IO

ELUDOM
