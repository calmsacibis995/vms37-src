MODULE BAS$FSP (				!
		IDENT = '1-006'			! File: BASFSP.B32 EDIT:FM1006
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  BASIC-PLUS-2 Miscellaneous I/O
!
! ABSTRACT:
!
!	This module contains the BASIC FSP function,
!	Which returns information about the open file.
!
! ENVIRONMENT:  VAX-11 User Mode
!
! AUTHOR: John Sauter, CREATION DATE: 18-APR-1979
!
! MODIFIED BY:
!
! 1-001	- Original.
! 1-002	- Change LIB$S and OTS$S to STR$.  JBS 21-MAY-1979
! 1-003	- Change calls to STR$COPY.  JBS 16-JUL-1979
! 1-004	- Set up ISB$A_USER_FP.  JBS 25-JUL-1979
! 1-005	- Correct an error in a comment.  JBS 26-OCT-1979
! 1-006 - Return LUB$L_ALQ.  We had to redefine a lub location for this so
!	  bas$open can retain this value.  FM 22-SEP-80 
!--

!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!

REQUIRE 'RTLIN:OTSLNK';				! Define linkages

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    BAS$FSP : NOVALUE;				! Return info about the file

!
! INCLUDE FILES:
!

REQUIRE 'RTLML:OTSLUB';				! Get LUB definitions

REQUIRE 'RTLML:OTSISB';				! Get ISB definitions

REQUIRE 'RTLIN:RTLPSECT';			! Macros for defining psects

LIBRARY 'RTLSTARLE';				! System symbols

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!

LITERAL
    BAS$K_ORG_SEQ = 0,				! Organization is sequential
    BAS$K_ORG_REL = 16,				! Relative
    BAS$K_ORG_IND = 32,				! Indexed
    BAS$K_RFM_FIX = 1,				! Record format is fixed
    BAS$K_RFM_VAR = 2,				! variable
    BAS$K_RFM_VFC = 3,				! variable with fixed control area
    BAS$K_RFM_NONE = 0,				! (special code for virtual files)
    BAS$K_RAT_FTN = 1,				! Record attribute FORTRAN
    BAS$K_RAT_CR = 2,				! Carraige Return
    BAS$K_RAT_PRN = 4,				! Print File Format
    BAS$K_RAT_NONE = 0;				! (special code for virtual and stream)

!
! PSECTS:
!
DECLARE_PSECTS (BAS);				! Declare psects for BAS$ facility
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    BAS$$CB_PUSH : JSB_CB_PUSH NOVALUE,		! Load register CCB
    BAS$$CB_POP : JSB_CB_POP NOVALUE,		! Done with register CCB
    BAS$$STOP_IO : NOVALUE,			! Signal fatal I/O error
    BAS$$STOP : NOVALUE,			! Signal fatal error
    STR$COPY_R;					! Copy a string by reference

!+
! The following are the error codes used in this module.
!-

EXTERNAL LITERAL
    BAS$K_IO_CHANOT : UNSIGNED (8),		! Channel not open.
    BAS$K_MAXMEMEXC : UNSIGNED (8),		! Max memory exceeded
    BAS$K_PROLOSSOR : UNSIGNED (8),		! Program lost, sorry.
    BAS$K_ILLIO_CHA : UNSIGNED (8);		! Illigal I/O channel.


GLOBAL ROUTINE BAS$FSP (			! Return info about the file
	RESULT, 				! Where to put info
	CHAN					! Channel open to the file
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Return information about the file which is open on this
!	channel.  This is especially useful if the channel was
!	opened with organization UNDEFINED.  The result is returned
!	as a 32-character string, laid out as follows:
!
!	BYTE	MEANING
!
!	1	The record format and file organization, see below
!
!	2	The record attributes, see below.
!
!	3-4	FAB$W__MRS.
!
!	5-8	FAB$L_ALQ.
!
!	9-10	FAB$W_BLS if this is a mag tape, otherwise FAB$B_BKS.
!
!	11	Number of keys in the file (indexed only).
!
!	12	Zero.
!
!	13-16	FAB$L_MRN.
!
!	17-20	RAB$L_BKT.
!
!	21-32	Zero.
!
!
!	The first byte is organization + record format, encoded as:
!	sequential = 0, relative = 16, indexed = 32; fixed = 1,
!	variable = 2, VFC = 3.  The second byte is the record
!	attribute, encoded as: FORTRAN = 1, CR = 2, PRN = 4,
!	none = 0.  Virtual files have both bytes 0.  Channel 0 is
!	sequential, variable, RAT=none, all other bytes zero.
!
! FORMAL PARAMETERS:
!
!	RESULT.wb.dx	Where to put the 32-byte result.
!	CHAN.rl.v	The channel to do this to.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Signals if an error is encountered.
!	BAS$$CB_PUSH will signal if the channel number is invalid.
!	We signal BAS$K_IO_CHANOT if the channel is not open.
!
!--

    BEGIN

    BUILTIN
	FP;

    GLOBAL REGISTER
	CCB = K_CCB_REG : REF BLOCK [, BYTE];

    LOCAL
	FMP : REF BLOCK [, BYTE],
	FSP_STRING : VECTOR [32, BYTE];

    FMP = .FP;
!+
! Set all positions to zero, so any not stored in below will come
! out zero.
!-

    INCR COUNTER FROM 0 TO 31 DO
	FSP_STRING [.COUNTER] = 0;

!+
! If this is the user's terminal, return the same information as
! the PDP-11.
!-

    IF (.CHAN EQL 0)
    THEN
	BEGIN
	FSP_STRING [0] = BAS$K_ORG_SEQ + BAS$K_RFM_VAR;
	FSP_STRING [1] = BAS$K_RAT_NONE;
!+
! Copy our string back to the caller.
!-
	STR$COPY_R (.RESULT, %REF (32), FSP_STRING);
	END
    ELSE
	BEGIN
!+
! Get the CCB for the channel.
!-
	BAS$$CB_PUSH (.CHAN, LUB$K_LUN_MIN);
	CCB [ISB$A_USER_FP] = .FMP [SF$L_SAVE_FP];
!+
! Fail if the channel is not open.
!-

	IF ( NOT .CCB [LUB$V_OPENED]) THEN BAS$$STOP_IO (BAS$K_IO_CHANOT);

!+
! Extract the organization
!-
	FSP_STRING [0] =
	BEGIN

	IF (.CCB [LUB$B_ORGAN] EQL LUB$K_ORG_VIRTU)
	THEN
	    0
	ELSE
	    BEGIN

	    CASE .CCB [LUB$B_ORGAN] FROM LUB$K_ORG_SEQUE TO LUB$K_ORG_TERMI OF
		SET

		[LUB$K_ORG_SEQUE] :
		    BAS$K_ORG_SEQ;

		[LUB$K_ORG_RELAT] :
		    BAS$K_ORG_REL;

		[LUB$K_ORG_INDEX] :
		    BAS$K_ORG_IND;

		[LUB$K_ORG_TERMI] :
		    BAS$K_ORG_SEQ;

		[OUTRANGE] :
		    BEGIN
		    BAS$$STOP_IO (BAS$K_PROLOSSOR);
		    0
		    END;
		TES

	    END
	    +
	    BEGIN

	    IF (.CCB [LUB$V_FIXED])
	    THEN
		BAS$K_RFM_FIX
	    ELSE

		IF (.CCB [RAB$L_RHB] EQLA 0) THEN BAS$K_RFM_VAR ELSE BAS$K_RFM_VFC

	    END

	END;
	FSP_STRING [1] =
	BEGIN

	IF (.CCB [LUB$B_ORGAN] EQL LUB$K_ORG_VIRTU)
	THEN
	    BAS$K_RAT_NONE
	ELSE

	    IF ((.CCB [LUB$B_RAT] AND FAB$M_FTN) NEQ 0)
	    THEN
		BAS$K_RAT_FTN
	    ELSE

		IF ((.CCB [LUB$B_RAT] AND FAB$M_CR) NEQ 0)
		THEN
		    BAS$K_RAT_CR
		ELSE

		    IF ((.CCB [LUB$B_RAT] AND FAB$M_PRN) NEQ 0) THEN BAS$K_RAT_PRN ELSE BAS$K_RAT_NONE

	END;
!+
! Store the maximum record size, FAB$W_MRS. (somewhat fudged)
!-
	BLOCK [FSP_STRING [2], 0, 0, 16, 0] = .CCB [LUB$W_RBUF_SIZE];
!+
! Store the allocation quantity.
!-
	BLOCK [FSP_STRING [4], 0, 0, 32, 0] = .CCB [LUB$L_ALQ];
!+
! Store the block size or bucket size.  This is currently not
! supported, since we do not support non-file mag tape.
! Always return zero.
!-
	BLOCK [FSP_STRING [8], 0, 0, 16, 0] = 0;
!+
! Store the number of keys in an indexed file.  We don't support
! this, either.  Always return zero.
!-
	FSP_STRING [10] = 0;
!+
! Store the number of the highest record that can be written to
! the file.  Since we don't retain this information either, just
! return the highest record number.
!-
	BLOCK [FSP_STRING [12], 0, 0, 32, 0] = .CCB [LUB$L_REC_MAX];
!+
! Store the current block/record number.
!-
	BLOCK [FSP_STRING [16], 0, 0, 32, 0] = .CCB [RAB$L_BKT];
!+
! Copy our string back to the caller.
!-
	STR$COPY_R (.RESULT, %REF (32), FSP_STRING);
!+
! We are done with register CCB.
!-
	BAS$$CB_POP ();
	END;

    RETURN;
    END;					! end of BAS$FSP

END						! end of module BAS$FSP

ELUDOM
