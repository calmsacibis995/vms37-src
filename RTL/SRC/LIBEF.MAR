	.TITLE	LIB$EF - Resource allocator for local event flags
	.IDENT	/1-004/			; File: LIBEF.MAR

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY: General Utility Library
;
; ABSTRACT:
;
;	Three routines for allocating and deallocating local event
;	flag numbers.  Using these routines allows use of local
;	event flags by multiple procedures without conflicts.
;
; ENVIRONMENT: User Mode, AST Reentrant
;
;--
; AUTHOR: Steven B. Lionel, CREATION DATE: 08-DEC-78
;
; MODIFIED BY:
;
; SBL, : VERSION 1
; 1-001	- Original 
; 1-002 - Pre-reserve event flags 1-23.  SBL 18-Dec-78
; 1-003	- Put _ before PSECT names and make error codes be
;	   global.  JBS for SBL 23-JAN-1979
; 1-004	- Correct a typo in edit 003.  JBS 24-JAN-1979

	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;

;
; EXTERNAL DECLARATIONS:
;
	.DSABL	GBL				; Prevent undeclared
						; symbols from being
						; automatically global.
	.EXTRN	LIB$_INSEF			; Error codes
	.EXTRN	LIB$_EF_ALRRES
	.EXTRN	LIB$_EF_ALRFRE
	.EXTRN	LIB$_EF_RESSYS

;
; MACROS:
;

;
; EQUATED SYMBOLS:
;
	ef_number = 4		; event flag number parameter
;
; OWN STORAGE:
;
	.PSECT	_LIB$DATA RD, WRT, NOEXE, NOSHR, PIC, LONG, -
		         CON, LCL, REL, USR

EF_POOL:			; Pool of available event flags
	.QUAD	^XFFFFFFFF00000000
				; Low order bit represents event
				; flag number 63, high order bit
				; event flag 0.  Event flags 0 and
				; 24-31 are reserved to the system.
				; Numbers 1-23 are pre-reserved.
;
; PSECT DECLARATIONS:
;
	.PSECT _LIB$CODE PIC, USR, CON, REL, LCL, SHR, -
			EXE, RD, NOWRT, LONG


	.SBTTL	LIB$GET_EF - Allocate one local event flag
;++
; FUNCTIONAL DESCRIPTION:
;
;	LIB$GET_EF allocates one local event flag from a process-wide
;	pool.  If a flag is available for use, its number is returned
;	to the caller.  If no flags are available, an error is returned
;	as the function value.
;
; CALLING SEQUENCE:
;
;	status.wlc.v = LIB$GET_EF (ef_number.wl.r)
;
; INPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT INPUTS:
;
;	EF_POOL, a table of available event flag numbers in OWN
;	storage.
;
; OUTPUT PARAMETERS:
;
;	ef_number	- The number of the local event flag allocated
;			  or -1 if none were available.
;
; IMPLICIT OUTPUTS:
;
;	If successful, an entry is made into EF_POOL indicating that
;	a local event flag has been reserved.
;
; FUNCTION VALUE:
; COMPLETION CODES:
;
;	SS$_NORMAL	- Routine successfully completed.
;
;	LIB$_INSEF	- Insufficient event flags.  There were no
;			  more event flags available for allocation.
;			  If this error is returned, ef_number is
;			  also set to -1 in case the caller does not
;			  check for failure.
;
; SIDE EFFECTS:
;
;	NONE
;
;--

	.ENTRY LIB$GET_EF, ^M<IV>	; Save nothing

;+
;	Scan EF_POOL for first available event flag number
;-

SCAN:
	FFC	#0, #32, EF_POOL, R0
	BNEQ	FOUND			; One was found
	FFC	#32, #32, EF_POOL, R0	; Try next 32 positions
	BEQL	ALL_OUT			; None available

;+
;	Now recheck and set the bit under interlock, in case someone
;	has set it at AST level in the meantime.
;-

FOUND:
	BBSS	R0, EF_POOL, SCAN	; Repeat scan if already set

;+
;	Return success with event flag number in ef_number.
;-

	SUBL3	R0, #63, @ef_number(AP)	; Subtract from 63 because
					; lo order table bit is
					; event flag 63.

	MOVL	#1, R0			; SS$_NORMAL
	RET				; Exit

;+
;	Return error since no event flags available
;-

ALL_OUT:
	MNEGL	#1, @ef_number(AP)	; Set ef-number to -1
	MOVL	#LIB$_INSEF, R0		; Insufficient event flags
	RET				; Exit


	.SBTTL	LIB$FREE_EF - Deallocate one local event flag
;++
; FUNCTIONAL DESCRIPTION:
;
;	LIB$FREE_EF is the complement of LIB$GET_EF.  When a routine
;	called LIB$GET_EF to allocate a local event flag, and no
;	longer needs it, LIB$FREE_EF should be called to free the
;	event flag for use by other routines.
;
; CALLING SEQUENCE:
;
;	status.wlc.v = LIB$FREE_EF (ef_number.rl.r)
;
; INPUT PARAMETERS:
;
;	ef_number	- The number of the event flag to be 
;			  deallocated.  This is the value returned
;			  to the user by LIB$GET_EF.
;
; IMPLICIT INPUTS:
;
;	EF_POOL, a table of available event flag numbers in OWN
;	storage.
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	An entry is made in EF_POOL indicating that the event flag
;	is free for use.
;
; FUNCTION VALUE:
; COMPLETION CODES:
;
;	SS$_NORMAL	- Routine successfully completed.
;
;	LIB$_EF_ALRFRE	- Event flag already free.
;
;	LIB$_EF_RESSYS	- Event flag reserved to system.  This
;			  occurs if ef_number is outside the ranges
;			  of 1-23 and 32-63.
;
; SIDE EFFECTS:
;
;	NONE
;
;--

	.ENTRY LIB$FREE_EF, ^M<IV>	; Save nothing

;+
;	Check to see if ef_number is in the proper range.
;-

	CMPL	@ef_number(AP), #63	; Bigger than 63?
	BGTR	RES_SYS_1		; Yes, error
	TSTL	@ef_number(AP)		; Less than 1?
	BLEQ	RES_SYS_1		; Yes, error
	CMPB	@ef_number(AP), #23	; 1-23?
	BLEQ	OK_1			; Yes, ok
	CMPB	@ef_number(AP), #32	; 32-63?
	BLSS	RES_SYS_1		; No, error

;+
;	ef_number is in range.  Now, unset the bit.
;-

OK_1:
	SUBL3	@ef_number(AP), #63, R0	; Convert to bit offset
	BBCC	R0, EF_POOL, ALR_FRE	; Clear but error if 
					; already clear.

;+
;	Return success
;-

	MOVL	#1, R0			; SS$_NORMAL
	RET

;+
;	Error if event flag number reserved to system or
;	out of range.
;-

RES_SYS_1:
	MOVL	#LIB$_EF_RESSYS, R0	; Event flag reserved
	RET

;+
;	Error if event flag already free.
;-

ALR_FRE:
	MOVL	#LIB$_EF_ALRFRE, R0	; Event flag already free
	RET


	.SBTTL	LIB$RESERVE_EF - Reserve a local event flag 
;++
; FUNCTIONAL DESCRIPTION:
;
;	LIB$RESERVE_EF is used when a routine wants to allocate
;	a particular local event flag number.  This is different
;	from LIB$GET_EF which allocates an arbitrary event flag.
;
;	To deallocate an event flag reserved with LIB$RESERVE_EF
;	use LIB$FREE_EF.
;
; CALLING SEQUENCE:
;
;	status.wlc.v = LIB$RESERVE_EF (ef_number.rl.r)
;
; INPUT PARAMETERS:
;
;	ef_number	- The number of the event flag desired to be
;			  allocated.
;
; IMPLICIT INPUTS:
;
;	EF_POOL, a table of available event flags located in OWN
;	storage.
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	An entry is made in EF_POOL indicating that the event
;	flag is allocated.
;
; FUNCTION VALUE:
; COMPLETION CODES:
;
;	SS$_NORMAL	- Routine successfully completed.
;
;	LIB$_EF_ALRRES	- Event flag already reserved.
;
;	LIB$_EF_RESSYS	- Event flag reserved to system.  This 
;			  occurs if ef_number is outside the ranges
;			  of 1-23 and 32-63.
;
; SIDE EFFECTS:
;
;	NONE
;
;--

	.ENTRY LIB$RESERVE_EF, ^M<IV>	; Save nothing

;+
;	First check to see if ef_number is in range.
;-

	CMPL	@ef_number(AP), #63	; Greater than 63?
	BGTR	RES_SYS_2		; Yes, error
	TSTL	@ef_number(AP)		; Less than 1?
	BLEQ	RES_SYS_2		; Yes, error
	CMPB	@ef_number(AP), #23	; 1-23?
	BLEQ	OK_2			; Yes, ok
	CMPB	@ef_number(AP), #32	; 32-63?
	BLSS	RES_SYS_2		; No, error

;+
;	Now attempt to allocate that event flag
;-

OK_2:
	SUBL3	@ef_number(AP), #63, R0	; Convert to bit offset
	BBSS	R0, EF_POOL, ALR_RES	; Reserve it, but error
					; if already reserved.

;+
;	Return success
;-

	MOVL	#1, R0			; SS$_NORMAL
	RET				; Exit

;+
;	Error if event flag number reserved to system or out
;	of range.
;-

RES_SYS_2:
	MOVL	#LIB$_EF_RESSYS, R0	; Reserved to system
	RET				; Exit

;+
;	Error if already allocated.
;-

ALR_RES:
	MOVL	#LIB$_EF_ALRRES, R0	; Already reserved
	RET				; Exit

	.END
