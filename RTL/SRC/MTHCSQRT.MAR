	.TITLE	MTH$CSQRT
	.IDENT	/1-005/		; File: MTHCSQRT.MAR  Edit: SBL1005

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;
; FACILITY: MATH LIBRARY
;++
; ABSTRACT:
;	This module contains routine MTH$CSQRT - compute COMPLEX square root.
;
;--
;
; VERSION: 0
;
; HISTORY:
;
; AUTHOR:
;	Jonathan M. Taylor, 20-JUL-77: Version 0
;
; MODIFIED BY:
;
;
;

	.SBTTL	HISTORY		; Detailed Current Edit History


; Edit History for Version 0 of MTH$CSQRT
;
; 0-3	- Fix comments.  TNH 16-June-78
; 1-001	- Update version number and copyright notice.  JBS 16-NOV-78
; 1-002	- Add "_" to the PSECT directives.  JBS 21-DEC-78
; 1-003 - Fix zerodivide bug on (0,0).  SPR 22832  SBL 2-Mar-79
; 1-004 - Use MTH$SQRT_R3.  SBL 27-Sept-1979
; 1-005 - Use general mode addressing.  SBL 30-Nov-1981

	.SBTTL	DECLARATIONS

;
; INCLUDE FILES:
;

;
; EXTERNAL SYMBOLS:
	.GLOBL	MTH$CABS
	.GLOBL	MTH$SQRT_R3

;
; MACROS:
;	NONE

;
; PSECT DECLARATIONS:
	.PSECT	_MTH$CODE	PIC, SHR, LONG, EXE, NOWRT

;
; EQUATED SYMBOLS:
	argadr	=	4	; offset from AP of arg address

;
; OWN STORAGE:
;	NONE

	.SBTTL	MTH$CSQRT - compute COMPLEX square root

;++
; FUNCTIONAL DESCRIPTION:
;
;	The square root of a complex number (r, i) is computed
;	as follows:
;
;	ROOT = SQRT((ABS(r) + CABS((r, i))) / 2)
;	Q = i / (2*ROOT)
;
;
;	r	i	CSQRT((r, i))
;	-	-	-------------
;
;	>=0	any	(ROOT, Q)
;	<0	>=0	(Q, ROOT)
;	<0	<0	(-Q, -ROOT)
;
; CALLING SEQUENCE:
;
;	Square_root.wfc.v	= MTH$CSQRT (arg.rfc.r)
;
; INPUT PARAMETERS:
;
;	The one input parameter is the address of a COMPLEX number (r, i)
;	where r and i are both single-precision floating point values.
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;
;	Signals:	Reserved Operand if r or i is bad (-0.0)
;
;--


	.ENTRY	MTH$CSQRT,	^M<R2, R3>
	MTH$FLAG_JACKET			; flag as math routine

	MOVF	@argadr(AP), R2		; R2 = r
	BICW	#^X8000, R2		; R2 = ABS(r)
	CALLG	(AP), G^MTH$CABS	; R0 = CABS((r, i))
	ADDF	R2, R0			; R0 = ABS(r) + CABS((r, i))
	MULF	#0.5, R0		; R0 = (ABS(r) + CABS((r, i))) / 2
	JSB	G^MTH$SQRT_R3		; R0 = ROOT = SQRT(above)
	MOVL	argadr(AP), R2		; R2 -> (r, i)
	TSTF	R0			; is ROOT zero?
	BNEQ	1$			; no, go ahead
	CLRL	R1			; make zero quotient
	BRB	2$			; skip divide
1$:	DIVF3	R0, 4(R2), R1		; R1 = i / ROOT
	MULF	#0.5, R1		; R1 = Q = i / (2 * ROOT)
2$:	TSTF	(R2)+			; if r positive,
	BGEQ	RETRN			; then return (ROOT, Q)
	MOVL	R0, R3			; else switch ROOT and Q
	TSTF	(R2)			; if i positive
	BGEQ	RETRN1			; then return (Q, ROOT)
	MNEGF	R1, R0			; else negate ROOT and Q
	MNEGF	R3, R1			; and return (-Q, -ROOT)
	RET

RETRN1:
	MOVL	R1, R0			; continue to swap ROOT and Q
	MOVL	R3, R1			; and return (Q, ROOT)
RETRN:
	RET


	.END
