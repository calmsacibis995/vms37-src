MODULE OTS$$CLOSE_FILE (			! CLOSE FILE
		IDENT = '1-012'			! File: OTSCLOSEF.B32
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY: Language Intependent Library - Close File
!
! ABSTRACT:
!
!	This module issues an RMS close to a file on a LUN.
!
! ENVIRONMENT: User access level; re-entrant, AST level or not.
!
! AUTHOR: John Sauter, CREATION DATE: 23-JAN-1979
!
! MODIFIED BY:
!
! 1-001	- Original from FORCLOSE.  JBS 23-JAN-1979
! 1-002	- Set LUB$V_DEALLOC so that the LUN's virtual memory will be
!	   released.  JBS 24-JAN-1979
! 1-003	- Call OTS$$PURGE_IOBU before closing to purge I/O buffers.
!	   JBS 24-JAN-1979
! 1-004	- Put two dollar signs on non-user entry points.  JBS 26-JAN-1979
! 1-005	- Change purge external name to OTS$$PUR_IO_CLO.  JBS 07-MAR-1979
! 1-006	- Call through LUB$A_CLOSE if non-zero.  JBS 04-APR-1979
! 1-007	- Implement LUB$V_SUBMIT.  JBS (via SBL) 20-APR-1979
! 1-008 - Don't do a $CLOSE if FAB$W_IFI is zero and LUB$V_USEROPEN
!	  is set.  SPR 11-25235  SBL 31-July-1979
! 1-009	- Don't call OTS$$PUR_IO_CLO.  Our caller must now purge I/O
!	   buffers.  JBS 20-AUG-1979
! 1-010	- If multi-stream connect, do a $DISCONNECT instead of a $CLOSE.
!	   JBS 28-SEP-1979
! 1-011 - If $CLOSE, put STS and STV fields in the RAB for better
!	  error reporting.  SBL 8-Oct-1979
! 1-012 - Don't RMS close the file if IFI is zero.  Ignore USEROPEN.  SBL 6-Dec-1979
!--

!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!

REQUIRE 'RTLIN:OTSLNK';				! define all linkages

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    OTS$$CLOSE_FILE : CALL_CCB;			! Internal file close

!
! INCLUDE FILES:
!

REQUIRE 'RTLML:OTSLUB';				! logical unit block definitions

REQUIRE 'RTLIN:OTSMAC';				! macros

REQUIRE 'RTLIN:RTLPSECT';			! Define DECLARE_PSECTS macro

LIBRARY 'RTLSTARLE';				! STARLET library for macros and symbols

!
! MACROS:
!
!	None
!
! EQUATED SYMBOLS:
!
!	None
!
! PSECT DECLARATIONS:
!
DECLARE_PSECTS (OTS);				! declare PSECTs for OTS$ facility
!
! OWN STORAGE:
!
!	None
!
! EXTERNAL REFERENCES:
!
!	NONE
!


GLOBAL ROUTINE OTS$$CLOSE_FILE 			! Internal file closer
    : CALL_CCB =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Do an RMS CLOSE or DISCONNECT of a LUN.  This includes handling
!	any of the disposition flags in the LUB, whether set by OPEN or CLOSE.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	Various fields from the LUB, pointed to by CCB.
!
! IMPLICIT OUTPUTS
!
!	Various fields in the LUB and RAB.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	The same as RMS CLOSE.  The caller generally only tests the
!	low-order bit of the completion code: if 1 the close succeeded,
!	if 0 it failed.
!
! SIDE EFFECTS:
!
!	CLOSEs the LUN, and marks it for deallocation.
!
!--

    BEGIN

    EXTERNAL REGISTER
	CCB : REF BLOCK [, BYTE];

    LOCAL
	NAM_BLOCK : BLOCK [NAM$C_BLN, BYTE],	! local name block for delete
	FAB_BLOCK : BLOCK [FAB$C_BLN, BYTE],	! allocate LOCAL FAB
	FAB : REF BLOCK [FAB$C_BLN, BYTE],	! declare FAB base pointer
	CLOSE_RESULT;				! RMS result of $CLOSE

!+
! Initialize FAB
! Copy FAB address into the LUB for proper error status reporting.
!-
    FAB = FAB_BLOCK;
    CH$FILL (0, FAB$C_BLN, .FAB);
    FAB [FAB$B_BID] = FAB$C_BID;
    FAB [FAB$B_BLN] = FAB$C_BLN;
    CCB [LUB$A_FAB] = .FAB;
!+
! Copy the directory ID into the NAM block and link into FAB.
! Set pointer to resultant name string (in case this is print
! so spooler will use in banner).
!-
    CH$FILL (0, NAM$C_BLN, NAM_BLOCK);
    NAM_BLOCK [NAM$B_BID] = NAM$C_BID;
    NAM_BLOCK [NAM$B_BLN] = NAM$C_BLN;
    CH$MOVE (NAM$S_DID, CCB [LUB$W_DID], NAM_BLOCK [NAM$W_DID]);
    FAB [FAB$L_NAM] = NAM_BLOCK;
    FAB [FAB$V_NAM] = 1;
    NAM_BLOCK [NAM$L_RSA] = .CCB [LUB$A_RSN];
    NAM_BLOCK [NAM$B_RSL] = .CCB [LUB$B_RSL];
!+
! If V_DELETE is on in the LUB, set the DLT bit in the FAB.
!-

    IF .CCB [LUB$V_DELETE] THEN FAB [FAB$V_DLT] = 1;

!+
! If V_PRINT is on in the LUB, set the SPL bit in the FAB.
!-

    IF .CCB [LUB$V_PRINT] THEN FAB [FAB$V_SPL] = 1;

!+
! If V_SUBMIT is on in the LUB, set the SCF bit in the FAB.
!-

    IF .CCB [LUB$V_SUBMIT] THEN FAB [FAB$V_SCF] = 1;

!+
! Copy remembered RMS internal file id from LUB to FAB.
!-
    FAB [FAB$W_IFI] = .CCB [LUB$W_IFI];
!+
! Do the close cleanup, if any is provided.
!-

    IF (.CCB [LUB$A_CLOSE] NEQA 0) THEN CALL_CCB (.CCB [LUB$A_CLOSE]);

!+
! Now do the RMS close if IFI is not zero.
!-

    IF .FAB [FAB$W_IFI] NEQ 0
    THEN
	BEGIN
!+
! If the file is just a stream from another file, do a $DISCONNECT.
! Otherwise, do a $CLOSE and put the error codes into the RAB so that
! our caller has a better idea of what the error was.
!-

	IF (.CCB [LUB$V_M_STREAM])
	THEN
	    CLOSE_RESULT = $DISCONNECT (RAB = .CCB)
	ELSE
	    BEGIN
	    CLOSE_RESULT = $CLOSE (FAB = .FAB);
	    IF NOT .CLOSE_RESULT
	    THEN
		BEGIN
		CCB [RAB$L_STS] = .CLOSE_RESULT;
		CCB [RAB$L_STV] = .FAB [FAB$L_STV];
		END;
	    END

	END
    ELSE
	CLOSE_RESULT = 1;

!+
! Indicate that the FAB error status is not meaningful anymore.
!-
    CCB [LUB$A_FAB] = 0;
!+
! Indicate that the LUN has been closed, so further I/O to it will
! fail.
!-
    CCB [LUB$V_OPENED] = 0;
!+
! Flag OTS$$POP_CCB that it is to deallocate the virtual storage
! occupied by this LUN.  This bit also prevents OPEN from opening
! this LUN.  OPEN will only see it if OTS$$POP_CCB does not deallocate
! the LUB, which will happen only if there is recursive I/O active on
! the LUN.  When all of the recursive I/O has failed then the LUN
! can be opened again.
!-
    CCB [LUB$V_DEALLOC] = 1;
!+
! Return the RMS status resulting from the CLOSE.
!-
    RETURN (.CLOSE_RESULT);
    END;

END						! END of OTS$$CLOSE_FILE module

ELUDOM
