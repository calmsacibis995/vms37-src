	.TITLE	LIB$INSQHI - Insert Entry into Queue at Head, Interlocked
	.IDENT	/1-002/			; File: LIBINSQHI.MAR Edit:DGP1002

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY: General Utility Library
;
; ABSTRACT:
;
;	One of four procedures which give higher level languages access
;	to the interlocked, self-relative queue instructions on the
;	VAX-11/780 and all future machines. This library procedure permits
;	the high level language user to have access to the INSQHI instruction.
;
; ENVIRONMENT: User Mode, AST Reentrant
;
;--
; AUTHOR: R. E. Johnston, CREATION DATE: 03-Dec-79
;
; MODIFIED BY:
;
;  1-001 - Original.  REJ 03-Dec-79	
; 1-002 - Retry count is off by one.  DGP 14-Aug-1981
;--

	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;

;
; EXTERNAL DECLARATIONS:
;
	.DSABL	GBL			; Disable automatic generation
					; of .EXTRN
	.EXTRN	SS$_NORMAL		; Normal successful completion
	.EXTRN	LIB$_SECINTFAI		; Secondary Interlock still
					; locked after retry-cnt retrys
	.EXTRN	LIB$_ONEENTQUE		; Successful Completion but
					; only one entry is now
					; contained in queue
;						
; MACROS:
;

;
; EQUATED SYMBOLS:
;
	DEF_RETRY_CNT = 10		; Default retry count for
					; Secondary Interlock fails
;
; OWN STORAGE:
;

;
; PSECT DECLARATIONS:
;
	.PSECT _LIB$CODE PIC, SHR, LONG, EXE, NOWRT




	.SBTTL LIB$INSQHI - Insert Entry into Queue Head
;++
; FUNCTIONAL DESCRIPTION:
;
;	
;	One of four procedures which give higher level languages access
;	to the interlocked, self-relative queue instructions on the
;	VAX-11/780 and all future machines. This library procedure permits
;	the high level language user to have access to the INSQHI instruction.
;	With this procedure the user may insert a queue entry at the head of a 
;	user specified queue.
;
;	If the entry is successfully added to the head of the queue and the
;	queue contains more than one entry, a successful completion status is
;	returned. If the entry is added to the head of the queue and no other
;	entries are in the queue, the execution is successful but a unique
;	status value is returned indicating that the queue now contains one
;	entry (LIB$_ONEENTQUE).
;
;	These queue instructions are synchronized across all processors 
;	through the use of a secondary interlock. The user may specify a 
;	secondary interlock retry count. (The default retry count is 10.)
;	If the secondary interlock remains locked through retry-count retrys,
;	a secondary interlock status is returned to the user (LIB$_SECINTFAI)
;	and the entry is NOT successfully added to the head of the queue.
;
; CALLING SEQUENCE:
;
;   ret-status.wlc.v = LIB$INSQHI (entry.ml.ra, header.mq.r[, retry-cnt.rlu.r])
;
;
; INPUT PARAMETERS:
;
	ENTRY = 4			; Address of queue entry to be inserted
	HEADER = 8			; Address of queue header
	RETRY_CNT = 12			; Address of retry count
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; FUNCTION VALUE:
;
;	SS$_NORMAL     - Entry added to head of queue, queue contains more
;		         than one entry.	
;	LIB$_ONEENTQUE - Successful completion of instruction (INSQHI).
;			 Entry added to head of queue, but queue was empty.
;	LIB$_SECINTFAI - Secondary Interlock failed, queue is not modified.
;
; SIDE EFFECTS:
;
;	SS$_ROPRAND - reserved operand fault for:
;		    1.) either the entry or the header is at an address
;			that is not quad word aligned.
;		    2.) address of header equals address of entry.
;
;--

	.ENTRY  LIB$INSQHI , ^M< >	; Entry point

	MOVL	#DEF_RETRY_CNT, R0	; R0 = Default retry count of 10
	CMPB	(AP), #<RETRY_CNT/4>	; Check for optional retry cnt operand
	BLSSU	20$			; Branch if default count to be used
	MOVL	@RETRY_CNT(AP), R0	; R0 = User specified retry count
20$:
	INSQHI	@ENTRY(AP), @HEADER(AP)	; Do the instruction (INSQHI)
	BLEQU	30$			; Branch if Z = 1 (One entry in queue)
					; or C = 1 (Secondary Interlock fail)
	MOVL	#SS$_NORMAL, R0		; Normal status - Entry added to head
					; of queue and more than one entry is
					; now in queue
	RET				; Successful return to user
30$:
	BCS	40$			; Branch if Secondary Interlock fail
	MOVL	#LIB$_ONEENTQUE, R0	; Assume exactly one entry now in queue
					; Entry successfully entered into queue
	RET				; Successful return to user
40$:
	SOBGEQ	R0, 20$			; Loop until retry count is exhausted
	MOVL	#LIB$_SECINTFAI, R0	; Retry count is exhausted 
					; Secondary Interlock fail status
	RET				; Unsuccessful return to user
	.END
