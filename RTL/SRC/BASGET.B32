MODULE BAS$GET (				! Basic GET construct
		IDENT = '1-017'			! File: basget.b32 Edit:FM1017
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:
!	Basic support library - user callable
!
! ABSTRACT:
!	This module is the UPI level of the Basic GET construct.  Initially,
!	it contains only the code for sequential I/O.  This module will set
!	up the I/O data base for the LUN and dispatch to the UDF level.
!
!
! ENVIRONMENT:
!	User access mode - AST reentrant.
!
! AUTHOR: Donald G. Petersen, CREATION DATE: 19-Feb-79
!
! MODIFIED BY:
!
!	DGP, 19-Feb-79 : VERSION 01
! 1-001	- original.  DGP 19-Feb-79
! 1-002 - Put () after JSB to BAS$$REC_GSE so Bliss won't optimize it out.
!	  DGP 22-Feb-79
! 1-003 - Add BAS$GET_RECORD.  DGP 02-Mar-79
! 1-004 - More work on relative I/O.  DGP 05-Mar-79
! 1-005 - Add all of the trash for 'foreign buffers'.  DGP 26-Mar-79
! 1-006	- Make all external references use general addressing.  JBS 28-MAR-1979
! 1-007	- Remove library file RTLSTARLE, not used.  JBS 28-MAR-1979
! 1-008	- Load register CCB properly before second call to CB_POP.
!	   JBS 29-MAR-1979
! 1-009 - Add GET indexed.  DGP 03-Apr-79
! 1-010 - One too many arguments in call to BAS$$REC_GIN in BAS$GET_KEY.
!	  DGP 10-Apr-79
! 1-011	- Treat channel 0 correctly and check for channel not open.
!	   JBS 19-APR-1979
! 1-012	- Set up ISB$A_USER_FP.  JBS 25-JUL-1979
! 1-013 - Signal virtual array usage and set block use flag.  DGP 16-Oct-79
! 1-014 - Signal ILLIO_CHA if channel passed is less than zero. FM 10-sep-80
! 1-015 - Pass to BAS$$CB_PUSH, LUB$K_ILUN_MIN+2, as a result GET #0 BASIC
! 	  statement will generate an error.  FM 17-SEP-80
! 1-016 - Undo 15.  We can now do I/O to #0, because BAS$PUT will now use
!	  foreign buffer mechanism to do #0 PUTs. FM 9-JUL-81.
! 1-017 - Fixed a couple of comments to reflect how channel 0 problem is fixed.
!	  FM 9-jul-81.
!--

!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES
!

REQUIRE 'RTLIN:OTSLNK';				! Define all linkages

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    BAS$GET_RECORD : NOVALUE,			! UPI level Relative GET
    BAS$GET_KEY : NOVALUE,			! UPI level Indexed GET
    BAS$GET : NOVALUE;				! UPI level Sequential GET

!
! INCLUDE FILES:
!

REQUIRE 'RTLML:OTSISB';				! ISB definitions

REQUIRE 'RTLML:BASPAR';				! Basic literal for foreign buffer kludge

REQUIRE 'RTLML:OTSLUB';				! LUB definitions

REQUIRE 'RTLIN:RTLPSECT';			! Define DECLARE_PSECTS macro

LIBRARY 'RTLSTARLE';				! System symbols

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
!
! PSECT DECLARATIONS:
!
DECLARE_PSECTS (BAS);
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    BAS$$OPEN_ZERO;				! Open "channel 0"

EXTERNAL LITERAL
    BAS$K_IO_CHANOT : UNSIGNED (8),		! I/O channel not open
    BAS$K_ILLILLACC : UNSIGNED (8),		! Illegal or illogical access
    BAS$K_ILLIO_CHA : UNSIGNED (8);		! Illegal I/O channel

EXTERNAL ROUTINE
    BAS$$REC_GIN : JSB_REC_IND NOVALUE,		! REC level - RMS interface, GET indexed
    BAS$$REC_GRE : JSB_DO_READ NOVALUE,		! REC level - RMS interface GET relative
    BAS$$REC_GSE : JSB_DO_READ NOVALUE,		! REC level processing - RMS interface
    						! GET sequential
    BAS$$CB_PUSH : JSB_CB_PUSH NOVALUE,		! Push down I/O system
    BAS$$CB_POP : JSB_CB_POP NOVALUE,		! Pop I/O system back one CB
    BAS$$STOP_IO : NOVALUE,			! Signal fatal I/O errors
    BAS$$STOP : NOVALUE;			! Signal fatal BASIC error


GLOBAL ROUTINE BAS$GET (			! GET sequential
	UNIT					! logical unit number
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine will set up the I/O data base for this LUN if necessary
!	and then dispatch off to the REC level.  When control is returned to
!	this routine, it pops the CCB off of the I/O system.  The actual inter-
!	face to RMS is done at the REC level.  One record is read.
!
! FORMAL PARAMETERS:
!
!	UNIT.rlu.v	logical unit number
!
! IMPLICIT INPUTS:
!
!	LUB$V_VA_USE	virtual array usage
!
! IMPLICIT OUTPUTS:
!
!	OTS$$A_CUR_LUB		pointer to current control block
!	RECOUNT			Basic Global which contains the number of bytes read
!	ISB$B_STTM_TYPE		the statement type
!	LUB$V_BLK_USE		this file has been used for other than virtual I/O
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	RECOUNT is assigned the number of bytes read.
!	Signals:
!	BAS$K_IO_CHANOT (I/O channel not open)
!	BAS$K_ILLIO_CHA (illegal I/O channel) for foreign buffers.
!
!--

    BEGIN

    BUILTIN
	FP;

    GLOBAL REGISTER
	CCB = K_CCB_REG : REF BLOCK [, BYTE];

    LOCAL
	FMP : REF BLOCK [, BYTE],
	ACTUAL_UNIT,				! Unit number, without foreign buffer
	TEMP_R11;				! CCB for foreign buffer, or 0

!+
! If channel is less than zero then signal an error.
!-
    IF ( .UNIT LSS 0 ) THEN BAS$$STOP(BAS$K_ILLIO_CHA);

    FMP = .FP;
!+
! Check for "foreign buffers".  If the unit number exceeds 255 then a foreign
! buffer is specified.  The foreign buffer is actually a unit number whose
! buffer is to receive the record which is read.  The "foreign buffer" unit
! is pushed to pick up the CB address which is passed to the REC level.  Then
! the unit pointing to the file is pushed so that the CCB points to the log-
! ical unit which actually do the I/O.  Upon return, the necessary RAB fields
! (USZ and UBF) have been restored and two CB_POPs are done if necessary.
!-
    TEMP_R11 = 0;
    ACTUAL_UNIT = .UNIT;

    IF (.UNIT GTR LUB$K_LUN_MAX)
    THEN
	BEGIN

	LOCAL
	    FOREIGN_BUFFER;

	FOREIGN_BUFFER = .UNIT/BAS$K_LUN_MAX;
	ACTUAL_UNIT = .UNIT MOD BAS$K_LUN_MAX;

	IF (.FOREIGN_BUFFER GTRU BAS$K_MAX_FOR_B) THEN BAS$$STOP (BAS$K_ILLIO_CHA);

	BAS$$CB_PUSH (.FOREIGN_BUFFER, LUB$K_LUN_MIN);
	CCB [ISB$A_USER_FP] = .FMP [SF$L_SAVE_FP];

	IF ( NOT .CCB [LUB$V_OPENED]) THEN BAS$$STOP_IO (BAS$K_IO_CHANOT);

	TEMP_R11 = .CCB;
	END;

!+
! Worry about channel zero.  If the actual unit number is zero, make sure
! "channel 0" is open and use its input side so #0 I/O can work.
!-

    IF (.ACTUAL_UNIT EQL 0) THEN ACTUAL_UNIT = LUB$K_LUN_INPU;

    BAS$$CB_PUSH (.ACTUAL_UNIT, LUB$K_ILUN_MIN);
    CCB [ISB$A_USER_FP] = .FMP [SF$L_SAVE_FP];
!+
! If we are on a default unit (unit number less than zero) then
! we can open it if it is not already open.  Otherwise it must
! be open already.
!-

    IF ( NOT .CCB [LUB$V_OPENED])
    THEN

	IF (.ACTUAL_UNIT LSS 0)
	THEN
	    BEGIN
	    BAS$$OPEN_ZERO (.FMP [SF$L_SAVE_FP])
	    END
	ELSE
	    BEGIN
	    BAS$$STOP_IO (BAS$K_IO_CHANOT);
	    END;

!+
! Now that the data base is in place, store the statement type and  go
! directly to the REC level.
!-
    CCB [ISB$B_STTM_TYPE] = ISB$K_ST_TY_GSE;
!+
! Check for virtual array usage and set block usage.
!-
    IF .CCB [LUB$V_VA_USE] EQL 1 THEN BAS$$STOP_IO(BAS$K_ILLILLACC);
    CCB [LUB$V_BLK_USE] = 1;
    BAS$$REC_GSE (.TEMP_R11);
!+
! Now that the GET has been done, pop the CCB off the I/O system.
!-
    BAS$$CB_POP ();
!+
! Pop the "foreign buffer" CB if necessary.  It is kept on the CB stack until
! now to guard against an AST closing the foreign buffer channel.
!-

    IF (.TEMP_R11 NEQA 0)
    THEN
	BEGIN
	CCB = .TEMP_R11;
	BAS$$CB_POP ();
	END;

    END;					!End of BAS$GET


GLOBAL ROUTINE BAS$GET_KEY (			! GET indexed
	UNIT, 					! logical unit number
	KEY_NO, 				! key of index
	REL_OP, 				! relative relationship of keys
	KEY					! key to compare for
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine will set up the I/O data base for this LUN if necessary
!	and then go directly to the REC level.  When control is returned to
!	this routine, it pops the CCB off of the I/O system.  The actual inter-
!	face to RMS is done at the REC level.  One record is read.
!
! FORMAL PARAMETERS:
!
!	UNIT.rlu.v	logical unit number
!	KEY_NO.rl.v
!	REL_OP.rl.v
!	KEY.rt.dx
!
! IMPLICIT INPUTS:
!
!	LUB$V_VA_USE			virtual array use of this file
!
! IMPLICIT OUTPUTS:
!
!	LUB$V_BLK_USE		non-virtual use of this file
!	OTS$$A_CUR_LUB		pointer to current control block
!	RECOUNT			Basic Global which contains the number of bytes read
!	ISB$B_STTM_TYPE		the statement type
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	RECOUNT is assigned the number of bytes read.
!	Signals:
!	BAS$K_IO_CHANOT (I/O channel not open)
!	BAS$K_ILLIO_CHA (illegal I/O channel) for foreign buffers.
!	BAS$K_ILLILLACC (illegal or illogical access)
!
!--

    BEGIN

    BUILTIN
	FP;

    GLOBAL REGISTER
	CCB = K_CCB_REG : REF BLOCK [, BYTE];

    LOCAL
	FMP : REF BLOCK [, BYTE],
	ACTUAL_UNIT,				! Unit number, without foreign buffer
	TEMP_R11;				! CCB for foreign buffer, or 0

    FMP = .FP;
!+
! Check for "foreign buffers".  If the unit number exceeds 255 then a foreign
! buffer is specified.  The foreign buffer is actually a unit number whose
! buffer is to receive the record which is read.  The "foreign buffer" unit
! is pushed to pick up the CB address which is passed to the REC level.  Then
! the unit pointing to the file is pushed so that the CCB points to the log-
! ical unit which actually do the I/O.  Upon return, the necessary RAB fields
! (USZ and UBF) have been restored and two CB_POPs are done if necessary.
!-
    TEMP_R11 = 0;
    ACTUAL_UNIT = .UNIT;

    IF (.UNIT GTR LUB$K_LUN_MAX)
    THEN
	BEGIN

	LOCAL
	    FOREIGN_BUFFER;

	FOREIGN_BUFFER = .UNIT/BAS$K_LUN_MAX;
	ACTUAL_UNIT = .UNIT MOD BAS$K_LUN_MAX;

	IF (.FOREIGN_BUFFER GTRU BAS$K_MAX_FOR_B) THEN BAS$$STOP (BAS$K_ILLIO_CHA);

	BAS$$CB_PUSH (.FOREIGN_BUFFER, LUB$K_LUN_MIN);
	CCB [ISB$A_USER_FP] = .FMP [SF$L_SAVE_FP];

	IF ( NOT .CCB [LUB$V_OPENED]) THEN BAS$$STOP_IO (BAS$K_IO_CHANOT);

	TEMP_R11 = .CCB;
	END;

    BAS$$CB_PUSH (.ACTUAL_UNIT, LUB$K_ILUN_MIN);
    CCB [ISB$A_USER_FP] = .FMP [SF$L_SAVE_FP];
!+
! If the channel is not open, give an error.
!-

    IF ( NOT .CCB [LUB$V_OPENED]) THEN BAS$$STOP_IO (BAS$K_IO_CHANOT);

!+
! Now that the data base is in place, store the statement type and go
! directly to the REC level.
!-
    CCB [ISB$B_STTM_TYPE] = ISB$K_ST_TY_GIN;
!+
! Check for virtual array usage and set block usage.
!-
    IF .CCB [LUB$V_VA_USE] EQL 1 THEN BAS$$STOP_IO(BAS$K_ILLILLACC);
    CCB [LUB$V_BLK_USE] = 1;
    BAS$$REC_GIN (.KEY_NO, .REL_OP, .KEY, .TEMP_R11);
!+
! Now that the GET has been done, pop the CCB off the I/O system.
!-
    BAS$$CB_POP ();
!+
! Pop the "foreign buffer" CB if necessary.  It is kept on the CB stack until
! now to guard against an AST closing the foreign buffer channel.
!-

    IF (.TEMP_R11 NEQA 0)
    THEN
	BEGIN
	CCB = .TEMP_R11;
	BAS$$CB_POP ();
	END;

    END;					!End of BAS$GET_KEY


GLOBAL ROUTINE BAS$GET_RECORD (			! GET relative
	UNIT, 					! logical unit number
	RECORD_NUM				! relative record number
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine will set up the I/O data base for this LUN if necessary
!	and then dispatch off to the UDF level.  When control is returned to
!	this routine, it pops the CCB off of the I/O system.  The actual inter-
!	face to RMS is done at the REC level.  One record is read.
!	NOTE: Foreign buffers apply to GET and PUT.  The LUN of the foreign buffer
!	is in the upper byte of the unit number.
!
! FORMAL PARAMETERS:
!
!	UNIT.rlu.v	logical unit number
!	RECORD_NUM.rl.v		relative record number
!
! IMPLICIT INPUTS:
!
!	OTS$$A_CUR_LUB		pointer to current control block
!	LUB$V_VA_USE		indicates virtual array usage
!
! IMPLICIT OUTPUTS:
!
!	LUB$V_BLK_USE		indicates non-virtual array usage
!	RECOUNT			Basic Global which contains the number of bytes read
!	ISB$B_STTM_TYPE		the statement type
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	RECOUNT is assigned the number of bytes read.
!	Signals:
!	BAS$K_IO_CHANOT (I/O channel no open)
!	BAS$K_ILLIO_CHA (Illegal I/O channel)
!	for foreign buffers
!	BAS$K_ILLILLACC (illegal or illogical access)
!
!--

    BEGIN

    BUILTIN
	FP;

    GLOBAL REGISTER
	CCB = K_CCB_REG : REF BLOCK [, BYTE];

    LOCAL
	FMP : REF BLOCK [, BYTE],
	ACTUAL_UNIT,				! Unit number, without foreign buffer
	TEMP_R11;				! CCB for foreign buffer, or 0

    FMP = .FP;
!+
! Check for "foreign buffers".  If the unit number exceeds 255 then a foreign
! buffer is specified.  The foreign buffer is actually a unit number whose
! buffer is to receive the record which is read.  The "foreign buffer" unit
! is pushed to pick up the CB address which is passed to the REC level.  Then
! the unit pointing to the file is pushed so that the CCB points to the log-
! ical unit which actually do the I/O.  Upon return, the necessary RAB fields
! (USZ and UBF) have been restored and two CB_POPs are done if necessary.
!-
    TEMP_R11 = 0;
    ACTUAL_UNIT = .UNIT;

    IF (.UNIT GTR LUB$K_LUN_MAX)
    THEN
	BEGIN

	LOCAL
	    FOREIGN_BUFFER;

	FOREIGN_BUFFER = .UNIT/BAS$K_LUN_MAX;
	ACTUAL_UNIT = .UNIT MOD BAS$K_LUN_MAX;

	IF (.FOREIGN_BUFFER GTRU BAS$K_MAX_FOR_B) THEN BAS$$STOP (BAS$K_ILLIO_CHA);

	BAS$$CB_PUSH (.FOREIGN_BUFFER, LUB$K_LUN_MIN);
	CCB [ISB$A_USER_FP] = .FMP [SF$L_SAVE_FP];

	IF ( NOT .CCB [LUB$V_OPENED]) THEN BAS$$STOP_IO (BAS$K_IO_CHANOT);

	TEMP_R11 = .CCB;
	END;

    BAS$$CB_PUSH (.ACTUAL_UNIT, LUB$K_ILUN_MIN);
    CCB [ISB$A_USER_FP] = .FMP [SF$L_SAVE_FP];
!+
! If the channel is not open, give an error.
!-

    IF ( NOT .CCB [LUB$V_OPENED]) THEN BAS$$STOP_IO (BAS$K_IO_CHANOT);

!+
! Now that the data base is in place, store the statement type, store the index, and  go
! directly to the REC level.
!-
    CCB [LUB$L_LOG_RECNO] = .RECORD_NUM;
    CCB [ISB$B_STTM_TYPE] = ISB$K_ST_TY_GRE;
!+
! Check for virtual array usage and set block usage.
!-
    IF .CCB [LUB$V_VA_USE] EQL 1 THEN BAS$$STOP_IO(BAS$K_ILLILLACC);
    CCB [LUB$V_BLK_USE] = 1;
    BAS$$REC_GRE (.TEMP_R11);
!+
! Now that the GET has been done, pop the CCB off the I/O system.
!-
    BAS$$CB_POP ();
!+
! Pop the "foreign buffer" CB if necessary.  It is kept on the CB stack until
! now to guard against an AST closing the foreign buffer channel.
!-

    IF (.TEMP_R11 NEQA 0)
    THEN
	BEGIN
	CCB = .TEMP_R11;
	BAS$$CB_POP ();
	END;

    END;					!End of BAS$GET_RECORD

END						!End of module - BAS$GET

ELUDOM
