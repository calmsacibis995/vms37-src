	.TITLE	BAS$TRM
	.IDENT	/1-008/			; File: BASTRM.MAR	Edit: SBL1008

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY: BASIC code support
;
; ABSTRACT:
;
;	This module implements the BASIC-PLUS-2 EDIT$ function.
;
; ENVIRONMENT: User Mode, AST Reentrant
;
;--
; AUTHOR: R. WILL, CREATION DATE: 2-May-79
;
; MODIFIED BY:
;
; R. Will, : VERSION 1
; 1-001	- Original 
; 1-002 - Fix order of source and dest strs in TRM. RW 16-May-79
; 1-003 - Enable IV in entry masks.  RW 23-May-79
; 1-004	- Change calls to STR$COPY.  JBS 16-JUL-1979
; 1-005 - Make PIC.  RW  13-Sept-79
; 1-006 - String cleanup, call STR$TRM.  RW  31-Oct-79
; 1-007 - Make TRM a separate module.  RW  13-Nov-79
; 1-008 - Use general mode addressing.  SBL 30-Nov--1981

	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;

	$DSCDEF					; Define descriptor offsets

;
; EXTERNAL DECLARATIONS:
;
	.DSABL	GBL				; Prevent undeclared
						; symbols from being
						; automatically global.

	.EXTRN	STR$TRIM			; routine to trim blanks and tabs

;
; MACROS:
;

;+
; Macro to generate tables to translate ASCII characters.  This macro
; will generate a table of bytes starting at the designated character
; for the series of characters needed.
;-

	.MACRO	GEN_TRANS_TABLE, NUMBER_OF_CHARS, STARTING_CHAR
	I = STARTING_CHAR
	.REPT	NUMBER_OF_CHARS
	.BYTE	I
	I = I + 1
	.ENDR
	.ENDM

;
; EQUATED SYMBOLS:
;

	blank		= ^A/ /
	space_or_tab	= ^X0001
	junk_byte	= ^X0002
	quote		= ^X0004
	space_tab_junk	= ^X0003

	trim_parity_bit = 0
	disc_sp_tab_bit = 1
	disc_junk_bit	= 2
	disc_lead_bit	= 3
	compact_bit	= 4
	upper_case_bit	= 5
	parens_bit	= 6
	disc_trail_bit	= 7
	ignor_quote_bit	= 8

;
; OWN STORAGE:
;

;
; PSECT DECLARATIONS:
;
	.PSECT _BAS$CODE PIC, USR, CON, REL, LCL, SHR, -
			EXE, RD, NOWRT, LONG



	.SBTTL	BAS$TRM		  - Delete trailing blanks and spaces
;++
; FUNCTIONAL DESCRIPTION:
;
;	This routine deletes trailing tabs and spaces from the source string
;	and then uses STR$COPY to write the string in the destination.  It
;	finds the last non-blank character by starting at the end of the
;	string and using each character to index into a table that has a
;	flag for spaces and tabs.
;
; CALLING SEQUENCE:
;
;	CALL BAS$TRM (dest_string.wx.dx, src_string.rx.dx)
;
; INPUT PARAMETERS:
;
	src_string = 8
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
	dest_string = 4
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; FUNCTION VALUE:
; COMPLETION CODES:
;
;	NONE
;
; SIDE EFFECTS:
;
;	STR$COPY may allocate space to the destination string.  Any of
;	STR$COPY's errors may be signalled.
;
;--

	.ENTRY BAS$TRM, ^M<>

;+
; Register usage
;-
	
	CALLG	(AP), G^STR$TRIM
	RET					; End of BAS$TRM



;+
; The following tables are used for the SPANC, SCANC, and MOVTC instructions
; used in the BAS$EDIT routine
;-


;+
; Table used to 'remove parity bit' from all characters in the character
; string.  Used to ensure that the high bit is clear on all characters.
;-

PARITY_TAB:
	GEN_TRANS_TABLE	128, 0		; fill ASCII character set
	GEN_TRANS_TABLE	128, 0		; truncate hi bit

;+
; Table used to translate lower case to uppercase.  Translate rest of
; ASCII character set to self.
;-

UPCASE_TAB:
	GEN_TRANS_TABLE	97, 0		; fill table to start of lowercase
	GEN_TRANS_TABLE	26, 65		; translate lower to upper
	GEN_TRANS_TABLE	133, 123	; finish table, translate to self

SQBRAK_TO_PAREN:
	GEN_TRANS_TABLE	91, 0		; translate to self
	.BYTE		40		; translate [ to (
	.BYTE		92		; translate to self
	.BYTE		41		; translate ] to )
	GEN_TRANS_TABLE	162, 94		; translate remainder to self

UPCASE_PAREN:
	GEN_TRANS_TABLE	91, 0		; translate to self
	.BYTE		40		; translate [ to (
	.BYTE		92		; translate to self
	.BYTE		41		; translate ] to )
	GEN_TRANS_TABLE	3, 94		; translate to self
	GEN_TRANS_TABLE	26, 65		; translate lower to upper
	GEN_TRANS_TABLE	133, 123	; finish table, translate to self

SCAN_SPAN_TABLE:
	.BYTE		junk_byte	; NUL
	.BYTE		0[8]		; skip over
	.BYTE		space_or_tab	; tab
	.BYTE		junk_byte	; LF
	.BYTE		0		; skip over
	.BYTE		junk_byte[2]	; FF and CR
	.BYTE		0[13]		; skip over
	.BYTE		junk_byte	; ESC
	.BYTE		0[4]		; skip over
	.BYTE		space_or_tab	; space
	.BYTE		0		; skip over
	.BYTE		quote		; double quote
	.BYTE		0[4]		; skip over
	.BYTE		quote		; single quote
	.BYTE		0[87]		; skip over
	.BYTE		junk_byte	; DEL
	.BYTE		0[128]		; skip over
	.END
