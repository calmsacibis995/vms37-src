%TITLE 'FOR$$UDF_WN - FORTRAN WRITE NAMELIST UDF Level'
MODULE FOR$$UDF_WN (				! WRITE  NAMELIST UDF Routines
		IDENT = '1-004'			! File: FORUDFWN.B32 Edit: SBL1004
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	FORTRAN Compiled Code Support
!
! ABSTRACT:
!
!	This module contains the User Data Formatter routines to perform
!	FORTRAN NAMELIST WRITE statements.
!
! ENVIRONMENT:	Runs at any access mode - AST reentrant
!
! AUTHOR: Steven B. Lionel, CREATION DATE: 29-August-1980
!
! MODIFIED BY:
!
! 1-001	- Original.  SBL 29-August-1980
! 1-002 - Reflect group block spec change where count-of-variables is a word;
!	  second word is reserved.  SBL 5-Dec-1980
! 1-003 - Add text describing NAMELIST descriptor block.  SBL 15-April-1981
! 1-004 - REQUIRE FORERR.B32 instead of external reference to FOR$K_ symbols. 
!	  SBL 12-Aug-1981
!--


%SBTTL 'Declarations'
!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!

REQUIRE 'RTLIN:OTSLNK';				! Linkage declarations
!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    FOR$$UDF_WN0: JSB_UDF0 NOVALUE,		! Start WRITE NAMELIST
    PROCESS_LIST: CALL_CCB NOVALUE,		! Do bulk of processing
    FOR$$UDF_WN9: JSB_UDF9 NOVALUE,		! End WRITE NAMELIST
    CHECK_FIELD: CALL_CCB;			! Check field width

!
! INCLUDE FILES:
!

LIBRARY 'RTLSTARLE';				! System symbols, typically from SYS$LIBRARY:STARLET.L32

REQUIRE 'RTLIN:RTLPSECT';			! Define PSECT declarations macros

REQUIRE 'RTLML:OTSLUB';				! Logical Unit Block definitions

REQUIRE 'RTLML:OTSISB';				! Intra-Statement Block definitions

REQUIRE 'RTLIN:OTSMAC';				! Useful macros

REQUIRE 'RTLML:FORERR';				! FOR$K_ error codes

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! FIELDS:
!
!	NONE
!
! PSECTS:
!
DECLARE_PSECTS (FOR);				! Declare PSECTs for FOR$ facility
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    FOR$$REC_WSN0: JSB_REC0 NOVALUE,		! Set up for a write
    FOR$$REC_WSN1: JSB_REC1 NOVALUE,		! Write a record
    FOR$$UDF_WL1: CALL_CCB NOVALUE,		! Convert and move to buffer
    FOR$$SIGNAL_STO: NOVALUE;			! Signal fatal error

%SBTTL 'FOR$$UDF_WN0 - Start WRITE NAMELIST'
GLOBAL ROUTINE FOR$$UDF_WN0: JSB_UDF0 NOVALUE 		! Start WRITE NAMELIST
     =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine starts a FORTRAN WRITE NAMELIST.  It calls PROCESS_LIST
!	to do the bulk of the work.  There is no UDF1 routine in this module
!	because WRITE NAMELIST statements have no I/O lists.
!
! CALLING SEQUENCE:
!
!	JSB FOR$$UDF_WN0
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	CCB				! Register pointer to RAB/LUB/ISB
!
! IMPLICIT OUTPUTS:
!
!	See PROCESS_LIST
!
! COMPLETION STATUS: (or ROUTINE VALUE:)
!
!	NONE
!
! SIDE EFFECTS:
!
!	See PROCESS_LIST
!
!--

    BEGIN

    EXTERNAL REGISTER
	CCB = 11: REF BLOCK [, BYTE];

    FOR$$REC_WSN0 ();

    PROCESS_LIST ();

    RETURN;
    
    END;					! End of routine 
!<BLF/PAGE>

%SBTTL 'PROCESS_LIST - Do WRITE NAMELIST'
ROUTINE PROCESS_LIST: CALL_CCB NOVALUE
     =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine performs one WRITE NAMELIST statement.
!
! CALLING SEQUENCE:
!
!	CALL PROCESS_LIST ()
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	CCB				! Register pointer to RAB/LUB/ISB
!	ISB$A_FMT_BEG			! Address of NAMELIST group descriptor
!
! IMPLICIT OUTPUTS:
!
!
! COMPLETION STATUS: (or ROUTINE VALUE:)
!
!	NONE
!
! SIDE EFFECTS:
!
!
!--

!<BLF/PAGE>

!++
!   Each NAMELIST descriptor block has the following form:
!
!         3 3 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1
!         1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
!
!        +---------------------------------------------------------------+
!     0  |            Address of ASCIC name of NAMELIST group            |
!        +---------------------------------------------------------------+
!     1  |           Reserved           |   Count of NAMELIST variables  |
!        +---------------------------------------------------------------+
!     2  |              Address of ASCIC name of variable 1              |
!        +---------------------------------------------------------------+
!     3  |       Address of standard VAX descriptor for variable 1       |
!        +---------------------------------------------------------------+
!     4  |                              ...                              |
!        +---------------------------------------------------------------+
!     5  |              Address of ASCIC name of variable n              |
!        +---------------------------------------------------------------+
!     6  |       Address of standard VAX descriptor for variable n       |
!        +---------------------------------------------------------------+
!
!
!   The NAMELIST group name and the variable names which are pointed to in
!   the  NAMELIST  descriptor  block  are  upper  case  only.  The FORTRAN
!   compiler or other calling program is responsible for  case  conversion
!   of the name strings.  In NAMELIST input data, case is significant only
!   in character literals.  The run-time library is responsible  for  case
!   conversion of NAMELIST input data.
!   
!   The allowable data types in variable descriptors are  BU  (BYTE),  WU,
!   LU,  W,  L,  F,  D, G, H, T, FC, DC, and GC.  The allowable descriptor
!   classes are scalar and array.  For the  array  class  descriptor,  the
!   descriptor  flags  COLUMN,  COEFF,  and BOUNDS must be set, indicating
!   column-major order and the presence of coefficient and bounds  blocks.
!   The number of dimensions must not exceed 7.
!--

!<BLF/PAGE>
    BEGIN

    EXTERNAL REGISTER
	CCB = 11: REF BLOCK [, BYTE];

    LOCAL
	GROUP: REF VECTOR [, LONG],		! NAMELIST group descriptor
	NVARS,					! Number of variables in group
	VALUE_ADDR: REF VECTOR [, BYTE];	! Address of value

    !+
    ! Write out group name
    !-

    GROUP = .CCB [ISB$A_FMT_BEG];
    VALUE_ADDR = .GROUP [0];			! Address of group name counted string
    IF NOT CHECK_FIELD (.VALUE_ADDR [0] + 2)	! Include leading " $"
    THEN
	BEGIN
	FOR$$SIGNAL_STO (FOR$K_OUTSTAOVE);
	RETURN;
	END;
    CH$WCHAR_A (%C' ', CCB [LUB$A_BUF_PTR]);	! Write leading space
    CH$WCHAR_A (%C'$', CCB [LUB$A_BUF_PTR]);	! Write leading $
    CCB [LUB$A_BUF_PTR] = CH$MOVE (.VALUE_ADDR [0], VALUE_ADDR [1], .CCB [LUB$A_BUF_PTR]);
    FOR$$REC_WSN1 ();

    !+
    ! Scan through NAMELIST group and write all variables to the output stream.
    !-


    DECR NVARS FROM (.(GROUP [1])<0,16,0> - 1) TO 0 DO
	BEGIN

	LOCAL
	    OUT_NAME_LEN;		! Output name length

	GROUP = GROUP [2];		! Skip to next variable
	VALUE_ADDR = .GROUP [0];	! Address of variable name counted string
	!+
	! Compute output name length so that the names are padded to lengths
	! of 7, 15, 23, etc.  Add a space for before the "=".
	!-

	OUT_NAME_LEN = .VALUE_ADDR [0] + (8 - (.VALUE_ADDR [0] MOD 8));
	IF NOT CHECK_FIELD (.OUT_NAME_LEN + 2)	! Include leading space, trailing " ="
	THEN
	    BEGIN
	    FOR$$SIGNAL_STO (FOR$K_OUTSTAOVE);
	    RETURN;
	    END;

	!+
	! Write out variable name
	!-

	CH$WCHAR_A (%C' ', CCB [LUB$A_BUF_PTR]);
	CCB [LUB$A_BUF_PTR] = CH$COPY (.VALUE_ADDR [0], VALUE_ADDR [1],
	    %C' ', .OUT_NAME_LEN, .CCB [LUB$A_BUF_PTR]);
	CH$WCHAR_A (%C'=', CCB [LUB$A_BUF_PTR]);

	!+
	! Output all values in variable
	!-
	
	    BEGIN
	    LOCAL
		VAR_DESC: REF BLOCK [, BYTE],	! Variable descriptor
		CUR_ADR,			! Current variable address
		END_ADR,			! End of variable
		ELEM_TYPE,			! Element datatype passed to FOR$$UDF_WL1
		CMPLX_FLAG;			! Complex flag passed to FOR$$UDF_WL1
		VAR_DESC = .GROUP [1];		! Get descriptor
		CUR_ADR = .VAR_DESC [DSC$A_POINTER];
		IF .VAR_DESC [DSC$B_CLASS] EQL DSC$K_CLASS_A
		THEN
		    END_ADR = .CUR_ADR + .VAR_DESC [DSC$L_ARSIZE]
		ELSE
		    END_ADR = .CUR_ADR + .VAR_DESC [DSC$W_LENGTH];
		SELECTONE .VAR_DESC [DSC$B_DTYPE] OF
		    SET
		    [DSC$K_DTYPE_FC]:
			BEGIN
			ELEM_TYPE = DSC$K_DTYPE_F;
			CMPLX_FLAG = 0;
			END;
		    [DSC$K_DTYPE_DC]:
			BEGIN
			ELEM_TYPE = DSC$K_DTYPE_D;
			CMPLX_FLAG = 0;
			END;
		    [DSC$K_DTYPE_GC]:
			BEGIN
			ELEM_TYPE = DSC$K_DTYPE_G;
			CMPLX_FLAG = 0;
			END;
		    [OTHERWISE]:
			BEGIN
			ELEM_TYPE = .VAR_DESC [DSC$B_DTYPE];
			!+
			! FORTRAN passes us BU for B, so change it here.
			IF .ELEM_TYPE EQL DSC$K_DTYPE_BU
			THEN
			    ELEM_TYPE = DSC$K_DTYPE_B;
			CMPLX_FLAG = 2;
			END;
		    TES;

	    WHILE .END_ADR GTRA .CUR_ADR DO
		BEGIN
		LOCAL
		    CUR_POS,
		    REPEAT_COUNT;
		!+
		! Build repeat count
		!-
		
		REPEAT_COUNT = 1;
		CUR_POS = .CUR_ADR + .VAR_DESC [DSC$W_LENGTH];
		WHILE .CUR_POS LSSA .END_ADR DO
		    BEGIN
		    IF NOT CH$EQL (.VAR_DESC [DSC$W_LENGTH],
				   .CUR_ADR,
				   .VAR_DESC [DSC$W_LENGTH],
				   .CUR_POS,
				   0)
		    THEN
			EXITLOOP;
		    CUR_POS = .CUR_POS + .VAR_DESC [DSC$W_LENGTH];
		    REPEAT_COUNT = .REPEAT_COUNT + 1;
		    END;

		!+
		! Is this variable of type CHARACTER?  If so, do all the
		! processing here.  Otherwise, let FOR$$UDF_WL1 do most of
		! the work.
		!-

		IF .ELEM_TYPE EQL DSC$K_DTYPE_T
		THEN
		    BEGIN
		    !+
		    ! It's CHARACTER.
		    !-

		    LOCAL
			REPEAT_DSC: DSC$DESCRIPTOR,	! Repeat string descriptor
			REPEAT_STR: VECTOR [12, BYTE],	! Repeat string
			FAO_DSC: DSC$DESCRIPTOR;	! FAO control string descr
		    !+
		    ! Build repeat count string.
		    !-

		    REPEAT_DSC [DSC$W_LENGTH] = 0;
		    IF .REPEAT_COUNT GTR 1
		    THEN
			BEGIN
			REPEAT_DSC [DSC$W_LENGTH] = 12;
			REPEAT_DSC [DSC$B_DTYPE] = DSC$K_DTYPE_T;
			REPEAT_DSC [DSC$B_CLASS] = DSC$K_CLASS_S;
			REPEAT_DSC [DSC$A_POINTER] = REPEAT_STR;
			FAO_DSC [DSC$A_POINTER] = UPLIT BYTE ('!SL*');
			FAO_DSC [DSC$W_LENGTH]  = %CHARCOUNT ('!SL*');
			FAO_DSC [DSC$B_DTYPE] = DSC$K_DTYPE_T;
			FAO_DSC [DSC$B_CLASS] = DSC$K_CLASS_S;
			$FAO (FAO_DSC,		! Control string
			      REPEAT_DSC [DSC$W_LENGTH],	! Returned length
			      REPEAT_DSC,	! Output string
			      .REPEAT_COUNT);
			END;
		
		    !+
		    ! See if there is enough room for the repeat count
		    !-

		    IF NOT CHECK_FIELD (2 + .REPEAT_DSC [DSC$W_LENGTH])
		    THEN
			BEGIN
			FOR$$REC_WSN1 ();
			IF NOT CHECK_FIELD (2 + .REPEAT_DSC [DSC$W_LENGTH])
			THEN
			    FOR$$SIGNAL_STO (FOR$K_OUTSTAOVE);
			END;

		    !+
		    ! Write out a leading space, the repeat count and an
		    ! initial apostrophe.
		    !-

		    CH$WCHAR_A (%C' ', CCB [LUB$A_BUF_PTR]);
		    CCB [LUB$A_BUF_PTR] = CH$MOVE (.REPEAT_DSC [DSC$W_LENGTH], REPEAT_STR, 
						   .CCB [LUB$A_BUF_PTR]);
		    CH$WCHAR_A (%C'''', CCB [LUB$A_BUF_PTR]);

		    !+
		    ! Write out each character of the string, substituting two
		    ! apostrophes for each apostrophe found in the string.
		    !-

		    INCR I FROM 1 TO .VAR_DESC [DSC$W_LENGTH] DO
			BEGIN
			IF NOT CHECK_FIELD (1)
			THEN
			    BEGIN
			    FOR$$REC_WSN1 ();
			    CH$WCHAR_A (%C' ', CCB [LUB$A_BUF_PTR]);
			    END;
			IF CH$RCHAR (.CUR_ADR) EQL %C''''
			THEN
			    BEGIN
			    CH$WCHAR_A (%C'''', CCB [LUB$A_BUF_PTR]);
			    IF NOT CHECK_FIELD (1)
			    THEN
				BEGIN
				FOR$$REC_WSN1 ();
				CH$WCHAR_A (%C' ', CCB [LUB$A_BUF_PTR]);
				END;
			    END;
			COPY_BYTE_A (CUR_ADR, CCB [LUB$A_BUF_PTR]);
			END;

		    !+
		    ! Write out the closing apostrophe.
		    !-

		    IF NOT CHECK_FIELD (1)
		    THEN
			BEGIN
			FOR$$REC_WSN1 ();
			CH$WCHAR_A (%C' ', CCB [LUB$A_BUF_PTR]);
			END;
		    CH$WCHAR_A (%C'''', CCB [LUB$A_BUF_PTR]);
		    CUR_ADR = .CUR_POS;
		    END

		ELSE

		    BEGIN
		    !+
		    ! Not CHARACTER.
		    ! Call list directed routine to output value.
		    !-

		        FOR$$UDF_WL1 (.ELEM_TYPE, .VAR_DESC [DSC$W_LENGTH], .CUR_ADR,
				      .CMPLX_FLAG, .REPEAT_COUNT);
		    CUR_ADR = .CUR_POS;
		    END;

		!+
		! Put out a separating comma if values to come
		!-

		IF .CUR_ADR LSSA .END_ADR
		THEN
		    BEGIN
		    IF NOT CHECK_FIELD (1)
		    THEN
			BEGIN
			FOR$$REC_WSN1 ();
			CH$WCHAR_A (%C' ', CCB [LUB$A_BUF_PTR]);
			END;
		    CH$WCHAR_A (%C',', CCB [LUB$A_BUF_PTR]);
		    END;
		END;
	    END;

	!+
	! If this is not the last variable, write out a comma
	!-

	IF .NVARS NEQ 0
	THEN
	    BEGIN
	    IF NOT CHECK_FIELD (1)
	    THEN
		BEGIN
		FOR$$REC_WSN1 ();
		CH$WCHAR_A (%C' ', CCB [LUB$A_BUF_PTR]);
		END;
	    CH$WCHAR_A (%C',', CCB [LUB$A_BUF_PTR]);
	    END;

	!+
	! Write this record.
	!-

	FOR$$REC_WSN1 ();

	END;

    !+
    ! All variables written.  Put out $END block delimiter.
    !-

    IF NOT CHECK_FIELD (5)
    THEN
	BEGIN
	FOR$$SIGNAL_STO (FOR$K_OUTSTAOVE);
	RETURN;
	END;
    CCB [LUB$A_BUF_PTR] = CH$MOVE (5, UPLIT BYTE (' $END'), .CCB [LUB$A_BUF_PTR]);
    FOR$$REC_WSN1 ();

    RETURN;
    
    END;					! End of routine 
!<BLF/PAGE>

%SBTTL 'FOR$$UDF_WN9 - End WRITE NAMELIST'
GLOBAL ROUTINE FOR$$UDF_WN9: JSB_UDF9 NOVALUE 		! End WRITE NAMELIST
     =

!++
! FUNCTIONAL DESCRIPTION:
!
!	End a namelist-directed WRITE statement.  This procedure, although
!	a no-op, is necessary because FOR$IO_END dispatches to a UDF9 routine
!	based on the statement type.
!
! CALLING SEQUENCE:
!
!	JSB FOR$$UDF_WN9
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	CCB				! Register pointer to RAB/LUB/ISB
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS: (or ROUTINE VALUE:)
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    RETURN;
    
    END;					! End of routine FOR$$UDF_WN9
!<BLF/PAGE>

%SBTTL 'CHECK_FIELD - Check field remaining for width'
ROUTINE CHECK_FIELD (
	WIDTH
	): CALL_CCB
     =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Determine if there are sufficient characters remaining in the current
!	record for a field of a specified width.
!
! CALLING SEQUENCE:
!
!	status = CHECK_FIELD (width.rl.v)
!
! FORMAL PARAMETERS:
!
!	width	- The width of the field you wish to use
!
! IMPLICIT INPUTS:
!
!	CCB				! Register pointer to RAB/LUB/ISB
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS: (or ROUTINE VALUE:)
!
!	1 if the field will fit, 0 otherwise
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    EXTERNAL REGISTER
	CCB = 11: REF BLOCK [, BYTE];

    RETURN ((.CCB [LUB$A_BUF_PTR] + .WIDTH) LEQA .CCB [LUB$A_BUF_END]);
    
    END;					! End of routine CHECK_FIELD
!<BLF/PAGE>

END						! End of module FOR$$UDF_WN

ELUDOM
