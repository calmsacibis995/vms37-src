MODULE STR$APPEND (	! Append a string to the end of the destination

		IDENT = '1-004'	! File: STRAPPEND.B32	Edit: RKR1004

		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY: String support library
!
! ABSTRACT: 
!	This routine appends the input string onto the end of the 
!	the destination string.  It will handle strings of any 
!	supported dtype or class.
!
! ENVIRONMENT: User mode, AST level or not or mixed
!
! AUTHOR: R. Will, CREATION DATE: 12-Nov-79
!
! MODIFIED BY:
!
! R. Will, 25-Oct-79 : VERSION 01
! 1-001	- Original
! 1-002 - String speedup, status from alloc and dealoc macros.  
!	  RW  11-Jan-1980
! 1-003 - Enhance to be able to deal with a larger class of string
!	  descriptors.  Uses $STR$GET_LEN_ADDR to extract length and
!	  address of data out of a variety of source descriptors.
!	  CASE on class of output descriptor expanded to allow writing 
!	  of both CLASS_D and CLASS_VS.
!	  RKR 10-APR-1981
! 1-004 - Speed up code. RKR 7-OCT-1981.
!--
!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE 
		(EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!

REQUIRE 'RTLIN:STRLNK';		! Use require file with string linkages

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    STR$APPEND;			! append the input string to the end 
				! of the destination string

!
! INCLUDE FILES:
!

REQUIRE 'RTLIN:RTLPSECT';	! Declare PSECTS code
REQUIRE 'RTLIN:STRMACROS';	! use string macros to write code
LIBRARY 'RTLSTARLE';		! STARLET library for macros and symbols

!
! MACROS:  NONE
!

!
! EQUATED SYMBOLS
!
LITERAL
	MAX_SIZE = 65535;	! largest string we can handle


!
! PSECT DECLARATIONS
!

DECLARE_PSECTS (STR);

!
! OWN STORAGE: NONE
!

!
! EXTERNAL REFERENCES:
!
EXTERNAL LITERAL
    STR$_ILLSTRCLA,			! signal illegal class error
    STR$_STRTOOLON,			! signal string too long
    STR$_TRU,				! status -- truncation (warning)
    STR$_NORMAL ;			! successful append

EXTERNAL ROUTINE
    LIB$STOP;				! signal errors

GLOBAL ROUTINE STR$APPEND (	! append a string to the end of another

			   DEST_DESC,	! pointer to destination descr.
			   SRC_DESC	! pointer to source descriptor

			  ) : =		!

!++
! FUNCTIONAL DESCRIPTION:
!
! 	This routine takes a source string of any supported dtype and 
! class, and appends that string to the end of the destination string, 
! which may be of any supported class or dtype, except that it is 
! impossible to add something to the end of a string having fixed-length
! semantics -- an error will always be signalled in that case
!
! FORMAL PARAMETERS:
!
!	DEST_DESC.wt.dx		pointer to destination descriptor
!	SRC_DESC.rt.dx		pointer to source descriptor
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION CODES:
!
!	STR$_NORMAL		Success
!	STR$_TRU		Truncation -- a warning
!
! SIDE EFFECTS:
!
!	STR$_ILLSTRCLA may be signalled if the destination string is 
!			of fixed-length semantics
!			or undefined
!	STR$_STRTOOLON if combined lengths of source and destination
!			exceed 65K in a dynamic string destination.
!	Dynamic string space may be allocated or deallocated
!
!--

    BEGIN

    LOCAL
	SRC_LEN,			! length of source string
	SRC_ADDR,			! addr of 1st byte of source
	DEST_LEN,			! length of destination string
	DEST_ADDR,			! addr of 1st byte of dest.
	TOT_LEN,			! sum of src and dst length
	RETURN_STATUS;			! status from macros

    MAP DEST_DESC : REF $STR$DESCRIPTOR;
    MAP SRC_DESC : REF $STR$DESCRIPTOR;

    RETURN_STATUS = 1 ;		! Assume success

!+
! find lengths and starting addresses of strings we're dealing with,
! and their combined lengths.
!-

    $STR$GET_LEN_ADDR (SRC_DESC, SRC_LEN,  SRC_ADDR) ;

    $STR$GET_LEN_ADDR (DEST_DESC, DEST_LEN, DEST_ADDR) ;

    TOT_LEN = .SRC_LEN + .DEST_LEN ;

!+
! if the combined lengths are greater that 65K, the result is not
! going to fit in any class of descriptor we support -- return
! STR$_STRTOOLON.
!-

    IF .TOT_LEN GTR MAX_SIZE THEN LIB$STOP (STR$_STRTOOLON) ;


!+
! Algorithm for writing output differs based on the class of the 
! destination descriptor.  The operation of appending is defined only
! for class CLASS_D and CLASS_VS destination strings.
!-

    CASE .DEST_DESC [DSC$B_CLASS] 
    FROM DSC$K_CLASS_Z TO DSC$K_CLASS_VS OF
        SET

!+
! dynamic destination strings
! ***************************
!-

	[DSC$K_CLASS_D]:
	    BEGIN
	    IF
	    %IF %BLISS (BLISS16) OR %BLISS (BLISS36)
	    %THEN				! except on VAX
	    $STR$OVERLAP ( .SRC_ADDR, .SRC_LEN  ! If src overlaps
		CH$PLUS (.DEST_ADDR, .DEST_LEN),! with where it will be
			 .SRC_LEN)		! written
	    OR
	    %FI					! or if dest. not large
	    ($STR$NEED_ALLOC (			!  enough for append
		.TOT_LEN, ($STR$DYN_AL_LEN (DEST_DESC) ) ) )
	    THEN				! then allocate a temp 
						! and use it for
		BEGIN				! building output string

		LOCAL TEMP_DESC : $STR$DESCRIPTOR;

		IF (RETURN_STATUS = $STR$ALLOCATE (.TOT_LEN, TEMP_DESC))
		THEN
		    BEGIN
		    CH$MOVE (.DEST_LEN, .DEST_ADDR, ! move dest to temp
			     .TEMP_DESC [DSC$A_POINTER]);

		    CH$MOVE (.SRC_LEN,	! move src to end of temp
		       .SRC_ADDR,
		       CH$PLUS (.TEMP_DESC [DSC$A_POINTER], .DEST_LEN));

		    $STR$EXCH_DESCS (TEMP_DESC, DEST_DESC);	
					! switch temp and dest

		    RETURN_STATUS =	! deallocate temp
			$STR$DEALLOCATE (TEMP_DESC);
		    END;
		END	! of append via temp descriptor
	    ELSE
		BEGIN	! movement directly into output string
		CH$MOVE ( .SRC_LEN, .SRC_ADDR,
			  CH$PLUS (.DEST_ADDR, .DEST_LEN));

		DEST_DESC [DSC$W_LENGTH] = .TOT_LEN ;  ! adjust size of
						       ! result string
		END;	! movement directly into output string
	    END;	! of Class_D

!+
! Varying string descriptor
! *************************
!-

	[DSC$K_CLASS_VS]:
	    BEGIN
		IF .TOT_LEN GTRU .DEST_DESC [DSC$W_MAXSTRLEN]
		THEN		! resultant string won't fit within
		    BEGIN	! MAXSTRLEN of allocated string.

			!+
			! Copy as much as is possible.  This length is
			! given by MAXSTRLEN - CURLEN.
			!-
			CH$MOVE (
				.DEST_DESC [DSC$W_LENGTH] - 
				(.DEST_DESC [DSC$A_POINTER])<0,16>, 
				.SRC_ADDR, 
				.DEST_DESC [DSC$A_POINTER] + 
				.DEST_LEN + 2 ) ;

			!+
			! Adjust CURLEN field to reflect the new length
			!-
			(.DEST_DESC [DSC$A_POINTER])<0,16> = 
					. DEST_DESC [DSC$W_MAXSTRLEN];

			RETURN_STATUS = STR$_TRU;

		    END	! won't fit within MAXSTRLEN
		ELSE
		    BEGIN	! will fit within MAXSTRLEN
			!+
			! Move source data directly into varying
			! string, starting at byte just beyond the last
			! byte that is currently there.
			!-
			CH$MOVE (.SRC_LEN, .SRC_ADDR,
				 (.DEST_DESC [DSC$A_POINTER] +
				  .DEST_LEN + 2) );

			!+
			! Adjust CURLEN field to reflect the new length
			!-
			(.DEST_DESC [DSC$A_POINTER])<0,16> =.TOT_LEN ;
		    END;
	    END;	! of Class_VS


!+
! otherwise we have an undefined class of descriptor, or a descriptor
! which has fixed-length string semantics.  In either case, its an
! error to try to append to it.
!-
	[INRANGE,OUTRANGE]:
	    RETURN_STATUS = STR$_ILLSTRCLA;
	TES;

    $STR$SIGNAL_FATAL (RETURN_STATUS);		! signal if fatal error
    RETURN .RETURN_STATUS;			! no non-fatal errors 
						! possible
    END;					! End of STR$APPEND

END				!End of module
ELUDOM
