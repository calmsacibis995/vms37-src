	.TITLE	OTS$POWJJ - INTEGER*4 ** INTEGER*4 power routine
	.IDENT	/1-005/		; File OTSPOWJJ.MAR  Edit: SBL1005

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;
; FACILITY: Language support library - user callable
;++
; ABSTRACT:
;
;	Integer longword base to integer longword power.
;	Integer overflow can occur if the result exceeds a longword.
;	Undefined exponentation can occur if base is 0 and power is 0 or negative.
;
;
;--
;
; VERSION: 0
;
; HISTORY:
; AUTHOR:
;	Thomas N. Hastings, 5-May-77: Version 0
;
; MODIFIED BY: SUSAN HUBBARD AZIBERT
;
;
;

	.SBTTL	HISTORY		; Detailed Current Edit History


; Edit History for Version 01 of OTS$POWJJ
; version 04 - changed module name to forpowJJ
; version 06 - changed error routine from MTH$ERROR to MTH$$ERROR
; version 07 - removed W^ on call to MTH$$ERROR, save code with MOVZBL.
; version 08 - change MTH$$ERROR to MTH$$SIGNAL - JMT
; 0-11	- fix case instruction bug.  JMT 28-Feb-78
; 1-001	- Update version number and copyright notice.  JBS 16-NOV-78
; 1-002	- Change MTH__UNDEXP to MTH$K_UNDEXP.  JBS 07-DEC-78
; 1-003	- Add "_" to the PSECT directive.  JBS 22-DEC-78
; 1-004 - Declare externals.  SBL 17-May-1979
; 1-005 - Use general mode addressing.  SBL 30-Nov-1981

	.SBTTL	DECLARATIONS

;
; INCLUDE FILES:
;

;
; EXTERNAL SYMBOLS:
;

	.DSABL	GBL
	.EXTRN	MTH$K_UNDEXP
	.EXTRN MTH$$SIGNAL		; Math error routine
;
; MACROS:
;

;
; EQUATED SYMBOLS:
;
	base = 4			; base input formal - by-value
	exp = 8				; exponent intpu formal - by-value

;
; OWN STORAGE:
;

;
; PSECT DECLARATIONS:
;

	.PSECT	_OTS$CODE PIC,SHR,LONG,EXE,NOWRT
					; program section for OTS$ code


	.SBTTL	OTS$POWJJ - longword to power longword giving longword result

;++
; FUNCTIONAL DESCRIPTION:
;
;	Signed longword result = signed longword base ** signed longword exponent
;	The signed longword result is given by:
;
;	base	exponent	result
;
;	any	> 0		product (base * 2**i) where i is each
;				non-zero bit position in exponent
;
;	> 0	= 0		1
;	= 0	= 0		Undefined exponentation
;	< 0	= 0		1
;
;	> 1	< 0		0
;	= 1	< 0	 	1
;	= 0	< 0		Undefined exponentation
;	= -1	< 0 and even	1
;	= -1	< 0 and odd	-1
;	< -1	< 0		1
;
;	Integer overflow can occur.
;	Undefined exponentiation occurs if base is 0 and 
;	exponent is 0 or negative.
;
; CALLING SEQUENCE:
;
;	Power.ww.v = OTSS$POWJJ (base.rw.v,  exponent.rw.v)
;
; INPUT PARAMETERS:
;	NONE
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; FUNCTION VALUE:
;
;	longword integer base ** exponent
;
; SIDE EFFECTS:
;
;	SIGNALs SS$_ARITH with integer overflow hardware code if
;	integer overflow.
;	SIGNALs MTH$_UNDEXP (82 = ' UNDEFINED EXPONENTATION') if
;	base is 0 and exponent is 0 or negative.
;
;--



	.ENTRY OTS$POWJJ, ^M<IV, R2>	; enable integer overflow
	MOVL	#1, R0			; R0 = initial result
	MOVL	exp(AP), R2		; R2 = exponent
	BLEQ	EXPLEQ			; branch if exponent =< 0

;+
; Exponent > 0.
; Scan each exponent bit from right, squaring base each time thru loop.
; For each 1-bit in exponent, multiply current base into partial result.
;-

	MOVL	base(AP), R1		; R1 = base
	BLBS	R2, PARTIAL		; branch if exponent is odd
SQUAR:	ASHL	#-1, R2, R2		; R2 = exponent/2
SQUAR1:	MULL	R1, R1			; R1 = current power of base
					; integer overflow will trap
					; and SIGNAL SS$_ARITH
	BLBC	R2, SQUAR		; loop if next bit in exponent is 0
PARTIAL:				; next bit in exponent is a 1
	MULL	R1, R0			; R0 = new partial result
					; integer overflow will trap
					; and SIGNAL SS$_ARITH
	ASHL	#-1, R2, R2		; R2 = exponent/2
	BNEQ	SQUAR1			; loop if more exponent bits are 1
	RET				; return, R0<15:0> = base ** exp
					; R0<31:16> = 0

;+
; Exponent is =< 0.
;-

EXPLEQ:	BLSS	EXPLSS			; branch if exponent < 0

;+
; Exponent is = 0.
; Undefined exponentation if base = 0 too, else return 1
;-

	MOVL	base(AP), R1		; R1 = base
	BEQL	UNDEFINED		; undefined if base = 0 too
	BRB	POWJJX			; return with result = 1
					; since base ** 0 = 1

;+
; exponent =< 0.
; Result is given by the following table:
;
;	Base	Result
;	<-1	0
;	-1	1 or -1 depending on exponent being even or odd
;	0	Undefined exponentation
;	1	1
;	>1	0
;-

EXPLSS:
	CASEL	base(AP), #-1, #2	; Case on value of base
10$:	.WORD	MINUS1-10$		; [-1]: return R0 = -1 or 1 depending
					; on exponent being odd or even
	.WORD	UNDEFINED-10$		; [0]: Undefined exponentation
	.WORD	POWJJX-10$		; [+1]: return R0 = 1
	CLRL	R0			; [< -1 or > +1]: return R0 = 0
	RET

MINUS1:	BLBC	R2, POWJJX		; if exponent is even, return R0 = 1
	MNEGL	#1, R0			; else return R0 = -1
POWJJX:	RET				; return

;+
; Undefined exponentation error - 0**0 or 0**(-n)
;-

UNDEFINED:
	CLRL	R0			; if error, return result = 0
	MOVZBL	#MTH$K_UNDEXP, -(SP)	; FORTRAN error #
	CALLS	#1, G^MTH$$SIGNAL	; convert to 32-bit condition code
					; and SIGNAL MTH$_UNDEXP
					; Note: 2nd arg not needed since no
					; JSB OTS$POWRJ is possible.
	RET


	.END
