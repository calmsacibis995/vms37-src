MODULE COB$DBEXCEPTION(
		IDENT = '1-010'	       ! file:COBDBEXCE.B32 Edit:SBL1010
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY:	COBOL SUPPORT
!
! ABSTRACT
!
!	This procedure is called from compiled code when a data base
!	exception condition occurs.  This procedure looks for an applicable
!	USE procedure to handle the data base exception condition.
!	If one is not found, it invokes LIB$STOP to handle the data base
!	exception condition.
!
!
! ENVIRONMENT:	Vax-11 User Mode
!
! AUTHOR: RKR , CREATION DATE: 11-FEB-1981
!
! MODIFIED BY:
!
! 1-001 - Original Skeleton.   RKR  11-FEB-1981
! 1-002 - Actual code added.   LB   11-MAR-1981
! 1-003 - Took out code that checked the DB code field (COB$B_USE CODE
!	  equal to COB$K_DBUSE_CODE)  This code was moved to
!	  COB$$HANDLER.  LB  16-MAR-81
! 1-004 - Added diagrams of the data structures involved in COB$DBEXCEPTION.
!	  Also compacted code and changed macro definition name to have a
!	  DBMS prefix.  LB  19-MAR-81
! 1-005 - Replaced arbitrary signalling value for no DB USE procedure found
!	  with appropriate symbol name now defined in COBMSGDEF.  Added
!	  corresponding entry in the EXTERNAL LITERAL declarations for
! 	  this module.  LB  24-MAR-81
! 1-006 - Changed name of data base external literal to correspond to change
!	  made in COBMSG.MDL.  Changed return status of SS$_CONTINUE to 
!	  SS$_NORMAL.  Changed calls to SIGNAL_STOP to be to LIB$STOP for
!	  consistency reasons.  Changed calls to LIB$SIGNAL to now take an
!	  FAO parameter (as is syntactically correct) even though the 
!	  parameter that is getting passed is not an FAO parameter (note that
!	  the !+ directive in the message text will ignore it).  Added code
!	  back into this routine that had previously been taken out (refer
!	  to revision history 1-003); that code now resides in both places
!	  (here and in COB$HANDLER).  Added heaps of comments and optimized
!  	  code by encasing calls to LIB$STOP in BEGIN-END blocks.  LB  16-APR-81
! 1-007 - Changed search code for a DB USE procedure due to hidden design flaws
!	  in the original search algorithm.  Code now saves the first match of
!	  a USE procedure and continues searching through the USE list for a
!	  locally defined one.  If one is found, then the local one is
!	  invoked; otherwise, the saved procedure is invoked.  Note that this
!	  code is executed only for the case where there is an ON OTHER clause
!	  (meaning that COB$L_USE_LIT = 0) and when the looping count has not
!	  reached its limit.  LB  21-APR-81
! 1-008 - Changed check of looping count to check .I instead of
!	  .DBUSE[COB$B_DBUSE_CNT].  Moved code that returned SS$_NORMAL to
!	  follow directly after the call to LIB$SIGNAL instead of after the
!	  END directive.  Added code to return SS$_NORMAL within the
!	  BEGIN-END blocks at every occurrence of an invocation of a USE
!	  procedure to correct flow problems.  LB  11-MAY-81.
! 1-009	- Minor improvements to generated code.  PDG  9-AUG-81
! 1-010 - Declare LIB$SIGNAL external.  SBL 2-Dec-1981
!
!--

!<BLF/PAGE>

!+
! SWITCHES:
!-

SWITCHES ADDRESSING_MODE 
		(EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!+
! LINKAGES:
!
!	NONE
!-

!+
! TABLE OF CONTENTS:
!-

FORWARD ROUTINE
	COB$DBEXCEPTION ;

!+
! INCLUDE FILES:
! 
! Note that there is no require file for the data base
! exception codes.  These will be provided during link
! time as link-time constants.
!-


REQUIRE 'RTLIN:COBDEF';				! To find USE procedures
REQUIRE 'RTLIN:RTLPSECT' ;			! Macros for defining psects
LIBRARY 'RTLSTARLE';

!+
! MACROS
!-

MACRO

	DBMS_COND_VAL	=	4,0,32,0%;	! Data Base Condition Value (status code)

!+
! EQUATED SYMBOLS
!
!	NONE
!-

!+
!
! PSECT DECLARATIONS:
!-

DECLARE_PSECTS (COB) ;				! Declare psects for COB$ facility

!+
! EXTERNAL REFERENCES:
!-

EXTERNAL ROUTINE
	LIB$SIGNAL,				! Signal
	LIB$STOP,			      	! Signal_stop
	COB$$INVOKE_USE : NOVALUE;		! Invoke USE procedure


EXTERNAL LITERAL

!+
!  Condition codes we need
! 
!  Note that the !+ directive for the data base literal indicates to ignore
!  the next parameter in the LIB$SIGNAL parameter list.  This is needed in
!  the case where the call to LIB$SIGNAL passes a condition value and an
!  address of a USE procedure which gets checked in COB$HANDLER.  The address
!  of the USE procedure is not a FAO parameter, but an FAO count must still
!  be included (as is syntactically correct) in the call to LIB$SIGNAL in
!  the case that COB$HANDLER resorts to re-signalling the error, causing an
!  error message to be printed at user level.  At that point, the address of
!  the USE procedure parameter must not be treated as an FAO parameter -
!  therefore the !+ takes care of it (by ignoring the parameter).
!
!-

    COB$_LSTHNDLDB,	! Lost handler for data base exception - environment corrupted !+
    OTS$_FATINTERR;	! Fatal Internal Error

GLOBAL ROUTINE COB$DBEXCEPTION (

	DBMS_STAT				!\Ptr to a block which contains
						!/the condition value & error msg.
			      ) =

!++	
! FUNCTIONAL DESCRIPTION:
!
!	This procedure is called from compiled code when a data base
!	exception occurs when accessing the data base.  This procedure
!	looks for an applicable USE procedure to handle the error; if
!	it can't find one, it LIB$STOP's.  If it finds one defined in
!	the local program, it invokes the USE procedure; if it is not
!	defined in the local program, it signals the data base exception
!	condition which should then get processed in COB$HANDLER.
!
!
! CALLING SEQUENCE:
!
!	COB$DBEXCEPTION (dbms_stat.rr.r)
!
! FORMAL PARAMETERS:
!
!	DBMS_STAT.rr.r		Ptr to a block which contains the error
!				and the condition value to be LIB$SIGNAL'ed
!				(i.e. a message vector)
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	An error message may be signalled.
!
! COMPLETION CODE:
!
!	Returns SS$_NORMAL if success (LSB = 1)
!	Otherwise, returns a zero.
!
! SIDE EFFECTS:
!
!	Calls LIB$STOP if input parameters are insufficient or invalid.
!	Also invokes LIB$STOP if the frame pointer equals 0 (indicating
!	serious problems).
!
! NOTES:
!
!	For more information on the message vector, refer to
!	the $PUTMSG system service documentation.
!
!--

!+
!
! Note that the DB USE list is structured as follows:
!
!	******************************************************
!	*				     |COB$B_USE_CODE *
!	*----------------------------------------------------*
!	*		COB$A_DBUSE_PNC		       	     *
!	*----------------------------------------------------*
!	*		    |COB$B_GDBUSE_CNT|COB$B_DBUSE_CNT*
!	*----------------------------------------------------*
!	*		COB$A_USE_PROC			     * BASE OF 1ST DATA BASE ENTRY
!	*----------------------------------------------------* 
!	*		COB$A_USE_EOPR			     *
!	*----------------------------------------------------*
!	*		COB$L_USE_LIT			     *
!	******************************************************
!
!-

!+
!
! Note that the above fields are defined as follows:
!
!	COB$B_USE_CODE - generic code indicating that the USE list
!			 pertains to data base exceptions.
!	COB$A_DBUSE_PNC -address of Perform Nest Counter for declaring
!			 program.
!	COB$B_DBUSE_CNT -number of data base USE procedures defined in
!			 this program.  This includes both local and
!			 global procedures defined in both this program
!			 and containing programs.
!	COB$B_GDBUSE_CNT-number of global data base USE procedures
!			 defined in the local program.
!	COB$A_USE_PROC - address of data base USE procedure.
!	COB$A_USE_EOPR - pointer to the end of the Perform Range Block
!			 for the USE procedure if the entry was defined
!			 in this program or 0 if it was defined in a
!			 containing program.
!	COB$L_USE_LIT  - a data base exception literal or 0 for "ON OTHER"
!			 or no "ON".
!-


!+
! Note that this is the DBMS_STAT block (referred to as
! a message vector) that is the input parameter to
! COB$DBEXCEPTION.  Note that this particular example
! is for one that contains FAO parameters.  There can
! be other formats, where the condition code is either
! an RMS status or a system service status, which in
! both cases, do not take any FAO parameters.  Also note
! that the numbers in parentheses are only meaningful for
! this sample block.  The # of longwords in a DBMS_STAT
! block can be up to 255.  Also, the # of FAO arguments
! that can be passed in this block can be up to 16 for
! DBMS.
!
!
!	*****************************************
!	*	# OF LONGWORDS IN BLOCK (6)	*
!	*---------------------------------------*
!	*	DBMS CONDITION CODE (STATUS)	*
!	*---------------------------------------*
!	*	  0	  |  # OF FAO ARGS (4)	*
!	*---------------------------------------*
!	*		FAO ARG #1		*
!	*---------------------------------------*
!	*		FAO ARG #2		*
!	*---------------------------------------*
!	*		FAO ARG #3		*
!	*---------------------------------------*
!	*		FAO ARG #4		*
!	*****************************************
!-

BEGIN

    BUILTIN
	CALLG,
	ACTUALPARAMETER,
	ACTUALCOUNT,
	FP;

    MAP
	DBMS_STAT:	REF BLOCK[,BYTE],
	FP:		REF BLOCK[,BYTE];

    LOCAL
	SFP:		REF BLOCK[,BYTE],	! Saved FP
	DBUSE:		REF BLOCK[,BYTE],	! Pointer to DB USE list
	DBUSE_ENT:	REF BLOCK[,BYTE],	! Pointer to DB USE list entry 
	SAVE_PNC,				! Saved addr of PNC
	SAVE_EOPR,				! Saved addr of EOPR
	SAVE_SAVED_AP,				! Saved saved AP
	SAVE_ADDR_USELST,			! Saved addr of USE list
	SAVE_ADDR_USEPROC;			! Saved addr of USE procedure

    !+
    ! Ensure that the DBMS_STAT argument is present
    !-

    IF (IF ACTUALCOUNT() EQL 0 THEN 1 ELSE .DBMS_STAT EQL 0)
      THEN 
	BEGIN
	LIB$STOP (OTS$_FATINTERR);
	RETURN 0;
	END;

    !+
    ! Initialize the local storage for the
    ! saved address of the USE procedure
    ! for later use.
    !-

    SAVE_ADDR_USEPROC = 0;

    !+
    ! Search for an appropriate USE procedure.
    !-

    SFP = .FP[SF$L_SAVE_FP];			! Get saved FP
    IF .SFP EQL 0				!\If FP equals zero,
      THEN					! then we have
	BEGIN					!/serious problems
	LIB$STOP (OTS$_FATINTERR);
	RETURN 0;
	END
      ELSE
	BEGIN
	DBUSE = .SFP[COB$A_DB_USE];		!\Fetch address at offset
						! 8 from stack to obtain
						!/a ptr to a DB USE list

	IF .DBUSE NEQ 0
	  THEN
	    BEGIN

	!+
	! The following check determines if this is a
	! data base USE list.  The COB$B_USE_CODE field
	! should contain the generic code for the class of
	! data base exceptions (equal to COB$K_DBUSE_CODE).
	!-

	    IF .DBUSE[COB$B_USE_CODE] EQL COB$K_DBUSE_CODE

	      THEN
		BEGIN
		DBUSE_ENT = DBUSE[COB$A_DBUSE_ENT];	! Point to 1st DB USE entry

	   
		!+
		! Find an applicable USE procedure.  A USE procedure
		! is applicable if COB$L_USE_LIT equals the data base
		! exception or if COB$L_USE_LIT equals zero.
		!-

		DECR I FROM .DBUSE[COB$B_DBUSE_CNT] - 1 TO 0 DO
		  BEGIN
		  IF .DBUSE_ENT[COB$L_USE_LIT] EQL 0 OR
		  .DBUSE_ENT[COB$L_USE_LIT] EQL .DBMS_STAT[DBMS_COND_VAL]
		    THEN
		      BEGIN

		    !+
		    ! If EOPR (ptr to end of perform range block)
    		    ! not equal to zero, then we know that
		    ! the USE procedure is local, and we can invoke
		    ! it immediately.  Otherwise, the data base
		    ! error should be LIB$SIGNAL'ed.
		    !-

		      IF .DBUSE_ENT[COB$A_USE_EOPR] NEQ 0
			THEN
			  BEGIN
			  IF .DBUSE_ENT[COB$L_USE_LIT] EQL 0
			    THEN
			      BEGIN

			    !+
			    ! If the looping count equals zero, (meaning
			    ! there aren't any more USE procedures in the
			    ! list), then we can invoke this USE procedure.
			    !-

			      IF .I EQL 0
				THEN
				  BEGIN
			          COB$$INVOKE_USE (
			    	    .DBUSE_ENT[COB$A_USE_PROC],	! Addr of USE procedure
			    	    .DBUSE,			! Addr of USE list
			    	    .FP[SF$L_SAVE_AP],
			    	    .DBUSE_ENT[COB$A_USE_EOPR],	! EOPR
			    	    .DBUSE[COB$A_DBUSE_PNC]);	! Perform Nest Ctr
				  RETURN SS$_NORMAL;
				  END
				ELSE

				!+
				! At this point, we have found a USE procedure,
				! but rather than invoking it immediately, we
				! save its address and all other context required
				! to invoke the USE procedure, and keep on
				! searching for an additional match.  This is
				! due to the fact that the USE list is arranged
				! in the order of global USE procedures defined
				! in the local program, followed by local USE
				! procedures defined in the local program.  This
				! method of saving the context of the 1st matched
				! USE procedure now ensures that if a local USE
				! procedure defined in the local program exists
				! that it will be invoked rather than a globally
				! defined one.
				!-

				  BEGIN
				  SAVE_ADDR_USEPROC = .DBUSE_ENT[COB$A_USE_PROC];
				  SAVE_ADDR_USELST = .DBUSE;
				  SAVE_SAVED_AP = .FP[SF$L_SAVE_AP];
				  SAVE_EOPR = .DBUSE_ENT[COB$A_USE_EOPR];
				  SAVE_PNC = .DBUSE[COB$A_DBUSE_PNC];
				  END;
			      END
			    ELSE

			    !+
			    ! Here we know that there is no "ON OTHER"
			    ! clause (meaning that COB$A_USE_LIT is not
			    ! equal to zero), so we can just invoke the
			    ! found USE procedure.
			    !-

			      BEGIN
			      COB$$INVOKE_USE (
				.DBUSE_ENT[COB$A_USE_PROC],	! Addr of USE procedure
				.DBUSE,				! Addr of USE list
				.FP[SF$L_SAVE_AP],
				.DBUSE_ENT[COB$A_USE_EOPR],	! EOPR
				.DBUSE[COB$A_DBUSE_PNC]);	! Perform Nest Ctr
			      RETURN SS$_NORMAL;
			      END;
			  END
			ELSE
			  BEGIN

			!+
			! At this point, if "SAVE_ADDR_USEPROC" not
			! equal to zero, then we had previously found
			! a USE procedure which is a globally defined 
			! one in the local program, and saved its context.
			! We can now invoke it.
			!-

			  IF .SAVE_ADDR_USEPROC NEQ 0
			    THEN
			      COB$$INVOKE_USE (
				.SAVE_ADDR_USEPROC,		! Addr of USE procedure
				.SAVE_ADDR_USELST,		! Addr of USE list
				.SAVE_SAVED_AP,			! Saved AP
				.SAVE_EOPR,			! Addr of EOPR
				.SAVE_PNC)			! Addr of PNC
			    ELSE

			!+
			! Signal the error here indicating that the USE
			! procedure is a global one that is in a containing
			! program.  Need to get the FP of the containing
			! program and check the defined global USE
			! procedures of the local program there.  If found,
			! then invoke the USE procedure at that level;
			! otherwise, the error is re-signalled.
			!-

			      LIB$SIGNAL (COB$_LSTHNDLDB,1,.DBUSE_ENT[COB$A_USE_PROC]);
		          RETURN SS$_NORMAL;
			  END;
		      END;
		  DBUSE_ENT = .DBUSE_ENT + COB$S_DBUSE;		! Step to next entry
		  END;						! End of DECR loop

	    !+
	    ! At this point, we know that there isn't an
	    ! applicable USE procedure, so the only recourse
	    ! we have is to LIB$STOP.  The reason for this is that
	    ! the COB$B_USE_CODE did not match with the code
	    ! provided in COB$K_DBUSE_CODE.  We also could have
	    ! arrived here if DBUSE was equal to zero, indicating
	    ! there was no DB USE list to begin with.
	    !--

    		  END;						!\End of code block that
    								! checks for a COB$K_DBUSE_CODE
    								!/match
		END;						!\End of code dealing with
    								!/a valid ptr to a DB USE list
	      CALLG (.DBMS_STAT,LIB$STOP);
	    END;
      RETURN 0							! Never gets here
								!\End of global routine
      END;							!/COB$DBEXCEPTION
END
ELUDOM
