	.TITLE	MTH$ABS		The ABS functions
	.IDENT	/1-003/		; File: MTHABS.MAR

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;
; FACILITY: MATH LIBRARY
;++
; ABSTRACT:
;	This module contains routines for the absolute value of
;	INTEGER*2, INTEGER*4, REAL*4, REAL*8 (D and G types) and
;	REAL*16 values.
;
;
;--
;
; VERSION: 1
;
; HISTORY:
;
; AUTHOR:
;	Jonathan M. Taylor, 14-JUL-77: Version 0
;
; MODIFIED BY:
;
;	Steven B. Lionel, 30-Jan-79: G and H functions
;
;

	.SBTTL	HISTORY		; Detailed Current Edit History


; Edit History for Version 1 of MTH$ABS
;
; 0-3	- REMOVE MTH$FLAG_JACKET.  TNH 5-July-78
; 0-4	- remove MTH$JACKET_HND.  TNH 26-July-78
; 1-001	- Update copyright notice and version number.  JBS 16-NOV-78
; 1-002 - Add G and H functions.  SBL 30-Jan-79
; 1-003	- Correct a typo in a comment.  JBS 30-JUL-1979

	.SBTTL	DECLARATIONS

;
; INCLUDE FILES:
;	NONE
;

;
; EXTERNAL SYMBOLS:
;	NONE
;

;
; MACROS:
;	NONE
;

;
; PSECT DECLARATIONS:
	.PSECT	_MTH$CODE	PIC, SHR, LONG, EXE, NOWRT

;
; EQUATED SYMBOLS:
;	NONE
;

;
; OWN STORAGE:
;	NONE
;

	.SBTTL	MTH$IIABS

;++
; FUNCTIONAL DESCRIPTION:
;	Returns the absolute value of the argument.
;
;
; CALLING SEQUENCE:
;	Absolute_value.ww.v = MTH$IIABS (arg.rw.r)
;	
;
;
; INPUT PARAMETERS:
;	The one parameter is a one-word value and is call-by-reference.
;	
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	Integer Overflow exception can occur.
;	
;
;--

	.ENTRY	MTH$IIABS,	^M<IV>
	MOVW	@4(AP), R0	; R0 = arg
	BGEQ	1$		; return if positive
	MNEGW	R0, R0		; make positive
1$:	RET

	.SBTTL	MTH$JIABS

;++
; FUNCTIONAL DESCRIPTION:
;	Returns the absolute value of the argument.
;
;
; CALLING SEQUENCE:
;	Absolute_value.wl.v =MTH$JIABS (arg.rl.r)
;	
;
;
; INPUT PARAMETERS:
;	The one parameter is a longword value and is call-by-reference.
;	
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	Integer Overflow exception can occur.
;	
;
;--


	.ENTRY	MTH$JIABS,	^M<IV>
	MOVL	@4(AP), R0	; R0 = arg
	BGEQ	1$		; return if positive
	MNEGL	R0, R0		; make positive
1$:	RET

	.SBTTL	MTH$ABS

;++
; FUNCTIONAL DESCRIPTION:
;	Returns the absolute value of the argument.
;
;
; CALLING SEQUENCE:
;	Absolute_value.wf.v = MTH$ABS (arg.rf.r)
;	
;
;
; INPUT PARAMETERS:
;	The one argument is a single-precision floating-point value
;	and is call-by-reference.
;	
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	Reserved Operand exception can occur.
;	
;
;--


	.ENTRY	MTH$ABS,	^M<>
	MOVF	@4(AP), R0	; R0 = arg
	BICW	#^X8000, R0	; force positive
	RET

	.SBTTL	MTH$DABS

;++
; FUNCTIONAL DESCRIPTION:
;	Return the absolute value of the argument.
;
;
; CALLING SEQUENCE:
;	Absolute_value.wd.v =MTH$DABS (arg.rd.r)
;	
;
;
; INPUT PARAMETERS:
;	The one parameter is a double-precision floating-point value
;	and is call-by-reference.
;	
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	Reserved Operand exception can occur.
;	
;
;--


	.ENTRY	MTH$DABS,	^M<>
	MOVD	@4(AP), R0	; R0/R1 = arg
	BICW	#^X8000, R0	; force positive
	RET



	.SBTTL	MTH$GABS

;++
; FUNCTIONAL DESCRIPTION:
;	Return the absolute value of the argument.
;
;
; CALLING SEQUENCE:
;	Absolute_value.wg.v =MTH$GABS (arg.rg.r)
;	
;
;
; INPUT PARAMETERS:
;	The one parameter is a G floating-point value
;	and is call-by-reference.
;	
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	Reserved Operand exception can occur.
;	
;
;--


	.ENTRY	MTH$GABS,	^M<>
	MOVG	@4(AP), R0	; R0/R1 = arg
	BICW	#^X8000, R0	; force positive
	RET



	.SBTTL	MTH$HABS

;++
; FUNCTIONAL DESCRIPTION:
;	Return the absolute value of the argument.
;
;
; CALLING SEQUENCE:
;	CALL MTH$HABS (Absolute_value.wh.r, arg.rh.r)
;	
;
;
; INPUT PARAMETERS:
;	The input parameter is a H floating-point value
;	and is call-by-reference.
;	
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	The output parameter is an H floating-point value
;	and is call-by-reference.
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	Reserved Operand exception can occur.
;	
;
;--


	.ENTRY	MTH$HABS,	^M<>
	MOVH	@8(AP), @4(AP)	; result = arg
	BICW	#^X8000, @4(AP)	; force positive
	RET


	.END
