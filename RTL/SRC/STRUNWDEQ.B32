MODULE STR$$UNWDEQ (				! String dequeuer for unwind
		IDENT = '1-002'			! File: STRUNWDEQ.B32
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY: String support library
!
! ABSTRACT:
!
!	This module contains the routine that dequeues interlocked
!	strings on unwind.
!
! ENVIRONMENT: VAX-11 User mode
!
! AUTHOR: John Sauter, CREATION DATE: 30-OCT-1979
!
! MODIFIED BY:
!
! 1-001	- Original.  JBS 30-OCT-1979
! 1-002	- Fix setup for REMQUE.  JBS 06-NOV-1979
!--

!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!
!	NONE
!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    STR$$UNWDEQ;				! On unwind, dequeue strings

!
! INCLUDE FILES:
!

REQUIRE 'RTLIN:RTLPSECT';			! Declare PSECTS code

LIBRARY 'RTLSTARLE';				! STARLET library for macros and symbols

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! PSECT DECLARATIONS
!
DECLARE_PSECTS (STR);				! Declare psects for STR$ facility
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    LIB$MATCH_COND;				! Match a condition code

!+
! The following is the header for the queue of interlocked strings.
!-

EXTERNAL
    STR$$Q_INTLK : VECTOR [2, LONG];


GLOBAL ROUTINE STR$$UNWDEQ (			! Dequeue strings on UNWIND
	SIG, 					! Signal vector
	MECH, 					! Mechanism vector
	ENBL					! Enable vector
    ) =

!++
! FUNCTIONAL DESCRIPTION
!
!	If we are unwinding, free the interlocked strings.  The number of such strings
!	is passed in the enable vector.
!
! FORMAL PARAMETERS:
!
!	SIG.rl.a	A counted vector of parameters to LIB$SIGNAL/STOP
!	MECH.rl.a	A counted vector of info from CHF
!	ENBL.ra.a	A counted vector of ENABLE argument addresses
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION CODES:
!
!	Always SS$_RESIGNAL, which is ignored when unwinding.
!
! SIDE EFFECTS:
!
!	Removes entries from the string interlock queue.
!
!--

    BEGIN

    BUILTIN
	REMQUE;

    MAP
	SIG : REF VECTOR,
	MECH : REF VECTOR,
	ENBL : REF VECTOR;

!+
! Only dequeue if this is the UNWIND condition.
!-

    IF ( NOT (LIB$MATCH_COND (SIG [1], %REF (SS$_UNWIND)))) THEN RETURN (SS$_RESIGNAL);

!+
! Remove interlock control blocks from the string interlock queue.
!-

    INCR COUNTER FROM 1 TO ..ENBL [1] DO
	BEGIN

	LOCAL
	    REMQUE_ADDR,
	    JUNK;

	REMQUE_ADDR = STR$$Q_INTLK [1];
	REMQUE (..REMQUE_ADDR, JUNK);
	END;

    RETURN (SS$_RESIGNAL);
    END;					! End of STR$$UNWDEQ

END						!End of module STR$$UNWDEQ

ELUDOM
