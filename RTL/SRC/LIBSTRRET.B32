MODULE LIB$$STRTO_RET (	! Library routine to convert a string signal to a return
	IDENT = '1-001'		! File: LIBSTRRET.B32	Edit: RW1001
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  Utility Library
!
! ABSTRACT:
!
!	LIB$$STRTO_RET converts any condition value signalled by 
!	STR$COPY or STR$GET1 or STR$FREE1 into the corresponding LIB status
!	and an ordinary procedure return to the caller of the procedure
!	which established the handler which called LIB$$STRTO_RET.
!
! ENVIRONMENT:  User mode, re-entrant, AST level or not or mixed.
!
! AUTHOR:	Rebecca Will CREATION DATE:  22-Jan-1980
!
! MODIFIED BY:
!
! 01	-  original
!--

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
	LIB$$STRTO_RET;		! Convert a signal to a return

!
! INCLUDE FILES:
!

	REQUIRE 'RTLIN:RTLPSECT';	! Define DECLARE_PSECTS  macro
	LIBRARY 'RTLSTARLE';	! STARLET library for macros and symbols

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! PSECT DECLARATIONS:
!

	DECLARE_PSECTS (LIB);	! declare PSECTs LIB LIB$ facility

!
! OWN STORAGE:
!

!
! EXTERNAL REFERENCES:
!

EXTERNAL LITERAL
    LIB$_FATERRLIB,				! Fatal error in the library
    LIB$_STRIS_INT,				! String is interlocked
    LIB$_INSVIRMEM,				! Insufficient virtual memory
    LIB$_INVSTRDES,				! Invalid string descriptor
    STR$_FATINTERR,				! Fatal internal error in STR
    STR$_STRIS_INT,				! String is interlocked
    STR$_ILLSTRCLA,				! Illegal string class
    STR$_INSVIRMEM;				! Insufficient virtual memory

GLOBAL ROUTINE LIB$$STRTO_RET  (	! Convert a signal to a return
	SIG_ARGS_ADR,	! Adr. of signal args vector
	MCH_ARGS_ADR)	! Adr. of mechanism args vector
		=	! Value is success, unless failure from SYS$UNWIND

!++
! FUNCTIONAL DESCRIPTION:
!
!	LIB$STRTO_RET is called with the argument list passed to a condition
!	handler by the condition handling facility.  It converts and translates
!	the STR signalled condition
!	into a LIB return status to the procedure which called the
!	procedure which established the handler handling the signal.  The
!	stack is unwound to the caller of the establisher and the condition code
!	is returned as the value in R0.
!
!	In BLISS the argument list can be passed in toto by using the
!	BUILTIN function CALLG and AP register, thus:
!
!		status = CALLG (.AP, LIB$SIG_TO_RET);
!
!	Or more simply by: ENABLE LIB$SIG_TO_RET ();
!	If there is no need for the handler to do any more processing
!
! FORMAL PARAMETERS:
!
!	SIG_ARGS_ADR.rl.ra	Adr. of signal args vector
!	MCH_ARGS_ADR.ml.ra	Adr. of mechanism args vector
!	any other args to handler
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION CODES:
!
!	SS$_NORMAL if SYS$UNWIND ok, else error codes form SYS$UNWIND.
!
! SIDE EFFECTS:
!
!	Causes the stack to marked to be unwound to the caller of the
!	establishing procedure of the handler which was called on this signal.
!
!--

    BEGIN
    MAP
	SIG_ARGS_ADR: REF BLOCK[8, BYTE],	! Signal vector
	MCH_ARGS_ADR: REF BLOCK[20, BYTE];	! mechanism vector

    !+
    ! If this is unwind condition, just let unwinding continue since
    ! propably it was this handler which invoked the unwind.
    !-

    IF .SIG_ARGS_ADR[CHF$L_SIG_NAME] EQL SS$_UNWIND THEN RETURN SS$_NORMAL;

    !+
    ! Copy condition value to saved image of R0
    !-

    MCH_ARGS_ADR[CHF$L_MCH_SAVR0] =
	(SELECTONE .SIG_ARGS_ADR[CHF$L_SIG_NAME] OF
	    SET
	    [STR$_FATINTERR] : LIB$_FATERRLIB;
	    [STR$_ILLSTRCLA] : LIB$_INVSTRDES;
	    [STR$_INSVIRMEM] : LIB$_INSVIRMEM;
	    [STR$_STRIS_INT] : LIB$_STRIS_INT;
	    [OTHERWISE] : .SIG_ARGS_ADR[CHF$L_SIG_NAME];
	    TES);

    !+
    ! Set to unwind stack using default depth and default new PC,
    ! namely return to caller of the procedure which established the handler
    !-

    RETURN $UNWIND ();
    END;			! End of LIB$$STRTO_RET routine

END				! End of module LIB$$STRTO_RET
ELUDOM
