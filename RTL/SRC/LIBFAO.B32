MODULE LIB$SYS_FAO (

	IDENT = '1-009'		! File: LIBFAO.B32 EDIT: RKR1009

		   ) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  General Library Support
!
! ABSTRACT:
!
!	This routine calls $FAOL for the caller, returning the
! resulting string using the semantics of the caller's string.
! The length of the resultant string is limited to 256 bytes max and 
! truncation may occur.
!
! ENVIRONMENT:  VAX-11 User Mode
!
! AUTHOR: R. Reichert, CREATION DATE: 20-SEPT-1979
!
! MODIFIED BY:
!
! 1-001	- Original.  RKR 20-SEPT-1979
! 1-002 - Change name to LIB$SYS_FAO.  RKR 15-OCT-79
! 1-003 - Change logic for status returned.  Improve comments.
!	  RKR 20-OCT-79
! 1-004	- P1 can be a value parameter with value 0, so the
!	   NULLPARAMETER builtin doesn't work on it.  JBS 28-OCT-1979
! 1-005 - Improve description of routine.  RKR 1-NOV-79
! 1-006 - Change STR$ codes to LIB$ codes. RKR 22-JAN-1980
! 1-007 - Enhance to recognize additional classes of string descriptors
!	  on output by always getting data into internal buffer and
!	  using LIB$SCOPY_DXDX6 to deliver to caller's buffer.
!	  LIB$ANALYZE_SDESC_R3 is used to compute the number of bytes
!	  actually copied after the copy operation completes.
!	  Change to use LIB$SCOPY_DXDX6 instead of STR$COPY_DX.  This
!	  avoids having to change STR$ statuses to LIB$ statuses and
!	  eliminates need for a handler.
!	  RKR 29-MAY-1981.
! 1-008 - Add special-case code to process string descriptors that
!	  "read" like fixed string descriptors.   RKR 7-OCT-1981.
! 1-009 - Redirect jsb's from LIB$ANALYZE_SDESC_R3 to
!	  LIB$ANALYZE_SDESC_R2.  Use LIB$SCOPY_R_DX6 to do copying.
!	  RKR 18-NOV-1981
!--

!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE 
		(EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!
REQUIRE 'RTLIN:STRLNK';	! Linkage to LIB$ANALYZE_SDESC_R2
!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    LIB$SYS_FAO;			! Formated ASCII output

!
! INCLUDE FILES:
!

REQUIRE 'RTLIN:RTLPSECT';		! Macros for defining psects

LIBRARY 'RTLSTARLE';			! System symbols and macros

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!

LITERAL
    LOCAL_BUF_SIZE = 256;

!
! PSECTS:
!
DECLARE_PSECTS (LIB);		! Declare psects for LIB$ facility
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    LIB$ANALYZE_SDESC_R2 : LIB$ANALYZE_SDESC_JSB_LINK, ! Extract length
						       ! and address of
						       ! 1st data byte
						       ! from descriptor
    LIB$SCOPY_R_DX6 : STRING_JSB ;		! Copy string

GLOBAL ROUTINE LIB$SYS_FAO (		! Formated ASCII output

	CTRSTR,		! addr of string desc. for ASCII control string
	OUTLEN,		! addr of word in which to store output string 
			! length (Optional)
	OUTBUF,		! addr of output buffer string descriptor
	P1		! the first of potentially 17 (max) additional 
			! parameters.

    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine calls $FAOL for the caller, returning the
! resulting string using the semantics of the caller's string.  Since
! output is buffered to an internal buffer which is 256 bytes long,
! the length of the resultant string is limited to 256 bytes max and 
! truncation may occur.
!
!	See $FAO description
!
! FORMAL PARAMETERS:
!
!	CTRSTR.rt.dx	addr of string desc. for ASCII control string
!
!	OUTLEN.ww.r	addr of word in which to store output string
!			length (Optional parameter)
!
!	OUTBUF.wt.dx	addr of output buffer string descriptor
!
!	P1.xx.x		the first of potentially 17 (max)
!			additional parameters. (Optional parameter)
!
! For additional description of parameters,
! see $FAO documentation.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION CODES:
!
!	SS$_NORMAL	Procedure successfully completed
! From LIB$SCOPY_R_DX6
!	LIB$_STRTRU	Success, but source string truncated
!	LIB$_INSVIRMEM	Insufficient virtual memory
!	LIB$_INVSTRDES	Invalid string descriptor
!	LIB$_INVARG	Invalid argument ( usually an unrecognized
!			class of descriptor)
! From $FAOL
!	SS$_BUFFEROVF	Successfully completed, but formatted output
!			string overflowed the output buffer and has
!			been truncated.
!	SS$_BADPARAM	An invalid directive was specified in the FAO
!			control string.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    BUILTIN
	ACTUALCOUNT,
	NULLPARAMETER,
	ACTUALPARAMETER;

    LOCAL
	COPY_STATUS,		! status from buffer copying
	STR_STATUS,		! status from $FAOL call
	LOCAL_BUFF : VECTOR [LOCAL_BUF_SIZE, BYTE],	! local buffer
	BUFFER_DESC : BLOCK [8, BYTE];		! desc for local buffer

    MAP
	OUTBUF : REF BLOCK [, BYTE],
	OUTLEN : REF VECTOR [, WORD];

!+
! Construct a static descriptor to receive the data from the system 
! service call
!-
    BUFFER_DESC [DSC$W_LENGTH] = LOCAL_BUF_SIZE;
    BUFFER_DESC [DSC$B_DTYPE] = DSC$K_DTYPE_T;
    BUFFER_DESC [DSC$B_CLASS] = DSC$K_CLASS_S;
    BUFFER_DESC [DSC$A_POINTER] = LOCAL_BUFF;

!+
! Call $FAOL using the appropriate combination of caller's
! parameters, default parameters and local variables
!-
    STR_STATUS = $FAOL (CTRSTR = ACTUALPARAMETER (1), 
			OUTLEN = BUFFER_DESC,
			OUTBUF = BUFFER_DESC,
			PRMLST = (IF (ACTUALCOUNT () LSSU 4) 
				 THEN 0 ELSE P1));
!+
! Copy internal buffer to caller's buffer, letting LIB$SCOPY_R_DX6
! worry about its semantics.
!-
    COPY_STATUS = LIB$SCOPY_R_DX6 (.BUFFER_DESC [DSC$W_LENGTH], 
				   .BUFFER_DESC [DSC$A_POINTER], 
				   .OUTBUF ) ;

!+
! If caller supplied optional length parameter, update it.
! To do this accurately, we need to inspect the resulting descriptor
! as it appears after the copy.  Get LIB$ANALYZE_SDESC_R2 to do it.
! No need to check LIB$ANALYZE_SDESC_R2 status.  If OUTBUF descr
! was bad, LIB$SCOPY_R_DX6 would have told us about it.
!-
    IF (NOT NULLPARAMETER(2)) 
    THEN 
	BEGIN
	LOCAL
	    OUTBUF_LEN,		! No. of bytes delivered to caller
	    OUTBUF_ADDR;	! Address of 1st data byte of callers
				! buffer
	IF .OUTBUF [DSC$B_CLASS] GTRU DSC$K_CLASS_D
	THEN		! Use generalized length extraction
	    BEGIN
	    LIB$ANALYZE_SDESC_R2 ( .OUTBUF ; OUTBUF_LEN, OUTBUF_ADDR );
	    END

	ELSE		! Fetch length directly

	    OUTBUF_LEN = .OUTBUF [DSC$W_LENGTH] ;

	OUTLEN [0] = MIN (.BUFFER_DESC [DSC$W_LENGTH], .OUTBUF_LEN) ;
	END;
!+
! At this point we have 2 statuses that we could return to caller.
! Determine which one is the "most meaningful".
!-
    !+
    ! If original $FAOL call failed, tell him about that
    ! else give him the copy status.
    !-
    IF NOT .STR_STATUS THEN RETURN (.STR_STATUS)
		       ELSE RETURN (.COPY_STATUS) ;

    END;			! end of LIB$SYS_FAO

END				! end of module LIB$SYS_FAO

ELUDOM
