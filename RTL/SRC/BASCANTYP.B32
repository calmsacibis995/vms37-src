MODULE BAS$CANTYPAHEAD (			!
		IDENT = '1-005'			! File: BASCANTYP.B32 EDIT:RNG1005
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  BASIC-PLUS-2 Miscellaneous I/O
!
! ABSTRACT:
!
!	This module contains the BASIC CANTYPA function,
!	which cancels type-ahead.
!
! ENVIRONMENT:  VAX-11 User Mode
!
! AUTHOR: John Sauter, CREATION DATE: 01-MAY-1979
!
! MODIFIED BY:
!
! 1-001	- Original.
! 1-002	- Set up ISB$A_USER_FP.  JBS 25-JUL-1979
! 1-003 - Cancel typeahead immediately, instead of waiting till
! 	  the next read.  PLL 28-Jul-81
! 1-004 - Use LIB$GET_EF to allocate an event flag, instead of using the
!	  default efn zero.  PLL 30-Nov-81
! 1-005 - Declare LIB$STOP to be external. RNG 05-Jan-82
!--

!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!

REQUIRE 'RTLIN:OTSLNK';				! Define linkages

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    BAS$CANTYPAHEAD;				! Cancel type ahead

!
! INCLUDE FILES:
!

REQUIRE 'RTLML:OTSLUB';				! Get LUB definitions

REQUIRE 'RTLML:OTSISB';				! Get ISB definitions

REQUIRE 'RTLIN:RTLPSECT';			! Macros for defining psects

LIBRARY 'RTLSTARLE';				! System symbols

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! PSECTS:
!
DECLARE_PSECTS (BAS);				! Declare psects for BAS$ facility
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    LIB$GET_EF,					! allocate an event flag
    LIB$FREE_EF,				! deallocate an event flag	
    LIB$STOP,					! stop process and return status
    BAS$$OPEN_ZERO : NOVALUE,			! Open channel zero
    BAS$$CB_PUSH : JSB_CB_PUSH NOVALUE,		! Load register CCB
    BAS$$CB_POP : JSB_CB_POP NOVALUE,		! Done with register CCB
    BAS$$STOP_IO : NOVALUE;			! Signal fatal I/O error

!+
! The following are the error codes used in this module.
!-

EXTERNAL LITERAL
    BAS$K_IO_CHANOT : UNSIGNED (8);		! Channel not open.


GLOBAL ROUTINE BAS$CANTYPAHEAD (		! Cancel type ahead
	CHAN					! Channel on which to cancel type ahead
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Suppress type ahead on the terminal open on the specified
!	channel.
!
! FORMAL PARAMETERS:
!
!	CHAN.rl.v	The channel whose terminal to suppress type
!			ahead on.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	LUB$V_PTA	Suppress type-ahead.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	SS$_NORMAL
!
! SIDE EFFECTS:
!
!	Signals if an error is encountered.
!	BAS$$CB_PUSH will signal if the channel number is invalid.
!	Signals BAS$K_IO_CHANOT if the channel is not open.
!
!--

    BEGIN

    BUILTIN
	FP;

    GLOBAL REGISTER
	CCB = K_CCB_REG : REF BLOCK [, BYTE];

    LOCAL
	FMP : REF BLOCK [, BYTE],
	EVENT_FLAG,
        STATUS,
	DEVNAM_DESC : BLOCK [8, BYTE];

    FMP = .FP;
!+
! Get the CCB for the channel.
!-

    IF (.CHAN EQL 0)
    THEN
	BEGIN
!+
! The user is referencing his controlling terminal.
!-
	BAS$$CB_PUSH (LUB$K_LUN_INPU, LUB$K_ILUN_MIN);
!+
! If the controlling terminal is not yet open, open it.
!-

	IF ( NOT .CCB [LUB$V_OPENED]) THEN BAS$$OPEN_ZERO (.FMP [SF$L_SAVE_FP]);

	END
    ELSE
	BEGIN
!+
! This is an ordinary channel.
!-
	BAS$$CB_PUSH (.CHAN, LUB$K_LUN_MIN);
	END;

    CCB [ISB$A_USER_FP] = .FMP [SF$L_SAVE_FP];
!+
! If the channel is not now open, give an error signal.
!-

    IF ( NOT .CCB [LUB$V_OPENED]) THEN BAS$$STOP_IO (BAS$K_IO_CHANOT);

!+
! This code formerly set the PTA bit and then let RMS do the actual
! purge at the record level.  This method, however, might purge things
! typed after the cancel typeahead was issued.  So cancel typeahead now
! by doing a read virtual block of 0 characters.
!-

!+
! $ASSIGN will translate SYS$INPUT to a device name.
!-

    DEVNAM_DESC [DSC$W_LENGTH] = %CHARCOUNT ('SYS$INPUT');
    DEVNAM_DESC [DSC$B_DTYPE] = DSC$K_DTYPE_Z;
    DEVNAM_DESC [DSC$B_CLASS] = DSC$K_CLASS_S;
    DEVNAM_DESC [DSC$A_POINTER] = UPLIT('SYS$INPUT');

    STATUS = $ASSIGN (DEVNAM = DEVNAM_DESC, CHAN = CHAN);
    IF (NOT .STATUS) THEN LIB$STOP (.STATUS);

    STATUS = LIB$GET_EF (EVENT_FLAG);
    IF (NOT .STATUS) THEN LIB$STOP (.STATUS);
	
    STATUS = $QIOW (EFN = .EVENT_FLAG, CHAN = .CHAN,
		    FUNC = IO$_READVBLK+IO$M_PURGE,
		    P1 = .CCB [LUB$A_BUF_BEG], P2 = 0); 
    IF (NOT .STATUS) THEN LIB$STOP (.STATUS);

    STATUS = LIB$FREE_EF (EVENT_FLAG);
    IF (NOT .STATUS) THEN LIB$STOP (.STATUS);

    STATUS = $DASSGN (CHAN = .CHAN);
    IF (NOT .STATUS) THEN LIB$STOP (.STATUS);
!+
! We are done with register CCB.
!-
    BAS$$CB_POP ();
    RETURN (SS$_NORMAL);
    END;					! end of BAS$CANTYPAHEAD

END						! end of module BAS$CANTYPAHEAD

ELUDOM
