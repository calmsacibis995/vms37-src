MODULE STR$LEFT (		! Extract a substring from the left

		IDENT = '1-011'	! File: STRLEFT.B32	Edit: RKR1011

		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY: String support library
!
! ABSTRACT:
!
!	This module extracts a substring according to the
!	BASIC-PLUS-2 syntax.  It finds the substring of a main string
!	starting at the left end of the string (character position 1)
!	and continues through the nth character of the string.  This
!	substring is copied to the destination string.
!
! ENVIRONMENT: User mode, AST level or not or mixed
!
! AUTHOR: R. Will, CREATION DATE: 19-Feb-79
!
! MODIFIED BY:
!
!  R. Will, 19-Feb-79: VERSION 01
! 1-001	- Original
! 1-002	- Change linkage and call to COPY routine. 13-Mar-79 RW
! 1-003	- Change string linkages to start with STR$.  JBS 04-JUN-1979
! 1-004	- Change call to STR$$COPY.  JBS 16-JUL-1979
! 1-005 - String cleanup.  Change name to STR$.  RW  31-Oct-79
! 1-006	- Change to new interlock macros.  JBS 06-NOV-1979
! 1-007	- The new interlock macros cannot be used in routines called
!	  with a JSB instruction.  JBS 15-NOV-1979
! 1-008 - String speedup, undo edit 7.  RW  7-Jan-1980
! 1-009 - Enhance to accomodate additional classes of descriptors by
!	  using $STR$GET_LEN_ADDR to extract length and 1st data
!	  byte from descriptor.  Remove string interlocking code.
!	  RKR 21-APR-81
! 1-010 - Speed up code.  RKR 7-OCT-1981.
! 1-011 - Use STR$COPY_R_R8 to do the copy.  Use $STR$SIGNAL_FATAL
!	  instead of $STR$CHECKSTATUS.  RKR 18-NOV-1981.
!--

!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE 
		(EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!

REQUIRE 'RTLIN:STRLNK';		! Use require file with string linkage

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    STR$LEFT,			! Find the LEFT of a string, CALL
    STR$LEFT_R8 : STR$JSB_LEFT;	! Find the LEFT of a string,JSB

!
! INCLUDE FILES:
!

REQUIRE 'RTLIN:RTLPSECT';	! Declare PSECTS code

REQUIRE 'RTLIN:STRMACROS';	! use string macros to code

LIBRARY 'RTLSTARLE';		! STARLET library for macros and symbl

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! PSECT DECLARATIONS:
!
DECLARE_PSECTS (STR);
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    STR$COPY_R_R8 : STR$JSB_COPY_R ;	! Routine to do the copying

EXTERNAL LITERAL
    STR$_NORMAL,				! successful completion
    STR$_ILLSTRPOS;				! error status


GLOBAL ROUTINE STR$LEFT (		! extract the left substring

	DEST_DESC,		! Pointer to destination descriptor
	SRC_DESC,		! Pointer to source descriptor
	END_POS			! Last character to be included

			) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine extracts the characters starting at the leftmost
!	character (character position 1) and continuing through the
!	character position specified by the input and copies that 
!	substring to the destination string (by JSB to STR$COPY_R_R8)
!	according to the syntax of the class of the destination string.
!	If the input character position is > the length of the input 
!	string, then the length of the input string is used.  If the 
!	input character position is < 1, the destination becomes a null
!	string.
!	The call entry point executes a JSB to the JSB entry point.
!
! FORMAL PARAMETERS:
!
!	DEST_DESC.wt.dx		pointer to destination string descriptor
!	SRC_DESC.rt.dx		pointer to source string descriptor
!	END_POS.rl.r		last character position to include
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION CODES:
!
!	any of the codes returned by the JSB entry point
!
! SIDE EFFECTS:
!
!	JSBs to the JSB entry point so may signal any of its errors or
!	have any of its side effects.
!
!--

    BEGIN

    MAP
	SRC_DESC  : REF $STR$DESCRIPTOR,
	DEST_DESC : REF $STR$DESCRIPTOR;

    RETURN STR$LEFT_R8 (DEST_DESC [0,0,0,0], 
			SRC_DESC [0,0,0,0], 
			..END_POS);
    END;					!End of STR$LEFT

GLOBAL ROUTINE STR$LEFT_R8 (		! extract the left substring

	DEST_DESC,		! Pointer to destination descriptor
	SRC_DESC,		! Pointer to source descriptor
	END_POS			! Last character to be included

			   ) : STR$JSB_LEFT =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine extracts the characters starting at the leftmost
!	character (character position 1) and continuing through the
!	character position specified by the input and copies that 
!	substring to the destination string (by JSB to STR$COPY_R_R8)
!	according to the syntax of the class of the destination string.
!	If the input character position is > the length of the input 
!	string, then the length of the input string is used.  If the 
!	input character position is < 1, the destination becomes a null
!	string.
!
! FORMAL PARAMETERS:
!
!	DEST_DESC.wt.dx		pointer to destination string descriptor
!	SRC_DESC.rt.dx		pointer to source string descriptor
!	END_POS.rl.v		value of last character position to 
!				include
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION CODES:
!
!	SS$_NORMAL	Success
!	STR$_ILLSTRPOS	Character position reference outside of string
!	STR$_ILLSTRSPE  End pos < start pos, or length too long
!	STR$_NEGSTRLEN	Negative length supplied, 0 used
!	STR$_TRU	Truncation occured in copying to destination
!			(Warning)
!
! SIDE EFFECTS:
!
!	May signal:
!	    STR$_FATINTERR	Fatal internal error
!	    STR$_ILLSTRCLA	Illegal (or unsupported) string class
!	    STR$_INSVIRMEM	Insufficient virtual memory for
!				reallocation of dynamic string
!
!--

    BEGIN

    LOCAL
	IN_LEN,			! length of source string
	IN_ADDR, 		! addr of 1st byte of source data
	COPY_STATUS,		! status from STR$COPY_R_R8
	RETURN_STATUS,		! keep track of return status
	COPY_LENGTH;		! length to be copied

    MAP
	SRC_DESC  : REF $STR$DESCRIPTOR,
	DEST_DESC : REF $STR$DESCRIPTOR;

    RETURN_STATUS = 1 ;		! assume success to follow

!+
! Calculate the length and address of first byte of source string.
!-
    $STR$GET_LEN_ADDR ( SRC_DESC, IN_LEN, IN_ADDR) ;

!+
! Compute the correct substring and use the length and address of
! the substring to copy to dest.  The length must be greater than or 
! equal to 0 and is the smaller of the length specified by END_POS which
! was input and the source string length.  Return STR$_ILLSTRPOS if 
! END_POS does not meet those criteria.
!-

    COPY_LENGTH =				! compute the length
	BEGIN
	IF .IN_LEN LSS .END_POS
	THEN
	    BEGIN
	    RETURN_STATUS = STR$_ILLSTRPOS; ! input length is too long

	    .IN_LEN			    ! use srclen and remember 
					    ! error
	    END

	ELSE 
	    .END_POS			    ! use specified end position
	END;

    IF .COPY_LENGTH LSS 0 THEN
	BEGIN
	COPY_LENGTH = 0;		! input length is negative
	RETURN_STATUS = STR$_ILLSTRPOS;	! use 0 and remember error
	END;

    COPY_STATUS = STR$COPY_R_R8 ( .DEST_DESC, .COPY_LENGTH, .IN_ADDR ); 

    IF .COPY_STATUS NEQ SS$_NORMAL
    THEN RETURN_STATUS = .COPY_STATUS;	! copy truncated, or severe
					!  error, return new status
					!  instead of previous value

    $STR$SIGNAL_FATAL (RETURN_STATUS);	! if fatal error, signal
    RETURN .RETURN_STATUS;
    END;					!End of STR$LEFT

END						!End of module

ELUDOM
