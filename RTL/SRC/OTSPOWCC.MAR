	.TITLE	OTS$POWCC - COMPLEX*8 ** COMPLEX*8 power routine
	.IDENT	/1-004/			; File: OTSPOWCC.MAR

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY: Language support library - user callable
;
; ABSTRACT:
;
;	COMPLEX*8 base to COMPLEX*8 power giving COMPLEX*8 result.
;
; ENVIRONMENT: User Mode, AST Reentrant
;
;--
; AUTHOR: Steven B. Lionel, CREATION DATE: 24-Oct-1978: Version 0
;
; MODIFIED BY:
;
; SBL 24-Oct-1978, VERSION 00
; 1-001	- Original 
; 1-002	- Standardized version number format, with three digits in
;	   the edit number.  JBS 16-NOV-78
; 1-003	- Add "_" to the PSECT directive.  JBS 22-DEC-78
; 1-004 - Change shared external references to G^ RNH 25-Sep-81

	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;

;
; EXTERNAL DECLARATIONS:
;
	.GLOBL	MTH$CEXP		; Complex exponentiation
	.GLOBL	MTH$CLOG		; Complex logarithm
;
; MACROS:
;

;
; EQUATED SYMBOLS:
;
	base = 4			; base input - by value
	exp = 12			; exponent input - by value
;
; OWN STORAGE:
;

;
; PSECT DECLARATIONS:
;
	.PSECT _OTS$CODE PIC, USR, CON, REL, LCL, SHR, -
			EXE, RD, NOWRT, LONG


	.SBTTL	OTS$POWCC  - COMPLEX*8 ** COMPLEX*8 power routine
;++
; FUNCTIONAL DESCRIPTION:
;
;	OTS$POWCC evaluates the result of taking a complex base
;	to a complex power.  The ANS FORTRAN X3.9-1978 standard defines
;	complex exponentiation as:
;
;	x ** y = CEXP( y * CLOG(x))
;
;	where x and y are type COMPLEX.
;
;	The arguments of OTS$POWCC are CALL BY VALUE.  
;
; CALLING SEQUENCE:
;
;	power.wfc.v = OTS$POWCC (base.rfc.v, exponent.rfc.v)
;
; INPUT PARAMETERS:
;
;	Both base and exponent are COMPLEX*8 numbers, each consisting
;	of a REAL*4 real part and a REAL*4 imaginary part.  Both are
;	CALL BY VALUE.
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; FUNCTION VALUE:
;
;	The COMPLEX*8 (REAL*4, REAL*4) result of taking the
;	COMPLEX base to the COMPLEX exponent power.
;
; SIDE EFFECTS:
;
;	Possible error signals are:
;
;	 MTH$_INVARGMAT if base is (0.,0.).
;	 MTH$_FLOOVEMAT if floating overflow occurs.
;	 MTH$_SINCOSSIG if absolute value of the imaginary part of
;		        (exponent * CLOG(base)) > PI*2**30.
;	 SS$_ROPRAND    if reserved floating operand is fetched.
;--
	.PAGE
	.ENTRY	OTS$POWCC, ^M<R2,R3,R4,R5>	; disable integer ovflo

	MTH$FLAG_JACKET			; establish math error handler

	MOVQ	exp(AP), R2		; put exponent in R2, R3
					; later operations will check
					; for reserved operands

;+
;	Get complex logarithm of base
;-
	PUSHAL	base(AP)		; address of base
	CALLS	#1, G^MTH$CLOG		; R0,R1 get LOG(base)
					; call by reference

;+
;	CLOG(base) is in R0, R1.  Multiply by exponent.
;	R0,R1 = CLOG(base) = a+bi
;	R2,R3 = exp  = c+di
;
;	Complex multiplication defined as:
;
;	real part = ac-bd
;	imaginary part = ad+bc
;-

	MULF3	R0, R3, R4		; R4 = ad
	MULF2	R2, R0			; R0 = ac
	MULF3	R1, R3, R5		; R5 = bd
	SUBF2	R5, R0			; R0 = ac-bd
	MULF2	R2, R1			; R1 = bc
	ADDF2	R4, R1			; R1 = ad+bc

;+
;	Now compute CEXP(product)
;-

	MOVQ	R0, -(SP)		; put product (R0,R1) on stack
	PUSHL	SP			; address of arguments
	CALLS	#1, G^MTH$CEXP		; R0, R1 get EXP(product)
					; call by reference

	RET				; all done, exit
	.END
