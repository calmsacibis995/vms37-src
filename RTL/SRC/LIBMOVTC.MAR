	.TITLE	LIB$MOVTC - Move Translated Characters 
	.IDENT	/1-011/		; File: LIBMOVTC.MAR	Edit: RKR1011

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY: General Utility Library
;
; ABSTRACT:
;
;	Move translated characters from the source to the destination.
;	The fill character is employed if the destination is longer 
;	than the source and the destination semantics are fixed-length.
;
; ENVIRONMENT: User Mode, AST Reentrant
;
;
; AUTHOR: Donald G. Petersen, CREATION DATE: 30-Dec-77
;
; MODIFIED BY:
;
;	DGP, 30-Dec-77 : Version 00 
; 01	- Original
; 02	- bug fix.  Add @ to fill character pointer.  DGP 9-May-78
; 1-001	- Update version number and copyright notice.  JBS 16-NOV-78
; 1-002	- Add "_" to PSECT directive.  JBS 21-DEC-78
; 1-003	- If the destination string is dynamic, allocate enough space
;	   to hold the whole translated source string.  JBS 20-MAR-1979
; 1-004	- Change LIB$S and OTS$S to STR$.  JBS 21-MAY-1979
; 1-005	- Put in .EXTRN assembler directives.  JBS 19-JUN-1979
; 1-006 - Use handler to change STR errors to LIB.  RW  22-Jan-1980
; 1-007 - Enhance to recognize additional classes of string descriptors
;	  by invoking LIB$ANALYZE_SDESC_R3 to extract length and address
;	  of 1st data byte from descriptor.  
;	  Use LIB$SGET1_DD instead of STR$GET1_DX to allocate space.
;	  This should be faster and eliminate the need for establishing
;	  LIB$$STRTO_RET as a handler.
;	  RKR 22-MAY-1981
; 1-008 - Add checks for errors returned by LIB$ANALYZE_SDEC, so that
;	  we returned error status to caller.  RKR 19-AUG-1981.
; 1-009 - Analyze source before allocating dest string.  SBL 23-Sept-1981
; 1-010 - Add special-case code to process string descriptors that
;	  "read" like fixed string descriptors.  
;	  Fix error in calling sequence to LIB$SGET1_DD. Needs length
;	  by reference.
;	  RKR 8-OCT-1981.
; 1-011 - Redirect jsb's from LIB$ANALYZE_SDESC_R3 to
;	  LIB$ANALYZE_SDESC_R2.  Reorganize register usage to free
;	  R7 and drop R7 from entry mask.
;	  RKR 18-NOV-1981.
;--

	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;
	$DSCDEF				; Descriptor symbols
	$SSDEF				; SS$_NORMAL

; EXTERNAL SYMBOLS
	.DSABL	GBL			; Explicit externals only
	.EXTRN	LIB$ANALYZE_SDESC_R2	; Extract length and address of
					; 1st data byte
	.EXTRN	LIB$SGET1_DD		; Allocate a string
;
; MACROS:
;
;	NONE
;
; EQUATED SYMBOLS:
;
;	NONE
;
; OWN STORAGE:
;
;	NONE
;
; PSECT DECLARATIONS:
;
	.PSECT _LIB$CODE PIC, SHR, LONG, EXE, NOWRT

	.SBTTL	LIB$MOVTC  - Translate and Move Characters 
;++
; FUNCTIONAL DESCRIPTION:
;
;	Each character in the source is used as an index into the table.
;	The byte entry found is then placed into the destination as a 
;	translation.  The fill character is used if the destination 
;	string is longer than the source string and the destination 
;	sematics are fixed-length.  If the source is 
;	longer than the destination, then truncation results.
;	Overlap of the source and destination strings does not affect 
;	execution.
;	Overlap of the destination string and translation table yields
;	unpredicatable results.
;	If the destination string is dynamic, enough space is allocated
;	for it to hold the entire translated source string.
;	Destination strings which have varying-length string semantics
;	will end up with a CURLEN field that is the MIN( MAXSTRLEN,
;	SOURCE string length).
;
; CALLING SEQUENCE:
;
;	CALL LIB$MOVTC (src.rt.dx, fill.rt.dx, table.rt.dx, dst.wt.dx)
;

; INPUT PARAMETERS:
;
	SOURCE = 4		; Adr. of desc. of source string
	FILL = 8		; Adr. of desc. of fill character
	TABLE = 12		; Adr. of desc. of translation table
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
	DEST = 16		; Adr. of desc. of destination string
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	SS$_NORMAL		The MOVTUC went OK
;	LIB$_INSVIRMEM		Insufficient virtual memory to allocate
;				the destination string.
;	LIB$_FATERRLIB		Fatal error in library
;	LIB$_INVSTRDES		Invalid string descriptor
;
; SIDE EFFECTS:
;
;	NONE
;
;--

	.ENTRY LIB$MOVTC , ^M<R2, R3, R4, R5, R6>	; Entry point

;+
; Get the length and address of the source string.
;-
	MOVL	SOURCE(AP), R0		; Address of SOURCE descriptor
	CMPB	DSC$B_CLASS(R0), #DSC$K_CLASS_D	; read like fixed ?
	BGTRU	5$			; no
	MOVQ	@SOURCE(AP), R5		; length->R5, address->R6
	BRB	15$			; join common flow

5$:	JSB	G^LIB$ANALYZE_SDESC_R2	; Extract: length->R1, addr->R2
	BLBS	R0, 10$			; If ok, continue
	RET				; else, error -- return

10$:	MOVQ	R1, R5			; save length and addr of SOURCE
					; length -> R5, addr-> R6

;+
; If the destination string is dynamic, allocate enough space for it
; that it will hold the whole translated source string.
;-
15$:	MOVL	DEST(AP), R0			; Point to dest descr.
	CMPB	#DSC$K_CLASS_D, DSC$B_CLASS(R0)	; Dynamic?
	BNEQ	20$				; No, use it as is.
	PUSHL	R5				; length
	PUSHL	R0				; address
	PUSHAW	4(SP)				; address of length
	CALLS	#2, G^LIB$SGET1_DD
	ADDL2	#4, SP				; realign stack
	BLBC	R0, 70$				; Branch if alloc. fails
;+
; Extract the various lengths and addresses we will need and leave
; in registers for the actual MOVTC instruction to follow.
;-
20$:
	MOVL	TABLE(AP), R0		; Address of TABLE descriptor
	CMPB	DSC$B_CLASS(R0), #DSC$K_CLASS_D	; read like fixed ?
	BGTRU	25$			; no
	MOVL	DSC$A_POINTER(R0), R3	; address of TABLE
	BRB	30$			; join common flow

25$:	JSB	G^LIB$ANALYZE_SDESC_R2	; Extract: length->R1, addr->R2
	BLBC	R0, 70$			; If error, return error
	MOVL	R2, R3			; save addr of TABLE

30$:	MOVL	FILL(AP), R0		; Address of FILL descriptor
	CMPB DSC$B_CLASS(R0), #DSC$K_CLASS_D	; read like fixed ?
	BGTRU	35$			; no
	MOVZBL	@DSC$A_POINTER(R0), R4	; value of fill character
	BRB	40$			; join common flow

35$:	JSB	G^LIB$ANALYZE_SDESC_R2	; Extract: length->R1, addr->R2
	BLBC	R0, 70$			; If error, return error
	MOVZBL	(R2), R4		; value of fill character

40$:	MOVL	DEST(AP), R0		; Address of DEST descriptor
	CMPB	DSC$B_CLASS(R0), #DSC$K_CLASS_D	; read like fixed ?
	BGTRU	45$			; no
	MOVQ	@DEST(AP), R1		; length->R1, address->R2
	BRB	50$			; join common flow

45$:	JSB	G^LIB$ANALYZE_SDESC_R2	; Extract: length->R1, addr->R2
	BLBC	R0, 70$			; If error, return error

;+
; Class_VS destination is handled as a special case.  We must try to
; force its current length (CURLEN) field to be the same size as the
; source length.  However, this new length must be the MIN( source_len,
; and MAXSTRLEN).  If source_len is greater than MAXSTRLEN, then output
; will be trunctated to MAXSTRLEN chars.
;-
50$:	MOVL	DEST(AP), R0		; Address of DEST descriptor
	CMPB	DSC$B_CLASS(R0), #DSC$K_CLASS_VS	; Class _VS ?
	BNEQ	65$			; no, no special action needed
	CMPW	R5, DSC$W_MAXSTRLEN(R0)	; SOURCE len : MAXSTRLEN
	BLEQ	55$			; if SOURCE len leq
	MOVZWL	DSC$W_MAXSTRLEN(R0), R1	; use MAXSTRLEN for CURLEN
	BRB	60$
55$:	MOVZWL	R5, R1			; use SOURCE len for CURLEN
60$:	MOVW	R1, @DSC$A_POINTER(R0)	; rewrite CURLEN field
;+
; prototype movtc
;	movtc srclen, srcaddr, fillchar, tableaddr, dstlen, dstaddr
;-
65$:
	MOVTC	R5, (R6), R4, (R3), R1, (R2) ; move translated chars
				; State of regs after a MOVTC instr.
				; R0 = number of translated bytes
				;      remaining in source string.
				;      Is non zero only if source string
				;      is longer than destination 
				;      string.
				; R1 = address of one byte beyond the
				;      last byte in source string that
				;      was translated.
				; R2 = 0
				; R3 = address of the translation table
				; R4 = 0
				; R5 = address of one byte beyond the
				;      destination string.
				;
	MOVL	#SS$_NORMAL, R0		; Indicate normal completion
70$:	RET				; Return to caller
	.END
