MODULE BAS$BUFSIZ (				! Get buffer size
		IDENT = '1-003'			! File: BASBUFSIZ.B32, Edit: JBS1003
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  VAX-11 BASIC Miscellaneous I/O
!
! ABSTRACT:
!
!	This module contains the BASIC BUFSIZ function, which returns
!	the buffer size of the file open on the specified channel.
!
! ENVIRONMENT:  VAX-11 User Mode
!
! AUTHOR: John Sauter, CREATION DATE: 11-APR-1979
!
! MODIFIED BY:
!
! 1-001	- Original.
! 1-002	- Set up ISB$A_USER_FP.  JBS 25-JUL-1979
! 1-003	- Use channel 0, not device TT.
!	   JBS 11-MAR-1980
!--

!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!

REQUIRE 'RTLIN:OTSLNK';				! Define linkages

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    BAS$BUFSIZ;					! Return buffer size

!
! INCLUDE FILES:
!

REQUIRE 'RTLML:OTSLUB';				! Get LUB definitions

REQUIRE 'RTLML:OTSISB';				! Get ISB definitions

REQUIRE 'RTLIN:RTLPSECT';			! Macros for defining psects

LIBRARY 'RTLSTARLE';				! System symbols

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! PSECTS:
!
DECLARE_PSECTS (BAS);				! Declare psects for BAS$ facility
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    BAS$$OPEN_ZERO : NOVALUE,			! Open channel 0
    BAS$$CB_PUSH : JSB_CB_PUSH NOVALUE,		! Load register CCB
    BAS$$CB_POP : JSB_CB_POP NOVALUE,		! Done with register CCB
    BAS$$STOP : NOVALUE;			! Signal fatal error

!+
! The following are the error codes used in this module.
!-

EXTERNAL LITERAL
    BAS$K_PROLOSSOR : UNSIGNED (8);		! Program lost, sorry


GLOBAL ROUTINE BAS$BUFSIZ (			! Return buffer size
	CHAN					! Channel whose buffer size to return
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Returns the size of the buffer for the specified channel.
!	If the channel is closed a zero is returned.
!
! FORMAL PARAMETERS:
!
!	CHAN.rl.v	The channel whose buffer size to return.
!
! IMPLICIT INPUTS:
!
!	The LUB$W_RBUF_SIZE field of the LUB of the specified channel.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	The number of bytes in the buffer, as a longword integer.
!
! SIDE EFFECTS:
!
!	Signals if an error is encountered.
!	BAS$$CB_PUSH will signal if the channel number is invalid.
!
!--

    BEGIN

    BUILTIN
	FP;

    GLOBAL REGISTER
	CCB = K_CCB_REG : REF BLOCK [, BYTE];

    LOCAL
	BUFFER_SIZE,
	FMP : REF BLOCK [, BYTE];

    FMP = .FP;
!+
! If this is channel zero, get the user's terminal, and be sure it is open.
!-

    IF (.CHAN EQL 0)
    THEN
	BEGIN
	BAS$$CB_PUSH (LUB$K_LUN_INPU, LUB$K_ILUN_MIN);
	CCB [ISB$A_USER_FP] = .FMP [SF$L_SAVE_FP];

	IF ( NOT .CCB [LUB$V_OPENED]) THEN BAS$$OPEN_ZERO (.FMP [SF$L_SAVE_FP]);

	END
    ELSE
	BEGIN
	BAS$$CB_PUSH (.CHAN, LUB$K_LUN_MIN);
	CCB [ISB$A_USER_FP] = .FMP [SF$L_SAVE_FP];
	END;

!+
! Get the buffer size from the Logical Unit Block.  This will be zero
! if the channel has not been opened.
!-
    BUFFER_SIZE = .CCB [LUB$W_RBUF_SIZE];
!+
! We are done with register CCB.
!-
    BAS$$CB_POP ();
!+
! All done.
!-
    RETURN (.BUFFER_SIZE);
    END;					! end of BAS$BUFSIZ

END						! end of module BAS$BUFSIZ

ELUDOM
