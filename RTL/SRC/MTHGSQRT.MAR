	.TITLE	MTH$GSQRT 	; G Floating Point Square Root routine
				; (GSQRT)
	.IDENT /1-004/		; File: MTHGSQRT.MAR	EDIT: RNH1004
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;
; FACILITY: MATH LIBRARY
;++
; ABSTRACT:
;
; MTH$GSQRT is a function which returns the G-floating square root of
; its G-floating argument.  The call is standard call-by-reference.
;
; MTH$GSQRT_R5  is  a  special routine  which  is the same as MTH$GSQRT
; except  a  faster non-standard JSB call is used with the  argument in
; R0 and no registers are saved.
;
;--
;
; VERSION: 1
;
; HISTORY:
; AUTHOR:
;	Steven B. Lionel, 08-Jan-79: Version 1
;
; MODIFIED BY:
;
;
;

	.SBTTL	HISTORY	; Detailed Current Edit History


; ALGORITHMIC DIFFERENCES FROM FP-11/C ROUTINE:
; \DSQRT used for comparison, FP-11 has no G-float. \
;	1. Last DIVD is rounded instead of truncated. Results should be
;	   correct within 2 LSB's.
;
; Edit History for Version 1 of MTH$GSQRT 
;
; 1-001 - Adapted from MTH$DSQRT version 1-010.  SBL 08-Jan-79
; 1-002	- Correct some typos in comments.  JBS 30-JUL-1979
; 1-003 - Use ASHQ, not ASHL, to generate reserved operand.  JAW 12-Oct-1979
; 1-004 - Change W^ to G^ on call to MTH$$SIGNAL RNH 09-Sept-1981

	.SBTTL	DECLARATIONS	; Declarative Part of Module

;
; INCLUDE FILES:	OTSPARAMS.MAR
;
; EXTERNAL SYMBOLS:
;
	.DSABL	GBL			; Declare all externals
	.EXTRN	MTH$$SIGNAL		; SIGNAL SEVERE error
	.EXTRN	MTH$K_SQUROONEG		; Error code

;
; EQUATED SYMBOLS:	
;

	ACMASK = ^M<IV, R2, R3, R4, R5>	; register save mask and IV enable
;
; MACROS:	none
;
; PSECT DECLARATIONS:

	.PSECT	_MTH$CODE	PIC,SHR,LONG,EXE,NOWRT
					; program section for math routines
;
; OWN STORAGE:
;
;
; Constants A and B chosen for k = odd
;
LG_ODD_A_E511:
	.WORD	^O057772, ^O101171, ^O120000, ^O000000
LG_ODD_B_EM511:
	.WORD	^O020003, ^O003611, ^O040000, ^O000000
;
; Constants A and B chosen for k = even
;
LG_EVEN_A:
	.WORD	^O040002, ^O137303, ^O040000, ^O000000
LG_EVEN_B_EM512:
	.WORD	^O017772, ^O164544, ^O060000, ^O000000

	.SBTTL	MTH$GSQRT  - Standard G-Floating GSQRT


;++
; FUNCTIONAL DESCRIPTION:
;
; GSQRT  - G-floating point function
;
; GSQRT(X) is computed using the following approximation technique:
;
;	If X < 0, error.  If X = 0, return GSQRT(X) = 0.
;
;	Let X = 2**K * F where F is the fractional part.
;
;	If K = even, X = 2**(2P) * F,
;		GSQRT(X) = 2**P * GSQRT(F), 1/2 =< F < 1
;
;	If K = odd, X = 2**(2P+1) * F = 2**(2P+2) * (F/2),
;		GSQRT(X) = 2**(P+1) * GSQRT(F/2), 1/4 =< F/2 < 1/2.
;
;	Let F' = A*F + B,
;			  A = 0.453730314(octal),
;			  B = 0.327226214(octal), for K = even.
;	       = A*(F/2) + B,
;			  A = 0.650117146(octal),
;			  B = 0.230170444(octal), for K = odd.
;	and
;	    K' = P,	 for K = even
;	       = P + 1	 for K = odd.
;
;	Let Y0 = 2**K' * F' as a straight line approximation within the
;	given interval using coefficients A and B which minimize the
;	absolute error at the midpoint and endpoint.
;
;	Starting with Y0, three Newton-Raphson iterations are performed.
;
;	Y[n+1] = (1/2) * ( Y[n] + X/Y[n])
;
;	The relative error is < 10**-17.
;
; CALLING SEQUENCE:
;
;	gsqrt.wg.v = MTH$GSQRT(x.rg.r)
;
; INPUT PARAMETERS:

	LONG = 4			; define longword multiplier
	x = 1 * LONG			; Contents of x is the argument

; IMPLICIT INPUTS:	none
;
; OUTPUT PARAMETERS:
;
;	VALUE:	G-floating square root of the argument
;
; IMPLICIT OUTPUTS:	none
;
; COMPLETION CODES:	none
;
; SIDE EFFECTS:
;
; Signals: MTH$_SQUROONEG if X < 0.0 with reserved operand in R0/R1
; (copied to the signal mechanism vector CHF$L_MCH_R0/R1 by LIB$SIGNAL).
; Associated message is: "SQUARE ROOT OF NEGATIVE VALUE". Result is reserved
; operand -0.0 unless a user supplied (or any) error handler changes CHF$L_MCH_R0/R1.
;
; NOTE: This procedure disables floating point underflow, enables integer
; overflow, causes no floating overflow or other arithmetic traps, and
; preserves enables across the call.
;
;---


	.ENTRY	MTH$GSQRT, ACMASK	; standard call-by-reference entry
					; disable DV (and FU), enable IV
	MTH$FLAG_JACKET			; flag that this is a jacket procedure in
					; case of an error in special routine
	MOVG	@x(AP), R0		; R0/R1 = arg 
	BSBB	MTH$GSQRT_R5 		; call kernel GSQRT rountine
	RET				; return - result in R0/R1

	.SBTTL	MTH$GSQRT_R5  - Special GSQRT routine

; Special GSQRT - used by the standard routine, and directly.
;
; CALLING SEQUENCE:
;	save anything in R2:R5
;	MOVG	..., R0			; input in R0/R1
;	JSB	MTH$GSQRT_R5
;	return with result in R0/R1
; Note: This routine is written to avoid causing any integer overflows, floating
; overflows, floating underflows or divide by 0 conditions, whether enabled or
; not.
;
; REGISTERS USED:
;	R0/R1 - Floating argument then result
;	R2/R3 - scratch
;	R4/R5 - hold X during calc of F', K'.

MTH$GSQRT_R5::				; JSB routine for GSQRT
	MOVG	R0, R4			; test sign of X and save it in R4/R5.
	BLEQ	ZERO_NEG		; branch to ZERO_NEG if X =< 0
;
; X > 0
;
POS:	MOVZWL	R0, R2			; isolate low 16 bits in R2
					; (sign, exp, 4 fract bits)
	BICB2	#^X1F, R2		; clear fraction, 1 exp bit
	BICW	R2, R0			; clear exponent bits in R0
	BBC	#4, R0, EVEN		; branch if exponent even
	MULG2	LG_ODD_A_E511, R0	; add 511 (half of bias) to
					; (exponent-2)
					; and start approximation calc
	ADDG2	LG_ODD_B_EM511, R0	; R0 = (first approx) * 2**-512
	BRB	ADJUST			; go adjust

EVEN:
	ADDW2	#^X2000, R0		; exp is 0 - make it 512
	MULG2	LG_EVEN_A, R0
	ADDG2	LG_EVEN_B_EM512, R0	; R0 = (first approx) * 2**-512
ADJUST:
	ROTL	#31, R2, R2		; divide R2 (exp+bias) by 2,
					; giving (exp/2+512)
	ADDW	R2, R0			; insert exp/2 in first approx and
					; re-bias it.

; first iteration, all done in G floating because of exponent range
;
	DIVG3	R0, R4, R2		; R2 = X/Y0
	ADDG2	R2, R0			; R0 = Y0 + X/Y0
	SUBW	#^X10, R0		; R0 = Y1 = (1/2)(Y0 + X/Y0)
					; no overflow possible

; second iteration
;
	DIVG3	R0, R4, R2		; R2/R3 = X/Y1
	ADDG2	R2, R0			; R0/R1 = Y1 + higher_part(X/Y1)
	SUBW	#^X10, R0		; R0/R1 = Y2 = (1/2) (Y1+X/Y1)

; third iteration
;
	DIVG3	R0, R4, R2		; R2/R3 = X/Y2
	ADDG2	R2, R0			; R0 = Y2+X/Y2
	SUBW	#^X10, R0		; R0/R1 = GSQRT(X) =
					; (1/2) (Y2+X/Y2)
SQRTX:	RSB				; return, R0/R1 = result

; X =< 0
;
ZERO_NEG:
	BEQL	SQRTX			; return with R0 = result = 0
	PUSHL	(SP)			; return PC from JSB routine
	MOVZBL	#MTH$K_SQUROONEG, -(SP)	; condition value
	ASHQ	#15, #1, R0		; R0/R1 = result = reserved operand -0.0
					; R0/R1 goes to signal mechanism vector
					; (CHF$L_MCH_R0/R1) so error handler
					; can modify the result.
	CALLS	#2, G^MTH$$SIGNAL	; signal error and use real user's PC
					; independent of CALL vs JSB
	RSB				; return - R0 restored from CHF$L_MCH_R0/R1

	.END
