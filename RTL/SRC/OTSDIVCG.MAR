	.TITLE	OTS$DIVCG - G COMPLEX*16 / G COMPLEX*16 DIVISION ROUTINE
	.IDENT	/1-001/		; File: OTSDIVCG.MAR

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;
; FACILITY: MATH LIBRARY
;++
; ABSTRACT:
;
;	Perform G COMPLEX*16 division
;
;--
;
; AUTHOR:
;	Steven B. Lionel, 12-July-1979
;
; MODIFIED BY:
;
;
;

	.SBTTL	HISTORY		; Detailed Current Edit History


; Edit History
;

; 1-001 - Adapted from OTS$DIVC version 1-003.  SBL 12-July-1979

	.SBTTL	DECLARATIONS

;
; INCLUDE FILES:
;

;
; EXTERNAL SYMBOLS:
;

;
; MACROS:
;

;
; PSECT DECLARATIONS:
;
	.PSECT _OTS$CODE	PIC, USR, CON, REL, LCL, SHR, -
				EXE, RD, NOWRT, LONG

;
; EQUATED SYMBOLS:
;
	a	= 4			; real part of dividend
	b	= 12			; imag part of dividend
	c	= 20			; real part of divisor
	d	= 28			; imag part of divisor

;
; OWN STORAGE:
;
;	none


	.SBTTL	G COMPLEX*16 / G COMPLEX*16 giving G COMPLEX*16 result

;++
; FUNCTIONAL DESCRIPTION:
;
;	OTS$DIVCG_R3 - G COMPLEX*16 / G COMPLEX*16 giving G COMPLEX*16 result
;
;
;	The COMPLEX*16 result is computed as follows:
;
;	1)  Let (a, b) represent the COMPLEX*16 dividend.
;	2)  Let (c, d) represent the COMPLEX*16 divisor.
;	3)  Let (r, i) represent the COMPLEX*16 quotient.
;
;	Then:
;
;	r = (ac + bd) / (cc + dd)
;	i = (bc - ad) / (cc + dd)
;
; CALLING SEQUENCE:
;
;	Complex_quotient.wgc.w = OTS$DIVCG_R3(dividend.rgc.v, divisor.rgc.v)
;
; INPUT PARAMETERS:
;
;	Dividend and divisor parameters are represented as
;	FORTRAN G COMPLEX*16 numbers anG are CALL BY VALUE.
;	Passing 128 bit quantities by value is a violation
;	of the VAX calling standard, but is excused because
;	this is a code support routine not meant to be
;	callable by users.
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; FUNCTIONAL VALUE:
;
;	The G COMPLEX*16 value returneG is (a, b) / (c, d)
;	in resisters R0-R3!  This is a violation of the VAX
;	calling standard, but is excused because this is
;	a code support routine, not meant to be callable
;	by users.
;
; SIDE EFFECTS:
;
;	Modifies registers R0-R3!
;	SS$_ROPRAND if either argument is a reserved operand.
;	SS$_FLTOVF if floating overflow
;	SS$_FLTDIV if divide by zero
;--

	.ENTRY	OTS$DIVCG_R3, ^M<R4,R5,R6,R7,R8,R9,R10,R11>
	MTH$FLAG_JACKET			; establish math error handler

; Perform scaling of all operands before division
;
	EXTZV	#4, #11, c(AP), R1	; R1 = c(AP)<exp>  0,1,...3777
	EXTZV	#4, #11, d(AP), R0	; R0 = d(AP)<exp>  0,1,...3777
	CMPW	R0, R1			; R0 = MAX (c<exp>, d<exp>)
	BGTR	2$
	MOVW	R1, R0
2$:	MNEGW	R0, R0			; R0 = scaling exponent  0,3777,3776,...,1
	ROTL	#4, R0, R0		; build a floating scale factor
	CLRL	R1
					; scale all operands
	MULG3	R0, c(AP), R8		; R8-R9 gets c
	MULG3	R0, d(AP), R10		; R10-R11 gets d
	MULG3	R0, a(AP), R4		; a
	MULG3	R0, b(AP), R2		; b

	MULG3	R4, R8, R0		; R0 = ac
	MULG3	R2, R10, R6		; R7 = bd
	ADDG2	R6, R0			; R0 = ac+bd
	MULG2	R10, R4			; R4 = ad
	MULG2	R8, R2			; R2 = bc
	SUBG2	R4, R2			; R2 = bc - ad
	MULG2	R8, R8			; R8 = cc
	MULG2	R10, R10		; R10 = dd
	ADDG2	R10, R8			; R8 = cc + dd
	DIVG2	R8, R0			; R0 = (ac+bd) / (cc+dd)
	DIVG2	R8, R2			; R2 = (bc-ad) / (cc+dd)

	RET				; (R0-R1, R2-R3) = (r, i)

	.END
