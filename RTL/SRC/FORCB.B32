MODULE FOR$$CB (				! Push, Pop, Allocate, and deallocate LUB/ISB/RAB
		IDENT = '1-036'		! File: FORCB.B32  Edit: SBL1036
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY: language support library
!
! ABSTRACT:
!
!	This module interfaces to OTS$CCB_DATA from FORTRAN to allocate,
!	deallocate, push and pop the LUB/ISB/RAB data structure, which
!	is central to the I/O system.
!
! ENVIRONMENT: User mode, AST level or not or mixed
!
! AUTHOR:  Thomas N. Hastings, CREATION DATE: 01-June-77
!
! MODIFIED BY:
!
! 	Thomas N. Hastings, 01-June-77: VERSION 01
! [Previous edit history deleted.  SBL 25-Sept-1980]
! 1-001	- Update version number and copyright notice.  JBS 16-NOV-78
! 1-002	- Change LUB$B_LUN to LUB$W_LUN.  JBS 05-DEC-78
! 1-003	- Change REQUIRE file names from FOR... to OTS...  JBS 07-DEC-78
! 1-004	- Include TNH's version, which uses a bit table to provide
!	   AST re-entrancy.  JBS 11-DEC-78
! 1-005	- Remove REQUIRE of OTSMAC; not needed.  JBS 11-DEC-78
! 1-006	- Add FOR$$CB_NEXT, which gets the next LUN for the CLOSE loop
!	   in FOROPEN.B32.  JBS 11-DEC-78
! 1-007	- Fix coding errors in FOR$$CB_NEXT and make OTS$$AA_LUB_TAB
!	   OWN.  JBS 18-DEC-78
! 1-008	- Change file and module name to OTSCB and add specialized
!	   BASIC entry points.  This is in preparation for recursive
!	   I/O.  JBS 29-DEC-78
! 1-009	- Add BAS$$CB_CLEANUP.  JBS 29-DEC-78
! 1-010 - Add recursive I/O for BASIC.  JBS 08-JAN-1979
! 1-011 - Divide into FORCB, BASCB and OTSCCB.  This file, FORCB,
!	   contains the FORTRAN code.  JBS 09-JAN-1979
! 1-012 - Restore FOR$$CB_RET so that the new sharable RTL will remain
!	   compatable with old core images, in which FOR$$ERROR contains
!	   a reference to FOR$$CB_RET.  It will perform the same as
!	   FOR$$CB_POP.  JBS 09-JAN-1979
! 1-013	- Change ISB$B_STTM_STAT to ISB$W_STTM_STAT.  JBS 20-JAN-1979
! 1-014	- Don't clear ISB$W_STTM_STAT -- let OTSCCB do it.  JBS 23-JAN-1979
! 1-015	- Change linkage for OTS$PUSH_CCB to JSB_CB_PUSH and for
!	   OTS$POP_CCB to JSB_CB_POP.  JBS 25-JAN-1979
! 1-016	- Put two dollar signs on non-user entry points.  JBS 26-JAN-1979
! 1-017	- Optimize the usual (non-error) path through FOR$$CB_PUSH.
!	   JBS 05-FEB-1979
! 1-018 - Change OTSCCB.REQ to OTSCCBREQ.REQ so as not to conflict with
!	  OTSCCB.B32 at system build time.  SBL 10-May-1979
! 1-019	- Improve performance by referencing OTS$$CCB's data base directly
!	   in the most common case, instead of calling 	OTS$$PUSH_CCB.
!	   JBS 28-JUN-1979
! 1-020	- Correct an error which caused OTS$$PUSH_CCB to be called
!	   every time.  JBS 29-JUN-1979
! 1-021	- Make sure the LUN is not owned by a foreign language.
!	   JBS 14-JUL-1979
! 1-022	- Fix edit 019 to make us AST-reentrant again.  JBS 26-JUL-1979
! 1-023 - Clear forgotten ISB$V_LAST_REC, forget ISB$V_P_FORM_CH.  SBL 26-July-1979
! 1-024	- Don't ever call OTS$$CCB, make all code local.  The data base
!	   now lives in OTS$$CCB_DATA.  JBS 16-AUG-1979
! 1-025	- Fix a bug in FOR$$NEXT_LUN (deduced by comparison with BAS$$NEXT_LUN, no
!	   symptoms) and improve comments in FOR$$CB_FETCH.  JBS 22-AUG-1979
! 1-026 - Zero ISB$W_FMT_LEN in CB_PUSH to prevent problems later.
!	  SBL 12-Sept-1979
! 1-027 - Add new routine FOR$$FP_MATCH for I/O in progress handling.
!	  SBL 24-Sept-1979
! 1-028 - Don't set RAB$V_UIF here, do it in OPEN only for direct access.
!	  SBL 10-Oct-1979
! 1-029 - Don't clear LUB owner bit for recursive I/O error!  SBL 11-Oct-1979
! 1-030	- Use LUB$A_UBF.  JBS 13-NOV-1979
! 1-031 - Insert RETURNs after SIGNAL_STOPs so that BLISS will
!	  generate shorter code for them.  SBL 27-Nov-1979
! 1-032 - Remove AST reentrancy window by performing IOINPROG interlock before
!	  LUN_OWNR test in FOR$$CB_PUSH.  Replace individual zeroing of ISB
!	  bits with a zero of the word in which they are contained for better
!	  code.  Use a new structure for OTS$$V_LUN_OWNR for smaller code.
!	  SBL 25-Sept-1980
! 1-033 - Include secondary message FOR$_IO_NONFOR when signaling
!	  FOR$K_MIXFILACC.  JAW 29-Aug-1981
! 1-034 - Clear OTS$$V_IOINPROG before signaling FOR$K_MIXFILACC, to
!	  ensure that unit is left in a consistent state.  SPR 11-38566.
!	  JAW 29-Aug-1981
! 1-035 - Replace $DESCRIPTOR in edit 1-033 with UPLIT to keep code PIC.
!	  JAW 31-Aug-1981
! 1-036 - Add missing external declarations.  SBL 2-Dec-1981
!--

!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!

REQUIRE 'RTLIN:OTSLNK';				! Define LINKAGEs

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    FOR$$CB_PUSH : JSB_CB_PUSH NOVALUE,		! Allocate or find  LUB/ISB/RAB - beg of each I/O statment
    ALLOCATE : CALL_CCB NOVALUE,		! Allocate CCB
    FOR$$CB_POP : JSB_CB_POP NOVALUE,		! Pop LUB/ISB/RAB - end of each I/O statement
    DEALLOCATE : CALL_CCB NOVALUE,		! Deallcoate CCB
    FOR$$CB_GET : JSB_CB_GET NOVALUE,		! Get current LUB/ISB/RAB (called by non-shared code only)
    FOR$$CB_FETCH : CALL_CCB NOVALUE,		! Fetch a LUB, or 0
    FOR$$NEXT_LUN : NOVALUE,			! Get next FORTRAN LUN.
    FOR$$FP_MATCH : CALL_CCB NOVALUE;		! Get CCB that matches FP

!+
! Include FOR$$CB_RET as a synonym for FOR$$CB_POP to maintain
! compatability with old versions of FOR$$ERROR.
!-

GLOBAL BIND
    ROUTINE
    FOR$$CB_RET = FOR$$CB_POP : JSB_CB_POP NOVALUE;

!
! INCLUDE FILES:
!

REQUIRE 'RTLML:FORERR';				! FORTRAN error number definitions

REQUIRE 'RTLML:OTSLUB';				! get length of LUB

REQUIRE 'RTLML:OTSISB';				! get offsets in ISB

REQUIRE 'RTLIN:RTLPSECT';			! Define DECLARE_PSECTs macro

REQUIRE 'RTLIN:OTSCCBREQ';			! Define interface to OTS$$PUSH_CCB

LIBRARY 'RTLSTARLE';

REQUIRE 'RTLML:FORMSG';

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
LITERAL
	K_NO_FAO_SIGARG = 3;	! No. of FAO argsin signal arg list
!
! PSECT DECLARATIONS:
!
DECLARE_PSECTS (FOR);				! declare PSECTs for FOR$ facility
!
! GLOBAL STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    FOR$$ERRSNS_SAV : NOVALUE,
    FOR$$SIG_NO_LUB : NOVALUE,			! convert FORTRAN err # to 32-bit code
    						! Pass LUN explicitly since no current LUB.
    						! and call LIB$STOP. should never return
    FOR$$SIG_DATCOR : NOVALUE,			! SIGNAL_STOP OTS$_INTDATCOR (INTERNAL
    						! DATA CORRUPTED IN RUN-TIME LIBRARY)
    						! in FORTRAN environment
    FOR$$SIGNAL_STO : NOVALUE,			! Signal a fatal FORTRAN error
    FOR$$GET_VM,				! Get virtual memory
    FOR$$FREE_VM : NOVALUE,			! Free virtual memory
    LIB$STOP: NOVALUE,				! Signal non-continuable error
    OTS$$FREE_LUN;				! LUN no longer OPEN

!+
! The following externals refer to data structures belonging to
! OTS$$CCB_DATA.  These data structures are shared with OTS$$CCB,
! but the OTS$$V_LUN_OWNR vector prevents conflict.
!-

EXTERNAL
    OTS$$V_LUN_OWNR : OTS$$LUN_OWNR_ST
	[LUB$K_ILUN_MIN, LUB$K_LUN_MAX, BYTE, BYTE]
	VOLATILE FIELD (OTS$$V_OWNR_FLD),	! Lun owner language data
    OTS$$V_CCB_INIT : VOLATILE,			! True if OTS$$CCB's initialization is done
    OTS$$AA_LUB_TAB : VOLATILE OTS$$LUB_TAB_ST 	!
	[-LUB$K_ILUN_MIN + LUB$K_LUN_MAX + 1, LUB$K_ILUN_MIN],	!
    						! Pointers to LUB/ISB/RABs
    OTS$$V_IOINPROG : VOLATILE BITVECTOR,	! True (for a LUN) if it has I/O active
    OTS$$L_CUR_LUN,				! The current logical unit
    OTS$$A_CUR_LUB,				! Address of current LUB
    OTS$$L_LVL_CTR;				! -1 = idle, 0 = 1 I/O in progress


GLOBAL ROUTINE FOR$$CB_PUSH (			! Allocate or find LUB/ISB/RAB - beg of each I/O statement
	LOGICAL_UNIT, 				! Logical unit no. (by-value)
	LUN_MIN)				! Minimum logical unit number (by-value)
    : JSB_CB_PUSH NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	FOR$$CB_PUSH checks for legal logical UNIT number
!	which varyies depending on whether this is OPEN or
!	default open.  If logical_unit already has
!	a LUB/ISB/RAB allocated, only part of the per I/O statement part
!	of LUB/ISB/RAB is cleared, namely just the status bits in ISB.
!	Otherwise virtual memory is allocated for this logical_unit
!	and the entire block is initialized to 0.  Then the allocated address
!	is remembered in OWN table OTS$$A_LUB_TAB indexed by
!	logical_unit.  The RAB is initialized to constants which
!	do not change during execution.
!
!	If an I/O statement on this unit is already in progress, this
!	routine signals an error and does not return.
!
! CALLING SEQUENCE:
!
!	JSB FOR$$CB_PUSH (R2=logical_unit.rl.v, R0=lun_min.rl.v)
!
! FORMAL PARAMETERS:
!
!	LOGICAL_UNIT.rl.v	Value of logical unit for which LUB/ISB/RAB is desired (signed)
!				May be negative for TYPE, ACCEPT, READ, PRINT
!	LUN_MIN.rl.v		Value of minimum legal logical unit number (signed)
!				Since in a register, must be present.
!
! IMPLICIT INPUTS:
!
!	OTS$$AA_LUB_TAB[logical_unit]	Adr. of LUB/ISB/RAB or 0 for
!					this unit
!
! IMPLICIT OUTPUTS:
!
!	CCB				Base pointer set to adr. of LUB/ISB/RAB for logical_unit.
!	OTS$$AA_LUB_TAB[logical_unit]	Adr. of LUB/ISB/RAB for logical_unit
!	LUB$W_LUN			signed logical unit number
!	RAB$B_BID
!	RAB$B_BLN
!	RAB$V_TPT			1
!	RAB$V_RAH			1
!	RAB$V_WBH			1
!	RAB$V_LOC			1
!
! ROUTINE VALUE:
!
!	None
!
! SIDE EFFECTS:
!
!	Allocates virtual memory if needed.
!	SIGNAL_STOPs FOR$_RECIO_OPE (40='RECURSIVE I/O OPERATION') if
!	logical_unit already is in the middle of an I/O statement
!	SIGNAL_STOPs FOR$_INVLOGUNI (32='INVALID LOGICAL UNIT NUMBER')
!	if logical_unit is out of range.
!	SIGNAL_STOPs FOR$_INSVIRMEM (41='INSUFFICIENT VIRTUAL MEMORY')
!	if cannot expand program region if needed.
!--

    BEGIN

    BUILTIN
	TESTBITSS;

    EXTERNAL REGISTER
	CCB : REF BLOCK [, BYTE];

    LOCAL
	PUSH_RESULT;

!+
! Check range of logical_unit.  If out of range,
! SIGNAL_STOP FOR$_INVLOGUNI (32='INVALID LOGICAL UNIT NUMBER")
!-

    IF ((.LOGICAL_UNIT GTR LUB$K_LUN_MAX) OR (.LOGICAL_UNIT LSS .LUN_MIN))
    THEN
	BEGIN
	FOR$$SIG_NO_LUB (FOR$K_INVLOGUNI, .LOGICAL_UNIT);
	RETURN;
	END;

!+
! Test and set IO in progress interlock before doing anything else!
!-

    IF (TESTBITSS (OTS$$V_IOINPROG [.LOGICAL_UNIT - LUB$K_ILUN_MIN]))
    THEN
	BEGIN
	FOR$$SIG_NO_LUB (FOR$K_RECIO_OPE, .LOGICAL_UNIT);
	RETURN;
	END;

!+
! The following assignment generates no code, but it causes BLISS to generate
! optimal code for the remainder of the routine by preventing the CSE
! .LOGICAL_UNIT-LUB$K_ILUN_MIN from being bound to R2.  Thanks, and a tip
! of the keyboard to Steve Hobbs.
!-

    LOGICAL_UNIT = .LOGICAL_UNIT;

!+
! Make sure we own this LUN.
!-
    OTS$$V_LUN_OWNR [.LOGICAL_UNIT, OTS$$V_OWNR_FOR] = 1;

    IF (.OTS$$V_LUN_OWNR [.LOGICAL_UNIT, OTS$$V_OWNR] NEQ OTS$$M_OWNR_FOR)
    THEN
	BEGIN
	OTS$$V_LUN_OWNR [.LOGICAL_UNIT, OTS$$V_OWNR_FOR] = 0;
	OTS$$V_IOINPROG [.LOGICAL_UNIT - LUB$K_ILUN_MIN] = 0;

	!+
	! The following two calls are used in lieu of a call to
	! FOR$$SIG_NO_LUB because the latter does not handle secondary
	! messages.
	!-


	FOR$$ERRSNS_SAV (FOR$K_MIXFILACC,	! small integer form of error code
			0,			! STS (none, since no OPEN yet)
			0,			! STV (none, since no OPEN yet)
			.LOGICAL_UNIT,		! unit
			FOR$_MIXFILACC);	! 32-bit form of error code
	LIB$STOP (FOR$_MIXFILACC,		! primary message id
		  K_NO_FAO_SIGARG,		! no. of FAO args (3)
		  .LOGICAL_UNIT,		! unit
		  UPLIT(0, 0),			! file
		  0,				! user PC
		  FOR$_IO_NONFOR);		! secondary message ID
	RETURN;
	END;

!+
! Allocate a LUB/ISB/RAB if necessary.
!-
    CCB = .OTS$$AA_LUB_TAB [.LOGICAL_UNIT, 0];

    IF ((.CCB EQLA 0) OR (.CCB EQLA OTS$$AA_LUB_TAB [.LOGICAL_UNIT, 0]))
    THEN
	ALLOCATE (.LOGICAL_UNIT)
    ELSE
	BEGIN
!+
! LUB/ISB/RAB already allocated.  Perform sanity check.
!-

	IF ((.CCB [LUB$W_LUN] NEQU .LOGICAL_UNIT) OR (.CCB [RAB$B_BID] NEQU RAB$C_BID))
	THEN
	    FOR$$SIG_DATCOR ();

	IF (TESTBITSS (CCB [LUB$V_IO_ACTIVE]))
	THEN
	    BEGIN
	    FOR$$SIG_NO_LUB (FOR$K_RECIO_OPE, .LOGICAL_UNIT);
	    RETURN;
	    END;

	END;

!+
! Initialize certain ISB fields, to save FOR$$IO_BEG the trouble.
!-
    CCB [ISB$W_STTM_STAT] = 0;
    CCB [ISB$W_FMT_LEN] = 0;
    CCB [ISB$A_USER_FP] = 0;
!+
! Push down the old LUN, if any.
!-
    OTS$$AA_LUB_TAB [.LOGICAL_UNIT, 1] = .OTS$$A_CUR_LUB;
    OTS$$A_CUR_LUB = .CCB;
!+
! Return with register CCB loaded.
!-
    RETURN;
    END;					! End of routine FOR$$CB_PUSH


ROUTINE ALLOCATE (				!
	LOGICAL_UNIT				! LUN to which to allocate the CCB
    ) : CALL_CCB NOVALUE = 			! Allocate LUB/ISB/RAB

!++
! FUNCTIONAL DESCRIPTION:
!
!	Allocate heap storage for the LUB/ISB/RAB.  This is done the first
!	time a logical unit is referenced, and the first time after a CLOSE.
!
! CALLING SEQUENCE:
!
!	ALLOCATE (.LOGICAL_UNIT)
!
! FORMAL PARAMETERS:
!
!	LOGICAL_UNIT.rl.v	LUN to which to allocate the CCB
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS
!
!	OTS$$AA_LUB_TAB [.LOGICAL_UNIT, 0] and CCB are set
!
! SIDE EFFECTS:
!
!	Allocates virtual storage.
!	Signals if virtual storage is exhausted.
!
!--

    BEGIN

    EXTERNAL REGISTER
	CCB : REF BLOCK [, BYTE];

    CCB = FOR$$GET_VM ((ISB$K_ISB_LEN + LUB$K_LUB_LEN + RAB$C_BLN), .LOGICAL_UNIT);
    CH$FILL (0, LUB$K_LUB_LEN + RAB$C_BLN, .CCB + ISB$K_ISB_LEN);
    CCB = .CCB + ISB$K_ISB_LEN + LUB$K_LUB_LEN;
    CCB [LUB$W_LUN] = .LOGICAL_UNIT;
    CCB [LUB$V_IO_ACTIVE] = 1;
    OTS$$AA_LUB_TAB [.LOGICAL_UNIT, 0] = .CCB;
    CCB [RAB$B_BID] = RAB$C_BID;
    CCB [RAB$B_BLN] = RAB$C_BLN;
    CCB [RAB$V_TPT] = 1;
    CCB [RAB$V_RAH] = 1;
    CCB [RAB$V_WBH] = 1;
    CCB [RAB$V_LOC] = 1;
    RETURN;
    END;


GLOBAL ROUTINE FOR$$CB_POP 			! Pop current LUB/ISB/RAB - end of I/O statement
    : JSB_CB_POP NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	FOR$$CB_POP pops the curents LUB/ISB/RAB and restores the
!	previous pushed down LUB/ISB/RAB, if any (usually none).
!	Flags old current LUB/ISB/RAB as no longer having as active I/O statement
!
! CALLING SEQUENCE:
!
!	JSB FOR$$CB_POP ()
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	CCB			Adr. of current LUB/ISB/RAB
!
! IMPLICIT OUTPUTS:
!
!	CCB			Set to 0 (to catch attempt to reference after a pop).
!	LUB$V_IO_ACTIVE		Clear I/O active bit to indicate
!				that this logical unit no longer has
!				an I/O statement in progress
!
! COMPLETION CODES:
! RETURN VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Changes entire I/O system to another logical unit or none at all
!	SIGNAL_STOPs FORTRAN INTERNAL ERROR if CB was not active.
!--

    BEGIN

    BUILTIN
	TESTBITCC;

    EXTERNAL REGISTER
	CCB : REF BLOCK [, BYTE];

    LOCAL
	LOGICAL_UNIT;

    LOGICAL_UNIT = .CCB [LUB$W_LUN];
    OTS$$A_CUR_LUB = .OTS$$AA_LUB_TAB [.LOGICAL_UNIT, 1];
!+
! Flag old current LUB/ISB/RAB as no longer having
! an I/O statement in progress.
! If LUB was not active, then signal OTS$_INTDATCOR (INTERNAL DATA
! CORRUPTED IN RUN-TIME LIBRARY).
!-
!+
! Deallocate run-time format
!-

    IF (.CCB [ISB$W_FMT_LEN] NEQ 0)
    THEN
	BEGIN
	FOR$$FREE_VM (.CCB [ISB$W_FMT_LEN], .CCB [ISB$A_FMT_BEG]);
	CCB [ISB$W_FMT_LEN] = 0;
	CCB [ISB$A_FMT_BEG] = 0;
	END;

    IF (.CCB [LUB$V_DEALLOC])
    THEN
	DEALLOCATE (.LOGICAL_UNIT)
    ELSE
	BEGIN

	IF (TESTBITCC (CCB [LUB$V_IO_ACTIVE]))
	THEN
	    BEGIN
	    FOR$$SIG_DATCOR ();
	    RETURN;
	    END;

	IF (TESTBITCC (OTS$$V_IOINPROG [.LOGICAL_UNIT - LUB$K_ILUN_MIN]))
	THEN
	    BEGIN
	    FOR$$SIG_DATCOR ();
	    RETURN;
	    END;

	END;

    CCB = 0;
    RETURN;
    END;					! End of FOR$$CB_POP routine


ROUTINE DEALLOCATE (				! Deallocate a CCB
	LOGICAL_UNIT				! The LUN on which to deallocate
    ) : CALL_CCB NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Release the heap storage associated with a CCB.  This is done after
!	a CLOSE.
!
! CALLING SEQUENCE:
!
!	DEALLOCATE (.LOGICAL_UNIT)
!
! FORMAL PARAMETERS:
!
!	LOGICAL_UNIT.rl.v	The LUN for which to deallocate the CCB
!
! IMPLICIT INPUTS:
!
!	Several fields of the LUB
!
! IMPLICIT OUTPUTS:
!
!	OTS$$A_LUB_TAB [.LOGICAL_UNIT] is cleared
!
! SIDE EFFECTS:
!
!	Deallocates heap storage
!
!--

    BEGIN

    BUILTIN
	TESTBITCC;

    EXTERNAL REGISTER
	CCB : REF BLOCK [, BYTE];

    IF (( NOT .CCB [LUB$V_USER_RBUF]) AND (.CCB [LUB$A_UBF] NEQA 0))
    THEN
	FOR$$FREE_VM (.CCB [LUB$W_RBUF_SIZE], .CCB [LUB$A_UBF]);

    IF (.CCB [LUB$V_VIRT_RSN]) THEN FOR$$FREE_VM (.CCB [LUB$B_RSL], .CCB [LUB$A_RSN]);

    FOR$$FREE_VM ((ISB$K_ISB_LEN + LUB$K_LUB_LEN + RAB$C_BLN), .CCB - (ISB$K_ISB_LEN + LUB$K_LUB_LEN));
    OTS$$AA_LUB_TAB [.LOGICAL_UNIT, 0] = OTS$$AA_LUB_TAB [.LOGICAL_UNIT, 0];
    OTS$$AA_LUB_TAB [.LOGICAL_UNIT, 1] = OTS$$AA_LUB_TAB [.LOGICAL_UNIT, 0];

    IF (TESTBITCC (OTS$$V_IOINPROG [.LOGICAL_UNIT - LUB$K_ILUN_MIN]))
    THEN
	BEGIN
	FOR$$SIG_DATCOR ();
	RETURN;
	END;

    IF (.LOGICAL_UNIT GEQ 0)
    THEN

	IF ( NOT OTS$$FREE_LUN (LOGICAL_UNIT))
	THEN
	    BEGIN
	    FOR$$SIG_DATCOR ();
	    RETURN;
	    END;

    OTS$$V_LUN_OWNR [.LOGICAL_UNIT, OTS$$V_OWNR_FOR] = 0;
    RETURN;
    END;


GLOBAL ROUTINE FOR$$CB_GET 			! GET current LUB/ISB/RAB - called only from non-shared code
    : JSB_CB_GET NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	FOR$$CB_GET gets the curents LUB/ISB/RAB.
!	This routine is only called from non-shared procedures which
!	can't access OTS$$A_CUR_LUB directly.  (Entry vectors for
!	data would mean that the code would have to change when the
!	decision to make a module shared or non-shared is changed.
!	Unless the LINKER got smarter and changed the level of indirection
!	on data references which were vectored.)
!
! CALLING SEQUENCE:
!
!	JSB FOR$$CB_GET ()
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	OTS$$A_CUR_LUB		Adr. of current LUB/ISB/RAB
!
! IMPLICIT OUTPUTS:
!
!	CCB			Set to adr. of current LUB/ISB/RAB.
!
! COMPLETION CODES:
! RETURN VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!--

    BEGIN

    EXTERNAL REGISTER
	CCB : REF BLOCK [, BYTE];

    CCB = .OTS$$A_CUR_LUB;
    RETURN
    END;					! End of FOR$$CB_GET routine


GLOBAL ROUTINE FOR$$CB_FETCH (			! Fetch a LUB, or 0
	LUN					! LUN of the LUB
    ) : CALL_CCB NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	FOR$$CB_FETCH allows FOR$$CLOSE_ALL to "peek" at a LUB before deciding
!	how to close it.  If there is I/O active on the unit (as indicated by
!	LUB$V_IO_ACTIVE) then the unit cannot be pushed (that is, FOR$$CB_PUSH
!	cannot be called) because FORTRAN does not allow recursive I/O.
!	This means that the RMS CLOSE has to be done without pushing the LUB,
!	which means that ASTs must be off.  To be sure that the LUB does not
!	get deallocated while the decision is being made, ASTs must be turned
!	off before this routine is called, and not turned on until the value
!	of register CCB that it returns is no longer needed.  For more details,
!	see FOR$$CLOSE_ALL.
!
! CALLING SEQUENCE:
!
!	CALL FOR$$CB_FETCH (LUN)
!
! FORMAL PARAMETERS:
!
!	LUN.rl.v		Logical Unit Number at which to "peek"
!
! IMPLICIT INPUTS:
!
!	OTS$$V_LUN_OWNR		Table of LUN owners
!	OTS$$AA_LUB_TAB		Table of pointers to LUBs
!
! IMPLICIT OUTPUTS:
!
!	CCB			This register is set to 0 if the LUN is not owned by FORTRAN
!				or is not allocated, or to the address of the LUB/ISB/RAB
!				otherwise.
!
! RETURN VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!--

    BEGIN

    EXTERNAL REGISTER
	CCB : REF BLOCK [, BYTE];

    IF ((.LUN GTR LUB$K_LUN_MAX) OR (.LUN LSS LUB$K_ILUN_MIN)) THEN FOR$$SIG_NO_LUB (FOR$K_INVLOGUNI, .LUN);

    IF ( NOT .OTS$$V_LUN_OWNR [.LUN, OTS$$V_OWNR_FOR])
    THEN
	BEGIN
	CCB = 0;
	RETURN;
	END;

    CCB = .OTS$$AA_LUB_TAB [.LUN, 0];

    IF (.CCB EQLA OTS$$AA_LUB_TAB [.LUN, 0]) THEN CCB = 0;

    RETURN;
    END;					! of routine FOR$$CB_FETCH


GLOBAL ROUTINE FOR$$NEXT_LUN (			! Get next LUN which might be open
	FLAG, 					! First-time and last-time flag
	LUN					! Logical Unit Number
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	FOR$$NEXT_LUN gets a LUN which might be open.  It is used by
!	the exit handler declared by FORTRAN OPEN, which must look
!	through all the LUNs and do the DELETE or PRINT handling by
!	calling CLOSE.  (RMS close won't do DELETE or PRINT handling.)
!	This routine scans the table of LUB pointers and returns those
!	which are non-zero.  The caller must use CB_PUSH and CB_POP
!	to obtain control of the LUB.
!
! CALLING SEQUENCE:
!
!	CALL FOR$$NEXT_LUN (FLAG, LUN)
!
! FORMAL PARAMETERS:
!
!	FLAG.mv.r		If 0 on entry, this is the first call
!				and LUN is invalid.  If 1 on entry, LUN
!				is the last LUN processed.  On exit, 0
!				means that there are no more LUNs, and 1
!				means that LUN contains the Logical Unit
!				Number to process.
!	LUN.ml.r		Logical Unit Number, as described above.
!
! IMPLICIT INPUTS:
!
!	OTS$$V_LUN_OWNR		Table of LUN owners
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION CODES:
! RETURN VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!--

    BEGIN
!+
! If this is the first entry, arrange to return the first logical
! unit.
!-

    IF ( NOT ..FLAG)
    THEN
	BEGIN
	(.FLAG)<0, 1> = 1;
	.LUN = LUB$K_ILUN_MIN;
	END
    ELSE
	BEGIN
	.LUN = ..LUN + 1;

	IF (..LUN GTR LUB$K_LUN_MAX)
	THEN
	    BEGIN
	    (.FLAG)<0, 1> = 0;
	    RETURN;
	    END;

	END;

!+
! Now that LUN is valid, search the table of LUBs for one which is
! allocated.  The caller is obliged to check to see if it is open.
!-

    UNTIL (.OTS$$V_LUN_OWNR [..LUN, OTS$$V_OWNR_FOR]) DO
!+
! We wish to skip over this LUB, but we have to return with FLAG false
! if we have exhausted the table.
!-

	IF (..LUN EQL LUB$K_LUN_MAX)
	THEN
	    BEGIN
	    (.FLAG)<0, 1> = 0;
	    RETURN;
	    END
	ELSE
	    .LUN = ..LUN + 1;

!+
! Since we have fallen out of the UNTIL without returning, we must have
! a good LUN.  Return it.
!-
    RETURN;
    END;					! End of FOR$$NEXT_LUN routine


GLOBAL ROUTINE FOR$$FP_MATCH (			! Find current incarnation
	SIG_FP					! of ISB that has SIG_FP
    ) : CALL_CCB NOVALUE = 			! in ISB$A_USER_FP

!++
! FUNCTIONAL DESCRIPTION:
!
!	FOR$$FP_MATCH is part of the I/O in progress handling scheme.
!	It is called with one argument, the value of the frane pointer
!	desired.  It looks through the current ISB chain until it finds
!	an ISB that has the desired FP in ISB$A_USER_FP.  This means that
!	that ISB was the one in effect when the I/O in progress handler
!	was established.  If it finds one, external register CCB is set
!	to the CCB of that ISB.  If no match is found, there is something
!	seriously wrong in the database so error OTS$_INTDATCOR is
!	signalled.
!
! CALLING SEQUENCE:
!
!	CALL FOR$$FP_MATCH (SIG_FP)
!
! FORMAL PARAMETERS:
!
!	SIG_FP.rl.v		The FP present in the signal mechanism
!				list when the I/O in progress handler
!				was signalled.  This value is searched for
!				in the current ISB chain.
!
! IMPLICIT INPUTS:
!
!	OTS$$V_LUN_OWNR		Table of LUN owners.  Only LUN's owned
!				by FORTRAN are looked at.
!	OTS$$AA_LUB_TAB		Table of pointers to LUBs.
!	OTS$$A_CUR_LUB		Address of current LUB.
!
! IMPLICIT OUTPUTS:
!
!	CCB			This register is set to the address of the
!				ISB/LUB/RAB block that has SIG_FP in its
!				ISB$A_USER_FP.
!
! RETURN VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Signals OTS$_INTDATCOR (Internal data corrupted in Run-Time Library)
!	if no ISB is found that matches SIG_FP.
!--

    BEGIN

    EXTERNAL REGISTER
	CCB : REF BLOCK [, BYTE];

    LOCAL
	LOGICAL_UNIT;				! Logical unit number of current LUB

    !+
    ! Get current LUB
    !-

    CCB = .OTS$$A_CUR_LUB;

    !+
    ! Search through ISB chain to find matching FP
    !-

    WHILE .CCB NEQ 0 DO
	BEGIN
	LOGICAL_UNIT = .CCB [LUB$W_LUN];

	IF .OTS$$V_LUN_OWNR [.LOGICAL_UNIT, OTS$$V_OWNR_FOR] AND .CCB [ISB$A_USER_FP] EQL
	    .SIG_FP
	THEN
	    RETURN;

	CCB = .OTS$$AA_LUB_TAB [.LOGICAL_UNIT, 1];
	END;

    !+
    ! If we get here, then there must not have been a match.
    ! This should never happen, therefore signal an error.
    !-

    FOR$$SIG_DATCOR ();
    RETURN;
    END;

END						! End of module FOR$$CB

ELUDOM
