	.TITLE	BAS$EDIT 
	.IDENT	/1-007/			; File: BASEDIT.MAR

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY: BASIC code support
;
; ABSTRACT:
;
;	This module implements the BASIC-PLUS-2 EDIT$ function.
;
; ENVIRONMENT: User Mode, AST Reentrant
;
;--
; AUTHOR: R. WILL, CREATION DATE: 2-May-79
;
; MODIFIED BY:
;
; R. Will, : VERSION 1
; 1-001	- Original 
; 1-002 - Fix order of source and dest strs in TRM. RW 16-May-79
; 1-003 - Enable IV in entry masks.  RW 23-May-79
; 1-004	- Change calls to STR$COPY.  JBS 16-JUL-1979
; 1-005 - Make PIC.  RW  13-Sept-79
; 1-006 - String cleanup, call STR$TRM.  RW  31-Oct-79
; 1-007 - Remove BASTRM.  RW  13-NOV-79

	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;

	$DSCDEF					; Define descriptor offsets

;
; EXTERNAL DECLARATIONS:
;
	.DSABL	GBL				; Prevent undeclared
						; symbols from being
						; automatically global.

	.EXTRN	STR$COPY_DX_R8			; copy input string to temp
						; and temp string to output
	.EXTRN	STR$COPY_R_R8			; copy temp str to dest str
	.EXTRN	STR$FREE1_DX			; deallocate temp string
	.EXTRN	STR$TRIM			; routine to trim blanks and tabs

;
; MACROS:
;

;+
; Macro to generate tables to translate ASCII characters.  This macro
; will generate a table of bytes starting at the designated character
; for the series of characters needed.
;-

	.MACRO	GEN_TRANS_TABLE, NUMBER_OF_CHARS, STARTING_CHAR
	I = STARTING_CHAR
	.REPT	NUMBER_OF_CHARS
	.BYTE	I
	I = I + 1
	.ENDR
	.ENDM

;
; EQUATED SYMBOLS:
;

	blank		= ^A/ /
	space_or_tab	= ^X0001
	junk_byte	= ^X0002
	quote		= ^X0004
	space_tab_junk	= ^X0003

	trim_parity_bit = 0
	disc_sp_tab_bit = 1
	disc_junk_bit	= 2
	disc_lead_bit	= 3
	compact_bit	= 4
	upper_case_bit	= 5
	parens_bit	= 6
	disc_trail_bit	= 7
	ignor_quote_bit	= 8

;
; OWN STORAGE:
;

;
; PSECT DECLARATIONS:
;
	.PSECT _BAS$CODE PIC, USR, CON, REL, LCL, SHR, -
			EXE, RD, NOWRT, LONG


	.SBTTL	BAS$EDIT	  - Perform BASIC EDIT$ function
;++
; FUNCTIONAL DESCRIPTION:
;
;	This routine implements the BASIC-PLUS-2 EDIT$ function.
;	for AST re-entrancy, the routine will create a local dynamic string
;	descriptor and call STR$COPY to copy the source string to the local.
;	The routine will then use the local string (which will not need to get
;	larger) to do all the editing necessary (since source and destination
;	strings may overlap for the VAX character instructions.  After the all
;	the editing is finished, the routine will call STR$COPY to copy the
;	edited string to the destination string.
;
; CALLING SEQUENCE:
;
;	CALL dest_string.wx.dx = BAS$EDIT (src_string.rx.dx, mask.rwu.v)
;
; INPUT PARAMETERS:
;
	src_string = 8
	mask = 12
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
	dest_string = 4
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; FUNCTION VALUE:
; COMPLETION CODES:
;
;	NONE
;
; SIDE EFFECTS:
;
;	This routine calls STR$COPY and so may have any of its side effects or
;	signal any of its errors.  This includes allocating and deallocating
;	dynamic string space, and write locking strings for a short time.
;
;--

	.ENTRY BAS$EDIT, ^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,IV>

;+
; Create a local descriptor and copy the input string to it using STR$COPY
;-

	MOVL	src_string(AP), R1		; pointer to src string
	CLRL	-(SP)				; address of local string
	PUSHL	#<<DSC$K_CLASS_D @ 24> ! <DSC$K_DTYPE_T @ 16>>
						; fill type, class and length
	MOVL	SP, R0				; R0 points to local descriptr
	JSB	STR$COPY_DX_R8			; copy string to local

	CVTWL	DSC$W_LENGTH(SP), R6		; get local string length
	MOVL	DSC$A_POINTER(SP), R7		; get local string address

	CVTWL	mask(AP), R8			; Put mask into R8

;+
; if bit 0 set trim the parity (high) bit from all characters
; otherwise go check bit 3.  In any case clear bit 0 in the copy.
;-

	BBCC	#trim_parity_bit, R8, DISCARD_LEADING ; clear the trim_par bit
	MOVTC	R6, (R7), #blank, PARITY_TAB, R6, (R7) ; translate into self

;+
; if bit 3 set, discard leading tabs and spaces, otherwise go check bit 8.
; In any case clear bit 3 in the copy.
;-

DISCARD_LEADING:
	BBCC	#disc_lead_bit, R8, CHECK_QUOTE_BIT ; clear discard leading
						; find 1st non tab or space
	SPANC	R6, (R7), SCAN_SPAN_TABLE, #space_or_tab
	MOVQ	R0, R6				; new length & addr in R6 & R7

;+
; Check if all editing has been completed (local mask is clear).  Else
; check if we must leave unchanged characters between quotes (or after a first
; quote).  Divide algorithm based on it (bit 8).
;-

CHECK_QUOTE_BIT:
	TSTW	R8				; is all editing finished?
	BEQLU	RETURN				; yes, exit
	BBS	#ignor_quote_bit, R8, INIT_QUOTE_LOOP

;+
; Use remainder of bits to edit the entire string. Note that R6 and R7
; are set to length and address from above (for EDIT$$SUBSTRING)
;-

	JSB	EDIT$$SUBSTRING
	BBC	#disc_trail_bit, R8, RETURN	; trim bit not set, return

TRIM_AND_RETURN:
	MOVL	R7, -(SP)			; create descriptor on stack
						; for processed string
	XORL3	#<<DSC$K_CLASS_S @ 24> ! <DSC$K_DTYPE_T @ 16>>, R6, -(SP)
	MOVL	SP, -(SP)			; source string for trim
	PUSHAQ	@dest_string(AP)		; dest string for trim
	CALLS	#2, STR$TRIM
	CLRQ	(SP)+				; clean processed string desc
						; off of stack
	BRB	RET2

RETURN:
	MOVL	dest_string(AP), R0		; destination string
	MOVQ	R6, R1				; source str by ref for copy
	JSB	STR$COPY_R_R8			; copy edited to dest
RET2:	MOVL	SP, -(SP)			; address of temp str descr
	CALLS	#1, STR$FREE1_DX		; deallocate temp string
	CLRQ	(SP)+				; pop temp descrptr from stack
	RET

;+
; Bit 8 is set, so remaining bits do not alter any characters after a
; quote and before a matching quote or the end of the string.
; Scan for quotes and pass unquoted substrings to routine to do editing
; for remaining bits.
;-

INIT_QUOTE_LOOP:
	MOVL	R7, -(SP)			; save start of string
	CLRL	-(SP)				; space to accumulate edited
						; string length

IGNORE_QUOTED:
	SCANC	R6, (R7), SCAN_SPAN_TABLE, #quote ; find address of quote
	MOVQ	R0, R9				; save # remaining bytes
						; save ptr to remaining string
	SUBL	R9, R6				; length of scanned string
	JSB	EDIT$$SUBSTRING			; go edit scanned string
						; on return, R6 & R7 describe
						; edited substring
	ADDL2	R6, (SP)			; head of scannedstring still
						; abuts processed string, add
						; edited scanned
						; string len to processed len
	TSTL	R9				; was end of string found?
	BEQLU	END_STR_UNQUOTE			; yes, go clean up
	MOVC3	R9, (R10), (R6)[R7]		; make remaining string abut 
						; processed string
	ADDL3	R6, R7, R10			; remaining string has been
						;  moved, point R10 to it
	DECL	R9				; len of remaining str - quote
	LOCC	(R10)+, R9, (R10)		; pick up quote character and
						; move R10 past it to find the
						; matching quote by
						; looking in remaining string,
						; for len of remaining string
	DECL	R0				; subtract quote from remainng
	BLEQU	END_STR_INQUOTE			; quote not found, or quote is
						; last character
	INCL	R1				; point past quote to remainng
	MOVQ	R0, R6				; reset R6 & R7 to current str
	SUBL2	R0, R9				; compute len from 1st quote
						; thru 2nd quote
	INCL	R9				; add 1 for 1st quote
	ADDL2	R9, (SP)			; accumulate processed length
						; by length between (and
						; including) quotes
	BRB	IGNORE_QUOTED			; continue processing remainng

END_STR_INQUOTE:				; string ended inside quotes
	INCL	R9				; include 1st quote
	ADDL3	R9, (SP)+, R6			; update length of processed
						; string by remaining length
						; (quoted length) and reset R6
	MOVL	(SP)+, R7			; get processed pointer
	BRB	RETURN

END_STR_UNQUOTE:
	MOVQ	(SP)+, R6			; restore R6 & R7 to processed
						; string
	BBC	#disc_trail_bit, R8, RETURN	; no more editing, return
	BRW	TRIM_AND_RETURN


EDIT$$SUBSTRING:
	CLRL	R11				; mask for SCAN_SPAN loop
	BBC	#disc_sp_tab_bit, R8, DISCARD_JUNK ; don't discard spaces and
						; tabs, try junk
	MOVL	#space_or_tab, R11		; discard spaces and tabs
DISCARD_JUNK:
	BBC	#disc_junk_bit, R8, SCAN_SPAN_LOOP ; don't discard junk bytes
	XORL2	#junk_byte, R11			; also discard junk bytes
SCAN_SPAN_LOOP:
	TSTL	R11
	BEQLU	COMPACT_SPACE			; no deletes, go to next bit
	MOVQ	R6, R0				; initial values for remaining
1$:	SCANC	R0, (R1), SCAN_SPAN_TABLE, R11	; look for delete character
	TSTL	R0				; end of string?
	BEQLU	COMPACT_SPACE			; no deletes, next bit
	SUBL2	R0, R6				; save length scanned
	MOVL	R1, R4				; save ptr to end of scanned
	SPANC	R0, (R1), SCAN_SPAN_TABLE, R11	; skip over delete characters
	TSTL	R0				; end of string?
	BEQLU	COMPACT_SPACE			; rest are deleted, next bit
	ADDL2	R0, R6				; add length not deleted
	MOVL	R4, -(SP)			; save remaining pointer
	MOVL	R0, -(SP)			; save remaining length
	MOVC3	R0, (R1), (R4)			; overwrite deleted portion
	MOVQ	(SP)+, R0			; restore remaining len & ptr
	BRB	1$				; continue deleting

COMPACT_SPACE:
	;\clear bit 4 if bit 1 set\
	BBC	#compact_bit, R8, CHECK_UPCASE
	MOVQ	R6, R0				; init R0 & R1 for scan
1$:	SCANC	R0, (R1), SCAN_SPAN_TABLE, #space_or_tab ; look for space
	TSTL	R0				; end of string?
	BEQLU	CHECK_UPCASE			; no space, next bit
	SUBL2	R0, R6				; save length scanned
	MOVL	R1, R4				; save ptr to end of scanned
	SPANC	R0, (R1), SCAN_SPAN_TABLE, #space_or_tab ; skip spaces & tabs
	MOVB	#blank, (R4)+			; put 1 blank in string
	INCL	R6				; len=len+1, added 1 space
	TSTL	R0				; end of string?
	BEQLU	CHECK_UPCASE			; rest are compacted, next bit
	ADDL2	R0, R6				; add length not compacted
	MOVL	R4, -(SP)			; save remaining pointer
	MOVL	R0, -(SP)			; save remaining length
	MOVC3	R0, (R1), (R4)		; overwrite compacted portion
	MOVQ	(SP)+, R0			; restore remaining len & ptr
	BRB	1$				; continue compacting

CHECK_UPCASE:
	BBC	#upper_case_bit, R8, CHECK_PARENS ; do not upcase, next bit
	BBC	#parens_bit, R8, ONLY_UPCASE	; upcase set, parens clear
	MOVAB	UPCASE_PAREN, R3		; upcase set, parens set
	BRB	TRANSLATE			; go translate both

ONLY_UPCASE:
	MOVAB	UPCASE_TAB, R3			; upcase set, parens clear
	BRB	TRANSLATE			; go upcase

CHECK_PARENS:
	BBC	#parens_bit, R8, END_EDIT_SUB	; upcase clear, parens clear
	MOVAB	SQBRAK_TO_PAREN, R3		; upcase clear, parens set

TRANSLATE:
	MOVTC	R6, (R7), #blank, (R3), R6, (R7) ; translate string into
						; self using table stored in
						; R3 by above code

END_EDIT_SUB:
	RSB

						; End of BAS$EDIT

;+
; The following tables are used for the SPANC, SCANC, and MOVTC instructions
; used in the BAS$EDIT routine
;-


;+
; Table used to 'remove parity bit' from all characters in the character
; string.  Used to ensure that the high bit is clear on all characters.
;-

PARITY_TAB:
	GEN_TRANS_TABLE	128, 0		; fill ASCII character set
	GEN_TRANS_TABLE	128, 0		; truncate hi bit

;+
; Table used to translate lower case to uppercase.  Translate rest of
; ASCII character set to self.
;-

UPCASE_TAB:
	GEN_TRANS_TABLE	97, 0		; fill table to start of lowercase
	GEN_TRANS_TABLE	26, 65		; translate lower to upper
	GEN_TRANS_TABLE	133, 123	; finish table, translate to self

SQBRAK_TO_PAREN:
	GEN_TRANS_TABLE	91, 0		; translate to self
	.BYTE		40		; translate [ to (
	.BYTE		92		; translate to self
	.BYTE		41		; translate ] to )
	GEN_TRANS_TABLE	162, 94		; translate remainder to self

UPCASE_PAREN:
	GEN_TRANS_TABLE	91, 0		; translate to self
	.BYTE		40		; translate [ to (
	.BYTE		92		; translate to self
	.BYTE		41		; translate ] to )
	GEN_TRANS_TABLE	3, 94		; translate to self
	GEN_TRANS_TABLE	26, 65		; translate lower to upper
	GEN_TRANS_TABLE	133, 123	; finish table, translate to self

SCAN_SPAN_TABLE:
	.BYTE		junk_byte	; NUL
	.BYTE		0[8]		; skip over
	.BYTE		space_or_tab	; tab
	.BYTE		junk_byte	; LF
	.BYTE		0		; skip over
	.BYTE		junk_byte[2]	; FF and CR
	.BYTE		0[13]		; skip over
	.BYTE		junk_byte	; ESC
	.BYTE		0[4]		; skip over
	.BYTE		space_or_tab	; space
	.BYTE		0		; skip over
	.BYTE		quote		; double quote
	.BYTE		0[4]		; skip over
	.BYTE		quote		; single quote
	.BYTE		0[87]		; skip over
	.BYTE		junk_byte	; DEL
	.BYTE		0[128]		; skip over
	.END
