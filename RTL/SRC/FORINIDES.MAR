	.TITLE	FOR$INI_DES	; FORTRAN array descriptor initialization
	.IDENT	/1-021/		; File: FORINIDES.MAR  Edit: SBL1021

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
; FACILITY: FORTRAN support library
;
; ABSTRACT:
;
;	FORTRAN support routines to initialize variable
;	dimensioned array descriptors at FORTRAN procedure entry time.
;	For speed the important special cases of 1 and 2 dimensions
;	are provided for as separate routines.
;
; ENVIRONMENT:	Any access mode--usually user mode, AST re-entrant
;
; AUTHOR:	Thomas N. Hastings, CREATION DATE: 1-Apr-77
;
; MODIFIED BY:
;	Thomas N. Hastings, 2-Apr-77: VERSION 01
; 01	- original version
; 01-15	- Call LIB$STOP directly.  TNH 20-Dec-77
; 1-016	- Update copyright notice.  JBS 16-NOV-78
; 1-017	- Remove FOR__ADJARRDIM - not needed.  JBS 16-DEC-78
; 1-018	- Add "_" to the PSECT directives.  JBS 22-DEC-78
; 1-019 - Error FOR$_ADJARRDIM now becomes continuable.  SBL 25-May-1979
; 1-020 - Add index multiply for datatype DC (D COMPLEX*16).   The compiler
;	  doesn't use octaword context addressing for DC, but can for GC.
;	  SBL 6-July-1979
; 1-021 - Use general mode addressing.  SBL 30-Nov-1981
;--

	.SBTTL	DECLARATIONS

;
; INCLUDE FILES:
;
;
; EXTERNAL SYMBOLS:
;
	.DSABL	GBL			; Declare all externals
	.EXTRN	FOR$_ADJARRDIM		; 32-bit condition value for signal
	.EXTRN	LIB$SIGNAL		; SIGNAL error

;
; MACROS:
;
	$DSCDEF			; define string descriptor symbols
;
; EQUATED SYMBOLS:
;

	DSC$L_LOW_INDX = DSC$W_LENGTH-8	; place to store lowest index
					; for use by FORTRAN with INDEX instr.
	DSC$L_HIGH_INDX = DSC$L_LOW_INDX+4 ; place to store highest index
					; for use by FORTRAN with INDEX instr.
; Note: the above are defined here, rather than in SRMDEF, since
; they are not part of the calling standard between modules.
; They are only a convention between the Common OTS and a single
; FORTRAN module.

;
; OWN STORAGE:
;
;	none
;
;
; PSECT DECLARATIONS:
;

	.PSECT	_FOR$CODE PIC,SHR,LONG,EXE,NOWRT
					; program section for FOR$ code



 ;    C.10.5  Array Descriptor (DSC$K_CLASS_A) 
  
 ;  An array descriptor consists of 3 contiguous blocks. The first block 
 ;  contains  the  descriptor  prototype  information and is part of every 
 ;  array descriptor.  The second and third blocks are optional.   If  the 
 ;  third block is present then so is the second. 
  
 ;    A complete array descriptor has the form: 
  
 ;       +-------+-------+---------------+ 
 ;       |   4   | DTYPE |    LENGTH     |  :Descriptor 
 ;       +-------+-------+---------------+ 
 ;       |            POINTER            | 
 ;       +-------+-------+---------------+ 
 ;       | DIMCT | AFLAGS|   Reserved    |          Block 1 - Prototype 
 ;       +-------+-------+---------------+ 
 ;       |            ARSIZE             | 
 ;       +-------------------------------+ 
 ; 
 ;       +-------------------------------+ 
 ;       |              A0               | 
 ;       +-------------------------------+ 
 ;       |              M1               | 
 ;       +-------------------------------+ 
 ;       |              ...              |          Block 2 - Multipliers 
 ;       +-------------------------------+ 
 ;       |            M(n-1)             | 
 ;       +-------------------------------+ 
 ;       |              Mn               | 
 ;       +-------------------------------+ 
 ; 
 ;       +-------------------------------+ 
 ;       |              L1               | 
 ;       +-------------------------------+ 
 ;       |              U1               | 
 ;       +-------------------------------+ 
 ;       |              ...              |          Block 3 - Bounds 
 ;       +-------------------------------+ 
 ;       |              Ln               | 
 ;       +-------------------------------+ 
 ;       |              Un               | 
 ;       +-------------------------------+ 
 ; 
 ; 
;
; PSECT DECLARATIONS:
;

	.PSECT	_FOR$CODE PIC,SHR,LONG,EXE,NOWRT
					; program section for FOR$ code


	.SBTTL	FOR$INI_DES1_R2		! One dimension array desc. init. 

;++
; FUNCTIONAL DESCRIPTION:
;
;	Initialize one-dimension array descriptor entries based on the lower
;	and upper subscripts limits.  The LOW_INDX and HIGH_INDX
;	entries are FORTRAN specific for in-line subscript checking
;	using the INDEX instruction and are outside the standardized
;	array descriptor paased between modules.
;
; CALLING SEQUENCE:
;
;	MOVA	address_of_descriptor, R0
;	JSB	FOR$INI_DES1_R2
;
; INPUT PARAMETERS:
;
;	R0 = address of array descriptor
;
; IMPLICIT INPUTS:
;
;	length of each data element - LENGTH
;	data type of each element - DTYPE
;	address of first allocated entry - POINTER
;	lower subscript limit - L1
;	upper subscript limit - U1
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	multiplier - M1
;	array size in bytes - ARSIZE
;	highest linear index - HIGH_INDX
;	lowest linear index - LOW_INDX
;	address of A(0) - A0
;
; COMPLETION CODES:
;
;	NONE
;
; SIDE EFFECTS:
;
;	NONE
;
;--


; Register usage:
;
;	R0 = address of descriptor
;	R1 = length of data element in bytes (if string, length of string)
;	R2 = lower limit on subscript

	L_L1 = DSC$L_M1+4		; lower limit (L1) for one-dim
	L_U1 = L_L1+4			; upper limit (U1) for one-dim


FOR$INI_DES1_R2::
	MOVZWL	DSC$W_LENGTH(R0), R1	; R1 = length of data element

	SUBL3	L_L1(R0), L_U1(R0), R2	; R2 = U1 - L1
	INCL	R2			; R2 = M1 = U1 - L1 + 1
	BLEQ	ERROR			; error if 0 or negative
	MOVL	R2, DSC$L_M1(R0)	; store M1

	MULL3	R2, R1, DSC$L_ARSIZE(R0) ; store array size in bytes 


	MOVQ	L_L1(R0), DSC$L_LOW_INDX(R0)	; store low and high linear index
					; i.e., L1 and U1

	MULL3	R1, L_L1(R0), R2		; R2 = low * length
	SUBL3	R2, DSC$A_POINTER(R0), DSC$A_A0(R0) ; A0 = POINTER - low * length

	CMPB	DSC$B_DTYPE(R0), #DSC$K_DTYPE_T	; is this CHARACTER?
	BEQL	10$			; branch if yes
	CMPB	DSC$B_DTYPE(R0), #DSC$K_DTYPE_DC ; is this D Complex?
	BEQL	10$			; branch if yes
	RSB				; return if not

10$:	MOVL	R2, DSC$L_LOW_INDX(R0)	; store scaled low index by length
	MULL	R1, DSC$L_HIGH_INDX(R0)	; scale high index by length
	RSB				; return

;+
; Here on dimensioning error.
; SIGNAL error FOR$_ADJARRDIM (93='ADJUSTABLE ARRAY DIMENSION ERROR')
;-

ERROR:	PUSHL	#FOR$_ADJARRDIM		; FORTRAN error #
	CALLS	#1, G^LIB$SIGNAL	; SIGNAL error
	RSB				; In case it comes back


	.SBTTL	FOR$INI_DES2_R3		! Two dimension array desc. init. 

;++
; FUNCTIONAL DESCRIPTION:
;
;	Initialize two-dimension array descriptor entries based on the lower
;	and upper subscripts limits and the address of the
;	first allocated entry.  The LOW_INDX and HIGH_INDX
;	entries are FORTRAN specific for in-line subscript checking
;	using the INDEX instruction and are outside the standardized
;	array descriptor paased between modules.
;
; CALLING SEQUENCE:
;
;	MOVA	address_of_descriptor, R0
;	JSB	FOR$INI_DES2_R3
;
; INPUT PARAMETERS:
;
;	R0 = address of array descriptor
;
; IMPLICIT INPUTS:
;
;	length of each data element - LENGTH
;	data type of each element - DTYPE
;	address of first allocated entry - POINTER
;	lower  1st subscript limit - L1
;	upper  1st subscript limit - U1
;	lower  2nd subscript limit - L2
;	upper  2nd subscript limit - U2
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	1st dimension multiplier - M1
;	2nd dimension multiplier - M2
;	array size in bytes - ARSIZE
;	highest linear index - HIGH_INDX
;	lowest linear index - LOW_INDX
;	address of A(0) - A0
;
; COMPLETION CODES:
;
;	NONE
;
; SIDE EFFECTS:
;
;	NONE
;
;--


; Register usage:
;
;	R0 = address of descriptor
;	R1 = length of data element in bytes (if string, length of string)
;	R2 = lower limit on subscript
;	R3 = upper limit on subscript

	L_L1 = DSC$L_M2+4		; lower limit 1 for 2-dim
	L_U1 = L_L1+4			; upper limit 1 for 2-dim
	L_L2 = L_L1+8			; lower limit 2 for 2-dim
	L_U2 = L_L1+12			; upper limit 2 for 2-dim


FOR$INI_DES2_R3::
	MOVZWL	DSC$W_LENGTH(R0), R1	; R1 = length of data element

	SUBL3	L_L1(R0), L_U1(R0), R2 ; R2 = U1 - L1
	INCL	R2			; R2 = M1 = U1 - L1 + 1
	BLEQ	ERROR			; error if 0 or negative
	SUBL3	L_L2(R0), L_U2(R0), R3 ; R3 = U2 - L2
	INCL	R3			; R3 = M2 = U2 - L2 + 1
	BLEQ	ERROR			; error if multiplier is 0 or negative
	MOVQ	R2, DSC$L_M1(R0)	; store M1 and M2

	MULL	R2, R3			; R3 = M1 * M2
	MULL3	R1, R3, DSC$L_ARSIZE(R0) ; store array size in bytes 
					; = data type length * M1 * M2

	MULL3	L_U2(R0), R2, R3	; R3 = M1 * U2
	ADDL	L_U1(R0), R3		; R3 = high index = U2*M1 + U1

	MULL	L_L2(R0), R2		; R2 = M1*L2
	ADDL	L_L1(R0), R2		; R2 = low index = L2*M1 + L1
	MOVQ	R2, DSC$L_LOW_INDX(R0)	; store low and high linear index

	MULL	R1, R2			; R2 = low * length
	SUBL3	R2, DSC$A_POINTER(R0), DSC$A_A0(R0) ; A0 = POINTER - low * length

	CMPB	DSC$B_DTYPE(R0), #DSC$K_DTYPE_T	; is this CHARACTER?
	BEQL	10$			; branch if yes
	CMPB	DSC$B_DTYPE(R0), #DSC$K_DTYPE_DC ; is this D Complex?
	BEQL	10$			; branch if yes
	RSB				; return if not

10$:	MULL	R1, R3			; R3 = scaled high by length
	MOVQ	R2, DSC$L_LOW_INDX(R0)	; store scaled low and high index
	RSB				; return

	.SBTTL	FOR$INI_DESC_R6		! N dimension array desc. init. 

;++
; FUNCTIONAL DESCRIPTION:
;
;	Initialize n-dimension array descriptor entries base on the lower
;	and upper subscripts limits and the address of the
;	first allocated entry.  The LOW_INDX and HIGH_INDX
;	entries are FORTRAN specific for in-line subscript checking
;	using the INDEX instruction and are outside the standardized
;	array descriptor paased between modules.
;
; CALLING SEQUENCE:
;
;	MOVA	address_of_descriptor, R0
;	JSB	FOR$INI_DESC_R3
;
; INPUT PARAMETERS:
;
;	R0 = address of array descriptor
;
; IMPLICIT INPUTS:
;
;	length of each data element - LENGTH
;	data type of each element - DTYPE
;	address of first allocated entry - POINTER
;	lower  1st subscript limit - L1
;	upper  1st subscript limit - U1
;	lower  2nd subscript limit - L2
;	upper  2nd subscript limit - U2
;	..
;	lower  nth subscript limit - Ln
;	upper  nth subscript limit - Un
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	1st dimension multiplier - M1
;	..
;	nth dimension multiplier - Mn
;	highest linear index - HIGH_INDX
;	lowest linear index - LOW_INDX
;	address of A(0) - A0
;
; COMPLETION CODES:
;
;	NONE
;
; SIDE EFFECTS:
;
;	NONE
;
;--

; Register usage:
;
;	R0 = address of descriptor
;	R1 = length of data element in bytes (if string, length of string)
;	R2 = Mi then partial product * Mi + Li
;	R3 = accumulated product of Mi, then partial product * Mi + Ui
;	R4 = pointer to multipliers (M1...Mn)
;	R5 = pointer to lower/upper subscript limits (L1, U1, ..., Ln, Un)
;	R6 = no. of dimensions

FOR$INI_DESC_R6::
	MOVZWL	DSC$W_LENGTH(R0), R1	; R1 = length of data element
	MOVAL	DSC$L_M1(R0), R4	; R4 = adr. of M1
	MOVZBL	DSC$B_DIMCT(R0), R6	; R6 = dimension count
	MOVAL	(R4)[R6], R5		; R5 = adr. of L1
	MOVL	#1, R3			; R3 = initial array size in bytes

10$:	SUBL3	(R5)+, (R5)+, R2 	; R2 = Ui - Li
	INCL	R2			; R2 = Mi = Ui - Li + 1
	BLEQ	ERROR			; error if 0 or negative
	MOVL	R2, (R4)+		; store Mi
	MULL	R2, R3			; R3 = accumulated product of Mi
	SOBGTR	R6, 10$			; loop for each dimension

	MULL3	R1, R3, DSC$L_ARSIZE(R0) ; store array size in bytes 
					; = data type length * M1 * M2

	SUBL	#4, R4			; R4 = address Mn, so skip Mn next loop
	MOVZBL	DSC$B_DIMCT(R0), R6	; R6 = no. of dimensions
	MOVQ	-(R5), R2		; R2/R3 = Ln/Un
	BRB	30$			; skip Mn

20$:	MULL	-(R4), R3		; R3 = partial product * Mi
	ADDL	-(R5), R3		; R3 = partial product * Mi + Ui
	MULL	(R4), R2		; R2 = partial product * Mi
	ADDL	-(R5), R2		; R2 = partial product * Mi + Li
30$:	SOBGTR	R6, 20$			; loop no. of dimensions-1

	MOVQ	R2, DSC$L_LOW_INDX(R0)	; store low and high linear index

	MULL	R1, R2			; R2 = low * length
	SUBL3	R2, DSC$A_POINTER(R0), DSC$A_A0(R0) ; A0 = POINTER - low * length

	CMPB	DSC$B_DTYPE(R0), #DSC$K_DTYPE_T ; is this CHARACTER?
	BEQL	40$			; branch if yes
	CMPB	DSC$B_DTYPE(R0), #DSC$K_DTYPE_DC ; is this D Complex?
	BEQL	40$			; branch if yes
	RSB				; return if not

40$:	MULL	R1, R3			; R3 = scaled high by length
	MOVQ	R2, DSC$L_LOW_INDX(R0)	; store scaled low and high index
	RSB				; return
	.END
