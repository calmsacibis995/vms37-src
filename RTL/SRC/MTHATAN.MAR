	.TITLE	MTH$ATAN	; Floating Point Arc Tangent Functions 
				; (ATAN,ATAN2,ATAND,ATAND2)
	.IDENT /2-005/		; File: MTHATAN.MAR  EDIT:  RNH2005
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;
; FACILITY: MATH LIBRARY
;++
; ABSTRACT:
;
; MTH$ATAN is a function which returns the floating point arc tangent 
; value (in radians) of its single precision floating point argument.  
; MTH$ATAN2  is two arguments floating point arctangent. The call is 
; standard call-by-reference.
; MTH$ATAN_R4  is  a  special  routine  which is the same as MTH$ATAN
; except a faster non-standard JSB call is  used with the argument in
; R0 and no registers are saved.
;
; MTH$ATAND is a function which returns the floating point arc tangent 
; value  (in degrees) of its single precision floating point argument.
; MTH$ATAND2 is two arguments floating point arctangent.  The  call is 
; standard call-by-reference.
; MTH$ATAND_R4  is  a  special  routine which is the same as MTH$ATAND
; except a faster non-standard JSB call is  used  with the argument in
; R0 and no registers are saved.
;
;--
;
; VERSION: 01
;
; HISTORY:
; AUTHOR:
;	Peter Yuo, 15-Oct-76: Version 01
;
; MODIFIED BY:
;
; 01-1	Peter Yuo, 22-May-77
;
;--
;
; VERSION: 02
;
; HISTORY:
; AUTHOR:
;	Bob Hanek, 04-Jun-81: Version 02
;
; MODIFIED BY:
;
;

	.SBTTL	HISTORY	; Detailed Current Edit History


; ALGORITHMIC DIFFERENCES FROM FP-11/C ROUTINE:
;	1. To avoid various flags subroutine calls have been used.
;
; Edit History for Version 01 of MTH$ATANATAN2
;
; 01-1	Code saving from code review March 1977
;	Add jacket routine to MTH$ATAN2
;	Use proper form of literals so MTH$ATAN2 will work
;
; 01-5	Signal (0, 0) as INVALID ARG TO MATH LIBRARY.  TNH 16-June-78
; 01-6	Move .ENTRY mask definition to module header.  TNH 14-Aug-78
; 1-007	- Update version number and copyright notice.  JBS 16-NOV-78
; 1-008 - Change symbol MTH__INVARG to MTH$K_INVARGMAT.  JBS 07-DEC-78
; 1-009	- Add "_" to the PSECT directive.  JBS 21-DEC-78
; 1-010	- Define all global symbols using .EXTRN.  JBS 19-JUN-1979
; 1-011 - Added degree entry points. RNH 15-MAR-1981
;
;
; Edit History for Version 02 of MTH$ATANATAN2
;
;--
; 2-002 - Use G^ addressing for externals.  SBL 24-Aug-1981
; 2-003 - Added vectored entry point MTH$$AB_ATAN_V.  RNH 29-Sep-81
; 2-004 - Changed MTH$ATAND2 to MTH$ATAN2D to conform to original spec.
;	  RNH 05-Oct-81
; 2-005 - Un-did previous edit to conform with PL/1 names.
;	- Modified small argument logic to avoid an FPA bug in the POLY
;	  instruction.  RNH 17-Dec-81

	.SBTTL	DECLARATIONS	; Declarative Part of Module

;
; INCLUDE FILES:	MTHJACKET.MAR
;
;
; EQUATED SYMBOLS:
;
	ACMASK = ^M<IV, R2, R3, R4>	; .ENTRY register mask, int ovf enabled
	LF_PI_OVER_2_HI = ^X0FDB40C9	; High 24 bits of pi/2
	LF_PI_OVER_2_LO = ^XBD2EB43B	; Low 24 bits of pi/2
	LF_MPI_OVER_2	= ^X0FDBC0C9	; -pi/2
	LF_PI_OVER_2	= ^X0FDB40C9	; pi/2
	LF_180		= ^X00004434	; 90
	LF_M90		= ^X0000C3B4	; -90
	LF_PI		= ^X0FDB4149	; pi
	LF_90		= ^X000043B4	; 90

;
; MACROS:	none
;
; PSECT DECLARATIONS:

	.PSECT	_MTH$CODE	PIC,SHR,LONG,EXE,NOWRT
					; program section for math routines
;
; OWN STORAGE:	none
;
; EXTERNALS:
;
	.EXTRN	MTH$$SIGNAL		; Signal a severe error
	.EXTRN	MTH$K_INVARGMAT		; Invalid argument to math library
	.DSABL	GBL			; No other externals allowed
;
; CONSTANTS:

;   
;   The MTH$$AB_ATAN table is a table of byte entries used to obtain an index 
;   into the ATAN_TABLE.  MTH$$AB_ATAN is indexed using the low order bits of 
;   the  exponent  field  and the high order bits of the fraction field.  The 
;   MTH$$AB_ATAN table is independent of the data type and is used by all  of
;   the arctangent routines.
;   
;   
MTH$$AB_ATAN_V::		; Simulated vector entry for G and
	.LONG	MTH$$AB_ATAN-.	;   H routines
MTH$$AB_ATAN::
	.BYTE	^X00, ^X00, ^X00, ^X03, ^X03, ^X06, ^X06, ^X09
	.BYTE	^X09, ^X09, ^X0C, ^X0C, ^X0C, ^X0F, ^X0F, ^X12
	.BYTE	^X12, ^X12, ^X15, ^X15, ^X15, ^X18, ^X18, ^X18
	.BYTE	^X1B, ^X1B, ^X1B, ^X1B, ^X1E, ^X1E, ^X1E, ^X21
	.BYTE	^X21, ^X21, ^X21, ^X21, ^X24, ^X24, ^X24, ^X24
	.BYTE	^X24, ^X24, ^X27, ^X27, ^X27, ^X27, ^X27, ^X27
	.BYTE	^X27, ^X27, ^X27, ^X27, ^X27, ^X27, ^X27



;
;
;   ************************  Constants for ATAN  ***************************  
;   
;   
;   Each entry of the ATAN_TABLE contains  the the values of XHI, ATAN_XHI_LO
;   and ATAN_XHI_HI respectively.  The table is indexed by a pointer obtained 
;   from  the MTH$$AB_ATAN table.  NOTE: For performance reasons it is import-
;   ant to have the ATAN_TABLE longword aligned.
;   
;   
	.ALIGN	LONG

ATAN_TABLE:
; Entry  0
	.LONG	^XF87E3ED7	; 0.105454430E+00
	.LONG	^X0A99B21B	; -.225614927E-08
	.LONG	^X2CE73ED7	; 0.105066113E+00
; Entry  1
	.LONG	^XFB703F03	; 0.128888845E+00
	.LONG	^XF372325E	; 0.324436344E-08
	.LONG	^X422F3F03	; 0.128182158E+00
; Entry  2
	.LONG	^XF63E3F1F	; 0.156212777E+00
	.LONG	^XB326B253	; -.308063752E-08
	.LONG	^XADF13F1E	; 0.154960409E+00
; Entry  3
	.LONG	^XE4EC3F47	; 0.195209205E+00
	.LONG	^X4A61B2AA	; -.495610708E-08
	.LONG	^X69623F45	; 0.192784816E+00
; Entry  4
	.LONG	^XC3D13F7F	; 0.249770418E+00
	.LONG	^X678D3298	; 0.443555459E-08
	.LONG	^XA30A3F7A	; 0.244762570E+00
; Entry  5
	.LONG	^XDB973F9F	; 0.312222213E+00
	.LONG	^X315D3323	; 0.949907264E-08
	.LONG	^XF28D3F9A	; 0.302631766E+00
; Entry  6
	.LONG	^X9E8E3FC7	; 0.389881551E+00
	.LONG	^XF1A6335E	; 0.129770452E-07
	.LONG	^X56713FBE	; 0.371753246E+00
; Entry  7
	.LONG	^X33B63FFF	; 0.498441398E+00
	.LONG	^XC9A0B31E	; -.924265464E-08
	.LONG	^XBFB03FEC	; 0.462399960E+00
; Entry  8
	.LONG	^XF8EB4026	; 0.652235687E+00
	.LONG	^X4695B38C	; -.163302420E-07
	.LONG	^XF4394013	; 0.577945292E+00
; Entry  9
	.LONG	^X712405E	; 0.867295384E+00
	.LONG	^X6A34B399	; -.178598398E-07
	.LONG	^XE62C4036	; 0.714449644E+00
; Entry 10
	.LONG	^XCBD84095	; 0.117028332E+01
	.LONG	^X99953108	; 0.496947650E-09
	.LONG	^X1B62405D	; 0.863699079E+00
; Entry 11
	.LONG	^X8DEB40D2	; 0.164495599E+01
	.LONG	^XDBF9B3F3	; -.283889552E-07
	.LONG	^X25414083	; 0.102457440E+01
; Entry 12
	.LONG	^X88054124	; 0.257080197E+01
	.LONG	^X888B3433	; 0.418008703E-07
	.LONG	^X93CA4099	; 0.119982266E+01
; Entry 13
	.LONG	^X7D0E41AB	; 0.535901546E+01
	.LONG	^XDF7F33C8	; 0.233846986E-07
	.LONG	^X72D240B1	; 0.138631654E+01

;
; Tables to be used in POLYF for computing ATAN.  ATANTAB1 is obtained
; from Hart et. al. (No. 4900).  ATANTAB2 is the same as ATANTAB1 except
; that C0 is set to 0

ATANTAB1:
	.LONG	^XB0AA3F4A	; C2 =  .19793954
	.LONG	^XA9B0BFAA	; C1 = -.33332586
	.LONG	^X00004080	; C0 = 1.00000000
ATANLEN1 = .- ATANTAB1/4

ATANTAB2:
	.LONG	^XB0AA3F4A	; C2 =  .19793954
	.LONG	^XA9B0BFAA	; C1 = -.33332586
	.LONG	^X00000000	; C0 =  .00000000
ATANLEN2 = .- ATANTAB2/4



;
;
;   *************************  Constants for ATAND  **************************
;   
;   
;   Each  entry of the ATAND_TABLE contains the the values of XHI, ATAND_XHI_LO
;   and ATAND_XHI_HI respectively.  The table is indexed by a pointer  obtained
;   from the MTH$$AB_ATAN table.  NOTE: For performance reasons it is important
;   to have the ATAND_TABLE longword aligned.
;   

ATAND_TABLE:
; Entry  0
	.LONG	^XF87E3ED7	; 0.105454430E+00
	.LONG	^XB1EF354F	; 0.193431092E-06
	.LONG	^XA29141C0	; 0.601984453E+01
; Entry  1
	.LONG	^XFB703F03	; 0.128888845E+00
	.LONG	^XFE1BB4C3	; -.912661662E-07
	.LONG	^X047B41EB	; 0.734429693E+01
; Entry  2
	.LONG	^XF63E3F1F	; 0.156212777E+00
	.LONG	^XAF4932FD	; 0.738319672E-08
	.LONG	^X0EA7420E	; 0.887857723E+01
; Entry  3
	.LONG	^XE4EC3F47	; 0.195209205E+00
	.LONG	^X3623B5A7	; -.311455636E-06
	.LONG	^XBB6B4230	; 0.110457563E+02
; Entry  4
	.LONG	^XC3D13F7F	; 0.249770418E+00
	.LONG	^X4257B5C1	; -.359973200E-06
	.LONG	^X61BE4260	; 0.140238628E+02
; Entry  5
	.LONG	^XDB973F9F	; 0.312222213E+00
	.LONG	^X300C351B	; 0.144529793E-06
	.LONG	^XB758428A	; 0.173395233E+02
; Entry  6
	.LONG	^X9E8E3FC7	; 0.389881551E+00
	.LONG	^XCFDD35A6	; 0.310711499E-06
	.LONG	^X662E42AA	; 0.212998924E+02
; Entry  7
	.LONG	^X33B63FFF	; 0.498441398E+00
	.LONG	^XF7DAB674	; -.912577548E-06
	.LONG	^XF2D342D3	; 0.264935665E+02
; Entry  8
	.LONG	^XF8EB4026	; 0.652235687E+00
	.LONG	^XADBDB6DF	; -.166653592E-05
	.LONG	^X748F4304	; 0.331138268E+02
; Entry  9
	.LONG	^X0712405E	; 0.867295384E+00
	.LONG	^XBD24359B	; 0.290086177E-06
	.LONG	^XBD634323	; 0.409349480E+02
; Entry 10
	.LONG	^XCBD84095	; 0.117028332E+01
	.LONG	^XB637B668	; -.866918924E-06
	.LONG	^XF1FC4345	; 0.494863129E+02
; Entry 11
	.LONG	^X8DEB40D2	; 0.164495599E+01
	.LONG	^X9881B6CC	; -.152435689E-05
	.LONG	^XD0AE436A	; 0.587037888E+02
; Entry 12
	.LONG	^X88054124	; 0.257080197E+01
	.LONG	^X41353761	; 0.335655682E-05
	.LONG	^X7D534389	; 0.687447739E+02
; Entry 13
	.LONG	^X7D0E41AB	; 0.535901546E+01
	.LONG	^XFECD377E	; 0.379972630E-05
	.LONG	^XDC34439E	; 0.794300842E+02

;
; Tables to be used in POLYF for computing ATAND.  ATANDTAB1 is obtained
; by multiplying the coefficients given in Hart et. al. (No. 4900) by
; 180/pi.  ATANDTAB2 is the same as ATANDTAB1 except that C0 is set to
; 180/pi - 64 instead of 180/pi.

ATANDTAB1:
	.LONG	^X75264235	; C2 =  11.341100693
	.LONG	^XC90BC298	; C1 = -19.098165512
	.LONG	^X2EE14365	; C0 =  57.295780182
ATANDLEN1 = .- ATANDTAB1/4

ATANDTAB2:
	.LONG	^X75264235	; C2 =  11.341100693
	.LONG	^XC90BC298	; C1 = -19.098165512
PI_OV_180_M_64:
	.LONG	^X88F9C1D6	; C0 =  -6.704219818
ATANDLEN2 = .- ATANDTAB2/4



	.SBTTL	MTH$ATAN - Standard Single Precision Floating Arc Tangent


;++
; FUNCTIONAL DESCRIPTION:
;
; ATAN - single precision floating point function
;
; ATAN is computed using the following steps:
; 
;    1. If X > 11 then
;       a. Let W = 1/X.
;       b. Compute ATAN(W) = W*P(W**2), where P is a polynomial of 
;          degree 2.
;       c. Set ATAN(X) = pi/2 - ATAN(W)
;    2. If 3/32 =< X =< 11 then
;       a. Obtain XHI by table look-up.
;       b. Compute Z = (X - XHI)/(1 + X*XHI).
;       c. Compute ATAN(Z) = Z*P(Z**2), where P is a polynomial of 
;          degree 2.
;       d. Obtain ATAN(XHI) by table look-up.  ATAN(XHI) will have
;          two parts - the high order bits, ATAN_XHI_HI, and the low
;          order bits, ATAN_XHI_LO.
;       e. Compute ATAN(X) = ATAN_XHI_HI + (ATAN_XHI_LO + ATAN(Z)).
;    3. If 0 =< X < 3/32 then
;       a. Compute ATAN(X) = X + X*Q(X**2), where Q is a polynomial
;          of degree 2.
;    4. If X < 0 then
;       a. Compute Y = ATAN(|X|) using steps 1 to 3.
;       b. Set ATAN(X) = -Y.
; 
;
; CALLING SEQUENCE:
;
;	Arctangent.wf.v = MTH$ATAN(x.rf.r)
;
; INPUT PARAMETERS:

	LONG = 4			; define longword multiplier
	x = 1 * LONG			; x is an angle in radians
;
; IMPLICIT INPUTS:	none
;
; OUTPUT PARAMETERS:
;
;	VALUE:	floating arctangent angle of the argument
;
; IMPLICIT OUTPUTS:	none
;
; SIDE EFFECTS:
;
; Signals:	none
;
; NOTE: This procedure disables floating point underflow and integer
; overflow, causes no floating overflow or other arithmetic traps, and
; preserves enables across the call.
;
;---


	.ENTRY	MTH$ATAN, ACMASK	; standard call-by-reference entry
					; disable DV (and FU), enable IV
	MTH$FLAG_JACKET			; flag that this is a jacket procedure
					; in case of an error in special JSB 
					; routine
	MOVF	@x(AP), R0		; R0 = arg 
	BSBB	MTH$ATAN_R4		; call special ATAN rountine
	RET				; return - result in R0


	.SBTTL	MTH$ATAN2 - Standard floating Arctangent With 2 Arguments
;++
; FUNCTIONAL DESCRIPTION:
;
; ATAN2  - single precision floating point function
;
; ATAN2(X,Y) is computed as following:
;
;	If Y = 0 or X/Y > 2**25, ATAN2(X,Y) = PI/2 * (sign X)
;	If Y > 0 and X/Y =< 2**25, ATAN2(X,Y) = ATAN(X/Y)
;	If Y < 0 and X/Y =< 2**25, ATAN2(X,Y) = PI * (sign X) + ATAN(X/Y)
;
;
; CALLING SEQUENCE:
;
;	Arctangent2.wf.v = MTH$ATAN2(x.rf.r, y.rf.r)
;
; INPUT PARAMETERS:

	x = 1 * LONG			; x is the first argument
	y = 2 * LONG			; y is the second argument

; SIDE EFFECTS:	See description of MTH$ATAN 
;
;--


	.ENTRY	MTH$ATAN2 ,ACMASK	; standard call-by-reference entry
					; disable DV (and FU), enable IV
	MTH$FLAG_JACKET			; flag that this is jacket procedure
					; in case of an error in special JSB routine
	MOVF	@x(AP), R0		; R0 = arg1 
	MOVF	@y(AP), R1		; R1 = arg2
;
; Test if Y = 0 or X/Y > 2**25
;
	BEQL	INF			; branch to INF if Y = 0
	BICW3	#^X807F, R0, R2		; R2 = exponent(X)
	BICW3	#^X807F, R1, R3		; R3 = exponent(Y)
	SUBW	R3, R2			; R2 = exponent(X) - exponent(Y)
	CMPW	R2, #26*128		; compare R2 with 26
	BGTR	INF			; if X/Y > 2**25, branch to INF
;
; Test if Y > 0 or Y < 0
;
	TSTW	R1			; test the sign of Y
	BGTR	A2PLUS			; branch to A2PLUS if Y > 0
	TSTW	R0			; test the sign of X
	BGEQ	A1PLUS			; branch to A1PLUS if X >= 0
;
; Y < 0 and X < 0 and X/Y =< 2**25
;
	BSBB	MTH$ATAN_R4D		; R0 = ATAN(X/Y)
	SUBF	#LF_PI, R0		; R0 = -PI + ATAN(X/Y)
	RET				; return
;
; Y < 0 and X > 0 and X/Y =< 2**25
;
A1PLUS:
	BSBB	MTH$ATAN_R4D		; R0 = ATAN(X/Y)
	ADDF	#LF_PI, R0		; R0 = PI + ATAN(X/Y)
	RET				; return
;
; Y > 0 and X/Y =< 2**25
;
A2PLUS:
	BSBB	MTH$ATAN_R4D		; R0 = ATAN(X/Y)
	RET				; return
;
; Y = 0 or X/Y > 2**25
;
INF:
	TSTW	R0			; test the sign of X
	BGTR	1$			; branch if X > 0
	BEQL	2$			; branch if X = 0
	MOVF	#LF_MPI_OVER_2, R0	; R0 = ATAN(X/Y) = -PI/2
	RET				; return

1$:	MOVF	#LF_PI_OVER_2, R0	; R0 = ATAN(X/Y) = PI/2
	RET				; return

;+
; Here if X = 0 and Y = 0.  Signal INVALID ARG TO MATH LIBRARY
; as a SEVERE error.
;-

2$:	ASHQ	#15, #1, R0		; R0/R1 = reserved operand which
					; is copied to CHF$L_MCH_SAVR0/R1
					; so a handler can fixup if wants 
					; to continue
	MOVZBL	#MTH$K_INVARGMAT, -(SP)	; code for INVALID ARG TO MATH LIBRARY
	CALLS	#1, G^MTH$$SIGNAL	; signal SEVERE error
	RET				; return if handler continues

	.SBTTL	MTH$ATAN_R4 - Special ATAN routine

; Special ATAN - used by the standard routine, and directly.
;
; CALLING SEQUENCES:
;	save anything needed in R0:R4
;	MOVF	...,R0			; input in R0
;	JSB	MTH$ATAN_R4
;	return with result in R0
;
; Note:  This  routine  is written to avoid causing any integer overflows, 
;    floating overflows, or floating underflows or divide by 0 conditions, 
;    whether enabled or not.
;
; REGISTERS USED:
;	R0 - Floating argument then result
;	R0:R3 - POLYF
;	R4 - Pointer into ATAN_TABLE



MTH$ATAN_R4D:
	DIVF	R1, R0			; for our own use only!
MTH$ATAN_R4::				; Special ATAN routine
	TSTF	R0			; R4 = X = argument
	BLSS	NEG_ARG			; Branch to negative argument logic
;
; Argument is positive
;
	SUBW3	#^X3EC0, R0, R4		; Argument is less than 3/32,
	BLSS	SMALL			;  branch to small argument logic
	CMPW	#^X036F, R4		; Argument is greater that 11,
	BLSS	LARGE_ARG		;  branch to large argument logic
;
; Logic for positive medium sized arguments.  Get pointer into ATAN_TABLE.
;
	ROTL	#-4, R4, R4		; R4 = index into MTH$$AB_ATAN table
	BICL	#-256, R4		; zero high order bits of index
	MOVB	MTH$$AB_ATAN[R4], R4	; R4 = offset into ATAN_TABLE
	MOVAL	ATAN_TABLE[R4], R4	; R4 = pointer to XHI
;
; Compute Z
;
	MOVL	(R4)+, R1		; R1 = XHI
	MULF3	R1, R0, R2		; R2 = X*XHI
	ADDF	#1, R2			; R2 = 1 + X*XHI
	SUBF	R1, R0			; R0 = X - XHI
	DIVF	R2, R0			; R0 = Z = (X - XHI)/(1 + X*XHI)
;
; Evaluate Z*P(Z**2)
;
	MOVL	R0, -(SP)		; Push Z onto the stack
	MULF	R0, R0			; R0 = Z**2
	POLYF	R0, #ATANLEN1-1, ATANTAB1
					; R0 = P(Z**2)
	MULF	(SP)+, R0		; R0 = ATAN(Z) = Z*P(Z**2)
	ADDF	(R4)+, R0		; R0 = ATAN_XHI_LO + ATAN(Z)
	ADDF	(R4), R0		; R0 = ATAN(X) = ATAN_XHI_HI +
					;      (ATAN_XHI_LO + ATAN(Z))
	RSB				; Return


SMALL:	BRW	SMALL_ARG		; Dummy label used to avoid adding
					;   an extra insrtuction in the 
					;   medium argument logic
;
; Large positive argument logic.
;

LARGE_ARG:
	DIVF3	R0, #-1, R4		; R4 = -W = -1/X
	MULF3	R4, R4, R0		; R0 = W**2
	POLYF	R0, #ATANLEN1-1, ATANTAB1
					; R0 = P(W**2)
	MULF	R4, R0			; R0 = ATAN(W) = -W*P(W**2)
	ADDF	#LF_PI_OVER_2_LO, R0	; 
	ADDF	#LF_PI_OVER_2_HI, R0	; R0 = ATAN(X) = PI/2 - ATAN(W)
	RSB				; Return

;
; Logic for negative arguments
;

NEG_ARG:
	SUBW3	#^XBEC0, R0, R4		; Argument is less than 3/32,
	BLSS	SMALL_ARG		;  branch to small argument logic
	CMPW	#^X036F, R4		; Argument is greater than 11,
	BLSS	N_LARGE_ARG		;  branch to large argument logic
;
; Logic for negative medium sized arguments.  Get index into ATAN_TABLE.
;
	ROTL	#-4, R4, R4		; R4 = index into MTH$$AB_ATAN table
	BICL	#-256, R4		; clear high order (unused) bits of ind
	MOVB	MTH$$AB_ATAN[R4], R4	; R4 = offset into ATAN_TABLE
	MOVAL	ATAN_TABLE[R4], R4	; R4 = pointer to XHI
;
; Compute Z
;
	MOVL	(R4)+, R1		; R1 = XHI
	MULF3	R1, R0, R2		; R2 = X*XHI
	SUBF3	R2, #1, R2		; R2 = 1 - X*XHI = 1 + X*(-XHI)
	ADDF	R1, R0			; R0 = X + XHI = X - (-XHI)
	DIVF	R2, R0			; R0 = Z 
;
; Evaluate Z*P(Z**2)
;
	MOVL	R0, -(SP)		; Push Z onto the stack
	MULF	R0, R0			; R0 = Z**2
	POLYF	R0, #ATANLEN1-1, ATANTAB1
					; R0 = P(Z**2)
	MULF	(SP)+, R0		; R0 = ATAN(Z) = Z*P(Z**2)
	SUBF	(R4)+, R0		; R0 = ATAN_XHI_LO + ATAN(Z)
	SUBF	(R4), R0		; R0 = ATAN(X) = ATAN_XHI_HI +
					;      (ATAN_XHI_LO + ATAN(Z))
	RSB				; Return
;
; Logic for large negative  arguments
;

N_LARGE_ARG:
	DIVF3	R0, #-1, R4		; R4 = W = 1/|X|
	MULF3	R4, R4, R0		; R0 = W**2
	POLYF	R0, #ATANLEN1-1, ATANTAB1
					; R0 = P(W**2)
	MULF	R4, R0			; R0 = ATAN(W) = W*P(W**2)
	SUBF	#LF_PI_OVER_2_LO, R0	; 
	SUBF	#LF_PI_OVER_2_HI, R0	; R0 = ATAN(X) = ATAN(W) - PI/2
	RSB				; Return

;
; Small argument logic.
;

SMALL_ARG:
	MOVL	R0, R4			; R4 = argument = X
	BICW	#^X8000, R0		; R0 = |X|
	CMPW	#^X3A00, R0		; Compare 2^-13 to |X|
	BLSS	1$			; Branch to polynomial evaluation
	MOVL	R4, R0			; No POLY needed.  Answer = X
	RSB				;

1$:	MULF	R0, R0			; R0 = X**2
	POLYF	R0, #ATANLEN2-1, ATANTAB2
					; R0 = Q(X**2)
	MULF	R4, R0			; R0 = X*Q(X**2)
	ADDF	R4, R0			; R0 = ATAN(X) = X + X*Q(X**2)
	RSB				; Return




	.SBTTL	MTH$ATAND - Standard Single Precision Floating Arc Tangent


;++
; FUNCTIONAL DESCRIPTION:
;
; ATAND - single precision floating point function
;
; ATAND is computed using the following steps:
; 
;    1. If X > 11 then
;       a. Let W = 1/X.
;       b. Compute ATAND(W) = W*P(W**2), where P is a polynomial of 
;          degree 2.
;       c. Set ATAND(X) = pi/2 - ATAND(W)
;    2. If 3/32 =< X =< 11 then
;       a. Obtain XHI by table look-up.
;       b. Compute Z = (X - XHI)/(1 + X*XHI).
;       c. Compute ATAND(Z) = Z*P(Z**2), where P is a polynomial of 
;          degree 2.
;       d. Obtain ATAND(XHI) by table look-up.  ATAND(XHI) will have
;          two parts - the high order bits, ATAND_XHI_HI, and the low
;          order bits, ATAND_XHI_LO.
;       e. Compute ATAND(X) = ATAND_XHI_HI + (ATAND_XHI_LO + ATAND(Z)).
;    3. If 0 =< X < 3/32 then
;       a. Compute ATAND(X) = 64*X + X*Q(X**2), where Q is a polynomial
;          of degree 2.
;    4. If X < 0 then
;       a. Compute Y = ATAND(|X|) using steps 1 to 3.
;       b. Set ATAND(X) = -Y.
; 
;
; CALLING SEQUENCE:
;
;	Arctangent.wf.v = MTH$ATAND(x.rf.r)
;
; INPUT PARAMETERS:

	LONG = 4			; define longword multiplier
	x = 1 * LONG			; x is an angle in radians
;
; IMPLICIT INPUTS:	none
;
; OUTPUT PARAMETERS:
;
;	VALUE:	floating arctangent angle of the argument (in degrees)
;
; IMPLICIT OUTPUTS:	none
;
; SIDE EFFECTS:
;
; Signals:	none
;
; NOTE: This procedure disables floating point underflow and integer
; overflow, causes no floating overflow or other arithmetic traps, and
; preserves enables across the call.
;
;---


	.ENTRY	MTH$ATAND, ACMASK	; standard call-by-reference entry
					; disable DV (and FU), enable IV
	MTH$FLAG_JACKET			; flag that this is a jacket procedure
					; in case of an error in special JSB 
					; routine
	MOVF	@x(AP), R0		; R0 = arg 
	BSBB	MTH$ATAND_R4		; call special ATAND rountine
	RET				; return - result in R0


	.SBTTL	MTH$ATAND2 - Standard floating Arctangent With 2 Arguments
;++
; FUNCTIONAL DESCRIPTION:
;
; ATAND2  - single precision floating point function
;
; ATAND2(X,Y) is computed as following:
;
;	If Y = 0 or X/Y > 2**25, ATAND2(X,Y) = 90 * (sign X)
;	If Y > 0 and X/Y =< 2**25, ATAND2(X,Y) = ATAND(X/Y)
;	If Y < 0 and X/Y =< 2**25, ATAND2(X,Y) = 180 * (sign X) + ATAND(X/Y)
;
;
; CALLING SEQUENCE:
;
;	Arctangent2.wf.v = MTH$ATAND2(x.rf.r, y.rf.r)
;
; INPUT PARAMETERS:

	x = 1 * LONG			; x is the first argument
	y = 2 * LONG			; y is the second argument

; SIDE EFFECTS:	See description of MTH$ATAND 
;
;--


	.ENTRY	MTH$ATAND2 ,ACMASK	; standard call-by-reference entry
					; disable DV (and FU), enable IV
	MTH$FLAG_JACKET			; flag that this is jacket procedure
					; in case of an error in special JSB 
					; routine
	MOVF	@x(AP), R0		; R0 = arg1 
	MOVF	@y(AP), R1		; R1 = arg2
;
; Test if Y = 0 or X/Y > 2**25
;
	BEQL	INFD			; branch to INFD if Y = 0
	BICW3	#^X807F, R0, R2		; R2 = exponent(X)
	BICW3	#^X807F, R1, R3		; R3 = exponent(Y)
	SUBW	R3, R2			; R2 = exponent(X) - exponent(Y)
	CMPW	R2, #26*128		; compare R2 with 26
	BGTR	INFD			; if X/Y > 2**25, branch to INFD
;
; Test if Y > 0 or Y < 0
;
	TSTW	R1			; test the sign of Y
	BGTR	A2PLUSD			; branch to A2PLUSD if Y > 0
	TSTW	R0			; test the sign of X
	BGEQ	A1PLUSD			; branch to A1PLUSD if X >= 0
;
; Y < 0 and X < 0 and X/Y =< 2**25
;
	BSBB	MTH$ATAND_R4D		; R0 = ATAND(X/Y)
	SUBF	#LF_180, R0		; R0 = -180 + ATAND(X/Y)
	RET				; return
;
; Y < 0 and X > 0 and X/Y =< 2**25
;
A1PLUSD:
	BSBB	MTH$ATAND_R4D		; R0 = ATAND(X/Y)
	ADDF	#LF_180, R0		; R0 = 180 + ATAND(X/Y)
	RET				; return
;
; Y > 0 and X/Y =< 2**25
;
A2PLUSD:
	BSBB	MTH$ATAND_R4D		; R0 = ATAND(X/Y)
	RET				; return
;
; Y = 0 or X/Y > 2**25
;
INFD:
	TSTW	R0			; test the sign of X
	BGTR	1$			; branch if X > 0
	BEQL	2$			; branch if X = 0
	MOVF	#LF_M90, R0		; R0 = ATAND(X/Y) = -90
	RET				; return

1$:	MOVF	#LF_90, R0		; R0 = ATAND(X/Y) = 90
	RET				; return

;+
; Here if X = 0 and Y = 0.  Signal INVALID ARG TO MATH LIBRARY
; as a SEVERE error.
;-

2$:	ASHQ	#15, #1, R0		; R0/R1 = reserved operand which
					; is co180ed to CHF$L_MCH_SAVR0/R1
					; so a handler can fixup if wants 
					; to continue
	MOVZBL	#MTH$K_INVARGMAT, -(SP)	; code for INVALID ARG TO MATH LIBRARY
	CALLS	#1, G^MTH$$SIGNAL	; signal SEVERE error
	RET				; return if handler continues

	.SBTTL	MTH$ATAND_R4 - Special ATAND routine

; Special ATAND - used by the standard routine, and directly.
;
; CALLING SEQUENCES:
;	save anything needed in R0:R4
;	MOVF	...,R0			; input in R0
;	JSB	MTH$ATAND_R4
;	return with result in R0
;
; Note: This routine is  written  to  avoid causing any integer overflows, 
;    floating overflows, or floating underflows or divide by 0 conditions, 
;    whether enabled or not.
;
; REGISTERS USED:
;	R0 - Floating argument then result
;	R0:R3 - POLYF
;	R4 - Pointer into ATAND_TABLE


MTH$ATAND_R4D:
	DIVF	R1, R0			; for our own use only!
MTH$ATAND_R4::				; Special ATAND routine
	TSTF	R0			; R4 = X = argument
	BLSS	NEG_ARGD		; Branch to negative argument logic
;
; Argument is positive
;
	SUBW3	#^X3EC0, R0, R4		; Argument is less than 3/32,
	BLSS	SMALLD			;  branch to small argument logic
	CMPW	#^X036F, R4		; Argument is greater that 11,
	BLSS	LARGE_ARGD		;  branch to large argument logic
;
; Logic for positive medium sized arguments.  Get pointer into ATAND_TABLE.
;
	ROTL	#-4, R4, R4		; R4 = index into MTH$$AB_ATAN table
	BICL	#-256, R4		; zero high order bits of index
	MOVB	MTH$$AB_ATAN[R4], R4	; R4 = offset into ATAND_TABLE
	MOVAL	ATAND_TABLE[R4], R4	; R4 = pointer to XHI
;
; Compute z
;
	MOVL	(R4)+, R1		; R1 = XHI
	MULF3	R1, R0, R2		; R2 = X*XHI
	ADDF	#1, R2			; R2 = 1 + X*XHI
	SUBF	R1, R0			; R0 = X - XHI
	DIVF	R2, R0			; R0 = Z = (X - XHI)/(1 + X*XHI)
;
; Evaluate Z*P(Z**2)
;
	MOVL	R0, -(SP)		; Push Z onto the stack
	MULF	R0, R0			; R0 = Z**2
	POLYF	R0, #ATANDLEN1-1, ATANDTAB1
					; R0 = P(Z**2)
	MULF	(SP)+, R0		; R0 = ATAND(Z) = Z*Q(Z**2)
	ADDF	(R4)+, R0		; R0 = ATAND_XHI_LO + ATAND(Z)
	ADDF	(R4), R0		; R0 = ATAND(X) = ATAND_XHI_HI +
					;      (ATAND_XHI_LO + ATAND(Z))
	RSB				; Return


SMALLD:	BRW	SMALL_ARGD		; Dummy label used to avoid adding
					;   an extra insrtuction in the 
					;   medium argument logic
;
; Large positive argument logic.
;

LARGE_ARGD:
	DIVF3	R0, #-1, R4		; R4 = -W = -1/X
	MULF3	R4, R4, R0		; R0 = W**2
	POLYF	R0, #ATANDLEN1-1, ATANDTAB1
					; R0 = P(W**2)
	MULF	R4, R0			; R0 = -ATAND(Z) = -Z*P(W**2)
	ADDF	#LF_90, R0		; R0 = ATAND(X) = 90 - ATAND(Z)
	RSB				; Return

;
; Logic for negative arguments
;

NEG_ARGD:
	SUBW3	#^XBEC0, R0, R4		; Argument is less than 3/32,
	BLSS	SMALL_ARGD		;  branch to small argument logic
	CMPW	#^X036F, R4		; Argument is greater than 11,
	BLSS	N_LARGE_ARGD		;  branch to large argument logic
;
; Logic for negative medium sized arguments.  Get index into ATAND_TABLE.
;
	ROTL	#-4, R4, R4		; R4 = index into MTH$$AB_ATAN table
	BICL	#-256, R4		; clear high order (unused) bits of ind
	MOVB	MTH$$AB_ATAN[R4], R4	; R4 = offset into ATAN_TABLE
	MOVAL	ATAND_TABLE[R4], R4	; R4 = pointer to XHI
;
; Compute Z
;
	MOVL	(R4)+, R1		; R1 = XHI
	MULF3	R1, R0, R2		; R2 = X*XHI
	SUBF3	R2, #1, R2		; R2 = 1 - X*XHI = 1 + X*(-XHI)
	ADDF	R1, R0			; R0 = X + XHI = X - (-XHI)
	DIVF	R2, R0			; R0 = Z 
;
; Evaluate Z*P(Z**2)
;
	MOVL	R0, -(SP)		; Push Z onto the stack
	MULF	R0, R0			; R0 = Z**2
	POLYF	R0, #ATANDLEN1-1, ATANDTAB1
					; R0 = P(Z**2)
	MULF	(SP)+, R0		; R0 = ATAND(Z) = Z*P(Z**2)
	SUBF	(R4)+, R0		; R0 = ATAND_XHI_LO + ATAND(Z)
	SUBF	(R4), R0		; R0 = ATAND(X) = ATAND_XHI_HI +
					;      (ATAND_XHI_LO + ATAND(Z))
	RSB				; Return
;
; Logic for large negative  arguments
;

N_LARGE_ARGD:
	DIVF3	R0, #-1, R4		; R4 = W = 1/|X|
	MULF3	R4, R4, R0		; R0 = W**2
	POLYF	R0, #ATANDLEN1-1, ATANDTAB1
					; R0 = P(W**2)
	MULF	R4, R0			; R0 = ATAND(W) = W*P(W**2)
	SUBF	#LF_90, R0		; R0 = ATAND(X) = ATAND(W) - 90
	RSB				; Return

;
; Small argument logic.
;

SMALL_ARGD:
	MOVF	R0, R4			; R4 = argument = X
	BEQL	3$			;
	BICW	#^X8000, R0		; R0 = |X|
	CMPW	#^X3A00, R0		; Compare 2^-13 to |X|
	BLSS	1$			; Needs POLY
	MULF3	PI_OV_180_M_64, R4, R0	; R0 = X*[pi/180 - 64]
	BRB	2$

1$:	MULF	R0, R0			; R0 = X**2
	POLYF	R0, #ATANDLEN2-1, ATANDTAB2
					; R0 = Q(X**2)
	MULF	R4, R0			; R0 = X*Q(X**2)
2$:	ADDW	#^X300, R4		; R4 = X*2**6
	ADDF	R4, R0			; R0 = ATAND(X) = X*2**6 + X*Q(X**2)
3$:	RSB				; Return



	.END
