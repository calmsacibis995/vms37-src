MODULE BAS$NUM (			! Routines to do BASIC NUM$ function
		IDENT = '1-006'		! module BASNUM.B32
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY: BASIC Support Library
!
! ABSTRACT:
!
!	This module has 3 entry points, one each for long, floating and double.
!	The double routine checks for a BASIC frame and picks
!	up the scale factor.  Then all routines convert a number
!	to a numeric string as it would be formatted by the BASIC print 
!	statement by a CALL to the BAS$ conversion routine.
!
! ENVIRONMENT: User mode, AST level or not or mixed
!
! AUTHOR: R. Will, CREATION DATE: 2-Mar-79
!
! MODIFIED BY:
!
! R. Will, 2-Mar-79: VERSION 01
! 01	- original
! 1-002	- Change string linkages to start with STR$.  JBS 04-JUN-1979
! 1-003 - Add BASLNK to get scaling linkages.  RW  26-JUN-79
! 1-004 - Change to use new conversion routines.  RW 6-JUL-79
! 1-005 - Add longword entry point.  RW  10-Sept-79
! 1-006 - String cleanup, don't use $STR$ macros.  R2  30-OCT-79
!--
!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES: NONE
!

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    BAS$NUM_L : NOVALUE,		! Find NUM$ of a longword value
    BAS$NUM_F : NOVALUE,		! Find NUM$ of a floating value
    BAS$NUM_D : NOVALUE;		! Find NUM$ of a double value

!
! INCLUDE FILES:
!

REQUIRE 'RTLIN:RTLPSECT';		! Declare PSECTs code
REQUIRE 'RTLIN:BASLNK';			! Linkage for BASIC scaling routines
REQUIRE 'RTLIN:BASFRAME';		! Define offsets in a BASIC frame

!
! MACROS: NONE
!

!
! EQUATED SYMBOLS:
!

LITERAL
    digits_in_long = 10,		! # of significant digits to return
    no_flags = 0;			! no flags to conversion rtn

!
! PSECT DECLARATIONS
!

DECLARE_PSECTS (BAS);

!
! OWN STORAGE: NONE
!

!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    BAS$CVT_OUT_D_G;			! Convert # to BASIC string format

BUILTIN
    CVTLD;				! convert long to double for cvt routine

GLOBAL ROUTINE BAS$NUM_L (		! convert a longword to string
			  STRING,	! Address of destination descriptor
			  VALUE) :	! Create string with this value
			  NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine takes a longword integer and formats it as the BASIC PRINT
!	statement would and gives that value to the destination string.
!
! FORMAL PARAMETERS:
!
!	STRING.wt.dx		pointer to input string descriptor
!	VALUE.rl.v		value of a longword integer
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Calls the conversion routine so may signal any of its errors or have
!	any of its side effects.  In particular, the conversion routine calls
!	some of the STR$ routines and so may allocate or deallocate space,
!	and may keep some of the strings from being written for some period.
!
!--

    BEGIN

    MAP
	STRING : REF BLOCK [8,BYTE];

    LOCAL
	STR_LENGTH : WORD,			! cvt returns str length
	TEMP : VECTOR [2, LONG];		! need double for conversion

    CVTLD (VALUE, TEMP [0]);			! convert to double
    BAS$CVT_OUT_D_G (TEMP [0],			! convert this value to string
		   no_flags,			! no flags needed
		   STR_LENGTH,			! return bytes needed for str
		   STRING [0,0,0,0],		! return string
		   0,				! no scale
		   digits_in_long);		! digits to return
		   
    RETURN;
    END;			!End of BAS$NUM_L

GLOBAL ROUTINE BAS$NUM_F (		! convert floating to string
			  STRING,	! Address of destination descriptor
			  VALUE) :	! Create string with this value
			  NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine takes a floating number and formats it as the BASIC PRINT
!	statement would and gives that value to the destination string.
!
! FORMAL PARAMETERS:
!
!	STRING.wt.dx		pointer to input string descriptor
!	VALUE.rf.v		value of a floating number
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	This routine calls the conversion routine and so may signal any of its
!	errors or have any of its side effects.  In particular, the conversion
!	routine calls STR$ routines and therefore may allocate or deallocate
!	string space or lock a string from being written for some period.
!
!--

    BEGIN

    MAP
	STRING : REF BLOCK [8,BYTE];

    LOCAL
	STR_LENGTH : WORD,			! cvt returns str length
	TEMP : VECTOR [2, LONG];		! need double for conversion

    TEMP [0] = .VALUE;
    TEMP [1] = 0;
    BAS$CVT_OUT_D_G (TEMP [0],			! convert this value to string
		   no_flags,			! no flags needed
		   STR_LENGTH,			! return bytes needed for str
		   STRING [0,0,0,0]);		! return string
						! no scale
						! default # of digits
		   
    RETURN;
    END;					!End of BAS$NUM_F

GLOBAL ROUTINE BAS$NUM_D (		! convert double to string
			  STRING,	! Address of destination descriptor
			  VALUE1,	! 1st longword of double value to put in
			  VALUE2) :	! 2nd longwrd of double value for string
			  NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine takes a double number and formats it as the BASIC PRINT
!	statement would and gives that value to the destination string.
!	Note that this routine violates the calling standard because it
!	accepts and passes double floating numbers by value.
!
! FORMAL PARAMETERS:
!
!	STRING.wt.dx		pointer to input string descriptor
!	VALUE.rd.v		value of a double number
!	(VALUE1 and VALUE2 used to pick up the 2 longwords of double value)
!
! IMPLICIT INPUTS:
!
!	Scale factor from BASIC frame
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	This routine calls the conversion routine and so may signal any of
!	its errors or have any of its side effects.  In particular, the
!	conversion routine calls the STR$ routines and so may allocate or
!	deallocate dynamic string space, and may lock a string against
!	writing for a period of time.
!
!--

    BEGIN

    MAP
	STRING : REF BLOCK [8,BYTE];

    LOCAL
	STR_LENGTH : WORD;			! conversion rtn returns len

    BAS$CVT_OUT_D_G (VALUE1,			! convert this value to string
		   no_flags,			! no flags needed
		   STR_LENGTH,			! return bytes needed for str
		   STRING [0,0,0,0],		! return string
		   $BAS$SCALE);			! scale factor
						! default # of digits
		   
    RETURN;
    END;			!End of BAS$NUM_D

END				!End of module
ELUDOM
