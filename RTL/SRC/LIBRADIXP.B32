MODULE LIB$RADIX_POINT (		! Get radix point symbol

	IDENT = '1-006'		! File: LIBRADIXP.B32 Edit: RKR1006

		       ) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY: General Purpose Library
!
! ABSTRACT:
!
!	Returns the radix point symbol, as recorded in SYS$RADIX_POINT.
!
! ENVIRONMENT: User mode - AST reentrant
!
! AUTHOR: John Sauter, CREATION DATE: 19-OCT-1979
!
! EDIT HISTORY:
!
! 1-001 - Original.
! 1-003	- Change STR$ codes to LIB$ codes.  JBS 22-JAN-1980
! 1-004 - Enhance to recognize additional classes of string descriptors
!	  by invoking LIB$ANALYZE_SDESC_R3 to extract length and address
!	  of 1st data byte from the descriptor.
!	  Change from call to STR$COPY_DX  to LIB$SCOPY_DXDX6
!			      STR$COPY_R   to LIB$SCOPY_R_DX
!			      STR$FREE1_DX to LIB$SFREE1_DD6
!	  This eliminates need for a handler and the need to change
!	  STR$ statuses into LIB$ statuses.  RKR 27-MAY-1981.
! 1-005 - Add special-case code to process string descriptors that
!	  "read" like fixed string descriptors.  RKR 7-OCT-1981.
! 1-006 - Redirect jsb's from LIB$ANALYZE_SDESC_R3 to
!	  LIB$ANALYZE_SDESC_R2.  Use LIB$SCOPY_R_DX6 to do copying.
!	  RKR 18-NOV-1981.
!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE 
		(EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES
!
    REQUIRE 'RTLIN:STRLNK';	! linkage for LIB$ANALYZE_SDESC_R2

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    LIB$RADIX_POINT;				! Get radix point symbol

!
! INCLUDE FILES:
!

LIBRARY 'RTLSTARLE';

REQUIRE 'RTLIN:RTLPSECT';

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! PSECT DEFINITIONS:
!
DECLARE_PSECTS (LIB);
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    LIB$ANALYZE_SDESC_R2 : LIB$ANALYZE_SDESC_JSB_LINK, ! Extract length
						       ! and address of
						       ! 1st data byte
						       ! from descriptor
    LIB$SYS_TRNLOG,		! Translate a logical name
    LIB$SCOPY_R_DX6 : STRING_JSB,! Copy a string by reference
    LIB$SFREE1_DD6 : STRING_JSB;! Free a dynamic string

!+
! The following error codes are used in this module
!-

EXTERNAL LITERAL
    LIB$_STRTRU;				! string truncated


GLOBAL ROUTINE LIB$RADIX_POINT (	! Get radix point symbol

	RADIX_POINT_STR,	! Where to put symbol
	OUT_LEN			! Optional length of symbol

			       ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine returns the system's radix point symbol.  It 
!	should be used inside a digit string to divide the integer 
!	part from the fraction part, using the customary symbol.
!	This routine works by translating the logical name 
!	SYS$RADIX_POINT.  If the translation fails, this routine
!	returns ".", the US radix point symbol.  If the translation 
!	succeeds the text produced is returned.  Thus a system manager 
!	can define SYS$RADIX_POINT as a system-wide logical name to 
!	provide a default for all users, and an individual user with a 
!	special need can define SYS$RADIX_POINT as a user logical name 
!	to override the default.
!
! CALLING SEQUENCE:
!
!	ret_status.wlc.v = LIB$RADIX_POINT (radix_point_str.wt.dx 
!					    [,out_len.ww.r])
!
! FORMAL PARAMETERS:
!
!	radix_point_str	String to receive the radix point string
!	out_len		Optional length of the radix_point string.
!			This is valuable if radix_point_str
!			is a fixed-length string, since it does not 
!			include the padding.
!
! IMPLICIT INPUTS:
!
!	System-wide (or user-defined) logical name SYS$RADIX_POINT
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! CONDITION CODES:
!
!	SS$_NORMAL	Normal successful completion
!	LIB$_INVSTRDES	Invalid string descriptor
!	LIB$_STRTRU	String Truncated
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    BUILTIN
	NULLPARAMETER;

    MAP
	OUT_LEN : REF VECTOR [1, WORD],
	RADIX_POINT_STR : REF BLOCK [8, BYTE];

    LOCAL
	TRNLOG_STATUS,		! Status from LIB$SYS_TRNLOG
	RET_STATUS,		! Return status
	LOGDES : BLOCK [8, BYTE],	! String descriptor for logical
					! name
	NUMDES : BLOCK [8, BYTE];	! String descriptor for 
					! translated string

!+
! Initialize descriptors for logical name and translated string
!-
    LOGDES [DSC$B_CLASS] = DSC$K_CLASS_S;
    LOGDES [DSC$B_DTYPE] = DSC$K_DTYPE_T;
    LOGDES [DSC$W_LENGTH] = %CHARCOUNT ('SYS$RADIX_POINT');
    LOGDES [DSC$A_POINTER] = UPLIT BYTE('SYS$RADIX_POINT');

    NUMDES [DSC$B_CLASS] = DSC$K_CLASS_D;
    NUMDES [DSC$B_DTYPE] = DSC$K_DTYPE_T;
    NUMDES [DSC$W_LENGTH] = 0;
    NUMDES [DSC$A_POINTER] = 0;
!+
! Translate and convert the logical name SYS$RADIX_POINT to determine
! the RADIX_POINT symbol.
!-
    TRNLOG_STATUS = LIB$SYS_TRNLOG (LOGDES, 0, NUMDES);

    IF (( NOT .TRNLOG_STATUS) OR (.TRNLOG_STATUS EQL SS$_NOTRAN)) THEN
	LIB$SCOPY_R_DX6 ( 1, UPLIT ('.'), NUMDES ) ;

!+
! NUMDES is now the string to return to the caller.
!-
    RET_STATUS = LIB$SCOPY_R_DX6 ( .NUMDES [DSC$W_LENGTH], 
				   .NUMDES [DSC$A_POINTER], 
				   .RADIX_POINT_STR );

!+
! If caller supplied optional 2nd parameter (OUT_LEN), fill it in.
! No need to check status from LIB$ANALYZE_SDESC_R2.  If RADIX_POINT_STR
! was bad, call to LIB$SCOPY_R_DX6 will have caught it.
!-
    IF ( NOT NULLPARAMETER (2))
    THEN
	BEGIN
	LOCAL
	    WRITTEN_LEN,
	    WRITTEN_ADDR;
	IF .RADIX_POINT_STR [DSC$B_CLASS] GTRU DSC$K_CLASS_D
	THEN		! Use generalized extract
	    BEGIN
	    LIB$ANALYZE_SDESC_R2 ( .RADIX_POINT_STR ;
				    WRITTEN_LEN, WRITTEN_ADDR);
	    END

	ELSE		! Fetch length directly

	    WRITTEN_LEN = .RADIX_POINT_STR [DSC$W_LENGTH] ;

	OUT_LEN [0] = MIN (.WRITTEN_LEN, 
			   .NUMDES [DSC$W_LENGTH]);
	END;

!+
! Free space allocated for internal buffer
!-
    LIB$SFREE1_DD6 (NUMDES);

    RETURN (.RET_STATUS);
    END;				! End of routine LIB$RADIX_POINT

END					!End of module LIB$RADIX_POINT

ELUDOM
