%TITLE 'FOR$RAB - Return pointer to RAB of unit'
MODULE FOR$RAB (
		IDENT = '1-001'			! File: FORRAB.B32 Edit: SBL1001
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	FORTRAN Language Support
!
! ABSTRACT:
!
!	This module contains a procedure which returns a pointer to
!	the RAB of a unit.
!
! ENVIRONMENT:	User mode - AST reentrant
!
! AUTHOR: Steven B. Lionel, CREATION DATE: 13-Jan-1982
!
! MODIFIED BY:
!
! 1-001	- Original.  SBL 13-Jan-1982
!--


%SBTTL 'Declarations'
!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!

REQUIRE 'RTLIN:OTSLNK';				! Linkage definitions

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    FOR$RAB;					! Return pointer to RAB

!
! INCLUDE FILES:
!

LIBRARY 'RTLSTARLE';				! System symbols, typically from SYS$LIBRARY:STARLET.L32

REQUIRE 'RTLIN:RTLPSECT';			! Define PSECT declarations macros

REQUIRE 'RTLML:FORPAR';				! FORTRAN inter-module parameters

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! FIELDS:
!
!	NONE
!
! PSECTS:
!

DECLARE_PSECTS (LIB);				! Declare PSECTs for LIB$ facility

!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    FOR$$CB_FETCH: CALL_CCB NOVALUE,		! Get CCB of unit
    FOR$$ERR_OPECLO: NOVALUE;			! Error handler

%SBTTL 'FOR$RAB - Return pointer to RAB of unit'
GLOBAL ROUTINE FOR$RAB (
	LUN: REF VECTOR [, LONG]		! Unit to return RAB of
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This procedure returns as its function value a pointer to
!	the RAB of a FORTRAN LUN.
!
! CALLING SEQUENCE:
!
!	RAB-pointer.wa.v = FOR$RAB (LUN.rl.r)
!
! FORMAL PARAMETERS:
!
!	LUN - The logical unit number for which the address of the
!	      RAB is to be returned.  Passed by reference.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	The address of the RAB for the unit, or zero if the unit is not
!	a FORTRAN unit.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	UNWIND_ACTION: VOLATILE;

    GLOBAL REGISTER
	CCB = 11: REF BLOCK [, BYTE];

    !+
    ! Enable error handler.  Specify no operation on an unwind.
    !-

    ENABLE FOR$$ERR_OPECLO (UNWIND_ACTION);
    UNWIND_ACTION = FOR$K_UNWINDNOP;

    !+
    ! Call FOR$$CB_FETCH to get the CCB of the LUN.  It will signal
    ! an error if the LUN is invalid, and will place a zero in CCB if
    ! the unit is not owned by FORTRAN.
    !-

    FOR$$CB_FETCH (.LUN [0]);

    RETURN .CCB;				! RAB address is CCB address

    END;					! End of routine FOR$RAB
!<BLF/PAGE>

END						! End of module FOR$RAB

ELUDOM
