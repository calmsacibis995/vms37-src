MODULE STR$GET_FREE (				! Allocate and deallocate dynamic strings
		IDENT = '1-011'			! File: STRGETFRE.B32	Edit: JBS1011
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  String handling : allocation.
!
! ABSTRACT:
!
!	This module contains routines to get and free strings.  Within
!	the STR$ facility these operations are performed in-line;
!	these routines are for outsiders who wish to allocate and
!	deallocate strings.
!
! ENVIRONMENT:  VAX-11 User Mode
!
! AUTHOR: John Sauter, CREATION DATE: 14-MAR-1979
!
! MODIFIED BY:
!
! 1-001	- Original.  JBS 15-MAR-1979
! 1-002	- Use the new STR error messages.  Conversion of input scalars
!	   to by-reference will wait until later.  JBS 16-MAY-1979
! 1-003	- Convert the one input scalar to by-reference.  JBS 18-MAY-1979
! 1-004	- Add JSB entry points.  JBS 22-MAY-1979
! 1-005	- Make the JSB entry points end in _R4.  JBS 22-MAY-1979
! 1-006	- Use STRLNK.REQ.  JBS 04-JUN-1979
! 1-007	- Make some minor edits based on the code review.  JBS 12-JUN-1979
! 1-008	- Correct some misspelled comments.  JBS 22-JUN-1979
! 1-009	- Improve some comments.  JBS 30-JUL-1979
! 1-010 - String speedup, status from alloc and dealoc macros.  RW  11-Jan-1980
! 1-011	- Correct a typo in STR$GET1_DX_R4 (an extra dot).  JBS 04-MAR-1980
!--

!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!

REQUIRE 'RTLIN:STRLNK';				! JSB linkages

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    STR$GET1_DX,				! Allocate a string
    STR$GET1_DX_R4 : STR$JSB_GETFRE,		! (JSB entry point)
    STR$FREE1_DX,				! Deallocate a string
    STR$FREE1_DX_R4 : STR$JSB_GETFRE;		! (JSB entry point)

!
! INCLUDE FILES:
!

REQUIRE 'RTLIN:RTLPSECT';			! Macros for defining psects

REQUIRE 'RTLIN:STRMACROS';			! String macros

LIBRARY 'RTLSTARLE';				! System symbols

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! PSECTS:
!
DECLARE_PSECTS (STR);				! Declare psects for STR$ facility
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    LIB$STOP : NOVALUE;				! Signal a fatal error

!+
! The following are the error codes used by this module.
!-

EXTERNAL LITERAL
    STR$_NORMAL : UNSIGNED (6),			! Success
    STR$_ILLSTRCLA;				! Illegal string class


GLOBAL ROUTINE STR$GET1_DX (			! Allocate a string
	LEN, 					! Number of bytes to allocate
	DESCRIP					! Descriptor to allocate into
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Allocate a string.  LEN bytes are allocated to DESCRIP, which
!	must be a dynamic descriptor.  If the descriptor already
!	has enough storage allocated to it, nothing is done.  However,
!	if the descriptor does not reference a "short string", it cannot
!	be shortened: it will be deallocated and reallocated instead.
!
! FORMAL PARAMETERS:
!
!	LEN.rw.r	Number of bytes to allocate in the string.
!	DESCRIP.mq.r	The descriptor which will be re-allocated.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION CODES:
!
!	Always SS$_NORMAL
!
! SIDE EFFECTS:
!
!	May deallocate the descriptor's storage and allocate new
!	storage for it.
!	Signals ILLEGAL STRING CLASS if the descriptor is not dynamic.
!	Signals STR$_INSVIRMEM if can't get dynamic string space
!	Signals STR$_FATINTERR if can't free space allocated to string
!
!--

    BEGIN

    MAP
	DESCRIP : REF $STR$DESCRIPTOR;

!+
! Verify that the descriptor is a dynamic string.
!-

    CASE .$STR$CLASS (DESCRIP) FROM DSC$K_CLASS_Z TO DSC$K_CLASS_D OF
	SET

	[DSC$K_CLASS_D] :
	    BEGIN

	    LOCAL
		RETURN_STATUS;			! remember status

!+
! Prevent AST's to change string while we are looking at it.  If string is
! already being written, signal an error
!-
	    $STR$INTERLOCK (1);

	    IF (RETURN_STATUS = $STR$INTERLOCK_WRITE (.DESCRIP, 0))
	    THEN
!+
! This is a dynamic descriptor.  If it has enough storage already,
! we need not re-allocate it.
!-

		IF ($STR$NEED_ALLOC ((..LEN AND %X'FFFF'), $STR$DYN_AL_LEN (DESCRIP)))
		THEN
		    BEGIN
!+
! We must deallocate and reallocate the string.  If the deallocate
! succeeds then do the reallocate.
!-

		    IF (RETURN_STATUS = $STR$DEALLOCATE (DESCRIP))
		    THEN
			RETURN_STATUS = $STR$ALLOCATE ((..LEN AND %X'FFFF'), DESCRIP);

		    END
		ELSE
		    $STR$LENGTH (DESCRIP) = (..LEN AND %X'FFFF');

	    $STR$INTERLOCK_CLEAR (.DESCRIP, 0);
	    $STR$SIGNAL_FATAL (RETURN_STATUS);
	    END;

	[DSC$K_CLASS_S, INRANGE, OUTRANGE] :
	    LIB$STOP (STR$_ILLSTRCLA);
	TES;

    RETURN (SS$_NORMAL);
    END;					! end of STR$GET1_DX


GLOBAL ROUTINE STR$GET1_DX_R4 (			! Allocate a string
	LEN, 					! Number of bytes to allocate
	DESCRIP					! Descriptor to allocate into
    ) : STR$JSB_GETFRE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Allocate a string.  LEN bytes are allocated to DESCRIP, which
!	had better be a dynamic descriptor.  If the descriptor already
!	has enough storage allocated to it, nothing is done.  However,
!	if the descriptor does not reference a "short string", it cannot
!	be shortened: it will be deallocated and reallocated instead.
!
! FORMAL PARAMETERS:
!
!	LEN.rw.v	Number of bytes to allocate in the string.
!	DESCRIP.mq.r	The descriptor which will be re-allocated.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION CODES:
!
!	Always SS$_NORMAL
!
! SIDE EFFECTS:
!
!	May deallocate the descriptor's storage and allocate new
!	storage for it.
!	Signals ILLEGAL STRING CLASS if the descriptor is not dynamic.
!	Signals STR$_INSVIRMEM if can't get dynamic string space
!	Signals STR$_FATINTERR if can't free space allocated to string
!
!--

    BEGIN

    MAP
	DESCRIP : REF $STR$DESCRIPTOR;

!+
! Verify that the descriptor is a dynamic string.
!-

    CASE .$STR$CLASS (DESCRIP) FROM DSC$K_CLASS_Z TO DSC$K_CLASS_D OF
	SET

	[DSC$K_CLASS_D] :
	    BEGIN

	    LOCAL
		RETURN_STATUS;			! remember status

!+
! Prevent AST's to change string while we are looking at it.  If string is
! already being written, signal an error
!-
	    $STR$INTERLOCK (1);

	    IF (RETURN_STATUS = $STR$INTERLOCK_WRITE (.DESCRIP, 0))
	    THEN
!+
! This is a dynamic descriptor.  If it has enough storage already,
! we need not re-allocate it.
!-

		IF ($STR$NEED_ALLOC ((.LEN AND %X'FFFF'), $STR$DYN_AL_LEN (DESCRIP)))
		THEN
		    BEGIN
!+
! We must deallocate and reallocate the string.  If the deallocate
! succeeds then do the reallocate.
!-

		    IF (RETURN_STATUS = $STR$DEALLOCATE (DESCRIP))
		    THEN
			RETURN_STATUS = $STR$ALLOCATE ((.LEN AND %X'FFFF'), DESCRIP);

		    END
		ELSE
		    $STR$LENGTH (DESCRIP) = (.LEN AND %X'FFFF');

	    $STR$INTERLOCK_CLEAR (.DESCRIP, 0);
	    $STR$SIGNAL_FATAL (RETURN_STATUS);
	    END;

	[DSC$K_CLASS_S, INRANGE, OUTRANGE] :
	    LIB$STOP (STR$_ILLSTRCLA);
	TES;

    RETURN (SS$_NORMAL);
    END;					! end of STR$GET1_DX_R4


GLOBAL ROUTINE STR$FREE1_DX (			! Deallocate a string
	DESCRIP					! The descriptor to deallocate
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Deallocate a string.  The string must by dynamic.  If the
!	string is "short", it is put on a queue of strings of the
!	proper length.  Otherwise it is returned to virtual memory.
!
! FORMAL PARAMETERS:
!
!	DESCRIP.wq.r	The descriptor of the string to deallocate.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always SS$_NORMAL
!
! SIDE EFFECTS:
!
!	May deallocate virtual storage.
!	May signal STR$_FATINTERR if can't deallocate string
!	May signal STR$_ILLSTRCLA if not a dynamic string
!
!--

    BEGIN

    MAP
	DESCRIP : REF $STR$DESCRIPTOR;

!+
! Verify that this is a dynamic descriptor.
!-

    CASE .$STR$CLASS (DESCRIP) FROM DSC$K_CLASS_S TO DSC$K_CLASS_D OF
	SET

	[DSC$K_CLASS_D] :
	    BEGIN

	    LOCAL
		RETURN_STATUS;			! remember status

!+
! Prevent AST's to change string while we are looking at it.  If string is
! already being written, signal an error
!-
	    $STR$INTERLOCK (1);

	    IF (RETURN_STATUS = $STR$INTERLOCK_WRITE (.DESCRIP, 0))
	    THEN
		BEGIN
!+
! Deallocate the string data.
!-

		IF (RETURN_STATUS = $STR$DEALLOCATE (DESCRIP))
!+
! Make sure the pointer and length field are zero, so the user is less
! likely to mistakenly use an old address.  Also, if he calls
! STR$GET1_DX without reinitializing the descriptor it will not get
! confused.
!-
		THEN
		    BEGIN
		    DESCRIP [DSC$W_LENGTH] = 0;
		    DESCRIP [DSC$A_POINTER] = 0;
		    END;

		END;

	    $STR$INTERLOCK_CLEAR (.DESCRIP, 0);
	    $STR$SIGNAL_FATAL (RETURN_STATUS);
	    END;

	[INRANGE, OUTRANGE] :
	    LIB$STOP (STR$_ILLSTRCLA);
	TES;

    RETURN (SS$_NORMAL);
    END;					! end of STR$FREE1_DX


GLOBAL ROUTINE STR$FREE1_DX_R4 (		! Deallocate a string
	DESCRIP					! The descriptor to deallocate
    ) : STR$JSB_GETFRE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Deallocate a string.  The string must by dynamic.  If the
!	string is "short", it is put on a queue of strings of the
!	proper length.  Otherwise it is returned to virtual memory.
!
! FORMAL PARAMETERS:
!
!	DESCRIP.wq.r	The descriptor of the string to deallocate.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION CODES:
!
!	Always SS$_NORMAL.
!
! SIDE EFFECTS:
!
!	May deallocate virtual storage.
!	May signal STR$_FATINTERR if can't deallocate string
!	May signal STR$_ILLSTRCLA if not a dynamic string
!
!--

    BEGIN

    MAP
	DESCRIP : REF $STR$DESCRIPTOR;

!+
! Verify that this is a dynamic descriptor.
!-

    CASE .$STR$CLASS (DESCRIP) FROM DSC$K_CLASS_S TO DSC$K_CLASS_D OF
	SET

	[DSC$K_CLASS_D] :
	    BEGIN

	    LOCAL
		RETURN_STATUS;			! remember status

!+
! Prevent AST's to change string while we are looking at it.  If string is
! already being written, signal an error
!-
	    $STR$INTERLOCK (1);

	    IF (RETURN_STATUS = $STR$INTERLOCK_WRITE (.DESCRIP, 0))
	    THEN
		BEGIN
!+
! Deallocate the string data.
!-

		IF (RETURN_STATUS = $STR$DEALLOCATE (DESCRIP))
!+
! Make sure the pointer and length field are zero, so the user is less
! likely to mistakenly use an old address.  Also, if he calls
! STR$GET1_DX without reinitializing the descriptor it will not get
! confused.
!-
		THEN
		    BEGIN
		    DESCRIP [DSC$W_LENGTH] = 0;
		    DESCRIP [DSC$A_POINTER] = 0;
		    END;

		END;

	    $STR$INTERLOCK_CLEAR (.DESCRIP, 0);
	    $STR$SIGNAL_FATAL (RETURN_STATUS);
	    END;

	[INRANGE, OUTRANGE] :
	    LIB$STOP (STR$_ILLSTRCLA);
	TES;

    RETURN (SS$_NORMAL);
    END;					! end of STR$FREE1_DX_R4

END						! end of module STR$GET_FREE

ELUDOM
