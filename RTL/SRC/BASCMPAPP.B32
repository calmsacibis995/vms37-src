MODULE BAS$CMP_APPROX (				!
		IDENT = '1-004'			! File: BASCMPAPP.B32
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  BASIC-PLUS-2 Miscellaneous
!
! ABSTRACT:
!
!	This module implements the BASIC approximate compare function,
!	which indicates whether or not its two arguments will print the same.
!
! ENVIRONMENT:  VAX-11 User Mode
!
! AUTHOR: John Sauter, CREATION DATE: 01-MAR-1979
!
! MODIFIED BY:
!
! 1-001	- Original.  JBS 01-MAR-1979
! 1-002	- Change from JSB to CALL entry points.  JBS 21-MAR-1979
! 1-003	- Reverse the result definition, so TST BEQL will work.  JBS 25-MAR-1979
! 1-004	- Use the new conversion routines.  JBS 11-JUL-1979
!--

!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!
!	NONE
!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    BAS$CMPF_APP,				! Compare floating values
    BAS$CMPD_APP;				! Compare double values

!
! INCLUDE FILES:
!

REQUIRE 'RTLIN:RTLPSECT';			! Macros for defining psects

LIBRARY 'RTLSTARLE';				! System definitions

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! PSECTS:
!
DECLARE_PSECTS (BAS);				! Declare psects for BAS$ facility
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    BAS$CVT_OUT_D_G,				! Convert double to text
    BAS$$STOP : NOVALUE;			! signals fatal error

!+
! The following are the error codes used in this module.
!-

EXTERNAL LITERAL
    BAS$K_PROLOSSOR;				! Program lost, sorry


GLOBAL ROUTINE BAS$CMPF_APP (			! Compare floating values
	VAL1, 					! First value to compare
	VAL2					! Second value to compare
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Compares two floating values.  If the values will PRINT the same,
!	they are considered "approximately equal".  This function is useful
!	in Computer Assisted Education applications, when one value is
!	computed and another is read from the terminal.  If the two values
!	print the same we do not want to say: "Wrong! You typed x, correct
!	answer is x."
!
! CALLING SEQUENCE:
!
!	PUSHL	VAL2
!	PUSHL	VAL1
!	CALLS	#2, BAS$CMPF_APP
!	TSTL	R0
!	BEQL	1$			; Branch if VAL1 == VAL2
!
! FORMAL PARAMETERS:
!
!	VAL1.rf.v	The first value to compare
!	VAL2.rf.v	The second value to compare
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	1 = not approximately equal,
!	0 = approximately equal.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    BUILTIN
	CVTFD;

    LOCAL
	D_VALUE : VECTOR [2],
	DSC1 : BLOCK [8, BYTE],
	BUF1 : VECTOR [14, BYTE],
	DSC2 : BLOCK [8, BYTE],
	BUF2 : VECTOR [14, BYTE],
	RET_LENGTH;

!+
! Call the formatter for each value to get two character strings.
!-
    DSC1 [DSC$W_LENGTH] = 14;
    DSC1 [DSC$B_DTYPE] = DSC$K_DTYPE_T;
    DSC1 [DSC$B_CLASS] = DSC$K_CLASS_S;
    DSC1 [DSC$A_POINTER] = BUF1;
    CVTFD (VAL1, D_VALUE [0]);
    BAS$CVT_OUT_D_G (D_VALUE, 0, RET_LENGTH, DSC1, 0);
    DSC1 [DSC$W_LENGTH] = .RET_LENGTH;
!
    DSC2 [DSC$W_LENGTH] = 14;
    DSC2 [DSC$B_DTYPE] = DSC$K_DTYPE_T;
    DSC2 [DSC$B_CLASS] = DSC$K_CLASS_S;
    DSC2 [DSC$A_POINTER] = BUF2;
    CVTFD (VAL2, D_VALUE [0]);
    BAS$CVT_OUT_D_G (D_VALUE, 0, RET_LENGTH, DSC2, 0);
    DSC2 [DSC$W_LENGTH] = .RET_LENGTH;
!+
! If the two strings are equal, the values are approximately equal.
!-

    IF (.DSC1 [DSC$W_LENGTH] NEQU .DSC2 [DSC$W_LENGTH]) THEN RETURN (1);

    IF (CH$EQL (.RET_LENGTH, .DSC1 [DSC$A_POINTER], .RET_LENGTH, .DSC2 [DSC$A_POINTER])) THEN RETURN (0);

    RETURN (1);
    END;					! end of BAS$CMPF_APP


GLOBAL ROUTINE BAS$CMPD_APP (			! Compare double values
	VAL1_LO, 				! First value to compare
	VAL1_HI, VAL2_LO, 			! Second value to compare
	VAL2_HI) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Compares two double values.  If the values will PRINT the same,
!	they are considered "approximately equal".  This function is useful
!	in Computer Assisted Education applications, when one value is
!	computed and another is read from the terminal.  If the two values
!	print the same we do not want to say: "Wrong! You typed x, correct
!	answer is x."
!
! CALLING SEQUENCE:
!
!	MOVD	VAL2, -(SP)
!	MOVD	VAL1, -(SP)
!	CALLS	#4, BAS$CMPD_APP
!	TSTL	R0
!	BEQL	1$			; Branch if VAL1 == VAL2
!
! FORMAL PARAMETERS:
!
!	VAL1.rd.v	The first value to compare
!	VAL2.rd.v	The second value to compare
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	1 = not approximately equal,
!	0 = approximately equal.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	D_VALUE : VECTOR [2],
	DSC1 : BLOCK [8, BYTE],
	BUF1 : VECTOR [14, BYTE],
	DSC2 : BLOCK [8, BYTE],
	BUF2 : VECTOR [14, BYTE],
	RET_LENGTH;

!+
! Call the formatter for each value to get two character strings.
!-
    DSC1 [DSC$W_LENGTH] = 14;
    DSC1 [DSC$B_DTYPE] = DSC$K_DTYPE_T;
    DSC1 [DSC$B_CLASS] = DSC$K_CLASS_S;
    DSC1 [DSC$A_POINTER] = BUF1;
    D_VALUE [0] = .VAL1_LO;
    D_VALUE [1] = .VAL1_HI;
    BAS$CVT_OUT_D_G (D_VALUE, 0, RET_LENGTH, DSC1, 0);
    DSC1 [DSC$W_LENGTH] = .RET_LENGTH;
!
    DSC2 [DSC$W_LENGTH] = 14;
    DSC2 [DSC$B_DTYPE] = DSC$K_DTYPE_T;
    DSC2 [DSC$B_CLASS] = DSC$K_CLASS_S;
    DSC2 [DSC$A_POINTER] = BUF2;
    D_VALUE [0] = .VAL2_LO;
    D_VALUE [1] = .VAL2_HI;
    BAS$CVT_OUT_D_G (D_VALUE, 0, RET_LENGTH, DSC2, 0);
    DSC2 [DSC$W_LENGTH] = .RET_LENGTH;
!+
! If the two strings are equal, the values are approximately equal.
!-

    IF (.DSC1 [DSC$W_LENGTH] NEQU .DSC2 [DSC$W_LENGTH]) THEN RETURN (1);

    IF (CH$EQL (.RET_LENGTH, .DSC1 [DSC$A_POINTER], .RET_LENGTH, .DSC2 [DSC$A_POINTER])) THEN RETURN (0);

    RETURN (1);
    END;					! end of BAS$CMPF_APP

END						! end of module BAS$CMP_APPROX

ELUDOM
