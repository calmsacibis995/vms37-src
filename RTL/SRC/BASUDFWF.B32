MODULE BAS$$UDF_WF (				! BASIC Write Formatted UDF
		IDENT = '1-013'			! File: BASUDFWF.B32 Edit:PLL1013
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY:  BASIC Support Library - not user callable
!
! ABSTRACT:
!
!	Perform the User data formatting required for Basic Print Using.
!
! ENVIRONMENT:  User access mode; reentrant AST level or not.
!
! AUTHOR:	Donald G. Petersen;	CREATION DATE: 14-May-79
!
! MODIFIED BY:
!
! 0-001	- original.  DGP 14-May-79
! 1-002 - Change linkage of BAS$$UDF_WF0.  DGP 22-May-79
! 1-003 - Pass a null return string to the format interpreter.  DGP 31-May-79
! 1-004 - Format string reversion must be handled here.  DGP  01-Jun-79
! 1-005 - Change the output routine which takes care of the string returned
!	  by the format interpreter.  DGP 04-Jun-79
! 1-006	- Remove the unused reference to STR$COPY.  JBS 16-JUL-1979
! 1-007 - Make format reversions always start a new record.  DGP 01-Aug-79
! 1-008 - Update cursor position.  DGP 02-Aug-79
! 1-009 - Set temp string pointers to 0 initially.  DGP 18-Sep-79
! 1-010 - Pick up the scale factor from the ISB and pass it to the format
!	  interpreter.  DGP 25-Nov-79
! 1-011 - Make PRINT USING look at the right margin.  DGP 25-Jan-80
! 1-012 - When the print line exceeds the buffer, a CRLF should not be inserted
!	  as it currently is.  DGP 03-Feb-1981
! 1-013 - The format string descriptor must specify the class and dtype to 
!	  satisfy the enhanced STR$ routines.  PLL 28-Sep-81
!--

!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES
!

REQUIRE 'RTLIN:OTSLNK';				! define all linkages

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    BAS$$UDF_WF0 : JSB_UDF0 NOVALUE,		! initialization
    BAS$$UDF_WF1 : CALL_CCB NOVALUE,		! format one user I/O list element
    BAS$$UDF_WF9 : JSB_UDF9 NOVALUE;		! end of user I/O list - finish

BUILTIN
    CVTLD,					! Escape to  CVTLD instruction
    MOVTUC;					! Escape to  MOVTUC instruction
!
! INCLUDE FILES:
!

REQUIRE 'RTLML:BASPAR';				! Intermodule BASIC parameters and constants

REQUIRE 'RTLML:OTSISB';				! I/O statement block (ISB) offsets

REQUIRE 'RTLML:OTSLUB';				! Only needed to get LUB length!

REQUIRE 'RTLIN:OTSMAC';				! Macros

REQUIRE 'RTLIN:RTLPSECT';			! Define DECLARE_PSECTS macro

LIBRARY 'RTLSTARLE';				! STARLET library for macros and symbols

!
! EQUATED SYMBOLS:
!
!
!	NONE
						! output stream
!
! MACROS:
!
!	NONE
!
! PSECT DECLARATIONS:
!
DECLARE_PSECTS (BAS);				! declare PSECTs for BAS$ facility
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    BAS$$FORMAT_INT : NOVALUE,			! Basic format interpreter
    STR$FREE1_DX,				! Deallocate a dynamic string
    BAS$$DO_WRITE : JSB_DO_WRITE NOVALUE,	! Output routine
    BAS$$REC_WF0 : JSB_REC0 NOVALUE,		! initialize formatted output
    BAS$$REC_WF1 : JSB_REC1 NOVALUE,		! write formatted
    BAS$$REC_WF9 : JSB_REC9 NOVALUE;		! end formatted output


GLOBAL ROUTINE BAS$$UDF_WF0 			! Write formatted UDF initialization
    : JSB_UDF0 NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Initialize PRINT USING User data formatter (UDF)
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	LUB$V_AST_GUARD		Guard bit for AST reentrancy
!	LUB$A_BUF_PTR		Pointer to next byte in user buffer
!
! IMPLICIT OUTPUTS:
!
!	LUB$V_AST_GUARD		Guard bit for AST reentrancy
!	LUB$A_BUF_BEG		Pointer to first byte of user buffer
!	LUB$A_BUF_PTR		Adr of next byte of output
!				data buffer
!	LUB$A_BUF_END		Adr of end of data buffer
!	LUB$V_FORM_CHAR		indicates that last element transmitter ended in
!				a comma or semicolon format character
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    EXTERNAL REGISTER
	CCB : REF BLOCK [, BYTE];

    !+
    ! A guard bit is used to ensure AST reentrancy.  The bit is set to 1
    ! at the top of the routine, tested for 1 at the bottom of the routine,
    ! and set to 0 upon exitting.  If the test for 1 fails at the bottom of
    ! the routine, then an AST has gone off and used this routine possibly
    ! changing the buffer pointers. Therefore this routine will loop back and
    ! run itself again in its entirety.
    !-

    DO
	BEGIN

	!+
	! Set the guard bit
	!-

	CCB [LUB$V_AST_GUARD] = 1;

	!+
	! Call record level to get buffer pointers.
	!-

	BAS$$REC_WF0 ();

	!+
	! set the beginning of the buffer if there is no format character pending
	!-

	IF NOT .CCB [LUB$V_FORM_CHAR] THEN CCB [LUB$A_BUF_BEG] = .CCB [LUB$A_BUF_PTR];

	!+
	! Check the guard bit.  If it is now 0, then an AST has gone thru this routine
	! Since the data base may have been altered in an unpredictable manner, it
	! is necessary to redo the entire routine.  Note: in worst case processing,
	! the run-time for this routine is essentially unbounded.
	!-

	END
    UNTIL .CCB [LUB$V_AST_GUARD];		! End of AST guard loop

    CCB [LUB$V_AST_GUARD] = 0;
    END;


GLOBAL ROUTINE BAS$$UDF_WF1 (ELEM_TYPE, ELEM_SIZE, ELEM_ADR, FORMAT_CHAR	! format character
    ) : CALL_CCB NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Write formatted User Data Formatter.
!	Accept an I/O element, format it, and put it in the record buffer.
!	Calls record level processors to perform the actual I/O if the buffer
!	is full or if non-forcible and end-of-record (no format character).
!
! FORMAL PARAMETERS:
!
!	ELEM_TYPE.rlu.v		data type of the element
!	ELEM_SIZE.rlu.v		size of the data element
!	ELEM_ADR.rlu.r		adr of the data element to be written
!				Points to a descriptor for strings
!	FORMAT_CHAR.rlu.v		type of format character which followed the data element
!
! IMPLICIT INPUTS:
!
!	LUB$V_AST_GUARD		guard bit for AST reentrancy
!	LUB$L_PRINT_POS		current cursor position
!	LUB$V_OUTBUF_DR		indicates valid data in the output buffer.
!	LUB$W_R_MARGIN		size of buffer specified in OPEN statement.
!	LUB$V_FORM_CHAR		flag that a format character (',' or ';') was
!				seen on the last element.
!	LUB$A_BUF_BEG		pointer to beginning of user buffer
!	LUB$A_BUF_PTR		pointer to current position in the buffer.
!	LUB$A_BUF_END		pointer to last byte of buffer + 1.
!	ISB$B_SCALE_FAC		the 0 - -6 factor.
!
! IMPLICIT OUTPUTS:
!
!	LUB$V_AST_GUARD		guard bit for AST reentrancy
!	LUB$V_OUTBUF_DR		indicates valid data in output buffer
!	LUB$V_FORM_CHAR		flag to indicate a format character was seen
!	LUB$L_PRINT_POS		internal cursor position.
!	LUB$A_BUF_PTR		next byte in the user buffer
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	If an AST goes off while we are in this routine and calls this routine,
!	then this routine will be repeated upon return to the outer level.
!	It will continue to be repeated until there are no more ASTs using this routine.
!
!--

    BEGIN

    EXTERNAL REGISTER
	CCB : REF BLOCK [, BYTE];

    MAP
	ELEM_ADR : REF VECTOR;			! element is call-by-reference

    LOCAL
	BUF_LENGTH,				! length of the output buffer
	BUF_END,				! the end of the print buffer
	RET_FORMAT_ADDR,			! points to next byte in format
						! string.  Returned by the format
						! interpreter.
	RET_STR_ADDR,				! Working storage in case the string
						! which is returned does not fit
						! in the buffer
	RET_STR_LENGTH,				! Working store in case the return
						! string is too long for the buffer.
	FORMAT_DSC : BLOCK [8, BYTE],		! desc. for passing format string
						! to the format interpreter
	DSC : BLOCK [8, BYTE];			! dynamic string descriptor for

    						! output from the format interpreter

    !+
    ! This loop is to ensure AST reentrancy.
    !-

    DO
	BEGIN
	CCB [LUB$V_AST_GUARD] = 1;

	!+
	! Allocate a null dynamic string for the format interpreter to return its hand-
	! icraft in.  The string is allocated here so that this will be AST
	! reentrant and it is dynamic so that the return string will always fit.
	!-

	DSC [DSC$B_DTYPE] = DSC$K_DTYPE_T;
	DSC [DSC$B_CLASS] = DSC$K_CLASS_D;
	DSC [DSC$W_LENGTH] = 0;
	DSC [DSC$A_POINTER] = 0;

	!+
	! Toggle the format character flag appropriately so that IO_END will know
	! whether or not to do a PUT.
	!-

	CASE .FORMAT_CHAR FROM BAS$K_SEMI_FORM TO BAS$K_NO_FORM OF
	    SET

	    [BAS$K_SEMI_FORM] :
		CCB [LUB$V_FORM_CHAR] = 1;

	    [BAS$K_COMMA_FOR] :
		CCB [LUB$V_FORM_CHAR] = 1;

	    [BAS$K_NO_FORM] :
		CCB [LUB$V_FORM_CHAR] = 0;
	    TES;

	!+
	! Call the format interpreter.  It will scan the format string, check its
	! validity, and format this element according to the string.
	! Check for a format string length of 0 and reset to the front of
	! the string if necessary.  Format reversion always starts a new record
	! by definition.  So, put the current record.
	!-

	IF .CCB [ISB$W_LEN_REM] EQL 0
	THEN
	    BEGIN
	    BAS$$DO_WRITE();
	    CCB [ISB$A_FMT_PTR] = .CCB [ISB$A_FMT_BEG];
	    CCB [ISB$W_LEN_REM] = .CCB [ISB$W_FMT_LEN];
	    END;

	FORMAT_DSC [DSC$B_DTYPE] = DSC$K_DTYPE_T;
	FORMAT_DSC [DSC$B_CLASS] = DSC$K_CLASS_S;
	FORMAT_DSC [DSC$W_LENGTH] = .CCB [ISB$W_LEN_REM];
	FORMAT_DSC [DSC$A_POINTER] = .CCB [ISB$A_FMT_PTR];
	BAS$$FORMAT_INT (.ELEM_ADR, FORMAT_DSC, .ELEM_TYPE, DSC, RET_FORMAT_ADDR, .CCB [ISB$B_SCALE_FAC]);

	!+
	! Update the format pointer so that it now points to the next format
	! field.
	!-

	CCB [ISB$W_LEN_REM] = .CCB [ISB$W_LEN_REM] - (.RET_FORMAT_ADDR - .CCB [ISB$A_FMT_PTR]);
	CCB [ISB$A_FMT_PTR] = .RET_FORMAT_ADDR;

	!+
	! Now that the format interpreter has been called, the length of the for-
	! matted item is known exactly.  It is time to determine if the item will
	! fit into the output buffer.  If the item is too big, then it is put out
	! in sections.  No check is made to see whether the buffer is already
	! 'dirty'.  The assumption is made that since this is formatted output,
	! it will be put out exactly as specified.
	!-

	RET_STR_ADDR = .DSC [DSC$A_POINTER];
	RET_STR_LENGTH = .DSC [DSC$W_LENGTH];
	BUF_END = (IF .CCB [LUB$W_R_MARGIN] GTR 0
	  THEN MIN(.CCB [LUB$A_BUF_END], .CCB [LUB$A_BUF_BEG] + .CCB [LUB$W_R_MARGIN])
	  ELSE .CCB [LUB$A_BUF_END]);
	BUF_LENGTH = .BUF_END - .CCB [LUB$A_BUF_PTR];

	UNTIL .CCB [LUB$A_BUF_PTR] + .RET_STR_LENGTH LEQ .BUF_END DO
	    BEGIN
	    CH$MOVE (.BUF_LENGTH, .RET_STR_ADDR, .CCB [LUB$A_BUF_PTR]);

	    !+
	    ! Dump the contents of the buffer and update the length and
	    ! the pointer into the returned formatted string.
	    !-

	    CCB [LUB$A_BUF_PTR] = .BUF_END;
	    BAS$$DO_WRITE (BAS$K_BUF_EXC);
	    RET_STR_LENGTH = .RET_STR_LENGTH - .BUF_LENGTH;
	    RET_STR_ADDR = .RET_STR_ADDR + .BUF_LENGTH;
	    BUF_LENGTH = .BUF_END - .CCB [LUB$A_BUF_PTR];
	    END;

	CH$MOVE (.RET_STR_LENGTH, .RET_STR_ADDR, .CCB [LUB$A_BUF_PTR]);
	CCB [LUB$A_BUF_PTR] = .CCB [LUB$A_BUF_PTR] + .RET_STR_LENGTH;
!+
! Update the current cursor position.
!-
	CCB [LUB$L_PRINT_POS] = .CCB [LUB$L_PRINT_POS] + .RET_STR_LENGTH;
	CCB [LUB$V_OUTBUF_DR] = 1;
	END
    UNTIL .CCB [LUB$V_AST_GUARD];		! End of AST guard loop

    !+
    ! Free the heap storage allocated.
    !-

    STR$FREE1_DX (DSC);
    CCB [LUB$V_AST_GUARD] = 1;
    RETURN;
    END;					! END of BAS$$UDF_WF1


GLOBAL ROUTINE BAS$$UDF_WF9 			! I/O end for UDF level of Write Formatted.
    : JSB_UDF9 NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Call the record level I/O end of list routine.  Reset the cursor position
!	if a PUT was done
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	LUB$V_AST_GUARD		Guard for AST reentrancy
!	LUB$V_FORM_CHAR		last element transmitter ended with a format char
!
! IMPLICIT OUTPUTS:
!
!	LUB$V_AST_GUARD		guard for AST reentrancy
!	LUB$L_PRINT_POS		current cursor position
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	This routine will loop back and reexecute if it detects that it was
!	called by an AST while it was executing.
!
!--

    BEGIN

    EXTERNAL REGISTER
	CCB : REF BLOCK [, BYTE];

    !+
    ! This outer loop is to detect an AST calling this routine while it is
    ! executing.
    !-

    DO
	BEGIN
	CCB [LUB$V_AST_GUARD] = 1;		! Initialize the guard bit
	BAS$$REC_WF9 ();
	! Time to reset the cursor position to zero perhaps

	IF NOT .CCB [LUB$V_FORM_CHAR] THEN CCB [LUB$L_PRINT_POS] = 0;

	END
    UNTIL .CCB [LUB$V_AST_GUARD];		! End of AST guard loop

    CCB [LUB$V_AST_GUARD] = 0;
    END;

END

ELUDOM
						! End of module - BASUDFWF
