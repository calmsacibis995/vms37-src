MODULE COM$FDBSET (		! FORTRAN compatibility CALL FDBSET
	IDENT = '1-005',	! File: COMFDBSET.B32  Edit: SBL1005
	LINKAGE (FORTRAN)	! Call-by-reference
	) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  FORTRAN Compatibility Library
!
! ABSTRACT:
!
!	Set RMS FAB quantities which are equivalent
!	of the FCS-11 FDB (File data block).
!
! ENVIRONMENT:  User Mode - AST re-entrant
!
! AUTHOR:  Thomas N. Hastings, CREATION DATE:  5-Dec-1977
!
! MODIFIED BY:
!
! 	Thomas N. Hastings, 4-Dec-1977: VERSION 0
! 0-1	- original
! 0-2	- Use FOR$$GET_VM routine.  TNH 5-Dec-77
! 0-4	- Setup RAB, LOGICAL_UNIT[0].  TNH 6-Dec-77
! 0-5	- PSECT COM$, Pop LUB.  TNH 8-Dec-77
! 0-6	- Fix dot problems in P.  TNH 9-Dec-77
! 0-7	- Turn on V_OLD_FILE on APPEND and READONLY.  Now you can
!	  say 'A' for append and default open with a WRITE.  JMT 5-Jan-78
! 0-8	- PSECT F4PCOMPAT$CODE.  TNH 9-Jan-78
! 0-9	- String args as char by-ref or by-decscr.  TNH 18-Jan-78
! 0-10	- Global register CCB.  JMT 8-Apr-78
! 0-12	- Change to STARLET library. DGP 20-Apr-78
! 0-13	- Change REQUIRE files for VAX system build.  DGP 28-Apr-78
! 0-14	- Change STARLET to RTLSTARLE to avoid conflicts.  DGP 1-May-78
! 0-15	- Use JSB linkages.  TNH 22-MAY-78
! 0-16	- Pass OPEN$K_LUN_MIN to FOR$$CB_PUSH.  TNH 22-May-78
! 0-17	- Change file name to COMFDBSET.B32, and change the names
!	   of the REQUIRE files similarly.  JBS 14-NOV-78
! 1-001	- Update version number and copyright notice.  JBS 16-NOV-78
! 1-002	- Declare NULLPARAMETER for new BLISS compiler.  JBS 22-NOV-78
! 1-003	- Change REQUIRE file names from FOR... to OTS...  JBS 07-DEC-78
! 1-004	- Change OPEN prefix to LUB.  JBS 13-DEC-78
! 1-005 - Set FAB$V_UPI when SHARED.  SPR 11-27878  SBL 27-Dec-1979
!--

!
! LINKAGES:
!
REQUIRE 'RTLIN:OTSLNK';		! Define all linkages

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
	FDBSET: NOVALUE;		! Set FDB equivalent data

!
! INCLUDE FILES:
!
REQUIRE 'RTLML:FORERR';		! Define FORTRAN error numbers
REQUIRE 'RTLML:OTSISB';		! Define length of ISB
REQUIRE 'RTLML:OTSLUB';		! Define FORTRAN logical unit block
REQUIRE 'RTLIN:OTSMAC';		! Define macro DSC$DESCRIPTOR
REQUIRE 'RTLIN:RTLPSECT';	! Define DECLARE_PSECTS macro
REQUIRE 'RTLML:FORPAR';		! Define FORTRAN inter-module parameters
LIBRARY 'RTLSTARLE';		! STARLET library for macros and symbols
!
! MACROS:
!

MACRO
	BYTE_BY_REF = 0, 0, 8, 0 %;	! First byte in descriptor.
					! used to fetch first byte of character by-reference.
!
! EQUATED SYMBOLS:
!

!
! PSECT DECLARATIONS:
!

	DECLARE_PSECTS (F4PCOMPAT);	! declare PSECTs for COM$ facility
					! F4PCOMPAT$CODE and F4PCOMPAT$DATA

!
! OWN STORAGE:
!

!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
	FOR$$ERR_OPECLO: NOVALUE ADDRESSING_MODE (GENERAL),	! Error handler for OPEN/CLOSE
	FOR$$CB_PUSH: JSB_CB_PUSH NOVALUE ADDRESSING_MODE (GENERAL),	! Allocate LUB/ISB/RAB if necessary
	FOR$$CB_POP: JSB_CB_POP NOVALUE ADDRESSING_MODE (GENERAL),	! Pop LUB/ISB/RAB
	FOR$$GET_VM: ADDRESSING_MODE (GENERAL),			! Allocate virtual memory
	FOR$$SIGNAL_STO: NOVALUE ADDRESSING_MODE (GENERAL);	! SIGNAL_STOP errors

GLOBAL ROUTINE FDBSET (	! FORTRAN compatibility set FDB equivalent
	LOGICAL_UNIT,	! Adr. of logical unit no.
	MODE_LITERAL,	! Adr. of descr. of mode literal string or adr. of character
	SHARE_LITERAL,	! Adr. of descr. of share literal string or adr. of character
	NUM_BUF,	! Adr. of number of buffers
	INIT_ALLOC,	! Adr. of initial block to allocate
	EXTEND_BLK_CNT)	! Adr. of number of blocks to extend
	: NOVALUE =	! No value is returned

!++
! FUNCTIONAL DESCRIPTION:
!
!	Set RMS FAB (File access block) and Language support library LUB
!	(logical unit block) with OPEN-like parameters for unit LOGICAL_UNIT.
!	This procedure is provided for compatibility with CALL FDBSET
!	on PDP-11 systems with FCS-11 which set FDB (File descriptor block).

! FORMAL PARAMETERS:
!
!	LOGICAL_UNIT.rw.r	Adr. of word containing logical unit number.
!	[MODE_LITERAL.rt.{ds|r}	Adr. of string descr. which can be:
!				'NEW', 'OLD', 'READONLY', 'APPEND', 'MODIFY',
!				'INHIBIT SUPERSEDE', 'UNKNOWN'
!				Only the first char is looked at.
!	[SHARE_LITERAL.rt.{ds|r}	Adr. of string descr. which can be: 'SHARE'
!				Only the first character is looked at.
!	[NUM_BUF.rw.r		Adr. of word containing number of buffers
!	[INIT_ALLOC.rw.r	Adr. of word containing no of 
!				blocks for initial allocation
!	[EXTEND_BLK_CNT.rw.r]]]]]	Adr. of word containing no. of blocks
!				for file extended allocation.
!
! IMPLICIT INPUTS:
!
!	OTS$$A_CUR_LUB		Contains address of current LUB/ISB/RAB or 0.
!	OTS$$AA_LUB_TAB	Table of LUB/ISB/RABs by logical unit
!
! IMPLICIT OUTPUTS:
!
!	FAB allocated and set, LUB/ISB/RAB allocated and LUB set
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Allocates LUB/ISB/RAB and/or FAB, if not already allocated.
!--

    BEGIN

    BUILTIN NULLPARAMETER;

    GLOBAL REGISTER
	CCB = 11: REF BLOCK[, BYTE];

    MAP
	LOGICAL_UNIT: REF VECTOR[1, WORD],
	MODE_LITERAL: REF DSC$DESCRIPTOR,
	SHARE_LITERAL: REF DSC$DESCRIPTOR,
	NUM_BUF: REF VECTOR[1, WORD],
	INIT_ALLOC: REF VECTOR[1, WORD],
	EXTEND_BLK_CNT: REF VECTOR[1,WORD];
    LOCAL
	FAB: REF BLOCK [FAB$C_BLN, BYTE],	! base pointer to FAB
	L_UNWIND_ACTION: VOLATILE;		! Action flag for handler on unwind
    ENABLE
	FOR$$ERR_OPECLO (L_UNWIND_ACTION);	! Don't pass 2nd arg (OPEN-CLOSE array)
						! since never an ERR=

    !+
    ! Push down current logical unit block if any, and allocate LUB/ISB/RAB
    ! for this unit if not already allocated.  Unwind action is a no-op
    ! until LUB/ISB/RAB pushed down and LOGICAL_UNIT LUB flagged as current.
    ! Then unwind action on errors is to POP the LUB/ISB/RAB.
    ! On return CCB points to current control block.
    !-

    L_UNWIND_ACTION = FOR$K_UNWINDNOP;
    FOR$$CB_PUSH (.LOGICAL_UNIT[0], LUB$K_LUN_MIN);
    L_UNWIND_ACTION = FOR$K_UNWINDPOP;

    !+
    ! If unit already opened, SIGNAL_STOP FOR$_UNIALROPE (34='UNIT ALREADY OPEN')
    !-

    IF .CCB[LUB$V_OPENED] THEN FOR$$SIGNAL_STO (FOR$K_UNIALROPE);

    !+
    ! Allocate zeroed FAB if not already allocated and save address in LUB.
    !-

    IF (FAB = .CCB[LUB$A_FAB]) EQLA 0
    THEN
	BEGIN
	FAB = FOR$$GET_VM (FAB$K_BLN);
	CH$FILL (0, FAB$K_BLN, .FAB);
	FAB[FAB$B_BID] = FAB$C_BID;
	FAB[FAB$B_BLN] = FAB$K_BLN;
	CCB[LUB$A_FAB] = .FAB;
	END;

    !+
    ! If MODE_LITERAL is present, dispatch on first character of string literal
    ! Accept either character by-descriptor or string by-descriptor.
    ! If first byte of descriptor is GEQ ASCII A, assume character by-reference
    ! otherwise string by-descriptor.
    !-

    IF NOT NULLPARAMETER (2)
    THEN
	BEGIN
	BIND LEGAL_CHAR = UPLIT ('AIMNORU');
	LOCAL P;			! Temporary char pointer
	P = CH$FIND_CH (7, LEGAL_CHAR, (IF .MODE_LITERAL[BYTE_BY_REF] GEQ %C'A'
					THEN
					    .MODE_LITERAL[BYTE_BY_REF]			! character by-ref
					ELSE
					    .(.MODE_LITERAL[DSC$A_POINTER])));	! character by-descr.
	IF CH$FAIL (.P) THEN FOR$$SIGNAL_STO (FOR$K_INVARGFOR);

	CASE .P - LEGAL_CHAR FROM 0 TO 6 OF
	    SET
	    [0]:			! 'APPEND'
		BEGIN
		CCB[RAB$V_EOF] = 1;
		CCB[RAB$B_RAC] = RAB$C_SEQ;
		CCB[LUB$V_OLD_FILE] = 1;
		CCB[LUB$V_APPEND] = 1;
		END;

	    [1]:			! \\\'INHIBIT SUPERSEDE\\\
			;		! Nothing for now\\\

	    [2]:			! 'MODIFY'
		CCB[LUB$V_OLD_FILE] = 1;

	    [3]:			! 'NEW'
			;		! nothing special to do

	    [4]:			! 'OLD'
		CCB[LUB$V_OLD_FILE] = 1;

	    [5]:			! 'READONLY'
		BEGIN
		FAB[FAB$B_FAC] = FAB$M_GET;
		CCB[LUB$V_OLD_FILE] = 1;
		CCB[LUB$V_READ_ONLY] = 1;
		END;

	    [6]:			! 'UNKNOWN'
		FAB[FAB$V_CIF] = 1;

	    TES;
	END;				! End MODE_LITERAL

    !+
    ! SHARE_LITERAL.  If present and first character equal to 'S',
    ! set for sharing put, get, and update.
    ! If MODE_LITERAL is present, dispatch on first character of string literal
    ! Accept either character by-descriptor or string by-descriptor.
    ! If first byte of descriptor is GEQ ASCII A, assume character by-reference
    ! otherwise string by-descriptor.
    !-

    IF NOT NULLPARAMETER (3)
    THEN
	BEGIN
	IF (IF .SHARE_LITERAL[BYTE_BY_REF] GEQ %C'A'
	    THEN
		.SHARE_LITERAL[BYTE_BY_REF]			! character by-reference
	    ELSE
		.(.SHARE_LITERAL[DSC$A_POINTER])<0,8>)		! string by-descr.
	    NEQ %C'S' THEN FOR$$SIGNAL_STO (FOR$K_INVARGFOR);

	FAB[FAB$B_SHR] = FAB$M_GET + FAB$M_PUT + FAB$M_UPD + FAB$M_UPI;
	END;

    !+
    ! NUM_BUF.  If number of buffers arg is present, set RAB buffer count.
    !-

    IF NOT NULLPARAMETER (4) THEN CCB[RAB$B_MBF] = .NUM_BUF[0];

    !+
    ! INIT_ALLOC.  If initial allocation arg is present, set FAB$L_ALQ
    ! with magnitude of arg and set contiguous best try bit.
    !-

    IF NOT NULLPARAMETER (5) 
    THEN 
	BEGIN
	FAB[FAB$L_ALQ] = ABS (.INIT_ALLOC[0]);    
	FAB[FAB$V_CBT] = 1;
	END;

    !+
    ! EXTEND_BLK_CNT.  If extend allocation count is present, set FAB$W_DEQ.
    !-

    IF NOT NULLPARAMETER (6) THEN FAB[FAB$W_DEQ] = ABS (.EXTEND_BLK_CNT[0]);

    !+
    ! Pop (but do not deallocate) LUB/ISB/RAB and return with FAB allocated.
    !-

    FOR$$CB_POP ();
    RETURN;
    END;

END			! End of module
ELUDOM
