	.TITLE	LIB$ADDX - Add infinite precision integers
	.IDENT	/1-006/			; File: LIBADDX.MAR  Edit: PDG1006

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY: General Utility Library
;
; ABSTRACT:
;
;	Routines for performing addition and subtraction on
;	integers of arbitrary length.
;
; ENVIRONMENT: User Mode, AST Reentrant
;
;--
; AUTHOR: Steven B. Lionel, CREATION DATE: 17-NOV-1978
;
; MODIFIED BY:
;
; Steven B. Lionel, : VERSION 01
; 1-001	- Original 
; 1-002	- Corrected an error in a comment.  JBS 14-DEC-78
; 1-003	- Add "_" to PSECT directive.  JBS 21-DEC-78
; 1-004 - Make default loop count 1 instead of 2.  A value of 2
;	  makes it loop 3 times!  SBL 25-MAR-1980
; 1-005 - Use register temp in loop to allow for overlap.  SBL 13-June-1980
; 1-006	- Allow length of zero or one.  Recognize overflow.  Recognize length
;	  of -2**31 as an error.  Made compare with (AP) unsigned.  Make sure
;	  that C bit is 0 before entering loop.  PDG 9-Aug-81
;--

	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;

;
; EXTERNAL DECLARATIONS:
;
	.DSABL	GBL			; Prevent undeclared symbols
					; from being declared global

	.EXTRN	SS$_NORMAL		; Normal successful completion
	.EXTRN	SS$_INTOVF		; Integer overflow error
	.EXTRN	LIB$_INVARG		; Invalid argument to function
;
; MACROS:
;

;
; EQUATED SYMBOLS:
;
	addend = 4		; Address of addend array
	augend = 8		; Address of augend array
	sum = 12		; Address of sum (result) array

	minuend = 4		; Address of minuend array
	subtrahend = 8		; Address of subtrahend array
	difference = 12		; Address of difference array

	length = 16		; Address of length in longwords

;
; OWN STORAGE:
;

;
; PSECT DECLARATIONS:
;
	.PSECT _LIB$CODE PIC, USR, CON, REL, LCL, SHR, -
			EXE, RD, NOWRT, LONG


	.SBTTL	LIB$ADDX - Addition of infinite precision integers
;++
; FUNCTIONAL DESCRIPTION:
;
;	LIB$ADDX performs addition of arbitrary length integers.  The
;	values to be added are located in arrays of longwords: the 
;	higher addresses holding the more significant parts of the values.
;
;	The number of longwords to be added is given in the optional
;	argument "length".  If this is not specified, the default is
;	2, or quadword addition.
;
;	The sum is placed in the array addressed by the third argument.
;	Any two or all three of the first three arguments may be the same.
;	If overflow occurs, the function value returned is SS$_INTOVF.
;
; CALLING SEQUENCE:
;
;	status.wlc.v = LIB$ADDX (addend.rl.ra, augend.rl.ra, sum.wl.ra
;				 [, length.rl])
;
; INPUT PARAMETERS:
;
;	addend	- The address of an array of longwords.  The array
;		  contains a multiple precision integer, with the
;		  bits increasing in significance with increasing
;		  addresses.
;
;	augend	- The address of an array of longwords.  The array
;		  contains a multiple precision integer, with the
;		  bits increasing in significance with increasing
;		  addresses.
;
;	length	- Optional.  The length in longwords of the arrays to
;		  be added.  The length may be zero or greater.  If
;		  not, error LIB$_INVARG is returned.
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	sum	- The address of an array of longwords.  The sum of the
;		  addend and augend is placed in this array.  
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; FUNCTION VALUE:
; COMPLETION CODES:
;
;	SS$_NORMAL 	- Successful completion
;	SS$_INTOVF	- Integer overflow - sum is correct except for
;			  the sign bit which is lost.
;	LIB$_INVARG	- Invalid argument.  Length is negative.
;			  The sum is not changed.
;
; SIDE EFFECTS:
;
;	NONE
;
;--

	.ENTRY LIB$ADDX, ^M<R2>		; Disable integer overflow

;+
;	Set up R0 as the count of longwords remaining.  If length
;	is not specified, use the default of 2 (quadword addition).
;	If length is negative, return error LIB$_INVARG.
;-

	MOVQ	#1, R0			; Default two longwords
	DECL	R1			; Initialize index
	CMPB	#4, (AP)		; Is length present?
	BGTRU	2$			; No, use default (C=0 if branch taken)
	TSTL	length(AP)		; Is length omitted? (C=0)
	BEQL	2$			; Yes, use default
	MOVL	@length(AP), R0		; R0 contains length (C=0 (unchanged))
	BLEQ	0$			; Branch if negative or zero length
	DECL	R0			; Subtract one (C=0, since R0 was > 0)
	BRB	2$			; Jump into loop

;	User gave negative or zero length

0$:	BEQL	EXIT			; Do nothing if length = 0
	MOVL	#LIB$_INVARG, R0	; Error
	RET				; Return to caller

;+
;	Addition loop
;-

1$:	MOVL	@addend(AP)[R1], R2	; Do addition in a temp because augend
	ADWC	@augend(AP)[R1], R2	; and sum may overlap and because ADWC
	MOVL	R2, @sum(AP)[R1]	; is a two-operand instruction
2$:	AOBLSS	R0, R1, 1$		; Loop till done

;+
;	Now, add one more time, this time preserving the overflow flag
;-
	MOVL	@augend(AP)[R1], R2
	MOVL	@addend(AP)[R1], @sum(AP)[R1]
	ADWC	R2, @sum(AP)[R1]

;+
;	Test for overflow and return with proper condition
;-

ATEST:	BVS	AOVFL			; Integer overflow
EXIT:	MOVZBL	#SS$_NORMAL, R0		; Return success
	RET

AOVFL:	MOVZWL	#SS$_INTOVF, R0		; Integer overflow
	RET				; Return failure

	.SBTTL	LIB$SUBX - Subtraction of infinite precision integers
;++
; FUNCTIONAL DESCRIPTION:
;
;	LIB$SUBX performs subtraction of arbitrary length integers.  The
;	values to be subtracted are located in arrays of longwords: the 
;	higher addresses being the higher precision parts of the values.
;
;	The number of longwords to be subtracted is given in the optional
;	argument "length".  If this is not specified, the default is
;	2, or quadword subtraction.
;
;	The difference is placed in the array addressed by the third argument.
;	Any two or all three of the first three arguments may be the same.
;	If overflow occurs, the function value returned is SS$_INTOVF.
;
; CALLING SEQUENCE:
;
;	status.wlc.v = LIB$SUBX (minuend.rl.ra, subtrahend.rl.ra,
;				 difference.wl.ra [, length.rl])
;
; INPUT PARAMETERS:
;
;	minuend		- The address of an array of longwords.  The array
;			  contains a multiple precision integer, with the
;			  bits increasing in significance with increasing
;			  addresses.
;
;	subtrahend	- The address of an array of longwords.  The array
;			  contains a multiple precision integer, with the
;			  bits increasing in significance with increasing
;			  addresses.
;
;	length		- Optional.  The length in longwords of the arrays to
;			  be subtracted.  The length must be greater than one.  If
;			  not, error LIB$_INVARG is returned.
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	difference	- The address of an array of longwords.  The subtrahend is
;			  subtracted from the minuend, and the result is placed
;			  in this array.
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; FUNCTION VALUE:
; COMPLETION CODES:
;
;	SS$_NORMAL 	- Successful completion
;	SS$_INTOVF	- Integer overflow - difference is correct except for
;			  the sign bit which is lost.
;	LIB$_INVARG	- Invalid argument.  Length is negative.
;			  The difference is not changed.
;
; SIDE EFFECTS:
;
;	NONE
;
;--

	.ENTRY LIB$SUBX, ^M<R2>		; Disable integer overflow

;+
;	Set up R0 as the count of longwords remaining.  If length
;	is not specified, use the default of 2 (quadword subtraction).
;	If length is negative, return error LIB$_INVARG.
;-

	MOVQ	#1, R0			; Default two longwords
	DECL	R1			; Initialize index
	CMPB	#4, (AP)		; Is length present?
	BGTRU	2$			; No, use default (C=0 if branch taken)
	TSTL	length(AP)		; Is length omitted? (C=0)
	BEQL	2$			; Yes, use default
	MOVL	@length(AP), R0		; R0 contains length (C=0 (unchanged))
	BLEQ	0$			; Branch if negative or zero length
	DECL	R0			; Subtract one (C=0, since R0 was > 0)
	BRB	2$			; Jump into loop

;	User gave negative or zero length

0$:	BEQL	EXIT			; Do nothing if length = 0
	MOVL	#LIB$_INVARG, R0	; Error
	RET				; Return to caller

;+
;	Subtraction loop
;-

1$:	MOVL	@minuend(AP)[R1], R2		; Do subtraction in a temp
						; because subtrahend and
	SBWC	@subtrahend(AP)[R1], R2		; difference may overlap and
	MOVL	R2, @difference(AP)[R1]		; because SBWC is a 2 operand
						; instruction
2$:	AOBLSS	R0, R1, 1$			; Loop till done

;+
;	Now subtract one final time, this time preserving overflow
;-

	MOVL	@subtrahend(AP)[R1], R2
	MOVL	@minuend(AP)[R1], @difference(AP)[R1]
	SBWC	R2, @difference(AP)[R1]

;+
;	Test for overflow and return with proper condition
;-
	BVS	AOVFL			; Test for overflow

	MOVZBL	#SS$_NORMAL, R0		; Return success
	RET

	.END
