	.TITLE	MTH$CONVER	type conversions (FLOAT, FIX, INT)
	.IDENT	/1-004/		; File: MTHCONVER.MAR  Edit: JAW1004

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;
; FACILITY: MATH LIBRARY
;++
; ABSTRACT:
;	This module contains all of the one or two instruction type
;	conversion routines.
;
;
;--
;
; VERSION: 1
;
; HISTORY:
;
; AUTHOR:
;	Jonathan M. Taylor, 14-JUL-77: Version 0
;
; MODIFIED BY:
;
;	Steven B. Lionel, 26-Jan-79: G, H and COMPLEX*16
;
;

	.SBTTL	HISTORY		; Detailed Current Edit History


; Edit History for Version 1 of MTH$CONVER
;
; 0-3	- Remove MTH$FLAG_JACKET.  TNH 26-July-78
; 1-001	- Update version number and copyright notice.  JBS 16-NOV-78
; 1-002 - Add G, H, COMPLEX*16.  SBL 26-Jan-79
; 1-003 - Add MTH$IIHINT, MTH$JIHINT.  SBL 12-Sept-1979
; 1-004 - Make MTH$DCMPLX and MTH$GCMPLX fetch and store arguments
;	  properly, and make MTH$DIMAG and MTH$GIMAG use correct offset
;	  for imaginary part.  JAW 27-Jan-1981

	.SBTTL	DECLARATIONS

;
; INCLUDE FILES:
;	NONE
;

;
; EXTERNAL SYMBOLS:
;	NONE
;

;
; MACROS:
;	NONE
;

;
; PSECT DECLARATIONS:
	.PSECT	_MTH$CODE	PIC, SHR, LONG, EXE, NOWRT

;
; EQUATED SYMBOLS:
;	NONE
;

;
; OWN STORAGE:
;	NONE
;

	.SBTTL	MTH$DFLOTI

;++
; FUNCTIONAL DESCRIPTION:
;	Convert INTEGER*2 to REAL*8 (exact).
;
;
; CALLING SEQUENCE:
;	Float.wd.v = MTH$DFLOTI (arg.rw.r)
;	
;
;
; INPUT PARAMETERS:
;	The input parameter is a one-word value and is call-by-reference.
;	
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	NONE
;
;--

	.ENTRY	MTH$DFLOTI,	^M<>
	CVTWD	@4(AP), R0	; convert INTEGER*2 to REAL*8
	RET

	.SBTTL	MTH$DFLOTJ

;++
; FUNCTIONAL DESCRIPTION:
;	Convert INTEGER*4 to REAL*8 (exact).
;
;
; CALLING SEQUENCE:
;	Float.wd.v = MTH$DFLOTJ (arg.rl.r)
;	
;
;
; INPUT PARAMETERS:
;	The one input parameter is a longword value and is
;	call-by-reference.
;	
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	NONE
;
;--


	.ENTRY	MTH$DFLOTJ,	^M<>
	CVTLD	@4(AP), R0	; convert INTEGER*4 to REAL*8
	RET

	.SBTTL	MTH$IINT, MTH$IIFIX

;++
; FUNCTIONAL DESCRIPTION:
;	Convert REAL*4 to INTEGER*2 (truncated).
;
;
; CALLING SEQUENCE:
;	Truncation.ww.v = MTH$IINT (arg.rf.r)
;	Integer.ww.v = MTH$IIFIX (arg.rf.r)
;	
;
;
; INPUT PARAMETERS:
;	
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	Integer Overflow and Reserved Operand exceptions can occur.
;	
;
;--


MTH$IINT::
	.ENTRY	MTH$IIFIX,	^M<IV> ; enable integer overflow
	CVTFW	@4(AP), R0	; convert REAL*4 to INTEGER*2
	RET

	.SBTTL	MTH$JINT, MTH$JIFIX

;++
; FUNCTIONAL DESCRIPTION:
;	Convert REAL*4 to INTEGER*4 (truncated).
;
;
; CALLING SEQUENCE:
;	Truncation.wl.v = MTH$JINT (arg.rf.r)
;	Integer.wl.v = MTH$JIFIX (arg.rf.r)
;	
;
;
; INPUT PARAMETERS:
;	The one input parameter is a single-precision floating-point
;	value and is call-by-reference.
;	
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	Reserved Operand and Integer Overflow exceptions can occur.
;	
;
;--


MTH$JINT::
	.ENTRY	MTH$JIFIX,	^M<IV> ; enable integer overflow
	CVTFL	@4(AP), R0	; convert REAL*4 to INTEGER*4
	RET

	.SBTTL	MTH$IIDINT

;++
; FUNCTIONAL DESCRIPTION:
;	Convert REAL*8 to INTEGER*2 (truncated).
;
;
; CALLING SEQUENCE:
;	Truncation.ww.v = MTH$IIDINT (arg.rd.r)
;	
;
;
; INPUT PARAMETERS:
;	The one input parameter is a double-precision floating-point
;	value and is call-by-reference.
;	
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	Reserved Operand and Integer Overflow exceptions can occur.
;	
;
;--


	.ENTRY	MTH$IIDINT,	^M<IV> ; enable integer overflow
	CVTDW	@4(AP), R0	; REAL*8 to INTEGER*2
	RET

	.SBTTL	MTH$JIDINT

;++
; FUNCTIONAL DESCRIPTION:
;	Convert REAL*8 to INTEGER*4 (truncated).
;
;
; CALLING SEQUENCE:
;	Truncation.wl.v = MTH$JIDINT (arg.rd.r)
;	
;
;
; INPUT PARAMETERS:
;	The one input parameter is double-precision floating-point value
;	and is call-by-reference.
;	
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	Reserved Operand and Integer Overflow exceptions can occur.
;	
;
;--


	.ENTRY	MTH$JIDINT,	^M<IV> ; enable integer overflow
	CVTDL	@4(AP), R0	; REAL*8 to INTEGER*4
	RET

	.SBTTL	MTH$REAL

;++
; FUNCTIONAL DESCRIPTION:
;	Return the REAL part of the COMPLEX argument.
;
;
; CALLING SEQUENCE:
;	Real_part.wf.v = MTH$REAL (complex_arg.rfc.r)
;	
;
;
; INPUT PARAMETERS:
;	The one argument is a COMPLEX*8 number and is call-by-reference.
;	
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	Reserved Operand exception can occur.
;	
;
;--


	.ENTRY	MTH$REAL,	^M<>
	MOVF	@4(AP), R0	; get 1st half of COMPLEX number
	RET

	.SBTTL	MTH$AIMAG

;++
; FUNCTIONAL DESCRIPTION:
;	Returns the IMAGINARY part of a COMPLEX*8 argument.
;
;
; CALLING SEQUENCE:
;	Imaginary_part.wf.v = MTH$AIMAG (complex_arg.rfc.r)
;	
;
;
; INPUT PARAMETERS:
;	The one argument is a COMPLEX*8 value and is call-by-reference.
;	
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	Reserved Operand exception can occur.
;	
;
;--


	.ENTRY	MTH$AIMAG,	^M<>
	MOVL	4(AP), R0	; R0 -> COMPLEX number
	MOVF	4(R0), R0	; R0 = imaginary part of COMPLEX number
	RET

	.SBTTL	MTH$CMPLX

;++
; FUNCTIONAL DESCRIPTION:
;	Return a COMPLEX*8 number from two single-precision
;	floating-point values.
;
;
; CALLING SEQUENCE:
;	Complex_from_two_reals.wfc.v = MTH$CMPLX 
;	(real_part.rf.r, imaginary_part.rf.r)
;	
;
;
; INPUT PARAMETERS:
;	The two input parameters are single-precision floating-point
;	values and are call-by-reference.
;	
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	Reserved Operand exception can occur.
;	
;
;--


	.ENTRY	MTH$CMPLX,	^M<>
	MOVF	@4(AP), R0	; real part = 1st arg
	MOVF	@8(AP), R1	; imag part = 2nd arg
	RET

	.SBTTL	MTH$DBLE

;++
; FUNCTIONAL DESCRIPTION:
;	Convert REAL*4 to REAL*8 (exact).
;
;
; CALLING SEQUENCE:
;	Conversion.wd.v = MTH$DBLE (arg.rf.r)
;	
;
;
; INPUT PARAMETERS:
;	The one parameter is a single-precision floating-point value
;	and is call-by-reference.
;	
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	Reserved Operand exception can occur.
;	
;
;--


	.ENTRY	MTH$DBLE,	^M<>
	CVTFD	@4(AP), R0	; REAL*4 to REAL*8 in R0/R1
	RET

	.SBTTL	MTH$SNGL

;++
; FUNCTIONAL DESCRIPTION:
;	Convert REAL*8 to REAL*4 (rounded)
;
;
; CALLING SEQUENCE:
;	Conversion.wf.v = MTH$SNGL (arg.rd.r)
;	
;
;
; INPUT PARAMETERS:
;	The one parameter is a double-precision floating-point value
;	and is call-by-reference.
;	
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	Reserved Operand and Floating Overflow exceptions can occur.
;	
;
;--


	.ENTRY	MTH$SNGL,	^M<>
	CVTDF	@4(AP), R0	; REAL*8 to REAL*4 in R0
	RET

	.SBTTL	MTH$SNGLG

;++
; FUNCTIONAL DESCRIPTION:
;	Convert G REAL*8 to REAL*4 (rounded)
;
;
; CALLING SEQUENCE:
;	Conversion.wf.v = MTH$SNGLG (arg.rg.r)
;	
;
;
; INPUT PARAMETERS:
;	The one parameter is a G floating-point value
;	and is call-by-reference.
;	
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	Reserved Operand and Floating Overflow exceptions can occur.
;	Floating Underflow can occur.
;	
;
;--


	.ENTRY	MTH$SNGLG,	^M<>
	CVTGF	@4(AP), R0	; G REAL*8 to REAL*4 in R0
	RET

	.SBTTL	MTH$FLOATI

;++
; FUNCTIONAL DESCRIPTION:
;	Convert INTEGER*2 to REAL*4 (exact).
;
;
; CALLING SEQUENCE:
;	Float.wf.v = MTH$FLOATI (arg.rw.r)
;	
;
;
; INPUT PARAMETERS:
;	The one parameter is a one-word value and is call-by-reference.
;	
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	NONE
;
;--


	.ENTRY	MTH$FLOATI,	^M<>
	CVTWF	@4(AP), R0	; INTEGER*2 to REAL*4
	RET

	.SBTTL	MTH$FLOATJ

;++
; FUNCTIONAL DESCRIPTION:
;	Convert INTEGER*4 to REAL*4 (rounded).
;
;
; CALLING SEQUENCE:
;	Float.wf.v = MTH$FLOATJ (arg.rl.r)
;	
;
;
; INPUT PARAMETERS:
;	The one parameter is a longword value and is call-by-reference.
;	
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	NONE
;
;--


	.ENTRY	MTH$FLOATJ,	^M<>
	CVTLF	@4(AP), R0	; INTEGER*4 to REAL*4 in R0
	RET



	.SBTTL	MTH$GFLOTI

;++
; FUNCTIONAL DESCRIPTION:
;	Convert INTEGER*2 to G REAL*8 (exact).
;
;
; CALLING SEQUENCE:
;	Float.wg.v = MTH$GFLOTI (arg.rw.r)
;	
;
;
; INPUT PARAMETERS:
;	The input parameter is a one-word value and is call-by-reference.
;	
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	NONE
;
;--

	.ENTRY	MTH$GFLOTI,	^M<>
	CVTWG	@4(AP), R0	; convert INTEGER*2 to G REAL*8
	RET

	.SBTTL	MTH$GFLOTJ

;++
; FUNCTIONAL DESCRIPTION:
;	Convert INTEGER*4 to G REAL*8 (exact).
;
;
; CALLING SEQUENCE:
;	Float.wg.v = MTH$GFLOTJ (arg.rl.r)
;	
;
;
; INPUT PARAMETERS:
;	The one input parameter is a longword value and is
;	call-by-reference.
;	
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	NONE
;
;--


	.ENTRY	MTH$GFLOTJ,	^M<>
	CVTLG	@4(AP), R0	; convert INTEGER*4 to G REAL*8
	RET

	.SBTTL	MTH$IIGINT

;++
; FUNCTIONAL DESCRIPTION:
;	Convert G REAL*8 to INTEGER*2 (truncated).
;
;
; CALLING SEQUENCE:
;	Truncation.ww.v = MTH$IIGINT (arg.rg.r)
;	
;
;
; INPUT PARAMETERS:
;	The one input parameter is a G floating-point
;	value and is call-by-reference.
;	
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	Reserved Operand and Integer Overflow exceptions can occur.
;	
;
;--


	.ENTRY	MTH$IIGINT,	^M<IV> ; enable integer overflow
	CVTGW	@4(AP), R0	; G REAL*8 to INTEGER*2
	RET

	.SBTTL	MTH$JIGINT

;++
; FUNCTIONAL DESCRIPTION:
;	Convert G REAL*8 to INTEGER*4 (truncated).
;
;
; CALLING SEQUENCE:
;	Truncation.wl.v = MTH$JIGINT (arg.rg.r)
;	
;
;
; INPUT PARAMETERS:
;	The one input parameter is G floating-point value
;	and is call-by-reference.
;	
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	Reserved Operand and Integer Overflow exceptions can occur.
;	
;
;--


	.ENTRY	MTH$JIGINT,	^M<IV> ; enable integer overflow
	CVTGL	@4(AP), R0	; G REAL*8 to INTEGER*4
	RET

	.SBTTL	MTH$IIHINT

;++
; FUNCTIONAL DESCRIPTION:
;	Convert REAL*16 to INTEGER*2 (truncated).
;
;
; CALLING SEQUENCE:
;	Truncation.ww.v = MTH$IIHINT (arg.rh.r)
;	
;
;
; INPUT PARAMETERS:
;	The one input parameter is a H_floating
;	value and is call-by-reference.
;	
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	Reserved Operand and Integer Overflow exceptions can occur.
;	
;
;--


	.ENTRY	MTH$IIHINT,	^M<IV> ; enable integer overflow
	CVTHW	@4(AP), R0	; REAL*16 to INTEGER*2
	RET

	.SBTTL	MTH$JIHINT

;++
; FUNCTIONAL DESCRIPTION:
;	Convert REAL*16 to INTEGER*4 (truncated).
;
;
; CALLING SEQUENCE:
;	Truncation.wl.v = MTH$JIHINT (arg.rh.r)
;	
;
;
; INPUT PARAMETERS:
;	The one input parameter is H_floating
;	and is call-by-reference.
;	
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	Reserved Operand and Integer Overflow exceptions can occur.
;	
;
;--


	.ENTRY	MTH$JIHINT,	^M<IV> ; enable integer overflow
	CVTHL	@4(AP), R0	; REAL*16 to INTEGER*4
	RET

	.SBTTL	MTH$DREAL

;++
; FUNCTIONAL DESCRIPTION:
;	Return the REAL*8 part of the COMPLEX*16 argument.
;
;
; CALLING SEQUENCE:
;	Real_part.wd.v = MTH$DREAL (complex_arg.rdc.r)
;	
;
;
; INPUT PARAMETERS:
;	The one argument is a COMPLEX*16 number and is call-by-reference.
;	
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	Reserved Operand exception can occur.
;	
;
;--


	.ENTRY	MTH$DREAL,	^M<>
	MOVD	@4(AP), R0	; get 1st half of COMPLEX*16 number
	RET

	.SBTTL	MTH$GREAL

;++
; FUNCTIONAL DESCRIPTION:
;	Return the G REAL*8 part of the G COMPLEX*16 argument.
;
;
; CALLING SEQUENCE:
;	Real_part.wg.v = MTH$GREAL (complex_arg.rgc.r)
;	
;
;
; INPUT PARAMETERS:
;	The one argument is a G COMPLEX*16 number and is call-by-reference.
;	
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	Reserved Operand exception can occur.
;	
;
;--


	.ENTRY	MTH$GREAL,	^M<>
	MOVG	@4(AP), R0	; get 1st half of G COMPLEX*16 number
	RET

	.SBTTL	MTH$DIMAG

;++
; FUNCTIONAL DESCRIPTION:
;	Returns the IMAGINARY part of a COMPLEX*16 argument.
;
;
; CALLING SEQUENCE:
;	Imaginary_part.wd.v = MTH$DIMAG (complex_arg.rdc.r)
;	
;
;
; INPUT PARAMETERS:
;	The one argument is a COMPLEX*16 value and is call-by-reference.
;	
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	Reserved Operand exception can occur.
;	
;
;--


	.ENTRY	MTH$DIMAG,	^M<>
	MOVL	4(AP), R0		; R0 -> COMPLEX*16 number
	MOVD	8(R0), R0		; R0 = imaginary part of COMPLEX*16 number
	RET

	.SBTTL	MTH$GIMAG

;++
; FUNCTIONAL DESCRIPTION:
;	Returns the IMAGINARY part of a G COMPLEX*16 argument.
;
;
; CALLING SEQUENCE:
;	Imaginary_part.wg.v = MTH$GIMAG (complex_arg.rgc.r)
;	
;
;
; INPUT PARAMETERS:
;	The one argument is a G COMPLEX*16 value and is call-by-reference.
;	
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	Reserved Operand exception can occur.
;	
;
;--


	.ENTRY	MTH$GIMAG,	^M<>
	MOVL	4(AP), R0		; R0 -> COMPLEX*16 number
	MOVG	8(R0), R0		; R0 = imaginary part of COMPLEX*16 number
	RET

	.SBTTL	MTH$DCMPLX

;++
; FUNCTIONAL DESCRIPTION:
;	Return a COMPLEX*16 number from two double-precision
;	floating-point values.
;
;
; CALLING SEQUENCE:
;
;	dcmplex.wdc.v = MTH$DCMPLX (real_part.rd.r, imag_part.rd.r)
;	
;		-or-
;
;	CALL MTH$DCMPLX (dcmplex.wdc.r, real_part.rd.r, imag_part.rd.r)
;
;	Because a COMPLEX*16 result cannot be expressed in 64 bits, it
;	is returned as the first argument, with the input parameter
;	displaced to the second argument, in accordance with the
;	Procedure Calling Standard.
;
; INPUT PARAMETERS:
;	The two input parameters are double-precision floating-point
;	values and are call-by-reference.
;	
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	Reserved Operand exception can occur.
;	
;
;--


	.ENTRY	MTH$DCMPLX,	^M<>
	MOVL	4(AP), R0		; R0 -> COMPLEX*16 result
	MOVD	@8(AP), (R0)		; real part = 2nd arg
	MOVD	@12(AP), 8(R0)		; imag part = 3rd arg
	RET

	.SBTTL	MTH$GCMPLX

;++
; FUNCTIONAL DESCRIPTION:
;	Return a G COMPLEX*16 number from two G
;	floating-point values.
;
;
; CALLING SEQUENCE:
;
;	gcmplex.wgc.v = MTH$GCMPLX (real_part.rg.r, imag_part.rg.r)
;	
;		-or-
;
;	CALL MTH$GCMPLX (gcmplex.wgc.r, real_part.rg.r, imag_part.rg.r)
;
;	Because a COMPLEX*16 result cannot be expressed in 64 bits, it
;	is returned as the first argument, with the input parameter
;	displaced to the second argument, in accordance with the
;	Procedure Calling Standard.
;	
;
;
; INPUT PARAMETERS:
;	The two input parameters are G floating-point
;	values and are call-by-reference.
;	
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	Reserved Operand exception can occur.
;	
;
;--


	.ENTRY	MTH$GCMPLX,	^M<>
	MOVL	4(AP), R0		; R0 -> COMPLEX*16 result
	MOVG	@8(AP), (R0)		; real part = 2nd arg
	MOVG	@12(AP), 8(R0)		; imag part = 3rd arg
	RET


	.SBTTL	MTH$GDBLE

;++
; FUNCTIONAL DESCRIPTION:
;	Convert REAL*4 to G REAL*8 (rounded).
;
;
; CALLING SEQUENCE:
;	Conversion.wg.v = MTH$GDBLE (arg.rf.r)
;	
;
;
; INPUT PARAMETERS:
;	The one parameter is a F floating-point value
;	and is call-by-reference.
;	
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	Reserved Operand exception can occur.
;	
;
;--


	.ENTRY	MTH$GDBLE,	^M<>
	CVTFG	@4(AP), R0	; REAL*4 to G REAL*8 in R0/R1
	RET


	.END
