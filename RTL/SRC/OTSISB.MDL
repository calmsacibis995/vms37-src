; REQUIRE file for I/O Statement Block (ISB)
; File: OTSISB.MDL  Version 1-060 Edit: JAW1060
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
; Author: T.Hastings
; 0-10	- Add ISB$B_ERR_NO.  TNH 16-Dec-77
; 0-16	- Make format stack be words.  TNH 2-Jun-78
; 1-01	- Change to negative displacements for CCB.  DGP 4-May-78
; 1-06	- Merge Basic with Fortran.  DGP 28-Nov-78
; 1-008	- Change LUB length from 44 to 52 to allow for the BASIC
;	   additions to it.  JBS 06-DEC-78
; 1-009	- Change file name from FORISB.MDL to OTSISB.MDL.  JBS 06-DEC-78
; 1-010 - Add the statement types from the LUB.  DGP 08-Dec-78
; 1-011 - Add statement type for Basic READ>  DGP 11-Dec-78
; 1-012 - Add MAJ_F_PTR to store ptr to major frame for Basic.  DGP 12-Dec-78
; 1-013 - Add IO_ERR to indicate current I/O error.  DGP 28-Dec-78
; 1-014 - Move BUF_BEG, BUF_PTR, BUF_END, and BUF_HIGH to the LUB for recur-
;	  sive I/O. Add CALLER_FP for error handling of I/O stmts. Remove
;	  PUSH_LUB altogether. DGP 05-Jan-79
; 1-015 - Remove CALLER_FP.  We are putting a frame on the stack instead. DGP
;	  15-Jan-79
; 1-016	- Track increase in the size of the LUB.  JBS 19-JAN-1979
; 1-017 - Add V_AST_GUARD.  DGP 19-Jan-79
; 1-018 - Delete a filler byte to allow longword alignment. DGP 20-Jan-79
; 1-019	- Add ISB$V_RECURSIVE to support recursive I/O in OTSCCB.
;	   JBS 23-JAN-1979
; 1-020 - Add ISB$W_FMT_FLAG to support FORTRAN-77 formatting.
;	  Also change FORTRAN "indexed" to "keyed".  SBL 06-Feb-79
; 1-021 - Add statement types for FORTRAN REWRITE and "Internal
;	  files".  SBL 09-Feb-79
; 1-022	- Rearrange the new FORTRAN statement types and give FORTRAN
;	   some more unused space.  JBS 09-FEB-1979
; 1-023 - Add V_BN and V_SP to W_FMT_FLAG.  SBL 09-Feb-1979
; 1-024	- Rearrange the status bits to speed up OTSCCB.  JBS 09-FEB-1979
; 1-025	- Change ISB$V_LEFTADJUST to ISB$V_LEFTADJUS.  JBS 09-FEB-1979
; 1-026 - Add statement types for BASIC PUT and GET.  DGP 19-Feb-79
; 1-027 - Add statement types for Basic FIND, DELETE, UPDATE, RESTORE,
;	  and SCRATCH.  27-Feb-79
; 1-028 - Add statement types for PUT relative, PUT sequential,
;	  GET sequential, GET relative, FIND sequential, FIND relative.
;	    DGP 02-Mar-79
; 1-029	- Track increase in the size of the LUB.  JBS 21-MAR-1979
; 1-030 - Add Basic Indexed statement types.  DGP 23-Mar-79
; 1-031	- Track increase in the size of the LUB.  JBS 04-APR-1979
; 1-032 - Rearrange FORTRAN statement types, format flags.  Define
;	  CONSBLOCK as 4 longwords.  SBL 11-Apr-79
; 1-033	- Add RESTARTPC.  JBS 07-MAY-1979
; 1-034 - Change statement type names for REWRITE.  Add USER_FP,
;	  USR_HANDL and INTFIL_END.  SBL 10-May-1979
; 1-035	- Change INTFIL_END to INTFILEND.  JBS 10-MAY-1979
; 1-036 - Remove V_AST_GUARD.  Add statement type for Print Using.  DGP
;	  14-May-79
; 1-037 - Swap statement types for FIND sequential and PRINT USING. DGP
;	  15-May-79
; 1-038	- Add statement type for MOVE FROM/MOVE TO.  JBS 21-MAY-1979
; 1-039 - Add another format length field for Basic for reversion. DGP 22-May-79
; 1-040	- Track increase in the size of the LUB.  JBS 30-MAY-1979
; 1-041 - Add statement type for MAT INPUT and continuation flag.  DGP 05-Jun-79
; 1-042 - Add statement type for MAT PRINT.  DGP 15-Jun-79
; 1-043 - Add statement type table displacement bases and lengths.
;	  SBL 9-Jul-1979
; 1-044 - Track increase in LUB size to 96 bytes.  SBL 12-Jul-1979
; 1-045	- Change ISB$L_USER_FP to ISB$A_USER_FP, and dont overlay
;	   it, since BASIC needs it for unwinding.  JBS 14-JUL-1979
; 1-046 - Expand list directed constant block to non-overlayed 16 bytes.
;	  SBL 17-Jul-1979
; 1-047 - Get rid of CONSBLOCK, replace with ISB$A_LIS_STR.  SBL 18-Jul-1979
; 1-048	- Change ISB$L_MAJ_F_PTR to ISB$A_MAJ_F_PTR.  JBS 24-JUL-1979
; 1-049 - Delete all input format flags except SP.  SBL 26-July-1979
; 1-050 - Add bit for Basic Mat Print.  DGP 04-Oct-79
; 1-051 - Add statement type for MAT READ.  DGP 10-Oct-79
; 1-052	- Track increase in LUB size to 100 bytes.
; 1-053 - Add two areas for BASIC scale factor.  DGP 15-Nov-79
; 1-054 - Correct bug in adding scale factors to ISB.  DGP 26-Nov-79
; 1-055 - Add ISB$V_PRINT_INI.  DGP 04-Jan-80
; 1-056 - Add copyright notice.  SBL 11-Mar-1980
; ***** - VMS Version V2.0
; 1-057	- Force length calculation of block after allocation. HJ 22-Aug-1980
; 1-058 - Add statement types for FORTRAN NAMELIST. Fix some typos in
;	  comments.  SBL 27-August-1980
; 1-059 - Add flags ISB$V_SNGL_ELEM and ISB$V_NEED_INIT to support
;	  Fortran single-element lists.  JAW 11-May-1981
; 1-060 - Restore names for input format flags, and add output format
;	  flag ISB$V_ERR_OFLO.  JAW 13-Aug-1981
; 1-061 - Remove date from Edit: line for uniformity.  JAW 15-Aug-1981
;--

;+
; The ISB contains OTS OWN data associated with a particular
; logical unit which is needed only for the set of calls which
; implement a single I/O statement. The ISB locations are grouped by
; level of abstraction:
;	1. User Program Interface (UPI)
;	2. User Data Formatter (UDF)
;	3. Record Formatter and processor (REC)
;
; In principle, ISB could be dynamically allocated at the beginning of every
; READ, WRITE, DECODE, and ENCODE and deallocated at the end
; (in FOR$IO_END). However, for runtime efficiency it is not.
; OWN data which is needed to be retained for more than
; one I/O Statement is allocated in the Logical Unit Block (LUB).
; Data which is needed during a single call is always LOCAL.
;
; The MDL field definition call is of the form:
;	F fieldname,unit,size,sign
;	where:	fieldname must not exceed 9 chars
;		unit is: A,B,W,L,Q, or T
;		size	size is optional no. of repeat units (default=1)
;		sign is omitted (unsigned) or S (signed)
;
; The MDL bit definition call is of the form:
;		V <
;		bit_name1	; comment
;		bit_name2	; comment
;		>
;
; ISB definition (-11 OTS equivalents are indicated in parens)
; All are unsigned, except ISB$W_FMT_REP.
; Symbols have form: ISB$t_symbol where t is A,B,W,L,T, or V.
;-

	$STRUCT ISB

;+
; I/O statement type codes
; Used to index into routine dispatch tables to call
; the appropriate User-program data formatter level
; of abstraction (UDF = level 2) and Record processing level
; of abstraction (REC = level 3).
; Codes assigned so that a TRUE value means WRITE and a
; false value means READ. The distinction between
; formatted and object-time formatted disappears at level 1
; and so does not have a separate statement type code.
;-
	
	; the 0 entry is no longer used because it reports an error.  It is
	; designed to catch a recursive CLOSE among other things.
	K ST_TY_WSF,1	; FORTRAN WRITE sequential formatted
		K FORSTTYLO,1	; Lowest FORTRAN statement type
	K ST_TY_RSF,2	; FORTRAN READ sequential formatted
	K ST_TY_WSU,3	; FORTRAN WRITE sequential unformatted
	K ST_TY_RSU,4	; FORTRAN READ sequential unformatted
	K ST_TY_WDF,5	; FORTRAN WRITE direct formatted
	K ST_TY_RDF,6	; FORTRAN READ direct formatted
	K ST_TY_WDU,7	; FORTRAN WRITE direct unformatted
	K ST_TY_RDU,8	; FORTRAN READ direct unformatted
	K ST_TY_WSL,9	; FORTRAN WRITE sequential list-directed
	K ST_TY_RSL,10	; FORTRAN READ sequential list-directed
	K ST_TY_WMF,11	; FORTRAN WRITE memory formatted (ENCODE)
		K MIN_DE_EN,11	; FORTRAN Minimum
					; DECODE/ENCODE code
	K ST_TY_RMF,12	; FORTRAN READ memory formatted (DECODE)
		K MAX_DE_EN,12	; FORTRAN Maximum
					; DECODE/ENCODE code
	K ST_TY_WXF,13	; FORTRAN REWRITE indexed formatted
	K ST_TY_RKF,14	; FORTRAN READ keyed formatted
	K ST_TY_WXU,15	; FORTRAN REWRITE indexed unformatted
	K ST_TY_RKU,16	; FORTRAN READ keyed unformatted
	K ST_TY_WIF,17	; FORTRAN WRITE internal formatted
	K ST_TY_RIF,18	; FORTRAN READ internal formatted
	K ST_TY_WSN,19	; FORTRAN WRITE sequential NAMELIST
	K ST_TY_RSN,20	; FORTRAN READ sequential NAMELIST
		K FORSTTYHI,20	; Highest FORTRAN statement type
	; Leave a little room for FORTRAN expansion
	K ST_TY_PRI,27		; BASIC PRINT
		K BASSTTYLO,27	; Lowest BASIC statement type
	K ST_TY_LIN,28		; Basic LINPUT
	K ST_TY_PSE,29		; Basic PUT sequential
	K ST_TY_INP,30		; Basic INPUT
	K ST_TY_PRU,31		; Basic PRINT USING
	K ST_TY_INL,32		; Basic INPUT LINE
	K ST_TY_DEL,33		; Basic DELETE
	K ST_TY_REA,34		; Basic READ memory
	K ST_TY_UPD,35		; Basic UPDATE
	K ST_TY_GSE,36		; Basic GET sequential
	K ST_TY_RES,37		; Basic RESTORE
	K ST_TY_SCR,38		; Basic SCRATCH
	K ST_TY_PRE,39		; Basic PUT relative
	K ST_TY_GRE,40		; Basic GET relative
	K ST_TY_FRE,41		; Basic FIND relative
	K ST_TY_UNL,42		; Basic UNLOCK
	K ST_TY_FEE,43		; Basic FREE (strange name to avoid conflict
				; with FIND relative)
	K ST_TY_GIN,44		; Basic GET indexed
	K ST_TY_PIN,45		; Basic Put indexed
	K ST_TY_MOV,46		; BASIC MOVE FROM/MOVE TO
	K ST_TY_FIN,47		; Basic FIND indexed
	K ST_TY_MIN,48		; Basic MAT INPUT
	K ST_TY_RIN,49		; Basic RESTORE indexed
	K ST_TY_MLI,50		; Basic MAT LINPUT
	K ST_TY_FSE,51		; Basic FIND sequential
	K ST_TY_MPR,53		; Basic MAT PRINT
	K ST_TY_MRE,54		; Basic MAT READ
		K BASSTTYHI,54	; Highest BASIC statement type

;	end of statement type definitions


	-F 		; dummy to indicate negative block
	L NEG_BLN		; negative block length
	M 1
	-F RESTARTPC,A		; Address of start of I/O list, for
				; restarting BASIC I/O statements.
	P 1
	-F USR_HANDL,A		; Address of user's handler (FORTRAN)
	-F MAJ_F_PTR,A		; Holds pointer to last Basic major frame.
	-F USER_FP,A		; User's FP.
	-F FMT_STKP,W,8		; 8 entry pushdown stack containing relative
				; byte offset in format statement for beginning
				; of a repeat group.  ISB$B_FMT_DEP is index
				; into stack (-1 = empty, 0 = 1 item, 1 = 2 items,...)
M 1
	-F FMT_STKR,W,8		; 8 entry pushdown stack containing group repeat
				; count (as a word) remaining.  ISB$B_FMT_DEP is
				; index into stack (-1=empty, 0=1 item, 1=2
				; items, ...).
P 1
	-F SCA_FAC_D,B,8	; Double precision scale factor for BASIC
	-F ,B,8			; To keep alignment

	;+
	; Locations initialized for all I/O statements
	;-

M 1
	-F ERR_NO,B		; FORTRAN error number occurring during
				; current I/O statement and continued until
				; end of statement where it will be SIGNALed.
				; 0 means no such continuable error has occurred in this
				; I/O statement.
P 1
	-F SCALE_FAC,B,,S	; BASIC scale factor in the range of -6 -> 0.

	;+
	; ISB Locations set at the beginning of every I/O statement in Procedures
	; at the User Program Interface (FOR-UPI) level of abstraction, which is:
	; FOR${READ,WRITE}_{SF,SO,SU,DF,DO,DU} or FOR${DECODE,ENCODE}_{MF,MO}
	;-

	-F STTM_TYPE,B		; (FOR-RECIO,W.EXJ) Record I/O statement
				; type code. Used as an index into
				; dispatch table structures for calling
				; procedures in the User Data Formatter (FOR-UDF)
				; and Record processing (FOR-REC) levels
				; of abstraction. See FOR$IO_BEG Modlue.
	-F FMT_LEN,W		; (FOR-FMTBUF) No. of characters
				; allocated to contain compiled format of
				; object-time format. 0 means not
				; object-time format. Space is deallocated
				; at end of I/O statement (FOR-FOR$IO_END).
	-F ERR_EQUAL,A		; (FOR-ERREX) Adr of ERR= transfer or 0 if none.
	-F END_EQUAL,A		; (FOR-ENDEX) Adr of END= transfer or 0 if none.
	-F FMT_BEG,A		; Address of the beginning of the FORTRAN format.
				; This is set in FOR$$IO_BEG and can either point
				; to a precompiled format or a run-time compiled
				; format.  In the latter case, FMT_LEN is non-zero.
				; This is also where the NAMELIST description
				; block address is stored.
	;+
	; ISB locations used by the I/O independent format interpreter
	; FOR$$FMT_INTRP and occasionally updated by the input or output
	; dependent Formatted User Data Formatter (FOR-FOR$$UDF_RF or FOR$$UDF_WF)
	; for Hollerith (FOR-nH) format code only.
	;-

	-F FMT_PTR,A		; (FOR-FMTAD) Adr. of next byte to be read
				; from the compiled format statement byte array

	;+
	; ISB locations used as own storage solely by FOR$$UDF_RL,
	; the list-directed input processor.  More storage is defined
	; further down where it is convenient.
	;-

	-F LIS_STR,A		; Address of repeated string constant
				; saved in FOR$$UDF_RL1.

	;+
	; ISB Locations returned as parameters from FOR$$FMT_INTRP to the input
	; or output dependent Formatted User Data Formatter (FOR-FOR$$UDF_RF
	; or FOR$$UDF_WF) which do not modify them. These parameters are
	; stored in the ISB because they are needed by FOR$$FMT_INTRP for more than 
	; one call if the format code is repeated.
	;-

	-F FMT_P,B,,S		; (FOR-PSCALE) Signed P scale factor
	-F FMT_W,W		; (FOR-W) Width of field in characters
	-F FMT_D,B		; (FOR-D) Number of fraction digits
	-F FMT_E,B		; (FOR-E) Number of exponent characters


	;+
	; ISB Locations used solely by the I/O independent format interpreter
	; FOR$$FMT_INTRP{0,1}
	;-

	M 1		; *** save place
	-F FMT_REP,W,,S		; (FOR-REPCNT) signed Format repeat count for current
				; format code.
	P 1		; *** LIS_REP overlays previous 2 bytes
	-F LIS_REP,W		; (FOR-REPCT) unsigned repeat count for List-
				; directed input
	P 1		; *** LEN_REM overlays previous word
	-F LEN_REM,W		; (BAS-new) length of format string remaining.
	M 1		; *** save place
	-F FMT_CODE,B		; (FOR-TYPE) Format type code<6:0>.
				; <7> is representation byte flag.

		V <
		,7		; first 7 bits are format code
		FMT_REPRE	; representation byte follows if 1
		>
 
	P 1		; *** LIS_CTYPE overlays previous byte
	-F LIS_CTYPE,B		; type of constant scanned by list-directed input

	-F FMT_REVER,W		; (FOR-FMTAD) Relative position of current format reversion
				; point to revert to when end of format
				; statement is encountered with more data
				; elements to be transmitted.
	-F FMT_DEP,B		; (FOR-FSTKP) Adr. of current top of format
				; pushdown stack.

	M 1
	-F FMT_FLAGS,W		; Flags for FORTRAN-77
	P 1
	-F INP_FLAGS,B		; Input conversion format flags
		V <
		BN		; Blanks are nulls if set
		ONLY_E		; Only allow E, e if set
		ERR_UFLO	; Underflow is an error if set
		DONTROUND	; Don't round result if set
		SKIPTABS	; Ignore tabs if set
		EXP_LETTER	; Exponent letter is required if set
		FORCESCALE	; Scale even if exponent present if set
		,1		; Expansion for input flags
		>
	-F OUT_FLAGS,B		; Output conversion format flags
		V <
		SP		; Force optional +
		ERR_OFLO	; Exponent field width overflow is an
				; error if set
		,6		; Expansion for output flags
		>
	-F ,B,1		; 1 spare byte for future (FOR-keep longword aligned)

	;+
	; Status bits used at any of the levels of abstraction
	;-

	-F STTM_STAT,W		; status lasting only for a single
				; I/O statement, but needed
				; across several calls which
				; implement that single I/O statement.

		V <

		P_FORM_CH, 2	; (BAS) Store the format character that follows
				; Prompt.  This is set in BAS$$UDF_RL1 and read
				; in BAS$IO_END.
		DOLLAR		; (FOR-DOLFLG) Dollar format encountered in
				; format processing
		USER_ELEM	; (FOR-FMTLP) User-program data encountered
				; in format for current records. Used to
				; detect a format statement or repeat
				; group with no data element format code
				; thereby causing an infinite loop
		SLASH		; (FOR-W.NULL) Slash seen during formatted input.
				; *** also: Slash seen in List-directed input.
		LAST_REC	; (FOR-UNFLGS) Last record in segmented record
				; being processing if 1, 0=not last record
		DE_ENCODE	; (FOR-DV.FAK) DECODE/ENCODE being done
				; so RAB and unit number have
				; no meaning (FOR-used during error handling).
				; Also set for internal files.
		LIS_HEAP	; list directed input currently has heap
				; storage allocated.
		RECURSIVE	; Used by OTSCCB for recursive I/O.
				; Set when there is I/O in progress for
				; this LUN in addition to the current I/O.
		MAT_CONT	; (BAS) MAT INPUT continuation - "&" was last
				; character of record.  Read and written at the
				; REC level of matrix processing.
		MAT_PRINT	; (BAS) MAT PRINT has more than one array for an
				; element transmitter.  Set and checked in UPI
				; level of MAT INPUT element transmitter.
				; Cleared by IO_END.
		PRINT_INI	; (BAS) A print statement has been initialized.
				; set in BASIOBEG. cleared in element transmitter
				; checked and cleared in BASIOEND.  Used to indicate
				; that there has been a PRINT with no element
				; transmitter.
		SNGL_ELEM	; (FOR) There is only one element in the
				; current I/O list.  Indicates that an
				; unbuffered transfer is possible if
				; record type and record size permit.
		NEED_INIT	; (FOR) REC-level initialization has not
				; yet been done.  Set on an unformatted
				; READ, other than a keyed READ.
	>			; end of status bits

	-F INTFILEND,A		; End of internal file buffer (FORTRAN)


	L NEG_LUB		; Negative length of LUB (which follows)
	-F,B,100		; ****************************************
				; ******** length of the LUB *************
				; ** must be edited by hand when LUB is changed**
				;*****************************************
	M 1			; Force length assignment to occur after
	P 1			; allocation
	K ISB_LEN,-ISB$K_NEG_BLN+ISB$K_NEG_LUB
;	L ISB_LEN		; length of ISB in bytes
	E			; End of ISB
; End of file OTSISB.MDL
