	.TITLE	OTS$SCOPY - String copying module
	.IDENT	/1-011/		; File: OTSSCOPY.MAR Edit: SBL1011

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

; FACILITY: Language-independent support: string handling
;
; ABSTRACT:
;
;	This module contains routines to allocate and deallocate
;	strings.  These entry points were in VMS release 1, before
;	there was a separate string facility, and they are being
;	retained for compatabliity.  They are implemented by calling
;	LIB$SGET1_DD_R6, LIB$SFREE1_DD6 and LIB$SFREEN_DD6.
;	This module also contains the routines to do string copying
;	using OTS$ semantics.  They are implemented by calling
;	LIB$SCOPY_DXDX6 and LIB$SCOPY_R_DX6.
;
;
; ENVIRONMENT: VAX-11 User Mode
;
; AUTHOR: R. Reichert, CREATION DATE: 3-APR-1981
;
; MODIFIED BY:
;
; 1-001	- Original.  Based on Version 1-007 of OTSSCOPY.B32.  With the
;	  addition of the code to accomodate additional classes of
;	  descriptors, necessitating a call to LIB$ANALYZE_SDESC_R3
;	  it became increasingly difficult to control the register
;	  usage in OTS$SCOPY_DXDX6 and OTS$SCOPY_R_DX6.  
;	  (In fact the original .B32 didn't control them correctly.)
;	  RKR 3-APR-1981
; 1-002 - Revise which error statuses get turned into signals in
;	  CHECK_FOR_FATAL.  RKR 3-SEP-1981
; 1-008 - Original OTSSCOPY.B32 had a revision history that ran up
;	  through 1-007.  To avoid confusion with module idents that
;	  are out in the field, this module's ident must be at
;	  least 1-008.  RKR 14-SEP-1981
; 1-009 - Add special-case code to process string descriptors that
;	  "read" like fixed string descriptors.  RKR 7-OCT-1981.
; 1-010 - Redirect jsb's from LIB$ANALYZE_SDESC_R3 to
;	  LIB$ANALYZE_SDESC_R2.  RKR 18-NOV-1981.
; 1-011 - Use general mode addressing.  SBL 30-Nov-1981
;
;--

	.SBTTL	DECLARATIONS
;
; LIBRARY MACRO CALLS:
;
	$SSDEF			; SS$_ symbols
	$DSCDEF			; DSC$ symbols
;
; EXTERNAL DECLARATIONS:
;
; Prevent undeclared symbols from being automatically global.
;
	.DSABL	GBL
; The condition codes and signals we deal with

	.EXTRN	OTS$_FATINTERR		; Fatal internal error
	.EXTRN	LIB$_FATERRLIB		;

	.EXTRN	OTS$_INVSTRDES		; Invalid string descriptor
	.EXTRN	LIB$_INVSTRDES		;

	.EXTRN	OTS$_INSVIRMEM		; Insufficient virtual memory
	.EXTRN	LIB$_INSVIRMEM		;

	.EXTRN	LIB$_INVARG		; Invalid argument

	.EXTRN	LIB$_WRONUMARG		; Wrong number of arguments
	.EXTRN	OTS$_WRONUMARG		;

; The external routines we use

	.EXTRN	LIB$STOP 		; Signal a fatal error
	.EXTRN	LIB$SGET1_DD_R6		; Alloc. string by descr
	.EXTRN	LIB$SFREE1_DD6		; Free 1 by descr.
	.EXTRN	LIB$SFREEN_DD6		; Free N by descr.
	.EXTRN	LIB$SCOPY_DXDX6		; Copy string by descr
	.EXTRN	LIB$SCOPY_R_DX6		; Copy string by ref.
	.EXTRN	LIB$ANALYZE_SDESC_R2	; Analyze desc to get length and
					; address of data
;
; MACROS:
;
	.MACRO	SIGNAL_FATAL_ERR ?L1
;+
; This macro checks to see if the current status in R0 is a success.
; If so, it continues.  If it is not a success, it branches to 
; CHECK_FOR_FATAL_ERROR for a closer look at the error code.  If it
; it is found to be one of a set of fatal errors of interest, the
; corresponding OTS$ error is signaled.  Else the supplied error code
; is signaled.

	BLBS	R0, L1		; If success code, bypass checks
	BRW	CHECK_FOR_FATAL_ERROR	; see if it is one of interest
L1:
	.ENDM	SIGNAL_FATAL_ERR

;
; EQUATED SYMBOLS:
;
;	NONE
;
; OWN STORAGE:
;
	.PSECT _OTS$DATA PIC, USR, CON, REL, LCL, NOSHR, -
			NOEXE, RD, WRT, LONG
;
;	NONE
;
; PSECT DECLARATIONS:
;
	.PSECT _OTS$CODE PIC, USR, CON, REL, LCL, SHR, -
			EXE, RD, NOWRT, LONG


	.SBTTL	OTS$SGET1_DD	Allocate a dynamic string
;++
; FUNCTIONAL DESCRIPTION:
;
;	Allocate a string.  LEN bytes are allocated to DESCRIP, which
;	is assumed to be a dynamic descriptor.  If the descriptor
;	already has storage allocated to it, but not enough, the old
;	storage is deallocated.
;
; CALLING SEQUENCE:
;
;	status.wlc.v = OTS$SGET1_DD (LEN.rwu.v, DESCRIP.wqu.r)
;
; FORMAL PARAMETERS:
;
;	LEN.rwu.v	The number of bytes to allocate.
;	DESCRIP.wqu.r	The descriptor.  The DSC$B_DTYPE field is not
;			touched.
;
; IMPLICIT INPUTS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; ROUTINE VALUE:
; COMPLETION CODES:
;
;	NONE
;
; SIDE EFFECTS:
;
;	May deallocate the descriptor's storage and allocate new
;	storage for it.
;	May signal OTS$_INSVIRMEM, OTS$_FATINTERR
;
;--

; Displacements from AP

LEN	=	4
DESCRIP	=	8

	.ENTRY	OTS$SGET1_DD, ^M<R2,R3,R4,R5,R6>	; Entry point
	MOVZWL	LEN(AP), R0		; length desired to R0
	MOVL	DESCRIP(AP), R1		; descriptor address to R1
	JSB	G^LIB$SGET1_DD_R6	; go allocate
	SIGNAL_FATAL_ERR		; signal if a fatal error
	RET				; to caller

	.SBTTL	OTS$SGET1_DD_R6	Allocate a synamic string
;++
; FUNCTIONAL DESCRIPTION:
;
;	Allocate a string.  LEN bytes are allocated to DESCRIP, which
;	is assumed to be a dynamic descriptor.  If the descriptor
;	already has storage allocated to it, but not enough, the old
;	storage is deallocated.
;
; CALLING SEQUENCE
;
;	status.wlc.v = JSB OTS$SGET1_DD_R6 (LEN.rwu.v, DESCRIP.wqu.r)
;
; FORMAL PARAMETERS:
;
;	LEN.rwu.v	In R0, the number of bytes to allocate.
;	DESCRIP.wqu.r	In R1, The descriptor.  The DSC$B_DTYPE field 
;			is not touched.
;
; IMPLICIT INPUTS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; ROUTINE VALUE:
; COMPLETION CODES:
;
;	NONE
;
; SIDE EFFECTS:
;
;	May deallocate the descriptor's storage and allocate new
;	storage for it.
;	May signal OTS$_INSVIRMEM or  OTS$_FATINTERR
;
;--

OTS$SGET1_DD_R6::

	MOVZWL	R0, R0			; extract words worth of length

					; R1 already contains address of
					; descriptor

	JSB	G^LIB$SGET1_DD_R6	; go allocate
	SIGNAL_FATAL_ERR		; signal error if a fatal one
	RSB				; return to our caller

	.SBTTL	OTS$SFREE1_DD Deallocate a dynamic string
;++
; FUNCTIONAL DESCRIPTION:
;
;	Deallocate a string.  The string is assumed to be dynamic.
;	If it isn't, LIB$SFREE1_DD6 will take care of it.
;
; CALLING SEQUENCE:
;
;	status.wlc.v = OTS$SFREE1_DD (DESCRIP.wqu.r)
;
; FORMAL PARAMETERS:
;
;	DESCRIP.wqu.r	The descriptor of the string to deallocate.
;
; IMPLICIT INPUTS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; ROUTINE VALUE:
; COMPLETION CODES:
;
;	NONE
;
; SIDE EFFECTS:
;
;	May deallocate virtual storage.
;	May signal OTS$_FATINTERR 
;
;--

; Displacements from AP

DESCRIP	=	4

	.ENTRY	OTS$SFREE1_DD, ^M<R2,R3,R4,R5,R6>	; Entry point
	MOVL	DESCRIP(AP), R0		; address of descriptor to R0
	JSB	G^LIB$SFREE1_DD6	; go free string
	SIGNAL_FATAL_ERR		; signal if error is fatal
	RET				; to caller

	.SBTTL	OTS$SFREE1_DD6 Deallocate a dynamic string
;++
; FUNCTIONAL DESCRIPTION:
;
;	Deallocate a string.  The string is assumed to be dynamic.
;	If it isn't, LIB$SFREE1_DD6 will take care of it.
;
; CALLING SEQUENCE:
;
;	status.wlc.v = JSB OTS$SFREE1_DD6 (DESCRIP.wqu.r)
;
; FORMAL PARAMETERS:
;
;	DESCRIP.wqu.r	In R0, the descriptor of the string to 
;			deallocate.
;
; IMPLICIT INPUTS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; ROUTINE VALUE:
; COMPLETION CODES:
;
;	NONE
;
; SIDE EFFECTS:
;
;	May deallocate virtual storage.
;	May signal OTS$_FATINTERR 
;
;--

OTS$SFREE1_DD6::
					; R0 already contains address of
					; descriptor to be freed
	JSB	G^LIB$SFREE1_DD6	; go free string
	SIGNAL_FATAL_ERR		; check for fatal error
	RSB				; return to our caller

	.SBTTL	OTS$SFREEN_DD Deallocate N Dynamic Strings
;++
; FUNCTIONAL DESCRIPTION:
;
;	Deallocate a number of strings.  The strings are all assumed
;	to be dynamic.  If not, LIB$FREE1_DD6 will eventually take care 
;	of them.
;
; CALLING SEQUENCE:
;
;	status.wlc.v = OTS$SFREEN_DD (NUM_DESC.rwu.v, DESC_PTR.wqu.r)
;
; FORMAL PARAMETERS:
;
;	NUM_DESC.rwu.v	The number of descriptors to deallocate.
;	DESC_PTR.wqu.r	The first of these descriptors.
;
; IMPLICIT INPUTS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; ROUTINE VALUE:
; COMPLETION CODES:
;
;	SS$_NORMAL
;
; SIDE EFFECTS:
;
;	May deallocate virtual storage.
;
;--


; Displacements from AP

NUM_DESC	= 4
DESC_PTR	= 8

	.ENTRY	OTS$SFREEN_DD, ^M<R2,R3,R4,R5,R6>	; Entry point
	MOVQ	NUM_DESC(AP), R0	; number of desc ==> R0
					; address of first desc ==>R1
	JSB	G^LIB$SFREEN_DD6	; go free N descriptors
	SIGNAL_FATAL_ERR		; check for fatal error
	RET				; to caller

	.SBTTL OTS$SFREEN_DD6 Deallocate N Dynamic Strings
;++
; FUNCTIONAL DESCRIPTION:
;
;	Deallocate a number of strings.  The strings are all assumed
;	to be dynamic.  If they aren't, eventually LIB$SFREE1_DD6 wil
;	take care of them.
;
; CALLING SEQUENCE:
;
;	status.wlc.v = JSB OTS$SFREEN_DD6 (NUM_DESC.rl.v, DESC_PTR.wqu.r)
;
; FORMAL PARAMETERS:
;
;	NUM_DESC.rl.v	In R0, the number of descriptors to deallocate.
;	DESC_PTR.wqu.r	In R1, the address of first of these descriptors
;
; IMPLICIT INPUTS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; ROUTINE VALUE:
; COMPLETION CODES:
;
;	SS$_NORMAL
;
; SIDE EFFECTS:
;
;	May deallocate virtual storage.
;	May signal OTS$_FATINTERR 
;
;--

OTS$SFREEN_DD6::
	JSB	G^LIB$SFREEN_DD6	; let LIB$SFREEN_DD6 do it
	SIGNAL_FATAL_ERR		; check for fatal error
	RSB				; return to caller.

	.SBTTL OTS$SCOPY_DXDX Copy String by Descriptor
;++
; FUNCTIONAL DESCRIPTION:
;
;	Copy any supported class string passed by descriptor to any 
; supported class string.
;
; CALLING SEQUENCE:
;
;	status.wlc.v = OTS$SCOPY_DXDX (SRC_DESC.rt.dx, DEST_DESC.wt.dx)
;
; FORMAL PARAMETERS:
;
;	SRC_DESC.rt.dx	The source descriptor.
;	DEST_DESC.wt.dx	The destination descriptor.  The class and dtype
;			fields are not disturbed.
;
; IMPLICIT INPUTS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; ROUTINE VALUE:
; COMPLETION CODES:
;
;	The number of bytes of the source not moved to the destination.
;
; SIDE EFFECTS:
;
;	May allocate and deallocate virtual storage.
;	May signal OTS$_INVSTRDES, OTS$_INSVIRMEM, or OTS$_FATINTERR.
;
;--

; Displacements from AP

SRC_DESC	= 4
DEST_DESC	= 8

	.ENTRY	OTS$SCOPY_DXDX, ^M<R2,R3,R4,R5,R6>	; Entry point
;+
; Copy string using LIB$SCOPY_DXDX6
;-
	MOVQ	SRC_DESC(AP), R0	; load R0 and R1 with addresses 
					; source and destination
					; descriptors
	JSB	G^LIB$SCOPY_DXDX6	; go copy string
	SIGNAL_FATAL_ERR		; check for fatal error

;+
; Compute length of source string and save it in R4
; (no need to check status after call to LIB$ANALYZE_SDESC_R2.  If
;  there was anything wrong with source descriptor, LIB$SCOPY_DXDX6
;  would already have complained about it.)
;-
	MOVL	SRC_DESC(AP), R0	; address of source descr.
	CMPB	DSC$B_CLASS(R0), #DSC$K_CLASS_D	; read like fixed ?
	BGTRU	1$			; no
	MOVZWL	DSC$W_LENGTH(R0), R4	; length - > R4
	BRB	2$			; join common flow

1$:	JSB	G^LIB$ANALYZE_SDESC_R2	; extract length of source
	MOVZWL	R1, R4			; length of source string

;+
; Compute length of destination string
; (no need to check status after call to LIB$ANALYZE_SDESC_R2.  If
;  there was anything wrong with destination descriptor, LIB$SCOPY_DXDX6
;  would already have complained about it.)
;-
2$:	MOVL	DEST_DESC(AP), R0	; address of destination descr
	CMPB	DSC$B_CLASS(R0), #DSC$K_CLASS_D	; read like fixed ?
	BGTRU	3$			; no
	MOVZWL	DSC$W_LENGTH(R0), R1	; length -> R1
	MOVL	DSC$A_POINTER(R0), R2	; address -> R2
	BRB	4$			; join common flow

3$:	JSB	G^LIB$ANALYZE_SDESC_R2	; extract length of destination
;+
; At this point, R1 is length of destination, R2 is address of
; destination, and R4 is length of source.
;
; Compute MAX (0, source_length - destination_length).  This becomes
; the number of unmoved bytes which must end up in R0.
;-
4$:	SUBL3	R1, R4, R0		; source len - destination len
	BGEQ	5$			; if positive
	CLRL	R0			; else zero
5$:
	RET

	.SBTTL	OTS$SCOPY_DXDX6 Copy String by Descriptor
;++
; FUNCTIONAL DESCRIPTION:
;
;	Copy any supported class string passed by descriptor to any 
; supported class string.
;
; CALLING SEQUENCE:
;
;     status.wlc.v = JSB OTS$SCOPY_DXDX6 (SRC_DESC.rt.dx, 
;					  DEST_DESC.wt.dx)
;
; FORMAL PARAMETERS:
;
;	SRC_DESC.rt.dx	The source descriptor, in R0.
;	DEST_DESC.wt.dx	The destination descriptor.  The class and dtype
;			fields are not disturbed.  This is in R1.
;
; IMPLICIT INPUTS:
;
;	None
;
; IMPLICIT OUTPUTS:
;
;	R0		Number of unmoved bytes remaining in source
;			string.
;	R1		Address one byte beyond the last byte in the
;			source string that was moved.
;	R2		0
;	R3		Address one byte beyond the destination string
;	R4		0
;	R5		0
;	PSL<N>		1 = Source length less than destination length
;	PSL<Z>		1 = Source length equals destination length
;	PSL<V>		0
;	PSL<C>		1 = Source length LSSU destination length
;
; ROUTINE VALUE:
; COMPLETION CODES:
;
;	See IMPLICIT OUTPUTS, above.
;
; SIDE EFFECTS:
;
;	May allocate and deallocate virtual storage.
;	May signal OTS$_INVSTRDES, OTS$_INSVIRMEM, OTS$_FATINTERR
;
;--

; Temp locations on stack

TEMP_SRC_ADDR	= 0
TEMP_DST_ADDR	= 4
TEMP_SRC_LEN	= 8
TEMP_DST_LEN	= 12
STACK_SPACE	= 16

OTS$SCOPY_DXDX6::
;+
; Save R0 (source desc addr) and R1 (dest descr addr) on the stack.
;-
	SUBL2	#STACK_SPACE, SP	; make space on stack
	MOVL	R0, TEMP_SRC_ADDR(SP)	; Save source descr address
	MOVL	R1, TEMP_DST_ADDR(SP)	; Save destination descr addr
;+
; Copy string using LIB$SCOPY_DXDX6
;-
	JSB	G^LIB$SCOPY_DXDX6	; go copy string
	SIGNAL_FATAL_ERR		; check for fatal error
;+
; Compute length and address of source string and save on stack
; (no need to check status after call to LIB$ANALYZE_SDESC_R2.  If
;  there was anything wrong with source descriptor, LIB$SCOPY_DXDX6
;  would already have complained about it.)
;-
	MOVL	TEMP_SRC_ADDR(SP), R0	; address of source descr.
	CMPB	DSC$B_CLASS(R0), #DSC$K_CLASS_D	; read like fixed ?
	BGTRU	1$			; no
	MOVZWL	DSC$W_LENGTH(R0), TEMP_SRC_LEN(SP)	; length
	MOVL	DSC$A_POINTER(R0), TEMP_SRC_ADDR(SP)	; address
	BRB	2$			; join common flow

1$:	JSB	G^LIB$ANALYZE_SDESC_R2	; extract length of source
	MOVL	R1, TEMP_SRC_LEN(SP)	; length of source string
	MOVL	R2, TEMP_SRC_ADDR(SP)	; addr of 1st byte of source

;+
; Compute length and address of destination string and save on stack
; (no need to check status after call to LIB$ANALYZE_SDESC_R2.  If
;  there was anything wrong with destination descriptor, LIB$SCOPY_DXDX6
;  would already have complained about it.)
;-
2$:	MOVL	TEMP_DST_ADDR(SP), R0	; address of destination descr
	CMPB	DSC$B_CLASS(R0), #DSC$K_CLASS_D	; read like fixed ?
	BGTRU	3$			; no
	MOVZWL	DSC$W_LENGTH(R0), TEMP_DST_LEN(SP)	; length
	MOVL	DSC$A_POINTER(R0), TEMP_DST_ADDR(SP)	; address
	BRB	4$			; join common flow

3$:	JSB	G^LIB$ANALYZE_SDESC_R2	; extract length of destination
	MOVL	R1, TEMP_DST_LEN(SP)	; length of dest string
	MOVL	R2, TEMP_DST_ADDR(SP)	; address of 1st byte of dest.

; Compute MAX (0, source_length - destination_length).  This becomes
; the number of unmoved bytes which must eventually end up in R0.
;-
4$:	SUBL3	TEMP_DST_LEN(SP), TEMP_SRC_LEN(SP), R6
	BGEQ	5$			; if positive
	CLRL	R6			; else zero
5$:

;+
; Compute address of first unmoved source byte as
;	R1 = TEMP_SRC_ADDR + MIN (TEMP_SRC_LEN, TEMP_DST_LEN)
;-
	CMPL	TEMP_DST_LEN(SP), TEMP_SRC_LEN(SP)
	BGEQ	6$			; Destination length bigger
	ADDL3	TEMP_SRC_ADDR(SP), TEMP_DST_LEN(SP), R1 ;dst len smaller
	BRB	7$
6$:	ADDL3	TEMP_SRC_ADDR(SP), TEMP_SRC_LEN(SP), R1 ;src len smaller
7$:

;+
; Compute address of one byte beyond last byte written to destination
; string as
;	 R3 = TEMP_DST_ADDR + TEMP_DST_LEN
;-
	ADDL3	TEMP_DST_ADDR(SP), TEMP_DST_LEN(SP), R3

;+
; Set up all remaining registers as specified under IMPLICIT OUTPUTS 
; above.
;
; Final movement must be into R0 in order to set up the condition codes
; correctly.
;
; First, we restore the stack.
;-
	ADDL2	#STACK_SPACE, SP	; restore stack address

	CLRQ	R4			; R4 and R5 are zero
					; R3 all set
	CLRL	R2			; R2 is zero
					; R1 all set
	MOVL	R6, R0			; Set R0 and set condition codes
					; properly
	RSB				; return to caller

	.SBTTL OTS$SCOPY_R_DX Copy String by Reference
;++
; FUNCTIONAL DESCRIPTION:
;
;	Copy any string passed by reference to any supported class 
; string passed by descriptor.
;
; CALLING SEQUENCE:
;
;	status.wlc.v = OTS$SCOPY_R_DX (SRC_LEN.rwu.v, SRC_ADDR.rt.r, 
;				       DEST_DESC.wt.dx)
;
; FORMAL PARAMETERS:
;
;	SRC_LEN.rwu.v	The number of bytes of data in the source
;	SRC_ADDR.rt.r	The address of the first of those bytes.
;	DEST_DESC.wt.dx	The destination descriptor.  The class and dtype
;			fields are not disturbed.
;
; IMPLICIT INPUTS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; ROUTINE VALUE:
; COMPLETION CODES:
;
;	The number of unmoved source bytes, or 0 if there are no unmoved
;	source bytes.
;
; SIDE EFFECTS:
;
;	May allocate and deallocate virtual storage.
;	May signal OTS$_INVSTRDES, OTS$_INSVIRMEM, OTS$_FATINTERR
;
;--

; Displacements off AP

SRC_LEN		= 4
SRC_ADDR	= 8
DEST_DESC	= 12

	.ENTRY	OTS$SCOPY_R_DX, ^M<R2,R3,R4,R5,R6>	; Entry point
;+
; Copy string using LIB$SCOPY_R_DX6
;-
	MOVL	SRC_LEN(AP), R0		; R0 is length of source
	MOVQ	SRC_ADDR(AP), R1	; R1 is addr of source
					; R2 is addr of dest desc
	JSB	G^LIB$SCOPY_R_DX6	; copy the string
	SIGNAL_FATAL_ERR		; check for fatal error

;+
; Compute length of destination string (into R1).
; (no need to check status after call to LIB$ANALYZE_SDESC_R2.  If
;  there was anything wrong with destination descriptor, LIB$SCOPY_DXDX6
;  would already have complained about it.)
;-
	MOVL	DEST_DESC(AP), R0	; address of dest descr
	CMPB	DSC$B_CLASS(R0), #DSC$K_CLASS_D	; rad like fixed ?
	BGTRU	1$			; no
	MOVZWL	DSC$W_LENGTH(R0), R1	; length -> R1
	BRB	2$			; join common flow

1$:	JSB	G^LIB$ANALYZE_SDESC_R2	; get length
;+
; Compute R0 = MAX (0, source_len - destination_length)
;-
2$:	MOVZWL	SRC_LEN(AP), R2		; words worth of source length
	SUBL3	R1, R2, R0		; R0 = dest len - src len
	BGEQ	3$			; if positive
	CLRL	R0			; else zero
3$:
	RET				; to caller

	.SBTTL	OTS$SCOPY_R_DX6 Copy Strings by reference
;++
; FUNCTIONAL DESCRIPTION:
;
;	Copy any class string passed by reference to any supported 
; class string passed by descriptor.
;
; CALLING SEQUENCE:
;
;      status.wlc.v = JSB OTS$SCOPY_R_DX6 (SRC_LEN.rwu.v, SRC_ADDR.rt.r,
;					   DEST_DESC.wt.dx)
;
; FORMAL PARAMETERS:
;
;	SRC_LEN.rwu.v	  The number of source bytes, in R0.
;	SRC_ADDR.rt.r	Address of the first of these bytes, in R1.
;	DEST_DESC.wt.dx  The destination descriptor.  The class and 
;			  dtype fields are not disturbed.  This is in R2
;
; IMPLICIT INPUTS:
;
;	None
;
; IMPLICIT OUTPUTS:
;
;	R0		Number of unmoved bytes remaining in source
;			string.
;	R1		Address one byte beyond the last byte in the
;			source string that was moved.
;	R2		0
;	R3		Address one byte beyond the destination string
;	R4		0
;	R5		0
;	PSL<N>		1 = Source length less than destination length
;	PSL<Z>		1 = Source length equals destination length
;	PSL<V>		0
;	PSL<C>		1 = Source length LSSU destination length
;
; ROUTINE VALUE:
; COMPLETION CODES:
;
;	See IMPLICIT OUTPUTS, above.
;
; SIDE EFFECTS:
;
;	May allocate and deallocate virtual storage.
;	May signal OTS$_INVSTRDES, OTS$_INSVIRMEM, OTS$_FATINTERR.
;
;--

; Temp locations on stack

TEMP_SRC_ADDR	= 0
TEMP_DST_ADDR	= 4
TEMP_SRC_LEN	= 8
TEMP_DST_LEN	= 12
STACK_SPACE	= 16

OTS$SCOPY_R_DX6::
;+
; Save input arguments (in R0 - R2) onto stack
;-
	SUBL2	#STACK_SPACE, SP	; make space on stack
	MOVZWL	R0, TEMP_SRC_LEN(SP)	; Save source length
	MOVL	R1, TEMP_SRC_ADDR(SP)	; Save source descr addr
	MOVL	R2, TEMP_DST_ADDR(SP)	; Save destination desc addr
;+
; Copy string using LIB$SCOPY_R_DX6
;-
	JSB	G^LIB$SCOPY_R_DX6	; go copy string
	SIGNAL_FATAL_ERR		; check for fatal error
;+
; Compute length and address of destination string and save on stack
; (no need to check status after call to LIB$ANALYZE_SDESC_R2.  If
;  there was anything wrong with destination descriptor, LIB$SCOPY_DXDX6
;  would already have complained about it.)
;-
	MOVL	TEMP_DST_ADDR(SP), R0	; address of destination descr
	CMPB	DSC$B_CLASS(R0), #DSC$K_CLASS_D	; read like fixed ?
	BGTRU	1$			; no
	MOVZWL	DSC$W_LENGTH(R0), TEMP_DST_LEN(SP) ; length
	MOVL	DSC$A_POINTER(R0), TEMP_DST_ADDR(SP) 	; length
	BRB	2$			; join common flow

1$:	JSB	G^LIB$ANALYZE_SDESC_R2	; extract length of destination
	MOVL	R1, TEMP_DST_LEN(SP)	; length of dest string
	MOVL	R2, TEMP_DST_ADDR(SP)	; address of 1st byte of dest.

; Compute MAX (0, source_length - destination_length).  This becomes
; the number of unmoved bytes which must eventually end up in R0.
;-
2$:	SUBL3	TEMP_DST_LEN(SP), TEMP_SRC_LEN(SP), R6
	BGEQ	3$			; if positive
	CLRL	R6			; else zero
3$:

;+
; Compute address of first unmoved source byte as
;	R1 = TEMP_SRC_ADDR + MIN (TEMP_SRC_LEN, TEMP_DST_LEN)
;-
	CMPL	TEMP_DST_LEN(SP), TEMP_SRC_LEN(SP)
	BGEQ	4$			; Destination length bigger
	ADDL3	TEMP_SRC_ADDR(SP), TEMP_DST_LEN(SP), R1 ;dst len smaller
	BRB	5$
4$:	ADDL3	TEMP_SRC_ADDR(SP), TEMP_SRC_LEN(SP), R1 ;src len smaller
5$:

;+
; Compute address of one byte beyond last byte written to destination
; string as
;	 R3 = TEMP_DST_ADDR + TEMP_DST_LEN
;-
	ADDL3	TEMP_DST_ADDR(SP), TEMP_DST_LEN(SP), R3

;+
; Set up all remaining registers as specified under IMPLICIT OUTPUTS 
; above.
;
; Final movement must be into R0 in order to set up the condition codes
; correctly.
;
; First, we restore the stack.
;-
	ADDL2	#STACK_SPACE, SP	; restore stack address

	CLRQ	R4			; R4 and R5 are zero
					; R3 all set
	CLRL	R2			; R2 is zero
					; R1 all set
	MOVL	R6, R0			; Set R0 and set condition codes
					; properly
	RSB				; to caller

	.SBTTL	CHECK_FOR_FATAL_ERROR
;++
; FUNCTIONAL DESCRIPTION:
;
; This routine looks at current status in R0 and if it finds one of the
; fatal LIB$ errors, its causes the corresponding OTS$ error to be
; signalled.
;
;	if it finds:		it signals:
;	------------		-----------
;	LIB$_FATERRLIB		OTS$_FATINTERR
;	LIB$_INVSTRDES		OTS$_INVSTRDES
;	LIB$_INSVIRMEM		OTS$_INSVIRMEM
;	LIB$_WRONUMARG		OTS$_WRONUMARG
;	LIB$_INVARG		OTS$_INVSTRDES
;
;
; CALLING SEQUENCE:
;
;      JMP CHECK_FOR_FATAL_ERROR  with INPUT_STATUS.rlc.v in R0
;
; FORMAL PARAMETERS:
;
;	INPUT_STATUS.rlc.v	In R0, the status to be checked.
;				On entry, we know it is not a success
;				status.
;
; IMPLICIT INPUTS:
;
;	None
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; ROUTINE VALUE:
; COMPLETION CODES:
;
;	Never returns
;
; SIDE EFFECTS:
;
;	Will signal some error.
;
;--

CHECK_FOR_FATAL_ERROR:

	CMPL	R0, #LIB$_INVSTRDES
	BNEQ	1$
	PUSHL	#OTS$_INVSTRDES
	BRB	FATAL
1$:	
	CMPL	R0, #LIB$_INSVIRMEM
	BNEQ	2$
	PUSHL	#OTS$_INSVIRMEM
	BRB	FATAL
2$:	
	CMPL	R0, #LIB$_FATERRLIB
	BNEQ	3$
	PUSHL	#OTS$_FATINTERR
	BRB	FATAL
3$:	
	CMPL	R0, #LIB$_INVARG
	BNEQ	4$
	PUSHL	#OTS$_INVSTRDES
	BRB	FATAL
4$:	
	CMPL	R0, #LIB$_WRONUMARG
	BNEQ	5$
	PUSHL	#OTS$_WRONUMARG
	BRB	FATAL
5$:
	PUSHL	R0			; prepare to signal incoming
					; error
FATAL:	CALLS	#1, G^LIB$STOP		; to never return



	.END				; End of module OTS$SCOPY
