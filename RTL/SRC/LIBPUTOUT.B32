MODULE LIB$PUT_OUTPUT (	! Library $PUT on device SYS$OUTPUT

	IDENT = '1-005'	! File: LIBPUTOUT.B32 EDIT: RKR1005

		      ) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  General Uitlity Library
!
! ABSTRACT:
!
!	Output a string as a record on device SYS$OUTPUT.
!
! ENVIRONMENT:  User Mode - AST re-entrant
!
! AUTHOR:  Thomas N. Hastings, CREATION DATE:  8-Aug-1977
!
! MODIFIED BY:
!
! 	Thomas N. Hastings, 8-Aug-1977: VERSION 0
! 01	- original
! 04	- change to SYS$OUTPUT
! 05	- change to do OPEN at first time
! 06	- change to set up RAB for message
! 0-7	- fix comment
! 0-9	- Put in carriage control.  TNH 28-Oct-77
! 0-11	- Change to STARLET library.  DGP 20-Apr-78
! 0-12	- Change REQUIRE files for VAX system build.  DGP 28-Apr-78
! 0-13	- Change STARLET to RTLSTARLE to avoid conflicts.  DGP 1-May-78
! 0-14	- Make wait if stream active, so AST re-entrant.  TNH 29-July-78
! 0-15	- Change file name to LIBPUTOUT.B32, and change the name of
!	   the REQUIRE file similarly.  JBS 14-NOV-78
! 1-001	- Update version number and copyright notice.  JBS 16-NOV-78
! 1-002	- Change REQUIRE file names from FOR... to OTS...  JBS 07-DEC-78
! 1-003 - Enhance to recognize additional classes of string descriptors
!	  by invoking LIB$ANALYZE_SDESC__R3 to extract length and
!	  address of 1st data byte from descriptor.  
!	  Remove reference to OTSMAC.REQ.  RKR 27-MAY-1981.
! 1-004 - Add special-case code to process string descriptors that
!	  "read" like fixed string descriptors.  RKR 7-OCT-1981.
! 1-005 - Redirect jsb's from LIB$ANALYZE_SDESC_R3 to
!	  LIB$ANALYZE_SDESC_R2.  RKR 18-NOV-1981
!--

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
	LIB$PUT_OUTPUT;		! Output string on device SYS$OUTPUT

!
! INCLUDE FILES:
!
REQUIRE 'RTLIN:STRLNK';		! Linkage for LIB$SDESC_R3
REQUIRE 'RTLIN:RTLPSECT';	! Define DECLARE_PSECTS macro
LIBRARY	'RTLSTARLE';		! STARLET library for macros and symbols
!
! MACROS:
!

!
! EQUATED SYMBOLS:
!

!
! PSECT DECLARATIONS:
!

	DECLARE_PSECTS (LIB);	! declare PSECTs for LIB$ facility

!
! OWN STORAGE:
!

OWN	
    SYS_OUTPUT_ISI: WORD INITIAL (0); ! ISI for SYS$OUTPUT

!
! EXTERNAL REFERENCES:
!
EXTERNAL ROUTINE
    LIB$ANALYZE_SDESC_R2 : LIB$ANALYZE_SDESC_JSB_LINK; 
				! To extract length and address of 1st
				! data byte from descriptor.
!


GLOBAL ROUTINE LIB$PUT_OUTPUT (	! Output string to SYS$OUTPUT

	MESSAGE		! Adr. of string descriptor

			      ) = ! Value returned is RMS completion 
				  ! code
!++
! FUNCTIONAL DESCRIPTION:
!
!	Outputs a record on device SYS$OUTPUT using RMS $PUT.
!	On first call, device SYS$OUTPUT is opened
!	(or created if it doesn't exist yet).  Thus the logical
!	name SYS$OUTPUT can be assigned to any file name in order
!	to redirect I/O.
!
! FORMAL PARAMETERS:
!
!	MESSAGE.rt.dx		Adr. of string descriptor of string
!				to be output.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	SYS_OUTPUT_ISI  RMS internal stream id for all but first call
!
! COMPLETION CODES:
!
!	RMS completion code
!	or LIB$_INVARG if descriptor is bad.
!
! SIDE EFFECTS:
!
!	Opens (creates if not existent) file SYS$OUTPUT on first call.
!--

    BEGIN

    LOCAL
	RMS_STATUS,			 ! RMS status
	FAB: $FAB_DECL,			 ! FAB
	RAB: $RAB_DECL;			 ! RAB
    MAP
	MESSAGE: REF BLOCK [, BYTE];	! String descriptor

    IF .SYS_OUTPUT_ISI EQL 0
    THEN

	!+
	! First call, initialize FAB
	!-

	BEGIN
	$FAB_INIT (
	    FAB = FAB,
	    FAC = PUT,			! file access: PUT
	    FNA = UPLIT ('SYS$OUTPUT'),	! file name: SYS$output
	    FNS = 10,			! file name size: 10 bytes
	    RAT = CR,			! carriage control - each 
					! record on separate line
	    FOP = CIF);			! file options: create if file 
					! not exist

	!+
	! Create SYS$OUTPUT, open if exist and position to end-of-file,
	! remember ISI
	!-

	RMS_STATUS = $CREATE (FAB = FAB);		! fab addr : FAB
	IF NOT .RMS_STATUS THEN RETURN .RMS_STATUS;	! if create fail
							! then return 
							! with RMS 
							! status code
	$RAB_INIT (
	    FAB = FAB,		! FAB address
	    RAB = RAB,		! RAB address
	    ROP = EOF);		! position at end-of-file if file exists

	RMS_STATUS = $CONNECT (RAB = RAB);  ! connect RAB to the file
	IF NOT .RMS_STATUS THEN RETURN .RMS_STATUS;
	SYS_OUTPUT_ISI = .RAB[RAB$W_ISI];	! remember ISI
	END


    ELSE

	!+
	! file already exist, just initialize RAB
	! including internal stream identifier returned from first $OPEN
	!-
	BEGIN
	$RAB_INIT (
	    FAB = FAB,		! FAB address
	    RAB = RAB,		! RAB address
	    ROP = EOF);		! position at end-of-file if file exists
	RAB[RAB$W_ISI] = .SYS_OUTPUT_ISI;
	END;

!+
! Setup buffer address and length on first and subsequent $PUTs
! If descriptor is bad, return status from LIB$ANALYZE_SDESC_R2.
!-

    IF .MESSAGE [DSC$B_CLASS] GTRU DSC$K_CLASS_D
    THEN		! Use generalized extract
	BEGIN
	LOCAL RET_STATUS ;
	RET_STATUS = LIB$ANALYZE_SDESC_R2 ( .MESSAGE ;
					    RAB [RAB$W_RSZ],   ! length
					    RAB [RAB$L_RBF]);  ! address

	IF NOT .RET_STATUS THEN RETURN (.RET_STATUS) ;

	END

    ELSE		! Fetch length and address directly

	BEGIN
	RAB [RAB$W_RSZ] = .MESSAGE [DSC$W_LENGTH] ;
	RAB [RAB$L_RBF] = .MESSAGE [DSC$A_POINTER] ;
	END ;
!+
! Output the string as a single record and return RMS completion status
! If error and it is RECORD STREAM ACTIVE, wait and try again, thus
! making routine AST re-entrant.  Return SS$_NORMAL (00000001) if
! success, rather than LIB$_NORMAL (00010001).
!-

    IF NOT $PUT (RAB = RAB)
    THEN
	WHILE .RAB[RAB$L_STS] EQL RMS$_RSA DO
	    BEGIN
	    $WAIT (RAB=RAB);
	    $PUT (RAB=RAB);
	    END;

    RETURN (IF .RAB[RAB$L_STS] THEN SS$_NORMAL ELSE .RAB[RAB$L_STS]);

    END;			! End of routine LIB$PUT_OUTPUT
END				! End of module LIB$PUT_OUTPUT
ELUDOM
