	.TITLE	FOR$RANDOM	; random number generator and interfaces
	.IDENT	/1-002/		; File: FORRANDOM.MAR

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;
; FACILITY: FORTRAN SYSTEM LIBRARY
;++
; ABSTRACT:
;
;	Provide entry points for:
;		FOR$IRAN
;		FOR$RANDU_W
;
;	The algorithm used is copied exactly from PDP-11 FORTRAN
;	library so the same sequences will be generated.
;--
;
; VERSION: 1-001
;
; HISTORY:
;
; AUTHOR:
;	Jonathan M. Taylor, 12-Aug-77: Version 0
;
; MODIFIED BY:
;
;
;

	.SBTTL	HISTORY		; Detailed Current Edit History
; Edit History for Version 0 of FOR$RANDOM
;
; 0-3	- use word offset to call for$JRAN TNH 16-SEP-77
; 0-4	- add a bug from 11 routine to make compatible:
;	- now tests only second parameter for 0 (first call),
;	- instead of concatenated longword JMT 6-OCT-77
; 0-5	- JRAN is now passed only one longword arg.  JMT 9-Oct-77
; 0-6	- Copy back seed as 2 words or 1 long word.  TNH 14-Nov-77
; 0-9	- Remove FOR$JRAN which is no longer supported.
;	  FORTRAN compiler now generates calls to MTH$RANDOM.  JMT 4-Jan-78
; 0-10	- Bug fix 0-4 didn't break my code enough to be
;	  compatable with the 11.  JMT 16-Feb-78
; 0-11	- Remove FOR$FLAG_JACKET.  TNH 11-July-78
; 1-001	- Update version number and copyright notice.  JBS 16-NOV-78
; 1-002	- Add "_" to the PSECT directive.  JBS 22-DEC-78

	.SBTTL	DECLARATIONS

;
; INCLUDE FILES:
;	oerr.mar

;
; EXTERNAL SYMBOLS:
;

;
; MACROS:
;

;
; PSECT DECLARATIONS:
	.PSECT	_FOR$CODE	PIC, SHR, EXE, LONG, NOWRT

;
; EQUATED SYMBOLS:
	a1	=	4	; offset into AP of address of arg1
	a2	=	8	; offset into AP of address of arg2
	a3	=	12	; (optional) offset into AP of add-
				; ress of output

;
; OWN STORAGE:
;	NONE

	.SBTTL	FOR$RANDU and FOR$RANDU_W	return number as parameter

;++
; FUNCTIONAL DESCRIPTION:
;
;	CALLs FOR$IRAN to get a random number and returns it in
;	third parameter.
;
; CALLING SEQUENCE:
;	CALL FOR$RANDU   (gen_base_1.ml.r, gen_base_2.ml.r,
;			random_fraction.wf.r)
;
;	CALL FOR$RANDU_W (gen_base_1.mw.r, gen_base_2.mw.r,
;			random_fraction.wf.r)
;
; INPUT PARAMETERS:
;	gen_base_1		seed1 for algorithm
;	gen_base_2		seed2 for algorithm
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	random_fraction		floating point result is
;				between 0 and 1
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	NONE
;
;--



FOR$RANDU::
FOR$RANDU_W::
	.WORD	^M<>
	CALLG	(AP), W^FOR$IRAN		; R0 = floating result
	MOVF	R0, @a3(AP)		; return as third parameter
	RET

	.SBTTL	FOR$IRAN	  result in R0

;++
; FUNCTIONAL DESCRIPTION:
;
;	SEED = arg1,arg2
;	if arg2 = 0 then SEED = 1	; first call only
;	SEED = SEED * (2**16 + 3)
;	arg1,arg2 = SEED		; return for later calls
;	R0 = SEED normalized to floating point
;
; CALLING SEQUENCE:
;	Random_fraction.wf.v = FOR$IRAN (gen_base_1.mw.r,
;					 gen_base_2.mw.r)
;
; INPUT PARAMETERS:
;	gen_base_1		seed1 for algorithm
;	gen_base_2		seed2 for algorithm
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	NONE
;
; FUNCTIONAL VALUE:
;	A floating-point value between 0 and 1
;--



FOR$IRAN::
	.WORD	^M<>			; Use R0:R1
	MOVW	@a1(AP), R0		; R0 = arg1
	ROTL	#16, R0, R0		; build a longword value
	MOVW	@a2(AP), R0		; in R0
					; NOTE: PDP-11 algorithm only checks
					; bits 15:0 for 0, so VAX is compatibile
	BEQL	20$			; branch if first call
	MULL3	#^X10003, R0, R1	; R1 = R0 *((2**16)+3) = SEED
	BBCC	#31, R1, 15$		; make sure SEED positive
15$::	CVTLF	R1, R0			; R0 = floating (SEED) binary point
					; to right of bit 0
	MULF	#^X3100, R0		; R0 = R0 * 2**-31 = normalized, binary point
					; to right of bit 31
					; R0 = floating point result
					; R1 = new seed
	MOVW	R1, @a2(AP)		; return bits 15:0 of seed
	ROTL	#16, R1, R1		; seed<31:16> to R1<15:0>
	MOVW	R1, @a1(AP)		; return bits 31:16 of seed as first arg
	RET				; return with R0 = floating random number
20$:	ADDL	#^X10000, R0		; this is what the 11 did!
	MOVW	#3, R0
	MOVL	R0, R1
	BRB	15$


	.END
