MODULE COB$LINAGE(
		IDENT = '1-016'			! file COBLINAGE.B32 EDIT:LB1016
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!
!++
!
! FACILITY:	COBOL SUPPORT
!
! ABSTRACT:
!
!	This module contains the RTL routines to handle LINAGE files
!	for VAX-11 COBOL.
!
! ENVIRONMENT:	VAX/VMS user mode
!
! AUTHOR: Wm P. Storey, CREATION DATE: 18-July-1979
!
! MODIFIED BY:
!
! 1-001 - Original version. WPS 18-JULY-79
!
! 1-002 - Modified to insure TOP lines on first logical page.
!	  WPS 14-AUG-79
!
! 1-003 - Changed context fields (CTX) from an area pointed to by
!	  RAB$L_CTX to an area that precedes in storage the RAB
!	  and that is specified by negative offsets from the RAB.
!	  WPS 13-SEPT-79
!
! 1-004 - Fix problem with end-of-page processing for WRITEs that
!	  overflow page-body.
!	  WPS 17-SEPT-79
!
! 1-005 - Change references to REQUIRE  files to make compatible with
!	  rest of system.   RKR 18-SEPT-79
!
! 1-006 - Fix problem with CALLing generated-code init-linage
!	  routine for case of LINKAGE SECTION linage parameters.
!	  WPS 18-SEPT-79
!
! 1-007 - Handle special case of "BEFORE ADVANCING identifier", where
!	  identifier is equal to zero, for which the generated code
!	  will produce a prefix-postfix of <CR><CR>. WPS 24-SEPT-79
!
! 1-008 - Signal filename for invalid LINAGE parameters. WPS 25-SEPT-79
!
! 1-009 - Cosmetic changes.  RKR 26-SEPT-79
!
! 1-010 - Correct problem with ADVANCING PAGE that caused loss of 1 line
!	  per page advanced (forgot to add 1).	WPS 1-Oct-1979
!
! 1-011 - Correct problem with FOOTING that did not distinguish between
!	  "footing not specified" and "footing specified but with value 0".
!						WPS 5-Oct-1979
!
! 1-012 - Addition of comments as per code review.  WPS 16-Oct-1979
! 1-013 - Further minor cosmetic changes.  RKR 20-OCT-1979
! 1-014 - Change references to OTS$_FATINTERR to COB$_FATINTERR.
!	  RKR 29-OCT-79
! 1-015 - Addition of routine COB$TERM_LINAGE.  WPS 31-Oct-1979
! 1-016 - Added LIB$STOP as external routine.  Also added EDIT field
!	  for checkin's use and updated copyright notice.  LB 30-NOV-1981
!
!--
!<BLF/PAGE>

!
  SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE ) ;


! LINKAGES
!
!	NONE
!
! TABLE OF CONTENTS
!
FORWARD ROUTINE
	COB$LINAGE,
	COB$INIT_LINAGE : NOVALUE,
	COB$TERM_LINAGE : NOVALUE;
!
! INCLUDE FILES:
!
LIBRARY 'RTLSTARLE';
REQUIRE 'RTLIN:COBDEF';
REQUIRE 'RTLIN:RTLPSECT';
!
! MACROS
!
    MACRO
	PREFIX	= 0,0,8,0%,
	POSTFIX	= 0,8,8,0%,
	CONTROL	= PREFIX%,
	SIGN(A,B,C,D) = A,B+7,1,D%;

!
! EQUATED SYMBOLS
!
!	NONE
!
! PSECT DECLARATIONS
!
DECLARE_PSECTS (COB) ;			! Declare PSECTS for COB$ facility
!
! OWN STORAGE
!
!	NONE
!
! EXTERNAL REFERENCES
!
EXTERNAL LITERAL
	COB$_ERRON_FIL,
	COB$_INVLINVAL,
	COB$_FATINTERR;
!

GLOBAL ROUTINE COB$LINAGE(RAB,INIT_LNG_ROUTIN) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine is called to perform linage functions prior to calling
!	SYS$PUT for LINAGE files.
!
! FORMAL PARAMETERS:
!
!	RAB.ra.v		is the address of the RAB of the associated
!				LINAGE file.
!
!	INIT_LNG_ROUTIN.czem.vp	is the address of the entry mask of the CALLable
!				routine generated in-line by VAX-11 COBOL to
!				convert the linage parameters to longwords in
!				the context field.
!
! IMPLICIT INPUTS:
!
!	COB$V_CTX_OPENL		TRUE if LINAGE file has been opened but not yet
!				written to.  This bit is needed to make sure
!				that TOP lines are positioned on the first
!				logical page.
!
!	COB$L_CTX_LINAG		specifies the number of lines in the page body;
!				i.e., it specifies the number of lines on the
!				logical page that can be written.
!
!	COB$L_CTX_FOOTI		specifies the line number within the page body
!				at which the footing area begins.  The footing
!				area is the "danger zone" area at the end of the
!				page body in which the end-of-page condition is
!				true, but printing/spacing is still allowed.
!
!	COB$L_CTX_TOP		specifies the number of lines that comprise the
!				top margin on the logical page.  The top margin
!				is a NO-print area that precedes the page body.
!
!	COB$L_CTX_BOTTO		specifies the number of lines that comprise the
!				bottom margin on the logical page.  The bottom
!				margin is a NO-print area that follows the page
!				body.
!
!	COB$L_CTX_COUNT		specifies the line number at which the device is
!				positioned within the current page body.  It is
!				the COBOL special register LINAGE-COUNTER.
!
!	RAB$L_RHB		is the address of the two byte control area
!				containing the print file information.  The
!				first byte is the "prefix" area, and the second
!				byte is the "postfix" area, specifying carriage
!				control to be performed before and after the
!				record, respectively. One control byte will
!				contain either an integer n in the range of 0
!				thru 127 (indicating ADVANCING n LINES) or a
!				hex 8C (indicating ADVANCING PAGE);  and the
!				other control byte will contain a hex 8D
!				(indicating no vertical carriage control;  note
!				that <CR> is used to indicate the absence of
!				vertical movement;  this is necessary to insure
!				proper over-printing in print files).  The
!				generated code special cases BEFORE ADVANCING
!				0 LINES by putting out <CR><CR> in the prefix-
!				postfix control bytes (this is necessary to
!				insure proper overprinting for "AFTER ADVANCING
!				0 LINES ,  BEFORE ADVANCING 0 LINES" sequence.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	If End-Of-Page condition then TRUE else FALSE.
!
! SIDE EFFECTS:
!
!	NONE
!
!--    
    BEGIN

    LITERAL
	CR	= %X'8D',
	FF	= %X'8C',
	TRUE	= 1,
	FALSE	= 0;

    BUILTIN
	CALLG,
	FP,
	TESTBITSC;

    MAP
	RAB : REF BLOCK [,BYTE],
	FP  : REF BLOCK [,BYTE];

    LOCAL
        RHB : REF BLOCK,
	RETURN_VALUE,
        TEMP;
 
!
!   COB$LINAGE should not cause access violations.  Since COB$LINAGE is called
!   before the associated SYS$PUT, the RAB may be invalid.  Validate the RAB by
!   checking that RAB$W_ISI is non-zero.  Note that this DOES recognize the
!   case of a CLOSEd file that was previously OPEN.
!
    IF .RAB[RAB$W_ISI] EQL 0
    THEN
        RETURN FALSE;
 

    RHB = .RAB[RAB$L_RHB];

    !
    ! Determine whether ADVANCING lines  or  ADVANCING PAGE,
    ! and adjust RHB to point to meaningful information byte
    ! within RAB$L_RHB.  Once RHB has been adjusted, further
    ! references are to RHB[CONTROL].
    !
    IF .RHB[SIGN(PREFIX)]
    THEN
        IF NOT .RHB[SIGN(POSTFIX)]
        THEN
            RHB = .RHB + 1
        ELSE
            BEGIN    
            !
            ! Neither is ADVANCING lines, so either one is ADVANCING PAGE
	    ! (very high probability) or both are <CR> (very low
	    ! probability).  Let us assume that this is ADVANCING PAGE.
	    !
	    ! LINAGE files may not use form-feed for ADVANCING PAGE,
	    ! so calculate number of new lines needed.  LINAGE will
	    ! always be greater than LINAGE-COUNTER for ADVANCING
	    ! PAGE.  Note that the lines at TOP are for the next logical page.
            !
            TEMP =  .RAB[COB$L_CTX_LINAG] - .RAB[COB$L_CTX_COUNT] + 1
                            + .RAB[COB$L_CTX_BOTTO];

	    !
	    ! Determine which control field has <FF>.
	    !
	    IF .RHB[POSTFIX] EQL FF
	    THEN
		BEGIN

		IF TESTBITSC(RAB[COB$V_CTX_OPENL])
		THEN
		    !
		    ! WRITE rec BEFORE ADVANCING PAGE
		    ! and this is first WRITE to file
		    ! Advance TOP lines prior as well.
		    !
		    (IF .RAB[COB$L_CTX_TOP] NEQ 0
		    THEN RHB[PREFIX] = .RAB[COB$L_CTX_TOP]);

		RHB = .RHB + 1
		END

            ELSE
		IF .RHB[PREFIX] EQL FF
		THEN
		    (IF TESTBITSC(RAB[COB$V_CTX_OPENL])
		    THEN
			!
			! WRITE rec AFTER ADVANCING PAGE
			! and this is first WRITE to file.
			! Include the TOP portion of first logical page.
			!
			TEMP = .TEMP + .RAB[COB$L_CTX_TOP])
		ELSE
		    !
		    ! The sign bit is set for both control bytes, yet neither
		    ! is a <FF>.  Consequently, this must be case of <CR><CR>,
		    ! which means WRITE rec BEFORE ADVANCING 0 LINES.  Hence,
		    ! the LINAGE-COUNTER is not affected.
		    !
		    RETURN FALSE;


	    !
	    ! Call the 'initialize-linage-routine' which will convert the
	    ! LINAGE parameters to longwords in the context area of the RAB.
	    ! This 'initialize-linage-routine' is generated in-line at
	    ! compile-time.  It is necessary to call it with the AP of the 
	    ! COBOL program in which it resides to handle linage parameters 
	    ! in LINKAGE SECTION.
	    ! 
            CALLG(.FP[SF$L_SAVE_AP],(.INIT_LNG_ROUTIN));

            RHB[CONTROL] = .TEMP + .RAB[COB$L_CTX_TOP];

            RETURN TRUE
            END;

!
!   At this point, we are advancing lines and RHB has address of the chosen
!   prefix/postfix lines that are to be advanced.  Update LINAGE-COUNTER.
!
    TEMP		 = .RAB[COB$L_CTX_COUNT];
    RAB[COB$L_CTX_COUNT] = .RAB[COB$L_CTX_COUNT] + .RHB[CONTROL];


!
!   Determine if over page body or in FOOTING area.
!
    IF .RAB[COB$L_CTX_COUNT] GTR .RAB[COB$L_CTX_LINAG]
    THEN
        BEGIN
	!
	!   The write about to be performed will put us over the page body.
	!   Re-calculate the number of lines to advance to include BOTTOM
	!   and TOP.  Note that the lines at TOP are for the next logical page,
	!   therefore, add lines at TOP after CALL to initialize-routine.
	!
        RHB[CONTROL] = .RAB[COB$L_CTX_LINAG] - .TEMP + 1
			 + .RAB[COB$L_CTX_BOTTO];

	!
	! Call the 'initialize-linage-routine' which will convert the
	! LINAGE parameters to longwords in the context area of the RAB.
	! This 'initialize-linage-routine' is generated in-line at
	! compile-time.  It is necessary to call it with the AP of the
	! COBOL program in which it resides to handle linage parameters
	! in LINKAGE SECTION.
	! 
        CALLG(.FP[SF$L_SAVE_AP],(.INIT_LNG_ROUTIN));

 
        RHB[CONTROL] = .RHB[CONTROL] + .RAB[COB$L_CTX_TOP];
 
        RETURN_VALUE = TRUE
        END
    ELSE
	!
	!   The write to be performed will not put us over the page body.
	!   If we are now within the footing area, return TRUE to indicate
	!   end-of-page condition.
	!
        IF .RAB[COB$L_CTX_COUNT] GEQ .RAB[COB$L_CTX_FOOTI]
        THEN
            RETURN_VALUE = TRUE
        ELSE
            RETURN_VALUE = FALSE;


!
!   Normally, lines at TOP are positioned during end-of-page processing.
!   It is necessary to special-case the first WRITE on the first logical
!   page after a file has been OPEned.
!
    IF TESTBITSC(RAB[COB$V_CTX_OPENL])
    THEN
	BEGIN
	LOCAL
	    PREPTR: REF BLOCK;
	PREPTR = .RAB[RAB$L_RHB];
	IF .PREPTR[PREFIX] EQL CR
	THEN
	    !
	    ! WRITE rec BEFORE ADVANCING n LINES
	    (IF .RAB[COB$L_CTX_TOP] NEQ 0
	    THEN
		 PREPTR[PREFIX] = .RAB[COB$L_CTX_TOP])
	ELSE
	    PREPTR[PREFIX] = .PREPTR[PREFIX] + .RAB[COB$L_CTX_TOP]
	END;

    RETURN .RETURN_VALUE
    END;

GLOBAL ROUTINE COB$INIT_LINAGE(RAB) : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine is called by the generated code in-line "initialize-
!	linage-routine" to consistency check the linage parameters as per
!	the COBOL standard and to set the value of LINAGE-COUNTER to 1.
!
! FORMAL PARAMETERS:
!
!	RAB.ra.v		is the address of the RAB of the associated
!				LINAGE file.
!
! IMPLICIT INPUTS:
!
!	COB$L_CTX_LINAG		specifies the number of lines in the page body;
!				i.e., it specifies the number of lines on the
!				logical page that can be written.
!
!	COB$L_CTX_FOOTI		specifies the line number within the page body
!				at which the footing area begins.  The footing
!				area is the "danger zone" area at the end of the
!				page body in which the end-of-page condition is
!				true, but printing/spacing is still allowed.
!
!	COB$L_CTX_TOP		specifies the number of lines that comprise the
!				top margin on the logical page.  The top margin
!				is a NO-print area that precedes the page body.
!
!	COB$L_CTX_BOTTO		specifies the number of lines that comprise the
!				bottom margin on the logical page.  The bottom
!				margin is a NO-print area that follows the page
!				body.
!
!	COB$L_CTX_COUNT		specifies the line number at which the device is
!				positioned within the current page body.  It is
!				the COBOL special register LINAGE-COUNTER.
!
!
! IMPLICIT OUTPUTS:
!
!	If the consistency checks fail,  "bad linage parameters" are SIGNALed.
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    EXTERNAL ROUTINE
	LIB$STOP:NOVALUE;				! Signal fatal error

    MAP RAB : REF BLOCK [,BYTE];

    !
    !   COB$INIT_LINAGE should not cause access violations.  Since it may
    !   be called before the associated SYS$PUT, the RAB may be invalid.
    !   Validate the RAB by checking that RAB$W_ISI is non-zero.
    !
    IF .RAB[RAB$W_ISI] EQL 0
    THEN RETURN;

    !
    ! At the time this routine is called, the linage parameters have
    ! been converted to longwords in the context area.  Check that
    ! all values are valid.
    !
    IF .RAB[COB$L_CTX_LINAG] GTR 0
                AND
       .RAB[COB$L_CTX_TOP]   GEQ 0
                AND
       .RAB[COB$L_CTX_BOTTO] GEQ 0
                AND
       .RAB[COB$L_CTX_FOOTI] GTR 0
                AND
       .RAB[COB$L_CTX_FOOTI]
                LEQ 
       .RAB[COB$L_CTX_LINAG]

    THEN
	!
	! Linage parameters are valid.  As this routine is called for each
	! new page, set the COBOL special register LINAGE-COUNTER to 1.
	!
        RAB[COB$L_CTX_COUNT] = 1

    ELSE
	BEGIN
	!
	! Linage parameters are invalid.  Signal "invalid linage value"
	! and indicate what file this occurred on.
	!
	LOCAL
	    FAB      :  REF BLOCK [,BYTE],
	    NAM	     :  REF BLOCK [,BYTE],
	    RSADESC  :  VECTOR[2];

	FAB = .RAB[RAB$L_FAB];
	IF .FAB EQL 0 THEN SIGNAL_STOP(COB$_FATINTERR);

	NAM = .FAB[FAB$L_NAM];
	IF .NAM EQL 0 THEN SIGNAL_STOP(COB$_FATINTERR);

	RSADESC[1] = .NAM[NAM$L_RSA];
	RSADESC[0] = .NAM[NAM$B_RSL];

	IF .RSADESC[0] EQL 0 THEN RSADESC[0] = .NAM[NAM$B_ESL];
	IF .RSADESC[0] EQL 0
	    THEN
		BEGIN
		RSADESC[0] = .FAB[FAB$B_FNS];
		RSADESC[1] = .FAB[FAB$L_FNA];
		END;

        LIB$STOP(COB$_INVLINVAL,0,COB$_ERRON_FIL,1,RSADESC)
	END
    END;

GLOBAL ROUTINE COB$TERM_LINAGE(RAB) : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine is called to advance the number of lines needed to
!	finish out the logical page before the actual CLOSE is done.
!	
!
! FORMAL PARAMETERS:
!
!	RAB.ra.v		is the address of the RAB of the associated
!				LINAGE file.
!
! IMPLICIT INPUTS:
!
!	COB$V_CTX_OPENL		TRUE if LINAGE file has been opened but not yet
!				written to.
!
!	COB$L_CTX_LINAG		specifies the number of lines in the page body;
!				i.e., it specifies the number of lines on the
!				logical page that can be written.
!
!	COB$L_CTX_FOOTI		specifies the line number within the page body
!				at which the footing area begins.  The footing
!				area is the "danger zone" area at the end of the
!				page body in which the end-of-page condition is
!				true, but printing/spacing is still allowed.
!
!	COB$L_CTX_TOP		specifies the number of lines that comprise the
!				top margin on the logical page.  The top margin
!				is a NO-print area that precedes the page body.
!
!	COB$L_CTX_BOTTO		specifies the number of lines that comprise the
!				bottom margin on the logical page.  The bottom
!				margin is a NO-print area that follows the page
!				body.
!
!	COB$L_CTX_COUNT		specifies the line number at which the device is
!				positioned within the current page body.  It is
!				the COBOL special register LINAGE-COUNTER.
!
!
! IMPLICIT OUTPUTS:
!
!	A PUT to the linage file is performed;  any error status caused by the
!	'write' is ignored.
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    EXTERNAL ROUTINE
	SYS$PUT;

    MAP
	RAB : REF BLOCK [,BYTE];

    LOCAL
	RHB : REF BLOCK [,BYTE];

    !
    !   COB$TERM_LINAGE should not cause access violations.  Since it WILL
    !   be called before the associated SYS$CLOSE, the RAB may be invalid.
    !   Validate the RAB by checking that RAB$W_ISI is non-zero.
    !
    IF .RAB[RAB$W_ISI] EQL 0
    THEN RETURN;

    !
    !   If no WRITE has ever been done for this file, then no adjustment
    !   need be done at CLOSE time.  Note that the flag bit is checked
    !   but not cleared;  if it is set, we will not be doing a WRITE either.
    !
    IF .RAB[COB$V_CTX_OPENL]
    THEN
	RETURN;

    RHB = .RAB[RAB$L_RHB];

    RHB[PREFIX] = .RAB[COB$L_CTX_LINAG] - .RAB[COB$L_CTX_COUNT] + 1
				+ .RAB[COB$L_CTX_BOTTO];

    !
    !  Make sure that there is something to advance.
    !
    IF .RHB[PREFIX] EQL 0
    THEN
	RETURN;

    RHB[POSTFIX] = 0;
    
    !
    !  The actual WRITE is done by PUTing a record of 0 length with appropriate
    !  advance in the PRN control fields.
    !
    RAB[RAB$W_RSZ] = 0;

    SYS$PUT(.RAB)
    END;
END
ELUDOM
