	.TITLE	MTH$GEXP	; G Floating Exponential Function
				; (DEXP)
	.IDENT /1-006/		; File: MTHGEXP.MAR	Edit:RNH1006
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;
; FACILITY: MATH LIBRARY
;++
; ABSTRACT:
;
;	MTH$GEXP is a function which returns the G floating point
; exponential of its G floating point argument.
; The call is standard call-by-reference.
;
;--
;
; VERSION: 1
;
; HISTORY:
; AUTHOR:
;	Steven B. Lionel, 15-Jan-79: Version 1
;
; MODIFIED BY:
;
;
;

	.SBTTL	HISTORY	; Detailed Current Edit History

; Edit History for Version 1 of MTH$GEXP
;
; 1-001 - Adapted from MTH$GEXP version 1-008.  SBL 15-Jan-79
; 1-002	- Corrected a typo in the title.  JBS 30-JUL-1979
; 1-003 - Use only through R6.  SBL 21-Sept-1979
; 1-004 - Added large argument logic to avoid lose of significance in
;         EMOD for arguments greater than 2**7.  RNH 24-JUN-81
; 1-005 - Changed W^ to G^ on calls to MTH$$SIGNAL and MTH$$JACKET_TST
;	  RNH 09-Sept-1981
; 1-006 - Eliminated symbolic short literals

	.SBTTL	DECLARATIONS		; Declarative Part of Module

;
; INCLUDE FILES:	MTHJACKET.MAR
;
; EXTERNAL SYMBOLS:
;
	.DSABL	GBL			; Declare all EXTRNs explicitly
	.EXTRN	MTH$$SIGNAL		; SIGNAL SEVERE error
	.EXTRN	MTH$$JACKET_TST		; Test to see if called with CALL or 
					; JSB
	.EXTRN	MTH$K_FLOUNDMAT		; Underflow error code
	.EXTRN	MTH$K_FLOOVEMAT		; Overflow error code

; EQUATED SYMBOLS:

	ACMASK	= ^M<IV, R2, R3, R4, R5, R6>	; .ENTRY mask + int ovf enable
	X_16LOG2E =	^O013540	; Extension for operand in EMODG
;
; MACROS:
	$SFDEF				; define SF$ (stack frame) symbols
;
; PSECT DECLARATIONS:

	.PSECT	_MTH$CODE	PIC,SHR,LONG,EXE,NOWRT
					; program section for math routines
;
; OWN STORAGE:	none
;
; CONSTANTS:

;
; Table to be used for scaling. These constants here have been
; verified by M. Payne using her program ROOT16 on PDP-10.
;
TABHI:	.WORD	^O040020,0		; 2**(0/16) = 1.0
	.WORD	0,0
	.WORD	^O040020,^O132530	; 2**(1/16)
	.WORD	^O066371,^O104417
	.WORD	^O040021,^O071270	; 2**(2/16)
	.WORD	^O036175,^O050572
	.WORD	^O040022,^O034172	; 2**(3/16)
	.WORD	^O067165,^O061070
	.WORD	^O040023,^O003376	; 2**(4/16)
	.WORD	^O005061,^O133425
	.WORD	^O040023,^O157246	; 2**(5/16)
	.WORD	^O046022,^O032042
	.WORD	^O040024,^O137732	; 2**(6/16)
	.WORD	^O152466,^O025047
	.WORD	^O040025,^O125407	; 2**(7/16)
	.WORD	^O156510,^O052051
	.WORD	^O040026,^O120236	; 2**(8/16)
	.WORD	^O063177,^O035714
	.WORD	^O040027,^O120424	; 2**(9/16)
	.WORD	^O071753,^O000606
	.WORD	^O040030,^O126345	; 2**(10/16)
	.WORD	^O041052,^O120333
	.WORD	^O040031,^O142221	; 2**(11/16)
	.WORD	^O101243,^O170220
	.WORD	^O040032,^O164237	; 2**(12/16)
	.WORD	^O114532,^O151655
	.WORD	^O040034,^O014633	; 2**(13/16)
	.WORD	^O156605,^O051234
	.WORD	^O040035,^O054030	; 2**(14/16)
	.WORD	^O156373,^O122207
	.WORD	^O040036,^O122257	; 2**(15/16)
	.WORD	^O121244,^O110331

;+
;  \\\ NOTE!!!:  The decimal equivalents in TABLO are taken
;  directly from MTH$DEXP.  They do not correspond to the
;  actual value of the G floating equivalent.  When an entry
;  in TABHI and its corresponding entry in TABLO are added, they
;  should equal the correct fractional power of 2 to 74 bits. \\\
;-


TABLO:	.WORD	0,0			; DECIMAL: 0.D0
	.WORD	0,0
	.WORD	^O036270,^O123056	; DECIMAL: 0.2252169616881804D-17
	.WORD	0,0
	.WORD	^O036317,^O115760	; DECIMAL:-0.2712242510500122D-17
	.WORD	0,0
	.WORD	^O036271,^O130177	; DECIMAL: 0.5861402647731367D-17
	.WORD	0,0
	.WORD	^O036246,^O172153	; DECIMAL: 0.1206457647223494D-16
	.WORD	0,0
	.WORD	^O036252,^O155011	; DECIMAL:-0.8930877995013540D-17
	.WORD	0,0
	.WORD	^O036235,^O041630	; DECIMAL:-0.2373071989573779D-17
	.WORD	0,0
	.WORD	^O036266,^O031114	; DECIMAL:-0.6257240830881880D-17
	.WORD	0,0
	.WORD	^O036306,^O010546	; DECIMAL:-0.1340620676392399D-16
	.WORD	0,0
	.WORD	^O036316,^O175242	; DECIMAL:-0.7084371812598154D-17
	.WORD	0,0
	.WORD	^O036266,^O164761	; DECIMAL:-0.3768379065187162D-17
	.WORD	0,0
	.WORD	^O036234,^O076107	; DECIMAL:-0.3048384309613603D-17
	.WORD	0,0
	.WORD	^O036267,^O120715	; DECIMAL:-0.1276624235300040D-17
	.WORD	0,0
	.WORD	^O036241,^O010146	; DECIMAL: 0.1845830375854930D-17
	.WORD	0,0
	.WORD	^O036242,^O166403	; DECIMAL: 0.5075495866202897D-17
	.WORD	0,0
	.WORD	^O036300,^O130756	; DECIMAL: 0.4822843060675619D-17
	.WORD	0,0

;
; Constants used in evaluation of polynomials - small arguments
;
GXPTB1:	.WORD	^O037432,^O001131
	.WORD	^O005556,^O114503	; DECIMAL:   0.2480427857745020D-04
	.WORD	^O037512,^O001160
	.WORD	^O024746,^O031306	; DECIMAL:   0.1984369200268758D-03
	.WORD	^O037566,^O140554
	.WORD	^O012072,^O016147	; DECIMAL:   0.1388888879690042D-02
	.WORD	^O037641,^O010421
	.WORD	^O007240,^O157200	; DECIMAL:   0.8333333262370290D-02
	.WORD	^O037705,^O052525
	.WORD	^O052525,^O056217	; DECIMAL:   0.4166666666667950D-01
	.WORD	^O037745,^O052525
	.WORD	^O052525,^O060054	; DECIMAL:   0.1666666666667437D-00
	.WORD	^O040000,0
	.WORD	0,0			; DECIMAL:   0.5000000000000000D-00
	.WORD	^O040017,^O177777
	.WORD	^O177777,^O177777	; DECIMAL:   0.1000000000000000D+01
	.WORD	^O040020,0
	.WORD	0,0			; DECIMAL:   0.1000000000000000D+01
GXPLN1=<.-GXPTB1>/8			; no. of entries in table
  
;
; Constants used in evaluation of polynomial - regular args
;


GXPTAB:	.WORD	^O036326,^O026115
	.WORD	^O162176,^O172502	; DECIMAL:   0.3077130709430240D-15
	.WORD	^O036517,^O176472
	.WORD	^O134323,^O170342	; DECIMAL:   0.5682419384166091D-13
	.WORD	^O036704,^O030221
	.WORD	^O027402,^O032710	; DECIMAL:   0.9181219559808114D-11
	.WORD	^O037065,^O154177
	.WORD	^O163321,^O174727	; DECIMAL:   0.1271587192556359D-08
	.WORD	^O037243,^O131253
	.WORD	^O067672,^O047465	; DECIMAL:   0.1467610032291993D-06
	.WORD	^O037414,^O065410
	.WORD	^O153404,^O121132	; DECIMAL:   0.1355080777949815D-04
	.WORD	^O037556,^O137675
	.WORD	^O177602,^O142617	; DECIMAL:   0.9383847928089872D-03
	.WORD	^O037706,^O027102
	.WORD	^O177372,^O034757	; DECIMAL:   0.4332169878499658D-01
	.WORD	0,0
	.WORD	0,0			; DECIMAL:   0
GXPLN=<.-GXPTAB>/8			; no. of entries in table


G_16LOG2_E:				; LOG2(E) * 16
	.WORD	^O040127,^O012507
	.WORD	^O062453,^O101376

G_LN2_OV_16_HI:
	.QUAD	^X0000FEFA2E423FC6	; Hi 39 bits of ln2/16

G_LN2_OV_16_LO:
	.QUAD	^X3B3ABC9EF79A3D5C	; Low bits of ln2/16


	.SBTTL	MTH$GEXP - Standard G Floating EXP


;++
; FUNCTIONAL DESCRIPTION:
;
; EXP  - G floating point function
;
; Uses a Chebyshev approximation, with overhang on last step.
;
;
; CALLING SEQUENCE:
;
;	Exponential.wg.v = MTH$GEXP(x.rg.r)
;
; INPUT PARAMETERS:

	LONG = 4			; define longword multiplier
	x = 1 * LONG			; Contents of x is the argument

; IMPLICIT INPUTS:	none
;
; OUTPUT PARAMETERS:
;
;	VALUE:	G floating exponential of the argument
;
; IMPLICIT OUTPUTS:	none
;
; SIDE EFFECTS:
;
; Signals:  MTH$_FLOOVEMAT if X > 709  with reserved operand in R0/R1 (copied
; to  the signal mechanism vector CHF$L_MCH_R0/R1 by LIB$SIGNAL).  Associated 
; message is: "FLOATING OVERFLOW IN MATH LIBRARY". Result is reserved operand
; -0.0 unless a user supplied (or any) error handler changes CHF$L_MCH_R0/R1.
;	MTH$_FLOUNDMAT if X =< -709  and caller has hardware enable set.  The 
; result  is  set to +0.0. Associated message is: "FLOATING UNDERFLOW IN MATH 
; LIBRARY"
;
; NOTE: This procedure disables floating point underflow, enable integer
; overflow, causes no floating overflow or other arithmetic traps, and
; preserves enables across the call.
;
;--


	.ENTRY	MTH$GEXP, ACMASK	; standard call-by-reference entry
					; disable DV (and FU), enable IV
	MTH$FLAG_JACKET			; flag that this is a jacket procedure
					; in case of an error in special JSB 
					; routine
	MOVG	@x(AP), R0		; R0/R1 = user's arg
	BSBB	MTH$GEXP_R6		; R0/R1 = special EXP(R0/R1)
	RET				; return - result in R0/R1

	.SBTTL	MTH$GEXP_R6 - Special GEXP routine

; Special GEXP - used by the standard, and direct interfaces.
;
; CALLING SEQUENCE:
;	save anything needed in R0:R6
;	MOVG	...,R0			; input in R0
;	JSB	MTH$GEXP_R6
;	return with result in R0/R1

; Note: This routine is written to avoid causing any integer overflows, 
; floating overflows, or floating underflows or divide by 0 conditions, 
; whether enabled or not.
;
; REGISTERS USED:
;	R0/R1 - floating argument, then result
;	R2/R3 - temp
;	R5 - integer scratch
;	R6 - integer part of X * LG2(E) * 16   (16I+J)


MTH$GEXP_R6::				; special GEXP routine
MTH$GEXP_R7::				; Release 1 name
;+
;  The preliminary test for overflow works as follows:  First, the sign bit is
;  cleared leaving  the  first word of the |X|.  Then, 1024-4 (bias-4) is sub-
;  tracted, leaving an exponent biased by 4 in bits 14:4 and  the  first  four
;  fraction bits in 3:0. This rebiased value is compared against 230 (decimal).
;  The comparison can have 3 outcomes.   If the rebiased value is now negative,
;  this  means  that the true exponent is < -4 - this is a BLSSU test.  If the 
;  rebiased value is positive, but greater than 230 (decimal), then the |X| is 
;  greater than or equal to 736, which is  guaranteed  overflow  or  underflow,
;  depending on the sign of X - this is a BLSS test. Otherwise, X is somewhere
;  in the range for the standard evaluation, and flow continues.
;
;-
	BICW3	#^X8000, R0, R2		; Preliminary test for over/underflow
					; R2 = exponent bits only
	SUBW3	#^X3FC0, R2, R3		; R3 = 4 + unbiased exponent
	CMPW	#^XE6, R3		; unsigned compare of |X| with 732
	BLSSU	SMTST			; to more tests if LSSU
					;  else, -4 < unbiased exp < 11
					;  no exceptions in EMODG or APPROX

	CMPW	R2, #^X4080		; Check for loss of significance in 
					; EMOD ( |X| >= 2**7
	BLSS	EVAL			; No loss of significance

;
; |X| >= 2**4.  EMOD will lose significance so the interger and fractional
; parts of X*16/ln2 must be obtained in seperate steps.
;
	MULG3	G_16LOG2_E, R0, R2	; Get integer part of X*16/ln2 in
	CVTGL	R2, R6			;    R6 (=I+J) as a longword and in
	CVTLG	R6, R2			;    R2/R3 in G format
	MULG3	G_LN2_OV_16_HI, R2, R4	; Get fraction part of X*16/ln2 =
	SUBG2	R4, R0			;    16/ln2*[ X - (I+J)*ln2/16 ]
	MULG2	G_LN2_OV_16_LO, R2	;    in R0/R1.
	SUBG2	R2, R0			;
	MULG2	G_16LOG2_E, R0		;
	BRB	APPROX			;

EVAL:	EMODG	G_16LOG2_E, #X_16LOG2E, R0, R6, R0
					; get X*16*LG2(E) with
					;  integer part in R6 (=16I+J)
					;  fraction in R0/R1

APPROX:	POLYG	R0,#GXPLN-1,GXPTAB	; use Chebyshev series
					;  with last coefficient 0
					;  so that last ADDG has overhang

	BICL3	#-16, R6, R5		; R5 = J
	MULG2	TABHI[R5], R0		; else MUL by 2**(J/16)
	ADDG2	TABLO[R5], R0		; add in LO of 2**(J/16)
	ADDG2	TABHI[R5], R0		; and then HI of 2**(J/16)

	BICL	#15, R6			; R6 = I
	BEQL	20$			; if I=0, then done
	ADDL2	R6, R0			; Add I to exponent.
					; MUL by 2**I by exponent addition
	CMPW	R0, #^XF		; test for over/underflow
	BLEQ	EXCEPT			; see what exception is if neg or = 0
20$:	RSB				; otherwise return result in R0

SMTST:
	BLSS	20$			; exception if exp+4 > 14
	CMPW	R2, #^X3C80		; eliminate underflow from APPROX1
	BLSS	10$			; bypass if E**ARG = 1

;+
; Use Chebyshev series for small arg
;-

	POLYG	R0,#GXPLN1-1,GXPTB1	;Use Chebyshev series
					;  last term is 1; this will
					;  give desired overhang.
	RSB				; answer is OK, return

10$:	MOVG	S^#1, R0		; E**X is 1, store it
	RSB				; and return


;
; Handlers for software detected over/underflow conditions follow
;
20$:	TSTG	R0			; if big ARG > 0 goto OVERFLOW
	BGEQ	OVER
;
; Underflow; if user has FU set, signal error.  Always return 0.0
;
UNDER:
	MOVPSL	R2			; R2 = user's or jacket routine's PSL
	CALLS	#0, G^MTH$$JACKET_TST	; R0 = TRUE if JSB from jacket routine
	BLBC	R0, 10$			; branch if user did JSB
	MOVZWL	SF$W_SAVE_PSW(FP), R2	; get user PSL saved by CALL
10$:	CLRQ	R0			; R0 = result. LIB$SIGNAL will save in
					; CHF$L_MCH_R0/R1 so any handler can fixup
	BBC	#6, R2, 20$		; has user enabled floating underflow?
	PUSHL	(SP)			; yes, return PC from special routine
	MOVZBL	#MTH$K_FLOUNDMAT, -(SP)	; trap code for hardware floating underflow
					; convert to MTH$_FLOUNDMAT (32-bit VAX-11 
					; exception code)
	CALLS	#2, G^MTH$$SIGNAL	; signal (condition, PC)
20$:	RSB				; return

EXCEPT:
	TSTL	R6			; test sign of I; if I < 0
	BLSS	UNDER			; go to underflow handler
;
; Signal floating overflow, return reserved operand, -0.0
;
OVER:					; else process for overflow
	PUSHL	(SP)			; return PC from special routine
	MOVZBL	#MTH$K_FLOOVEMAT, -(SP)	; hardware floating overflow
	ASHQ	#15, #1, R0		; R0/R1 = result = reserved operand
					; -0.0. R0/0 will be copied to
					; signal mechanism vector (CHF$L_MCH_R0/R1)
					; so can be fixed up by any error
					; handler
	CALLS	#2, G^MTH$$SIGNAL	; signal (condition, PC)
	RSB				; return - R0 restoredd from CHF$L_MCH_R0/R1


	.END
