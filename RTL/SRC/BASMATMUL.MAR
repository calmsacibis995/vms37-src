	.TITLE	BAS$MAT_MUL		; BASIC matrix multiply
	.IDENT	/1-010/			; File: BASMATMUL.MAR	Edit: PLL1010

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY: BASIC code support
;
; ABSTRACT:
;
;	This module multiplies 2 arrays of any dtype and stores the result in a
;	third array of any dtype.
;
; ENVIRONMENT: User Mode, AST Reentrant
;
;--
; AUTHOR: R. Will, CREATION DATE: 11-Jul-79
;
; MODIFIED BY:
;++
; 1-001	- Original 
; 1-002	- Change MTH$DFLOOR_R1 to MTH$DFLOOR_R3.  JBS 25-JUL-1979
; 1-003 - Add check for Illegal Operation error.  RW  28-Sept-79
; 1-004 - Set IV bit in mask to signal integer overflow.  RW  2-Oct-79
; 1-005 - Redo scaling.  RW  13-Dec-79
; 1-006	- Change MTH$DFLOOR_R3 to MTH$DINT_R4.  JBS 19-DEC-1979
; 1-007 - Fix test for 'same array' for virtual.  RW  15-Feb-1980
; 1-008 - Changed shared external reference to G^ RNH 25-Sep-81
; 1-009 - Substitute a macro for the calls to the array fetch and store
;	  routines.  This should speed things up.  PLL 9-Nov-81
; 1-010 - Correct a run-time expression in the FETCH and STORE macros.
;	  PLL 20-Jan-82
;--

	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;

	$DSCDEF					; define descriptor offsets
	$SFDEF					; use to get scale

;
; EXTERNAL DECLARATIONS:
;

	.DSABL	GBL				; Prevent undeclared
						;  symbols from being
						;  automatically global.
	.EXTRN	BAS$K_ARGDONMAT			; signalled if all 3 blocks
						;  not present in array desc
						;  or dimct = 0
	.EXTRN	BAS$K_DATTYPERR			; signalled if dtype of array
						; isn't word long float double
	.EXTRN	BAS$K_MATDIMERR			; signalled if # of dims on any
						;  array isn't 0
	.EXTRN	BAS$K_ARRMUSSAM			; signalled if cols of src1 not
						;  = rows of src2
	.EXTRN	BAS$K_ILLOPE			; signalled if dest matrix is
						;  same as either src matrix
	.EXTRN	BAS$STO_FA_W_R8			; array element store for word
	.EXTRN	BAS$STO_FA_L_R8			; array element store for long
	.EXTRN	BAS$STO_FA_F_R8			; array element store - float
	.EXTRN	BAS$STO_FA_D_R8			; array element store - double
	.EXTRN	BAS$FET_FA_W_R8			; array element fetch - word
	.EXTRN	BAS$FET_FA_L_R8			; array element fetch - long
	.EXTRN	BAS$FET_FA_F_R8			; array element fetch - float
	.EXTRN	BAS$FET_FA_D_R8			; array element fetch - double
	.EXTRN	BAS$MAT_REDIM			; check if redimensioning of
						;  dest array is necessary, if
						;  so, do it
	.EXTRN	BAS$$SCALE_R1			; scale for double procision
	.EXTRN	MTH$DINT_R4			; routine to integerize double
	.EXTRN	BAS$$STOP			; signal fatal errors


;
; MACROS:
;

;	$BAS$MAT_MUL	multiply loop algorithm,  see next page
;	FETCH		fetch an element from an array
;	STORE		store an element into an array

;
; EQUATED SYMBOLS:
;

	upper_bound_k = 0			; stack offset for temporary
						;  for upperbound of inner loop
	lower_bound_k = 4			; stack offset for temporary
						;  for lowerbound for innerloop
	upper_bound_j = 8			; stack offset for temporary
						;  for upperbound of middle loop
	lower_bound_j = 12			; stack offset for temporary
						;  for lowerbound of middle loop
	upper_bound_i = 16			; stack offset for temporary
						;  for upperbound of outer loop
	current_j = 20				; stack offset for temporary for
						;  current value of middle loop
	current_i = 24				; stack offset for temporary for
						;  current value of outer loop
	current_sum = 28			; stack offset for temporary for
						;  summing to get element
	scale = 36				; stack offset for temporary for
						;  scale
	dsc$l_l1_1 = 24				; desc offset if 1 sub
	dsc$l_u1_1 = 28				; desc offset if 1 sub
	dsc$l_l1_2 = 28				; desc offset if 2 sub
	dsc$l_u1_2 = 32				; desc offset if 2 sub
	dsc$l_l2_2 = 36				; desc offset if 2 sub
	dsc$l_u2_2 = 40				; desc offset if 2 sub

;
; OWN STORAGE:
;

;
; PSECT DECLARATIONS:
;
	.PSECT _BAS$CODE PIC, USR, CON, REL, LCL, SHR, -
			EXE, RD, NOWRT, LONG


;+
; These macros are a substitute for calls to the array fetch and store
; routines.  They will call the BAS$ routines only if the array is a 
; virtual array.  Otherwise, they will calculate the linear index into
; the array via the INDEX instruction.  (Note that BASIC programs must
; be able to handle FORTRAN arrays, so the code must check for arrays
; stored by column.)  The INDEX instructions should provide a significant
; performance improvement over calling a routine for each element of
; the array.
;-

	.LIST	ME
	.MACRO	FETCH	array_dtype,?L1,?L2,?L3	; fetch an array element

	CMPB	dsc$b_class(R0), #dsc$k_class_bfa  ;virtual array?
	BNEQ	L1				; no
	JSB	BAS$FET_FA_'array_dtype'_R8	; yes, use the fetch routine
	BRW	L3				; done
L1:	BBS	#5, 10(R0), L2		; br if array stored by cols
	INDEX	R1, dsc$l_l1_2(R0), dsc$l_u1_2(R0), dsc$l_m2(R0), #0, R3
						; I * M2  [Li's are zero]
	MOVZWL	dsc$w_length(R0), R4		; need longword length for INDEX
	INDEX	R2, dsc$l_l2_2(R0), dsc$l_u2_2(R0), R4, R3, R3
						; (J + (I * M2)) * length 
	ADDL	dsc$a_a0(R0), R3		; compute addr of element 
	MOV'array_dtype'	(R3), R0	; return element in R0
	BRW	L3				; done
L2:	INDEX	R2, dsc$l_l2_2(R0), dsc$l_u2_2(R0), dsc$l_m1(R0), #0, R3
						; J * M1  [Li's are zero]
	MOVZWL	dsc$w_length(R0), R4		; need longword length for INDEX
	INDEX	R1, dsc$l_l1_2(R0), dsc$l_u1_2(R0), R4, R3, R3
						; (I + (J * M1)) * length
	ADDL	dsc$a_a0(R0), R3		; compute addr of element
	MOV'array_dtype'	(R3), R0	; return element in R0

L3:
	.ENDM

	.LIST	ME
	.MACRO	STORE	array_dtype,?L1,?L2,?L3,?L4,?L5

	.IF	IDN	'array_dtype', D	; array is double
	CMPB	dsc$b_class(R2), #dsc$k_class_bfa  ; virtual array?
	BNEQ	L1				; no
	JSB	BAS$STO_FA_'array_dtype'_R8	; call store routine
	BRW	L5				; done
L1:	BBS	#5, 10(R2), L2			; br if stored col-wise
	INDEX	R3, dsc$l_l1_2(R2), dsc$l_u1_2(R2), dsc$l_m2(R2), #0, R5
						; I * M2
	MOVZWL	dsc$w_length(R2), R6		; longword length for INDEX
	INDEX	R4, dsc$l_l2_2(R2), dsc$l_u2_2(R2), R6, R5, R5
						; (J + (I * M2)) * length
	ADDL	dsc$a_a0(R2), R5		; compute addr of element
	MOV'array_dtype'	R0, (R5)	; store element from R0
	BRW	L5				; done
L2:	INDEX	R4, dsc$l_l2_2(R2), dsc$l_u2_2(R2), dsc$l_m1(R2), #0, R5
						; J * M1
	MOVZWL	dsc$w_length(R2), R6		; longword length for INDEX
	INDEX	R3, dsc$l_l1_2(R2), dsc$l_u1_2(R2), R6, R5, R5
						; (I + (J * M1)) * length
	ADDL	dsc$a_a0(R2), R5		; compute addr of element
	MOV'array_dtype'	R0, (R5)	; store element from R0
	.IFF					; array type other than double
	CMPB	dsc$b_class(R1), #dsc$k_class_bfa  ;virtual array?
	BNEQ	L3				; no
	JSB	BAS$STO_FA_'array_dtype'_R8	; call store routine
	BRW	L5				; done
L3:	BBS	#5, 10(R1), L4			; br if stored col-wise
	INDEX	R2, dsc$l_l1_2(R1), dsc$l_u1_2(R1), dsc$l_m2(R1), #0, R4
						; I * M2
	MOVZWL	dsc$w_length(R1), R5		; longword length for INDEX
	INDEX	R3, dsc$l_l2_2(R1), dsc$l_u2_2(R1), R5, R4, R4
						; (J + (I * M2)) * length
	ADDL	dsc$a_a0(R1), R4		; compute addr of element
	MOV'array_dtype'	R0, (R4)	; store element from R0
	BRW	L5				; done
L4:	INDEX	R3, dsc$l_l2_2(R1), dsc$l_u2_2(R1), dsc$l_m1(R1), #0, R4
						; J * M1
	MOVZWL	dsc$w_length(R1), R5		; longword length for INDEX
	INDEX	R2, dsc$l_l1_2(R1), dsc$l_u1_2(R1), R5, R4, R4
						; (I + (J * M1)) * length
	ADDL	dsc$a_a0(R1), R4		; compute addr of element
	MOV'array_dtype'	R0, (R4)	; store element from R0
	.ENDC

L5:
	.ENDM

;+
; This macro contains the looping mechanism for accessing all elements of
; an array.  It also contains all the logic for all the combinations of data
; types and scaling.  A macro is used to make it easy to maintain the parallel
; code for all the different data types.
;-

	.MACRO	$BAS$MAT_MUL src1_dtype, src2_dtype ; multiply algorithm

;+
; Get scale so if any of the arrays is double, the scale will be there
;-

	MOVL	SF$L_SAVE_FP(FP), R0		; pass FP to get scale
	JSB	G^BAS$$SCALE_R1			; get scale in R0 & R1
						; call a BLISS routine because
						; the frame offsets are only
						; defined for BLISS
	MOVD	R0, scale(SP)			; store the scale

;+
; Loop through all the rows of the destination matrix.
; Row and column upper and lower bounds have been initialized on the stack.
; Current row (current_i) has been initialized to its lower bound.
;-

LOOP_I_'src1_dtype'src2_dtype':
	MOVL	lower_bound_j(SP), current_j(SP) ; initialize current_j
						;   to lower_bound of j

;+
; Loop through all the elements (columns) of the current row of the destination
; matrix.  Current column (current_j) has been initialized to its lower bound.
; Column upper bound is on the stack (upper_bound_j).
;-

LOOP_J_'src1_dtype'src2_dtype':
	MOVL	lower_bound_k(SP), R11		; initialize current_k (R11) to
						;  lower_bound of k
	CLRQ	current_sum(SP)			; a CLRQ will set the temporary
						;  to 0 for all possible dtypes

;+
; Loop through, summing the products of each element of the ith row of src1
; and the jth column of  src2.  current_i and current_j are on the stack.
; Source array element pointer (current_k) has been initialized in R11.
; Distinguish array by data type so that the correct fetch routine can 
; retrieve the data, the correct multiply and add can be done and the correct
; store routine can be called.

LOOP_K_'src1_dtype'src2_dtype':

;+
; Get the data from the first source array
;-

	MOVL	src1_matrix(AP), R0		; pointer to 1st src array
	MOVL	current_i(SP), R1		; current row
	MOVL	R11, R2				; current col
	FETCH	'src1_dtype'			; fetch data from src1 array
	MOV'src1_dtype'	R0, R9			; store the 1st array element

;+
; Get the data from the second source array
;-

	MOVL	src2_matrix(AP), R0		; pointer to 2nd src array
	MOVL	R11, R1				; current row
	MOVL	current_j(SP), R2		; current col
	FETCH	'src2_dtype'			; fetch data from src2 array

;+
; If the data types of the 2 source arrays is the same, do the arithmetic in
; that data type.  Else convert the data to a common type and multiply and add.
; If either of the source elements is double, descale and multiply.  Scale and
; integerize the product before adding it to the sum.
;-

	.IF	IDN	src1_dtype, src2_dtype	; src arrays are
						; same data type
	.IF	IDN	src1_dtype, D		; both sources are double
	MULD2	R9, R0				; multiply
	DIVD2	scale(SP), R0			; remove extra scale from result
	CMPD	scale(SP), #1			; is the scale 0?
	BEQL	1$				; yes, do not integerize
	JSB	MTH$DINT_R4			; no, integerize
1$:	ADDD2	R0, current_sum(SP)		; add to sum
	.IFF					; sources same dtype, not double
	MUL'src1_dtype'2	R9, R0		; multiply the source elements
	ADD'src1_dtype'2	R0, current_sum(SP) ; add product to current sum
	.ENDC					; end of same dtype code
	.IFF					; src arrays different dtype
	.IF	IDN	src1_dtype, D		; source 1 is double
	CVT'src2_dtype'D	R0, R0		; cvt array2 to double & save
						;  no scaling needed because in
						;  multiply scale is in 2nd src
						;  no integerize needed because
						;  src2 is originally integer
	MULD2	R9, R0				; multiply
	ADDD2	R0, current_sum(SP)		; add product to current sum
	.IFF					; 1st array not double
	.IF	IDN	src2_dtype, D		; is 2nd src double
						; yes, make src1 double & save
	CVT'src1_dtype'D	R9, R9		; make 1st src double
						;  no scaling needed because for
						;  multiply only 1 number is
						;  needed to be scaled.  No
						;  integerizing is done because
						;  src1 was already integer
	MULD2	R9, R0				; compute the product
	ADDD2	R0, current_sum(SP)		; add product to current sum
	.IFF					; no double operands try float
	.IF	IDN	src1_dtype, F		; is 1st element float
	CVT'src2_dtype'F	R0, R0		; make 2nd element float
	MULF2	R9, R0				; multiply the elements
	ADDF2	R0, current_sum(SP)		; add to current sum
	.IFF					; 1st array not float
	.IF	IDN	src2_dtype, F		; is 2nd array float
	CVT'src1_dtype'F	R9, R9		; yes-make 1st element float
	MULF2	R9, R0				; multiply the elements
	ADDF2	R0, current_sum(SP)		; add to current sum
	.IFF					; no double or float, try long
	.IF	IDN	src1_dtype, L		; is 1st array long
	CVT'src2_dtype'L	R0, R0		; make 2nd element long
	MULL2	R9, R0				; multiply elements
	ADDL2	R0, current_sum(SP)		; add product to current sum
	.IFF					; src2 must be long, because
						;  all that is left is word
						;  and word and that will be
						;  caught by 1st case
	CVT'src1_dtype'L	R9, R9		; cvt src1 to long (know its
						;  type word, but use argument
						;  in case ever add byte
	MULL2	R0, R0				; multiply the elements
	ADDL2	R0, current_sum(SP)		; add product to current sum
	.ENDC
	.ENDC
	.ENDC
	.ENDC
	.ENDC
	.ENDC

;+
; Have multiplied next set of elements and added it to current sum.  See if
; it is the last product of the sum.  If not continue with current sum.
; Otherwise, store the sum in the destination array by calling a subroutine
; (pass pointer to dest in R10 and pointer to stack in R5)
; and continue with next destination element.
;-

	INCL	R11				; get next K
	CMPL	R11, upper_bound_k(SP)		; see if last product in sum
	BGTR	5$
	BRW	LOOP_K_'src1_dtype'src2_dtype	; no, continue inner loop

						; finished inner loop so store
5$:	MOVL	SP, R5				; point to temps
	.IF	IDN	src1_dtype, src2_dtype	; src arrays are
						; same data type
	BSBW	DEST_CASE_'src1_dtype'		; go cvrt to dest type and store
	.IFF					; src arrays different dtype
	.IF	IDN	src1_dtype, D		; source 1 is double
	BSBW	DEST_CASE_D			; cnvrt from double to dest type
						; and store
	.IFF					; 1st array not double
	.IF	IDN	src2_dtype, D		; is 2nd src double
						; yes, make src1 double & save
	BSBW	DEST_CASE_D			; cnvrt from double to dest type
						; and store
	.IFF					; no double operands try float
	.IF	IDN	src1_dtype, F		; is 1st element float
	BSBW	DEST_CASE_F			; cnvrt from float to dest type
						; and store
	.IFF					; 1st array not float
	.IF	IDN	src2_dtype, F		; is 2nd array float
	BSBW	DEST_CASE_F			; cnvrt from float to dest type
						; and store
	.IFF					; no double or float, sum must
						;  be long because at least one
						;  of the sources must be long
						;  else would be under same
						;  dtype case for word-word
	BSBW	DEST_CASE_L			; cnvrt from long to dest type
						; and store
	.ENDC
	.ENDC
	.ENDC
	.ENDC
	.ENDC

;+
; Have stored that element.  Now see if it was the last column.  If not,
; continue with the next column.  Otherwise continue to next row.
;-

	INCL	current_j(SP)			; get next column
	CMPL	current_j(sp), upper_bound_j(SP) ; see if last column done
	BGTR	20$
	BRW	LOOP_J_'src1_dtype'src2_dtype'	; no, continue inner loop

;+
; Have completed entire row.  See if it was the last row.  If not,
; continue with next row.
;-

20$:	INCL	current_i(SP)			; get next row
	CMPL	current_i(SP), upper_bound_i(SP) ; see if last row done
	BGTR	10$
	BRW	LOOP_I_'src1_dtype'src2_dtype'	; no, continue outer loop

10$:	RET					; yes, finished

	.ENDM

	.SBTTL	BAS$MAT_MUL  - Multiply 2 arrays giving a third
;++
; FUNCTIONAL DESCRIPTION:
;
;	Multiply 2 arrays giving a third.  Signal an error if the upper and
;	lower bounds (excluding 0) for columns in src1_matrix does not equal
;	the upper and lower bounds (excluding 0) for rows in src2_matrix.
;	An error will also be signalled if any of the three matrices does not
;	have a DIMCT of 2, or if DSC$A_POINTER in either src1_matrix or
;	src2_matrix is the same as DSC$A_POINTER of dest_matrix.
;	Redimension the output to have a lower bound of 0 for both dimensions,
;	and an upper bound for rows equal to the upper bound for rows for
;	src1_matrix, and an upper bound for columns equal to the upper bound
;	for columns for src2_matrix.  Initialize all the necessary
;	looping	information on the stack.  Conversions may have to be done
;	so that the sources are the same data type, so divide
;	the looping portion according to the data types.  Conversion to the
;	correct destination data type will be done by a JSB to a routine,
;	instead of multiplying the number of possible combinations by 4.
;
; CALLING SEQUENCE:
;
;	CALL BAS$MAT_MUL (src1_array.rx.da, src2_array.rw.da, dest_matrix.wx.da)
;
; INPUT PARAMETERS:
;
	src1_matrix = 4
	src2_matrix = 8
;
; IMPLICIT INPUTS:
;
;	Scale from the callers frame to scale double precision.
;
; OUTPUT PARAMETERS:
;
	dest_matrix = 12
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; FUNCTION VALUE:
; COMPLETION CODES:
;
;	NONE
;
; SIDE EFFECTS:
;
;	This routine calls the redimensioning routine and the array element
;	fetch and store routines and therefore may signal any of their errors.
;	It may also signal any of the errors listed in the externals section.
;	It may also cause the destination array to have different dimensions.
;
;--

	.ENTRY BAS$MAT_MUL, ^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,IV>

;+
;	REGISTER USAGE
;	R0 - R8 destroyed by store routines
;	R9	place to store element of 1st array while fetching 2nd element
;	R10	pointer to dest matrix descriptor (except for double in which
;		case R10 is part of double value R9-R10)
;	R11	current value of inner subscript
;-

;+
; Put routine arguments into registers for ease of use.
; If block 2 of array descriptor (multipliers) is not present then error.
;-

	MOVL	src1_matrix(AP), R2		; ptr to src1 array descr
	BBC	#DSC$V_FL_BOUNDS, DSC$B_AFLAGS(R2), ERR_ARGDONMAT
						; exit if block 3 not
						; present in descriptor
	CMPB	DSC$B_DIMCT(R2), #2		; 2 dimensional?
	BNEQU	ERR_MATDIMERR			; if not, error
	MOVL	src2_matrix(AP), R3		; ptr to src2 array descr
	BBC	#DSC$V_FL_BOUNDS, DSC$B_AFLAGS(R3), ERR_ARGDONMAT
						; exit if block 3 not
						; present in descriptor
	MOVL	dest_matrix(AP), R10		; pointer to dest descriptor
	TSTD	-(SP)				; save space for scale
	CLRD	-(SP)				; reserve space to save sum
	CMPB	DSC$B_DIMCT(R3), #2		; 2 dimensional?
	BEQLU	INIT_TWO_SUBS			; if 2-D continue, else
						; fall into error

ERR_MATDIMERR:
	PUSHL	#BAS$K_MATDIMERR		; Signal error, src arrays
	CALLS	#1, G^BAS$$STOP			;  don't have same # dimensns

ERR_ARGDONMAT:
	PUSHL	#BAS$K_ARGDONMAT		; signal error, 0 for dimct
	CALLS	#1, G^BAS$$STOP			; or block 2 or 3 absent

ERR_ARRMUSSAM:
	PUSHL	#BAS$K_ARRMUSSAM		; Signal error, src arrays
	CALLS	#1, G^BAS$$STOP			;  same bounds

ERR_ILLOPE:
	PUSHL	#BAS$K_ILLOPE			; Signal error, dest array is
	CALLS	#1, G^BAS$$STOP			;  as one of source arrays

;+
; There are 2 subscripts.  Check and redimension the destination array if
; necessary.  Put the upper bound for both subscripts on the
; stack and make sure that the lower bound for both subscripts will start
; at 1 (do not alter row or col 0)
;-

INIT_TWO_SUBS:
	CMPB	dsc$l_u2_2(R2), dsc$l_u1_2(R3)	; does src1 array have the same
						;  2nd upper bound as src2 array
						;  has for 1st upper bound
	BNEQU	ERR_ARRMUSSAM			; no, error
	CMPB	dsc$l_l2_2(R2), dsc$l_l1_2(R3)	; does src1 array have the same
						;  2nd lower bound as src2 array
						;  has for 1st lower bound
	BNEQU	ERR_ARRMUSSAM			; no, error
	PUSHL	dsc$l_u2_2(R3)			; 2nd upper bound
	PUSHL	dsc$l_u1_2(R2)			; 1st upper bound
	PUSHL	R10				; dest array pointer
	CALLS	#3, BAS$MAT_REDIM		; redimension destination
	CMPB	DSC$B_CLASS(R10), #DSC$K_CLASS_A	; is array virtual?
	BNEQU	VIRTUAL_SAME			; yes, go check virtual
						; if dest not virtual even if
						;  src is virtual pointer will
						;  be 0 and won't match
	CMPL	DSC$A_POINTER(R2), DSC$A_POINTER(R10) ; is dest same as src1
	BEQLU	ERR_ILLOPE			; yes, error
	CMPL	DSC$A_POINTER(R3), DSC$A_POINTER(R10) ; is dest same as src2
	BEQLU	ERR_ILLOPE			; yes, error
	BRB	INIT_STACK
VIRTUAL_SAME:
	CMPB	DSC$B_CLASS(R2), #DSC$K_CLASS_A	; is src1 virtual?
	BEQLU	1$				; no, cant be same
	CMPL	DSC$L_LOGUNIT(R2), DSC$L_LOGUNIT(R10) ; is dest same as src1?
	BNEQ	1$				; no
	CMPL	DSC$L_BYTEOFF(R2), DSC$L_BYTEOFF(R10) ; is dest same as src1?
						; (check logunit and byteoff)
	BEQL	ERR_ILLOPE			; yes error
1$:	CMPB	DSC$B_CLASS(R3), #DSC$K_CLASS_A	; is src2 virtual?
	BEQLU	INIT_STACK			; no, can't be same
	CMPL	DSC$L_LOGUNIT(R2), DSC$L_LOGUNIT(R10) ; is dest same as src1?
	BNEQ	INIT_STACK
	CMPL	DSC$L_BYTEOFF(R3), DSC$L_BYTEOFF(R10) ; is dest same as src2?
	BEQL	ERR_ILLOPE			; yes error
INIT_STACK:
	PUSHL	dsc$l_l1_2(R2)			; initialize current_i counter
	BGTR	1$				; not row 0 or neg
	MOVL	#1, (SP)			; start with 1
1$:	CLRL	-(SP)				; save space for current j
	PUSHL	dsc$l_u1_2(R2)			; upper_bound_i
	PUSHL	dsc$l_l2_2(R3)			; lower_bound_j
	BGTR	2$				; not row 0 or neg, do cols
	MOVL	#1, (SP)			; start with row 1
2$:	PUSHL	dsc$l_u2_2(R3)			; upper_bound_j
	PUSHL	dsc$l_l2_2(R2)			; lower_bound_k
	BGTR	3$				; not col 0 or neg
	MOVL	#1, (SP)			; start with k=1
3$:	PUSHL	dsc$l_u2_2(R2)			; upper_bound_k

;+
; Algorithm now differs according to data types
;-

SEPARATE_DTYPES:

	CASEB	DSC$B_DTYPE(R2), #DSC$K_DTYPE_W, #<DSC$K_DTYPE_D - DSC$K_DTYPE_W>
2$:	.WORD	WORD-2$				; code for word dtype
	.WORD	LONG-2$				; code for long dtype
	.WORD	ERR_DATTYPERR-2$		; quad not supported
	.WORD	FLOAT-2$			; code for float dtype
	.WORD	DOUBLE-2$			; code for double dtype

ERR_DATTYPERR:
	PUSHL	#BAS$K_DATTYPERR		; Signal error, unsupported
	CALLS	#1, G^BAS$$STOP			; dtype in array desc

	.PAGE
;+
; Source1 array is a word array.  Now differentiate on the source2 type.
;-

WORD:	CASEB	DSC$B_DTYPE(R3), #DSC$K_DTYPE_W, #<DSC$K_DTYPE_D - DSC$K_DTYPE_W>
1$:	.WORD	WORD_TO_WORD-1$			; code for word dtype
	.WORD	WORD_TO_LONG-1$			; code for long dtype
	.WORD	ERR_DATTYPERR-1$		; quad not supported
	.WORD	WORD_TO_FLOAT-1$		; code for float dtype
	.WORD	WORD_TO_DOUBLE-1$		; code for double dtype
	BRW	ERR_DATTYPERR			; unsupported dtype

;+
; Now type of source1 and source2 arrays are known.  Use the macro to
; generate the code for each case
;-

	.PAGE
WORD_TO_WORD:	$BAS$MAT_MUL	W, W

	.PAGE
WORD_TO_LONG:	$BAS$MAT_MUL	W, L

	.PAGE
WORD_TO_FLOAT:	$BAS$MAT_MUL	W, F

	.PAGE
WORD_TO_DOUBLE:	$BAS$MAT_MUL	W, D

	.PAGE
;+
; Source1 array is a longword array.  Now differentiate on the source2 type
;-

LONG:	CASEB	DSC$B_DTYPE(R3), #DSC$K_DTYPE_W, #<DSC$K_DTYPE_D - DSC$K_DTYPE_W>
1$:	.WORD	LONG_TO_WORD-1$			; code for word dtype
	.WORD	LONG_TO_LONG-1$			; code for long dtype
	.WORD	ERR_DATTYPERR-1$		; quad not supported
	.WORD	LONG_TO_FLOAT-1$		; code for float dtype
	.WORD	LONG_TO_DOUBLE-1$		; code for double dtype
	BRW	ERR_DATTYPERR			; unsupported dtype

;+
; Now type of source1 and source2 arrays are known.  Use the macro to
; generate the code for each case
;-

	.PAGE
LONG_TO_WORD:	$BAS$MAT_MUL	L, W

	.PAGE
LONG_TO_LONG:	$BAS$MAT_MUL	L, L

	.PAGE
LONG_TO_FLOAT:	$BAS$MAT_MUL	L, F

	.PAGE
LONG_TO_DOUBLE:	$BAS$MAT_MUL	L, D

	.PAGE
;+
; Source1 array is a floating array.  Now differentiate on the source2 type
;-

FLOAT:	CASEB	DSC$B_DTYPE(R3), #DSC$K_DTYPE_W, #<DSC$K_DTYPE_D - DSC$K_DTYPE_W>
1$:	.WORD	FLOAT_TO_WORD-1$		; code for word dtype
	.WORD	FLOAT_TO_LONG-1$		; code for long dtype
	.WORD	ERR_DATTYPERR-1$		; quad not supported
	.WORD	FLOAT_TO_FLOAT-1$		; code for float dtype
	.WORD	ERR_DATTYPERR-1$		; float and double mixed unsupported
	BRW	ERR_DATTYPERR			; unsupported dtype

;+
; Now type of source1 and source2 arrays are known.  Use the macro to
; generate the code for each case
;-

	.PAGE
FLOAT_TO_WORD:	$BAS$MAT_MUL	F, W

	.PAGE
FLOAT_TO_LONG:	$BAS$MAT_MUL	F, L

	.PAGE
FLOAT_TO_FLOAT:	$BAS$MAT_MUL	F, F

	.PAGE
;+
; Source1 array is a double array.  Now differentiate on the source2 type.
;-

DOUBLE:	CASEB	DSC$B_DTYPE(R3), #DSC$K_DTYPE_W, #<DSC$K_DTYPE_D - DSC$K_DTYPE_W>
1$:	.WORD	DOUBLE_TO_WORD-1$		; code for word dtype
	.WORD	DOUBLE_TO_LONG-1$		; code for long dtype
	.WORD	ERR_DATTYPERR-1$		; quad not supported
	.WORD	ERR_DATTYPERR-1$		; mixing double & float not supported
	.WORD	DOUBLE_TO_DOUBL-1$		; code for double dtype
	BRW	ERR_DATTYPERR			; unsupported dtype

;+
; Now type of source1 and source2 arrays are known.  Use the macro to
; generate the code for each case
;-

	.PAGE
DOUBLE_TO_WORD:	$BAS$MAT_MUL	D, W

	.PAGE
DOUBLE_TO_LONG:	$BAS$MAT_MUL	D, L

	.PAGE
DOUBLE_TO_DOUBL: $BAS$MAT_MUL	D, D

;+
; Add has been in word.  Determine destination type to convert to dest.
;-

DEST_CASE_W:
	MOVW	current_sum(R5), R0		; get # to store in R0
	CASEB	DSC$B_DTYPE(R10), #DSC$K_DTYPE_W, #<DSC$K_DTYPE_D - DSC$K_DTYPE_W>
1$:	.WORD	STORE_WORD-1$			; no conversion needed
	.WORD	DEST_W_TO_L-1$			; code for long dtype
	.WORD	ERR_DATTYPERR-1$		; quad not supported
	.WORD	DEST_W_TO_F-1$			; code for float dtype
	.WORD	DEST_W_TO_D-1$			; code for double dtype
	BRW	ERR_DATTYPERR			; unsupported dtype

;+
; Add has been in long.  Determine destination type to convert to dest.
;-

DEST_CASE_L:
	MOVL	current_sum(R5), R0		; get # to store in R0
	CASEB	DSC$B_DTYPE(R10), #DSC$K_DTYPE_W, #<DSC$K_DTYPE_D - DSC$K_DTYPE_W>
1$:	.WORD	DEST_L_TO_W-1$			; code for word dtype
	.WORD	STORE_LONG-1$			; no conversion needed
	.WORD	ERR_DATTYPERR-1$		; quad not supported
	.WORD	DEST_L_TO_F-1$			; code for float dtype
	.WORD	DEST_L_TO_D-1$			; code for double dtype
	BRW	ERR_DATTYPERR			; unsupported dtype

;+
; Add has been in float.  Determine destination type to convert to dest.
;-

DEST_CASE_F:
	MOVF	current_sum(R5), R0		; get # to store in R0
	CASEB	DSC$B_DTYPE(R10), #DSC$K_DTYPE_W, #<DSC$K_DTYPE_D - DSC$K_DTYPE_W>
1$:	.WORD	DEST_F_TO_W-1$			; code for word dtype
	.WORD	DEST_F_TO_L-1$			; code for long dtype
	.WORD	ERR_DATTYPERR-1$		; quad not supported
	.WORD	STORE_FLOAT-1$			; no conversion needed
	.WORD	ERR_DATTYPERR-1$		; double unsupported w/ float
	BRW	ERR_DATTYPERR			; unsupported dtype

;+
; Add has been in double.  Determine destination type to convert to dest.
;-

DEST_CASE_D:
	MOVD	current_sum(R5), R0		; get # to store in R0&R1
	MOVL	dest_matrix(AP), R10		; point to dest matrix
	CASEB	DSC$B_DTYPE(R10), #DSC$K_DTYPE_W, #<DSC$K_DTYPE_D - DSC$K_DTYPE_W>
1$:	.WORD	DEST_D_TO_W-1$			; code for word dtype
	.WORD	DEST_D_TO_L-1$			; code for long dtype
	.WORD	ERR_DATTYPERR-1$		; quad not supported
	.WORD	ERR_DATTYPERR-1$		; float unsupported w/ double
	.WORD	STORE_DOUBLE-1$			; no conversion needed
	BRW	ERR_DATTYPERR			; unsupported dtype

DEST_L_TO_W:
	CVTLW	R0, R0				; convert
	BRB	STORE_WORD			; go store

DEST_F_TO_W:
	CVTFW	R0, R0				; convert
	BRB	STORE_WORD			; go store

DEST_D_TO_W:
	DIVD2	scale(R5), R0			; descale for dest
	CVTDW	R0, R0				; convert to word
						; fall in to word store

STORE_WORD:
	MOVL	R10, R1				; pointer to dest descriptor
	MOVL	current_i(R5), R2		; current row
	MOVL	current_j(R5), R3		; current column
	STORE	W				; store
	RSB					; go continue loop

DEST_W_TO_L:
	CVTWL	R0, R0				; convert
	BRB	STORE_LONG			; go store

DEST_F_TO_L:
	CVTFL	R0, R0				; convert
	BRB	STORE_LONG			; go store

DEST_D_TO_L:
	DIVD2	scale(R5), R0			; descale for dest
	CVTDL	R0, R0				; convert
						; fall into long store

STORE_LONG:
	MOVL	R10, R1				; pointer to dest descriptor
	MOVL	current_i(R5), R2		; current row
	MOVL	current_j(R5), R3		; current column
	STORE	L				; store
	RSB					; go continue loop

DEST_W_TO_F:
	CVTWF	R0, R0				; convert
	BRB	STORE_FLOAT			; go store

DEST_L_TO_F:
	CVTLF	R0, R0				; convert
						; fall into store float

STORE_FLOAT:
	MOVL	R10, R1				; pointer to dest descriptor
	MOVL	current_i(R5), R2		; current row
	MOVL	current_j(R5), R3		; current column
	STORE	F				; store
	RSB					; go continue loop
						; fall into store float
DEST_W_TO_D:
	CVTWD	R0, R0				; save double
	MULD2	scale(R5), R0			; scale for dest
						;  no integerize necessary
	BRB	STORE_DOUBLE			; go store

DEST_L_TO_D:
	CVTLD	R0, R0				; save double
	MULD2	scale(R5), R0			; scale for dest
						;  no integerize necessary
						; fall into store double

STORE_DOUBLE:
	MOVL	R10, R2				; pointer to dest descriptor
	MOVL	current_i(R5), R3		; current row
	MOVL	current_j(R5), R4		; current column
	STORE	D				; store
	RSB					; go continue loop

	.END
