	.TITLE	MTH$RANDOM - General Purpose Random Number Generator
	.IDENT	/1-006/		; File: MTHRANDOM.MAR

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY: Mathematics Library
;
; ABSTRACT:
;
;	This is a general random number generator. It is
;	of the multiplicative congruential type, and hence
;	is fast, although prone to certain classes of
;	non-random sequences.
;
; ENVIRONMENT:	any access mode, normally user mode
;		modular, AST reentrant procedure
;--
;+
; AUTHOR: Peter F. Conklin, CREATION DATE: 28-Dec-77
;
; MODIFIED BY:
;
;	Peter F. Conklin, 1-Feb-78: VERSION 01
; 01	- Original creation.
; 02	- Change to LIB$ rather than MTH$.
; 03	- Change back to MTH$.  Some more comments.  JMT 4-Jan-78
; 04	- Correct documentation on usage.
; 1-005	- Put version number in standard format (three digits in
;	   edit number field).  JBS 16-NOV-78
; 1-006	- Add "_" to the PSECT directive.  JBS 22-DEC-78
;-

	.SBTTL	DECLARATIONS

;
; INCLUDE FILES:
;
;	NONE
;
; MACROS:
;
;	NONE
;
; EQUATED SYMBOLS:
;

	SEED=4					; Only argument is the seed

;
; OWN STORAGE:
;
;	NONE
;

;
; PSECT DECLARATIONS:
;
	.PSECT	_MTH$CODE,PIC,SHR,NOWRT,LONG,EXE

	.SBTTL	MTH$RANDOM - CALLable function
;++
; FUNCTIONAL DESCRIPTION:
;
; RANDOM - General Purpose Pseudo Random Number Generator
;
;	Call the function MTH$RANDOM (seed) to obtain the
;	next pseudo-random number. The seed is updated by
;	the function automatically as a side effect. The
;	result is a floating point number that is uniformly
;	distributed in the range 0.0 inclusive to 1.0 exclusive.
;	There are no restrictions on the seed, although
;	it should be initialized to different values on
;	separate runs.
;
;	The algorithm used is to update the seed as:
;
;		seed = 69069. * seed + 1    (mod 2**32)
;
;	and then to convert the seed to floating point.
;
;	Note, because the result is never 1.0, a simple
;	way to get a uniform random integer selector is
;	to multiply by the number of cases. For example
;	if a uniform choice among 5 situations is to be
;	made, then the following FORTRAN statement will
;	work:
;		GO TO (1,2,3,4,5) 1+IFIX(5.*MTH$RANDOM(seed))
;
;	Note that the explicit IFIX is necessary before
;	adding 1 in order to avoid a possible rounding
;	during the normalization after the floating add.
;
;	This is a general random number generator. It is
;	of the multiplicative congruential type, and hence
;	is fast, although prone to certain classes of
;	non-random sequences. This non-random behavior
;	typically arises when considering triples of
;	numbers generated by this method.
;
;	For more information on congruential generators,
;	see:
;		Random Number Generation (pp. 1192-1197)
;		  by G. Marsaglia
;
;	in:	Encyclopedia of Computer Science
;		  edited by Anthony Ralston
;		  Petrocelli (New York, 1976)
;
; CALLING SEQUENCE:
;
;	result.wf.v = MTH$RANDOM (seed.mlu.r)

;
; INPUT PARAMETERS:
;
;	SEED.mlu.r		Longword seed is modified each call
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; FUNCTION VALUE
;
;	Returns in R0 a single-precision floating point value between
;	0.0 inclusive and 1.0 exclusive.
;
; SIDE EFFECTS:
;
;	NONE
;
;--

	.ENTRY	MTH$RANDOM,0		;no registers save, clear IV

;-
; If this were to be placed as an inline expansion, then
; EMUL SEED,#69069,#1,R0 should replace the next two
; instructions because this would prevent the possibility
; of integer overflow trapping.
;-

	MULL2	#69069,@SEED(AP)	;update seed with multiplier
	INCL	@SEED(AP)		;increment seed to protect
					; against strange seeds

;
; The next instructions convert the seed from unsigned integer
; to floating point in the range 0.0 to 1.0 exclusive.
;

	EXTZV	#8,#24,@SEED(AP),R0	;Get the most significant bits
					; of the seed in the range
					; 0 .. (2**24)-1
	CVTLF	R0,R0			;Convert to floating without
					; rounding. The result is
					; positive and in the range
					; 0.0 .. (2.0**24)-1.0

;
; If this were to be placed as an inline expansion, then
; MULF #^X00003480,R0 could replace the next two instructions.
;

	BEQL	10$			;If zero, already correct
	SUBW	#24@7,R0		;DIVF #^F2.0**24
					; the result is now in the
					; range 0.0 .. 1.0 exclusive

10$:	RET

	.END
