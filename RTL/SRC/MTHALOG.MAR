	.TITLE	MTH$ALOG 	; Floating Point Natural and Common
				; Logarithm Functions (ALOG,ALOG10)
	.IDENT /2-004/		; File: MTHALOG.MAR  Edit: PDG2004
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;
; FACILITY: MATH LIBRARY
;++
; ABSTRACT:
;
; MTH$ALOG and MTH$ALOG10 are functions which return the floating point
; natural  or common logarithm of their single precision floating point
; argument. The call is standard call-by-reference.
; MTH$ALOG_R5  and  MTH$ALOG10_R5   are  special routines which are the
; same as MTH$ALOG and MTH$ALOG10 except a faster non-standard JSB call
; is used with the argument in R0 and no registers are saved.
;
;--
;
; VERSION: 01
;
; HISTORY:
; AUTHOR:
;	Peter Yuo, 15-Oct-76: Version 01
;
; MODIFIED BY:
;
; 01-1	Peter Yuo, 22-May-77
;
;
; VERSION: 02
;
; HISTORY:
; AUTHOR:
;	Bob Hanek, 02-JUN-81: Version 02
;
;

	.SBTTL	HISTORY	; Detailed Current Edit History

; VERSION 1
;
;
; ALGORITHMIC DIFFERENCE FROM FP-11C ROUTINE:
;	1. Uses POLYF so greater accuracy.
;
; Edit History for Version 01 of MTH$ALOGLOG10 
;
; 01-1	Code saving after code review March 1977
; 01-2  Finished error handling 10 June 1977
; 0-3	MTH$$ERROR changed to MTH$$SIGNAL.
;	MTH$_... changed to MTH__....
;	Changed error handling mechanism. Put error result in R0 before 
;	calling MTH$$SIGNAL in order to allow user modify error result.
; 01-6	Move .ENTRY mask definition.  TNH 14-Aug-78
; 1-007	- Update version number and copyright notice.  JBS 16-NOV-78
; 1-008	- Change MTH__LOGZERNEG to MTH$K_LOGZERNEG.  JBS 07-DEC-78
; 1-009	- Add "_" to PSECT directive.  JBS 21-DEC-78
; 1-010 - Add comment explaining code trickery.  SBL 14-Feb-1979
; 1-011 - Declare externals.  SBL 17-May-1979
;
;
; Edit History for Version 02 of MTH$ALOGLOG10 
;
; 2-001 - Add log base 2 entry points.  RNH 08-Aug-1981
; 2-002 - Use general mode addressing for externals.  SBL 24-Aug-1981
; 2-003 - Added vectored entry point MTH$$AB_ALOG_V.  RNH 29-Sep-81
; 2-004	- Change F_FHI to the global symbol MTH$$AB_F_FHI.  PDG 3-Nov-81

	.SBTTL	DECLARATIONS	; Declarative Part of Module

;
; INCLUDE FILES:	MTHJACKET.MAR
;

;
; EXTERNAL SYMBOLS:
;
	.DSABL	GBL
	.EXTRN	MTH$K_LOGZERNEG
	.EXTRN	MTH$$SIGNAL

;
; EQUATED SYMBOLS:


	ACMASK = ^M<R2, R3, R4, R5>	; register entry mask and integer
					; overflow enable
        LF_LN_2_HI = ^X72003CB1		; (Hi 16 bits of ln2)*2**-7
        LF_LN_2_LO = ^XBE8E333F		; (Low bits of ln2)*2**-7
	LF_LOG10_E = ^X5BD93FDE		; log10(e)
	SF_1        = ^F1.0

	F_INV_LN2_CONS	= ^F1.4426950408889634073599246810018921374266
					; convert natural log to log base 2
;
; MACROS:	none
;
; PSECT DECLARATIONS:

	.PSECT	_MTH$CODE	PIC,SHR,LONG,EXE,NOWRT
					; program section for math routines
;
; OWN STORAGE:	none
;

; CONSTANTS:

;
;   The MTH$$AB_ALOG table is accessed by the low order exponent  bit  and the 
;   first 7 fraction bits (not including the hidden bit) of the argument.  The 
;   table  entries  are  offsets  into  the  F_FHI table below.  Note that the 
;   MTH$$AB_ALOG table is data type independent and is used by  all  four  LOG 
;   routines.


MTH$$AB_ALOG_V::		; Simulated vector entry for G
	.LONG	MTH$$AB_ALOG-.	;   and H routines

MTH$$AB_ALOG::
	.BYTE	^X04, ^X04, ^X04, ^X04, ^X04, ^X04, ^X04, ^X04
	.BYTE	^X04, ^X04, ^X04, ^X04, ^X04, ^X04, ^X04, ^X04
	.BYTE	^X04, ^X04, ^X04, ^X04, ^X04, ^X09, ^X09, ^X09
	.BYTE	^X09, ^X09, ^X09, ^X09, ^X09, ^X09, ^X09, ^X09
	.BYTE	^X09, ^X09, ^X09, ^X09, ^X09, ^X09, ^X09, ^X09
	.BYTE	^X0E, ^X0E, ^X0E, ^X0E, ^X0E, ^X0E, ^X0E, ^X0E
	.BYTE	^X0E, ^X0E, ^X0E, ^X0E, ^X0E, ^X0E, ^X0E, ^X0E
	.BYTE	^X13, ^X13, ^X13, ^X13, ^X13, ^X13, ^X13, ^X13
	.BYTE	^X13, ^X13, ^X13, ^X13, ^X13, ^X13, ^X18, ^X18
	.BYTE	^X18, ^X18, ^X18, ^X18, ^X18, ^X18, ^X18, ^X18
	.BYTE	^X18, ^X1D, ^X1D, ^X1D, ^X1D, ^X1D, ^X1D, ^X1D
	.BYTE	^X1D, ^X1D, ^X22, ^X22, ^X22, ^X22, ^X22, ^X22
	.BYTE	^X22, ^X27, ^X27, ^X27, ^X27, ^X27, ^X27, ^X2C
	.BYTE	^X2C, ^X2C, ^X2C, ^X2C, ^X31, ^X31, ^X31, ^X31
	.BYTE	^X36, ^X36, ^X36, ^X3B, ^X3B, ^X40, ^X40, ^X45
	.BYTE	^XFF, ^XFF, ^XFF, ^XFF, ^XFF, ^XFF, ^XFF, ^XFF
	.BYTE	^XFF, ^XFF, ^XFF, ^XFF, ^X41, ^X3C, ^X37, ^X32
	.BYTE	^X32, ^X2D, ^X2D, ^X28, ^X28, ^X28, ^X23, ^X23
	.BYTE	^X23, ^X23, ^X1E, ^X1E, ^X1E, ^X1E, ^X1E, ^X19
	.BYTE	^X19, ^X19, ^X19, ^X19, ^X19, ^X19, ^X14, ^X14
	.BYTE	^X14, ^X14, ^X14, ^X14, ^X14, ^X14, ^X14, ^X0F
	.BYTE	^X0F, ^X0F, ^X0F, ^X0F, ^X0F, ^X0F, ^X0F, ^X0F
	.BYTE	^X0F, ^X0F, ^X0F, ^X0A, ^X0A, ^X0A, ^X0A, ^X0A
	.BYTE	^X0A, ^X0A, ^X0A, ^X0A, ^X0A, ^X0A, ^X0A, ^X0A
	.BYTE	^X0A, ^X0A, ^X0A, ^X0A, ^X05, ^X05, ^X05, ^X05
	.BYTE	^X05, ^X05, ^X05, ^X05, ^X05, ^X05, ^X05, ^X05
	.BYTE	^X05, ^X05, ^X05, ^X05, ^X05, ^X05, ^X05, ^X05
	.BYTE	^X05, ^X05, ^X05, ^X05, ^X00, ^X00, ^X00, ^X00
	.BYTE	^X00, ^X00, ^X00, ^X00, ^X00, ^X00, ^X00, ^X00
	.BYTE	^X00, ^X00, ^X00, ^X00, ^X00, ^X00, ^X00, ^X00
	.BYTE	^X00, ^X00, ^X00, ^X00, ^X00, ^X00, ^X00, ^X00
	.BYTE	^X00, ^X00, ^X00, ^X00, ^X00, ^X00, ^X00, ^X00


;
;
;   The F_FHI table is accessed by an index obtained from the MTH$$AB_ALOG 
;   table.  Indices between 0 and 13 inclusive are used to access  entries 
;   0  through 13 respectively.  For these indices, the first three items 
;   of the corresponding entry are  FHI,  LN_FHI_LO  and  LN_FHI_HI .  The 
;   last two items for these entries are not used.  Indices between 14 and 
;   27 inclusive access entries 13 through 0 respectively.  For  these in-
;   dices, the last three items in the corresponding entry are LN_FHI_HI, 
;   LN_FHI_LO and FHI.  The first two items for these entries are not used.
;

MTH$$AB_F_FHI::
; Entry  0
	.LONG	^X4F9040ED	; .18539906E+01
	.LONG	^X4C703A20	; .15287264E-03
	.LONG	^X0000401E	; .61718750E+00
	.LONG	^X42A4BA20	;-.15283615E-03
	.LONG	^X149E400A	; .53937709E+00
; Entry  1
	.LONG	^X1D4340CF	; .16180805E+01
	.LONG	^X3D7A3925	; .39396320E-04
	.LONG	^X60003FF6	; .48120117E+00
	.LONG	^X8565B925	;-.39463299E-04
	.LONG	^X364F401E	; .61801618E+00
; Entry  2
	.LONG	^X68D440BA	; .14563241E+01
	.LONG	^XFE6E3A3F	; .18309962E-03
	.LONG	^X60003FC0	; .37573242E+00
	.LONG	^XFA3BBA3F	;-.18308398E-03
	.LONG	^XC8F9402F	; .68666035E+00
; Entry  3
	.LONG	^XAD1D40AB	; .13412205E+01
	.LONG	^XF63E3A00	; .12298764E-03
	.LONG	^X40003F96	; .29345703E+00
	.LONG	^XF804BA00	;-.12299424E-03
	.LONG	^XDEF5403E	; .74558955E+00
; Entry  4
	.LONG	^X1DA240A1	; .12587168E+01
	.LONG	^X96E539EB	; .11233780E-03
	.LONG	^X80003F6B	; .22998047E+00
	.LONG	^X8F32B9EB	;-.11232345E-03
	.LONG	^X61B9404B	; .79445988E+00
; Entry  5
	.LONG	^X8BD24099	; .11995795E+01
	.LONG	^XF8D539B4	; .86294174E-04
	.LONG	^X40003F3A	; .18188477E+00
	.LONG	^XE576B9B4	;-.86258093E-04
	.LONG	^X687B4055	; .83362550E+00
; Entry  6
	.LONG	^XFFA64093	; .11562393E+01
	.LONG	^X90C63902	; .31129246E-04
	.LONG	^XA0003F14	; .14514160E+00
	.LONG	^X5C1CB902	;-.31080199E-04
	.LONG	^X6850405D	; .86487293E+00
; Entry  7
	.LONG	^XC18C408F	; .11230941E+01
	.LONG	^X0DCB397A	; .59617490E-04
	.LONG	^XA0003EED	; .11602783E+00
	.LONG	^XFBF5B979	;-.59600879E-04
	.LONG	^XF1154063	; .89039737E+00
; Entry  8
	.LONG	^X5B39408C	; .10965339E+01
	.LONG	^XBAC4395A	; .52149189E-04
	.LONG	^XA0003EBC	; .92102051E-01
	.LONG	^XE725B95A	;-.52190520E-04
	.LONG	^X76814069	; .91196448E+00
; Entry  9
	.LONG	^XB2B24089	; .10757658E+01
	.LONG	^XDE8A3911	; .34777950E-04
	.LONG	^X80003E95	; .72998047E-01
	.LONG	^X98DAB911	;-.34713048E-04
	.LONG	^XF853406D	; .92957038E+00
; Entry 10
	.LONG	^XB4DF4087	; .10602072E+01
	.LONG	^XFB5338C2	; .23243634E-04
	.LONG	^X60003E6F	; .58441162E-01
	.LONG	^X9E7BB8C2	;-.23200400E-04
	.LONG	^X76554071	; .94321185E+00
; Entry 11
	.LONG	^X54244086	; .10494428E+01
	.LONG	^X23F83839	; .11035234E-04
	.LONG	^XA0003E45	; .48248291E-01
	.LONG	^X495DB83A	;-.11103545E-04
	.LONG	^XF0604073	; .95288658E+00
; Entry 12
	.LONG	^X38494085	; .10407802E+01
	.LONG	^XCA5938C1	; .23101618E-04
	.LONG	^XA0003E23	; .39947510E-01
	.LONG	^XA046B8C1	;-.23082026E-04
	.LONG	^XF8264075	; .96081769E+00
; Entry 13
	.LONG	^X6EE94084	; .10346347E+01
	.LONG	^XE75E38B2	; .21326992E-04
	.LONG	^X60003E0B	; .34027100E-01
	.LONG	^XB60EB8B2	;-.21304029E-04
	.LONG	^X6E2A4077	; .96652472E+00

;
;  Polynomial constants tables
;


LOGTAB1:			; Constants for q(z).  Generated using eq.
				; 6.3.10 of Hart et. al. (sin(2a) = 1/32)
	.LONG	^XEABDBF2A	; C5 = -.16691108
	.LONG	^X0CDD3F4D	; C4 = 0.20024438
	.LONG	^XFFF6BF7F	; C3 = -.24999985
	.LONG	^XAAA73FAA	; C2 = 0.33333322
	.LONG	^X0000C000	; C1 = -.50000000
	.LONG	^X00000000	; C0 =  .00000000
LOGLEN1 = .-LOGTAB1/4		; no. of floating point entries


LOGTAB2:			; Constants for p(z*z).  Generated using 
				; eq. 6.3.11 of Hart et. al. (sin(2a) = 
				; (b - 1)/(b + 1) where b = 2**(1/7))
	.LONG	^X6D943FCD	; C2 = 0.40122664
	.LONG	^XAA91402A	; C1 = 0.66666514
	.LONG	^X00004100	; C0 = 2.00000000
LOGLEN2 = .-LOGTAB2/4


	.SBTTL	MTH$ALOG  - Standard Single Precision Floating LOG


;++
; FUNCTIONAL DESCRIPTION:
;
; LOG  - single precision floating point function
;
; LOG(X) is computed using the following approximation technique:
;
;	If X =< 0, error.  Otherwise
;
;	Let X = f * (2**n), where 1/2 <= f < 1
;
;       If n is greater than or equal to 1 than
;             set N = n - 1 and F = 2*f.  
;          Else
;             set N = n and F = f.  
;
;       Then  ln(x) = N*ln2 + ln(F)           
;
;       If |F - 1| < 2**-5 then
;             ln(F) =  W + W*P(W), where W = F - 1 and P 
;             is a polynomial of degree 5.
;          Else
;             ln(F) = ln(FHI) + Z*Q(Z*Z), where FHI is ob-
;             tained by table look-up, Q is a polynomial of
;             degree 2 and Z = (F - FHI)/(F + FHI)
;
;       NOTE: The quantities ln(FHI) and ln2 are used in the above
;             equations in two parts - a high part (containing the
;             high order bits) and a low part (containing the low
;             order bits.  In the code the high and low parts of the
;             constants are indicated by a _HI and _LO suffix respec-
;             tively.  The values were chosen such that N*LN_2_HI +
;             LN_FHI_HI is exactly representable.
;
; CALLING SEQUENCE:
;
;	logarithm.wf.v = MTH$ALOG(x.rf.r)
;
; INPUT PARAMETERS:

	LONG = 4			; define longword multiplier
	x = 1 * LONG			; Contents of x is the argument

; IMPLICIT INPUTS:	none
;
; OUTPUT PARAMETERS:
;
;	VALUE:	floating logarithm of the argument
;
; IMPLICIT OUTPUTS:	none
;
; COMPLETION CODES:	none
;
; SIDE EFFECTS:
;
; Signals: MTH$_LOGZERNEG if |X| =< 0.0 with reserved operand in R0 (copied to
; the signal mechanism vector CHF$L_MCH_R0/R1 by LIB$SIGNAL).
; Associated message is: "LOGARITHM OF ZERO OR NEGATIVE VALUE". Result is 
; reserved operand -0.0 unless a user supplied (or any) error handler changes 
; CHF$L_MCH_R0/R1.
;
; NOTE: This procedure disables floating point underflow and integer
; overflow, causes no floating overflow or other arithmetic traps, and
; preserves enables across the call.
;
;---


	.ENTRY	MTH$ALOG, ACMASK	; standard call-by-reference entry
					; disable DV (and FU), enable IV
	MTH$FLAG_JACKET			; flag that this is a jacket procedure
					; in case of an error in special JSB 
					; routine
	MOVF	@x(AP), R0		; R0 = arg 
	BSBB	MTH$ALOG_R5 		; call special LOG rountine
	RET				; return - result in R0


	.SBTTL	MTH$ALOG10  - Standard Single Precision Floating Common Log

;++
; FUNCTIONAL DESCRIPTION:
;
; LOG10  - single precision floating point function
;
; LOG10(X) is computed as LOG10(E) * LOG(X).
;
; See description of MTH$ALOG 
;
; CALLING SEQUENCE:
;
;	logarithm_base_10.wf.v = MTH$ALOG10(x.rf.r)
;
; INPUT PARAMETERS:

	LONG = 4			; define longword multiplier
	x = 1 * LONG			; Contents of x is the argument 

;
; SIDE EFFECTS:	See description of MTH$ALOG
;
;--


	.ENTRY	MTH$ALOG10, ACMASK	; standard call-by-reference entry
					; disable DV (and FU), enable IV
	MTH$FLAG_JACKET			; flag that this is a jacket procedure
					; in case of an error in special JSB 
					; routine
	MOVF	@x(AP), R0		; R0 = arg 
	BSBB	MTH$ALOG10_R5 		; call special LOG10 routine
	RET				; return - result in R0


	.SBTTL	MTH$ALOG2  - Standard Single Precision Floating Common Logarithm

;++
; FUNCTIONAL DESCRIPTION:
;
; LOG2  - single precision floating point function
;
; LOG2(X) is computed as LOG2(E) * LOG(X).
;
; See description of MTH$ALOG 
;
; CALLING SEQUENCE:
;
;	logarithm_base_2.wf.v = MTH$ALOG2(x.rf.r)
;
; INPUT PARAMETERS:

	LONG = 4			; define longword multiplier
	x = 1 * LONG			; Contents of x is the argument 

;
; SIDE EFFECTS:	See description of MTH$ALOG
;
;--


	.ENTRY	MTH$ALOG2, ACMASK	; standard call-by-reference entry
					; disable DV (and FU), enable IV
	MTH$FLAG_JACKET			; flag that this is a jacket procedure 
					; in case of an error in special JSB 
					; routine
	MOVF	@x(AP), R0		; R0 = arg 
	BSBB	MTH$ALOG_R5 		; JSB to the natural log routine
	MULF2	#F_INV_LN2_CONS, R0	; convert to base 2
	RET				; return - result in R0



	.SBTTL	MTH$ALOGLOG10_R5  - Special LOG/LOG10 routines

; Special LOG/LOG10 - used by the standard, and directly.
;
; CALLING SEQUENCE:
;	save anything needed in R0:R5
;	MOVF	..., R0			; input in R0
;	JSB	MTH$ALOG10_R5 /MTH$ALOG_R5 
;	return with result in R0
; Note: This routine is written to avoid causing any integer overflows, 
; floating overflows, or floating underflows or divide by 0 conditions, 
; whether enabled or not.
;
; REGISTERS USED:
;	R0 - Floating argument then result
;	R1 - scratch
;	R0:R3 - POLYF
;	R4 - W or Z during POLYF
;	R5 - pointer into F_FHI table
;-

MTH$ALOG10_R5::				; special LOG10 routine
	BICW3	#^X7F, R0, R5		; R5 = Biased exponent
	BLEQ	ERR			; ALOG10(X) is not defined for X=<0
					; NOTE: User's PC is on top of the
					; stack.  The ERROR logic depends on
					; the user's PC being on top of the
					; stack so a direct call to MTH$ALOG 
					; is not used
	BSBB	ALOG_COMMON_R5		; Call common LOG/LOG10 logic
	MULF	#LF_LOG10_E, R0		; R0 = LOG10(e)*LOG(X) = LOG10(X)
	RSB				; Return


MTH$ALOG_R5::				; special LOG routine
	BICW3	#^X7F, R0, R5		; R5 = Biased exponent
	BLEQ	ERR			; ALOG(X) is not defined for X=<0
ALOG_COMMON_R5:
	SUBW	#^X4000, R5		; R5 = Unbiased exponent
	BLEQ	NEG_EXP			; Branch to processing for n=<0

;
; Exponent is positive.  N = n - 1 and F = 2f
;

	SUBW	#^X80, R5		; R5 = N = n - 1
	SUBW	R5, R0			; R0 = F = 2f
	MOVZBL	R0, R3			; R3 = index into MTH$$AB_ALOG table
	MOVB	MTH$$AB_ALOG[R3], R3	; R3 = offset into F_FHI tables
	BLSS	LN_1_PLUS		; Branch to special processing 
					;   for F close to 1

;
; Compute Z, Z**2, P(Z**2) and Z*P(Z**2)
;

	CVTWF	R5, -(SP)		; Push N onto the stack
	MOVAL	MTH$$AB_F_FHI[R3], R5	; R5 = Address of FHI
	MOVL	(R5)+, R2		; R2 = FHI
	SUBF3	R2, R0, R4		; R4 = F - FHI
	ADDF	R2, R0			; R0 = F + FHI
	DIVF	R0, R4			; R4 = Z = (F - FHI)/(F + FHI)
	MULF3	R4, R4, R0		; R0 = Z**2
	POLYF	R0, #LOGLEN2-1, LOGTAB2	; R0 = P(Z**2)
	MULF	R4, R0			; R0 = Z*P(Z**2)

;
; Compute B = N*LN_2_LO + LN_FHI_LO + Z*P(Z*Z)
;
	MULF3	(SP), #LF_LN_2_LO, R1	; R1 = N*LN_2_LO
	ADDF	(R5)+, R1		; R1 = N*LN_2_LO + LN_FHI_LO
	ADDF	R1, R0			; R0 = B

;
; Compute A = N*LN_2_HI + LN_FHI_HI and ALOG(X)
;
	MULF3	(SP)+, #LF_LN_2_HI, R1	; R1 = N*LN_2_HI
	ADDF	(R5), R1		; R1 = A = N*LN_2_HI + LN_FHI_HI
	ADDF	R1, R0			; R0 = A + B = ALOG(X)
	RSB

LN_1_PLUS:
        BRB	LN_1_PLUS_W		

ERR:	BRW	ERROR

;
; Exponent is negative.  N = n and F = f
;

NEG_EXP:SUBW	R5, R0			; R0 = F = f
	MOVZBL	R0, R3			; R3 = index into MTH$$AB_ALOG table
	MOVB	MTH$$AB_ALOG[R3], R3	; R3 = offset into F_FHI tables
	BLSS	LN_1_PLUS_W		; Branch to special processing 
					;   for F close to 1

;
; Compute Z, Z**2, P(Z**2) and Z*P(Z**2)
;

	CVTWF	R5, -(SP)		; Push N onto the stack
	MOVAL	MTH$$AB_F_FHI[R3], R5	; R5 = Address of FHI
	MOVL	(R5), R2		; R2 = FHI
	SUBF3	R2, R0, R4		; R4 = F - FHI
	ADDF	R2, R0			; R0 = F + FHI
	DIVF	R0, R4			; R4 = Z = (F - FHI)/(F + FHI)
	MULF3	R4, R4, R0		; R0 = Z**2
	POLYF	R0, #LOGLEN2-1, LOGTAB2	; R0 = P(Z**2)
	MULF	R4, R0			; R0 = Z*P(Z**2)

;
; Compute B = N*LN_2_LO + LN_FHI_LO + Z*P(Z*Z)
;
	MULF3	(SP), #LF_LN_2_LO, R1	; R1 = N*LN_2_LO
	ADDF	-(R5), R1		; R1 = N*LN_2_LO + LN_FHI_LO
	ADDF	R1, R0			; R0 = B

;
; Compute A = N*LN_2_HI + LN_FHI_HI and ALOG(X)
;
	MULF3	(SP)+, #LF_LN_2_HI, R1	; R1 = N*LN_2_HI
	SUBF	-(R5), R1		; R1 = A = N*LN_2_HI + LN_FHI_HI
	ADDF	R1, R0			; R0 = A + B = ALOG(X)
	RSB

;
; Special logic for F close to 1 
;

LN_1_PLUS_W:
	SUBF3	#SF_1, R0, R4		; R4 = W = F - 1
	POLYF	R4, #LOGLEN1-1,LOGTAB1	; R0 = Q(W)
	MULF	R4, R0			; R0 = W*Q(W)
	CVTWF	R5, R5			; R5 = N
	MULF3	R5, #LF_LN_2_LO, R1	; R1 = N*LN_2_LO
	ADDF	R1, R0			; R0 = N*LN_2_LO + W*Q(W)
	ADDF	R4, R0			; R0 = N*LN_2_LO + LN(F)
	MULF	#LF_LN_2_HI, R5		; R5 = N*LN_2_HI
	ADDF	R5, R0			; R0 = ALOG(X)
	RSB


;
; X =< 0.0, signal error
;

ERROR:	PUSHL	(SP)			; return PC from JSB routine
	MOVZBL	#MTH$K_LOGZERNEG, -(SP)	; condition value
	ASHL	#15, #1, R0		; R0 = result = reserved operand -0.0
					; goes to signal mechanism vector
					; (CHF$L_MCH_R0/R1) so error handler
					; can modify the result.
	CALLS	#2, G^MTH$$SIGNAL	; signal error and use real user's PC
					; independent of CALL vs JSB
	RSB				; return - R0 restored from 
					; CHF$L_MCH_R0/R1


	.END
