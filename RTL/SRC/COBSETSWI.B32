MODULE COB$SET_SWITCH(
		IDENT = '1-003'		! file: COBSETSWI.B32 EDIT:LB1003
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY:	COBOL SUPPORT
!
! ABSTRACT
!
!	Sets external switches.
!
!
! ENVIRONMENT:	Vax-11 User Mode
!
! AUTHOR: MLJ , CREATION DATE: 30-Oct-1979
!
! MODIFIED BY:
!
! 1-001 - Original, from COBSWITCH.B32 1-005.  MLJ 30-Oct-1979
! 1-002	- Signal COB$_SETEXTFAI if $CRELOG fails.  PDG 7-Aug-81
! 1-003 - Added EDIT phrase so CHECKIN creates a valid audit trail.
!	  Also updated copyright date.  LB 9-Aug-81
!--

!
! SWITCHES
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES
!
LINKAGE
    L = JSB : GLOBAL(PTR=2, CNT=3, DIG=4);
!
! TABLE OF CONTENTS:
!
FORWARD ROUTINE
	GET_DIGIT : L ;
!
! INCLUDE FILES
!
REQUIRE 'RTLIN:RTLPSECT' ;		! Macros to declare psects
LIBRARY 'RTLSTARLE';

!
! MACROS
!
!	NONE
!
! EQUATED SYMBOLS
!
EXTERNAL LITERAL
	COB$_SETEXTFAI;			! SET external switch failed

!
! PSECT DECLARATIONS:
!

DECLARE_PSECTS (COB) ;			! Declare psects for COB$ facility

GLOBAL ROUTINE COB$SET_SWITCH(SET_MASK,DO_SET)=
!
!++	FUNCTIONAL DESCRIPTION
!
!
!	This routine sets and clears external switches.
!
!
! FORMAL PARAMETERS:
!
!	SET_MASK		- Bit mask of switches to be set or cleared.
!				  Bits 0 through 15 correspond to external
!				  switches numbered 1 through 16.
!
!	DO_SET			- If true, the indicated switches are set.
!				  Otherwise, they are cleared.
!
! IMPLICIT INPUTS:
!
!	Logical name table
!
! IMPLICIT OUTPUTS:
!
!	New definition for logical name COB$SWITCHES.
!
! ROUTINE VALUE:
!
!	NONE
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--
!
    BEGIN
    LOCAL
	BUFFER:		VECTOR[64,BYTE],	! Returned equivalence string
	BUFDESC:	VECTOR[2],		! Descriptor for BUFFER
	NAMDESC:	VECTOR[2],		! Descriptor for logical name
	LENGTH:		WORD,			! Length of equivalence string
	MASK,					! Local bit mask of switches
	STATUS;					! System service status
    GLOBAL REGISTER
	PTR=2, CNT=3, DIG=4;
    LABEL
	LOOP;

    BUFDESC[0] = 64;				! Set up descriptors
    BUFDESC[1] = BUFFER;			!     ...
    NAMDESC[0] = 12;				!     ...
    NAMDESC[1] = UPLIT('COB$SWITCHES');		!     ...


    MASK = 0;					! Initialize the mask
    IF $TRNLOG(					! Translate COB$SWITCHES
	LOGNAM=NAMDESC, RSLLEN=LENGTH, RSLBUF=BUFDESC)
    THEN
	BEGIN
	PTR = BUFFER;				! Set up global registers
	CNT = .LENGTH;				!     ...


LOOP:
	BEGIN
	WHILE 1 DO
	    BEGIN LOCAL VAL;
	    !
	    ! Skip leading non-digits.
	    !
	    WHILE (IF .CNT GTR 0 THEN NOT GET_DIGIT() ELSE LEAVE LOOP) DO 0;
	    !
	    ! Remember first digit.
	    !
	    VAL = .DIG;
	    !
	    ! Scan over digits to next non-digit, computing value in VAL.
	    !
	    WHILE (IF .CNT GTR 0 THEN GET_DIGIT() ELSE 0) DO VAL = .VAL * 10 + .DIG;
	    !
	    ! Put value into mask, if it is in range 1 to 16.
	    !
	    IF (VAL = .VAL - 1) LEQU 15 THEN MASK<.VAL,1> = 1;
	    END;
	END;
    END; ! of labelled block LOOP


    ! The entire equivalence string for COB$SWITCHES has now been processed,
    ! and MASK contains the bit mask of switches that were set.  Modify it
    ! according to the routine parameters.
    !
    IF .DO_SET
	THEN MASK = .MASK OR .SET_MASK
	ELSE MASK = .MASK AND NOT .SET_MASK;


    ! Convert the bit mask to a new equivalence string.
    !
    PTR = BUFFER;
    (.PTR)<0,8> = %C' ';		! Use a leading space to be sure the
    PTR = .PTR + 1;			! string isn't of zero length.
    INCR I FROM 0 TO 15 DO
	BEGIN
	IF .MASK<.I,1>
	THEN
	    BEGIN LOCAL VAL;
	    !
	    ! The switch is set.  Put the decimal ASCII representation into
	    ! the buffer.  Since we know the value is 1 through 16,
	    ! a special-purpose conversion can be done.
	    !
	    VAL = .I + 1;
	    IF .VAL GEQU 10
	    THEN
		BEGIN
		(.PTR)<0,8> = %C'1';
		PTR = .PTR + 1;
		VAL = .VAL - 10;
		END;
	    (.PTR)<0,8> = .VAL + %C'0';
	    PTR = .PTR + 1;	    	    
	    (.PTR)<0,8> = %C' ';
	    PTR = .PTR + 1;
	    END;
	END;


    ! The string has now been constructed.  Redefine the logical name.
    !
    BUFDESC[0] = .PTR - BUFFER;
    BUFDESC[1] = BUFFER;
    IF NOT (STATUS = $CRELOG(
	TBLFLG=2,			! Process table
	LOGNAM=NAMDESC,
	EQLNAM=BUFDESC))
    THEN
	SIGNAL(COB$_SETEXTFAI, 0, .STATUS);

    1
    END;

ROUTINE GET_DIGIT: L=
!
!++	FUNCTIONAL DESCRIPTION
!
!
! Get next character from string, returning:
!		PTR advanced to next character
!		CNT decremented
!		DIG containing the character less %C'0'
!		Value true if and only if the character was a digit
!
!
! FORMAL PARAMETERS:
!
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--
!
    BEGIN
    EXTERNAL REGISTER
	PTR, CNT, DIG;
    LOCAL
	VAL;

    VAL = 0;					! Assume false value
    DIG = .(.PTR)<0,8>;				! Fetch character
    PTR = .PTR + 1;				! Advance pointer
    CNT = .CNT - 1;				! Decrement count
    DIG = .DIG - %C'0';				! Bias character
    IF .DIG LEQU 9 THEN VAL = .VAL + 1;		! Set true value if need be
    .VAL					! Return the value
    END;
END ELUDOM
