MODULE LIB$TIMER (			! RTL Timing Facility
		IDENT = '1-008'		! File: LIBTIMER.B32 EDIT:SBL1008
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY: Run Time Library - User Callable
!
! ABSTRACT:
!
!	This module implements the RTL Timing Facility, replacing
!	subroutines TIMRB and TIMRE.  It consists of four routines:
!	LIB$INIT_TIMER, LIB$SHOW_TIMER, LIB$STAT_TIMER and LIB$FREE_TIMER.
!
! ENVIRONMENT: User mode, can be made AST reentrant.
!
! AUTHOR: Steven B. Lionel, CREATION DATE: 01-Dec-1978
!
! MODIFIED BY:
!
! SBL, 01-Dec-1978 : VERSION 01
! 1-001 - Original.  SBL 01-Dec-1978
! 1-002 - Fix error in calculating CPU_HOURS.  SBL 02-Jan-1979
! 1-003	- Correct some typos in comments and rearrange the module
!	   header to conform to the other RTL modules.  JBS 30-JUL-1979
! 1-004 - Fix some more comments.  SBL 6-August-1979
! 1-005 - FAO_STRING_0 was missing a descriptor!  SBL 29-Oct-1979
! 1-006 - Changed the JPIPARAMS to be read only by putting them in
!	  the _LIB$CODE psect.  Also added EDIT field and updated
!	  the copyright date.  LB 27-Aug-1981
! 1-007 - Make text for SHOW_TIMER of all values shorter, so that it won't
!	  tend to overflow an 80-column screen.  Remove the access test
!	  on the handle block so that users who set watchpoints won't get
!	  unnecessarily upset.  SBL 2-Nov-1981
! 1-008 - Use LIB$GET_EF to get an event flag number for the call to
!	  $GETJPI.  SBL 30-Nov-1981
!--

!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!
!	NONE
!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    LIB$INIT_TIMER,				! Initialize timing statistics
    LIB$SHOW_TIMER,				! Output statistics
    LIB$STAT_TIMER,				! Return statistic values
    LIB$FREE_TIMER,				! Deallocate statistics storage block
    LIB$$GETJPI;				! Local routine to acquire statistics from system

!
! INCLUDE FILES:
!

REQUIRE 'RTLIN:RTLPSECT';			! DECLARE_PSECTS macro

LIBRARY 'RTLSTARLE';

!
! EQUATED SYMBOLS:
!

LITERAL
    N_OF_VALUES = 5,				! Number of values desired
    BLOCKSIZE = (N_OF_VALUES + 2)*%UPVAL,	! Length of storage block in bytes
    LISTSIZE = N_OF_VALUES*3 - 2;		! Length of JPI argument list in longwords

DECLARE_PSECTS (LIB);				! Define psects

!
! OWN STORAGE:
!

OWN
    STORAGE : VECTOR [N_OF_VALUES + 2] 
        INITIAL (BYTE ('TIMR', REP N_OF_VALUES OF LONG(0), LONG (0)));

!+
! JPIPARAMS used to reside in the above OWN storage section, but in order
! to make it read-only, it has been added into the _LIB$CODE psect, which
! is already set up as read-only.
!-

  OWN
    JPIPARAMS : VECTOR [LISTSIZE] PSECT (_LIB$CODE) INITIAL (WORD (%UPVAL), ! Buffer length
	WORD (JPI$_PAGEFLTS), 			! JPI code
	LONG (0), 				! Buffer address
	LONG (0), 				! Unused here
	WORD (%UPVAL), 				! Repeat for other
	WORD (JPI$_CPUTIM), 			! codes
	LONG (0), LONG (0), WORD (%UPVAL), WORD (JPI$_BUFIO), LONG (0), LONG (0), WORD (%UPVAL), WORD (
	    JPI$_DIRIO), LONG (0), LONG (0), LONG (0));	! Terminate list

!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    SYS$FAO,					! Formats ASCII output
    LIB$PUT_OUTPUT,				! Sends string to SYS$OUTPUT
    LIB$GET_EF,					! Get event flag number
    LIB$FREE_EF,				! Free event flag number
    LIB$FREE_VM,				! Frees virtual memory
    LIB$GET_VM;					! Gets virtual memory

EXTERNAL LITERAL
    LIB$_INVARG;				! Invalid argument error condition


GLOBAL ROUTINE LIB$INIT_TIMER (			!
	HANDLE					!
    ) = 					!

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine gets from the operating system the current
!	values of specified times and counts, and stores them
!	for future use by other RTL timer routines.  Depending
!	on the optional argument, "handle", the values are stored
!	in one of three places.  See FORMAL PARAMETERS for more
!	details.
!
! CALLING SEQUENCE:
!
!	status.wlc.v = LIB$INIT_TIMER ([handle.ml])
!
! FORMAL PARAMETERS:
!
!	handle	- Optional.  Determines where the values
!		  of times and counts will be stored.
!
!		  If missing, they will be stored in OWN
!		  storage.  This call is not
!		  reentrant.
!
!		  If zero, a block of dynamic heap storage
!		  will be allocated by a call to LIB$GET_VM,
!		  the values placed in that block and the
!		  address of the block returned in "handle".
!		  This method is AST reentrant.
!
!		  If non zero, it is considered to be the
!		  address of a storage block previously
!		  allocated by a call to LIB$INIT_TIMER.  If
!		  so, the block is reused, and fresh times
!		  and counts are stored in it.
!
! IMPLICIT INPUTS:
!
!	If "handle" is non-zero, the block of storage it refers to is
!	assumed to have been initialized by a previous call to
!	LIB$INIT_TIMER.
!
! IMPLICIT OUTPUTS:
!
!	Upon exit, the block of storage refered to by "handle" will
!	contain the times and counts returned by a call to SYS$GETJPI.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	SS$_NORMAL	- Successful completion
!	LIB$_INVARG	- Invalid argument to routine.  "handle"
!			  is non-zero and the block it refers to
!			  was not initialized on a previous call
!			  to LIB$INIT_TIMER.
!	LIB$INSVIRMEM	- "handle" is present and non-zero but there
!			  is insufficient virtual memory available
!			  to allocate a storage block.
!	LIB$BADBLOSIZ	- This indicates a coding error in the RTL.
!			  \This error should NEVER happen!\
!
! SIDE EFFECTS:
!
!	If "handle" is present, and zero, a block of dynamic memory
!	is allocated.
!
!--

    BEGIN

    LOCAL
	LSTORAGE : REF VECTOR [N_OF_VALUES + 2],	! Points to storage block
	STATUS;					! Return status from functions

    BUILTIN
	NULLPARAMETER;

!+
! If "handle" was not specified, then use OWN storage.
! Else either allocate some or reuse a block, depending on the
! value of "handle"
!-

    IF (NULLPARAMETER (1))
    THEN
	LSTORAGE = STORAGE			! Use OWN storage
    ELSE
	BEGIN

	IF (..HANDLE EQL 0)
	THEN
	    					! Allocate dynamic storage
	    BEGIN
	    STATUS = LIB$GET_VM (%REF (BLOCKSIZE), .HANDLE);

	    IF ( NOT .STATUS) THEN RETURN (.STATUS);

	    LSTORAGE = ..HANDLE;
!+
! Set first longword of storage block to 'TIMR'.  This is a quick
! consistency check to protect against being passed a block not
! previously initialized here.
!-
	    LSTORAGE [0] = %ASCII'TIMR';
	    END;

	LSTORAGE = ..HANDLE;			! Reuse previous block

	IF (.LSTORAGE [0] NEQU %ASCII'TIMR') THEN RETURN (LIB$_INVARG);	! Consistency check

	END;

    STATUS = LIB$$GETJPI (LSTORAGE [1]);	! Get times/counts and store in storage block 1-5
    RETURN (.STATUS);
    END;					! End of routine LIB$INIT_TIMER


GLOBAL ROUTINE LIB$SHOW_TIMER (HANDLE, 		!
	CODE, 					!
	ACTION, 				!
	USERARG					!
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	LIB$SHOW_TIMER is used to obtain the accumulated times/counts
!	since the last time LIB$INIT_TIMER was called.  In the default
!	mode, with neither CODE nor ACTION specified in the call, the
!	routine will output to SYS$OUTPUT a line giving the following
!	five items of information:
!		ELAPSED = hhhh:mm:ss.cc - Elapsed real time
!		CPU = hhhh:mm:ss.cc	- Elapsed CPU time
!		BUFIO = nnnn		- Count of buffered I/O operations
!		DIRIO = nnnn		- Count of direct I/O operations
!		PAGEFLTS = nnnn		- Count of pagefaults
!
!
!	Optionally, only one of the five statistics can be output to
!	SYS$OUTPUT and/or the line of information can be passed to a
!	user-specified "action routine", for processing different from
!	the default.
!
!
! CALLING SEQUENCE:
!
!	status.wlc.v = LIB$SHOW_TIMER ([[[[handle.rl.r], code.rl.r],
!					action.flc.rp], userarg.rl.v])
!
!
! FORMAL PARAMETERS:
!
!	handle	- (Optional) If specified, must be the same value as
!		  returned by a previous call to LIB$INIT_TIMER.
!		  If omitted, the routine's OWN storage will be used.
!		  If handle is omitted, and LIB$INIT_TIMER has not previously
!		  been called, Elapsed time will show the actual time-of-day
!		  and the remaining values will be those accumulated since process login.
!
!	code	- (Optional) Specifies the particular statistic desired.
!		  If given, it must be one of the following values:
!			LIB$K_TMRELP = 1 = Elapsed time
!			LIB$K_TMRCPU = 2 = CPU time
!			LIB$K_TMRBUF = 3 = Buffered I/O
!			LIB$K_TMRDIR = 4 = Direct I/O
!			LIB$K_TMRFLT = 5 = Page faults
!		  If omitted or zero, all five statistics will be returned
!		  on one line.
!
!	action
!	userarg	- (Optional)  These two parameters allow the user to direct
!		  the output of LIB$SHOW_TIMER somewhere other than SYS$OUTPUT.
!		  If "action" is given, it is the address of a function
!		  procedure to call.  The arguments to this function are
!		  described below.  The function should return either
!		  a success of failure condition value, which will be
!		  returned as the value of LIB$SHOW_TIMER.
!
!	CALLING SEQUENCE OF ACTION ROUTINE:
!
!		status.wlc.v = (action) (out_string.rt.ds [, userarg.rl.v])
!
!		out_string	- A descriptor of a fixed length string
!				  containing the statistics desired.  It
!				  is formatted exactly as it would be if
!				  output to SYS$OUTPUT.  The leading character
!				  is blank.
!
!		userarg		- If "userarg" is passed to LIB$SHOW_TIMER,
!				  it is passed directly on to the action
!				  routine.  Note that this is passed BY VALUE
!				  both to LIB$SHOW_TIMER and to the action routine.
!
!
! IMPLICIT INPUTS:
!
!	It is assumed that LIB$INIT_TIMER has previously been called, and
!	that the results of that call are stored in either OWN storage or
!	a block pointed to by "handle".
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	SS$_NORMAL	- Successful completion.
!	LIB$_INVARG	- Invalid arguments.  This can be caused by an
!			  invalid value for "code" or "handle".
!	Other codes as may be returned by LIB$PUT_OUTPUT or the user's
!	action routine.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    BUILTIN
	ACTUALCOUNT,
	NULLPARAMETER,
	SUBM,
	ASHQ,
	EDIV;

    LOCAL
	STATUS,					! Returned condition values
	TEMPCODE,				! Local value of CODE
	LSTORAGE,				! Will contain address of storage block
	TSTORAGE : VECTOR [N_OF_VALUES + 1],	! Gets current times/counts
	FAO_DESC: BLOCK [8, BYTE],		! Descriptor for FAO string
	OUT_DESC : BLOCK [8, BYTE],		! Output string descriptor
	OUT_STRING : BLOCK [100, BYTE],		! Output string
	CPU_HOURS : BLOCK [2],			! Elapsed CPU hours
	CPU_MINUTES,				! Elapsed CPU minutes
	CPU_SECONDS,				! Elapsed CPU seconds
	CPU_MILLS;				! Elapsed CPU 10 mills

    MAP
	LSTORAGE : REF VECTOR [N_OF_VALUES + 2];	! Local name for storage

    BIND
	PAGEFAULTS = TSTORAGE [0],
	CPUTIMX = TSTORAGE [1],
	BUFIO = TSTORAGE [2],
	DIRIO = TSTORAGE [3],
	ELAPSED_TIME = TSTORAGE [4];

    !+
    ! Declare the FAO control strings and lengths.
    !-

    BIND FAO_STRING_0 = UPLIT BYTE (
	    ' ELAPSED: !%T  CPU: !UL:!2ZL:!2ZL.!2ZL  BUFIO: !UL  DIRIO: !UL  FAULTS: !UL ');
    LITERAL FAO_LENGTH_0 = %CHARCOUNT (
	    ' ELAPSED: !%T  CPU: !UL:!2ZL:!2ZL.!2ZL  BUFIO: !UL  DIRIO: !UL  FAULTS: !UL ');
    BIND  FAO_STRING_1 = UPLIT BYTE (' ELAPSED TIME = !%T');
    LITERAL  FAO_LENGTH_1 = %CHARCOUNT (' ELAPSED TIME = !%T');
    BIND FAO_STRING_2 = UPLIT BYTE (' CPU TIME = !UL:!2ZL:!2ZL.!2ZL');
    LITERAL FAO_LENGTH_2 = %CHARCOUNT (' CPU TIME = !UL:!2ZL:!2ZL.!2ZL');
    BIND FAO_STRING_3 = UPLIT BYTE (' BUFFERED I/O COUNT = !UL');
    LITERAL  FAO_LENGTH_3 = %CHARCOUNT (' BUFFERED I/O COUNT = !UL');
    BIND FAO_STRING_4 = UPLIT BYTE (' DIRECT I/O COUNT = !UL');
    LITERAL FAO_LENGTH_4 = %CHARCOUNT (' DIRECT I/O COUNT = !UL');
    BIND FAO_STRING_5 = UPLIT BYTE (' PAGE FAULT COUNT = !UL');
    LITERAL FAO_LENGTH_5 = %CHARCOUNT (' PAGE FAULT COUNT = !UL');

!+
!	Set up FAO string descriptor
!-

    FAO_DESC [DSC$B_DTYPE] = DSC$K_DTYPE_T;
    FAO_DESC [DSC$B_CLASS] = DSC$K_CLASS_S;

!+
!	Set up out_string descriptor
!-
    OUT_DESC [DSC$W_LENGTH] = 100;
    OUT_DESC [DSC$B_DTYPE] = DSC$K_DTYPE_T;
    OUT_DESC [DSC$B_CLASS] = DSC$K_CLASS_S;

    IF (NULLPARAMETER (1))			! "handle" not specified?
    THEN
	LSTORAGE = STORAGE			! Use OWN storage
    ELSE
	LSTORAGE = ..HANDLE;			! Use handle


    IF (.LSTORAGE [0] NEQU %ASCII'TIMR') THEN RETURN (LIB$_INVARG);	! Invalid storage block

    STATUS = LIB$$GETJPI (TSTORAGE);		! Get values

    IF ( NOT .STATUS) THEN RETURN (.STATUS);

!+
!	Compute values elapsed since call to LIB$INIT_TIMER
!-
    PAGEFAULTS = .PAGEFAULTS - .LSTORAGE [1];
    CPU_HOURS = .CPUTIMX - .LSTORAGE [2];
    BUFIO = .BUFIO - .LSTORAGE [3];
    DIRIO = .DIRIO - .LSTORAGE [4];
    SUBM (2, LSTORAGE [5], ELAPSED_TIME, ELAPSED_TIME);
    CPU_HOURS + 4 = 0;				! Clear high order part of CPU time
    EDIV (%REF (100), CPU_HOURS, CPU_HOURS, CPU_MILLS);
    EDIV (%REF (60), CPU_HOURS, CPU_HOURS, CPU_SECONDS);
    EDIV (%REF (60), CPU_HOURS, CPU_HOURS, CPU_MINUTES);
!+
!	Create out_string
!-
    OUT_DESC [DSC$A_POINTER] = OUT_STRING;
!+
!	Now "output" the result, depending on the value of CODE.
!-

    IF (NULLPARAMETER (2)) THEN TEMPCODE = 0 ELSE TEMPCODE = ..CODE;

    CASE .TEMPCODE FROM 0 TO N_OF_VALUES OF
	SET

	[0] : 					! Default case, all five values
	    BEGIN
	    FAO_DESC [DSC$A_POINTER] = FAO_STRING_0;
	    FAO_DESC [DSC$W_LENGTH] = FAO_LENGTH_0;
	    STATUS = SYS$FAO (FAO_DESC, OUT_DESC [DSC$W_LENGTH], OUT_DESC, ELAPSED_TIME, .CPU_HOURS,
		.CPU_MINUTES, .CPU_SECONDS, .CPU_MILLS, .BUFIO, .DIRIO, .PAGEFAULTS);
	    END;

	[1] : 					! Elapsed time only
	    BEGIN
	    FAO_DESC [DSC$A_POINTER] = FAO_STRING_1;
	    FAO_DESC [DSC$W_LENGTH] = FAO_LENGTH_1;
	    STATUS = SYS$FAO (FAO_DESC, OUT_DESC [DSC$W_LENGTH], OUT_DESC, ELAPSED_TIME);
	    END;

	[2] : 					! CPU time only
	    BEGIN
	    FAO_DESC [DSC$A_POINTER] = FAO_STRING_2;
	    FAO_DESC [DSC$W_LENGTH] = FAO_LENGTH_2;
	    STATUS = SYS$FAO (FAO_DESC, OUT_DESC [DSC$W_LENGTH], OUT_DESC, .CPU_HOURS, .CPU_MINUTES,
		.CPU_SECONDS, .CPU_MILLS);
	    END;

	[3] : 					! Buffered I/O count only
	    BEGIN
	    FAO_DESC [DSC$A_POINTER] = FAO_STRING_3;
	    FAO_DESC [DSC$W_LENGTH] = FAO_LENGTH_3;
	    STATUS = SYS$FAO (FAO_DESC, OUT_DESC [DSC$W_LENGTH], OUT_DESC, .BUFIO);
	    END;

	[4] : 					! Direct I/O count only
	    BEGIN
	    FAO_DESC [DSC$A_POINTER] = FAO_STRING_4;
	    FAO_DESC [DSC$W_LENGTH] = FAO_LENGTH_4;
	    STATUS = SYS$FAO (FAO_DESC, OUT_DESC [DSC$W_LENGTH], OUT_DESC, .DIRIO);
	    END;

	[5] : 					! Page faults only
	    BEGIN
	    FAO_DESC [DSC$A_POINTER] = FAO_STRING_5;
	    FAO_DESC [DSC$W_LENGTH] = FAO_LENGTH_5;
	    STATUS = SYS$FAO (FAO_DESC, OUT_DESC [DSC$W_LENGTH], OUT_DESC, .PAGEFAULTS);
	    END;

	[OUTRANGE] :
	    STATUS = LIB$_INVARG;
	TES;

    IF ( NOT .STATUS) THEN RETURN (.STATUS);

    IF (NULLPARAMETER (3))			! "action" not given?
    THEN
	STATUS = LIB$PUT_OUTPUT (OUT_DESC)	! Default to SYS$OUTPUT
    ELSE

	IF (NULLPARAMETER (4))			! "userarg" not given?
	THEN
	    STATUS = (.ACTION) (OUT_DESC)	! Call "action" without "userarg"
	ELSE
	    STATUS = (.ACTION) (OUT_DESC, .USERARG);	! Call "action" with "userarg"

    RETURN (.STATUS);				! Exit
    END;					! End of routine LIB$SHOW_TIMER


GLOBAL ROUTINE LIB$STAT_TIMER (			!
	CODE, 					!
	VALUE, 					!
	HANDLE					!
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	LIB$STAT_TIMER returns to its caller one of five available
!	statistics.  Unlike LIB$SHOW_TIMER which formats the values
!	for output, LIB$STAT_TIMER returns the value to a location
!	specified as a parameter.
!
!	Only one of the five statistics can be returned by one call
!	to LIB$STAT_TIMER.  "code" must be one of the five values
!	described for LIB$SHOW_TIMER.  A "code" of zero is invalid.
!
!	It is important to note that elapsed time (LIB$K_TMRELP) is
!	returned in the system quadword format.  Therefore the receiving
!	area should be 8 bytes long.  All other values are longwords.
!
! CALLING SEQUENCE:
!
!	status.wlc.v = LIB$STAT_TIMER (code.rl, value.wx [, handle.rl])
!
!
! FORMAL PARAMETERS:
!
!	code	- Specifies which statistic is to be returned.  Allowed
!		  values are:
!			LIB$K_TMRELP = 1 = Elapsed time - system quadword format
!			LIB$K_TMRCPU = 2 = CPU time - .01 second units
!			LIB$K_TMRBUF = 3 = Buffered I/O
!			LIB$K_TMRDIR = 4 = Direct I/O
!			LIB$K_TMRFLT = 5 = Page faults
!		  Note that it is invalid to omit "code": or to give
!		  a "code" of zero.
!
!	value	- The location to store the result.  All values are
!		  longword integers except elapsed time, which is a
!		  quadword.  See VAX/VMS System Services Reference Manual
!		  for more details on the system quadword time format.
!
!	handle	- (Optional)  If specified, it must be the value returned
!		  by a previous call to LIB$INIT_TIMER.  Otherwise, OWN
!		  storage will be used.
!
!
! IMPLICIT INPUTS:
!
!	It is assumed that LIB$INIT_TIMER has previously been called and
!	that the "handle" argument to LIB$INIT_TIMER is the same as in
!	the call to LIB$STAT_TIMER.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	SS$_NORMAL	- Successful completion
!	LIB$_INVARG	- Invalid argument.  Either "code" or "handle"
!			  is invalid.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    BUILTIN
	SUBM,
	NULLPARAMETER;

    LOCAL
	STATUS,					! Returned status condition
	LSTORAGE,				! Will contain address of storage block
	TSTORAGE : VECTOR [N_OF_VALUES + 1],	! Gets current times/counts
	CPU_HOURS;				! Elapsed CPU time

    MAP
	LSTORAGE : REF VECTOR [N_OF_VALUES + 2];	! Local name for storage

    BIND
	PAGEFAULTS = TSTORAGE [0],
	CPUTIMX = TSTORAGE [1],
	BUFIO = TSTORAGE [2],
	DIRIO = TSTORAGE [3],
	ELAPSED_TIME = TSTORAGE [4];

    IF (NULLPARAMETER (3))			! If "handle" omitted
    THEN
	LSTORAGE = STORAGE			! Use OWN storage
    ELSE
	LSTORAGE = ..HANDLE;			! Use handle

    IF (.LSTORAGE [0] NEQU %ASCII'TIMR') THEN RETURN (LIB$_INVARG);	! Not a valid block

    STATUS = LIB$$GETJPI (TSTORAGE);		! Get values

    IF ( NOT .STATUS) THEN RETURN (.STATUS);

!+
!	Compute all values
!-
    PAGEFAULTS = .PAGEFAULTS - .LSTORAGE [1];
    CPU_HOURS = .CPUTIMX - .LSTORAGE [2];
    BUFIO = .BUFIO - .LSTORAGE [3];
    DIRIO = .DIRIO - .LSTORAGE [4];
    SUBM (2, LSTORAGE [5], ELAPSED_TIME, ELAPSED_TIME);
!+
!	Now return appropriate statistic determined by CODE
!-

    CASE ..CODE FROM 1 TO N_OF_VALUES OF
	SET

	[1] : 					! Elapsed time
	    BEGIN
	    .VALUE = .ELAPSED_TIME;		! quadword format
	    (.VALUE) + 4 = .(ELAPSED_TIME + 4);
	    END;

	[2] : 					! CPU time
	    .VALUE = .CPU_HOURS;

	[3] : 					! Buffered I/O count
	    .VALUE = .BUFIO;

	[4] : 					! Direct I/O count
	    .VALUE = .DIRIO;

	[5] : 					! Page fault count
	    .VALUE = .PAGEFAULTS;

	[OUTRANGE] :
	    RETURN (LIB$_INVARG);
	TES;

    RETURN (SS$_NORMAL);			! Exit
    END;					! End of routine LIB$STAT_TIMER


GLOBAL ROUTINE LIB$FREE_TIMER (			!
	HANDLE					!
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Frees the storage allocated by LIB$INIT_TIMER.  If the block
!	referred to by "handle" was not allocated there, an error is
!	returned.
!
! CALLING SEQUENCE:
!
!	status.wlc.v = LIB$FREE_TIMER (handle.ml)
!
!
! FORMAL PARAMETERS:
!
!	handle	- This must be the same value as returned by a previous
!		  call to LIB$INIT_TIMER.  On a successful return, "handle"
!		  is set to zero.
!
! IMPLICIT INPUTS:
!
!	It is assumed that "handle" is the same value returned by a
!	previous call to LIB$INIT_TIMER.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	SS$_NORMAL	- Successful completion
!	LIB$_INVARG	- Invalid argument.  "handle" is invalid.
!	LIB$_BADBLOADR	- "handle" is invalid.
!
! SIDE EFFECTS:
!
!	The storage allocated by LIB$INIT_TIMER is freed.
!
!--

    BEGIN

    BUILTIN
	NULLPARAMETER;

    LOCAL
	STATUS;					! Returned condition code

!+
!	Test to make sure block was
!	initialized by LIB$INIT_TIMER.
!-

    IF ((NULLPARAMETER (1)) OR (...HANDLE NEQU %ASCII'TIMR'))
    THEN
	RETURN (LIB$_INVARG);

!+
!	Now, free the storage
!-
    STATUS = LIB$FREE_VM (%REF (BLOCKSIZE), .HANDLE);

    IF ( NOT .STATUS) THEN RETURN (.STATUS);

    .HANDLE = 0;				! Reset handle
    RETURN (.STATUS);				! Must be SS$_NORMAL
    END;					! End of routine LIB$FREE_TIMER


ROUTINE LIB$$GETJPI (				!
	VALUES					!
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Calls the system services SYS$GETJPI and SYS$GETTIM and places the times
!	and counts in the block pointed to by VALUES.  The particular
!	times and counts obtained are determined by the codes placed
!	in JPIPARAMS, a block of OWN storage.  This block is never
!	altered; instead it is copied to the stack and changed there,
!	thus this routine is reentrant.
!
! FORMAL PARAMETERS:
!
!	VALUES.ml.ra	- Points to a block of N_OF_VALUES+1 longwords
!			  into which are placed the times and counts.
!			  The current time of day is placed in the
!			  last two longwords of the block.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	SS$_NORMAL	- Successful completion
!
!	Any other completion code is an error returned by SYS$GETJPI or SYS$GETTIM.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	VALUES : REF VECTOR [N_OF_VALUES + 1];

    LOCAL
	STATUS,					! Returned status from services
	EFN,					! Event flag number
	JPILIST : VECTOR [LISTSIZE];		! Temporary GETJPI argument list

    CH$MOVE (LISTSIZE*%UPVAL, JPIPARAMS, JPILIST);	! Move argument list to temporary

!+
! Place in the temporary argument list the addresses of the storage
! block locations which are to recieve the times and counts.
!-

    INCR I FROM 0 TO N_OF_VALUES - 2 DO
	BEGIN
	JPILIST [((.I)*3) + 1] = VALUES [.I];
	END;

!+
! Allocate an event flag number
!-

    STATUS = LIB$GET_EF (EFN);
    IF (NOT .STATUS) THEN RETURN .STATUS;

    STATUS = $GETJPI (EFN=.EFN, ITMLST=JPILIST); ! Get times and counts
    LIB$FREE_EF (EFN);
    IF ( NOT .STATUS) THEN RETURN (.STATUS);

    STATUS = LIB$FREE_EF (EFN);
    RETURN ($GETTIM (TIMADR=VALUES [N_OF_VALUES - 1]));	! Get elapsed time
    END;					! End of routine LIB$$GETJPI
END						!End of module

ELUDOM
