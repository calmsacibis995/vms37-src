MODULE LIB$CURRENCY (			! Get currency symbol

	IDENT = '1-006'		! File: LIBCURREN.B32 Edit: RKR1006

		    ) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY: General Purpose Library
!
! ABSTRACT:
!
!	Returns the currency symbol, as recorded in SYS$CURRENCY.
!
! ENVIRONMENT: User mode - AST reentrant
!
! AUTHOR: John Sauter, CREATION DATE: 18-OCT-1979
!
! EDIT HISTORY:
!
! 1-001 - Original.
! 1-002	- Return signals as status.  JBS 08-JAN-1980
! 1-003	- Change STR$ codes to LIB$.  JBS 22-JAN-1980
! 1-004 - Enhance to recognize additional classes of string descriptors
!	  by invoking LIB$ANALYZE_SDESC_R3 to extract length and address
!	  of 1st data byte from descriptor.
!	  Change calls from STR$COPY_DX to LIB$SCOPY_DXDX6.
!			    STR$COPY_R  to LIB$SCOPY_R_DX.
!			    STR$FREE1_DX to LIB$SFREE1_DD.
!	  Eliminate need for handler and to convert STR$ statuses to
!	  LIB$ statuses.
!	  RKR 27-MAY-1981
! 1-005 - Add special-case code to process strings that "read" like 
!	  fixed strings.  RKR 7-OCT-1981.
! 1-006 - Redirect all jsb's from LIB$ANALYZE_SDESC_R3 to
!	  LIB$ANALYZE_SDESC_R2.  Do all copying with LIB$SCOPY_R_DX6.
!	  RKR 18-NOV-1981.
!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE 
		(EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

! 
! LINKAGES
!
    REQUIRE 'RTLIN:STRLNK';	! linkage for LIB$ANALYZE_SDESC_R2

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    LIB$CURRENCY;				! Get currency symbol

!
! INCLUDE FILES:
!

LIBRARY 'RTLSTARLE';

REQUIRE 'RTLIN:RTLPSECT';

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! PSECT DEFINITIONS:
!
DECLARE_PSECTS (LIB);
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    LIB$ANALYZE_SDESC_R2 : LIB$ANALYZE_SDESC_JSB_LINK, ! Extract length
						       ! and addr of 1st
						       ! data byte from
						       ! descriptor
    LIB$SYS_TRNLOG,		! Translate a logical name
    LIB$SCOPY_R_DX6 : STRING_JSB,! Copy a string by reference
    LIB$SFREE1_DD;		! Free a dynamic string

!+
! The following are error codes used in this module
!-

EXTERNAL LITERAL
    LIB$_STRTRU;				! string truncated


GLOBAL ROUTINE LIB$CURRENCY (		! Get currency symbol

	CURRENCY_STR,		! Where to put symbol
	OUT_LEN			! Optional length of symbol

			    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine returns the system's currency symbol.  It should be
!	used before a number to indicate that the number represents 
!	money in the country the system is running in.  This routine 
!	works by translating the logical name SYS$CURRENCY.  If the 
!	translation fails, this routine returns "$", the US money 
!	symbol.  
!	If the translation succeeds the text produced is returned.  
!	Thus a system manager can define SYS$CURRENCY as a system-wide 
!	logical name to provide a default for all users, and an
!	individual user with a special need can define SYS$CURRENCY as 
!	a user logical name to override the default.
!
! CALLING SEQUENCE:
!
!	ret_status.wlc.v = LIB$CURRENCY (currency_str.wt.dx 
!					 [,out_len.ww.r])
!
!
! FORMAL PARAMETERS:
!
!	currency_str	String to receive the currency string
!	out_len		Optional length of the currency string.  
!			This is valuable if currency_str
!			is a fixed-length string, since it does not 
!			include the padding.
!
! IMPLICIT INPUTS:
!
!	System-wide (or user-defined) logical name SYS$CURRENCY
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! CONDITION CODES:
!
!	LIB$_INVSTRDES	Invalid string descriptor
!	LIB$_STRTRU	String truncated to fit into output
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    BUILTIN
	NULLPARAMETER;

    MAP
	OUT_LEN : REF VECTOR [1, WORD],
	CURRENCY_STR : REF BLOCK [8, BYTE];

    LOCAL
	TRNLOG_STATUS,			! Status from LIB$SYS_TRNLOG
	RET_STATUS,			! Return status
	LOGDES : BLOCK [8, BYTE],	! String descriptor for logical 
					! name
	NUMDES : BLOCK [8, BYTE];	! String descriptor for 
					! translated string

!+
! Initialize descriptors for logical name and translated string
!-
    LOGDES [DSC$B_CLASS] = DSC$K_CLASS_S;
    LOGDES [DSC$B_DTYPE] = DSC$K_DTYPE_T;
    LOGDES [DSC$W_LENGTH] = %CHARCOUNT ('SYS$CURRENCY');
    LOGDES [DSC$A_POINTER] = UPLIT BYTE('SYS$CURRENCY');

    NUMDES [DSC$B_CLASS] = DSC$K_CLASS_D;
    NUMDES [DSC$B_DTYPE] = DSC$K_DTYPE_T;
    NUMDES [DSC$W_LENGTH] = 0;
    NUMDES [DSC$A_POINTER] = 0;

!+
! Translate and convert the logical name SYS$CURRENCY to determine
! the currency symbol.
!-
    TRNLOG_STATUS = LIB$SYS_TRNLOG (LOGDES, 0, NUMDES);

    IF (( NOT .TRNLOG_STATUS) OR (.TRNLOG_STATUS EQL SS$_NOTRAN)) THEN
	LIB$SCOPY_R_DX6 ( 1, UPLIT ('$'), NUMDES ) ;

!+
! NUMDES is now the string to return to the caller.
!-
    RET_STATUS = LIB$SCOPY_R_DX6 (.NUMDES [DSC$W_LENGTH], 
				  .NUMDES [DSC$A_POINTER],
				  .CURRENCY_STR) ;

!+
! If second optional parameter (OUT_LEN) is present, fill it in.
!-
    IF ( NOT NULLPARAMETER (2))
    THEN
	BEGIN
	LOCAL
	    WRITTEN_LEN,
	    WRITTEN_ADDRESS;
	IF .CURRENCY_STR [DSC$B_CLASS] GTRU DSC$K_CLASS_D
	THEN		! Used generalized extraction of length

	    BEGIN
	LIB$ANALYZE_SDESC_R2 ( .CURRENCY_STR ; ! Extract # bytes written
			       WRITTEN_LEN, WRITTEN_ADDRESS) ;
	    END

	ELSE		! Extract length directly
	    WRITTEN_LEN = .CURRENCY_STR [DSC$W_LENGTH] ;

	OUT_LEN [0] = MIN (.WRITTEN_LEN, .NUMDES [DSC$W_LENGTH]) ;
	END;

    LIB$SFREE1_DD (NUMDES);

    RETURN (.RET_STATUS);
    END;			! End of routine LIB$CURRENCY

END				!End of module LIB$CURRENCY

ELUDOM
