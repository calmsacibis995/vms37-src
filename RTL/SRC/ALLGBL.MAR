.IF NDF	RTLVECTOR
	.TITLE	ALLGBL - Define all GLOBAL entry points available to users
	.IDENT	/1-145/	; File: ALLGBL.MAR Edit: SBL1145
.IFF
	.TITLE	RTLVECTOR - Define entry vectors for VMSRTL
	.IDENT	/3-000/ ; Define image identification for VMSRTL
.ENDC

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;
; FACILITY: VAX/VMS Sharable Library
;++
; ABSTRACT:
;	This module contains the vector for the sharable library.
;	 It also serves as a reference for all "real" global symbols
;	 in the runtime library.
;
;
;--
;
; VERSION: 1
;
; Revision History:
;
; 1-001	- Update version number and copyright statement.  JBS 15-NOV-78
; 1-002	- Add "_" to PSECT name.  JBS 21-DEC-78
; 1-003 - Define OTS$CVT_T_D same as FOR$CNV_IN_DEFG.  SBL 14-Feb-79
; 1-004 - Replace FOR$CNV_IN_I, FOR$CNV_IN_O, FOR$CNV_IN_L and
;	  FOR$CNV_IN_Z with OTS$CVT_TI_L, OTS$CVT_TO_L, OTS$CVT_TL_L
;	  and OTS$CVT_TZ_L.  SBL 28-Feb-1979
; 1-005 - Make necessary additions to date.  SBL 12-Mar-1979
; 1-006 - Add OTS$CVTLT.  SBL 22-Mar-79
; 1-007 - Change FOR$K_INVKEYVAL to FOR$K_INVKEYCHG.  SBL 13-Apr-79
; 1-008 - Add FOR$_INCRECTYP.  SBL 27-Apr-79
; 1-009 - Add new IO_BEG entries.  SBL 3-MAy-1979
; 1-010 - CHANGE FORTRAN ERROR NAMES TO CONFORM WITH -11.  SBL 11-MAY-1979
; 1-011 - Add FOR$DELETE.  SBL 15-May-1979
; 1-012 - Add FORUNLOCK.  SBL 17-May-1979
; 1-013 - We finally are over 32K bytes.  Change BRW to JMP.  SBL 17-May-1979
; 1-014 - Add LIB$GET_FOREIGN.  SBL 18-May-1979
; 1-015 - Add OTS$POWHJ_R3.  SBL 1-Jun-1979
; 1-016	- Change START: to RTL$START:.  JBS 19-JUN-1979
; 1-017	- Add the BASIC-PLUS-2 entry points.  JBS 19-JUN-1979
; 1-018	- Make LIB$TPARSE and its subroutines vectored.  JBS 22-JUN-1979
; 1-019 - Delete OTS$CVT_D_Tx, OTS$CVT_G_Tx, OTS$CVT_H_Tx, replace
;	  with FOR$ routines.  SBL 5-Jul-1979
; 1-020 - Add OTS$DIVCD_R3 and OTS$DIVCG_R3.  SBL 13-July-1979
; 1-021	- Remove BAS$OUT_MAT.  JBS 16-JUL-1979
; 1-022	- Change BAS$$DET_INIT to BAS$$DET_STORE.  JBS 17-JUL-1979
; 1-023 - Fix typo for FOR$READ_KU.  SBL 18-Jul-1979
; 1-024 - Add OTS$MULCD_R3 and OTS$MULCG_R3.  SBL 19-July-1979
; 1-025 - Remove BASIC stuff that's not written yet.  SBL 20-July-1979
; 1-026	- Add BAS$_ERRTRANEE and BAS$K_ERRTRANEE.  JBS 24-JUL-1979
; 1-027 - Restore the BASIC determinant, matrix multiply and
;	   matrix scalar multiply entry points: they are now coded.
;	   JBS 24-JUL-1979
; 1-028	- Change BAS$$DET_STORE to BAS$$STORE_DET.  JBS 26-JUL-1979
; 1-029	- Restore the BASIC NUM and NUM2 entry points, and clean up
;	   the BASIC stuff in general.  JBS 26-JUL-1979
; 1-030	- Change the names of MTH$FLOOR.  JBS 27-JUL-1979
; 1-031 - Add remaining COMPLEX*16 functions.  SBL 31-July-1979
; 1-032	- Add BAS$MOVE.  JBS 03-JUL-1979
; 1-033	- Set up BAS$HANDLER so that, in a sharable library, it is
;	   always referred to by its vector location.  JBS 20-AUG-1979
; 1-034	- Add some new MTH entry points.  JBS 20-AUG-1979
; 1-035	- Correct a typo in edit 034.  JBS 21-AUG-1979
; 1-036	- Provide entry vectors for the BASIC routines.  JBS 21-AUG-1979
; 1-037	- Provide entry vectors for the string routines.  JBS 22-AUG-1979
; 1-038	- Add BAS$$CB_GET.  JBS 22-AUG-1979
; 1-039 - FOR$INQUIRE is now there.  Add MTH$IIHNNT, MTH$JIHNNT.
;	  Add MTH$HMOD.  Change MTH$CDCONJG and MTH$CGCONJG to
;	  MTH$DCONJG and MTH$GCONJG.  SBL 22-Aug-1979
; 1-040	- Add BAS$CONCAT until compiler calls STR$CONCAT.  JBS 22-AUG-1979
; 1-041	- Add a few more BASIC entry points.  JBS 23-AUG-1979
; 1-042	- Add BAS$$SCALE_R1.  JBS 23-AUG-1979
; 1-043	- Add MTH$TAN_R4, BAS$$FORMAT_INT and BAS$$CLOSE_ALL.
;	   JBS 24-AUG-1979
; 1-044	- Add MTH$DTAN_R7 and STR$COPY_R_R8.  JBS 24-AUG-1979
; 1-045	- Add BAS$CMPD_APP and BAS$CMPF_APP.  JBS 24-AUG-1979
; 1-046	- Mark the entry mask explicitly for BAS$HANDLER, to avoid a bug
;	   in BLISS-32.  JBS 28-AUG-1979
; 1-047	- Omit the error message BAS$_BASPLUTWO.  JBS 29-AUG-1979
; 1-048	- Vector BAS$EDIT and BAS$TRM, don't vector BAS$INIT_C_GSB
;	   and BAS$XLATE, and add BAS$RUN_INIT, unvectored.  JBS 10-SEP-1979
; 1-049	- Add BAS$CHAIN, BAS$COMPARE, BAS$FSS, BAS$INIT_IOL, BAS$MAT_INV,
;	   BAS$PEEK and BAS$SYS, all unvectored.  JBS 12-SEP-1979
; 1-050	- Add LIB$FREE_LUN and LIB$GET_LUN, unvectored.  JBS 12-SEP-1979
; 1-051	- Add FOR$LGE, FOR$LGT, FOR$LLE, FOR$LLT, MTH$GDIM, MTH$HDIM
;	   and OTS$POWCC, all unvectored.  JBS 12-SEP-1979
; 1-052	- Unvector virtual arrays and the matrix I/O element transmitters
;	   (which use them).  JBS 12-SEP-1979
; 1-053 - Add MTH$IIHINT, MTH$JIHINT (unvectored).
;	  SBL 12-Sept-1979
; 1-054	- Add a vector for BAS$$BLNK_LINE, it is used by matrix I/O.
;	   JBS 13-SEP-1979
; 1-055	- Vector BAS$PUSH_ERR and BAS$POP_ERR.  JBS 17-SEP-1979
; 1-056	- Add BAS$K_ILLEXIDEF and BAS$_ILLEXIDEF.  JBS 18-SEP-1979
; 1-057	- Leave room before the BASIC vectors by padding to a page
;	   boundry.  JBS 19-SEP-1979
; 1-058	- Change BAS$K_WROMATPAC to BAS$K_DIFUSELON.  JBS 19-SEP-1979
; 1-059 - Change FOR$_MORONEREC to FOR$_TOOMANREC.  SBL 21-Sept-1979
; 1-060 - Add MTH$DEXP_R6, MTH$GEXP_R6.  Keep old names around.
;	  SBL 21-Sept-1979
; 1-061	- Change FOR$K_ATTREANON to FOR$K_ATTACCNON, and FOR$_ATTREANON
;	   to FOR$_ATTACCNON.  JBS 24-SEP-1979
; 1-062	- Remove reference to MTH$GEXP_R7, it is not vectored.
;	   JBS 24-SEP-1979
; 1-063 - Add MTH$HSQRT, MTH$HEXP, MTH$HSIN, MTH$HCOS - non-vectored.
;	  Add MTH$SQRT_R3 vectored.  OTS$POWHH non-vectored.  SBL 27-Sept-1979
; 1-064 - Add MTH$HLOG, MTH$HSINH, MTH$HCOSH non-vectored.  SBL 1-Oct-1979
; 1-065 - Add new register numbers for MTH$ACOS, MTH$DACOS, MTH$GACOS,
;	  MTH$ASIN, MTH$DASIN, MTH$GASIN.  SBL for RBG.  1-Oct-1979
; 1-066	- Add BAS$K_WROMATPAC.  JBS 02-OCT-1979
; 1-067	- Add BAS$K_RECATTNOT.  JBS 03-OCT-1979
; 1-068 - Fix typo to make OTS$POWHH OTS$POWHH_R3.  SBL 4-Oct-1979
; 1-069 - Put in conditional code to warn if LIB$TPARSE moves.
;	  SBL 10-Oct-1979
; 1-070	- Remove edit 1-046, since the BLISS compiler is now fixed.
;	   JBS 17-OCT-1979
; 1-071	- Add BAS$_STRTOOLON and BAS$K_STRTOOLON.  JBS 18-OCT-1979
; 1-072 - Add COBOL routines contribution.  RKR 19-OCT-1979
; 1-073 - Add NOVECT component names in COBOL world.
;	  Add LIBASCTIM, LIBFAO, LIBFAOL, LIBFAOL, LIBGETMSG and
;	  LIBTRNLOG  (Dynamic string returning jackets)
;	  RKR 19-OCT-1979
; 1-074	- Add LIBCURREN, LIBDIGITS and LIBRADIXP, all unvectored.
;	   JBS 19-OCT-1979
; 1-075 - Remove COB$$ modules that snuck in.  RKR 19-OCT-79
; 1-076 - Fix typo from last change.  RKR 19-OCT-79
; 1-077	- Make sure the data modules are in the library.  JBS 23-OCT-1979
; 1-078	- Add LIB$STAT_VM and LIB$SHOW_VM.  JBS 28-OCT-1979
; 1-079	- Track changes to COBOL error messages.  JBS 30-OCT-1979
; 1-080 - Add COBSETSWI.  RKR 30-OCT-1979
; 1-081 - Add MTH$HACOS, MTH$HASIN, MTH$HATAN, MTH$HTAN, MTH$HTANH.
;	  SBL 1-Nov-1979
; 1-082 - Add a NOVECT for new entry point in COB$LINAGE.
;	  RKR 1-NOV-1979
; 1-083	- Add BW's new STR routines, all NOVECT for now.  JBS 02-NOV-1979
; 1-084	- Add STR$DUPL_CHAR.  JBS 07-NOV-1979
; 1-085	- Add STR$TRIM.  JBS 07-NOV-1979
; 1-086	- Remove BAS$COMPARE.  JBS 08-NOV-1979
; 1-087	- Replace vectored BAS$ string routines with vectored STR$ routines.
;	   JBS 08-NOV-1979
; 1-088	- Add some missing BAS$ entry points.  JBS 08-NOV-1979
; 1-089 - Change COB$_REWDUPALT to COB$_REWDISDUP.
;	  RKR 11-NOV-1979
; 1-090	- Add LIBRUNPRO and LIBDOCOM, both unvectored.  JBS 26-NOV-1979
; 1-091	- Change BAS$MOVE_BEG to MOVE_TO and MOVE_FROM.  JBS 03-DEC-1979
; 1-092	- Add LIBCOMMON, unvectored.  JBS 03-DEC-1979
; 1-093 - Add LIBTRAA2E and LIBTRAE2A. (unvectored) RKR 04-DEC-1979
; 1-094 - Add FOR$$FP_MATCH (vectored).  SBL 5-DEC-1979
; 1-095 - Add LIBINSQHI, LIBINSQTI, LIBREMQHI AND LIBREMQTI. REJ 05-Dec-79
; 1-096 - Add LIB$ASN_WTH_MBX and LIB$SIM_TRAP.  SBL 6-Dec-1979
; 1-097	- Add new STR$ entry points.  JBS 20-DEC-1979
; 1-098 - Add LIB$EMULATE, LIB$ESTEMU.  Delete LIB$ARG_COUNT and
;	  LIB$_NULL_ARG.   Also add new LIB messages.  SBL 22-Jan-1980
; 1-099 - Add BAS$WAIT as a vectored entry point.  SBL 29-Sep-1980
; 1-100 - Add FOR$READ_SN, FOR$WRITE_SN as vectored entries.  Also add new
;	  error codes for NAMELIST.  SBL 11-Nov-1980
; 1-101 - Use mask of FOR$$IO_BEG in FOR$READ_SN, FOR$WRITE_SN.  SBL 19-Nov-1980
; 1-102 - Remove translate tables from vector, since by accident they
;	  were never shared anyway.  Correct typo where COB$ACC_DATE 
;	  appears twice instead of COB$ACC_DAY being defined.  Add DATA
;	  as an option to MAC if we ever decide to vector data.
;	  SBL 29-Jan-1981
; 1-103 - Add FOR$IO_X_SB, FOR$IO_X_NL and FOR$IO_X_ML as vectored entry
;	  points.  JAW 30-Jan-1981.
; 1-104 - Add LIBCVTPTZ and LIBCVTTPZ.  RKR 10-FEB-1981
; 1-105 - Add LIBFILSCA and COBDEEDIT.	RKR 10-FEB-1981
; 1-106 - Add OTS$CVT_L_TB and OTS$CVT_TB_L, vectored.  SBL 20-Feb-1981
; 1-107 - Add degree entry points for trig functions.  SBL 25-Mar-1980
; 1-108 - Correct typo that had COB$AB_SPANC as COB$AB_SPANCS.  SBL 24-Apr-1981
; 1-109 - Remove FOR$IO_X_ML (never released) and replace with FOR$IO_X_SE.
;	- Add OTS$CVT_T_F.  JAW 11-May-1981
; 1-110 - Make LIB$LUN ( entry points LIB$GET_LUN and LIB$FREE_LUN)
;	  part of the shared (vectored) RTL.
;	  Make LIB$EF (entry points LIB$GET_EF, LIB$FREE_EF and
;	  LIB$RESERVE_EF) part of the shared (vectored) RTL.
;	  RKR 20-MAY-1981
; 1-111 - Add MTH$IMVBITS, MTH$JMVBITS, MTH$IIBITS, MTH$JIBITS,
;	  MTH$IISHFTC, MTH$JISHFTC, MTH$BITEST, MTH$BJTEST, MTH$IIBSET,
;	  MTH$JIBSET, MTH$IIBCLR, MTH$JIBCLR, all nonshared.  JAW
;	  21-May-1981
; 1-112 - Move the twelve entry points added in edit 1-111 to the FOR$
;	  facility.  JAW 06-Jun-1981
; 1-113 - Add LIB$ANALYZE_SDESC, LIB$ANALYZE_SDESC_R3, and
;	  STR$$CHECK_STATUS_R2.  RKR 02-JUL-1981
; 1-114 - Fix typo in previous edit.  RKR 02-JUL-1981
; 1-115 - Add COB$DBEXCEPTION.  LEB 30-JUL-1981
; 1-116 - Add COB$AB_SPANC2 and COB$ACCEPT_EOF.  LEB 11-AUG-1981
; 1-117 - Add MTH$ATANH, MTH$DATANH, MTH$GATANH, MTH$HATANH.  DGP 14-Aug-1981
; 1-118 - Also add MTH$ALOG2, MTH$DLOG2, MTH$GLOG2, MTH$HLOG2.  DGP 14-AUG-1981
; 1-119 - Took out COB$ACCEPT_EOF.  LEB 24-AUG-1981
; 1-120 - Make G and H versions of LOG and ATAN routines shared because they
;	  reference tables in other shared routines.  SBL 24-Aug-1981
; 1-121 - Add MTH$SINCOS,  MTH$SINCOS_R5,  MTH$SINCOSD,  MTH$SINCOSD_R5,
;	      MTH$DSINCOS, MTH$DSINCOS_R7, MTH$DSINCOSD, MTH$DSINCOSD_R7
;	      MTH$GSINCOS, MTH$GSINCOS_R7, MTH$GSINCOSD, MTH$GSINCOSD_R7
;	      MTH$HSINCOS, MTH$HSINCOS_R7, MTH$HSINCOSD, MTH$HSINCOSD_R7
;	  and MTH$AL_4_OV_PI.   RKR 25-AUG-1981.
; 1-122 - Fix typo from last edit. RKR 25-AUG-1981.
; 1-123 - Add LIB$CVT_DX_DX as NOVECT.  FM 26-AUG-81.
; 1-124 - Add STR$$PACK_ARITH as NOVECT.  Also add entry point STR$DIVIDE
;	  to module STR$ARITH.  Fixed typo.  LB 27-AUG-81.
; 1-125 - Make entry points MTH$ALOG2 and MTH$DLOG2 shared since the modules
;	  they are contained in are shared and vectored.  LB 28-AUG-81
; 1-126 - Add FOR$INIT_UNDER and FOR$UNDERFLOW_HANDLER.  JAW 29-Aug-1981
; 1-127 - Add LIB$DECODE_FAULT, LIB$ENCRYPT, LIB$DECRYPT, LIB$EDIV,
;	  LIB$EMUL.  SBL 29-Aug-1981
; 1-128 - Add MTH$TAN_R5, MTH$TAND_R5, MTH$HTAN_R7 and MTH$HTAND_R7 
;	  RNH 31-Aug-1981
; 1-129 - Add as SYM's, LIB$_WRONUMARG and OTS$_WRONUMARG. 
;	  RKR 4-SEP-1981
; 1-130 - Delete LIB$ENCRYPT, LIB$DECRYPT.  Add OTS$POWLULU nonvectored.
;	  SBL 10-Sep-1981
; 1-131 - Make MTH$GSINCOS, MTH$GSINCOS_R7, MTH$GSINCOSD, MTH$GSINCOSD_R7, MTH$HSINCOS, MTH$HSINCOS_R7, 
;	  MTH$HSINCOSD, MTH$HSINCOSD_R7, MTH$GATAN, MTH$GATAN_R7, MTH$GATAND, MTH$GATAND_R8, MTH$HATAN, 
;	  MTH$HATAN_R8, MTH$HATAND, MTH$HATAND_R8, MTH$HATAN2, MTH$HATAND2, MTH$GATAN2, MTH$GATAND2, 
;	  MTH$GLOG, MTH$GLOG_R8, MTH$HLOG, and MTH$HLOG_R8 non-shared.
;       - Add vectored data entries MTH$AL_4_OV_PI_V, MTH$AB_ALOG_V, 
;	  MTH$AB_ATAN_V.  RNH 29-Sep-81
; 1-132 - Changed MTH$xATAND2 entries to MTH$xATAN2D entries to conform with original
;	  specification.  RNH 05-Oct-81
; 1-133 - Add STRANASTR.B32  RKR 22-OCT-1981
; 1-134 - ADD LIB$CALLG, LIB$MOVC3, LIB$MOVC5.  SBL 28-OCT-1981
; 1-135 - Add image ident for VMSRTL as different from module ident for ALLGBL.
;	  Change LIB$ANALYZE_SDESC_R3/STR$ANALYZE_SDESC_R2 to R2 and R1
;	  respectively for RKR.   SBL 23-Nov-1981
; 1-136 - Change entry point names from MTH$xATAN2D to MTH$xATAND2 in order
;	  to agree with PL/1.  RNH 18-Dec-81
; 1-137 - Add LIB$AB_ASC_EBC_REV and LIB$AB_EBC_ASC_REV (non-shared).
;	  RKR 23-DEC-1981
; 1-138 - Add LIB$ATTACH, LIB$SPAWN (shared).  SBL 28-Dec-1981
; 1-139 - Add LIB$$PACK_ARITH and deleted STR$$PACK_ARITH.  LEB 30-Dec-1981
; 1-140 - Add LIB$GET_OPCODE (shared).  SBL 6-Jan-1982
; 1-141 - Add FOR$RAB (shared).  SBL 13-Jan-1982
; 1-142 - Add as COBOL SYM's, COB$_LSTHNDUSE,COB$_LSTHNDLDB,COB$_EXPDBOVER,
;	  COB$_KEYNOTMAT,COB$_UNLUNOFIL and COB$_UNLNO_CUR.  LB 25-JAN-1982.
; 1-143 - Add as COBOL SYM, COB$_RECNOTLOC.  LB 2-FEB-1982
; 1-144 - Make LIB$FILE_SCAN and LIB$FIND_FILE shared.  DGP 02-Feb-1982
; 1-145 - Add OTS$$CVT_x_T_R8 entry points for code which is already in
;	  VMSRTL.  This makes it accessible to language-specific separate
;	  shareable images.  Change condition name COB$_GOTNO_ALT to
;	  COB$_GOTO_ALT.  SBL 5-Apr-1982
;--

;+
; Define MAC to either generate .EXTRN declarations or entry vector
; depending on whether the symbol RTLVECTOR is defined or not.
;
; To assemble RTLVECTOR, use:
;
;	@SYSBLDCOM$:FASM RTL RTLVECTOR N
;
;
;
; call:	MAC	VEC_TYPE, VEC_AREA, SYMBOL, MASK
;
; where	VEC_TYPE is:	CALL	- call entry point transfer vector
;			JSB	- JSB entry point transfer vector
;			NOVECT	- do not have a transfer vector
;			SYM	- this is a symbol, not an entry point
;			DATA	- this is data, kept in the vector
;			FUTURE	- this is a proposed entry point, not yet
;				implemented, but space reserved.
;	VEC_AREA is:	FOR	- FORTRAN entry points
;			LIB	- library entry points
;			MTH	- Math library entry points
;			STR	- String library entry points
;			OTS	- Language independent entry points
;			BAS	- BASIC-PLUS-2 entry points
;			COB	- COBOL
;	SYMBOL is:	any entry point symbol
;	MASK is:	optional entry mask if not same as SYMBOL
;
;	Each entry vector is 8 bytes long and contains a 2 byte mask and
;	a 6 byte JMP instruction (for CALLs) or
;	a 6 byte JMP plus 2 filler bytes for JSBs.
;
;	ALLOCATION OF VECTOR SPACE:

;	Vector space is allocated primarily by facility, with each
;	facility packed adjacent to the next.
;	In future releases, the facilities will be come more mixed up.
;	However, this is not problem, since the RTL will be one
;	shared image section now and forever, since it is attached
;	to the end of the user program and is therefore able
;	to grow indefinitely in future releases without requiring
;	re-linking of user programs because of  help from
;	its friends (the LINKER and image activator).
;
;	PSECT names are of form _fac$CODE or _fac$DATA.
;-


.MACRO	MAC	VEC_TYPE, VEC_AREA, SYMBOL, MASK
.IF NDF	RTLVECTOR			; Just generate .EXTRN references?
    .IF DIF VEC_TYPE, FUTURE		; except if future entry point
	.EXTRN	SYMBOL			; yes
    .ENDC
.IFF					; or generate entry VECTOR?
    .IF IDN	VEC_TYPE, JSB
	.TRANSFER	SYMBOL
	JMP	SYMBOL			; branch to JSB routine
	.BYTE	0,0			; fill out to 8 bytes
    .ENDC

    .IF IDN	VEC_TYPE, CALL
	.TRANSFER	SYMBOL
      .IF B MASK
	.MASK	SYMBOL
      .IFF
	.MASK	MASK			; get mask from other name
      .ENDC
	JMP	SYMBOL+2		; branch to CALL+2 routine
    .ENDC

    .IF IDN	VEC_TYPE, FUTURE	; Reserve space for future vector?
	.BYTE	0,0,0,0,0,0,0,0		; leave 8 bytes
    .ENDC

;    .IF IDN	VEC_TYPE, SYM		; Just a symbol?
;	.EXTRN	SYMBOL			; Yes, make sure it is defined.
;    .ENDC

    .IF IDN	VEC_TYPE, DATA
	.TRANSFER	SYMBOL'_V	; Construct for accessing shared data
	.ADDRESS	SYMBOL-.	; from non-shared routine.  Has format:
	.BLKL		1		;    .TRANSFER	table_name_V
					;    .ADDRESS	table_name-.
	.ENDC				;    .BLKL	1

.ENDC
.ENDM

	.LIST	MEB			; generate listing for code generated


.IF NDF	RTLVECTOR
	.ENTRY	RTL$START, ^M<>
	RET
.IFF					; RTLVECTOR
	.PSECT	_RTL$$VECTOR PIC,USR,CON,REL,LCL,SHR,EXE,RD,NOWRT,PAGE
RTL$START:					; always define RTL$START for .END
.ENDC




;+
; FORTRAN compatibility routines - do not VECTOR
;-


; MODULE:COM$ASSIGN
	MAC	NOVECT	COM	ASSIGN

; MODULE:COM$CLOSE
	MAC	NOVECT	COM	CLOSE

; MODULE:COM$ERRSET
	MAC	NOVECT	COM	ERRSET

; MODULE:COM$ERRTST
	MAC	NOVECT	COM	ERRTST

; MODULE:COM$FDBSET
	MAC	NOVECT	COM	FDBSET

; MODULE:COM$IRAD50
	MAC	NOVECT	COM	IRAD50

; MODULE:COM$R50ASC
	MAC	NOVECT	COM	R50ASC

; MODULE:COM$RAD50
	MAC	NOVECT	COM	RAD50

; MODULE:COM$USEREX
	MAC	NOVECT	COM	USEREX

;+
; FORTRAN entry points
; Put most frequently used FORTRAN entry points together first,
; ie. I/O and OPEN and CLOSE.
;-

; MODULE:FOR$CLOSE
	MAC	CALL	FOR	FOR$CLOSE
; MODULE:FOR$ENTRY
	MAC	CALL	FOR	FOR$DECODE_MF	FOR$$IO_BEG

	MAC	CALL	FOR	FOR$DECODE_MO	FOR$$IO_BEG
	MAC	CALL	FOR	FOR$ENCODE_MF	FOR$$IO_BEG
	MAC	CALL	FOR	FOR$ENCODE_MO	FOR$$IO_BEG

	MAC	CALL	FOR	FOR$READ_KF	FOR$$IO_BEG
	MAC	CALL	FOR	FOR$READ_KO	FOR$$IO_BEG

	MAC	CALL	FOR	FOR$READ_DF	FOR$$IO_BEG
	MAC	CALL	FOR	FOR$READ_DO	FOR$$IO_BEG
	MAC	CALL	FOR	FOR$READ_DU	FOR$$IO_BEG
	MAC	CALL	FOR	FOR$READ_SF	FOR$$IO_BEG
	MAC	CALL	FOR	FOR$READ_SL	FOR$$IO_BEG

	MAC	CALL	FOR	FOR$READ_SO	FOR$$IO_BEG
	MAC	CALL	FOR	FOR$READ_SU	FOR$$IO_BEG
	MAC	CALL	FOR	FOR$WRITE_DF	FOR$$IO_BEG
	MAC	CALL	FOR	FOR$WRITE_DO	FOR$$IO_BEG

	MAC	CALL	FOR	FOR$WRITE_DU	FOR$$IO_BEG
	MAC	CALL	FOR	FOR$WRITE_SF	FOR$$IO_BEG
	MAC	CALL	FOR	FOR$WRITE_SL	FOR$$IO_BEG
	MAC	CALL	FOR	FOR$WRITE_SO	FOR$$IO_BEG

	MAC	CALL	FOR	FOR$WRITE_SU	FOR$$IO_BEG

; MODULE:FOR$IO_END
	MAC	CALL	FOR	FOR$IO_END

; MODULE:FOR$IO_ELEM

	MAC	CALL	FOR	FOR$IO_F_R
	MAC	CALL	FOR	FOR$IO_F_V
	MAC	CALL	FOR	FOR$IO_D_R
	MAC	CALL	FOR	FOR$IO_D_V

	MAC	CALL	FOR	FOR$IO_L_R
	MAC	CALL	FOR	FOR$IO_L_V
	MAC	CALL	FOR	FOR$IO_B_R
	MAC	CALL	FOR	FOR$IO_B_V

	MAC	CALL	FOR	FOR$IO_T_DS

	MAC	CALL	FOR	FOR$IO_W_R
	MAC	CALL	FOR	FOR$IO_W_V
	MAC	CALL	FOR	FOR$IO_G_R
	MAC	CALL	FOR	FOR$IO_G_V
	MAC	CALL	FOR	FOR$IO_H_R
	MAC	CALL	FOR	FOR$IO_H_V

	MAC	CALL	FOR	FOR$IO_DC_R
	MAC	CALL	FOR	FOR$IO_GC_R
;				by value calls at end
	MAC	CALL	FOR	FOR$IO_T_V_DS
	MAC	CALL	FOR	FOR$IO_FC_R
	MAC	CALL	FOR	FOR$IO_FC_V
	MAC	CALL	FOR	FOR$IO_LU_R
	MAC	CALL	FOR	FOR$IO_LU_V
	MAC	CALL	FOR	FOR$IO_WU_R
	MAC	CALL	FOR	FOR$IO_WU_V
	MAC	CALL	FOR	FOR$IO_X_DA

; MODULE:FOR$OPEN
	MAC	CALL	FOR	FOR$OPEN

;+
; Rest of FOR$ entries alphabetical order
;-

; MODULE:FOR$BACKSPACE
	MAC	CALL	FOR	FOR$BACKSPACE

; MODULE:FOR$BITOPS
	MAC	NOVECT	FOR	FOR$IMVBITS
	MAC	NOVECT	FOR	FOR$JMVBITS
	MAC	NOVECT	FOR	FOR$IIBITS
	MAC	NOVECT	FOR	FOR$JIBITS
	MAC	NOVECT	FOR	FOR$IISHFTC
	MAC	NOVECT	FOR	FOR$JISHFTC
	MAC	NOVECT	FOR	FOR$BITEST
	MAC	NOVECT	FOR	FOR$BJTEST
	MAC	NOVECT	FOR	FOR$IIBSET
	MAC	NOVECT	FOR	FOR$JIBSET
	MAC	NOVECT	FOR	FOR$IIBCLR
	MAC	NOVECT	FOR	FOR$JIBCLR

; MODULE:OTS$CVTLT		; New entry points at end
	MAC	CALL	FOR	FOR$CNV_OUT_I
	MAC	CALL	FOR	FOR$CNV_OUT_L
	MAC	CALL	FOR	FOR$CNV_OUT_O
	MAC	CALL	FOR	FOR$CNV_OUT_Z

; MODULE FOR$CVTRT - replaces FOR$CNV_OUT
	.TRANSFER	FOR$CNV_OUT_D
	MAC	CALL	FOR	FOR$CVT_D_TD
	.TRANSFER	FOR$CNV_OUT_E
	MAC	CALL	FOR	FOR$CVT_D_TE
	.TRANSFER	FOR$CNV_OUT_F
	MAC	CALL	FOR	FOR$CVT_D_TF
	.TRANSFER	FOR$CNV_OUT_G
	MAC	CALL	FOR	FOR$CVT_D_TG

; MODULE:FOR$DATE
	MAC	NOVECT	FOR	FOR$DATE

; MODULE:FOR$DATE_T_DS
	MAC	NOVECT	FOR	FOR$DATE_T_DS

; MODULE:FOR$DEFINE_FILE
	MAC	CALL	FOR	FOR$DEF_FILE
	MAC	CALL	FOR	FOR$DEF_FILE_W

; MOUDLE FOR$ENDFILE
	MAC	CALL	FOR	FOR$ENDFILE

; MODULE:FOR$ENODEF
	MAC	SYM	FOR	FOR$K_ADJARRDIM
	MAC	SYM	FOR	FOR$K_ARRREFOUT
	MAC	SYM	FOR	FOR$K_ATTACCNON
	MAC	SYM	FOR	FOR$K_BACERR

	MAC	SYM	FOR	FOR$K_CLOERR
	MAC	SYM	FOR	FOR$K_DECSTROVE
	MAC	SYM	FOR	FOR$K_DELERR
	MAC	SYM	FOR	FOR$K_DUPFILSPE
	MAC	SYM	FOR	FOR$K_ENDDURREA
	MAC	SYM	FOR	FOR$K_ENDFILERR
	MAC	SYM	FOR	FOR$K_ERRDURREA
	MAC	SYM	FOR	FOR$K_ERRDURWRI
	MAC	SYM	FOR	FOR$K_FAC_NO

	MAC	SYM	FOR	FOR$K_FILNAMSPE
	MAC	SYM	FOR	FOR$K_FILNOTFOU
	MAC	SYM	FOR	FOR$K_FINERR
	MAC	SYM	FOR	FOR$K_FLOOVE
	MAC	SYM	FOR	FOR$K_FLOUND

	MAC	SYM	FOR	FOR$K_FLOZERDIV
	MAC	SYM	FOR	FOR$K_FORVARMIS
	MAC	SYM	FOR	FOR$K_INCFILORG
	MAC	SYM	FOR	FOR$K_INCKEYCHG
	MAC	SYM	FOR	FOR$K_INCOPECLO
	MAC	SYM	FOR	FOR$K_INCRECLEN
	MAC	SYM	FOR	FOR$K_INCRECTYP
	MAC	SYM	FOR	FOR$K_INFFORLOO
	MAC	SYM	FOR	FOR$K_INPCONERR
	MAC	SYM	FOR	FOR$K_INPRECTOO
	MAC	SYM	FOR	FOR$K_INPSTAREQ
	MAC	SYM	FOR	FOR$K_INSVIRMEM
	MAC	SYM	FOR	FOR$K_INTOVF
	MAC	SYM	FOR	FOR$K_INTZERDIV
	MAC	SYM	FOR	FOR$K_INVARGFOR
	MAC	SYM	FOR	FOR$K_INVKEYSPE
	MAC	SYM	FOR	FOR$K_INVLOGUNI
	MAC	SYM	FOR	FOR$K_INVREFVAR
	MAC	SYM	FOR	FOR$K_KEYVALERR
	MAC	SYM	FOR	FOR$K_LISIO_SYN
	MAC	SYM	FOR	FOR$K_MAXLUNERR
	MAC	SYM	FOR	FOR$K_MAX_ERR
	MAC	SYM	FOR	FOR$K_MINLUNERR
	MAC	SYM	FOR	FOR$K_MIXFILACC
	MAC	SYM	FOR	FOR$K_NOTFORSPE
	MAC	SYM	FOR	FOR$K_NO_CURREC
	MAC	SYM	FOR	FOR$K_NO_SUCDEV
	MAC	SYM	FOR	FOR$K_OPEDEFREQ
	MAC	SYM	FOR	FOR$K_OPEFAI

	MAC	SYM	FOR	FOR$K_OUTCONERR
	MAC	SYM	FOR	FOR$K_OUTSTAOVE
	MAC	SYM	FOR	FOR$K_RECIO_OPE
	MAC	SYM	FOR	FOR$K_RECNUMOUT
	MAC	SYM	FOR	FOR$K_REWERR
	MAC	SYM	FOR	FOR$K_REWRITERR
	MAC	SYM	FOR	FOR$K_SEGRECFOR
	MAC	SYM	FOR	FOR$K_SPERECLOC
	MAC	SYM	FOR	FOR$K_SYNERRFOR
	MAC	SYM	FOR	FOR$K_SYNERRNAM
	MAC	SYM	FOR	FOR$K_TOOMANREC
	MAC	SYM	FOR	FOR$K_TOOMANVAL
	MAC	SYM	FOR	FOR$K_UNIALROPE
	MAC	SYM	FOR	FOR$K_UNLERR
	MAC	SYM	FOR	FOR$K_VFEVALERR
	MAC	SYM	FOR	FOR$K_WRIREAFIL

; MODULE:FOR$ERRSNS		; See also end where FOR$$ERRSNS_SAV declared
	MAC	CALL	FOR	FOR$ERRSNS
	MAC	CALL	FOR	FOR$ERRSNS_W

; MODULE:FOR$EXIT
	MAC	CALL	FOR	FOR$EXIT
	MAC	CALL	FOR	FOR$EXIT_W

; MODULE:OTS$CVTTR
					; This module is a replacement
					; for FOR$CNVIR.  The old
					; FOR$ entry point still exists.
					; See later where other OTS$
					; entry points are named.

	.TRANSFER	FOR$CNV_IN_DEFG	; Same as next symbol.
	MAC	CALL	OTS	OTS$CVT_T_D

; MODULE:FOR$FIND
	MAC	CALL	FOR	FOR$FIND

; MODULE:OTS$CVT_TI_L - replaces in part FOR$CNVII
	.TRANSFER	FOR$CNV_IN_I
	MAC	CALL	OTS	OTS$CVT_TI_L

; MODULE:OTS$CVT_TL_L - replaces in part FOR$CNVII
	.TRANSFER	FOR$CNV_IN_L
	MAC	CALL	OTS	OTS$CVT_TL_L

; MODULE: OTS$CVT_TO_L - replaces in part FOR$CNVII
	.TRANSFER	FOR$CNV_IN_O
	MAC	CALL	OTS	OTS$CVT_TO_L
	.TRANSFER	FOR$CNV_IN_Z
	MAC	CALL	OTS	OTS$CVT_TZ_L

; MODULE:FOR$IDATE
	MAC	NOVECT	FOR	FOR$IDATE

; MODULE:FOR$INI_DES
	MAC	JSB	FOR	FOR$INI_DES1_R2
	MAC	JSB	FOR	FOR$INI_DES2_R3
	MAC	JSB	FOR	FOR$INI_DESC_R6

; MODULE:FOR$JDATE
	MAC	NOVECT	FOR	FOR$JDATE

; MODULE:FOR$MSGDEF
	MAC	SYM	FOR	FOR$_ADJARRDIM
	MAC	SYM	FOR	FOR$_ATTACCNON
	MAC	SYM	FOR	FOR$_BACERR
	MAC	SYM	FOR	FOR$_CLOERR

	MAC	SYM	FOR	FOR$_DELERR
	MAC	SYM	FOR	FOR$_DUPFILSPE
	MAC	SYM	FOR	FOR$_ENDDURREA
	MAC	SYM	FOR	FOR$_ENDFILERR
	MAC	SYM	FOR	FOR$_ERRDURREA

	MAC	SYM	FOR	FOR$_ERRDURWRI
	MAC	SYM	FOR	FOR$_FILNAMSPE
	MAC	SYM	FOR	FOR$_FILNOTFOU
	MAC	SYM	FOR	FOR$_FINERR
	MAC	SYM	FOR	FOR$_FORVARMIS

	MAC	SYM	FOR	FOR$_INCFILORG
	MAC	SYM	FOR	FOR$_INCKEYCHG
	MAC	SYM	FOR	FOR$_INCOPECLO
	MAC	SYM	FOR	FOR$_INCRECLEN
	MAC	SYM	FOR	FOR$_INCRECTYP
	MAC	SYM	FOR	FOR$_INFFORLOO
	MAC	SYM	FOR	FOR$_INPCONERR

	MAC	SYM	FOR	FOR$_INPRECTOO
	MAC	SYM	FOR	FOR$_INPSTAREQ
	MAC	SYM	FOR	FOR$_INSVIRMEM
	MAC	SYM	FOR	FOR$_INVARGFOR
	MAC	SYM	FOR	FOR$_INVKEYSPE

	MAC	SYM	FOR	FOR$_INVLOGUNI
	MAC	SYM	FOR	FOR$_INVREFVAR
	MAC	SYM	FOR	FOR$_KEYVALERR
	MAC	SYM	FOR	FOR$_LISIO_SYN
	MAC	SYM	FOR	FOR$_MIXFILACC

	MAC	SYM	FOR	FOR$_NOTFORSPE
	MAC	SYM	FOR	FOR$_NO_CURREC
	MAC	SYM	FOR	FOR$_NO_SUCDEV
	MAC	SYM	FOR	FOR$_OPEDEFREQ

	MAC	SYM	FOR	FOR$_OPEFAI
	MAC	SYM	FOR	FOR$_OUTCONERR
	MAC	SYM	FOR	FOR$_OUTSTAOVE
	MAC	SYM	FOR	FOR$_RECIO_OPE

	MAC	SYM	FOR	FOR$_RECNUMOUT
	MAC	SYM	FOR	FOR$_REWERR
	MAC	SYM	FOR	FOR$_REWRITERR
	MAC	SYM	FOR	FOR$_SEGRECFOR

	MAC	SYM	FOR	FOR$_SPERECLOC
	MAC	SYM	FOR	FOR$_SYNERRFOR
	MAC	SYM	FOR	FOR$_SYNERRNAM
	MAC	SYM	FOR	FOR$_TOOMANREC
	MAC	SYM	FOR	FOR$_TOOMANVAL
	MAC	SYM	FOR	FOR$_UNIALROPE
	MAC	SYM	FOR	FOR$_UNLERR
	MAC	SYM	FOR	FOR$_VFEVALERR
	MAC	SYM	FOR	FOR$_WRIREAFIL

; MODULE:FOR$PAUSE
	MAC	CALL	FOR	FOR$PAUSE

; MODULE:FOR$RANDOM
	MAC	NOVECT	FOR	FOR$IRAN
	MAC	NOVECT	FOR	FOR$RANDU
	MAC	NOVECT	FOR	FOR$RANDU_W

; MODULE:FOR$REWIND
	MAC	CALL	FOR	FOR$REWIND

; MODULE:FOR$SECNDS
	MAC	CALL	FOR	FOR$SECNDS

; MODULE:FOR$STOP
	MAC	CALL	FOR	FOR$STOP

; MODULE:FOR$TIME
	MAC	NOVECT	FOR	FOR$TIME

; MODULE:FOR$TIME_T_DS
	MAC	NOVECT	FOR	FOR$TIME_T_DS


;+
; Mathematical library entry points
; Include the frequently used ones first (ones with JSBs)
;-

; MODULE:MTH$ACOS (Degree entries further on)
	MAC	CALL	MTH	MTH$ACOS
	.TRANSFER	MTH$ACOS_R5		; Release 1 name
	MAC	JSB	MTH	MTH$ACOS_R4

; MODULE:MTH$ALOG
	MAC	CALL	MTH	MTH$ALOG
	MAC	CALL	MTH	MTH$ALOG10
	MAC	JSB	MTH	MTH$ALOG10_R5
	MAC	JSB	MTH	MTH$ALOG_R5

; MODULE:MTH$ASIN
	MAC	CALL	MTH	MTH$ASIN
	.TRANSFER	MTH$ASIN_R5		; Release 1 name
	MAC	JSB	MTH	MTH$ASIN_R4

; MODULE:MTH$ATAN
	MAC	CALL	MTH	MTH$ATAN
	MAC	CALL	MTH	MTH$ATAN2
	MAC	JSB	MTH	MTH$ATAN_R4

; MODULE:MTH$DACOS
	MAC	CALL	MTH	MTH$DACOS
	.TRANSFER	MTH$DACOS_R9		; Release 1 name
	MAC	JSB	MTH	MTH$DACOS_R7

; MODULE:MTH$DASIN
	MAC	CALL	MTH	MTH$DASIN
	.TRANSFER	MTH$DASIN_R9		; Release 1 name
	MAC	JSB	MTH	MTH$DASIN_R7

; MODULE:MTH$DATAN
	MAC	CALL	MTH	MTH$DATAN
	MAC	CALL	MTH	MTH$DATAN2
	MAC	JSB	MTH	MTH$DATAN_R7

; MODULE:MTH$DEXP
	MAC	CALL	MTH	MTH$DEXP
	.TRANSFER	MTH$DEXP_R7		; Obsolete name
	MAC	JSB	MTH	MTH$DEXP_R6

; MODULE:MTH$DLOG
	MAC	CALL	MTH	MTH$DLOG
	MAC	CALL	MTH	MTH$DLOG10
	MAC	JSB	MTH	MTH$DLOG10_R8
	MAC	JSB	MTH	MTH$DLOG_R8

; MODULE:MTH$DSINCOS
	MAC	CALL	MTH	MTH$DCOS
	MAC	JSB	MTH	MTH$DCOS_R7
	MAC	CALL	MTH	MTH$DSIN
	MAC	JSB	MTH	MTH$DSIN_R7

; MODULE:MTH$DSQRT
	MAC	CALL	MTH	MTH$DSQRT
	MAC	JSB	MTH	MTH$DSQRT_R5

; MODULE:MTH$EXP
	MAC	CALL	MTH	MTH$EXP
	MAC	JSB	MTH	MTH$EXP_R4

; MODULE:MTH$SINCOS
	MAC	CALL	MTH	MTH$COS
	MAC	JSB	MTH	MTH$COS_R4
	MAC	CALL	MTH	MTH$SIN
	MAC	JSB	MTH	MTH$SIN_R4

; MODULE:MTH$SQRT
	MAC	CALL	MTH	MTH$SQRT
;	JSB to MTH$SQRT_R3 is with new entries.

; MODULE:MTH$SQRTR2	(obsolete module)
	MAC	JSB	MTH	MTH$SQRT_R2


;+
; Language independent support entry points
; Include them after frequently used math routines, since
; they have the power routines.
;-


; MODULE:OTS$DIVC
	MAC	CALL	OTS	OTS$DIVC

; MODULE:OTS$LINKAGE
	MAC	SYM	OTS	OTS$LINKAGE

; MODULE:OTS$MSGDEF
	MAC	SYM	OTS	OTS$_FATINTERR
	MAC	SYM	OTS	OTS$_INPCONERR
	MAC	SYM	OTS	OTS$_INTDATCOR
	MAC	SYM	OTS	OTS$_INVSTRDES
	MAC	SYM	OTS	OTS$_IO_CONCLO
	MAC	SYM	OTS	OTS$_OUTCONERR
	MAC	SYM	OTS	OTS$_USEFLORES
	MAC	SYM	OTS	OTS$_WRONUMARG

; MODULE:OTS$POWCJ
	MAC	CALL	OTS	OTS$POWCJ

; MODULE:OTS$POWDD
	MAC	CALL	OTS	OTS$POWDD
	MAC	CALL	OTS	OTS$POWDR
	MAC	CALL	OTS	OTS$POWRD

; MODULE:OTS$POWDJ
	MAC	CALL	OTS	OTS$POWDJ

; MODULE:OTS$POWII
	MAC	CALL	OTS	OTS$POWII

; MODULE:OTS$POWJJ
	MAC	CALL	OTS	OTS$POWJJ

; MODULE:OTS$POWRJ
	MAC	CALL	OTS	OTS$POWRJ

; MODULE:OTS$POWRR
	MAC	CALL	OTS	OTS$POWRR

; MODULE:OTS$SCOPY
	MAC	CALL	OTS	OTS$SCOPY_DXDX
	MAC	JSB	OTS	OTS$SCOPY_DXDX6
	MAC	CALL	OTS	OTS$SCOPY_R_DX
	MAC	JSB	OTS	OTS$SCOPY_R_DX6
	MAC	CALL	OTS	OTS$SGET1_DD
	MAC	JSB	OTS	OTS$SGET1_DD_R6
	MAC	CALL	OTS	OTS$SFREE1_DD
	MAC	JSB	OTS	OTS$SFREE1_DD6
	MAC	CALL	OTS	OTS$SFREEN_DD
	MAC	JSB	OTS	OTS$SFREEN_DD6

;+
; Now define the rest of the Math entry points
;-

; MODULE:MTH$ABS
	MAC	NOVECT	MTH	MTH$ABS
	MAC	NOVECT	MTH	MTH$DABS
	MAC	NOVECT	MTH	MTH$GABS
	MAC	NOVECT	MTH	MTH$HABS
	MAC	NOVECT	MTH	MTH$IIABS
	MAC	NOVECT	MTH	MTH$JIABS

; MODULE:MTH$AINT
	MAC	NOVECT	MTH	MTH$AINT

; MODULE:MTH$AMOD
	MAC	NOVECT	MTH	MTH$AMOD

; MODULE:MTH$ANINT
	MAC	NOVECT	MTH	MTH$ANINT

; MODULE:MTH$BITOPS
	MAC	NOVECT	MTH	MTH$IIAND
	MAC	NOVECT	MTH	MTH$IIEOR
	MAC	NOVECT	MTH	MTH$IIOR
	MAC	NOVECT	MTH	MTH$IISHFT

	MAC	NOVECT	MTH	MTH$INOT
	MAC	NOVECT	MTH	MTH$JIAND
	MAC	NOVECT	MTH	MTH$JIEOR
	MAC	NOVECT	MTH	MTH$JIOR

	MAC	NOVECT	MTH	MTH$JISHFT
	MAC	NOVECT	MTH	MTH$JNOT

; MODULE:MTH$CABS
	MAC	CALL	MTH	MTH$CABS

; MODULE:MTH$CEXP
	MAC	CALL	MTH	MTH$CEXP

; MODULE:MTH$CLOG
	MAC	CALL	MTH	MTH$CLOG

; MODULE:MTH$CONJG
	MAC	NOVECT	MTH	MTH$CONJG

; MODULE:MTH$CONVER
	MAC	NOVECT	MTH	MTH$AIMAG
	MAC	NOVECT	MTH	MTH$DIMAG
	MAC	NOVECT	MTH	MTH$GIMAG
	MAC	NOVECT	MTH	MTH$CMPLX
	MAC	NOVECT	MTH	MTH$DCMPLX
	MAC	NOVECT	MTH	MTH$GCMPLX
	MAC	NOVECT	MTH	MTH$DBLE
	MAC	NOVECT	MTH	MTH$GDBLE
	MAC	NOVECT	MTH	MTH$DFLOTI
	MAC	NOVECT	MTH	MTH$DFLOTJ
	MAC	NOVECT	MTH	MTH$FLOATI
	MAC	NOVECT	MTH	MTH$FLOATJ
	MAC	NOVECT	MTH	MTH$GFLOTI
	MAC	NOVECT	MTH	MTH$GFLOTJ
	MAC	NOVECT	MTH	MTH$IIDINT
	MAC	NOVECT	MTH	MTH$IIGINT
	MAC	NOVECT	MTH	MTH$IIHINT
	MAC	NOVECT	MTH	MTH$IIFIX
	MAC	NOVECT	MTH	MTH$IINT
	MAC	NOVECT	MTH	MTH$JIDINT
	MAC	NOVECT	MTH	MTH$JIGINT
	MAC	NOVECT	MTH	MTH$JIHINT
	MAC	NOVECT	MTH	MTH$JIFIX
	MAC	NOVECT	MTH	MTH$JINT
	MAC	NOVECT	MTH	MTH$REAL
	MAC	NOVECT	MTH	MTH$DREAL
	MAC	NOVECT	MTH	MTH$GREAL
	MAC	NOVECT	MTH	MTH$SNGL
	MAC	NOVECT	MTH	MTH$SNGLG

; MODULE:MTH$COSH
	MAC	CALL	MTH	MTH$COSH

; MODULE:MTH$CSINCOS
	MAC	CALL	MTH	MTH$CCOS
	MAC	CALL	MTH	MTH$CSIN

; MODULE:MTH$CSQRT
	MAC	CALL	MTH	MTH$CSQRT

; MODULE:MTH$DCOSH
	MAC	CALL	MTH	MTH$DCOSH

; MODULE:MTH$DIM
	MAC	NOVECT	MTH	MTH$DDIM
	MAC	NOVECT	MTH	MTH$DIM
	MAC	NOVECT	MTH	MTH$IIDIM
	MAC	NOVECT	MTH	MTH$JIDIM

; MODULE:MTH$DINT
	MAC	NOVECT	MTH	MTH$DINT


; MODULE:MTH$DMAX1
	MAC	NOVECT	MTH	MTH$DMAX1

; MODULE:MTH$DMIN1
	MAC	NOVECT	MTH	MTH$DMIN1

; MODULE:MTH$DMOD
	MAC	NOVECT	MTH	MTH$DMOD

; MODULE:MTH$DNINT
	MAC	NOVECT	MTH	MTH$DNINT

; MODULE:MTH$DPROD
	MAC	NOVECT	MTH	MTH$DPROD

; MODULE:MTH$DSIGN
	MAC	NOVECT	MTH	MTH$DSIGN

; MODULE:MTH$DSINH
	MAC	CALL	MTH	MTH$DSINH

; MODULE:MTH$DTAN
	MAC	CALL	MTH	MTH$DTAN

; MODULE:MTH$DTANH
	MAC	CALL	MTH	MTH$DTANH

; MODULE:MTH$IIDNNT
	MAC	NOVECT	MTH	MTH$IIDNNT

; MODULE:MTH$IISIGN
	MAC	NOVECT	MTH	MTH$IISIGN

; MODULE:MTH$IMAX0
	MAC	NOVECT	MTH	MTH$AIMAX0
	MAC	NOVECT	MTH	MTH$IMAX0

; MODULE:MTH$IMIN0
	MAC	NOVECT	MTH	MTH$AIMIN0
	MAC	NOVECT	MTH	MTH$IMIN0

; MODULE:MTH$ININT
	MAC	NOVECT	MTH	MTH$ININT

; MODULE:MTH$JIDNNT
	MAC	NOVECT	MTH	MTH$JIDNNT

; MODULE:MTH$JISIGN
	MAC	NOVECT	MTH	MTH$JISIGN

; MODULE:MTH$JMAX0
	MAC	NOVECT	MTH	MTH$AJMAX0
	MAC	NOVECT	MTH	MTH$JMAX0

; MODULE:MTH$JMIN0
	MAC	NOVECT	MTH	MTH$AJMIN0
	MAC	NOVECT	MTH	MTH$JMIN0

; MODULE:MTH$JNINT
	MAC	NOVECT	MTH	MTH$JNINT

; MODULE:MTH$MAX1
	MAC	NOVECT	MTH	MTH$AMAX1
	MAC	NOVECT	MTH	MTH$IMAX1
	MAC	NOVECT	MTH	MTH$JMAX1

; MODULE:MTH$MIN1
	MAC	NOVECT	MTH	MTH$AMIN1
	MAC	NOVECT	MTH	MTH$IMIN1
	MAC	NOVECT	MTH	MTH$JMIN1

; MODULE:MTH$MOD
	MAC	NOVECT	MTH	MTH$IMOD
	MAC	NOVECT	MTH	MTH$JMOD

; MODULE:MTH$MSGDEF
	MAC	SYM	MTH	MTH$_FLOOVEMAT
	MAC	SYM	MTH	MTH$_FLOUNDMAT
	MAC	SYM	MTH	MTH$_INVARGMAT
	MAC	SYM	MTH	MTH$_LOGZERNEG

	MAC	SYM	MTH	MTH$_SIGLOSMAT

	MAC	SYM	MTH	MTH$_SQUROONEG
	MAC	SYM	MTH	MTH$_UNDEXP
	MAC	SYM	MTH	MTH$_WRONUMARG

; MODULE:MTH$RANDOM
	MAC	CALL	MTH	MTH$RANDOM

; MODULE:MTH$SIGN
	MAC	NOVECT	MTH	MTH$SIGN

; MODULE:MTH$SINH
	MAC	CALL	MTH	MTH$SINH

; MODULE:MTH$TAN
	MAC	CALL	MTH	MTH$TAN

; MODULE:MTH$TANH
	MAC	CALL	MTH	MTH$TANH


;+
; General library entry points LIB$
;-


; MODULE:LIB$AST_IN_PROG
	MAC	CALL	LIB	LIB$AST_IN_PROG

; MODULE:LIB$CHAR
	MAC	NOVECT	LIB	LIB$CHAR

; MODULE:LIB$CRC
	MAC	CALL	LIB	LIB$CRC

; MODULE:LIB$CRC_TABLE
	MAC	CALL	LIB	LIB$CRC_TABLE

; MODULE:LIB$CVTDF
	MAC	NOVECT	LIB	LIB$CVTDF


; MODULE:LIB$DEC_OVER
	MAC	CALL	LIB	LIB$DEC_OVER

; MODULE:LIB$ESTABLISH
	MAC	CALL	LIB	LIB$ESTABLISH

; MODULE:LIB$EXTV
	MAC	CALL	LIB	LIB$EXTV

; MODULE:LIB$EXTZV
	MAC	CALL	LIB	LIB$EXTZV

; MODULE:LIB$FFC
	MAC	CALL	LIB	LIB$FFC

; MODULE:LIB$FFS
	MAC	CALL	LIB	LIB$FFS

; MODULE:LIB$FIXUP_FLT
	MAC	CALL	LIB	LIB$FIXUP_FLT

; MODULE:LIB$FLT_UNDER
	MAC	CALL	LIB	LIB$FLT_UNDER

; MODULE:LIB$GET_INPUT
	MAC	CALL	LIB	LIB$GET_INPUT
	MAC	CALL	LIB	LIB$GET_COMMAND

; MODULE:LIB$ICHAR
	MAC	NOVECT	LIB	LIB$ICHAR

; MODULE:LIB$INDEX
	MAC	CALL	LIB	LIB$INDEX

; MODULE:LIB$INITIALIZE
	MAC	NOVECT	LIB	LIB$INITIALIZE

; MODULE:LIB$INSV
	MAC	CALL	LIB	LIB$INSV

; MODULE:LIB$INT_OVER
	MAC	CALL	LIB	LIB$INT_OVER

; MODULE:LIB$LEN
	MAC	NOVECT	LIB	LIB$LEN

; MODULE:LIB$LOCC
	MAC	CALL	LIB	LIB$LOCC

; MODULE:LIB$LOOKUP_KEY
	MAC	NOVECT	LIB	LIB$LOOKUP_KEY

; MODULE:LIB$MATCHC
	MAC	CALL	LIB	LIB$MATCHC

; MODULE:LIB$MATCH_COND
	MAC	CALL	LIB	LIB$MATCH_COND

; MODULE:LIB$MOVTC
	MAC	CALL	LIB	LIB$MOVTC

; MODULE:LIB$MOVTUC
	MAC	CALL	LIB	LIB$MOVTUC

; MODULE:LIB$MSGDEF
	MAC	SYM	LIB	LIB$_AMBKEY
	MAC	SYM	LIB	LIB$_ATTCONSTO
	MAC	SYM	LIB	LIB$_BADBLOADR
	MAC	SYM	LIB	LIB$_BADBLOSIZ
	MAC	SYM	LIB	LIB$_BADSTA
	MAC	SYM	LIB	LIB$_EF_ALRFRE
	MAC	SYM	LIB	LIB$_EF_ALRRES
	MAC	SYM	LIB	LIB$_EF_RESSYS
	MAC	SYM	LIB	LIB$_FATERRLIB
	MAC	SYM	LIB	LIB$_INPSTRTRU
	MAC	SYM	LIB	LIB$_INSEF
	MAC	SYM	LIB	LIB$_INSVIRMEM

	MAC	SYM	LIB	LIB$_INTLOGERR
	MAC	SYM	LIB	LIB$_INVARG
	MAC	SYM	LIB	LIB$_INVSTRDES
	MAC	SYM	LIB	LIB$_NORMAL

	MAC	SYM	LIB	LIB$_NOTFOU
	MAC	SYM	LIB	LIB$_PUSSTAOVE
	MAC	SYM	LIB	LIB$_SIGNO_ARG
	MAC	SYM	LIB	LIB$_STRIS_INT
	MAC	SYM	LIB	LIB$_STRTRU

	MAC	SYM	LIB	LIB$_UNRKEY
	MAC	SYM	LIB	LIB$_USEFLORES
	MAC	SYM	LIB	LIB$_WRONUMARG

; MODULE:LIB$PUT_OUTPUT
	MAC	CALL	LIB	LIB$PUT_OUTPUT

; MODULE:LIB$REVERT
	MAC	CALL	LIB	LIB$REVERT

; MODULE:LIB$SCANC
	MAC	CALL	LIB	LIB$SCANC

; MODULE:LIB$SCOPY
	MAC	CALL	LIB	LIB$SCOPY_DXDX
	MAC	JSB	LIB	LIB$SCOPY_DXDX6
	MAC	CALL	LIB	LIB$SCOPY_R_DX
	MAC	JSB	LIB	LIB$SCOPY_R_DX6
	MAC	CALL	LIB	LIB$SGET1_DD
	MAC	JSB	LIB	LIB$SGET1_DD_R6
	MAC	CALL	LIB	LIB$SFREE1_DD
	MAC	JSB	LIB	LIB$SFREE1_DD6
	MAC	CALL	LIB	LIB$SFREEN_DD
	MAC	JSB	LIB	LIB$SFREEN_DD6

; MODULE:LIB$STAT_VM
	MAC	CALL	LIB	LIB$STAT_VM

; MODULE:LIB$SIGNAL
	MAC	CALL	LIB	LIB$SIGNAL
	MAC	CALL	LIB	LIB$STOP

; MODULE:LIB$SIG_TO_RET

	MAC	CALL	LIB	LIB$SIG_TO_RET

; MODULE:LIB$SKPC
	MAC	CALL	LIB	LIB$SKPC

; MODULE:LIB$SPANC
	MAC	CALL	LIB	LIB$SPANC

; MODULE:LIB$SYS_ASCTIM
	MAC	NOVECT	LIB	LIB$SYS_ASCTIM

; MODULE:LIB$SYS_FAO
	MAC	NOVECT	LIB	LIB$SYS_FAO

; MODULE:LIB$SYS_FAOL
	MAC	NOVECT	LIB	LIB$SYS_FAOL

; MODULE:LIB$SYS_GETMSG
	MAC	NOVECT	LIB	LIB$SYS_GETMSG

; MODULE:LIB$SYS_TRNLOG
	MAC	NOVECT	LIB	LIB$SYS_TRNLOG

; MODULE:LIB$VM
	MAC	CALL	LIB	LIB$FREE_VM
	MAC	CALL	LIB	LIB$GET_VM

; MODULE:LIB$STAT_VM
	MAC	CALL	LIB	LIB$SHOW_VM

; MODULE:LIB$CURRENCY
	MAC	NOVECT	LIB	LIB$CURRENCY

; MODULE:LIB$DIGIT_SEP
	MAC	NOVECT	LIB	LIB$DIGIT_SEP

; MODULE:LIB$RADIX_POINT
	MAC	NOVECT	LIB	LIB$RADIX_POINT

; MODULE:LIB$RUN_PROGRAM
	MAC	NOVECT	LIB	LIB$RUN_PROGRAM

; MODULE:LIB$DO_COMMAND
	MAC	NOVECT	LIB	LIB$DO_COMMAND

; MODULE:LIB$COMMON
	MAC	NOVECT	LIB	LIB$GET_COMMON
	MAC	NOVECT	LIB	LIB$PUT_COMMON

; MODULE:LIB$TRA_ASC_EBC
	MAC	NOVECT	LIB	LIB$TRA_ASC_EBC

; MODULE:LIB$TRA_EBC_ASC
	MAC	NOVECT	LIB	LIB$TRA_EBC_ASC

; MODULE:LIB$INSQHI
	MAC	NOVECT	LIB	LIB$INSQHI

; MODULE:LIB$INSQTI
	MAC	NOVECT	LIB	LIB$INSQTI

; MODULE:LIB$REMQHI
	MAC	NOVECT	LIB	LIB$REMQHI

; MODULE:LIB$REMQTI
	MAC	NOVECT	LIB	LIB$REMQTI


;+
; Internal entry points which need vectors because the non-shared
; library must call these procedures in shared library, rather
; than getting a copy of the procedure from the object library.
; Note: the instances of $$ entry vectors is to be minimized.
; The only cases where it hurts to have two copies of a procedure
; is when the procedure has statically allocated (OWN) data
; which is used as a process-wide resource.
; Note: in order to prevent linker data truncation errors, all modules
; which are shared and are also linked in as private copies when
; $$entry points are referenced by non-shared routines called by the user
; must declare external references to code as general (not word displacement)
; even if the reference is to the same PSECT!!!!!
; Modules which have this dual life are: FOR$$ERROR, FOR$$VM, FOR$$SIGNAL.
; ******************************************************************
; MAINTENANCE NOTE: The following $$ entry vectors can not have their
; specs changed, even though $$, since that would cause user programs
; with compatibility (unshared) routines to have to re-link in order to
; work correctly.  Worse we would not want to increase the major ID in
; order for the image activator to catch the incompatibility, since
; that would cause all users to have to relink.
;-

; MODULE:FOR$$CB
	MAC	JSB	FOR	FOR$$CB_PUSH
	MAC	JSB	FOR	FOR$$CB_POP
	MAC	JSB	FOR	FOR$$CB_RET
	MAC	JSB	FOR	FOR$$CB_GET	; Added for non-shared code
						; to load CCB from OTS$$A_CUR_LUB


; MODULE:FOR$ERRSNS			; See also above FOR$ERRSNS, FOR$ERRSNS_W
	MAC	CALL	FOR	FOR$$ERRSNS_SAV


;+
;	Here starts all new entry points defined after VMS 1.00.
;	Unless a FUTURE above can be replaced, all new transfer
;	points MUST be appended to the end of this list!
;-

	MAC	CALL	FOR	FOR$IO_DC_V	; by ref above
	MAC	CALL	FOR	FOR$IO_GC_V

; MODULE FOR$CVTRT
	MAC	CALL	FOR	FOR$CVT_G_TD
	MAC	CALL	FOR	FOR$CVT_G_TE
	MAC	CALL	FOR	FOR$CVT_G_TF
	MAC	CALL	FOR	FOR$CVT_G_TG

; MODULE OTS$CVTTR
	MAC	CALL	OTS	OTS$CVT_T_G

; MODULE FOR$CVTRT
	MAC	CALL	FOR	FOR$CVT_H_TD
	MAC	CALL	FOR	FOR$CVT_H_TE
	MAC	CALL	FOR	FOR$CVT_H_TF
	MAC	CALL	FOR	FOR$CVT_H_TG

; MODULE OTS$CVTTR
	MAC	CALL	OTS	OTS$CVT_T_H

; MODULE OTS$CVTLT	- Old entry points under FOR$
	MAC	CALL	OTS	OTS$CVT_L_TI
	MAC	CALL	OTS	OTS$CVT_L_TO
	MAC	CALL	OTS	OTS$CVT_L_TZ
	MAC	CALL	OTS	OTS$CVT_L_TL

; MODULE FOR$ENTRY continued from above
	MAC	CALL	FOR	FOR$REWRITE_SF	FOR$$IO_BEG
	MAC	CALL	FOR	FOR$REWRITE_SO	FOR$$IO_BEG
	MAC	CALL	FOR	FOR$REWRITE_SU	FOR$$IO_BEG
	MAC	CALL	FOR	FOR$READ_IF	FOR$$IO_BEG
	MAC	CALL	FOR	FOR$READ_IO	FOR$$IO_BEG
	MAC	CALL	FOR	FOR$WRITE_IF	FOR$$IO_BEG
	MAC	CALL	FOR	FOR$WRITE_IO	FOR$$IO_BEG

; MODULE FOR$DELETE
	MAC	CALL	FOR	FOR$DELETE
	MAC	CALL	FOR	FOR$DELETE_D

; MODULE FOR$INQUIRE
	MAC	CALL	FOR	FOR$INQUIRE

; MODULE FOR$UNLOCK
	MAC	CALL	FOR	FOR$UNLOCK

; MODULE FOR$ENTRY continued
	MAC	CALL	FOR	FOR$READ_KU	FOR$$IO_BEG

; MODULE FOR$LEX
	MAC	NOVECT	FOR	FOR$LGE
	MAC	NOVECT	FOR	FOR$LGT
	MAC	NOVECT	FOR	FOR$LLE
	MAC	NOVECT	FOR	FOR$LLT

; MODULE LIB$ADDX
	MAC	NOVECT	LIB	LIB$ADDX
	MAC	NOVECT	LIB	LIB$SUBX

; MODULE LIB$ASN_WTH_MBX
	MAC	NOVECT	LIB	LIB$ASN_WTH_MBX

; MODULE LIB$DAY
	MAC	NOVECT	LIB	LIB$DAY

; MODULE LIB$EMODF
	MAC	NOVECT	LIB	LIB$EMODF

; MODULE LIB$EMODD
	MAC	NOVECT	LIB	LIB$EMODD

; MODULE LIB$EMODG
	MAC	NOVECT	LIB	LIB$EMODG

; MODULE LIB$EMODH
	MAC	NOVECT	LIB	LIB$EMODH

; MODULE LIB$EMULATE
	MAC	NOVECT	LIB	LIB$EMULATE

; MODULE LIB$ESTEMU
	MAC	NOVECT	LIB	LIB$ESTEMU

; MODULE LIB$GET_FOREIGN
	MAC	NOVECT	LIB	LIB$GET_FOREIGN

; MODULE LIB$POLYF
	MAC	NOVECT	LIB	LIB$POLYF

; MODULE LIB$POLYD
	MAC	NOVECT	LIB	LIB$POLYD

; MODULE LIB$POLYG
	MAC	NOVECT	LIB	LIB$POLYG

; MODULE LIB$POLYH
	MAC	NOVECT	LIB	LIB$POLYH

; MODULE LIB$SIM_TRAP
	MAC	NOVECT	LIB	LIB$SIM_TRAP

; MODULE LIB$TIMER
	MAC	NOVECT	LIB	LIB$INIT_TIMER
	MAC	NOVECT	LIB	LIB$SHOW_TIMER
	MAC	NOVECT	LIB	LIB$STAT_TIMER
	MAC	NOVECT	LIB	LIB$FREE_TIMER

; MODULE MTH$AINT
	MAC	NOVECT	MTH	MTH$AINT_R2

; MODULE MTH$CVTDG
	MAC	NOVECT	MTH	MTH$CVT_D_G
	MAC	NOVECT	MTH	MTH$CVT_G_D

; MODULE MTH$DFLOOR
	MAC	NOVECT	MTH	MTH$DFLOOR
	MAC	NOVECT	MTH	MTH$DFLOOR_R3

; MODULE MTH$DIM
	MAC	NOVECT	MTH	MTH$GDIM
	MAC	NOVECT	MTH	MTH$HDIM

; MODULE MTH$DINT
	MAC	NOVECT	MTH	MTH$DINT_R4

; MODULE MTH$DTAN
	MAC	JSB	MTH	MTH$DTAN_R7

; MODULE MTH$FLOOR
	MAC	NOVECT	MTH	MTH$FLOOR
	MAC	NOVECT	MTH	MTH$FLOOR_R1

; MODULE MTH$GACOS
	MAC	NOVECT	MTH	MTH$GACOS
	MAC	NOVECT	MTH	MTH$GACOS_R7

; MODULE MTH$GASIN
	MAC	NOVECT	MTH	MTH$GASIN
	MAC	NOVECT	MTH	MTH$GASIN_R7

; MODULE MTH$GATANH
	MAC	NOVECT	MTH	MTH$GATANH

; MODULE MTH$GCOSH
	MAC	NOVECT	MTH	MTH$GCOSH

; MODULE MTH$GEXP
	MAC	NOVECT	MTH	MTH$GEXP
	MAC	NOVECT	MTH	MTH$GEXP_R6

; MODULE MTH$GFLOOR
	MAC	NOVECT	MTH	MTH$GFLOOR
	MAC	NOVECT	MTH	MTH$GFLOOR_R3

; MODULE MTH$GINT
	MAC	NOVECT	MTH	MTH$GINT
	MAC	NOVEC	MTH	MTH$GINT_R4

; MODULE MTH$GMAX1
	MAC	NOVECT	MTH	MTH$GMAX1

; MODULE MTH$GMIN1
	MAC	NOVECT	MTH	MTH$GMIN1

; MODULE MTH$GMOD
	MAC	NOVECT	MTH	MTH$GMOD

; MODULE MTH$GNINT
	MAC	NOVECT	MTH	MTH$GNINT

; MODULE MTH$GPROD
	MAC	NOVECT	MTH	MTH$GPROD

; MODULE MTH$GSIGN
	MAC	NOVECT	MTH	MTH$GSIGN

; MODULE MTH$GSINCOS
	MAC	NOVECT	MTH	MTH$GSIN
	MAC	NOVECT	MTH	MTH$GCOS
	MAC	NOVECT	MTH	MTH$GSIN_R7
	MAC	NOVECT	MTH	MTH$GCOS_R7

; MODULE MTH$GSINH
	MAC	NOVECT	MTH	MTH$GSINH

; MODULE MTH$GSQRT
	MAC	NOVECT	MTH	MTH$GSQRT
	MAC	NOVECT	MTH	MTH$GSQRT_R5

; MODULE MTH$GTAN
	MAC	NOVECT	MTH	MTH$GTAN
	MAC	NOVECT	MTH	MTH$GTAN_R7

; MODULE MTH$GTANH
	MAC	NOVECT	MTH	MTH$GTANH

; MODULE MTH$HACOS
	MAC	NOVECT	MTH	MTH$HACOS
	MAC	NOVECT	MTH	MTH$HACOS_R8

; MODULE MTH$HASIN
	MAC	NOVECT	MTH	MTH$HASIN
	MAC	NOVECT	MTH	MTH$HASIN_R8

; MODULE MTH$HCOSH
	MAC	NOVECT	MTH	MTH$HCOSH

; MODULE MTH$HEXP
	MAC	NOVECT	MTH	MTH$HEXP
	MAC	NOVECT	MTH	MTH$HEXP_R6

; MODULE MTH$HFLOOR
	MAC	NOVECT	MTH	MTH$HFLOOR
	MAC	NOVECT	MTH	MTH$HFLOOR_R7

; MODULE MTH$HINT
	MAC	NOVECT	MTH	MTH$HINT
	MAC	NOVECT	MTH	MTH$HINT_R8
; MODULE MTH$HMAX1
	MAC	NOVECT	MTH	MTH$HMAX1

; MODULE MTH$HMIN1
	MAC	NOVECT	MTH	MTH$HMIN1

; MODULE MTH$HMOD
	MAC	NOVECT	MTH	MTH$HMOD

; MODULE MTH$HNINT
	MAC	NOVECT	MTH	MTH$HNINT

; MODULE MTH$HSIGN
	MAC	NOVECT	MTH	MTH$HSIGN

; MODULE MTH$HSINCOS
	MAC	NOVECT	MTH	MTH$HSIN
	MAC	NOVECT	MTH	MTH$HSIN_R5
	MAC	NOVECT	MTH	MTH$HCOS
	MAC	NOVECT	MTH	MTH$HCOS_R5

; MODULE MTH$HSINH
	MAC	NOVECT	MTH	MTH$HSINH

; MODULE MTH$HSQRT
	MAC	NOVECT	MTH	MTH$HSQRT
	MAC	NOVECT	MTH	MTH$HSQRT_R8

; MODULE MTH$HTAN
	MAC	NOVECT	MTH	MTH$HTAN
	MAC	NOVECT	MTH	MTH$HTAN_R5

; MODULE MTH$HTANH
	MAC	NOVECT	MTH	MTH$HTANH

; MODULE MTH$IIGNNT
	MAC	NOVECT	MTH	MTH$IIGNNT

; MODULE MTH$IIHNNT
	MAC	NOVECT	MTH	MTH$IIHNNT

; MODULE MTH$JIGNNT
	MAC	NOVECT	MTH	MTH$JIGNNT

; MODULE MTH$JIHNNT
	MAC	NOVECT	MTH	MTH$JIHNNT

; MODULE MTH$TAN
	MAC	JSB	MTH	MTH$TAN_R4

; MODULE MTH$SGN
	MAC	NOVECT	MTH	MTH$SGN
	MAC	NOVECT	MTH	MTH$SGN_R1

; MODULE OTS$POWGG
	MAC	NOVECT	OTS	OTS$POWGG

; MODULE OTS$POWGJ
	MAC	NOVECT	OTS	OTS$POWGJ

; MODULE OTS$POWHJ
	MAC	NOVECT	OTS	OTS$POWHJ_R3

; MODULE OTS$DIVCD
	MAC	NOVECT	OTS	OTS$DIVCD_R3

; MODULE OTS$DIVCG
	MAC	NOVECT	OTS	OTS$DIVCG_R3

; MODULE OTS$MULCD
	MAC	NOVECT	OTS	OTS$MULCD_R3

; MODULE OTS$MULCG
	MAC	NOVECT	OTS	OTS$MULCG_R3

; MODULE MTH$CDABS
	MAC	NOVECT	MTH	MTH$CDABS

; MODULE MTH$DCONJG
	MAC	NOVECT	MTH	MTH$DCONJG

; MODULE MTH$CDEXP
	MAC	NOVECT	MTH	MTH$CDEXP

; MODULE MTH$CDLOG
	MAC	NOVECT	MTH	MTH$CDLOG

; MODULE MTH$CDSINCOS
	MAC	NOVECT	MTH	MTH$CDCOS
	MAC	NOVECT	MTH	MTH$CDSIN

; MODULE MTH$CDSQRT
	MAC	NOVECT	MTH	MTH$CDSQRT

; MODULE MTH$CGABS
	MAC	NOVECT	MTH	MTH$CGABS

; MODULE MTH$GCONJG
	MAC	NOVECT	MTH	MTH$GCONJG

; MODULE MTH$CGEXP
	MAC	NOVECT	MTH	MTH$CGEXP

; MODULE MTH$CGLOG
	MAC	NOVECT	MTH	MTH$CGLOG

; MODULE MTH$CGSINCOS
	MAC	NOVECT	MTH	MTH$CGCOS
	MAC	NOVECT	MTH	MTH$CGSIN

; MODULE MTH$CGSQRT
	MAC	NOVECT	MTH	MTH$CGSQRT

; MODULE OTS$POWCC
	MAC	NOVECT	OTS	OTS$POWCC

; MODULE OTS$POWCDCD
	MAC	NOVECT	OTS	OTS$POWCDCD_R3

; MODULE OTS$POWCDJ
	MAC	NOVECT	OTS	OTS$POWCDJ_R3

; MODULE OTS$POWCGCG
	MAC	NOVECT	OTS	OTS$POWCGCG_R3

; MODULE OTS$POWCGJ
	MAC	NOVECT	OTS	OTS$POWCGJ_R3

; MODULE OTS$POWHH
	MAC	NOVECT	OTS	OTS$POWHH_R3

; MODULE MTH$SQRT
	MAC	JSB	MTH	MTH$SQRT_R3

;+
; The following routine is called from FOR$$ERROR, therefore
; it must be vectored.
;-

; MODULE FOR$$CB (continued)
	MAC	CALL	FOR	FOR$$FP_MATCH

; MODULE FOR$READ_SN
	MAC	CALL	FOR	FOR$READ_SN	FOR$$IO_BEG

; MODULE FOR$WRITE_SN
	MAC	CALL	FOR	FOR$WRITE_SN	FOR$$IO_BEG

; MODULE FOR$IO_ELEM (continued)
	MAC	CALL	FOR	FOR$IO_X_SB
	MAC	CALL	FOR	FOR$IO_X_NL
	MAC	CALL	FOR	FOR$IO_X_SE

; MODULE OTS$CVTLT (continued)
	MAC	CALL	OTS	OTS$CVT_L_TB

; MODULE OTS$CVTTOL (continued)
	MAC	CALL	OTS	OTS$CVT_TB_L

; MODULE OTS$CVTTF
	MAC	CALL	OTS	OTS$CVT_T_F

; MODULE LIB$ATTACH
	MAC	CALL	LIB	LIB$ATTACH

; MODULE LIB$SPAWN
	MAC	CALL	LIB	LIB$SPAWN

; MODULE LIB$GET_OPCODE
	MAC	CALL	LIB	LIB$GET_OPCODE

; MODULE FOR$RAB
	MAC	CALL	FOR	FOR$RAB

;+
; The following three entry points are for the "kernel" floating output
; conversion routines.  Although they are "double-dollar" names, they are
; vectored so that future language-specific shareable images can use them.
;-

; MODULE OTS$$CVTDT
;	MAC	JSB	OTS	OTS$$CVT_D_T_R8

; MODULE OTS$$CVTRT
;	MAC	JSB	OTS	OTS$$CVT_G_T_R8
;	MAC	JSB	OTS	OTS$$CVT_H_T_R8

;+
; Leave some expansion room for FOR, OTS and MTH by padding to
; a page boundry.  If this room is exhausted they will have to go after
; the STR and BAS facilities.  Give an error message if the space gets
; exhausted.
;-
.IF DEFINED RTLVECTOR
.IF GREATER <<.-RTL$START>-^X800> 
.ERROR <<.-RTL$START>-^X800>	; Negative vector pad space
.ENDC
	.BYTE	0[512-<<.-RTL$START>&511>]
.ENDC

;+
; The following entry points are for the string library.
; The JSB entry points are later.
;-
	MAC	CALL	STR	STR$CONCAT		; Concatenate strings
	MAC	CALL	STR	STR$COPY_DX		; Copy by descriptor
	MAC	CALL	STR	STR$COPY_R		; Copy by reference
	MAC	CALL	STR	STR$FREE1_DX		; Free a string
	MAC	CALL	STR	STR$GET1_DX		; Allocate a string
	MAC	NOVECT	STR	STR$ADD			; Add two strings
	MAC	NOVECT	STR	STR$MUL			; Multiply two strings
	MAC	NOVECT	STR	STR$RECIP		; Take 1/ a string
	MAC	NOVECT	STR	STR$ROUND		; Arithmeticly round a string
	MAC	CALL	STR	STR$LEFT		; Take left part of string
	MAC	NOVECT	STR	STR$LEFT_R8		; (JSB entry point)
	MAC	CALL	STR	STR$LEN_EXTR		; Extract from a string by length
	MAC	NOVECT	STR	STR$LEN_EXTR_R8		; (JSB entry point)
	MAC	CALL	STR	STR$POS_EXTR		; Extract from a string by position
	MAC	NOVECT	STR	STR$POS_EXTR_R8		; (JSB entry point)
	MAC	CALL	STR	STR$POSITION		; 
	MAC	NOVECT	STR	STR$POSITION_R6		; (JSB entry point)
	MAC	CALL	STR	STR$RIGHT		; Take right part of a string
	MAC	NOVECT	STR	STR$RIGHT_R8		; (JSB entry point)
	MAC	CALL	STR	STR$DUPL_CHAR		; Make lots of a character
	MAC	CALL	STR	STR$TRIM		; Remove trailing blanks
	MAC	FUTURE	STR	STR$FUTURE_1		; Reserved for future expansion
	MAC	FUTURE	STR	STR$FUTURE_2
	MAC	FUTURE	STR	STR$FUTURE_3
;+
; String condition codes
;-
	MAC	SYM	STR	STR$_DIVBY_ZER		; Divide by zero
	MAC	SYM	STR	STR$_FATINTERR		; Fatal internal error
	MAC	SYM	STR	STR$_ILLSTRCLA		; Illegal string class
	MAC	SYM	STR	STR$_ILLSTRPOS
	MAC	SYM	STR	STR$_ILLSTRSPE
	MAC	SYM	STR	STR$_INSVIRMEM
	MAC	SYM	STR	STR$_NEGSTRLEN
	MAC	SYM	STR	STR$_NORMAL
	MAC	SYM	STR	STR$_STRIS_INT
	MAC	SYM	STR	STR$_STRTOOLON
	MAC	SYM	STR	STR$_TRU
	MAC	SYM	STR	STR$_WRONUMARG


;+
; The following entry points are generated by the BASIC-PLUS-2
; compiler.  The current arrangement of which are vectored is tenative.
;-
;
;	ARITHMETIC CODE SUPPORT
;
	MAC	NOVECT	BAS	BAS$POWII		;  Integer(w) ** Integer(w)
	MAC	JSB	BAS	BAS$SCALE_D_R1		;  Scale a number
	MAC	NOVECT	BAS	BAS$POWJJ		;  Long ** Long
	MAC	JSB	BAS	BAS$DSCALE_D_R1		;  Descale a number
	MAC	NOVECT	BAS	BAS$POWRJ		;  Float ** Long
	MAC	NOVECT	BAS	BAS$POWRR		;  Float ** Float
	MAC	NOVECT	BAS	BAS$POWDJ		;  Double ** Long
	MAC	NOVECT	BAS	BAS$POWDD		;  Double ** Double
	MAC	NOVECT	BAS	BAS$RND_F_R1		;  Return random number
	MAC	NOVECT	BAS	BAS$RANDOMIZE		;  Perturb the random seed
	MAC	CALL	BAS	BAS$CMPF_APP		;  Approximate float compare
	MAC	CALL	BAS	BAS$CMPD_APP		;  Approximate double compare
;
;	STRING CODE SUPPORT
;
	MAC	NOVECT	BAS	BAS$CHANGE_NA_S		;  CHANGE A% to A$
	MAC	NOVECT	BAS	BAS$CHANGE_S_NA		;  CHANGE A$ to A%

;
;	STRING FUNCTIONS
;
	MAC	CALL	BAS	BAS$RSET		;  String move, right justified
	MAC	CALL	BAS	BAS$RSET_R		;  By-ref entry point
	MAC	CALL	BAS	BAS$EDIT		;  String editing
	MAC	NOVECT	BAS	BAS$FORMAT_F		;  Floating FORMAT$
	MAC	NOVECT	BAS	BAS$FORMAT_D		;  Double FORMAT$
	MAC	CALL	BAS	BAS$INSTR		;  Match substring
	MAC	NOVECT	BAS	BAS$RAD			;  RADIX 50
	MAC	NOVECT	BAS	BAS$RAD50		;  RADIX 50
	MAC	NOVECT	BAS	BAS$STOP		;  STOP statement (*** here temporarily)
	MAC	CALL	BAS	BAS$STR_F		;  Return binary->ASCII number
	MAC	CALL	BAS	BAS$STR_D		;  Ditto for double
	MAC	CALL	BAS	BAS$STR_L		;  Ditto for longword
	MAC	CALL	BAS	BAS$NUM_F		;  Return binary_>ASCII number
	MAC	CALL	BAS	BAS$NUM_D		;  Ditto for double
	MAC	CALL	BAS	BAS$NUM_L		;  Ditto for longword
	MAC	CALL	BAS	BAS$NUM1_F		;  Return binary->ASCII number
	MAC	CALL	BAS	BAS$NUM1_D		;  Ditto for double
	MAC	CALL	BAS	BAS$NUM1_L		;  Ditto for longword
	MAC	NOVECT	BAS	BAS$TAB			;  Tab over x spaces
	MAC	NOVECT	BAS	BAS$TIME_T		;  24 hour time string
	MAC	CALL	BAS	BAS$VAL_L		;  Return ASCII->binary string
	MAC	CALL	BAS	BAS$VAL_F		;  Ditto for floating
	MAC	CALL	BAS	BAS$VAL_D		;  Ditto for double
	MAC	NOVECT	BAS	BAS$XLATE		;  Translate a string

;
;	STRING ARITHMETIC
;
	MAC	NOVECT	BAS	BAS$COMP		;  String arith compare
	MAC	NOVECT	BAS	BAS$DIF			;  S.A. difference
	MAC	NOVECT	BAS	BAS$PLACE		;  S.A. precision
	MAC	NOVECT	BAS	BAS$PROD		;  S.A. multiplication
	MAC	NOVECT	BAS	BAS$QUO			;  S.A. division
	MAC	NOVECT	BAS	BAS$SUM			;  S.A. addition
;
;	PROCEDURE ACTIVATION
;
	MAC	JSB	BAS	BAS$INIT_R8		;  Main program initializer
	MAC	JSB	BAS	BAS$INIT_DEF_R8		;  DEF function initializer
	MAC	JSB	BAS	BAS$INIT_DFS_R8		;  DEF* function initializer
	MAC	CALL	BAS	BAS$INIT_GOSUB		;  GOSUB initializer
	MAC	NOVECT	BAS	BAS$INIT_C_GSB		;  ON-GOSUB initializer
	MAC	JSB	BAS	BAS$END_R8		;  Main program ender
	MAC	JSB	BAS	BAS$END_DEF_R8		;  DEF function end
	MAC	JSB	BAS	BAS$END_DFS_R8		;  DEF* function end
	MAC	JSB	BAS	BAS$END_GSB_R8		;  GOSUB end
;
;	ERROR HANDLING
;
	MAC	CALL	BAS	BAS$ON_ERR_Z		;  ON ERROR GOTO 0
	MAC	CALL	BAS	BAS$ON_ERR_BK		;  ON ERROR GOBACK
	MAC	CALL	BAS	BAS$RESUME		;  RESUME line num
	MAC	CALL	BAS	BAS$RESUME_Z		;  RESUME
	MAC	CALL	BAS	BAS$ERR			;  ERR variable
	MAC	CALL	BAS	BAS$ERL			;  ERL variable
	MAC	CALL	BAS	BAS$ERN			;  ERN$ variable
	MAC	CALL	BAS	BAS$ERT			;  ERT$ variable
;
; The following is the header for the BASIC condition handler.  This is
; defined as a global symbol so that code in the shared library will
; use the vector location.  This is necessary because the test for a
; BASIC frame is made by comparing 0(FP) to BAS$HANDLER, and code which does
; this is both inside and outside the sharable library.
;
.EXTRN	BAS$$HANDLER
.IF DF RTLVECTOR
BAS$HANDLER::
	.MASK	BAS$$HANDLER
	JMP	BAS$$HANDLER+2
.ENDC

;
;	Scalar (non matrix) I/O
;
	MAC	CALL	BAS	BAS$INPUT		;  Initialize for INPUT unit
	MAC	CALL	BAS	BAS$LINPUT		;  Ditto LINPUT unit
	MAC	CALL	BAS	BAS$INPUT_LINE		;  Ditto INPUT LINE unit
	MAC	CALL	BAS	BAS$READ		;  Ditto READ
	MAC	CALL	BAS	BAS$PRINT		;  Ditto PRINT
	MAC	CALL	BAS	BAS$PRINT_USING		;  Ditto PRINT USING
	MAC	CALL	BAS	BAS$IO_END		;  End of I/O list
	MAC	CALL	BAS	BAS$IN_W_R		;  INPUT word
	MAC	CALL	BAS	BAS$IN_L_R		;  INPUT long
	MAC	CALL	BAS	BAS$IN_F_R		;  INPUT float
	MAC	CALL	BAS	BAS$IN_D_R		;  INPUT double
	MAC	CALL	BAS	BAS$IN_T_DX		;  INPUT string
	MAC	CALL	BAS	BAS$OUT_L_V_S		;  PRINT long(word) ;
	MAC	CALL	BAS	BAS$OUT_L_V_B		;  PRINT long(word)
	MAC	CALL	BAS	BAS$OUT_L_V_C		;  PRINT long(word) ,
	MAC	CALL	BAS	BAS$OUT_F_V_S		;  PRINT float ;
	MAC	CALL	BAS	BAS$OUT_F_V_B		;  PRINT float
	MAC	CALL	BAS	BAS$OUT_F_V_C		;  PRINT float ,
	MAC	CALL	BAS	BAS$OUT_D_V_S		;  PRINT double ;
	MAC	CALL	BAS	BAS$OUT_D_V_B		;  PRINT double
	MAC	CALL	BAS	BAS$OUT_D_V_C		;  PRINT double ,
	MAC	CALL	BAS	BAS$OUT_T_DX_S		;  PRINT string ;
	MAC	CALL	BAS	BAS$OUT_T_DX_B		;  PRINT string
	MAC	CALL	BAS	BAS$OUT_T_DX_C		;  PRINT string ,
;
; Matrix I/O
;
	MAC	NOVECT	BAS	BAS$OUT_MAT_S		;  Output element xmtr
	MAC	NOVECT	BAS	BAS$OUT_MAT_B		;
	MAC	NOVECT	BAS	BAS$OUT_MAT_C		;
	MAC	NOVECT	BAS	BAS$IN_MAT		;  Input element xmtr
	MAC	CALL	BAS	BAS$MAT_PRINT		;  Init for MAT PRINT
	MAC	CALL	BAS	BAS$MAT_INPUT		;	for MAT INPUT
	MAC	CALL	BAS	BAS$MAT_LINPUT		;	for MAT LINPUT
	MAC	CALL	BAS	BAS$MAT_READ		;	for MAT READ
	MAC	NOVECT	BAS	BAS$NUM			;  NUM var (mat)
	MAC	NOVECT	BAS	BAS$NUM2		;  NUM2 var (mat)

;
;	RMS I/O
;
	MAC	CALL	BAS	BAS$OPEN		;  OPEN (all)
	MAC	CALL	BAS	BAS$CLOSE		;  CLOSE (all)
	MAC	CALL	BAS	BAS$GET			;  Sequential GET
	MAC	CALL	BAS	BAS$GET_RECORD		;  Random GET
	MAC	CALL	BAS	BAS$GET_KEY		;  Indexed GET
	MAC	CALL	BAS	BAS$PUT			;  Sequential PUT
	MAC	CALL	BAS	BAS$PUT_RECORD		;  Random PUT
	MAC	CALL	BAS	BAS$PUT_COUNT		;  Sequential PUT w/COUNT
	MAC	CALL	BAS	BAS$PUT_REC_CNT		;  Random PUT w/COUNT
	MAC	CALL	BAS	BAS$FIND		;  Sequential FIND
	MAC	CALL	BAS	BAS$FIND_RECORD		;  Random FIND
	MAC	CALL	BAS	BAS$FIND_KEY		;  Indexed FIND
	MAC	CALL	BAS	BAS$DELETE		;  DELETE
	MAC	CALL	BAS	BAS$UPDATE		;  UPDATE
	MAC	CALL	BAS	BAS$UPDATE_COUN		;  UPDATE w/COUNT
	MAC	CALL	BAS	BAS$RESTORE		;  RESTORE
	MAC	CALL	BAS	BAS$RESTORE_KEY		;  Indexed RESTORE
	MAC	CALL	BAS	BAS$SCRATCH		;  SCRATCH
	MAC	CALL	BAS	BAS$UNLOCK		;  Release
	MAC	CALL	BAS	BAS$FREE		;  FREE

;
;	RSTS/E COMPATIBILTY
;
	MAC	NOVECT	BAS	BAS$CVT_W_S		;  CVT%$
	MAC	NOVECT	BAS	BAS$CVT_S_W		;  CVT$%
	MAC	NOVECT	BAS	BAS$CVT_F_S		;  CVTF$
	MAC	NOVECT	BAS	BAS$CVT_D_S		;  CVTD$
	MAC	NOVECT	BAS	BAS$CVT_S_F		;  CVT$F
	MAC	NOVECT	BAS	BAS$CVT_S_D		;  CVT$D
	MAC	NOVECT	BAS	BAS$FSS			;  File string scan
	MAC	NOVECT	BAS	BAS$FSP			;  File info
	MAC	NOVECT	BAS	BAS$SYS			;  Sys calls
	MAC	NOVECT	BAS	BAS$CHAIN		;  CHAIN statement
	MAC	NOVECT	BAS	BAS$PEEK		;  Examine RSTS/E memory
;
;	MISC
;
	MAC	CALL	BAS	BAS$CCPOS		;  CCPOS func
	MAC	NOVECT	BAS	BAS$RCTRLC		;  Disable CTRL C
	MAC	NOVECT	BAS	BAS$ECHO		;  Enable echo
	MAC	NOVECT	BAS	BAS$ONECHR		;  *********
	MAC	NOVECT	BAS	BAS$NOECHO		;  Disable echo
	MAC	NOVECT	BAS	BAS$RCTRLO		;  Disable CTRL O
	MAC	NOVECT	BAS	BAS$CTRLO		;  Cause control O
	MAC	CALL	BAS	BAS$RESTORE_DAT		;  RESTORE data
	MAC	CALL	BAS	BAS$RECOUNT		;  RECOUNT var
	MAC	CALL	BAS	BAS$STATUS		;  STATUS var
	MAC	NOVECT	BAS	BAS$MAGTAPE		;  MAGTAPE func
	MAC	NOVECT	BAS	BAS$TIME_F		;  Floating time values
	MAC	NOVECT	BAS	BAS$SLEEP		;  SLEEP statement
	MAC	NOVECT	BAS	BAS$NAME_AS		;  NAME AS statement
	MAC	NOVECT	BAS	BAS$KILL		;  KILL erase
	MAC	CALL	BAS	BAS$BUFSIZ		;  BUFSIZ func
	MAC	NOVECT	BAS	BAS$CTRLC		;  Enable CTRL C
;
;	MOVE STATEMENT
;
	MAC	NOVECT	BAS	BAS$MOVE_TO		; Start a MOVE TO statement
	MAC	NOVECT	BAS	BAS$MOVE_FROM		; Start a MOVE FROM statement
	MAC	NOVECT	BAS	BAS$MOVE_END		; End of a MOVE statement
	MAC	NOVECT	BAS	BAS$MOVE_ARRAY		; MOVE an array


;
;	MATRIX Arithmetic
;
	MAC	NOVECT	BAS	BAS$DET_F		;  Determinate
	MAC	NOVECT	BAS	BAS$DET_D		;  Determinate
	MAC	NOVECT	BAS	BAS$MAT_NULL		;  Null out string matrix
	MAC	NOVECT	BAS	BAS$MAT_ASSIGN		;  Matrix assignments
	MAC	NOVECT	BAS	BAS$MAT_INIT		;  Matrix initialize(0 or 1)
	MAC	NOVECT	BAS	BAS$MAT_IDN		;  Matrix identity
	MAC	NOVECT	BAS	BAS$MAT_ADD		;  Matrix addition
	MAC	NOVECT	BAS	BAS$MAT_SUB		;  Matrix subtraction
	MAC	NOVECT	BAS	BAS$MAT_MUL		;  Matrix multiplication
	MAC	NOVECT	BAS	BAS$MAT_SCA_MUL		;  Matrix scalar multiplication
	MAC	NOVECT	BAS	BAS$MAT_TRN		;  Matrix transposition
	MAC	NOVECT	BAS	BAS$MAT_INV		;  Matrix inversion
	MAC	NOVECT	BAS	BAS$MAT_REDIM		;  Single redimension
;
;	CODE SUPPORT
;
	MAC	CALL	BAS	BAS$CHR			;  Return character for binary value
;
;	VIRTUAL ARRAYS
;
	MAC	NOVECT	BAS	BAS$FET_FA_W_R8		;  Fetch a word from virtual array
	MAC	NOVECT	BAS	BAS$FET_FA_L_R8
	MAC	NOVECT	BAS	BAS$FET_FA_F_R8
	MAC	NOVECT	BAS	BAS$FET_FA_D_R8
	MAC	NOVECT	BAS	BAS$FETCH_BFA
	MAC	NOVECT	BAS	BAS$STO_FA_W_R8		;  Store a word in a virtual array
	MAC	NOVECT	BAS	BAS$STO_FA_L_R8
	MAC	NOVECT	BAS	BAS$STO_FA_F_R8
	MAC	NOVECT	BAS	BAS$STO_FA_D_R8
	MAC	NOVECT	BAS	BAS$STORE_BFA
	MAC	NOVECT	BAS	BAS$STO_FA_RDX

;
;	FIELD STATEMENT
;
	MAC	NOVECT	BAS	BAS$FIELD_SET		; Set up FIELD var
	MAC	NOVECT	BAS	BAS$FIELD_COPY		; Copy a FIELDed var
	MAC	NOVECT	BAS	BAS$FIELD_CLEAR		;  Clear the fielded attribute
	MAC	NOVECT	BAS	BAS$FIELD_PURGE		;  ?
	MAC	NOVECT	BAS	BAS$FIELD_OPEN		;  ?
	MAC	NOVECT	BAS	BAS$FIELD_CLOSE		;  ?
;
;	MISC
;
	MAC	NOVECT	BAS	BAS$DATE_T		;  Return an ASCII string w/ date
	MAC	CALL	BAS	BAS$ERROR		;  Signal errors from compiled code
	MAC	NOVECT	LIB	LIB$DATE_TIME		;  System standard date/time
	MAC	NOVECT	BAS	BAS$MARGIN		;  MARGIN sta/MAR% funct
	MAC	NOVECT	BAS	BAS$NOMARGIN		;  NOMARGIN statement
;
;	LIB$TPARSE and its subroutines
;
.IF DEFINED RTLVECTOR
.IF NOT_EQUAL <<.-RTL$START>-^X0B58>
.ERROR 	; LIB$TPARSE vector has moved from offset ^X0B58
.ENDC
.ENDC
	MAC	CALL	LIB	LIB$TPARSE
	MAC	NOVECT	LIB	LIB$CVT_DTB
	MAC	NOVECT	LIB	LIB$CVT_HTB
	MAC	NOVECT	LIB	LIB$CVT_OTB

;
; Entry points used by the BASIC compiler to support the RUN command.
;
	MAC	NOVECT	BAS	BAS$RUN_INIT		; Initialize for RUN
	MAC	CALL	BAS	BAS$PUSH_ERR		; Save error status
	MAC	CALL	BAS	BAS$POP_ERR		; Restore error status
	MAC	NOVECT	BAS	BAS$INIT_IOL		; Start immediate code

;
; Internal BASIC entry points that are likely to need to be vectored
; because routines unlikely to be vectored call them.
;
	MAC	JSB	BAS	BAS$$CB_POP
	MAC	JSB	BAS	BAS$$CB_PUSH
	MAC	JSB	BAS	BAS$$CB_GET
	MAC	CALL	BAS	BAS$$ERR_INIT
	MAC	CALL	BAS	BAS$$OPEN_ZERO
	MAC	CALL	BAS	BAS$$RECOU_INIT
	MAC	CALL	BAS	BAS$$BLNK_LINE
	MAC	CALL	BAS	BAS$$SIGNAL
	MAC	CALL	BAS	BAS$$SIGNAL_IO
	MAC	CALL	BAS	BAS$$STATU_INIT
	MAC	CALL	BAS	BAS$$STOP
	MAC	CALL	BAS	BAS$$STOP_IO
	MAC	CALL	BAS	BAS$CANTYPAHEAD
	MAC	JSB	BAS	BAS$$SCALE_L_R1
	MAC	JSB	BAS	BAS$$SCALE_R1
	MAC	CALL	BAS	BAS$$STOP_RMS
	MAC	CALL	BAS	BAS$$FORMAT_INT
	MAC	CALL	BAS	BAS$$CLOSE_ALL
	MAC	CALL	BAS	BAS$$UDF_RL1
	MAC	CALL	BAS	BAS$$UDF_WL1
;
; JSB entry points to the string routines.
;
	MAC	JSB	STR	STR$COPY_DX_R8
	MAC	JSB	STR	STR$COPY_R_R8
	MAC	JSB	STR	STR$DUPL_CHARR8
	MAC	JSB	STR	STR$FREE1_DX_R4
	MAC	JSB	STR	STR$GET1_DX_R4
	MAC	JSB	STR	STR$LEFT_R8
	MAC	JSB	STR	STR$LEN_EXTR_R8
	MAC	JSB	STR	STR$POSITION_R6
	MAC	JSB	STR	STR$POS_EXTR_R8
	MAC	JSB	STR	STR$RIGHT_R8
;
; More STR$ entry points.  These modules must be in the sharable
; library, even though they are not used much, because they use
; string interlocks.
;
	MAC	CALL	STR	STR$APPEND
	MAC	CALL	STR	STR$COMPARE
	MAC	CALL	STR	STR$COMPARE_EQL
	MAC	CALL	STR	STR$PREFIX
	MAC	CALL	STR	STR$REPLACE
	MAC	JSB	STR	STR$REPLACE_R8
	MAC	CALL	STR	STR$TRANSLATE
	MAC	CALL	STR	STR$UPCASE

;
; The BASIC error codes.  First the small integer symbols.
;
	MAC	SYM	BAS	BAS$K_ACCDEVUSE
	MAC	SYM	BAS	BAS$K_ARGDONMAT
	MAC	SYM	BAS	BAS$K_ARGOUTBOU
	MAC	SYM	BAS	BAS$K_ARGTOOLAR
	MAC	SYM	BAS	BAS$K_ARRMUSSAM
	MAC	SYM	BAS	BAS$K_ARRMUSSQU
	MAC	SYM	BAS	BAS$K_BADDIRDEV
	MAC	SYM	BAS	BAS$K_BADLINNUM
	MAC	SYM	BAS	BAS$K_BADNUMPRI
	MAC	SYM	BAS	BAS$K_BADRECIDE
	MAC	SYM	BAS	BAS$K_BADRECVAL
	MAC	SYM	BAS	BAS$K_CANCHAARR
	MAC	SYM	BAS	BAS$K_CANCOMSTA
	MAC	SYM	BAS	BAS$K_CANCON
	MAC	SYM	BAS	BAS$K_CANFINFIL
	MAC	SYM	BAS	BAS$K_CANINVMAT
	MAC	SYM	BAS	BAS$K_CANOPEFIL
	MAC	SYM	BAS	BAS$K_CANPOSEOF
	MAC	SYM	BAS	BAS$K_CHATO_NON
	MAC	SYM	BAS	BAS$K_CORFILSTR
	MAC	SYM	BAS	BAS$K_DATFORERR
	MAC	SYM	BAS	BAS$K_DATTYPERR
	MAC	SYM	BAS	BAS$K_DEFWITFNE
	MAC	SYM	BAS	BAS$K_DEVHUNWRI
	MAC	SYM	BAS	BAS$K_DEVNOTAVA
	MAC	SYM	BAS	BAS$K_DEVNOTFIL
	MAC	SYM	BAS	BAS$K_DIFUSELON
	MAC	SYM	BAS	BAS$K_DIRERR
	MAC	SYM	BAS	BAS$K_DISBLOINT
	MAC	SYM	BAS	BAS$K_DISERRDUR
	MAC	SYM	BAS	BAS$K_DISPACLOC
	MAC	SYM	BAS	BAS$K_DISPACNEE
	MAC	SYM	BAS	BAS$K_DISPACNOT
	MAC	SYM	BAS	BAS$K_DISPACPRI
	MAC	SYM	BAS	BAS$K_DIVBY_ZER
	MAC	SYM	BAS	BAS$K_DUPKEYDET
	MAC	SYM	BAS	BAS$K_ENDFILDEV
	MAC	SYM	BAS	BAS$K_ERRTRANEE
	MAC	SYM	BAS	BAS$K_ENDOF_STA
	MAC	SYM	BAS	BAS$K_EXEONLFIL
	MAC	SYM	BAS	BAS$K_EXPERR
	MAC	SYM	BAS	BAS$K_EXPTOOCOM
	MAC	SYM	BAS	BAS$K_FATDISPAC
	MAC	SYM	BAS	BAS$K_FATSYSIO_
	MAC	SYM	BAS	BAS$K_FIEOVEBUF
	MAC	SYM	BAS	BAS$K_FILACPFAI
	MAC	SYM	BAS	BAS$K_FILATTNOT
	MAC	SYM	BAS	BAS$K_FILEXIREN
	MAC	SYM	BAS	BAS$K_FILEXPDAT
	MAC	SYM	BAS	BAS$K_FILIS_LOC
	MAC	SYM	BAS	BAS$K_FIRARGSEQ
	MAC	SYM	BAS	BAS$K_FLOOVE
	MAC	SYM	BAS	BAS$K_FLOPOIERR
	MAC	SYM	BAS	BAS$K_FLOUND
	MAC	SYM	BAS	BAS$K_FNEWITDEF
	MAC	SYM	BAS	BAS$K_FNEWITFUN
	MAC	SYM	BAS	BAS$K_FORWITNEX
	MAC	SYM	BAS	BAS$K_ILLALLCLA
	MAC	SYM	BAS	BAS$K_ILLARGLOG
	MAC	SYM	BAS	BAS$K_ILLBYTCOU
	MAC	SYM	BAS	BAS$K_ILLCLUSIZ
	MAC	SYM	BAS	BAS$K_ILLCONCLA
	MAC	SYM	BAS	BAS$K_ILLDEFNES
	MAC	SYM	BAS	BAS$K_ILLDUMVAR
	MAC	SYM	BAS	BAS$K_ILLEXIDEF
	MAC	SYM	BAS	BAS$K_ILLEXP
	MAC	SYM	BAS	BAS$K_ILLFIEVAR
	MAC	SYM	BAS	BAS$K_ILLFILNAM
	MAC	SYM	BAS	BAS$K_ILLFN_RED
	MAC	SYM	BAS	BAS$K_ILLFUNNAM
	MAC	SYM	BAS	BAS$K_ILLIF_STA
	MAC	SYM	BAS	BAS$K_ILLILLACC
	MAC	SYM	BAS	BAS$K_ILLIN_IMM
	MAC	SYM	BAS	BAS$K_ILLIO_CHA
	MAC	SYM	BAS	BAS$K_ILLKEYATT
	MAC	SYM	BAS	BAS$K_ILLLINNUM
	MAC	SYM	BAS	BAS$K_ILLMAGUSA
	MAC	SYM	BAS	BAS$K_ILLMODMIX
	MAC	SYM	BAS	BAS$K_ILLNUM
	MAC	SYM	BAS	BAS$K_ILLNUMIMA
	MAC	SYM	BAS	BAS$K_ILLOPE
	MAC	SYM	BAS	BAS$K_ILLRECACC
	MAC	SYM	BAS	BAS$K_ILLRECFIL
	MAC	SYM	BAS	BAS$K_ILLRECFOR
	MAC	SYM	BAS	BAS$K_ILLRESSUB
	MAC	SYM	BAS	BAS$K_ILLRETSUB
	MAC	SYM	BAS	BAS$K_ILLSTA
	MAC	SYM	BAS	BAS$K_ILLSTRIMA
	MAC	SYM	BAS	BAS$K_ILLSWIUSA
	MAC	SYM	BAS	BAS$K_ILLSYM
	MAC	SYM	BAS	BAS$K_ILLSYSUSA
	MAC	SYM	BAS	BAS$K_ILLUSA
	MAC	SYM	BAS	BAS$K_ILLUSADEV
	MAC	SYM	BAS	BAS$K_ILLVER
	MAC	SYM	BAS	BAS$K_IMASQUROO
	MAC	SYM	BAS	BAS$K_INCFUNUSA
	MAC	SYM	BAS	BAS$K_INCSUBUSE
	MAC	SYM	BAS	BAS$K_INDNOTFUL
	MAC	SYM	BAS	BAS$K_INDNOTINI
	MAC	SYM	BAS	BAS$K_INTERR
	MAC	SYM	BAS	BAS$K_INTOVEFOR
	MAC	SYM	BAS	BAS$K_INVFILOPT
	MAC	SYM	BAS	BAS$K_INVKEYREF
	MAC	SYM	BAS	BAS$K_INVRFAFIE
	MAC	SYM	BAS	BAS$K_IO_CHAALR
	MAC	SYM	BAS	BAS$K_IO_CHANOT
	MAC	SYM	BAS	BAS$K_IO_TO_DET
	MAC	SYM	BAS	BAS$K_KEYFIEBEY
	MAC	SYM	BAS	BAS$K_KEYLARTHA
	MAC	SYM	BAS	BAS$K_KEYNOTCHA
	MAC	SYM	BAS	BAS$K_KEYSIZTOO
	MAC	SYM	BAS	BAS$K_KEYWAIEXH
	MAC	SYM	BAS	BAS$K_LINTOOLON
	MAC	SYM	BAS	BAS$K_LITSTRNEE
	MAC	SYM	BAS	BAS$K_MAGRECLEN
	MAC	SYM	BAS	BAS$K_MAGSELERR
	MAC	SYM	BAS	BAS$K_MATARRTOO
	MAC	SYM	BAS	BAS$K_MATARRWIT
	MAC	SYM	BAS	BAS$K_MATDIMERR
	MAC	SYM	BAS	BAS$K_MAXMEMEXC
	MAC	SYM	BAS	BAS$K_MEMMANVIO
	MAC	SYM	BAS	BAS$K_MEMPARFAI
	MAC	SYM	BAS	BAS$K_MISSPEFEA
	MAC	SYM	BAS	BAS$K_MODERR
	MAC	SYM	BAS	BAS$K_MOVOVEBUF
	MAC	SYM	BAS	BAS$K_NAMACCNOW
	MAC	SYM	BAS	BAS$K_NEGFILSTR
	MAC	SYM	BAS	BAS$K_NEXWITFOR
	MAC	SYM	BAS	BAS$K_NODNAMERR
	MAC	SYM	BAS	BAS$K_NONRESRUN
	MAC	SYM	BAS	BAS$K_NOTENDFIL
	MAC	SYM	BAS	BAS$K_NOTENOAVA
	MAC	SYM	BAS	BAS$K_NOTENODAT
	MAC	SYM	BAS	BAS$K_NOTIMP
	MAC	SYM	BAS	BAS$K_NOTRANACC
	MAC	SYM	BAS	BAS$K_NOTVALDEV
	MAC	SYM	BAS	BAS$K_NO_BUFSPA
	MAC	SYM	BAS	BAS$K_NO_CURREC
	MAC	SYM	BAS	BAS$K_NO_FIEIMA
	MAC	SYM	BAS	BAS$K_NO_FILNAM
	MAC	SYM	BAS	BAS$K_NO_PRIKEY
	MAC	SYM	BAS	BAS$K_NO_ROOUSE
	MAC	SYM	BAS	BAS$K_NO_RUNSYS
	MAC	SYM	BAS	BAS$K_NULIMA
	MAC	SYM	BAS	BAS$K_NUMIMASTR
	MAC	SYM	BAS	BAS$K_NUMIS_NEE
	MAC	SYM	BAS	BAS$K_ODDADDTRA
	MAC	SYM	BAS	BAS$K_ONEOR_TWO
	MAC	SYM	BAS	BAS$K_ON_STANEE
	MAC	SYM	BAS	BAS$K_ON_STAOUT
	MAC	SYM	BAS	BAS$K_OUTOF_DAT
	MAC	SYM	BAS	BAS$K_PACIDSDON
	MAC	SYM	BAS	BAS$K_PLEUSERUN
	MAC	SYM	BAS	BAS$K_PRIKEYOUT
	MAC	SYM	BAS	BAS$K_PRIUSIBUF
	MAC	SYM	BAS	BAS$K_PRIUSIFOR
	MAC	SYM	BAS	BAS$K_PROC__TRA
	MAC	SYM	BAS	BAS$K_PROLOSSOR
	MAC	SYM	BAS	BAS$K_PROVIO
	MAC	SYM	BAS	BAS$K_RECALREXI
	MAC	SYM	BAS	BAS$K_RECATTNOT
	MAC	SYM	BAS	BAS$K_RECBUCLOC
	MAC	SYM	BAS	BAS$K_RECFILTOO
	MAC	SYM	BAS	BAS$K_RECHASBEE
	MAC	SYM	BAS	BAS$K_RECLOCFAI
	MAC	SYM	BAS	BAS$K_RECNOTFOU
	MAC	SYM	BAS	BAS$K_RECNUMEXC
	MAC	SYM	BAS	BAS$K_RECSUBCAL
	MAC	SYM	BAS	BAS$K_REDARR
	MAC	SYM	BAS	BAS$K_RESINSTRA
	MAC	SYM	BAS	BAS$K_RESNO_ERR
	MAC	SYM	BAS	BAS$K_RETWITGOS
	MAC	SYM	BAS	BAS$K_RRVNOTFUL
	MAC	SYM	BAS	BAS$K_SCAFACINT
	MAC	SYM	BAS	BAS$K_SIZRECINV
	MAC	SYM	BAS	BAS$K_SP_STAOVE
	MAC	SYM	BAS	BAS$K_STANOTFOU
	MAC	SYM	BAS	BAS$K_STO
	MAC	SYM	BAS	BAS$K_STRIMANUM
	MAC	SYM	BAS	BAS$K_STRIS_NEE
	MAC	SYM	BAS	BAS$K_STRTOOLON
	MAC	SYM	BAS	BAS$K_SUBOUTRAN
	MAC	SYM	BAS	BAS$K_SYNERR
	MAC	SYM	BAS	BAS$K_TAPBOTDET
	MAC	SYM	BAS	BAS$K_TAPNOTANS
	MAC	SYM	BAS	BAS$K_TAPRECNOT
	MAC	SYM	BAS	BAS$K_TERFORFIL
	MAC	SYM	BAS	BAS$K_TIMLIMEXC
	MAC	SYM	BAS	BAS$K_TOOFEWARG
	MAC	SYM	BAS	BAS$K_TOOMANARG
	MAC	SYM	BAS	BAS$K_TOOMANOPE
	MAC	SYM	BAS	BAS$K_UNDFUNCAL
	MAC	SYM	BAS	BAS$K_USEDATERR
	MAC	SYM	BAS	BAS$K_VIRARRDIS
	MAC	SYM	BAS	BAS$K_VIRARROPE
	MAC	SYM	BAS	BAS$K_VIRBUFTOO
	MAC	SYM	BAS	BAS$K_WHA
	MAC	SYM	BAS	BAS$K_WROMATPAC
;
; Now the 32-bit values.
;
	MAC	SYM	BAS	BAS$_ACCDEVUSE
	MAC	SYM	BAS	BAS$_ARGDONMAT
	MAC	SYM	BAS	BAS$_ARGOUTBOU
	MAC	SYM	BAS	BAS$_ARGTOOLAR
	MAC	SYM	BAS	BAS$_ARRMUSSAM
	MAC	SYM	BAS	BAS$_ARRMUSSQU
	MAC	SYM	BAS	BAS$_BADDIRDEV
	MAC	SYM	BAS	BAS$_BADLINNUM
	MAC	SYM	BAS	BAS$_BADNUMPRI
	MAC	SYM	BAS	BAS$_BADRECIDE
	MAC	SYM	BAS	BAS$_BADRECVAL
	MAC	SYM	BAS	BAS$_CANCHAARR
	MAC	SYM	BAS	BAS$_CANCOMSTA
	MAC	SYM	BAS	BAS$_CANCON
	MAC	SYM	BAS	BAS$_CANFINFIL
	MAC	SYM	BAS	BAS$_CANINVMAT
	MAC	SYM	BAS	BAS$_CANOPEFIL
	MAC	SYM	BAS	BAS$_CANPOSEOF
	MAC	SYM	BAS	BAS$_CHATO_NON
	MAC	SYM	BAS	BAS$_CORFILSTR
	MAC	SYM	BAS	BAS$_DATFORERR
	MAC	SYM	BAS	BAS$_DATTYPERR
	MAC	SYM	BAS	BAS$_DEFWITFNE
	MAC	SYM	BAS	BAS$_DEVHUNWRI
	MAC	SYM	BAS	BAS$_DEVNOTAVA
	MAC	SYM	BAS	BAS$_DEVNOTFIL
	MAC	SYM	BAS	BAS$_DIFUSELON
	MAC	SYM	BAS	BAS$_DIRERR
	MAC	SYM	BAS	BAS$_DISBLOINT
	MAC	SYM	BAS	BAS$_DISERRDUR
	MAC	SYM	BAS	BAS$_DISPACLOC
	MAC	SYM	BAS	BAS$_DISPACNEE
	MAC	SYM	BAS	BAS$_DISPACNOT
	MAC	SYM	BAS	BAS$_DISPACPRI
	MAC	SYM	BAS	BAS$_DIVBY_ZER
	MAC	SYM	BAS	BAS$_DUPKEYDET
	MAC	SYM	BAS	BAS$_ENDFILDEV
	MAC	SYM	BAS	BAS$_ENDOF_STA
	MAC	SYM	BAS	BAS$_ERRTRANEE
	MAC	SYM	BAS	BAS$_EXEONLFIL
	MAC	SYM	BAS	BAS$_EXPERR
	MAC	SYM	BAS	BAS$_EXPTOOCOM
	MAC	SYM	BAS	BAS$_FATDISPAC
	MAC	SYM	BAS	BAS$_FATSYSIO_
	MAC	SYM	BAS	BAS$_FIEOVEBUF
	MAC	SYM	BAS	BAS$_FILACPFAI
	MAC	SYM	BAS	BAS$_FILATTNOT
	MAC	SYM	BAS	BAS$_FILEXIREN
	MAC	SYM	BAS	BAS$_FILEXPDAT
	MAC	SYM	BAS	BAS$_FILIS_LOC
	MAC	SYM	BAS	BAS$_FIRARGSEQ
	MAC	SYM	BAS	BAS$_FLOOVE
	MAC	SYM	BAS	BAS$_FLOPOIERR
	MAC	SYM	BAS	BAS$_FLOUND
	MAC	SYM	BAS	BAS$_FNEWITDEF
	MAC	SYM	BAS	BAS$_FNEWITFUN
	MAC	SYM	BAS	BAS$_FORWITNEX
	MAC	SYM	BAS	BAS$_ILLALLCLA
	MAC	SYM	BAS	BAS$_ILLARGLOG
	MAC	SYM	BAS	BAS$_ILLBYTCOU
	MAC	SYM	BAS	BAS$_ILLCLUSIZ
	MAC	SYM	BAS	BAS$_ILLCONCLA
	MAC	SYM	BAS	BAS$_ILLDEFNES
	MAC	SYM	BAS	BAS$_ILLDUMVAR
	MAC	SYM	BAS	BAS$_ILLEXIDEF
	MAC	SYM	BAS	BAS$_ILLEXP
	MAC	SYM	BAS	BAS$_ILLFIEVAR
	MAC	SYM	BAS	BAS$_ILLFILNAM
	MAC	SYM	BAS	BAS$_ILLFN_RED
	MAC	SYM	BAS	BAS$_ILLFUNNAM
	MAC	SYM	BAS	BAS$_ILLIF_STA
	MAC	SYM	BAS	BAS$_ILLILLACC
	MAC	SYM	BAS	BAS$_ILLIN_IMM
	MAC	SYM	BAS	BAS$_ILLIO_CHA
	MAC	SYM	BAS	BAS$_ILLKEYATT
	MAC	SYM	BAS	BAS$_ILLLINNUM
	MAC	SYM	BAS	BAS$_ILLMAGUSA
	MAC	SYM	BAS	BAS$_ILLMODMIX
	MAC	SYM	BAS	BAS$_ILLNUM
	MAC	SYM	BAS	BAS$_ILLNUMIMA
	MAC	SYM	BAS	BAS$_ILLOPE
	MAC	SYM	BAS	BAS$_ILLRECACC
	MAC	SYM	BAS	BAS$_ILLRECFIL
	MAC	SYM	BAS	BAS$_ILLRECFOR
	MAC	SYM	BAS	BAS$_ILLRESSUB
	MAC	SYM	BAS	BAS$_ILLRETSUB
	MAC	SYM	BAS	BAS$_ILLSTA
	MAC	SYM	BAS	BAS$_ILLSTRIMA
	MAC	SYM	BAS	BAS$_ILLSWIUSA
	MAC	SYM	BAS	BAS$_ILLSYM
	MAC	SYM	BAS	BAS$_ILLSYSUSA
	MAC	SYM	BAS	BAS$_ILLUSA
	MAC	SYM	BAS	BAS$_ILLUSADEV
	MAC	SYM	BAS	BAS$_ILLVER
	MAC	SYM	BAS	BAS$_IMASQUROO
	MAC	SYM	BAS	BAS$_INCFUNUSA
	MAC	SYM	BAS	BAS$_INCSUBUSE
	MAC	SYM	BAS	BAS$_INDNOTFUL
	MAC	SYM	BAS	BAS$_INDNOTINI
	MAC	SYM	BAS	BAS$_INTERR
	MAC	SYM	BAS	BAS$_INTOVEFOR
	MAC	SYM	BAS	BAS$_INVFILOPT
	MAC	SYM	BAS	BAS$_INVKEYREF
	MAC	SYM	BAS	BAS$_INVRFAFIE
	MAC	SYM	BAS	BAS$_IO_CHAALR
	MAC	SYM	BAS	BAS$_IO_CHANOT
	MAC	SYM	BAS	BAS$_IO_TO_DET
	MAC	SYM	BAS	BAS$_KEYFIEBEY
	MAC	SYM	BAS	BAS$_KEYLARTHA
	MAC	SYM	BAS	BAS$_KEYNOTCHA
	MAC	SYM	BAS	BAS$_KEYSIZTOO
	MAC	SYM	BAS	BAS$_KEYWAIEXH
	MAC	SYM	BAS	BAS$_LINTOOLON
	MAC	SYM	BAS	BAS$_LITSTRNEE
	MAC	SYM	BAS	BAS$_MAGRECLEN
	MAC	SYM	BAS	BAS$_MAGSELERR
	MAC	SYM	BAS	BAS$_MATARRTOO
	MAC	SYM	BAS	BAS$_MATARRWIT
	MAC	SYM	BAS	BAS$_MATDIMERR
	MAC	SYM	BAS	BAS$_MAXMEMEXC
	MAC	SYM	BAS	BAS$_MEMMANVIO
	MAC	SYM	BAS	BAS$_MEMPARFAI
	MAC	SYM	BAS	BAS$_MISSPEFEA
	MAC	SYM	BAS	BAS$_MODERR
	MAC	SYM	BAS	BAS$_MOVOVEBUF
	MAC	SYM	BAS	BAS$_NAMACCNOW
	MAC	SYM	BAS	BAS$_NEGFILSTR
	MAC	SYM	BAS	BAS$_NEXWITFOR
	MAC	SYM	BAS	BAS$_NODNAMERR
	MAC	SYM	BAS	BAS$_NONRESRUN
	MAC	SYM	BAS	BAS$_NOTENDFIL
	MAC	SYM	BAS	BAS$_NOTENOAVA
	MAC	SYM	BAS	BAS$_NOTENODAT
	MAC	SYM	BAS	BAS$_NOTIMP
	MAC	SYM	BAS	BAS$_NOTRANACC
	MAC	SYM	BAS	BAS$_NOTVALDEV
	MAC	SYM	BAS	BAS$_NO_BUFSPA
	MAC	SYM	BAS	BAS$_NO_CURREC
	MAC	SYM	BAS	BAS$_NO_FIEIMA
	MAC	SYM	BAS	BAS$_NO_FILNAM
	MAC	SYM	BAS	BAS$_NO_PRIKEY
	MAC	SYM	BAS	BAS$_NO_ROOUSE
	MAC	SYM	BAS	BAS$_NO_RUNSYS
	MAC	SYM	BAS	BAS$_NULIMA
	MAC	SYM	BAS	BAS$_NUMIMASTR
	MAC	SYM	BAS	BAS$_NUMIS_NEE
	MAC	SYM	BAS	BAS$_ODDADDTRA
	MAC	SYM	BAS	BAS$_ONEOR_TWO
	MAC	SYM	BAS	BAS$_ON_STANEE
	MAC	SYM	BAS	BAS$_ON_STAOUT
	MAC	SYM	BAS	BAS$_OUTOF_DAT
	MAC	SYM	BAS	BAS$_PACIDSDON
	MAC	SYM	BAS	BAS$_PLEUSERUN
	MAC	SYM	BAS	BAS$_PRIKEYOUT
	MAC	SYM	BAS	BAS$_PRIUSIBUF
	MAC	SYM	BAS	BAS$_PRIUSIFOR
	MAC	SYM	BAS	BAS$_PROC__TRA
	MAC	SYM	BAS	BAS$_PROLOSSOR
	MAC	SYM	BAS	BAS$_PROVIO
	MAC	SYM	BAS	BAS$_RECALREXI
	MAC	SYM	BAS	BAS$_RECATTNOT
	MAC	SYM	BAS	BAS$_RECBUCLOC
	MAC	SYM	BAS	BAS$_RECFILTOO
	MAC	SYM	BAS	BAS$_RECHASBEE
	MAC	SYM	BAS	BAS$_RECLOCFAI
	MAC	SYM	BAS	BAS$_RECNOTFOU
	MAC	SYM	BAS	BAS$_RECNUMEXC
	MAC	SYM	BAS	BAS$_RECSUBCAL
	MAC	SYM	BAS	BAS$_REDARR
	MAC	SYM	BAS	BAS$_RESINSTRA
	MAC	SYM	BAS	BAS$_RESNO_ERR
	MAC	SYM	BAS	BAS$_RETWITGOS
	MAC	SYM	BAS	BAS$_RRVNOTFUL
	MAC	SYM	BAS	BAS$_SCAFACINT
	MAC	SYM	BAS	BAS$_SIZRECINV
	MAC	SYM	BAS	BAS$_SP_STAOVE
	MAC	SYM	BAS	BAS$_STANOTFOU
	MAC	SYM	BAS	BAS$_STO
	MAC	SYM	BAS	BAS$_STRIMANUM
	MAC	SYM	BAS	BAS$_STRIS_NEE
	MAC	SYM	BAS	BAS$_STRTOOLON
	MAC	SYM	BAS	BAS$_SUBOUTRAN
	MAC	SYM	BAS	BAS$_SYNERR
	MAC	SYM	BAS	BAS$_TAPBOTDET
	MAC	SYM	BAS	BAS$_TAPNOTANS
	MAC	SYM	BAS	BAS$_TAPRECNOT
	MAC	SYM	BAS	BAS$_TERFORFIL
	MAC	SYM	BAS	BAS$_TIMLIMEXC
	MAC	SYM	BAS	BAS$_TOOFEWARG
	MAC	SYM	BAS	BAS$_TOOMANARG
	MAC	SYM	BAS	BAS$_TOOMANOPE
	MAC	SYM	BAS	BAS$_UNDFUNCAL
	MAC	SYM	BAS	BAS$_USEDATERR
	MAC	SYM	BAS	BAS$_VIRARRDIS
	MAC	SYM	BAS	BAS$_VIRARROPE
	MAC	SYM	BAS	BAS$_VIRBUFTOO
	MAC	SYM	BAS	BAS$_WHA
	MAC	SYM	BAS	BAS$_WROMATPAC

; Module BAS$$REC_PROC
	MAC	CALL	BAS	BAS$WAIT

;+
; START OF COBOL CONTRIBUTION TO RTLVECTOR
;
; Leave some expansion room for BAS by padding to a page boundary.
; If this room is exhausted they will have to go after
; the COB facility.  Give an error message if the space gets
; exhausted.
;-
.IF DEFINED RTLVECTOR
	.IF GREATER <<.-RTL$START>-^XE00> 
	    .ERROR <<.-RTL$STARV>-^XE00>    ; Negative vector pad space
	.ENDC
	.BYTE	0[512-<<.-RTL$START>&511>]
.ENDC

; MODULE LIB$AB_CVTPT_O
	MAC	SYM	LIB	LIB$AB_CVTPT_O

; MODULE LIB$AB_CVTPT_U
	MAC	SYM	LIB	LIB$AB_CVTPT_U

; MODULE LIB$AB_CVTTP_O
	MAC	SYM	LIB	LIB$AB_CVTTP_O

; MODULE LIB$AB_CVTTP_U
	MAC	SYM	LIB	LIB$AB_CVTTP_U

; MODULE COB$AB_SPANC
	MAC	SYM	COB	COB$AB_SPANC

; MODULE LIB$AB_CVT_U_O
	MAC	SYM	LIB	LIB$AB_CVT_U_O

;+
; Degree equivalents of trig functions
;-

; MODULE:MTH$ACOS 
	MAC	CALL	MTH	MTH$ACOSD
	MAC	JSB	MTH	MTH$ACOSD_R4

; MODULE:MTH$ASIN
	MAC	CALL	MTH	MTH$ASIND
	MAC	JSB	MTH	MTH$ASIND_R4

; MODULE:MTH$ATAN
	MAC	CALL	MTH	MTH$ATAND
	MAC	CALL	MTH	MTH$ATAND2
	MAC	JSB	MTH	MTH$ATAND_R4

; MODULE:MTH$DACOS
	MAC	CALL	MTH	MTH$DACOSD
	MAC	JSB	MTH	MTH$DACOSD_R7

; MODULE:MTH$DASIN
	MAC	CALL	MTH	MTH$DASIND
	MAC	JSB	MTH	MTH$DASIND_R7

; MODULE:MTH$DATAN
	MAC	CALL	MTH	MTH$DATAND
	MAC	CALL	MTH	MTH$DATAND2
	MAC	JSB	MTH	MTH$DATAND_R7

; MODULE:MTH$DSINCOS
	MAC	CALL	MTH	MTH$DCOSD
	MAC	JSB	MTH	MTH$DCOSD_R7
	MAC	CALL	MTH	MTH$DSIND
	MAC	JSB	MTH	MTH$DSIND_R7

; MODULE:MTH$SINCOS
	MAC	CALL	MTH	MTH$COSD
	MAC	JSB	MTH	MTH$COSD_R4
	MAC	CALL	MTH	MTH$SIND
	MAC	JSB	MTH	MTH$SIND_R4

; MODULE:MTH$DTAN
	MAC	CALL	MTH	MTH$DTAND
	MAC	JSB	MTH	MTH$DTAND_R7

; MODULE:MTH$TAN
	MAC	CALL	MTH	MTH$TAND
	MAC	JSB	MTH	MTH$TAND_R4

; MODULE MTH$GACOS
	MAC	NOVECT	MTH	MTH$GACOSD
	MAC	NOVECT	MTH	MTH$GACOSD_R7

; MODULE MTH$GASIN
	MAC	NOVECT	MTH	MTH$GASIND
	MAC	NOVECT	MTH	MTH$GASIND_R7

; MODULE MTH$GSINCOS
	MAC	NOVECT	MTH	MTH$GSIND
	MAC	NOVECT	MTH	MTH$GCOSD
	MAC	NOVECT	MTH	MTH$GSIND_R7
	MAC	NOVECT	MTH	MTH$GCOSD_R7

; MODULE MTH$GTAN
	MAC	NOVECT	MTH	MTH$GTAND
	MAC	NOVECT	MTH	MTH$GTAND_R7

; MODULE MTH$HACOS
	MAC	NOVECT	MTH	MTH$HACOSD
	MAC	NOVECT	MTH	MTH$HACOSD_R8

; MODULE MTH$HASIN
	MAC	NOVECT	MTH	MTH$HASIND
	MAC	NOVECT	MTH	MTH$HASIND_R8

; MODULE MTH$HATANH
	MAC	NOVECT	MTH	MTH$HATANH

; MODULE MTH$HSINCOS
	MAC	NOVECT	MTH	MTH$HSIND
	MAC	NOVECT	MTH	MTH$HSIND_R5
	MAC	NOVECT	MTH	MTH$HCOSD
	MAC	NOVECT	MTH	MTH$HCOSD_R5

; MODULE MTH$HTAN
	MAC	NOVECT	MTH	MTH$HTAND
	MAC	NOVECT	MTH	MTH$HTAND_R5

; V E R S I O N    3 . 0   A D D I T I O N S
; __________________________________________
; Fill up the hole created by removing some translation tables that ended up
; in the vector.

; MODULE:MTH$ATANH
	MAC	CALL	MTH	MTH$ATANH

; MODULE:MTH$DATANH
	MAC	CALL	MTH	MTH$DATANH

; MODULE MTH$GATAN
	MAC	NOVECT	MTH	MTH$GATAN
	MAC	NOVECT	MTH	MTH$GATAN2
	MAC	NOVECT	MTH	MTH$GATAN_R7
	MAC	NOVECT	MTH	MTH$GATAND
	MAC	NOVECT	MTH	MTH$GATAND2
	MAC	NOVECT	MTH	MTH$GATAND_R7

; MODULE MTH$GLOG
	MAC	NOVECT	MTH	MTH$GLOG
	MAC	NOVECT	MTH	MTH$GLOG2
	MAC	NOVECT	MTH	MTH$GLOG10
	MAC	NOVECT	MTH	MTH$GLOG_R8
	MAC	NOVECT	MTH	MTH$GLOG10_R8

; MODULE MTH$HATAN
	MAC	NOVECT	MTH	MTH$HATAN
	MAC	NOVECT	MTH	MTH$HATAN_R8
	MAC	NOVECT	MTH	MTH$HATAN2
	MAC	NOVECT	MTH	MTH$HATAND
	MAC	NOVECT	MTH	MTH$HATAND_R8
	MAC	NOVECT	MTH	MTH$HATAND2

; MODULE MTH$HLOG
	MAC	NOVECT	MTH	MTH$HLOG
	MAC	NOVECT	MTH	MTH$HLOG2
	MAC	NOVECT	MTH	MTH$HLOG10
	MAC	NOVECT	MTH	MTH$HLOG_R8
	MAC	NOVECT	MTH	MTH$HLOG10_R8

; MODULE MTH$SINCOS	(Continued)
	MAC	CALL	MTH	MTH$SINCOS
	MAC	JSB	MTH	MTH$SINCOS_R5
	MAC	CALL	MTH	MTH$SINCOSD
	MAC	JSB	MTH	MTH$SINCOSD_R5

; MODULE MTH$DSINCOS	(Continued)
	MAC	CALL	MTH	MTH$DSINCOS
	MAC	JSB	MTH	MTH$DSINCOS_R7
	MAC	CALL	MTH	MTH$DSINCOSD
	MAC	JSB	MTH	MTH$DSINCOSD_R7

; MODULE MTH$GSINCOS	(Continued)
	MAC	NOVECT	MTH	MTH$GSINCOS
	MAC	NOVECT	MTH	MTH$GSINCOS_R7
	MAC	NOVECT	MTH	MTH$GSINCOSD
	MAC	NOVECT	MTH	MTH$GSINCOSD_R7

; MODULE MTH$HSINCOS	(Continued)
	MAC	NOVECT	MTH	MTH$HSINCOS
	MAC	NOVECT	MTH	MTH$HSINCOS_R7
	MAC	NOVECT	MTH	MTH$HSINCOSD
	MAC	NOVECT	MTH	MTH$HSINCOSD_R7

; MODULE:MTH$ALOG	(Continued)
	MAC	CALL	MTH	MTH$ALOG2

; MODULE:MTH$DLOG	(Continued)
	MAC	CALL	MTH	MTH$DLOG2

; MODULE MTH$AL_4_OV_PI
	MAC	NOVECT	MTH	MTH$AL_4_OV_PI

; MODULE MTH$TAN	(Continued)
	MAC	JSB	MTH	MTH$TAN_R5
	MAC	JSB	MTH	MTH$TAND_R5

; MODULE MTH$HTAN	(Continued)
	MAC	NOVECT	MTH	MTH$HTAN_R7
	MAC	NOVECT	MTH	MTH$HTAND_R7
; MODULE MTH$AL_4_OV_PI
	MAC	DATA	MTH	MTH$AL_4_OV_PI

; MODULE MTH$ALOG
	MAC	DATA	MTH	MTH$$AB_ALOG

; MODULE MTH$ATAN
	MAC	DATA	MTH	MTH$$AB_ATAN

;+
; The previous space had been taken up by translate tables which were
; inadvertently non-vectored.  We decided to remove them from the
; vector.  Therefore, the previous space can be used for 163 new vectored
; subroutines.  Move the current location to be the proper spot for
; vectors which follow.
;-
.IF DEFINED RTLVECTOR
	.IF GREATER <<.-RTL$START>-^X1318> 
	    .ERROR <<.-RTL$START>-^X1318>    ; Negative vector pad space
	.ENDC
	.BYTE	0[^X1318-<.-RTL$START>]
.ENDC

;+
; The following is the header for the COBOL condition handler.  This is
; defined as a global symbol so that code in the shared library will
; use the vector location.  This is necessary because the test for a
; COBOL frame is made by comparing 0(FP) to COB$HANDLER, and code which does
; this is both inside and outside the sharable library.
;
.EXTRN	COB$$HANDLER
.IF DF RTLVECTOR
COB$HANDLER::
	.MASK	COB$$HANDLER	; Keep in synch with COB$$HANDLER mask
	JMP	COB$$HANDLER+2
.ENDC

; MODULE COB$IOEXCEPTION -- I/O error processing
	MAC	CALL	COB	COB$IOEXCEPTION

; MODULE COB$ERROR -- Process compiled-code-detected errors
	MAC	CALL	COB	COB$ERROR

; MODULE COB$INTARI -- Intermediate Data Type Arithmetic
	MAC	CALL	COB	COB$ADDI
	MAC	CALL	COB	COB$SUBI
	MAC	CALL	COB	COB$MULI
	MAC	CALL	COB	COB$DIVI
	MAC	CALL	COB	COB$DIVI_OSE
	MAC	CALL	COB	COB$CMPI

; MODULE COB$INTER -- Conversions to and from Intermediate Data Type
	MAC	JSB	COB	COB$CVTDI_R7
	MAC	JSB	COB	COB$CVTFI_R7
	MAC	JSB	COB	COB$CVTID_R7
	MAC	JSB	COB	COB$CVTIF_R7
	MAC	JSB	COB	COB$CVTIL_R8
	MAC	JSB	COB	COB$CVTIP_R9
	MAC	JSB	COB	COB$CVTIQ_R8
	MAC	JSB	COB	COB$CVTIW_R8
	MAC	JSB	COB	COB$CVTLI_R8
	MAC	JSB	COB	COB$CVTPI_R9
	MAC	JSB	COB	COB$CVTQI_R8
	MAC	JSB	COB	COB$CVTRIL_R8
	MAC	JSB	COB	COB$CVTRIP_R9
	MAC	JSB	COB	COB$CVTRIQ_R8
	MAC	JSB	COB	COB$CVTRIW_R8
	MAC	JSB	COB	COB$CVTTI_R8
	MAC	JSB	COB	COB$CVTWI_R8

; MODULE COB$ACC_DATE -- Support for ACCEPT DATE
	MAC	CALL	COB	COB$ACC_DATE

; MODULE COB$ACC_DAY -- Support for ACCEPT DAY
	MAC	CALL	COB	COB$ACC_DAY

; MODULE COB$ACC_DAYWEEK -- ACCEPT DAY_OF_WEEK
	MAC	CALL	COB	COB$ACC_DAYWEEK

; MODULE COB$ACC_TIME -- Support for ACCEPT TIME
	MAC	CALL	COB	COB$ACC_TIME

; MODULE COB$ACCEPT -- Support for ACCEPT
	MAC	CALL	COB	COB$ACCEPT

; MODULE COB$DISPLAY -- Support for DISPLAY and DISPLAY WITH NO ADVANCING
	MAC	CALL	COB	COB$DISPLAY
	MAC	CALL	COB	COB$DISP_NO_ADV

; MODULE COB$DIVQ_R8 -- Quadword division
	MAC	JSB	COB	COB$DIVQ_R8

; MODULE COB$MULQ_R8 -- Quadword multiplication
	MAC	JSB	COB	COB$MULQ_R8

; MODULE COB$PAUSE -- Support for STOP
	MAC	CALL	COB	COB$PAUSE

; MODULE COB$CVTPQ_R9 -- Packed to Quad conversion
	MAC	JSB	COB	COB$CVTPQ_R9

; MODULE COB$CVTQP_R9 -- Quad to Packed conversion
	MAC	JSB	COB	COB$CVTQP_R9

; MODULE COB$CVTRPQ_R9 -- Rounded Packed to Quad conversion

	MAC	JSB	COB	COB$CVTRPQ_R9

; MODULE COB$CVTRQP_R9 -- Rounded Quad to Packed conversion
	MAC	JSB	COB	COB$CVTRQP_R9



; MODULE COB$MSGDEF -- Defines COB$ all conditon codes
	MAC	SYM	COB	COB$_CALFAI
	MAC	SYM	COB	COB$_CANFAIL
	MAC	SYM	COB	COB$_DELINCOPE
	MAC	SYM	COB	COB$_DELNO_R_S
	MAC	SYM	COB	COB$_DELUNOFIL
	MAC	SYM	COB	COB$_DISMORMAX
	MAC	SYM	COB	COB$_EOFON_ACC
	MAC	SYM	COB	COB$_ERRDURACC
	MAC	SYM	COB	COB$_ERRDURDIS
	MAC	SYM	COB	COB$_ERRDURSOR
	MAC	SYM	COB	COB$_ERRON_FIL
	MAC	SYM	COB	COB$_EXPDBOVER
	MAC	SYM	COB	COB$_FAIFREEVM
	MAC	SYM	COB	COB$_FAIGET_EF
	MAC	SYM	COB	COB$_FAIGET_VM
	MAC	SYM	COB	COB$_FATINTERR
	MAC	SYM	COB	COB$_FILALRCLO
	MAC	SYM	COB	COB$_FILALRLOC
	MAC	SYM	COB	COB$_FILALROPE
	MAC	SYM	COB	COB$_FILCLOLOC
	MAC	SYM	COB	COB$_FILNOTFOU
	MAC	SYM	COB	COB$_GOTO_ALT
	MAC	SYM	COB	COB$_INTDIVZER
	MAC	SYM	COB	COB$_INTEXPOVE
	MAC	SYM	COB	COB$_INTEXPUND
	MAC	SYM	COB	COB$_INTRESOPE
	MAC	SYM	COB	COB$_INVARG
	MAC	SYM	COB	COB$_INVCHANAM
	MAC	SYM	COB	COB$_INVDECDIG
	MAC	SYM	COB	COB$_INVLINVAL
	MAC	SYM	COB	COB$_KEYNOTMAT
	MAC	SYM	COB	COB$_LSTHNDLDB
	MAC	SYM	COB	COB$_LSTHNDUSE
	MAC	SYM	COB	COB$_NAMNOTLIN
	MAC	SYM	COB	COB$_NESERRPER
	MAC	SYM	COB	COB$_NORMAL
	MAC	SYM	COB	COB$_NO_NEXLOG
	MAC	SYM	COB	COB$_NO_NEXVAL
	MAC	SYM	COB	COB$_NO_SPACE
	MAC	SYM	COB	COB$_NO_USEPRO
	MAC	SYM	COB	COB$_OCCDEPOVE
	MAC	SYM	COB	COB$_OPTMISCLO
	MAC	SYM	COB	COB$_OPTMISOPE
	MAC	SYM	COB	COB$_OPTMISREA
	MAC	SYM	COB	COB$_OPTMISSTA
	MAC	SYM	COB	COB$_ORGNOTMAT
	MAC	SYM	COB	COB$_PRIKEYCHA
	MAC	SYM	COB	COB$_REAINCOPE
	MAC	SYM	COB	COB$_REASMAMIN
	MAC	SYM	COB	COB$_REAUNOFIL
	MAC	SYM	COB	COB$_RECACTPER
	MAC	SYM	COB	COB$_RECACTUSE
	MAC	SYM	COB	COB$_RECLOCDEL
	MAC	SYM	COB	COB$_RECLOCREA
	MAC	SYM	COB	COB$_RECLOCREW
	MAC	SYM	COB	COB$_RECLOCSTA
	MAC	SYM	COB	COB$_RECLOCWRI
	MAC	SYM	COB	COB$_RECLOC_OK
	MAC	SYM	COB	COB$_RECNOTEXI
	MAC	SYM	COB	COB$_RECNOTLOC
	MAC	SYM	COB	COB$_REWCREDUP
	MAC	SYM	COB	COB$_REWDISDUP
	MAC	SYM	COB	COB$_REWINCOPE
	MAC	SYM	COB	COB$_REWNO_R_S
	MAC	SYM	COB	COB$_REWSMAMIN
	MAC	SYM	COB	COB$_REWUNOFIL
	MAC	SYM	COB	COB$_SETEXTFAI
	MAC	SYM	COB	COB$_STAINCOPE
	MAC	SYM	COB	COB$_STAUNOFIL
	MAC	SYM	COB	COB$_SUBOVELON
	MAC	SYM	COB	COB$_TIMOVELON
	MAC	SYM	COB	COB$_UNDEF_EXP
	MAC	SYM	COB	COB$_UNEINSCON
	MAC	SYM	COB	COB$_UNLNO_CUR
	MAC	SYM	COB	COB$_UNLUNOFIL
	MAC	SYM	COB	COB$_WRIBEYBOU
	MAC	SYM	COB	COB$_WRICREDUP
	MAC	SYM	COB	COB$_WRIDISDUP
	MAC	SYM	COB	COB$_WRIDUPALT
	MAC	SYM	COB	COB$_WRIDUPKEY
	MAC	SYM	COB	COB$_WRIINCOPE
	MAC	SYM	COB	COB$_WRINOTASC
	MAC	SYM	COB	COB$_WRISMAMIN
	MAC	SYM	COB	COB$_WRIUNOFIL

;+
; The following routines are N O T in the sharable library.  They
; are tabulated here to provide a complete tabulation of all entry
; points known to COBOL when this module is assembled in the "ALLGBL"
; mode.
;-

; MODULE COB$CALL -- Support COBOL CALL
	MAC	NOVECT	COB	COB$CALL

; MODULE COB$CANCEL -- Support COBOL CANCEL
	MAC	NOVECT	COB	COB$CANCEL

; MODULE COB$CNVOUT -- Support conversion routines
	MAC	NOVECT	COB	COB$CNVOUT

; MODULE COB$CVTDP -- Convert Double to Packed
	MAC	NOVECT	COB	COB$CVTDP_R9

; MODULE COB$CVTRDP -- Convert Rounded Double to Packed
	MAC	NOVECT	COB	COB$CVTRDP_R9

; MODULE COB$CVTPD -- Convert Packed to Double
	MAC	NOVECT	COB	COB$CVTPD_R9

; MODULE COB$CVTDQ -- Convert Double to Quadword
	MAC	NOVECT	COB	COB$CVTDQ_R8

; MODULE COB$CVTRDQ -- Convert Rounded Double to Quadword
	MAC	NOVECT	COB	COB$CVTRDQ_R8

; MODULE COB$CVTQD -- Convert Quadword to Double
	MAC	NOVECT	COB	COB$CVTQD_R8

; MODULE COB$CVTFP -- Convert Floating to Packed
	MAC	NOVECT	COB	COB$CVTFP_R9

; MODULE COB$CVTRFP -- Convert Rounded Floating to Packed
	MAC	NOVECT	COB	COB$CVTRFP_R9

; MODULE COB$CVTPF -- Convert Packed to Floaing
	MAC	NOVECT	COB	COB$CVTPF_R9

; MODULE COB$CVTFQ -- Convert Floating to Quadword
	MAC	NOVECT	COB	COB$CVTFQ_R8

; MODULE COB$CVTRFQ -- Convert Rounded Floating to Quadword
	MAC	NOVECT	COB	COB$CVTRFQ_R8

; MODULE COB$CVTQF -- Convert Quadword to Floating
	MAC	NOVECT	COB	COB$CVTQF_R8

; MODULE COB$EXPI -- CIT exponentiation
	MAC	NOVECT	COB	COB$EXPI
	MAC	NOVECT	COB	COB$EXPI_OSE

; MODULE COB$LINAGE -- Support LINAGE
	MAC	NOVECT	COB	COB$LINAGE
	MAC	NOVECT	COB	COB$INIT_LINAGE
	MAC	NOVECT	COB	COB$TERM_LINAGE

; MODULE COB$RMS_BLOCKS -- RMS data block
	MAC	NOVECT	COB	COB$AB_NAM

; MODULE COB$SET_SWITCH -- Set external switches
	MAC	NOVECT	COB	COB$SET_SWITCH

; MODULE COB$SWITCH -- Support switches
	MAC	NOVECT	COB	COB$SWITCH

; MODULE LIB$AB_ASC_EBC -- ASCII to EBCDIC translation table
	MAC	NOVECT	LIB	LIB$AB_ASC_EBC

; MODULE LIB$AB_CVT_O_U -- Overpunch to Unsigned translation table
	MAC	NOVECT	LIB	LIB$AB_CVT_O_U

; MODULE LIB$AB_EBC_ASC -- EBCDIC to ASCII translation table
	MAC	NOVECT	LIB	LIB$AB_EBC_ASC


;	P O S T  V M S  V E R S I O N  2 . 0  A D D I T I O N S
;	-------------------------------------------------------

; This point marks where the modules added after VMS Version 2.0 are
; placed (unless they fit in some existing hole).  
; The vector entries to the shared components come first, and
; are then followed by the non-vectored (non-shared) entries and the new
; symbol definitions.
;	There are two flavors of shared components -- those that are
; vectored and those that aren't.  Those that aren't are in the shared
; image solely for the purpose of binding of VMSRTL.EXE, but are not
; accessible from outside of the image.
;
; S H A R E D  C O M P O N E N T S  ( V E C T O R E D )
; -----------------------------------------------------


; MODULE LIB$LUN
	MAC	CALL	LIB	LIB$FREE_LUN
	MAC	CALL	LIB	LIB$GET_LUN

; MODULE LIB$EF
	MAC	CALL	LIB	LIB$FREE_EF
	MAC	CALL	LIB	LIB$GET_EF
	MAC	CALL	LIB	LIB$RESERVE_EF

; MODULE LIB$ANALYZE_SDESC
	MAC	CALL	LIB	LIB$ANALYZE_SDESC
	MAC	JSB	LIB	LIB$ANALYZE_SDESC_R2

; MODULE STR$ANALYZE_SDESC
	MAC	CALL	STR	STR$ANALYZE_SDESC
	MAC	JSB	STR	STR$ANALYZE_SDESC_R1

; MODULE LIB$FILESCAN -- find files matching wild-card description
	MAC	CALL	LIB	LIB$FILE_SCAN
	MAC	CALL	LIB	LIB$FIND_FILE



; S H A R E D  C O M P O N E N T S  ( N O N - V E C T O R E D )
; -------------------------------------------------------------

; MODULE STR$$CHECK_STATUS
	MAC	NOVECT	STR	STR$$CHECK_STATUS_R2


; N O N - S H A R E D  C O M P O N E N T S
; ----------------------------------------

; MODULE LIB$AB_ASC_EBC_REV -- Reversible ASCII to EBCDIC trans. table
	MAC	NOVECT	LIB	LIB$AB_ASC_EBC_REV

; MODULE LIB$AB_EBC_ASC_REV -- Reversible EBCDIC to ASCII trans. table
	MAC	NOVECT	LIB	LIB$AB_EBC_ASC_REV

; MODULE LIB$AB_CVTPT_Z -- packed decimal to zoned translation table
	MAC	NOVECT	LIB	LIB$AB_CVTPT_Z

; MODULE LIB$AB_CVTTP_Z -- zoned to packed decimal translation table
	MAC	NOVECT	LIB	LIB$AB_CVTTP_Z

; MODULE LIB$CALLG -- execute CALLG instruction
	MAC	NOVECT	LIB	LIB$CALLG

; MODULE LIB$DECODE_FAULT -- decode instruction stream
	MAC	NOVECT	LIB	LIB$DECODE_FAULT

; MODULE LIB$EDIV -- execute EDIV instruction
	MAC	NOVECT	LIB	LIB$EDIV

; MODULE LIB$EMUL -- execute EMUL instruction
	MAC	NOVECT	LIB	LIB$EMUL

; MODULE LIB$MOVC3 -- execute MOVC3 instruction
	MAC	NOVECT	LIB	LIB$MOVC3

; MODULE LIB$MOVC5 -- execute MOVC5 instruction
	MAC	NOVECT	LIB	LIB$MOVC5

; MODULE COB$AB_DEEDIT -- COBOL translation table for "de-editing
	MAC	NOVECT	COB	COB$AB_DEEDIT

; MODULE COB$DBEXCEPTION -- COBOL Data Base Exception Processing
	MAC	NOVECT	COB	COB$DBEXCEPTION

; MODULE COB$AB_SPANC2 -- COBOL  SPANC translation table II
	MAC	NOVECT	COB	COB$AB_SPANC2

; MODULE LIB$CVTDXDX -- LIB general data type conversion routine
	MAC	NOVECT  LIB     LIB$CVT_DX_DX

; MODULE LIB$$PACK_ARITH -- perform packed arithmetic for STR$DIVIDE
	MAC	NOVECT	LIB	LIB$$CVT_STR_PACK_R9
	MAC	NOVECT	LIB	LIB$$CALC_D_R7
	MAC	NOVECT  LIB	LIB$$CALC_Q_R9
	MAC	NOVECT	LIB	LIB$$ADJUST_Q_R9
	MAC	NOVECT	LIB	LIB$$MUL_PACK_R10
	MAC	NOVECT	LIB	LIB$$SUB_PACK_R8
	MAC	NOVECT  LIB	LIB$$ROUND_R7
	MAC	NOVECT	LIB	LIB$$CVT_PACK_STR_R8

; MODULE STR$ARITH -- string arithmetic (added entry point STR$DIVIDE)
	MAC	NOVECT	STR	STR$DIVIDE

; MODULE FOR$INIUND -- FORTRAN underflow handler initialization
	MAC	NOVECT	FOR	FOR$INIT_UNDER

; MODULE FOR$UNDERF -- FORTRAN underflow handler
	MAC	NOVECT	FOR	FOR$UNDERFLOW_HANDLER

; MODULE OTS$POWLULU -- unsigned ** unsigned integer power
	MAC	NOVECT	OTS	OTS$POWLULU

; S Y M B O L  D E F I N I T I O N S
; ----------------------------------





	.END	RTL$START		; start address
