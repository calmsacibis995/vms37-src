MODULE STR$REPLACE (		! replace a substring in a string

		IDENT = '1-005'	! File: STRREPLAC.B32	Edit: RKR1005

		   ) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY: String support library
!
! ABSTRACT:
!
!	This module take an input string, an output string, and a 
!	replacement string of any supported class or dtype.  It copies 
!	the source string to the destination string replacing the part 
!	of the source string specified by a starting position and an 
!	ending position by the replacement string.
!
! ENVIRONMENT: User mode, AST level or not or mixed
!
! AUTHOR: R. Will, CREATION DATE: 2-Dec-79
!
! MODIFIED BY:
!
!  R. Will, 2-Dec-79: VERSION 01
! 1-001	- original
! 1-002 - String speedup, make JSB entry do code in line.  
!	  RW  8-Jan-1980
! 1-003 - Enhance to recognize additional classes of descriptors by
!	  using $STR$GET_LEN_ADDR to extract length and address of
!	  first data byte.  Remove string interlocking code.
!	  RKR 27-APR-81
! 1-004 - Speed up code.  RKR 7-OCT-1981.
! 1-005 - Use STR$COPY_R_R8 for copy operation.  Use $STR$SIGNAL_FATAL
!	  instead of $STR$CHECK_STATUS.  RKR 18-NOV-1981.
!--

!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE 
		(EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!

REQUIRE 'RTLIN:STRLNK';		! Use require file with string linkage

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    STR$REPLACE,			! replace a substring
    STR$REPLACE_R8 : STR$JSB_REPLACE;	! replace a substring, JSB entry

!
! INCLUDE FILES:
!

REQUIRE 'RTLIN:RTLPSECT';	! Declare PSECTs code

REQUIRE 'RTLIN:STRMACROS';	! use string macros to code

LIBRARY 'RTLSTARLE';		! STARLET library for macros and symbol

!
! MACROS: NONE
!

!
! EQUATED SYMBOLS: NONE
!

!
! PSECT DECLARATIONS
!

DECLARE_PSECTS (STR);

!
! OWN STORAGE: NONE
!

!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    LIB$STOP,				! Routine to signal error
    STR$COPY_R_R8 : STR$JSB_COPY_R ;	! Routine to do the copy

EXTERNAL LITERAL
    STR$_NORMAL,			! successful completion
    STR$_STRTOOLON,			! tried to create string longer
					!  than 65535
    STR$_ILLSTRSPE,			! illegal string specification
    STR$_ILLSTRPOS;			! illegal string position

GLOBAL ROUTINE STR$REPLACE (		! Replace a substring

	DEST_DESC,		! Pointer to destination descriptor
	SRC_DESC,		! Pointer to source descriptor
	START_POS,		! First character to be included
	END_POS,		! Last character position to include
	REPLACE_DESC		! pointer to replacement string desc

			   ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine copies to the destination string, the characters 
!	from the beginning of the source string through the character 
!	before that specified by the start position (3rd input), then 
!	it continues copying to the destination string taking the 
!	input from the replacement string (the 5th input).  When the 
!	replacement string is exhausted, the copy continues from the 
!	source string starting at the character position after the end 
!	position (4th input parameter) until the source string is 
!	exhausted.  The string is built in a temporary and copied to 
!	the destination string (by JSB to STR$COPY_R_R8) according
!	to the syntax of the class of the destination string.  The 
!	following conditions will return warnings, but the listed 
!	actions will be taken.
!	If the starting position is < 1, 1 is used.  If the ending 
!	position is > length of the source string, the length of the 
!	source string is used.  If the starting position > the ending 
!	position, the overlapping portions of the source string will be 
!	copied twice.  The CALL entry is implemented by JSBing to the 
!	JSB entry.
!
! FORMAL PARAMETERS:
!
!	DEST_DESC.wt.dx		pointer to destination string descriptor
!	SRC_DESC.rt.dx		pointer to source string descriptor
!	START_POS.rl.r		character position in source to start 
!				substring
!	END_POS.rl.r		character position in source to end 
!				substring
!	REPLACE_DESC.rt.dx	pointer to replacement string descriptor
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION CODES:
!
!	any codes returned by STR$REPLACE_R8
!
! SIDE EFFECTS:
!
!	any side effects of STR$REPLACE_R8
!
!--

    BEGIN

    MAP
	SRC_DESC :     REF $STR$DESCRIPTOR,
	REPLACE_DESC : REF $STR$DESCRIPTOR,
	DEST_DESC :    REF $STR$DESCRIPTOR;

    RETURN STR$REPLACE_R8 (
			DEST_DESC [0,0,0,0],
			SRC_DESC [0,0,0,0],
			..START_POS,
			..END_POS,
			REPLACE_DESC [0,0,0,0]);

    END;					!End of STR$REPLACE


GLOBAL ROUTINE STR$REPLACE_R8 (		! replace a substring

	DEST_DESC,		! Pointer to destination descriptor
	SRC_DESC,		! Pointer to source descriptor
	START_POS,		! First character to be included
	END_POS,		! Last character position to include
	REPLACE_DESC		! Pointer to replacement string desc

			      ) : STR$JSB_REPLACE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine copies to the destination string, the characters 
!	from the beginning of the source string through the character 
!	before that specified by the start position (3rd input), then 
!	it continues copying to the destination string taking the input 
!	from the replacement string (the 5th input).  When the 
!	replacement string is exhausted, the copy continues from the 
!	source string starting at the character position after the end 
!	position (4th input parameter) until the source string is 
!	exhausted.  The string is built in a
!	temporary and copied to the destination string
!	(by JSB to STR$COPY_R_R8) according
!	to the syntax of the class of the destination string.  The 
!	following conditions will return warnings, but the listed 
!	actions will be taken.
!	If the starting position is < 1, 1 is used.  If the ending 
!	position is > length of the source string, the length of the 
!	source string is used.  If the starting position > the ending 
!	position, the overlapping portions of the source string will 
!	be copied twice.
!
! FORMAL PARAMETERS:
!
!	DEST_DESC.wt.dx		pointer to destination string descriptor
!	SRC_DESC.rt.dx		pointer to source string descriptor
!	START_POS.rl.v		character position in source to start 
!				substring
!	END_POS.rl.v		character position in source to end 
!				substring
!	REPLACE_DESC.rt.dx	pointer to replacement string descriptor
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION CODES:
!
!	STR$_NORMAL		successful completion
!	STR$_TRU		string was truncated when copied into 
!				destination
!	STR$_ILLSTRPOS		if START_POS or END_POS is < 0 or > 
!				source-length
!	STR$_ILLSTRSPE		if START_POS > END_POS
!
! SIDE EFFECTS:
!
!	allocation or deallocation of dynamic string space
!	may signal STR$_INSVIRMEM, STR$_ILLSTRCLA or STR$_FATINTERR
!
!--

    BEGIN

    LOCAL
	COPY_LENGTH,			! length of string built
	ALLOC_LENGTH : UNSIGNED WORD,	! actual length 
	NEW_POINTER,			! keep place in temp string
	ACTUAL_START,			! 1 <= actual_start <= srclen
	ACTUAL_END,			! 1 <= actual_end <= srclen
	STATUS,				! status returned by copy
	RETURN_STATUS,			! save status for this routine
	IN_LEN,				! length of input string
	IN_ADDR,			! addr of 1st byte of input
	REPL_LEN,			! length of replacement string
	REPL_ADDR,			! addr of 1st byte of replace.
	TEMP_DESC : $STR$DESCRIPTOR;	! area to build output string

    MAP
	SRC_DESC :     REF $STR$DESCRIPTOR,
	REPLACE_DESC : REF $STR$DESCRIPTOR,
	DEST_DESC :    REF $STR$DESCRIPTOR;

    RETURN_STATUS = 1 ;		! Assume success to follow

!+
! precompute lengths and addresses involved
!-
    $STR$GET_LEN_ADDR ( SRC_DESC, IN_LEN, IN_ADDR ) ;
    $STR$GET_LEN_ADDR ( REPLACE_DESC, REPL_LEN, REPL_ADDR ) ;

    ACTUAL_START = .START_POS;
    ACTUAL_END = .END_POS;

!+
! detect error if START_POS > END_POS
!-

    IF .ACTUAL_END LSS .ACTUAL_START THEN
	RETURN_STATUS = STR$_ILLSTRSPE;		! START_POS > END_POS

!+
! actual_end is >= 0 and  <= source string length
!-

    IF .IN_LEN LSS .ACTUAL_END
    THEN
	BEGIN
	RETURN_STATUS = STR$_ILLSTRPOS;		! END_POS is too large
	ACTUAL_END = .IN_LEN ;			! use srclen, remember 
						! error
	END
    ELSE IF .ACTUAL_END LSS 0
	THEN
	    BEGIN
	    RETURN_STATUS = STR$_ILLSTRPOS;	! END_POS is too small
	    ACTUAL_END = 0;			! Use 1, remember error
	    END;

!+
! actual_start is >= 1 and  <= source string length + 1
!-

    IF .IN_LEN + 1 LSS .ACTUAL_START
    THEN
	BEGIN
	RETURN_STATUS = STR$_ILLSTRPOS;		! START_POS is too large
	ACTUAL_START = .IN_LEN + 1; 		! use srclen, remember 
						! error
	END
    ELSE IF .ACTUAL_START LSS 1
	THEN
	    BEGIN
	    RETURN_STATUS = STR$_ILLSTRPOS;	! START_POS is too small
	    ACTUAL_START = 1;			! use 1, remember error
	    END;

!+
! Create a temp descriptor and build destination string in it.
!-


    TEMP_DESC [DSC$W_LENGTH] = 0 ;		! initialize descriptor
    TEMP_DESC [DSC$B_DTYPE]  = DSC$K_DTYPE_T ;
    TEMP_DESC [DSC$B_CLASS]  = DSC$K_CLASS_D ;
    TEMP_DESC [DSC$A_POINTER]= 0 ;

!+
! Number to copy is number from src + number from replace
!-
    COPY_LENGTH = .IN_LEN - .ACTUAL_END + .ACTUAL_START - 1 + .REPL_LEN;

    IF .COPY_LENGTH GTR 65535
    THEN RETURN_STATUS = STR$_STRTOOLON		! remember fatal error
    ELSE
	BEGIN
	ALLOC_LENGTH = .COPY_LENGTH;	! need word unsigned for macro

					! allocate space to temp
	IF (NOT (STATUS = $STR$ALLOC_TMP (.ALLOC_LENGTH, TEMP_DESC)))
	THEN RETURN_STATUS = .STATUS	! if fails, remember failure
	ELSE				! if it succeeds continue
	    BEGIN

	    !+
	    ! copy up to start_pos from source string into temp string
	    !-
	    NEW_POINTER = CH$MOVE (.ACTUAL_START - 1, .IN_ADDR,
				   .TEMP_DESC [DSC$A_POINTER]);

	    !+
	    ! copy entire replacement string onto end of temp string
	    !-
	    NEW_POINTER = CH$MOVE (.REPL_LEN, .REPL_ADDR, .NEW_POINTER);

	    !+
	    ! copy from END_POS to end in source string onto end of temp
	    ! string.
	    !-
	    CH$MOVE (.IN_LEN - .ACTUAL_END,
		     CH$PLUS (.IN_ADDR, .ACTUAL_END),
		     .NEW_POINTER);

	    !+
	    ! Copy the temp to the destination string and deallocate 
	    ! the temp
	    !-

	    STATUS = STR$COPY_R_R8 ( 
				.DEST_DESC,
				.TEMP_DESC [DSC$W_LENGTH],
				.TEMP_DESC [DSC$A_POINTER] ) ;
	    IF .STATUS NEQ SS$_NORMAL
	    THEN RETURN_STATUS = .STATUS;	! copy truncated, or
						! fatal error, return
						! instead of previous 
						! status

	    IF (NOT (STATUS = $STR$DEALOC_TMP (TEMP_DESC))) ! deallocate
							    ! the temp
	    THEN RETURN_STATUS = .STATUS;
	    END;				! end of allocate else

	END;					! end of STRTOOLON else

    $STR$SIGNAL_FATAL (RETURN_STATUS);		! signal severe errors
    RETURN .RETURN_STATUS;
    END;					!End of STR$REPLACE

END						!End of module

ELUDOM
