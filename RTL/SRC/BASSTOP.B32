MODULE BAS$STOP (				!
		IDENT = '1-006'			! File: BASSTOP.B32 EDIT: PL1006
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  BASIC-PLUS-2 Miscellaneous
!
! ABSTRACT:
!
!	This module contains the BASIC STOP statement, which prompts
!	the user to EXIT or CONTINUE.
!
! ENVIRONMENT:  VAX-11 User Mode
!
! AUTHOR: John Sauter, CREATION DATE: 10-MAY-1979
!
! MODIFIED BY:
!
! 1-001	- Original.
! 1-002	- Change LIB$S and OTS$S to STR$.  JBS 21-MAY-1979
! 1-003	- Use LIB$GET_COMMAND instead of doing BASIC I/O.  JBS 14-SEP-1979
! 1-004	- Add BAS$$STOP_INIT, for the RUN command.  JBS 15-SEP-1979
! 1-005 - If just a return is typed then just signal WHAT?. FM 5-FEB-81.
! 1-006 - LIB$STOP should be declared EXTERNAL.  PLL 20-Nov-81
!--

!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!
!	NONE
!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    BAS$STOP : NOVALUE,				! EXIT or CONTINUE
    BAS$$STOP_INIT : NOVALUE,			! Set up for the RUN environment
    FREE_STRINGS;				! Handler to free strings

!
! INCLUDE FILES:
!

REQUIRE 'RTLIN:RTLPSECT';			! Macros for defining psects

LIBRARY 'RTLSTARLE';				! System symbols

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! PSECTS:
!
DECLARE_PSECTS (BAS);				! Declare psects for BAS$ facility
!
! OWN STORAGE:
!

OWN
    RUN_CMD : INITIAL (0);			! 1 means we are in the RUN environment.

!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    LIB$STOP : NOVALUE,				! Signal fatal error
    LIB$GET_COMMAND,				! Read a command
    BAS$$SIGNAL : NOVALUE,			! Signal an error
    STR$FREE1_DX,				! Free a string
    LIB$MATCH_COND,				! Match condition values
    BAS$$STOP : NOVALUE;			! Signal a fatal error

!+
! The following are the error codes used in this module.
!-

EXTERNAL LITERAL
    BAS$K_STO : UNSIGNED (8),			! Stop
    BAS$K_WHA : UNSIGNED (8);			! What?

!+
! The following code is used in the call to $EXIT
!-

EXTERNAL LITERAL
    BAS$_STO;					! Stop


GLOBAL ROUTINE BAS$STOP : NOVALUE = 		! Exit or Continue

!++
! FUNCTIONAL DESCRIPTION:
!
!	Prompt the user to EXIT or CONTINUE his program.  On entry, a
!	message is signalled to show the line number of the STOP
!	statement.  If the user elects to exit, we call SYS$EXIT.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	May never return to its caller.
!
!--

    BEGIN

    LOCAL
	PROMPT_DESC : BLOCK [8, BYTE],		! The prompt
	A_DESC : BLOCK [8, BYTE] VOLATILE,	! String to receive message
	A_BUF : REF VECTOR [65535, BYTE],	! Characters of that string
	EXIT_OR_CONT;				! Flag for what we are to do

!+
! Enable a handler to free our string in case we are running under
! the RUN command, and the run-time environment elects not to
! return here after our STOP signal.
!-

    ENABLE
	FREE_STRINGS (A_DESC);

!+
! Set up the descriptors.
!-
    PROMPT_DESC [DSC$W_LENGTH] = %CHARCOUNT ('#');
    PROMPT_DESC [DSC$B_DTYPE] = DSC$K_DTYPE_T;
    PROMPT_DESC [DSC$B_CLASS] = DSC$K_CLASS_S;
    PROMPT_DESC [DSC$A_POINTER] = UPLIT (%ASCII'#');
    A_DESC [DSC$W_LENGTH] = 0;
    A_DESC [DSC$B_DTYPE] = DSC$K_DTYPE_T;
    A_DESC [DSC$B_CLASS] = DSC$K_CLASS_D;
    A_DESC [DSC$A_POINTER] = 0;
!+
! Print a message giving the line number of the STOP statement.
! This is done using the signalling facility.
!-
    BAS$$SIGNAL (BAS$K_STO);
!+
! Now we wait for a typein to indicate whether to exit or continue.
! This is suppressed in the RUN environment.
!-

    IF ( NOT .RUN_CMD)
    THEN
	BEGIN

	DO
	    BEGIN

	    LOCAL
		OUT_LEN,
		GET_COM_STATUS;

!+
! Ask whether or exit or continue.  The prompt is a #.
!-
	    GET_COM_STATUS = LIB$GET_COMMAND (A_DESC, PROMPT_DESC, OUT_LEN);

	    IF ( NOT .GET_COM_STATUS) THEN LIB$STOP (.GET_COM_STATUS);

!+
! If just a return is typed then sigal WHAT.
! If the first character of the response is a C, we are to continue.
! If an E, we are to exit.  Otherwise, print an error message and
! ask again.
!-

	    IF .OUT_LEN EQL 0
	    THEN
		BEGIN
		BAS$$SIGNAL (BAS$K_WHA);
		EXIT_OR_CONT = 0;
		END
	    ELSE
		BEGIN
		A_BUF = .A_DESC [DSC$A_POINTER];

		SELECTONE .A_BUF [0] OF
		    SET

		    [%C'C', %C'c'] :
			EXIT_OR_CONT = 1;

		    [%C'E', %C'e'] :
			EXIT_OR_CONT = 2;

		    [OTHERWISE] :
			BEGIN
!+
! Print the WHAT message by signaling.
!-
			BAS$$SIGNAL (BAS$K_WHA);
			EXIT_OR_CONT = 0;
			END;
		    TES;

		END;

	    END
	UNTIL (.EXIT_OR_CONT NEQ 0);

!+
! When we get here, we have received either an EXIT or CONTINUE
! command.  First free our string.
!-
	STR$FREE1_DX (A_DESC);
!+
! If the user said to exit, do so.
!-

	IF (.EXIT_OR_CONT EQL 2) THEN $EXIT (CODE = BAS$_STO);

	END;

!+
! Otherwise, return to our caller.
!-
    RETURN;
    END;					! end of BAS$STOP


GLOBAL ROUTINE BAS$$STOP_INIT : NOVALUE = 	! Set up for RUN command

!++
! FUNCTIONAL DESCRIPTION:
!
!	Set up for the RUN environment.  Since this image is to run under the RUN
!	command, the keyboard monitor will intercept the STOP call (by trapping
!	the signal) and will return only if and when the program is to continue.
!	Therefore, do not ask (redundently) for Exit or Continue.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	RUN_CMD.wb
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Disables the normal dialog.
!
!--

    BEGIN
!+
! Flag that we are in the RUN environment.  This will prevent the
! normal dialog on STOP.
!-
    RUN_CMD = 1;
    RETURN;
    END;					! end of BAS$$RUN_INIT


ROUTINE FREE_STRINGS (				! Free local strings
	SIG, 					! Signal vector
	MECH, 					! Mechanism vector
	ENBL					! Enable vector
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	If we are unwinding, free the local strings.  They are passed
!	in the enable vector.
!
! FORMAL PARAMETERS:
!
!	SIG.rl.a	A counted vector of parameters to LIB$SIGNAL/STOP
!	MECH.rl.a	A counted vector of info from CHF
!	ENBL.ra.a	A counted vector of ENABLE argument addresses.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always SS$_RESIGNAL, which is ignored when unwinding.
!
! SIDE EFFECTS:
!
!	Frees all of the strings passed as enable arguments.
!
!--

    BEGIN

    MAP
	SIG : REF VECTOR,
	MECH : REF VECTOR,
	ENBL : REF VECTOR;

!+
! Only free the strings if this is the UNWIND condition.
!-

    IF ( NOT (LIB$MATCH_COND (SIG [1], %REF (SS$_UNWIND)))) THEN RETURN (SS$_RESIGNAL);

!+
! Go through the enable arguments, freeing them.
!-

    INCR ARG_NO FROM 1 TO .ENBL [0] DO
	BEGIN
	STR$FREE1_DX (.ENBL [.ARG_NO]);
	END;

    RETURN (SS$_RESIGNAL);
    END;					! end of FREE_STRINGS
END						! end of module BAS$STOP

ELUDOM
