MODULE STR$$SRCH_INTLK (			! Search the string interlock queue
		IDENT = '1-001'			! File: STRSRCHIN.B32
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY: String Library
!
! ABSTRACT:
!
!	This module contains the code and data base to support
!	the string interlock macros, used in the string facility.
!
! ENVIRONMENT: User mode, AST reentrant.
!
! AUTHOR: John Sauter, CREATION DATE: 29-OCT-1979
!
! MODIFIED BY:
!
! 1-001	- Original.  JBS 29-OCT-1979
!--

!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!
!	NONE
!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    STR$$SRCH_INTLK;				! Search the string interlock queue

!
! INCLUDE FILES:
!

REQUIRE 'RTLIN:RTLPSECT';			! DECLARE_PSECTS macro

LIBRARY 'RTLSTARLE';				! System symbols

!
! EQUATED SYMBOLS:
!
!	NONE
!
! PSECTS
!
DECLARE_PSECTS (STR);				! Define psects
!
! OWN AND GLOBAL STORAGE:
!

GLOBAL
    STR$$Q_INTLK : VECTOR [2, LONG];		! Root of interlock queue

!
! EXTERNAL REFERENCES:
!
!+
! The following are the error codes used in this module:
!-

EXTERNAL LITERAL
    STR$_STRIS_INT,				! String is interlocked
    STR$_FATINTERR;				! Fatal internal error


GLOBAL ROUTINE STR$$SRCH_INTLK (		! Search the string interlock queue
	OUR_STRING				! String we are searching for
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	If the INSQUE used to place a string in the string interlock
!	queue indicates that there is at least one string already in
!	the queue, this routine is called to see if the string is
!	already interlocked.  If it is, this routine returns
!	STR$_STRIS_INT, which can be passed to LIB$STOP.  If not,
!	this routine returns SS$_NORMAL.
!
! CALLING SEQUENCE:
!
!	status.wlc.v = STR$$SRCH_INTLK (our_string.rt.dx)
!
! FORMAL PARAMETERS:
!
!	our_string	The string we are searching for on the string
!			interlock queue.
!
! IMPLICIT INPUTS:
!
!	STR$$Q_INTLK	The head of the string interlock queue.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION CODES:
!
!	SS$_NORMAL	- Successful completion, string not interlocked.
!	STR$_STRIS_INT	- String is interlocked.
!	STR$_FATINTERR	- The string queue is messed up
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	HIT_COUNT,
	THIS_STRING : REF VECTOR [3, LONG];	! Interlock block on string queue

!+
! Search the string interlock queue, looking for our string.
! Even though we do not disable ASTs we cannot be led astray by one,
! because the discipline of the string interlock queue requires that
! a routine remove anything it adds to the queue, so an AST routine
! will leave the queue the same as when it started.
!-
    HIT_COUNT = 0;
    THIS_STRING = .STR$$Q_INTLK [0];

    WHILE (.THIS_STRING NEQA STR$$Q_INTLK [0]) DO
	BEGIN

	IF (.THIS_STRING [2] EQLA .OUR_STRING) THEN HIT_COUNT = .HIT_COUNT + 1;

	THIS_STRING = .THIS_STRING [0];
	END;

!+
! The "hit count" will be 1 if the string is in the queue exactly once,
! which is what we expect if the string is not interlocked, since it was
! put in the queue before we were called.  If the "hit count" is 2 or
! greater then the string is interlocked.  The count can be greater than
! 2 if the string is in use several times in a read-only context.
! If the "hit count" is 0 we have an error.
!-

    IF (.HIT_COUNT EQL 1)
    THEN
	RETURN (SS$_NORMAL)
    ELSE

	IF (.HIT_COUNT GTR 1) THEN RETURN (STR$_STRIS_INT) ELSE RETURN (STR$_FATINTERR);

    END;					! End of routine STR$$SRCH_INTLK

END						!End of module STR$$SRCH_INTLK

ELUDOM
