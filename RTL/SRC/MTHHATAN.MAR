	.TITLE	MTH$HATAN	; H Floating Point Arc Tangent Functions 
				; (HATAN,HATAN2,HATAND,HATAND2)
	.IDENT /2-006/		; File: MTHHATAN.MAR  EDIT:  RNH2006
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;
; FACILITY: MATH LIBRARY
;++
; ABSTRACT:
;
; MTH$HATAN  is  a function which returns the H floating point arctangent 
; value (in radians) of its H floating point argument.  MTH$HATAN2 is two  
; argument H floating arctangent.  The call is standard call-by-reference.
; MTH$HATAN_R8 is a special routine which is the same as MTH$HATAN except 
; that a faster non-standard JSB call is used with the argument in  R0-R3 
; and no registers are saved.
;
; MTH$HATAND  is  a  function which returns the H floating point arctangent 
; value (in degrees) of its H floating point argument.  MTH$HATAND2 is  two  
; argument  H floating arctangent.  The call is standard call-by-reference.
; MTH$HATAND_R8 is a special routine which is the same as MTH$HATAND except 
; that  a  faster  non-standard JSB call is used with the argument in R0-R3 
; and no registers are saved.
;
;--
;
; VERSION: 1
;
; HISTORY:
; AUTHOR:
;	John A. Wheeler, 03-Oct-1979: Version 1
;
; MODIFIED BY:
;
;
; VERSION: 2
;
; HISTORY:
; AUTHOR:
;	Bob Hanek, 10-Jun-1981: Version 2
;
; MODIFIED BY:
;
;
; 



; Edit history for Version 1 of MTH$HATAN
;
; 1-001 - Adapted from MTH$GATAN version 1-001.  JAW 03-Oct-1979.
; 1-002 - Added degree entry points. RNH 15-MAR-1981
;
;
; Edit history for Version 1 of MTH$HATAN
;
; 2-002 - Use G^ addressing for externals.  SBL 24-Aug-1981
; 2-003 - Changed MTH$$AB_ATAN to MTH$$AB_ATAN_V.  RNH 29-Sep-81
; 2-004 - Change MTH$HATAND2 entry to MTH$HATAN2D in order to conform
;	  with original specification.  RNH 05-Oct-81
; 2-005 - Changed TSTB to TSTH in MTH$HATAND.  RNH 05-Oct-81
; 2-006 - Un-did edit 2-004 to comform with PL/1.
;	- Modified small argument logic to avoid a microcode bug in the
;	  FPA. RNH 18-Dec-81

	.SBTTL	DECLARATIONS		; Declarative Part of Module

;
; INCLUDE FILES:	MTHJACKET.MAR, MTHATAN.MAR
;
; EXTERNAL SYMBOLS:
;
	.DSABL	GBL
	.EXTRN	MTH$K_INVARGMAT
	.EXTRN	MTH$$SIGNAL		; Signal SEVERE error
	.EXTRN  MTH$$AB_ATAN_V		; Gobal table used by all Arctangent
					;    routines.  Part of MTHATAN.MAR
;

; EQUATED SYMBOLS:
;
	ACMASK = ^M<IV, R2, R3, R4, R5, R6, R7, R8>	; .ENTRY register mask,
							; int ovf enabled

;
; MACROS:	none
;
; PSECT DECLARATIONS:

	.PSECT	_MTH$CODE	PIC,SHR,LONG,EXE,NOWRT
					; program section for math routines
;
; OWN STORAGE:	none
;
; EXTERNALS:
;
	.EXTRN	MTH$$SIGNAL		; Signal a severe error
	.EXTRN	MTH$K_INVARGMAT		; Invalid argument to math library
	.DSABL	GBL			; No other externals allowed
;
; CONSTANTS:
;
H_M1.0:	.H_FLOATING	-1.0


;
;   ************************** Constants for HATAN ***************************
;   
;   
;   Each  entry of the HATAN_TABLE contains the the values of XHI, HATAN_XHI_LO
;   and HATAN_XHI_HI respectively.  The table is indexed by a pointer  obtained
;   from the MTH$$AB_ATAN_V table. The MTH$$AB_ATAN_V table is common to all of the
;   arctangent  routines  and is included as part of the MTHATAN module.  NOTE:
;   For performance reasons it is important to have  the  HATAN_TABLE  longword
;   aligned.
;   
;   
	.ALIGN	LONG

HATAN_TABLE:
 ; Entry  0
	.OCTA	^X00000000000000000000FC00AFF03FFD ; .105454429984092712402343750000000E+00
	.OCTA	^X3F80047B6BE701F08954A2CE08383F8B ; .310590568209781578539862675675049E-35
	.OCTA	^X1DE4A44B1AD2ED08F566CD64AE593FFD ; .105066110917812355541860264623494E+00
 ; Entry  1
	.OCTA	^X00000000000000000000E00007F63FFE ; .128888845443725585937500000000000E+00
	.OCTA	^X9DC0001F3C7BEDB05D58B33CC4F9BF8B ;-.532470013383326145019230697183989E-35
	.OCTA	^XD38AF577F4A3F5FB79B85E6F06843FFE ; .128182161118470788030782153769991E+00
 ; Entry  2
	.OCTA	^X000000000000000000007C003FEC3FFE ; .156212776899337768554687500000000E+00
	.OCTA	^X1000BAA52EA43F366EF48C38171BBF86 ;-.102527942775025756423409531871892E-36
	.OCTA	^X215F05DEB08D24D7266DE1963D5B3FFE ; .154960405726163383340293800028037E+00
 ; Entry  3
	.OCTA	^X00000000000000000000D8008FC93FFE ; .195209205150604248046875000000000E+00
	.OCTA	^XF96044D988E42802BE8172064B3EBF8C ;-.778750730815030023823483290232435E-35
	.OCTA	^X8D85AE9615FCE5FFB59EC3558AD23FFE ; .192784811070580496671823196569188E+00
 ; Entry  4
	.OCTA	^X00000000000000000000A200FF873FFE ; .249770417809486389160156250000000E+00
	.OCTA	^X3E603120E252BDEB9C3BFB185A8A3F8C ; .814718428248051280119869935834337E-35
	.OCTA	^X258E6D50B04E4DA6678D1498F5463FFE ; .244762574101463538467234953650713E+00
 ; Entry  5
	.OCTA	^X000000000000000000002E003FB73FFF ; .312222212553024291992187500000000E+00
	.OCTA	^XF740A18A31419CDF169664BE520EBF8D ;-.158953272962318297496813319617260E-34
	.OCTA	^XA5952079CA576800315D1AA335E53FFF ; .302631775103092165457195172037282E+00
 ; Entry  6
	.OCTA	^X000000000000000000001C008F3D3FFF ; .389881551265716552734375000000000E+00
	.OCTA	^X2FD07DB2D14B7DE7945D0A51B4E9BF8D ;-.205434242228330560627520199599938E-34
	.OCTA	^X64221FA213F6C3B2F1A5E2DE7CAC3FFF ; .371753258569162316536708564816159E+00
 ; Entry  7
	.OCTA	^X000000000000000000006C00FE673FFF ; .498441398143768310546875000000000E+00
	.OCTA	^XFFD06E7E2DC38FDC14094F56B263BF8D ;-.204248222794771760669725277858411E-34
	.OCTA	^X178F75CA1E820D4E36605F61D97F3FFF ; .462399950321554388897430653076618E+00
 ; Entry  8
	.OCTA	^X00000000000000000000D6004DF14000 ; .652235686779022216796875000000000E+00
	.OCTA	^X3D40054FB21265C94ACA21A14AF23F8C ; .778049896968520132497663221063665E-35
	.OCTA	^XFA28AA4820BA6B44B96B717327E84000 ; .577945275665760894071884596911379E+00
 ; Entry  9
	.OCTA	^X000000000000000000002400BC0E4000 ; .867295384407043457031250000000000E+00
	.OCTA	^X6FA01DA89E2223B7702B5C96BE76BF8D ;-.209925588241432789066125702518181E-34
	.OCTA	^X0D41BDF124DF773895CC57666DCC4000 ; .714449626228906115167021171246261E+00
 ; Entry 10
	.OCTA	^X00000000000000000000B0002B974001 ; .117028331756591796875000000000000E+01
	.OCTA	^X1A20962858DA51596AB880597317BF8E ;-.348973053702432627085307009560575E-34
	.OCTA	^X968C64F7D2B8A51344CCC404BA364000 ; .863699079056823117699307524222697E+00
 ; Entry 11
	.OCTA	^X00000000000000000000D600A51B4001 ; .164495599269866943359375000000000E+01
	.OCTA	^X000005E535CBD647B26716D85EEDBF8F ;-.660018693129234915071637834488735E-34
	.OCTA	^XA226B1AA552CA0AC12038186064A4001 ; .102457437060549106757032873705883E+01
 ; Entry 12
	.OCTA	^X000000000000000000000A0049104002 ; .257080197334289550781250000000000E+01
	.OCTA	^X00009BF3551AE9506AFE1099A62E3F8F ; .794032216677297981575100899055724E-34
	.OCTA	^XD3691BCACD087ACB888B94B333274001 ; .119982270606173628263581683408938E+01
 ; Entry 13
	.OCTA	^X000000000000000000001C0056FA4003 ; .535901546478271484375000000000000E+01
	.OCTA	^X000007B2E2865FE23A6884AE03E13F8F ; .488781705657468000237836730285776E-34
	.OCTA	^X8C47E8A7BCA669576FBFA46462E54001 ; .138631656124175397158285670379080E+01

;
; Tables to be used in POLYH for computing HATAN:  HATANTAB1 is obtained
; from Hart et. al. (Eq. 6.5.16, p = 3/32).  HATANTAB2 is the same as HATANTAB1
; except that C0 is set to 0
;

HATANTAB1:
	.OCTA	^X7C34773674B4E0ACDB3F82FB09193FFC	; C14 =  0.323607977178212855164338574413255E-01
	.OCTA	^XA47394F6F8BAC976B32900C92EE1BFFC	; C13 = -0.369725242031553088497122797906871E-01
	.OCTA	^X132BA1B32A90F4D2BE7A9C3547AB3FFC	; C12 =  0.399988223052355436428631799564816E-01
	.OCTA	^X81D9AD101478D7B0CEB67DDF642CBFFC	; C11 = -0.434782465440183110739221855582909E-01
	.OCTA	^XDC99011516D26D094BC4617586183FFC	; C10 =  0.476190474968168271274681412530293E-01
	.OCTA	^X80B957F83D2C689300886BCAAF28BFFC	; C09 = -0.526315789466176751628321506344419E-01
	.OCTA	^X364FC3E71A5BAC61E1C3E1E1E1E13FFC	; C08 =  0.588235294117613520100322361359313E-01
	.OCTA	^X88932810EB160484111111111111BFFD	; C07 = -0.666666666666666557834846976693175E-01
	.OCTA	^X26F87B8B36633B0C13B1B13B3B133FFD	; C06 =  0.769230769230769230515803518785776E-01
	.OCTA	^XB415D5C542B15D17D1741745745DBFFD	; C05 = -0.909090909090909090908677515499820E-01
	.OCTA	^XCD4F3BAB71C6C71C1C7171C7C71C3FFD	; C04 =  0.111111111111111111111111065718496E+00
	.OCTA	^X3030923549242492924949242492BFFE	; C03 = -0.142857142857142857142857142825660E+00
	.OCTA	^X97A79999999999999999999999993FFE	; C02 =  0.199999999999999999999999999999988E+00
	.OCTA	^X554E555555555555555555555555BFFF	; C01 = -0.333333333333333333333333333333333E+00
	.OCTA	^X00000000000000000000000000004001	; C00 =  0.100000000000000000000000000000000E+01
HATANLEN1 = .- HATANTAB1/16

HATANTAB2:
	.OCTA	^X7C34773674B4E0ACDB3F82FB09193FFC	; C14 =  0.323607977178212855164338574413255E-01
	.OCTA	^XA47394F6F8BAC976B32900C92EE1BFFC	; C13 = -0.369725242031553088497122797906871E-01
	.OCTA	^X132BA1B32A90F4D2BE7A9C3547AB3FFC	; C12 =  0.399988223052355436428631799564816E-01
	.OCTA	^X81D9AD101478D7B0CEB67DDF642CBFFC	; C11 = -0.434782465440183110739221855582909E-01
	.OCTA	^XDC99011516D26D094BC4617586183FFC	; C10 =  0.476190474968168271274681412530293E-01
	.OCTA	^X80B957F83D2C689300886BCAAF28BFFC	; C09 = -0.526315789466176751628321506344419E-01
	.OCTA	^X364FC3E71A5BAC61E1C3E1E1E1E13FFC	; C08 =  0.588235294117613520100322361359313E-01
	.OCTA	^X88932810EB160484111111111111BFFD	; C07 = -0.666666666666666557834846976693175E-01
	.OCTA	^X26F87B8B36633B0C13B1B13B3B133FFD	; C06 =  0.769230769230769230515803518785776E-01
	.OCTA	^XB415D5C542B15D17D1741745745DBFFD	; C05 = -0.909090909090909090908677515499820E-01
	.OCTA	^XCD4F3BAB71C6C71C1C7171C7C71C3FFD	; C04 =  0.111111111111111111111111065718496E+00
	.OCTA	^X3030923549242492924949242492BFFE	; C03 = -0.142857142857142857142857142825660E+00
	.OCTA	^X97A79999999999999999999999993FFE	; C02 =  0.199999999999999999999999999999988E+00
	.OCTA	^X554E555555555555555555555555BFFF	; C01 = -0.333333333333333333333333333333333E+00
	.OCTA	^X00000000000000000000000000000000	; C00 =  0.000000000000000000000000000000000E+00
HATANLEN2 = .- HATANTAB2/16

H_PI:
	.OCTA	^X01B8C517898C846942D1B544921F4002	; pi
H_PI_OVER_2:
	.OCTA	^X01B8C517898C846942D1B544921F4001	; pi/2
H_MPI_OVER_2:
	.OCTA	^X01B8C517898C846942D1B544921FC001	; -pi/2
H_PI_OVER_2_HI:
	.OCTA	^X01B8C517898C846942D1B544921F4001	; High order bits of pi/2
H_PI_OVER_2_LO:
	.OCTA	^X000020BAC740A67CE0889024CD123F8E	; Low order bits of pi/2


;
; ************************* Constants for HATAND *****************************
;   
; Each entry of the HATAND_TABLE contains the the values of XHI, HATAND_XHI_LO
; and HATAND_XHI_HI respectively.  The table is indexed by a pointer  obtained
; from  the MTH$$AB_ATAN_V table. The MTH$$AB_ATAN_V table is common to all of  the
; arctangent routines and is included as part of the MTHATAN module. NOTE: For
; performance reasons it is important to have the HATAN_TABLE longword aligned.
;   
;   

HATAND_TABLE:
 ; Entry  0
	.OCTA	^X00000000000000000000FC00AFF03FFD ; .105454429984092712402343750000000E+00
	.OCTA	^X00004ECA4446B3F6A49181010F57BF8F ;-.510337227872412009806215474616220E-34
	.OCTA	^X04DF07353535C7CCB1EE22CF81454003 ; .601984472544402792180611586306375E+01
 ; Entry  1
	.OCTA	^X00000000000000000000E00007F63FFE ; .128888845443725585937500000000000E+00
	.OCTA	^XC000B728F04932BC49EB6AA94CEB3F91 ; .250460867005321709679062553561737E-33
	.OCTA	^X25BE71322800B62800F2F59ED6084003 ; .734429684095429581063620860337091E+01
 ; Entry  2
	.OCTA	^X000000000000000000007C003FEC3FFE ; .156212776899337768554687500000000E+00
	.OCTA	^X2000D92B6C94EDA2C4E13F709A6CBF92 ;-.617535658783525197606732551917676E-33
	.OCTA	^X6BF2E1D12BD82203F6BD4E031C1D4004 ; .887857723974403634374794659470905E+01
 ; Entry  3
	.OCTA	^X00000000000000000000D8008FC93FFE ; .195209205150604248046875000000000E+00
	.OCTA	^XE000B9B3D2C2448DFFEC00AE272F3F92 ; .444142923737454798358096335623981E-33
	.OCTA	^X728CB36C241CBEC2C9DCD55861764004 ; .110457560285712118329075089997039E+02
 ; Entry  4
	.OCTA	^X00000000000000000000A200FF873FFE ; .249770417809486389160156250000000E+00
	.OCTA	^X6000B408356B3E7F4E0A9D7D6112BF92 ;-.531244777748067647918616125513004E-33
	.OCTA	^X8DFD9216C4765F2ABDA97B3EC0C34004 ; .140238624787719280603348936973386E+02
 ; Entry  5
	.OCTA	^X000000000000000000002E003FB73FFF ; .312222212553024291992187500000000E+00
	.OCTA	^XF000CBCD5D4B1DF5DDD842308B2ABF93 ;-.118915663451522844071812354945099E-32
	.OCTA	^XD1D87411BE7A13C6CC03B026156E4005 ; .173395234599594844696266379620251E+02
 ; Entry  6
	.OCTA	^X000000000000000000001C008F3D3FFF ; .389881551265716552734375000000000E+00
	.OCTA	^X2000FBCD63B129267F10AEADA8B5BF93 ;-.127806425373907771528142982616142E-32
	.OCTA	^X5977A2A2C3076FEE67EE5C5354CC4005 ; .212998927362486050035935523019151E+02
 ; Entry  7
	.OCTA	^X000000000000000000006C00FE673FFF ; .498441398143768310546875000000000E+00
	.OCTA	^X40005A637B69C202D1C6A8EFFF6F3F91 ; .384761811474568982381579484052894E-33
	.OCTA	^X3A973C90E63C687C0826A50BA7E54005 ; .264935656004839988870465354562523E+02
 ; Entry  8
	.OCTA	^X00000000000000000000D6004DF14000 ; .652235686779022216796875000000000E+00
	.OCTA	^X9800A1AF979C621A79EF938DAD5D3F94 ; .258414980175673956858478942330216E-32
	.OCTA	^XE41B2F9C4C7B9C2352421D2008E94006 ; .331138250851730174319546053610837E+02
 ; Entry  9
	.OCTA	^X000000000000000000002400BC0E4000 ; .867295384407043457031250000000000E+00
	.OCTA	^X0000BF3F0245F87617B6076EC1F53F91 ; .338510132234954848670217915900976E-33
	.OCTA	^X30D96B97B7CA0E60EF49C626477A4006 ; .409349482576154805614463077332613E+02
 ; Entry 10
	.OCTA	^X00000000000000000000B0002B974001 ; .117028331756591796875000000000000E+01
	.OCTA	^XB00048B3B1D17F3F234C082991CC3F94 ; .241822772795307198445818893691383E-32
	.OCTA	^X7CFE3ABE7F365421A4E4F78B8BE34006 ; .494863119992919938154184882513590E+02
 ; Entry 11
	.OCTA	^X00000000000000000000D600A51B4001 ; .164495599269866943359375000000000E+01
	.OCTA	^XC000F5993C7B4FC54D22470435393F92 ; .465268171993026667644359745130620E-33
	.OCTA	^X1B3E2B1861DDD13A677E5B33D5A14006 ; .587037872329673083751337015808503E+02
 ; Entry 12
	.OCTA	^X000000000000000000000A0049104002 ; .257080197334289550781250000000000E+01
	.OCTA	^X20002563930862FA5A827DB31DA2BF94 ;-.171910150219349729631778838888261E-32
	.OCTA	^XD049E728F2987BC84135A6E112FA4007 ; .687447772213030210730193487124223E+02
 ; Entry 13
	.OCTA	^X000000000000000000001C0056FA4003 ; .535901546478271484375000000000000E+01
	.OCTA	^XF8006797565D60700481B17FD4F53F95 ; .564489753286702131886810584573443E-32
	.OCTA	^XDD3FE7AF556969FAFECD68FE3DB84007 ; .794300880282420198400446493830175E+02

;
; Tables to be used in POLYH for computing HATAND:  HATANDTAB1 is obtained
; by multiplying the coefficients of HATANTAB1 by 180/pi.  ATANDTAB2 is the 
; same as ATANDTAB1 except that C0 is set to 180/pi - 64 instead of 180/pi.
;

HATANDTAB1:
	.OCTA	^XE34275797A5A52788C4CBB23DAA84001	; C14 =  0.185413713090774593492983340952818E+01
	.OCTA	^X94C77AFA69E9B3863937BC210F26C002	; C13 = -0.211836959478608620535837718154670E+01
	.OCTA	^X7A9E56C25E79404F86A7835625584002	; C12 =  0.229176370358373483221523815673309E+01
	.OCTA	^X826666F2714665827AC305643EDDC002	; C11 = -0.249112002760150656770324171958251E+01
	.OCTA	^X613E9D28B4C320D079083E265D3B4002	; C10 =  0.272837044600061153818588270758887E+01
	.OCTA	^XB69362BB9E37F59D00081C5681FEC002	; C09 = -0.301556734275079179096444414774527E+01
	.OCTA	^XC9A28575BC9686FBB0F34CD8AF674002	; C08 =  0.337033997135759141825912460804974E+01
	.OCTA	^X17F287FFA01B2906EACC8A4AE8ECC002	; C07 = -0.381971863420548743489281582451511E+01
	.OCTA	^X2345AC31BD3D8710C2894FC81A124003	; C06 =  0.440736765485248621984013456852086E+01
	.OCTA	^X35291286F556CE322BB975904D5BC003	; C05 = -0.520870722846202917061564550320484E+01
	.OCTA	^XA3969252F66134E8C3AAC893976F4003	; C04 =  0.636619772367581343075534793409531E+01
	.OCTA	^X483F83ED79D12203225B6EA805ECC004	; C03 = -0.818511135901176012525687925735405E+01
	.OCTA	^X65F9859877582F9E301967B86EB14004	; C02 =  0.114591559026164641753596309628203E+02
	.OCTA	^XABBDC4A9B8C9A7AED2BFD66E3193C005	; C01 = -0.190985931710274402922660516047017E+02
	.OCTA	^X81A5A6FE152E7B863C1FC1A6CA5D4006	; C00 =  0.572957795130823208767981548141052E+02
HATANDLEN1 = .- HATANDTAB1/16

HATANDTAB2:
	.OCTA	^XE34275797A5A52788C4CBB23DAA84001	; C14 =  0.185413713090774593492983340952818E+01
	.OCTA	^X94C77AFA69E9B3863937BC210F26C002	; C13 = -0.211836959478608620535837718154670E+01
	.OCTA	^X7A9E56C25E79404F86A7835625584002	; C12 =  0.229176370358373483221523815673309E+01
	.OCTA	^X826666F2714665827AC305643EDDC002	; C11 = -0.249112002760150656770324171958251E+01
	.OCTA	^X613E9D28B4C320D079083E265D3B4002	; C10 =  0.272837044600061153818588270758887E+01
	.OCTA	^XB69362BB9E37F59D00081C5681FEC002	; C09 = -0.301556734275079179096444414774527E+01
	.OCTA	^XC9A28575BC9686FBB0F34CD8AF674002	; C08 =  0.337033997135759141825912460804974E+01
	.OCTA	^X17F287FFA01B2906EACC8A4AE8ECC002	; C07 = -0.381971863420548743489281582451511E+01
	.OCTA	^X2345AC31BD3D8710C2894FC81A124003	; C06 =  0.440736765485248621984013456852086E+01
	.OCTA	^X35291286F556CE322BB975904D5BC003	; C05 = -0.520870722846202917061564550320484E+01
	.OCTA	^XA3969252F66134E8C3AAC893976F4003	; C04 =  0.636619772367581343075534793409531E+01
	.OCTA	^X483F83ED79D12203225B6EA805ECC004	; C03 = -0.818511135901176012525687925735405E+01
	.OCTA	^X65F9859877582F9E301967B86EB14004	; C02 =  0.114591559026164641753596309628203E+02
	.OCTA	^XABBDC4A9B8C9A7AED2BFD66E3193C005	; C01 = -0.190985931710274402922660516047017E+02
H_PI_OV_180_M_64:
	.OCTA	^XF2DBC80B568A23CF1F04F2CEAD11C003	; C00 = -0.670422048691767912320184518589483E+01
HATANDLEN2 = .- HATANDTAB2/16


H_90:
	.OCTA	^X00000000000000000000000068004007	; 90.
H_M90:
	.OCTA	^X0000000000000000000000006800C007	; -90.
H_180:
	.OCTA	^X00000000000000000000000068004008	; 180

	.SBTTL	MTH$HATAN - Standard H Floating Point Arc Tangent


;++
; FUNCTIONAL DESCRIPTION:
;
; HATAN - H floating point arctangent function
;
; HATAN is computed using the following steps:
; 
;    1. If X > 11 then
;       a. Let W = 1/X.
;       b. Compute HATAN(W) = W*P(W**2), where P is a polynomial of 
;          degree 13.
;       c. Set HATAN(X) = pi/2 - HATAN(W)
;    2. If 3/32 =< X =< 11 then
;       a. Obtain XHI by table look-up.
;       b. Compute Z = (X - XHI)/(1 + X*XHI).
;       c. Compute HATAN(Z) = Z*P(Z**2), where P is a polynomial of 
;          degree 13.
;       d. Obtain HATAN(XHI) by table look-up.  HATAN(XHI) will have
;          two parts - the high order bits, HATAN_XHI_HI, and the low
;          order bits, HATAN_XHI_LO.
;       e. Compute HATAN(X) = HATAN_XHI_HI + (HATAN_XHI_LO + HATAN(Z)).
;    3. If 0 =< X < 3/32 then
;       a. Compute HATAN(X) = X + X*Q(X**2), where Q is a polynomial
;          of degree 13.
;    4. If X < 0 then
;       a. Compute Y = HATAN(|X|) using steps 1 to 3.
;       b. Set HATAN(X) = -Y.
; 
;
; CALLING SEQUENCE:
;
;	Arctangent.wh.v = MTH$HATAN(x.rh.r)
;
;		-or-
;
;	CALL MTH$HATAN(Arctangent.wh.r, x.rh.r)
;
;	Because an H-floating result cannot be expressed in 64 bits, it is
;	returned as the first argument, with the input parameter displaced
;	to the second argument, in accordance with the Procedure Calling
;	Standard.
;
; INPUT PARAMETERS:
;
	LONG = 4			; Define longword multiplier
	x = 2 * LONG			; X is the argument
;
; IMPLICIT INPUTS:	none
;
; OUTPUT PARAMETERS:
;
;	VALUE:	H floating point arctangent (in radians) of the argument
;
	Arctangent = 1 * LONG		; Arctangent is the result
;
; IMPLICIT OUTPUTS:	none
;
; SIDE EFFECTS:
;
; Signals:	none
;
; NOTE: This procedure disables floating point underflow, enables
; integer overflow, causes no floating overflow or other arithmetic
; traps, and preserves enables across the call.
;
;---


	.ENTRY	MTH$HATAN, ACMASK	; Standard call-by-reference entry
					; Disable DV (and FU), enable IV
	MTH$FLAG_JACKET			; Flag that this is a jacket procedure in
					; case of an error in special JSB routine
	MOVH	@x(AP), R0		; R0/R3 = arg 
	BSBW	MTH$HATAN_R8		; Call special HATAN routine
	MOVO	R0, @Arctangent(AP)	; Store result in first argument
	RET				; Return to caller


	.SBTTL	MTH$HATAN2 - Standard H Floating Point Arctangent With 2 Arguments
;++
; FUNCTIONAL DESCRIPTION:
;
; HATAN2  - H floating point arctangent function
;
; HATAN2(X,Y) is computed as following:
;
;	If Y = 0 or X/Y > 2**114, HATAN2(X,Y) = PI/2 * (sign X)
;	If Y > 0 and X/Y =< 2**114, HATAN2(X,Y) = HATAN(X/Y)
;	If Y < 0 and X/Y =< 2**114, HATAN2(X,Y) = PI * (sign X) + HATAN(X/Y)
;
;
; CALLING SEQUENCE:
;
;	Arctangent2.wh.v = MTH$HATAN2(x.rh.r, y.rh.r)
;
;		-or-
;
;	CALL MTH$HATAN2(Arctangent2.wh.r, x.rh.r, y.rh.r)
;
;	Because an H floating result cannot be expressed in 64 bits, it is
;	returned as the first argument, with the input parameter displaced
;	to the second argument, in accordance with the Procedure Calling
;	Standard.
;
; INPUT PARAMETERS:

	x = 2 * LONG			; X is the first argument
	y = 3 * LONG			; Y is the second argument

; SIDE EFFECTS:	See description of MTH$HATAN 
;
; OUTPUT PARAMETERS:
;
	Arctangent2 = 1 * LONG		; Arctangent2 is the result
;
;--


	.ENTRY	MTH$HATAN2, ACMASK	; Standard call-by-reference entry
					; Disable DV (and FU), enable IV
	MTH$FLAG_JACKET			; Flag that this is a jacket procedure in
					; Case of an error in special JSB routine
	MOVH	@x(AP), R0		; R0/R3 = arg1 
	MOVH	@y(AP), R4		; R4/R7 = arg2
;
; Test if Y = 0 or X/Y > 2**114
;
	BEQL	INF			; Branch to INF if Y = 0
	BICW3	#^X8000, R0, R8		; R8 = exponent(X)
	BICW3	#^X8000, R4, -(SP)	; Stack = exponent(Y)
	SUBW2	(SP)+, R8		; R8 = exponent(X) - exponent(Y)
	CMPW	R8, #115		; Compare R8 with 115
	BGTR	INF			; If X/Y > 2**114, branch to INF
;
; Test if Y > 0 or Y < 0
;
	TSTW	R4			; Test the sign of Y
	BGTR	A2PLUS			; Branch to A2PLUS if Y > 0
	TSTW	R0			; Test the sign of X
	BGEQ	A1PLUS			; Branch to A1PLUS if X >= 0
;
; Y < 0 and X < 0 and X/Y =< 2**114
;
	BSBB	MTH$HATAN_R8D		; R0/R3 = HATAN(X/Y)
	SUBH2	H_PI, R0		; R0/R3 = -PI + HATAN(X/Y)
	MOVO	R0, @Arctangent2(AP)	; Store result in first argument
	RET				; Return to caller
;
; Y < 0 and X > 0 and X/Y =< 2**114
;
A1PLUS:
	BSBB	MTH$HATAN_R8D		; R0/R3 = HATAN(X/Y)
	ADDH2	H_PI, R0		; R0/R3 = PI + HATAN(X/Y)
	MOVO	R0, @Arctangent2(AP)	; Store result in first argument
	RET				; Return
;
; Y > 0 and X/Y =< 2**114
;
A2PLUS:
	BSBB	MTH$HATAN_R8D		; R0/R3 = HATAN(X/Y)
	MOVO	R0, @Arctangent2(AP)	; Store result in first argument
	RET				; Return
;
; Y = 0 or X/Y > 2**114
;
INF:
	TSTW	R0			; Test the sign of X
	BGTR	1$			; Branch if X > 0
	BEQL	2$			; Branch if X = 0
	MOVO	H_MPI_OVER_2, @Arctangent2(AP)
					; Store result in first argument
	RET				; Return

1$:	MOVO	H_PI_OVER_2, @Arctangent2(AP)
					; Store result in first argument
	RET				; Return

;+
; Here if both X = 0 and Y = 0.  Signal INVALID ARG TO MATH LIBRARY
;-

2$:	ASHQ	#15, #1, R0		; R0/R3 = reserved operand, copied
					; to CHF$_MCH_SAVR0/R1 so handlers
					; can change if they want to continue.
	CLRQ	R2			; ...
	MOVZBL	#MTH$K_INVARGMAT, -(SP)	; Code for invalid argument to math library
	CALLS	#1, G^MTH$$SIGNAL	; Signal SEVERE error
	RET				; Return if a handler says SS$_CONTINUE

	.SBTTL	MTH$HATAN_R8 - Special HATAN routine

; Special HATAN - used by the standard routine, and directly.
;
; CALLING SEQUENCE:
;	save anything needed in R0:R8
;	MOVH	..., R0			; Input in R0/R3
;	JSB	MTH$HATAN_R8
;	return with result in R0/R3

; Note: This routine is written to avoid causing any integer overflows, floating
; overflows, or floating underflows or divide by 0 conditions, whether enabled or
; not.
;
; REGISTERS USED:
;	R0/R3 - floating argument then result
;	R4/R7 - scratch
;	R8    - Pointer into HATAN_TABLE
;	R0:R5 - POLYH
;	stack - Y during POLYH



MTH$HATAN_R8D:				; For local use only!
	DIVH2	R4, R0
MTH$HATAN_R8::				; Special HATAN routine
	TSTH	R0			; R0 = X = argument
	BGEQ	POS_ARG			; 
	BRW	NEG_ARG			; Branch to negative argument logic
;
; Argument is positive
;
POS_ARG:
	ROTL	#3, R0, R8		; R8 = Biased exponent bits and first
	BICL	#^XFFF80000, R8		;    three fraction bits 
	SUBL	#^X1FFEC, R8		; Argument is less than 3/32,
	BLSS	SMALL			;    branch to small argument logic
	CMPL	#^X37, R8		; Argument is greater than of equal to
	BLEQ	LARGE_ARG		;    11, branch to large argument logic
;
; Logic for positive medium sized arguments.  Get pointer into HATAN_TABLE.
;
	MOVAL	G^MTH$$AB_ATAN_V, R7	; R7 = Address of RTL vector entry
	ADDL	G^MTH$$AB_ATAN_V, R7	; R7 = Address of MTH$$AB_ATAN table
	MOVB	(R7)[R8], R8		; R8 = Index into HATAN_TABLE.
	MOVAO	HATAN_TABLE[R8], R8	; R8 = pointer to XHI
;
; Compute Z
;
	MOVO	(R8)+, R4		; R4 = XHI
	SUBH3	R4, R0, -(SP)		; (SP) = X - XHI
	MULH2	R4, R0			; R0 = X*XHI
	ADDH2	#1, R0			; R0 = 1 + X*XHI
	DIVH2	R0, (SP)		; (SP) = Z = (X - XHI)/(1 + X*XHI)
;
; Evaluate Z*P(Z**2)
;
	MULH3	(SP), (SP), R0		; R0 = Z**2
	POLYH	R0, #HATANLEN1-1, HATANTAB1
					; R0 = P(Z**2)
	MULH2	(SP)+, R0		; R0 = HATAN(Z) = Z*P(Z**2)
	ADDH2	(R8)+, R0		; R0 = HATAN_XHI_LO + HATAN(Z)
	ADDH2	(R8), R0		; R0 = HATAN(X) = HATAN_XHI_HI +
					;      (HATAN_XHI_LO + HATAN(Z))
	RSB				; Return


SMALL:	BRW	SMALL_ARG		; Dummy label used to avoid adding
					;   an extra insrtuction in the 
					;   medium argument logic
;
; Large positive argument logic.
;

LARGE_ARG:
	DIVH3	R0, H_M1.0, -(SP)	; (SP) = -W = -1/X
	MULH3	(SP), (SP), R0		; R0 = W**2
	POLYH	R0, #HATANLEN1-1, HATANTAB1
					; R0 = P(W**2)
	MULH2	(SP)+, R0		; R0 = HATAN(W) = -W*P(W**2)
	ADDH2	H_PI_OVER_2_LO, R0	; 
	ADDH2	H_PI_OVER_2_HI, R0	; R0 = HATAN(X) = PI/2 - HATAN(W)
	RSB				; Return

;
; Logic for negative arguments
;

NEG_ARG:
	ROTL	#3, R0, R8		; R8 = Biased exponent bits and first
	BICL	#^XFFF80000, R8		;    three fraction bits 
	SUBL	#^X5FFEC, R8		; Argument is less than 3/32,
	BLSS	SMALL			;    branch to small argument logic
	CMPL	#^X37, R8		; Argument is greater than of equal to
	BLEQ	N_LARGE_ARG		;    11, branch to large argument logic
;
; Logic for negative medium sized arguments.  Get index into HATAN_TABLE.
;
	MOVAL	G^MTH$$AB_ATAN_V, R7	; R7 = Address of RTL vector entry
	ADDL	G^MTH$$AB_ATAN_V, R7	; R7 = Address of MTH$$AB_ATAN table
	MOVB	(R7)[R8], R8		; R8 = Index into HATAN_TABLE.
	MOVAO	HATAN_TABLE[R8], R8	; R8 = pointer to XHI
;
; Compute Z
;
	MOVO	(R8)+, R4		; R4 = XHI
	ADDH3	R4, R0, -(SP)		; (SP) = X + XHI = X - (-XHI)
	MULH2	R4, R0			; R0 = X*XHI
	SUBH3	R0, #1, R0		; R0 = 1 - X*XHI = 1 + X*(-XHI)
	DIVH2	R0, (SP)		; (SP) = Z = (X-(-XHI))/(1+X*(-XHI))
;
; Evaluate Z*P(Z**2)
;
	MULH3	(SP), (SP), R0		; R0 = Z**2
	POLYH	R0, #HATANLEN1-1, HATANTAB1
					; R0 = P(Z**2)
	MULH2	(SP)+, R0		; R0 = HATAN(Z) = Z*P(Z**2)
	SUBH2	(R8)+, R0		; R0 = HATAN_XHI_LO + HATAN(Z)
	SUBH2	(R8), R0		; R0 = HATAN(X) = HATAN_XHI_HI +
					;      (HATAN_XHI_LO + HATAN(Z))
	RSB				; Return
;
; Logic for large negative  arguments
;

N_LARGE_ARG:
	DIVH3	R0, H_M1.0, -(SP)	; (SP) = W = 1/|X|
	MULH3	(SP), (SP), R0		; R0 = W**2
	POLYH	R0, #HATANLEN1-1, HATANTAB1
					; R0 = P(W**2)
	MULH2	(SP)+, R0		; R0 = HATAN(W) = W*P(W**2)
	SUBH2	H_PI_OVER_2_LO, R0	; 
	SUBH2	H_PI_OVER_2_HI, R0	; R0 = HATAN(X) = HATAN(W) - PI/2
	RSB				; Return

;
; Small argument logic.
;

SMALL_ARG:
	MOVO	R0, -(SP)		; (SP) = argument = X
	BICW	#^X8000, R0		; R0 = |X|
	CMPW	#^X3FC9, R0		; Compare 2^-56 to |X|
	BLSS	1$			; Needs polynomial evaluation
	MOVO	(SP)+, R0		; Return with answer equal
	RSB				;    to argument

1$:	MULH2	R0, R0			; R0 = X**2
	POLYH	R0, #HATANLEN2-1, HATANTAB2
					; R0 = Q(X**2)
	MULH2	(SP), R0		; R0 = X*Q(X**2)
	ADDH2	(SP)+, R0		; R0 = HATAN(X) = X + X*Q(X**2)
	RSB				; Return


	.SBTTL	MTH$HATAND - Standard H Floating Point Arc Tangent


;++
; FUNCTIONAL DESCRIPTION:
;
; HATAND - H floating point arctangent function
;
; HATAND is computed using the following steps:
; 
;    1. If X > 11 then
;       a. Let W = 1/X.
;       b. Compute HATAND(W) = W*P(W**2), where P is a polynomial of 
;          degree 13.
;       c. Set HATAND(X) = pi/2 - HATAND(W)
;    2. If 3/32 =< X =< 11 then
;       a. Obtain XHI by table look-up.
;       b. Compute Z = (X - XHI)/(1 + X*XHI).
;       c. Compute HATAND(Z) = Z*P(Z**2), where P is a polynomial of 
;          degree 13.
;       d. Obtain HATAND(XHI) by table look-up.  HATAND(XHI) will have
;          two parts - the high order bits, HATAND_XHI_HI, and the low
;          order bits, HATAND_XHI_LO.
;       e. Compute HATAND(X) = HATAND_XHI_HI + (HATAND_XHI_LO + HATAND(Z)).
;    3. If 0 =< X < 3/32 then
;       a. Compute HATAND(X) = X + X*Q(X**2), where Q is a polynomial
;          of degree 13.
;    4. If X < 0 then
;       a. Compute Y = HATAND(|X|) using steps 1 to 3.
;       b. Set HATAND(X) = -Y.
; 
;
; CALLING SEQUENCE:
;
;	Arctangent.wh.v = MTH$HATAND(x.rh.r)
;
;		-or-
;
;	CALL MTH$HATAND(Arctangent.wh.r, x.rh.r)
;
;	Because an H-floating result cannot be expressed in 64 bits, it is
;	returned as the first argument, with the input parameter displaced
;	to the second argument, in accordance with the Procedure Calling
;	Standard.
;
; INPUT PARAMETERS:
;
	LONG = 4			; Define longword multiplier
	x = 2 * LONG			; X is the argument
;
; IMPLICIT INPUTS:	none
;
; OUTPUT PARAMETERS:
;
;	VALUE:	H floating point arctangent (in degrees) of the argument
;
	Arctangent = 1 * LONG		; Arctangent is the result
;
; IMPLICIT OUTPUTS:	none
;
; SIDE EFFECTS:
;
; Signals:	none
;
; NOTE: This procedure disables floating point underflow, enables
; integer overflow, causes no floating overflow or other arithmetic
; traps, and preserves enables across the call.
;
;---


	.ENTRY	MTH$HATAND, ACMASK	; STANDdard call-by-reference entry
					; Disable DV (and FU), enable IV
	MTH$FLAG_JACKET			; Flag that this is a jacket procedure in
					; case of an error in special JSB routine
	MOVH	@x(AP), R0		; R0/R3 = arg 
	BSBW	MTH$HATAND_R8		; Call special HATAND routine
	MOVO	R0, @Arctangent(AP)	; Store result in first argument
	RET				; Return to caller


	.SBTTL	MTH$HATAND2 - Standard H Floating Point Arctangent With 2 Arguments
;++
; FUNCTIONAL DESCRIPTION:
;
; HATAND2  - H floating point arctangent function
;
; HATAND2(X,Y) is computed as following:
;
;	If Y = 0 or X/Y > 2**114, HATAND2(X,Y) = 90 * (sign X)
;	If Y > 0 and X/Y =< 2**114, HATAND2(X,Y) = HATAND(X/Y)
;	If Y < 0 and X/Y =< 2**114, HATAND2(X,Y) = 180 * (sign X) + HATAND(X/Y)
;
;
; CALLING SEQUENCE:
;
;	Arctangent2.wh.v = MTH$HATAND2(x.rh.r, y.rh.r)
;
;		-or-
;
;	CALL MTH$HATAND2(Arctangent2.wh.r, x.rh.r, y.rh.r)
;
;	Because an H floating result cannot be expressed in 64 bits, it is
;	returned as the first argument, with the input parameter displaced
;	to the second argument, in accordance with the Procedure Calling
;	Standard.
;
; INPUT PARAMETERS:

	x = 2 * LONG			; X is the first argument
	y = 3 * LONG			; Y is the second argument

; SIDE EFFECTS:	See description of MTH$HATAND 
;
; OUTPUT PARAMETERS:
;
	Arctangent2 = 1 * LONG		; Arctangent2 is the result
;
;--


	.ENTRY	MTH$HATAND2, ACMASK	; STANDdard call-by-reference entry
					; Disable DV (and FU), enable IV
	MTH$FLAG_JACKET			; Flag that this is a jacket procedure in
					; Case of an error in special JSB routine
	MOVH	@x(AP), R0		; R0/R3 = arg1 
	MOVH	@y(AP), R4		; R4/R7 = arg2
;
; Test if Y = 0 or X/Y > 2**114
;
	BEQL	INF_DEG			; Branch to INF_DEG if Y = 0
	BICW3	#^X8000, R0, R8		; R8 = exponent(X)
	BICW3	#^X8000, R4, -(SP)	; Stack = exponent(Y)
	SUBW2	(SP)+, R8		; R8 = exponent(X) - exponent(Y)
	CMPW	R8, #115		; Compare R8 with 115
	BGTR	INF_DEG			; If X/Y > 2**114, branch to INF_DEG
;
; Test if Y > 0 or Y < 0
;
	TSTW	R4			; Test the sign of Y
	BGTR	A2PLUSD			; Branch to A2PLUSD if Y > 0
	TSTW	R0			; Test the sign of X
	BGEQ	A1PLUSD			; Branch to A1PLUSD if X >= 0
;
; Y < 0 and X < 0 and X/Y =< 2**114
;
	BSBB	MTH$HATAND_R8D		; R0/R3 = HATAND(X/Y)
	SUBH2	H_180, R0		; R0/R3 = -180 + HATAND(X/Y)
	MOVO	R0, @Arctangent2(AP)	; Store result in first argument
	RET				; Return to caller
;
; Y < 0 and X > 0 and X/Y =< 2**114
;
A1PLUSD:
	BSBB	MTH$HATAND_R8D		; R0/R3 = HATAND(X/Y)
	ADDH2	H_180, R0		; R0/R3 = 180 + HATAND(X/Y)
	MOVO	R0, @Arctangent2(AP)	; Store result in first argument
	RET				; Return
;
; Y > 0 and X/Y =< 2**114
;
A2PLUSD:
	BSBB	MTH$HATAND_R8D		; R0/R3 = HATAND(X/Y)
	MOVO	R0, @Arctangent2(AP)	; Store result in first argument
	RET				; Return
;
; Y = 0 or X/Y > 2**114
;
INF_DEG:
	TSTW	R0			; Test the sign of X
	BGTR	1$			; Branch if X > 0
	BEQL	2$			; Branch if X = 0
	MOVO	H_M90, @Arctangent2(AP)
					; Store result in first argument
	RET				; Return

1$:	MOVO	H_90, @Arctangent2(AP)
					; Store result in first argument
	RET				; Return

;+
; Here if both X = 0 and Y = 0.  Signal INVALID ARG TO MATH LIBRARY
;-

2$:	ASHQ	#15, #1, R0		; R0/R3 = reserved operand, co180ed
					; to CHF$_MCH_SAVR0/R1 so handlers
					; can change if they want to continue.
	CLRQ	R2			; ...
	MOVZBL	#MTH$K_INVARGMAT, -(SP)	; Code for invalid argument to math library
	CALLS	#1, G^MTH$$SIGNAL	; Signal SEVERE error
	RET				; Return if a handler says SS$_CONTINUE

	.SBTTL	MTH$HATAND_R8 - Special HATAND routine

; Special HATAND - used by the sTANDdard routine, and directly.
;
; CALLING SEQUENCE:
;	save anything needed in R0:R8
;	MOVH	..., R0			; Input in R0/R3
;	JSB	MTH$HATAND_R8
;	return with result in R0/R3

; Note: This routine is written to avoid causing any integer overflows, floating
; overflows, or floating underflows or divide by 0 conditions, whether enabled or
; not.
;
; REGISTERS USED:
;	R0/R3 - floating argument then result
;	R4/R7 - scratch
;	R8    - Pointer into HATAND_TABLE
;	R0:R5 - POLYH
;	stack - Y during POLYH



MTH$HATAND_R8D:				; For local use only!
	DIVH2	R4, R0
MTH$HATAND_R8::				; Special HATAND routine
	TSTH	R0			; (SP) = X = argument
	BGEQ	POS_ARGD		; 
	BRW	NEG_ARGD		; Branch to negative argument logic
;
; Argument is positive
;
POS_ARGD:
	ROTL	#3, R0, R8		; R8 = Biased exponent bits and first
	BICL	#^XFFF80000, R8		;    three fraction bits 
	SUBL	#^X1FFEC, R8		; Argument is less than 3/32,
	BLSS	SMALLD			;    branch to small argument logic
	CMPL	#^X37, R8		; Argument is greater than of equal to
	BLEQ	LARGE_ARGD		;    11, branch to large argument logic
;
; Logic for positive medium sized arguments.  Get pointer into HATAND_TABLE.
;
	MOVAL	G^MTH$$AB_ATAN_V, R7	; R7 = Address of RTL vector entry
	ADDL	G^MTH$$AB_ATAN_V, R7	; R7 = Address of MTH$$AB_ATAN table
	MOVB	(R7)[R8], R8		; R8 = Index into HATAND_TABLE.
	MOVAO	HATAND_TABLE[R8], R8	; R8 = pointer to XHI
;
; Compute z
;
	MOVO	(R8)+, R4		; R4 = XHI
	SUBH3	R4, R0, -(SP)		; (SP) = X - XHI
	MULH2	R4, R0			; R0 = X*XHI
	ADDH2	#1, R0			; R0 = 1 + X*XHI
	DIVH2	R0, (SP)		; (SP) = Z = (X - XHI)/(1 + X*XHI)
;
; Evaluate Z*P(Z**2)
;
	MULH3	(SP), (SP), R0		; R0 = Z**2
	POLYH	R0, #HATANDLEN1-1, HATANDTAB1
					; R0 = P(Z**2)
	MULH2	(SP)+, R0		; R0 = HATAN(Z) = Z*P(Z**2)
	ADDH2	(R8)+, R0		; R0 = HATAN_XHI_LO + HATAN(Z)
	ADDH2	(R8), R0		; R0 = HATAN(X) = HATAN_XHI_HI +
					;      (HATAN_XHI_LO + HATAN(Z))
	RSB				; Return


SMALLD:	BRW	SMALL_ARGD		; Dummy label used to avoid adding
					;   an extra insrtuction in the 
					;   medium argument logic
;
; Large positive argument logic.
;

LARGE_ARGD:
	DIVH3	R0, H_M1.0, -(SP)	; (SP) = -W = -1/X
	MULH3	(SP), (SP), R0		; R0 = W**2
	POLYH	R0, #HATANDLEN1-1, HATANDTAB1
					; R0 = P(W**2)
	MULH2	(SP)+, R0		; R0 = -HATAND(Z) = -Z*P(W**2)
	ADDH2	H_90, R0		; R0 = HATAND(X) = 90 - HATAND(Z)
	RSB				; Return

;
; Logic for negative arguments
;

NEG_ARGD:
	ROTL	#3, R0, R8		; R8 = Biased exponent bits and first
	BICL	#^XFFF80000, R8		;    three fraction bits 
	SUBL	#^X5FFEC, R8		; Argument is less than 3/32,
	BLSS	SMALL_ARGD		;    branch to small argument logic
	CMPL	#^X37, R8		; Argument is greater than of equal to
	BLEQ	N_LARGE_ARGD		;    11, branch to large argument logic
;
; Logic for negative medium sized arguments.  Get index into HATAND_TABLE.
;
	MOVAL	G^MTH$$AB_ATAN_V, R7	; R7 = Address of RTL vector entry
	ADDL	G^MTH$$AB_ATAN_V, R7	; R7 = Address of MTH$$AB_ATAN table
	MOVB	(R7)[R8], R8		; R8 = Index into HATAND_TABLE.
	MOVAO	HATAND_TABLE[R8], R8	; R8 = pointer to XHI
;
; Compute Z
;
	MOVO	(R8)+, R4		; R4 = XHI
	ADDH3	R4, R0, -(SP)		; R0 = X + XHI = X - (-XHI)
	MULH2	R4, R0			; R0 = X*XHI
	SUBH3	R0, #1, R0		; R4 = 1 - X*XHI = 1 + X*(-XHI)
	DIVH2	R0, (SP)		; (SP) = Z 
;
; Evaluate Z*P(Z**2)
;
	MULH3	(SP), (SP), R0		; R0 = Z**2
	POLYH	R0, #HATANDLEN1-1, HATANDTAB1
					; R0 = P(Z**2)
	MULH2	(SP)+, R0		; R0 = HATAND(Z) = Z*P(Z**2)
	SUBH2	(R8)+, R0		; R0 = HATAND_XHI_LO + HATAND(Z)
	SUBH2	(R8), R0		; R0 = HATAND(X) = HATAND_XHI_HI +
					;      (HATAND_XHI_LO + HATAND(Z))
	RSB				; Return
;
; Logic for large negative  arguments
;

N_LARGE_ARGD:
	DIVH3	R0, H_M1.0, -(SP)	; (SP) = W = 1/|X|
	MULH3	(SP), (SP), R0		; R0 = W**2
	POLYH	R0, #HATANDLEN1-1, HATANDTAB1
					; R0 = P(W**2)
	MULH2	(SP)+, R0		; R0 = HATAND(W) = W*P(W**2)
	SUBH2	H_90, R0		; R0 = HATAND(X) = HATAND(W) - 90
	RSB				; Return

;
; Small argument logic.
;

SMALL_ARGD:
	MOVH	R0, -(SP)		; (SP) = argument = X
	BEQL	3$			;
	BICW	#^X8000, R0		; R0 = |X|
	CMPW	#^X3FC9, R0		; Compare 2^-56 to |X|
	BLSS	1$			; Needs polynomial evaluation
	MULH3	H_PI_OV_180_M_64, (SP), R0
					; R0 = X*(pi/180 - 64)
	BRB	2$			; Argument = 0 = return value
1$:	MULH2	R0, R0			; R0 = X**2
	POLYH	R0, #HATANDLEN2-1, HATANDTAB2
					; R0 = Q(X**2)
	MULH2	(SP), R0		; R0 = X*Q(X**2)
2$:	ADDW	#^X6, (SP)		; (SP) = X*2**6
	ADDH2	(SP)+, R0		; R0 = HATAND(X) = X*2**6 + X*Q(X**2)
	RSB				; Return

3$:	TSTH	(SP)+			; Remove argument from stack
	RSB				; Return

	.END





	.END
