	.TITLE	OTS$POWHH - REAL*16 ** REAL*16 power routine
	.IDENT	/1-002/		; File: OTSPOWHH.MAR

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;
; FACILITY: Compiled code support library
;++
; ABSTRACT:
;
;	H_floating base to H_floating power
;
;--
;
; VERSION: 1
;
; AUTHOR:
;	Steven B. Lionel, 26-Sept-1979
;

	.SBTTL	HISTORY		; Detailed current edit history


; Edit history for OTS$POWHH
;
; 1-001 - Adapted from OTS$POWDD version 1-005.  SBL 26-Sept-1979
; 1-002 - Changed shared external references to G^ RNH 25-Sep-81

	.SBTTL	DECLARATIONS

;
; INCLUDE FILES:
;
;	MTHJACKET			; Math jacketing macro

;
; EXTERNAL SYMBOLS:
;
	.DSABL	GBL
	.EXTRN	MTH$$SIGNAL		; Math error routine
	.EXTRN	MTH$HLOG_R8		; H_floating logarithm
	.EXTRN	MTH$HEXP_R6		; H_floating exponential
	.EXTRN	MTH$K_UNDEXP

;
; MACROS:
;

;
; EQUATED SYMBOLS:
;

;
; OWN STORAGE:
;

;
; PSECT DECLARATIONS:
;
	.PSECT	_OTS$CODE	PIC,SHR,LONG,EXE,NOWRT
					; program section for OTS$ code

	.SBTTL	OTS$POWHH_R3 - H_floating ** H_floating

;++
; FUNCTIONAL DESCRIPTION:
;
;	OTS$POWHH_R3 takes an H_floating (REAL*16) base to an
;	H_floating power and returns an H_floating result in
;	registers R0-R3.  This routine is for compiled code
;	support and therefore is not required to follow the
;	VAX Procedure Calling Standard.
;
;	The result of the exponentiation is:
;
;	base	exponent	result
;	----	--------	------
;
;	= 0	> 0		0.0
;	= 0	= 0		Undefined Exponentiation
;	= 0	< 0		Undefined Exponentiation
;
;	< 0	any		Undefined Exponentiation
;
;	> 0	> 0		EXP(exp * LOG(base))
;	> 0	= 0		1.0
;	> 0	< 0		EXP(exp * LOG(base))
;
;
;	Floating Overflow can occur.
;	Undefined Exponentiation can occur if:
;		1)  base is 0 and exponent is 0 or negative
;		2)  base is negative
;
; CALLING SEQUENCE:
;
;	power.wh.v = OTS$POWHH_R3 (base.rh.v, exponent.rh.v)
;
; INPUT PARAMETERS:
;
	base = 4		; H_floating base by value
	exponent = 20		; H_floating exponent by value
;
; IMPLICIT INPUTS:
;	none
;
; OUTPUT PARAMETERS:
;	none
;
; IMPLICIT OUTPUTS:
;	none
;
; FUNCTIONAL VALUE:
;
;	The H_floating result is returned in registers R0-R3.  This
;	is a violation of the VAX procedure calling standard but is
;	allowed for compiled code support routines.
;
; SIDE EFFECTS:
;
;	Modifies registers R0-R3!
;	SS$_FLTOVF(_F) - Floating overflow trap (fault)
;	SS$_FLTUND(_F) - Floating underflow trap (fault)
;	SS$_ROPRAND - Reserved operand fault
;	SIGNALs MTH$_UNDEXP (82 = ' UNDEFINED EXPONENTIATION') if
;		1)  base is 0 and exponent is 0 or negative
;		2)  base is negative
;
;
;--

	.ENTRY	OTS$POWHH_R3, ^M<IV,R4,R5,R6,R7,R8>
	MTH$FLAG_JACKET			; establish math error handler
	MOVH	base(AP), R0		; R0-R3 = base
	BEQL	ZERO			; special case 0 ** n
	BLSS	ERR			; negative base is an error
	TSTH	exponent(AP)		; test the exponent
	BEQL	ONE			; special case n ** 0
	JSB	G^MTH$HLOG_R8		; R0-R3 = LOG(base)
	MULH2	exponent(AP), R0	; R0-R3 = exp * LOG(base)
	JSB	G^MTH$HEXP_R6		; R0-R3 = EXP(exp * LOG(base))
	RET				; function value returned in R0-R3

ONE:
	MOVH	#1, R0			; answer is one
	RET				; returned in R0-R3

ZERO:
	CLRO	R0			; answer is zero
	TSTH	exponent(AP)		; test the exponent
	BGTR	RETURN			; return if positive exponent
ERR:
	ASHQ	#15, #1, R0		; R0-R3 = reserved operand
	CLRQ	R2
	MOVZBL	#MTH$K_UNDEXP, -(SP)	; FORTRAN error number
	CALLS	#1, G^MTH$$SIGNAL	; convert to 32-bit condition code
					; and SIGNAL MTH$UNDEXP
RETURN:
	RET				; return function value in R0-R3

	.END
