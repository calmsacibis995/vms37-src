	.TITLE	LIB$TRA_EBC_ASC	- Translate EBCDIC string to ASCII string
	.IDENT	/1-008/			; File: LIBTRAE2A.MAR RKR1008

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY: General Utility Library
;
; ABSTRACT:
;
;	Translates an EBCDIC string to an ASCII string
;
; ENVIRONMENT: User Mode, AST Reentrant
;
;--
; AUTHOR: R. Reichert,	CREATION DATE: 03-DEC-1979
;
; MODIFIED BY:
;
; REVISION HISTORY:
;
; 1-001 - Original. RKR 03-DEC-79
; 1-002 - Change EBCDIC string descriptor documentation to "bu.dx"
;	  RKR 05-DEC-79
; 1-003 - Correct .SBTTL text.  RKR 19-DEC-79
; 1-004	- Use a handler to convert STR$ signals to LIB$ status codes.  
;	   JBS 22-JAN-1980
; 1-005 - Refetch destination length and address after call to STR$GET1_DX.
;	  SPR 11-38343 SBL 5-June-1981
; 1-006 - Enhance to recognize additional classes of string descriptors
;	  by invoking LIB$ANALYZE_SDESC_R3 to extract length and
;	  address of 1st data byte.
;	  Redirect call to STR$GET1_DX to LIB$SGET1_DD and remove use of
;	  handler.
;	  RKR 26-MAY-1981.
; 1-007 - Add special-case code to process string descriptors that
;	  "read" like fixed string descriptors.  RKR 7-OCT-1981.
; 1-008 - Redirect jsb's from LIB$ANALYZE_SDESC_R3 to
;	  LIB$ANALYZE_SDESC_R2.  18-NOV-1981.

	.SBTTL	DECLARATIONS
;
; INCLUDE FILES: NONE
;

;
; EXTERNAL DECLARATIONS:
;
	.DSABL	GBL				; Prevent undeclared
						; symbols from being
						; automatically global.

	.EXTRN	LIB$SGET1_DD		; dynamic string allocator

	.EXTRN	LIB$ANALYZE_SDESC_R2	; Extract length and address of
					; 1st data byte from descriptor

	.EXTRN	LIB$AB_EBC_ASC		; EBCDIC to ASCII translation
					; table

	.EXTRN	LIB$_INVCHA		; Return code "invalid 
					; character"

	.EXTRN	LIB$_INVARG		; Return code "invalid
					; argument"

;
; MACROS:
;

	$SSDEF				; Definition of SS$_ symbols
	$DSCDEF				; Descriptor components
;
; EQUATED SYMBOLS:
;
ESC_CHAR	= ^X5C		; ASCII Character "\"
SOURCE_CODE	= ^XE0		; EBCDIC Character "\"


;
; PSECT DECLARATIONS:
;
	.PSECT _LIB$CODE PIC, USR, CON, REL, LCL, SHR, -
			EXE, RD, NOWRT, LONG


	.SBTTL	LIB$TRA_EBC_ASC - Translate EBCDIC to ASCII
;++
; FUNCTIONAL DESCRIPTION:
;
;	Translates an EBCDIC string to a ASCII string
;	If destination string is a fixed string, its length must match
;	the length of the input string (no filling is done).
;	If destination string is varying, its length is forced 
;	(if possible) to be the length of the source string.  If it
;	cannot, (MAXSTRLEN too small), LIB$_INVARG is returned.
;
; CALLING SEQUENCE:
;
;	status.wlc.v = LIB$TRA_EBC_ASC ( SRC_STR.rbu.dx, DST_STR.wt.dx)
;
; INPUT PARAMETERS:
;
;	SRC_STR.rbu.dx	address of source string descriptor (EBCDIC)
;
;	DST_STR.wt.dx	address of destination string descriptor (ASCII)
;
;
; IMPLICIT INPUTS:
;
;	The EBCDIC to ASCII translation table at LIB$AB_EBC_ASC
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	SS$_NORMAL	- Routine successfully completed.
;
;	LIB$_INVCHA	- One or more occurences of an untranslatable
;			  character has been detected in the course
;			  of translation.
;
;	LIB$_INVARG	- If destination string is fixed string and
;			  its length is not the same as the source
;			  length.
;
;
; SIDE EFFECTS:
;
;	NONE
;
;--


; DISPLACEMENTS OFF AP OF INPUT ARGUMENTS:

SRC_STR	=	4
DST_STR	=	8


	.ENTRY LIB$TRA_EBC_ASC, ^M<IV, R2, R3, R4, R5, R6, R7>
;+
; Extract the lengths and addresses we will need from the source and
; destination descriptors.
;-
	MOVL	SRC_STR(AP), R0		; Address of src descriptor
	CMPB	DSC$B_CLASS(R0), #DSC$K_CLASS_D	; read like fixed ?
	BGTRU	1$			; no
	MOVQ	@SRC_STR(AP), R6	; length->R6, address->R7
	BRB	2$			; join common flow

1$:	JSB	G^LIB$ANALYZE_SDESC_R2	; Extract: length->R1, addr->R2
	MOVQ	R1, R6			; length->R6, address->R7

2$:	MOVL	DST_STR(AP), R0	; Address of dst descriptor
	CMPB	DSC$B_CLASS(R0), #DSC$K_CLASS_D	; read like fixed ?
	BGTRU	3$			; no
	MOVQ	@DST_STR(AP), R4	; length->R4, address->R5
	BRB	4$			; join common flow

3$:	JSB	G^LIB$ANALYZE_SDESC_R2	; Extract: length->R1, addr->R2
	MOVQ	R1, R4			; length->R4, address->R5

;+
; If destination is a dynamic string, reallocate a dynamic string which 
; is the same length as the input string.
;-

4$:	MOVL	DST_STR(AP), R2		; address of dst descriptor
	CMPB	DSC$B_CLASS(R2), #DSC$K_CLASS_D ; dynamic string dest ?
	BNEQ	5$			; not dynamic
	MOVZWL	R6, -(SP)		; length of source
	PUSHL	DST_STR(AP)		; caller's dest desc addr
	PUSHAL	4(SP)			; address of length of source
	CALLS	#2, G^LIB$SGET1_DD	; allocate a dynamic string
					; equal in len to source
	ADDL2	#4, SP			; restore stack
	MOVZWL	R6, R4			; dest length = source length
	MOVL	DSC$A_POINTER(R2), R5	; new destination address
	BRB	10$			; join common flow
;+
; If destination is a varying string, force its CURLEN to the MIN (
; MAXSTRLEN, length of source).  If we can't, return LIB$_INVARG.
;-
5$:
	CMPB	DSC$B_CLASS(R2), #DSC$K_CLASS_VS ; varying string dest ?
	BNEQ	6$			; not varying
	CMPW	DSC$W_MAXSTRLEN(R2), R6	; MAXSTRLEN ? length of source
	BLSSU	9$			; won't fit, exit with error
	MOVZWL	R6, R4			; Set dest len to source length
	MOVW	R4, @DSC$A_POINTER(R2)	; Set CURLEN to new length
	BRB	10$			; join common flow
;+
; Otherwise, we have a destination string with fixed-length semantics.
; Its length must match the length of the input string, 
; else LIB$_INVARG is returned.
;-
6$:
	CMPW	R6, R4			; source len = dest len ?
	BEQL	10$			; ok if lengths match
9$:	MOVL	#LIB$_INVARG, R0	; return "invalid argument"
	RET

;+
; Set up registers for the MOVTUC and MOVTC to follow
;-
10$:
	MOVW	R6, R0			; get source length in R0
	MOVL	R7, R1			; address of caller's source
;+
; registers at this point...
;
;	R0	length of source string
;	R1	address of source string
;	R2	address of destination descriptor
;	R3	unknown
;	R4	length of destination string (must be equal to R6)
;	R5	address of destination string
;	R6	length of source string (must be equal to R4)
;	R7	address of source string (same as R1)
;-

;+
; Actual translation loop.
; repeated until we translate all error_free, or fall through with
; an error and perform one final MOVTC to complete translation
;-

15$:
	MOVTUC	R0, (R1), #ESC_CHAR, G^LIB$AB_EBC_ASC, R4, (R5)
				; State of regs after a MOVTUC instr.
				; R0 = number of bytes remaining in
				;      source string (including the
				;      byte which caused the escape.
				;      Is zero only if the entire source
				;      string was translated and moved
				;      without escape.
				; R1 = address of the byte which
				;      resulted in destination string
				;      exhaustion or escape.  If no
				;      exhaustion or escape, then
				;      address of one byte beyond the
				;      source string.
				; R2 = 0
				; R3 = address of the table
				; R4 = number of bytes remaining in the
				;      destinatin string.
				; R5 = address of the byte in the
				;      destination string which would
				;      have received the translated byte
				;      that caused the escape or would
				;      have received a translated byte
				;      if the source string were not
				;      exhausted.  If not exhaustion
				;      or escape, then address of one
				;      byte beyond the destination
				;      string.
	BVC	GOOD_COMPL		; terminated by end of string

	MOVB	#ESC_CHAR, (R5)+	; store esc_char in output
					; bumping R5 to next byte pos.
	DECL	R0			; adjust input count for one
					; done by hand
	DECL	R4			; adjust output count for one
					; done by hand
	CMPB	(R1)+, #SOURCE_CODE	; was the input an escape char
	BEQL	15$			; yes -- treat as success and
					; and continue

;+
; an untranslatable input char has been detected.  Translate rest of
; string and exit with an error status of LIB$_INVCHA
;-

	MOVTC	R0, (R1), 0(SP), G^LIB$AB_EBC_ASC, R4, (R5)
					; NOTE: lengths are guarenteed
					; to be equal, so fill_char is
					; not needed.
					; NOTE: lengths are guaranteed
					; to be equal, so fill_char is
					; not needed.
				; State of regs after a MOVTC instr.
				; R0 = number of translated bytes
				;      remaining in source string.
				;      Is non zero only if source string
				;      is longer than destination 
				;      string.
				; R1 = address of one byte beyond the
				;      last byte in source string that
				;      was translated.
				; R2 = 0
				; R3 = address of the translation table
				; R4 = 0
				; R5 = address of one byte beyond the
				;      destination string.
				;
	MOVL	#LIB$_INVCHA, R0	; return "invalid char" code
	RET

GOOD_COMPL:
	MOVL	#SS$_NORMAL, R0		; return success
	RET

	.END
