	.TITLE	MTH$GSINH 	; G Floating Hyperbolic Sine routine
				; (GSINH)
	.IDENT /1-005/		; File: MTHGSINH.MAR	EDIT: RNH1005
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;
; FACILITY: MATH LIBRARY
;++
; ABSTRACT:
;
; MTH$GSINH is a function which returns the G floating hyperbolic sine
; of its G floating point argument. The call is standard
; call-by-reference.
;
;--
;
; VERSION: 1
;
; HISTORY:
; AUTHOR:
;	Steven B. Lionel, 26-Jan-79: Version 1
;
; MODIFIED BY:
;
;
;

	.SBTTL	HISTORY	; Detailed Current Edit History


; ALGORITHMIC DIFFERENCES FROM FP-11/C ROUTINE:	none
;
; Edit History for Version 1 of MTH$GSINH 
;
; 1-001 - Adapted from MTH$DSINH version 1-001.  SBL 26-Jan-79
; 1-002 - Use MTH$GEXP_R6.  SBL 27-Sept-1979
; 1-003 - Eliminated second call to EXP for input values between 27*ln2
;	  and 1023*ln2.
;	- Changed all final floating point divisions by 2 to interger 
;	  subrtracts of 1 from the exponent field.
;	- Extended maximum range 1024*ln2.
;	- Chaneged logic for computing EXP(|x|-ln2) to reduce error.
;	- RNH 10-FEB-81
; 1-004 - Changed W^ to G^ in call to MTH$$SIGNAL RNH 09-Sept-1981
; 1-005 - Eliminated symbolic short literals.  RNH 15-Oct-81

	.SBTTL	DECLARATIONS	; Declarative Part of Module

;
; INCLUDE FILES:
;
; EXTERNAL SYMBOLS:
	.DSABL	GBL
	.EXTRN	MTH$$SIGNAL
	.EXTRN	MTH$K_FLOOVEMAT
	.EXTRN	MTH$GEXP_R6
;
; EQUATED SYMBOLS:

	value	= 4			; value.rg.r

;
; MACROS:	none
;


;
; PSECT DECLARATIONS:

	.PSECT	_MTH$CODE	PIC,SHR,LONG,EXE,NOWRT
					; program section for math routines
;
; OWN STORAGE:	none
;
;
; CONSTANTS:
;

G_27_LOG_2:
	.QUAD	^X20E28723B7084052	; 27*ln2
G_1023_LOG_2:
	.QUAD	^X7B606E3A28B740A6	; 1023*ln2
G_1024_LOG_2:
	.QUAD	^X39EEFEFA2E4240A6	; 1024*ln2
G_LOG_2_HI:
	.QUAD	^X3C00FEFA2E424006	; (high 43 bits of ln2)+2**-43
G_LOG_2_LO:
	.QUAD	^X4C67361C8654BD50	; ln2 - G_LOG_2_HI

GSINHTAB:

	.WORD	^O037172,^O167215
	.WORD	^O072146,^O147302	; DECIMAL:   0.2508223608819151D-07
	.WORD	^O037347,^O016742
	.WORD	^O075446,^O126234	; DECIMAL: 0.2755729803646086D-05
	.WORD	^O037512,^O000640
	.WORD	^O015050,^O044164	; DECIMAL: 0.1984126984813681D-03
	.WORD	^O037641,^O010421
	.WORD	^O010421,^O007315	; DECIMAL: 0.8333333333332327D-02
	.WORD	^O037745,^O052525
	.WORD	^O052525,^O052526	; DECIMAL: 0.1666666666666667D+00
	.WORD	0,0
	.WORD	0,0			; DECIMAL: 0.D0
  
GSINHLEN	= .- GSINHTAB/8


	.SBTTL	MTH$GSINH  - Standard G Floating DSINH


;++
; FUNCTIONAL DESCRIPTION:
;
; GSINH  - G floating point function
;
; GSINH(X) is computed as:
;
;	If |X| < 2**-27, GSINH(X) = X.
;	IF 2**-27 =< |X| < 0.25, GSINH(X) = Chebyshev Series.
;	If 0.25 =< |X| < 27*ln2, GSINH(X) = (GEXP(X) - GEXP(-X))/2.
;	If 27*ln2 =< |X| < 1023*ln2, GSINH(X) = sign(X)*GEXP(|X|)/2.
;	If 1023*ln2 =< |X| < 1024*ln2, then GSINH(X) = sign(X)*GEXP(|X|-ln2).
;	If 1024*ln2 =< |X|, then overflow.
;
; CALLING SEQUENCE:
;
;	GSINH.wg.v = MTH$GSINH(x.rg.r)
;
; INPUT PARAMETERS:

	LONG = 4			; define longword multiplier
	x = 1 * LONG			; Contents of x is the argument

; IMPLICIT INPUTS:	none
;
; OUTPUT PARAMETERS:
;
;	VALUE:	G floating hyperbolic sine of the argument
;
; IMPLICIT OUTPUTS:	none
;
; COMPLETION CODES:	none
;
; SIDE EFFECTS:
;
; Signal: MTH$_FLOOVEMAT if 1024*ln2 < |X| with reserved operand in R0/R1
; (copied to the signal mechanism vector CHF$L_MCH_R0/R1 by LIB$SIGNAL).
; Associated message is: "FLOATING OVERFLOW IN MATH LIBRARY". Result is reserved
; operand -0.0 unless a user supplied (or any) error handler changes CHF$L_MCH_R0/R1.
;
; NOTE: This procedure disables floating point underflow, enables integer
; overflow.
;
;---


	.ENTRY	MTH$GSINH, ^M<IV, R2, R3, R4, R5, R6, R7>
					; standard call-by-reference entry
					; disable DV (and FU), enable IV
	MTH$FLAG_JACKET			; flag that this is a jacket procedure in
					; case of an error in routine
					; If an error, convert signal to user PC
					; and resignal
	MOVG	@value(AP), R6		; R6/R7 = |X| = @value(AP)
	MOVQ	R6, R0
	BICW2	#^X8000, R0		; R0/R1 = |X|
	CMPW	R0, #^X3FF0		; compare |X| with 0.25
	BGEQ	GEQ_TO_0.25		; branch if |X| >= 0.25

;
; |X| < 0.25
;

	CMPW	R0, #^X3E60		; compare |X| with 2**-27
	BGEQ	GEQ_TO_2M27		; branch if |X| >= 2**-27

;
; |X| < 2**-27
;

	MOVQ	R6, R0			; R0/R1 = X
	RET				; return with result = argument

;
; 2**-27 =< |X| < 0.25
;

GEQ_TO_2M27:
	MULG2	R0,R0			; Get ARG**2 for POLYG
	POLYG	R0, #GSINHLEN-1, GSINHTAB
					; R0/R1 = SUM(Ci*X**i), with
					; last coefficient zero
	MULG2	R6,R0			; MULG2 by ARG, and then
	ADDG2	R6,R0			; add in ARG with overhang.
	RET				; return with result in R0/R1

;
; 0.25 =< |X|
;

GEQ_TO_0.25:
	CMPG	R0, G_1023_LOG_2		; compare |X| with 1023*ln2
	BGTR	GTR_THAN_1023_LOG_2		; branch if |X| > 1023*ln2

;
; 0.25 =< |X| =< 1023*ln2
;

	CMPG	R0, G_27_LOG_2		; Compare |X| to 27*ln2.  If greater
	BGTR	ONLY_ONE_TERM		; only one call to GEXP is necessary.
;
; 0.25 =< |X| < 27*ln2
;

	MOVQ	R6, R0			; R0/R1 = X
	JSB	MTH$GEXP_R6		; R0/R1 = GEXP(X)
	MOVQ	R0, -(SP)		; push GEXP(X) on stack
	MNEGG	@value(AP), R0		; R0/R1 = -X
	JSB	MTH$GEXP_R6		; R0/R1 = GEXP(-X)
	SUBG3	R0, (SP)+, R0		; R0/R1 = GEXP(X) - GEXP(-X)
	SUBW	#^X0010, R0		; R0/R1 = (GEXP(X)-GEXP(-X))/2
	RET				; return with result in R0/R1

;
; 27*ln2 =< |X| < 1023*ln2
;

ONLY_ONE_TERM:
	JSB	MTH$GEXP_R6		; R0/R1 = GEXP(|X|)
	TSTG	@value(AP)		; Check sign of X
	BGTR	POSITIVE		; If negative change sign of
	MNEGG	R0, R0			; GEXP(|X|)
POSITIVE:
	SUBW	#^X0010, R0		; R0/R1 = sign(X)*GEXP(|X|)/2
	RET
;
; 1023*ln2 =< |X|
;

GTR_THAN_1023_LOG_2:
	CMPG	R0, G_1024_LOG_2	; Compare |X| to 1024*ln2
	BGEQ	ERROR			; if 1024*ln2 =<|X|, overflow occurs


;
; 1023*ln2 < |X| < 1024*ln2
;

	SUBG2	G_LOG_2_HI, R0		; R0/R1=|X|-G_LOG_2_HI
	JSB	MTH$GEXP_R6		; R0/R1 = GEXP(|X|-G_LOG_2_HI)
	MULG3	G_LOG_2_LO, R0, R2	; R2/R3=GEXP(|X|-G_LOG_2_HI)*G_LOG_2_LO
	SUBG2	R2, R0			; R0/R1=GEXP(|X|-ln2)
	TSTG	@value(AP)		; test the sign of X
	BGEQ	10$			; branch if X >= 0
	MNEGD	R0, R0			; R0/R1 = sign(X) * GEXP(|X|-ln2)
10$:	RET				; return with result in R0/R1



;
; 1024*ln2 =< |X|, error
;

ERROR:	MOVZBL	#MTH$K_FLOOVEMAT, -(SP)	; condition value
	ASHQ	#15, #1, R0		; R0/R1 = result = reserved operand -0.0
					; goes to signal mechanism vector
					; (CHF$L_MCH_R0/R1) so error handler
					; can modify the result.
	CALLS	#1, G^MTH$$SIGNAL	; signal error and use real user's PC
					; independent of CALL vs JSB
	RET				; return - R0/R1 restored from CHF$L_MCH_R0/R1



	.END
