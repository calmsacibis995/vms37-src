	.TITLE	OTS$DIVC - COMPLEX / COMPLEX DIVISION ROUTINE
	.IDENT	/1-003/		; File: OTSDIVC.MAR

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;
; FACILITY: MATH LIBRARY
;++
; ABSTRACT:
;
;	Perform COMPLEX division
;
;--
;
; VERSION: 0
;
; HISTORY:
;
; AUTHOR:
;	Jonathan Taylor, 28-Jun-77: Version 0
;
; MODIFIED BY:
;
;
;

	.SBTTL	HISTORY		; Detailed Current Edit History


; Edit History for Version 0 of OTSDIVC
;

; 0-04	- Change FOR$FLAG_JACKET to MTH$FLAG_JACKET.  TNH 17-July-78
; 1-001	- Update version number and copyright notice.  JBS 16-NOV-78
; 1-002	- Include MTHJACKET at assembly time.  JBS 07-DEC-78
; 1-003	- Add "_" to the PSECT directive.  JBS 22-DEC-78

	.SBTTL	DECLARATIONS

;
; INCLUDE FILES:
;
;	MTHJACKET.MAR			; Math jacketing macro

;
; EXTERNAL SYMBOLS:
;
;	none

;
; MACROS:
;
;	none

;
; PSECT DECLARATIONS:
;
	.PSECT	_OTS$CODE	PIC, SHR, LONG, EXE, NOWRT
					; Program section for OTS$ code

;
; EQUATED SYMBOLS:
;
	a	= 4			; real part of dividend
	b	= 8			; imag part of dividend
	c	= 12			; real part of divisor
	d	= 16			; imag part of divisor

;
; OWN STORAGE:
;
;	none


	.SBTTL	COMPLEX / COMPLEX giving COMPLEX result

;++
; FUNCTIONAL DESCRIPTION:
;
;	OTS$DIVC - COMPLEX / COMPLEX giving COMPLEX result
;
;
;	The COMPLEX result is computed as follows:
;
;	1)  Let (a, b) represent the COMPLEX dividend.
;	2)  Let (c, d) represent the COMPLEX divisor.
;	3)  Let (r, i) represent the COMPLEX quotient.
;
;	Then:
;
;	r = (ac + bd) / (cc + dd)
;	i = (bc - ad) / (cc + dd)
;
; CALLING SEQUENCE:
;
;	Complex_quotient.wfc.w = OTS$DIVC(dividend.rfc.v, divisor.rfc.v)
;
; INPUT PARAMETERS:
;
;	Dividend and divisor parameters are represented as standard
;	FORTRAN COMPLEX numbers and are CALL BY VALUE.
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; FUNCTIONAL VALUE:
;
;	The COMPLEX value returned is (a, b) / (c, d)
;
; SIDE EFFECTS:
;
;	SS$ARITH is SIGNALed by hardware on floating zero divide
;	SS$ARITH is SIGNALed by hardware on floating overflow
;--

	.ENTRY	OTS$DIVC, ^M<R2,R3,R4,R5>	; disable integer overflow
	MTH$FLAG_JACKET			; establish math error handler
	MOVQ	c(AP), R4		; R4/R5 = divisor

; Perform scaling of all operands before division
;
	EXTZV	#7, #8, R4, R2		; R2 = R4<exp>  0,1,...377
	EXTZV	#7, #8, R5, R1		; R1 = R5<exp>  0,1,...377
	CMPW	R1, R2			; R1 = MAX (c<exp>, d<exp>)
	BGTR	2$
	MOVW	R2, R1
2$:	MNEGB	R1, R1			; R1 = scaling exponent  0,377,376,...,1
	ROTL	#7, R1, R1		; build a floating scale factor
					; scale all operands
	MULF	R1, R4			; c
	MULF	R1, R5			; d
	MULF3	R1, a(AP), R2		; a
	MULF	b(AP), R1		; b

	MULF3	R2,R4,R0		; R0 = ac
	MULF3	R1, R5, R3		; R3 = bd
	ADDF	R3, R0			; R0 = ac+bd
	MULF	R5, R2			; R2 = ad
	MULF	R4, R1			; R1 = bc
	SUBF	R2, R1			; R1 = bc - ad
	MULF	R4, R4			; R4 = cc
	MULF	R5, R5			; R5 = dd
	ADDF	R4, R5			; R5 = cc + dd
	DIVF	R5, R0			; R0 = (ac+bd) / (cc+dd)
	DIVF	R5, R1			; R1 = (bc-ad) / (cc+dd)

	RET				; (R0, R1) = (r, i)

	.END
