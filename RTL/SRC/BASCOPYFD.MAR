	.TITLE	BAS$$COPY_FD	Copy floating or double
	.IDENT	/1-003/		; File: BASCOPYFD.MAR

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;
; FACILITY: BASIC-PLUS-2 Virtual array support
;++
; ABSTRACT:
;
;	This module contains two routines to copy floating and double
;	precision numbers from one place in memory to another.  This
;	is done with special instructions to check for reserved
;	operands.  It is done by subroutine because BLISS does not have
;	floating point manipulation.
;
;
;--
;
; VERSION: 1
;
; HISTORY:
;
; AUTHOR:
;	John Sauter, 03-FEB-1979
;
; MODIFIED BY:
;
;
;

	.SBTTL	HISTORY		; Detailed Current Edit History


; Edit History for Version 1 of BASCOPYFD
;
; 1-001	- Original.  JBS 03-FEB-1979
; 1-002	- Correct a typo in a comment.  JBS 08-MAY-1979
; 1-003	- Make JSB entry points end in _R1.  JBS 23-AUG-1979

	.SBTTL	DECLARATIONS

;
; INCLUDE FILES:
;
;	NONE
;
; EXTERNAL SYMBOLS:
;
;	NONE
;
;
; MACROS:
;
;	NONE
;
;
; PSECT DECLARATIONS:
	.PSECT	_BAS$CODE	PIC, SHR, LONG, EXE, NOWRT

;
; EQUATED SYMBOLS:
;
;	NONE
;
;
; OWN STORAGE:
;
;	NONE

	.SBTTL	BAS$$COPY_F_R1

;++
; FUNCTIONAL DESCRIPTION:
;
;	Copys a single-precision (32-bit) floating number
;
; CALLING SEQUENCE:
;
;	JSB BAS$$COPY_F_R1 (src.rf.r, dst.wf.r)
;
; INPUT PARAMETERS:
;	
;	SRC.rf.r		The number to be copied
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	DST.wf.r		The place to which to copy the number
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; FUNCTION VALUE:
;
;	NONE
;
; SIDE EFFECTS:
;
;	May get Floating Reserved Operand hardware trap.
;	
;--


BAS$$COPY_F_R1::
	MOVL	(R0),-(SP)		; Get the number without trapping
	MOVF	(SP)+,(R1)		; Trap if reserved and store
	RSB				; Return to caller.

	.SBTTL	BAS$$COPY_D_R1

;++
; FUNCTIONAL DESCRIPTION:
;
;	Copys a double-precision (64-bit) floating number
;
; CALLING SEQUENCE:
;
;	JSB BAS$$COPY_D_R1 (src.rd.r, dst.wd.r)
;
; INPUT PARAMETERS:
;	
;	SRC.rd.r		The number to be copied
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	DST.wd.r		The place to which to copy the number
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; FUNCTION VALUE:
;
;	NONE
;
; SIDE EFFECTS:
;
;	May get Floating Reserved Operand hardware trap.
;	
;--

BAS$$COPY_D_R1::
	MOVQ	(R0),-(SP)		; Get the number without trapping
	MOVD	(SP)+,(R1)		; Trap if reserved and store
	RSB				; Return to caller.
;
	.END
