MODULE BAS$STR (			! Routines to do BASIC STR$ function
		IDENT = '1-006'		! module BASSTR.B32
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY: BASIC Support Library
!
! ABSTRACT:
!
!	This module has 3 entry points, one each for long, floating and double.
!	The double routine checks for a BASIC frame and picks
!	up the scale factor.  Then all routines convert a number
!	to a numeric string as it would be formatted by the BASIC print 
!	statement but without leading or trailing spaces (by a CALL to the
!	correct BAS$ conversion routine).
!
! ENVIRONMENT: User mode, AST level or not or mixed
!
! AUTHOR: R. Will, CREATION DATE: 8-Mar-79
!
! MODIFIED BY:
!
! R. Will, 8-Mar-79: VERSION 01
! 01	- original
! 1-002	- Prefix string linkages with STR$.  JBS 04-JUN-1979
! 1-003 - Add BASLNK for scaling linkages.  RW  26-Jun-79
! 1-004 - Change to use new conversion routines.  RW 7-Jul-79
! 1-005 - Add longword entry point.  RW  10-Sept-79
! 1-006 - String cleanup, don't use $STR$ macros.  RW  30-Oct-79
!--
!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES: NONE
!

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    BAS$STR_L : NOVALUE,		! Find STR$ of a longword value
    BAS$STR_F : NOVALUE,		! Find STR$ of a floating value
    BAS$STR_D : NOVALUE;		! Find STR$ of a double value

!
! INCLUDE FILES:
!

REQUIRE 'RTLIN:RTLPSECT';		! Declare PSECTs code
REQUIRE 'RTLIN:BASLNK';			! Linkages for BASIC scaling
REQUIRE 'RTLIN:BASFRAME';		! Define offsets in a BASIC frame

!
! MACROS: NONE
!

!
! EQUATED SYMBOLS:
!

LITERAL
    digits_in_long = 10,		! # of digits to display for longword
					!  note: float & double use the default
    strip_spaces = 1;			! flag for stripping spaces

!
! PSECT DECLARATIONS
!

DECLARE_PSECTS (BAS);

!
! OWN STORAGE: NONE
!

!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    BAS$CVT_OUT_D_G;			! Convert # to BASIC string format

BUILTIN
    CVTLD;				! Convert long to double to call CVT rtn

GLOBAL ROUTINE BAS$STR_L (		! convert integer to string
			  STRING,	! Address of destination descriptor
			  VALUE) :	! Find numeric value of this number
			  NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine takes a longword integer and formats it as the BASIC PRINT
!	statement would without leading and trailing spaces 
!	and gives that value to the destination string.
!
! FORMAL PARAMETERS:
!
!	STRING.wt.dx		pointer to input string descriptor
!	VALUE.rl.v		value of a longword number
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	This routine calls the conversion routine and so may signal any of its
!	errors or have any of its side effects.  In particular, the conversion
!	routine calls STR$ routines and so may allocate or deallocate dynamic
!	string space, and lock a string from being written for a period.
!
!--

    BEGIN

    MAP
	STRING : REF BLOCK [8,BYTE];

    LOCAL
	STR_LENGTH : WORD,			! conversion rtn returns len
	TEMP : VECTOR [2, LONG];		! need double to pass to cnv

    CVTLD (VALUE, TEMP [0]);			! make value into double
    BAS$CVT_OUT_D_G (TEMP [0],			! convert this value to string
		   strip_spaces,		! set flag to strip spaces
		   STR_LENGTH,			! return bytes needed for str
		   STRING [0,0,0,0],		! descriptor of result string
		   0,				! no scale factor
		   digits_in_long);		! # of significant digits
		   
    RETURN;
    END;					!End of BAS$STR_L

GLOBAL ROUTINE BAS$STR_F (		! floating number to a string
			  STRING,	! Address of destination descriptor
			  VALUE) :	! Find numeric value of this string
			  NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine takes a floating number and formats it as the BASIC PRINT
!	statement would without leading and trailing spaces 
!	and gives that value to the destination string.
!
! FORMAL PARAMETERS:
!
!	STRING.wt.dx		pointer to input string descriptor
!	VALUE.rf.v		value of a floating number
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	This routine calls the conversion and so may signal any of its errors
!	or have any of its side effects.  In particular, the conversion routine
!	calls STR$ routines and so may allocate or deallocate dynamic string
!	space, or write lock a string for a time.
!
!--

    BEGIN

    MAP
	STRING : REF BLOCK [8,BYTE];

    LOCAL
	STR_LENGTH : WORD,			! conversion rtn returns len
	TEMP : VECTOR [2, LONG];		! need double to pass to cnv

    TEMP [0] = .VALUE;				! make value into double
    TEMP [1] = 0;
    BAS$CVT_OUT_D_G (TEMP [0],			! convert this value to string
		   strip_spaces,		! set flag to strip spaces
		   STR_LENGTH,			! return bytes needed for str
		   STRING [0,0,0,0]);		! descriptor of result string
						! no scale to cvt
						! default # of digits
		   
    RETURN;
    END;					!End of BAS$STR_F

GLOBAL ROUTINE BAS$STR_D (		! convert double to string
			  STRING,	! Address of destination descriptor
			  VALUE1,	! 1st longword of double value to put in
			  VALUE2) :	! 2nd longwrd of double value for string
			  NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine takes a double number and formats it as the BASIC PRINT
!	statement would, except without leading and trailing spaces,
!	and gives that value to the destination string.
!	Note that this routine violates the calling standard by accepting and
!	calling a routine with double floating passed by value.
!
! FORMAL PARAMETERS:
!
!	STRING.wt.dx		pointer to input string descriptor
!	VALUE.rd.v		value of a double number
!	(VALUE1 and VALUE2 used to pick up the 2 words of double value)
!
! IMPLICIT INPUTS:
!
!	Scale factor from the BASIC frame
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	This routine calls the conversion routine and so may signal any of its
!	errors and have any of its side effects.  In particular, the conversion
!	routine calls STR$ routines and so may allocate or deallocate
!	dynamic string space, or write lock a string for a short time.
!
!--

    BEGIN

    MAP
	STRING : REF BLOCK [8,BYTE];

    LOCAL
	STR_LENGTH : WORD;			! conversion rtn returns len

    BAS$CVT_OUT_D_G (VALUE1,			! convert this value to string
		   strip_spaces,		! set flag to strip spaces
		   STR_LENGTH,			! return bytes needed for str
		   STRING [0,0,0,0],		! return string
		   $BAS$SCALE);			! scale factor		   
						! default # of digits
		   
    RETURN;
    END;			!End of BAS$STR_D

END				!End of module
ELUDOM
