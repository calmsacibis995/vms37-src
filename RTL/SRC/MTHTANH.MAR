	.TITLE	MTH$TANH 	; Floating Point Hyperbolic Tangent routine
				; (TANH)
	.IDENT /1-008/		; File: MTHTANH.MAR  Edit: JAW1008
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;
; FACILITY: MATH LIBRARY
;++
; ABSTRACT:
;
; MTH$TANH is a function  which  returns the floating point hyperbolic tangent
; of its single precision floating point argument. The call is standard
; call-by-reference.
;
;--
;
; VERSION: 01
;
; HISTORY:
; AUTHOR:
;	Peter Yuo, 29-Jun-77: Version 01
;
; MODIFIED BY:
;
;
;

	.SBTTL	HISTORY	; Detailed Current Edit History


; ALGORITHMIC DIFFERENCES FROM FP-11/C ROUTINE:	none
;
; Edit History for Version 01 of MTH$TANH 
;
; 0-4	- Call MTH$COSH, MTH$SINH directly instead of using POLY.  TNH 13-June-78
; 0-5	- Declare externals, word offsets.  TNH 13-June-78
; 1-006	- Put version number in standard format, with three digits of
;	   edit number, and update copyright notice.  JBS 16-NOV-78
; 1-007	- Add "_" to the PSECT directive.  JBS 22-DEC-78
; 1-008 - Change constant 16.0 to 10.0 for improved efficiency.  The
;	   value of X above which 1.0 is the best machine approximation
;	   to TANH(X) is about 9.01.  The next higher number that can be
;	   represented as a short literal is 10.0.  JAW 19-Sep-80

	.SBTTL	DECLARATIONS	; Declarative Part of Module

;
; INCLUDE FILES:	OTSPARAMS.MAR
;
; EXTERNAL SYMBOLS:	MTH$JACKET_HDLR
;
	.DSABL	GBL			; Force all symbols to need .EXTERN
	.EXTRN	MTH$EXP_R4		; EXP
	.EXTRN	MTH$COSH		; COSH
	.EXTRN	MTH$SINH		; SINH
; EQUATED SYMBOLS:

	LF_0.25	= 0@16 + ^X3F80		; 0.25
	LF_2_POWER_M14	= 0@16 + ^X3980	; 2**-14
	SF_1.0	= ^F1.0			; 1.0
	SF_10.0	= ^F10.0			; 10.0
	value	= 4			; value.rf.r

;
; MACROS:	none
;
; PSECT DECLARATIONS:

	.PSECT	_MTH$CODE	PIC,SHR,LONG,EXE,NOWRT
					; program section for math routines
;
; OWN STORAGE:	none
;
;
; CONSTANTS:
;
;	NONE

	.SBTTL	MTH$TANH  - Standard Single Precision Floating TANH


;++
; FUNCTIONAL DESCRIPTION:
;
; TANH  - single precision floating point function
;
; TANH(X) is computed as:
;
;	If |X| =< 2**-14, then TANH(X) = X.
;	If 2**-14 < |X| =< 0.25, then TANH(X) = SINH(X)/COSH(X).
;	If 0.25 < |X| < 10.0, then TANH(X) = (EXP(2*X) - 1) / (EXP(2*X) + 1)
;	If 10.0 =< |X|, then TANH(X) = sign(X) * 1
;
; CALLING SEQUENCE:
;
;	TANH.wf.v = MTH$TANH(x.rf.r)
;
; INPUT PARAMETERS:

	LONG = 4			; define longword multiplier
	x = 1 * LONG			; Contents of x is the argument

; IMPLICIT INPUTS:	none
;
; OUTPUT PARAMETERS:
;
;	VALUE:	floating hyperbolic tangent of the argument
;
; IMPLICIT OUTPUTS:	none
;
; COMPLETION CODES:	none
;
; SIDE EFFECTS:	none
;
; NOTE: This procedure disables floating point underflow, enables integer
; overflow.
;
;---


	.ENTRY	MTH$TANH, ^M<IV, R2, R3, R4>
					; standard call-by-reference entry
					; disable DV (and FU), enable IV
	MTH$FLAG_JACKET			; flag that this is a jacket procedure in
					; case of an error in routine
					; If an error, convert signal to user PC
					; and resignal
	MOVF	@value(AP), R0		; R0 = |X| = @value(AP)
	BICW	#^X8000, R0		; R0 = |X|
	CMPF	R0, #LF_2_POWER_M14	; compare |X| with 2**-14
	BLEQ	OUT_X			; branch if |X| =< 2**-14

;
; 2**-14 < |X|
;

	CMPF	R0, S^#SF_10.0		; compare |X| with 10.0
	BGEQ	GEQ_TO_10.0		; branch if |X| >= 10.0

;
; 2**-14 < |X| < 10.0
;

	CMPF	R0, #LF_0.25		; compare |X| with 0.25
	BLEQ	LEQ_TO_0.25		; branch if |X| =< 0.25

;
; 0.25 < |X| < 10.0
;

	ADDF3	@value(AP), @value(AP), R0
					; R0 = 2*X
	JSB	G^MTH$EXP_R4		; R0 = EXP(2*X)
	ADDF3	S^#SF_1.0, R0, R1	; R1 = EXP(2*X) + 1
	SUBF	S^#SF_1.0, R0		; R0 = EXP(2*X) - 1
	DIVF	R1, R0			; R0 = (EXP(2*X) - 1) / (EXP(2*X) + 1)
	RET				; return with result in R0

;
; 2**-14 < |X| =< 0.25
;

LEQ_TO_0.25:
	CALLG	(AP), G^MTH$COSH		; R0 = COSH(X)
	MOVF	R0, R2			; R2 = COSH(X)
	CALLG	(AP), G^MTH$SINH		; R0 = SINH(X)
	DIVF	R2, R0			; R0 = SINH(X) / COSH(X)
	RET				; return with result in R0

;
; |X| >= 10.0
;

GEQ_TO_10.0:
	MOVF	S^#SF_1.0, R0		; R0 = 1.0
	TSTF	@value(AP)		; test the sign of X
	BGEQ	10$			; branch if X >= 0
	MNEGF	R0, R0			; R0 = -1
10$:	RET				; return with result in R0

;
; |X| =< 2**-14
;

OUT_X:	MOVF	@value(AP), R0		; R0 = TANH(X) = X
	RET				; return with result in R0



	.END
