MODULE BAS$INIT (				!
		IDENT = '1-013'			! File: BASINIT.B32
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!

!++
! FACILITY:  BASIC-PLUS-2 Frame Support
!
! ABSTRACT:
!
!	These routines set up and tear down frames for BASIC-PLUS-2.
!	Frames are used for main routines, external functions,
!	external subroutines, internal functions (both DEFs and DEF*s)
!	internal subroutines (GOSUBs) and condition handlers.
!
! ENVIRONMENT:  VAX-11 user mode
!
! AUTHOR: John Sauter, CREATION DATE: 10-Oct-78
!
! MODIFIED BY:
!
! 1-001	- Original.
! 1-002	- Clear numeric array elements when allocating them.  JBS 31-JAN-1979
! 1-003	- Correct a typo in the check for proper number of arguments
!	   to a subroutine.  JBS 02-FEB-1979
! 1-004	- Correct some typos in setting up arrays.  JBS 05-FEB-1979
! 1-005	- Check scale factors and long/double flags in the previous
!	   major frame, not just the previous frame.  JBS 08-FEB-1979
! 1-006	- Remove BSF$B_IN_L_FCD.  JBS 09-FEB-1979
! 1-007	- Use an auxiliary variable when nulling the result string
!	   to avoid a bug in the BLISS compiler when referring to
!	   AP directly as a BUILTIN.  JBS 12-FEB-1979
! 1-008	- Allocate two kinds of strings: dynamic and fixed.  JBS 20-MAR-1979
! 1-009	- Do not imply that R11 points to a frame.  JBS 08-MAY-1979
! 1-010	- Change OTS$S and LIB$S to STR$.  JBS 21-MAY-1979
! 1-011	- Use right shifts instead of divides.  JBS 11-JUN-1979
! 1-012	- Check for correct code in arg list.  JBS 03-AUG-1979
! 1-013	- Change BAS$K_WROMATPAC to BAS$K_DIFUSELON.  JBS 19-SEP-1979
!--

!
!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!

LINKAGE
    BAS$INIT_LINK = JSB (REGISTER = 0, REGISTER = 1, REGISTER = 2) : 	!
    GLOBAL (BSF$A_MAJOR_STG = 11, BSF$A_MINOR_STG = 10, BSF$A_TEMP_STG = 9)	!
    NOPRESERVE (8, 7, 6, 5, 4, 3, 2, 1, 0);

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    BAS$INIT_R8 : NOVALUE BAS$INIT_LINK;	! start major frame

!
! INCLUDE FILES:
!

LIBRARY 'RTLSTARLE';				! symbols for strings

REQUIRE 'RTLIN:RTLPSECT';			! macros for defing psects

REQUIRE 'RTLIN:BASFRAME';			! Define frame structure

REQUIRE 'RTLIN:BASINARG';			! Define argument list

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! PSECTS:
!
DECLARE_PSECTS (BAS);				! declare psects for BAS$ facility
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    STR$FREE1_DX,				! frees a dynamic string
    BAS$$SIGNAL : NOVALUE,			! signals error
    BAS$HANDLER;				! handles signals

!
! The following are the error codes used in this module.
!

EXTERNAL LITERAL
    BAS$K_TOOFEWARG : UNSIGNED (8),		! Too few arguments
    BAS$K_TOOMANARG : UNSIGNED (8),		! Too many arguments
    BAS$K_SCAFACINT : UNSIGNED (8),		! Scale factor interlock
    BAS$K_DIFUSELON : UNSIGNED (8),		! /LONG, /DOUBLE problems
    BAS$K_ARGDONMAT : UNSIGNED (8),		! Arguments don't match
    BAS$K_NOTIMP : UNSIGNED (8);		! Not implemented


GLOBAL ROUTINE BAS$INIT_R8 (			! start major frame
	ARGLIST, 				! frame parameters
	DATA_RELOC, 				! start of data
	CODE_RELOC				! start of code
    ) : NOVALUE BAS$INIT_LINK =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Set up a frame for a BASIC-PLUS-2 major procedure.  The frame
!	is allocated on the stack, and R11 and R9 are set up to point
!	to it.  The argument list tells how to do the allocation.
!
! FORMAL PARAMETERS:
!
!	ARGLIST.rx.v	List of information needed to set up the
!			frame.  See BASIC-PLUS-2/VAX Description
!			of Generated Code for details.
!	DATA_RELOC.ra.v	Address of this procedure's data.  Data offsets
!			in the argument list are based on this value.
!	CODE_RELOC.ra.v	Address of this procedure's code.  Offsets in
!			the PC delta table are based on this value.
!
! IMPLICIT INPUTS:
!
!	Some information from the previous frame, if it is a
!	BASIC frame.
!
! IMPLICIT OUTPUTS:
!
!	The values of R11 and R9, which point to the automatic
!	storage and the temporary storage, respectively.
!
! ROUTINE VALUE:
!
!	NONE
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Leaves lots of things on the stack for use by the compiled
!	BASIC-PLUS-2 code.  These things will be removed by BAS$END_R8.
!
!--

    BEGIN

    EXTERNAL REGISTER
	BSF$A_MAJOR_STG : REF BLOCK [, BYTE] FIELD (BSF$MAJOR_FRAME),
	BSF$A_MINOR_STG,
	BSF$A_TEMP_STG;

    BUILTIN
	AP,
	FP,
	SP,
	CVTLD;					! convert 32-bit integer to double floating

    MAP
	ARGLIST : REF BLOCK [0, BYTE] FIELD (BAS$INIT_ARGS),	! arg list
	AP : REF VECTOR;			! caller's arg list

!+
! Define local variables as registers.  We cannot have any stack locals
! since we manipulate the stack pointer in this routine.
!-

    REGISTER
	RETURN_ADDRESS,				! address to return to
	FMP : REF BLOCK [0, BYTE] FIELD (BSF$FCD),	! pointer to FCD
	PREV_FMP : REF BLOCK [0, BYTE] FIELD (BSF$FCD),	! a previous frame
	ARRAY_DESC : REF BLOCK [0, BYTE],	! pointer to build array descriptors
	ARRAY_INDEX;				! index for array modification

!+
! Save return address because we are going to fool with the stack
!-
    RETURN_ADDRESS = ..SP;
!+
! Make sure we are passed an argument list we understand.
!-

    IF (.ARGLIST [BAS$B_IN_V_FCD] NEQ BAS$K_IN_V_FCD) THEN BAS$$SIGNAL (BAS$K_NOTIMP);

!+
! Allocate frame control data.
!-
    FMP = .FP;
    SP = .FMP - BSF$K_LENFCDMAJ + %UPVAL;
!+
! Allocate BSF$A_USER_HAND.
! It is initialized to 0 normally (ON ERROR GOTO 0), but if the
! first statement in the program is ON ERROR GOTO <line number>
! or ON ERROR GO BACK, it is initialized to 1 (ON ERROR GO BACK)
! to prevent a "window" in which error handling is ON ERROR GOTO 0
! no matter what the user wants.
!-

    IF (((.ARGLIST [BAS$W_IN_FLAGS]) AND (BSF$M_FCD_OEGO)) NEQ 0)
    THEN
	BEGIN
	SP = .SP - %UPVAL;
	.SP = 1;
	END
    ELSE
	BEGIN
	SP = .SP - %UPVAL;
	.SP = 0;
	END;

!+
! LOAD Rn (R11)
!-
    BSF$A_MAJOR_STG = .SP - 127;
    BSF$A_MINOR_STG = 0;
!+
! Initialize parts of the frame control data.
!-
    FMP [BSF$A_MARK] = 0;
    FMP [BSF$A_BASE_R11] = .BSF$A_MAJOR_STG;
    FMP [BSF$A_BASE_R10] = .BSF$A_MINOR_STG;
    FMP [BSF$B_LEN_FCD] = BSF$K_LENFCDMAJ;
    FMP [BSF$B_PROC_CODE] = .ARGLIST [BAS$B_IN_PROC_C];
    FMP [BSF$W_FCD_FLAGS] = .ARGLIST [BAS$W_IN_FLAGS];
    FMP [BSF$A_PROC_ID] = .ARGLIST [BAS$L_IN_PROC_I] + .DATA_RELOC;
    FMP [BSF$A_INIT_ARG] = .ARGLIST;
    FMP [BSF$L_INIT_REL] = .DATA_RELOC;
!+
! Allocate numeric scalars.  They are all initialized to zero.
!-

    INCR COUNTER FROM 1 TO .ARGLIST [BAS$L_IN_LEN_SC] DO
	BEGIN
	SP = .SP - %UPVAL;
	.SP = 0;
	END;

!+
! Copy formals.
!-

    DECR COUNTER FROM MIN (.ARGLIST [BAS$B_IN_NO_FML], ((.AP [0]) AND 255)) TO 1 DO
	BEGIN
	SP = .SP - %UPVAL;
	.SP = .AP [.COUNTER];
	END;

!+
! Allocate and initialize descriptors.
!-
    SP = .SP - .ARGLIST [BAS$L_IN_LEN_DT];
!+
! Set ARRAY_DESC to point to the space allocated.
!-
    ARRAY_DESC = .SP;
!+
! Load the space from the template and then modify it based
! on the modification table.
!-

    INCR COUNTER FROM 0 TO ((.ARGLIST [BAS$L_IN_LEN_DT]^-2) - 1) DO
	BEGIN
	ARRAY_DESC [.COUNTER*%UPVAL, 0, %BPVAL, 0] = .((.ARGLIST [BAS$L_IN_DT_TMT]) + 	!
	.DATA_RELOC + (.COUNTER*%UPVAL));
	END;

!+
! Now modify the descriptors.  These are usually array descriptors.
!-

    INCR COUNTER FROM 0 TO (.ARGLIST [BAS$L_IN_LEN_DM] - 1) DO
	BEGIN
	ARRAY_INDEX = .((.ARGLIST [BAS$L_IN_DT_MOD]) + .DATA_RELOC + (.COUNTER*%UPVAL));
	BSF$A_MAJOR_STG [.ARRAY_INDEX, 0, %BPVAL, 0]	!
	= .BSF$A_MAJOR_STG [.ARRAY_INDEX, 0, %BPVAL, 0] + .BSF$A_MAJOR_STG;
	END;

!+
! Allocate dynamic string descriptors.
!-

    INCR COUNTER FROM 1 TO .ARGLIST [BAS$W_IN_NO_DST] DO
	BEGIN
	SP = .SP - %UPVAL;
	.SP = 0;				! Pointer 0 implies not allocated.
	SP = .SP - %UPVAL;
	BLOCK [.SP, DSC$B_CLASS; 0, BYTE] = DSC$K_CLASS_D;	! dynamic
	BLOCK [.SP, DSC$B_DTYPE; 0, BYTE] = DSC$K_DTYPE_T;	! text
	BLOCK [.SP, DSC$W_LENGTH; 0, BYTE] = 0;	! length = 0
	END;

    FMP [BSF$A_STR_DESC] = .SP;
!+
! Allocate fixed string templates.
!-

    INCR COUNTER FROM 1 TO .ARGLIST [BAS$W_IN_NO_FST] DO
	BEGIN
	SP = .SP - %UPVAL;
	.SP = 0;				! Pointer 0 implies not allocated.
	SP = .SP - %UPVAL;
	BLOCK [.SP, DSC$B_CLASS; 0, BYTE] = DSC$K_CLASS_S;	! fixed
	BLOCK [.SP, DSC$B_DTYPE; 0, BYTE] = DSC$K_DTYPE_T;	! text
	BLOCK [.SP, DSC$W_LENGTH; 0, BYTE] = 0;	! length = 0
	END;

!+
! Allocate numeric array elements.  They are all initialized to zero.
!-

    INCR COUNTER FROM 1 TO (.ARGLIST [BAS$L_IN_LEN_NA]^-2) DO
	BEGIN
	SP = .SP - %UPVAL;
	.SP = 0;
	END;

!+
! Allocate temporary cells.
!-

    IF ((.ARGLIST [BAS$L_IN_NO_TST] NEQ 0) OR (.ARGLIST [BAS$L_IN_NO_NMT] NEQ 0))
    THEN
	BEGIN
!+
! We must set up R9.  First allocate string temporaries.
!-

	INCR COUNTER FROM 1 TO .ARGLIST [BAS$L_IN_NO_TST] DO
	    BEGIN
	    SP = .SP - %UPVAL;
	    .SP = 0;				! Pointer 0 implies not allocated.
	    SP = .SP - %UPVAL;
	    BLOCK [.SP, DSC$B_CLASS; 0, BYTE] = DSC$K_CLASS_D;	! dynamic
	    BLOCK [.SP, DSC$B_DTYPE; 0, BYTE] = DSC$K_DTYPE_T;	! text
	    BLOCK [.SP, DSC$W_LENGTH; 0, BYTE] = 0;	! length = 0
	    END;

!+
! Point R9 to the last string descriptor allocated.
!-
	BSF$A_TEMP_STG = .SP;
!+
! Now allocate numeric temporaries.
!-
	SP = .SP - .ARGLIST [BAS$L_IN_NO_NMT];
	END;

!+
! Store the value of R9, whether or not loaded, in the frame.
!-
    FMP [BSF$A_BASE_R9] = .BSF$A_TEMP_STG;
!+
! Set up major frame information.
!-

    CASE .ARGLIST [BAS$B_IN_S_V_DB] FROM -6 TO 0 OF
	SET

	[0] :
	    CVTLD (%REF (1), FMP [BSF$D_SCALE_DOU]);

	[-1] :
	    CVTLD (%REF (10), FMP [BSF$D_SCALE_DOU]);

	[-2] :
	    CVTLD (%REF (100), FMP [BSF$D_SCALE_DOU]);

	[-3] :
	    CVTLD (%REF (1000), FMP [BSF$D_SCALE_DOU]);

	[-4] :
	    CVTLD (%REF (10000), FMP [BSF$D_SCALE_DOU]);

	[-5] :
	    CVTLD (%REF (100000), FMP [BSF$D_SCALE_DOU]);

	[-6] :
	    CVTLD (%REF (1000000), FMP [BSF$D_SCALE_DOU]);

	[OUTRANGE] :
	    CVTLD (%REF (0), FMP [BSF$D_SCALE_DOU]);
	TES;

    FMP [BSF$B_SCA_V_DOU] = .ARGLIST [BAS$B_IN_S_V_DB];
    FMP [BSF$B_SCA_V_PAC] = .ARGLIST [BAS$B_IN_S_V_PK];
    FMP [BSF$A_CUR_DATA] = .ARGLIST [BAS$L_IN_BEG_DA] + .DATA_RELOC;
    FMP [BSF$A_END_DATA] = .ARGLIST [BAS$L_IN_END_DA] + .DATA_RELOC;
    FMP [BSF$A_BASE_PC] = .CODE_RELOC;
!+
! Complete frame.
!-
    FMP [BSF$A_BASE_SP] = .SP;
    FMP [BSF$A_HANDLER] = BAS$HANDLER;
!+
! First consistency checks.
!-

    IF (((.AP [0]) AND 255) NEQ .ARGLIST [BAS$B_IN_NO_FML])
    THEN
!+
! The number of arguments is incorrect.
!-
	BEGIN

	IF (((.AP [0]) AND 255) GTRU .ARGLIST [BAS$B_IN_NO_FML])
	THEN
	    BEGIN
!+
! Main programs are permitted more arguments than they are declared
! with, to allow old BASIC programs to work with later versions of
! the command language interpreter.
!-

	    IF (.FMP [BSF$B_PROC_CODE] NEQ BSF$K_PROC_MAIN) THEN BAS$$SIGNAL (BAS$K_TOOMANARG);

	    END
	ELSE
	    BAS$$SIGNAL (BAS$K_TOOFEWARG);

	END;

    IF (((.FMP [BSF$W_FCD_FLAGS]) AND (BSF$M_FCD_RSTR)) NEQ 0)
    THEN
	BEGIN

	LOCAL
	    STR_DESC_ADDR : REF BLOCK [8, BYTE];

!+
! This procedure has been marked by the compiler as returning a
! string result.  Be sure that there is at least one formal, and
! that it is a dynamic string descriptor.  If so, null its value.
!-

	IF (.ARGLIST [BAS$B_IN_NO_FML] LSSU 1) THEN BAS$$SIGNAL (BAS$K_TOOFEWARG);

	STR_DESC_ADDR = AP [1];
	STR_DESC_ADDR = ..STR_DESC_ADDR;	! Avoid BLISS compiler bug

	IF ((.STR_DESC_ADDR [DSC$B_CLASS] NEQU DSC$K_CLASS_D) OR 	!
	    (.STR_DESC_ADDR [DSC$B_DTYPE] NEQU DSC$K_DTYPE_T))
	THEN
	    BAS$$SIGNAL (BAS$K_ARGDONMAT);

!+
! Null the string.  This insures that, if the procedure does not reference
! the string, the function will have the value of the null string.
!-
	STR$FREE1_DX (.STR_DESC_ADDR);
	END;

!+
! Second consistency checks.  If the previous frame is a BASIC frame
! verify that it was compiled with the same options as this one.
!-
    PREV_FMP = .FMP [BSF$A_SAVED_FP];

    IF (.PREV_FMP [BSF$A_HANDLER] EQLA BAS$HANDLER)
    THEN
!+
! The previous frame is a BASIC frame.
!-
	BEGIN
!+
! Make sure we are pointing to the major frame.  This will be different
! from the previous frame if the call came from a DEF, for example.
!-
	PREV_FMP = .PREV_FMP [BSF$A_BASE_R11] + %FIELDEXPAND (BSF$FRAME_BASE, 0);

	IF ((.FMP [BSF$B_SCA_V_PAC] NEQ .PREV_FMP [BSF$B_SCA_V_PAC]) OR 	!
	    (.FMP [BSF$B_SCA_V_DOU] NEQ .PREV_FMP [BSF$B_SCA_V_DOU]))
	THEN
	    BAS$$SIGNAL (BAS$K_SCAFACINT);

	IF (((.FMP [BSF$W_FCD_FLAGS] AND ((BSF$M_FCD_LONG) OR (BSF$M_FCD_DOU))) NEQ 	!
	    (.PREV_FMP [BSF$W_FCD_FLAGS] AND ((BSF$M_FCD_LONG) OR (BSF$M_FCD_DOU)))))
	THEN
	    BAS$$SIGNAL (BAS$K_DIFUSELON);

	END;

!+
! Put the return address back on the stack so we can return to the
! caller.
!-
    SP = .SP - %UPVAL;
    .SP = .RETURN_ADDRESS;
    RETURN;
    END;					! of BAS$INIT_R8

END

ELUDOM
