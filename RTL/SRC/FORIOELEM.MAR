	.TITLE	FOR$IO_ELEM	; FORTRAN I/O element transmission
	.IDENT	/2-046/		; File: FORIOELEM.MAR  Edit: JAW2046

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;
;++
; FACILITY: FORTRAN Support Library - user callable
;
; ABSTRACT:
;
;	This module implements all of the FORTRAN I/O list element
;	transmits calls made for each of the elements in a
;	READ/WRITE/DECODE/ENCODE  (TYPE, ACCEPT, and PRINT)
;	statements at the user program interface level of
;	abstraction (UPI = 1st level). See FOR$IO_BEG
;	and FOR$IO_END modules for I/O statement initialization
;	and termination, respectively.
;
; ENVIRONMENT: User access mode; mixture of AST level or not
;
; AUTHOR:	Thomas N. Hastings, CREATION DATE: 02-Mar-77
;
; MODIFIED BY:
;
; 	Thomas N. Hastings, 02-Mar-77  : VERSION 01
; 01	-  original
; 11	- change to use SRM data type symbols for data types
; 15	- pass enable args as an array (access violation)
;
;	VERSION 02
; 01	- Convert to using MARS.	R. Schaefer	18-Aug-77
; 2-10	- Add unformatted array at  one time TNH
; 2-12	- UNWIND action is to pop current LUB/ISB/RAB 9-SEP-77 TNH
; 2-14	- fix bug in array as a whole TNH 15-SEP-77
; 2-15	- same TNH 16-sep-77
; 2-16	- make END= work.  Push UNWIND action by ref.  TNH 4-Oct-77
; 2-17	- have complex transmitters flag real vs. imag part for
;	  list-directed I/O UDFs.
; 2-18	- change flags for 17 to 0 and 1 instead of 1 and 2.  JMT 16-Nov-77
; 2-20	- New code to do unformatted XMIT here instead of
;	  UDF level.  JMT 4-Mar-78
; 2-21	- A small improvement suggested by Rich Grove.  JMT 7-Mar-78
; 2-22	- UPI level routines now must save R11 and load it
;	  from OTS$$A_CUR_LUB!  Only one control block pointer now!
;	  JMT 8-Apr-78
; 2-23	- Remove FORDEF from the Macros.  DGP 5-May-78
; 2-24	- PIC dispatch tables.  TNH 7-June-78
; 2-26	- Use shorter reference to PIC tables.  TNH 13-June-78
; 2-028	- Update copyright notice.  JBS 16-NOV-78
; 2-029	- Change reference to LUB status bits.  DGP 29-Nov-78
; 2-030 - Change references to I/O dispatch tables.  DGP 08-Dec-78
; 2-031 - Change dispatch table references to longword.  DGP 11-Dec-78
; 2-032	- Add "_" to the PSECT directive.  JBS 22-DEC-78
; 2-033 - Change ISB$A_BUF_PTR and ISB$A_BUF_END to LUB$A_BUF_PTR
;	   and LUB$A_BUF_END.  JBS 08-JAN-1979
; 2-034 - Add support for G, H, DC, GC.  SBL 12-Feb-1979
; 2-035 - Use language-specific dispatch tables.  JBS 26-JUN-1979
; 2-036 - Use ISB symbols for dispatch offsets.  SBL 12-July-1979
; 2-037 - Use correct address for imaginary part of DC and GC.  SBL 18-Jul-1979
; 2-038 - The FORTRAN compiler outputs descriptor datatype BU for
;	  BYTE and LOGICAL*1 variables when it really should be B.
;	  Put a kludge into FOR$IO_X_DA to transform datatype BU
;	  to B.  SBL 19-July-1979
; 2-039	- Change LUB$W_UNIT_STT1 to LUB$W_UNIT_ATTR.  JBS 05-DEC-1979
; 2-040 - Use correct offset for imaginary part of DC and GC in
;	  FOR$IO_X_DA.  JAW 18-Dec-1980
; 2-041 - Add new element transmitters FOR$IO_X_SB, FOR$IO_X_NL and
;	  FOR$IO_X_ML to support collapsed implied-DO lists.  JAW
;	  30-Jan-1981.
; 2-042 - Implement revised interface to FOR$IO_X_SB and FOR$IO_X_NL.
;	  (Formatted lists now always use FOR$IO_X_NL.)  Improve flow
;	  for the noncontiguous unformatted complex case in FOR$IO_X_NL
;	  and FOR$IO_X_ML.  Correct a bug in the handling of complex
;	  elements in FOR$IO_X_NL.  JAW 20-Apr-1981
; 2-043 - Add entry point FOR$IO_X_SE, for use in transmitting single-
;	  element lists.  JAW 06-May-1981
; 2-044 - Remove FOR$IO_X_ML.  JAW 10-May-1981
; 2-045 - Add optimization for unformatted elements to FOR$IO_X_NL (move
;	  element here and don't call UDF level).  JAW 13-Jun-1981
; 2-046 - Miscellaneous optimizations and cleanup: Shorten CASEL's at
;	  COM_IO_ELEM; merge IO_FC_COM, IO_DC_COM and IO_GC_COM and add
;	  check for unformatted; merge ARRAY_FC, ARRAY_DC and ARRAY_GC;
;	  simplify FOR$IO_X_SB; further optimize FOR$IO_X_NL at NL1A;
;	  simplify FOR$IO_X_SE and move forward in module so branches
;	  will reach; remove spurious ERR_HANDLER; etc.  JAW 05-Jul-1981
;--

	.SBTTL	DECLARATIONS

;
; INCLUDE FILES:
;
;	OTSISB.MAR	- ISB offset definitions (in S.MLB)
;	OTSLUB.MAR	- LUB offset definitions (in S.MLB)

;
; EXTERNAL SYMBOLS:
;
	.DSABL	GBL			; Force declaration of all externals
	.EXTRN	OTS$$A_CUR_LUB		; Currently active I/O unit
	.EXTRN	FOR$$AA_UDF_PR1		; User data formatters
					; Contain word PIC dispatch entries.
	.EXTRN	FOR$$ERR_ENDHND		; Common I/OERR=/END= error handler
;
; MACROS:
;
	$SFDEF				; Stack frame offsets defined
	$DSCDEF				; Descriptor symbols
	$LUBDEF				; LUB definitions
	$ISBDEF				; ISB definitions
	$FORPAR				; inter-module definitions
;
; PSECT DECLARATIONS:
;
	.PSECT	_FOR$CODE PIC,SHR,LONG,EXE,NOWRT
;
; EQUATED SYMBOLS:
;

	elem_val = 4			; offset of item value
	elem_adr = 4			; offset of item address or descriptor address
	sig_args = 4			; offset of signal args for handler
	item_type = 4			; offset of type in UDF arg list
	item_size = 8			; offset of size in UDF arg list
	item_addr = 12			; offset of address in UDF arg list
	cpx_flag = 16			; offset of COMPLEX flag in UDF arg list
	count = 8			; Offset of count in SB or NCB
	stride = 12			; Offset of stride in NCB
	depth = 8			; Offset of depth in MLB
	count_1 = 12			; Offset of innermost count in MLB
	stride_1 = 16			; Offset of innermost stride in MLB

; The following entry masks are declared here so that they will be
; available to FOR$IO_X_SE, which merges them with its own entry mask.

	T_DS_MASK = ^M<R11>		; Entry mask for FOR$IO_T_DS
	X_DA_MASK = ^M<R2, R3, R4, R11>	; Entry mask for FOR$IO_X_DA
	X_SB_MASK = ^M<R11>		; Entry mask for FOR$IO_X_SB

;
; OWN STORAGE:
;


	.SBTTL	CALL-BY-VALUE ENTRY POINT DESCRIPTIONS

;+
; The following routine header serves for all of the
; call-by-value entry points.
;-

;++
; ABSTRACT:
;
;	Transmit (WRITE) a single data type element from
;	the user I/O list to the output buffer by
;	calling the appropriate user data formatter
;	(UDF) routine for the current I/O statement.
;
; FORMAL PARAMETERS:
;
;	ELEM_VAL.rx.v		element by-value
;
; IMPLICIT INPUTS:
;
;	OTS$$A_CUR_LUB		Adr. of current logical
;				unit block (LUB). Used to setup
;				ISB base to get current I/O
;				statement type code.
;	ISB$B_STTM_TYPE		I/O statement type code - index
;				to dispatch table entry.
;	FOR$$AA_UDF_PR1		Array of user data formatters (UDF
;				level of abstraction.)
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; SIDE EFFECTS:
;
;	If an error occurs, it is  SIGNALed unless an ERR=
;	transfer parameter was specified when the I/O statement
;	initialization call was made (see module FOR$IO_BEG,
;	entry points: FOR${READ,WRITE}_{SF,SO,SU,DF,DO,DU,SL} or
;	FOR${DECODE,ENCODE}_{MF,MO}), in which case control
;	is transferred to the specified address (after stack unwind.)
;--

	.SBTTL	CALL-BY-REFERENCE ENTRY POINT DESCRIPTIONS

;+
; The following routine header serves for all of the
; call-by-reference entry points.
;-

;++
; ABSTRACT:
;
;	Transmit (READ or WRITE) a single data type element from
;	the user I/O list to the output buffer by
;	calling the appropriate user data formatter
;	(UDF) routine for the current I/O statement.
;
; FORMAL PARAMETERS:
;
;	ELEM_ADR.xx.r		element by-reference
;
; IMPLICIT INPUTS:
;
;	OTS$$A_CUR_LUB		Adr. of current logical
;				unit block (LUB). Used to setup
;				ISB base to get current I/O
;				statement type code.
;	ISB$B_STTM_TYPE		I/O statement type code - index
;				to dispatch table entry.
;	FOR$$AA_UDF_PR1		Array of user data formatters (UDF
;				level of abstraction.)
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; SIDE EFFECTS:
;
;	If an error occurs, it is  SIGNALed unless an ERR=
;	transfer parameter was specified when the I/O statement
;	initialization call was made (see module FOR$IO_BEG,
;	entry points: FOR${READ,WRITE}_{SF,SO,SU,DF,DO,DU,SL} or
;	FOR${DECODE,ENCODE}_{MF,MO}), in which case control
;	is transferred to the specified address (after stack ???.)
;--


	.ENTRY	FOR$IO_B_V, ^M<R11>	; BYTE/LOGICAL*1 by-value
	PUSHAL	elem_val(AP)		; push address of value
	BRB	IO_B_COM		; common code for BYTE

	.ENTRY	FOR$IO_B_R, ^M<R11>	; BYTE/LOGICAL*1 by-reference
	PUSHL	elem_adr(AP)		; push address of value

IO_B_COM:
	PUSHL	#1			; size for BYTE data type
	PUSHL	#DSC$K_DTYPE_B		; data-type code for BYTE
	BRB	COM_IO_ELEM		; common code for all data-types



	.ENTRY	FOR$IO_W_V, ^M<R11>	; INTEGER*2 by-value
	PUSHAL	elem_val(AP)		; push address of value
	BRB	IO_W_COM		; common code for INTEGER*2

	.ENTRY	FOR$IO_W_R, ^M<R11>	; INTEGER*2 by-reference
	PUSHL	elem_adr(AP)		; push address of value

IO_W_COM:
	PUSHL	#2			; size for INTEGER*2 data type
	PUSHL	#DSC$K_DTYPE_W		; data-type code for INTEGER*2
	BRB	COM_IO_ELEM		; common code for all data-types



	.ENTRY	FOR$IO_L_V, ^M<R11>	; INTEGER*4 by-value
	PUSHAL	elem_val(AP)		; push address of value
	BRB	IO_L_COM		; common code for INTEGER*4

	.ENTRY	FOR$IO_L_R, ^M<R11>	; INTEGER*4 by-reference
	PUSHL	elem_adr(AP)		; push address of value

IO_L_COM:
	PUSHL	#4			; size for INTEGER*4 data type
	PUSHL	#DSC$K_DTYPE_L		; data-type code for INTEGER*4

COM_IO_ELEM:
	MOVL	G^OTS$$A_CUR_LUB, R11	; R11 -> Current Control Block
	BBC	#LUB$V_UNFORMAT, LUB$W_UNIT_ATTR(R11), XCALL1
					; can't optimize if formatted
	MOVL	LUB$A_BUF_PTR(R11), R0	; R0 -> record buffer
	ADDL3	R0, 4(SP), R1		; R1 = prototype record buffer pointer
	CMPL	R1, LUB$A_BUF_END(R11)	; overflows buffer?
	BGTRU	XCALL1			; branch if yes
	BLBC	ISB$B_STTM_TYPE(R11), RU
					; dispatch to read/write code
;
; write unformatted.  Move users data into the record buffer
;
	CASEL	4(SP), #1, #7		; dispatch on element size
10$:	.WORD	WBYTE - 10$
	.WORD	WWORD - 10$
	.WORD
	.WORD	WLONG - 10$
	.WORD
	.WORD
	.WORD
	.WORD	WQUAD - 10$

WOCTA:	MOVL	8(SP), R1		; Get source address
	MOVQ	(R1)+, (R0)+		; Move first quadword
	MOVQ	(R1), (R0)+		; Move second quadword
	BRB	COM
WBYTE:	MOVB	@8(SP), (R0)+
	BRB	COM
WWORD:	MOVW	@8(SP), (R0)+
	BRB	COM
WLONG:	MOVL	@8(SP), (R0)+
	BRB	COM
WQUAD:	MOVQ	@8(SP), (R0)+
	BRB	COM

XCALL1:	BRB	CALL1


; read unformatted. Move data from record buffer to users element
;
RU:	CASEL	4(SP), #1, #7		; dispatch on element size
10$:	.WORD	RBYTE - 10$
	.WORD	RWORD - 10$
	.WORD
	.WORD	RLONG - 10$
	.WORD
	.WORD
	.WORD
	.WORD	RQUAD - 10$

ROCTA:	MOVL	8(SP), R1			; Get result address
	MOVQ	(R0)+, (R1)+			; Move first quadword
	MOVQ	(R0)+, (R1)			; Move second quadword
	BRB	COM
RBYTE:	MOVB	(R0)+, @8(SP)
	BRB	COM
RWORD:	MOVW	(R0)+, @8(SP)
	BRB	COM
RLONG:	MOVL	(R0)+, @8(SP)
	BRB	COM
RQUAD:	MOVQ	(R0)+, @8(SP)
;	BRB	COM
COM:	MOVL	R0, LUB$A_BUF_PTR(R11)	; store the updated pointer
	RET
;
; come here if checks for the optimization indicate the UDF must be called.
;
CALLUDF:MOVL	G^OTS$$A_CUR_LUB, R11	; R11 = Current Control Block pointer
CALL1:	MOVZBL	ISB$B_STTM_TYPE(R11), R0
					; R0 = I/O statement type
	MOVL	G^FOR$$AA_UDF_PR1-<ISB$K_FORSTTYLO*4-4>[R0], R0
					; R0 = signed offset relative to beginning
					; of FOR$$AA_UDF_PR1.
	MOVAL	W^ERR_HANDLER, (FP)	; set up handler
	CALLS	#3, G^FOR$$AA_UDF_PR1[R0] ; call the UDF level routine.
	RET				;  and return to the user

	.ENTRY	FOR$IO_WU_V, ^M<R11>	; LOGICAL*2 by-value
	PUSHAL	elem_val(AP)		; push address of value
	BRB	IO_WU_COM		; common code for LOGICAL*2

	.ENTRY	FOR$IO_WU_R, ^M<R11>	; LOGICAL*2 by-reference
	PUSHL	elem_adr(AP)		; push address of value

IO_WU_COM:
	PUSHL	#2			; size for LOGICAL*2 data type
	PUSHL	#DSC$K_DTYPE_WU		; data-type code for LOGICAL*2
	BRW	COM_IO_ELEM		; common code for all data-types



	.ENTRY	FOR$IO_LU_V, ^M<R11>	; LOGICAL*4 by-value
	PUSHAL	elem_val(AP)		; push address of value
	BRB	IO_LU_COM		; common code for LOGICAL*4

	.ENTRY	FOR$IO_LU_R, ^M<R11>	; LOGICAL*4 by-reference
	PUSHL	elem_adr(AP)		; push address of value

IO_LU_COM:
	PUSHL	#4			; size for LOGICAL*4 data type
	PUSHL	#DSC$K_DTYPE_LU		; data-type code for LOGICAL*4
	BRW	COM_IO_ELEM		; common code for all data-types



	.ENTRY	FOR$IO_F_V, ^M<R11>	; REAL*4 by-value
	PUSHAL	elem_val(AP)		; push address of value
	BRB	IO_F_COM		; common code for REAL*4

	.ENTRY	FOR$IO_F_R, ^M<R11>	; REAL*4 by-reference
	PUSHL	elem_adr(AP)		; push address of value

IO_F_COM:
	PUSHL	#4			; size for REAL*4 data type
	PUSHL	#DSC$K_DTYPE_F		; data-type code for REAL*4
	BRW	COM_IO_ELEM		; common code for all data-types



	.ENTRY	FOR$IO_D_V, ^M<R11>	; REAL*8 by-value
	PUSHAL	elem_val(AP)		; push address of value
	BRB	IO_D_COM		; common code for REAL*8

	.ENTRY	FOR$IO_D_R, ^M<R11>	; REAL*8 by-reference
	PUSHL	elem_adr(AP)		; push address of value

IO_D_COM:
	PUSHL	#8			; size for REAL*8 data type
	PUSHL	#DSC$K_DTYPE_D		; data-type code for REAL*8
	BRW	COM_IO_ELEM		; common code for all data-types


	.ENTRY	FOR$IO_G_V,	^M<R11>	; G REAL*8 by value
	PUSHAL	elem_val(AP)		; push address of value
	BRB	IO_G_COM		; common code for G REAL*8

	.ENTRY	FOR$IO_G_R,	^M<R11>	; G REAL*8 by reference
	PUSHL	elem_adr(AP)		; push address of value

IO_G_COM:
	PUSHL	#8			; size for G REAL*8 data type
	PUSHL	#DSC$K_DTYPE_G		; data-type code for G REAL*8
	BRW	COM_IO_ELEM		; common code for all datatypes



	.ENTRY	FOR$IO_H_V,	^M<R11>	; H REAL*16 by value
	PUSHAL	elem_val(AP)		; push address of value
	BRB	IO_H_COM		; common code for H REAL*16

	.ENTRY	FOR$IO_H_R,	^M<R11>	; H REAL*16 by reference
	PUSHL	elem_adr(AP)		; push address of value

IO_H_COM:
	PUSHL	#16			; size for H REAL*16 data type
	PUSHL	#DSC$K_DTYPE_H		; data-type code for H REAL*16
	BRW	COM_IO_ELEM		; common code for all datatypes

	.ENTRY	FOR$IO_FC_V, ^M<R2,R11>
	MOVAL	elem_val(AP), AP	; get address of value
	BRB	IO_FC_COM

	.ENTRY	FOR$IO_FC_R, ^M<R2,R11>
	MOVL	elem_adr(AP), AP	; get address of value

IO_FC_COM:
	MOVL	#DSC$K_DTYPE_F, R0	; R0 = type
	MOVL	#4, R1			; R1 = size
	BRB	IO_CPLX_COM		; Join common complex code.



	.ENTRY	FOR$IO_DC_V, ^M<R2,R11>
	MOVAL	elem_val(AP), AP	; get address of value
	BRB	IO_DC_COM

	.ENTRY	FOR$IO_DC_R, ^M<R2,R11>
	MOVL	elem_adr(AP), AP	; get address of value

IO_DC_COM:
	MOVL	#DSC$K_DTYPE_D, R0	; R0 = type
	BRB	IO_DC_GC_COM		; Join common DC/GC code.



	.ENTRY	FOR$IO_GC_V, ^M<R2,R11>
	MOVAL	elem_val(AP), AP	; get address of value
	BRB	IO_GC_COM

	.ENTRY	FOR$IO_GC_R, ^M<R2,R11>
	MOVL	elem_adr(AP), AP	; get address of value

IO_GC_COM:
	MOVL	#DSC$K_DTYPE_G, R0	; R0 = type
IO_DC_GC_COM:
	MOVL	#8, R1			; R1 = size
IO_CPLX_COM:
	MOVAL	W^ERR_HANDLER, (FP)	; Set up END=/ERR= handler.
	MOVL	G^OTS$$A_CUR_LUB, R11	; R11 -> Current Control Block
	MOVZBL	ISB$B_STTM_TYPE(R11), R2 ; Get statement type for dispatch.
	MOVL	G^FOR$$AA_UDF_PR1-<ISB$K_FORSTTYLO*4-4>[R2], R2
					; R2 = displacement to UDF routine
	BBS	#LUB$V_UNFORMAT, LUB$W_UNIT_ATTR(R11), 20$
					; Branch if unformatted.
	PUSHL	#0			; Flag real part of value.
	PUSHL	AP			; Push address of real part.
	MOVQ	R0, -(SP)		; Push size (R1) and type (R0).
	PUSHL	#4			; Push argument count.
	CALLG	(SP), G^FOR$$AA_UDF_PR1[R2] ; Transmit real part.

	INCL	cpx_flag(SP)		; Flag imaginary part.
	ADDL	item_size(SP), item_addr(SP) ; Step to imaginary part.
	CALLG	(SP), G^FOR$$AA_UDF_PR1[R2] ; Transmit imaginary part.
	RET				; Return to caller.
;+
; Here if unformatted.
;-
20$:	PUSHL	AP			; Push address of item.
	ADDL	R1, R1			; Double the size.
	MOVQ	R0, -(SP)		; Push size (R1) and type (R0).
	CALLS	#3, G^FOR$$AA_UDF_PR1[R2] ; Call UDF routine.
	RET				; Return to caller

	.SBTTL	FOR$IO_X_SE	- Transmit single element by descriptor

;++
; ABSTRACT:
;
;	Transmit (READ or WRITE) an element which is the only element in
;	the current I/O list, without the use of a buffer if possible.
;
; FORMAL PARAMETERS:
;
;	DESCR.rr.r		Descriptor of class 1, 4, or 191
;
; IMPLICIT INPUTS:
;
;	OTS$$A_CUR_LUB		Adr. of current logical unit block (LUB)
;
; IMPLICIT OUTPUTS:
;
;	ISB$V_SNGL_ELEM		Flag indicating that this element is
;				the only element in the current I/O list
;
; SIDE EFFECTS:
;
;	NONE
;--

	.ENTRY	FOR$IO_X_SE, T_DS_MASK!X_DA_MASK!X_SB_MASK!^M<R11>
	MOVL	G^OTS$$A_CUR_LUB, R11	; R11 -> Current Control Block
	BBSS	#ISB$V_SNGL_ELEM, ISB$W_STTM_STAT(R11), 5$
					; Indicate single-element list
					; (potentially unbuffered).
;+
; Dispatch on descriptor class:
;	to FOR$IO_X_DA if class = DSC$K_CLASS_A
;	to FOR$IO_T_DS if class < DSC$K_CLASS_A (DSC$K_CLASS_S assumed)
;	to FOR$IO_X_SB if class > DSC$K_CLASS_A (FOR$K_CLASS_SB assumed)
;-

	ASSUME <DSC$K_CLASS_S> LESS_THAN <DSC$K_CLASS_A>
	ASSUME <DSC$K_CLASS_A> LESS_THAN <FOR$K_CLASS_SB>
5$:	ROTL	#8, @4(AP), R0		; R0<0:7> = descriptor class
	CMPB	R0, #DSC$K_CLASS_A	; Is class = 4?
	BEQLU	FOR$IO_X_DA+2		; If so, transmit array.
	BLSSU	FOR$IO_T_DS+2		; If less, transmit text string.
	BRW	FOR$IO_X_SB+2		; Else transmit implied-DO list.

	.SBTTL	FOR$IO_T_DS	- Transmit string element by descriptor

;++
; ABSTRACT:
;
;	Transmit (READ or WRITE) a single character string from
;	the user I/O list to the output buffer or from
;	the input buffer to the user I/O list by
;	calling the appropriate user data formatter
;	(UDF) routine for the current I/O statement.
;
; FORMAL PARAMETERS:
;
;	ELEM_ADR.xt.ds		element by-descriptor (static)
;
; IMPLICIT INPUTS:
;
;	OTS$$A_CUR_LUB		Adr. of current logical
;				unit block (LUB). Used to setup
;				ISB base to get current I/O
;				statement type code.
;	ISB$B_STTM_TYPE		I/O statement type code - index
;				to dispatch table entry.
;	FOR$$A_UDF_PR1		Array of user data formatters (UDF
;				level of abstraction.)
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; SIDE EFFECTS:
;
;	If an error occurs, it is  SIGNALed unless an ERR=
;	transfer parameter was specified when the I/O statement
;	initialization call was made (see module FOR$IO_BEG,
;	entry points: FOR${READ,WRITE}_{SF,SO,SU,DF,DO,DU,SL} or
;	FOR${DECODE,ENCODE}_{MF,MO}), in which case control
;	is transferred to the specified address (after stack unwound.)



	.ENTRY	FOR$IO_T_DS, T_DS_MASK
	MOVQ	@elem_adr(AP), R0	; get descriptor into R0'R1
	PUSHL	R1			; push address
	MOVZWL	R0, -(SP)		; push length
	PUSHL	#DSC$K_DTYPE_T		; push string data-type
	BRW	CALLUDF			; call the UDF


	.SBTTL	FOR$IO_T_V_DS - Transmit string element then pop off stack  

;++
; FUNCTIONAL DESCRIPTION:
;
;	Transmit (READ or WRITE) s single character string from
;	the user I/O list to the output buffer or from 
;	the inpout buffer to the user I/O list by
;	calling the appropriate user data formatter (UDF)
;	routine for the current I/O statement.
;	This routine is identical to FOR$IO_T_DS except that
;	the string passed is popped off the stack as part of the
;	return to the user program.  As such it is a non-standard
;	procedure.  It is really passing the string by value
;	and is used by the comiler to pass the result of a temporary
;	string expression computed on the stack.
;
; CALLING SEQUENCE:
;
;	CALL FOR$IO_T_V_DS (elem_adr.xt.ds)
;
; INPUT PARAMETERS:
;	NONE
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;
;	If an error occurs, it is SIGNALed unless an ERR=
;	transfer parameter was specified when the I/O statement
;	initialization call was made (see module FOR$IO_BEG,
;	entry points: FOR${DECODE,ENCODE}_MF,MO}), in which case control
;	is transferred to the specified address (after stack unwound).
;--

	.ENTRY	FOR$IO_T_V_DS, ^M<IV, R11>
					; enable integer overflow
	MOVAL	W^ERR_HANDLER, (FP)	; setup ERR=/END= handler
	MOVL	L^OTS$$A_CUR_LUB, R11	; R11 -> Current Control Block
	MOVQ	@elem_adr(AP), R0	; R0/R1 = string descriptor (len, adr)
	PUSHL	R1			; arg3 = adr. of string
	MOVZWL	R0, -(SP)		; arg2 = length of string
	PUSHL	#DSC$K_DTYPE_T		; arg1 = data type code of string (text)
	MOVZBL	ISB$B_STTM_TYPE(R11),R0	; get statement type for dispatch
	MOVL	G^FOR$$AA_UDF_PR1-<ISB$K_FORSTTYLO*4-4>[R0], R0
					; R0 = displacement to UDF routine
	CALLS	#3, G^FOR$$AA_UDF_PR1[R0]	; process the element
	MOVL	SF$L_SAVE_PC(FP), R0	; R0 = user PC saved on call
	MOVAL	B^10$, SF$L_SAVE_PC(FP)	; set return PC to label in this routine
	MOVZWL	@elem_adr(AP), R1	; R1 = length of string to be popped
	RET				; return to label 10$

;+
; Here on RET to pop off string from stack and go back to user
;-

10$:	ADDL	R1, SP			; adjust SP by length of string
	JMP	(R0)			; now return to caller

	.SBTTL	FOR$IO_X_DA	- Transmit entire array by descriptor

;++
; ABSTRACT:
;
;	Transmit (READ or WRITE) a single data type element from
;	the user I/O list to the output buffer by
;	calling the appropriate user data formatter
;	(UDF) routine for the current I/O statement.
;
; FORMAL PARAMETERS:
;
;	ARRAY_DESC_ADR.xx.da	Adr. of array descriptor
;				Data type code in descriptor
;
; IMPLICIT INPUTS:
;
;	OTS$$A_CUR_LUB		Adr. of current logical
;				unit block (LUB). Used to setup
;				ISB base to get current I/O
;				statement type code.
;	ISB$B_STTM_TYPE		I/O statement type code - index
;				to dispatch table entry.
;	FOR$$AA_UDF_PR1		Array of user data formatters (UDF
;				level of abstraction.)
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; SIDE EFFECTS:
;
;	If an error occurs, it is  SIGNALed unless an ERR=
;	transfer parameter was specified when the I/O statement
;	initialization call was made (see module FOR$IO_BEG,
;	entry points: FOR${READ,WRITE}_{SF,SO,SU,DF,DO,DU,SL} or
;	FOR${DECODE,ENCODE}_{MF,MO}), in which case control
;	is transferred to the specified address (after stack unwound.)
;--

	.ENTRY	FOR$IO_X_DA, X_DA_MASK
	MOVAL	W^ERR_HANDLER, (FP)	; setup ERR=/END= handler
	MOVL	G^OTS$$A_CUR_LUB, R11	; R11 -> Current Control Block
	MOVZBL	ISB$B_STTM_TYPE(R11),R0	; get statement type for dispatch
30$:	MOVL	G^FOR$$AA_UDF_PR1-<ISB$K_FORSTTYLO*4-4>[R0], R2
					; R2 = displacement to UDF routine
	MOVL	elem_adr(AP), R0	; get ptr to descriptor
	MOVL	DSC$A_POINTER(R0), R4	; get base address
	BBS	#LUB$V_UNFORMAT,-	; is this unformatted?
		LUB$W_UNIT_ATTR(R11), 20$
					; if yes, go transfer the whole array
	ADDL3	DSC$L_ARSIZE(R0), R4, AP	; get high address+1
	MOVZWL	DSC$W_LENGTH(R0), R3	; get element length
	CMPB	#DSC$K_DTYPE_FC, DSC$B_DTYPE(R0)	; COMPLEX*8 array?
	BEQL	ARRAY_FC		; process COMPLEX specially
	CMPB	#DSC$K_DTYPE_DC, DSC$B_DTYPE(R0)	; D Complex?
	BEQL	ARRAY_DC		; special processing
	CMPB	#DSC$K_DTYPE_GC, DSC$B_DTYPE(R0)	; G Complex?
	BNEQ	5$			; Not complex
	BRW	ARRAY_GC		; Special processing
5$:	CLRL	-(SP)			; amake space for elem addr
	PUSHL	R3			; push element size
	MOVZBL	DSC$B_DTYPE(R0), -(SP)	; push data-type code
	CMPB	(SP), #DSC$K_DTYPE_BU	; Did FORTRAN give us BU?
	BNEQ	7$			; No
	MOVB	#DSC$K_DTYPE_B, (SP)	; Yes, it should be type B
7$:	PUSHL	#3			; 3 arguments to UDF
10$:					; element loop point
	CMPL	R4, AP			; end of array yet?
	BGEQU	ARRAY_RET		; yes
	MOVAL	(R4), item_addr(SP)	; set element address
	CALLG	(SP), G^FOR$$AA_UDF_PR1[R2]	; call UDF routine
	ADDL2	R3, R4			; add length, point to next element
	BRB	10$			; loop back

;+
; Here to transmit an entire unformatted array as a single unit
;-

20$:	PUSHL	R4			; adr. of first byt of array
	PUSHL	DSC$L_ARSIZE(R0)	; array size in bytes
	MOVZBL	DSC$B_DTYPE(R0), -(SP)	; data type of array elements
	CALLS	#3, G^FOR$$AA_UDF_PR1[R2]	; call UDF routine
	RET				; return to user program

;+
; Here to handle formatted complex data type.  Make two calls per element in array.
; Indicate which half by fourth actual parameter
;-

ARRAY_FC:
	MOVL	#DSC$K_DTYPE_F, R0	; R0 = type
	MOVL	#4, R1			; R1 = size
	BRB	ARRAY_CPLX_COM		; Join common complex code.

ARRAY_DC:
	MOVL	#DSC$K_DTYPE_D, R0	; R0 = type
	BRB	ARRAY_DC_GC_COM		; Join common DC/GC code.

ARRAY_GC:
	MOVL	#DSC$K_DTYPE_G, R0	; R0 = type
ARRAY_DC_GC_COM:
	MOVL	#8, R1			; R1 = size
ARRAY_CPLX_COM:
	CLRQ	-(SP)			; make space for flag and address
	MOVQ	R0, -(SP)		; Push size (R1) and type (R0).
	PUSHL	#4			; 4 arguments to UDF routine

110$:					; loop
	CMPL	R4, AP			; end of array yet?
	BGEQU	ARRAY_RET		; yes
	CLRL	cpx_flag(SP)		; flag real part
	MOVL	R4, item_addr(SP)	; push real part address
	CALLG	(SP), G^FOR$$AA_UDF_PR1[R2]	; process real part
	INCL	cpx_flag(SP)		; mark imag part
	ADDL	item_size(SP), item_addr(SP) ; Step to imaginary part.
	CALLG	(SP), G^FOR$$AA_UDF_PR1[R2]	; process imag part
	ADDL2	R3, R4			; add length
	BRB	110$			; loop back

ARRAY_RET:
	RET

	.SBTTL	FOR$IO_X_SB - Transmit contiguous implied-DO list

;++
; ABSTRACT:
;
;	Transmit (READ or WRITE) the elements of a one-level contiguous
;	implied-DO list to or from the record buffer, by calling the
;	appropriate user data formatter (UDF) routine for the current
;	I/O statement.  This entry point is called only for unformatted
;	statements.
;
; FORMAL PARAMETERS:
;
;	SIMPLE_BLOCK.rr.r	A block describing a simple (contiguous)
;				implied-DO list, in the form:
;
;					 ------------------------------
;					|  191  | dtype |   length     |
;					|------------------------------|
;					|         base address         |
;					|------------------------------|
;					|            count             |
;					 ------------------------------
;
;	where count is a signed longword containing the iteration count.
;	This block is identified by the private-use descriptor class
;	code 191 = FOR$K_CLASS_SB.
;
; IMPLICIT INPUTS:
;
;	OTS$$A_CUR_LUB		Address of current logical unit block.
;	ISB$B_STTM_TYPE		I/O statement type code - index
;				to dispatch table entry.
;	FOR$$AA_UDF_PR1		Array of user data formatters (UDF
;				level of abstraction.)
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; SIDE EFFECTS:
;
;	Errors are signaled unless an ERR= parameter was specified at
;	statement initialization time (see FOR$READ_xy, FOR$WRITE_xy),
;	in which case control is transferred to the specified address,
;	after stack unwind.
;--

	.ENTRY	FOR$IO_X_SB, X_SB_MASK
	MOVL	elem_adr(AP), R12	; R12 -> argument block
	MOVL	count(R12), R1		; R1 = count
	BLEQ	10$			; Return if count <= 0.
;+
; Construct an argument list on the stack for the call to UDF level.
;-
	PUSHL	DSC$A_POINTER(R12)	; Push element address.
	MOVZWL	DSC$W_LENGTH(R12), R0	; Extend element size.
	MULL3	R1, R0, -(SP)		; Place array size on stack.
	MOVZBL	DSC$B_DTYPE(R12), -(SP)	; Push data type code.
	MOVAL	W^ERR_HANDLER, (FP)	; Establish ERR=/END= handler.
	MOVL	G^OTS$$A_CUR_LUB, R11	; R11 -> Current Control Block
	MOVZBL	ISB$B_STTM_TYPE(R11), R1 ; Get statement type for dispatch
	MOVL	G^FOR$$AA_UDF_PR1-<ISB$K_FORSTTYLO*4-4>[R1], R1
					; R1 = displacement to UDF routine
	CALLS	#3, G^FOR$$AA_UDF_PR1[R1] ; Call UDF-level routine.
10$:	RET				; Return to caller.

	.SBTTL	FOR$IO_X_NL - Transmit non-contiguous implied-DO list

;++
; ABSTRACT:
;
;	Transmit (READ or WRITE) the elements of a one-level
;	non-contiguous implied-DO list to or from the record buffer, by
;	calling the appropriate user data formatter (UDF) routine for
;	the current I/O statement.  This entry point is called for both
;	formatted and unformatted statements.
;
; FORMAL PARAMETERS:
;
;	NON_CTG_BLOCK.rr.r	A block describing a non-contiguous
;				implied-DO list, in the form:
;
;					 ------------------------------
;					|  190  | dtype |   length     |
;					|------------------------------|
;					|         base address         |
;					|------------------------------|
;					|            count             |
;					|------------------------------|
;					|            stride            |
;					 ------------------------------
;
;	where count is a signed longword containing the iteration count,
;	and stride is a signed longword containing the amount by which
;	to augment the base address for each element transmitted.  This
;	block is identified by the private-use descriptor class code
;	190 = FOR$K_CLASS_NL.
;
; IMPLICIT INPUTS:
;
;	OTS$$A_CUR_LUB		Address of current logical unit block.
;	ISB$B_STTM_TYPE		I/O statement type code - index
;				to dispatch table entry.
;	FOR$$AA_UDF_PR1		Array of user data formatters (UDF
;				level of abstraction.)
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; SIDE EFFECTS:
;
;	Errors are signaled unless an ERR= parameter was specified at
;	statement initialization time (see FOR$READ_xy, FOR$WRITE_xy),
;	in which case control is transferred to the specified address,
;	after stack unwind.
;--


	.ENTRY	FOR$IO_X_NL, ^M<R2, R3, R4, R11>
	MOVL	elem_adr(AP), R12	; R12 -> argument block
	MOVL	stride(R12), R4		; R4 = stride
	MOVL	count(R12), R3		; R3 = count
	BGTR	10$			; Is count > 0?
	RET				; If not, return.

10$:	MOVAL	W^ERR_HANDLER, (FP)	; Establish ERR=/END= handler.
	MOVL	G^OTS$$A_CUR_LUB, R11	; R11 -> Current Control Block
	MOVZBL	ISB$B_STTM_TYPE(R11), R2 ; Get statement type for dispatch
	MOVL	G^FOR$$AA_UDF_PR1-<ISB$K_FORSTTYLO*4-4>[R2], R2
					; R2 = displacement to UDF routine
;+
; Construct an argument list on the stack for the call to UDF level.
; Allow room for a second argument list, for use if the elements are
; formatted and complex.  Each argument list is composed of five
; longwords, including the count.  (Be careful about pushing anything
; else after this point.)
;-
	SUBL	#24, SP			; Allow room for flag in first
					;  list (4), plus second list (20).
	PUSHL	DSC$A_POINTER(R12)	; Push element address.
	MOVZWL	DSC$W_LENGTH(R12), -(SP) ; Push element size.
	MOVZBL	DSC$B_DTYPE(R12), -(SP)	; Push data type code.
	PUSHL	#3			; Push argument count.
;+
; Determine whether the array can be transmitted as a unit.
;-
	BBC	#LUB$V_UNFORMAT, -	; If formatted, transmit the
		LUB$W_UNIT_ATTR(R11), NLFMT ;  elements individually.
	CMPZV	#0, #16, DSC$W_LENGTH(R12), R4 ; Is length = stride?
	BNEQ	NL1PER			; If not, it's noncontiguous.
;+
; Unformatted and contiguous: transmit the array with a single call.
;-
NLUNIT:	MULL2	count(R12), item_size(SP) ; Compute array size.
	CALLG	(SP), G^FOR$$AA_UDF_PR1[R2] ; Call UDF-level routine.
	RET				; Return to caller.
;+
; Formatted: check for complex.
;-
NLFMT:	ASHL	DSC$B_DTYPE(R12), -	; Is this F, D or G complex?
		#<<1 @ <31-DSC$K_DTYPE_FC>> + -  ; [This instruction
		  <1 @ <31-DSC$K_DTYPE_DC>> + -  ; shifts a mask having
		  <1 @ <31-DSC$K_DTYPE_GC>>>, R0 ; bits 19, 18 and 2 set
					; (representing FC, DC and GC
					; respectively) "dtype" places.]
	BLSS	NL2PER			; Branch if any of the above.
	CMPB	item_type(SP), #DSC$K_DTYPE_BU	; Is it type BU?
	BNEQ	20$			; Branch if not.
	MOVB	#DSC$K_DTYPE_B, item_type(SP)	; Yes: make it type B.
20$:	BRW	NL1B			; Use NL1PER, but bypass
					;  the optimization applying to
					;  unformatted elements only.

;+
; Formatted and complex.  Transmit the elements individually, making two
; calls per element.  Use the flag argument to identify the real or
; imaginary part.
;-
	ASSUME <DSC$K_DTYPE_FC - DSC$K_DTYPE_F> EQUAL <DSC$K_DTYPE_DC - DSC$K_DTYPE_D>
	ASSUME <DSC$K_DTYPE_FC - DSC$K_DTYPE_F> EQUAL <DSC$K_DTYPE_GC - DSC$K_DTYPE_G>
NL2PER:	INCL	(SP)			; Increase argument count to 4.
	SUBL	#<DSC$K_DTYPE_FC - DSC$K_DTYPE_F>, -
			item_type(SP)	; Convert FC/DC/GC to F/D/G.
	ASHL	#-1, item_size(SP), item_size(SP) ; Halve item size.
	CLRL	cpx_flag(SP)		; Indicate real part.
	MOVQ	(SP), 20(SP)		; Initialize second arg list.
	MOVL	item_size(SP), item_size+20(SP) ; ...
	MOVL	#1, cpx_flag+20(SP)	; Indicate imaginary part.
	MOVL	DSC$A_POINTER(R12), item_addr(SP)
					; Initialize real part address.
	ADDL3	DSC$A_POINTER(R12), item_size(SP), item_addr+20(SP)
					; Initialize imag part address.
40$:	CALLG	(SP), G^FOR$$AA_UDF_PR1[R2] ; Transmit real part.
	CALLG	20(SP), G^FOR$$AA_UDF_PR1[R2] ; Transmit imaginary part.
	ADDL	R4, item_addr(SP)	; Stride to next element.
	ADDL	R4, item_addr+20(SP)	; ...
	SOBGTR	R3, 40$			; Decrement and test count.
	RET				; Return to caller.
;+
; Unformatted and noncontiguous, or formatted and not complex.  Transmit
; the elements individually, making one call per element.  (Formatted
; enters at NL1B, below.)
;-
NL1PER:	CMPL	item_type(SP), #DSC$K_DTYPE_T ; Is this type character?
	BNEQ	NL1A			; If not, optimize.
	BRW	NL1B			; If so, don't optimize, since
					;  its length is not restricted
					;  to 1, 2, 4, 8 or 16 bytes.
;+
; Optimization for unformatted only.
;
; Set R2 to the address of the appropriate MOVx instruction, below, for
; use when transmitting elements which do not require a call to UDF
; level (most of them).
;-
NL1A:	BLBC	ISB$B_STTM_TYPE(R11), RADDR ; Branch if reading.
	CASEL	item_size(SP), #1, #7	; dispatch on element size
10$:	.WORD	AWBYTE - 10$
	.WORD	AWWORD - 10$
	.WORD
	.WORD	AWLONG - 10$
	.WORD
	.WORD
	.WORD
	.WORD	AWQUAD - 10$
AWOCTA:	MOVAL	W^WUOCTA, R2		; R2 = addr of "MOVO" for write
	BRB	ACOM
AWBYTE:	MOVAL	W^WUBYTE, R2		; R2 = addr of MOVB for write
	BRB	ACOM
AWWORD:	MOVAL	W^WUWORD, R2		; R2 = addr of MOVW for write
	BRB	ACOM
AWLONG:	MOVAL	W^WULONG, R2		; R2 = addr of MOVL for write
	BRB	ACOM
AWQUAD:	MOVAL	W^WUQUAD, R2		; R2 = addr of MOVQ for write
	BRB	ACOM

RADDR:	CASEL	item_size(SP), #1, #7	; dispatch on element size
10$:	.WORD	ARBYTE - 10$
	.WORD	ARWORD - 10$
	.WORD
	.WORD	ARLONG - 10$
	.WORD
	.WORD
	.WORD
	.WORD	ARQUAD - 10$
AROCTA:	MOVAL	W^RUOCTA, R2		; R2 = addr of "MOVO" for read
	BRB	ACOM
ARBYTE:	MOVAL	W^RUBYTE, R2		; R2 = addr of MOVB for read
	BRB	ACOM
ARWORD:	MOVAL	W^RUWORD, R2		; R2 = addr of MOVW for read
	BRB	ACOM
ARLONG:	MOVAL	W^RULONG, R2		; R2 = addr of MOVL for read
	BRB	ACOM
ARQUAD:	MOVAL	W^RUQUAD, R2		; R2 = addr of MOVQ for read
;	BRB	ACOM
ACOM:
;+
; Here after a call to UDF level to re-establish the pointer in R0.
;-
NL1AX:	MOVL	LUB$A_BUF_PTR(R11), R0	; R0 -> next buffer location
;+
; Here after a simple move, to see whether another move is possible.
;-
NL1AY:	ADDL3	R0, item_size(SP), R1	; R1 = final byte needed + 1
	CMPL	R1, LUB$A_BUF_END(R11)	; Will element fit in buffer?
	BGTRU	NL1CAL			; Branch if not.
	JMP	(R2)			; Go move the element directly.
;+
; Here if there is no room for a particular element.
;-
NL1CAL:	MOVL	R0, LUB$A_BUF_PTR(R11)	; Save possibly updated pointer.
	MOVZBL	ISB$B_STTM_TYPE(R11), R1 ; Reconstruct dispatch address.
	MOVL	G^FOR$$AA_UDF_PR1-<ISB$K_FORSTTYLO*4-4>[R1], R1
	CALLG	(SP), G^FOR$$AA_UDF_PR1[R1] ; Call UDF routine w/ CALLG.
	ADDL	R4, item_addr(SP)	; Step to next element.
	SOBGTR	R3, NL1AX		; Decrement and test count.
	RET				; Return to caller.

WUBYTE:	MOVB	@item_addr(SP), (R0)+	; Move byte to buffer
	BRB	UCOM
WUWORD:	MOVW	@item_addr(SP), (R0)+	; Move word to buffer
	BRB	UCOM
WULONG:	MOVL	@item_addr(SP), (R0)+	; Move longword to buffer
	BRB	UCOM
WUQUAD:	MOVQ	@item_addr(SP), (R0)+	; Move quadword to buffer
	BRB	UCOM
WUOCTA:	MOVL	item_addr(SP), R1	; Move octaword to buffer
	MOVQ	(R1)+, (R0)+		; Move first quadword
	MOVQ	(R1), (R0)+		; Move second quadword
	BRB	UCOM

RUBYTE:	MOVB	(R0)+, @item_addr(SP)	; Move byte from buffer
	BRB	UCOM
RUWORD:	MOVW	(R0)+, @item_addr(SP)	; Move word from buffer
	BRB	UCOM
RULONG:	MOVL	(R0)+, @item_addr(SP)	; Move longword from buffer
	BRB	UCOM
RUQUAD:	MOVQ	(R0)+, @item_addr(SP)	; Move quadword from buffer
	BRB	UCOM
RUOCTA:	MOVL	item_addr(SP), R1	; Move octaword from buffer
	MOVQ	(R0)+, (R1)+		; Move first quadword
	MOVQ	(R0)+, (R1)		; Move second quadword
;	BRB	UCOM
UCOM:	ADDL	R4, item_addr(SP)	; Step to next element.
	SOBGTR	R3, BNL1AY		; Decrement and test count.
	MOVL	R0, LUB$A_BUF_PTR(R11)	; Update buffer pointer.
	RET				; Return to caller.
BNL1AY:	BRW	NL1AY

;+
; Formatted and not complex
;-
NL1B:	CALLG	(SP), G^FOR$$AA_UDF_PR1[R2] ; Call UDF routine w/ CALLG.
	ADDL	R4, item_addr(SP)	; Step to next element.
	SOBGTR	R3, NL1B		; Decrement and test count.
	RET				; Return to caller.


	.SBTTL	ERR_HANDLER	- Exception handler for errors

;++
; ABSTRACT:
;
;	ERR_HANDLER accepts a signal and calls the ERR= and END=
;	error condition handler as if it were the CHF condition
;	facility itself.  It passes along to FOR$$END_ERRHND
;	the ERR= and END= user addresses saved in the ISB at the
;	beginning of the I/O statement.
;
; FORMAL PARAMETERS:
;
;	NONE
;
; IMPLICIT INPUTS:
;
;	OTS$$A_CUR_LUB		Adr. of current logical unit block
;	ISB$A_ERR_EQUAL		Adr. in user program to transfer to on errors or 0
;	ISB$A_END_EQUAL		Adr. in user program to transfer to on EOF or 0
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; FUNCTION VALUE:
;
;	SS$_RESIGNAL to cause a resignal to occur (no END= or ERR=)
;	to give user handler and OTS default handler a chance at error.
;	However, if an ERR= or END= transfer is to be done, the function value is ignored
;	by the condition handling facility because UNWIND has been called.
;
; SIDE EFFECTS:
;
;	If an ERR= or an END= transfer is to take place back to the user,
;	SYS$$UNWIND has been called to casue the condition handling facility
;	to unwind the stack when this error handler returns.
;--


ERR_HANDLER:
	.WORD	0			; no registers need saving
	MOVL	G^OTS$$A_CUR_LUB, R0	; R0 -> Current Control Block
	PUSHL	#FOR$K_UNWINDPOP	; make a long containing FOR$K_UNWINDPOP
					; to indicate UNWIND action is to pop LUB/ISB/RAB.
	PUSHL	#0			; make a 0 by reference
	PUSHL	SP			; point to the 0 - incremental depth =
					; no. of frames between user and establisher.
	PUSHAL	ISB$A_END_EQUAL(R0)	; push END= address
	PUSHAL	ISB$A_ERR_EQUAL(R0)	; push ERR= address
	MOVAL	16(SP), -(SP)		; Indicate UNWIND action is to
					; pop current LUB/ISB/RAB on error
	PUSHL	#4			; 4 ENABLE args
	PUSHL	SP			; push address of ENABLE args
	MOVQ	sig_args(AP), -(SP)	; copy down the signal arg and
					; mechanism arg ptrs from the caller
	CALLS	#3, L^FOR$$ERR_ENDHND	; call the real handler
	RET

	.END				; end of module FOR$IO_ELEM.MAR

