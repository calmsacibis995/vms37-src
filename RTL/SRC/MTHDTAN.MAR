	.TITLE	MTH$DTAN 	; Double Precision Floating Point Tangent routine
				; (DTAN, DTAND)
	.IDENT /1-013/		; File: MTHDTAN.MAR  EDIT:SBL1013
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;
; FACILITY: MATH LIBRARY
;++
; ABSTRACT:
;
; MTH$DTAN is a function  which  returns the double precision floating point
; tangent of its double precision floating point radian argument. The call is 
; standard call-by-reference.  It JSB to MTH$DTAN_R7.
;
; MTH$DTAND is a function  which  returns the double precision floating point
; tangent of its double precision floating point degree argument. The call is 
; standard call-by-reference. It JSB to MTH$DTAND_R7.
;
;--
;
; VERSION: 01
;
; HISTORY:
; AUTHOR:
;	Peter Yuo, 29-Jun-77: Version 01
;
; MODIFIED BY:
;
;
;

	.SBTTL	HISTORY	; Detailed Current Edit History


; ALGORITHMIC DIFFERENCES FROM FP-11/C ROUTINE:	none
;
;	The result is reserved operand when DCOS(X) = 0, instead
;	of largest or smallest representable floating number.
;
; Edit History for Version 01 of MTH$DTAN 
;
; 01-2	Error handling mechanism changed. Instead of having 
;	MTH$FLG_JACKET at the entrance, MTH$$ERROR_CONT is stored on the
;	top of the stack frame so when error happened in MTH$DSIN or MTH$DCOS
;	the message will be hided away, but will get signalled in MTH$DTAN.
; 0-3	MTH$$ERROR changed to MTH$$SIGNAL.
;	MTH$$ERROR_CONT changed to MTH$$SIGNAL_CON
;	MTH$_... changed to MTH__....
;	Changed error handling mechanism. Put error result in R0:R1 before
;	calling MTH$$SIGNAL in order to allow user modify error result.
; 1-001	- Update version number and copyright notice.  JBS 16-NOV-78
; 1-002	- Changed MTH__FLOOVEMAT to MTH$K_FLOOVEMAT.  JBS 06-DEC-78
; 1-003	- Removed $SRMDEF macro - not needed.  JBS 16-DEC-78
; 1-004	- Add "_" to the PSECT directive.  JBS 22-DEC-78
; 1-005 - Declare externals.  SBL 17-May-1979
; 1-006 - Rearrange code to handle exceptions correctly.  SBL 17-May-1979
; 1-007	- Add JSB entry point.  JBS 16-AUG-1979
; 1-008	- Signal exceptions correctly.  JBS 16-AUG-1979
; 1-009	- Correct a typo in edit 007.  JBS 17-AUG-1979
; 1-010 - Make CALL entry use JSB routine.  Correct error handling.
;	  Do COS before SIN.  SBL 31-Oct-1979
; 1-011 - Added degree entry points. RNH 8-MAR-1981
; 1-012 - Modify MTH$DTAN_R7 and MTH$DTAND_R7 to JSB to MTH$DSINCOS_R7 and
;	  MTH$DSINCOSD_R7 instead of MTH$DSIN_R7, MTH$DCOS_R7, and
;	  MTH$DSIND_R7, MTH$DCOSD_R7.  RNH 27-AUG-81.
; 1-013 - Use general mode addressing.  SBL 30-Nov-1981
;

	.SBTTL	DECLARATIONS	; Declarative Part of Module

;
; INCLUDE FILES:
;

;
; EXTERNAL SYMBOLS:
;
	.DSABL	GBL
	.EXTRN	MTH$DSINCOS_R7
	.EXTRN	MTH$DSINCOSD_R7
	.EXTRN	MTH$K_FLOOVEMAT
	.EXTRN	MTH$$SIGNAL
	.EXTRN	MTH$K_FLOUNDMAT
	.EXTRN	MTH$$JACKET_TST

;
; EQUATED SYMBOLS:	none
;
; MACROS:	

	$SFDEF				; Define SF (Stack Frame) symbols

;
; PSECT DECLARATIONS:

	.PSECT	_MTH$CODE	PIC,SHR,LONG,EXE,NOWRT
					; program section for math routines
;
; OWN STORAGE:	none
;
; CONSTANTS:

	X = 4				;Position of argument from AP.

D_SMALLEST_DEG:
	.LONG	^X2EE04365
	.LONG	^X0FBED31E


	.SBTTL	MTH$DTAN  - Standard Double Precision Floating DTAN


;++
; FUNCTIONAL DESCRIPTION:
;
; DTAN  - double precision floating point function
;
;	For algorithm, see MTH$DTAN_R7.
;
; CALLING SEQUENCE:
;
;	DTAN.wd.v = MTH$DTAN(x.rd.r)
;
; INPUT PARAMETERS:
;
;	X.rd.r			Address of value of angle in radians.
;
; IMPLICIT INPUTS:	none
;
; OUTPUT PARAMETERS:
;
;	VALUE:	double precision floating tangent of the argument
;
; IMPLICIT OUTPUTS:	none
;
; COMPLETION CODES:	none
;
; SIDE EFFECTS:
;
;	See MTH$DTAN_R7
;
;---


	.ENTRY	MTH$DTAN, ^M<IV, R2, R3, R4, R5, R6, R7>
					; standard call-by-reference entry
					; disable DV (and FU), enable IV
	MTH$FLAG_JACKET
	MOVD	@X(AP), R0		; R0/R1 = argument
	BSBB	MTH$DTAN_R7		; Get the tangent
	RET				; With result in R0-R1

	.SBTTL	MTH$DTAN_R7 - JSB entry point
;
;++
; FUNCTIONAL DESCRIPTION:
;
; DTAN - JSB entry point
;
; Algorithmic steps:
;  1. Compute DSIN and DCOS.
;  2. If DCOS is zero, we have an error.
;  3. Return DSIN / DCOS.
;
; CALLING SEQUENCE:
;
;	MOVD	argument, R0
;	JSB	MTH$DTAN_R7
;
; INPUT PARAMETERS:
;
;	R0 / R1 contains X
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	The result is the tangent of X, in double precision.
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; SIDE EFFECTS:
;
;	
;--
MTH$DTAN_R7::				
	JSB	G^MTH$DSINCOS_R7	; Compute DSIN(X) and DCOS(X)
	TSTD	R2			; Is DCOS(X) zero ?
	BEQL	COSZER			; If yes, then go to common error path
	DIVD2	R2, R0			; Compute DSIN / DCOS
	RSB				; Return.



	.SBTTL	MTH$DTAND  - Standard Double Precision Floating DTAND


;++
; FUNCTIONAL DESCRIPTION:
;
; DTAND  - double precision floating point function
;
;	For algorithm, see MTH$DTAND_R7.
;
; CALLING SEQUENCE:
;
;	DTAND.wd.v = MTH$DTAND(X.rd.r)
;
; INPUT PARAMETERS:
;
;	X.rd.r				;Address of value of angle in degrees.
;
; IMPLICIT INPUTS:	none
;
; OUTPUT PARAMETERS:
;
;	VALUE:	double precision floating tangent of the argument
;
; IMPLICIT OUTPUTS:	none
;
; COMPLETION CODES:	none
;
; SIDE EFFECTS:
;
;	See MTH$DTAND_R7
;
;---


	.ENTRY	MTH$DTAND, ^M<IV, R2, R3, R4, R5, R6, R7>
					; standard call-by-reference entry
					; disable DV (and FU), enable IV
	MTH$FLAG_JACKET
	MOVD	@X(AP), R0		; R0/R1 = argument
	BSBB	MTH$DTAND_R7		; Get the tangent
	RET				; With result in R0-R1

	.SBTTL	MTH$DTAND_R7 - JSB entry point
;
;++
; FUNCTIONAL DESCRIPTION:
;
; DTAND - JSB entry point
;
; Algorithmic steps:
;  1. Make sure that the absolute value of the argument is greater
;     than 180/pi*2*128
;  2. Compute DSIND and DCOSD.
;  3. If DCOSD is zero, we have an error.
;  4. Return DSIND / DCOSD.
;
; CALLING SEQUENCE:
;
;	MOVD	argument, R0
;	JSB	MTH$DTAND_R7
;
; INPUT PARAMETERS:
;
;	R0 / R1 contains x
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	The result is the tangent of x, in double precision.
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; SIDE EFFECTS:
;
;	NONE
;--
MTH$DTAND_R7::				
	MOVD	R0, R2			; Save argument
	BICW	#^X8000, R2		; R2/R3 = |argument|
	CMPW	#^X0300, R2		; Compare |arg| with 2**-121
	BLEQ	20$			; No possible underflow, compute DCOSD
	CMPD	D_SMALLEST_DEG, R2	; Possible underflow, use better check
	BLSS	20$			; No possible underflow, compute DCOSD
	TSTD	R2			; Check for argument = 0
	BNEQ	UNFL			; If arg not 0, go to underflow logic
	CLRD	R0			; Load R0/R1 with zero
	RSB				; Return with value = 0
20$:
	JSB	G^MTH$DSINCOSD_R7	; Compute DSIND(X), and DCOSD(X)
	TSTD	R2			; Is DCOSD(X) zero ?
	BEQL	COSZER			; If yes, then go to common error path
	DIVD2	R2, R0			; Compute DSIND / DCOSD
	RSB				; Return.



;
;	COMMON ERROR CODE
;

;
; Underflow; if user has FU set, signal error.  Always return 0.0
;
UNFL:
	MOVPSL	R2			; R2 = user's or jacket routine's PSL
	CALLS	#0, G^MTH$$JACKET_TST	; R0 = TRUE if JSB from jacket routine
	BLBC	R0, 10$			; branch if user did JSB
	MOVZWL	SF$W_SAVE_PSW(FP), R2	; get user PSL saved by CALL
10$:	CLRL	R0			; R0 = result. LIB$SIGNAL will save in
					; CHF$L_MCH_R0/R1 so any handler can fixup
	BBC	#6, R2, 20$		; has user enabled floating underflow?
	PUSHL	(SP)			; yes, return PC from special routine
	MOVZBL	#MTH$K_FLOUNDMAT, -(SP)	; trap code for hardware floating underflow
					; convert to MTH$_FLOUNDMAT (32-bit VAX-11 
					; exception code)
	CALLS	#2, G^MTH$$SIGNAL	; signal (condition, PC)
20$:	RSB				; return

;+
; Come here if COS value is zero.
;-
COSZER:
	PUSHL	(SP)			; Push "caller" PC
	MOVZBL	#MTH$K_FLOOVEMAT, -(SP)	; Condition value
	ASHQ	#15, #1, R0		; R0/R1 = reserved operand
	CALLS	#2, G^MTH$$SIGNAL	; Signal an error
	RSB				; Return to caller

	.END
