MODULE FOR$$UDF_RU (					! FORTRAN Read unformatted UDF
		IDENT = '1-013'		! File: FORUDFRU.B32  Edit: JAW1013
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY:  FORTRAN Support Library - not user callable
!
! ABSTRACT:
!
!	This module implements FORTRAN Read unformatted I/O
!	statements (sequential access - S, direct access - D,
!	at the User data Formatter level of
!	abstraction (UDF level is 2nd level). This module
!	calls the appropriate Read record
!	routine at the record handling level of abstraction (REC
!	level is 3rd level) to Read a record.
!
! ENVIRONMENT:  User access mode; reentrant AST level or not.
!
! AUTHOR:  Thomas N. Hastings;	 CREATION DATE: 31-Aug-77
!
! MODIFIED BY:
!	Thomas N. Hastings, 31-Aug-77: Version 01
! 01	-  original
! 0-3	- Removed parameters to record level routines JMT 17-OCT-77
! 0-5	- Global register CCB.  JMT 8-Apr-78
! 0-06	- Change REQUIRE files for VAX system build.  DGP 28-Apr-78
! 0-07	- Use JSB linkages.  TNH 22-May-78
! 0-08	- PIC dispatch tables.  TNH 7-June-78
! 0-09	- Change file name to FORUDFRU.B32, and change the names of
!	   the REQUIRE files similarly.  JBS 14-NOV-78
! 1-001	- Update the version number and copyright notice.  JBS 16-NOV-78
! 1-002	- Change the REQUIRE file names from FOR... to OTS...  JBS 06-DEC-78
! 1-003 - Change references to I/O dipatch tables.  DGP 08-Dec-78
! 1-004 - Change dispatch table references to longwords.  DGP 11-Dec-78
! 1-005 - Change ISB$A_BUF_BEG, BUF_PTR, BUF_END, BUF_HIGH to LUB. DGP 08-Jan-79
! 1-006	- Use 32-bit addresses for externals.  JBS 27-JAN-1979
! 1-007	- Use language-specific dispatch tables.  JBS 26-JUN-1979
! 1-008 - Use ISB dispatch offsets.  SBL 12-July-1979
! 1-009 - Give error on requesting too much data if not segmented.
!	  SBL 18-Sept-1979
! 1-010 - Implement unbuffered transfers for single-element lists: defer
!	  REC-level initialization until first element is requested;
!	  then if recordtype is not segmented and record size permits,
!	  set up RAB so record will be read directly into element, and
!	  do not copy any data from buffer to element.  JAW 06-May-1981
! 1-011 - Continuation of 1-010.  Do not attempt an unbuffered transfer
!	  for a keyed read.  Set LUB$A_BUF_PTR when deferring REC-level
!	  initialization.  Support recordtype=variable.  JAW 02-Jun-1981
! 1-012 - Continuation of 1-010.  Handle sequential read correctly when
!	  access=keyed.  Add minor optimizations.  JAW 06-Jun-1981
! 1-013 - Add test for ISB$V_NEED_INIT in FOR$$UDF_RU1.  JAW 06-Jun-1981
!--

!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!

REQUIRE 'RTLIN:OTSLNK';				! Define all linkages

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    FOR$$UDF_RU0 : JSB_UDF0 NOVALUE,		! initialization
    FOR$$UDF_RU1 : CALL_CCB NOVALUE,		! format one user I/O list element
    FOR$$UDF_RU9 : JSB_UDF9 NOVALUE;		! end of user I/O list - finish

!
! INCLUDE FILES:
!

REQUIRE 'RTLML:FORERR';				! FORTRAN error codes
REQUIRE 'RTLML:OTSLUB';				! Logical unit block (LUB) offsets

REQUIRE 'RTLML:OTSISB';				! I/O statement block (ISB) offsets

REQUIRE 'RTLIN:OTSMAC';				! Macros

REQUIRE 'RTLIN:RTLPSECT';			! Define DECLARE_PSECTS macro

REQUIRE 'RTLIN:RTLODBG';			! RTL debugging macros

LIBRARY 'RTLSTARLE';

!
! MACROS:
!
!
! EQUATED SYMBOLS:
!
!
! PSECT DECLARATIONS:
!
DECLARE_PSECTS (FOR);				! declare PSECTs for FOR$ facility
!
! OWN STORAGE:
!
!	None
!
! EXTERNAL REFERENCES:
!

EXTERNAL
    FOR$$AA_REC_PR0 : VECTOR,			! PIC array of record processor
    						! procedure-initializations in REC
    						! level of abstraction. Indexed by
    						! I/O statement type (ISB$B_STTM_TYPE)
    FOR$$AA_REC_PR1 : VECTOR,			! PIC array of record processor procedures
    						! Read a record in REC level of
    						! abstraction. Indexed by I/O statement
    						! type (ISB$B_STTM_TYPE)
    FOR$$AA_REC_PR9 : VECTOR;			! PIC array of record processor procedures

						! Read last record in REC level of
						! abstraction. Indexed by I/O
						! statement type (ISB$B_STTM_TYPE)

EXTERNAL ROUTINE
    FOR$$SIGNAL_STO : NOVALUE;			! Signal fatal error

GLOBAL ROUTINE FOR$$UDF_RU0 			! Read unformatted UDF initialization
    : JSB_UDF0 NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
! Initialize Read unformatted User data formatter (UDF)
!
! CALLING SEQUENCE:
!
!	JSB FOR$$UDF_RU0 ()
!
! FORMAL PARAMETERS:
!
!	None.
!
! IMPLICIT INPUTS:
!
!	CCB			Pointer to current logical unit block
!	ISB$B_STTM_TYPE		I/O statement type code - set by
!				each I/O statement initialization
!
! IMPLICIT OUTPUTS:
!
!	LUB$A_BUF_PTR		Adr. of next byte of input
!	ISB$A_BUG_END		Adr. of end+1 byte of input buffer
!				data buffer
!	ISB$V_NEED_INIT		Flag indicating initialization needed
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    EXTERNAL REGISTER
	CCB : REF BLOCK [, BYTE];

    !+
    ! Initialize Record processing level of abstraction.
    ! Set pointer to current (LUB$A_BUF_PTR)  and last+1
    ! (LUB$A_BUF_END) character position for user data in
    ! input buffer
    !-

    !+
    ! Optimization:
    !  For an unformatted READ (other than keyed), defer REC-level
    !  initialization until FOR$$UDF_RU1, in case the I/O list is
    !  single-element and the record can be read directly into the
    !  element.  Also, set LUB$A_BUF_PTR to LUB$A_BUF_END to indicate to
    !  certain of the element transmitters that no data has yet been
    !  read.
    !
    !  REC-level initialization is not deferred for a keyed READ because
    !  the key is unavailable once FOR$$IO_BEG returns to the user.
    !-

    IF .CCB [ISB$B_STTM_TYPE] EQL ISB$K_ST_TY_RKU THEN
	JSB_REC0 (FOR$$AA_REC_PR0 + .FOR$$AA_REC_PR0 [.CCB [ISB$B_STTM_TYPE] -
						  ISB$K_FORSTTYLO + 1])
    ELSE
	BEGIN
	CCB [ISB$V_NEED_INIT] = 1;
	CCB [LUB$A_BUF_PTR] = .CCB [LUB$A_BUF_END];
	END;

    RETURN;
    END;					! End of FOR$$UDF_RU0 routine


GLOBAL ROUTINE FOR$$UDF_RU1 (			! Copy one user input element
	ELEM_TYPE, 				! Type code of user I/O list element
	ELEM_SIZE, 				! No. of addressable units in element
	ELEM_ADR)				! Adr. of element
    : CALL_CCB NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	FOR$$UDF_RU1 copies from current input buffer to a single user I/O list element
!	If the entire user element exceeds the remainder of the input buffer,
!	only part is copied and a new buffer is input by calling
!	the proper record level (3rd level of abstraction).
!	FOR$$UDF_RU is the same for all access modes.
!
! CALLING SEQUENCE:
!
!	CALL FOR$$UDF_RU1 (elem_type.rlu.v, elem_size.rlu.v, elem_adr.rx.r)
!
! FORMAL PARAMETERS:
!
!	ELEM_TYPE.rlu.v		Type code of user I/O list
!				element. Form: ELEM_TYPE_x
!				x = B,W,L,RU,LU,F,D,FC,T,G,H,DC or GC.
!	ELEM_SIZE.rlu.v		Size of user I/O list element
!				in addressable machine units
!	ELEM_ADR.rx.r		Adr. of user I/O list element
!				x = b, w, l, RU, lu, f, d, fc, t,
!				g, h, dc or gc.
!
! IMPLICIT INPUTS:
!
!	OTS$$A_CUR_LUB		Pointer to current logical unit block
!				(LUB). Used to setup base pointer ISB
!				to current I/O statement block
!	ISB$B_STTM_TYPE		I/O statement type code - set by each
!				I/O statement initialization
!	ISB$V_SNGL_ELEM		Flag indicating that the element is the
!				only element in the current I/O list
!
! The following ISB locations are set only by previous calls to
! FOR$$UDF_RU{0,1}, i.e., are effectively OWN.
!
!	LUB$A_BUF_PTR		Pointer to next char. position
!				in user data part of input buffer
!	LUB$A_BUF_END		Adr. of last+1 char position of input buffer.
!
! IMPLICIT OUTPUTS:
!
!	ISB$V_SNGL_ELEM		This flag is cleared if an unbuffered
!				transfer is not possible.
!
! The following ISB locations are set only by previous calls
! to FOR$$UDF_RU{0,1}, i.e., are effectively OWN.
!
!	LUB$A_BUF_PTR		Pointer to next char. position
!				in user data part of input buffer
!
! FUNCTIONAL VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	FOR$_INPSTAREQ if too much data requested.
!--

    BEGIN

    EXTERNAL REGISTER
	CCB : REF BLOCK [, BYTE];

    !+
    ! If this is a single-element list, check to see if the conditions
    ! for an unbuffered transfer are met.  If so, set RAB$L_UBF and
    ! RAB$W_USZ to point directly to the element.  Then perform REC-
    ! level initialization, which was deferred in anticipation of a
    ! possible single-element list, and which accomplishes the read.
    ! Afterward, reset RAB$L_UBF, RAB$W_USZ and RAB$V_LOC.
    !-

    IF .CCB [ISB$V_SNGL_ELEM] AND .CCB [ISB$V_NEED_INIT]
    THEN
	IF NOT .CCB [LUB$V_SEGMENTED] AND .ELEM_SIZE LEQU 65535
	THEN
	    BEGIN
		CCB [RAB$L_UBF] = .ELEM_ADR;
		CCB [RAB$W_USZ] = .ELEM_SIZE;
		CCB [RAB$V_LOC] = 0;
		JSB_REC0 (FOR$$AA_REC_PR0 +
		    .FOR$$AA_REC_PR0 [.CCB [ISB$B_STTM_TYPE] -
			ISB$K_FORSTTYLO + 1]);
		IF .CCB [RAB$W_RSZ] LSSU .CCB [RAB$W_USZ]
		THEN
		    FOR$$SIGNAL_STO (FOR$K_INPSTAREQ);
		CCB [RAB$L_UBF] = .CCB [LUB$A_RBUF_ADR];
		CCB [RAB$W_USZ] = .CCB [LUB$W_RBUF_SIZE];
		CCB [RAB$V_LOC] = 1;
		CCB [ISB$V_NEED_INIT] = 0;
		RETURN;
	    END
	ELSE
	    CCB [ISB$V_SNGL_ELEM] = 0;

    !+
    ! If REC-level initialization has not yet been done, do it.
    !-

    IF .CCB [ISB$V_NEED_INIT]
    THEN
	BEGIN
	JSB_REC0 (FOR$$AA_REC_PR0 +
	    .FOR$$AA_REC_PR0 [.CCB [ISB$B_STTM_TYPE] -
		ISB$K_FORSTTYLO + 1]);
	CCB [ISB$V_NEED_INIT] = 0;
	END;

    BEGIN
    LOCAL
	TMP_ELEM_SIZE,				! temp no. ob bytes left in user element to copy
	TMP_ELEM_ADR,				! temp adr. of rest of user element to copy
	TMP_DIFF;				! temp no. of bytes left to move to user element

    !+
    ! Copy as much of input buffer as will fit into user element.  If
    ! file is segmented, continue until request is fulfilled.  If not,
    ! and variable wants too much data, signal stop FOR$_INPSTAREQ.
    !-

    TMP_ELEM_SIZE = .ELEM_SIZE;
    TMP_ELEM_ADR = .ELEM_ADR;

    WHILE .CCB [LUB$A_BUF_PTR] + .TMP_ELEM_SIZE GTRA .CCB [LUB$A_BUF_END] DO
	BEGIN
	TMP_DIFF = .CCB [LUB$A_BUF_END] - .CCB [LUB$A_BUF_PTR];
	TMP_ELEM_ADR = CH$MOVE (.TMP_DIFF, .CCB [LUB$A_BUF_PTR], .TMP_ELEM_ADR);
	TMP_ELEM_SIZE = .TMP_ELEM_SIZE - .TMP_DIFF;
	CCB [LUB$A_BUF_PTR] = .CCB [LUB$A_BUF_PTR] + .TMP_DIFF;

    JSB_REC1 (FOR$$AA_REC_PR1 + .FOR$$AA_REC_PR1 [.CCB [ISB$B_STTM_TYPE] -
						  ISB$K_FORSTTYLO + 1]);
	IF NOT .CCB [LUB$V_SEGMENTED]
	THEN
	    FOR$$SIGNAL_STO (FOR$K_INPSTAREQ);
	END;

    !+
    ! Copy from input buffer to the remainder of the user element.
    ! Update buffer pointer (LUB$A_BUF_PTR) to point to last byte+1 moved.
    !-

    CH$MOVE (.TMP_ELEM_SIZE, .CCB [LUB$A_BUF_PTR], .TMP_ELEM_ADR);
    CCB [LUB$A_BUF_PTR] = .CCB [LUB$A_BUF_PTR] + .TMP_ELEM_SIZE;
    RETURN;					! Return from FOR$$UDF_WF1 routine
    END;
END;					!	End of FOR$$UDF_RU1


GLOBAL ROUTINE FOR$$UDF_RU9 			! unformatted input - end of I/O list call
    : JSB_UDF9 NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	FOR$$UDF_RU9 performs end of I/O list input formatting.
!
! CALLING SEQUENCE:
!
!	JSB FOR$$UDF_RU9 ()
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	See FOR$$UDF_RU1
!
!
! IMPLICIT OUTPUTS:
!
!	See FOR$$UDF_RU1
!
! FUNCTION VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	See FOR$$UDF_RU1
!--

    BEGIN

    EXTERNAL REGISTER
	CCB : REF BLOCK [, BYTE];

    !+
    ! If REC-level initialization has not yet been done (the I/O list
    ! was empty), do it.
    !-

    IF .CCB [ISB$V_NEED_INIT]
    THEN
	JSB_REC0 (FOR$$AA_REC_PR0 +
	    .FOR$$AA_REC_PR0 [.CCB [ISB$B_STTM_TYPE] - ISB$K_FORSTTYLO + 1]);

    !+
    ! Call record level of abstraction to input buffer from beginning up to but not including LUB$A_BUF_PTR
    !-

    JSB_REC9 (FOR$$AA_REC_PR9 + .FOR$$AA_REC_PR9 [.CCB [ISB$B_STTM_TYPE] -
						  ISB$K_FORSTTYLO + 1]);

    RETURN;
    END;					! End of FOR$$UDF_RU9 Routine

END						! End of FOR$$UDF_RU Module

ELUDOM
