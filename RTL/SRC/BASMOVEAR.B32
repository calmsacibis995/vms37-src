MODULE BAS$MOVE_ARRAY (				!
		IDENT = '1-008'			! File: BASMOVEAR.B32 Edit: PLL1008
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  BASIC-PLUS-2 Miscellaneous I/O
!
! ABSTRACT:
!
!	This module contains the routines called by compiled code
!	for the MOVE FROM and MOVE TO statements, when applied to
!	arrays.
!
! ENVIRONMENT:  VAX-11 User Mode
!
! AUTHOR: John Sauter, CREATION DATE: 30-AUG-1979
!
! MODIFIED BY:
!
! 1-001	- Original.
! 1-002	- Version 001 was just a skeleton, code single-dimensioned
!	   numeric arrays moving TO the buffer, so we can see how
!	   the algorithms work.  JBS 31-AUG-1979
! 1-003	- Code DEST_NA.  JBS 06-SEP-1979
! 1-004	- Code SRC_SA.  JBS 10-SEP-1979
! 1-005	- Code the other effectors.  All coding is now complete.
!	   JBS 13-SEP-1979
! 1-006	- When initializing a string descriptor, be sure the pointer
!	   is zero.  JBS 18-SEP-1979
! 1-007	- When the source is a string array and a length is specified,
!	   always put the specified number of characters in the buffer.
!	   JBS 22-OCT-1979
! 1-008 - SRC_NA, SRC_SA, DEST_NA, and DEST_SA must access the array 
!	  in row major order.  PL 1-Jul-81
!--

!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!

REQUIRE 'RTLIN:OTSLNK';				! Define linkages

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    BAS$MOVE_ARRAY : NOVALUE,			! MOVE an array
    SRC_NA : CALL_CCB NOVALUE,			! Source is numeric array
    SRC_SA : CALL_CCB NOVALUE,			! Source is string array
    DEST_NA : CALL_CCB NOVALUE,			! Destination is numeric array
    DEST_SA : CALL_CCB NOVALUE;			! Destination is string array

!
! INCLUDE FILES:
!

REQUIRE 'RTLML:OTSLUB';				! LUB definitions

REQUIRE 'RTLML:OTSISB';				! ISB definitions

REQUIRE 'RTLIN:RTLPSECT';			! Macros for defining psects

LIBRARY 'RTLSTARLE';				! System symbols

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! PSECTS:
!
DECLARE_PSECTS (BAS);				! Declare psects for BAS$ facility
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    BAS$$CB_GET : JSB_CB_GET NOVALUE,		! Load current CCB
    BAS$$STOP : NOVALUE,			! Signal fatal error
    BAS$$STOP_IO : NOVALUE,			! Signal fatal I/O error
    BAS$FETCH_BFA : NOVALUE,			! Fetch from an array
    BAS$STORE_BFA : NOVALUE,			! Store into an array
    STR$FREE1_DX,				! Free a dynamic string
    STR$COPY_R;					! Copy a string by reference

!+
! The following are the error codes used in this module.
!-

EXTERNAL LITERAL
    BAS$K_PROLOSSOR : UNSIGNED (8),		! Program lost, sorry
    BAS$K_MOVOVEBUF : UNSIGNED (8),		! MOVE overflows buffer
    BAS$K_NOTIMP : UNSIGNED (8);		! Not implemented


GLOBAL ROUTINE BAS$MOVE_ARRAY (			! MOVE an array
	SRC, 					! Source: buffer or array
	DEST, 					! Destination: array or buffer
	LEN					! Optional length, for strings
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Within a MOVE statement, move an array.  This routines decodes its
!	parameters to move either an array to the buffer, or the buffer
!	to an array.
!
! FORMAL PARAMETERS:
!
!	SRC.mq.r	The source, which has the form of either a static
!			string (the buffer) or an array.
!	DEST.mq.r	The destination, which has the other form.
!	LEN.rl.v	Optional length, used with strings.
!
! IMPLICIT INPUTS:
!
!	OTS$$A_CUR_LUB, accessed using BAS$$CB_GET, points to the current
!			LUB.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Signals if an error is encountered.
!	Updates the buffer's address and count to reflect the movement
!	of the array.
!
!--

    BEGIN

    GLOBAL REGISTER
	CCB = K_CCB_REG : REF BLOCK [, BYTE];

    MAP
	SRC : REF BLOCK [8, BYTE],
	DEST : REF BLOCK [8, BYTE];

    BUILTIN
	ACTUALCOUNT;

    LOCAL
	LENGTH;					! Passed length, or -1

    LENGTH = (IF (ACTUALCOUNT () GEQ 3) THEN .LEN ELSE -1);
!+
! Set up register CCB for error messages.
!-
    BAS$$CB_GET ();
!+
! If we are not doing I/O, or if the I/O is not a MOVE statement,
! then the compiled code has called this routine in the wrong context.
!-

    IF (.CCB EQLA 0) THEN BAS$$STOP (BAS$K_PROLOSSOR);

    IF ( NOT .CCB [LUB$V_OPENED]) THEN BAS$$STOP_IO (BAS$K_PROLOSSOR);

    IF (.CCB [ISB$B_STTM_TYPE] NEQ ISB$K_ST_TY_MOV) THEN BAS$$STOP_IO (BAS$K_PROLOSSOR);

!+
! Dispatch based on the class and data type of the source and destination
!-

    SELECTONE .SRC [DSC$B_CLASS] OF
	SET

	[DSC$K_CLASS_A, DSC$K_CLASS_BFA] :
	    BEGIN				! Source is array

	    IF (.DEST [DSC$B_CLASS] NEQ DSC$K_CLASS_S) THEN BAS$$STOP_IO (BAS$K_PROLOSSOR);

	    SELECTONE .SRC [DSC$B_DTYPE] OF
		SET

		[DSC$K_DTYPE_W, DSC$K_DTYPE_L, DSC$K_DTYPE_F, DSC$K_DTYPE_D] :
		    BEGIN			! Source is numeric array
		    SRC_NA (.SRC, .DEST);
		    END;

		[DSC$K_DTYPE_T, DSC$K_DTYPE_DSC] :
		    BEGIN			! Source is string array
		    SRC_SA (.SRC, .DEST, .LENGTH);
		    END;

		[OTHERWISE] :
		    BAS$$STOP_IO (BAS$K_PROLOSSOR);
		TES;

	    END;

	[DSC$K_CLASS_S] :
	    BEGIN				! Source is buffer

	    SELECTONE .DEST [DSC$B_CLASS] OF
		SET

		[DSC$K_CLASS_A, DSC$K_CLASS_BFA] :
		    BEGIN			! Destination is array

		    SELECTONE .DEST [DSC$B_DTYPE] OF
			SET

			[DSC$K_DTYPE_W, DSC$K_DTYPE_L, DSC$K_DTYPE_F, DSC$K_DTYPE_D] :
			    BEGIN		! Destination is numeric array
			    DEST_NA (.SRC, .DEST);
			    END;

			[DSC$K_DTYPE_T, DSC$K_DTYPE_DSC] :
			    BEGIN		! Destination is string array
			    DEST_SA (.SRC, .DEST, .LENGTH);
			    END;

			[OTHERWISE] :
			    BAS$$STOP_IO (BAS$K_PROLOSSOR);
			TES;

		    END;

		[OTHERWISE] :
		    BAS$$STOP_IO (BAS$K_PROLOSSOR);
		TES;

	    END;

	[OTHERWISE] :
	    BAS$$STOP_IO (BAS$K_PROLOSSOR);
	TES;

    RETURN;
    END;					! end of BAS$MOVE_ARRAY


ROUTINE SRC_NA (				! MOVE a numeric array
	SRC, 					! Source: array
	DEST					! Destination: buffer
    ) : CALL_CCB NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Within a MOVE statement, move a numeric array to the buffer.
!
! FORMAL PARAMETERS:
!
!	SRC.rx.da	The source, a numeric array.
!	DEST.mq.r	The destination, the I/O buffer.  It is updated to
!			reflect the array.
!
! IMPLICIT INPUTS:
!
!	CCB, which is used only to provide good error messages.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Signals if an error is encountered.
!	Updates the buffer's address and count to reflect the movement
!	of the array.
!
!--

    BEGIN

    EXTERNAL REGISTER
	CCB : REF BLOCK [, BYTE];

    MAP
	SRC : REF BLOCK [, BYTE],
	DEST : REF BLOCK [8, BYTE];

    LOCAL
	BOUNDS : REF VECTOR,
	HIGH_INDEX_NUM,
	LOW_INDEX_NUM;

!+
! The total number of bytes in the array must not be greater than the
! remaining length of the buffer.
!-

    IF (.SRC [DSC$L_ARSIZE] GTRU .DEST [DSC$W_LENGTH]) THEN BAS$$STOP_IO (BAS$K_MOVOVEBUF);

!+
! Set up upper and lower bounds for subscripts.
!-
    BOUNDS = SRC [DSC$L_M1] + (%UPVAL*.SRC [DSC$B_DIMCT]);

    IF (.SRC [DSC$V_FL_COLUMN])
    THEN
	BEGIN
	LOW_INDEX_NUM = .SRC [DSC$B_DIMCT];
	HIGH_INDEX_NUM = 1;
	END
    ELSE
	BEGIN
	LOW_INDEX_NUM = 1;
	HIGH_INDEX_NUM = .SRC [DSC$B_DIMCT];
	END;

    INCR LOW_INDEX FROM .BOUNDS [((.LOW_INDEX_NUM - 1)*2)] TO .BOUNDS [((.LOW_INDEX_NUM - 1)*2) + 1] DO
	BEGIN

	LOCAL
	    VALUE_DESCRIP : BLOCK [8, BYTE];

	VALUE_DESCRIP [DSC$W_LENGTH] = .SRC [DSC$W_LENGTH];
	VALUE_DESCRIP [DSC$B_DTYPE] = .SRC [DSC$B_DTYPE];
	VALUE_DESCRIP [DSC$B_CLASS] = DSC$K_CLASS_S;

	IF (.HIGH_INDEX_NUM EQL .LOW_INDEX_NUM)
	THEN
	    BEGIN
!+
! Single-dimensioned array.
!-
	    VALUE_DESCRIP [DSC$A_POINTER] = .DEST [DSC$A_POINTER];
	    BAS$FETCH_BFA (.SRC, VALUE_DESCRIP, .LOW_INDEX);
	    DEST [DSC$A_POINTER] = .DEST [DSC$A_POINTER] + .VALUE_DESCRIP [DSC$W_LENGTH];
	    DEST [DSC$W_LENGTH] = .DEST [DSC$W_LENGTH] - .VALUE_DESCRIP [DSC$W_LENGTH];
	    END
	ELSE
	    BEGIN
!+
! Two-dimensional array.
!-

	    INCR HIGH_INDEX FROM .BOUNDS [((.HIGH_INDEX_NUM - 1)*2)] TO .BOUNDS [((.HIGH_INDEX_NUM - 1)*2) + 1]
		DO
		BEGIN
		VALUE_DESCRIP [DSC$A_POINTER] = .DEST [DSC$A_POINTER];
		BAS$FETCH_BFA (.SRC, VALUE_DESCRIP, .LOW_INDEX, .HIGH_INDEX);
		DEST [DSC$A_POINTER] = .DEST [DSC$A_POINTER] + .VALUE_DESCRIP [DSC$W_LENGTH];
		DEST [DSC$W_LENGTH] = .DEST [DSC$W_LENGTH] - .VALUE_DESCRIP [DSC$W_LENGTH];
		END;

	    END;

	END;

    END;					! of SRC_NA

ROUTINE SRC_SA (				! MOVE a string array
	SRC, 					! Source: array
	DEST, 					! Destination: buffer
	LENGTH					! Limit on string size
    ) : CALL_CCB NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Within a MOVE statement, move a string array to the buffer.
!
! FORMAL PARAMETERS:
!
!	SRC.rx.da	The source, a string array.
!	DEST.mq.r	The destination, the I/O buffer.  It is updated to
!			reflect the array.
!	LENGTH.rl.v	-1 or limit of length of string to copy
!
! IMPLICIT INPUTS:
!
!	CCB, which is used only to provide good error messages.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Signals if an error is encountered.
!	Updates the buffer's address and count to reflect the movement
!	of the array.
!
!--

    BEGIN

    EXTERNAL REGISTER
	CCB : REF BLOCK [, BYTE];

    MAP
	SRC : REF BLOCK [, BYTE],
	DEST : REF BLOCK [, BYTE];

    LOCAL
	BOUNDS : REF VECTOR,
	HIGH_INDEX_NUM,
	LOW_INDEX_NUM;

!+
! Set up upper and lower bounds for subscripts.
!-
    BOUNDS = SRC [DSC$L_M1] + (%UPVAL*.SRC [DSC$B_DIMCT]);

    IF (.SRC [DSC$V_FL_COLUMN])
    THEN
	BEGIN
	LOW_INDEX_NUM = .SRC [DSC$B_DIMCT];
	HIGH_INDEX_NUM = 1;
	END
    ELSE
	BEGIN
	LOW_INDEX_NUM = 1;
	HIGH_INDEX_NUM = .SRC [DSC$B_DIMCT];
	END;

!+
! Go through the elements of the array.
!-

    INCR LOW_INDEX FROM .BOUNDS [((.LOW_INDEX_NUM - 1)*2)] TO .BOUNDS [((.LOW_INDEX_NUM - 1)*2) + 1] DO
	BEGIN

	LOCAL
	    VALUE_DESCRIP : BLOCK [8, BYTE],
	    LEN;

	VALUE_DESCRIP [DSC$W_LENGTH] = 0;
	VALUE_DESCRIP [DSC$B_DTYPE] = DSC$K_DTYPE_T;
	VALUE_DESCRIP [DSC$B_CLASS] = DSC$K_CLASS_D;
	VALUE_DESCRIP [DSC$A_POINTER] = 0;

	IF (.HIGH_INDEX_NUM EQL .LOW_INDEX_NUM)
	THEN
	    BEGIN
!+
! Single-dimensioned array.
!-
	    BAS$FETCH_BFA (.SRC, VALUE_DESCRIP, .LOW_INDEX);
	    LEN = (IF (.LENGTH LSS 0) THEN .VALUE_DESCRIP [DSC$W_LENGTH] ELSE .LENGTH);

	    IF (.DEST [DSC$W_LENGTH] LSSU .LEN) THEN BAS$$STOP_IO (BAS$K_MOVOVEBUF);

	    DEST [DSC$A_POINTER] = CH$COPY (.VALUE_DESCRIP [DSC$W_LENGTH], .VALUE_DESCRIP [DSC$A_POINTER],
		%C' ', .LEN, .DEST [DSC$A_POINTER]);
	    DEST [DSC$W_LENGTH] = .DEST [DSC$W_LENGTH] - .LEN;
	    END
	ELSE
	    BEGIN
!+
! Two-dimensional array
!-

	    INCR HIGH_INDEX FROM .BOUNDS [((.HIGH_INDEX_NUM - 1)*2)] TO .BOUNDS [((.HIGH_INDEX_NUM - 1)*2) + 1]
		DO
		BEGIN
		BAS$FETCH_BFA (.SRC, VALUE_DESCRIP, .LOW_INDEX, .HIGH_INDEX);
		LEN = (IF (.LENGTH LSS 0) THEN .VALUE_DESCRIP [DSC$W_LENGTH] ELSE .LENGTH);

		IF (.DEST [DSC$W_LENGTH] LSSU .LEN) THEN BAS$$STOP_IO (BAS$K_MOVOVEBUF);

		DEST [DSC$A_POINTER] = CH$COPY (.VALUE_DESCRIP [DSC$W_LENGTH],
		    .VALUE_DESCRIP [DSC$A_POINTER], %C' ', .LEN, .DEST [DSC$A_POINTER]);
		DEST [DSC$W_LENGTH] = .DEST [DSC$W_LENGTH] - .LEN;
		END;

	    END;

	STR$FREE1_DX (VALUE_DESCRIP);
	END;

    END;					! of SRC_SA

ROUTINE DEST_NA (				! MOVE a numeric array
	SRC, 					! Source: buffer
	DEST					! Destination: numeric array
    ) : CALL_CCB NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Within a MOVE statement, move the I/O buffer to a numeric array.
!
! FORMAL PARAMETERS:
!
!	SRC.mq.r	The source, the I/O buffer.  It is updated to account for the
!			bytes taken from it.
!	DEST.wx.da	The destination, a numeric array.
!
! IMPLICIT INPUTS:
!
!	CCB, which is used only to provide good error messages.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Signals if an error is encountered.
!	Updates the buffer's address and count to reflect the movement
!	of the array.
!
!--

    BEGIN

    EXTERNAL REGISTER
	CCB : REF BLOCK [, BYTE];

    MAP
	SRC : REF BLOCK [8, BYTE],
	DEST : REF BLOCK [, BYTE];

    LOCAL
	BOUNDS : REF VECTOR,
	HIGH_INDEX_NUM,
	LOW_INDEX_NUM;

!+
! The total number of bytes in the array must not be greater than the
! remaining length of the buffer.
!-

    IF (.SRC [DSC$W_LENGTH] LSSU .DEST [DSC$L_ARSIZE]) THEN BAS$$STOP_IO (BAS$K_MOVOVEBUF);

!+
! Set up upper and lower bounds for subscripts.
!-
    BOUNDS = DEST [DSC$L_M1] + (%UPVAL*.DEST [DSC$B_DIMCT]);

    IF (.DEST [DSC$V_FL_COLUMN])
    THEN
	BEGIN
	LOW_INDEX_NUM = .DEST [DSC$B_DIMCT];
	HIGH_INDEX_NUM = 1;
	END
    ELSE
	BEGIN
	LOW_INDEX_NUM = 1;
	HIGH_INDEX_NUM = .DEST [DSC$B_DIMCT];
	END;

    INCR LOW_INDEX FROM .BOUNDS [((.LOW_INDEX_NUM - 1)*2)] TO .BOUNDS [((.LOW_INDEX_NUM - 1)*2) + 1] DO
	BEGIN

	LOCAL
	    VALUE_DESCRIP : BLOCK [8, BYTE];

	VALUE_DESCRIP [DSC$W_LENGTH] = .DEST [DSC$W_LENGTH];
	VALUE_DESCRIP [DSC$B_DTYPE] = .DEST [DSC$B_DTYPE];
	VALUE_DESCRIP [DSC$B_CLASS] = DSC$K_CLASS_S;

	IF (.HIGH_INDEX_NUM EQL .LOW_INDEX_NUM)
	THEN
	    BEGIN
!+
! Single-dimensioned array.
!-
	    VALUE_DESCRIP [DSC$A_POINTER] = .SRC [DSC$A_POINTER];
	    BAS$STORE_BFA (VALUE_DESCRIP, .DEST, .LOW_INDEX);
	    SRC [DSC$A_POINTER] = .SRC [DSC$A_POINTER] + .VALUE_DESCRIP [DSC$W_LENGTH];
	    SRC [DSC$W_LENGTH] = .SRC [DSC$W_LENGTH] - .VALUE_DESCRIP [DSC$W_LENGTH];
	    END
	ELSE
	    BEGIN
!+
! Two-dimensional array.
!-

	    INCR HIGH_INDEX FROM .BOUNDS [((.HIGH_INDEX_NUM - 1)*2)] TO .BOUNDS [((.HIGH_INDEX_NUM - 1)*2) + 1]
		DO
		BEGIN
		VALUE_DESCRIP [DSC$A_POINTER] = .SRC [DSC$A_POINTER];
		BAS$STORE_BFA (VALUE_DESCRIP, .DEST, .LOW_INDEX, .HIGH_INDEX);
		SRC [DSC$A_POINTER] = .SRC [DSC$A_POINTER] + .VALUE_DESCRIP [DSC$W_LENGTH];
		SRC [DSC$W_LENGTH] = .SRC [DSC$W_LENGTH] - .VALUE_DESCRIP [DSC$W_LENGTH];
		END;

	    END;

	END;

    END;					! of DEST_NA

ROUTINE DEST_SA (				! MOVE a string array
	SRC, 					! Source: buffer
	DEST, 					! Destination: array
	LENGTH					! -1 or length of each string
    ) : CALL_CCB NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Within a MOVE statement, move the I/O buffer to a string array.
!
! FORMAL PARAMETERS:
!
!	SRC.mq.r	The source, the I/O buffer.  This is updated to account for
!			the bytes taken from it.
!	DEST.wx.da	The destination, a string array.
!
! IMPLICIT INPUTS:
!
!	CCB, which is used only to provide good error messages.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Signals if an error is encountered.
!	Updates the buffer's address and count to reflect the movement
!	of the array.
!
!--

    BEGIN

    EXTERNAL REGISTER
	CCB : REF BLOCK [, BYTE];

    MAP
	SRC : REF BLOCK [8, BYTE],
	DEST : REF BLOCK [, BYTE];

    LOCAL
	BOUNDS : REF VECTOR,
	HIGH_INDEX_NUM,
	LOW_INDEX_NUM;

!+
! Set up upper and lower bounds for subscripts.
!-
    BOUNDS = DEST [DSC$L_M1] + (%UPVAL*.DEST [DSC$B_DIMCT]);

    IF (.DEST [DSC$V_FL_COLUMN])
    THEN
	BEGIN
	LOW_INDEX_NUM = .DEST [DSC$B_DIMCT];
	HIGH_INDEX_NUM = 1;
	END
    ELSE
	BEGIN
	LOW_INDEX_NUM = 1;
	HIGH_INDEX_NUM = .DEST [DSC$B_DIMCT];
	END;

    INCR LOW_INDEX FROM .BOUNDS [((.LOW_INDEX_NUM - 1)*2)] TO .BOUNDS [((.LOW_INDEX_NUM - 1)*2) + 1] DO
	BEGIN

	LOCAL
	    VALUE_DESCRIP : BLOCK [8, BYTE],
	    LEN;

	VALUE_DESCRIP [DSC$W_LENGTH] = 0;
	VALUE_DESCRIP [DSC$B_DTYPE] = DSC$K_DTYPE_T;
	VALUE_DESCRIP [DSC$B_CLASS] = DSC$K_CLASS_D;
	VALUE_DESCRIP [DSC$A_POINTER] = 0;

	IF (.HIGH_INDEX_NUM EQL .LOW_INDEX_NUM)
	THEN
	    BEGIN
!+
! Single-dimensioned array.
!-
	    LEN = (IF (.LENGTH LSS 0) THEN 16 ELSE .LENGTH);

	    IF (.SRC [DSC$W_LENGTH] LSSU .LEN) THEN BAS$$STOP_IO (BAS$K_MOVOVEBUF);

	    STR$COPY_R (VALUE_DESCRIP, LEN, .SRC [DSC$A_POINTER]);
	    BAS$STORE_BFA (VALUE_DESCRIP, .DEST, .LOW_INDEX);
	    SRC [DSC$A_POINTER] = .SRC [DSC$A_POINTER] + .VALUE_DESCRIP [DSC$W_LENGTH];
	    SRC [DSC$W_LENGTH] = .SRC [DSC$W_LENGTH] - .VALUE_DESCRIP [DSC$W_LENGTH];
	    END
	ELSE
	    BEGIN
!+
! Two-dimensional array.
!-

	    INCR HIGH_INDEX FROM .BOUNDS [((.HIGH_INDEX_NUM - 1)*2)] TO .BOUNDS [((.HIGH_INDEX_NUM - 1)*2) + 1]
		DO
		BEGIN
		LEN = (IF (.LENGTH LSS 0) THEN 16 ELSE .LENGTH);

		IF (.LEN GTRU .SRC [DSC$W_LENGTH]) THEN BAS$$STOP_IO (BAS$K_MOVOVEBUF);

		STR$COPY_R (VALUE_DESCRIP, LEN, .SRC [DSC$A_POINTER]);
		BAS$STORE_BFA (VALUE_DESCRIP, .DEST, .LOW_INDEX, .HIGH_INDEX);
		SRC [DSC$A_POINTER] = .SRC [DSC$A_POINTER] + .VALUE_DESCRIP [DSC$W_LENGTH];
		SRC [DSC$W_LENGTH] = .SRC [DSC$W_LENGTH] - .VALUE_DESCRIP [DSC$W_LENGTH];
		END;

	    END;

	STR$FREE1_DX (VALUE_DESCRIP);
	END;

    END;					! of DEST_SA
END						! end of module BAS$MOVE_ARRAY

ELUDOM
