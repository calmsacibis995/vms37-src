	.TITLE	MTH$HTAN 	; H Floating Point Tangent routine
				; (HTAN, HTAND)
	.IDENT /1-006/		; File: MTHHTAN.MAR  EDIT:  RNH1006
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;
; FACILITY: MATH LIBRARY
;++
; ABSTRACT:
;
; MTH$HTAN is a function  which  returns the H floating point tangent
; of its H floating point radian argument. The call is standard
; call-by-reference.  It JSB to MTH$HTAN_R7.
;
; MTH$HTAND is a function  which  returns the H floating point tangent
; of its H floating point degree argument. The call is standard
; call-by-reference.  It JSB to MTH$HTAND_R7.
;
;--
;
; VERSION: 1
;
; HISTORY:
; AUTHOR:
;	John A. Wheeler, 15-Oct-1979: Version 1
;
; MODIFIED BY:
;
;
;

	.SBTTL	HISTORY	; Detailed Current Edit History


; Edit History for Version 1 of MTH$HTAN 
;
; 1-001 - Adapted from MTH$GTAN version 1-001.  JAW 15-Oct-1979
; 1-002 - Call MTH$SIGNAL with user PC arg for JSB.  SBL 31-Oct-1979
; 1-003 - Added degree entry points. RNH 8-MAR-1981
; 1-004 - Added MTH$HTAN_R7, and MTH$HTAND_R7.  RNH 27-AUG-81.
; 1-005 - Change shared external references to G^ RNH 25-Sep-81
; 1-006 - Change remaining external references to G^.  RNH 06-Oct-81

	.SBTTL	DECLARATIONS	; Declarative Part of Module

;
; INCLUDE FILES:	none
;
; EXTERNAL SYMBOLS:
	.DSABL	GBL		; Prevent undefineds from becoming
				; Global
	.EXTRN	MTH$HSIN_R5	; H Floating sine routine (radians)
	.EXTRN	MTH$HCOS_R5	; H Floating cosine routine (radians)
	.EXTRN	MTH$HSINCOS_R7	; H Floating sine and cosine routine (radians)
	.EXTRN	MTH$HSINCOSD_R7	; H Floating sine and cosine routine (degrees)
	.EXTRN	MTH$$SIGNAL	; Math error signal routine
	.EXTRN	MTH$$SIGNAL_CON	; Handler that just returns
	.EXTRN	MTH$K_FLOOVEMAT	; Error code
	.EXTRN	MTH$K_FLOUNDMAT ; Error code
	.EXTRN	MTH$$JACKET_TST ; 
	.EXTRN	MTH$HSIND_R5	; H Floating sine routine (degrees)
	.EXTRN	MTH$HCOSD_R5	; H Floating cosine routine (degrees)

;
; EQUATED SYMBOLS:	none
;
; MACROS:	
	$SFDEF			; Define SF (Stack Frame) symbols
;
;
; PSECT DECLARATIONS:

	.PSECT	_MTH$CODE	PIC,SHR,LONG,EXE,NOWRT
					; Program section for math routines
;
; OWN STORAGE:	none
;
; CONSTANTS: 
	HTAN = 4			; Position of output parameter from AP
	HTAND = 4			; Position of output parameter from AP
	X = 8				; Position of input parameter from AP

H_SMALLEST_DEG:
	.LONG	^XCA5D0006, ^X3C1FC1A6		; 180/pi*2**-16384
	.LONG	^X152E7B86, ^X81A5A6FE


	.SBTTL	MTH$HTAN  - Standard H Floating HTAN


;++
; FUNCTIONAL DESCRIPTION:
;
; HTAN  - H floating point tangent function
;
;	For algorithm, see MTH$HTAN_R7
;
; CALLING SEQUENCE:
;
;	CALL MTH$HTAN(HTAN.wh.r, X.rh.r)
;
;
; INPUT PARAMETERS:
;
;	X.rh.r				Address of value of angle in radians.
;
; IMPLICIT INPUTS:	none
;
; OUTPUT PARAMETERS:
;
;
;	VALUE:	H floating tangent of the argument.
;		Output parameter is the first parameter from the left.
;
; IMPLICIT OUTPUTS:	none
;
; COMPLETION CODES:	none
;
; SIDE EFFECTS:
;
;	NONE
;
;---


	.ENTRY	MTH$HTAN, ^M<IV, R2, R3, R4, R5, R6, R7>
					; Standard call-by-reference entry
					; Disable DV (and FU), enable IV
	MTH$FLAG_JACKET			; Flag that this is a jacket procedure in
					; case of an error in special routine
	MOVH	@X(AP), R0		; R0/R3 = argument
	BSBB	MTH$HTAN_R7		; Call special HTAN routine
	MOVO	R0, @HTAN(AP)		; Store result in second argument
	RET				; Return to caller

	.SBTTL	MTH$HTAN_R7 - JSB entry point
;
;++
; FUNCTIONAL DESCRIPTION:
;
; HTAN - JSB entry point
;
; Algorithmic steps:
;  1. Compute HSIN and HCOS.
;  2. If HCOS is zero, we have an error.
;  3. Return HSIN / HCOS.
;
; CALLING SEQUENCE:
;
;	MOVH	argument, R0
;	JSB	MTH$HTAN_R7
;
; INPUT PARAMETERS:
;
;	R0 / R3 contains x
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	The result is the H-floating tangent of x.
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; SIDE EFFECTS:
;
;	NONE
;--
MTH$HTAN_R7::			
	JSB	G^MTH$HSINCOS_R7	; Compute HSIN, and HCOS of X
	TSTH	R4			; Is HCOS zero ?
	BEQL	30$			; If zero, HTAN is infinite
	DIVH2	R4, R0			; Compute HSIN / HCOS
	RSB				; Return to caller
;
; HCOS is zero, so HTAN is infinite.  Go to common error code.
;
30$:
	BRW	COSZER

	.SBTTL	MTH$HTAN_R5 - JSB entry point
;
;++
; FUNCTIONAL DESCRIPTION:
;
; HTAN - JSB entry point
;
; Algorithmic steps:
;  1. Compute HSIN and HCOS.
;  2. If HCOS is zero, we have an error.
;  3. Return HSIN / HCOS.
;
; CALLING SEQUENCE:
;
;	MOVH	argument, R0
;	JSB	MTH$HTAN_R5
;
; INPUT PARAMETERS:
;
;	R0 / R3 contains x
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	The result is the H-floating tangent of x.
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; SIDE EFFECTS:
;
;	NONE
;--
MTH$HTAN_R5::				
	MOVH	R0, -(SP)		; Save argument
	JSB	MTH$HCOS_R5		; Compute HCOS
	MOVH	R0, -(SP)		; Save HCOS
	BEQL	20$			; If zero, HTAN is infinite
	MOVO	16(SP), R0		; Get argument back
	JSB	G^MTH$HSIN_R5		; Compute HSIN
	DIVH2	(SP)+, R0		; Compute HSIN / HCOS
	ADDL2	#16, SP			; Discard saved argument
	RSB				; Return to caller
;+
; Come here if HCOS is zero.  This means that HTAN is infinite.
;-
20$:
	ADDL2	#32, SP			; Discard saved HCOS and saved argument
	BRW	COSZER			; Go to common error code	


	.SBTTL	MTH$HTAND  - Standard H Floating HTAND


;++
; FUNCTIONAL DESCRIPTION:
;
; HTAND  - H floating point tangent function
;
;	   For algorithm, see MTH$HTAND_R7
;
; CALLING SEQUENCE:
;
;	CALL MTH$HTAND(HTAND.wh.r, X.rh.r)
;
;
; INPUT PARAMETERS:
;
;	X.rh.r				address of value of angle in degrees.
;
; IMPLICIT INPUTS:	none
;
; OUTPUT PARAMETERS:
;
;
;	VALUE:	H floating tangent of the argument.
;		Output parameter is the first argument from the left.
;
; IMPLICIT OUTPUTS:	none
;
; COMPLETION CODES:	none
;
; SIDE EFFECTS:
;
;	NONE
;---


	.ENTRY	MTH$HTAND, ^M<IV, R2, R3, R4, R5, R6, R7>
					; Standard call-by-reference entry
					; Disable DV (and FU), enable IV
	MTH$FLAG_JACKET			; Flag that this is a jacket procedure in
					; case of an error in special routine
	MOVH	@X(AP), R0		; R0/R3 = argument
	BSBB	MTH$HTAND_R7		; Call special HTAND routine
	MOVO	R0, @HTAND(AP)		; Store result in second argument
	RET				; Return to caller

	.SBTTL	MTH$HTAND_R7 - JSB entry point
;
;++
; FUNCTIONAL DESCRIPTION:
;
; HTAND - JSB entry point
;
; Algorithmic steps:
;  1. Make sure that the absolute value of the argument is greater than
;     180/pi*2**-16384 to avoid underflow in HSIND.
;  2. Compute HSIND and HCOSD.
;  3. If HCOSD is zero, we have an error.
;  4. Return HSIND / HCOSD.
;
; CALLING SEQUENCE:
;
;	MOVH	argument, R0
;	JSB	MTH$HTAND_R7
;
; INPUT PARAMETERS:
;
;	R0 / R3 contains x
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	The result is the H-floating tangent of x.
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; SIDE EFFECTS:
;
;	NONE
;--
MTH$HTAND_R7::
	MOVH	R0, -(SP)		; Save argument
	BICW	#^X8000, (SP)		; (SP) = |argument|
	CMPW	#7, (SP)		; Compare |ARG| with 2**-16377
	BLEQ	20$			; No possible underflow compute HTAND.
	CMPH	H_SMALLEST_DEG, (SP)	; Possible underflow, use better check
	BLEQ	20$			; No underflow.
	TSTH	(SP)			; If |arg| = 0, no underflow, otherwise
	BNEQ	UNFL			; HSIND will underflow
	ADDL	#16, SP			; Remove argument from the stack
	CLRH	R0			; Zero the result
	RSB				; Return with value = 0
20$:
	ADDL2	#16, SP			; Discard saved argument
	JSB	G^MTH$HSINCOSD_R7		; Compute HCOSD
	TSTH	R4			; Is HCOSD zero ?
	BEQL	COSZER			; If zero, HTAND is infinite
	DIVH2	R4, R0			; Compute HSIND / HCOSD
	RSB				; Return to caller


	.SBTTL	MTH$HTAND_R5 - JSB entry point
;
;++
; FUNCTIONAL DESCRIPTION:
;
; HTAND - JSB entry point
;
; Algorithmic steps:
;  1. Make sure that the absolute value of the argument is greater than
;     180/pi*2**-16384 to avoid underflow in HSIND.
;  2. Compute HSIND and HCOSD.
;  3. If HCOSD is zero, we have an error.
;  4. Return HSIND / HCOSD.
;
; CALLING SEQUENCE:
;
;	MOVH	argument, R0
;	JSB	MTH$HTAND_R5
;
; INPUT PARAMETERS:
;
;	R0 / R3 contains x
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	The result is the H-floating tangent of x.
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; SIDE EFFECTS:
;
;	NONE
;--
MTH$HTAND_R5::			
	MOVH	R0, -(SP)		; Save argument
	BICW	#^X8000, R0		; R0/R3 = |argument|
	CMPW	#7, R0			; Compare |ARG| with 2**-16377
	BLEQ	20$			; No possible underflow compute HTAND.
	CMPH	H_SMALLEST_DEG, R0	; Possible underflow, use better check
	BLEQ	20$			; No underflow.
	TSTH	R0			; If |arg| = 0, no underflow, otherwise
	BNEQ	UNFL			; HSIND will underflow
	ADDL	#16, SP			; Remove argument from the stack
	RSB				; Return with value = 0
20$:
	JSB	MTH$HCOSD_R5		; Compute HCOSD
	MOVH	R0, -(SP)		; Save HCOSD
	BEQL	30$			; If zero, HTAND is infinite
	MOVO	16(SP), R0		; Get argument back
	JSB	G^MTH$HSIND_R5		; Compute HSIND
	DIVH2	(SP)+, R0		; Compute HSIND / HCOSD
	ADDL2	#16, SP			; Discard saved argument
	RSB				; Return to caller
;+
; Come here if HCOSD is zero.  This means that HTAND is infinite.
;-
30$:	ADDL2	#32, SP			; Discard saved HCOSD and saved argument
	BRW	COSZER			; Go to common error code


;
; 	COMMON ERROR CODE
;

;
; Underflow; if user has FU set, signal error.  Always return 0.0
;
UNFL:
	ADDL	#16, SP			; Remove argument from stack
	MOVPSL	R2			; R2 = user's or jacket routine's PSL
	CALLS	#0, G^MTH$$JACKET_TST	; R0 = TRUE if JSB from jacket routine
	BLBC	R0, 10$			; branch if user did JSB
	MOVZWL	SF$W_SAVE_PSW(FP), R2	; get user PSL saved by CALL
10$:	CLRL	R0			; R0 = result. LIB$SIGNAL will save in
					; CHF$L_MCH_R0/R1 so any handler can fixup
	BBC	#6, R2, 20$		; has user enabled floating underflow?
	PUSHL	(SP)			; yes, return PC from special routine
	MOVZBL	#MTH$K_FLOUNDMAT, -(SP)	; trap code for hardware floating underflow
					; convert to MTH$_FLOUNDMAT (32-bit VAX-11 
					; exception code)
	CALLS	#2, G^MTH$$SIGNAL	; signal (condition, PC)
20$:	RSB				; return
;+
; Come here if the tangent is infinite because COS is zero.  
; Give an error signal.
;-
COSZER:
	PUSHL	(SP)			; Push user "call" PC
	MOVZBL	#MTH$K_FLOOVEMAT, -(SP)	; Condition value
	ASHQ	#15, #1, R0		; R0/R3 = reserved operand
	CLRQ	R2			; ...
	CALLS	#2, G^MTH$$SIGNAL	; Signal an error
	RSB				; Return to caller

	.END
