MODULE DIF_GETCMD (			! Differences command processing
		LANGUAGE (BLISS32),
		ADDRESSING_MODE(EXTERNAL=GENERAL,
				NONEXTERNAL=LONG_RELATIVE),
		IDENT = 'V03-010'
		) =
BEGIN
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:	DCL Differences command
!
! ABSTRACT:	
!		The DCL DIFFERENCES command compares the contents of
!		two files.
!
! ENVIRONMENT:	
!		VAX native, user mode
!
!--
!
! AUTHOR:	Peter George, Benn Schreiber	CREATION DATE:	1-August-1981
!
! MODIFIED BY:
!
!	V03-010	RPG0010		Bob Grosso		12-Apr-1982
!		Correct /WINDOW=0 accvio by signaling illegal value.
!
!	V03-009	BLS0166		Benn Schreiber		24-Mar-1982
!		Report output file failures better
!
!	V03-008	BLS0148		Benn Schreiber		12-Feb-1982
!		Correctly obtain length of input file specs.  Remove
!		use of ;-1, as it only works if file is latest version.
!
!	V03-007	BLS0146		Benn Schreiber		 9-Feb-1982
!		Do not allow wild cards in input spec, and use ;-1
!		when looking for next lower version
!
!	V03-006	DWT0010		David Thiel		23-Dec-1981
!		Set DIF$V_MAXDIF and DIF$V_OUTPUT if corresponding
!		qualifier is present.
!		Fix revision file error processing during $OPEN.
!		Correct spelling of EDITED keyword of /IGNORE qualifier.
!		Add keyword PRETTY as value of /IGNORE qualifier.
!
!	V03-005	BLS0106		Benn Schreiber		13-Nov-1981
!		Use FNS/FNA if ESS and RSS both zero when printing
!		open failure on revision file
!
!	V03-004	PCG0004		Peter George		13-Oct-1981
!		Add /WIDTH as synonym for /LINE_WIDTH.
!		Set SQO bit in master file FAB too.
!
!	V03-003	PCG0003		Peter George		29-Sep-1981
!		Set SQO bit in input FAB's whenever possible.
!
!	V03-002 PCG0002		Peter George		23-Sep-1981
!		Also allow HEADER:n.
!		Eliminate DIF$GL_HEADCNT.
!
!	V03-001	PCG0001		Peter George		08-Sep-1981
!		Add processing for /IGNORE=(HEADER=n).
!		Allow specification of arbitrary comment delimiters.
!--


%SBTTL	'Declarations';
LIBRARY
	'SYS$LIBRARY:STARLET.L32';		! System macros
LIBRARY
	'SYS$LIBRARY:TPAMAC.L32';		! TPARSE macros
REQUIRE
	'DIFPRE';				! DIF prefix file
REQUIRE
	'DIFDEF';				! DIF data structures

EXTERNAL
    dif$gl_typdata : BBLOCK,			! File type to comment delimiter info
    dif$gl_commdesc : BBLOCK,			! Desc for buffer of comment delimiters
    dif$gl_commflgs : BITVECTOR,		! Bit flags for comment chars in col. 1 only
    dif$gl_ignore : BBLOCK,			! Flags of characters to ignore
    dif$gl_cmdesc : BBLOCK,			! Command line descriptor
    dif$gl_header,				! No. of lines to skip as header
    dif$gl_width,				! Width of lines in output listing
    dif$gl_match,				! No. of records that constitute a match
    dif$gl_maxdif,				! Maximum number of unmatched records
    dif$gl_merged,				! No. of matched lines to follow each list of differences
    dif$gl_parallel,				! Same as above for parallel
    dif$gl_wndwsiz,				! No. of records to search before declaring a mismatch
    dif$gl_flags : BBLOCK,			! Flags
!
! Input and output file data structures
!
    dif$gl_masfdb : BBLOCK,			! Master file fdb
    dif$gl_masdesc : BBLOCK,			! String descriptor for input file
    dif$gl_masrab : BBLOCK,			! RAB for master file
    dif$gl_masnam : REF BBLOCK,			! pointer to NAM block for master file
    dif$gl_masrss : BBLOCK,			! Resultant name string for master file
    dif$gl_revfdb : BBLOCK,			! Revision file fdb
    dif$gl_revdesc : BBLOCK,			! String descriptor for revision file
    dif$gl_revrab : BBLOCK,			! RAB for revision file
    dif$gl_revnam : BBLOCK,			! NAM block for revision file
    dif$gl_revrss : BBLOCK,			! Resultant name string for revision file
    dif$gl_outifi,				! IFI of output file
    dif$gl_outdesc : BBLOCK,			! String descriptor for output file
    dif$gl_outrab : BBLOCK,			! RAB for output file
    dif$gl_outnam : BBLOCK,			! NAM block for output file
    dif$gl_outrss : BBLOCK;			! Output file resultant name string

EXTERNAL ROUTINE
    cli$end_parse,				! Terminate command parse
    cli$get_value,				! Get qualifier value
    cli$present,				! Test if qualifier present
    lib$cvt_dtb,				! Convert decimal to binary
    lib$find_file,				! Wild-card parse/search
    lib$get_vm,					! Allocate virtual memory
    lib$scopy_r_dx,				! Copy a string
    lib$tparse,					! Table driven parser
    str$copy_dx,				! Copy string using descriptors
    SYS$FAO;					! Formatted ASCII output conversion

EXTERNAL LITERAL
    cli$_present,				! Qualifier explicitly present
    cli$_negated,				! Qualifier explicitly negated
    dif$c_maxlangs,				! Number of languages in dif$gl_typdata table
    dif$_badvalue,				! Bad qualifier value
    dif$_closein,				! Error closing input file
    dif$_closeout,				! Error closing output file
    dif$_cmdlin,				! To print bad command line
    dif$_cmdsyntax,				! Command syntax error
    dif$_confqual,				! Conflicting qualifiers
    dif$_mrggtmtch,				! /MERGE greater than /MATCH
    dif$_nolowver,				! No lower version of file found
    dif$_novalue,				! Qualifier requires a value
    dif$_nowild,				! No wild cards allowed
    dif$_openin,				! Error opening input file
    dif$_openout,				! Error opening output file
    dif$_pargtmtch,				! /PARALLEL greater than /MATCH
    dif$_parsefail,				! Error from parse
    dif$_strcpyerr,				! Error from string copy
    dif$_sysfaoerr,				! Error from fao
    dif$_toomnydlm,				! Too many comment delimiters
    dif$_toomnyfil,				! Too many input files
    dif$_twowidths;				! Both /LINE_WIDTH and /WIDTH specified

FORWARD ROUTINE
    call_tparse,				! Call TPARSE
    store_number,				! Store header size
    syntaxerr,					! Print syntax error message
    badvaluerr,					! Illegal qualifier value
    getchbarqual,				! Get /change_bar qualifier
    getfilename,				! Get file spec from FAB/NAM
    initfile,					! Init RMS data to open a file
    dif$open_mas,				! Open master input file
    dif$open_rev,				! Open the revision file
    dif$open_out,				! Open the output file
    dif$close_in,				! Close an input file
    dif$close_out,				! Close the output file
    allocate_ubf,				! Allocate user buffer for records that cross block boundaries
    find_list_width;				! Find width of listing device if /WIDTH not specified

OWN
    sys$output : COUNTEDSTRING ('SYS$OUTPUT'),	! Defuault output file
    tpalindesc : REF BBLOCK,			! Pointer to current string descr
    tpdata,					! Data returned from TPARSE
    tpablock : BBLOCK[tpa$k_length0],		! Tparse block
    find_context : REF BBLOCK,			! Context for lib$find_file
    find_masfile : desc_decl			! String descriptor for master input file
		PRESET ([dsc$b_class] = dsc$k_class_d);

LITERAL
    ffeed = 12;					! Formfeed character
!
! Declare static strings for qualifier names
!
MACRO
    SD[A] =
	BIND %NAME('SD_',A) = $descriptor(a)%;

SD(
    '$LINE',
    'INPUT1',
    'INPUT2',
    'CHANGE_BAR',
    'COMMENT_DELIMITERS',
    'IGNORE',
    'LINE_WIDTH',
    'MATCH',
    'MAXIMUM_DIFFERENCES',
    'MERGED',
    'MODE',
    'NUMBER',
    'OUTPUT',
    'PARALLEL',
    'SEPARATED',
    'SLP',
    'WIDTH',
    'WINDOW');

%SBTTL	'TPARSE	 state tables';

!
! TPARSE tables to parse /COMMENT_DELIMITERS qualifier values
!
$INIT_STATE(comment_delim_states,delim_keys);

$STATE(,
	('COLON',tpa$_exit,,':',tpdata),
	('COMMA',tpa$_exit,,',',tpdata),
	('EXCLAMATION',tpa$_exit,,'!',tpdata),
	('FORM_FEED',tpa$_exit,,ffeed,tpdata),
	('LEFT',tpa$_exit,,'[',tpdata),
	('RIGHT',tpa$_exit,,']',tpdata),
	('SEMI_COLON',tpa$_exit,,';',tpdata),
	('SLASH',tpa$_exit,,'/',tpdata),
	('SPACE',tpa$_exit,,' ',tpdata),
	('TAB',tpa$_exit,,'	',tpdata),
	(tpa$_lambda,,syntaxerr)
	);
!
! TPARSE tables to parse /IGNORE qualifier values
!
$INIT_STATE(ignore_states,ignore_keys);

$STATE(,
	('BLANK_LINES',tpa$_exit,,ign$m_blnklin,dif$gl_ignore),
	('COMMENTS',tpa$_exit,,ign$m_comments,dif$gl_ignore),
	('EXACT',tpa$_exit,,ign$m_exact,dif$gl_ignore),
	('EDITED',tpa$_exit),
	('FORM_FEEDS',tpa$_exit,,ign$m_formfeed,dif$gl_ignore),
	('HEADER',header_num,,ign$m_header,dif$gl_ignore),
	('PRETTY',tpa$_exit,,ign$m_pretty,dif$gl_ignore),
	('TRAILING_SPACES',tpa$_exit,,ign$m_traiblnk,dif$gl_ignore),
	('SPACING',tpa$_exit,,ign$m_spacing,dif$gl_ignore),
	(tpa$_lambda,,syntaxerr)
	);

$STATE(header_num,
	('=',header_num1),
	(':',header_num1),
	(tpa$_eos,tpa$_exit),
	(tpa$_lambda,syntaxerr)
	);

$STATE(header_num1,
	(tpa$_decimal,tpa$_exit,store_number),
	(tpa$_lambda,syntaxerr)
	);

!
! TPARSE tables to parse /MODE qualifier values
!
$INIT_STATE(mode_states,mode_keys);

$STATE(,
	('ASCII',tpa$_exit,,dif$m_ascii,dif$gl_flags),
	('HEXADECIMAL',tpa$_exit,,dif$m_hex,dif$gl_flags),
	('OCTAL',tpa$_exit,,dif$m_octal,dif$gl_flags),
	(tpa$_lambda,,syntaxerr)
	);
!
! TPARSE tables to parse /CHANGE_BAR qualifier value
!
$INIT_STATE(linenum_states,linenum_keys);

$STATE(,
	('NUMBER',tpa$_exit,,1,tpdata),
	('NONUMBER',tpa$_exit)
	);

!
! TPARSE tables to parse /SEPARATED qualifier value
!
$INIT_STATE(separated_states,separated_keys);

$STATE(,
	('MASTER',tpa$_exit,,fdb$m_separated,dif$gl_masfdb [fdb$w_flags]),
	('REVISION',tpa$_exit,,fdb$m_separated,dif$gl_revfdb [fdb$w_flags]),
	(tpa$_lambda,,syntaxerr)
	);

ROUTINE call_tparse(string,states,keys) =
BEGIN

!
! This routine calls tparse given the string, states and keys
!
! Inputs:
!
!	string		address of string descriptor for string to parse
!	states		address of tparse states table
!	keys		address of tparse keys table
!

MAP
    string : REF BBLOCK;

LOCAL
    status;

!
! Initialize the tparse block
!
CH$FILL(0,tpa$k_length0,tpablock);
tpablock[tpa$l_count] = tpa$k_count0;
tpablock[tpa$l_options] = tpa$m_abbrev;
tpablock[tpa$l_stringcnt] = .string[dsc$w_length];
tpablock[tpa$l_stringptr] = .string[dsc$a_pointer];
!
! Initialize OWN storage used
!
tpalindesc = .string;
tpdata = 0;

RETURN lib$tparse(tpablock,.states,.keys)

END;

%SBTTL	'Print syntax error message from tparse';
ROUTINE syntaxerr =
BEGIN
!
! This routine is called to print a command syntax error message
! and stops the image.
!

SIGNAL_STOP(dif$_cmdsyntax,0,
		dif$_cmdlin,1,.tpalindesc)
END;

ROUTINE store_number =
BEGIN
!
! This routine stores the number associated with /IGNORE=(HEADER=n) into
! DIF$GL_HEADER.
!

LOCAL
    status;

IF NOT (status = lib$cvt_dtb (.tpablock [tpa$l_tokencnt],
			      .tpablock [tpa$l_tokenptr],
			      dif$gl_header))
   THEN badvaluerr (tpablock [tpa$l_tokencnt]);
dif$gl_masfdb [fdb$l_headcnt] = .dif$gl_header;
dif$gl_revfdb [fdb$l_headcnt] = .dif$gl_header;
RETURN true;
END;

ROUTINE badvaluerr (desc) =
BEGIN
!
! Print an error message about a bad qualifier value and stop the image
!
SIGNAL_STOP(dif$_badvalue,1,.desc)
END;

%SBTTL	'Get change bar qualifier';
ROUTINE getchbarqual (fdb) =
BEGIN
!
! Get the /CHANGE_BAR qualifier if specified.  This is a file-specific
! qualifier.  A cli$get_value for the appropriate input file specification
! should be done immediately prior to calling this routine
!
! Inputs:
!
!	fdb	address of selected input file fdb
!
MAP
    fdb : REF BBLOCK;

LOCAL
    numberkey,
    desc : desc_decl;

BIND
    cchar = desc[dsc$a_pointer] : REF VECTOR[,BYTE];

fdb[fdb$b_cbarchr] = %ASCII '!';				!Set default character
numberkey = false;
IF (fdb[fdb$v_changebar] = cli$present(sd_change_bar))
THEN BEGIN
    CH$FILL(0,dsc$c_s_bln,desc);				!Make a dynamic
    desc[dsc$b_class] = dsc$k_class_d;				!  string descriptor
    WHILE cli$get_value(sd_change_bar,desc)			!Get value
    DO BEGIN
	IF call_tparse(desc,linenum_states,linenum_keys)
	    THEN BEGIN
		fdb[fdb$v_linenum] = .tpdata;
		numberkey = true;
		END
	    ELSE IF .desc[dsc$w_length] NEQ 0
		THEN fdb[fdb$b_cbarchr] = .cchar[0];
	END;
    IF NOT .numberkey
	THEN fdb[fdb$v_linenum] = .dif$gl_flags[dif$v_linenum];
    END;

RETURN true
END;

%SBTTL	'DIF$GETCMD Process command line';
GLOBAL ROUTINE dif$getcmd =
BEGIN
!
! Get the command parameters
!
! Inputs:
!
!	none
!
! Implicit inputs:
!
!	command line entered, image invoked by DCL
!
LOCAL
    status,
    desc : desc_decl;

CH$FILL(0,dsc$c_s_bln,desc);			! Make desc a dynamic string descriptor
desc[dsc$b_class] = dsc$k_class_d;

dif$gl_flags[dif$v_ascii] = true;		! Default is ASCII output

!
! Get the /NUMBER and /SLP qualifiers
!
dif$gl_flags[dif$v_linenum] = cli$present(sd_number);
dif$gl_flags[dif$v_slp] = cli$present(sd_slp);

!
! Get the /SEPARATED qualifier
!
IF (dif$gl_flags[dif$v_separated] = cli$present(sd_separated))
THEN BEGIN

     WHILE cli$get_value (sd_separated,desc)
     DO IF NOT (status = call_tparse(desc,separated_states,separated_keys))
	   THEN syntaxerr();

     IF NOT (.dif$gl_masfdb [fdb$v_separated] OR .dif$gl_revfdb [fdb$v_separated])
	THEN BEGIN
	     dif$gl_masfdb [fdb$v_separated] = true;
	     dif$gl_revfdb [fdb$v_separated] = true;
	     END;

     END;

!
! Get the /LINE_WIDTH or /WIDTH qualifier
!
IF cli$get_value(sd_line_width,desc)
THEN BEGIN
    status = lib$cvt_dtb(.desc[dsc$w_length],
			.desc[dsc$a_pointer],dif$gl_width);
    IF NOT .status
	THEN badvaluerr(desc);
    dif$gl_flags[dif$v_width] = true;
    END;

IF cli$get_value(sd_width,desc)
THEN BEGIN
    status = lib$cvt_dtb(.desc[dsc$w_length],
			.desc[dsc$a_pointer],dif$gl_width);
    IF NOT .status
	THEN badvaluerr(desc);
    dif$gl_flags[dif$v_width] = true;
    END;

IF cli$present(sd_line_width) and cli$present(sd_width)
THEN SIGNAL (dif$_twowidths);

!
! Get the /MATCH qualifier
!
IF (dif$gl_flags[dif$v_match] = cli$get_value(sd_match,desc))
THEN BEGIN
    status = lib$cvt_dtb(.desc[dsc$w_length],
			.desc[dsc$a_pointer],dif$gl_match);
    IF NOT .status
	THEN badvaluerr(desc);
    END;
!
! Get the /MAXIMUM_DIFFERENCES qualifier
!
IF (dif$gl_flags[dif$v_maxdif] = cli$get_value(sd_maximum_differences,desc))
THEN BEGIN
    status = lib$cvt_dtb(.desc[dsc$w_length],
			.desc[dsc$a_pointer],dif$gl_maxdif);
    IF NOT .status
	THEN badvaluerr(desc);
    END;
!
! Get the /MERGED qualifier
!
IF cli$present(sd_merged)
THEN BEGIN
    dif$gl_flags[dif$v_merged] = true;
    IF cli$get_value(sd_merged,desc)
	AND NOT (status = lib$cvt_dtb(.desc[dsc$w_length],
					.desc[dsc$a_pointer],
					dif$gl_merged))
	THEN badvaluerr(desc);
    END;

!
! Get the /PARALLEL qualifier
!
IF cli$present(sd_parallel)
THEN BEGIN
    dif$gl_flags[dif$v_parallel] = true;
    IF cli$get_value(sd_parallel,desc)
	AND NOT (status = lib$cvt_dtb(.desc[dsc$w_length],
					.desc[dsc$a_pointer],
					dif$gl_parallel))
	THEN badvaluerr(desc);
    END;

!
! Get the /WINDOW qualifier
!
IF (dif$gl_flags[dif$v_window] = cli$get_value(sd_window,desc))
THEN BEGIN
    status = lib$cvt_dtb(.desc[dsc$w_length],
			.desc[dsc$a_pointer],dif$gl_wndwsiz);
    IF ((NOT .status) OR (.dif$gl_wndwsiz LEQ 0))
	THEN badvaluerr(desc);
    END;
!
! Get the /COMMENT_DELIMITERS qualifier
!
IF (dif$gl_flags[dif$v_comdel] = cli$present(sd_comment_delimiters))
THEN BEGIN
    LOCAL
	delimbuf : VECTOR[dif$c_maxcdlm,BYTE],
	delimindex;

    delimindex = 0;
    WHILE cli$get_value(sd_comment_delimiters,desc)
    DO BEGIN
	IF .desc [dsc$w_length] GTRU 1
	   THEN (IF NOT (status = call_tparse(desc,comment_delim_states,delim_keys))
		    THEN syntaxerr())
	   ELSE CH$MOVE (1, .desc [dsc$a_pointer], tpdata);
	IF .delimindex EQL dif$c_maxcdlm
	    THEN SIGNAL_STOP(dif$_toomnydlm,1,dif$c_maxcdlm);
	delimbuf[.delimindex] = .tpdata;
	delimindex = .delimindex + 1;
	END;
    IF .delimindex NEQ 0
	THEN IF NOT (status = lib$scopy_r_dx(delimindex,delimbuf,dif$gl_commdesc))
		THEN SIGNAL_STOP(dif$_strcpyerr,0,.status);
    END;
!
! Get the /IGNORE qualifier
!
IF (dif$gl_flags[dif$v_ignore] = cli$present(sd_ignore))
THEN WHILE cli$get_value(sd_ignore,desc)
    DO IF NOT (status = call_tparse(desc,ignore_states,ignore_keys))
		THEN syntaxerr();
IF .dif$gl_flags [dif$v_comdel]
   THEN BEGIN
	dif$gl_flags [dif$v_ignore] = true;
	dif$gl_ignore [ign$v_comments] = true;
	END;
!
! Get the /MODE qualifier
!
IF cli$present(sd_mode)
THEN BEGIN
    dif$gl_flags[dif$v_ascii] = false;
    WHILE cli$get_value(sd_mode,desc)
    DO IF NOT (status = call_tparse(desc,mode_states,mode_keys))
		THEN syntaxerr();
    END;
!
! Get the /OUTPUT qualifier
!
IF (dif$gl_flags[dif$v_output] = cli$present(sd_output))
THEN cli$get_value(sd_output,dif$gl_outdesc)
ELSE IF NOT .dif$gl_flags [dif$v_slp]
	THEN lib$scopy_r_dx(%REF (.sys$output [0]), sys$output [1], 
				   dif$gl_outdesc);
!
! Get the input files
!
cli$get_value(sd_input1,find_masfile);
getchbarqual(dif$gl_masfdb);				!Get /CHANGE_BAR for master file
!
! Get value in case two params specified on first input
!
IF (status = cli$get_value(sd_input1,desc))		!Get 2nd file on first parameter
    THEN getchbarqual(dif$gl_revfdb);
IF cli$get_value(sd_input2,dif$gl_revdesc)		!If 2nd parameter specified
THEN BEGIN
    IF .status						! and two files given on first param
	THEN SIGNAL_STOP(dif$_toomnyfil);
    END
ELSE IF .status						!2nd param not specifed
    THEN CH$MOVE(dsc$c_s_bln,desc,dif$gl_revdesc);	! but 2 files on first param were, so use it
getchbarqual(dif$gl_revfdb);				!Get /CHANGE_BAR for revision file
!
! Get the command line
!
cli$get_value(sd_$line,dif$gl_cmdesc);
!
! Check for conflicting qualifiers
!
IF .dif$gl_flags[dif$v_parallel]		!If /parallel specified
THEN dif$gl_flags[dif$v_ascii] = true;		!Force ASCII mode

IF .dif$gl_flags[dif$v_slp]			!If /slp specified
THEN BEGIN
    dif$gl_flags[dif$v_hex] = false;		!Ignore hex and octal mode qualifiers
    dif$gl_flags[dif$v_octal] = false;
    dif$gl_flags[dif$v_ascii] = true;
    dif$gl_flags[dif$v_linenum] = false;	!Do not print line numbers
    dif$gl_ignore[ign$v_exact] = true;		!Use unedited text
    dif$gl_ignore[ign$v_pretty] = false;	!Don't expand tabs, etc.
    IF .dif$gl_flags[dif$v_merged]		!/slp conflicts with /merged
	OR .dif$gl_flags[dif$v_parallel]	! and /parallel
	OR .dif$gl_flags[dif$v_separated]	! and /separated
	OR .dif$gl_masfdb[fdb$v_changebar]	! and /changebar on the master
	OR .dif$gl_revfdb[fdb$v_changebar]	!  or the revision file
	THEN SIGNAL_STOP(dif$_confqual);
    END
ELSE IF NOT .dif$gl_flags[dif$v_separated]	!Not /slp, if not /separated
    AND NOT .dif$gl_masfdb[fdb$v_changebar]	! or /changebar
    AND NOT .dif$gl_revfdb[fdb$v_changebar]	!  on either file
    AND NOT .dif$gl_flags[dif$v_parallel]	! or /parallel
    THEN dif$gl_flags[dif$v_merged] = true;	! then set /merged
!
! The values of /MERGE and /PARALLEL must be less than /MATCH
!
IF .dif$gl_merged GTR .dif$gl_match
THEN BEGIN
    SIGNAL(dif$_mrggtmtch,2,.dif$gl_merged,.dif$gl_match);
    dif$gl_merged = .dif$gl_match;
    END;

IF .dif$gl_parallel GTR .dif$gl_match
THEN BEGIN
    SIGNAL(dif$_pargtmtch,2,.dif$gl_parallel,.dif$gl_match);
    dif$gl_parallel  = .dif$gl_match;
    END;

RETURN true
END;

ROUTINE getfilename (fab) =
BEGIN
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine returns a string descriptor for a file.
!
! Inputs:
!
!	fab		Address of the fab
!
! Outputs:
!
!	Routine value is address of string descriptor for file name
!
!--

MAP
    fab : REF BBLOCK;

BIND
    nam = .fab [fab$l_nam] : BBLOCK;

OWN
    filedesc : BBLOCK[dsc$c_s_bln];

IF (filedesc [dsc$w_length] = .nam [nam$b_rsl]) NEQ 0	!If resultant name present
THEN filedesc [dsc$a_pointer] = .nam [nam$l_rsa]
ELSE IF (filedesc [dsc$w_length] = .nam [nam$b_esl]) NEQ 0 !If expanded name present
    THEN filedesc [dsc$a_pointer] = .nam [nam$l_esa]
    ELSE BEGIN
	filedesc [dsc$w_length] = .fab [fab$b_fns];	!Use filename string
	filedesc [dsc$a_pointer] = .fab [fab$l_fna];	! if all else fails
	END;

RETURN filedesc
END;							!Of getfilename

GLOBAL ROUTINE dif$open_mas =
BEGIN
!
! Open the master input file
!
LOCAL
    xabfhc : $XABFHC_DECL,
    status,
    strstatus;

status = lib$find_file(find_masfile,
		dif$gl_masdesc,find_context,
		0,dif$gl_masdesc);		!No default file spec
IF NOT .status
THEN BEGIN
    IF .status EQL rms$_nmf
	THEN status = rms$_fnf;
    SIGNAL(dif$_openin,1,dif$gl_masdesc,
		.status,
		.find_context[fab$l_stv]);
    END;
!
! Set pointer in FDB to NAM block
!
IF .dif$gl_masnam EQL 0
THEN BEGIN
    dif$gl_masnam = .find_context[fab$l_nam];
    dif$gl_masfdb[fdb$l_namptr] = .find_context[fab$l_nam];
    END;

IF .dif$gl_masnam[nam$v_wildcard]
    THEN SIGNAL_STOP(dif$_nowild);

initfile(dif$gl_masfdb,0,.find_context);

!
! Open the file
!
$XABFHC_INIT(xab=xabfhc,
	nxt=0);
find_context[fab$l_xab] = xabfhc;
status = $OPEN(fab=.find_context);
strstatus = str$copy_dx(dif$gl_masdesc,getfilename(.find_context));
IF NOT .strstatus
    THEN SIGNAL_STOP(dif$_strcpyerr,0,.strstatus);
IF NOT .status
    THEN SIGNAL_STOP(dif$_openin,1,dif$gl_masdesc,
			.status,.find_context[fab$l_stv]);
!
! Save the IFI to close the file
!
dif$gl_masfdb[fdb$w_ifi] = .find_context[fab$w_ifi];
!
! Connect the record stream
!
status = $CONNECT(rab=dif$gl_masrab);
IF NOT .status
    THEN SIGNAL_STOP(dif$_openin,1,dif$gl_masdesc,
			.status,.dif$gl_masrab[rab$l_stv]);
!
! Allocate a buffer big enough to hold the largest record
!
allocate_ubf(xabfhc,dif$gl_masrab);
find_context[fab$l_xab] = 0;				! So $CLOSE doesn't try to access XAB
!
! If /COMMENT_DELIMITERS was not specified, attempt to
! divine the delimiters from the file type table
!
IF NOT .dif$gl_flags[dif$v_comdel] OR (.dif$gl_commdesc [dsc$w_length] EQL 0)
    THEN INCRU i FROM 0 TO dif$c_maxlangs-1
DO BEGIN
    BIND
	typedata = dif$gl_typdata + (.i*ftdb$c_size) : BBLOCK,
	thistype = .typedata[ftdb$l_typtr] : VECTOR[,BYTE],
	thiscdl = .typedata[ftdb$l_cdptr] : VECTOR[,BYTE];

    IF CH$EQL(.dif$gl_masnam[nam$b_type],.dif$gl_masnam[nam$l_type],
		.thistype[0],thistype[1],0)
    THEN BEGIN
	IF NOT (strstatus = lib$scopy_r_dx(%REF(.thiscdl[0]),thiscdl[1],
		dif$gl_commdesc))
	    THEN SIGNAL_STOP(dif$_strcpyerr,0,.strstatus);
	dif$gl_commflgs = .typedata[ftdb$w_flags];
	EXITLOOP;
	END;
    END;

RETURN true
END;

GLOBAL ROUTINE dif$open_rev =
BEGIN
!
! Open the revision file
!
LOCAL
    status,
    strstatus,
    xabfhc : $XABFHC_DECL,
    fab : $FAB_DECL;

initfile(dif$gl_revfdb,dif$gl_revrss,fab);
$XABFHC_INIT(xab=xabfhc,
		nxt=0);
fab[fab$l_xab] = xabfhc;
!
! Set the master file nam block as the related file
!
dif$gl_revnam[nam$l_rlf] = .dif$gl_masnam;
!
! See if there is a revision file specified. If not,
! then look for the next lower version of the master file
!
IF .fab[fab$b_fns] EQL 0
THEN BEGIN
    LOCAL
	verdesc : desc_decl,
	file_length,
	verlength,
	version,
	namrss : BBLOCK[nam$c_maxrss],
	verptr : REF VECTOR[,BYTE];
    !
    ! Copy all of the master file spec except the file version field
    !
    verptr = CH$MOVE((.dif$gl_masnam[nam$l_type]-
		.dif$gl_masnam[nam$l_rsa]+.dif$gl_masnam[nam$b_type]+1),
		.dif$gl_masnam[nam$l_rsa],namrss);
    file_length = .verptr - namrss;
    verdesc[dsc$w_length] = nam$c_maxrss - .file_length;
    verdesc[dsc$a_pointer] = .verptr;
    !
    ! Convert master file version number to binary
    !
    lib$cvt_dtb(.dif$gl_masnam[nam$b_ver] - 1,
		.dif$gl_masnam[nam$l_ver] + 1,version);
    verlength = 0;
    !
    ! Now loop, looking for a lower version of the master file
    !
    WHILE (version = .version - 1) GTR 0
    DO BEGIN
        status = SYS$FAO($descriptor('!UL'),verlength,verdesc,.version);
        IF NOT .status
	    THEN SIGNAL_STOP(dif$_sysfaoerr,0,.status);
	fab[fab$b_fns] = .file_length + .verlength;
	fab[fab$l_fna] = namrss;
	IF (status = $OPEN(fab=fab))
	    THEN EXITLOOP
	    ELSE IF .status NEQ rms$_fnf
		THEN EXITLOOP;
	END;
    IF .version EQL 0				!Did we find one?
	THEN SIGNAL_STOP(dif$_nolowver,1,dif$gl_masdesc);
    END
ELSE status = $OPEN(fab=fab);

strstatus = str$copy_dx(dif$gl_revdesc,getfilename(fab));

IF NOT .strstatus
    THEN SIGNAL_STOP(dif$_strcpyerr,0,.strstatus);
IF NOT .status
    THEN SIGNAL_STOP(dif$_openin,1,dif$gl_revdesc,
			.status,.fab[fab$l_stv]);
!
! Save the IFI for $CLOSE
!
dif$gl_revfdb[fdb$w_ifi] = .fab[fab$w_ifi];
!
! Connect the record stream
!
status = $CONNECT(rab=dif$gl_revrab);
IF NOT .status
    THEN SIGNAL_STOP(dif$_openin,1,dif$gl_revdesc,
			.status,.dif$gl_revrab[rab$l_stv]);
!
! Allocate user buffer
!
allocate_ubf(xabfhc,dif$gl_revrab);

RETURN true
END;

GLOBAL ROUTINE dif$open_out =
BEGIN
!
! Open the output file
!
LOCAL
    status,
    strstatus,
    fab : $FAB_DECL;

!
! Initialize the FAB and NAM blocks
!
$FAB_INIT(fab=fab,
	fns=.dif$gl_outdesc[dsc$w_length],
	fna=.dif$gl_outdesc[dsc$a_pointer],
	fop=ofp,
	dnm='.DIF',
	rat=cr,
	fac=put,
	nam=dif$gl_outnam);

$NAM_INIT(nam=dif$gl_outnam,
	rlf=.dif$gl_masnam,
	esa=dif$gl_outrss,
	ess=nam$c_maxrss,
	rsa=dif$gl_outrss,
	rss=nam$c_maxrss);
!
! Attempt to open the output file
!
status = $CREATE(fab=fab);
strstatus = str$copy_dx(dif$gl_outdesc,getfilename(fab));

IF NOT .strstatus
    THEN SIGNAL_STOP(dif$_strcpyerr,0,.strstatus);
IF NOT .status
    THEN SIGNAL_STOP(dif$_openout,1,dif$gl_outdesc,
			.status,.fab[fab$l_stv]);

dif$gl_outifi = .fab[fab$w_ifi];

!
! Initialize the RAB and connect the record stream
!
$RAB_INIT(rab=dif$gl_outrab,
	rac=seq,
	fab=fab);

IF NOT (status = $CONNECT(rab=dif$gl_outrab))
    THEN SIGNAL_STOP(dif$_openout,1,dif$gl_outdesc,
		.status,.dif$gl_outrab[rab$l_stv]);

!
! If no /LINE_WIDTH specified, determine width of device
!
IF NOT .dif$gl_flags[dif$v_width]
    THEN find_list_width(fab);

RETURN true
END;

GLOBAL ROUTINE dif$close_in (fdb) =
BEGIN
!
! Close an input file
!
! Inputs:
!
!	fdb	address of associated FDB
!
MAP
    fdb : REF BBLOCK;

BIND
    inrab = .fdb[fdb$l_rabptr] : BBLOCK;

LOCAL
    status,
    fab : $FAB_DECL;

$FAB_INIT(fab=fab);
fab[fab$w_ifi] = .fdb[fdb$w_ifi];
!
! Disconnect the record stream
!
inrab[rab$l_fab] = fab;
status = $DISCONNECT(rab=inrab);
IF NOT .status
    THEN SIGNAL(dif$_closein,1,.fdb[fdb$l_fildesc],
		.status,.inrab[rab$l_stv]);

status = $CLOSE(fab=fab);
IF NOT .status
    THEN SIGNAL(dif$_closein,1,.fdb[fdb$l_fildesc],
		.status,.fab[fab$l_stv]);

RETURN true
END;

GLOBAL ROUTINE dif$close_out =
BEGIN
!
! Close the output file
!
LOCAL
    status,
    fab : $FAB_DECL;

$FAB_INIT(fab=fab);
fab[fab$w_ifi] = .dif$gl_outifi;
!
! Disconnect the record stream
!
status = $DISCONNECT(rab=dif$gl_outrab);
IF NOT .status
    THEN SIGNAL(dif$_closeout,1,dif$gl_outdesc,
		.status,.dif$gl_outrab[rab$l_stv]);

status = $CLOSE(fab=fab);
IF NOT .status
    THEN SIGNAL(dif$_closeout,1,dif$gl_outdesc,
		.status,.fab[fab$l_stv]);

RETURN true
END;

ROUTINE initfile(fdb,rss,fab) =
BEGIN
!
! Initialize data structures in preparation of
! opening a file
!
! Inputs:
!
!	fdb		Address of file's FDB
!	rss		Address of resultant name string (optional)
!	fab		Address of FAB
!
MAP
    fdb : REF BBLOCK,
    fab : REF BBLOCK;

BUILTIN
    NULLPARAMETER;

BIND
    rab = .fdb[fdb$l_rabptr] : BBLOCK,
    nam = .fdb[fdb$l_namptr] : BBLOCK,
    fildesc = .fdb[fdb$l_fildesc] : BBLOCK;

!
! Initialize the FAB
!
IF NOT NULLPARAMETER(2)
THEN BEGIN
    $FAB_INIT(fab=.fab,
	nam=nam,
	fns=.fildesc[dsc$w_length],
	fna=.fildesc[dsc$a_pointer],
	fac=get);

!
! Initialize the NAM block
!
    $NAM_INIT(nam=nam,
	esa=.rss,
	ess=nam$c_maxrss,
	rsa=.rss,
	rss=nam$c_maxrss);
    END;

!
! If no possibility of need to access input records by RFA,
! then optimize file I/O.
!
IF NOT .dif$gl_ignore [ign$v_exact]
   OR ((.dif$gl_ignore AND NOT (ign$m_exact OR ign$m_pretty)) EQL 0)
   THEN fab [fab$v_sqo] = true;

!
! Initialize the RAB
!
$RAB_INIT(rab=rab,
	fab=.fab,
	rop=loc);

RETURN true
END;

ROUTINE allocate_ubf(xab,rab) =
BEGIN
!
! Allocate a user buffer for records that cross block
! boundaries.
!
! Inputs:
!
!	xab		Address of FHC xab
!	rab		Address of RAB
!
MAP
    xab : REF BBLOCK,
    rab : REF BBLOCK;

LOCAL
    blocksize,
    status;

blocksize = MAXU(MAXU(.xab[xab$w_lrl],.xab[xab$w_mrz]),512);

IF NOT (status = lib$get_vm(blocksize,rab[rab$l_ubf]))
    THEN SIGNAL_STOP(.status);					!***

rab[rab$w_usz] = .blocksize;

RETURN true
END;

ROUTINE find_list_width (fab) =
BEGIN
!
! Determine the width of the listing line
! FAB is the fab of the open file, width returned in dif$gl_width
!
MAP
    fab : REF BBLOCK;

BIND
    namblk = .fab [fab$l_nam] : BBLOCK;		!NAM block

LOCAL
    status,
    devnamdesc : BBLOCK [dsc$c_s_bln],
    devnambuf : VECTOR [nam$c_maxrss, BYTE],
    devnambufdesc : BBLOCK [dsc$c_s_bln],
    devinfobuf : BBLOCK [dib$k_length],
    devinfodesc : BBLOCK [dsc$c_s_bln],
    devchan;

LITERAL
    ch_escape = %X '1B';			!ASCII <ESC>

dif$gl_width = dif$c_deflisiz;		!Assume default of 80

devnamdesc[dsc$a_pointer] = .namblk[nam$l_dev];
devnamdesc[dsc$w_length] = CH$FIND_CH(.namblk[nam$b_dev],
				.namblk[nam$l_dev], %ASCII ':')
				- .namblk[nam$l_dev];
devnambufdesc [dsc$w_length] = nam$c_maxrss;
devnambufdesc [dsc$a_pointer] = devnambuf;
$TRNLOG (LOGNAM = devnamdesc, RSLLEN = devnambufdesc, RSLBUF = devnambufdesc);
IF .devnambuf [0] EQL ch_escape				!Check for process permanent file
THEN BEGIN
    devnambufdesc [dsc$w_length] = .devnambufdesc [dsc$w_length] - 4;
    devnambufdesc [dsc$a_pointer] = .devnambufdesc [dsc$a_pointer] + 4;
    END;
!
! Assign the device and then do a $GETCHN to get the width
!
IF $ASSIGN (DEVNAM = devnambufdesc, CHAN = devchan)
THEN BEGIN
    devinfodesc [dsc$w_length] = dib$k_length;		!Set up descriptor for $GETCHN
    devinfodesc [dsc$a_pointer] = devinfobuf;
    IF $GETCHN (CHAN = .devchan, SCDBUF = devinfodesc)
	THEN dif$gl_width = MINU(.devinfobuf [dib$w_devbufsiz],dif$c_maxlisiz);
    $DASSGN (CHAN = .devchan);				!Deassign channel
    END;

RETURN true;
END;							!Of find_list_width
END						! Of module DIFGETCMD
ELUDOM
