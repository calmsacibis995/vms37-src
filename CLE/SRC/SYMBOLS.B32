MODULE symbols (IDENT = 'V03-000') =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  Command language editor
!
! ABSTRACT:
!
!	This facility is used to enhance the command language
!	and allow user-written commands to be available in the
!	language.
!
! ENVIRONMENT:
!
!	VAX/VMS operating system. unprivileged user mode,
!
! AUTHOR:  Tim Halvorsen, Feb 1980
!
! Modified by:
!
!	V002	DWT0006		David W. Thiel	10-Dec-1981
!		Fix find_record to fail if asked for (n+1)st record.
!
!	V001	TMH0001		Tim Halvorsen	28-Mar-1981
!		Clear upper word of descriptor passed to scan_symbols
!		action routine, in case it uses the entire longword as
!		the length rather than the lower word.
!--

!
! Include files
!

LIBRARY 'SYS$LIBRARY:STARLET';		! VAX/VMS common definitions

REQUIRE 'SRC$:CLEDEF';			! Utility definitions

REQUIRE 'LIB$:SYMDEF';			! Symbol table definitions

!
! Table of contents
!

FORWARD ROUTINE
    add_record,				! Add record to linked list
    find_record,			! Find record by number
    delete_list,			! Deallocate entire record list
    add_symbol,				! Add symbol to symbol table
    lookup_symbol,			! Lookup symbol in symbol table
    lookup_value,			! Lookup value in symbol table
    scan_symbols,			! Scan all symbols in symbol table
    delete_symbol,			! Delete symbol from symbol table
    delete_symbols,			! Delete entire symbol table
    allocate,				! Allocate dynamic storage
    deallocate;				! Deallocate dynamic storage

!
! Storage definitions
!

GLOBAL
    symbol_header:	VECTOR [64]	! List of listheads for symbol tables
			INITIAL(REP 64 OF (0));	! Set all listheads empty

!
! External routines
!

EXTERNAL ROUTINE
    lib$get_vm: ADDRESSING_MODE(GENERAL),	! Allocate dynamic storage
    lib$free_vm: ADDRESSING_MODE(GENERAL);	! Deallocate dynamic storage

GLOBAL ROUTINE add_record (listhead, address, length) =

!---
!
!	This routine adds a given data record to the
!	end of a given linked list.
!
! Inputs:
!
!	listhead = Address of listhead for list
!	address = Address of data record
!	length = Length of data record
!
! Outputs:
!
!	routine = status (already signaled)
!---

BEGIN

LOCAL
    new_entry:	REF VECTOR,		! Address of newly allocated entry
    entry:	REF VECTOR;		! Current entry address


RETURN_IF_ERROR 			! Allocate space; signal any error
	(allocate(.length+8,new_entry));

new_entry [1] = .length;		! Set length into entry
CH$MOVE(.length, .address, new_entry [2]);	! Copy data into entry

entry = .listhead;			! Start at listhead itself

WHILE .entry [0] NEQ 0			! While not end of list
DO
    entry = .entry [0];			! link to next in chain

entry [0] = .new_entry;			! set link of last entry to new one
new_entry [0] = 0;			! and set new "end of list"

RETURN true;

END;

GLOBAL ROUTINE find_record (listhead, number, retadr) =

!---
!
!	This routine locates a given record of data by
!	record number in any given list.  The address
!	returned is the address of the data itself.
!
! Inputs:
!
!	listhead = Address of listhead of list
!	number = Record number to find
!	retadr = Address of longword to receive data address
!
! Outputs:
!
!	routine = true if found, else false
!---

BEGIN

LOCAL
    entry:	REF VECTOR;		! Address of current entry

entry = ..listhead;			! Start at first entry

INCR i FROM 1 TO .number-1		! Skip first number-1 entries
DO
    BEGIN
    IF .entry EQL 0			! If premature end of list,
    THEN
	RETURN false;			! return entry not found
    entry = .entry [0];			! Skip to next entry in list
    END;

IF .entry EQL 0				! End of list
THEN
    RETURN false;

.retadr = entry [2];			! Return address of data itself
RETURN true;				! Return successful

END;

GLOBAL ROUTINE delete_list (listhead) =

!---
!
!	This routine deallocates all storage associated
!	with a given record list.
!
! Inputs:
!
!	listhead = Address of listhead for list
!
! Outputs:
!
!	None
!---

BEGIN

LOCAL
    entry:	REF VECTOR;		! Address of current entry

entry = ..listhead;			! Start at first entry

WHILE .entry NEQ 0			! For each entry in list,
DO
    BEGIN
    LOCAL next_entry;
    next_entry = .entry [0];		! Save pointer to next entry
    deallocate(.entry [1]+8, .entry);	! Deallocate memory for entry
    entry = .next_entry;		! Skip to next entry in list
    END;

.listhead = 0;				! Zero listhead

RETURN true;				! Success

END;

GLOBAL ROUTINE add_symbol (table, name_desc, value) =

!---
!
!	This routine adds a given symbol name and value to
!	the symbol table.  The symbol table list is sorted
!	by symbol name.
!
! Inputs:
!
!	table = Symbol table index
!	name_desc = Address of descriptor of symbol name
!	value = Value to be assigned to the symbol
!
! Outputs:
!
!	r0 = status (already signaled)
!---

BEGIN

MAP
    name_desc:	REF BBLOCK [DSC$K_S_BLN];! Address of name descriptor

LOCAL
    entry:	REF BBLOCK,		! Address of symbol table entry
    location:	REF BBLOCK;		! Address of closest symbol name

IF lookup_symbol (.table, .name_desc, location)	! If already in symbl table,
THEN
    BEGIN
    SIGNAL(emsg(dupsym), 1, .name_desc);! signal user with bad symbol
    RETURN false;			! return unsuccessful
    END;


RETURN_IF_ERROR					! Allocate a symbol entry
	(allocate(sym$c_fixedlen+.name_desc [dsc$w_length],entry));

entry [sym$l_value] = .value;			! Set value of symbol
entry [sym$b_symlen]				! Set length of symbol
	= .name_desc [dsc$w_length];

CH$MOVE	(.name_desc [dsc$w_length],		! Copy symbol
	.name_desc [dsc$a_pointer],
	entry [sym$t_symbol]);

entry [sym$l_link]				! Link into symbol table
	= .location [sym$l_link];		! in sorted order
location [sym$l_link] = .entry;

RETURN true;

END;

GLOBAL ROUTINE lookup_symbol (table, name_desc, value) =

!---
!
!	This routine looks up a given symbol in the symbol
!	table and returns the value associated with it.
!	If the symbol is not found, then the address of the
!	last entry preceeding the symbol in collation
!	sequence is returned instead.
!
! Inputs:
!
!	table = Symbol table index (1-n)
!	name_desc = Descriptor of desired symbol name
!	value = Address of longword to receive value if found
!
! Outputs:
!
!	value = Value of symbol if found
!	value = Address of previous entry if not found
!	r0 = status
!---

BEGIN

MAP
    name_desc:	REF BBLOCK [DSC$K_S_BLN];! Address of descriptor

LOCAL
    ptr:	REF BBLOCK;		! Pointer into list

ptr = symbol_header [.table] - $BYTEOFFSET(sym$l_link);	! Start at listhead
.value = .ptr;

WHILE (ptr = .ptr [sym$l_link]) NEQ 0	! Until end of list
DO
     CASE CH$COMPARE(.ptr [sym$b_symlen], ptr [sym$t_symbol],
		.name_desc [dsc$w_length], .name_desc [dsc$a_pointer])
     FROM -1 TO 1 OF SET
     [-1]:  .value = .ptr;		! Table symbol < user symbol
     [0]:  BEGIN			! Table symbol = user symbol
	   .value = .ptr [sym$l_value];	!   Return value of symbol
	   RETURN true;			!   and exit successful
	   END;
     [1]: RETURN false;			! Table symbol > user symbol
     TES;

RETURN false;				! return symbol not found

END;

GLOBAL ROUTINE lookup_value (table, value, retdesc) =

!---
!
!	This routine locates the first occurrence of a symbol
!	containing the specified value and returns a descriptor
!	of the symbol associated with the value.
!
! Inputs:
!
!	table = Symbol table index (1-n)
!	value = Value to be looked up
!	retdesc = Address of quadword to receive descriptor
!
! Outputs:
!
!	routine = status
!---

BEGIN

MAP
    retdesc:	REF VECTOR;		! Address of descriptor

LOCAL
    ptr:	REF BBLOCK;		! Pointer into list

ptr = .symbol_header [.table];		! Start at first entry

WHILE .ptr NEQ 0			! Until end of list
DO
    BEGIN
    IF .ptr [sym$l_value] EQL .value	! If value matches,
    THEN
	BEGIN				! Return descriptor of name
	retdesc [0] = .ptr [sym$b_symlen];
	retdesc [1] = ptr [sym$t_symbol];
	RETURN true;			! and exit successful
	END;
    ptr = .ptr [sym$l_link];		! If no match, go to next entry
    END;

RETURN false;				! return symbol not found

END;

GLOBAL ROUTINE scan_symbols (table, action_routine) =

!---
!
!	This routine calls a specified action routine for
!	each symbol in the specified symbol table.
!
! Inputs:
!
!	table = Symbol table index (1-n)
!	action_routine = Address of action routine to call
!			with the following argument list:
!				1) Address of descriptor of symbol name
!				2) Value associated with symbol
!
! Outputs:
!
!	The status of the last action routine executed is returned.
!---

BEGIN

LOCAL
    status,				! Catch-all status return bucket
    desc:	VECTOR [2],		! Descriptor of symbol name
    ptr:	REF BBLOCK;		! Address of current symbol entry

ptr = .symbol_header [.table];		! Start at first entry

WHILE .ptr NEQ 0			! Until end of list,
DO
    BEGIN				! Setup descriptor of name
    desc [0] = .ptr [sym$b_symlen];
    desc [1] = ptr [sym$t_symbol];
    status = (.action_routine)(desc, .ptr [sym$l_value]); ! Call action routine
    IF NOT .status THEN EXITLOOP;	! If failed, exit unsuccessful
    ptr = .ptr [sym$l_link];		! Skip to next in chain
    END;

RETURN .status;				! return successful

END;

GLOBAL ROUTINE delete_symbol (table, name_desc) =

!---
!
!	This routine deletes a given symbol from the symbol
!	table.
!
! Inputs:
!
!	table = Symbol table index (1-n)
!	name_desc = Descriptor of symbol name to be deleted
!
! Outputs:
!
!	r0 = true if deleted, false if not found
!---

BEGIN

MAP
    name_desc:	REF BBLOCK [DSC$K_S_BLN];! Address of descriptor

LOCAL
    prev:	REF BBLOCK,		! Pointer to previous symbol
    ptr:	REF BBLOCK;		! Pointer into list

ptr = symbol_header [.table] - $BYTEOFFSET(sym$l_link);	! Start at listhead
prev = .ptr;				!  Ditto

WHILE (ptr = .ptr [sym$l_link]) NEQ 0	! Until end of list
DO
     CASE CH$COMPARE(.ptr [sym$b_symlen], ptr [sym$t_symbol],
		.name_desc [dsc$w_length], .name_desc [dsc$a_pointer])
     FROM -1 TO 1 OF SET
     [-1]:  prev = .ptr;		! Table symbol < user symbol
     [0]:  BEGIN			! Table symbol = user symbol
	   prev [sym$l_link] = .ptr [sym$l_link];	! Delink it
	   RETURN deallocate (sym$c_fixedlen+.ptr[sym$b_symlen], .ptr);	! free VM
	   END;
     [1]: RETURN false;			! Table symbol > user symbol
     TES;


RETURN false;				! return symbol not found

END;

GLOBAL ROUTINE delete_symbols (table) =

!---
!
!	This routine deallocates all symbols in a specified
!	symbol table.
!
! Inputs:
!
!	table = Symbol table index (1-n)
!
! Outputs:
!
!	None
!---

BEGIN

LOCAL
    ptr:	REF BBLOCK;		! Address of current entry

ptr = .symbol_header [.table];		! Start at first entry

WHILE .ptr NEQ 0			! Until end of list,
DO
    BEGIN
    LOCAL next_entry;
    next_entry = .ptr [sym$l_link];	! Save pointer to next entry
    deallocate(sym$c_fixedlen+.ptr [sym$b_symlen], .ptr);	! Deallocate entry
    ptr = .next_entry;			! Point to next entry in list
    END;

symbol_header [.table] = 0;		! Zero listhead

RETURN true;

END;

GLOBAL ROUTINE allocate (bytes, address) =

!---
!
!	Allocate dynamic storage and return the address.
!	If an error occurs, the error is signaled.
!
! Inputs:
!
!	bytes = Number of bytes to allocate
!	address = Longword to receive address of storage
!
! Outputs:
!
!	address = Address of storage
!---

BEGIN

LOCAL
    status;

status = lib$get_vm(bytes,.address);

IF NOT .status			! if unsuccessful,
THEN
    SIGNAL(.status);		! then signal the error

RETURN .status;			! return with status;

END;

GLOBAL ROUTINE deallocate (bytes, address) =

!---
!
!	Deallocate dynamic storage.
!	If an error occurs, the error is signaled.
!
! Inputs:
!
!	bytes = Number of bytes to deallocate
!	address = Address of storage to deallocate
!
! Outputs:
!
!	None
!---

BEGIN

LOCAL
    status;

status = lib$free_vm(bytes,address);

IF NOT .status			! if unsuccessful,
THEN
    SIGNAL(.status);		! then signal the error

RETURN .status;			! return with status;

END;

END
ELUDOM
