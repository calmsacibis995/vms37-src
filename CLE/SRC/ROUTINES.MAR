	.title	ROUTINES	Lookup DCL internal routine names
	.ident	'V03-000'
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
; Abstract:
;
;	This module contains a list of internal dcl routine names
;	and a routine to lookup the routine name and return the
;	internal case index for that routine.  It is coded in MACRO
;	in order to use the "INTIMAGES" macro.
;
; Author: Tim Halvorsen, Sept 1980
;
; MODIFIED BY:
;
;	V002	DWT0019		David W. Thiel		7-Jan-1982
;		Use MCRINTIMG for MCR routine names and addresses.
;
;	V001	DWT0005		David W. Thiel		09-Dec-1981
;		Support separate tables for MCR and DCL.
;
;---

	.sbttl	Definitions

;
; Define data structures
;

	vecdef				; define vec offsets


	.sbttl	Internal routine table
;
; Define internal image name
;
 
	.macro	intimage image,?l1
	.save
	.psect	$plit$,nowrt,noexe,word
l1:	.ascic	/image/
	.restore
	.long	l1			; address of keyword string
	.long	$intimage$		; associated value
$intimage$=$intimage$+1
	.endm	intimage
 
;
; Generate internal routine table
;

	.psect	$code$,nowrt,exe,word

	.enabl	lsb
dclinttbl:
	.long	<90$-10$>/4		; number of entries in table
10$:	intimages			; generate table entries (8 bytes each)
90$:
	.dsabl	lsb

	.enabl	lsb
mcrinttbl:
	.long	<90$-10$>/4		; number of entries in table
10$:	mcrintimg			; generate table entries (8 bytes each)
90$:
	.dsabl	lsb

inttbls:
	assume	vec_c_dcl,equal,<<.-inttbls>/4>
	.address	dclinttbl	; DCL table pointer
	assume	vec_c_mcr,equal,<<.-inttbls>/4>
	.address	mcrinttbl	; MCR table pointer


	.sbttl	Verb type code table
;
; Define verb type code table
;
	.macro	$defini
	.endm
	.macro	$defend
	.endm
	.macro	$equ symbol,value
	s = %locate(<VERB_>,symbol)+5		; locate name portion of symbol
	l = %length(symbol)-s
	.iif gt l-4, l = 4			; l = max(l,4)
	.ascii	/%extract(s,l,symbol)/		; store first 4 chars of verb
	.blkb	4-l				; pad to longword
	.long	value				; associated verb type code
	.endm	$equ

dclverbtypes:
	$cliverbdef			; generate table entries (8 bytes each)
	.long	0			; end of table

	.mdelete $equ,$defini,$defend

verbtypes:
	assume	vec_c_dcl,equal,<<.-verbtypes>/4>
	.address	dclverbtypes	; DCL table pointer
	assume	vec_c_mcr,equal,<<.-verbtypes>/4>
	.address	dclverbtypes	; ** temp MCR table pointer


	.sbttl	LOOKUP_ROUTINE, lookup routine name
;---
;
;	Lookup a routine name in the table of internal DCL routines
;	and return the associated internal case index.
;
; Inputs:
;
;	4(ap) = Address of descriptor of routine name
;
; Outputs:
;
;	r0 = Case index if found, else 0
;---

	.entry	lookup_routine,0

	pushal	-(sp)			; Address of longword to receive value
	movzbl	w^clitype,r0		; Index in table of tables
	pushl	inttbls[r0]		; Address of keyword table
	pushl	4(ap)			; Address of search string descriptor
	calls	#3,g^lib$lookup_key	; Lookup routine name in table
	blbc	r0,80$			; Branch if not found
	popl	r0			; Return value in R0
	ret
80$:	clrl	r0			; Return failure
	ret

	.sbttl	LOOKUP_VERB_TYPE, lookup verb type code
;---
;
;	Lookup a verb in the table of verb type codes
;	defined by the macro $CLIVERBDEF and return
;	the associated verb type code.
;
; Inputs:
;
;	4(ap) = Address of descriptor of verb name
;
; Outputs:
;
;	r0 = Verb type code if found, else 0
;---

	.entry	lookup_verb_type,^m<r2,r3,r4,r5,r6,r7,r8>

	movzbl	w^clitype,r0		; Index in table of tables
	movl	verbtypes[r0],r8	; Address of keyword table
	movq	@4(ap),r6		; Get descriptor of verb name
	movzwl	r6,r6			; Expand length to longword
	cmpl	r6,#4			; More than 4 characters?
	bleq	10$			; Branch if not
	movl	#4,r6			; Only compare first 4 characters
10$:	tstl	(r8)			; End of table?
	beql	80$			; If so, return with failure
	cmpc3	r6,(r7),(r8)		; Is verb listed in table?
	beql	90$			; Branch if so
	addl	#8,r8			; Skip to next entry
	brb	10$			; and continue searching
90$:	movl	4(r8),r0		; Return with assoc. verb type code
	ret
80$:	clrl	r0			; Return failure
	ret

	.end
