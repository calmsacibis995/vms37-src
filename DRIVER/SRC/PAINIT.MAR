	.TITLE	PAINIT
	.IDENT	'V03-002'

;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1981, 1982                                                *
;*  BY DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.			    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED  *
;*  ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE  *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER  *
;*  COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY  *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY  *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE  *
;*  AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT  *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE OR  RELIABILITY  OF  ITS  *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;*									    *
;****************************************************************************
;
;++
;
; FACILITY:
;
;	VAX/VMS EXECUTIVE, I/O DRIVERS
;
; ABSTRACT: CI PORT INITIALIZATION
;
; AUTHOR:  N. KRONENBERG,  MAY 1981
;
; MODIFIED BY:
;
;	V03-002	NPK2019		N. Kronenberg		6-Apr-1982
;		Fixed bug in setting of device type in UCB.
;		Remove unit init JSB to INI$BRK.
;
;	V03-001	NPK2016		N. Kronenberg		18-Mar-1982
;		Fixed .TITLE
;
;--

	.SBTTL	DEFINITIONS

;
; Set PSECT to driver code:
;

	.PSECT	$$$115_DRIVER,LONG


;
; System definitions (LIB.MLB):
;

	$CDTDEF				; Connection Descriptor Table format
	$CIBDDEF			; Define buffer desc format
	$CIBDTDEF			; Buffer Descriptor Table format
	$CRBDEF				; Channel Request Block format
	$CXBDEF				; Complex Buffer format
	$DCDEF				; Device type codes
	$DYNDEF				; Structure type codes
	$PDTDEF				; Port Descriptor Table format
	$PRDEF				; Internal processor register definitions
	$SCSDEF				; SCS message formats
	$UCBDEF				; Unit Control Block definitions
	$VECDEF				; CRB vector dispatch block offsets

;
; PADRIVER definitions (PALIB.MLB):
;

	$PAPDTDEF			; Port -specific PDT extension
	$PAREGDEF			; CI port register definitions
	$PPDDEF				; PPD message layer


	.SBTTL	TABLES OF INITIALIZATION DATA

;+
; The following table gives word offsets for fork process SCS calls.
; Offsets are relative to the address of the controller initialization
; routine, PA$CTLINIT.
;-

;
; Macro to generate the table and ASSUME statements about PDT format:
;

	.MACRO	SCS_OFFSET_TAB	ENTRY_LIST

	 $$$ENTRYNUM=0				; No entries in table yet
	 .IRP	ENTRY ENTRY_LIST		; For each entry in the list...
	 .WORD	<FPC$'ENTRY'-PA$CTLINIT>	;  insert offset from ctl init,
	 .IF	NE $$$ENTRYNUM			;  and for entries after the 1st
	 ASSUME	$$$PREV+4 EQ PDT$L_'ENTRY'	;  specify assumed PDT adjacency
	 .ENDC					;
	 $$$PREV=PDT$L_'ENTRY'			; Set previous entry as this entry
	 $$$ENTRYNUM=$$$ENTRYNUM+1		; Step entry count
	 .ENDR					;

	 ASSUME	$$$PREV+4 EQ PDT$C_SCSEND	; Final PDT assumption
	 .WORD	0				; Offset table terminator
	
	.ENDM	SCS_OFFSET_TAB			;

;
; Table itself:
;

PA$SCSOFFSET::

	SCS_OFFSET_TAB	<-			; Invoke macro to define offsets
		ACCEPT,-		
		ALLOCDG,-
		ALLOCMSG,-
		CONNECT,-
		DEALLOCDG,-
		DEALLOMSG,-
		DEALRGMSG,-
		DCONNECT,-
		MAP,-
		MAPBYPASS,-
		MAPIRP,-
		MAPIRPBYP,-
		QUEUEDG,-
		QUEUEMDGS,-
		RCHMSGBUF,-
		RCLMSGBUF,-
		REJECT,-
		REQDATA,-
		SENDDATA,-
		SENDDG,-
		SENDMSG,-
		SNDCNTMSG,-
		UNMAP,-
		READCOUNT,-
		RLSCOUNT,-
		MRESET,-
		MSTART,-
		MAINTFCN,-
		>

;+
; The following table is a list of word offsets from the CI configuration
; register of CI register addresses to be kept in the PDT for quick access.
;-

;
; Macro to generate table:
;

	.MACRO	REG_OFFSET_TAB	REG_LIST

	 $$$REGNUM=0				; # table entries =0
	 .IRP	REG REG_LIST			; For each register in list,
	 .WORD	<PA_'REG'-PA_CNF>		;  enter offset from config reg
	 .IF	NE $$$REGNUM			;  and for entries after first,
	 ASSUME	$$$PREV+4 EQ PDT$L_'REG'	;  verify PDT adjacency
	 .ENDC					;
	 
	 $$$PREV =PDT$L_'REG'			; Set this PDT entry to previous
	 $$$REGNUM=$$$REGNUM+1			; Step entry counter
	 .ENDR					;

	 ASSUME	$$$PREV+4 EQ PDT$C_PAREGEND	; Verify final PDT offset

	 .WORD	-1				; Table terminator
	
	.ENDM	REG_OFFSET_TAB

;
; Table itself:
;

PA$REGOFFSET::

	REG_OFFSET_TAB	<-			; Invoke macro to define offsets
		CNF,-				;  Configuration register
		PMC,-				;  Port maint control reg
		PS,-				;  Port status register  
		CQ0,-				;  Command queue 0 control
		CQ1,-				;  Command queue 1 control
		PSR,-				;  Port status release register
		DFQ,-				;  Datagram free queue control
		MFQ,-				;  Message free queue control
		MTC,-				;  Maint timer control
		PFAR,-				;  Fail address register
		PPR,-				;  Port parameter register
		>



;
; Polynomial table used to calculate CRC for loopback datagram:
;

CRC_TABLE:

	.LONG	0
	.LONG	^X1DB71064
	.LONG 	^X3B6E20C8
	.LONG	^X26D930AC
	.LONG	^X76DC4190
	.LONG	^X6B6B51F4
	.LONG	^X4DB26158
	.LONG	^X5005713C
	.LONG	^XEDB88320
	.LONG	^XF00F9344
	.LONG	^XD6D6A3E8
	.LONG	^XCB61B38C
	.LONG	^X9B64C2B0
	.LONG	^X86D3D2D4
	.LONG	^XA00AE278
	.LONG	^XBDBDF21C


	.SBTTL	UNIT_INIT

;+
; TBS
;
; Inputs:
;	
;	R3			-Address of PA configuration reg
;	R4			-Same as R3
;	R5			-Addr of UCB
;
; Outputs:
;
;	R0-R3			-Destroyed
;	Other registers		-Preserved
;-

	.ENABL	LSB

PA$UNITINIT::

	MOVB	#DT$_CI780,UCB$B_DEVTYPE(R5)  ; Set the device type to CI780
	TSTW	UCB$W_UNIT(R5)		; Is this unit 0?
	BNEQ	10$			; Branch if not
	BSBB	INIT_CTLR		; Else init controller too

10$:	RSB				; Done with unit init


	.DSABL	LSB

	.SBTTL	CONTROLLER INIT

;+
; The controller initialization entry as seen by the system, PA$CTLINIT,
; is a noop since initialization can't begin without the unit 0 UCB.
; Actual controller init is called from unit 0 unit initialization with
; the same inputs as unit init.
;
; Inputs:
;
;	R3			-Addr of PA configuration register
;	R4			-Same as R3
;	R5			-Addr of UCB for unit 0
;
; Outputs:
;
;	All registers	 	-Preserved
;-

PA$CTLINIT::				; Controller init called by system

	RSB				; Return

;
; Controller initialization called from unit 0 init.
;

	.ENABL	LSB

INIT_CTLR::

	TSTL	UCB$L_PDT(R5)		; Built structures yet?
	BEQL	BUILD_STRUC		; Branch if not
	BICW	#UCB$M_ONLINE,-		; Set unit offline to show
		UCB$W_STS(R5)		;  port init being done
	MOVL	UCB$L_PDT(R5),R4	; Get PDT addr
	BISW	#PDT$M_PUP,-		; Set power up on this
		PDT$W_LPORT_STS(R4)	;  port 
	BBSS	#PDT$V_PWF_CLNUP,-	; Branch if SYSAP notification
		PDT$W_LPORT_STS(R4),10$	;  underway; else set pwf recov
					;  in progress,
	MOVZWL	#SS$_POWERFAIL,R1	;  set aux status to give SYSAP's,
	BSBW	ERR$PWF_RECOV		;  call recovery startup

10$:	RSB				; Return

	.DSABL	LSB

BUILD_STRUC:

	.SBTTL	BUILD PDT

;
; PDT adjacency assumptions:
;

ASSUME	PDT$W_SIZE	EQ 8
ASSUME 	PDT$W_SIZE+2	EQ PDT$B_TYPE
ASSUME	PDT$B_TYPE+1	EQ PDT$B_SUBTYP
ASSUME	PDT$B_SUBTYP+1	EQ PDT$C_SCSBASE

	.ENABL	LSB

BUILD_PDT:

	MOVZWL	#<PDT$C_PALENGTH+512>,R1  ; Enough for a PDT + 1 pg
	BSBW	HIPL_ALLPOOL		; Allocate pool at high ipl
	BLBS	R0,10$			; Branch if success
					;***Log error
	RSB				; Return with unit offline

10$:	MOVL	R2,R0			; Save address
	MOVAL	PDT$C_PQB+512(R2),R2	; Round PQB offset up to 
	BICW	#511,R2			;  next page boundary
	SUBL	#PDT$C_PQB,R2		;  and compute corresponding PDT base
	MOVL	R2,UCB$L_PDT(R5)	; Save PDT addr
	MOVL	UCB$L_CRB(R5),R3	; Get CRB addr
	MOVL	R2,CRB$L_AUXSTRUC(R3)	;  and save PDT addr in CRB
	SUBW3	R0,R2,PDT$W_SIZE(R0)	; Fix up size of unused memory
	MOVW	#DYN$C_SCS,PDT$B_TYPE(R0) ;  and type
	CMPW	PDT$W_SIZE(R0),#24	; Too small for COM$DRVDEALMEM?
	BLEQU	15$			; Branch if so
	JSB	G^COM$DRVDEALMEM	; Return unused to pool

15$:	CLRQ	(R2)+			; Init PDT, unused longwds,
	SUBW3	PDT$W_SIZE(R0),R1,(R2)+	;  PDT size,
	MOVW	#<DYN$C_SCS_PDT@8 + DYN$C_SCS>,(R2)+  ;  structure subtype and type
	MOVL	CRB$L_INTD+VEC$L_INITIAL(R3),R3  ; Get addr of controller
						 ;  init routine
	MOVAW	PA$SCSOFFSET,R1		; Get addr of table of offsets
					;  to SCS entries in PADRIVER

20$:	CVTWL	(R1)+,R0		; Get offset to next SCS routine
	BEQL	30$			; Branch if no more
	ADDL3	R0,R3,(R2)+		; Add offset from controller init
					;  to addr of controller init
					;  and store in PDT
	BRB	20$			; Get next offset

30$:	MOVQ	R4,-(SP)		; Save R4, R5
	MOVC5	#0,#0,#0,-		; Zero PDT from here to
		#<PDT$L_DQELOGOUT - PDT$C_SCSEND>,-
		(R2)			;  to logout area
	MOVQ	(SP)+,R4		; Restore  R4, R5
	MOVL	UCB$L_PDT(R5),R2	; Get base of PDT again
	MOVAL	PDT$L_WAITQFL(R2),-	; Init the pool wait
		PDT$L_WAITQFL(R2)	;  queue
	MOVAL	PDT$L_WAITQFL(R2),-	;  to empty
		PDT$L_WAITQBL(R2)	;
	MOVL	#SCS$K_APPL_BASE,-	; Set size of message header, 
		PDT$L_MSGHDRSZ(R2)	;  PPD + SCS header
	MOVL	#SCS$K_APPL_BASE,-	; Save size of datagram header,
		PDT$L_DGHDRSZ(R2)	;  PPD + SCS portion only
	MOVL	#CXB$C_HEADER,-		; Set size of total dg header
		PDT$L_DGOVRHD(R2)	;  including PPD/SCS, and net
	MOVL	#<CXB$C_HEADER - SCS$C_APPL_BASE>,-
		PDT$L_DGNETHD(R2)	; Save size of network header only
	MOVAL	PDT$C_PAREGBASE(R2),R2	; Step to addr of PA device
					;  registers accessed via PDT
	MOVAW	PA$REGOFFSET,R1		; Get addr of table of offsets 
					;  to device registers we want
	
40$:	CVTWL	(R1)+,R0		; Get next offset
	BLSS	50$			; Branch if end of offset table
	ADDL3	R0,R4,(R2)+		; Add offset to config reg addr,
					;  and store in PDT
	BRB	40$			; Get next offset

50$:	MOVL	UCB$L_PDT(R5),R2	; Get base of PDT again
	MOVL	R5,PDT$L_UCB0(R2)	; Save in PDT UCB 0 addr
	MOVAL	PDT$Q_FORMPB(R2),-	; Init formative
		PDT$Q_FORMPB(R2)	;  PB list
	MOVAL	PDT$Q_FORMPB(R2),-	;  to empty
		PDT$Q_FORMPB+4(R2)	;
	MOVB	#<PDT$M_CUR_LBS!PDT$M_PRV_LBS>,-  ; Set current/previous
		PDT$B_P0_LBSTS(R2)		  ;  loopback status to
	MOVB	#<PDT$M_CUR_LBS!PDT$M_PRV_LBS>,-  ;  good, 
		PDT$B_P1_LBSTS(R2)		  ;  both paths
	MOVAL	PDT$Q_DFREEQ(R2),-	; Set up addresses
		PDT$L_DFQHDR(R2)	;  of datagram and
	MOVAL	PDT$Q_MFREEQ(R2),-	;  message free queue
		PDT$L_MFQHDR(R2)	;  headers for port
	MOVZWL	G^SCS$GW_MAXDG,-	; Set up dg and msg
		PDT$W_DQELEN(R2)	;  queue entry 
	ADDW	#CXB$C_HEADER,-		;  sizes in PQB
		PDT$W_DQELEN(R2)	;  for port
	MOVZWL	G^SCS$GW_MAXMSG,-	;  Queue entry size =
		PDT$W_MQELEN(R2)	;  SYSGEN param +
	ADDW	#SCS$C_APPL_BASE,-	;  PPD +SCS header
		PDT$W_MQELEN(R2)	;  size
	MOVAL	PDT$C_PQB(R2),-		; Set VA of PQB within
		PDT$L_VPQB(R2)		;  PDT
	MFPR	#PR$_SBR,-		; Set PA of base of SPT
		PDT$L_SPTBASE(R2)	;  
	MFPR	#PR$_SLR,-		;  and SPT length
		PDT$L_SPTLEN(R2)	;
	MOVL	G^MMG$GL_GPTBASE,-	; Set VA of base of global
		PDT$L_GPTBASE(R2)	;  page table
	MOVZWL	G^SGN$GL_MAXGPGCT,-	;  and GPT length
		PDT$L_GPTLEN(R2)	;

	.DSABL	LSB

	.SBTTL	BUILD TEMPLATE LOOPBACK DG

;+
; Allocate and initialize the template loopback datagram except for local
; port number and CRC.  These are recalculated each time power is recovered.
;-

	.ENABL	LSB

BUILD_TLB:

	MOVZWL	#PPD$C_LB_LENGTH,R1	; Get total template size
	BSBW	HIPL_ALLPOOL		;  and allocate from pool
	BLBS	R0,10$			; Branch if got it
					;***Else log error
	BRW	CLEANUP_PDT		; Go clean up allocated buffers

10$:	MOVW	R1,PPD$W_SIZE(R2)	; Save structure size and
	MOVW	#DYN$C_CIDG,-		;  type
		PPD$B_TYPE(R2)		;
	CLRB	PPD$B_STATUS(R2)	; Init template status = 0,
	MOVZBW	#PPD$C_SNDLB,-		;  opcode = SNDLB,
		PPD$B_OPC(R2)		;
	MOVW	#PPD$C_LBDAT_LEN,-	;  LB length to # of
		PPD$W_LENGTH(R2)	;  bytes of data
	CLRL	R1			; Generate LB data pattern

20$:	MOVB	R1,PPD$B_LBDATA(R2)[R1]	;  of bytes = 0,1,2,...
	AOBLEQ	#PPD$C_LBDAT_LEN,R1,20$	;  ... LBDAT_LEN-1
	MOVL	UCB$L_PDT(R5),R0	; Hook template to
	MOVL	R2,PDT$L_LBDG(R0)	;  PDT


	.SBTTL	BUILD	BDT

;+
; The buffer descriptor table is shared among CI ports.  If it does
; not already exist, allocate and initialize it.
;-

ASSUME	CIBDT$L_WAITFL+4  EQ 	CIBDT$L_WAITBL
ASSUME	CIBDT$L_WAITBL+4  EQ	CIBDT$W_SIZE
ASSUME	CIBDT$W_SIZE+2    EQ	CIBDT$B_TYPE
ASSUME  CIBDT$B_TYPE+1	  EQ	CIBDT$B_SUBTYP
ASSUME	CIBDT$B_SUBTYP+1  EQ	CIBDT$L_FREEBD
ASSUME	CIBDT$L_FREEBD+4  EQ	CIBDT$L_MAXIDX
ASSUME	CIBDT$L_MAXIDX+8  EQ	CIBDT$C_BDLIST

	.ENABL	LSB

BUILD_BDT:

	TSTL	G^SCS$GL_BDT		; Got buffer descriptors already?
	BNEQ	INIT_CRB		; Branch if so
	MOVZWL	G^SCS$GW_BDTCNT,R1	; Get # of buffer descriptors
	ASHL	#4,R1,R1		; Get # bytes of descriptors
	ADDL	#CIBDT$C_LENGTH,R1	;  + BDT header length
	BSBW	HIPL_ALLPOOL		; Allocate pool at high IPL
	BLBS	R0,10$			; Branch if success
					;***Else log error
	BRW	CLEANUP_PDT		; Go clean up allocated pool

10$:	MOVL	UCB$L_PDT(R5),R3	; Get PDT addr
	PUSHL	R2			; Save addr of BDT
	MOVL	R2,(R2)+		; Set BD wait queue
	MOVAL	-4(R2),(R2)+		;  listhead emptyp
	MOVW	R1,(R2)+		; Set structure size,
	MOVW	#<DYN$C_CI_BDT@8 + DYN$C_CI>,(R2)+  ;  type, and subtype
	CLRL	(R2)+			; Clear ptr for later
	MOVZWL	G^SCS$GW_BDTCNT,(R2)	; Set # buffer descriptors
	MOVL	(R2),PDT$W_BDTLEN(R3)	; Save # BD's in PDT
	DECL	(R2)+			; Max index = # BD's-1
	CLRL	(R2)+			; Clear reserved longwd
	MOVL	R2,PDT$L_VBDT(R3)	; Save BDT addr in PQB
	MOVL	R2,G^SCS$GL_BDT		; Save addr in system wide data base
	POPL	R1			; Get BDT address again
	MOVL	G^SCS$GL_CDL,R0		; Get addr of connx descriptor list
	MOVL	(R0),R0			;  and addr of first CDT.
	MOVZWL	CDT$L_LCONID+2(R0),R0	; Get that CDT's sequence number
	XORB2	#^X5A,R0		; Make it unique
	PUSHL	PDT$W_BDTLEN(R3)	; Get # buffer descriptors
	BEQL	30$			; Branch if zero

;
; Loop to initialize buffer descriptors links all BD's onto the
; free list rooted at CIBDT$L_FREEBD, marks each BD invalid, and
; initializes the BD sequence number
;

20$:	CLRW	CIBD$W_FLAGS(R2)	; Clear valid bit
	MOVW	R0,CIBD$W_KEY(R2)	  ; Init sequence #
	MOVL	R2,CIBD$L_LINK(R1)	; Link this BD to previous
	MOVL	R2,R1			; Set this BD to previous
	MOVAL	CIBD$C_LENGTH(R2),R2	; Step to next BD
	SOBGTR	(SP),20$		; Branch if more BD's to do

30$:	CLRL	CIBD$L_LINK(R1)		; Zero last fwd link
	TSTL	(SP)+			; Clear stack

	.DSABL	LSB

	.SBTTL	INIT POLLER TIMER AND TRACE FUNCTION

;+
; Initialize timer to wake driver up and insert CRB on timer queue.
;-

	.ENABL	LSB

INIT_CRB:

	MOVL	UCB$L_CRB(R5),R3	; Get CRB addr
	BSBW	CNF$CALCINTDUE		; Set to wake up basic timer 
					;  interval from now and
	JSB	G^IOC$THREADCRB		; put CRB on timer queue

	.IF	DF PA$DEBUG		; Conditional init of debug facility
	BSBW	TRC$INIT		; Init trace buffer
	.ENDC				;

	.DSABL	LSB

	.SBTTL	INI$PORT, INITIALIZE PORT 

;+
; Load the port microcode, init port hardware, complete initialization
; of the template loopback datagram (in case port number changed while
; powered down.)  Allocate and queue free datagrams and messages to
; port for future receives.  If all this is successful, set unit 0 online,
; clear power fail in progress and set port powered up.
;-

ASSUME	PPD$C_LBDAT_LEN+7  LE	255

	.ENABL	LSB

INI$PORT::

	MOVL	PA_CNF(R4),PA_CNF(R4)	; Clear any SBI errors
	MOVL	#PA_PMC_M_MIN,PA_PMC(R4) ; Do maint init to move port
					;  state from dead to uninited
	TSTB	UCB$B_ERTCNT(R5)	; Check retries left
	BGEQ	RETRY_OK		; Branch if not all used
	BRW	CLEANUP_PDT		; Else go clean up data structures

RETRY_OK:

	CLRL	R2			; Zero control store addr
	MOVL	G^SCS$GL_MCADR,R3	; Get base of microcode image
	BNEQ	LOAD_UCODE		; Branch if got microcode image in pool
					;***Else log error
	BRW	CLEANUP_PDT		; Go clean up allocated pool

LOAD_UCODE:

	MOVL	R2,PA_MADR(R4)		; Give CS addr to CI
	MOVL	(R3)+,PA_MDATR(R4)	; Write 4 bytes of ucode
	BISL3	#^X1000,R2,-		; Step CS addr of h.o. 
		PA_MADR(R4)		;  word of data
	MOVZWL	(R3)+,PA_MDATR(R4)	; Write h.o. 2 bytes
	AOBLSS	#PA_C_WCSSIZ,R2,-	; Loop till entire image
		LOAD_UCODE		;  is loaded
	CLRL	R2			; Zero control store addr in preparation
					;  for reading back ucode
	MOVL	G^SCS$GL_MCADR,R3	; Get addr of ucode in pool
	BRB	START_UCODE		;***TEMPORARY

CHECK_UCODE:

	MOVL	R2,PA_MADR(R4)		; Set next control store addr
	MOVL	(R3)+,R0		; Get next 4 bytes wcs should have
	CMPL	PA_MDATR(R4),R0		; WCS ok?
	BNEQ	BAD_UCODE		; Branch if not
	BISL3	#^X1000,R2,PA_MADR(R4)	; Set to read h.o. 2 bytes of uword
	MOVZWL	(R3)+,R0		; Get next 2 bytes WCS should have
	CMPW	PA_MDATR(R4),R0		; Next 2 bytes ok?
	BEQL	5$			; Branch if so

BAD_UCODE:

	BRW	WCS_ERROR		; Go handle error

5$:	AOBLSS	#PA_C_WCSSIZ,R2,-	; Branch if more to check
		CHECK_UCODE		;

	
START_UCODE:

	BISL	#PA_PMC_M_PSA,-		; Set programmable start addr
		PA_PMC(R4)		;  bit
	MOVL	#PA_C_UCODEST,-		; Set microcode start addr
		PA_MADR(R4)		;
	MOVL	#PA_PIC_M_PIC,-		; Set port initialize -- move
		PA_PIC(R4)		;  port state from uninit to disabled
	TIMEWAIT #<10000>,#PA_PMC_M_MIF,-  ; Wait for port init done 
		 PA_PMC(R4),L		  ;  or 100 msec
	BLBS	R0,10$			; Branch if successful
	BRW	INIT_PORT_FAIL		; ELse exit initialization

10$:	CMPL	PA_PS(R4),-		; Check that port init is done
		#PA_PS_M_PIC		;  and no errors set
	BEQL	20$			; Branch if sucess
	BRW	INIT_PORT_FAIL		; Else go to failure

20$:	MOVL	UCB$L_PDT(R5),R0	; Retreive PDT addr
	EXTZV	#9,#20,-		; Extract virtual page #
		PDT$L_VPQB(R0),R0	;  of PQB
	MOVL	G^MMG$GL_SPTBASE,R1	; Get base of SPT
	MOVL	(R1)[R0],R0		; Get PTE for PQB addr
	EXTZV	#0,#20,R0,R0		; Get PFN of PQB addr
	ASHL	#9,R0,PA_PQBBR(R4)	; Convert to phys addr and
					;  store in the PQB base reg
	BISL	#PA_PMC_M_MTD,-		;***Temporary:  disable sanity
		PA_PMC(R4)		;  and maint timers
	BISL	#PA_PMC_M_MIE,-		; Enable interrupts
		PA_PMC(R4)		;
	MOVL	#PA_PEC_M_PEC,-		; Finally,...
		PA_PEC(R4)		;  enable the port
	MOVL	#PA_PSR_M_PSC,-		; Release the port
		PA_PSR(R4)		;  status register to port

INIT_LBDG_CRC:

	MOVL	UCB$L_PDT(R5),R4	; Get PDT address
	MOVL	PDT$L_LBDG(R4),R3	; Get addr of LB template
	MOVB	@PDT$L_PPR(R4),-	; Save local port number
		PPD$B_PORT(R3)		;  in LB dg template
	MOVZWL	#<PPD$C_LCB_DATA + PPD$C_LBDAT_LEN>,R1
	BSBW	HIPL_ALLPOOL		; ALlocate temporary buffer for
					;  setting up data to calc CRC
	BLBS	R0,30$			; Branch if got it
	BRW	INIT_LBDG_FAIL		; Else go handle error

30$:	BISL3	#DYN$C_SCS@16,R1,-	; Set structure type
		PPD$W_SIZE(R2)		;  and size in temporary buffer
					; Set up data to CRC:
	CLRB	PPD$W_LCB_LEN7(R2)	;  H.o. lb data length + 7
	ADDB3	PPD$W_LENGTH(R3),#7,-	;  L.o. lb data length + 7
		PPD$W_LCB_LEN7+1(R2)	;  
	MOVB	PPD$B_PORT(R3),R0	;
	MOVB	R0,PPD$B_LCB_PORT(R2)	;  own port number,
	MCOMB	R0,PPD$B_LCB_NPORT(R2)	;  NOT(own port),
	MOVB	R0,PPD$B_LCB_LPORT(R2)	;  local port,
	MOVB	#PPD$C_SNDLB,-		;  SNDLB opcode,
		PPD$B_LCB_OPC(R2)	;
	CLRB	PPD$B_LCB_0(R2)		;  and 0 (packing fmt = 0)
	PUSHR	#^M<R2,R3,R4,R5>	; Save registers
	MOVC	#PPD$C_LBDAT_LEN,-	; Copy LB data from
		PPD$B_LBDATA(R3),-	;  template to temporary
		PPD$C_LCB_DATA(R2)	;  buffer
	MOVQ	(SP),R2			; Get R2 and R3 again
	MOVZBL	PPD$W_LCB_LEN7+1(R2),R0	; Get # bytes to crc
	CRC	CRC_TABLE,#-1,-		; Compute CRC from temporary
		R0,PPD$W_LCB_LEN7(R2)	;  buffer
	POPR	#^M<R2,R3,R4,R5>	; Retreive registers
	MCOML	R0,PPD$L_LBCRC(R3)	; Put CRC complement into template
	MOVL	R2,R0			; Copy temporary buffer addr
	JSB	G^COM$DRVDEALMEM	;  and return it to pool

INIT_DFREEQ:

	MOVL	UCB$L_PDT(R5),R4	; Get PDT address
	MOVZWL	G^SCS$GW_PAPPDDG,R0	; Get # dg's for start handshakes
	ADDL	#PA_C_DCACHESZ,R0	;  plus enough to fill cache
	BSBW	SCS$ALL_FRDGS		; Allocate and put on free queue
	BLBC	R0,INIT_FREEQ_FAIL	; Branch if insufficient memory
	MOVZWL	#PA_C_MCACHESZ,R0	; Get # msgs to fill cache
	BSBW	SCS$ALL_FRMSGS		; Allocate and put on free queue
	BLBC	R0,INIT_FREEQ_FAIL	; Branch if insufficient memory
	MOVB	#15,PDT$B_MAX_PORT(R4)	; Assume small capacity cluster
	TSTL	@PDT$L_PPR(R4)		; Is it 16 ports max?
	BGEQ	40$			; Branch if so
	MOVB	#223,PDT$B_MAX_PORT(R4)	; Else up count to 224 ports

40$:	MOVB	#PPD$C_PSP0,-		; Set poller to scan all ports
		PDT$B_REQIDPS(R4)	;  on path A
	MOVL	UCB$L_CRB(R5),R3	; Retreive CRB address
	BSBW	CNF$CALCINTDUE		; Calculate due time for
					;  next driver wakeup
	PUSHR	#^M<R4,R5>		; Save registers
	MOVC5	#0,#0,#-1,-		; Init port logout area
		#<PDT$C_PALENGTH - PDT$L_DQELOGOUT>,-
		PDT$L_DQELOGOUT(R4)
	POPR	#^M<R4,R5>		; Restore registers
	BISW	#UCB$M_ONLINE,-		; Set unit online
		UCB$W_STS(R5)		;
	BICW	#PDT$M_PWF_CLNUP,-	; Clear power up init
		PDT$W_LPORT_STS(R4)	;  in progress
	BISW	#PDT$M_PUP,-		; Set power up on port
		PDT$W_LPORT_STS(R4)	;
	RSB				; Return from unit init

	.DSABL	LSB

	.SBTTL	PORT INITIALIZATION ERRORS

;+
; Come to WCS_ERROR if loaded microcode could not be read back
; correctly.
;
; Inputs:
;
;	PA_MADR(R4)		-micro addr that failed
;	PA_MDATR(R4)		-Bad WCS contents
;	R0			-Copy of good data from pool
;-

	.ENABL	LSB

WCS_ERROR:

					;***Log error
	BRB	RETRY_INIT		; Go clean up allocated pool

;+
; Port initialization (transition from uninitialized to disabled) did
; not complete correctly.
;-

INIT_PORT_FAIL:

					;***Log error
	BRB	RETRY_INIT		; Go clean up allocated pool

;+
; Unable to allocate temporary buffer in which to calculate the
; loopback datagram CRC.
;-

INIT_LBDG_FAIL:

					;***Log error
	MOVL	#PA_PMC_M_MIN,-		; Do maint init on port to
		@PDT$L_PMC(R4)		;  make sure it's quiet
	BRB	CLEANUP_PDT		; Go clean up allocated pool


;+
; Unable to allocate enough datagrams or messages to get started:
;-

INIT_FREEQ_FAIL:

					;***Log error
	MOVL	#PA_PMC_M_MIN,-		; Do maint init on port to
		@PDT$L_PMC(R4)		;  make sure it's quiet
	BRB	CLEANUP_PDT		; Go clean up allocated pool


;+
; Deallocate template loopback datagram (if any) and PDT (if any).
; Return to caller with device offline, and power fail/power up
; unchanged.
;
; Inputs:
;
;	R5			-UCB 0 addr
;-

CLEANUP_PDT:

	MOVL	UCB$L_PDT(R5),R2	; Get PDT addr
	BEQL	50$			; Branch if none allocated
	MOVL	PDT$L_LBDG(R2),R0	; Get loopback dg addr
	BEQL	40$			; Branch if none allocated
	JSB	G^COM$DRVDEALMEM	; Else deallocate it

40$:	MOVL	R2,R0			; Copy PDT addr to R0
	JSB	G^COM$DRVDEALMEM	; Deallocate PDT
	CLRL	UCB$L_PDT(R5)		; Show PDT as gone
	MOVL	UCB$L_CRB(R5),R0	; Get CRB addr
	CLRL	CRB$L_AUXSTRUC(R0)	;  and show no PDT here either

50$:	RSB				; Return


;+
; RETRY_INIT is branched to on WCS load error or port init
; error.  RETRY_INIT checks for retries left.  If none, it branches
; to CLEANUP_PDT.  If retries are left, it branches to INI$PORT
; after decrementing the retry count.
;
; Inputs:
;
;	R4			-Cofiguration register addr
;	R5			-UCB 0 addr
;-

RETRY_INIT:

	MOVL	#PA_PMC_M_MIN,-		; Do maint init on port
		PA_PMC(R4)		;  to make sure it's quiet
	DECB	UCB$B_ERTCNT(R5)	; Decr # retries left
	BLSS	CLEANUP_PDT		; Branch if none
	BRW	INI$PORT		; Else do another init

	.DSABL	LSB

	.SBTTL	HIPL_ALLPOOL

;+
; This subroutine allocates nonpaged pool from IPL greater than
; fork IPL.  It is assumed taht the current IPL was reached by
; reasing IPL from a level less than, or equal to, IPL$SYNCH.
; Otherwise this code path might interrupt a pool allocation
; already in progress and corrupt pool.  In particular, this
; routine may be called as a result of a SYSGEN controller/unit
; init, INITADP controller/unit init, but not on power fail
; recovery.
;
; Inputs:
;
;	R1			-# bytes of pool to allocate
;	
; Outputs:
;
;	R0			-0/1 for fail/success
;	R1			-# bytes actually allocated
;	R2			-Addr of buffer allocated
;	Other registers		-Preserved
;-

	.ENABL	LSB

HIPL_ALLPOOL:

	MOVQ	R3,-(SP)		; Save caller's registers
	MOVAL	G^EXE$GL_NONPAGED,R4	; Get addr of pool header area
	PUSHL	(R4)			; Save IPL from header
	MFPR	#PR$_IPL,(R4)		; Put current IPL in header
	JSB	G^EXE$ALONONPAGED	; Allocate from nonpaged pool
	POPL	(R4)			; Restore old IPL in header
	MOVQ	(SP)+,R3		; Restore caller's registers
	RSB				; Return

	.DSABL	LSB




	.END
