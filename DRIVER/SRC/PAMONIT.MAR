	.TITLE	PAMONIT
	.IDENT	'V03-002'

;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1981, 1982                                                *
;*  BY DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASS.			    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND  COPIED  *
;*  ONLY  IN  ACCORDANCE  WITH  THE  TERMS  OF  SUCH  LICENSE AND WITH THE  *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE.  THIS SOFTWARE OR  ANY  OTHER  *
;*  COPIES  THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY  *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE  IS  HEREBY  *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS SUBJECT TO CHANGE  WITHOUT  NOTICE  *
;*  AND  SHOULD  NOT  BE  CONSTRUED  AS  A COMMITMENT BY DIGITAL EQUIPMENT  *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE OR  RELIABILITY  OF  ITS  *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;*									    *
;****************************************************************************
;
;++
;
; FACILITY:
;
;	VAX/VMS EXECUTIVE, I/O DRIVERS
;
; ABSTRACT:
;
; AUTHOR:  N. KRONENBERG,  MAY 1981
;
; MODIFIED BY:
;
;	V03-002	NPK2016		N. Kronenberg		18-Mar-1982
;		Fixed .TITLE
;
;--

	.PSECT	$$$115_DRIVER,LONG


	$DYNDEF
	$PDTDEF
	$PAPDTDEF
	$PAREGDEF
	$PPDDEF







	.SBTTL	INTERLOCKED QUEUE MONITOR ROUTINES
	.SBTTL	QUEUE MONITOR CONTROL FLAGS

;+
; MON$FLAGS is a bit mask of control flags.
;-

MON$FLAGS::

	.LONG	1			; Default is queue checks disabled

;
; Flag definitions:
;

MON$M_QCHK = 1
MON$V_QCHK = 0

	.SBTTL	-	CHKQ MACRO AND CONTROL
	.SBTTL	-	FLAGS LONGWORD

;+
; Macro CHKQ generates inline code for checking a relative queue,
;
; Inputs:
;
;	R3			-Addr of Q header or entry
;
; Outputs:
;
;	R0-R2,R5			-Destroyed
;-

	.MACRO	CHKQ,?LOOP,?ERR,?OK,?LOCK,?LOWERIPL,?HANG,?TYPOK,?NOTLRP,?OLDDG

	 MOVL	R3,R2			; Get copy of listhd addr
	 CLRL	R1			; Zero entry counter
	 DSBINT				; Disable interrupts

LOCK:
	 BBSSI	#0,(R3),LOCK		; Lock queue before reading

LOOP:
	 MOVL	R2,R5			; Save addr of this entry

	 MOVL	(R2),R0			; Get offset to next entry
	 BICL	#1,R0			; Clear interlock bit
	 MOVAB	(R2)[R0],R2		; Get addr of next entry
	 MOVL	4(R2),R0		; Get back link from this entry
	 MOVAB	(R2)[R0],R0		; Compute prev entry addr
	 CMPL	R0,R5			; Computed addr = saved?
	 BNEQ	ERR			; Branch if not
	 CMPL	R2,R3			; Back at start?
	 BEQL	OK			; Branch if so
	 CMPB	PPD$B_TYPE(R2),#DYN$C_CIDG  ; CI dg?
	 BEQL	TYPOK			    ; Branch if so
	 CMPB	PPD$B_TYPE(R2),#DYN$C_CIMSG ; CI msg?
	 BNEQ	ERR			    ; Branch if not
	 
TYPOK:	 CMPW	PPD$W_SIZE(R2),#^X260	; Is this a LRP
	 BLSSU	NOTLRP			; Branch if not
	 CMPL	R2,G^IOC$GL_LRPSPLIT	; Entry addr in range of
	 BLSSU	NOTLRP			;  of LRP list?
	 CMPL	R2,G^MMG$GL_LRPNEXT	; 
	 BGEQU	NOTLRP			; Branch if not
	 BICL3	#^C<^XFF>,R2,R0		; Isolate l.o. 8 bits of addr
	 TSTL	PDT$L_DGNETHD(R4)	; Any network overhead?
	 BEQL	OLDDG			; Branch if no
	 CMPB	R0,#^X18		; Else addr must end in
	 BEQL	NOTLRP			;
	 CMPB	R0,#^X98		;  18  or 98 hex
	 BNEQ	ERR			;
	 BRB	NOTLRP			; Branch means ok

OLDDG:

	 BITL	#^X7F,R2		; Else check that LRP addr is right
	 BNEQ	ERR			;  multiple

NOTLRP:
	 AOBLSS	#32,R1,LOOP		; Else check max count and continue
	 
ERR:
	 MOVL	PDT$L_CNF(R4),R0	; Get addr of port config reg
;HANG:	 BRB	HANG			; Hang
	 NOP
	 NOP
	 BUGCHECK  BADQHDR		; Notify debugger

OK:					; Check succeeded
	 BBCCI	#0,(R3),LOWERIPL		; Unlock queue for port

LOWERIPL:
	 ENBINT				; Enable interrupts again


	.ENDM	CHKQ


	.SHOW




	.SBTTL	-	MON$CHKQ,	CHECK ALL Q'S ON THE PORT

;+
; Checks all port queues (designed to be fast rather than short).
;
; Inputs:
;
;	R4			-Addr of PDT
;
; Outputs:
;
;	R0, condition codes	-Destroyed
;-

	.ENABL	LSB

MON$CHKQ::
	BBS	#MON$V_QCHK,-		; Branch if checking queues
		MON$FLAGS,CHKQ_ALT	;  is enabled
	BRW	20$			; Else skip whole chedk

CHKQ_ALT:				; Entry for MON$CHKQ_POST
	PUSHL	R5			; Save registers...
	PUSHL	R3			;
	PUSHL	R2			;
	PUSHL	R1			;
	MOVAL	PDT$Q_COMQL(R4),R3	; Get addr of 1st command Q
	CHKQ				; Verify
	ADDL	#8,R3			; Step to 2nd command Q
	CHKQ				; Verify
	ADDL	#24,R3			; Step to response Q
	CHKQ				; Verify
	MOVL	PDT$L_DFQHDR(R4),R3	; Get addr of dg free Q
	CHKQ				; Verify
	MOVL	PDT$L_MFQHDR(R4),R3	; Get addr of msg free Q
	CHKQ				; Verify
	POPL	R1			; Restore registers
	POPL	R2			;
	POPL	R3			;
	POPL	R5			;

20$:	RSB				; Return

	.DSABL	LSB

	.SBTTL	-	MON$CHKQ_POST,	CHECK ALL QUEUES AFTER
	.SBTTL	-			A QUEUE OPERATION

;+
; Checks all queues saving condition codes.  Otherwise, it is the
; same as the subroutine MON$CHKQ.
;-

	.ENABL	LSB

MON$CHKQ_POST::
	
	BBC	#MON$V_QCHK,-		; Branch if queue checking
		MON$FLAGS,20$		;  is disabled
	MOVPSL	-(SP)			; Save PSL
	PUSHAL	20$			; Save continuation addr
	BSBW	CHKQ_ALT		; Verify all queues
	REI				; Restore condition codes, continue PC

20$:	RSB				; Return to caller

	.DSABL	LSB





	.SBTTL	TRACE FACILITY
	.SBTTL	-	TRACE DEFINITIONS

;
; Misc data:
;

TRC$ENABL::					; Low bit set/clear for
						;  enable/disable
	.LONG	0				; Default is disabled

TRC$BUFFER::					; Addr of trace buffer

	.LONG	0				;

;
; The trace buffer is allocated from pool.  It consists of a header
; and a series of fixed length entries.  The occupied entries are 
; maintained on a doubly linked list, youngest is at the head of the
; list and the oldest is on the tail.
;

	$DEFINI	TRC,GLOBAL

	$DEF	TRC$L_NEXTENT	.BLKL	1	; Addr of next entry to use

	$DEF	TRC$Q_QHDR	.BLKQ	1	; Queue header of entries

	$DEF	TRC$L_SPR	.BLKL	1	; Spare longwd

	$DEF	TRC$C_FIRSTENT			; Addr of first entry in table

	$EQU	TRC$C_ENTSIZ	<96>		; 96 bytes per entry

	$EQU	TRC$C_ENTCNT	<64>		; Room for 64 entries

	$EQU	TRC$C_BUFSIZ	<TRC$C_ENTCNT*TRC$C_ENTSIZ+TRC$C_FIRSTENT>

						; Total buffer size

	$DEFEND	TRC

;
; Trace entries consist of a common header.  The structure type field
; contains a type code indicative of the type of data in the entry.
; If the entry type offsets are read into sda, sda should be able to
; format the trace buffer for us.
;

	$DEFINI	TRCE,GLOBAL

	$DEF	TRCE$L_FL	.BLKL	1	; Fwd link
	
	$DEF	TRCE$L_BL	.BLKL	1	; Back link

	$DEF	TRCE$W_SIZE	.BLKW	1	; Size of an entry

	$DEF	TRCE$B_TYPE	.BLKB	1	; Entry type code (struct type)

	$DEF	TRCE$B_SPR	.BLKB	1	; Spare byte

	$DEF	TRCE$L_TIME	.BLKL	1	; Time entry was filled

	$DEF	TRCE$L_PDT	.BLKL	1	; Caller's PDT addr (R4)

	$DEF	TRCE$C_BASE			; Start of type specific data

;
; Entry type specific formats:
;
; Message (or datagram) trace:
;

.=TRCE$C_BASE

	$EQU	DYN$C_TRCMSG	<^X81>

	$DEF	TRCE$L_PC	.BLKL	1	; Caller's PC

	$DEF	TRCE$L_PSL	.BLKL	1	; Caller's PSL

	$DEF	TRCE$L_MSGADDR	.BLKL	1	; Addr of message being traced

	$DEF	TRCE$C_MSGDATA			; Start of message data

;
; PC trace:
;

.=TRCE$C_BASE

	$EQU	DYN$C_TRCPC	<^X82>

.=.+4						; Caller's PC

.=.+4						; Caller's PSL

	$DEF	TRCE$L_R0	.BLKL	1	; Caller's R0-R5
	$DEF	TRCE$L_R1	.BLKL	1
	$DEF	TRCE$L_R2	.BLKL	1
	$DEF	TRCE$L_R3	.BLKL	1
	$DEF	TRCE$L_R4	.BLKL	1
	$DEF	TRCE$L_R5	.BLKL	1

	$DEFEND	TRCE

	.SBTTL	-	TRACE INITIALIZATION

;+
; TRC$INIT allocates the trace buffer from pool, formats the header,
; and saves its address.
;
; Inputs:
;
;	IPL			-Fork IPL or greater
;	
; Outputs:
;
;	TRC$BUFFER		-0 if insufficient memory, else
;				 addr of start of buffer
;	TRC$ENABL		-Low bit clear if insufficient memory; else
;				 unchanged
;	All registers		-Preserved
;-

	.ENABL	LSB

TRC$INIT::

	TSTL	TRC$BUFFER		; Is there already a buffer (in case
					;  there are multiple ports)
	BNEQ	20$			; Branch if so
	PUSHR	#^M<R0,R1,R2,R3,R4,R5>	; Save registers
	MOVZWL	#TRC$C_BUFSIZ+16,R1	; Get total buffer size
	MOVAL	G^EXE$GL_NONPAGED,R4	; Fiddle with allocate
	PUSHL	(R4)			;  IPL to allow
	MFPR	#PR$_IPL,(R4)		;  greater than fork IPL
	JSB	G^EXE$ALONONPAGED	;  and allocate pool
	POPL	(R4)			; Restore allocate IPL
	BLBS	R0,5$			; Branch if got pool
	BICL	#1,TRC$ENABL		; Else disable trace function
	BRB	10$			;  and return
	
5$:	CLRQ	(R2)+			; Clear out header
	ADDL3	#<DYN$C_BUFIO@16>,R1,(R2)+ ; Set size and type
	CLRL	(R2)+			; Clear out junk
	MOVL	R2,TRC$BUFFER		; Save buffer address
	MOVAL	TRC$C_FIRSTENT(R2),(R2)+ ; Set addr of 1st entry
	MOVL	R2,(R2)			; Set filled entry
	MOVL	R2,4(R2)		;  queue to empty

10$:	POPR	#^M<R0,R1,R2,R3,R4,R5>	; Restore registers

20$:	RSB				; Return 

	.DSABL	LSB

	.SBTTL	TRC$LOGMSG,	Log a Message or Datagram

;+
; This routine allocates an entry in the trace buffer and fills it with
; the PC of the caller, addr of the message, and first few longwords of
; the message.
;
; Inputs:
;
;	R2			-Addr of message being traced
;	R4			-PDT addr
;
; Outputs:
;
;	All registers, PSL	-Preserved
;-

	.ENABL	LSB

TRC$LOGMSG::

	BBC	#0,TRC$ENABL,10$	; Branch if trace disabled
	MOVPSL	-(SP)			; Save PSL
	PUSHAL	10$			;  and PC of RSB from this routine
	DSBINT				; Raise IPL
	PUSHR	#^M<R0,R1,R2,R3,R4,R5>	; Save registers
	MOVZBL	#DYN$C_TRCMSG,R0	; Get entry type code
	BSBW	TRC$ALLOC_ENT		; Allocate and init next entry
	MOVL	<9*4>(SP),TRCE$L_PC(R1) ; Copy caller's PC
	MOVL	<8*4>(SP),TRCE$L_PSL(R1) ;  and PSL
	MOVL	R2,TRCE$L_MSGADDR(R1)	; Copy message addr to trace entry
	MOVC3	#<TRC$C_ENTSIZ-TRCE$C_MSGDATA>,-
		(R2),TRCE$C_MSGDATA(R1)	; Copy as much message as possible
	POPR	#^M<R0,R1,R2,R3,R4,R5>	; Restore registers
	ENBINT				; Lower IPL
	REI				; Restore PC, PSL

10$:	RSB				; Return

	.DSABL	LSB

	.SBTTL	TRC$LOGPC,	Log PC and Registers

;+
; This routine logs the caller's PC, PSL, and R0-R5.
;
; Inputs:
;
;	R4			-PDT addr
;
; Outputs:
;
;	All registers, PSL	-Preserved
;-

	.ENABL	LSB

TRC$LOGPC::

	BBC	#0,TRC$ENABL,10$	; Branch if trace disabled
	MOVPSL	-(SP)			; Save caller's PSL
	PUSHAL	10$			; Save addr of RSB
	DSBINT				; Raise IPL to 31
	PUSHR	#^M<R0,R1,R2,R3,R4,R5>	; Save registers
	MOVZBL	#DYN$C_TRCPC,R0		; Get trace entry type code
	BSBW	TRC$ALLOC_ENT		; Allocate and init next entry
	MOVL	<9*4>(SP),TRCE$L_PC(R1) ; Copy caller's PC
	MOVL	<8*4>(SP),TRCE$L_PSL(R1) ;  and caller's PSL
	MOVC3	#<6*4>,(SP),-		; Copy registers from stack to
		TRCE$L_R0(R1)		;  to trace entry
	POPR	#^M<R0,R1,R2,R3,R4,R5>	; Restore registers
	ENBINT				; Lower IPL
	REI				; Restore PC, PSL

10$:	RSB				; Return to caller

	.DSABL	LSB

	.SBTTL	TRC$ALLOC_ENT,	ALLOCATE TRACE ENTRY

;+
; This routine allocates the next trace entry.  If the new entry is currently
; the oldest entry on the queue (if it's on the tail), it is removed from the 
; queue and inserted on the head of the queue, making it the youngest entry.
; The standard information is set in the entry:
;
;	size = TRC$C_ENTSIZ
;	type = specified by caller
;	time = read from interval count register (usec accuracy)
;	PDT  = R4
;
; Inputs:
;
;	R0			-Structure/trace entry type code
;
; Outputs:
;
;	R1			-Addr of trace entry
;	R5			-Destroyed
;	Other registers		-Preserved
;-

	.ENABL	LSB

TRC$ALLOC_ENT::

	MOVL	TRC$BUFFER,R5		; Get addr of trace buffer
	MOVL	(R5),R1			; Get addr of next entry
	CMPL	R1,TRC$Q_QHDR+4(R5)	; Is it on the tail?
	BNEQ	10$			; Branch if not
	REMQUE	@TRC$Q_QHDR+4(R5),R1	; Remove the entry from the tail

10$:	INSQUE	(R1),TRC$Q_QHDR(R5)	; Put entry on head of queue
	MOVZWL	#TRC$C_ENTSIZ,-		; Set structure size
		TRCE$W_SIZE(R1)		;
	MOVB	R0,TRCE$B_TYPE(R1)	;  and type
	MOVL	G^EXE$GQ_SYSTIME,-	; Time stamp entry
		TRCE$L_TIME(R1)		;
	MFPR	#PR$_ICR,TRCE$L_PDT(R1)	;***TEMP
;	MOVL	R4,TRCE$L_PDT(R1)	; Save PDT addr
	MOVAL	TRC$C_ENTSIZ(R1),(R5)	; Step to addr of next entry
	ADDL3	#TRC$C_BUFSIZ,R5,R0	; Compute end of buffer
	CMPL	(R5),R0			; Next entry at end of past it?
	BLSS	20$			; Branch if not
	MOVAL	TRC$C_FIRSTENT(R5),(R5)	; Else cycle to top of buffer
					;  for next entry.

20$:	RSB				; Return

	.DSABL	LSB
	.END
