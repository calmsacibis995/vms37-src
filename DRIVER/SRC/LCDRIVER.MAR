	.TITLE	LCDRIVER - LINE PRINTER DRIVER FOR LP-730
	.IDENT	'V03-001'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
; ABSTRACT:
;
;	LINE PRINTER DRIVER FOR LP-730 CONTROLLER
;
; AUTHOR:
;
;	E. A. DRAYTON 4-NOV-80
;
; MODIFIED BY:
;
;	V03-001	EAD0065		Elliott A. Drayton		29-Mar-1982
;		Added code to reset the powerfail indicator. Removed
;		local macro which restored map registers and placed
;		code inline.
;
;--
	.PAGE
	.SBTTL	Declarations

;
; MACRO LIBRARY CALLS
;
 
	$CRBDEF				; CRB offsets
	$DDBDEF				; DDB offsets
	$DPTDEF				; DPT offsets
	$EMBDEF				; Error msg buffer
	$IDBDEF				; IDB offsets
	$IODEF				; I/O function codes
	$IRPDEF				; IRP offsets
	$JIBDEF				; JIB offsets
	$LPDEF				; Line printer characteristics
	$MSGDEF				; System message types
	$SSDEF				; System status codes
	$UCBDEF				; UCB offsets
	$VECDEF				; VEC offsets
 
;
; LOCAL SYMBOLS
;
; ARGUMENT LIST OFFSET DEFINITIONS
;
 
P1=0					; First function dependent parameter
P2=4					; Second function dependent parameter
P3=8					; Third function dependent parameter
P4=12					; Fourth function dependend parameter
P5=16					; Fifth function dependent parameter
P6=20					; Sixth function dependent parameter
 
;
; CHARACTER CODE DEFINITIONS
;
 
DMF_CSR		= -20			; DMF CSR offset from LP CSR
RESET		= 2			; Value for LP master reset
M_STDCSR	= <2 * 256> + 4		; Set indirect reg. addr. to 2 and format on 

C_DATACNT	= 3			; No. of indirect reg. to init. for a writep function
C_INDREG4	= 4 * 256		; Address of indirect reg. number 5
C_REGCNT	= 6			; Number of indirect reg. to init. for writev & writel
C_TIM		= 15			; Initial value for LPTIMEOUT

LC_MAPREG	= 4			; Number of map reg. to alloc
LP_HRCNT	= 1920			; Timeout value for one hour
LP_NUM_REGS	= 9			; Total number of controller indirect reg.
PAGSIZ		= 512			; Memory page size(bytes)
LINPAG		= 66			; Default lines per page for printer paper

LP_ERRBUF_LEN	= <LP_NUM_REGS*4>+<<EMB$L_DV_REGSAV>+4> ; Size of errorlog buffer

	.PAGE 
;
; Local macros
;

	.MACRO	LOADUBAA
		JSB	G^IOC$LOADUBAMAPA
	.ENDM	LOADUBAA

	.PAGE
;
; DEVICE REGISTER OFFSET DEFINITIONS
;
 
	$DEFINI	LP
 
$DEF	LP_CSR		.BLKW	1	;CONTROL STATUS REGISTER
	$VIELD	LP_CSR,0,<-
		<PRIENA,,M>,-		; Print enable
		<RESET,,M>,-		; Line printer controller reset
		<FMTCTL,,M>,-		; Format enable
		<UNUSED,2,M>,-		; Unused bits
		<MAINT,,M>,-		; Maintance mode enable
		<IE,,M>,-		; Interrupt enable
		<RDY,,M>,-		; Line printer ready ( done )
		<INDADD,3,M>,-		; Indirect register address
		<UNUSED,,M>,-		; Unused bit
		<CVERF,,M>,-		; Cable connected verification
		<DAVERR,,M>,-		; Direct access vertical forms unit error
		<LPERR,,M>,-		; Line printer error
		<NEX,,M>,-		; Non existant memory error
	>

	$VIELD	LP_CSR2,8,<-
		<AUTOCR,,M>,-		; Automatic CR insert enable
		<MECHFF,,M>,-		; Mech. form feed to multiple line feed enable
		<NPC,,M>,-		; Nonprintable character enable
		<RESERVED,,M>,-		; RESERVED
		<WRAP,,M>,-		; Enable wrapping of lines > 132 characters in length
		<UNUSED,2,M>,-		; Unused bits
		<CASE,,M>,-		; Upper and lower case enable
	>

$DEF	LP_DBR		.BLKW	1	;DATA BUFFER REGISTER
 
	$DEFEND	LP

LP_CSR$M_ERR=<LP_CSR$M_NEX!LP_CSR$M_CVERF>;*** LP_CSR$M_DAVERR!***
	.PAGE
;
; DEFINE DEVICE DEPENDENT UNIT CONTROL BLOCK OFFSETS
;
 
	$DEFINI	UCB
 
.=UCB$L_DPC+4
$DEF	UCB$W_CSR	.BLKW	1	; Image of line printer CSR
$DEF	UCB$W_BYTXFR	.BLKW	1	; Bytes transfered by controller
$DEF	UCB$W_LINCNT	.BLKW	1	; Number of lines printed 
$DEF	UCB$W_PREFIX	.BLKW	1	; Prefix char and count(indirect reg. 2 )
$DEF	UCB$W_SUFFIX	.BLKW	1	; Suffix char and count(indirect reg. 3 )
$DEF	UCB$W_BUFADR	.BLKW	1	; Lower addr bits of buff addr(indirect reg. 4 )
$DEF	UCB$W_BYTECNT	.BLKW	1	; DMA byte count (indirect reg. 5)
$DEF	UCB$B_HIBUFADR	.BLKB	1	; Upper addr bits of buff addr(indirect reg. 6)
$DEF	UCB$B_CSR2	.BLKB	1	; Control flags for LP attributes
$DEF	UCB$W_LINES	.BLKW	1	; Number of lines per page (indirect reg. 7)
$DEF	UCB$W_LPTIMEOUT	.BLKW	1	; Offline message timeout value
$DEF	UCB$W_LP_OFLCNT	.BLKW	1	; Offline time counter
$DEF	UCB$W_MAXBYT	.BLKW	1	; Number of map registers to alloc.
$DEF	UCB$L_REGSAVE	.BLKL	2	; Save R1 and R2 here
$DEF	UCB$L_NUMREG	.BLKL	1	; Save permanent map reg. info.

UCB$K_SIZE=. 

	$DEFEND	UCB
	.PAGE
	.SBTTL	Driver prologue table and driver dispatch table

;
; LOCAL DATA
;
; DRIVER PROLOGUE TABLE
;
 
	DPTAB	-			;DEFINE DRIVER PROLOGUE TABLE
		END=LP_END,-		; End of driver
		ADAPTER=UBA,-		; Adapter type
		UCBSIZE=UCB$K_SIZE,-	; UCB size
		NAME=LCDRIVER		; Driver name
	DPT_STORE INIT			; Control block init values
	DPT_STORE UCB,UCB$B_FIPL,B,8	; Fork IPL
	DPT_STORE UCB,UCB$L_DEVCHAR,L,-	;Device characteristics
		<DEV$M_REC-		; Record oriented
		!DEV$M_AVL-		; Available
		!DEV$M_CCL-		; Carriage control device
		!DEV$M_ODV-		; Output device
		!DEV$M_ELG-		; Error logging
		>
	DPT_STORE UCB,UCB$B_DEVCLASS,B,DC$_LP ; Device class
	DPT_STORE UCB,UCB$B_DEVTYPE,B,DT$_DMF32 ; Device type
	DPT_STORE UCB,UCB$W_DEVBUFSIZ,W,132 ; Default buffer size
	DPT_STORE UCB,UCB$L_DEVDEPEND,L,<64@24+LP$M_MECHFORM> ; Printer parameters
	DPT_STORE UCB,UCB$B_DIPL,B,20	; Device IPL
	DPT_STORE REINIT		; Control block re-init values
	DPT_STORE CRB,CRB$L_INTD+4,D,LP$INT ; Interrupt service routine address
	DPT_STORE CRB,CRB$L_INTD+VEC$L_INITIAL,D,LC_CINIT ; Controller init
	DPT_STORE CRB,CRB$L_INTD+VEC$L_UNITINIT,D,LC_INIT ; Unit init
	DPT_STORE DDB,DDB$L_DDT,D,LP$DDT ; DDT address
	DPT_STORE END			;
 
;
; DRIVER DISPATCH TABLE
;
 
	DDTAB	LP,-			;DRIVER DISPATCH TABLE
		STARTIO,-		; Start I/O operation
		0,-			; Unsolicited interrupt
		FUNCTABLE,-		; Function table
		+IOC$CANCELIO,-		; Cancel I/O
		LP_REGDUMP,-		; Register dump routine
		0,-			; Size of diagnostic buffer
		LP_ERRBUF_LEN		; Size of error log buffer
	.PAGE
	.SBTTL	Function decision table
;
; FUNCTION DECISION TABLE
;
 
FUNCTABLE:				;FUNCTION DECISION TABLE
	FUNCTAB	,-			; Legal functions
		<SENSECHAR,-		; Sense characteristics
		 SETCHAR,-		; Set characteristics
		 SENSEMODE,-		; Sense mode
		 SETMODE,-		; Set mode
		 WRITELBLK,-		; Write logical block
		 WRITEPBLK,-		; Write physical block
		 WRITEVBLK>		; Write virtual block
		
	FUNCTAB	,			;NO BUFFERED FUNCTIONS
	FUNCTAB LP_WRITE,<WRITELBLK,-	; Write functions
			  WRITEPBLK,-
			  WRITEVBLK>
	FUNCTAB	+EXE$SETMODE,-
		<SETCHAR,SETMODE>	; Set characteristics functions
	FUNCTAB	+EXE$SENSEMODE,-	;
		<SENSECHAR,-		; Sense characteristics
		 SENSEMODE>		; Sense mode
	.PAGE
	.SBTTL	FDT - Write function processing
;+
; LP_WRITE - WRITE FUNCTION PROCESSING
;
; THIS ROUTINE IS CALLED FROM THE FUNCTION DECISION TABLE DISPATCHER TO PROCESS
; A WRITE PHYSICAL, WRITE LOGICAL, OR WRITE VIRTUAL FUNCTION TO A LINE PRINTER.
;
; INPUTS:
;
;	R0  = SCRATCH.
;	R1  = SCRATCH.
;	R2  = SCRATCH.
;	R3  = ADDRESS OF I/O REQUEST PACKET.
;	R4  = CURRENT PROCESS PCB ADDRESS.
;	R5  = ASSIGNED DEVICE UCB ADDRESS.
;	R6  = ADDRESS OF CCB.
;	R7  = I/O FUNCTION CODE.
;	R8  = FUNCTION DECISION TABLE DISPATCH ADDRESS.
;	R9  = SCRATCH.
;	R10 = SCRATCH.
;	R11 = SCRATCH.
;	AP  = ADDRESS OF FIRST FUNCTION DEPENDENT PARAMETER.
;
; OUTPUTS:
;
;	 FOR PROCESSING BY THE LINE PRINTER DRIVER.
;-

LP_WRITE:
	MOVL	P4(AP),IRP$B_CARCON(R3)		; Insert carriage control byte
	MOVZWL	P2(AP),R1			; Number of bytes to transfer
	BEQL	10$				; If EQL none
	MOVL	P1(AP),R0			; Get starting virtual addr. of transfer
	JSB	G^EXE$WRITELOCK			; Check buffer and lock in memory
10$:	JMP	G^EXE$QIODRVPKT			; Queue I/O packet to driver
	.PAGE 
	.SBTTL	Line printer driver
;+
; STARTIO - START I/O OPERATION ON LINE PRINTERS
;
; THIS ROUTINE IS ENTERED WHEN THE ASSOCIATED UNIT IS IDLE AND A PACKET
; IS AVAILABLE.
;
; INPUTS:
;
;	R3 = ADDRESS OF I/O REQUEST PACKET.
;	R5 = UCB ADDRESS FOR IDLE UNIT.
;
; OUTPUTS:	
;
;	NO EXPLICIT OUTPUTS - THE UNIT IS IN WAITING FOR INTERRPUT STATE
;				OR THE I/O IS COMPLETE.
;-
 
STARTIO:
	CLRW	UCB$W_CSR(R5)		; Clr storage area

;	Retrieve the address of the device CSR

	MOVL	UCB$L_CRB(R5),R4	; Get address of CRB
	MOVL	@CRB$L_INTD+VEC$L_IDB(R4),R4 ; Get device CSR address
 
;	What is the function?

	CMPZV	#IRP$V_FCODE,-		; WRITELBLK function?
		#IRP$S_FCODE,-
		IRP$W_FUNC(R3),-
		#IO$_WRITELBLK
	BNEQ	10$			; If NEQ, some other function
	BRW	WRITE			; It is EQL, it's a write function

10$:	CMPZV	#IRP$V_FCODE,-		; Write physical block function?
		#IRP$S_FCODE,-
		IRP$W_FUNC(R3),-
		#IO$_WRITEPBLK
	BNEQ	15$			;If NEQ no.
	BRW	WRITEP			;Else go do it.

15$:	CMPZV	#IRP$V_FCODE,-		;Set mode function?
		#IRP$S_FCODE,-
		IRP$W_FUNC(R3),-
		#IO$_SETMODE
	BEQL	30$			;If EQL yes.

	CMPZV	#IRP$V_FCODE,-		;Set characteristics function?
		#IRP$S_FCODE,-
		IRP$W_FUNC(R3),-
		#IO$_SETCHAR
	BEQL	20$			;If EQL yes.
	.PAGE

;
;Set characteristics
;

20$:	MOVW	IRP$L_MEDIA(R3),-	;
		UCB$B_DEVCLASS(R5)

;
;Set mode
;

30$:	MOVW	IRP$L_MEDIA+2(R3),-	; Set default buffer size
		UCB$W_DEVBUFSIZ(R5)

	MOVB	IRP$L_MEDIA+2(R3),-	; Buf. size to REG. 8 image
		UCB$W_LINES+1(R5)

	MOVL	IRP$L_MEDIA+4(R3),-	; Set device dependent flags
		UCB$L_DEVDEPEND(R5)

	MOVB	IRP$L_MEDIA+7(R3),-	; Set lines per page
		UCB$W_LINES(R5)

	MOVB	UCB$L_DEVDEPEND(R5),-	; Set device dependant controller bits
		UCB$B_CSR2(R5)

	MOVZWL	#SS$_NORMAL,R0
	CLRL	R1

	BRW	EXIT
	.PAGE
;
; Is PASSALL set?
;

WRITE:	BBS	#LP$V_PASSALL,-		; If set do physical I/O.
		UCB$L_DEVDEPEND(R5),-
		WRITEP

	BRB	DECODE			; Else decode carriage control info

	.ENABL	LSB
;
; Preform write physical block
;

WRITEP:	
	MOVW	#C_INDREG4,-		; Load the controller CSR
		LP_CSR(R4)		;...and set indirect register address
	MOVAW	UCB$W_BUFADR(R5),R1	; Address of indirect reg. data 
	MOVL	#C_DATACNT,R2		; Data count
	BRB	COMMON			; Ok, do what everyone else would

;
; Decode carriage control info.
;
DECODE:
	JSB	G^EXE$CARRIAGE		; Returns carr. control in IRP$B_CARCON
	ASSUME	UCB$W_PREFIX+2 EQ UCB$W_SUFFIX
	MOVL	IRP$B_CARCON(R3),-	; Set prefix char and cnt in cont. image
		UCB$W_PREFIX(R5)
	MOVW	#M_STDCSR,LP_CSR(R4)	; Setup for typical transfer
	MOVL	#C_REGCNT,R2		; Number of reg. to init. in controller
	MOVAW	UCB$W_PREFIX(R5),R1	; Get address of reg. images
	.PAGE
COMMON:

	TSTW	UCB$W_BCNT(R5)		; Is this a zero length transfer?
	BNEQ	10$			; If NEQ, no
	CLRB	UCB$B_HIBUFADR(R5)	; High bits of buffer address
	CLRW	UCB$W_BYTECNT(R5)	; Byte count
	BRB	30$
;
; Allocate UBA map registers
;

10$:

	MOVQ	R1,UCB$L_REGSAVE(R5)	; Save registers R1 and R2
	CMPW	UCB$W_MAXBYT(R5),-	; If bcnt is > max bytes then get more map registers
		UCB$W_BCNT(R5)
	BGEQ	20$			;  ...else load UBA map registers
	MOVL	UCB$L_CRB(R5),R2	; Get the CRB address
	MOVL	CRB$L_INTD+VEC$B_NUMREG(R2),- ; Save pre alloc. map register info
		UCB$L_NUMREG(R5)

	BICW	#VEC$M_MAPLOCK,-	; Clear map register lock bit
		CRB$L_INTD+VEC$W_MAPREG(R2)

	REQMPR				; Requset UNIBUS map registers
20$:
	LOADUBAA			; Load UBA map registers
;
; Load byte count and calculate UNIBUS transfer address
;

	MNEGW	UCB$W_BCNT(R5),-	; Setup byte count
		UCB$W_BYTECNT(R5)
	MOVZWL	UCB$W_BOFF(R5),R1	; Fetch byte offset
	MOVL	UCB$L_CRB(R5),R2	; Get CRB address
	INSV 	CRB$L_INTD+VEC$W_MAPREG(R2),-
		#9,#9,R1
	EXTZV	#16,#2,R1,R2		;Get memory extension bits
	MOVW	R1,UCB$W_BUFADR(R5)	;Setup 16 bit buffer address
	MOVB	R2,UCB$B_HIBUFADR(R5)	; Set upper address bits 
	MOVQ	UCB$L_REGSAVE(R5),R1	;Restore registers R1 and R2

;
; Load controller and start transfer
;

30$:	MOVW	(R1)+,LP_DBR(R4)	; Copy indirect reg. to controller
	SOBGTR	R2,30$			; Branch if more to do.

40$:	DSBINT				; Raise IPL
	BBSC	#UCB$V_POWER,-		; If set, power has failed.
		UCB$W_STS(R5),90$
	BISW	#LP_CSR$M_PRIENA!LP_CSR$M_IE,-
		LP_CSR(R4)		; Start xfer
	WFIKPCH	140$,#12		; Wait for xfer to complete
	IOFORK				; Fork to lower IPL
	.PAGE
;
; Save status and check for errors
;

	MOVW	LP_CSR(R4),UCB$W_CSR(R5); Save controller state
	BBS	#LP_CSR$V_LPERR,-	; If set printer problem
		UCB$W_CSR(R5),140$
	CLRW	LP_CSR(R4)		; Set indirect register addr. to zero
	MOVW	LP_DBR(R4),UCB$W_BYTXFR(R5) ; Save the number of bytes transfered
	MOVW	LP_DBR(R4),UCB$W_LINCNT(R5) ; Save the number of lines printed
	PURDPR				; Purge the data paths
	MOVL	UCB$L_CRB(R5),R2	; Get the address of the CRB
	BBS	#VEC$V_MAPLOCK,-	; If SET do not release map registers
		CRB$L_INTD+VEC$W_MAPREG(R2),-
		45$
	RELMPR				; Release map registers
	MOVL	UCB$L_NUMREG(R5),-	; Restore pre-allocated map information
		CRB$L_INTD+VEC$B_NUMREG(R2)
45$:
	BITW	#LP_CSR$M_ERR,UCB$W_CSR(R5) ; Any errors?
	BNEQ	70$			; If NEQ, yes
;
; I/O OPERATION SUCCESSFULLY COMPLETED
;

	MOVZWL	#SS$_NORMAL,R0		; Set normal completion status
50$:
	MOVL	UCB$L_IRP(R5),R3	; Retrieve address of i/o packet
	MOVZWL	UCB$W_LINCNT(R5),R1	; Get number of lines printed
	INSV	UCB$W_BYTXFR(R5),-
		#16,#16,R0		; Insert number of characters in status
EXIT:
60$:	REQCOM				; COMPLETE I/O REQUEST


70$:	JSB	G^ERL$DEVICERR
80$:
	MOVZWL	#SS$_ABORT,R0		; Set operation aborted status
	BRW	50$

90$:	ENBINT
	BRW	STARTIO
	.PAGE
;
; PRINTER IS NOT READY OR HAS PAPER PROBLEM
;
 
140$:	CLRW	UCB$W_LP_OFLCNT(R5)	; Clear offline counter
	BICW	#LP_CSR$M_IE,LP_CSR(R4)	; Disable printer interrupt
150$:	SETIPL	UCB$B_FIPL(R5)		; Lower to fork level
	BITW	#LP_CSR$M_LPERR,LP_CSR(R4) ; Printer still have paper problem?
	BNEQ	155$			; If NEQ, yes it does
	MOVW	#C_TIM,UCB$W_LPTIMEOUT(R5) ; Reset timeout value
	BRW	40$			; And continue transfer.
155$:	BBS	#UCB$V_CANCEL,-
		UCB$W_STS(R5),80$	; If set, cancel i/o operation

	ACBW	UCB$W_LPTIMEOUT(R5),#1,-
		UCB$W_LP_OFLCNT(R5),160$; Skip until timeout

	CLRW	UCB$W_LP_OFLCNT(R5)	; Reset counter

	CMPW	#LP_HRCNT,-		; Are we at our max. (1 HR.)
		UCB$W_LPTIMEOUT(R5)

	BLEQU	157$			; If LEQ, yes
	MULW2	#2,UCB$W_LPTIMEOUT(R5)	; Double message timeout value
157$:	PUSHR	#^M<R3,R4>		; Save registers
	MOVZBL	#MSG$_DEVOFFLIN,R4	; Set up message type
	MOVAB	G^SYS$GL_OPRMBX,R3	; Address target mailbox
	JSB	G^EXE$SNDEVMSG		; Send message ignore error
	POPR	#^M<R3,R4>		; Restore registers
160$:	DSBINT	UCB$B_DIPL(R5)		; Disable interrupts
	WFIKPCH	150$,#2			; Wait for an interrupt or timeout
	IOFORK				; Create for process
	BRB	150$			;
	.DSABL	LSB
 
	.PAGE
	.SBTTL	Line printer interrupt dispatcher
;+
; LP$INT - LINE PRINTER INTERRUPT DISPATCHER.
;
; THIS ROUTINE IS ENTERED VIA A JSB INSTRUCTION WHEN AN INTERRUPT OCCURS ON
; THE LINE PRINTER CONTROLLER. THE STATE OF THE STACK ON ENTRY IS:
;
;	00(SP) = ADDRESS OF IDB ADDRESS.
;	04(SP) = SAVED R3.
;	08(SP) = SAVED R4.
;	12(SP) = SAVED R5.
;	16(SP) = INTERRUPT PC.
;	20(SP) = INTERRUPT PSL.
;
; INTERRUPT DISPATCHING OCCURS AS FOLLOWS:
;
;	IF THE INTERRUPT IS EXPECTED, THEN THE DRIVER IS CALLED AT ITS INTERRUPT
;	WAIT ADDRESS. ELSE THE INTERRUPT IS DISMISSED.
;-
 
LP$INT::				; Entry from dispatch
	MOVL	@(SP)+,R3		; Get address of IDB
	MOVQ	IDB$L_CSR(R3),R4	; Get controller CSR and owner UCB addr
	BBCC	#UCB$V_INT,UCB$W_STS(R5),10$ ;If clr, interrupt not expected
	BICW	#LP_CSR$M_IE,LP_CSR(R4)	; Disable output interrupts
	MOVL	UCB$L_FR3(R5),R3	; Restore remainder of driver context
	JSB	@UCB$L_FPC(R5)		; Call driver at interrupt wait address
10$:	MOVQ	(SP)+,R0	 	; Restore registers
	MOVQ	(SP)+,R2		;
	MOVQ	(SP)+,R4		;
	REI				;
	.PAGE
	.SBTTL	Line printer unit initialization
;+
; LC_INIT - LINE PRINTER UNIT INITIALIZATION
;
; THIS ROUTINE IS CALLED AT SYSTEM STARTUP AND AFTER A POWER FAILURE. THE
; ONLINE BIT IS SET FOR THE SPECIFIED UNIT.
;
; INPUTS:
;
;	R5 = ADDRESS OF DEVICE UCB.
;
; OUTPUTS:
;
;	THE ONLINE BIT IS SET IN THE DEVICE UCB AND THE ADDRESS OF THE UCB
;	IS FILLED INTO THE IDB OWNER FIELD.
;-
 
LC_INIT:				; LINE PRINTER UNIT INITIALIZATION

	BISW	#UCB$M_ONLINE,-		; Set unit online
		UCB$W_STS(R5)

	MOVL	UCB$L_CRB(R5),R0	; Get address of CRB
	BBS	#UCB$V_POWER,-		; If set power has failed
		UCB$W_STS(R5),10$

	MOVL	#LC_MAPREG,R3		; Number of mapping reg. to pre-alloc
	PUSHL	R0			; Save R0
	JSB	G^IOC$ALOUBAMAPN	; Request map registers
	BLBC	R0,10$			; If LBC, request failed
	MOVL	(SP)+,R0		; Restore R0
	SUBW3	#1,R3,UCB$W_MAXBYT(R5)	; One less reg. for buf. near page boundry
	MULW2	#PAGSIZ,UCB$W_MAXBYT(R5); Save max byte count
	BISW	#VEC$M_MAPLOCK,-	; Set maplock bit
		CRB$L_INTD+VEC$W_MAPREG(R0)
10$:

	MOVB	UCB$W_DEVBUFSIZ(R5),-	    ; Set default buffer size
		UCB$W_LINES+1(R5)

	BISB	#LP$M_LOWER,UCB$B_CSR2(R5)  ; Set device dependant bits
	MOVB	#LINPAG,UCB$W_LINES(R5)	    ; Set lines per page
	MOVL	CRB$L_INTD+VEC$L_IDB(R0),R0 ; Get address of IDB
	MOVL	R5,IDB$L_OWNER(R0)	    ; Set address of device UCB
	RSB
	.PAGE
	.SBTTL	Line printer unit initialization
;+
; LC_CINIT - LINE PRINTER CONTROLLER INITIALIZATION
;
; THIS ROUTINE IS CALLED AT SYSTEM STARTUP AND AFTER A POWER FAILURE. THE
; ONLINE BIT IS SET FOR THE SPECIFIED UNIT.
;
; INPUTS:
;
;	R4 = ADDRESS OF DEVICE CSR.
;	R5 = ADDRESS OF DEVICE UCB.
;
; OUTPUTS:
;
;	THE LINE PRINTER OFFLINE MESSAGE COUNT IS INITIALIZED AFTER A
;	RESET HAS BEEN DONE ON THE LP CONTROLLER AND THE INTERRUPT
;	VECTOR OF THE LP IS LOADED INTO THE CONTROLLER.
;-

LC_CINIT:
	MOVW	#RESET,LP_CSR(R4)	; Master reset
	MOVL	IDB$L_UCBLST(R5),R0	; Get UCB address
	MOVW	#C_TIM,UCB$W_LPTIMEOUT(R0) ; Initialize LP offline message time
	SUBB3	#6,IDB$B_VECTOR(R5),-	; Set interrupt vector in controller
		DMF_CSR(R4)
	RSB				;
	.PAGE
	.SBTTL  Register dump routine
;++
; LP_REGDUMP - REGISTER DUMP ROUTINE
;
; FUNCTIONAL DESCRIPTION:
;
; THIS ROUTINE IS CALLED TO SAVE THE DEVICE REGISTERS IN A SPECIFIED 
; BUFFER. IT IS CALLED FROM THE DEVICE ERROR LOGGING ROUTINE.
;
; INPUTS:
;	R0 = ADDRESS OF REGISTER SAVE BUFFER
;	R4 = ADDRESS OF DEVICE CONTROL STATUS REGISTER
;	R5= ADDRESS OF UNIT CONTROL BLOCK
; OUTPUTS:
;	DEVICE REGISTERS ARE MOVED INTO THE SPECIFIED BUFFER.
;	R0 CONTAINS THE ADDRESS OF THE NEXT EMPTY LONGWORD IN THE BUFFER.
;	ALL REGISTERS EXCEPT R1 AND R2 ARE PRESERVED.
;
;--
LP_REGDUMP:
	MOVL	#LP_NUM_REGS,R2		; Store number of registers
	MOVL	R2,(R0)+		; Insert # of longwords dumped
	MOVAW	UCB$W_CSR(R5),R1	; Get address of first reg.
10$:	MOVZWL	(R1)+,(R0)+		; Dump registers into buffer
	SOBGTR	R2,10$			; If GTR - more to go
	RSB				; Return

LP_END:					; ADDRESS OF LAST LOCATION IN DRIVER
 
	.END
