	.TITLE	LPDRIVER - LP11/LS11/LV11 LINE PRINTER DRIVER
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
; ABSTRACT:
;
;	LP11/LS11/LV11 LINE PRINTER DRIVER
;
; AUTHOR:
;
;	R. HEINEN 6-SEP-76
;
; MODIFIED BY:
;
;	V02-015	EAD0004		Elliott A. Drayton		15-Aug-1981
;		Added support for the PASSALL, PRINTALL, and WRAP functions.
;
;	V02-014	EAD0003		Elliott A. Drayton		23-May-1981
;		Added code to decrease the frequency of the device offline
;		message. Also inserted a delay to prevent an interrupt
;		per character.
;
;	V02-013	EAD0002		Elliott A. Drayton		 9-FEB-1981
;		Change instructions to perform longword calculations for quota.
;
;	V02-012	EAD0001		Elliott A. Drayton		30-SEP-1980
;		Prevents nonprinting characters, other then control
;		characters from being transferred to the line printer.
;
;	V07	LMK0001	L.KAWELL	13-FEB-1979
;		Change offline processing, so that when the printer
;		returns online, the operation is started from where it
;		left off instead of starting the entire operation over.
;
;	V06	LMK0001	L.KAWELL 24-OCT-1978
;		Fixes number-of-lines calculation for Form-Feeds.
;
;	V11	LMK0003		Len Kawell
;		Fix offline processing so system doesn't crash when
;		ERROR is clear but READY is not set in 12 seconds.
;
;	X10	RIH0033		R. I. Hustvedt	16-Oct-1979
;		Change PCB$W_BYTCNT to JIB$L_BYTCNT.
;
;	X09	MHB0028		M. H. Bramhall	28-Sep-1979
;		Change TT$CARRIAGE to EXE$CARRIAGE.
;
;	X08	CHP0001		Carol Peters	20-Jul-1979	10:15
;		Accept a default buffer size of a word instead of a
;		byte.
;
;--
	.PAGE
	.SBTTL	Declarations

;
; MACRO LIBRARY CALLS
;
 
	$CRBDEF				;DEFINE CRB OFFSETS
	$DDBDEF				;DEFINE DDB OFFSETS
	$DPTDEF				;DEFINE DPT OFFSETS
	$IDBDEF				;DEFINE IDB OFFSETS
	$IODEF				;DEFINE I/O FUNCTION CODES
	$IRPDEF				;DEFINE IRP OFFSETS
	$JIBDEF				;DEFINE JIB OFFSETS
	$LPDEF				;DEFINE LINE PRINTER CHARACTERISTICS
	$MSGDEF				;DEFINE SYSTEM MESSAGE TYPES
	$PCBDEF				;DEFINE PCB OFFSETS
	$SSDEF				;DEFINE SYSTEM STATUS CODES
	$UCBDEF				;DEFINE UCB OFFSETS
	$VECDEF				;DEFINE VEC OFFSETS
 
;
; Local macros
;

	.MACRO	FREEIB
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
		NOP
	.ENDM	FREEIB

;
; LOCAL SYMBOLS
;
; ARGUMENT LIST OFFSET DEFINITIONS
;
 
P1=0					;First function dependent parameter
P2=4					;Second function dependent parameter
P3=8					;Third function dependent parameter
P4=12					;Fourth function dependend parameter
P5=16					;Fifth function dependent parameter
P6=20					;Sixth function dependent parameter
LP_HRCNT=1920 				;Timeout value for one hour

;
; CHARACTER CODE DEFINITIONS
;
 
C_CR=13					;Carriage return
C_FF=12					;Form feed
C_VT=11					;Verticle tab
C_LF=10					;Line feed
C_TAB=9					;Tabulation
 
;
; FLAG REGISTER BIT DEFINITIONS
;
 
M_CRPEND=1				;Carriage return pending
V_CRPEND=0				;
 
;
; LP11/LS11/LV11 DEVICE REGISTER OFFSET DEFINITIONS
;
 
	$DEFINI	LP
 
$DEF	LP_CSR		.BLKW	1	;CONTROL STATUS REGISTER
	$VIELD	LP_CSR,7,<-
		<IE,,M>,-
		>
$DEF	LP_DBR		.BLKW	1	;DATA BUFFER REGISTER
 
	$DEFEND	LP
 
;
; DEFINE DEVICE DEPENDENT UNIT CONTROL BLOCK OFFSETS
;
 
	$DEFINI	UCB
 
.=UCB$K_LENGTH				;
 
$DEF	UCB$L_LP_MUTEX	.BLKL	1	;Line printer UCB mutex
$DEF	UCB$L_LP_TIMEOUT .BLKL	1	;Printer problem message timer
$DEF	UCB$L_LP_OFLCNT	.BLKB	1	;Offline time counter
$DEF	UCB$B_LP_CURSOR	.BLKB	1	;Current horizonal position
$DEF	UCB$B_LP_LINCNT	.BLKB	1	;Current line count on page
$DEF	UCB$B_SPARE	.BLKB	2	;SPARE UNUSED BYTES

UCB$K_SIZE=.
	$DEFEND	UCB
	.PAGE
	.SBTTL	Driver prologue table and driver dispatch table

;
; LOCAL DATA
;
; DRIVER PROLOGUE TABLE
;
 
	DPTAB	-			;DEFINE DRIVER PROLOGUE TABLE
		END=LP_END,-		;End of driver
		ADAPTER=UBA,-		;Adapter type
		UCBSIZE=UCB$K_SIZE,-	;UCB size
		NAME=LPDRIVER		;Driver name
	DPT_STORE INIT			;Control block init values
	DPT_STORE UCB,UCB$B_FIPL,B,8	;Fork IPL
	DPT_STORE UCB,UCB$L_DEVCHAR,L,-	;Device characteristics
		<DEV$M_REC-		; Record oriented
		!DEV$M_AVL-		; Available
		!DEV$M_CCL-		; Carriage control device
		!DEV$M_ODV>		; Output device
	DPT_STORE UCB,UCB$B_DEVCLASS,B,DC$_LP ;Device class
	DPT_STORE UCB,UCB$B_DEVTYPE,B,LP$_LP11 ;Device type
	DPT_STORE UCB,UCB$W_DEVBUFSIZ,W,132 ;Default buffer size
	DPT_STORE UCB,UCB$L_DEVDEPEND,L,<64@24+LP$M_MECHFORM> ;Printer parameters
	DPT_STORE UCB,UCB$B_DIPL,B,20	;Device IPL
	DPT_STORE UCB,UCB$L_LP_MUTEX,W,-1 ;Initialize mutex
	DPT_STORE REINIT		;Control block re-init values
	DPT_STORE CRB,CRB$L_INTD+4,D,LP$INT ;Interrupt service routine address
	DPT_STORE CRB,CRB$L_INTD+VEC$L_INITIAL,D,LP_LX11_CINIT ;Controller init
	DPT_STORE CRB,CRB$L_INTD+VEC$L_UNITINIT,D,LP_LX11_INIT ;Unit init
	DPT_STORE DDB,DDB$L_DDT,D,LP$DDT ;DDT address
	DPT_STORE END			;
 
;
; DRIVER DISPATCH TABLE
;
 
	DDTAB	LP,-			;DRIVER DISPATCH TABLE
		STARTIO,-		;Start I/O operation
		0,-			;Unsolicited interrupt
		FUNCTABLE,-		;Function table
		+IOC$CANCELIO,-		;Cancel I/O
		0,-			;Register dump routine
		0,-			;Size of diagnostic buffer
		0			;Size of error log buffer
	.PAGE
	.SBTTL	LP11/LS11/LV11 Function decision table
;
; LP11/LS11/LV11 FUNCTION DECISION TABLE
;
 
FUNCTABLE:				;FUNCTION DECISION TABLE
	FUNCTAB	,-			;Legal functions
		<SENSECHAR,-		;Sense characteristics
		 SETCHAR,-		;Set characteristics
		 SENSEMODE,-		;Sense mode
		 SETMODE,-		;Set mode
		 WRITELBLK,-		;Write logical block
		 WRITEPBLK,-		;Write physical block
		 WRITEVBLK>		;Write virtual block
	FUNCTAB	,-			;LEGAL FUNCTIONS
		<SENSECHAR,-		;Sense characteristics
		 SETCHAR,-		;Set characteristics
		 SENSEMODE,-		;Sense mode
		 SETMODE,-		;Set mode
		 WRITELBLK,-		;Write logical block
		 WRITEPBLK,-		;Write physical block
		 WRITEVBLK>		;Write virtual block
	FUNCTAB LP_WRITE,<WRITELBLK,WRITEPBLK,WRITEVBLK> ;Write functions
	FUNCTAB	LP_SETMODE,<SETCHAR,SETMODE> ;Set characteristics functions
	FUNCTAB	+EXE$SENSEMODE,-	;
		<SENSECHAR,-		;Sense characteristics
		 SENSEMODE>		;Sense mode
	.PAGE
	.SBTTL	Set characteristics and set mode function processing
;+
; LP_SETMODE - SET CHARACTERISTICS AND SET MODE FUNCTION PROCESSING
;
; THIS ROUTINE IS CALLED FROM THE FUNCTION DECISION TABLE DISPATCHER TO PROCESS
; A SET MODE FUNCTION TO A LINE PRINTER.
;
; INPUTS:
;
;	R0 = SCRATCH.
;	R1 = SCRATCH.
;	R2 = SCRATCH.
;	R3 = ADDRESS OF I/O REQUEST PACKET.
;	R4 = CURRENT PROCESS PCB ADDRESS.
;	R5 = ASSIGNED DEVICE UCB ADDRESS.
;	R6 = ADDRESS OF CCB.
;	R7 = I/O FUNCTION CODE.
;	R8 = FUNCTION DECISION TABLE DISPATCH ADDRESS.
;	R9 = SCRATCH.
;	R10 = SCRATCH.
;	R11 = SCRATCH.
;	AP = ADDRESS OF FIRST FUNCTION DEPENDENT PARAMETER.
;
; OUTPUTS:
;
;	THE SPECIFIED CHARACTERISTICS ARE MOVED INTO THE DEVICE UCB AND THE
;	I/O IS COMPLETED.
;-
 
LP_SETMODE:				;Set mode function processing
	MOVL	P1(AP),R1		;Get address of characteristics
	IFNORD	#8,(R1),20$		;Can characteristics quadword be read?
	PUSHL	R3			;Save packet address
	MOVAB	UCB$L_LP_MUTEX(R5),R0	;Get address of UCB mutex
	JSB	G^SCH$LOCKW		;Lock UCB for write access
	CMPL	#IO$_SETMODE,R7		;Set mode function?
	BEQL	10$			;If EQL yes
	MOVW	(R1),UCB$B_DEVCLASS(R5)	;Set device class and type
10$:	MOVW	2(R1),UCB$W_DEVBUFSIZ(R5) ;Set default buffer size
	MOVL	4(R1),UCB$L_DEVDEPEND(R5) ;Set device characteristics
	JSB	G^SCH$UNLOCK		;Unlock UCB
	POPL	R3			;Restore packet
	MOVZWL	#SS$_NORMAL,R0		;Set normal completion status
	JMP	G^EXE$FINISHIOC		;
20$:	MOVZWL	#SS$_ACCVIO,R0		;Set access violation status
	JMP	G^EXE$ABORTIO		;
	.PAGE
	.SBTTL	Write function processing
;+
; LP_WRITE - WRITE FUNCTION PROCESSING
;
; THIS ROUTINE IS CALLED FROM THE FUNCTION DECISION TABLE DISPATCHER TO PROCESS
; A WRITE PHYSICAL, WRITE LOGICAL, OR WRITE VIRTUAL FUNCTION TO A LINE PRINTER.
;
; INPUTS:
;
;	R0 = SCRATCH.
;	R1 = SCRATCH.
;	R2 = SCRATCH.
;	R3 = ADDRESS OF I/O REQUEST PACKET.
;	R4 = CURRENT PROCESS PCB ADDRESS.
;	R5 = ASSIGNED DEVICE UCB ADDRESS.
;	R6 = ADDRESS OF CCB.
;	R7 = I/O FUNCTION CODE.
;	R8 = FUNCTION DECISION TABLE DISPATCH ADDRESS.
;	R9 = SCRATCH.
;	R10 = SCRATCH.
;	R11 = SCRATCH.
;	AP = ADDRESS OF FIRST FUNCTION DEPENDENT PARAMETER.
;
; OUTPUTS:
;
;	THE FUNCTION PARAMETERS ARE CHECKED AND THE USER'S BUFFER IS FORMATTED
;	AND COPIED INTO A SYSTEM BUFFER FOR PROCESSING BY THE LINE PRINTER
;	DRIVER.
;-
 
LP_WRITE:				;WRITE FUNCTION PROCESSING
	CLRL	R11			;Clear total number of overhead bytes
	CLRL	R10			;Assume write pass all function
FORMAT:	MOVL	FP,SP			;Remove all temporaries from stack
	PUSHR	#^M<R3,R4,R5,R6,R7,AP>	;Save registers
	MOVL	P1(AP),R8		;Get starting address of user buffer
	MOVZWL	P2(AP),R9		;Get length of user buffer
	BBC	#LP$V_PASSALL,UCB$L_DEVDEPEND(R5),5$ ; If CLR, not passall
	MOVL	#IO$_WRITEPBLK,R7	;Force write physical
5$:	CMPL	#IO$_WRITEPBLK,R7	;Write physical block?
	BEQL	10$			;If EQL yes
	MOVL	P4(AP),IRP$B_CARCON(R3)	;Insert carriage control information
	JSB	G^EXE$CARRIAGE		;Translate carriage control information
	MOVZBL	IRP$B_CARCON(R3),R0	;Get number of prefix control bytes
	MOVZBL	IRP$B_CARCON+2(R3),R1	;Get number of suffix control bytes
	ADDL	R0,R1			;Calculate number of carriage control bytes
	MOVAB	32(R1)[R11],R10		;Calculate total number of overhead bytes
10$:	TSTL	R9			;Any buffer specified?
	BEQL	20$			;If EQL no
	MOVQ	R8,R0			;Retrieve buffer parameters
	JSB	G^EXE$WRITECHK		;Check accessibility of user buffer
20$:	MOVAB	12(R9)[R10],R1		;Calculate length of buffer required
	JSB	G^EXE$BUFFRQUOTA	;Check if process has sufficient quota
	BLBS	R0,25$			;If LBS quota ok
	BRW	45$			;If LBC quota check failure
25$:	JSB	G^EXE$ALLOCBUF		;Allocate buffer for line printer output
	BLBC	R0,45$			;If LBC allocation failure
	MOVL	(SP),R3			;Retrieve address of I/O packet
	MOVL	R2,IRP$L_SVAPTE(R3)	;Save address of buffered I/O packet
	MOVL	PCB$L_JIB(R4),R0	;Get JIB address
	SUBL	R1,JIB$L_BYTCNT(R0)	;Adjust buffered I/O quota
	MOVW	R1,IRP$W_BOFF(R3)	;Set number of bytes charged to quota
	CLRL	IRP$L_MEDIA(R3)		;Clear line feed count in packet
	MOVW	R9,IRP$W_BCNT(R3)	;Insert size of user buffer
	MOVAB	12(R2),R2		;Get address of buffer data area
	MOVAB	UCB$L_LP_MUTEX(R5),R0	;Get address of UCB mutex
	JSB	G^SCH$LOCKW		;Lock UCB for write access
	CMPL	#IO$_WRITEPBLK,R7	;Write pass all?
	BEQL	50$			;If EQL yes
	SUBW	#12,R1			;Calculate actual length of data area
	MOVZBL	UCB$B_LP_CURSOR(R5),R4	;Get current horizonal carriage position
	MOVZWL	UCB$W_DEVSTS(R5),R6	;Get current carriage return pending flag
	MOVZBL	UCB$B_LP_LINCNT(R5),R7	;Get current line on page
	MOVZWL	UCB$W_DEVBUFSIZ(R5),R10	;Get width of printer carriage
	MOVL	#^X20,AP		;Assume printer does not have lower case
	BBC	#LP$V_LOWER,UCB$L_DEVDEPEND(R5),35$ ;If CLR, no lower case
	CLRL	AP			;Set for printer with lower case
35$:	BSBB	70$			;Insert prefix carriage control
30$:	DECL	R9			;Any more bytes to transfer to system buffer?
	BLSS	40$			;If LSS no
	MOVZBL	(R8)+,R0		;Get next byte from user buffer
	BSBB	WRITE_BYTE		;Write byte in system buffer
	BRB	30$			;
40$:	BSBB	80$			;Insert suffix carriage control in buffer
	SUBL	IRP$L_SVAPTE(R3),R2	;Calculate length of output plus header
	SUBW3	#12,R2,IRP$L_MEDIA+2(R3) ;Calculate actual length of output buffer
	MOVB	R4,UCB$B_LP_CURSOR(R5)	;Save current horizonal carriage position
	INSV	R6,#V_CRPEND,#1,UCB$W_DEVSTS(R5) ;Save carriage return pending
	MOVB	R7,UCB$B_LP_LINCNT(R5)	;Save current line on page
	BRB	60$			;
45$:	POPR	#^M<R3,R4,R5,R6,R7,AP>	;Restore registers
	JMP	G^EXE$ABORTIO		;
50$:	MOVW	R9,IRP$L_MEDIA+2(R3)	;Insert number of bytes to print
	MOVC	R9,(R8),(R2)		;Move characters to system buffer
60$:	POPR	#^M<R3,R4,R5,R6,R7,AP>	;Restore registers
	PUSHL	R3			;Save address of I/O packet
	MOVAB	UCB$L_LP_MUTEX(R5),R0	;Get address of UCB mutex
	JSB	G^SCH$UNLOCK		;Unlock UCB
	POPL	R3			;Restore address of I/O packet
	JMP	G^EXE$QIODRVPKT		;Queue I/O packet to driver
 
;
; SUBROUTINE TO INSERT CARRIAGE CONTROL IN BUFFER
;
 
70$:	MOVZBL	IRP$B_CARCON(R3),-(SP)	;Get number of characters to output
	BEQL	100$			;If EQL none
	MOVZBL	IRP$B_CARCON+1(R3),R0	;Get character to output
	BRB	85$			;
80$:	MOVZBL	IRP$B_CARCON+2(R3),-(SP) ;Get number of characters to output
	BEQL	100$			;If EQL none
	MOVZBL	IRP$B_CARCON+3(R3),R0	;Get character to output
85$:	BNEQ	90$			;If NEQ character specified
	MOVZBL	#C_CR,R0		;Get carriage return
	BSBB	WRITE_BYTE		;Write byte in system buffer
	MOVZBL	#C_LF,R0		;Get line feed
90$:	BSBB	WRITE_BYTE		;Write byte in system buffer
	SOBGTR	(SP),90$		;Any more left to insert?
100$:	TSTL	(SP)+			;Remove count from stack
	RSB				;
	.PAGE
	.SBTTL	Write byte into system buffer
;
; SUBROUTINE TO FORMAT AND FILL SYSTEM BUFFER WITH LINE PRINTER OUTPUT ONE BYTE
; AT A TIME.
;
 
WRITE_BYTE:				;WRITE BYTE INTO BUFFER
	CMPL	#^A/ /,R0		;Control character?
	BGTRU	40$			;If GTRU yes
	BBSC	#V_CRPEND,R6,60$	;If SET, carriage return pending
	CMPB	#^A/`/,R0		;Possibly lower case character?
	BGTRU	10$			;If GTRU no
	BBS	#LP$V_PRINTALL,UCB$L_DEVDEPEND(R5),5$ ; If SET, allow all chararacters to be transfered
	CMPB	#^X7F,R0		;Delete character?
	BEQL	30$			;If EQL yes
5$:	SUBL	AP,R0			;Convert character to upper case
10$:	BBC	#LP$V_WRAP,UCB$L_DEVDEPEND(R5),12$ ; If CLR, then nowrap

	CMPL	R4,R10			;Still room on current line?
	BLEQU	15$			;If LEQU yes

	PUSHL	R0			;Save the current character
	MOVZBL	#C_CR,R0		;Get carriage return code
	BSBB	WRITE_BYTE		;Insert code in system buffer
	MOVZBL	#C_LF,R0		;Set line feed character
	BSBW	110$			;Insert line feed into system buffer
	POPL	R0			;Restore current character
	BRB	15$			;

12$:	CMPL	R4,R10			;Still room on current line?
	BGTRU	30$			;If GTRU no

15$:	INCL	R4			;Increment horizonal position
20$:	DECL	R1			;Any room left in system buffer?
	BGEQ	25$			;If GEQ, yes
	BRW	150$			; ... else no
25$:	MOVB	R0,(R2)+		;Insert character in system buffer
30$:	RSB				;
 
;
; CONTROL CHARACTER ENCOUNTERED
;
 
40$:	CMPL	#C_CR,R0		;Carriage return?
	BLSSU	50$			;If LSS no
	BGTRU	70$			;If GTRU no
	BBS	#LP$V_CR,UCB$L_DEVDEPEND(R5),140$ ;If SET, carriage return required
	BISL	#M_CRPEND,R6		;Set carriage return pending
	RSB				;
50$:	BBSC	#V_CRPEND,R6,60$	;If SET, carriage return pending
	BBS	#LP$V_PRINTALL,UCB$L_DEVDEPEND(R5),20$ ;If SET, print character
	BRW	30$			;Exit this is nonprintable
60$:	PUSHL	R0			;Save current character
	MOVZBL	#C_CR,R0		;Get carriage return character
	BSBB	140$			;Insert carriage return in buffer
	POPL	R0			;Retrieve current character
	BRB	WRITE_BYTE		;
 
;
; CHARACTER IS A TAB, LINE FEED, VERTICLE TAB, OR FORM FEED
;
 
70$:	CMPL	#C_TAB,R0		;Tabulation character?
	BGTRU	50$			;If GTRU no
	BLSSU	80$			;If LSSU no
 
;
; CHARACTER IS A TAB
;
 
	BBSC	#V_CRPEND,R6,60$	;If SET, carriage return pending
	PUSHAB	8(R4)			;Calculate next tab position
	BICL	#7,(SP)			;Clear excess bits
	SUBL	R4,(SP)			;Calculate blank count
	MOVZBL	#^A/ /,R0		;Set space character
	BRB	100$			;
 
;
; CHARACTER IS A LINE FEED, VERTICAL TAB, OR FORM FEED
;
 
80$:	CMPL	#C_VT,R0		;Vertical tab?
	BEQL	50$			;If EQL yes
	BGTRU	110$			;If GTRU line feed
 
;
; CHARACTER IS A FORM FEED
;
 
	MOVZBL	UCB$L_DEVDEPEND+3(R5),R0 ;Get number of lines per page
	SUBL3	R7,R0,-(SP)		;Calculate number of lines to end of page
	BBC	#LP$V_MECHFORM,UCB$L_DEVDEPEND(R5),90$ ;If CLR, no mechanical feed
	ADDL	(SP)+,IRP$L_MEDIA(R3)	;Update number of lines printed
	MOVZBL	#C_FF,R0		;Set form feed character
	BRB	120$			;
90$:	MOVZBL	#C_LF,R0		;Set line feed character
100$:	BSBW	WRITE_BYTE		;Insert byte in system buffer
	SOBGTR	(SP),100$		;Any more bytes to insert?
	TSTL	(SP)+			;Remove loop count from stack
	RSB				;
 
;
; CHARACTER IS A LINE FEED
;
 
110$:	INCL	R7			;Increment line position on page
	INCL	IRP$L_MEDIA(R3)		;Increment number of lines printed
	CMPB	R7,UCB$L_DEVDEPEND+3(R5) ;End of page?
	BNEQ	130$			;If NEQ no
120$:	CLRL	R7			;Clear line position on page
130$:	BICL	#M_CRPEND,R6		;Clear carriage return pending
140$:	CLRL	R4			;Clear horizonal position
	BRW	20$			;
 
;
; OUTPUT WILL NOT FIT IN ALLOCATED BUFFER
;
 
150$:	MOVL	IRP$L_SVAPTE(R3),R0	;Get address of buufer to deallocate
	CLRL	IRP$L_SVAPTE(R3)	;Indicate no buffer allocated
	MOVZWL	IRP$W_SIZE(R0),R10	;Save size of buffer
	JSB	G^EXE$DEANONPAGED	;Deallocate buffer
	MOVAB	-4*6(FP),SP		;Remove all temporaries from stack
	POPR	#^M<R3,R4,R5,R6,R7,AP>	;Restore registers
	MOVL	PCB$L_JIB(R4),R0	;Get JIB address
	ADDL	R10,JIB$L_BYTCNT(R0)	;Adjust byte count quota
	ADDL	#32,R11			;Adjust count of overhead bytes
	PUSHL	R3			;Save address of I/O packet
	MOVAB	UCB$L_LP_MUTEX(R5),R0	;Get address of UCB mutex
	JSB	G^SCH$UNLOCK		;Unlock UCB
	POPL	R3			;Restore address of I/O packet
	BRW	FORMAT			;Try again
	.PAGE
	.SBTTL	Line printer driver
;+
; STARTIO - START I/O OPERATION ON LINE PRINTERS
;
; THIS ROUTINE IS ENTERED WHEN THE ASSOCIATED UNIT IS IDLE AND A PACKET
; IS AVAILABLE.
;
; INPUTS:
;
;	R3 = ADDRESS OF I/O REQUEST PACKET.
;	R5 = UCB ADDRESS FOR IDLE UNIT.
;
; OUTPUTS:	
;
;	NO EXPLICIT OUTPUTS - THE UNIT IS IN WAITING FOR INTERRPUT STATE
;				OR THE I/O IS COMPLETE.
;-
 
STARTIO:
	MOVL	UCB$L_IRP(R5),R3	;Retrieve address of I/O packet
	MOVW	IRP$L_MEDIA+2(R3),-
		UCB$W_BOFF(R5)		;Set number of characters to print
	MOVL	UCB$L_SVAPTE(R5),R3	;Get address of system buffer
	MOVAB	12(R3),R3		;Get address of data area
	MOVL	UCB$L_CRB(R5),R4	;Get address of CRB
	MOVL	@CRB$L_INTD+VEC$L_IDB(R4),R4 ;Get device CSR address
;
; START NEXT OUTPUT SEQUENCE
;
 
10$:	ADDL3	#LP_DBR,R4,R0		;Calculate address of data buffer register
	MOVZWL	UCB$W_BOFF(R5),R1	;Get number of characters remaining
	MOVW	#^X8080,R2		;Get control register test mask
	BRB	25$			;Start output
20$:	BITW	R2,(R4)			;Printer ready or have paper problem?
	BLEQ	30$			;If LEQ not ready or paper problem
	MOVB	(R3)+,(R0)		;Output next character
	FREEIB				;Flush instruction buffer and delay
25$:	SOBGEQ	R1,20$			;Any more characters to output?
	BRW	70$			;All done, BRW to set return status
 
;
; PRINTER IS NOT READY OR HAS PAPER PROBLEM
;
 
30$:	BNEQ	40$			;If NEQ paper problem
	ADDW3	#1,R1,UCB$W_BOFF(R5)	;Save number of characters remaining
	DSBINT	UCB$B_DIPL(R5)		;Disable interrupts
	BISB	#^X40,LP_CSR(R4)	;Set interrupt enable
	BITW	#^X80,LP_CSR(R4)	;Is it ready now?
	BNEQ	35$			;If NEQ, yes its ready
	WFIKPCH	50$,#12			;Wait for ready interrupt
	IOFORK				;Create a fork process
	BRB	10$			;  ...and start next output

35$:
	ENBINT				;Enable system interrupts
	CLRW	LP_CSR(R4)		;Disable device interrupts
	BRB	10$			;Go transfer more characters 
;
; PRINTER HAS PAPER PROBLEM
;
 
40$:	CLRL	UCB$L_LP_OFLCNT(R5)	;Clear offline counter
	ADDW3	#1,R1,UCB$W_BOFF(R5)	;Save number of characters remaining
50$:	CLRW	LP_CSR(R4)		;Disable printer interrupt
	SETIPL	UCB$B_FIPL(R5)		;Lower to fork level
	TSTW	LP_CSR(R4)		;Printer still have paper problem?
	BLSS	55$			;If LSS yes
	MOVL	#15,UCB$L_LP_TIMEOUT(R5);Set timeout value
	BRB	10$			; ...and start next output
55$:	BBS	#UCB$V_CANCEL,UCB$W_STS(R5),80$ ;If SET, cancel I/O operation

	ACBL	UCB$L_LP_TIMEOUT(R5),#1,-
		UCB$L_LP_OFLCNT(R5),60$ ;Skip until timeout

	CLRL	UCB$L_LP_OFLCNT(R5)	;Reset counter
	CMPL	#LP_HRCNT,-		;One hour timeout?
		UCB$L_LP_TIMEOUT(R5)
	BLEQU	57$			;If LSS yes and dont increment
	MULL	#2,UCB$L_LP_TIMEOUT(R5)	;Double message timeout value
57$:	PUSHR	#^M<R3,R4>		;Save registers
	MOVZBL	#MSG$_DEVOFFLIN,R4	;Set up message type
	MOVAB	G^SYS$GL_OPRMBX,R3	;Address target mailbox
	JSB	G^EXE$SNDEVMSG		;Send message ignore error
	POPR	#^M<R3,R4>		;Restore registers
60$:	DSBINT	UCB$B_DIPL(R5)		;Disable interrupts
	WFIKPCH	50$,#2			;Wait for a timeout
	IOFORK				;Create for process
	BRB	50$			;
 
;
; I/O OPERATION SUCCESSFULLY COMPLETED
;
 
70$:	MOVZWL	#SS$_NORMAL,R0		;Set normal completion status
	CLRW	UCB$W_BOFF(R5)		;Correct remaining character count
	BRB 	90$			;
 
;
; I/O OPERATION CANCELED
;
 
80$:	MOVZWL	#SS$_ABORT,R0		;Set operation aborted status
90$:	MOVL	UCB$L_IRP(R5),R3	;Retrieve address of I/O packet
	MOVZWL	IRP$L_MEDIA(R3),R1	;Get number of lines printed
	SUBW	UCB$W_BOFF(R5),UCB$W_BCNT(R5) ;Calculate number of characters
	INSV	UCB$W_BCNT(R5),#16,#16,R0 ;Insert number of characters in status
	REQCOM				;Complete I/O request
	.PAGE
	.SBTTL	LP11/LS11/LV11 Line printer interrupt dispatcher
;+
; LP$INT - LP11/LS11/LV11 LINE PRINTER INTERRUPT DISPATCHER.
;
; THIS ROUTINE IS ENTERED VIA A JSB INSTRUCTION WHEN AN INTERRUPT OCCURS ON AN
; LP11/LS11/LV11 LINE PRINTER CONTROLLER. THE STATE OF THE STACK ON ENTRY IS:
;
;	00(SP) = ADDRESS OF IDB ADDRESS.
;	04(SP) = SAVED R3.
;	08(SP) = SAVED R4.
;	12(SP) = SAVED R5.
;	16(SP) = INTERRUPT PC.
;	20(SP) = INTERRUPT PSL.
;
; INTERRUPT DISPATCHING OCCURS AS FOLLOWS:
;
;	IF THE INTERRUPT IS EXPECTED, THEN THE DRIVER IS CALLED AT ITS INTERRUPT
;	WAIT ADDRESS. ELSE THE INTERRUPT IS DISMISSED.
;-
 
LP$INT::				;Entry from dispatch
	MOVL	@(SP)+,R3		;Get address of IDB
	MOVQ	IDB$L_CSR(R3),R4	;Get controller CSR and owner UCB address
	BBCC	#UCB$V_INT,UCB$W_STS(R5),10$ ;If CLR, interrupt not expected
	CLRW	(R4)			;Disable output interrupts
	MOVL	UCB$L_FR3(R5),R3	;Restore remainder of driver context
	JSB	@UCB$L_FPC(R5)		;Call driver at interrupt wait address
10$:	MOVQ	(SP)+,R0		;Restore registers
	MOVQ	(SP)+,R2		;
	MOVQ	(SP)+,R4		;
	REI				;
	.PAGE
	.SBTTL	Line printer unit initialization
;+
; LP_LX11_INIT - LINE PRINTER UNIT INITIALIZATION
;
; THIS ROUTINE IS CALLED AT SYSTEM STARTUP AND AFTER A POWER FAILURE. THE
; ONLINE BIT IS SET FOR THE SPECIFIED UNIT.
;
; INPUTS:
;
;	R5 = ADDRESS OF DEVICE UCB.
;
; OUTPUTS:
;
;	THE ONLINE BIT IS SET IN THE DEVICE UCB AND THE ADDRESS OF THE UCB
;	IS FILLED INTO THE IDB OWNER FIELD.
;-
 
LP_LX11_INIT:				;LINE PRINTER UNIT INITIALIZATION
	BISW	#UCB$M_ONLINE,UCB$W_STS(R5) ;Set unit online
	MOVL	UCB$L_CRB(R5),R0	;Get address of CRB
	MOVL	CRB$L_INTD+VEC$L_IDB(R0),R0 ;Get address of IDB
	MOVL	R5,IDB$L_OWNER(R0)	;Set address of device UCB
	RSB				;Return

LP_LX11_CINIT:				;CONTROLLER INITIALIZATION
	MOVL	IDB$L_UCBLST(R5),R0	;Get address of UCB
	MOVL	#15,UCB$L_LP_TIMEOUT(R0);Set timeout value
	RSB				;
LP_END:					;Address of last location in driver
 
	.END
