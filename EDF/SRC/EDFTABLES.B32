%TITLE 'TPARSE tables for EDF utility.'
MODULE EDF$TABLES ( IDENT = 'V03-001' ,
    		ADDRESSING_MODE ( EXTERNAL = GENERAL ),
    		ADDRESSING_MODE ( NONEXTERNAL = GENERAL ),
    		LANGUAGE ( BLISS32 )
    		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:		VAX/VMS EDIT/FDL UTILITY
!
! ABSTRACT:		LIB$TPARSE tables for EDF V1.0
!
! ENVIRONMENT:		NATIVE/USER MODE
!
! AUTHOR: 		Ken Henderson
!
! CREATION DATE:	15-Sep-1981
!
! MODIFIED BY:
!
!			V03-001	KFH0001		Ken Henderson	2 April 1982
!			Modifed SEGn_xxx parsing
!			to fix FT2 QAR 1020. And
!			modified (keyword) parsing
!			to not allow extraneous
!			characters on the answer.
!
!--

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This module defines the TPARSE tables for looking up EDF keywords.
!
! CALLING SEQUENCE:
!
!	Used by the RTL routine LIB$TPARSE
!
! INPUT PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! OUTPUT PARAMETERS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINES CALLED:
!
!	NONE
!
! SIGNALS:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

! EXTERNAL DEFINITIONS
!
LIBRARY 'SYS$LIBRARY:STARLET';
LIBRARY 'SYS$LIBRARY:TPAMAC';

MACRO
	DESC_BLK =
		BLOCK [ 8,BYTE ]%;

GLOBAL LITERAL

	EDF$C_SMALLER_BUFFERS	= 0,
	EDF$C_FLATTER_FILES	= 1,

	EDF$C_FAST_CONVERT	= 0,
	EDF$C_NOFAST_CONVERT	= 1,
	EDF$C_RMS_PUTS		= 2,

	EDF$C_LINE_PLOT		= 0,
	EDF$C_SURFACE_PLOT	= 1,

	EDF$C_FILL_SURFACE	= 0,
	EDF$C_SIZE_SURFACE	= 1,
	EDF$C_INIT_SURFACE	= 2,
	EDF$C_ADDED_SURFACE	= 3,
	EDF$C_KEY_SURFACE	= 4,

	EDF$C_ADD		= 0,
	EDF$C_DELETE		= 1,
	EDF$C_EXIT		= 2,
	EDF$C_HELP		= 3,
	EDF$C_INVOKE		= 4,
	EDF$C_MODIFY		= 5,
	EDF$C_QUIT		= 6,
	EDF$C_VIEW		= 7,

	EDF$C_RS		= 0,	! record size
	EDF$C_KL		= 1,	! key length
	EDF$C_KP		= 2,	! key position
	EDF$C_IL		= 3,	! initial load
	EDF$C_BF		= 4,	! bucket fill
	EDF$C_RF		= 5,	! record format
	EDF$C_RC		= 6,	! data record comp
	EDF$C_KC		= 7,	! data key comp
	EDF$C_DK		= 8,	! dup keys
	EDF$C_LM		= 9,	! load method
	EDF$C_AR		= 10,	! added records
	EDF$C_IC		= 11,	! index record comp
	EDF$C_WP		= 12,	! write new plot
	EDF$C_FINIS		= 13,	! done with cycling
	EDF$C_PV		= 14,	! prologue version
	EDF$C_KT		= 15,	! key type

	EDF$C_DESIGN_FDL	= 1,
	EDF$C_OPTIMIZE_FDL	= 2,
	EDF$C_REDESIGN_FDL	= 3,

	EDF$C_NO		= 0,
	EDF$C_YES		= 1,

	EDF$C_DUMMY_CONST	= 0;

GLOBAL
	EDF$AB_STRING		: DESC_BLK,
	EDF$AB_COMMENT		: DESC_BLK,
	EDF$GL_SECNUM		: LONG,
	EDF$GL_PROT_MASK	: LONG,
	EDF$GL_FID1		: LONG,
	EDF$GL_FID2		: LONG,
	EDF$GL_FID3		: LONG,
	EDF$GL_UIC_GROUP	: LONG,
	EDF$GL_UIC_MEMBER	: LONG;

! +
! These are the Primary Attributes.
! -

! +
!	Transition Type			Next State	Parameter
! -

$INIT_STATE (EDF$AB_PRIMARY_TABLE_STA,EDF$AB_PRIMARY_TABLE_KEY);

$STATE	(,
!	('AA',				TPA$_EXIT, ,,,	00),	! SYNONYMS
!	('AK',				TPA$_EXIT, ,,,	01),
!	('ANALYSIS_OF_AREA',		TPA$_EXIT, ,,,	00),	! EDF doesn't
!	('ANALYSIS_OF_KEY',		TPA$_EXIT, ,,,	01),	! output these.
	('AREA',			S_AREA_N),
	('DATE',			TPA$_EXIT, ,,,	03),
	('FILE',			TPA$_EXIT, ,,,	04),
!	('IDENT',			TPA$_EXIT, ,,,	05),
! ***   ('JOURNALING',			TPA$_EXIT, ,,,	06),
	('KEY',				S_KEY_N),
	('RECORD',			TPA$_EXIT, ,,,	08),
	('SYSTEM',			TPA$_EXIT, ,,,	09),
	('TITLE',			TPA$_EXIT, ,,,	10)
	);

$STATE	(S_AREA_N,
	((S_PRINUM),			TPA$_EXIT, ,,,	02)
	);

$STATE	(S_KEY_N,
	((S_PRINUM),			TPA$_EXIT, ,,,	07)
	);

$STATE	(S_PRINUM,
	(TPA$_DECIMAL,			TPA$_EXIT),
	(TPA$_EOS,			TPA$_FAIL),
	(TPA$_LAMBDA,			TPA$_FAIL)
	);

! +
! These are the Secondary Attributes.
! -

! ANALYSIS_OF_AREA	these sections
! ANALYSIS_OF_KEY 	don't need tables - we never ask the user for them

! AREA PRIMARY

! +
!	Transition Type			Next State	Parameter
! -

$INIT_STATE (EDF$AB_AREA_TABLE_STA,EDF$AB_AREA_TABLE_KEY);

$STATE	(,
	('ALLOCATION',			TPA$_EXIT, ,,,	18),
	('BEST_TRY_CONTIGUOUS',		TPA$_EXIT, ,,,	19),
	('BUCKET_SIZE',			TPA$_EXIT, ,,,	20),
	('CONTIGUOUS',			TPA$_EXIT, ,,,	21),
	('EXACT_POSITIONING',		TPA$_EXIT, ,,,	22),
	('EXTENSION',			TPA$_EXIT, ,,,	23),
	('POSITION',			TPA$_EXIT, ,,,	24),
	('VOLUME',			TPA$_EXIT, ,,,	25)
	);

! DATE PRIMARY

! +
!	Transition Type			Next State	Parameter
! -

$INIT_STATE (EDF$AB_DATE_TABLE_STA,EDF$AB_DATE_TABLE_KEY);

$STATE	(,
	('BACKUP',			TPA$_EXIT, ,,,	26),
	('CREATION',			TPA$_EXIT, ,,,	27),
	('EXPIRATION',			TPA$_EXIT, ,,,	28),
	('REVISION',			TPA$_EXIT, ,,,	29)
	);

! FILE PRIMARY

! +
!	Transition Type			Next State	Parameter
! -

$INIT_STATE (EDF$AB_FILE_TABLE_STA,EDF$AB_FILE_TABLE_KEY);

$STATE	(,
	('ALLOCATION',			TPA$_EXIT, ,,,	30),
!	('BACKUP',			TPA$_EXIT, ,,,	31),
	('BEST_TRY_CONTIGUOUS',		TPA$_EXIT, ,,,	32),
	('BUCKET_SIZE',			TPA$_EXIT, ,,,	33),
!	('CLUSTER_SIZE',		TPA$_EXIT, ,,,	34),
	('CONTIGUOUS',			TPA$_EXIT, ,,,	35),
	('DEFAULT_NAME',		TPA$_EXIT, ,,,	36),
	('DELETE_ON_CLOSE',		TPA$_EXIT, ,,,	37),
	('DIRECTORY_ENTRY',		TPA$_EXIT, ,,,	38),
!	('ERASE_ON_DELETE',		TPA$_EXIT, ,,,	39),
	('EXTENSION',			TPA$_EXIT, ,,,	40),
	('GLOBAL_BUFFER_COUNT',		TPA$_EXIT, ,,,	41),
	('MAGTAPE_BLOCK_SIZE',		TPA$_EXIT, ,,,	42),
	('MAGTAPE_CURRENT_POSITION',	TPA$_EXIT, ,,,	43),
	('MAGTAPE_PROTECTION',		TPA$_EXIT, ,,,	44),
	('MAGTAPE_REWIND',		TPA$_EXIT, ,,,	45),
	('MAX_RECORD_NUMBER',		TPA$_EXIT, ,,,	46),
	('MAXIMIZE_VERSION',		TPA$_EXIT, ,,,	47),
	('NAME',			TPA$_EXIT, ,,,	48),
	('ORGANIZATION',		TPA$_EXIT, ,,,	49),
	('OWNER',			TPA$_EXIT, ,,,	50),
	('PRINT_ON_CLOSE',		TPA$_EXIT, ,,,	51),
	('PROTECTION',			TPA$_EXIT, ,,,	52),
	('READ_CHECK',			TPA$_EXIT, ,,,	53),
	('REVISION',			TPA$_EXIT, ,,,	54),
	('SUBMIT_ON_CLOSE',		TPA$_EXIT, ,,,	55),
	('SUPERSEDE',			TPA$_EXIT, ,,,	56),
	('TRUNCATE_ON_CLOSE',		TPA$_EXIT, ,,,	57),
	('WRITE_CHECK',			TPA$_EXIT, ,,,	58)
	);

! JOURNALING PRIMARY

! +
!	Transition Type			Next State	Parameter
! -

!$INIT_STATE (EDF$AB_JOURNAL_TABLE_STA,EDF$AB_JOURNAL_TABLE_KEY);

!$STATE	(,
! ***   ('AFTER_IMAGE',			TPA$_EXIT, ,,,	59),
! ***	('AUDIT_TRAIL',			TPA$_EXIT, ,,,	60),
! ***   ('BEFORE_IMAGE',		TPA$_EXIT, ,,,	61),
! ***   ('RECOVERY_UNIT',		TPA$_EXIT, ,,,	62)
!	);

! KEY PRIMARY

! +
!	Transition Type			Next State	Parameter
! -

$INIT_STATE (EDF$AB_KEY_TABLE_STA,EDF$AB_KEY_TABLE_KEY);

$STATE	(,
	('CHANGES',			TPA$_EXIT, ,,,	63),
	('DATA_AREA',			TPA$_EXIT, ,,,	64),
	('DATA_FILL',			TPA$_EXIT, ,,,	65),
	('DATA_KEY_COMPRESSION',	TPA$_EXIT, ,,,	66),
	('DATA_RECORD_COMPRESSION',	TPA$_EXIT, ,,,	67),
	('DUPLICATES',			TPA$_EXIT, ,,,	68),
	('INDEX_AREA',			TPA$_EXIT, ,,,	69),
	('INDEX_COMPRESSION',		TPA$_EXIT, ,,,	70),
	('INDEX_FILL',			TPA$_EXIT, ,,,	71),
	('LENGTH',			TPA$_EXIT, ,,,	77),
	('LEVEL1_INDEX_AREA',		TPA$_EXIT, ,,,	72),
	('NAME',			TPA$_EXIT, ,,,	73),
	('NULL_KEY',			TPA$_EXIT, ,,,	74),
	('NULL_VALUE',			TPA$_EXIT, ,,,	75),
	('POSITION',			TPA$_EXIT, ,,,	78),
	('PROLOGUE',			TPA$_EXIT, ,,,	76),
	((S_SEGLEN),			TPA$_EXIT, ,,,	77),
	((S_SEGPOS),			TPA$_EXIT, ,,,	78),
!	((S_SEGTYP),			TPA$_EXIT, ,,,	79),
	('TYPE',			TPA$_EXIT, ,,,	79),
	(TPA$_LAMBDA,			TPA$_FAIL)
	);

$STATE	(S_SEGLEN,
	((S_SEG))
	);
$STATE	(,
	('LENGTH',	TPA$_EXIT)
	);

$STATE	(S_SEGPOS,
	((S_SEG))
	);
$STATE	(,
	('POSITION',	TPA$_EXIT)
	);

$STATE	(S_SEGTYP,
	((S_SEG))
	);
$STATE	(,
	('TYPE',	TPA$_EXIT)
	);

$STATE	(S_SEG,
	('S')
	);
$STATE	(,
	('E')
	);
$STATE	(,
	('G')
	);
$STATE	(,
	(TPA$_DECIMAL,			,,,	EDF$GL_SECNUM)
	);
$STATE	(,
	('_',	TPA$_EXIT)
	);

! RECORD PRIMARY

! +
!	Transition Type			Next State	Parameter
! -

$INIT_STATE (EDF$AB_RECORD_TABLE_STA,EDF$AB_RECORD_TABLE_KEY);

$STATE	(,
	('BLOCK_SPAN',			TPA$_EXIT, ,,,	80),
	('CARRIAGE_CONTROL',		TPA$_EXIT, ,,,	81),
	('CONTROL_FIELD_SIZE',		TPA$_EXIT, ,,,	82),
	('FORMAT',			TPA$_EXIT, ,,,	83),
	('SIZE',			TPA$_EXIT, ,,,	84)
	);

! SYSTEM PRIMARY

! +
!	Transition Type			Next State	Parameter
! -

$INIT_STATE (EDF$AB_SYSTEM_TABLE_STA,EDF$AB_SYSTEM_TABLE_KEY);

$STATE	(,
	('DEVICE',			TPA$_EXIT, ,,,	85),
	('SOURCE',			TPA$_EXIT, ,,,	86),
	('TARGET',			TPA$_EXIT, ,,,	87)
	);

! +
! Qualifier Keywords
! -

! POSITION

! +
!	Transition Type			Next State	Parameter
! -

$INIT_STATE (EDF$AB_POSIT_TABLE_STA,EDF$AB_POSIT_TABLE_KEY);

$STATE	(,
	('ANY_CYLINDER',		TPA$_EXIT, ,,,	00),	! FDL$C_ANYPOS
!	('CLUSTER',			TPA$_EXIT, ,,,	01),	! FDL$C_CLUSPOS
	('CYLINDER',			TPA$_EXIT, ,,,	02),	! FDL$C_CYLPOS
	('FILE_ID',			TPA$_EXIT, ,,,	03),	! FDL$C_FIDPOS
	('FILE_NAME',			TPA$_EXIT, ,,,	04),	! FDL$C_FNMPOS
	('LOGICAL',			TPA$_EXIT, ,,,	05),	! FDL$C_LOGPOS
!	('NOPOS',			TPA$_EXIT, ,,,	06),	! FDL$C_NOPOS
	('NONE',			TPA$_EXIT, ,,,	06),	! FDL$C_NOPOS
	('VIRTUAL',			TPA$_EXIT, ,,,	07)	! FDL$C_VIRPOS
	);

! FID

! +
!	Transition Type			Next State	Parameter
! -

$INIT_STATE (EDF$AB_FID_TABLE_STA,EDF$AB_FID_TABLE_KEY);

!	For File ID (FID)
!
!	( n,n,n )	! Where n is a decimal number
!

!	State Name
!
!	Transisition	Next		Action				 Mask		Action Routine
!	   Type		State		Routine		Mask		Address		  Parameter
!
$STATE	(S_FID,
	((S_FID_P),	TPA$_EXIT)
	);

$STATE	(S_FID_P,
	('(')
	);
$STATE	(,
	(TPA$_DECIMAL,	,		,		,		EDF$GL_FID1)
	);
$STATE	(,
	(',')
	);
$STATE	(,
	(TPA$_DECIMAL,	,		,		,		EDF$GL_FID2)
	);
$STATE	(,
	(',')
	);
$STATE	(,
	(TPA$_DECIMAL,	,		,		,		EDF$GL_FID3)
	);
$STATE	(,
	(')',		TPA$_EXIT)
	);

! UIC

! +
!	Transition Type			Next State	Parameter
! -

$INIT_STATE (EDF$AB_UIC_TABLE_STA,EDF$AB_UIC_TABLE_KEY);

!	For UIC
!
!	[ nnn,nnn ]	! Where nnn is an octal number
!

!	State Name
!
!	Transisition	Next		Action				 Mask		Action Routine
!	   Type		State		Routine		Mask		Address		  Parameter
!
$STATE	(S_UIC,
	((S_UIC_P),	TPA$_EXIT)
	);

$STATE	(S_UIC_P,
	('[')
	);
$STATE	(,
	(TPA$_OCTAL,	,		,		,		EDF$GL_UIC_GROUP)
	);
$STATE	(,
	(',')
	);
$STATE	(,
	(TPA$_OCTAL,	,		,		,		EDF$GL_UIC_MEMBER)
	);
$STATE	(,
	(']',		TPA$_EXIT)
	);


! PROTECTION

! +
!	Transition Type			Next State	Parameter
! -

$INIT_STATE (EDF$AB_PROT_TABLE_STA,EDF$AB_PROT_TABLE_KEY);

!	For Protection Spec
!
!	(SYSTEM:RWED,OWNER:....)	or
!
!	(SYSTEM=RWED,OWNER=....)
!

!	State Name
!
!	Transisition	Next		Action				 Mask		Action Routine
!	   Type		State		Routine		Mask		Address		  Parameter
!
$STATE	(S_PROT,
	((S_PROT_P),	TPA$_EXIT)
	);

$STATE	(S_PROT_P,
	('(')
	);
$STATE	(S_NEXT_PROT,
	('SYSTEM',	S_SYSPR),
	('OWNER',	S_OWNPR),
	('GROUP',	S_GROPR),
	('WORLD',	S_WORPR)
	);

$STATE	(S_SYSPR,
	(':'),
	('='),
	(TPA$_LAMBDA,	S_END_PRO)
	);
$STATE	(S_SYSPRO,
	('R',		S_SYSPRO,	,		%X'0001',	EDF$GL_PROT_MASK),
	('W',		S_SYSPRO,	,		%X'0002',	EDF$GL_PROT_MASK),
	('E',		S_SYSPRO,	,		%X'0004',	EDF$GL_PROT_MASK),
	('D',		S_SYSPRO,	,		%X'0008',	EDF$GL_PROT_MASK),
	(TPA$_LAMBDA,	S_END_PRO)
	);

$STATE	(S_OWNPR,
	(':'),
	('='),
	(TPA$_LAMBDA,	S_END_PRO)
	);
$STATE	(S_OWNPRO,
	('R',		S_OWNPRO,	,		%X'0010',	EDF$GL_PROT_MASK),
	('W',		S_OWNPRO,	,		%X'0020',	EDF$GL_PROT_MASK), 
	('E',		S_OWNPRO,	,		%X'0040',	EDF$GL_PROT_MASK),
	('D',		S_OWNPRO,	,		%X'0080',	EDF$GL_PROT_MASK),
	(TPA$_LAMBDA,	S_END_PRO)
	);

$STATE	(S_GROPR,
	(':'),
	('='),
	(TPA$_LAMBDA,	S_END_PRO)
	);
$STATE	(S_GROPRO,
	('R',		S_GROPRO,	,		%X'0100',	EDF$GL_PROT_MASK),
	('W',		S_GROPRO,	,		%X'0200',	EDF$GL_PROT_MASK),
	('E',		S_GROPRO,	,		%X'0400',	EDF$GL_PROT_MASK),
	('D',		S_GROPRO,	,		%X'0800',	EDF$GL_PROT_MASK),
	(TPA$_LAMBDA,	S_END_PRO)
	);

$STATE	(S_WORPR,
	(':'),
	('='),
	(TPA$_LAMBDA,	S_END_PRO)
	);
$STATE	(S_WORPRO,
	('R',		S_WORPRO,	,		%X'1000',	EDF$GL_PROT_MASK),
	('W',		S_WORPRO,	,		%X'2000',	EDF$GL_PROT_MASK),
	('E',		S_WORPRO,	,		%X'4000',	EDF$GL_PROT_MASK),
	('D',		S_WORPRO,	,		%X'8000',	EDF$GL_PROT_MASK),
	(TPA$_LAMBDA,	S_END_PRO)
	);

$STATE	(S_END_PRO,
	(',',		S_NEXT_PROT),
	(')',		TPA$_EXIT)
	);

! ORGANIZATION

! +
!	Transition Type			Next State	Parameter
! -

$INIT_STATE (EDF$AB_ORG_TABLE_STA,EDF$AB_ORG_TABLE_KEY);

$STATE	(,
	('INDEXED',			TPA$_EXIT, ,,,	08),	! FAB$C_IDX
	('RELATIVE',			TPA$_EXIT, ,,,	09),	! FAB$C_REL
	('SEQUENTIAL',			TPA$_EXIT, ,,,	10)	! FAB$C_SEQ
	);

! SOURCE/TARGET

! +
!	Transition Type			Next State	Parameter
! -

$INIT_STATE (EDF$AB_SOURCE_TABLE_STA,EDF$AB_SOURCE_TABLE_KEY);

!
! NEED TO COPY KEITH'S PARSING OF THESE TO SUPPORT THEM.
!
$STATE	(,
	('IAS',				TPA$_EXIT, ,,,	11),	! FDL$C_IAS
	('RSTS/E',			TPA$_EXIT, ,,,	12),	! FDL$C_RSTS
	('RSX-11M',			TPA$_EXIT, ,,,	13),	! FDL$C_M
	('RSX-11M-PLUS',		TPA$_EXIT, ,,,	14),	! FDL$C_MPLUS
	('RT-11',			TPA$_EXIT, ,,,	15),	! FDL$C_RT
	('TRAX-11',			TPA$_EXIT, ,,,	16),	! FDL$C_TRAX
	('VAX/VMS',			TPA$_EXIT, ,,,	17)	! FDL$C_VMS
	);

! AUDIT_TRAIL

! +
!	Transition Type			Next State	Parameter
! -

!$INIT_STATE (EDF$AB_AT_TABLE_STA,EDF$AB_AT_TABLE_KEY);

!$STATE	(,
! ***   ('ACCESSES',			TPA$_EXIT, ,,,	18),
! ***   ('ALL',				TPA$_EXIT, ,,,	19),
! ***   ('NO_TRAIL',			TPA$_EXIT, ,,,	20),
! ***   ('NONE',			TPA$_EXIT, ,,,	20),
! ***   ('READS',			TPA$_EXIT, ,,,	21),
! ***   ('WRITES',			TPA$_EXIT, ,,,	22)
!	);

! RECOVERY_UNIT

! +
!	Transition Type			Next State	Parameter
! -

!$INIT_STATE (EDF$AB_RU_TABLE_STA,EDF$AB_RU_TABLE_KEY);

!$STATE	(,
! ***   ('DURING_RU',			TPA$_EXIT, ,,,	23),
! ***   ('NO_RU',			TPA$_EXIT, ,,,	24),
! ***   ('NONE',			TPA$_EXIT, ,,,	24),
! ***   ('RU_REQUIRED',			TPA$_EXIT, ,,,	25)
!	);

! CARRIAGE_CONTROL

! +
!	Transition Type			Next State	Parameter
! -

$INIT_STATE (EDF$AB_CARR_TABLE_STA,EDF$AB_CARR_TABLE_KEY);

$STATE	(,
	('CARRIAGE_RETURN',		TPA$_EXIT, ,,,	26),	! FDL$C_CR
	('FORTRAN',			TPA$_EXIT, ,,,	27),	! FDL$C_FTN
	('NONE',			TPA$_EXIT, ,,,	28),	! FDL$C_NONE
	('PRINT',			TPA$_EXIT, ,,,	29)	! FDL$C_PRINT
	);

! FORMAT

! +
!	Transition Type			Next State	Parameter
! -

$INIT_STATE (EDF$AB_FORMAT_TABLE_STA,EDF$AB_FORMAT_TABLE_KEY);

$STATE	(,
	('FIXED',			TPA$_EXIT, ,,,	30),	! FAB$C_FIX
	('STREAM',			TPA$_EXIT, ,,,	31),	! FDL$C_STM
	('STREAM_CR',			TPA$_EXIT, ,,,	32),	! FDL$C_STMCR
	('STREAM_LF',			TPA$_EXIT, ,,,	33),	! FDL$C_STMLF
	('UNDEFINED',			TPA$_EXIT, ,,,	34),	! FAB$C_UDF
	('VARIABLE',			TPA$_EXIT, ,,,	35),	! FAB$C_VAR
	('VFC',				TPA$_EXIT, ,,,	36)	! FAB$C_VFC
	);

! TYPE

! +
!	Transition Type			Next State	Parameter
! -

$INIT_STATE (EDF$AB_TYPE_TABLE_STA,EDF$AB_TYPE_TABLE_KEY);

$STATE	(,
	('BIN2',			TPA$_EXIT, ,,,	37),	! XAB$C_BN2
	('BIN4',			TPA$_EXIT, ,,,	38),	! XAB$C_BN4
	('DECIMAL',			TPA$_EXIT, ,,,	39),	! XAB$C_PAC
	('INT2',			TPA$_EXIT, ,,,	40),	! XAB$C_IN2
	('INT4',			TPA$_EXIT, ,,,	41),	! XAB$C_IN4
	('STRING',			TPA$_EXIT, ,,,	42)	! XAB$C_STG
	);

! LOAD_METHOD

! +
!	Transition Type			Next State	Parameter
! -

$INIT_STATE (EDF$AB_LOAD_METHOD_TABLE_STA,EDF$AB_LOAD_METHOD_TABLE_KEY);

$STATE	(,
	('FAST_CONVERT',		TPA$_EXIT, ,,,	EDF$C_FAST_CONVERT),
	('NOFAST_CONVERT',		TPA$_EXIT, ,,,	EDF$C_NOFAST_CONVERT),
	('RMS_PUTS',			TPA$_EXIT, ,,,	EDF$C_RMS_PUTS)
	);

! BUCKET_WEIGHT

! +
!	Transition Type			Next State	Parameter
! -

$INIT_STATE (EDF$AB_WEIGHT_TABLE_STA,EDF$AB_WEIGHT_TABLE_KEY);

$STATE	(,
	('FLATTER_FILES',		TPA$_EXIT, ,,,	EDF$C_FLATTER_FILES),
	('SMALLER_BUFFERS',		TPA$_EXIT, ,,,	EDF$C_SMALLER_BUFFERS)
	);

! DESIGN_STYLE

! +
!	Transition Type			Next State	Parameter
! -

$INIT_STATE (EDF$AB_DESIGN_STYLE_TABLE_STA,EDF$AB_DESIGN_STYLE_TABLE_KEY);

$STATE	(,
	('LINE_PLOT',			TPA$_EXIT, ,,,	EDF$C_LINE_PLOT),
	('SURFACE_PLOT',		TPA$_EXIT, ,,,	EDF$C_SURFACE_PLOT)
	);

! SURFACE_OPTION

! +
!	Transition Type			Next State	Parameter
! -

$INIT_STATE (EDF$AB_SURFACE_OPTION_TABLE_STA,EDF$AB_SURFACE_OPTION_TABLE_KEY);

$STATE	(,
	('ADD',				TPA$_EXIT, ,,,	EDF$C_ADDED_SURFACE),
	('FILL',			TPA$_EXIT, ,,,	EDF$C_FILL_SURFACE),
	('INIT',			TPA$_EXIT, ,,,	EDF$C_INIT_SURFACE),
	('KEY',				TPA$_EXIT, ,,,	EDF$C_KEY_SURFACE),
	('RECORD',			TPA$_EXIT, ,,,	EDF$C_SIZE_SURFACE)
	);

! CURRENT_FUNC

! +
!	Transition Type			Next State	Parameter
! -

$INIT_STATE (EDF$AB_CURRENT_FUNC_TABLE_STA,EDF$AB_CURRENT_FUNC_TABLE_KEY);

$STATE	(,
	('ADD',				, ,,,	EDF$C_ADD),
	('DELETE',			, ,,,	EDF$C_DELETE),
	('EXIT',			, ,,,	EDF$C_EXIT),
	('HELP',			, ,,,	EDF$C_HELP),
	('INVOKE',			, ,,,	EDF$C_INVOKE),
	('MODIFY',			, ,,,	EDF$C_MODIFY),
	('QUIT',			, ,,,	EDF$C_QUIT),
	('VIEW',			, ,,,	EDF$C_VIEW)
	);

$STATE	(,
	(TPA$_EOS,			TPA$_EXIT),
	(TPA$_LAMBDA,			TPA$_FAIL)
	);

! DESIGN_CYCLE

! +
!	Transition Type			Next State	Parameter
! -

$INIT_STATE (EDF$AB_DESIGN_CYCLE_TABLE_STA,EDF$AB_DESIGN_CYCLE_TABLE_KEY);

$STATE	(,
	('AR',				TPA$_EXIT, ,,,	EDF$C_AR),	! ADDED RECORDS
	('BF',				TPA$_EXIT, ,,,	EDF$C_BF),	! BUCKET FILL
	('DK',				TPA$_EXIT, ,,,	EDF$C_DK),	! DUP KEYS
	('FD',				TPA$_EXIT, ,,,	EDF$C_FINIS),	! DONE WITH CYCLING
	('IC',				TPA$_EXIT, ,,,	EDF$C_IC),	! INDEX RECORD COMPRESSION
	('IL',				TPA$_EXIT, ,,,	EDF$C_IL),	! INITIAL LOAD
	('KC',				TPA$_EXIT, ,,,	EDF$C_KC),	! DATA KEY COMPRESSION
	('KL',				TPA$_EXIT, ,,,	EDF$C_KL),	! KEY LENGTH
	('KP',				TPA$_EXIT, ,,,	EDF$C_KP),	! KEY POSITION
	('KT',				TPA$_EXIT, ,,,	EDF$C_KT),	! KEY TYPE
	('LM',				TPA$_EXIT, ,,,	EDF$C_LM),	! LOAD METHOD
	('PV',				TPA$_EXIT, ,,,	EDF$C_PV),	! PROLOGUE VERSION
	('RC',				TPA$_EXIT, ,,,	EDF$C_RC),	! DATA RECORD COMPRESSION
	('RF',				TPA$_EXIT, ,,,	EDF$C_RF),	! RECORD FORMAT
	('RS',				TPA$_EXIT, ,,,	EDF$C_RS)	! RECORD SIZE
	);

! SCRIPT_OPTION

! +
!	Transition Type			Next State	Parameter
! -

$INIT_STATE (EDF$AB_SCRIPT_OPTION_TABLE_STA,EDF$AB_SCRIPT_OPTION_TABLE_KEY);

$STATE	(,
	('DESIGN',			TPA$_EXIT, ,,,	EDF$C_DESIGN_FDL),
	('OPTIMIZE',			TPA$_EXIT, ,,,	EDF$C_OPTIMIZE_FDL),
	('REDESIGN',			TPA$_EXIT, ,,,	EDF$C_REDESIGN_FDL)
	);

! YES_NO

! +
!	Transition Type			Next State	Parameter
! -

$INIT_STATE (EDF$AB_YES_NO_TABLE_STA,EDF$AB_YES_NO_TABLE_KEY);

$STATE	(,
	('FALSE',			TPA$_EXIT, ,,,	EDF$C_NO),
	('NO',				TPA$_EXIT, ,,,	EDF$C_NO),
	('TRUE',			TPA$_EXIT, ,,,	EDF$C_YES),
	('YES',				TPA$_EXIT, ,,,	EDF$C_YES)
	);

END ELUDOM
