	.TITLE	EDF$TERM - MACRO-32 SUPPORT ROUTINES FOR EDF.
	.IDENT	'V03-000'
; ++
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
; FACILITY:		VAX/VMS FDL EDITOR (EDF Facility)
; 
; ABSTRACT:		MACRO-32 subroutines for EDF
; 
; ENVIRONMENT:		NATIVE/USER MODE
; 
; AUTHOR:		Ken F. Henderson Jr.
;
; CREATION DATE:	7-Apr-1981
;
; MODIFIED BY:
; 
; -- }

$SSDEF
$DIBDEF
$IODEF
$DCDEF
$TTDEF
$TT2DEF

		.PSECT		EDF$TERM_DATABASE,LONG
; ++
;
; This is the static database for the module.
; It contains the necessary data blocks for the QIO services.
;
;
; --

TTY:		.ASCID		/SYS$INPUT:/

TTYCHN:		.BLKW		1
TTYIN: 		.BLKB		1

		.ALIGN		LONG

TTYIOSB:	.BLKW		4
		TERMSPEED	= TTYIOSB + 2

EDF$OLDMODE::	.BLKW		12
		TERMNUM		= EDF$OLDMODE + 1
		TERMCHR		= EDF$OLDMODE + 4
		EXTRABITS	= EDF$OLDMODE + 8

EDF$NEWMODE::	.BLKW		12
		TERMPAGE	= EDF$NEWMODE + 7

DIB:		.BLKB		DIB$K_LENGTH
DIB_DESC:	.WORD		DIB$K_LENGTH, 0
    		.ADDRESS	DIB

		.ALIGN		LONG

EXITBLOCK:					; exit control block
		.LONG		0		; system uses this for pointer
		.ADDRESS	EDF$RESET_TERM	; address of exit handler (to reset tt)
		.LONG		1		; number of args for handler
		.ADDRESS	STATUS		; address to receive status code
STATUS:		.BLKL		1		; status code

	.PSECT		EDF$TERM_CODE,LONG
; ++
;
; EDF$TERM_SETUP -- Set up the terminal and get its speed.
;
; This routine queries the terminal driver to see what's the
; speed of the terminal we're talking to.
; It also checks to make sure that indeed the input is a terminal,
; and it also sets the page length to 16 for hardcopy terminals.
; It also declares an exit handler and sets up a control/C AST.
;
; CALLING SEQUENCE:
;
; TERMINAL_SPEED	:= EDF$TERM_SETUP;
;
;
; --

	.ENTRY	EDF$TERM_SETUP,^M<>

	$ASSIGN_S -
		DEVNAM	= TTY,-
		CHAN	= TTYCHN

	BLBS	R0,7$
	BRW	ERROR

7$:	$GETCHN_S -
		CHAN	= TTYCHN,-
		PRIBUF	= DIB_DESC

	BLBS	R0,9$
	BRW	ERROR
9$:	CMPB	DIB+DIB$B_DEVCLASS, #DC$_TERM
	BEQL	PAST

FATAL:	PUSHL	#EDF$_DEVCLASS			; ONLY TERMINALS ARE ALLOWED
	CALLS	#1,	G^LIB$STOP

PAST:	$QIOW_S -
		CHAN	= TTYCHN,-
		FUNC	= #IO$_SENSEMODE,-
		IOSB	= TTYIOSB,-
		P1	= EDF$OLDMODE

	BBS	#TT$V_SCOPE,	TERMCHR,-	; SKIP DOWN IF IT'S A SCOPE
				VIDEO

	MOVQ	EDF$OLDMODE,	EDF$NEWMODE	; COPY EDF$OLDMODE INTO EDF$NEWMODE
	MOVQ	EDF$OLDMODE+8,	EDF$NEWMODE+8
	MOVQ	EDF$OLDMODE+16,	EDF$NEWMODE+16
	MOVB	#16,		TERMPAGE	; SET PAGE = 16 LINES

	$QIOW_S -				; HARDCOPY TERMINALS ARE SPECIAL
		CHAN    = TTYCHN,-
		FUNC	= #IO$_SETMODE,-
		P1	= EDF$NEWMODE

VIDEO:

	$DCLEXH_S	DESBLK=EXITBLOCK	; DECLARE THE EXIT HANDLER

	CALLS	#0,	EDF$CTRLCAST		; SETUP ^C AST ROUTINE

	MOVZBL	TERMSPEED,	R0
	RET

ERROR:
	$EXIT_S	R0

; ++
;
; EDF$CTRLCAST -- Set up ^C ast.
;
; This routine sets up another ^C ast.
;
; CALLING SEQUENCE:
;
; EDF$CTRLCAST;
;
; --

	.ENTRY	EDF$CTRLCAST,^M<>

	$QIOW_S -				; SET UP THE CONTROL/C AST
		CHAN    = TTYCHN,-
		FUNC	= #IO$_SETMODE!IO$M_CTRLCAST,-
		P1	= CTRLCAST_ROUTINE

	RET

; ++
;
; EDF$RESET_TERM -- Reset TTDRV to its original mode.
;
; This routine returns TTDRV to it start mode, plus it calls
; EDF$RESET_SCROLL to put the scrolling back to full screen.
;
; CALLING SEQUENCE:
;
; EDF$RESET_TERM;
;
; --

	.ENTRY	EDF$RESET_TERM,^M<>

	$QIOW_S -
		CHAN    = TTYCHN,-
		FUNC	= #IO$_SETMODE,-
		P1	= EDF$OLDMODE

	CALLS	#0,	EDF$RESET_SCROLL	; RESET VT100'S SCROLL REGION
	RET

; ++
;
; CTRLCAST_ROUTINE -- Catch Control/C when typed by the user.
;
; This routine does a SYS$EXIT to call the exit handler before leaving.
;
; CALLING SEQUENCE:
;
; called as an AST routine
;
; --

	.ENTRY	CTRLCAST_ROUTINE,^M<>

	$EXIT_S		; invoke image rundown, which calls the exit handler

	RET		; never gets here - we hope!

.END
