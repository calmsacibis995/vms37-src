{ ++

    		FILE: SRC$:EDFVAR.PAS - Pascal include file to define
		top level variables for the EDF utility.

 ****************************************************************************
 *									    *
 *  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
 *  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
 *  ALL RIGHTS RESERVED.						    *
 * 									    *
 *  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
 *  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
 *  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
 *  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
 *  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
 *  TRANSFERRED.							    *
 * 									    *
 *  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
 *  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
 *  CORPORATION.							    *
 * 									    *
 *  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
 *  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
 * 									    *
 *									    *
 ****************************************************************************





FACILITY:	VAX/VMS EDF (EDIT/FDL) UTILITY

ABSTRACT:	This facility is used to create, modify, and optimize
		FDL specification files.

ENVIRONMENT:	NATIVE/USER MODE

AUTHOR:		Ken F. Henderson Jr.

CREATION DATE:	27-Mar-1981

MODIFIED BY:

		V03-002	KFH0002		Ken Henderson		2 April 1982
			Added EDF$GL_SECNUM.

		V03-001	KFH0001		Ken Henderson		23-Mar-1982
    			Took out EDITFDL.

-- }

    { +
    These are for the FDL file(s).
    - }
    FDL_DEST			: TEXT;		{ *** This must be First!! *** }
					{ to prevent a Pascal V1.3 ver skew problem }
    INPUT_FILENAME_DESC		: DESCRIPTOR;
    OUTPUT_FILENAME_DESC	: DESCRIPTOR;
    ANALYSIS_FILENAME_DESC	: DESCRIPTOR;
    RES_OUTPUT_FILENAME_DESC	: DESCRIPTOR;
    DEFAULT_FILENAME_DESC	: DESCRIPTOR;
    EDF$MAKE_FDL_DESC		: DESCRIPTOR;
    NL_DEV_DESC			: DESCRIPTOR;
    ANALYSIS_SPECIFIED		: BOOLEAN;
    ANALYSIS_ONLY		: BOOLEAN;

    { +
    This is the main loop variable for the utility.
    We cycle while it's true.
    - }
    EDITING		: BOOLEAN;

    { +
    This is for outputting FDL to the terminal.
    - }
    SYS$OUTPUT_NAME	: STRING11;

    { +
    This stores the currently active function.
    - }
    CURRENT_FUNCTION	: FUNCTION_TYPE;

    { +
    These indicate whether classes of errors were detected.
    - }
    SYS$INPUT_ERROR	: BOOLEAN;
    RMS_INPUT_ERROR	: BOOLEAN;
    RMS_OUTPUT_ERROR	: BOOLEAN;
    CONTROL_ZEE_TYPED	: BOOLEAN;
    MAIN_CTRLZ		: BOOLEAN;
    MAIN_LEVEL		: BOOLEAN;
    QUESTION_TYPED	: BOOLEAN;

    { +
    This is for graphing.
    - }
    XY_ARRAY		: XY_ARRAY_TYPE;
    COLOR_ARRAY		: XY_ARRAY_TYPE;
    COLOR_ROW		: PACKED ARRAY [0..31] OF BYTE;
    BREAKPOINT_LEFT	: INTEGER;
    BREAKPOINT_MID	: INTEGER;
    BREAKPOINT_RIGHT	: INTEGER;
    GRAPH_TYPE		: INTEGER;
    CURRENT_GRAPH_INDEX	: INTEGER;
    LAST_GRAPH_INDEX	: INTEGER;
    STEPS		: INTEGER;
    Y_HIGH		: INTEGER;
    Y_LOW		: INTEGER;
    Y_INCR		: INTEGER;
    Y_LABEL		: STRING32;

    { +
    These are the 'width' arrays that indicate how long a particular keyword
    should be typed.
    - }
    PRIMARY_WIDTH	: PACKED ARRAY [PRIMARY_TYPE] OF BYTE;
    SECONDARY_WIDTH	: PACKED ARRAY [SECONDARY_TYPE] OF BYTE;
    QUALIFIER_WIDTH	: PACKED ARRAY [QUALIFIER_TYPE] OF BYTE;

    { +
    This array stores the maximum value of the number-valued secondaries.
    - }
    SECONDARY_MAX	: ARRAY [SECONDARY_TYPE] OF INTEGER;

    { +
    This array stores the legal sequencing of Primaries as defined by the
    FDL Specification.
    - }
    PRI_SEQ		: PACKED ARRAY [PRIMARY_TYPE] OF BYTE;

    { +
    These store the character sequences to set the video attribute modes
    of the VT100 (and compatible) terminals.
    - }
    ANSI_RESET		: STRING4;
    ANSI_BOLD		: STRING4;
    ANSI_UNDERSCORE	: STRING4;
    ANSI_BLINK		: STRING4;
    ANSI_REVERSE	: STRING4;

    VID_STRING4		: STRING4;
    NULL_STRING4	: STRING4;
    SHIFT		: STRING4;
    LOW_SHIFT		: STRING3;

    NULL_CHAR		: CHAR;

    { +
    This is the terminal and screen database.
    - }
    TAB			: CHAR;
    ESCAPE		: CHAR;
    APOSTROPHE		: CHAR;
    CONTROL_W		: CHAR;
    CONTROL_Z		: CHAR;
    QUESTION_MARK	: CHAR;
    DASH		: CHAR;
    ERR_CHAR		: CHAR;
    CONTROL_G		: CHAR;
    CRLF		: STRING2;
    TERMINAL_TYPE	: BYTE;
    TERMINAL_SPEED	: BYTE;
    ANSI_CRT		: BOOLEAN;
    REGIS		: BOOLEAN;
    DEC_CRT		: BOOLEAN;
    DEV_TYPE		: INTEGER;
    VIDEO_TERMINAL	: BOOLEAN;
    VID_TERM		: INTEGER;
    SCREEN_FLAGS	: CTRL_ARRAY;
    LINE_WIDTH		: INTEGER;
    LINES_PER_PAGE	: INTEGER;
    DEST_IS_TERMINAL	: BOOLEAN;
    LINES_SHOWN		: INTEGER;
    MINIMUM_TERM_WIDTH	: INTEGER;
    MINIMUM_VIDEO_PAGE	: INTEGER;
    SCROLLING_SET	: BOOLEAN;

    FUDGE		: RECORD
			    CASE WHICH : SWITCH OF
				LARGE	: (LONGWORD : INTEGER);
				SMALL	: (HALFWORD : PACKED RECORD
					LOW_BYTE,FILL1,FILL2,FILL3 : BYTE
					END)
			    END;

    FULL_PROMPT		: BOOLEAN;
    TEMP_FULL_PROMPT	: BOOLEAN;
    FIRST_SCRIPT	: SCRIPT_TITLES;
    SCRIPT_OPTION	: SCRIPT_TITLES;
    ORIG_TIME		: REAL;
    QUAD_TIME		: QUADWORD;

    COL_ONE		: INTEGER;
    LINE_ONE		: INTEGER;
    LOWER_LINE		: INTEGER;
    PROMPT_LINE		: INTEGER;

    PARAM_BLOCK		: TPA_REC;

    { +
    This is used to tell LBR$OUTPUT_HELP that we want EDF's help.
    - }
    EDFHLP_STRING	: STRING6;
    IDENT_STRING	: STRING41;
    IDENT_STRING_LENGTH	: INTEGER;

    { +
    This is the version number of the EDF Utility.
    - }
    EDF_HEADER		: STRING17;

    CONTINUE_TEXT	: STRING26;
    STATUS		: INTEGER;
    FAB_DUMMY		: FAB_PTR;

    { +
    THESE WILL BE GLOBAL IN V2.
    - }
    FDL$AB_LINE				: DESCRIPTOR_PTR;
    FDL$AB_CTRL				: CTRL_ARRAY_ADDR;
    FDL$GL_PCALL			: FDL_PTR;
    FDL$AB_COMMENT			: DESCRIPTOR_PTR;
    FDL$AB_STRING			: DESCRIPTOR_PTR;
    FDL$GL_PRIMARY			: PRI_PTR;
    FDL$GL_PRINUM			: LONG_PTR;
    FDL$GL_SECONDARY			: SEC_PTR;
    FDL$GL_SECNUM			: LONG_PTR;
    FDL$GL_QUALIFIER			: LONG_PTR;
    FDL$GL_NUMBER			: LONG_PTR;
    FDL$GL_NUMTYPE			: NUMT_PTR;
    FDL$GL_SWITCH			: LONG_PTR;
    FDL$GL_UIC_GROUP			: LONG_PTR;
    FDL$GL_UIC_MEMBER			: LONG_PTR;
    FDL$GL_PROTECTION			: CTRL_ARRAY_ADDR;
    FDL$GL_FID1				: LONG_PTR;
    FDL$GL_FID2				: LONG_PTR;
    FDL$GL_FID3				: LONG_PTR;
    LIB$PUT_OUTPUT_PTR			: LONG_PTR;
    LIB$GET_INPUT_PTR			: LONG_PTR;
    EDF$GL_SECNUM			: LONG_PTR;
    EDF$GL_PROT_MASK			: CTRL_ARRAY_ADDR;
    EDF$GL_FID1				: LONG_PTR;
    EDF$GL_FID2				: LONG_PTR;
    EDF$GL_FID3				: LONG_PTR;
    EDF$GL_UIC_GROUP			: LONG_PTR;
    EDF$GL_UIC_MEMBER			: LONG_PTR;
    EDF$AB_STRING			: DESCRIPTOR_PTR;
    EDF$AB_COMMENT			: DESCRIPTOR_PTR;
    EDF$AB_UIC_TABLE_KEY		: LONG_PTR;
    EDF$AB_UIC_TABLE_STA		: LONG_PTR;
    EDF$AB_FID_TABLE_KEY		: LONG_PTR;
    EDF$AB_FID_TABLE_STA		: LONG_PTR;
    EDF$AB_PRIMARY_TABLE_KEY		: LONG_PTR;
    EDF$AB_PRIMARY_TABLE_STA		: LONG_PTR;
    EDF$AB_AREA_TABLE_KEY		: LONG_PTR;
    EDF$AB_AREA_TABLE_STA		: LONG_PTR;
    EDF$AB_DATE_TABLE_KEY		: LONG_PTR;
    EDF$AB_DATE_TABLE_STA		: LONG_PTR;
    EDF$AB_FILE_TABLE_KEY		: LONG_PTR;
    EDF$AB_FILE_TABLE_STA		: LONG_PTR;
{   EDF$AB_JOURNAL_TABLE_KEY		: LONG_PTR; }
{   EDF$AB_JOURNAL_TABLE_STA		: LONG_PTR; }
    EDF$AB_KEY_TABLE_KEY		: LONG_PTR;
    EDF$AB_KEY_TABLE_STA		: LONG_PTR;
    EDF$AB_RECORD_TABLE_KEY		: LONG_PTR;
    EDF$AB_RECORD_TABLE_STA		: LONG_PTR;
    EDF$AB_SYSTEM_TABLE_KEY		: LONG_PTR;
    EDF$AB_SYSTEM_TABLE_STA		: LONG_PTR;
    EDF$AB_POSIT_TABLE_KEY		: LONG_PTR;
    EDF$AB_POSIT_TABLE_STA		: LONG_PTR;
    EDF$AB_PROT_TABLE_KEY		: LONG_PTR;
    EDF$AB_PROT_TABLE_STA		: LONG_PTR;
    EDF$AB_ORG_TABLE_KEY		: LONG_PTR;
    EDF$AB_ORG_TABLE_STA		: LONG_PTR;
    EDF$AB_SOURCE_TABLE_KEY		: LONG_PTR;
    EDF$AB_SOURCE_TABLE_STA		: LONG_PTR;
{   EDF$AB_AT_TABLE_KEY			: LONG_PTR; }
{   EDF$AB_AT_TABLE_STA			: LONG_PTR; }
{   EDF$AB_RU_TABLE_KEY			: LONG_PTR; }
{   EDF$AB_RU_TABLE_STA			: LONG_PTR; }
    EDF$AB_CARR_TABLE_KEY		: LONG_PTR;
    EDF$AB_CARR_TABLE_STA		: LONG_PTR;
    EDF$AB_FORMAT_TABLE_KEY		: LONG_PTR;
    EDF$AB_FORMAT_TABLE_STA		: LONG_PTR;
    EDF$AB_TYPE_TABLE_KEY		: LONG_PTR;
    EDF$AB_TYPE_TABLE_STA		: LONG_PTR;
    EDF$AB_LOAD_METHOD_TABLE_KEY	: LONG_PTR;
    EDF$AB_LOAD_METHOD_TABLE_STA	: LONG_PTR;
    EDF$AB_WEIGHT_TABLE_KEY		: LONG_PTR;
    EDF$AB_WEIGHT_TABLE_STA		: LONG_PTR;
    EDF$AB_DESIGN_STYLE_TABLE_KEY	: LONG_PTR;
    EDF$AB_DESIGN_STYLE_TABLE_STA	: LONG_PTR;
    EDF$AB_SURFACE_OPTION_TABLE_KEY	: LONG_PTR;
    EDF$AB_SURFACE_OPTION_TABLE_STA	: LONG_PTR;
    EDF$AB_DESIGN_ORG_TABLE_KEY		: LONG_PTR;
    EDF$AB_DESIGN_ORG_TABLE_STA		: LONG_PTR;
    EDF$AB_RECORD_FORMAT_TABLE_KEY	: LONG_PTR;
    EDF$AB_RECORD_FORMAT_TABLE_STA	: LONG_PTR;
    EDF$AB_CURRENT_FUNC_TABLE_KEY	: LONG_PTR;
    EDF$AB_CURRENT_FUNC_TABLE_STA	: LONG_PTR;
    EDF$AB_DESIGN_CYCLE_TABLE_KEY	: LONG_PTR;
    EDF$AB_DESIGN_CYCLE_TABLE_STA	: LONG_PTR;
    EDF$AB_SCRIPT_OPTION_TABLE_KEY	: LONG_PTR;
    EDF$AB_SCRIPT_OPTION_TABLE_STA	: LONG_PTR;
    EDF$AB_YES_NO_TABLE_KEY		: LONG_PTR;
    EDF$AB_YES_NO_TABLE_STA		: LONG_PTR;
    EDF$AB_DELETE_OPTION_TABLE_KEY	: LONG_PTR;
    EDF$AB_DELETE_OPTION_TABLE_STA	: LONG_PTR;
    EDF$AB_MISC_TABLE_KEY		: LONG_PTR;
    EDF$AB_MISC_TABLE_STA		: LONG_PTR;

    { +
    The following are the pointers to the Definition Linked List.
    - }
    DEF_CURRENT		: ^LINE_OBJECT;
    DEF_SCRATCH		: ^LINE_OBJECT;
    DEF_HEAD		: ^LINE_OBJECT;
    DEF_TAIL		: ^LINE_OBJECT;
    DEF_SUCC		: ^LINE_OBJECT;
    DEF_PRED		: ^LINE_OBJECT;

    { +
    These point to the analysis linked list.
    - }
    DEF_ANL_HEAD	: ^LINE_OBJECT;
    DEF_ANL_TAIL	: ^LINE_OBJECT;
    DEF_SAVE_HEAD	: ^LINE_OBJECT;
    DEF_SAVE_TAIL	: ^LINE_OBJECT;

    POINTING_DIRECTION	: LIST_POINTER_TYPE;

    FILE_CREATED	: BOOLEAN;

    { +
    These are used for input string processing.
    - }
    INPUT_DESC		: DESCRIPTOR;
    INPUT_STRING	: STRING255;
    INPUT_VALUE		: INTEGER;
    INPUT_NUMBER	: INTEGER;

    INTEGER_PRIMARY	: RECORD
			    CASE PWHICH : PRI_SWITCH OF
				NOPRIM	: (NUM : INTEGER);
				PRIM	: (ENUM : PRIMARY_TYPE)
			    END;

    INTEGER_SECONDARY	: RECORD
			    CASE SWHICH : SEC_SWITCH OF
				NOSECO	: (NUM : INTEGER);
				SECO	: (ENUM : SECONDARY_TYPE)
			    END;

    INTEGER_QUALIFIER	: RECORD
			    CASE QWHICH : QUAL_SWITCH OF
				NOQUAL	: (NUM : INTEGER);
				QUAL	: (ENUM : QUALIFIER_TYPE)
			    END;

    { +
    ACTIVE CALCULATION DATABASE.
    - }
    LINKED			: BOOLEAN;
    KEY_TYPE			: QUALIFIER_TYPE;
    KEY_NAME_DESC		: DESCRIPTOR;
    SUCCESSIVE_CLOSE		: BOOLEAN;
    BLOCK_SPAN_ALLOWED		: BOOLEAN;
    KEY_DUPS			: BOOLEAN;
    KEY_CHANGES			: BOOLEAN;
    NUMBER_DUPS			: INTEGER;
    EVEN_KEY_DIST 		: BOOLEAN;
    EVEN_KEY_DIST_VALID		: BOOLEAN;
    KEY_SIZE			: INTEGER;
    KEY_POSITION 		: INTEGER;
    NUMBER_KEYS			: INTEGER;
    ACTIVE_AREA			: INTEGER;
    ACTIVE_PRIMARY		: PRIMARY_TYPE;
    ACTIVE_KEY			: INTEGER;
    ACTIVE_KEY_LENGTH		: INTEGER;
    ACTIVE_KEY_FILL		: STRING2;
    CARR_CTRL			: QUALIFIER_TYPE;
    CARR_CTRL_VALID		: BOOLEAN;
    VARIABLE_RECORDS		: BOOLEAN;
    MEAN_RECORD_SIZE		: INTEGER;
    MEAN_RECORD_SIZE_VALID	: BOOLEAN;
    MAX_RECORD_SIZE		: INTEGER;
    CUR_MAX_REC			: INTEGER;
    CONTROL_SIZE		: INTEGER;
    DATA_KEY_COMP		: REAL;
    DATA_KEY_COMP_VALID		: BOOLEAN;
    DATA_RECORD_COMP		: REAL;
    DATA_RECORD_COMP_VALID	: BOOLEAN;
    INDEX_RECORD_COMP		: REAL;
    INDEX_RECORD_COMP_VALID	: BOOLEAN;
    BYTES_PER_BUCKET		: INTEGER;
    BUCKET_WEIGHT		: INTEGER;
    BLOCKS_IN_BUCKET		: INTEGER;
    BUCKET_DEFAULT		: INTEGER;
    LOAD_FILL			: REAL;
    ADDED_FILL			: REAL;
    DESIRED_FILL		: INTEGER;
    FDL_FILL			: INTEGER;
    INIT_NUMBER_BUCKETS		: ARRAY [0..31] OF INTEGER;
    ADDED_NUMBER_BUCKETS	: ARRAY [0..31] OF INTEGER;
    DEEPEST			: INTEGER;
    TITLE_WANTED		: BOOLEAN;
    FILENAME_WANTED		: BOOLEAN;
    KEYNAME_WANTED		: BOOLEAN;
    GLOBAL_WANTED		: BOOLEAN;
    GLOBAL_COUNT		: INTEGER;
    INITIAL_COUNT		: INTEGER;
    INITIAL_COUNT_VALID		: BOOLEAN;
    ADDED_COUNT			: INTEGER;
    ADDED_COUNT_VALID		: BOOLEAN;
    LOAD_METHOD			: LOAD_TYPE;
    LOAD_METHOD_VALID		: BOOLEAN;
    ASCENDING_LOAD		: BOOLEAN;
    ASCENDING_LOAD_VALID	: BOOLEAN;
    ASCENDING_ADDED		: BOOLEAN;
    ASCENDING_ADDED_VALID	: BOOLEAN;
    DATA_FILE_NAME_DESC		: DESCRIPTOR;
    FDL_TITLE_DESC		: DESCRIPTOR;
    FIRST_PLOT			: BOOLEAN;
    RECORD_FORMAT		: QUALIFIER_TYPE;
    RECORD_FORMAT_VALID		: BOOLEAN;
    SURFACE_OPTION		: SURFACE_TYPE;
    DESIGN_CYCLE 		: INTEGER;
    DESIGN_STYLE		: DESIGN_TYPE;
    DESIGN_ORG			: QUALIFIER_TYPE;
    OPTIMIZING			: BOOLEAN;
    VISIBLE_QUESTION		: BOOLEAN;
    PROLOGUE_VERSION		: INTEGER;
    PROLOGUE_VERSION_VALID	: BOOLEAN;

    { End of file: SRC$:EDFVAR.PAS }
