MODULE getquals (IDENT='V03-000') =

BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY:  The MESSAGE compiler
!
! ABSTRACT:
!
!	This compiler translates a message definition language
!	and produces object modules suitable for the $GETMSG
!	system service.
!
! ENVIRONMENT:
!
!	VAX/VMS operating system. unprivileged user mode,
!
! AUTHOR:  Tim Halvorsen, Nov 1979
!
! Modified by:
!
!	V02-002 JWT0002     	Jim Teague		06-NOV-1981
!		Added /SDL capability
!
!	V02-001	PCG0001		Peter George		29-Dec-1980
!		Add /MDL functionality
!
!--

!
! Include files
!

LIBRARY 'SYS$LIBRARY:STARLET';		! VMS common definitions

LIBRARY 'SYS$LIBRARY:CLIMAC';		! CLI definitions

REQUIRE 'SRC$:MSG.REQ';			! Message common definitions

!
! Table of contents
!

FORWARD ROUTINE
    get_quals		: NOVALUE,	! Get command qualifiers
    get_input_file,			! Get next input file name
    cli_error		: NOVALUE,	! Handler CLI errors
    filename_parse	: NOVALUE;	! Parse /FILE qualifier

!
! Global definitions
!

GLOBAL
    cli_utility,			! Address of CLI service routine
    cli_flags		: BITVECTOR[32]	! Qualifier presence bitmap
	INITIAL(0),			! Initially none present
    cli_work:
	VECTOR [cli$c_workarea,BYTE];	! CLI work area

EXTERNAL
    input_fab:		BBLOCK,		! Input FAB
    object_fab:		BBLOCK,		! Object module FAB
    listing_fab:	BBLOCK,		! Listing FAB
    mdl_fab:		BBLOCK,		! MDL FAB
    sdl_fab:		BBLOCK,		! FAB for SDL output file    
    filename_desc:	VECTOR[2];	! Descriptor of /FILE value


!
! Define DIRECTORY command qualifiers
!

    $CLIQUALCODES (message,
			file_name,
			symbols,
			text);

!
! CLI control blocks and work areas
!

OWN
    file_desc:
	$CLIQUALDESC(QDCODE = file,
		     SETLST = qual_file,
		     TRUACT = filename_parse),

    symbols_desc:
	$CLIQUALDESC(QDCODE = symbols,
		     SETLST = qual_symbols),

    text_desc:
	$CLIQUALDESC(QDCODE = text,
		     SETLST = qual_text),

    end_of_quals:
	$CLIQUALEND;

OWN
    initial_desc:			! CLI initialization descriptor
	$CLIREQDESC(RQTYPE = initprs,
		    RQFLGS = absadr,
		    ERRACT = cli_error),

    qual_desc:				! Parse all command qualifiers
	$CLIREQDESC(RQTYPE = getqual,
		    RQFLGS = absadr,
		    ERRACT = cli_error,
		    QUALST = file_desc),

    output1_desc:			! Get primary output file
	$CLIREQDESC(RQTYPE = output1,
		    BITNUM = qual_object,
		    RQFLGS = absadr,
		    ERRACT = cli_error),

    output2_desc:
	$CLIREQDESC(RQTYPE = output2,
		    BITNUM = qual_listing,
		    RQFLGS = absadr,
		    ERRACT = cli_error),

    output3_desc:
	$CLIREQDESC(RQTYPE = output3,
		    BITNUM = qual_mdl,
		    RQFLGS = absadr,
		    ERRACT = cli_error),

    output4_desc:
   	$CLIREQDESC(RQTYPE = output4,
		    BITNUM = qual_sdl,
		    RQFLGS = absadr,
		    ERRACT = cli_error),
 
    cleanup_desc:			! CLI cleanup request
	$CLIREQDESC(RQTYPE = endprm1,
		    RQFLGS = absadr,
		    ERRACT = cli_error),

    string_desc:			! Get ASCII string value
	$CLIREQDESC(RQTYPE = asciival,
		    RQFLGS = absadr,
		    ERRACT = cli_error);
GLOBAL
    input_desc:				! Get input file specification
	$CLIREQDESC(RQTYPE = input1,
		    BITNUM = qual_input,
		    RQFLGS = absadr,
		    ERRACT = cli_error,
		    QUALST = file_desc);


GLOBAL ROUTINE get_quals : NOVALUE =

!----
!
! Functional description
!
!	This routine calls CLI to obtain the command line and
!	then all command qualifiers.
!
! Input parameters
!
!	None
!
! Output parameters
!
!	cli_flags	= Bitmap indicating which qualifiers are present
!
!----

BEGIN

!
!	Initialize CLI for result parsing
!

(.cli_utility)(initial_desc,		! Request result parsing
	cli_work,
	cli_flags);

!
!	Parse the command qualifiers
!

(.cli_utility)(qual_desc,		! Parse command qualifiers
	cli_work,			! with a work area, and
	cli_flags);			! the address of a bitmap

(.cli_utility)(output1_desc,		! Get object file name
		cli_work,
		cli_flags);

object_fab [fab$b_fns] = .output1_desc [cli$w_rqsize];
object_fab [fab$l_fna] = .output1_desc [cli$a_rqaddr];

(.cli_utility)(output2_desc,		! Get listing file name
		cli_work,
		cli_flags);

listing_fab [fab$b_fns] = .output2_desc [cli$w_rqsize];
listing_fab [fab$l_fna] = .output2_desc [cli$a_rqaddr];

(.cli_utility)(output3_desc,		! Get MDL file name
		cli_work,
		cli_flags);

mdl_fab [fab$b_fns] = .output3_desc [cli$w_rqsize];
mdl_fab [fab$l_fna] = .output3_desc [cli$a_rqaddr];

(.cli_utility)(output4_desc,		! Get SDL file name
		cli_work,
		cli_flags);

sdl_fab [fab$b_fns] = .output4_desc [cli$w_rqsize];
sdl_fab [fab$l_fna] = .output4_desc [cli$a_rqaddr];


END;

GLOBAL ROUTINE get_input_file =

!---
!
!	This routine obtains the next file specification
!	from the input file list and performs the initial
!	parsing to ensure legality.
!
! Inputs:
!
!	cli_utility = Address of CLI service routine
!
! Outputs:
!
!	input_fab = FAB initialized for current file name
!---

BEGIN

!
!	If the input file list is depleted, then call back
!	CLI to perform cleanups and exit without filename.
!

IF NOT .input_desc [cli$v_concatinp]	! If input list exhausted,
THEN
    BEGIN
    (.cli_utility)(cleanup_desc,	! then cleanup input processing
		cli_work,
		cli_flags);
    RETURN false;
    END;

!
!	Get the next input file from CLI
!

(.cli_utility)(input_desc,		! Get next input file
		cli_work,
		cli_flags);

!
!	Initialize the FAB for processing later
!

input_fab [fab$l_fna] = .input_desc [cli$a_rqaddr];
input_fab [fab$b_fns] = .input_desc [cli$w_rqsize];

RETURN true;

END;

ROUTINE cli_error (cli_block,error): NOVALUE =

!----
!
! Functional description
!
!	This routine is called as an error handler for
!	CLI errors.
!
! Input parameters
!
!	cli_block = Address of CLI request block
!	error = CLI error message
!
! Output parameters
!
!	None
!
!----

BEGIN

MAP cli_block: REF BBLOCK;		! Define CLI request block

SIGNAL(emsg(syntax),1,cli_block[cli$q_rqdesc],.error);

RETURN;

END;

ROUTINE filename_parse(qual_desc_block): NOVALUE =

!----
!
! Functional description
!
!	This routine parses the value on the /FILE qualifier.
!	The file specification value is stored in the descriptor
!	name_qual.
!
! Input parameters
!
!	qual_desc_block = Address of the qualifier descriptor block.
!
! Output parameters
!
!	filename_desc= Descriptor of value on qualifier.
!
!----

BEGIN

MAP qual_desc_block: REF BBLOCK;	! Define block format

LOCAL
    status;				! Status return value

(.cli_utility)(string_desc,		! Get value of descriptor
	cli_work,
	.qual_desc_block);		! using same request block

!
!	Save the descriptor of the string
!

filename_desc [0] = .string_desc [cli$w_rqsize];
filename_desc [1] = .string_desc [cli$a_rqaddr];

IF .filename_desc [0] GTRU nam$c_maxrss	! Check if string too large
THEN
    SIGNAL(emsg(syntax),1,string_desc [cli$q_rqdesc]);

END;

END
ELUDOM
