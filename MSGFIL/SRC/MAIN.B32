MODULE main ( IDENT = 'V03-000', MAIN = start) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY:  Message compiler
!
! ABSTRACT:
!
!	This compiler translated message definition language
!	into object modules
!
! ENVIRONMENT:
!
!	VAX/VMS operating system. unprivileged user mode,
!
! AUTHOR:  Tim Halvorsen, Nov 1979
!
! Modified by:
!
!	V02-006 JWT0011		Jim Teague		15-Feb-1982
!		Special cased the elimination of error summaries when
!		no input files found.
!
!	V02-005	BLS0145		Benn Schreiber		 6-Feb-1982
!		Change FMG$FILE_SCAN to LIB$FILE_SCAN
!
!	V02-004 JWT0005		Jim Teague		11-Dec-1981
!		Set FOP=OFP in output fabs to keep output files
!		in the default directory
!
!	V02-003 JWT0002		Jim Teague		06-NOV-1981
!		Added /SDL capability
!
!	V02-002	PCG0002		Peter George		24-Aug-1981
!		Allow use of SYS$INPUT as input file spec.
!
!	V02-001	PCG0001		Peter George		29-Dec-1980
!		Add /MDL functionality.
!
!--

!
! Include files
!

LIBRARY 'SYS$LIBRARY:STARLET.L32';	! VAX/VMS common definitions

LIBRARY	'SYS$LIBRARY:CLIMAC.L32';	! CLI macros

SWITCHES LIST(REQUIRE);			! Print require file
REQUIRE 'SRC$:MSG.REQ';			! Command definitions

!
! Table of contents
!

FORWARD ROUTINE
    start,				! Main routine
    rms_error,				! RMS general error routine
    search_error,			! Signal error searching for file
    do_file,				! Process each input file
    get_module_name,			! Compute module name string
    handler;				! Signal handler

!
! OWN storage
!

LITERAL
    buffer_size = 512;			! Length of record buffer

OWN
    input_file: INITIAL (false),
    input_rsname:			! Input result file name buffer
	VECTOR [nam$c_maxrss,BYTE],
    input_exname:			! Input expanded file name buffer
	VECTOR [nam$c_maxrss,BYTE],

    rel_nam:	$NAM(			! Dummy NAM for stickyness
		RSA = input_exname),
    input_nam:	$NAM(			! File name block
		RSA = input_rsname,	! Result string buffer
		RSS = nam$c_maxrss,
		ESA = input_exname,	! Expanded string buffer
		ESS = nam$c_maxrss,
		RLF = rel_nam),		! Related NAM block
    input_xabdat:
		$XABDAT(),		! Date/time XAB for input file
    object_rsname:
	VECTOR [nam$c_maxrss,BYTE],	! Result file name buffer
    object_exname:
	VECTOR [nam$c_maxrss,BYTE],	! Expanded file name buffer
    listing_rsname:
	VECTOR [nam$c_maxrss,BYTE],	! Result file name buffer
    listing_exname:
	VECTOR [nam$c_maxrss,BYTE],	! Expanded file name buffer
    mdl_rsname:
	VECTOR [nam$c_maxrss,BYTE],	! Result flie name buffer
    mdl_exname:
	VECTOR [nam$c_maxrss,BYTE],	! Expanded file name buffer
    sdl_rsname:
	VECTOR [nam$c_maxrss,BYTE],	! Result file name buffer
    sdl_exname:
	VECTOR [nam$c_maxrss,BYTE],	! Expanded file name buffer
    record_buffer:
	VECTOR [buffer_size,BYTE];	! Input record buffer

GLOBAL
    worst_error: INITIAL(ss$_normal)	! Worst error encountered
		BBLOCK[4],
    input_fab:	$FAB(			! Input file FAB
		DNA = UPLIT('.MSG'),	! Default file name
		DNS = 4,
		NAM = input_nam,	! NAM block
		XAB = input_xabdat),	! XABDAT block
    input_rab:	$RAB(			! Input file RAB
		FAB = input_fab,
		UBF = record_buffer,	! Record buffer
		USZ = buffer_size),

    listing_nam: $NAM(
		ESA = listing_exname,	! Expanded string buffer
		ESS = nam$c_maxrss,
		RSA = listing_rsname,	! Result string buffer
		RSS = nam$c_maxrss,
		RLF = rel_nam),		! Related NAM block
    listing_fab: $FAB(			! Listing file FAB
		DNA = UPLIT('.LIS'),	! Default file name
		DNS = 4,
		FOP = OFP,
		NAM = listing_nam,	! Address of NAM block
		RAT = CR,		! Carriage return format
		RFM = VAR),		! Variable length records
    listing_rab: $RAB(			! Listing file RAB
		FAB = listing_fab,
		ROP = WBH),		! Overlap I/O if possible

    output_fab:	$FAB(			! Output file FAB
		FNM='SYS$OUTPUT:',	! File name
		RAT = CR,		! Carriage return format
		RFM = VAR),		! Variable length records
    output_rab:	$RAB(			! Output file RAB
		FAB = output_fab),

    object_nam:	$NAM(
		ESA = object_exname,	! Expanded string buffer
		ESS = nam$c_maxrss,
		RSA = object_rsname,	! Result string buffer
		RSS = nam$c_maxrss,
		RLF = rel_nam),		! Related NAM block
    object_fab:	$FAB(			! Object module file FAB
		DNA = UPLIT('.OBJ'),
		DNS = 4,
		FOP = OFP,
		NAM = object_nam),
    object_rab:	$RAB(			! Object module RAB
		FAB = object_fab),

    mdl_nam:	$NAM(
		ESA = mdl_exname,	! Expanded string buffer
		ESS = nam$c_maxrss,
		RSA = mdl_rsname,	! Result string buffer
		RSS = nam$c_maxrss,
		RLF = rel_nam),		! Related NAM block
    mdl_fab:	$FAB(			! MDL file FAB
		DNA = UPLIT('.MDL'),	! Default file name
		DNS = 4,
		FOP = OFP,
		NAM = mdl_nam,		! Address of NAM block
		RAT = CR,		! Carriage return format
		RFM = VAR),		! Variable length records
    mdl_rab: 	$RAB(			! MDL file RAB
		FAB = mdl_fab,
		ROP = WBH),		! Overlap I/O if possible

    sdl_nam:	$NAM(
		ESA = sdl_exname,	! Expanded string buffer
		ESS = nam$c_maxrss,
		RSA = sdl_rsname,	! Result string buffer
		RSS = nam$c_maxrss,
		RLF = rel_nam),		! Related name block
    sdl_fab:	$FAB(			! SDL file FAB
		DNA = UPLIT('.SDL'),	! Default file name
		DNS = 4,
		FOP = OFP,
  		NAM = sdl_nam,		! Address of name block
		RAT = CR,		! Carriage return format
		RFM = VAR),		! Variable length records
    sdl_rab:	$RAB(			! SDL file RAB
		FAB = sdl_fab,
		ROP = WBH),		! Overlap I/O if possible

    module_name:	VECTOR [2],	! Descriptor of module name

    filename_desc:	VECTOR [2];	! Descriptor of /FILE value


!
! External storage
!

EXTERNAL
    cli_utility,			! Address of CLI service routine
    cli_flags:		BITVECTOR,	! CLI qualifier bitmap
    input_desc:		BBLOCK;		! Input CLI request descriptor

!
! External routines
!

EXTERNAL ROUTINE
    get_quals,				! Get qualifier values
    get_input_file,			! Get next input file name
    parse_file,				! Parse input file
    output_object,			! Output object module
    end_listing,			! Cleanup listing file
    error_summary,			! Give error summary
    lib$file_scan : ADDRESSING_MODE(GENERAL);	! Search wildcard sequence

ROUTINE start =

!---
!
!	This is the main routine for the message compiler.  This
!	program accepts the message definition language and generates
!	object modules which may be linked into any image.  $GETMSG
!	will locate the message definitions in the message sections.
!
! Inputs:
!
!	None
!
! Outputs:
!
!	Object module specified by /OBJECT
!	Listing file specified by /LISTING
!	MDL file specified by /MDL
!	SDL file specified by /SDL
!
!---

BEGIN

BUILTIN
    FP,					! Reference FP register
    AP;					! Reference AP register

BIND
    image_params = AP: REF BBLOCK;	! Define image parameters

LOCAL
    status;

!
!	Set signal handler
!

.fp = handler;				! Set handler address

!
!	Parse the command qualifiers
!

cli_utility = .image_params [cli$a_utilserv];	! Save CLI service routine
get_quals();				! Get command qualifiers

!
!	Open the output file for error reporting only
!

status = $CREATE (FAB = output_fab);	! Always create output file
IF NOT .status THEN rms_error (emsg(openout),output_fab);
status = $CONNECT (RAB = output_rab);
IF NOT .status THEN rms_error (emsg(openout),output_fab,output_rab);

!
!	Initialize the file processing loop
!

input_desc [cli$v_concatinp] = true;	! Initialize get_input_file routine

!
!	Process each file in the input list
!

WHILE get_input_file() DO		! For each input file,
    lib$file_scan(input_fab,		! Search all wildcard files
		do_file,		! calling here if file is found
		search_error);		! calling here if error occurs

!
!	Generate the object module file
!

IF .cli_flags [qual_object]		! If /OBJECT specified,
	AND .worst_error		! and no errors so far,
	AND .input_file
THEN
    output_object();			! Output object module

!
!	Close the output and listing files
!

IF NOT .worst_error 			! If error detcted,
   AND .input_file
THEN
    error_summary(output_rab);		! Give summary

status = $CLOSE (FAB = output_fab);	! Close output file
IF NOT .status THEN rms_error (emsg(closedel), output_fab);

IF .cli_flags [qual_listing]		! If /LISTING specified,
    AND .listing_fab [fab$w_ifi] NEQ 0	! and it was opened
THEN
    BEGIN
    end_listing(listing_rab);		! Cleanup listing file
    status = $CLOSE (FAB = listing_fab);	! Close the listing file
    IF NOT .status
    THEN
        rms_error (emsg(closedel), listing_fab);
    END;

IF .cli_flags [qual_mdl]		! If /MDL specified,
   AND .mdl_fab [fab$w_ifi] NEQ 0	! and it was opened
THEN 
    BEGIN
    status = $CLOSE (FAB = mdl_fab);	! Close the MDL file
    IF NOT .status
    THEN
        rms_error (emsg(closedel), mdl_fab);
    END;

IF .cli_flags [qual_sdl]		! If /SDL specified,
   AND .sdl_fab [fab$w_ifi] NEQ 0	! and it was opened
THEN 
    BEGIN
    status = $CLOSE (FAB = sdl_fab);	! Close the SDL file
    IF NOT .status
    THEN
        rms_error (emsg(closedel), sdl_fab);
    END;

RETURN .worst_error;			! Return worst error encountered

END;

GLOBAL ROUTINE rms_error (message, fab_block, rab_block) =

!---
!
!	This routine issues a multi-line error associated
!	with an RMS operation.  The first parameter is the
!	first message to be issued.  The second and third
!	parameter is the address of the FAB and/or the RAB block
!	which contains the error codes and the file name.
!	If the third parameter is present, the RAB is assumed
!	to contain the error status.
!
! Inputs:
!
!	message = First message code to be output
!	fab_block = Address of FAB block
!	rab_block = Address of RAB block
!
! Outputs:
!
!	The message is signaled.
!---

BEGIN

BUILTIN
    NULLPARAMETER;			! True if parameter unspecified

MAP
    fab_block:	REF BBLOCK,		! Define FAB structure
    rab_block:	REF BBLOCK;		! Define RAB structure

LOCAL
    nam_block:	REF BBLOCK,		! Define NAM structure
    desc:	VECTOR[2];		! Temp. string descriptor

nam_block = .fab_block [fab$l_nam];	! Get address of NAM block
IF .nam_block EQL 0			! If no NAM block present,
THEN
    BEGIN
    desc [0] = .fab_block [fab$b_fns];	! then use original file string
    desc [1] = .fab_block [fab$l_fna];
    END
ELSE IF .nam_block [nam$b_rsl] NEQ 0	! If result string nonblank,
THEN
    BEGIN
    desc [0] = .nam_block [nam$b_rsl];	! then use it
    desc [1] = .nam_block [nam$l_rsa];
    END
ELSE IF .nam_block [nam$b_esl] NEQ 0	! If expanded string nonblank,
THEN
    BEGIN
    desc [0] = .nam_block [nam$b_esl];	! then use it
    desc [1] = .nam_block [nam$l_esa];
    END
ELSE
    BEGIN
    desc [0] = .fab_block [fab$b_fns];	! Else, use original file string
    desc [1] = .fab_block [fab$l_fna];
    END;

IF NOT NULLPARAMETER(3)			! If RAB argument specified,
THEN
    SIGNAL(.message,1,desc,		! Signal error
		.rab_block [rab$l_sts],	! with RMS error code from RAB
		.rab_block [rab$l_stv])	! and secondary code
ELSE
    SIGNAL(.message,1,desc,		! Signal error
		.fab_block [fab$l_sts],	! with RMS error code from FAB
		.fab_block [fab$l_stv]);! and secondary code

RETURN true;

END;

ROUTINE search_error (fab) =

!---
!
!	Signal an error searching for an input file.
!
! Inputs:
!
!	fab = Address of FAB used during searching
!
! Outputs:
!
!	None
!---

RETURN rms_error (emsg(searchfail),.fab);

ROUTINE do_file =

!---
!
!	This routine is called once for each file specified
!	in the input file list.  The file is opened and parsed
!	and all message definitions are saved in virtual memory.
!
! Inputs:
!
!	input_fab = Input FAB
!	input_rab = Input RAB
!
! Outputs:
!
!	Message definition blocks
!---

BEGIN

LOCAL
    status,parse_status;		! Status codes

status = $OPEN (FAB = input_fab);	! Open the input file
IF NOT .status				! If error found,
THEN
    BEGIN
    rms_error (emsg(openin), input_fab); ! then signal the error
    RETURN .status;
    END;

status = $CONNECT (RAB = input_rab);	! and connect the input stream
IF NOT .status				! If error found,
THEN
    BEGIN
    rms_error (emsg(openin), input_fab, input_rab); ! then signal the error
    RETURN .status;
    END;

input_file = .input_file OR true;

status = get_module_name (input_fab);	! Get module name
IF NOT .status				! If error detected,
THEN
    RETURN .status;			! return with status

!
!	If the listing file has not yet been opened, open
!	it now.  This is done after the input file open so
!	that the name will be sticky with the input file name.
!

IF .cli_flags [qual_listing]	! If /LISTING specified,
    AND .listing_fab [fab$w_ifi] EQL 0	! and not already opened
THEN
    BEGIN
    status = $CREATE (FAB = listing_fab);	! Create the listing file
    IF NOT .status THEN rms_error (emsg(openout),listing_fab);
    status = $CONNECT (RAB = listing_rab);
    IF NOT .status THEN rms_error (emsg(openout),listing_fab,listing_rab);
    END;

IF .cli_flags [qual_mdl]		! If /MDL specified
    AND .mdl_fab [fab$w_ifi] EQL 0	! and not already opened
THEN
    BEGIN
    status = $CREATE (FAB = mdl_fab);		! Create the mdl file
    IF NOT .status THEN rms_error (emsg(openout),mdl_fab);
    status = $CONNECT (RAB = mdl_rab);
    IF NOT .status THEN rms_error (emsg(openout),mdl_fab,mdl_rab);
    END;

IF .cli_flags [qual_sdl]		! If /SDL specified
    AND .sdl_fab [fab$w_ifi] EQL 0	! and not already opened
THEN
    BEGIN
    status = $CREATE (FAB = sdl_fab);		! Create the sdl file
    IF NOT .status THEN rms_error (emsg(openout),sdl_fab);
    status = $CONNECT (RAB = sdl_rab);
    IF NOT .status THEN rms_error (emsg(openout),sdl_fab,sdl_rab);
    END;

parse_status = parse_file();		! Parse the input file

status = $CLOSE (FAB = input_fab);	! Close the input file
IF NOT .status				! If error found,
THEN
    rms_error (emsg(closedel), input_fab); ! then signal the error

RETURN .parse_status;			! Return with parse status

END;

GLOBAL ROUTINE get_module_name (fab) =

!---
!
!	This routine figures out the module name to be
!	associated with the given file name.  The
!	module name used is the name of the file.
!
! Inputs:
!
!	None
!
! Outputs:
!
!	module_name = Descriptor of module name string
!	r0 = status (unsignaled)
!---

BEGIN

MAP
    fab:	REF BBLOCK;		! Address of FAB block

LOCAL
    input_nam:	REF BBLOCK,		! Address of NAM block
    addr,size,				! Temporary descriptor
    ptr;				! String pointer

input_nam = .fab [fab$l_nam];		! Get NAM address
size = .input_nam [nam$b_rsl];		! Get result name string
addr = .input_nam [nam$l_rsa];

ptr = CH$FIND_CH(.size, .addr, ']');	! Find start of file name on input side
IF .ptr EQL 0				! If not found,
THEN
    BEGIN
    ptr = CH$FIND_CH(.size, .addr, '>'); ! Alternate syntax
    IF .ptr EQL 0			! If still not found
    THEN BEGIN				! Then make up a name
	 module_name [0] = %CHARCOUNT ('MESSAGE');
	 module_name [1] = UPLIT ('MESSAGE');
	 RETURN true;
	 END;
    END;

size = .size - (.ptr + 1 - .addr);	! Figure descriptor of file name
addr = .ptr + 1;

ptr = CH$FIND_CH(.size, .addr, '.');	! Find where file name ends
IF .ptr EQL 0				! If not found,
THEN
    RETURN rms$_rst;			! return invalid expanded string

module_name [0] = .ptr - .addr;		! Figure descriptor of file name only
module_name [1] = .addr;

RETURN true;

END;

ROUTINE handler (signal_args, mechanism_args) =

!---
!
!	This condition handler gets control on any signalled
!	condition in order to save the highest severity error
!	to be returned by exit from the image.
!
! Inputs:
!
!	signal_args = Address of signal argument list
!	mechanism_args = Address of mechanism argument list
!
! Outputs:
!
!	worst_error is updated with highest severity error.
!
!---

BEGIN

MAP
    signal_args: REF BBLOCK,			! Address of signal arg list
    mechanism_args: REF BBLOCK;			! Address of mechanism arg list

LOCAL
    code: BBLOCK [LONG];			! Condition code (longword)

code = .signal_args [chf$l_sig_name];		! Get condition code

IF .code [sts$v_severity] GTR .worst_error [sts$v_severity]
	AND  .code  NEQ  emsg(searchfail)
THEN
    worst_error = .code OR sts$m_inhib_msg;	! Set new worst error

ss$_resignal					! Continue signalling

END;


END
ELUDOM
