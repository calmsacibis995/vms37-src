	.TITLE	HLDTASK - HLD TASK FILE I/O
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY: DECNET HOST LOADER (HLD)
;
; ABSTRACT:
;
;	HLD IS A COMPONENT OF DECNET/VAX-11. IT PROVIDES ACCESS TO
;	RSX11S TASK IMAGES STORED ON A VAX SYSTEM.
;
; ENVIRONMENT:
;
;	THE HLD IMAGE EXECUTES IN THE CONTEXT OF A PROCESS CREATED BY
;	NETACP. IT RUNS IN USER MODE AND REQUIRES NETWORK PRIVILEGE.
;
; AUTHOR: SCOTT G. DAVIS,	CREATION DATE: 06-JUN-79
;
; MODIFICATIONS:
;
;--
;
; INCLUDE FILES
;
	HDRDF$				; TASK HEADER DEFINITIONS
	LBLDF$				; LABEL BLOCK DEFINITIONS
	$HLDDEF
;
; MACROS:
;
;	NONE
	.PAGE
;
; LOCAL DATA
;
	.PSECT	HLD$PURE	NOSHR,NOEXE,RD,NOWRT,LONG

	.PAGE
	.PSECT	HLD$CODE	NOSHR,EXE,RD,NOWRT

;++
; FUNCTIONAL DESCRIPTION:
;
; HLD$OPEN_TSKFIL OPENS THE SPECIFIED TASK FILE AND VERIFIES
; WHATEVER IS NECESSARY.
;
; INPUTS:
;
;	HLD$TSKFAB IS SET UP
;	R11 IS BASE OF REMAINDER OF OPTIONAL DATA
;
; OUTPUTS:
;	R6 - NO. OF INTEGRAL LUN BLOCKS
;	R7 - NO. OF BYTES IN LUN BLOCK AFTER LAST FULL ONE
;	R8 - NO. OF INTEGRAL DISK BLOCKS
;	R9 - NO. OF BYTES IN DISK BLOCK AFTERS LAST FULL ONE
;
;--

HLD$OPEN_TSKFIL::			; ENTRY POINT
	MOVAB	W^HLD$TSKFAB,R0		; SET TO OPEN FILE
	BSBW	HLD$RMS_OPEN		; DO IT
	MOVAB	W^HLD$TSKRAB,R0		; SET TO CONNECT RECORD STREAM
	BSBW	HLD$RMS_CONNECT		; DO IT
	BSBW	HLD$DISK_READ		; READ THE LABEL BLOCK
;
; VALIDATE THE FILE
;
	MOVL	W^HLD$TSKRAB+RAB$L_RBF,R10 ; POINT TO THE BUFFER
	BITW	#TS$NHD,L$BFLG(R10)	; IS THERE A HEADER?
	BEQL	5$			; IF EQL OK
	BRW	121$			; ERROR
5$:
	MOVZWL	B^HLD$W_PART_SIZE(R11),R1 ; GET THE PARTITION SIZE
	MOVZWL	B^HLD$W_PART_ADDR(R11),R6 ; GET THE PARTITION ADDRESS
	BNEQ	10$			; IF NEQ TASK IS UNMAPPED
	BITW	#^O17777,L$BSA(R10)	; IS TASK ON A 4K WORD BOUNDARY?
	BEQL	20$			; IF EQL YES
	BRW	131$			; ERROR
;
; TASK IS UNMAPPED
;
10$:
	CMPW	R6,L$BSA(R10)		; DOES PARTITION ADDRESS = BASE ADDR?
	BEQL	15$			; IF EQL YES - OK
	BRW	141$			; ERROR
15$:
	DIVW2	#64,R1			; CONVERT TO 32.-WORD BLOCKS
;
; CHECK REQUEST TYPE
;
20$:
	TSTB	B^HLD$B_REQUEST(R11)	; INITIAL LOAD?
	BGEQ	25$			; IF GEQ NOT OVERLAY REQUEST
	MOVL	B^HLD$L_OVL_VBN(R11),W^HLD$GL_TSKBKT ; SET VBN FOR OVERLAY
	MOVQ	#1,R8			; EXACTLY ONE BLOCK TO GO
	MOVW	B^HLD$W_PART_SIZE(R11),W^HLD$GW_IOLEN ; Send only overlay length
	BRB	55$			; GO TO COMMON CODE
25$:
	BNEQ	30$			; IF NEQ NOT INITIAL LOAD
;
; INITIAL LOAD REQUEST
;
	CMPW	L$BMXZ(R10),R1		; IS FILE > PARTITION?
	BGTRU	151$			; IF GTRU YES - ERROR
	MOVZWL	L$BLDZ(R10),R1		; THIS IS THE REAL XFER SIZE
	MOVZWL	L$BHRB(R10),R3		; GET OFFSET TO HEADER BLOCK
	ADDL2	R3,W^HLD$GL_TSKBKT	; SET UP THE BLOCK NO.
	BRB	40$			; PROCEED
;
; CHECKPOINT REQUEST OF SOME SORT
;
30$:
	MOVZWL	L$BBLK(R10),R4		; COMPUTE SIZE OF CHECKPOINT SPACE
	MOVW	L$BHRB(R10),R3		; OFFSET TO HEADER BLOCK
	SUBW	R4,R3			; THIS IS CHKPT SIZE IN BLOCKS
	MULW2	#8,R3			; CONVERT TO 32.-WORD BLOCKS
	CMPW	R1,R3			; IS PARTITION > CHECKPOINT SPACE?
	BGTRU	161$			; IF GTRU YES
	ADDL2	R4,W^HLD$GL_TSKBKT	; POINT TO CHECKPOINT SPACE
;
; FINISH UP PROCESSING, MOSTLY W.R.T LUNS
;
40$:
	CLRL	R2			; FOR EDIV (QUAD DIVIDEND)
	EDIV	#8,R1,R8,R9		; R8 - NO. OF INTEGRAL BLOCKS
					; R9 - SIZE OF LAST BLOCK IN 32.-WORD CHUNKS
	MULW2	#64,R9			; GET NO. OF BYTES FOR LAST TRANSFER
	TSTW	R6			; MAPPED SYSTEM?
	BEQL	50$			; IF EQL YES
	MULW2	#64,R1			; CONVERT BACK TO BYTES
50$:
	MOVW	R1,B^HLD$W_XFR_SIZE(R11) ; GIVE SIZE TO SLD
55$:
	CLRQ	R6			; MAY BE NO LUNS
	CLRB	B^HLD$B_NLUNS(R11)	; ASSUME NO LUN-FIXING
	TSTB	B^HLD$B_REQUEST(R11)	; INITIAL LOAD?
	BNEQ	60$			; IF NEQ NO
	TSTB	W^HLD$GB_LUNFLAG	; LUN-FIXING REQUIRED?
	BEQL	60$			; IF EQL NO
	MOVZBL	L$BLUN(R10),R2		; GET NO. OF LUNS
	MOVB	R2,B^HLD$B_NLUNS(R11)	; STORE FOR SLD
	BEQL	60$			; IF EQL NONE TO FIX
	CLRL	R3			; EDIV USES QUAD DIVIDEND
	EDIV	#128,R2,R6,R7		; COMPUTE STUFF FOR LUN BLOCK TRANSFER
	MULL2	#4,R7			; NO. OF BYTES
60$:
	RSB				; DONE

;
; ERROR PROCESSING
;
121$:					; NO HEADER
	MOVL	#HLD$C_ERR_NOHDR,R6	;
	BRB	911$
131$:					; MAPPED TASK NOT ON 4K BOUNDARY
	MOVL	#HLD$C_ERR_NOT4K,R6	;
	BRB	911$
141$:					; UNMAPPED PARTITION MISMATCH
	MOVL	#HLD$C_ERR_BADPR,R6	;
	BRB	911$
151$:					; FILE TOO BIG FOR PARTITION
	MOVL	#HLD$C_ERR_BIGFL,R6	;
	BRB	911$
161$:					; PARTITION TOO BIG FOR CHKPT
	MOVL	#HLD$C_ERR_BIGPR,R6	;
	BRB	911$
911$:
	MOVB	R6,W^HLD$GB_ERRORFLG	; SAVE FOR PROCESSING
	MOVL	S^#SS$_NORMAL,R0	; No more messages in LOG
	BRW	HLD$EXIT_TO_VMS		; THAT IS ALL

	.END
