MODULE PATSCA (					! lexical scanner for PATCH
		%IF %VARIANT EQL 1
		%THEN
			ADDRESSING_MODE (EXTERNAL = LONG_RELATIVE, NONEXTERNAL = LONG_RELATIVE),
		%FI
		IDENT = 'V03-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	PATCH
!
! ABSTRACT:
!
!	This module contains the routine called by the parser to get a
!	token from the input line. It also contains the routine that
!	translates an alpha string into a keyword token.
!
! ENVIRONMENT:	STARLET, user mode, interrupts disabled.
!
! AUTHOR: Carol Peters, CREATION DATE: 13 September 1977
!
! MODIFIED BY:
!
!	Kathleen Morse, 20 October 1977 : Version X01.00
!
! Revision History:
!
!  NO	DATE		PROGRAMMER		PURPOSE
!  --	----		----------		-------
!
!  00	20-OCT-77	K.D. MORSE		ADAPT VERSION 2 FOR PATCH
!  01	4-JAN-78	K.D. MORSE		NO CHANGES FOR VERS 3.
!  02	24-JAN-78	K.D. MORSE		NO CHANGES FOR VERS 4.
!  03	25-APR-78	K.D. MORSE		CONVERT TO NATIVE COMPILER.
!  04	01-MAY-78	K.D. MORSE		CHANGE ALPHA TO ALPHA_STR_TOKEN.
!  05	18-MAY-78	K.D. MORSE		PAT$GET_A_TOKEN SETS MODE LEVEL
!						TO LOCAL BEFORE CALLING THE
!						LEXICAL ROUTINE. (05)
!						NO CHANGES FOR VERS 6.
!  06	18-MAY-78	K.D. MORSE		NO CHANGES FOR VERS 7-8.
!  07	13-JUN-78	K.D. MORSE		ADD FAO COUNTS TO SIGNALS.
!
!--

!
! TABLE OF CONTENTS:
!
FORWARD ROUTINE
	PAT$GET_A_TOKEN,					! Extracts a token from the input buffer
	TRANS_LEXEME;						! Translates a lexeme into a token

!
! INCLUDE FILES:
!
LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:VXSMAC.REQ';
REQUIRE 'SRC$:PATPCT.REQ';
REQUIRE 'SRC$:PATGEN.REQ';
REQUIRE 'SRC$:PATTER.REQ';			
REQUIRE 'SRC$:SCALIT.REQ';
REQUIRE 'SRC$:SYSSER.REQ';
REQUIRE 'SRC$:PATKEY.REQ';				

!
! MACROS:
!

!
! EQUATED SYMBOLS:
!

!
! OWN STORAGE:
!

!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
	PAT$SET_MOD_LVL,					! Routine to set the mode level
	PAT$MAR_GET_LEX;					! Lexical analyzer

EXTERNAL
	PAT$GL_KEYW_TBL: VECTOR;				! Holds keywords for current syntax

GLOBAL ROUTINE PAT$GET_A_TOKEN (INPUT_STG_DESC, LEXEME_STG_DESC) =	! Gets a token from input line

!++
! Functional description:
!
!	Extracts a lexeme from the input stream by calling the routine
!	PAT$GET_MAR_LEXEME.  Translates the lexeme to a token (sometimes a
!	null operation). Returns the token as the routine value and
!	the ASCII string representing the token in the character string
!	pointed to by the pointer field of lexeme_stg_desc. Also returns
!	the actual length of the ASCII string of the lexeme in the
!	length field of lexeme_stg_desc.
!
!	The pointer to the input buffer is updated and rewritten into
!	the pointer field of INPUT_STG_DESC.
!
! Calling sequence:
!
!	CALL PAT$GET_A_TOKEN (INPUT_STG_DESC.rt.dd, LEXEME_STG_DESC.rt.dv)
!
! Inputs:
!
!	INPUT_STG_DESC	- string descriptor to the input buffer.
!	LEXEME_STG_DESC	- varying string descriptor to the lexeme buffer.
!
! Implicit inputs:
!
!	none
!
! Outputs:
!
!	none
!
! Implicit outputs:
!
!	none
!
! Routine value:
!
!	an encoded representation of the token found.
!
! Side effects:
!
!	The mode level is set to local.
!--

BEGIN

MAP
	LEXEME_STG_DESC: REF BLOCK [, BYTE];			! Descriptor of lexeme string

LOCAL
	LEXEME_TYPE;						! Type of lexeme found

!++
! Fill the lexeme buffer with zeroes.
!--
ZEROCOR (.LEXEME_STG_DESC [DSC$A_POINTER], (.LEXEME_STG_DESC [DSC$W_MAXLEN] / 4));
PAT$SET_MOD_LVL (LOCAL_MODE);					! Set mode level to local
LEXEME_TYPE = PAT$MAR_GET_LEX (.INPUT_STG_DESC, .LEXEME_STG_DESC);
IF (.LEXEME_TYPE EQL ALPHA_STR_TOKEN)
THEN
	RETURN TRANS_LEXEME (.LEXEME_STG_DESC)
ELSE
	RETURN .LEXEME_TYPE;
END;								! End of PAT$GET_A_TOKEN

ROUTINE TRANS_LEXEME (LEXEME_STG_DESC) =			! Translates a name into a keyword token

!++
! Functional description:
!
!	Maps an alphabetic string onto an element in the keyword table.
!	If the alphabetic string does not match a keyword, then the
!	token "alpha_str_token" is returned. If the alphabetic string does match
!	a keyword, then the token for the keyword is abstracted from
!	the keyword table and returned.
!
! Calling sequence:
!
!	CALL TRANS_LEXEME (LEXEME_STG_DESC.rt.dv)
!
! Inputs:
!
!	LEXEME_STG_DESC	- varying string descriptor for lexeme string
!
! Implicit inputs:
!
!	The keyword table for the PATCH language.
!
! Outputs:
!
!	none
!
! Implicit outputs:
!
!	none
!
! Routine value:
!
!	The token for the keyword that matches the ASCII string,
!	or the "alpha_str_token" token, if no keyword matches the string.
!
! Side effects:
!
!	none
!--

BEGIN

MAP
	LEXEME_STG_DESC: REF BLOCK [, BYTE];			! Lexeme string descriptor

LOCAL
	KEYWORD_ENTRY : REF VECTOR [, BYTE];			! Address of a keyword record;

KEYWORD_ENTRY = KEYWORD_TABLE [0];
REPEAT
	BEGIN
	!++
	! If the length of the keyword is at least as long as the lexeme found,
	! and the lexeme found is at least as long as the abbreviation of the
	! keyword, then try to match the strings.
	!--
	IF (.KEYWORD_ENTRY [KWORD_LENGTH] GEQ .LEXEME_STG_DESC [DSC$W_LENGTH]) AND
	   (.LEXEME_STG_DESC [DSC$W_LENGTH] GEQ .KEYWORD_ENTRY [KWORD_ABBREV])
	THEN
		BEGIN
		!++
		! If a keyword match is found, return the token equivalent.
		!--
		IF CH$EQL (.LEXEME_STG_DESC [DSC$W_LENGTH],
				CH$PTR (.LEXEME_STG_DESC [DSC$A_POINTER]),
				.LEXEME_STG_DESC [DSC$W_LENGTH],
				CH$PTR (KEYWORD_ENTRY [KWORD_NAME]))
		THEN
			RETURN .KEYWORD_ENTRY [KWORD_TOKEN];
		END;

	!++
	! Keyword did not match. Advance the table pointer to
	! point to the next entry. If the first byte of this
	! next entry is zero, conclude that the table is
	! exhausted, and just return the alpha_str_token.
	!--
	KEYWORD_ENTRY = KEYWORD_ENTRY [0]
			+ .KEYWORD_ENTRY [KWORD_LENGTH] + KWORD_OVERHEAD;
	IF (.KEYWORD_ENTRY [KWORD_TOKEN] EQL 0)
	THEN
		RETURN ALPHA_STR_TOKEN;
	END;
END;

END								! End of module
ELUDOM
