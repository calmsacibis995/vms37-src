MODULE PATERR ( %IF %VARIANT EQL 1
		%THEN
			ADDRESSING_MODE (EXTERNAL = LONG_RELATIVE,
					 NONEXTERNAL = LONG_RELATIVE),
		%FI
		IDENT = 'V03-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY: PATCH
!
! ABSTRACT: ERROR HANDLER
!
! ENVIRONMENT: IMAGE FILE PATCH UTILITY
!
! AUTHOR: K.D. MORSE	, CREATION DATE: 5-OCT-77
!
! MODIFIED BY:
!
!	V02-008	PCG0001		Peter George		02-FEB-1981
!		Add require statement for LIB$:PATDEF.REQ
!
!	V02-007	KDM0027		Kathleen D. Morse	04-Dec-1980
!		Remove special case for ECOSET error.  It is now an
!		informational message and handled in PAT$ECO_CMDS.
!
!--

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
	PAT$ERR_HANDLER,					! Error handler
	JNL_ERRMSG : NOVALUE,					! Action routine for SYSSYS$PUTMSG call
	PAT$ERROR_EXIT;						! Error exit routine

!
! INCLUDE FILES:
!

LIBRARY 'SYS$LIBRARY:STARLET.L32';				! System structure definitions
REQUIRE 'SRC$:VXSMAC.REQ';
REQUIRE 'SRC$:PATPCT.REQ';					! Define PSECTS
REQUIRE 'LIB$:PATDEF.REQ';				! Defines literals
REQUIRE 'LIB$:PATMSG.REQ';					! PATCH error message codes
REQUIRE 'SRC$:PREFIX.REQ';
REQUIRE 'SRC$:PATPRE.REQ';

!
! MACROS:
!

!
! EQUATED SYMBOLS:
!

LITERAL
	EXCEPTION_NAME = 1;					! Offset to name of exception

!
! OWN STORAGE:
!

OWN
	JNL_PUT_MSG : VECTOR [5,LONG] INITIAL (			! SYS$PUTMSG argument list for journal error
					4,			! Count of arguments
					PAT$_JNLPUT,		! Error message code
					0,			! FAO argument count
					0,			! RMS error code
					0);			! STV error code

!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
	SYS$PUTMSG,						! Outputs error messages
	PAT$END_OF_LINE,					! Resets for next command
	PAT$CLOSEFILES;						! Close all files

EXTERNAL
	PAT$GB_EXEC_CMD : BYTE,				! Command execution flag
	PAT$GL_FLAGS,						! CLI flags
	PAT$GL_INPRAB : BLOCK[,BYTE],				! RAB for input commands (SYS$INPUT)
	PAT$GL_OUTRAB : BLOCK[,BYTE],				! RAB for output information (SYS$OUTPUT)
	PAT$GL_ERRRAB : BLOCK[,BYTE],				! RAB for error messages (SYS$ERROR)
	PAT$GL_JNLRAB : BLOCK[,BYTE],				! RAB for journal file
	PAT$GL_ERRCODE,						! Error code
	PAT$GL_ERRFAB : BLOCK[,BYTE],				! FAB for SYS$ERROR
	PAT$GL_INPFAB : BLOCK[,BYTE],				! FAB for SYS$INPUT
	PAT$GL_OUTFAB : BLOCK[,BYTE];				! FAB for SYS$OUTPUT

GLOBAL ROUTINE PAT$ERR_HANDLER (SIGNAL_ARG_PTR, MECH_ARG_PTR, ENABLE_ARG_PTR) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine is SIGNALled whenever an error occurs.  It calls
!	the routine SYS$PUTMSG to output the error message to the journal
!	file, SYS$ERROR, and SYS$OUTPUT (if different from SYS$OUTPUT).
!	If the journal file output fails, then PATCH produces a corresponding
!	message to the other channels and exits with an error status.
!
!	If the journal write was successful, then PATCH determines the
!	error severity level and the type of patch session.  The following
!	table shows the actions taken:
!
!	SEVERITY LEVEL		INTERACTIVE SESSION	BATCH SESSION
!	FATAL				EXITS		    EXITS
!	SEVERE				UNWINDS		    EXITS
!	WARNING				UNWINDS		    EXITS
!	INFORMATION			RETURNS		    RETURNS
!
!	All exits cause the files to be closed and the status code to
!	be passed to CLI.  When PATCH unwinds, a new PATCH command is
!	requested.
!
! FORMAL PARAMETERS:
!
!	SIGNAL_ARG_PTR - Address of the signal argument block
!	MECH_ARG_PTR - Address of the mechanism argument block
!	ENABLE_ARG_PTR - Address of the enable argument block, from bliss enable directive
!			(NONE)
!
! IMPLICIT INPUTS:
!
!	The error messages must be already defined in the system and the
!	output files open.
!
! IMPLICIT OUTPUTS:
!
!	none
!
! ROUTINE VALUE:
!
!	none
!
! COMPLETION CODES:
!
!	none
!
! SIDE EFFECTS:
!
!	The error message is written to the SYS$ERROR, journal file,
!	and SYS$OUTPUT channels.
!
!--

BEGIN

LITERAL
	ARG_COUNT = 0,						! Offset to count of arguments
	ERR_CODE = 1;						! Offset to error code

MAP
	SIGNAL_ARG_PTR : REF VECTOR,				! Signal argument block address
	MECH_ARG_PTR : REF VECTOR,				! Mechanism arguemtn block address
	ENABLE_ARG_PTR : REF VECTOR;				! FAO argument block address

!++
! Check for UNWIND exception.
!--
IF (.SIGNAL_ARG_PTR[EXCEPTION_NAME] EQL SS$_UNWIND)
THEN
	RETURN SS$_RESIGNAL;

!++
! Cancel Control-O on SYS$ERROR and SYS$OUTPUT channels.
!--
PAT$GL_OUTRAB[RAB$L_ROP]=.PAT$GL_OUTRAB[RAB$L_ROP] OR RAB$M_CCO;
PAT$GL_ERRRAB[RAB$L_ROP]=.PAT$GL_ERRRAB[RAB$L_ROP] OR RAB$M_CCO;

!++
! Decrement the count of arguments to eliminate the PC and access-violation.
!--
SIGNAL_ARG_PTR[ARG_COUNT] = .SIGNAL_ARG_PTR[ARG_COUNT] - 2;

!++
! Format the message and output it to SYS$ERROR and SYS$OUTPUT and the journal file.
!--
SYS$PUTMSG(.SIGNAL_ARG_PTR, JNL_ERRMSG, 0);

!++
! Restore the argument count.
!--
SIGNAL_ARG_PTR[ARG_COUNT] = .SIGNAL_ARG_PTR[ARG_COUNT] + 2;


!++
! Check if patch session is interactive or batch.  Check severity level of error.
! Either exit, unwind, and/or return based on table described above.
!--

!++
! First handle the interactive cases.
!--
IF (.PAT$GL_INPFAB[FAB$L_DEV] AND DEV$M_TRM) NEQ 0		! If this is interactive
THEN
	BEGIN
	IF (.SIGNAL_ARG_PTR[ERR_CODE] AND MSG$K_FATAL) EQL MSG$K_FATAL ! If error was fatal
	THEN
		PAT$ERROR_EXIT(.SIGNAL_ARG_PTR[ERR_CODE]);	! Then exit
	IF (.SIGNAL_ARG_PTR[ERR_CODE] AND MSG$K_INFO) NEQ MSG$K_INFO ! If not information msg
	THEN
		BEGIN
		PAT$END_OF_LINE(0);				! Reset for next command
		$UNWIND();					! Unwind to command processing frame
		END;
	END							! End of interactive handling

!++
! Now for a batch session.
!--
ELSE
	IF (.SIGNAL_ARG_PTR[ERR_CODE] AND MSG$K_INFO) NEQ MSG$K_INFO ! If not information msg
	THEN
		PAT$ERROR_EXIT(.SIGNAL_ARG_PTR[ERR_CODE]);	! Exit with error status

!++
! Reset the RAB so Control-O will work correctly.
!--
PAT$GL_OUTRAB[RAB$V_CCO]=FALSE;
PAT$GL_ERRRAB[RAB$V_CCO]=FALSE;
RETURN SS$_CONTINUE;
END;								! End of PAT$ERR_HANDLER

ROUTINE JNL_ERRMSG (MSG_DESC) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine is called by SYS$PUTMSG just before the message is output
!	to SYS$ERROR and SYS$OUTPUT.  It writes the error message or informational
!	message to the journal file.
!
! FORMAL PARAMETERS:
!
!	MSG_DESC - String descriptor for message
!
! IMPLICIT INPUTS:
!
!	The journal file is open for output.
!
! IMPLICIT OUTPUTS:
!
!	none
!
! ROUTINE VALUE:
!
!	none
!
! COMPLETION CODES:
!
!	none
!
! SIDE EFFECTS:
!
!	The message is written to the journal file.  If this cannot be
!	done, then the routine causes another error message to be output
!	and causes PATCH to exit.
!
!--

BEGIN


LOCAL
	LOCAL_ERR;						! Local error code

MAP
	MSG_DESC : REF BLOCK[,BYTE];				! String descriptor for message

!++
! Check that the journal file has been opened.
!--
IF (.PAT$GL_FLAGS AND PAT$M_JOURNAL) EQL 0
THEN
	RETURN;

!++
! Output the error message to the journal file.
!--
PAT$GL_JNLRAB[RAB$W_RSZ]=.MSG_DESC[DSC$W_LENGTH];		! Set error message length
PAT$GL_JNLRAB[RAB$L_RBF]=.MSG_DESC[DSC$A_POINTER];		! Set error message address
IF NOT (LOCAL_ERR=$PUT(RAB=PAT$GL_JNLRAB))			! Output error to journal file
THEN
	BEGIN
	!++
	! Unable to write to the journal file.  Report the error to the
	! error and output channels.  Then output the journal write error.
	!--
	PAT$GL_OUTRAB[RAB$W_RSZ]=.MSG_DESC[DSC$W_LENGTH];	! Set error message length
	PAT$GL_OUTRAB[RAB$L_RBF]=.MSG_DESC[DSC$A_POINTER];	! Set error message address
	$PUT(RAB=PAT$GL_OUTRAB);				! Output error to SYS$OUTPUT
	IF (.PAT$GL_ERRFAB[FAB$W_IFI] NEQ .PAT$GL_OUTFAB[FAB$W_IFI])
	THEN
		BEGIN
		PAT$GL_ERRRAB[RAB$W_RSZ]=.MSG_DESC[DSC$W_LENGTH]; ! Set error message length
		PAT$GL_ERRRAB[RAB$L_RBF]=.MSG_DESC[DSC$A_POINTER]; ! Set error message address
		$PUT(RAB=PAT$GL_ERRRAB);			! Output error to journal file
		END;
	JNL_PUT_MSG[3] = .LOCAL_ERR;
	JNL_PUT_MSG[4] = .PAT$GL_JNLRAB[RAB$L_STV];
	SYS$PUTMSG(JNL_PUT_MSG, 0, 0);					! Report journal PUT error
	PAT$ERROR_EXIT(PAT$_JNLPUT);				! Exit with error status
	END;
RETURN;
END;

ROUTINE PAT$ERROR_EXIT(ERR_CODE) =				! Error exit routine

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine exits with an error status code.
!
! FORMAL PARAMETERS:
!
!	ERR_CODE - Error status code
!
! IMPLICIT INPUTS:
!
!	none
!
! IMPLICIT OUTPUTS:
!
!	none
!
! ROUTINE VALUE:
!
!	none
!
! COMPLETION CODES:
!
!	All kinds of error status codes and success codes.
!
! SIDE EFFECTS:
!
!	none
!
!--

BEGIN

$EXIT(CODE=(.ERR_CODE OR 1^28));				! Exit with status
END;								! End of PAT$ERROR_EXIT

END								! End of PATERR
ELUDOM
