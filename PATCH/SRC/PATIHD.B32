MODULE PATIHD (%IF %VARIANT EQL 1				! ROUTINES TO HANDLE IMAGE HEADER AND SECTIONS
		%THEN
					ADDRESSING_MODE (EXTERNAL = LONG_RELATIVE,
						 NONEXTERNAL = LONG_RELATIVE),
		%FI
		IDENT = 'V03-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY: PATCH
!
! ABSTRACT: ROUTINES TO HANDLE IMAGE HEADER DATA AND CREATE AND MAP IMAGE SECTIONS.
!
! ENVIRONMENT: PART OF IMAGE FILE PATCH UTILITY
!
! AUTHOR: K.D. MORSE	, CREATION DATE: 11-OCT-77
!
! MODIFIED BY:
!
!	V02-008	MTR0001		Mike Rhodes		14-Oct-1981
!		Modify routine PAT$CREMAP to allow the create and map
!		section system service to do expand region mapping
!		within P0 space.  This eliminates PATCH's trying to
!		remember the last mapped address and getting errors
!		due to stepping on RMS buffers in P0.
!
!	V02-007	KDM0044		Kathleen D. Morse	03-MAR-1981
!		Reformat some comment lines.
!
!	V02-006	PCG0001		Peter George		02-FEB-1981
!		Add require statement for LIB$:PATDEF.REQ
!
!
!--

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
	PAT$GET_IHD: NOVALUE,					! READS AND PROCESSES IMAGE HEADER
	PAT$CREMAP: NOVALUE;					! CREATES AND MAPS IMAGE SECTIONS

!
! INCLUDE FILES:
!

LIBRARY	'SYS$LIBRARY:LIB.L32';					! SYSTEM STRUCTURE DEFINITIONS
REQUIRE 'SRC$:PATPCT.REQ';					! DEFINES PSECTS
REQUIRE 'SRC$:PREFIX.REQ';					! DEFINES STRUCTURE MACROS
REQUIRE 'SRC$:PATPRE.REQ';					! DEFINES PATCH STRUCTURES
REQUIRE 'LIB$:PATDEF.REQ';					! Defines literals
REQUIRE 'LIB$:PATMSG.REQ';					! DEFINE ERROR CODES
REQUIRE 'SRC$:PATGEN.REQ';					! DEFINE QUADWORD SIZE
REQUIRE 'SRC$:SYSLIT.REQ';					! DEFINE TTY_OUT_WIDTH

!
! MACROS:
!

!
! EQUATED SYMBOLS:
!

LITERAL
	START_OFF = 0,						! OFFSET TO STARTING ADDRESS
	END_OFF = 1,						! OFFSET TO ENDING ADDRESS
	IDENT_SIZE = 2;						! SIZE OF IDENT FIELD

!
! EXTERNAL REFERENCES:
!

EXTERNAL
	PAT$GL_IHPPTR: REF BLOCK[,BYTE],			! POINTER TO IMAGE HEADER
	PAT$CP_OUT_STR,						! POINTER TO OUTPUT BUFFER
	PAT$GL_BUF_SIZ,						! SIZE OF MESSAGE IN OUTPUT BUFFER
	PAT$GL_EXPANDVA,					! FIRST EXPAND VA ADDRESS
	PAT$GL_PATAREA,						! POINTER TO PATCH AREA DESCRIPTOR
	PAT$GL_ERRCODE,						! GLOBAL ERROR CODE
	PAT$GL_ISVADDR: VECTOR[,LONG],				! LAST MAPPED ADDRESS PAIR
	PAT$GB_INPBUF,						! INPUT BUFFER FOR IMAGE FILE
	PAT$GL_IMGHDR: REF BLOCK[,BYTE],			! IMAGE HEADER DATA ADDRESS
	PAT$GL_ISELHD,						! IMAGE SECTION TABLE LIST HEAD
	PAT$GL_ISETAIL : REF BLOCK[,BYTE],			! LAST ENTRY IN IMAGE SECTION TABLE
	PAT$GL_NEWVPNMX,					! MAX VPN IN IMAGE FILE
	PAT$GL_NEWVBNMX,					! MAX VBN IN IMAGE FILE
	PAT$GL_OLDVBNMX,					! OLD IMAGE FILE MAX ISD VBN
	PAT$GB_OLDNAME,						! OLD IMAGE FILE NAME
	PAT$GL_OLDFAB: BLOCK[,BYTE],				! FAB FOR INPUT IMAGE FILE
	PAT$GL_OLDNBK: BLOCK[,BYTE],				! NAME BLOCK FOR INPUT IMAGE FILE
	PAT$GL_OLDRAB: BLOCK[,BYTE],				! RAB FOR INPUT IMAGE FILE
	PAT$GL_JNLRAB: BLOCK[,BYTE];				! RAB FOR JOURNAL FILE


EXTERNAL ROUTINE
	PAT$ADD_PAL,						! ADD PATCH AREA TO LIST
	LIB$_CREMAPSEC,						! CREATES AND MAPS SECTIONS
	PAT$FAO_PUT,						! FORMATS OUTPUT MESSAGE
	PAT$WRITEFILE,						! WRITES OUTPUT MESSAGE TO A FILE
	PAT$ALLOBLK;						! ALLOCATES BLOCK OF FREE MEMORY
!
! OWN STORAGE:
!

OWN
	CURISD: REF BLOCK[,BYTE],				! CURRENT IMAGE SECTION DESCRIPTOR
	INPBUF: REF BLOCK[,BYTE] INITIAL(PAT$GB_INPBUF);	! INPUT BUFFER

BIND
	MAJOR_IDENT= UPLIT (%ASCII'02'),			! VALUE OF MAJOR IDENT ABLE TO PATCH
	MINOR_IDENT= UPLIT (%ASCII'01');			! MINIMUM VALUE OF MINOR IDENT ABLE TO PATCH

GLOBAL ROUTINE PAT$GET_IHD :NOVALUE =				! READS AND PROCESSES THE IMAGE HEADER

!++
! FUNCTIONAL DESCRIPTION:
!
!	THIS ROUTINE READS THE IMAGE HEADER AND STORES THE DATA.
!	IT THEN PROCESSES EACH IMAGE SECTION, BUILDING THE IMAGE SECTION TABLE.
!	THE IMAGE SECTION ENTRIES CONSIST OF:
!
!		1. LINK TO NEXT IMAGE SECTION ENTRY (ISE)
!		2. STARTING MAPPED VIRTUAL ADDRESS
!		3. ENDING MAPPED VIRTUAL ADDRESS
!		4. STARTING IMAGE VIRTUAL ADDRESS WITHIN IMAGE SECTION
!		5. ENDING IMAGE VIRTUAL ADDRESS WITHIN IMAGE SECTION
!		6. IMAGE SECTION DESCRIPTOR AS READ FROM IMAGE HEADER
!
!	THE MAPPED ADDRESSES ARE INITIALIZED TO ZERO.  WHEN THE PAGES
!	ARE ACCESSED BY A PATCH COMMAND, THE IMAGE SECTION IS MAPPED
!	AND THE MAPPED ADDRESSES SET.
!
!	THE BEGINNING ADDRESS INTO WHICH THE IMAGE SECTIONS ARE TO
!	BE MAPPED IS ALSO INITIALIZED.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	THE OLD IMAGE FILE HAS BEEN SET UP FOR INPUT.
!
! IMPLICIT OUTPUTS:
!
!	THE IMAGE SECTION TABLE IS SET UP AND THE IMAGE HEADER DATA STORED.
!
! ROUTINE VALUE:
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

BEGIN
BIND
	TIME_STR = UPLIT (%ASCIC 'DATE/TIME OF PATCH:		!%D'),
	ECO_MSG_STR = UPLIT (%ASCIC 'ECO LEVELS SET:		'),
	ECO_LVL_STR = UPLIT (%ASCIC '!UL, ');


LITERAL
	NO_MORE_ISE = 65535;					! CODE FOR NO MORE ISE'S ON THIS PAGE

MAP
	PAT$GL_IMGHDR : REF BLOCK[,BYTE];			! REFERENCE IMAGE HEADER AS A BLOCK

LOCAL
	ECO_PTR : REF BITVECTOR,				! POINTER TO ECO LEVEL BITS
	ECO_BIT,						! ECO BIT LEVEL COUNTER
	ISEADR: REF BLOCK[,BYTE],				! CONTAINS ADDRESS OF IMAGE SECTION ENTRY
	SRCPTR,							! SOURCE STRING POINTER
	DESPTR,							! DESTINATION STRING POINTER
	NXTPTR,							! STRING POINTER TO NEXT PART OF RECORD
	ALLOCSIZE,						! SIZE OF IMAGE HEADER TO ALLOCATE
	OUT_BUFFER : VECTOR[TTY_OUT_WIDTH,BYTE];		! OUTPUT MESSAGE BUFFER

!++
! INITIALIZE THE IMAGE SECTION TABLE LIST HEAD.
!--
PAT$GL_ISELHD=0;						! SET END OF TABLE
PAT$GL_ISETAIL=0;						! SET TAIL OF TABLE

!++
! INITIALIZE MAXIMUM NEW FILE VIRTUAL PAGE AND BLOCK NUMBERS.
!--
PAT$GL_NEWVBNMX = 0;
PAT$GL_NEWVPNMX = 0;

!++
! READ THE FIRST BLOCK OF THE IMAGE HEADER AND STORE THE DATA.
!--
PAT$GL_ERRCODE=$READ(RAB=PAT$GL_OLDRAB);			! GET THE IMAGE HEADER
IF NOT .PAT$GL_ERRCODE
THEN
	SIGNAL(PAT$_GETERR,3,.PAT$GL_ERRCODE,.PAT$GL_OLDNBK[NAM$B_RSL],PAT$GB_OLDNAME); ! REPORT ERROR

!++
! CHECK THAT THE PATCH UTILITY UNDERSTANDS THIS TYPE OF IMAGE HEADER.
!--
IF .INPBUF[IHD$W_MAJORID] NEQU .MAJOR_IDENT
THEN
	SIGNAL(PAT$_BADIDENT,2,IDENT_SIZE,INPBUF[IHD$W_MAJORID]);
IF .INPBUF[IHD$W_MINORID] LSSU .MINOR_IDENT
THEN
	SIGNAL(PAT$_BADIDENT,2,IDENT_SIZE,INPBUF[IHD$W_MINORID]);

!++
! STORE THE IMAGE HEADER FOR FUTURE USE.  FIRST ENSURE THAT THERE
! IS ROOM FOR A PATCH AREA HEADER SECTION.
!--
ALLOCSIZE=.INPBUF[IHD$W_SIZE];					! ASSUME HEADER IS CORRECT SIZE
IF .INPBUF[IHD$W_PATCHOFF] EQL 0				! IF THERE IS NO PATCH SECTION IN HEADER
THEN								! THEN 
	ALLOCSIZE=.ALLOCSIZE + IHP$K_LENGTH;			! ENLARGE IT TO INCLUDE ONE
PAT$ALLOBLK(.ALLOCSIZE,PAT$GL_IMGHDR);				! ALLOCATE STORAGE FOR IMAGE HEADER
SRCPTR=CH$PTR(.INPBUF,0);					! SET POINTER TO INPUT DATA
DESPTR=CH$PTR(.PAT$GL_IMGHDR,0);				! SET POINTER TO HEADER STORAGE
CH$MOVE(.INPBUF[IHD$W_SIZE],.SRCPTR,.DESPTR);			! STORE HEADER DATA
NXTPTR=.INPBUF[IHD$W_SIZE] + .SRCPTR;				! SET PTR TO BYTE PAST INPUT MOVED
IF .PAT$GL_IMGHDR[IHD$W_PATCHOFF] EQL 0				! IF THERE WAS NO PATCH SECTION
THEN								! THEN
	BEGIN
	PAT$GL_IMGHDR[IHD$W_PATCHOFF]=.PAT$GL_IMGHDR[IHD$W_SIZE]; ! SET OFFSET TO PATCH SECTION
	PAT$GL_IMGHDR[IHD$W_SIZE]=.PAT$GL_IMGHDR[IHD$W_SIZE] + IHP$K_LENGTH; ! INCREMENT SIZE OF HEADER
	PAT$GL_IHPPTR=CH$PTR(.PAT$GL_IMGHDR, .PAT$GL_IMGHDR[IHD$W_PATCHOFF]);
	PAT$GL_IHPPTR[IHP$L_ECO1]=0;				! ZERO THE ECO LEVEL BITS
	PAT$GL_IHPPTR[IHP$L_ECO2]=0;				! ZERO THE ECO LEVEL BITS
	PAT$GL_IHPPTR[IHP$L_ECO3]=0;				! ZERO THE ECO LEVEL BITS
	PAT$GL_IHPPTR[IHP$L_ECO4]=0;				! ZERO THE ECO LEVEL BITS
	PAT$GL_IHPPTR[IHP$L_RW_PATADR]=0;			! SET NO READ-WRITE PATCH AREA
	PAT$GL_IHPPTR[IHP$L_RW_PATSIZ]=0;			! SET NO READ-WRITE PATCH AREA
	PAT$GL_IHPPTR[IHP$L_RO_PATADR]=0;			! SET NO READ-ONLY PATCH AREA
	PAT$GL_IHPPTR[IHP$L_RO_PATSIZ]=0;			! SET NO READ-ONLY PATCH AREA
	PAT$GL_IHPPTR[IHP$L_PATCOMTXT]=0;			! SET NO PATCH COMMAND TEXT
	END
ELSE
	PAT$GL_IHPPTR=CH$PTR(.PAT$GL_IMGHDR, .PAT$GL_IMGHDR[IHD$W_PATCHOFF]);
PAT$GL_PATAREA = CH$PTR(PAT$GL_IHPPTR[IHP$L_RW_PATSIZ] ,0);	! SET POINTER TO PATCH AREA DESCRIPTOR
PAT$GL_ERRCODE=$GETTIM(TIMADR=PAT$GL_IHPPTR[IHP$Q_PATDATE]);	! SET LATEST PATCH DATE
IF NOT .PAT$GL_ERRCODE
THEN
	SIGNAL(PAT$_GETTIM,1,.PAT$GL_ERRCODE);			! REPORT ERROR

!++
! WRITE OUT PATCH TIME TO JOURNAL FILE.
!--
PAT$CP_OUT_STR = CH$PTR(OUT_BUFFER,0);
PAT$GL_BUF_SIZ = 0;
PAT$FAO_PUT(TIME_STR, PAT$GL_IHPPTR[IHP$Q_PATDATE]);
PAT$WRITEFILE(.PAT$GL_BUF_SIZ, CH$PTR(OUT_BUFFER, 0), PAT$GL_JNLRAB);

!++
! NOW OUTPUT THE ECO LEVELS SET TO THE JOURNAL FILE.
!--
ECO_PTR = CH$PTR(PAT$GL_IHPPTR[IHP$L_ECO1], 0);
PAT$CP_OUT_STR = CH$PTR(OUT_BUFFER,0);
PAT$GL_BUF_SIZ = 0;
INCR ECO_BIT FROM PAT$K_MIN_ECO-1 TO PAT$K_MAX_ECO-1 BY 1
DO
	BEGIN
	IF .ECO_PTR[.ECO_BIT]
	THEN
		BEGIN
		IF .PAT$GL_BUF_SIZ GEQ TTY_OUT_WIDTH-6
		THEN
			BEGIN
			PAT$WRITEFILE(.PAT$GL_BUF_SIZ-2, CH$PTR(OUT_BUFFER, 0), PAT$GL_JNLRAB);
			PAT$CP_OUT_STR = CH$PTR(OUT_BUFFER,0);
			PAT$GL_BUF_SIZ = 0;
			END;
		IF .PAT$GL_BUF_SIZ EQL 0
		THEN
			PAT$FAO_PUT(ECO_MSG_STR);
		PAT$FAO_PUT(ECO_LVL_STR, .ECO_BIT+1);
		END;
	END;
IF .PAT$GL_BUF_SIZ NEQ 0
THEN
	PAT$WRITEFILE(.PAT$GL_BUF_SIZ-2, CH$PTR(OUT_BUFFER, 0), PAT$GL_JNLRAB);
PAT$WRITEFILE(0, CH$PTR(OUT_BUFFER, 0), PAT$GL_JNLRAB);		! OUTPUT BLANK LINE

!++
! NOW PLACE THE DEFAULT PATCH AREA AS THE FIRST ENTRY ON THE PATCH AREA LIST.
!--
PAT$ADD_PAL(.PAT$GL_IHPPTR[IHP$L_RW_PATADR],
	    .PAT$GL_IHPPTR[IHP$L_RW_PATADR]+.PAT$GL_IHPPTR[IHP$L_RW_PATSIZ],
	    PAL$K_ADD_PAREA);

!++
! FIND THE BOTTOM OF THE PATCH CODE AND INITIALIZE THE CURRENT ISD ADDRESS IN
! THE IMAGE HEADER RECORD TO GET READY FOR IMAGE SECTION PROCESSING.
!--
PAT$GL_ERRCODE=$EXPREG(	  PAGCNT=1
			, RETADR=PAT$GL_ISVADDR);		! FIND BOTTOM OF PATCH CODE
IF NOT .PAT$GL_ERRCODE
THEN
	SIGNAL(PAT$_EXPREG,1,.PAT$GL_ERRCODE);			! REPORT ERROR
PAT$GL_EXPANDVA = .PAT$GL_ISVADDR[START_OFF];			! REMEMBER FIRST EXPAND ADDRESS
PAT$GL_ISVADDR[END_OFF]=.PAT$GL_ISVADDR[START_OFF] - 1;		! SET NEXT ADDRESS FOR CREMAP TO MAP OVER
CURISD=.NXTPTR;							! SET FIRST ISD ADDRESS

!++
! NOW PROCESS EVERY IMAGE SECTION DESCRIPTOR.
!--
WHILE .CURISD[ISD$W_SIZE] NEQ 0
DO
	BEGIN
	LOCAL
		ALLOC_SIZE;					! SIZE OF ISE TO ALLOCATE
	IF .CURISD[ISD$W_SIZE] EQL NO_MORE_ISE			! IF THAT'S ALL IN THIS BLOCK,
	THEN
		BEGIN
		PAT$GL_ERRCODE=$READ(RAB=PAT$GL_OLDRAB);	! GET NEXT IMAGE HEADER BLOCK
		IF NOT .PAT$GL_ERRCODE
		THEN
			SIGNAL(PAT$_GETERR,3,.PAT$GL_ERRCODE,.PAT$GL_OLDNBK[NAM$B_RSL],
				PAT$GB_OLDNAME);		! REPORT ERROR
		NXTPTR=CH$PTR(.INPBUF,0);			! RESET POINTER TO NEXT ISD
		CURISD=.INPBUF;					! SET CURRENT ISD ADDRESS
		END;
	ALLOC_SIZE = .CURISD[ISD$W_SIZE] + ISE$C_SIZE;		! SET SIZE OF ISE
	IF .CURISD[ISD$V_DZRO]
	THEN
		ALLOC_SIZE = .ALLOC_SIZE + A_QUADWORD;		! ADD IN EXTRA SPACE FOR VBN AND IDENT
	!++
	! ****** THIS CHECK IS A FUTURE FEATURE WHICH WILL INSURE SPACE FOR AN IDENT
	! ****** LONGWORD IN ANY PROCESS PRIVATE IMAGE SECTION DESCRIPTOR.
	! ****** THIS WILL ENABLE PATCH TO CREATE AN IDENT FOR A PROCESS
	! ****** PRIVATE IMAGE SECTION, WHICH WILL PROBABLY BE NECESSARY WHEN
	! ****** GLOBAL SECTIONS ARE PATCHED AND BECOME PRIVATE SECTIONS.
	!--
	IF PAT$K_LENPRIV NEQ ISD$K_LENPRIV			! CHECK IF LENGTH INCLUDES IDENT
	THEN
		IF .CURISD[ISD$W_SIZE] EQL ISD$K_LENPRIV	! CHECK IF THIS IS PROCESS PRIVATE ISD
		THEN
			ALLOC_SIZE = .ALLOC_SIZE + A_LONGWORD;	! ADD IN IDENT LENGTH
	PAT$ALLOBLK(.ALLOC_SIZE,ISEADR);			! GET IMAGE SECTION ENTRY
	DESPTR=CH$PTR(.ISEADR,ISE$C_SIZE);			! SET DESTINATION POINTER
	CH$MOVE(.CURISD[ISD$W_SIZE],.NXTPTR,.DESPTR);		! MOVE IN ISD
	NXTPTR=.CURISD[ISD$W_SIZE] + .NXTPTR;			! SET PTR TO NEXT ISD
	IF .PAT$GL_ISETAIL EQLA 0				! IF FIRST ENTRY
	THEN
		BEGIN
		PAT$GL_ISELHD=CH$PTR(.ISEADR, 0);		! SET TABLE LIST HEAD
		PAT$GL_ISETAIL=CH$PTR(.ISEADR, 0);		! SET TABLE TAIL
		END
	ELSE
		BEGIN
		PAT$GL_ISETAIL[ISE$L_NXTISE]=CH$PTR(.ISEADR, 0); ! SET LINK TO THIS ISE
		PAT$GL_ISETAIL=CH$PTR(.ISEADR, 0);		! SET NEW TAIL OF TABLE
		END;
	ISEADR[ISE$L_NXTISE]=0;					! SET FORWARD LINK
	ISEADR[ISE$L_IMGVST]=.CURISD[ISD$V_VPG]^9;		! SET STARTING IMAGE VIRTUAL ADDRESS
	ISEADR[ISE$L_IMGVEND]=(.CURISD[ISD$V_VPG]+.CURISD[ISD$W_PAGCNT])^9 - 1; ! SET ENDING IMAGE VIRTUAL ADDRESS
	ISEADR[ISE$L_MAPVST]=0;					! SET NO START MAPPED ADDRESS
	ISEADR[ISE$L_MAPVEND]=0;				! SET NO ENDING MAPPED ADDRESS
	IF .CURISD[ISD$B_TYPE] NEQ ISD$K_USRSTACK
	THEN
		IF .PAT$GL_NEWVPNMX LSSU .CURISD[ISD$V_VPG]	! SEE IF LARGER VPN
		THEN
			PAT$GL_NEWVPNMX = .CURISD[ISD$V_VPG] +.CURISD[ISD$W_PAGCNT] - 1;
	IF NOT .CURISD[ISD$V_DZRO]				! IF NOT DEMAND ZERO
	THEN							! THEN CHECK IF LARGER VBN
		IF .PAT$GL_NEWVBNMX LSS .CURISD[ISD$L_VBN]
		THEN
			PAT$GL_NEWVBNMX = .CURISD[ISD$L_VBN] + .CURISD[ISD$W_PAGCNT] - 1;
	CURISD=.CURISD + .CURISD[ISD$W_SIZE];			! SET NEXT ISD ADDRESS
	END;
PAT$GL_OLDVBNMX = .PAT$GL_NEWVBNMX;				! REMEMBER OLD FILE MAX ISD VBN USED
END;								! END OF PAT$GET_IHD

GLOBAL ROUTINE PAT$CREMAP(ISEADR) :NOVALUE =			! CREATES AND MAPS AN IMAGE SECTION

!++
! FUNCTIONAL DESCRIPTION:
!
!	THIS ROUTINE CREATES AND MAPS IMAGE SECTIONS.  ALL SECTIONS
!	ARE MAPPED WRITABLE.  GLOBAL SECTIONS WHICH MUST ALWAYS BE 
!	OBTAINED EXTERNALLY, WILL NOT BE MAPPED (AS PATCH HAS NO WAY TO
!	OBTAIN THEM) AND INSTEAD, AN ERROR IS REPORTED.  IF THERE
!	IS A LOCAL COPY OF THE GLOBAL SECTION, THEN THAT WILL BE PATCHED
!	NO MATTER WHAT THE MATCH CONTROL FIELD CONTAINS.
!
!	THE IMAGE SECTION DESCRIBING THE STACK MAY NOT BE PATCHED.
!
!	THE IMAGE SECTION ENTRY IS UPDATED TO CONTAIN THE MAPPED VIRTUAL ADDRESSES.
!
!	THE SECTION IS MAPPED INTO THE FIRST AVAILABLE ADDRESSES IN P0 SPACE.
!
! FORMAL PARAMETERS:
!
!	CURISE - ADDRESS OF IMAGE SECTION ENTRY TO BE MAPPED
!
! IMPLICIT INPUTS:
!
!	THE OLD IMAGE FILE HAS BEEN SET UP FOR INPUT.
!
! IMPLICIT OUTPUTS:
!
!	THE IMAGE SECTION IS MAPPED AND THE IMAGE SECTION ENTRY UPDATED.
!
! ROUTINE VALUE:
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	ERROR MESSAGE IS REPORTED IF UNABLE TO MAP OR MAP FAILS.
!	IMAGE SECTION IS MAPPED.
!
!--

BEGIN

LOCAL
	IMG_FIL_DESC: VECTOR[2,LONG],				! TEMPORARY IMAGE FILE NAME DESCRIPTOR
	CURISD: REF BLOCK[,BYTE];				! CONTAINS ADDRESS OF ISD PART OF ISE
MAP
	ISEADR: REF BLOCK[,BYTE];				! CONTAINS ADDRESS OF IMAGE SECTION ENTRY

!++
! SET UP THE VIRTUAL PAGES TO MAP IMAGE SECTION TO.
!--
CURISD=.ISEADR + ISE$C_SIZE;					! SET ADDRESS OF ISD PART OF ISE
PAT$GL_ISVADDR[START_OFF]= 200;					! START MAPPING AT FISRT AVAILABLE ADDRESS IN P0.
PAT$GL_ISVADDR[END_OFF]= 200;					! MAP AS MUCH AS NEEDED (.CURISD[ISD$W_PAGCNT]).

IMG_FIL_DESC[0]=.PAT$GL_OLDNBK[NAM$B_RSL];			! SET LENGTH OF NAME
IMG_FIL_DESC[1]=PAT$GB_OLDNAME;					! SET ADDRESS OF NAME

!++
! CHECK FOR STACK IMAGE SECTION DESCRIPTOR.
!--
IF .CURISD[ISD$B_TYPE] EQL ISD$K_USRSTACK
THEN
	SIGNAL(PAT$_NOACCESS);					! REPORT ERROR

!++
! CHECK FOR DEMAND ZERO IMAGE SECTIONS.
!--
IF .CURISD[ISD$V_DZRO]
THEN
	BEGIN
!	PAT$GL_ERRCODE=$CRMPSC(	  INADR=PAT$GL_ISVADDR		! CREATE AND MAP IMAGE SECTION
!				, RETADR=ISEADR[ISE$L_MAPVST]	! RETURNED MAP START AND END ADDRESSES
!				, FLAGS=(SEC$M_DZRO OR SEC$M_WRT OR SEC$M_CRF OR SEC$M_EXPREG) ! READ/WRITE AND DEMAND ZERO
!				, CHAN=.PAT$GL_OLDFAB[FAB$L_STV] ! CHANNEL NUMBER
!				, PAGCNT=.CURISD[ISD$W_PAGCNT]); ! NUMBER OF PAGES TO MAP
	PAT$GL_ERRCODE=LIB$_CREMAPSEC(	PAT$GL_ISVADDR
					, ISEADR[ISE$L_MAPVST]
					, (SEC$M_DZRO OR SEC$M_WRT OR SEC$M_CRF OR SEC$M_EXPREG)
					, 0
					, 0
					, IMG_FIL_DESC
					, .CURISD[ISD$W_PAGCNT]
					, 0);
	IF NOT .PAT$GL_ERRCODE
	THEN
		SIGNAL(PAT$_CRMPSC,1,.PAT$GL_ERRCODE);		! REPORT ERROR
	END

!++
! IF NOT DEMAND ZERO, THEN CHECK FOR A GLOBAL SECTION THAT HAS NO LOCAL COPY.
!--
ELSE
	BEGIN
	IF .CURISD[ISD$V_GBL]					! IF IT IS GLOBAL
	THEN
		IF (.CURISD[ISD$L_VBN] EQL 0)			! AND DOES NOT HAVE A LOCAL COPY
		THEN
			SIGNAL(PAT$_GBLONLY,1,CURISD[ISD$T_GBLNAM]); ! THEN REPORT ERROR AND UNWIND/EXIT
!	PAT$GL_ERRCODE=$CRMPSC(	  INADR=PAT$GL_ISVADDR		! CREATE AND MAP IMAGE SECTION
!				, RETADR=ISEADR[ISE$L_MAPVST]	! RETURNED MAP STAR AND END ADDRESSES
!				, VBN=.CURISD[ISD$L_VBN]	! BLOCK ADDRESS OF FIRST BLOCK TO MAP
!				, FLAGS=(SEC$M_WRT OR SEC$M_CRF OR SEC$M_EXPREG)	! READ/WRITE
!				, CHAN=.PAT$GL_OLDFAB[FAB$L_STV] ! CHANNEL NUMBER
!				, PAGCNT=.CURISD[ISD$W_PAGCNT]); ! NUMBER OF PAGES TO MAP
	PAT$GL_ERRCODE=LIB$_CREMAPSEC(	PAT$GL_ISVADDR
					, ISEADR[ISE$L_MAPVST]
					, (SEC$M_WRT OR SEC$M_CRF OR SEC$M_EXPREG)
					, 0
					, 0
					, IMG_FIL_DESC
					, .CURISD[ISD$W_PAGCNT]
					, .CURISD[ISD$L_VBN]);
	IF NOT .PAT$GL_ERRCODE
	THEN
		SIGNAL(PAT$_CRMPSC,1,.PAT$GL_ERRCODE);		! REPORT ERROR
	RETURN							! RETURN ALWAYS SUCCESSFULLY
	END;

!++
! UPDATE THE LAST MAPPED ADDRESSES IN P0.
!--
	PAT$GL_ISVADDR [START_OFF] = .ISEADR [ISE$L_MAPVST];
	PAT$GL_ISVADDR [END_OFF] = .ISEADR [ISE$L_MAPVEND];	

END;								! END OF PATMAP

END								! END OF MODULE
ELUDOM
