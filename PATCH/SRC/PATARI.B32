MODULE PATARI (
		%IF %VARIANT EQL 1
		%THEN
			ADDRESSING_MODE (EXTERNAL = LONG_RELATIVE, NONEXTERNAL = LONG_RELATIVE),
		%FI
		IDENT = 'V03-000') =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	PATCH
!
! ABSTRACT:
!
!	processes names, displays expressions, and writes into memory.
!
! ENVIRONMENT:	STARLET, user mode, interrupts disabled. non-AST level.
!
! Version:	V02-014
!
! History:
!	Author:
!		Carol Peters, 26 Oct 1976: Version 00
!
! MODIFIED BY:
!
!	V02-014	KDM0043		Kathleen D. Morse	03-MAR-1981
!		Dont create un-implemented format of ISD.
!
!	V02-013	PCG0001		Peter George		02-FEB-1981
!		Add require statement for LIB$:PATDEF.REQ
!
!--

FORWARD ROUTINE
	PAT$TRANS_NAME : NOVALUE,				! Transforms a string into a value
	PAT$MAP_ADDR : NOVALUE,					! Computes mapped address and maps image sections
	PAT$UNMAP_ADDR : NOVALUE,				! Computes unmapped address
	PAT$GET_VALUE : NOVALUE,				! Gets a stream of bytes from the image
	PAT$WRITE_MEM;						! Writes data into memory

LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:PATRST.REQ';
REQUIRE 'SRC$:PATPCT.REQ';
REQUIRE 'SRC$:PATGEN.REQ';
REQUIRE 'SRC$:BSTRUC.REQ';
REQUIRE 'SRC$:DLLNAM.REQ';
REQUIRE 'SRC$:VXSMAC.REQ';
REQUIRE 'SRC$:PATTER.REQ';
REQUIRE 'LIB$:PATDEF.REQ';					! Defines literals
REQUIRE 'LIB$:PATMSG.REQ';
REQUIRE 'SRC$:SYSSER.REQ';
REQUIRE 'SRC$:PREFIX.REQ';
REQUIRE 'SRC$:PATPRE.REQ';

EXTERNAL ROUTINE
	PAT$CREMAP,						! Create and maps image sections
	PAT$FIND_SYM;						! Matches a name with a symbol

EXTERNAL
	PAT$GL_NEWVBNMX,					! Max VBN in new image used for image sections
	PAT$GL_IMGBLKS,						! Number of blocks in new image
	PAT$GL_ISELHD,						! Listhead for image section table
	PAT$GB_MOD_PTR: REF VECTOR [, BYTE],			! Pointer to current modes
	PAT$GB_LOC_TYPE: BYTE,					! Type of last location examined
	PAT$GL_LAST_LOC,					! Current location
	PAT$GL_LAST_VAL,					! Current value
	PAT$GL_SEMAN1: VECTOR,					! First semantic stack, holds tokens
	PAT$GL_SEMAN2: VECTOR;					! Second semantic stack, holds string pointers

GLOBAL ROUTINE PAT$TRANS_NAME (SEMSP, LEXEME_STG_DESC) : NOVALUE =

!++
! Functional description:
!
!	Transforms the simplest element of a PATCH expression
!	into a binary value. Tokens expected are ALPHA_STR_TOKEN,
!	DIGIT_STR_TOKEN, and the tokens for current location,
!	last value displayed, next location, and previous location.
!
!	A name token is represented as a length count and a buffer
!	address in the string descriptor. A number token is represented as
!	a length count and a 32-bit or 64-bit precision number in
!	the buffer address.
!
! Calling sequence:
!
!	CALLS #2, PAT$TRANS_NAME
!
! Inputs:
!
!	SEMSP		- offset in parse stack that holds the
!			  current token.
!	LEXEME_STG_DESC	- string descriptor to number or name
!
! Implicit inputs:
!
!	current mode, last value, current location, next location
!
! Outputs:
!
!	none
!
! Implicit outputs:
!
!	pushes a value onto the stack in the place of the token found
!
! Routine value:
!
!	novalue
!
! Side effects:
!
!	none
!--

BEGIN

MAP
	LEXEME_STG_DESC : REF BLOCK [, BYTE];


PAT$GL_SEMAN1 [.SEMSP] = (SELECTONE .PAT$GL_SEMAN1 [.SEMSP] OF

	SET

	[DIGIT_STR_TOKEN]:
		BEGIN
		.(.LEXEME_STG_DESC [DSC$A_POINTER])
		END;

	[PERIOD_TOKEN]:
		BEGIN
		.PAT$GL_LAST_LOC
		END;

	[UP_ARROW_TOKEN]:
		BEGIN
		.PAT$GL_LAST_LOC - .PAT$GB_MOD_PTR [MODE_LENGTH]
		END;

	[BACKSLASH_TOKEN]:
		BEGIN
		.PAT$GL_LAST_VAL
		END;

	[ALPHA_STR_TOKEN]:
		BEGIN
		LOCAL
			INDEX;
		INDEX = PAT$FIND_SYM (.LEXEME_STG_DESC);
		IF (.INDEX NEQ 0)
		THEN
			BEGIN
			.SYM_VALUE (.INDEX)
			END
		ELSE SIGNAL (PAT$_NOSUCHSYM)
		END;

	[OTHERWISE]:
		SIGNAL (PAT$_PARSEERR);

	TES);

END;

GLOBAL ROUTINE PAT$MAP_ADDR (UNMAPPED_ADDR, MAPPED_ADDR_PTR, ISE_ADDR_PTR) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Determines the mapped address given an unmapped address in the image.
!	The input parameter is the unmapped address and the output parameters
!	are the mapped address and image section entry address.
!
!	First, the image section table is searched to find out if the address
!	to be mapped is in the image.  If not, then an error message is produced
!	and the appropriate action is taken by the error routine (control
!	returns for next command or to CLI).  Then the image section is mapped
!	into memory if it is not already there.  This may also produce an
!	error message similar to the above.  Then the mapped address is
!	computed and returned.
!
!	Then the mapped address is computed and returned.
!
! CALLING SEQUENCE:
!
!	PAT$MAP_ADDR ()
!
! INPUTS:
!
!	UNMAPPED_ADDR	- The unmapped address within the image
!	MAPPED_ADDR_PTR	- Place to store the corresponding mapped address
!	ISE_ADDR_PTR	- Place to store the corresponding image section entry address
!
! IMPLICIT INPUTS:
!
!	The image section table must have been set up.
!
! OUTPUTS:
!
!	MAPPED_ADDR_PTR	- The corresponding mapped address
!	ISE_ADDR_PTR	- The corresponding image section entry address
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	The image section is mapped into memory if it was not before.
!
!--

BEGIN

MAP
	ISE_ADDR_PTR : REF VECTOR,				! Address of corresponding image section table entry
	MAPPED_ADDR_PTR : REF VECTOR;				! Mapped address returned


LOCAL
	CURRENT_ISE: REF BLOCK[,BYTE];				! Current image section entry during search

!++
! Initialize for search through image section table to find the image
! section containing the unmapped virtual address.
!--
ISE_ADDR_PTR[0]=0;						! Initialize to none
CURRENT_ISE=.PAT$GL_ISELHD;					! Set listhead of image section table

!++
! Search through the image section table to find the image section which
! contains the unmapped virtual address.  Stop when the table runs out or the
! iamge section is found.
!--
WHILE (.CURRENT_ISE NEQA 0)
DO
	BEGIN
	IF (.UNMAPPED_ADDR GEQA .CURRENT_ISE[ISE$L_IMGVST]) AND
	   (.UNMAPPED_ADDR LEQA .CURRENT_ISE[ISE$L_IMGVEND])
	THEN
		BEGIN
		ISE_ADDR_PTR[0]=.CURRENT_ISE;			! Found starting image section
		EXITLOOP;
		END;
	CURRENT_ISE=.CURRENT_ISE[ISE$L_NXTISE];			! Set to next ISE in list
	END;

!++
! Check that the address was within the image section.
!--
IF (.ISE_ADDR_PTR[0] EQLA 0)
THEN
	SIGNAL(PAT$_NSADDR,1,.UNMAPPED_ADDR);			! Starting address is not within image, report error

!++
! Check that the image section is mapped.  If not, map it.  If it cannot
! be mapped, an error message is produced and this command is aborted with
! a possible image exit.
!--
IF (.CURRENT_ISE[ISE$L_MAPVEND] EQL 0)				! Is image section not mapped?
THEN
	PAT$CREMAP(.ISE_ADDR_PTR[0]);				! Yes, then map the image section

!++
! Now compute the corresponding mapped address.
!--
MAPPED_ADDR_PTR[0] = .CURRENT_ISE[ISE$L_MAPVST] + (.UNMAPPED_ADDR - .CURRENT_ISE[ISE$L_IMGVST]);
RETURN
END;

GLOBAL ROUTINE PAT$UNMAP_ADDR (UNMAP_ADDR_PTR, MAPPED_ADDR, ISE_ADDR_PTR) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Determines the unmapped address given a mapped address in the image.
!	The input parameter is the mapped address and the output parameters
!	are the unmapped address and the image section table entry address.
!
!	First, the image section table is searched to find out if the address
!	to be unmapped is in the image.  If not, then an error message is
!	produced and the apporpriate action is taken by the error routine
!	(control returns for next command or to CLI).
!
!	Then the unmapped address is computed and returned.
!
!	If everything was successful, the routine returns TRUE.
!
! CALLING SEQUENCE:
!
!	PAT$UNMAP_ADDR ()
!
! INPUTS:
!
!	UNMAP_ADDR_PTR	- Place to store the corresponding unmapped address
!	MAPPED_ADDR	- The mapped address
!	ISE_ADDR_PTR	- Place to store the corresponding image section entry address
!
! IMPLICIT INPUTS:
!
!	The image section table must have been set up.
!
! OUTPUTS:
!
!	UNMAP_ADDR_PTR	- The corresponding unmapped address
!	ISE_ADDR_PTR	- The corresponding image section entry address
!
! IMPLICIT OUTPUTS:
!
!	none
!
! ROUTINE VALUE:
!
!	none
!
! SIDE EFFECTS:
!
!	none
!
!--

BEGIN

MAP
	UNMAP_ADDR_PTR	: REF VECTOR,				! Unmapped address to find
	ISE_ADDR_PTR : REF VECTOR;				! Address of corresponding image section table entry

LOCAL
	CURRENT_ISE: REF BLOCK[,BYTE];				! Current image section entry during search

!++
! Initialize for search through image section table to find the image
! section containing the mapped virtual address.
!--
ISE_ADDR_PTR[0]=0;						! Initialize to none
CURRENT_ISE=.PAT$GL_ISELHD;					! Set listhead of image section table

!++
! Search through the image section table to find the image section which
! contains the mapped virtual address.  Stop when the table runs out or the
! image section is found.
!--
WHILE (.CURRENT_ISE NEQA 0)
DO
	BEGIN
	IF (.MAPPED_ADDR GEQA .CURRENT_ISE[ISE$L_MAPVST]) AND
	   (.MAPPED_ADDR LEQA .CURRENT_ISE[ISE$L_MAPVEND])
	THEN
		BEGIN
		ISE_ADDR_PTR[0]=.CURRENT_ISE;			! Found strarting image section
		EXITLOOP;
		END;
	CURRENT_ISE=.CURRENT_ISE[ISE$L_NXTISE];			! Set to next ISE in list
	END;

!++
! Check that the address was within the image section.
!--
IF (.ISE_ADDR_PTR[0] EQLA 0)
THEN
	SIGNAL(PAT$_PATERR);					! Starting address is not within image, report error

!++
! Now compute the corresponding unmapped address.
!--
UNMAP_ADDR_PTR[0] = .CURRENT_ISE[ISE$L_IMGVST] + (.MAPPED_ADDR - .CURRENT_ISE[ISE$L_MAPVST]);
RETURN
END;

GLOBAL ROUTINE PAT$GET_VALUE (UNMAPPED_ADDR, NUM_OF_BYTES, RETURN_ADDR_PTR) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine takes an unmapped address and a count of bytes and
!	returns the values of the stream described.
!
!	First, the starting and ending addresses of the stream are mapped.
!	Then the number of bytes within the starting image section are moved
!	into the return storage area.  If the stream was entirely within one
!	image section, the routine is finished and returns.  If the ending
!	image section is different from the starting image section, then the
!	unmapped address of the next byte to be found is mapped to produce a
!	new starting image section and mapped address.  The process repeats
!	starting with a computation of the number of bytes within this image
!	section.
!
!	If the stream is not entirely within the image, then the appropriate
!	error message is produced and this patch command is ended.
!
! CALLING SEQUENCE:
!
!	PAT$GET_VALUE ()
!
! INPUTS:
!
!	UNMAPPED_ADDR	- The unmapped address for the byte stream
!	NUM_OF_BYTES	- The number of bytes to be found in the stream
!	RETURN_ADDR_PTR - Pointer to return storage area
!
! IMPLICIT INPUTS:
!
!	The image section table must have been set up.
!
! OUTPUTS:
!
!	none
!
! IMPLICIT OUTPUTS:
!
!	The returned storage area contains the desired values.
!
! ROUTINE VALUE:
!
!	none
!
! SIDE EFFECTS:
!
!	The image section is mapped if it was not before.
!
!--

BEGIN

MAP
	RETURN_ADDR_PTR : REF VECTOR[,BYTE];			! Address of return storage area for byte stream

LOCAL
	LENGTH,							! Remaining length of byte stream to move
	PARTIAL_LENGTH,						! Number of bytes within starting image section to move
	VALUE_BUFFER,						! Holds address of return value buffer
	ST_MAPPED_ADDR: REF VECTOR[,BYTE],			! Starting mapped address of remaining byte stream
	END_MAPPED_ADDR,					! Ending mapped address of byte stream
	START_ISE: REF BLOCK[,BYTE],				! Starting image section for remaining byte stream
	END_ISE: REF BLOCK[,BYTE];				! Ending image section for remaining byte stream

!++
! Initialize number of bytes left to move.  Find the starting and ending
! mapped addresses and image sections.
!--
LENGTH=.NUM_OF_BYTES;
VALUE_BUFFER=.RETURN_ADDR_PTR;
PAT$MAP_ADDR(.UNMAPPED_ADDR, ST_MAPPED_ADDR, START_ISE);
PAT$MAP_ADDR(.UNMAPPED_ADDR+.NUM_OF_BYTES-1, END_MAPPED_ADDR, END_ISE);

!++
! This loop moves the bytes into the return storage area.  It only takes
! values from the starting image section.  If the byte stream is in more than
! one image section, a partial length is moved in, a new starting image section
! is found, and then the next partial length is moved into the return buffer.
! This is repeated until all the byte stream requested is moved.
!--
REPEAT
	BEGIN

	!++
	! Find the number of bytes within the starting image section.
	!--
	IF (.START_ISE EQLA .END_ISE)
	THEN
		PARTIAL_LENGTH=.LENGTH
	ELSE
		PARTIAL_LENGTH=.START_ISE[ISE$L_MAPVEND] - .ST_MAPPED_ADDR
				- .NUM_OF_BYTES + .LENGTH +1;

	!++
	! Move in the partial byte stream found in the starting image section.
	! Also update the remaining length to be moved.
	!--
	LENGTH=.LENGTH - .PARTIAL_LENGTH;
	VALUE_BUFFER=CH$MOVE(.PARTIAL_LENGTH, .ST_MAPPED_ADDR, .VALUE_BUFFER);

	!++
	! Now check if all of the desired stream has been found.  If not, find
	! a new starting image section and repeat the process.
	!--
	IF (.LENGTH EQL 0)
	THEN
		RETURN;
	PAT$MAP_ADDR(.UNMAPPED_ADDR+.NUM_OF_BYTES-.LENGTH, ST_MAPPED_ADDR, START_ISE);


END;								! End of loop to move byte stream
END;								! End of PAT$GET_VALUE

GLOBAL ROUTINE PAT$WRITE_MEM (DEST_UNMAP_ADDR, SRC_ADDRESS, LENGTH) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Writes a sequence of values (bytes) to memory in
!	the user program.  The mapped destination address, image section
!	entry, source, and number of bytes to write are all passed as parameters.
!
!
!	First, the image section table is searched to find out if the
!	addresses to be modified are in the image.  If not, then an error
!	message is produced and the appropriate action is taken by the
!	error routine (control returns for next command or to CLI).  Then,
!	the image section is mapped into memory if it is not already there.
!	This may also produce an error message similar to the above.
!
!	Once the starting address is mapped, the routine writes out as much
!	of the sequence contained in that image section.  If some of the
!	sequence is in another section, the routine sets up new parameters and
!	calls itself recursively to write the remaining bytes.
!
!	If everything was successful, the routine returns TRUE.
!
! CALLING SEQUENCE:
!
!	PAT$WRITE_MEM ()
!
! INPUTS:
!
!	DEST_UNMAP_ADDR	- The address of the location to be changed
!	START_ISE	- The address of the image section descriptor for
!			  the first address to be written
!	SRC_ADDRESS	- The address of where the bytes are stored.
!	LENGTH		- The number of bytes to be written.
!
! IMPLICIT INPUTS:
!
!	The image section table must be set up.
!
! OUTPUTS:
!
!	TRUE or an error message and unwind/exit.
!
! IMPLICIT OUTPUTS:
!
!	none
!
! ROUTINE VALUE:
!
!	TRUE
!
! SIDE EFFECTS:
!
!	The value is written to memory.
!
!--

BEGIN

MAP
	DEST_UNMAP_ADDR	: REF VECTOR[,BYTE],
	SRC_ADDRESS	: REF VECTOR[,BYTE];

LOCAL
	START_ISE: REF BLOCK[,BYTE],				! Image section table entry for starting address
	START_ISD: REF BLOCK[,BYTE],				! Image section descriptor for starting address
	END_ISE,						! Image section table entry for ending address
	END_MAPPED_ADDR,					! Mapped ending address to be altered
	END_UNMAP_ADDR,						! Unmapped ending address to be altered
	DEST_MAPPED_ADR: REF VECTOR[,BYTE],			! Unmapped starting address to be altered
	PARTIAL_LENGTH;						! Length to write into starting image section

!++
! Initialize for search through image section table to find the image
! sections containing the starting and ending virtual addresses to be altered.
!--
PAT$MAP_ADDR(.DEST_UNMAP_ADDR, DEST_MAPPED_ADR, START_ISE);	! Find unmapped starting address
END_UNMAP_ADDR=.DEST_UNMAP_ADDR + .LENGTH - 1;			! Get last address to be written

!++
! Find the mapped ending address to be altered.  This will map the image
! section if it is not already mapped.
!--
PAT$MAP_ADDR(.END_UNMAP_ADDR, END_MAPPED_ADDR, END_ISE);	! Map the ending address

!++
! Check that both addresses were within image sections.
!--
IF (.START_ISE EQLA 0)
THEN
	SIGNAL(PAT$_NSADDR,1,.DEST_UNMAP_ADDR);			! Starting address is not within image, report error
IF (.END_ISE EQLA 0)
THEN
	SIGNAL(PAT$_NSADDR,1,.END_UNMAP_ADDR);			! Ending address is not within image, report error

!++
! Now check if all of addresses to be altered are within the same image
! section.  If not, then set the length to be altered in this image section.
!--
IF (.START_ISE NEQA .END_ISE)
THEN
	PARTIAL_LENGTH=.START_ISE[ISE$L_MAPVEND] - .DEST_MAPPED_ADR + 1
ELSE
	PARTIAL_LENGTH=.LENGTH;

!++
! Move the new values into this image section.
!--
CH$MOVE(.PARTIAL_LENGTH,SRC_ADDRESS[0],DEST_MAPPED_ADR[0]);

!++
! Check if the image section was demand zero pages.  If so, change the image
! section descriptor to be a process private type.  The virtual block number is
! set to zero and must be changed when the new image is written out.  The image
! identification is set to zero.  The image section descriptor size is
! incremented to include the additional VBN field.
!--
START_ISD=.START_ISE + ISE$C_SIZE;				! Get address of image section descriptor
IF .START_ISD[ISD$V_DZRO]					! Check if was dmzro
THEN
	BEGIN
	START_ISD[ISD$V_DZRO]=FALSE;				! Set no longer demand zero
	START_ISD[ISD$L_VBN]=.PAT$GL_NEWVBNMX + 1;		! Record unknown VBN
	START_ISD[ISD$W_SIZE]=.START_ISD[ISD$W_SIZE] + A_LONGWORD; ! Increment image section descriptor size
!++
! These are changes for when process-private ISD's contain IDENT fields.
! This is currently an un-implemented format of ISD.
!--
!	START_ISD[ISD$L_IDENT]=0;				! Set ident to zero
!	START_ISD[ISD$W_SIZE]=.START_ISD[ISD$W_SIZE] + A_QUADWORD; ! Increment image section descriptor size
	PAT$GL_NEWVBNMX = .PAT$GL_NEWVBNMX + .START_ISD[ISD$W_PAGCNT]; ! Increment max VBN in new image file
	PAT$GL_IMGBLKS = .PAT$GL_IMGBLKS + .START_ISD[ISD$W_PAGCNT]; ! Increment for number of new blocks in image
	END;

!++
! Check if this was a global section.  If so, warn that only the local
! version is being patched.
!--
IF .START_ISD[ISD$V_GBL]
THEN
	SIGNAL((PAT$_GBLWARN AND NOT STS$M_SEVERITY)+MSG$K_INFO,
			1,START_ISD[ISD$T_GBLNAM]);		! Only warn of possible problem

!++
! Check if all the values were changed.  If not, then recursively call
! this routine with new parameters.
!--
IF (.LENGTH EQL .PARTIAL_LENGTH)
THEN
	RETURN TRUE
ELSE
	BEGIN
	PAT$WRITE_MEM(DEST_UNMAP_ADDR[.PARTIAL_LENGTH],
			SRC_ADDRESS[.PARTIAL_LENGTH],
			.LENGTH-.PARTIAL_LENGTH);
	RETURN TRUE;
	END;

END;

END
ELUDOM
