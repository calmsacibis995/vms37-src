MODULE PATSSV (
		%IF %VARIANT EQL 1
		%THEN
			ADDRESSING_MODE (EXTERNAL = LONG_RELATIVE, NONEXTERNAL = LONG_RELATIVE),
		%FI
		IDENT = 'V03-000') =
BEGIN

!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
! FACILITY:	PATCH
!
!++
! FUNCTIONAL DESCRIPTION:
!
!	CALLS TO STARLET OPERATING SYSTEM I/O SERVICES.  INCLUDE
!	ASSIGNMENT AND DEASSIGNMENT OF CHANNELS, READS, WRITES.
!
! Version:	V02-018
!
! History:
!	Author:
!		Carol Peters, 21 Sep 1976: Version 01
!
!	Modified by:
!		Kevin Pammett, 15-dec-77: Version 25
!
!	V02-018	PCG0001		Peter George		02-FEB-1981
!		Add require statement for LIB$:PATDEF.REQ
!
!	V0117	CNH0016		Chris Hume		 4-Oct-1979	14:00
!		Fix PAT$OUT_SYM_VAL to properly insert a leading zero where
!		required to distinguish hex constants from symbols.  This cures
!		several anomalies.  (PATMAI.B32 02.26)
!
! Revision History:
!
! NO	DATE		PROGRAMMER		PURPOSE
! --	----		----------		-------
!
! 00	20-DEC-77	K.D. MORSE		ADAPT VERSION 25 FOR PATCH.
!  01	27-DEC-77	K.D. MORSE		CHANGE PAT$OUT_TYP_VAL CALLS TO
!						FOR$CVT ... TO CALL PAT$GET_VALUE.
!  02	2-JAN-78	K.D. MORSE		ADD CHECKS FOR IMAGE WITH NO SYMBOLS.
!  03	4-JAN-78	K.D. MORSE		FOR OUTPUTTING COMPLEX NUMBERS,
!						SURROUND THEM IN PARENTHESIS, AND
!						REMOVE THE SPURIOUS QUOTES
!						AROUND THE COMMA. (26)
!						NO CHANGES FOR 27.
!  04	28-FEB-78	K.D. MORSE		NO CHANGES FOR 28-29.
!  05	02-MAR-78	K.D. MORSE		NO CHANGES FOR 30-31.
!  06	17-MAR-78	K.D. MORSE		ADD CODE TO OUTPUT A LEADING 0
!						FOR NEGATIVE HEX NUMBERS TO
!						PAT$OUT_NUM_VAL.  THE CODE WAS
!						TO DO THIS IN PAT$INS_DECODE
!						WAS INCORRECT AND THERFORE REMOVED.
!  07	24-MAR-78	K.D. MORSE		NO CHANGES FOR VERS 32-34.
!  08	30-MAR-78	K.D. MORSE		ADD "PC-RELATIVE" ARRAYS.
!  09	07-APR-78	K.D. MORSE		ADD PAT$PV_TO_CS, AND CHANGE
!						PAT$PRINT_PATH TO USE IT (35).
!						OUT_SYM_VAL NOW CONSIDERS
!						DEFINE SYMBOLS (FOR EXACT
!						MATCHES ONLY) (36).
!						NO CHANGES FOR 37.
!  10	25-APR-78	K.D. MORSE		CONVERT TO NATIVE COMPILER.
!  11	17-MAY-78	K.D. MORSE		SHOW_MODU NOW SKIPS THE GLOBAL
!						MC. (38)
!						SHOW_MODU PRINTS ERROR MESSAGE
!						IF THERE IS NO DST. (39)
!  12	18-MAY-78	K.D. MORSE		NO CHANGES FOR VERS 40-41.
!  13	13-JUN-78	K.D. MORSE		ADD FAO COUNTS TO SIGNALS.
!  14	27-JUN-78	K.D. MORSE		ADD LEADING ZEROS FOR HEX
!						OUTPUT IN OUT_SYM_VAL. (42)
!  15	28-JUN-78	K.D. MORSE		NO CHANGES FOR VERS 43-48.
!  16	29-JUN-78	K.D. MORSE		NO CHANGES FOR VERS 49.
!						SHOW MODULE NOW PRINTS
!						ALL NUMBERS AS DECIMAL (50).
!						NO CHANGES FOR VERS 51.
!
!--

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
	PAT$PV_TO_CS : NOVALUE,					! Encode a pathvector into a buffer.
	PAT$FAO_PUT : NOVALUE,					! Stuff output into current output buffer.
	PAT$MODULE_SIZE,					! Estimate the RST size of a module.
	PAT$OUT_NUM_VAL : NOVALUE,				! Output of numeric values.
	PAT$OUT_PUT : NOVALUE,					! Actually write out a line to tty
	PAT$OUT_SYM_VAL : NOVALUE,				! Output values either in numeric
								! or in symbolic form.
	PAT$SHOW_MODULE : NOVALUE,				! List off the module chain.
	PAT$SHOW_SCOPE : NOVALUE,				! Print out the current CSP.
	PAT$PRINT_PATH : NOVALUE;				! Print out a symbol pathname

LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:VXSMAC.REQ';
REQUIRE 'LIB$:PATDEF.REQ';				! Defines literals
REQUIRE 'LIB$:PATMSG.REQ';
REQUIRE 'SRC$:PATPCT.REQ';
REQUIRE 'SRC$:PATGEN.REQ';
REQUIRE 'SRC$:SYSLIT.REQ';
REQUIRE 'SRC$:SYSSER.REQ';
REQUIRE 'SRC$:PATRST.REQ';
REQUIRE 'SRC$:BSTRUC.REQ';
REQUIRE 'SRC$:DLLNAM.REQ';
REQUIRE 'SRC$:PREFIX.REQ';
REQUIRE 'SRC$:PATPRE.REQ';

EXTERNAL ROUTINE
	PAT$FIND_VAL,						! VAL_TO_SYM on define symbols
	PAT$GET_BOUNDS : NOVALUE,				! Understand array descriptors
	PAT$GET_VALUE : NOVALUE,				! Takes unmapped address and returns contents of it
	PAT$ADD_NT_T_PV,					! Built pathname vectors
	PAT$REPORT_FREE,					! Bytes remaining in free storage
	PAT$VAL_TO_SYM,						! Translate values to their
								! symbolic equivalent
	PAT$SYMBOL_VALU,
	SYS$FAOL: ADDRESSING_MODE (ABSOLUTE);			! System service to do formatted output

EXTERNAL
	PAT$GL_SYMTBPTR,					! Pointer to default symbol table
	PAT$GL_OLDLABLS,					! Pointer to old labels symbol table
	PAT$GL_SYMHEAD,						! Pointer to user-defined symbol table
	PAT$GB_SYMBOLS,						! Indicator if image has symbols
	PAT$CP_OUT_STR: REF VECTOR[, BYTE],			! Points into current output buffer
	PAT$GB_MOD_PTR: REF VECTOR[, BYTE],			! Points to current I/O mode settings
	PAT$GL_BUF_SIZ,						! Holds current character count in output buffer
	PAT$GL_CSP_PTR  : ref pathname_vector,			! The current scope position (CSP)
	PAT$GL_LAST_VAL,					! The last value displayed
	PAT$GL_MC_PTR	: REF MC_RECORD,			! Pointer to the module chain (MC).	
	PAT$GL_NEXT_LOC;					! Next location to display

GLOBAL ROUTINE PAT$FAO_PUT( STRING, ARGUMENTS ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Do just what $FAO does, only here we work in co-operation with a
!	global character buffer into which we are encoding arbitrary lines
!	of output.
!
!	All console output done within PATCH should use this routine to build
!	output lines.  The only other I/O call which PATCH should be making
!	(for the console) is to PAT$OUT_PUT, which simply says "put out whatever
!	PAT$FAL_PUT built".
!
! CALLING SEQUENCE:
!
!	PAT$FAO_PUT ();
!
! INPUTS:
!
!	STRING	  - A counted string which contains the directives for $FAO.
!	ARGUMENTS - The arguments for $FAO.
!
! IMPLICIT INPUTS:
!
!	PAT$CP_OUT_STR	- Pointer to where we are in the current output buffer.
!	PAT$GL_BUF_SIZ	- Count of characters in output buffer.
!
! OUTPUTS:
!
!	The $FAO output is put into the output buffer.
!
! IMPLICIT OUTPUTS:
!
!	The global character pointer is incremented so that it points
!	(as always) to the next available place in the output buffer.
!	The buffer count variable is incremented by the size of this string.
!
! ROUTINE VALUE:
!
!	none
!
! SIDE EFFECTS:
!
!	none
!--

BEGIN
MAP
	STRING : REF VECTOR[,BYTE];
LOCAL
	INP_DESC : VECTOR[2],					! Input desc for $FAO
	OUT_DESC : VECTOR[2],					! Output desc for $FAO
	STR_SIZE : WORD;					! $FAO returns output size here

!++
! Build the descriptors that $FAO wants, ask it to do the encoding,
! copying the output into our global output buffer, and finally update the
! global pointer to the next free character position in the buffer.
!-
INP_DESC[0] = .STRING[0];
INP_DESC[1] = STRING[1];
OUT_DESC [0] = TTY_OUT_WIDTH - 1 - .PAT$GL_BUF_SIZ;
OUT_DESC[1] = .PAT$CP_OUT_STR;
SYS$FAOL( INP_DESC, STR_SIZE, OUT_DESC, ARGUMENTS );
PAT$CP_OUT_STR = .PAT$CP_OUT_STR + .STR_SIZE;
PAT$GL_BUF_SIZ = .PAT$GL_BUF_SIZ + .STR_SIZE;
END;

GLOBAL ROUTINE PAT$MODULE_SIZE( MC_PTR ) =

!++
! Functional Description:
!
!	Given an MC pointer to a given module, estimate how many bytes of RST
!	storage would be required to SET (initialize) this module into the RST.
!
! Calling Sequence:
!
!	The routine is simply called to pick up the returned value.  The reason
!	why it is global is because it is called in PAT$SHOW_MODULE, of
!	PATSSV.B32, and in ADD_MODULE, of PATBLD.B32.
!
! Formal Parameters:
!
!	MC_PTR	-An MC pointer which tells us all we need
!		 to know about the indicated module.
!
! Implicit Inputs:
!
!	The RST storage we consider is independent of GLOBAL
!	considerations.  This means that in all likelihood we overestimate.
!	(We guarantee NOT to underestimate in any case.)
!
!	How the storage manager works, and how we
!	use it to allocate all RST storage.
!
! Implicit Outputs:
!
!	none.
!
! Return Value:
!
!	The number of bytes required to add the module
!	to the Runtime Symbol Table data structures.
!
!--

BEGIN

MAP
	MC_PTR : REF MC_RECORD;

LOCAL
	TOTAL_BYTES;

!++
! Macro to calculate the total number of bytes
! taken for so-called vector storage (which
! is how we allocate NTs, LVTs, and SATs).
!--
MACRO

	VEC_STORAGE_FOR( RECORDS, SIZE ) = (%UPVAL + 		! The storage manager's overhead,
					( (RST_UNITS( RECORDS * SIZE )) * %UPVAL ))%; ! Rounded up vector storage space

!++
! Tally up the total number of bytes needed to add the NTs, LVTs, and
! SATs for the indicated module.  First initialize counter.
!--
TOTAL_BYTES = 0;

!++
! Although it is not true, we must assume that NT entries are fixed-size. 
!--
TOTAL_BYTES = VEC_STORAGE_FOR( .MC_PTR [MC_NAMES], RST_NT_SIZE );

!++
! Add on that taken for SATs and LVTs.
!--
TOTAL_BYTES = .TOTAL_BYTES
	    + VEC_STORAGE_FOR( .MC_PTR [MC_STATICS], RST_SAT_SIZE )
	    + VEC_STORAGE_FOR( .MC_PTR [MC_LITERALS], RST_LVT_SIZE );

!++
! Return the size.
!--
RETURN(.TOTAL_BYTES);
END;

GLOBAL ROUTINE PAT$OUT_NUM_VAL ( VALUE, NEW_LENGTH, NEW_RADIX, ZERO_FILL) : NOVALUE =

!++
! Functional Description:
!
!	Format the given value according to the current output mode settings.
!	The formatted value is inserted into the output buffer described by
!	PAT$CP_OUT_STR and PAT$GL_BUF_SIZ.  If the value is formatted in
!	hexadecimal and negative and ZERO_FILL is TRUE, then a leading zero
!	is output.
!
! Calling Sequence:
!
!	PAT$OUT_NUM_VAL (VALUE, NEW_LENGTH, NEW_RADIX, ZERO_FILL)
!
! Inputs:
!
!	VALUE - The actual value we are to write out.
!	NEW_LENGTH - Either 0, or the MODE_LENGTH we should use.
!		     (0 => use current LENGTH, non-zero allows
!		      it to be overridden.)
!		     (The literal, NO_OVERRIDE = 0, is used for this.)
!	NEW_RADIX - Either 0, or the MODE_RADIX we should use.
!	ZERO_FILL - Indicator if leading zero should be output
!			(TRUE = yes, FALSE = no)
!
! Implicit Inputs:
!
!	PAT$GB_MOD_PTR - points to the current mode data structure.
!	PAT$CP_OUT_STR - points into the output buffer at the first
!			 place in the buffer which is available.
!	PAT$GL_BUF_SIZ - holds the current number of characters in
!			 the buffer.
!
! Outputs:
!
!	The (numeric) character representation
!	of the value is encoded into the output buffer.
!
! Implicit Outputs:
!
!	The buffer pointer, PAT$CP_OUT_STR, is incremented.  
!	The buffer count, PAT$GL_BUF_SIZ, is incremented.
!
! Routine Value:
!
!	NOVALUE.
!
! Side Effects.
!
!	Negative hex numbers may be preceded by a leading 0.
!--

BEGIN

LOCAL
	USE_LENGTH,						! The MODE_LENGTH we actually use
	USE_RADIX;						! The MODE_RADIX we actually use

OWN
	FORMAT : VECTOR[4,BYTE]					! Build format string here
			 INITIAL( BYTE( %ASCIC '!??' ) );

!++
! Assume that we are passed an override for the LENGTH and RADIX,
! but revert to the globally-set one if this is untrue.
!--
IF ((USE_LENGTH = .NEW_LENGTH) EQL 0)
THEN
	USE_LENGTH = .PAT$GB_MOD_PTR  [MODE_LENGTH];
IF ((USE_RADIX = .NEW_RADIX) EQL 0)
THEN
	USE_RADIX = .PAT$GB_MOD_PTR  [MODE_RADIX];

!++
! Now just build the required 2-character format string descriptor,
! based upon the current setting of the mode length and radix.
!
! We assume signed, for decimal output, and take longword hexadecimal either
! when that is explicitly the case, or when some unknown length or radix is indicated.
!--
FORMAT[2] = ( SELECTONE .USE_RADIX OF
		SET
		[OCTAL_RADIX]:		'O';
		[DECIMAL_RADIX]:	'S';
		[OTHERWISE]:		'X';
		TES
	    );

FORMAT[3] = ( SELECTONE .USE_LENGTH OF
		SET
		[BYTE_LENGTH]:	'B';
		[WORD_LENGTH]:	'W';
		[OTHERWISE]:	'L';
		TES
	    );

!++
! Now check if the output radix is hexadecimal and if a leading zero is needed.
! This is required to make PATCH output acceptable as input.  Hexadecimal
! numbers require the leading character to be a numeric.
!--
IF (.FORMAT[2] EQLU 'X') AND (.ZERO_FILL) AND
   (.(VALUE)<0, .USE_LENGTH*8, 1> GTRA %X'9FFFFFFF')
THEN
	BEGIN
	PAT$CP_OUT_STR[0] = '0';
	PAT$CP_OUT_STR = .PAT$CP_OUT_STR + 1;
	PAT$GL_BUF_SIZ = .PAT$GL_BUF_SIZ + 1;
	END;

PAT$FAO_PUT ( FORMAT, .VALUE );

END;

GLOBAL ROUTINE PAT$OUT_PUT ( BUFFER ) : NOVALUE =

!++
! Functional Description:
!
!	Cause the current output buffer to be actually
!	output to the console.
!
! Calling Sequence:
!
!	PAT$OUT_PUT ()
!
! Inputs:
!
!	BUFFER - Pointer to the beginning of the current output
!		buffer.  this is supposed to be a counted
!		string except that noone has supplied the count yet.
!		ie we expect that the actual string to be printed
!		starts in byte BUFFER+1.
!
! Implicit Inputs:
!
!	PAT$CP_OUT_STR - Points into this output buffer at the first
!			 place in the buffer which is NOT to be printed.
!	PAT$GL_BUF_SIZ - Holds count of characters in buffer
!
! Outputs:
!
!	The string is printed, exactly as it is in the
!	buffer - ie, it should contain whatever carriage control 
!	you want.
!
! Implicit Outputs:
!
!	The buffer pointer, PAT$CP_OUT_STR, is set to zero.  This will
!	help routines know if they are to use their own buffer or
!	if one is already partially built.
! ***	I don't think we have ever actually used the above
!	'feature', and feel that this routine ought, instead, set
!	up for more PAT$FAO_PUT calls on the current buffer when we
!	are called to output it.
!
! Routine Value:
!
!	NOVALUE.
!
! Side Effects:
!
!	none.
!--

BEGIN

MAP
	BUFFER : REF VECTOR[,BYTE];				! Points to output buffer

!++
! Fill in the count, and pass it to QIO.
!--
BUFFER [0] = .PAT$GL_BUF_SIZ;
$FAO_TT_OUT ( '!AC', .BUFFER );
PAT$CP_OUT_STR = 0;
END;

GLOBAL ROUTINE PAT$OUT_SYM_VAL ( VALUE, NEW_LENGTH, NEW_RADIX ) : NOVALUE =

!++
! Functional Description:
!
!	Write out the given value according to the current
!	mode settings - including the current mode setting
!	for the [NO]SYMBOLS flag.  (By 'write out', we mean
!	'encode into the output buffer').
!
! Calling Sequence:
!
!	PAT$OUT_SYM_VAL ()
!
! Inputs:
!
!	VALUE - The actual value we are to write out.
!	NEW_LENGTH - Either 0, or the MODE_LENGTH we should use.
!		     (0 => use current LENGTH, non-zero allows
!		      it to be overridden.)
!		     (The literal, NO_OVERRIDE = 0, is used for this.)
!	NEW_RADIX - Either 0, or the MODE_RADIX we should use.
!
! Implicit Inputs:
!
!	PAT$GB_MOD_PTR - Points to the current mode data structure.
!	PAT$CP_OUT_STR - Points into the output buffer at the first
!			 place in the buffer which is available.
!	PAT$GL_BUF_SIZ - Holds the current number of characters in
!			 the buffer.
!
! Outputs:
!
!	The symbolic or numeric (or symbolic+residue) representation
!	of the value is encoded into the output buffer.
!
! Implicit Outputs:
!
!	The buffer pointer, PAT$CP_OUT_STR, is incremented.  
!	The buffer count, PAT$GL_BUF_SIZ, is incremented.
!
! Routine Value:
!
!	NOVALUE.
!
! Side Effects.
!	The VALUE is printed out.
!--

BEGIN

LOCAL
		ARRAY_DESC_ADDR,				! The address of an array descriptor,
								! if we symbolize an array reference.
		NT_PTR : REF NT_RECORD,				! A pointer to the name table (NT) entry
								! which corresponds to the symbol which we
								! deal with if we do symbolic output.
		REAL_VALUE,					! Used to recover the actual or real value
								! of the symbol we may base our symbolic
								! output off.
		PATH_VEC : PATHNAME_VECTOR;			! Symbol path vector used to contain the
								! whole pathname assocaited with the
								! symbol pointed to by NT_PTR, above.

!++
! First, see if the value is an exact match to a DEFine type symbol.  Note that
! these symbols have nothing to do with the so-called RST and so much be handled
! specially.  First look in the current label symbol table, then in the old
! label table, and lastly in the user-defined symbol table.
!--
IF (.PAT$GB_MOD_PTR[MODE_SYMBOLS])
THEN
	BEGIN
	LOCAL
		TEMP_SYMTB,
		INDEX;

	INDEX = PAT$FIND_VAL(.VALUE,TRUE);
	IF (.INDEX EQL 0)
	THEN
		BEGIN
		TEMP_SYMTB = .PAT$GL_SYMTBPTR;			! Remember current label table
		PAT$GL_SYMTBPTR = .PAT$GL_OLDLABLS;		! Use old labels symbol table
		INDEX = PAT$FIND_VAL(.VALUE,TRUE);
		IF (.INDEX EQL 0)
		THEN
			BEGIN
			PAT$GL_SYMTBPTR = .PAT$GL_SYMHEAD;	! Use user-defined symbol table
			INDEX = PAT$FIND_VAL(.VALUE,TRUE);
			END;
		PAT$GL_SYMTBPTR = .TEMP_SYMTB;			! Restor current label table
		END;
	IF (.INDEX NEQ 0)
	THEN
		BEGIN
		!++
		! Found an exact match.  Print this and return an OK status.
		!--
		PAT$FAO_PUT(UPLIT(%ASCIC '!AD'),.SYM_CHCOUNT(.INDEX),SYM_NAME(.INDEX));
		RETURN;
		END;
	END;
!++
! Even though PAT$VAL_TO_SYM 'initializes' NT_PTR when we pass on its address,
! we must still initialize it to zero because otherwise the top half of the
! longword never gets cleared.  (PAT$VAL_TO_SYM thinks, and rightly so,
! that NT_PTRs are only 2 bytes long, the problem is that BLISS doesn't realize
! this when it passes .NT_PTR on as an actual parameter later on.)
!--
NT_PTR = 0;
ARRAY_DESC_ADDR = 0;

!++
! First, see if we should even attempt symbolic output.
!--
IF (.PAT$GB_MOD_PTR [MODE_SYMBOLS]) AND (.PAT$GB_SYMBOLS)
THEN
	!++
	! Next, ask VAL_TO_SYM for the NT-pointer which
	! corresponds to the symbol we should use.
	! The 'FALSE' says that we don't want LVTs
	! (literals) to be considered.
	!--
	IF (PAT$VAL_TO_SYM( .VALUE, NT_PTR, FALSE))
	THEN
		!++
		! Then, to be able and output "symbol+offset",
		! we must be able to recover the actual value
		! of the indicated symbol.
		!--
		IF (PAT$SYMBOL_VALU( .NT_PTR, REAL_VALUE))
		THEN
			BEGIN
			!++
			! See if the value picked up by PAT$SYMBOL_VALU is
			! really the address which is bound to the
			! symbol, or if it is the address of a descriptor.
			! Note that DST_PTR is invalid for NTs which
			! were created only for global symbols.
			!--
			IF (.NT_PTR [NT_UP_SCOPE] NEQ 0)
			THEN
				BEGIN
				LOCAL
					BOUNDS : ARRAY_BNDS_DESC,
					DST_RECRD : REF DST_RECORD;

				!++
				! Pick up the DST pointer so that we can see
				! if access is via descriptor.  
				!--
				DST_RECRD = .NT_PTR [NT_DST_PTR];
				IF (.DST_RECRD [DSTR_ACCES_TYPE] EQL ACCS_DESCRIPTOR) AND
				   ( ( (.DST_RECRD[DSTR_ACCES_BASD] EQL ACCS_BASDIR) AND
				       (.DST_RECRD[DSTR_ACCES_BREG] EQL 15) ) OR
				     ( (.DST_RECRD[DSTR_ACCES_BASD] EQL 0) AND
				       (.DST_RECRD[DSTR_ACCES_BREG] EQL 0) ) )
				THEN
					BEGIN
					!++
					! REAL_VALUE, returned above, is actually
					! the address of a descriptor.  Modify this
					! value to be the beginning virtual address
					! of the array.
					!--
					ARRAY_DESC_ADDR = .REAL_VALUE;
					PAT$GET_BOUNDS( .ARRAY_DESC_ADDR, BOUNDS);
					REAL_VALUE = .BOUNDS [ARRAY_ADDRESS];
					END;
				END;

			!++
			! For unbounded symbols, we don't
			! allow "symbol+offset" unless "offset"
			! is less than a maximum value.
			!--
			IF (((.VALUE - .REAL_VALUE) LSSA RST_MAX_OFFSET)
			   OR (.NT_PTR [NT_IS_BOUNDED]))
			THEN
				BEGIN
				!++
				! We have all we need now, so just
				! encode the characters into the
				! output stream. To do this we
				! must first build a pathname vector
				! to correspond to the NT scope chain we
				! implicitly now have.
				!--
				PAT$ADD_NT_T_PV( .NT_PTR, PATH_VEC );

				!++
				! Then we simply print this vector.
				!--
				PAT$PRINT_PATH( PATH_VEC );

				!++
				! See if there is any residue - i.e. see if
				! "symbol[(...)]" is sufficient, or if we must
				! output "symbol[(...)]+offset".
				!--
				IF (.VALUE EQL .REAL_VALUE)
				THEN
					RETURN;			! No residue -> we're done.

				!++
				! The residue (offset) should
				! be printed in numeric form, preceeded
				! by a '+'.
				!--
				PAT$FAO_PUT(UPLIT(%ASCIC '+'));
				VALUE = .VALUE-.REAL_VALUE;

				!++
				! We should be able to simply
				! drop out of this part of the
				! code and have this done by PAT$OUT_NUM_VAL.
				! Until FAO can print HEX without the leading
				! 0s, we must do the following...
				!--
				IF (.PAT$GB_MOD_PTR [MODE_RADIX] EQL HEX_RADIX)
				THEN
					BEGIN
					!++
					! Special cludge to ignore leading 0s.
					! But to then put exactly 1 leading 0
					! when the rest begins with A-F.
					!--
					LOCAL
						CLUDGE_SIZE,	! # of digits for FAO.
						CLUDGE_VAL;	! First non-zero digit.

					!++
					! We must always print at least 1 digit.
					!--
					DECRU I FROM 7
					DO
						BEGIN
						CLUDGE_SIZE = .I+1;
						IF (CLUDGE_VAL=.VALUE<.I*4,4,0>) NEQ 0
						THEN
							EXITLOOP;
						END;

					IF .CLUDGE_VAL GEQU %X'A'
					THEN
						PAT$FAO_PUT(UPLIT(%ASCIC'0'));
					PAT$FAO_PUT( UPLIT( %ASCIC '!#XL' ),
						.CLUDGE_SIZE,.VALUE);
					RETURN;
					END;
				END;
			END;

!++
! We didn't try to do symbolic output, or we failed completely at it, or
! it went OK but we still have a 'residue'  value to output.
!--
PAT$OUT_NUM_VAL( .VALUE, .NEW_LENGTH, .NEW_RADIX, TRUE);
END;

GLOBAL ROUTINE PAT$SHOW_MODULE : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Show which modules from the MC are in the RST.
!
! FORMAL PARAMETERS:
!
!	NONE.
!
! IMPLICIT INPUTS:
!
!	PAT$GL_MC_PTR	-I s assumed to point to the beginning
!			  of the MC.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION CODES:
!
!	NOVALUE.
!
! SIDE EFFECTS:
!
!	A summary of the current modules which the RST knows
!	about is written to the console.
!
!--

BEGIN
LOCAL
	OUTPUT_BUFFER : VECTOR [TTY_OUT_WIDTH, BYTE],		! Buffer to build report in.
	NUM_MC_ENTRIES,						! How many entries there are in the MC.
	MC_PTR : REF MC_RECORD;					! Pointer to current MC record.

!++
! Set up to do standard PATCH I/O.
!--
PAT$CP_OUT_STR = OUTPUT_BUFFER +1;
PAT$GL_BUF_SIZ = 0;

!++
! Initialize the pointer that we use to 'chain' thru the module chain.
!--
IF ((MC_PTR = .PAT$GL_MC_PTR[MC_NEXT]) EQL 0)
THEN
	BEGIN
	SIGNAL(PAT$_NOLCL+MSG$K_INFO);
	RETURN;
	END;

!++
! Print out the title, and then loop thru the module chain simply giving the
! relevant information for each module which we know about.
!--
NUM_MC_ENTRIES = 0;
PAT$FAO_PUT( UPLIT (%ASCIC 'module name  symbols  size!/'));
PAT$OUT_PUT(OUTPUT_BUFFER);
DO
	BEGIN
	!++
	! Print out the standard information - name and 
	! whether or not it has been initialized into the RST.
	!--
	NUM_MC_ENTRIES = .NUM_MC_ENTRIES +1;
	PAT$CP_OUT_STR = OUTPUT_BUFFER +1;
	PAT$GL_BUF_SIZ = 0;
	PAT$FAO_PUT( UPLIT( %ASCIC '!15AC !3AC   ' ), MC_PTR [MC_NAME_CS],
		     (IF (.MC_PTR [MC_IN_RST]) THEN UPLIT( %ASCIC 'yes' )
					       ELSE UPLIT( %ASCIC 'no' )));
	
	!++
	! We have to call a routine to output the size
	! so that it comes out in the right RADIX.
	!--
	PAT$FAO_PUT(UPLIT(%ASCIC'!UL.'),PAT$MODULE_SIZE(.MC_PTR));
	PAT$OUT_PUT(OUTPUT_BUFFER);			! Finally output the buffer.
	END
WHILE ((MC_PTR = .MC_PTR[MC_NEXT]) NEQ 0);

!++
! Give final summary information.
!--
PAT$CP_OUT_STR = OUTPUT_BUFFER +1;
PAT$GL_BUF_SIZ = 0;
PAT$FAO_PUT( UPLIT( %ASCIC '!/total modules:  !UL.'), .NUM_MC_ENTRIES);
PAT$FAO_PUT( UPLIT( %ASCIC '!/remaining size: !UL.'), PAT$REPORT_FREE());
PAT$OUT_PUT(OUTPUT_BUFFER);
END;

GLOBAL ROUTINE PAT$SHOW_SCOPE( PATH_VEC_PTR ) : NOVALUE =

!++
! Functional Description:
!
!	Print out the current scope position vector (CSP).
!
! Formal Parameters:
!
!	none.
!
! Implicit Inputs:
!
!	The CSP is a PATHNAME_VECTOR.
!
! Return Value:
!
!	NOVALUE
!
!--

BEGIN

LOCAL
	OUTPUT_BUFFER : VECTOR [TTY_OUT_WIDTH, BYTE];		! Build output message here.

!++
! Set up to use a new output buffer, and encode the standard beginning of
! the SHOW SCOPE message into it.
!--
PAT$CP_OUT_STR = OUTPUT_BUFFER + 1;
PAT$GL_BUF_SIZ = 0;

PAT$FAO_PUT( UPLIT( %ASCIC 'scope: ') );

!++
! The actual thing we print out depends on whether or not there is actually
! a CSP just now.
!--
IF (.PAT$GL_CSP_PTR NEQ 0)
THEN
	PAT$PRINT_PATH( .PAT$GL_CSP_PTR )
ELSE
	PAT$FAO_PUT( UPLIT( %ASCIC '<null>' ));

!++
! And finally force out the message.
!--
PAT$OUT_PUT( OUTPUT_BUFFER );
END;

GLOBAL ROUTINE PAT$PV_TO_CS( PATH_VEC_PTR, OUTPUT_BUF ) : NOVALUE =

!++
! Functional Description:
!
!	Encode a pathname vector into a given vector
!	so that what we have built is a counted string.
!
! Formal Parameters:
!
!	PATH_VEC_PTR	-A pointer to the pathname vector we
!			 want encoded.
!
!	OUTPUT_BUF	-A pointer to where we build the counted string.
!
! Implicit Inputs:
!
!	We will encode up to TTY_OUTPUT_WIDTH characters.
!	The rest of the pathname vector is ignored.
!
! Return Value:
!
!	NOVALUE.
!
! Side Effects:
!
!	The pathname is encoded into the given buffer.
!
!--

BEGIN

MAP
	OUTPUT_BUF : REF VECTOR[,BYTE],
	PATH_VEC_PTR : REF PATHNAME_VECTOR;

LOCAL
	CHAR_COUNT,
	OUTPUT_PTR : REF VECTOR[,BYTE];

!++
! Make sure we are called with valid parameters.
!--
IF (.PATH_VEC_PTR EQL 0) OR (.OUTPUT_BUF EQL 0)
THEN
	RETURN;

!++
! The size of the counted string we build starts off as 0.  The first element
! in the string starts at the next character.
!--
CHAR_COUNT = 0;
OUTPUT_PTR = OUTPUT_BUF[1];

!++
! Just encode the characters into the indicated position in the buffer until we
! have exhausted the CS pointers in the pathname vector.
!--
INCR I FROM 0 TO MAX_PATH_SIZE
	DO
	BEGIN
	LOCAL
		CS_PTR : CS_POINTER;				! Each element of the pathname vector
								! is a pointer to a counted string.

	!++
	! Terminate when the path vector ends.
	!--
	IF ((CS_PTR = .PATH_VEC_PTR[.I]) EQL 0)
	THEN
		EXITLOOP;

	!++
	! Output the pathname element separation character in all but the first
	! iteration.
	!--
	IF (.I NEQ 0)
	THEN
		BEGIN
		CHAR_COUNT = .CHAR_COUNT +1;
		OUTPUT_PTR[0] = %C'\';
		OUTPUT_PTR = .OUTPUT_PTR + 1;
		END;

	!++
	! See if we have enough room left for the next pathname element.
	!--
	IF (NOT .CHAR_COUNT + .CS_PTR[0] LSS TTY_OUT_WIDTH)
	THEN
		EXITLOOP;
	CH$MOVE( .CS_PTR[0], CS_PTR[1], .OUTPUT_PTR );
	CHAR_COUNT = .CHAR_COUNT +.CS_PTR[0];
	OUTPUT_PTR = .OUTPUT_PTR + .CS_PTR[0];
	END;

!++
! Now make the output buffer a real counted string.
!--
OUTPUT_BUF[0] = .CHAR_COUNT;
END;

GLOBAL ROUTINE PAT$PRINT_PATH( PATH_VEC_PTR ) : NOVALUE =

!++
! Functional Description:
!
!	Encode a pathname vector into the output stream
!
! Formal Parameters:
!
!	PATH_VEC_PTR	-A pointer to the pathname vector we want printed.
!
! Implicit Inputs:
!
!	Some exterior routine has done all the setup for
!	PATCH standard I/O.  This routine just does 'puts'.
!
! Return Value:
!
!	NOVALUE.
!
! Side Effects:
!
!	The pathname is encoded into the current output buffer.
!
!--

BEGIN
MAP
	PATH_VEC_PTR : REF PATHNAME_VECTOR;

LOCAL
	SYM_BUFFER : VECTOR[ TTY_OUT_WIDTH, BYTE];

!++
! First encode the characters into our own buffer - because we have a routine
! that already knows how to do this.
!--
PAT$PV_TO_CS( .PATH_VEC_PTR, SYM_BUFFER );

!++
! Then simply output the pathname.
!--
PAT$FAO_PUT(UPLIT(%ASCIC '!AC'), SYM_BUFFER );
END;

END
ELUDOM
