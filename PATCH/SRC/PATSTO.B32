MODULE PATSTO (%IF %VARIANT EQL 1
		%THEN
			ADDRESSING_MODE (EXTERNAL = LONG_RELATIVE,
					 NONEXTERNAL = LONG_RELATIVE),
		%FI
		IDENT = 'V03-000') =
BEGIN

!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
! FACILITY:	PATCH
!
!++
! FUNCTIONAL DESCRIPTION:
!	DECLARES GLOBAL VARIABLES FOR PATCH FACILITY
!
! Version:	V02-020
!
! History:
!	Author:
!		Carol Peters, 03 Jul 1976: Version 01
!
! Modified by:
!
!	V02-020	MTR0001		Mike Rhodes		20-Aug-1981
!		Add global descriptor for allowing LBR$OUTPUT_HELP
!		to access the remainder	of the command line without
!		intervention from PATCH's parser.
!		The symbol is PAT$GL_HELP_LIN.
!
!	V02-019	BLS0043		Benn Schreiber		10-Apr-1981
!		Add XABFHC for input file
!
!	V02-018	PCG0001		Peter George		02-FEB-1981
!		Add require statement for LIB$:PATDEF.REQ
!
!--

LIBRARY 'SYS$LIBRARY:STARLET.L32';
REQUIRE 'SRC$:PATRST.REQ';
REQUIRE 'SRC$:PATGEN.REQ';
REQUIRE 'SRC$:SYSLIT.REQ';
REQUIRE 'SRC$:VXPALT.REQ';
REQUIRE 'SRC$:PREFIX.REQ';
REQUIRE 'LIB$:PATDEF.REQ';				! Defines literals
REQUIRE 'LIB$:PATMSG.REQ';

BIND
	PAT$B_DEFJNL = UPLIT(BYTE('.JNL')),			! Default journal file type
	PAT$B_DEFIMG = UPLIT(BYTE('.EXE')),			! Default image file type
	PAT$B_DEFCOM = UPLIT(BYTE('.COM'));			! Default command file type

GLOBAL BIND
PAT$GB_ERRNAME = UPLIT(BYTE('SYS$ERROR')),			! Logical error channel name
	PAT$GB_OUTNAME = UPLIT(BYTE('SYS$OUTPUT')),		! Logical output channel name
	PAT$GB_INPNAME = UPLIT(BYTE('SYS$INPUT'));		! Logical input channel name

GLOBAL LITERAL
	PAT$K_MEMEXP = 10,					! Number of pages to expand free memory
	PAT$K_MAXBLKSIZ = PAT$K_MEMEXP*512,			! Maximum allocation size
	PAT$K_ERRNAMLNG = %CHARCOUNT('SYS$ERROR'),		! Length of error channel name
	PAT$K_INPNAMLNG = %CHARCOUNT('SYS$INPUT'),		! Length of input channel name
	PAT$K_OUTNAMLNG = %CHARCOUNT('SYS$OUTPUT');		! Length of output channel name

LITERAL
	PAT$K_BUFSIZ = 512,					! I/O buffer sizes
	PAT$K_DEFTYPLNG = 4;					! Default file type lengths

OWN
	PAT$GB_OUTBUF: VECTOR [PAT$K_BUFSIZ,BYTE];		! Output buffer

GLOBAL
	!++
	! These are byte vectors.
	!--
	PAT$GB_SUBST_IN: VECTOR [80,BYTE],			! Substitution instruction counted byte stream
	PAT$GB_DEF_MOD: VECTOR [MODE_LEVELS * MODE_LVL_SIZE, BYTE], ! Default mode block
	PAT$GB_JNLNAME: VECTOR [NAM$C_MAXRSS,BYTE],		! Resultant journal file name
	PAT$GB_COMNAME: VECTOR [NAM$C_MAXRSS,BYTE],		! Resultant output command file name
	PAT$GB_NEWNAME: VECTOR [NAM$C_MAXRSS,BYTE],		! Resultant output image file name
	PAT$GB_OLDNAME: VECTOR [NAM$C_MAXRSS,BYTE],		! Resultant old image file name
	PAT$GB_INPBUF: VECTOR [PAT$K_BUFSIZ,BYTE],		! Input buffer

	!++
	! REFS to more complicated structures which are defined in PATRST.REQ.
	!--
	PAT$GL_CSP_PTR : REF PATHNAME_VECTOR,			! Pointer to current scope record (CSP)
	PAT$GL_MC_PTR : REF MC_RECORD,				! Pointer to module chain (MC)
	PAT$GL_NT_HASH : REF RST_POINTER,			! Pointer to name table hash vector (NT)

	!++
	! Declare the FAB and RAB blocks for terminal I/O.
	!--
	PAT$GL_INPFAB:	$FAB (FAC=GET
				, FNA=PAT$GB_INPNAME
				, FNS=PAT$K_INPNAMLNG
				, MRS=NO_OF_INP_CHARS),
	PAT$GL_OUTFAB:	$FAB (FAC=PUT
				, RAT=CR
				, FNA=PAT$GB_OUTNAME
				, FNS=PAT$K_OUTNAMLNG
				, MRS=TTY_OUT_WIDTH),
	PAT$GL_ERRFAB:	$FAB (FAC=PUT
				, RAT=CR
				, FNA=PAT$GB_ERRNAME
				, FNS=PAT$K_ERRNAMLNG
				, MRS=TTY_OUT_WIDTH),
	PAT$GL_INPRAB:	$RAB (USZ=NO_OF_INP_CHARS
				, FAB=PAT$GL_INPFAB
				, ROP=<PMT>),
	PAT$GL_OUTRAB: $RAB (FAB=PAT$GL_OUTFAB),
	PAT$GL_ERRRAB:	$RAB (FAB=PAT$GL_ERRFAB
				, ROP=CCO),
	PAT$GL_OLDNBK: $NAM(RSA=PAT$GB_OLDNAME
				, RSS=NAM$C_MAXRSS
				, ESA=PAT$GB_OLDNAME
				, ESS=NAM$C_MAXRSS),
	PAT$GL_JNLNBK: $NAM(RSA=PAT$GB_JNLNAME
				, RSS=NAM$C_MAXRSS
				, ESA=PAT$GB_JNLNAME
				, ESS=NAM$C_MAXRSS
				, RLF=PAT$GL_OLDNBK),
	PAT$GL_COMNBK: $NAM(RSA=PAT$GB_COMNAME
				, RSS=NAM$C_MAXRSS
				, ESA=PAT$GB_COMNAME
				, ESS=NAM$C_MAXRSS
				, RLF=PAT$GL_OLDNBK),
	PAT$GL_NEWNBK: $NAM(RSA=PAT$GB_NEWNAME
				, RSS=NAM$C_MAXRSS
				, ESA=PAT$GB_NEWNAME
				, ESS=NAM$C_MAXRSS
				, RLF=PAT$GL_OLDNBK),
	PAT$GL_OLDXABFH : $XABFHC(NXT=0),
	PAT$GL_NEWXABALL: $XABALL(AOP=HRD		! Used when ALN = LBN
				, LOC=0),		! To keep XAB$C_LBN transparent
	PAT$GL_JNLFAB: $FAB(NAM=PAT$GL_JNLNBK
				, MRS=A_PAGE
				, DNA=PAT$B_DEFJNL
				, RAT=CR
				, DNS=PAT$K_DEFTYPLNG
				, FOP=(CIF,OFP)
				, FAC=PUT
				, SHR=NIL),
	PAT$GL_COMFAB: $FAB(NAM=PAT$GL_COMNBK
				, MRS=A_PAGE
				, DNA=PAT$B_DEFCOM
				, RAT=CR
				, DNS=PAT$K_DEFTYPLNG
				, FOP=OFP
				, FAC=PUT
				, SHR=NIL),
	PAT$GL_NEWFAB: $FAB(NAM=PAT$GL_NEWNBK
				, XAB=PAT$GL_NEWXABALL
				, MRS=A_PAGE
				, RFM=FIX
				, DNA=PAT$B_DEFIMG
				, DNS=PAT$K_DEFTYPLNG
				, FOP=OFP
				, FAC=<PUT,BRO,GET,TRN>
				, SHR=NIL),
	PAT$GL_OLDFAB: $FAB(NAM=PAT$GL_OLDNBK
				, XAB=PAT$GL_OLDXABFH
				, DNA=PAT$B_DEFIMG
				, DNS=PAT$K_DEFTYPLNG
				, FAC=<GET,BRO>),
	PAT$GL_JNLRAB: $RAB(ROP=EOF
				, RBF=PAT$GB_OUTBUF
				, RSZ=PAT$K_BUFSIZ
				, FAB=PAT$GL_JNLFAB),
	PAT$GL_COMRAB: $RAB(RBF=PAT$GB_OUTBUF
				, RSZ=PAT$K_BUFSIZ
				, FAB=PAT$GL_COMFAB),
	PAT$GL_OLDRAB: $RAB(RBF=PAT$GB_INPBUF
				, RSZ=PAT$K_BUFSIZ
				, UBF=PAT$GB_INPBUF
				, USZ=PAT$K_BUFSIZ
				, FAB=PAT$GL_OLDFAB),
	PAT$GL_NEWRAB: $RAB(RBF=PAT$GB_OUTBUF
				, RSZ=PAT$K_BUFSIZ
				, FAB=PAT$GL_NEWFAB),

	!++
	! These are the only bitvectors.
	!--
	PAT$GL_CONTEXT: BITVECTOR [CONTEXT_BITS],		! Context longword
	PAT$GL_COMQUAL: BITVECTOR [CONTEXT_BITS],		! Command qualifier context bits

	!++
	! These are global bytes.
	!--
	PAT$GB_ECOLVL: BYTE,					! ECO level for patches currently being performed (1-128)
	PAT$GB_EXEC_CMD: BYTE,					! Indicator whether or not to execute PATCH command
	PAT$GB_SYMBOLS: BYTE,					! Indicator if image has symbols
	PAT$GB_LOC_TYPE: BYTE,					! Tells what sort of end range location
	PAT$GB_TAKE_CMD: BYTE,					! BOOLEAN, TRUE if another command will be read

	!++
	! Now REFs to byte vectors. Don't confuse these with byte
	! vectors.
	!--
	PAT$GL_HELP_LIN : BLOCK [8, BYTE],			! Descriptor for remainder of command string.
	PAT$CP_OUT_STR : REF VECTOR [, BYTE],			! Points into current output buffer.
	PAT$GB_MOD_PTR: REF VECTOR [, BYTE],			! Pointer to current mode level

	!++
	! Normal longword vectors.
	!--
	PAT$GL_ISVADDR : VECTOR[2,LONG],			! Start and ending addrs for last mapped image section
	PAT$GL_SEMAN1: VECTOR [MAX_STACK_PTR * PAT$K_STELM_SIZ], ! Semantic stack for tokens
	PAT$GL_SEMAN2: VECTOR [MAX_STACK_PTR * PAT$K_STELM_SIZ], ! Semantic stack for pointers to strings
	PAT$GL_ECO_UPD: VECTOR [4],				! Bits corresponding to ECO levels to be updated
	PAT$GL_MEMLHD: VECTOR[2] INITIAL (0,0),			! Free memory listhead
	PAT$GL_TEMP_BUF: VECTOR[2] INITIAL (0,0),		! String descriptor for temporary deposit buffer
	PAT$GL_OLD_ASD: VECTOR[2] INITIAL (0,0),		! String descriptor for old contents assembler directive table
	PAT$GL_NEW_ASD: VECTOR[2] INITIAL (0,0),		! String descriptor for new contents assembler directive table
	PAT$GL_RLOC_BUF: VECTOR[2] INITIAL (0,0),		! String descriptor for relocation buffer

	!++
	! And finally the global scalar longwords.
	!--
	PAT$CP_INP_DSCS,					! Pointer to input line descriptor table
	PAT$GL_BR_DISPL: SIGNED LONG,				! Branch displacement that didn't fit
	PAT$GL_ERRCODE,						! Error code
	PAT$GL_EXPANDVA,					! First expand region address
	PAT$GL_NEWVBNMX,					! Maximum VBN in new image file
	PAT$GL_NEWVPNMX,					! Maximum VPN in new image file
	PAT$GL_OLDVBNMX,					! Old file max VBN used for image section binary
	PAT$GL_FWRLHD,						! ForWard Reference table listhead
	PAT$GL_PAL_LHD,						! Patch area listhead
	PAT$GL_PATAREA,						! Holds address of patch area descriptor
	PAT$GL_RST_BEGN,					! Beginning address of RST
	PAT$GL_SYMHEAD,						! Symbol listhead
	PAT$GL_OLDLABLS,					! Listhead for old contents relocated instruction labels
	PAT$GL_NEWLABLS,					! Listhead for new contents un-relocated instruction labels
	PAT$GL_RLCLABLS,					! Listhead for relocated instruction labels
	PAT$GL_SYMTBPTR,					! Pointer to current symbol table to be searched
	PAT$GL_MINADDR: INITIAL(CONTROL_REGION),		! Lowest address ever allocated
	PAT$GL_ISELHD: LONG,					! Image section table listhead
	PAT$GL_ISETAIL: LONG,					! Last entry in image section table
	PAT$GL_TXTLHD: LONG,					! Patch command text listhead
	PAT$GL_TXTFREE: LONG,					! Address of next free command text buffer
	PAT$GL_TXTTAIL: LONG,					! Pointer to last command text block
	PAT$GL_IMGBLKS: LONG,					! Number of blocks in new image file
	PAT$GW_IMGVOL: WORD,					! Relative Volume Number for new image
	PAT$GL_FLAGS: LONG,					! CLI flags
	PAT$GL_IHPPTR: REF BLOCK[,BYTE],			! Pointer to image header patch section
	PAT$GL_IMGHDR: REF BLOCK[,BYTE],			! Holds address of image header data
	PAT$GL_BUF_SIZ,						! Character count in output buffer
	PAT$GL_KEYW_TBL,					! Name of current keyword table
	PAT$GL_HEAD_LST,					! Head of linked argument list
	PAT$GL_TAIL_LST,					! Tail of linked argument list
	PAT$GL_LAST_LOC,					! Last location displayed
	PAT$GL_LAST_VAL,					! Last value displayed
	PAT$GL_NEXT_LOC;					! Next location to display

END
ELUDOM
