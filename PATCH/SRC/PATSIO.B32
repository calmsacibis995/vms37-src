MODULE PATSIO (
		%IF %VARIANT EQL 1
		%THEN
			ADDRESSING_MODE (EXTERNAL = LONG_RELATIVE, NONEXTERNAL = LONG_RELATIVE),
		%FI
		IDENT = 'V03-000') =
BEGIN

!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
! FACILITY:	PATCH
!
!++
! FUNCTIONAL DESCRIPTION:
!	FAO FORMATTING ROUTINE
!
! Version:	X01.05
!
! History:
!	Author:
!		Carol Peters, 01 Oct 1976: Version 01
!
!	Modified by:
!		Kathleen Morse, 13 Oct 1977: Version 16
!
! Revision history:
!  NO	DATE		PROGRAMMER		PURPOSE
!  --	----		----------		-------
!  00	13-OCT-77	K.D. MORSE		ADAPT VERSION 14 TO PATCH.
!  01	15-DEC-77	K.D. MORSE		ADD JOURNAL OUTPUT
!  02	25-APR-78	K.D. MORSE		CONVERT TO NATIVE COMPILER.
!  03	18-MAY-78	K.D. MORSE		NO CHANGES FOR VERS 15.
!  04	13-JUN-78	K.D. MORSE		ADD FAO COUNTS TO SIGNALS.
!  05	29-JUN-78	K.D. MORSE		NO CHANGES FOR VERS 16.
!
!--

FORWARD ROUTINE
	PAT$FAO_OUT: NOVALUE;					! ROUTINE TO FORMAT AND OUTPUT A STRING

LIBRARY 'SYS$LIBRARY:STARLET.L32';
REQUIRE 'SRC$:SYSLIT.REQ';
REQUIRE 'SRC$:VXSMAC.REQ';
REQUIRE 'SRC$:PATPCT.REQ';
REQUIRE 'SRC$:PATGEN.REQ';

EXTERNAL ROUTINE
	PAT$WRITEFILE: NOVALUE,					! WRITES TO A FILE
	SYS$FAOL: ADDRESSING_MODE (ABSOLUTE);			! ROUTINE TO FORMAT AN ASCII STRING

EXTERNAL
	PAT$GL_ERRCODE,						! ERROR CODE
	PAT$GL_JNLRAB: BLOCK [, BYTE],				! RAB FOR JOURNAL FILE
	PAT$GL_OUTRAB: BLOCK [, BYTE];			 	! RAB for SYS$OUTPUT

GLOBAL ROUTINE PAT$FAO_OUT (STRING, ARGUMENTS) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	SETS UP INPUT AND OUTPUT STRING DESCRIPTORS, AND THEN CALLS
!	FAO TO FORMAT THE STRING. THEN SENDS THE FORMATTED STRING TO
!	THE TERMINAL
!
!	IF THE OUTPUT FAILS, A FATAL ERROR IS REPORTED.
!
! CALLING SEQUENCE:
!
!	PAT$FAO_OUT ()
!
! INPUTS:
!
!	STRING		- THE ADDRESS OF A COUNTED CONTROL STRING TO FAO
!	ARGUMENTS	- MAY BE ABSENT. ARGUMENTS TO BE APPLIED TO THE
!			  FAO CONTROL STRING.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! OUTPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NOVALUE
!
! SIDE EFFECTS:
!
!	THE FORMATTED STRING IS OUTPUT ON THE TERMINAL.  ON ERROR, EXITS.
!--

BEGIN
	
MAP
	STRING: REF VECTOR [, BYTE];				! FAO CONTROL STRING

LOCAL
	OUT_BUF: VECTOR [TTY_OUT_WIDTH, BYTE],			! FORMATTED MESSAGE BUFFER
	INP_DESC: VECTOR [2],					! FAO CONTROL STRING DESCRIPTOR
	OUT_DESC: VECTOR [2];					! FORMATTED MESSAGE DESCRIPTOR

!++
! SET UP FAO CONTROL STRING DESCRIPTOR AND FORMATTED
! MESSAGE STRING DESCRIPTOR.
!--
INP_DESC [0] = .STRING [0];					! SET SIZE OF STRING
INP_DESC [1] = STRING [1];					! SET ADDRESS OF STRING
OUT_DESC [0] = TTY_OUT_WIDTH;					! SET MAX MESSAGE WIDTH
OUT_DESC [1] = OUT_BUF;						! SET MESSAGE ADDRESS

!++
! FORMAT THE MESSAGE.
!--
SYS$FAOL (INP_DESC, PAT$GL_OUTRAB [RAB$W_RSZ], OUT_DESC, ARGUMENTS);

!++
! Output the formatted message.  If this fails, then exit as there
! is no way to communicate with the patcher.
!--
PAT$GL_OUTRAB [RAB$L_RBF] = OUT_BUF;
PAT$GL_ERRCODE = $PUT (RAB = PAT$GL_OUTRAB);
IF NOT .PAT$GL_ERRCODE
THEN
	SIGNAL (.PAT$GL_ERRCODE);
PAT$WRITEFILE(.PAT$GL_OUTRAB[RAB$W_RSZ], OUT_BUF, PAT$GL_JNLRAB);
END;

END
ELUDOM
