MODULE PATCON (
		%IF %VARIANT EQL 1
		%THEN
			ADDRESSING_MODE (EXTERNAL = LONG_RELATIVE, NONEXTERNAL = LONG_RELATIVE),
		%FI
		IDENT = 'V03-000') =
BEGIN

!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
! FACILITY:	PATCH
!
!++
! FUNCTIONAL DESCRIPTION:
!
!	CONVERSION ROUTINES.
!
! Version:	V02-010
!
! History:
!	Author:
!		Carol Peters, 18 May 1976: Version 01
!
! Modified by:
!
!	V02-010	PCG0001		Peter George		02-FEB-1981
!		Add require statement for LIB$:PATDEF.REQ
!
!	01.09	CNH0013		Chris Hume		27-Aug-1979	13:30
!		Added double byte OPcode support.  Changed use of PAT$CONV_R_50
!		to the RTL routine R50ASC.  Removed the former from this module.
!
! MODIFICATIONS:
!
!  NO	DATE		PROGRAMMER		PURPOSE
!  --	----		----------		-------
!
!  00	19-OCT-77	K.D. MORSE		CONVERT VERSION 7 FOR PATCH.
!  01	4-JAN-78	K.D. MORSE		NO CHANGES FOR VERS 8.
!  02	21-FEB-78	K.D. MORSE		USE EMUL FOR OVERFLOW CHECK.
!  03	24-MAR-78	K.D. MORSE		REPLACE SELECT WITH IF...THEN
!						AS IN DEBUG OVERFLOW CHECK AS
!						THIS SAVES BYTES. (9)
!  04	04-APR-78	K.D. MORSE		NO CHANGES FOR 10.
!  05	25-APR-78	K.D. MORSE		CONVERT TO NATIVE COMPILER.
!  06	18-MAY-78	K.D. MORSE		NO CHANGES FOR VERS 11.
!  07	13-JUN-78	K.D. MORSE		ADD FAO COUNTS TO SIGNALS.
!  08	19-JUN-78	K.D. MORSE		NO CHANGES FOR VERS 12-13.
!
!--

FORWARD ROUTINE
	PAT$RADX_CONVRT : NOVALUE;				! Converts a string to a value

LIBRARY 'SYS$LIBRARY:STARLET.L32';
REQUIRE 'SRC$:VXSMAC.REQ';
REQUIRE 'SRC$:PATPCT.REQ';
REQUIRE 'SRC$:PATGEN.REQ';
REQUIRE 'LIB$:PATDEF.REQ';				! Defines literals
REQUIRE 'LIB$:PATMSG.REQ';

EXTERNAL
	PAT$GB_MOD_PTR: REF VECTOR [, BYTE];			! Pointer to current modes

GLOBAL ROUTINE PAT$RADX_CONVRT (STRING_ADDR, VALUE_ADDR) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Converts an ascii string to a longword value in the current radix.
!
! CALLING SEQUENCE:
!
!	PAT$RADX_CONVRT ()
!
! INPUTS:
!
!	STRING_ADDR	- Address of ascii string
!	VALUE_ADDR	- Address in which to put converted value
!
! IMPLICIT INPUTS:
!
!	Contents of PAT$gb_mod_ptr [mode_radix], which is the current
!	radix.
!
! OUTPUTS:
!
!	none
!
! IMPLICIT OUTPUTS:
!
!	A signal and unwind occurs if the conversion fails.
!	The converted value is placed in the address passed as the
!	second argument.
!
! ROUTINE value:
!
!	novalue
!
! SIDE EFFECTS:
!
!	none
!
!--

BEGIN

BUILTIN
	EMUL;							! Longword mul and add to get quadword

MAP
	STRING_ADDR: REF VECTOR [, BYTE],
	VALUE_ADDR: REF VECTOR;

LOCAL
	GIVE_MESSAGE,						! Error flag
	value : VECTOR[2,LONG],					! Converted value
	NEGATE,							! Negative number flag
	CHAR;							! Character-holding variable

VALUE[0] = 0;
VALUE[1] = 0;
GIVE_MESSAGE = FALSE;
NEGATE = FALSE;
INCR N FROM 0 TO (NUM_MAX_LENGTH - 1) DO
	BEGIN
	IF (CHAR = .STRING_ADDR [.N]) EQL 0 THEN EXITLOOP;
	IF (.N EQL 0)
	THEN
		BEGIN
		IF (.CHAR EQL '-')
		THEN
			BEGIN
			NEGATE = TRUE;
			CHAR = '0'
			END
		ELSE
			IF (.CHAR EQL '+')
			THEN CHAR = '0';
		END;
	IF ((.CHAR GEQ '0') AND (.CHAR LEQ '9'))
	THEN
		CHAR = .CHAR - '0'
	ELSE
		IF ((.CHAR GEQ 'A') AND (.CHAR LEQ 'F'))
		THEN
			CHAR = .CHAR - 'A' + 10
		ELSE
			CHAR = 256;
	IF .CHAR GEQ .PAT$GB_MOD_PTR [MODE_RADIX]
	THEN
		GIVE_MESSAGE = PAT$_INVNUMBER

	ELSE
		EMUL(VALUE[0], %REF(.PAT$GB_MOD_PTR[MODE_RADIX]), CHAR, VALUE);
	IF .VALUE[1] NEQ 0
	THEN
		GIVE_MESSAGE = PAT$_NUMTRUNC;			! Numeric overflow
	END;
IF (.GIVE_MESSAGE NEQ 0)
THEN
	SIGNAL(.GIVE_MESSAGE);
IF .NEGATE
THEN
	VALUE[0] = - .VALUE[0];
VALUE_ADDR [0] = .VALUE[0];
END;

END
ELUDOM
