MODULE PATMOD (
		%IF %VARIANT EQL 1
		%THEN
			ADDRESSING_MODE (EXTERNAL = LONG_RELATIVE, NONEXTERNAL = LONG_RELATIVE),
		%FI
		IDENT = 'V03-000') =
BEGIN

!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
! FACILITY:	PATCH
!
!++
! FUNCTIONAL DESCRIPTION:
!
! ABSTRACT:
!
! Version:	X01.10
!
! History:
!	Author:
!		Carol Peters, 03 Jul 1976: Version 01
!
!	Modified by:
!		Kathleen Morse, 19 Oct 1977: Version X01.00
!
! Revision history:
!
!  NO	DATE		PROGRAMMER		PURPOSE
!  --	----		----------		-------
!
!  00	19-OCT-77	K.D. MORSE		ADAPT VERSION 24 FOR PATCH
!  01	4-JAN-78	K.D. MORSE		NO CHANGES FOR VERS 25.
!						DISPLAY SETTING OF MODE_SYMBOLIC
!						IN SHOW MODES. (26)
!						NO CHANGES FOR VERS 27-28.
!  02	24-JAN-78	K.D. MORSE		NO CHANGES FOR 29.
!  03	13-FEB-78	K.D. MORSE		ADD OUTPUT TO INDIRECT COMMAND
!						FILE FOR "SET MODE" MODES.
!  04	25-APR-78	K.D. MORSE		CONVERT TO NATIVE MODE.
!  05	18-MAY-78	K.D. MORSE		NO CHANGES FOR VERS 30-31.
!  06	18-MAY-78	K.D. MORSE		NO CHANGES FOR VERS 32.
!  07	13-JUN-78	K.D. MORSE		ADD FAO COUNTS TO SIGNALS.
!  08	15-JUN-78	K.D. MORSE		ALWAYS CALL PAT$WRITEFILE TO
!						OUTPUT TO APPENDED TEXT BUFFERS.
!  09	21-JUN-78	K.D. MORSE		NO CHANGES FOR VERS 33.
!  10	28-JUN-78	K.D. MORSE		CHANGED PAT$SHOW_DEFAL TO WORK
!						FROM THE CURRENT MODE LEVEL (34).
!
!--

FORWARD ROUTINE
	PAT$INIT_MODES: NOVALUE,				! Sets modes to a specified level
	PAT$RESET_DEF: NOVALUE,					! Sets default modes to initialization values
	PAT$SET_MOD_LST: NOVALUE,				! Sets a list of modes
	PAT$SET_MOD_LVL: NOVALUE,				! Sets level of modes
	PAT$SET_NEW_MOD: NOVALUE,				! Sets a new mode
	PAT$SHOW_DEFAL: NOVALUE;				! Action routine to show default

REQUIRE 'SRC$:VXSMAC.REQ';
REQUIRE 'SRC$:PATPCT.REQ';
REQUIRE 'SRC$:PATGEN.REQ';
REQUIRE 'SRC$:PATTER.REQ';
REQUIRE 'SRC$:BSTRUC.REQ';
REQUIRE 'SRC$:LISTEL.REQ';
REQUIRE 'SRC$:SYSSER.REQ';
REQUIRE 'SRC$:PREFIX.REQ';
REQUIRE 'SRC$:PATPRE.REQ';

EXTERNAL ROUTINE
	PAT$WRITEFILE;						! Writes a line to a file
EXTERNAL
	PAT$GL_COMRAB,						! RAB for output command file
	PAT$GL_FLAGS,						! CLI flags
	PAT$GL_CONTEXT : BITVECTOR,				! Context longword
	PAT$GB_MOD_PTR: REF VECTOR [, BYTE],			! Pointer to modes
	PAT$GB_DEF_MOD: VECTOR [, BYTE],			! Block for modes
	PAT$GL_HEAD_LST;					! Head of argument list

!++
! Counted strings for FAO.
!--

BIND
	CS_OCTAL	= UPLIT ( %ASCIC 'octal'),
	CS_DECIMAL	= UPLIT ( %ASCIC 'decimal'),
	CS_HEXADECIMAL	= UPLIT ( %ASCIC 'hexadecimal'),
	CS_BYTE		= UPLIT ( %ASCIC 'byte'),
	CS_WORD		= UPLIT ( %ASCIC 'word'),
	CS_LONGWORD	= UPLIT ( %ASCIC 'long'),
	CS_BOOLEAN_ON	= UPLIT ( %ASCIC ' ' ),
	CS_BOOLEAN_OFF	= UPLIT ( %ASCIC ' no' );

!++
! The following literals define the byte offset into the MODE_NAME_TBL for
! the keywords for the "SET MODE" command.  The order of these offsets must be
! the same as the order of the names in the MODE_NAME_TBL.
!--
LITERAL
	BYTE_NAME = 0,
	WORD_NAME = 0 + %CHARCOUNT(%ASCIC 'B'),
	LONG_NAME = WORD_NAME + %CHARCOUNT(%ASCIC 'W'),
	DECIMAL_NAME = LONG_NAME + %CHARCOUNT(%ASCIC 'LO'),
	HEX_NAME = DECIMAL_NAME + %CHARCOUNT(%ASCIC 'DEC'),
	OCTAL_NAME = HEX_NAME + %CHARCOUNT(%ASCIC 'H'),
	INSTRUC_NAME = OCTAL_NAME + %CHARCOUNT(%ASCIC 'OC'),
	NOINSTRUC_NAME = INSTRUC_NAME + %CHARCOUNT(%ASCIC 'I'),
	ASCII_NAME = NOINSTRUC_NAME + %CHARCOUNT(%ASCIC 'NOI'),
	NOASCII_NAME = ASCII_NAME + %CHARCOUNT(%ASCIC 'AS'),
	SYMBOL_NAME = NOASCII_NAME + %CHARCOUNT(%ASCIC 'NOAS'),
	NOSYMBOL_NAME = SYMBOL_NAME + %CHARCOUNT(%ASCIC 'SY'),
	SCOPE_NAME = NOSYMBOL_NAME + %CHARCOUNT(%ASCIC 'NOSY'),
	NOSCOPE_NAME = SCOPE_NAME + %CHARCOUNT(%ASCIC 'SC'),
	GLOBAL_NAME = NOSCOPE_NAME + %CHARCOUNT(%ASCIC 'NOSC'),
	NOGLOBAL_NAME = GLOBAL_NAME + %CHARCOUNT(%ASCIC 'GL');

!++
! This table holds the names of the modes acceptable to a "SET MODE" command.
! It is used to write the output command file and the appended patch commands.
!--
BIND
	MODE_NAME_TBL = UPLIT BYTE (
				%ASCIC 'B',
				%ASCIC 'W',
				%ASCIC 'LO',
				%ASCIC 'DEC',
				%ASCIC 'H',
				%ASCIC 'OC',
				%ASCIC 'I',
				%ASCIC 'NOI',
				%ASCIC 'AS',
				%ASCIC 'NOAS',
				%ASCIC 'SY',
				%ASCIC 'NOSY',
				%ASCIC 'SC',
				%ASCIC 'NOSC',
				%ASCIC 'GL',
				%ASCIC 'NOGL'
							) : VECTOR [, BYTE];

! This macro is probably temporary - see routine PUT_DEFAL

MACRO
	YES_NO ( VALUE ) =
		(IF VALUE 
			THEN CS_BOOLEAN_ON
			ELSE CS_BOOLEAN_OFF
		) %;

!++
! The following table holds the valid mode settings and values
! relevant to them. Each entry in the table is four bytes long.
! The entry has four fields, each of them one byte long.
!
!	---------------------------------------------
!	!  value  !  offset ! keyword ! name_offset !
!	---------------------------------------------
!
! The keyword field holds the token value that represents the particular
! mode, e.g., BYTE_TOKEN indicates that the mode is BYTE.
! The offset field holds the location of the mode setting in any of
! the mode levels.
! The value field holds the value that represents a particular mode
! to patch in an internal sense.
! The name_offset field holds the byte offset into the mode name table,
! MODE_NAME_TBL, to the ascic string for this mode.  This is used to reconstruct
! the command line for the output command file and appended text.
!
LITERAL
	KEYWORD_FIELD	= 0,
	OFFSET_FIELD	= 1,
	VALUE_FIELD	= 2,
	NAME_OFF_FIELD	= 3,
	MODE_ENTRY_LEN	= 4;

BIND
	MODE_TABLE	= UPLIT BYTE (

			BYTE_TOKEN, MODE_LENGTH, BYTE_LENGTH, BYTE_NAME,
			WORD_TOKEN, MODE_LENGTH, WORD_LENGTH, WORD_NAME,
			LONG_TOKEN, MODE_LENGTH, LONG_LENGTH, LONG_NAME,
			DECIMAL_TOKEN, MODE_RADIX, DECIMAL_RADIX, DECIMAL_NAME,
			HEXADECIM_TOKEN, MODE_RADIX, HEX_RADIX, HEX_NAME,
			OCTAL_TOKEN, MODE_RADIX, OCTAL_RADIX, OCTAL_NAME,
			INSTRUCTI_TOKEN, MODE_INSTRUC, TRUE, INSTRUC_NAME,
			NOINSTRUC_TOKEN, MODE_INSTRUC, FALSE, NOINSTRUC_NAME,
			ASCII_TOKEN, MODE_ASCII, TRUE, ASCII_NAME,
			NOASCII_TOKEN, MODE_ASCII, FALSE, NOASCII_NAME,
			SYMBOLS_TOKEN, MODE_SYMBOLS, TRUE, SYMBOL_NAME,
			NOSYMBOLS_TOKEN, MODE_SYMBOLS, FALSE, NOSYMBOL_NAME,
			SCOPE_TOKEN, MODE_SCOPE, TRUE, SCOPE_NAME,
			NOSCOPE_TOKEN, MODE_SCOPE, FALSE, NOSCOPE_NAME,
			GLOBALS_TOKEN, MODE_GLOBALS, TRUE, GLOBAL_NAME,
			NOGLOBALS_TOKEN, MODE_GLOBALS, FALSE, NOGLOBAL_NAME,
			0

							) : VECTOR [, BYTE];

GLOBAL ROUTINE PAT$INIT_MODES (GOAL_LEVEL, SOURCE_LEVEL) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Sets all levels from local level to the goal level specified
!	with the mode settings of the source level.
!
! CALLING SEQUENCE:
!
!	PAT$INIT_MODES ()
!
! INPUTS:
!
!	GOAL_LEVEL	- Highest level to set.
!	SOURCE_LEVEL	- Level from which to obtain mode settings.
!
! IMPLICIT INPUTS:
!
!	none
!
! OUTPUTS:
!
!	none
!
! IMPLICIT OUTPUTS:
!
!	The mode settings of the local level to the goal level
!	are reset to the mode settings of the source level.
!
! ROUTINE VALUE:
!
!	novalue
!
! SIDE EFFECTS:
!
!	none
!
!--

BEGIN

LOCAL
	TEMP_LEVEL: REF VECTOR [, BYTE];

TEMP_LEVEL = PAT$GB_DEF_MOD [.SOURCE_LEVEL * MODE_LVL_SIZE];
DECR I FROM LOCAL_MODE TO .GOAL_LEVEL DO
	BEGIN
	PAT$GB_MOD_PTR = PAT$GB_DEF_MOD [.I * MODE_LVL_SIZE];
	PAT$GB_MOD_PTR [MODE_RADIX] = .TEMP_LEVEL [MODE_RADIX];
	PAT$GB_MOD_PTR [MODE_LENGTH] = .TEMP_LEVEL [MODE_LENGTH];
	PAT$GB_MOD_PTR [MODE_SYMBOLS] = .TEMP_LEVEL [MODE_SYMBOLS];
	PAT$GB_MOD_PTR [MODE_INSTRUC] = .TEMP_LEVEL [MODE_INSTRUC];
	PAT$GB_MOD_PTR [MODE_ASCII] = .TEMP_LEVEL [MODE_ASCII];
	PAT$GB_MOD_PTR [MODE_SCOPE] = .TEMP_LEVEL [MODE_SCOPE];
	PAT$GB_MOD_PTR [MODE_GLOBALS] = .TEMP_LEVEL [MODE_GLOBALS];
	END;
END;

GLOBAL ROUTINE PAT$RESET_DEF : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Cancels user set defaults for mode settings and resets all mode
!	levels to PATCH defaults.
!
! CALLING SEQUENCE:
!
!	PAT$RESET_DEF ()
!
! INPUTS:
!
!	none
!
! IMPLICIT INPUTS:
!
!	The default modes.
!
! OUTPUTS:
!
!	none
!
! IMPLICIT OUTPUTS:
!
!	none
!
! ROUTINE VALUE:
!
!	novalue
!
! SIDE EFFECTS:
!
!	Resets default values for modes.
!
!--

BEGIN

PAT$GB_MOD_PTR = PAT$GB_DEF_MOD [DEFAULT_MODE * MODE_LVL_SIZE];
PAT$GB_MOD_PTR [MODE_RADIX] = DEF_MODE_RADIX;
PAT$GB_MOD_PTR [MODE_LENGTH] = DEF_MODE_LENGTH;
PAT$GB_MOD_PTR [MODE_SYMBOLS] = TRUE;
PAT$GB_MOD_PTR [MODE_INSTRUC] = FALSE;
PAT$GB_MOD_PTR [MODE_ASCII] = FALSE;
PAT$GB_MOD_PTR [MODE_SCOPE] = TRUE;
pat$GB_MOD_PTR [MODE_GLOBALS] = FALSE;
PAT$INIT_MODES (USER_DEF_MODE, DEFAULT_MODE);
END;

GLOBAL ROUTINE PAT$SET_MOD_LST (LEVEL) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Sets a list of modes at the specified level.
!
! CALLING SEQUENCE:
!
!	PAT$SET_MOD_LST ()
!
! INPUTS:
!
!	LEVEL	- Level at which to set modes.
!
! IMPLICIT INPUTS:
!
!	-The address of the linked list which holds the switches.
!	-The global pointers to the current mode levels.
!
! OUTPUTS:
!
!	none
!
! IMPLICIT OUTPUTS:
!
!	none
!
! ROUTINE VALUE:
!
!	novalue
!
! SIDE EFFECTS:
!
!	The appropriate modes are set.
!
!--

BEGIN

LOCAL
	POINTER;
PAT$SET_MOD_LVL (.LEVEL);
POINTER = .PAT$GL_HEAD_LST;
DO
	PAT$SET_NEW_MOD ( .LIST_ELEM_EXP1 (.POINTER) )
	UNTIL (POINTER = .LIST_ELEM_FLINK (.POINTER)) EQL 0;
END;

!++
! The following routines control interpretation and typeout modes.
!
!	Address interpretation and data typeout are controlled by four mode
!	settings.  They are 'DEFAULT_MODE', which is the mode set by
!	PATCH initialization; 'USER_DEF_MODE', which is the mode set
!	by user 'SET MODE' commands; 'OVERRIDE_MODE', which is
!	the mode set by a single line override mode command; and
!	'LOCAL_MODE', which is the mode set for a single variable.
!	The mode used depends on the pointer into the block PAT$GB_DEF_MOD.
!
!	At initialization time, the four mode settings are initialized to
!	the same values.  When these values are changed by user commands, some
!	propagation of mode values must move up and down through the different
!	blocks so that the items displayed or interpreted will have valid
!	and timely mode settings for both radix and length.
!
!	The routines that follow set the mode block pointers to their new
!	value and propagate values as necessary.
!
!	The general stategy is as follows:
!	DEFAULT_MODE settings are never changed.
!	USER_DEF_MODE settings are never changed as a result of pointer jiggling.
!		They are only changed explicitly in action routines.
!	OVERRIDE_MODEsettings are changed to reflect user-set defaults
!		when they are the object of the pointer.
!	LOCAL_MODE settings are copied from OVERRIDE_MODE settings when they
!		are the object of the pointer.
!	When the pointer is moving up the block, from LOCAL_MODE toward
!		DEFAULT_MODE, no values are propagated.
!	Setting of LOCAL_MODE and OVERRIDE_MODE to default settings at the end
!		of a command line is the explicit responsibility of the
!		END-OF-COMMAND action routine.
!--

GLOBAL ROUTINE PAT$SET_MOD_LVL (LEVEL) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION
!
!	See description on page 2.
!
! CALLING SEQUENCE:
!
!	PAT$SET_MOD_LVL ()
!
! INPUTS:
!
!	novalue
!
! IMPLICIT INPUTS:
!
!	none
!
! OUTPUTS:
!
!	none
!
! IMPLICIT OUTPUTS:
!
!	none
!
! ROUTINE VALUE:
!
!	novalue
!
! SIDE EFFECTS:
!
!	none
!
!--

BEGIN

LOCAL
	TEMP_LEVEL: REF VECTOR [, BYTE];

IF (PAT$GB_DEF_MOD [.LEVEL * MODE_LVL_SIZE] LEQA .PAT$GB_MOD_PTR) OR
   (.LEVEL EQL USER_DEF_MODE)
THEN
	BEGIN
	PAT$GB_MOD_PTR = PAT$GB_DEF_MOD [.LEVEL * MODE_LVL_SIZE];
	RETURN
	END;
PAT$GL_CONTEXT [OVERRIDE] = TRUE;
SELECT .LEVEL OF

	SET

	[OVERRIDE_MODE]:
		BEGIN
		TEMP_LEVEL = PAT$GB_DEF_MOD [USER_DEF_MODE * MODE_LVL_SIZE];
		PAT$GB_MOD_PTR = PAT$GB_DEF_MOD [OVERRIDE_MODE * MODE_LVL_SIZE];
		END;


	[LOCAL_MODE]:
		BEGIN
		IF (.PAT$GB_MOD_PTR EQLA PAT$GB_DEF_MOD [OVERRIDE_MODE * MODE_LVL_SIZE])
		THEN
			BEGIN
			TEMP_LEVEL = .PAT$GB_MOD_PTR;
			END
		ELSE
			BEGIN
			TEMP_LEVEL = PAT$GB_DEF_MOD [USER_DEF_MODE * MODE_LVL_SIZE];
			END;
		PAT$GB_MOD_PTR = PAT$GB_DEF_MOD [LOCAL_MODE * MODE_LVL_SIZE];
		END;

	TES;
PAT$GB_MOD_PTR [MODE_RADIX] = .TEMP_LEVEL [MODE_RADIX];
PAT$GB_MOD_PTR [MODE_LENGTH] = .TEMP_LEVEL [MODE_LENGTH];
PAT$GB_MOD_PTR [MODE_SYMBOLS] = .TEMP_LEVEL [MODE_SYMBOLS];
PAT$GB_MOD_PTR [MODE_INSTRUC] = .TEMP_LEVEL [MODE_INSTRUC];
PAT$GB_MOD_PTR [MODE_ASCII] = .TEMP_LEVEL [MODE_ASCII];
PAT$GB_MOD_PTR [MODE_SCOPE] = .TEMP_LEVEL [MODE_SCOPE];
PAT$GB_MOD_PTR [MODE_GLOBALS] = .TEMP_LEVEL [MODE_GLOBALS];
END;

GLOBAL ROUTINE PAT$SET_NEW_MOD ( SWITCH_VALUE ): NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine sets one mode according to the value
!	specified.
!
! CALLING SEQUENCE:
!
!	PAT$SET_NEW_MOD ()
!
! INPUTS:
!
!	SWITCH_VALUE	- Value to set
!
! IMPLICIT INPUTS:
!
!	The current level of modes being used; held in PAT$GB_MOD_PTR.
!
! OUTPUTS:
!
!	No value returned.  Modifies the value of the entry in whatever level
!	we are in of the mode data structure.
!
! IMPLICIT OUTPUTS:
!
!	none
!
! ROUTINE VALUE:
!
!	novalue
!
! SIDE EFFECTS:
!
!	none
!
!--

BEGIN

LOCAL
	TABLE_PTR : REF VECTOR [, BYTE];

TABLE_PTR = MODE_TABLE;
REPEAT
	BEGIN
	IF (.TABLE_PTR [KEYWORD_FIELD] EQL 0)
	THEN EXITLOOP;
	IF (.SWITCH_VALUE EQL .TABLE_PTR [KEYWORD_FIELD])
	THEN
		BEGIN
		PAT$GB_MOD_PTR [.TABLE_PTR [OFFSET_FIELD]] = .TABLE_PTR [VALUE_FIELD];
		IF (.PAT$GL_CONTEXT[MODE_BIT])
		THEN
			PAT$WRITEFILE(.MODE_NAME_TBL[.TABLE_PTR[NAME_OFF_FIELD]],
					CH$PTR(MODE_NAME_TBL[1], .TABLE_PTR[NAME_OFF_FIELD]),
					PAT$GL_COMRAB);
		EXITLOOP
		END
	ELSE
		TABLE_PTR = TABLE_PTR [0] + MODE_ENTRY_LEN;
	END;
END;

GLOBAL ROUTINE PAT$SHOW_DEFAL : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Action routine to show default modes.
!
! CALLING SEQUENCE:
!
!	PAT$SHOW_DEFAL ()
!
! INPUTS:
!
!	none
!
! IMPLICIT INPUTS:
!
!	The default modes.
!
! OUTPUTS:
!
!	none
!
! IMPLICIT OUTPUTS:
!
!	none
!
! ROUTINE VALUE:
!
!	novalue
!
! SIDE EFFECTS:
!
!	The modes are displayed on the output device.
!
!--

BEGIN

LOCAL
	LEVEL_PTR : REF VECTOR [, BYTE];			! Current mode level

LEVEL_PTR = .PAT$GB_MOD_PTR;

!++
! A temporary fix to hide the symbolic/non-symbolic mode setting is here so that
! user is not confused by the reporting of a mode that has no effect yet.
!--
$FAO_TT_OUT ( 'modes:!ACsymbols,!ACinstruction,!ACascii,!ACscope,!ACglobals, !AC !AC' ,
	YES_NO ( .LEVEL_PTR [MODE_SYMBOLS] ),
	YES_NO ( .LEVEL_PTR [MODE_INSTRUC] ),
	YES_NO ( .LEVEL_PTR [MODE_ASCII] ),
	YES_NO ( .LEVEL_PTR [MODE_SCOPE] ),
	YES_NO ( .LEVEL_PTR [MODE_GLOBALS] ),

	(SELECT .LEVEL_PTR[ MODE_RADIX ] OF

		SET
		
		[OCTAL_RADIX]:
			CS_OCTAL;

		[HEX_RADIX]:
			CS_HEXADECIMAL;

		[DECIMAL_RADIX]:
			CS_DECIMAL;

		TES),

	(SELECT .LEVEL_PTR[ MODE_LENGTH ] OF

		SET

		[BYTE_LENGTH]:
			CS_BYTE;

		[WORD_LENGTH]:
			CS_WORD;

		[LONG_LENGTH]:
			CS_LONGWORD;

		TES)
	);

END;

END
ELUDOM
