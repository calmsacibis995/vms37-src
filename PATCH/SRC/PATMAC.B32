%TITLE 'Instruction decoder'
MODULE PATMAC (
		%IF %VARIANT EQL 1
		%THEN
			ADDRESSING_MODE (EXTERNAL = LONG_RELATIVE, NONEXTERNAL = LONG_RELATIVE),
		%FI
		IDENT = 'V03-000') =
BEGIN

!++
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
! FACILITY:	PATCH

!
! FUNCTIONAL DESCRIPTION:	VAX INSTRUCTION DECODER.
!
! Version:	V0218
!
! Author:	KEVIN PAMMETT, 2-MAR-77: Version 00
!
! Modified by:
!
!	V0218	CNH0013		Chris Hume		27-Aug-1979	13:30
!		Added double byte OPcode support.  Changed use of PAT$CONV_R_50
!		to the RTL routine R50ASC.
!
!	V0217	CNH0008		Chris Hume		28-Jun-1979	14:00
!		Fix CASE replacement bug and disallow relocation of these
!		instructions.  (PATMAI.B32 V0222, PATACT.B32 V0124,
!		PATEXA.B32 V0120, PATMSG.MDL V0202)
!
!	V0216	KDM0011		KATHLEEN D. MORSE	27-NOV-1978	10:25
!		Special case BR_LG in the OP_BR_TYPE field.
!
! Revision history:
!
!  NO	DATE		PROGRAMMER		PURPOSE
!  --	----		----------		-------
!
!  00	20-OCT-77	K.D. MORSE		ADAPT VERSION 15 FOR PATCH
!  01	31-OCT-77	K.D. MORSE		ADAPT FOR MAPPED ADDRESSES.
!  02	12-DEC-77	K.D. MORSE		CHANGE BRANCH DISPLACEMENT
!						FROM ".+X" TO "BR  Y"
!  03	28-DEC-77	K.D. MORSE		REPLACE PAT$OUT_VALUE CALLS. (18)
!  04	5-JAN-78	K.D. MORSE		ADD CODE TO SPECIAL-CASE CASE
!						INSTRUCTIONS TO PRINT OUT THE
!						'DATA' FOLLOWING THE CASE
!						INSTRUCTION STREAM.  ALSO TO
!						ENABLE COMPUTING THE NEXT
!						INSTRUCTION ADDRESS. (16)
!						ADD OUT_BRNCH_OPRND. (16)
!						CHANGE PAT$INS_DECODE ARGS TO
!						ENABLE MULTI-LINE OUTPUT. (16)
!						NO CHANGES FOR 17.
!  05	24-JAN-78	K.D. MORSE		NO CHANGES FOR 19-20.
!  06	31-JAN-78	K.D. MORSE		CHANGED MODULE SO THAT IT WILL
!						UNDERSTAND INSTRUCTIONS NOT AT
!						THE PC BUT IN A BUFFER, I.E.,
!						STREAM_PTR IS NOT NECESSARILY
!						EQUAL TO INS_PC.  INS_PC IS NEW
!						PARAMETER.
!  07	17-MAR-78	K.D. MORSE		MOVE CODE TO OUTPUT A LEADING
!						0 FOR HEX NUMBERS TO PATSSV\
!						PAT$OUT_NUM_VAL.  THIS SHOULD
!						FIX THE DISPLAY OF NEGATIVE
!						DISPLACEMENTS WHEN SYMBOLIC
!						OUTPUT IS ENABLED.
!  08	24-MAR-78	K.D. MORSE		NO CHANGES FOR VERS 21.
!  09	07-APR-78	K.D. MORSE		THE @# ADDRESSING MODE NOW TRIES
!						TO SYMBOLIZE THE OPERAND. (22)
!  10	25-APR-78	K.D. MORSE		CONVERT TO NATIVE COMPILER.
!  11	28-APR-78	K.D. MORSE		ADD ASSEMBLER DIRECTIVE OUTPUT
!						BY CHECKING ASD TABLE, CHK_ASD_TBL.
!  12	18-MAY-78	K.D. MORSE		NO CHANGES FOR VERS 23.
!  13	13-JUN-78	K.D. MORSE		ADD FAO COUNTS TO SIGNALS.
!  14	21-JUN-78	K.D. MORSE		NO CHANGES FOR VERS 23-24.
!						NOW PUT OUT ONLY EFFECTIVE
!						OPERAND FOR BRANCH AND CASE
!						OPERANDS.  DELETE ROUTINE
!						OUT_BRNCH_OPRND. (25)
!						FIX CASE BUG--SET CASE_FLAG
!						ONLY ON 3RD OPERAND. (26)
!  15	28-JUN-78	K.D. MORSE		NO CHANGES FOR VERS 27.
!
!--

%SBTTL 'Module declarations'
!
! TABLE OF CONTENTS
!
FORWARD ROUTINE
	PAT$INS_DECODE,						! Decode an instruction
	INS_OPERAND,						! Print out an operand reference
	DISPLACEMENT,						! Extract displacements from instructions
	BRANCH_TYPE,						! Decide and handle branch type addressing
	INS_CONTEXT,						! Decide what context this instruction is
	PUT_REG : NOVALUE,					! Print a register reference
	CHK_ASD_TBL;						! Searches ASD table for specific PC

LIBRARY 'SYS$LIBRARY:STARLET.L32';
REQUIRE 'SRC$:PATPCT.REQ';
REQUIRE 'SRC$:VAXOPS.REQ';					! Literals and macros related to opcodes
REQUIRE 'SRC$:SYSLIT.REQ';					! Literals needed to call system services
REQUIRE 'SRC$:VXSMAC.REQ';					! Widely-used standard literals
REQUIRE 'SRC$:PATGEN.REQ';
REQUIRE 'SRC$:VAXERR.REQ';					! Error codes
REQUIRE 'SRC$:PREFIX.REQ';					! Structure macros
REQUIRE 'SRC$:PATPRE.REQ';					! ASD structure definition

EXTERNAL ROUTINE
	PAT$GET_VALUE : NOVALUE,				! Gets value from image byte stream
	PAT$MAP_ADDR : NOVALUE,					! Maps an image address
	R50ASC,							! Convert from RAD50
	PAT$FAO_PUT : NOVALUE,					! Formatted I/O to terminal
	PAT$OUT_NUM_VAL : NOVALUE,				! Output values as numbers
	PAT$OUT_SYM_VAL : NOVALUE,				! Output values as numerics or symbols
	PAT$OUT_PUT : NOVALUE;					! Flush the output buffer

EXTERNAL
	PAT$CP_OUT_STR : REF VECTOR[,BYTE],			! Points to current output buffer
	PAT$GB_OPINFO : OPCODE_TBL,
	PAT$GB_MOD_PTR : REF VECTOR[,BYTE],			! Mode data structure pointer
	PAT$GL_BUF_SIZ,						! Holds character count of output buffer
	PAT$GL_LAST_VAL;					! Branch instructions overwrite this so that
								! the user can "EX \" to trace thru a branch

!
! Literals used only in this module
!

LITERAL
	ROUND_BRACKETS	= 0,					! These are all flag parameters to
	SQUARE_BRACKETS	= 2,					!  the routine 'PUT_REG'.
	NO_BRACKETS	= 1;

MACRO
	PUTC(C)	= 						! Put 1 char into the output buffer
		BEGIN
		(.PAT$CP_OUT_STR)<0,8> = C;
		PAT$CP_OUT_STR = .PAT$CP_OUT_STR + 1;
		PAT$GL_BUF_SIZ = .PAT$GL_BUF_SIZ + 1;
		END %;

!++
! OWN STORAGE
!--
OWN
	CASE_FLAG,						! Flag to special-case CASE instructions
	MAP_FLAG;						! Flag whether or not to map the stream address

%SBTTL 'PAT$INS_DECODE - Instructions ==> ASCII'
GLOBAL ROUTINE PAT$INS_DECODE( STREAM_PNTR, OUTPUT_BUFFER, INS_PC, ASM_DIR_TBL, CASE_TBL) =

!++
! 
! FUNCTIONAL DESCRIPTION:
!
!	This routine is the entry point for this module.
!
!	This routine examines a byte stream that it is passed a pointer to, and
!	tries to output what instructions this corresponds to symbolically.
!
! CALLING SEQUENCE:
!
!	PAT$INS_DECODE ();
!
! INPUTS:
!
!	STREAM_PNTR	- A byte pointer to the supposed instruction
!			  stream (unmapped address or buffer address).
!	OUTPUT_BUFFER	- This is a pointer to the beginning of the
!			  current output buffer.
!	INS_PC		- PC for which instruction is encoded
!	ASM_DIR_TBL	- Address of assembler directive table descriptor
!	CASE_TBL	- TRUE => Print CASE dispatch tables
!
! IMPLICIT INPUTS:
!
!	PAT$GB_OPINFO	- Data vector that contains the instruction
!			  mneonics and related information.
!	PAT$CP_OUT_STR	- Points into current output buffer.
!	PAT$GL_BUF_SIZ	- Holds character count in output buffer.
!
! OUTPUTS:
!
!	none.
!
! IMPLICIT OUTPUTS:
!
!	none.
!
! ROUTINE VALUE:
!
!	This routine returns a pointer to the beginning of the next instruction.
!	In case there is a need to differentiate some other reasons for
!	returning, the returned values are actually macros:
!
!	DETECTED:			RETURNED:
!
!	-UNKNOWN INSTRUCTION		INS_UNKNOWN
!	-RESERVED INSTRUCTION		INS_RESERVED
!	-CAN'T READ INSTRUCTION		INS_UNREADABLE
!
! SIDE EFFECTS:
!
!	The current output buffer pointer is incremented, the character
!	representation of the instruction having been stuffed into the buffer.
!	The count of the output buffer is also incremented.
!--

BEGIN

MACRO								! Local macros -- see 'routine value' above
	INS_UNREADABLE	= 0 %,
	INS_UNKNOWN	= 0 %,
	INS_RESERVED	= 0 %;

MAP
	INS_PC : REF VECTOR[,LONG],				! Effect a REF LONGWORD, so can update to next PC
	STREAM_PNTR : REF VECTOR[,BYTE];

LOCAL
	ASD_TBL_PTR: REF BLOCK[,BYTE],				! Points to the ASD entry matching PC
	STREAM_PTR: REF BLOCK[,BYTE],				! Points to the unmapped instr stream
	MAP_STREAM_PTR : REF VECTOR[,BYTE],			! Points to the mapped instr stream
	ISE_ADDR,						! Address of ISE
	OPCODE,							! INstruction opcode
	OPRNDS;							! Number of operands for instruction

!++
! Determine if the instruction stream is at the PC it was encoded for or if
! it is in a buffer.  Then set a MAP_FLAG indicating whether or not to map
! STREAM_PTR in order to access the byte stream.
!--
IF (.INS_PC[0] EQLA .STREAM_PNTR)
THEN
	MAP_FLAG = TRUE
ELSE
	MAP_FLAG = FALSE;

!++
! Use an OWN copy of the formal, STREAM_PNTR, because the compiler does not
! do this automatically, and because this module writes into this variable.
!--
STREAM_PTR = .STREAM_PNTR;
IF .MAP_FLAG							! Is instruction at PC?
THEN
	PAT$MAP_ADDR(.STREAM_PTR, MAP_STREAM_PTR, ISE_ADDR)	! Yes, get mapped address
ELSE
	MAP_STREAM_PTR = .STREAM_PNTR;				! No, use buffer address

!++
! Set up to special-case CASE instructions.
!--
CASE_FLAG = 0;

!++
! Check if the PC to be output is known to contain an assembler directive.
! If so, then CHK_ASD_TBL finds the appropriate "OPCODE" to offset into the
! OPINFO table and also the pointer into the ASD table.
!--
IF ((OPCODE = CHK_ASD_TBL(.INS_PC[0], ASD_TBL_PTR, .ASM_DIR_TBL)) EQL FALSE)
THEN
	BEGIN
	!++
	! The instruction is not an assembler directive.  Therefore, pick up
	! the opcode and check it for validity.  Then increment the instruction
	! pointers past the opcode.
	! NOTE:  A MAPPED ADDRESS MAY BE DOTTED ONLY IF IT IS DOTTED TO ACQUIRE 
	! ONE AND ONLY ONE BYTE.
	!--

	OPCODE = .MAP_STREAM_PTR[0];

	IF .OPCODE EQL %X'FD'
	THEN
		BEGIN						! Check to see if 2 byte OPcode.
		OPCODE = .MAP_STREAM_PTR[1]^8 + .OPCODE;	! It is.  Get the next byte of OPcode.
		STREAM_PTR = .STREAM_PTR + 1;
		INS_PC[0] = .INS_PC[0] + 1;
		END;
	!++
	! Make sure that this is a recognized opcode, i.e., the number of expected
	! operands is known.
	!--
	IF( .PAT$GB_OPINFO[ .OPCODE, OP_NUMOPS] EQL NOT_AN_OP )
	THEN
		!++
		! The opcode is reserved, so not enough is known about it to go any further.
		!--
		RETURN(INS_RESERVED);

	STREAM_PTR = .STREAM_PTR + 1;
	INS_PC[0] = .INS_PC[0] + 1;
	END;

!++
! Output the character sequence which corresponds to the opcode.
! Also put out two spaces since some opcodes take up the full OP_CH_SIZE
! field printed, above.
!--
R50ASC( %REF(OP_CH_SIZE), PAT$GB_OPINFO[ .OPCODE, OP_NAME], .PAT$CP_OUT_STR );
PAT$CP_OUT_STR = .PAT$CP_OUT_STR + OP_CH_SIZE;
PAT$GL_BUF_SIZ = .PAT$GL_BUF_SIZ + OP_CH_SIZE;

PAT$FAO_PUT( UPLIT( %ASCIC '  ' ) );

!++
! Check if this is a case instruction.
!--
IF (.OPCODE EQL OP_CASEB) OR (.OPCODE EQL OP_CASEW) OR (.OPCODE EQL OP_CASEL)
THEN
	CASE_FLAG = -1;

!++
! Loop, encoding how each operand is referenced.
!--
IF ((OPRNDS = .PAT$GB_OPINFO[.OPCODE, OP_NUMOPS]) EQL ASM_DIR_OP)
THEN
	OPRNDS = .ASD_TBL_PTR[ASD$B_NUM_OPRND];
INCR I FROM 1 TO .OPRNDS
DO
	BEGIN
	IF( (STREAM_PTR = INS_OPERAND( .STREAM_PTR, .I, .OPCODE, INS_PC[0] )) EQL 0 )
	THEN
		RETURN(INS_UNREADABLE);				! Decoding failure - probably due to accessability.
	IF (.I NEQ 0) AND (.I LSS .OPRNDS)
	THEN
		PUTC(',');
	END;


!++
! CASE instructions are special-cased as they do not follow the syntax of
! other instructions, namely an opcode followed by a fixed number of operands.
! They are followed by N+1 words (offsets), where N is the last operand of the
! instruction.  Therefore this case can only be handled if the operand was
! given as a literal.  If this is TRUE, the offsets are printed.
!--
IF .CASE_TBL
THEN
	BEGIN
	LOCAL
		CASE_OFFSET : SIGNED WORD;			! Buffer to hold offsets

	IF (.CASE_FLAG GTR 0)
	THEN
		!++
		! The flag contains N+1.  There are N+1 offsets to print.
		!--
		INCR I FROM 1 TO .CASE_FLAG
		DO
		BEGIN
		!++
		! Loop, getting each offset and printing one offset per line.
		! Update the instruction-stream pointer after each offset.
		!--
		IF .MAP_FLAG					! Is instruction at PC?
		THEN
			PAT$GET_VALUE (.STREAM_PTR, A_WORD, CASE_OFFSET) ! Yes, map address
		ELSE
			CASE_OFFSET = .STREAM_PTR[0,0,16,1];	! No, take offset from buffer
		PAT$OUT_PUT(.OUTPUT_BUFFER);
		PAT$CP_OUT_STR = .OUTPUT_BUFFER + 1;
		PAT$GL_BUF_SIZ = 0;
		PAT$FAO_PUT(UPLIT (%ASCIC '!_!_'));
		PAT$OUT_SYM_VAL(.INS_PC[0] + .CASE_OFFSET, LONG_LENGTH, NO_OVERRIDE);
		STREAM_PTR = .STREAM_PTR + A_WORD;
		END;
	INS_PC[0] = .INS_PC[0] + A_WORD*.CASE_FLAG		! Advance over the table
	END;

!++
! Return a pointer to the beginning of the next instruction.
!--
RETURN(.STREAM_PTR);
END;

%SBTTL 'INS_OPERAND - Output instruction''s operand'
ROUTINE INS_OPERAND( STREAM_PTR, INDEX, OPCODE, INS_PC ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Print out an instruction operand.
!
! WARNING:
!
!	1) There is code in the 'DEFERRED' macro which will cease
!	   to work when/if the representation of TRUE and FALSE are changed.
!	2) The local macros, below, check for the indicated addressing
!	   modes only given that they appear in the code where they
!	   do - i.e., the checks take advantage of what is known about
!	   which cases already have been eliminated, etc.
!
! CALLING SEQUENCE:
!
!	INS_OPERAND (STREAM_PTR, INDEX, OPCODE, INS_PC);
!
! INPUTS:
!
!	STREAM_PTR	- A byte pointer to the first byte of the instruction stream
!			  which begins this operand.  This byte is the dominant
!			  mode.  This is an unmapped address.
!	INDEX 		- Ordinal of which operand to decode.  This is needed to
!			  decide the 'CONTEXT' for this operand if PC-relative
!			  addressing mode is used.
!	OPCODE		- The opcode of instruction being decoded.
!			  (This parameter has already been validated.)
!	INS_PC		- PC for which this instruction was encoded
!	CASE_FLAG	- Non zero requests that this be loaded with the length
!			  of the case table (only if specified by a literal).
!
! IMPLICIT INPUTS:
!
!	MAP_FLAG - TRUE if STREAM_PTR is an unmapped address (the PC),
!		   FALSE if STREAM_PTR is a temporary buffer address.

!
! OUTPUTS:
!
!	The current operand is written into the current output buffer in
!	machine-language format.
!
! IMPLICIT OUTPUTS:
!
!	CASE_FLAG	- See INPUTS.
!
! ROUTINE VALUE:
!
!	-The instruction-stream byte pointer, incremented to reflect the number
!	of bytes used for this operand.  This pointer should point to the
!	beginning of either the next instruction, or the next operand,
!	depending on how many operands the current instruction has.
!	-If the operand cannot be decoded, FALSE is returned.
!
! SIDE EFFECTS:
!
!	If the instruction pointer is updated incorrectly, then the supposed
!	next instruction will be wrong.  This will cause a completely misleading
!	'instruction' to be output on the next call to this routine.
!--

BEGIN

!++
! Local macros used to check for the indicated addressing modes.
! See 'WARNING:', above.
!--
MACRO
	REGISTR(MODE) = (MODE EQL 5) %,				! Register mode addressing
	DEFERRED(MODE) = ( MODE LSS 0 AND MODE ) %,		! Those which begin with '@' are
								!  9 - @(RN)+,
								!  B - @BYTE(RN),
								!  D - @WORD(RN),
								!  F - @LONG(RN),
								! or any of these + indexing
								! The thing which is common to only these
								! modes is that they all have the sign
								! bit set and are odd!
	AUTODEC(MODE) = (MODE EQL 7) %,				! See if mode is auto decrement.
	AUTOINC(MODE) = (MODE LSS 0) %;				! mode is auto increment
								! This check depends upon the fact that
								! the mode was extracted with sign extension,
								! and that many of the other possibilities
								! were already eliminated.

MAP
	INS_PC : REF VECTOR[,LONG],				! Effect a REF LONG, enabling an update of the PC
	STREAM_PTR : REF BLOCK[,BYTE];

LOCAL
	STREAM_VALUE : BLOCK[4,BYTE],				! Values from instruction stream
	NEW_STR_PTR,						! New stream pointer
	FLAG,							! Indicates the type of displacement
	DISPO : VECTOR[16,BYTE],				! The actual displacement
	DISPL,							! The low order longword of DISPO
	DISP_SIZE,						! The size, in bytes, of a displacement
	DOM_OPRND,						! Operand extracted from the
								!  dominant mode byte.  It may be Rn,
								!  Rx, or a literal (SRM notation).
	DOM_MODE;						! The primary addressing mode comes from
								!  this dominant byte as well.

!++
! Consider the possibility of so-called 'branch type' addressing first before
! anything else, because otherwise short literals cannot be differentiated
! from byte displacement branches.
!--
IF( (NEW_STR_PTR = BRANCH_TYPE( .STREAM_PTR, .INDEX, .OPCODE, INS_PC[0] )) NEQ 0 )
THEN
	RETURN( .NEW_STR_PTR );					! Success, return new stream pointer

!++
! Extract the needed fields from the first byte of the operand specifier.
! Extract some fields with sign extension because that makes various tests
! more convenient.
!--
IF .MAP_FLAG							! Is the instruction at PC?
THEN
	PAT$GET_VALUE(.STREAM_PTR, A_BYTE, STREAM_VALUE)	! Yes, map address
ELSE
	STREAM_VALUE = .STREAM_PTR[0, 0, (A_BYTE * BITS_PER_BYTE), 0]; ! No, get value from buffer
DOM_MODE = .STREAM_VALUE[ AMODE ];
DOM_OPRND = .STREAM_VALUE[ AREG ];

!++
! Take special action for indexing mode.
!--
IF( .DOM_MODE EQL INDEXING_MODE )
THEN
	BEGIN
	!++
	! Handle indexing mode recursively.
	!--
	INS_PC[0] = .INS_PC[0] + 1;
	IF( (STREAM_PTR = INS_OPERAND( STREAM_PTR[ NEXT_FIELD(1) ], .INDEX, .OPCODE, INS_PC[0] )) EQL 0 )
	THEN
		RETURN(FALSE);					! Read access failure
	PUT_REG( .DOM_OPRND, SQUARE_BRACKETS );
	RETURN( .STREAM_PTR );
	END;

!++
! Simple modes are easier:
!
! First see if there will be a literal or displacement in the operand reference.
!--
IF( (STREAM_PTR = DISPLACEMENT( .STREAM_PTR, FLAG, DISPO, DISP_SIZE, .INDEX, .OPCODE, INS_PC[0] )) EQL 0 )
THEN
	RETURN(FALSE);						! Read access failure

DISPL = .DISPO< 0, MINU( .DISP_SIZE, A_LONGWORD) * BITS_PER_BYTE, 1>;

!++
! Begin checking for the addressing modes which begin with special characters
! that have to be printed first.  An attempt is made to handle different cases
! first.
!--
IF (DEFERRED(.DOM_MODE))
THEN
	PUTC('@')
ELSE
	IF (AUTODEC(.DOM_MODE))
	THEN
		PUTC('-');

!++
! Next consider displacements or literals.  Whether or not this is the case
! has already been determined in the call to 'DISPLACEMENT', above.
!--
IF (.FLAG)
THEN
	BEGIN
	!++
	! There is a literal, so print it.  The flag value returned by routine
	! DISPLACEMENT distinguishes when there should be a '#' as opposed to
	! when the number is actually a displacement off a register.
	!--
	IF (.FLAG GTR 0)
	THEN
		BEGIN
		IF .DISP_SIZE GTR A_LONGWORD			! **** Temp
		THEN
			!++
			! Literals bigger than a longword are not yet supported.
			!--
			BEGIN
			DISP_SIZE = A_LONGWORD;
			PUTC('?');
			END;
		PUTC('#');

		!++
		! Except for @# mode, make .DOM_OPRND NEQ PC_REG so that later
		! only checking that will also tell us that .FLAG is GTR 0.
		!--
		IF (NOT DEFERRED (.DOM_MODE))
		THEN
			DOM_OPRND = PC_REG + 1;
		IF (.CASE_FLAG NEQ 0) AND (.INDEX EQL 3)
		THEN
			CASE_FLAG = .DISPL + 1;
		END
	ELSE
		BEGIN
		OWN
			DISPL_ID : VECTOR[4,BYTE]
			INITIAL( BYTE( 'B', 'W', '?', 'L') );

		!++
		! Print an indication of the displacement size.
		!--
		PAT$FAO_PUT( UPLIT( %ASCIC '!AD^' ), 1, DISPL_ID[ .DISP_SIZE - 1 ] );
		END;

	!++
	! If the register is the PC, then the absolute address is output.
	!--
	IF (.FLAG LSS 0) AND (.DOM_OPRND EQL PC_REG)
	THEN
		BEGIN
		!++
		! Pick up the displacement and make it into an effective address.
		!--
		DISP_SIZE = A_LONGWORD;
		DISPL = .DISPL + .INS_PC[0];
		END;


	!++
	! Output here is the same as non-EFFECTIVE unless the (REG) is PC.
	!--
	IF( .DOM_OPRND EQL PC_REG )
	THEN
		PAT$OUT_SYM_VAL( .DISPL, LONG_LENGTH, NO_OVERRIDE )
	ELSE
		BEGIN
		!++
		! Literals or real (non-PC) displacement modes.
		!--
		PAT$OUT_NUM_VAL(.DISPO, .DISP_SIZE, NO_OVERRIDE, TRUE);
		IF( .FLAG LSS 0 )
		THEN
			PUT_REG( .DOM_OPRND, ROUND_BRACKETS );
		END;
	END
ELSE
	!++
	! No literal or displacement therefore the operand must be a type of
	! register reference.  Sort out the few cases and print them.
	!--
	IF (REGISTR(.DOM_MODE))
	THEN
		PUT_REG( .DOM_OPRND, NO_BRACKETS )
	ELSE
		BEGIN
		PUT_REG( .DOM_OPRND, ROUND_BRACKETS );
		IF( AUTOINC( .DOM_MODE ) )
		THEN
			PUTC('+');
		END;
RETURN(.STREAM_PTR);						! Return the new byte stream pointer
END;

%SBTTL 'BRANCH_TYPE - Handle branch operands'
ROUTINE BRANCH_TYPE( STREAM_PTR, INDEX, OPCODE, INS_PC ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	DECIDE IF THE CURRENT OPERAND IS USING BRANCH TYPE
!	ADDRESSING.  IF SO, PRINT OUT THE REFERENCE AND
!	LOOK AFTER ALL THE DETAILS.  OTHERWISE RETURN FALSE.
!
! CALLING SEQUENCE:
!
!	BRANCH_TYPE ();
!
! INPUTS:
!
!	STREAM_PTR	- AN UNMAPPED POINTER TO THE CURRENT DOMINANT
!			  MODE BYTE.
!	INDEX		- WHICH OPERAND (ORDINAL) BEING DECODED.
!	OPCODE		-THE OPCODE OF INSTRUCTION BEING DECODED.
!			 (This parameter has already been validated.)
!	INS_PC		- THE PC FOR WHICH THE INSTRUCTION WAS ENCODED
!
! IMPLICIT INPUTS:
!
!	PAT$GB_OPINFO - THE OPCODE INFORMATION TABLE.
!
! OUTPUTS:
!
!	IF THE CURRENT OPERAND IS A REFERENCE USING BRANCH TYPE
!	ADDRESSING, THIS REFERENCE IS PRINTED.  OTHERWISE THE
!	ROUTINE DOES NO OUTPUT.
!
! IMPLICIT OUTPUTS:
!
!	MAP_FLAG - TRUE IF STREAM_PTR IS EQUAL TO PC,
!		   FALSE IF STREAM_PTR IS A BUFFER.
!
! ROUTINE VALUE:
!
!	FALSE - IF THE CURRENT OPERAND IS NOT A BRANCH TYPE 
!		(i.e. If the calling routine should continue on
!		 further to decode the instruction.)
!	TRUE - non-zero, THE ADDRESS OF THE NEXT INSTRUCTION IS RETURNED.
!
! SIDE EFFECTS:
!
!	NONE.
!--

BEGIN

MAP
	INS_PC : REF VECTOR[,LONG],
	STREAM_PTR : REF BLOCK[,BYTE];

LOCAL
	N_OPS,							! NUMBER OF OPERANDS FOR CURRENT OPCODE
	DISP_SIZE,						! SIZE OF BRANCH OPERAND, IN BYTES.
	DISPL,							! THE ACTUAL BRANCH DISPLACEMENT.
	STREAM_VALUE;						! VALUE OF BYTE STREAM FOR INSTRUCTION

!++
! THERE IS NO POINT IN EVEN CONSIDERING BRANCH TYPE ADDRESSING UNLESS THIS IS
! THE LAST OPERAND FOR THIS INSTRUCTION.
!--
IF ((N_OPS = .PAT$GB_OPINFO[ .OPCODE, OP_NUMOPS ]) NEQ .INDEX) AND
   (.PAT$GB_OPINFO[.OPCODE, OP_NUMOPS] NEQ ASM_DIR_OP)

THEN
	RETURN(FALSE);

!--
! 0 IN THE OP_BR_TYPE FIELD INDICATES OPCODE HAS NO BRANCH TYPE OPERANDS.
!--
IF( (DISP_SIZE = .PAT$GB_OPINFO[ .OPCODE, OP_BR_TYPE ]) EQL NO_BR )
THEN
	RETURN(FALSE)
ELSE
	IF (.DISP_SIZE EQLU BR_LG)
	THEN
		DISP_SIZE = A_LONGWORD;

!++
! SUCCESS -- THIS IS A CASE OF BRANCH TYPE ADDRESSING. HANDLE THIS
! BY EXTRACTING THE FIELD, (WITH SIGN EXTENSION AS PER SRM),  PRINTING
! OUT THE REFERENCE, AND RETURNING A POINTER TO THE NEXT INSTRUCTION.  ALSO
! UPDATE THE VARIABLE WHICH THE USER ACCESSES AS '\' - THE LAST VALUE DISPLAYED.
! IN THIS CASE IT IS DEFINED AS THE VALUE TO BE THE BRANCH ADDRESS.
!--
IF .MAP_FLAG							! IS THE INSTRUCTION AT THE PC?
THEN
	PAT$GET_VALUE(.STREAM_PTR, .DISP_SIZE, STREAM_VALUE)	! YES, MAP ADDRESS
ELSE
	STREAM_VALUE = .STREAM_PTR[0, 0, .DISP_SIZE*BITS_PER_BYTE, 1]; ! NO, GET VALUE FROM BUFFER
IF (.PAT$GB_OPINFO[.OPCODE, OP_NUMOPS] NEQ ASM_DIR_OP)
THEN
	DISPL = .STREAM_VALUE<0,.DISP_SIZE*BITS_PER_BYTE,1>
ELSE
	DISPL = .STREAM_VALUE<0,.DISP_SIZE*BITS_PER_BYTE,0>;
STREAM_PTR = .STREAM_PTR + .DISP_SIZE;
INS_PC[0] = .INS_PC[0] + .DISP_SIZE;
PAT$GL_LAST_VAL = .DISPL + .INS_PC[0];

!++
! Put out the absolute branch operand.
!--
IF (.PAT$GB_OPINFO[.OPCODE, OP_NUMOPS] NEQ ASM_DIR_OP)
THEN
	DISPL = .DISPL + .INS_PC[0];
PAT$OUT_SYM_VAL(.DISPL, LONG_LENGTH, NO_OVERRIDE);
RETURN( .STREAM_PTR );
END;

%SBTTL 'PUT_REG - Print a register name'
ROUTINE PUT_REG( REG, CS_FLAG ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	THIS ROUTINE TAKES ONE PARAMETER WHICH IT ASSUMES IS
!	THE NUMBER OF A VAX REGISTER.  IT THEN PRINTS OUT
!	'R' FOLLOWED BY THE NUMBER (IN DECIMAL), UNLESS THE
!	REGISTER NUMBER IS 'SPECIAL'.  THE SPECIAL REGISTERS INCLUDE:
!
!	REGISTER NUMBER		SPECIAL NAME
!
!		12		   AP
!		13		   FP
!		14		   SP
!		15		   PC
!
!	An additional parameter is used as a flag to indicate
!	whether the register reference should be enclosed in
!	round/square brackets or not.
!
! INPUTS:
!
!	REG - The register number.
!	CS_FLAG - A flag to control printing before/after REG.
!
! IMPLICIT INPUTS:
!
!	NONE.
!
! OUTPUTS:
!
!	THE REGISTER REFERENCE IS PRINTED.
!
! IMPLICIT OUTPUTS:
!
!	NONE.
!
! ROUTINE VALUE:
!
!	NOVALUE
!
! SIDE EFFECTS:
!
! 	NONE.
!--

BEGIN

LOCAL
	INDEX;

OWN
	ENCLOSING_CS : VECTOR[4,WORD]				! Enclosing strings for REG.
		       INITIAL(	WORD(	%ASCIC '(',
					%ASCIC ')',
					%ASCIC '[',
					%ASCIC ']')),
	PUT_CS   : VECTOR[4,BYTE]				! FAO formatting string.
		   INITIAL( %ASCIC '!AC' ),
	REGNAMES : VECTOR[4,WORD]				! SPECIAL REGISTER NAMES.
		   INITIAL( WORD( 'AP', 'FP', 'SP', 'PC') );

!++
! IF ANY ENCLOSING STRINGS SHOULD BE OUTPUT, THEN CS_FLAG PROVIDED
! AN INDEX INTO THE VECTOR OF STRINGS.
!--
IF( (INDEX = .CS_FLAG) NEQ NO_BRACKETS )
THEN
	PAT$FAO_PUT( PUT_CS, ENCLOSING_CS[.INDEX] );

!++
! Now print the actual register reference.
!--
IF( .REG LSS AP_REG )
THEN
	PAT$FAO_PUT( UPLIT ( %ASCIC 'R!UB' ), .REG )
ELSE
	!++
	! The reserved registers have special names which
	! are extracted from the above vector.
	!--
	PAT$FAO_PUT( UPLIT ( %ASCIC '!AD' ), 2, REGNAMES[.REG-12] );

!++
! Check for any enclosing string, right parentheses or bracket.
!--
IF( .INDEX NEQ NO_BRACKETS )
THEN
	PAT$FAO_PUT( PUT_CS, ENCLOSING_CS[.INDEX+1] );
END;

%SBTTL 'DISPLACEMENT - Determine size of operand'
ROUTINE DISPLACEMENT( STREAM_PTR, FLAG, DISPO, PTR_DISP_SIZE, INDEX, OPCODE, INS_PC ) =

!++
!  FUNCTIONAL DESCRIPTION:
!
!	DECIDE IF THERE IS A DISPLACEMENT FOR THE CURRENT
!	OPERAND OF THE CURRENT INSTRUCTION.  IF THERE IS,
!	EXTRACT IT FROM THE INSTRUCTION STREAM AND RETURN AN
!	INDICATION OF THE CASE DETECTED.
!
! CALLING SEQUENCE:
!
!	DISPLACEMENT ();
!
! INPUTS:
!
!	STREAM_PTR	- POINTER TO THE BEGINNING OF THE CURRENT OPERAND SPECIFIER.
!	FLAG		- POINTER TO THE RETURN LOCATION FOR ONE OF THE 3 FLAGS
!			  IF THERE IS A DISPLACEMENT OR LITERAL ASSOCIATED
!			  WITH THIS OPERAND REFERENCE.
!	DISPO	 	- A POINTER TO THE RETURN BUFFER FOR THE ACTUAL
!			  DISPLACEMENT OR LITERAL.
!	PTR_DISP_SIZE	- ADDRESS TO CONTAIN RETURNED VALUE OF NUMBER
!			  OF BYTES ACTUALLY NEEDED FOR THE DISPLACEMENT.
!			  This is done strictly for the benefit of FAO,
!			  which would fill out output fields with 0s
!			  otherwise, giving misleading output.
!	INDEX		- THE ORDINAL OF THE OPERAND BEING DECODED.
!	OPCODE		-  THE OPCODE OF THE INSTRUCTION BEING DECODED.
!			 (This parameter has already been validated.)
!	INS_PC		- THE PC FOR WHICH THE INSTRUCTION WAS ENCODED.
!
! OUTPUTS:
!
!	1) A VALUE OF -1, 0, OR 1 IS RETURNED VIA THE LONGWORD
!	   POINTER, FLAG.  0 IS RETURNED IF NO DISPLACEMENT IS TO BE
!	   ASSOCIATED WITH THIS OPERAND REFERENCE.  OTHERWISE 1 OR -1
!	   IS RETURNED TO SEPARATE THE CASES LISTED BELOW.  THIS PROVIDES A WAY
!	   TO PRINT '#' BEFORE SOME LITERALS, (E.G. MOVL #01,R0), AND TO INDICATE
!	   WHEN TO PRINT '(RN)' AFTER THE DISPLACEMENT, ETC.  THIS INFORMATION
!	   IS RETURNED TO PRECLUDE TESTING FOR IT AGAIN.
!
!	2) IF THERE IS A DISPLACEMENT, ITS VALUE IS RETURNED
!	   TO THE BUFFER POINTED AT BY 'DISPO'.  IF THE FLAG WHICH IS
!	   RETURNED (SEE ABOVE) IS 0, THE BUFFER POINTED
!	   TO BY 'DISPO' IS UNCHANGED.
!
! ROUTINE VALUE:
!
!	-THE (NEW) BYTE STREAM POINTER WHICH WILL THEN POINT TO THE
!	 BEGINNING OF THE NEXT INSTRUCTION OR OPERAND REFERENCE.
!
! SIDE EFFECTS:
!
!	NONE.
!--

BEGIN

MAP
	INS_PC		:	REF VECTOR[,LONG],
	PTR_DISP_SIZE	:	REF VECTOR[,LONG],
	DISPO		:	REF VECTOR[,BYTE],
	FLAG		:	REF VECTOR[,LONG],
	STREAM_PTR	:	REF BLOCK[,BYTE];

LOCAL
	MAP_STREAM_PTR : REF BLOCK[,BYTE],			! MAPPED ADDRESS OF BYTE STREAM
	STREAM_VALUE : BLOCK[4,BYTE],				! VALUES FROM BYTE STREAM
	MODE,							! DOMINANT ADDRESSING MODE
	F,							! FLAG VALUE RETURNED
	DISP_SIZE;						! SIZE, IN BYTES, OF THE DISPLACEMENT

!++
!  ASSUME THERE IS NO DISPLACMENT, BUT THEN CHECK FOR THE CASES:
!
!	1) LITERAL MODE - DOMINANT MODE IS 0, 1, 2, OR 3.
!
!	2) BYTE, WORD, OR LONGWORD, DISPLACEMENT OR DEFERRED
!	   DISPLACEMENT MODES.
!
!	3) MODE 8 WHEN REG IS PC (IE #CONST, INSTEAD OF (PC)+ )
!	  OR
!	   MODE 9 WHEN REG IS PC (IE @#ADDRESS, INSTEAD OF @(PC)+ )
!	
!  CASES 1 AND 3 ARE TYPE 1, WHILE CASE 2 IS TYPE -1.
!--
F = 0;
DISP_SIZE = 0;
IF .MAP_FLAG							! IS INSTRUCTION AT PC?
THEN
	PAT$GET_VALUE(.STREAM_PTR, A_BYTE, STREAM_VALUE)	! YES, MAP ADDRESS
ELSE
	STREAM_VALUE = .STREAM_PTR[0, 0, (A_BYTE * BITS_PER_BYTE), 0]; ! NO, GET VALUE FROM BUFFER
IF( (MODE = .STREAM_VALUE[ DSPL_MODE ]) LSS INDEXING_MODE )
THEN
	BEGIN
	!++
	! CASE 1: LITERAL MODE ADDRESSING
	!	  THE LITERAL IS A 6-BIT FIELD WHICH MUST BE EXTRACTED WITHOUT
	!	  SIGN-EXTENSION FROM THE ADDRESSING MODE BYTE.  EXTRACT THIS
	!	  FIELD, PASS IT BACK, AND SET A FLAG TO INDICATE WHICH CASE
	!	  WAS FOUND.  NOTE THAT THE FLAG VALUE BEING 1 ALSO MEANS THAT
	!	  IT CAN BE USED FOR THE DISP_SIZE VALUE RETURNED.
	!--
	DISPO[0] = .STREAM_VALUE[SHORT_LITERAL];
	F = 1;
	END
ELSE
	IF( .MODE GTR AT_PC_REL_MODE )
	THEN
		BEGIN
		!++
		! CASE 2: DISPLACEMENT OR DEFERRED DISPLACEMENT MODE.  THERE
		!	  ONLY REMAINS TO DECIDE HOW MUCH OF THE BYTE STREAM TO
		!	  EXTRACT.  THIS IS DONE SIMPLY BY LOOKING AT WHAT THE
		!	  'MODE' FIELD OF THE DOMINANT BYTE IS.  TO
		!	  DIFFERENTIATE HEX A OR B, C OR D, AND E OR F,
		!	  SO JUST LOOK FOR THE MOST CONVENIENT BITS TO CHECK.
		!	  START BY ASSUMING BYTE DISPLACEMENT (HEX A OR B), THEN
		!	  SORT OUT THE OTHER TWO CASES.
		!--
		F = -1;
		DISP_SIZE = A_BYTE;
		IF( .STREAM_VALUE[ DOM_MOD_FIELD ] LSS 0 )
		THEN
			DISP_SIZE = (IF (.STREAM_VALUE[DOM_MOD_FIELD])
				      THEN A_LONGWORD		! MODE IS HEX E OR F.
				      ELSE A_WORD);		! MODE IS HEX C OR D.
		END
	ELSE
		IF ((.STREAM_VALUE[OPERAND_VALUE] EQL PC_REG) AND
		   (.MODE EQL PC_REL_MODE OR .MODE EQL AT_PC_REL_MODE))
		THEN
			BEGIN
			!++
			! CASE 3: SPECIAL CASE NOTATION FOR PC MODES.
			!	  THE ONLY DIFFICULTY IS DECIDING HOW
			!	  MUCH OF THE BYTE STREAM TO 'EAT UP'.
			!	  @#ADDRESS ALWAYS HAS LONGWORD CONTEXT,
			!	  WHILE THE CONTEXT OF #CONST DEPENDS ON
			!	  THE OPCODE AND THE OPERAND ORDINAL.
			F = 1;
			IF( .MODE EQL AT_PC_REL_MODE )
			THEN
				DISP_SIZE = A_LONGWORD
			ELSE
				DISP_SIZE = INS_CONTEXT( .INDEX, .OPCODE );
			END;
!++
! AT THIS POINT .DISP_SIZE IS THE NUMBER OF BYTES PAST THE MODE BYTE
! CONSUMED FROM THE INSTRUCTION STREAM, IF ANY.  JUST GO AHEAD AND CONSUME THESE
! BYTES, PASS BACK THE DISPLACEMENT, AND RETURN THE NEW INSTRUCTION-STREAM BYTE
! POINTER.  EVEN IF THERE IS NO DISPLACEMENT, AT LEAST THE DOMINANT ADDRESSING
! MODE BYTE WAS CONSUMED.  THE NEXT COMMAND INCREMENTS THE STREAM_PTR
! ADDRESS BY ONE.
!--
STREAM_PTR = STREAM_PTR[NEXT_FIELD(1)];
INS_PC[0] = .INS_PC[0] + 1;

!++
! Pass back the flag now so that F can be re-used as a temporary, below.
!--
FLAG[0] = .F;
IF( .DISP_SIZE NEQ 0 )
THEN
	BEGIN
	F = .DISP_SIZE;

	!++
	! PASS BACK THE LITERAL OR DISPLACEMENT.  NOTE THE SIGN EXTENSION.
	!--
	IF .MAP_FLAG						! IS INSTRUCTION AT PC?
	THEN
		PAT$GET_VALUE(.STREAM_PTR, .DISP_SIZE, .DISPO)	! YES, MAP ADDRESS
	ELSE
		INCR I FROM 0 TO .DISP_SIZE - 1 DO		! NO GET VALUE FROM BUFFER
			DISPO[.I] = .STREAM_PTR[ .I, 0, BITS_PER_BYTE, 0];
	END;

!++
! Pass back an indication of the number of bytes actually consumed for the
! displacement or literal for the benefit of FAO output.
!--
PTR_DISP_SIZE[0] = .F;
INS_PC[0] = .INS_PC[0] + .DISP_SIZE;
RETURN( STREAM_PTR[ NEXT_FIELD( .DISP_SIZE ) ] );
END;

%SBTTL 'INS_CONTEXT - Determine operand type'
ROUTINE INS_CONTEXT( INDEX, OPCODE ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	THIS ROUTINE DECIDES WHAT CONTEXT APPLIES TO THE GIVEN
!	OPERAND FOR A SPECIFIC OPCODE.  IT IS USED TO DETERMINE
!	WHETHER A PC-RELATIVE MODE FOR THIS OPERAND WOULD
!	REQUIRE A BYTE, WORD, LONGWORD, OR QUADWORD OPERAND.
!
! CALLING SEQUENCE:
!
!	INS_CONTEXT ();
!
! INPUTS:
!
!	INDEX - OPERAND IS BEING DECODED.  THIS NUMBER
!		MUST BE 1, 2, ... 6.
!	OPCODE	-THE OPCODE OF THE INSTRUCTION BEING DECODED.
!		 (This parameter has already been validated.)
!
! IMPLICIT INPUTS:
!
!	None.
!
! OUTPUTS:
!
!	NONE.
!
! IMPLICIT OUTPUTS:
!
!	NONE.
!
! ROUTINE VALUE:
!
!	IF SOME ERROR IS DETECTED, RETURN FALSE.  OTHERWISE RETURN
!	THE NUMBER OF BYTES FROM THE INSTRUCTION STREAM THAT THE CURRENT
!	OPERAND REFERENCE SHOULD CONSUME.  THIS NUMBER WILL BE:
!
!     NUMBER	OP_CONTEXT 	NAME FROM OPI MACRO DEFINITION
!   OF BYTES         VALUE
!	
!	    1	         0		BYT
!	    2		 1		WRD
!	    4		 2		LNG
!	    8		 3		QAD
!	   16		 4		OCT
!
!   THE VALUE, 0 TO 4, STORED IN THE OP_CONTEXT FIELD IS THE POWER OF TWO
!   WHICH WILL YIELD THE 'NUMBER OF BYTES' ENTRY, ABOVE.
!
! SIDE EFFECTS:
!
!	NONE.
!--

BEGIN
!++
! CHECK FOR ANY OF THE FOLLOWING ERROR CONDITIONS:
!	1) INSUFFICIENT INFORMATION ABOUT IT.
!	   (IE - IT IS RESERVED OR YET TO BE DEFINED).
!	2)  CONFLICTING INFORMATION ABOUT NUMBER OF OPERANDS FOR OPCODE.
!	   THIS CHECK IS NECESSARY BECAUSE THE 'NUL' ENTRY IN THE OPINFO
!	   MACROS RESULTS IN THE SAME VALUE BEING ENCODED AS THE 'BYT' ONES DO.
!	   THIS ERROR CAN BE CAUGHT AT THIS POINT (BY LOOKING AT THE OP_NUMOPS ENTRY FOR
!	   THIS OPCODE), IT DID NOT SEEM WORTH TAKING UP MORE BITS IN THE OPINFO
!	   TABLE TO DIFFERENTIATE 'NUL' AND THE OTHERS.
!--
IF (.PAT$GB_OPINFO[.OPCODE, OP_NUMOPS] EQL NOT_AN_OP)		! ERROR 1, SEE ABOVE.
THEN
	RETURN(FALSE);
IF ((.PAT$GB_OPINFO[.OPCODE, OP_NUMOPS] LSS .INDEX) OR
   (.INDEX LEQ 0))						! ERROR 2, SEE ABOVE.
THEN
	RETURN(FALSE);

!++
! NOW IT IS JUST A MATTER OF LOOKING INTO OUR OPINFO TABLE TO REQUIRE 0 THROUGH
! 4.  THIS JUST HAPPENS TO BE THE POWER OF 2 WHICH NEEDED TO CALCULATE THE
! NUMBER OF BYTES OCCUPIED BY THE CORRESPONDING OPERAND.
!--
RETURN (( 1 ^ .PAT$GB_OPINFO[.OPCODE, OP_CONTEXT(.INDEX)]));
END;

ROUTINE CHK_ASD_TBL( INS_PC, ASD_ENTRY_PTR, ASM_DIR_TBL ) =

!++
! FUNCTIONAL DESCRIPTION:
!
! This routine determines if the PC to be decoded is a known assembler
! directive.  If there is no assembler directive correlation table or the flag
! specifies not to check it, then FALSE is returned.  Otherwise, the table is
! searched to see if it contains the given PC.  If not FALSE is returned.  If
! the PC is within the table, then the offset into the OPINFO table to the
! directive is returned.  Also, in this case, a pointer into the assembler
! directive table is returned.
!
! CALLING SEQUENCE:
!
!	CHK_ASD_TBL( INS_PC, ASD_ENTRY_PTR, ASM_DIR_TBL )
!
! INPUTS:
!
!	INS_PC - the PC to search the ASD table for
!	ASD_ENTRY_PTR - location to place ASD table pointer if found
!	ASM_DIR_TBL - flag indicating whether or not to search ASD table,
!			FALSE = do not search, TRUE = search
!
! IMPLICIT INPUTS:
!
!	The ASD table must have been initialized.
!
! OUTPUTS:
!
!	The pointer into the ASD table is set to 0 or the appropriate entry.
!
! IMPLICIT OUTPUTS:
!
!	NONE.
!
! ROUTINE VALUE:
!
!	The returned value is either:
!
!		FALSE, if the PC is not in the table or there was no ASD table.
!		otherwise, it is the "OPCODE" offset into the OPINFO table.
!
! SIDE EFFECTS:
!
!	NONE.
!
!--

BEGIN

MAP
	ASM_DIR_TBL : REF BLOCK[,BYTE],				! Descriptor for assembler directive table
	ASD_ENTRY_PTR : REF VECTOR[,LONG];			! Pointer to set if PC is found in ASD table

LOCAL
	OPINFO_PTR : REF BLOCK[,BYTE],				! Local pointer into OPINFO table from ASD entry
	ASD_SIZE,						! Remaining length of ASD table to search
	ASD_PTR : REF BLOCK[,BYTE];				! Local pointer into ASD table for search

!++
! Check if an ASD table was built.  If not, this means that there was
! no assembler directive in the instructions just deposited.
!--
IF (.ASM_DIR_TBL EQL 0)
THEN
	RETURN(FALSE);
IF ((ASD_PTR = .ASM_DIR_TBL[DSC$A_POINTER]) EQL 0)
THEN
	RETURN(FALSE);

!++
! Loop, searching the assembler directive table, ASD, for the PC provided.
! If it is located, then set the ASD_ENTRY_PTR pointer and return the opcode
! offset into the OPINFO table.  If this routine falls out of the loop, then
! the PC was not in the table and FALSE is returned.
!--
ASD_SIZE = .ASM_DIR_TBL[DSC$W_LENGTH];
ASD_ENTRY_PTR[0] = 0;
WHILE .ASD_SIZE GEQ ASD$C_SIZE
DO
	BEGIN
	IF (.INS_PC EQL .ASD_PTR[ASD$L_PC])
	THEN
		BEGIN
		!++
		! PC was found in the ASD table.  Set up return values.
		!--
		ASD_ENTRY_PTR[0] = .ASD_PTR;
		OPINFO_PTR = .ASD_PTR[ASD$L_OPINFO];
		RETURN (  IF (.OPINFO_PTR[OP_BR_TYPE] EQL BR_BY)
			  THEN  (SIZOPINFO1 - 3)
			  ELSE  IF (.OPINFO_PTR[OP_BR_TYPE] EQL BR_WD)
				THEN (SIZOPINFO1 - 2)
				ELSE (SIZOPINFO1 - 1));
		END
	ELSE
		BEGIN
		!++
		! PC is not equal to this entry.  Update to next entry in table.
		!--
		ASD_SIZE = .ASD_SIZE - ASD$C_SIZE;
		ASD_PTR = CH$PTR (.ASD_PTR, ASD$C_SIZE);
		END;
	END;

!++
! PC was not in the table.  Return FALSE (indicating not found) .
!--
RETURN(FALSE);
END;

END
ELUDOM
