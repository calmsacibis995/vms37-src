MODULE PATECO (%IF %VARIANT EQL 1
		%THEN
			ADDRESSING_MODE (EXTERNAL = LONG_RELATIVE,
					NONEXTERNAL = LONG_RELATIVE),
		%FI
		IDENT = 'V03-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY:	PATCH
!
! ABSTRACT:	THIS MODULE CONTAINS ROUTINES TO HANDLE ECO COMMANDS.
!
! ENVIRONMENT:	PART OF THE IMAGE FILE PATCH UTILITY FOR VAX.
!
! AUTHOR:  K.D. MORSE	, CREATION DATE:	21-OCT-77
!
! MODIFIED BY:
!
!	V02-006	PCG0001		Peter George		02-FEB-1981
!		Add require statement for LIB$:PATDEF.REQ
!
!	V02-005	KDM0027		KATHLEEN D. MORSE	04-DEC-1980
!		Change action taken on CHECK [NOT] ECO commands to be:
!		skip this ECO and scan until you find the next SET ECO command.
!
! 	, : VERSION
!--

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
	PAT$ECO_CMDS : NOVALUE;					! Handles ECO commands

!
! INCLUDE FILES:
!
LIBRARY 'SYS$LIBRARY:LIB.L32';					! System structure definitions
REQUIRE 'SRC$:PATPCT.REQ';					! Defines PSECTS
REQUIRE 'SRC$:PATGEN.REQ';					! Defines context bits
REQUIRE 'SRC$:PREFIX.REQ';					! Defines structure macros
REQUIRE 'SRC$:PATPRE.REQ';					! Defines PATCH structures
REQUIRE 'LIB$:PATDEF.REQ';				! Defines literals
REQUIRE 'LIB$:PATMSG.REQ';					! Defines error message codes
REQUIRE 'SRC$:BSTRUC.REQ';					! Defines basic structures
REQUIRE 'SRC$:LISTEL.REQ';					! Defines list structures
REQUIRE 'SRC$:VXSMAC.REQ';					! Defines TRUE and FALSE

!
! MACROS:
!

!
! EQUATED SYMBOLS:
!

!
! OWN STORAGE:
!

!
! EXTERNAL REFERENCES:
!
EXTERNAL
	PAT$GL_FLAGS,						! CLI flags
	PAT$GL_ECO_UPD : BITVECTOR,				! /UPDATE qualifier ECO mask
	PAT$GB_EXEC_CMD : BYTE,					! Indicator whether or not to execute patch commands
	PAT$GB_ECOLVL : BYTE,					! ECO level for current patch
	PAT$GL_IHPPTR : REF BLOCK[,BYTE],			! Pointer to patch section of image header
	PAT$GL_IMGHDR : REF BLOCK[,BYTE],			! Pointer to image header
	PAT$GL_CONTEXT : BITVECTOR,				! Context bits
	PAT$GL_HEAD_LST,					! Listhead for command parameters
	PAT$GL_OLDNBK : BLOCK[,BYTE],				! Old image file name block
	PAT$GB_OLDNAME;						! Name of old image file


GLOBAL ROUTINE PAT$ECO_CMDS : NOVALUE =				! HANDLES ALL ECO COMMANDS

!++
! FUNCTIONAL DESCRIPTION:
!
! THIS ROUTINE HANDLES THE COMMANDS--CHECK ECO, CHECK NOT ECO, AND SET ECO.
! THE ECO LEVEL NUMBERS HAVE ALREADY BEEN SCANNED AND INSERTED IN LIST ENTRIES.
! ONE ENTRY CONSISTS OF THREE LONG WORDS:
!
!	1.) THE FORWARD LINK
!	2.) THE ECO LEVEL (OR THE START OF THE ECO RANGE)
!	3.) ZERO (OR THE END OF THE ECO RANGE)
!
! NOTE THAT THE SECOND AND THIRD LONGWORDS DESCRIBE A SINGLE ECO LEVEL OR
! A RANGE OF LEVELS, WITH THE SECOND LONGWORD BEING THE MINIMUM AND THE THIRD
! BEING THE MAXIMUM.  IF THERE IS ONLY A SINGLE ECO LEVEL THEN THE THIRD
! LONGWORD IS A ZERO.
!
! THIS ROUTINE SETS UP THE POINTERS TO ACCESS THE ECO BITS IN THE IMAGE HEADER
! AND THE ECO LEVELS FROM THE COMMAND.  THE CONTEXT BITS, SET_ECO AND 
! SET_NOT_ECO, SPECIFY WHETHER THE COMMAND WAS "SET ECO" OR "CHECK NOT ECO",
! RESPECTIVELY.  IF NEITHER BIT IS SET, THEN THE COMMAND MUST HAVE BEEN "CHECK ECO".
!
! IF THE APPROPRIATE ECO BITS ARE ALREADY SET, OR NOT SET, THEN AN ERROR
! MESSAGE IS PRODUCED.  THE "SET ECO" COMMAND CHECKS THAT THE ECO LEVEL WAS
! NOT ALREADY SET.  IF THE BIT IS NOT SET, THEN ANOTHER CHECK IS MADE TO SEE IF
! A PREVIOUS "SET ECO" WAS SPECIFIED BEFORE AN "UPDATE" COMMAND.  THIS IS DONE
! BY CHECKING PAT$GB_ECOLVL.  THIS INDICATOR IS SET BY THE "SET ECO" COMMAND
! AND CLEARED BY THE "UPDATE" COMMAND.  IF IT CONTAINS A NON-ZERO VALUE WHEN
! THIS ROUTINE EXECUTES, THEN TWO "SET ECO" COMMANDS WERE SPECIFIED FOR ONE
! PATCH.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	THE CONTEXT BITS ARE SET AND THE COMMAND PARAMETERS ARE PARSED.
!	THE IMAGE HEADER HAS BEEN READ AND EXPANDED TO INCLUDE A PATCH SECTION,
!		IF NECESSARY.
!
! IMPLICIT OUTPUTS:
!
!	THE APPROPRIATE ECO BITS ARE SET OR CHECKED IN THE IMAGE HEADER.
!
! ROUTINE VALUE:
!
!	NONE
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	AN ERROR MESSAGE AND EXIT OCCUR IF THE APPROPRIATE ECO BITS ARE NOT SET.
!
!--

BEGIN
LOCAL
	LOOP_CNT,						! LOOP COUNTER (MIN ECO LEVEL)
	LOOP_MAX,						! LOOP MAX (MAX ECO LEVEL)
	LIST_PTR,						! POINTER TO LIST ELEMENTS
	ECO_PTR : REF BITVECTOR;				! POINTER TO HEADER ECO WORDS

!++
! INITIALIZE POINTERS TO THE ECO BITS IN THE IMAGE HEADER AND TO THE FIRST
! COMMAND PARAMETER, AN ECO LEVEL OR RANGE.
!--
ECO_PTR = CH$PTR(PAT$GL_IHPPTR[IHP$L_ECO1], 0);			! POINT TO FIRST ECO LONGWORD
LIST_PTR = CH$PTR(.PAT$GL_HEAD_LST, 0);				! POINT TO FIRST ECO LEVEL PARAMETER

!++
! LOOP TO HANDLE ALL ECO LEVELS AND RANGES FOR THIS COMMAND.
!--
WHILE .LIST_PTR NEQA 0
DO
	BEGIN
	!++
	! SET UP A LOOP TO HANDLE A SINGLE ECO LEVEL OR RANGE OF ECO LEVELS.
	!--
	LOOP_CNT = .LIST_ELEM_EXP1(.LIST_PTR) - 1;		! INITIALIZE LOOP COUNT
	IF .LIST_ELEM_EXP2(.LIST_PTR) EQL 0			!CHECK IF MAXIMUM RANGE
	THEN							! EXISTS,
		LOOP_MAX = .LOOP_CNT				! IF NOT, SET MAX TO MIN AS SINGLE ECO LEVEL
	ELSE
		LOOP_MAX = .LIST_ELEM_EXP2(.LIST_PTR) - 1;	! IF SO, SET LOOP MAXIMUM (MAX ECO RANGE)

	!++
	! CHECK FOR ERRORS IN RANGE OF ECO LEVELS.
	!--
	IF .LOOP_MAX LSS .LOOP_CNT				! CHECK FOR REVERSED RANGE
	THEN
		SIGNAL(PAT$_EXARANGE);				! REPORT ERROR
	IF .LOOP_MAX GTR (PAT$K_MAX_ECO - 1)				! CHECK FOR ILLEGAL ECO LEVEL
	THEN							! IF > MAX, REPORT ERROR
		SIGNAL(PAT$_BADECO, 3, .LOOP_MAX+1, .PAT$GL_OLDNBK[NAM$B_RSL],
			PAT$GB_OLDNAME);
	IF .LOOP_CNT LSS (PAT$K_MIN_ECO - 1)				! CHECK FOR ILLEGAL ECO LEVEL
	THEN							! IF < MIN, REPORT ERROR
		SIGNAL(PAT$_BADECO, 3, .LOOP_CNT+1, .PAT$GL_OLDNBK[NAM$B_RSL],
			PAT$GB_OLDNAME);

	WHILE .LOOP_CNT LEQ .LOOP_MAX				! LOOP FOR ONE RANGE
	DO
		BEGIN

		!++
		! NOW HANDLE THE "SET ECO" COMMANDS, BY TESTING FOR THE
		! SET_ECO CONTEXT BIT.  THEN TEST IF ANOTHER ECO LEVEL IS SET.
		!--
		IF .PAT$GL_CONTEXT[SET_ECO]
		THEN
			BEGIN
			IF .ECO_PTR[.LOOP_CNT]			! CHECK ECO BIT NOT ALREADY SET
			THEN
				BEGIN
				SIGNAL(PAT$_ECOSET, 3, .LOOP_CNT+1, .PAT$GL_OLDNBK[NAM$B_RSL],
					PAT$GB_OLDNAME);	! REPORT ERROR
				PAT$GB_ECOLVL = 0;
				PAT$GB_EXEC_CMD = FALSE;
				RETURN;
				END;
			IF .PAT$GB_ECOLVL NEQ 0
			THEN
				SIGNAL(PAT$_MULTECO, 2, .PAT$GB_ECOLVL, .LOOP_CNT+1);
			PAT$GB_ECOLVL = .LOOP_CNT+1;		! REMEMBER ECO LEVEL FOR "UPDATE" COMMAND
			PAT$GB_EXEC_CMD = TRUE;			! FORCE COMMANDS TO BE EXECUTED
			IF (.PAT$GL_FLAGS AND PAT$M_UPDATE) NEQ 0
			THEN
				BEGIN
				IF NOT .PAT$GL_ECO_UPD<.LOOP_CNT, 1> ! IF NO /UPDATE
				THEN				! THEN RESET THE INDICATOR
					BEGIN			! FOR NO EXECUTION
					PAT$GB_ECOLVL = 0;
					PAT$GB_EXEC_CMD = FALSE;
					SIGNAL(PAT$_UPDATE, 1, .LOOP_CNT+1);
					END;
				END;
			END
		ELSE
			!++
			! COMMAND WAS NOT "SET ECO", THEREFOR IT MUST BE EITHER
			! "CHECK NOT ECO" OR "CHECK ECO".  THE SET_NOT_ECO CONTEXT
			! BIT WILL TELL WHICH COMMAND IT WAS.
			!--
			IF .PAT$GL_CONTEXT[SET_NOT_ECO]		! "CHECK NOT ECO" COMMAND?
			THEN					! IF SET THEN YES
				BEGIN
				IF .ECO_PTR[.LOOP_CNT]		! CHECK ECO LEVEL BIT NOT SET
				THEN				! IF IT IS, REPORT ERROR
					BEGIN
					SIGNAL(PAT$_ECOSET, 3, .LOOP_CNT+1,
						.PAT$GL_OLDNBK[NAM$B_RSL], PAT$GB_OLDNAME);
					PAT$GB_ECOLVL = 0;
					PAT$GB_EXEC_CMD = FALSE;
					RETURN;
					END;
				END
			ELSE
				IF NOT .ECO_PTR[.LOOP_CNT]	! COMMAND WAS "CHECK ECO"
				THEN				! REPORT ERROR IF NOT SET
					BEGIN
					SIGNAL(PAT$_ECONOTSET, 3, .LOOP_CNT+1,
						.PAT$GL_OLDNBK[NAM$B_RSL], PAT$GB_OLDNAME);
					PAT$GB_ECOLVL = 0;
					PAT$GB_EXEC_CMD = FALSE;
					RETURN;
					END;
		LOOP_CNT = .LOOP_CNT + 1;
		END;
	LIST_PTR = CH$PTR( .LIST_ELEM_FLINK(.LIST_PTR), 0);
	END;
RETURN
END;								! END OF PAT$ECO_CMDS

END				!End of module
ELUDOM
