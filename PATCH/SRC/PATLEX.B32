MODULE PATLEX (
		%IF %VARIANT EQL 1
		%THEN
			ADDRESSING_MODE (EXTERNAL = LONG_RELATIVE, NONEXTERNAL = LONG_RELATIVE),
		%FI
		IDENT = 'V03-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	PATCH
!
! ABSTRACT:	THIS MODULE CONTAINS A MARS SCANNER.
!
! ENVIRONMENT:	STARLET, user mode, interrupts disabled.
!
! AUTHOR: Carol Peters, CREATION DATE: 25 July 1977
!
! MODIFIED BY:
!
!	V02-012	PCG0001		Peter George		02-FEB-1981
!		Add require statement for LIB$:PATDEF.REQ
!
! MODIFICATIONS:
!  NO	DATE		PROGRAMMER		PURPOSE
!  --	----		----------		-------
!
!  00	5-JAN-78	K.D. MORSE		ADAPT VERSION 15 FOR PATCH.
!  01	24-JAN-78	K.D. MORSE		NO CHANGES FOR VERS 16.
!  02	24-MAR-78	K.D. MORSE		NO CHANGES FOR VERS 17-18.
!  03	14-APR-78	K.D. MORSE		NO CHANGES FOR VERS 19-20.
!  04	25-APR-78	K.D. MORSE		CONVERT TO NATIVE COMPILER.
!  05	26-APR-78	K.D. MORSE		INCLUDE CODE TO HANDLE KEYWORDS
!						BEGINNING WITH A PERIOD.
!  06	02-MAY-78	K.D. MORSE		CHANGE RETURNED TOKEN TYPE FROM
!						ALPHA TO ALPHA_STR_TOKEN.
!  07	17-MAY-78	K.D. MORSE		NO CHANGES FOR VERS 21.
!  08	18-MAY-78	K.D. MORSE		NO CHANGES FOR VERS 22-23.
!						DBGLEX.B32 BECAME DBGMAR.B32.
!  09	18-MAY-78	K.D. MORSE		NO CHANGES FOR VERS 24.
!  10	13-JUN-78	K.D. MORSE		ADD FAO COUNT TO SIGNALS.
!  11	27-JUN-78	K.D. MORSE		NO CHANGES FOR VERS 25.
!
!--

!
! TABLE OF CONTENTS:
!
FORWARD ROUTINE
	PAT$MAR_GET_LEX;					! Extracts a MARS lexeme from the input buffer

!
! INCLUDE FILES:
!

LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:VXSMAC.REQ';
REQUIRE 'SRC$:PATPCT.REQ';
REQUIRE 'SRC$:CHRKEY.REQ';
REQUIRE 'SRC$:PATGEN.REQ';
REQUIRE 'SRC$:PATTER.REQ';			
REQUIRE 'SRC$:SCALIT.REQ';
REQUIRE 'LIB$:PATDEF.REQ';				! Defines literals
REQUIRE 'LIB$:PATMSG.REQ';
REQUIRE 'SRC$:SYSSER.REQ';

!
! MACROS:
!

!
! EQUATED SYMBOLS:
!

!
! OWN STORAGE:
!

!
! EXTERNAL REFERENCES:
!
EXTERNAL ROUTINE
	PAT$RADX_CONVRT;					! Converts ASCII strings to binary numbers

EXTERNAL
	PAT$GB_DEF_MOD : VECTOR [, BYTE],			! Mode structure
	PAT$GB_MOD_PTR : REF VECTOR [, BYTE];			! Holds current radix

GLOBAL ROUTINE PAT$MAR_GET_LEX (input_stg_desc, lexeme_stg_desc) =	! gets a lexeme from input line

!++
! Functional description:
!
!	Using the character pointer for the input line, extracts a lexeme
!	from the input line. A lexeme is defined as an operator, an
!	alphanumeric string, a numeric string, or an
!	illegal string. Blanks and comments are absorbed.
!
!	The lexeme is returned in the lexeme buffer in the
!	same form as in the input string, except for numeric
!	strings, in which case the string is converted to a
!	binary number and that is returned in the lexeme buffer.
!	A token equivalent of the lexeme is the value of the
!	routine.
!
! Calling Sequence:
!
!	CALL get_MAR_lexeme (input_stg_desc.rt.dd, lexeme_stg_desc.rt.dv)
!
! Formal parameters:
!
!	input_stg_desc	- string descriptor to the input buffer.
!	lexeme_stg_desc	- varying string descriptor to the lexeme buffer
!
! Implicit inputs:
!
!	The character mapping table, char_type_table, that maps each
!	ASCII character onto a dense list of equivalents.
!	The token_table, that maps operators onto their token equivalents.
!
! Outputs:
!
!	input_stg_desc	- the field dsc$a_pointer is updated to point to
!			  the next byte to be read in the input stream.
!			  This byte is the delimiter of the lexeme found.
!			  The field dsc$w_length contains the length of
!			  the yet unread input line.
!	lexeme_stg_desc	- the field dsc$w_length holds the actual length
!			  in bytes of the lexeme found. The lexeme buffer
!			  addressed by the field dsc$a_pointer holds the
!			  lexeme string or value.
!
! Implicit outputs:
!
!	The ASCII representation of the lexeme is written into the
!	string addressed by the dsc$a_pointer field of lexeme_stg_desc.
!
! Routine value:
!
!	the type of lexeme found, namely number, alpha string,
!	operator, keyword token, illegal.
!
! Side effects:
!
!	none
!--

BEGIN

LITERAL
	table_offset	= 9,
	operator_max	= 28;

BIND
	token_table = UPLIT BYTE (
				op_paren_token,
				cl_paren_token,
				plus_token,
				minus_token,
				slash_token,
				colon_token,
				semi_colo_token,
				quote_token,
				up_arrow_token,
				backslash_token,
				at_sign_token,
				period_token,
				asterisk_token,
				langle_token,
				rangle_token,
				comma_token,
				equals_token,
				lsquare_token,
				rsquare_token,
				hash_token
						) : VECTOR [, BYTE];

LITERAL
	max_state_index	= 4,					! index ranges from 0 to 4
	invalid_state	= 0,					! invalid character seen
	alpha_state	= 1,					! alphabetic string expected
	numeric_state	= 2,					! numeric string expected
	eol_token_state	= 3,					! logical end of line or error seen
	radix_state	= 4,					! radix setting expected
	unspec_state	= 5;					! unspecified state, probably special character operator

BIND
	lex_type_tbl	= UPLIT (
				mask (illegal),
				mask (alpha, alpha_low, alpha_and_hex, alphalo_and_hex, period),
				mask (numeric),
				mask (ind_comment, end_of_line),
				mask (up_arrow)
							) : VECTOR;

BIND
	lex_state_tbl	= UPLIT BYTE (
					invalid_state,
					alpha_state,
					numeric_state,
					eol_token_state,
					radix_state
							) : VECTOR [, BYTE];

LITERAL
	radix_max	= 3;					! maximum number of MARS radices

BIND
	radix_equiv_tbl = UPLIT BYTE (
					'B', binary_radix,
					'O', octal_radix,
					'D', decimal_radix,
					'X', hex_radix
							) : BLOCK [, WORD];

MACRO
	radix_char	= 0, 8, 0%,				! radix ASCII character
	radix_equiv	= 8, 8, 0%;				! radix equivalent

MAP
	input_stg_desc	: REF BLOCK [, BYTE],			! input string descriptor
	lexeme_stg_desc	: REF BLOCK [, BYTE];			! lexeme string descriptor

LOCAL
	input_ptr,						! character pointer for input
	lexeme_ptr,						! character pointer for lexeme
	previous_radix,						! current local radix
	state_index,						! index into lex_state_tbl
	state,							! current state of lexical processor
	char,							! holds a single character
	count;							! counts characters used

LABEL
	alpha_block,						! label for alpha case in the select
	radix_block;						! label for up arrow case in the select

!++
! See whether there is any input line left. If not, signal internal error.
!--
IF .input_stg_desc [dsc$w_length] LSS 0
THEN SIGNAL (PAT$_PARSEERR);

!++
! Make the string pointers into formal BLISS character pointers.
!--
input_ptr = ch$ptr (.input_stg_desc [dsc$a_pointer]);
lexeme_ptr = ch$ptr (.lexeme_stg_desc [dsc$a_pointer]);

!++
! Save the radix in case it changes temporarily.
!--
previous_radix = .PAT$gb_mod_ptr [mode_radix];
count = 0;
REPEAT								! skip leading blanks
	BEGIN
	char = ch$rchar (.input_ptr);
	IF .char_type_table [.char] NEQ blanks
	THEN
		BEGIN
		input_stg_desc [dsc$w_length] = .input_stg_desc [dsc$w_length] - .count;
		EXITLOOP
		END
	ELSE
		BEGIN
		input_ptr = ch$plus (.input_ptr, 1);
		count = .count + 1;
		END;
	END;

!++
! Convert the mapping of the first significant character into a lexical state.
! This state drives the later CASE processing.
!--
state_index = 0;
REPEAT
	BEGIN
	IF .lex_type_tbl [.state_index] ^ .char_type_table [.char] LSS 0
	THEN
		BEGIN
		state = .lex_state_tbl [.state_index];
		EXITLOOP
		END
	ELSE
		BEGIN
		state_index = .state_index + 1;
		IF .state_index GTR max_state_index
		THEN
			BEGIN
			state = unspec_state;
			EXITLOOP
			END;
		END;
	END;

REPEAT CASE .state FROM 0 to max_state_index + 1 OF		! analyze current state
	SET

	[invalid_state]:					! if illegal, just signal
		SIGNAL (PAT$_INVCHAR);

	[alpha_state]:						! alphanumeric string
alpha_block:
		BEGIN
		!++
		! This is an alphanumeric string.  If the
		! character is a period, see whether the next character is
		! an alphabetic. If it is, this must be a logical operator
		! keyword, so allow the leading dot.  Otherwise, it is an error.
		!--
		LOCAL
			period_present;

		count = 0;
		IF .char EQL asc_period
		THEN
			BEGIN

			LOCAL
				new_char;

			new_char = ch$rchar (ch$plus (.input_ptr, 1));
			IF NOT (oneof (.char_type_table [.new_char], alpha, alpha_low,
					alpha_and_hex, alphalo_and_hex))
			THEN
				BEGIN
!				IF .char_type_table [.new_char] EQL numeric
!				THEN state = numeric_state
!				ELSE state = unspec_state;
				STATE = UNSPEC_STATE;		! DON'T ACCEPT NUMBERS WITH DECIMAL POINTS
				LEAVE alpha_block;
				END
			ELSE period_present = TRUE;
			END
		ELSE period_present = FALSE;

		!++
		! Now read the input buffer until a non-alpha and non-numeric
		! character is encountered. Store each character found in the
		! buffer for the lexeme unless the length of that buffer is
		! expended.
		!--
		DO
			BEGIN
			IF (oneof (.char_type_table [.char], alpha_low, alphalo_and_hex))
			THEN char = .char - upper_case_dif;
			count = .count + 1;
			IF .count LEQ sym_max_length
			THEN ch$wchar_a (.char, lexeme_ptr);
			char = ch$a_rchar (input_ptr);
			END
		WHILE
			(oneof (.char_type_table [.char], alpha, alpha_low, numeric,
					alpha_and_hex, alphalo_and_hex, period));

		!++
		! Now see whether the next character is a period
		! AND the string started with a period. In this case, store the
		! ending period also.
		!--
!		IF .char EQL asc_period AND .period_present
!		THEN
!			BEGIN
!			count = .count + 1;
!			IF .count LEQ sym_max_length
!			THEN ch$wchar (.char, .lexeme_ptr);
!			input_ptr = ch$plus (.input_ptr, 1);
!			END;

		!++
		! Return the alpha_str_token lexeme.
		!--
		IF .count GTR sym_max_length
		THEN
			BEGIN
			SIGNAL (PAT$_STGTRUNC);
			lexeme_stg_desc [dsc$w_length] = sym_max_length;
			END
		ELSE lexeme_stg_desc [dsc$w_length] = .count;
		input_stg_desc [dsc$a_pointer] = .input_ptr;
		input_stg_desc [dsc$w_length] = .input_stg_desc [dsc$w_length] - .count;
		RETURN alpha_str_token
		END;

	[numeric_state]:					! numeric string
		BEGIN
		!++
		! Now read the input buffer until a non-numeric character is
		! encountered. Ignore all leading zeroes unless a decimal point
		! was present.  Store each character found in the buffer for
		! the lexeme unless the length of that buffer is expended.
		!--
		count = 0;
		WHILE
			.char EQL '0'
		DO
			BEGIN
			count = .count + 1;
			char = ch$a_rchar (input_ptr);
			END;

		!++
		! If the entire number was zero, put a single
		! zero in the lexeme buffer and return.
		!--
		input_stg_desc [dsc$w_length] = .input_stg_desc [dsc$w_length] - .count;
		count = 0;
		IF .char_type_table [.char] NEQ numeric
			AND NOT (oneof (.char_type_table [.char], alpha_and_hex, alphalo_and_hex))
		THEN
			BEGIN
			ch$wchar (0, .lexeme_ptr);
			lexeme_stg_desc [dsc$w_length] = 1;
			input_stg_desc [dsc$a_pointer] = .input_ptr;
			RETURN digit_str_token
			END;

		!++
		! This is the normal store and pick up next numeric character.
		!--
		DO
			BEGIN
			IF .char_type_table [.char] EQL alphalo_and_hex
			THEN char = .char - upper_case_dif;
			count = .count + 1;
			IF .count GTR num_max_length
			THEN
				BEGIN
				ch$move (num_max_length - 1,
					ch$plus (ch$ptr (.lexeme_stg_desc [dsc$a_pointer]), 1),
					ch$ptr (.lexeme_stg_desc [dsc$a_pointer]));
				ch$wchar (.char, .lexeme_ptr-1);
				END
			ELSE ch$wchar_a (.char, lexeme_ptr);
			char = ch$a_rchar (input_ptr);
			END
		WHILE
			(oneof (.char_type_table [.char], numeric,
				alpha_and_hex, alphalo_and_hex));


		!++
		! Convert the number, restore the old radix,
		! and return the numeric lexeme.
		!--
		PAT$radx_convrt (.lexeme_stg_desc [dsc$a_pointer],
			.lexeme_stg_desc [dsc$a_pointer]);
		PAT$gb_mod_ptr [mode_radix] = .previous_radix;
		lexeme_stg_desc [dsc$w_length] = 4;
		input_stg_desc [dsc$a_pointer] = .input_ptr;
		input_stg_desc [dsc$w_length] = .input_stg_desc [dsc$w_length] - .count;
		RETURN digit_str_token
	END;

	[eol_token_state]:					! logical end of line
		BEGIN
		!++
		! The length of the input line should be set to zero here.
		! Reduce it one so that it is less than zero. This will cause
		! an error if this same input line ever comes back to the lex
		! routine.
		!--
		lexeme_stg_desc [dsc$w_length] = 0;
		input_stg_desc [dsc$a_pointer] = ch$plus (.input_ptr, 1);
		input_stg_desc [dsc$w_length] = .input_stg_desc [dsc$w_length] - 1;
		RETURN eol_token
		END;

	[radix_state]:						! up arrow, quote, percent sign

radix_block:	BEGIN						! MARS handling

		!++
		! An up arrow can occur as a standalone character meaning
		! previous location, or as a special character that indicates
		! radix. In the latter case, the up arrow is followed by one of
		! the letters 'B', 'O', or 'X', and then a numeric string
		! (without an intervening space).  First check for the letter.
		!--
		LOCAL
			new_char;

		char = ch$rchar (ch$plus (.input_ptr, 1));
		IF (oneof (.char_type_table [.char], alpha_low, alphalo_and_hex))
		THEN char = .char - upper_case_dif;
		IF NOT ((.char EQL 'B') OR (.char EQL 'O') OR (.char EQL 'D') OR (.char EQL 'X'))
		THEN
			BEGIN
			!++
			! This is the single character meaning previous location.
			! Just update the string descriptors, write the up arrow
			! into the lexeme buffer, and return.
			!--
			char = asc_up_arrow;
			state = unspec_state;
			LEAVE radix_block;
			END;

		!++
		! This looks like a radix indicator. If a number follows, it
		! must be. In this case, set the current mode according to the
		! radix encoding. Then leave this code block. The effect is that
		! on the next loop through the CASE expression, control will
		! stop at the numeric processing block.
		!--
		new_char = ch$rchar (ch$plus (.input_ptr, 2));
		IF (oneof (.char_type_table [.new_char], numeric,
				alpha_and_hex, alphalo_and_hex))
		THEN
			BEGIN
			input_ptr = ch$plus (.input_ptr, 2);
			INCR index FROM 0 TO radix_max DO
				IF .char EQL .radix_equiv_tbl [.index, radix_char]
				THEN
					BEGIN
					PAT$gb_mod_ptr [mode_radix] =
						.radix_equiv_tbl [.index, radix_equiv];
					EXITLOOP
					END;
			char = .new_char;
			input_stg_desc [dsc$w_length] = .input_stg_desc [dsc$w_length] - 2;
			state = numeric_state;
			LEAVE radix_block;
			END
		ELSE
			BEGIN
			!++
			! This is not a radix indicator after all. Just return
			! the up arrow.
			!--
			char = asc_up_arrow;
			state = unspec_state;
			LEAVE radix_block;
			END;
		END;

	[unspec_state]:						! special character like operator or illegal
		BEGIN
		!++
		! Most likely, this is a single character operator. Write its
		! ASCII value into the lexeme buffer, and return its equivalent
		! token.
		!--
		IF .char_type_table [.char] GEQ table_offset
			AND .char_type_table [.char] LEQ operator_max
		THEN
			BEGIN

			LOCAL
				index;

			index = table_offset;
			REPEAT
				BEGIN
				IF .char_type_table [.char] EQL .index
				THEN
					BEGIN
					ch$wchar (.char, .lexeme_ptr);
					lexeme_stg_desc [dsc$w_length] = 1;
					input_stg_desc [dsc$a_pointer] = ch$plus (.input_ptr, 1);
					input_stg_desc [dsc$w_length] = .input_stg_desc [dsc$w_length] - 1;
					RETURN .token_table [.index - table_offset]
					END
				ELSE index = .index + 1;
				IF .index GTR operator_max
				THEN EXITLOOP;
				END;
			END;

		!++
		! This doesn't seem to be anything about which we know.
		! SIGNAL invalid character.
		!--
		SIGNAL (PAT$_INVCHAR);
		END;

	TES;

END;								! end of get_mar_lexeme

END								! End of module
ELUDOM
