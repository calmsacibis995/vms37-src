MODULE PATCMD (
		%IF %VARIANT EQL 1
		%THEN
			ADDRESSING_MODE (EXTERNAL = LONG_RELATIVE, NONEXTERNAL = LONG_RELATIVE),
		%FI
		IDENT = 'V03-000') =
BEGIN

!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
! FACILITY:	PATCH
!
!++
! FUNCTIONAL DESCRIPTION:
!
!	PATCH COMMAND LINE HANDLER
!
! Version:	V02-011
!
! History:
!	Author:
!		Carol Peters, 05 Oct 1976: DBGEXC.B32 Version 01
!
!
! MODIFIED BY:
!
!	V02-011	MTR0001		Mike Rhodes		20-AUG-1981
!		Modify module PAT$PROMPT_READ\GET_LINE: write comments
!		to the Journal file instead of trashing them.
!
!	V02-010	PCG0001		Peter George		02-FEB-1981
!		Add require statement for LIB$:PATDEF.REQ
!
! MODIFICATIONS:
!
!  NO	DATE		PROGRAMMER		PURPOSE
!  --	----		----------		-------
!
!  00	13-OCT-77	K.D. MORSE		CONVERT FOR PATCH
!  01	15-DEC-77	K.D. MORSE		ADD JOURNAL OUTPUT,
!						CHANGE PROMPT
!  02	3-JAN-78	K.D. MORSE		ADD CHECK FOR EOF.
!  03	5-JAN-78	K.D. MORSE		TURN OFF TYPE AHEAD AFTER
!						FIRST READ.
!  04	16-JAN-78	K.D. MORSE		MAKE PAT$PROMPT_READ TO
!						HANDLE COMMAND PROMPTING.
!  05	23-JAN-78	K.D. MORSE		CHANGE PAT$CP_INP_STR TO
!						PAT$CP_INP_DSCS, A BLOCK OF INPUT
!						LINE DESCRIPTORS TO HANDLE
!						PROMPTING AND MULTIPLE INPUT LINES.
!  06	21-MAR-78	K.D. MORSE		ADD CHECK FOR <CR><LF> AND
!						NO PATCH COMMAND.
!  07	25-APR-78	K.D. MORSE		CONVERT TO NATIVE COMPILER.
!  08	13-JUN-78	K.D. MORSE		ADD FAO COUNT TO SIGNALS.
!  09	19-JUN-78	K.D. MORSE		ADD CHECK TO IGNORE COMMENTS.
!
!--

FORWARD ROUTINE
	PAT$COM_PROC : NOVALUE,					! Accepts a command
	PAT$PROMPT_READ;					! Prompts and reads a command

LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:VXSMAC.REQ';
REQUIRE 'LIB$:PATDEF.REQ';				! Defines literals
REQUIRE 'LIB$:PATMSG.REQ';
REQUIRE 'SRC$:PATPCT.REQ';
REQUIRE 'SRC$:PATGEN.REQ';
REQUIRE 'SRC$:PATTER.REQ';
REQUIRE 'SRC$:PATTOK.REQ';
REQUIRE 'SRC$:SYSSER.REQ';

EXTERNAL ROUTINE
	PAT$ERR_HANDLER,					! Exception handler
	PAT$FREERELEASE,					! Releases free storage
	PAT$FREEZ,						! Allocates free storage
	PAT$PARS_A_LINE,					! Parses a line of input text
	PAT$WRITEFILE;						! Writes the journal file


EXTERNAL
	PAT$CP_INP_DSCS : REF VECTOR [,LONG],			! Points to vector of input string descriptors
	PAT$GB_TAKE_CMD,					! Indicator to accept more commands
	PAT$GB_INPNAME,						! Input file name
	PAT$GL_ERRCODE,						! Global error code
	PAT$GL_INPRAB: BLOCK [, BYTE],				! RAB for 'SYS$INPUT'
	PAT$GL_JNLRAB: BLOCK [, BYTE];				! RAB for journal file

EXTERNAL LITERAL
	PAT$K_INPNAMLNG;					! Input file name length

LITERAL
	PATCH_PMT = 90;						! Patch command prompt offset

GLOBAL ROUTINE PAT$COM_PROC : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Accepts a single command line from the user at patch command level.
!	A command is read from SYS$INPUT.
!
! CALLING SEQUENCE:
!
!	PAT$COM_PROC 
!
! INPUTS:
!
!	none
!
! IMPLICIT INPUTS:
!
!	none
!
! OUTPUTS:
!
!	none
!
! IMPLICIT OUTPUTS:
!
!	none
!
! ROUTINE VALUE:
!
!	NOVALUE
!
! SIDE EFFECTS:
!
!	The parser is called with the contents of the input buffer.
!
!--

BEGIN

LOCAL
	STG_DESC: BLOCK [8, BYTE];				! String descriptor for parser

ENABLE PAT$ERR_HANDLER;

!++
! Request patch command.
!--
STG_DESC[DSC$W_LENGTH] = 0;
WHILE (.STG_DESC[DSC$W_LENGTH] EQL 0)
DO
	IF NOT PAT$PROMPT_READ (PATCH_PMT, STG_DESC)
	THEN
		RETURN;

!++
! Parse the command and execute it.
!--
PAT$PARS_A_LINE (STG_DESC);
RETURN;
END;

GLOBAL ROUTINE PAT$PROMPT_READ(PROMPT_CODE, STG_DESC) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine requests a line of input from SYS$INPUT.  The prompt
!	string is based on the prompt code passed as input.  The command
!	line is read.
!
!	If the command read from the device SYS$INPUT is interpreted by
!	RMS as EOF, or any other nonsuccessful return from RMS is seen,
!	THEN cancel the command taking flag, and return.
!
!
! CALLING SEQUENCE:
!
!	PAT$PROMPT_READ(PROMPT_CODE, STG_DESC) 
!
! INPUTS:
!
!	PROMPT_CODE - Code for which prompt to display
!	STG_DESC - Input line string descriptor
!
! IMPLICIT INPUTS:
!
!	SYS$INPUT is already opened as the input channel.
!
! OUTPUTS:
!
!	The input line string descriptor is set.
!
! IMPLICIT OUTPUTS:
!
!	The new input line is read.
!
! ROUTINE VALUE:
!
!	Status code from read.
!
! SIDE EFFECTS:
!
!	The command line is written to the journal file.
!
!--

BEGIN

LITERAL
	NUM_OF_DSCS = 5,					! Number of default input line descriptors
	MORE_DSCS = 2,						! Size to increment input line table
	RIGHT_ANGLE = %X'3E',
	SPACES = %X'20',
	COMMENT_CHAR = %X'21',					! Comment delimiter
	NULL_BYTE_LOC	= 1,
	MAX_PMT_SIZ = 8,
	CONTINUE_PMT = 7;

MACRO
	PROMPT_MSG(PROMPT_STR) = UPLIT BYTE (%ASCII %STRING
				 (%CHAR (CARRIAGE_RET),%CHAR(LINEFEED),
				   PROMPT_STR,%CHAR(RIGHT_ANGLE)))%,
	PROMPT_SIZ(PROMPT_STR) = %CHARCOUNT (%ASCII %STRING
				 (%CHAR (CARRIAGE_RET),%CHAR(LINEFEED),
				  PROMPT_STR,%CHAR(RIGHT_ANGLE)))%;

OWN
	PROMPT_MSG_PTR : VECTOR[8,LONG] INITIAL (		! Prompt texts
				PROMPT_MSG('PATCH'),
				PROMPT_MSG('OLD'),
				PROMPT_MSG('NEW'),
				PROMPT_MSG('LOC'),
				PROMPT_MSG('NAM'),
				PROMPT_MSG('EXP'),
				PROMPT_MSG('ECO'),
				PROMPT_MSG('_')),
	PROMPT_MSG_SIZ : VECTOR[8,BYTE] INITIAL ( BYTE(		! Prompt text lengths
				PROMPT_SIZ('PATCH'),
				PROMPT_SIZ('OLD'),
				PROMPT_SIZ('NEW'),
				PROMPT_SIZ('LOC'),
				PROMPT_SIZ('NAM'),
				PROMPT_SIZ('EXP'),
				PROMPT_SIZ('ECO'),
				PROMPT_SIZ('_')));

LOCAL
	PMT_OFFSET,						! Offset into prompt tables
	PROMPT_BUFFER: VECTOR [MAX_PMT_SIZ-2+NO_OF_INP_CHARS+A_LONGWORD, BYTE],
	INPUT_BUFFER: REF VECTOR[,BYTE],
	PREV_COUNT,						! Current character count
	OLD_POINTER,						! Pointer to previous buffer
	LOOP,							! Loop counter
	NEW_DSCS,						! Pointer to new input line descriptor table
	NEW_POINTER : REF VECTOR [, BYTE];			! Pointer to current buffer

LABEL
	GET_LINE,						! Block to get a command line

	FIND_COMMENT;						! Block to find comment lines

MAP
	STG_DESC: REF BLOCK [8, BYTE];				! String descriptor for parser

!++
! Compute the offset into the prompt tables for the prompt code.
! Set the INPUT_BUFFER to be the local input buffer.
!--
PMT_OFFSET = .PROMPT_CODE - MIN_PMT_CODE;
INPUT_BUFFER = CH$PTR(PROMPT_BUFFER[MAX_PMT_SIZ-2], 0);

!++
! Collect an entire command line.  Enter a loop that collects multiple lines of
! input, ceasing only when a line ends with other than a hyphen ("-"), which
! is the line continuation character. Buffer the possibly multiple lines into
! free storage.
!--
PREV_COUNT = 0;
OLD_POINTER = 0;
PAT$GL_INPRAB [RAB$L_PBF] = CH$PTR(.PROMPT_MSG_PTR[.PMT_OFFSET],0);
PAT$GL_INPRAB [RAB$B_PSZ] = .PROMPT_MSG_SIZ[.PMT_OFFSET];
PAT$GL_INPRAB [RAB$L_UBF] = CH$PTR(.INPUT_BUFFER, 0);

!++
! Now get a command line.  If the first character is a comment delimiter
! then get another command line.
!--
GET_LINE:
BEGIN
REPEAT
	BEGIN
	PAT$GL_ERRCODE = $GET (RAB = PAT$GL_INPRAB);
	IF NOT .PAT$GL_ERRCODE
	THEN
		BEGIN
		!++
		! The $GET failed. Set status so that PATCH returns to CLI.
		!--
		IF (.PAT$GL_ERRCODE EQL RMS$_EOF)
		THEN
			BEGIN
			PAT$GB_TAKE_CMD = FALSE;
			RETURN(.PAT$GL_ERRCODE);
			END
		ELSE
			SIGNAL (PAT$_GETERR,3,.PAT$GL_ERRCODE,PAT$K_INPNAMLNG,PAT$GB_INPNAME);
		END
	ELSE
	    FIND_COMMENT:
		BEGIN
		LOCAL
			MSG_SIZ;
		MSG_SIZ=.PAT$GL_INPRAB[RAB$W_RSZ];
		WHILE (.MSG_SIZ GTR 0)
		DO
			BEGIN
			IF (.INPUT_BUFFER[.PAT$GL_INPRAB[RAB$W_RSZ]-.MSG_SIZ] EQL %X'20')
			    OR (.INPUT_BUFFER[.PAT$GL_INPRAB[RAB$W_RSZ]-.MSG_SIZ] EQL %X'09')
			THEN
				MSG_SIZ = .MSG_SIZ - 1
			ELSE
				IF (.INPUT_BUFFER[.PAT$GL_INPRAB[RAB$W_RSZ]-.MSG_SIZ] EQL COMMENT_CHAR)
				THEN
					BEGIN
					PAT$WRITEFILE  (.PAT$GL_INPRAB[RAB$W_RSZ],
							CH$PTR(.INPUT_BUFFER, 0),
							PAT$GL_JNLRAB);
					LEAVE FIND_COMMENT;
					END
				ELSE
					LEAVE GET_LINE;
			END;
		END;
	END;
END;

!++
! Insert the prompt (without the <CR><LF>) at the start of the input buffer and
! write the prompt plus the command to the journal file.
!--
CH$COPY(.PROMPT_MSG_SIZ[.PMT_OFFSET]-2, CH$PTR(.PROMPT_MSG_PTR[.PMT_OFFSET],2),
		SPACES, MAX_PMT_SIZ-2, CH$PTR(PROMPT_BUFFER,0));
PAT$WRITEFILE(.PAT$GL_INPRAB[RAB$W_RSZ]+MAX_PMT_SIZ-2, PROMPT_BUFFER,
		PAT$GL_JNLRAB);

!++
! Now change the prompt to an underscore in case there are continuation lines.
!--
CH$COPY(.PROMPT_MSG_SIZ[CONTINUE_PMT]-2, CH$PTR(.PROMPT_MSG_PTR[CONTINUE_PMT],2),
		SPACES, MAX_PMT_SIZ-2,	CH$PTR(PROMPT_BUFFER,0));
PAT$GL_INPRAB [RAB$V_PTA] = FALSE;
PAT$GL_INPRAB [RAB$L_PBF] = CH$PTR(.PROMPT_MSG_PTR[CONTINUE_PMT],0);
PAT$GL_INPRAB [RAB$B_PSZ] = .PROMPT_MSG_SIZ[CONTINUE_PMT];

!++
! Loop, reading all continuation lines for this command.
!--
REPEAT
	BEGIN

	LOCAL
		CONT_LINE;					! Boolean test for end of line character

	IF (.INPUT_BUFFER [.PAT$GL_INPRAB [RAB$W_RSZ] - 1] EQL '-')
	THEN
		BEGIN
		PAT$GL_INPRAB [RAB$W_RSZ] = .PAT$GL_INPRAB [RAB$W_RSZ] - 1;
		CONT_LINE = TRUE;
		END
	ELSE CONT_LINE = FALSE;

	!++
	! Allocate space for this buffer plus all previous buffers.
	! If the space can be found, write the old and new buffers
	! into the new space.
	!--
	NEW_POINTER = PAT$freez ((.PREV_COUNT + NULL_BYTE_LOC +
		.PAT$GL_INPRAB [RAB$W_RSZ] + 3) / 4);

	IF (.OLD_POINTER NEQ 0)
	THEN
		BEGIN
		CH$MOVE (.PREV_COUNT, .OLD_POINTER, .NEW_POINTER);
		PAT$FREERELEASE (.OLD_POINTER, (.PREV_COUNT + NULL_BYTE_LOC + 3) / 4);
		END;
	CH$MOVE (.PAT$GL_INPRAB [RAB$W_RSZ], CH$PTR(.INPUT_BUFFER,0),
			CH$PLUS (.NEW_POINTER, .PREV_COUNT));
	PREV_COUNT = .PREV_COUNT + .PAT$GL_INPRAB [RAB$W_RSZ];
	NEW_POINTER [.PREV_COUNT] = 0;
	OLD_POINTER = .NEW_POINTER;

	!++
	! See whether this line ends with a continuation character.
	! If so, get another line.
	!--
	IF NOT .CONT_LINE
	THEN EXITLOOP;
	PAT$GL_ERRCODE = $GET (RAB = PAT$GL_INPRAB);
	IF NOT .PAT$GL_ERRCODE
	THEN
		SIGNAL (PAT$_GETERR,3,.PAT$GL_ERRCODE,PAT$K_INPNAMLNG,PAT$GB_INPNAME);
	PAT$WRITEFILE(.PAT$GL_INPRAB[RAB$W_RSZ]+MAX_PMT_SIZ-2, PROMPT_BUFFER,
			PAT$GL_JNLRAB);
	END;

!++
! A complete line has been collected.  Now set up the return input line descriptor.
!--
STG_DESC [dsc$w_length] = .PREV_COUNT;
STG_DESC [dsc$a_pointer] = .NEW_POINTER;

!++
! The input line must be entered in the input descriptor table for deallocation
! when the command is over.  PAT$CP_INP_DSCS is a pointer to a vector of
! longwords.  The first longword is the number of string descriptors in the
! vector.  The remaining space is string descriptors, one for each input line
! used for this command.  Any unused descriptors are filled with zeros.
! PAT$END_OF_LINE in PATACT.B32 will deallocate the input lines.
!--

!++
! First check that there is a descriptor table allocated.
! If not, then allocate one and initialize the count of descriptors.
!--
IF (.PAT$CP_INP_DSCS EQLA 0)
THEN
	BEGIN
	PAT$CP_INP_DSCS = PAT$FREEZ(((A_QUADWORD * NUM_OF_DSCS) + A_LONGWORD +3)/4);
	PAT$CP_INP_DSCS[0] = NUM_OF_DSCS;
	END;

!++
! Now enter a string descriptor for the input line just read.  Use the first
! zero entry in the descriptor table.  If there is none, then a larger table
! must be allocated and the old table deallocated.
!--
INCR LOOP FROM 1 TO .PAT$CP_INP_DSCS[0]*2 BY 2
DO
	IF (.PAT$CP_INP_DSCS[.LOOP] EQL 0)
	THEN
		BEGIN
		PAT$CP_INP_DSCS [.LOOP] = .PREV_COUNT + 1;
		PAT$CP_INP_DSCS [.LOOP + 1] = .NEW_POINTER;
		RETURN(.PAT$GL_ERRCODE);
		END;

!++
! There was not enough room in the descriptor table.  Therefore allocate a
! larger table, copy in the old table, deallocate the old table, and insert
! the new descriptor into the table.
!--
NEW_DSCS = PAT$FREEZ( (((.PAT$CP_INP_DSCS[0] + MORE_DSCS)* A_QUADWORD) + A_LONGWORD
				+3) / 4);
CH$MOVE(((.PAT$CP_INP_DSCS[0] * A_QUADWORD) + A_LONGWORD), CH$PTR(.PAT$CP_INP_DSCS, 0),
	CH$PTR(.NEW_DSCS, 0));
PAT$FREERELEASE(.PAT$CP_INP_DSCS, ((.PAT$CP_INP_DSCS[0] * A_QUADWORD) + A_LONGWORD
			+ 3) / 4);
PAT$CP_INP_DSCS = CH$PTR (.NEW_DSCS, 0);
PAT$CP_INP_DSCS[(.PAT$CP_INP_DSCS[0]*2)+1] = .PREV_COUNT + 1;
PAT$CP_INP_DSCS[(.PAT$CP_INP_DSCS[0]*2)+2] = .NEW_POINTER;
PAT$CP_INP_DSCS[0] = .PAT$CP_INP_DSCS[0] + MORE_DSCS;
RETURN(.PAT$GL_ERRCODE);
END;

END
ELUDOM
