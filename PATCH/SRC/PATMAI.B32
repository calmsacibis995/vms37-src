MODULE PATMAIN ( MAIN = PAT$MAIN,			! DRIVER FOR PATCH
		%IF %VARIANT EQL 1
		%THEN
			ADDRESSING_MODE (EXTERNAL = LONG_RELATIVE, NONEXTERNAL = LONG_RELATIVE),
		%FI
		IDENT = 'V03-001'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  IMAGE FILE PATCH UTILITY, PATCH
!
! ABSTRACT:  THIS ROUTINE DRIVES PATCH.  IT PERFORMS THE COMMAND LINE
!	INTERFACE, THE FILE HANDLING, AND THE COMMAND PROCESSING LOOP.
!
! ENVIRONMENT:
!
! AUTHOR:  K.D. MORSE	, CREATION DATE:  29-SEP-77
!
! MODIFIED BY:
!
!	V03-001	MTR0003		Mike Rhodes		19-Mar-1982
!		Modified routine OPEN_INPUT.  It passed the status value 
!		incorrectly from the RAB instead of the FAB.
!		Fixes QAR 734.
!
!	V03-000	MTR0002		Mike Rhodes		15-Mar-1982
!		Advance PATCH welcome message version number to
!		3-00 and the date to 15-Mar-1982.
!
!	V03-000	MTR0002		Mike Rhodes		15-Mar-1982
!		Advance PATCH welcome message version number to
!		3.00 and the date to 15-Mar-1982.
!	V02-035	MTR0002		Mike Rhodes		01-Oct-1981
!		Change PATCH welcome message version number to
!		2.33 and the date to 01-Oct-1981.
!
!	V02-034	MTR0001		Mike Rhodes		17-Sep-1981
!		Change PATCH welcome message version number to 
!		2.32 and the date to 17-Sep-1981.
!
!	V02-033	KDM0052		Kathleen D. Morse	28-Apr-1981
!		Change PATCH version number to 2.31 and date to 28-Apr-1981.
!
!	V02-032	BLS0043		Benn Schreiber		10-Apr-1981
!		Get input file size from FHC XAB
!
!	V02-031	KDM0045		Kathleen D. Morse	04-Mar-1981
!		Change PATCH version number to 2.30 and date to 04-Mar-1981.
!
!	V02-030	KDM0044		Kathleen D. Morse	04-Mar-1981
!		Fix some comment lines.
!
!	V0229	PCG0001		Peter George		02-FEB-1981
!		Add require statement for LIB$:PATDEF.REQ
!
!
!--

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
	CLIERROR : NOVALUE,					! CALLED FOR ALL CLI ERRORS
	VOLUME_PARSE : NOVALUE,					! VOLUME qualifier action routine
	OPEN_INPUT : NOVALUE,					! OPENS THE INPUT IMAGE FILE
	OPEN_OUTPUT : NOVALUE,					! INITIALIZES FOR FUTURE OUTPUT IMAGE FILE OPEN
	OPEN_JOURNAL : NOVALUE,					! OPENS THE JOURNAL FILE
	PAT$OPEN_COMFIL : NOVALUE;				! OPENS THE COMMAND FILE

!
! INCLUDE FILES:
!

LIBRARY 'SYS$LIBRARY:STARLET.L32';				! SYSTEM STRUCTURE DEFINITIONS
LIBRARY 'SYS$LIBRARY:CLIMAC.L32';				! CLI STRUCTURE ALLOCATION
REQUIRE 'SRC$:PATPCT.REQ';					! DEFINE PSECTS
REQUIRE 'SRC$:PREFIX.REQ';					! UTILITY MACROS
REQUIRE 'SRC$:PATPRE.REQ';					! DEFINES PATCH LITERALS
REQUIRE 'LIB$:PATDEF.REQ';					! Defines literals
REQUIRE 'LIB$:PATMSG.REQ';					! DEFINES PATCH ERROR MESSAGE NUMBERS
REQUIRE 'SRC$:VXSMAC.REQ';					! DEFINE LITERALS
REQUIRE 'SRC$:SYSLIT.REQ';					! DEFINES SYSTEM LITERALS
REQUIRE 'SRC$:SYSSER.REQ';					! DEFINES FAL OUTPUT MACROS

!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
	PAT$FIND_DST,						! INITIALIZES SYMBOL TABLES
	pat$com_proc,						! PATCH COMMAND PROCESSOR
	PAT$FAO_PUT,						! FORMATS OUTPUT MESSAGE
	PAT$INIT,						! OPEN COMMUNICATION CHANNELS
	PAT$GET_IHD,						! PROCESS IMAGE HEADER INFORMATION
	PAT$CLOSEFILES,						! CLOSE ALL FILES
	PAT$WRITEFILE,						! OUTPUTS MESSAGE TO A FILE
	PAT$ERR_HANDLER;					! ERROR MESSAGE HANDLER

EXTERNAL
	PAT$GB_EXEC_CMD : BYTE,					! INDICATOR WHETHER OR NOT TO EXECUTE PATCH COMMANDS
	PAT$CP_OUT_STR : REF VECTOR[,BYTE],			! POINTER TO OUTPUT BUFFER
	PAT$GL_BUF_SIZ,						! SIZE OF MESSAGE IN OUTPUT BUFFER
	PAT$GB_TAKE_CMD: BYTE,					! INDICATOR TO PROCESS COMMANDS
	PAT$GL_ERRCODE,						! ERROR CODE
	PAT$GL_HEAD_LST,					! HEAD OF PATCH COMMAND ARGUMENT LIST
	PAT$GL_IMGBLKS,						! NUMBER OF BLOCKS IN NEW IMAGE
	PAT$GW_IMGVOL : WORD,					! Relative Volume Number for new image
	PAT$GL_ECO_UPD,						! ECO LEVELS TO UPDATE
	PAT$GL_FLAGS,						! CLI PARSE FLAGS
	PAT$GL_OLDXABFH : BLOCK[,BYTE],				! INPUT IMAGE FILE FILE HEADER CHARS. XAB
	PAT$GL_OLDFAB : BLOCK[,BYTE],				! INPUT IMAGE FILE FAB
	PAT$GL_OLDRAB : BLOCK[,BYTE],				! INPUT IMAGE FILE RAB
	PAT$GL_OLDNBK : BLOCK[,BYTE],				! INPUT IMAGE FILE NAME BLOCK
	PAT$GL_NEWFAB : BLOCK[,BYTE],				! OUTPUT IMAGE FILE FAB
	PAT$GL_NEWRAB : BLOCK[,BYTE],				! OUTPUT IMAGE FILE RAB
	PAT$GL_NEWNBK : BLOCK[,BYTE],				! OUTPUT IMAGE FILE NAME BLOCK
	PAT$GL_NEWXABALL : BLOCK[,BYTE],			! Output image ALLocation XAB
	PAT$GL_JNLFAB : BLOCK[,BYTE],				! JOURNAL FILE FAB
	PAT$GL_JNLRAB : BLOCK[,BYTE],				! JOURNAL FILE RAB
	PAT$GL_JNLNBK : BLOCK[,BYTE],				! JOURNAL FILE NAME BLOCK
	PAT$GL_COMFAB : BLOCK[,BYTE],				! OUTPUT COMMAND FILE FAB
	PAT$GL_COMRAB : BLOCK[,BYTE],				! OUTPUT COMMAND FILE RAB
	PAT$GL_COMNBK : BLOCK[,BYTE],				! OUTPUT COMMAND FILE NAME BLOCK
	PAT$GB_OLDNAME,						! OLD IMAGE FILE NAME
	PAT$GB_NEWNAME,						! NEW IMAGE FILE NAME
	PAT$GB_JNLNAME,						! JOURNAL FILE NAME
	PAT$GB_COMNAME;						! COMMAND FILE NAME

!
! MACROS:
!

!
! EQUATED SYMBOLS:
!

$CLIQUALCODES(PATCH,						! FOR PATCH
			UPDATE,					! UPDATE SPECIFIC ECO LEVELS
			VOLUME);				! Specifiy RVN of output image

!
! OWN STORAGE:
!

OWN
	CLIWRK : BLOCK[CLI$C_WORKAREA, BYTE],			! CLI work area

	INITPRS_DESC : $CLIREQDESC(				! INITIAL PARSE OF COMMAND LINE
				RQTYPE=INITPRS,			! TYPE OF REQUEST
				ERRACT=CLIERROR-INITPRS_DESC),	! ERROR ACTION ROUTINE

	ENDPRS_DESC : $CLIREQDESC(				! END PARSE OF COMMAND LINE
				RQTYPE=ENDPRM1,			! TYPE OF REQUEST
				ERRACT=CLIERROR-ENDPRS_DESC),	! ERROR ACTION ROUTINE

	UPDATE_VAL_DESC: $CLIREQDESC(				! UPDATE VALUES REQUEST DESCRIPTOR
				RQTYPE=NUMERVAL,		! CONVERT VALUE TO NUMERIC
				ERRACT=CLIERROR-UPDATE_VAL_DESC), ! ERROR ROUTINE

	VOLUME_VAL_DESC: $CLIREQDESC(				! Volume values
				RQTYPE=NUMERVAL,		! Convert value to numeric
				ERRACT=CLIERROR-VOLUME_VAL_DESC), ! Error routine

	UPDATE_DESC : $CLIQUALDESC(				! UPDATE QUALIFIER DESCRIPTOR
				QDCODE=UPDATE,			! QUALIFIER CODE
				SETLST=PAT$S_UPDATE),		! UPDATE QUALIFIER BIT
	INPUT_QUAL_END : $CLIQUALEND,				! END OF INPUT QUALIFIERS

	VOLUME_DESC : $CLIQUALDESC(				! Volume qualifier descriptor
				QDCODE=VOLUME,			! Qualifier code
				TRUACT=VOLUME_PARSE-VOLUME_DESC,! Action routine to get Rel. Vol. No.
				SETLST=PAT$S_VOLUME),		! Volume qualifier bit
	OUTPUT_QUAL_END : $CLIQUALEND,				! End of output qualifiers

	INPUT_DESC : $CLIREQDESC(				! INPUT FILE REQUEST DESCRIPTOR
				RQTYPE=INPUT1,			! PRIMARY INPUT FILE
				RQFLGS=PARMREQ,			! REQUIRED PARAMETER
				ERRACT=CLIERROR-INPUT_DESC,	! ERROR ROUTINE
				PRSACT=OPEN_INPUT-INPUT_DESC,	! OPEN INPUT FILE
				QUALST=UPDATE_DESC-INPUT_DESC,	! INPUT FILE QUALIFIER LIST
				BITNUM=PAT$S_INPUT),		! INPUT FILE BIT

	OUTPUT_DESC : $CLIREQDESC(				! OUTPUT FILE REQUEST DESCRIPTOR
				RQTYPE=OUTPUT1,			! PRIMARY OUTPUT FILE
				ERRACT=CLIERROR-OUTPUT_DESC,	! ERROR ROUTINE
				PRSACT=OPEN_OUTPUT-OUTPUT_DESC,	! OPEN OUTPUT FILE
				QUALST=VOLUME_DESC-OUTPUT_DESC,	! Output file qulifier list
				BITNUM=PAT$S_OUTPUT),		! OUTPUT FILE BIT

	JOURNAL_DESC : $CLIREQDESC(				! JOURNAL FILE REQUEST DESCRIPTOR
				RQTYPE=OUTPUT2,			! SECONDARY OUTPUT FILE
				ERRACT=CLIERROR-JOURNAL_DESC,	! ERROR ROUTINE
				PRSACT=OPEN_JOURNAL-JOURNAL_DESC, ! OPEN JOURNAL FILE
				BITNUM=PAT$S_JOURNAL),		! JOURNAL FILE BIT

!	COMMAND_DESC : $CLIREQDESC(				! COMMAND FILE REQUEST DESCRIPTOR
!				RQTYPE=OUTPUT3,			! TERTIARY OUTPUT FILE
!				ERRACT=CLIERROR-COMMAND_DESC,	! ERROR ROUTINE
!				PRSACT=PAT$OPEN_COMFIL-COMMAND_DESC, ! OPEN COMMAND FILE
!				BITNUM=PAT$S_COMMAND),		! COMMAND FILE BIT

	COMLINE_DESC : $CLIREQDESC(				! COMMAND LINE REQUEST DESCRIPTOR
				RQTYPE=GETCMD,			! COMMAND LINE REQUEST
				ERRACT=CLIERROR-COMLINE_DESC);	! ERROR ACTION ROUTINE

!++
! FAO control string for output of command line to command file.
!--
BIND
	COM_STR		= UPLIT ( %ASCIC 'COMMAND FILE:			"!AD"'),
	COM_LINE_STR	= UPLIT (%ASCIC '!AS');

GLOBAL ROUTINE PAT$MAIN (DMY1,RECALLCLI,DMY2,DMY3) :NOVALUE =	! MAIN PATCH DRIVER

!++
! FUNCTIONAL DESCRIPTION:
!
! THIS MODULE IS THE DRIVER FOR THE IMAGE FILE PATCH UTILTIY.
! IT PERFORMS THE FOLLOWING:
!
!	1.  REPEATEDLY CALLS BACK THE CLI REQUESTING THE PIECES OF THE
!	    COMMAND LINE
!	2.  OPENS THE FILES FOR INPUT AND OUTPUT
!	3.  CALLS THE ROUTINE TO MAP THE INPUT IMAGE FILE
!	4.  LOOPS, CALLING APPROPRIATE ROUTINES TO HANDLE PATCH COMMANDS
!	5.  CLOSES ALL FILES
!
!
! FORMAL PARAMETERS:
!
!	DMY1 = DUMMY ARGUMENT
!	RECALLCLI = THE ADDRESS OF THE CALL BACK ROUTINE IN THE CLI
!	DMY2 = DUMMY ARGUMENT
!	DMY3 = DUMMY ARGUMENT
!
! IMPLICIT INPUTS:
!
!	CLI HAS THE COMMAND LINE.
!	THE FABS AND RABS ARE INITIALIZED, SAVE FOR FILE NAMES.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:	NONE
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	THE INPUT AND OUTPUT FILES ARE OPENED.  THE COMMAND LINE IS PROCESSED.
!	THE PATCH COMMANDS ARE EXECUTED.
!
!--

BEGIN
BIND
	NEW_IMG_STR	= UPLIT ( %ASCIC 'IMAGE FILE BEING PATCHED:	"!AD"'),
	JNL_STR		= UPLIT ( %ASCIC 'JOURNAL FILE:			"!AD"'),
	UPDATE_STR	= UPLIT ( %ASCIC 'UPDATE QUALIFIER VALUES:	'),
	UPD_VAL_STR	= UPLIT ( %ASCIC ' !UL,');

LOCAL
	BIT_NUMBER,						! ECO LEVEL BIT COUNTER
	OUT_BUFFER : VECTOR[TTY_OUT_WIDTH,BYTE];		! OUTPUT BUFFER FOR JOURNAL MESSAGES

ENABLE PAT$ERR_HANDLER;						! DECLARE ERROR HANDLER

!++
! OPEN COMMUNICATION CHANNELS AND INITIALIZE CONTEXT DATA,ETC.
!--
PAT$INIT();							! OPEN CHANNELS

!++
! INITIALIZE PARSE OF COMMAND LINE.
!--
PAT$GL_ERRCODE=(.RECALLCLI)(INITPRS_DESC,CLIWRK);		! INITIATE COMMAND LINE PARSE
IF NOT .PAT$GL_ERRCODE						! IF ERROR IN PARSE
THEN
	SIGNAL(PAT$_INITPRS,1,.PAT$GL_ERRCODE,.PAT$GL_ERRCODE);	! REPORT ERROR

!++
! REQUEST INPUT FILE FROM CLI.  PRESENT ACTION ROUTINE WILL OPEN INPUT FILE.
!--
PAT$GL_ERRCODE=(.RECALLCLI)(INPUT_DESC,CLIWRK,PAT$GL_FLAGS);	! PARSE INPUT FILE
IF NOT .PAT$GL_ERRCODE						! IF ERROR IN PARSE
THEN
	SIGNAL(PAT$_PRIMIN,1,.PAT$GL_ERRCODE,.PAT$GL_ERRCODE);	! REPORT ERROR

!++
! REQUEST IMAGE OUTPUT FILE FROM CLI.  PRESENT ACTION ROUTINE WILL
! OPEN THE OUTPUT IMAGE FILE.
!--
PAT$GL_ERRCODE=(.RECALLCLI)(OUTPUT_DESC,CLIWRK,PAT$GL_FLAGS);	! PARSE IMAGE OUTPUT FILE
IF NOT .PAT$GL_ERRCODE						! IF ERROR IN PARSE
THEN
	SIGNAL(PAT$_PRIMOUT,1,.PAT$GL_ERRCODE,.PAT$GL_ERRCODE); ! REPORT ERROR

!++
! REQUEST JOURNAL FILE FROM CLI.  JOURNAL FILE WILL BE OPENED BY
! THE PRESENT ACTION ROUTINE.
!--
PAT$GL_ERRCODE=(.RECALLCLI)(JOURNAL_DESC,CLIWRK,PAT$GL_FLAGS);	! PARSE JOURNAL FILE
IF NOT .PAT$GL_ERRCODE						! IF ERROR IN PARSE
THEN
	SIGNAL(PAT$_SECOUT,1,.PAT$GL_ERRCODE,.PAT$GL_ERRCODE);	! REPORT ERROR

!++
! REQUEST COMMAND OUTPUT FILE FROM CLI.  IF A COMMAND FILE IS TO BE CREATED,
! IT WILL BE OPENED BY THE PRESENT ACTION ROUTINE.
!--
!PAT$GL_ERRCODE=(.RECALLCLI)(COMMAND_DESC,CLIWRK,PAT$GL_FLAGS); ! PARSE COMMAND FILE
!IF NOT .PAT$GL_ERRCODE						! IF ERROR IN PARSE
!THEN
!	SIGNAL(PAT$_TEROUT,1,.PAT$GL_ERRCODE,.PAT$GL_ERRCODE);	! REPORT ERROR

!++
! IF THE UPDATE QUALIFIER WAS SPECIFIED, THEN REQUEST AN
! ECO LEVEL FROM CLI.  THIS CALL CONVERTS IT TO A NUMERIC VALUE.
!--
IF (.PAT$GL_FLAGS AND PAT$M_UPDATE) NEQ 0			! IF /UPDATE SPECIFIED
THEN
	BEGIN
	DO							! REPEATEDLY
		BEGIN						! GET AN ECO LEVEL AND
		PAT$GL_ERRCODE=(.RECALLCLI)(UPDATE_VAL_DESC,CLIWRK,UPDATE_DESC);
		IF NOT .PAT$GL_ERRCODE				! IF ERROR
		THEN
			SIGNAL(PAT$_NUMVAL,1,.PAT$GL_ERRCODE,.PAT$GL_ERRCODE); ! REPORT ERROR
		PAT$GL_ECO_UPD<.UPDATE_VAL_DESC[CLI$L_RQVALU]-1,1>=1;
		END						! SET THE CORRESPONDING ECO BIT
	UNTIL							! UNTIL THERE ARE NO MORE
		.UPDATE_VAL_DESC[CLI$V_MOREVALS] EQL 0;
	PAT$GB_EXEC_CMD = FALSE;				! SET INDICATOR NOT TO EXECUTE COMMANDS
	END
ELSE
	PAT$GB_EXEC_CMD = TRUE;					! SET INDICATOR TO EXECUTE ALL COMMANDS

!++
! FINISH UP THE COMMAND LINE PARSE.
!--
PAT$GL_ERRCODE=(.RECALLCLI)(ENDPRS_DESC,CLIWRK);		! END PARSE OF COMMAND LINE
IF NOT .PAT$GL_ERRCODE						! IF ERROR
THEN
	SIGNAL(PAT$_ENDPRS,1,.PAT$GL_ERRCODE,.PAT$GL_ERRCODE);	! THE OUTPUT MESSAGE

!++
! OUTPUT WELCOME MESSAGE.
!--
$FAO_TT_OUT('!/!/  PATCH  Version 3-00  15-Mar-1982!/');

!++
! OUTPUT COMMAND INFORMATION TO JOURNAL FILE.
!--
PAT$CP_OUT_STR = CH$PTR(OUT_BUFFER, 0);
PAT$GL_BUF_SIZ = 0;
PAT$FAO_PUT(NEW_IMG_STR, .PAT$GL_OLDNBK[NAM$B_RSL], PAT$GB_OLDNAME);
PAT$WRITEFILE(.PAT$GL_BUF_SIZ, CH$PTR(OUT_BUFFER, 0), PAT$GL_JNLRAB);
PAT$CP_OUT_STR = CH$PTR(OUT_BUFFER, 0);
PAT$GL_BUF_SIZ = 0;
PAT$FAO_PUT(JNL_STR, .PAT$GL_JNLNBK[NAM$B_RSL], PAT$GB_JNLNAME);
PAT$WRITEFILE(.PAT$GL_BUF_SIZ, CH$PTR(OUT_BUFFER, 0), PAT$GL_JNLRAB);
!IF (.PAT$GL_FLAGS AND PAT$M_COMMAND) NEQ 0
!THEN
!	BEGIN
!	PAT$CP_OUT_STR = CH$PTR(OUT_BUFFER, 0);
!	PAT$GL_BUF_SIZ = 0;
!	PAT$FAO_PUT(COM_STR, .PAT$GL_COMNBK[NAM$B_RSL], PAT$GB_COMNAME);
!	PAT$WRITEFILE(.PAT$GL_BUF_SIZ, CH$PTR(OUT_BUFFER, 0), PAT$GL_JNLRAB);
!	END;

!++
! Call back the CLI to get a descriptor for the command line.  This may be
! later used by the "CREATE" command.  In any case, an attempt is made to write
! the command line to the output command file.  This places it in the appended
! patch command text buffer even if no output command file is being written.
!--
PAT$GL_ERRCODE = (.RECALLCLI) (COMLINE_DESC, CLIWRK);
IF NOT .PAT$GL_ERRCODE
THEN
	SIGNAL(.PAT$GL_ERRCODE);
PAT$CP_OUT_STR = CH$PTR(OUT_BUFFER, 0);
PAT$GL_BUF_SIZ = 0;
PAT$FAO_PUT(COM_LINE_STR, CH$PTR(COMLINE_DESC[CLI$Q_RQDESC], 0));
PAT$WRITEFILE(.PAT$GL_BUF_SIZ, OUT_BUFFER, PAT$GL_COMRAB);
IF (.PAT$GL_FLAGS AND PAT$M_UPDATE) NEQ 0
THEN
	BEGIN
	PAT$CP_OUT_STR = CH$PTR(OUT_BUFFER, 0);
	PAT$GL_BUF_SIZ = 0;
	PAT$FAO_PUT(UPDATE_STR);
	BIT_NUMBER = PAT$K_MIN_ECO;
	WHILE .BIT_NUMBER LEQ PAT$K_MAX_ECO
	DO
		BEGIN
		IF .PAT$GL_ECO_UPD<.BIT_NUMBER-1, 1>
		THEN
			PAT$FAO_PUT(UPD_VAL_STR, .BIT_NUMBER);
		BIT_NUMBER = .BIT_NUMBER + 1;
		END;
	PAT$WRITEFILE(.PAT$GL_BUF_SIZ-1, CH$PTR(OUT_BUFFER, 0), PAT$GL_JNLRAB);
	END;

!++
! READ THE IMAGE HEADER AND SET UP THE IMAGE SECTION TABLE.
!--
PAT$GET_IHD();							! GET INFO FROM IMAGE HEADER

!++
! INITALIZE SYMBOL TABLES FROM RST AND GST IN OLD IMAGE FILE.
!--
PAT$FIND_DST();

!++
! THIS IS THE LOOP WHICH CAUSES PATCH COMMANDS TO BE PROCESSED.
! AS LONG AS THERE ARE COMMANDS TO PROCESS, THE COMMAND FLAG IS ON.
! IT IS TURNED OFF WHEN EOF IS ENCOUNTERED.
!--
PAT$GB_TAKE_CMD = TRUE;						! PROCESS COMMANDS
WHILE .PAT$GB_TAKE_CMD DO

	PAT$COM_PROC();

!++
! CLOSE ALL FILES.
!--
PAT$CLOSEFILES();						! FINISH UP

END;								! END OF PAT$MAIN

ROUTINE OPEN_INPUT (REQDESC,CLIADDR) : NOVALUE =		! ROUTINE TO OPEN INPUT FILE

!++
! FUNCTIONAL DESCRIPTION:
!
! THIS IS THE ACTION ROUTINE FOR THE INPUT FILE PARAMETER IN THE COMMAND
! LINE.  THE FAB IS SET UP AND THE INPUT IMAGE FILE OPENED.
!
! FORMAL PARAMETERS:
!
!	REQDESC = THE ADDRESS OF THE REQUEST DESCRIPTOR
!	CLIADDR = THE ADDRESS OF THE CLI CALL BACK ROUTINE
!
! IMPLICIT INPUTS:
!
!	CLI HAS THE COMMAND LINE.
!	THE FABS AND RABS ARE INITIALIZED, SAVE FOR FILE NAMES.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:	NONE
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	THE INPUT FILES IS OPENED.
!	THE PATCH COMMANDS ARE EXECUTED.
!
!--

BEGIN


PAT$GL_OLDFAB[FAB$L_FNA]=.INPUT_DESC[CLI$A_RQADDR];		! SET FILE NAME ADDRESS
PAT$GL_OLDFAB[FAB$B_FNS]=.INPUT_DESC[CLI$W_RQSIZE];		! SET FILE NAME LENGTH
PAT$GL_ERRCODE=$OPEN(FAB=PAT$GL_OLDFAB);			! OPEN INPUT FILE
IF NOT .PAT$GL_ERRCODE						! SUCCESS ON OPEN?
THEN
	BEGIN
	PAT$GL_FLAGS<PAT$S_INPUT,1>=0;				! SET FLAG FILE NOT OPEN
	SIGNAL(PAT$_OPNERR,3,.PAT$GL_ERRCODE,.PAT$GL_OLDNBK[NAM$B_ESL],
		PAT$GB_OLDNAME,.PAT$GL_ERRCODE,.PAT$GL_OLDFAB[FAB$L_STV]); ! REPORT FAILURE
	END
ELSE
	BEGIN
	PAT$GL_ERRCODE=$CONNECT(RAB=PAT$GL_OLDRAB);		! CONNECT INPUT FILE
	IF NOT .PAT$GL_ERRCODE					! SUCCESS ON CONNECT?
	THEN
		SIGNAL(PAT$_CNTERR,3,.PAT$GL_ERRCODE,.PAT$GL_OLDNBK[NAM$B_RSL],
		PAT$GB_OLDNAME,.PAT$GL_ERRCODE,.PAT$GL_OLDRAB[RAB$L_STV]); ! REPORT FAILURE
	PAT$GL_OLDFAB[FAB$V_ESC] = TRUE;
	PAT$GL_OLDFAB[FAB$L_CTX] = RME$C_SETRFM;
	PAT$GL_OLDFAB[FAB$B_RFM] = FAB$C_VAR;
	PAT$GL_ERRCODE = $MODIFY(FAB=PAT$GL_OLDFAB);
	IF NOT .PAT$GL_ERRCODE
	THEN
		SIGNAL(PAT$_MODIFYERR, 3, .PAT$GL_ERRCODE,
			.PAT$GL_OLDNBK[NAM$B_RSL], PAT$GB_OLDNAME,
			.PAT$GL_ERRCODE, .PAT$GL_OLDRAB[RAB$L_STV]);
	END;


END;								! END OF INPUT_OPEN

ROUTINE OPEN_OUTPUT (REQDESC,CLIADDR) : NOVALUE =		! ROUTINE TO INIT FOR OUTPUT FILE OPEN

!++
! FUNCTIONAL DESCRIPTION:
!
! THIS IS THE ACTION ROUTINE FOR THE OUTPUT FILE PARAMETER IN THE COMMAND
! LINE.  THE FAB IS SET UP AND THE NUMBER OF IMAGE FILE BLOCKS IS INITIALIZED.
! THE IMAGE FILE WILL BE OPENED JUST BEFORE IT IS WRITTEN AS THE NUMBER OF
! BLOCKS THAT MUST BE ALLOCATED CONTIGUOUSLY, WILL NOT BE KNOWN UNTIL THEN.
!
! FORMAL PARAMETERS:
!
!	REQDESC = THE ADDRESS OF THE REQUEST DESCRIPTOR
!	CLIADDR = THE ADDRESS OF THE CLI CALL BACK ROUTINE
!
! IMPLICIT INPUTS:
!
!	CLI HAS THE COMMAND LINE.
!	THE OUTPUT IMAGE FAB ARE INITIALIZED.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:	NONE
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	THE NUMBER OF IMAGE BLOCKS IS INITIALIZED AS IS THE FILENAME IN THE FAB.
!
!--

BEGIN

PAT$GL_IMGBLKS = .PAT$GL_OLDXABFH[XAB$L_EBK] +			! INITIALIZE NUMBER OF BLOCKS IN FILE
			(.PAT$GL_OLDXABFH[XAB$W_FFB] NEQ 0);
PAT$GL_NEWFAB[FAB$L_FNA]=.OUTPUT_DESC[CLI$A_RQADDR];		! SET FILE NAME ADDRESS
PAT$GL_NEWFAB[FAB$B_FNS]=.OUTPUT_DESC[CLI$W_RQSIZE];		! SET FILE NAME LENGTH
PAT$GL_FLAGS<PAT$S_OUTPUT,1>=0;					! SET FLAG FILE NOT OPEN

END;								! END OF OPEN_OUTPUT

ROUTINE OPEN_JOURNAL (REQDESC,CLIADDR) : NOVALUE =		! ROUTINE TO OPEN JOURNAL FILE

!++
! FUNCTIONAL DESCRIPTION:
!
! THIS IS THE ACTION ROUTINE FOR THE JOURNAL FILE PARAMETER IN THE COMMAND
! LINE.  THE FAB IS SET UP AND THE JOURNAL FILE OPENED.
!
! FORMAL PARAMETERS:
!
!	REQDESC = THE ADDRESS OF THE REQUEST DESCRIPTOR
!	CLIADDR = THE ADDRESS OF THE CLI CALL BACK ROUTINE
!
! IMPLICIT JOURNALS:
!
!	CLI HAS THE COMMAND LINE.
!	THE JOURNAL FAB AND RAB ARE INITIALIZED.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:	NONE
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	THE JOURNAL FILE IS OPENED.
!
!--

BEGIN

PAT$GL_JNLFAB[FAB$L_FNA]=.JOURNAL_DESC[CLI$A_RQADDR];		! SET FILE NAME ADDRESS
PAT$GL_JNLFAB[FAB$B_FNS]=.JOURNAL_DESC[CLI$W_RQSIZE];		! SET FILE NAME LENGTH
PAT$GL_ERRCODE=$CREATE(FAB=PAT$GL_JNLFAB);			! OPEN JOURNAL FILE
IF NOT .PAT$GL_ERRCODE						! SUCCESS ON OPEN?
THEN
	BEGIN
	PAT$GL_FLAGS<PAT$S_JOURNAL,1>=0;			! SET FLAG FILE NOT OPEN
	SIGNAL(PAT$_OPNERR,3,.PAT$GL_ERRCODE,.PAT$GL_JNLNBK[NAM$B_ESL],
		PAT$GB_JNLNAME,.PAT$GL_ERRCODE,.PAT$GL_JNLRAB[RAB$L_STV]); ! REPORT FAILURE
	END
ELSE
	BEGIN
	PAT$GL_ERRCODE=$CONNECT(RAB=PAT$GL_JNLRAB);		! CONNECT JOURNAL FILE
	IF NOT .PAT$GL_ERRCODE					! SUCCESS ON CONNECT?
	THEN
		SIGNAL(PAT$_CNTERR,3,.PAT$GL_ERRCODE,.PAT$GL_JNLNBK[NAM$B_RSL],
			PAT$GB_JNLNAME,.PAT$GL_ERRCODE,.PAT$GL_JNLRAB[RAB$L_STV]); ! REPORT FAILURE
	END;

END;								! END OF OPEN_JOURNAL

GLOBAL ROUTINE PAT$OPEN_COMFIL (REQDESC,CLIADDR) : NOVALUE =	! ROUTINE TO OPEN COMMAND FILE

!++
! FUNCTIONAL DESCRIPTION:
!
! THIS IS THE ACTION ROUTINE FOR THE COMMAND FILE PARAMETER IN THE COMMAND
! LINE.  THE FAB IS SET UP AND THE COMMAND FILE OPENED.
!
! IT IS ALSO SERVING TO OPEN THE COMMAND FILE BECAUSE OF THE "CREATE" COMMAND.
! IN THIS CASE, THE INPUT PARAMETERS ARE ZEROS.  THERE SHOULD BE ONLY ONE "CREATE"
! COMMAND PER PATCH SESSION.  THE "CREATE" COMMAND MAY OR MAY NOT HAVE ONE
! ARGUMENT WHICH IS THE COMMAND FILE SPECIFICATION.
!
! FORMAL PARAMETERS:
!
!	REQDESC = Always 0 since the removal of the /COMMAND qualifier.
!	CLIADDR = THE ADDRESS OF THE CLI CALL BACK ROUTINE
!
! IMPLICIT COMMANDS:
!
!	CLI HAS THE COMMAND LINE.
!	THE OUTPUT COMMAND FAB AND RAB ARE INITIALIZED.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	THE COMMAND FILE IS OPENED.
!
!--

BEGIN

LOCAL
	POINTER : REF VECTOR[,LONG],				! POINTER TO ADDRESS OFFILE NAME
	NAME_DSC : REF VECTOR[,BYTE],				! POINTER TO ASCIC FILE NAME
	OUT_BUFFER : VECTOR[TTY_OUT_WIDTH,BYTE];		! OUTPUT BUFFER FOR JOURNAL MESSAGES


IF .PAT$GL_FLAGS<PAT$S_COMMAND,1>
THEN
	BEGIN
	SIGNAL(PAT$_DUPCOMFIL+MSG$K_WARN,2,.PAT$GL_COMNBK[NAM$B_RSL],PAT$GB_COMNAME);
	END;

POINTER = .PAT$GL_HEAD_LST;
IF (.POINTER NEQA 0)
THEN
	BEGIN
	NAME_DSC = .POINTER[1];					! GET ADDRESS OF FILE NAME
	PAT$GL_COMFAB[FAB$L_FNA]=NAME_DSC[1];			! SET FILE NAME ADDRESS
	PAT$GL_COMFAB[FAB$B_FNS]=.NAME_DSC[0];			! SET FILE NAME LENGTH
	END
ELSE
	BEGIN
	PAT$GL_COMFAB[FAB$L_FNA]=0;				! SET FILE NAME ADDRESS
	PAT$GL_COMFAB[FAB$B_FNS]=0;				! SET FILE NAME LENGTH
	END;

PAT$GL_ERRCODE=$CREATE(FAB=PAT$GL_COMFAB);			! OPEN OUTPUT COMMAND FILE
IF NOT .PAT$GL_ERRCODE						! SUCCESS ON OPEN?
THEN
	BEGIN
	PAT$GL_FLAGS<PAT$S_COMMAND,1>=0;			! SET FLAG FILE NOT OPEN
	SIGNAL(PAT$_OPNERR,3,.PAT$GL_ERRCODE,.PAT$GL_COMNBK[NAM$B_ESL],
		PAT$GB_COMNAME,.PAT$GL_ERRCODE,.PAT$GL_COMRAB[RAB$L_STV]); ! REPORT FAILURE
	END
ELSE
	BEGIN
	PAT$GL_ERRCODE=$CONNECT(RAB=PAT$GL_COMRAB);		! CONNECT COMMAND FILE
	IF NOT .PAT$GL_ERRCODE					! SUCCESS ON CONNECT?
	THEN
		SIGNAL(PAT$_CNTERR,3,.PAT$GL_ERRCODE,.PAT$GL_COMNBK[NAM$B_RSL],
			PAT$GB_COMNAME,.PAT$GL_ERRCODE,.PAT$GL_COMRAB[RAB$L_STV]) ! REPORT FAILURE
	ELSE
		BEGIN
		!++
		! Now set the flag indicating the file is open.  If the command
		! file was opened due to a CREATE command, then write out the
		! name of the command file to the journal file and write out
		! the DCL PATCH command line to the command file.
		!--
		PAT$GL_FLAGS<PAT$S_COMMAND,1> = 1;		! SET FILE OPEN BIT
		IF (.REQDESC EQL 0)
		THEN
			BEGIN
			PAT$CP_OUT_STR = CH$PTR(OUT_BUFFER, 0);
			PAT$GL_BUF_SIZ = 0;
			PAT$FAO_PUT(COM_STR, .PAT$GL_COMNBK[NAM$B_RSL], PAT$GB_COMNAME);
			PAT$WRITEFILE(.PAT$GL_BUF_SIZ, CH$PTR(OUT_BUFFER, 0), PAT$GL_JNLRAB);
			PAT$CP_OUT_STR = CH$PTR(OUT_BUFFER, 0);
			PAT$GL_BUF_SIZ = 0;
			PAT$FAO_PUT(COM_LINE_STR, CH$PTR(COMLINE_DESC[CLI$Q_RQDESC], 0));
			PAT$GL_COMRAB[RAB$W_RSZ] = .PAT$GL_BUF_SIZ;
			PAT$GL_COMRAB[RAB$L_RBF] = OUT_BUFFER;
			IF NOT (PAT$GL_ERRCODE = $PUT(RAB=PAT$GL_COMRAB))
			THEN
				SIGNAL(PAT$_PUTERR,3,.PAT$GL_ERRCODE,
					.PAT$GL_COMNBK[NAM$B_RSL],PAT$GB_COMNAME,
					.PAT$GL_ERRCODE,.PAT$GL_COMRAB[RAB$L_STV]);
			END;
		END;
	END;


END;								! END OF PAT$OPN_COMMAND

ROUTINE VOLUME_PARSE (VOLUME_DESC_ADR,RECALLCLI) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
! This is the action routine to obtain a Relative Volume Number if specified
! on the command line, or when the VOLUME qualifier is specified without a
! value, to default the value from the old image.
!
! FORMAL PARAMETERS:
!
!	VOLUME_DESC_ADR	A descriptor for the CLI control block used to parse /VOLUME
!	RECALLCLI	The address of the call back routine in the CLI
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	PAT$GW_IMGVOL is loaded with the appropriate Relative Volume Number.
!
! ROUTINE VALUE:
!
!	NONE
!
! COMPLETION CODES:
!
!	NONE
!
!--
BEGIN

MAP
	VOLUME_DESC_ADR : REF BLOCK[,BYTE];			! The CLI control block

BIND
	VOL_STR_DESC = VOLUME_DESC_ADR[CLI$Q_RQDESC] : BLOCK[,BYTE], ! A descriptor for the argument string
	OLD_FILE_ID = PAT$GL_OLDNBK[NAM$W_FID] : VECTOR [,WORD];

IF .VOL_STR_DESC[DSC$W_LENGTH] EQL 0
THEN
	PAT$GW_IMGVOL = .OLD_FILE_ID[2]				! Default to the old Rel. Vol. No.
ELSE
	BEGIN
	(.RECALLCLI)(VOLUME_VAL_DESC,CLIWRK,.VOLUME_DESC_ADR);
	PAT$GW_IMGVOL = .VOLUME_VAL_DESC[CLI$L_RQVALU];		! Load the user supplied number
	END;

END;

ROUTINE CLIERROR (REQDESC,CLI_ERROR) : NOVALUE =		! ROUTINE TO REPORT CLI ERRORS

!++
! FUNCTIONAL DESCRIPTION:
!
! THIS IS THE ACTION ROUTINE FOR THE FOR REPORTING ANY COMMAND PARSE ERRORS.
! AN ERROR MESSAGE IS PRODUCED AND THE PATCH EXITS.
!
! FORMAL PARAMETERS:
!
!	REQDESC = THE ADDRESS OF THE REQUEST DESCRIPTOR
!	CLI_ERROR = The CLI error code
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	AN ERROR MESSAGE IS PRODUCED AND THE UTILITY EXITS.
!
!--

BEGIN

SIGNAL(PAT$_CLIERR,0,.CLI_ERROR);				! CLI ERROR MESSAGE

END;								! END OF CLIERROR
END								! END OF MODULE
ELUDOM
