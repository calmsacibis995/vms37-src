MODULE PATREB (	!
		%IF %VARIANT EQL 1
		%THEN
			ADDRESSING_MODE (EXTERNAL = LONG_RELATIVE, NONEXTERNAL = LONG_RELATIVE),
		%FI
		IDENT = 'V03-000'
		) =
BEGIN

!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	PATCH
!
! ABSTRACT:	RST routines used primarily to rebuild RST data structures.
!
!
! ENVIRONMENT:	This module runs on VAX under VAX/VMS, user mode, non-AST level.
!
! Author:	Kevin Pammett, August 12, 1977.
!
! Version:	V02-008
!
! MODIFIED BY:
!
!	V02-008	PCG0001		Peter George		02-FEB-1981
!		Add require statement for LIB$:PATDEF.REQ
!
! MODIFCATIONS:
!
!  NO	DATE		PROGRAMMER		PURPOSE
!  --	----		----------		-------
!
!  00	22-DEC-77	K.D. MORSE		ADAPT VERSION 36 FOR PATCH.
!  01	24-JAN-78	K.D. MORSE		ADD ERROR MSG PAT$_MODNOTADD (37).
!  02	28-JAN-78	K.D. MORSE		SET_MODULE NOW WORKS FROM
!						THE COMMAND ARGUMENT LIST
!						OR FROM AN MC POINTER. (38)
!						SET_MODULE AND CANC_MODULE
!						UNDERSTAND /ALL. (39)
!						THE SAT/LVT ACCESSING LOGIC WAS
!						ADDED TO THE SORT FOR
!						PERFORMANCE IMPROVEMENT. (40)
!  03	04-APR-78	K.D. MORSE		NO CHANGES FOR 41.
!  04	18-APR-78	K.D. MORSE		CHANGE NXT_SAT_LVT TO
!						GET_NXT_SAT_LVT AND MADE ACCESS
!						TO IT INCLUDE THE RECORD SIZE. 42
!						PUT IN SET AND CANCEL /ALL MODU. 43
!  05	25-APR-78	K.D. MORSE		CONVERT TO NATIVE COMPILER.
!  06	18-MAY-78	K.D. MORSE		CANCEL MODULE ALSO NOT CAUSES
!						SCOPE TO BE CANCELLED IF BOTH
!						ARE THE SAME. (44)
!						NO CHANGES FOR VERS 45.
!  07	13-JUN-78	K.D. MORSE		ADD FAO COUNTS TO SIGNALS.
!
!--

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
	PAT$GET_NXT_SAT,					! Provide access to the SAT
	PAT$GET_NXT_LVT,					! Provide access to the LVT
	GET_NXT_SAT_LVT,						! Parameterized access to SAT/LVT.
	PAT$SET_MODULE : NOVALUE,				! Add a <module list> to the RST.
	PAT$CANC_MODULE : NOVALUE,				! Delete a <module list> from the RST.
	PAT$SORT_SA_LVT : NOVALUE,				! Sort the LVT or SAT vector.
	DELE_SAT_LVT,						! Mark SAT or LVT records for deletion.
	EMPTY_SAT_LVT : NOVALUE,				! Remove the SAT/LVT portion of a
								!  module from the RST.
	UNLINK_NT_RECS : NOVALUE;				! Remove NTs from hash chains.

!
! INCLUDE FILES:
!

LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:PATPCT.REQ';
REQUIRE 'LIB$:PATDEF.REQ';				! Defines literals
REQUIRE 'LIB$:PATMSG.REQ';
REQUIRE 'SRC$:VXSMAC.REQ';
REQUIRE 'SRC$:BSTRUC.REQ';
REQUIRE 'SRC$:LISTEL.REQ';
REQUIRE 'SRC$:PATGEN.REQ';
REQUIRE 'SRC$:PATRST.REQ';
REQUIRE 'SRC$:SYSSER.REQ';

!
! MACROS:
!

!
! EQUATED SYMBOLS:
!

!
! EXTERNAL REFERENCES:
!

EXTERNAL
	PAT$GL_CONTEXT : BITVECTOR,				! CONTEXT QUALIFIER BITS (/ALL)
	PAT$GL_RST_BEGN,					! ADDRESS OF START OF RST
	PAT$GL_CSP_PTR : REF PATHNAME_VECTOR,			! Pointer to the current SCOPE
	PAT$GL_MC_PTR	: REF MC_RECORD,			! Pointer to the Module Chain (MC).
	PAT$GL_HEAD_LST;					! pointer to expression arg list.


EXTERNAL ROUTINE
	PAT$ADD_MODULE,						! Add a module's symbols to the RST.
	PAT$VS_FREE : NOVALUE,					! Release vector storage.
	PAT$SAVE_SCOPE;						! CANC MODU may imply CANC SCOPE

GLOBAL ROUTINE PAT$GET_NXT_SAT( ACCESS_FLAG) =
BEGIN
RETURN( GET_NXT_SAT_LVT( .ACCESS_FLAG, RST_SAT_SIZE ));
END;


GLOBAL ROUTINE PAT$GET_NXT_LVT( ACCESS_FLAG ) =
BEGIN
RETURN( GET_NXT_SAT_LVT( .ACCESS_FLAG, RST_LVT_SIZE ));
END;

ROUTINE GET_NXT_SAT_LVT( ACCESS_FLAG, RECORD_SIZE ) =

!++
! Functional Description:
!
!	Provide access to the RST SAT or LVT structures.
!	i.e. Allow sequential access to the SAT/LVT via 
!	successive calls to this 'mapping' routine
!	so that the accessor has no built-in notion of
!	just how this sequential access is achieved.
!
! Formal Parameters:
!
!	access_flag -	One of three (3) possible values which indicate
!			what type of access this is.
!			SA_ACCE_INIT	- Initialize the OWN pointers for further
!					  access.
!			SA_ACCE_RECS	- Return the next record in the structure.
!			SA_ACCE_FREE	- Return the next record marked for deletion
!					  that is not in a module about to be deleted.
!	record_size -	The number of bytes in the record structure being accessed.
!
! Implicit Inputs:
!
!	This routine defines how the SAT and LVT are accessed
!	sequentially.  This definition must correspond to the one
!	that is also 'built-in' in the routine DBG$SORT_SA_LVT.
!	The latter does not use this routine's defintion because
!	of the performance penality we pay to do it.  (all the CALLSes)
!
!	Some other routines also access the SAT/LVT 'on their own',
!	but they restrict themselves to only looking at one storage vector's
!	contribution to the SAT/LVT.
!
!	The MC storage descriptors for all MCs marked MC_IN_RST
!	(this includes the one for globals) must be consistent.
!
! Implicit Outputs:
!
!	none.
!
! Routine Value:
!
!	0, when there are no more SAT or LVT records given the
!	   indicated ending criteria,
!	Otherwise, a pointer to the appropriate record.
!
!	On the _INIT call, this routine returns the number of
!	bytes in the SAT/LVT record which the _INIT
!	was done for.
!
! Side Effects:
!
!	The SAT or LVT is accessed sequentially.
!	OWN storage is initialized and used.
!--

BEGIN

LABEL
	NEXT_MC_LOOP;


OWN
	LAST_PTR : REF SAT_RECORD,				! Pointer to the record we returned on
								!  the previous call to this routine.
	MC_PTR : REF MC_RECORD;					! Module that LAST_PTR was in.

LOCAL
	STORE_DESC : REF VECT_STORE_DESC,			! Pointer to the storage descriptor for the
								!  type of storage we are currently looking at.
	CURRENT,						! We keep two pointers to the SAT or LVT
								! record currently under consideration.
								! One, 'current', is NOT a SAT_POINTER because
								! such longword pointers aren't easily comparable
								! to the NT-pointers we get from storage descriptors.
	CURRENT_SAT_PTR : REF SAT_RECORD;			! The other, 'current_sat_ptr' is a real SAT
								! pointer which always corresponds to 'current'.

!++
! Initialization mode processing is simple and contained.  We simply set up a
! new context.
!--
IF (.access_flag EQL SL_ACCE_INIT)
THEN
	BEGIN
	!++
	! Set up so that the next call will find the
	! first LVT or SAT record given the access criterion.
	!--
	MC_PTR = .PAT$GL_MC_PTR;
	LAST_PTR = 0;
	RETURN(.RECORD_SIZE);					! Return the record size so that we can
								! localize this knowledge to this routine.
	END;

!++
! Iterate to set 'current' and 'current_sat_ptr' to point to 
! the next record we want to consider.
!--
REPEAT
    NEXT_MC_LOOP:
	BEGIN
	!++
	! Once we run off the end of the module chain
	! there is no more of any kind of storage.
	!--		
	IF (.MC_PTR EQL 0) AND (.LAST_PTR EQL 0)
	THEN
		RETURN(0);

	!++
	! See if this module is a possible candidate.
	!--
	IF .MC_PTR[MC_IN_RST]
	THEN
		BEGIN
		!++
		! The _FREE access type asks that we look only at
		! MCs which are both _IN_RST and NOT _DYING.
		IF (.access_flag EQL SL_ACCE_FREE)
		THEN
			IF .MC_PTR[MC_IS_DYING]
			THEN
				BEGIN
				!++
				! This module is soon to be deleted
				! so there is no _FREE storage therein.
				! Skip over this module completely.
				!--
				MC_PTR = .MC_PTR [MC_NEXT];
				LEAVE NEXT_MC_LOOP;
				END;

		!++
		! See if this module has any of the kind
		! of storage we are looking for.
		!--
		STORE_DESC = (IF (.RECORD_SIZE EQL RST_SAT_SIZE)
			      THEN MC_PTR [MC_SAT_STORAGE]
			      ELSE MC_PTR[MC_LVT_STORAGE]);

		!++
		! No storage is allocated if the 'begin' field is null.
		!--
		IF (.STORE_DESC [STOR_BEGIN_RST] NEQ 0)
		THEN
			BEGIN
			!++
			! Found the right place to look.  Point
			! to the next record within this module.
			!--
			IF (.LAST_PTR EQL 0)
			THEN
				!++
				! First time thru we start at the beginning
				!--
				CURRENT = .STORE_DESC [STOR_BEGIN_RST]
			ELSE
				!++

				! Subsequent times thru we assume that
				! the records are contiguous and fixed-size.
				!--
				CURRENT = .LAST_PTR + .RECORD_SIZE;

			!++
			! The 'current' pointer must be within range and it
			! must point to a record we are interested in, given
			! the access criteria. Loop thru the storage for this
			! module as long as there are still some to look at.
			!--
			IF (
			(WHILE( .CURRENT LSSA .STORE_DESC [STOR_MARKER] )
				DO
				BEGIN
				!++
				! Initialize the SAT_POINTER which
				! corresponds to 'current'.
				!--
				CURRENT_SAT_PTR = .CURRENT + .PAT$GL_RST_BEGN;

				!++
				! As long as we are in range, we can imply skip
				! along successive records until we get one
				! which satisfies the given access criteria.
				!--
				IF (.access_flag EQL SL_ACCE_RECS) 
				THEN
					BEGIN
					!++
					! Skip records which are marked
					! for deletion.  Anything else is OK.
					!--
					IF (.CURRENT_SAT_PTR [SAT_NT_PTR] NEQ 1)
					THEN
						EXITLOOP(TRUE);
					END
				ELSE

					BEGIN
					!++
					! The _FREE mode asks only for deleted
					! records in NOT _DYING modules.
					!--
					IF (.CURRENT_SAT_PTR [SAT_NT_PTR] EQL 1)
					THEN
						EXITLOOP(TRUE);
					END;

				!++
				! Skip along to the next record.
				!--
				CURRENT = .CURRENT + .RECORD_SIZE;
				END
			) EQL TRUE
			   )
			THEN
				!++
				! We have found a valid record in the current module.
				!--
				EXITLOOP;

			!++
			! If we fall out of the above loop, there were no records
			! in the current module which satsified the access
			! criteria. Set up so that when we look at the next
			! module we will begin at the first record.
			!--
			LAST_PTR = 0;
			END;

		!++
		! There is none of the kind of storage we are looking for so
		! loop back to consider the next module.
		!--
		END;

	!++
	! The current module is not in the RST so loop back to consider the next one.
	!--
	MC_PTR = .MC_PTR [MC_NEXT];
	END;

!++
! Pass back the desired pointer having first stored it away in our OWN storage
! so that we can pick it up on the next call.
!--
LAST_PTR = .CURRENT;
RETURN(.CURRENT_SAT_PTR);
END;

GLOBAL ROUTINE PAT$SET_MODULE (MODULE_TO_SET) : NOVALUE =

!++
! Functional Description:
!
!	Add the symbols for a given list of modules, or /ALL modules to the RST.
!
! Formal Parameters:
!
!	MODULE_TO_SET	-an MC pointer to the module we are
!			 to add, or 0 => use the command
!			 argument list or do SET /ALL.
!
!
! Implicit Inputs:
!
!	The expression list contains MC_PTRs to the indicated modules.
!	If "SET MODULE /ALL" was specified, then the Module Chain points to
!	all the modules to set.
!
! Implicit Outputs:
!
!	The modules are added.
!
! Return Value:
!
!	NOVALUE - This routine SIGNALs out if an error occurs.
!
! Side Effects:
!
!	The symbols for the indicated modules get added to the RST.  If they
!	 are already there,  PATCH merely returns.
!	If an error occurs, a SIGNAL and UNWIND are performed.
!--

BEGIN

LOCAL
	DO_SAT_SORT,						! Flags to control sorting.
	DO_LVT_SORT,
	POINTER,						! Used to scan the arg list.
	MC_CHAIN : REF MC_RECORD,				! POINTER TO CURRENT MODULE CHAIN ENTRY
	MC_PTR : REF MC_RECORD,					! Each arg is an MC pointer.
	STORE_DESC : REF VECT_STORE_DESC;			! We look at the storage descriptor
								! associated with a module after we
								! try to add it to see if SAT or LVT
								! storage was allocated.

!++
! Assume that we won't have to (re)sort the LVT and SAT - an added module doesn't
! necessarily add anything to the LVT or SAT.
!--
DO_SAT_SORT = FALSE;
DO_LVT_SORT = FALSE;
MC_CHAIN = 0;

!++
! If we were given a specific module_to_set, then we just assume that that is
! the MC_PTR we want.  Otherwise either DBG$GL_HEAD_LST points to an arg
! list of MC_PTRs, or it is 0, which means that we are to try to set ALL modules.
!--
IF (.MODULE_TO_SET EQL 0)
THEN
	IF ((POINTER = .PAT$GL_HEAD_LST) EQL 0)
	THEN
		MC_PTR = MC_CHAIN = .PAT$GL_MC_PTR;

!++
! Loop thru the arg list or module chain trying to add the indicated modules to
! the RST.  Note that we skip over the MC reserved for globals if the MC chain
! is being used.

!--
REPEAT
	BEGIN
	!++
	! PICK UP A POINTER TO THE MODULE TO BE SET.
	!--
	IF (.MC_CHAIN NEQ 0)
	THEN
		BEGIN
		!++
		! THE NEXT MODULE COMES FROM THE MODULE CHAIN.  CHECK FOR END
		! OF THE CHAIN.  This also skips the MC for globals.
		!--
		IF ((MC_PTR = .MC_PTR[MC_NEXT]) EQL 0)
		THEN
			EXITLOOP;
		END
	ELSE
		!++
		! THE NEXT MODULE IS EITHER ONE SPECIFICALLY REQUESTED OR
		! COMES FROM THE COMMAND ARGUMENT LIST.
		!--
		IF ((MC_PTR = .MODULE_TO_SET) EQL 0)
		THEN
			!++
			! EACH ARGUMENT IS A POINTER TO THE MC RECORD FOR
			! THE MODULE TO BE SET.
			!--
			MC_PTR = .LIST_ELEM_EXP1(.POINTER);

	!++
	! NOW CHECK THAT THE MODULE IS NOT ALREADY IN THE RST.
	!--
	IF ( NOT .MC_PTR[MC_IN_RST])
	THEN
		BEGIN
		!++
		! Simply add the module the same way that the RST init
		! procedure would.
		!--
		IF (PAT$ADD_MODULE( .MC_PTR ))
		THEN
			BEGIN
			!++
			! Note that the module has been added, and see
			! if any LVT and/or SAT storage was allocated
			! for it to avoid an unnecessary SORT later on.
			!--
			MC_PTR [MC_IN_RST] = TRUE;
			MC_PTR [MC_IS_DYING] = FALSE;
			STORE_DESC = MC_PTR [MC_SAT_STORAGE];
			IF (.STORE_DESC [STOR_BEGIN_RST] NEQ 0)
			THEN
				DO_SAT_SORT = TRUE;
			STORE_DESC = MC_PTR [MC_LVT_STORAGE];
			IF (.STORE_DESC [STOR_BEGIN_RST] NEQ 0)
			THEN
				DO_LVT_SORT = TRUE;
			END
		ELSE
			!++
			! IF A LIST OF MODULES IS BEING SET, THIS MESSAGE MUST
			! BE INFORMATIONAL BECAUSE A "RETURN" MUST BE EXECUTED
			! FROM HERE TO DO THE POST-MODULE "SET" CLEANUP.
			! OTHERWISE A SIGNAL CAN BE PERFORMED HERE AND OUT OF
			! THE "SET SCOPE" COMMAND AS WELL.  BY SUBTRACTING
			! ONE FROM THE INFORMATION ERROR CODE, PATCH CREATES
			! A WARNING CODE.
			!--
			IF (.MODULE_TO_SET NEQ 0)
			THEN
				SIGNAL(PAT$_MODNOTADD-1, 1, MC_PTR[MC_NAME_CS])
			ELSE
				SIGNAL(PAT$_MODNOTADD, 1, MC_PTR[MC_NAME_CS]);
		END;

	!++
	! Go back and look at the next arg if there is one.
	!--
	IF (.MODULE_TO_SET NEQ 0)
	THEN
		!++
		! THERE IS NEVER A NEXT ONE IF ONLY ONE WAS SPECIFIED.
		!--
		EXITLOOP;
		
	!++
	! A NEXT ONE MUST COME FROM THE MC CHAIN OR THE ARG LIST.
	!--
	IF (.MC_CHAIN EQL 0)
	THEN
		IF ((POINTER = .LIST_ELEM_FLINK(.POINTER)) EQL 0)
		THEN
			EXITLOOP;
	END;

!++
! If any SAT/LVT storage was allocated, then corresponding records have been
! added so we have to re-sort the structure.
!--
IF (.DO_SAT_SORT)
THEN
	PAT$SORT_SA_LVT( PAT$GET_NXT_SAT );
IF (.DO_LVT_SORT)
THEN
	PAT$SORT_SA_LVT( PAT$GET_NXT_LVT );

END;

GLOBAL ROUTINE PAT$CANC_MODULE : NOVALUE =

!++
! Functional Description:
!
!	Delete the symbols for a given list of module names from the RST,
!	or delete /ALL modules.  If the SCOPE is set to a module that is to be
!	cancelled, then the SCOPE is also cancelled.
!
! Implicit Inputs:
!
!	Context bit if /ALL was specified or not.
!	The expression list contains MC_PTRs to the indicated modules.
!
! Implicit Outputs:
!
!	none.
!
! Return Value:
!
!	NOVALUE
!
! Side Effects:
!
!	The symbols for the indicated modules are deleted from the RST.
!	If the symbols are not set, PATCH merely returns.  If an error occurs,
!	then a SIGNAL and UNWIND are performed.
!--

BEGIN

LOCAL
	MC_CHAIN : REF MC_RECORD,				! Pointer to scan module chain
	POINTER,						! Used to scan the arg list.
	SHRINK_LVT,						! Number of LVT records freed up.
	SHRINK_SAT,						! Number of SAT records freed up.
	MC_PTR : REF MC_RECORD;

!++
! If the module names come from the command argument list, then check the
! consistency of the list.  Otherwise, initialize in preparation for the
! "CANCEL MODULE /ALL" command.
!--
MC_CHAIN = 0;
IF ((POINTER = .PAT$GL_HEAD_LST) EQL 0)
THEN
	MC_PTR = MC_CHAIN = .PAT$GL_MC_PTR;

!++
! To avoid having to shrink the SAT or LVT when unnecessary, initialize
! the flags (actually, counts) which indicate whether or not any records have
! been removed from the corresponding data structures.
!--
SHRINK_LVT = 0;
SHRINK_SAT = 0;

!++
! Loop thru the arg list trying to delete the indicated modules from the RST.
!--
REPEAT
	BEGIN
	IF (.MC_CHAIN NEQ 0)
	THEN
		BEGIN
		!++
		! The next module name comes from the module chain.  Check
		! for the end of the chain.
		!--
		IF ((MC_PTR = .MC_PTR[MC_NEXT]) EQL 0)
		THEN
			EXITLOOP;
		END
	ELSE
		!++
		! The next module name comes from the command argument list.
		! Each argument is a pointer to the MC record for the module
		! to be deleted.
		!--
		MC_PTR = .LIST_ELEM_EXP1(.POINTER);

	!++
	! Don't try to delete one which is not already there,
	! and don't complain if we are asked to.
	!--
	IF (.MC_PTR [MC_IN_RST])
	THEN
		BEGIN
		!++
		! Zero out all LVT or SAT records which correspond
		! to NT records which we are about to release.
		!--
		SHRINK_SAT = .SHRINK_SAT +
			DELE_SAT_LVT( MC_PTR [MC_NT_STORAGE], PAT$GET_NXT_SAT );
		SHRINK_LVT = .SHRINK_LVT +
			DELE_SAT_LVT( MC_PTR [MC_NT_STORAGE], PAT$GET_NXT_LVT );


		!++
		! If we have just cancelled a module into which the current
		! SCOPE is pointing, we cancel that scope so as th let the
		! user know it is useless.
		!--
		IF (.PAT$GL_CSP_PTR NEQA 0)
		THEN
			BEGIN
			LOCAL
				CS_PTR : CS_POINTER;

			!++
			! Pick up the first entry in the CSP pathname vector
			! since that is the module name and is all we have
			! to look at to see if the CSP "points into" the
			! module we have just cancelled.
			!--
			CS_PTR = .PAT$GL_CSP_PTR[0];
			IF (CH$EQL(.CS_PTR[0], CS_PTR[1], .MC_PTR[MC_NAME_CS],
				MC_PTR[MC_NAME_ADDR]))
			THEN
				PAT$SAVE_SCOPE(FALSE);		! Cancel the SCOPE
			END;
		!++
		! Note that the module is about to be cancelled.  We can't turn
		! off MC_IN_RST yet because the access functions still use that
		! flag and there are still valid records in the storage
		! associated with this module.
		!--
		MC_PTR [MC_IS_DYING] = TRUE;

		!++
		! Unlink all NT records for this module from the hash chains
		! they are currently in, and release the vector storage taken
		! by them.
		!--
		UNLINK_NT_RECS( .MC_PTR );
		PAT$VS_FREE( MC_PTR [MC_NT_STORAGE] );
		END;
	!++
	! Check if there is another module name.
	!--
	IF (.MC_CHAIN EQL 0)
	THEN
		IF ((POINTER = .LIST_ELEM_FLINK(.POINTER)) EQL 0)
		THEN
			EXITLOOP;
	END;

!++
! For each module to be cancelled, we still have associated SAT/LVT storage
! which probably contains records that correspond to other modules.  We must
! move these to safer ground and then actually free up the storage.
!--
IF (.SHRINK_SAT NEQ 0)
THEN
	EMPTY_SAT_LVT( PAT$GET_NXT_SAT );
IF (.SHRINK_LVT NEQ 0)
THEN
	EMPTY_SAT_LVT( PAT$GET_NXT_LVT );

!++
! All modules previously _DYING are now dead.
!--
MC_PTR = .PAT$GL_MC_PTR;
WHILE( (MC_PTR = .MC_PTR [MC_NEXT]) NEQ 0 )
	DO
	BEGIN
	IF (.MC_PTR [MC_IS_DYING])
	THEN
	!++
		! Once _IN_RST is FALSE almost no other flags are believed.
		!--
		MC_PTR [MC_IN_RST] = FALSE;
	END;
END;

ROUTINE UNLINK_NT_RECS( MC_PTR ) : NOVALUE =

!++
! Functional Description:
!
!	Remove all NT records for the module indicated  by MC_PTR from the
!	hash chains they are in.  This is done in preparation for removing the
!	indicated module from the RST completely.
!
! Formal Parameters:
!
!	MC_PTR	-An RST pointer to the MC entry for
!		 the module we are to unlink NTs for.
!
! Implicit Inputs:
!
!	The NT records for the indicated module are all in contiguous storage
!	(the so-called "vector storage" for that module), and one can
!	'go thru' this vector and pick out the NT records given the data therein.
!	(Now we use RST_NT_OVERHEAD and the count byte for the associated symbol
!	name - but any 'contained' method will do).
!
! Implicit Outputs:
!
!	All existing hash chains are correctly re-linked,
!	bypassing all NTs for the indicated module.
!
! Return Value:
!
!	NOVALUE - we make no checks on the given data.
!--

BEGIN

MAP
	MC_PTR : REF MC_RECORD;

LOCAL
	NT_PTR : REF NT_RECORD,					! Pointer we use to go thru the storage
								! vector of NT records.
	NT_VEC_DESC : REF VECT_STORE_DESC;			! We use the MC-contained descriptor of
								! the vector storage for the indicated NTs.

!++
! Pick up the vector storage descriptor for the  indicated NT records.
!--
NT_VEC_DESC = MC_PTR [MC_NT_STORAGE];

!++
! The first NT record begins in the first byte of the storage vector, and
! the storage 'marker' field has been set to the first byte of unallocated
! storage.
!--
NT_PTR = .NT_VEC_DESC [STOR_BEGIN_RST];

!++
! Go thru the storage vector sequentially.
!--
WHILE( .NT_PTR LSSA .NT_VEC_DESC [STOR_MARKER] )
	DO
	BEGIN
	LOCAL
		BACKWARD_NT : REF NT_RECORD,
		FORWARD_NT  : REF NT_RECORD;

	!++
	! Pick up the two links (forward and backward) which indicate where in
	! the hash chain this NT record is.
	!--
	BACKWARD_NT = .NT_PTR [NT_BACKWARD];
	FORWARD_NT = .NT_PTR [NT_FORWARD];

	!++
	! Unlink the NT record from its hash chain, i.e. Make the forward
	! pointer of our back NT record point to the one after us.  Note that
	! if our back pointer points back to the hash chain, then we are
	! actually overwriting the RST pointer in that hash chain entry (as we
	! want to).  This is why NT_FORWARD must be the first 2 bytes of an NT record.
	!--
	BACKWARD_NT [NT_FORWARD] = .FORWARD_NT;

	!++
	! If we are not at the end of the hash chain, we must connect up the
	! hole we are making by unlinking this NT record.
	!--
	IF (.FORWARD_NT NEQ 0)
	THEN
		FORWARD_NT [NT_BACKWARD] = .BACKWARD_NT;

	!++
	! Find the next NT record in the vector by adding the overhead bytes
	! (fixed) for each record to the count bytes for the name.
	!--
	NT_PTR = .NT_PTR + RST_NT_OVERHEAD + .NT_PTR [NT_NAME_CS];
	END;

!++
! All NT records are successfully unlinked.
!--
END;

ROUTINE EMPTY_SAT_LVT( access_function ) : NOVALUE =

!++
! Functional Description:
!
!	Empty out the storage associated with SAT/LVT records
!	for all modules in the MC marked MC_IS_DYING,
!	(there may be some records therein which belong to another module)
!	by moving any valid records therein to storage
!	associated with a module that is not being deleted.
!	Then release the _DYING storage since the associated modules
!	are to be deleted from the RST.
!
! Formal Parameters:
!
!	access_function	-The address of the function we should call
!			 to access the indicated SAT/LVT structure.
!
! Implicit Inputs: (assumptions)
!
!	The SAT_RECORD structure is appropriate for moving SAT/LVT
!	records around - i.e. SATs are larger than LVTs - as
!	long as we use the record_size value returned by the
!	SL_ACCE_INIT call instead of the one associated with
!	the SAT record itself.
!
! Implicit Outputs:
!
!	The indicated structure is left in the state that LOOKUP_SAT
!	and LOOKUP_LVT assume they are in.
!
! Routine Value:
!
!	NOVALUE
!
! Side Effects:
!
!	The SAT/LVT records marked for deletion are overwritten
!	by valid records; all SAT/LVT storage associated with
!	MC_IS_DYING modules is released.
!--

BEGIN

LOCAL
	RECORD_SIZE,						! The number of bytes in each record.
	!++
	! Declare a pointer which is suitable for use as a REF SAT_RECORD as
	! well as a REF LVT_RECORD. This pointer is used to sequentially go thru
	! vector storage to pick up non-deleted records. We keep two pointers
	! to the SAT or LVT record currently under consideration.  One, 'current',
	! is NOT a SAT_POINTER because longword pointers are not easily
	! comparable to the NT-pointers we get from storage descriptors.  The
	! other is a   'real' SAT_POINTER which always corresponds to 'current'.
	!--
	CURRENT,
	CURRENT_SAT_PTR : REF SAT_RECORD,
	NEXT_FREE : REF SAT_RECORD,				! Corresponding to 'current' is a pointer which indicated
								! where the next free SAT/LVT record is.
	STORE_DESC : REF VECT_STORE_DESC,			! We look at the vector storage which is allocated
								! for SAT/LVTs for each _DYING module.

	END_MARKER,						! Maintain a pointer into the vector storage which
								! says where the last+1 record associated
								! with a given module starts.
	MC_PTR : REF MC_RECORD,					! We scan the MC to pick out all _DYING modules.
	MOVED_COUNT;						! Tally up how many records we move.

!++
! Set up to access the structure in the mode which we get told of FREE records
! only, so that we can deduce where to store the still-used ones we have to remove
! from the _DYING storage.  While we're at it pick up the size of the indicated
! fixed-size records.
!--
RECORD_SIZE = (.access_function)(SL_ACCE_INIT);

!++
! Scan the module chain to pick up all modules marked as _DYING.  They are the
! ones that we have to clean-up and release storage for. We purposely don't ever
! look at the MC record allocated to globals since it never _IS_DYING.
!--
MC_PTR = .PAT$GL_MC_PTR;
WHILE( (MC_PTR = .MC_PTR [MC_NEXT]) NEQ 0 )
DO
	BEGIN
	!++
	! We only consider _DYING modules.  The _DYING flag is meaningless if
	! the module is not _IN_RST.
	!--
	IF (.MC_PTR [MC_IN_RST] AND .MC_PTR [MC_IS_DYING])
	THEN
		BEGIN
		!++
		! For each module we have to look at the vector storage
		! which corresponds to the records we are to clean up.
		!--
		STORE_DESC = (IF (.access_function EQL PAT$GET_NXT_SAT)
			      THEN MC_PTR [MC_SAT_STORAGE]
			      ELSE MC_PTR [MC_LVT_STORAGE]);

		!++
		! The records that we want to move are those within the
		! bounds defined by the _DYING module that are not
		! already marked for deletion.  We go thru this storage
		! using and comparing RST-pointers, and build a corresponding
		! SAT-pointer when we want to use it.
		!--
		END_MARKER = .STORE_DESC [STOR_MARKER];
		IF ((CURRENT = .STORE_DESC [STOR_BEGIN_RST]) EQL 0)
		THEN
			!++
			! No vector storage is allocated for this module
			! for this kind of storage.  Simply fake having
			! come to the end of the storage.
			!--
			CURRENT = .END_MARKER;
		WHILE( .CURRENT LSSA .END_MARKER )
			DO
			BEGIN
			!++
			! Construct a SAT pointer to correspond to the
			! current place in the storage vector.
			!--
			CURRENT_SAT_PTR = .CURRENT + .PAT$GL_RST_BEGN;

			!++
			! We only want to deal with records not marked for
			! deletion.
			!--
			IF (.CURRENT_SAT_PTR [SAT_NT_PTR] NEQ 1)
			THEN
				BEGIN
				!++
				! See if there is some place to put this record.
				!--
				IF ((NEXT_FREE = (.access_function)(SL_ACCE_FREE)) EQL 0)
				THEN
					BEGIN
					!++
					! This should never happen because the
					! storage for a given module should be 
					! big enough to contain all SATs/LVTs for
					! that module.  If this is the number of
					! records marked for deletion, any real
					! records left herein should correspond to
					! outside records now marked for deletion.
					!--
					$FAO_TT_OUT('!/empty free storage error');
					RETURN;
					END;

				!++
				! Move the valid record to a safe place.
				!--
				CH$MOVE( .record_size, .CURRENT_SAT_PTR, .NEXT_FREE );
				END;

			!++
			! Go back to look at the next record in the
			! current vector storage.
			!--
			CURRENT = .CURRENT + .RECORD_SIZE;
			END;

		!++
		! All records are now moved to a safe place so we 
		! can free up the associated vector storage.
		!--
		PAT$VS_FREE( .STORE_DESC );
		END;						! Go back to consider the next _DYING module.
	END;							! Go back and consider the next module in the chain.

!++
! All SAT/LVT storage has been freed up - we still have to leave what's left in
! order so that the accessing functions can use them.  (LOOKUP_SAT/LVT)
! PAT$SORT_SA_LVT believes MC_IN_RST which is at this point untrue, but since
! the associated storage descriptor has been zeroed out, the accessing function
! will work OK.
!--
PAT$SORT_SA_LVT( .access_function );

END;

GLOBAL ROUTINE PAT$SORT_SA_LVT( ACCESS_FUNCTION ) : NOVALUE =

!++
! Functional Description:
!
!	This routine is an unspeakably inefficient, (shell) sort
!	suitable to sort either the LVT or the SAT into ascending order.
!	It is necessary because access to the LVT or SAT assumes that
!	it has been done.
!
! Formal Parameters:
!
!	ACCESS_FUNCTION -The function which must be called to
!			 gain sequential access to the SAT or LVT.
!
! Implicit Inputs: (assumptions)
!
!	SATs/LVTs are accessed via longword pointers, vector
!	storage descriptors contain RST-pointers, and CH$MOVE
!	works with the same kind of pointer as SAT_POINTER does.
!
!	The SAT_RECORD structure is appropriate for either type of
!	vector providing that we only use the _NT_PTR and _LB fields.
!
!	A temporary SAT record is large enough to contain an LVT record.
!
!	The sort is on the _LB field, which corresponds to the _VALUE
!	field in LVT records.  The comparison is UNSIGNED.
!
! Implicit Outputs:
!
!	None.
!
! Routine Value:
!
!	NOVALUE
!
! Side Effects:
!
!	The SAT/LVT vector is sorted into ascending order.
!
!	This routine knows the difference between RST pointers and 'real'
!	pointers.  (The former are stored in VECT_STORE_DESCS and the latter
!	are used to reference SAT/LVT structures.)
!--

BEGIN

LABEL
	INIT_LOOP,
	SORT_LOOP;

LOCAL
	MC_PTR : REF MC_RECORD,					! Current module pointer
	STORE_DESC : REF VECT_STORE_DESC,			! Storage within the current module
	NXT_MC_PTR : REF MC_RECORD,				! Pointer to next module
	NXT_STORE_DESC : REF VECT_STORE_DESC,			! Storage within the next module
	SAT_FLAG,						! 1=SAT, 0=LVT SORT
	ELEMENT_SIZE,						! The number of bytes in a SAT/LVT record.
	REC_PTR : REF SAT_RECORD;				! Declare a pointer which is suitable for use as
								! a REF SAT_RECORD as well as a REF LVT_RECORD.
								! This pointer is used to sequentially go thru
								! the indicated vector to do the sort.

!++
! The (shell) sort works by going thru the vector sequentially, considering
! each element, finding the minimum of those which are left, and swapping
! this minimum with the current one if such a minimum can be found.
!
! REC_PTR points to the record currently under consideration.
! MIN_PTR points to the smallest one of those left.
! TMP_PTR is used to deduce what MIN_PTR should be.
!
! Set up to begin accessing the LVT or SAT.
!--
ELEMENT_SIZE = (.ACCESS_FUNCTION)( SL_ACCE_INIT );
SAT_FLAG = .ACCESS_FUNCTION EQL PAT$GET_NXT_SAT;
MC_PTR = .PAT$GL_MC_PTR;
REPEAT
    INIT_LOOP:
	BEGIN
	!++
	!  Check for the end of the module chain.
	!--
	IF (.MC_PTR EQL 0)
	THEN
		!++
		! The SAT/LVT structure is completely empty.  This is not a
		! sort error.
		!--
		RETURN(TRUE);

	!++
	! The current module is to be ignored if the user has not brought it
	! into the RST.
	!--
	IF NOT .MC_PTR[MC_IN_RST]
	THEN
		BEGIN
		MC_PTR = .MC_PTR[MC_NEXT];
		LEAVE INIT_LOOP;
		END;

	!++
	! Check if this module has any of the kind of storage sought.
	! No storage is allocated if the "BEGIN" field is null.
	!--
	STORE_DESC = (IF .SAT_FLAG
		      THEN MC_PTR[MC_SAT_STORAGE]
		      ELSE MC_PTR[MC_LVT_STORAGE]);
	IF (.STORE_DESC[STOR_BEGIN_RST] EQL 0)
	THEN
		BEGIN
		MC_PTR = .MC_PTR[MC_NEXT];
		LEAVE INIT_LOOP;
		END;

	!++
	! The first SAT/LVT record has been found.  Discontinue looping.
	!--
	REC_PTR = .STORE_DESC[STOR_BEGIN_RST] + .PAT$GL_RST_BEGN;
	EXITLOOP;
	END;
!++
! There is at least one record in the logical SAT/LVT structure.  Now loop
! to actually do the sort.
!--
REPEAT
	BEGIN
	LABEL
		MIN_LOOP;
	LOCAL
		NXT_STORE : REF VECT_STORE_DESC,
		TMP_STORE : REF VECT_STORE_DESC,
		FIRST_FLAG,
		NXT_MC_PTR : REF MC_RECORD,
		TMP_MC_PTR : REF MC_RECORD,
		MIN_PTR	: REF SAT_RECORD,
		NXT_PTR,
		TMP_PTR;
	TMP_PTR = .REC_PTR - .PAT$GL_RST_BEGN;
	MIN_PTR = .REC_PTR;
	!++
	! Find the minimum of those left.
	!--
	FIRST_FLAG = TRUE;
	TMP_MC_PTR = .MC_PTR;
	TMP_STORE = .STORE_DESC;

	REPEAT
	    MIN_LOOP:
		BEGIN
		LOCAL
			TMP_SAT_PTR : REF SAT_RECORD;

		IF (.TMP_PTR EQL 0)
		THEN
			BEGIN
			!++
			! The next record must come from the next module in
			! the chain.
			!--
			IF ((TMP_MC_PTR = .TMP_MC_PTR[MC_NEXT]) EQL 0)
			THEN
				EXITLOOP;			! No more for min search
			IF NOT .TMP_MC_PTR[MC_IN_RST]
			THEN
				LEAVE MIN_LOOP;

			!++
			! Check if this module has any of the kind of storage
			! sought.  No storage is allocated if the "BEGIN" field
			! is null.
			!--
			TMP_STORE = (IF .SAT_FLAG
				     THEN TMP_MC_PTR[MC_SAT_STORAGE]
				     ELSE TMP_MC_PTR[MC_LVT_STORAGE]);
			IF (.TMP_STORE[STOR_BEGIN_RST] EQL 0)
			THEN
				LEAVE MIN_LOOP;
			TMP_PTR = .TMP_STORE[STOR_BEGIN_RST];
			IF .FIRST_FLAG
			THEN
				BEGIN
				NXT_PTR = 0;
				NXT_STORE = .TMP_STORE;
				NXT_MC_PTR = .TMP_MC_PTR;
				END
			END
		ELSE
			IF NOT ((TMP_PTR = .TMP_PTR + .ELEMENT_SIZE) LSSA
				(.TMP_STORE[STOR_MARKER]))
			THEN
				BEGIN
				TMP_PTR = 0;
				LEAVE MIN_LOOP;
				END
			ELSE
				IF .FIRST_FLAG
				THEN
					NXT_PTR = .TMP_PTR;
			!++
			! Check if a new minimum has been found.
			!--
			TMP_SAT_PTR = .TMP_PTR + .PAT$GL_RST_BEGN;
			IF (.TMP_SAT_PTR[SAT_LB] LSSA .MIN_PTR[SAT_LB])
			THEN
				MIN_PTR = .TMP_SAT_PTR;	! A NEW MINIMUM WAS FOUND
			FIRST_FLAG = FALSE;
			END;					! End of MIN_LOOP
		!++
		! If no "NEXT" pointer was found above, there were no more
		! records to search.
		!--
		IF .FIRST_FLAG
		THEN
			EXITLOOP;

	!++
	! If the minimum has not changed, having started out as the current
	! one, then we do nothing except go on to the next element in the
	! vector.  Otherwise we swap the minimum with the current so that we
	! can then go on to the next anyway.
	!--
	IF (.MIN_PTR NEQ .REC_PTR)
	THEN
		BEGIN
		LOCAL
			TMP_RECORD : SAT_RECORD;

		!++
		! Swap the old current one with the new minimum.
		!--
		CH$MOVE( .ELEMENT_SIZE, .REC_PTR, TMP_RECORD );
		CH$MOVE( .ELEMENT_SIZE, .MIN_PTR, .REC_PTR );
		CH$MOVE( .ELEMENT_SIZE, TMP_RECORD, .MIN_PTR );
		END;

	!++
	! Update the "CURRENT" record by effectively going back to the first
	! "NEXT" record found above.
	!--
	IF ((REC_PTR = .NXT_PTR) EQL 0)
	THEN
		BEGIN
		MC_PTR = .NXT_MC_PTR;
		STORE_DESC = .NXT_STORE;
		REC_PTR = .STORE_DESC[STOR_BEGIN_RST];
		END;
	REC_PTR = .REC_PTR + .PAT$GL_RST_BEGN;
	END;							! End of outer loop

!++
! At this point the vector is sorted into ascending order.
!--
RETURN(TRUE);
END;

ROUTINE DELE_SAT_LVT( STORE_DESC_ADDR, ACCESS_FUNCTION ) =

!++
! Functional Description:
!
!	This routine deletes records from the LVT or SAT
!	vector it is given a pointer to (VEC_PTR).  The
!	records that are deleted are those that correspond
!	(point) to an indicated module (STORE_DESC_ADDR).
!	The correspondence is discovered by seeing if the
!	NT_PTR in a given LVT/SAT record lies within the
!	RST storage for the NTs for the indicated module.
!	This is faster than actually following the scope
!	chains of the pointed-to NT records to see if 
!	they belong to the indicated module.
!
! Formal Parameters:
!
!	STORE_DESC_ADDR	-The address of the storage vector descriptor
!			 which completely describes the NT storage
!			 for the indicated module.
!	ACCESS_FUNCTION	-The name of the function to call to 
!			 access the indicated structure.
!
! Implicit Inputs: (assumptions)
!
!	We assume that direct comparisons of RST pointers
!	is valid.  (i.e. that "begin < ptr < end" is a valid
!	test of whether 'ptr' RST-points to somewhere inbetween
!	where 'begin' and 'end' RST-point.
!
! Implicit Outputs:
!
!	None.
!
! Routine Value:
!
!	The number of records which are marked for deletion
!	in the indicated structure.
!
! Side Effects:
!
!	Records are 'deleted' from the SAT/LVT vector.
!	Really, this only means that the indicated records
!	are marked with their NT_PTR = 1.  More processing
!	of this structure is necessary before it is usable,
!	but it is better to do this processing only once
!	if several modules are to be deleted from the RST.
!--

BEGIN

MAP
	STORE_DESC_ADDR : REF VECT_STORE_DESC;			! Storage descriptor for the NTs.

LOCAL
	GLOBALS : REF VECT_STORE_DESC,				! We pick up a storage descriptor for GLOBALS.
	DELETE_COUNT,						! Tally up how many records we delete.
	REC_PTR : REF SAT_RECORD,				! Declare a pointer which is suitable for use as
								! a REF SAT_RECORD as well as a REF LVT_RECORD.
								! This pointer is used to sequentially go thru
								! the indicated vector.
	NT_BEGINS : REF NT_RECORD,				! NT storage RST limits.
	NT_ENDS   : REF NT_RECORD,
	GL_NTS_BEGIN : REF NT_RECORD,
	GL_NTS_END   : REF NT_RECORD;

!++
! We tally up the number of records which we mark
! for deletion so that we can return this value.
!--
DELETE_COUNT = 0;

!++
! Pick up the RST limit pointers of where the associated NT records exist,
! and where the  global NT records exist.
!--
GLOBALS = PAT$GL_MC_PTR [MC_NT_STORAGE];
NT_BEGINS = .STORE_DESC_ADDR [STOR_BEGIN_RST];
NT_ENDS = .STORE_DESC_ADDR [STOR_END_RST];
GL_NTS_BEGIN = .GLOBALS [STOR_BEGIN_RST];
GL_NTS_END = .GLOBALS [STOR_END_RST];

!++
! Go thru the structure sequentially checking for records to mark as deleted.
!--
(.ACCESS_FUNCTION)( SL_ACCE_INIT );
WHILE( (REC_PTR = (.ACCESS_FUNCTION)( SL_ACCE_RECS )) NEQ 0 )
DO
	BEGIN
	!++
	! Delete the record if it points to an NT record
	! in the storage for the indicated module.
	!--
	IF (.REC_PTR [SAT_NT_PTR] GEQA .NT_BEGINS) AND 
	   (.REC_PTR [SAT_NT_PTR] LSSA .NT_ENDS)
	THEN
		BEGIN
		!++
		! Actually, we can only mark it for deletion because it is much
		! more efficient to compress the entire structure only once.
		!--
		DELETE_COUNT = .DELETE_COUNT +1;
		REC_PTR [SAT_NT_PTR] = 1;
		END
	ELSE
	!++
	! If that didn't detect something to delete, we must also see if we are
	! deleting global literals since they must go away too.
	!--
	IF (.ACCESS_FUNCTION EQL PAT$GET_NXT_LVT)
	THEN
		IF (.REC_PTR [SAT_NT_PTR] GEQA .GL_NTS_BEGIN) AND
		    (.REC_PTR [SAT_NT_PTR] LSSA .GL_NTS_END)
		THEN
			BEGIN
			DELETE_COUNT = .DELETE_COUNT +1;
			REC_PTR [SAT_NT_PTR] = 1;
			END;
		END;						! Loop back to consider the next record.

!++

! Return the number of records which we  have marked for deletion.
!--
RETURN(.DELETE_COUNT);
END;

END								! End of module
ELUDOM
