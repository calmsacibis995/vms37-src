MODULE PATVEC (	!
		%IF %VARIANT EQL 1
		%THEN
			ADDRESSING_MODE (EXTERNAL = LONG_RELATIVE, NONEXTERNAL = LONG_RELATIVE),
		%FI
		IDENT = 'V03-000'
		) =
BEGIN

!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	PATCH
!
! ABSTRACT:	Handle so-called 'vector storage' in conjunction
!		with the RST build and rebuild modules.
!
! ENVIRONMENT:	This module runs on VAX under VAX/VMS, user mode, non-AST level.
!
! Author:	Kevin Pammett, August 12, 1977.
!
! Version:	X01.03
!
! MODIFCATIONS:
!
!  NO	DATE		PROGRAMMER		PURPOSE
!  --	----		----------		-------
!
!  00	21-DEC-77	K.D. MORSE		ADAPT VERSION 35 FOR PATCH.
!  01	25-APR-78	K.D. MORSE		CONVERT TO NATIVE COMPILER.
!  02	18-MAY-78	K.D. MORSE		NO CHANGES FOR VERS 36.
!  03	13-JUN-78	K.D. MORSE		ADD FAO COUNTS TO SIGNALS.
!
!--

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
	PAT$VS_INIT : NOVALUE,					! Initialize a vector storage area.
	PAT$VS_GET,						! Allocate records from a so-called
								!  "vector storage" vector.
	PAT$VS_FREE : NOVALUE,					! Release vector storage.
	PAT$VS_SHRINK : NOVALUE;				! Free up unused vector storage.

!
! INCLUDE FILES:
!

LIBRARY 'SYS$LIBRARY:STARLET.L32';
REQUIRE 'SRC$:PATPCT.REQ';
REQUIRE 'SRC$:VXSMAC.REQ';
REQUIRE 'SRC$:PATRST.REQ';
REQUIRE 'SRC$:SYSSER.REQ';

!
! MACROS:
!

!
! EQUATED SYMBOLS:
!


!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
	PAT$RST_FREEZ,						! Allocate and zero RST-pointer storage.
	PAT$RST_RELEASE;					! Free up RST-pointer storage.

EXTERNAL
	PAT$GL_RST_BEGN;					! STARTING ADDRESS OF RST

GLOBAL ROUTINE PAT$VS_INIT( STORE_DESC_ADDR, NUM_ELEMENTS, ELEMENT_SIZE ) : NOVALUE =

!++
! Functional Description:
!
!	Initialize storage for a so-called "storage vector".
!	See DBGRST.REQ for a description of these structures.
!
! Formal Parameters:
!
!	STORE_DESC_ADDR	-The address of the storage vector descriptor
!			 which this routine is to initialize.
!	NUM_ELEMENTS	-The maximum number of elements which will
!			 ever be allocated from this vector.
!	ELEMENT_SIZE	-The maximum size, in bytes, of each element.
!
! Implicit Inputs:
!
!	Since we assume that records are fixed-length,
!	we actually allocate more storage than
!	we will really need.  This will be fixed up when we 
!	can 'shrink' RST storage.
!
! Routine Value:
!
!	NOVALUE - because if we run out of storage (the only
!		  thing which can go wrong), we don't get
!		  control back anyways.
!
! Side Effects:
!
!	The storage descriptor is initialized in such
!	a way that GET_VEC_STORAGE can do its thing.
!
!	RST storage is allocated.
!--

BEGIN

MAP
	STORE_DESC_ADDR : REF VECT_STORE_DESC;			! We get passed a pointer to the storage
								! descriptor for the module we are
								! initializing vector storage for.

LOCAL
	STORAGE : REF MC_RECORD;				! Pointer to the actual storage
								! we allocate.

!++
! Ask for the necessary RST storage.   Note that we don't get control back
! if the requisition is denied.
!--
STORAGE = PAT$RST_FREEZ( RST_UNITS(.ELEMENT_SIZE * .NUM_ELEMENTS));

!++
! Initialize the vector storage descriptor. The 'marker' starts out being
! the same as the beginning address since initially the entire vector is
! available for re-allocation.
!--
STORE_DESC_ADDR[ STOR_BEGIN_RST ] = .STORAGE;
STORE_DESC_ADDR[ STOR_MARKER ] = .STORAGE;

!++
! The end RST address is calculated by taking into account that the standard
! PATCH storage manager works in LONGWORDs and rounds up.
!--
STORE_DESC_ADDR[ STOR_END_RST ] = .STORAGE
		+ (RST_UNITS(.ELEMENT_SIZE*.NUM_ELEMENTS) * %UPVAL);
END;

GLOBAL ROUTINE PAT$VS_FREE( STORE_DESC_ADDR ) : NOVALUE =

!++
! Functional Description:
!
!	Release storage for a so-called "storage vector".
!	See PATRST.REQ for a description of these structures.
!
! Formal Parameters:
!
!	STORE_DESC_ADDR	-The address of the storage vector descriptor
!			 which completely describes this storage.
!
! Implicit Inputs:
!
!	We assume that subtracting two RST pointers
!	("end-begin") gives the number of bytes between them.
!
! Routine Value:
!
!	NOVALUE - because if there is a free storage error (the only
!		  thing which can go wrong), we don't get
!		  control back anyways.
!
! Side Effects:
!
!	RST storage is released and the 'begin' pointer field of
!	the corresponding storage descriptor is zeroed out.
!--

BEGIN

MAP
	STORE_DESC_ADDR : REF VECT_STORE_DESC;			! We get passed a pointer to the storage
								! descriptor for the module we are
								! releasing vector storage for.

LOCAL
	VECT_SIZE;						! Pointer to the actual storage
								! we allocate.

!++
! Don't try to free storage which is not allocated.
!--
IF( .STORE_DESC_ADDR[ STOR_BEGIN_RST ] EQL 0 )
THEN
	RETURN;

!++
! Pick up the size of the vector, in bytes.
!--
VECT_SIZE = .STORE_DESC_ADDR[ STOR_END_RST ] - .STORE_DESC_ADDR[ STOR_BEGIN_RST ];

!++
! Release the storage.
!--
PAT$RST_RELEASE( .STORE_DESC_ADDR[ STOR_BEGIN_RST ], RST_UNITS(.VECT_SIZE));

!++
! Zero out the vector storage descriptor's 'begin' field.
! Routines OK_TO_ADD (etc.) check this field and assume that
! if it is non-zero then storage is still allocated for this module.
!--
STORE_DESC_ADDR[ STOR_BEGIN_RST ] = 0;
END;

GLOBAL ROUTINE PAT$VS_SHRINK( STORE_DESC_ADDR ) : NOVALUE =

!++
! Functional Description:
!
!	Free up the unused portion of the indicated vector storage.
!
! Formal Parameters:
!
!	STORE_DESC_ADDR	-The address of the storage vector descriptor
!			 which completely describes this storage.
!
! Implicit Inputs:
!
!	If the STOR_BEGIN_RST is the same as STOR_MARKER then
!	no vector storage was actually allocated.  So far this
!	is the only case we handle - we free up the entire
!	vector.
!
! Routine Value:
!
!	NOVALUE - because if there is a free storage error (the only
!		  thing which can go wrong), we don't get
!		  control back anyways.
!
! Side Effects:
!
!	RST storage may be released and the 'begin' pointer field of
!	the corresponding storage descriptor is zeroed out.
!--

BEGIN

MAP
	STORE_DESC_ADDR : REF VECT_STORE_DESC;			! We get passed a pointer to the storage
								! descriptor for the module we are
								! releasing vector storage for.

LOCAL
	VECT_SIZE;						! Pointer to the actual storage
								! we allocate.

!++
! Don't try to free storage which is not allocated.
!--
IF( .STORE_DESC_ADDR[ STOR_BEGIN_RST ] EQL 0 )
THEN
	RETURN;

!++
! If storage has been allocated but no records therein, we can free up the
! whole thing.
!--
IF( .STORE_DESC_ADDR[ STOR_BEGIN_RST ] EQL .STORE_DESC_ADDR[ STOR_MARKER ] )
THEN
	PAT$VS_FREE(.STORE_DESC_ADDR);
END;

GLOBAL ROUTINE PAT$VS_GET( STORE_DESC_ADDR, RECORD_SIZE ) =

!++
! Functional Description:
!
!	Allocate a given-length record from so-called "vector storage"
!	given a pointer to the associated vector storage descriptor.
!
! Formal Parameters:
!
!	STORE_DESC_ADDR	-The address of the storage vector descriptor
!			 which this routine works from.
!	RECORD_SIZE	-The number of bytes required for
!			 the new record.
!
! Implicit Inputs:
!
!	This routine builds in how to translate RST-pointers
!	to longword pointers.
!
!	We also build in how one deals with storage vector descriptors.
!	This includes the fact that we look at the pointer-type
!	field in the storage descriptor to determine whether we 
!	should return an RST-pointer or a 'longword' pointer.
!	(See PATRST.REQ)
!
! Routine Value:
!
!	A pointer to the allocated storage, 0 when there is none left.
!
!	The pointer type (RST or 'longword') is determined
!	by looking at the STOR_LONG_PTRS field of the given
!	storage descriptor.
!
! Side Effects:
!
!	The storage vector descriptor fields
! are altered to reflect the allocation
! of another record.
!--

BEGIN

MAP
	STORE_DESC_ADDR : REF VECT_STORE_DESC;			! We get passed a pointer to the descriptor
								! for the storage we are allocating from.

LOCAL
	STORAGE : REF RST_POINTER,				! An RST-pointer to the actual storage
								! we will allocate.
	NEW_MARKER : REF RST_POINTER;				! How far along this allocation will
								! move the current marker.

!++
! If we get to allocate the requested storage, it will be from where the
! current marker says we should get it.
!--
STORAGE = .STORE_DESC_ADDR[ STOR_MARKER ];

!++
! See if taking the necessary storage from the indicated vector would overflow it.
!--
NEW_MARKER = .STORAGE + .RECORD_SIZE;
IF( .NEW_MARKER GTRA .STORE_DESC_ADDR[ STOR_END_RST ] )
THEN
	RETURN(FALSE);						! No more storage left.

!++
! Update the storage descriptor to reflect the allocation of this new record.
!--
STORE_DESC_ADDR[ STOR_MARKER ] = .NEW_MARKER;

!++
! We return an RST-pointer or a longword pointer, depending on a field in the
! storage descriptor.  This field is initialized in build_module().
!--
IF( .STORE_DESC_ADDR[ STOR_LONG_PTRS ] )
THEN
	STORAGE = .STORAGE + .PAT$GL_RST_BEGN;			! Make an RST-pointer into a longword pointer.

RETURN( .STORAGE );
END;

END				!End of module
ELUDOM
