MODULE PATSYM (
		%IF %VARIANT EQL 1
		%THEN
			ADDRESSING_MODE (EXTERNAL = LONG_RELATIVE, NONEXTERNAL = LONG_RELATIVE),
		%FI
		IDENT = 'V03-000') =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	PATCH
!
! ABSTRACT:
!
!	This module contains the routines for manipulating the
!	user-defined and global symbols.
!
! ENVIRONMENT:	STARLET, user mode, interrupts disabled.
!
! Version:	V02-009
!
! History:
!	Author:
!		Carol Peters, 13 Dec 1976: Version 01
!
! MODIFIED BY:
!
!	V02-009	PCG0001		Peter George		02-FEB-1981
!		Add require statement for LIB$:PATDEF.REQ
!
!	Modified by:
!		Kathleen Morse, 19 Oct 1977: Version X01.00
!
! Revision history:
!
!  NO	DATE		PROGRAMMER		PURPOSE
!  --	----		----------		-------
!
!  00	19-OCT-77	K.D. MORSE		ADAPT VERSION 15 FOR PATCH
!  01	5-JAN-78	K.D. MORSE		NO CHANGES FOR 16-17.
!  02	7-MAR-78	K.D. MORSE		ADD PAT$VAL_TO_DEF.
!  03	7-APR-78	K.D. MORSE		ADD PAT$FIND_VAL TO LOOK UP
!						USER-DEFINED SYMBOLS (18).
!  04	25-APR-78	K.D. MORSE		CONVERT TO NATIVE COMPILER.
!  05	18-MAY-78	K.D. MORSE		NO CHANGES FOR VERS 19.
!  06	06-JUN-78	K.D. MORSE		REMOVE PAT$VAL_TO_DEF AND ADD
!						CODE TO PAT$FIND_VAL TO FIND
!						CLOSEST VALUE.
!  07	07-JUN-78	K.D. MORSE		ADD PAT$ADD_LABELS.
!  08	13-JUN-78	K.D. MORSE		ADD FAO COUNTS TO SIGNALS.
!
!--

FORWARD ROUTINE
	PAT$FIND_VAL,						! Lookup symbol given value
	PAT$DEFINE_SYM : NOVALUE,				! Stores a user-defined symbol in the symbol table
	PAT$FIND_SYM,						! Finds a symbol in symbol table
	PAT$ADD_LABELS : NOVALUE;				! Adds labels from one symbol list to user-defined symbol table

LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:VXSMAC.REQ';
REQUIRE 'SRC$:PATPCT.REQ';
REQUIRE 'SRC$:PATGEN.REQ';
REQUIRE 'LIB$:PATDEF.REQ';				! Defines literals
REQUIRE 'LIB$:PATMSG.REQ';
REQUIRE 'SRC$:BSTRUC.REQ';
REQUIRE 'SRC$:DLLNAM.REQ';
REQUIRE 'SRC$:SYSSER.REQ';

EXTERNAL ROUTINE
	PAT$FREERELEASE,					! Deallocates a block of free storage
	PAT$FREEZ;						! Allocates a block of free storage

EXTERNAL
	PAT$GL_SYMHEAD,						! Pointer to listhead entry of user-defined symbol table
	PAT$GL_SYMTBPTR;					! Symbol table listhead

BUILTIN
	INSQUE;


GLOBAL ROUTINE PAT$FIND_VAL (VALUE, MATCH_FLAG) =

!++
! Functional description:
!
!	Searches (in a binary manner) through the doubly-linked symbol
!	table for the name of a symbol which matches the given value.
!	If such a symbol is found, the address of the entry is
!	returned.  Otherwise 0 is returned.
!
!	If MATCH_FLAG is TRUE, an exact match must be found.
!	Otherwise we return a pointer to the closest lower symbol.
!
! Calling sequence:
!
!	CALLS #2, PAT$FIND_VAL
!
! Inputs:
!
!	VALUE		-the key we are to search for
!	MATCH_FLAG	-TRUE => insist on an exact match,
!			 FALSE => the closest one will do.
!
! Implicit inputs:
!
!	PAT$GL_SYMTBPTR, pointer to the header link in the current symbol table.
!
! Outputs:
!
!	The address of the symbol entry, or zero, if the name is not found.
!
! Implicit outputs:
!
!	none
!
! Routine value:
!
!	an address or zero
!
! Side effects:
!
!	none
!--

BEGIN

LOCAL
	RETURN_PTR,						! Pointer to closest matched entry
	POINTER;						! Pointer to current symbol entry

!++
! Assume there is no closest match (RETURN_PTR = 0).
!--
RETURN_PTR = 0;

!++
! Set pointer to the first entry in the table.  Loop, searching the table
! until an exact match is found or there is no more table.
!--
POINTER = .DLL_RLINK (.PAT$GL_SYMTBPTR);
WHILE .POINTER NEQ .PAT$GL_SYMTBPTR
DO
	BEGIN
	!++
	! Look for exact match.
	!--
	IF (.SYM_VALUE(.POINTER) EQLU .VALUE)
	THEN
		RETURN .POINTER;

	!++
	! Check if closest match is desired.  If so, check that current entry
	! is less than the value sought and if it is closer than RETURN_PTR.
	!--
	IF (NOT .MATCH_FLAG)
	THEN
		IF (.SYM_VALUE(.POINTER) LEQU .VALUE)
		THEN
			BEGIN
			IF (.RETURN_PTR EQLA 0)
			THEN
				RETURN_PTR = .POINTER
			ELSE
				IF (.SYM_VALUE(.RETURN_PTR) LEQU .SYM_VALUE(.POINTER))
				THEN
					RETURN_PTR = .POINTER;
			END;
		
	!++
	! Go back and look at the next element on the list.
	!--
	POINTER = .DLL_RLINK(.POINTER);
	END;
RETURN(.RETURN_PTR);
END;

GLOBAL ROUTINE PAT$DEFINE_SYM (STRING_DESC, VALUE, MSG_FLAG) : NOVALUE =

!++
! Functional description:
!
!	Stores a user-defined symbol in the symbol table, which is a doubly
!	linked list.  First searches (in a binary fashion) the table to see
!	whether the symbol exists.  If it does not, then the symbol is
!	inserted, except if no free storage is left, in which case another
!	error message is reported from PAT$FREEZ.
!
! Calling sequence:
!
!	CALLS #2, PAT$DEFINE_SYM
!
! Inputs:
!
!	STRING_DESC	- a string descriptor describing the string
!			  representing the symbol.
!	VALUE		- the value to be stored as the equivalent of the
!			  symbol.
!	MSG_FLAG	- Indicator whether or not to print a define message,
!			  (TRUE=print message, FALSE=don't print message)
!
! Implicit inputs:
!
!	PAT$GL_SYMTBPTR, pointer to the header link in the current symbol table.
!
! Implicit outputs:
!
!	none
!
! Routine value:
!
!	novalue
!
! Side effects:
!
!	The symbol is inserted into the symbol table.  The links of
!	the table are appropriately adjusted.
!
!--

BEGIN

MAP
	STRING_DESC : REF BLOCK [, BYTE];

LOCAL
	POINTER;

POINTER = PAT$FIND_SYM (.STRING_DESC);
IF (.POINTER EQL 0)
THEN
	BEGIN
	!++
	! Symbol did not exist. Insert it into the symbol table.  First allocate
	! a block of dynamic storage to hold it.
	!--
	POINTER = PAT$FREEZ ((.STRING_DESC [DSC$W_LENGTH] + 1 + 3) / 4 + OVERHEAD_SYM - 1);

	!++
	! Space allocated. Insert the new link. Then write the symbol name and
	! value into the new symbol table entry.
	!--
	INSQUE (.POINTER, .PAT$GL_SYMTBPTR);
	CH$MOVE (.STRING_DESC [DSC$W_LENGTH], CH$PTR (.STRING_DESC [DSC$A_POINTER]),
			CH$PTR (SYM_NAME (.POINTER)));
	SYM_CHCOUNT (.POINTER) = .STRING_DESC [DSC$W_LENGTH];
	SYM_VALUE (.POINTER) = .VALUE;
	IF (.MSG_FLAG)
	THEN
		$FAO_TT_OUT('symbol "!AD" defined as !XL',
				.STRING_DESC[DSC$W_LENGTH],
				CH$PTR(.STRING_DESC[DSC$A_POINTER]), .VALUE);
	END
ELSE
	BEGIN
	!++
	! Symbol already was defined. Just reset the value of
	! the symbol stored in the symbol table.
	!--
	IF (.MSG_FLAG)
	THEN
			$FAO_TT_OUT('symbol "!AD" redefined from !XL to !XL',
				.STRING_DESC[DSC$W_LENGTH],
				CH$PTR(.STRING_DESC[DSC$A_POINTER]),
				.SYM_VALUE(.POINTER), .VALUE);
	SYM_VALUE (.POINTER) = .VALUE;
	END;
END;

GLOBAL ROUTINE PAT$FIND_SYM (STRING_DESC) =

!++
! Functional description:
!
!	Searches (in a binary manner) through the doubly-linked symbol
!	table for a symbol name. If it is found, the address of the entry
!	is returned. Else a zero is returned.
!
! Calling sequence:
!
!	CALLS #1, PAT$FIND_SYM
!
! Inputs:
!
!	STRING_DESC	- the string descriptor of the symbol to find
!
! Implicit inputs:
!
!	PAT$GL_SYMTBPTR, pointer to the header link in the current symbol table.
!
! Outputs:
!
!	The address of the symbol entry, or zero, if the name is not found.
!
! Implicit outputs:
!
!	none
!
! Routine value:
!
!	an address or zero
!
! Side effects:
!
!	none
!
!--

BEGIN

MAP
	STRING_DESC : REF BLOCK [, BYTE];

LOCAL
	POINTER;

POINTER = .DLL_RLINK (.PAT$GL_SYMTBPTR);
WHILE (.POINTER NEQ .PAT$GL_SYMTBPTR)
DO
	BEGIN
	IF CH$EQL (.STRING_DESC [DSC$W_LENGTH], CH$PTR (.STRING_DESC [DSC$A_POINTER], 0),
			.SYM_CHCOUNT (.POINTER), CH$PTR (SYM_NAME (.POINTER), 0))
	THEN RETURN .POINTER
	ELSE POINTER = .DLL_RLINK (.POINTER);
	END;
RETURN 0
END;

GLOBAL ROUTINE PAT$ADD_LABELS (SYM_LISTHEAD) : NOVALUE =

!++
! Functional description:
!
!	This routine merges a label symbol table into the user-defined
!	symbol table.  The label symbol table entries are identical in
!	format to the user-defined symbol table.  Therefore, for new
!	symbols, the entry can be linked into the user table without
!	alteration.  Redefined symbols merely alter the user table entry
!	and are then released to free storage.
!
! Calling sequence:
!
!	CALLS #1, PAT$ADD_LABELS
!
! Inputs:
!
!	SYM_LISTHEAD	- Address of the pointer to the label symbol table
!			  to be added
!
! Implicit inputs:
!
!	PAT$GL_SYMTBPTR, pointer to the header link in the current symbol table.
!
! Outputs:
!
!	none
!
! Implicit outputs:
!
!	none
!
! Routine value:
!
!	none
!
! Side effects:
!
!	The label symbol table contains only its listhead entry and all
!	labels are now in the user-defined symbol table.  The current symbol
!	table pointer, PAT$GL_SYMTBPTR, is reset to the user-defined symbol table.

!
!--

BEGIN

MAP
	SYM_LISTHEAD : REF VECTOR[,LONG];			! Pointer to listhead entry of label table

LOCAL
	STRING_DESC : BLOCK[8,BYTE],				! String descriptor for current symbol
	SYMBOL_PTR,						! Pointer to symbol entry in user-defined table
	NEXT_PTR,						! Pointer to next label entry
	POINTER;

PAT$GL_SYMTBPTR = .PAT$GL_SYMHEAD;
WHILE (POINTER=.DLL_RLINK(.SYM_LISTHEAD[0])) NEQA .SYM_LISTHEAD[0]
DO
	BEGIN
	NEXT_PTR = .DLL_RLINK(.POINTER);
	DLL_LLINK(.NEXT_PTR) = .DLL_LLINK(.POINTER);
	DLL_RLINK(.SYM_LISTHEAD[0]) = .DLL_RLINK(.POINTER);
	STRING_DESC[DSC$W_LENGTH] = .SYM_CHCOUNT(.POINTER);
	STRING_DESC[DSC$A_POINTER] = SYM_CSTRING(.POINTER) + 1;
	SYMBOL_PTR = PAT$FIND_SYM(STRING_DESC);
	IF (.SYMBOL_PTR EQLA 0)
	THEN
		BEGIN
		!++
		! This is a new user symbol.  Add the entry to the user-
		! defined symbol table.
		!--
		DLL_RLINK(.POINTER) = 0;
		DLL_LLINK(.POINTER) = 0;
		INSQUE(.POINTER, .PAT$GL_SYMHEAD);
		$FAO_TT_OUT('symbol "!AD" defined as !XL',
				.STRING_DESC[DSC$W_LENGTH],
				CH$PTR(.STRING_DESC[DSC$A_POINTER]),
				.SYM_VALUE(.POINTER));
		END
	ELSE
		BEGIN
		!++
		! This is a redefinition of a user symbol.  Alter the value
		! in the user-defined symbol table and then release the
		! label entry to the free storage list.
		!--
		$FAO_TT_OUT('symbol "!AD" redefined from !XL to !XL',
			.STRING_DESC[DSC$W_LENGTH], CH$PTR(.STRING_DESC[DSC$A_POINTER]),
			.SYM_VALUE(.SYMBOL_PTR), .SYM_VALUE(.POINTER));
		SYM_VALUE(.SYMBOL_PTR) = .SYM_VALUE(.POINTER);
		PAT$FREERELEASE(.POINTER, ((.STRING_DESC[DSC$W_LENGTH] + 1 + 3)/
						4 + OVERHEAD_SYM - 1));
		END;

	END;
END;

END
ELUDOM
