MODULE PATBAS (%IF %VARIANT EQL 1
		%THEN
			ADDRESSING_MODE (EXTERNAL = LONG_RELATIVE,
					 NONEXTERNAL = LONG_RELATIVE),
		%FI
		IDENT = 'V03-000') =
BEGIN

!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
! FACILITY:	PATCH
!
! FUNCTIONAL DESCRIPTION:
!	INITIALIZATION ROUTINES FOR PATCH.
!
! Version:	V02-018
!
! History:
!	Author:
!		Carol Peters, 12 Aug 1976: Version 01
!
! MODIFIED BY:
!
!	V02-001	PCG0001		Peter George		02-FEB-1981
!		Add require statement for LIB$:PATDEF.REQ
!
! MODIFICATIONS:
!
!  NO	DATE		PROGRAMMER		PURPOSE
!  --	----		----------		-------
!
!  00	17-OCT-77	K.D. MORSE		ADAPT VERSION 54 FOR PATCH.
!  01	4-JAN-78	K.D. MORSE		NO CHANGES FOR 55-82.
!  02	24-JAN-78	K.D. MORSE		NO CHANGES FOR 83-84.
!  03	28-FEB-78	K.D. MORSE		NO CHANGES FOR 85-86.
!  04	01-MAR-78	K.D. MORSE		ADD CONTEXT BIT RESET FOR /ALL.
!  05	01-MAR-78	K.D. MORSE		NO CHANGES FOR 87.
!  06	24-MAR-78	K.D. MORSE		NO CHANGES FOR 88-91.
!  07	04-APR-78	K.D. MORSE		NO CHANGES FOR 92-93.
!  08	14-APR-78	K.D. MORSE		NO CHANGES FOR 94.
!  09	18-APR-78	K.D. MORSE		ADD LITERAL_BIT AND OPN_COM_FILE.
!  10	25-APR-78	K.D. MORSE		CONVERT TO NATIVE COMPILER.
!  11	18-MAY-78	K.D. MORSE		NO CHANGES FOR VERS 95.
!  12	18-MAY-78	K.D. MORSE		NO CHANGES FOR VERS 96-97.
!  13	06-JUN-78	K.D. MORSE		INITIALIZE LISTHEADS FOR
!						OLD AND NEW LABELS, PAT$GL_OLDLABLS
!						AND PAT$GL_NEWLABLS.
!  14	13-JUN-78	K.D. MORSE		ADD FAO COUNTS TO SIGNALS.
!  15	16-JUN-78	K.D. MORSE		INITIALIZE APPENDED COMMAND
!						TEXT BUFFERS.
!  16	19-JUN-78	K.D. MORSE		NO CHANGES FOR VERS 98-99.
!  17	28-JUN-78	K.D. MORSE		NO CHANGES FOR VERS 100-102.
!
!--

FORWARD ROUTINE
	PAT$SET_CONTEXT: NOVALUE,				! Routine to initialize context bits
	PAT$INIT: NOVALUE;					! Routine to initialize PATCH

LIBRARY 'SYS$LIBRARY:STARLET.L32';
REQUIRE 'SRC$:VXSMAC.REQ';
REQUIRE 'SRC$:PATPCT.REQ';					! Defines PSECTS
REQUIRE 'SRC$:PATGEN.REQ';
REQUIRE 'SRC$:BSTRUC.REQ';
REQUIRE 'SRC$:DLLNAM.REQ';
REQUIRE 'LIB$:PATDEF.REQ';				! Defines literals
REQUIRE 'LIB$:PATMSG.REQ';
REQUIRE 'SRC$:PREFIX.REQ';
REQUIRE 'SRC$:PATPRE.REQ';

EXTERNAL ROUTINE
	PAT$FREEZ,						! Routine to allocate a block of free storage
	PAT$FREEINIT,						! Routine to initialize free storage
	PAT$RESET_DEF;						! Sets up default mode settings

EXTERNAL
	PAT$GB_ECOLVL: BYTE,					! ECO level for current patch
	PAT$GB_ERRNAME,						! Logical error channel name
	PAT$GB_INPNAME,						! Logical input channel name
	PAT$GB_OUTNAME,						! Logical output channel name
	PAT$GL_CONTEXT: BITVECTOR,		 		! PATCH command context bits
	PAT$GL_INPFAB: BLOCK [, BYTE],				! FAB for command input stream
	PAT$GL_INPRAB: BLOCK [, BYTE],				! RAB for command input stream
	PAT$GL_OUTFAB: BLOCK [, BYTE],				! FAB for command output stream
	PAT$GL_OUTRAB: BLOCK [, BYTE],				! RAB for command output stream
	PAT$GL_ERRFAB: BLOCK [, BYTE],				! FAB for error messages
	PAT$GL_ERRRAB: BLOCK [, BYTE],				! RAB for error messages
	PAT$GL_SYMHEAD,						! Listhead for user-defined symbol table
	PAT$GL_SYMTBPTR,					! Pointer to default symbol table
	PAT$GL_OLDLABLS,					! Listhead for old contents instruction labels
	PAT$GL_NEWLABLS,					! Listhead for new contents un-relocated instruction labels
	PAT$GL_RLCLABLS,					! Listhead for newcontents relocated instruction labels
	PAT$GL_ERRCODE,						! Error code
	PAT$GL_TXTFREE,						! Pointer to next free byte in last text buffer
	PAT$GL_TXTLHD : REF BLOCK[,BYTE],			! Pointer to first text buffer
	PAT$GL_TXTTAIL;						! Pointer to last text buffer

EXTERNAL LITERAL
	PAT$K_ERRNAMLNG,					! Length of error channel name
	PAT$K_OUTNAMLNG,					! Length of output channel name
	PAT$K_INPNAMLNG;					! Length of input channel name

GLOBAL ROUTINE PAT$SET_CONTEXT : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Initializes context bits that are necessary for command
!	processing. These bits are valid only during the processing
!	of a single command. They are all reset after each command.
!
! CALLING SEQUENCE:
!
!	PAT$SET_CONTEXT ()
!
! INPUTS:
!
!	none
!
! IMPLICIT INPUTS:
!
!	The names of the context bits that are to be turned off.
!
! OUTPUTS:
!
!	none
!
! IMPLICIT OUTPUTS:
!
!	none
!
! ROUTINE VALUE:
!
!	NOVALUE
!
! SIDE EFFECTS:
!
!	The context bits are set to FALSE.
!--

BEGIN

PAT$GL_CONTEXT [OVERRIDE] = FALSE;
PAT$GL_CONTEXT [MODE_BIT] = FALSE;
PAT$GL_CONTEXT [SET_NOT_ECO] = FALSE;
PAT$GL_CONTEXT [EXAMINE_BIT] = FALSE;
PAT$GL_CONTEXT [VERIFY_BIT] = FALSE;
PAT$GL_CONTEXT [INSERT_BIT] = FALSE;
PAT$GL_CONTEXT [DELETE_BIT] = FALSE;
PAT$GL_CONTEXT [SET_ECO] = FALSE;
PAT$GL_CONTEXT [SCOPE_BIT] = FALSE;
PAT$GL_CONTEXT [MODULE_BIT] = FALSE;
PAT$GL_CONTEXT [ALIGN_LONG] = FALSE;
PAT$GL_CONTEXT [ALIGN_WORD] = FALSE;
PAT$GL_CONTEXT [ALIGN_QUAD] = FALSE;
PAT$GL_CONTEXT [ALIGN_BYTE] = FALSE;
PAT$GL_CONTEXT [ALIGN_PAGE] = FALSE;
PAT$GL_CONTEXT [PAT_AREA_BIT] = FALSE;
PAT$GL_CONTEXT [INST_SUBST] = FALSE;
PAT$GL_CONTEXT [LITERAL_BIT] = FALSE;
PAT$GL_CONTEXT [OPN_COM_FILE] = FALSE;
END;

GLOBAL ROUTINE PAT$INIT: NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Sets up local context for PATCH.  If the logical devices SYS$INPUT
!	and SYS$OUTPUT cannot be set up, the routine SIGNALS an error;
!	otherwise it returns.  Initializes symbol tables and PATCH command
!	text buffers.
!
! CALLING SEQUENCE:
!
!	PAT$INIT()
!
! INPUTS:
!
!	none
!
! IMPLICIT INPUTS:
!
!	The FABs and RABs for input and output.
!	Addresses of context blocks that are to be set by the initialization.
!	PAT$GL_TXTFREE - Pointer to first free byte of text buffer in last block
!	PAT$GL_TXTLHD  - Pointer to first block of text buffer
!	PAT$GL_TXTTAIL - Pointer to last block of text buffer
!
! OUTPUTS:
!
!
!	none
!
! IMPLICIT OUTPUTS:
!
!
!	The communication channels are open.
!
! ROUTINE VALUE:
!
!	NOVALUE
!
!
! SIDE EFFECTS:
!
!
!	Context, input and output modes, etc. are set up.
!	The symbol table listheads are set up and the first block for
!	appended patch command text is allocated.
!--

BEGIN

LOCAL
	STATUS;

!++
! If the OPENs and CONNECTs cannot be done successfully for logical devices
! SYS$ERROR, 'SYS$INPUT,' and 'SYS$OUTPUT', then SIGNAL a fatal error.
! This causes a return to the command line interpreter.
!--
PAT$GL_ERRCODE = $OPEN (FAB = PAT$GL_ERRFAB);
IF NOT .PAT$GL_ERRCODE 
THEN
	SIGNAL(PAT$_OPNERR,3,.PAT$GL_ERRCODE,PAT$K_ERRNAMLNG,PAT$GB_ERRNAME);

PAT$GL_ERRCODE = $CONNECT (RAB = PAT$GL_ERRRAB);
IF NOT .PAT$GL_ERRCODE
THEN
	SIGNAL(PAT$_CNTERR,3,.PAT$GL_ERRCODE,PAT$K_ERRNAMLNG,PAT$GB_ERRNAME);

PAT$GL_ERRCODE = $OPEN (FAB = PAT$GL_INPFAB);
IF NOT .PAT$GL_ERRCODE 
THEN
	SIGNAL(PAT$_OPNERR,3,.PAT$GL_ERRCODE,PAT$K_INPNAMLNG,PAT$GB_INPNAME);

PAT$GL_ERRCODE = $CONNECT (RAB = PAT$GL_INPRAB);
IF NOT .PAT$GL_ERRCODE
THEN
	SIGNAL(PAT$_CNTERR,3,.PAT$GL_ERRCODE,PAT$K_INPNAMLNG,PAT$GB_INPNAME);

PAT$GL_ERRCODE = $OPEN (FAB = PAT$GL_OUTFAB);
IF NOT .PAT$GL_ERRCODE
THEN
	SIGNAL(PAT$_OPNERR,3,.PAT$GL_ERRCODE,PAT$K_OUTNAMLNG,PAT$GB_OUTNAME);

PAT$GL_ERRCODE = $CONNECT (RAB = PAT$GL_OUTRAB);
IF NOT .PAT$GL_ERRCODE
THEN
	SIGNAL(PAT$_CNTERR,3,.PAT$GL_ERRCODE,PAT$K_OUTNAMLNG,PAT$GB_OUTNAME);

!++
! Initialize an area of free storage, and give the name of the
! PATCH error reporting mechanism as the name of the routine that
! the free storage package can call to report errors.
!--
PAT$FREEINIT ();

!++
! Set the default mode settings.
!--
PAT$RESET_DEF ();

!++
! Set all the single command context bits to FALSE.  These bits
! refer to context that is valid only during a single command,
! not across multiple commands.
!--
PAT$SET_CONTEXT ();

!++
! Initialize the symbol chain by allocating storage for the header
! link and setting the pointers to point to the link.
!--
PAT$GL_SYMHEAD = PAT$FREEZ (OVERHEAD_SYM);
DLL_RLINK (.PAT$GL_SYMHEAD) = .PAT$GL_SYMHEAD;
DLL_LLINK (.PAT$GL_SYMHEAD) = .PAT$GL_SYMHEAD;
SYM_VALUE (.PAT$GL_SYMHEAD) = 0;
SYM_CSTRING (.PAT$GL_SYMHEAD) = 0;
PAT$GL_SYMTBPTR = .PAT$GL_SYMHEAD;

!++
! Initialize the old contents label symbol chain by allocating storage for
! the header link and setting the pointers to point to the link.
!--
PAT$GL_OLDLABLS = PAT$FREEZ (OVERHEAD_SYM);
DLL_RLINK (.PAT$GL_OLDLABLS) = .PAT$GL_OLDLABLS;
DLL_LLINK (.PAT$GL_OLDLABLS) = .PAT$GL_OLDLABLS;
SYM_VALUE (.PAT$GL_OLDLABLS) = 0;
SYM_CSTRING (.PAT$GL_OLDLABLS) = 0;

!++
! Initialize the new contents un-relocated label symbol chain by allocating
! storage for the header link and setting the pointers to point to the link.
!--
PAT$GL_NEWLABLS = PAT$FREEZ (OVERHEAD_SYM);
DLL_RLINK (.PAT$GL_NEWLABLS) = .PAT$GL_NEWLABLS;
DLL_LLINK (.PAT$GL_NEWLABLS) = .PAT$GL_NEWLABLS;
SYM_VALUE (.PAT$GL_NEWLABLS) = 0;
SYM_CSTRING (.PAT$GL_NEWLABLS) = 0;

!++
! Initialize the new contents relocated label symbol chain by allocating
! storage for the header link and setting the pointers to point to the link.
!--
PAT$GL_RLCLABLS = PAT$FREEZ (OVERHEAD_SYM);
DLL_RLINK (.PAT$GL_RLCLABLS) = .PAT$GL_RLCLABLS;
DLL_LLINK (.PAT$GL_RLCLABLS) = .PAT$GL_RLCLABLS;
SYM_VALUE (.PAT$GL_RLCLABLS) = 0;
SYM_CSTRING (.PAT$GL_RLCLABLS) = 0;

!++
! Allocate the first buffer for the appended patch command text and
! initialize the pointers.
!--
PAT$GL_TXTLHD = PAT$FREEZ((A_PAGE + 3)/4);
PAT$GL_TXTTAIL = .PAT$GL_TXTLHD;
PAT$GL_TXTFREE = .PAT$GL_TXTLHD + TXT$C_SIZE;

!++
! Initialize the ECO level for this patch.  This ECO level byte is
! set to an ECO level by the "SET ECO" command and re-initialized by
! the "UPDATE" command.
!--
PAT$GB_ECOLVL = 0;

!++
! Initialization is complete and successful. Return TRUE.
!--
RETURN(TRUE);
END;

END
ELUDOM
