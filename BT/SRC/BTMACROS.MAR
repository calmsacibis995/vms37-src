	.TITLE	BTMACROS - MACROS USED IN THE BACKTRANSLATORS
	.IDENT	'V03-000'
 
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
; H.J.	AUGUST 1977
;
;	MODIFICATIONS:
;
;	01.04	PG0004		P. George	28-Jan-1981
;		Include reference to $BTRMSG in $BTDEFS
;
;	01.03	RN0003		R. Newland	 8-Dec-1979
;		Add COR for CORAL/RSX
;
;	01.02	R. Newland	31-Jul-1979
;				Add VAXCOR for CORAL/VMS
;
;	01.01	T.J. PORTER	13-DEC-78
;				ADD C74 FOR COBOL-74
;
; BACKTRANSLATOR MACROS
;

;+
; BACKTRANSLATOR MACROS
;-

;+
; MACRO $BTDEFS
;
; THIS MACRO DEFINES EXTERNAL PARAMETERS AS LOCALS
;-
	.MACRO	$BTDEFS

	SAVE_REG_MASK	= ^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>

	BTRAN		= 104@16	;DEFINE OUR FACILITY

	FATAL		= 4		;DEFINE THE FATAL CODE FOR MESSAGES

	PRIM_OUTPUT	= 0
	PRIM_INPUT	= -10
	LAST_PARAM	= -20

	NONE		= 0

	$BTRDEF				;PICK UP THE MDL DEFINITIONS
	$BTRMSG				;PICK UP THE MSG DEFINITIONS

	PROGIDS

	.ENDM



;+
; THESE MACROS GENERATE ARGUMENT LISTS FOR THE BACKTRANSLATION
;
;-


;+
; MACRO $GETDECNUM
;
; USED TO PICK UP A DECIMAL NUMBER AS AN OPTION VALUE
;
;-

	.MACRO	$GETDECNUM	TRANSTR,PROGRAM,TYPE,POS,FLAGS
	$COMMON	<TRANSTR>,<PROGRAM>,<TYPE>,<POS>,<FLAGS>,GETSTRING,BTR$M_DECIMAL
	.ENDM	$GETDECNUM


;+
; MACRO $SETSTRING
;
; USED TO SET THE GIVEN STRING IN THE RESULT LINE
;
;-

	.MACRO	$SETSTRING	TRANSTR,PROGRAM,TYPE,POS,FLAGS
	$COMMON	<TRANSTR>,<PROGRAM>,<TYPE>,<POS>,<FLAGS>,SETSTRING
	.ENDM	$SETSTRING

;+
; MACRO $GETSTRING
;
; THIS MACRO PICKS UP A STRING VALUED QUALIFIER AND TRANSLATES IT
;
;-

	.MACRO	$GETSTRING	TRANSTR,PROGRAM,TYPE,POS,FLAGS
	$COMMON	<TRANSTR>,<PROGRAM>,<TYPE>,<POS>,<FLAGS>,GETSTRING
	.ENDM	$GETSTRING

;+
; MACRO $GETKEYWORD
;
; THIS MACRO IS USED TO PICK UP A KEYWORD ARGUMENT VALUE
;
;-
	.MACRO	$GETKEYWORD	LIST,?L1,?L2
	BSBW	GETKEYWORD
	.BYTE	L1-L2
L2:
	.IRP	STRNGS,<LIST>
	.NCHR	$$CNT,<STRNGS>
	.BYTE	$$CNT
	.ASCII	\STRNGS\
	.ENDR
	.BYTE	0
L1:
	.ENDM	$GETKEYWORD

;+
; MACRO $GETKEYWORDNVAL
;
; THIS MACRO IS USED TO LOOK UP A KEYWORD ARGUMENT VALUE ALREADY GOTTEN
; VIA A GETSUBVAL CALL
;
;-
	.MACRO	$GETKEYWORDNVAL	LIST,?L1,?L2
	BSBW	GETKEYWORDNVAL
	.BYTE	L1-L2
L2:
	.IRP	STRNGS,<LIST>
	.NCHR	$$CNT,<STRNGS>
	.BYTE	$$CNT
	.ASCII	\STRNGS\
	.ENDR
	.BYTE	0
L1:
	.ENDM	$GETKEYWORDNVAL

;+
; MACRO $REPLACE
;
; THIS MACRO CAN BE USED AFTER A $GETKEYWORD MACRO TO OUTPUT A SIMPLE
; TRANSLATED KEYWORD VALUE
;-
	.MACRO	$REPLACE	LIST,LABEL,?L1,?L2
	BSBW	REPLACE
	.IF NB	LABEL
	.BYTE	LABEL-L2
	.IFF
	.BYTE	L1-L2
	.ENDC
L2:
	$$INDEX=-1
	.IRP	$$STR,<LIST>
	.NCHR	$$CNT,<$$STR>
	.BYTE	$$INDEX
	.BYTE	$$CNT
	.ASCII	\$$STR\
	$$INDEX=$$INDEX-1
	.ENDR
L1:
	.ENDM	$REPLACE

;+
; MACRO ERROR
;
; THIS MACRO IS USED TO ERROR EXIT FROM THE BACKTRANSLATOR
; AND HAVE DCL OUTPUT THE ERROR MESSAGE
;
;-
	.MACRO	ERROR	VALUE,SEVERITY
	MOVZBL	#BTR$_'VALUE+SEVERITY&^XFF,R0	;PUT ERROR NUMBER IN R0
	BRW	ERR_EXIT		;USE COMMON EXIT CODE
	.ENDM

;+
; MACRO PROGIDS
;
; THIS MACRO IS USED TO DEFINE THE PROGRAM INDEXES AND BUILD
; THE STRING TABLE CONTAINING TH PROGRAM NAMES
;
;-
	.MACRO	PROGIDS	FLAG
	PROG_CNT=0
 .IRP	NAME,<PIP,F4V,MAR,MAC,SOS,SLP,DMP,CBL,TKB,LIB,LBR,BP2,UFD,SRT,DIF,C74,-
		VAXCOR,COR>
	PROG_CNT=PROG_CNT+1
	PROG_'NAME=PROG_CNT
	.IF IDN	GENTXT,<FLAG>
	.BYTE	-PROG_CNT
	.NCHR	$$$CNT,<NAME>
	.BYTE	$$$CNT
	.ASCII	\NAME\
	.ENDC
	.ENDR
	.ENDM

;+
; MACRO PURE
;
; THIS MACRO PLACES THE FOLLOWING CODE INTO THE PURE SECTION
;
;-
	.MACRO	PURE	NAME,ATTRIB
	.IF B	ATTRIB
	.PSECT	PURE_'NAME	BYTE,RD,EXE,NOWRT
	.IFF
	.PSECT	PURE_'NAME	BYTE,RD,EXE,NOWRT,ATTRIB
	.ENDC
	.ENDM

;+
; MACRO IMPURE
;
; THIS MACRO PLACES THE FOLLOWING CODE INTO THE IMPURE SECTION
;
;-
	.MACRO	IMPURE	NAME,ATTRIB
	.IF B	ATTRIB
	.PSECT	IMPURE_'NAME	LONG,RD,WRT,NOEXE
	.IFF
	.PSECT	IMPURE_'NAME	LONG,RD,WRT,NOEXE,ATTRIB
	.ENDC
	.ENDM

;+
; MACRO COMMAND
;
; THIS MACRO IS USED TO BUILD AN OFFSET TABLE TO THE VARIOUS BACK TRANSLATOR
; SUBRUTINES WHICH PARSE THEIR OWN COMMANDS
;-
	.MACRO	COMMAND	NAME
	PURE	VALLIST
	.BYTE	CLI$K_VERB_'NAME
	PURE	DISPLIST
	.WORD	NAME-DSTART
	.ENDM

;+
; MACRO PRINT
;
; USED AS A DEBUGGING AID TO PRINT ASCII LINES TO THE TERMINAL VIA
; A DESCRIPTOR
;
;-
	.MACRO	PRINT	DESC
	.IF NDF	$$$DEBUG$
	.SAVE
	IMPURE	RMSDATA
	.ALIGN	LONG
$DEBUG$FAB:
	$FAB
$DEBUG$RAB:
	$RAB
	.RESTORE
	.ENDC
	PUSHR	#^M<R0,R1>

	MOVW	DESC,RAB$W_RSZ(R0)
	MOVL	DESC+4,RAB$L_RBF(R0)
	$PUT	(R0)
	POPR	#^M<R0,R1>
	.ENDM

;+
; MACRO DEFPROG
;
; MACRO USED TO SET UP CORRECT DEFAULT PROGRAM TO RUN IF NO
; QUALIFIER EXPLICITLY CAUSED ONE TO BE SET
;
;-
	.MACRO	DEFPROG	NAME,STICKYFLAG
	MOVL	#PROG_'NAME,R0
	.IF NB	STICKYFLAG
	MOVL	#1,W^STICKY_FLAG
	.ENDC
	.ENDM

;+
; MACRO MAKMASK
;
; GENERATE ENTRY MASK FOR CALLG ARGUMENTS AND INITIALIZE $$$FLAGS
;
;-
	.MACRO	$MAKMASK	TYPE
	.IF IDN	INLINE,<TYPE>
	$$$FLAGS=$$$FLAGS+BTR$M_RETURN
	.IFF
	.WORD	SAVE_REG_MASK
	.ENDC
	.ENDM

;+
; MACRO $INLINE
;
; GENERATE SAVE REGISTER MASK FOR CALLG FRAME
;
;-
	.MACRO $INLINE
	$MAKMASK
	.ENDM

;+
; MACRO $COMMON
;
; GENERATE THE INLINE OPTION FLAG TABLE
;
;-
	.MACRO	$COMMON	TRANSTR,PROGRAM,TYPE,POS,FLAGS,SUBR,INITFLAGS
	$$$FLAGS=INITFLAGS+0
	$MAKMASK	<TYPE>
	BSBW	SUBR
	.IF NB	<POS>
	$$$FLAGS=$$$FLAGS+BTR$M_TEMPPOS
	.ENDC
	.IRP	$$X,<FLAGS>
	$$$FLAGS=$$$FLAGS+$$X
	.ENDR
	.BYTE	$$$FLAGS
	.IF NB	<PROGRAM>
	.BYTE	PROG_'PROGRAM
	.IFF
	.BYTE	0
	.ENDC
	.IF NB	<POS>
	.BYTE	POS
	.ENDC
	.NCHR	$$CNT,<TRANSTR>
	.BYTE	$$CNT
	.ASCII	\TRANSTR\
	.ENDM	$COMMON
