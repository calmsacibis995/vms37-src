	.TITLE	CMDGEN - COMMAND GENERATOR
	.IDENT	'V03-000'
 
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
; H.J.	AUGUST 1977
;
; BACKTRANSLATOR COMMAND GENERATOR
;

;
; MACRO LIBRARY CALLS
;
	$BTDEFS				;DEFINE SYMBOLS FOR LOCAL USE
;
; LOCAL SYMBOLS
;
	GCMLSIZE   =80	;DEFINE MAXIMUM SIZE OF MCR COMMAND LINE WE CAN MAKE
;
; ARGUMENT LIST OFFSET DEFINITIONS
;

;
;
;

;
; LOCAL DATA
;
		IMPURE
;
;
;
RESULT_DESC::	.LONG	0			;SIZE WILL GO HERE
		.LONG	RESULT_STR		;ADDRESS OF RESULT STRING

RESULT_STR:	.BYTE	^A\ \			;ALWAYS START LINE WITH BLANK
		.BLKB	GCMLSIZE-1		;AREA TO PLACE MCR LINE

PROG_DESC::	.LONG	0			;SIZE OF THE PROGRAM NAME
		.LONG	0			;ADDRESS SET BY CMDGEN

		PURE
PROGTAB:
		PROGIDS	GENTXT			;GENERATE THE FILENAME TABLE

;	.SBTTL	CMDGEN COMMAND GENERATOR
;+
; BACKTRANSLATOR CMDGEN
;
; CONVERTS INTERNALLY BUILT TABLES TO MCR LINE
;
;
; INPUTS:
;  THE INPUTS ARE STRINGS PLACED IN TABLES BY THE BACKTRANSLATOR
;  ROUTINE FOR THE GIVEN COMMAND
;
;
; OUTPUTS:
;  THE OUTPUT CONSISTS OF TWO STRINGS OR AN ERROR MESSAGE AND ABORT.
;  THE CALLER OPENS THE IMAGE AND INVOKES THE COMPATIBILITY EMULATOR
;  IF NO ERROR OCCURS.
;
;  1- FILENAME STRING OF COMPATIBILITY MODE IMAGE TO BE ACTIVATED.
;
;  2- COMMAND LINE TO BE GIVEN TO THE IMAGE.
;
;-
COMMAND_GEN::
	MNEGB	W^PROGINDEX,R0		;GET THE PROGRAM NUMBER TO RUN
	LOCC	R0,#200,PROGTAB		;FIND THE PROGRAM NAME

	INCL	R1			;POINT TO ITS LENGTH
	MOVZBL	(R1)+,W^PROG_DESC	;SAVE THE LENGTH OF THE NAME
	MOVL	R1,W^PROG_DESC+4	;STORE THE ADDRESS OF THE NAME

	.ENABL	LSB

COMMAND_GEN1::
	MOVAB	W^RESULT_STR+1,R5	;GET AREA TO BUILD RESULT STRING
	MOVL	#1,R4			;INITIALIZE THE RESULT LENGTH
	CLRL	R9			;SET UP TO LOOP THRU OUTPUT ARGUMENTS
	CLRL	R3			;SET UP FOR NO LEADING ','
10$:	CMPB	#PRIM_INPUT,R9		;ARE WE SWITCHING TO INPUT NOW?
	BNEQ	20$			;BRANCH IF NOT
	MOVB	#^A\=\,R3		;PUT IN INPUT INDICATOR
20$:	MOVAB	W^ARGSLIST,R8		;GET ADDRESS OF ARGUMENT STRINGS
	MOVL	W^ARGSLISTPTR,R7	;GET LAST USED SLOT IN LIST
	BSBB	DOTEXT			;MOVE POSITIONS TEXT TO RESULT STRING
	MOVAB	W^OPTLIST,R8		;GET ADDRESS OF OPTION STRINGS
	MOVL	W^OPTLISTPTR,R7		;GET LAST USED SLOT IN LIST
	BSBB	DOTEXT			;MOVE POSITIONS OPTIONS INTO RESULT
	DECB	R9			;BUMP TO NEXT PARAMETER
	MOVB	#^A/,/,R3		;SET UP TO OUTPUT LEADING ','
	CMPB	#LAST_PARAM,R9		;ARE WE THRU ALL THE PARAMETERS?
	BLEQ	10$			;BRANCH TO KEEP GOING
	MOVW	R4,W^RESULT_DESC	;SAVE IT
RSB1$:	RSB				;RETURN TO CALLER

DOTEXT:	CLRB	(R7)			;FORCE TERMINATOR AT END OF TEXT
30$:	CMPL	R8,R7			;MAKE SURE DON'T GO PASSED END
	BGEQU	RSB1$			;BRANCH IF REACHED END OF TEXT
	CMPB	(R8)+,R9		;DOES STRING GO IN THIS POSITION?
	BNEQ	30$			;BRANCH IF NOT
	MOVB	R3,R6			;TEST AND SET FLAG/CHARACTER
	BEQL	40$			;BRANCH IF NOP
	BSBB	PUTBYT			;OUTPUT IT AS DELIMITER
	CLRL	R3			;CLEAR THE FLAG
40$:	TSTB	(R8)			;ARE WE STILL IN PART OF SAME STRING?
	BLEQ	30$			;BRANCH IF NOT
	PUSHAB	40$			;INSERT THE BYTE INTO RESULT STRING
					;LOOP THRU STRING

PUTADB:	MOVB	(R8)+,R6		;GET THE BYTE TO SAVE
PUTBYT:	MOVB	R6,(R5)+		;MOVE THE BYTE IN
	INCB	R4			;BUMP LENGTH
	CMPB	#GCMLSIZE,R4		;IS RESULT GETTING TO LONG
	BGTR	RSB1$			;BRANCH IF LENGTH OK	
	ERROR	STRINGOVR,FATAL		;REPORT ERROR AND ABORT

	.DSABL	LSB

	.END
