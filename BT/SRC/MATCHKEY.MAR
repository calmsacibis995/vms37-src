	.TITLE	MATCHKEY - MATCH A STRING AGAINST A KEY
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY:	GENERAL PURPOSE UTILITY SUBROUTINE
;
; ABSTRACT:	MATCH A STRING AGAINST A TABLE OF KEYS
;
;
; ENVIRONMENT:	USER MODE/NON-PRIVILEGED CODE
;
; AUTHOR:	W.H.BROWN, CREATION DATE:3-JUN-1977
;
; MODIFIED BY:
;
;	, : VERSION
; 01	- 
;--

	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;
;
; MACROS:
;
;
; EQUATED SYMBOLS:
;
	TABLE	= 4			; ADDRESS OF KEYWORDS
	DESCP	= 8			; ADDRESS OF DESCRIPTOR FOR STRING
	ADDR	= 12			; ADDRESS TO STORE RESULT
;
; OWN STORAGE:
;
;	NONE

	.SBTTL	MATCH KEY
;++
; FUNCTIONAL DESCRIPTION:
;
;	THIS ROUTINE ACCEPTS A LIST OF COUNTED STRINGS
;	AND A DESCRIPTOR FOR A VARAIABLE LENTHG STRING.
;	AN ATTEMPT IS MADE TO FIND A STRING IN THE LIST
;	THAT MATCHES THE VARIABLE STRING CHECKING THE
;	LENGTH OF THE SHORTER STRING.  IF A MATCH IS NOT FOUND,
;	A ZERO IS RETURNED. IF MORE THAN 1 VALUE MATCHES, THE
;	INDEX TO THE SECOND MATCH IS RETURNED A NEGATIVE NUMBER.
;	OTHERWISE THE INDEX IN THE TABLE OF STRINGS IS RETURNED,
;	AS A VALUE STARTING WITH 1.  AN EXACT MATCH RETURNS THE INDEX
;	OF THE EXACT MATCH IGNORING POSSIBLE AMBIGUITIES.
;
; CALLING SEQUENCE:
;
;	CALLS	#2,MATCHKEY		; RETURN INDEX IN R0
;
; INPUT PARAMETERS:
;
;	THE ADDRESS OF THE LIST OF COUNTED STRINGS FOLLOWED BY A 0 BYTE
;	THE ADDRESS OF A QUADWORD DESCRIPTOR DESCRIBING THE STRING TO MATCH
;
;
; OUTPUT PARAMETERS:
;
;	R0 IS RETURNED AS THE INDEX TO THE MATCH
;-
	PURE
 
MATCHKEY::				; MATCH KEYWORD
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8>; REGISTERS TO SAVE
	MOVQ	@DESCP(AP),R4		; GET DESCRIPTOR FOR THE STRING
	MOVL	TABLE(AP),R6		; THE INPUT STRINGS
	CLRL	R8			; INITIALIZE THE INDEX
	BSBB	20$			; TRY FOR FIRST MATCH
	PUSHL	R8			; SAVE THE INDEX
	BEQL	10$			; BRANCH IF NO MATCH
	CMPW	R4,R7			; IS THIS AN EXACT MATCH?
	BEQL	10$			; BRANCH IF YES
	BSBB	20$			; TRY FOR AMBIGUOUS MATCH
	TSTL	R8			; DID ANOTHER ENTRY MATCH?
	BEQL	10$			; BRANCH IF NOT AMBIGUOUS
	MOVL	R8,(SP)			; SET NEW INDEX
	CMPW	R4,R7			; IS THIS AN EXACT MATCH?
	BEQL	10$			; BRANCH IF IT IS
	MNEGL	(SP),(SP)		; CHANGE TO NEGATIVE
10$:	POPR	#^M<R0>			; GET INDEX
	RET				; 
 
20$:	INCL	R8			; COUNT THE ITERATIONS
	MOVZBL	(R6)+,R7		; GET THE LENGTH
	BEQL	50$			; BRANCH IF END OF STRING
	MOVL	R6,R1			; SET ADDRESS
	ADDL	R7,R6			; POINT AT NEXT
	MOVL	R7,R0			; MAKE COPY FOR ADJUSTMENT
	CMPL	R0,R4			; SEE WHICH IS BIGGER
	BLEQ	40$			; BRANCH IF TARGET IS SHORTER
	MOVL	R4,R0			; SET INPUT LENGTH
40$:	CMPC3	R0,(R1),(R5)		; CHECK FOR MATCH
	BNEQ	20$			; BRANCH IF NO MATCH
	RSB				; RETURN WITH COUNT IN R8
50$:	CLRL	R8			; SET ZERO INDEX
	RSB				; RETURN WITH COUNT IN R8
 
	.END
