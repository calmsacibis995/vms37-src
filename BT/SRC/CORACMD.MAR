	.TITLE	CORAL - BACKTRANSLATOR FOR CORAL COMMAND
	.IDENT	'V03-000'
 
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
; Steve Jeffreys	July 1979
;
; Modified by:
;
;	V002	TMH0002		Tim Halvorsen		04-Feb-1982
;		Remove reference to CLI$K_ symbols at assembly time.
;
;	V01.01	RN0004		R. Newland	12-Feb-1980
;		Correct conversion of /CHECK and /SHOW qualifiers.
;
; BACKTRANSLATOR CORAL
;

;	.SBTTL INITIALIZE DATA DEFINITIONS
;
; MACRO LIBRARY CALLS
;
	$BTDEFS				;DEFINE VALUES TO BE USED LOCALLY
	$CLIDEF				;DEFINE CLI CODES AND VALUES

;
; LOCAL DATA
;
	IMPURE
;
;
INPUT_ARGLIST:
	$ARGLST	3,-			;CREATE AN ARGUMENT LIST
		INPUT_DESC,-		;FOR FIRST INPUT PARAMETER
		CLIWORKAREA,-		;WORK AREA FOR CLI
		BITMAP			;BIT ARRAY

INPUT_DESC:
	$CLIREQDESC -			;CREATE A CLI REQUEST DESCRIPTOR
		RQTYPE=CLI$K_INPUT1,-	;FOR PRIMARY INPUT
		RQFLGS=CLI$V_PARMREQ	;PRIMARY INPUT IS REQUIRED

OBJECT_ARGLIST:
	$ARGLST	3,-			;CREATE AN ARGUMENT LIST
		OBJECT_DESC,-		;FOR PRIMARY OUTPUT
		CLIWORKAREA,-		;WORK AREA FOR CLI
		BITMAP			;BIT ARRAY

OBJECT_DESC:
	$CLIREQDESC -			;CREATE A CLI REQUEST DESCRIPTOR
		RQTYPE=CLI$K_OUTPUT1	;FOR PRIMARY OUTPUT

LIST_ARGLIST:
	$ARGLST	3,-			;CREATE AN ARGUMENT LIST
		LIST_DESC,-		;FOR SECONDARY OUTPUT
		CLIWORKAREA,-		;WORK AREA FOR CLI
		BITMAP			;BIT ARRAY

LIST_DESC:
	$CLIREQDESC -			;CREATE A CLI REQUEST DESCRIPTOR
		RQTYPE=CLI$K_OUTPUT2	;FOR SECONDARY OUTPUT


QUAL_ARGLIST:
	$ARGLST	3,-			;CREATE AN ARGUMENT LIST
		QUAL_DESC,-		;FOR COMMAND QUALIFIERS
		CLIWORKAREA,-		;WORK AREA FOR CLI
		BITMAP			;BIT ARRAY

QUAL_DESC:
	$CLIREQDESC -			;CREATE A CLI REQUEST DESCRIPTOR
		RQTYPE=CLI$K_GETQUAL,-	;FOR COMMAND QUALIFIERS
		QUALST=QUAL_LIST	;ADDRESS OF THE QUALIFIERS


QUAL_LIST:
	$CLIQUALDESC -			;DEFINE A QUALIFIER
		QDCODE=CLI$K_CORA_CHEC,-;/CHECK
		TRUACT=CORA_CHECK	;CALL HANDLER

	$CLIQUALDESC -			;DEFINE A QUALIFIER
		QDCODE=CLI$K_CORA_DEBU,-;/[NO]DEBUG[=options]
		TRUACT=CORA_DEBUG,-	;CALL /DEBUG HANDLER
		FLSACT=CORA_NODEBUG	;CALL /NODEBUG HANDLER

	$CLIQUALDESC -			;DEFINE A QUALIFIER
		QDCODE=CLI$K_CORA_DIAG,-;/DIAGNOSE[=options]
		TRUACT=CORA_DIAGNOSE	;CALL HANDLER

	$CLIQUALDESC -			;DEFINE A QUALIFIERF
		QDCODE=CLI$K_CORA_IECC,-;/IECCA
		TRUACT=CORA_IECCA	;CALL HANDLER

	$CLIQUALDESC -			;DEFINE A QUALIFIER
		QDCODE=CLI$K_CORA_NOOP,-;/NOOPTIMIZE
		TRUACT=CORA_NOOPTIMIZE	;CALL HANDLER

	$CLIQUALDESC -			;DEFINE A QUALIFIER
		QDCODE=CLI$K_CORA_NOSH,-;/NOSHOW[=options]
		TRUACT=CORA_NOSHOW	;CALL HANDLER

	$CLIQUALDESC -			;DEFINE A QUALIFIER
		QDCODE=CLI$K_CORA_OPTI,-;/OPTIMIZE[=options]
		TRUACT=CORA_OPTIMIZE	;CALL HANDLER

	$CLIQUALDESC -			;DEFINE A QUALIFIER
		QDCODE=CLI$K_CORA_SHOW,-;/SHOW[=options]
		TRUACT=CORA_SHOW	;CALL HANDLER

	$CLIQUALDESC -			;DEFINE A QUALIFIER
		QDCODE=CLI$K_CORA_TEST,-;/TEST=n
		TRUACT=CORA_TEST	;CALL HANDLER

	$CLIQUALDESC -			;DEFINE A QUALIFIER
		QDCODE=CLI$K_CORA_WIDT,-;/WIDTH=n
		TRUACT=CORA_WIDTH	;CALL HANDLER

	$CLIQUALDESC	END_LIST	;TERMINATE QUALIFIER LIST

;	.SBTTL CORAL
;+
; BACKTRANSLATOR CORAL
;
; CONVERTS DCL COMMAND TO COMPATIBILITY MODE IMAGE COMMAND
;
;
; INPUTS:
;  THE INPUTS ARE RETURNED FROM THE DCL RESULT PARSER AS RESPONSES
;  TO THE VARIOUS REQUEST DESCRIPTORS THAT ARE GIVEN TO IT.
;
;
; OUTPUTS:
;  THE OUTPUT CONSISTS OF TWO STRINGS OR AN ERROR MESSAGE AND ABORT.
;  THE CALLER OPENS THE IMAGE AND INVOKES THE COMPATIBILITY EMULATOR
;  IF NO ERROR OCCURS.
;
;  1- FILENAME STRING OF COMPATIBILITY MODE IMAGE TO BE ACTIVATED.
;
;  2- COMMAND LINE TO BE GIVEN TO THE IMAGE.
;
;-

	PURE

CORA::
	CALLG	W^OBJECT_ARGLIST,-	;PROCESS PRIMARY OUTPUT (/OBJECT:SPEC)
		@CLI$A_UTILSERV(AP)
	MOVQ	W^CLI$Q_RQDESC+OBJECT_DESC,R9 ;PICK UP STRING DESCRIPTOR
	BSBW	INSERTARG		;SAVE IT AS PRIMARY OUTPUT
	DECB	W^PARAMLOC		;SET UP FOR SECONDARY OUTPUT
	CALLG	W^LIST_ARGLIST,-	;PROCESS SECONDARY OUTPUT (/LIST:SPEC)
		@CLI$A_UTILSERV(AP)
	MOVQ	W^CLI$Q_RQDESC+LIST_DESC,R9 ;PICK UP STRING DESCRIPTOR
	BSBW	INSERTARG		;SAVE IT AS SECONDARY OUTPUT
	MOVB	#PRIM_INPUT,W^HOLDLOC	;CAUSE OPTIONS TO GO AT END OF INPUT
	CALLG	W^QUAL_ARGLIST,-	;PROCESS COMMAND OPTIONS
		@CLI$A_UTILSERV(AP)
	MOVB	#PRIM_INPUT+1,W^PARAMLOC;SET UP TO START ACCEPTING INPUTS
10$:	DECB	W^PARAMLOC		;PUT NEXT INPUT IN NEXT POSITION
	CALLG	W^INPUT_ARGLIST,-	;PROCESS THE PRIMARY INPUT
		@CLI$A_UTILSERV(AP)
	MOVQ	W^CLI$Q_RQDESC+INPUT_DESC,R9 ;PICK UP STRING DESCRIPTOR
	BSBW	INSERTARG		;SAVE IT AS PRIMARY INPUT
	BBS	#CLI$V_CONCATINP,-	;BRANCH IF MORE INPUTS TO GET THEM
		W^CLI$B_RQSTAT+INPUT_DESC,10$
	DEFPROG	VAXCOR,NOSTICK		;RETURN DEFAULT PROGRAM TO RUN
	RSB				;RETURN TO GENERATE COMMAND TEXT


; QUALIFIER TRANSLATION 
;
; THE FOLLOWING CODE TRANSLATES THE DCL COMMAND QUALIFIERS
; INTO ASCII STINGS RECOGNIZABLE BY CORAL.  CORAL EXPECTS A
; COMMAND LINE OF THE FORM:
;
; COR outfile,listfile=infile[qualifiers]

CORA_CHECK:				;ENABLE BOUNDS CHECKING
	$SETSTRING	</CH>


CORA_DEBUG:				;SET DEBUG OPTIONS
	$SETSTRING	</DE>,,FLAGS=<BTR$M_RETURN>
10$:	$GETKEYWORD	LIST=<-
				ALL, -
				SYMBOLS, -
				TRACEBACK, -
				NONE, -
				NOSYMBOLS, -
				NOTRACEBACK>
	$REPLACE	<:A,:S,:T,:NON,:NOS,:NOT>,10$


CORA_DIAGNOSE:				;SET UP DIAGNOSE FUNCTIONS
					;PASS FUNCTION LIST AS IS
	$GETSTRING	</DI>,FLAGS=<BTR$M_LIST>


CORA_IECCA:				;ACCEPT ONLY IECCA CORAL
	$SETSTRING	</IE>


CORA_NODEBUG:				;DISABLE DEBUG MODE
	$SETSTRING	</-DE>,FLAGS=<BTR$M_EXPLICIT>


CORA_NOOPTIMIZE:			;DISABLE OPTIMIZATION
	$SETSTRING	</OP:0>


CORA_NOSHOW:				;SELECTIVELY DISABLE LISTING OPTIONS
	$SETSTRING	</-SH>,FLAGS=<BTR$M_RETURN>
LIST_OPTIONS:
    	$GETKEYWORD	LIST=<-
				ONL,      - ;OVERRIDE 'NOLIST' IN SOURCE
				SRC,      - ;LIST SOURCE
				SYM,      - ;LIST SYMBOL TABLE
				MEX,      - ;LIST MACRO EXPANSIONS
				STA,      - ;LIST COMPILATION STATISTICS
				OVERRIDE, - ;ONL
				SOURCE,   - ;SRC
				SYMBOLS,  - ;SYM
				MACROS,   - ;MEX
				STATISTICS> ;STA
	$REPLACE	<:ONL,:SRC,:SYM,:MEX,:STA, -
			 :ONL,:SRC,:SYM,:MEX,:STA>,LIST_OPTIONS


CORA_OPTIMIZE:				;SELECT OPTIMIZATION FUNCTIONS
					;PASS FUNCTION LIST AS IS
	$GETSTRING	</OP>,FLAGS=<BTR$M_LIST>


CORA_SHOW:				;SELECTIVELY ENABLE LISTING FUNCTIONS
	$SETSTRING	</SH>,FLAGS=<BTR$M_RETURN>
	BRW	LIST_OPTIONS		;SHARE COMMON CODE WITH NOSHOW


CORA_TEST:				;SELECT LEVEL OF CONDITIONAL COMPILATION
	$GETDECNUM	</TE>


CORA_WIDTH:				;SET LISTING WIDTH
	$GETDECNUM	</WI>

	.END
