!		Bootstrap Help File - BOOT.HLP
!
!
!	This file describes the input parameters to the bootstrap program
!	VMB.EXE .  Normally the bootstrap will lookup the file [SYSEXE]SYSBOOT.EXE
!	on the specified device, load it into memory and transfer control
!	to it.
!
!	Two sets of command files are provided on the VAX/VMS console floppy
!	to perform the necessary bootstrap operations.  One set of these command
!	files will boot selecting an option to stop in SYSBOOT to alter system
!	parameters.  They are invoked as console indirect command files.
!
!		@DM0GEN			! Boot from RK07 unit 0
!		@DM1GEN			!		 unit 1
!		@DM2GEN			!		 unit 2
!		@DM3GEN			!		 unit 3
!		@DB0GEN			! Boot from RM03/RP06 unit 0
!		@DB1GEN			!		      unit 1
!		@DB2GEN			!		      unit 2
!		@DB3GEN			!		      unit 3
!		@DB4GEN			!		      unit 4
!		@DB5GEN			!		      unit 5
!		@DB6GEN			!		      unit 6
!		@DB7GEN			!		      unit 7
!
!	The other set of these command files is normally invoked only via
!	the BOOT command but may be invoked explicitly as indirect command files.
!	These command files perform a normal, non-interactive boot without any
!	stop in SYSBOOT to change parameters.
!
!	BOOT DM0   or	@DM0BOO.CMD	! Boot RK07 unit 0
!	BOOT DM1			!	    unit 1
!	BOOT DM2			!	    unit 2
!	BOOT DM3			!	    unit 3
!	BOOT DB0			! Boot RM03 or RP06 unit 0
!	BOOT DB1			!		    unit 1
!	BOOT DB2			!		    unit 2
!	BOOT DB3			!		    unit 3
!	BOOT DB4			!		    unit 4
!	BOOT DB5			!		    unit 5
!	BOOT DB6			!		    unit 6
!	BOOT DB7			!		    unit 7
!
!	The bootstrap is loaded into memory at least one page above the first
!	available working memory to allow space for the Restart Parameter
!	Block.  The address of the base of the bootstrap is passed through
!	SP, the stack pointer, where it also serves as a temporary stack pointer.
!
! Input Parameters:
!	R0  -  <31:4>=MBZ; <3:0>=Device Type Code
!			0 => Disk Pack		(RM03/RP04/RP05/RP06/RP07)
!			1 => Cartridge Disk	(RK06/RK07)
!
!	R1  -  <31:4>=MBZ; <3:0>=System Bus Address("TR" Number)
!		For most configurations the following convention has been
!		used:
!			TR Number	Adapter / Controller
!			---------	--------------------
!			    3		UNIBUS adapter
!			    8		MASSBUS adapter number 1
!			    9		MASSBUS adapter number 2
!
!	R2  -  For UBA:
!			<31:18>=MBZ; <17:3>=UNIBUS Address of Control Register!
!			<2:0>=MBZ
!			RK06/RK07 CSR = 3FF20
!	       FOR MBA:
!			<31:4>=MBZ; <3:0>=Controller/Formatter Number
!	R3  -  <31:4>=MBZ; <3:0>=Unit Number
!	R4  -  <31:0>=Logical Block Number to read as boot block
!	R5  -  <31:0>=Software Boot Control flags
!		Bit	Meaning
!		---	-------
!		 0	Conversational boot. At various points in the system
!			boot procedure, parameter and other input will be
!			solicited from the console.
!
!		 1	Debug.  This flag is passed through to VMS and causes
!			the code for the exec debugger to be included in
!			the running system.
!
!		 2	Initial breakpoint. If this flag is set, and the exec
!			debugger code is included (flag bit 1) then a breakpoint
!			will occur immediately after the exec enables mapping.
!
!		 3	Boot block.  If this flag is set then the boot block
!			will be read and control transfered to it.
!
!		 4	Diagnostic boot.  This flag causes a boot by file
!			name for the diagnostic supervisor.
!
!		 5	Bootstrap breakpoint. This flag causes the bootstrap
!			to stop a breakpoint after performing necessary init-
!			ialization if it has been built with debug code.
!
!		 6	Image header. If this flag is set the transfer address
!			from the image header of the boot file will be used.
!			Otherwise control will transfer to the first byt of the
!			boot file.
!
!		 7	Memory test inhibit. This flag inhibits the testing
!			of memory during bootstrapping.
!
!		 8	File name. Causes the bootstrap to solicit the name 
!			of the boot file.
!
!		 9	Halt before transfer.  Causes a HALT instruction
!			to be executed prior to the transfer to the bootfile.
!			This option is useful for debugging purposes.
!
!
!	SP  -  ADDRESS+(^X200) of first working 64Kb memory region
!	       usable as both stack pointer and pointer to good memory.
!
!
! Output Parameters:
!	R10	-	Base address of region containing secondary bootstrap
!	R11	-	Pointer to Restart Parameter Block (RPB)
!	SP	-	Stack pointer
!	PR$_SCBB - 	System Control Block base register
!
!	Memory layout at start of secondary bootstrap:
!
!	+-----------------------------------------+ :BASE
!	!					  !
!	!	Restart Parameter Block (RPB)	  !
!	!					  !
!	+-----------------------------------------+ :BASE+^X200
!	!					  !
!	!	Primary Bootstrap Code		  !
!	!					  !
!	!					  !
!	+-----------------------------------------+ :PR$_SCBB
!	!					  !
!	!	   System Control Block		  !
!	!					  !
!	+-----------------------------------------+ :PFNMAP
!	!					  !
!	!		PFN Bitmap		  !
!	!					  !
!	+-----------------------------------------+ :PFNMAP+^X800
!	!					  !
!	!	     Bootstrap Stack		  !
!	!					  !
!	+-----------------------------------------+ :(SP)
!	!					  !
!	!	 Secondary Bootstrap Code	  !
!	!					  !
!	+-----------------------------------------+
!
