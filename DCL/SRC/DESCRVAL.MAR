	.TITLE	DESCRVAL - TOKEN TABLE MANIPULATION ROUTINES
	.IDENT	'V03-000'
 
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
; D. N. CUTLER 24-APR-77
;
; PARSE TABLE DESCRIPTOR VALUE MANIPULATION ROUTINES
;
; MODIFIED BY:
;
;	V003	TMH0003		Tim Halvorsen	07-Jan-1982
;		Move DCL$COMPSTRING routine to CHARMANIP module
;		for the benefit of those standalone programs which use
;		this module with the DCL sub-command parsing module.
;
;	V002	TMH0002		Tim Halvorsen	14-Feb-1981
;		Use R10 rather than FP as WRK address.
;
;	V001	TMH0001		Tim Halvorsen	29-Aug-1980
;		Use new MDL structures.  Remove use of R10 in favor
;		of WRK_L_RSLNXT and WRK_L_RSLEND.
;---

;
; MACRO LIBRARY CALLS
;
 
	WRKDEF				;DEFINE COMMAND WORK AREA
	PTRDEF				;DEFINE TOKEN DESCRIPTOR

	.PSECT	DCL$ZCODE,BYTE,RD,NOWRT

	.SBTTL	GET RESULT PARSE DESCRIPTOR VALUES
;+
; DCL$GETDVAL - GET RESULT PARSE DESCRIPTOR VALUES
;
; THIS ROUTINE IS CALLED TO OBTAIN THE VALUES FROM THE NEXT DESCRIPTOR IN
; THE RESULT PARSE TABLE.
;
; INPUTS:
;
;	WRK_L_RSLNXT = NEXT TOKEN DESCRIPTOR TO PROCESS
;
; OUTPUTS:
;
;	R0 LOW BIT CLEAR INDICATES PARSE DESCRIPTOR TABLE IS EMPTY.
;
;	R0 LOW BIT SET INDICATES NEXT PARSE DESCRIPTOR HAS BEEN OBTAINED
;		WITH:
;
;	R1 = VALUE FIELD OF DESCRIPTOR.
;	R2 = ADDRESS OF ITEM IN COMMAND BUFFER.
;	R3 = FLAGS FIELD OF DESCRIPTOR.
;	R4 = FIELD TERMINATOR CLASS NUMBER.
;	R5 = TYPE OF ENTRY.
;-
 
DCL$GETDVAL::				;GET RESULT PARSE DESCRIPTOR VALUES
	CLRL	R0			;ASSUME TABLE IS EMPTY
	MOVL	WRK_L_RSLNXT(R10),R1	;GET ADDRESS OF NEXT TOKEN DESCRIPTOR
	CMPL	R1,WRK_L_RSLEND(R10)	;ANY MORE ENTRIES IN TABLE?
	BGEQU	10$			;IF GEQU NO
	ADDL	#PTR_C_LENGTH,WRK_L_RSLNXT(R10)	;POINT TO NEXT DESCRIPTOR IN TABLE
	EXTZV	#PTR_V_OFFSET,#PTR_S_OFFSET,- ;EXTRACT OFFSET TO ITEM
		PTR_L_DESCR(R1),R2	;
	MOVAB	WRK_G_BUFFER(R10)[R2],R2 ;CALCULATE ACTUAL ITEM ADDRESS
	EXTZV	#PTR_V_FLAGS,#PTR_S_FLAGS,- ;EXTRACT FLAGS
		PTR_L_DESCR(R1),R3	;
	EXTZV	#PTR_V_TERM,#PTR_S_TERM,- ;EXTRACT TERMINATOR CLASS
		PTR_L_DESCR(R1),R4	;
	EXTZV	#PTR_V_TYPE,#PTR_S_TYPE,- ;EXTRACT ITEM TYPE
		PTR_L_DESCR(R1),R5	;
	EXTZV	#PTR_V_VALUE,#PTR_S_VALUE,- ;EXTRACT VALUE
		PTR_L_DESCR(R1),R1	;
	INCL	R0			;INDICATE NEXT DESCRIPTOR OBTAINED
10$:	RSB				;
 
	.END
