	.TITLE	GOTO - GOTO COMMAND EXECUTION
	.IDENT	'V03-000'
 
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
; GOTO COMMAND EXECUTION
;
; D. N. CUTLER 6-MAY-77
;
; MODIFIED BY:
;
;	V005	TMH0005		Tim Halvorsen	28-Dec-1981
;		Remove roundup before ALLDYNMEM - now done inside routine.
;
;	V004	TMH0004		Tim Halvorsen	13-Jun-1981
;		Use new format of label table symbol value.
;
;	V003	TMH0003		Tim Halvorsen	09-Apr-1981
;		Do not change $STATUS on successful GOTO.
;
;	V002	TMH0002		Tim Halvorsen	14-Feb-1981
;		Use R10 rather than FP as WRK address.
;
;	V001	TMH0001		Tim Halvorsen	09-Sep-1980
;		Convert to MDL structures and remove macro references.
;---

;
; MACRO LIBRARY CALLS
;
 
	PRCDEF				;DEFINE PROCESS WORK AREA
	WRKDEF				;DEFINE COMMAND WORK AREA
	SYMDEF				;DEFINE SYMBOL ENTRY OFFSETS
	$CLIMSGDEF			;DEFINE ERROR/STATUS VALUES
	$DEVDEF				;DEFINE DEVICE CHARACTERISTIC BITS
	$PSLDEF				;DEFINE PROCESSOR STATUS FIELDS

	$RABDEF				;DEFINE RAB OFFSETS
	.PSECT	DCL$ZCODE,BYTE,RD,NOWRT

	.SBTTL	GOTO LABEL
;+
; DCL$GOTO - GOTO LABEL
;
; THIS ROUTINE IS CALLED AS AN INTERNAL COMMAND TO EXECUTE THE GOTO LABEL DCLS
; COMMAND.
;
;	R8 = ADDRESS OF SCRATCH BUFFER DESCRIPTOR.
;	R9 = ADDRESS OF SCRATCH STACK.
;	R10 = BASE ADDRESS OF COMMAND WORK AREA.
;	R11 = BASE ADDRESS OF PROCESS WORK AREA.
;
; OUTPUTS:
;
;	THE SPECIFIED LABEL IS SEARCHED FOR IN THE CURRENT LABEL TABLE, AND IF
;	FOUND, A RANDOM FIND IS EXECUTED TO POSITION THE INPUT FILE FOR SUBSE-
;	QUENT GET OPERATIONS. OTHERWISE A LABEL TABLE ENTRY IS CONSTRUCTED AND
;	APPROPRIATE STATE INFORMATION IS SET UP SO THAT A FORWARD GOTO SEARCH
;	IS EXECUTED.
;-
 
	.ENABL	LSB
DCL$GOTO::				;GOTO LABEL
	SETBIT	WRK_V_NOSTAT,WRK_W_FLAGS(R10) ;DO NOT CHANGE $STATUS ON SUCCESS
	MOVL	PRC_L_INDINPRAB(R11),R0	;GET CURRENT INPUT RAB
	BBC	#DEV$V_RND,RAB$L_CTX(R0),10$ ;IF CLR, NOT RANDOM ACCESS DEVICE
	BSBW	DCL$GETDVAL		;GET LABEL DESCRIPTOR VALUES
	DISABLE				;DISABLE CONTROL Y/C AST'S
	CLRQ	(SP)+			;REMOVE RETURN INFORMATION FROM STACK

	.SBTTL	POSITION FILE TO GOTO LABEL
;+
; DCL$POSITION - POSITION FILE TO GOTO LABEL
;
; THIS ROUTINE IS CALLED TO SEARCH THE LABEL TABLE FOR A GOTO LABEL, AND IF
; FOUND POSITION THE CURRENT COMMAND FILE TO THE LABEL.
;
; INPUTS:
;
;	R1 = LENGTH OF GOTO LABEL.
;	R2 = ADDRESS OF GOTO LABEL.
;	R10 = BASE ADDRESS OF COMMAND WORK AREA.
;	R11 = BASE ADDRESS OF PROCESS WORK AREA.
;
;	IT IS ASSUMED THAT CONTROL Y/C AST'S ARE DISABLED.
;
; OUTPUTS:
;
;	THE LABEL TABLE IS SEARCHED FOR THE SPECIFIED GOTO LABEL. IF THE LABEL
;	IS FOUND, THEN THE CURRENT COMMAND FILE IS POSITIONED TO THAT POINT.
;	OTHERWISE A NEW LABEL TABLE ENTRY IS MADE AND A POINTER TO THE GOTO
;	LABEL IS ESTABLISHED IN THE PROCESS WORK AREA.
;-
 
DCL$POSITION::				;POSITION FILE TO GOTO LABEL
	MOVAB	PRC_Q_LABEL(R11),R0	;GET ADDRESS OF LABEL TABLE LISTHEAD
	BSBW	DCL$SEARCHT		;SEARCH TABLE FOR LABEL
	BLBS	R0,30$			;IF LBS LABEL ENTRY FOUND
	MOVQ	R1,R4			;SAVE DESCRIPTOR OF LABEL
	ADDL	#2,R1			;ADD IN BLOCK_SIZE,LABEL_SIZE BYTES
	BSBW	DCL$ALLDYNMEM		;ALLOCATE DYNAMIC MEMORY
	BLBC	R0,20$			;BR IF FAILED
	MOVB	R1,(R2)+		;SAVE SIZE OF BLOCK IN BLOCK
	MOVAB	(R2),PRC_L_SYMBOL(R11)	;SAVE TARGET FOR GOTO
	MOVB	R4,(R2)+		;SET SIZE OF LABEL STRING
	MOVC	R4,(R5),(R2)		;FILL IN LABEL NAME
	BISW	#PRC_M_GOTO,PRC_W_FLAGS(R11) ;SET FORWARD GOTO IN PROGRESS
10$:	STATUS	NORMAL			;SET NORMAL COMPLETION
20$:	RSB				;
 
;
; LABEL ALREADY DEFINED - POINT TO PROPER RECORD
;
 
30$:	MOVL	PRC_L_INDINPRAB(R11),R8	;GET ADDRESS OF INDIRECT FILE RAB
	MOVC	#6,SYM_T_SYMBOL+3(R3)[R1],RAB$W_RFA(R8) ;RESTORE RECORD FILE ADDRESS
	MOVB	#RAB$C_RFA,RAB$B_RAC(R8) ;SET ACCESS MODE FOR RANDOM FIND
	$FIND	RAB=(R8)		;FIND RECORD THAT HAS LABEL
	MOVB	#RAB$C_SEQ,RAB$B_RAC(R8) ;RESET TO SEQUENTIAL ACCESS MODE
	RSB				;
	.DSABL	LSB

	.SBTTL	DEALLOCTE GOTO CONTROL BLOCK
;+
; DCL$DEALGOTO-DEALLOCATE GOTO CONTROL BLOCK
;
; THIS ROUTINE IS CALLED TO DEALLOCATE AN OUTSTANDING GOTO CONTROL
; BLOCK WHEN IT IS SATISFIED OR AN END OF FILE IS REACHED WITHOUT
; FINDING THE LABEL.
;
;-
DCL$DEALGOTO::				;
	MOVL	PRC_L_SYMBOL(R11),R0	; ADDRESS OF GOTO CONTROL BLOCK
	MOVZBL	-(R0),R1		; GET LENGTH AND POINT AT START OF BLOCK
	BRW	DCL$DEADYNMEM		; DEALLOCATE THE BLOCK
 
	.END
