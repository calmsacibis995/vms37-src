MODULE staclint (IDENT='V03-000',
	ADDRESSING_MODE(NONEXTERNAL=LONG_RELATIVE,
			EXTERNAL=GENERAL)) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  Stand-alone command language interface routines
!
! ABSTRACT:
!
!	These routines are used to enable a stand-alone
!	image to obtain the command parameters and qualifiers
!	from the command language interpreter.
!
! ENVIRONMENT:
!
!	VAX/VMS operating system. unprivileged user mode,
!
! AUTHOR:  Peter George, October 1981
!
! Modified by:
!
!	V001	TMH0001		Tim Halvorsen	30-Dec-1981
!		Remove temporary definitions of CLI$_PRESENT, etc.
!		and obtain their real values from the message symbols.
!--

!
! Include files
!
LIBRARY 'SYS$LIBRARY:STARLET';

REQUIRE 'SYS$LIBRARY:UTILDEF';			! Common VMS BLISS definitions

REQUIRE 'LIB$:CLIDEF';			! CLI definitions

!
! Table of contents
!

FORWARD ROUTINE
    cli$present,			! Determine if entity present
    cli$get_value,			! Get value of entity
    cli$dcl_parse,			! Parse a command line
    cli$dispatch,			! Dispatch to user processing routine
    cli$end_parse;			! Signal any unprocessed modifiers

EXTERNAL ROUTINE
    dcl$present,
    dcl$getvalue,
    dcl$dclparse,
    dcl$dispatch,
    dcl$endparse,
    lib$get_vm,				! Allocate virtual memory
    lib$free_vm,			! Deallocate virtual memory
    str$copy_dx;			! Copy to any class string

!
! External message definitions
!

EXTERNAL LITERAL
    cli$_present,			! Entity is explicitly present
    cli$_negated,			! Entity is explicitly not present
    cli$_defaulted,			! Entity is implicitly present
    cli$_absent;			! Entity is implicitly not present

GLOBAL ROUTINE cli$present (name) =

!---
!
!	Determine if an entity is present on the command line.
!
! Inputs:
!
!	name = Address of entity name descriptor
!
! Outputs:
!
!	routine value = True if present, else false.
!---

BEGIN

MAP
    name : REF BBLOCK;

LOCAL
    req_desc :	BBLOCK [cli$c_reqdesc],	! Request descriptor block
    rpw :	BBLOCK [cli$c_workarea],! Result parse work area
    req_flags :	BITVECTOR [32];		! Request flags array

CH$FILL(0, cli$c_reqdesc, req_desc);		! Zero request descriptor block
req_desc [cli$a_prsact] = lib$get_vm;		! Set address of get vm routine
req_desc [cli$a_absact] = lib$free_vm;		! Set address of free vm routine
req_desc [cli$w_rqsize] = .name [dsc$w_length];	! Set length of entity name
req_desc [cli$a_rqaddr] = .name [dsc$a_pointer];! Set address of entity name
RETURN (dcl$present (req_desc, rpw, req_flags));! Call DCL utility
END;

GLOBAL ROUTINE cli$get_value (name, retdesc) =

!---
!
!	This routine is called to obtain the next value
!	associated with a named entity on the command line.
!
! Inputs:
!
!	name = Address of entity name descriptor
!	retdesc = Address of a return buffer descriptor
!
! Outputs:
!
!	True = A value was returned (there may be more).
!	False = There is no more values associated with entity.
!
!	All other errors are signaled.
!---

BEGIN

MAP
    name : REF BBLOCK;

LOCAL
    req_desc :	BBLOCK [cli$c_reqdesc],	! Request descriptor block
    rpw :	BBLOCK [cli$c_workarea],! Result parse work area
    req_flags :	BITVECTOR [32],		! Request flags array
    status;

CH$FILL(0, cli$c_reqdesc, req_desc);		! Zero request descriptor block
req_desc [cli$a_prsact] = lib$get_vm;		! Set address of get vm routine
req_desc [cli$a_absact] = lib$free_vm;		! Set address of free vm routine
req_desc [cli$w_rqsize] = .name [dsc$w_length];	! Set length of entity name
req_desc [cli$a_rqaddr] = .name [dsc$a_pointer];! Set address of entity name
status = dcl$getvalue (req_desc, rpw, req_flags);  ! Call DCL utility
str$copy_dx (.retdesc, req_desc [cli$w_rqsize]);! Copy result into return desc
RETURN .status;
END;

GLOBAL ROUTINE cli$dcl_parse (command, tables) =

!---
!
!	This routine can be called to parse a command line.
!
! Inputs:
!
!	command = address of descriptor of command string
!
!	tables =  address of command tables
!
! Outputs:
!
!	The command is parsed and the command work area is initialized.
!
!---

BEGIN

BUILTIN
    NULLPARAMETER;

LOCAL
    req_desc :	BBLOCK [cli$c_reqdesc],	! Request descriptor block
    rpw :	BBLOCK [cli$c_workarea],! Result parse work area
    req_flags :	BITVECTOR [32];		! Request flags array

CH$FILL(0, cli$c_reqdesc, req_desc);		! Zero request descriptor block
req_desc [cli$a_prsact] = lib$get_vm;		! Set address of get vm routine
req_desc [cli$a_absact] = lib$free_vm;		! Set address of free vm routine
IF NULLPARAMETER(1)				! Set address of command line
   THEN req_desc [cli$a_rqaddr] = 0
   ELSE req_desc [cli$a_rqaddr] = .command;
req_desc [cli$a_erract] = .tables;		! Set address of command tables
RETURN (dcl$dclparse (req_desc, rpw, req_flags));  ! Call callback utility
END;

GLOBAL ROUTINE cli$dispatch =

!---
!
!	This routine can be called to dispatch to any verb processing
!	routines if the command has the ROUTINE attribute.
!
! Inputs:
!
!	None
!
! Outputs:
!
!	The verb routine is called (if any).
!
!	The status passed back from the routine is returned in R0.
!	If no routine is specified, success is returned.
!---

BEGIN

LOCAL
    req_desc :	BBLOCK [cli$c_reqdesc],	! Request descriptor block
    rpw :	BBLOCK [cli$c_workarea],! Result parse work area
    req_flags :	BITVECTOR [32];		! Request flags array

CH$FILL(0, cli$c_reqdesc, req_desc);		! Zero request descriptor block
req_desc [cli$a_prsact] = lib$get_vm;		! Set address of get vm routine
req_desc [cli$a_absact] = lib$free_vm;		! Set address of free vm routine
RETURN (dcl$dispatch (req_desc, rpw, req_flags));  ! Call callback utility
END;

GLOBAL ROUTINE cli$end_parse =

!---
!
!	This routine is called when the user has completed
!	all command line parsing.  It checks that all qualifiers
!	which appeared on the command line were processed in one
!	way or another by the utility.
!
! Inputs:
!
!	None
!
! Outputs:
!
!	None
!---

BEGIN

LOCAL
    req_desc :	BBLOCK [cli$c_reqdesc],	! Request descriptor block
    rpw :	BBLOCK [cli$c_workarea],! Result parse work area
    req_flags :	BITVECTOR [32];		! Request flags array

CH$FILL(0, cli$c_reqdesc, req_desc);		! Zero request descriptor block
req_desc [cli$a_prsact] = lib$get_vm;		! Set address of get vm routine
req_desc [cli$a_absact] = lib$free_vm;		! Set address of free vm routine
RETURN (dcl$endparse (req_desc, rpw, req_flags));  ! Call DCL utility
END;

END
ELUDOM
