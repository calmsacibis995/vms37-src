;	Version 'V03-000'
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;***********************************************************************
;
;
;                              D C L L I B
;
;
;***********************************************************************
;
; MODIFIED BY:
;
;	V004	TMH0004		Tim Halvorsen		09-Aug-1981
;		Generate structure level 4 tables: pointer table
;		is now longword offsets rather than word offsets.
;
;	V003	TMH0003		Tim Halvorsen		03-Apr-1981
;		Remove IFBATCH and IFNOBATCH macros.
;
;	V02-002	KDM0025		Kathleen D. Morse	08-Oct-1980
;		Remove $RUNDWN_S macro.
;
;	V02-001	TMH0001		Tim Halvorsen		08-Jul-1980
;		Remove all macros which simply call external routines.
;		Remove structure definition macros (replaced by MDL).
;		Update DEFCMD to create structure level 2 CMD block.
;---

;
; MACRO TO LOAD AN ERROR STATUS INTO R0
;
	.MACRO	LODSTAT	VAL,PLC=R0
	.IF IDN	<VAL><NORMAL>
	MOVL	#1,R0
	.IFF
	_$$_ = <<CLI$_'VAL & ^X 7FFF>/4>
	.IF LT	<_$$_ - 64>
	MNEGL	#_$$_,PLC
	.IFF
	CVTBL	#-_$$_,PLC
	.ENDC
	.ENDC
	.ENDM	LODSTAT
 
;
; ERROR MESSAGE GENERATION
;
 
	.MACRO	ERRMSG ERROR
		.IF NB	ERROR
		LODSTAT	ERROR
		.ENDC
		BSBW	DCL$ERRORMSG
	.ENDM	ERRMSG
 
;
; SET COMPLETION STATUS VALUE
;
 
	.MACRO	STATUS ERROR,PLC
		LODSTAT	ERROR,PLC
	.ENDM	STATUS
 
;
; SPECIAL MACROS USED BY RESULT PARSE ROUTINES
;
 
	.MACRO	SETSTAT	VAL
	.IF IDN	<VAL><SUCCESS>
	MOVL	#1,R0
	.IFF
	.IF IDN	<VAL><FAIL>
	CLRL	R0
	.IFF
	MOVZWL	#CLI$_'VAL&^XFFFF,R0
	.ENDC
	.ENDC
	.ENDM	SETSTAT
 
;
; DISABLE CONTROL Y/C AST'S
;
 
	.MACRO	DISABLE
		BSBW	DCL$DISABLE
	.ENDM	DISABLE
 
;
; ENABLE CONTROL Y/C AST'S
;
 
	.MACRO	ENABLE
		JSB	@(SP)+
	.ENDM	ENABLE

;
; SPECIAL MACROS USED BY RESULT PARSE ROUTINES
;
	.MACRO	SETINTR	VAL,PLC=R0
	MOVL	#<<CLI$_'VAL>!1@31>,PLC
	.ENDM
 

 
;
; MACRO TO SET OR CLEAR A BIT BY BIT NUMBER
;
;CALL:
;	SETBIT	BITNUM,FLAGWORD
; OR:
;	CLRBIT	BITNUM,FLAGWORD
;
; WHERE:
;	BITNUM IS ANY VALID SOURCE OPERAND SECIFYING THE BIT
;		OFFSET FROM THE FLAG BASE TO SET/CLEAR
;
;	FLAGWORD IS ANY VALID DESTINATION OPERAND
;
	.MACRO	SETBIT	VAL,FLAG
	.NTYPE	_$$_	VAL
	.IF EQ	<_$$_-^X0EF>
	.IF NDF	VAL
	BBSS	S^#VAL,FLAG,.+1
	.IFF
	.IF LT <VAL-8>
	BISB	#<1@VAL>,FLAG
	.IFF
	BBSS	#VAL,FLAG,.+1
	.ENDC
	.ENDC
	.IFF
	BBSS	VAL,FLAG,.+1
	.ENDC
	.ENDM	SETBIT
;
	.MACRO	CLRBIT	VAL,FLAG
	.NTYPE	_$$_	VAL
	.IF EQ	<_$$_-^X0EF>
	.IF NDF	VAL
	BBCC	S^#VAL,FLAG,.+1
	.IFF
	.IF LT <VAL-8>
	BICB	#<1@VAL>,FLAG
	.IFF
	BBCC	#VAL,FLAG,.+1
	.ENDC
	.ENDC
	.IFF
	BBCC	VAL,FLAG,.+1
	.ENDC
	.ENDM	CLRBIT

 
;
; DEFCMD	VERB,QUAL,MINPRM,MAXPRM,DEFIMG,FLAGS,OUTPRS,PRMPTS,QUALST
;
;		WHERE:
;
;			VERB - COMMAND VERB
;			QUAL - 'QUALIFIERS ALLOWED' FLAG - 'NO'=NO; 'YES'=YES
;			MINPRM - MINIMUM NUMBER OF REQUIRED PARAMETERS
;			MAXPRM - MAXIMUM NUMBER OF POSSIBLE PARAMETERS
;			DEFIMG - DEFAULT IMAGE TO ACTIVATE
;			FLAGS - COMMAND FLAGS ENCLOSED IN BRACKETS
;			OUTPRS - LIST OF 1-4 CASE VALUES FOR OUTPUT RESULT PARSE
;			PRMPTS - LIST OF PROMPTS AND PROMPT FLAGS
;				ENCLOSED IN BRACKETS
;			QUALST - THE NAME OF A VERB THAT THIS COMMAND SHARES A
;				QUALIFIER LIST WITH.
;

	.MACRO	DEFCMD	VERB,QUAL,MINPRM,MAXPRM,DEFIMG,FLAGS,-
			OUTPRS,PRMPTS,QUALST,?CMD,?CMDEND,?PRO,?QUA,?OUTLST,?L1

	.PSECT	TAB$VERBTBL,BYTE,RD,NOWRT

	.IIF	B	VERB,	.ERROR	;NO VERB;
	.NCHR	$$$,VERB		;GET LENGTH OF VERB
	.IIF	GT	$$$-4,	.ERROR	;VERB TOO LONG;
$XX$=128
	.IRPC	$YY$,<VERB>
	.BYTE	^A/$YY$/!$XX$
$XX$=0
	.ENDM
	.REPT	4-$$$			;PAD VERB WITH BLANKS
	.ASCII	\ \			;BLANK PADDING
	.ENDR

	.PSECT	TAB$COMDPTR,BYTE,RD,NOWRT

	.LONG	VERB_G_'VERB'-.-4	;OFFSET TO COMMAND DESCRIPTOR BLOCK
 
	.PSECT	TAB$CMDATA,BYTE,RD,NOWRT

	.IIF	B	MINPRM,	.ERROR	;NO MIN PARM TEXT;
	.IIF	B	MAXPRM,	.ERROR	;NO MAX PARM TEXT;

VERB_G_'VERB:				;NEEDED TO REFERENCE FROM ANOTHER PSECT
CMD:
	.BYTE	CMDEND-CMD		;LENGTH OF STRUCTURE

	.IF DF	CLI$K_VERB_'VERB	;IF THIS COMMAND HAS GENERIC VERB TYPE
	.BYTE	CLI$K_VERB_'VERB	;VERB GENERIC TYPE
	.IFF				;IF NO GENERIC TYPE ASSIGNED
	.BYTE	0			;ZERO IS NONE GENERIC COMMAND
	.ENDC

	.BYTE	MAXPRM*16+MINPRM	;PARAMETER COUNTS

$$$=0
	.IRP	$ARG$,<FLAGS>
	$$$ = $$$ ! CMD_M_'$ARG$	;'OR' IN FLAG
	.ENDR
	.BYTE	$$$			;GENERATE FLAG WORD
 
	.IF NB	<DEFIMG>
	.WORD	-IMG_K_'DEFIMG		;DEFAULT IMAGE NAME INDEX NUMBER
	.IFF
	.WORD	0			;NO DEFAULT IMAGE NAME
	.ENDC

	.IF	IDN	QUAL,<NO>	;CHECK IF QUAL DEFINED FOR COMMAND
	.WORD	0			;NO QUALIFIERS ON THIS COMMAND
	.IFF
	.IF	IDN	QUAL,<YES>	;CHECK IF QUAL DEFINED FOR COMMAND
	.IF	NB	<QUALST>	;IF EXTERNAL QUALIFIER LIST SPECIFIED
	.WORD	DCL$G_'QUALST'QUALS-CMD	;SET OFFSET TO THAT LIST
	.IFF
	.WORD	QUA-CMD			;OFFSET TO QUALIFIER DESCRIPTOR BLOCK
	.ENDC
	.IFF
	.ERROR				;QUALIFIER NOT SPECIFIED AS YES OR NO;
	.ENDC
	.ENDC

	.IF NB	<PRMPTS>
	.IF NE	MAXPRM
	.WORD	PRO-CMD			;OFFSET TO PROMPT DESCRIPTORS
	.IFF
	.WORD	0
	.ENDC
	.IFF
	.WORD	0
	.ENDC
 
	.IF NB	<OUTPRS>
	.WORD	OUTLST-CMD		;OFFSET TO OUTPUT LIST
	.IFF
	.WORD	0
	.ENDC

	.WORD	0			;NO MUTUAL EXCLUSION SET
	.WORD	0			;NO IMPLICATION SET

	.IF NB	<OUTPRS>		; GENERATE OUTPUT LIST IF NEEDED
OUTLST:	.BYTE	L1-.-1
	.IRP	$ARG$,<OUTPRS>
	.BYTE	$ARG$
	.ENDR
L1:
	.ENDC	
CMDEND:

	.IF NB	<PRMPTS>		; GENERATE PARAMETER BLOCKS IF NEEDED
	.IF NE	<MAXPRM>
PRO:	BLDPROMPTS MAXPRM,<PRMPTS>
	.ENDC
	.ENDC
 
	.IF IDN	<QUAL>,<YES>		; GENERATE QUALIFIER BLOCKS IF NEEDED
	.IF B	<QUALST>
QUA:
	.LIST
	$CLIDEFQUAL'VERB
	.NLIST
	.ENDC
	.ENDC

	.ENDM	DEFCMD
