	.TITLE	RPSUB - DCL RESULT PARSE SUBROUTINES
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY:	STARLET DCL CLI
;
; ABSTRACT:	MISC SUBROUTINES
;
;
; ENVIRONMENT:	NATIVE MODE USER CODE
;
; AUTHOR:	W.H.BROWN, CREATION DATE:14-APR-77
;
; MODIFIED BY:
;
;	V003	TMH0003		Tim Halvorsen	27-Apr-1981
;		Make use of routine to obtain PRC address.
;
;	V002	TMH0002		Tim Halvorsen	03-Apr-1981
;		Change method of locating PRC data area.
;
;	001	TMH0001		Tim Halvorsen	09-Jul-1980
;		Use new MDL structures.
;--

	.SBTTL	DECLARATIONS
;
; MACRO LIBRARY CALLS
;
 
	PRCDEF				; DEFINE PROCESS WORK AREA
	WRKDEF				; DEFINE COMMAND WORK AREA
	ENTDEF				; DEFINE ENTITY DESCRIPTOR
	PTRDEF				; DEFINE RESULT PARSE DESCRIPTOR
	RPWDEF				; RESULT PARSE WORK DEFINITIONS
	PLMDEF				; PARAMETER LIMIT DEFINITIONS
	$CLIDEF				; CLI DEFINITIONS
	$CLIMSGDEF			; CLI MESSAGE DEFINITIONS
 

;
; OWN STORAGE:
;
	.PSECT	DCL$ZCODE	BYTE,RD,NOWRT
 
CNVRDX:	.ASCII	\ODX\			; CONVERSION RADIX CONTROLS
RADIX:	.BYTE	16,10,8			; CORRESPONDING RADIX VALUES

	.SBTTL	VALUE CONVERSION ROUTINES
;++
; FUNCTIONAL DESCRIPTION:
;
;	THIS ROUTINE IS CALLED TO CONVERT AN ASCII STRING
;	TO A NUMERIC VALUE.
;
; CALLING SEQUENCE:
;
;	BSB/JSB	DCL$CNVNUMDEC		; CONVERT WITH DEFAULT RADIX DECIMAL
;	BSB/JSB	DCL$CNVASCBIN		; CONVERT WITH DEFAULT RADIX INPUT
;
; INPUT PARAMETERS:
;
; AT DCL$CNVASCBIN:
;
;	R1 IS DEFAULT RADIX INDICATOR, 0=HEX,1=DECIMAL,2=OCTAL
;
; ALWAYS:
;
;	R2,R3 IS QUADWORD DESCRIPTOR OF VALUE
;
; OUTPUT PARAMETERS:
;
;	VALUE IS CONVERTED AND RETURNED IN R1.
;
; COMPLETION CODES:
;
;	R0 IS SET TO INDICATE SUCCESS OR FAILURE
;
;--
	.ENABL	LSB
 
DCL$CNVNUMDEC::				; CONVERT NUMERIC DECIMAL RADIX
	MOVL	#1,R1			; RADIX IS DECIMAL
DCL$CNVASCBIN::				; CONVERT IN SPECIFIED RADIX
	PUSHAB	(R2)[R3]		; SAVE ADDRESS OF END OF STRING
	PUSHL	#0			; SET NO NEGATE FLAG
	MOVL	R2,R0			; TEST FOR ZERO LENGTH STRING
	BEQL	70$			; IF IT IS THE NULL STRING-RETURN ZERO
5$:	CMPB	#^A/%/,(R3)		; RADIX CHANGE OPERATOR?
	BNEQ	10$			; BR IF NO
	INCL	R3			; SKIP OVER OPERATOR
	LOCC	(R3)+,#3,CNVRDX		; FIND RADIX SPECIFIER
	BEQL	70$			; BR IF NONE RECOGNIZED
	MOVAB	-(R0),R1		; SET RADIX INDICATOR
	BRB	5$			; LOOK FOR AN OTHER SET
10$:	CMPB	#^A/+/,(R3)		; CHECK FOR UNIARY OPERATOR OF PLUS
	BEQL	20$			; BR IF YES
	CMPB	#^A/-/,(R3)		; HOW ABOUT MINUS
	BNEQ	30$			; BR IF NO
	INCL	(SP)			; NEGATE THE NEGATIVE FLAG
20$:	INCL	R3			; SKIP THE UNIARY OPERATOR
	BRB	5$			; LOOK FOR ANOTHER
30$:	MOVZBL	RADIX[R1],R2		; SET ACTUAL RADIX OF CONVERSION
	CLRQ	R0			; START WITH RESULT AND WORK VALUE OF 0
40$:	SUBB3	#^A/0/,(R3),R1		; GET NEXT NUMBER MINUS ASCII BIAS
	BLSS	70$			; BR IF NOT A NUMERIC CHARACTER
	CMPB	R1,#9			; WAS IT A NUMERIC DIGIT?
	BLEQ	60$			; BR IF YES
	CMPB	R1,#<^A/A/-^A/0/>	; HEX RADIX CHARACTER?
	BLSS	70$			; BR IF NO - TERMINATE THE CONVERT
	SUBB	#<<^A/A/-^A/0/>-10>,R1	; CONVERT TO BINARY VALUE
60$:	CMPB	R1,R2			; WITH IN THE RADIX?
	BGEQ	70$			; BR IF OUT OF THE RANGE
	EMUL	R2,R0,R1,R0		; FIND CURRENT TOTAL
	INCL	R3			; POINT AT NEXT CHARACTER
	CMPL	R3,4(SP)		; TIME TO QUIT?
	BNEQ	40$			; BR IF NO
70$:	MOVL	R0,R1			; SET RESULT
	BLBC	(SP)+,80$		; TEST NEGATE FLAG
	MNEGL	R1,R1			; NEGATE THE SOURCE
80$:	SUBL3	R3,(SP)+,R0		; SET NUMBER OF UN-PROCESSED BYTES
	RSB				; BACK TO THE CALLER

 
	.DSABL	LSB
	.SBTTL	GET QUALIFIER DESCRIPTOR BLOCK
;++
; FUNCTIONAL DESCRIPTION:
;
;	THIS ROUTINE IS CALLED TO LOCATE THE COMMAND QUALIFIER
;	DESCRIPTOR BLOCK FOR A SPECIFIC QUALIFIER.
;	ALTERNATE ENTRY TO CHECK THAT QUALIFIER IS A PARAMETE
;	QUALIFIER AS OPPOSED TO AN OUTPUT SPECIFIER.
;
; CALLING SEQUENCE:
;
;	BSB/JSB	DCL$GETQUALDESC		; GET QUALIFIER DESCRIPTOR
;	BSB/JSB	DCL$GETPARMQUAL		; GET PARAMETER QUALIFIER DESCRIPTOR
;
; INPUT PARAMETERS:
;
;	R1 IS THE CODE TO IDENTIFY THE QUALIFIER
;
; IMPLICIT INPUTS:
;
;	R8 = ADDRESS OF UTILITY BIT ARRAY
;	R9 = ADDRESS OF REQUEST DESCRIPTOR
;	R10 = ADDRESS OF WORK BLOCK
;	R11 = ADDRESS OF PASS 1 PARSE WORK AREA
;
; OUTPUT PARAMETERS:
;
;	R2 IS THE ADDRESS OF THE QUALIFIER DESCRIPTOR BLOCK
;
; COMPLETION CODES:
;
;	R0 = SUCCESS/FAIL DEPENDING OF WHETHER THE DESCRIPTOR WAS FOUND
;
; SIDE EFFECTS:
;
;	TOP LEVEL RETURN (RET) TAKEN IF SEARCH FAILS
;
;--

	.ENABL	LSB

DCL$GETPARMQUAL::			; GET A PARAMETER QUALIFIER DESCRIPTOR
	BSBB	DCL$GETQUALDESC		; LOCATE THE DESCRIPTOR BLOCK
;***	BBS	#ENT_V_OUTPUT,-		; BR IF THIS QUALIFIER IS NOT
;***		ENT_L_FLAGS(R2),90$	; REALLY AN OUTPUT DESCPRIPTOR
	RSB				; RETURN TO CALLER
 
DCL$GETQUALDESC::			; FIND A QUALIFIER DESCRIPTOR
	MOVL	R1,R0			; COPY QUALIFIER NUMBER
	BEQL	90$			; ZERO IS INVALID QUALIFIER NUMBER
	MOVL	WRK_L_QUABLK(R11),R2	; POINT AT START OF QUALIFIER BLOCKS
	BEQL	90$			; BR IF NONE
	BRB	20$			; START OF SEARCH
10$:	MOVZBL	ENT_B_NEXT(R2),-(SP)	; GET OFFSET TO NEXT
	BEQL	90$			; BR IF THIS IS LAST
	ADDL	(SP)+,R2		; FIND ADDRESS OF NEXT
20$:	SOBGTR	R0,10$			; COUNT DOWN QUALIFIER NUMBER
	INCL	R0			; INDICATE DESCRIPTOR FOUND
	RSB				; BACK TO THE CALLER
 
90$:	SETSTAT	INVQUALNUM		; SET ERROR-INVALID QUALIFER NUMBER
	RET				; GO BACK TO DISPATCHER
 
	.DSABL	LSB

	.SBTTL	FIND COMMAND QUALIFIER
;++
; FUNCTIONAL DESCRIPTION:
;
;	THIS COROUTINE IS CALLED TO SEARCH FOR A 
;	COMMAND QUALIFIER IN THE RANGE OF THE CURRENT COMMAND.
;	THE SEARCH IS DONE OUT TO THE FIRST PARAMETER APPEARING
;	IN THE COMMAND, THEN FROM THE START OF THE FIRST PARAMETER
;	IN THE RANGE OF THE CURRENT COMMAND TO THE END OF THE
;	RANGE OF THE CURRENT COMMAND.
;
; CALLING SEQUENCE:
;
;	BSB/JSB	DCL$LOCCMDQUAL
;
; INPUT PARAMETERS:
;
;	R1 IS THE CODE OF THE QUALIFIER TO LOCATE
;
; IMPLICIT INPUTS:
;
;	R8 = ADDRESS OF UTILITY BIT ARRAY
;	R9 = ADDRESS OF REQUEST DESCRIPTOR
;	R10 = ADDRESS OF WORK BLOCK
;	R11 = ADDRESS OF PASS 1 PARSE WORK AREA
;
; OUTPUT PARAMETERS:
;
;	R4 IS RETURNED AS THE ADDRESS OF THE DESCRIPTOR IF FOUND
;	R5 IS THE INDEX TO THE DESCRIPTOR IF FOUND
;
; COMPLETION CODES:
;
;	R0 IS SET TRUE OR FALSE DEPENDING OF SUCCESS OF SEARCH
;
; SIDE EFFECTS:
;
;	REGISTERS R4, R5 & R6 ARE USED BY THIS ROUTINE
;	AND MUST BE PRESERVED ACCROSS COROUTINE RETURNS.
;
;--

DCL$FNDCMDQUAL::			; LOCATE THE COMMAND QUALIFIER
	MOVL	#1,R5			; SET INDEX TO START SEARCH
	MOVAL	RPW_G_PRMLIM(R10),R6	; START OF PARAMETER LIMIT DESCRIPTORS
10$:	CLRL	R0			; ASSUME NO MORE QUALIFIERS
	CMPB	R5,RPW_B_STRPARM(R10)	; THIS DESCRIPTOR IN RANGE OF VERB
	BLSSU	40$			; BR IF YES
	BNEQ	30$			; BR IF WITHIN A PARAMETER
20$:	MOVZBL	PLM_B_FSTDESC(R6),R5	; SET INDEX OF PLACE TO START LOOKING
	BEQL	70$			; BR WHEN DONE
30$:	CMPB	R5,PLM_B_LSTDESC(R6)	; IS THIS WITHIN THE CURRENT PARAMETER?
	BGTRU	60$			; BR IF OUT OF RANGE OF THIS PARAMETER
40$:	BSBB	DCL$SETDESCADR		; SET ADDRESS OF RESULT DESCRIPTOR
	CMPZV	#PTR_V_TYPE,#PTR_S_TYPE,- ; VIELD LIMITS FOR TYPE
		PTR_L_DESCR(R4),#PTR_K_COMDQUAL ; IF THIS A COMMAND QUALIFIER?
	BNEQ	50$			; BR IF NO-CONTINUE SEARCH
	INCL	R0			; SET SUCCESS
	JSB	@(SP)+			; RETURN WITH QUALIFIER
50$:	INCL	R5			; ADVANCE INDEX TO NEXT DESCRIPTOR
	BRB	10$			; CHECK AGAIN
60$:	ADDL	#PLM_K_SIZE,R6		; SET TO NEXT PARAMETER LIMIT DESCRIPTOR
	BRB	20$			; TRY NEXT PARAMETER
70$:	RSB				; RETURN WITH VALUE OR ZERO

	.SBTTL	EXTRACT RESULT DESCRIPTOR FIELDS
;++
; FUNCTIONAL DESCRIPTION:
;
;	THIS ROUTINE IS CALLED TO TAKE A RESULT DESCRIPTOR APART
;	AND RETURN ITS COMPONTENT PART AS INDIVIDUAL VALUES.
;
; CALLING SEQUENCE:
;
;	BSB/JSB	DCL$EXTNXTDESC		; EXTRACT NEXT DESCRIPTOR
;	BSB/JSB	DCL$GETEXTDESC		; GET AND EXTRACT DESCRIPTOR
;	BSB/JSB	DCL$EXTRSLDESC		; EXTRACT RESULT DESCRIPTOR
;
; INPUT PARAMETERS:
;
;	AT EXTRSLDESC WITH R4 CONTAINS THE ADDRESS OF THE DESCRIPTOR 
;	AT EXTNXTDESC WITH R6 CONTAINS THE ADDRESS OF THE PARAMETER 
;	    LIMIT DESCRIPTOR.
;
; IMPLICIT INPUTS:
;
;	R8 = ADDRESS OF UTILITY BIT ARRAY
;	R9 = ADDRESS OF REQUEST DESCRIPTOR
;	R10 = ADDRESS OF WORK BLOCK
;	R11 = ADDRESS OF PASS 1 PARSE WORK AREA
;
; OUTPUT PARAMETERS:
;
;	R1 = TYPE
;	R2 = SIZE OR VALUE DEPENDING ON THE DESCRIPTOR
;	R3 = ADDRESS OF THE ITEM
;	R4 = ADDRESS OF DESCRIPTOR
;
; COMPLETION CODES:
;
;	R0 = SUCCESS/FAILURE DEPENDING ON RESULT OF SEARCH
;
;--
	.ENABL	LSB

DCL$EXTNXTDESC::			; EXTRACT NEXT COMPLETE DESCRIPTOR
	SETSTAT	FAIL			; ASSUME WONT FIND ONE
	MOVZBL	PLM_B_NXTDESC(R6),R5	; SET POINTER TO DESCRIPTOR
	BEQL	40$			; BR IF PARAMETER SET IS MISSING
	CMPB	R5,PLM_B_LSTDESC(R6)	; IS THIS IN RANGE OF CURRENT PARAMETER?
	BGTRU	40$			; BR IF NO
	INCB	PLM_B_NXTDESC(R6)	; ADVANCE INDEX TO NEXT
	INCL	R0			; SET ANY SUCCESSFUL STATUS
DCL$GETEXTDESC::			; GET AND EXTRACT NEXT DESCTRIPTOR
	BSBB	DCL$SETDESCADR		; SET ADDRESS OF RESULT DESCRIPTOR
DCL$EXTRSLDESC::			; EXTRACT FOR RESULT DESCRIPTION
	EXTZV	#PTR_V_OFFSET,#PTR_S_OFFSET,- ; START BIT AND SIZE OF OFFSET
		PTR_L_DESCR(R4),R3	; GET OFFSET INTO R3
	MOVAB	WRK_G_BUFFER(R11)[R3],R3 ; FIND ADDRESS OF ITEM IN BUFFER
	EXTZV	#PTR_V_VALUE,#PTR_S_VALUE,- ; START BIT AND SIZE OF VALUE
		PTR_L_DESCR(R4),R2	; GET VALUE INTO R2
	EXTZV	#PTR_V_TYPE,#PTR_S_TYPE,- ; START BIT AND SIZE OF TYPE
		PTR_L_DESCR(R4),R1	; GET TYPE INTO R1
40$:	RSB				; 
 
	.DSABL	LSB

	.SBTTL	SET RESULT DESCRIPTOR ADDRESS
;++
; FUNCTIONAL DESCRIPTION:
;
;	THIS ROUTINE IS CALLED TO SET THE ADDRESS OF A RESULT
;	DESCRIPTOR INTO R4.
;
; CALLING SEQUENCE:
;
;	BSB/JSB	DCL$SETDESCADR
;
; INPUT PARAMETERS:
;
;	R5 CONTAINS THE INDEX FOR THE DESIRED DESCRIPTOR
;
; IMPLICIT INPUTS:
;
;	R10 = ADDRESS OF WORK BLOCK
;	R11 = ADDRESS OF PASS 1 PARSE WORK AREA
;
; OUTPUT PARAMETERS:
;
;	R4 IS LOADED WITH THE ADDRESS OF THE DESCRIPTOR
;
;--

DCL$SETDESCADR::
	MOVAL	WRK_G_RESULT-4(R11)[R5],R4 ; GET ADDRESS OF DESCRIPTOR
	RSB

	.SBTTL	GET PARAMETER
;++
; FUNCTIONAL DESCRIPTION:
;
;	THIS ROUTINE IS CALLED TO SEARCH THE RESULT DESCRIPTOR
;	BUFFER FOR THE NEXT OCCURANCE OF A PRARMETER
;
; CALLING SEQUENCE:
;
;	BSB/JSB	DCL$GETPARM		; GET A PARAMETER
;
; INPUT PARAMETERS:
;
;	R5 CONTAINS THE INDEX OF NEXT DESCRIPTOR TO CHECK
;
; IMPLICIT INPUTS:
;
;	R8 = ADDRESS OF UTILITY BIT ARRAY
;	R9 = ADDRESS OF REQUEST DESCRIPTOR
;	R10 = ADDRESS OF WORK BLOCK
;	R11 = ADDRESS OF PASS 1 PARSE WORK AREA
;
; OUTPUT PARAMETERS:
;
;	R1 CONTAINS THE TYPE OF THE DESCRIPTOR(IE:PTR_K_PARAMETR)
;	R2 CONTAINS THE SIZE OF THE PARAMETER
;	R3 CONTAINS THE PRECEEDING TERMINATOR
;	R4 CONTAINS THE ADDRESS OF THE PARAMETER DESCRIPTOR
;	R5 IS THE INDEX TO THE DESCRIPTOR
;
; COMPLETION CODES:
;
;	R0 = SUCCESS/FAIL DEPENDING ON THE RESULT OF THE SEARCH
;
;--

DCL$GETPARM::				; GET THE NEXT PARAMETER
	SETSTAT	FAIL			; ASSUME NO MORE PARAMETERS
10$:	INCL	R5			; ADVANCE INDEX
	BSBB	DCL$GETEXTDESC		; GET DESCRIPTOR AND EXTRACT FIELDS
	EXTZV	#PTR_V_TERM,#PTR_S_TERM,- ; GET THE TERMINATOR FORM THE PRVIOUS
		-4(R4),R3		; DESCRIPTOR AND SAVE IN R3
	CMPB	R1,#PTR_K_ENDLINE	; IS THIS THE END OF LINE?
	BEQL	30$			; NO MORE PARAMETERS
	CMPB	R1,#PTR_K_PARAMETR	; IS THE CURRENT A PARAMETER?
	BNEQ	10$			; BR IF NO-TRY NEXT
	SETSTAT	SUCCESS			; SET FOUND ONE
30$:	RSB				; RETURN TO CALLER

	.SBTTL	RESULT PARSE INIT
;++
; FUNCTIONAL DESCRIPTION:
;
;	THIS ROUTINE IS CALLED TO ESTABLISH INITIAL CONDITIONS
;	IN THE RESULT PARSE WORK AREA PRIOR TO PERFORMAING
;	A RESULT PARSE.
;
; CALLING SEQUENCE:
;
;	ENTERED VIA A CASE FOLLOWED BY A CALL
;
; IMPLICIT INPUTS:
;
;	R9 = ADDRESS OF REQUEST DESCRIPTOR
;	R10 = ADDRESS OF WORK BLOCK
;	R11 = ADDRESS OF PASS 1 PARSE WORK AREA
;
; OUTPUT PARAMETERS:
;
;	THE RESULT PARSE WORK AREA IS INITED
;
; COMPLETION CODES:
;
;	R0 = SUCCESS
;
;--

DCL$RPINIT::				; RESULT APRSE INIT
	BSBB	DCL$GETDCLWRK		; GET POINTER TO DCL PHASE 1 WORK AREA
	MOVC5	#0,(R10),#0,-		; SOURCE BUFFER SIZE AND FILL OF 0 TO
		#CLI$C_WORKAREA-4,4(R10) ; ZERO OUT THE WORK AREA
	MOVL	R11,RPW_L_DCLWRK(R10)	; SAVE WORK AREA ADDRESS FOR LATER
	MOVL	WRK_L_PROPTR(R11),R7	; GET ADDRESS OF COMMAND PROMPT TABLE
	MOVAL	RPW_G_PRMLIM(R10),R6	; GET ADDRESS OF FIRST PARAM LIMIT TABLE
	CLRL	R5			; INIT INDEX TO MINUS FIRST DESCRIPTOR
	BSBB	DCL$GETPARM		; RETREIVE THE NEXT(FIRST)PARAMETER
	MOVB	R5,RPW_B_STRPARM(R10)	; SAVE THE INDEX TO THE FIRST PARAMETER
	BLBC	R0,90$			; BR IF NO PARAMETERS IN COMMAND
10$:	MOVB	R5,PLM_B_FSTDESC(R6)	; SET FIRST PARAMETER IN THIS LIST
	MOVB	R5,PLM_B_NXTDESC(R6)	; ALSO THE NEXT TO PROCESS
20$:	BSBB	DCL$GETPARM		; LOCATE THE NEXT PARAMETER IN THE COMD
	SUBB3	#1,R5,PLM_B_LSTDESC(R6)	; SET INDEX OF THE LAST PARAMETER SEEN
	BLBC	R0,90$			; BR IF NO MORE
	CMPB	R3,#PTR_K_BLANK		; IS THIS THE START OF A PARMETER LIST?
	BEQL	50$			; BR IF YES
	BBS	#ENT_V_IMPCAT,-		; IF COMMAND HAS IMPLIED CONCATONATION
		ENT_L_FLAGS(R7),20$	; THEN KEEP LOOKING TILL END OF PARAMETER
	CMPB	R3,#PTR_K_COMMA		; ELSE LOOK FOR PARAMETER LIST SEPARATOR
	BNEQ	20$			; IF NO A SEPARATOR, CONTINUE SCAN
40$:	CMPB	R3,#PTR_K_BLANK		; SCAN FOR LAST PARAMETER IN THE LIST
	BEQL	50$			; BR IF FOUND LAST PARAMETER
	BSBB	DCL$GETPARM		; SEARCH FOR NEXT PARAMETER
	BLBC	R0,90$			; BR IF RAN OUT OF PARAMETERS
	BRB	40$			; CHECK FOR BLANKS
50$:	MOVZBL	ENT_B_NEXT(R7),R0	; GET OFFSET TO NEXT DESCRIPTOR
	ADDL	R0,R7			; SKIP TO NEXT DESCRIPTOR
	MOVB	R5,PLM_B_TRMDESC(R6)	; SAVE DESCRIPTOR OF PARAMETER TERMINATOR
	TSTL	(R6)+			; POINT AT NEXT PARAMETER LIMIT DESCRIPTOR
	BRB	10$			; SCAN NEXT PARAMETER
90$:	SETSTAT	SUCCESS			; SET ALL IS GOOD
	MOVB	R5,PLM_B_TRMDESC(R6)	; SAVE FINAL TERMINATOR
	RET				; RETURN TO DISPATCHER
;
; SET WORK ADDRESS
;
DCL$GETDCLWRK::				; 
	BSBW	CLI$GET_PRC		; GET ADDRESS OF CLI PROCESS WORK AREA
	MOVL	PRC_L_SAVFP(R11),R11	; GET ADDRESS OF COMMAND WORK AREA
	RSB				; RETURN TO CALLER
	.END

