%TITLE 'NML Service file I/O modules'
MODULE NML$SRVFIO (
		LANGUAGE (BLISS32),
		ADDRESSING_MODE (NONEXTERNAL=LONG_RELATIVE,
				EXTERNAL = GENERAL),
		IDENT = 'V03-000'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  DECnet-VAX V2.0 Network Management Listener
!
! ABSTRACT:
!
!	This module contains general purpose file access routines
!	necessary for manipulating the Load and Dump files for NML.
!
! ENVIRONMENT:  VAX/VMS Operating System
!
! AUTHOR:  Distributed Systems Software Engineering
!
! CREATION DATE:  16-JUN-1980
!
! MODIFIED BY:
!
!	V03_004	MKP0003		Kathy Perko		12-Jan-1982
!		Fix NML$SRVREAD so that, if it gets an EOF but there is
!		read data in the buffer, to return the read data.
!
!	V03-003	MKP0002		Kathy Perko		16-Dec-1981
!		Enhance NML$SRVREAD to always put as many records as will
!		fit into the read buffer.  Add $RAB STV to error messages.
!
!	V03-002	MKP0001		Kathy Perko		3-Nov-1981
!		Set up signalling information for file create and
!		open errors, and for record connect errors.
!
!	V03-001	LMK0001		Len Kawell		19-Sep-1981
!		Add NML$SRVREWIND.
!--


%SBTTL 'Declarations'

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    NML$SRVCLOSE,
    NML$SRVOPEN,
    NML$SRVREAD,
    NML$SRVWRITE,
    NML$SRVREWIND;

!
! INCLUDE FILES:
!

LIBRARY 'LIB$:NMLLIB.L32';
LIBRARY 'SHRLIB$:NMALIBRY.L32';
LIBRARY 'SYS$LIBRARY:STARLET.L32';

!
! MACROS:
!

!
! EQUATED SYMBOLS:
!

!
! OWN STORAGE:
!

OWN
    NML$T_FAB : $FAB_DECL,	! Image file FAB
    NML$T_RAB : $RAB_DECL;	! Image file RAB
	
!
! EXTERNAL REFERENCES:
!

$NML_EXTDEF;

EXTERNAL ROUTINE
    NML$DEBUG_TXT,
    NML$BLD_REPLY;


%SBTTL	'NML$SRVCLOSE	Close currently opened file'
GLOBAL ROUTINE NML$SRVCLOSE =
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine closes the currently opened file.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODE:
!
!	Signals errors.
!
! SIDE EFFECTS:
!
!--
    BEGIN

    LOCAL
	STATUS;			 ! Temporary return status
!
! Close the file.
!
    STATUS = $CLOSE (FAB = NML$T_FAB);
!
! If the operation was successful then log it.
!
    IF .STATUS
    THEN
	NML$DEBUG_TXT
	    (
	    DBG$C_SRVTRC,
	    $ASCID ('Image file closed.')
	    );

    RETURN .STATUS

    END;				! End of NML$SRVCLOSE


%SBTTL 'NML$SRVOPEN	Open requested file'
GLOBAL ROUTINE NML$SRVOPEN (NODEDSC, FILNAMDSC, ACCESS) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine concatenates the node name to the filename and
!	opens the specified file (if read access) or creates the file
!	(if read/write access).
!
!	This routine attempts to translate the filename before it con-
!	catenates the node name.
!
! FORMAL PARAMETERS:
!
!	NODEDSC		Descriptor of the node where the file is.
!	FILNAMDSC	Descriptor of the filename to be opened.
!	ACCESS 		File access code (read or read/write).
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Returns the status of the operation.
!
!--

    BEGIN

    MAP
	NODEDSC   : REF DESCRIPTOR,
	FILNAMDSC : REF DESCRIPTOR,	
	ACCESS    : BYTE;

    OWN
	NML_T_FILENAMBUF    : VECTOR [64, BYTE],! Equivalance name string buff.
	NML_Q_FILENAMDSC    : DESCRIPTOR	! Equivalance buf descriptor
			      INITIAL (64, NML_T_FILENAMBUF),
	NML_T_COMFILENAMBUF : VECTOR [64, BYTE], ! Completed file name string
	NML_Q_COMFILENAMDSC : DESCRIPTOR	! Descriptor for buffer
			      INITIAL (64, NML_T_COMFILENAMBUF);

    LOCAL
	NML_L_PTR,			! Character string pointer
	NML_W_RSLLEN : WORD,		! Resultant length of translation
	STV,				! To save Status Value field.
	NML_L_STATUS;

!
! Translate filename in case it is a logical name.
!
    NML_L_STATUS =
	$TRNLOG
	    (
	    LOGNAM = FILNAMDSC [DSC$W_LENGTH], ! string to translate
	    RSLLEN = NML_W_RSLLEN,	! Length of translated string
	    RSLBUF = NML_Q_FILENAMDSC	! Equivalence string desc
	    );
    IF NOT .NML_L_STATUS THEN RETURN .NML_L_STATUS;
!
! If the nodename string length is zero do not add the nodename to the file
! string otherwise...
!
! Concatenate the node name string, a double colon and the filename string
!
    NML_L_PTR = .NML_Q_COMFILENAMDSC [DSC$A_POINTER]; ! Set up pointer
 
    IF .NODEDSC [DSC$W_LENGTH] GTR 0
    THEN
	BEGIN
	NML_L_PTR = CH$MOVE (.NODEDSC [DSC$W_LENGTH],
			     .NODEDSC [DSC$A_POINTER],
			     .NML_L_PTR);	! Move node name string
	NML_L_PTR = CH$MOVE (2,
			     UPLIT BYTE ('::'),
			     .NML_L_PTR);	! Move double colon
	END;
!
! Always move over the filename string.
!
    NML_L_PTR = CH$MOVE (.NML_W_RSLLEN<0,16>,
			 NML_T_FILENAMBUF,
			 .NML_L_PTR);		! File name

    NML_Q_COMFILENAMDSC [DSC$W_LENGTH] =
		.NML_L_PTR - NML_T_COMFILENAMBUF; ! Set up length
!
! Fill in FAB and CREATE/OPEN the file depending on desired access
!
    IF .ACCESS EQLU NMA$C_OPN_AC_RW		! Read/write=create file
    THEN
 	BEGIN
	$FAB_INIT
	    (
	    FAB = NML$T_FAB,		! Pointer to FAB
	    DNM = 'SYS$SYSTEM:.SYS',	! Default file name string
	    FNA = .NML_Q_COMFILENAMDSC [DSC$A_POINTER],! Ptr to filname string
	    FNS = .NML_Q_COMFILENAMDSC [DSC$W_LENGTH],! Length of filnam string
	    FAC = PUT,			! Write access record I/O
	    FOP = (CBT,MXV,SQO,SUP,TEF),! File open options
	    MRS = 512,			! Maximum record size
	    ORG = SEQ,			! Sequential file (create)
	    RFM = FIX			! Fixed length records
	    );

	NML_L_STATUS = $CREATE (FAB = NML$T_FAB); ! Create the file
	STV = .NML$T_FAB [FAB$L_STV];
	END
    ELSE				! Assume RO (open not create)
	BEGIN
	$FAB_INIT
	    (
	    FAB = NML$T_FAB,		! FAB address
	    DNM = 'SYS$SYSTEM:.SYS',	! Default file name string
	    FNA = .NML_Q_COMFILENAMDSC [DSC$A_POINTER],! Ptr to filname string
	    FNS = .NML_Q_COMFILENAMDSC [DSC$W_LENGTH],! Length of filnam string
	    FAC = GET,			! Read access, record I/O
	    FOP = SQO			! Sequential processing only
	    );

	NML_L_STATUS = $OPEN (FAB = NML$T_FAB);
	STV = .NML$T_FAB [FAB$L_STV];
	END;

    IF .NML_L_STATUS
    THEN
	BEGIN
!
! Build the RAB.
!
	$RAB_INIT
	    (
	    RAB = NML$T_RAB,		! Associated RAB
	    FAB = NML$T_FAB		! Associated FAB
	    );

	NML_L_STATUS = $CONNECT (RAB = NML$T_RAB);
	STV = .NML$T_RAB [RAB$L_STV];
	END;
!
! If the operation was successful then log it.
!
    IF .NML_L_STATUS
    THEN
	NML$DEBUG_TXT (DBG$C_SRVTRC,
	    		$ASCID ('Image file opened.'))
    ELSE
!
! If the create, open, or connect failed, set up the message block to
! log an error.
!
	BEGIN
	NML$AB_MSGBLOCK [MSB$L_FLAGS] = MSB$M_DET_FLD OR
					MSB$M_MSG_FLD OR
					MSB$M_SYSM_FLD OR
					MSB$M_MSG2_FLD;
	NML$AB_MSGBLOCK [MSB$B_CODE] = NMA$C_STS_FOP;
	NML$AB_MSGBLOCK [MSB$L_TEXT] = .NML_L_STATUS;
	NML$AB_MSGBLOCK [MSB$L_TEXT2] = .STV;
	END;

    RETURN .NML_L_STATUS;

    END;					! End of NML$SRVOPEN

%SBTTL 'NML$SRVREAD Read a record from the opened file'
GLOBAL ROUTINE NML$SRVREAD (BUFFERDSC, BYTES_IN_BUF, LOAD_FILE) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine is called while doing down line load to get the
!	contents of the load file (from disk or another node) to send
!	to the node being loaded.  It reads records from the currently
!	opened load file into the specified buffer and return in the
!	BYTES_IN_BUF parameter the number of bytes actually read.
!
! FORMAL PARAMETERS:
!
!	BUFFERDSC	Descriptor of the receive buffer.
!	BYTES_IN_BUF	Word to receive the actual number of bytes read.
!	LOAD_FILE	Identification of which load file is being loaded
!			(secondary, tertiary, or operating system).  Used
!			for signalling errors.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Returns the status of the operation.
!
! SIDE EFFECTS:
!
!	Fills in the formal parameter BYTES_IN_BUF with the size of data 
!	actually received.
!
!--

BEGIN

MAP
    BUFFERDSC : REF DESCRIPTOR;

LOCAL
    NML_L_STATUS,
    BUF_PTR,		! Pointer into read buffer to place to put next record.
    BUF_LEFT,		! Bytes left in read buffer.
    BYTES_IN_REC,	! Size of last record read into buffer.
    MSGSIZE;		! For signalled error message.


!
! Read in as many complete records as will fit into the buffer.  The
! file has fixed length records.
!
! Set up RAB fields for the beginning of the read buffer, the read
! buffer size, and the size of the record just read (zero to begin
! with).
!
BUF_PTR = .BUFFERDSC [DSC$A_POINTER];	! Read buffer address
BUF_LEFT = .BUFFERDSC [DSC$W_LENGTH];	! Read buffer size
BYTES_IN_REC = 0;
!
! If there is room in the buffer for another complete record, then
! read it in.
!
WHILE .BUF_LEFT GEQ .BYTES_IN_REC DO
    BEGIN
    NML$T_RAB [RAB$L_UBF] = .BUF_PTR;	! Read buffer address
    NML$T_RAB [RAB$W_USZ] = .BUF_LEFT;	! Read buffer size
    NML_L_STATUS = $GET (RAB = NML$T_RAB);
    IF .NML_L_STATUS
    THEN
	BEGIN
	BYTES_IN_REC = .NML$T_RAB [RAB$W_RSZ];
	BUF_LEFT = .BUF_LEFT - .BYTES_IN_REC;
	BUF_PTR = .BUF_PTR + .BYTES_IN_REC;
	END
    ELSE
	!
	! If there was an error check to see if it was EOF.  If it was,
	! and there is data in the read buffer, return the data to the
	! caller.  Otherwise, signal an error and quit the load.
	!
	BEGIN
	IF (.NML_L_STATUS EQL RMS$_EOF) AND
	   (.BUF_PTR GTR .BUFFERDSC [DSC$A_POINTER]) THEN
	    BEGIN
	    NML_L_STATUS = NML$_STS_SUC;
	    EXITLOOP;
	    END
	ELSE
	    BEGIN
	    NML$AB_MSGBLOCK [MSB$L_FLAGS]  = MSB$M_DET_FLD OR
					 MSB$M_MSG_FLD OR
					 MSB$M_SYSM_FLD;
	    NML$AB_MSGBLOCK [MSB$B_CODE]   = NMA$C_STS_FIO;
	    NML$AB_MSGBLOCK [MSB$W_DETAIL] = .LOAD_FILE;
	    NML$AB_MSGBLOCK [MSB$L_TEXT]   = .NML_L_STATUS;
	    NML$AB_MSGBLOCK [MSB$L_TEXT2] = .NML$T_RAB [RAB$L_STV];
	    NML$BLD_REPLY (NML$AB_MSGBLOCK, MSGSIZE);
	    $SIGNAL_MSG (NML$AB_SNDBUFFER, .MSGSIZE);
	    END;
	END;
    END;
!
! Set up actual number of bytes read into read buffer.
!
(.BYTES_IN_BUF)<0,16> = .BUF_PTR - .BUFFERDSC [DSC$A_POINTER];
RETURN .NML_L_STATUS
END;				! End of NML$SRVREAD

%SBTTL 'NML$SRVWRITE  Write record in currently opened file'
GLOBAL ROUTINE NML$SRVWRITE (BUFADR, BUFLEN) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine writes out the buffer specified to the currently
!	opened file.
!
! FORMAL PARAMETERS:
!
!	BUFADR		The address of buffer to be written
!	BUFLEN		The length of buffer to be written
!
! SIDE EFFECTS:
!
!	Returns the status of the operation.
!
!--

BEGIN

MAP
    BUFLEN : WORD;

LOCAL
    STATUS,
    MSGSIZE;
!
! Fill in the user buffer address and size
!
NML$T_RAB [RAB$L_RBF] = .BUFADR;
NML$T_RAB [RAB$W_RSZ] = .BUFLEN;
!
! Write the record and return the status.
!
STATUS = $PUT (RAB = NML$T_RAB);
IF NOT .STATUS THEN
    !
    ! If there was an error, then signal it and quit the load.
    !
    BEGIN
    NML$AB_MSGBLOCK [MSB$L_FLAGS]  = MSB$M_DET_FLD OR
					 MSB$M_MSG_FLD OR
					 MSB$M_SYSM_FLD;
    NML$AB_MSGBLOCK [MSB$B_CODE]   = NMA$C_STS_FIO;
    NML$AB_MSGBLOCK [MSB$L_TEXT]   = .STATUS;
    NML$AB_MSGBLOCK [MSB$L_TEXT2] = .NML$T_RAB [RAB$L_STV];
    NML$BLD_REPLY (NML$AB_MSGBLOCK, MSGSIZE);
    $SIGNAL_MSG (NML$AB_SNDBUFFER, .MSGSIZE);
    END;
RETURN .STATUS;    
END;					! End of NML$SRVWRITE

%SBTTL 'NML$SRVREWIND  Rewind currently open file'
GLOBAL ROUTINE NML$SRVREWIND =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine rewinds the currently open file.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Returns the status of the operation.
!
!--

    BEGIN

!
! Rewind the file
!
    RETURN $REWIND (RAB = NML$T_RAB)
    
    END;					! End of NML$SRVREWIND

END						! End of module

ELUDOM
