%TITLE 'NML special service routines'
MODULE NML$SEROPS (
		LANGUAGE (BLISS32),
		ADDRESSING_MODE (NONEXTERNAL=LONG_RELATIVE),
		ADDRESSING_MODE (EXTERNAL=LONG_RELATIVE),
		IDENT = 'V03-000'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  DECnet-VAX V2.0 Network Management Listener
!
! ABSTRACT:
!
!	This module contains utility routines used for service operations.
!
! ENVIRONMENT:  VAX/VMS Operating System
!
! AUTHOR:  Distributed Systems Software Engineering
!
! CREATION DATE:  21-JUL-1980
!
! MODIFIED BY:
!
!	V03-005	MKP0005		Kathy Perko		14-Jan-1982
!		Fix the parameters used for getting the line service
!		timer to get the size of the data returned by NETACP in
!		the P4 buffer.  Use it to reduce the size of the buffer
!		dumped by the debug logging (it's annoying to see all
!		that come out).
!
!	V03-004	MKP0004		Kathy Perko		7-Dec-1981
!		For multidrop devices, the line name and the circuit
!		name are not the same.  The line name does not include
!		the tributary.  So, when getting the service timer from
!		the volatile line database, use the circuit name, without
!		the tributary number.
!
!	V03-003 MKP0003		Kathy Perko		2-Nov-1981
!		Fix action routine for parsing MOP Mode Running message
!		so that the memory size is correctly extracted from
!		the MOP message.
!
!	V03-002 MKP0002		Kathy Perko		3-Oct-1981
!		Fix bug from conversion to new NETACP QIO interface.
!
!	V03-001	MKP0001		Kathy Perko		27-July-1981
!		Fix NML$PRSSRVID to parse circuit id.
!--


%SBTTL 'Declarations'

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    NML$BLDMOPMMR	: NOVALUE,
    NML$BLDMOPEMM	: NOVALUE,
    NML$GETSRVDATA	: NOVALUE,
    NML$ADDSRVFLDS	: NOVALUE,
    NML$GETSRVHOST	: NOVALUE,
    NML$GETSRVTIMER	: NOVALUE,
    NML$PRSSRVID,
    NML$PRSMOPPRMS,
    NML$PRSMOPERR,
    NML$MOVBYTE,
    NML$MOVWORD,
    NML$MOVLONG,
    NML$MOVSTRING;

!
! INCLUDE FILES:
!

LIBRARY 'LIB$:NMLLIB.L32';
LIBRARY 'SHRLIB$:NMALIBRY.L32';
LIBRARY 'SHRLIB$:NET.L32';
LIBRARY 'SYS$LIBRARY:STARLET.L32';

!
! OWN STORAGE:
!

OWN
    NML$T_P2BUFFER : VECTOR [NML$K_P2BUFLEN, BYTE];	! P2 QIO buffer

BIND
    NML$Q_P2BFDSC  = UPLIT (NML$K_P2BUFLEN, NML$T_P2BUFFER) : DESCRIPTOR;

!
! EXTERNAL REFERENCES:
!

$NML_EXTDEF;				! Define common external data
$NML_SRVDEF;				! Define external service data

EXTERNAL
    NML$AB_NPA_BLK : $NPA_BLKDEF,
    NML$NPA_LOAD,
    NML$NPA_DUMP,
    NML$NPA_CIRLOOP,
    NML$NPA_TRIGGER;
 
EXTERNAL ROUTINE
    NMA$INSERTFLD,
    NMA$SEARCHFLD,
    NML$BLD_REPLY,
    NML$BLDP2,
    NML$ERROR_2,
    NML$DEBUG_MSG,
    NML$DEFPARAM,
    NML$GETINFTABS,
    NML$GETVOLNDNAM,
    NML$NETQIO,
    NML$SHOWPARLIST;

%SBTTL 'NML$BLDMOPMMR  Build MOP mode running message'
GLOBAL ROUTINE NML$BLDMOPMMR (MSGDSC) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine builds a 'MOP mode running' message in the MOP transmit
!	buffer.
!
! FORMAL PARAMETERS:
!
!	MSGDSC
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	MSGDSC : REF DESCRIPTOR;
!
! Move the 'MOP mode running' function code into the buffer.
!
    CH$WCHAR (MOP$_FCT_MMR, NML$AB_MOPSNDBUFFER);
!
! Set up the descriptor for the return.
!
    MSGDSC [DSC$W_LENGTH] = 1;
    MSGDSC [DSC$A_POINTER] = NML$AB_MOPSNDBUFFER;

    END;				! End of NML$BLDMOPMMR

%SBTTL 'NML$BLDMOPEMM  Build enter MOP mode message'
GLOBAL ROUTINE NML$BLDMOPEMM (MSGDSC) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine builds the 'Enter MOP mode' (trigger) message in the
!	MOP transmit buffer.
!
! FORMAL PARAMETERS:
!
!	MSGDSC
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	MSGDSC : REF DESCRIPTOR;

    LOCAL
	PTR,
	SPALEN,
	SPAPTR,
	STATUS;
!
! Find the service password in the data base.  If no password is set then
! zeros will be used.  The MOP trigger password is always four bytes.
!
    SPALEN = 0;
    SPAPTR = 0;
    IF NOT NMA$SEARCHFLD (NML$GQ_SRVDATDSC, NMA$C_PCNO_SPA, SPALEN, SPAPTR)
    THEN
	SPALEN = 0;
!
! Build the 'enter MOP mode' message.
!
    PTR = NML$AB_MOPSNDBUFFER;
    CH$WCHAR_A (MOP$_FCT_EMM, PTR);
    PTR = CH$COPY (.SPALEN, .SPAPTR, 0, 4, .PTR);
!
! Set up the descriptor for the return.
!
    MSGDSC [DSC$W_LENGTH] = .PTR - NML$AB_MOPSNDBUFFER;
    MSGDSC [DSC$A_POINTER] = NML$AB_MOPSNDBUFFER;

    END;				! End of NML$BLDMOPEMM

%SBTTL 'NML$GETSRVDATA  Build the service data base'
GLOBAL ROUTINE NML$GETSRVDATA : NOVALUE =
 
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine gets the information needed for a service operation
!	from the volatile data base entry.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NML$GB_SRVIDCODE
!	NML$GQ_SRVIDDSC
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Signal errors.
!
! SIDE EFFECTS:
!
!	NONE
!--
 
    BEGIN

    LOCAL
	CODE,
	DATPTR,
	MSGSIZE,
	NFBDSC : REF DESCRIPTOR,
	P2DSC  : DESCRIPTOR,
	QBFDSC : DESCRIPTOR,
	STATUS,
	TABDES : REF DESCRIPTOR;

!
! Build the P2 buffer and get the parameter id for the specified entity.
!
    SELECTONEU .NML$GB_SRVIDCODE OF
	SET

	[NML$C_CIRCUIT]:
	    BEGIN

	    CODE = NMA$C_PCNO_SLI;
	    NML$BLDP2 (	.NML$GQ_SRVIDDSC [DSC$W_LENGTH],
			.NML$GQ_SRVIDDSC [DSC$A_POINTER],
			-1, 0,
			NML$Q_P2BFDSC, P2DSC);
	    END;

	[NML$C_NODE]:
	    BEGIN

	    CODE = NMA$C_PCNO_ADD;
	    NML$BLDP2 (	0,
			.(.NML$GQ_SRVIDDSC [DSC$A_POINTER])<0,16>,
			-1, 0,
			NML$Q_P2BFDSC, P2DSC);
	    END;

	[NML$C_NODEBYNAME]:
	    BEGIN

	    CODE = NMA$C_PCNO_NNA;
	    NML$BLDP2 (	.NML$GQ_SRVIDDSC [DSC$W_LENGTH],
			.NML$GQ_SRVIDDSC [DSC$A_POINTER],
			-1, 0,
			NML$Q_P2BFDSC, P2DSC);
	    END;

	TES;
!
! Get service information tables for this entity.
!
    NML$GETINFTABS (.NML$GB_SRVIDCODE, NML$C_SERVICE, NFBDSC, TABDES, 0);
!
! Initialize the record descriptor to contain the data base.
! Also initialize the QIO buffer.
!
    NML$GQ_SRVDATDSC [DSC$W_LENGTH] = 2;
    NML$GQ_SRVDATDSC [DSC$A_POINTER] = .NML$GQ_RECBFDSC [DSC$A_POINTER];
    QBFDSC [DSC$A_POINTER] = .NML$GQ_QIOBFDSC [DSC$A_POINTER];
!
! If there is an entry in the volatile data base then add that information
! to the record.
!
    STATUS = NML$NETQIO (.NFBDSC,
			 P2DSC,
			 QBFDSC [DSC$W_LENGTH], 
			 NML$GQ_QIOBFDSC);

    IF NOT .STATUS
    AND (.STATUS NEQ NML$_STS_CMP)
    THEN
	BEGIN

	NML$BLD_REPLY (NML$AB_MSGBLOCK, MSGSIZE);
	$SIGNAL_MSG (NML$AB_SNDBUFFER, .MSGSIZE);

	END;

    IF .STATUS
    THEN
	BEGIN

	DATPTR = .QBFDSC [DSC$A_POINTER];

	NML$SHOWPARLIST (NML$GQ_RECBFDSC,
			 NML$GQ_SRVDATDSC,
			 .TABDES,
			 QBFDSC,
			 DATPTR);
	END;
!
! Insert the volatile data base key into the buffer.
!
    NMA$INSERTFLD (NML$GQ_RECBFDSC,
		   .CODE,
		   .NML$GQ_SRVIDDSC [DSC$W_LENGTH],
		   .NML$GQ_SRVIDDSC [DSC$A_POINTER],
		   NML$GQ_SRVDATDSC);
!
! Write out the data buffer.
!
    NML$DEBUG_MSG (DBG$C_SRVTRC,
		   .NML$GQ_SRVDATDSC [DSC$A_POINTER],
		   .NML$GQ_SRVDATDSC [DSC$W_LENGTH],
		   $ASCID ('Service data'));

    END;				! End of NML$GETSRVDATA


%SBTTL 'NML$ADDSRVFLDS  Add service parameter fields to data base record'
GLOBAL ROUTINE NML$ADDSRVFLDS : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine adds parameters that were parsed from a NICE command
!	message to the information already retrieved from the volatile data
!	base.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	The record descriptor pointed to by NML$GQ_SRVDATDSC is updated
!	to include any fields added to the record.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Signals errors.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	CPT_INDEX,			! Change parameter table index
	SEM_INDEX,			! Semantic table index
	FLDSIZE,			! Field length
	FLDADR,				! Field address
	MSGSIZE,
	STATUS;

    INCR I FROM 0 TO .NML$GW_PRMDESCNT - 1 DO
	BEGIN

	FLDSIZE = .NML$AW_PRM_DES [.I, PDB$W_COUNT];
	FLDADR = .NML$AW_PRM_DES [.I, PDB$A_POINTER];

	CPT_INDEX = .NML$AW_PRM_DES [.I, PDB$W_INDEX];
	SEM_INDEX = .NML$AB_CPTABLE [.CPT_INDEX, CPT$W_PSTINDEX];
 
	STATUS = NML$DEFPARAM (	NML$AB_PRMSEM [.SEM_INDEX, 0,0,0,0],
				NML$GQ_SRVBFDSC,
				.FLDSIZE,
				.FLDADR,
				NML$GQ_SRVDATDSC);
	IF NOT .STATUS
	THEN
	    BEGIN

	    NML$BLD_REPLY (NML$AB_MSGBLOCK, MSGSIZE);
	    $SIGNAL_MSG (NML$AB_SNDBUFFER, .MSGSIZE);

	    END;
	END;
!
! Write out the data buffer.
!
    NML$DEBUG_MSG (DBG$C_SRVTRC,
		   .NML$GQ_SRVDATDSC [DSC$A_POINTER],
		   .NML$GQ_SRVDATDSC [DSC$W_LENGTH],
		   $ASCID ('Operator service data'));

    END;				! End of NML$ADDSRVFLDS

%SBTTL 'NML$GETSRVHOST  Get the name of the host node'
GLOBAL ROUTINE NML$GETSRVHOST (HOSTADR, HOSTDSC) : NOVALUE =
 
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine gets the name of the host node for the target to be
!	loaded or dumped.
!
! FORMAL PARAMETERS:
!
!	HOSTDSC		Address of descriptor of buffer to hold the host
!			node name.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Signal errors.
!
! SIDE EFFECTS:
!
!	NONE
!--
 
    BEGIN

    MAP
	HOSTDSC : REF DESCRIPTOR;

    LOCAL
	BUFDSC : DESCRIPTOR,
	FLDADR,
	FLDSIZE,
	NAMBUF : BBLOCK [6],
	NODADR : WORD,
	STATUS;

!
! Look for the host node id in the data base.
!
    FLDADR = 0;
    STATUS = NMA$SEARCHFLD (NML$GQ_SRVDATDSC,
			    NMA$C_PCNO_IHO,
			    FLDSIZE,
			    FLDADR);
!
! If the host id is not found then use the executor name.
!
    IF .STATUS
    THEN
	NODADR = .(.FLDADR)<0,16>
    ELSE
	NODADR = 0;
!
! Get the name of the host node from the volatile data base.  If the name
! is not found then report an error in the host identification parameter.
!
    BUFDSC [DSC$W_LENGTH] = 6;
    BUFDSC [DSC$A_POINTER] = NAMBUF;
    FLDADR = NAMBUF;
    IF NOT NML$GETVOLNDNAM (.NODADR, BUFDSC, FLDSIZE)
    THEN
	NML$ERROR_2 (NMA$C_STS_PVA, NMA$C_PCNO_IHO);
!
! Move the node name into the host name buffer.
!
    CH$MOVE (.FLDSIZE, .FLDADR, .HOSTDSC [DSC$A_POINTER]);
    HOSTDSC [DSC$W_LENGTH] = .FLDSIZE;
    (.HOSTADR)<0,16> = .NODADR;

    END;				! End of NML$GETSRVHOST


%SBTTL 'NML$GETSRVTIMER  Get the service timer'
GLOBAL ROUTINE NML$GETSRVTIMER (CIRDSC, SRVTIM) : NOVALUE =
 
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine gets the service timer of the circuit to be used.
!	Since service timer is a line parameter, the routine must access
!	the volatile data base of the line which corresponds to the
!	target node's service circuit.
!
! FORMAL PARAMETERS:
!
!	CIRDSC		Address of service circuit descriptor.
!	SRVTIM		Address of word to receive service timer.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Signal errors.
!
!--
 
BEGIN

MAP
    CIRDSC : REF DESCRIPTOR;

$NFBDSC (NFBDSC, SHOW, , pli, NAM, , STI);    !!! Should be circuit

LOCAL
    PERIOD_PTR,
    LINE_LENGTH,
    MSGSIZE,
    P2DSC   : DESCRIPTOR,
    P3,
    STATUS;

!
! If the service circuit for the target node is multidrop (eg. DMP-0.1),
! the corresponding line name will not include the period and tributary
! number.  If so, before using the circuit name to access the ACPs line
! database, eliminate the period and tributary number from the end of the
! circuit name to get the line name.
!
IF CH$FAIL (PERIOD_PTR = CH$FIND_CH (.CIRDSC [DSC$W_LENGTH],
				.CIRDSC [DSC$A_POINTER],
				%C'.')) THEN
    LINE_LENGTH = .CIRDSC [DSC$W_LENGTH]
ELSE
    LINE_LENGTH = .PERIOD_PTR - .CIRDSC [DSC$A_POINTER];
!
! Build the P2 parameter buffer for the QIO.
!
NML$BLDP2 (	.LINE_LENGTH,
		.CIRDSC [DSC$A_POINTER],
		-1,
		0,
		NML$Q_P2BFDSC,
		P2DSC);
!
! Get the timer value from the volatile data base.
!
STATUS = NML$NETQIO (NFBDSC, P2DSC, P3, NML$GQ_QIOBFDSC);
IF .STATUS
THEN
!
! Return the service timer value.  If the parameter is not set then
! the value will be -1.  This is a suitable value for infinity.
!
    (.SRVTIM)<0,16> = .(.NML$GQ_QIOBFDSC [DSC$A_POINTER])<0,16>
ELSE
!
! If the circuit is not in the data base then just use a value of -1.
! Signal a status message for any other error.
!
    IF .STATUS EQL NML$_STS_CMP
    THEN
	(.SRVTIM)<0,16> = -1
    ELSE
	BEGIN
	NML$BLD_REPLY (NML$AB_MSGBLOCK, MSGSIZE);
	$SIGNAL_MSG (NML$AB_SNDBUFFER, .MSGSIZE);
	END;
END;				! End of NML$GETSRVTIMER


%SBTTL 'NML$PRSSRVID  Parse the service id'
GLOBAL ROUTINE NML$PRSSRVID =
 
!++
! FUNCTIONAL DESCRIPTION:
!
!	Parse the service id code from the MOP message.
!
!--
 
BEGIN

$NPA_ARGDEF;

LOCAL
	ADR,
	ENT,
	LEN;

ENT = .NPARSE_BLOCK [NPA$L_PARAM];
!
! Select parse table according to entity code.
!
SELECTU .ENT OF
	SET

	[NML$C_NODE]:
	    BEGIN
	    LEN = 2;
	    ADR = .NPARSE_BLOCK [NPA$L_FLDPTR];
	    END;

	[NML$C_CIRCUIT, NML$C_NODEBYNAME]:
	    BEGIN
	    LEN = .(.NPARSE_BLOCK [NPA$L_FLDPTR])<0,8>;
	    ADR = .NPARSE_BLOCK [NPA$L_FLDPTR] + 1;
	    END;

	[ALWAYS]:
	    BEGIN
	    CH$MOVE (.LEN, .ADR, NML$AB_SRVIDBUFFER);
	    NML$GQ_SRVIDDSC [DSC$W_LENGTH] = .LEN;
	    END;

	TES;
!
! Save the entity code.
!
NML$GB_SRVIDCODE = .ENT;

RETURN NML$_STS_SUC

END;				! End of NML$PRSSRVID


%SBTTL 'NML$PRSMOPPRMS  Parse MOP parameters'
GLOBAL ROUTINE NML$PRSMOPPRMS =
 
!++
! FUNCTIONAL DESCRIPTION:
!
!	Parse the parameters from the MOP message.  Then add or overwrite it
!	into the node's service data (which was previously retrieved from
!	NETACP.)
!
!--
 
BEGIN

$NPA_ARGDEF;

LOCAL
    ADR,
    PRM,
    LEN;

PRM = .NPARSE_BLOCK [NPA$L_PARAM];
!
! Select parse table according to entity code.
!
SELECTONEU .PRM OF
    SET
    [NMA$C_PCNO_SID]:	! MOP Mode Running message software ID.
	BEGIN
	LEN = .(.NPARSE_BLOCK [NPA$L_FLDPTR])<0,8>;
	ADR = .NPARSE_BLOCK [NPA$L_FLDPTR] + 1;
	END;

    [NMA$C_PCNO_DCT]:	! MOP Mode Running message memory size.
	BEGIN
	LEN = 4;
	ADR = .NPARSE_BLOCK [NPA$L_FLDPTR];
	END;

!*  [NMA$C_PCNO_STY
!*  ,NMA$C_PCNO_SDV]:
    [OTHERWISE]:
	BEGIN
	LEN = 1;
	ADR = .NPARSE_BLOCK [NPA$L_FLDPTR];
	END;
    TES;
!
! Save the parameter in a buffer which contains the node's service data.  If
! the parameter is already there, the value will be overwritten with the one
! from the MOP message.  The service data buffer is formatted like the
! permanent data base records.
!
NMA$INSERTFLD (NML$GQ_RECBFDSC, .PRM, .LEN, .ADR, NML$GQ_SRVDATDSC);
RETURN NML$_STS_SUC

END;				! End of NML$PRSMOPPRMS


%SBTTL 'NML$PRSMOPERR  MOP parameter parsing error'
GLOBAL ROUTINE NML$PRSMOPERR =
 
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine sets up response message information for errors
!	encountered in parsing MOP messages.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	The NPARSE argument block (NPA$L_PARAM) contains the code for
!	the optional text message to be signalled.
!
! IMPLICIT OUTPUTS:
!
!	NML$AB_MSGBLOCK contains the response message information.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	NONE
!--
 
    BEGIN

    $NPA_ARGDEF;

!
! Set up MOP protocol error with optional text message.
!
    NML$AB_MSGBLOCK [MSB$L_FLAGS] = MSB$M_MSG_FLD;
    NML$AB_MSGBLOCK [MSB$B_CODE]  = NMA$C_STS_LPR;
    NML$AB_MSGBLOCK [MSB$L_TEXT]  = .NPARSE_BLOCK [NPA$L_PARAM];

    RETURN NML$_STS_SUC

    END;				! End of NML$PRSMOPERR


%SBTTL 'NML$MOVBYTE  Get volatile byte parameter'
GLOBAL ROUTINE NML$MOVBYTE (SEM_LIST, BUFDSC, RECDSC, DATDSC, DATPTR)=

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine gets a byte parameter from the buffer returned from
!	a SHOW QIO and adds it to a permanent data base record.
!
! FORMAL PARAMETERS:
!
!	SEM_LIST	Address of semantic table entry.
!	BUFDSC		Output message buffer descriptor address.
!	RECDSC		Record descriptor.
!	DATDSC		QIO buffer descriptor address.
!	DATPTR		Pointer to current data in QIO buffer.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	SEM_LIST : REF BBLOCK;

    IF .(..DATPTR)<0,32> NEQU -1
    THEN
	NMA$INSERTFLD (	.BUFDSC,
			.SEM_LIST [PST$W_DATAID],
			1,
			..DATPTR,
			.RECDSC);

    .DATPTR = ..DATPTR + 4;

    RETURN NML$_STS_SUC

    END;				! End of NML$MOVBYTE

%SBTTL 'NML$MOVWORD  Get volatile word parameter'
GLOBAL ROUTINE NML$MOVWORD (SEM_LIST, BUFDSC, RECDSC, DATDSC, DATPTR)=

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine gets a word parameter from the buffer returned from
!	a SHOW QIO and adds it to a permanent data base record.
!
! FORMAL PARAMETERS:
!
!	SEM_LIST	Address of semantic table entry.
!	BUFDSC		Record buffer descriptor address.
!	RECDSC		Record descriptor address.
!	DATDSC		QIO buffer descriptor address.
!	DATPTR		Address of pointer to current data in QIO buffer.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	SEM_LIST : REF BBLOCK;

    IF .(..DATPTR)<0,32> NEQU -1
    THEN
	NMA$INSERTFLD (	.BUFDSC,
			.SEM_LIST [PST$W_DATAID],
			2,
			..DATPTR,
			.RECDSC);

    .DATPTR = ..DATPTR + 4;

    RETURN NML$_STS_SUC

    END;				! End of NML$MOVWORD

%SBTTL 'NML$MOVLONG  Get volatile lnogword parameter'
GLOBAL ROUTINE NML$MOVLONG (SEM_LIST, BUFDSC, RECDSC, DATDSC, DATPTR)=

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine gets a longword parameter from the buffer returned from
!	a SHOW QIO and adds it to a permanent data base record.
!
! FORMAL PARAMETERS:
!
!	SEM_LIST	Address of semantic table entry.
!	BUFDSC		Record buffer descriptor address.
!	RECDSC		Record descriptor address.
!	DATDSC		QIO buffer descriptor address.
!	DATPTR		Address of pointer to current data in QIO buffer.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	SEM_LIST : REF BBLOCK;

    IF .(..DATPTR)<0,32> NEQU -1
    THEN
	NMA$INSERTFLD (	.BUFDSC,
			.SEM_LIST [PST$W_DATAID],
			4,
			..DATPTR,
			.RECDSC);

    .DATPTR = ..DATPTR + 4;

    RETURN NML$_STS_SUC

    END;				! End of NML$MOVLONG

%SBTTL 'NML$MOVSTRING  Get volatile string parameter'
GLOBAL ROUTINE NML$MOVSTRING (SEM_LIST, BUFDSC, RECDSC, DATDSC, DATPTR)=

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine gets a string parameter from the buffer returned from
!	a SHOW QIO and adds it to a permanent data base record.
!
! FORMAL PARAMETERS:
!
!	SEM_LIST	Address of semantic table entry.
!	BUFDSC		Record buffer descriptor address.
!	RECDSC		Record descriptor address.
!	DATDSC		QIO buffer descriptor address.
!	DATPTR		Address of pointer to current data in QIO buffer.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	SEM_LIST : REF BBLOCK;

    LOCAL
	LEN;

    LEN = .(..DATPTR)<0,16>;
    .DATPTR = ..DATPTR + 2;
!
! If the length is zero then the parameter is not set.
!
    IF .LEN NEQ 0
    THEN
	NMA$INSERTFLD (	.BUFDSC,
			.SEM_LIST [PST$W_DATAID],
			.LEN,
			..DATPTR,
			.RECDSC);

    .DATPTR = ..DATPTR + .LEN;

    RETURN NML$_STS_SUC

    END;				! End of NML$MOVSTRING

END

ELUDOM
