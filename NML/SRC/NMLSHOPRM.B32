%TITLE 'NML special volatile parameter handling routines'
MODULE NML$SHOPRM (
		LANGUAGE (BLISS32),
		ADDRESSING_MODE (NONEXTERNAL=LONG_RELATIVE),
		ADDRESSING_MODE (EXTERNAL=LONG_RELATIVE),
		IDENT = 'V03-000'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  DECnet-VAX V2.0 Network Management Listener
!
! ABSTRACT:
!
!	This module contains routines to process volatile data base
!	information from the NETACP QIO buffer.
!
! ENVIRONMENT:  VAX/VMS Operating System
!
! AUTHOR:  Distributed Systems Software Engineering
!
! CREATION DATE:  23-JAN-1980
!
! MODIFIED BY:
!
!	V03-002	MKP0002		Kathy Perko	3-Jan-1982
!		Delete routine NML$SHOLINKS.  It has been moved to the
!		NMLV2COMP module because it's only used for formatting
!		SHOW LINKS commands for V2 nodes.
!
!	V03-001	MKP0001		Kathy Perko	24-July-1981
!		Delete NML call to map VMS line to DNA line name.
!--


%SBTTL 'Declarations'

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    NML$SHONMLVER,
    NML$SHOVERSION,
    NML$SHOREMSTA,
    NML$SHOHOSTID,
    NML$SHOADJNODE,
    NML$SHOSERVPASS,
    NML$SHOLINEID,
    NML$SHOBYTE,
    NML$SHOWORD,
    NML$SHOLONG,
    NML$SHOSTRING,
    NML$SKIPLONG,
    NML$SKIPSTRING,
    NML$SHOEXEBYTE,
    NML$SHOEXEWORD,
    NML$SHOEXELONG,
    NML$SHOEXESTRING,
    NML$SHOCOUNTERS;

!
! INCLUDE FILES:
!

LIBRARY 'LIB$:NMLLIB.L32';
LIBRARY 'SHRLIB$:NMALIBRY.L32';
LIBRARY 'SHRLIB$:NET.L32';
LIBRARY 'SYS$LIBRARY:STARLET.L32';

!
! OWN STORAGE:
!

!
! Parameter buffer and descriptor for use in handling volatile data base
! data.
!

OWN
    NML$T_PRMBUFFER : VECTOR [256, BYTE];
BIND
    NML$Q_PRMDSC = UPLIT (256, NML$T_PRMBUFFER) : DESCRIPTOR;

!
! EXTERNAL REFERENCES:
!

$NML_EXTDEF;

EXTERNAL ROUTINE
    NML$ADDMSGCOU,
    NML$ADDMSGPRM,
    NML$LISNMLVER,
    NML$GETNODNAM,
    NML$NETQIO;


%SBTTL 'NML$SHONMLVER  Get NML version number'
GLOBAL ROUTINE NML$SHONMLVER (SEM_TABLE, BUFDSC, MSGSIZE, DUMDSC, DATPTR) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine moves the network management version number into
!	the output message as a coded multiple parameter.
!
! FORMAL PARAMETERS:
!
!	SEM_TABLE	Parameter semantic table entry address.
!	BUFDSC		Output message buffer descriptor.
!	MSGSIZE		Address of current output message size.
!	DUMDSC		Not used.
!	DATPTR		Current pointer into QIO data buffer.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	Parameter is added to output message buffer.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    NML$LISNMLVER (.SEM_TABLE, .BUFDSC, .MSGSIZE, .DUMDSC);

    RETURN NML$_STS_SUC

    END;				! End of NML$SHONMLVER

%SBTTL 'NML$SHOVERSION  Get coded multiple version number'
GLOBAL ROUTINE NML$SHOVERSION (SEM_LIST, BUFDSC, MSGSIZE, DUMDSC, DATPTR)=

!++
! FUNCTIONAL DESCRIPTION:
!
!	This parameter moves network facility version numbers into the
!	output message buffer as a coded multiple field.  Version numbers
!	are a string of three bytes.
!
! FORMAL PARAMETERS:
!
!	SEM_LIST	Parameter semantic table entry address.
!	BUFDSC		Output message buffer descriptor address.
!	MSGSIZE		Address of current output message size.
!	DUMDSC		Not used.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	The output message buffer contains the coded multiple version number.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	SEM_LIST : REF BLOCK [, BYTE];

    LOCAL
	BUFFER : VECTOR [6, BYTE],
	LEN,
	PTR;
!
! Read version parameter.
!
    LEN = .(.NML$GL_EXEDATPTR)<0,16>;

    IF .LEN NEQU 3			! Length must be 3 bytes
    THEN
	RETURN NML$_STS_MPR;

    NML$GL_EXEDATPTR = .NML$GL_EXEDATPTR + 2;
!
! Add version parameter to message.
!
	    PTR = CH$PTR (BUFFER);	! Point to output buffer

	    INCR I FROM 0 TO 2 DO
		BEGIN
		CH$WCHAR_A (1, PTR);
	        CH$WCHAR_A (CH$RCHAR_A (NML$GL_EXEDATPTR) - '0' , PTR);
		END;

	    NML$ADDMSGPRM (	.BUFDSC,
				.MSGSIZE,
				.SEM_LIST [PST$W_DATAID],
				.SEM_LIST [PST$B_DATATYPE] OR 3,
				6,
				BUFFER);

    RETURN NML$_STS_SUC

    END;				! End of NML$SHOVERSION

%SBTTL 'NML$SHOREMSTA  Get remote node state'
GLOBAL ROUTINE NML$SHOREMSTA (SEM_LIST, BUFDSC, MSGSIZE, DATDSC, DATPTR)=

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine maps remote node status from the internal NETACP
!	bit value to the network management state value.  The following
!	states are possible:
!
!	    reachable	(NETACP value = 1, NML value = NMA$C_STATE_REA)
!	    unreachable	(NETACP value = 0, NML value = NMA$C_STATE_UNR)
!
! FORMAL PARAMETERS:
!
!	SEM_LIST	Parameter semantic table entry address.
!	BUFDSC		Output message buffer descriptor address.
!	MSGSIZE		Address of current output message size.
!	DATDSC		QIO buffer descriptor address.
!	DATPTR		Current pointer into QIO data buffer.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	SEM_LIST : REF BLOCK [, BYTE];

    LOCAL
	STATE : BYTE;

!
! Map bit setting to correct network management value.
!
	    STATE = (
		IF .(..DATPTR)<0,8>
		THEN
		    NMA$C_STATE_REA	! Reachable
		ELSE
		    NMA$C_STATE_UNR);	! Unreachable
!
! Add state parameter to message.
!
	    NML$ADDMSGPRM (.BUFDSC,
			   .MSGSIZE,
			   .SEM_LIST [PST$W_DATAID],
			   .SEM_LIST [PST$B_DATATYPE],
			   1,
			   STATE);

    .DATPTR = ..DATPTR + 4;

    RETURN NML$_STS_SUC

    END;				! End of NML$SHOREMSTA

%SBTTL 'NML$SHOHOSTID  Get host node id'
GLOBAL ROUTINE NML$SHOHOSTID (SEM_LIST, BUFDSC, MSGSIZE, DATDSC, DATPTR)=

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine returns the host id parameter (NMA$C_PCNO_OHO) for
!	a node.  The host id is stored in the volatile data base
!	as the node address of the host.
!	Both the name and address are retrieved and added to the output
!	message buffer as a coded multiple field.
!
! FORMAL PARAMETERS:
!
!	SEM_LIST	Parameter semantic table entry address.
!	BUFDSC		Output message buffer descriptor address.
!	MSGSIZE		Address of current output message size.
!	DATDSC		QIO buffer descriptor address.
!	DATPTR		Current pointer into QIO data buffer.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	SEM_LIST : REF BLOCK [, BYTE];

    OWN
	TMPBUFFER : BLOCK [6, BYTE];
    BIND
	TMPDSC = UPLIT (6, TMPBUFFER) : DESCRIPTOR;

    LOCAL
	CM_COUNT,
	LENGTH,
	NAMDSC : DESCRIPTOR,
	HOSTADR : WORD,
	PTR,
	RESLEN;

    HOSTADR = .(..DATPTR)<0,16>;
    .DATPTR = ..DATPTR + 4;
!
! If the address value is -1 then the parameter is not set.
!
    IF .(..DATPTR - 4)<0,32> EQLU -1
    THEN
	RETURN NML$_STS_PTY;

    PTR = NML$T_PRMBUFFER;
    CM_COUNT = 1;

    NML$GETNODNAM (.HOSTADR, TMPDSC, RESLEN);
    NAMDSC [DSC$W_LENGTH] = .RESLEN;
    NAMDSC [DSC$A_POINTER] = TMPBUFFER;

    CH$WCHAR_A (2, PTR);
    PTR = CH$MOVE (2, HOSTADR, .PTR);
!
! Add node name field if the length is not zero.
!
    IF .NAMDSC [DSC$W_LENGTH] NEQU 0
    THEN
	BEGIN

	CM_COUNT = .CM_COUNT + 1;
	CH$WCHAR_A (NMA$M_PTY_ASC, PTR);
	CH$WCHAR_A (.NAMDSC [DSC$W_LENGTH], PTR);
	PTR = CH$MOVE (	.NAMDSC [DSC$W_LENGTH],
			.NAMDSC [DSC$A_POINTER],
			.PTR);
	END;

    LENGTH = .PTR - NML$T_PRMBUFFER;
!
! Add coded multiple host id field to output message.
!
    NML$ADDMSGPRM (.BUFDSC,
		   .MSGSIZE,
		   .SEM_LIST [PST$W_DATAID],
		   .SEM_LIST [PST$B_DATATYPE] OR .CM_COUNT,
		   .LENGTH,
		   NML$T_PRMBUFFER);

    RETURN NML$_STS_SUC

    END;				! End of NML$SHOHOSTID

%SBTTL 'NML$SHOADJNODE  Get adjacent node id'
GLOBAL ROUTINE NML$SHOADJNODE (SEM_LIST, BUFDSC, MSGSIZE, DATDSC, DATPTR)=

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine adds the id of the remote node (NMA$C_PCLI_ADJ) to
!	which a line is connected to the output message buffer as a coded
!	multiple field.
!
! FORMAL PARAMETERS:
!
!	SEM_LIST	Parameter semantic table entry address.
!	BUFDSC		Output message buffer descriptor address.
!	MSGSIZE		Address of current output message size.
!	DATDSC		QIO buffer descriptor address.
!	DATPTR		Current pointer into QIO data buffer.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	SEM_LIST : REF BLOCK [, BYTE];

    LOCAL
	ADR,				! Address of node name string
	CM_COUNT,			! Coded multiple field count
	LEN,				! Node name length
	TOTLEN,				! Total length of field
	NODADR,
	PTR;

!
! Get id information from buffer.
!
    NODADR = .(..DATPTR)<0,32>;		! Get address (DLI$V_L_PNA)
    .DATPTR = ..DATPTR + 4;

    LEN = .(..DATPTR)<0,16>;		! Get name (DLI$V_S_PNN)
    .DATPTR = ..DATPTR + 2;
    ADR = ..DATPTR;
    .DATPTR = ..DATPTR + .LEN;
!
! If address is zero then don't return this parameter.
!
    IF .NODADR EQLU -1
    THEN
	RETURN NML$_STS_PTY;

    PTR = NML$T_PRMBUFFER;
    CM_COUNT = 0;
!
! Add node address field.
!
	CM_COUNT = .CM_COUNT + 1;
	CH$WCHAR_A (2, PTR);
	PTR = CH$MOVE (2, NODADR, .PTR);
!
! Add node name field.
!
    IF .LEN NEQU 0
    THEN
	BEGIN

	CM_COUNT = .CM_COUNT + 1;
	CH$WCHAR_A (NMA$M_PTY_ASC, PTR);
	CH$WCHAR_A (.LEN, PTR);
	PTR = CH$MOVE (.LEN, .ADR, .PTR);

	END;

    TOTLEN = .PTR - NML$T_PRMBUFFER;
!
! Add node id to output message as a coded multiple field.
!
    NML$ADDMSGPRM (.BUFDSC,
		   .MSGSIZE,
		   .SEM_LIST [PST$W_DATAID],
		   .SEM_LIST [PST$B_DATATYPE] OR .CM_COUNT,
		   .TOTLEN,
		   NML$T_PRMBUFFER);

    RETURN NML$_STS_SUC

    END;				! End of NML$SHOADJNODE

%SBTTL 'NML$SHOOBJPRV  Get object privilege mask'
GLOBAL ROUTINE NML$SHOOBJPRV (SEM_LIST, BUFDSC, MSGSIZE, DATDSC, DATPTR)=

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine gets the privilege list (NMA$C_PCOB_PRV) for a network
!	object and adds it to the output message buffer.
!
!	Currently, only the first longword of the privilege mask can be
!	set so that is all that is returned.
!
! FORMAL PARAMETERS:
!
!	SEM_LIST	Parameter semantic table entry address.
!	BUFDSC		Output message buffer descriptor address.
!	MSGSIZE		Address of current output message size.
!	DATDSC		QIO buffer descriptor address.
!	DATPTR		Current pointer into QIO data buffer.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	The output message buffer contains the object privilege mask.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	Destroys the contents of NML$T_PRMBUFFER.
!
!--

    BEGIN

    MAP
	SEM_LIST : REF BLOCK [, BYTE];

    IF .(..DATPTR)<0,32> NEQU -1
    THEN
	NML$ADDMSGPRM (	.BUFDSC,
			.MSGSIZE,
			.SEM_LIST [PST$W_DATAID],
			.SEM_LIST [PST$B_DATATYPE] OR 4,
			4,
			..DATPTR);

    .DATPTR = ..DATPTR + 4;

    RETURN NML$_STS_SUC

    END;				! End of NML$SHOOBJPRV

%SBTTL 'NML$SHOSERVPASS  Get service password'
GLOBAL ROUTINE NML$SHOSERVPASS (SEM_LIST, BUFDSC, MSGSIZE, DATDSC, DATPTR)=

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine gets the service password (NMA$C_PCNO_SPA) for the
!	remote node and adds it to the output message as a hexadecimal
!	number.
!
! FORMAL PARAMETERS:
!
!	SEM_LIST	Parameter semantic table entry address.
!	BUFDSC		Output message buffer descriptor address.
!	MSGSIZE		Address of current output message size.
!	DATDSC		QIO buffer descriptor address.
!	DATPTR		Current pointer into QIO data buffer.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	The output message buffer contains the hex service password.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	SEM_LIST : REF BLOCK [, BYTE];

    LOCAL
	PRMSIZE;

    PRMSIZE = .(..DATPTR)<0,16>;
    .DATPTR = ..DATPTR + 2;
!
! If the length is zero then the parameter is not set.
!
    IF .PRMSIZE EQLU 0
    THEN
	RETURN NML$_STS_PTY;
!
! Add the parameter to the message.
!
    NML$ADDMSGPRM (.BUFDSC,
		   .MSGSIZE,
		   .SEM_LIST [PST$W_DATAID],
		   .SEM_LIST [PST$B_DATATYPE] OR .PRMSIZE,
		   .PRMSIZE,
		   ..DATPTR);

    .DATPTR = ..DATPTR + .PRMSIZE;

    RETURN NML$_STS_SUC

    END;				! End of NML$SHOSERVPASS

%SBTTL 'NML$SHOLINEID  Get line id'
GLOBAL ROUTINE NML$SHOLINEID (SEM_LIST, BUFDSC, MSGSIZE, DATDSC, DATPTR)=

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine reads the line id string and converts it from
!	VMS format to DNA format and then adds it to the output message.
!
! FORMAL PARAMETERS:
!
!	SEM_LIST	Parameter semantic table entry address.
!	BUFDSC		Output message buffer descriptor address.
!	MSGSIZE		Address of current output message size.
!	DATDSC		QIO buffer descriptor address.
!	DATPTR		Current pointer into QIO data buffer.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	The output message contains the DNA line id.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	SEM_LIST : REF BLOCK [, BYTE];

    LOCAL
	PRMSIZE;

    PRMSIZE = .(..DATPTR)<0,16>;
    .DATPTR = ..DATPTR + 2;
!
! If the length is zero then the parameter is not set.
!
    IF .PRMSIZE EQLU 0
    THEN
	RETURN NML$_STS_PTY;
!
! Add the parameter to the message.
!
    NML$ADDMSGPRM (	.BUFDSC,
			.MSGSIZE,
			.SEM_LIST [PST$W_DATAID],
			.SEM_LIST [PST$B_DATATYPE],
			.PRMSIZE,
			..DATPTR);

    .DATPTR = ..DATPTR + .PRMSIZE;

    RETURN NML$_STS_SUC

    END;				! End of NML$SHOLINEID

GLOBAL ROUTINE NML$SHOBYTE (SEM_LIST, BUFDSC, MSGSIZE, DATDSC, DATPTR)=

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine gets a byte parameter from the QIO buffer.
!
! FORMAL PARAMETERS:
!
!	SEM_LIST	Parameter semantic table entry address.
!	BUFDSC		Output message buffer descriptor address.
!	MSGSIZE		Address of current output message size.
!	DATDSC		QIO buffer descriptor address.
!	DATPTR		Current pointer into QIO data buffer.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	SEM_LIST : REF BLOCK [, BYTE];

    IF .(..DATPTR)<0,32> NEQU -1
    THEN
	NML$ADDMSGPRM (	.BUFDSC,
			.MSGSIZE,
			.SEM_LIST [PST$W_DATAID],
			.SEM_LIST [PST$B_DATATYPE],
			1,
			..DATPTR);

    .DATPTR = ..DATPTR + 4;

    RETURN NML$_STS_SUC

    END;				! End of NML$SHOBYTE

GLOBAL ROUTINE NML$SHOWORD (SEM_LIST, BUFDSC, MSGSIZE, DATDSC, DATPTR)=

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine gets a word parameter from the QIO buffer.
!
! FORMAL PARAMETERS:
!
!	SEM_LIST	Parameter semantic table entry address.
!	BUFDSC		Output message buffer descriptor address.
!	MSGSIZE		Address of current output message size.
!	DATDSC		QIO buffer descriptor address.
!	DATPTR		Current pointer into QIO data buffer.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	SEM_LIST : REF BLOCK [, BYTE];

    IF .(..DATPTR)<0,32> NEQU -1
    THEN
	NML$ADDMSGPRM (	.BUFDSC,
			.MSGSIZE,
			.SEM_LIST [PST$W_DATAID],
			.SEM_LIST [PST$B_DATATYPE],
			2,
			..DATPTR);

    .DATPTR = ..DATPTR + 4;

    RETURN NML$_STS_SUC

    END;				! End of NML$SHOWORD

GLOBAL ROUTINE NML$SHOLONG (SEM_LIST, BUFDSC, MSGSIZE, DATDSC, DATPTR)=

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine gets a longword parameter from the QIO buffer.
!
! FORMAL PARAMETERS:
!
!	SEM_LIST	Parameter semantic table entry address.
!	BUFDSC		Output message buffer descriptor address.
!	MSGSIZE		Address of current output message size.
!	DATDSC		QIO buffer descriptor address.
!	DATPTR		Current pointer into QIO data buffer.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	SEM_LIST : REF BLOCK [, BYTE];

    IF .(..DATPTR)<0,32> NEQU -1
    THEN
	NML$ADDMSGPRM (	.BUFDSC,
			.MSGSIZE,
			.SEM_LIST [PST$W_DATAID],
			.SEM_LIST [PST$B_DATATYPE],
			4,
			..DATPTR);

    .DATPTR = ..DATPTR + 4;

    RETURN NML$_STS_SUC

    END;				! End of NML$SHOLONG

GLOBAL ROUTINE NML$SHOSTRING (SEM_LIST, BUFDSC, MSGSIZE, DATDSC, DATPTR)=

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine gets a string parameter from the QIO buffer.
!
! FORMAL PARAMETERS:
!
!	SEM_LIST	Parameter semantic table entry address.
!	BUFDSC		Output message buffer descriptor address.
!	MSGSIZE		Address of current output message size.
!	DATDSC		QIO buffer descriptor address.
!	DATPTR		Current pointer into QIO data buffer.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	SEM_LIST : REF BLOCK [, BYTE];

    LOCAL
	LEN;

    LEN = .(..DATPTR)<0,16>;
    .DATPTR = ..DATPTR + 2;
!
! If the length is zero then the parameter is not set.
!
    IF .LEN EQL 0
    THEN
	RETURN NML$_STS_SUC;

    NML$ADDMSGPRM (	.BUFDSC,
			.MSGSIZE,
			.SEM_LIST [PST$W_DATAID],
			.SEM_LIST [PST$B_DATATYPE],
			.LEN,
			..DATPTR);

    .DATPTR = ..DATPTR + .LEN;

    RETURN NML$_STS_SUC

    END;				! End of NML$SHOSTRING

GLOBAL ROUTINE NML$SKIPLONG (SEM_LIST, BUFDSC, MSGSIZE, DATDSC, DATPTR)=

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine skips (advances the pointer past) a byte, word, or
!	longword parameter in the QIO buffer.
!
! FORMAL PARAMETERS:
!
!	SEM_LIST	Parameter semantic table entry address.
!	BUFDSC		Output message buffer descriptor address.
!	MSGSIZE		Address of current output message size.
!	DATDSC		QIO buffer descriptor address.
!	DATPTR		Current pointer into QIO data buffer.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    .DATPTR = ..DATPTR + 4;

    RETURN NML$_STS_SUC

    END;				! End of NML$SKIPLONG

GLOBAL ROUTINE NML$SKIPSTRING (SEM_LIST, BUFDSC, MSGSIZE, DATDSC, DATPTR)=

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine skips (advances the pointer past) a string parameter
!	in the QIO buffer.
!
! FORMAL PARAMETERS:
!
!	SEM_LIST	Parameter semantic table entry address.
!	BUFDSC		Output message buffer descriptor address.
!	MSGSIZE		Address of current output message size.
!	DATDSC		QIO buffer descriptor address.
!	DATPTR		Current pointer into QIO data buffer.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	LEN;

    LEN = .(..DATPTR)<0,16>;
    .DATPTR = ..DATPTR + 2;
    .DATPTR = ..DATPTR + .LEN;

    RETURN NML$_STS_SUC

    END;				! End of NML$SKIPSTRING

GLOBAL ROUTINE NML$SHOEXEBYTE (SEM_LIST, BUFDSC, MSGSIZE, DATDSC, DATPTR)=

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine adds a parameter from the executor data buffer to the
!	output message.
!
! FORMAL PARAMETERS:
!
!	SEM_LIST	Parameter semantic table entry address.
!	BUFDSC		Output message buffer descriptor address.
!	MSGSIZE		Address of current output message size.
!	DATDSC		QIO buffer descriptor address.
!	DATPTR		Current pointer into QIO data buffer.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

!
! Call the normal parameter routine using the executor data descriptor.
!
	NML$SHOBYTE (	.SEM_LIST,
			.BUFDSC,
			.MSGSIZE,
			NML$GQ_EXEDATDSC,
			NML$GL_EXEDATPTR);

    RETURN NML$_STS_SUC

    END;				! End of NML$SHOEXEBYTE

GLOBAL ROUTINE NML$SHOEXEWORD (SEM_LIST, BUFDSC, MSGSIZE, DATDSC, DATPTR)=

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine adds a parameter from the executor data buffer to the
!	output message.
!
! FORMAL PARAMETERS:
!
!	SEM_LIST	Parameter semantic table entry address.
!	BUFDSC		Output message buffer descriptor address.
!	MSGSIZE		Address of current output message size.
!	DATDSC		QIO buffer descriptor address.
!	DATPTR		Current pointer into QIO data buffer.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN
!
! Call the normal parameter routine using the executor data descriptor.
!
	NML$SHOWORD (	.SEM_LIST,
			.BUFDSC,
			.MSGSIZE,
			NML$GQ_EXEDATDSC,
			NML$GL_EXEDATPTR);

    RETURN NML$_STS_SUC

    END;				! End of NML$SHOEXEWORD

GLOBAL ROUTINE NML$SHOEXELONG (SEM_LIST, BUFDSC, MSGSIZE, DATDSC, DATPTR)=

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine adds a parameter from the executor data buffer to the
!	output message.
!
! FORMAL PARAMETERS:
!
!	SEM_LIST	Parameter semantic table entry address.
!	BUFDSC		Output message buffer descriptor address.
!	MSGSIZE		Address of current output message size.
!	DATDSC		QIO buffer descriptor address.
!	DATPTR		Current pointer into QIO data buffer.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN
!
! Call the normal parameter routine using the executor data descriptor.
!
	NML$SHOLONG (	.SEM_LIST,
			.BUFDSC,
			.MSGSIZE,
			NML$GQ_EXEDATDSC,
			NML$GL_EXEDATPTR);

    RETURN NML$_STS_SUC

    END;				! End of NML$SHOEXELONG

GLOBAL ROUTINE NML$SHOEXESTRING (SEM_LIST, BUFDSC, MSGSIZE, DATDSC, DATPTR)=

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine adds a parameter from the executor data buffer to the
!	output message.
!
! FORMAL PARAMETERS:
!
!	SEM_LIST	Parameter semantic table entry address.
!	BUFDSC		Output message buffer descriptor address.
!	MSGSIZE		Address of current output message size.
!	DATDSC		QIO buffer descriptor address.
!	DATPTR		Current pointer into QIO data buffer.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN
!
! Call the normal parameter routine using the executor data descriptor.
!
	NML$SHOSTRING (	.SEM_LIST,
			.BUFDSC,
			.MSGSIZE,
			NML$GQ_EXEDATDSC,
			NML$GL_EXEDATPTR);

    RETURN NML$_STS_SUC

    END;				! End of NML$SHOEXESTRING

GLOBAL ROUTINE NML$SHOCOUNTERS (SEM_LIST, BUFDSC, MSGSIZE, DATDSC, DATPTR) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine puts counter parameters into the response message.
!	Since NETACP formats the counters in NICE format, and returns them
!	as a string, this simply involves moving the string into the
!	response message with no parameter type or string length.
!
! FORMAL PARAMETERS:
!
!	SEM_LIST	Parameter semantic table entry address.
!	BUFDSC		Output message buffer descriptor address.
!	MSGSIZE		Address of current output message size.
!	DATDSC		QIO buffer descriptor address.
!	DATPTR		Current pointer into QIO data buffer.
!
! IMPLICIT OUTPUTS:
!
!	Message buffer contains counter parameters.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
!--

BEGIN

MAP
	SEM_LIST : REF BLOCK [, BYTE];

LOCAL
	LEN;

LEN = .(..DATPTR)<0,16>;
.DATPTR = ..DATPTR + 2;
!
! If the length is zero then no counters were returned.
!
IF .LEN EQL 0
THEN
	RETURN NML$_STS_SUC;

NML$ADDMSGCOU (	.BUFDSC,
		.MSGSIZE,
		.LEN,
		..DATPTR);

.DATPTR = ..DATPTR + .LEN;

RETURN NML$_STS_SUC

END;				! End of NML$SHOCOUNTERS

END

ELUDOM
