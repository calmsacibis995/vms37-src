%TITLE	'File Routines for Network Management'
MODULE NMAFILES	(
		LANGUAGE (BLISS32),
		ADDRESSING_MODE (NONEXTERNAL=LONG_RELATIVE),
		ADDRESSING_MODE (EXTERNAL=LONG_RELATIVE),
		IDENT = 'V03-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	DECnet Network Management Layer (NMA)
!
! ABSTRACT:
!
!	This module contains routines which manage the files used by
!	network management.  These files contain permanent data about the
!	configuration of the network.
!
! ENVIRONMENT:	VAX/VMS Operating System
!
! AUTHOR:	Darrell Duffy	, CREATION DATE:  18-December-1979
!
! MODIFIED BY:
!
!	V03-001	LMK0001		Len Kawell		27-Jul-1981
!		Add CIRCUIT and MODULE files.
!--

%SBTTL	'Definitions'

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    NMA$OPENFILE,			! Open file by id
    NMA$SELECTFILE,			! Find filedescriptor by fileid
    NMA$OPENFAB,			! Open a file by descriptor
    NMA$CLOSEFILE,			! Close a file by id
    NMA$MATCHREC,			! Find record with specified field
    NMA$READREC,			! Get a record from a file
    NMA$WRITEREC,			! Put a record to a file
    NMA$DELETEREC;			! Delete a record from a file

!
! INCLUDE FILES:
!

LIBRARY 'LIB$:NMLLIB.L32';
LIBRARY 'SHRLIB$:NMALIBRY.L32';
LIBRARY 'SYS$LIBRARY:STARLET.L32';

!
! MACROS:
!

!
! Define fields in a file descriptor.
!

FIELD
    FDSCFLDS =
    SET
	FDSCFNS = [0,  0, 32, 0],
	FDSCFNA = [4,  0, 32, 0],
	FDSCFAB = [8,  0, 32, 0],
	FDSCRAB = [12, 0, 32, 0]
    TES;

!
! Macro to build file descriptors.
!
!	FILE		Designator of the file
!	FILENAME	Filename string for file
!

MACRO
    $NMA_BLDFILEDSC [FILE, FILENAME] =	! Build as many as you like

    OWN					! Declare the fab and rab
	%NAME ('NMA$A_', FILE, '_FAB') : $FAB_DECL,
	%NAME ('NMA$A_', FILE, '_RAB') : $RAB_DECL;

    BIND					! The descriptor
	%NAME ('NMA$A_', FILE, '_DSC') =
	UPLIT
	    (
	    %CHARCOUNT (FILENAME),		! Descriptor of filename str
	    UPLIT BYTE (FILENAME),		! Addr
	    %NAME ('NMA$A_', FILE, '_FAB'),	! Fab address
	    %NAME ('NMA$A_', FILE, '_RAB')	! Rab address
	    );
%;

!
! EQUATED SYMBOLS:
!

!
! OWN STORAGE:
!

OWN
    NMA$W_KEYBUF : WORD;		! Key buffer

$NMA_BLDFILEDSC
    (
    NODE,	'NETNODE',		! Remote node database
    LINE,	'NETLINE',		! Line database
    LOG,	'NETLOGING',		! Logging database
    OBJ,	'NETOBJECT',		! Object database
    CIR,	'NETCIRC',		! Circuit database
    MOD,	'NETMODULE'		! Module database
    );

!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    NML$DEBUG_MSG,
    NML$DEBUG_TXT,
    NML$LOGFILEOP,
    NML$LOGRECORDOP;


%SBTTL 'NMA$OPENFILE  Open a specified file'
GLOBAL ROUTINE NMA$OPENFILE (FILEID, ACCESS) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine opens a specified file for specified access.
!	The fileid specifies the file, or all files and the access
!	specifies read only or read write.
!
! FORMAL PARAMETERS:
!
!	FILEID		Value of the fileid parameter (NMA$C_OPN_xxxxx)
!	ACCESS		Value of the access parameter (NMA$C_OPN_AC_Rx)
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Failure or RMS error
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN
    
    LOCAL
	FILEDSC,				! File descriptor
	STATUS;					! Status return

    IF .FILEID EQL NMA$C_OPN_ALL		! If ALL
    THEN
	BEGIN

	INCRU IDX FROM NMA$C_OPN_MIN	! Open all the files by
		TO NMA$C_OPN_MAX	! Calling ourselves
	DO
	    BEGIN

	    STATUS =			! Call ourself to open it
		NMA$OPENFILE (.IDX, .ACCESS);

	    IF NOT .STATUS
	    THEN
		EXITLOOP;

	    END
	END
    ELSE
	BEGIN

	IF NMA$SELECTFILE (.FILEID, FILEDSC)	! Obtain descriptor address
	THEN
	    BEGIN

	    STATUS = NMA$OPENFAB (.FILEDSC, .ACCESS); ! Open file by descriptor

	    IF .STATUS
	    THEN
		NML$LOGFILEOP (DBG$C_FILEIO,
			       .FILEID,
			       $ASCID ('file opened.'));

	    END
	ELSE
	    RETURN NMA$_BADFID;			! If not all, return failure

	END;

    RETURN .STATUS

    END;

%SBTTL 'NMA$SELECTFILE  Return a file descriptor'
ROUTINE NMA$SELECTFILE (FILEID, FILEDSC) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine returns the address of the file descriptor for a
!	specified file.  Failure is returned if the fileid is not
!	valid.
!
! FORMAL PARAMETERS:
!
!	FILEID		Value of the fileid (NMA$C_OPN_xxxxx)
!	FILEDSC		Address to return address of file descriptor
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Success or failure
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	STATUS;

    STATUS = NMA$_SUCCESS;

    .FILEDSC =					! Obtain the file descriptor
	BEGIN					! Address

	CASE .FILEID FROM NMA$C_OPN_MIN TO NMA$C_OPN_MAX OF
	    SET

	    [NMA$C_OPN_NODE]: NMA$A_NODE_DSC;
	    [NMA$C_OPN_LINE]: NMA$A_LINE_DSC;
	    [NMA$C_OPN_LOG]:  NMA$A_LOG_DSC;
	    [NMA$C_OPN_OBJ]:  NMA$A_OBJ_DSC;
	    [NMA$C_OPN_CIR]:  NMA$A_CIR_DSC;
	    [NMA$C_OPN_MOD]:  NMA$A_MOD_DSC;
	    [INRANGE,
	     OUTRANGE]:				! Code not known, fail
		BEGIN

		STATUS = NMA$_BADFID;
		0				! Return invalid descriptor

		END;

	    TES
	END;

    RETURN .STATUS

    END;

%SBTTL 'NMA$OPENFAB  Open or Create a File'
ROUTINE NMA$OPENFAB (FILEDSC, ACCESS) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine does the actual open or create of a file.
!	First the fab is loaded with the correct attributes and then
!	a create or open service is done.  Create is used if the file
!	is to be opened with read-write access and the FOP CIF bit is
!	specified so that the file is created if it does not exist.
!	The created file will be indexed with a two byte binary key.
!	A rather large bucket size is used to allow for long records.
!	The protection is set to be read for world and group and the
!	UIC is set to the system.
!
! FORMAL PARAMETERS:
!
!	FILEDSC		Address of the filedescriptor for the file
!	ACCESS		Value of the access parameter
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Success or an RMS error
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP					! File descriptor format
	FILEDSC : REF BLOCK [1, BYTE] FIELD (FDSCFLDS);

    LOCAL
	STATUS,				! Return status
	FAB,				! Fab address
	RAB,				! Rab address
	FNS,				! Filename size
	FNA;				! Filename address

    OWN
	KEYXAB : $XABKEY_DECL,		! Key xab for create
	PROXAB : $XABPRO_DECL;		! Protection xab for create

    FNA = .FILEDSC [FDSCFNA];		! Obtain descriptor fields
    FNS = .FILEDSC [FDSCFNS];
    FAB = .FILEDSC [FDSCFAB];
    RAB = .FILEDSC [FDSCRAB];

    IF .ACCESS EQL NMA$C_OPN_AC_RW	! Check access for read write
    THEN
	BEGIN

	$FAB_INIT			! Initialize fab for create
	    (
	    FAB = .FAB,			! Fab address
	    BKS = 9,			! Bucket size
	    DNM = 'SYS$SYSTEM:.DAT',	! Default filename string
	    FAC = (UPD, PUT, GET, DEL),	! File access
	    FNA = .FNA,			! Filename string address
	    FNS = .FNS,			! Filename string size
	    FOP = (CIF, MXV),		! File open codes (create if, max ver)
	    ORG = IDX,			! Organsization
	    RFM = VAR,			! Record format
	    SHR = GET,			! Share
	    XAB = PROXAB		! Xab chain
	    );

	$XABKEY_INIT			! Initialize key xab
	    (
	    XAB = KEYXAB,		! Xab address
	    DTP = BN2,			! 2 byte binary
	    POS0 = 0,			! Position
	    SIZ0 = 2,			! Size
	    KREF = 0			! Key reference (primary)
	    );

	$XABPRO_INIT			! Initialize protection xab
	    (
	    XAB = PROXAB,		! Xab address
	    UIC = (1, 4),		! Uic of owner (system)
	    PRO = (RWED, RWED, , ),	! Protection (group and world no access)
	    NXT = KEYXAB		! Chain
	    );

	STATUS = $CREATE (FAB = .FAB);	! Create the file if not found

	END

    ELSE

	BEGIN
	$FAB_INIT			! Initialize the fab
	    (
	    FAB = .FAB,			! Fab address
	    FAC = (GET),		! File access
	    FNA = .FNA,			! Filename string address
	    FNS = .FNS,			! Filename string size
	    DNM = 'SYS$SYSTEM:.DAT',	! Default filename string
	    SHR = (GET)			! Share
	    );

	STATUS = $OPEN (FAB = .FAB);	! Open the file

	END;

    IF NOT .STATUS			! Return failure status
    THEN
	RETURN .STATUS;

    $RAB_INIT				! Initialize the rab
	(
	RAB = .RAB,			! Rab address
	FAB = .FAB,			! Fab address
	KBF = NMA$W_KEYBUF,		! Key buffer address
	KRF = 0,			! Key of reference
	KSZ = 2,			! Key size
	RAC = KEY,			! Record access mode
	ROP = (UIF,KGE)			! Record options (put is update)
	);

    RETURN $CONNECT (RAB = .RAB);	! Connect record stream and return

    END;

%SBTTL 'NMA$CLOSEFILE  Close a specified file'
GLOBAL ROUTINE NMA$CLOSEFILE (FILEID) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine closes a specified file or all the files.
!
! FORMAL PARAMETERS:
!
!	FILEID		Value of the fileid parameter (NMA$C_OPN_xxxxx)
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Status of last close operation.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN
    
    LOCAL
	FILEDSC : REF BLOCK [1, BYTE] 		! File descriptor
		  FIELD (FDSCFLDS),
	STATUS;					! Status return

    IF .FILEID EQL NMA$C_OPN_ALL		! If it failed because of ALL
    THEN
	BEGIN

	INCRU IDX FROM NMA$C_OPN_MIN	! Close all the files by
		TO NMA$C_OPN_MAX	! Calling ourselves
	DO
	    BEGIN

	    STATUS = NMA$CLOSEFILE (.IDX);

	    END;
	END
    ELSE
	BEGIN

	IF NMA$SELECTFILE (.FILEID, FILEDSC) ! Obtain descriptor address
	THEN
	    BEGIN

	    STATUS =
		$CLOSE (FAB = .FILEDSC [FDSCFAB]); ! Call RMS to close the file

	    IF .STATUS
	    THEN
		NML$LOGFILEOP (DBG$C_FILEIO,
			       .FILEID,
			       $ASCID ('file closed.'));

	    END
	ELSE
	    STATUS = NMA$_BADFID;

	END;

    RETURN .STATUS

    END;

%SBTTL 'NMA$MATCHREC  Find a Record in a File'
GLOBAL ROUTINE NMA$MATCHREC (FILEID, BUFDSC, KEYADR, FIELDCODE,
				FIELDSIZE, FIELDADR, RTNDSC) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine searches a database for a record containing a given
!	field containing given data.  Degenerate cases are provided for
!	returning all records, or all records containing a specific field.
!
! FORMAL PARAMETERS:
!
!	FILEID		Value of the fileid code (NMA$C_OPN_xxxxx)
!	BUFDSC		Address of a descriptor of a buffer to use
!	KEYADR		Address of a word containing the key to start reading
!			Key value is returned in this word.
!	FIELDCODE	Value of the field code (zero for wildcard)*****
!	FIELDSIZE	Value of the field size (zero for wildcard)
!	FIELDADR	Address of the field data
!	RTNDSC		Address of a descriptor to return descriptor of data
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NMA or RMS error status
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	BUFDSC : REF VECTOR,		! Buffer to use for record
	RTNDSC : REF VECTOR;		! Return data descriptor

    LOCAL
	FILEDSC : REF BLOCK [1, BYTE]	! File descriptor
		  FIELD (FDSCFLDS),
	RAB     : REF BLOCK [1, BYTE],	! The rab for the file
	LCLDSC  : VECTOR [2],		! A local data descriptor
	FAB     : REF BLOCK [, BYTE],	! The fab for the file
	FLDADR,				! Field address
	FLDSIZ,				! Field size
	STATUS;				! Status return

    EXTERNAL ROUTINE
	NMA$SEARCHFLD;			! Search for a field value

    STATUS = NMA$SELECTFILE (.FILEID,
			     FILEDSC);	! Obtain the file descriptor

    IF NOT .STATUS
    THEN
	RETURN .STATUS;			! Bogus fileid

    RAB = .FILEDSC [FDSCRAB];		! Point to the rab
    FAB = .FILEDSC [FDSCFAB];		! Get address of FAB

    IF .FAB [FAB$W_IFI] EQL 0		! If file not open,
    THEN
	RETURN .FAB [FAB$L_STS]; 	! return open failure status

    RAB [RAB$W_USZ] = .BUFDSC [0];	! Set the buffer to use
    RAB [RAB$L_UBF] = .BUFDSC [1];

    NMA$W_KEYBUF = ..KEYADR;		! And the key value to use

    WHILE 1				! Try this forever
    DO
	BEGIN

	STATUS = $GET (RAB = .RAB);	! Read a record

	LCLDSC [0] = .RAB [RAB$W_RSZ];	! Pickup the real record descriptor
	LCLDSC [1] = .RAB [RAB$L_RBF];
	RTNDSC [0] = .RAB [RAB$W_RSZ];
	RTNDSC [1] = .RAB [RAB$L_RBF];

	IF NOT .STATUS			! If no good, return
	THEN
	    RETURN .STATUS;

	NMA$W_KEYBUF =			! Set the keyvalue returned
		.(.LCLDSC [1]) <0, 16, 0>;

	(.KEYADR) <0, 16, 0> = .NMA$W_KEYBUF; ! Return for user to remember

	FLDADR = 0;			! Start search from beginning
	IF NMA$SEARCHFLD		! Look for the field
		(
		LCLDSC,			! Here is the data
		.FIELDCODE,		! Value of the code to look for
		FLDSIZ,			! Return the size here
		FLDADR			! Return the address here
		)
	THEN
	    BEGIN

	    IF .FIELDSIZE EQL 0		! Wildcard
	    THEN
		BEGIN

		STATUS = NMA$_SUCCESS;	! It always succeeds
		EXITLOOP;

		END;

	    IF CH$EQL			! Look at the data
		(
		.FLDSIZ,		! Data in record
		.FLDADR,
		.FIELDSIZE,		! User data
		.FIELDADR,
		0
		)
	    THEN
		BEGIN

		STATUS = NMA$_SUCCESS;	! We found such a record
		EXITLOOP;

		END;
	    END;

	NMA$W_KEYBUF = .NMA$W_KEYBUF + 1;     ! Increment key ****
	(.KEYADR) <0, 16, 0> = .NMA$W_KEYBUF; ! Return for user to remember

	END;

    IF .STATUS
    THEN
	NML$LOGRECORDOP (DBG$C_FILEIO,
			 .FILEID,
		         $ASCID ('record matched'),
		         .RTNDSC);
	
    RETURN .STATUS

    END;

%SBTTL 'NMA$READREC  Get a record from a File'
GLOBAL ROUTINE NMA$READREC (FILEID, KEYADR, BUFDSC, RTNDSC) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine reads the next database record starting at the specified
!	key.
!
! FORMAL PARAMETERS:
!
!	FILEID		Value of the fileid code (NMA$C_OPN_xxxxx)
!	KEYADR		Address of a word containing the key to start reading
!			Key value is returned in this word.
!	BUFDSC		Address of a descriptor of a buffer to use
!	RTNDSC		Address of a descriptor to return descriptor of data
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NMA or RMS error status
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	BUFDSC : REF VECTOR,		! Buffer to use for record
	RTNDSC : REF VECTOR;		! Return data descriptor

    LOCAL
	FILEDSC : REF BLOCK [1, BYTE]	! File descriptor
		  FIELD (FDSCFLDS),
	FAB     : REF BLOCK [, BYTE],	! The fab for the file
	RAB     : REF BLOCK [1, BYTE],	! The rab for the file
	STATUS;				! Status return

    STATUS = NMA$SELECTFILE (.FILEID,
			     FILEDSC);	! Obtain the file descriptor

    IF NOT .STATUS
    THEN
	RETURN .STATUS;			! Bogus fileid


    RAB = .FILEDSC [FDSCRAB];		! Point to the rab
    FAB = .FILEDSC [FDSCFAB];		! Get address of FAB

    IF .FAB [FAB$W_IFI] EQL 0 		! If file not open,
    THEN
	RETURN .FAB [FAB$L_STS]; 	! Return open failure status

    RAB [RAB$W_USZ] = .BUFDSC [0];	! Set the buffer to use
    RAB [RAB$L_UBF] = .BUFDSC [1];

    NMA$W_KEYBUF = ..KEYADR;		! And the key value to use

    STATUS = $GET (RAB = .RAB);		! Read a record

    RTNDSC [0] = .RAB [RAB$W_RSZ];
    RTNDSC [1] = .RAB [RAB$L_RBF];

    IF NOT .STATUS			! If no good, return
    THEN
        RETURN .STATUS;

    (.KEYADR)<0,16,0> = .(.RTNDSC [1])<0,16>; ! Return for user to remember

    NML$LOGRECORDOP (DBG$C_FILEIO,
		     .FILEID,
		     $ASCID ('record read'),
		     .RTNDSC);

    RETURN NMA$_SUCCESS

    END;

%SBTTL 'NMA$WRITEREC  Write a Record to a File'
GLOBAL ROUTINE NMA$WRITEREC (FILEID, KEYADR, BUFDSC) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine puts a record to the specified file.  The key is
!	specified by keyadr.  The file was opened so that puts to existing
!	records act as updates.  The keyvalue is moved to the first two bytes
!	of the record before the write.
!
! FORMAL PARAMETERS:
!
!	FILEID		Value if the fileid
!	KEYADR		Address of a word of keyvalue
!	BUFDSC		Address of descriptor of data to write
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	RMS error code
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	BUFDSC : REF VECTOR;		! User supplied data

    LOCAL
	RAB     : REF BLOCK [1, BYTE],	! Address of rab
	STATUS,				! Return status
	FILEDSC : REF BLOCK [1, BYTE]	! File descriptor address
		  FIELD (FDSCFLDS);

    STATUS = NMA$SELECTFILE (.FILEID,
			     FILEDSC);	! Obtain file descriptor
    IF NOT .STATUS
    THEN
	RETURN .STATUS;			! Return the status

    RAB = .FILEDSC [FDSCRAB];		! Obtain the rab address
    RAB [RAB$W_RSZ] = .BUFDSC [0];	! User buffer to write
    RAB [RAB$L_RBF] = .BUFDSC [1];

    NMA$W_KEYBUF = ..KEYADR;		! Key value from user
    (.BUFDSC [1])<0,16,0> = .NMA$W_KEYBUF; ! Move key to buffer for write

    STATUS = $PUT (RAB = .RAB);		! Put or update the record

    IF .STATUS
    THEN
	NML$LOGRECORDOP (DBG$C_FILEIO,
			 .FILEID,
			 $ASCID ('record written'),
			 .BUFDSC);

    RETURN .STATUS

    END;

%SBTTL 'NMA$DELETEREC  Delete a Record from the File'
GLOBAL ROUTINE NMA$DELETEREC (FILEID, KEYADR) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine deletes a record from the file by specified key
!	number.
!
! FORMAL PARAMETERS:
!
!	FILEID		Value if the fileid
!	KEYADR		Address of a word of keyvalue
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	RMS error code
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	RAB     : REF BLOCK [1, BYTE],	! Address of rab
	STATUS,				! Return status
	FILEDSC : REF BLOCK [1, BYTE]	! File descriptor address
		  FIELD (FDSCFLDS);

    STATUS = NMA$SELECTFILE (.FILEID,
			     FILEDSC);	! Obtain file descriptor

    IF .STATUS
    THEN
	BEGIN

	RAB = .FILEDSC [FDSCRAB];	! Obtain the rab address

	NMA$W_KEYBUF = ..KEYADR;	! Key value from user

	STATUS = $DELETE (RAB = .RAB);	! Delete the record

	IF .STATUS
	THEN
	    NML$LOGRECORDOP (DBG$C_FILEIO,
			     .FILEID,
			     $ASCID ('record deleted'),
			     UPLIT (2, NMA$W_KEYBUF));

	END;

    RETURN .STATUS

    END;

END					! End of module

ELUDOM
