%TITLE 'NML ZERO counters module'
MODULE NML$ZERO (
		LANGUAGE (BLISS32),
		ADDRESSING_MODE (EXTERNAL=LONG_RELATIVE),
		ADDRESSING_MODE (NONEXTERNAL=LONG_RELATIVE),
		IDENT = 'V03-001'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  DECnet-VAX Network Management Listener
!
! ABSTRACT:
!
!    These routines return volatile data base information in response to
!    an NCP ZERO command message.
!
! ENVIRONMENT:  VAX/VMS Operating System
!
! AUTHOR:  Distributed Systems Software Engineering
!
! CREATION DATE:  30-DEC-1979
!
! MODIFIED BY:
!
!	V03-001	MKP0003		Kathy Perko	31-Mar-1982
!		Fix entity returned to NPC by NML_ZEROKNOWN to include
!		the full ID string.
!
!	V02-002	MKP0002		Kathy Perko	2-Feb-1982
!		Change ZERO EXECUTOR so that the zero is only issued
!		to the NDI (remote node) database instead of to both
!		the LNI (local node) and NDI databases.
!
!	V02-001	MKP001		Kathy Perko	23-July-1981
!		Add circuits and multipoint lines.
!--


%SBTTL 'Declarations'

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    NML$ZERO		: NOVALUE,
    NML_ZERO_CIRCUIT	: NOVALUE,
    NML_ZERO_LINE	: NOVALUE,
    NML_ZERO_NODE	: NOVALUE,
    NML_ZEROPLURAL	: NOVALUE,
    NML_ZEROKNOWN	: NOVALUE,
    NML_ZEROKNONODES	: NOVALUE,
    NML_ZEROENTITY	: NOVALUE,
    NML_ZERONODE	: NOVALUE,
    NML_ZEROREMOTES	: NOVALUE;

!
! INCLUDE FILES:
!

LIBRARY 'LIB$:NMLLIB.L32';
LIBRARY 'SHRLIB$:NMALIBRY.L32';
LIBRARY 'SHRLIB$:NET.L32';
LIBRARY 'SYS$LIBRARY:STARLET.L32';

!
! OWN STORAGE:
!

OWN
    NML$T_P2BUFFER : VECTOR [NML$K_P2BUFLEN];
BIND
    NML$Q_P2BFDSC = UPLIT (NML$K_P2BUFLEN, NML$T_P2BUFFER) : DESCRIPTOR;

OWN
    NML$T_ENTBUFFER : VECTOR [32],
    NML$Q_ENTBFDSC  : DESCRIPTOR
		      INITIAL (0, NML$T_ENTBUFFER);

!
! EXTERNAL REFERENCES:
!

$NML_EXTDEF;

EXTERNAL ROUTINE
    LIB$ESTABLISH : ADDRESSING_MODE (LONG_RELATIVE),
    LIB$REVERT    : ADDRESSING_MODE (LONG_RELATIVE),
    NML$BLD_REPLY,
    NML$BLDP2,
    NML$ERROR_1,
    NML$ERROR_2,
    NML$GETEXEID,
    NML$GETINFTABS,
    NML$GETKNOWNLIST,
    NML$MAINHANDLER,
    NML$NETQIO,
    NML$SEND;


%SBTTL 'NML$ZERO  Zero counters main routine'
GLOBAL ROUTINE NML$ZERO : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine dispatches the zero function to the proper routine
!	according to the entity type.
!
! IMPLICIT INPUTS:
!
!	NML$GB_ENTCODE contains the entity type code.
!
!--

    BEGIN

    SELECTONEU .NML$GB_ENTCODE OF
	SET
	[NMA$C_ENT_CIR]: NML_ZERO_CIRCUIT ();	! Circuit
	[NMA$C_ENT_LIN]: NML_ZERO_LINE ();	! Line
	[NMA$C_ENT_NOD]: NML_ZERO_NODE ();	! Node
	TES;

    NML$ERROR_1 (NMA$C_STS_FUN);	! Send option error message

    END;				! End of NML$ZERO

%SBTTL 'NML_ZERO_CIRCUIT  Zero volatile circuit parameters'
ROUTINE NML_ZERO_CIRCUIT: NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine dispatches to a routine to zero the specified
!	set of circuit counters based on the entity id format.
!
! IMPLICIT INPUTS:
!
!	NML$GB_ENTFRM contains the entity format code.
!
!--

BEGIN

MAP
	NML$GB_ENTFRM : BYTE SIGNED;

SELECTONEU .NML$GB_ENTFRM OF
	SET

	[NMA$C_ENT_KNO]:		! Known

	    NML_ZEROPLURAL (NML_ZEROKNOWN,	! Routine name
			    NML$C_CIRCUIT,	! Entity code
			    0,			! Not used
			    0);			! Not used

	[1 TO 16]:			! Line name

	    NML_ZEROPLURAL (NML_ZEROENTITY,	! Routine name
			   NML$C_CIRCUIT,	! Entity code
			   .NML$GB_ENTFRM,	! Id string length
			   NML$AB_ENTID);	! Id string address

	TES;

NML$ERROR_2 (NMA$C_STS_IDE, NMA$C_ENT_CIR);	! Option error

END;				! End of NML_ZERO_LINE

%SBTTL 'NML_ZERO_LINE  Zero volatile line parameters'
ROUTINE NML_ZERO_LINE: NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine dispatches to a routine to zero the specified
!	set of line counters based on the entity id format.
!
! IMPLICIT INPUTS:
!
!	NML$GB_ENTFRM contains the entity format code.
!
!--

BEGIN

MAP
	NML$GB_ENTFRM : BYTE SIGNED;

SELECTONEU .NML$GB_ENTFRM OF
	SET

	[NMA$C_ENT_KNO]:		! Known

	    NML_ZEROPLURAL (NML_ZEROKNOWN,	! Routine name
			    NML$C_LINE,		! Info code
			    0,			! Not used
			    0);			! Not used

	[1 TO 16]:			! Line name

	    NML_ZEROPLURAL (NML_ZEROENTITY,	! Routine name
			   NML$C_LINE,		! Info code
			   .NML$GB_ENTFRM,	! Id string length
			   NML$AB_ENTID);	! Id string address

	TES;

NML$ERROR_2 (NMA$C_STS_IDE, NMA$C_ENT_LIN);	! Option error

END;				! End of NML_ZERO_LINE

%SBTTL 'NML_ZERO_NODE  Zero node counters'
ROUTINE NML_ZERO_NODE: NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine dispatches to a routine to zero the specified set
!	of node counters based on the entity id format.
!
! IMPLICIT INPUTS:
!
!	NML$GB_ENTFRM contains the entity format code.
!
!--

    BEGIN

    MAP
	NML$GB_ENTFRM : BYTE SIGNED;

    LOCAL
	EXEC_ADR;

    SELECTONEU .NML$GB_ENTFRM OF
	SET

	[NMA$C_ENT_KNO]:		! Known

	    NML_ZEROPLURAL (NML_ZEROKNONODES,	! Routine name
			    0,			! No entity
			    0,			! Not used
			    0);			! Not used

	[NMA$C_ENT_ADD]:		! Node address
	    BEGIN

	    BIND
		NOD_NUM = NML$AB_ENTID : WORD;

	    EXEC_ADR = 0;		! Set exec address in case entity is
					!	NML$C_EXECUTOR.
	    IF .NML$GL_PRS_FLGS [NML$V_PRS_EXE]
	    THEN
		NML_ZEROPLURAL (NML_ZERONODE,	! Routine name
				NML$C_EXECUTOR,	! No entity
				2,		! Id string length
				EXEC_ADR)	! Executor node address
	    ELSE
		NML_ZEROPLURAL (NML_ZERONODE,	! Routine address
				NML$C_NODE,	! Entity code
			        2,		! Id string length
			        NML$AB_ENTID);	! Id (node address) address

	    END;

	[1 TO 6]:			! Node name

	    IF .NML$GL_PRS_FLGS [NML$V_PRS_EXE]
	    THEN
		NML_ZEROPLURAL (NML_ZERONODE,	! Routine address
				NML$C_EXECUTOR,	! No entity
				2,		! Id string length
				EXEC_ADR)	! Executor node address
	    ELSE
		NML_ZEROPLURAL (NML_ZERONODE,		! Routine address
				NML$C_NODEBYNAME,	! Entity code
				.NML$GB_ENTFRM,		! Id (node name) length
				NML$AB_ENTID);		! Id address

	TES;

    NML$ERROR_2 (NMA$C_STS_IDE, NMA$C_ENT_NOD); ! Option error

    END;				! End of NML_ZERO_NODE

%SBTTL 'NML_ZEROPLURAL  Zero plural entity counters'
ROUTINE NML_ZEROPLURAL (RTN, ENTITY, PRM1, PRM2) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine frames the response messages with 'more' and
!	'done' messages and calls the specified routine.
!
! FORMAL PARAMETERS:
!
!	RTN		Address of entity routine to be called.
!	ENTITY		Entity Table index for the entity (NML$C_...)
!	PRM1		Routine parameter value.
!	PRM2		Routine parameter value.
!
! SIDE EFFECTS:
!
!	A 'more' message is sent and then a 'done' message is signalled
!	following a return or signal from the specified routine.
!
!--

    BEGIN

    LOCAL
	MSG_SIZE;

!
! Send success with multiple responses message.
!
    NML$BLD_REPLY (UPLIT(0, NMA$C_STS_MOR), MSG_SIZE); ! Build message
    NML$SEND (NML$AB_SNDBUFFER, .MSG_SIZE);	! Send it
!
! Enable condition handler to allow done message to be sent.
!
    LIB$ESTABLISH (NML$MAINHANDLER);
!
! Call entity-specific routine.
!
    (.RTN) (.ENTITY, .PRM1, .PRM2);
!
! Signal done message.
!
    LIB$REVERT ();			! Disable condition handler
    NML$ERROR_1 (NMA$C_STS_DON);	! Signal no more responses

    END;				! End of NML_ZEROPLURAL


%SBTTL 'NML_ZEROKNOWN   Zero known entity counters'
ROUTINE NML_ZEROKNOWN (ENTITY, DUM1, DUM2) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine reads the volatile data base entries for all
!	lines.
!
! FORMAL PARAMETERS:
!
!	ENTITY		Index into Entity Table for entity (NML$C_...)
!	DUM1		Not used.
!	DUM2		Not used.
!
! SIDE EFFECTS:
!
!	Zero or more response messages will be sent.
!
!--

    BEGIN

    LOCAL
	BUFEND,
	DUMDSC : REF DESCRIPTOR,	! Dummy table descriptor
	ENTLEN,				! DNA line name length
	LENGTH,
	LISDSC : DESCRIPTOR,		! List buffer descriptor
	ENTPTR,				! Pointer to entity id for response
	MSGSIZE,			! Response message size
	NFBDSC : REF DESCRIPTOR,	! Descriptor for NFB
	P2DSC  : DESCRIPTOR,		! P2 buffer descriptor
	PTR,
	STATUS,
	STRTFLG;
!
! Get a list of all lines in the volatile data base.
!
STRTFLG = FALSE;

WHILE NML$GETKNOWNLIST (.ENTITY, .STRTFLG, LISDSC) DO
	BEGIN

	STRTFLG = TRUE;
!
! Zero counters for every line in the list.
!
	BUFEND = .LISDSC [DSC$A_POINTER] + .LISDSC [DSC$W_LENGTH];
	PTR = .LISDSC [DSC$A_POINTER];

	WHILE .PTR LSSA .BUFEND DO
	    BEGIN

	    LENGTH = .(.PTR)<0,16>;
	    PTR = .PTR + 2;

!
! Get NFB and P2 buffer.
!
	    NML$GETINFTABS (.ENTITY, NML$C_ZERO, NFBDSC, DUMDSC, 0);
	    NML$BLDP2 (.LENGTH, .PTR, -1, 0, NML$Q_P2BFDSC, P2DSC);
!
! Initialize message flags and status.
!
	    NML$AB_MSGBLOCK [MSB$L_FLAGS] = 0;
	    NML$AB_MSGBLOCK [MSB$B_CODE] = NMA$C_STS_SUC;
!
! Zero the counters for the specified line.
!
	    NML$NETQIO (.NFBDSC, P2DSC, 0, 0);
!
! Move the entity ID into the entity buffer.
!
	    ENTPTR = .NML$Q_ENTBFDSC [DSC$A_POINTER];
	    CH$WCHAR_A (.LENGTH, ENTPTR);
	    CH$MOVE (.LENGTH, .PTR, .ENTPTR);
	    NML$Q_ENTBFDSC [DSC$W_LENGTH] = .LENGTH + 1;
!
! Add line id to response message.
!
	    NML$AB_MSGBLOCK [MSB$V_ENTD_FLD] = 1;
	    NML$AB_MSGBLOCK [MSB$A_ENTITY] = NML$Q_ENTBFDSC;
!
! Build and send the response message.
!
	    NML$BLD_REPLY (NML$AB_MSGBLOCK, MSGSIZE);
	    NML$SEND (NML$AB_SNDBUFFER, .MSGSIZE);

	    PTR = .PTR + .LENGTH;	! Advance pointer

	    END;
	END;

    END;				! End of NML_ZEROKNOWN

%SBTTL 'NML_ZEROKNONODES  Zero known node counters'
ROUTINE NML_ZEROKNONODES (DUM0, DUM1, DUM2) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine zeros counters for all nodes in the volatile data base.
!
! FORMAL PARAMETERS:
!
!	DUM0		Not used.
!	DUM1		Not used.
!	DUM2		Not used.
!
! SIDE EFFECTS:
!
!	Zero or more response messages will be sent as a result of
!	the routines that are called.
!
!--

    BEGIN

    LOCAL
	EXEC_ADR: WORD;
!
! Return executor node.
!
    EXEC_ADR = 0;
    NML_ZERONODE (NML$C_EXECUTOR,
		  2,		! Id string length
		  EXEC_ADR);	! Executor node address
!
! Return remote nodes.
!
    NML_ZEROREMOTES ();

    END;				! End of NML_ZEROKNONODES

%SBTTL 'NML_ZEROENTITY  Zero entity counters'
ROUTINE NML_ZEROENTITY (ENTITY, LEN, ADR) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!
! FORMAL PARAMETERS:
!
!	ENTITY		Entity Table index (NML$C_...)
!	LEN		Length of entity id string.
!	ADR		Address of entity id string.
!
! SIDE EFFECTS:
!
!	A response message will be sent.
!
!--

    BEGIN

    LOCAL
	DUMDSC : REF DESCRIPTOR,	! Dummy table descriptor
	MSGSIZE,			! Length of response message
	NEWLEN,				! Mapped (VMS) line name length
	NFBDSC : REF DESCRIPTOR,	! NFB descriptor
	P2DSC  : DESCRIPTOR;		! Descriptor for P2 buffer
!
! Get NFB and P2 buffer.
!
NML$GETINFTABS (.ENTITY, NML$C_ZERO, NFBDSC, DUMDSC, 0);
NML$BLDP2 (.LEN, .ADR, -1, 0, NML$Q_P2BFDSC, P2DSC);
!
! Initialize message flags and status.
!
NML$AB_MSGBLOCK [MSB$L_FLAGS] = 0;
NML$AB_MSGBLOCK [MSB$B_CODE] = NMA$C_STS_SUC;
!
! Zero the counters for the specified line.
!
NML$NETQIO (.NFBDSC, P2DSC, 0, 0);
!
! Build and send the response message.
!
NML$BLD_REPLY (NML$AB_MSGBLOCK, MSGSIZE);
NML$SEND (NML$AB_SNDBUFFER, .MSGSIZE);

END;				! End of NML_ZEROLINE

%SBTTL 'NML_ZERONODE  Zero node counters'
ROUTINE NML_ZERONODE (ENTITY, LEN, ADR) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!
! FORMAL PARAMETERS:
!
!	ENTITY		Entity Table index (NML$C...)
!	LEN		Length of entity id string.
!	ADR		Address of entity id string.
!
! SIDE EFFECTS:
!
!	A response message will be sent.
!
!--

BEGIN

LOCAL
    MSGSIZE,			! Response message size
    NFBDSC : REF DESCRIPTOR,	! NFB descriptor
    P2DSC  : DESCRIPTOR,		! P2 parameter descriptor
    DUMDSC : REF DESCRIPTOR;	! Dummy table descriptor

!
! Get the NFB and P2 buffer.
!
NML$GETINFTABS (.ENTITY, NML$C_ZERO, NFBDSC, DUMDSC, 0);
IF .ENTITY NEQ NML$C_NODEBYNAME THEN
	!
	! Zero executor node or node specified by address in the NICE command.
	!
	NML$BLDP2 (0, .(.ADR)<0,16>, -1, 0, NML$Q_P2BFDSC, P2DSC)
ELSE
	!
	! Zero node specified by name in the NICE command.
	!
	NML$BLDP2 (.LEN, .ADR, -1, 0, NML$Q_P2BFDSC, P2DSC);

!
! Initialize message flags and status.
!
NML$AB_MSGBLOCK [MSB$L_FLAGS] = 0;
NML$AB_MSGBLOCK [MSB$B_CODE] = NMA$C_STS_SUC;
!
! Zero the counters for the specified node.
!
NML$NETQIO (.NFBDSC, P2DSC, 0, 0);
!
! If zeroing the executor node's counters, then the excutor's entity ID
! must be returned in the NICE response message.  Add it to the message.
!
IF .ENTITY EQL NML$C_EXECUTOR THEN
    BEGIN
    !
    ! Add the executor id to the entity buffer.
    !
    NML$GETEXEID (NML$Q_ENTBFDSC, NML$Q_ENTBFDSC [DSC$W_LENGTH]);
    !
    ! Add the entity id to the message.
    !
    NML$AB_MSGBLOCK [MSB$V_ENTD_FLD] = 1;
    NML$AB_MSGBLOCK [MSB$A_ENTITY] = NML$Q_ENTBFDSC;
    END;
!
! Build and send the response message.
!
NML$BLD_REPLY (NML$AB_MSGBLOCK, MSGSIZE);
NML$SEND (NML$AB_SNDBUFFER, .MSGSIZE);

END;				! End of NML_ZERONODE

%SBTTL 'NML_ZEROREMOTES  Zero known node counters'
ROUTINE NML_ZEROREMOTES: NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine zeros the counters for all remote nodes.
!
! SIDE EFFECTS:
!
!	Zero or more response messages will be sent.
!
!--

BEGIN

LOCAL
	BUFEND,
	DUMDSC : REF DESCRIPTOR,	! Dummy table descriptor
	ENTPTR,				! Pointer to node id in response
	LENGTH,
	LISDSC : DESCRIPTOR,
	MSGSIZE,
	NFBDSC : REF DESCRIPTOR,	! NFB descriptor
	P2DSC  : DESCRIPTOR,		! Descriptor for P2 buffer
	PTR,
	STATUS,
	STRTFLG;
!
! Get the list of known remote nodes.
!
STRTFLG = FALSE;

WHILE NML$GETKNOWNLIST (NML$C_NODE, .STRTFLG, LISDSC) DO
	BEGIN

	STRTFLG = TRUE;
	!
	! Zero counters for all nodes in the list.
	!
	PTR = .LISDSC [DSC$A_POINTER];
	BUFEND = .LISDSC [DSC$A_POINTER] + .LISDSC [DSC$W_LENGTH];
	LENGTH = 2;
	NML$GETINFTABS (NML$C_NODE, NML$C_ZERO, NFBDSC, DUMDSC, 0);

	WHILE .PTR LSSA .BUFEND DO
		BEGIN

		PTR = .PTR +4;		! Skip loopnode flag.
		NML$BLDP2 (0, .(.PTR)<0,16>, -1, 0, NML$Q_P2BFDSC, P2DSC);

		NML$AB_MSGBLOCK [MSB$L_FLAGS] = 0;
		NML$AB_MSGBLOCK [MSB$B_CODE] = NMA$C_STS_SUC;

		NML$NETQIO (.NFBDSC, P2DSC, 0, 0);
		!
		! Move node address and name into entity id buffer and
		! advance pointer.
		!
		ENTPTR = CH$MOVE (2,
				.PTR,
				.NML$Q_ENTBFDSC [DSC$A_POINTER]);
		PTR = .PTR + 4;
		LENGTH = .(.PTR)<0,16>;
		CH$WCHAR_A (.LENGTH, ENTPTR);
		PTR = .PTR + 2;
		ENTPTR = CH$MOVE (.LENGTH, .PTR, .ENTPTR);
		PTR = .PTR + .LENGTH;
		!
		! Add node id to message.
		!
		NML$Q_ENTBFDSC [DSC$W_LENGTH] =
			.ENTPTR - .NML$Q_ENTBFDSC [DSC$A_POINTER];
		NML$AB_MSGBLOCK [MSB$V_ENTD_FLD] = 1;
		!
		! Build and send the response message.
		!
		NML$BLD_REPLY (NML$AB_MSGBLOCK, MSGSIZE);
		NML$SEND (NML$AB_SNDBUFFER, .MSGSIZE);

	    END
	END;

    END;				! End of NML_ZEROREMOTES

END					! End of module

ELUDOM
