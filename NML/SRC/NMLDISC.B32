%TITLE 'NML Disconnect parameter module'
MODULE NML$DISCONNECT (
		LANGUAGE (BLISS32),
		ADDRESSING_MODE (NONEXTERNAL=LONG_RELATIVE),
		ADDRESSING_MODE (EXTERNAL=LONG_RELATIVE),
		IDENT = 'V03-000'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  DECnet-VAX V2.0 Network Management Listener
!
! ABSTRACT:
!
!	These routines process all NCP DISCONNECT commands.
!
! ENVIRONMENT:  VAX/VMS Operating System
!
! AUTHOR:  Kathy Perko
!
! CREATION DATE:  6-Sept-1981
!
! MODIFIED BY:
!
!	V03-003 MKP0002		Kathy Perko	25-Oct-1981
!		Change single link disconnect so no node name
!		is required in the NICE command.
!
!	V03-002	MKP0001		Kathy Perko	18-Sept-1981
!		Fix NML$DISCKNOWN so that if a link goes away
!		between the read and the disconnect, no error
!		is returned to NCP.
!
!--


%SBTTL 'Declarations'

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    NML$DISCKNOWN	: NOVALUE,
    NML_GETLINKLIST,
    NML$DISCONNECT	: NOVALUE;

!
! INCLUDE FILES:
!

LIBRARY 'LIB$:NMLLIB.L32';
LIBRARY 'SHRLIB$:NMALIBRY.L32';
LIBRARY 'SHRLIB$:NET.L32';
LIBRARY 'SYS$LIBRARY:STARLET.L32';

!
! EXTERNAL REFERENCES:
!

$NML_EXTDEF;

EXTERNAL ROUTINE
    NML$BLDP2,
    NML$BLD_REPLY,
    NML$GETEXEADR,
    NML$NETQIO,
    NML$SEND,
    NML$ERROR_1;



OWN
	NML$T_P2BUFFER : VECTOR [NML$K_P2BUFLEN, BYTE],
	NML$AB_ENTITY_BUF : BBLOCK [20];

BIND
	NML$Q_P2BFDSC = UPLIT (NML$K_P2BUFLEN, NML$T_P2BUFFER) : DESCRIPTOR;



%SBTTL 'NML$DISCKNOWN  Disconnect known links'
GLOBAL ROUTINE NML$DISCKNOWN : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine disconnects all links with all nodes or all links
!	with a specified node.
!
!--

BEGIN

LOCAL
	NFB : REF BBLOCK,
	P2DSC	: DESCRIPTOR,
	STATUS,
	PTR,
	STRTFLG,
	LINK_CNT,		! Count of links returned by NETACP in
				!	P4 buffer.
	DISCONNECT_NML_LINK,	! Set if NML talking to NCP via a link.  This
				!	link must be disconnected last.
	STRDSC	: DESCRIPTOR,	! Descriptor of link for NICE response msg.
	MSGSIZE;		! Length of response message.

!
! NFB to disconnect a link.
!
$NFBDSC (DISC_LINK_NFBDSC, DELETE, , LLI
		,LLN			! Search key = Link number
		,NFB$C_WILDCARD
		);

!
! NFB to disconnect NML's link to NCP
!
$NFBDSC ( DISC_NML_LINK, DELETE, , LLI
		,PID			! Search key = NML's PID.
		,NFB$C_WILDCARD
		);

OWN
	NMLPID,
	GETLIST : BBLOCK [12]		! $GETJPI list to get NML's PID.
		INITIAL ( WORD (4,		! Buffer length
				JPI$_PID),	! Request PID
			  LONG (NMLPID,		! Address to receive PID
				0)),		! Don't need length.
	IOSB : $IOSB;

!
! Get PID for NML.  If NML is not running in the local node, it is
! talking to NCP via a logical link.  Therefore, it's link to NCP must
! be disconnected last.  Use the PID to tell which link is NML's
! link to NCP.
!
STATUS = $GETJPI (ITMLST = GETLIST,
		 IOSB = IOSB);
IF NOT .STATUS OR
   NOT .IOSB [IOS$W_STATUS] THEN
	! Signal an error.
	NML$ERROR_1 (NMA$C_STS_MPR);

DISCONNECT_NML_LINK = FALSE;
!
! Set up the link ID descriptor for the NICE response message.
! The link ID consists of a byte of 0 followed by a work of the
! link number.
!
STRDSC [DSC$W_LENGTH] = 3;
STRDSC [DSC$A_POINTER] = NML$AB_ENTITY_BUF;
NML$AB_ENTITY_BUF<0,8> = 0;
STRTFLG = FALSE;
!
! Get a list of links to disconnect from NETACP.
!
WHILE NML_GETLINKLIST (.STRTFLG, NML$GQ_QIOBFDSC, LINK_CNT) DO
	BEGIN
	STRTFLG = TRUE;
	PTR = .NML$GQ_QIOBFDSC [DSC$A_POINTER];
	WHILE (LINK_CNT = .LINK_CNT - 1) GEQ 0 DO
		BEGIN
		IF .NMLPID NEQ ..PTR THEN
			BEGIN
			PTR = .PTR + 4;
			NML$BLDP2 (0, ..PTR, -1, 0, NML$Q_P2BFDSC, P2DSC);
			!
			! Tell NETACP to disconnect the link.
			!
			STATUS = NML$NETQIO ( DISC_LINK_NFBDSC, P2DSC, 0, 0);
			!
			! Build response message for disconnected link.
			!
			IF .STATUS THEN
				BEGIN
				NML$AB_MSGBLOCK [MSB$L_FLAGS] = 0;
				NML$AB_MSGBLOCK [MSB$B_CODE] = NML$_STS_SUC;
				END;
			CH$MOVE (2, .PTR, .STRDSC [DSC$A_POINTER] + 1);
			!
			! If the link went away before it could be disconnected
			! don't build a response message for it.
			!
			IF .STATUS NEQ NML$_STS_CMP THEN
				BEGIN
				NML$AB_MSGBLOCK [MSB$V_ENTD_FLD] = 1;
				NML$AB_MSGBLOCK [MSB$A_ENTITY] = STRDSC;
				NML$BLD_REPLY (NML$AB_MSGBLOCK, MSGSIZE);
				NML$SEND (NML$AB_SNDBUFFER, .MSGSIZE);
				END;
			END
		ELSE
			BEGIN
			PTR = .PTR + 4;			! Skip PID
			DISCONNECT_NML_LINK = TRUE;	! Disconnect NML last.
			END;
		!
		! Advance pointer to next link in the buffer.
		!
		PTR = .PTR + 4;
		END;
	END;
!
! Disconnect NML's link to NCP last.
!
IF .DISCONNECT_NML_LINK THEN
	BEGIN
	NML$BLDP2 (0, .NMLPID, -1, 0, NML$Q_P2BFDSC, P2DSC);
	NML$NETQIO (DISC_NML_LINK, P2DSC, 0, NML$GQ_QIOBFDSC);
	!
	! No response message can be sent because the link to NCP was
	! just disconnected.
	!
	END;
END;			! of NML$DISC_KNOWN_LINKS

%SBTTL 'NML_GETLINKLIST   Get a list of links to disconnect'
ROUTINE NML_GETLINKLIST ( GET_STARTED, LISDSC, ENTRY_COUNT) =

!++
! FUNCTIONAL DESCRIPTION:
!	This routine gets a bufferfull of currently active logical links
!	from NETACP.  This bufferfull will be either known links or known
!	links on a specified node.  The routine can be iteratively called
!	to get more bufferfulls, until all links have been processed.
!
! INPUTS:
!	GET_STARTED	If false, this is the first call, so build
!			a new P2 buffer and start at the beginning
!			of the ACPs database.
!	LISDSC		Address at which to return descriptor address
!			of the P4 buffer (which is full of links and
!			their PIDs.
!	ENTRY_COUNT	Count of links in the P4 buffer.
!
! IMPLICIT INPUTS:
!	NML$GL_PRS_FLGS [NML$V_PRS_STR]	Set if links on a specified
!			node are to be returned.
!	NML$GQ_ENTSTRDSC	Descriptor for node name or number.
!
!--

BEGIN

$NFBDSC ( GET_KNOWN_LINKS, SHOW, NFB$M_KNO OR NFB$M_UPD, LLI
		,NFB$C_WILDCARD		! Search key = wildcard
		,NFB$C_COLLATE		! Start key = beginning
		,PID			! Return PID for link
		,LLN			! Return link number
		);

MAP
	GET_KNOWN_LINKS : DESCRIPTOR;

OWN
	P2_BUFFER : BBLOCK [NML$K_P2BUFLEN],
	P2DSC	  : DESCRIPTOR;

BIND
	P2_BUF_DSC = UPLIT ( NML$K_P2BUFLEN, P2_BUFFER) : DESCRIPTOR;

LOCAL
	NFB	: REF BBLOCK,
	SEARCH_KEY_LEN,
	SEARCH_KEY_VAL,
	P3,
	STATUS,
	MSGSIZE;

!
! The first time this routine is called, GET_STARTED should be false.
! If so, build a P2 buffer with a search key with the node id, or
! a wildcard search key.  The search key tells NETACP which links
! to return.
!
IF NOT .GET_STARTED THEN
	BEGIN
	NFB = .GET_KNOWN_LINKS [DSC$A_POINTER];
	IF .NML$GL_PRS_FLGS [NML$V_PRS_STR] THEN
		!
		! The NICE command was DISCONNECT KNOWN LINKS WITH 
		! NODE <node id>.
		!
		BEGIN
		SEARCH_KEY_LEN = .(.NML$GQ_ENTSTRDSC [DSC$A_POINTER])<0,8>;
		IF .SEARCH_KEY_LEN EQL 0 THEN
			!
			! Set the search key up to be the node address.
			!
			BEGIN
			NFB [NFB$L_SRCH_KEY] = NFB$C_LLI_PNA;
			SEARCH_KEY_VAL = .(.NML$GQ_ENTSTRDSC [DSC$A_POINTER])<8,16>;
			IF .SEARCH_KEY_VAL EQL 0 THEN
				NML$GETEXEADR (SEARCH_KEY_VAL);
			END
		ELSE
			!
			! Set the search key up to be the node name.
			!
			BEGIN
			NFB [NFB$L_SRCH_KEY] = NFB$C_LLI_PNN;
			SEARCH_KEY_VAL = .NML$GQ_ENTSTRDSC [DSC$A_POINTER] + 1;
			END;
		END
	ELSE
		!
		! The NICE command was a DISCONNECT KNOWN LINKS.
		!
		BEGIN
		SEARCH_KEY_LEN = -1;
		SEARCH_KEY_VAL = 0;
		END;
	NML$BLDP2 (.SEARCH_KEY_LEN, .SEARCH_KEY_VAL, -1, 0,
					P2_BUF_DSC, P2DSC);
	END;

STATUS = NML$NETQIO ( GET_KNOWN_LINKS, P2DSC, P3, .LISDSC);

IF NOT .STATUS AND (.STATUS NEQ NML$_STS_CMP) THEN
	BEGIN
	NML$BLD_REPLY (NML$AB_MSGBLOCK, MSGSIZE);
	$SIGNAL_MSG (NML$AB_SNDBUFFER, .MSGSIZE);
	END;

.ENTRY_COUNT = .(.P2DSC [DSC$A_POINTER]);
RETURN .STATUS;

END;	! of NML_GETLINKLIST

%SBTTL 'NML$DISCONNECT  Disconnect single link'
GLOBAL ROUTINE NML$DISCONNECT (PARAM, LINK) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine disconnects a sinlge link with the specified node.
!
! FORMAL PARAMETERS:
!
!	PARAM		Not used.
!	LINK		Word-sized link address.
!
! IMPLICIT INPUTS:
!
!	NML$GQ_ENTSTRDSC    Contains the node ID.
!
!--

BEGIN

MAP
	LINK : WORD;

$NFBDSC ( DISC_LINK_NFBDSC, DELETE, , LLI
		,LLN			! Search key = link number.
		,NFB$C_WILDCARD		! Null start  key.
		);

LOCAL
	STATUS,
	P2DSC,
	MSGSIZE;

!
! Build the P2 buffer to tell NETACP which link to disconnect.  Then,
! perform the disconnect.
!
NML$BLDP2 ( 0, .LINK, -1, 0, NML$Q_P2BFDSC, P2DSC);
IF NML$NETQIO (DISC_LINK_NFBDSC, P2DSC, 0, 0) THEN
    BEGIN
    NML$AB_MSGBLOCK [MSB$L_FLAGS] = 0;
    NML$AB_MSGBLOCK [MSB$B_CODE] = NMA$C_STS_SUC;
    END;
NML$BLD_REPLY (NML$AB_MSGBLOCK, MSGSIZE);
NML$SEND (NML$AB_SNDBUFFER, .MSGSIZE);

END;		! of  NML$DISCONNECT
	
END					! End of module

ELUDOM
