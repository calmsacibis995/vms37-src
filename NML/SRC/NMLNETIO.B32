%TITLE 'NML Network I/O module'
MODULE NML$NETIO (
		LANGUAGE (BLISS32),
		ADDRESSING_MODE (NONEXTERNAL=LONG_RELATIVE),
		ADDRESSING_MODE (EXTERNAL=LONG_RELATIVE),
		IDENT = 'V03-000'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY:  DECnet-VAX V2.0 Network Management Listener
!
!
! ABSTRACT:
!
!	This module contains routines to handle all network I/O
!	with NCP and NETACP (NETDRIVER).
!
! ENVIRONMENT:  VAX/VMS Operating System
!
! AUTHOR:  Distributed Systems Software Engineering
!
! CREATION DATE:  2-Oct-1979
!
! MODIFIED BY:
!
!	V03-006	MKP0004		Kathy Perko		10-Jan-1982
!		Add SS$_NOLICENSE as a completion code for QIOs to NETACP.
!		Add a parameter to NML$DEBUG_QIO to put a header in
!		the debug log to identify what kind of QIO is being logged.
!
!	V03-005	MKP0003		Kathy Perko		05-Dec-1981
!		Add NICE return of Component in Wrong State when
!		NETACP returns Device Inactive (if circuit is turned
!		on when line is off).
!
!	V03-004	MKP0002		Kathy Perko		23-NOV-1981
!		Add NICE return of Invalid Identifiaction Format when
!		NETACP returns Invalid Device Name.
!
!	V03-003	MKP0001		Kathy Perko		11-Sept-1981
!		Add ACP link database as a separate data base.
!
!	V002	LMK0001		Len Kawell		24-Jul-1981
!		Remove QIOSET and QIOCLEAR and other mofifications for
!		new ACP control QIO.
!
!	V001	TMH0001		Tim Halvorsen		20-Jul-1981
!		Move SEND and RECEIVE routines to NMLENTRY and NMLMAIN
!		respectively.
!--


%SBTTL 'Declarations'

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    NML$NETQIO,
    NML_MAPQIOERROR,
    NML_MAPENTITY,
    NML_MAPPARAMID;

!
! INCLUDE FILES:
!

LIBRARY 'LIB$:NMLLIB';			! Facility-wide definitions
LIBRARY 'SHRLIB$:NMALIBRY';		! NICE definitions
LIBRARY 'SHRLIB$:NET';			! NETACP QIO interface
LIBRARY 'SYS$LIBRARY:STARLET';		! VMS common definitions

!
! OWN STORAGE:
!

!
! EXTERNAL REFERENCES:
!

$NML_EXTDEF;

EXTERNAL
    NML$GQ_PLIMAPDES,
    NML$GQ_EFIMAPDES,
    NML$GQ_ESIMAPDES,
    NML$GQ_LNIMAPDES,
    NML$GQ_NDIMAPDES,
    NML$GQ_OBIMAPDES,
    NML$GQ_CRIMAPDES,
    NML$GQ_LLIMAPDES;

EXTERNAL ROUTINE
    NML$DEBUG_QIO;


%SBTTL 'NML$NETQIO  General network QIO routine'
GLOBAL ROUTINE NML$NETQIO (NFBDSC, P2, P3, BUFDSC) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine issues QIO function requests to NETACP to perform
!	volatile data base operations.
!
! FORMAL PARAMETERS:
!
!	NFBDSC		Descriptor of NFB data.
!	P2		Descriptor of P2 data.
!	P3		Address of word to contain resulting length.
!	BUFDSC		Descriptor of data buffer
!
! IMPLICIT INPUTS:
!
!	NML$GW_ACP_CHAN	Channel assigned to the command process link.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	This routine returns an NML status code that has been mapped from
!	the QIO status code.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	NFBDSC : REF DESCRIPTOR,
	BUFDSC : REF DESCRIPTOR;

    LOCAL
	IOSB     : $IOSB,			! I/O status block
	DATABASE,				! Database ID
	STATUS;					! Temporary return status
!
! Save the database ID (it may get overwritten?)
!
    DATABASE = .BBLOCK [.NFBDSC [DSC$A_POINTER], NFB$B_DATABASE];
!
! Issue the QIO.
!
    STATUS = $QIOW (CHAN = .NML$GW_ACP_CHAN,	! Channel
		    FUNC = IO$_ACPCONTROL,	! Function
		    IOSB = IOSB,		! I/O status block
		    P1   = .NFBDSC,		! P1 descriptor (NFB)
		    P2   = .P2,			! P2 descriptor (component id)
		    P3   = .P3,			! Address for resulting length
		    P4   = .BUFDSC);		! P4 (data buffer) descriptor
!
! Restore the database ID.
!
    BBLOCK [.NFBDSC [DSC$A_POINTER], NFB$B_DATABASE] = .DATABASE;
!
! Log the QIO function.
!
    NML$DEBUG_QIO (DBG$C_ACPQIO,		! Log type code
		   .STATUS,			! QIO status value
		   IOSB,			! Address of I/O status block
		   .NFBDSC,			! NFB descriptor
		   .P2,				! P2 descriptor
		   .P3,				! Address of P3 word
		   .BUFDSC,			! Data buffer descriptor
		   $ASCID('SET, SHOW, or CLEAR NETACPs database'));
!
! Map the operation status into an NML code.
!
    STATUS = NML_MAPQIOERROR (.DATABASE, .STATUS, IOSB);
!
! Return the mapped status code.
!
    RETURN .STATUS

    END;					! End of NML$NETQIO

%SBTTL 'NML_MAPQIOERROR  Map QIO error to NML error'
ROUTINE NML_MAPQIOERROR (DATABASE, QIOSTATUS, IOSB) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine translates QIO errors into network management
!	errors and makes the appropriate entries in the message
!	block.
!
! FORMAL PARAMETERS:
!
!	DATABASE	Database ID
!	QIOSTATUS	QIO status return.
!	IOSB		Address of I/O status block.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NML$AB_MSGBLOCK contains the appropriate error code and detail
!	if applicable.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	The return status is the NML error that corresponds to the QIO error.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	IOSB : REF $IOSB;

    LOCAL
	CODE   : BYTE,			! NICE status code
	DETAIL : WORD,			! NICE detail code
	FLAGS,				! Message flags
	STATUS,				! Return status
	TEXT;				! Optional text code
!
! Set up the default message information.
!
    CODE = NMA$C_STS_MPR;		! Management program error
    DETAIL = -1;			! No detail
    FLAGS = MSB$M_DET_FLD;		! Detail flag
!
! Check the QIO status and the I/O status block.
!
    IF NOT .QIOSTATUS
    THEN
	BEGIN
!
! The QIO was in error.  This indicates a program or a system error.
!
	TEXT = .QIOSTATUS;		! Use system message as optional text
	FLAGS = .FLAGS OR		! Default flags
		MSB$M_MSG_FLD OR	!  and optional text
		MSB$M_SYSM_FLD;		!  and system text
	STATUS = NML$_STS_MPR;		! Return status

	END
    ELSE
	BEGIN
!
! The QIO status was successful so check the I/O status block.
! If it indicates success the just return.  Otherwise, attempt to map
! the error code to an NML error code.
!
	IF .IOSB [IOS$W_STATUS]
	THEN
	    RETURN NML$_STS_SUC;

	SELECTONE .IOSB [IOS$W_STATUS] OF
	    SET

	    [SS$_BUFFEROVF]:			! Buffer is full
		BEGIN
!
! This is a special error code.  If all of the components for a plural SHOW
! function will not fit in a single buffer then this code is returned to
! indicate that more components remain.  The code returned when the end of
! the component list has been reached is SS$_ENDOFFILE.
!
		STATUS = NML$_STS_SUC;

		END;

	    [SS$_INSFARG]:			! Missing parameter
		BEGIN

		CODE = NMA$C_STS_PMS;
		DETAIL = NML_MAPPARAMID (.DATABASE, .IOSB [IOS$L_INFO]);
		STATUS = NML$_STS_PMS;

		END;

	    [SS$_BADPARAM,			! Parameter value error
	     SS$_DEVACTIVE]:
		BEGIN

		CODE = NMA$C_STS_PVA;
		DETAIL = NML_MAPPARAMID (.DATABASE, .IOSB [IOS$L_INFO]);
		STATUS = NML$_STS_PVA;

		END;

	    [SS$_WRITLCK]:			! Component in wrong state
		BEGIN

		CODE = NMA$C_STS_STA;
		DETAIL = NML_MAPENTITY (.DATABASE);
		STATUS = NML$_STS_STA;

		END;

	    [SS$_INSFMEM]:			! No room for new entry
		BEGIN

		CODE = NMA$C_STS_ROO;
		STATUS = NML$_STS_ROO;

		END;

	    [SS$_ENDOFFILE]:			! Unrecognized component
		BEGIN

		CODE = NMA$C_STS_CMP;
		DETAIL = NML_MAPENTITY (.DATABASE);
		STATUS = NML$_STS_CMP;

		END;

	    [SS$_NOPRIV]:			! Privilege violation
		BEGIN

		CODE = NMA$C_STS_PRI;
		STATUS = NML$_STS_PRI;

		END;

	    [SS$_NOSUCHDEV]:			! No such device
		BEGIN

		CODE = NMA$C_STS_CMP;
		DETAIL = NML_MAPENTITY (.DATABASE);
		TEXT = .IOSB [IOS$W_STATUS];
		FLAGS = .FLAGS OR MSB$M_MSG_FLD OR MSB$M_SYSM_FLD;
		STATUS = NML$_STS_CMP;

		END;

	    [SS$_NOSUCHNODE]:			! No such node
		BEGIN
!
! This parameter only applies to SHOW and DISCONNECT LINK comands.
!
		CODE = NMA$C_STS_CMP;
		DETAIL = NMA$C_ENT_NOD;
		TEXT = .IOSB [IOS$W_STATUS];
		FLAGS = .FLAGS OR MSB$M_MSG_FLD OR MSB$M_SYSM_FLD;
		STATUS = NML$_STS_CMP;

		END;

	    [SS$_DEVINACT]:			! Device inactive
		BEGIN
		CODE = NMA$C_STS_STA;
		DETAIL = NML_MAPPARAMID (.DATABASE, .IOSB [IOS$L_INFO]);
		TEXT = .IOSB [IOS$W_STATUS];
		FLAGS = .FLAGS OR MSB$M_MSG_FLD OR MSB$M_SYSM_FLD;
		STATUS = NML$_STS_STA;
		END;		
		
	    [SS$_IVDEVNAM]:			! Invalid device name.
		BEGIN
		CODE = NMA$C_STS_IDE;
		DETAIL = NML_MAPENTITY (.DATABASE);
		TEXT = .IOSB [IOS$W_STATUS];
		FLAGS = .FLAGS OR MSB$M_MSG_FLD OR MSB$M_SYSM_FLD;
		STATUS = NML$_STS_IDE;
		END;

	    [SS$_NOLICENSE]:			! Customer doesn't have a
						!	DECnet licence.
		BEGIN
		CODE = NMA$C_STS_OPE;
		TEXT = .IOSB [IOS$W_STATUS];
		FLAGS = .FLAGS OR MSB$M_MSG_FLD OR MSB$M_SYSM_FLD;
		STATUS = NML$_STS_OPE;
		END;

	    [OTHERWISE]:			! Operation failure
		BEGIN
		CODE = NMA$C_STS_OPE;
		DETAIL = .IOSB [IOS$L_INFO];
		TEXT = .IOSB [IOS$W_STATUS];
		FLAGS = .FLAGS OR
			MSB$M_MSG_FLD OR
			MSB$M_SYSM_FLD;
		STATUS = NML$_STS_OPE;
		END;

	    TES;
	END;
!
! Set up the message information.
!
    NML$AB_MSGBLOCK [MSB$L_FLAGS]  = .FLAGS;
    NML$AB_MSGBLOCK [MSB$B_CODE]   = .CODE;
    NML$AB_MSGBLOCK [MSB$W_DETAIL] = .DETAIL;
    NML$AB_MSGBLOCK [MSB$L_TEXT]   = .TEXT;
!
! Return the mapped status.
!
    RETURN .STATUS

    END;					! End of NML_MAPQIOERROR

%SBTTL 'NML_MAPENTITY  Map NETACP database ID into entity type'
ROUTINE NML_MAPENTITY (DATABASE) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine translates the QIO database ID into a network
!	management entity detail code.
!
! INPUTS:
!
!	DATABASE	NETACP database ID
!
! OUTPUTS:
!
!	The return value is the detail code.
!--

    BEGIN

    LOCAL
	DETAIL : WORD;

    DETAIL = (
	SELECTONE .DATABASE OF
	    SET

	    [NFB$C_DB_PLI]: NMA$C_ENT_LIN;

	    [NFB$C_DB_EFI,
	     NFB$C_DB_ESI]: NMA$C_ENT_LOG;

	    [NFB$C_DB_LNI,
	     NFB$C_DB_NDI]: NMA$C_ENT_NOD;

	    [NFB$C_DB_OBI]: NMA$C_SENT_OBJ;

	    [NFB$C_DB_CRI]: NMA$C_ENT_CIR;

	    [NFB$C_DB_LLI]: NMA$C_SENT_LNK;

	    [OTHERWISE]:    -1;

	    TES);

    RETURN .DETAIL

    END;					! End of NML_MAPENTITY

%SBTTL 'NML_MAPPARAMID  Map QIO parameter ID into management code'
ROUTINE NML_MAPPARAMID (DATABASE, PRMID) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine translates the QIO parameter ID code into network
!	management parameter detail code.
!
! INPUTS:
!
!	DATABASE	NETACP database ID
!	PRMID		NETACP parameter ID
!
! OUTPUTS:
!
!	The return value is the detail code.
!--

    BEGIN

    LOCAL
	I,
	INDEX;

    BIND
	TABDSC = (
	    SELECTONE .DATABASE OF
		SET

		[NFB$C_DB_PLI]: NML$GQ_PLIMAPDES;

		[NFB$C_DB_EFI]: NML$GQ_EFIMAPDES;

		[NFB$C_DB_ESI]: NML$GQ_ESIMAPDES;

		[NFB$C_DB_LNI]: NML$GQ_LNIMAPDES;

		[NFB$C_DB_NDI]: NML$GQ_NDIMAPDES;

		[NFB$C_DB_OBI]: NML$GQ_OBIMAPDES;

		[NFB$C_DB_CRI]: NML$GQ_CRIMAPDES;

		[NFB$C_DB_LLI]: NML$GQ_LLIMAPDES;

		[OTHERWISE]: $ASCID (0, 0);

		TES) : DESCRIPTOR;

    BIND
	TABLE = TABDSC [DSC$A_POINTER] : REF BBLOCKVECTOR [, 6];

    INCR I FROM 0 TO .TABDSC [DSC$W_LENGTH] - 1 DO
	BEGIN

	IF .PRMID EQLU .TABLE [.I, 0,0,32,0]
	THEN
	    BEGIN

	    INDEX = .TABLE [.I, 4,0,16,0];
	    RETURN .NML$AB_PRMSEM [.INDEX, PST$W_DATAID];

	    END;
	END;

    RETURN -1

    END;					! End of NML_MAPPARAMID

END						! End of module

ELUDOM
