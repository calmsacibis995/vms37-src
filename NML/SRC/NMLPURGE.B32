%TITLE 'NML PURGE permanent parameter module'
MODULE NML$PURGE (
		LANGUAGE (BLISS32),
		ADDRESSING_MODE (NONEXTERNAL=LONG_RELATIVE),
		ADDRESSING_MODE (EXTERNAL=LONG_RELATIVE),
		IDENT = 'V03-000'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  DECnet-VAX V2.0 Network Management Listener
!
! ABSTRACT:
!
!	This module contains routines for processing NCP PURGE commands.
!
! ENVIRONMENT:  VAX/VMS Operating System
!
! AUTHOR:  Distributed Systems Software Engineering
!
! CREATION DATE:  30-DEC-1979
!
! MODIFIED BY:
!
!--


%SBTTL 'Declarations'

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    NML$PURGEKNOWN	: NOVALUE,
    NML_PURKNOWN	: NOVALUE,
    NML$PURENTITY	: NOVALUE,
    NML$PURLOGGING	: NOVALUE,
    NML_PURENTITY	: NOVALUE,
    NML_PURLOGGING	: NOVALUE,
    NML_PURLOGALL;

!
! INCLUDE FILES:
!

LIBRARY 'LIB$:NMLLIB.L32';
LIBRARY 'SHRLIB$:NMALIBRY.L32';
LIBRARY 'SYS$LIBRARY:STARLET.L32';

!
! EQUATED SYMBOLS:
!

LITERAL
    NML$K_ENTBUFLEN = 32;		! Length of entity buffer
!
! Data base entity matching function codes.
!
LITERAL
    NML$C_ALWAYS  = 0,			! Always match
    NML$C_MATCH   = 1,			! Match if parameter is present
    NML$C_NOMATCH = 2;			! Match if parameter is not present

!
! OWN STORAGE:
!

!
! Event logging parameter buffer.
!
OWN
    NML$T_EVTBUFFER : VECTOR [NML$K_RECBFLEN, BYTE];
BIND
    NML$Q_EVTBFDSC = UPLIT (NML$K_RECBFLEN, NML$T_EVTBUFFER) : DESCRIPTOR;
!
! Entity buffer and descriptor.
!
OWN
    NML$T_ENTBUFFER : BBLOCK [NML$K_ENTBUFLEN],
    NML$Q_ENTBFDSC  : DESCRIPTOR;

!
! EXTERNAL REFERENCES:
!

$NML_EXTDEF;

EXTERNAL LITERAL
    NML$_RECDELET;

EXTERNAL ROUTINE
    NMA$SEARCHFLD,
    NML$ADDEVENTS,
    NML$MATCHRECORD,
    NML$READRECORD,
    NML$ADDFILTERS,
    NML$BLD_REPLY,
    NML$DEL_FIELDS,
    NML$DELETRECORD,
    NML$GETNXTSNK,
    NML$GETRECOWNER,
    NML$REMSRC,
    NML$SAVEVENTS,
    NML$SEND,
    NML$WRITERECORD;


%SBTTL 'NML$PURGEKNOWN  Purge parameters for known entities'
GLOBAL ROUTINE NML$PURGEKNOWN (ENT, DUM1, DUM2) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine removes the a set of parameters from the permanent
!	data base entry for each entity of the specified type.
!
! FORMAL PARAMETERS:
!
!	ENT		Entity type code.
!	DUM1		Not used.
!	DUM2		Not used.
!
! IMPLICIT INPUTS:
!
!	NML$GL_PRS_FLGS Message parsing flags.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Signals errors.
!
!--

    BEGIN

    LOCAL
	DELETEFLG,			! Record delete flag
	FID,				! File id code
	MATCHFLG,			! Record matching flag
	PRM;				! Parameter code

    FID = .NML$AB_ENTITYDATA [.ENT, EIT$B_FILEID];
    MATCHFLG = NML$C_ALWAYS;

    IF .NML$GL_PRS_FLGS [NML$V_PRS_ALL]
    THEN
	DELETEFLG = TRUE
    ELSE
	DELETEFLG = FALSE;

    SELECTONEU .FID OF
	SET

	[NMA$C_OPN_NODE]:
	    BEGIN

	    IF NOT .NML$GL_PRS_FLGS [NML$V_PRS_ALL]
	    THEN
		BEGIN

		PRM = NMA$C_PCNO_NLI;

		IF .NML$GL_PRS_FLGS [NML$V_PRS_LOOPG]
		THEN
		    BEGIN

		    MATCHFLG = NML$C_MATCH;
		    DELETEFLG = TRUE;

		    END
		ELSE
		    MATCHFLG = NML$C_NOMATCH;

		END;

	    NML_PURKNOWN (.FID, .ENT, .MATCHFLG, .DELETEFLG, .PRM);

	    END;

	[NMA$C_OPN_LOG]:
	    BEGIN
!
! Purge parameters for all sinks.
!
	    NML$PURLOGGING (.ENT, NMA$C_SNK_CON, 0); ! Console
	    NML$PURLOGGING (.ENT, NMA$C_SNK_FIL, 0); ! File
	    NML$PURLOGGING (.ENT, NMA$C_SNK_MON, 0); ! Monitor

	    END;

	[OTHERWISE]:
	    BEGIN

	    NML_PURKNOWN (.FID, .ENT, .MATCHFLG, .DELETEFLG, .PRM);

	    END;
	TES;

    END;				! End of NML$PURGEKNOWN


%SBTTL 'NML_PURKNOWN  Purge parameters for known entities'
ROUTINE NML_PURKNOWN (FID, ENT, MAT, DEL, PRM) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine deletes permanent data base information for all
!	of each record that it matches.
!
! FORMAL PARAMETERS:
!
!	FID		File id code.
!	ENT		Entity type code.
!	MAT		Qualifier flag (match, nomatch, always).
!	DEL		Delete flag (TRUE=yes, FALSE=no).
!	PRM		Parameter code (if applicable).
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Signals errors.
!
!--

    BEGIN

    LOCAL
	FLDADR,
	FLDSIZE,
	MSGSIZE,			! Message size
	KEY     : WORD,			! Temporary record key buffer
	RECDSC  : DESCRIPTOR,		! Record descriptor
	STATUS;
!
! Add parameters to every record in the file.
!
    KEY = 0;
    WHILE NML$READRECORD (.FID, KEY, NML$GQ_RECBFDSC, RECDSC) DO
	BEGIN

	STATUS = TRUE;
	FLDADR = 0;
	FLDSIZE = 0;

	SELECTONEU .MAT OF
	    SET
	    [NML$C_MATCH]:

		IF NOT NMA$SEARCHFLD (RECDSC, .PRM, FLDSIZE, FLDADR)
		THEN
		    STATUS = FALSE;

	    [NML$C_NOMATCH]:

		IF NMA$SEARCHFLD (RECDSC, .PRM, FLDSIZE, FLDADR)
		THEN
		    STATUS = FALSE;

	    TES;

	IF .STATUS
	THEN
	    BEGIN

	    NML_PURENTITY (.ENT, .DEL, RECDSC, KEY);
!
! Build and send the response message.
!
	    NML$BLD_REPLY (NML$AB_MSGBLOCK, MSGSIZE);
	    NML$SEND (NML$AB_SNDBUFFER, .MSGSIZE);

	    END;

	KEY = .KEY + 1;			! Increment record key

	END;
    END;				! End of NML_PURKNOWN


%SBTTL 'NML$PURLOGGING  Purge logging parameters'
GLOBAL ROUTINE NML$PURLOGGING (ENT, SNK, DUM2) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Add parameters to the permanent data base entry for the specified
!	logging entity.
!
! FORMAL PARAMETERS:
!
!	ENT		Entity type code.
!	SNK		Logging sink type.
!	DUM2		Not used.
!
! IMPLICIT INPUTS:
!
!	NML$GL_PRS_FLGS	Message parsing flags.
!	NML$GW_EVTSNKADR Sink node address.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	FID,				! File id code
	MSGFLG,				! Response message flag
	MSGSIZE,			! Message size
	KEY     : WORD,			! Temporary record key buffer
	OWNER,				! Search key
	RECDSC  : DESCRIPTOR;		! Record descriptor

!
! If this is the event sink (ESI) parameter group then call the normal
! routine.
!
    IF .NML$GL_PRS_FLGS [NML$V_PRS_ESIPG]
    THEN
	BEGIN

	NML$PURENTITY (NML$C_SINK, 1, SNK);
	RETURN

	END;
!
! The event filter parameter group is handled specially.
!
    NML$AB_MSGBLOCK [MSB$L_FLAGS] = 0;		   ! Initialize message flags
    FID = .NML$AB_ENTITYDATA [.ENT, EIT$B_FILEID]; ! Get file id
    OWNER = .NML$AB_ENTITYDATA [.ENT, EIT$W_KEY];  ! Get search key
    KEY = 0;					   ! Initialize record key
!
! If this is all (no parameters) then purge the sink information.
!
    IF .NML$GL_PRS_FLGS [NML$V_PRS_ALL]
    THEN
	BEGIN

	MSGFLG = NML_PURLOGALL (.SNK);

	END
    ELSE
	BEGIN

	IF NML$MATCHRECORD (.FID,
			    NML$GQ_RECBFDSC,
			    KEY,
			    .OWNER,
			    2,
			    NML$GW_EVTSNKADR,
			    RECDSC)
	THEN
	    BEGIN

	    NML_PURLOGGING (.SNK, .NML$GW_EVTSNKADR, RECDSC, KEY);
	    MSGFLG = TRUE;

	    END;
	END;
!
! Add entity id (sink type code) to entity buffer.
!
    NML$Q_ENTBFDSC [DSC$W_LENGTH] = 1;
    NML$Q_ENTBFDSC [DSC$A_POINTER] = NML$T_ENTBUFFER;
    NML$T_ENTBUFFER<0,8> = .SNK;
!
! Set up message information.
!
    NML$AB_MSGBLOCK [MSB$V_ENTD_FLD] = 1; ! Set entity descriptor flag
    NML$AB_MSGBLOCK [MSB$A_ENTITY] = NML$Q_ENTBFDSC; ! Add entity descriptor pointer
!
! Build and send the response message.
!
    IF .MSGFLG
    THEN
	BEGIN

	NML$BLD_REPLY (NML$AB_MSGBLOCK, MSGSIZE);
	NML$SEND (NML$AB_SNDBUFFER, .MSGSIZE);

	END;

    END;				! End of NML$PURLOGGING

%SBTTL 'NML$PURENTITY  Delete entity parameters'
GLOBAL ROUTINE NML$PURENTITY (ENT, LEN, ADR) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine removes a set of parameters from the permanent data 
!	base entry for the specified entity.
!
! FORMAL PARAMETERS:
!
!	ENT		Entity type code.
!	LEN		Byte count of entity id string.
!	ADR		Address of entity id string.
!
! IMPLICIT INPUTS:
!
!	NML$GL_PRS_FLGS	Message parsing flags.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Signals errors.
!
!--

    BEGIN

    LOCAL
	DELETEFLG,
	FID,				! File id code
	MSGSIZE,			! Message size
	KEY       : WORD,		! Temporary record key buffer
	OWNER,				! Search key
	RECDSC    : DESCRIPTOR;		! Record descriptor
!
! Set the flag to indicate record deletion (or not).
!
    IF .NML$GL_PRS_FLGS [NML$V_PRS_ALL]
    THEN
	DELETEFLG = TRUE
    ELSE
	BEGIN

	IF .NML$GL_PRS_FLGS [NML$V_PRS_LOOPG]
	THEN
	    DELETEFLG = TRUE
	ELSE
	    DELETEFLG = FALSE;

	END;
!
! Add parameters to the entity record in the file.
!
    FID = .NML$AB_ENTITYDATA [.ENT, EIT$B_FILEID]; ! Get file id
    OWNER = .NML$AB_ENTITYDATA [.ENT, EIT$W_KEY]; ! Get search key
!
! Find the record in the file.
!
    KEY = 0;
    IF NML$MATCHRECORD (.FID,
			NML$GQ_RECBFDSC,
			KEY,
			.OWNER,
			.LEN,
			.ADR,
			RECDSC)
    THEN
	NML_PURENTITY (.ENT, .DELETEFLG, RECDSC, KEY)
    ELSE
	BEGIN
!
! No such entity found in data base.
!
	NML$AB_MSGBLOCK [MSB$L_FLAGS] = MSB$M_DET_FLD; ! Message detail only
	NML$AB_MSGBLOCK [MSB$B_CODE] = NMA$C_STS_CMP;  ! Add error code
	NML$AB_MSGBLOCK [MSB$W_DETAIL] =
	    .NML$AB_ENTITYDATA [.ENT, EIT$W_DETAIL];

	END;
!
! Build and send the response message.
!
    NML$BLD_REPLY (NML$AB_MSGBLOCK, MSGSIZE);
    NML$SEND (NML$AB_SNDBUFFER, .MSGSIZE);

    END;				! End of NML$PURENTITY

%SBTTL 'NML_PURENTITY  Purge entity parameters'
ROUTINE NML_PURENTITY (ENT, DEL, RECDSC, KEY) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine removes permanent data base parameters for the specified
!	line.
!
! FORMAL PARAMETERS:
!
!	ENT		Entity type code.
!	DEL		Record delete flag (TRUE=yes, FALSE=no).
!	RECDSC		Address of current record descriptor.
!	KEY		Current record key.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	RECDSC : REF DESCRIPTOR;	! Record descriptor

    LOCAL
	FID;				! File id code

    FID = .NML$AB_ENTITYDATA [.ENT, EIT$B_FILEID]; ! Get file id
    NML$AB_MSGBLOCK [MSB$L_FLAGS] = 0;
    NML$AB_MSGBLOCK [MSB$B_CODE] = NMA$C_STS_SUC;
!
! Delete parameters.  If none specified then delete record.
!
    IF NOT .DEL
    THEN
	BEGIN
!
! Fields deleted, write the record back to file.
!
	NML$DEL_FIELDS (.RECDSC);
	NML$WRITERECORD (.FID, .KEY, .RECDSC);

	END
    ELSE
	BEGIN
!
! Delete the record.
!
	NML$DELETRECORD (.FID, .KEY);
	NML$AB_MSGBLOCK [MSB$L_FLAGS] = MSB$M_MSG_FLD;
	NML$AB_MSGBLOCK [MSB$L_TEXT] = NML$_RECDELET;

	END;
!
! Add entity id to message descriptor.
!
    NML$Q_ENTBFDSC [DSC$W_LENGTH] = NML$K_ENTBUFLEN;
    NML$Q_ENTBFDSC [DSC$A_POINTER] = NML$T_ENTBUFFER;

    NML$GETRECOWNER (.RECDSC,
		     .ENT,
		     NML$Q_ENTBFDSC,
		     NML$Q_ENTBFDSC [DSC$W_LENGTH]);

    NML$AB_MSGBLOCK [MSB$V_ENTD_FLD] = 1; ! Set entity descriptor flag
    NML$AB_MSGBLOCK [MSB$A_ENTITY] = NML$Q_ENTBFDSC; ! Add entity descriptor pointer

    END;				! End of NML_PURENTITY

%SBTTL 'NML_PURLOGGING  Purge logging parameters'
ROUTINE NML_PURLOGGING (SNK, SNKADR, RECDSC, KEY) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine performs common purge functions for both singular
!	and plural requests.
!
! FORMAL PARAMETERS:
!
!	SNK		Logging sink type.
!	SNKADR		Sink node address.
!	RECDSC		Address of current record descriptor.
!	KEY		Address of word containing current record key.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	SNKADR : WORD,
	RECDSC : REF DESCRIPTOR;

    LOCAL
	FID,				! File id code
	FLDSIZE,
	FLDADR,
	STATUS,
	UPDFLG;				! Data base update flag

    FID = .NML$AB_ENTITYDATA [NML$C_LOGGING, EIT$B_FILEID]; ! Get file id
!
! Add event flags.
!
    IF NOT NML$ADDEVENTS (FALSE, .RECDSC, .SNK, .SNKADR, UPDFLG)
    THEN
	RETURN;
!
! If the events parameter valid then write the record back to the file.
! Otherwise, delete the record.
!
    IF .UPDFLG
    THEN
	NML$WRITERECORD (.FID,
			 .KEY,
			 .RECDSC)	! Write the record
    ELSE
	NML$DELETRECORD (.FID, .KEY);	! Delete the record

    NML$AB_MSGBLOCK [MSB$B_CODE] = NMA$C_STS_SUC;

    END;				! End of NML_PURLOGGING

%SBTTL 'NML_PURLOGALL  Purge logging sink parameters'
ROUTINE NML_PURLOGALL (SNK) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine performs common purge functions for both singular
!	and plural requests.
!
! FORMAL PARAMETERS:
!
!	SNK		Sink type code.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	TRUE is returned if any operations have been performed indicating
!	that a status message should be sent.  If no operations were 
!	performed then no data for the specified sink type was found so
!	no status message should be sent.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	FID,				! File id code
	FLDSIZE,
	FLDADR,
	KEY     : WORD,			! Record key
	MSGFLG  : BYTE,			! Response message flag
	OWNER,				! Search key
	PRMDSC  : DESCRIPTOR,
	RECDSC  : DESCRIPTOR,
	SRCPTR,				! Pointer to source block
	STATUS;

!
! Purge the logging sink data.
!
    MSGFLG = FALSE;			! No response messages
    FID = .NML$AB_ENTITYDATA [NML$C_SINK, EIT$B_FILEID]; ! Get file id
    OWNER = .NML$AB_ENTITYDATA [NML$C_SINK, EIT$W_KEY]; ! Get search key
    KEY = 0;				! Initialize record key
!
! Find the record in the file.
!
    IF NML$MATCHRECORD (.FID, NML$GQ_RECBFDSC, KEY, .OWNER, 1, SNK, RECDSC)
    THEN
	BEGIN

	MSGFLG = TRUE;			! Set response message flag
	NML_PURENTITY (NML$C_SINK, TRUE, RECDSC, KEY);

	END;
!
! Purge the logging filter data.
!
    FID = .NML$AB_ENTITYDATA [NML$C_LOGGING, EIT$B_FILEID]; ! Get file id
    OWNER = .NML$AB_ENTITYDATA [NML$C_LOGGING, EIT$W_KEY]; ! Get search key
    KEY = 0;

    WHILE NML$MATCHRECORD (.FID,
			   NML$GQ_RECBFDSC,
			   KEY,
			   .OWNER,
			   0,
			   0,
			   RECDSC) DO
	BEGIN
!
! Find event parameter in record.
!
	FLDADR = 0;
	STATUS = NMA$SEARCHFLD (RECDSC,
				NMA$C_PCLO_EVE,
				FLDSIZE,
				FLDADR);
	IF .STATUS
	THEN
	    BEGIN

	    CH$MOVE (.FLDSIZE, .FLDADR, .NML$Q_EVTBFDSC [DSC$A_POINTER]);
	    PRMDSC [DSC$W_LENGTH] = .FLDSIZE;
	    PRMDSC [DSC$A_POINTER] = .NML$Q_EVTBFDSC [DSC$A_POINTER];

	    END
	ELSE
	    BEGIN

	    PRMDSC [DSC$W_LENGTH] = 0;
	    PRMDSC [DSC$A_POINTER] = .NML$Q_EVTBFDSC [DSC$A_POINTER];

	    END;
!
! Clear event filters.
!
	SRCPTR = 0;
	WHILE NML$GETNXTSNK (PRMDSC, .SNK, SRCPTR) DO
	    BEGIN

	    MSGFLG = TRUE;		! Set response message flag
	    NML$REMSRC (PRMDSC, .SRCPTR);

	    END;

	IF .MSGFLG
	THEN
	    BEGIN

	    IF NOT NML$SAVEVENTS (NML$GQ_RECBFDSC,
				  .PRMDSC [DSC$W_LENGTH],
				  .PRMDSC [DSC$A_POINTER],
				  RECDSC)
	    THEN
		EXITLOOP;
!
! If source was cleared successfully and there are still filters
! remaining for this sink node then write the record back to file.
!
	    IF .PRMDSC [DSC$W_LENGTH] EQLU 0
	    THEN
		NML$DELETRECORD (.FID, KEY)
	    ELSE
	        NML$WRITERECORD (.FID, KEY, RECDSC);

	    NML$AB_MSGBLOCK [MSB$B_CODE] = NMA$C_STS_SUC;

	    END;

	KEY = .KEY + 1;

	END;

    RETURN .MSGFLG

    END;				! End of NML_PURLOGALL

END					! End of module

ELUDOM
