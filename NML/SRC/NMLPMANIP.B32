%TITLE 'NML internal parameter manipulation module'
MODULE NML$PMANIP (
		LANGUAGE (BLISS32),
		ADDRESSING_MODE (NONEXTERNAL=LONG_RELATIVE),
		ADDRESSING_MODE (EXTERNAL=LONG_RELATIVE),
		IDENT = 'V03-000'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!
! ABSTRACT:
!
!	This module contains routines to handle internal parameter
!	manipulation functions.
!
! ENVIRONMENT:  VAX/VMS Operating System
!
! AUTHOR:  Distributed Systems Software Engineering
!
! CREATION DATE:  23-JAN-1980
!
! MODIFIED BY:
!
!	V03-001	LMK0001		Len Kawell		21-Jul-1981
!		Modifications for new NETACP control QIO.
!--


%SBTTL 'Declarations'

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    NML$SAVEPARAM,
    NML$CHKPRMVAL,
    NML$BLDSETQBF	: NOVALUE,
    NML$DEL_FIELDS,
    NML$ADD_FIELDS,
    NML$READPARLIST,
    NML$SHOWPARLIST,
    NML$BLDALLDES;

!
! INCLUDE FILES:
!

LIBRARY 'LIB$:NMLLIB.L32';
LIBRARY 'SHRLIB$:NMALIBRY.L32';
LIBRARY 'SHRLIB$:NET.L32';
LIBRARY 'SYS$LIBRARY:STARLET.L32';

!
! EXTERNAL REFERENCES:
!

$NML_EXTDEF;

EXTERNAL LITERAL
    NML$_DSCBFOVF,
    NML$_QIOBFOVF,
    NML$_RECBFOVF;

EXTERNAL ROUTINE
    NMA$SEARCHFLD,
    NML$BLD_REPLY,
    NML$BLDP2,
    NML$ERROR_1,
    NML$ERROR_2;


%SBTTL 'NML$SAVEPARAM  Check parameter value'
GLOBAL ROUTINE NML$SAVEPARAM (CPT_INDEX, LENGTH, POINTER) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine saves a parameter as a descriptor in the parameter
!	descriptor block.
!
! FORMAL PARAMETERS:
!
!	CPT_INDEX
!	LENGTH
!	POINTER
!
! IMPLICIT INPUTS:
!
!	NML$AB_PRMSEM is the parameter semantic table.
!	NML$AW_PRM_DES is the parameter descriptor buffer.
!	NML$GW_PRMDESCNT contains the current number of descriptor entries.
!
! IMPLICIT OUTPUTS:
!
!	If the parameter is valid then a descriptor entry will be created for
!	it in NML$AW_PRM_DES and NML$GW_PRMDESCNT will be incremented.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns NML$_STS_SUC.
!
! SIDE EFFECTS:
!
!  If the parameter descriptor buffer is full then a software error
! (NMA$C_STS_MPR) is signalled with optional text to identify the error.
!
!--

    BEGIN

    BIND
	CPT_LIST      = NML$AB_CPTABLE [.CPT_INDEX, 0,0,0,0]
			: BBLOCK [CPT$K_ENTRYLEN],
	SEMANTIC_LIST = NML$AB_PRMSEM [.CPT_LIST [CPT$W_PSTINDEX], 0,0,0,0]
			: BBLOCK [PST$K_ENTRYLEN];

    LOCAL
	VEC_INDEX,
	MASK      : BLOCK [1, WORD],
	MSGSIZE,			! Resultant message size
	OFFSET,				! Temporary parameter offset
	VEC       : REF BLOCKVECTOR [, 2, WORD];


!
! Check the parameter descriptor buffer to see if there is any room left
!
    IF .NML$GW_PRMDESCNT GEQU PDB$K_NUMBER
    THEN
	BEGIN
!
! Signal parameter descriptor buffer overflow.
!
	NML$AB_MSGBLOCK [MSB$L_FLAGS] = MSB$M_DET_FLD OR MSB$M_MSG_FLD;
	NML$AB_MSGBLOCK [MSB$B_CODE] = NMA$C_STS_MPR; ! Get error code
	NML$AB_MSGBLOCK [MSB$W_DETAIL] =
	    .SEMANTIC_LIST [PST$W_DATAID]; ! Get parameter code detail
	NML$AB_MSGBLOCK [MSB$L_TEXT] = NML$_DSCBFOVF;
	NML$BLD_REPLY (NML$AB_MSGBLOCK, MSGSIZE); ! Build message
	$SIGNAL_MSG (NML$AB_SNDBUFFER, .MSGSIZE); ! Signal error message

	END;
!
! Add descriptor entry for this parameter.
!
    NML$AW_PRM_DES [.NML$GW_PRMDESCNT, PDB$W_INDEX] = .CPT_INDEX;
    NML$AW_PRM_DES [.NML$GW_PRMDESCNT, PDB$W_COUNT] = .LENGTH;
    NML$AW_PRM_DES [.NML$GW_PRMDESCNT, PDB$A_POINTER] = .POINTER;

    NML$GW_PRMDESCNT = .NML$GW_PRMDESCNT + 1; ! Increment descriptor count

    RETURN NML$_STS_SUC

    END;				! End of NML$SAVEPARAM

%SBTTL 'NML$CHKPRMVAL  Check parameter value'
GLOBAL ROUTINE NML$CHKPRMVAL (CPT_INDEX, LEN, ADR) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine verifies that parameter values from the NICE message
!	fall within valid boundaries.
!
! FORMAL PARAMETERS:
!
!	CPT_INDEX	Index into change parameter table.
!	LEN		Byte count of parameter.
!	ADR		Address of parameter.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Returns success (NML$_STS_SUC) if the paramter value is within range.
!
! SIDE EFFECTS:
!
!	An error message (NMA$C_STS_PVA) is signalled if the value is bad.
!
!--

    BEGIN

    LOCAL
	MAX,			! Maximum parameter value (0 if no limit)
	MIN,			! Minimum parameter value
	VAL,			! Parameter value to compare
	STATUS;			! Status of the range checking operations
!
! The parameter semantic table index is determined by looking in the change
! parameter table.
!
    BIND
	CPT_LIST      = NML$AB_CPTABLE [.CPT_INDEX, 0,0,0,0]
			: BBLOCK [CPT$K_ENTRYLEN],
	SEMANTIC_LIST = NML$AB_PRMSEM [.CPT_LIST [CPT$W_PSTINDEX], 0,0,0,0]
			: BBLOCK [PST$K_ENTRYLEN];
!
! Pick up the values for comparison.
!
    MIN = .SEMANTIC_LIST [PST$L_MINVALUE];
    MAX = .SEMANTIC_LIST [PST$L_MAXVALUE];
    STATUS = NML$_STS_SUC;
!
! If the parameter is a string then get the byte count (a byte).  If the
! parameter is not a string then get the value of the appropriate width
! (byte, word, longword).
!
    IF .SEMANTIC_LIST [PST$B_FORMAT] EQLU NML$K_STRING
    THEN
	VAL = .LEN
    ELSE
	VAL = .(.ADR)<0,.LEN*8>;
!
! Check the minimum parameter value.
!
    IF .VAL LSSU .MIN
    THEN
	STATUS = NML$_STS_PVA;
!
! If the maximum value has a zero in it then don't bother to checK it.
!
    IF  .MAX NEQU 0
    AND .VAL GTRU .MAX
    THEN
	STATUS = NML$_STS_PVA;
!
! If the parameter is not within range then signal a parameter value error.
!
   IF NOT .STATUS
   THEN
	NML$ERROR_2 (NMA$C_STS_PVA, .SEMANTIC_LIST [PST$W_DATAID]);

    RETURN NML$_STS_SUC

    END;				! End of NML$CHKPRMVAL

%SBTTL 'NML$BLDSETQBF  Build SET/CLEAR QIO buffers'
GLOBAL ROUTINE NML$BLDSETQBF (FUNC, DB, KEYID, KEYLEN, KEYADR,
				NFBBFDSC, NFBDSC,
				P2BFDSC,  P2DSC,
				VALBFDSC, VALDSC) 
					: NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine builds a QIO buffer for parameter modifications.
!
! FORMAL PARAMETERS:
!
!	FUNC		Control function - NFB$C_FC_SET or NFB$C_FC_CLEAR
!	DB		Database ID
!	KEYID		Search key ID
!	KEYLEN		Search key length
!	KEYADR		Search key address
!	NFBBFDSC	Descriptor of control function buffer (P1)
!	NFBDSC		Descriptor of resulting control function buffer (P1)
!	P2BFDSC		Descriptor of P2 buffer
!	P2DSC		Descriptor of resulting P2 buffer
!	VALBFDSC	Descriptor of parameter value buffer (P4)
!	VALDSC		Descriptor of resulting parameter value data (P4)
!
!	NML$AW_PRM_DES	List of parameter descriptors
!	NML$GW_PRMDESCNT Count of parameter descriptors
!
! OUTPUTS:
!
!	Output buffers and descriptors built.
!--

BEGIN

MAP
	NFBBFDSC : REF DESCRIPTOR,
	NFBDSC   : REF DESCRIPTOR,
	P2BFDSC  : REF DESCRIPTOR,
	P2DSC    : REF DESCRIPTOR,
	VALBFDSC : REF DESCRIPTOR,
	VALDSC   : REF DESCRIPTOR;

LOCAL
	MSGSIZE,
	CPT_INDEX,
	NFB : REF BBLOCK [NFB$C_LENGTH],
	VALADR,
	VALPTR,
	VALLEN,
	VALTYP,
	CPT:	REF BBLOCK [CPT$K_ENTRYLEN],
	PST:	REF BBLOCK [PST$K_ENTRYLEN];

BIND
	VALBUF = VALBFDSC [DSC$A_POINTER] : REF BBLOCK;


!
! Setup NFB descriptor and header
!

NFBDSC [DSC$A_POINTER] = NFB = .NFBBFDSC [DSC$A_POINTER];
CH$FILL(0, $BYTEOFFSET(NFB$L_FLDID), .NFB);	! Zero NFB header
NFB [NFB$B_FCT] = .FUNC;
NFB [NFB$B_DATABASE] = .DB;
NFB [NFB$L_SRCH_KEY] = .KEYID;
NFB [NFB$L_STRT_KEY] = NFB$C_WILDCARD;
NFB = NFB[NFB$L_FLDID];
    
!
! Build the P2 buffer from the key value.
!
SELECTONEU .KEYID OF
	SET

	[NFB$C_EFI_SIN]:		! Logging filters (sink node)

	    NML$BLDP2 (0, .(.KEYADR)<0,16>, -1, 0, .P2BFDSC, .P2DSC);

	[NFB$C_ESI_SNK]:		! Logging sink

	    NML$BLDP2 (0, .(.KEYADR)<0,8>, -1, 0, .P2BFDSC, .P2DSC);

	[NFB$C_NDI_ADD]:		! Node (by address)

	    NML$BLDP2 (0, .(.KEYADR)<0,16>, -1, 0, .P2BFDSC, .P2DSC);

	[OTHERWISE]:

	    NML$BLDP2 (.KEYLEN, .KEYADR, -1, 0, .P2BFDSC, .P2DSC);

	TES;

!
! Setup parameter value buffer descriptor
!

VALDSC [DSC$A_POINTER] = VALPTR = .VALBFDSC [DSC$A_POINTER];

!
! For each entry in the parameter descriptor list, add its ACP identifier
! to the NFB and its value to the value buffer.
!
INCR I FROM 0 TO .NML$GW_PRMDESCNT - 1 DO
	BEGIN

	CPT_INDEX = .NML$AW_PRM_DES [.I, PDB$W_INDEX];
	CPT = NML$AB_CPTABLE [.CPT_INDEX, 0,0,0,0];
	PST = NML$AB_PRMSEM [.CPT [CPT$W_PSTINDEX], 0,0,0,0];
	VALLEN =  .NML$AW_PRM_DES [.I, PDB$W_COUNT];
	VALADR = .NML$AW_PRM_DES [.I, PDB$A_POINTER];

	IF (.VALPTR + .VALLEN + 2 LSSU 
	    .VALBFDSC [DSC$A_POINTER] + .VALBFDSC [DSC$W_LENGTH]) AND
	   (.NFB + 4 LSSU 
	    .NFBBFDSC [DSC$A_POINTER] + .NFBBFDSC [DSC$W_LENGTH])

	THEN
		BEGIN
	        NFB[0,0,32,0] = .PST [PST$L_NFBID];
	        NFB = .NFB + 4;

		IF .VALLEN  GTRU 0
		THEN
			BEGIN
			VALTYP = .(PST [PST$L_NFBID])
				<$BITPOSITION (NFB$V_TYP), 
				 $FIELDWIDTH (NFB$V_TYP)>;
		        IF .VALTYP EQLU NFB$C_TYP_STR
		        THEN
			        BEGIN

			        (.VALPTR)<0,16> = .VALLEN;	! Set count
				VALPTR = .VALPTR + 2;
			        VALPTR = CH$MOVE (.VALLEN, .VALADR, .VALPTR);

			        END
		        ELSE
			        BEGIN

			        (.VALPTR)<0,32> = .(.VALADR)<0,.VALLEN*8>;
			        VALPTR = .VALPTR + 4;	! Increment data pointer

			        END;
			END;
		END
	ELSE
		BEGIN

		NML$AB_MSGBLOCK [MSB$L_FLAGS] = MSB$M_MSG_FLD; ! Set message text flag
		NML$AB_MSGBLOCK [MSB$B_CODE] = NMA$C_STS_MPR;
		NML$AB_MSGBLOCK [MSB$L_TEXT] = NML$_QIOBFOVF;
		NML$BLD_REPLY (NML$AB_MSGBLOCK, MSGSIZE); ! Build message
		$SIGNAL_MSG (NML$AB_SNDBUFFER, .MSGSIZE); ! Signal it

		END;
   
	END;

NFB [0,0,32,0] = NFB$C_ENDOFLIST;
NFBDSC [DSC$W_LENGTH] = .NFB - .NFBDSC[DSC$A_POINTER] + 4;

VALDSC [DSC$W_LENGTH] = .VALPTR - .VALDSC[DSC$A_POINTER];

END;				! End of NML$BLDSETQBF


%SBTTL 'NML$ADD_FIELDS  Add parameter fields to record'
GLOBAL ROUTINE NML$ADD_FIELDS (BUFDSC, RTNDSC) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine adds fields to a permanent data base record.
!
! FORMAL PARAMETERS:
!
!	BUFDSC 	Address of the record buffer descriptor.
!	RTNDSC 	Address of the current record descriptor.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	The record descriptor pointed to by RTNDSC is updated to include
!	any fields added to the record.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	CPT_INDEX,			! Change parameter table index
	SEM_INDEX,			! Semantic table index
	FLDLEN,				! Field length
	FLDADR,				! Field address
	MSGSIZE,			! Message size
	ROUTINE_ADR,			! Temporary routine address
	STATUS;

    INCR I FROM 0 TO .NML$GW_PRMDESCNT - 1 DO
	BEGIN

	FLDLEN = .NML$AW_PRM_DES [.I, PDB$W_COUNT];
	FLDADR = .NML$AW_PRM_DES [.I, PDB$A_POINTER];

	CPT_INDEX = .NML$AW_PRM_DES [.I, PDB$W_INDEX];
	ROUTINE_ADR = .NML$AB_CPTABLE [.CPT_INDEX, CPT$A_DEFINE_RTN];
	SEM_INDEX = .NML$AB_CPTABLE [.CPT_INDEX, CPT$W_PSTINDEX];
 
	IF NOT (STATUS =
		(.ROUTINE_ADR) (NML$AB_PRMSEM [.SEM_INDEX, 0,0,0,0],
				.BUFDSC,
				.FLDLEN,
				.FLDADR,
				.RTNDSC))
	THEN
	    RETURN .STATUS

	END;

    RETURN NML$_STS_SUC

    END;				! End of NML$ADD_FIELDS

%SBTTL 'NML$DEL_FIELDS  Delete parameter fields from record'
GLOBAL ROUTINE NML$DEL_FIELDS (RTNDSC) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine deletes the entire list of parameters in the parameter
!	descriptor buffer from the specified record buffer.
!
! FORMAL PARAMETERS:
!
!	RTNDSC contains the address of the current record descriptor.
!
! IMPLICIT INPUTS:
!
!	NML$GW_PRMDESCNT contains the number of parameter descriptors.
!	NML$AW_PRM_DES is a list of parameter descriptors.
!	NML$AB_PRMSEM is the parameter semantic table.
!
! IMPLICIT OUTPUTS:
!
!	The record descriptor pointed to by RTNDSC is updated to reflect
!	any fields deleted from the record.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	CPT_INDEX,
	SEM_INDEX,
	ROUTINE_ADR;

    INCR I FROM 0 TO .NML$GW_PRMDESCNT - 1 DO
	BEGIN

	CPT_INDEX = .NML$AW_PRM_DES [.I, PDB$W_INDEX];
	ROUTINE_ADR = .NML$AB_CPTABLE [.CPT_INDEX, CPT$A_PURGE_RTN];
	SEM_INDEX = .NML$AB_CPTABLE [.CPT_INDEX, CPT$W_PSTINDEX];

	(.ROUTINE_ADR) (.RTNDSC,
			NML$AB_PRMSEM [.SEM_INDEX, 0,0,0,0]);

	END;

    RETURN NML$_STS_SUC

    END;				! End of NML$DEL_FIELDS

%SBTTL 'NML$READPARLIST  Show parameters from buffer'
GLOBAL ROUTINE NML$READPARLIST (BUFDSC, MSGSIZE, TABDSC, DATDSC) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine builds a message from the list of parameters specified.
!
! FORMAL PARAMETERS:
!
!	BUFDSC		Address of message buffer descriptor.
!	MSGSIZE		Address of longword to contain resulting message size.
!	TABDSC		Address of parameter table descriptor.
!	DATDSC		Address of data buffer descriptor.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	TABDSC : REF DESCRIPTOR;

    LOCAL
	INDEX;

    BIND
	TABLE = TABDSC [DSC$A_POINTER] : REF BBLOCKVECTOR [, 6];

!
! If table address is null then the specified information type is not
! applicable to this entity.
!
    IF .TABLE EQLA 0
    THEN
	NML$ERROR_1 (NMA$C_STS_FOP);

    INCR I FROM 0 TO .TABDSC [DSC$W_LENGTH] - 1 DO
	BEGIN

	INDEX = .TABLE [.I, 0,0,16,0];	! Get table index

	(.TABLE [.I, 2,0,32,0]) (NML$AB_PRMSEM [.INDEX, 0,0,0,0],
				 .BUFDSC,
				 .MSGSIZE,
				 .DATDSC);

	END;

    RETURN NML$_STS_SUC

    END;				! End of NML$READPARLIST

%SBTTL 'NML$SHOWPARLIST  Show parameters from QIO buffer'
GLOBAL ROUTINE NML$SHOWPARLIST (BUFDSC, MSGSIZE, TABDSC, DATDSC, DATPTR) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine builds a message from the list of parameters specified.
!
! FORMAL PARAMETERS:
!
!	BUFDSC		Address of message buffer descriptor.
!	MSGSIZE		Address of longword to contain resulting message size.
!	TABDSC		Address of parameter table descriptor.
!	DATDSC		Address of data buffer descriptor.
!	DATPTR		Address of data buffer pointer.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	TABDSC : REF DESCRIPTOR;

    LOCAL
	INDEX;

    BIND
	TABLE = TABDSC [DSC$A_POINTER] : REF BBLOCKVECTOR [, 6];

    INCR I FROM 0 TO .TABDSC [DSC$W_LENGTH] - 1 DO
	BEGIN

	INDEX = .TABLE [.I, 0,0,16,0];	! Get table index

	(.TABLE [.I, 2,0,32,0]) (NML$AB_PRMSEM [.INDEX, 0,0,0,0],
				 .BUFDSC,
				 .MSGSIZE,
				 .DATDSC,
				 .DATPTR);

	END;

    RETURN NML$_STS_SUC

    END;				! End of NML$SHOWPARLIST

%SBTTL 'NML$BLDALLDES  Build parameter descriptors from record'
GLOBAL ROUTINE NML$BLDALLDES (RECDSC, TABDSC) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine is used by SET ALL functions to build parameter
!	descriptors from a permanent data base record.
!
! FORMAL PARAMETERS:
!
!	RECDSC		Address of the current record descriptor.
!	TABDSC		Address of parameter table descriptor.
!
! IMPLICIT INPUTS:
!
!	NML$AB_PRMSEM is the parameter semantic table.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	RECDSC : REF DESCRIPTOR,
	TABDSC : REF DESCRIPTOR;

    LOCAL
	FLDADR,
	FLDSIZE,
	INDEX;

    BIND
	TABLE = TABDSC [DSC$A_POINTER] : REF BLOCK;

    NML$GW_PRMDESCNT = 0;		    ! Reset parameter descriptor count

    INCR I FROM 0 TO .TABDSC [DSC$W_LENGTH] - 1 DO
	BEGIN

	FLDADR = 0;

	IF NMA$SEARCHFLD (.RECDSC,
			  .TABLE [.I,0,16,0],
			  FLDSIZE,
			  FLDADR)
	THEN
	    BEGIN

	    INDEX = .TABLE [.I,16,16,0];

	    NML$SAVEPARAM (.INDEX,
			   .FLDSIZE,
			   .FLDADR);
	    END;
	END;

    RETURN NML$_STS_SUC

    END;				! End of NML$BLDALLDES

END

ELUDOM
