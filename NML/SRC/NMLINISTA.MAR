	.TITLE	NML$INISTA	NML Initial parsing state table
	.IDENT	'V03-000'
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY:  DECnet-VAX Network Management Listener

;
; ABSTRACT:
;
;	This module contains the NPARSE state tables for handling the
;	initial processing of all NICE command messages.
;
; ENVIRONMENT:  VAX/VMS Operating System
;
; AUTHOR:  Distributed Systems Software Engineering
;
; CREATION DATE: 8-Sep-1979
;
; MODIFIED BY:
;	V03-002	MKP0002		Kathy Perko	14-Nov-1981
;		Fix circuit id parsing so same checks are made as
;		for line id parsing.
;
;	V03-001	MKP0001		Kathy Perko	19-July-1981
;		Add Circuit and Module entities.
;
;--

	.SBTTL	Declarations
;
; INCLUDE FILES:
;

$NMADEF			; Network Management Layer symbols
$NMLDEF			; Network Management Listener definitions

;
; MACROS:
;

;
; EQUATED SYMBOLS:
;

;
; OWN STORAGE:
;

	.SBTTL	NML$NPA_INI2 - NICE Phase II message parse tables
;+
; THESE TABLES ARE DESIGNED TO BE INTERPRETED BY "NPARSE", A MODIFIED
; NETWORK VERSION OF THE STANDARD "TPARSE".
;
;-
;
; Phase II parse tables
;
	IMSG$	NML$NPA_INI2

	FIELD$					; Parse the function code
	$BYTE	NMA$C_FN2_LOO,NPA$_EXIT,NML$PRSFNC ; Loopback
	$BYTE	NMA$C_FN2_REA,NPA$_EXIT,NML$PRSFNC ; Read (show)
	$BYTE	NMA$C_FN2_ZER,NPA$_EXIT,NML$PRSFNC ; Zero
	$ERROR	NML$_STS_FUN			; Unrecognized function

	FIELD$					; End of Phase II tables

	.SBTTL	NML$NPA_INIT - NICE Phase III message parse tables
;+
; Phase III parse tables
;-
	IMSG$	NML$NPA_INIT
;
; Get the function code
;
	FIELD$
	$BYTE	NMA$C_FNC_CHA,NML_CHA,NML$PRSFNC ; Change
	$BYTE	NMA$C_FNC_REA,NML_REA,NML$PRSFNC ; Read
	$BYTE	NMA$C_FNC_ZER,NML_ZER,NML$PRSFNC ; Zero
	$BYTE	NMA$C_FNC_TES,NML_TES,NML$PRSFNC ; Test
	$BYTE	NMA$C_FNC_LOA,NML_LOA,NML$PRSFNC ; Load
	$BYTE	NMA$C_FNC_DUM,NML_DUM,NML$PRSFNC ; Dump
	$BYTE	NMA$C_FNC_TRI,NML_TRI,NML$PRSFNC ; Trigger
	$BYTE	NMA$C_FNC_SYS,NML_SYS		; System-specific function
	$NULL	,NML_FUN_ERR			; Unrecognized function
;
; Down-line load
;
	FIELD$	NML_LOA
	$SBEXP	NML_CHKOPT_SUB,NPA$_EXIT	; Parse the option byte
;
; Up-line dump
;
	FIELD$	NML_DUM
	$SBEXP	NML_CHKOPT_SUB,NPA$_EXIT	; Parse the option byte
;
; Trigger bootstrap
;
	FIELD$	NML_TRI
	$SBEXP	NML_CHKOPT_SUB,NPA$_EXIT	; Parse the option byte
;
; Send test message
;
	FIELD$	NML_TES
	$SBEXP	NML_CHKOPT_SUB,NPA$_EXIT	; Parse the option byte

;
; Change parameter
;
	FIELD$	NML_CHA				; Check change parameter option
	$SBEXP	NML_CHKOPT_SUB			; Parse the option byte
	FIELD$
	$SBEXP	NML_CHKENT_SUB,NPA$_EXIT	; Parse entity id

;
; Read information
;
	FIELD$	NML_REA				; Check read information option
	$SBEXP	NML_CHKOPT_SUB			; Parse the option byte
	FIELD$
	$SBEXP	NML_CHK_INFO_SUB		; Check information type
	FIELD$
	$SBEXP	NML_CHKENT_SUB,NPA$_EXIT	; Parse entity id

;
; Zero counters
;
	FIELD$	NML_ZER				; Check zero counters option
	$SBEXP	NML_CHKOPT_SUB			; Parse the option byte
	FIELD$					; Parse the entity ID
	$EXTZV	<NMA$C_ENT_NOD, -		; Node
		 NMA$V_OPT_ENT, -
		 NMA$S_OPT_ENT, -
		 NPA$_ADVANCE>, NML_NOD_ENT,NML$PRSENT
	$EXTZV	<NMA$C_ENT_LIN, -		; Line
		 NMA$V_OPT_ENT, -
		 NMA$S_OPT_ENT, -
		 NPA$_ADVANCE>, NML_LIN_ENT,NML$PRSENT
	$EXTZV	<NMA$C_ENT_CIR, -		; Circuit
		 NMA$V_OPT_ENT, -
		 NMA$S_OPT_ENT, -
		 NPA$_ADVANCE>, NML_CIRCUIT_ENT,NML$PRSENT
	$EXTZV	<NMA$C_ENT_MOD, -		; Module
		 NMA$V_OPT_ENT, -
		 NMA$S_OPT_ENT, -
		 NPA$_ADVANCE>, NML_MODULE_ENT,NML$PRSENT
	$NULL	,NML_FUN_ERR			; Unrecognized option

;
; System-specific functions
;
	FIELD$	NML_SYS				; System-specific function
	$EOM	,NML_FOR_ERR			; Message format error
	$BYTE	NMA$C_SYS_VMS,NML_VMS,,NML$M_PRS_VMS,NML$GL_PRS_FLGS
	$NULL	,NML_SYS_ERR			; Only VMS is valid

	FIELD$	NML_VMS				; VMS-specific function
	$EOM	,NML_FOR_ERR			; Message format error
	$BYTE	NMA$C_FNC_CHA,NML_VMS_CHA,NML$PRSFNC ; Change
	$BYTE	NMA$C_FNC_REA,NML_VMS_REA,NML$PRSFNC ; Read
	$NULL	,NML_FUN_ERR			; Unrecognized function

;
; Change parameter for VMS specific function
;
	FIELD$	NML_VMS_CHA			; Check change parameter option
	$SBEXP	NML_CHKOPT_SUB			; Parse the option byte
	FIELD$
	$SBEXP	NML_CHK_VMS_ENT_SUB,NPA$_EXIT	; Parse entity id for VMS
						;	specific
;
; Read information for VMS specific function
;
	FIELD$	NML_VMS_REA			; Check read information option
	$SBEXP	NML_CHKOPT_SUB			; Parse the option byte
	FIELD$
	$SBEXP	NML_CHK_INFO_SUB		; Check information type
	FIELD$
	$SBEXP	NML_CHK_VMS_ENT_SUB,NPA$_EXIT	; Parse entity id for VMS
						;	specific

;
; Parse information type subexpression
;
	FIELD$	NML_CHK_INFO_SUB		; Match the information type
	$EXTZV	<NMA$C_OPINF_SUM, -		; Summary
		 NMA$V_OPT_INF, -
		 NMA$S_OPT_INF  -
				>,NPA$_EXIT,NML$PRSINF
	$EXTZV	<NMA$C_OPINF_STA, -		; Status
		 NMA$V_OPT_INF, -
		 NMA$S_OPT_INF  -
				>,NPA$_EXIT,NML$PRSINF
	$EXTZV	<NMA$C_OPINF_CHA, -		; Characteristics
		 NMA$V_OPT_INF, -
		 NMA$S_OPT_INF  -
				>,NPA$_EXIT,NML$PRSINF
	$EXTZV	<NMA$C_OPINF_COU, -		; Counters
		 NMA$V_OPT_INF, -
		 NMA$S_OPT_INF  -
				>,NPA$_EXIT,NML$PRSINF
	$EXTZV	<NMA$C_OPINF_EVE, -		; Events
		 NMA$V_OPT_INF, -
		 NMA$S_OPT_INF  -
				>,NPA$_EXIT,NML$PRSINF
	$NULL	,NML_FUN_ERR			; Unrecognized option


	.SBTTL	Entity parsing
;
; Parse the entity for a non VMS specific command, according to the option byte
;
	FIELD$	NML_CHKENT_SUB
	$EXTZV	<NMA$C_ENT_NOD, -		; Node
		 NMA$V_OPT_ENT, -
		 NMA$S_OPT_ENT, -
		 NPA$_ADVANCE>, NML_NOD_ENT,NML$PRSENT
	$EXTZV	<NMA$C_ENT_LIN, -		; Line
		 NMA$V_OPT_ENT, -
		 NMA$S_OPT_ENT, -
		 NPA$_ADVANCE>, NML_LIN_ENT,NML$PRSENT
	$EXTZV	<NMA$C_ENT_LOG, -		; Logging
		 NMA$V_OPT_ENT, -
		 NMA$S_OPT_ENT, -
		 NPA$_ADVANCE>, NML_LOG_ENT,NML$PRSENT
	$EXTZV	<NMA$C_ENT_CIR, -		; Circuit
		 NMA$V_OPT_ENT, -
		 NMA$S_OPT_ENT, -
		 NPA$_ADVANCE>, NML_CIRCUIT_ENT,NML$PRSENT
	$EXTZV	<NMA$C_ENT_MOD, -		; Module
		 NMA$V_OPT_ENT, -
		 NMA$S_OPT_ENT, -
		 NPA$_ADVANCE>, NML_MODULE_ENT,NML$PRSENT
	$NULL	,NML_FUN_ERR			; Unrecognized function


;
; Parse VMS specific entities.
;
	FIELD$	NML_CHK_VMS_ENT_SUB
	$EXTZV	<NMA$C_SENT_OBJ, -		; Object
		 NMA$V_OPT_ENT, -
		 NMA$S_OPT_ENT, -
		 NPA$_ADVANCE>, NML_OBJ_ENT,NML$PRSENT
	$EXTZV	<NMA$C_SENT_LNK, -		; Link
		 NMA$V_OPT_ENT, -
		 NMA$S_OPT_ENT, -
		 NPA$_ADVANCE>, NML_LNK_ENT,NML$PRSENT
	$NULL	,NML_FUN_ERR			; Unrecognized option

;
; Parse a node entity
;
	FIELD$	NML_NOD_ENT			; Node-id entity
	$EOM	,NML_FOR_ERR			; Message format error
	$LOOK	0,NML_NOD_NUM			; 3 bytes if node number
	$MATCH	1,NPA$_EXIT,NML$PRSIDLEQ	; 1 byte if zero or negative
	$IMAGE	6,NPA$_EXIT,NML$PRSNODNAM,NML$M_PRS_NAM,NML$GL_PRS_FLGS ; n bytes (name)
	$ERROR	NML$_STS_IDE,,NML$PRSIDERR,,,NMA$C_ENT_NOD ; Illegal node name

	FIELD$	NML_NOD_NUM			; Node-id number
	$SBEXP	NML_NOD_EXE,NPA$_EXIT,NML$PRSID,NML$M_PRS_EXE,NML$GL_PRS_FLGS ; Executor node
	$MATCH	3,NPA$_EXIT,NML$PRSNODADR,NML$M_PRS_ADR,NML$GL_PRS_FLGS ; Skip 2 bytes (node number)
	$NULL	,NML_FOR_ERR			; Must be at least 2 bytes

	FIELD$	NML_NOD_EXE			; Zero address is executor node
	$MATCH	1
	FIELD$
	$WORD	0,NPA$_EXIT

;
; Parse a line entity
;
	FIELD$	NML_LIN_ENT			; Line-id entity
	$EOM	,NML_FOR_ERR			; Message format error
	$MATCH	1,NPA$_EXIT,NML$PRSIDLEQ	; 1 byte if zero or negative
	$IMAGE	16,NPA$_EXIT,NML$PRSDEVICE	; n bytes (line name)
 	$ERROR	NML$_STS_IDE,,NML$PRSIDERR,,,NMA$C_ENT_LIN ; Illegal line-id

;
; Parse a logging entity
;
	FIELD$	NML_LOG_ENT			; Logging entity
	$MATCH	1,NML_LOG_SIN,NML$PRSID		; 1 byte, always
	$NULL	,NML_FOR_ERR			; Message format error

	FIELD$	NML_LOG_SIN			; If READ then sink node
	$NULL	,NPA$_EXIT,NML$PRSLOGSIN	;  must be specified
	$EOM	,NPA$_EXIT,NML$PRSEXESNK	; Null is executor node
	$WORD	NMA$C_PCLO_SIN,NML_LOG_NID

	FIELD$	NML_LOG_NID
	$SBEXP	NML_LOG_NIDSUB,NML_CHKEOM,,NML$M_PRS_SNKNOD,NML$GL_PRS_FLGS
	$ERROR	NML$_STS_IDE,,NML$PRSIDERR,,,NMA$C_ENT_NOD ; Illegal node id

	FIELD$	NML_LOG_NIDSUB
	$BYTE	NMA$C_ENT_KNO,NPA$_EXIT,,NML$M_PRS_KNOSNK,NML$GL_PRS_FLGS ; Known sinks
	$LOOK	0,NML_LOG_NODNUM
	$IMAGE	6,NPA$_EXIT,NML$PRSSNKNNA
	$NULL	,NML_FOR_ERR			; Message format error

	FIELD$	NML_LOG_NODNUM
	$MATCH	3,NPA$_EXIT,NML$PRSSNKNAD

;
; Parse a circuit entity
;
	FIELD$	NML_CIRCUIT_ENT			; Circuit-id entity
	$EOM	,NML_FOR_ERR			; Message format error
	$MATCH	1,NPA$_EXIT,NML$PRSIDLEQ	; 1 byte if zero or negative
	$IMAGE	16,NPA$_EXIT,NML$PRSDEVICE		; n bytes (line name)
 	$ERROR	NML$_STS_IDE,,NML$PRSIDERR,,,NMA$C_ENT_CIR; Illegal circuit-id

;
; Parse a module entity
;
	FIELD$	NML_MODULE_ENT			; Module entity
	$EOM	,NML_FOR_ERR			; Message format error
	$MATCH	1,NPA$_EXIT,NML$PRSIDLEQ	; 1 byte if zero or negative
	$IMAGE	16,NPA$_EXIT,NML$PRSIDN		; n bytes (line name)
 	$ERROR	NML$_STS_IDE,,NML$PRSIDERR,,,NMA$C_ENT_MOD; Illegal module-id

;
; Parse an object entity (VMS-specific)
;
	FIELD$	NML_OBJ_ENT			; Object entity
	$EOM	,NML_FOR_ERR			; Message format error
	$MATCH	1,NPA$_EXIT,NML$PRSIDLEQ	; 1 byte if zero or negative
	$IMAGE	8,NPA$_EXIT,NML$PRSIDN		; n bytes (name)
	$ERROR	NML$_STS_IDE,,NML$PRSIDERR,,,NMA$C_SENT_OBJ ; Illegal object name

;
; Parse a link entity (VMS-specific)
;
	FIELD$	NML_LNK_ENT			; Link entity
	$EOM	,NML_FOR_ERR			; Message format error
	$LOOK	0,NML_LNK_NUM			; If zero, it's a link number.
	$MATCH	1,NML_LNK_NOD,NML$PRSIDLEQ	; 1 byte if negative

	FIELD$	NML_LNK_NUM			; Link address
	$MATCH	3,NML_LNK_NOD,NML$PRSID		; Must be byte of 0 and 2 bytes
						;	of link number.
	$ERROR	NML$_STS_IDE,,NML$PRSIDERR,,,NMA$C_SENT_LNK ; Illegal link address

	FIELD$	NML_LNK_NOD
	$EOM	,NPA$_EXIT
	$WORD	NMA$C_PCLK_NID,NML_LNK_NID
	$NULL	,NML_FOR_ERR

	FIELD$	NML_LNK_NID
	$EOM	,NML_FOR_ERR
	$SBEXP	NML_NODEID_SUB,NML_CHKEOM,NML$PRSSTR,NML$M_PRS_STR,NML$GL_PRS_FLGS
	$ERROR	NML$_STS_IDE,,NML$PRSIDERR,,,NMA$C_ENT_NOD ; Illegal node id


	FIELD$	NML_NODEID_SUB
	$LOOK	0,NML_NODNUM
	$IMAGE	6,NPA$_EXIT

	FIELD$	NML_NODNUM
	$MATCH	3,NPA$_EXIT

	.SBTTL	Common expressions
;
; Check the option byte for illegal bits and save it
;
	FIELD$	NML_CHKOPT_SUB			; Check for valid option
	$EOM	,NML_FOR_ERR			; Message format error
	$LOOK	,NPA$_EXIT,NML$PRSOPT		;
	$NULL	,NML_FUN_ERR			; Unrecognized option
;
; No more bytes allowed in message
;
	FIELD$	NML_CHKEOM			; Check for end of message
	$EOM	,NPA$_EXIT			; If end then success
	$NULL	,NML_FOR_ERR			; Message format error
;
; Error exits
;
	FIELD$	NML_FOR_ERR			; Message format error
	$ERROR	NML$_STS_INV,,NML$PRSERR1,,,NMA$C_STS_INV

	FIELD$	NML_FUN_ERR			; Illegal function or option
	$ERROR	NML$_STS_FUN,,NML$PRSERR1,,,NMA$C_STS_FUN

	FIELD$	NML_SYS_ERR			; Unrecognized system-specific
	$ERROR	NML$_STS_SYS,,NML$PRSERR1,,,NMA$C_STS_SYS

	FIELD$					; End of Phase III tables
;
; End of parse tables
;
	.END
