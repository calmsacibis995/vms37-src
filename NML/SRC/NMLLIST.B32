%TITLE 'NML LIST permanent parameter module'
MODULE NML$LIST (
		LANGUAGE (BLISS32),
		ADDRESSING_MODE (NONEXTERNAL=LONG_RELATIVE),
		ADDRESSING_MODE (EXTERNAL=LONG_RELATIVE),
		IDENT = 'V03-000'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  DECnet-VAX Network Management Listener
!
! ABSTRACT:
!
!	This module contains routines for processing the NCP LIST command.
!
! ENVIRONMENT:  VAX/VMS Operating System
!
! AUTHOR:  Distributed Systems Software Engineering
!
! CREATION DATE:  30-DEC-1979
!
! MODIFIED BY:
!
!	V03-001	MKP001		Kathy Perko	23-July-1981
!		Add circuit entity and multidrop lines.
!--


%SBTTL 'Declarations'

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    NML$LISTKNOWN	: NOVALUE,
    NML$LISTKNONODES	: NOVALUE,
    NML$LISTENTITY	: NOVALUE,
    NML_LISTENTITY,
    NML_LISTREMOTES	: NOVALUE,
    NML$LISTEXECUTOR,
    NML_GETTABLE 	: NOVALUE;

!
! INCLUDE FILES:
!

LIBRARY 'LIB$:NMLLIB.L32';
LIBRARY 'SHRLIB$:NMALIBRY.L32';
LIBRARY 'SYS$LIBRARY:STARLET.L32';

!
! EQUATED SYMBOLS:
!

LITERAL
    NML$K_ENTBUFLEN = 32;		! Length of entity buffer

!
! OWN STORAGE:
!

!
! Entity buffer and descriptor.
!
OWN
    NML$T_ENTITYBUF : BBLOCK [NML$K_ENTBUFLEN],
    NML$Q_ENTITYDSC : DESCRIPTOR;
!
! Word to hold executor record key.  Used to avoid duplicate return of executor
! node information in plural node operations.
!
OWN
    NML$W_EXECUTORKEY : WORD;

!
! EXTERNAL REFERENCES:
!

$NML_EXTDEF;

EXTERNAL ROUTINE
    NMA$OPENFILE,
    NML$BLD_REPLY,
    NML$ERROR_1,
    NML$ERROR_2,
    NML$GETRECOWNER,
    NML$MATCHRECORD,
    NML$READPARLIST,
    NML$READRECORD,
    NML$SEND;


%SBTTL 'NML$LISTKNOWN  List known entity parameters'
GLOBAL ROUTINE NML$LISTKNOWN (ENT, INF, DUM1, DUM2) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine lists entries for all entities of the specified type
!	in the permanent data base.
!
! FORMAL PARAMETERS:
!
!	ENT		Entity type code.
!	INF		Information type code.
!	DUM1		Not used.
!	DUM2		Not used.
!
!--

    BEGIN

    LOCAL
	FID,				! File id code
	KEY : WORD,			! Temporary record key buffer
	OWNER,				! Data base search key
	RECDSC : DESCRIPTOR,		! Record descriptor
	TABDSC : REF DESCRIPTOR;

!
! Set up entity-specific information.
!
    SELECTONEU .ENT OF
	SET

	[NML$C_CIRCUIT]:
	    BEGIN
!
! Open node file to get loop node name.
! (If open fails, return other information anyway.)
!
	    NMA$OPENFILE (NMA$C_OPN_NODE, NMA$C_OPN_AC_RO);

	    END;

	TES;
!
! Get entity information.
!
    FID = .NML$AB_ENTITYDATA [.ENT, EIT$B_FILEID]; ! Get file id
    OWNER = .NML$AB_ENTITYDATA [.ENT, EIT$W_KEY];  ! Get search key
!
! Get table.
!
    NML_GETTABLE (.ENT, .INF, TABDSC);
!
! Try to match record in file.
!
    KEY = 0;				! Initialize record key
    WHILE NML$MATCHRECORD (.FID, NML$GQ_RECBFDSC, KEY, .OWNER, 0, 0, RECDSC) DO
	BEGIN

	NML_LISTENTITY (.ENT, RECDSC, .TABDSC);

	KEY = .KEY + 1;

	END;

    END;				! End of NML$LISTKNOWN


%SBTTL 'NML$LISTKNONODES  List known nodes'
GLOBAL ROUTINE NML$LISTKNONODES (ENT, INF, DUM1, DUM2) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine lists all entries for nodes that are in the permanent
!	data base.  The executor node is listed first.  Remote nodes are
!	then listed.  Loop nodes are listed last.
!
! FORMAL PARAMETERS:
!
!	ENT		Entity type code.
!	INF		Information type code.
!	DUM1		Not used.
!	DUM2		Not used.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN
!
! Return executor node.
!
    NML$LISTEXECUTOR (NML$C_EXECUTOR, .INF, 0, 0);
!
! Return remote nodes.
!
    NML_LISTREMOTES (NML$C_NODE, .INF, 0, 0);
!
! Return loop nodes.
!
    NML$LISTKNOWN (NML$C_LOOPNODE, .INF, 0, 0);

    END;				! End of NML$LISTKNONODES


%SBTTL 'NML$LISTENTITY  List known entity parameters'
GLOBAL ROUTINE NML$LISTENTITY (ENT, INF, LEN, ADR) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine lists permanent data base information for the specified
!	entity.
!
! FORMAL PARAMETERS:
!
!	ENT		Entity type code.
!	INF		Information type code.
!	LEN		Byte count of entity id string.
!	ADR		Address of entity id string.
!
!--

    BEGIN

    LOCAL
	FID,				! File id code
	KEY : WORD,			! Temporary record key buffer
	DETAIL,				! Error detail
	OWNER,				! Data base search key
	RECDSC : DESCRIPTOR,		! Record descriptor
	TABDSC : REF DESCRIPTOR;

!
! Set up entity-specific information.
!
    SELECTONEU .ENT OF
	SET

	[NML$C_CIRCUIT]:
	    BEGIN
!
! Open node file to get loop node name.
! (If open fails, return other information anyway.)
!
	    NMA$OPENFILE (NMA$C_OPN_NODE, NMA$C_OPN_AC_RO);

	    END;

	TES;
!
! Get entity information.
!
    FID = .NML$AB_ENTITYDATA [.ENT, EIT$B_FILEID];    ! Get file id
    OWNER = .NML$AB_ENTITYDATA [.ENT, EIT$W_KEY];     ! Search key
    DETAIL = .NML$AB_ENTITYDATA [.ENT, EIT$W_DETAIL]; ! Error detail
!
! Get table.
!
    NML_GETTABLE (.ENT, .INF, TABDSC);
!
! Try to match record in file.
!
    KEY = 0;				! Initialize record key
    IF NML$MATCHRECORD (.FID, NML$GQ_RECBFDSC, KEY, .OWNER, .LEN, .ADR, RECDSC)
    THEN
	BEGIN

	NML_LISTENTITY (.ENT, RECDSC, .TABDSC);

	END

    ELSE
	NML$ERROR_2 (NMA$C_STS_CMP, .DETAIL); ! Signal error message

    END;				! End of NML$LISTENTITY

%SBTTL 'NML_LISTENTITY  List known entity parameters'
ROUTINE NML_LISTENTITY (ENT, RECDSC, TABDSC) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine performs common list function for both singular and
!	plural entity operations.
!
! FORMAL PARAMETERS:
!
!	ENT		Entity type code.
!	RECDSC		Address of permanent data base record descriptor.
!	TABDSC		Address of parameter list table descriptor.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	MSG_SIZE;			! Message size

!
! Get the record owner.
!
    NML$AB_MSGBLOCK [MSB$B_CODE] = NMA$C_STS_SUC;
    NML$Q_ENTITYDSC [DSC$W_LENGTH] = NML$K_ENTBUFLEN; ! Initialize entity descriptor
    NML$Q_ENTITYDSC [DSC$A_POINTER] = NML$T_ENTITYBUF;

    IF NML$GETRECOWNER (.RECDSC,
			.ENT,
			NML$Q_ENTITYDSC,
			NML$Q_ENTITYDSC [DSC$W_LENGTH])
    THEN
	BEGIN
	NML$AB_MSGBLOCK [MSB$L_FLAGS] = MSB$M_ENTD_FLD; ! Set entity descriptor flag
	NML$AB_MSGBLOCK [MSB$A_ENTITY] = NML$Q_ENTITYDSC; ! Add entity descriptor pointer
	END;

    NML$BLD_REPLY (NML$AB_MSGBLOCK, MSG_SIZE); ! Build message

    NML$READPARLIST (NML$GQ_SNDBFDSC, MSG_SIZE, .TABDSC, .RECDSC);

    NML$SEND (NML$AB_SNDBUFFER, .MSG_SIZE); ! Send message

    RETURN NML$_STS_SUC

    END;				! End of NML_LISTENTITY

%SBTTL 'NML_LISTREMOTES  List known node parameters'
ROUTINE NML_LISTREMOTES (ENT, INF, DUM1, DUM2) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine lists permanent data base information for all remote
!	nodes.
!
! FORMAL PARAMETERS:
!
!	ENT		Entity type code (always NML$C_NODE).
!	INF		Information type code.
!	DUM1		Not used.
!	DUM2		Not used.
!
! IMPLICIT INPUTS:
!
!	NML$W_EXECUTORKEY	Contains the key of the executor node
!				record in the node data base.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	FID,				! File id code
	KEY    : WORD,			! Temporary record key buffer
	OWNER,				! Data base search key
	RECDSC : DESCRIPTOR,		! Record descriptor
	TABDSC : REF DESCRIPTOR;	! Table descriptor

!
! Get entity information.
!
    FID   = .NML$AB_ENTITYDATA [.ENT, EIT$B_FILEID]; ! Get file id
    OWNER = .NML$AB_ENTITYDATA [.ENT, EIT$W_KEY];    ! Search key
    NML_GETTABLE (.ENT, .INF, TABDSC);	! Get information table
!
! Read all records that have node address.
!
    KEY = 0;				! Initialize record key
    WHILE NML$MATCHRECORD (.FID,
			   NML$GQ_RECBFDSC,
			   KEY,
			   .OWNER,
			   0,
			   0,
			   RECDSC) DO
	BEGIN
!
! If record key does not match executor record key then process it.
! This test avoids duplicate output of executor node information.
!
	IF .KEY NEQU .NML$W_EXECUTORKEY
	THEN
	    NML_LISTENTITY (.ENT, RECDSC, .TABDSC);

	KEY = .KEY + 1;

	END;

    END;				! End of NML$LISTREMOTES

%SBTTL 'NML$LISTEXECUTOR  List known entity parameters'
GLOBAL ROUTINE NML$LISTEXECUTOR (ENT, INF, DUM1, DUM2) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine lists information about the executor node from the
!	permanent data base.
!
! FORMAL PARAMETERS:
!
!	ENT		Entity type code (always NML$C_EXECUTOR).
!	INF		Information type code.
!	DUM1		Not used.
!	DUM2		Not used.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NML$W_EXECUTORKEY	Contains the key of the executor node record
!				in the permanent node data base if one is
!				found.  If no entry exists then it will 
!				contain a -1.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	FID,				! File id code
	KEY	: WORD,			! Record key
	RECDSC	: DESCRIPTOR,		! Record descriptor
	STATUS,				! Status to be returned
	TABDSC  : REF DESCRIPTOR;	! Parameter table descriptor

!
! Get entity information.
!
    FID = .NML$AB_ENTITYDATA [.ENT, EIT$B_FILEID]; ! Get file id
    NML_GETTABLE (.ENT, .INF, TABDSC);
!
! Read the local node record.
!
    NML$W_EXECUTORKEY = -1;

    KEY = 0;
!
! Read executor node record.
!
    IF NML$MATCHRECORD (.FID,
			NML$GQ_RECBFDSC,
			KEY,
			NML$C_KEY_EXE,
			0,
			0,
			RECDSC)
    THEN
	BEGIN

	NML$W_EXECUTORKEY = .KEY;	! Save record key for plural operations

	NML_LISTENTITY (.ENT, RECDSC, .TABDSC);

	STATUS = NML$_STS_SUC;

	END
    ELSE
	STATUS = NML$_STS_CMP;

    RETURN .STATUS

    END;				! End of NML$LISTEXECUTOR

%SBTTL 'NML_GETTABLE  Get table descriptor'
ROUTINE NML_GETTABLE (ENT, INF, TABDSC) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine selects the parameter table for processing permanent
!	data base information based on the entity type and the information
!	type.
!
! FORMAL PARAMETERS:
!
!	ENT		Entity id code.
!	INF		Information type code.
!	TABDSC		Address of table descriptor.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	ENTTAB : REF VECTOR;

!
! Get the address of this entity's vector of information tables.
!
    ENTTAB = .NML$AL_PERMINFTAB [.ENT];
!
! Select the table according to the information type.
!
    .TABDSC = .ENTTAB [.INF];
!
! If the table descriptor address is equal to zero then the requested
! information type is not supported for this entity.  Signal an error
! indicating invalid function or option.
!
    IF ..TABDSC EQLA 0
    THEN
	NML$ERROR_1 (NMA$C_STS_FUN);

    RETURN NML$_STS_SUC

    END;				! End of NML_GETTABLE


END					! End of module

ELUDOM
