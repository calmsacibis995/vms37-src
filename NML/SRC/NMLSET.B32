%TITLE 'NML SET parameter module'
MODULE NML$SET (
		LANGUAGE (BLISS32),
		ADDRESSING_MODE (NONEXTERNAL=LONG_RELATIVE),
		ADDRESSING_MODE (EXTERNAL=LONG_RELATIVE),
		IDENT = 'V03-000'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  DECnet-VAX Network Management Listener
!
! ABSTRACT:
!
!	These routines provide the operations necessary to perform all
!	NCP SET entity commands.
!
! ENVIRONMENT:  VAX/VMS Operating System
!
! AUTHOR:  Distributed Systems Software Engineering
!
! CREATION DATE:  30-DEC-1979
!
! MODIFIED BY:
!
!	V03-005	MKP0006		Kathy Perko	07-Feb-1982
!		Repair previous fix to reinstate SET KNOWN LOGGING ALL.
!
!	V03-004	MKP0005		Kathy Perko	31-Jan-1982
!		For SET KNOWN LOGGING commands, change NML so it will do the
!		update if the sink has an entry in either the ESI or the
!		EFI volatile database.
!
!	V03-004	MKP0004		Kathy Perko	17-Nov-1981
!		Add circuits to logging event sources, and fix buffer
!		overflow problem correctly (if not filters defined for
!		a sink, error returned was buffer overflow).
!
!	V03-003	MKP0003		Kathy Perko	16-Nov-1981
!		Undo the previous fix.  It's wrong.
!
!	V03-002	MKP0002		Kathy Perko	17-Sept-1981
!		Fix SET KNOWN LOGGING ALL so that buffer overflow
!		is not returned if no logging is defined for a sink.
!
! 	V03-001	MKP0001		Kathy Perko	21-July-1981
!		Add Circuit entity.
!--


%SBTTL 'Declarations'

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    NML$SETENTITY	: NOVALUE,
    NML$SETKNOLOG	: NOVALUE,
    NML$SETLOGGING	: NOVALUE,
    NML_SETLOGGING	: NOVALUE,
    NML_SETLOGALL	: NOVALUE,
    NML_ADDALLFIL,
    NML_SETENTITY,
    NML$SETLINE		: NOVALUE,
    NML$SETEXECUTOR	: NOVALUE,
    NML$SETKNOWN	: NOVALUE,
    NML$SETKNONODES	: NOVALUE,
    NML_SETKNOWN	: NOVALUE,
    NML_SETKNOWNALL	: NOVALUE,
    NML_SETEXE		: NOVALUE,
    NML_SETEXEALL	: NOVALUE;

!
! INCLUDE FILES:
!

LIBRARY 'LIB$:NMLLIB.L32';
LIBRARY 'SHRLIB$:NMALIBRY.L32';
LIBRARY 'SHRLIB$:NET.L32';
LIBRARY 'SYS$LIBRARY:STARLET.L32';

!
! EQUATED SYMBOLS:
!

LITERAL
    NML$K_ENTBUFLEN = 32;		! Length of entity buffer

!
! OWN STORAGE:
!

!
! Buffers and descriptors.
!
OWN
    NML$T_PRMBUFFER  : VECTOR [NML$K_QIOBFLEN, BYTE], ! Parameter (scratch) buffer
    NML$T_NFBBUFFER  : VECTOR [100, BYTE], ! NFB QIO buffer
    NML$T_P2BUFFER   : VECTOR [NML$K_P2BUFLEN,  BYTE], ! P2 QIO buffer
    NML$T_ENTBUFFER  : VECTOR [NML$K_ENTBUFLEN, BYTE]; ! Entity buffer

BIND
    NML$Q_PRMBFDSC  = UPLIT (NML$K_QIOBFLEN, NML$T_PRMBUFFER)
		      : DESCRIPTOR,
    NML$Q_NFBBFDSC   = UPLIT (%ALLOCATION(NML$T_NFBBUFFER),  NML$T_NFBBUFFER)
		      : DESCRIPTOR,
    NML$Q_P2BFDSC   = UPLIT (%ALLOCATION(NML$T_P2BUFFER),  NML$T_P2BUFFER)
		      : DESCRIPTOR;
OWN
    NML$Q_ENTBFDSC : DESCRIPTOR
		     INITIAL (0, NML$T_ENTBUFFER);

!
! EXTERNAL REFERENCES:
!

$NML_EXTDEF;

EXTERNAL LITERAL
    NML$_BADEVTUPD,
    NML$_NOSNKNOD;

EXTERNAL ROUTINE
    NML$MATCHRECORD,
    NMA$SEARCHFLD,
    NML$ADDEVENTS,
    NML$ADDFILTERS,
    NML$BLDALLDES,
    NML$BLDP2,
    NML$BLD_REPLY,
    NML$BLDSETQBF,
    NML$GETEXEID,
    NML$GETINFTABS,
    NML$GETKNOWNLIST,
    NML$GETNXTEVT,
    NML$GETNXTSNK,
    NML$GETRECOWNER,
    NML$NETQIO,
    NML$SAVEVENTS,
    NML$SEND;


%SBTTL 'NML$SETENTITY  Set volatile database parameters'
GLOBAL ROUTINE NML$SETENTITY (ENT, LEN, ADR) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine adds the specified parameters to the volatile data base
!	entry for the specified component.  The purpose of this routine is
!	to allow the same code (NML_CLEARENTITY, etc.) to be used for both
!	singular and plural entity operations.
!
! FORMAL PARAMETERS:
!
!	ENT		Entity type code.
!	LEN		Byte count of entity id string.
!	ADR		Address of entity id string.
!
!
! SIDE EFFECTS:
!
!	A NICE response message is built and transmitted.
!
!--

    BEGIN

    LOCAL
	MSGSIZE;

!
! Call the routine to process the entity.
!
    NML_SETENTITY (.ENT, .LEN, .ADR);
!
! Build and signal the response message.
!
    NML$BLD_REPLY (NML$AB_MSGBLOCK, MSGSIZE);
    NML$SEND (NML$AB_SNDBUFFER, .MSGSIZE);

    END;				! End of NML$SETENTITY

%SBTTL 'NML$SETKNOLOG  Set parameters for known logging'
GLOBAL ROUTINE NML$SETKNOLOG (ENT, DUM1, DUM2) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Add parameters to KNOWN entries in the logging volatile data base.
!
! FORMAL PARAMETERS:
!
!	ENT		Entity type code.
!	DUM1		Not used.
!	DUM2		Not used.
!
!--

BEGIN

!
! NFBs used to find out if NETACP already has entries in its database for
! each sink type.
!
    $NFBDSC	(ESINFB,	! NFB descriptor label.
		SHOW,		! Function code
		,		! No flags
		ESI,		! ACP Data base ID
		SNK		! Search key ID = Sink type
		);

LOCAL
    STATUS,
    P3,
    DUMDSC:	REF DESCRIPTOR,
    NFBDSC:	REF DESCRIPTOR,
    P2DSC : DESCRIPTOR,
    BLKDSC: DESCRIPTOR,
    SRCPTR,
    PTR;
!
! KNOWN LOGGING ALL is defined by whatever is set in the permanent data base.
!
! KNOWN LOGGING is defined by sink node. In otherwords:
! 	SET KNOWN LOG  updates the executor node logging.  This means updating
! the sink (ESI) and filter (EFI) volatile database entries which already
! exist for the executor.  Note that the ESI database applies to the
! executor node only.
!	SET KNOWN LOGGING SINK NODE updates logging for the specified sink
! node.  This means updating the filter (EFI) volatile database entries which
! already exist for that node.
!
INCR SNK FROM NMA$C_SNK_CON TO NMA$C_SNK_MON DO
    BEGIN
    !
    ! If processing a SET KNOWN LOGGING ALL command, the logging set in the
    ! permanent database determines what gets set in the volatile database.
    ! 
    IF .NML$GL_PRS_FLGS [NML$V_PRS_ALL]
    THEN
	NML_SETLOGALL (.SNK)
    ELSE    
	!
	! Determine if there are any entries in the volatile database for this
	! sink node and sink (console, file, monitor).
	!
	BEGIN
	STATUS = 0;
	!
	! If the sink node is the executor node, check to see if there's
	! anything in the sink database.
	!
	IF .NML$GL_PRS_FLGS [NML$V_PRS_EXESNK] THEN
	    BEGIN
	    NML$BLDP2 (0, .SNK, -1, 0, NML$Q_P2BFDSC, P2DSC);
	    STATUS = NML$NETQIO (ESINFB, P2DSC, P3, NML$GQ_QIOBFDSC);
	    END;
	!
	! If the sink node isn't the executor node, or there isn't anything in
	! the ESI database for the exec, check the filter (EFI) database for
	! this sink.
	!
	IF NOT .STATUS THEN
	    BEGIN
	    NML$GETINFTABS (NML$C_LOGGING, NML$C_EVENTS, NFBDSC, DUMDSC, 0);
	    NML$BLDP2 (0, .NML$GW_EVTSNKADR, -1, 0, NML$Q_P2BFDSC, P2DSC);
	    !
	    ! Get events set for specified sink node.  Then search through the
	    ! source block of events to see if any of the events are specified
	    ! for the sink currently being processed.
	    !
	    IF NML$NETQIO (.NFBDSC, P2DSC, P3, NML$GQ_QIOBFDSC) THEN
		BEGIN
		PTR = .NML$GQ_QIOBFDSC [DSC$A_POINTER];
		BLKDSC [DSC$W_LENGTH] = .(.PTR)<0,16>;
		BLKDSC [DSC$A_POINTER] = .PTR + 2;
		SRCPTR = 0;
		!
		! If any of the events are for the sink I am currently
		! working on, then do the SET for that sink.
		!
		STATUS = NML$GETNXTSNK (BLKDSC, .SNK, SRCPTR);
		END;
	    END;
	IF .STATUS THEN
	    !
	    ! Either the EFI or the ESI volatile database already has an entry
	    ! for this sink (File, console, or monitor).  So do the update.
	    !
	    NML$SETLOGGING (.ENT, .SNK, 0);
	END;
    END;

END;				! End of NML$SETKNOLOG

%SBTTL 'NML$SETLOGGING  Set logging parameters'
GLOBAL ROUTINE NML$SETLOGGING (ENT, SNK, DUM2) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Add parameters to the volatile data base entry for the specified
!	logging entity.
!
! FORMAL PARAMETERS:
!
!	ENT		Entity type code.
!	SNK		Logging sink type.
!	DUM2		Not used.
!
! IMPLICIT INPUTS:
!
!	NML$GL_PRS_FLGS	Message parsing flags.
!	NML$GW_EVTSNKADR Sink node address.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
! 	A NICE response message is built and transmitted.
!
!--

    BEGIN

    LOCAL
	MSG_SIZE;			! Message size
!
! Check the parsing flags to see if this is a SET ALL function.
!
    IF .NML$GL_PRS_FLGS [NML$V_PRS_ALL]
    THEN
	NML_SETLOGALL (.SNK)
    ELSE
	BEGIN
!
! Decide if the parameter group is for filters (EFI) or sinks (ESI).
!
	IF .NML$GL_PRS_FLGS [NML$V_PRS_ESIPG]
	THEN
	    NML_SETENTITY (NML$C_SINK, 1, SNK)
	ELSE
	    NML_SETLOGGING (.SNK, .NML$GW_EVTSNKADR);

	END;
!
! Add entity id (sink type code) to entity buffer.
!
    NML$Q_ENTBFDSC [DSC$W_LENGTH] = 1;
    NML$Q_ENTBFDSC [DSC$A_POINTER] = NML$T_ENTBUFFER;
    NML$T_ENTBUFFER<0,8> = .SNK;
!
! Add entity descriptor to message information.
!
    NML$AB_MSGBLOCK [MSB$V_ENTD_FLD] = 1;
    NML$AB_MSGBLOCK [MSB$A_ENTITY] = NML$Q_ENTBFDSC;
!
! Build and send the message.
!
    NML$BLD_REPLY (NML$AB_MSGBLOCK, MSG_SIZE);
    NML$SEND (NML$AB_SNDBUFFER, .MSG_SIZE); ! Send message

    END;				! End of NML$SETLOGGING

%SBTTL 'NML_SETLOGGING  Set logging parameters'
ROUTINE NML_SETLOGGING (SNK, SNKADR) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine performs common SET functions for both singular
!	and plural logging volatile data base operations.
!
! FORMAL PARAMETERS:
!
!	SNK		Logging sink type.
!	SNKADR		Sink node address.
!
!--

    BEGIN

    MAP
	SNKADR : WORD;

    LOCAL
	DB,				! Database ID
	SRCHKEY,			! Search key
	DUMDSC : REF DESCRIPTOR,	! Dummy descriptor for table
	EVTADR,				! Address of event parameter
	EVTLEN,				! Length of event parameter
	NFBDSC : REF DESCRIPTOR,
	P3,				! Byte count of data returned by NETACP.
	P2DSC  : DESCRIPTOR,
	QBFDSC : DESCRIPTOR,
	RECDSC : DESCRIPTOR,
	STATUS,
	TABDES : REF DESCRIPTOR,
	UPDFLG;				! Data base update flag

    RECDSC [DSC$W_LENGTH] = 2;		! Initial descriptor
    RECDSC [DSC$A_POINTER] = .NML$GQ_RECBFDSC [DSC$A_POINTER];

    NML$GETINFTABS (NML$C_LOGGING, NML$C_EVENTS, NFBDSC, DUMDSC, 0);
    NML$BLDP2 (0, .SNKADR, -1, 0, NML$Q_P2BFDSC, P2DSC);

    STATUS = NML$NETQIO (.NFBDSC, P2DSC, P3, NML$GQ_QIOBFDSC);

    IF NOT .STATUS AND (.STATUS NEQ NML$_STS_CMP)
    THEN
	RETURN;

    IF .STATUS
    THEN
	BEGIN

	EVTLEN = .(.NML$GQ_QIOBFDSC [DSC$A_POINTER])<0,16>;
	EVTADR = .NML$GQ_QIOBFDSC [DSC$A_POINTER] + 2;

	END
    ELSE
	!
	! There is no entry for this sink in NETACPs filter (EFI) database.
	! Create a null permanent data base entry to which the filter info
	! from the NICE command will be added.
	!
	BEGIN
	EVTLEN = 0;
	EVTADR = 0;
	END;

    IF NOT NML$SAVEVENTS (NML$GQ_RECBFDSC,
			  .EVTLEN,
			  .EVTADR,
			  RECDSC)
    THEN
	RETURN;
!
! Add event to record.  If this fails then just return.  The error message
! information will already be set up in the message block.
!
    IF NOT NML$ADDEVENTS (TRUE, RECDSC, .SNK, .SNKADR, UPDFLG)
    THEN
	RETURN;

    IF NOT .UPDFLG
    THEN
	BEGIN

	NML$AB_MSGBLOCK [MSB$L_FLAGS] = MSB$M_MSG_FLD;
	NML$AB_MSGBLOCK [MSB$B_CODE]  = NMA$C_STS_MPR;
	NML$AB_MSGBLOCK [MSB$L_TEXT]  = NML$_BADEVTUPD;
	RETURN;

	END;
!
! If event field was added successfully, then update the volatile data base.
!
    DB = .NML$AB_ENTITYDATA [NML$C_LOGGING, EIT$B_DATABASE];
    SRCHKEY = .NML$AB_ENTITYDATA [NML$C_LOGGING, EIT$L_SRCHKEY];
    TABDES = .NML$AB_ENTITYDATA [NML$C_LOGGING, EIT$A_ALLTAB]; ! Table for SET
!
! Build the QIO buffer.
!
    NML$BLDALLDES (RECDSC, .TABDES);
    NML$BLDSETQBF (NFB$C_FC_SET, .DB, 
			.SRCHKEY, 0, SNKADR,
			NML$Q_NFBBFDSC, NFBDSC,
			NML$Q_P2BFDSC, P2DSC,
			NML$GQ_QIOBFDSC, QBFDSC);
!
! Set the event information into the volatile data base.
!
    IF NML$NETQIO (NFBDSC, P2DSC, 0, QBFDSC)
    THEN
	BEGIN

	NML$AB_MSGBLOCK [MSB$L_FLAGS] = 0;
	NML$AB_MSGBLOCK [MSB$B_CODE]  = NMA$C_STS_SUC;

	END;

    RETURN;

    END;				! End of NML_SETLOGGING

%SBTTL 'NML_SETLOGALL  Set all logging parameters'
ROUTINE NML_SETLOGALL (SNK) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine sets all permanent parameters for the specified
!	logging sink type into the volatile data base.
!
! FORMAL PARAMETERS:
!
!	SNK
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	DB,				! Database ID
	SRCHKEY,			! Search key
	ENTADD,
	ENTLEN,
	FID,				! File id code
	KEY    : WORD,
	OWNER,				! Search key
	NFBDSC : DESCRIPTOR,		! NFB buffer descriptor
	P2DSC  : DESCRIPTOR,		! QIO P2 buffer descriptor
	QBFDSC : DESCRIPTOR,		! QIO P4 buffer descriptor
	RECDSC : DESCRIPTOR,		! Record descriptor
	SETDSC : DESCRIPTOR,		! Event parameter descriptor
	STATUS,
	TABDES : REF DESCRIPTOR,	! Table for SET ALL
	TMPSNK;
!
! Get entity information.
!
    DB     = .NML$AB_ENTITYDATA [NML$C_LOGGING, EIT$B_DATABASE];
    SRCHKEY= .NML$AB_ENTITYDATA [NML$C_LOGGING, EIT$L_SRCHKEY];
    FID    = .NML$AB_ENTITYDATA [NML$C_LOGGING, EIT$B_FILEID];
    OWNER  = .NML$AB_ENTITYDATA [NML$C_LOGGING, EIT$W_KEY];
    TABDES = .NML$AB_ENTITYDATA [NML$C_LOGGING, EIT$A_ALLTAB];
!
! Set the sink parameters.
!
    IF NOT NML_SETENTITY (NML$C_SINK, 1, SNK)
    THEN
	RETURN;
!
! At this point, it is assumed that the logging permanent data base file
! is open.
!
    STATUS = NML$_STS_SUC;		! Initialize status
    KEY = 0;				! Start at beginning of file
    WHILE NML$MATCHRECORD (.FID,
			   NML$GQ_RECBFDSC,
			   KEY,
			   .OWNER,
			   0,
			   0,
			   RECDSC) DO
	BEGIN
!
! Get entity id.
!
	ENTADD = 0;
	STATUS = NMA$SEARCHFLD (RECDSC, .OWNER, ENTLEN, ENTADD);
!
! If no sink node address was found in the record then something is
! wrong with this record in the file.
!
	IF NOT .STATUS
	THEN
	    BEGIN

	    NML$AB_MSGBLOCK [MSB$L_FLAGS]  = MSB$M_DET_FLD OR
					     MSB$M_MSG_FLD;
	    NML$AB_MSGBLOCK [MSB$B_CODE]   = NMA$C_STS_FCO;
	    NML$AB_MSGBLOCK [MSB$W_DETAIL] = NMA$C_FOPDTL_PDB;
	    NML$AB_MSGBLOCK [MSB$L_TEXT]   = NML$_NOSNKNOD;
	    RETURN;

	    END;
!
! Find event parameter in record.  If it is not found then skip this record.
!
	SETDSC [DSC$A_POINTER] = 0;
	STATUS = NMA$SEARCHFLD (RECDSC,
				NMA$C_PCLO_EVE,
				SETDSC [0,0,32,0],
				SETDSC [DSC$A_POINTER]);
	IF .STATUS
	THEN
	    BEGIN
!
! Build QIO buffer.
!
	    TMPSNK = .(.ENTADD)<0,16>;	! Convert address to longword
	    IF NML_ADDALLFIL (RECDSC, SETDSC, .SNK, .TMPSNK) THEN
		BEGIN
                NML$BLDALLDES (RECDSC, .TABDES); ! Build parameter descriptors
	        NML$BLDSETQBF (NFB$C_FC_SET, .DB, 
				.SRCHKEY, 0, TMPSNK,
				NML$Q_NFBBFDSC, NFBDSC,
				NML$Q_P2BFDSC, P2DSC,
				NML$GQ_QIOBFDSC, QBFDSC);
!
! Add the parameters to volatile data base entry.
!
                STATUS = NML$NETQIO (NFBDSC, P2DSC, 0, QBFDSC);
	        IF NOT .STATUS
	        THEN
		    EXITLOOP;
		END;
	    END
	ELSE
	    STATUS = NML$_STS_SUC;		! Reset return status

	KEY = .KEY + 1;			! Increment record key

	END;
!
! If the operation was successful then set up the successful response 
! message.
!
    IF .STATUS
    THEN
	BEGIN

	NML$AB_MSGBLOCK [MSB$L_FLAGS] = 0;
	NML$AB_MSGBLOCK [MSB$B_CODE]  = NMA$C_STS_SUC;

	END;

    END;				! End of NML_SETLOGALL

%SBTTL 'NML_ADDALLFIL  Add all logging filters'
ROUTINE NML_ADDALLFIL (RECDSC, SETDSC, SNK, SNKADR) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine adds all permanent filters to the volatile filters
!	for the specified sink type and sink node.
!
! FORMAL PARAMETERS:
!
!	RECDSC		Descriptor of permanent data base record.
!	SETDSC		Descriptor of existing event parameter.
!	SNK		Logging sink type.
!	SNKADR		Sink node address.
!
! IMPLICIT INPUTS:
!
!	NML$GB_EVTMSKTYP .
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	RECDSC : REF DESCRIPTOR,
	SETDSC : REF DESCRIPTOR,
	SNKADR : WORD;

    LOCAL
	DUMDSC : REF DESCRIPTOR,
	ENTDSC : DESCRIPTOR,
	EVEDSC : DESCRIPTOR,
	EVTPTR : REF BBLOCK,
	NFBDSC : REF DESCRIPTOR,
	P2DSC  : DESCRIPTOR,
	SRCPTR : REF BBLOCK,
	STATUS;

!
! If there is an entry in the volatile data base then update it with the
! permanent data base information.  If no entry exists then create one.
!
    !
    ! Get the sink's entry in the volatile data base, if there is one.
    !
    NML$GETINFTABS (NML$C_LOGGING, NML$C_EVENTS, NFBDSC, DUMDSC, 0);
    NML$BLDP2 (0, .SNKADR, -1, 0, NML$Q_P2BFDSC, P2DSC);
    STATUS = NML$NETQIO (.NFBDSC, P2DSC, 0, NML$GQ_QIOBFDSC);

    IF .STATUS
    THEN
	BEGIN
	!
	! Convert the volatile data base information into permanent data
	! base format.  The filters from the permanent data base will be
	! added to this.
	!
	EVEDSC [DSC$W_LENGTH] = .(.NML$GQ_QIOBFDSC [DSC$A_POINTER])<0,16>;
	EVEDSC [DSC$A_POINTER] = NML$T_PRMBUFFER;

	CH$MOVE (.EVEDSC [DSC$W_LENGTH],
		 .NML$GQ_QIOBFDSC [DSC$A_POINTER] + 2,
		 NML$T_PRMBUFFER);
	END
    ELSE
	BEGIN

	IF .STATUS EQL NML$_STS_CMP
	THEN
	    BEGIN
	    !
	    ! Since there was no entry for the sink in the volatile data base,
	    ! create a null permanent data base entry to which the filters
	    ! from the permanent data base will be added.
	    !
	    EVEDSC [DSC$W_LENGTH] = 0;
	    EVEDSC [DSC$A_POINTER] = NML$T_PRMBUFFER;

	    END
	ELSE
	    RETURN .STATUS;

	END;
!
! Now go through the permenent data base record for this sink node and
! add the sink's filters to the volatile data base filters (which are now
! in permanent data base format).
!
    STATUS = NML$_STS_PMS;
    SRCPTR = 0;
    WHILE NML$GETNXTSNK (.SETDSC, .SNK, SRCPTR) DO
	BEGIN
	STATUS = NML$_STS_SUC;		! At least one new filter was found for
					! sink.
!
! Each event source type is handled differently.
!
	SELECTONEU .SRCPTR [SRC$B_SRCTYPE] OF
	    SET

	    [NMA$C_ENT_CIR, NMA$C_ENT_LIN]:	! Circuit or Line source
		BEGIN
		ENTDSC [DSC$W_LENGTH] = .SRCPTR [SRC$B_DEVLENGTH];
		ENTDSC [DSC$A_POINTER] = SRCPTR [SRC$T_DEVICEID];
		END;

	    [NMA$C_ENT_NOD]:		! Node source
		BEGIN
		ENTDSC [DSC$W_LENGTH] = 0;
		ENTDSC [DSC$A_POINTER] = .SRCPTR [SRC$W_NODADR];
		END;

	    [OTHERWISE]:		! Null source
		BEGIN
		ENTDSC [DSC$W_LENGTH] = 0;
		ENTDSC [DSC$A_POINTER] = 0;
		END;
	    TES;

	NML$GB_EVTMSKTYP = 0;		! Set to add individual filters
	EVTPTR = 0;
	WHILE NML$GETNXTEVT (.SRCPTR, EVTPTR) DO
	    BEGIN
!
! Add all the SET filters.
!
	    STATUS = NML$ADDFILTERS (1,
				     NML$Q_PRMBFDSC,
				     .SNK,
				     .SRCPTR [SRC$B_SRCTYPE],
				     ENTDSC,
				     .EVTPTR [EVT$W_CLASS],
				     8,
				     EVTPTR [EVT$Q_LOGMSK],
				     EVEDSC);
!
! If that was successful then add all the CLEAR filters.
!
	    IF .STATUS
	    THEN
		STATUS = NML$ADDFILTERS (0,
					 NML$Q_PRMBFDSC,
					 .SNK,
					 .SRCPTR [SRC$B_SRCTYPE],
					 ENTDSC,
					 .EVTPTR [EVT$W_CLASS],
					 8,
					 EVTPTR [EVT$Q_FILTERMSK],
					 EVEDSC);
	    IF NOT .STATUS
	    THEN
		BEGIN

		NML$AB_MSGBLOCK [MSB$L_FLAGS] = MSB$M_MSG_FLD;
		NML$AB_MSGBLOCK [MSB$B_CODE]  = NMA$C_STS_MPR;
		NML$AB_MSGBLOCK [MSB$L_TEXT]  = NML$_BADEVTUPD;
		RETURN .STATUS;

		END;
	    END;
	END;
!
! If the permanent data base filter record contained at least one event
! filter for the sink,
! store the modified filters in the temporary data base record.  If there
! were no filters for the sink, no update will be done to the volatile
! data base.
!
    IF .STATUS THEN
	STATUS = NML$SAVEVENTS (NML$GQ_RECBFDSC,
			    .EVEDSC [DSC$W_LENGTH],
			    .EVEDSC [DSC$A_POINTER],
			    .RECDSC);
    RETURN .STATUS
    END;				! End of NML_ADDALLFIL

%SBTTL 'NML_SETENTITY  Set volatile database parameters'
ROUTINE NML_SETENTITY (ENT, LEN, ADR) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine adds the specified parameters to the volatile data base
!	entry for the specified component.
!
! FORMAL PARAMETERS:
!
!	ENT		Entity type code.
!	LEN		Byte count of entity id string.
!	ADR		Address of entity id string.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	The translated status of the SET QIO is returned.
!--

BEGIN

LOCAL
	DB,				! Database ID 
	SRCHKEY,			! Search key
	DETAIL : WORD,			! NICE error detail code
	FID,				! File id code
	KEY : WORD,
	OWNER,				! Search key
	NFBDSC : DESCRIPTOR,		! NFB buffer descriptor
	P2DSC  : DESCRIPTOR,		! QIO P2 buffer descriptor
	QBFDSC : DESCRIPTOR,		! QIO P4 buffer descriptor
	RECDSC : DESCRIPTOR,		! Record descriptor
	STATUS,
	TABDES : REF DESCRIPTOR;

STATUS = NML$_STS_SUC;
!
! Get entity information.
!
DB      = .NML$AB_ENTITYDATA [.ENT, EIT$B_DATABASE];! Database ID
SRCHKEY = .NML$AB_ENTITYDATA [.ENT, EIT$L_SRCHKEY]; ! Search key
DETAIL  = .NML$AB_ENTITYDATA [.ENT, EIT$W_DETAIL]; ! NICE error detail
FID     = .NML$AB_ENTITYDATA [.ENT, EIT$B_FILEID]; ! File id code
OWNER   = .NML$AB_ENTITYDATA [.ENT, EIT$W_KEY];    ! Search key
TABDES  = .NML$AB_ENTITYDATA [.ENT, EIT$A_ALLTAB]; ! Table for SET ALL
!
! If no parameters were specified in the NICE message then all parameters
! from the permanent data base should be used.
!
IF .NML$GL_PRS_FLGS [NML$V_PRS_ALL]
THEN
	BEGIN
	!
	! Find a permanent data base entry for this entity.  If one is not
	! found then create a descriptor for a null record.
	!
	KEY = 0;
	IF NOT NML$MATCHRECORD (.FID,
				NML$GQ_RECBFDSC,
				KEY,
				.OWNER,
				.LEN,
				.ADR,
				RECDSC)
	THEN
		BEGIN
		!
		! If no data base record was found for a logging sink then
		! just return.  This check avoids extraneous error messages
		! as the result of the NCP SET KNOWN LOGGING ALL command.
		! For all other entities use a null record.
		!
		IF .ENT EQLU NML$C_SINK
		THEN
			RETURN NML$_STS_SUC;

		RECDSC [DSC$W_LENGTH]  = 2;
		RECDSC [DSC$A_POINTER] = .NML$GQ_RECBFDSC [DSC$A_POINTER];
		END;

	NML$BLDALLDES (RECDSC, .TABDES); ! Build descriptors

	END;

IF .STATUS
THEN
	BEGIN

	!
	! Add the parameters to volatile data base entry.
	!
	NML$BLDSETQBF (NFB$C_FC_SET, .DB, 
			.SRCHKEY, .LEN, .ADR,
			NML$Q_NFBBFDSC, NFBDSC,
			NML$Q_P2BFDSC, P2DSC,
			NML$GQ_QIOBFDSC, QBFDSC);
	STATUS = NML$NETQIO (NFBDSC, P2DSC, 0, QBFDSC);

	IF .STATUS
	THEN
		BEGIN

		NML$AB_MSGBLOCK [MSB$L_FLAGS] = 0;
		NML$AB_MSGBLOCK [MSB$B_CODE] = NMA$C_STS_SUC;

		END;
	END;

RETURN .STATUS

END;				! End of NML_SETENTITY

%SBTTL 'NML$SETLINE  Set volatile line parameters'
GLOBAL ROUTINE NML$SETLINE (ENT, LEN, ADR) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine adds the specified parameters to the volatile data base
!	entry for the specified line.  This routine will eventually provide
!	support for wildcards in the line id.
!
! FORMAL PARAMETERS:
!
!	ENT		Entity type code.
!	LEN		Byte of line id string.
!	ADR		Address of line id string.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN
!
! Call normal entity routine to handle line parameters.
!
    NML$SETENTITY (.ENT, .LEN, .ADR);

    END;				! End of NML$SETLINE

%SBTTL 'NML$SETEXECUTOR  Set executor parameters'
GLOBAL ROUTINE NML$SETEXECUTOR (ENT, DUM1, DUM2) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine adds the specified parameters to the volatile data base
!	entry for the executor node.
!
! FORMAL PARAMETERS:
!
!	ENT		Entity code.
!	DUM1		Not used.
!	DUM2		Not used.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN
!
! If no parameters were specified in the NICE message then all parameters
! from the permanent data base should be used.
!
    IF .NML$GL_PRS_FLGS [NML$V_PRS_ALL]
    THEN
	NML_SETEXEALL ()
    ELSE
	NML_SETEXE ();

    END;				! End of NML$SETEXECUTOR

%SBTTL 'NML$SETKNOWN  Set volatile entity parameters'
GLOBAL ROUTINE NML$SETKNOWN (ENT, DUM1, DUM2) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine sets the specified parameters for each of the components
!	of the given entity type.
!
! FORMAL PARAMETERS:
!
!	ENT		Entity type code.
!	DUM1		Not used.
!	DUM2		Not used.
!
!--

BEGIN
!
! If this no parameters specified then add all permanent data base information
! to volatile data base.
!
IF .NML$GL_PRS_FLGS [NML$V_PRS_ALL]
THEN
	NML_SETKNOWNALL (.ENT)
ELSE
	NML_SETKNOWN (.ENT);

END;				! End of NML$SETKNOWN


%SBTTL 'NML$SETKNONODES  Set volatile node parameters'
GLOBAL ROUTINE NML$SETKNONODES (ENT, DUM1, DUM2) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine sets the specified parameters for each of the nodes.
!
! FORMAL PARAMETERS:
!
!	ENT		Entity type code.
!	DUM1		Not used.
!	DUM2		Not used.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN
!
! If this no parameters specified then add all permanent data base information
! to volatile data base.
!
    IF .NML$GL_PRS_FLGS [NML$V_PRS_ALL]
    THEN
	BEGIN
	NML_SETEXEALL ();
	NML_SETKNOWNALL (NML$C_NODE);
	NML_SETKNOWNALL (NML$C_LOOPNODE);

	END
    ELSE
	BEGIN
	NML_SETEXE ();
	NML_SETKNOWN (NML$C_NODE);

	END;

    END;				! End of NML$SETKNONODES


%SBTTL 'NML_SETKNOWN  Set volatile entity parameters'
ROUTINE NML_SETKNOWN (ENT) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine sets the specified parameters for each of the components
!	of the given entity type.
!
! INPUTS:
!
!	ENT		Entity type code.
!
!--

BEGIN

LOCAL
	BUFEND,
	DB,				! Database ID
	SRCHKEY,			! Search key
	ENTADD,
	ENTLEN,
	LISDSC   : DESCRIPTOR,
	MSGSIZE,
	ENTIDPTR,
	PTR,
	NFBDSC   : DESCRIPTOR,		! NFB buffer descriptor
	P2DSC    : DESCRIPTOR,		! QIO P2 buffer descriptor
	QBFDSC   : DESCRIPTOR,		! QIO P2 buffer descriptor
	STATUS,
	STRTFLG;
!
! Build QIO buffer.
!
DB      = .NML$AB_ENTITYDATA [.ENT, EIT$B_DATABASE]; ! Database ID
SRCHKEY = .NML$AB_ENTITYDATA [.ENT, EIT$L_SRCHKEY];  ! Search key
!
! Process every entry in the data base.
!
STRTFLG = FALSE;
WHILE NML$GETKNOWNLIST (.ENT, .STRTFLG, LISDSC) DO
	BEGIN

	STRTFLG = TRUE;

	BUFEND = .LISDSC [DSC$A_POINTER] + .LISDSC [DSC$W_LENGTH];
	PTR = .LISDSC [DSC$A_POINTER];

	WHILE .PTR LSSA .BUFEND DO
		BEGIN

		ENTIDPTR = NML$T_ENTBUFFER;
		NML$Q_ENTBFDSC [DSC$W_LENGTH] = NML$K_ENTBUFLEN;
!
! Get entity id for SET QIO and id string for response message.
!
		SELECTONEU .ENT OF
			SET

			[NML$C_CIRCUIT, NML$C_LINE, NML$C_OBJECT]:
				BEGIN

				ENTLEN = .(.PTR)<0,16>;
				PTR = .PTR + 2;
				ENTADD = .PTR;
				CH$WCHAR_A (.ENTLEN, ENTIDPTR);
				ENTIDPTR = CH$MOVE (.ENTLEN,
						.ENTADD,
						.ENTIDPTR);
				PTR = .PTR + .ENTLEN;
				END;

			[NML$C_NODE]:
				BEGIN

				PTR = .PTR + 4; ! Skip loopnode flag.
				ENTADD = .PTR;	! Point to node address

				ENTIDPTR = CH$MOVE (2, .PTR, .ENTIDPTR);
				PTR = .PTR + 4;

				ENTLEN = .(.PTR)<0,8>; ! Get name length
				PTR = .PTR + 2;
				CH$WCHAR_A (.ENTLEN, ENTIDPTR);
				ENTIDPTR = CH$MOVE (.ENTLEN, .PTR, .ENTIDPTR);
				PTR = .PTR + .ENTLEN;
				ENTLEN = 2;	! Get length of node address
				END;

			[OTHERWISE]:		! ** Error **
				BEGIN

				ENTLEN = 0;
				ENTADD = 0;

				PTR = 0;

				END;
			TES;

		NML$Q_ENTBFDSC [DSC$W_LENGTH] = .ENTIDPTR - NML$T_ENTBUFFER;
		!
		! Add the parameters to volatile data base entry.
		!
		NML$BLDSETQBF (NFB$C_FC_SET, .DB, 
				.SRCHKEY, .ENTLEN, .ENTADD,
				NML$Q_NFBBFDSC, NFBDSC,
				NML$Q_P2BFDSC, P2DSC,
				NML$GQ_QIOBFDSC, QBFDSC);

		IF NML$NETQIO (NFBDSC, P2DSC, 0, QBFDSC)
		THEN
			BEGIN

			NML$AB_MSGBLOCK [MSB$L_FLAGS] = 0;
			NML$AB_MSGBLOCK [MSB$B_CODE] = NMA$C_STS_SUC;

			END;
		!
		! Add the entity identification to the message.
		!
		NML$AB_MSGBLOCK [MSB$V_ENTD_FLD] = 1;
		NML$AB_MSGBLOCK [MSB$A_ENTITY] = NML$Q_ENTBFDSC;
		!
		! Build and send the response message.
		!
		NML$BLD_REPLY (NML$AB_MSGBLOCK, MSGSIZE);
		NML$SEND (NML$AB_SNDBUFFER, .MSGSIZE);

		END;
	END;

END;				! End of NML_SETKNOWN


%SBTTL 'NML_SETKNOWNALL  Set volatile database parameters'
ROUTINE NML_SETKNOWNALL (ENT) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine sets all permanent parameters for the specified
!	entity type into the volatile data base.
!
! INPUTS:
!
!	ENT		Entity type code.
!
!--

BEGIN

LOCAL
	BUFEND,
	DB,				! Database ID
	SRCHKEY,			! Search key
	ENTADD,
	ENTLEN,
	FID,				! File id code
	FLDADR,
	FLDSIZE,
	KEY : WORD,
	MSGSIZE,
	OWNER,				! Search key
	NFBDSC   : DESCRIPTOR,		! NFB buffer descriptor
	P2DSC    : DESCRIPTOR,		! QIO P2 buffer descriptor
	QBFDSC   : DESCRIPTOR,		! QIO P2 buffer descriptor
	RECDSC : DESCRIPTOR,		! Record descriptor
	STATUS,
	TABDES : REF DESCRIPTOR;	! Table for SET ALL

!
! Get entity information.
!
DB      = .NML$AB_ENTITYDATA [.ENT, EIT$B_DATABASE];   ! Database ID
SRCHKEY = .NML$AB_ENTITYDATA [.ENT, EIT$L_SRCHKEY];   ! Search key
FID     = .NML$AB_ENTITYDATA [.ENT, EIT$B_FILEID]; ! File id code
OWNER   = .NML$AB_ENTITYDATA [.ENT, EIT$W_KEY];    ! Search key
TABDES  = .NML$AB_ENTITYDATA [.ENT, EIT$A_ALLTAB]; ! Table for SET ALL

KEY = 0;
WHILE NML$MATCHRECORD (.FID, NML$GQ_RECBFDSC, KEY, .OWNER, 0, 0, RECDSC) DO
	BEGIN

	NML$AB_MSGBLOCK [MSB$B_CODE] = 0; ! Reset status code
	!
	! Get entity id.
	!
	ENTADD = 0;

	STATUS = NMA$SEARCHFLD (RECDSC, .OWNER, ENTLEN, ENTADD);
	!
	! Get entity id for SET QIO and id string for response message.
	!
	SELECTONEU .ENT OF
		SET

		[NML$C_LOOPNODE]:
			BEGIN
			!
			! Id for loop node is node name.
			!
			ENTADD = 0;
			STATUS = NMA$SEARCHFLD (RECDSC,
						NMA$C_PCNO_NNA,
						ENTLEN,
						ENTADD);
			END;

		[NML$C_NODE]:
			BEGIN
			!
			! If this is the executor node record then skip it
			! because it has already been done.
			!
			FLDADR = 0;
			IF NMA$SEARCHFLD (RECDSC, NML$C_KEY_EXE,
						FLDSIZE, FLDADR)
			THEN
				STATUS = NML$_STS_CMP; 

			END;
		TES;

	IF .STATUS
	THEN
		BEGIN
		!
		! Build QIO buffer.
		!
		NML$BLDALLDES (RECDSC, .TABDES); ! Build parameter descriptors
		NML$BLDSETQBF (NFB$C_FC_SET, .DB, 
				.SRCHKEY, .ENTLEN, .ENTADD,
				NML$Q_NFBBFDSC, NFBDSC,
				NML$Q_P2BFDSC, P2DSC,
				NML$GQ_QIOBFDSC, QBFDSC);
		!
		! Add the parameters to volatile data base entry.
		!
		IF NML$NETQIO (NFBDSC, P2DSC, 0, QBFDSC)
		THEN
			BEGIN

		        NML$AB_MSGBLOCK [MSB$L_FLAGS] = 0;
		        NML$AB_MSGBLOCK [MSB$B_CODE] = NMA$C_STS_SUC;

		        END;
		!
		! Add the entity identification to the response message.
		!
		NML$Q_ENTBFDSC [DSC$W_LENGTH] = NML$K_ENTBUFLEN;

		NML$GETRECOWNER (RECDSC,
				.ENT,
				NML$Q_ENTBFDSC, 
				NML$Q_ENTBFDSC [DSC$W_LENGTH]);

		NML$AB_MSGBLOCK [MSB$V_ENTD_FLD] = 1;
		NML$AB_MSGBLOCK [MSB$A_ENTITY] = NML$Q_ENTBFDSC;
		!
		! Build and send the response message.
		!
		NML$BLD_REPLY (NML$AB_MSGBLOCK, MSGSIZE);
		NML$SEND (NML$AB_SNDBUFFER, .MSGSIZE);

		END;

	KEY = .KEY + 1;			! Increment record key

	END;

END;				! End of NML_SETKNOWNALL

%SBTTL 'NML_SETEXE  Set executor parameters'
ROUTINE NML_SETEXE : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine adds the specified parameters to the volatile data base
!	entry for the executor node.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	DB,				! Database ID
	SRCHKEY,			! Search key
	ENTADD,
	ENTLEN,
	MSGSIZE,
	NODADDR,
	NFBDSC   : DESCRIPTOR,		! NFB buffer descriptor
	P2DSC    : DESCRIPTOR,		! QIO P2 buffer descriptor
	QBFDSC   : DESCRIPTOR;		! QIO P2 buffer descriptor

!
! If executor specific parameters, use the local node database,
! otherwise, use the node database.
!
IF .NML$GL_PRS_FLGS [NML$V_PRS_EXEPG]
    THEN
	BEGIN

	DB = NFB$C_DB_LNI; 
	SRCHKEY = NFB$C_WILDCARD;
	ENTLEN = -1;				! No id necessary for
	ENTADD = 0;				!  executor parameters

	END
    ELSE
	BEGIN

	DB = NFB$C_DB_NDI;
	SRCHKEY = NFB$C_NDI_ADD;
	NODADDR = 0;				! Zero node address
	ENTLEN = 2;
	ENTADD = NODADDR;

	END;

  NML$BLDSETQBF (NFB$C_FC_SET, .DB, 
		.SRCHKEY, .ENTLEN, .ENTADD,
		NML$Q_NFBBFDSC, NFBDSC,
		NML$Q_P2BFDSC,  P2DSC,
		NML$GQ_QIOBFDSC, QBFDSC);
!
! Add the parameters to volatile data base entry.
!
    IF NML$NETQIO (NFBDSC, P2DSC, 0, QBFDSC)
    THEN
	BEGIN

	NML$AB_MSGBLOCK [MSB$L_FLAGS] = 0;
	NML$AB_MSGBLOCK [MSB$B_CODE] = NMA$C_STS_SUC;

	END;
!
! Add the entity identification to the message.
!
    NML$GETEXEID (NML$Q_ENTBFDSC, NML$Q_ENTBFDSC [DSC$W_LENGTH]);
    NML$AB_MSGBLOCK [MSB$V_ENTD_FLD] = 1;
    NML$AB_MSGBLOCK [MSB$A_ENTITY] = NML$Q_ENTBFDSC;
!
! Build and signal the response message.
!
    NML$BLD_REPLY (NML$AB_MSGBLOCK, MSGSIZE);
    NML$SEND (NML$AB_SNDBUFFER, .MSGSIZE);

    END;				! End of NML_SETEXE

%SBTTL 'NML_SETEXEALL  Set all executor parameters'
ROUTINE NML_SETEXEALL : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine sets all executor parameters from the permanent data base
!	into the volatile data base.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	This routine assumes the node data base file is open.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	EXEADR,
	FID,
	KEY : WORD,
	MSGSIZE,
	NFBDSC   : DESCRIPTOR,		! NFB buffer descriptor
	P2DSC    : DESCRIPTOR,		! QIO P2 buffer descriptor
	QBFDSC   : DESCRIPTOR,		! QIO P2 buffer descriptor
	RECDSC   : DESCRIPTOR,
	STATUS;
!
! Read executor node record.  If one does not exist then create a
! descriptor for a null record.
!
    KEY = 0;
    IF NOT NML$MATCHRECORD (NMA$C_OPN_NODE,
			   NML$GQ_RECBFDSC,
			   KEY,
			   NML$C_KEY_EXE,
			   0,
			   0,
			   RECDSC)
    THEN
	BEGIN

	RECDSC [DSC$W_LENGTH]  = 2;
	RECDSC [DSC$A_POINTER] = .NML$GQ_RECBFDSC [DSC$A_POINTER];

	END;
!
! Build a parameter descriptor for each parameter that is set in the record
! and set it in the volatile data base.
!
    NML$BLDALLDES (RECDSC,
		   .NML$AB_ENTITYDATA [NML$C_EXECUTOR, EIT$A_ALLTAB]);
    NML$BLDSETQBF (NFB$C_FC_SET, NFB$C_DB_LNI, 
			NFB$C_WILDCARD, -1, 0,
			NML$Q_NFBBFDSC, NFBDSC,
			NML$Q_P2BFDSC, P2DSC,
			NML$GQ_QIOBFDSC, QBFDSC);
    STATUS = NML$NETQIO (NFBDSC, P2DSC, 0, QBFDSC);
!
! If the first operation was successful then repeat the operation for the
! parameters that the executor has in common with remote nodes.  Otherwise
! send an error response message.
!
    IF .STATUS
    THEN
	BEGIN

	NML$BLDALLDES (RECDSC, .NML$AB_ENTITYDATA [NML$C_NODE, EIT$A_ALLTAB]);
	EXEADR = 0;
	NML$BLDSETQBF (NFB$C_FC_SET, NFB$C_DB_NDI, 
			NFB$C_NDI_ADD, 0, EXEADR,
			NML$Q_NFBBFDSC, NFBDSC,
			NML$Q_P2BFDSC, P2DSC,
			NML$GQ_QIOBFDSC, QBFDSC);

	IF NML$NETQIO (NFBDSC, P2DSC, 0, QBFDSC)
	THEN
	    BEGIN

	    NML$AB_MSGBLOCK [MSB$L_FLAGS] = 0;
	    NML$AB_MSGBLOCK [MSB$B_CODE] = NMA$C_STS_SUC; ! Successful

	    END;
	END;
!
! Add the executor entity descriptor to the message.
!
    NML$Q_ENTBFDSC [DSC$W_LENGTH] = NML$K_ENTBUFLEN;

    NML$GETRECOWNER (RECDSC,
		     NML$C_EXECUTOR,
		     NML$Q_ENTBFDSC, 
		     NML$Q_ENTBFDSC [DSC$W_LENGTH]);

    NML$AB_MSGBLOCK [MSB$V_ENTD_FLD] = 1;
    NML$AB_MSGBLOCK [MSB$A_ENTITY] = NML$Q_ENTBFDSC;
!
! Build and send the response message.
!
    NML$BLD_REPLY (NML$AB_MSGBLOCK, MSGSIZE);
    NML$SEND (NML$AB_SNDBUFFER, .MSGSIZE);

    END;				! End of NML_SETEXEALL

END					! End of module

ELUDOM

