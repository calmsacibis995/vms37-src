%TITLE 'NML Loop Test Routines'
MODULE NML$TEST (
		LANGUAGE (BLISS32),
		ADDRESSING_MODE (NONEXTERNAL=LONG_RELATIVE),
		ADDRESSING_MODE (EXTERNAL=LONG_RELATIVE),
		IDENT = 'V03-001'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
 
!++
! FACILITY:  DECnet-VAX V2.0 Network Management Listener
!
! ABSTRACT:
!
!	This routine contains routines to process NCP LOOP command messages.
!
! ENVIRONMENT:  VAX/VMS Operating System
!
! AUTHOR:  Distributed Systems Software Engineering
!
! CREATION DATE:  27-Feb-1980
!
! MODIFIED BY:
!
!	V03-001	MKP0001		Kathy Perko		21-April-1982
!		Add NET.L32 for NFB definitions.
!
!	V02-001	LMK0001		Len Kawell		16-Aug-1981
!		Modified for new MOP/NETACP interface.
!--
 

%SBTTL 'Declarations'

!
! TABLE OF CONTENTS:
!
 
FORWARD ROUTINE
    NML$TEST 		: NOVALUE,
    NML$NODETEST	: NOVALUE,
    NML$INITBUFFER	: NOVALUE,
    NML$CHKBUFFER,
    NML$GETBUFFER,
    NML$FREEBUFFER,
    NML_OPENLINK	: NOVALUE,
    NML_BLDLOOPNCB	: NOVALUE,
    NML_MAPLOOPERR	: NOVALUE,
    NML_SIGLOOPERR	: NOVALUE,
    NML$SAVECOUNT,
    NML$SAVESIZE,
    NML$SAVEDATA,
    NML$SAVEUSER,
    NML$SAVEPASSWRD,
    NML$SAVEACCT,
    NML$SAVENODENAM,
    NML$CNVRTNODADR,
    NML$TESTHANDLER;
 
!
! INCLUDE FILES:
!

LIBRARY 'LIB$:NMLLIB.L32';
LIBRARY 'SHRLIB$:NMALIBRY.L32';
LIBRARY 'SHRLIB$:NET.L32';
LIBRARY 'SYS$LIBRARY:LIB.L32';		! Network ACP control QIO interface

!
! EQUATED SYMBOLS:
!
 
LITERAL
    MBX_SIZE = 40,
    NCB_BUFSIZE = 110;
 
!
! OWN STORAGE:
!
 
OWN
    LOOP_CHAN,				! Loop link channel
    LOOP_MBXCHAN,			! Loop mailbox channel
    NML$W_LOOPCOUNT : WORD,		! Number of loop messages to send
    NML$W_LOOPSIZE  : WORD,		! Size of loop messages
    NML$B_LOOPDATA  : BYTE,		! Type of data (zeros,ones,mixed)
    NODENAME_BUFFER : VECTOR [6, BYTE];	! Nodename buffer
 
OWN
    NODEDSC     : DESCRIPTOR
		  INITIAL (6,NODENAME_BUFFER), ! Node name descriptor
    USERDSC     : DESCRIPTOR,		! User id
    ACCOUNTDSC  : DESCRIPTOR,		! Account
    PASSWORDDSC : DESCRIPTOR;		! Password
 
OWN
    NCBDSC     : DESCRIPTOR,		! NCB for loop link
    MBX_BUFFER : VECTOR [40, BYTE],	! Mailbox buffer
    NCB_BUFFER : VECTOR [NCB_BUFSIZE, BYTE]; ! NCB buffer
!
! The following are for Phase 2 and Phase 3 differences.
! 
OWN
    VERSION;
 
BIND
    OBJECT25DSC = $ASCID ('::"25=/',%CHAR(0,0,0),'                ','"')
		: DESCRIPTOR,
    OBJECT19DSC = $ASCID ('::"19=/',%CHAR(0,0,0),'                ','"')
		: DESCRIPTOR; 
!
! The following data is used to manage buffers.  Default buffers may be
! used or the buffers may be allocated from virtual memory.
!
LITERAL
    NML$K_DEFBUFSIZE = 130,
    NML$K_MAXMSGSIZE = 128;

OWN
    NML$L_VMBUFSIZE  : LONG INITIAL (0),
    NML$T_TESTRCVBUF : VECTOR [NML$K_DEFBUFSIZE, BYTE];
 
!
! EXTERNAL REFERENCES:
!
 
$NML_EXTDEF;
 
EXTERNAL
    NML$AB_NPA_BLK : $NPA_BLKDEF,
    NML$NPA_TEST;
 
EXTERNAL LITERAL
    NML$_ALPBFOVF,
    NML$_MIRBFOVF,
    NML$_NCBFAIL;
 
EXTERNAL ROUTINE
    NMA$NPARSE,
    NML$BLDP2,
    NML$ERROR_1,
    NML$BLD_REPLY,
    NML$GETVOLNDNAM,
    NML$NETQIO,
    NML$OPERSERVICE,
    NML$DEBUG_MSG,
    LIB$GET_VM,
    LIB$FREE_VM,
    LIB$ASN_WTH_MBX : ADDRESSING_MODE (LONG_RELATIVE);
 

%SBTTL 'NML$TEST  Loopback test'
GLOBAL ROUTINE NML$TEST : NOVALUE =
 
!++
! FUNCTIONAL DESCRIPTION:
!
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--
 
    BEGIN

    LOCAL
	STATUS;
 
!
! Set up default values.
!
    NML$W_LOOPCOUNT = NMA$C_LOOP_DCNT;
    NML$W_LOOPSIZE  = NMA$C_LOOP_DSIZ;
    NML$B_LOOPDATA  = NMA$C_LOOP_MIX;
!
! Parse command
!
    STATUS = NMA$NPARSE (NML$AB_NPA_BLK, NML$NPA_TEST);
!
! If error on parse assume that it was a line loop request and dispatch.
! All real parsing errors will be signalled by the action routines.
!
    IF .STATUS
    THEN
	NML$NODETEST ()			! Node loop
    ELSE
	NML$OPERSERVICE ();		! Line loop
 
    END;				! End of NML$TEST

%SBTTL 'NML$NODETEST  Node loopback test'
GLOBAL ROUTINE NML$NODETEST : NOVALUE =
 
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine opens a link to the loopback mirror and
!	verifies the connect data to determine the maximum test message size.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--
 
    BEGIN
!
! Enable the condition handler to perform cleanup.
!
    ENABLE NML$TESTHANDLER;
! 
! Build the NFB for the QIO IO$_ACPCONTROL
! 
    $NFBDSC (NFBDSC,SHOW,,NDI,NNA,,DTY);
 
    OWN
	BUFSIZ,				! Buffer size
	MSGNOTLOOPED : WORD;		! Number of messages not looped

    LOCAL
	RCV_SIZE,
	XMIT_IOSB : $IOSB,
	RCV_IOSB  : $IOSB,
	PTR,
	RCVDSC    : DESCRIPTOR,
	SNDDSC    : DESCRIPTOR,
	STATUS,
	P2NAMBUF  : VECTOR [NML$K_P2BUFLEN,BYTE],! Node name buffer for P2
					!	QIO argument
	P2DSC     : DESCRIPTOR;		! Descriptor P2 buffer
 
!
! Restructure node name for P2 argument in QIO.
!
    P2DSC [DSC$W_LENGTH] = NML$K_P2BUFLEN;
    P2DSC [DSC$A_POINTER] = P2NAMBUF;
    NML$BLDP2 ( .NODEDSC [DSC$W_LENGTH],  ! Length of node name
		.NODEDSC [DSC$A_POINTER], ! Pointer to node name
		-1,			  ! No start key
		0,
		P2DSC,			  ! Descriptor of buffer
		P2DSC);			  ! Descriptor of P2 parameter
!
! Determine which version of mirror will be used.
! 
    STATUS = NML$NETQIO (NFBDSC,	   ! NFB for QIO IO$_ACPCONTROL
			 P2DSC,		   ! Descriptor P2 parameter
			 0,
			 NML$GQ_QIOBFDSC); ! The descriptor pointing to buffer
					   ! where information is returned
    IF .STATUS
    AND (.(NML$AB_QIOBUFFER + 4)<0,8> EQLU NMA$C_NODTY_PHA)
    THEN
	BEGIN

	VERSION = NML$C_LOOP_PHASE2;	! If both conditions then Phase 2
	BUFSIZ  = .NML$W_LOOPSIZE + 1;

	END
    ELSE
	BEGIN

	VERSION = NML$C_LOOP_PHASE3;	! Else Phase 3
	BUFSIZ  = .NML$W_LOOPSIZE;

	END;
!
! Get buffers.
!
    STATUS = NML$GETBUFFER (BUFSIZ, SNDDSC, RCVDSC); ! Attempt to allocate it

    IF NOT .STATUS
    THEN
	BEGIN
	
	NML_SIGLOOPERR (NMA$C_STS_PVA,
			NMA$C_PCNO_LPL,
			UPLIT (2, BUFSIZ),
			NML$_ALPBFOVF,
			MSB$M_DATA_FLD);
	END;
!
! Build the NCB from the data provided in the command message.
! 
    NML_BLDLOOPNCB ();
!
! Attempt to connect to the mirror.
!
    NML_OPENLINK ();
! 
! Initialize the transmit buffer according to NML$B_LOOPDATA
! 
    NML$INITBUFFER (SNDDSC, .NML$B_LOOPDATA, .VERSION);
! 
! Start looping the data
! 
    INCR I FROM 0 TO .NML$W_LOOPCOUNT - 1 DO
	BEGIN
! 
! Transmit loop data and wait for completion
!
	STATUS = $QIOW (CHAN = .LOOP_CHAN,
			FUNC = IO$_WRITEVBLK,
			IOSB = XMIT_IOSB,
			P1   = .SNDDSC [DSC$A_POINTER],
			P2   = .SNDDSC [DSC$W_LENGTH]);

	IF .STATUS THEN STATUS = .XMIT_IOSB [IOS$W_STATUS];
!
! Check to see if we should log loop I/O
!
	IF .STATUS
	THEN
	    NML$DEBUG_MSG (DBG$C_LOOPIO,
			   .SNDDSC [DSC$A_POINTER],
			   .SNDDSC [DSC$W_LENGTH],
			   $ASCID ('Test message transmitted'));
!
! Map errors if there were any otherwise continue
!
	NML_MAPLOOPERR (NMA$C_STS_MLD,
			.STATUS,
			XMIT_IOSB,
			.NML$W_LOOPCOUNT - .I);
!
! Post read to receive loop data back from mirror
!
	STATUS = $QIOW (CHAN = .LOOP_CHAN,
			FUNC = IO$_READVBLK,
			IOSB = RCV_IOSB,
			P1   = .RCVDSC [DSC$A_POINTER],
			P2   = .RCVDSC [DSC$W_LENGTH]);
 
	IF .STATUS THEN STATUS = .RCV_IOSB [IOS$W_STATUS];

	RCV_SIZE =.RCV_IOSB [IOS$W_COUNT]; ! Set number of characters received
!
! Check to see if we should log loop I/O
!
	IF .STATUS
	THEN
	    NML$DEBUG_MSG (DBG$C_LOOPIO,
			   .RCVDSC [DSC$A_POINTER],
			   .RCVDSC [DSC$W_LENGTH],
			   $ASCID ('Test message received'));
!
! Signal errors (if any).
!
	NML_MAPLOOPERR (NMA$C_STS_MLD,
			.STATUS,
			RCV_IOSB,
			.NML$W_LOOPCOUNT - .I);
!
! Check for errors on loopback.
!
	IF NOT NML$CHKBUFFER (.SNDDSC [DSC$W_LENGTH],
			      .SNDDSC [DSC$A_POINTER],
			      .RCV_SIZE,
			      .RCVDSC [DSC$A_POINTER],
			      .VERSION)
	THEN
	    BEGIN

	    MSGNOTLOOPED = .NML$W_LOOPCOUNT - .I; ! Set up messages not looped
	    NML_SIGLOOPERR (NMA$C_STS_BLR,
			    -1,
			    UPLIT (2, MSGNOTLOOPED),
			    0,
			    MSB$M_DATA_FLD);
	    END;	 
	END;				! End of INCR loop
 
!
! On successful loopback, disconnect link to mirror.
!
    $QIOW (CHAN = .LOOP_CHAN,
	   FUNC = IO$_DEACCESS OR IO$M_SYNCH);
!
! Signal success.
!
    NML$ERROR_1 (NMA$C_STS_SUC);
 
    END;				! End of NML$NODETEST

%SBTTL 'NML$INITBUFFER  Initialize loopback test buffer'
GLOBAL ROUTINE NML$INITBUFFER (BUFDSC, DATA, TYPE) : NOVALUE =
 
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine initializes a transmit buffer for active loop
!	functions based on the type of loopback (phase 2, phase 3, MOP)
!	and based on the type of data (ones, zeros, mixed).
!
! FORMAL PARAMETERS:
!
!	BUFDSC		Address of descriptor of buffer to be initialized.
!	DATA		Type of data to use.
!	TYPE		Loopback function type code.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--
 
    BEGIN
 
    MAP
	BUFDSC : REF DESCRIPTOR;

    LOCAL
	LOOPDATA : BYTE,
	PTR;

    PTR = .BUFDSC [DSC$A_POINTER];
!
! Fill in the function code according to the type of loop operation.
!
    SELECTONEU .TYPE OF
	SET
	[NML$C_LOOP_PHASE2]:
	    BEGIN

	    CH$WCHAR_A (5, PTR);
	    CH$WCHAR_A (0, PTR);

	    END;

	[NML$C_LOOP_PHASE3]:
	    CH$WCHAR_A (0, PTR);

	[NML$C_LOOP_MOP]:
	    CH$WCHAR_A (MOP$_FCT_ALD, PTR);

	TES;
!
! Select type of data to put in buffer.
!
    SELECTONEU .DATA OF
 	SET
	[NMA$C_LOOP_MIX]: LOOPDATA = %B'01010101';
	[NMA$C_LOOP_ONE]: LOOPDATA = %X'FF';
	[NMA$C_LOOP_ZER]: LOOPDATA = 0;
	TES;
!
! Initialize the buffer.
!
    CH$FILL (.LOOPDATA,
	     .BUFDSC [DSC$W_LENGTH] - (.PTR - .BUFDSC [DSC$A_POINTER]),
	     .PTR);
 
    END;				! End of NML$INITBUFFER

%SBTTL 'NML$CHKBUFFER  Check loopback test buffer'
GLOBAL ROUTINE NML$CHKBUFFER (SNDLEN, SNDADR, RCVLEN, RCVADR, TYPE) =
 
!++
! FUNCTIONAL DESCRIPTION:
!
!
! FORMAL PARAMETERS:
!
!	SNDLEN		Length of transmitted data.
!	SNDADR		Address of transmitted data.
!	RCVLEN		Length of received data.
!	RCVADR		Address of received data.
!	TYPE		Loopback function type code.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--
 
    BEGIN
 
    LOCAL
	RCVPTR,
	SNDPTR,
	STATUS;

    RCVPTR = .RCVADR;
    SNDPTR = .SNDADR + 1;

    SELECTU .TYPE OF
	SET
	[NML$C_LOOP_PHASE2
	,NML$C_LOOP_PHASE3]:

	    IF CH$RCHAR (.RCVPTR) NEQU 1
	    THEN
		RETURN FALSE;

	[NML$C_LOOP_PHASE2]:

	    CH$RCHAR_A (SNDPTR);

	[NML$C_LOOP_MOP]:

	    IF CH$RCHAR (.RCVPTR) NEQU MOP$_FCT_ALD
	       AND
	       CH$RCHAR (.RCVPTR) NEQU MOP$_FCT_PLD
	    THEN
		RETURN FALSE;

	[ALWAYS]:

	    CH$RCHAR_A (RCVPTR);

	TES;

    IF CH$EQL ( .RCVLEN - (.RCVPTR - .RCVADR),
		.RCVPTR,
		.SNDLEN - (.SNDPTR - .SNDADR),
		.SNDPTR)
    THEN
	RETURN TRUE
    ELSE
	RETURN FALSE;
 
    END;				! End of NML$CHKBUFFER

%SBTTL 'NML$GETBUFFER  Allocate send/receive buffers for loopback'
GLOBAL ROUTINE NML$GETBUFFER (REQSIZ, RBFDSC, SBFDSC) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine will dynamically allocate buffers for loopback.
!
!	If there is not enough virtual memory then this routine will
!	return an error and set the maximum size into the descriptors.
!
! FORMAL PARAMETERS:
!
!	REQSIZ		Address of longword size of buffer to allocate.
!	RBFDSC		Address of receive buffer descriptor.
!	SBFDSC		Address of send buffer descriptor.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--
    BEGIN

    MAP
	RBFDSC : REF DESCRIPTOR,
	SBFDSC : REF DESCRIPTOR;

    LOCAL
	STATUS,
	BUF_ADR;			! Returned buffer address

    NML$L_VMBUFSIZE = 0;		! No buffer allocated
    RBFDSC [DSC$A_POINTER] = NML$T_TESTRCVBUF;
    SBFDSC [DSC$A_POINTER] = NML$AB_SNDBUFFER;
!
! Determine if we need a buffer bigger then the default buffer.
!
    IF ..REQSIZ LEQU NML$K_MAXMSGSIZE
    THEN
	BEGIN

	RBFDSC [DSC$W_LENGTH]  = ..REQSIZ;
	SBFDSC [DSC$W_LENGTH]  = ..REQSIZ;
	RETURN TRUE

	END;

    NML$L_VMBUFSIZE = ..REQSIZ * 2;	! Set up allocation size
!
! Attempt to get the necessary size buffer.
!
    STATUS = LIB$GET_VM (NML$L_VMBUFSIZE, BUF_ADR);

    IF .STATUS
    THEN
	BEGIN

	RBFDSC [DSC$A_POINTER] = .BUF_ADR;
	SBFDSC [DSC$A_POINTER] = .BUF_ADR + (.NML$L_VMBUFSIZE / 2);

	END
    ELSE
	.REQSIZ = NML$K_DEFBUFSIZE;

    RBFDSC [DSC$W_LENGTH]  = ..REQSIZ;
    SBFDSC [DSC$W_LENGTH]  = ..REQSIZ;

    RETURN .STATUS

    END;				! End of NML$GETBUFFER

%SBTTL 'NML$FREEBUFFER  Deallocate buffers'
GLOBAL ROUTINE NML$FREEBUFFER =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine deallocates buffers if any were allocated by the
!	NML$GETBUFFER routine.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NML$L_VMBUFSIZE contains the size of the allocated buffers.
!	    If none were allocated then the value will be zero.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--
    BEGIN

    LOCAL
	STATUS,
	BUF_ADR;			! Returned buffer address

    STATUS = LIB$FREE_VM (NML$L_VMBUFSIZE, BUF_ADR);

    NML$L_VMBUFSIZE = 0;		! No buffer allocated

    RETURN .STATUS

    END;				! End of NML$FREEBUFFER

%SBTTL 'NML_OPENLINK  Open a link to Mirror'
ROUTINE NML_OPENLINK : NOVALUE =
 
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine opens a link to the loopback mirror and
!	verifies the connect data to determine the maximum test message size.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--
 
    BEGIN

    OWN
	LOOP_DESCR : DESCRIPTOR
		     INITIAL (2, NML$W_LOOPCOUNT),
	MBX_MAXMSG : INITIAL (64), 	! Maximum mailbox message size
	MBX_BUFQUO : INITIAL (256);	! Maximum pool for mailbox messages

    LOCAL
	MBXNAME      : VECTOR [10, BYTE], ! Buffer to build mailbox name
	MBXLST       : VECTOR [2],	! FAO list for mailbox name
	MBXDSC       : DESCRIPTOR,	! Descriptor of mailbox name buffer
	IOSB         : $IOSB,		! IO status block
	STATUS,				! Return status
	PTR,				! General pointer
	CTR,				! General counter
	DETAIL       : WORD,		! Error detail word
	FLAG,
	TEXT,
	CODE         : BYTE,		! Error status code
	MIRROR_DESCR : DESCRIPTOR;	! Mirror size descriptor
 
    OWN
	CHNCHAR : BBLOCK [DIB$K_LENGTH]; ! Channel characteristics
 
!
! Establish a channel to looper object
!
    STATUS = LIB$ASN_WTH_MBX
			(
			NML$GQ_NETNAMDSC, ! Device name
			MBX_MAXMSG,	! Maximum mailbox message size
			MBX_BUFQUO,	! Maximum buffer quota for mailbox I/O
			LOOP_CHAN,	! I/O channel for mirror
			LOOP_MBXCHAN	! Mailbox channel for mirror
			);
!
! Map and signal any errors
!
    NML_MAPLOOPERR (NMA$C_STS_MCF, .STATUS, 0, .NML$W_LOOPCOUNT);
 
    STATUS = $QIOW			! Create a logical link to mirror
		    (
		    CHAN = .LOOP_CHAN,	! Use network channel
		    FUNC = IO$_ACCESS,	! ACP function
		    IOSB = IOSB,	! Status here
		    P2   = NCBDSC	! This is the NCB descriptor
		    );
!
! Map and signal any errors
!
    NML_MAPLOOPERR (NMA$C_STS_MCF, .STATUS, IOSB, .NML$W_LOOPCOUNT);
 
    STATUS = $QIOW			! Read the connect data
		(
		CHAN = .LOOP_MBXCHAN,	! Channel for mailbox
		FUNC = IO$_READVBLK,
		IOSB = IOSB,
		P1   = MBX_BUFFER,	! Read data into mailbox buffer
		P2   = MBX_SIZE
		);
!
! Map and signal any errors
!
    NML_MAPLOOPERR (NMA$C_STS_MCF, .STATUS, IOSB, .NML$W_LOOPCOUNT);
!
! Validate the mailbox message and its returned optional data.
!
    STATUS = .(MBX_BUFFER)<0,16,0>;
    PTR = MBX_BUFFER + 4;
 
    IF .STATUS NEQ MSG$_CONFIRM		! It must be a connect confirm
    THEN
	BEGIN

	FLAG = 0;
	CODE = NMA$C_STS_MCF;		! Assume connect failure code
	TEXT = 0;

	SELECTONE  .STATUS OF
	    SET

	    [MSG$_ABORT
	    ,MSG$_EXIT]:

		DETAIL = NMA$C_NCEDTL_ABO; ! Abort by object

	    [MSG$_DISCON]:

		DETAIL = NMA$C_NCEDTL_DIS; ! Disconnect by object

	    [MSG$_NETSHUT]:

		DETAIL = NMA$C_NCEDTL_NSD; ! Node shut down

	    [MSG$_NODEINACC
	    ,MSG$_PATHLOST]:

		DETAIL = NMA$C_NCEDTL_DIE; ! Node or object failed

	    [MSG$_REJECT]:

		DETAIL = NMA$C_NCEDTL_RJC; ! Reject by object

	    [MSG$_THIRDPARTY]:

		DETAIL = NMA$C_NCEDTL_ABM; ! Abort by management

	    [MSG$_TIMEOUT]:

		DETAIL  = NMA$C_NCEDTL_NRS; ! No response from object

	    [OTHERWISE]:
		BEGIN

		DETAIL = -1;
		FLAG = .FLAG OR MSB$M_SYSM_FLD;
		TEXT = .STATUS;

		END;

	    TES;
!
! Signal error
!
	NML_SIGLOOPERR (.CODE, .DETAIL, LOOP_DESCR, .TEXT, .FLAG);

	END;
 
    CTR = .IOSB [IOS$W_COUNT] - 4;	! Play games to look at the data
    CTR = .CTR - CH$RCHAR (.PTR) - 1;	! Skip over the device name
    PTR = .PTR + CH$RCHAR (.PTR) + 1;	! Set pointer to optional data
 
!
! Verify optional data if Phase 3 mirror. (Ignore it if Phase 2.)
!
    IF .VERSION EQL NML$C_LOOP_PHASE3
    THEN
	BEGIN 

	IF NOT (CH$RCHAR (.PTR) EQL 2)	! Verify optional data is 2 bytes long
	OR .(.PTR + 1)<0,16,0> LSS .NML$W_LOOPSIZE ! And mirror buffer size is greater
					           ! than requested loop size
	THEN
	    BEGIN

	    MIRROR_DESCR [DSC$W_LENGTH] = 2; ! Set up descriptor of mirror
	    MIRROR_DESCR [DSC$A_POINTER] = .PTR + 1; ! Maximum buffer size
	    NML_SIGLOOPERR (NMA$C_STS_PVA,
			    NMA$C_PCNO_LPL,
			    MIRROR_DESCR,
			    NML$_MIRBFOVF,
			    0); ! Signal error
	    END;  
	END;

    RETURN
 
    END;

%SBTTL 'NML_BLDLOOPNCB  Build a Network Control Block'
ROUTINE NML_BLDLOOPNCB : NOVALUE =
 
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine builds the NCB for the loopback mirror
!	from information left around by the parse.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!	NODEDSC		Descriptor of node name
!	USERDSC		Descriptors of access control
!	PASSWORDDSC
!	ACCOUNTDSC
!	NML$GB_OPTIONS
!	NML$GB_ENTFRM
!	NML$AB_ENTID
!	OBJECT25DSC
!	OBJECT19DSC
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--
 
    BEGIN
 
    MAP
	NML$GB_OPTIONS : BBLOCK [1];
 
    LOCAL
	PTR,
	CTR;
!
!	Initialize the NCB_BUFFER descriptor
!
    NCBDSC [DSC$A_POINTER] = NCB_BUFFER;
!
!	Obtain the node spec and strip trailing colons
!
    PTR = CH$MOVE (.NODEDSC [DSC$W_LENGTH],
		   .NODEDSC [DSC$A_POINTER],
		   .NCBDSC [DSC$A_POINTER]);
!
!	Obtain the access control
!
    IF .NML$GB_OPTIONS [NMA$V_OPT_ACC]	! Is there access control in
    THEN
	BEGIN

	IF .USERDSC [DSC$W_LENGTH] NEQ 0 ! If not, use other access ctl
	THEN
	    BEGIN

	    CH$WCHAR_A ('"', PTR);	! Put it in standard form
	    PTR = CH$MOVE (	.USERDSC [DSC$W_LENGTH],
				.USERDSC [DSC$A_POINTER],
				.PTR);
 
	    IF .PASSWORDDSC NEQ 0	! A password??
	    THEN
		BEGIN

		CH$WCHAR_A (' ', PTR);
		PTR = CH$MOVE (	.PASSWORDDSC [DSC$W_LENGTH],
				.PASSWORDDSC [DSC$A_POINTER],
				.PTR);
		END;
 
	    IF .ACCOUNTDSC NEQ 0	! An account??
	    THEN
		BEGIN

		CH$WCHAR_A (' ', PTR);
		PTR = CH$MOVE (	.ACCOUNTDSC [DSC$W_LENGTH],
				.ACCOUNTDSC [DSC$A_POINTER],
				.PTR);
		END;
 
	    CH$WCHAR_A ('"', PTR);	! End the access control spec
 
	    END;
	END;
!
!	Copy the object connect specification to the end
!
    IF .VERSION EQL NML$C_LOOP_PHASE3 
    THEN
	PTR = CH$MOVE (	.OBJECT25DSC [DSC$W_LENGTH],
			.OBJECT25DSC [DSC$A_POINTER],
			.PTR)
    ELSE
	PTR = CH$MOVE ( .OBJECT19DSC [DSC$W_LENGTH],
			.OBJECT19DSC [DSC$A_POINTER],
			.PTR);
 
    NCBDSC [DSC$W_LENGTH] = .PTR - .NCBDSC [DSC$A_POINTER]; ! Save length of NCB
 
    END;

%SBTTL 'NML_MAPLOOPERR  Map and signal NML error'
ROUTINE	NML_MAPLOOPERR (CODE, STATUS, IOSB, LOOP) : NOVALUE=

!++
! FUNCTIONAL DESCRIPTION:
!
! This routine takes system service status and QIO IOSB status
! return codes and converts them to the proper detail codes for
! the network management status codes of NMA$C_STS_MLD and NMA$C_STS_MLD.
!
! The routine will also change the status to reflect the appropiate status
! if the system service or QIO IOSB status maps such a network management
! status code.(NMA$C_STS_PRI,NMA$C_STS_RES)
!
! FORMAL PARAMETERS:
!
!    code	The network management status code to use
!    status	The system service returned status code to map
!    iosb	The address of the IOSB,if there  is one
!		the IOS$W_STATUS status field is mapped if possible
!    loop	The number of times yet to loop
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODE:
!
!    NONE
!
! SIDE EFFECTS:
!
!    NONE
!--
    BEGIN

    MAP
	IOSB   : REF $IOSB,
	CODE   : BYTE,
	STATUS : WORD,
	LOOP   : WORD;
 
    LOCAL
	DETAIL      : WORD,		! Detail word for NML_SIGLOOPERR
	TEXT,				! Error text for NML_SIGLOOPERR
	FLAG,				! Optional flag for NML_SIGLOOPERR
	COUNT_DESCR : DESCRIPTOR; 	! Descriptor for LOOP
 
!
! Check system status first if SS$_NORMAL check IOSB status if there is one.
! If status is normal return from routine.  Otherwise attempt to map status
! (either system service or IOSB status which ever fails first) into a 
! network management error detail or status code.
!
    IF .STATUS
    THEN
	IF .IOSB NEQA 0 THEN STATUS = .IOSB [IOS$W_STATUS];

    IF .STATUS 
    THEN
	RETURN NML$_STS_SUC;
!
! At this point the system service or the I/O has failed and STATUS
! contains the system error code.
!
! Attempt to map into a network error detail code.
!
    TEXT = 0;				! Assume no optional text
    FLAG = 0;				! Assume no optional flags 

    SELECTONE .STATUS OF
	SET

    [SS$_ABORT]:

	DETAIL = NMA$C_NCEDTL_DIE;	! Node or object failed

    [SS$_NOSUCHNODE]:

	DETAIL = NMA$C_NCEDTL_UNA;	! Unrecognized node name

    [SS$_UNREACHABLE]:
	BEGIN

	DETAIL = NMA$C_NCEDTL_UNR;	! Node unreachable
	FLAG = MSB$M_SYSM_FLD;		! Map TEXT to system error
	TEXT = .STATUS;			! Pass system error code

	END;

    [SS$_INVLOGIN]:

	DETAIL = NMA$C_NCEDTL_ACC;	! Access control rejected

    [SS$_NOLINKS,
     SS$_REMRSRC]:
	BEGIN

	DETAIL = NMA$C_NCEDTL_RSC;	! Network resources 
	FLAG = MSB$M_SYSM_FLD;		! Map TEXT to system error
	TEXT = .STATUS;			! Pass system error code

	END;

    [SS$_NOSUCHOBJ]:

	DETAIL = NMA$C_NCEDTL_OBJ;	! Unrecognized object

    [SS$_THIRDPARTY]:

	DETAIL = NMA$C_NCEDTL_ABM;	! Abort by management

    [SS$_TIMEOUT]:

	DETAIL = NMA$C_NCEDTL_NRS;	! No response from object

    [SS$_IVDEVNAM]:
	BEGIN

	DETAIL = NMA$C_NCEDTL_OBJ;	! Assume no such object
	TEXT = NML$_NCBFAIL;		! Say error in NCB format

	END;

    [SS$_REJECT]:
	BEGIN
!
! SS$_REJECT "real" reason for reject is in second longword of IOSB
! Therefore we must map each possible reason
!
	SELECTONE .IOSB [4,0,16,0] OF
	    SET

	    [NET$C_DR_ACCESS,
	     NET$C_DR_ACCNT]:

		DETAIL = NMA$C_NCEDTL_ACC; ! Access control rejected

	    [NET$C_DR_EXIT]:

		DETAIL = NMA$C_NCEDTL_DIE; ! Node or object failed

	    [NET$C_DR_NOBJ]:

		DETAIL = NMA$C_NCEDTL_OBJ; ! Unrecognized object

	    [NET$C_DR_NOCON]:

		DETAIL = NMA$C_NCEDTL_BSY; ! Object too busy

	    [NET$C_DR_NOPATH]:

		DETAIL = NMA$C_NCEDTL_UNA; ! Unrecognized node name

	    [NET$C_DR_NORMAL]:

		DETAIL = NMA$C_NCEDTL_RJC; ! Rejected by object

	    [NET$C_DR_SEGSIZ,
	     NET$C_DR_RSU]:

		DETAIL = NMA$C_NCEDTL_RSC; ! Network resource

	    [NET$C_DR_SHUT]:

		DETAIL = NMA$C_NCEDTL_NSD; ! Node shutdown

	    [NET$C_DR_THIRD]:

		DETAIL = NMA$C_NCEDTL_ABM; ! Abort by management

	    [OTHERWISE]:
		BEGIN

		DETAIL = -1;		 ! No detail
		FLAG = .FLAG OR MSB$M_SYSM_FLD;
		TEXT = .STATUS;

		END;

	    TES;
	END;

    [OTHERWISE]:
	BEGIN

	CODE = NMA$C_STS_MPR;		! Network management program err
	DETAIL = -1;			! No detail
	FLAG = .FLAG OR MSB$M_SYSM_FLD;	! Map TEXT to system error
	TEXT = .STATUS;			! Pass system error code

	END;

    TES;
!
! Build the data descriptor of number of messages not looped for NML_SIGLOOPERR
!
    COUNT_DESCR [DSC$W_LENGTH] = 2;
    COUNT_DESCR [DSC$A_POINTER] = LOOP;
!
! Signal error
!
    NML_SIGLOOPERR (.CODE, .DETAIL, COUNT_DESCR, .TEXT, .FLAG);

    END;				! End of NML_MAPLOOPERR

%SBTTL 'NML_SIGLOOPERR  Signal looper errors'
ROUTINE	NML_SIGLOOPERR (CODE, DETAIL, DATA, TEXT, FLAG) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine builds the message segment block and actually signals 
!	the error.
!
! FORMAL PARAMETERS:
!
!	CODE		Code of the status to be signalled.
!	DETAIL		Detail to be signalled.
!	DATA		Address of the data descriptor.
!	TEXT		Code for optional detail error text.
!	FLAG		Mask for optional flags (used for MSB$M_SYSM_FLD).
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	This routine will build the message segment block in NML$AB_MSGBLOCK
!	This routine calls NML$BLD_REPLY which builds the message in
!	NML$AB_SNDBUFFER.
!
! ROUTINE VALUE:
! COMPLETION CODE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--
    BEGIN

    MAP
	CODE   : BYTE,
	DETAIL : WORD,
	DATA   : REF DESCRIPTOR,
	TEXT   : LONG,
	FLAG   : LONG;

    LOCAL
	MESSAGE_SIZE;

!
! Build the message descriptor block in NML$AB_MSGBLOCK
!
    NML$AB_MSGBLOCK [MSB$L_FLAGS] = .FLAG OR
				    MSB$M_DET_FLD OR
				    MSB$M_DATA_FLD OR
				    MSB$M_MSG_FLD;
    NML$AB_MSGBLOCK [MSB$B_CODE] = .CODE;     ! Status code
    NML$AB_MSGBLOCK [MSB$W_DETAIL] = .DETAIL; ! Detail code
    NML$AB_MSGBLOCK [MSB$A_DATA] = .DATA;     ! Count field
    NML$AB_MSGBLOCK [MSB$L_TEXT] = .TEXT;     ! Optional error text code
!
! Call NML$BLD_REPLY to build the error message
!
    NML$BLD_REPLY (NML$AB_MSGBLOCK, MESSAGE_SIZE);
!
! Signal the message
!
 
    $SIGNAL_MSG (NML$AB_SNDBUFFER, .MESSAGE_SIZE);
 
    END;				! End of NML_SIGLOOPERR

%SBTTL 'NML$SAVECOUNT  NPARSE action routine'
GLOBAL ROUTINE	NML$SAVECOUNT	=

!++
! FUNCTIONAL DESCRIPTION:
!
! This is the action routine used by NPARSE to save the loop count
!
! FORMAL PARAMETERS:
!
! none
!
! IMPLICIT INPUTS:
!
! NPARSE agruments are pointed to by the AP defined by $NPA_ARGDEF macro
!
! ROUTINE VALUE:
! COMPLETION CODE:
!
! NML$_STS_SUC returned always
!
! SIDE EFFECTS:
! The loop count passed by the NPARSE string is stored in NML$W_LOOPCOUNT.
!
!--
    BEGIN
 
    $NPA_ARGDEF;

    NML$W_LOOPCOUNT = .(.NPARSE_BLOCK [NPA$L_FLDPTR])<0,16>;

    RETURN NML$_STS_SUC

    END;				! End of NML$SAVECOUNT

%SBTTL 'NML$SAVESIZE  NPARSE action routine'
GLOBAL ROUTINE	NML$SAVESIZE	=

!++
! FUNCTIONAL DESCRIPTION:
!
! This routine saves the loop block size passed by NPARSE
!
! FORMAL PARAMETERS:
!
! none
!
! IMPLICIT INPUTS:
!
! NPARSE block pointed to by AP defined by $NPA_ARGDEF macro
!
! ROUTINE VALUE:
! COMPLETION CODE:
!
! NML$_STS_SUC returned
!
! SIDE EFFECTS:
!
! The passed loop block size is stored in location NML$W_LOOPSIZE defined in NMLTEST 
!--
    BEGIN
 
    $NPA_ARGDEF;

    NML$W_LOOPSIZE = .(.NPARSE_BLOCK [NPA$L_FLDPTR])<0,16>;

    RETURN NML$_STS_SUC;

    END;				! End of NML$SAVESIZE

%SBTTL 'NML$SAVEDATA  NPARSE action routine'
GLOBAL ROUTINE	NML$SAVEDATA	=

!++
! FUNCTIONAL DESCRIPTION:
!
! This action routine saves the type of loop data in NML$B_LOOPDATA defined in NMLTES
!
! FORMAL PARAMETERS:
!
! none
!
! IMPLICIT INPUTS:
!
! NPARSE block pointed to by AP defined by $NPA_ARGDEF macro
!
! ROUTINE VALUE:
! COMPLETION CODE:
!
! NML$_STS_SUC returned
!
! SIDE EFFECTS:
!
! The type of loop data passed by NPARSE is stored in NML$B_LOOPDATA
!
!--
    BEGIN

    $NPA_ARGDEF;

    NML$B_LOOPDATA = .(.NPARSE_BLOCK [NPA$L_FLDPTR])<0,8>;

    RETURN NML$_STS_SUC;

    END;				! End of NML$SAVEDATA

%SBTTL 'NML$SAVEUSER  NPARSE action routine'
GLOBAL ROUTINE	NML$SAVEUSER	=

!++
! FUNCTIONAL DESCRIPTION:
!
! This routine builds the descriptor for the USER part of
! the access control string
!
! FORMAL PARAMETERS:
!
! IMPLICIT INPUTS:
!
! NPARSE block is pointed by AP and defined in NPARSE macro
!
! ROUTINE VALUE:
! COMPLETION CODE:
!
! NML$_STS_SUC always returned
!
! SIDE EFFECTS:
!
! A descriptor is built in USERDSC
!--
    BEGIN

    $NPA_ARGDEF;

    USERDSC [DSC$W_LENGTH] = .NPARSE_BLOCK [NPA$L_FLDCNT] - 1;
    USERDSC [DSC$A_POINTER] = .NPARSE_BLOCK [NPA$L_FLDPTR] + 1;

    RETURN NML$_STS_SUC

    END;				! End of NML$SAVEUSER

%SBTTL 'NML$SAVEPASSWRD  NPARSE action routine'
GLOBAL ROUTINE NML$SAVEPASSWRD =

!++
! FUNCTIONAL DESCRIPTION:
!
! This routine creates a descriptor for the password portion
! of the access control string and stores it in PASSWORDDSC
!
! FORMAL PARAMETERS:
!
! IMPLICIT INPUTS:
!
! NPARSE block is pointed to by AP and is defined in $NPA_ARGDEF macro
!
! ROUTINE VALUE:
! COMPLETION CODE:
!
! NML$_STS_SUC returned
!
! SIDE EFFECTS:
!
! Descriptor built in PASSWORDDSC
!
!--
    BEGIN

    $NPA_ARGDEF;

    PASSWORDDSC [DSC$W_LENGTH] = .NPARSE_BLOCK [NPA$L_FLDCNT] - 1;
    PASSWORDDSC [DSC$A_POINTER] = .NPARSE_BLOCK [NPA$L_FLDPTR] + 1;

    RETURN NML$_STS_SUC

    END;				! End of NML$SAVEPASSWRD

%SBTTL 'NML$SAVEACCT  NPARSE action routine'
GLOBAL ROUTINE NML$SAVEACCT =

!++
! FUNCTIONAL DESCRIPTION:
!
! This routine builds a descriptor for the account portion of
! the access control string.
!
! FORMAL PARAMETERS:
!
! IMPLICIT INPUTS:
!
! NPARSE block is pointed by AP and defined in $NPA_ARGDEF macro
!
! ROUTINE VALUE:
! COMPLETION CODE:
!
! NML$_STS_SUC returned
!
! SIDE EFFECTS:
!
! A descriptor is built in ACCOUNTDSC
!--
    BEGIN

    $NPA_ARGDEF;

    ACCOUNTDSC [DSC$W_LENGTH] = .NPARSE_BLOCK [NPA$L_FLDCNT] - 1;
    ACCOUNTDSC [DSC$A_POINTER] = .NPARSE_BLOCK [NPA$L_FLDPTR] + 1;

    RETURN NML$_STS_SUC

    END;				! End of NML$SAVEACCT

%SBTTL 'NML$SAVENODENAM  NPARSE action routine'
GLOBAL ROUTINE NML$SAVENODENAM =

!++
! FUNCTIONAL DESCRIPTION:
!
! This routine creates a descriptor for the nodename just parsed
! and stores it in NODEDSC. It also copies the node name from the
! NPARSE buffer over.
!
! FORMAL PARAMETERS:
!
! IMPLICIT INPUTS:
!
! NPARSE block is pointed to by the AP and defined by $NPA_ARGDEF macro
!
! ROUTINE VALUE:
! COMPLETION CODE:
!
! NML$_STS_SUC always returned
!
! SIDE EFFECTS:
!
! NODEDSC contains the newly built descriptor for the node name string.
! NODENAME_BUFFER contains the node name string.
!--
    BEGIN
 
    $NPA_ARGDEF;
!
! Build descriptor
!
    NODEDSC [DSC$W_LENGTH] = .NPARSE_BLOCK [NPA$L_FLDCNT] - 1;
    NODEDSC [DSC$A_POINTER] = NODENAME_BUFFER;
!
! Copy the name from the NPARSE buffer to NODNAME_BUFFER.
!
    CH$MOVE (.NODEDSC [DSC$W_LENGTH],
	     .NPARSE_BLOCK [NPA$L_FLDPTR] + 1,
	     NODENAME_BUFFER);
 
    RETURN NML$_STS_SUC
 
    END;				! End of NML$SAVENODENAM

%SBTTL 'NML$CNVRTNODADR  NPARSE action routine'
GLOBAL ROUTINE NML$CNVRTNODADR =

!++
! FUNCTIONAL DESCRIPTION:
!
! This routine calls NML$GETVOLNDNAM which returns the node name for
! the specified node address.  If there is no node name, this action
! routine will signal an error.
!
! FORMAL PARAMETERS:
!
! IMPLICIT INPUTS:
!
! NPARSE block is pointed to by AP and is defined by $NPA_ARGDEF macro
!
! ROUTINE VALUE:
! COMPLETION CODE:
!
! This routine will either signal an error if no node name is available
! otherwise it will return NML$_STS_SUC.
!
! SIDE EFFECTS:
!
! NODEDSC contains the descriptor of the converted nodename string.
! NODENAME_BUFFER contains the ASCII string of the node address converted
! to a decmial number.
!--
    BEGIN
 
    $NPA_ARGDEF;
!
! Initialize the descriptor.
! 
    NODEDSC [DSC$W_LENGTH] = 6;
    NODEDSC [DSC$A_POINTER] = NODENAME_BUFFER;
! 
! Translate node address into node name.
!   
    IF NOT NML$GETVOLNDNAM (.(.NPARSE_BLOCK [NPA$L_FLDPTR])<0,16,0>,
			    NODEDSC,
			    NODEDSC [DSC$W_LENGTH])
    THEN
	NML_SIGLOOPERR (NMA$C_STS_MCF,
			NMA$C_NCEDTL_NNA,
			0,
			0);		! Signal error
 
    RETURN NML$_STS_SUC

    END;				! End of NML$CNVRTNODADR

%SBTTL 'NML$TESTHANDLER  Condition handler'
GLOBAL ROUTINE	NML$TESTHANDLER (SIGNAL_VEC, MECHANISM)	=
 
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine is the condition handler to force a disconnect of
!	the mirror link on any errors
!
!	This routine also deallocates any buffers allocated.
!
! FORMAL PARAMETERS:
!
!	SIGNAL_VEC	Pointer to the signal vector.
!	MECHANISM	Pointer to then mechanism array.
!
! IMPLICIT INPUTS:
!
!	LOOP_CHAN	The channel that the connect to the mirror
!			is assumed to have been used.
!
! ROUTINE VALUE:
! COMPLETION CODE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!--
    BEGIN

    MAP
	SIGNAL_VEC : REF BBLOCK,	! Signal vector argument
	MECHANISM  : REF BBLOCK;	! Mechanism vector array pointer

    LOCAL
	STATUS_CODE : BBLOCK [4];	! Status code
 
    STATUS_CODE = .SIGNAL_VEC [CHF$L_SIG_NAME]; ! Save condition name
 
    IF .STATUS_CODE [STS$V_FAC_NO] EQLU NML$K_FAC_CODE
    THEN
	BEGIN
!
! Deassign the mirror channel.
!
	$DASSGN (CHAN = .LOOP_CHAN);
!
! If loop buffers were allocated, deallocate them.
!
	NML$FREEBUFFER ();

	END;

    RETURN SS$_RESIGNAL;		! Always resignal error
  
    END;				! End of NML$TESTHANDLER

  
END
 
ELUDOM
 
 
 
 
 
 
 
 
