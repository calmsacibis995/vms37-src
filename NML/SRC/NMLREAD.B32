%TITLE 'NML Read information module'
MODULE NML$READ (
		LANGUAGE (BLISS32),
		ADDRESSING_MODE (NONEXTERNAL=LONG_RELATIVE),
		ADDRESSING_MODE (EXTERNAL=LONG_RELATIVE),
		IDENT = 'V03-000'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  DECnet-VAX Network Management Listener
!
! ABSTRACT:
!
!    These routines dispatch NICE READ function requests to the entity
!    processing routine.
!
! ENVIRONMENT:  VAX/VMS Operating System
!
! AUTHOR:  Distributed Systems Software Engineering
!
! CREATION DATE:  30-OCT-1979
!
! MODIFIED BY:
!
!	V03-002 MKP0002		Kathy Perko	16-Oct-1981
!		Fix single link show.
!
! 	V03-001	MKP0001		Kathy Perko	22-July-1981
!		Add circuit entity and multidrop lines.
!--


%SBTTL 'Declarations'

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    NML$READ		: NOVALUE,
    NML_LIS_CIRCUIT	: NOVALUE,
    NML_LIS_LINE	: NOVALUE,
    NML_LIS_LOGGING	: NOVALUE,
    NML_LIS_NODE	: NOVALUE,
    NML_LIS_OBJECT	: NOVALUE,
    NML_SHO_CIRCUIT	: NOVALUE,
    NML_SHO_LINE	: NOVALUE,
    NML_SHO_LOGGING	: NOVALUE,
    NML_SHO_NODE	: NOVALUE,
    NML_SHO_OBJECT	: NOVALUE,
    NML_SHO_LINK	: NOVALUE,
    NML_LISTPLURAL	: NOVALUE,
    NML_SHOWPLURAL	: NOVALUE;

!
! INCLUDE FILES:
!

LIBRARY 'LIB$:NMLLIB.L32';
LIBRARY 'SHRLIB$:NMALIBRY.L32';
LIBRARY 'SYS$LIBRARY:STARLET.L32';

!
! EXTERNAL REFERENCES:
!

$NML_EXTDEF;

EXTERNAL
    NML$AB_NPA_BLK : $NPA_BLKDEF;

EXTERNAL ROUTINE
    LIB$ESTABLISH : ADDRESSING_MODE (LONG_RELATIVE),
    LIB$REVERT    : ADDRESSING_MODE (LONG_RELATIVE),
    NML$OPENFILE,
    NML$BLD_REPLY,
    NML$MAINHANDLER,
    NML$ERROR_1,
    NML$ERROR_2,
    NML$LISTENTITY,
    NML$LISTEXECUTOR,
    NML$LISTKNONODES,
    NML$LISTKNOWN,
    NML$READACTLOG,
    NML$READKNOLOG,
    NML$READLOGGING,
    NML$SEND,
    NML$SHOWACTIVE,
    NML$SHOACTNODES,
    NML$SHOWKNOWN,
    NML$SHOW_PLURAL_LINKS,
    NML$SHOW_KNOWN_NODES,
    NML$SHOW_KNOWN_LOOP,
    NML$SHOKNOOBJ,
    NML$SHOWENTITY,
    NML$SHOWNODE,
    NML$SHOWNODEBYNAME,
    NML$SHOWEXECUTOR,
    NML$SHOWOBJECT;


%SBTTL 'NML$READ  Read information main routine'
GLOBAL ROUTINE NML$READ : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine dispatches the read function to the proper routine
!	according to the information type.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NML$GB_OPTIONS contains the options byte.
!	NML$GB_INFO contains the information type.
!
!--

    BEGIN

    MAP
	NML$GB_OPTIONS : BBLOCK [1];	! Redefine options byte

    LOCAL
	INDEX;				! Index into list descriptor table

!
! Information can be read from either the permanent or volatile data bases.
!
	IF .NML$GB_OPTIONS [NMA$V_OPT_PER]
	THEN
	    BEGIN
!
! Read permanent data base
!
	    INDEX = (
		SELECTONEU .NML$GB_INFO OF
		    SET
		    [NMA$C_OPINF_SUM]:
			NML$C_SUMMARY;	! Summary
		    [NMA$C_OPINF_STA]:
			NML$C_STATUS;	! Status
		    [NMA$C_OPINF_CHA]:
			NML$C_CHARACTERISTICS; ! Characteristics
		    [NMA$C_OPINF_EVE]:
			NML$C_EVENTS;	! Events
		    [OTHERWISE]:
			-1;		! Option error
		    TES);

	    IF .INDEX NEQU -1
	    THEN
		!
		! The VMS specific entity codes overlap with the
		! others.  So use different select statments for them.
		!
		IF NOT .NML$GL_PRS_FLGS [NML$V_PRS_VMS] THEN
			SELECTONEU .NML$GB_ENTCODE OF
			    SET
			    [NMA$C_ENT_CIR]:
				NML_LIS_CIRCUIT (.INDEX); ! Circuit

			    [NMA$C_ENT_LIN]:
				NML_LIS_LINE (.INDEX); ! Line

			    [NMA$C_ENT_LOG]:
				NML_LIS_LOGGING (.INDEX); ! Logging

			    [NMA$C_ENT_NOD]:
				NML_LIS_NODE (.INDEX); ! Node

			    TES

		ELSE
			IF .NML$GB_ENTCODE EQL NMA$C_SENT_OBJ THEN

				NML_LIS_OBJECT (.INDEX); ! Object
	    END
	ELSE
	    BEGIN
!
! Read volatile data base
!
	    INDEX = (
		SELECTONEU .NML$GB_INFO OF
		    SET
		    [NMA$C_OPINF_SUM]:
			NML$C_SUMMARY;	! Summary
		    [NMA$C_OPINF_STA]:
			NML$C_STATUS;	! Status
		    [NMA$C_OPINF_CHA]:
			NML$C_CHARACTERISTICS; ! Characteristics
		    [NMA$C_OPINF_COU]:
			NML$C_COUNTERS;	! Counters
		    [NMA$C_OPINF_EVE]:
			NML$C_EVENTS;	! Events
		    [OTHERWISE]:
			-1;		! Option error
		    TES);

	    IF .INDEX NEQU -1
	    THEN
		!
		! The VMS specific entity codes overlap with the
		! others.  So use different select statments for them.
		!
		IF NOT .NML$GL_PRS_FLGS [NML$V_PRS_VMS] THEN
			SELECTONEU .NML$GB_ENTCODE OF
			    SET
			    [NMA$C_ENT_CIR]:
				NML_SHO_CIRCUIT (.INDEX); ! Circuit

			    [NMA$C_ENT_LIN]:
				NML_SHO_LINE (.INDEX); ! Line

			    [NMA$C_ENT_LOG]:
				NML_SHO_LOGGING (.INDEX); ! Logging

			    [NMA$C_ENT_NOD]:
				NML_SHO_NODE (.INDEX); ! Node
			    TES
		ELSE
			SELECTONEU .NML$GB_ENTCODE OF
			    SET

			    [NMA$C_SENT_OBJ]:
				NML_SHO_OBJECT (.INDEX); ! Object

			    [NMA$C_SENT_LNK]:
				NML_SHO_LINK (.INDEX); ! Link

			    TES;
	    END;

    NML$ERROR_1 (NMA$C_STS_FUN);	! Send option error message

    END;				! End of NML$READ

%SBTTL 'NML_LIS_CIRCUIT  List permanent circuit parameters'
ROUTINE NML_LIS_CIRCUIT (INDEX) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine lists a summary of circuit parameters from
!	the permanent data base.
!
! FORMAL PARAMETERS:
!
!	INDEX		Entity information table index code.
!
! IMPLICIT INPUTS:
!
!	NML$GB_ENTFRM contains the entity format code.
!
!--

BEGIN

MAP
	NML$GB_ENTFRM : BYTE SIGNED;

SELECTONEU .NML$GB_ENTFRM OF
	SET

	[NMA$C_ENT_KNO]:		! Known

	    NML_LISTPLURAL (NML$C_CIRCUIT, ! Entity code
			    NML$LISTKNOWN, ! Routine name
			    .INDEX,	! Info code
			    0,		! Not used
			    0);		! Not used

	[1 TO 16]:			! Circuit name

	    NML_LISTPLURAL (NML$C_CIRCUIT,  ! Entity code
			    NML$LISTENTITY, ! Routine name
			    .INDEX,	! Info code
			    .NML$GB_ENTFRM, ! Id string length
			    NML$AB_ENTID); ! Id string address

	TES;

    NML$ERROR_2 (NMA$C_STS_IDE, NMA$C_ENT_CIR); ! Option error

    END;				! End of NML_LIS_CIRCUIT

%SBTTL 'NML_LIS_LINE  List permanent line parameters'
ROUTINE NML_LIS_LINE (INDEX) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine lists a summary of line parameters from
!	the permanent data base.
!
! FORMAL PARAMETERS:
!
!	INDEX		Entity information table index code.
!
! IMPLICIT INPUTS:
!
!	NML$GB_ENTFRM contains the entity format code.
!
!--

BEGIN

MAP
	NML$GB_ENTFRM : BYTE SIGNED;

SELECTONEU .NML$GB_ENTFRM OF
	SET

	[NMA$C_ENT_KNO]:		! Known

	    NML_LISTPLURAL (NML$C_LINE,	! Entity code
			    NML$LISTKNOWN, ! Routine name
			    .INDEX,	! Info code
			    0,		! Not used
			    0);		! Not used

	[1 TO 16]:			! Line name

	    NML_LISTPLURAL (NML$C_LINE,	! Entity code
			    NML$LISTENTITY, ! Routine name
			    .INDEX,	! Info code
			    .NML$GB_ENTFRM, ! Id string length
			    NML$AB_ENTID); ! Id string address

	TES;

    NML$ERROR_2 (NMA$C_STS_IDE, NMA$C_ENT_LIN); ! Option error

    END;				! End of NML_LIS_LINE

%SBTTL 'NML_LIS_LOGGING  List permanent logging parameters'
ROUTINE NML_LIS_LOGGING (INDEX) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine lists a summary of logging parameters from the permanent
!	data base.
!
! FORMAL PARAMETERS:
!
!	INDEX		Entity information table index code.
!
! IMPLICIT INPUTS:
!
!	NML$GB_ENTFRM contains the entity format code.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	NML$GB_ENTFRM : BYTE SIGNED;

    SELECTONEU .NML$GB_ENTFRM OF
	SET

	[NMA$C_ENT_KNO]:		! Known

	    NML_LISTPLURAL (NML$C_LOGGING, ! Entity code
			    NML$READKNOLOG, ! Routine name
			    .INDEX,	! Info code
			    0,		! Not used
			    0);		! Not used

	[NMA$C_SNK_CON,			! Console
	 NMA$C_SNK_FIL,			! File
	 NMA$C_SNK_MON]: 		! Monitor

	    NML_LISTPLURAL (NML$C_LOGGING, ! Entity code
			    NML$READLOGGING, ! Routine address
			    .INDEX,	! Info code
			    .NML$GB_ENTFRM, ! Sink type
			    0);		 ! Not used

	TES;

    NML$ERROR_2 (NMA$C_STS_IDE, 	! Identification error
		 NMA$C_ENT_LOG);

    END;				! End of NML_LIS_LOGGING

%SBTTL 'NML_LIS_NODE  List permanent node parameters'
ROUTINE NML_LIS_NODE (INDEX) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine lists a summary of node parameters from the permanent
!	data base.
!
! FORMAL PARAMETERS:
!
!	INDEX		Entity information table index code.
!
! IMPLICIT INPUTS:
!
!	NML$GB_ENTFRM contains the entity format code.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	NML$GB_ENTFRM : BYTE SIGNED;

    SELECTONEU .NML$GB_ENTFRM OF
	SET

	[NMA$C_ENT_LOO]:			! Loop nodes

	    NML_LISTPLURAL (NML$C_LOOPNODE,	! Entity code
			    NML$LISTKNOWN,	! Routine address
			    .INDEX,		! Info code
			    0,			! Not used
			    0);			! Not used

	[NMA$C_ENT_KNO]:			! Known

	    NML_LISTPLURAL (NML$C_NODE,		! Entity code
			    NML$LISTKNONODES,	! Routine address
			    .INDEX,		! Info code
			    0,			! Not used
			    0);			! Not used

	[NMA$C_ENT_ADD]:			! Node address
	    BEGIN

	    BIND
		NOD_NUM = NML$AB_ENTID : WORD;

	    IF .NML$GL_PRS_FLGS [NML$V_PRS_EXE]
	    THEN
		NML_LISTPLURAL (NML$C_EXECUTOR,	! Entity code
				NML$LISTEXECUTOR, ! Routine address
				.INDEX,		! Info code
				0,		! No id
				0)		! No id
	    ELSE
		NML_LISTPLURAL (NML$C_NODE,	! Entity code
			 	NML$LISTENTITY,	! Routine address
				.INDEX,		! Info code
				2,		! Id string length
				NML$AB_ENTID);	! Id string address

	    END;

	[1 TO 6]:				! Node name

	    IF .NML$GL_PRS_FLGS [NML$V_PRS_EXE]
	    THEN
		NML_LISTPLURAL (NML$C_EXECUTOR,	! Entity code
			 	NML$LISTEXECUTOR, ! Routine address
				.INDEX,		! Info code
				0,		! No id
				0)		! No id
	    ELSE
		NML_LISTPLURAL (NML$C_NODEBYNAME, ! Entity code
			 	NML$LISTENTITY,	! Routine address
				.INDEX,		! Info code
				.NML$GB_ENTFRM,	! Id string length
				NML$AB_ENTID);	! Id string address

	TES;

    NML$ERROR_2 (NMA$C_STS_IDE,		! Identification error
		 NMA$C_ENT_NOD);

    END;				! End of NML_LIS_NODE

%SBTTL 'NML_LIS_OBJECT  List permanent object parameters'
ROUTINE NML_LIS_OBJECT (INDEX) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine lists a summary of object parameters from the permanent
!	data base.
!
! FORMAL PARAMETERS:
!
!	INDEX		Entity information table index code.
!
! IMPLICIT INPUTS:
!
!	NML$GB_ENTFRM contains the entity format code.
!	NML$GL_PRS_FLGS contains the message parsing flags.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	NML$GB_ENTFRM : BYTE SIGNED;

!
! All functions specifying the object entity must be system-specific.
!
    IF .NML$GL_PRS_FLGS [NML$V_PRS_VMS]
    THEN
    SELECTONEU .NML$GB_ENTFRM OF
	SET

	[NMA$C_ENT_KNO]:			! Known

	    NML_LISTPLURAL (NML$C_OBJECT,	! Entity code
			    NML$LISTKNOWN,	! Routine address
			    .INDEX,		! Info code
			    0,			! Not used
			    0);			! Not used

	[1 TO 16]:				! Object name

	    NML_LISTPLURAL (NML$C_OBJECT,	! Entity code
			   NML$LISTENTITY,	! Routine address
			   .INDEX,		! Info code
			   .NML$GB_ENTFRM,	! Id string length
			   NML$AB_ENTID);	! Id string address

	TES;

    NML$ERROR_2 (NMA$C_STS_IDE, 	! Identification error
		 NMA$C_SENT_OBJ);

    END;				! End of NML_LIS_OBJECT

%SBTTL 'NML_SHO_CIRCUIT  Show volatile circuit parameters'
ROUTINE NML_SHO_CIRCUIT (INDEX) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine shows a summary of circuit parameters from
!	the volatile data base.
!
! FORMAL PARAMETERS:
!
!	INDEX		Entity information table index code.
!
! IMPLICIT INPUTS:
!
!	NML$GB_ENTFRM contains the entity format code.
!
!--

BEGIN

MAP
	NML$GB_ENTFRM : BYTE SIGNED;

SELECTONEU .NML$GB_ENTFRM OF
	SET

	[NMA$C_ENT_ACT]:		! Active
	    NML_SHOWPLURAL (NML$C_CIRCUIT,
			    NML$SHOWACTIVE,	! Routine name
			    .INDEX,		! Info code
			    0,			! Not used
			    0);			! Not used

	[NMA$C_ENT_KNO]:		! Known
	    NML_SHOWPLURAL (NML$C_CIRCUIT,
			    NML$SHOWKNOWN,	! Routine name
			    .INDEX,		! Info code
			    0,			! Not used
			    0);			! Not used

	[1 TO 16]:			! Circuit name
	    NML_SHOWPLURAL (NML$C_CIRCUIT,
			    NML$SHOWENTITY,	! Routine name
			   .INDEX,		! Info code
			   .NML$GB_ENTFRM,	! Id string length
			   NML$AB_ENTID);	! Id string address

	TES;

    NML$ERROR_2 (NMA$C_STS_IDE,		! Identification error
		 NMA$C_ENT_CIR);

    END;				! End of NML_SHO_CIRCUIT

%SBTTL 'NML_SHO_LINE  Show volatile line parameters'
ROUTINE NML_SHO_LINE (INDEX) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine shows a summary of line parameters from
!	the volatile data base.
!
! FORMAL PARAMETERS:
!
!	INDEX		Entity information table index code.
!
! IMPLICIT INPUTS:
!
!	NML$GB_ENTFRM contains the entity format code.
!
!--

BEGIN

MAP
	NML$GB_ENTFRM : BYTE SIGNED;

SELECTONEU .NML$GB_ENTFRM OF
	SET

	[NMA$C_ENT_ACT]:		! Active
	    NML_SHOWPLURAL (NML$C_LINE,
			    NML$SHOWACTIVE,	! Routine name
			    .INDEX,		! Info code
			    0,			! Not used
			    0);			! Not used

	[NMA$C_ENT_KNO]:		! Known
	    NML_SHOWPLURAL (NML$C_LINE,
			    NML$SHOWKNOWN,	! Routine name
			    .INDEX,		! Info code
			    0,			! Not used
			    0);			! Not used

	[1 TO 16]:			! Line name
	    NML_SHOWPLURAL (NML$C_LINE,
			    NML$SHOWENTITY,	! Routine name
			   .INDEX,		! Info code
			   .NML$GB_ENTFRM,	! Id string length
			   NML$AB_ENTID);	! Id string address

	TES;

    NML$ERROR_2 (NMA$C_STS_IDE,		! Identification error
		 NMA$C_ENT_LIN);

    END;				! End of NML_SHO_LINE

%SBTTL 'NML_SHO_LOGGING  Show volatile logging parameters'
ROUTINE NML_SHO_LOGGING (INDEX) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine shows logging parameters from the volatile
!	data base.
!
! FORMAL PARAMETERS:
!
!	INDEX		Entity information table index code.
!
! IMPLICIT INPUTS:
!
!	NML$GB_ENTFRM contains the entity format code.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	NML$GB_ENTFRM : BYTE SIGNED;

    SELECTONEU .NML$GB_ENTFRM OF
	SET

	[NMA$C_ENT_ACT]:			! Active

	    NML_SHOWPLURAL (NML$C_LOGGING,
			    NML$READACTLOG,	! Routine name
			    .INDEX,		! Info code
			    0,			! Not used
			    0);			! Not used

	[NMA$C_ENT_KNO]:			! Known

	    NML_SHOWPLURAL (NML$C_LOGGING,
			    NML$READKNOLOG,	! Routine name
			    .INDEX,		! Info code
			    0,			! Not used
			    0);			! Not used

	[NMA$C_SNK_CON,				! Console
	 NMA$C_SNK_FIL,				! File
	 NMA$C_SNK_MON]:			! Monitor

	    NML_SHOWPLURAL (NML$C_LOGGING,
			    NML$READLOGGING,	! Routine name
			    .INDEX,		! Info code
			    .NML$GB_ENTFRM,	! Id string length
			    NML$AB_ENTID);	! Id string address

	TES;

    NML$ERROR_2 (NMA$C_STS_IDE,		! Identification error
		 NMA$C_ENT_LOG);

    END;				! End of NML_SHO_LOGGING

%SBTTL 'NML_SHO_NODE  List permanent node parameters'
ROUTINE NML_SHO_NODE (INDEX) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine lists a summary of node parameters from the permanent
!	data base.
!
! FORMAL PARAMETERS:
!
!	INDEX		Entity information table index code.
!
! IMPLICIT INPUTS:
!
!	NML$GB_ENTFRM contains the entity format code.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	NML$GB_ENTFRM : BYTE SIGNED;

    SELECTONEU .NML$GB_ENTFRM OF
	SET

	[NMA$C_ENT_LOO]:		! Loop nodes

	    NML_SHOWPLURAL (NML$C_LOOPNODE,
			    NML$SHOW_KNOWN_LOOP,! Routine name
			    .INDEX,		! Info code
			    0,			! Not used
			    0);			! Not used

	[NMA$C_ENT_ACT]:		! Active

	    NML_SHOWPLURAL (NML$C_NODE,
			    NML$SHOACTNODES,	! Routine name
			    .INDEX,		! Info code
			    0,			! Not used
			    0);			! Not used

	[NMA$C_ENT_KNO]:		! Known

	    NML_SHOWPLURAL (NML$C_NODE,
			    NML$SHOW_KNOWN_NODES,! Routine name
			    .INDEX,		! Info code
			    0,			! Not used
			    0);			! Not used

	[NMA$C_ENT_ADD]:		! Node address
	    BEGIN

	    BIND
		NOD_NUM = NML$AB_ENTID : WORD;

	    IF .NML$GL_PRS_FLGS [NML$V_PRS_EXE]
	    THEN
		NML_SHOWPLURAL (NML$C_EXECUTOR,
				NML$SHOWEXECUTOR,	! Routine name
				.INDEX,			! Info code
				0,			! No id
				0)			! No id
	    ELSE
		NML_SHOWPLURAL (NML$C_NODE,
				NML$SHOWNODE,	! Routine address
				.INDEX,		! Info code
			        2,		! Id string length
			        NML$AB_ENTID);	! Id (node address) address

	    END;

	[1 TO 6]:			! Node name

	    IF .NML$GL_PRS_FLGS [NML$V_PRS_EXE]
	    THEN
		NML_SHOWPLURAL (NML$C_EXECUTOR,
				NML$SHOWEXECUTOR,	! Routine address
				.INDEX,			! Info code
				0,			! No id
				0)			! No id
	    ELSE
		NML_SHOWPLURAL (NML$C_NODEBYNAME,
				NML$SHOWNODEBYNAME,	! Routine address
				.INDEX,			! Info code
				.NML$GB_ENTFRM,		! Id (node name) length
				NML$AB_ENTID);		! Id address

	TES;

    NML$ERROR_2 (NMA$C_STS_IDE,		! Identification error
		 NMA$C_ENT_NOD);

    END;				! End of NML_SHO_NODE

%SBTTL 'NML_SHO_OBJECT  Show volatile object parameters'
ROUTINE NML_SHO_OBJECT (INDEX) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine shows a summary of object parameters from the volatile
!	data base.
!
! FORMAL PARAMETERS:
!
!	INDEX		Entity information table index code.
!
! IMPLICIT INPUTS:
!
!	NML$GB_ENTFRM contains the entity format code.
!	NML$GL_PRS_FLGS contains the message parsing flags.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	NML$GB_ENTFRM : BYTE SIGNED;

!
! All functions specifying the object entity must be system-specific.
!
    IF .NML$GL_PRS_FLGS [NML$V_PRS_VMS]
    THEN
	BEGIN

	SELECTONEU .NML$GB_ENTFRM OF
	    SET

	    [NMA$C_ENT_KNO,		! Known
	     NMA$C_ENT_ACT]:		! Active

		NML_SHOWPLURAL (NML$C_OBJECT,
				NML$SHOKNOOBJ,	! Routine address
				.INDEX,		! Info code
				0,		! Not used
				0);		! Not used

	    [1 TO 16]:				! Object name

		NML_SHOWPLURAL (NML$C_OBJECT,
				NML$SHOWOBJECT,	! Routine address
				.INDEX,		! Info code
				.NML$GB_ENTFRM,	! Id length
				NML$AB_ENTID);	! Id address

	    TES;
	END;

    NML$ERROR_2 (NMA$C_STS_IDE,		! Identification error
		 NMA$C_SENT_OBJ);

    END;				! End of NML_SHO_OBJECT

%SBTTL 'NML_SHO_LINK  List volatile LINK parameters'
ROUTINE NML_SHO_LINK (INDEX) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine lists a summary of LINK parameters from the volatile
!	data base.
!
! FORMAL PARAMETERS:
!
!	INDEX		Entity information table index code.
!
! IMPLICIT INPUTS:
!
!	NML$GB_ENTFRM contains the entity format code.
!	NML$GL_PRS_FLGS contains the message parsing flags.
!
!--

    BEGIN

    MAP
	NML$GB_ENTFRM : BYTE SIGNED;

!
! All functions specifying the LINK entity must be system-specific.
!
    IF .NML$GL_PRS_FLGS [NML$V_PRS_VMS]
    THEN
	BEGIN

	SELECTONEU .NML$GB_ENTFRM OF
		SET
		[NMA$C_ENT_KNO]:		! Known, or known with node.
		    NML_SHOWPLURAL (NML$C_LINKS,
				    NML$SHOW_PLURAL_LINKS,! Routine address
				    .INDEX,		! Info code
				    0,			! Not used
				    0);			! Not used

	        [NMA$C_ENT_ADD]:		! Single link number in command
		    NML_SHOWPLURAL (NML$C_LINKS,
				NML$SHOWENTITY,	! Routine address
				.INDEX,		! Info code
				0,		! Id length
				.NML$AB_ENTID);	! Id address
		TES;

	END;

    NML$ERROR_2 (NMA$C_STS_IDE,		! Identification error
		 NMA$C_SENT_LNK);

    END;				! End of NML_SHO_LINK

%SBTTL 'NML_LISTPLURAL  List known entity parameters'
ROUTINE NML_LISTPLURAL (ENT, RTN, INF, PRM1, PRM2) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine calls an entity-specific routine to process a
!	request to read permanent data base information.  Each request
!	is bracketed by a NICE 'more' message and a NICE 'done' message.
!	The appropriate permanent data base file is opened for read.
!
! FORMAL PARAMETERS:
!
!	ENT		Entity code.
!	RTN		Routine address.
!	INF		Information code.
!	PRM1		First parameter.
!	PRM2		Second parameter.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	FID,				! File id
	MSG_SIZE;			! Response message size

!
! Open the permanent data base file.
!
    FID = .NML$AB_ENTITYDATA [.ENT, EIT$B_FILEID]; ! Get file id

    NML$OPENFILE (.FID, NMA$C_OPN_AC_RO);
!
! Enable condition handler to allow done message to be sent.
!
    LIB$ESTABLISH (NML$MAINHANDLER);
!
! Send success with multiple responses message.
!
    NML$BLD_REPLY (UPLIT(0, NMA$C_STS_MOR), MSG_SIZE);
    NML$SEND (NML$AB_SNDBUFFER, .MSG_SIZE);
!
! Call entity-specific routine.
!
    (.RTN) (.ENT, .INF, .PRM1, .PRM2);
!
! Signal done message.
!
    LIB$REVERT ();			! Disable condition handler
    NML$ERROR_1 (NMA$C_STS_DON);	! Signal no more responses

    END;				! End of NML_LISTPLURAL

%SBTTL 'NML_SHOWPLURAL  Show known/active entity parameters'
ROUTINE NML_SHOWPLURAL (ENT, RTN, INF, PRM1, PRM2) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine calls an entity-specific routine to process a
!	request to read volatile data base information.  Each request
!	is bracketed by a NICE 'more' message and a NICE 'done' message.
!
! FORMAL PARAMETERS:
!
!	ENT		Entity type code.
!	RTN		Address of entity routine to be called.
!	INF		Information identity code (index).
!	PRM1		Routine parameter value.
!	PRM2		Routine parameter value.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	MSG_SIZE;
!
! Send success with multiple responses message.
!
    NML$BLD_REPLY (UPLIT(0, NMA$C_STS_MOR), MSG_SIZE);
    NML$SEND (NML$AB_SNDBUFFER, .MSG_SIZE);
!
! Enable condition handler to allow done message to be sent.
!
    LIB$ESTABLISH (NML$MAINHANDLER);
!
! Call entity-specific routine.
!
    (.RTN) (.ENT, .INF, .PRM1, .PRM2);
!
! Signal done message.
!
    LIB$REVERT ();			! Disable condition handler
    NML$ERROR_1 (NMA$C_STS_DON);	! Signal no more responses

    END;				! End of NML_SHOWPLURAL

END					! End of module

ELUDOM
