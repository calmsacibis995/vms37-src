	.TITLE	NPARSE	NETWORK (BINARY) MESSAGE PARSER
	.IDENT	'V03-000'
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY:  TABLE DRIVEN NETWORK (BINARY) MESSAGE PARSER
;
;
; ABSTRACT:
;
;	NPARSE is a binary parsing facility similar to the table-driven
;	ASCII parser, TPARSE.  State tables provide the information necessary
;	to validate and process binary data messages such as those of the
;	DECnet-VAX NICE protocol.
;
;
; ENVIRONMENT:  VAX/VMX Operating System
;
; AUTHOR: Scott Davidson	, CREATION DATE: 25-Sep-1979
;
;	  Adapted from NPARS facility for DECnet-11M.
;
; MODIFIED BY:
;
; 	, : VERSION
;	V03-001	MKP0001		Kathy Perko		19-Jan-1982
;		Add psects which are compatible with BLISS ones so that
;		NML doesn't use so many image sections.
;
;	V03-001	MKP0001		Kathy Perko		25-Oct-1981
;		Fix copyright and add documentation about NPARSE tables
;		which this module parses.
;--

;	   NPARSE - Table Driven Parser for the NICE Protocol
;
;NPARSE is a VMS adaptation of the RSX NPARS facility.  NPARSE is a stripped
;down version of the standard table driven parser, TPARSE, (see Chapter 7
;of the VAX-11 Common Run-Time Procedure Library Reference Manual manual). The
;parse tables are set up in a similar manner using the following macros:
;
;1. Initialising the state table
;
;	The IMSG$ macro is used to initialise the state table which describes
;the format of the message to be parsed. The state table is placed in the psect
;'NPA$STATE'.  The IMSG$ macro takes a single argument which is the starting
;label of the state table. The macro format is:
;
;	IMSG$	statetable
;
;
;2. Defining a message field
;
;	The FIELD$ macro declares the beginning of field within the message.
;Syntactically, this macro delimits one message field from another. The
;FIELD$ macro is coded as follows:
;
;
;	FIELD$	[label]
;
;where label is an alphanumeric symbol that is equated to the address of the
;state.
;
;
;3. Defining a field specification
;
;	The general format for defining a field specification is as follows:
;
;	$Macro	[argument][,label    ][,action][,mask,mskadr][,param]
;			  [,NPA$_EXIT]
;			  [,NPA$_FAIL]
;
;where label, action, mask, mskadr and param have the same meanings as
;for TPARSE.  The following macros are used to define field specifications:
;
;Macro	Argument
;
;$IMAGE	size		defines an image field with a maximum length of 'size'
;
;$WORD	number		matches a word (2 bytes) from the message.
;
;$BYTE	value		matches a single byte from the message.
;
;$LOOK	[value]		Examine a byte but do not advance the pointers.
;			Optionally, examine a byte with the specified value.
;
;$EOM			matches the end of the message.
;
;$NULL			this transition is always successful (equivalent to
;			the TPARSE TPA$_LAMDA transition).
;
;$SBEXP	state		recursively calls NPARSE to parse a subexpression
;			from the message.
;
;$ERROR	code		forces a failure from NPARSE at the top level and loads
;			the error code into R0.  All error codes should
;			be even numbers suitable for testing with BLBC or BLBS.
;
;$EXTZV	fld		matches a value of a specified field of bits within
;			a byte and optionally advance the pointers.  The
;			'fld' argument has the following form:
;
;				<value,position,size[,NPA$_ADVANCE]>.
;
;				where:
;
;				value = field value to match
;				position = bit position within the byte
;				size = field width (0<size<9)
;
;			The field value (not the entire byte) is stored in
;			NPA$B_BYTE.
;
;$MASK	bitmask		matches a byte with any of the specified bits set.
;
;$MATCH	number		matches a sequence of bytes, 'number' in length.
;
;
;
;			  Calling Conventions
;
;NPARSE is invoked in the following manner:
;
;	CALLS	#2,NMA$NPARSE
;
;When NPARSE is invoked, the following arguments must be set up:
;
;	P1 - pointer to NPARSE argument block
;	P2 - label of the starting state in the NPARSE table
;
;The NPARSE argument block has the following format:
;
;
;		+---------+---------+---------+---------+
;NPA$L_COUNT	!		NPA$K_COUNT0		!
;		+---------+---------+---------+---------+
;NPA$L_MSGCNT	!	bytes remaining to be parsed	!
;		+---------+---------+---------+---------+
;NPA$L_MSGPTR	!	pointer to unparsed message	!
;		+---------+---------+---------+---------+
;NPA$L_OPTIONS	!		*reserved*		!
;		+---------+---------+---------+---------+
;NPA$L_FLDCNT	!	count of matched field		!
;		+---------+---------+---------+---------+
;NPA$L_FLDPTR	!	pointer to matched field	!
;NPA$B_BYTE	+---------+---------+---------+---------+
;NPA$W_WORD	!		unsigned value		!
;NPA$L_LONG	+---------+---------+---------+---------+
;NPA$L_NUMBER	!		signed value		!
;		+---------+---------+---------+---------+
;NPA$L_PARAM	!	action routine parameter	!
;		+---------+---------+---------+---------+
;
;
;On return from NPARSE, R0 contains the status code.
;
;Action routines are called with the argument pointer (AP) pointing to
;the NPARSE argument block.  Transitions may be rejected by returning R0
;with the low bit clear.
;
;
;Example of a state table to parse a message consisting of:
;
;	1. Image-8 field
;	2. Parameter field (parameters 100, 101 and 102 are allowed)
;	   The parameters may be repeated any number of times.
;
;	IMSG$	MSGTAB
;
;	FIELD$
;	$IMAGE	8
;
;	FIELD$	PARM
;	$SBEXP	PARAM,PARM
;	$EOM	,NPA$_EXIT
;	$ERROR	NML$_STS_FOR
;
;	FIELD$	PARAM
;	$PARAM	100,NPA$_EXIT,,1,PARNUM
;	$PARAM	101,NPA$_EXIT,,2,PARNUM
;	$PARAM	102,NPA$_EXIT,,4,PARNUM
;
;	FIELD$
;

	.SBTTL	Declarations

;
; INCLUDE FILES:
;

$NPADEF		; Define NPARSE argument block offsets
NPADF$		; Define NPARSE function and matching codes

;
; MACROS:
;

;
; EQUATED SYMBOLS:
;

	.SBTTL	****DEBUG****

	$$DEBUG$$	= 1

	.PSECT	$OWN$,NOEXE,RD,WRT
;
; OWN STORAGE:
;

NPA$GL_LOGMASK::
	.LONG	0		; Logging mask (1=yes)


	.SBTTL	NMA$NPARSE - MAIN ROUTINE BODY
	.PSECT	$CODE$,EXE,RD,NOWRT
;++
; FUNCTIONAL DESCRIPTION:
;
;
; FORMAL PARAMETERS:
;
;	P1 - Pointer to NPARSE argument block
;	P2 - Initial state pointer
;
; IMPLICIT INPUTS:
;
;	NPARSE argument block must contain message length (NPA$L_MSGCNT)
;	and message pointer (NPA$L_MSGPTR).
;
; IMPLICIT OUTPUTS:
;
;	NPARSE argument block contains length of unparsed message (NPA$L_MSGCNT)
;	and pointer to unparsed part of message (NPA$L_MSGPTR).
;
; ROUTINE VALUE:
; COMPLETION CODES:
;
;	R0 - Success or error status code
;
; SIDE EFFECTS:
;
;	NONE
;
;--

	.ENTRY	NMA$NPARSE,^M<R2,R3,R4,R5,R6,R7,R8,R9,R10>
	MOVL	4(AP),R10		; Get argument block pointer
	MOVL	NPA$L_MSGCNT(R10),R2 	; Get length argument
	MOVL	NPA$L_MSGPTR(R10),R3 	; Get buffer pointer argument
	MOVL	8(AP),R5		; Get initial state argument
.IF	DEFINED	$$DEBUG$$
	PUSHL	NPA$L_MSGCNT(R10)	; Store initial message count
	PUSHAL	OUT_INIT		; Store pointer to FAO control string
	CALLS	#2,NPA$$DEBUG_OUT 	; Call debug output routine
.ENDC
	CALLS	#0,NPA$$SUB_EXPR	; Begin message processing
.IF	DEFINED	$$DEBUG$$
	PUSHR	#^M<R0>			; Save register
	PUSHL	NPA$L_MSGCNT(R10)	; Store remaining message length
	PUSHAL	OUT_LEFT		; Store pointer to FAO control string
	CALLS	#2,NPA$$DEBUG_OUT	; Call debug output routine
	POPR	#^M<R0>			; Restore register
.ENDC
	RET

	.SBTTL	NPA$$SUB_EXPR - SUBEXPRESSION ENTRY POINT
;
; Subexpression entry point
;
	.ENTRY	NPA$$SUB_EXPR,^M<R6>	;
;
; Enter new state specified in R5
;
MSTAT:	CMPL	R5,#NPA$_FAIL		; Fail the parse ?
	BEQL	SYNERR			; If EQL, yes
	CLRL	NPA$L_FLDCNT(R10) 	; Clear any old field
	CLRL	NPA$L_LONG(R10)	  	;  ...
	CLRL	NPA$L_NUMBER(R10) 	;  ...
	MOVL	R3,NPA$L_FLDPTR(R10) 	; Initialize field pointer
	MOVZWL	(R5)+,R6		; Get type
	CASE	R6,<-			; Dispatch
		MATCH_IMAGE,-		; 00 - image field
		MATCH_WORD,-		; 01 - word (unsigned)
		MATCH_MASK,-		; 02 - match masked byte value
		MATCH_BYTE,-		; 03 - byte (unsigned)
		MATCH_EOM,-		; 04 - match end of message
		MATCH_ALL,-		; 05 - always match
		MATCH_SBEXP,-		; 06 - match a subexpression
		MATCH_ERROR,-		; 07 - exit from parse with error
		MATCH_STRING,-		; 08 - match byte string
		EXAMINE_BYTE,-		; 09 - examine a byte
		MATCH_EXTZV-		; 10 - match extracted byte value
		>			;
SYNERR:
	BICL	#1,R0			; Indicate parse failure
.IF	DEFINED	$$DEBUG$$
	PUSHR	#^M<R0>			; Save register
	PUSHL	R0			; Store exit status value
	PUSHAL	OUT_FAIL		; Store pointer to FAO control string
	CALLS	#2,NPA$$DEBUG_OUT	; Call debug output routine
	POPR	#^M<R0>			; Restore register
.ENDC
	BRB	EXIT			;
SUCCESS:
.IF	DEFINED	$$DEBUG$$
	PUSHAL	OUT_SUCC		; Store output string address
	PUSHL	#OUT_SUCC_LEN		;   and length
	CALLS	#2,NPA$$DEBUG_OUT2 	; Call debug output routine
.ENDC
	BISL	#1,R0			; Indicate successful parse
EXIT:
	RET				;

	.SBTTL	MATCH_IMAGE - MATCH ON IMAGE MODE FIELD
;+
; **-MATCH_IMAGE-MATCH ON IMAGE MODE FIELD
;
;	AN IMAGE MODE FIELD CONSISTS OF A SINGLE BYTE GIVING THE LENGTH OF
;	THE FIELD FOLLOWED BY THAT NUMBER OF BYTES.
;-
; INPUTS:
;	R2 - # OF BYTES REMAINING TO BE SCANNED
;	R3 - POINTER TO UNSCANNED PART OF MESSAGE
;	R5 - POINTER TO ?
;
MATCH_IMAGE:
	TSTL	R2			; Any bytes left in message ?
	BLEQ	10$			; If LEQ, count is not present
	MOVZBL	(R3),R6			; Get length of image field
	CMPL	R6,2(R5)		; Is it within specified range ?
	BGTRU	10$			; If GTRU, no
	INCL	R6			; Take into account the count byte
	CMPL	R6,R2			; Enough characters in message ?
	BGTRU	10$			; If GTRU, no
	MOVL	R6,NPA$L_FLDCNT(R10) 	; Set size of matched field
.IF	DEFINED	$$DEBUG$$
	PUSHL	R3			; Store pointer to image field
	PUSHAL	OUT_IMAGE		; Store pointer to FAO control string
	CALLS	#2,NPA$$DEBUG_OUT 	; Call debug output routine
.ENDC
	BRW	UPDTRN			; Update pointers and do transition
10$:	BRW	NXTRAN			; Reject the transition

	.SBTTL	MATCH_WORD - MATCH ON PARAMETER VALUE IN MESSAGE
;+
; **-MATCH_WORD-MATCH ON PARAMETER VALUE IN MESSAGE
;
;	A word value occupies two consecutive message bytes.
;	Match the specified word value (unsigned).
;-
; INPUTS:
;	R2 - # OF BYTES REMAINING TO BE SCANNED
;	R3 - POINTER TO UNSCANNED PART OF MESSAGE
;
MATCH_WORD:
	CMPL	R2,#2			; Two bytes left in message ?
	BLSS	10$			; If LSS, no
	MOVZWL	(R3),NPA$W_WORD(R10)	; Get word value for action routines
	CMPW	2(R5),NPA$W_WORD(R10)	; Does it match ?
	BNEQU	10$			; If NEQU, no
	MOVL	#2,NPA$L_FLDCNT(R10) 	; Set length of matched field
.IF	DEFINED	$$DEBUG$$
	PUSHL	NPA$W_WORD(R10)		; Store word value
	PUSHAL	OUT_WORD		; Store pointer to FAO control string
	CALLS	#2,NPA$$DEBUG_OUT 	; Call debug output routine
.ENDC
	BRW	UPDTRN			; Update pointers and do transition
10$:	BRW	NXTRAN			; Reject the transition

	.SBTTL	MATCH_MASK - MATCH ON MASKED BYTE VALUE
;+
; **-MATCH_MASK-MATCH ON BYTE VALUE IN MESSAGE
;
;	MATCH ON THE NEXT AVAILABLE BYTE IN THE MESSAGE.
;-

MATCH_MASK:
	TSTL	R2			; Any bytes left in message ?
	BLEQ	20$			; If LEQ,  no
10$:	MOVZBL	(R3),NPA$B_BYTE(R10) 	; Get next byte from message
	BITB	2(R5),NPA$B_BYTE(R10)	; Any mask bits set ?
	BEQLU	20$			; If EQLU, no
	MOVL	#1,NPA$L_FLDCNT(R10) 	; Set length of matched field
.IF	DEFINED	$$DEBUG$$
	PUSHL	NPA$B_BYTE(R10)		; Store byte value
	PUSHAL	OUT_MATCH		; Store pointer to FAO control string
	CALLS	#2,NPA$$DEBUG_OUT 	; Call debug output routine
.ENDC
	BRW	UPDTRN			; Update pointers and do transition
20$:	BRW	NXTRAN			; Reject the transition

	.SBTTL	EXAMINE_BYTE - LOOK AT A BYTE WITHOUT ADVANCING POINTERS

;+
; **-EXAMINE_BYTE-LOOK AT A BYTE WITHOUT ADVANCING MESSAGE POINTERS
;-
;
EXAMINE_BYTE:
	TSTL	R2			; Any bytes left in message ?
	BLEQ	20$			; If LEQ, no
	MOVZBL	(R3),NPA$B_BYTE(R10)	; Get next byte
	BITW	#NPA$M_EXT,(R5)		; Extension present ?
	BEQLU	10$			; If EQLU, no
	CMPB	2(R5),NPA$B_BYTE(R10)	; Do they match ?
	BNEQU	20$			; If NEQU, no
	MOVL	#1,NPA$L_FLDCNT(R10)	; Set length of matched field
10$:
.IF	DEFINED	$$DEBUG$$
	PUSHL	NPA$B_BYTE(R10)		; Store byte value
	PUSHAL	OUT_LOOK		; Store pointer to FAO control string
	CALLS	#2,NPA$$DEBUG_OUT	; Call debug output routine
.ENDC
	BRW	DOTRAN			; Do the transition
20$:	BRW	NXTRAN			; Reject the transition

	.SBTTL	MATCH_EXTZV - LOOK AT EXTRACTED FIELD VALUE
;+
; **-EXAMINE_BYTE-LOOK AT BYTE WITH SPECIFIED FIELD
;-
;
MATCH_EXTZV:
	TSTL	R2			; Any bytes left in message ?
	BLEQ	20$			; If LEQ, no
	MOVZBL	2(R5),NPA$B_BYTE(R10) 	; Get field value
	MOVZBL	3(R5),R6		; Get bit position
	MOVZBL	4(R5),R7		; Get field size (width)
	MOVZBL	(R3),R8			; Get next byte in message
	CMPZV	R6,R7,R8,NPA$B_BYTE(R10) ; Match ?
	BNEQU	20$			; If NEQU, no
	MOVL	#1,NPA$L_FLDCNT(R10) 	; Set field count
.IF	DEFINED	$$DEBUG$$
	PUSHL	2(R5)			; Store field information
	PUSHAL	OUT_EXTZV		; Store pointer to FAO control string
	CALLS	#2,NPA$$DEBUG_OUT 	; Call debug output routine
.ENDC
	BITB	#NPA$_ADVANCE,5(R5)	; Advance pointers ?
	BEQL	10$			; If EQL, no
	BRW	UPDTRN			; Update pointers and do transition
10$:	BRW	DOTRAN			; Perform the transition
20$:	BRW	NXTRAN			; Reject the transition

	.SBTTL	MATCH_BYTE - MATCH ON SPECIFIED BYTE VALUE
;+
; **-MATCH_BYTE-MATCH ON SPECIFIED BYTE VALUE
;
;	MATCH ON THE NEXT BYTE IN THE MESSAGE IF IT HAS A SPECIFIED VALUE.
;-
; INPUTS:
;	R2 - # OF BYTES REMAINING TO BE SCANNED
;	R3 - POINTER TO UNSCANNED PART OF MESSAGE
;
MATCH_BYTE:
	TSTL	R2			; Any bytes left in message ?
	BLEQ	10$			; If LEQ, no
	MOVZBL	(R3),NPA$B_BYTE(R10) 	; Get next byte from message
	CMPB	2(R5),NPA$B_BYTE(R10) 	; Does it match specified byte ?
	BNEQU	10$			; If NEQU, no
	MOVL	#1,NPA$L_FLDCNT(R10) 	; Set length of matched field
.IF	DEFINED	$$DEBUG$$
	PUSHL	NPA$B_BYTE(R10) 	; Store parameter value
	PUSHAL	OUT_BYTE		; Store pointer to FAO control string
	CALLS	#2,NPA$$DEBUG_OUT 	; Call debug output routine
.ENDC
	BRW	UPDTRN			; Update pointers and do transition
10$:	BRB	NXTRAN			; Reject the transition

	.SBTTL	MATCH_SBEXP - MATCH ON SUBEXPRESSION
;+
; **-MATCH_SBEXP-MATCH ON SUBEXPRESSION
;
;	CALL THE PARSER RECURSIVELY TO MATCH ON A SPECIFIED
;	SUBEXPRESSION.
;-
; INPUTS:
;	R2 - # OF BYTES REMAINING TO BE SCANNED
;	R3 - POINTER TO UNSCANNED PART OF MESSAGE
;	R5 - POINTER TO CURRENT STATE
;
MATCH_SBEXP:
	PUSHL	R3			; Save registers
	PUSHL	R5			; ...
	MOVL	2(R5),R5		; Get starting state for subexpression
.IF	DEFINED	$$DEBUG$$
	PUSHAL	OUT_SBEXP		; Store pointer to output string
	PUSHL	#OUT_SBEXP_LEN		;   and length
	CALLS	#2,NPA$$DEBUG_OUT2 	; Call debug output routine
.ENDC
	CALLS	#0,NPA$$SUB_EXPR	; Try to parse subexpression
	POPR	#^M<R5>			; Restore state pointer
	MOVL	(SP),NPA$L_FLDPTR(R10) 	; Set pointer to matched subexpression
	SUBL3	(SP)+,R3,NPA$L_FLDCNT(R10) ; Length of matched subexpression
	BLBC	R0,NXTRAN		; If LBC, reject the transition
	BRW	DOTRAN			; Perform the transition

	.SBTTL	MATCH_STRING - MATCH ON SEQUENCE OF BYTES
;+
; **-MATCH_STRING-MATCH ON SEQUENCE OF BYTES
;
;	MATCH ON A SPECIFIED NUMBER OF BYTES IN THE MESSAGE.
;-
; INPUTS:
;	R2 - # OF BYTES REMAINING TO BE SCANNED
;	R3 - POINTER TO UNSCANNED PART OF MESSAGE
;	R5 - POINTER TO FLAG BYTE OF CURRENT STATE
;
MATCH_STRING:
	MOVL	2(R5),R6		; Get number of bytes to match
	CMPL	R6,R2			; Enough characters left in message ?
	BGTR	NXTRAN			; If GTR, No - try next transition
	MOVL	R6,NPA$L_FLDCNT(R10) 	; Set up length of field
.IF	DEFINED	$$DEBUG$$
	PUSHL	R6			; Store byte string pointer
	PUSHAL	OUT_MATCH		; Store pointer to FAO control string
	CALLS	#2,NPA$$DEBUG_OUT 	; Call debug output routine
.ENDC
	BRB	UPDTRN			; Update pointers and perform transition

	.SBTTL	MATCH_EOM - CHECK FOR END OF MESSAGE
;+
; **-MATCH_EOM-CHECK FOR END OF MESSAGE
;
;	CHECK THAT WE HAVE PARSED UP TO THE END OF THE MESSAGE
;-
; INPUTS:
;	R2 - # OF BYTES REMAINING TO BE PARSED
;	R3 - POINTER TO UNSCANNED PART OF MESSAGE
;
MATCH_EOM:
	TSTL	R2			; Any bytes remaining to be parsed ?
	BNEQ	NXTRAN			; If NEQ, yes
.IF	DEFINED	$$DEBUG$$
	PUSHAL	OUT_EOM			; Store output string address
	PUSHL	#OUT_EOM_LEN		;   and length
	CALLS	#2,NPA$$DEBUG_OUT2 	; Call debug output routine
.ENDC
	BRB	DOTRAN			;

	.SBTTL 	NXTRAN - TRY NEXT ENTRY IN TRANSITION TABLE
;+
; **-NXTRAN-TRY NEXT ENTRY IN TRANSITION TABLE
;
;	THE CURRENT TRANSITION HAS FAILED, TRY TO MATCH ON THE NEXT
;	ENTRY IN THE TRANSITION TABLE.
;-
; INPUTS:
;	R2 - # OF BYTES REMAINING UNSCANNED
;	R3 - POINTER TO UNSCANNED PORTION OF MESSAGE
;	R5 - POINTER TO FLAG BYTE OF TRANSITION
;
NXTRAN:	ADDL2	NPA$L_FLDCNT(R10),R2 	; Return any field matched
	SUBL2	NPA$L_FLDCNT(R10),R3 	;  for re-parsing
	CVTWL	(R5)+,R6		; Get flags
	BGEQ	10$			; If GEQ, no
	BRW	SYNERR			; Last transition in state
10$:	MOVL	#6,R7			; Count of flag bits to test
20$:	BLBC	R6,30$			; If LBC, entry not present
	TSTL	(R5)+			; Skip entry in table
30$:	ROTL	#-1,R6,R6		; Check next flag bit
	SOBGTR	R7,20$			; Loop
	BRW	MSTAT			;   and try next transition

	.SBTTL	MATCH_ERROR - LEAVE PARSER WITH ERROR
;+
; **-MATCH_ERROR-LEAVE PARSER WITH ERROR
;
;	EXIT FROM THE PARSER AT THE TOP LEVEL WITH AN ERROR CODE.
;-
; INPUTS:
;	R2 - # OF BYTES REMAINING TO BE SCANNED
;	R3 - POINTER TO UNSCANNED PART OF MESSAGE
;	R5 - POINTER TO CURRENT STATE
;
; OUTPUTS:
;	R0 - ERROR CODE FROM STATE TABLE
;
MATCH_ERROR:
	MOVL	2(R5),R0		; Pick up error code
.IF	DEFINED	$$DEBUG$$
	PUSHR	#^M<R0>			; Save register
	PUSHL	R0			; Store error value
	PUSHAL	OUT_ERROR		; Store pointer to FAO control string
	CALLS	#2,NPA$$DEBUG_OUT 	; Call debug output routine
	POPR	#^M<R0>			; Restore register
.ENDC
	BRB	DOTRAN			; Perform the transition

	.SBTTL	MATCH_ALL - PERFORM NULL STATE TRANSITION
	.SBTTL	DOTRAN - PERFORM THE STATE TRANSITION
	.SBTTL	UPDTRN - UPDATE COUNT AND POINTERS
;+
; **-UPDTRN-UPDATE COUNT AND POINTERS
;
;	UPDATE THE COUNT AND POINTER FOR THE CURRENT MATCHING TRANSITION
;	BEFORE PERFORMING THE TRANSITION.
;
; **-DOTRAN-PERFORM THE STATE TRANSITION
;
;	A SUCCESSFUL MATCH HAS OCCURRED ON A SUB-FIELD IN THE MESSAGE,
;	PERFORM THE SPECIFIED STATE TRANSITION.
;-
; INPUTS:
;	R2 - # OF CHARACTERS REMAINING TO BE SCANNED
;	R3 - POINTER TO MESSAGE REMAINING TO BE SCANNED
;	R5 - POINTER TO FLAG WORD IN CURRENT TRANSITION
;
MATCH_ALL:
.IF	DEFINED $$DEBUG$$
	PUSHAL	OUT_NULL		; Store string pointer
	PUSHL	#OUT_NULL_LEN		; Store string length
	CALLS	#2,NPA$$DEBUG_OUT2 	; Call debug output routine
.ENDC
UPDTRN:	SUBL2	NPA$L_FLDCNT(R10),R2 	; Reduce count of bytes remaining
	MOVL	R2,NPA$L_MSGCNT(R10) 	; ...
	ADDL2	NPA$L_FLDCNT(R10),R3 	; Update message pointer
	MOVL	R3,NPA$L_MSGPTR(R10) 	; ...
DOTRAN:	PUSHL	R5			; Save current state table address
	CVTWL	(R5)+,R6		; Get flags
	BITL	#NPA$M_EXT,R6		; Extension present ?
	BEQLU	10$			; If EQLU, no
	TSTL	(R5)+			; Skip extension field in entry
10$:	CLRL	NPA$L_PARAM(R10)	; Zero action routine parameter
	BITL	#NPA$M_PARAM,R6		; Action routine parameter present ?
	BEQLU	20$			; If EQLU, no
	MOVL	(R5)+,NPA$L_PARAM(R10) 	; Get action routine parameter
20$:	BITL	#NPA$M_ACTION,R6 	; Action routine address present ?
	BEQLU	40$			; If EQLU, no
	PUSHR	#^M<R0,R6>		; Save action flags and status
	MOVL	#1,R0			; Set default return status to success
	CALLG	(R10),@(R5)+		; Call action routine
	BLBS	R0,30$			; If LBS, then success
	POPR	#^M<R0,R6>		; Restore registers
	POPR	#^M<R5>			;  ...
	BRW	NXTRAN			; Reject the transition
30$:	POPR	#^M<R0,R6>		; Restore flags and status
40$:	TSTL	(SP)+			; Clean up stack
	BITL	#NPA$M_MASK,R6		; Mask present ?
	BEQLU	50$			; If EQLU, no
	MOVL	(R5)+,R7		; Get bit mask to be set
	MOVL	(R5)+,R8		;  and address
	BISL	R7,(R8)			; Set the mask bits
50$:	BITL	#NPA$M_STATE,R6		; Explicit transition present ?
	BEQLU	60$			; If EQLU, no
	MOVL	(R5)+,R5		; Get pointer to next state
	BNEQ	60$			; If EQL, then stop
	BRW	SUCCESS			; Successful parse
60$:	BRW	MSTAT			;

.IF 	DEFINED	$$DEBUG$$
	.SBTTL	NPARSE DEBUGGING DATA

	.SAVE
	.PSECT	NPA$DEBUG$PURE,NOEXE,NOWRT,BYTE

OUT_IMAGE:
	.ASCID	"Image !AC"
OUT_WORD:
	.ASCID	"Word  !XW"
OUT_BYTE:
	.ASCID	"Byte  !XB"
OUT_LOOK:
	.ASCID	"Look  !XB"
OUT_EXTZV:
	.ASCID	"Extzv !XL"
OUT_MATCH:
	.ASCID	"Match !XB"
OUT_MASK:
	.ASCID	"Mask  !XB"
OUT_ERROR:
	.ASCID	"Error !XL"
OUT_FAIL:
	.ASCID	"Failed !XL"
OUT_INIT:
	.ASCID	"Parsing message (Length = !UL bytes)"
OUT_LEFT:
	.ASCID	"Unparsed message length = !UL bytes"
OUT_EOM:
	.ASCII	"End of message"
OUT_EOM_LEN	= .-OUT_EOM
OUT_NULL:
	.ASCII	"Null"
OUT_NULL_LEN	= .-OUT_NULL

OUT_SBEXP:
	.ASCII	"Sbexp"
OUT_SBEXP_LEN	= .-OUT_SBEXP
OUT_SUCC:
	.ASCII	"Success"
OUT_SUCC_LEN	= .-OUT_SUCC

	.PSECT	NPA$DEBUG$IMP,NOEXE,WRT,BYTE
;
; FAO Output Buffer
;
FAODESC:
	.LONG	80
	.ADDRESS FAOBUF
FAOBUF:
	.BLKB	80
OUT_DSC:
FAOLEN:	.BLKW	1
	.WORD	0
	.ADDRESS 0

	.RESTORE

	.SBTTL	NPA$$DEBUG_OUT
	.SBTTL	NPA$$DEBUG_OUT2

;
; Entry point for argument/string output
;
	.ENTRY	NPA$$DEBUG_OUT,^M<>
	TSTL	NPA$GL_LOGMASK		; Flag set if logging enabled
	BEQL	10$			; Logging is disabled
	$FAO_S	CTRSTR=@4(AP),-		;
		OUTLEN=FAOLEN,-		;
		OUTBUF=FAODESC,-	;
		P1=8(AP)		;
	MOVAL	FAOBUF,OUT_DSC+4	;
	PUSHAL	OUT_DSC			;
	CALLS	#1,LIB$PUT_OUTPUT	; Print string
10$:	RET				;
;
; Entry point for string output
;
	.ENTRY	NPA$$DEBUG_OUT2,^M<>
	TSTL	NPA$GL_LOGMASK		; Flag set if logging disabled
	BEQL	10$			; Logging disabled
	MOVL	4(AP),OUT_DSC		;
	MOVL	8(AP),OUT_DSC+4		;
	PUSHAL	OUT_DSC			;
	CALLS	#1,LIB$PUT_OUTPUT	; Print the string
10$:	RET				;
.ENDC

	.END
