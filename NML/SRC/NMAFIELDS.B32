%TITLE	'	Field Support Routines'
MODULE NMAFIELDS (
		LANGUAGE (BLISS32),
		ADDRESSING_MODE (NONEXTERNAL=LONG_RELATIVE),
		ADDRESSING_MODE (EXTERNAL=LONG_RELATIVE),
		IDENT = 'V03-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	Network Management Layer (NMA)
!
! ABSTRACT:
!
!	These routines provide support for maintaining permanent
!	data bases in NML and other network management layer components.
!
! ENVIRONMENT:	VAX/VMS Operating System
!
! AUTHOR:	Darrell Duffy	, CREATION DATE: 15-October-1979
!
! MODIFIED BY:
!
!--

%SBTTL	'Definitions'

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    NMA$SEARCHFLD,
    NMA$INSERTFLD,
    NMA$DELETEFLD;

!
! INCLUDE FILES:
!

LIBRARY 'SHRLIB$:NMALIBRY.L32';
LIBRARY 'SYS$LIBRARY:STARLET.L32';

!
!	Fields for handling descriptors
!

    FIELD
	DSC_FLDS =
	    SET
	    DSC_SIZ = [0, 0, 16, 0],
	    DSC_ADR = [4, 0, 32, 0]
	    TES
	;

!
! EQUATED SYMBOLS:
!

!
! OWN STORAGE:
!

!
! EXTERNAL REFERENCES:
!

! EXTERNAL ROUTINE
!	;		!

%SBTTL	'NMA$SEARCHFLD	Find Field by Code'
GLOBAL ROUTINE NMA$SEARCHFLD (RTN_DSC, FIELD_CODE,
			FIELD_SIZE, FIELD_ADR) =	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	Return size and address of data portion of a field with a specified
!	code.
!
! FORMAL PARAMETERS:
!
!	RTN_DSC		Address of descriptor of data portion of record
!	FIELD_CODE	Value of word that is the code for the field
!	FIELD_SIZE	Address of size of field data to be returned.
!			Returned as a longword.
!	FIELD_ADR	Address of longword to hold address of data.
!			On input may point within the data record as
!			the start of the next field to compare.
!			After a call here,
!			FIELD_ADR = .FIELD_ADR + .FIELD_SIZE
!			sets up for the next call here to obtain next field.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NMA$_SUCCESS	Field found
!	NMA$_FLDNOTFND	Field with specified code not found or
!			no more fields in record.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	FIELD_CODE : WORD,
	RTN_DSC : REF BLOCK [8, 1]
    		FIELD (DSC_FLDS)
	;

    LOCAL
	PTR,				! Pointer into record
	END_REC,			! End of record data
	CODE : WORD,			! Code value
	SIZE				! Size of a field
	;		!

    PTR = ..FIELD_ADR;			! Obtain the address of the field

					! We add two to the descriptor address
					! To skip the two byte key at the
					! beginning of the record

    IF (.PTR LSSA (.RTN_DSC [DSC_ADR] + 2) ) ! If its a good address, use it
	OR				! and look on from there
	(.PTR GTRA	(.RTN_DSC [DSC_ADR] +
			.RTN_DSC [DSC_SIZ]
			)
	)
    THEN
	PTR = .RTN_DSC [DSC_ADR] + 2	! if its bad, use start of record
    ;

    END_REC =	.RTN_DSC [DSC_ADR] +	! compute end of the record
    		.RTN_DSC [DSC_SIZ] ;

    WHILE .PTR LSSA .END_REC		! Until there is no more data
    DO
	BEGIN
	CODE = . (.PTR) <0, 16, 0> ;	! Look at the field code
	SIZE = . (.PTR) <16, 16, 0> ;	! And the size of the field
	IF  (.CODE EQLU .FIELD_CODE)	! If the codes match, or
	THEN
	    BEGIN
	    .FIELD_ADR = .PTR + 4;	! Return position of data
	    .FIELD_SIZE = .SIZE;	! and size
	    RETURN NMA$_SUCCESS		! And a warm, fuzzy code
	    END
	ELSE
	    PTR = .PTR + .SIZE + 4	! Otherwise, keep looking
	END
    ;

    RETURN NMA$_FLDNOTFND		! A not so warm fuzzy code

    END;

%SBTTL	'NMA$INSERTFLD	Insert a Field Into a Record'
GLOBAL ROUTINE NMA$INSERTFLD (BUF_DSC, FIELD_CODE, FIELD_SIZE,
    			FIELD_ADR, RTN_DSC) =	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	Insert a field into a record.  All other fields by that code are
!	removed from the record first.
!
! FORMAL PARAMETERS:
!
!	BUF_DSC		Address of the extent of the buffer space
!	FIELD_CODE	Value of the word containing the code
!	FIELD_SIZE	Size of field to be inserted
!	FIELD_ADR	Address of field to be inserted
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NMA$_SUCCESS		A warm cuddly feeling
!	NMA$_SUCCFLDRPL		A warm feeling with a replaced field
!	NMA$_BUFTOOSMALL	Not enough space in the buffer, buffer is
!				not corrupted, and the field is not inserted.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	BUF_DSC : REF BLOCK [8, 1]
		FIELD (DSC_FLDS),
	RTN_DSC : REF BLOCK [8, 1]
		FIELD (DSC_FLDS)
	;

    LOCAL
	SUCCOD,				! Hold the success code for return
	END_FLD			! End of a field to replace
	;		!

!+
! Delete existing fields with specified code.
!-
    SUCCOD = NMA$DELETEFLD (.RTN_DSC, .FIELD_CODE);
!*	END_FLD = .RTN_DSC [DSC_ADR] +	! End of data in record
!*		.RTN_DSC [DSC_SIZ];
    END_FLD = .RTN_DSC [DSC_ADR];	! End of data in record
    END_FLD = .END_FLD + .RTN_DSC [DSC_SIZ];

    IF (.FIELD_SIZE + 4)		! Do we have enough room
    	GTRU
    	(.BUF_DSC [DSC_SIZ] - .RTN_DSC [DSC_SIZ])
    THEN
	RETURN NMA$_BUFTOOSMALL		! Nope, return error
    ;

    (.END_FLD) <0, 16, 0> = .FIELD_CODE; ! Store control data
    (.END_FLD) <16, 16, 0> = .FIELD_SIZE;
    END_FLD = .END_FLD + 4;

    RTN_DSC [DSC_SIZ] = 		 ! Adjust descriptor for size
    CH$MOVE (.FIELD_SIZE, .FIELD_ADR, .END_FLD) ! and copy the data itself
	- .RTN_DSC [DSC_ADR];

    RETURN .SUCCOD			! Return the code

    END;

%SBTTL	'NMA$DELETEFLD	Delete a Field From a Record'
GLOBAL ROUTINE NMA$DELETEFLD (RTN_DSC, FIELD_CODE) =	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	Delete a field from a record.  All other fields by that code are
!	deleted as well.
!
! FORMAL PARAMETERS:
!
!	RTN_DSC		Address of descriptor of data portion of record.
!	FIELD_CODE	Value of the word containing the code
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NMA$_SUCCESS		A warm cuddly feeling
!	NMA$_SUCCFLDRPL		A warm feeling with a replaced field
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	RTN_DSC : REF BLOCK [8, 1]
		FIELD (DSC_FLDS)
	;

    LOCAL
	SUCCOD,				! Hold the success code for return
	END_FLD,			! End of a field to replace
	ADR,				! Address of field to replace
	SIZE,				! Size of replaced field
	END_BUF				! End of buffer address
	;		!


    ADR = 0;				! Start at beginning of buffer
    SUCCOD = NMA$_SUCCESS;		! Assume success with no replace

    WHILE				! Find all the fields to replace
	NMA$SEARCHFLD (.RTN_DSC, .FIELD_CODE, SIZE, ADR)
    DO
	BEGIN
	END_FLD = .ADR + .SIZE;		! End of replaced field
	ADR = .ADR - 4;			! Address of control and data portion
	SIZE = .SIZE + 4;		! Total size including control
	END_BUF = .RTN_DSC [DSC_ADR]	! End of data record
		+ .RTN_DSC [DSC_SIZ];
	CH$MOVE (.END_BUF - .END_FLD,	! Copy data over field
		.END_FLD, .ADR
		);
	RTN_DSC [DSC_SIZ] =		! Adjust size of record
		.RTN_DSC [DSC_SIZ] - .SIZE;
	SUCCOD = NMA$_SUCCFLDRPL	! Set the success code
	END
    ;

    RETURN .SUCCOD			! Return the code

    END;

END				!End of module
ELUDOM
