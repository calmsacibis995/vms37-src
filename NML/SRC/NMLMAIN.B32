%TITLE 'Network Management Listener main module'
MODULE NML$MAIN (MAIN = NML$MAIN,
		ADDRESSING_MODE (NONEXTERNAL=GENERAL),
		ADDRESSING_MODE (EXTERNAL=GENERAL),
		IDENT = 'V03-000') =

BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
 
!++
! FACILITY:  DECnet-VAX V2.0 Network Management Listener
!
! ABSTRACT:
!
!	This is the main module for NML.
!
! ENVIRONMENT:  VAX/VMS Operating System
!
! AUTHOR:  Distributed Systems Software Engineering
!
! CREATION DATE:  1-OCT-1979
!
! MODIFIED BY:
!
!	V005	MKP0001		Kathy Perko	17-Dec-1981
!		Bypass version number checking for autoservice functions.
!
!	V004	TMH0004		Tim Halvorsen	12-Oct-1981
!		Store NICE version number of NCP we are communicating
!		with, so that some level of V2.0 compatibility can be done.
!		Mark Phase II (missing version number) as V1.3.0 to
!		NML$INITIALIZE routine.
!
!	V003	MKP0003		Kathy Perko	03-Sep-1981
!		Temporarily tell 2.0 NCP's that NML is 2.0 also.
!
!	V002	TMH0002		Tim Halvorsen	31-Aug-1981
!		Allow communication with 2.0.0 NCPs.
!
!	V001	TMH0001		Tim Halvorsen	20-Jul-1981
!		Use sharable image callable interface.
!		Make program exit quietly when the link to NCP is aborted.
!		Remove network initialization code, since NCP no longer
!		initiates NML as a detached process during startup.
!--
 

%SBTTL 'Declarations'

!
! TABLE OF CONTENTS:
!
 
FORWARD ROUTINE
    NML$MAIN		: NOVALUE,
    NML_COMMANDS	: NOVALUE,
    NML_INITIALIZE,
    NML_CONNECT,
    NML_VALIDLINK,
    NML_GETMODE		: NOVALUE,
    NML_RECEIVE,			! Receive NICE message over link
    NML_RESPONSE:	NOVALUE;	! Send message response over link
 
!
! INCLUDE FILES:
!
 
LIBRARY 'LIB$:NMLLIB';			! Facility-wide definitions
LIBRARY 'SHRLIB$:NMALIBRY';		! NICE definitions
LIBRARY 'SHRLIB$:NET';			! NETACP QIO interface
LIBRARY 'SYS$LIBRARY:STARLET';		! VMS common definitions
 
!
! NML mode symbols (set in NML$B_MODE)
!

LITERAL
    NML$_INIT	 = 0,	! Initializing
    NML$_CONNECT = 1,	! Started via connect
    NML$_AUTO	 = 2;	! Started by NETACP for autoservice function

!
! OWN STORAGE:
!
 
BIND
    NML_VERSION = UPLIT BYTE(
			NML$K_VERSION,
			NML$K_DEC_ECO,
			NML$K_USER_ECO);

OWN
    NML$B_MODE	     : BYTE
		       INITIAL (NML$_INIT), ! NML mode of operation
    NML$B_NCP_VERSION: VECTOR [3,BYTE],	! Command node NICE version number
    NML$L_CMDNCBLEN,			! Length of NCB data
    NML$W_ACP_CHAN: WORD,		! Channel to network ACP
    NML$W_CMDMBXCHAN : WORD,		! Channel for mailbox
    NML$W_CMD_CHAN: WORD,		! Channel to logical link to NCP
    NML$A_NCBADDRESS,			! Address of NCB
    NML$A_NCBDATA,			! Address of optional NCB data field
    NML$Q_SRVIDDSC: BLOCK [8,BYTE],	! Descriptor of autoservice NCB
    NML$AB_RCVBUFFER: VECTOR [nml$k_rcvbflen, BYTE];	! Message buffer
 
!
! EXTERNAL REFERENCES:
!
 
EXTERNAL ROUTINE
    NML$INITIALIZE:	NOVALUE,	! Initialize NICE processor
    NML$PROCESS_NICE:	NOVALUE,	! Process a single NICE message
    NML$TERMINATE:	NOVALUE,	! Terminate NICE processor
    NML$AUTO_SERVICE:	NOVALUE,	! Auto-service MOP mode
    LIB$ASN_WTH_MBX;			! Assign channel with mailbox

%SBTTL 'NML$MAIN  Main routine'
ROUTINE NML$MAIN : NOVALUE =
 
!++
! FUNCTIONAL DESCRIPTION:
!
!	This is the main routine for the DECnet-VAX Network Management
!	Listener (NML).
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns NML$_STS_SUC.
!
! SIDE EFFECTS:
!
!	NONE
!
!--
 
    BEGIN

!
! Determine how we were initiated.
!
    IF NML_INITIALIZE ()
    THEN
	BEGIN
!
! Dispatch to routine to handle the operating mode.
! 
	IF .NML$B_MODE EQLU NML$_AUTO
	THEN
	    BEGIN
	    NML$INITIALIZE(); ! Initialize NICE message processor
	    NML$AUTO_SERVICE(nml$q_srviddsc)	! Autoservice mode
	    END
	ELSE
	    BEGIN
	    NML$INITIALIZE(nml$b_ncp_version); ! Initialize NICE message processor
	    NML_COMMANDS ();		! NICE command mode
	    END;
	NML$TERMINATE();		! Terminate NICE processor
	END;

    $EXIT (CODE = TRUE);

    END;			! End of NML

%SBTTL 'NML_COMMANDS  Main command processing routine'
ROUTINE NML_COMMANDS: NOVALUE =
 
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine is the main command processing routine.  NICE messages
!	are parsed to determine the requested function and then the proper
!	routine is called to perform the function.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
!--
 
BEGIN

LOCAL
    desc:	VECTOR [2],		! Message descriptor
    status;				! Temporary status

!
! Receive NICE messages and perform valid functions as long as the link
! is active.
!

WHILE TRUE
DO
    BEGIN
    desc [1] = nml$ab_rcvbuffer;
    status = nml_receive (.desc [1],
			      nml$k_rcvbflen,
			      desc [0]);
    IF .status
    THEN
	nml$process_nice(desc, nml_response)

!
! If the message received was too large for the buffer then send a status
! message indicating the error.  Any other errors indicate that the link
! has been broken and NML should exit.
!

    ELSE
	BEGIN
	IF .STATUS EQLU SS$_LINKABORT	! If normal exit (via link DASSGN
	    OR .STATUS EQLU SS$_LINKDISCON	! or formal disconnect)
	THEN
	    RETURN;			! then exit successfully

	IF .STATUS EQLU SS$_DATAOVERUN	! If message was too large,
	THEN
	    NML_RESPONSE(UPLIT(1, UPLIT BYTE(NMA$C_STS_SIZ))) ! Send size error
	ELSE
	    SIGNAL_STOP (.STATUS);	! Signal fatal error
	END;

    END;

END;

%SBTTL 'NML_INITIALIZE	Initialization routine'
ROUTINE NML_INITIALIZE =
 
!++
! FUNCTIONAL DESCRIPTION:
!
!	This is the initialization routine for the DECnet-VAX Network
!	Management Listener.  This module establishes (accepts) the logical
!	link connection and initializes the data bases.
!
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	System service error is returned if initial assign for command link
!	fails.  Subsequent system service failures cause a resource error
!	(NML$_STS_RES) to be returned.  If the connect data is invalid or
!	incompatible a compatibility error (NML$_STS_MVE) is returned.
!	If the connect accept fails a network error code is returned.
!
! SIDE EFFECTS:
!
!	NONE
!
!--
 
    BEGIN
 
    LOCAL
	INI_IOSB : $IOSB,		! Connect/reject I/O status block
	NCB_DSC  : DESCRIPTOR,		! Connect NCB descriptor
	STATUS;				! Temporary status
!
! Establish channel to NETACP for QIO control functions.
!
    STATUS = LIB$ASN_WTH_MBX (%ASCID '_NET:',
			      %REF (NML$K_RCVBFLEN),
			      %REF (NML$K_RCVBFLEN),
			      NML$W_ACP_CHAN,
			      NML$W_CMDMBXCHAN);
    IF NOT .STATUS
    THEN
	SIGNAL_STOP (.STATUS);		! Signal fatal error
!
! Determine the mode in which NML is running.
!
    NML_GETMODE ();
!
! Dispatch to proper initialization routine.
!
    SELECTU .NML$B_MODE OF
	SET
	[NML$_CONNECT]:

	    STATUS = NML_CONNECT ();

	[NML$_AUTO]:

	    STATUS = NML$_STS_SUC;

	[OTHERWISE]:

	    STATUS = NML$_STS_MPR;

	TES;

    RETURN .STATUS			! Return status code
 
    END;				! End of NML_INITIALIZE
 

%SBTTL 'NML_CONNECT  Connect routine'
ROUTINE NML_CONNECT =
 
!++
! FUNCTIONAL DESCRIPTION:
!
!	This establishes (accepts) the logical link connection to the
!	command process.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	System service error is returned if initial assign for command link
!	fails.  Subsequent system service failures cause a resource error
!	(NML$_STS_RES) to be returned.  If the connect data is invalid or
!	incompatible a compatibility error (NML$_STS_MVE) is returned.
!	If the connect accept fails a network error code is returned.
!
! SIDE EFFECTS:
!
!	NONE
!
!--
 
    BEGIN
 
    LOCAL
	INI_IOSB : $IOSB,		! Connect/reject I/O status block
	NCBDSC   : DESCRIPTOR,
	STATUS;				! Temporary status
!
! Assign channel for link to command process
!
    STATUS = $ASSIGN (DEVNAM = %ASCID '_NET:',
		      CHAN   = NML$W_CMD_CHAN);
    IF .STATUS
    THEN
	BEGIN
!
! Check optional connect data for compatibility
!
	STATUS = NML_VALIDLINK ();
 
	IF .STATUS
	THEN
	    BEGIN
!
! Set up NCB to accept the connection.  Add three bytes of version number
! to the NCB that was received.  Also use the length of the received NCB.
!
	    CH$WCHAR_A (3, NML$A_NCBDATA);
!***********************************************************************
! Temporary fix to allow NML to talk to 2.0.0 NCPs.  Remove when
! VMS 2.5 goes with patch to NCP to allow it to talk to newer NMLs.
!***********************************************************************
	    IF CH$EQL (3, UPLIT BYTE (2,0,0),
			3, .NML$A_NCBDATA)
	    THEN
		CH$MOVE (3, UPLIT BYTE (2,0,0), .NML$A_NCBDATA)
	    ELSE
!*************** End fix. *******************************************
		CH$MOVE (3, NML_VERSION, .NML$A_NCBDATA);
	    NCBDSC [DSC$W_LENGTH] = .NML$L_CMDNCBLEN;
	    NCBDSC [DSC$A_POINTER] = .NML$A_NCBADDRESS;
!
! Accept connection to command process.
!
	    STATUS = $QIOW (CHAN = .NML$W_CMD_CHAN,
			    FUNC = IO$_ACCESS,
			    IOSB = INI_IOSB,
			    P2   = NCBDSC);
	    IF .STATUS
	    THEN
		STATUS = .INI_IOSB [IOS$W_STATUS]; ! Network error

	    END
	ELSE
	    BEGIN
!
! Reject connection due to incompatibility.  Add one byte reject code
! to the received NCB.
!
	    CH$WCHAR_A (1, NML$A_NCBDATA);
	    CH$WCHAR (.STATUS / 2, .NML$A_NCBDATA);
	    NCBDSC [DSC$W_LENGTH] = .NML$L_CMDNCBLEN;
 
	    $QIOW (CHAN = .NML$W_CMD_CHAN,	    ! Channel
		   FUNC = IO$_ACCESS OR IO$M_ABORT, ! Reject function code
		   P2   = NCBDSC);		    ! Reject NCB

	    END;
	END;
!
! Undeclare object number if we were run.  This is a no-op if
! we were not run.
!
    $CANCEL (CHAN = .NML$W_ACP_CHAN);	! Undeclare object
 
    RETURN .STATUS			! Return status code
 
    END;				! End of NML_CONNECT
 

%SBTTL 'NML_VALIDLINK  Version compatibilty check routine'
ROUTINE NML_VALIDLINK =
 
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine examines the optional connect data in the NCB to see
!	if the command process has a compatible ECO number.
!
! IMPLICIT OUTPUTS:
!
!	NML$AB_RCVBUFFER contains the received NCB.
!	NML$L_CMDNCBLEN contains the length of the received NCB.
!	NML$A_NCBDATA contains the pointer to the optional NCB connect data
!		in NML$AB_RCVBUFFER.
!	NML$B_NCP_VERSION contains a NICE version number.  V2.0.0,
!		V3.0.0 or V1.3.0 (Phase II) are the only acceptable values.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	If receive Network Management version number is not greater
!	than or equal to our own then NML$_STS_MVE is returned otherwise
!	success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	NONE
!
!--
 
    BEGIN
 
    LOCAL
	STATUS;				! Temporary status
 
!
! Find optional data in NCB (two bytes past '/' character)
!
	NML$A_NCBDATA =
		CH$FIND_CH (.NML$L_CMDNCBLEN,
			    .NML$A_NCBADDRESS,
			    %C'/');
 
	IF NOT CH$FAIL (.NML$A_NCBDATA)
	THEN
	    NML$A_NCBDATA = .NML$A_NCBDATA + 3 ! Skip '/' and two bytes
	ELSE
	    RETURN NML$_STS_MPR;	! Return error
!
! Compare received version with our own.  Value greater than or equal
! is successful (Phase III).  No optional data is successful (Phase II).
! Less than three bytes of optional data or value less than our own
! fails.
!
	    IF CH$RCHAR (.NML$A_NCBDATA) EQLU 3
	    THEN
		IF CH$LEQ (3, NML_VERSION,		! Allow newer NCP's
			   3, .NML$A_NCBDATA + 1)
		    OR CH$EQL(3, UPLIT BYTE(2,0,0),	! Allow 2.0 NCP's
			      3, .NML$A_NCBDATA + 1)
		THEN
		    BEGIN
		    CH$MOVE(3, .NML$A_NCBDATA+1,	! Save NICE version #
				NML$B_NCP_VERSION);
		    RETURN NML$_STS_SUC		! Return success code
		    END
		ELSE
		    RETURN NML$_STS_MVE
	    ELSE				! If no version # present,
		IF CH$RCHAR (.NML$A_NCBDATA) EQLU 0
		THEN
		    BEGIN
		    CH$MOVE(3, UPLIT BYTE(1,3,0), ! Mark Phase II, NICE V1.3.0
				NML$B_NCP_VERSION);
		    RETURN NML$_STS_SUC		! Return success code
		    END
		ELSE
		    RETURN NML$_STS_MVE;	! Return error
 
    END;				! End of NML_VALIDLINK

%SBTTL 'NML_GETMODE  Determine the mode in NML is running'
ROUTINE NML_GETMODE : NOVALUE =
 
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine determines the mode in which NML is running by
!	determining how the image was activated.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NML$B_MODE contains the mode in which NML is running.
!		(it may be unchanged if we cannot determine the mode)
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--
 
    BEGIN
 
    LOCAL
	BUFDESC: VECTOR [2],		! Descriptor of above buffer
	STATUS;				! Temporary status
 
!
! Get optional connect data or service circuit name by translating SYS$NET
!
    bufdesc [0] = nml$k_rcvbflen;	! Setup result buffer descriptor
    bufdesc [1] = nml$ab_rcvbuffer;

    STATUS = $TRNLOG (LOGNAM = %ASCID 'SYS$NET',
		      RSLLEN = NML$L_CMDNCBLEN,
		      RSLBUF = BUFDESC);
    IF .STATUS EQLU SS$_NORMAL
    THEN
	BEGIN
!
! Since SYS$NET translates, NML was activated by a connect or for autoservice.
! Now determine if it was a connect by examining the translation to see
! if it contains a node name.  If not, it is autoservice.
!
	IF NOT CH$FAIL (CH$FIND_SUB (.NML$L_CMDNCBLEN,
				     NML$AB_RCVBUFFER,
				     2,
				     UPLIT('::')))
	THEN
	    BEGIN
!
! NML was activated by a connect.
!
	    NML$B_MODE = NML$_CONNECT;
	    NML$A_NCBADDRESS = NML$AB_RCVBUFFER; ! Initialize NCB pointer

	    END
	ELSE
	    BEGIN
!
! NML was activated by NETACP for an autoservice operation.
!
	    NML$B_MODE = NML$_AUTO;
	    NML$Q_SRVIDDSC [DSC$W_LENGTH] = .NML$L_CMDNCBLEN;
	    NML$Q_SRVIDDSC [DSC$A_POINTER] = NML$AB_RCVBUFFER;

	    END;
	END;

    END;				! End of NML_GETMODE

%SBTTL 'NML_RECEIVE  Network receive routine'
ROUTINE NML_RECEIVE (BUFADR, BUFLEN, RCVLEN) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine receives NICE protocol messages over a logical link
!	from a command process (generally NCP).
!
! FORMAL PARAMETERS:
!
!	BUFADR 		Address of the receive buffer.
!	BUFLEN		Length of the receive buffer.
!	RCVLEN		Actual length of the received data if successful.
!
! IMPLICIT INPUTS:
!
!	NML$W_CMD_CHAN	Channel assigned to the command process link.
!
! IMPLICIT OUTPUTS:
!
!	The buffer pointed to by BUFADR contains the received data.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	System service completion status is returned if receive fails
!	indicating that the link has been terminated for some reason.
!	Otherwise success is returned.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	RCV_IOSB : $IOSB,			! Receive I/O status block
	STATUS;					! Temporary status
!
! Receive a NICE message
!
    STATUS = $QIOW (FUNC = IO$_READVBLK,	! Function
		    CHAN = .NML$W_CMD_CHAN,	! Channel
		    IOSB = RCV_IOSB,		! I/O status block
		    P1   = .BUFADR,		! Buffer address
		    P2   = .BUFLEN);		! Buffer length
!
! If system service completed successfully get network status
!
    IF .STATUS
    THEN
	STATUS = .RCV_IOSB [IOS$W_STATUS];
!
! If network status is success then get received message length
!
    IF .STATUS
    THEN
	.RCVLEN = .RCV_IOSB [IOS$W_COUNT];	! Return received data length

    RETURN .STATUS				! Return status code

    END;					! End of NML$RECEIVE


%SBTTL 'NML_RESPONSE Network response routine'
ROUTINE NML_RESPONSE (BUFDESC): NOVALUE =

!++
!
!	This routine is called to process a NICE response as a result
!	of processing a NICE message.  This routine may be called as
!	many times as necessary during the processing of a single NICE
!	message.
!
! Inputs:
!
!	bufdesc		Address of descriptor of message to be transmitted.
!
!	nml$w_cmd_chan	Channel assigned to the command process link.
!
! Outputs:
!
!	Returns success.  Errors are signalled.
!--

BEGIN

MAP
    bufdesc:	REF BLOCK [,BYTE];	! Address of descriptor

LOCAL
    snd_iosb : $IOSB,			! Send I/O status block
    status;				! Temporary status

!
! Send the NICE response message
!

status = $QIOW (FUNC = IO$_WRITEVBLK,
		    CHAN = .nml$w_cmd_chan,
		    IOSB = snd_iosb,
		    P1   = .bufdesc [dsc$a_pointer],
		    P2   = .bufdesc [dsc$w_length]);
!
! If system service was successful then get network status
!

IF .STATUS
THEN
    STATUS = .SND_IOSB [IOS$W_STATUS];

!
! If status is bad then signal the error.
!

IF NOT .STATUS
THEN
    SIGNAL_STOP (.STATUS);

END;

END					! End of module
ELUDOM
