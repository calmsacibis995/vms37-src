%TITLE 'NML Utility routines'
MODULE NML$UTILITY (
		LANGUAGE (BLISS32),
		ADDRESSING_MODE (NONEXTERNAL=LONG_RELATIVE),
		ADDRESSING_MODE (EXTERNAL=LONG_RELATIVE),
		IDENT = 'V03-000'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  DECnet-VAX V2.0 Network Management Listener
!
! ABSTRACT:
!
!	This module contains routines for handling a variety of common
!	functions.
!
! ENVIRONMENT:  VAX/VMS Operating System
!
! AUTHOR:  Distributed Systems Software Engineering
!
! CREATION DATE:  23-JAN-1980
!
! MODIFIED BY:
!
!	V03-001	LMK0001		Len Kawell		21-Jul-1981
!		Modifications for new NETACP control QIO.
!--


%SBTTL	'Declarations'

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    NML$BLDP2		: NOVALUE,
    NML$CHKEXENAM,
    NML$CHKEXEADR,
    NML$GETEXEADR,
    NML$GETVOLEXADR,
    NML$GETEXENAM,
    NML$GETNODNAM,
    NML$GETVOLNDNAM,
    NML$GETNODADR,
    NML$GETVOLNDADR,
    NML$GETEXEID,
    NML$GETINFTABS;

!
! INCLUDE FILES:
!

LIBRARY 'LIB$:NMLLIB.L32';
LIBRARY 'SHRLIB$:NMALIBRY.L32';
LIBRARY 'SHRLIB$:NET.L32';
LIBRARY 'SYS$LIBRARY:STARLET.L32';

!
! OWN STORAGE:
!

!
! Parameter buffers and descriptors for use in handling volatile data base
! data.
!
OWN
    P2BUFFER   : VECTOR [NML$K_P2BUFLEN,  BYTE],
    PRMBUFFER : VECTOR [256, BYTE];

BIND
    P2BFDSC   = UPLIT (NML$K_P2BUFLEN, P2BUFFER) : DESCRIPTOR,
    PRMDSC = UPLIT (256, PRMBUFFER) : DESCRIPTOR;

OWN
    MSGLENGTH;

!
! EXTERNAL REFERENCES:
!

$NML_EXTDEF;

EXTERNAL LITERAL
	NML$_QIOBFOVF;

EXTERNAL ROUTINE
    NML$BLD_REPLY,
    NMA$CLOSEFILE,
    NMA$OPENFILE,
    NMA$SEARCHFLD,
    NML$ERROR_1,
    NML$MATCHRECORD,
    NML$NETQIO;


%SBTTL 'NML$BLDP2  Build P2 buffer and descriptor'
GLOBAL ROUTINE NML$BLDP2 (LEN1, ADR1, LEN2, ADR2, P2DSC, RESDSC) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine builds the P2 buffer and descriptor for show operations.
!	The search key is added followed by the start key.
!
! FORMAL PARAMETERS:
!
!	LEN1		Search key length.  If zero then ADR1 contains the
!			longword start key.  If -1 then search key is a
!			wildcard.
!	ADR1		Search key address.  If LEN1 is zero then this is the
!			longword value of the search key.  If LEN1 is -1 then
!			the search key is omitted.
!	LEN2		Start key length.  If zero then ADR2 contains the
!			longword start key.  If -1 then start key ID is
!			NFB$C_COLLATE, and the start key value put into the
!			P2 buffer is a string of nulls.  NETACP will write
!			a start value into this string of nulls.  This allows
!			NML to reissue a QIO request and have NETACP pick up
!			at the next entry in its database, rather than starting
!			at the beginning again.
!	ADR2		Start key address. Same rules apply as for ADR1.
!	P2DSC		Address of P2 descriptor.  This routine assumes that
!			the buffer is largest enough to handle the result.
!			The maximum P2 buffer required by NML is 36 bytes.
!	RESDSC		Address of descriptor to hold resulting P2.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	The buffer described by P2DSC contains the search key and
!	start key information.
!
!--

BEGIN

MAP
	P2DSC  : REF DESCRIPTOR,
	RESDSC : REF DESCRIPTOR;

OWN
	COLLATE_START_VALUE: VECTOR [NFB$C_P2STRTLNG, BYTE]
			INITIAL ( REP NFB$C_P2STRTLNG OF BYTE (0));

LOCAL
	MSGSIZE,
	COUNT,				! P2 buffer length
	PTR;				! P2 buffer pointer

!
! Calculate the length of the resulting P2 buffer, and signal if
! the buffer supplied isn't big enough.
!
COUNT = 4;			! Account for count at beginning of buffer.
IF .LEN1 NEQ -1 THEN
	BEGIN
	IF .LEN1 NEQ 0 THEN
		COUNT = .COUNT + .LEN1 + 2	! It's a string.
	ELSE
		COUNT = .COUNT + 4;		! It's a longword.
	END;
IF .LEN2 NEQ -1 THEN
	BEGIN
	IF .LEN2 NEQ 0 THEN
		COUNT = .COUNT + .LEN2 + 2	! It's a string.
	ELSE
		COUNT = .COUNT + 4;		! It's a longword.
	END
ELSE
	COUNT = .COUNT + NFB$C_P2STRTLNG;
IF .COUNT GTR .P2DSC [DSC$W_LENGTH] THEN
	!
	! The P2 buffer will overflow.  Signal an NML error.
	!
	BEGIN
	NML$AB_MSGBLOCK [MSB$L_FLAGS] = MSB$M_MSG_FLD; ! Set message text flag.
	NML$AB_MSGBLOCK [MSB$B_CODE] = NMA$C_STS_MPR;
	NML$AB_MSGBLOCK [MSB$L_TEXT] = NML$_QIOBFOVF;
	NML$BLD_REPLY (NML$AB_MSGBLOCK, MSGSIZE);	! Build message
	$SIGNAL_MSG (NML$AB_SNDBUFFER, .MSGSIZE);	! Signal it.
	END;

PTR = .P2DSC [DSC$A_POINTER] + 4;	! Skip over return count

!
! Add search key to buffer.
!
IF .LEN1 NEQ -1
THEN
	BEGIN
	IF .LEN1 GTRU 0
	THEN
	    BEGIN
	    CH$WCHAR_A (.LEN1<0,8>, PTR);
	    CH$WCHAR_A (.LEN1<8,8>, PTR);
	    PTR = CH$MOVE (.LEN1, .ADR1, .PTR);
	    END
	ELSE
	    PTR = CH$MOVE (4, ADR1, .PTR);
	END;
!
! Add start key to buffer.
!
IF .LEN2 NEQ -1
THEN
	BEGIN
	IF .LEN2 GTRU 0
	THEN
	    BEGIN
	    CH$WCHAR_A (.(LEN2)<0,8>, PTR);
	    CH$WCHAR_A (.(LEN2)<8,8>, PTR);
	    PTR = CH$MOVE (.LEN2, .ADR2, .PTR);
	    END
	ELSE
	    PTR = CH$MOVE (4, ADR2, .PTR);
	END
ELSE
	!
	! Set up a start key value of a string of nulls.  NETACP will
	! replace the null string with a start key value of the last
	! entry matched by the search key.  This allows NML to reissue
	! the QIO so that NETACP will start searching where it left
	! off from the previous QIO.  Used to plurla entity operations
	! (KNOWN, ACTIVE).
	!
	PTR = CH$MOVE ( NFB$C_P2STRTLNG, COLLATE_START_VALUE, .PTR);
!
! Set up resulting descriptor for return.
!
RESDSC [DSC$W_LENGTH] = .PTR - .P2DSC [DSC$A_POINTER];
RESDSC [DSC$A_POINTER] = .P2DSC [DSC$A_POINTER];

END;				! End of NML$BLDP2

%SBTTL 'NML$CHKEXENAM  Check node name against executor'
GLOBAL ROUTINE NML$CHKEXENAM (NAMLEN, NAMADR) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine compares the specified node name with the executor node
!	name to see if they match.
!
! FORMAL PARAMETERS:
!
!	NAMLEN		Length of node name string.
!	NAMADR		Address of node name string.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	EXENAMBUF : VECTOR [6, BYTE],
	EXENAMDSC : DESCRIPTOR,
	EXENAMLEN,
	STATUS;

	EXENAMDSC [DSC$W_LENGTH] = 6;
	EXENAMDSC [DSC$A_POINTER] = EXENAMBUF;
!
! Open the node permanent data base file because this may be a permanent
! data base operation.
!
	NMA$OPENFILE (NMA$C_OPN_NODE, NMA$C_OPN_AC_RO);
	STATUS = NML$_STS_CMP;

	IF NML$GETEXENAM (EXENAMDSC, EXENAMLEN)
	THEN
	    IF CH$EQL (.NAMLEN, .NAMADR, .EXENAMLEN, EXENAMBUF)
	    THEN
		STATUS = NML$_STS_SUC;

	NMA$CLOSEFILE (NMA$C_OPN_ALL);	! Close all files

    RETURN .STATUS

    END;				! End of NML$CHKEXENAM

%SBTTL 'NML$CHKEXEADR  Check node address against executor'
GLOBAL ROUTINE NML$CHKEXEADR (NODADR) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine compares the specified node address with the executor node
!	address to see if they match.
!
! FORMAL PARAMETERS:
!
!	NODADR		Node address (word).
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	NODADR : WORD;

    LOCAL
	EXEADR : WORD,
	STATUS;

    NMA$OPENFILE (NMA$C_OPN_NODE, NMA$C_OPN_AC_RO);
    STATUS = NML$_STS_CMP;

    IF NML$GETEXEADR (EXEADR)
    THEN
	IF .EXEADR EQL .NODADR
	THEN
	    STATUS = NML$_STS_SUC;

	NMA$CLOSEFILE (NMA$C_OPN_ALL);	! Close all files

    RETURN .STATUS

    END;				! End of NML$CHKEXEADR


%SBTTL 'NML$GETEXEADR  Get executor node address'
GLOBAL ROUTINE NML$GETEXEADR (ADDR) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine returns the executor node address.
!
! FORMAL PARAMETERS:
!
!	ADDR		Address of word to contain node address.
!
! IMPLICIT INPUTS:
!
!	NML$GB_OPTIONS contains the command message options.
!
!	If this is a permanent data base operation then it is assumed
!	that the node file is already open.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	If the executor node address is found then success (NML$_STS_SUC) is
!	returned.  If the node address is not found, then a zero address is
!	returned along with failure (NML$_STS_PTY).
!
! SIDE EFFECTS:
!
!	Destroys contents of PRMBUFFER.
!
!--

    BEGIN

    MAP
	NML$GB_OPTIONS : BBLOCK [1];

    LOCAL
	ADDRPTR,
	ADDRSIZE,
	KEY : WORD,
	RECDSC : DESCRIPTOR;

    IF .NML$GB_OPTIONS [NMA$V_OPT_PER]
    THEN
	BEGIN
	RECDSC [DSC$A_POINTER] = .PRMDSC [DSC$A_POINTER];
	KEY = 0;
	IF NML$MATCHRECORD (NMA$C_OPN_NODE,
			PRMDSC,
			KEY,
			NML$C_KEY_EXE,
			0,
			0,
			RECDSC)
	THEN
	    BEGIN
	    ADDRPTR = 0;
	    IF NMA$SEARCHFLD (	RECDSC,
				NMA$C_PCNO_ADD,
				ADDRSIZE,
				ADDRPTR)
	    THEN
		BEGIN
		CH$MOVE (2, CH$PTR (.ADDRPTR), CH$PTR (.ADDR));
		RETURN NML$_STS_SUC
		END;
	    END
	END
    ELSE
	BEGIN

	RETURN NML$GETVOLEXADR (.ADDR)

	END;

!
! No node address found.
!
    (.ADDR)<0,16> = 0;

    RETURN NML$_STS_PTY

    END;				! End of NML$GETEXEADR

%SBTTL 'NML$GETVOLEXADR  Get volatile executor node address'
GLOBAL ROUTINE NML$GETVOLEXADR (ADDR) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine returns the executor node address from the volatile
!	data base.
!
! FORMAL PARAMETERS:
!
!	ADDR		Address of word to contain node address.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	If the executor node address is found then success (NML$_STS_SUC) is
!	returned.  If the node address is not found, then a zero address is
!	returned along with failure (NML$_STS_PTY).
!
! SIDE EFFECTS:
!
!	Destroys contents of PRMBUFFER.
!
!--

BEGIN

$NFBDSC(NFBDSC, SHOW, , LNI, NFB$C_WILDCARD, , ADD);

LOCAL
	P2DSC:	DESCRIPTOR,	! Descriptor for QIO P2 (Key) buffer.
	ADDRSIZE;

!
! Set up search and start key buffer to get any entry in the data
! base.  The executor node database only has one entry.  Then issue
! the QIO to get the node address.
!
NML$BLDP2 ( -1, 0, -1, 0, P2BFDSC, P2DSC);
IF NML$NETQIO (	NFBDSC,
		P2DSC,
		ADDRSIZE,
		PRMDSC)
THEN
	BEGIN
	CH$MOVE (2, .PRMDSC [DSC$A_POINTER], .ADDR);
	RETURN NML$_STS_SUC
	END;

!
! No node address found.
!
(.ADDR)<0,16> = 0;

RETURN NML$_STS_PTY

END;				! End of NML$GETEXEADR

%SBTTL 'NML$GETEXENAM  Get executor node name'
GLOBAL ROUTINE NML$GETEXENAM (BUFDSC, RESLEN) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine returns the executor node name.
!
! FORMAL PARAMETERS:
!
!	BUFDSC		Address of descriptor of buffer to contain ASCII
!			node name.
!	RESLEN		Resulting length of node name string.
!
! IMPLICIT INPUTS:
!
!	If this is a permanent data base operation then it is assumed
!	that the node file is already open.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	If the executor node name is found then success (NML$_STS_SUC) is
!	returned.  If the node name is not found a zero length counted string
!	is returned along with failure (NML$_STS_PTY).
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	BUFDSC : REF DESCRIPTOR,
	NML$GB_OPTIONS : BBLOCK [1];

    LOCAL
	FLDADR,
	KEY : WORD,
	RECDSC : DESCRIPTOR;

    IF .NML$GB_OPTIONS [NMA$V_OPT_PER]
    THEN
	BEGIN

	KEY = 0;
	IF NML$MATCHRECORD (NMA$C_OPN_NODE,
			 PRMDSC,
			 KEY,
			 NML$C_KEY_EXE,
			 0,
			 0,
			 RECDSC)
	THEN
	    BEGIN

	    FLDADR = 0;
	    IF NMA$SEARCHFLD (	RECDSC,
				NMA$C_PCNO_NNA,
				.RESLEN,
				FLDADR)
	    THEN
		IF ..RESLEN LEQU .BUFDSC [DSC$W_LENGTH]
		THEN
		    BEGIN
		    CH$MOVE (..RESLEN, .FLDADR, .BUFDSC [DSC$A_POINTER]);
		    RETURN NML$_STS_SUC;
		    END;
	    END;
	END
    ELSE
	IF NML$GETNODNAM (0, .BUFDSC, .RESLEN)
	THEN
	    RETURN NML$_STS_SUC;

!
! No node name found.
!
    .RESLEN = 0;

    RETURN NML$_STS_PTY

    END;				! End of NML$GETEXENAM

%SBTTL 'NML$GETNODNAM  Get node name given the address'
GLOBAL ROUTINE NML$GETNODNAM (ADDR, BUFDSC, RESLEN) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine returns the node name that matches the
!	specified address.
!
! FORMAL PARAMETERS:
!
!	ADDR		Node address.
!	BUFDSC		Address of descriptor of buffer to contain ASCII
!			node name.
!	RESLEN		Resulting length of node name string.
!
! IMPLICIT INPUTS:
!
!	NML$GB_OPTIONS contains the command message options.
!
!	If this is a permanent data base operation then it is assumed
!	that the node file is already open.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	If the executor node name is found then success (NML$_STS_SUC) is
!	returned.  If the node name is not found a zero length counted string
!	is returned along with failure (NML$_STS_PTY).
!
! SIDE EFFECTS:
!
!	Destroys contents of PRMBUFFER.
!
!--

    BEGIN

    MAP
	ADDR : WORD,
	BUFDSC : REF DESCRIPTOR,
	NML$GB_OPTIONS : BBLOCK [1];

    LOCAL
	ADDRDSC : DESCRIPTOR,
	KEY : WORD,
	NAMEPTR,
	NAMESIZE : WORD,
	NODE_ADDR : WORD,
	RECDSC : DESCRIPTOR;

    IF .NML$GB_OPTIONS [NMA$V_OPT_PER]
    THEN
	BEGIN
	RECDSC [DSC$A_POINTER] = .PRMDSC [DSC$A_POINTER];
	KEY = 0;
	IF NML$MATCHRECORD (	NMA$C_OPN_NODE,
				PRMDSC,
				KEY,
				NMA$C_PCNO_ADD,
				2,
				ADDR,
				RECDSC)
	THEN
	    BEGIN
	    NAMESIZE = 0;
	    NAMEPTR = 0;
	    IF NMA$SEARCHFLD (	RECDSC,
				NMA$C_PCNO_NNA,
				NAMESIZE,
				NAMEPTR)
	    THEN
		BEGIN
		CH$MOVE (.NAMESIZE, CH$PTR (.NAMEPTR), CH$PTR (.BUFDSC [DSC$A_POINTER]));
		.RESLEN = .NAMESIZE;

		RETURN NML$_STS_SUC
		END;
	    END
	END
    ELSE
	BEGIN
	RETURN NML$GETVOLNDNAM (.ADDR, .BUFDSC, .RESLEN)
	END;

!
! No node name found.
!
    .RESLEN = 0;

    RETURN NML$_STS_PTY

    END;				! End of NML$GETNODNAM

%SBTTL 'NML$GETVOLNDNAM  Get node name given the address'
GLOBAL ROUTINE NML$GETVOLNDNAM (ADDR, BUFDSC, RESLEN) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine returns the volatile node name that matches the
!	specified address.
!
! FORMAL PARAMETERS:
!
!	ADDR		Node address.
!	BUFDSC		Address of descriptor of buffer to contain ASCII
!			node name.
!	RESLEN		Address of longword to contain resulting length
!			of node name string.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	If the node name is found then success (NML$_STS_SUC) is
!	returned.  If the node name is not found a zero length counted string
!	is returned along with failure (NML$_STS_PTY).
!
! SIDE EFFECTS:
!
!	Destroys contents of PRMBUFFER.
!
!--

    BEGIN

    MAP
	ADDR   : WORD,
	BUFDSC : REF DESCRIPTOR;

    $NFBDSC(NFBDSC, SHOW, , NDI, TAD, , NNA);

    LOCAL
	P2DSC : DESCRIPTOR,
	NAMEPTR,
	NAMESIZE : WORD,
	NODE_ADDR;

    NODE_ADDR = .ADDR;

    IF .ADDR EQL 0			! If zero address then
    THEN				! get the real executor address
	NML$GETVOLEXADR (NODE_ADDR);

    NML$BLDP2(0, .NODE_ADDR, -1, 0, P2BFDSC, P2DSC);

    IF NML$NETQIO (	NFBDSC,
			P2DSC,
			NAMESIZE,
			PRMDSC)
    THEN
	BEGIN
	NAMEPTR = .PRMDSC [DSC$A_POINTER];
	NAMESIZE = .(.NAMEPTR)<0,16>;
	CH$MOVE (.NAMESIZE, CH$PTR (.NAMEPTR,2), .BUFDSC [DSC$A_POINTER]);
	.RESLEN = .NAMESIZE;
	RETURN NML$_STS_SUC
	END;
!
! No node name found.
!
    .RESLEN = 0;

    RETURN NML$_STS_PTY

    END;				! End of NML$GETVOLNDNAM

%SBTTL 'NML$GETNODADR  Get node address given the name'
GLOBAL ROUTINE NML$GETNODADR (NAMLEN, NAMPTR, ADDR) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine returns the node address that matches the
!	specified name.
!
! FORMAL PARAMETERS:
!
!	ADDR		Address of word to contain node address.
!
! IMPLICIT INPUTS:
!
!	NML$GB_OPTIONS contains the command message options.
!
!	If this is a permanent data base operation then it is assumed
!	that the node file is already open.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	If the node address is found then success (NML$_STS_SUC) is
!	returned.  If the node address is not found a zero address
!	is returned along with failure (NML$_STS_PTY).
!
! SIDE EFFECTS:
!
!	Destroys contents of PRMBUFFER.
!
!--

    BEGIN

    MAP
	NML$GB_OPTIONS : BBLOCK [1];

    $NFBDSC(NFBDSC, SHOW, , NDI, NNA, , TAD);

    LOCAL
	FLDADR,
	FLDSIZE,
	P2DSC    : DESCRIPTOR,
	PTR,
	KEY      : WORD,
	RECDSC   : DESCRIPTOR;

    IF .NML$GB_OPTIONS [NMA$V_OPT_PER]
    THEN
	BEGIN
	RECDSC [DSC$A_POINTER] = .PRMDSC [DSC$A_POINTER];
	KEY = 0;
	IF NML$MATCHRECORD (	NMA$C_OPN_NODE,
				PRMDSC,
				KEY,
				NMA$C_PCNO_NNA,
				.NAMLEN,
				.NAMPTR,
				RECDSC)
	THEN
	    BEGIN
	    FLDADR = 0;
	    IF NMA$SEARCHFLD (	RECDSC,
				NMA$C_PCNO_ADD,
				FLDSIZE,
				FLDADR)
	    THEN
		BEGIN
		CH$MOVE (2, .FLDADR, .ADDR);

		RETURN NML$_STS_SUC
		END;
	    END
	END
    ELSE
	BEGIN
	NML$BLDP2(.NAMLEN, .NAMPTR, -1, 0, P2BFDSC, P2DSC);
	IF NML$NETQIO (	NFBDSC,
			P2DSC,
			0,
			PRMDSC)
	THEN
	    BEGIN
	    PTR = .PRMDSC [DSC$A_POINTER];
	    CH$MOVE (2, .PTR, .ADDR);

	    RETURN NML$_STS_SUC
	    END;
	END;

!
! No node address found.
!
    (.ADDR)<0,16> = 0;

    RETURN NML$_STS_PTY

    END;				! End of NML$GETNODADR

%SBTTL 'NML$GETVOLNDADR  Get volatile node address given the name'
GLOBAL ROUTINE NML$GETVOLNDADR (NAMLEN, NAMPTR, ADDR) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine returns the node address from the volatile data base
!	that matches the specified name.
!
! FORMAL PARAMETERS:
!
!	ADDR		Address of word to contain node address.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	If the node address is found then success (NML$_STS_SUC) is
!	returned.  If the node address is not found a zero address
!	is returned along with failure (NML$_STS_PTY).
!
! SIDE EFFECTS:
!
!	Destroys contents of PRMBUFFER.
!
!--

    BEGIN

    $NFBDSC(NFBDSC, SHOW, , NDI, NNA, , TAD);

    LOCAL
	P2DSC    : DESCRIPTOR,
	PTR;

    NML$BLDP2(.NAMLEN, .NAMPTR, -1, 0, P2BFDSC, P2DSC);
    IF NML$NETQIO (	NFBDSC,
			P2DSC,
			0,
			PRMDSC)
    THEN
	BEGIN
	PTR = .PRMDSC [DSC$A_POINTER];
	CH$MOVE (2, .PTR, .ADDR);

	RETURN NML$_STS_SUC
	END;

!
! No node address found.
!
    (.ADDR)<0,16> = 0;

    RETURN NML$_STS_PTY

    END;				! End of NML$GETNODADR

%SBTTL 'NML$GETEXEID  Get executor node id'
GLOBAL ROUTINE NML$GETEXEID (BUFDSC, RESLEN) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine returns the executor node address followed by
!	the node name.
!
! FORMAL PARAMETERS:
!
!	BUFDSC		Address of descriptor of buffer to contain ASCII
!			node name.
!	RESLEN		Resulting length of node name string.
!
! IMPLICIT INPUTS:
!
!	If this is a permanent data base operation then it is assumed
!	that the executor and node files are already open.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	If the executor node name is found then success (NML$_STS_SUC) is
!	returned.  If the node name is not found a zero length counted string
!	is returned along with failure (NML$_STS_PTY).
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	BUFDSC         : REF DESCRIPTOR,
	NML$GB_OPTIONS : BBLOCK [1];

    LOCAL
	ADDR : WORD,
	NAMBUF : VECTOR [6, BYTE],
	NAMDSC : DESCRIPTOR,
	NAMLEN,
	PTR;

    PTR = CH$PTR (.BUFDSC [DSC$A_POINTER]);

    NML$GETEXEADR (ADDR);		! Get address

    NAMDSC [DSC$W_LENGTH] = 6;
    NAMDSC [DSC$A_POINTER] = NAMBUF;

    NML$GETNODNAM (0, NAMDSC, NAMLEN);	! Get name

    CH$WCHAR_A (.(ADDR)<0,8>, PTR);
    CH$WCHAR_A (.(ADDR)<8,8>, PTR);
    CH$WCHAR_A (.NAMLEN OR NMA$M_ENT_EXE, PTR);
    PTR = CH$MOVE (.NAMLEN, .NAMDSC [DSC$A_POINTER], .PTR);
    .RESLEN = .PTR - .BUFDSC [DSC$A_POINTER];

    RETURN NML$_STS_SUC

    END;				! End of NML$GETEXEID


%SBTTL 'NML$GETINFTABS  Get NFB and information table'
GLOBAL ROUTINE NML$GETINFTABS (ENT, INF, NFBDSC, TABDSC, COPY) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine returns the NFB descriptor address and the corresponding
!	table address based on the internal entity type and the information
!	type specified in the NCP SHOW command message.
!
! FORMAL PARAMETERS:
!
!	ENT		Internal entity type code.
!	INF		Internal information type code.
!	NFBDSC		Address of longword to get NFB descriptor address.
!	TABDSC		Address of longword to get table descriptor address.
!	COPY		(Temporary parameter) If 1, copy the NFB to the 
!			buffer specified by NFBDSC, and fill in NFBDSC length.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	If the descriptors are found for the specified entity and information
!	type then success (NML$_STS_SUC) is returned.  If the information type
!	is invalid for the entity then an error message (NML$_STS_FUN) is
!	signalled.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

BEGIN

LOCAL
	SINGLE_ENT_NFBDSC : REF DESCRIPTOR,
	ENTTAB : REF BBLOCKVECTOR [, 8]; ! Address of entity table

ENTTAB = .NML$AL_ENTINFTAB [.ENT];
!
! Return address of table used to format the NICE response message for
! this entity.
!
.TABDSC = .ENTTAB [.INF, 4,0,32,0];

!
! Return the canned NFB and NFB descriptor for getting the SHOW info
! from NETACP.
!
IF NOT .COPY THEN
	BEGIN
	.NFBDSC = .ENTTAB [.INF, 0,0,32,0];

	IF ..NFBDSC EQLA 0
	THEN
		NML$ERROR_1 (NMA$C_STS_FUN);
	END
ELSE
	!
	! For the new QIO interface, each plural entity show should
	! be modified to use the following path.  When I get around to it.
	! For plural entity SHOWs, copy the single entity NFB to local
	! storage in the calling routine, where it will be modified to
	! issue a plural entity SHOW.
	!
	BEGIN

	MAP
		NFBDSC : REF DESCRIPTOR;

	SINGLE_ENT_NFBDSC = .ENTTAB [.INF, 0,0,32,0];
	IF .SINGLE_ENT_NFBDSC EQLA 0 THEN
		NML$ERROR_1 (NMA$C_STS_FUN);
	.NFBDSC = ..SINGLE_ENT_NFBDSC;			! Set up NFB length.
	CH$MOVE (.SINGLE_ENT_NFBDSC [DSC$W_LENGTH],
		 .SINGLE_ENT_NFBDSC [DSC$A_POINTER],
		 .NFBDSC [DSC$A_POINTER]);
	END;

RETURN NML$_STS_SUC

END;				! End of NML$GETINFTABS

END

ELUDOM
