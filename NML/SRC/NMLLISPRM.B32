
%TITLE 'NML special parameter handling routines'
MODULE NML$LISPRM (
		LANGUAGE (BLISS32),
		ADDRESSING_MODE (NONEXTERNAL=LONG_RELATIVE),
		ADDRESSING_MODE (EXTERNAL=LONG_RELATIVE),
		IDENT = 'V03-000'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  DECnet-VAX V2.0 Network Management Listener
!
! ABSTRACT:
!
!	This module contains action routines to handle changing and
!	displaying of permanent data base entity parameters.
!
! ENVIRONMENT:  VAX/VMS Operating System
!
! AUTHOR:  Distributed Systems Software Engineering
!
! CREATION DATE:  23-JAN-1980
!
! MODIFIED BY:
!
!	V03-001	MKP001		Kathy Perko	24-July-1981
!		Delete NML call to map VMS line to DNA line name and
!		vice versa.
!--


%SBTTL 'Declarations'

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    NML$LISNMLVER,
    NML$LISLOONAM,
    NML$LISHOSTID,
    NML$LISSERVPASS,
    NML$LISLINEID,
    NML$LISPARAM,
    NML$LISPASSWORD,
    NML$DEFPARAM,
    NML$DEFLINLTY,
    NML$DEFLINTRI,
    NML$DEFNODNNA,
    NML$DEFEXEADD,
    NML$DEFNODNLI,
    NML$DEFOBJNUM,
    NML$PURPARAM,
    NML$PURNODNNA;

!
! INCLUDE FILES:
!

LIBRARY 'LIB$:NMLLIB.L32';
LIBRARY 'SHRLIB$:NMALIBRY.L32';
LIBRARY 'SYS$LIBRARY:STARLET.L32';

!
! OWN STORAGE:
!

!
! Parameter buffer and descriptor for use in handling volatile data base
! data.
!
OWN
    PRMBUFFER : VECTOR [256, BYTE];
BIND
    PRMDSC = UPLIT (256, PRMBUFFER) : DESCRIPTOR;

!
! EXTERNAL REFERENCES:
!

$NML_EXTDEF;

EXTERNAL LITERAL
    NML$_RECBFOVF;

EXTERNAL
    NML$GQ_PROPRVMSK : BBLOCK [8];

EXTERNAL ROUTINE
    NMA$DELETEFLD,
    NMA$INSERTFLD,
    NMA$MATCHREC,
    NMA$SEARCHFLD,
    NML$ADDMSGPRM,
    NML$BLD_REPLY,
    NML$GETNODADR,
    NML$GETNODNAM,
    NML$SEND;


%SBTTL 'NML$LISNMLVER  Get NML version number'
GLOBAL ROUTINE NML$LISNMLVER (SEM_TABLE, BUFDSC, MSGSIZE, DUMDSC) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine moves the network management version number into
!	the output message as a coded multiple parameter.
!
! FORMAL PARAMETERS:
!
!	SEM_TABLE	Parameter semantic table entry address.
!	BUFDSC		Output message buffer descriptor.
!	MSGSIZE		Address of current output message size.
!	DUMDSC		Not used.
!
! IMPLICIT INPUTS:
!
!	It is assumed that the permanent data base file is already open.
!
! IMPLICIT OUTPUTS:
!
!	Parameter is added to output message buffer.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	SEM_TABLE : REF BBLOCK;

    LOCAL
	BUFFER : VECTOR [6, BYTE],
	PTR;

    PTR = CH$PTR (BUFFER);			! Get pointer to output buffer

!
! Add version numbers preceded by data type.
!
    CH$WCHAR_A (1, PTR);
    CH$WCHAR_A (NML$K_VERSION, PTR);
    CH$WCHAR_A (1, PTR);
    CH$WCHAR_A (NML$K_DEC_ECO, PTR);
    CH$WCHAR_A (1, PTR);
    CH$WCHAR_A (NML$K_USER_ECO, PTR);

!
! Add coded multiple version parameter to message.
!
    NML$ADDMSGPRM (.BUFDSC,
		   .MSGSIZE,
		   .SEM_TABLE [PST$W_DATAID],
		   .SEM_TABLE [PST$B_DATATYPE] OR 3,
		   6,
		   BUFFER);

    RETURN NML$_STS_SUC

    END;					! End of NML$LISNMLVER

%SBTTL 'NML$LISLOONAM  Get loop node name'
GLOBAL ROUTINE NML$LISLOONAM (SEM_LIST, BUFDSC, MSGSIZE, DATDSC)=

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine returns the loopback node name for a line.
!
! FORMAL PARAMETERS:
!
!	SEM_LIST	Parameter semantic table entry address.
!	BUFDSC		Output message buffer descriptor address.
!	MSGSIZE		Address of current output message size.
!	DATDSC		Data buffer descriptor address.
!
! IMPLICIT INPUTS:
!
!	It is assumed that the permanent data base file is already open.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	SEM_LIST : REF BBLOCK;

    LOCAL
	KEY,
	FLDSIZE,
	FLDPTR,
	PRMSIZE,
	RECBUF  : VECTOR [NML$K_RECBFLEN, BYTE],
	RECDSC  : DESCRIPTOR,
	RESLEN  : WORD,
	RTNDSC  : DESCRIPTOR;

	FLDSIZE = 0;
	FLDPTR = 0;
	IF NMA$SEARCHFLD (.DATDSC,
			  NML$C_KEY_LINE,
			  FLDSIZE,
			  FLDPTR)
	THEN
	    BEGIN

	    RECDSC [DSC$W_LENGTH] = NML$K_RECBFLEN;
	    RECDSC [DSC$A_POINTER] = RECBUF;
	    RTNDSC [DSC$A_POINTER] = RECBUF;
	    KEY = 0;

	    IF NMA$MATCHREC (NMA$C_OPN_NODE,
			     RECDSC,
			     KEY,
			     NMA$C_PCNO_NLI,
			     .FLDSIZE,
			     .FLDPTR,
			     RTNDSC)
	    THEN
		BEGIN

		FLDSIZE = 0;
		FLDPTR = 0;
		IF NMA$SEARCHFLD (RTNDSC,
				  NMA$C_PCNO_NNA,
				  FLDSIZE,
				  FLDPTR)
		THEN
		    NML$ADDMSGPRM (.BUFDSC,
				   .MSGSIZE,
				   .SEM_LIST [PST$W_DATAID],
				   .SEM_LIST [PST$B_DATATYPE],
				   .FLDSIZE,
				   .FLDPTR);
		END;
	    END;

    RETURN NML$_STS_SUC

    END;					! End of NML$LISLOONAM

%SBTTL 'NML$LISHOSTID  Get host node id'
GLOBAL ROUTINE NML$LISHOSTID (SEM_LIST, BUFDSC, MSGSIZE, DATDSC)=

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine gets the host node identification string.
!
! FORMAL PARAMETERS:
!
!	SEM_LIST	Parameter semantic table entry address.
!	BUFDSC		Output message buffer descriptor address.
!	MSGSIZE		Address of current output message size.
!	DATDSC		Data buffer descriptor address.
!
! IMPLICIT INPUTS:
!
!	It is assumed that the permanent data base file is already open.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	SEM_LIST : REF BBLOCK;

    OWN
	TMPBUFFER : BBLOCK [6];
    BIND
	TMPDSC = UPLIT (6, TMPBUFFER) : DESCRIPTOR;

    LOCAL
	CM_COUNT,
	FLDADR,
	FLDSIZE,
	LENGTH,
	NAMDSC  : DESCRIPTOR,
	HOSTADR : WORD,
	PTR,
	RESLEN;

	FLDADR = 0;

	IF NOT NMA$SEARCHFLD (.DATDSC,
			      NMA$C_PCNO_IHO,
			      FLDSIZE,
			      FLDADR)
	THEN
	    RETURN NML$_STS_PTY;

    PTR = PRMBUFFER;
    CM_COUNT = 1;

    HOSTADR = .(.FLDADR)<0,16>;
    NML$GETNODNAM (.HOSTADR, TMPDSC, RESLEN);
    NAMDSC [DSC$W_LENGTH] = .RESLEN;
    NAMDSC [DSC$A_POINTER] = TMPBUFFER;
!
! Add node address field.
!
    CH$WCHAR_A (2, PTR);
    PTR = CH$MOVE (2, HOSTADR, .PTR);
!
! Add node name field if the length is not zero.
!
	IF .NAMDSC [DSC$W_LENGTH] NEQU 0
	THEN
	    BEGIN

	    CM_COUNT = .CM_COUNT + 1;
	    CH$WCHAR_A (NMA$M_PTY_ASC, PTR);
	    CH$WCHAR_A (.NAMDSC [DSC$W_LENGTH], PTR);
	    PTR = CH$MOVE (.NAMDSC [DSC$W_LENGTH],
			   .NAMDSC [DSC$A_POINTER],
			   .PTR);
	    END;

    LENGTH = .PTR - PRMBUFFER;

    NML$ADDMSGPRM (.BUFDSC,
		   .MSGSIZE,
		   .SEM_LIST [PST$W_DATAID],
		   .SEM_LIST [PST$B_DATATYPE] OR .CM_COUNT,
		   .LENGTH,
		   PRMBUFFER);

    RETURN NML$_STS_SUC

    END;					! End of NML$LISHOSTID

%SBTTL 'NML$LISOBJPRV  Get object privilege mask'
GLOBAL ROUTINE NML$LISOBJPRV (SEM_LIST, BUFDSC, MSGSIZE, DATDSC)=

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine returns the object privilege list.
!
! FORMAL PARAMETERS:
!
!	SEM_LIST	Parameter semantic table entry address.
!	BUFDSC		Output message buffer descriptor address.
!	MSGSIZE		Address of current output message size.
!	DATDSC		QIO buffer descriptor address.
!
! IMPLICIT INPUTS:
!
!	It is assumed that the permanent data base file is already open.
!
! IMPLICIT OUTPUTS:
!
!	The output message buffer contains the object privilege mask.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!
!--

    BEGIN

    MAP
	SEM_LIST : REF BBLOCK;

    LOCAL
	FLDADR,
	FLDSIZE;

	FLDADR = 0;

	IF NMA$SEARCHFLD (.DATDSC,
			  .SEM_LIST [PST$W_DATAID],
			  FLDSIZE,
			  FLDADR)
	THEN
	    BEGIN

	    NML$ADDMSGPRM (.BUFDSC,
			   .MSGSIZE,
			   .SEM_LIST [PST$W_DATAID],
			   .SEM_LIST [PST$B_DATATYPE] OR .FLDSIZE,
			   .FLDSIZE,
			   .FLDADR);
	    END;

    RETURN NML$_STS_SUC

    END;					! End of NML$LISOBJPRV

%SBTTL 'NML$LISSERVPASS  Get service password'
GLOBAL ROUTINE NML$LISSERVPASS (SEM_LIST, BUFDSC, MSGSIZE, DATDSC)=

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine returns the service password.
!
! FORMAL PARAMETERS:
!
!	SEM_LIST	Parameter semantic table entry address.
!	BUFDSC		Output message buffer descriptor address.
!	MSGSIZE		Address of current output message size.
!	DATDSC		QIO buffer descriptor address.
!
! IMPLICIT INPUTS:
!
!	It is assumed that the permanent data base file is already open.
!
! IMPLICIT OUTPUTS:
!
!	The output message buffer contains the hex service password.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	SEM_LIST : REF BBLOCK;

    LOCAL
	FLDADR,
	FLDSIZE;

	FLDADR = 0;

	IF NMA$SEARCHFLD (.DATDSC,
			  .SEM_LIST [PST$W_DATAID],
			  FLDSIZE,
			  FLDADR)
	THEN
	    BEGIN

	    NML$ADDMSGPRM (.BUFDSC,
			   .MSGSIZE,
			   .SEM_LIST [PST$W_DATAID],
			   .SEM_LIST [PST$B_DATATYPE] OR .FLDSIZE,
			   .FLDSIZE,
			   .FLDADR);
	    END;

    RETURN NML$_STS_SUC

    END;					! End of NML$LISSERVPASS

%SBTTL 'NML$LISLINEID  Get line id'
GLOBAL ROUTINE NML$LISLINEID (SEM_LIST, BUFDSC, MSGSIZE, DATDSC)=

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine reads the line id string and converts it from
!	VMS format to DNA format and then adds it to the output message.
!
! FORMAL PARAMETERS:
!
!	SEM_LIST	Parameter semantic table entry address.
!	BUFDSC		Output message buffer descriptor address.
!	MSGSIZE		Address of current output message size.
!	DATDSC		QIO buffer descriptor address.
!
! IMPLICIT INPUTS:
!
!	It is assumed that the permanent data base file is already open.
!
! IMPLICIT OUTPUTS:
!
!	The output message contains the DNA line id.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	Uses PRMBUFFER.
!
!--

    BEGIN

    MAP
	SEM_LIST : REF BBLOCK;

    LOCAL
	FLDADR,
	FLDSIZE,
	RESLEN : WORD;


	FLDADR = 0;

	IF NMA$SEARCHFLD (.DATDSC,
			  .SEM_LIST [PST$W_DATAID],
			  FLDSIZE,
			  FLDADR)
	THEN
	    NML$ADDMSGPRM (.BUFDSC,
			   .MSGSIZE,
			   .SEM_LIST [PST$W_DATAID],
			   .SEM_LIST [PST$B_DATATYPE],
			   .FLDSIZE,
			   .FLDADR);

    RETURN NML$_STS_SUC

    END;					! End of NML$LISLINEID

%SBTTL 'NML$LISPARAM  Get parameter'
GLOBAL ROUTINE NML$LISPARAM (SEM_LIST, BUFDSC, MSGSIZE, DATDSC)=

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine returns a parameter.
!
! FORMAL PARAMETERS:
!
!	SEM_LIST	Parameter semantic table entry address.
!	BUFDSC		Output message buffer descriptor address.
!	MSGSIZE		Address of current output message size.
!	DATDSC		QIO buffer descriptor address.
!
! IMPLICIT INPUTS:
!
!	It is assumed that the permanent data base file is already open.
!
! IMPLICIT OUTPUTS:
!
!	The output message buffer contains the coded multiple version number.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	SEM_LIST : REF BBLOCK;

    LOCAL
	FLDADR,
	FLDSIZE;

	FLDADR = 0;

	IF NMA$SEARCHFLD (.DATDSC,
			  .SEM_LIST [PST$W_DATAID],
			  FLDSIZE,
			  FLDADR)
	THEN
	    BEGIN

	    NML$ADDMSGPRM (.BUFDSC,
			   .MSGSIZE,
			   .SEM_LIST [PST$W_DATAID],
			   .SEM_LIST [PST$B_DATATYPE],
			   .FLDSIZE,
			   .FLDADR);
	    END;

    RETURN NML$_STS_SUC

    END;					! End of NML$LISPARAM

%SBTTL 'NML$LISPASSWORD  Get parameter'
GLOBAL ROUTINE NML$LISPASSWORD (SEM_LIST, BUFDSC, MSGSIZE, DATDSC)=

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine adds a password parameter to the output message if
!	the user has the BYPASS privilege.
!
! FORMAL PARAMETERS:
!
!	SEM_LIST	Parameter semantic table entry address.
!	BUFDSC		Output message buffer descriptor address.
!	MSGSIZE		Address of current output message size.
!	DATDSC		Address of data buffer descriptor.
!
! IMPLICIT INPUTS:
!
!	It is assumed that the permanent data base file is already open.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	SEM_LIST : REF BBLOCK;

    BIND
	STRDSC = $ASCID ('no access rights') : DESCRIPTOR;

    LOCAL
	FLDADR,
	FLDSIZE;

	IF NOT .NML$GQ_PROPRVMSK [PRV$V_BYPASS]
	THEN
	    BEGIN
!
! User does not have BYPASS privilege so return string to indicate that
! a password is set if one is found.
!

	    FLDADR = 0;
	    IF NMA$SEARCHFLD (.DATDSC,
			      .SEM_LIST [PST$W_DATAID],
			      FLDSIZE,
			      FLDADR)
	    THEN
		BEGIN

		NML$ADDMSGPRM (.BUFDSC,
			       .MSGSIZE,
			       .SEM_LIST [PST$W_DATAID],
			       .SEM_LIST [PST$B_DATATYPE],
			       .STRDSC [DSC$W_LENGTH],
			       .STRDSC [DSC$A_POINTER]);

		RETURN NML$_STS_SUC

		END;
	    END;
!
! Call the normal parameter routine.
!
    NML$LISPARAM (.SEM_LIST,
		  .BUFDSC,
		  .MSGSIZE,
		  .DATDSC);

    RETURN NML$_STS_SUC

    END;					! End of NML$LISPASSWORD

%SBTTL 'NML$DEFPARAM  Add parameter'
GLOBAL ROUTINE NML$DEFPARAM (SEM_LIST, BUFDSC, LENGTH, ADDR, RTNDSC)=

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine adds a parameter to a permanent data base record.
!
! FORMAL PARAMETERS:
!
!	SEM_LIST	Parameter semantic table entry address.
!	BUFDSC		Output message buffer descriptor address.
!	LENGTH		Length of parameter.
!	ADDR		Address of parameter.
!	RTNDSC		Record buffer descriptor address.
!
! IMPLICIT INPUTS:
!
!	It is assumed that the permanent data base file is already open.
!
! IMPLICIT OUTPUTS:
!
!	The parameter is added to the record.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	SEM_LIST : REF BBLOCK;

	IF NOT NMA$INSERTFLD (.BUFDSC,
			      .SEM_LIST [PST$W_DATAID],
			      .LENGTH,
			      .ADDR,
			      .RTNDSC)
	THEN
	    BEGIN
!
! Insert failed.
!
	    NML$AB_MSGBLOCK [MSB$L_FLAGS] = MSB$M_MSG_FLD;	! Set message text flag
	    NML$AB_MSGBLOCK [MSB$B_CODE] = NMA$C_STS_MPR;	! Add error code
	    NML$AB_MSGBLOCK [MSB$L_TEXT] = NML$_RECBFOVF;

	    RETURN NML$_STS_MPR

	    END;

    RETURN NML$_STS_SUC

    END;					! End of NML$DEFPARAM

%SBTTL 'NML$DEFLINLTY  Add line type parameter'
GLOBAL ROUTINE NML$DEFLINLTY (SEM_LIST, BUFDSC, LENGTH, ADDR, RTNDSC)=

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine adds the line type parameter to the permanent data
!	base record if the value is valid.
!
! FORMAL PARAMETERS:
!
!	SEM_LIST	Parameter semantic table entry address.
!	BUFDSC		Output message buffer descriptor address.
!	LENGTH		Current output message size.
!	RTNDSC		QIO buffer descriptor address.
!
! IMPLICIT INPUTS:
!
!	It is assumed that the permanent data base file is already open.
!
! IMPLICIT OUTPUTS:
!
!	The parameter is added to the record.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	SEM_LIST : REF BBLOCK;

    LOCAL
	FLDADR,
	FLDSIZE,
	STATUS;

    IF .(.ADDR)<0,8> EQL NMA$C_LINTY_POI
    THEN
	BEGIN

	FLDSIZE = 0;
	IF NMA$SEARCHFLD (.RTNDSC,
			  NMA$C_PCLI_TRI,
			  FLDSIZE,
			  FLDADR)
	THEN
	    BEGIN
!
! Line has tributary address so it cannot have type=POINT.
!

	    NML$AB_MSGBLOCK [MSB$L_FLAGS] = MSB$M_DET_FLD;
	    NML$AB_MSGBLOCK [MSB$B_CODE] = NMA$C_STS_PVA;
	    NML$AB_MSGBLOCK [MSB$W_DETAIL] = NMA$C_PCLI_LTY;

	    RETURN NML$_STS_PVA

	    END;
	END;

    STATUS = NML$DEFPARAM (.SEM_LIST,
			   .BUFDSC,
			   .LENGTH,
			   .ADDR,
			   .RTNDSC);

    RETURN .STATUS

    END;					! End of NML$DEFLINLTY

%SBTTL 'NML$DEFLINTRI  Add line tributary address parameter'
GLOBAL ROUTINE NML$DEFLINTRI (SEM_LIST, BUFDSC, LENGTH, ADDR, RTNDSC)=

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine adds the line tributary address parameter to the
!	permanent data base record if it is valid for this line.
!
! FORMAL PARAMETERS:
!
!	SEM_LIST	Parameter semantic table entry address.
!	BUFDSC		Output message buffer descriptor address.
!	LENGTH		Current output message size.
!	RTNDSC		QIO buffer descriptor address.
!
! IMPLICIT INPUTS:
!
!	It is assumed that the permanent data base file is already open.
!
! IMPLICIT OUTPUTS:
!
!	The parameter is added to the record.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	SEM_LIST : REF BBLOCK;

    LOCAL
	FLDADR,
	FLDSIZE,
	STATUS;

    FLDSIZE = 0;
    IF NMA$SEARCHFLD (.RTNDSC,
		      NMA$C_PCLI_LTY,
		      FLDSIZE,
		      FLDADR)
    THEN
	BEGIN

	IF .(.FLDADR)<0,8> EQL NMA$C_LINTY_POI
	THEN
	    BEGIN
!
! Line has type=POINT so no tributary address can be specified.
!

	    NML$AB_MSGBLOCK [MSB$L_FLAGS] = MSB$M_DET_FLD;
	    NML$AB_MSGBLOCK [MSB$B_CODE] = NMA$C_STS_PNA;
	    NML$AB_MSGBLOCK [MSB$W_DETAIL] = NMA$C_PCLI_TRI;

	    RETURN NML$_STS_PNA

	    END;
	END;

    STATUS = NML$DEFPARAM (.SEM_LIST,
			   .BUFDSC,
			   .LENGTH,
			   .ADDR,
			   .RTNDSC);

    RETURN .STATUS

    END;					! End of NML$DEFLINTRI

%SBTTL 'NML$DEFNODNNA  Add node name parameter'
GLOBAL ROUTINE NML$DEFNODNNA (SEM_LIST, BUFDSC, LENGTH, ADDR, RTNDSC)=

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine adds the node name parameter to the permanent data
!	base record if it is unique.
!
! FORMAL PARAMETERS:
!
!	SEM_LIST	Parameter semantic table entry address.
!	BUFDSC		Output message buffer descriptor address.
!	LENGTH		Current output message size.
!	RTNDSC		QIO buffer descriptor address.
!
! IMPLICIT INPUTS:
!
!	It is assumed that the permanent data base file is already open.
!
! IMPLICIT OUTPUTS:
!
!	The parameter is added to the record.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	SEM_LIST : REF BBLOCK;

    LOCAL
	DUMDSC : DESCRIPTOR,
	FLDADR,
	FLDSIZE,
	KEY : WORD,
	STATUS;

    FLDADR = 0;
    FLDSIZE = 0;
    STATUS = NMA$SEARCHFLD (.RTNDSC,
			    NMA$C_PCNO_NNA,
			    FLDSIZE,
			    FLDADR);

    IF NOT .STATUS
    OR (.STATUS AND CH$NEQ (.FLDSIZE, .FLDADR, .LENGTH, .ADDR))
    THEN
	BEGIN

	KEY = 0;
	IF NMA$MATCHREC (NMA$C_OPN_NODE,
			 PRMDSC,
			 KEY,
			 NMA$C_PCNO_NNA,
			 .LENGTH,
			 .ADDR,
			 DUMDSC)
	THEN
	    BEGIN
!
! Node name is not unique.
!
	    NML$AB_MSGBLOCK [MSB$L_FLAGS] = MSB$M_DET_FLD;
	    NML$AB_MSGBLOCK [MSB$B_CODE] = NMA$C_STS_PVA;
	    NML$AB_MSGBLOCK [MSB$W_DETAIL] = NMA$C_PCNO_NNA;

	    RETURN NML$_STS_PVA

	    END;
	END;

    STATUS = NML$DEFPARAM (.SEM_LIST,
			   .BUFDSC,
			   .LENGTH,
			   .ADDR,
			   .RTNDSC);

    RETURN .STATUS

    END;					! End of NML$DEFNODNNA

%SBTTL 'NML$DEFEXEADD  Add executor address parameter'
GLOBAL ROUTINE NML$DEFEXEADD (SEM_LIST, BUFDSC, LENGTH, ADDR, RTNDSC)=

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine adds the executor address parameter to the permanent 
!	data base record if it is unique.
!
! FORMAL PARAMETERS:
!
!	SEM_LIST	Parameter semantic table entry address.
!	BUFDSC		Output message buffer descriptor address.
!	LENGTH		Current output message size.
!	RTNDSC		QIO buffer descriptor address.
!
! IMPLICIT INPUTS:
!
!	It is assumed that the permanent data base file is already open.
!
! IMPLICIT OUTPUTS:
!
!	The parameter is added to the record.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	SEM_LIST : REF BBLOCK;

    LOCAL
	DUMDSC : DESCRIPTOR,
	FLDADR,
	FLDSIZE,
	KEY : WORD,
	STATUS;
!
! Find the address for this node.
!
    FLDADR = 0;
    FLDSIZE = 0;
    STATUS = NMA$SEARCHFLD (.RTNDSC,
			    NMA$C_PCNO_ADD,
			    FLDSIZE,
			    FLDADR);
!
! If no address is found or the current address is different from the new
! address then scan the data base to see if it is already in use by another
! node.
!
    IF NOT .STATUS
    OR (.STATUS AND (.(.FLDADR)<0,16> NEQU .(.ADDR)<0,16>))
    THEN
	BEGIN

	DUMDSC [DSC$A_POINTER] = .PRMDSC [DSC$A_POINTER];

	KEY = 0;
	IF NMA$MATCHREC (NMA$C_OPN_NODE,
			 PRMDSC,
			 KEY,
			 NMA$C_PCNO_ADD,
			 .LENGTH,
			 .ADDR,
			 DUMDSC)
	THEN
	    BEGIN
!
! Node address is not unique.
!
	    NML$AB_MSGBLOCK [MSB$L_FLAGS] = MSB$M_DET_FLD;
	    NML$AB_MSGBLOCK [MSB$B_CODE] = NMA$C_STS_PVA;
	    NML$AB_MSGBLOCK [MSB$W_DETAIL] = NMA$C_PCNO_ADD;

	    RETURN NML$_STS_PVA

	    END;
	END;
!
! Address is unique so add it to the record.
!
    STATUS = NML$DEFPARAM (.SEM_LIST,
			   .BUFDSC,
			   .LENGTH,
			   .ADDR,
			   .RTNDSC);

    RETURN .STATUS

    END;					! End of NML$DEFEXEADD

%SBTTL 'NML$DEFNODNLI  Add loop node line parameter'
GLOBAL ROUTINE NML$DEFNODNLI (SEM_LIST, BUFDSC, LENGTH, ADDR, RTNDSC)=

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine adds the loop node line parameter to the permanent
!	data base record if it this is a loop node and the line id is
!	unique.
!
! FORMAL PARAMETERS:
!
!	SEM_LIST	Parameter semantic table entry address.
!	BUFDSC		Output message buffer descriptor address.
!	LENGTH		Current output message size.
!	RTNDSC		QIO buffer descriptor address.
!
! IMPLICIT INPUTS:
!
!	It is assumed that the permanent data base file is already open.
!
! IMPLICIT OUTPUTS:
!
!	The parameter is added to the record.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	SEM_LIST : REF BBLOCK;

    LOCAL
	DUMDSC : DESCRIPTOR,
	FLDADR,
	FLDSIZE,
	KEY : WORD,
	STATUS;

    FLDADR = 0;
    IF NMA$SEARCHFLD (.RTNDSC,
		      NMA$C_PCNO_ADD,
		      FLDSIZE,
		      FLDADR)
    THEN
	BEGIN
!
! Node has address so line is not allowed.
!
	NML$AB_MSGBLOCK [MSB$L_FLAGS] = MSB$M_DET_FLD;
	NML$AB_MSGBLOCK [MSB$B_CODE] = NMA$C_STS_PNA;
	NML$AB_MSGBLOCK [MSB$W_DETAIL] = NMA$C_PCNO_NLI;

	RETURN NML$_STS_PNA

	END;

    FLDADR = 0;
    FLDSIZE = 0;
    STATUS = NMA$SEARCHFLD (.RTNDSC,
			    NMA$C_PCNO_NLI,
			    FLDSIZE,
			    FLDADR);
    IF NOT .STATUS
    OR (.STATUS AND CH$NEQ (.FLDSIZE, .FLDADR, .LENGTH, .ADDR))
    THEN
	BEGIN

	KEY = 0;
	IF NMA$MATCHREC (NMA$C_OPN_NODE,
			 PRMDSC,
			 KEY,
			 NMA$C_PCNO_NLI,
			 .LENGTH,
			 .ADDR,
			 DUMDSC)
	THEN
	    BEGIN
!
! Line name must be unique for loop node.
!

	    NML$AB_MSGBLOCK [MSB$L_FLAGS] = MSB$M_DET_FLD;
	    NML$AB_MSGBLOCK [MSB$B_CODE] = NMA$C_STS_PVA;
	    NML$AB_MSGBLOCK [MSB$W_DETAIL] = NMA$C_PCNO_NLI;

	    RETURN NML$_STS_PVA

	    END;
	END;

    STATUS = NML$DEFPARAM (.SEM_LIST,
			   .BUFDSC,
			   .LENGTH,
			   .ADDR,
			   .RTNDSC);

    RETURN .STATUS

    END;					! End of NML$DEFNODNLI

%SBTTL 'NML$DEFOBJNUM  Add object number parameter'
GLOBAL ROUTINE NML$DEFOBJNUM (SEM_LIST, BUFDSC, LENGTH, ADDR, RTNDSC)=

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine adds the object number parameter to the permanent
!	data base record if it is unique.
!
! FORMAL PARAMETERS:
!
!	SEM_LIST	Parameter semantic table entry address.
!	BUFDSC		Output message buffer descriptor address.
!	LENGTH		Current output message size.
!	RTNDSC		QIO buffer descriptor address.
!
! IMPLICIT INPUTS:
!
!	It is assumed that the permanent data base file is already open.
!
! IMPLICIT OUTPUTS:
!
!	The parameter is added to the record.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	SEM_LIST : REF BBLOCK;

    LOCAL
	DUMDSC : DESCRIPTOR,
	FLDADR,
	FLDSIZE,
	KEY : WORD,
	STATUS;

    FLDADR = 0;
    FLDSIZE = 0;
    STATUS = NMA$SEARCHFLD (.RTNDSC,
			    NMA$C_PCOB_NUM,
			    FLDSIZE,
			    FLDADR);

    IF NOT .STATUS
    OR (.STATUS AND CH$NEQ (.FLDSIZE, .FLDADR, .LENGTH, .ADDR))
    THEN
	BEGIN

	KEY = 0;
	IF NMA$MATCHREC (NMA$C_OPN_OBJ,
			 PRMDSC,
			 KEY,
			 NMA$C_PCOB_NUM,
			 .LENGTH,
			 .ADDR,
			 DUMDSC)
	THEN
	    BEGIN
!
! Object number is not unique.
!
	    NML$AB_MSGBLOCK [MSB$L_FLAGS] = MSB$M_DET_FLD;
	    NML$AB_MSGBLOCK [MSB$B_CODE] = NMA$C_STS_PVA;
	    NML$AB_MSGBLOCK [MSB$W_DETAIL] = NMA$C_PCOB_NUM;

	    RETURN NML$_STS_PVA

	    END;
	END;

    STATUS = NML$DEFPARAM (.SEM_LIST,
			   .BUFDSC,
			   .LENGTH,
			   .ADDR,
			   .RTNDSC);

    RETURN .STATUS

    END;					! End of NML$DEFOBJNUM

%SBTTL 'NML$PURPARAM  Delete parameter'
GLOBAL ROUTINE NML$PURPARAM (RTNDSC, SEM_LIST)=

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine removes a parameter from the permanent data base record.
!
! FORMAL PARAMETERS:
!
!	SEM_LIST	Parameter semantic table entry address.
!	RTNDSC		Record buffer descriptor address.
!
! IMPLICIT INPUTS:
!
!	It is assumed that the permanent data base file is already open.
!
! IMPLICIT OUTPUTS:
!
!	The parameter has been removed from the record.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	SEM_LIST : REF BBLOCK;

    NMA$DELETEFLD (.RTNDSC,
		   .SEM_LIST [PST$W_DATAID]);

    RETURN NML$_STS_SUC

    END;					! End of NML$PURPARAM

%SBTTL 'NML$PURNODNNA  Delete node name parameter'
GLOBAL ROUTINE NML$PURNODNNA (RTNDSC, SEM_LIST)=

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine removes the node name parameter from the permanent
!	data base record if it is not required as in the case of a loop
!	node.
!
! FORMAL PARAMETERS:
!
!	RTNDSC		Data buffer descriptor address.
!	SEM_LIST	Parameter semantic table entry address.
!
! IMPLICIT INPUTS:
!
!	It is assumed that the permanent data base file is already open.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Error is returned if the parameter cannot be removed.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	SEM_LIST : REF BBLOCK;

    LOCAL
	FLDADR,
	FLDSIZE;

    FLDADR = 0;
    FLDSIZE = 0;
    IF NMA$SEARCHFLD (.RTNDSC,
		      NMA$C_PCNO_NLI,
		      FLDSIZE,
		      FLDADR)
    THEN
	BEGIN
!
! Node has line so name cannot be deleted.
!
	NML$AB_MSGBLOCK [MSB$L_FLAGS] = MSB$M_DET_FLD;
	NML$AB_MSGBLOCK [MSB$B_CODE] = NMA$C_STS_PNA;
	NML$AB_MSGBLOCK [MSB$W_DETAIL] = NMA$C_PCNO_NNA;

	RETURN NML$_STS_PNA

	END
    ELSE
	NMA$DELETEFLD (.RTNDSC, .SEM_LIST [PST$W_DATAID]);

    RETURN NML$_STS_SUC

    END;					! End of NML$PURNODNNA

END

ELUDOM
