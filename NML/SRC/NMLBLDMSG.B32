%TITLE 'NML Network message builder module'
MODULE NML$BLDMSG (
		LANGUAGE (BLISS32),
		ADDRESSING_MODE (NONEXTERNAL=LONG_RELATIVE),
		ADDRESSING_MODE (EXTERNAL=LONG_RELATIVE),
		IDENT = 'V03-000'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  DECnet-VAX Network Management Listener
!
!
! ABSTRACT:
!
!	This module contains routines to build NICE response messages
!	and miscellaneous routines for debugging.
!
! ENVIRONMENT:  VAX/VMS Operating System
!
! AUTHOR:  Distributed Systems Software Engineering
!
! CREATION DATE:  28-Jan-1980
!
! MODIFIED BY:
!
!	V03-006	MKP0006		Kathy Perko		10-Jan-1982
!		Add a message parameter to NML$DEBUG_QIO so I can label
!		what kind of QIO is getting logged.
!
!	V03-005	MKP0005		Kathy Perko		20-Dec-1981
!		Change debug logging so that it can handle no NFB descriptor
!		address.  This allows NML to dump just the QIO status and
!		IOSB for MOP QIOs.
!
!	V03-004	MKP0004		Kathy Perko		03-Nov-1981
!		Add support for secondary (RMS) lines of message text in a
!		NICE reply message.
!
!	V03-003 MKP0003		Kathy Perko		20-Sept-1991
!		Fix logging so QIO info is dumped.
!
!	V03-002 MKP0002		Kathy Perko		26-July-1981
!		Enhance logging to dump contents of QIO buffers, and
!		dump buffers right to left with ASCII on the right.
!
!	V03-001 MKP0001		Kathy Perko		26-July-1981
!		Fix logging so permanent data base files aren't
!		opened and closed every time.
!--
 

%SBTTL 'Declarations'

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    NML$BLD_REPLY,
    NML$ADDMSGPRM,
    NML$ADDMSGCOU,
    NML$GETSYSMSG	: NOVALUE,
    NML$ERROR_1		: NOVALUE,
    NML$ERROR_2		: NOVALUE,
    NML$DEBUG_TXT	: NOVALUE,
    NML$DEBUG_MSG	: NOVALUE,
    NML$DEBUG_QIO	: NOVALUE,
    NML$DUMP_QIO_BUFS   : NOVALUE,
    NML$LOGALLPDB	: NOVALUE,
    NML$FILEDMP		: NOVALUE,
    NML$LOGFILEOP	: NOVALUE,
    NML$LOGRECORDOP	: NOVALUE,
    NML$APPENDTXT	: NOVALUE,
    NML$TRNLOGNUM;

!
! INCLUDE FILES:
!

LIBRARY 'LIB$:NMLLIB.L32';
LIBRARY 'SHRLIB$:NMALIBRY.L32';
LIBRARY 'SYS$LIBRARY:STARLET.L32';

!
! EXTERNAL REFERENCES:
!

$NML_EXTDEF;
 
EXTERNAL
    NML$GQ_PROPRVMSK : BBLOCK [8];	! Process privilege mask

EXTERNAL ROUTINE
    LIB$CVT_HTB		: ADDRESSING_MODE (LONG_RELATIVE),
    LIB$PUT_OUTPUT	: ADDRESSING_MODE (LONG_RELATIVE),
    NMA$CLOSEFILE,
    NMA$OPENFILE,
    NMA$READREC;


%SBTTL 'Error message text'

!
! Macro to generate each error message.
!
MACRO
    ERR_TEXT (CODE, STRING) =
	GLOBAL LITERAL
	    %NAME ('NML$_',CODE) = MSG_CODE;

	SWITCHES UNAMES;
	PSECT OWN = $MSG_TEXT;

	OWN
	    MSG_TEXT : VECTOR [%CHARCOUNT(STRING)+1, BYTE]
		       INITIAL (BYTE (%CHARCOUNT(STRING), STRING));

	PSECT OWN = $MSG_INDEX;

	OWN
	    MSG_INDEX : INITIAL (MSG_TEXT);

	UNDECLARE MSG_TEXT, MSG_INDEX;
	SWITCHES NOUNAMES;

	%ASSIGN (MSG_CODE, MSG_CODE+1)

	PSECT OWN = $OWN$;
    %;
!
! Initialize and label the message sections.
!
PSECT
    OWN	= $MSG_TEXT (NOWRITE, ALIGN(0));
OWN
    MESSAGE_TEXT : VECTOR [0, BYTE];
PSECT
    OWN	= $MSG_INDEX (NOWRITE, ALIGN (2));
OWN
    MESSAGE_TABLE : VECTOR [0];
 
COMPILETIME
    MSG_CODE = 0;
!
! Generate the error messages.
!
ERR_TEXT (NULL,		''); 
ERR_TEXT (READERR,	'Error reading database entry');
ERR_TEXT (WRITERR,	'Error writing database entry');
ERR_TEXT (DELETERR,	'Error deleting database entry');
ERR_TEXT (RECREPLC,	'Database entry updated');
ERR_TEXT (RECADDED,	'Database entry added');
ERR_TEXT (RECDELET,	'Database entry deleted');
ERR_TEXT (NORECOWN,	'Failed to find record owner');
ERR_TEXT (DSCBFOVF,	'Parameter descriptor buffer overflow');
ERR_TEXT (QIOBFOVF,	'QIO buffer overflow');
ERR_TEXT (RECBFOVF,	'Record buffer overflow');
ERR_TEXT (ALPBFOVF,	'Active looper buffer exceeded');
ERR_TEXT (MIRBFOVF,	'Mirror buffer exceeded');
ERR_TEXT (NCBFAIL,	'Undefined object on local node');
ERR_TEXT (BADMOPFCT,	'Bad MOP function received from target');
ERR_TEXT (BADMOPDEV,	'Bad MOP device received from target');
ERR_TEXT (BADMOPVER,	'Incompatible MOP version');
ERR_TEXT (BADMOPPGM,	'Bad MOP program type received from target');
ERR_TEXT (BADMOPSID,	'Bad MOP software id received from target');
ERR_TEXT (UNSMOPDEV,	'Unsupported MOP device type');
ERR_TEXT (IMGRECSIZ,	'Invalid image record size');
ERR_TEXT (BADEVTUPD,	'Failed to update event parameter');
ERR_TEXT (INTEVTOVF,	'Internal event buffer overflow');
ERR_TEXT (NOSNKNOD,	'No sink node found in logging data base entry');

%SBTTL 'NML$BLD_REPLY  Build NICE response message'
GLOBAL ROUTINE NML$BLD_REPLY (MSGBLK, MSGLEN) =
 
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine builds a NICE response message based on the
!	message segment block.
!
! FORMAL PARAMETERS:
!
!	MSGBLK		Address of the message segment block (MSB).
!	MSGLEN 		Address of longword to return the total size of
!			the message that was built.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NML$AB_SNDBUFFER contains the NICE reply message built as described in
!	the message segment block.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	The NICE response message is in NML$AB_SNDBUFFER.
!
!--
 
    BEGIN
 
    MAP
	MSGBLK : REF BBLOCK;
 
    LOCAL
	BUFCNT  : SIGNED,			! Message length counter
	LEN     : BYTE,				! Temporary string length
	IN_PTR,					! Input text pointer
	OUT_PTR;				! Output message pointer
!
! The MSB longword mask determines the message fields that are
! described in the following longwords.  The status code is always
! required.
!
    BUFCNT = 0;					! Initialize buffer count
    OUT_PTR = NML$AB_SNDBUFFER;			! Get output buffer pointer
    CH$WCHAR_A (.MSGBLK [MSB$B_CODE], OUT_PTR); ! Add return code
    BUFCNT = .BUFCNT + 1;			! Increment message count
!
! Check for detail field.
!
    IF .MSGBLK [MSB$V_DET_FLD]
    THEN
	BEGIN
!
! Move the detail word into the message buffer.
!
	(.OUT_PTR)<0,16> = .MSGBLK [MSB$W_DETAIL];
	OUT_PTR = .OUT_PTR + 2;

	END
    ELSE
	BEGIN
!
! No detail field is specified so add a minus one to the message.
!
	(.OUT_PTR)<0,16> = -1;
	OUT_PTR = .OUT_PTR + 2;

	END;
 
    BUFCNT = .BUFCNT + 2;			! Add detail length to count
!
! Check for message field if there is room in the buffer.
!
    IF .BUFCNT LSS NML$K_SNDBFLEN
    THEN
	IF .MSGBLK [MSB$V_MSG_FLD]
	THEN
	    BEGIN

	    IN_PTR = .MSGBLK [MSB$L_TEXT];	! Get message code
!
! If this is not a system message then get the text from the table.
! Otherwise, call a routine to get the text.
!
	    IF NOT .MSGBLK [MSB$V_SYSM_FLD]
	    THEN
		BEGIN

		IN_PTR = .MESSAGE_TABLE [.IN_PTR];! Get message address
		LEN = CH$RCHAR_A (IN_PTR);	  ! Get message length

		END
	    ELSE
		BEGIN

		NML$GETSYSMSG (.IN_PTR,
			       LEN,
			       IN_PTR);		! Get system message text

		END;
!
! If message will not fit in the buffer move the maximum.
!
	    IF (.BUFCNT + .LEN) GTR NML$K_SNDBFLEN
	    THEN
		LEN = NML$K_SNDBFLEN - .BUFCNT - 1;
!
! Move the count and the entire message into the buffer and the length to
! the total.
!
	    CH$WCHAR_A (.LEN, OUT_PTR);
	    OUT_PTR = CH$MOVE (.LEN,
			       .IN_PTR,
			       .OUT_PTR);
	    BUFCNT = .BUFCNT + .LEN + 1;
!
! If a secondary status message is requested, then append a CR/LF and the
! second line of message text to the ASCIC text string in the NICE response.
!
	    IF .MSGBLK [MSB$V_MSG2_FLD]		! If secondary message supplied,
	    THEN
		BEGIN
		LOCAL ASCIC_COUNT;		! Pointer to count byte of string
		ASCIC_COUNT = .OUT_PTR - .LEN - 1;
		NML$GETSYSMSG(.MSGBLK [MSB$L_TEXT2], LEN, IN_PTR);
		OUT_PTR = CH$COPY(2, UPLIT BYTE(13, 10),
				.LEN, .IN_PTR,
				0, NML$K_SNDBFLEN - .BUFCNT - 1, .OUT_PTR);
		BUFCNT = .BUFCNT + .LEN;	! Increment buffer space used
		CH$WCHAR(CH$RCHAR(.ASCIC_COUNT)+.LEN+2,
			.ASCIC_COUNT);		! Increment ASCIC string length
		END;
	    END
	ELSE
	    BEGIN
!
! No message field is present so insert zero length.
!
	    CH$WCHAR_A (0, OUT_PTR);
	    BUFCNT = .BUFCNT + 1;

	    END;
!
! If there is room in the buffer check for the entity field.
!
	IF .BUFCNT LSS NML$K_SNDBFLEN
	THEN
	    IF .MSGBLK [MSB$V_ENTD_FLD]
	    AND (.MSGBLK [MSB$A_ENTITY] NEQA 0)
	    THEN
		BEGIN
!
! Entity field is ASCID string.
!
		BIND
		    ENT_DSC = MSGBLK [MSB$A_ENTITY] : REF DESCRIPTOR;
 
		IN_PTR = .ENT_DSC [DSC$A_POINTER]; ! Get entity pointer
		LEN = .ENT_DSC [DSC$W_LENGTH];	   ! Get length
!
! If message will not fit in the buffer move the maximum.
!
		IF (.BUFCNT + .LEN) GTR NML$K_SNDBFLEN
		THEN
		    LEN = NML$K_SNDBFLEN - .BUFCNT;
!
! Move the count and the entity string into the buffer and add the length to
! the total.
!
		OUT_PTR = CH$MOVE (.LEN,
				   .IN_PTR,
				   .OUT_PTR);
		BUFCNT = .BUFCNT + .LEN;

		END;
!
! If there is room in the buffer check for the data field.
!
	IF .BUFCNT LSS NML$K_SNDBFLEN
	THEN
	    IF .MSGBLK [MSB$V_DATA_FLD]
	    AND (.MSGBLK [MSB$A_DATA] NEQA 0)
	    THEN
		BEGIN
!
! Data field is ASCID string.
!
		BIND
		    DATADSC = MSGBLK [MSB$A_DATA] : REF DESCRIPTOR;
 
		IN_PTR = .DATADSC [DSC$A_POINTER]; ! Get data pointer
		LEN = .DATADSC [DSC$W_LENGTH];	   ! Get length
!
! If message will not fit in the buffer move the maximum.
!
		IF (.BUFCNT + .LEN) LEQ NML$K_SNDBFLEN
		THEN
		    BEGIN
!
! Move the data string into the buffer and add length to total.
!
		    OUT_PTR = CH$MOVE (.LEN,
				       .IN_PTR,
				       .OUT_PTR);
		    BUFCNT = .BUFCNT + .LEN;

		    END;
		END;
 
    .MSGLEN = .BUFCNT;				! Return total message size

    RETURN NML$_STS_SUC				! Return success

    END;					! End of NML$BLD_REPLY
 

%SBTTL 'NML$ADDMSGPRM  Add data to NICE response message'
GLOBAL ROUTINE NML$ADDMSGPRM (BUFDSC, MSGSIZE, DATAID, DATATYPE, FLDSIZE, FLDADR) =
 
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine adds a NICE output parameter to the response message.
!	The data id, data type, and the value are added.
!
! FORMAL PARAMETERS:
!
!	BUFDSC		Address of message buffer descriptor.
!	MSGSIZE		Address of longword containing current (and 
!			resulting message size.
!	DATAID		Parameter code (word value).
!	DATATYPE	Automatic parsing data type (byte value).
!	FLDSIZE		Length of data.
!	FLDADR		Address of data string.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	Parameter and descriptive information is in buffer described by 
!	BUFDSC and the longword count pointed to by MSGSIZE is incremented
!	by the number of bytes moved.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	If the parameter will not fit in the buffer then an error
!	(NML$_STS_SIZ) is returned.  Otherwise, success (NML$_STS_SUC)
!	is returned.
!
! SIDE EFFECTS:
!
!	NONE
!
!--
 
    BEGIN
 
    MAP
	BUFDSC   : REF DESCRIPTOR,
	DATAID   : WORD,
	DATATYPE : BBLOCK [1];
 
    LOCAL
	CNT,			! Total parameter data byte count
	PTR;			! Output message pointer
!
! Data must fit in buffer.
! 
    CNT = .FLDSIZE + 3;
 
    IF .CNT GTRU (.BUFDSC [DSC$W_LENGTH] - ..MSGSIZE)
    THEN
	RETURN NML$_STS_SIZ;
!
! Move parameter code (id) and data type into buffer.
! 
    PTR = .BUFDSC [DSC$A_POINTER] + ..MSGSIZE;
    (.PTR)<0,16> = .DATAID;
    PTR = .PTR + 2;
    CH$WCHAR_A (.DATATYPE [0,0,8,0], PTR);
!
! If parameter value is a counted string then move the count into the buffer
! 
    IF .DATATYPE [NMA$V_PTY_ASC]
    AND NOT .DATATYPE [NMA$V_PTY_COD]
    THEN
	BEGIN

	CH$WCHAR_A (.FLDSIZE, PTR);
	CNT = .CNT + 1;

	END;
!
! Move the parameter value into the buffer.
! 
    CH$MOVE (.FLDSIZE, .FLDADR, .PTR);
    .MSGSIZE = ..MSGSIZE + .CNT;
 
    RETURN NML$_STS_SUC
 
    END;				! End of NML$ADDMSGPRM

%SBTTL 'NML$ADDMSGCOU  Add counter data to NICE response message'
GLOBAL ROUTINE NML$ADDMSGCOU (BUFDSC, MSGSIZE, FLDSIZE, FLDADR) =
 
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine moves the counter parameters into the NICE response 
!	message.  Since NETACP returns the counters already formatted for
!	the NICE message, it is just a matter of moving the string in
!	without a parameter type or length.
!
! FORMAL PARAMETERS:
!
!	BUFDSC		Address of message buffer descriptor.
!	MSGSIZE		Address of longword containing current (and resulting)
!			message length.
!	FLDSIZE		Byte count of counters string.
!	FLDADR		Address of counters string.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	If the counters will not fit in the output message buffer then an 
!	error (NML$_STS_SIZ) is returned.  Otherwise, success (NML$_STS_SUC)
!	is returned.
!
!--
 
BEGIN
 
MAP
	BUFDSC : REF DESCRIPTOR;
 
LOCAL
	CNT,			! Total counter data length
	PTR;			! Output message pointer
!
! Counters string must fit in the buffer.
!
CNT = .FLDSIZE;
 
IF (.CNT + 2) GTRU (.BUFDSC [DSC$W_LENGTH] - ..MSGSIZE)
THEN
	RETURN NML$_STS_SIZ;
!
! Move the counters string.
! 
PTR = .BUFDSC [DSC$A_POINTER] + ..MSGSIZE;
CH$MOVE (.FLDSIZE, .FLDADR, .PTR);
.MSGSIZE = ..MSGSIZE + .CNT;
 
RETURN NML$_STS_SUC
 
END;				! End of NML$ADDMSGCOU

%SBTTL 'NML$GETSYSMSG  Get system message text'
GLOBAL ROUTINE NML$GETSYSMSG (COD, LEN, PTR) : NOVALUE =
 
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine performs a $GETMSG system service to retrieve the
!	system message text for the specified status code.
!
! FORMAL PARAMETERS:
!
!	COD	System error code.
!	LEN	Length of standard system message text.
!	PTR	Address of text.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	The system message text is contained in MSGBUF.  The information
!	in MSGBUF must be copied before a subsequent call to this routine.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--
 
    BEGIN

    OWN
	MSGBUF : BBLOCK [255];		! Buffer for system message text
					!  (Must be OWN because the text
					!   has to stay around after the
					!   return from this routine.)

    LOCAL
	BUFDSC : DESCRIPTOR,		! System message buffer descriptor
	RESLEN : WORD;			! Length of text

    .LEN = 0;

    BUFDSC [DSC$W_LENGTH] = 255;	! Initialize buffer descriptor
    BUFDSC [DSC$A_POINTER] = MSGBUF;
!
! Retrieve the system message text for the specified error code.
!
    $GETMSG (MSGID  = .COD,
	     MSGLEN = RESLEN,
	     BUFADR = BUFDSC);
!
! Set up return values.
!
    .LEN = .RESLEN;
    .PTR = MSGBUF;

    END;					! End of NML$GETSYSMSG

%SBTTL 'NML$ERROR_1  Signal a single byte status message'
GLOBAL ROUTINE NML$ERROR_1 (ERR) : NOVALUE =
 
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine moves an error or status code into the output buffer
!	and sends the message with length of one byte.
!
! FORMAL PARAMETERS:
!
!	ERR		NICE status code to be transmitted (NMA$C_STS_xxx).
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	An error message is signalled to be send by the condition handler.
!
!--
 
    BEGIN

    (NML$AB_SNDBUFFER)<0,8> = .ERR;	! Move status code into buffer

    $SIGNAL_MSG (NML$AB_SNDBUFFER, 1);	! Signal status message

    END;				! End of NML$ERROR_1

%SBTTL 'NML$ERROR_2  Signal an error message with detail field'
GLOBAL ROUTINE NML$ERROR_2 (ERR, DET) : NOVALUE =
 
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine moves an error or status code into the output buffer
!	followed by the detail word.
!
! FORMAL PARAMETERS:
!
!	ERR 		NICE status code to be transmitted (NMA$C_STS_xxx).
!	DET		NICE error detail code.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	An error message is signalled to be sent by the condition handler.
!
!--
 
    BEGIN
!
! Move the error code and the detail code into the buffer.
! 
    (NML$AB_SNDBUFFER)<0,8> = .ERR;
    (NML$AB_SNDBUFFER + 1)<0,16> = .DET;
!
! Signal the message.
!
    $SIGNAL_MSG (NML$AB_SNDBUFFER, 3);

    END;				! End of NML$ERROR_2

%SBTTL 'NML$DEBUG_TXT  Print text message'
GLOBAL ROUTINE NML$DEBUG_TXT (BITNUM, TXTDSC) : NOVALUE =
 
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine prints the specified message text to SYS$OUTPUT if
!	the appropriate logging flags are set.
!
! FORMAL PARAMETERS:
!
!	BITNUM		Bit number of the logging flag.
!	TXTDSC		Descriptor of ASCII text string.
!
! IMPLICIT INPUTS:
!
!	NML$GL_LOGMASK	Values of current logging flags.
!
!--
 
BEGIN

MAP
    TXTDSC : REF DESCRIPTOR;

LITERAL
    FAOSIZE = 132;

LOCAL
    FAOPRM,
    OUTDSC : VECTOR [2],
    FAOBUF : BBLOCK [FAOSIZE];

!
! If the correct logging flag is set then output the text string.
!
IF .NML$GL_LOGMASK [.BITNUM]
THEN
    BEGIN
    FAOPRM  = .TXTDSC;
    OUTDSC [0] = FAOSIZE;
    OUTDSC [1] = FAOBUF;
    $FAOL (CTRSTR = $ASCID ('!/*** !AS'),
	   OUTLEN = OUTDSC [0],
	   OUTBUF = OUTDSC,
	   PRMLST = FAOPRM);
    LIB$PUT_OUTPUT (OUTDSC);
    END;

END;				! End of NML$DEBUG_TXT

%SBTTL 'NML$DEBUG_MSG  Print binary message'
GLOBAL ROUTINE NML$DEBUG_MSG (BITNUM, BUFFER_ADR,
				BUFFER_LEN, TXTDSC) : NOVALUE =
 
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine dumps binary messages to SYS$OUTPUT.
!
! FORMAL PARAMETERS:
!
!	BITNUM		Number of the logging flag bit.
!	BUFFER_ADR	Address of the message buffer.
!	BUFFER_LEN	Length of the message in bytes.
!	TXTDSC		Descriptor of text string.
!
! IMPLICIT INPUTS:
!
!	NML$GL_LOGMASK	Values of current logging flags.
!
!--
 
BEGIN
 
MAP
	TXTDSC : REF DESCRIPTOR;

LITERAL
	FAOSIZ = 256;			! The print buffer

LOCAL
	FAOBUF  : VECTOR [FAOSIZ, BYTE],! Print buffer
	FAOLST  : VECTOR [7],		! List of args to $FAOL
	OUTDSC  : VECTOR [2],		! Descriptor of the output line
	BYTES,				! Counter for bytes written
	PTR:	REF BBLOCK;

!
! If the correct logging flag is not set then just return.
!
IF NOT .NML$GL_LOGMASK [.BITNUM] THEN
	RETURN;
!
! If the string length is nonzero then print it.
!
IF .TXTDSC NEQA 0 THEN
	BEGIN

	OUTDSC [0] = FAOSIZ;
	OUTDSC [1] = FAOBUF;

	FAOLST [0] = .TXTDSC [DSC$W_LENGTH];
	FAOLST [1] = .TXTDSC [DSC$A_POINTER];
	FAOLST [2] = .BUFFER_LEN;

	$FAOL (CTRSTR = $ASCID ('!/ !AD  (length = !UL bytes)!/'),
	       OUTLEN = OUTDSC [0],
	       OUTBUF = OUTDSC,
	       PRMLST = FAOLST);

	LIB$PUT_OUTPUT (OUTDSC);

	END;
!
! Dumping permanent data base records requires BYPASS privilege because the
! passwords are displayed.
!
IF (.BITNUM EQL DBG$C_FILEIO)
    AND (NOT .NML$GQ_PROPRVMSK [PRV$V_BYPASS]) THEN
	RETURN;

!
! Dump the buffer contents in hex and ASCII.
!
OUTDSC [1] = FAOBUF;
PTR = .BUFFER_ADR;
WHILE .PTR LSS (.BUFFER_ADR + .BUFFER_LEN) DO
	BEGIN
	OUTDSC [0] = FAOSIZ;
	FAOLST [0] = .PTR [12,0,32,0];
	FAOLST [1] = .PTR [8,0,32,0];
	FAOLST [2] = .PTR [4,0,32,0];
	FAOLST [3] = .PTR [0,0,32,0];
	FAOLST [4] = 16;
	FAOLST [5] = .PTR;
	$FAOL	(CTRSTR = $ASCID ('!XL !XL !XL !XL !_!AF'),
		OUTLEN = OUTDSC [0],
		OUTBUF = OUTDSC,
		PRMLST = FAOLST);
	LIB$PUT_OUTPUT (OUTDSC);
	PTR = .PTR + 16;
	END;
!
! Add a new line.
!
$FAOL	(CTRSTR = $ASCID ('!/'),
	OUTLEN = OUTDSC [0],
	OUTBUF = OUTDSC);
LIB$PUT_OUTPUT (OUTDSC);

END;					! End of NML$DEBUG_MSG

%SBTTL 'NML$DEBUG_QIO  Print NETACP QIO information'
GLOBAL ROUTINE NML$DEBUG_QIO (BITNUM, QIOS, IOSB, P1DSC,
				P2DSC, P3ADR, P4DSC, TXTDSC) : NOVALUE =
 
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine dumps NETACP QIO information to SYS$OUTPUT.
!
! FORMAL PARAMETERS:
!
!	BITNUM		Contains the number of the logging flag bit.
!	QIOS		Status of QIO (R0).
!	IOSB		Address of I/O status block.
!	P1DSC		Address of P1 descriptor.
!	P2DSC		Address of P2 descriptor.
!	P3ADR		Address of P3 word.
!	P4DSC		Address of P4 descriptor.
!	TXTDSC		Descriptor of text string.
!
! IMPLICIT INPUTS:
!
!	NML$GL_LOGMASK	Values of current logging flags.
!
!--
 
BEGIN
 
MAP
	IOSB   : REF $IOSB,
	P1DSC : REF DESCRIPTOR,
	P2DSC  : REF DESCRIPTOR,
	P4DSC  : REF DESCRIPTOR;

BIND
	FAOSTR = $ASCID ('!/R0=!XL IOSB=!XL/!XL NFB=!XW/!XL',
			 '!/P2=!XW/!XL P3=!XL (!XW) P4=!XW/!XL');

LITERAL
	FAOSIZ = 256;			! The print buffer

LOCAL
	FAOBUF : VECTOR [FAOSIZ, BYTE],	! Print buffer
	FAOLST : VECTOR [20],		! List of args to $FAOL
	OUTDSC : VECTOR [2];		! Descriptor of the output line
!
! If the correct logging flag is not enabled then just return.
!
IF NOT .NML$GL_LOGMASK [.BITNUM]
THEN
	RETURN;

!
! Print header message at beginning of QIO information.
!
IF .TXTDSC NEQ 0 THEN
    NML$DEBUG_TXT (.BITNUM, .TXTDSC);

OUTDSC [0] = FAOSIZ;
OUTDSC [1] = FAOBUF;
!
! Log the QIO completion status, IOSB, and the values of the QIO
! parameters.
!
FAOLST [0] = .QIOS;
FAOLST [1] = .IOSB [0,0,32,0];
FAOLST [2] = .IOSB [4,0,32,0];

IF .P1DSC NEQA 0 THEN
    BEGIN
    FAOLST [3] = .P1DSC [DSC$W_LENGTH];
    FAOLST [4] = .P1DSC [DSC$A_POINTER];
    END
ELSE
    BEGIN
    FAOLST [3] = 0;
    FAOLST [4] = 0;
    END;

IF .P2DSC NEQA 0
THEN
	BEGIN

	FAOLST [5] = .P2DSC [DSC$W_LENGTH];
	FAOLST [6] = .P2DSC [DSC$A_POINTER];

	END
ELSE
	BEGIN

	FAOLST [5] = 0;
	FAOLST [6] = 0;

	END;

FAOLST [7] = .P3ADR;
IF .P3ADR NEQA 0
THEN
	FAOLST [8] = .(.P3ADR)<0,16>
ELSE
	FAOLST [8] = 0;

IF .P4DSC NEQA 0
THEN
	BEGIN

	FAOLST [9] = .P4DSC [DSC$W_LENGTH];
	FAOLST [10] = .P4DSC [DSC$A_POINTER];

	END
ELSE
	BEGIN

	FAOLST [9] = 0;
	FAOLST [10] = 0;

	END;

$FAOL (CTRSTR = FAOSTR,
	   OUTLEN = OUTDSC [0],
	   OUTBUF = OUTDSC,
	   PRMLST = FAOLST);
 
LIB$PUT_OUTPUT (OUTDSC);		! Write to SYS$OUTPUT

IF NOT .QIOS
THEN
	NML$GETSYSMSG (.QIOS, OUTDSC [0], OUTDSC [1])
ELSE
	NML$GETSYSMSG (.IOSB [IOS$W_STATUS],
			OUTDSC [0],
			OUTDSC [1]);

LIB$PUT_OUTPUT (OUTDSC);		! Write to SYS$OUTPUT

!
! Dump the contents of the NFB, the P2 (Key) buffer, and the P4 (Value) buffer.
!
NML$DUMP_QIO_BUFS (.BITNUM, .P1DSC, .P2DSC, .P4DSC, .P3ADR);

END;				! End of NML$DEBUG_QIO

 
%SBTTL 'NML$DUMP_QIO_BUFS  Dump QIO buffers'
GLOBAL ROUTINE NML$DUMP_QIO_BUFS (BITNUM, P1DSC, P2DSC, P4DSC, P3ADR) :
						NOVALUE =

BEGIN

LOCAL
	P4LEN;		! Length of P4 buffer

MAP
	P1DSC	: REF DESCRIPTOR,
	P2DSC	: REF DESCRIPTOR,
	P4DSC	: REF DESCRIPTOR;

IF .P1DSC NEQ 0 THEN
    NML$DEBUG_MSG ( .BITNUM,
		    .P1DSC [DSC$A_POINTER],
		    .P1DSC [DSC$W_LENGTH],
		    $ASCID('P1 buffer contents'));

IF .P2DSC NEQ 0
THEN
    NML$DEBUG_MSG ( .BITNUM,
		    .P2DSC [DSC$A_POINTER],
		    .P2DSC [DSC$W_LENGTH],
		    $ASCID ('P2 buffer contents'));

IF .P4DSC NEQ 0
THEN
    BEGIN
    !
    ! Figure out how much of the P4 buffer to dump.  If it's a
    ! show, the byte count was returned in P3.  If it's a set,
    ! the byte count is in the P4 buffer descriptor.
    !
    IF .P3ADR NEQ 0 THEN		
	IF .(.P3ADR)<0,16> GTR NML$K_QIOBFLEN THEN
	    P4LEN = 64
	ELSE
	    P4LEN = .(.P3ADR)<0,16>
    ELSE
	P4LEN = .P4DSC [DSC$W_LENGTH];
    NML$DEBUG_MSG ( .BITNUM,
		    .P4DSC [DSC$A_POINTER],
		    .P4LEN,
		    $ASCID ('P4 buffer contents'));
    END;
END;	! of  NML$DUMP_QIO_BUFS

%SBTTL 'NML$LOGALLPDB  Log contents of permanent data base files'
GLOBAL ROUTINE NML$LOGALLPDB : NOVALUE =
 
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine logs the contents of all permanent data base files
!	according to the setting of the logging bits.
!
!--
 
    BEGIN
 
    OWN
	TAB : VECTOR [NMA$C_OPN_MAX - NMA$C_OPN_MIN + 1]
	      INITIAL (DBG$C_DMPNOD,
		       DBG$C_DMPLIN,
		       DBG$C_DMPLOG,
		       DBG$C_DMPOBJ,
		       DBG$C_DMPCIR,
		       DBG$C_DMPMOD);

    INCR IDX FROM NMA$C_OPN_MIN TO NMA$C_OPN_MAX DO
	BEGIN

	IF .NML$GL_LOGMASK [.TAB[.IDX]] THEN
		BEGIN
		IF NMA$OPENFILE (.IDX, NMA$C_OPN_AC_RO) THEN
			BEGIN
			NML$FILEDMP (.TAB [.IDX], .IDX);
			NMA$CLOSEFILE (.IDX);
			END;
		END;
	END;

    END;					! End of NML$LOGALLPDB

%SBTTL 'NML$FILEDMP  Dump all the records in the file'
GLOBAL ROUTINE NML$FILEDMP (BITNUM, FID) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!
! FORMAL PARAMETERS:
!
!	BITNUM		Logging flag bit number.
!	FID 		Permanent data base file identification code.
!
! IMPLICIT INPUTS:
!
!	NML$GL_LOGMASK	Values of current logging flags.
!
! IMPLICIT OUTPUTS:
!
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LITERAL
	FAOSIZ = 256;			! The print buffer

    LOCAL
	FAOBUF : VECTOR [FAOSIZ, BYTE],	! Print buffer
	FAOLST : VECTOR [100],		! List of args to $FAOL
	OUTDSC : DESCRIPTOR,		! Descriptor of the output line
	SAVEFLAG,			! Temporary file I/O logging flag
	KEY    : WORD,			! Temporary record key buffer
	RECDSC : DESCRIPTOR;		! Record descriptor
!
! If logging for this file is not enabled then just return.
!
    IF NOT .NML$GL_LOGMASK [.BITNUM]
    THEN
	RETURN;
!
! Output the header.
!
    OUTDSC [DSC$W_LENGTH] = FAOSIZ;
    OUTDSC [DSC$A_POINTER] = FAOBUF;

    NML$APPENDTXT (.FID,
		   $ASCID ('*****************************'),
		   $ASCID ('file dump *****************************'),
		   OUTDSC,
		   OUTDSC [DSC$W_LENGTH]);

    LIB$PUT_OUTPUT (OUTDSC);
!
! Save the value of the file I/O logging flag and set it to enable records
! to be logged.
!
    SAVEFLAG = .NML$GL_LOGMASK [DBG$C_FILEIO];
    NML$GL_LOGMASK [DBG$C_FILEIO] = 1;
!
! Read all records.
!
    KEY = 0;				! Initialize record key
    WHILE NMA$READREC (.FID, KEY, NML$GQ_RECBFDSC, RECDSC) DO
	BEGIN
 
	KEY = .KEY + 1;

	END;
!
! Output the trailer.
!
    OUTDSC [DSC$W_LENGTH] = FAOSIZ;
    OUTDSC [DSC$A_POINTER] = FAOBUF;

    NML$APPENDTXT (.FID,
		   $ASCID ('************************** End of'),
		   $ASCID ('file dump **************************'),
		   OUTDSC,
		   OUTDSC [DSC$W_LENGTH]);

    LIB$PUT_OUTPUT (OUTDSC);
!
! Restore the setting of the file I/O logging flag.
!
    NML$GL_LOGMASK [DBG$C_FILEIO] = .SAVEFLAG;

    END;					! End of NML$FILEDMP

   
%SBTTL 'NML$LOGFILEOP  Log a file operation'
GLOBAL ROUTINE NML$LOGFILEOP (BITNUM, FILEID, TXTDSC) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine logs file operations such as open and close.
!
! FORMAL PARAMETERS:
!
!	BITNUM		Logging flag bit number.
!	FILEID		Value of the fileid parameter (NMA$C_OPN_xxxx)
!	TXTDSC		Descriptor of message text.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN
    
    LOCAL
	OUTBUF : VECTOR [255, BYTE],
	OUTDSC : DESCRIPTOR;

    OUTDSC [DSC$W_LENGTH] = 255;
    OUTDSC [DSC$A_POINTER] = OUTBUF;

    NML$APPENDTXT (.FILEID, 0, .TXTDSC, OUTDSC, OUTDSC [DSC$W_LENGTH]);

    NML$DEBUG_TXT (.BITNUM,
		   OUTDSC);
    END;

%SBTTL 'NML$LOGRECORDOP  Log a record access operation'
GLOBAL ROUTINE NML$LOGRECORDOP (BITNUM, FILEID, TXTDSC, DATDSC) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine logs record access operations such as read, write,
!	and delete.
!
! FORMAL PARAMETERS:
!
!	BITNUM		Logging flag bit number.
!	FILEID		Value of the fileid parameter (NMA$C_OPN_xxxx).
!	TXTDSC		Descriptor of message text.
!	DATDSC		Descriptor of record data.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN
    
    MAP
	DATDSC : REF DESCRIPTOR;

    LOCAL
	OUTBUF : VECTOR [255, BYTE],
	OUTDSC : DESCRIPTOR;
!
! Initialize output buffer descriptor.
!
    OUTDSC [DSC$W_LENGTH] = 255;
    OUTDSC [DSC$A_POINTER] = OUTBUF;
!
! Append the file type to the message text.
!
    NML$APPENDTXT (.FILEID, 0, .TXTDSC, OUTDSC, OUTDSC [DSC$W_LENGTH]);
!
! Log the data.
!
    NML$DEBUG_MSG (.BITNUM,
		   .DATDSC [DSC$A_POINTER],
		   .DATDSC [DSC$W_LENGTH],
		   OUTDSC);

    END;

%SBTTL 'NML$APPENDTXT  Append file type to string'
GLOBAL ROUTINE NML$APPENDTXT (FILEID, PFXDSC, SFXDSC, OUTDSC, RESLEN) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine appends the file type string to the beginning of a
!	text string.
!
! FORMAL PARAMETERS:
!
!	FILEID		Value of the fileid parameter (NMA$C_OPN_xxxx)
!	PFXDSC		Descriptor of prefix text.
!	SFXDSC		Descriptor of suffix text.
!	OUTDSC		Descriptor of output string buffer.
!	RESLEN		Length of resulting appended string.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN
    
    MAP
	PFXDSC : REF DESCRIPTOR,
	SFXDSC : REF DESCRIPTOR,
	OUTDSC : REF DESCRIPTOR;

    LOCAL
	CTLDSC : REF DESCRIPTOR,
	FAOLST : VECTOR [6],
	IDX,
	TYPDSC : REF DESCRIPTOR;
!
! Select file type string.
!
    CASE .FILEID FROM NMA$C_OPN_MIN TO NMA$C_OPN_MAX OF
	SET
	[NMA$C_OPN_NODE]:
	    TYPDSC = $ASCID ('Node');
	[NMA$C_OPN_LINE]:
	    TYPDSC = $ASCID ('Line');
	[NMA$C_OPN_LOG]:
	    TYPDSC = $ASCID ('Logging');
	[NMA$C_OPN_OBJ]:
	    TYPDSC = $ASCID ('Object');
	[NMA$C_OPN_CIR]:
	    TYPDSC = $ASCID ('Circuit');
	[NMA$C_OPN_MOD]:
	    TYPDSC = $ASCID ('Module');
	[INRANGE,
	 OUTRANGE]:
	    TYPDSC = $ASCID ('Unknown');
	TES;
!
! Set up FAO parameters.
!
    IDX = 0;

    IF .PFXDSC NEQA 0
    THEN
	BEGIN

	FAOLST [0] = .PFXDSC [DSC$W_LENGTH];
	FAOLST [1] = .PFXDSC [DSC$A_POINTER];
	IDX = 2;

	END;

    FAOLST [.IDX] = .TYPDSC [DSC$W_LENGTH];
    FAOLST [.IDX + 1] = .TYPDSC [DSC$A_POINTER];
    IDX = .IDX + 2;

    IF .SFXDSC NEQA 0
    THEN
	BEGIN

	FAOLST [.IDX] = .SFXDSC [DSC$W_LENGTH];
	FAOLST [.IDX + 1] = .SFXDSC [DSC$A_POINTER];
	IDX = .IDX + 2;

	END;

    IF .IDX GTR 4
    THEN
	CTLDSC = $ASCID ('!AD !AD !AD')
    ELSE
	CTLDSC = $ASCID ('!AD !AD');
!
! Append the name to the beginning of the text string.
!
    $FAOL (CTRSTR = .CTLDSC,
	   OUTLEN = .RESLEN,
	   OUTBUF = .OUTDSC,
	   PRMLST = FAOLST);
 
    END;

%SBTTL 'NML$TRNLOGNUM  Translate numeric logical name'
GLOBAL ROUTINE NML$TRNLOGNUM (LNMDSC, RESADR) =
 
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine translates a logical name and returns the numeric
!	representation of the ASCII hexadecimal number that results.
!
! FORMAL PARAMETERS:
!
!	LNMDSC		Descriptor of the logical name to be translated.
!	RESADR		Address of longword to contain the numeric value.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Returns error code if the logical name has no translation or the
!	translation is invalid.  The result longword will be set to zero.
!
! SIDE EFFECTS:
!
!	NONE
!
!--
 
    BEGIN
 
    MAP
	LNMDSC : DESCRIPTOR;

    OWN
	ASCNUM : VECTOR [8, BYTE];

    LOCAL
	ASCLEN : WORD,
	STATUS;
 
    STATUS = $TRNLOG (LOGNAM = .LNMDSC,
		      RSLLEN = ASCLEN,
		      RSLBUF = UPLIT (8, ASCNUM));

    IF .STATUS EQL SS$_NORMAL
    THEN
	STATUS = LIB$CVT_HTB (.ASCLEN, ASCNUM, .RESADR);

    RETURN .STATUS
 
    END;					! End of NML$TRNLOGNUM
 

END						! End of module
 
ELUDOM
 
