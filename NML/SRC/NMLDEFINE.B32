%TITLE 'NML DEFINE permanent parameter module'
MODULE NML$DEFINE (
		LANGUAGE (BLISS32),
		ADDRESSING_MODE (NONEXTERNAL=LONG_RELATIVE),
		ADDRESSING_MODE (EXTERNAL=LONG_RELATIVE),
		IDENT = 'V03-000'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  DECnet-VAX Network Management Listener
!
! ABSTRACT:
!
!	This module contains routines to handle the NCP DEFINE command.
!
! ENVIRONMENT:  VAX/VMS Operating System
!
! AUTHOR:  Distributed Systems Software Engineering
!
! CREATION DATE:  30-DEC-1979
!
! MODIFIED BY:
!
!	V03-003	MKP0003		Kathy Perko	16-Nov-1981
!		Undo the previous fix.  It's wrong.
!
!	V03-002	MKP0002		Kathy Perko	17-Sept-1981
!		Fix NML$SAVEVENTS so that a status of NML$_STS_PMS
!		is returned if there are no events.
!
!	V03-001	MKP0001		Kathy Perko	23-July-1981
!		Add circuit entity and multidrop lines
!--


%SBTTL 'Declarations'

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    NML$DEFINEKNOWN	: NOVALUE,
    NML_DEFKNOWN	: NOVALUE,
    NML$DEFLOGGING	: NOVALUE,
    NML$DEFENTITY	: NOVALUE,
    NML_DEFENTITY	: NOVALUE,
    NML_DEFLOGGING	: NOVALUE,
    NML$ADDEVENTS,
    NML$SAVEVENTS,
    NML$GETRECOWNER;

!
! INCLUDE FILES:
!

LIBRARY 'LIB$:NMLLIB.L32';
LIBRARY 'SHRLIB$:NMALIBRY.L32';
LIBRARY 'SYS$LIBRARY:STARLET.L32';

!
! EQUATED SYMBOLS:
!

LITERAL
    NML$K_ENTBUFLEN = 32;		! Length of entity buffer
!
! Data base entity matching function codes.
!
LITERAL
    NML$C_ALWAYS  = 0,			! Always match
    NML$C_MATCH   = 1,			! Match if parameter is present
    NML$C_NOMATCH = 2;			! Match if parameter is not present

!
! OWN STORAGE:
!

!
! Entity buffer and descriptor.
!
OWN
    NML$T_ENTBUFFER : BBLOCK [NML$K_ENTBUFLEN],
    NML$Q_ENTBFDSC  : DESCRIPTOR;

!
! EXTERNAL REFERENCES:
!

$NML_EXTDEF;

EXTERNAL LITERAL
    NML$_BADEVTUPD,
    NML$_INTEVTOVF,
    NML$_RECADDED,
    NML$_NORECOWN;

EXTERNAL ROUTINE
    NMA$INSERTFLD,
    NML$MATCHRECORD,
    NML$READRECORD,
    NMA$SEARCHFLD,
    NML$ADD_FIELDS,
    NML$ADDFILTERS,
    NML$BLD_REPLY,
    NML$ERROR_1,
    NML$OPENFILE,
    NML$WRITERECORD,
    NML$SEND;


%SBTTL 'NML$DEFINEKNOWN  Define parameters for known entities'
GLOBAL ROUTINE NML$DEFINEKNOWN (ENT, DUM1, DUM2) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine removes the a set of parameters from the permanent
!	data base entry for each entity of the specified type.
!
! FORMAL PARAMETERS:
!
!	ENT		Entity type code.
!	DUM1		Not used.
!	DUM2		Not used.
!
! IMPLICIT INPUTS:
!
!	NML$GL_PRS_FLGS Message parsing flags.
!
! SIDE EFFECTS:
!
!	Signals errors.
!
!--

    BEGIN

    LOCAL
	FID,				! File id code
	FLG,
	PRM;

    FID = .NML$AB_ENTITYDATA [.ENT, EIT$B_FILEID];
    FLG = NML$C_ALWAYS;

    SELECTONEU .FID OF
	SET

	[NMA$C_OPN_NODE]:
	    BEGIN

	    PRM = NMA$C_PCNO_NLI;

	    IF .NML$GL_PRS_FLGS [NML$V_PRS_LOOPG]
	    THEN
		FLG = NML$C_MATCH
	    ELSE
		FLG = NML$C_NOMATCH;

	    NML_DEFKNOWN (.FID, .ENT, .FLG, .PRM);

	    END;

	[NMA$C_OPN_LOG]:
	    BEGIN
!
! Add logging parameters only for sinks that currently exist.
!
	    LOCAL
	        KEY    : WORD,
	        RECDSC : DESCRIPTOR;

	    INCR SNK FROM NMA$C_SNK_CON TO NMA$C_SNK_MON DO
		BEGIN

		IF .NML$GL_PRS_FLGS [NML$V_PRS_ESIPG]
		THEN
		    BEGIN

		    KEY = 0;
		    IF NML$MATCHRECORD (.FID,
					NML$GQ_RECBFDSC,
					KEY,
					NML$C_KEY_SINK,
					1,
					SNK,
					RECDSC)
		    THEN
			NML$DEFLOGGING (.ENT, .SNK, 0);
		    END
		ELSE
		    NML$DEFLOGGING (.ENT, .SNK, 0);

		END;
	    END;

	[OTHERWISE]:
	    BEGIN

	    NML_DEFKNOWN (.FID, .ENT, .FLG, .PRM);

	    END;
	TES;

    END;				! End of NML$DEFINEKNOWN


%SBTTL 'NML_DEFKNOWN  Define parameters for known entities'
ROUTINE NML_DEFKNOWN (FID, ENT, FLG, PRM) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine adds parameters to the permanent data base entry for
!	each entity of the specified type.
!
! FORMAL PARAMETERS:
!
!	FID		File id code.
!	ENT		Entity type code.
!	FLG		Qualifier flag (match, nomatch, always).
!	PRM		Parameter code (if applicable).
!
! SIDE EFFECTS:
!
!	Signals errors.
!
!--

    BEGIN

    LOCAL
	FLDADR,
	FLDSIZE,
	MSGSIZE,			! Message size
	KEY     : WORD,			! Temporary record key buffer
	RECDSC  : DESCRIPTOR,		! Record descriptor
	STATUS;
!
! Add parameters to every record in the file.
!
    KEY = 0;
    WHILE NML$READRECORD (.FID, KEY, NML$GQ_RECBFDSC, RECDSC) DO
	BEGIN

	STATUS = TRUE;
	FLDADR = 0;
	FLDSIZE = 0;

	SELECTONEU .FLG OF
	    SET
	    [NML$C_MATCH]:

		IF NOT NMA$SEARCHFLD (RECDSC, .PRM, FLDSIZE, FLDADR)
		THEN
		    STATUS = FALSE;

	    [NML$C_NOMATCH]:

		IF NMA$SEARCHFLD (RECDSC, .PRM, FLDSIZE, FLDADR)
		THEN
		    STATUS = FALSE;

	    TES;

	IF .STATUS
	THEN
	    BEGIN

	    NML$AB_MSGBLOCK [MSB$L_FLAGS] = 0; ! Initialize message flags

	    NML_DEFENTITY (.ENT, RECDSC, KEY);
!
! Build and send the response message.
!
	    NML$BLD_REPLY (NML$AB_MSGBLOCK, MSGSIZE);
	    NML$SEND (NML$AB_SNDBUFFER, .MSGSIZE);

	    END;

	KEY = .KEY + 1;			! Increment record key

	END;
    END;				! End of NML_DEFKNOWN


%SBTTL 'NML$DEFENTITY  Define entity parameters'
GLOBAL ROUTINE NML$DEFENTITY (ENT, LEN, ADR) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Add parameters to the permanent data base entry for the specified
!	entity.
!
! FORMAL PARAMETERS:
!
!	ENT		Entity type code.
!	LEN		Byte count of entity id string.
!	ADR		Address of entity id string.
!
! IMPLICIT INPUTS:
!
!	NML$GL_PRS_FLGS Message parsing flags.
!
!--

    BEGIN

    LOCAL
	FID,				! File id code
	FLDADR,
	FLDSIZE,
	LOOP,
	MSGSIZE,			! Message size
	KEY     : WORD,			! Temporary record key buffer
	OWNER,				! Search key
	RECDSC  : DESCRIPTOR,		! Record descriptor
	STATUS;

    NML$AB_MSGBLOCK [MSB$L_FLAGS] = 0;	! Initialize message flags
!
! Add parameters to every record in the file.
!
    FID = .NML$AB_ENTITYDATA [.ENT, EIT$B_FILEID]; ! Get file id
    OWNER = .NML$AB_ENTITYDATA [.ENT, EIT$W_KEY];  ! Get search key

    KEY = 0;					   ! Initialize record key
    STATUS = NML$MATCHRECORD (.FID,
			      NML$GQ_RECBFDSC,
			      KEY,
			      .OWNER,
			      .LEN,
			      .ADR,
			      RECDSC);
    IF .STATUS
    THEN
	BEGIN

	IF .FID EQLU NMA$C_OPN_NODE
	THEN
	    BEGIN

	    FLDSIZE = 0;
	    FLDADR = 0;
	    LOOP = NMA$SEARCHFLD (RECDSC,
				  NMA$C_PCNO_NLI,
				  FLDSIZE,
				  FLDADR);
!
! If this is not a loop node but the parameter group is for loop nodes
! then return a parameter not applicable error for the line parameter.
! (This assumes that the line parameter is the only one applicable to
! loop nodes.)
!
	    IF NOT .LOOP AND .NML$GL_PRS_FLGS [NML$V_PRS_LOOPG]
	    THEN
		BEGIN

		NML$AB_MSGBLOCK [MSB$L_FLAGS]  = MSB$M_DET_FLD;
		NML$AB_MSGBLOCK [MSB$B_CODE]   = NMA$C_STS_PNA;
		NML$AB_MSGBLOCK [MSB$W_DETAIL] = NMA$C_PCNO_NLI;
		STATUS = NML$_STS_PNA;

		END;
!
! If the node is a loop node but the parameter group is not for loop nodes
! then return an unrecgnized component error.  (There must be something
! better!)
!
	    IF .LOOP AND NOT .NML$GL_PRS_FLGS [NML$V_PRS_LOOPG]
	    THEN
		BEGIN

		NML$AB_MSGBLOCK [MSB$L_FLAGS]  = MSB$M_DET_FLD;
		NML$AB_MSGBLOCK [MSB$B_CODE]   = NMA$C_STS_CMP;
		NML$AB_MSGBLOCK [MSB$W_DETAIL] = NMA$C_ENT_NOD;
		STATUS = NML$_STS_CMP;

		END;
	    END;
	END
    ELSE
	BEGIN
!
! Initialize record descriptor and add record owner field to buffer.
!
	RECDSC [DSC$W_LENGTH] = 2;
	RECDSC [DSC$A_POINTER] = .NML$GQ_RECBFDSC [DSC$A_POINTER];
	NMA$INSERTFLD (NML$GQ_RECBFDSC, .OWNER, .LEN, .ADR, RECDSC);
	STATUS = NML$_STS_SUC;

	END;
!
! If everything is alright then add the parameters.
!
    IF .STATUS
    THEN
	NML_DEFENTITY (.ENT, RECDSC, KEY);
!
! Build and send the response message.
!
    NML$BLD_REPLY (NML$AB_MSGBLOCK, MSGSIZE);
    NML$SEND (NML$AB_SNDBUFFER, .MSGSIZE);

    END;				! End of NML$DEFENTITY

%SBTTL 'NML$DEFLOGGING  Define logging parameters'
GLOBAL ROUTINE NML$DEFLOGGING (ENT, SNK, DUM2) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Add parameters to the permanent data base entry for the specified
!	logging entity.
!
! FORMAL PARAMETERS:
!
!	ENT		Entity type code.
!	SNK		Logging sink type.
!	DUM2		Not used.
!
! IMPLICIT INPUTS:
!
!	NML$GL_PRS_FLGS Message parsing flags.
!	NML$GW_EVTSNKADR Sink node address.
!
!--

    BEGIN

    LOCAL
	FID,				! File id code
	MSGSIZE,			! Message size
	KEY     : WORD,			! Temporary record key buffer
	OWNER,				! Search key
	RECDSC  : DESCRIPTOR;		! Record descriptor

!
! Decide if the parameter group is for filters (EFI) or sinks (ESI).
!
    IF .NML$GL_PRS_FLGS [NML$V_PRS_ESIPG]
    THEN
	BEGIN

	NML$DEFENTITY (NML$C_SINK, 1, SNK);
	RETURN

	END;

    NML$AB_MSGBLOCK [MSB$L_FLAGS] = 0;		   ! Initialize message flags
    FID = .NML$AB_ENTITYDATA [NML$C_LOGGING, EIT$B_FILEID]; ! Get file id
    OWNER = .NML$AB_ENTITYDATA [NML$C_LOGGING, EIT$W_KEY];  ! Get search key

    KEY = 0;					   ! Initialize record key
    IF NOT NML$MATCHRECORD (.FID,
			    NML$GQ_RECBFDSC,
			    KEY,
			    .OWNER,
			    2,
			    NML$GW_EVTSNKADR,
			    RECDSC)
    THEN
	BEGIN
!
! Entry not found so create a new one by adding the record owner field.
!
	RECDSC [DSC$W_LENGTH] = 2;	! Initial descriptor
	RECDSC [DSC$A_POINTER] = .NML$GQ_RECBFDSC [DSC$A_POINTER];

	NMA$INSERTFLD (NML$GQ_RECBFDSC, .OWNER, 2, NML$GW_EVTSNKADR, RECDSC);

	NML$AB_MSGBLOCK [MSB$L_FLAGS] = MSB$M_MSG_FLD;
	NML$AB_MSGBLOCK [MSB$L_TEXT] = NML$_RECADDED;

	END;

    NML_DEFLOGGING (.SNK, .NML$GW_EVTSNKADR, RECDSC, KEY);
!
! Add entity id (sink type code) to entity buffer.
!
    NML$Q_ENTBFDSC [DSC$W_LENGTH] = 1;
    NML$Q_ENTBFDSC [DSC$A_POINTER] = NML$T_ENTBUFFER;
    NML$T_ENTBUFFER<0,8> = .SNK;
!
! Set up message information.
!
    NML$AB_MSGBLOCK [MSB$V_ENTD_FLD] = 1; ! Set entity descriptor flag
    NML$AB_MSGBLOCK [MSB$A_ENTITY] =
				NML$Q_ENTBFDSC; ! Add entity descriptor pointer
!
! Build and send the response message.
!
    NML$BLD_REPLY (NML$AB_MSGBLOCK, MSGSIZE);
    NML$SEND (NML$AB_SNDBUFFER, .MSGSIZE);

    END;				! End of NML$DEFLOGGING

%SBTTL 'NML_DEFENTITY  Define entity parameters'
ROUTINE NML_DEFENTITY (ENT, RECDSC, KEY) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine performs common DEFINE functions for both singular
!	and plural requests.
!
! FORMAL PARAMETERS:
!
!	ENT		Entity type code.
!	RECDSC		Address of current record descriptor.
!	KEY		Address of word containing current record key.
!
!--

    BEGIN

    MAP
	RECDSC : REF DESCRIPTOR;	! Record descriptor

    LOCAL
	FID,				! File id code
	FLDSIZE,
	FLDADR,
	STATUS;

    FID = .NML$AB_ENTITYDATA [.ENT, EIT$B_FILEID]; ! Get file id
!
! Add new parameter fields.
!
    IF NML$ADD_FIELDS (NML$GQ_RECBFDSC, .RECDSC)
    THEN
	BEGIN
!
! Node must have either address or line parameter specified.
! (It could also be the executor node.)
!
	STATUS = NML$_STS_SUC;

	IF .FID EQLU NMA$C_OPN_NODE
	THEN
	    BEGIN

	    FLDADR = 0;
	    IF NOT (NMA$SEARCHFLD (	.RECDSC,
					NMA$C_PCNO_NLI,
					FLDSIZE,
					FLDADR)
	    	    OR NMA$SEARCHFLD (	.RECDSC,
					NMA$C_PCNO_ADD,
					FLDSIZE,
					FLDADR)
		    OR NMA$SEARCHFLD (	.RECDSC,
					NML$C_KEY_EXE,
					FLDSIZE,
					FLDADR))
	    THEN
		BEGIN

		NML$AB_MSGBLOCK [MSB$L_FLAGS]  = MSB$M_DET_FLD;
		NML$AB_MSGBLOCK [MSB$B_CODE]   = NMA$C_STS_PMS;
		NML$AB_MSGBLOCK [MSB$W_DETAIL] = NMA$C_PCNO_ADD;
		STATUS = NML$_STS_PMS;

		END;
	    END;
!
! Fields added, write the record back to file.
!
	IF .STATUS
	THEN
	    BEGIN

	    NML$WRITERECORD (.FID, .KEY, .RECDSC);
	    NML$AB_MSGBLOCK [MSB$B_CODE] = NMA$C_STS_SUC;

	    END;
	END;
!
! Build response message.
!
    NML$Q_ENTBFDSC [DSC$W_LENGTH] = NML$K_ENTBUFLEN; ! Initialize entity descriptor
    NML$Q_ENTBFDSC [DSC$A_POINTER] = NML$T_ENTBUFFER;

    NML$GETRECOWNER (.RECDSC,
		     .ENT,
		     NML$Q_ENTBFDSC,
		     NML$Q_ENTBFDSC [DSC$W_LENGTH]);

    NML$AB_MSGBLOCK [MSB$V_ENTD_FLD] = 1; ! Set entity descriptor flag
    NML$AB_MSGBLOCK [MSB$A_ENTITY] = NML$Q_ENTBFDSC; ! Add entity descriptor pointer

    END;					! End of NML_DEFENTITY

%SBTTL 'NML_DEFLOGGING  Define entity parameters'
ROUTINE NML_DEFLOGGING (SNK, SNKADR, RECDSC, KEY) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine performs common DEFINE functions for both singular
!	and plural requests.
!
! FORMAL PARAMETERS:
!
!	SNK		Logging sink type.
!	SNKADR		Sink node address.
!	RECDSC		Address of current record descriptor.
!	KEY		Address of word containing current record key.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	SNKADR : WORD,
	RECDSC : REF DESCRIPTOR;

    LOCAL
	FID,				! File id code
	FLDSIZE,
	FLDADR,
	STATUS,
	UPDFLG;

    FID = .NML$AB_ENTITYDATA [NML$C_LOGGING, EIT$B_FILEID]; ! Get file id
!
! Add event to record.
!
    STATUS = NML$ADDEVENTS (TRUE, .RECDSC, .SNK, .SNKADR, UPDFLG);

    IF NOT .STATUS
    THEN
	RETURN;

    IF NOT .UPDFLG
    THEN
	BEGIN

	NML$AB_MSGBLOCK [MSB$L_FLAGS] = MSB$M_MSG_FLD;
	NML$AB_MSGBLOCK [MSB$B_CODE]  = NMA$C_STS_MPR;
	NML$AB_MSGBLOCK [MSB$L_TEXT]  = NML$_BADEVTUPD;
	RETURN

	END;
!
! If event field was added successfully, then write the record back to file.
!
    NML$WRITERECORD (.FID, .KEY, .RECDSC);
    NML$AB_MSGBLOCK [MSB$B_CODE] = NMA$C_STS_SUC;

    END;				! End of NML_DEFLOGGING

%SBTTL 'NML$ADDEVENTS  Add events to the volatile data base'
GLOBAL ROUTINE NML$ADDEVENTS (FCT, RECDSC, SNK, SNKADR, UPDFLG) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine adds the filters specified in the SET command
!	to the volatile data base entry for the specified sink node
!	and sink type.  If an entry does not exist then a new one
!	is created.
!
! FORMAL PARAMETERS:
!
!	FCT		Function code. (TRUE=>set, FALSE=>clear).
!	RECDSC		Descriptor of temporary data base record
!			containing event filters to be added.
!	SNK		Logging sink type.
!	SNKADR		Sink node address.
!	UPDFLG		Address of longword update flag.  (TRUE=>add,
!			FALSE=>delete).
!
! IMPLICIT INPUTS:
!
!	NML$GB_EVTSRCTYP Event source type code.
!	NML$GQ_EVTSRCDSC Descriptor of event source id string.
!	NML$GQ_EVTMSKDSC Descriptor of event filter mask.
!	NML$GW_EVTCLASS	Event class code.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	RECDSC : REF DESCRIPTOR,
	SNKADR : WORD;

    OWN
	EVTBUF : VECTOR [NML$K_RECBFLEN, BYTE];
    BIND
	EVTDSC = UPLIT (NML$K_RECBFLEN, EVTBUF) : DESCRIPTOR;

    LOCAL
	FLDADR,
	FLDSIZE,
	PRMDSC : DESCRIPTOR,
	STATUS;
!
! Get the event field from the record.  If one does not exist then create
! a new one.
!
    FLDADR = 0;
    STATUS = NMA$SEARCHFLD (.RECDSC,
			    NMA$C_PCLO_EVE,
			    FLDSIZE,
			    FLDADR);
    IF .STATUS
    THEN
	BEGIN

	CH$MOVE (.FLDSIZE, .FLDADR, .EVTDSC [DSC$A_POINTER]);
	PRMDSC [DSC$W_LENGTH] = .FLDSIZE;
	PRMDSC [DSC$A_POINTER] = .EVTDSC [DSC$A_POINTER];

	END
    ELSE
	BEGIN

	PRMDSC [DSC$W_LENGTH] = 0;
	PRMDSC [DSC$A_POINTER] = .EVTDSC [DSC$A_POINTER];

	END;
!
! Add the filters to those found in the temporary data base record.
!
    STATUS = NML$ADDFILTERS (.FCT,
			     EVTDSC,
			     .SNK,
			     .NML$GB_EVTSRCTYP,
			     NML$GQ_EVTSRCDSC,
			     .NML$GW_EVTCLASS,
			     .NML$GQ_EVTMSKDSC [DSC$W_LENGTH],
			     .NML$GQ_EVTMSKDSC [DSC$A_POINTER],
			     PRMDSC);

    IF NOT .STATUS
    THEN
	BEGIN

	NML$AB_MSGBLOCK [MSB$L_FLAGS] = MSB$M_MSG_FLD;
	NML$AB_MSGBLOCK [MSB$B_CODE]  = NMA$C_STS_MPR;
	NML$AB_MSGBLOCK [MSB$L_TEXT]  = NML$_BADEVTUPD;
	RETURN .STATUS;

	END;
!
! If the filters were successfully added then replace the temporary
! data base entry with the modified one.
!
    STATUS = NML$SAVEVENTS (NML$GQ_RECBFDSC,
			    .PRMDSC [DSC$W_LENGTH],
			    .PRMDSC [DSC$A_POINTER],
			    .RECDSC);
    IF NOT .STATUS
    THEN
	RETURN .STATUS;
!
! If there are still filters remaining then indicate that they should be 
! replaced in the data base.
!
    IF .PRMDSC [DSC$W_LENGTH] NEQ 0
    THEN
	.UPDFLG = TRUE
    ELSE
	.UPDFLG = FALSE;

    RETURN NML$_STS_SUC

    END;				! End of NML$ADDEVENTS

%SBTTL 'NML$SAVEVENTS  Save events'
GLOBAL ROUTINE NML$SAVEVENTS (BUFDSC, LEN, ADR, RTNDSC) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine stores events in a structure resembling a permanent 
!	data base record.  It is used for both volatile and permanent
!	event filter modifications.
!
! FORMAL PARAMETERS:
!
!	BUFDSC		Descriptor of buffer.
!	LEN		Length of events parameter.
!	ADR		Address of events parameter string.
!	RTNDSC		Descriptor of resulting data.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	BUFDSC : REF DESCRIPTOR,
	RTNDSC : REF DESCRIPTOR;

    LOCAL
	STATUS;

    STATUS = NMA$INSERTFLD (.BUFDSC,
			    NMA$C_PCLO_EVE,
			    .LEN,
			    .ADR,
			    .RTNDSC);
    IF NOT .STATUS
    THEN
	BEGIN

	NML$AB_MSGBLOCK [MSB$L_FLAGS] = MSB$M_MSG_FLD;
	NML$AB_MSGBLOCK [MSB$B_CODE]  = NMA$C_STS_MPR;
	NML$AB_MSGBLOCK [MSB$L_TEXT]  = NML$_INTEVTOVF;

	END;

    RETURN .STATUS

    END;				! End of NML$SAVEVENTS

%SBTTL 'NML$GETRECOWNER  Get record owner string'
GLOBAL ROUTINE NML$GETRECOWNER (RECDSC, ENT, BUFDSC, RESLEN) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine returns the entity id string based on information supplied
!	by the current permanent data base record.
!
! FORMAL PARAMETERS:
!
!	RECDSC		Address of the record descriptor.
!	ENT		Entity type code.
!	BUFDSC 		Address of owner string buffer descriptor.
!	RESLEN 		Address of the resulting string length.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	The buffer descriptor pointed to by BUFDSC describes the record
!	owner string.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	If no owner field is present for the record then an error
!	indicating invalid file contents (NML$_STS_FCO) is returned
!	otherwise success (NML$_STS_SUC) is returned.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	RECDSC : REF DESCRIPTOR,	! Descriptor of record data
	BUFDSC : REF DESCRIPTOR;	! Descriptor of entity buffer

    LOCAL
	CODE     : WORD,		! Entity id parameter code
	FLDSIZE,			! Temporary record owner string length
	FLDADR,				! Temporary record owner string pointer
	PTR,				! Output string pointer
	MSGSIZE;			! Message size

    PTR = .BUFDSC [DSC$A_POINTER];
!
! Get entity information.
!
    CODE = .NML$AB_ENTITYDATA [.ENT, EIT$W_KEY]; ! Search key

    SELECTONEU .ENT OF
	SET

	[NML$C_NODE,
	 NML$C_NODEBYNAME,
	 NML$C_EXECUTOR]:
	    BEGIN

	    FLDADR = 0;			! Search all fields
	    IF NMA$SEARCHFLD (.RECDSC,
			      NMA$C_PCNO_ADD,
			      FLDSIZE,
			      FLDADR)
	    THEN
		PTR = CH$MOVE (2, .FLDADR, .PTR)
	    ELSE
		BEGIN

		(.PTR)<0,16> = 0;	! Zero node address
		PTR = .PTR + 2;		! Advance pointer

		END;

	    CODE = NMA$C_PCNO_NNA;	! Look for name

	    END;

	[NML$C_LOOPNODE]:
	    BEGIN

	    CODE = NMA$C_PCNO_NNA;	! Look for name
	    (.PTR)<0,16> = 0;		! Loop node address is zero
	    PTR = .PTR + 2;		! Advance pointer

	    END;
	TES;

    FLDADR = 0;				! Search all fields

    IF NMA$SEARCHFLD (.RECDSC, .CODE, FLDSIZE, FLDADR)
    THEN
	BEGIN

	SELECTONEU .ENT OF
	    SET

	    [NML$C_LINE,
	     NML$C_CIRCUIT,
	     NML$C_OBJECT]:

		CH$WCHAR_A (.FLDSIZE, PTR); ! Add count

	    [NML$C_NODE,
	     NML$C_NODEBYNAME,
	     NML$C_LOOPNODE]:

		CH$WCHAR_A (.FLDSIZE, PTR);

	    [NML$C_EXECUTOR]:

		CH$WCHAR_A (.FLDSIZE OR NMA$M_ENT_EXE, PTR);

	    TES;

	IF .BUFDSC [DSC$W_LENGTH] GEQU
		(.FLDSIZE + (.PTR - .BUFDSC [DSC$A_POINTER]))
	THEN
	    PTR = CH$MOVE (.FLDSIZE, .FLDADR, .PTR);

	END
    ELSE
	SELECTONEU .ENT OF
	    SET

	    [NML$C_NODE,
	     NML$C_NODEBYNAME]:

		CH$WCHAR_A (0, PTR);

	    [NML$C_EXECUTOR]:

		CH$WCHAR_A (NMA$M_ENT_EXE, PTR);

	    [OTHERWISE] :
		BEGIN

		NML$AB_MSGBLOCK [MSB$L_FLAGS] =
		    MSB$M_DET_FLD OR MSB$M_MSG_FLD; ! Set message flags
		NML$AB_MSGBLOCK [MSB$B_CODE] = NMA$C_STS_FCO;
		NML$AB_MSGBLOCK [MSB$W_DETAIL] = NMA$C_FOPDTL_PDB;
		NML$AB_MSGBLOCK [MSB$L_TEXT] = NML$_NORECOWN;
		NML$BLD_REPLY (NML$AB_MSGBLOCK, MSGSIZE); ! Build message
		$SIGNAL_MSG (NML$AB_SNDBUFFER, .MSGSIZE); ! Signal it

		END;
	    TES;

    .RESLEN = .PTR - .BUFDSC [DSC$A_POINTER];

    RETURN NML$_STS_SUC

    END;				! End of NML$GETRECOWNER

END					! End of module

ELUDOM
