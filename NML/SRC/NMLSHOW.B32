%TITLE 'NML SHOW parameter module'
MODULE NML$SHOW (
		LANGUAGE (BLISS32),
		ADDRESSING_MODE (EXTERNAL=LONG_RELATIVE),
		ADDRESSING_MODE (NONEXTERNAL=LONG_RELATIVE),
		IDENT = 'V03-000'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  DECnet-VAX Network Management Listener
!
! ABSTRACT:
!
!    These routines return volatile data base information in response to
!    an NCP SHOW command message.
!
! ENVIRONMENT:  VAX/VMS Operating System
!
! AUTHOR:  Distributed Systems Software Engineering
!
! CREATION DATE:  30-DEC-1979
!
! MODIFIED BY:
!
!	V03-004	MKP0004		Kathy Perko	2-Jan_1982
!		Fix SHOW LINKS WITH NODE so that, if the node
!		address is greater than 255, the show will work.
!
!	V03-003 MKP0003		Kathy Perko	21-Oct-1981
!		Make NML$GETDATA and NML$PROCESSDATA global
!		routines so compatibility module can use them.
!
!	V03-002	MKP0002		Kathy Perko	8-Sept-1981
!		Fix SHOW EXECUTOR COUNTER
!
!	V03-001	MKP0001		Kathy Perko	22-July-1981
!		Add circuit entity and multidrop lines.
!--


%SBTTL 'Declarations'

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    NML$SHOWKNOWN	: NOVALUE,
    NML$SHOW_KNOWN_NODES: NOVALUE,
    NML$SHOW_KNOWN_LOOP : NOVALUE,
    NML$SHOKNOOBJ	: NOVALUE,
    NML$SHOW_PLURAL_LINKS : NOVALUE,
    NML$SHOWACTIVE	: NOVALUE,
    NML$SHOACTNODES	: NOVALUE,
    NML$SHOWNODE	: NOVALUE,
    NML$SHOWNODEBYNAME	: NOVALUE,
    NML$SHOWLOOPNODE	: NOVALUE,
    NML$SHOWEXECUTOR	: NOVALUE,
    NML$SHOWOBJECT	: NOVALUE,
    NML$SHOWENTITY	: NOVALUE,
    NML$GETACTIVELIST,
    NML$GETKNOWNLIST,
    NML$GETDATA,
    NML$PROCESSDATA	: NOVALUE,
    NML$GETIDSTRING	: NOVALUE;

!
! INCLUDE FILES:
!

LIBRARY 'LIB$:NMLLIB.L32';
LIBRARY 'SHRLIB$:NMALIBRY.L32';
LIBRARY 'SHRLIB$:NET.L32';
LIBRARY 'SYS$LIBRARY:STARLET.L32';

!
! OWN STORAGE:
!

OWN
    NML$T_LISTBUFFER : VECTOR [NML$K_QIOBFLEN, BYTE];
BIND
    NML$Q_LISTBFDSC  = UPLIT (NML$K_QIOBFLEN, NML$T_LISTBUFFER) : DESCRIPTOR;

OWN
    NML$T_P2BUFFER : VECTOR [64];
BIND
    NML$Q_P2BFDSC = UPLIT (64, NML$T_P2BUFFER) : DESCRIPTOR;

OWN
    NML$T_ENTBUFFER : VECTOR [32];
BIND
    NML$Q_ENTBFDSC = UPLIT (32, NML$T_ENTBUFFER) : DESCRIPTOR;

!
! EXTERNAL REFERENCES:
!

$NML_EXTDEF;

EXTERNAL ROUTINE
    NML$BLD_REPLY,
    NML$BLDP2,
    NML$ERROR_1,
    NML$ERROR_2,
    NML$GETEXEADR,
    NML$GETINFTABS,
    NML$GETNODADR,
    NML$GETNODNAM,
    NML$NETQIO,
    NML$SEND,
    NML$SHOWPARLIST;


%SBTTL 'NML$SHOWKNOWN  Show known entity parameters'
GLOBAL ROUTINE NML$SHOWKNOWN (ENTITY, INF, DUM1, DUM2) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine reads the volatile data base entries for all
!	lines.
!
! FORMAL PARAMETERS:
!
!	ENTITY		Entity type code.
!	INF		Information type code.
!	DUM1		Not used.
!	DUM2		Not used.
!
!--

BEGIN

LOCAL
	BUFEND,
	LENGTH,
	MSGSIZE,
	LISDSC : DESCRIPTOR,
	PTR,
	STATUS,
	STRTFLG;

STRTFLG = FALSE;

WHILE NML$GETKNOWNLIST (.ENTITY, .STRTFLG, LISDSC) DO
	BEGIN

	STRTFLG = TRUE;

	BUFEND = .LISDSC [DSC$A_POINTER] + .LISDSC [DSC$W_LENGTH];
	PTR = .LISDSC [DSC$A_POINTER];

	WHILE .PTR LSSA .BUFEND DO
	    BEGIN

	    LENGTH = .(.PTR)<0,16>;
	    PTR = .PTR + 2;

	    NML$SHOWENTITY (.ENTITY, .INF, .LENGTH, .PTR);

	    PTR = .PTR + .LENGTH;	! Advance pointer

	    END;
	END;

END;				! End of NML$SHOWKNOWN

%SBTTL 'NML$SHOW_KNOWN_LOOP Show known loopnode parameters'
GLOBAL ROUTINE NML$SHOW_KNOWN_LOOP (ENT, INF, DUM1, DUM2) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine reads the volatile data base entries for all
!	loop nodes.
!
! FORMAL PARAMETERS:
!
!	ENT		Entity type code.
!	INF		Information type code.
!	DUM1		Not used.
!	DUM2		Not used.
!
!--

    BEGIN

    LOCAL
	BUFEND,
	LENGTH,
	MSGSIZE,
	LISDSC : DESCRIPTOR,
	PTR,
	STATUS,
	STRTFLG;			! SHOW started flag (TRUE = started)

!
! Counters are not supported for loop nodes.
!
IF .INF EQLU NML$C_COUNTERS THEN
	RETURN;
!
! Initialize data base search information.
!
STRTFLG = FALSE;			! Start at the beginning
!
! Process every object entry in the data base.
! (Any errors encountered, other than end of file, will be signalled.)
!
WHILE NML$GETKNOWNLIST (NML$C_LOOPNODE,
			    .STRTFLG,
			    LISDSC) DO
	BEGIN

	STRTFLG = TRUE;			! Don't start at the beginning next 
					!  time

	PTR = .LISDSC [DSC$A_POINTER];
	BUFEND = .LISDSC [DSC$A_POINTER]  + .LISDSC [DSC$W_LENGTH];

	WHILE .PTR LSSA .BUFEND DO
	    BEGIN
!
! Get the name of the obect.
!
	    LENGTH = .(.PTR)<0,16>;
	    PTR = .PTR + 2;
!
! Get the entry for this object from the volatile data base.
!
	    NML$SHOWLOOPNODE (NML$C_LOOPNODE, .INF, .LENGTH, .PTR);
!
! Advance the pointer past the id for this object.
!
	    PTR = .PTR + .LENGTH;	! Advance pointer

	    END;
	END;

END;				! End of NML$SHOW_KNOWN_LOOP

%SBTTL 'NML$SHOKNOOBJ  Show known object parameters'
GLOBAL ROUTINE NML$SHOKNOOBJ (ENT, INF, DUM1, DUM2) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine reads the volatile data base entries for all
!	objects.
!
! FORMAL PARAMETERS:
!
!	ENT		Entity type code.
!	INF		Information type code.
!	DUM1		Not used.
!	DUM2		Not used.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	BUFEND,
	LENGTH,
	MSGSIZE,
	LISDSC : DESCRIPTOR,
	PTR,
	STATUS,
	STRTFLG;			! SHOW started flag (TRUE = started)

!
! Initialize data base search information.
!
    STRTFLG = FALSE;			! Start at the beginning
!
! Process every object entry in the data base.
! (Any errors encountered, other than end of file, will be signalled.)
!
    WHILE NML$GETKNOWNLIST (NML$C_OBJECT,
			    .STRTFLG,
			    LISDSC) DO
	BEGIN

	STRTFLG = TRUE;			! Don't start at the beginning next 
					!  time

	PTR = .LISDSC [DSC$A_POINTER];
	BUFEND = .LISDSC [DSC$A_POINTER]  + .LISDSC [DSC$W_LENGTH];

	WHILE .PTR LSSA .BUFEND DO
	    BEGIN
!
! Get the name of the obect.
!
	    LENGTH = .(.PTR)<0,16>;
	    PTR = .PTR + 2;
!
! Get the entry for this object from the volatile data base.
!
	    NML$SHOWOBJECT (NML$C_OBJECT, .INF, .LENGTH, .PTR);
!
! Advance the pointer past the id for this object.
!
	    PTR = .PTR + .LENGTH;	! Advance pointer

	    END;
	END;

    END;				! End of NML$SHOKNOOBJ

%SBTTL 'NML$SHOW_PLURAL_LINKS  Show plural links parameters'
GLOBAL ROUTINE NML$SHOW_PLURAL_LINKS (ENTITY, INF, DUM1, DUM2) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	For SHOW KNOWN LINKS command, build QIO buffers to get NETACP
!	to return information about all known links on this node.
!	For SHOW KNOWN LINKS WITH NODE <nodeid> command, build QIO
!	buffers to return information about all links to the specified
!	node from this node.
!
!	The QIO is repeated until all links of the specified type have
!	been returned by the ACP.  As each link's information is received,
!	it is formatted into a NICE message and returned to NCP.
!
! FORMAL PARAMETERS:
!
!	ENTITY		Entity type code (always NML$C_LINKS)
!	INF		Read information type code (STATUS, SUMMARY, CHARS)
!	DUM1		Not used.
!	DUM2		Not used.
!
!--

BEGIN

LOCAL
	NFB	: REF BBLOCK,		! Pointer used to build NFB.
	NFBBUF	: BBLOCK [256],		! Buffer in which to build NFB.
	SEARCH_KEY_LEN,
	SEARCH_KEY_VAL,			! Address of search key value.
	NFBDSC	: DESCRIPTOR,		! Pointer to NFB descriptor.
	P2DSC	: DESCRIPTOR,		! P2 buffer descriptor.
	TABDSC	: REF DESCRIPTOR,	! Pointer to Information Table desc.
	LINK_CNT,			! Count of link entities returned by
					!	NETACP.
	DATDSC	: DESCRIPTOR,		! Return P4  buffer descriptor.
	DATPTR,				! P4 buffer pointer.
	MSGDSC	: DESCRIPTOR,		! NICE response message descriptor.
	STATUS;


!
! Get canned NFB and Information Table descriptors for single link show.
! Then modify them to do a plural link show.
!
NFBDSC [DSC$A_POINTER] = NFBBUF;
NML$GETINFTABS (NML$C_LINKS, .INF, NFBDSC, TABDSC, 1);
NFB = NFBBUF;
!
! Set the known bit so NETACP returns multiple links in each buffer.
!
NFB [NFB$B_FLAGS] = NFB$M_KNO OR NFB$M_UPD;
NFB [NFB$L_STRT_KEY] = NFB$C_COLLATE;
IF .NML$GL_PRS_FLGS [NML$V_PRS_STR] THEN
	!
	! The NICE command was SHOW KNOWN LINKS WITH NODE <nodeid>.
	!
	BEGIN
	SEARCH_KEY_LEN = .(.NML$GQ_ENTSTRDSC [DSC$A_POINTER])<0,8>;
	IF .SEARCH_KEY_LEN EQL 0 THEN
		!
		! Set the search key up to be the node address.
		!
		BEGIN
		NFB [NFB$L_SRCH_KEY] = NFB$C_LLI_PNA;
		SEARCH_KEY_VAL = .(.NML$GQ_ENTSTRDSC [DSC$A_POINTER])<8,24>;
		IF .SEARCH_KEY_VAL EQL 0 THEN
			NML$GETEXEADR (SEARCH_KEY_VAL);
		END
	ELSE
		!
		! Set the search key up to be the node name.
		!
		BEGIN
		NFB [NFB$L_SRCH_KEY] = NFB$C_LLI_PNN;
		SEARCH_KEY_VAL = .NML$GQ_ENTSTRDSC [DSC$A_POINTER] + 1;
		END;

	END
ELSE
	!
	! Set up to return all links in this nodes database.
	!
	BEGIN
	NFB [NFB$L_SRCH_KEY] = NFB$C_WILDCARD;
	SEARCH_KEY_LEN = -1;
	SEARCH_KEY_VAL = 0;
	END;
NML$BLDP2 ( .SEARCH_KEY_LEN, .SEARCH_KEY_VAL, -1, 0, NML$Q_P2BFDSC, P2DSC);
STATUS = 1;
WHILE .STATUS DO
	BEGIN
	STATUS = NML$GETDATA (NFBDSC, P2DSC, NML$GQ_QIOBFDSC, DATDSC);
	IF .STATUS NEQ NML$_STS_CMP THEN
		BEGIN
		IF .STATUS THEN
			BEGIN
			DATPTR = .DATDSC [DSC$A_POINTER];
			LINK_CNT = .(.P2DSC [DSC$A_POINTER]);
			WHILE (LINK_CNT = .LINK_CNT - 1) GEQ 0 DO
				!
				! Format the link data into NICE response
				! message.
				!
				BEGIN
				NML$PROCESSDATA (NML$C_LINKS,
						.TABDSC,
						DATDSC,
						DATPTR,
						MSGDSC);
				NML$SEND (.MSGDSC [DSC$A_POINTER],
					  .MSGDSC [DSC$W_LENGTH]);
				END;
			END
		ELSE
			BEGIN
			NML$BLD_REPLY (NML$AB_MSGBLOCK, MSGDSC [DSC$W_LENGTH]);
			MSGDSC [DSC$A_POINTER] = NML$AB_SNDBUFFER;
			NML$SEND (.MSGDSC [DSC$A_POINTER],
				  .MSGDSC [DSC$W_LENGTH]);
			END;
		END;
	END;
END;		! of	NML$SHOW_PLURAL_LINKS	

%SBTTL 'NML$SHOWACTIVE  Show active line parameters'
GLOBAL ROUTINE NML$SHOWACTIVE (ENTITY, INF, DUM1, DUM2) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine reads the volatile data base entries for all
!	lines.
!
! FORMAL PARAMETERS:
!
!	ENTITY		Entity type code.
!	INF		Information type code.
!	DUM1		Not used.
!	DUM2		Not used.
!
!--

BEGIN

LOCAL
	BUFEND,
	LENGTH,
	MSGSIZE,
	LISDSC : DESCRIPTOR,
	PTR,
	STATE : BYTE,
	STATUS,
	STRTADR,
	STRTFLG,
	STRTLEN;

STRTFLG = FALSE;

WHILE NML$GETACTIVELIST (.ENTITY, .STRTFLG, LISDSC) DO
	BEGIN

	STRTFLG = TRUE;

	BUFEND = .LISDSC [DSC$A_POINTER]  + .LISDSC [DSC$W_LENGTH];
	PTR = .LISDSC [DSC$A_POINTER];

	WHILE .PTR LSSA .BUFEND DO
	    BEGIN
!
! Get line or circuit state.
!
	    STATE = .(.PTR)<0,8>;
	    PTR = .PTR + 4;

	    LENGTH = .(.PTR)<0,16>;
	    PTR = .PTR + 2;

	    STRTLEN = .LENGTH;
	    STRTADR = .PTR;
!
! Process line or circuit.
!
	    IF .STATE NEQ NMA$C_STATE_OFF
	    THEN
		NML$SHOWENTITY (.ENTITY, .INF, .LENGTH, .PTR);

	    PTR = .PTR + .LENGTH;	! Advance pointer

	    END;
	END;

END;				! End of NML$SHOWACTIVE

%SBTTL 'NML$SHOACTNODES  Show active node parameters'
GLOBAL ROUTINE NML$SHOACTNODES (ENT, INF, DUM1, DUM2) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine reads the volatile data base entries for all
!	nodes.
!
! FORMAL PARAMETERS:
!
!	ENT		Entity type code.
!	INF		Information type code.
!	DUM1		Not used.
!	DUM2		Not used.
!
!--

BEGIN

LOCAL
	BUFEND,
	MSGSIZE,
	LISDSC : DESCRIPTOR,
	LOOPNODE_FLAG,
	PTR,
	LENGTH,
	STATUS,
	STRTFLG;

!
! Show remote nodes.
!
STRTFLG = FALSE;

WHILE NML$GETACTIVELIST (NML$C_NODE,
			     .STRTFLG,
			     LISDSC) DO
	BEGIN

	IF NOT .STRTFLG THEN
		!
		! Show executor first, and clear flag to build P2 buffer.
		!
		BEGIN
		NML$SHOWEXECUTOR (NML$C_EXECUTOR, .INF, 0, 0);
		STRTFLG = TRUE;
		END
	ELSE
		BEGIN
		PTR = .LISDSC [DSC$A_POINTER];
		BUFEND = .LISDSC [DSC$A_POINTER] +
				.LISDSC [DSC$W_LENGTH];
	
		WHILE .PTR LSSA .BUFEND DO
		    BEGIN

		    LOOPNODE_FLAG = .(.PTR)<0,32>;
		    PTR = .PTR + 4;
		    IF .LOOPNODE_FLAG THEN
			!
			! It's a loopnode.
			!
			BEGIN
			PTR = .PTR + 4;		! Skip node addr (always 0).
			LENGTH = .(.PTR)<0,16>;
			PTR = .PTR + 2;
			NML$SHOWLOOPNODE (NML$C_LOOPNODE,
					  .INF,
					  .LENGTH,
					  .PTR);
			PTR = .PTR + .LENGTH;
			END
		    ELSE
			!
			! It's not a loopnode.  
			!
			BEGIN
			LENGTH = 2;
			IF .(.PTR)<0,16> NEQU 0 THEN
				NML$SHOWNODE (NML$C_NODE, .INF, .LENGTH, .PTR);
	
			PTR = .PTR + 4;		    ! Advance pointer
			PTR = .PTR + .(.PTR)<0,16> + 2; ! Skip over node name

			END;
		    END;
		END;
	END;
END;				! End of NML$SHOACTNODES

%SBTTL 'NML$SHOWNODE  Show volatile node parameters'
GLOBAL ROUTINE NML$SHOWNODE (ENT, INF, LEN, ADR) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine returns information about the single node specified
!	by address.
!
! FORMAL PARAMETERS:
!
!	ENT		Entity type code.
!	INF		Information type code (index).
!	LEN		Length of entity id string.
!	ADR		Address of entity id string.
!
!--

BEGIN

LOCAL
	DATDSC : DESCRIPTOR,		! QIO data descriptor
	DATPTR,				! Pointer into P4 buffer
	MSGDSC : DESCRIPTOR,		! Output message descriptor
	NFBDSC : REF DESCRIPTOR,	! NFB descriptor
	P2DSC  : DESCRIPTOR,		! P2 parameter descriptor
	TABDES : REF DESCRIPTOR;	! Information table descriptor

NML$GETINFTABS (NML$C_NODE, .INF, NFBDSC, TABDES, 0);

NML$BLDP2 (0, .(.ADR)<0,16>, -1, 0, NML$Q_P2BFDSC, P2DSC);

IF NML$GETDATA (.NFBDSC, P2DSC, NML$GQ_QIOBFDSC, DATDSC)
THEN
	BEGIN

	DATPTR = .DATDSC [DSC$A_POINTER];
	NML$PROCESSDATA (NML$C_NODE, .TABDES, DATDSC, DATPTR, MSGDSC);

	END
ELSE
	BEGIN

	NML$BLD_REPLY (NML$AB_MSGBLOCK, MSGDSC [DSC$W_LENGTH]);
	MSGDSC [DSC$A_POINTER] = NML$AB_SNDBUFFER;

	END;

NML$SEND (.MSGDSC [DSC$A_POINTER], .MSGDSC [DSC$W_LENGTH]);

END;				! End of NML$SHOWNODE

%SBTTL 'NML$SHOWNODEBYNAME  Show volatile node parameters'
GLOBAL ROUTINE NML$SHOWNODEBYNAME (ENT, INF, LEN, ADR) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine returns volatile information about the single remote
!	node or loop node specified by name.
!
! FORMAL PARAMETERS:
!
!	ENT		Entity type code.
!	INF		Information type code (index).
!	LEN		Length of entity id string.
!	ADR		Address of entity id string.
!
!--

    BEGIN

    LOCAL
	DATDSC : DESCRIPTOR,		! QIO data descriptor
	DATPTR,				! Pointer into P4 buffer
	ENTCODE,			! Internal entity code
	LOOFLAG,			! Loop node flag
	MSGDSC : DESCRIPTOR,		! Output message descriptor
	NFBDSC : REF DESCRIPTOR,	! NFB descriptor
	P2DSC  : DESCRIPTOR,		! P2 parameter descriptor
	TABDES : REF DESCRIPTOR;	! Information table descriptor

    NML$GETINFTABS (NML$C_NODEBYNAME, .INF, NFBDSC, TABDES, 0);

    NML$BLDP2 (.LEN, .ADR, -1, 0, NML$Q_P2BFDSC, P2DSC);

    IF NML$GETDATA (.NFBDSC, P2DSC, NML$GQ_QIOBFDSC, DATDSC)
    THEN
	BEGIN

	ENTCODE = NML$C_NODEBYNAME;
	DATPTR = .DATDSC [DSC$A_POINTER];
!
! If this is a loop node then get a different table.
!
	LOOFLAG = .(.DATPTR)<0,32>;	! Get loop node flag
	DATPTR = .DATPTR + 4; 		! Advance pointer past it

	IF .LOOFLAG NEQU 0
	THEN
	    BEGIN
	    NML$GETINFTABS (NML$C_LOOPNODE, .INF, NFBDSC, TABDES, 0);
	    ENTCODE = NML$C_LOOPNODE;	! Set entity type to loop node
	    END;

	NML$PROCESSDATA (.ENTCODE, .TABDES, DATDSC, DATPTR, MSGDSC);

	END
    ELSE
	BEGIN

	NML$BLD_REPLY (NML$AB_MSGBLOCK, MSGDSC [DSC$W_LENGTH]);
	MSGDSC [DSC$A_POINTER] = NML$AB_SNDBUFFER;

	END;

    NML$SEND (.MSGDSC [DSC$A_POINTER], .MSGDSC [DSC$W_LENGTH]);

    END;				! End of NML$SHOWNODEBYNAME

%SBTTL 'NML$SHOWLOOPNODE  Show volatile loop node parameters'
GLOBAL ROUTINE NML$SHOWLOOPNODE (ENT, INF, LEN, ADR) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine returns volatile information about the specified
!	loop node.
!
! FORMAL PARAMETERS:
!
!	ENT		Entity type code.
!	INF		Information type code (index).
!	LEN		Length of entity id string.
!	ADR		Address of entity id string.
!
!--

    BEGIN

    LOCAL
	DATDSC : DESCRIPTOR,		! QIO data descriptor
	DATPTR,				! Pointer into P4 buffer
	MSGDSC : DESCRIPTOR,		! Output message descriptor
	NFBDSC : REF DESCRIPTOR,	! NFB descriptor
	P2DSC  : DESCRIPTOR,		! P2 parameter descriptor
	TABDES : REF DESCRIPTOR;	! Information table descriptor

    NML$GETINFTABS (NML$C_LOOPNODE, .INF, NFBDSC, TABDES, 0);

    NML$BLDP2 (.LEN, .ADR, -1, 0, NML$Q_P2BFDSC, P2DSC);

    IF NML$GETDATA (.NFBDSC, P2DSC, NML$GQ_QIOBFDSC, DATDSC)
    THEN
	BEGIN

	DATPTR = .DATDSC [DSC$A_POINTER];
	DATPTR = .DATPTR + 4; 		! Skip over loop node flag

	NML$PROCESSDATA (NML$C_LOOPNODE, .TABDES, DATDSC, DATPTR, MSGDSC);

	END
    ELSE
	BEGIN

	NML$BLD_REPLY (NML$AB_MSGBLOCK, MSGDSC [DSC$W_LENGTH]);
	MSGDSC [DSC$A_POINTER] = NML$AB_SNDBUFFER;

	END;

    NML$SEND (.MSGDSC [DSC$A_POINTER], .MSGDSC [DSC$W_LENGTH]);

    END;				! End of NML$SHOWLOOPNODE

%SBTTL 'NML$SHOWEXECUTOR  Show volatile executor parameters'
GLOBAL ROUTINE NML$SHOWEXECUTOR (ENT, INF, DUM1, DUM2) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine returns volatile information about the executor node.
!
! FORMAL PARAMETERS:
!
!	ENT		Entity type code.
!	INF		Information type code (index).
!	DUM1		Not used.
!	DUM2		Not used.
!
!--

    BEGIN

    LOCAL
	DATDSC : DESCRIPTOR,		! QIO data descriptor
	DATPTR,				! Pointer into P4 buffer
	DUMDSC : REF DESCRIPTOR,	! Dummy descriptor
	MSGDSC : DESCRIPTOR,		! Output message descriptor
	NFBDSC : REF DESCRIPTOR,	! NFB descriptor
	P2DSC  : DESCRIPTOR,		! P2 parameter descriptor
	TABDES : REF DESCRIPTOR;	! Information table descriptor


NML$GETINFTABS (NML$C_EXECUTOR, .INF, NFBDSC, TABDES, 0);
!
! NETACP returns all executor node counters from both the executor (LNI)
! or the remote (NDI) data bases.
!
IF .INF NEQ NML$C_COUNTERS THEN
    BEGIN
    NML$BLDP2 (-1, 0, -1, 0, NML$Q_P2BFDSC, P2DSC);

    IF NOT NML$GETDATA (.NFBDSC, P2DSC, NML$GQ_EXEBFDSC, NML$GQ_EXEDATDSC)
    THEN
	BEGIN

	NML$BLD_REPLY (NML$AB_MSGBLOCK, MSGDSC [DSC$W_LENGTH]);
	NML$SEND (NML$AB_SNDBUFFER, .MSGDSC [DSC$W_LENGTH]);
	RETURN

	END;

    NML$GL_EXEDATPTR = .NML$GQ_EXEDATDSC [DSC$A_POINTER];
    NML$GETINFTABS (NML$C_NODE, .INF, NFBDSC, DUMDSC, 0);
    END;

NML$BLDP2 (0, 0, -1, 0, NML$Q_P2BFDSC, P2DSC);

IF NML$GETDATA (.NFBDSC, P2DSC, NML$GQ_QIOBFDSC, DATDSC)
THEN
    BEGIN

    DATPTR = .DATDSC [DSC$A_POINTER];
    NML$PROCESSDATA (NML$C_EXECUTOR, .TABDES, DATDSC, DATPTR, MSGDSC);

    END
ELSE
    BEGIN

    NML$BLD_REPLY (NML$AB_MSGBLOCK, MSGDSC [DSC$W_LENGTH]);
    MSGDSC [DSC$A_POINTER] = NML$AB_SNDBUFFER;

    END;

NML$SEND (.MSGDSC [DSC$A_POINTER], .MSGDSC [DSC$W_LENGTH]);

END;				! End of NML$SHOWEXECUTOR

%SBTTL 'NML$SHOWOBJECT  Show volatile object parameters'
GLOBAL ROUTINE NML$SHOWOBJECT (ENT, INF, LEN, ADR) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine shows volatile object parameters.
!
! FORMAL PARAMETERS:
!
!	ENT		Entity type code.
!	INF		Information type code (index).
!	LEN		Length of entity id string.
!	ADR		Address of entity id string.
!
!--

    BEGIN

    LOCAL
	DATDSC : DESCRIPTOR,		! QIO data descriptor
	DATPTR,				! Pointer into P4 buffer
	MSGDSC : DESCRIPTOR,		! Output message descriptor
	NFBDSC : REF DESCRIPTOR,	! NFB descriptor
	P2DSC  : DESCRIPTOR,		! P2 parameter descriptor
	TABDES : REF DESCRIPTOR;	! Information table descriptor

    NML$GETINFTABS (NML$C_OBJECT, .INF, NFBDSC, TABDES, 0);

    NML$BLDP2 (.LEN, .ADR, -1, 0, NML$Q_P2BFDSC, P2DSC);

    IF NML$GETDATA (.NFBDSC, P2DSC, NML$GQ_QIOBFDSC, DATDSC)
    THEN
	BEGIN

	DATPTR = .DATDSC [DSC$A_POINTER];
	NML$PROCESSDATA (NML$C_OBJECT, .TABDES, DATDSC, DATPTR, MSGDSC);

	END
    ELSE
	BEGIN

	NML$BLD_REPLY (NML$AB_MSGBLOCK, MSGDSC [DSC$W_LENGTH]);
	MSGDSC [DSC$A_POINTER] = NML$AB_SNDBUFFER;

	END;

    NML$SEND (.MSGDSC [DSC$A_POINTER], .MSGDSC [DSC$W_LENGTH]);

    END;				! End of NML$SHOWOBJECT

%SBTTL 'NML$SHOWENTITY  Show volatile line parameters'
GLOBAL ROUTINE NML$SHOWENTITY (ENTITY, INF, LEN, ADR) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine shows volatile line and circuit parameters.
!
! FORMAL PARAMETERS:
!
!	ENTITY		Entity ID
!	INF		Information type code.
!	LEN		Length of entity id string.
!	ADR		Address of entity id string.
!
!--

BEGIN

LOCAL
	DATDSC : DESCRIPTOR,		! QIO data descriptor
	DATPTR,				! Pointer into P4 buffer
	MSGDSC : DESCRIPTOR,		! Output message descriptor
	NFBDSC : REF DESCRIPTOR,	! NFB descriptor
	P2DSC  : DESCRIPTOR,		! P2 parameter descriptor
	TABDES : REF DESCRIPTOR;	! Information table descriptor

!
! Get NFB, table, and P2 buffer.
!
NML$GETINFTABS (.ENTITY, .INF, NFBDSC, TABDES, 0);
NML$BLDP2 (.LEN, .ADR, -1, 0, NML$Q_P2BFDSC, P2DSC);

IF NML$GETDATA (.NFBDSC, P2DSC, NML$GQ_QIOBFDSC, DATDSC)
THEN
	BEGIN

	DATPTR = .DATDSC [DSC$A_POINTER];
	NML$PROCESSDATA (.ENTITY, .TABDES, DATDSC, DATPTR, MSGDSC);

	END
ELSE
	BEGIN

	NML$BLD_REPLY (NML$AB_MSGBLOCK, MSGDSC [DSC$W_LENGTH]);
	MSGDSC [DSC$A_POINTER] = NML$AB_SNDBUFFER;

	END;

NML$SEND (.MSGDSC [DSC$A_POINTER], .MSGDSC [DSC$W_LENGTH]);

END;				! End of NML$SHOWENTITY

%SBTTL 'NML$SHOW_KNOWN_NODES  Show known node parameters'
GLOBAL ROUTINE NML$SHOW_KNOWN_NODES (ENTITY, INF, DUM1, DUM2) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine reads the volatile data base entries for all
!	nodes.
!
! FORMAL PARAMETERS:
!
!	ENTITY		Entity ID (Entity Table index)
!	INF		Information type code.
!	DUM1		Not used.
!	DUM2		Not used.
!
! SIDE EFFECTS:
!
!	Destroys contents of NML$T_LISTBUFFER.
!
!--

BEGIN

LOCAL
	BUFEND,
	LENGTH,
	MSGSIZE,
	LISDSC : DESCRIPTOR,
	PTR,
	LOOPNODE_FLAG,
	STATUS,
	STRTFLG;

STRTFLG = FALSE;

WHILE NML$GETKNOWNLIST (.ENTITY, .STRTFLG, LISDSC) DO
	BEGIN
	!
	! The first entry in the ACPs node data base is always the
	! executor node.
	!
	IF NOT .STRTFLG THEN
		BEGIN
		NML$SHOWEXECUTOR (NML$C_EXECUTOR, .INF, 0, 0);
		STRTFLG = TRUE;
		END
	ELSE
		BEGIN
		PTR = .LISDSC [DSC$A_POINTER];
		BUFEND = .LISDSC [DSC$A_POINTER] + .LISDSC [DSC$W_LENGTH];

		WHILE .PTR LSSA .BUFEND DO
		    BEGIN

		    LOOPNODE_FLAG = .(.PTR)<0,32>;
		    PTR = .PTR + 4;
		    IF .LOOPNODE_FLAG THEN
			!
			! It's a loopnode.
			!
			BEGIN
			PTR = .PTR + 4;		! Skip node addr (always 0).
			LENGTH = .(.PTR)<0,16>;
			PTR = .PTR + 2;
			NML$SHOWLOOPNODE (NML$C_LOOPNODE,
					  .INF,
					  .LENGTH,
					  .PTR);
			PTR = .PTR + .LENGTH;
			END
		    ELSE
			!
			! It's not a loopnode.  
			!
			BEGIN
			LENGTH = 2;
			IF .(.PTR)<0,16> NEQU 0 THEN
				NML$SHOWNODE (NML$C_NODE, .INF, .LENGTH, .PTR);
	
			PTR = .PTR + 4;		    ! Advance pointer
			PTR = .PTR + .(.PTR)<0,16> + 2; ! Skip over node name

			END;
		    END;
		END;
	END;
END;				! End of NML$SHOW_KNOWN_NODES

%SBTTL 'NML$GETKNOWNLIST  Get known entity list'
GLOBAL ROUTINE NML$GETKNOWNLIST (ENT, SHOW_STARTED, LISDSC) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	On the first call (when SHOW_STARTED is false), this routine
!	sets up the QIO buffers to get the IDs of the entities
!	in the specified ACP database.   On all calls, this routine
!	issues the SHOW QIO to get a buffer of entity IDs.
!
! FORMAL PARAMETERS:
!
!	ENT		Internal entity type code.
!	SHOW_STARTED	FALSE=>start at beginning of ACPs database.
!	LISDSC		Address of longword to get list descriptor
!					address.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	If the descriptor is found for the specified entity then success
!	(NML$_STS_SUC) is returned.  If the end of the data base has been
!	reached then an error is returned (NML$_STS_CMP).  If any other
!	error is encountered then a message is signalled.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

BEGIN

$NFBDSC (CIR_NFBDSC, SHOW, NFB$M_UPD, CRI, 
			NFB$C_WILDCARD, NFB$C_COLLATE, NAM);
$NFBDSC (LIN_NFBDSC, SHOW, NFB$M_UPD, PLI, 
			NFB$C_WILDCARD, NFB$C_COLLATE, NAM);
$NFBDSC (SNK_NFBDSC, SHOW, NFB$M_UPD, ESI,
			NFB$C_WILDCARD, NFB$C_COLLATE, SNK);
$NFBDSC (LOG_NFBDSC, SHOW, NFB$M_UPD, EFI,
			NFB$C_WILDCARD, NFB$C_COLLATE, SIN);
$NFBDSC (OBJ_NFBDSC, SHOW, NFB$M_UPD, OBI,
			NFB$C_WILDCARD, NFB$C_COLLATE, NAM);
$NFBDSC (LOO_NFBDSC, SHOW, NFB$M_UPD, NDI,
			LOO,            NFB$C_COLLATE, NNA);
$NFBDSC (NOD_NFBDSC, SHOW, NFB$M_UPD, NDI,
			NFB$C_WILDCARD, NFB$C_COLLATE, LOO,ADD,NNA);

OWN
	NFBDSC	: REF DESCRIPTOR,
	P2_BUF	: VECTOR [64],
	P2DSC	: DESCRIPTOR;

BIND
	P2_BUF_DSC = UPLIT (64, P2_BUF) : DESCRIPTOR;

LOCAL
	MSGSIZE,
	RESLEN  : WORD,
	STATUS,
	STRTKEY,
	STRTLEN,
	STRTADR,
	SRCHLEN,
	SRCHADR;

!
! If this is the first call on NML$GETKNOWNLIST for the SHOW KNOWN operation,
! set up the start key, if there is one, and build the P2 buffer for the SHOW
! QIO.  The ACP writes a value into the P2 buffer so that, when the next SHOW
! QIO is issued, it knows how far in its database it got on the last call.
! This way a buffer full of entity IDs is returned on each call, and subsquent
! calls return the next batch of entity IDs.  Thus, the P2 buffer only needs
! to be built once for each SHOW KNOWN operation, and is used for multiple
! calls until all entities in the database have been returned.
!
IF NOT .SHOW_STARTED THEN
	BEGIN
	STRTLEN = -1;
	STRTADR = 0;
	SRCHLEN = -1;
	SRCHADR = 0;

	SELECTONEU .ENT OF
		SET

		[NML$C_CIRCUIT]:		! Circuits
			NFBDSC  = CIR_NFBDSC;

		[NML$C_LINE]:			! Lines
			NFBDSC  = LIN_NFBDSC;

		[NML$C_SINK]:			! Logging (sinks)
			NFBDSC  = SNK_NFBDSC;

		[NML$C_LOGGING]:		! Logging (filters)
			NFBDSC  = LOG_NFBDSC;

		[NML$C_LOOPNODE]:		! Loop nodes
			BEGIN
			NFBDSC  = LOO_NFBDSC;
			SRCHLEN = 0;
			SRCHADR = 1;		! Match loop nodes
			END;

		[NML$C_OBJECT]:			! Objects
			NFBDSC  = OBJ_NFBDSC;

		[NML$C_NODE]:			! Remote nodes
			NFBDSC  = NOD_NFBDSC;
		[NML$C_LINKS]:
			;			! Logical links don't use this.
		[OTHERWISE]:
			RETURN NMA$C_STS_MPR;
		TES;
	
	!
	! Build the P2 QIO buffer.
	!
	NML$BLDP2 (	.SRCHLEN, .SRCHADR,
			.STRTLEN, .STRTADR,
			P2_BUF_DSC, P2DSC);
	END;
!
! Get the list of known entities.
!
STATUS = NML$GETDATA (.NFBDSC, P2DSC, NML$Q_LISTBFDSC, .LISDSC);
!
! If the error returned is NML$_STS_CMP then the end of the data base
! has been reached.  If any other error is returned then build the
! appropriate message and signal it.
!
IF NOT .STATUS AND (.STATUS NEQ NML$_STS_CMP)
THEN
	BEGIN
	NML$BLD_REPLY (NML$AB_MSGBLOCK, MSGSIZE);
	$SIGNAL_MSG (NML$AB_SNDBUFFER, .MSGSIZE);
	END;

RETURN .STATUS

END;				! End of NML$GETKNOWNLIST

%SBTTL 'NML$GETACTIVELIST  Get active entity list'
GLOBAL ROUTINE NML$GETACTIVELIST (ENT, SHOW_STARTED, LISDSC) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	On the first call (when SHOW_STARTED is false), this routine
!	sets up the QIO buffers to get the IDs and status of the entities
!	in the specified ACP database.   On all calls, this routine
!	issues the SHOW QIO to get a buffer of entity IDs and their status.
!
! FORMAL PARAMETERS:
!
!	ENT		Internal entity type code.
!	SHOW_STARTED	FALSE=>start at beginning of ACPs database.
!	LISDSC		Address of longword to get list descriptor address.
!
! OUTPUTS:
!	Returns a list of entity IDs and their status.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	If the descriptor is found for the specified entity then success
!	(NML$_STS_SUC) is returned.  If the end of the data base has been
!	reached then an error is returned (NML$_STS_CMP).  If any other
!	error is encountered then a message is signalled.
!
!--

BEGIN

$NFBDSC (CIR_NFBDSC, SHOW, NFB$M_UPD, CRI,
			NFB$C_WILDCARD,NFB$C_COLLATE, STA, NAM);
$NFBDSC (LIN_NFBDSC, SHOW, NFB$M_UPD, PLI,
			NFB$C_WILDCARD,NFB$C_COLLATE, STA, NAM);
$NFBDSC (SNK_NFBDSC, SHOW, NFB$M_UPD, ESI,
			NFB$C_WILDCARD,NFB$C_COLLATE, SNK, STA);
$NFBDSC (LOG_NFBDSC, SHOW, NFB$M_UPD, EFI,
			NFB$C_WILDCARD,NFB$C_COLLATE, SIN);
$NFBDSC (OBJ_NFBDSC, SHOW, NFB$M_UPD, OBI,
			NFB$C_WILDCARD,NFB$C_COLLATE, NAM);
$NFBDSC (LOO_NFBDSC, SHOW, NFB$M_UPD, NDI,
			LOO,           NFB$C_COLLATE, NNA);
$NFBDSC (NOD_NFBDSC, SHOW, NFB$M_UPD, NDI,
			REA,           NFB$C_COLLATE, LOO, ADD, NNA);

OWN
	NFBDSC  : REF DESCRIPTOR,
	P2_BUF	: VECTOR [64],
	P2DSC   : DESCRIPTOR;

BIND
	P2_BUF_DSC = UPLIT (64, P2_BUF) : DESCRIPTOR;

LOCAL
	MSGSIZE,
	RESLEN  : WORD,
	STATUS,
	STRTKEY,
	STRTLEN,
	STRTADR,
	SRCHLEN,
	SRCHADR;

!
! If this is the first call on NML$GETACTIVELIST for the SHOW ACTIVE operation,
! set up the start key, if there is one, and build the P2 buffer for the SHOW
! QIO.  The ACP writes a value into the P2 buffer so that, when the next SHOW
! QIO is issued, it knows how far in its database it got on the last call.
! This way a buffer full of entity IDs is returned on each call, and subsquent
! calls return the next batch of entity IDs.  Thus, the P2 buffer only needs
! to be built once for each SHOW ACTIVE operation, and is used for multiple
! calls until all entities in the database have been returned.
!
IF NOT .SHOW_STARTED THEN
	BEGIN
	STRTLEN = -1;
	STRTADR = 0;
	SRCHLEN = -1;
	SRCHADR = 0;

	SELECTONEU .ENT OF
		SET

		[NML$C_CIRCUIT]:		! Circuits
			NFBDSC  = CIR_NFBDSC;

		[NML$C_LINE]:			! Lines
			NFBDSC  = LIN_NFBDSC;

		[NML$C_SINK]:			! Logging (sinks)
			NFBDSC  = SNK_NFBDSC;

		[NML$C_LOGGING]:		! Logging (filters)
			NFBDSC  = LOG_NFBDSC;

		[NML$C_LOOPNODE]:		! Loop nodes
			NFBDSC  = LOO_NFBDSC;

		[NML$C_OBJECT]:			! Objects
			NFBDSC  = OBJ_NFBDSC;

		[NML$C_NODE]:			! Remote nodes
			BEGIN
			NFBDSC  = NOD_NFBDSC;
			SRCHLEN = 0;
			SRCHADR = 1;		! Start after executor
			END;
		[OTHERWISE]:
			RETURN NMA$C_STS_MPR;
		TES;
	
	!
	! Build the P2 QIO buffer.
	!
	NML$BLDP2 (	.SRCHLEN, .SRCHADR,
			.STRTLEN, .STRTADR,
			P2_BUF_DSC, P2DSC);
	END;
!
! Get the list of active entities.
!
STATUS = NML$GETDATA (.NFBDSC, P2DSC, NML$Q_LISTBFDSC, .LISDSC);
!
! If the error returned is NML$_STS_CMP then the end of the data base
! has been reached.  If any other error is returned then build the
! appropriate message and signal it.
!
IF NOT .STATUS AND (.STATUS NEQ NML$_STS_CMP)
THEN
	BEGIN
	NML$BLD_REPLY (NML$AB_MSGBLOCK, MSGSIZE);
	$SIGNAL_MSG (NML$AB_SNDBUFFER, .MSGSIZE);
	END;

RETURN .STATUS
END;				! End of NML$GETACTIVELIST

%SBTTL 'NML$GETDATA  Get volatile entity data'
GLOBAL ROUTINE NML$GETDATA (NFBDSC, P2DSC, QBFDSC, DATDSC) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine reads volatile entity data for the specified NFB and
!	P2 parameters.
!
! FORMAL PARAMETERS:
!
!	NFBDSC		Address of NFB descriptor.
!	P2DSC		Address of P2 descriptor.
!	QBFDSC		Address of QIO buffer descriptor.
!	DATDSC		Address of descriptor for data to be read.
!
!--

    BEGIN

    MAP
	NFBDSC : REF DESCRIPTOR,
	P2DSC  : REF DESCRIPTOR,
	QBFDSC : REF DESCRIPTOR,
	DATDSC : REF DESCRIPTOR;

    LOCAL
	STATUS;

    DATDSC [DSC$A_POINTER] = .QBFDSC [DSC$A_POINTER];

    STATUS = NML$NETQIO (.NFBDSC,
			 .P2DSC,
			 DATDSC [DSC$W_LENGTH],
			 .QBFDSC);

    RETURN .STATUS

    END;				! End of NML$GETDATA

%SBTTL 'NML$PROCESSDATA   Add data to output message'
GLOBAL ROUTINE NML$PROCESSDATA (ENT, TABDES, DATDSC, DATPTR, MSGDSC) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine adds data to the output message using the information
!	table and the input data buffer.
!
! FORMAL PARAMETERS:
!
!	ENT		Internal entity id code.
!	TABDES		Address of information table descriptor.
!	DATDSC		Address of data buffer descriptor.
!	DATPTR		Address of data buffer pointer.
!	MSGDSC		Address of descriptor to describe output message.
!
!--

    BEGIN

    MAP
	TABDES : REF DESCRIPTOR,
	DATDSC : REF DESCRIPTOR,
	MSGDSC : REF DESCRIPTOR;

    LOCAL
	MSGSIZE,			! Output message length
	STRDSC : DESCRIPTOR;		! Entity id string descriptor

    NML$GETIDSTRING (.ENT, .DATPTR, STRDSC); ! Get entity id

    NML$AB_MSGBLOCK [MSB$L_FLAGS] = MSB$M_ENTD_FLD;
    NML$AB_MSGBLOCK [MSB$B_CODE] = NMA$C_STS_SUC;
    NML$AB_MSGBLOCK [MSB$A_ENTITY] = STRDSC;

    NML$BLD_REPLY (NML$AB_MSGBLOCK, MSGSIZE);

    NML$SHOWPARLIST (NML$GQ_SNDBFDSC,
		     MSGSIZE,
		     .TABDES,
		     .DATDSC,
		     .DATPTR);

    MSGDSC [DSC$W_LENGTH] = .MSGSIZE;
    MSGDSC [DSC$A_POINTER] = .NML$GQ_SNDBFDSC [DSC$A_POINTER];

    END;				! End of NML$PROCESSDATA

%SBTTL 'NML$GETIDSTRING   Get entity id string'
GLOBAL ROUTINE NML$GETIDSTRING (ENT, DATPTR, STRDSC) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine builds the entity id string and descriptor for
!	the output message.  It gets the entity ID from a buffer
!	returned by NETACP.
!
! FORMAL PARAMETERS:
!
!	ENT		Internal entity id code.
!	DATPTR		Address of data buffer pointer.
!	STRDSC		Address of descriptor for output id string.
!
!--

BEGIN

MAP
	STRDSC : REF DESCRIPTOR;

LOCAL
	LEN,
	PTR;

STRDSC [DSC$A_POINTER] = .NML$Q_ENTBFDSC [DSC$A_POINTER];
PTR = .STRDSC [DSC$A_POINTER];

SELECTONEU .ENT OF
	SET

	[NML$C_CIRCUIT,
	NML$C_LINE,
	NML$C_OBJECT]:
	    BEGIN

	    LEN = CH$RCHAR_A (.DATPTR);
	    CH$RCHAR_A (.DATPTR);

	    NML$GQ_ENTSTRDSC [DSC$W_LENGTH] = .LEN;	! Save name descriptor
	    NML$GQ_ENTSTRDSC [DSC$A_POINTER] = ..DATPTR;!    for show routines.

	    CH$WCHAR_A (.LEN, PTR);
	    PTR = CH$MOVE (.LEN, ..DATPTR, .PTR);

	    .DATPTR = ..DATPTR + .LEN;

	    END;

	[NML$C_LOGGING, NML$C_SINK]:
	    ;

	[NML$C_EXECUTOR]:
	    BEGIN

	    PTR = CH$MOVE (2, ..DATPTR, .PTR); ! Move address
	    .DATPTR = ..DATPTR + 4;

	    LEN = .(..DATPTR)<0,16>;	! Move name
	    .DATPTR = ..DATPTR + 2;
	    CH$WCHAR_A (.LEN OR NMA$M_ENT_EXE, PTR);
	    PTR = CH$MOVE (.LEN, ..DATPTR, .PTR);

	    .DATPTR = ..DATPTR + .LEN;

	    END;

	[NML$C_LOOPNODE]:
	    BEGIN

	    .DATPTR = ..DATPTR + 4;	! Skip address (always 0)

	    CH$WCHAR_A (0, PTR);	! Move 0 address
	    CH$WCHAR_A (0, PTR);

	    LEN = .(..DATPTR)<0,16>;	! Move name
	    .DATPTR = ..DATPTR + 2;
	    CH$WCHAR_A (.LEN, PTR);
	    PTR = CH$MOVE (.LEN, ..DATPTR, .PTR);

	    .DATPTR = ..DATPTR + .LEN;

	    END;

	[NML$C_LINKS]:
	    BEGIN
	    CH$WCHAR_A (0,PTR);
	    PTR = CH$MOVE (2, ..DATPTR, .PTR);		! Move link number.
	    .DATPTR = ..DATPTR + 4;
	    END;

	[OTHERWISE]:
	    BEGIN

	    PTR = CH$MOVE (2, ..DATPTR, .PTR); ! Move address
	    .DATPTR = ..DATPTR + 4;

	    LEN = .(..DATPTR)<0,16>;	! Move name
	    .DATPTR = ..DATPTR + 2;
	    CH$WCHAR_A (.LEN, PTR);
	    PTR = CH$MOVE (.LEN, ..DATPTR, .PTR);

	    .DATPTR = ..DATPTR + .LEN;

	    END;

	TES;

STRDSC [DSC$W_LENGTH] = .PTR - .STRDSC [DSC$A_POINTER];

END;				! End of NML$GETIDSTRING

END					! End of module

ELUDOM
