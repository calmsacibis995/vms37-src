%TITLE 'NML Logging data base operations module'
MODULE NML$LOGOPS (
		LANGUAGE (BLISS32),
		ADDRESSING_MODE (EXTERNAL=LONG_RELATIVE),
		ADDRESSING_MODE (NONEXTERNAL=LONG_RELATIVE),
		IDENT = 'V03-000'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  DECnet-VAX V2.0 Network Management Listener
!
! ABSTRACT:
!
!	These routines handle all logging data base operations.
!
! ENVIRONMENT:  VAX/VMS Operating System
!
! AUTHOR:  Distributed Systems Software Engineering
!
! CREATION DATE:  26-JUN-1980
!
! MODIFIED BY:
!	V03-001	MKP0001		Kathy Perko	16-Nov-1981
!		Add circuit entity as a logging source type.
!
!--


%SBTTL 'Declarations'

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    NML$ADDFILTERS,
    NML_MODFIL,
    NML_MODCLS,
    NML_MODKNO,
    NML$GETSPCFILTERS,
    NML$GETCOMFILTERS,
    NML$GETGBLFILTERS,
    NML$CLEANEVT	: NOVALUE,
    NML$CLEANSRC	: NOVALUE,
    NML$MATCHSRC,
    NML$GETNXTSNK,
    NML$GETNXTSRC,
    NML$MATCHEVT,
    NML$GETNXTEVT,
    NML$BLDSRC		: NOVALUE,
    NML$BLDEVT		: NOVALUE,
    NML$ADDSRC,
    NML$REPSRC,
    NML$REMSRC		: NOVALUE,
    NML$ADDEVT,
    NML$MODEVT		: NOVALUE,
    NML$REMEVT		: NOVALUE;

!
! INCLUDE FILES:
!

LIBRARY 'LIB$:NMLLIB.L32';
LIBRARY 'SHRLIB$:NMALIBRY.L32';
LIBRARY 'SYS$LIBRARY:STARLET.L32';

!
! OWN STORAGE:
!

OWN
    NML$T_EVTBUFFER : BBLOCK [EVT$K_LENGTH],
    NML$T_SRCBUFFER : BBLOCK [NML$K_RECBFLEN];
BIND
    NML$Q_EVTBFDSC = UPLIT (EVT$K_LENGTH, NML$T_EVTBUFFER) : DESCRIPTOR,
    NML$Q_SRCBFDSC = UPLIT (NML$K_RECBFLEN, NML$T_SRCBUFFER) : DESCRIPTOR;

!
! EXTERNAL REFERENCES:
!

$NML_EXTDEF;

EXTERNAL LITERAL
    NML$GK_EVENTS;

EXTERNAL
    NML$AB_EVENTS : BBLOCKVECTOR [0, ETB$K_ENTRYLEN];

EXTERNAL ROUTINE
    NML$ERROR_2;


%SBTTL 'NML$ADDFILTERS  Add event filters for sink node'
GLOBAL ROUTINE NML$ADDFILTERS
    (FCT, BUFDSC, SNK, SRC, ENTDSC, CLASS, MSKLEN, MSKPTR, RESDSC) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine adds event filters to the data base entry for a sink 
!	node.
!
! FORMAL PARAMETERS:
!
!	FCT		Function code. (0=CLEAR/PURGE, 1=SET/DEFINE)
!	BUFDSC		Descriptor of buffer to contain modified data base
!			entry.
!	SNK		Logging sink type code.
!	SRC		Event source type code.
!	ENTDSC		Event source id string descriptor.
!	CLASS		Event class code.
!	MSKLEN		Length of filter mask.
!	MSKPTR		Address of filter mask.
!	RESDSC		Descriptor of data in buffer.
!
! IMPLICIT INPUTS:
!
!	NML$GB_EVTMSKTYP
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	TRUE is returned if operation is successful.  Otherwise, FALSE
!	is returned.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	BUFDSC : REF DESCRIPTOR,
	ENTDSC : REF DESCRIPTOR,
	RESDSC : REF DESCRIPTOR;

    LOCAL
	SRCPTR : REF BBLOCK,		! Pointer to source block
	STATUS;				! Routine status code

    STATUS = TRUE;			! Initialize return status
!
! Get the source block.
!
    IF NML$MATCHSRC (.RESDSC, .SNK, .SRC, .ENTDSC, SRCPTR)
    THEN
	BEGIN

	CH$MOVE (.SRCPTR [SRC$W_LENGTH],
		 .SRCPTR,
		 NML$T_SRCBUFFER);
	NML$REMSRC (.RESDSC, .SRCPTR);
	SRCPTR = NML$T_SRCBUFFER;

	END
    ELSE
	BEGIN

	NML$BLDSRC (NML$Q_SRCBFDSC, .SNK, .SRC, .ENTDSC);
	SRCPTR = .NML$Q_SRCBFDSC [DSC$A_POINTER];

	END;
!
! Add the events to the source block.
!
    SELECTONEU .NML$GB_EVTMSKTYP OF
	SET

	[2]:				! All events in class

	    NML_MODCLS (.FCT, NML$Q_SRCBFDSC, .SRCPTR, .CLASS, .SRC);

	[3]:				! Known events

	    NML_MODKNO (.FCT, NML$Q_SRCBFDSC, .SRCPTR, .SRC);

	[OTHERWISE]:			! Add specified events to class

	    NML_MODFIL (.FCT,
			FALSE,
			NML$Q_SRCBFDSC,
			.SRCPTR,
			.CLASS,
			.MSKLEN,
			.MSKPTR);

	TES;
!
! Add the source block to the data base entry.
!
    IF NOT NML$ADDSRC (.BUFDSC, .RESDSC, .SRCPTR)
    THEN
	STATUS = FALSE;
!
! Clean up the sink node filters.
!
    NML$CLEANEVT (.SNK, .RESDSC);
    NML$CLEANSRC (.BUFDSC, .SNK, .RESDSC);

    RETURN .STATUS

    END;				! End of NML$ADDFILTERS

%SBTTL 'NML_MODFIL  Modify event filters'
ROUTINE NML_MODFIL (FCT, ZER, BUFDSC, SRCPTR, CLASS, MSKLEN, MSKPTR) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine adds event filters to the data base entry for a sink 
!	node.
!
! FORMAL PARAMETERS:
!
!	FCT		Function code. (0=CLEAR/PURGE, 1=SET/DEFINE).
!	ZER		Zero mask flag. (TRUE=yes, FALSE=no).
!	BUFDSC		Descriptor of buffer to contain modified data base
!			entry.
!	SRCPTR		Pointer to source block in buffer.
!	CLASS		Event class code.
!	MSKLEN		Length of filter mask.
!	MSKPTR		Address of filter mask.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	TRUE is returned if operation is successful.  Otherwise, FALSE
!	is returned.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	BUFDSC : REF DESCRIPTOR,
	SRCPTR : REF BBLOCK;

    LOCAL
	EVTPTR,				! Pointer to event block
	STATUS;				! Routine status code

    STATUS = TRUE;			! Initialize return status
!
! Get the event block.
!
    IF NML$MATCHEVT (.SRCPTR,
		     .CLASS,
		     EVTPTR)
    THEN
	BEGIN

	NML$MODEVT (.FCT, .ZER, .EVTPTR, .MSKLEN, .MSKPTR);

	END
    ELSE
	BEGIN

	NML$BLDEVT (.FCT, .CLASS, .MSKLEN, .MSKPTR, NML$T_EVTBUFFER);
	EVTPTR = NML$T_EVTBUFFER;
!
! Add the event block to the source block.
!
	IF NOT NML$ADDEVT (.BUFDSC, .SRCPTR, .EVTPTR)
	THEN
	    STATUS = FALSE;

	END;

    RETURN .STATUS

    END;				! End of NML_MODFIL

%SBTTL 'NML_MODCLS  Modify class filters'
ROUTINE NML_MODCLS (FCT, BUFDSC, SRCPTR, CLASS, SRC) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine adds event filters to the data base entry for a sink 
!	node.
!
! FORMAL PARAMETERS:
!
!	FCT		Function code. (0=CLEAR/PURGE, 1=SET/DEFINE)
!	BUFDSC		Descriptor of buffer to contain modified data base
!			entry.
!	SRCPTR		Pointer to source block in buffer.
!	CLASS		Event class code.
!	SRC		Source type code.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	TRUE is returned if operation is successful.  Otherwise, FALSE
!	is returned.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	BUFDSC : REF DESCRIPTOR,
	SRCPTR : REF BBLOCK,
	CLASS  : WORD;

    LOCAL
	MSK,				! Address of filter mask
	STATUS;				! Routine status code

    MSK = UPLIT (-1, 0);

    IF .FCT
    THEN

    INCR I FROM 0 TO NML$GK_EVENTS - 1 DO
	BEGIN

	IF .NML$AB_EVENTS [.I, ETB$W_CLASS] EQLU .CLASS
	THEN
	    BEGIN

	    SELECTONEU .SRC OF
		SET

		[NMA$C_ENT_NOD]:	! Node
		    MSK = .NML$AB_EVENTS [.I, ETB$A_NODE];

		[NMA$C_ENT_CIR]:	! Circuit
		    MSK = .NML$AB_EVENTS [.I, ETB$A_CIRCUIT];

		[NMA$C_ENT_LIN]:	! Line
		    MSK = .NML$AB_EVENTS [.I, ETB$A_LINE];

		[OTHERWISE]:		! Must be global
		    MSK = .NML$AB_EVENTS [.I, ETB$A_GLOBAL];

		TES;

	    EXITLOOP;

	    END;
	END;

    STATUS = NML_MODFIL (.FCT,
			 TRUE,
			 .BUFDSC,
			 .SRCPTR,
			 .CLASS,
			 EVT$S_LOGMSK,
			 .MSK);

    RETURN .STATUS

    END;				! End of NML_MODCLS

%SBTTL 'NML_MODKNO  Modify known filters'
ROUTINE NML_MODKNO (FCT, BUFDSC, SRCPTR, SRC) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine adds event filters to the data base entry for a sink 
!	node.
!
! FORMAL PARAMETERS:
!
!	FCT		Function code. (0=CLEAR/PURGE, 1=SET/DEFINE)
!	BUFDSC		Descriptor of buffer to contain modified data base
!			entry.
!	SRCPTR		Pointer to source block in buffer.
!	SRC		Source type code.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	TRUE is returned if operation is successful.  Otherwise, FALSE
!	is returned.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	BUFDSC : REF DESCRIPTOR,
	SRCPTR : REF BBLOCK;

    LOCAL
	CLASS  : WORD,
	EVTPTR : REF BBLOCK,
	MSK,
	STATUS;				! Routine status code

    STATUS = FALSE;

    INCR I FROM 0 TO NML$GK_EVENTS - 1 DO
	BEGIN

	CLASS = .NML$AB_EVENTS [.I, ETB$W_CLASS];

	SELECTONEU .SRC OF
	    SET

	    [NMA$C_ENT_NOD]:		! Node
		MSK = .NML$AB_EVENTS [.I, ETB$A_NODE];

	    [NMA$C_ENT_CIR]:		! Circuit
		MSK = .NML$AB_EVENTS [.I, ETB$A_CIRCUIT];

	    [NMA$C_ENT_LIN]:		! Line
		MSK = .NML$AB_EVENTS [.I, ETB$A_LINE];

	    [OTHERWISE]:		! Must be global
		MSK = .NML$AB_EVENTS [.I, ETB$A_GLOBAL];

	    TES;

	STATUS = NML_MODFIL (.FCT,
			     TRUE,
			     .BUFDSC,
			     .SRCPTR,
			     .CLASS,
			     EVT$S_LOGMSK,
			     .MSK);
	IF NOT .STATUS
	THEN
	    EXITLOOP;

	END;
!
! If the function is clear and everything is alright up to this point then
! go through all event classes that are present in the source block and clear
! out all the filters.  This covers the case where filters are present for
! an unknown class.
!
    IF .STATUS
    AND NOT .FCT
    THEN
	BEGIN

	EVTPTR = 0;
	WHILE NML$GETNXTEVT (.SRCPTR, EVTPTR) DO
	    BEGIN

	    CLASS = .EVTPTR [EVT$W_CLASS];
	    NML$MODEVT (.FCT, FALSE, .EVTPTR, EVT$S_LOGMSK, UPLIT (-1, -1));

	    END;

	END;

    RETURN .STATUS

    END;				! End of NML_MODKNO

%SBTTL 'NML$GETSPCFILTERS  Get event filters'
GLOBAL ROUTINE NML$GETSPCFILTERS
		(DATDSC, SNK, SRC, ENTDSC, CLASS, MSKPTR, RESLEN) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine gets event filters for the specified source and class.
!
! FORMAL PARAMETERS:
!
!	DATDSC		Descriptor of current data base entry.
!	SNK		Logging sink type code.
!	SRC		Event source type code.
!	ENTDSC		Event source id string descriptor.
!	CLASS		Event class code.
!	MSKPTR		Address of filter mask quadword.
!	RESLEN		Address of longword to contain byte count of
!			resulting mask.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	TRUE is returned if operation is successful.  Otherwise, FALSE
!	is returned.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	DATDSC : REF DESCRIPTOR,
	ENTDSC : REF DESCRIPTOR,
	MSKPTR : REF BITVECTOR;

    LOCAL
	EVTPTR : REF BBLOCK,		! Pointer to event block
	FILPTR : REF BITVECTOR,		! Pointer to event filter mask
	LOGPTR : REF BITVECTOR,		! Pointer to event log mask
	SRCPTR,				! Pointer to source block
	ZERCNT;				! Trailing zero byte count

!
! Get the source block.
!
    IF NOT NML$MATCHSRC (.DATDSC, .SNK, .SRC, .ENTDSC, SRCPTR)
    THEN
	RETURN FALSE;
!
! Get the event block.
!
    IF NOT NML$MATCHEVT (.SRCPTR, .CLASS, EVTPTR)
    THEN
	RETURN FALSE;
!
! Get combined specific and global filters.
!
    IF NOT NML$GETCOMFILTERS (.DATDSC, .SNK, .CLASS, .MSKPTR, .RESLEN)
    THEN
	RETURN FALSE;

    RETURN TRUE

    END;				! End of NML$GETSPCFILTERS

%SBTTL 'NML$GETCOMFILTERS  Get event filters'
GLOBAL ROUTINE NML$GETCOMFILTERS (DATDSC, EVTPTR, SNK, MSKPTR, RESLEN) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine gets event filters from the specified event block
!	and combines them with the global filters for the class.  The
!	resulting mask is the complete event mask for the class and source.
!
! FORMAL PARAMETERS:
!
!	DATDSC		Descriptor of current data base entry.
!	EVTPTR		Pointer to event block.
!	SNK		Event sink type code.
!	MSKPTR		Address of filter mask quadword.
!	RESLEN		Address of longword to contain byte count of
!			resulting mask.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	TRUE is returned if operation is successful.  Otherwise, FALSE
!	is returned.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	DATDSC : REF DESCRIPTOR,
	EVTPTR : REF BBLOCK,		! Pointer to event block
	MSKPTR : REF BITVECTOR;

    LOCAL
	CLASS,				! Event class
	FILPTR : REF BITVECTOR,		! Pointer to event filter mask
	LOGPTR : REF BITVECTOR,		! Pointer to event log mask
	ZERCNT;				! Trailing zero byte count

!
! Get global filter mask for this class.
!
    CLASS = .EVTPTR [EVT$W_CLASS];
    NML$GETGBLFILTERS (.DATDSC, .SNK, .CLASS, .MSKPTR);
!
! Combine specific masks with global mask.
!
    LOGPTR = EVTPTR [EVT$Q_LOGMSK];
    FILPTR = EVTPTR [EVT$Q_FILTERMSK];

    INCR I FROM 0 TO (EVT$S_LOGMSK * 8) - 1 DO
	BEGIN

	MSKPTR [.I] = .MSKPTR [.I] OR .LOGPTR [.I];
	MSKPTR [.I] = .MSKPTR [.I] AND NOT .FILPTR [.I];

	END;
!
! Adjust count to exclude zero bytes on the end of the quadword mask.
!
    ZERCNT = 0;

    DECR I FROM EVT$S_LOGMSK - 1 DO
	BEGIN

	IF .(.MSKPTR + .I)<0,8> EQLU 0
	THEN
	    ZERCNT = .ZERCNT + 1
	ELSE
	    EXITLOOP;

	END;
!
! Set up mask length for return.
!
    .RESLEN = EVT$S_LOGMSK - .ZERCNT;

    RETURN TRUE

    END;				! End of NML$GETCOMFILTERS

%SBTTL 'NML$GETGBLFILTERS  Get global filters for sink and class'
GLOBAL ROUTINE NML$GETGBLFILTERS (DATDSC, SNK, CLASS, MSKPTR) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine returns the global filters for the specified
!	sink type and class.
!
! FORMAL PARAMETERS:
!
!	DATDSC		Descriptor of source block buffer.
!	SNK		Logging sink type code.
!	CLASS		Event class code.
!	MSKPTR		Pointer to quadword to contain global filter mask.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	TRUE is returned if global filters are found, FALSE is returned
!	if no global filters are found.  If no global filters are found
!	the resulting filter mask will be zeroed.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	EVTPTR : REF BBLOCK,		! Event block pointer
	SRCPTR : REF BBLOCK,		! Source block pointer
	STATUS;				! Routine status
!
! Zero the filter mask.
!
    CH$FILL (0, EVT$S_LOGMSK, .MSKPTR);
!
! If global filters are found then just return.
!
    IF NOT NML$MATCHSRC (.DATDSC,
			 .SNK,
			 NMA$C_ENT_KNO,
			 UPLIT (0, 0),
			 SRCPTR)
    THEN
	RETURN FALSE;

!
! If global filters are found for the specified class then move them
! into the result mask.
!
    IF NML$MATCHEVT (.SRCPTR,
		     .CLASS,
		     EVTPTR)
    THEN
	BEGIN

	CH$MOVE (EVT$S_LOGMSK,
		 EVTPTR [EVT$Q_LOGMSK],
		 .MSKPTR);
	STATUS = TRUE;

	END
    ELSE
	STATUS = FALSE;

    RETURN .STATUS
 
   END;					! End of NML$GETGBLFILTERS

%SBTTL 'NML$CLEANEVT  Clean event masks'
GLOBAL ROUTINE NML$CLEANEVT (SNK, BLKDSC) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine runs through all sources for the specified sink type
!	and deletes all event filters that match the global filters.
!
! FORMAL PARAMETERS:
!
!	SNK		Logging sink type code.
!	BLKDSC		Descriptor of all source block data.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	EVTPTR : REF BBLOCK,
	FILMSK : REF BITVECTOR,
	GBLEVT : REF BBLOCK,
	GBLMSK : REF BITVECTOR,
	LOGMSK : REF BITVECTOR,
	GBLSRC : REF BBLOCK,
	SRCPTR : REF BBLOCK,
	STATUS;
!
! If there are no global filters then just clean up the filter masks.
!
    IF NML$MATCHSRC (.BLKDSC, .SNK, NMA$C_ENT_KNO, 0, GBLSRC)
    THEN
	BEGIN
!
! Make sure the filter mask is zeroed for the global filters.
!
	GBLEVT = 0;	
	WHILE NML$GETNXTEVT (.GBLSRC, GBLEVT) DO
	    BEGIN

	    GBLMSK = GBLEVT [EVT$Q_FILTERMSK];

	    INCR I FROM 0 TO (EVT$S_FILTERMSK * 8) - 1 DO
		BEGIN

		GBLMSK [.I] = 0;

		END;
	    END;
	END
    ELSE
	GBLSRC = 0;
!
! For every source clean up all event masks.
!
    SRCPTR = 0;
    WHILE NML$GETNXTSNK (.BLKDSC, .SNK, SRCPTR) DO
	BEGIN
	IF .(SRCPTR [SRC$B_SRCTYPE])<0,8,1> NEQ NMA$C_ENT_KNO
	THEN
	    BEGIN
!
! For every event mask get rid of everything that matches the global
! filters.
!
	    EVTPTR = 0;	
	    WHILE NML$GETNXTEVT (.SRCPTR, EVTPTR) DO
		BEGIN

		LOGMSK = EVTPTR [EVT$Q_LOGMSK];
		FILMSK = EVTPTR [EVT$Q_FILTERMSK];

		IF .GBLSRC NEQA 0
		THEN
		    STATUS = NML$MATCHEVT (.GBLSRC,
					   .EVTPTR [EVT$W_CLASS],
					   GBLEVT)
		ELSE
		    STATUS = FALSE;

		IF .STATUS
		AND (.GBLSRC NEQA 0)
		THEN
		    BEGIN

		    GBLMSK = GBLEVT [EVT$Q_LOGMSK];

		    INCR I FROM 0 TO (EVT$S_LOGMSK * 8) - 1 DO
			BEGIN

			LOGMSK [.I] = .LOGMSK [.I] AND NOT .GBLMSK [.I];
			FILMSK [.I] = .FILMSK [.I] AND .GBLMSK [.I];

			END;
		    END
		ELSE
		    BEGIN
		    INCR I FROM 0 TO (EVT$S_LOGMSK * 8) - 1 DO
			BEGIN

			FILMSK [.I] = 0;

			END;
		    END;
		END;
	    END;
	END;

    END;				! End of NML$CLEANEVT

%SBTTL 'NML$CLEANSRC  Clean sources'
GLOBAL ROUTINE NML$CLEANSRC (BUFDSC, SNK, BLKDSC) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine goes through all source blocks for the specified
!	sink type and removes all event blocks that have no filters set.
!	Source blocks with event blocks are also removed.
!
! FORMAL PARAMETERS:
!
!	BUFDSC		Descriptor of buffer containing source blocks.
!	SNK		Logging sink type code.
!	BLKDSC		Descriptor of all source block data in buffer.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	EVTPTR : REF BBLOCK,		! Pointer to event block
	FILMSK : REF BITVECTOR,
	LOGMSK : REF BITVECTOR,
	OLDEVT : REF BBLOCK,		! Pointer to previous event block
	OLDSRC : REF BBLOCK,		! Pointer to previous source block
	SRCPTR : REF BBLOCK,		! Pointer to current source block
	STATUS;

    OLDSRC = 0;
    SRCPTR = 0;
    WHILE NML$GETNXTSNK (.BLKDSC, .SNK, SRCPTR) DO
	BEGIN

	CH$MOVE (.SRCPTR [SRC$W_LENGTH], .SRCPTR, NML$T_SRCBUFFER);

	OLDEVT = 0;
	EVTPTR = 0;
	WHILE NML$GETNXTEVT (NML$T_SRCBUFFER, EVTPTR) DO
	    BEGIN

	    LOGMSK = EVTPTR [EVT$Q_LOGMSK];
	    FILMSK = EVTPTR [EVT$Q_FILTERMSK];

	    STATUS = FALSE;
	    INCR I FROM 0 TO (EVT$S_LOGMSK * 8) - 1 DO
		BEGIN

		IF .LOGMSK [.I] OR .FILMSK [.I]
		THEN
		    BEGIN
		    STATUS = TRUE;
		    EXITLOOP;
		    END;
		END;

	    IF NOT .STATUS
	    THEN
		BEGIN
		NML$REMEVT (NML$T_SRCBUFFER, .EVTPTR);
		EVTPTR = .OLDEVT;	! Back up event pointer
		END
	    ELSE
		OLDEVT = .EVTPTR;

	    END;

	IF .NML$T_SRCBUFFER [SRC$W_MSKCOUNT] NEQU 0
	THEN
	    BEGIN
	    NML$REPSRC (.BUFDSC, .BLKDSC, .SRCPTR, NML$T_SRCBUFFER);
	    OLDSRC = .SRCPTR;
	    END
	ELSE
	    BEGIN
	    NML$REMSRC (.BLKDSC, .SRCPTR);
	    SRCPTR = .OLDSRC;		! Back up the source pointer
	    END;

	END;

    END;				! End of NML$CLEANSRC

%SBTTL 'NML$MATCHSRC  Match specific source'
GLOBAL ROUTINE NML$MATCHSRC (BLKDSC, SNK, SRC, ENTDSC, SRCPTR) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine searches the sink node buffer for a source block
!	that matches the specified event source.
!
! FORMAL PARAMETERS:
!
!	BLKDSC		Descriptor of source block buffer.
!	SNK		Logging sink type code.
!	SRC		Event source type code.
!	ENTDSC		Event source id string descriptor.
!	SRCPTR		Pointer to longword in which to return address
!			of source block.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	TRUE is returned if a match is found, FALSE is returned if no match.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	SRC    : BYTE,
	ENTDSC : REF DESCRIPTOR;

    LOCAL
	PTR    : REF BBLOCK,		! Temporary source block pointer
	STATUS,				! Routine status	
	TSTLEN,				! Length of source to compare
	TSTPTR;				! Address of source to compare

    PTR = 0;				! Initialize source pointer
    STATUS = FALSE;			! Initialize routine status

    WHILE NML$GETNXTSNK (.BLKDSC, .SNK, PTR) DO
	BEGIN
	IF .PTR [SRC$B_SRCTYPE] EQLU .SRC
	THEN
	    BEGIN
!
! Select the length and address of the source to compare.
!
	    SELECTONEU .SRC OF
		SET

		[NMA$C_ENT_NOD]:	! Node
		    BEGIN

		    IF .(ENTDSC [DSC$A_POINTER])<0,16> EQLU
		       .PTR [SRC$W_NODADR]
		    THEN
			STATUS = TRUE;

		    END;

		[NMA$C_ENT_CIR, NMA$C_ENT_LIN]:	! Circuit or Line 
		    BEGIN

		    IF CH$EQL (.ENTDSC [DSC$W_LENGTH],
			       .ENTDSC [DSC$A_POINTER],
			       .PTR [SRC$B_DEVLENGTH],
			       PTR [SRC$T_DEVICEID])	
		    THEN
			STATUS = TRUE;

		    END;

		[OTHERWISE]:		! Null
		    BEGIN

		    STATUS = TRUE;

		    END;
		TES;

	    IF .STATUS
	    THEN
		BEGIN

		.SRCPTR = .PTR;
		EXITLOOP;

		END;
	    END;
	END;

    RETURN .STATUS

    END;				! End of NML$MATCHSRC

%SBTTL 'NML$GETNXTSNK  Get next source block for specified sink'
GLOBAL ROUTINE NML$GETNXTSNK (BLKDSC, SNK, SRCPTR) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine searches the sink node buffer for the next source block
!	that matches the specified sink type.
!
! FORMAL PARAMETERS:
!
!	BLKDSC		Descriptor of event source block buffer.
!	SNK		Logging sink type code to match.
!	SRCPTR		Address of longword in which to return address
!			of source block.  If within range of buffer
!			it will be used as the starting point from which
!			to get the next source block that matches the
!			specified sink.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	TRUE is returned if a match is found, FALSE is returned if no match.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	PTR : REF BBLOCK,		! Temporary source block pointer
	STATUS;				! Routine status

    STATUS = FALSE;			! Initialize routine status
    PTR = ..SRCPTR;			! Initialize source pointer

    WHILE NML$GETNXTSRC (.BLKDSC, PTR) DO
	BEGIN
	IF .PTR [SRC$B_SINKTYPE] EQLU .SNK
	THEN
	    BEGIN
	    .SRCPTR = .PTR;		! Set source pointer for return
	    STATUS = TRUE;
	    EXITLOOP
	    END;
	END;

    RETURN .STATUS

    END;				! End of NML$GETNXTSNK

%SBTTL 'NML$GETNXTSRC  Get next source block'
GLOBAL ROUTINE NML$GETNXTSRC (BLKDSC, SRCPTR) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine searches the sink node buffer for the next source
!	block.
!
! FORMAL PARAMETERS:
!
!	BLKDSC		Descriptor of source block buffer.
!	SRCPTR		Address of longword in which to return the address
!			of the next source block.  If value is within buffer
!			range on input then it is used as the address of the
!			starting source block.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	TRUE is returned if a match is found, FALSE is returned if no match.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	BLKDSC : REF DESCRIPTOR;

    LOCAL
	BUFEND,				! Pointer to end of buffer
	PTR    : REF BBLOCK,		! Temporary source block pointer
	STATUS;				! Routine status

!
! If descriptor indicates no source blocks (length=0) then
! return failure.
!
    IF .BLKDSC [DSC$W_LENGTH] EQLU 0
    THEN
	RETURN FALSE;

    BUFEND = .BLKDSC [DSC$A_POINTER] + .BLKDSC [DSC$W_LENGTH];
    PTR = ..SRCPTR;			! Initialize source pointer
!
! If PTR contains a value on input that is within the buffer range then
! use it as the starting point.  If the value is not valid then return
! the address of the first source block in the buffer.
!
    IF	(.PTR LSSA .BLKDSC [DSC$A_POINTER])
	OR
	(.PTR GEQA .BUFEND)
    THEN
	PTR = .BLKDSC [DSC$A_POINTER]
    ELSE
	PTR = .PTR + .PTR [SRC$W_LENGTH];
!
! If pointer is still within range of buffer then return TRUE else
! return FALSE to indicate no more source blocks.
!
    IF .PTR GEQA .BUFEND
    THEN
	STATUS = FALSE
    ELSE
	BEGIN
	.SRCPTR = .PTR;			! Set source pointer for return
	STATUS = TRUE;
	END;

    RETURN .STATUS

    END;				! End of NML$GETNXTSRC

%SBTTL 'NML$MATCHEVT  Get event block matching specified class'
GLOBAL ROUTINE NML$MATCHEVT (SRCPTR, CLASS, EVTPTR) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine searches the source block for an event block that
!	matches the specified class.
!
! FORMAL PARAMETERS:
!
!	SRCPTR		Pointer to source block.
!	CLASS		Class code to match.
!	EVTPTR		Address of longword in which the pointer to
!			the matched event block will be returned.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	TRUE is returned if a match is found, FALSE is returned if no match.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	SRCPTR : REF BBLOCK;

    LOCAL
	PTR    : REF BBLOCK,		! Temporary event block pointer
	STATUS;				! Routine status

    PTR = 0;				! Initialize source pointer
    STATUS = FALSE;			! Initialize routine status

    WHILE NML$GETNXTEVT (.SRCPTR, PTR) DO
	BEGIN
	IF .PTR [EVT$W_CLASS] EQLU .CLASS
	THEN
	    BEGIN
	    .EVTPTR = .PTR;		! Set event pointer for return
	    STATUS = TRUE;
	    EXITLOOP
	    END;
	END;

    RETURN .STATUS

    END;				! End of NML$MATCHEVT

%SBTTL 'NML$GETNXTEVT  Get next event block'
GLOBAL ROUTINE NML$GETNXTEVT (SRCPTR, EVTPTR) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine searches the source block for the next event block.
!
! FORMAL PARAMETERS:
!
!	SRCPTR		Pointer to source block.
!	EVTPTR		Address of longword to contain address of matched
!			event block.  If the value is within the event block
!			range then it is used as the starting event block 
!			address.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	TRUE is returned if a match is found, FALSE is returned if no match.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	SRCPTR : REF BBLOCK;

    LOCAL
	CLASSES,			! Number of event event blocks
	MASKEND,			! Pointer to end of masks
	MASKPTR,			! Pointer to masks
	PTR     : REF BBLOCK,		! Temporary event block pointer
	STATUS;				! Routine status

    CLASSES = .SRCPTR [SRC$W_MSKCOUNT];
!
! If no event masks are present (count=0) then
! return failure.
!
    IF .CLASSES EQLU 0
    THEN
	RETURN FALSE;

    MASKPTR = .SRCPTR + SRC$K_LENGTH;
    MASKEND = .MASKPTR + (.CLASSES * EVT$K_LENGTH);
    PTR = ..EVTPTR;			! Initialize event pointer
!
! If PTR contains a value on input that is within the buffer range then
! use it as the starting point.  If the value is not valid then return
! the address of the first event block in the buffer.
!
    IF	(.PTR LSSA .MASKPTR)
	OR
	(.PTR GEQA .MASKEND)
    THEN
	PTR = .MASKPTR
    ELSE
	PTR = .PTR + EVT$K_LENGTH;
!
! If pointer is still within range of buffer then return TRUE else
! return FALSE to indicate no more event blocks.
!
    IF .PTR GEQA .MASKEND
    THEN
	STATUS = FALSE
    ELSE
	BEGIN
	.EVTPTR = .PTR;			! Set event pointer for return
	STATUS = TRUE;
	END;

    RETURN .STATUS

    END;				! End of NML$GETNXTEVT

%SBTTL 'NML$BLDSRC  Build a source block'
GLOBAL ROUTINE NML$BLDSRC (BUFDSC, SNK, SRC, ENTDSC) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine builds a source block.
!
! FORMAL PARAMETERS:
!
!	BUFDSC		Descriptor of buffer to hold new source block.
!			(Assumed to be at least SRC$K_LENGTH bytes.)
!	SNK		Logging sink type code.
!	SRC		Event source type code.
!	ENTDSC		Event source id string descriptor.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	BUFDSC : REF DESCRIPTOR,
	ENTDSC : REF DESCRIPTOR;

    LOCAL
	SRCPTR : REF BBLOCK;

    SRCPTR = .BUFDSC [DSC$A_POINTER];
    CH$FILL (0, SRC$K_LENGTH, .SRCPTR);	! Zero the event block

    SRCPTR [SRC$W_LENGTH] = SRC$K_LENGTH;
    SRCPTR [SRC$B_SINKTYPE] = .SNK;
    SRCPTR [SRC$B_SRCTYPE] = .SRC;

    SELECTONEU .SRC OF
	SET
	[NMA$C_ENT_NOD]:		! Node

	    CH$MOVE (2,
		     ENTDSC [DSC$A_POINTER],
		     SRCPTR [SRC$W_NODADR]);

	[NMA$C_ENT_CIR, NMA$C_ENT_LIN]:	! Circuit or Line
	    BEGIN

	    SRCPTR [SRC$B_DEVLENGTH] = .ENTDSC [DSC$W_LENGTH];
	    CH$MOVE (.ENTDSC [DSC$W_LENGTH],
		     .ENTDSC [DSC$A_POINTER],
		     SRCPTR [SRC$T_DEVICEID]);

	    END;

	TES;

    END;				! End of NML$BLDSRC

%SBTTL 'NML$BLDEVT  Build an event class block'
GLOBAL ROUTINE NML$BLDEVT (FCT, CLASS, MSKLEN, MSKPTR, EVTPTR) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine builds an event class block.
!
! FORMAL PARAMETERS:
!
!	FCT		Mask operation code. (0=CLEAR, 1=SET)
!	CLASS		Event class code.
!	MSKLEN		Length in bytes of event mask.
!	MSKPTR		Address of event mask.
!	EVTPTR		Address of event block to be filled in.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	EVTPTR : REF BBLOCK;

    CH$FILL (0, EVT$K_LENGTH, .EVTPTR);	! Zero the event block

    EVTPTR [EVT$W_CLASS] = .CLASS;	! Fill in the class code
!
! If function is SET (FCT=1) then move the mask into the log mask.
! Otherwise (FCT=0), function is CLEAR so move the mask into the filter 
! mask.
!
    IF .FCT
    THEN
	CH$MOVE (.MSKLEN, .MSKPTR, EVTPTR [EVT$Q_LOGMSK])
    ELSE
	CH$MOVE (.MSKLEN, .MSKPTR, EVTPTR [EVT$Q_FILTERMSK]);

    END;				! End of NML$BLDEVT

%SBTTL 'NML$ADDSRC  Add a source block to buffer'
GLOBAL ROUTINE NML$ADDSRC (BUFDSC, SRCDSC, SRCPTR) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine adds a source block to the specified buffer.
!
! FORMAL PARAMETERS:
!
!	BUFDSC		Descriptor of source block buffer.
!	SRCDSC		Descriptor of source block data in buffer.
!	SRCPTR		Pointer to source block to be added.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Returns TRUE if the source block was added.  Returns FALSE if
!	there was not enough room in the buffer.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	BUFDSC : REF DESCRIPTOR,
	SRCDSC : REF DESCRIPTOR,
	SRCPTR : REF BBLOCK;

!
! Make sure source block will fit in the buffer.
!
    IF (.BUFDSC [DSC$W_LENGTH] - .SRCDSC [DSC$W_LENGTH])
	LSS
	.SRCPTR [SRC$W_LENGTH]
    THEN
	RETURN FALSE;
!
! Block will fit so move it.
!
    CH$MOVE (.SRCPTR [SRC$W_LENGTH],
	     .SRCPTR,
	     .SRCDSC [DSC$A_POINTER] + .SRCDSC [DSC$W_LENGTH]);
!
! Calculate resulting buffer length.
!
    SRCDSC [DSC$W_LENGTH] =
	.SRCDSC [DSC$W_LENGTH] + .SRCPTR [SRC$W_LENGTH];

    RETURN TRUE

    END;				! End of NML$ADDSRC

%SBTTL 'NML$REPSRC  Replace a source block in buffer'
GLOBAL ROUTINE NML$REPSRC (BUFDSC, SRCDSC, OLDSRC, NEWSRC) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine adds a source block to the specified buffer.
!
! FORMAL PARAMETERS:
!
!	BUFDSC		Descriptor of source block buffer.
!	SRCDSC		Descriptor of source block data in buffer.
!	OLDSRC		Pointer to old source block in buffer.
!	NEWSRC		Pointer to source block to be added.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Returns TRUE if the source block was added.  Returns FALSE if
!	there was not enough room in the buffer.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	BUFDSC : REF DESCRIPTOR,
	SRCDSC : REF DESCRIPTOR,
	OLDSRC : REF BBLOCK,
	NEWSRC : REF BBLOCK;

    LOCAL
	FREELEN,
	MOVLEN;
!
! Make sure source block will fit in the buffer.
!
    FREELEN =	.BUFDSC [DSC$W_LENGTH] -
		.SRCDSC [DSC$W_LENGTH] +
		.OLDSRC [SRC$W_LENGTH];
    IF .FREELEN	LSS .NEWSRC [SRC$W_LENGTH]
    THEN
	RETURN FALSE;

    FREELEN = .FREELEN - .NEWSRC [SRC$W_LENGTH];
!
! Block will fit so move it.
!
    MOVLEN = .SRCDSC [DSC$A_POINTER] + .SRCDSC [DSC$W_LENGTH];
    MOVLEN = .MOVLEN - .OLDSRC;
    MOVLEN = .MOVLEN - .OLDSRC [SRC$W_LENGTH];

    CH$MOVE (.MOVLEN,
	     .OLDSRC + .OLDSRC [SRC$W_LENGTH],
	     .OLDSRC + .NEWSRC [SRC$W_LENGTH]);

    CH$MOVE (.NEWSRC [SRC$W_LENGTH],
	     .NEWSRC,
	     .OLDSRC);
!
! Calculate resulting buffer length.
!
    SRCDSC [DSC$W_LENGTH] =
	.BUFDSC [DSC$W_LENGTH] - .FREELEN;

    RETURN TRUE

    END;				! End of NML$ADDSRC

%SBTTL 'NML$REMSRC  Remove source block from buffer'
GLOBAL ROUTINE NML$REMSRC (BLKDSC, SRCPTR) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine the specified source block from the buffer.
!
! FORMAL PARAMETERS:
!
!	BLKDSC		Descriptor of source block buffer.
!	SRCPTR		Pointer to source block in buffer to be removed.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	BLKDSC : REF DESCRIPTOR,
	SRCPTR : REF BBLOCK;

    LOCAL
	BUFEND,
	LEN,
	PTR;
!
! Set up length and pointers to remove source block.
!
    LEN = .SRCPTR [SRC$W_LENGTH];
    PTR = .SRCPTR + .LEN;
    BUFEND = .BLKDSC [DSC$A_POINTER] + .BLKDSC [DSC$W_LENGTH];
!
! Move the end of the buffer back over the source block to be removed.
!
    CH$MOVE (.BUFEND - .PTR,
	     .PTR,
	     .SRCPTR);
!
! Update the descriptor.
!
    BLKDSC [DSC$W_LENGTH] =
	.BLKDSC [DSC$W_LENGTH] - .LEN;

    END;				! End of NML$REMSRC

%SBTTL 'NML$ADDEVT  Add an event block to source buffer'
GLOBAL ROUTINE NML$ADDEVT (BUFDSC, SRCPTR, EVTPTR) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine adds an event block to the specified source buffer.
!
! FORMAL PARAMETERS:
!
!	BUFDSC		Descriptor of buffer containing source block.
!	SRCPTR		Pointer to source block in buffer.
!	EVTPTR		Pointer to event block to be added.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Returns TRUE if the event block was added.  Returns FALSE if
!	there was not enough room in the buffer.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	BUFDSC : REF DESCRIPTOR,
	SRCPTR : REF BBLOCK,
	EVTPTR : REF BBLOCK;
!
! Make sure event block will fit in the buffer.
!
    IF (.BUFDSC [DSC$W_LENGTH] - .SRCPTR [SRC$W_LENGTH])
	LSS
	EVT$K_LENGTH
    THEN
	RETURN FALSE;
!
! Block will fit so move it.
!
    CH$MOVE (EVT$K_LENGTH,
	     .EVTPTR,
	     .SRCPTR + .SRCPTR [SRC$W_LENGTH]);
!
! Calculate resulting buffer length and store it in source block.
! Also increment the mask count.
!
    SRCPTR [SRC$W_LENGTH] =
	.SRCPTR [SRC$W_LENGTH] + EVT$K_LENGTH;

    SRCPTR [SRC$W_MSKCOUNT] =
	.SRCPTR [SRC$W_MSKCOUNT] + 1;

    RETURN TRUE

    END;				! End of NML$ADDEVT

%SBTTL 'NML$MODEVT  Modify event block'
GLOBAL ROUTINE NML$MODEVT (FCT, ZER, EVTPTR, MSKLEN, MSKPTR) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine the modifies the specified event block.
!
! FORMAL PARAMETERS:
!
!	FCT		Mask operation code. (FALSE=CLEAR, TRUE=SET).
!	ZER		Zero flag.  (TRUE=yes, FALSE=no).
!	EVTPTR		Pointer to event block.
!	MSKLEN		Length of mask value to be added.
!	MSKPTR		Pointer to mask value to be added.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	EVTPTR : REF BBLOCK,
	MSKPTR : REF BITVECTOR;

    LOCAL
	BITLEN,				! Length of mask in bits
	OLDMSK : REF BITVECTOR,		! Mask not changed
	RESMSK : REF BITVECTOR;		! Address of result mask
!
! If the operation is SET (FCT=1) then modify log mask.
! Otherwise, operation is CLEAR (FCT=0) so modify filter mask.
!
    IF .FCT
    THEN
	BEGIN
	RESMSK = EVTPTR [EVT$Q_LOGMSK];
	OLDMSK = EVTPTR [EVT$Q_FILTERMSK];
	END
    ELSE
	BEGIN
	RESMSK = EVTPTR [EVT$Q_FILTERMSK];
	OLDMSK = EVTPTR [EVT$Q_LOGMSK];
	END;
!
! Set the correct bits in the result mask.
!
    BITLEN = .MSKLEN * 8;

    INCR I FROM 0 TO .BITLEN - 1 DO
	BEGIN

	RESMSK [.I] = .RESMSK [.I] OR .MSKPTR [.I];
	OLDMSK [.I] = .OLDMSK [.I] AND NOT .MSKPTR [.I];

	END;
!
! If the other mask should be zeroed (ZER=TRUE) then zero it.
!
    IF .ZER
    THEN
	BEGIN

	MAP OLDMSK : REF VECTOR [, BYTE];

	INCR I FROM 0 TO EVT$S_LOGMSK - 1 DO
	    BEGIN

	    OLDMSK [.I] = 0;

	    END;
	END;

    END;				! End of NML$MODEVT

%SBTTL 'NML$REMEVT  Remove event block from source buffer'
GLOBAL ROUTINE NML$REMEVT (SRCPTR, EVTPTR) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine the specified event block from the source buffer.
!
! FORMAL PARAMETERS:
!
!	SRCPTR		Pointer to source block.
!	EVTPTR		Pointer to event block to be removed from source.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	SRCPTR : REF BBLOCK,
	EVTPTR : REF BBLOCK;

    LOCAL
	BUFEND,
	PTR;
!
! Set up length and pointers to remove event block.
!
    PTR = .EVTPTR + EVT$K_LENGTH;
    BUFEND = .SRCPTR + .SRCPTR [SRC$W_LENGTH];
!
! Move the end of the buffer back over the event block to be removed.
!
    CH$MOVE (.BUFEND - .PTR,
	     .PTR,
	     .EVTPTR);
!
! Update the length of the source block.
! Also decrement the mask count.
!
    SRCPTR [SRC$W_LENGTH] =
	.SRCPTR [SRC$W_LENGTH] - EVT$K_LENGTH;

    SRCPTR [SRC$W_MSKCOUNT] =
	.SRCPTR [SRC$W_MSKCOUNT] - 1;

    END;				! End of NML$REMEVT

END					! End of module

ELUDOM
