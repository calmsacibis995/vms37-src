%TITLE 'NML NPARSE action routines for parsing parameters'
MODULE NML$PARPRM (
		LANGUAGE (BLISS32),
		ADDRESSING_MODE (NONEXTERNAL=LONG_RELATIVE),
		ADDRESSING_MODE (EXTERNAL=LONG_RELATIVE),
		IDENT = 'V03-000'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  DECnet-VAX V2.0 Network Management Listener
!
!
! ABSTRACT:
!
!    This module contains action routines called by NPARSE to parse and
!    store NICE entity parameters.
!
! ENVIRONMENT:  VAX/VMS Operating System
!
! AUTHOR:  Distributed Systems Software Engineering
!
! CREATION DATE:  8-Nov-1979
!
! MODIFIED BY:
!
!	V03-003	MKP0002		Kathy Perko		15-Dec-1981
!		Change name NML$PRS_CHK_PROTOCOL to NML$PRM_CHK_PROTOCOL
!		to be consistent with routine names in this module.
!
!	V03-002	MKP0001		Kathy Perko		19-Nov-1981
!		Add parameter grouping check for X.25 Protocol module.
!
!	V03-001	LMK0001		Len Kawell		27-Jul-1981
!		Remove line name parsing, as NETACP handles it now.
!--


%SBTTL 'Declarations'

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    NML$PRM_CHECK,
    NML$PRM_OBJPRV,
    NML$PRM_CLEAR,
    NML$PRM_STRCHK,
    NML$PRM_CHKEXE,
    NML$PRM_CHKNOD,
    NML$PRM_CHKREM,
    NML$PRM_CHKLOO,
    NML$PRM_CHKEFI,
    NML$PRM_CHKESI,
    NML$PRM_CHK_PROTOCOL,
    NML$PRM_CHKHOST,
    NML$PRM_VFYNOD,
    NML$PRM_ERR,
    NML$PRM_EVTSRCTYP,
    NML$PRM_EVTSOURCE,
    NML$PRM_EVTCLASS,
    NML$PRM_EVTMSKTYP,
    NML$PRM_EVTMASK,
    NML$PRM_CHKEVE;

!
! INCLUDE FILES:
!

LIBRARY 'LIB$:NMLLIB.L32';
LIBRARY 'SHRLIB$:NMALIBRY.L32';
LIBRARY 'SYS$LIBRARY:STARLET.L32';

!
! EXTERNAL REFERENCES:
!

$NML_EXTDEF;

EXTERNAL ROUTINE
    NMA$CLOSEFILE,
    NMA$OPENFILE,
    NML$CHKPRMVAL,
    NML$ERROR_2,
    NML$GETNODADR,
    NML$SAVEPARAM;


%SBTTL 'NML$PRM_CHECK  Check parameter value'
GLOBAL ROUTINE NML$PRM_CHECK =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This is a NPARSE action routine that checks a parameter value
!	against its description in the parameter semantic table.  If
!	the parameter is valid, a descriptor entry is created.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NPARSE_BLOCK (pointed to by AP) contains the parsed parameter data.
!	    NPA$L_FLDCNT is the parameter length.
!	    NPA$L_FLDPTR is a pointer to the parameter in the received
!		message buffer.
!	NML$GL_PRMCODE contains the index into the change parameter table
!	    (NML$AB_CPTABLE).
!
! IMPLICIT OUTPUTS:
!
!	If the parameter is valid then a descriptor entry will be created for
!	it in NML$AW_PRM_DES and NML$GW_PRMDESCNT will be incremented.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns NML$_STS_SUC.
!
! SIDE EFFECTS:
!
!	If the parameter fails the semantic check, an error message
!	(NMA$C_STS_PVA) is signalled.  If the parameter descriptor buffer
!	is full then a software error (NMA$C_STS_MPR) is signalled with
!	optional text to identify the error.
!
!--

    BEGIN

    $NPA_ARGDEF;			! Define NPARSE block reference

    LOCAL
	MSGSIZE,			! Resultant message size
	LEN,
	PTR;				! Temporary parameter pointer
!
! Add descriptor entry for this parameter.
!
    LEN = .NPARSE_BLOCK [NPA$L_FLDCNT];
    PTR = .NPARSE_BLOCK [NPA$L_FLDPTR];

    NML$CHKPRMVAL (.NML$GL_PRMCODE, .LEN, .PTR);
    NML$SAVEPARAM (.NML$GL_PRMCODE, .LEN, .PTR);

    NML$GL_PRMCODE = 0;			! Reset parsing code

    RETURN NML$_STS_SUC

    END;				! End of NML$PRM_CHECK

%SBTTL 'NML$PRM_OBJPRV  Check object privilege parameter value'
GLOBAL ROUTINE NML$PRM_OBJPRV =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This is a NPARSE action routine that handles the object privilege
!	mask.  The mask is generally a quadword but only the lower longword
!	is currently used by VMS.  If this situation changes than this routine
!	must also be changed.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NPARSE_BLOCK (pointed to by AP) contains the parsed parameter data.
!	    NPA$L_FLDCNT is the parameter length.
!	    NPA$L_FLDPTR is a pointer to the parameter in the received
!		message buffer.
!	NML$GL_PRMCODE contains the index into the change parameter table
!	    (NML$AB_CPTABLE).
!
! IMPLICIT OUTPUTS:
!
!	If the parameter is valid then a descriptor entry will be created for
!	it in NML$AW_PRM_DES and NML$GW_PRMDESCNT will be incremented.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns NML$_STS_SUC.
!
! SIDE EFFECTS:
!
!	If the parameter fails the semantic check, an error message
!	(NMA$C_STS_PVA) is signalled.  If the parameter descriptor buffer
!	is full then a software error (NMA$C_STS_MPR) is signalled with
!	optional text to identify the error.
!
!--

    BEGIN

    $NPA_ARGDEF;			! Define NPARSE block reference

    LOCAL
	MSGSIZE,			! Resultant message size
	LEN,
	PTR;				! Temporary parameter pointer
!
! Add descriptor entry for this parameter.
!
    LEN = .NPARSE_BLOCK [NPA$L_FLDCNT] - 1;

    IF .LEN GTRU 4
    THEN
	LEN = 4;			! Maximum of four bytes

    PTR = .NPARSE_BLOCK [NPA$L_FLDPTR] + 1;
    NML$SAVEPARAM (.NML$GL_PRMCODE, .LEN, .PTR);

    NML$GL_PRMCODE = 0;			! Reset parsing code

    RETURN NML$_STS_SUC

    END;				! End of NML$PRM_OBJPRV

%SBTTL 'NML$PRM_STRCHK  Check parameter value'
GLOBAL ROUTINE NML$PRM_STRCHK =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This is a NPARSE action routine that checks a parameter value
!	against its description in the parameter semantic table.  If
!	the parameter is valid, a descriptor entry is created.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NPARSE_BLOCK (pointed to by AP) contains the parsed parameter data.
!	    NPA$L_FLDCNT is the parameter length.
!	    NPA$L_FLDPTR is a pointer to the parameter in the received
!		message buffer.
!	NML$GL_PRMCODE contains the index into the change parameter table
!	    (NML$AB_CPTABLE).
!
! IMPLICIT OUTPUTS:
!
!	If the parameter is valid then a descriptor entry will be created for
!	it in NML$AW_PRM_DES and NML$GW_PRMDESCNT will be incremented.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns NML$_STS_SUC.
!
! SIDE EFFECTS:
!
!	If the parameter fails the semantic check, an error message
!	(NMA$C_STS_PVA) is signalled.  If the parameter descriptor buffer
!	is full then a software error (NMA$C_STS_MPR) is signalled with
!	optional text to identify the error.
!
!--

    BEGIN

    $NPA_ARGDEF;			! Define NPARSE block reference

    LOCAL
	MSGSIZE,			! Resultant message size
	LEN,
	PTR;				! Temporary parameter pointer
!
! Add descriptor entry for this parameter.
!
    LEN = .NPARSE_BLOCK [NPA$L_FLDCNT] - 1;
    PTR = .NPARSE_BLOCK [NPA$L_FLDPTR] + 1;

    NML$CHKPRMVAL (.NML$GL_PRMCODE, .LEN, .PTR);
    NML$SAVEPARAM (.NML$GL_PRMCODE, .LEN, .PTR);

    NML$GL_PRMCODE = 0;			! Reset parsing code

    RETURN NML$_STS_SUC

    END;				! End of NML$PRM_STRCHK

%SBTTL 'NML$PRM_CLEAR  Remove entity parameter from data base (action routine)'
GLOBAL ROUTINE NML$PRM_CLEAR =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This is a NPARSE action routine that removes a parameter from the
!	specified entity by creating a parameter descriptor.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NPARSE argument block.
!
! IMPLICIT OUTPUTS:
!
!	A parameter descriptor is added to NML$AW_PRM_DES and the count
!	(NML$GW_PRMDESCNT) is incremented.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	If no room remains in the descriptor area then a software error
!	(NMA$C_STS_MPR) will be signalled indicating buffer overflow.
!
!--

    BEGIN

    $NPA_ARGDEF;			! Define NPARSE block reference	
!
! Add descriptor.
!
    NML$GL_PRMCODE = .NPARSE_BLOCK [NPA$L_PARAM];
    NML$SAVEPARAM (.NML$GL_PRMCODE, 0, 0);
    NML$GL_PRMCODE = 0;

    RETURN NML$_STS_SUC

    END;				! End of NML$PRM_CLEAR


%SBTTL 'NML$PRM_CHKEXE	Check executor parameter group'
GLOBAL ROUTINE NML$PRM_CHKEXE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This is a NPARSE action routine that checks the parameter
!	code to make sure it is in the same group (executor-only or
!	node) as any previously specified parameters.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NPARSE_BLOCK (pointed to by AP) contains the parsed parameter data.
!	    NPA$L_FLDPTR is a pointer code to the parameter in the received
!		message buffer.
!
! IMPLICIT OUTPUTS:
!
!	If the parameter is in the correct group then the flag for that
!	group will be set in NML$GL_PRS_FLGS.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns NML$_STS_SUC.
!
! SIDE EFFECTS:
!
!	If the parameter is in the wrong group then an invalid parameter
!	grouping applicable error (NMA$C_STS_PGP) will be signalled.
!
!--

    BEGIN

    $NPA_ARGDEF;			! Define NPARSE block reference

    LOCAL
	MSGSIZE;
!
! If this is not the executor-only parameter group return error.
!
    IF .NML$GL_PRS_FLGS [NML$V_PRS_NODPG]
    THEN
	NML$ERROR_2 (NMA$C_STS_PGP,
		     .(.NPARSE_BLOCK [NPA$L_FLDPTR])<0,16>);

    NML$GL_PRS_FLGS [NML$V_PRS_EXEPG] = 1; ! Set executor flag

    RETURN NML$_STS_SUC

    END;				! End of NML$PRM_CHKEXE

%SBTTL 'NML$PRM_CHKNOD  Check node parameter group'
GLOBAL ROUTINE NML$PRM_CHKNOD =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This is a NPARSE action routine that checks the executor parameter
!	code to make sure it is in the same group (executor-only or
!	node) as any previously specified parameters.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NPARSE_BLOCK (pointed to by AP) contains the parsed parameter data.
!	    NPA$L_FLDPTR is a pointer code to the parameter in the received
!		message buffer.
!
! IMPLICIT OUTPUTS:
!
!	If the parameter is in the correct group then the flag for that
!	group will be set in NML$GL_PRS_FLGS.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns NML$_STS_SUC.
!
! SIDE EFFECTS:
!
!	If the parameter is in the wrong group then an invalid parameter
!	grouping applicable error (NMA$C_STS_PGP) will be signalled.
!
!--

    BEGIN

    $NPA_ARGDEF;			! Define NPARSE block reference

    LOCAL
	MSGSIZE;
!
! If this is not the executor-only parameter group return error.
!
    IF .NML$GL_PRS_FLGS [NML$V_PRS_EXEPG]
    THEN
	NML$ERROR_2 (NMA$C_STS_PGP,
		     .(.NPARSE_BLOCK [NPA$L_FLDPTR])<0,16>);

    NML$GL_PRS_FLGS [NML$V_PRS_NODPG] = 1; ! Set node flag

    RETURN NML$_STS_SUC

    END;				! End of NML$PRM_CHKNOD

%SBTTL 'NML$PRM_CHKREM  Check remote node parameter group'
GLOBAL ROUTINE NML$PRM_CHKREM =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This is a NPARSE action routine that checks the remote node parameter
!	code to make sure it is in the same group (loop or remote
!	node) as any previously specified parameters.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NPARSE_BLOCK (pointed to by AP) contains the parsed parameter data.
!	    NPA$L_FLDPTR is a pointer code to the parameter in the received
!		message buffer.
!
! IMPLICIT OUTPUTS:
!
!	If the parameter is in the correct group then the flag for that
!	group will be set in NML$GL_PRS_FLGS.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns NML$_STS_SUC.
!
! SIDE EFFECTS:
!
!	If the parameter is in the wrong group then an invalid parameter
!	grouping applicable error (NMA$C_STS_PGP) will be signalled.
!
!--

    BEGIN

    $NPA_ARGDEF;			! Define NPARSE block reference

    LOCAL
	MSGSIZE;
!
! If this is the loop node parameter group return error.
!
    IF .NML$GL_PRS_FLGS [NML$V_PRS_LOOPG]
    THEN
	NML$ERROR_2 (NMA$C_STS_PNA,
		     .(.NPARSE_BLOCK [NPA$L_FLDPTR])<0,16>);

    NML$GL_PRS_FLGS [NML$V_PRS_REMPG] = 1; ! Set remote node flag

    RETURN NML$_STS_SUC

    END;				! End of NML$PRM_CHKREM

%SBTTL 'NML$PRM_CHKLOO  Check loop node parameter group'
GLOBAL ROUTINE NML$PRM_CHKLOO =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This is a NPARSE action routine that checks the loop node parameter
!	code to make sure it is in the same group (remote or loop
!	node) as any previously specified parameters.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NPARSE_BLOCK (pointed to by AP) contains the parsed parameter data.
!	    NPA$L_FLDPTR is a pointer code to the parameter in the received
!		message buffer.
!
! IMPLICIT OUTPUTS:
!
!	If the parameter is in the correct group then the flag for that
!	group will be set in NML$GL_PRS_FLGS.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns NML$_STS_SUC.
!
! SIDE EFFECTS:
!
!	If the parameter is in the wrong group then a parameter not
!	applicable error (NMA$C_STS_PNA) will be signalled.
!
!--

    BEGIN

    $NPA_ARGDEF;			! Define NPARSE block reference

    MAP
	NML$GB_OPTIONS : BBLOCK [1];

    EXTERNAL LITERAL
	CPT$GK_PCNO_A$$;		! Loop node address

    BIND
	NODADR = UPLIT WORD (0) : WORD;
!
! If this is the remote node parameter group return error.
!
    IF .NML$GL_PRS_FLGS [NML$V_PRS_REMPG]
    THEN
	NML$ERROR_2 (NMA$C_STS_PNA,
		     .(.NPARSE_BLOCK [NPA$L_FLDPTR])<0,16>);

    NML$GL_PRS_FLGS [NML$V_PRS_LOOPG] = 1; ! Set loop node flag
!
! If this is a SET/DEFINE (not CLEAR/PURGE) operation then add a zero
! node address to get around an idiosyncracy in NETACP.
!
    IF NOT .NML$GB_OPTIONS [NMA$V_OPT_CLE]
    THEN
	NML$SAVEPARAM (CPT$GK_PCNO_A$$, 2, NODADR);

    RETURN NML$_STS_SUC

    END;				! End of NML$PRM_CHKLOO

%SBTTL 'NML$PRM_CHKKNO	Check for KNOWN entity option'
GLOBAL ROUTINE NML$PRM_CHKKNO =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This is a NPARSE action routine that checks the parameter
!	code to make sure it is not applied to KNOWN parameters.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NPARSE_BLOCK (pointed to by AP) contains the parsed parameter data.
!	    NPA$L_FLDPTR is a pointer code to the parameter in the received
!			message buffer.
!	NML$GB_ENTFRM contains the entity format code.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns NML$_STS_SUC.
!
! SIDE EFFECTS:
!
!	If KNOWN entities is specified then a parameter not applicable
!	error (NMA$C_STS_PNA) is signalled.
!
!--

    BEGIN

    $NPA_ARGDEF;			! Define NPARSE block reference

    MAP
	NML$GB_ENTFRM : BYTE SIGNED;

    LOCAL
	MSGSIZE;
!
! If KNOWN entities is selected then return error.
!
    IF .NML$GB_ENTFRM EQL NMA$C_ENT_KNO
    THEN
	NML$ERROR_2 (NMA$C_STS_PNA,
		     .(.NPARSE_BLOCK [NPA$L_FLDPTR])<0,16>);

    RETURN NML$_STS_SUC

    END;				! End of NML$PRM_CHKKNO

%SBTTL 'NML$PRM_CHKEFI	Check event logging parameter group'
GLOBAL ROUTINE NML$PRM_CHKEFI =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This is a NPARSE action routine that checks the parameter
!	code to make sure it is in the same group (event logging
!	information) as any previously specified parameters.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NPARSE_BLOCK (pointed to by AP) contains the parsed parameter data.
!	    NPA$L_FLDPTR is a pointer code to the parameter in the received
!		message buffer.
!
! IMPLICIT OUTPUTS:
!
!	If the parameter is in the correct group then the flag for that
!	group will be set in NML$GL_PRS_FLGS.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns NML$_STS_SUC.
!
! SIDE EFFECTS:
!
!	If the parameter is in the wrong group then an invalid parameter
!	grouping applicable error (NMA$C_STS_PGP) will be signalled.
!
!--

    BEGIN

    $NPA_ARGDEF;			! Define NPARSE block reference

    LOCAL
	MSGSIZE;
!
! If this is not the event logging information parameter group return error.
!
    IF .NML$GL_PRS_FLGS [NML$V_PRS_ESIPG]
    THEN
	NML$ERROR_2 (NMA$C_STS_PGP,
		     .(.NPARSE_BLOCK [NPA$L_FLDPTR])<0,16>);

    NML$GL_PRS_FLGS [NML$V_PRS_EFIPG] = 1; ! Set group flag

    RETURN NML$_STS_SUC

    END;				! End of NML$PRM_CHKEFI

%SBTTL 'NML$PRM_CHKESI	Check event sink parameter group'
GLOBAL ROUTINE NML$PRM_CHKESI =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This is a NPARSE action routine that checks the parameter
!	code to make sure it is in the same group (event sink
!	information) as any previously specified parameters.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NPARSE_BLOCK (pointed to by AP) contains the parsed parameter data.
!	    NPA$L_FLDPTR is a pointer code to the parameter in the received
!		message buffer.
!
! IMPLICIT OUTPUTS:
!
!	If the parameter is in the correct group then the flag for that
!	group will be set in NML$GL_PRS_FLGS.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns NML$_STS_SUC.
!
! SIDE EFFECTS:
!
!	If the parameter is in the wrong group then an invalid parameter
!	grouping applicable error (NMA$C_STS_PGP) will be signalled.
!
!--

    BEGIN

    $NPA_ARGDEF;			! Define NPARSE block reference

    LOCAL
	MSGSIZE;
!
! If this is not the event sink information parameter group return error.
!
    IF .NML$GL_PRS_FLGS [NML$V_PRS_EFIPG]
    THEN
	NML$ERROR_2 (NMA$C_STS_PGP,
		     .(.NPARSE_BLOCK [NPA$L_FLDPTR])<0,16>);

    NML$GL_PRS_FLGS [NML$V_PRS_ESIPG] = 1; ! Set group flag

    RETURN NML$_STS_SUC

    END;				! End of NML$PRM_CHKESI

%SBTTL 'NML$PRM_CHK_PROTOCOL	Check X.25 Protocol Module parameter group'
GLOBAL ROUTINE NML$PRM_CHK_PROTOCOL =

!++
! FUNCTIONAL DESCRIPTION:
!	This is an NPARSE action routine that is called while parsing
!	a NICE command to change X.25 protocol module parameters.  This
!	routine checks the parameter to make sure it is in the same
!	group (DTE, GROUP, or NETWORK) as any previously specified parameters
!	in this NICE message.
!
! IMPLICIT INPUTS:
!	NPARSE_BLOCK (pointed to by AP) contains the parsed parameter data.
!	    NPA$L_FLDPTR is a pointer code to the parameter in the received
!		message buffer.
!
! IMPLICIT OUTPUTS:
!	If the parameter is in the correct group then the flag for that
!	group will be set in NML$GL_PRS_FLGS.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!	Always returns NML$_STS_SUC.
!
! SIDE EFFECTS:
!	If the parameter is in the wrong group then an invalid parameter
!	grouping applicable error (NMA$C_STS_PGP) will be signalled.
!
!--

BEGIN

$NPA_ARGDEF;			! Define NPARSE block reference

LITERAL
    ALL_PROTOCOL_GROUPS = NML$M_DTE_GROUP OR NML$M_GROUP_GROUP OR
					NML$M_NET_GROUP;

LOCAL
    OTHER_GROUPS,
    MSGSIZE;

MAP
    NML$GL_PRS_FLGS : LONG;
!
! Use the mask from the parsing tables to get a mask of all other
! X.25 protocol parameter groups.  If any of these other groups
! have a bit set in NML$GL_PRS_FLGS, a parameter for that group
! has already been encountered in the NICE message.  If so,
! return an error message.
!
OTHER_GROUPS = ALL_PROTOCOL_GROUPS AND NOT .NPARSE_BLOCK [NPA$L_PARAM];
IF (.OTHER_GROUPS AND .NML$GL_PRS_FLGS) NEQ 0 THEN
    NML$ERROR_2 (NMA$C_STS_PGP,
		 .(.NPARSE_BLOCK [NPA$L_FLDPTR])<0,16>);

!
! Set group flag to check against subsequent parameters in the NICE msg.
!
NML$GL_PRS_FLGS = .NML$GL_PRS_FLGS OR .NPARSE_BLOCK [NPA$L_PARAM];
RETURN NML$_STS_SUC
END;		! of NML$PRM_CHK_PROTOCOL

%SBTTL 'NML$PRM_CHKHOST	Check host node id'
GLOBAL ROUTINE NML$PRM_CHKHOST =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This is a NPARSE action that checks the host node id for validity.
!	The host id is always saved as a node address.  If the host node
!	is specified by name and no corresponding address can be found 
!	in the data base then an error is returned.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NPARSE_BLOCK [NPA$L_FLDPTR] contains the pointer to the entity
!	    format code and id string.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	If the host node id is invalid then an invalid identification format
!	error (NML$_STS_IDE) will be signalled.
!
!--

    BEGIN

    $NPA_ARGDEF;			! Define NPARSE block reference

    OWN
	HOSTADR : WORD;

    LOCAL
	LENGTH,
	ADDR;
!
! Get length and address of host id string.
!
    LENGTH = .(.NPARSE_BLOCK [NPA$L_FLDPTR])<0,8>; ! Get length
    ADDR = .NPARSE_BLOCK [NPA$L_FLDPTR] + 1;
!
! If length is zero then id is a node address, otherwise it is a counted
! node name string.
!
    IF .LENGTH EQL 0
    THEN
	HOSTADR = .(.ADDR)<0,16>
    ELSE
	BEGIN

	NMA$OPENFILE (NMA$C_OPN_NODE, NMA$C_OPN_AC_RO);

	IF NOT NML$GETNODADR (.LENGTH, .ADDR, HOSTADR)
	THEN
	    NML$ERROR_2 (NMA$C_STS_IDE, NMA$C_ENT_NOD);

	NMA$CLOSEFILE (NMA$C_OPN_NODE);

	END;
!
! Save the host node address.
!
    NML$SAVEPARAM (.NML$GL_PRMCODE, 2, HOSTADR);

    NML$GL_PRMCODE = 0;			! Reset parameter code

    RETURN NML$_STS_SUC

    END;				! End of NML$PRM_CHKHOST

%SBTTL	'NML$PRM_VFYNOD  Verify a node request'
GLOBAL ROUTINE	NML$PRM_VFYNOD =
!++
! FUNCTIONAL DESCRIPTION:
!
!	This is a NPARSE action routine that verifies the requested
!	service request (LOAD/TRIGGER/DUMP) is a node request and
!	not a circuit request. 
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NPARSE_BLOCK (pointed to by AP) contains the parsed parameter
!	data.
!
!	NML$GL_PRS_FLGS	contain the flag which indicates if a circuit or
!	node request.
!
! ROUTINE VALUE:
! COMPLETION CODE:
!
!	If request is a node request NML$_STS_SUC is returned.
!	Otherwise a parameter not applicable error (NMA$C_STS_PNA) will
!	be signalled.
!
! SIDE EFFECTS:
!
!	If error then message is signalled.
!
!--
    BEGIN

    $NPA_ARGDEF;			! Define NPARSE block reference
!
! Verify that request is not a circuit request (node request).
! Signal errror if circuit request.
!
    IF .NML$GL_PRS_FLGS [NML$V_PRS_LSV]
    THEN
	NML$ERROR_2 (NMA$C_STS_PNA,
		     .(.NPARSE_BLOCK [NPA$L_FLDPTR])<0,16>);

    RETURN NML$_STS_SUC
	
    END;				! End NML$PRM_VFYNOD routine

%SBTTL 'NML$PRM_ERR  Build and signal error (action routine)'
GLOBAL ROUTINE NML$PRM_ERR =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This is a NPARSE action routine that signals parameter errors.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NPARSE argument block.
!
!		NPA$L_PARAM contains the error code.
!		NPA$L_FLDPTR points to the parameter in the message.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	Error message is signalled.
!
!--

    BEGIN

    $NPA_ARGDEF;			! Define NPARSE block reference

    LOCAL
	ERR_CODE,			! Error code
	ERR_DETAIL;			! Error detail

    ERR_CODE = .NPARSE_BLOCK [NPA$L_PARAM]; ! Get error code
!
! Check for parameters to move in addition to error status.
!
    ERR_DETAIL = (
	SELECTONEU .ERR_CODE OF
	    SET

	    [NMA$C_STS_PTY,
	     NMA$C_STS_PVA,
	     NMA$C_STS_PNA]:

		.(.NPARSE_BLOCK [NPA$L_MSGPTR] - 2)<0,16,0>; ! Get detail code

	    [OTHERWISE]:

		-1;

	    TES);

    NML$ERROR_2 (.ERR_CODE, .ERR_DETAIL); ! Signal error message

    RETURN NML$_STS_SUC			! Return success

    END;				! End of NML$PRM_ERR


%SBTTL 'NML$PRM_EVTSRCTYP  Get event source type code'
GLOBAL ROUTINE NML$PRM_EVTSRCTYP =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This is an NPARSE action routine  that saves the event source type 
!	code.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NPARSE_BLOCK (pointed to by AP) contains the parsed parameter data.
!	    NPA$L_FLDCNT is the parameter length.
!	    NPA$L_FLDPTR is a pointer to the parameter in the received
!		message buffer.
!
! IMPLICIT OUTPUTS:
!
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    $NPA_ARGDEF;			! Define NPARSE block reference
!
! Save the event source type code.
!
    NML$GB_EVTSRCTYP = .(.NPARSE_BLOCK [NPA$L_FLDPTR])<0,8>;
    NML$GL_PRS_FLGS [NML$V_PRS_EVE] = 1; ! Flag event parameter processed

    RETURN NML$_STS_SUC

    END;				! End of NML$PRM_EVTSRCTYP

%SBTTL 'NML$PRM_EVTSOURCE  Get event source descriptor'
GLOBAL ROUTINE NML$PRM_EVTSOURCE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This is an NPARSE action routine that saves the event source id.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NPARSE_BLOCK (pointed to by AP) contains the parsed parameter data.
!	    NPA$L_FLDCNT is the parameter length.
!	    NPA$L_FLDPTR is a pointer to the parameter in the received
!		message buffer.
!
! IMPLICIT OUTPUTS:
!
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    $NPA_ARGDEF;			! Define NPARSE block reference

    LOCAL
	ADDR   : WORD,
	NAMLEN,
	NAMPTR;
!
! Save the event source string descriptor information.
!
    IF .NML$GB_EVTSRCTYP EQLU NMA$C_ENT_LIN
    OR .NML$GB_EVTSRCTYP EQLU NMA$C_ENT_CIR
    THEN
	BEGIN

	NML$GQ_EVTSRCDSC [DSC$W_LENGTH] =
	    .(.NPARSE_BLOCK [NPA$L_FLDPTR])<0,8>;
	NML$GQ_EVTSRCDSC [DSC$A_POINTER] =
	    .NPARSE_BLOCK [NPA$L_FLDPTR] + 1;

	END
    ELSE
	BEGIN

	IF .(.NPARSE_BLOCK [NPA$L_FLDPTR])<0,8> EQLU 0
	THEN
	    NML$GQ_EVTSRCDSC [DSC$A_POINTER] =
		.(.NPARSE_BLOCK [NPA$L_FLDPTR] + 1)<0,16>
	ELSE
	    BEGIN

	    NMA$OPENFILE (NMA$C_OPN_NODE, NMA$C_OPN_AC_RO);
	    NAMLEN = .(.NPARSE_BLOCK [NPA$L_FLDPTR])<0,8>;
	    NAMPTR = .NPARSE_BLOCK [NPA$L_FLDPTR] + 1;

	    IF NML$GETNODADR (.NAMLEN, .NAMPTR, ADDR)
	    THEN
		NML$GQ_EVTSRCDSC [DSC$A_POINTER] = .ADDR
	    ELSE
		NML$ERROR_2 (NMA$C_STS_IDE, NMA$C_ENT_NOD);

	    NMA$CLOSEFILE (NMA$C_OPN_NODE);

	    END;

	NML$GQ_EVTSRCDSC [DSC$W_LENGTH] = 0;

	END;

    RETURN NML$_STS_SUC

    END;				! End of NML$PRM_EVTSOURCE

%SBTTL 'NML$PRM_EVTCLASS  Get event class code'
GLOBAL ROUTINE NML$PRM_EVTCLASS =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This is a NPARSE action routine that saves the event class 
!	information.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NPARSE_BLOCK (pointed to by AP) contains the parsed parameter data.
!	    NPA$L_FLDCNT is the parameter length.
!	    NPA$L_FLDPTR is a pointer to the parameter in the received
!		message buffer.
!
! IMPLICIT OUTPUTS:
!
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    $NPA_ARGDEF;			! Define NPARSE block reference
!
! Save the event class code (only the low 9 bits).
!
    NML$GW_EVTCLASS = .(.NPARSE_BLOCK [NPA$L_FLDPTR])<0,9>;

    RETURN NML$_STS_SUC

    END;				! End of NML$PRM_EVTCLASS

%SBTTL 'NML$PRM_EVTMSKTYP  Get event mask type code'
GLOBAL ROUTINE NML$PRM_EVTMSKTYP =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This is a NPARSE action routine that saves the event mask type code.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NPARSE_BLOCK (pointed to by AP) contains the parsed parameter data.
!	    NPA$L_FLDCNT is the parameter length.
!	    NPA$L_FLDPTR is a pointer to the parameter in the received
!		message buffer.
!
! IMPLICIT OUTPUTS:
!
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    $NPA_ARGDEF;			! Define NPARSE block reference
!
! Save the event mask type code.
!
    NML$GB_EVTMSKTYP = .(.NPARSE_BLOCK [NPA$L_FLDPTR])<6,2>;

    RETURN NML$_STS_SUC

    END;				! End of NML$PRM_EVTMSKTYP

%SBTTL 'NML$PRM_EVTMASK  Get event mask'
GLOBAL ROUTINE NML$PRM_EVTMASK =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This is a NPARSE action routine that saves the event mask.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NPARSE_BLOCK (pointed to by AP) contains the parsed parameter data.
!	    NPA$L_FLDCNT is the parameter length.
!	    NPA$L_FLDPTR is a pointer to the parameter in the received
!		message buffer.
!
! IMPLICIT OUTPUTS:
!
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    $NPA_ARGDEF;			! Define NPARSE block reference

    LOCAL
	STATUS;				! Return status
!
! Save the event mask descriptor information.
!
    NML$GQ_EVTMSKDSC [DSC$W_LENGTH] =
	.(.NPARSE_BLOCK [NPA$L_FLDPTR])<0,8>;

    NML$GQ_EVTMSKDSC [DSC$A_POINTER] =
	.NPARSE_BLOCK [NPA$L_FLDPTR] + 1;
!
! If the event mask is all zeroes then it is not valid.
!
    STATUS = NML$_STS_PVA;

    INCR I FROM 0 TO .NML$GQ_EVTMSKDSC [DSC$W_LENGTH] - 1 DO
	BEGIN

	IF .(.NML$GQ_EVTMSKDSC [DSC$A_POINTER] + .I)<0,8> NEQ 0
	THEN
	    BEGIN

	    STATUS = NML$_STS_SUC;
	    EXITLOOP;

	    END;
	END;
!
! If an error is detected then return an invalid parameter value error.
!
    IF NOT .STATUS
    THEN
	NML$ERROR_2 (NMA$C_STS_PVA, NMA$C_PCLO_EVE);

    RETURN .STATUS

    END;				! End of NML$PRM_EVTMASK

%SBTTL 'NML$PRM_CHKEVE	Check for event parameter'
GLOBAL ROUTINE NML$PRM_CHKEVE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This is a NPARSE action routine that checks for the presence
!	of the event parameter.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NPARSE_BLOCK
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns NML$_STS_SUC.
!
! SIDE EFFECTS:
!
!
!--

    BEGIN

    $NPA_ARGDEF;			! Define NPARSE block reference
!
! If this is the event filter (EFI) parameter group and no event logging
! parameter has been specified then return a parameter missing error.
!
    IF .NML$GL_PRS_FLGS [NML$V_PRS_EFIPG]
    AND NOT .NML$GL_PRS_FLGS [NML$V_PRS_EVE]
    THEN
	NML$ERROR_2 (NMA$C_STS_PMS,
		     NMA$C_PCLO_EVE);

    RETURN NML$_STS_SUC

    END;				! End of NML$PRM_CHKEVE

END					! End of module

ELUDOM
