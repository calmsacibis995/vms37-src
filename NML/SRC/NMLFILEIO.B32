%TITLE 'NML File I/O modules'
MODULE NML$FILEIO (
		LANGUAGE (BLISS32),
		ADDRESSING_MODE (NONEXTERNAL=LONG_RELATIVE),
		ADDRESSING_MODE (EXTERNAL=LONG_RELATIVE),
		IDENT = 'V03-000'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  DECnet-VAX V2.0 Network Management Listener
!
! ABSTRACT:
!
!	This module contains routines to handle I/O for the permanent
!	data base files.
!
! ENVIRONMENT:  VAX/VMS Operating System
!
! AUTHOR:  Distributed Systems Software Engineering
!
! CREATION DATE:  30-DEC-1979
!
! MODIFIED BY:
!
!--


%SBTTL 'Declarations'

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    NML$OPENFILE,
    NML$READRECORD,
    NML$MATCHRECORD,
    NML$WRITERECORD,
    NML$DELETRECORD,
    NML_CHKFILEIO;

!
! INCLUDE FILES:
!

LIBRARY 'LIB$:NMLLIB.L32';
LIBRARY 'SHRLIB$:NMALIBRY.L32';
LIBRARY 'SYS$LIBRARY:STARLET.L32';

!
! EXTERNAL REFERENCES:
!

$NML_EXTDEF;

EXTERNAL LITERAL
    NML$_READERR,
    NML$_WRITERR,
    NML$_DELETERR,
    NML$_RECREPLC,
    NML$_RECADDED,
    NML$_RECDELET,
    NML$_NORECOWN;

EXTERNAL
    NML$GQ_PROPRVMSK : BBLOCK [8];

EXTERNAL ROUTINE
    NMA$DELETEREC,
    NMA$MATCHREC,
    NMA$OPENFILE,
    NMA$READREC,
    NMA$WRITEREC,
    NML$BLD_REPLY,
    NML$ERROR_1,
    NML$SEND;


%SBTTL 'NML$OPENFILE  Open permanent data base file'
GLOBAL ROUTINE NML$OPENFILE (FID, ACCESS) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine opens the permanent data base file(s) specified by
!	the code in FID with the required access as specified by the
!	code in ACCESS.
!
! FORMAL PARAMETERS:
!
!	FID 		Permanent data base file identification code
!			(NMA$C_OPN_xxxx).
!	ACCESS 		File access code (NMA$C_OPN_AC_RO=>read,
!			NMA$C_OPN_AC_RW=>read/write).
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Returns a code indicating success.
!
! SIDE EFFECTS:
!
!	Causes errors to be signaled.
!
!--

    BEGIN

    LOCAL
	STATUS;
!
! Check process privilege mask for OPER before opening file for write.
!
    IF (.ACCESS EQLU NMA$C_OPN_AC_RW)
    AND NOT .NML$GQ_PROPRVMSK [PRV$V_OPER]
    THEN
	NML$ERROR_1 (NMA$C_STS_PRI);
!
! Open the permanent data base file.
!
    STATUS = NMA$OPENFILE (.FID,
			   .ACCESS);
!
! Check the status and return it if it is success.  If an error
! has occurred then a file open error will be signalled.
!
    RETURN NML_CHKFILEIO (NMA$C_STS_FOP,
			  .STATUS);

    END;				! End of NML$OPENFILE

%SBTTL 'NML$READRECORD  Read record from permanent data base file'
GLOBAL ROUTINE NML$READRECORD (FID, KEY, BUFDSC, RTNDSC) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine reads a record from a permanent data base file.
!
! FORMAL PARAMETERS:
!
!	FID	 	Permanent data base file identification code.
!	KEY		Address of one-word buffer to hold the record key.
!	BUFDSC		Descriptor of buffer to hold record.
!	RTNDSC		Descriptor of data in record.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Returns a code indicating success or end of file.
!
! SIDE EFFECTS:
!
!	Signals error.
!
!--

    BEGIN

    LOCAL
	STATUS;
!
! Read record.
!
    STATUS = NMA$READREC (.FID, .KEY, .BUFDSC, .RTNDSC);
!
! If the operation was successful or the end of the file was reached (record
! not found) then return the success code.  Otherwise, cause a file I/O error
! message to be signalled.
!
    IF .STATUS
    OR (.STATUS EQLU RMS$_RNF)
    THEN
	RETURN .STATUS
    ELSE
	RETURN NML_CHKFILEIO (NMA$C_STS_FIO,
			      .STATUS);

    END;				! End of NML$READRECORD

%SBTTL 'NML$MATCHRECORD  Match record from permanent data base file'
GLOBAL ROUTINE NML$MATCHRECORD (FID, BUFDSC, KEY, ID, LEN, ADR, RTNDSC) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine matches a record from a permanent data base file.
!
! FORMAL PARAMETERS:
!
!	FID 		Permanent data base file identification code.
!	BUFDSC		Descriptor of buffer to contain the record.
!	KEY		Address of one-word buffer for record key.
!	ID		Code of parameter to match.
!	LEN		Length of parameter value to match.
!	ADR		Address of parameter value string to match.
!	RTNDSC		Descriptor of data in record.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	A success code or an error indicating end of file will be returned.
!
! SIDE EFFECTS:
!
!	Any errors will cause a status message to be signalled.
!
!--

    BEGIN

    LOCAL
	STATUS;
!
! Read record.
!
    STATUS = NMA$MATCHREC (.FID,
			   .BUFDSC,
			   .KEY,
			   .ID,
			   .LEN,
			   .ADR,
			   .RTNDSC);
!
! If the operation was successful or the end of the file was reached (record
! not found) then return the success code.  Otherwise, cause a file I/O error
! message to be signalled.
!
    IF .STATUS
    OR (.STATUS EQLU RMS$_RNF)
    THEN
	RETURN .STATUS
    ELSE
	RETURN NML_CHKFILEIO (NMA$C_STS_FIO,
			      .STATUS);

    END;				! End of NML$READRECORD

%SBTTL 'NML$WRITERECORD  Write record to permanent data base file'
GLOBAL ROUTINE NML$WRITERECORD (FID, KEY, RECDSC) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine writes the record with the specified key into a
!	permanent data base file.
!
! FORMAL PARAMETERS:
!
!	FID 		Permanent data base file identification code.
!	KEY		Address of one-word key of record to be written.
!	RECDSC		Descriptor of record data to be written.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	A code indicating success will be returned.
!
! SIDE EFFECTS:
!
!	Any errors will cause a file I/O error to be signalled.
!
!--

    BEGIN

    LOCAL
	STATUS;
!
! Write record.
!
    STATUS = NMA$WRITEREC (.FID, .KEY, .RECDSC);
!
! Check the status and return if it is success.  Otherwise, cause a
! file I/O error message to be signalled.
!
    RETURN NML_CHKFILEIO (NMA$C_STS_FIO, .STATUS);

    END;				! End of NML$WRITERECORD

%SBTTL 'NML$DELETRECORD  Delete record from permanent data base file'
GLOBAL ROUTINE NML$DELETRECORD (FID, KEY) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine deletes the record with the specified key from
!	the permanent data base file.
!
! FORMAL PARAMETERS:
!
!	FID 		Permanent data base file identification code.
!	KEY		Address of one-word key of record to be written.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	A code indicating success will be returned.
!
! SIDE EFFECTS:
!
!	Any errors will cause a file I/O error to be signalled.
!
!--

    BEGIN

    LOCAL
	STATUS;
!
! Delete record from the permanent data base file.
!
    STATUS = NMA$DELETEREC (.FID, .KEY);
!
! Check the status and return if it is success.  Otherwise, cause a
! file I/O error message to be signalled.
!
    RETURN NML_CHKFILEIO (NMA$C_STS_FIO, .STATUS);

    END;					! End of NML$DELETRECORD

%SBTTL 'NML_CHKFILEIO  Return file I/O status'
ROUTINE NML_CHKFILEIO (OPCODE, STATUS) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine checks the status of file I/O operations and
!	signals a status message if an error occurs.
!
! FORMAL PARAMETERS:
!
!	OPCODE		Operation error code to return in message.
!	STATUS		Operation status to be examined.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Returns success (NML$_STS_SUC) if the STATUS indicates success.
!
! SIDE EFFECTS:
!
!	Signals an error message if STATUS indicates error.
!
!--

    BEGIN

    LOCAL
	MSGSIZE;			! Message size
!
! If the status is not success then build a status message and signal it.
!
    IF NOT .STATUS
    THEN
	BEGIN
!
! Failed to open file so signal error message.
!
	NML$AB_MSGBLOCK [MSB$L_FLAGS] =	MSB$M_DET_FLD OR
					MSB$M_MSG_FLD OR
					MSB$M_SYSM_FLD;
	NML$AB_MSGBLOCK [MSB$B_CODE] = .OPCODE;	! Add error code
	NML$AB_MSGBLOCK [MSB$W_DETAIL] = NMA$C_FOPDTL_PDB; ! Add file id code
	NML$AB_MSGBLOCK [MSB$L_TEXT] = .STATUS;

	NML$BLD_REPLY (NML$AB_MSGBLOCK, MSGSIZE);
	$SIGNAL_MSG (NML$AB_SNDBUFFER, .MSGSIZE);

	END;

    RETURN NML$_STS_SUC

    END;				! End of NML_CHKFILEIO

END					! End of module

ELUDOM
