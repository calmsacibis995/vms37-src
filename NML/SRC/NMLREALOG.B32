%TITLE 'NML Read logging parameter module'
MODULE NML$REALOG (
		LANGUAGE (BLISS32),
		ADDRESSING_MODE (NONEXTERNAL=LONG_RELATIVE),
		ADDRESSING_MODE (EXTERNAL=LONG_RELATIVE),
		IDENT = 'V03-000'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  DECnet-VAX V2.0 Network Management Listener
!
! ABSTRACT:
!
!	This module contains routines for processing the NCP SHOW and LIST
!	LOGGING	commands.
!
! ENVIRONMENT:  VAX/VMS Operating System
!
! AUTHOR:  Distributed Systems Software Engineering
!
! CREATION DATE:  30-DEC-1979
!
! MODIFIED BY:
!
!	V03-004	MKP0004		Kathy Perko	01-Dec-1981
!		Supply P3 parameter for calls to NML$NETQIO so that
!		debug logging only dumps pertinent contents of P4 buffer.
!
!	V03-003	MKP0003		Kathy Perko	28-Nov-1981
!		Fix read summary and events for the executor so
!		that the parameters are returned in numerical order.
!
!	V03-002	MKP0002		Kathy Perko	16-Nov-1981
!		Add circuits to logging source ids.
!
!	V03-001	MKP001		Kathy Perko	24-July-1981
!		Change parameters in call to NML$GETKNOWNLIST and
!		NML$GETACTIVELIST for new QIO interface to NETACP.
!--


%SBTTL 'Declarations'

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    NML$READKNOLOG	: NOVALUE,
    NML$READACTLOG	: NOVALUE,
    NML$READLOGGING	: NOVALUE,
    NML_LISKNOSNK	: NOVALUE,
    NML_SHOKNOSNK	: NOVALUE,
    NML_LISLOGSNK	: NOVALUE,
    NML_SHOLOGSNK	: NOVALUE,
    NML_READEXESNK	: NOVALUE,
    NML_LISEXESNK,
    NML_SHOEXESNK,
    NML_READ_SINK_NODE	: NOVALUE,
    NML_READSNKNOD	: NOVALUE,
    NML_READLOGSRC	: NOVALUE;

!
! INCLUDE FILES:
!

LIBRARY 'LIB$:NMLLIB.L32';
LIBRARY 'SHRLIB$:NMALIBRY.L32';
LIBRARY 'SYS$LIBRARY:STARLET.L32';

!
! EQUATED SYMBOLS:
!

LITERAL
    NML$K_ENTBUFLEN = 32;		! Length of entity buffer

!
! OWN STORAGE:
!

!
! Executor sink node address.
!
OWN
    NML$W_EXEADR : WORD;
!
! Entity buffer and descriptor.
!
OWN
    NML$T_ENTITYBUF : BBLOCK [NML$K_ENTBUFLEN],
    NML$Q_ENTITYDSC : DESCRIPTOR;

!
! EXTERNAL REFERENCES:
!

$NML_EXTDEF;				! Define common external data

EXTERNAL ROUTINE
    NMA$CLOSEFILE,
    NMA$OPENFILE,
    NMA$SEARCHFLD,
    NML$ADDMSGPRM,
    NML$BLD_REPLY,
    NML$BLDP2,
    NML$ERROR_1,
    NML$GETACTIVELIST,
    NML$GETEXEADR,
    NML$GETINFTABS,
    NML$GETKNOWNLIST,
    NML$GETNODNAM,
    NML$GETNXTEVT,
    NML$GETNXTSNK,
    NML$GETCOMFILTERS,
    NML$MATCHRECORD,
    NML$NETQIO,
    NML$SEND;


%SBTTL 'NML$READKNOLOG  Read known logging parameters'
GLOBAL ROUTINE NML$READKNOLOG (ENT, INF, DUM1, DUM2) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine returns permanent data base information for 
!	all logging sinks.
!
! FORMAL PARAMETERS:
!
!	ENT		Entity type code.
!	INF		Information type code.
!	DUM1		Not used.
!	DUM2		Not used.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

!
! Return data base information for console, file, and monitor sinks.
!
    NML$READLOGGING (.ENT, .INF, NMA$C_SNK_CON, 0);
    NML$READLOGGING (.ENT, .INF, NMA$C_SNK_FIL, 0);
    NML$READLOGGING (.ENT, .INF, NMA$C_SNK_MON, 0);

    END;				! End of NML$READKNOLOG

%SBTTL 'NML$READACTLOG  Read active logging parameters'
GLOBAL ROUTINE NML$READACTLOG (ENT, INF, DUM1, DUM2) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine returns permanent data base information for 
!	all active logging sinks.
!
! FORMAL PARAMETERS:
!
!	ENT		Entity type code.
!	INF		Information type code.
!	DUM1		Not used.
!	DUM2		Not used.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	BUFEND,
	LISDSC : DESCRIPTOR,
	MSGSIZE,
	PTR,
	SNK,
	STATUS,
	STRTFLG;

    STRTFLG = FALSE;

    WHILE NML$GETACTIVELIST (NML$C_SINK, .STRTFLG, LISDSC) DO
	BEGIN

	STRTFLG = TRUE;

	PTR = .LISDSC [DSC$A_POINTER];
	BUFEND = .LISDSC [DSC$A_POINTER] + .LISDSC [DSC$W_LENGTH];

	WHILE .PTR LSSA .BUFEND DO
	    BEGIN

	    SNK = .(.PTR)<0,32>;
	    PTR = .PTR + 4;

	    IF .(.PTR)<0,32> NEQU NMA$C_STATE_OFF
	    THEN
		NML$READLOGGING (.ENT, .INF, .SNK, 0);

	    PTR = .PTR + 4;

	    END;
	END;

    END;				! End of NML$READACTLOG

%SBTTL 'NML$READLOGGING  Read logging parameters'
GLOBAL ROUTINE NML$READLOGGING (ENT, INF, SNK, DUM2) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Read logging parameters from the peramanent or volatile data bases.
!
! FORMAL PARAMETERS:
!
!	ENT		Entity type code.
!	INF		Information type code.
!	SNK		Sink type code.
!	DUM2		Not used.
!
!--

BEGIN

MAP
    NML$GB_OPTIONS : BBLOCK [1];

!
! Open the node data base file.
!
NMA$OPENFILE (NMA$C_OPN_NODE, NMA$C_OPN_AC_RO);

SELECTONEU .INF OF
    SET
    [NML$C_SUMMARY,
     NML$C_EVENTS]:
	BEGIN
!
! Check parse flags to see if this is for KNOWN SINKS or a single
! sink node.
!
	IF .NML$GL_PRS_FLGS [NML$V_PRS_KNOSNK]
	THEN
	    BEGIN
	    NML_READEXESNK (.ENT, .INF, .SNK);
	    !
	    ! Decide if the operation is on the permanent or volatile data
	    ! bases.
	    !
	    IF .NML$GB_OPTIONS [NMA$V_OPT_PER]
	    THEN
		NML_LISKNOSNK (.ENT, .INF, .SNK)
	    ELSE
		NML_SHOKNOSNK (.ENT, .INF, .SNK);
	    END
	ELSE
	    BEGIN
	    IF .NML$GL_PRS_FLGS [NML$V_PRS_EXESNK]
	    THEN
		NML_READEXESNK (.ENT, .INF, .SNK)
	    ELSE
		BEGIN
		!
		! The NICE command is requesting logging information about
		! a remote sink node.  Now, call the appropriate routine to
		! get the information from the permanent or volatile databases.
		!
		IF .NML$GB_OPTIONS [NMA$V_OPT_PER] THEN
		    NML_LISLOGSNK (.ENT,
				   .INF,
				   .SNK,
				   .NML$GW_EVTSNKADR)
		ELSE
		    NML_SHOLOGSNK (.ENT,
				   .INF,
				   .SNK,
				   .NML$GW_EVTSNKADR);
		END;
	    END;
	END;

    [NML$C_STATUS,
    NML$C_CHARACTERISTICS]:
	NML_READEXESNK (NML$C_SINK, .INF, .SNK);

    [OTHERWISE]:
	NML$ERROR_1 (NMA$C_STS_FUN);

    TES;	    
!
! Close the node data base file.
!
NMA$CLOSEFILE (NMA$C_OPN_NODE);
END;				! End of NML$READLOGGING

%SBTTL 'NML_LISKNOSNK  List known logging sink node parameters'
ROUTINE NML_LISKNOSNK (ENT, INF, SNK) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine returns permanent data base information for 
!	all logging sinks.
!
! FORMAL PARAMETERS:
!
!	ENT		Entity type code.
!	INF		Information type code.
!	SNK		Sink type code.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	BLKDSC : DESCRIPTOR,		! Event parameter descriptor
	KEY    : WORD,			! Record key
	RECDSC : DESCRIPTOR,		! Record descriptor
	SNKADR : WORD;			! Sink node address

!
! List parameters for all sink nodes for this sink type.
!
    KEY = 0;
    WHILE NML$MATCHRECORD (.NML$AB_ENTITYDATA [.ENT, EIT$B_FILEID],
			NML$GQ_RECBFDSC,
			KEY,
			.NML$AB_ENTITYDATA [.ENT, EIT$W_KEY],
			0,
			0,
			RECDSC) DO
	BEGIN
!
! Find the sink node address.
!
	BLKDSC [DSC$A_POINTER] = 0;
	IF NMA$SEARCHFLD (RECDSC,
			  NMA$C_PCLO_SIN,
			  BLKDSC [DSC$W_LENGTH],
			  BLKDSC [DSC$A_POINTER])
	THEN
	    BEGIN

	    SNKADR = .(.BLKDSC [DSC$A_POINTER])<0,16>;
!
! Find the event parameter.
!
	    BLKDSC [DSC$A_POINTER] = 0;
	    IF NMA$SEARCHFLD (RECDSC,
			      NMA$C_PCLO_EVE,
			      BLKDSC [DSC$W_LENGTH],
			      BLKDSC [DSC$A_POINTER])
	    THEN
		BEGIN

		NML_READSNKNOD (.ENT, .SNK, .SNKADR, BLKDSC);

		END;
	    END;

	KEY = .KEY + 1;

	END;

    END;				! End of NML_LISKNOSNK

%SBTTL 'NML_SHOKNOSNK  Show known logging sink node parameters'
ROUTINE NML_SHOKNOSNK (ENT, INF, SNK) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine returns permanent data base information for 
!	all logging sinks.
!
! FORMAL PARAMETERS:
!
!	ENT		Entity type code.
!	INF		Information type code.
!	SNK		Sink type code.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	BUFEND,
	LISDSC : DESCRIPTOR,
	MSGSIZE,
	PTR,
	SNKADR : WORD,			! Sink node address
	STATUS,
	STRTFLG;

    STRTFLG = FALSE;

    WHILE NML$GETKNOWNLIST (.ENT, .STRTFLG, LISDSC) DO
	BEGIN

	PTR = .LISDSC [DSC$A_POINTER];
	BUFEND = .LISDSC [DSC$A_POINTER] + .LISDSC [DSC$W_LENGTH];

	WHILE .PTR LSSA .BUFEND DO
	    BEGIN

	    STRTFLG = TRUE;

	    SNKADR = .(.PTR)<0,16>;

	    NML_SHOLOGSNK (.ENT, .INF, .SNK, .SNKADR);

	    PTR = .PTR + 4;

	    END;
	END;

    END;				! End of NML_SHOKNOSNK

%SBTTL 'NML_LISLOGSNK  List logging sink node parameters'
ROUTINE NML_LISLOGSNK (ENT, INF, SNK, SNKADR) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine returns permanent data base information for 
!	all logging sinks.
!
! FORMAL PARAMETERS:
!
!	ENT		Entity type code.
!	INF		Information type code.
!	SNK		Sink type code.
!	SNKADR		Sink node address.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	SNKADR : WORD;

    LOCAL
	BLKDSC : DESCRIPTOR,		! Event parameter descriptor
	KEY    : WORD,			! Record key
	RECDSC : DESCRIPTOR;		! Record descriptor
!
! List parameters for the specified sink node.
!
    KEY = 0;
    IF NML$MATCHRECORD (.NML$AB_ENTITYDATA [.ENT, EIT$B_FILEID],
		     NML$GQ_RECBFDSC,
		     KEY,
		     .NML$AB_ENTITYDATA [.ENT, EIT$W_KEY],
		     2,
		     SNKADR,
		     RECDSC)
    THEN
	BEGIN
!
! Find the event parameter.
!
	BLKDSC [DSC$A_POINTER] = 0;
	IF NMA$SEARCHFLD (RECDSC,
			  NMA$C_PCLO_EVE,
			  BLKDSC [DSC$W_LENGTH],
			  BLKDSC [DSC$A_POINTER])
	THEN
	    NML_READSNKNOD (.ENT, .SNK, .SNKADR, BLKDSC);

	END;

    END;				! End of NML_LISLOGSNK

%SBTTL 'NML_SHOLOGSNK  Show logging sink node parameters'
ROUTINE NML_SHOLOGSNK (ENT, INF, SNK, SNKADR) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine returns volatile data base information for 
!	all logging sinks.
!
! FORMAL PARAMETERS:
!
!	ENT		Entity type code.
!	INF		Information type code.
!	SNK		Sink type code.
!	SNKADR		Sink node address.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	SNKADR : WORD;

    LOCAL
	BLKDSC   : DESCRIPTOR,		! Event parameter descriptor
	DUMDSC   : REF DESCRIPTOR,	! Dummy descriptor for table
	NFBDSC   : REF DESCRIPTOR,
	P2BUFFER : VECTOR [NML$K_P2BUFLEN, BYTE],
	P2DSC    : DESCRIPTOR,
	P3,
	PTR;

    NML$GETINFTABS (.ENT, .INF, NFBDSC, DUMDSC, 0);
    P2DSC [DSC$W_LENGTH] = 80;
    P2DSC [DSC$A_POINTER] = P2BUFFER;
    NML$BLDP2 (0, .SNKADR, -1, 0, P2DSC, P2DSC);

    IF NML$NETQIO (.NFBDSC, P2DSC, P3, NML$GQ_QIOBFDSC)
    THEN
	BEGIN

	PTR = .NML$GQ_QIOBFDSC [DSC$A_POINTER];
	BLKDSC [DSC$W_LENGTH] = .(.PTR)<0,16>;
	BLKDSC [DSC$A_POINTER] = .PTR + 2;
	NML_READSNKNOD (.ENT, .SNK, .SNKADR, BLKDSC);

	END;

    END;				! End of NML_SHOLOGSNK

%SBTTL 'NML_READEXESNK  List executor sink node parameters'
ROUTINE NML_READEXESNK (ENT, INF, SNK) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine returns permanent data base information for 
!	all logging sinks.
!
! FORMAL PARAMETERS:
!
!	ENT		Entity type code.
!	INF		Information type code.
!	SNK		Sink type code.
!
!--

    BEGIN

    MAP
	NML$GB_OPTIONS : BBLOCK [1];

    LOCAL
	ENTDSC    : DESCRIPTOR,		! Entity descriptor
	MSGFLG,				! Response message flag
	MSGSIZE,			! Message size
	STATUS;				! Temporary status
!
! Set up the entity descriptor.
!
    ENTDSC [DSC$W_LENGTH] = 1;
    ENTDSC [DSC$A_POINTER] = SNK;
!
! Set message flags.
!
    MSGFLG = FALSE;			! No response messages
    NML$AB_MSGBLOCK [MSB$L_FLAGS] = MSB$M_ENTD_FLD;
    NML$AB_MSGBLOCK [MSB$B_CODE]  = NMA$C_STS_SUC;
    NML$AB_MSGBLOCK [MSB$A_ENTITY] = ENTDSC;
!
! Build the message.
!
    NML$BLD_REPLY (NML$AB_MSGBLOCK, MSGSIZE);
!
! Decide if the operation is on the permanent or volatile data base.
!
    IF .NML$GB_OPTIONS [NMA$V_OPT_PER]
    THEN
	STATUS = NML_LISEXESNK (.ENT, .INF, .SNK, MSGSIZE)
    ELSE
	STATUS = NML_SHOEXESNK (.ENT, .INF, .SNK, MSGSIZE);

    IF .STATUS
    THEN
	MSGFLG = TRUE;
!
! Send the message.
!
    IF .MSGFLG
    THEN
	NML$SEND (NML$AB_SNDBUFFER, .MSGSIZE);

    END;				! End of NML_READEXESNK

%SBTTL 'NML_LISEXESNK  List executor sink node parameters'
ROUTINE NML_LISEXESNK (ENT, INF, SNK, MSGSIZE) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine returns permanent data base information for 
!	all logging sinks.
!
! FORMAL PARAMETERS:
!
!	ENT		Entity type code.
!	INF		Information type code.
!	SNK		Sink type code.
!	MSGSIZE		Address of message byte count (current and result).
!
!--

BEGIN

LOCAL
    FLDADR,
    FLDSIZE,
    MSGFLG,				! Response message flag
    SRCPTR,				! Source block pointer
    BLKDSC    : DESCRIPTOR,		! Event parameter descriptor
    KEY       : WORD,		! Record key
    RECDSC    : DESCRIPTOR;		! Record descriptor

MSGFLG = FALSE;			! No response messages
!
! Add executor parameters to the output message.
!
KEY = 0;
IF NML$MATCHRECORD (.NML$AB_ENTITYDATA [NML$C_SINK, EIT$B_FILEID],
		     NML$GQ_RECBFDSC,
		     KEY,
		     .NML$AB_ENTITYDATA [NML$C_SINK, EIT$W_KEY],
		     1,
		     SNK,
		     RECDSC)
THEN
    BEGIN
    MSGFLG = TRUE;			! Set response message flag
    SELECTU .INF OF
	SET
	[NML$C_SUMMARY,
	 NML$C_STATUS]:
	    BEGIN
	    !
	    ! If state parameter is defined then add it to the message.
	    !
	    FLDADR = 0;
	    IF NMA$SEARCHFLD (RECDSC,
			      NMA$C_PCLO_STA,
			      FLDSIZE,
			      FLDADR)
	    THEN
		NML$ADDMSGPRM (NML$GQ_SNDBFDSC,
				   .MSGSIZE,
				   NMA$C_PCLO_STA,
				   NMA$M_PTY_COD OR 1,
				   1,
				   .FLDADR);
	    END;

	[NML$C_SUMMARY,
	 NML$C_CHARACTERISTICS]:
	    BEGIN
	    !
	    ! If sink name parameter is defined then add it to the message.
	    !
	    FLDADR = 0;
	    IF NMA$SEARCHFLD (RECDSC,
			      NMA$C_PCLO_LNA,
			      FLDSIZE,
			      FLDADR)
	    THEN
		NML$ADDMSGPRM (NML$GQ_SNDBFDSC,
				   .MSGSIZE,
				   NMA$C_PCLO_LNA,
				   NMA$M_PTY_ASC,
				   .FLDSIZE,
				   .FLDADR);
	    END;
	TES;
    END;
!
! For SUMMARY and EVENT reports, add the sink node ID.
!
IF .INF EQL NML$C_SUMMARY OR
   .INF EQL NML$C_EVENTS THEN
	NML_READ_SINK_NODE (.INF, .MSGSIZE);
!
! If the executor address is non-zero then list logging for all
! sources for this sink node.
!
IF .NML$W_EXEADR EQLU 0 THEN
    RETURN .MSGFLG;

SELECTONEU .INF OF
    SET
    [NML$C_EVENTS,
     NML$C_SUMMARY]:
	BEGIN
	KEY = 0;
	IF NML$MATCHRECORD (.NML$AB_ENTITYDATA [.ENT, EIT$B_FILEID],
				NML$GQ_RECBFDSC,
				KEY,
				.NML$AB_ENTITYDATA [.ENT, EIT$W_KEY],
				2,
				NML$W_EXEADR,
				RECDSC)
	THEN
	    BEGIN
	    !
	    ! Find the event parameter.
	    !
	    BLKDSC [DSC$A_POINTER] = 0;
	    IF NMA$SEARCHFLD (RECDSC,
			      NMA$C_PCLO_EVE,
			      BLKDSC [DSC$W_LENGTH],
			      BLKDSC [DSC$A_POINTER])
	    THEN
		BEGIN
		SRCPTR = 0;
		WHILE NML$GETNXTSNK (BLKDSC, .SNK, SRCPTR) DO
		    BEGIN
		    MSGFLG = TRUE;	! Set response message flag
		    !
		    ! Get each event class.
		    !
		    NML_READLOGSRC (BLKDSC, .SRCPTR, .MSGSIZE);
		    END;
		END;
	    END;
	END;
    TES;
RETURN .MSGFLG
END;				! End of NML_LISEXESNK

%SBTTL 'NML_SHOEXESNK  Show executor sink node parameters'
ROUTINE NML_SHOEXESNK (ENT, INF, SNK, MSGSIZE) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine returns permanent data base information for 
!	all logging sinks.
!
! FORMAL PARAMETERS:
!
!	ENT		Entity type code.
!	INF		Information type code.
!	SNK		Sink type code.
!	MSGSIZE		Address message byte count (current and result).
!
!--

BEGIN

LOCAL
    DUMDSC   : REF DESCRIPTOR,
    MSGFLG,				! Response message flag
    NFBDSC   : REF DESCRIPTOR,
    P2BUFFER : VECTOR [NML$K_P2BUFLEN, BYTE],
    P2DSC    : DESCRIPTOR,
    P3,
    PTR,				! Parameter buffer pointer
    SRCPTR,				! Source block pointer
    BLKDSC   : DESCRIPTOR,		! Event parameter descriptor
    STATUS;

MSGFLG = FALSE;			! No response messages
NML$GETINFTABS (NML$C_SINK, .INF, NFBDSC, DUMDSC, 0);
P2DSC [DSC$W_LENGTH] = NML$K_P2BUFLEN;
P2DSC [DSC$A_POINTER] = P2BUFFER;
NML$BLDP2 (0, .SNK, -1, 0, P2DSC, P2DSC);

STATUS = NML$NETQIO (.NFBDSC, P2DSC, P3, NML$GQ_QIOBFDSC);

IF NOT .STATUS
THEN
    BEGIN
    IF .STATUS NEQ NML$_STS_CMP
    THEN
	BEGIN
	NML_READ_SINK_NODE (.INF, .MSGSIZE);
	NML$BLD_REPLY (NML$AB_MSGBLOCK, .MSGSIZE);
	RETURN TRUE;
	END;
    END;

IF .STATUS
THEN
    BEGIN
    MSGFLG = TRUE;
    PTR = .NML$GQ_QIOBFDSC [DSC$A_POINTER];
    SELECTU .INF OF
	SET
	[NML$C_SUMMARY,
	 NML$C_STATUS]:
	    IF .(.PTR)<0,32> NEQU -1
	    THEN
		NML$ADDMSGPRM (NML$GQ_SNDBFDSC,
				   .MSGSIZE,
				   NMA$C_PCLO_STA,
				   NMA$M_PTY_COD OR 1,
				   1,
				   .PTR);

	[ALWAYS]:
	    PTR = .PTR + 4;

	[NML$C_SUMMARY,
	 NML$C_CHARACTERISTICS]:
	    IF .(.PTR)<0,16> NEQU 0
	    THEN
		NML$ADDMSGPRM (NML$GQ_SNDBFDSC,
				   .MSGSIZE,
				   NMA$C_PCLO_LNA,
				   NMA$M_PTY_ASC,
				   .(.PTR)<0,16>,
				   .PTR + 2);
	TES;
    END;
!
! For SUMMARY and EVENT reports, add the sink node ID.
!
IF .INF EQL NML$C_SUMMARY OR
   .INF EQL NML$C_EVENTS THEN
	NML_READ_SINK_NODE (.INF, .MSGSIZE);

IF .NML$W_EXEADR EQLU 0
THEN
    RETURN .MSGFLG;
!
! If the executor address is non-zero then list logging for all
! sources for this sink node.
!
SELECTONEU .INF OF
    SET
    [NML$C_EVENTS, NML$C_SUMMARY]:
	BEGIN
	NML$GETINFTABS (NML$C_LOGGING, .INF, NFBDSC, DUMDSC, 0);
	P2DSC [DSC$W_LENGTH] = NML$K_P2BUFLEN;
	P2DSC [DSC$A_POINTER] = P2BUFFER;
	NML$BLDP2 (0, .NML$W_EXEADR, -1, 0, P2DSC, P2DSC);

	STATUS = NML$NETQIO (.NFBDSC, P2DSC, P3, NML$GQ_QIOBFDSC);

	IF .STATUS THEN
	    BEGIN
	    PTR = .NML$GQ_QIOBFDSC [DSC$A_POINTER];
	    BLKDSC [DSC$W_LENGTH] = .(.PTR)<0,16>;
	    BLKDSC [DSC$A_POINTER] = .PTR + 2;
	    SRCPTR = 0;
	    WHILE NML$GETNXTSNK (BLKDSC, .SNK, SRCPTR) DO
		BEGIN
		NML_READLOGSRC (BLKDSC, .SRCPTR, .MSGSIZE);
		MSGFLG = TRUE;
		END;
	    END
	ELSE
	    BEGIN
	    IF .STATUS NEQ NML$_STS_CMP
	    THEN
		BEGIN
		NML$BLD_REPLY (NML$AB_MSGBLOCK, .MSGSIZE);
		MSGFLG = TRUE;
		END;
	    END;
	END;
    TES;
RETURN .MSGFLG
END;				! End of NML_SHOEXESNK

%SBTTL 'NML_READ_SINK_NODE  Read sink node ID'
ROUTINE NML_READ_SINK_NODE (INF, MSGSIZE) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!	This routine adds the sink node id to the NICE response
!	message.
!
! FORMAL PARAMETERS:
!	INF		Information type code.
!	MSGSIZE		Address message byte count (current and result).
!
!--

BEGIN

LOCAL
    CM_COUNT,				! Coded multiple field count
    PRMBUFFER : VECTOR [11, BYTE],	! Parameter buffer
    PTR,				! Parameter buffer pointer
    SNKBFDSC  : DESCRIPTOR,		! Sink node name descriptor
    SNKLEN,				! Sink node name length
    SNKBUFFER : VECTOR [6, BYTE],	! Buffer for sink node name
    STATUS;				! Routine completion status

!
! Get executor node address.
!
STATUS = NML$GETEXEADR (NML$W_EXEADR);
!
! Add the sink node id to the message if it is required.
!
IF .STATUS THEN
    BEGIN
    SELECTONEU .INF OF
	SET
	[NML$C_EVENTS,
	NML$C_SUMMARY]:
	    BEGIN
	    !
	    ! Get sink node name.
	    !
	    SNKBFDSC [DSC$W_LENGTH] = 6;
	    SNKBFDSC [DSC$A_POINTER] = SNKBUFFER;
	    NML$GETNODNAM (.NML$W_EXEADR, SNKBFDSC, SNKLEN);
	    !
	    ! Add sink node id parameter to message.
	    !
	    PTR = PRMBUFFER;
	    CM_COUNT = 1;

	    CH$WCHAR_A (2, PTR); ! Move sink node address
	    PTR = CH$MOVE (2, NML$W_EXEADR, .PTR);
	    IF .SNKLEN NEQU 0 THEN	! Move sink node name if present
		BEGIN
		CH$WCHAR_A (NMA$M_PTY_ASC, PTR);
		CH$WCHAR_A (.SNKLEN, PTR);
		PTR = CH$MOVE (.SNKLEN, SNKBUFFER, .PTR);
		CM_COUNT = 2;
		END;
	    !
	    ! Add coded multiple sink node id to message.
	    !
	    NML$ADDMSGPRM (NML$GQ_SNDBFDSC,
			       .MSGSIZE,
			       NMA$C_PCLO_SIN,
			       NMA$M_PTY_CMU OR .CM_COUNT,
			       .PTR - PRMBUFFER,
			       PRMBUFFER);
	    END;
	TES;
    END;
END;		! End of NML_READ_SINK_NODE

%SBTTL 'NML_READSNKNOD  List logging sink node parameters'
ROUTINE NML_READSNKNOD (ENT, SNK, SNKADR, BLKDSC) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Read sink node information from the permanent or volatile data bases.
!
! FORMAL PARAMETERS:
!
!	ENT		Entity type code.
!	SNK		Sink type code.
!	SNKADR		Address of sink node.
!	BLKDSC		Event parameter descriptor.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	SNKADR : WORD,
	BLKDSC : REF DESCRIPTOR;

    LOCAL
	CM_COUNT,			! Coded multiple field count
	ENTDSC    : DESCRIPTOR,		! Entity descriptor
	EVTPTR    : REF BBLOCK,		! Pointer to event block
	MSGFLG,
	MSGSIZE,			! Message size
	MSKBUF    : VECTOR [8, BYTE],	! Event mask buffer
	PRMBUFFER : VECTOR [11, BYTE],	! Parameter buffer
	PTR,				! Parameter buffer pointer
	SNKBFDSC  : DESCRIPTOR,		! Sink node name descriptor
	SNKLEN,				! Sink node name length
	SNKBUFFER : VECTOR [6, BYTE],	! Buffer for sink node name
	SRCPTR    : REF BBLOCK;		! Pointer to source block

!
! If this sink node is the executor node then skip it.
!
    IF .SNKADR EQLU .NML$W_EXEADR
    THEN
	RETURN;
!
! Set up the entity descriptor.
!
    ENTDSC [DSC$W_LENGTH] = 1;
    ENTDSC [DSC$A_POINTER] = SNK;
!
! Set message flags.
!
    MSGFLG = FALSE;			! No response messages
    NML$AB_MSGBLOCK [MSB$L_FLAGS] = MSB$M_ENTD_FLD;
    NML$AB_MSGBLOCK [MSB$B_CODE]  = NMA$C_STS_SUC;
    NML$AB_MSGBLOCK [MSB$A_ENTITY] = ENTDSC;
!
! Build the message.
!
    NML$BLD_REPLY (NML$AB_MSGBLOCK, MSGSIZE);
!
! Get sink node name.
!
    SNKBFDSC [DSC$W_LENGTH] = 6;
    SNKBFDSC [DSC$A_POINTER] = SNKBUFFER;
    NML$GETNODNAM (.SNKADR, SNKBFDSC, SNKLEN);
!
! Add sink node id parameter to message.
!
    PTR = PRMBUFFER;
    CM_COUNT = 1;

    CH$WCHAR_A (2, PTR); ! Move sink node address
    PTR = CH$MOVE (2, SNKADR, .PTR);

    IF .SNKLEN NEQU 0			! Move sink node name if present
    THEN
	BEGIN
	CH$WCHAR_A (NMA$M_PTY_ASC, PTR);
	CH$WCHAR_A (.SNKLEN, PTR);
	PTR = CH$MOVE (.SNKLEN, SNKBUFFER, .PTR);
	CM_COUNT = 2;
	END;
!
! Add coded multiple sink node id to message.
!
    NML$ADDMSGPRM (NML$GQ_SNDBFDSC,
		   MSGSIZE,
		   NMA$C_PCLO_SIN,
		   NMA$M_PTY_CMU OR .CM_COUNT,
		   .PTR - PRMBUFFER,
		   PRMBUFFER);
!
! List logging for all sources for this sink node.
!
    SRCPTR = 0;
    WHILE NML$GETNXTSNK (.BLKDSC, .SNK, SRCPTR) DO
	BEGIN
	MSGFLG = TRUE;			! Set response message flag
!
! Get each event class.
!
	NML_READLOGSRC (.BLKDSC, .SRCPTR, MSGSIZE);

	END;
!
! Send the message.
!
    IF .MSGFLG
    THEN
	NML$SEND (NML$AB_SNDBUFFER, .MSGSIZE);
 
   RETURN NML$_STS_SUC

    END;				! End of NML_READSNKNOD

%SBTTL 'NML_READLOGSRC  List logging parameters'
ROUTINE NML_READLOGSRC (DATDSC, SRCPTR, MSGSIZE) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Read logging source information from the permanent or volatile data
!	bases.
!
! FORMAL PARAMETERS:
!
!	DATDSC		Descriptor of event data.
!	SRCPTR		Pointer to event source block.
!	MSGSIZE		Current response message size.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	SRCPTR : REF BBLOCK;

    LOCAL
	CM_COUNT,			! Coded multiple field count
	EVTPTR    : REF BBLOCK,		! Pointer to event block
	MSKBUF    : VECTOR [8, BYTE],	! Event mask buffer
	MSKLEN,				! Event mask length
	PRMBUFFER : VECTOR [64, BYTE],	! Parameter buffer
	PTR,				! Parameter buffer pointer
	SNKBFDSC  : DESCRIPTOR,		! Sink node name descriptor
	SNKLEN,				! Sink node name length
	SNKBUFFER : VECTOR [6, BYTE];	! Buffer for sink node name

!
! Get each event class.
!
	EVTPTR = 0;
	WHILE NML$GETNXTEVT (.SRCPTR, EVTPTR) DO
	    BEGIN
	    PTR = PRMBUFFER;
	    CM_COUNT = 1;
!
! Get source type.
!
	    CH$WCHAR_A (NMA$M_PTY_COD  OR 1, PTR);
	    CH$WCHAR_A (.SRCPTR [SRC$B_SRCTYPE], PTR);
!
! Get source id.
!
	    SELECTONEU .SRCPTR [SRC$B_SRCTYPE] OF
		SET
		[NMA$C_ENT_LIN, NMA$C_ENT_CIR]:
		    BEGIN
		    CH$WCHAR_A (NMA$M_PTY_ASC, PTR);
		    CH$WCHAR_A (.SRCPTR [SRC$B_DEVLENGTH], PTR);
		    PTR = CH$MOVE (.SRCPTR [SRC$B_DEVLENGTH],
				   SRCPTR [SRC$T_DEVICEID],
				   .PTR);
		    CM_COUNT = .CM_COUNT + 1;
		    END;
		[NMA$C_ENT_NOD]:
		    BEGIN
		    CH$WCHAR_A (2, PTR);
		    PTR = CH$MOVE (2, SRCPTR [SRC$W_NODADR], .PTR);
		    CM_COUNT = .CM_COUNT + 1;
!
! Get sink node name.
!
		    SNKBFDSC [DSC$W_LENGTH] = 6;
		    SNKBFDSC [DSC$A_POINTER] = SNKBUFFER;
		    NML$GETNODNAM (.SRCPTR [SRC$W_NODADR], SNKBFDSC, SNKLEN);
		    IF .SNKLEN NEQU 0	! Move sink node name if present
		    THEN
			BEGIN
	    		CH$WCHAR_A (NMA$M_PTY_ASC, PTR);
		    	CH$WCHAR_A (.SNKLEN, PTR);
		    	PTR = CH$MOVE (.SNKLEN, SNKBUFFER, .PTR);
			CM_COUNT = .CM_COUNT + 1;
			END;
		    END;
		TES;
!
! Get event class.
!
	    CH$WCHAR_A (2, PTR);
	    PTR = CH$MOVE (2, EVTPTR [EVT$W_CLASS], .PTR);
	    CM_COUNT = .CM_COUNT + 1;
!
! Get event mask.
!
	    NML$GETCOMFILTERS (.DATDSC,
			       .EVTPTR,
			       .SRCPTR [SRC$B_SINKTYPE],
			       MSKBUF,
			       MSKLEN);
	    CH$WCHAR_A (%X'20', PTR);
	    CH$WCHAR_A (.MSKLEN, PTR);
	    PTR = CH$MOVE (.MSKLEN, MSKBUF, .PTR);
	    CM_COUNT = .CM_COUNT + 1;
!
! Add the parameter to the message.
!
	    NML$ADDMSGPRM (NML$GQ_SNDBFDSC,
			   .MSGSIZE,
			   NMA$C_PCLO_EVE,
			   NMA$M_PTY_CMU OR .CM_COUNT,
			   .PTR - PRMBUFFER,
			   PRMBUFFER);

	    END;
    END;				! End of NML_READLOGSRC

END					! End of module

ELUDOM
