%TITLE 'NML Change parameters module'
MODULE NML$CHANGE (
		LANGUAGE (BLISS32),
		ADDRESSING_MODE (NONEXTERNAL=LONG_RELATIVE),
		ADDRESSING_MODE (EXTERNAL=LONG_RELATIVE),
		IDENT = 'V03-000'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  DECnet-VAX Network Management Listener
!
! ABSTRACT:
!
!	This module contains routines to handle dispatching of NCP
!	SET, CLEAR, DEFINE, and PURGE commands to the correct routine
!	according to the specified entity type.
!
! ENVIRONMENT:  VAX/VMS Operating System
!
! AUTHOR:  Distributed Systems Software Engineering
!
! CREATION DATE:  30-OCT-1979
!
! MODIFIED BY:
!
!	V03-003 MKP0003		Kathy Perko	6-Sept-1981
!		Make changes for new ACP link database.
!
!	V03-002	MKP0002		Kathy Perko	5-Aug-1981
!		Add X-25 Protocol Module entity.
!
!	V03-001	MKP0001		Kathy Perko	21-July-1981
!		Add CIRCUIT entity.
!--


%SBTTL 'Declarations'

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
	NML$CHANGE	: NOVALUE,
	NML_SET_CIRCUIT	: NOVALUE,
	NML_SET_LINE	: NOVALUE,
	NML_SET_LOGGING	: NOVALUE,
	NML_SET_NODE	: NOVALUE,
	NML_SET_MODULE	: NOVALUE,
	NML_SET_OBJECT	: NOVALUE,
	NML_CLE_CIRCUIT	: NOVALUE,
	NML_CLE_LINE	: NOVALUE,
	NML_CLE_LINK	: NOVALUE,
	NML_CLE_LOGGING	: NOVALUE,
	NML_CLE_NODE	: NOVALUE,
	NML_CLE_MODULE	: NOVALUE,
	NML_CLE_OBJECT	: NOVALUE,
	NML_PUR_CIRCUIT	: NOVALUE,
	NML_PUR_LINE	: NOVALUE,
	NML_PUR_LOGGING	: NOVALUE,
	NML_PUR_NODE	: NOVALUE,
	NML_PUR_MODULE	: NOVALUE,
	NML_PUR_OBJECT	: NOVALUE,
	NML_DEF_CIRCUIT	: NOVALUE,
	NML_DEF_LINE	: NOVALUE,
	NML_DEF_LOGGING	: NOVALUE,
	NML_DEF_NODE	: NOVALUE,
	NML_DEF_MODULE	: NOVALUE,
	NML_DEF_OBJECT	: NOVALUE,
	NML_DEFPURPLURAL : NOVALUE,
	NML_SETCLEPLURAL : NOVALUE;

!
! INCLUDE FILES:
!

LIBRARY 'LIB$:NMLLIB.L32';
LIBRARY 'SHRLIB$:NMALIBRY.L32';
LIBRARY 'SYS$LIBRARY:STARLET.L32';

!
! Function table.
!
BIND
	CIRCUIT_TABLE = UPLIT (NML_SET_CIRCUIT,
			    NML_CLE_CIRCUIT,
			    NML_PUR_CIRCUIT,
			    NML_DEF_CIRCUIT),

	LINE_TABLE = UPLIT (NML_SET_LINE,
			    NML_CLE_LINE,
			    NML_PUR_LINE,
			    NML_DEF_LINE),

	LOGGING_TABLE = UPLIT (NML_SET_LOGGING,
			       NML_CLE_LOGGING,
			       NML_PUR_LOGGING,
			       NML_DEF_LOGGING),

	LINK_TABLE = UPLIT (0,
			    NML_CLE_LINK,
			    0,
			    0),

	NODE_TABLE = UPLIT (NML_SET_NODE,
			    NML_CLE_NODE,
			    NML_PUR_NODE,
			    NML_DEF_NODE),

	MODULE_TABLE = UPLIT (NML_SET_MODULE,
			      NML_CLE_MODULE,
			      NML_PUR_MODULE,
			      NML_DEF_MODULE),

	OBJECT_TABLE = UPLIT (NML_SET_OBJECT,
			      NML_CLE_OBJECT,
			      NML_PUR_OBJECT,
			      NML_DEF_OBJECT);

!
! EXTERNAL REFERENCES:
!

$NML_EXTDEF;

EXTERNAL
    NML$AB_NPA_BLK  : $NPA_BLKDEF,
    NML$NPA_CLPUCIR,
    NML$NPA_CLPULIN,
    NML$NPA_CLPULNK,
    NML$NPA_CLPULOG,
    NML$NPA_CLPUNOD,
    NML$NPA_CLPUEXE,
    NML$NPA_CLPUMOD_PROTOCOL,
    NML$NPA_CLPUOBJ,
    NML$NPA_SEDECIR,
    NML$NPA_SEDELIN,
    NML$NPA_SEDELOG,
    NML$NPA_SEDENOD,
    NML$NPA_SEDEEXE,
    NML$NPA_SEDEMOD_PROTOCOL,
    NML$NPA_SEDEOBJ;

EXTERNAL ROUTINE
    LIB$ESTABLISH : ADDRESSING_MODE (LONG_RELATIVE),
    LIB$REVERT	  : ADDRESSING_MODE (LONG_RELATIVE),
    NMA$NPARSE,
    NML$BLD_REPLY,
    NML$CLEARENTITY,
    NML$CLEAREXECUTOR,
    NML$CLEARKNOLOG,
    NML$CLEARKNONODES,
    NML$CLEARKNOWN,
    NML$CLEARLOGGING,
    NML$DEFENTITY,
    NML$DEFINEKNOWN,
    NML$DEFLOGGING,
    NML$DISCKNOWN,
    NML$DISCONNECT,
    NML$ERROR_1,
    NML$ERROR_2,
    NML$MAINHANDLER,
    NML$OPENFILE,
    NML$PURENTITY,
    NML$PURGEKNOWN,
    NML$PURLOGGING,
    NML$SEND,
    NML$SETENTITY,
    NML$SETEXECUTOR,
    NML$SETKNOLOG,
    NML$SETKNONODES,
    NML$SETKNOWN,
    NML$SETLINE,
    NML$SETLOGGING;

%SBTTL 'NML$CHANGE  Change parameters main routine'
GLOBAL ROUTINE NML$CHANGE : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine dispatches the NICE change parameters command to
!	the correct function handler.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NML$GB_OPTIONS contains the option byte parsed from the NICE message.
!	NML$GB_ENTCODE contains the entity code.
!
!--

BEGIN

MAP
	NML$GB_OPTIONS : BBLOCK [1];

LOCAL
	F_TAB    : REF VECTOR,		! Dispatch table reference
	RTN_ADDR;			! Temporary routine address

!
! The VMS specific entity codes overlap with the Network Management
! codes.  So use the appropriate select statement.
!
IF NOT .NML$GL_PRS_FLGS [NML$V_PRS_VMS] THEN
	F_TAB = (SELECTONEU .NML$GB_ENTCODE OF
		SET
		[NMA$C_ENT_CIR]: CIRCUIT_TABLE;	! Circuit	
		[NMA$C_ENT_LIN]: LINE_TABLE;	! Line
		[NMA$C_ENT_LOG]: LOGGING_TABLE;	! Logging
		[NMA$C_ENT_NOD]: NODE_TABLE;	! Node
		[NMA$C_ENT_MOD]: MODULE_TABLE;	! Module
		[OTHERWISE]: 0;
		TES)
ELSE
	F_TAB = (SELECTONEU .NML$GB_ENTCODE OF
		SET
		[NMA$C_SENT_LNK]: LINK_TABLE;	! Link
		[NMA$C_SENT_OBJ]: OBJECT_TABLE;	! Object
		[OTHERWISE]: 0;
		TES);
IF .F_TAB NEQA 0
THEN
	BEGIN
	RTN_ADDR = (
		IF .NML$GB_OPTIONS [NMA$V_OPT_PER]
		THEN
			IF .NML$GB_OPTIONS [NMA$V_OPT_CLE]
			THEN
				.F_TAB [2]		! PURGE
			ELSE
				.F_TAB [3]		! DEFINE
		ELSE
			IF .NML$GB_OPTIONS [NMA$V_OPT_CLE]
			THEN
				.F_TAB [1]		! CLEAR
			ELSE
				.F_TAB [0]);	! SET

	IF .RTN_ADDR NEQA 0
	THEN
		(.RTN_ADDR) ()		! Call the routine
	ELSE
		NML$ERROR_1 (NMA$C_STS_FUN);
	END
ELSE
	NML$ERROR_1 (NMA$C_STS_FUN);
END;				! End of NML$CHANGE

%SBTTL 'NML_SET_CIRCUIT  Set circuit volatile parameters'
ROUTINE NML_SET_CIRCUIT : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine sets the specified circuit parameters into the volatile
!	data base.
!
! IMPLICIT INPUTS:
!
!	NML$GB_ENTFRM contains the entity format code.
!
!--

BEGIN

MAP
	NML$GB_ENTFRM : BYTE SIGNED;

SELECTONEU .NML$GB_ENTFRM OF
	SET

	[NMA$C_ENT_KNO]:		! Known

		IF NMA$NPARSE (NML$AB_NPA_BLK,
			   NML$NPA_SEDECIR)
		THEN
			NML_SETCLEPLURAL (NML$C_CIRCUIT, NML$SETKNOWN, 0, 0);

	[1 TO 16]:			! Circuit name

		IF NMA$NPARSE (NML$AB_NPA_BLK,
			   NML$NPA_SEDECIR)
		THEN
			NML_SETCLEPLURAL (NML$C_CIRCUIT,
					  NML$SETENTITY,
					  .NML$GB_ENTFRM,
					  NML$AB_ENTID);

	TES;

NML$ERROR_2 (NMA$C_STS_IDE, NMA$C_ENT_CIR);

END;				! End of NML_SET_CIRCUIT

%SBTTL 'NML_SET_LINE  Set line volatile parameters'
ROUTINE NML_SET_LINE : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine sets the specified line parameters into the volatile
!	data base.
!
! IMPLICIT INPUTS:
!
!	NML$GB_ENTFRM contains the entity format code.
!
!--

BEGIN

MAP
	NML$GB_ENTFRM : BYTE SIGNED;

SELECTONEU .NML$GB_ENTFRM OF
	SET

	[NMA$C_ENT_KNO]:		! Known

		IF NMA$NPARSE (NML$AB_NPA_BLK,
			   NML$NPA_SEDELIN)
		THEN
			NML_SETCLEPLURAL (NML$C_LINE, NML$SETKNOWN, 0, 0);

	[1 TO 16]:			! Line name

		IF NMA$NPARSE (NML$AB_NPA_BLK,
			   NML$NPA_SEDELIN)
		THEN
			NML_SETCLEPLURAL (NML$C_LINE,
					  NML$SETLINE,
					  .NML$GB_ENTFRM,
					  NML$AB_ENTID);

	TES;

NML$ERROR_2 (NMA$C_STS_IDE, NMA$C_ENT_LIN);

END;				! End of NML_SET_LINE

%SBTTL 'NML_SET_LOGGING  Set logging volatile parameters'
ROUTINE NML_SET_LOGGING : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine sets the specified logging parameters into the volatile
!	data base.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NML$GB_ENTFRM contains the entity format code.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	NML$GB_ENTFRM : BYTE SIGNED;

    SELECTONEU .NML$GB_ENTFRM OF
	SET

	[NMA$C_ENT_KNO]:		! Known

	    IF NMA$NPARSE (NML$AB_NPA_BLK,
			   NML$NPA_SEDELOG)
	    THEN
		NML_SETCLEPLURAL (NML$C_LOGGING,
				  NML$SETKNOLOG,
				  0,
				  0);

	[NMA$C_SNK_CON,NMA$C_SNK_FIL,NMA$C_SNK_MON]: ! Console, file, monitor

	    IF NMA$NPARSE (NML$AB_NPA_BLK,
			   NML$NPA_SEDELOG)
	    THEN
		NML_SETCLEPLURAL (NML$C_LOGGING,
				  NML$SETLOGGING,
				  .NML$GB_ENTFRM,
				  0);

	TES;

    NML$ERROR_2 (NMA$C_STS_IDE, NMA$C_ENT_LOG); ! Option error

    END;				! End of NML_SET_LOGGING

%SBTTL 'NML_SET_NODE  Set node volatile parameters'
ROUTINE NML_SET_NODE : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine sets the specified node parameters into the volatile
!	data base.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NML$AB_ENTID contains the entity id.
!	NML$GB_ENTFRM contains the entity format code.
!	NML$GL_PRS_FLGS contains the message parsing flags.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	NML$GB_ENTFRM : BYTE SIGNED;

    LOCAL
	NOD_NUM : WORD,
	STATUS;				! Temporary status

    SELECTONEU .NML$GB_ENTFRM OF
	SET

	[NMA$C_ENT_KNO]:		! Known

	    IF NMA$NPARSE (NML$AB_NPA_BLK,
			   NML$NPA_SEDENOD)
	    THEN
		NML_SETCLEPLURAL (NML$C_NODE, NML$SETKNONODES, 0, 0);

	[NMA$C_ENT_ADD]:
	    BEGIN

	    NOD_NUM = .(NML$AB_ENTID)<0,16>;

	    IF .NML$GL_PRS_FLGS [NML$V_PRS_EXE] ! Check for executor
	    THEN
		BEGIN

		NOD_NUM = 0;
		IF NMA$NPARSE (NML$AB_NPA_BLK,
			       NML$NPA_SEDEEXE)
		THEN
		    NML_SETCLEPLURAL (	NML$C_EXECUTOR,
					NML$SETEXECUTOR,
					0,
					0);
		END
	    ELSE
		BEGIN

		IF NMA$NPARSE (NML$AB_NPA_BLK,
			       NML$NPA_SEDENOD)
		THEN
		    NML_SETCLEPLURAL (	NML$C_NODE,
					NML$SETENTITY,
					2,
					NOD_NUM);
		END;

	    END;

	[1 TO 6]:

	    IF .NML$GL_PRS_FLGS [NML$V_PRS_EXE]
	    THEN
		BEGIN

		IF NMA$NPARSE (NML$AB_NPA_BLK,
			       NML$NPA_SEDEEXE)
		THEN
		    NML_SETCLEPLURAL (	NML$C_EXECUTOR,
					NML$SETEXECUTOR,
					0,
					0);
		END
	    ELSE
		BEGIN

		IF NMA$NPARSE (NML$AB_NPA_BLK,
			       NML$NPA_SEDENOD)
		THEN
		    NML_SETCLEPLURAL (	NML$C_NODEBYNAME,
					NML$SETENTITY,
					.NML$GB_ENTFRM,
					NML$AB_ENTID);
		END;
	TES;

    NML$ERROR_2 (NMA$C_STS_IDE, NMA$C_ENT_NOD); ! Option error

    END;				! End of NML_SET_NODE

%SBTTL	'NML_SET_MODULE	Set module volatile parameters'
ROUTINE NML_SET_MODULE : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine sets the specified module parameters into the volatile
!	data base.
!
!--

BEGIN

BIND
	X25_PROTOCOL = UPLIT BYTE ('X25-PROTOCOL'),
	X25_SERVER = UPLIT BYTE ('X25-SERVER');

IF CH$EQL ( .NML$GB_ENTFRM, NML$AB_ENTID, 12, X25_PROTOCOL)
THEN
	IF NMA$NPARSE (NML$AB_NPA_BLK,
		       NML$NPA_SEDEMOD_PROTOCOL)
	THEN
		NML$ERROR_2 (NMA$C_STS_IDE, NMA$C_ENT_MOD)
;
!ELSE
!IF CH$EQL ( .NML$GB_ENTFRM, NML$AB_ENTID, 10, X25_SERVER)
!THEN
!	IF NMA$NPARSE (NML$AB_NPA_BLK,
!			NML$NPA_SEDEMOD_SERVER)
!	THEN
!		NML$ERROR_2 (NMA$C_STS_IDE, NMA$C_ENT_MOD);

NML$ERROR_2 (NMA$C_STS_IDE, NMA$C_ENT_MOD);
END;		! of  NML_SET_MODULE

%SBTTL 'NML_SET_OBJECT  Set object volatile parameters'
ROUTINE NML_SET_OBJECT : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine sets the specified object parameters into the volatile
!	data base.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NML$GL_PRS_FLGS contains the parse flags.
!	NML$GB_ENTFRM contains the entity format code.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	NML$GB_ENTFRM : BYTE SIGNED;

!
! All functions specifying the object entity must be system-specific.
!

    IF .NML$GL_PRS_FLGS [NML$V_PRS_VMS]
    THEN

	SELECTONEU .NML$GB_ENTFRM OF
	    SET

	    [NMA$C_ENT_KNO]:		! Known

		IF NMA$NPARSE (NML$AB_NPA_BLK,
			       NML$NPA_SEDEOBJ)
		THEN
		    NML_SETCLEPLURAL (NML$C_OBJECT, NML$SETKNOWN, 0, 0);

	    [1 TO 16]:

		IF NMA$NPARSE (NML$AB_NPA_BLK,
			       NML$NPA_SEDEOBJ)
		THEN
		    NML_SETCLEPLURAL (	NML$C_OBJECT,
					NML$SETENTITY,
					.NML$GB_ENTFRM,
					NML$AB_ENTID);

	    TES;

    NML$ERROR_2 (NMA$C_STS_IDE, NMA$C_SENT_OBJ); ! Option error

    END;				! End of NML_SET_OBJECT

%SBTTL 'NML_DEF_CIRCUIT  Define circuit permanent parameters'
ROUTINE NML_DEF_CIRCUIT : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine sets the specified circuit parameters into the permanent
!	data base.
!
! IMPLICIT INPUTS:
!
!	NML$GB_ENTFRM contains the entity format code.
!
!--

BEGIN

MAP
	NML$GB_ENTFRM : BYTE SIGNED;

SELECTONEU .NML$GB_ENTFRM OF
	SET

	[NMA$C_ENT_KNO]:		! Known
		BEGIN

		IF NMA$NPARSE (NML$AB_NPA_BLK,
				   NML$NPA_SEDECIR)
		THEN
			NML_DEFPURPLURAL (NML$C_CIRCUIT,
					  NML$DEFINEKNOWN,
					  0,
					  0);
		END;

	[1 TO 16]:			! Circuit name
		BEGIN

		IF NMA$NPARSE (NML$AB_NPA_BLK,
				   NML$NPA_SEDECIR)
		THEN
			NML_DEFPURPLURAL (NML$C_CIRCUIT,
					 NML$DEFENTITY,
					 .NML$GB_ENTFRM,
					 NML$AB_ENTID);
		END;
	TES;

NML$ERROR_2 (NMA$C_STS_IDE, NMA$C_ENT_CIR);	! Option error
END;				! End of NML_DEF_CIRCUIT

%SBTTL 'NML_DEF_LINE  Define line permanent parameters'
ROUTINE NML_DEF_LINE : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine sets the specified line parameters into the permanent
!	data base.
!
! IMPLICIT INPUTS:
!
!	NML$GB_ENTFRM contains the entity format code.
!
!--

BEGIN

MAP
	NML$GB_ENTFRM : BYTE SIGNED;

SELECTONEU .NML$GB_ENTFRM OF
	SET

	[NMA$C_ENT_KNO]:		! Known
		BEGIN

		IF NMA$NPARSE (NML$AB_NPA_BLK,
				   NML$NPA_SEDELIN)
		THEN
			NML_DEFPURPLURAL (NML$C_LINE,
					  NML$DEFINEKNOWN,
					  0,
					  0);
		END;

	[1 TO 16]:			! Line name
		BEGIN

		IF NMA$NPARSE (NML$AB_NPA_BLK,
				   NML$NPA_SEDELIN)
		THEN
			NML_DEFPURPLURAL (NML$C_LINE,
					 NML$DEFENTITY,
					 .NML$GB_ENTFRM,
					 NML$AB_ENTID);
		END;
	TES;

NML$ERROR_2 (NMA$C_STS_IDE, NMA$C_ENT_LIN);	! Option error
END;				! End of NML_DEF_LINE

%SBTTL 'NML_DEF_LOGGING  Define logging permanent parameters'
ROUTINE NML_DEF_LOGGING : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine sets the specified logging parameters into the permanent
!	data base.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NML$GB_ENTFRM contains the entity format code.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	NML$GB_ENTFRM : BYTE SIGNED;

    SELECTONEU .NML$GB_ENTFRM OF
	SET

	[NMA$C_ENT_KNO]:		! Known

	    IF NMA$NPARSE (NML$AB_NPA_BLK,
			   NML$NPA_SEDELOG)
	    THEN
		BEGIN

		NML_DEFPURPLURAL (NML$C_LOGGING,
				  NML$DEFINEKNOWN,
				  0,
				  0);
		END;

	[NMA$C_SNK_CON, NMA$C_SNK_FIL, NMA$C_SNK_MON]: ! Console, file, monitor

	    IF NMA$NPARSE (NML$AB_NPA_BLK,
			   NML$NPA_SEDELOG)
	    THEN
		BEGIN

		NML_DEFPURPLURAL (NML$C_LOGGING,
				  NML$DEFLOGGING,
				  .NML$GB_ENTFRM,
				  0);
		END;

	TES;

    NML$ERROR_2 (NMA$C_STS_IDE, NMA$C_ENT_LOG);	! Option error

    END;				! End of NML_DEF_LOGGING

%SBTTL 'NML_DEF_NODE  Define node permanent parameters'
ROUTINE NML_DEF_NODE : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine sets the specified node parameters into the permanent
!	data base.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NML$AB_ENTID contains the entity id.
!	NML$GB_ENTFRM contains the entity format code.
!	NML$GL_PRS_FLGS contains the message parsing flags.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	NML$GB_ENTFRM : BYTE SIGNED;

    LOCAL
	STATUS;				! Temporary status

    SELECTONEU .NML$GB_ENTFRM OF
	SET

	[NMA$C_ENT_KNO]:		! Known

	    IF NMA$NPARSE (NML$AB_NPA_BLK,
			   NML$NPA_SEDENOD)
	    THEN
		NML_DEFPURPLURAL (NML$C_NODE, NML$DEFINEKNOWN, 0, 0);

	[NMA$C_ENT_ADD]:
	    BEGIN

	    BIND
		NOD_NUM = NML$AB_ENTID : WORD;

	    IF .NML$GL_PRS_FLGS [NML$V_PRS_EXE] ! Check for executor
	    THEN
		BEGIN

		IF NMA$NPARSE (NML$AB_NPA_BLK,
			       NML$NPA_SEDEEXE)
		THEN
		    NML_DEFPURPLURAL (NML$C_EXECUTOR,
				      NML$DEFENTITY,
				      0,
				      0);
		END
	    ELSE
		BEGIN

		IF NMA$NPARSE (NML$AB_NPA_BLK,
			       NML$NPA_SEDENOD)
		THEN
		    NML_DEFPURPLURAL (NML$C_NODE,
				      NML$DEFENTITY,
				      2,
				      NOD_NUM);
		END;

	    END;

	[1 TO 6]:

	    IF .NML$GL_PRS_FLGS [NML$V_PRS_EXE] ! Check for executor
	    THEN
		BEGIN

		IF NMA$NPARSE (NML$AB_NPA_BLK,
			       NML$NPA_SEDEEXE)
		THEN
		    NML_DEFPURPLURAL (NML$C_EXECUTOR,
				      NML$DEFENTITY,
				      0,
				      0);
		END
	    ELSE
		BEGIN

		IF NMA$NPARSE (NML$AB_NPA_BLK,
			       NML$NPA_SEDENOD)
		THEN
		    NML_DEFPURPLURAL (NML$C_NODEBYNAME,
				      NML$DEFENTITY,
				      .NML$GB_ENTFRM,
				      NML$AB_ENTID);
		END;

	TES;

    NML$ERROR_2 (NMA$C_STS_IDE, NMA$C_ENT_NOD);	! Option error

    END;				! End of NML_DEF_NODE

%SBTTL	'NML_DEF_MODULE	Define module volatile parameters'
ROUTINE NML_DEF_MODULE : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine sets the specified module parameters into the permanent
!	data base.
!
!--

BEGIN

BIND
	X25_PROTOCOL = UPLIT BYTE ('X25-PROTOCOL'),
	X25_SERVER = UPLIT BYTE ('X25-SERVER');

IF CH$EQL ( .NML$GB_ENTFRM, NML$AB_ENTID, 12, X25_PROTOCOL)
THEN
	IF NMA$NPARSE (NML$AB_NPA_BLK,
		       NML$NPA_SEDEMOD_PROTOCOL)
	THEN
		NML$ERROR_2 (NMA$C_STS_IDE, NMA$C_ENT_MOD)
;
!ELSE
!IF CH$EQL ( .NML$GB_ENTFRM, NML$AB_ENTID, 10, X25_SERVER)
!THEN
!	IF NMA$NPARSE (NML$AB_NPA_BLK,
!			NML$NPA_SEDEMOD_SERVER)
!	THEN
!		NML$ERROR_2 (NMA$C_STS_IDE, NMA$C_ENT_MOD);

NML$ERROR_2 (NMA$C_STS_IDE, NMA$C_ENT_MOD);
END;		! of  NML_DEF_MODULE

%SBTTL 'NML_DEF_OBJECT  Define object permanent parameters'
ROUTINE NML_DEF_OBJECT : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine sets the specified object parameters into the permanent
!	data base.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NML$GL_PRS_FLGS contains the parse flags.
!	NML$GB_ENTFRM contains the entity format code.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	NML$GB_ENTFRM : BYTE SIGNED;

!
! All functions specifying the object entity must be system-specific.
!
    IF .NML$GL_PRS_FLGS [NML$V_PRS_VMS]
    THEN

	SELECTONEU .NML$GB_ENTFRM OF
	    SET

	    [NMA$C_ENT_KNO]:		! Known

		IF NMA$NPARSE (NML$AB_NPA_BLK,
			       NML$NPA_SEDEOBJ)
		THEN
		    NML_DEFPURPLURAL (NML$C_OBJECT, NML$DEFINEKNOWN, 0, 0);

	    [1 TO 16]:

		IF NMA$NPARSE (NML$AB_NPA_BLK,
			       NML$NPA_SEDEOBJ) ! Parse the parameters
		THEN
		    NML_DEFPURPLURAL (NML$C_OBJECT,
				      NML$DEFENTITY,
				      .NML$GB_ENTFRM,
				      NML$AB_ENTID);

	    TES;

    NML$ERROR_2 (NMA$C_STS_IDE, NMA$C_SENT_OBJ);	! Option error

    END;				! End of NML_DEF_OBJECT

%SBTTL 'NML_CLE_CIRCUIT  Clear circuit volatile parameters'
ROUTINE NML_CLE_CIRCUIT : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine Clears the specified circuit parameters into the volatile
!	data base.
!
! IMPLICIT INPUTS:
!
!	NML$GB_ENTFRM contains the entity format code.
!
!--

BEGIN

MAP
	NML$GB_ENTFRM : BYTE SIGNED;

SELECTONEU .NML$GB_ENTFRM OF
	SET

	[NMA$C_ENT_KNO]:

		IF NMA$NPARSE (NML$AB_NPA_BLK,
				NML$NPA_CLPUCIR)
		THEN
			NML_SETCLEPLURAL (NML$C_CIRCUIT,
					  NML$CLEARKNOWN,
					  0,
					  0);

	[1 TO 16]:
		BEGIN

		IF NMA$NPARSE (NML$AB_NPA_BLK,
				   NML$NPA_CLPUCIR)
		THEN
			NML_SETCLEPLURAL (NML$C_CIRCUIT,
					 NML$CLEARENTITY,
					 .NML$GB_ENTFRM,
					 NML$AB_ENTID);

		END;

	TES;

NML$ERROR_2 (NMA$C_STS_IDE, NMA$C_ENT_CIR);	! Option error
END;				! End of NML_CLE_CIRCUIT

%SBTTL 'NML_CLE_LINE  Clear line volatile parameters'
ROUTINE NML_CLE_LINE : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine Clears the specified line parameters into the volatile
!	data base.
!
! IMPLICIT INPUTS:
!
!	NML$GB_ENTFRM contains the entity format code.
!
!--

BEGIN

MAP
	NML$GB_ENTFRM : BYTE SIGNED;

SELECTONEU .NML$GB_ENTFRM OF
	SET

	[NMA$C_ENT_KNO]:

		IF NMA$NPARSE (NML$AB_NPA_BLK,
				NML$NPA_CLPULIN)
		THEN
			NML_SETCLEPLURAL (NML$C_LINE,
					  NML$CLEARKNOWN,
					  0,
					  0);

	[1 TO 16]:
		BEGIN

		IF NMA$NPARSE (NML$AB_NPA_BLK,
				   NML$NPA_CLPULIN)
		THEN
			NML_SETCLEPLURAL (NML$C_LINE,
					 NML$CLEARENTITY,
					 .NML$GB_ENTFRM,
					 NML$AB_ENTID);

		END;

	TES;

NML$ERROR_2 (NMA$C_STS_IDE, NMA$C_ENT_LIN);	! Option error

END;				! End of NML_CLE_LINE

%SBTTL 'NML_CLE_LOGGING  Clear logging volatile parameters'
ROUTINE NML_CLE_LOGGING : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine Clears the specified logging parameters into the volatile
!	data base.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NML$GB_ENTFRM contains the entity format code.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	NML$GB_ENTFRM : BYTE SIGNED;

    SELECTONEU .NML$GB_ENTFRM OF
	SET

	[NMA$C_ENT_KNO]:

	    IF NMA$NPARSE (NML$AB_NPA_BLK,
			   NML$NPA_CLPULOG)
	    THEN
		NML_SETCLEPLURAL (NML$C_LOGGING,
				  NML$CLEARKNOLOG,
				  0,
				  0);

	[NMA$C_SNK_CON,			! Console
	 NMA$C_SNK_FIL,			! File
	 NMA$C_SNK_MON]:		! Monitor
	    BEGIN

	    IF NMA$NPARSE (NML$AB_NPA_BLK,
			   NML$NPA_CLPULOG)
	    THEN
		NML_SETCLEPLURAL (NML$C_LOGGING,
				  NML$CLEARLOGGING,
				  .NML$GB_ENTFRM,
				  0);

	    END;

	TES;

    NML$ERROR_2 (NMA$C_STS_IDE, NMA$C_ENT_LOG);	! Option error

    END;				! End of NML_CLE_LOGGING

%SBTTL 'NML_CLE_NODE  Clear node volatile parameters'
ROUTINE NML_CLE_NODE : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine Clears the specified node parameters into the volatile
!	data base.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NML$AB_ENTID contains the entity id.
!	NML$GB_ENTFRM contains the entity format code.
!	NML$GL_PRS_FLGS contains the message parsing flags.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	NML$GB_ENTFRM : BYTE SIGNED;

    LOCAL
	STATUS;				! Temporary status

    SELECTONEU .NML$GB_ENTFRM OF
	SET

	[NMA$C_ENT_KNO]:

	    IF NMA$NPARSE (NML$AB_NPA_BLK,
			   NML$NPA_CLPUNOD)
	    THEN
		NML_SETCLEPLURAL (NML$C_NODE,
				  NML$CLEARKNONODES,
				  0,
				  0);

	[NMA$C_ENT_ADD]:
	    BEGIN

	    BIND
		NOD_NUM = NML$AB_ENTID : WORD;

	    IF .NML$GL_PRS_FLGS [NML$V_PRS_EXE] ! Check for executor
	    THEN
		BEGIN

		IF NMA$NPARSE (NML$AB_NPA_BLK,
			       NML$NPA_CLPUEXE)
		THEN
		    NML_SETCLEPLURAL (NML$C_EXECUTOR,
				      NML$CLEAREXECUTOR,
				      0,
				      0);
		END
	    ELSE
		IF NMA$NPARSE (NML$AB_NPA_BLK,
			       NML$NPA_CLPUNOD)
		THEN
		    NML_SETCLEPLURAL (NML$C_NODE,
				      NML$CLEARENTITY,
				      2,
				      NOD_NUM);

	    END;

	[1 TO 6]:
	    BEGIN

	    IF .NML$GL_PRS_FLGS [NML$V_PRS_EXE]
	    THEN
		BEGIN

		IF NMA$NPARSE (NML$AB_NPA_BLK,
			       NML$NPA_CLPUEXE) ! Parse the parameters
		THEN
		    NML_SETCLEPLURAL (NML$C_EXECUTOR,
				      NML$CLEAREXECUTOR,
				      0,
				      0);
		END
	    ELSE
		BEGIN

		IF NMA$NPARSE (NML$AB_NPA_BLK,
			       NML$NPA_CLPUNOD)
		THEN
		    NML_SETCLEPLURAL (NML$C_NODEBYNAME,
				      NML$CLEARENTITY,
				      .NML$GB_ENTFRM,
				      NML$AB_ENTID);

		END;
	    END;

	TES;

    NML$ERROR_2 (NMA$C_STS_IDE, NMA$C_ENT_NOD); ! Option error

    END;				! End of NML_CLE_NODE

%SBTTL	'NML_CLE_MODULE	Clear module volatile parameters'
ROUTINE NML_CLE_MODULE : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine clears the specified module parameters in the volatile
!	data base.
!
!--

BEGIN

BIND
	X25_PROTOCOL = UPLIT BYTE ('X25-PROTOCOL'),
	X25_SERVER = UPLIT BYTE ('X25-SERVER');

IF CH$EQL ( .NML$GB_ENTFRM, NML$AB_ENTID, 12, X25_PROTOCOL)
THEN
	IF NMA$NPARSE (NML$AB_NPA_BLK,
		       NML$NPA_CLPUMOD_PROTOCOL)
	THEN
		NML$ERROR_2 (NMA$C_STS_IDE, NMA$C_ENT_MOD)
;
!ELSE
!IF CH$EQL ( .NML$GB_ENTFRM, NML$AB_ENTID, 10, X25_SERVER)
!THEN
!	IF NMA$NPARSE (NML$AB_NPA_BLK,
!			NML$NPA_CLPUMOD_SERVER)
!	THEN
!		NML$ERROR_2 (NMA$C_STS_IDE, NMA$C_ENT_MOD);

NML$ERROR_2 (NMA$C_STS_IDE, NMA$C_ENT_MOD);
END;		! of  NML_CLE_MODULE

%SBTTL 'NML_CLE_OBJECT  Clear object volatile parameters'
ROUTINE NML_CLE_OBJECT : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine Clears the specified object parameters into the volatile
!	data base.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NML$GL_PRS_FLGS contains the parse flags.
!	NML$GB_ENTFRM contains the entity format code.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	NML$GB_ENTFRM : BYTE SIGNED;

!
! All functions specifying the object entity must be system-specific.
!

    IF .NML$GL_PRS_FLGS [NML$V_PRS_VMS]
    THEN

	SELECTONEU .NML$GB_ENTFRM OF
	    SET

	    [NMA$C_ENT_KNO]:

		IF NMA$NPARSE (NML$AB_NPA_BLK,
			       NML$NPA_CLPUOBJ)
		THEN
		    NML_SETCLEPLURAL (NML$C_OBJECT,
				      NML$CLEARKNOWN,
				      0,
				      0);

	    [1 TO 16]:
	        BEGIN

		IF NMA$NPARSE (NML$AB_NPA_BLK,
			       NML$NPA_CLPUOBJ)
		THEN
		    NML_SETCLEPLURAL (NML$C_OBJECT,
				      NML$CLEARENTITY,
				      .NML$GB_ENTFRM,
				      NML$AB_ENTID);

		END;

	    TES;

    NML$ERROR_2 (NMA$C_STS_IDE, NMA$C_SENT_OBJ);	! Option error

    END;				! End of NML_CLE_OBJECT

%SBTTL 'NML_CLE_LINK  Clear link volatile parameters'
ROUTINE NML_CLE_LINK : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine clears the specified link parameters into the volatile
!	data base.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NML$GL_PRS_FLGS contains the parse flags.
!	NML$GB_ENTFRM contains the entity format code.
!
!--

    BEGIN

    MAP
	NML$GB_ENTFRM : BYTE SIGNED;

!
! All functions specifying the link entity must be system-specific.
!

    IF .NML$GL_PRS_FLGS [NML$V_PRS_VMS]
    THEN

	SELECTONEU .NML$GB_ENTFRM OF
	    SET

	    [NMA$C_ENT_KNO]:		! Known
		    NML_SETCLEPLURAL (0, NML$DISCKNOWN);


	    [NMA$C_ENT_ADD]:
		    !
		    ! Node id is required as a double check on the link
		    ! to be disconnected.
		    !
		    IF .NML$GL_PRS_FLGS [NML$V_PRS_STR] THEN
			NML_SETCLEPLURAL (0, NML$DISCONNECT,
					  .(NML$AB_ENTID)<0,16>, 0)
		    ELSE
			NML$ERROR_2 (NMA$C_STS_IDE, NMA$C_ENT_NOD);

	    TES;

    NML$ERROR_2 (NMA$C_STS_IDE, NMA$C_SENT_LNK); ! Option error

    END;				! End of NML_CLE_LINK

%SBTTL 'NML_PUR_CIRCUIT  Purge circuit permanent parameters'
ROUTINE NML_PUR_CIRCUIT : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine Purges the specified circuit parameters into the permanent
!	data base.
!
! IMPLICIT INPUTS:
!
!	NML$GB_ENTFRM contains the entity format code.
!
!--

BEGIN

MAP
	NML$GB_ENTFRM : BYTE SIGNED;

SELECTONEU .NML$GB_ENTFRM OF
	SET

	[NMA$C_ENT_KNO]:

		IF NMA$NPARSE (NML$AB_NPA_BLK,
				   NML$NPA_CLPUCIR)
		THEN
			NML_DEFPURPLURAL (NML$C_CIRCUIT,
					  NML$PURGEKNOWN,
					  0,
					  0);

	[1 TO 16]:
		BEGIN

		IF NMA$NPARSE (NML$AB_NPA_BLK,
				   NML$NPA_CLPUCIR) ! Parse the parameters
		THEN
			NML_DEFPURPLURAL (NML$C_CIRCUIT,
					  NML$PURENTITY,
					  .NML$GB_ENTFRM,
					  NML$AB_ENTID);

		END;

	TES;

NML$ERROR_2 (NMA$C_STS_IDE, NMA$C_ENT_CIR);	! Option error

END;				! End of NML_PUR_CIRCUIT

%SBTTL 'NML_PUR_LINE  Purge line permanent parameters'
ROUTINE NML_PUR_LINE : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine Purges the specified line parameters into the permanent
!	data base.
!
! IMPLICIT INPUTS:
!
!	NML$GB_ENTFRM contains the entity format code.
!
!--

BEGIN

MAP
	NML$GB_ENTFRM : BYTE SIGNED;

SELECTONEU .NML$GB_ENTFRM OF
	SET

	[NMA$C_ENT_KNO]:

		IF NMA$NPARSE (NML$AB_NPA_BLK,
				   NML$NPA_CLPULIN)
		THEN
			NML_DEFPURPLURAL (NML$C_LINE,
					  NML$PURGEKNOWN,
					  0,
					  0);

	[1 TO 16]:
		BEGIN

		IF NMA$NPARSE (NML$AB_NPA_BLK,
				   NML$NPA_CLPULIN) ! Parse the parameters
		THEN
			NML_DEFPURPLURAL (NML$C_LINE,
					  NML$PURENTITY,
					  .NML$GB_ENTFRM,
					  NML$AB_ENTID);

		END;

	TES;

NML$ERROR_2 (NMA$C_STS_IDE, NMA$C_ENT_LIN);	! Option error

END;				! End of NML_PUR_LINE

%SBTTL 'NML_PUR_LOGGING  Purge logging permanent parameters'
ROUTINE NML_PUR_LOGGING : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine Purges the specified logging parameters into the permanent
!	data base.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NML$GB_ENTFRM contains the entity format code.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	NML$GB_ENTFRM : BYTE SIGNED;

    SELECTONEU .NML$GB_ENTFRM OF
	SET

	[NMA$C_ENT_KNO]:

	    IF NMA$NPARSE (NML$AB_NPA_BLK,
			   NML$NPA_CLPULOG)
	    THEN
		NML_DEFPURPLURAL (NML$C_LOGGING,
				  NML$PURGEKNOWN,
				  0,
				  0);

	[NMA$C_SNK_CON,			! Console
	 NMA$C_SNK_FIL,			! File
	 NMA$C_SNK_MON]:		! Monitor
	    BEGIN

	    IF NMA$NPARSE (NML$AB_NPA_BLK,
			   NML$NPA_CLPULOG)
	    THEN
		NML_DEFPURPLURAL (NML$C_LOGGING,
				  NML$PURLOGGING,
				  .NML$GB_ENTFRM,
				  0);

	    END;

	TES;

    NML$ERROR_2 (NMA$C_STS_IDE, NMA$C_ENT_LOG);	! Option error

    END;				! End of NML_PUR_LOGGING

%SBTTL 'NML_PUR_NODE  Purge node permanent parameters'
ROUTINE NML_PUR_NODE : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine Purges the specified node parameters into the permanent
!	data base.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NML$AB_ENTID contains the entity id.
!	NML$GB_ENTFRM contains the entity format code.
!	NML$GL_PRS_FLGS contains the message parsing flags.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	NML$GB_ENTFRM : BYTE SIGNED;

    LOCAL
	STATUS;				! Temporary status

    SELECTONEU .NML$GB_ENTFRM OF
	SET

	[NMA$C_ENT_KNO]:

	    IF NMA$NPARSE (NML$AB_NPA_BLK,
			   NML$NPA_CLPUNOD)
	    THEN
		NML_DEFPURPLURAL (NML$C_NODE,
				  NML$PURGEKNOWN,
				  0,
				  0);

	[NMA$C_ENT_ADD]:
	    BEGIN

	    BIND
		NOD_NUM = NML$AB_ENTID : WORD;

	    IF .NML$GL_PRS_FLGS [NML$V_PRS_EXE] ! Check for executor
	    THEN
		BEGIN

		IF NMA$NPARSE (NML$AB_NPA_BLK,
			       NML$NPA_CLPUEXE)
		THEN
		    NML_DEFPURPLURAL (NML$C_EXECUTOR,
				      NML$PURENTITY,
				      0,
				      0);
		END
	    ELSE
		IF NMA$NPARSE (NML$AB_NPA_BLK,
			       NML$NPA_CLPUNOD)
		THEN
		    NML_DEFPURPLURAL (NML$C_NODE,
				      NML$PURENTITY,
				      2,
				      NOD_NUM);

	    END;

	[1 TO 6]:
	    BEGIN

	    IF .NML$GL_PRS_FLGS [NML$V_PRS_EXE]
	    THEN
		BEGIN

		IF NMA$NPARSE (NML$AB_NPA_BLK,
			       NML$NPA_CLPUEXE) ! Parse the parameters
		THEN
		    NML_DEFPURPLURAL (NML$C_EXECUTOR,
				      NML$PURENTITY,
				      0,
				      0);
		END
	    ELSE
		BEGIN

		IF NMA$NPARSE (NML$AB_NPA_BLK,
			       NML$NPA_CLPUNOD) ! Parse the parameters
		THEN
		    NML_DEFPURPLURAL (NML$C_NODEBYNAME,
				      NML$PURENTITY,
				      .NML$GB_ENTFRM,
				      NML$AB_ENTID);

		END
	    END;

	TES;

    NML$ERROR_2 (NMA$C_STS_IDE, NMA$C_ENT_NOD);	! Option error
    END;				! End of NML_PUR_NODE

%SBTTL	'NML_PUR_MODULE	Purge module permanent parameters'
ROUTINE NML_PUR_MODULE : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine sets the specified module parameters in the permanent
!	data base.
!
!--

BEGIN

BIND
	X25_PROTOCOL = UPLIT BYTE ('X25-PROTOCOL'),
	X25_SERVER = UPLIT BYTE ('X25-SERVER');

IF CH$EQL ( .NML$GB_ENTFRM, NML$AB_ENTID, 12, X25_PROTOCOL)
THEN
	IF NMA$NPARSE (NML$AB_NPA_BLK,
		       NML$NPA_CLPUMOD_PROTOCOL)
	THEN
		NML$ERROR_2 (NMA$C_STS_IDE, NMA$C_ENT_MOD)
;
!ELSE
!IF CH$EQL ( .NML$GB_ENTFRM, NML$AB_ENTID, 10, X25_SERVER)
!THEN
!	IF NMA$NPARSE (NML$AB_NPA_BLK,
!			NML$NPA_CLPUMOD_SERVER)
!	THEN
!		NML$ERROR_2 (NMA$C_STS_IDE, NMA$C_ENT_MOD);

NML$ERROR_2 (NMA$C_STS_IDE, NMA$C_ENT_MOD);
END;		! of  NML_PUR_MODULE

%SBTTL 'NML_PUR_OBJECT  Purge object permanent parameters'
ROUTINE NML_PUR_OBJECT : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine Purges the specified object parameters into the permanent
!	data base.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NML$GL_PRS_FLGS contains the parse flags.
!	NML$GB_ENTFRM contains the entity format code.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	NML$GB_ENTFRM : BYTE SIGNED;

!
! All functions specifying the object entity must be system-specific.
!
    IF .NML$GL_PRS_FLGS [NML$V_PRS_VMS]
    THEN

	SELECTONEU .NML$GB_ENTFRM OF
	    SET

	    [NMA$C_ENT_KNO]:

		IF NMA$NPARSE (NML$AB_NPA_BLK,
			       NML$NPA_CLPUOBJ)
		THEN
		    NML_DEFPURPLURAL (NML$C_OBJECT,
				      NML$PURGEKNOWN,
				      0,
				      0);

	    [1 TO 16]:
	        BEGIN

		IF NMA$NPARSE (NML$AB_NPA_BLK,
			       NML$NPA_CLPUOBJ) ! Parse the parameters
		THEN
		    NML_DEFPURPLURAL (NML$C_OBJECT,
				      NML$PURENTITY,
				      .NML$GB_ENTFRM,
				      NML$AB_ENTID);

		END;

	    TES;

    NML$ERROR_2 (NMA$C_STS_IDE, NMA$C_SENT_OBJ);	! Option error

    END;				! End of NML_PUR_OBJECT

%SBTTL 'NML_DEFPURPLURAL  Change known entity parameters'
ROUTINE NML_DEFPURPLURAL (ENT, RTN, PRM1, PRM2) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Perform a plural operation. Send bracketing messages.
!
! FORMAL PARAMETERS:
!
!	ENT
!	RTN
!	PRM1
!	PRM2
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	MSGSIZE;

!
! Open permanent data base file specified for write.
!
    NML$OPENFILE (.NML$AB_ENTITYDATA [.ENT, EIT$B_FILEID], NMA$C_OPN_AC_RW);
!
! Send success with multiple responses message.
!
    NML$BLD_REPLY (UPLIT(0, NMA$C_STS_MOR), MSGSIZE); ! Build message
    NML$SEND (NML$AB_SNDBUFFER, .MSGSIZE);	      ! Send it
!
! Enable condition handler to allow done message to be sent.
!
    LIB$ESTABLISH (NML$MAINHANDLER);
!
! Call entity-specific routine.
!
    (.RTN) (.ENT, .PRM1, .PRM2);
!
! Signal done message.
!
    LIB$REVERT ();			! Disable condition handler
    NML$ERROR_1 (NMA$C_STS_DON);	! Signal no more responses

    END;				! End of NML_DEFPURPLURAL

%SBTTL 'NML_SETCLEPLURAL  Change plural entity parameters'
ROUTINE NML_SETCLEPLURAL (ENT, RTN, PRM1, PRM2) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine performs initialization for SET and CLEAR operations.
!	The NICE framing messages (plural and done) are transmitted and
!	the SET/CLEAR routine is called.
!
! FORMAL PARAMETERS:
!
!	ENT		Entity type code.
!	RTN		Address of routine to be called.
!	PRM1		Function-specific routine parameter.
!	PRM2		Function-specific routine parameter.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Several NICE messages are transmitted.
!
!--

    BEGIN

    MAP
	NML$GB_OPTIONS : BBLOCK [1];

    LOCAL
	MSGSIZE;
!
! If this is a SET ALL command then open the permanent data base file
! for read.
!
    IF NOT .NML$GB_OPTIONS [NMA$V_OPT_CLE]
    AND .NML$GL_PRS_FLGS [NML$V_PRS_ALL]
    THEN
	NML$OPENFILE (.NML$AB_ENTITYDATA [.ENT, EIT$B_FILEID],
		      NMA$C_OPN_AC_RO);
!
! Send success with multiple responses message.
!
    NML$BLD_REPLY (UPLIT (0, NMA$C_STS_MOR), MSGSIZE); ! Build message
    NML$SEND (NML$AB_SNDBUFFER, .MSGSIZE);	       ! Send it
!
! Enable condition handler to allow done message to be sent.
!
    LIB$ESTABLISH (NML$MAINHANDLER);
!
! Call entity-specific routine.
!
    (.RTN) (.ENT, .PRM1, .PRM2);
!
! Signal done message.
!
    LIB$REVERT ();			! Disable condition handler
    NML$ERROR_1 (NMA$C_STS_DON);	! Signal no more responses

    END;				! End of NML_SETCLEPLURAL

END					! End of module

ELUDOM
