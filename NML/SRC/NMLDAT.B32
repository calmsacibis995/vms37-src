MODULE NML$DAT (IDENT = 'V03-001') =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  DECnet-VAX Network Management Listener
!
!
! ABSTRACT:
!
!	This module contains all global data referenced by
!	NML modules.
!
! ENVIRONMENT:  VAX/VMS Operating System
!
! AUTHOR:  Distributed Systems Software Engineering
!
! CREATION DATE:  3-Oct-1979
!
! MODIFIED BY:
!
!	V03-001	MKP0013		Kathy Perko		16-Feb-1982
!		Add autoservice event to list of KNOWN EVENTS.
!
!	V02-013	MKP0012		Kathy Perko		15-Feb-1982
!		Retinstate pipeline quota parameters for executor node.
!
!	V02-012	MKP0011		Kathy Perko		4-Feb-1982
!		Fix macro that builds the KNOWN EVENTS tables so that
!		it distinguishes between events with a source type of "none"
!		and events with a source type of "any"
!
!	V02-011	MKP0010		Kathy Perko		19-Jan-1982
!		Add circuit parameter, Transport protocol (NMA$C_PCCI_XPT).
!
!	V02-010	MKP0009		Kathy Perko		7-Jan-1982
!		One more time now -- move the RTT parameter from
!		circuits back to lines. Sigh.
!
!	V02-009	MKP0008		Kathy Perko		3-Jan-1982
!		Add LAD parameter to link semantic tables so NML can
!		handle SHOW LINKS commands from V2 nodes.
!
!	V02-008	MKP0007		Kathy Perko		31-Dec-1981
!		Fix order of node parameters so they are returned to NPC
!		in ascending order.  Also, set up Entity Table so that
!		the search key for the executor node is always wildcard
!		(since there is only the one entry in NETACPs executor
!		data base.)
!
!	V02-007	MKP0006		Kathy Perko		2-Dec-1981
!		Move Line parameter, receive buffers to return in the
!		correct order for SHOWs and LISTs. Also, add the
!		ACCESS parameter to executor node shows and lists.
!		Add proxy login parameters for objects and nodes.
!
!	V02-006	MKP0005		Kathy Perko		1-Dec-1981
!		Move retransmit timer parameter from circuits to lines.
!		Also, add State and Remote Process ID parameters to links.
!
!	V02-005	MKP0004		Kathy Perko		17-Nov-1981
!		Add circuits to logging event table.
!
!	V02-005	MKP0003		Kathy Perko		13-Nov-1981
!		Add line clock parameter.
!
!	V02-004	MKP0002		Kathy Perko		4-Nov-1981
!		Fix parameter mapping tables size.
!
!	V02-003	TMH0003		Tim Halvorsen		12-Oct-1981
!		Define new cell to contain NCP version number.  Make
!		changes to add V2 compatibility.
!
!	V02-002	MKP0001		Kathy Perko		6-Sept-1981
!		Add new VMS specific parameters: CIRCUIT VERIFICATION,
!		NODE ACCESS, EXECUTOR DEFAULT ACCESS and PIPELINE QUOTA.
!		Also, fix executor node counter reporting, and add a
!		patch area.
!
!	V02-001	LMK0001		Len Kawell		18-Jul-1981
!		Add CIRCUITS and modify LINES.
!--

%SBTTL 'Global data declarations'

!
! INCLUDE FILES:
!

LIBRARY 'LIB$:NMLLIB.L32';
LIBRARY 'SHRLIB$:NMALIBRY.L32';
LIBRARY 'SHRLIB$:NET.L32';
LIBRARY 'SHRLIB$:EVCDEF.L32';
LIBRARY 'SYS$LIBRARY:STARLET.L32';

!
! Patch area.
!

PSECT GLOBAL = PATCH_AREA;

GLOBAL
	NML$PATCH_AREA : BBLOCK [300];

PSECT GLOBAL = $GLOBAL$;

!
! OWN STORAGE:
!
GLOBAL
    NML$GQ_PROPRVMSK : BBLOCK [8],		! Process privilege mask
    NML$GW_ACP_CHAN;				! ACP control channel

!
! Debugging log mask.  The bit mask is set up at NML initialization
! by translating the logical name NML$LOG.  The resulting ASCII hex number
! is converted to binary to provide the appropriate mask bit settings.
!
! The values for NML$LOG are defined as follows:
!
!	    1	NICE message network I/O.
!	    2	Permanent data base file I/O.
!	    4	NPARSE state transitions.
!	    8	Test (node loopback) message network I/O.
!	   10	Volatile data base I/O (NETACP QIOs).
!	   20	MOP direct line I/O.
!	   40	Trace service operation.
!	   80	Raw event data.
!
!		100 through 8000 are not used.
!
!	10000	Dump node permanent data base file at initialization.
!	20000	Dump line permanent data base file at initialization.
!	40000	Dump logging permanent data base file at initialization.
!	80000	Dump object permanent data base file at initialization.
!
!		100000 through 80000000 are not used.
!
GLOBAL
    NML$GL_LOGMASK   : BLOCK [1] INITIAL (0);	! Internal logging mask
!
! Network Management version number storage
!
GLOBAL BIND
    NML$AB_NML_NMV = UPLIT BYTE (NML$K_VERSION,
				 NML$K_DEC_ECO,
				 NML$K_USER_ECO);
!
! Network device name.
!
GLOBAL BIND
    NML$GQ_NETNAMDSC = $ASCID ('_NET:');
!
! Command link channel data
!
GLOBAL
    NML$GB_CMD_VER   : BYTE,			! Command node phase type
						! (2 = Phase II, 3 = Phase III)
    NML$GB_NCP_VERSION: VECTOR [3,BYTE],	! NICE version # of NCP
    NML$GL_RCVDATLEN;				! Length of received data
!
! Network I/O buffers
!
GLOBAL
    NML$AB_RCVBUFFER : VECTOR [NML$K_RCVBFLEN, BYTE],	! Receive buffer
    NML$AB_SNDBUFFER : VECTOR [NML$K_SNDBFLEN, BYTE];	! Send buffer
GLOBAL BIND
    NML$GQ_RCVBFDSC =
	UPLIT (NML$K_RCVBFLEN, NML$AB_RCVBUFFER), ! Receive buffer descriptor
    NML$GQ_SNDBFDSC =
	UPLIT (NML$K_SNDBFLEN, NML$AB_SNDBUFFER); ! Send buffer descriptor
!
! Message parsing data
!
GLOBAL
    NML$GB_ENTCODE,			! NICE entity code
    NML$AB_ENTID     : BBLOCK [16],	! NICE entity id
    NML$GB_ENTFRM    : BYTE,		! NICE entity format code
    NML$GB_FUNC      : BYTE,		! NICE function code
    NML$GB_INFO      : BYTE,		! NICE information code
    NML$GB_OPTIONS   : BYTE,		! NICE option flags
    NML$GL_PRMCODE,			! Parameter code for parsing
    NML$GL_PRS_FLGS  : BLOCK [1],	! Message parsing flags
    NML$GQ_ENTSTRDSC : DESCRIPTOR,	! Entity-specific string descriptor
    NML$AB_NPA_BLK   : $NPA_BLKDEF 	! NPARSE argument block
		       INITIAL (NPA$K_COUNT0),

    NML$GL_PROTOCOL_ENTITY;		! Save NML internal entity ID
					! for X.25 protocol DTE or Group
					! (NML$C_PROT_DTE, NML$C_PROT_GROUP).
!
! The following data is used for parameter applicability control.
! It is set during parsing for singular entity operations or during
! the processing of plural entity operations.
!

!
! The following data is used for logging data base operations.  It is
! set up during parsing (primarily).
!
GLOBAL
    NML$GB_EVTSRCTYP : BYTE,		! Event source type
    NML$GQ_EVTSRCDSC : DESCRIPTOR,	! Event source descriptor
    NML$GW_EVTCLASS  : WORD,		! Event class
    NML$GB_EVTMSKTYP : BYTE,		! Mask type
    NML$GQ_EVTMSKDSC : DESCRIPTOR,	! Mask descriptor
    NML$GW_EVTSNKADR : WORD;		! Sink node address
!
! Record buffer for permanent data base access.
!
GLOBAL
    NML$AB_RECBUF : BBLOCK [NML$K_RECBFLEN];
GLOBAL BIND
    NML$GQ_RECBFDSC = UPLIT (NML$K_RECBFLEN, NML$AB_RECBUF);
!
! QIO buffer for volatile data base access.
!
GLOBAL
    NML$AB_QIOBUFFER : BBLOCK [NML$K_QIOBFLEN];
GLOBAL BIND
    NML$GQ_QIOBFDSC = UPLIT (NML$K_QIOBFLEN, NML$AB_QIOBUFFER);
!
! Executor information buffer and descriptors.
! NML$GQ_EXEBFDSC describes the buffer to contain the executor data.
! NML$GQ_EXEDATDSC describes the executor data once it is in the buffer.
! NML$GL_EXEDATPTR is the current pointer into the executor data buffer.
! These structures are used to handle the second set of executor parameters
! that are not common to other nodes.
!
GLOBAL
    NML$AB_EXEBUFFER : VECTOR [NML$K_QIOBFLEN, BYTE],
    NML$GL_EXEDATPTR,
    NML$GQ_EXEDATDSC : DESCRIPTOR INITIAL (0, NML$AB_EXEBUFFER);
GLOBAL BIND
    NML$GQ_EXEBFDSC = UPLIT (NML$K_QIOBFLEN, NML$AB_EXEBUFFER);
!
! Parameter descriptor buffer.  Each entry consists of two words containing
! the semantic table index, a count, and a longword pointer to the parameter
! in the receive buffer.
!
GLOBAL
    NML$GW_PRMDESCNT : WORD,		! Current parameter descriptor count
    NML$AW_PRM_DES : BLOCKVECTOR [PDB$K_NUMBER, 4, WORD];
!
! The following structure is used for building a message segment block (MSB).
! NML$BLD_REPLY is called with this block as input to construct a NICE reply
! message.
!
GLOBAL
    NML$AB_MSGBLOCK : BBLOCK [MSB$K_LENGTH];

%SBTTL 'Data for service operations'
!
! The following data is used to store information needed for line service
! operations such as LOAD, DUMP, TRIGGER, and line loop.
!
GLOBAL
!
! The service entity code can be any one of the following values:
!
!	NML$C_LINE
!	NML$C_NODE
!	NML$C_NODEBYNAME
!
    NML$GB_SRVIDCODE	: BYTE,			! Service entity code (key)
!
! The entity id string is the data used as the key into the volatile data
! base to get information for the service operation.  The contents of the
! buffer are determined by the value of the service id code.
!
!    NML$C_LINE		contains line name in VMS format.
!    NML$C_NODE		contains node address (always a word).
!    NML$C_NODEBYNAME 	contains node name.
!
    NML$AB_SRVIDBUFFER	: BBLOCK [32],	! Entity id string buffer
!
! The service id descriptor describes the extent of the entity id in
! the service id buffer.
!
    NML$GQ_SRVIDDSC	: DESCRIPTOR	! Service id descriptor
			  INITIAL (0, NML$AB_SRVIDBUFFER),
!
! The service data buffer contains all the data available to perform the
! service operation.  It is formatted just like a permanent data base
! record.  Any parameter can be accessed using the routines for manipulating
! the permanent data base (NMA$SEARCHFLD, NMA$INSERTFLD, NMA$DELETEFLD).
!
    NML$AB_SRVBUFFER	: BBLOCK [NML$K_RECBFLEN],	! Service data buffer
!
! The service data descriptor describes the extent of the data in the
! service data buffer.
!
    NML$GQ_SRVDATDSC	: DESCRIPTOR	! Service data descriptor
			  INITIAL (0, NML$AB_SRVBUFFER);
GLOBAL BIND
    NML$GQ_SRVIDBFDSC	=		! Id buffer descriptor
			UPLIT (32, NML$AB_SRVIDBUFFER)
			: DESCRIPTOR,
    NML$GQ_SRVBFDSC	=		! Data buffer descriptor
			UPLIT (NML$K_RECBFLEN, NML$AB_SRVBUFFER)
			: DESCRIPTOR;
!
! MOP I/O buffers and descriptors.
!
GLOBAL
    NML$AB_MOPSNDBUFFER : BBLOCK [128],	! Send buffer
    NML$AB_MOPRCVBUFFER : BBLOCK [128];	! Receive buffer
GLOBAL BIND
    NML$GQ_MOPSNDBFDSC  =
			UPLIT (128, NML$AB_MOPSNDBUFFER)
			: DESCRIPTOR,
    NML$GQ_MOPRCVBFDSC  =
			UPLIT (128, NML$AB_MOPRCVBUFFER)
			: DESCRIPTOR;


%SBTTL 'Macros to build event table'

MACRO
    EVT_LIST (TAB) =

	COMPILETIME
	    $G1 = 0, $G2 = 0,
	    $C1 = 0, $C2 = 0,
	    $L1 = 0, $L2 = 0,
	    $N1 = 0, $N2 = 0;

	PSECT GLOBAL = NML$EVENTS;

	GLOBAL
	    %NAME (TAB) : BBLOCKVECTOR [(%LENGTH - 1) / 2, 18]
			  INITIAL ($EVL (%REMAINING));

	GLOBAL LITERAL
	    NML$GK_EVENTS = (%LENGTH - 1) / 2;

	PSECT GLOBAL = $GLOBAL$;

	UNDECLARE
	    $G1, $G2,
	    $C1, $C2,
	    $L1, $L2,
	    $N1, $N2;
    %,

    $EVL [CLS, EVE] =
	%ASSIGN ($N1, 0)
	%ASSIGN ($N2, 0)
	%ASSIGN ($C1, 0)
	%ASSIGN ($C2, 0)
	%ASSIGN ($L1, 0)
	%ASSIGN ($L2, 0)
	%ASSIGN ($G1, 0)
	%ASSIGN ($G2, 0)

	%IF %NULL($EVC (CLS, %REMOVE (EVE)))
	%THEN
	WORD  (%NAME ('EVC$C_CLS_', CLS)),
	UPLIT ($G1, $G2),
	UPLIT ($N1, $N2),
	UPLIT ($C1, $C2),
	UPLIT ($L1, $L2)
	%FI
    %,

    $EVC (CLS) [EVT, SRC] =

	$EVE ((%NAME ('EVC$C_', CLS, '_', EVT) -
		 (%NAME ('EVC$C_CLS_', CLS) ^ 6)),
	      %REMOVE (SRC))
  	
    %,

    $EVE (BNUM) [SRC] =

	%IF BNUM LSSU 32
	%THEN %ASSIGN ($G1, $G1 OR (1 ^ BNUM))
	%ELSE %ASSIGN ($G2, $G2 OR (1 ^ (BNUM - 32)))
	%FI

	!
	! If the event has a source type of "none" then don't add it to
	! the source specific known event masks.
	!
	%IF NOT %IDENTICAL (SRC, 'NONE')
	%THEN
	    %IF %IDENTICAL (SRC, 'NODE') OR
		%IDENTICAL (SRC, 'ANY')
	    %THEN
		%IF BNUM LSSU 32
		%THEN %ASSIGN ($N1, $N1 OR (1 ^ BNUM))
		%ELSE %ASSIGN ($N2, $N2 OR (1 ^ (BNUM - 32)))
		%FI
	    %FI

	    %IF %IDENTICAL (SRC, 'LINE') OR
		%IDENTICAL (SRC, 'ANY')
	    %THEN
		%IF BNUM LSSU 32
	    	%THEN %ASSIGN ($L1, $L1 OR (1 ^ BNUM))
	    	%ELSE %ASSIGN ($L2, $L2 OR (1 ^ (BNUM - 32)))
	    	%FI
	    %FI

	    %IF %IDENTICAL (SRC, 'CIRCUIT') OR
		%IDENTICAL (SRC, 'ANY')
	    %THEN
		%IF BNUM LSSU 32
	    	%THEN %ASSIGN ($C1, $C1 OR (1 ^ BNUM))
	    	%ELSE %ASSIGN ($C2, $C2 OR (1 ^ (BNUM - 32)))
	    	%FI
	    %FI
	%FI
    %;


%SBTTL 'Event table'
!
! Event table.
!
!			+-------------+
! ETB$W_CLASS		|    class    |
!			+-------------+-------------+
! ETB$A_GLOBAL		|  known global event mask  |
!			+---------------------------+
! ETB$A_NODE		|   known node event mask   |
!			+---------------------------+
! ETB$A_LINE		|   known line event mask   |
!			+---------------------------+
!
PSECT
    OWN = NML$EVENTS (NOWRITE, ALIGN (0));
OWN
    Z$ : VECTOR [0];
UNDECLARE
    Z$;
PSECT
    OWN = $OWN$;
!
! Initialize the event table.
!
EVT_LIST (NML$AB_EVENTS,
!
! Network management layer
!
    NMA,(
	LOS,	('NONE'),	! Event records lost
!*	ANC,	('NODE'),	! Automatic node counters
!*	ALC,	('LINE'),	! Automatic line counters
	ALS,	('LINE'),	! Automatic line service
!*	LCZ,	('LINE'),	! Line counters zeroed
!*	NCZ,	('NODE'),	! Node counters zeroed
	PSL,	('CIRCUIT'),	! Passive loopback
	ABS,	('CIRCUIT'),	! Aborted service request
	CTR,	('ANY'),	! Automatic counters
	ZER,	('ANY')		! Counters zeroed.
	),
!
! Session control layer
!
!*    SCL,(
!*	LNS,	('NONE'),	! Local node state change
!*	ACR,	('NONE')	! Access control reject
!*	),
!
! Network services layer
!
    NSL,(
	IMS,	('NONE'),	! Invalid message
	IFC,	('NONE')	! Invalid flow control
!*	DBR,	('NODE')	! Data base reused
	),
!
! Transport layer
!
    TPL,(
	APL,	('NONE'),	! Aged packet loss
	UPL,	('CIRCUIT'),	! Node unreachable packet loss
	RPL,	('CIRCUIT'),	! Node out-of-range packet loss
	OPL,	('CIRCUIT'),	! Oversized packet loss
	PFM,	('CIRCUIT'),	! Packet format error
	PRU,	('CIRCUIT'),	! Partial routing update loss
	VFR,	('CIRCUIT'),	! Verification reject
	LDF,	('CIRCUIT'),	! Circuit down, circuit fault
	LDS,	('CIRCUIT'),	! Circuit down, software fault
	LDO,	('CIRCUIT'),	! Circuit down, operator fault
	LUP,	('CIRCUIT'),	! Circuit up
	ILF,	('CIRCUIT'),	! Initialization failure, circuit fault
	ISF,	('CIRCUIT'),	! Initialization failure, software fault
	IOF,	('CIRCUIT'),	! Initialization failure, operator fault
	RCH,	('NODE')	! Node reachability change
	),
!
! Data link layer
!
!*    DLL,(
!*	LSC,	('CIRCUIT'),	! Locally initiated state change
!*	RSC,	('CIRCUIT'),	! Remotely initiated state change
!*	PRS,	('CIRCUIT'),	! Protocol restart received in maintenance mode
!*	SND,	('CIRCUIT'),	! Send error threshold
!*	RET,	('CIRCUIT'),	! Receive error threshold
!*	SLC,	('CIRCUIT'),	! Select error threshold
!*	BHF,	('CIRCUIT'),	! Block header format error
!*	SAD,	('CIRCUIT'),	! Selection address error
!*	STT,	('CIRCUIT'),	! Streaming tributary
!*	LBS,	('CIRCUIT')	! Local buffer too small
!*	RST,	('CIRCUIT'),	! Restart (X.25 protocol)
!*	STC,	('CIRCUIT'),	! State change (X.25 protocol)
!*	RME,	('CIRCUIT'),	! Retransmit maximum exceeded (X.25)
!*	),
!
! Physical link layer
!
!*    PLL,(
!*	DSR,	('LINE'),	! Data set ready transition
!*	RIN,	('LINE'),	! Ring indicator transition
!*	CAR,	('LINE'),	! Unexpected carrier transition
!*	MEM,	('LINE'),	! Memory access error
!*	COM,	('LINE'),	! Communications interface error
!*	PFM,	('LINE')	! Performance error
!*	),
!
! VMS specific
!
      VMS,(
!*	DBC,	('NONE'),	! Logging data base change
	DPC,	('NONE')	! DAP CRC error
!*	DP2,	('NONE')	! Duplicate Phase II initialization
	)

    );
!
! Undeclare all the macros used to build the event table.
!
UNDECLARE
    %QUOTE EVT_LIST,
    %QUOTE $EVL,
    %QUOTE $EVC,
    %QUOTE $EVE;


%SBTTL 'Parameter semantic table'
!
! This table contains information about all entity parameters.
!
!
! PST$W_DATAID		+------+------+-------------+
! PST$B_FORMAT		! dty  ! frm  !    id       !
! PST$B_DATATYPE	+------+------+-------------+
! PST$L_MINVALUE	!          minval           !
!			+---------------------------+
! PST$L_MAXVALUE	!          maxval           !
! PST$W_IDENT		+-------------+------+------+
! PST$L_NFBID		!         nfb id            !
!			+---------------------------+
!
!
! PST$W_DATAID		The network management parameter code.
!
! PST$B_FORMAT		The parameter format.  This field can have one
!			of the following values:
!
!				NML$K_BYTE
!				NML$K_WORD
!				NML$K_LONG
!				NML$K_STRING
!
! PST$B_DATATYPE	The network management automatic parsing code
!			for the parameter on output.  For some parameters
!			(such as coded multiple fields) this value is
!			combined with more information before it is moved
!			into the output message.
!
! PST$L_MINVALUE	This is the minimum parameter value.  For strings
!			(NML$K_STRING) this is the minimum length.
!
! PST$L_MAXVALUE	This is the maximum parameter value.  For strings
!			(NML$K_STRING) this is the maximum length.  If the
!			value is zero, the maximum value is determined by
!			the storage unit.
!
! PST$L_NFBID		The ACP control QIO field ID for this parameter.
!
! PST$K_ENTRYLEN	The number of bytes in a single PST entry.
!
!
! Macro to build parameter semantic table entries.
!
MACRO
    PST_ENTRY (PREF) [ID, FRM, DTY, MIN, MAX, DB, NFBID] =

	SWITCHES UNAMES;
	PSECT OWN = NML$SEMANTICS;

	OWN
	    ENTRY :	VECTOR [PST$K_ENTRYLEN, BYTE]
			ALIGN (0)
			INITIAL (
			    WORD (%NAME ('NMA$C_', PREF, '_', ID)),
			    BYTE (%NAME ('NML$K_', FRM)),
			    BYTE (DTY),
			    LONG (MIN),
			    LONG (MAX),
			    LONG (
				%IF %NULL (DB, NFBID)
				%THEN
					0
				%ELSE
					$FIELD_ID (DB, NFBID)
				%FI
				));

	GLOBAL LITERAL
	    %NAME ('PST$K_', PREF, '_', ID) = PRM_SEM_CNT;

	%ASSIGN (PRM_SEM_CNT, PRM_SEM_CNT+1);

	PSECT OWN = $OWN$;
	SWITCHES NOUNAMES;
	UNDECLARE ENTRY;
    %;

MACRO
    $COU (W) =
	((NMA$M_CNT_COU OR (W ^ 13)) ^ -12)
    %;
!
! Parameter semantic table.
!
COMPILETIME
    PRM_SEM_CNT = 0;			! Initialize table entry count
PSECT
    GLOBAL = NML$SEMANTICS (NOWRITE, ALIGN (0));
GLOBAL
    NML$AB_PRMSEM : BBLOCKVECTOR [0, PST$K_ENTRYLEN];
PSECT
    GLOBAL = $GLOBAL$;
!
! Circuit parameter semantic table entries
!
PST_ENTRY (PCCI

    ,STA, BYTE,   NMA$M_PTY_COD+1,	0,     0,    CRI, STA
    ,SUB, BYTE,   NMA$M_PTY_COD+1,	0,     0,    CRI, SUB !RO
    ,SER, BYTE,   NMA$M_PTY_COD+1,	0,     0,    CRI, SER
    ,LCT, WORD,   2,			1,     0,    CRI, LCT
!?  ,CNO, STRING, NMA$M_PTY_CMU,	0,     0,    CRI, CNO !RO
!?  ,COB, STRING, NMA$M_PTY_CMU,	0,     0,    CRI, COB !RO
    ,LOO, STRING, NMA$M_PTY_ASC,	0,     0,    CRI, PNN !RO
    ,ADJ, STRING, NMA$M_PTY_CMU,	0,     0,    CRI, PNN !RO
    ,BLO, WORD,   2,			0,     0,    CRI, BLO !RO
    ,COS, BYTE,   1,			1,     25,   CRI, COS
    ,HET, WORD,   2,			0,     0,    CRI, HET
    ,LIT, WORD,   2,			0,     0,    CRI, LIT
    ,BLK, BYTE,   NMA$M_PTY_COD+1,	0,     0,    CRI, BLK
    ,MRC, BYTE,   1,			0,     0,    CRI, MRC
    ,RCT, WORD,   2,			0,     0,    CRI, RCT
    ,NUM, STRING, NMA$M_PTY_ASC,	0,     0,    CRI, NUM
!?  ,USR, STRING, NMA$M_PTY_CMU,	0,     0,    CRI, USR !RO
    ,POL, BYTE,   NMA$M_PTY_COD+1,	0,     0,    CRI, POL
    ,PLS, BYTE,   NMA$M_PTY_COD+1,	0,     0,    CRI, PLS !RO
!?  ,OWN, STRING, NMA$M_PTY_CMU,	0,     0,    CRI, OWN
    ,USE, BYTE,   NMA$M_PTY_COD+1,	0,     0,    CRI, USE
    ,TYP, BYTE,   NMA$M_PTY_COD+1,	0,     0,    CRI, TYP
    ,DTE, STRING, NMA$M_PTY_ASC,	0,     0,    CRI, DTE
    ,CHN, WORD,   2,			0,     0,    CRI, CHN
    ,MBL, WORD,   2,			0,     0,    CRI, MBL
    ,MWI, BYTE,   1,			0,     0,    CRI, MWI
    ,TRI, BYTE,   1,			0,     0,    CRI, TRI
    ,BBT, WORD,   2,			0,     0,    CRI, BBT
    ,TRT, WORD,   2,			0,     0,    CRI, TRT
    ,MRB, BYTE,   1,			0,     0,    CRI, MRB
    ,MTR, BYTE,   1,			0,     0,    CRI, MTR
    ,ACB, BYTE,   1,			0,     0,    CRI, ACB
    ,ACI, BYTE,   1,			0,     0,    CRI, ACI
    ,IAB, BYTE,   1,			0,     0,    CRI, IAB
    ,IAI, BYTE,   1,			0,     0,    CRI, IAI
    ,IAT, BYTE,   1,			0,     0,    CRI, IAT
    ,DYB, BYTE,   1,			0,     0,    CRI, DYB
    ,DYI, BYTE,   1,			0,     0,    CRI, DYI
    ,DYT, BYTE,   1,			0,     0,    CRI, DYT
    ,DTH, BYTE,   1,			0,     0,    CRI, DTH
    ,VER, BYTE,   NMA$M_PTY_COD+1,	0,     0,    CRI, VER ! VMS specific.
    ,XPT, BYTE,   NMA$M_PTY_COD+1,	0,     0,    CRI, XPT ! VMS specific.

    ,CC$, STRING, 0,			0,     0,    CRI, CNT !internal
  
	);
!
! Line parameter semantic table entries
!
EXTERNAL LITERAL
    NMA$C_PCLI_BF$;		! V2 receive buffers parameter.

PST_ENTRY (PCLI

    ,STA, BYTE,   NMA$M_PTY_COD+1,	0,     0,    PLI, STA
    ,SUB, BYTE,   NMA$M_PTY_COD+1,	0,     0,    PLI, SUB !RO
    ,SER, BYTE,   NMA$M_PTY_COD+1,	0,     0,    PLI, SER
    ,LCT, WORD,   2,			1,     0,    PLI, LCT
    ,CON, BYTE,   NMA$M_PTY_COD+1,	0,     0,    PLI, CON
    ,DUP, BYTE,   NMA$M_PTY_COD+1,	0,     0,    PLI, DUP
    ,PRO, BYTE,   NMA$M_PTY_COD+1,	0,     0,    PLI, PRO
    ,CLO, BYTE,   NMA$M_PTY_COD+1,      0,     0,    PLI, CLO
    ,STI, WORD,   2,			1,     0,    PLI, STI
    ,RTT, WORD,   2,                    0,     0,    PLI, RTT
    ,HTI, WORD,   2,			0,     0,    PLI, HTI
    ,MBL, WORD,   2,			0,     0,    PLI, MBL
    ,MRT, WORD,   2,			0,     0,    PLI, MRT
    ,MWI, BYTE,   1,			0,     0,    PLI, MWI
    ,SLT, WORD,   2,			0,     0,    PLI, SLT
    ,DDT, WORD,   2,			0,     0,    PLI, DDT
    ,DLT, WORD,   2,			0,     0,    PLI, DLT
    ,SRT, WORD,   2,			0,     0,    PLI, SRT
    ,BFN, WORD,   2,			0,     0,    PLI, BFN !VMS
    ,BF$, WORD,   2,                    0,     0,    PLI, BFN ! V2 VMS

    ,LC$, STRING, 0,			0,     0,    PLI, CNT !internal
  
	);
!
! Logging parameter semantic table entries
!
PST_ENTRY (PCLO

    ,STA, BYTE,   NMA$M_PTY_COD+1,	0,     0,    ESI, STA
    ,LNA, STRING, NMA$M_PTY_ASC,	1,     255,  ESI, LNA
    ,SIN, STRING, NMA$M_PTY_CMU,	0,     0,    EFI, SIN
    ,EVE, STRING, NMA$M_PTY_CMU,	0,     0,    EFI, EVE

	);
!
! Node parameter semantic table entries
!
LITERAL					! Create separate entries for node
    NMA$C_PCNO_AD$ = NMA$C_PCNO_ADD;	!  and executor address parameters

PST_ENTRY (PCNO

    ,STA, BYTE,   NMA$M_PTY_COD+1,	0,     0,    LNI, STA
    ,IDE, STRING, NMA$M_PTY_ASC,	1,     32,   LNI, IDE
    ,MVE, STRING, NMA$M_PTY_CMU,	0,     0,       , 	!RO
    ,SLI, STRING, NMA$M_PTY_ASC,	1,     16,   NDI, SLI
    ,SPA, STRING, %X'20',		1,     4,    NDI, SPA
    ,SDV, BYTE,   NMA$M_PTY_COD+1,	0,     0,    NDI, SDV
    ,CPU, BYTE,   NMA$M_PTY_COD+1,	0,     0,    NDI, CPU
    ,LOA, STRING, NMA$M_PTY_ASC,	1,     255,  NDI, LOA
    ,SLO, STRING, NMA$M_PTY_ASC,	1,     255,  NDI, SLO
    ,TLO, STRING, NMA$M_PTY_ASC,	1,     255,  NDI, TLO
    ,STY, BYTE,   NMA$M_PTY_COD+1,	0,     0,    NDI, STY
    ,SID, STRING, NMA$M_PTY_ASC,	1,     16,   NDI, SID
    ,DUM, STRING, NMA$M_PTY_ASC,	1,     255,  NDI, DUM
    ,SDU, STRING, NMA$M_PTY_ASC,	1,     255,  NDI, SDU
    ,DAD, LONG,   4,			0,     0,    NDI, DAD
    ,DCT, LONG,   4,			0,     0,    NDI, DCT
    ,OHO, STRING, NMA$M_PTY_CMU,	0,     0,    NDI, OHO !RO
    ,IHO, WORD,   0,			0,     0,    NDI, IHO !WO*
    ,LPC, WORD,   2,			0,     0,       , 
    ,LPL, WORD,   2,			0,     0,       , 
    ,LPD, BYTE,   NMA$M_PTY_COD+1,	0,     0,       , 
    ,CTI, WORD,   2,			1,     0,    NDI, CTI
    ,NNA, STRING, 0,			1,     6,    NDI, NNA !WO
    ,NLI, STRING, NMA$M_PTY_ASC,	1,     16,   NDI, NLI
    ,ADD, WORD,   0,			0,     0,    LNI, ADD !WO
    ,AD$, WORD,   0,			0,     0,    NDI, ADD !WO internal
    ,A$$, WORD,   0,			0,     0,    NDI, ADD !WO internal
    ,ITI, WORD,   2,			1,     0,    LNI, ITI
    ,OTI, WORD,   2,			1,     0,    LNI, OTI
    ,ACL, WORD,   2,			0,     0,    NDI, ACL !RO
    ,DEL, BYTE,   1,			0,     0,    NDI, DEL !RO
    ,NVE, STRING, NMA$M_PTY_CMU,	0,     0,    LNI, NVE !RO
    ,MLK, WORD,   2,			1,     0,    LNI, MLK
    ,DFA, BYTE,   1,			1,     0,    LNI, DFA
    ,DWE, BYTE,   1,			1,     0,    LNI, DWE
    ,IAT, WORD,   2,			1,     0,    LNI, IAT
    ,RFA, WORD,   2,			1,     0,    LNI, RFA
    ,DTY, BYTE,   NMA$M_PTY_COD+1,	0,     0,    NDI, DTY !RO
    ,DCO, WORD,   2,			0,     0,    NDI, DCO !RO
    ,DHO, BYTE,   1,			0,     0,    NDI, DHO !RO
    ,DLI, STRING, NMA$M_PTY_ASC,	0,     16,   NDI, NLI !RO
    ,RVE, STRING, NMA$M_PTY_CMU,	0,     0,    LNI, RVE !RO
    ,ETY, BYTE,   NMA$M_PTY_COD+1,	0,     0,    LNI, ETY !RO*
    ,RTI, WORD,   2,			1,     0,    LNI, RTI
    ,SAD, LONG,   NMA$M_PTY_CMU,	0,     0,    LNI, SAD
    ,MAD, WORD,   2,			1,     0,    LNI, MAD
    ,MLN, WORD,   2,			1,     0,    LNI, MLN
    ,MCO, WORD,   2,			1,     1022, LNI, MCO
    ,MHO, BYTE,   1,			1,     30,   LNI, MHO
    ,MVI, BYTE,   1,			1,     0,    LNI, MVI
    ,MBU, WORD,   2,			0,     0,    LNI, MBU
    ,BUS, WORD,   2,			1,     0,    LNI, BUS
    ,PUS, STRING, NMA$M_PTY_ASC,	1,     39,   NDI, PUS !VMS
    ,PAC, STRING, NMA$M_PTY_ASC,	1,     39,   NDI, PAC !VMS
    ,PPW, STRING, NMA$M_PTY_ASC,	1,     39,   NDI, PPW !VMS
    ,NUS, STRING, NMA$M_PTY_ASC,	1,     39,   NDI, NUS !VMS
    ,NAC, STRING, NMA$M_PTY_ASC,	1,     39,   NDI, NAC !VMS
    ,NPW, STRING, NMA$M_PTY_ASC,	1,     39,   NDI, NPW !VMS
    ,RPA, STRING, NMA$M_PTY_ASC,	1,     8,    NDI, RPA !VMS
    ,TPA, STRING, NMA$M_PTY_ASC,	1,     8,    NDI, TPA !VMS
    ,ACC, BYTE,   NMA$M_PTY_COD+1,      0,     0,    NDI, ACC !VMS
    ,DAC, BYTE,   NMA$M_PTY_COD+1,      0,     0,    LNI, DAC !VMS
    ,PIQ, WORD,   2,                    0,     0,    LNI, PIQ !VMS
    ,PRX, BYTE,   NMA$M_PTY_COD+1,      0,     0,    NDI, PRX !VMS
    ,DPX, BYTE,   NMA$M_PTY_COD+1,      0,     0,    LNI, DPX !VMS

    ,NC$, STRING, 0,			0,     0,    NDI, CNT !internal
 
	);

!
! X-25 Protocol Module semantic table entries
!

PST_ENTRY(PCXP
    ,STA, BYTE,   NMA$M_PTY_COD+1,	0,     0,    XDI, STA
    ,CTM, WORD,   2,                    0,     0,    XDI, CTM
    ,ACH, WORD,   2,                    0,     0,    XDI, ACH ! RO
    ,ASW, WORD,   2,                    0,     0,    XDI, ASW ! RO
    ,DTE, STRING, NMA$M_PTY_ASC,        0,     16,   XDI, DTE
    ,GRP, STRING, NMA$M_PTY_ASC,        0,     16,   XGI, GRP
    ,NET, STRING, NMA$M_PTY_ASC,        0,     0,    XNI, NET
    ,LIN, STRING, NMA$M_PTY_ASC,        0,     0,    XDI, LIN
    ,CHN, LONG,   NMA$M_PTY_CMU,        0,     0,    XDI, CHN
    ,MCH, WORD,   2,                    0,     0,    XDI, MCH ! RO
    ,DBL, WORD,   2,                    0,     0,    XNI, DBL
    ,DWI, BYTE,   1,                    0,     0,    XNI, DWI
    ,MBL, WORD,   2,                    0,     0,    XNI, MBL
    ,MWI, BYTE,   1,                    0,     0,    XNI, MWI
    ,MCL, BYTE,   1,                    0,     0,    XNI, MCL
    ,MRS, BYTE,   1,                    0,     0,    XNI, MRS
    ,MST, BYTE,   1,                    0,     0,    XNI, MST
    ,CAT, BYTE,   1,                    0,     0,    XNI, CAT
    ,CLT, BYTE,   1,                    0,     0,    XNI, CLT
    ,RST, BYTE,   1,                    0,     0,    XNI, RST
    ,STT, BYTE,   1,                    0,     0,    XNI, STT
    ,GDT, STRING, NMA$M_PTY_ASC,        0,     16,   XGI, GDT
    ,GNM, WORD,   2,                    0,     0,    XGI, GNM
    ,GTY, BYTE,   1,                    0,     0,    XGI, GTY
!   ,PC$, STRING, 0,                    0,     0,    XGI, CNT !internal
	);

!
! Object parameter semantic table entries (Objects are an entity for VMS only).
!
PST_ENTRY (PCOB

    ,NUM, BYTE,   1,			0,     0,    OBI, NUM
    ,FID, STRING, NMA$M_PTY_ASC,	1,     64,   OBI, FID
    ,PID, LONG,   %X'20'+4,		0,     0,    OBI, PID !RO
    ,PRV, STRING, NMA$M_PTY_COD,	0,     0,    OBI, LPR
    ,USR, STRING, NMA$M_PTY_ASC,	1,     39,   OBI, USR
    ,ACC, STRING, NMA$M_PTY_ASC,	1,     39,   OBI, ACC
    ,PSW, STRING, NMA$M_PTY_ASC,	1,     39,   OBI, PSW
    ,PRX, BYTE,   NMA$M_PTY_COD+1,      0,     0,    OBI, PRX

	);
!
! Link parameter semantic table entries.
!
PST_ENTRY (PCLK

    ,STA, BYTE,   NMA$M_PTY_COD+1,      0,     0,     ,
    ,PID, LONG,   %X'20'+4,		0,     0,     ,
    ,NID, STRING, NMA$M_PTY_CMU,	0,     0,     ,
    ,LAD, STRING, NMA$M_PTY_CMU,        0,     0,     ,  ! V2 only
    ,DLY, BYTE,   1,                    0,     0,     ,
    ,RLN, WORD,   2,                    0,     0,     ,
    ,RID, STRING, NMA$M_PTY_ASC,        0,     0,     ,
    ,USR, STRING, NMA$M_PTY_ASC,        0,     0,     ,
    ,PRC, STRING, NMA$M_PTY_ASC,        0,     0,

	);
LITERAL
    PST$K_NUMBER = PRM_SEM_CNT;

UNDECLARE
    PRM_SEM_CNT,
    %QUOTE PST_ENTRY,
    %QUOTE $COU;

%SBTTL 'Change parameter tables'
!
! Macro to build parameter table entries.
!
!
!			+-------------+
! CPT$W_PSTINDEX	!    index    !
!			+-------------+-------------+
! CPT$A_DEFINE_RTN	! DEFINE routine address    !
!			+---------------------------+
! CPT$A_PURGE_RTN	! PURGE routine address     !
!			+---------------------------+
!
!
! CPT$W_PSTINDEX	Index into parameter semantic table (PST) 
!			blockvector.
!
! CPT$A_DEFINE_RTN	Address of routine to be called to perform
!			parameter value checking and to add the parameter
!			to the permanent data base record if it is valid.
!
! CPT$A_PURGE_RTN	Address of routine to be called to perform
!			parameter applicability checking and to remove
!			the parameter from the permanent data base record.
!
! CPT$K_ENTRYLEN	Length in bytes of a single CPT entry.
!


MACRO
    CPT_ENTRY (PREF) [ID, DEFRTN, PURRTN] =

	SWITCHES UNAMES;
	PSECT OWN = NML$CPTDATA;

	OWN
	    ENTRY :	VECTOR [CPT$K_ENTRYLEN, BYTE]
			ALIGN (0)
			INITIAL (
			    WORD (%NAME ('PST$K_', PREF, '_', ID)),
			    LONG (DEFRTN),
			    LONG (PURRTN)
				);

	GLOBAL LITERAL
	    %NAME ('CPT$GK_', PREF, '_', ID) = CPT_ENTRY_COUNT;

	%ASSIGN (CPT_ENTRY_COUNT, CPT_ENTRY_COUNT+1);

	PSECT OWN = $OWN$;
	SWITCHES NOUNAMES;
	UNDECLARE ENTRY;
%;
!
! Initialize change parameter tables.
!
COMPILETIME
    CPT_ENTRY_COUNT = 0;
PSECT
    GLOBAL = NML$CPTDATA (NOWRITE, ALIGN (0));
GLOBAL
    NML$AB_CPTABLE : BBLOCKVECTOR [0, CPT$K_ENTRYLEN];
PSECT
    GLOBAL = $GLOBAL$;
!
! Declare external define/purge routines.
!
EXTERNAL ROUTINE
    NML$DEFEXEADD,
    NML$DEFLINLTY,
    NML$DEFLINTRI,
    NML$DEFNODNLI,
    NML$DEFNODNNA,
    NML$DEFOBJNUM,
    NML$DEFPARAM,
    NML$PURNODNNA,
    NML$PURPARAM;
!
! Circuit table entries.
!
CPT_ENTRY (PCCI

    ,STA, NML$DEFPARAM,	 NML$PURPARAM	! State
    ,SER, NML$DEFPARAM,  NML$PURPARAM	! Service
    ,LCT, NML$DEFPARAM,  NML$PURPARAM	! Counter timer
    ,COS, NML$DEFPARAM,  NML$PURPARAM	! Cost
    ,HET, NML$DEFPARAM,  NML$PURPARAM	! Hello timer
    ,LIT, NML$DEFPARAM,  NML$PURPARAM	! Listen timer
    ,BLK, NML$DEFPARAM,  NML$PURPARAM	! Blocking
    ,MRC, NML$DEFPARAM,  NML$PURPARAM	! Maximum recalls
    ,RCT, NML$DEFPARAM,  NML$PURPARAM	! Recall timer
    ,NUM, NML$DEFPARAM,  NML$PURPARAM	! Number
    ,POL, NML$DEFPARAM,  NML$PURPARAM	! Polling state
!?  ,OWN, NML$DEFPARAM,  NML$PURPARAM	! Owner entity id
    ,USE, NML$DEFPARAM,  NML$PURPARAM	! Usage
    ,TYP, NML$DEFLINLTY, NML$PURPARAM	! Type
    ,DTE, NML$DEFPARAM,  NML$PURPARAM	! DTE
    ,CHN, NML$DEFPARAM,  NML$PURPARAM	! Channel
    ,MBL, NML$DEFPARAM,  NML$PURPARAM	! Maximum block
    ,MWI, NML$DEFPARAM,  NML$PURPARAM	! Maximum window
    ,TRI, NML$DEFPARAM,  NML$PURPARAM	! Tributary
    ,BBT, NML$DEFPARAM,  NML$PURPARAM	! Babble timer
    ,TRT, NML$DEFPARAM,  NML$PURPARAM	! Transmit timer
    ,MRB, NML$DEFPARAM,  NML$PURPARAM	! Maximum receive buffers
    ,MTR, NML$DEFPARAM,  NML$PURPARAM	! Maximum transmits
    ,ACB, NML$DEFPARAM,  NML$PURPARAM	! Active base
    ,ACI, NML$DEFPARAM,  NML$PURPARAM	! Active increment
    ,IAB, NML$DEFPARAM,  NML$PURPARAM	! Inactive base
    ,IAI, NML$DEFPARAM,  NML$PURPARAM	! Inactive increment
    ,IAT, NML$DEFPARAM,  NML$PURPARAM	! Inactive threshold
    ,DYB, NML$DEFPARAM,  NML$PURPARAM	! Dying base
    ,DYI, NML$DEFPARAM,  NML$PURPARAM	! Dying increment
    ,DYT, NML$DEFPARAM,  NML$PURPARAM	! Dying threshold
    ,DTH, NML$DEFPARAM,  NML$PURPARAM	! Dead threshold
    ,VER, NML$DEFPARAM,  NML$PURPARAM	! Verification - VMS specific
    ,XPT, NML$DEFPARAM,  NML$PURPARAM	! Transport protocol - VMS specific

	);
!
! Line table entries.
!
CPT_ENTRY (PCLI

    ,STA, NML$DEFPARAM,	 NML$PURPARAM	! State
    ,SER, NML$DEFPARAM,  NML$PURPARAM	! Service
    ,LCT, NML$DEFPARAM,  NML$PURPARAM	! Counter timer
    ,CON, NML$DEFPARAM,  NML$PURPARAM	! Controller mode
    ,DUP, NML$DEFPARAM,  NML$PURPARAM	! Duplex
    ,PRO, NML$DEFLINLTY, NML$PURPARAM	! Protocol type
    ,CLO, NML$DEFPARAM,  NML$PURPARAM	! Clock
    ,STI, NML$DEFPARAM,  NML$PURPARAM	! Service timer
    ,RTT, NML$DEFPARAM,  NML$PURPARAM	! Retransmit timer
    ,HTI, NML$DEFPARAM,  NML$PURPARAM	! Holdback timer
    ,MBL, NML$DEFPARAM,  NML$PURPARAM	! Maximum block
    ,MRT, NML$DEFPARAM,  NML$PURPARAM	! Maximum retransmissions
    ,MWI, NML$DEFPARAM,  NML$PURPARAM	! Maximum window
    ,SLT, NML$DEFPARAM,  NML$PURPARAM	! Scheduling timer
    ,DDT, NML$DEFPARAM,  NML$PURPARAM	! Dead timer
    ,DLT, NML$DEFPARAM,  NML$PURPARAM	! Delay timer
    ,SRT, NML$DEFPARAM,  NML$PURPARAM	! Stream timer
    ,BFN, NML$DEFPARAM,  NML$PURPARAM	! Number of buffers
    ,BF$, 0,             0,             ! V2 Number of buffers

	);
!
! Logging table entries.
!
CPT_ENTRY (PCLO

    ,STA, NML$DEFPARAM,  NML$PURPARAM	! State
    ,LNA, NML$DEFPARAM,  NML$PURPARAM	! Name
    ,SIN, 0, 0				! Sink node
    ,EVE, 0, 0				! Events

	);
!
! Node table entries.
!
CPT_ENTRY (PCNO

    ,STA, NML$DEFPARAM,  NML$PURPARAM	! State
    ,IDE, NML$DEFPARAM,  NML$PURPARAM	! Identification
    ,SLI, NML$DEFPARAM,  NML$PURPARAM	! Service circuit
    ,SPA, NML$DEFPARAM,  NML$PURPARAM	! Service password
    ,SDV, NML$DEFPARAM,  NML$PURPARAM	! Service device
    ,CPU, NML$DEFPARAM,  NML$PURPARAM	! CPU type
    ,LOA, NML$DEFPARAM,  NML$PURPARAM	! Load file
    ,SLO, NML$DEFPARAM,  NML$PURPARAM	! Secondary loader
    ,TLO, NML$DEFPARAM,  NML$PURPARAM	! Tertiary loader
    ,STY, NML$DEFPARAM,  NML$PURPARAM	! Software type
    ,SID, NML$DEFPARAM,  NML$PURPARAM	! Software identification
    ,DUM, NML$DEFPARAM,  NML$PURPARAM	! Dump file
    ,SDU, NML$DEFPARAM,  NML$PURPARAM	! Secondary dumper
    ,DAD, NML$DEFPARAM,  NML$PURPARAM	! Dump address
    ,DCT, NML$DEFPARAM,  NML$PURPARAM	! Dump count
    ,IHO, NML$DEFPARAM,  NML$PURPARAM	! Host
    ,LPC, NML$DEFPARAM,  NML$PURPARAM	! Loop count
    ,LPL, NML$DEFPARAM,  NML$PURPARAM	! Loop length
    ,LPD, NML$DEFPARAM,  NML$PURPARAM	! Loop data
    ,CTI, NML$DEFPARAM,  NML$PURPARAM	! Counter timer
    ,NNA, NML$DEFNODNNA, NML$PURNODNNA	! Name
    ,NLI, NML$DEFNODNLI, 0		! Line
    ,ADD, NML$DEFEXEADD, NML$PURPARAM	! Executor address
    ,AD$, NML$DEFEXEADD, 0		! Remote node address
    ,A$$, NML$DEFPARAM,  0		! Loop node address
    ,ITI, NML$DEFPARAM,  NML$PURPARAM	! Incoming timer
    ,OTI, NML$DEFPARAM,  NML$PURPARAM	! Outgoing timer
    ,MLK, NML$DEFPARAM,  NML$PURPARAM	! Maximum links
    ,DFA, NML$DEFPARAM,  NML$PURPARAM	! Delay factor
    ,DWE, NML$DEFPARAM,  NML$PURPARAM	! Delay weight
    ,IAT, NML$DEFPARAM,  NML$PURPARAM	! Inactivity timer
    ,RFA, NML$DEFPARAM,  NML$PURPARAM	! Retransmit factor
    ,RTI, NML$DEFPARAM,  NML$PURPARAM	! Routing timer
    ,MAD, NML$DEFPARAM,  NML$PURPARAM	! Maximum address
    ,SAD, NML$DEFPARAM,  NML$PURPARAM	! Subaddress
    ,MLN, NML$DEFPARAM,  NML$PURPARAM	! Maximum lines
    ,MCO, NML$DEFPARAM,  NML$PURPARAM	! Maximum cost
    ,MHO, NML$DEFPARAM,  NML$PURPARAM	! Maximum hops
    ,MVI, NML$DEFPARAM,  NML$PURPARAM	! Maximum visits
    ,MBU, NML$DEFPARAM,  NML$PURPARAM	! Maximum buffers
    ,BUS, NML$DEFPARAM,  NML$PURPARAM	! Buffer size
    ,PUS, NML$DEFPARAM,  NML$PURPARAM	! Privileged user id
    ,PAC, NML$DEFPARAM,  NML$PURPARAM	! Privileged account
    ,PPW, NML$DEFPARAM,  NML$PURPARAM	! Privileged password
    ,NUS, NML$DEFPARAM,  NML$PURPARAM	! Nonprivileged user id
    ,NAC, NML$DEFPARAM,  NML$PURPARAM	! Nonprivileged account
    ,NPW, NML$DEFPARAM,  NML$PURPARAM	! Nonprivileged password
    ,RPA, NML$DEFPARAM,  NML$PURPARAM	! Receive password
    ,TPA, NML$DEFPARAM,  NML$PURPARAM	! Transmit password
    ,ACC, NML$DEFPARAM,  NML$PURPARAM	! Access
    ,DAC, NML$DEFPARAM,  NML$PURPARAM   ! Default access
    ,PIQ, NML$DEFPARAM,  NML$PURPARAM   ! Pipeline quota
    ,PRX, NML$DEFPARAM,  NML$PURPARAM   ! Proxy access
    ,DPX, NML$DEFPARAM,  NML$PURPARAM   ! Default proxy access

	);

!
! X-25 Protocol Module Change Parameter table entries.
!
CPT_ENTRY (PCXP

    ,STA, NML$DEFPARAM,  NML$PURPARAM	! State
    ,CTM, NML$DEFPARAM,  NML$PURPARAM	! Counter timer
    ,ACH, NML$DEFPARAM,  NML$PURPARAM	! Active channels
    ,ASW, NML$DEFPARAM,  NML$PURPARAM	! Active switched
    ,DTE, NML$DEFPARAM,  NML$PURPARAM	! DTE
    ,GRP, NML$DEFPARAM,  NML$PURPARAM	! Group
    ,NET, NML$DEFPARAM,  NML$PURPARAM	! Network
    ,LIN, NML$DEFPARAM,  NML$PURPARAM	! Line
    ,CHN, NML$DEFPARAM,  NML$PURPARAM	! Channels
    ,MCH, NML$DEFPARAM,  NML$PURPARAM	! Maximum channels
    ,DBL, NML$DEFPARAM,  NML$PURPARAM	! Default block
    ,DWI, NML$DEFPARAM,  NML$PURPARAM	! Default window
    ,MBL, NML$DEFPARAM,  NML$PURPARAM	! Maximum block
    ,MWI, NML$DEFPARAM,  NML$PURPARAM	! Maximum window
    ,MCL, NML$DEFPARAM,  NML$PURPARAM	! Maximum clears
    ,MRS, NML$DEFPARAM,  NML$PURPARAM	! Maximum resets
    ,MST, NML$DEFPARAM,  NML$PURPARAM	! Maximum restarts
    ,CAT, NML$DEFPARAM,  NML$PURPARAM	! Call timer
    ,CLT, NML$DEFPARAM,  NML$PURPARAM	! Clear timer
    ,RST, NML$DEFPARAM,  NML$PURPARAM	! Reset timer
    ,STT, NML$DEFPARAM,  NML$PURPARAM	! Restart timer
    ,GDT, NML$DEFPARAM,  NML$PURPARAM	! Group DTE
    ,GNM, NML$DEFPARAM,  NML$PURPARAM	! Group number
    ,GTY, NML$DEFPARAM,  NML$PURPARAM	! Group type
	);

!
! Object table entries.
!
CPT_ENTRY (PCOB

    ,NUM, NML$DEFOBJNUM, NML$PURPARAM	! Number
    ,FID, NML$DEFPARAM,  NML$PURPARAM	! File
    ,PRV, NML$DEFPARAM,  NML$PURPARAM	! Privileges
    ,USR, NML$DEFPARAM,  NML$PURPARAM	! User id
    ,ACC, NML$DEFPARAM,  NML$PURPARAM	! Account
    ,PSW, NML$DEFPARAM,  NML$PURPARAM	! Password
    ,PRX, NML$DEFPARAM,  NML$PURPARAM   ! Proxy access

	);
!
! Link table entries (Links are not in the permament data base).
!
CPT_ENTRY (PCLK

    ,STA, 0,     0
    ,PID, 0,     0
    ,NID, 0,     0
    ,DLY, 0,     0
    ,RLN, 0,     0
    ,RID, 0,     0
    ,USR, 0,     0
    ,PRC, 0,     0

	);

GLOBAL LITERAL
    CPT$GK_NUMBER = CPT_ENTRY_COUNT;

UNDECLARE
    CPT_ENTRY_COUNT,
    %QUOTE CPT_ENTRY;


%SBTTL 'LIST parameter tables'
!
! Parameter list definition macro.
!
MACRO
    PRM_LIST (TAB, TYP, PRM) []  =

	SWITCHES UNAMES;
	PSECT
	    PLIT = NML$PARAMLISTS;

	BIND
	    %NAME ('NML$Q_P_', TAB, TYP, '_TABDES') =
		UPLIT ((%LENGTH - 2) / 2,
			UPLIT BYTE ($DEXTN (PRM, %REMAINING)));

	PSECT PLIT = $PLIT$;
	SWITCHES NOUNAMES;
    %,

    $DEXTN (TAB) [A, B] =
	WORD (%NAME ('PST$K_', TAB, '_', A)),
	LONG (B)
    %;
!
! Initialize psect.
!
PSECT
    OWN = NML$PARAMLISTS (NOWRITE, ALIGN (0));
OWN
    $Z : VECTOR [0];
PSECT
    OWN = $OWN$;
UNDECLARE
    $Z;
!
! Declare routines used to get parameters.
!
EXTERNAL ROUTINE
    NML$LISHOSTID,
    NML$LISLINEID,
    NML$LISLOONAM,
    NML$LISOBJPRV,
    NML$LISPARAM,
    NML$LISPASSWORD,
    NML$LISSERVPASS,
    NML$LISNMLVER;
!
!    Circuit status
!
PRM_LIST (CIR, STA, PCCI

	,STA, NML$LISPARAM	! State
	,LOO, NML$LISLOONAM	! Loopback name

	);
!
!    Circuit summary
!
PRM_LIST (CIR, SUM, PCCI

	,STA, NML$LISPARAM	! State
	,LOO, NML$LISLOONAM	! Loopback name

	);
!
!    Circuit characteristics
!
PRM_LIST (CIR, CHA, PCCI

	,SER, NML$LISPARAM	! Service
	,LCT, NML$LISPARAM	! Counter timer
	,COS, NML$LISPARAM	! Cost
	,HET, NML$LISPARAM	! Hello timer
	,LIT, NML$LISPARAM	! Listen timer
	,BLK, NML$LISPARAM	! Blocking
	,MRC, NML$LISPARAM	! Maximum recalls
	,RCT, NML$LISPARAM	! Recall timer
	,NUM, NML$LISPARAM	! Number
	,POL, NML$LISPARAM	! Polling state
!?	,OWN, NML$LISPARAM	! Owner entity id
	,USE, NML$LISPARAM	! Usage
	,TYP, NML$LISPARAM	! Type
	,DTE, NML$LISPARAM	! DTE
	,CHN, NML$LISPARAM	! Channel
	,MBL, NML$LISPARAM	! Maximum block
	,MWI, NML$LISPARAM	! Maximum window
	,TRI, NML$LISPARAM	! Tributary
	,BBT, NML$LISPARAM	! Babble timer
	,TRT, NML$LISPARAM	! Transmit timer
	,MRB, NML$LISPARAM	! Maximum receive buffers
	,MTR, NML$LISPARAM	! Maximum transmits
	,ACB, NML$LISPARAM	! Active base
	,ACI, NML$LISPARAM	! Active increment
	,IAB, NML$LISPARAM	! Inactive base
	,IAI, NML$LISPARAM	! Inactive increment
	,IAT, NML$LISPARAM	! Inactive threshold
	,DYB, NML$LISPARAM	! Dying base
	,DYI, NML$LISPARAM	! Dying increment
	,DYT, NML$LISPARAM	! Dying threshold
	,DTH, NML$LISPARAM	! Dead threshold
	,VER, NML$LISPARAM	! Verification (VMS specific)
	,XPT, NML$LISPARAM	! Transport protocol (VMS specific)

	);
!
!    line status
!
PRM_LIST (LIN, STA, PCLI

	,STA, NML$LISPARAM	! State

	);
!
!    line summary
!
PRM_LIST (LIN, SUM, PCLI

	,STA, NML$LISPARAM	! State

	);
!
!    line characteristics
!
PRM_LIST (LIN, CHA, PCLI

	,SER, NML$LISPARAM	! Service
	,LCT, NML$LISPARAM	! Counter timer
	,BFN, NML$LISPARAM	! Number of buffers
	,CON, NML$LISPARAM	! Controller
	,DUP, NML$LISPARAM	! Duplex
	,PRO, NML$LISPARAM	! Protocol type
	,CLO, NML$LISPARAM	! Clock
	,STI, NML$LISPARAM	! Service timer
	,RTT, NML$LISPARAM	! Retransmit timer
	,HTI, NML$LISPARAM	! Holdback timer
	,MBL, NML$LISPARAM	! Maximum block
	,MRT, NML$LISPARAM	! Maximum retransmits
	,MWI, NML$LISPARAM	! Maximum window
	,SLT, NML$LISPARAM	! Scheduling timer
	,DDT, NML$LISPARAM	! Dead timer
	,DLT, NML$LISPARAM	! Delay timer
	,SRT, NML$LISPARAM	! Stream timer

	);
!
! Logging
!
! Logging is not handled using this type of table.  Another mechanism
! is provided elsewhere.
!

!
!    executor status
!
PRM_LIST (EXE, STA, PCNO

	,STA, NML$LISPARAM	! State

	);
!
!    executor summary
!
PRM_LIST (EXE, SUM, PCNO

	,STA, NML$LISPARAM	! State

	);
!
!    executor characteristics
!
PRM_LIST (EXE, CHA, PCNO

	,IDE, NML$LISPARAM	! Identification
	,MVE, NML$LISNMLVER	! Management version
	,CTI, NML$LISPARAM	! Counter timer
	,ITI, NML$LISPARAM	! Incoming timer
	,OTI, NML$LISPARAM	! Outgoing timer
	,MLK, NML$LISPARAM	! Maximum links
	,DFA, NML$LISPARAM	! Delay factor
	,DWE, NML$LISPARAM	! Delay weight
	,IAT, NML$LISPARAM	! Inactivity timer
	,RFA, NML$LISPARAM	! Retransmit factor
	,ETY, NML$LISPARAM	! Executor node type
	,RTI, NML$LISPARAM	! Routing timer
	,MAD, NML$LISPARAM	! Maximum address
	,MLN, NML$LISPARAM	! Maximum lines
	,MCO, NML$LISPARAM	! Maximum cost
	,MHO, NML$LISPARAM	! Maximum hops
	,MVI, NML$LISPARAM	! Maximum visits
	,MBU, NML$LISPARAM	! Maximum buffers
	,BUS, NML$LISPARAM	! Buffer size
	,PUS, NML$LISPARAM	! Privileged user id
	,PAC, NML$LISPARAM	! Privileged account
	,PPW, NML$LISPASSWORD	! Privileged password
	,NUS, NML$LISPARAM	! Non-privileged user id
	,NAC, NML$LISPARAM	! Non-privileged account
	,NPW, NML$LISPASSWORD	! Non-privileged password
	,RPA, NML$LISPASSWORD	! Receive password
	,TPA, NML$LISPASSWORD	! Transmit password
	,ACC, NML$LISPARAM	! Transmit password
	,DAC, NML$LISPARAM	! Default access
 	,PIQ, NML$LISPARAM	! Pipeline quota
	,PRX, NML$LISPARAM	! Proxy access
	,DPX, NML$LISPARAM	! Default proxy access

	);
!
!    node status
!
PRM_LIST (NOD, STA, PCNO

	,NLI, NML$LISLINEID	! Line

	);
!
!    node summary
!
PRM_LIST (NOD, SUM, PCNO

	,NLI, NML$LISLINEID	! Line

	);
!
!    node characteristics
!
PRM_LIST (NOD, CHA, PCNO

	,SLI, NML$LISLINEID	! Service circuit
	,SPA, NML$LISSERVPASS	! Service password
	,SDV, NML$LISPARAM	! Service device
	,CPU, NML$LISPARAM	! CPU type
	,LOA, NML$LISPARAM	! Load file
	,SLO, NML$LISPARAM	! Secondary loader
	,TLO, NML$LISPARAM	! Tertiary loader
	,STY, NML$LISPARAM	! Software type
	,SID, NML$LISPARAM	! Software id
	,DUM, NML$LISPARAM	! Dump file
	,SDU, NML$LISPARAM	! Secondary dumper
	,DAD, NML$LISPARAM	! Dump address
	,DCT, NML$LISPARAM	! Dump count
	,OHO, NML$LISHOSTID	! Host
	,CTI, NML$LISPARAM	! Counter timer
	,NLI, NML$LISLINEID	! Line
	,PUS, NML$LISPARAM	! Privileged user id
	,PAC, NML$LISPARAM	! Privileged account
	,PPW, NML$LISPASSWORD	! Privileged password
	,NUS, NML$LISPARAM	! Non-privileged user id
	,NAC, NML$LISPARAM	! Non-privileged account
	,NPW, NML$LISPASSWORD	! Non-privileged password
	,RPA, NML$LISPASSWORD	! Receive password
	,TPA, NML$LISPASSWORD	! Transmit password
	,ACC, NML$LISPARAM	! Access
	,PRX, NML$LISPARAM	! Proxy access

	);
!
!    node status (by name)
!
BIND
    NML$Q_P_NDNSTA_TABDES = NML$Q_P_NODSTA_TABDES;
!
!    node summary (by name)
!
BIND
    NML$Q_P_NDNSUM_TABDES = NML$Q_P_NODSUM_TABDES;
!
!    node characteristics (by name)
!
BIND
    NML$Q_P_NDNCHA_TABDES = NML$Q_P_NODCHA_TABDES;
!
!    loop node status
!
PRM_LIST (LOO, STA, PCNO

	,NLI, NML$LISLINEID	! Line

	);
!
!    loop node sumary
!
PRM_LIST (LOO, SUM, PCNO

	,NLI, NML$LISLINEID	! Line

	);
!
!    loop node characteristics
!
PRM_LIST (LOO, CHA, PCNO

	,NLI, NML$LISLINEID	! Line

	);
!
!    object status
!
PRM_LIST (OBJ, STA, PCOB

	,NUM, NML$LISPARAM	! Number
	,FID, NML$LISPARAM	! File id
	,PRV, NML$LISOBJPRV	! Privilege list
	,USR, NML$LISPARAM	! User id
	,ACC, NML$LISPARAM	! Account
	,PSW, NML$LISPASSWORD	! Password

	);
!
!    object summary
!
PRM_LIST (OBJ, SUM, PCOB

	,NUM, NML$LISPARAM	! Number
	,FID, NML$LISPARAM	! File id
	,PRV, NML$LISOBJPRV	! Privilege list
	,USR, NML$LISPARAM	! User id
	,ACC, NML$LISPARAM	! Account
	,PSW, NML$LISPASSWORD	! Password

	);
!
!    object characteristics
!
PRM_LIST (OBJ, CHA, PCOB

	,NUM, NML$LISPARAM	! Number
	,FID, NML$LISPARAM	! File id
	,PRV, NML$LISOBJPRV	! Privilege list
	,USR, NML$LISPARAM	! User id
	,ACC, NML$LISPARAM	! Account
	,PSW, NML$LISPASSWORD	! Password
	,PRX, NML$LISPARAM	! Proxy access

	);

UNDECLARE
    %QUOTE PRM_LIST,
    %QUOTE $DEXTN;


%SBTTL 'SHOW parameter tables'
!
! Parameter list definition macro.
!
MACRO
    PRM_LIST (TAB, TYP, PRM) []  =

	SWITCHES UNAMES;
	PSECT
	    PLIT = NML$PARAMLISTS;

	GLOBAL BIND
	    %NAME ('NML$Q_',TAB, TYP, '_TABDES') =
		UPLIT ((%LENGTH - 2) / 2,
			UPLIT BYTE ($DEXTN (PRM, %REMAINING)));

	PSECT PLIT = $PLIT$;
	SWITCHES NOUNAMES;
    %,

    $DEXTN (TAB) [A, B] =
	WORD (%NAME ('PST$K_', TAB, '_', A)),
	LONG (B)
    %;
!
! Declare routines used to get parameters.
!
EXTERNAL ROUTINE
    NML$MOVBYTE,
    NML$MOVLONG,
    NML$MOVSTRING,
    NML$MOVWORD,
    NML$SHOBYTE,
    NML$SHOEXEBYTE,
    NML$SHOEXELONG,
    NML$SHOEXESTRING,
    NML$SHOEXEWORD,
    NML$SHOWORD,
    NML$SHOLONG,
    NML$SHOSTRING,
    NML$SHOCOUNTERS,
    NML$SHOHOSTID,
    NML$SHOLINEID,
    NML$SHOADJNODE,
    NML$SHOOBJPRV,
    NML$SHOSERVPASS,
    NML$SHONMLVER,
    NML$SHOREMSTA,
    NML$SHOVERSION,
    NML$SKIPLONG,
    NML$SKIPSTRING;
!
!***************************************************************************
!
! NOTE:  Any changes to a table (order or content) must be reflected in
!	 the NFB corresponding to that table.
!
!***************************************************************************
!
!    Circuit status
!
PRM_LIST (CIR, STA, PCCI

	,STA, NML$SHOBYTE	! State
	,SUB, NML$SHOBYTE	! Substate
	,LOO, NML$SHOSTRING	! Loopback name
	,ADJ, NML$SHOADJNODE	! Adjacent node
	,BLO, NML$SHOWORD	! Block size

	);
!
!    Circuit summary
!
PRM_LIST (CIR, SUM, PCCI

	,STA, NML$SHOBYTE	! State
	,SUB, NML$SHOBYTE	! Substate
	,LOO, NML$SHOSTRING	! Loopback name
	,ADJ, NML$SHOADJNODE	! Adjacent node

	);
!
!    Circuit characteristics
!
PRM_LIST (CIR, CHA, PCCI

	,STA, NML$SHOBYTE	! State
	,SUB, NML$SHOBYTE	! Substate
	,SER, NML$SHOBYTE	! Service
	,LCT, NML$SHOWORD	! Counter timer
!?	,CNO, NML$SHOADJNODE	! Connected node 	!??
!?	,COB, NML$SHOSTRING	! Connected object 	!??
	,LOO, NML$SHOSTRING	! Loopback name
	,ADJ, NML$SHOADJNODE	! Adjacent node
	,BLO, NML$SHOWORD	! Block size
	,COS, NML$SHOBYTE	! Cost
	,HET, NML$SHOWORD	! Hello timer
	,LIT, NML$SHOWORD	! Listen timer
	,BLK, NML$SHOBYTE	! Blocking
	,MRC, NML$SHOBYTE	! Maximum recalls
	,RCT, NML$SHOWORD	! Recall timer
	,NUM, NML$SHOSTRING	! Number
!?	,USR, NML$SHOSTRING	! User  		!??
	,POL, NML$SHOBYTE	! Polling state
	,PLS, NML$SHOBYTE	! Polling substate
!?	,OWN, NML$SHOSTRING	! Owner entity id 	!??
	,USE, NML$SHOBYTE	! Usage
	,TYP, NML$SHOBYTE	! Type
	,DTE, NML$SHOSTRING	! DTE
	,CHN, NML$SHOWORD	! Channel
	,MBL, NML$SHOWORD	! Maximum block
	,MWI, NML$SHOBYTE	! Maximum window
	,TRI, NML$SHOBYTE	! Tributary
	,BBT, NML$SHOWORD	! Babble timer
	,TRT, NML$SHOWORD	! Transmit timer
	,MRB, NML$SHOBYTE	! Maximum receive buffers
	,MTR, NML$SHOBYTE	! Maximum transmits
	,ACB, NML$SHOBYTE	! Active base
	,ACI, NML$SHOBYTE	! Active increment
	,IAB, NML$SHOBYTE	! Inactive base
	,IAI, NML$SHOBYTE	! Inactive increment
	,IAT, NML$SHOBYTE	! Inactive threshold
	,DYB, NML$SHOBYTE	! Dying base
	,DYI, NML$SHOBYTE	! Dying increment
	,DYT, NML$SHOBYTE	! Dying threshold
	,DTH, NML$SHOBYTE	! Dead threshold
	,VER, NML$SHOBYTE	! Verification (VMS specific)
	,XPT, NML$SHOBYTE	! Transport protocol (VMS specific)

	);
!
!    Circuit counters
!
PRM_LIST (CIR, COU, PCCI

	,CC$, NML$SHOCOUNTERS

	);
!
!    zero circuit counters
!
BIND
    NML$Q_CIRZER_TABDES = 0;

!
!    Circuit service parameters
!
PRM_LIST (CIR, SRV, PCNO

	,SLI, NML$MOVSTRING	! Service line
	,SPA, NML$MOVSTRING	! Service password
	,SDV, NML$MOVBYTE	! Service device
	,CPU, NML$MOVBYTE	! CPU type
	,LOA, NML$MOVSTRING	! Load file
	,SLO, NML$MOVSTRING	! Secondary loader
	,TLO, NML$MOVSTRING	! Tertiary loader
	,STY, NML$MOVBYTE	! Software type
	,SID, NML$MOVSTRING	! Software id
	,DUM, NML$MOVSTRING	! Dump file
	,SDU, NML$MOVSTRING	! Secondary dumper
	,DAD, NML$MOVLONG	! Dump address
	,DCT, NML$MOVLONG	! Dump count
	,IHO, NML$MOVWORD	! Host
	,NNA, NML$MOVSTRING	! Name
	,ADD, NML$MOVWORD	! Address

	);
!
!    line status
!
PRM_LIST (LIN, STA, PCLI

	,STA, NML$SHOBYTE	! State
	,SUB, NML$SHOBYTE	! Substate

	);
!
!    line summary
!
PRM_LIST (LIN, SUM, PCLI

	,STA, NML$SHOBYTE	! State
	,SUB, NML$SHOBYTE	! Substate

	);
!
!    line characteristics
!
PRM_LIST (LIN, CHA, PCLI

	,SER, NML$SHOBYTE	! Service
	,LCT, NML$SHOWORD	! Counter timer
	,BFN, NML$SHOWORD	! Number of buffers
	,CON, NML$SHOBYTE	! Controller
	,DUP, NML$SHOBYTE	! Duplex
	,PRO, NML$SHOBYTE	! Protocol type
	,CLO, NML$SHOBYTE	! Clock
	,STI, NML$SHOWORD	! Service timer
	,RTT, NML$SHOWORD	! Retransmit timer
	,HTI, NML$SHOWORD	! Holdback timer
	,MBL, NML$SHOWORD	! Maximum block
	,MRT, NML$SHOBYTE	! Maximum retransmits
	,MWI, NML$SHOBYTE	! Maximum window
	,SLT, NML$SHOWORD	! Scheduling timer
	,DDT, NML$SHOWORD	! Dead timer
	,DLT, NML$SHOWORD	! Delay timer
	,SRT, NML$SHOWORD	! Stream timer

	);
!
!    line counters
!
PRM_LIST (LIN, COU, PCLI

	,LC$, NML$SHOCOUNTERS

	);
!
!    zero line counters
!
BIND
    NML$Q_LINZER_TABDES = 0;

!
!    logging
!
! Logging is handled by another mechanism but these symbols must be defined
! to allow the information table to work correctly.
!
BIND
    NML$Q_LOGSUM_TABDES = 0,
    NML$Q_LOGSTA_TABDES = 0,
    NML$Q_LOGCHA_TABDES = 0,
    NML$Q_LOGEVE_TABDES = 0,
    NML$Q_SNKSUM_TABDES = 0,
    NML$Q_SNKSTA_TABDES = 0,
    NML$Q_SNKCHA_TABDES = 0,
    NML$Q_SNKEVE_TABDES = 0;
!
!    executor status
!
PRM_LIST (EXE, STA, PCNO

	,STA, NML$SHOEXEBYTE	! State
	,STA, NML$SKIPLONG	! *skip*
	,ACL, NML$SHOWORD	! Active links
	,DEL, NML$SHOBYTE	! Delay

	);
!
!    executor summary
!
PRM_LIST (EXE, SUM, PCNO

	,STA, NML$SHOEXEBYTE	! State
	,IDE, NML$SHOEXESTRING	! Identification
	,STA, NML$SKIPLONG	! *skip*
	,NLI, NML$SKIPSTRING	! *skip*
	,ACL, NML$SHOWORD	! Active links

	);
!
!    executor characteristics
!
PRM_LIST (EXE, CHA, PCNO

	,IDE, NML$SHOEXESTRING	! Identification
	,MVE, NML$SHONMLVER	! Management version
	,SLI, NML$SKIPSTRING	! *skip*
	,SPA, NML$SKIPSTRING	! *skip*
	,SDV, NML$SKIPLONG	! *skip*
	,CPU, NML$SKIPLONG	! *skip*
	,LOA, NML$SKIPSTRING	! *skip*
	,SLO, NML$SKIPSTRING	! *skip*
	,TLO, NML$SKIPSTRING	! *skip*
	,STY, NML$SKIPLONG	! *skip*
	,SID, NML$SKIPSTRING	! *skip*
	,DUM, NML$SKIPSTRING	! *skip*
	,SDU, NML$SKIPSTRING	! *skip*
	,DAD, NML$SKIPLONG	! *skip*
	,DCT, NML$SKIPLONG	! *skip*
	,OHO, NML$SKIPLONG	! *skip*
	,CTI, NML$SHOWORD	! Counter timer
	,ITI, NML$SHOEXEWORD	! Incoming timer
	,OTI, NML$SHOEXEWORD	! Outgoing timer
	,NVE, NML$SHOVERSION	! NSP version
	,MLK, NML$SHOEXEWORD	! Maximum links
	,DFA, NML$SHOEXEBYTE	! Delay factor
	,DWE, NML$SHOEXEBYTE	! Delay weight
	,IAT, NML$SHOEXEWORD	! Inactivity timer
	,RFA, NML$SHOEXEWORD	! Retransmit factor
	,RVE, NML$SHOVERSION	! Routing version
	,ETY, NML$SHOEXEBYTE	! Executor node type
	,RTI, NML$SHOEXEWORD	! Routing timer
	,MAD, NML$SHOEXEWORD	! Maximum address
	,MLN, NML$SHOEXEWORD	! Maximum lines
	,MCO, NML$SHOEXEWORD	! Maximum cost
	,MHO, NML$SHOEXEBYTE	! Maximum hops
	,MVI, NML$SHOEXEBYTE	! Maximum visits
	,MBU, NML$SHOEXEWORD	! Maximum buffers
	,BUS, NML$SHOEXEWORD	! Buffer size
	,NLI, NML$SKIPSTRING	! *skip*
	,PUS, NML$SHOSTRING	! Privileged user id
	,PAC, NML$SHOSTRING	! Privileged account
	,PPW, NML$SHOSTRING	! Privileged password
	,NUS, NML$SHOSTRING	! Non-privileged user id
	,NAC, NML$SHOSTRING	! Non-privileged account
	,NPW, NML$SHOSTRING	! Non-privileged password
	,RPA, NML$SHOSTRING	! Receive password
	,TPA, NML$SHOSTRING	! Transmit password
	,ACC, NML$SHOBYTE	! Access
	,DAC, NML$SHOEXEBYTE	! Default access
 	,PIQ, NML$SHOEXEWORD	! Pipeline quota
	,PRX, NML$SHOBYTE	! Proxy access
	,DPX, NML$SHOEXEBYTE	! Default proxy access

	);
!
!    show executor counters - use node counters
!

!
!    zero executor counters
!
BIND
    NML$Q_EXEZER_TABDES = 0;
!
!    node status
!
PRM_LIST (NOD, STA, PCNO

	,STA, NML$SHOREMSTA	! State
	,ACL, NML$SHOWORD	! Active links
	,DEL, NML$SHOBYTE	! Delay
	,DTY, NML$SHOBYTE	! Type
	,DCO, NML$SHOWORD	! Cost
	,DHO, NML$SHOBYTE	! Hops
	,DLI, NML$SHOLINEID	! Line (path)

	);
!
!    node summary
!
PRM_LIST (NOD, SUM, PCNO

	,STA, NML$SHOREMSTA	! State
	,NLI, NML$SHOLINEID	! Line
	,ACL, NML$SHOWORD	! Active links
	,DEL, NML$SHOBYTE	! Delay
	,DLI, NML$SHOLINEID	! Line

	);
!
!    node characteristics
!
PRM_LIST (NOD, CHA, PCNO

	,SLI, NML$SHOLINEID	! Service circuit
	,SPA, NML$SHOSERVPASS	! Service password
	,SDV, NML$SHOBYTE	! Service device
	,CPU, NML$SHOBYTE	! CPU type
	,LOA, NML$SHOSTRING	! Load file
	,SLO, NML$SHOSTRING	! Secondary loader
	,TLO, NML$SHOSTRING	! Tertiary loader
	,STY, NML$SHOBYTE	! Software type
	,SID, NML$SHOSTRING	! Software id
	,DUM, NML$SHOSTRING	! Dump file
	,SDU, NML$SHOSTRING	! Secondary dumper
	,DAD, NML$SHOLONG	! Dump address
	,DCT, NML$SHOLONG	! Dump count
	,OHO, NML$SHOHOSTID	! Host
	,CTI, NML$SHOWORD	! Counter timer
	,NLI, NML$SHOLINEID	! Line
	,PUS, NML$SHOSTRING	! Privileged user id
	,PAC, NML$SHOSTRING	! Privileged account
	,PPW, NML$SHOSTRING	! Privileged password
	,NUS, NML$SHOSTRING	! Non-privileged user id
	,NAC, NML$SHOSTRING	! Non-privileged account
	,NPW, NML$SHOSTRING	! Non-privileged password
	,RPA, NML$SHOSTRING	! Receive password
	,TPA, NML$SHOSTRING	! Transmit password
	,ACC, NML$SHOBYTE	! Access
	,PRX, NML$SHOBYTE	! Proxy access

	);
!
!    node counters
!
PRM_LIST (NOD, COU, PCNO

	,NC$, NML$SHOCOUNTERS

	);

BIND
	NML$Q_EXECOU_TABDES = NML$Q_NODCOU_TABDES;
!
!    zero node counters
!
BIND
    NML$Q_NODZER_TABDES = 0;
!
!    node service parameters
!
BIND
    NML$Q_NODSRV_TABDES = NML$Q_CIRSRV_TABDES;
!
! Node by name tables
!
BIND
    NML$Q_NDNSUM_TABDES = NML$Q_NODSUM_TABDES,
    NML$Q_NDNSTA_TABDES = NML$Q_NODSTA_TABDES,
    NML$Q_NDNCHA_TABDES = NML$Q_NODCHA_TABDES,
    NML$Q_NDNCOU_TABDES = NML$Q_NODCOU_TABDES,
    NML$Q_NDNZER_TABDES = NML$Q_NODZER_TABDES,
    NML$Q_NDNSRV_TABDES = NML$Q_NODSRV_TABDES;
!
!    loop node status
!
PRM_LIST (LOO, STA, PCNO

	,STA, NML$SKIPLONG	! *skip*
	,NLI, NML$SHOLINEID	! Line

	);
!
!    loop node summary
!
PRM_LIST (LOO, SUM, PCNO

	,STA, NML$SKIPLONG	! *skip*
	,NLI, NML$SHOLINEID	! Line

	);
!
!    loop node characteristics
!
PRM_LIST (LOO, CHA, PCNO

	,SLI, NML$SKIPSTRING	! *skip*
	,SPA, NML$SKIPSTRING	! *skip*
	,SDV, NML$SKIPLONG	! *skip*
	,CPU, NML$SKIPLONG	! *skip*
	,LOA, NML$SKIPSTRING	! *skip*
	,SLO, NML$SKIPSTRING	! *skip*
	,TLO, NML$SKIPSTRING	! *skip*
	,STY, NML$SKIPLONG	! *skip*
	,SID, NML$SKIPSTRING	! *skip*
	,DUM, NML$SKIPSTRING	! *skip*
	,SDU, NML$SKIPSTRING	! *skip*
	,DAD, NML$SKIPLONG	! *skip*
	,DCT, NML$SKIPLONG	! *skip*
	,OHO, NML$SKIPLONG	! *skip*
	,CTI, NML$SKIPLONG	! *skip*
	,NLI, NML$SHOLINEID	! Line

	);
!
!    object status
!
PRM_LIST (OBJ, STA, PCOB

	,NUM, NML$SHOBYTE	! Number
	,FID, NML$SHOSTRING	! File id
	,PID, NML$SHOLONG	! Process id
	,USR, NML$SHOSTRING	! User id
	,PSW, NML$SHOSTRING	! Password

	);
!
!    object summary
!
PRM_LIST (OBJ, SUM, PCOB

	,NUM, NML$SHOBYTE	! Number
	,FID, NML$SHOSTRING	! File id
	,PID, NML$SHOLONG	! Process id
	,USR, NML$SHOSTRING	! User id
	,PSW, NML$SHOSTRING	! Password

	);
!
!    object characteristics
!
PRM_LIST (OBJ, CHA, PCOB

	,NUM, NML$SHOBYTE	! Number
	,FID, NML$SHOSTRING	! File id
	,PID, NML$SHOLONG	! Process id
	,PRV, NML$SHOOBJPRV	! Privilege list
	,USR, NML$SHOSTRING	! User id
	,ACC, NML$SHOSTRING	! Account
	,PSW, NML$SHOSTRING	! Password
	,PRX, NML$SHOBYTE	! Proxy access

	);
!
!	link status
!
PRM_LIST (LNK, STA, PCLK

	,STA, NML$SHOBYTE	! State
	,PID, NML$SHOLONG	! Process ID
	,NID, NML$SHOADJNODE	! Partner node ID
	,RLN, NML$SHOWORD	! Remote link number
	,PRC, NML$SHOSTRING	! Process name

	);
!
! 	link summary
!
PRM_LIST (LNK, SUM, PCLK

	,PID, NML$SHOLONG	! Process ID
	,NID, NML$SHOADJNODE	! Partner node ID
	,RLN, NML$SHOWORD	! Remote link number
	,RID, NML$SHOSTRING	! Remote identification
	,PRC, NML$SHOSTRING	! Process name

	);
!
!	link characteristics
!
PRM_LIST (LNK, CHA, PCLK

	,STA, NML$SHOBYTE	! State
	,PID, NML$SHOLONG	! Process ID
	,NID, NML$SHOADJNODE	! Partner node ID
	,DLY, NML$SHOBYTE	! Round trip delay time
	,RLN, NML$SHOWORD	! Remote link number
	,RID, NML$SHOSTRING	! Remote identification
	,USR, NML$SHOSTRING	! User name
	,PRC, NML$SHOSTRING	! Process name

	);

UNDECLARE
    %QUOTE PRM_LIST,
    %QUOTE $DEXTN;


%SBTTL 'NFB data for showing volatile entity information'
!
! Each NFB is used to retrieve a specific set of volatile data base 
! information for the specified entity.
!
!***************************************************************************
!
! NOTE:  Any changes to an NFB (order or content) must be reflected in
!	 the SHOW parameter table corresponding to that NFB.
!
!***************************************************************************

!
! Circuit status.
!
$NFBDSC (NML$Q_CIRSTA_NFBDSC, SHOW, , CRI

	,NAM		! Search key = name
	,		! Null start key

	,NAM		! Name
	,STA		! State
	,SUB		! Substate
	,LOO		! Loopback name
	,PNA		! Adjacent node address
	,PNN		! Adjacent node name
	,BLO		! Block size

	);
!
! Circuit summary
!
$NFBDSC (NML$Q_CIRSUM_NFBDSC, SHOW, , CRI

	,NAM		! Search key = name
	,		! Null start key

	,NAM		! Name
	,STA		! State
	,SUB		! Substate
	,LOO		! Loopback name
	,PNA		! Adjacent node address
	,PNN		! Adjacent node name

	);
!
! Circuit characteristics
!
$NFBDSC (NML$Q_CIRCHA_NFBDSC, SHOW, , CRI

	,NAM		! Search key = name
	,		! Null start key

	,NAM		! Name
	,STA		! State
	,SUB		! Substate
	,SER		! Service control
	,LCT		! Counter timer
!?	,CNO		! Connected node
!?	,COB		! Connected object
	,LOO		! Loopback name
	,PNA		! Adjacent node address
	,PNN		! Adjacent node name
	,BLO		! Block size
	,COS		! Cost
	,HET		! Hello timer
	,LIT		! Listen timer
	,BLK		! Blocking
	,MRC		! Maximum recalls
	,RCT		! Recall timer
	,NUM		! Number
!?	,USR		! User
	,POL		! Polling state
	,PLS		! Polling substate
!?	,OWN		! Owner entity id
	,USE		! Usage
	,TYP		! Type
	,DTE		! DTE
	,CHN		! Channel
	,MBL		! Maximum block
	,MWI		! Maximum window
	,TRI		! Tributary
	,BBT		! Babble timer
	,TRT		! Transmit timer
	,MRB		! Maximum receive buffers
	,MTR		! Maximum transmits
	,ACB		! Active base
	,ACI		! Active increment
	,IAB		! Inactive base
	,IAI		! Inactive increment
	,IAT		! Inactive threshold
	,DYB		! Dying base
	,DYI		! Dying increment
	,DYT		! Dying threshold
	,DTH		! Dead threshold
	,VER		! Verification
	,XPT		! Transport protocol

	);
!
! Circuit counters
!
$NFBDSC (NML$Q_CIRCOU_NFBDSC, SHOW, , CRI

	,NAM		! Search key = name
	,		! Null start key

	,NAM		! Name
	,CNT		! Counters

	);
!
! Zero circuit counters
!
$NFBDSC (NML$Q_CIRZER_NFBDSC, ZERCOU, , CRI

	,NAM		! Search key = name
	,		! Null start key

	,CNT		! Counters

	);
!
! Circuit service parameters
!
$NFBDSC (NML$Q_CIRSRV_NFBDSC, SHOW, , NDI

	,SLI		! Search key = Service circuit
	,		! Null start key

	,SLI		! Service circuit
	,SPA		! Service password
	,SDV		! Service device
	,CPU		! CPU type
	,LOA		! Load file
	,SLO		! Secondary loader
	,TLO		! Tertiary loader
	,STY		! Software type
	,SID		! Software id
	,DUM		! Dump file
	,SDU		! Secondary dumper
	,DAD		! Dump address
	,DCT		! Dump count
	,IHO		! Host
	,NNA		! Node name
	,ADD		! Node address

	);
!
! Line status.
!
$NFBDSC (NML$Q_LINSTA_NFBDSC, SHOW, , PLI

	,NAM		! Search key = name
	,		! Null start key

	,NAM		! Name
	,STA		! State
	,SUB		! Substate

	);
!
! Line summary
!
$NFBDSC (NML$Q_LINSUM_NFBDSC, SHOW, , PLI

	,NAM		! Search key = name
	,		! Null start key

	,NAM		! Name
	,STA		! State
	,SUB		! Substate

	);
!
! Line characteristics
!
$NFBDSC (NML$Q_LINCHA_NFBDSC, SHOW, , PLI

	,NAM		! Search key = name
	,		! Null start key

	,NAM		! Name
	,SER		! Service control
	,LCT		! Counter timer
	,BFN		! Buffers
	,CON		! Controller mode
	,DUP		! Duplex
	,PRO		! Line type
	,CLO		! Clock
	,STI		! Service timer
	,RTT		! Retransmit timer
	,HTI		! Holdback timer
	,MBL		! Maximum block
	,MRT		! Maximum retransmits
	,MWI		! Maximum window
	,SLT		! Scheduling timer
	,DDT		! Dead timer
	,DLT		! Delay timer
	,SRT		! Stream timer

	);
!
! Line counters
!
$NFBDSC (NML$Q_LINCOU_NFBDSC, SHOW, , PLI

	,NAM		! Search key = name
	,		! Null start key

	,NAM		! Name
	,CNT		! Counters

	);
!
! Zero line counters
!
$NFBDSC (NML$Q_LINZER_NFBDSC, ZERCOU, , PLI

	,NAM		! Search key = name
	,		! Null start key

	,CNT		! Counters

	);
!
! Node status (remote node by address)
!
$NFBDSC (NML$Q_NODSTA_NFBDSC, SHOW, , NDI

	,ADD		! Search key = address
	,		! Null start key

	,TAD		! Address
	,NNA		! Name
	,REA		! State
	,ACL		! Active links
	,DEL		! Delay
	,DTY		! Type
	,DCO		! Cost
	,DHO		! Hops
	,DLI		! Line

	);
!
! Node summary (remote node by address)
!
$NFBDSC (NML$Q_NODSUM_NFBDSC, SHOW, , NDI

	,ADD		! Search key = address
	,		! Null start key

	,TAD		! Address
	,NNA		! Name
	,REA		! State
	,NLI		! Loopback line name
	,ACL		! Active links
	,DEL		! Delay
	,DLI		! Line

	);
!
! Node characteristics (remote node by address)
!
$NFBDSC (NML$Q_NODCHA_NFBDSC, SHOW, , NDI

	,ADD		! Search key = address
	,		! Null start key

	,TAD		! Address
	,NNA		! Name
	,SLI		! Service circuit
	,SPA		! Service password
	,SDV		! Service device
	,CPU		! CPU type
	,LOA		! Load file
	,SLO		! Secondary loader
	,TLO		! Tertiary loader
	,STY		! Software type
	,SID		! Software id
	,DUM		! Dump file
	,SDU		! Secondary dumper
	,DAD		! Dump address
	,DCT		! Dump count
	,IHO		! Host
	,CTI		! Counter timer
	,NLI		! Loopback Line Name
	,PUS		! Privileged user id
	,PAC		! Privileged account
	,PPW		! Privileged password
	,NUS		! Non-privileged user id
	,NAC		! Non-privileged account
	,NPW		! Non-privileged password
	,RPA		! Receive password
	,TPA		! Transmit password
	,ACC		! Access
	,PRX		! Proxy access

	);
!
! Node counters (remote node by address)
!
$NFBDSC (NML$Q_NODCOU_NFBDSC, SHOW, , NDI

	,ADD		! Search key = address
	,		! Null start key

	,TAD		! Address
	,NNA		! Name

	,CNT		! Counters

	);
!
! Zero node counters (remote node by address)
!
$NFBDSC (NML$Q_NODZER_NFBDSC, ZERCOU, , NDI

	,ADD		! Search key = address
	,		! Null start key

	,CNT		! Counters

	);
!
! Node service parameters (remote node by address)
!
$NFBDSC (NML$Q_NODSRV_NFBDSC, SHOW, , NDI

	,ADD		! Search key = address
	,		! Null start key

	,SLI		! Service circuit
	,SPA		! Service password
	,SDV		! Service device
	,CPU		! CPU type
	,LOA		! Load file
	,SLO		! Secondary loader
	,TLO		! Tertiary loader
	,STY		! Software type
	,SID		! Software id
	,DUM		! Dump file
	,SDU		! Secondary dumper
	,DAD		! Dump address
	,DCT		! Dump count
	,IHO		! Host
	,NNA		! Node name
	,ADD		! Node address

	);
!
! Node status (remote node by name)
!
$NFBDSC (NML$Q_NDNSTA_NFBDSC, SHOW, , NDI

	,NNA		! Search key = name
	,		! Null start key

	,LOO		! Loop node flag
	,TAD		! Address
	,NNA		! Name
	,REA		! State
	,ACL		! Active links
	,DEL		! Delay
	,DTY		! Type
	,DCO		! Cost
	,DHO		! Hops
	,DLI		! Line

	);
!
! Node summary (remote node by name)
!
$NFBDSC (NML$Q_NDNSUM_NFBDSC, SHOW, , NDI

	,NNA		! Search key = name
	,		! Null start key

	,LOO		! Loop node flag
	,TAD		! Address
	,NNA		! Name
	,REA		! State
	,NLI		! Loopback Line Name
	,ACL		! Active links
	,DEL		! Delay
	,DLI		! Line

	);
!
! Node characteristics (remote node by name)
!
$NFBDSC (NML$Q_NDNCHA_NFBDSC, SHOW, , NDI

	,NNA		! Search key = name
	,		! Null start key

	,LOO		! Loop node flag
	,TAD		! Address
	,NNA		! Name
	,SLI		! Service circuit
	,SPA		! Service password
	,SDV		! Service device
	,CPU		! CPU type
	,LOA		! Load file
	,SLO		! Secondary loader
	,TLO		! Tertiary loader
	,STY		! Software type
	,SID		! Software id
	,DUM		! Dump file
	,SDU		! Secondary dumper
	,DAD		! Dump address
	,DCT		! Dump count
	,IHO		! Host
	,CTI		! Counter timer
	,NLI		! Looback Line Name
	,PUS		! Privileged user id
	,PAC		! Privileged account
	,PPW		! Privileged password
	,NUS		! Non-privileged user id
	,NAC		! Non-privileged account
	,NPW		! Non-privileged password
	,RPA		! Receive password
	,TPA		! Transmit password
	,ACC		! Access
	,PRX		! Proxy access

	);
!
! Node counters (remote node by name)
!
$NFBDSC (NML$Q_NDNCOU_NFBDSC, SHOW, , NDI

	,NNA		! Search key = name
	,		! Null start key

	,LOO		! Loop node flag

	,TAD		! Addess
	,NNA		! Name
	,CNT		! Counters

	);
!
! Zero node counters (remote node by name)
!
$NFBDSC (NML$Q_NDNZER_NFBDSC, ZERCOU, , NDI

	,NNA		! Search key = name
	,		! Null start key

	,CNT		! Counters

	);
!
! Node service parameters (remote node by name)
!
$NFBDSC (NML$Q_NDNSRV_NFBDSC, SHOW, , NDI

	,NNA		! Search key = name
	,		! Null start key

	,SLI		! Service circuit
	,SPA		! Service password
	,SDV		! Service device
	,CPU		! CPU type
	,LOA		! Load file
	,SLO		! Secondary loader
	,TLO		! Tertiary loader
	,STY		! Software type
	,SID		! Software id
	,DUM		! Dump file
	,SDU		! Secondary dumper
	,DAD		! Dump address
	,DCT		! Dump count
	,IHO		! Host
	,NNA		! Node name
	,ADD		! Node address

	);

!
! Logging summary
!
$NFBDSC (NML$Q_LOGSUM_NFBDSC, SHOW, , EFI

	,SIN		! Search key = sink node address
	,		! Null start key

	,EVE		! Events

	);

$NFBDSC (NML$Q_SNKSUM_NFBDSC, SHOW, , ESI

	,SNK		! Search key = sink type
	,		! Null start key

	,STA		! State
	,LNA		! Name

	);
!
! Logging status
!
BIND
    NML$Q_LOGSTA_NFBDSC = NML$Q_LOGSUM_NFBDSC,
    NML$Q_SNKSTA_NFBDSC = NML$Q_SNKSUM_NFBDSC;
!
! Logging characteristics
!
BIND
    NML$Q_LOGCHA_NFBDSC = NML$Q_LOGSUM_NFBDSC,
    NML$Q_SNKCHA_NFBDSC = NML$Q_SNKSUM_NFBDSC;
!
! Logging events
!
BIND
    NML$Q_LOGEVE_NFBDSC = NML$Q_LOGSUM_NFBDSC,
    NML$Q_SNKEVE_NFBDSC = NML$Q_LOGSUM_NFBDSC;
!
! Loop node summary
!
BIND
    NML$Q_LOOSUM_NFBDSC = NML$Q_NDNSUM_NFBDSC;
!
! Loop node status
!
BIND
    NML$Q_LOOSTA_NFBDSC = NML$Q_NDNSUM_NFBDSC;
!
! Loop node characteristics
!
BIND
    NML$Q_LOOCHA_NFBDSC = NML$Q_NDNCHA_NFBDSC;
!
! Executor node status
!
$NFBDSC (NML$Q_EXESTA_NFBDSC, SHOW, , LNI

	,NFB$C_WILDCARD	! Any entry (there's only one)
	,		! Null start key

	,STA		! State

	);
!
! Executor node summary
!
$NFBDSC (NML$Q_EXESUM_NFBDSC, SHOW, , LNI

	,NFB$C_WILDCARD	! Any entry (there's only one)
	,		! Null start key

	,STA		! State
	,IDE		! Identification

	);
!
! Executor node characteristics
!
$NFBDSC (NML$Q_EXECHA_NFBDSC, SHOW, , LNI

	,NFB$C_WILDCARD	! Any entry (there's only one)
	,		! Null start key

	,IDE		! Identification
	,ITI		! Incoming timer
	,OTI		! Outgoing timer
	,NVE		! NSP version
	,MLK		! Maximum links
	,DFA		! Delay factor
	,DWE		! Delay weight
	,IAT		! Inactivity timer
	,RFA		! Retransmit factor
	,RVE		! Routing version
	,ETY		! Type
	,RTI		! Routing timer
	,MAD		! Maximum address
	,MLN		! Maximum lines
	,MCO		! Maximum cost
	,MHO		! Maximum hops
	,MVI		! Maximum visits
	,MBU		! Maximum buffers
	,BUS		! Buffer size
	,DAC		! Default access
	,PIQ		! Pipeline quota
	,DPX		! Default proxy access

	);
!
! Executor node counters - use node by address counters.
!
BIND
	NML$Q_EXECOU_NFBDSC = NML$Q_NODCOU_NFBDSC;
!
! Zero executor node counters
!
$NFBDSC (NML$Q_EXEZER_NFBDSC, ZERCOU, , LNI

	,NFB$C_WILDCARD	! Any entry (there's only one)
	,		! Null start key

	,CNT		! Counters

	);
!
! Object status
!
$NFBDSC (NML$Q_OBJSTA_NFBDSC, SHOW, , OBI

	,NAM		! Search key = name
	,		! Null start key

	,NAM		! Name
	,NUM		! Number
	,FID		! File
	,PID		! Process id
	,USR		! User id
	,PSW		! Password

	);
!
! Object summary
!
$NFBDSC (NML$Q_OBJSUM_NFBDSC, SHOW, , OBI

	,NAM		! Search key = name
	,		! Null start key

	,NAM		! Name
	,NUM		! Number
	,FID		! File
	,PID		! Process id
	,USR		! User id
	,PSW		! Password

	);
!
! Object characteristics
!
$NFBDSC (NML$Q_OBJCHA_NFBDSC, SHOW, , OBI

	,NAM		! Search key = name
	,		! Null start key

	,NAM		! Name
	,NUM		! Name
	,FID		! File
	,PID		! Process id
	,LPR		! Low order privileges
	,USR		! User id
	,ACC		! Account
	,PSW		! Password
	,PRX		! Proxy access

	);
!
! Link summary
!
$NFBDSC (NML$Q_LNKSUM_NFBDSC, SHOW, , LLI

	,LLN		! Search key = logical link number
	,		! Null start key

	,LLN		! Link number (entity ID)
	,PID		! Process ID
	,PNA		! Partner node's address
	,PNN		! Partner node's name
	,RLN		! Remote link number.
	,RID		! Remote identification
	,PRC		! Process name

	);
!
! Link status
!
$NFBDSC (NML$Q_LNKSTA_NFBDSC, SHOW, , LLI

	,LLN		! Search key = logical link number
	,		! Null start key

	,LLN		! Link number (entity ID)
	,STA		! Link state
	,PID		! Process ID
	,PNA		! Partner node's address
	,PNN		! Partner node's name
	,RLN		! Remote link number.
	,PRC		! Process name

	);
!
! Link characteristics
!
$NFBDSC (NML$Q_LNKCHA_NFBDSC, SHOW, , LLI

	,LLN		! Search key = logical link number
	,		! Null start key

	,LLN		! Link number (entity ID)
	,STA		! Link state
	,PID		! Process ID
	,PNA		! Partner node's address
	,PNN		! Partner node's name
	,DLY		! Round trip delay time
	,RLN		! Remote link number
	,RID		! Remote identification
	,USR		! User name
	,PRC		! Process name

	);


%SBTTL 'Permanent entity information table'

MACRO
    $INFTAB (NAM) =

	GLOBAL BIND
	    %NAME (NAM) =
		UPLIT ($DEXTN (%REMAINING)) : VECTOR [(%LENGTH - 1) / 2] %,

    $DEXTN [ENT, INF] =
	LONG (UPLIT ($ENTRY (ENT, %REMOVE (INF))))
    %,

    $ENTRY (ENT) [INF] =
	%IF %IDENTICAL (INF, $)
	%THEN
	    LONG (0)
	%ELSE
	    LONG (%NAME ('NML$Q_P_', ENT, INF, '_TABDES'))
	%FI
    %;
!
! Entity information table.  This structure is a vector of table addresses.
! The internal entity code is the index to the table of parameter
! sets for that entity.  The index values are the symbols:
!
!	NML$C_LINE
!	NML$C_LOGGING
!	NML$C_SINK
!	NML$C_NODE
!	NML$C_NODEBYNAME
!	NML$C_LOOPNODE
!	NML$C_EXECUTOR
!	NML$C_OBJECT
!	NML$C_CIRCUIT
!
! This index is used to get the address of the vector of information sets
! for the entity.  This structure is indexed using the internal 
! information type code which is one of the following values:
!
!	NML$C_SUMMARY
!	NML$C_STATUS
!	NML$C_CHARACTERISTICS
!	NML$C_COUNTERS
!	NML$C_EVENTS
!
!
!***************************************************************************
!
! NOTE:	The order of the entries in this table corresponds to the numeric
!	order of the entity codes.  DO NOT change the order of the entries
!	or add new ones without verifying that the order is correct.
!	Also, the information types within each entry correspond to the
!	numeric order of the information codes.
!
!***************************************************************************
!
    $INFTAB (NML$AL_PERMINFTAB,

	LIN, (SUM, STA, CHA, $, $  ),		! Line
	LOG, ($,   $,   $,   $, $  ),		! Logging
	SNK, ($,   $,   $,   $, $  ),		! Logging sink
	NOD, (SUM, STA, CHA, $, $  ),		! Node
	NDN, (SUM, STA, CHA, $, $  ),		! Node by name
	LOO, (SUM, STA, CHA, $, $  ),		! Loop node
	EXE, (SUM, STA, CHA, $, $  ),		! Executor node
	OBJ, (SUM, STA, CHA, $, $  ),		! Object
	CIR, (SUM, STA, CHA, $, $  ),		! Circuit

	);

UNDECLARE
    %QUOTE $INFTAB,
    %QUOTE $DEXTN,
    %QUOTE $ENTRY;

%SBTTL 'Volatile entity information table'

MACRO
    $INFTAB (NAM) =

	GLOBAL BIND
	    %NAME (NAM) =
		UPLIT ($DEXTN (%REMAINING)) : VECTOR [(%LENGTH - 1) / 2] %,

    $DEXTN [ENT, INF] =
	LONG (UPLIT ($ENTRY (ENT, %REMOVE (INF))))
    %,

    $ENTRY (ENT) [INF] =
	%IF %IDENTICAL (INF, $)
	%THEN
	    LONG (0),
	    LONG (0)
	%ELSE
	    LONG (%NAME ('NML$Q_', ENT, INF, '_NFBDSC')),
	    LONG (%NAME ('NML$Q_', ENT, INF, '_TABDES'))
	%FI
    %;
!
! Entity information table.  This structure is a vector of table addresses.
! The internal entity code is the index to the table of parameter
! sets for that entity.  The index values are the symbols:
!
!	NML$C_LINE
!	NML$C_LOGGING
!	NML$C_SINK
!	NML$C_NODE
!	NML$C_NODEBYNAME
!	NML$C_LOOPNODE
!	NML$C_EXECUTOR
!	NML$C_OBJECT
!	NML$C_CIRCUIT
!	NML$C_NETWORK
!	NML$C_GROUP
!	NML$C_DTE
!	NML$C_LINKS
!
! This index is used to get the address of the blockvector of information sets
! for the entity.  The address points to a table of NFB descriptors and
! table descriptors.  This structure is indexed using the internal 
! information type code which is one of the following values:
!
!	NML$C_SUMMARY
!	NML$C_STATUS
!	NML$C_CHARACTERISTICS
!	NML$C_COUNTERS
!	NML$C_EVENTS
!	NML$C_ZERO
!	NML$C_SERVICE
!
! The first longword in the entry is the address of the descriptor of the
! NFB used to retrieve the specified set of volatile information.  The
! second longword is the address of the descriptor of the table used for
! processing the data returned.
!
!
!
!***************************************************************************
!
! NOTE:	The order of the entries in this table corresponds to the numeric
!	order of the entity codes.  DO NOT change the order of the entries
!	or add new ones without verifying that the order is correct.
!	Also, the information types within each entry correspond to the
!	numeric order of the information codes.
!
!***************************************************************************
!
    $INFTAB (NML$AL_ENTINFTAB,

	LIN, (SUM, STA, CHA, COU, $,   ZER, $  ),	! Line
	LOG, (SUM, STA, CHA, $,   EVE, $,   $  ),	! Logging
	SNK, (SUM, STA, CHA, $,   EVE, $,   $  ),	! Logging sink
	NOD, (SUM, STA, CHA, COU, $,   ZER, SRV),	! Node
	NDN, (SUM, STA, CHA, COU, $,   ZER, SRV),	! Node by name
	LOO, (SUM, STA, CHA, $,   $,   $,   $  ),	! Loop node
	EXE, (SUM, STA, CHA, COU, $,   ZER, $  ),	! Executor node
	OBJ, (SUM, STA, CHA, $,   $,   $,   $  ),	! Object
	CIR, (SUM, STA, CHA, COU, $,   ZER, SRV),	! Circuit
	NET, ($,   $,   $,   $,   $,   $,   $  ),	! Networks
	GRP, ($,   $,   $,   $,   $,   $,   $  ),	! Group
 	DTE, ($,   $,   $,   $,   $,   $,   $  ),	! DTE
	LNK, (SUM, STA, CHA, $,   $,   $,   $  )	! Links

	);

UNDECLARE
    %QUOTE $INFTAB,
    %QUOTE $DEXTN,
    %QUOTE $ENTRY;

%SBTTL 'SET ALL parameter tables'
!
! Parameter list definition macro.
!
MACRO
    PRM_ALL (TAB, TYP) []  =

	SWITCHES UNAMES;
	PSECT
	    PLIT = NML$ALLPARAMS;

	BIND
	    %NAME ('NML$Q_ALL', TAB, 'DES') =
		UPLIT (	%LENGTH - 2,
			UPLIT BYTE ($DEXTN (TYP, %REMAINING)));

	PSECT PLIT = $PLIT$;
	SWITCHES NOUNAMES;
    %,

    $DEXTN (TAB) [PRM] =
	WORD (%NAME ('NMA$C_', TAB, '_', PRM)), 
	WORD (%NAME ('CPT$GK_', TAB, '_', PRM))
    %;
!
! Initialize psect.
!
PSECT
    OWN = NML$ALLPARAMS (NOWRITE, ALIGN(0));
OWN
    $Z : VECTOR [0];
PSECT
    OWN = $OWN$;
UNDECLARE
    $Z;
!
! Circuit parameters.
!
    PRM_ALL (CIR, PCCI

	,STA	! State
	,SER	! Service state
	,LCT	! Counter timer
	,COS	! Cost
	,HET	! Hello timer
	,LIT	! Listen timer
	,BLK	! Blocking
	,MRC	! Maximum recalls
	,RCT	! Recall timer
	,NUM	! Number
	,POL	! Polling state
	,TYP	! Type
	,DTE	! DTE
	,CHN	! Channel
	,MBL	! Maximum block
	,MWI	! Maximum window
	,TRI	! Tributary
	,BBT	! Babble timer
	,TRT	! Transmit timer
	,MRB	! Maximum receive buffers
	,MTR	! Maximum transmits
	,ACB	! Active base
	,ACI	! Active increment
	,IAB	! Inactive base
	,IAI	! Inactive increment
	,IAT	! Inactive threshold
	,DYB	! Dying base
	,DYI	! Dying increment
	,DYT	! Dying threshold
	,DTH	! Dead threshold
	,VER	! Verification
	,XPT	! Transport protocol

	);
!
! Line parameters.
!
    PRM_ALL (LIN, PCLI

	,STA	! State
	,SER	! Service
	,LCT	! Counter timer
	,BFN	! Number of buffers
	,CON	! Controller mode
	,DUP	! Duplex
	,PRO	! Type
	,CLO	! Clock
	,STI	! Service timer
	,RTT	! Retransmit timer
	,HTI 	! Holdback timer
	,MBL 	! Maximum block
	,MRT 	! Maximum retransmits
	,MWI 	! Maximum window
	,SLT 	! Scheduling timer
	,DDT 	! Dead timer
	,DLT 	! Delay timer
	,SRT 	! Stream timer

	);
!
! Logging parameters.
!
PRM_ALL (LOG, PCLO

	,EVE	! Events

	);

PRM_ALL (SNK, PCLO

	,STA	! State
	,LNA	! Name

	);
!
! Executor node parameters.
!
PRM_ALL (EXE, PCNO

	,STA	! State
	,IDE	! Identification
	,ADD	! Address
	,ITI	! Incoming timer
	,OTI	! Outgoing timer
	,MLK	! Maximum links
	,DFA	! Delay factor
	,DWE	! Delay weight
	,IAT	! Inactivity timer
	,RFA	! Retransmit factor
	,RTI	! Routing timer
	,MAD	! Maximum address
	,MLN	! Maximum lines
	,MCO	! Maximum cost
	,MHO	! Maximum hops
	,MVI	! Maximum visits
	,MBU	! Maximum buffers
	,BUS	! Buffer size
	,DAC	! Default access
	,PIQ	! Pipeline quota
	,DPX	! Default proxy access

	);
!
! Node parameters.
!
PRM_ALL (NOD, PCNO

	,SLI	! Service circuit
	,SPA	! Service password
	,SDV	! Service device
	,CPU	! CPU type
	,LOA	! Load file
	,SLO	! Secondary loader
	,TLO	! Tertiary loader
	,STY	! Software type
	,SID	! Software identification
	,DUM	! Dump file
	,SDU	! Secondary dumper
	,DAD	! Dump address
	,DCT	! Dump count
	,IHO	! Host
	,LPC	! Loop count
	,LPL	! Loop length
	,LPD	! Loop data
	,CTI	! Counter timer
	,NNA	! Name
	,NLI	! Line
	,AD$	! Address
	,A$$	! Loop node address
	,PUS	! Privileged user id
	,PAC	! Privileged account
	,PPW	! Privileged password
	,NUS	! Nonprivileged user id
	,NAC	! Nonprivileged account
	,NPW	! Nonprivileged password
	,RPA	! Receive password
	,TPA	! Transmit password
	,ACC	! Access
	,PRX	! Proxy access

	);

!
! X-25 Protocol Network parameters for SET ALL
!
PRM_ALL (NET, PCXP
	,DBL	! Default block
	,DWI	! Default window
	,MBL	! Maximum block
	,MWI	! Maximum window
	,MCL	! Maximum clears
	,MRS	! Maximum resets
	,MST	! Maximum restarts
	,CAT	! Call timer
	,CLT	! Clear timer
	,RST	! Reset timer
	,STT	! Restart timer
	);

!
! X-25 Protocol Group parameters for SET ALL
!
PRM_ALL (GRP, PCXP
	,GNM	! Group number
	,GTY	! Group type
	);

!
! X-25 Protocol DTE parameters for SET ALL
!
PRM_ALL (DTE, PCXP
	,STA	! State
	,CTM	! Counter timer
	,LIN	! Line
	,CHN	! Channels
	);
!
! Object parameters.
!
PRM_ALL (OBJ, PCOB

	,FID	! File
	,NUM	! Number
	,PRV	! Privileges
	,USR	! User id
	,ACC	! Account
	,PSW	! Password
	,PRX	! Proxy access

	);

UNDECLARE
    %QUOTE PRM_ALL,
    %QUOTE $DEXTN;


%SBTTL 'Entity information table'
!
! This table provides a variety of information for operations that can
! be performed on entities in the volatile and permanent data bases.
!
MACRO
    $ENTDATA [] =
	UPLIT BYTE ($EXP (%REMAINING))
	: BBLOCKVECTOR [%LENGTH, EIT$K_ENTRYLEN];
    %,

    $EXP [ENT] =
	$ENTRY (%REMOVE (ENT))
    %,

    $ENTRY [FID, DET, KEY, NFBDB, NFBKEY, TAB] =
	BYTE (%NAME ('NMA$C_OPN_', FID)),
	WORD (%NAME ('NMA$C_', DET)),
	WORD (KEY),
	BYTE (%NAME ('NFB$C_DB_', NFBDB)),
	LONG ($FIELD_ID (NFBDB, NFBKEY)),
	LONG (%NAME ('NML$Q_ALL', TAB, 'DES'))
    %;
!
!***************************************************************************
!
! NOTE:	The order of the entries in this table corresponds to the numeric
!	order of the entity codes.  DO NOT change the order of the entries
!	or add new ones without verifying that the order is correct.
!
!***************************************************************************

GLOBAL BIND
    NML$AB_ENTITYDATA = $ENTDATA (

!---------------------------------------------------------------------------
!fid   detail    record key    data base  search key  ALL table     index
!---------------------------------------------------------------------------
(LINE, ENT_LIN, NML$C_KEY_LINE,   PLI,    NAM,	          LIN), ! NML$C_LINE
(LOG,  ENT_LOG, NMA$C_PCLO_SIN,   EFI,    SIN,  	  LOG), ! NML$C_LOGGING
(LOG,  ENT_LOG, NML$C_KEY_SINK,   ESI,    SNK,   	  SNK), ! NML$C_SINK
(NODE, ENT_NOD, NMA$C_PCNO_ADD,   NDI,    ADD,   	  NOD), ! NML$C_NODE
(NODE, ENT_NOD, NMA$C_PCNO_NNA,   NDI,    NNA,  	  NOD), ! NML$C_NODEBYNAME
(NODE, ENT_NOD, NMA$C_PCNO_NLI,   NDI,    NNA,  	  NOD), ! NML$C_LOOPNODE
(NODE, ENT_NOD, NML$C_KEY_EXE,    LNI,    NFB$C_WILDCARD, EXE), ! NML$C_EXECUTOR
(OBJ, SENT_OBJ, NMA$C_PCOB_NAM,   OBI,    NAM,   	  OBJ), ! NML$C_OBJECT
(CIR,  ENT_CIR, NML$C_KEY_CIR,    CRI,    NAM,	          CIR), ! NML$C_CIRCUIT
(MOD,  PCXP_NET,NML$C_KEY_NET,    XNI,    NET,            NET), ! NML$C_NETWORK
(MOD,  PCXP_GRP,NML$C_KEY_GROUP,  XGI,    GRP,            GRP), ! NML$C_GROUP
(MOD,  PCXP_DTE,NML$C_KEY_DTE,    XDI,    DTE,            DTE)  ! NML$C_DTE

    );

UNDECLARE
    %QUOTE $ENTDATA,
    %QUOTE $EXP,
    %QUOTE $ENTRY;


%SBTTL 'QIO parameter mapping tables'
!
! Tables to map returned QIO parameter ID's to NICE parameter ID's for
! QIO error reporting.
!

!
! Parameter list definition macro.
!
MACRO
    PRM_MAP (TAB, TYP) []  =

	SWITCHES UNAMES;
	PSECT
	    PLIT = NML$QIOPRMMAP;

	GLOBAL BIND
	    %NAME ('NML$GQ_', TAB, 'MAPDES') =
		UPLIT (	(%LENGTH - 2) / 2,
			UPLIT BYTE ($DEXTN (TAB, TYP, %REMAINING)));

	PSECT PLIT = $PLIT$;
	SWITCHES NOUNAMES;
    %,

    $DEXTN (TAB, TYP) [QP, PRM] =
		LONG ($FIELD_ID( TAB, QP)),
		WORD (%NAME ('PST$K_', TYP, '_', PRM))
    %;
!
! Initialize psect.
!
PSECT
    OWN = NML$QIOPRMMAP (NOWRITE, ALIGN(0));
OWN
    $Z : VECTOR [0];
PSECT
    OWN = $OWN$;
UNDECLARE
    $Z;
!
! Circuit parameters.
!
    PRM_MAP (CRI, PCCI

	,STA,	STA	! State
	,SUB,	SUB	! Substate
	,SER,	SER	! Service state
	,LCT,	LCT	! Counter timer
!?	,CNO,	CNO	! Connected node
!?	,COB,	COB	! Connected object
	,LOO,	LOO	! Loopback name
!?	,PNN,	ADJ	! Adjacent node
	,BLO,	BLO	! Block size
	,COS,	COS	! Cost
	,HET,	HET	! Hello timer
	,LIT,	LIT	! Listen timer
	,BLK,	BLK	! Blocking
	,MRC,	MRC	! Maximum recalls
	,RCT,	RCT	! Recall timer
	,NUM,	NUM	! Number
!?	,USR,	USR	! User
	,POL,	POL	! Polling state
	,PLS,	PLS	! Polling substate
!?	,OWN,	OWN	! Owner entity id
!?	,USE,	USE	! Usage
	,TYP,	TYP	! Type
	,DTE,	DTE	! DTE
	,CHN,	CHN	! Channel
	,MBL,	MBL	! Maximum block
	,MWI,	MWI	! Maximum window
	,TRI,	TRI	! Tributary
	,BBT,	BBT	! Babble timer
	,TRT,	TRT	! Transmit timer
	,MRB,	MRB	! Maximum receive buffers
	,MTR,	MTR	! Maximum transmits
	,ACB,	ACB	! Active base
	,ACI,	ACI	! Active increment
	,IAB,	IAB	! Inactive base
	,IAI,	IAI	! Inactive increment
	,IAT,	IAT	! Inactive threshold
	,DYB,	DYB	! Dying base
	,DYI,	DYI	! Dying increment
	,DYT,	DYT	! Dying threshold
	,DTH,	DTH	! Dead threshold
	,VER,   VER	! Verification
	,XPT,   XPT	! Transport protocol

	);

!
! Line parameters.
!
    PRM_MAP (PLI, PCLI

	,STA,	STA	! State
	,SUB,	SUB	! Substate
	,SER,	SER	! Service
	,LCT,	LCT	! Counter timer
	,BFN,	BFN	! Number of buffers
	,CON,	CON	! Controller
	,DUP,	DUP	! Duplex
	,PRO,	PRO	! Type
	,CLO,	CLO	! Clock
	,STI,	STI	! Service timer
	,RTT,   RTT	! Retransmit timer
	,HTI,	HTI	! Holdback timer
	,MBL,	MBL	! Maximum block
	,MRT,	MRT	! Maximum retransmits
	,MWI,	MWI	! Maximum window
	,SLT,	SLT	! Scheduling timer
	,DDT,	DDT	! Dead timer
	,DLT,	DLT	! Delay timer
	,SRT,	SRT	! Stream timer

	);
!
! Logging parameters.
!
PRM_MAP (EFI, PCLO

	,SIN,	SIN	! Sink node
	,EVE,	EVE	! Events

	);

PRM_MAP (ESI, PCLO

	,STA,	STA	! State
	,LNA,	LNA	! Name

	);
!
! Executor parameters.
!
PRM_MAP (LNI, PCNO

	,STA,	STA	! State
	,IDE,	IDE	! Identification
	,ADD,	ADD	! Address
	,ITI,	ITI	! Incoming timer
	,OTI,	OTI	! Outgoing timer
	,NVE,	NVE	! NSP version
	,MLK,	MLK	! Maximum links
	,DFA,	DFA	! Delay factor
	,DWE,	DWE	! Delay weight
	,IAT,	IAT	! Inactivity timer
	,RFA,	RFA	! Retransmit factor
	,RVE,	RVE	! Routing version
	,ETY,	ETY	! Type
	,RTI,	RTI	! Routing timer
	,MAD,	MAD	! Maximum address
	,MLN,	MLN	! Maximum lines
	,MCO,	MCO	! Maximum cost
	,MHO,	MHO	! Maximum hops
	,MVI,	MVI	! Maximum visits
	,MBU,	MBU	! Maximum buffers
	,BUS,	BUS	! Buffer size
	,DAC,   DAC	! Default access
	,PIQ,	PIQ	! Pipeline quota
	,DPX,	DPX	! Default proxy access

	);
!
! Node parameters.
!
PRM_MAP (NDI, PCNO

	,REA,	STA	! State
	,SLI,	SLI	! Service circuit
	,SPA,	SPA	! Service password
	,SDV,	SDV	! Service device
	,CPU,	CPU	! CPU type
	,LOA,	LOA	! Load file
	,SLO,	SLO	! Secondary loader
	,TLO,	TLO	! Tertiary loader
	,STY,	STY	! Software type
	,SID,	SID	! Software id
	,DUM,	DUM	! Dump file
	,SDU,	SDU	! Secondary dumper
	,DAD,	DAD	! Dump address
	,DCT,	DCT	! Dump count
	,IHO,	IHO	! Host
	,CTI,	CTI	! Counter timer
	,NNA,	NNA	! Name
	,LOO,	NLI	! Line
	,ADD,	ADD	! Address
	,ACL,	ACL	! Active links
	,DEL,	DEL	! Delay
	,DTY,	DTY	! Destination node type
	,DCO,	DCO	! Cost
	,DHO,	DHO	! Hops
	,NLI,	DLI	! Line
	,PUS,	PUS	! Privileged user id
	,PAC,	PAC	! Privileged account
	,PPW,	PPW	! Privileged password
	,NUS,	NUS	! Non-privileged user id
	,NAC,	NAC	! Non-privileged account
	,NPW,	NPW	! Non-privileged password
	,RPA,	RPA	! Receive password
	,TPA,	TPA	! Transmit password
	,ACC,	ACC	! Access
	,PRX,   PRX	! Proxy access

	);
!
! Object parameters.
!
PRM_MAP (OBI, PCOB

	,FID,	FID	! File
	,PID,	PID	! Process id
	,NUM,	NUM	! Number
	,LPR,	PRV	! Privileges
	,USR,	USR	! User id
	,ACC,	ACC	! Account
	,PSW,	PSW	! Password
	,PRX,	PRX	! Proxy access

	);

PRM_MAP (LLI, PCLK

	,STA,	STA	! State
	,PID,	PID	! Process ID
	,PNN,	NID	! Partner node number
	,PNA,	NID	! Parter node name
	,DLY,	DLY	! Round trip delay time
	,RLN,	RLN	! Remote link number
	,USR,	USR	! Username of link owner
	,PRC,	PRC	! Process name of link owner

	);

UNDECLARE
    %QUOTE PRM_MAP,
    %QUOTE $DEXTN;


END						! End of module

ELUDOM

