%TITLE 'NML initial message parsing module'
MODULE NML$PARINI (
		LANGUAGE (BLISS32),
		ADDRESSING_MODE (NONEXTERNAL=LONG_RELATIVE),
		ADDRESSING_MODE (EXTERNAL=LONG_RELATIVE),
		IDENT = 'V03-000'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  DECnet-VAX V2.0 Network Management Listener
!
! ABSTRACT:
!
!	This module contains action routines called by NPARSE to process
!	NICE command messages from NCP.
!
! ENVIRONMENT:  VAX/VMS Operating System
!
! AUTHOR:  Distributed Systems Software Engineering
!
! CREATION DATE:  8-OCT-1979
!
! MODIFIED BY:
!
!	V03-003	MKP0002		Kathy Perko		23-Nov-1981
!		Delete NML validation of line and circuit IDs.  NETACP
!		will perform all validation.
!
!	V03-002	MKP0001		Kathy Perko		13-Nov-1981
!		Change name of routine that used to parse line ids
!		and now parses both line and circuit ids.  I.E. change
!		NML$PRSLINE to NML$PRSDEVICE.
!
!	V03-001	LMK0001		Len Kawell		27-Jul-1981
!		Remove QIO buffer initialization.
!--

%SBTTL 'Declarations';

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    NML$PARSE_INIT,
    NML$PRSFNC,
    NML$PRSOPT,
    NML$PRSOP2,
    NML$PRSINF,
    NML$PRSENT,
    NML$PRSIDLEQ,
    NML$PRSID,
    NML$PRSIDN,
    NML$PRSSNKNNA,
    NML$PRSSNKNAD,
    NML$PRSEXESNK,
    NML$PRSDEVICE,
    NML$PRSLOGSIN,
    NML$PRSSTR,
    NML$PRSERR1,
    NML$PRSIDERR;

!
! INCLUDE FILES:
!

LIBRARY 'LIB$:NMLLIB.L32';
LIBRARY 'SHRLIB$:NMALIBRY.L32';
LIBRARY 'SYS$LIBRARY:STARLET.L32';

!
! MACROS:
!

!
! Macro to return a byte complement of a value
! (Used to prevent byte initialization overflow)
!
MACRO
    NOT_BYTE (N) =
	((NOT (N)) AND %X'FF')
    %;

!
! EQUATED SYMBOLS:
!

LITERAL
    FUNCNT = 7;			! Total number of functions (Phase III only)
!
! Invalid option bit mask definitions
!
LITERAL
    REA_INVOB_MSK = NOT_BYTE (NMA$M_OPT_ENT OR
			      NMA$M_OPT_INF OR
			      NMA$M_OPT_PER),

    CHA_INVOB_MSK = NOT_BYTE (NMA$M_OPT_ENT OR
			      NMA$M_OPT_INF OR
			      NMA$M_OPT_PER OR
			      NMA$M_OPT_CLE),

    ZER_INVOB_MSK = NOT_BYTE (NMA$M_OPT_ENT OR NMA$M_OPT_REA),

    LOA_INVOB_MSK = NOT_BYTE (NMA$M_OPT_ENT),

    DUM_INVOB_MSK = NOT_BYTE (NMA$M_OPT_ENT),

    TRI_INVOB_MSK = NOT_BYTE (NMA$M_OPT_ENT),

    TES_INVOB_MSK = NOT_BYTE (NMA$M_OPT_ENT OR NMA$M_OPT_ACC);

!
! OWN STORAGE:
!

!
! Table of invalid option bits for each function
!
BIND
    INVOPB_TAB = UPLIT BYTE(
			    LOA_INVOB_MSK,
			    DUM_INVOB_MSK,
			    TRI_INVOB_MSK,
			    TES_INVOB_MSK,
			    CHA_INVOB_MSK,
			    REA_INVOB_MSK,
			    ZER_INVOB_MSK
			   ) : VECTOR [FUNCNT, BYTE];

!
! EXTERNAL REFERENCES:
!

$NML_EXTDEF;

EXTERNAL
    NML$AB_NPA_BLK : $NPA_BLKDEF,
    NML$NPA_INI2,
    NML$NPA_INIT;

EXTERNAL ROUTINE
    NMA$CLOSEFILE,
    NMA$NPARSE,
    NMA$OPENFILE,
    NML$CHKEXEADR,
    NML$CHKEXENAM,
    NML$ERROR_1,
    NML$ERROR_2,
    NML$GETEXEADR,
    NML$GETEXENAM,
    NML$GETNODADR,
    NML$OPENFILE;

%SBTTL 'NML$PARSE_INIT  Initial message parsing routine'
GLOBAL ROUTINE NML$PARSE_INIT =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine invokes the NPARSE facility to check the funcition,
!	option, and entity codes in a received NICE protocol function.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NML$GB_FUNC contains the function code.
!	NML$GB_OPTIONS contains the option codes.
!	NML$GB_INFO contains the information code if the function is read.
!	NML$GL_ENTCODE contains the entity code.
!	NML$AB_NPA_BLK contains parsing information about the remainder of the
!		message.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	If the parse fails then the NML status code is returned as specified in
!	the parse state table otherwise NML$_STS_SUC is returned.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	STATUS;				! Temporary status
!
! Initialize message parsing data
!
    NML$GL_PRMCODE   = 0;		! Parameter code
    NML$GL_PRS_FLGS  = 0;		! Parsing flags
    NML$GW_PRMDESCNT = 0;		! Parameter descriptor count
!
! Call the NPARSE facility to parse function, option, and entity
!
    NML$AB_NPA_BLK [NPA$L_MSGPTR] = NML$AB_RCVBUFFER;  ! Add buffer address and
    NML$AB_NPA_BLK [NPA$L_MSGCNT] = .NML$GL_RCVDATLEN; !  length NPARSE arguments

    STATUS = (
	IF .NML$GB_CMD_VER EQLU NML$C_PHASE2
	THEN
	    NMA$NPARSE (NML$AB_NPA_BLK,
			NML$NPA_INI2)	! Use Phase II state table
	ELSE
	    NMA$NPARSE (NML$AB_NPA_BLK,
			NML$NPA_INIT));	! Use Phase III state table

    RETURN .STATUS

    END;				! End of NML$PARSE_INIT


%SBTTL 'NML$PRSFNC  Store function code (action routine)'
GLOBAL ROUTINE NML$PRSFNC =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Parse and store the function code from the NICE command message.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NML$GB_FUNC contains the function code.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    $NPA_ARGDEF;			! Define NPARSE block reference

    NML$GB_FUNC = .NPARSE_BLOCK [NPA$B_BYTE]; ! Set function

    RETURN NML$_STS_SUC

    END;				! End of NML$PRSFNC

%SBTTL 'NML$PRSOPT  Check and store option byte (action routine)'
GLOBAL ROUTINE NML$PRSOPT =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Parse and store the options byte from the NICE command message.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NML$GB_OPTIONS contains the option byte.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    $NPA_ARGDEF;			! Define NPARSE block reference

    LOCAL
	INVBITS   : BYTE,		! Invalid option bit temporary
	TAB_INDEX : SIGNED BYTE;	! Invalid bit mask table index
!
! Check Phase III NICE message options
!
	NML$GB_OPTIONS = .NPARSE_BLOCK [NPA$B_BYTE]; ! Save entire option byte
	TAB_INDEX = .NML$GB_FUNC;	! Get function code for table index
	TAB_INDEX = .TAB_INDEX - 15;	! Normalize the table index

	IF (.TAB_INDEX GEQ 0)
	AND (.TAB_INDEX LSS FUNCNT)	! Range check
	THEN
	    BEGIN

	    INVBITS = .INVOPB_TAB [.TAB_INDEX] AND .NML$GB_OPTIONS; ! Mask

	    IF .INVBITS EQLU 0
	    THEN
		RETURN NML$_STS_SUC	! No invalid bits
	    ELSE
		RETURN NML$_STS_FUN	! Unrecognized option

	    END
	ELSE
	    RETURN NML$_STS_MPR		! State table error

    END;				! End of NML$PRSOPT

%SBTTL 'NML$PRSOP2  Store Phase II option code (action routine)'
GLOBAL ROUTINE NML$PRSOP2 =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Parse and store the options byte from the Phase II NICE command 
!	message.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NML$GB_OPTIONS contains the option byte.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    $NPA_ARGDEF;			! Define NPARSE block reference
!
! Save Phase II NICE message option code
!
    NML$GB_OPTIONS = .NPARSE_BLOCK [NPA$B_BYTE];

    RETURN NML$_STS_SUC

    END;				! End of NML$PRSOP2

%SBTTL 'NML$PRSINF  Store information type code (action routine)'
GLOBAL ROUTINE NML$PRSINF =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine is a NPARSE action routine that sets the
!	information code if the function is read information.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NPARSE_BLOCK [NPA$B_BYTE] contains the information code.
!
! IMPLICIT OUTPUTS:
!
!	NML$GB_INFO contains the information type code.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Success (NML$_STS_SUC) is always returned.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    $NPA_ARGDEF;			! Define NPARSE block reference
!
! Save the information code from the NPARSE argument block
!
    NML$GB_INFO = .NPARSE_BLOCK [NPA$B_BYTE];

    RETURN NML$_STS_SUC

    END;				! End of NML$PRSINF

%SBTTL 'NML$PRSENT  Store entity type code (action routine)'
GLOBAL ROUTINE NML$PRSENT =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine is a NPARSE action routine that sets the
!	enitity code.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NPARSE_BLOCK [NPA$B_BYTE] contains the entity code.
!
! IMPLICIT OUTPUTS:
!
!	NML$GB_ENTCODE contains the entity code.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Success (NML$_STS_SUC) is always returned.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    $NPA_ARGDEF;			! Define NPARSE block reference
!
! Save the entity code from the NPARSE argument block
!
    NML$GB_ENTCODE = .NPARSE_BLOCK [NPA$B_BYTE];

    RETURN NML$_STS_SUC

    END;				! End of NML$PRSENT


%SBTTL 'NML$PRSIDLEQ  Store entity format code if LEQ 0 (action routine)'
GLOBAL ROUTINE NML$PRSIDLEQ =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This is a NPARSE action routine to save the entity format code
!	if it is zero or negative.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NPARSE_BLOCK [NPA$L_FLDPTR] points to the entity format code.
!
! IMPLICIT OUTPUTS:
!
!	Entity format code is saved in NML$GB_ENTFRM.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Success (NML$_STS_SUC) is returned if code is in range otherwise
!	unrecognized component error (NML$_STS_CMP) is returned.
!
! SIDE EFFECTS:
!
!	NPARSE state table transition is rejected if error is returned.
!
!--

    BEGIN

    $NPA_ARGDEF;			! Define NPARSE block reference

    LOCAL
	TEMP : SIGNED BYTE;		! Temporary format code storage

    TEMP = .(.NPARSE_BLOCK [NPA$L_FLDPTR])<0,8>; ! Get entity format code

    IF .TEMP LEQ 0
    THEN
        BEGIN

	NML$GB_ENTFRM = .TEMP;		! Save format code
        RETURN NML$_STS_SUC

        END
    ELSE
	RETURN NML$_STS_CMP		! Return error

    END;				! End of NML$PRSIDLEQ


%SBTTL 'NML$PRSID  Store entity format code and id (action routine)'
GLOBAL ROUTINE NML$PRSID =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This is a NPARSE action routine that stores the entity format code
!	a specified number of bytes of entity id.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NPARSE_BLOCK [NPA$L_FLDPTR] points to entity format and id.
!	NPARSE_BLOCK [NPA$L_FLDCNT] contains length.
!
! IMPLICIT OUTPUTS:
!
!	NML$GB_ENTFRM contains the entity format code.
!	NML$AB_ENTID contains the entity id string.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    $NPA_ARGDEF;			! Define NPARSE block reference

    LOCAL
	COUNT : SIGNED,
	IPTR,
	OPTR;

    COUNT = .NPARSE_BLOCK [NPA$L_FLDCNT] - 1; ! Get field count less format code
    IPTR = .NPARSE_BLOCK [NPA$L_FLDPTR]; ! Get input field pointer
    NML$GB_ENTFRM = CH$RCHAR_A (IPTR);	 ! Store format code

    IF .COUNT GTR 0
    THEN
	BEGIN

	OPTR = NML$AB_ENTID;		! Get pointer to entity storage
	CH$MOVE (2, .IPTR, .OPTR);	! Move entity id

	END;

    RETURN NML$_STS_SUC

    END;				! End of NML$PRSID


%SBTTL 'NML$PRSIDN  Store entity format code and name (action routine)'
GLOBAL ROUTINE NML$PRSIDN =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This is a NPARSE action that stores the entity format code and
!	up to 16 bytes of entity id.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NPARSE_BLOCK [NPA$L_FLDPTR] contains the pointer to the entity
!	    format code and id string.
!
! IMPLICIT OUTPUTS:
!
!	NML$GB_ENTFRM contains the entity format code.
!	NML$AB_ENTID contains the entity id string.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    $NPA_ARGDEF;			! Define NPARSE block reference

    LOCAL
	IPTR,
	OPTR;

    IPTR = .NPARSE_BLOCK [NPA$L_FLDPTR]; ! Get input field pointer
    NML$GB_ENTFRM = CH$RCHAR_A (IPTR);	! Save format code
    OPTR = NML$AB_ENTID;		! Get entity id storage pointer
    CH$MOVE (.NML$GB_ENTFRM,
	     .IPTR,
	     .OPTR);			! Move entity id

    RETURN NML$_STS_SUC

    END;				! End of NML$PRSIDN

%SBTTL 'NML$PRSNODNAM  Check node name against executor (action routine)'
GLOBAL ROUTINE NML$PRSNODNAM =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This is a NPARSE action that checks the node name against the
!	the name of the executor node name.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NPARSE_BLOCK [NPA$L_FLDPTR] contains the pointer to the entity
!	    format code and id string.
!	NML$GL_PRS_FLGS contains the current message parsing flag information.
!
! IMPLICIT OUTPUTS:
!
!	NML$GB_ENTFRM contains the entity format code.
!	NML$AB_ENTID contains the entity id string.
!	NML$GL_PRS_FLGS [NML$V_PRS_EXE] is set if this is the executor node.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    $NPA_ARGDEF;			! Define NPARSE block reference

    BUILTIN
	CALLG;

    LOCAL
	NAMPTR,
	NAMLEN;

    NAMPTR = .NPARSE_BLOCK [NPA$L_FLDPTR] + 1;
    NAMLEN = .NPARSE_BLOCK [NPA$L_FLDCNT] - 1;
!
! If the node name matches the executor node name then set the flag to 
! indicate it.
!
    IF NML$CHKEXENAM (.NAMLEN, .NAMPTR)
    THEN
        NML$GL_PRS_FLGS [NML$V_PRS_EXE] = 1;
!
! Parse the node id normally.
!
    CALLG (.NPARSE_BLOCK, NML$PRSIDN);

    RETURN NML$_STS_SUC

    END;				! End of NML$PRSNODNAM

%SBTTL 'NML$PRSNODADR  Check node address against executor (action routine)'
GLOBAL ROUTINE NML$PRSNODADR =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This is a NPARSE action that checks the node address against the
!	node address of the executor node and then stores it.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NPARSE_BLOCK [NPA$L_FLDPTR] contains the pointer to the entity
!	    format code and id string.
!	NML$GL_PRS_FLGS contains the current message parsing flag information.
!
! IMPLICIT OUTPUTS:
!
!	NML$GB_ENTFRM contains the entity format code.
!	NML$AB_ENTID contains the entity id string.
!	NML$GL_PRS_FLGS [NML$V_PRS_EXE] is set if this is the executor node.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    $NPA_ARGDEF;			! Define NPARSE block reference

    BUILTIN
	CALLG;

    LOCAL
	ADDR : WORD;

    ADDR = .(.NPARSE_BLOCK [NPA$L_FLDPTR]+1)<0,16>;
!
! If the node address matches the executor node address then set the flag
! to indicate it.
!
    IF NML$CHKEXEADR (.ADDR)
    THEN
	NML$GL_PRS_FLGS [NML$V_PRS_EXE] = 1;
!
! Parse the node id normally.
!
    CALLG (.NPARSE_BLOCK, NML$PRSID);

    RETURN NML$_STS_SUC

    END;				! End of NML$PRSNODADR

%SBTTL 'NML$PRSSNKNNA  Parse sink node name'
GLOBAL ROUTINE NML$PRSSNKNNA =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This is a NPARSE action that parses the sink node name.
!	The corresponding address is retrieved and saved for use.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NPARSE_BLOCK [NPA$L_FLDPTR] contains the address of the node name.
!	NPARSE_BLOCK [NPA$L_FLDCNT] contains the length of the counted node
!		name string (including the count byte).
!	NML$GL_PRS_FLGS contains the current message parsing flag information.
!
! IMPLICIT OUTPUTS:
!
!	NML$GL_PRS_FLGS [NML$V_PRS_EXESNK] is set if this is the executor node.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    $NPA_ARGDEF;			! Define NPARSE block reference

    LOCAL
	ADDR : WORD,
	NAMPTR,
	NAMLEN;

!
! Open the node data base file (in case it's a permanent operation).
!
    NMA$OPENFILE (NMA$C_OPN_NODE, NMA$C_OPN_AC_RO);
!
! Save the event sink node address.
!
    NAMPTR = .NPARSE_BLOCK [NPA$L_FLDPTR] + 1;
    NAMLEN = .NPARSE_BLOCK [NPA$L_FLDCNT] - 1;

    IF NML$GETNODADR (.NAMLEN, .NAMPTR, ADDR)
    THEN
	NML$GW_EVTSNKADR = .ADDR
    ELSE
	NML$ERROR_2 (NMA$C_STS_IDE, NMA$C_ENT_NOD);
!
! If the address matches the executor node address then set the flag
! to indicate the executor sink node.
!
    IF NML$CHKEXEADR (.ADDR)
    THEN
	NML$GL_PRS_FLGS [NML$V_PRS_EXESNK] = 1;
!
! Close the permanent data base file.
!
    NMA$CLOSEFILE (NMA$C_OPN_NODE);

    RETURN NML$_STS_SUC

    END;				! End of NML$PRSSNKNNA

%SBTTL 'NML$PRSSNKNAD  Parse sink node address'
GLOBAL ROUTINE NML$PRSSNKNAD =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This is a NPARSE action routine that stores the sink node address.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NPARSE_BLOCK [NPA$L_FLDPTR] points to the node address.
!	NPARSE_BLOCK [NPA$L_FLDCNT] contains the count of the address plus
!		the NMA$C_ENT_ADD byte.
!	NML$GL_PRS_FLGS contains the current message parsing flag information.
!
! IMPLICIT OUTPUTS:
!
!	NML$GL_PRS_FLGS [NML$V_PRS_EXESNK] is set if this is the executor node.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    $NPA_ARGDEF;			! Define NPARSE block reference

    LOCAL
	ADDR   : WORD;

!
! Open the node data base file (in case it's a permanent operation.
!
    NMA$OPENFILE (NMA$C_OPN_NODE, NMA$C_OPN_AC_RO);
!
! Save the event sink node address.
!
    ADDR = .(.NPARSE_BLOCK [NPA$L_FLDPTR]+1)<0,16>;
!
! If the address is zero then get the real executor node address and
! set the flag indicating the executor sink node.
!
    IF .ADDR EQLU 0
    THEN
	BEGIN

	NML$GETEXEADR (ADDR);
	NML$GL_PRS_FLGS [NML$V_PRS_EXESNK] = 1;

	END
    ELSE
	BEGIN
!
! If the address matches the executor node address then set the flag
! to indicate the executor sink node.
!
	IF NML$CHKEXEADR (.ADDR)
	THEN
	    NML$GL_PRS_FLGS [NML$V_PRS_EXESNK] = 1;

	END;

    NML$GW_EVTSNKADR = .ADDR;
!
! Close the permanent data base file.
!
    NMA$CLOSEFILE (NMA$C_OPN_NODE);

    RETURN NML$_STS_SUC

    END;				! End of NML$PRSSNKNAD

%SBTTL 'NML$PRSEXESNK  Get event sink executor node address'
GLOBAL ROUTINE NML$PRSEXESNK =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine sets up the default sink node as the executor node
!	if no sink node was specified explicitly.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NPARSE_BLOCK (pointed to by AP) contains the parsed parameter data.
!	    NPA$L_FLDCNT is the parameter length.
!	    NPA$L_FLDPTR is a pointer to the parameter in the received
!		message buffer.
!	NML$GL_PRS_FLGS contains the current message parsing flag information.
!
! IMPLICIT OUTPUTS:
!
!	NML$GL_PRS_FLGS [NML$V_PRS_SNKNOD] is set if it was not previously
!	    set.
!	NML$GL_PRS_FLGS [NML$V_PRS_EXESNK] is set if the executor node 
!	    address was found in the data base and a sink node had not been
!	    previously specified.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    $NPA_ARGDEF;

    LOCAL
	ADDR : WORD;
!
! If no sink node has been specified then the executor node is intended.
!
    IF NOT .NML$GL_PRS_FLGS [NML$V_PRS_SNKNOD]
    THEN
	BEGIN
!
! Open node file (in case it's a permanent data base operation).
!
	NMA$OPENFILE (NMA$C_OPN_NODE, NMA$C_OPN_AC_RO);
!
! Get the executor node address.
!
	IF NML$GETEXEADR (ADDR)
	THEN
	    BEGIN

	    NML$GW_EVTSNKADR = .ADDR;
	    NML$GL_PRS_FLGS [NML$V_PRS_SNKNOD] = 1;
	    NML$GL_PRS_FLGS [NML$V_PRS_EXESNK] = 1;

	    END
	ELSE
	    NML$ERROR_2 (NMA$C_STS_IDE, NMA$C_ENT_NOD);

	END;
!
! Close the permanent data base file.
!
    NMA$CLOSEFILE (NMA$C_OPN_NODE);

    RETURN NML$_STS_SUC

    END;				! End of NML$PRSEXESNK

%SBTTL 'NML$PRSDEVICE  Check device id (action routine)'
GLOBAL ROUTINE NML$PRSDEVICE =

!++
! FUNCTIONAL DESCRIPTION:
!	This is an NPARSE action that saves line and circuit IDs.  This
!	a separate routine so that wildcarding can be added later.
!
! IMPLICIT INPUTS:
!	NPARSE_BLOCK [NPA$L_FLDPTR] contains the pointer to the entity
!	    format code and id string.
!
! IMPLICIT OUTPUTS:
!	NML$GB_ENTFRM contains the entity format code.
!	NML$AB_ENTID contains the entity id string.
!
!--

BEGIN

$NPA_ARGDEF;			! Define NPARSE block reference

BUILTIN
	CALLG;

LOCAL
	LENGTH,
	ADDR;

LENGTH = .NPARSE_BLOCK [NPA$L_FLDCNT] - 1; ! Get length not including count
ADDR = .NPARSE_BLOCK [NPA$L_FLDPTR] + 1;   ! Get address of byte after count

!*************************************************
!* Wild cards are not currently allowed in line
!* specifications.

IF CH$FIND_CH (.LENGTH, .ADDR, %C'*') THEN
	BEGIN
	NML$GL_PRS_FLGS = .NML$GL_PRS_FLGS AND LIN$M_WILDCARDS;
	RETURN NML$_STS_IDE;
	END;

!*
!*
!**************************************************

CALLG (.NPARSE_BLOCK, NML$PRSIDN); ! Save line entity id and format
RETURN NML$_STS_SUC;
END;				! End of NML$PRSDEVICE

%SBTTL 'NML$PRSLOGSIN  Logging sink node check (action routine)'
GLOBAL ROUTINE NML$PRSLOGSIN =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This is a NPARSE action routine that checks the function code
!	for a read function.  If the function is read then failure is
!	returned to indicate that a sink node id must be parsed.
!	If function is not read then success is returned.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NML$GB_FUNC contains the function code.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Success (NML$_STS_SUC) is returned if the funtion is not read.
!	Otherwise, failure (NML$_STS_MPR) is indicated.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    $NPA_ARGDEF;			! Define NPARSE block reference

    IF .NML$GB_FUNC NEQU NMA$C_FNC_REA
    THEN
	RETURN NML$_STS_SUC
    ELSE
	RETURN NML$_STS_MPR;

    END;				! End of NML$PRSLOGSIN


%SBTTL 'NML$PRSSTR  Store entity parameter string (action routine)'
GLOBAL ROUTINE NML$PRSSTR =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This is a NPARSE action that stores an entity-specific string.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NPARSE_BLOCK [NPA$L_FLDPTR] contains the pointer to the string.
!	NPARSE_BLOCK [NPA$L_FLDCNT] contains the count.
!
! IMPLICIT OUTPUTS:
!
!	NML$GQ_ENTSTRDSC describes the entity-specific string.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    $NPA_ARGDEF;			! Define NPARSE block reference

    NML$GQ_ENTSTRDSC [DSC$W_LENGTH] = .NPARSE_BLOCK [NPA$L_FLDCNT];
    NML$GQ_ENTSTRDSC [DSC$A_POINTER] = .NPARSE_BLOCK [NPA$L_FLDPTR];

    RETURN NML$_STS_SUC

    END;				! End of NML$PRSSTR

%SBTTL 'NML$PRSERR1  Error parsing message (action routine)'
GLOBAL ROUTINE NML$PRSERR1 =

!++
! FUNCTIONAL DESCRIPTION:
!
!    This routine causes an error message to be signalled with the status
!    code specified in the NPARSE block (NPA$L_PARAM).
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	An error message is signalled.
!
!--

    BEGIN

    $NPA_ARGDEF;			! Define NPARSE block reference

    NML$ERROR_1 (.NPARSE_BLOCK [NPA$L_PARAM]); ! Signal message

    RETURN NML$_STS_SUC

    END;				! End of NML$PRSERR1

%SBTTL 'NML$PRSIDERR  Error parsing entity id (action routine)'
GLOBAL ROUTINE NML$PRSIDERR =

!++
! FUNCTIONAL DESCRIPTION:
!
!    This routine causes an entity id error message to be signalled
!    with the detail code specified in the NPARSE block (NPA$L_PARAM).
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    $NPA_ARGDEF;			! Define NPARSE block reference

    NML$ERROR_2 (NMA$C_STS_IDE,
		 .NPARSE_BLOCK [NPA$L_PARAM]); ! Signal message

    RETURN NML$_STS_SUC

    END;				! End of NML$PRSERR1

END					! End of module

ELUDOM
