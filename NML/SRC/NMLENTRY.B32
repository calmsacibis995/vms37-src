%TITLE 'Network Management Listener entry point'
MODULE NML$ENTRY (IDENT = 'V03-000',
		ADDRESSING_MODE (NONEXTERNAL=GENERAL),
		ADDRESSING_MODE (EXTERNAL=GENERAL)) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
 
!++
! FACILITY:  DECnet-VAX V2.0 Network Management Listener
!
! ABSTRACT:
!
!	This module contains the entry points for the
!	callable interface for the NML sharable image.
!
! ENVIRONMENT:  VAX/VMS Operating System
!
! AUTHOR:  Tim Halvorsen, July 1981
!
! MODIFIED BY:
!
!	V03-002	MKP0001		Kathy Perko		04-Feb-1982
!		Allow NCPs with version numbers greater than or equal
!		to 3.0 (as well as 2.0) to talk to this NML.
!
!	V001	TMH0001		Tim Halvorsen		12-Oct-1981
!		Change argument to NML$INITIALIZE to accept the
!		version number of NICE to be spoken, rather than the phase.
!		Remove obsolete comment.
!--

%SBTTL 'Declarations'

!
! TABLE OF CONTENTS:
!
 
FORWARD ROUTINE
    NML$INITIALIZE:	NOVALUE,		! Initialize NML
    NML$PROCESS_NICE:	NOVALUE,		! Process a NICE message
    NML$TERMINATE:	NOVALUE,		! Terminate NML
    NML$AUTO_SERVICE:	NOVALUE,		! Automatic service functions
    NML_INITLOG:	NOVALUE,		! Initialize message logging
    NML$SEND,					! Send response to caller
    NML$LOOP2:		NOVALUE,		! Phase II passive loopback
    NML$PHASE2:		NOVALUE,		! Phase II NICE processing
    NML$MAINHANDLER;				! Main condition handler
 
!
! INCLUDE FILES:
!
 
LIBRARY 'LIB$:NMLLIB';			! Facility-wide definitions

LIBRARY 'SHRLIB$:NMALIBRY';		! NICE definitions

LIBRARY 'SYS$LIBRARY:STARLET';		! VMS common definitions
 
!
! OWN STORAGE:
!
 
OWN
    nml$gl_response_rtn,		! Address of response action routine

    nml$b_ph2link: BYTE INITIAL(false),	! Phase II link flag (true->connected)
    nml$w_nicechan: WORD;		! Phase II channel of NICE object
 
!
! EXTERNAL REFERENCES:
!
 
$NML_EXTDEF;				! Define common external data
$NML_SRVDEF;				! Define external service data
 
EXTERNAL
    nml$gq_proprvmsk:	BBLOCK [8],
    nml$gb_ncp_version: VECTOR [3,BYTE],	! NICE version being spoken
    npa$gl_logmask;
 
EXTERNAL ROUTINE
    lib$asn_wth_mbx,
    nma$closefile,
    nml$autoservice,
    nml$change,
    nml$v2_compatibility,
    nml$debug_msg,
    nml$error_1,
    nml$logallpdb,
    nml$operservice,
    nml$parse_init,
    nml$read,
    nml$test,
    nml$trnlognum,
    nml$zero;

%SBTTL 'NML$INITIALIZE	Initialization routine'

GLOBAL ROUTINE NML$INITIALIZE (VERSION): NOVALUE =
 
!++
!	This is the initialization routine for the DECnet-VAX Network
!	Management Listener.  This module initializes the own storage
!	in preparation for processing NICE messages.
!
! Inputs:
!
!	version = Address of 3 byte version number of NICE to be spoken.
!			1.3.0 = NICE V1.3.0 (Phase II)
!			2.0.0 = NICE V2.0.0 (Phase III)
!			3.0.0 = NICE V3.0.0 (default)
!
! Outputs:
!
!	NML$GQ_PROPRVMSK = Current privilege mask
!	NML$GB_CMD_VER = NICE phase type
!	NML$GB_NCP_VERSION = NICE version number
!	NML$GW_ACP_CHAN = Channel to network ACP
!
!	All errors are signaled.
!--
 
BEGIN
 
BUILTIN
    NULLPARAMETER;			! True if argument unspecified

OWN
    GETPRVLST : BLOCK [7]		! Argument block for $GETJPI
		    INITIAL (WORD (8, JPI$_PROCPRIV),
			     NML$GQ_PROPRVMSK,
			     0,
			     0);
LOCAL
    STATUS;				! Temporary status

!
! Store version number of NICE being spoken from now on.  Only major
! version numbers are distinguished.
!

NML$GB_CMD_VER = NML$C_PHASE3;		! Assume Phase III

IF NULLPARAMETER(1)			! If unspecified,
THEN
    CH$MOVE(3, nml$ab_nml_nmv,		! then default to current version
		nml$gb_ncp_version)
ELSE
    IF CH$RCHAR(.version) EQL 2		! Allow V2.0.0
	OR CH$GEQ(3, .version,		! or current version (3.0) or higher.
		3, nml$ab_nml_nmv, 0)
    THEN
	BEGIN
	CH$MOVE(3, .version,		! Use specified (and validated) version
		nml$gb_ncp_version);
	IF CH$RCHAR(.version) LSSU 2	! If less than V2.0.0 NICE,
	THEN
	    NML$GB_CMD_VER = NML$C_PHASE2; ! Then mark Phase II
	END
    ELSE
	RETURN ss$_badparam;		! Signal invalid NICE version #
    
!
! Get process privilege mask.
!

$GETJPI (ITMLST = GETPRVLST);

!
! Initialize logging.
!

NML_INITLOG ();

!
! Establish channel to NETACP for QIO control functions.
!

STATUS = $ASSIGN(DEVNAM = NML$GQ_NETNAMDSC,
		CHAN = NML$GW_ACP_CHAN);

IF NOT .STATUS				! If error detected,
THEN
    SIGNAL_STOP(.STATUS);		! Signal fatal error

END;

%SBTTL 'NML$PROCESS_NICE	Main command processing routine'

GLOBAL ROUTINE NML$PROCESS_NICE (msg_desc, resp_rtn): NOVALUE =
 
!++
!	This routine is the main command processing routine.  NICE messages
!	are parsed to determine the requested function and then the proper
!	routine is called to perform the function.
!
! Inputs:
!
!	msg_desc = Address of descriptor of NICE message
!	resp_rtn = Address of action routine to call with NICE response
!		   The action routine is called with the following arguments:
!			1) Address of descriptor of NICE response
!
! Outputs:
!
!	None - control is returned after the last response has been passed
!	to the action routine.
!--
 
BEGIN

BUILTIN FP;

MAP
    msg_desc:	REF BLOCK [,BYTE];	! Address of descriptor

.fp = nml$mainhandler;			! Enable condition handler

nml$gl_rcvdatlen = .msg_desc [dsc$w_length]; ! Copy length of message

CH$MOVE(.msg_desc [dsc$w_length],	! Copy message itself
	.msg_desc [dsc$a_pointer],
	nml$ab_rcvbuffer);

nml$debug_msg(dbg$c_netio,			! Log type code
	       .msg_desc [dsc$a_pointer],	! Message buffer address
	       .msg_desc [dsc$w_length],	! Message data length
	       %ASCID 'NICE message received'); ! Header text

nml$gl_response_rtn = .resp_rtn;	! Save address of response routine

IF NOT nml$parse_init()			! Parse received message
THEN
    RETURN;				! Return on failure

IF nml$v2_compatibility()		! Process V2 NICE if necessary
THEN
    RETURN;				! If it handled it, then exit

SELECTONEU .nml$gb_func			! Dispatch the function
OF
    SET
    [NMA$C_FNC_REA]:	NML$READ ();	! Read
 
    [NMA$C_FNC_CHA]:	NML$CHANGE ();	! Change
 
    [NMA$C_FNC_ZER]:	NML$ZERO ();	! Zero
 
    [NMA$C_FNC_TES]:	NML$TEST ();	! Test
 
    [NMA$C_FNC_LOA,				! Load
     NMA$C_FNC_TRI,				! Trigger
     NMA$C_FNC_DUM]:	NML$OPERSERVICE ();	! Dump

    [NMA$C_FN2_LOO]:	NML$LOOP2 ();	! Loop (Phase II)

    [NMA$C_FN2_REA,			! Read (Phase II SHOW)
     NMA$C_FN2_ZER]:	NML$PHASE2 ();	! Zero (Phase II)
 
    [OTHERWISE]:	NML$ERROR_1 (NMA$C_STS_MPR);
    TES;

END;

%SBTTL 'NML$TERMINATE	Terminate NICE communications'

GLOBAL ROUTINE NML$TERMINATE: NOVALUE =

!++
!
!	This routine is called to terminate communications with this
!	listener.  It cleans up any database or storage if needed.
!
! Inputs:
!
!	None
!
! Outputs:
!
!	None - all errors are signaled.
!--

BEGIN

NMA$CLOSEFILE (NMA$C_OPN_ALL);		! Close any open files

END;

%SBTTL 'NML$AUTO_SERVICE  Automatic service functions'

GLOBAL ROUTINE NML$AUTO_SERVICE (line_desc): NOVALUE =

!++
!
!	This routine is called to process automatic service functions
!	for a given NCB.
!
! Inputs:
!
!	line_desc = Address of descriptor of the VMS device name to operate on.
!
! Outputs:
!
!	None - all errors are signaled.
!--

BEGIN

MAP
    line_desc: REF BLOCK [,BYTE];	! Address of device name descriptor

nml$gq_srviddsc [dsc$w_length] = .line_desc [dsc$w_length];
nml$gq_srviddsc [dsc$a_pointer] = .line_desc [dsc$a_pointer];

nml$autoservice();			! Invoke auto service functions

END;

%SBTTL 'NML_INITLOG  Initialization debug logging'

ROUTINE NML_INITLOG: NOVALUE =
 
!++
!
!	This routine initializes the internal logging flags for NML debugging.
!	The logical name NML$LOG is translated to get the flag settings.
!
! Inputs:
!
!	None
!
! Outputs:
!
!	None
!--
 
BEGIN

!
! Set internal logging flags if NML$LOG is defined.
!

NML$TRNLOGNUM ($ASCID ('NML$LOG'), NML$GL_LOGMASK);

!
! If the NPARSE logging flag is set then set it in the NPARSE data area.
! 

IF .NML$GL_LOGMASK [DBG$C_NPARSE]
THEN
    NPA$GL_LOGMASK = 1
ELSE
    NPA$GL_LOGMASK = 0;

!
! Log contents of permanent data base files.
!

NML$LOGALLPDB ();

END;

%SBTTL 'NML$SEND   Send NICE response to caller'

GLOBAL ROUTINE NML$SEND (BUFADR, BUFLEN) =

!++
!
!	This routine sends NICE protocol status messages back
!	to the NICE caller.
!
! Inputs:
!
!	bufadr		Address of the buffer to be transmitted.
!	buflen		Length of the buffer in bytes.
!
!	nml$gl_response_rtn Channel assigned to the command process link.
!
! Outputs:
!
!	Returns success.  Errors are signalled.
!--

BEGIN

LOCAL
    desc:	VECTOR [2];		! Descriptor of response message

nml$debug_msg(dbg$c_netio,		! Log message transmitted
	       .bufadr,
	       .buflen,
	       %ASCID 'NICE message transmitted');

desc [0] = .buflen;			! Setup descriptor of response
desc [1] = .bufadr;

(.nml$gl_response_rtn) (desc);		! Call caller's response action routine

RETURN true;				! Return successful

END;

%SBTTL 'NML$LOOP2  Phase II passive loopback'

ROUTINE	NML$LOOP2 : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine acts as the phase II loopback mirror.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NML$AB_RCVBUFFER contains the received message.
!	NML$GL_RCVDATLEN contains the length of the received data.
!
! IMPLICIT OUTPUTS:
!
!	NML$AB_RCVBUFFER is altered.
!
! ROUTINE VALUE:
! COMPLETION CODE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Signals response message.
!
!--
 
    BEGIN
! 
! Make sure that it is a valid loopback message.
! If it is valid then set message header to 1 and send message
! else set message header to -1 and send message.
!
    IF .(NML$AB_RCVBUFFER + 1)<0,8,0> EQL 0
    THEN
	BEGIN

	(NML$AB_RCVBUFFER + 1)<0,8,0> = 1;
	$SIGNAL_MSG (NML$AB_RCVBUFFER + 1, .NML$GL_RCVDATLEN - 1);

	END
    ELSE
	BEGIN

	(NML$AB_RCVBUFFER + 1)<0,8,0> = -1;
	$SIGNAL_MSG (NML$AB_RCVBUFFER + 1, 1);

	END;
 
    END;				! End of NML$LOOP2

%SBTTL 'NML$PHASE2  Routine which connects to NICE'

ROUTINE	NML$PHASE2 : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
! 	This routine passes PHASE2 commands to the NICE object and
! 	returns to the command process, the responses from the NICE object
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NML$W_NICECHAN	NICE object channel.
!
! ROUTINE VALUE:
! COMPLETION CODE:
!
!	All errors are signalled.  Otherwise the value NML$_STS_SUC is
!	returned.
!
! SIDE EFFECTS:
!
! NONE
!--

    BEGIN

    LITERAL
	SNDBUFSIZE = 256;
 
    LOCAL
	COUNT     : WORD,		! Contains number of data messages
					!  received from NICE task
	STATUS,
	RCV_IOSB  : $IOSB,
	XMIT_IOSB : $IOSB;
!
! Connect information for NICE object for Phase 2 processing.
!
    BIND
	NICEOBJECTDSC = $ASCID ('::"TASK=NMLPH2"') : DESCRIPTOR;
!
! If Phase 2 command process then attempt to connect to NICE object.
!
    IF .NML$B_PH2LINK
    THEN
	BEGIN

	STATUS = $ASSIGN (CHAN   = NML$W_NICECHAN,
			  DEVNAM = NICEOBJECTDSC);
	IF NOT .STATUS
	THEN
	    NML$ERROR_1 (NMA$C_STS_RES);

	END; 
! 
! Attempt to transmit Phase II command to NICE.
!
    STATUS = $QIOW (CHAN = .NML$W_NICECHAN,
		    FUNC = IO$_WRITEVBLK,
		    IOSB = XMIT_IOSB,
		    P1   = NML$AB_RCVBUFFER,
		    P2   = .NML$GL_RCVDATLEN);
 
    IF .STATUS
    THEN
	STATUS = .XMIT_IOSB [IOS$W_STATUS];
 
    IF NOT .STATUS
    THEN
	NML$ERROR_1 (NMA$C_STS_RES);
! 
! If transmit was successful then post read to NICE
!
    STATUS = $QIOW (CHAN = .NML$W_NICECHAN,
		    FUNC = IO$_READVBLK,
		    IOSB = RCV_IOSB,
		    P1   = NML$AB_SNDBUFFER,
		    P2   = SNDBUFSIZE);
 
    IF .STATUS
    THEN
	STATUS = .RCV_IOSB [IOS$W_STATUS];
 
    IF NOT .STATUS
    THEN
	NML$ERROR_1 (NMA$C_STS_RES);
!
! If receive was successful then send received NICE message
! to requestor of command.
! 
    STATUS = NML$SEND (NML$AB_SNDBUFFER,
		       .RCV_IOSB [IOS$W_COUNT]);
! 
! If send was successful then  continue reading data messages
!
    IF NOT .STATUS
    THEN
	NML$ERROR_1 (NMA$C_STS_RES);
 
    IF .RCV_IOSB [IOS$W_COUNT] LSSU 3
    THEN
	COUNT = 0
    ELSE
	COUNT = .(NML$AB_SNDBUFFER+1)<0,16,0>;
 
    DECR I FROM .COUNT-1 TO 0 DO
	BEGIN

	STATUS = $QIOW (CHAN = .NML$W_NICECHAN,
			FUNC = IO$_READVBLK,
			IOSB = RCV_IOSB,
			P1   = NML$AB_SNDBUFFER,
			P2   = SNDBUFSIZE);
 
	IF .STATUS
	THEN
	    STATUS = .RCV_IOSB[IOS$W_STATUS];
 
	IF NOT .STATUS
	THEN
  	    NML$ERROR_1(NMA$C_STS_RES);
 
	STATUS = NML$SEND (NML$AB_SNDBUFFER,
			   .RCV_IOSB [IOS$W_COUNT]);
 
	IF NOT  .STATUS
	THEN
	    NML$ERROR_1 (NMA$C_STS_RES);

	END;				! End of DECR block
    
    
    RETURN NML$_STS_SUC;
 
    END;				! End of NML$PHASE2

%SBTTL 'NML$MAINHANDLER  Condition handler routine'

GLOBAL ROUTINE NML$MAINHANDLER (SIGNAL_VEC, MECHANISM) =
 
!++
! FUNCTIONAL DESCRIPTION:
!
!	This is the condition handler routine for NML.
!
! FORMAL PARAMETERS:
!
!	SIGNAL_VEC	Signal vector block.
!	MECHANISM	Mechanism vector argument block.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--
 
    BEGIN
 
    MAP
	SIGNAL_VEC : REF BBLOCK,	! Signal vector arg
	MECHANISM  : REF BBLOCK;	! Mechanism vector arg
 
    LOCAL
	BUF_ADR,			! Temporary buffer address
	BUF_LEN,			! Temporary buffer length
	STS_CODE : BBLOCK [4];		! Status code
 
    STS_CODE = .SIGNAL_VEC [CHF$L_SIG_NAME]; ! Get signal status code
!
! Facility code must match the one for NML.
! 
    IF .STS_CODE [STS$V_FAC_NO] EQLU NML$K_FAC_CODE
    THEN
	BEGIN
!
! Two arguments are required for NML conditions.
!
	IF .SIGNAL_VEC [CHF$L_SIG_ARGS] NEQU 2+3
	THEN
	    RETURN SS$_RESIGNAL
	ELSE
	    BEGIN

	    BUF_ADR = .SIGNAL_VEC [CHF$L_SIG_ARG1];
	    BUF_LEN = .(SIGNAL_VEC [CHF$L_SIG_ARG1]+4);
!
! If a message is specified (length not equal 0) then send it.
!
	    IF .BUF_LEN NEQU 0
	    THEN
		NML$SEND (.BUF_ADR, .BUF_LEN); ! Send status message
 
!
! Close any open files.
!
	    NMA$CLOSEFILE (NMA$C_OPN_ALL);

	    MECHANISM [CHF$L_MCH_SAVR0] = 0;
!
! Unwind back to the routine that set up the condition hanlder and continue
! from there.
! 
	    $UNWIND (DEPADR = MECHANISM [CHF$L_MCH_DEPTH]);
	    RETURN SS$_CONTINUE

	    END;
	END
    ELSE
!
! This condition was not signalled by NML so let it go by.
!
	RETURN SS$_RESIGNAL
 
    END;				! End of NML$MAINHANDLER
 

END					! End of module
ELUDOM
