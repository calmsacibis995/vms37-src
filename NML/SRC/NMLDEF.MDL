; NMLDEF.MDL - internal definitions for NML
;
;	Version 'V03-000'
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************

;++
;
; FACILITY:  VAX/VMS DECnet Network Management Listener
;
; ABSTRACT:
;
;	This file contains varions MDL definitions for NML.
;
; ENVIRONMENT:
;
;	n/a
;
; AUTHOR:  Scott Davidson	 CREATION DATE:  1-Aug-1979
;
; MODIFICATION HISTORY:
;
;	V03-006	MKP0005		Kathy Perko	20-Nov-1981
;		Add parameter grouping flags for X.25 Protocol DTEs,
;		Groups, and Networks.
;
;	V03-005	MKP0004		Kathy Perko	17-Nov-1981
;		Add circuits to event source block definitions.
;
;	V03-004	MKP0003		Kathy Perko	3-Nov-1981
;		Add field to MSB for second line of message text
;		for RMS signalled messages.
;
;	V03-003 MKP0002		Kathy Perko	14-Oct-1981
;		Add flags for parsing V2 to V3 SET LINE conversions.
;
;	V03-002	MKP0001		Kathy Perko	18-Sept-1981
;		Change network management version number to 3.0.0
;
;--

;
; Symbol definitions for the Network Management Listener
;

$STRUCT	NML
    ;
    ; Message parsing flag bit definitions (set in NML$GL_PRS_FLGS)
    ;

    ;
    ; Common parsing flags.
    ;
    V<M
	PRS_VMS			; VMS specific function
	PRS_ALL			; Set/clear all parameters
	PRS_STR			; String parameter present
	PRS_LSV			; Line service operation (as opposed to node)
    >
    ;
    ; Specific entity parsing flags.

    ;
    ; Node parsing flags.
    ;
    V<M
	,8
	PRS_EXE			; Executor
	PRS_NAM			; Node by name
	PRS_ADR			; Node by address
	PRS_EXEPG		; Executor-only parameter group
	PRS_NODPG		; Executor/node parameter group
	PRS_REMPG		; Remote node parameter group
	PRS_LOOPG		; Loop node parameter group
    >
    ;
    ; Module parsing flags - used to make sure all parameters in a Change
    ; NICE message are in the same group (DTE, Group, or Network).
    ;
    V<M
	,8
	DTE_GROUP		; NICE command modifies a X.25 protocol DTE
	GROUP_GROUP		; NICE command modifies a X.25 protocol group
	NET_GROUP		; NICE command modifies a X.25 protocol network
    >
    ;
    ; Logging parsing flags.
    ;
    V<M
	,8
	PRS_EXESNK		; Sink node is executor
	PRS_SNKNOD		; Sink node specified
	PRS_KNOSNK		; Known sink nodes
	PRS_EFIPG		; Event filter parameter group
	PRS_ESIPG		; Event sink parameter group
	PRS_EVE			; Event parameter processed
    >
    ;
    ; Line parsing flags.
    ;
    V<M
	,8
	PRS_LINE,6		; Line flags (LIN$ definitions)
	PRS_V2_LINE		; Command parameters are for a line.
	PRS_V2_CIRCUIT		; Command parameters are for a circuit.
	PRS_V2_STA		; Command contains a state change.
    >

    ;
    ; Network Management version definitions for message handling
    ; (Set in NML$GB_CMD_VER)
    ;
    C<
	PHASE2, 1		; Phase II function
	PHASE3, 2		; Phase III function
    >
    ;
    ; NML return codes
    ;
    C<,$_
	STS_SUC, 1		; Success
	STS_FUN, -1*2		; Unrecognized function or option
	STS_INV, -2*2		; Invalid message format
	STS_PRI, -3*2		; Privilege violation
	STS_SIZ, -4*2		; Message too long
	STS_MPR, -5*2		; Network management program error
	STS_PTY, -6*2		; Unrecognized parameter type
	STS_MVE, -7*2		; Incompatible management version
	STS_CMP, -8*2		; Unrecognized component
	STS_IDE, -9*2		; Invalid identification format
	STS_LCO, -10*2		; Line communication error
	STS_STA, -11*2		; Component in wrong state
	STS_FOP, -13*2		; File open error
	STS_FCO, -14*2		; Invalid file contents
	STS_RES, -15*2		; Resource error
	STS_PVA, -16*2		; Invalid parameter value
	STS_LPR, -17*2		; Line protocol error
	STS_FIO, -18*2		; File i/o error
	STS_MLD, -19*2		; Mirror link disconnected
	STS_ROO, -20*2		; No room for new entry
	STS_MCF, -21*2		; Mirror connect failed
	STS_PNA, -22*2		; Parameter not applicable
	STS_PLO, -23*2		; Parameter value too long
	STS_HAR, -24*2		; Hardware failure
	STS_OPE, -25*2		; Operation failure
	STS_SYS, -26*2		; System-specific network management function not supported
	STS_PGP, -27*2		; Invalid parameter grouping
	STS_BLR, -28*2		; Bad loopback response
	STS_PMS, -29*2		; Parameter missing
    >
    ;
    ; Network Management parameters
    ;
    K   <
	VERSION, 3		; Network Management version
	DEC_ECO, 0		; DIGITAL ECO number
	USER_ECO, 0		; User ECO number
	FAC_CODE, 505		; Facility code
	SIG_CODE, 505*65536	; Signal code (505^16)
    >
    ;
    ; Data definitions
    ;
    K<
	BYTE			; Byte
	WORD			; Word
	LONG			; Longword
;*	QUAD			; Quadword
	STRING			; String
    >
    ;
    ; Special permanent data base record search key parameter codes.
    ;
    C<
	KEY_LINE, -1		; Line
	KEY_SINK, -2		; Logging sink
				; Node uses name or address
	KEY_EXE,  -3		; Executor node
				; Object uses name
	KEY_CIR,  -4		; Circuit
	KEY_NET,  -5		; Network
	KEY_GROUP,-6		; Group
	KEY_DTE,  -7		; DTE
    >
    ;
    ; Internal entity id codes.
    ;
    C<
	LINE			; Line
	LOGGING			; Logging
	SINK			; Logging sink
	NODE			; Node (by address)
	NODEBYNAME		; Node by name
	LOOPNODE		; Loop node (by name only)
	EXECUTOR		; Executor node (by address=0)
	OBJECT			; Object
	CIRCUIT			; Circuit
	PROTOCOL_NET		; Protocol Module Networks
	PROTOCOL_GROUP		; Protocol Module Groups
	PROTOCOL_DTE		; Protocol Module DTEs
	LINKS			; Logical links

	MAXENTITY		; Maximum entity number
    >
    ;
    ; Internal information table index codes.
    ;
    C<
	SUMMARY			; Summary	  (NMA$C_INF_SUM)
	STATUS			; Status	  (NMA$C_INF_STA)
	CHARACTERISTICS		; Characteristics (NMA$C_INF_CHA)
	COUNTERS		; Counters 	  (NMA$C_INF_COU)
	EVENTS			; Events 	  (NMA$C_INF_EVE)
	ZERO			; Zero counters
	SERVICE			; Service parameters

	MAXINFO			; Maximum information type
    >
    ;
    ; Internal loopback type codes.
    ;
    C<
	LOOP_MOP		; MOP loopback operation
	LOOP_PHASE3		; Phase III loopback operation
	LOOP_PHASE2		; Phase II loopback operation
    >

E


;
; Message segment block (MSB) definitions
;
$STRUCT	MSB

    F	FLAGS,L			; Flags
    V<M
	CODE_FLD		; Status code present (not used)
	DET_FLD			; Error detail field present (DETAIL)
	MSG_FLD			; Message text field present (TEXT)
	MSG2_FLD		; Second line of message text present (TEXT2)
	ENTD_FLD		; Enitity descriptor field present (ENTITY)
	DATA_FLD		; Data  descriptor field present (DATA)
	SYSM_FLD		; System message field present (TEXT)
    >
    F	,L
     S	CODE,,B			; Status code
    F	,L
     S	DETAIL,,W		; Detail
    F	TEXT,L			; Status code for text message.
    F   TEXT2,L			; Status code for second line of text msg.
    F	ENTITY,A		; Entity descriptor address
    F	DATA,A			; Data descriptor address
    L	LENGTH			; Maximum MSB size

E

;
; MOP message definitions
;
$STRUCT MOP
    ;
    ; Define MOP function codes.
    ;
    C<,$_
	FCT_MLT, 0		; Memory load with transfer address
	FCT_MLD, 2		; Memory load
	FCT_RMD, 4		; Request memory dump
	FCT_EMM, 6		; Enter MOP mode
	FCT_RPR, 8		; Request program
	FCT_RML, 10		; Request memory load
	FCT_MMR, 12		; MOP mode running
	FCT_MDD, 14		; Memory dump data
	FCT_PLT, 20		; Parameter load with transfer address
	FCT_ALD, 24		; Active loop data
	FCT_PLD, 25		; Passive looped data
    >
    ;
    ; Define MOP parameter codes.
    ;
    C<
	PAR_NNA,1		; Target node name
	PAR_NAD,2		; Target node address
	PAR_HNA,3		; Host node name
	PAR_HAD,4		; Host node address
    >

E

;
; NML internal logging (debugging) flags
;
; These flags are used to enable logging of specified data to the NML log
; file.  The flags are defined by translating the logical name NML$LOG.
;
$STRUCT	DBG

    C<
	NETIO		; Network send/receive logging
	FILEIO		; File read/write logging
	NPARSE		; NPARSE state transition logging
	LOOPIO		; Loopback transmit/receive logging
	ACPQIO		; NETACP QIO logging
	MOPIO		; MOP send/receive logging
	SRVTRC		; Trace service operations
	EVENTS		; Network event (EVL) logging
    >

    C<,,16,1
	DMPNOD		; Dump node permanent data base file
	DMPLIN		; Dump line permanent data base file
	DMPLOG		; Dump logging permanent data base file
	DMPOBJ		; Dump object permanent data base file
	DMPCIR		; Dump circuit permanent data base file
	DMPMOD		; Dump module permanent data base file
    >

E

;
; Parameter semantic table (PST) definitions
;
$STRUCT	PST

    F	DATAID,W	; DNA parameter code
    F	FORMAT,B	; Parameter format (byte, word, longword, etc.)
    F	DATATYPE,B	; Data type code (coded, coded multiple, etc.)
    F	MINVALUE,L	; Minimum value or string length
    F	MAXVALUE,L	; Maximum value or string length
    F	NFBID,L		; ACP parameter identifier
    L	ENTRYLEN	; Parameter semantic table entry length

E

;
; Entity information table definitions.
;
$STRUCT EIT

    F FILEID,B		; Permanent data base file id code
    F DETAIL,W		; NICE error detail entity code
    F KEY,W		; Permanent data base search key
    F DATABASE,B	; Volatile data base ID
    F SRCHKEY,L		; Volatile data base search key ID
    F ALLTAB,A		; Parameter table for SET ALL
    L ENTRYLEN		; Entry length

E

;
; Change parameter table definitions.
;
$STRUCT	CPT

    F PSTINDEX,W		; Parameter semantic table index
    F DEFINE_RTN,A		; Define routine address
    F PURGE_RTN,A		; Purge routine address
;   F SET_RTN,A			; Set routine address
;   F CLEAR_RTN,A		; Clear routine address
    L ENTRYLEN			; Length of table entry

E

;
; Line table (DTB) definitions
;
$STRUCT	DTB

    F   FLAGS,W		; Line type flags
    V<M
    	POINT		; Point to point line
	MULTIPLEX	; Multiplexed line
	MULTIPOINT	; Multi	point line
	MLTPLXPNT	; Multiplexed multipoint line
    >
    F   ,W		; Reserved
    F   DNANAMDSC,Q	; DNA line name descriptor
     S  DNANAMLEN,,W	; DNA line name string length
     S  ,,W
     S  DNANAMADR,,A	; DNA line name string address
    F   VMSNAMDSC,Q	; VMS line name descriptor
     S  VMSNAMLEN,,W	; VMS line name string length
     S  ,,W
     S  VMSNAMADR,,A	; VMS line name string address
    L   ENTRYLEN	; Line table entry length

E
;
; Line flag definitions
;
$STRUCT	LIN

    V<M
	,8		; Skip low byte (alignment with parse flags)
	WILDCARDS	; Wildcard mask
	>

E

;
; Counter table offsets
;
$STRUCT CNT

    F	PSTINDEX,W	; Semantic table index
    F	OFFSET,W	; Counter block byte offset
    F	WIDTH,W		; Counter field width
    F	FLAGS,W		; Counter flags
    F	BITMAP,W	; Counter bitmap
    L	ENTRYLEN	; Counter table entry length

E

;
; This file defines the event data base ures.
;
;
; Event source block definitions.
;
$STRUCT	SRC

    F	LENGTH,W		; Byte count of entire source block
				;
    F	SINKTYPE,B		; Sink type code:  NMA$C_SNK_CON
				;		   NMA$C_SNK_FIL
				;		   NMA$C_SNK_MON
				;
    F	SRCTYPE,B		; Source type code:  NMA$C_ENT_KNO
				;		     NMA$C_ENT_NOD
				;		     NMA$C_ENT_CIR
				;		     NMA$C_ENT_LIN
				;
    F	SOURCE,T,18		; Source id string
				;
				; Source = node (NMA$C_ENT_NOD)
     S	NODADR,0,W		;   Node address
				; Source = line or circuit (NMA$C_ENT_LIN or
				;		NMA$C_ENT_CIR)
     S	DEVLENGTH,0,B		;   Device id string length
     S	DEVICEID,,T,17		;   Device id string
				;
    F	MSKCOUNT,W		; Count of event blocks (mask sets)

    L	LENGTH			; Length of fixed part of source block

E
;
; Event block definitions.
;
$STRUCT	EVT

    F	CLASS,W			; Event class
    F	,W			; Spare
    F	LOGMSK,Q		; Event log mask
    F	FILTERMSK,Q		; Event filter mask
    L	LENGTH			; Length of event block

E
;
; Event table definitions.
;
$STRUCT ETB

    F	CLASS,W			; Event class
    F	GLOBAL,A		; Global filter mask
    F	NODE,A			; Node filter mask
    F   CIRCUIT,A		; Circuit filter mask
    F	LINE,A			; Line filter mask
    L	ENTRYLEN		; Length of event table entry

E
;
; End of NMLDEF.MDL
;
