MODULE 
UTILITY (IDENT = 'V03-000') = 
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY:  ACC, Account file dumper
!
! ABSTRACT:
!
!	This module contains utility routines used by the ACC facility.
!
! ENVIRONMENT:
!
!	VAX/VMS operating system. unprivileged user mode,
!
! AUTHOR:  Greg Robert and Steve Forgey, January 1982
!
! Modified by:
!
!	V03-001	SPF0079		Steve Forgey	05-Feb-1982
!		Don't signal "end of file" errors.
!
!--

!-----------------------------------------------------------------------------+
!									      !
! 				INCLUDE  FILES				      !
!									      !
!-----------------------------------------------------------------------------+

SWITCHES LIST (REQUIRE);

REQUIRE 'MSRC$:ACCDEF.REQ';		! Command ACC definitions

!-----------------------------------------------------------------------------+
!									      !
! 			TABLE  OF  CONTENTS				      !
!									      !
!-----------------------------------------------------------------------------+

UNDECLARE WRITE_BINARY;

GLOBAL ROUTINE WRITE_BINARY (BUFFER, RAB) =

!----
!
! Functional description
!
!	This routine accepts a pointer to a buffer and writes
!	the buffer to an output stream in binary format.
!
! Input parameters
!
!	BUFFER = address of an input record buffer
!	         the size of the record is stored in the second
!		 word of the buffer
!
!	RAB =    address of output rab
!
!----

BEGIN

MAP
   rab:		ref bblock,		! Pointer to rab
   buffer: 	ref bblock;		! Describe the input buffer

LOCAL
	desc:	vector [2, long];	! Temporary string descriptor


If .rab eql 0 then return true;		! Exit immediately if no output

!
!INITIALIZE THE RAB
!	Store the buffer address and length in the RAB.
!

rab [rab$l_rbf] = .buffer;			! Store buffer address in RAB
rab [rab$w_rsz] = .buffer [acc$w_msgsiz];	! Store buffer size in RAB



!
!WRITE TO FILE ---
!	Output the buffer via RMS.
!

Perform  ($put (			! Call RMS with
		rab = .rab,		!  -record stream identifier
		err = log_filename));	!  -error action routine

return true;
END;

UNDECLARE STRIP_NEGATOR;

GLOBAL ROUTINE STRIP_NEGATOR (TARGET) =

!----
!
! Functional description
!
!	This routine is called to strip list negators.  If the first
!	character of the string pointed to by the descriptor is the 
!	negator character then strip that character from the string and
!	return TRUE else return FALSE.
!
! Input parameters
!
!	TARGET = Address of a descriptor
!
! Output parameters
!
!	If the item is negated return FALSE
!	Else return TRUE
!	Any errors encountered are RETURNed immediately.
!
!----

BEGIN


MAP
	target: ref bblock [dsc$k_d_bln];! Describe t¨e input parameter


!
!TEST FIRST CHARACTER --
!	If its t¨e negator character then strip the character and
!	return false.
!

If  .target [dsc$w_length] neq 0		! If string is non-null
and lib$ichar (.target) eql negator		! - and char[1] = negator
then BEGIN
     str$right (.target, .target, %ref(2));	! - then strip it off
     return false;				! - and tell the user
     END;

return true;
END;

UNDECLARE STRIP_TRAIL;

GLOBAL ROUTINE STRIP_TRAIL (DESC) =

!----
!
! Functional description
!
!	This routine is called to strip garbage from the end of a string.
!
! Input parameters
!
!	DESC	= address of a descriptor of the string
!
! Output parameters
!
!	The byte count in the descriptor is decremented by the
!	number of bytes of trailing garbage.  Garbage is defined
!	as NULLS, TABS, and SPACES.
!
!----

BEGIN

MAP
	desc:	ref bblock [dsc$k_d_bln];	! Address of a descriptor

decr ptr from (.desc [dsc$a_pointer] + .desc [dsc$w_length] - 1)
	  to   (.desc [dsc$a_pointer])
do
	if .(.ptr)<0,8> eql 0			! NULLS
	or .(.ptr)<0,8> eql '	'		! TABS
	or .(.ptr)<0,8> eql ' '			! SPACES
	then desc [dsc$w_length] = .desc [dsc$w_length] - 1
	else exitloop;
	

return true;

END;

UNDECLARE TRANSLATE_STATUS;

GLOBAL ROUTINE TRANSLATE_STATUS (EXIT_STATUS,DESCRIP) =

!++
!
! Functional description:
!
!	This routine will return the text associated with a given exit status.
!	If the status code has no text associated with it, return a routine
!	status value of SS$_MSGNOTFND, and the text "<no text>" in DESCRIP.
!
! Input:
!
!	EXIT_STATUS	- a longword containing the exit status
!
! Output:
!
!	DESCRIP		- address of a quadword descriptor that points to the
!			  buffer to receive the message text.  Note that the
!			  size field of the descriptor will reflect the actual
!			  message length.
!
!--

BEGIN

MAP
	exit_status	: REF bblock [LONG],
	descrip		: REF BBLOCK [dsc$c_s_bln];

OWN
	invalid_pwd	: initdesc ('%LOGIN-E-INVPWD, invalid password'),
	invalid_usr	: initdesc ('%LOGIN-E-NOSUCHUSER, no such user'),
	no_text_msg	: initdesc ('<no text>');

LOCAL
	status		: bblock [LONG];	

!
!TRANSLATE THE EXIT STATUS ---
!

status= ($getmsg (			! Call message translator with
	msgid  = .exit_status,		!  -message code
	msglen = descrip [dsc$w_length],!  -$GETMSG returns length here
	bufadr = .descrip));		!  -address of work buffer desc

!
! CATCH LOGIN FAILURES --
!	The exit status from login failures is often wrong.
!	FFFFFFFC is issued when a password failure occurs and
!	FFFFFFFE is issued when a user name lookup failure occurs
!

IF .exit_status EQL %X'FFFFFFFC'
THEN
    BEGIN
    CH$MOVE ( .invalid_pwd [dsc$w_length],	! Length
	      .invalid_pwd [dsc$a_pointer],	! Source address
	      .descrip [dsc$a_pointer]		! Destination address
	    );
    descrip [dsc$w_length] = .invalid_pwd [dsc$w_length];
    RETURN ss$_normal;
    END
ELSE
    IF .exit_status EQL %X'FFFFFFFE'
    THEN
	BEGIN
	CH$MOVE ( .invalid_usr [dsc$w_length],	! Length
		  .invalid_usr [dsc$a_pointer],	! Source address
		  .descrip [dsc$a_pointer]	! Destination address
		);
	descrip [dsc$w_length] = .invalid_usr [dsc$w_length];
	RETURN ss$_normal;
	END;

!
! If none of the above applies, and the status code returned by $GETMSG
! was SS$_MSGNOTFND, then return the 'no text' message.
!

IF .status EQL ss$_msgnotfnd
THEN
    BEGIN
    CH$MOVE ( .no_text_msg [dsc$w_length],	! Length
	      .no_text_msg [dsc$a_pointer],	! Source address
	      .descrip [dsc$a_pointer]		! Destination address
	    );
    descrip [dsc$w_length] = .no_text_msg [dsc$w_length];
    END;

RETURN .status
END;

UNDECLARE LOG_FILENAME;

GLOBAL ROUTINE LOG_FILENAME (RMS) =

!----
!
! Functional description
!
!	This routine is called to signal a message to
!	the user based on an error code and file name
!	that are imbedded in the passed parameter.
!
! Input parameters
!
!	RMS = Either a FAB or a RAB
!	RAB$L_FAB = pointer to fab block	(If input was a RAB)
!	FAB$L_NAM = pointer to name block
!	RAB$L_CTX = error message to be used	(If input was a RAB)
!	FAB$L_CTX = error message to be used	(If input was a FAB)
!	
!
! Output parameters
!
!	Expanded error messages to user
!	Status is RETURNed
!
!----

BEGIN

MAP
   rms:	 ref bblock;				! Define block format


LOCAL
	fab: ref bblock,		! Pointer to FAB block
	nam: ref bblock,		! Pointer to NAM block
	rms_sts,			! Temporary primary status holder
	rms_stv,			! Temporary secondary status holder
	rms_ctx,			! Temporary user context holder
	status:	bblock [long],		! Local "catch all" status return
	desc:	vector [2, long];	! Temporary string descriptor


!
!SET UP VALUES --
!	Fetch the primary and secondary status values and the user
!	context field from the RMS structure.  If a RAB was passed
!	then fetch the address of the associated FAB.
!

If .rms [rab$b_bid] eql rab$c_bid then	! If this is a rab
	BEGIN
	fab = .rms [rab$l_fab];
	rms_sts = .rms [rab$l_sts];
	rms_stv = .rms [rab$l_stv];
	rms_ctx = .rms [rab$l_ctx];
	END
   else BEGIN
	fab = .rms;
	rms_sts = .rms [fab$l_sts];
	rms_stv = .rms [fab$l_stv];
	rms_ctx = .rms [fab$l_ctx];
	END;

nam = .fab [fab$l_nam];			! Fetch address of NAM block



!
!CHECK FOR EOF --
!	End of file errors are not reported by this routine.
!

If  .rms [rab$b_bid] eql rab$c_bid	! If this is a rab
and .rms_sts eql rms$_eof		!  - and error is end of file
and .rms_ctx eql msg$_readerr		!  - and this was a read call
    then return rms$_eof;		! don't bother to report it



!
!FETCH FILE NAME --
!	Find the best filename available.  Start with the
!	resultant name; if not present try for the expanded
!	name; if also missing then settle for the original
!	file name.
!

If .nam[nam$b_rsl] neq 0 then		! IF result string nonblank,
    BEGIN
    desc[0] = .nam[nam$b_rsl];		! then display it
    desc[1] = .nam[nam$l_rsa];
    END

else if .nam[nam$b_esl] neq 0 then	! Or if expanded name nonblank
    BEGIN
    desc[0] = .nam[nam$b_esl];		! then display it
    desc[1] = .nam[nam$l_esa];
    END

else BEGIN
    desc[0] = .fab[fab$b_fns];		! Otherwise, use original
    desc[1] = .fab[fab$l_fna];		! name string in FAB
    END;



!
!NOTIFY THE USER --
!	Construct an error message using the user supplied context (CTX)
!	field and the RMS supplied primary (STS) and secondary (STV)
!	status fields.  Signal it to the user.
!

signal (.rms_ctx, 1 ,desc,		! Output an error message
		.rms_sts,		! with RMS error code
		.rms_stv);		! and secondary code


return .rms_sts;			! Pass on the status

END;

UNDECLARE MAP_QUALIFIERS;

GLOBAL ROUTINE MAP_QUALIFIERS  =

!----
!
! Functional description
!
!	This routine searches all possible qualifiers and makes
!	a bit mask of those that are present
!
! Input parameters
!
!	None
!
! Output parameters
!
!	The mask is established
!	Always returns success
!
!----

BEGIN

GLOBAL
	qualifiers: bitvector [64];		! global storage for mask

OWN
	qual_array: vector [qual_count * 2] initial (
			primdesc (ACCOUNT),
			primdesc (ACCOUNT),
!			primdesc (BAR_GRAPH),
			primdesc (BEFORE),
			primdesc (BINARY),
			primdesc (USER),
			primdesc (ENTRY),
			primdesc (FULL),
			primdesc (IDENT),
			primdesc (IMAGE),
			primdesc (JOB),
			primdesc (LOG),
			primdesc (ADDRESS),
			primdesc (NODE),
			primdesc (OWNER),
			primdesc (OUTPUT),
			primdesc (PRIORITY),
			primdesc (PROCESS),
			primdesc (QUEUE),
			primdesc (REJECTED),
			primdesc (REMOTE_ID),
			primdesc (REPORT),
			primdesc (SINCE),
			primdesc (STATUS),
			primdesc (SORT),
			primdesc (SUMMARY),
			primdesc (TERMINAL),
			primdesc (TITLE),
			primdesc (TYPE),
			primdesc (UIC)
			);

!
! Establish a bit mask of qualifiers that are present
!

Incra i to qual_count - 1 do qualifiers [.i] = get_present (qual_array [.i*2]);
qualifiers [bar_graph] = 0;	
return true;
END;

UNDECLARE HANDLER;

GLOBAL ROUTINE HANDLER (SIGNAL_ARGS, MECHANISM_ARGS) =

!---
!
!	This condition handler gets control on any signalled
!	condition in order to save the highest severity error
!	to be returned by exit from the image.
!
! Inputs:
!
!	signal_args = Address of signal argument list
!	mechanism_args = Address of mechanism argument list
!
! Outputs:
!
!	WORST_ERROR is updated with highest severity error.
!
!---

BEGIN

GLOBAL worst_error: initial (1);	! Holds worst error encountered

MAP
    signal_args:	ref bblock,	! Address of signal argument list
    mechanism_args:	ref bblock;	! Address of mechanism argument list

LOCAL
    code:		bblock [long];	! Condition code (longword)


If	.signal_args [chf$l_sig_name] eql rms$_eof then return true;
code =	.signal_args [chf$l_sig_name];		! Get condition code
If   severity_level (.code) gtr 
     severity_level (.worst_error)		! If higher than watermark
then worst_error = .code or sts$m_inhib_msg;	!  -then set new worst error

ss$_resignal					! Continue signalling

END;

END
ELUDOM
