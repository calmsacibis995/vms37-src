	.TITLE	CNVACC	-- CONVERT ACCOUNTING TO PRE-V3.0 FORMAT
	.IDENT	'V03-002'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************

;++
; FACILITY: ACC
;
; ABSTRACT:
;
; ENVIRONMENT:	USER MODE, IPL 0
;
;--

.SUBTITLE	History
;
; Author:	Steve Forgey	 CREATION DATE: 	01-Sep-1981
;
; Modified by:
;
;	V03-002	SPF0110		Steve Forgey		09-Apr-1982
;		Make output operations synchronous to avoid buffer
;		overwrite.
;
;	V03-001	SPF0100		Steve Forgey		27-Mar-1982
;		Accept Version 3 field test 1 accounting records.
;
;	V02-005	SPF0063		Steve Forgey		18-Jan-1982
;		Remove extra byte count from converted user message.
;
;	V02-004	SPF0046		Steve Forgey		07-Oct-1981
;		Fix access violation in CASE limit operand.
;
;	V02-003	SPF0043		Steve Forgey		01-Oct-1981
;		Check version field in ACC$W_TYPE.
;
;	V02-002	SPF0042		Steve Forgey		28-Sep-1981
;		Check for FILE_BL record type to determine if V3 format.
;
.PAGE
.SUBTITLE	Definitions and declarations

;------------------------------------------------------------------------------
;
; Macro library declarations
;
;------------------------------------------------------------------------------
	$ACCDEF			; Pre-Version 3 accounting record definitions
	$ACRDEF			; Version 3 accounting record definitions
	$JBCMSGDEF		; Job controller message definitions
	$NAMDEF			; Name block definitions
	$RMSDEF			; RMS definitions
	$SSDEF			; System status definitions
	$TPADEF			; TPARSE definitions
.PAGE
.SUBTITLE	Read-only data
.PSECT		$CNVACC_RO_DATA,NOEXE,NOWRT,PAGE

;------------------------------------------------------------------------------
;
; Input file command prompt
;
;------------------------------------------------------------------------------
INPUT_PROMPT:
	.ASCID	/Input file (def = ACCOUNTNG.DAT): /

;------------------------------------------------------------------------------
;
; Output file command prompt
;
;------------------------------------------------------------------------------
OUTPUT_PROMPT:
	.ASCID	/Output file (def = ACCOUNTNG.OLD): /
.PAGE
.SUBTITLE	Read-write data
.PSECT		$CNVACC_RW_DATA,NOEXE,WRT,PAGE

.SUBTITLE	.	TPARSE state tables

;------------------------------------------------------------------------------
;
; TPARSE parameter block
;
;------------------------------------------------------------------------------
TPARSE_BLOCK:
	.LONG	TPA$K_COUNT0
	.LONG	TPA$M_BLANKS
	.BLKL	TPA$K_LENGTH0
;------------------------------------------------------------------------------
;
; TPARSE state tables
;
;------------------------------------------------------------------------------
	$INIT_STATE	CNVACC_STATE,CNVACC_KEY
;
; Find first blank
;
	$STATE
	$TRAN	!FILESPEC,,,,INPUT_SPEC
	$STATE
	$TRAN	!FILESPEC,TPA$_EXIT,,,OUTPUT_SPEC
	$STATE	FILESPEC
	$TRAN	TPA$_BLANK,TPA$_EXIT
	$TRAN	TPA$_ANY,FILESPEC
	$TRAN	TPA$_EOS,TPA$_EXIT
	$END_STATE
.PAGE
.SUBTITLE	.	Input file RMS data structures

;------------------------------------------------------------------------------
;
; Input file access block
;
;------------------------------------------------------------------------------
INPUT_FAB:
	$FAB -
		DNM=<ACCOUNTNG.DAT> -	; Default file name
		FAC=GET, -		; File access is read
		FNA=INPUT_SPEC+8 -	; User specified file name address
		NAM=INPUT_NAM -		; Name block address
		SHR=<PUT,UPI>		; Allow uninterlocked sharing
		
;------------------------------------------------------------------------------
;
; Input name block
;
;------------------------------------------------------------------------------
INPUT_NAM:
	$NAM -
		ESA=EXPINPNAME -	; Expanded file name address
		ESS=NAM$C_MAXRSS -	; Expanded file name size
		RSA=RESINPNAME -	; Resultant file name address
		RSS=NAM$C_MAXRSS	; Resultant file name size

;------------------------------------------------------------------------------
;
; Input expanded file name buffer
;
;------------------------------------------------------------------------------
EXPINPNAME:
	.BLKB	NAM$C_MAXRSS

;------------------------------------------------------------------------------
;
; Input resultant file name buffer
;
;------------------------------------------------------------------------------
RESINPNAME:
	.BLKB	NAM$C_MAXRSS

;------------------------------------------------------------------------------
;
; Input record access block
;
;------------------------------------------------------------------------------
INPUT_RAB:
	$RAB -
		FAB=INPUT_FAB -		; Input file access block
		MBC=16 -		; Multi-block count
		MBF=2 -			; Multi-buffer count
		RAC=SEQ	-		; Sequential record access
		ROP=<RAH> -		; Read ahead option
		UBF=INPUT_RECORD -	; Input buffer address
		USZ=1024		; Input buffer size
.PAGE
.SUBTITLE	.	Output file RMS data structues

;------------------------------------------------------------------------------
;
; Output file access block
;
;------------------------------------------------------------------------------
OUTPUT_FAB:
	$FAB -
		ALQ=22 -		; Initial allocation quantity
		DEQ=22 -		; Default extension quantity
		DNM=<ACCOUNTNG.OLD> -	; Default file name
		FAC=PUT -		; Write access
		FNA=OUTPUT_SPEC+8 -	; User specified file name address
		FOP=<TEF> -		; Truncate to end-of-file on $CLOSE
		NAM=OUTPUT_NAM -	; Name block
		ORG=SEQ -		; Sequential file organization
		RFM=VAR			; Variable length record format
		
;------------------------------------------------------------------------------
;
; Output name block
;
;------------------------------------------------------------------------------
OUTPUT_NAM:
	$NAM -
		ESA=EXPOUTNAME -	; Expanded file name address
		ESS=NAM$C_MAXRSS -	; Expanded file name size
		RSA=RESOUTNAME -	; Resultant file name address
		RSS=NAM$C_MAXRSS	; Resultant file name size

;------------------------------------------------------------------------------
;
; Output expanded file name buffer
;
;------------------------------------------------------------------------------
EXPOUTNAME:
	.BLKB	NAM$C_MAXRSS

;------------------------------------------------------------------------------
;
; Output resultant file name buffer
;
;------------------------------------------------------------------------------
RESOUTNAME:
	.BLKB	NAM$C_MAXRSS

;------------------------------------------------------------------------------
;
; Output record access block
;
;------------------------------------------------------------------------------
OUTPUT_RAB:
	$RAB -
		FAB=OUTPUT_FAB -	; Output file access block
		MBC=16 -		; Multi-block count
		MBF=2 -			; Multi-buffer count
		RAC=SEQ -		; Sequential record access mode
		RBF=OUTPUT_RECORD -	; Output record buffer address
		ROP=<WBH>		; Write behind option
.PAGE
.SUBTITLE	.	I/O buffers

;------------------------------------------------------------------------------
;
; I/O length (returned from RTL routines)
;
;------------------------------------------------------------------------------
IO_LENGTH:
	.LONG	0

;------------------------------------------------------------------------------
;
; Command line buffer and descriptor
;
;------------------------------------------------------------------------------
COMMAND:
	.LONG	NAM$C_MAXRSS*2		; Command line buffer descriptor
	.ADDRESS	10$
10$:	.BLKB	NAM$C_MAXRSS*2		; Command line buffer

;------------------------------------------------------------------------------
;
; User input file specification buffer and descriptor
;
;------------------------------------------------------------------------------
INPUT_SPEC:
	.BLKL	2			; Input file specification descriptor
10$:	.BLKB	NAM$C_MAXRSS		; Input file specification buffer

;------------------------------------------------------------------------------
;
; Output file specification buffer and descriptor
;
;------------------------------------------------------------------------------
OUTPUT_SPEC:
	.BLKL	2			; Output file specification descriptor
10$:	.BLKB	NAM$C_MAXRSS		; Output file specification buffer

;------------------------------------------------------------------------------
;
; Input record
;
;------------------------------------------------------------------------------
INPUT_RECORD:				; Input record buffer
	.BLKB	1024

INPUT_COUNT:	.LONG	0		; Input record counter
INPUT_VERSION2:	.LONG	0		; Version 2 record counter
INPUT_CUSTOMER:	.LONG	0		; Customer record counter
INPUT_UNKNOWN:	.LONG	0		; Unknown record counter
INPUT_ILLEGAL:	.LONG	0		; Illegal record counter


;------------------------------------------------------------------------------
;
; Output record
;
;------------------------------------------------------------------------------
OUTPUT_RECORD:				; Output record buffer
	.BLKB	ACC$K_INS_LEN

OUTPUT_COUNT:				; Output record counter
	.LONG	0
.PAGE
.PSECT		$CNVACC_RO_CODE,EXE,NOWRT,PAGE
.SUBTITLE	$CNVACC - Main control routine

;------------------------------------------------------------------------------
;
; CNVACC main entry point
;
;------------------------------------------------------------------------------
.ENTRY	$CNVACC,^M<>			; Convert V3 accounting to V2 format
	CLRL	R2			; Clear RMS control block address
	BSBW	GET_COMMAND		; Get file specifications
	BLBC	R0,20$			; If LBC, error getting commands
	BSBW	OPEN_FILES		; Open input and create output files
	BLBC	R0,20$			; If LBC, error opening files
	CLRL	INPUT_COUNT		; Initialize input record counter
	CLRL	INPUT_UNKNOWN		; Initialize unknown input record counter
	CLRL	INPUT_CUSTOMER		; Initialize customer input record counter
	CLRL	INPUT_ILLEGAL		; Initialize illegal input record counter
	CLRL	OUTPUT_COUNT		; Initialize output record counter
10$:
	BSBW	GET_RECORD		; Get next input record
	BLBS	R0,30$			; If LBS, successful read of record
	CMPL	#RMS$_EOF,R0		; End of file ?
	BEQL	25$			; If EQL, end of input file
20$:
	BRW	ERROR			; Report error
25$:
	BSBW	CLOSE_FILES		; Close input and output files
	$EXIT_S
30$:
	EXTZV	#ACR$V_TYPE,#ACR$S_TYPE,INPUT_RECORD+ACR$W_TYPE,R0; Record type
	PUSHAL	50$			; Return address
	CASE	R0,LIMIT=#ACR$K_PRCDEL, -; Dispatch on record type
		< -
		PROCESS_DELETE, -
		PROCESS_PURGE, -
		IMAGE_DELETE, -
		IMAGE_PURGE, -
		SYSINIT, -
		SETTIME, -
		LOGIN_FAILURE, -
		PRINT, -
		USER_MESSAGE, -
		ENABLE, -
		DISABLE, -
		ALTERNATE_ACM, -
		FILE_FL, -
		FILE_BL, -
		>
	INCL	INPUT_UNKNOWN		; Count unknown records
40$:	BRW	10$
50$:
	BLBC	R0,40$			; If LBC, no output record created
	BSBW	PUT_RECORD		; Output tranlated record
	BLBC	R0,20$			; If LBC, output error
	BRW	10$
.PAGE
.SUBTITLE	.	Get user command routines


GET_COMMAND:
;------------------------------------------------------------------------------
;
; Get foreign command line (if any)
;
;------------------------------------------------------------------------------
	PUSHAL	IO_LENGTH		; Command length (returned by RTL)
	CLRL	-(SP)			; No prompt string
	PUSHAB	COMMAND			; Command buffer descriptor
	CALLS	#3,G^LIB$GET_FOREIGN	; Get the command line
	BLBC	R0,10$			; If LBS, LIB$GET_FOREIGN successful
	MOVZWL	IO_LENGTH,R1		; Command line length
	BNEQ	20$			; If NEQ, command line present
	BSBW	GET_INPUT_SPEC		; Prompt user for input file spec
	BLBC	R0,10$			; If LBC, I/O error
	$FAB_STORE	FAB=INPUT_FAB,FNA=@INPUT_SPEC+4
	$FAB_STORE	FAB=INPUT_FAB,FNS=INPUT_SPEC
	BSBW	GET_OUTPUT_SPEC		; Prompt user for output file spec
	BLBC	R0,10$			; If LBC, I/O error
	$FAB_STORE	FAB=OUTPUT_FAB,FNA=@OUTPUT_SPEC+4
	$FAB_STORE	FAB=OUTPUT_FAB,FNS=OUTPUT_SPEC
	CLRL	R2
	MOVL	#SS$_NORMAL,R0
10$:
	RSB
20$:
	MOVAB	TPARSE_BLOCK,R2		; TPARSE block address
	MOVL	R1,TPA$L_STRINGCNT(R2)	; Command string length
	MOVL	COMMAND+4,TPA$L_STRINGPTR(R2); Command string address
	PUSHAL	CNVACC_KEY		; Initial key table
	PUSHAL	CNVACC_STATE		; Initial state table
	PUSHAL	TPARSE_BLOCK		; TPARSE parameter block address
	CALLS	#3,G^LIB$TPARSE		; Parse command
	TSTL	INPUT_SPEC		; Input file specified ?
	BNEQ	30$			; If NEQ, yes
	BSBB	GET_INPUT_SPEC		; Prompt user for input file spec
	BLBC	R0,50$			; If LBC, input failed
30$:
	$FAB_STORE	FAB=INPUT_FAB,FNA=@INPUT_SPEC+4
	$FAB_STORE	FAB=INPUT_FAB,FNS=INPUT_SPEC
	TSTL	OUTPUT_SPEC		; Output file specified ?
	BNEQ	40$			; If NEQ, yes
	BSBB	GET_OUTPUT_SPEC		; Prompt user for output file spec
	BLBC	R0,50$			; If LBC, input failed
40$:
	$FAB_STORE	FAB=OUTPUT_FAB,FNA=@OUTPUT_SPEC+4
	$FAB_STORE	FAB=OUTPUT_FAB,FNS=OUTPUT_SPEC
	CLRL	R2
	MOVL	#SS$_NORMAL,R0
50$:
	RSB

;------------------------------------------------------------------------------
;
; Prompt user for input file specification
;
;------------------------------------------------------------------------------
GET_INPUT_SPEC:
	MOVL	#NAM$C_MAXRSS,INPUT_SPEC; Set up input spec descriptor
	MOVAB	INPUT_SPEC+8,INPUT_SPEC+4
	PUSHAL	INPUT_SPEC		; Input spec length (returned by RTL)
	PUSHAL	INPUT_PROMPT		; Input spec prompt
	PUSHAL	INPUT_SPEC		; Input spec buffer descriptor
	CALLS	#3,G^LIB$GET_INPUT	; Get input file spec from user
	RSB

;------------------------------------------------------------------------------
;
; Prompt user for output file specification
;
;------------------------------------------------------------------------------
GET_OUTPUT_SPEC:
	MOVL	#NAM$C_MAXRSS,OUTPUT_SPEC; Set up input spec descriptor
	MOVAB	OUTPUT_SPEC+8,OUTPUT_SPEC+4
	PUSHAL	OUTPUT_SPEC		; Output spec length (returned by RTL)
	PUSHAL	OUTPUT_PROMPT		; Output spec prompt
	PUSHAL	OUTPUT_SPEC		; Output spec buffer descriptor
	CALLS	#3,G^LIB$GET_INPUT	; Get output file spec from user
	RSB
.PAGE
.SUBTITLE	.	File manipulation routines

OPEN_FILES:
;------------------------------------------------------------------------------
;
; Open input file and connect record access stream
;
;------------------------------------------------------------------------------
	MOVAB	INPUT_FAB,R2		; Input file access block address
	$OPEN	FAB=(R2)		; Open input file for read
	BLBC	R0,10$			; If LBC, $OPEN failed
	MOVAB	INPUT_RAB,R2		; Input record access block address
	$CONNECT	RAB=(R2)	; Connect file to record access stream
	BLBC	R0,10$			; If LBC, $CONNECT failed
;------------------------------------------------------------------------------
;
; Create output file and connect record access stream
;
;------------------------------------------------------------------------------
	MOVAB	OUTPUT_FAB,R2		; Output file access block address
	$CREATE	FAB=(R2)		; Create and open output file for write
	BLBC	R0,10$			; If LBC, $CREATE failed
	MOVAB	OUTPUT_RAB,R2		; Output record access block address
	$CONNECT	RAB=(R2)	; Connect file to record access stream
10$:
	RSB

CLOSE_FILES:
;------------------------------------------------------------------------------
;
; Disconnect record access stream and close output file
;
;------------------------------------------------------------------------------
	MOVAB	OUTPUT_RAB,R2		; Output record access block address
	$DISCONNECT	RAB=(R2)	; Disconnect output record access stream
	MOVAB	OUTPUT_FAB,R2		; Output file access block address
	$CLOSE	FAB=(R2)		; Close output file
;------------------------------------------------------------------------------
;
; Disconnect record access stream and close input file
;
;------------------------------------------------------------------------------
	MOVAB	INPUT_RAB,R2		; Input record access block address
	$DISCONNECT	RAB=(R2)	; Disconnect input record access stream
	MOVAB	INPUT_FAB,R2		; Input file access block address
	$CLOSE	FAB=(R2)		; Close input file
	RSB
.PAGE
.SUBTITLE	.	Record manipulation routines

GET_RECORD:
;------------------------------------------------------------------------------
;
; Get next record from input file
;
;------------------------------------------------------------------------------
	MOVAB	INPUT_RAB,R2		; Input record access block address
	$GET	RAB=(R2)		; Get next record
	BLBC	R0,10$			; If LBC, $GET failed
	CLRL	R2			; Clear RMS control block address
	INCL	INPUT_COUNT		; Update input record counter
	CMPZV	#ACR$V_VERSION,#ACR$S_VERSION,INPUT_RECORD+ACR$W_TYPE, -
		#ACR$K_VERSION2
	BEQL	50$			; If EQL, Version 2 record
	CMPZV	#ACR$V_VERSION,#ACR$S_VERSION,INPUT_RECORD+ACR$W_TYPE, -
		#ACR$K_VERSION3
	BEQL	5$			; If EQL, Version 3 record
	CMPZV	#ACR$V_VERSION,#ACR$S_VERSION,INPUT_RECORD+ACR$W_TYPE, -
		#ACR$K_VERSION3T
	BNEQ	60$			; If NEQ, not an accounting file
5$:	BBS	#ACR$V_PACKET,INPUT_RECORD+ACR$W_TYPE,30$; If packet bit set, illegal record
	BBS	#ACR$V_CUSTOMER,INPUT_RECORD+ACR$W_TYPE,40$; If customer bit set, skip this recorT
10$:
	RSB
30$:
	INCL	INPUT_ILLEGAL		; Count illegal records
	BRB	GET_RECORD
40$:
	INCL	INPUT_CUSTOMER		; Count customer records
	BRB	GET_RECORD
50$:
	CMPW	#ACC$K_INS_LEN,INPUT_RECORD+ACC$W_MSGSIZ; Legal record size
	BLSSU	30$			; If LSSU, no
	INCL	INPUT_VERSION2		; Count Version 2 records
	MOVC3	INPUT_RECORD+ACC$W_MSGSIZ, -; Copy record to output buffer
		INPUT_RECORD+ACC$W_MSGTYP, -
		OUTPUT_RECORD+ACC$W_MSGTYP
	BSBB	PUT_RECORD		; Output record
	BLBC	R0,10$			; If LBC, error
	BRW	GET_RECORD
60$:
	MOVL	#ACC_NOTACC,R0		; Not an accounting file
	RSB

PUT_RECORD:
;------------------------------------------------------------------------------
;
; Put next record to output file
;
;------------------------------------------------------------------------------
	MOVAB	OUTPUT_RAB,R2		; Output record access block address
	$RAB_STORE	RAB=(R2),RSZ=OUTPUT_RECORD+ACC$W_MSGSIZ; Record length
	$PUT	RAB=(R2)		; Write record to output file
	BLBC	R0,10$			; If LBC, $GET failed
	CLRL	R2			; Clear RMS control block address
	INCL	OUTPUT_COUNT		; Count the output records
10$:
	RSB
.PAGE
.SUBTITLE	.	Output record formatting routines

SYSINIT:				; Fake a detached process type
	INSV	#ACR$K_DETACHED,#ACR$V_SUBTYPE,#ACR$S_SUBTYPE, -
		INPUT_RECORD+ACR$W_TYPE
LOGIN_FAILURE:
PROCESS_DELETE:
	MOVAB	W^INPUT_RECORD,R6	; Version 3 record address
	MOVAB	W^OUTPUT_RECORD,R7	; Pre-Version 3 record buffer address
	BSBW	HEADER			; Build	common record header
	BSBW	JOB			; Build job information
	MOVW	#ACC$K_LOGTRM,ACC$W_MSGTYP(R7); Assume login failure
	MOVW	#ACC$K_TERMLEN,ACC$W_MSGSIZ(R7)
	CMPZV	#ACR$V_TYPE,#ACR$S_TYPE,ACR$W_TYPE(R6),#ACR$K_LOGFAIL; Login failure ?
	BEQL	40$			; If EQL, login failure
	EXTZV	#ACR$V_SUBTYPE,#ACR$S_SUBTYPE,ACR$W_TYPE(R6),R0; Process type
	CASE	R0,LIMIT=#ACR$K_INTERACTIVE -; Dispatch on process type
		< -
		10$, -			; Interactive process
		20$, -			; Subprocess
		20$, -			; Detached process
		30$, -			; Batch process
		20$, -			; Network process
		>
	CLRL	R0			; Illegal process type
	RSB
10$:
	MOVW	#ACC$K_INTTRM,ACC$W_MSGTYP(R7); Interactive termination type
	BRB	40$
20$:
	MOVW	#ACC$K_PRCTRM,ACC$W_MSGTYP(R7); Process termination type
	BRB	40$
30$:
	BSBW	BATCH			; Build batch information
	MOVW	#ACC$K_BATTRM,ACC$W_MSGTYP(R7); Batch termination type
	MOVW	#ACC$K_JOB_LEN,ACC$W_MSGSIZ(R7); Batch termination length
	BRB	40$
40$:
	MOVL	#SS$_NORMAL,R0		; Successful status
	RSB
.PAGE
PRINT:
	MOVAB	W^INPUT_RECORD,R6	; Version 3 record address
	MOVAB	W^OUTPUT_RECORD,R7	; Pre-Version 3 record buffer address
	BSBW	HEADER			; Build	common record header
	BSBW	PRINT_JOB		; Build print information
	MOVW	#ACC$K_PRTJOB,ACC$W_MSGTYP(R7); Print job type
	MOVW	#ACC$K_PRT_LEN,ACC$W_MSGSIZ(R7); Print job length
	MOVL	#SS$_NORMAL,R0		; Successful status
	RSB
.PAGE
USER_MESSAGE:
	MOVAB	W^INPUT_RECORD,R6	; Version 3 record address
	MOVAB	W^OUTPUT_RECORD,R7	; Pre-Version 3 record buffer address
	BSBW	HEADER			; Build	common record header
	BSBW	USER			; Build user data
	MOVL	#SS$_NORMAL,R0		; Successful status
	RSB
.PAGE
PROCESS_PURGE:
IMAGE_DELETE:
IMAGE_PURGE:
SETTIME:
ENABLE:
DISABLE:
ALTERNATE_ACM:
FILE_BL:
FILE_FL:
	CLRL	R0			; Indicate no output record created
	RSB
.PAGE
;------------------------------------------------------------------------------
;
; Build pre-Version 3 accounting record header
;
; Inputs:
;	INPUT_RECORD is address of Version 3 record
;	OUTPUT_RECORD is address of pre-Version 3 record buffer
;
;------------------------------------------------------------------------------
HEADER:
	PUSHR	#^M<R0,R1,R2,R3,R4,R5,R6,R7,R8>
	MOVAB	W^INPUT_RECORD,R6	; Version 3 record address
	MOVAB	W^OUTPUT_RECORD,R7	; Pre-Version 3 record address
	ADDL3	#ACR$K_HDRLEN,R6,R8	; ID packet address
	BBC	#ACR$V_PACKET,ACR$W_TYPE(R8),40$; Exit if not a packet
	CMPZV	#ACR$V_TYPE,#ACR$S_TYPE,ACR$W_TYPE(R8),#ACR$K_ID
	BNEQ	40$			; Exit if not an ID packet
	MOVL	#JBC$_NORMAL,ACC$L_FINALSTS(R7)   ; FOR USER MESSAGES
	MOVL	ACR$L_PID(R8),ACC$L_PID(R7); Process ID
	MOVL	ACR$L_JOBID(R8),ACC$L_JOBID(R7); Job ID
	MOVQ	ACR$Q_SYSTIME(R6),ACC$Q_TERMTIME(R7); System time
	MOVZWL	ACR$W_ACCOUNT(R8),R0	; Account name offset
	BNEQ	10$			; If NEQ, name present
	CMPZV	#ACR$V_TYPE,#ACR$S_TYPE,ACR$W_TYPE(R6),#ACR$K_SYSINIT; Sysinit?
	BNEQ	5$			; If NEQ, no
	CLRQ	ACC$T_ACCOUNT(R7)	; Zeroed string
	BRB	20$
5$:
	MOVC5	#0,ACC$T_ACCOUNT(R7),#^A/ /,#8,ACC$T_ACCOUNT(R7); Blank string
	BRB	20$
10$:
	MOVAB	(R8)[R0],R0		; String address
	MOVZBL	(R0)+,R1		; String length
	MOVC5	R1,(R0),#^A/ /,#8,ACC$T_ACCOUNT(R7)
20$:
	MOVZWL	ACR$W_USERNAME(R8),R0	; User name offset
	BNEQ	30$			; If NEQ, name present
	MOVC5	#0,ACC$T_USERNAME(R7),#^A/ /,#12,ACC$T_USERNAME(R7); Blank string
	BRB	40$
30$:
	MOVAB	(R8)[R0],R0		; String address
	MOVZBL	(R0)+,R1		; String length
	MOVC5	R1,(R0),#^A/ /,#12,ACC$T_USERNAME(R7)
40$:
	POPR	#^M<R0,R1,R2,R3,R4,R5,R6,R7,R8>
	RSB
.PAGE
;------------------------------------------------------------------------------
;
; Build pre-Version 3 accounting job information
;
; Inputs:
;	INPUT_RECORD is address of Version 3 record
;	OUTPUT_RECORD is address of pre-Version 3 record buffer
;
;------------------------------------------------------------------------------
JOB:
	PUSHR	#^M<R0,R1,R2,R3,R4,R5,R6,R7,R8>
	MOVAB	W^INPUT_RECORD,R6	; Version 3 record address
	MOVAB	W^OUTPUT_RECORD,R7	; Pre-Version 3 record address
	ADDL3	#ACR$K_HDRLEN,R6,R8	; ID packet address
	BBC	#ACR$V_PACKET,ACR$W_TYPE(R8),10$; Exit if not a packet
	CMPZV	#ACR$V_TYPE,#ACR$S_TYPE,ACR$W_TYPE(R8),#ACR$K_ID
	BNEQ	10$			; Exit if not an ID packet
	MOVL	ACR$L_OWNER(R8),ACC$L_OWNER(R7); Owner process ID
	MOVZWL	ACR$W_LENGTH(R8),R0	; ID packet length
	ADDL2	R0,R8			; Resource packet address
	BBC	#ACR$V_PACKET,ACR$W_TYPE(R8),10$; Exit if not a packet
	CMPZV	#ACR$V_TYPE,#ACR$S_TYPE,ACR$W_TYPE(R8),#ACR$K_RESOURCE
	BNEQ	10$			; Exit if not a RESOURCE packet
	MOVL	ACR$L_STATUS(R8),ACC$L_FINALSTS(R7); Final status
	MOVL	ACR$L_CPUTIME(R8),ACC$L_CPUTIM(R7); CPU usage
	MOVL	ACR$L_FAULTS(R8),ACC$L_PAGEFLTS(R7); Page fault count
	MOVL	ACR$L_PAGEFL(R8),ACC$L_PGFLPEAK(R7); Page file peak usage
	MOVL	ACR$L_WSPEAK(R8),ACC$L_WSPEAK(R7); Working set peak
	MOVL	ACR$L_BIOCNT(R8),ACC$L_BIOCNT(R7); Buffered I/O count
	MOVL	ACR$L_DIOCNT(R8),ACC$L_DIOCNT(R7); Direct I/O count
	MOVL	ACR$L_VOLUMES(R8),ACC$L_VOLUMES(R7); Volume mount count
	MOVQ	ACR$Q_LOGIN(R8),ACC$Q_LOGIN(R7); Login time
10$:
	POPR	#^M<R0,R1,R2,R3,R4,R5,R6,R7,R8>
	RSB
.PAGE
;------------------------------------------------------------------------------
;
; Build pre-Version 3 accounting batch information
;
; Inputs:
;	INPUT_RECORD is address of Version 3 record
;	OUTPUT_RECORD is address of pre-Version 3 record buffer
;
;------------------------------------------------------------------------------
BATCH:
	PUSHR	#^M<R0,R1,R2,R3,R4,R5,R6,R7,R8>
	MOVAB	W^INPUT_RECORD,R6	; Version 3 record address
	MOVAB	W^OUTPUT_RECORD,R7	; Pre-Version 3 record address
	ADDL3	#ACR$K_HDRLEN,R6,R8	; ID packet address
	BBC	#ACR$V_PACKET,ACR$W_TYPE(R8),40$; Exit if not a packet
	CMPZV	#ACR$V_TYPE,#ACR$S_TYPE,ACR$W_TYPE(R8),#ACR$K_ID
	BNEQ	40$			; Exit if not an ID packet
	MOVZWL	ACR$W_JOBNAME(R8),R0	; Job name offset
	BNEQ	10$			; If NEQ, name present
	MOVC5	#0,ACC$T_JOB_NAME(R7),#^A/ /,#8,ACC$T_JOB_NAME(R7); Blank string
	BRB	20$
10$:
	MOVAB	(R8)[R0],R0		; String address
	MOVZBL	(R0)+,R1		; String length
	MOVC5	R1,(R0),#^A/ /,#8,ACC$T_JOB_NAME(R7)
20$:
	MOVZWL	ACR$W_QUEUE(R8),R0	; Queue name offset
	BNEQ	30$			; If NEQ, name present
	MOVC5	#0,ACC$T_JOB_QUE(R7),#0,#16,ACC$T_JOB_QUE(R7); Zeroed string
	BRB	40$
30$:
	MOVAB	(R8)[R0],R0		; String address
	MOVZBL	(R0),R1			; String length
	INCL	R1			; Add byte count byte
	MOVC5	R1,(R0),#0,#16,ACC$T_JOB_QUE(R7)
40$:
	POPR	#^M<R0,R1,R2,R3,R4,R5,R6,R7,R8>
	RSB
.PAGE
;------------------------------------------------------------------------------
;
; Build pre-Version 3 accounting print information
;
; Inputs:
;	INPUT_RECORD is address of Version 3 record
;	OUTPUT_RECORD is address of pre-Version 3 record buffer
;
;------------------------------------------------------------------------------
PRINT_JOB:
	PUSHR	#^M<R0,R1,R2,R3,R4,R5,R6,R7,R8>
	MOVAB	W^INPUT_RECORD,R6	; Version 3 record address
	MOVAB	W^OUTPUT_RECORD,R7	; Pre-Version 3 record address
	ADDL3	#ACR$K_HDRLEN,R6,R8	; ID packet address
	BBC	#ACR$V_PACKET,ACR$W_TYPE(R8),50$; Exit if not a packet
	CMPZV	#ACR$V_TYPE,#ACR$S_TYPE,ACR$W_TYPE(R8),#ACR$K_ID
	BNEQ	50$			; Exit if not an ID packet
	MOVZWL	ACR$W_JOBNAME(R8),R0	; Job name offset
	BNEQ	10$			; If NEQ, name present
	MOVC5	#0,ACC$T_PRT_NAME(R7),#^A/ /,#8,ACC$T_PRT_NAME(R7); Blank string
	BRB	20$
10$:
	MOVAB	(R8)[R0],R0		; String address
	MOVZBL	(R0)+,R1		; String length
	MOVC5	R1,(R0),#^A/ /,#8,ACC$T_PRT_NAME(R7)
20$:
	MOVZWL	ACR$W_QUEUE(R8),R0	; Queue name offset
	BNEQ	30$			; If NEQ, name present
	MOVC5	#0,ACC$T_PRT_QUE(R7),#0,#12,ACC$T_PRT_QUE(R7); Blank string
	BRB	40$
30$:
	MOVAB	(R8)[R0],R0		; String address
	MOVZBL	(R0),R1			; String length
	INCL	R1			; Add byte count byte
	MOVC5	R1,(R0),#0,#12,ACC$T_PRT_QUE(R7)
40$:
	MOVZWL	ACR$W_LENGTH(R8),R0	; ID packet length
	ADDL2	R0,R8			; Resource packet address
	BBC	#ACR$V_PACKET,ACR$W_TYPE(R8),10$; Exit if not a packet
	CMPZV	#ACR$V_TYPE,#ACR$S_TYPE,ACR$W_TYPE(R8),#ACR$K_PRINT
	BNEQ	50$			; Exit if not a PRINT packet
	MOVL	ACR$L_PRINTSTS(R8),ACC$L_FINALSTS(R7); Print job status
	MOVL	ACR$L_SYMCPUTIM(R8),ACC$L_CPUTIM(R7); Symbiont CPU usage
	MOVL	ACR$L_PAGECNT(R8),ACC$L_PAGCNT(R7); Page count
	MOVL	ACR$L_QIOCNT(R8),ACC$L_QIOCNT(R7); QIO count
	MOVL	ACR$L_GETCNT(R8),ACC$L_GETCNT(R7); GET count
	MOVQ	ACR$Q_QUETIME(R8),ACC$Q_QUETIME(R7); Time job queued
50$:
	POPR	#^M<R0,R1,R2,R3,R4,R5,R6,R7,R8>
	RSB
.PAGE
;------------------------------------------------------------------------------
;
; Build pre-Version 3 accounting user message
;
; Inputs:
;	INPUT_RECORD is address of Version 3 record
;	OUTPUT_RECORD is address of pre-Version 3 record buffer
;
;------------------------------------------------------------------------------
USER:
	PUSHR	#^M<R0,R1,R2,R3,R4,R5,R6,R7,R8>
	MOVAB	W^INPUT_RECORD,R6	; Version 3 record address
	MOVAB	W^OUTPUT_RECORD,R7	; Pre-Version 3 record address
	ADDL3	#ACR$K_HDRLEN,R6,R8	; ID packet address
	BBC	#ACR$V_PACKET,ACR$W_TYPE(R8),20$; Exit if not a packet
	CMPZV	#ACR$V_TYPE,#ACR$S_TYPE,ACR$W_TYPE(R8),#ACR$K_ID
	BNEQ	20$			; Exit if not an ID packet
	MOVZWL	ACR$W_LENGTH(R8),R0	; ID packet length
	ADDL2	R0,R8			; User data packet address
	BBC	#ACR$V_PACKET,ACR$W_TYPE(R8),10$; Exit if not a packet
	CMPZV	#ACR$V_TYPE,#ACR$S_TYPE,ACR$W_TYPE(R8),#ACR$K_USER_DATA
	BNEQ	20$			; If NEQ, not a USER_DATA packet
	MOVZBL	ACR$T_USER_DATA(R8),R0	; Data length
	CMPL	#<ACC$K_INS_LEN-ACC$T_USER_DATA>,R0; Message too large ?
	BGEQ	10$			; If GEQ, no
	MOVL	#<ACC$K_INS_LEN-ACC$T_USER_DATA>,R0; Max message length
10$:
	MOVW	#ACC$K_INSMSG,ACC$W_MSGTYP(R7); User message type
	ADDW3	#ACC$T_USER_DATA,R0,ACC$W_MSGSIZ(R7); User message length
	MOVC3	R0,ACR$T_USER_DATA+1(R8),ACC$T_USER_DATA(R7); Copy message
20$:
	POPR	#^M<R0,R1,R2,R3,R4,R5,R6,R7,R8>
	RSB
.PAGE
.SUBTITLE	.	Error reporting

ERROR:
	PUSHAB	INPUT_FAB		; Input file error ?
	CMPL	R2,(SP)+
	BEQL	10$
	PUSHAB	INPUT_RAB		; Input record error ?
	CMPL	R2,(SP)+
	BEQL	20$
	PUSHAB	OUTPUT_FAB		; Output file error ?
	CMPL	R2,(SP)+
	BEQL	30$
	PUSHAB	OUTPUT_RAB		; Output record error ?
	CMPL	R2,(SP)+
	BEQL	40$
	BRW	60$			; Not an RMS error
10$:					; Input file error
	PUSHAB	EXPINPNAME		; Build file name descriptor
	MOVZBL	INPUT_NAM+NAM$B_ESL,-(SP)
	PUSHL	FAB$L_STV(R2)		; RMS STV value
	PUSHL	R0			; RMS STS value
	PUSHAQ	8(SP)			; Descriptor address
	PUSHL	#1			; FAO count
	PUSHL	#ACC_OPENIN		; Status
	PUSHL	#5			; Argument count
	BRB	50$
20$:					; Input file error
	PUSHAB	RESINPNAME		; Build file name descriptor
	MOVZBL	INPUT_NAM+NAM$B_RSL,-(SP)
	PUSHL	RAB$L_STV(R2)		; RMS STV value
	PUSHL	R0			; RMS STS value
	PUSHAQ	8(SP)			; Descriptor address
	PUSHL	#1			; FAO count
	PUSHL	#ACC_READERR		; Status
	PUSHL	#5			; Argument count
	BRB	50$
30$:					; Input file error
	PUSHAB	EXPOUTNAME		; Build file name descriptor
	MOVZBL	OUTPUT_NAM+NAM$B_ESL,-(SP)
	PUSHL	FAB$L_STV(R2)		; RMS STV value
	PUSHL	R0			; RMS STS value
	PUSHAQ	8(SP)			; Descriptor address
	PUSHL	#1			; FAO count
	PUSHL	#ACC_OPENOUT		; Status
	PUSHL	#5			; Argument count
	BRB	50$
40$:					; Input file error
	PUSHAB	RESOUTNAME		; Build file name descriptor
	MOVZBL	OUTPUT_NAM+NAM$B_RSL,-(SP)
	PUSHL	RAB$L_STV(R2)		; RMS STV value
	PUSHL	R0			; RMS STS value
	PUSHAQ	8(SP)			; Descriptor address
	PUSHL	#1			; FAO count
	PUSHL	#ACC_WRITEERR		; Status
	PUSHL	#5			; Argument count
50$:
	BSBW	CLOSE_FILES		; Close open files
	CALLS	(SP)+,G^LIB$STOP	; Report RMS error and exit
60$:
	CMPL	#ACC_NOTACC,R0		; File name required ?
	BNEQ	70$			; If NEQ, no
	PUSHAB	RESINPNAME		; Build file name descriptor
	MOVZBL	INPUT_NAM+NAM$B_RSL,-(SP)
	PUSHAQ	(SP)			; Descriptor address
	PUSHL	#1			; FAO count
	PUSHL	R0			; Status
	PUSHL	#3			; Argument count
	BRB	50$
70$:
	PUSHL	R0			; Status
	PUSHL	#1			; Argument count
	BRB	50$
.END	$CNVACC
