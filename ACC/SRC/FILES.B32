MODULE 
FILES (IDENT = 'V03-001') = 
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY:  ACC, Account file dumper
!
! ABSTRACT:
!
!	This module contains the file manipulation code for
!	the accounting utilities.
!
! ENVIRONMENT:
!
!	VAX/VMS operating system. unprivileged user mode,
!
! AUTHOR:  Greg Robert and Steve Forgey, January 1982
!
! Modified by:
!
!	V03-001	SPF0105		Steve Forgey	27-Mar-1982
!		Set up a related name block for input files.
!
!	V02-002	SPF0079		Steve Forgey	Feb-06-1982
!		If /BINARY is not present use ".LIS" as output file default,
!		otherwise use ".DAT".
!
!	V02-001	SPF0071		Steve Forgey	Jan-23-1982
!		Change input file name defaults and improve I/O performance.
!
!--

!-----------------------------------------------------------------------------+
!									      !
! 				INCLUDE  FILES				      !
!									      !
!-----------------------------------------------------------------------------+

REQUIRE 'MSRC$:ACCDEF.REQ';		! Common ACC definitions

!-----------------------------------------------------------------------------+
!									      !
! 			TABLE  OF  CONTENTS				      !
!									      !
!-----------------------------------------------------------------------------+

!-----------------------------------------------------------------------------+
!									      !
! 			GENERAL  STORAGE  DEFINITIONS			      !
!									      !
!-----------------------------------------------------------------------------+


OWN

DATEXT:	INITIAL ('.DAT'),		! ".DAT" extension
LISEXT:	INITIAL ('.LIS'),		! ".LIS" extension

INPUT_NAM_RESULT:			! Resultant input name
	VECTOR [NAM$C_MAXRSS,BYTE],	!  -allocate storage

INPUT_NAM_EXPANDED:			! Expanded input name
	VECTOR [NAM$C_MAXRSS,BYTE],	!  -allocate storage

RELATED_NAM_RESULT:			! Resultant related name
	VECTOR [NAM$C_MAXRSS,BYTE],	!  -allocate storage

OUTPUT_NAM_RESULT:			! Resultant output name
	VECTOR [NAM$C_MAXRSS,BYTE],	!  -allocate storage

OUTPUT_NAM_EXPANDED:			! Expanded output name
	VECTOR [NAM$C_MAXRSS,BYTE],	!  -allocate storage

REJECTED_NAM_RESULT:			! Resultant rejected name
	VECTOR [NAM$C_MAXRSS,BYTE],	!  -allocate storage

REJECTED_NAM_EXPANDED:			! Expanded rejected name
	VECTOR [NAM$C_MAXRSS,BYTE];	!  -allocate storage

GLOBAL

RELATED_NAM:	$NAM(			! Related NAM block
	RSA = RELATED_NAM_RESULT,	!  -file name address after opening
	RSS = NAM$C_MAXRSS),		!  -(buffer size)

INPUT_NAM:	$NAM(			! Input NAM block
	RLF = RELATED_NAM,		!  -get further defaults from last file
	ESA = INPUT_NAM_EXPANDED,	!  -file name address after parsing
	ESS = NAM$C_MAXRSS,		!  -(buffer size)
	RSA = INPUT_NAM_RESULT,		!  -file name address after opening
	RSS = NAM$C_MAXRSS),		!  -(buffer size)

OUTPUT_NAM:	$NAM(			! Output NAM block
	RLF = INPUT_NAM,		!  -get further defaults from input
	ESA = OUTPUT_NAM_EXPANDED,	!  -file name address after parsing
	ESS = NAM$C_MAXRSS,		!  -(buffer size)
	RSA = OUTPUT_NAM_RESULT,	!  -file name address after open
	RSS = NAM$C_MAXRSS),		!  -(buffer size)

REJECTED_NAM:	$NAM(			! Rejected NAM block
	RLF = INPUT_NAM,		!  -related file name
	ESA = REJECTED_NAM_EXPANDED,	!  -file name address after parsing
	ESS = NAM$C_MAXRSS,		!  -(buffer size)
	RSA = REJECTED_NAM_RESULT,	!  -file name address after open
	RSS = NAM$C_MAXRSS),		!  -(buffer size)

INPUT_XABFHC:	$XABFHC(),		! Input FHC XAB block

INPUT_FAB:	$FAB(			! Input FAB block
	XAB = INPUT_XABFHC,		!  -address of FHC XAB block
	FOP = (SQO),			!  -sequential operations only
	SHR = (PUT,UPI),		!  -allow un-interlocked, sharing
	NAM = INPUT_NAM,		!  -address of NAM block
	DNM = 'ACCOUNTNG.DAT',		!  -default name
	FAC = GET),			!  -open for input

INPUT_RAB:	$RAB(			! Input RAB block
	USZ = 512,			!  -(buffer size)
	MBC = 16,			!  -multi-block count
	MBF = 2,			!  -multi-buffer count
	ROP = (RAH),			!  -read-ahead processing
	CTX = MSG$_READERR,		!  -error message value
	FAB = INPUT_FAB),		!  -address of FAB to be CONNECTed

OUTPUT_FAB:	$FAB(			! Output FAB block
	CTX = MSG$_OPENOUT,		!  -error message value
	FOP = (OFP, SQO),		!  -output file parse, sequential only
	NAM = OUTPUT_NAM,		!  -address of NAM block
	DNS = 4,			!  -default extension size
	DNA = DATEXT),			!  -default extension address

OUTPUT_RAB: $RAB(			! Output RAB block
	CTX = MSG$_WRITEERR,		!  -specify error message
	FAB = output_fab),		!  -address of FAB block

REJECTED_FAB:	$FAB(			! Rejected FAB block
	DNM = '.REJ',			!  -default extension
	CTX = MSG$_OPENOUT,		!  -error message value
	FOP = (OFP, SQO),		!  -output file parse, sequential only
	NAM = REJECTED_NAM),		!  -address of NAM block

REJECTED_RAB: $RAB(			! Rejected RAB block
	CTX = MSG$_WRITEERR,		!  -specify error message
	MBC = 16,			!  -multi-block count
	MBF = 2,			!  -multi-buffer count
	ROP = (WBH),			!  -write behind processing
	FAB = REJECTED_FAB);		!  -address of FAB block

UNDECLARE PARSE_OUTPUT_FILES;

GLOBAL ROUTINE PARSE_OUTPUT_FILES =

!----
!
! Functional description
!
!	This routine is called to process output files.
!	If the files are binary (/BINARY or /REJECTED)
!	RMS is used, else the screen package.
!
! Input parameters
!
!	None
!
! Output parameters
!
!	Any errors encountered are RETURNed immediately.
!	TRUE is returned on a normal exit.
!
!----

BEGIN

LOCAL
	desc:	vector [2, long];	! Temporary string descriptor

GLOBAL
	screen_char:	bblock [scr$k_length];	! Holds screen characteristics

OWN
	output_desc:	bblock [dsc$k_d_bln]
			preset([dsc$b_class] = dsc$k_class_d),
	rejected_desc:	bblock [dsc$k_d_bln]
			preset([dsc$b_class] = dsc$k_class_d);


!
!PARSE COMMAND LINE OUTPUTS ---
! Parse the /OUTPUT and /REJECTED command switches.  Store any output
! file names obtained in the FAB for future processing.
!

GET_VALUE ('OUTPUT', output_desc);

output_fab [fab$b_fns] = .output_desc [dsc$w_length];
output_fab [fab$l_fna] = .output_desc [dsc$a_pointer];

If PRESENT (BINARY)

then	BEGIN
	perform ($create (		! Call RMS with
		fab = output_fab,	!  -address of FAB
		err = log_filename));	!  -error action routine

	perform ($connect (		! Call RMS with
		rab = output_rab,	!  -address of RAB
		err = log_filename));	!  -error action routine
	END

else	BEGIN
	output_fab [fab$l_dna] = lisext;! Use ".LIS" extension with /NOBINARY
	perform ($parse (		! Call RMS parse with
		fab = output_fab,	!  -address of FAB
		err = log_filename));	!  -error action routine
	output_desc [dsc$w_length] = .output_nam [nam$b_esl];
	output_desc [dsc$a_pointer] = .output_nam [nam$l_esa];
	SET_OUTPUT (1,output_desc);	! Establish output stream #1
	SCREEN_INFO (screen_char);	! Get characteristics
	END;



If GET_VALUE ('REJECTED', rejected_desc) then! /REJECTED value
	BEGIN
	rejected_fab [fab$b_fns] = .rejected_desc [dsc$w_length];
	rejected_fab [fab$l_fna] = .rejected_desc [dsc$a_pointer];
	perform ($create (		! Call RMS with
		fab = rejected_fab,	!  -address of FAB
		err = log_filename));	!  -error action routine

	perform ($connect (		! Call RMS with
		rab = rejected_rab,	!  -address of RAB
		err = log_filename));	!  -error action routine
	END;

RETURN TRUE;
END;

END
ELUDOM
