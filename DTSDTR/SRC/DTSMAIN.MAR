	.TITLE	TST$DTSMAIN - DTS MAINLINE
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY: DTS/DTR DECNET TEST PACKAGE
;
; ABSTRACT:
;
;	DTS/DTR ARE COOPERATING TEST PROGRAMS THAT EXERCISE NSP LEVEL
;	FUNCTIONS ON A DECNET/VAX-11 NODE. DTS (SENDER) INITIATES A TEST
;	SEQUENCE WHILE DTR (RECEIVER) IS THE PASSIVE PARTNER THAT PERFORMS
;	THE REQUESTED FUNCTION. FIVE BASIC TESTS ARE IMPLEMENTED:
;
;	1.  THE CONNECT TEST EXERCISES THE CONNECT ACCEPT/REJECT LOGIC
;	    WITH/WITHOUT OPTIONAL DATA.
;
;	2.  THE DATA TEST TRANSMITS DATA MESSAGES AND OPTIONALLY COMPUTES
;	    THROUGHPUT STATISTICS. VARIOUS DATA VALIDATION CHECKS
;	    AND FLOW CONTROL MECHANISMS MAY BE ENABLED.
;
;	3.  THE DISCONNECT TEST EXERCISES THE DISCONNECT SYNCHRONOUS/ABORT
;	    LOGIC WITH/WITHOUT OPTIONAL DATA.
;
;	4.  THE INTERRUPT TEST TRANSMITS INTERRUPT MESSAGES AND OPTIONALLY
;	    COMPUTES THROUGHPUT STATISTICS. VARIOUS DATA VALIDATION
;	    CHECKS AND FLOW CONTROL MAY BE ENABLED.
;
;	5.  THE MISCELLANEOUS TEST EXERCISES DECNET/VAX-11 SPECIFIC
;	    FUNCTIONS AND VALIDATES ERROR LOGIC.
;
; ENVIRONMENT: DTS RUNS IN USER MODE AND REQUIRES NETWORK PRIVILEGE.
;
; AUTHOR: JAMES A. KRYCKA,	CREATION DATE: 11-AUG-77
;
; MODIFICATIONS:
;
;	X0.1-8	DJD0001		Darrell Duffy	8-December-1979
;		Change to use LIB$ASN_WTH_MBX
;
;--

	.SBTTL	COMMAND LANGUAGE SYNTAX

;++
;
; THE DTS COMMAND (FOR VAX/VMS) HAS THE FOLLOWING FORMAT:
;
; $ DTS[/qualifier,...]    parameter[/qualifier,...]
;
; WHERE THE COMMAND AND COMMAND QUALIFIERS ARE:
;
; $ DTS[/NODENAME=xxxxxx][/SPEED=nnnnnnn][/NOSTATISTICS][/NOPRINT]
;                                        [/STATISTICS  ][/PRINT  ]
;
;      [/NODISPLAY ] ...
;      [/DISPLAY=nn]
;
; AND WHERE THE PARAMETER AND PARAMETER QUALIFIERS ARE ONE OF THE FOLLOWING:
;
; ... CONNECT[/TYPE=REJECT][/NORETURN       ]
;            [/TYPE=ACCEPT][/RETURN=STANDARD]
;                          [/RETURN=RECEIVED]
;
; ... DATA[/TYPE=SINK    ][/SIZE=nnnnn][/HOURS=nnn     ][/SQUEUE=n][RQUEUE=n]
;         [/TYPE=SEQUENCE]             [/MINUTES=nnnn  ]
;         [/TYPE=PATTERN ]             [/SECONDS=nnnnnn]
;         [/TYPE=ECHO    ]
;
;         [/NOFLOW      ][/NONAK  ][/NOBACK  ]
;         [/FLOW=MESSAGE][/NAK=nnn][/BACK=nnn]
;         [/FLOW=SEGMENT]
;
; ... DISCONNECT[/TYPE=SYNCHRONOUS][/NORETURN       ]
;               [/TYPE=ABORT      ][/RETURN=STANDARD]
;                                  [/RETURN=RECEIVED]
;
; ... INTERRUPT[/TYPE=SINK    ][/SIZE=nn][/HOURS=nnn     ][/SQUEUE=n][RQUEUE=n]
;              [/TYPE=SEQUENCE]          [/MINUTES=nnnn  ]
;              [/TYPE=PATTERN ]          [/SECONDS=nnnnnn]
;              [/TYPE=ECHO    ]
;
; ... MISCELLANEOUS[/TYPE=NAME   ]
;                  [/TYPE=OBJECT ]
;                  [/TYPE=LOGICAL]
;
;
; COMMAND QUALIFIER DEFAULTS:
;
; NODE = NULL STRING; I.E., THE LOCAL NODE
; SPEED = 1000000 BAUD (USED FOR STATISTICS)
; STATISTICS
; NOPRINT
; NODISPLAY
;
; CONNECT TEST PARAMETER QUALIFIER DEFAULTS:
;
; TYPE = ACCEPT
; NORETURN
;
; DATA TEST PARAMETER QUALIFIER DEFAULTS:
;
; TYPE = SINK
; SIZE = 128 (BYTES)
; SECONDS = 30
; SQUEUE = 1
; RQUEUE = 1
; NOFLOW
; NONAK
; NOBACK
;
; DISCONNECT TEST PARAMETER QUALIFIER DEFAULTS:
;
; TYPE = ABORT
; NORETURN
;
; INTERRUPT TEST PARAMETER QUALIFIER DEFAULTS:
;
; TYPE = SINK
; SIZE = 16 (BYTES)
; SECONDS = 30
; SQUEUE = 1
; RQUEUE = 1
;
; MISCELLANEOUS TEST PARAMETER QUALIFIER DEFAULTS:
;
; TYPE = NAME
;
; NOTES:
;
; 1.  A COLON MAY BE USED IN PLACE OF THE EQUAL_SIGN TO DELIMIT A
;     QUALIFIER AND ITS VALUE.
;
; 2.  ONLY THE FIRST FOUR CHARACTERS OF A PARAMETER, QUALIFIER, AND
;     A NON-NUMBERIC QUALIFIER VALUE ARE SIGNIFICANT.
;
;--

	.SBTTL	DECLARATIONS

;
; INCLUDE FILES:
;
	$DTSDEF				;DTS ERROR MESSAGES
	$DEVDEF				;DEFINE RMS DEVICE CHARS
	FLGDEF				; DEFINE COMMAND PARSE FLAGS
	CMDDEF				; DEFINE COMMAND LANGUAGE SYMBOLS
	VLDDEF				; DEFINE VALID QUALIFIER FLAGS
	$RABDEF				; DEFINE RAB OFFSETS
	.IIF NE	K_LIST_MEB, .LIST MEB	; DEFINED IN DTPREFIX.MAR
;
; MACROS:
;
;	NONE
;
; EQUATED SYMBOLS:
;
;	NONE
;
; OWN STORAGE:
;
;	NONE

	.SBTTL	TST$START_DTS - MAINLINE
	.PSECT	TST$CODE	NOWRT
S::					; SYMBOL FOR DEBUGGING PURPOSES

;++
; FUNCTIONAL DESCRIPTION:
;
;	NONE
;
; CALLING SEQUENCE:
;
;	$ RUN DTS
;
; INPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	NONE
;
; SIDE EFFECTS:
;
;	NONE
;
;--

	.ENTRY	TST$START_DTS,^M<>	; ENTRY POINT FROM EXECUTIVE

;
; OPEN THE PRINT FILE
;

	$OPEN	FAB=W^TST$PRTFAB	; OPEN THE FILE
	CHECK_RMS			; CHECK COMPLETION CODE
	$CONNECT RAB=W^TST$PRTRAB	; ESTABLISH A RECORD STREAM
	CHECK_RMS			; CHECK COMPLETION CODE

;
; OUTPUT INITIALIZATION MESSAGE TO PRINT FILE
;

	$FAO_S	CTRSTR=W^TST$GQ_INIT-	; FORMAT MESSAGE
		OUTLEN=W^TST$GW_PRTLEN-	;
		OUTBUF=W^TST$GQ_PRTBUF-	;
		P1=#TST$GT_DTS-		; INSERT DTS ID
		P2=#TST$GT_VERSION-	; INSERT DTS VERSION NUMBER
		P3=#0			; INSERT DATE AND TIME
	CHECK_SS			; CHECK STATUS CODE
	BSBW	TST$PRINT_FAO		; PRINT MESSAGE

;
; CREATE A TEMPORARY MAILBOX THAT WILL BE USED AS THE ASSOCIATED LINK
; CHANNEL MAILBOX AND ASSIGN A CHANNEL TO IT.
;

;
; CREATE A CONTROL/INFORMATION PATH TO NETACP IN PREPARATION FOR
; NON-TRANSPARENT NETWORK I/O. ALSO ASSOCIATE A MAILBOX WITH THE
; CHANNEL.
;

;
;	These things are all done by the LIB$ASN_WTH_MBX routine
;

	PUSHL	#TST$K_MAILQUOTA	; Setup mailbox quota
	MOVL	SP, R2			; Save its address
	PUSHL	#TST$K_MAILBUF		; Mailbox message size
	MOVL	SP, R1			; its address too
	PUSHAW	W^TST$GW_MAILCHAN	; Address of mailbox channel
	PUSHAW	W^TST$GW_LINKCHAN	; Address for link channel
	PUSHR	#^M<R1, R2>		; Those addresses we saved
	PUSHAQ	W^TST$GQ_LINKNAME	; The name for the device (_NET)
	CALLS	#5, LIB$ASN_WTH_MBX	; Assign the channels and create mbx
	ADDL2	#8, SP			; Dump the quota and message size
	CHECK_SS			; Check the system service status code


;
; OPEN THE COMMAND FILE
;

	$OPEN	FAB=W^TST$CMDFAB	; OPEN THE FILE
	CHECK_RMS			; CHECK COMPLETION CODE
	$CONNECT RAB=W^TST$CMDRAB	; ESTABLISH A RECORD STREAM
	CHECK_RMS			; CHECK COMPLETION CODE

;
; APPLY COMMAND QUALIFIER DEFAULTS (NOT PARAMETER QUALIFIER DEFAULTS).
; THESE QUALIFIERS ARE "STICKY" IN THE SENSE THAT ONCE MODIFIED BY A
; COMMAND, THEY RETAIN THEIR NEW SETTING UNTIL MODIFIED AGAIN BY A COMMAND.
; THIS IS IN CONTRAST TO PARAMETER QUALIFIERS WHICH ARE RESET TO THEIR
; ORIGINAL DEFAULT VALUES BEFORE PARSING EACH COMMAND.
;

	MOVB	#DFT_K_DISPLAY,W^TST$GB_DISPLAY	; [NO]DISPLAY
	CLRB	W^TST$GT_NODENAME		; NODENAME IS NULL STRING
	MOVB	#DFT_K_PRINT,W^TST$GB_PRINT	; [NO]PRINT
	MOVL	#DFT_K_SPEED,W^TST$GL_SPEED	; LINE SPEED IN BAUD
	MOVB	#DFT_K_STAT,W^TST$GB_STAT	; [NO]STATISTICS

;
; PROCESS THE NEXT COMMAND
;

NEXT_COMMAND:				;
	CLRL	R11			; CLEAR ALL COMMAND PARSE FLAGS
	CLRL	W^TST$GL_VALID		; CLEAR ALL VALID QUALIFIER FLAGS
	BISL2	#VLD_M_DISPLAY-		; DENOTE VALID QUALIFIERS:
		!VLD_M_NODENAME-	;
		!VLD_M_NODISPLAY-	;
		!VLD_M_NOPRINT-		;
		!VLD_M_NOSTAT-		;
		!VLD_M_PRINT-		;
		!VLD_M_SPEED-		;
		!VLD_M_STAT,-		;
		W^TST$GL_VALID		;

;
; INPUT NEXT LINE OF COMMAND
;

READ_LINE:				;
	$GET	RAB=W^TST$CMDRAB	; READ NEXT LINE
	CHECK_RMS			; CHECK COMPLETION CODE
	BLBS	R1,20$			; WAS IT END-OF-FILE OR TIME-OUT?
10$:	BRW	TERMINATE		; YES, EXIT

;
; PARSE THE COMMAND
;

20$:	MOVL	W^TST$CMDRAB+RAB$L_RBF,R8 ; GET ADDRESS OF COMMAND STRING
	MOVZWL	W^TST$CMDRAB+RAB$W_RSZ,R9 ; GET LENGTH OF COMMAND STRING
;
;ECHO THE COMMAND
;
	BBS	#DEV$V_TRM,-
		W^TST$CMDFAB+FAB$L_DEV,-
		25$			;DONT ECHO IF TERMINAL DEVICE
	MOVW	R9,W^TST$GW_PRTLEN
	MOVL	R8,W^TST$PRTRAB+RAB$L_RBF
	BSBW	TST$PRINT_FAO
	MOVAL	W^TST$GB_PRTBUF,-
		W^TST$PRTRAB+RAB$L_RBF
25$:
	ADDL2	R8,R9			; CALCULATE ADDRESS OF END OF
					; COMMAND BUFFER + 1
	CMPB	#^A\E\,(R8)		; IS IT REQUEST TO EXIT?
	BEQL	10$			; BRANCH IF YES
	CALLS	#0,W^TST$PARSE		; PARSE THE COMMAND LINE
	BBCC	#FLG_V_PARSERROR,R11,30$ ; BRANCH IF PARSE WAS SUCCESSFUL
	$FAO_S	CTRSTR=W^TST$GQ_PARSE-	; FORMAT MESSAGE
		OUTLEN=W^TST$GW_PRTLEN-	;
		OUTBUF=W^TST$GQ_PRTBUF-	;
		P1=#TST$GT_DTS		; INSERT DTS ID
	CHECK_SS			; CHECK STATUS CODE
	BSBW	TST$PRINT_FAO		; PRINT MESSAGE
	BRB	NEXT_COMMAND		; START AGAIN
30$:	BBSC	#FLG_V_MULTILINE,R11,-	; GET ANOTHER LINE IF REQUIRED
		READ_LINE		;

;
; COMMAND PARSING IS COMPLETE. R10 = COMMAND PARAMETER (TESTTYPE).
;
; START TO BUILD THE TEST REQUEST STRING WHICH WILL BE SENT TO DTR IN
; THE USERDATA FIELD OF THE NSP CONNECT INITIATE MESSAGE. THE REQUEST
; STRING IS ASSEMBLED AS A COUNTED ASCII STRING.
;

	MOVAL	W^TST$GT_USERDATA,R11	; GET ADDRESS OF USERDATA STRING
	ADDB3	W^TST$GB_PRINT,R10,1(R11) ; UPDATE DTS/R TESTTYPE FIELD
					 ;  WHICH IS DERIVED FROM BOTH
					 ;  THE COMMAND PARAMETER AND
					 ;  THE /[NO]PRINT QUALIFIER

;
; DISPATCH TO APPROPRIATE ROUTINE FOR EXECUTING THE COMMAND
;

	PUSHAB	B^TEST_COMPLETE		; PUT RETURN ADDRESS ON STACK
					;  SO THAT ROUTINES EXECUTED BY
					;  'CASE' CAN EXIT VIA 'RSB'
	$CASEB	SELECTOR=R10,DISPL=<-	; DISPATCH TO:
			TST$CONN_DTS-	;  CONNECT TEST
			TST$DATA_DTS-	;  DATA TEST
			TST$DISC_DTS-	;  DISCONNECT TEST
			TST$INTE_DTS-	;  INTERRUPT TEST
			TST$MISC_DTS-	;  MISCELLANEOUS NSP TEST
	>				;

;
; OUTPUT END-OF-TEST MESSAGE TO THE PRINT FILE
;

TEST_COMPLETE:				;
	MOVW	#3,W^TST$GT_DTSMSG	;ASSUME THERE IS AN FAO ARG
	MOVL	R0,W^TST$GL_DTERROR	;SETUP ERROR CODE
	CMPL	#1,R0
	BNEQU	1$
	MOVW	#1,W^TST$GT_DTSMSG
1$:
	$PUTMSG_S	MSGVEC=W^TST$GT_DTSMSG-
			FACNAM=W^TST$GQ_FACDESC
	CHECK_SS			; CHECK STATUS CODE

;
; CALCULATE AND PRINT STATISTICS FOR THE DATA AND INTERRUPT TESTS
;

	CMPB	W^TST$GB_STAT,#VAL_K_STAT_YES ; ARE STATISTICS DESIRED?
	BEQLU	10$			; BRANCH IF YES
5$:	BRW	NEXT_COMMAND		; START AGAIN
10$:	CMPB	R10,#VAL_K_TEST_DATA	; WAS THIS A DATA TEST?
	BEQLU	20$			; BRANCH IF YES
	CMPB	R10,#VAL_K_TEST_INTE	; WAS THIS AN INTERRUPT TEST?
	BNEQU	5$			; NO, START AGAIN
	MOVQ	W^TST$GL_XMITINTE,-	; YES, COPY TRANSMIT AND RECEIVE
		W^TST$GL_XMITDATA	;  INTE COUNTERS TO DATA COUNTERS

;
; OUTPUT TEST PARAMETERS TO THE PRINT FILE
;

20$:	MOVZWL	W^TST$GW_SIZE,R2	; GET MESSAGE SIZE
	SUBL2	W^TST$GL_CLOCK,-
		W^TST$GL_SECONDS	;GET TIME TEST RAN
	BNEQU	21$			;BR IF SOMETIME HAS PASSED
	MOVL	#1,W^TST$GL_SECONDS	;MAKE TIME SMALLEST INCR
21$:
	$FAO_S	CTRSTR=W^TST$GQ_STAT1-	;
		OUTLEN=W^TST$GW_PRTLEN-	;
		OUTBUF=W^TST$GQ_PRTBUF- ;
		P1=W^TST$GL_SECONDS-	; DURATION OF TEST IN SECONDS
		P2=#TST$GT_NODENAME-	; ADDRESS OF NODENAME STRING
		P3=W^TST$GL_SPEED-	; LINE SPEED (BAUD)
		P4=R2			; MESSAGE SIZE IN BYTES
	CHECK_SS			; CHECK STATUS CODE
	BSBW	TST$PRINT_FAO		; PRINT MESSAGE

;
; CALCULATE DATA TRANSFER TOTALS
;

	ADDL3	W^TST$GL_XMITDATA,-	; CALCULATE TOTAL NUMBER OF
		W^TST$GL_RECVDATA,R1	; MESSAGES TRANSFERRED
	MULL2	R1,R2			; CALCULATE TOTAL NUMBER OF
					; BYTES TRANSFERRED
	ROTL	#3,R2,R3		; CALCULATE TOTAL NUMBER OF
					; BITS TRANSFERRED
;
; CALCULATE DATA RATES WITH ROUNDED RESULTS STORED IN INTEGER FORMAT
;

	CVTLF	W^TST$GL_SECONDS,R0	; PUT TIME IN FLOATING FORMAT
; ***** MSG/SEC --> {R4,R5}
	CVTLF	R1,R9			; PUT #MSG IN FLOATING FORMAT
	MULF2	#10,R9			; CALCULATE MESSAGES PER SECOND
	DIVF2	R0,R9			; X 10
	CVTRFL	R9,R4			; ROUND AND STORE AS INTEGER
	CLRL 	R5			; DOUBLE PRECISION DIVIDE FOLLOWS
	EDIV	#10,R4,R4,R5		; SPLIT RESULT INTO X.Y VALUES
; ***** BYTES/SEC --> R6
	CVTLF	R2,R9			; PUT #BYTES IN FLOATING FORMAT
	DIVF2	R0,R9			; CALCULATE BYTES PER SECOND
	CVTRFL	R9,R6			; ROUND AND STORE AS INTEGER
; ***** BITS/SEC --> R7
	CVTLF	R3,R9			; PUT #BITS IN FLOATING FORMAT
	DIVF2	R0,R9			; CALCULATE BITS PER SECOND
	CVTRFL	R9,R7			; ROUND AND STORE AS INTEGER
; ***** LINE UTILIZATION --> {R8,R9}
	CVTLF	W^TST$GL_SPEED,R0	; PUT SPEED IN FLOATING FORMAT
	MULF2	#1000,R9		; CALCULATE PERCENT OF LINE
	DIVF2	R0,R9			; UTILIZATION X 10
	CVTFL	R9,R8			; ROUND AND STORE AS INTEGER
	CLRL	R9			; DOUBLE PRECISION DIVIDE FOLLOWS
	EDIV	#10,R8,R8,R9		; SPLIT RESULT INTO X.Y VALUES

;
; OUTPUT TEST STATISTICS TO THE PRINT FILE
;

	$FAO_S	CTRSTR=W^TST$GQ_STAT2-	;
		OUTLEN=W^TST$GW_PRTLEN-	;
		OUTBUF=W^TST$GQ_PRTBUF- ;
		P1=W^TST$GL_XMITDATA-	; TOTAL # OF MESSAGES TRANSMITTED
		P2=W^TST$GL_RECVDATA-	; TOTAL # OF MESSAGES RECEIVED
		P3=R2-			; TOTAL # BYTES TRANSFERRED
		P4=R4-			; MESSAGES PER SECOND
		P5=R5-			; "
		P6=R6-			; BYTES PER SECOND
		P7=R7-			; LINE THROUGHPUT (BAUD)
		P8=R8-			; PERCENT OF LINE UTILIZATION
		P9=R9			; "
	CHECK_SS			; CHECK STATUS CODE
	BSBW	TST$PRINT_FAO		; PRINT MESSAGE
	BRW	NEXT_COMMAND		; START AGAIN

;
; OUTPUT TERMINATION MESSAGE TO THE PRINT FILE
;

TERMINATE:				; END OF TEST
	$FAO_S	CTRSTR=W^TST$GQ_TERM-	; FORMAT MESSAGE
		OUTLEN=W^TST$GW_PRTLEN-	;
		OUTBUF=W^TST$GQ_PRTBUF-	;
		P1=#TST$GT_DTS-		; INSERT DTS ID
		P2=#0			; INSERT DATE AND TIME
	CHECK_SS			; CHECK STATUS CODE
	BSBW	TST$PRINT_FAO		; PRINT MESSAGE
	$EXIT_S				; EXIT TO VMS
	.END	TST$START_DTS
