	.TITLE	TST$DTGLOBAL - GLOBAL STORAGE SECTION FOR DTS/DTR
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY: DTS/DTR DECNET TEST PACKAGE
;
; ABSTRACT: GLOBAL STORAGE SECTION FOR DTS/DTR
;
; ENVIRONMENT: DTS/DTR RUN IN USER MODE AND REQUIRE NETWORK PRIVILEGE.
;
; AUTHOR: JAMES A. KRYCKA,	CREATION DATE:	11-AUG-77
;
; MODIFICATIONS:
;
;	V02-012	JAK0001		Jim Krycka	21-March-1980
;		Change printed version number to 2.00 on startup
;
;	X0.1-11 DJD0002		Darrell Duffy	4-January-1980
;		Remove timeout from command rab
;
;	X0.1-10	DJD0001		Darrell Duffy	10-December-1979
;		Changes to call LIB$ASN_WTH_MBX
;
;--

	.SBTTL	DECLARATIONS
	.PSECT	TST$IMPURE	NOEXE,LONG

;
; INCLUDE FILES:
;
	$IODEF				; DEFINE QIO FUNCTION CODES
	EFNDEF				; DEFINE EFN'S AND FUNCTION CODES
	CMDDEF				; DEFINE COMMAND LANGUAGE SYMBOLS
	.IIF NE	K_LIST_MEB, .LIST MEB	; DEFINED IN DTPREFIX.MAR
;
; MACROS:
;
;	NONE
;
; EQUATED SYMBOLS:
;
	TST$K_MAILBUF==64		; MAILBOX BUFFER LENGTH
	TST$K_MAILQUOTA==TST$K_MAILBUF*8 ; MAILBOX QUOTA
;					; Following is no longer needed
;	TST$K_MAILPROT==^X0000		; MAILBOX PROTECTION MASK
	TST$K_XMITBUF==MAX_K_SIZE_DA	; TRANSMIT BUFFER LENGTH
	TST$K_RECVBUF==MAX_K_SIZE_DA	; RECEIVE BUFFER LENGTH
	TST$K_INTEBUF==MAX_K_SIZE_IN	; INTERRUPT BUFFER LENGTH
	TST$K_CMDBUF==132		; COMMAND BUFFER LENGTH
	TST$K_PRTBUF==512		; PRINT BUFFER LENGTH
;
;WEAKEN DEFINITIONS THAT MAY NOT BE FOUND,DEPENDING ON MODULE

	.WEAK	TST$XMITAST_DTR,TST$RECVAST_DTR,TST$MAILAST_DTR
	.WEAK	TST$INTEAST_DTR,TST$XMITAST_DTS,TST$RECVAST_DTS
	.WEAK	TST$MAILAST_DTS,TST$INTEAST_DTS
;
;
;OFFSETS IN AST QUEUE BLOCK

	TST$QB_FLINK==0
	TST$QB_BLINK==4			;BACK LINK
	TST$QB_CODE==8			;QIO FUNCTION INDEX
	TST$QB_ASTADR==12		;AST ROUTINE ADDRESS
	TST$QB_BUFLEN==16		;BUFFER SIZE
;
; OWN STORAGE:
;

;
; QIO PARAMETER BLOCKS FOR FUNCTIONS OVER THE COMMUNICATIONS LINK AND
; FOR THE ASSOCIATED MAILBOX.
;

;***********************************************************************
; THESE BLOCKS MUST BE CONTIGUOUS AND IN THE ORDER SPECIFIED SO THAT
; INDEXED ADDRESSING CAN BE USED TO MODIFY THEM.
;***********************************************************************

TST$PARAMETER::				; START OF 8 CONTIGUOUS QIO
					;  PARAMETER BLOCKS
;
; READ THE ASSOCIATED MAILBOX.
;
	$QIO	EFN=EFN_K_READ_MAIL-	;
		CHAN=0-			; CHANNEL # T.B.S.
		FUNC=IO$_READVBLK-	;
		IOSB=TST$GQ_MAILIOSB-	;
		ASTADR=0-		; MAY BE MODIFIED
		ASTPRM=0-		; MAY BE MODIFIED
		P1=TST$GB_MAILBUF-	; BUFFER ADDRESS
		P2=0			; BUFFER SIZE T.B.S.
;
; ISSUE NSP CONNECT INITIATE OR CONNECT ACCEPT REQUEST.
;
	ASSUME	EFN_K_CONN_INIT,EQ,EFN_K_CONN_ACCE ; INITIATE = ACCEPT
	$QIO	EFN=EFN_K_CONN_INIT-	;
		CHAN=0-			; CHANNEL # T.B.S.
		FUNC=IO$_ACCESS!IO$M_ACCESS- ;
		IOSB=TST$GQ_LINKIOSB-	;
		ASTADR=0-		; MAY BE MODIFIED
		ASTPRM=0-		; MAY BE MODIFIED
		P1=0-			; MUST BE ZERO
		P2=0			; ACCESS DESC BLOCK ADDRESS T.B.S.

;
; ISSUE NSP CONNECT REJECT REQUEST.
;
	$QIO	EFN=EFN_K_CONN_REJE-	;
		CHAN=0-			; CHANNEL # T.B.S.
		FUNC=IO$_ACCESS!IO$M_ABORT- ;
		IOSB=TST$GQ_LINKIOSB-	;
		ASTADR=0-		; MAY BE MODIFIED
		ASTPRM=0-		; MAY BE MODIFIED
		P1=0-			; MUST BE ZERO
		P2=0			; ACCESS DESC BLOCK ADDRESS T.B.S.

;
; ISSUE NSP SYNCHRONOUS DISCONNECT REQUEST.
;
	$QIO	EFN=EFN_K_DISC_SYNC-	;
		CHAN=0-			; CHANNEL # T.B.S.
		FUNC=IO$_DEACCESS!IO$M_SYNCH- ;
		IOSB=TST$GQ_LINKIOSB-	;
		ASTADR=0-		; MAY BE MODIFIED
		ASTPRM=0-		; MAY BE MODIFIED
		P1=0-			; MUST BE ZERO
		P2=0			; DEACCESS DESC BLOCK ADDRESS T.B.S.

;
; ISSUE NSP DISCONNECT ABORT REQUEST.
;
	$QIO	EFN=EFN_K_DISC_ABRT-	;
		CHAN=0-			; CHANNEL # T.B.S.
		FUNC=IO$_DEACCESS!IO$M_ABORT- ;
		IOSB=TST$GQ_LINKIOSB-	;
		ASTADR=0-		; MAY BE MODIFIED
		ASTPRM=0-		; MAY BE MODIFIED
		P1=0-			; MUST BE ZERO
		P2=0			; DEACCESS DESC BLOCK ADDRESS T.B.S.

;
; ISSUE NSP TRANSMIT DATA MESSAGE REQUEST.
;
	$QIO	EFN=EFN_K_XMIT_DATA-	;
		CHAN=0-			; CHANNEL # T.B.S.
		FUNC=IO$_WRITEVBLK-	;
		IOSB=TST$GQ_XMITIOSB-	;
		ASTADR=0-		; MAY BE MODIFIED
		ASTPRM=0-		; MAY BE MODIFIED
		P1=TST$GB_XMITBUF-	; BUFFER ADDRESS
		P2=0			; BUFFER SIZE T.B.S.

;
; ISSUE NSP TRANSMIT INTERRUPT DATA REQUEST.
;
	$QIO	EFN=EFN_K_XMIT_INTE-	;
		CHAN=0-			; CHANNEL # T.B.S.
		FUNC=IO$_WRITEVBLK!IO$M_INTERRUPT- ;
		IOSB=TST$GQ_INTEIOSB-	;
		ASTADR=0-		; MAY BE MODIFIED
		ASTPRM=0-		; MAY BE MODIFIED
		P1=TST$GB_INTEBUF-	; BUFFER ADDRESS
		P2=0			; BUFFER SIZE T.B.S.

;
; ISSUE NSP RECEIVE DATA MESSAGE REQUEST.
;
	$QIO	EFN=EFN_K_RECV_DATA-	;
		CHAN=0-			; CHANNEL # T.B.S.
		FUNC=IO$_READVBLK-	;
		IOSB=TST$GQ_RECVIOSB-	;
		ASTADR=0-		; MAY BE MODIFIED
		ASTPRM=0-		; MAY BE MODIFIED
		P1=TST$GB_RECVBUF-	; BUFFER ADDRESS
		P2=0			; BUFFER SIZE T.B.S.

;
; QIO STATUS BLOCK STORAGE
;

TST$GQ_MAILIOSB::			; MAILBOX I/O STATUS BLOCK
	.BLKQ	1			;
TST$GQ_LINKIOSB::			; GENERAL LINK I/O STATUS BLOCK
	.BLKQ	1			;
TST$GQ_XMITIOSB::			; TRANSMIT I/O STATUS BLOCK
	.BLKQ	1			;
TST$GQ_INTEIOSB::			; INTERRUPT I/O STATUS BLOCK
	.BLKQ	1			;
TST$GQ_RECVIOSB::			; RECEIVE I/O STATUS BLOCK
	.BLKQ	1			;

;
; MESSAGE BUFFER STORAGE
;

TST$GB_MAILBUF::			; MAILBOX BUFFER
	.BLKB	TST$K_MAILBUF		;
TST$GB_XMITBUF::			; TRANSMIT BUFFER
	.BLKB	TST$K_XMITBUF		;
TST$GB_RECVBUF::			; RECEIVE BUFFER
	.BLKB	TST$K_RECVBUF		;
TST$GB_INTEBUF::			; INTERRUPT BUFFER
	.BLKB	TST$K_INTEBUF		;

;
; CHANNEL NUMBER STORAGE
;

TST$GW_MAILCHAN::			; MAILBOX CHANNEL NUMBER
	.BLKW	1			;
TST$GW_LINKCHAN::			; LINK CHANNEL NUMBER
	.BLKW	1			;

;
;FLAGS PASSED FROM AST ROUTINES TO MAINLINE
TST$GB_ASTFLAGS::			;BIT FLAGS
	.BYTE 	0
;
; DEVICE NAME AND LOGICAL NAME DESCRIPTOR BLOCKS WITH TEXT
;

;					; Mailbox names not needed
;TST$GQ_MAIL_DTS::			; DEVICE NAME DESCRIPTOR BLOCK
;	QBLOCK	TEXT=<TST$DTS_MAILBOX>	;  FOR MAILBOX USED BY DTS
;TST$GQ_MAIL_DTR::			; DEVICE NAME DESCRIPTOR BLOCK
;	QBLOCK	TEXT=<TST$DTR_MAILBOX>	;  FOR MAILBOX USED BY DTR

TST$GQ_LINKNAME::			; DEVICE NAME DESCRIPTOR BLOCK
	QBLOCK	TEXT=<_NET:>		;  FOR THE LINK
TST$GQ_SYSNAME::			; LOGICAL NAME DESCRIPTOR BLOCK
	QBLOCK	TEXT=<SYS$NET>		;  FOR SYS$NET

;
;BLOCKS BY DTS TO QUEUE AST REQUESTS TO USER LEVEL

TST$QB_XMTDATA::
	.LONG	0,0		;LINKS
	.LONG	EFN_K_XMIT_DATA	;FUNCTION CODE/INDEX
	.ADDRESS TST$XMITAST_DTS	;ADDESS AST ROUTINE
TST$QB_RCVDATA::
	.LONG	0,0		;LINKS
	.LONG	EFN_K_RECV_DATA
	.ADDRESS TST$RECVAST_DTS
TST$QB_RCVMAIL::
	.LONG	0,0		;LINKS
	.LONG	EFN_K_READ_MAIL
	.ADDRESS TST$MAILAST_DTS
TST$QB_XMTINT::
	.LONG	0,0		;LINKS
	.LONG	EFN_K_XMIT_INTE
	.ADDRESS TST$INTEAST_DTS
;
;QUEUE BLOCKS USED BY DTR FOR PASSING ASTS TO USER LEVEL
TST$QBR_XMTDATA::
	.LONG	0,0		;LINKS
	.LONG	EFN_K_XMIT_DATA	;FUNCTION CODE/INDEX
	.ADDRESS TST$XMITAST_DTR	;ADDESS AST ROUTINE
	.LONG	0		;BUFFER LENGTH
TST$QBR_RCVDATA::
	.LONG	0,0		;LINKS
	.LONG	EFN_K_RECV_DATA
	.ADDRESS TST$RECVAST_DTR
	.LONG	0		;BUFFER SIZE
TST$QBR_RCVMAIL::
	.LONG	0,0		;LINKS
	.LONG	EFN_K_READ_MAIL
	.ADDRESS TST$MAILAST_DTR
	.LONG	0		;BUFFER SIZE
TST$QBR_XMTINT::
	.LONG	0,0		;LINKS
	.LONG	EFN_K_XMIT_INTE
	.ADDRESS TST$INTEAST_DTR
	.LONG	0		;BUFFER SIZE
TST$QB_QHEAD::
	.QUAD	0
;
; DATA STRUCTURES FOR THE COMMAND FILE
;

	.ALIGN	LONG			; REQUIRED FOR FABS AND RABS
TST$CMDFAB::				; FILE ACCESS BLOCK
	$FAB	FAC=GET-		;
		FNA=TST$GT_CMDNAME-	;
		FNS=K_CMDNAME		;
TST$CMDRAB::				; RECORD ACCESS BLOCK
	$RAB	FAB=TST$CMDFAB-		;
		UBF=TST$GB_CMDBUF-	;
		USZ=TST$K_CMDBUF-	;
		ROP=<PMT,CVT>-	;
;		ROP=<PMT,TMO,CVT>-	;
		PBF=TST$GB_PMTBUF-	;
		PSZ=K_PMTBUF		;
;		TMO=120			;
TST$GT_CMDNAME::			; COMMAND DEVICE NAME
	.ASCII	\SYS$INPUT\		;
K_CMDNAME=.-TST$GT_CMDNAME		; COMMAND DEVICE NAME LENGTH
TST$GB_CMDBUF::				; COMMAND BUFFER
	.BLKB	TST$K_CMDBUF		;
TST$GB_PMTBUF::				; PROMPT BUFFER
	.ASCII	<13><10><10>\_Test:   \	; PROMPT MESSAGE
K_PMTBUF=.-TST$GB_PMTBUF		; PROMPT BUFFER LENGTH

;
; DATA STRUCTURES FOR THE PRINT FILE
;

	.ALIGN	LONG			; REQUIRED FOR FABS AND RABS
TST$PRTFAB::				; FILE ACCESS BLOCK
	$FAB	FAC=PUT-		;
		RAT=CR-			;
		FNA=TST$GT_PRTNAME-	;
		FNS=K_PRTNAME		;
TST$PRTRAB::				; RECORD ACCESS BLOCK
	$RAB	FAB=TST$PRTFAB-		;
		RBF=TST$GB_PRTBUF-	;
		RSZ=0			; T.B.S. DYNAMICALLY
TST$GT_PRTNAME::			; PRINT DEVICE NAME
	.ASCII	\SYS$OUTPUT\		;
K_PRTNAME=.-TST$GT_PRTNAME		; PRINT DEVICE NAME LENGTH
TST$GQ_PRTBUF::				; OUTPUT STRING DESCRIPTOR FOR FAO
	QBLOCK	SPACE=TST$K_PRTBUF-	; BUFFER SIZE
		BUFADR=TST$GB_PRTBUF	; BUFFER ADDRESS
TST$GW_PRTLEN::				; FORMATTED MESSAGE SIZE FROM FAO
	.BLKW	1			;

;
; FAO RELATED DESCRIPTOR BLOCKS WITH TEXT
;

TST$GQ_INIT::				; INITIALIZATION MESSAGE
	QBLOCK	TEXT=<<!/!AC!AC initiated on !%D>>
TST$GQ_CALLER::				; REQUESTOR ID MESSAGE
	QBLOCK	TEXT=<<!/!AC!AC was requested by !AD">>
TST$GQ_TERM::				; TERMINATION MESSAGE
	QBLOCK	TEXT=<<!/!ACterminated on !%D>>
TST$GQ_COMPLETE::			; TEST COMPLETE MESSAGE
	QBLOCK	TEXT=<<!/!AC!AC test completed on !%T with status of !XL>>
TST$GQ_PARSE::				; PARSE ERROR MESSAGE
	QBLOCK	TEXT=<<!ACcommand line syntax error>>
TST$GQ_DISPLAY::			; PRINT MESSAGE
	QBLOCK	TEXT=<<!AC !UW!_-!#(3XB)>>
TST$GQ_STAT1::				; TEXT FOR STATISTICS PART 1
	QBLOCK	TEXT=<!/-
		<Test parameters:!/>-
		<   Test duration (sec)!_!UL!/>-
		<   Target nodename!_"!AC"!/>-
		<   Line speed (baud)!_!UL!/>-
		<   Message size (bytes)!_!UW>-
	>
TST$GQ_STAT2::				; TEXT FOR STATISTICS PART 2
	QBLOCK	TEXT=<!/-
		<Summary statistics:!/>-
		<   Total messages XMIT!_!UL!_RECV!_!UL!/>-
		<   Total bytes XMIT!_!UL!/>-
		<   Messages per second!_!UL.!UB!/>-
		<   Bytes per second!_!UL!/>-
		<   Line thruput (baud)!_!UL!/>-
		<   % Line utilization!_!UL.!UB>-
	>
TST$GQ_STAT3::				; TEXT FOR DTR PRINT OPTION
	QBLOCK	TEXT=<!/-
		<Summary statistics:!/>-
		<   Message size (bytes)!_!UW!/>-
		<   Total messages XMIT!_!UL!_RECV!_!UL!/>-
		<   Total bytes XMIT!_!UL>-
	>
TST$GT_DTS::				; DTS IDENTIFICATION STORED
	.ASCIC	\DTS \			;  AS A COUNTED ASCII STRING
TST$GT_DTR::				; DTR IDENTIFICATION STORED
	.ASCIC	\DTR \			;  AS A COUNTED ASCII STRING
;
;DATA FOR CALLS TO PUTMSG

TST$GT_DTSMSG::
	.WORD	3
	.WORD	15
TST$GL_DTERROR::
	.LONG	0
	.WORD	1
	.WORD	15
TST$GL_FAOARG::
	.LONG	0
TST$GQ_FACDESC::
	.LONG	3,.+4
	.ASCII	/DTS/

TST$GQ_DTRDESC::
	.LONG	3,.+4
	.ASCII	/DTR/
;
; COMMUNICATIONS LINK TRANSMISSION AND RECEPTION COUNTERS.
; NOTE: ENTRIES MUST BE IN THE ORDER SPECIFIED.
;

TST$GL_XMITDATA::			; NUMBER OF DATA MESSAGES
	.BLKL	1			;  TRANSMITTED
TST$GL_RECVDATA::			; NUMBER OF DATA MESSAGES
	.BLKL	1			;  RECEIVED
TST$GL_XMITINTE::			; NUMBER OF INTERRUPT MESSAGES
	.BLKL	1			;  TRANSMITTED
TST$GL_RECVINTE::			; NUMBER OF INTERRUPT MESSAGES
	.BLKL	1			;  RECEIVED
TST$GL_STATUS::				; AST ROUTINE STATUS CODE
	.BLKL	1			;

;
; WORK AREA FOR COMMAND PARSE.
; NOTE: ENTRIES MUST BE IN THE ORDER SPECIFIED.
;

TST$GT_KEYWORD::			; FIRST 4 CHARACTERS OF PARAMETER
	.BLKB	4			;  OR QUALIFIER STRING TO PARSE
TST$GT_VALUE::				; FIRST 8 CHARACTERS OF QUALIFIER
	.BLKB	8			;  VALUE STRING TO PARSE

;+
; STORAGE OF THE NETWORK CONNECT BLOCK AND ASSOCIATED DATA. THE NCB
; IS CONSTRUCTED DYNAMICALLY AND MAY VARY IN SIZE. IT CONTAINS UP TO
; SIX FIELDS WHOSE ORDER AND SIZE ARE LISTED BELOW:
;
;	 8 BYTES MAX FOR <NODENAME>::
;	16 BYTES MAX FOR <OBJECTTYPE>
;	 1 BYTE FOR SLASH DELIMITER
;	 2 BYTES FOR NETACP LINK INDEX
;	17 BYTES MAX FOR COUNTED USERDATA STRING
;	19 BYTES FOR ADDITIONAL NETACP DATA
;-

TST$GQ_NCB::				; NCB DESCRIPTOR BLOCK
	QBLOCK	SPACE=63-		;
		BUFADR=TST$GB_NCB	;
TST$GQ_ACCESS::				; ACCESS FUNC DESCRIPTOR BLOCK
	.BLKQ	1			;
TST$GQ_DEACCESS::			; DEACCESS FUNC DESCRIPTOR BLOCK
	.BLKQ	1			;
TST$GT_OBJTYPE::			; NSP OBJECTTYPE FOR DTR STORED
	.ASCIC	\63=\			;  AS A COUNTED ASCII STRING
TST$GT_OBJTYPE1::			; ALTERNATE OBJECTTYPE STORED
	.ASCIC	\0=DTR\			;  AS A COUNTED ASCII STRING
TST$GT_OBJTYPE2::			; ALTERNATE OBJECTTYPE STORED
	.ASCIC	\TASK=DTR\		;  AS A COUNTED ASCII STRING
TST$GT_USERDATA::			; USERDATA STRING FOR DTR STORED
	.BLKB	1+16			;  AS A COUNTED ASCII STRING
TST$GT_STANDARD::			; "STANDARD" DATA PATTERN
	.ASCIC	\ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\
TST$GT_CONN::				; TEXT FOR CONNECT TEST STORED
	.ASCIC	\CONNECT\		;  AS A COUNTED ASCII STRING
TST$GT_DATA::				; TEXT FOR DATA TEST STORED
	.ASCIC	\DATA\			;  AS A COUNTED ASCII STRING
TST$GT_DISC::				; TEXT FOR DISCONNECT TEST STORED
	.ASCIC	\DISCONNECT\		;  AS A COUNTED ASCII STRING
TST$GT_INTE::				; TEXT FOR INTERRUPT TEST STORED
	.ASCIC	\INTERRUPT\		;  AS A COUNTED ASCII STRING
TST$GT_MISC::				; TEXT FOR MISCELLANEOUS TEST STORED
	.ASCIC	\MISCELLANEOUS\		;  AS A COUNTED ASCII STRING
TST$GT_ERROR::				; STRING FOR ERROR RESPONSE STORED
	.ASCIC	\????\			;  AS A COUNTED ASCII STRING
TST$GT_VERSION::			; DTS/DTR VERSION NUMBER STORED
	.ASCIC	\Version 2.00\		;  AS A COUNTED ASCII STRING
TST$GT_XMIT::				; TEXT FOR DISPLAY STORED
	.ASCIC	\<---- XMIT\		;  AS A COUNTED ASCII STRING
TST$GT_RECV::				; TEXT FOR DISPLAY STORED
	.ASCIC	\RECV ---->\		;  AS A COUNTED ASCII STRING

;
; RESULTS OF PARSE OF MAILBOX MESSAGE
;

TST$GW_MAILCODE::			; MAILBOX MESSAGE CODE
	.BLKW	1			;
TST$GW_DEV_UNIT::			; DEVICE UNIT NUMBER
	.BLKW	1			;
TST$GT_DEV_NAME::			; DEVICE NAME STORED AS A
	.BLKB	1+15			;  COUNTED ASCII STRING
TST$GT_MAILDATA::			; MAILBOX MESSAGE LESS HEADER STORED
	.BLKB	1+63			;  AS A COUNTED ASCII STRING

;
; STORAGE OF COMMAND PARAMETER AND COMMAND RELATED VALUES.
;

TST$GB_TEST::				; TEST PARAMETER (FUNCTION)
	.BLKB	1			;  FOR ALL TESTS
TST$GL_VALID::				; VALID (PERMITTED) QUALIFIER FLAGS
	.BLKL	1			;

;
; STORAGE OF COMMAND QUALIFIER VALUES
;

TST$GB_DISPLAY::			; DISPLAY MESSAGE QUALIFIER
	.BLKB	1			; N=#BYTES OF MESSAGE TO DISPLAY
TST$GT_NODENAME::			; TARGET NODENAME STORED
	.BLKB	1+6			;  AS A COUNTED ASCII STRING
TST$GB_PRINT::				; [NO]PRINT QUALIFIER
	.BLKB	1			;
TST$GL_SPEED::				; LINE SPEED IN BAUD
	.BLKL	1			; THIS VALUE IS USED ONLY AS INPUT
					;  FOR STATISTICS CALCULATIONS; 
					;  I.E., IT DOES NOT SET LINE SPEED!
TST$GB_STAT::				; [NO]STATISTICS QUALIFIER
	.BLKB	1			;

;
; STORAGE OF PARAMETER QUALIFIER AND RELATED VALUES.
;

TST$GB_TYPE::				; TEST TYPE QUALIFIER (SUBFUNCTION)
	.BLKB	1			;  FOR ALL TESTS
TST$GB_RETURN::				; RETURN USERDATA QUALIFIER
	.BLKB	1			;  FOR CONNECT AND DISCONNECT TESTS
TST$GW_SIZE::				; MESSAGE SIZE QUALIFIER
	.BLKW	1			;  FOR DATA AND INTERRUPT TESTS
TST$GB_RQUEUE::				; DTR QUEUE QUALIFIER
	.BLKB	1			;  FOR DATA AND INTERRUPT TESTS
TST$GB_SQUEUE::				; DTS QUEUE QUALIFIER
	.BLKB	1			;  FOR DATA AND INTERRUPT TESTS
TST$GL_SECONDS::			; DURATION OF TEST IN SECONDS
	.BLKL	1			;  FOR DATA AND INTERRUPT TESTS
TST$GL_CLOCK::				;COUNTDOWN LOCATION FOR TIMEOUT AST
	.BLKL	1
TST$GQ_NANOSEC::			; DURATION OF TEST IN 100
	.LONG	-10000000,-1			;  NANOSECOND UNITS
TST$GB_FLOW::				; FLOW CONTROL QULAIFIER
	.BLKB	1			;  FOR DATA TEST
TST$GB_NAK::				; NAK CONTROL QUALIFIER
	.BLKB	1			;  FOR DATA TEST
TST$GB_BACK::				; BACK PRESSURE CONTROL QUALIFIER
	.BLKB	1			;  FOR DATA TEST
					;  ASSOCIATED QUALIFIER MAY APPEAR
					;  IN THE COMMAND

;***********************************************************************
; THE ORDER OF THE ENTRIES IN THE KEYWORD TABLES BELOW IS SIGNIFICANT!!
;***********************************************************************

;
; QUALIFIER KEYWORD TABLE
;
; QUALIFIERS ARE IN ALPHABETICAL ORDER. IF ONE IS INSERTED OR DELETED,
; BE SURE TO UPDATE THE APPROPRIATE CASE DISPATCH TABLE IN THE TST$PARSE
; MODULE!!!
;

TST$AZ_QUAL::				; QUALIFIER:
	.ASCIC	\BA\			; BACK
	.ASCIC	\D\			; DISPLAY
	.ASCIC	\F\			; FLOW
	.ASCIC	\H\			; HOURS
	.ASCIC	\M\			; MINUTES
	.ASCIC	\NA\			; NAK
	.ASCIC	\NOB\			; NOBACK
	.ASCIC	\NODE\			; NODENAME
	.ASCIC	\NODI\			; NODISPLAY
	.ASCIC	\NOF\			; NOFLOW
	.ASCIC	\NON\			; NONAK
	.ASCIC	\NOP\			; NOPRINT
	.ASCIC	\NOR\			; NORETURN
	.ASCIC	\NOS\			; NOSTATISTICS
	.ASCIC	\P\			; PRINT
	.ASCIC	\RE\			; RETURN
	.ASCIC	\RQ\			; RQUEUE
	.ASCIC	\SE\			; SECONDS
	.ASCIC	\SI\			; SIZE
	.ASCIC	\SP\			; SPEED
	.ASCIC	\SQ\			; SQUEUE
	.ASCIC	\ST\			; STATISTICS
	.ASCIC	\T\			; TYPE
	.ASCIC	\\			; END OF TABLE INDICATOR

;
; PARAMETER KEYWORD TABLE
;

TST$AZ_PARAM::				; TEST TYPE PARAMETER:
	.ASCIC	\C\			; CONNECT
	.ASCIC	\DA\			; DATA
	.ASCIC	\DI\			; DISCONNECT
	.ASCIC	\I\			; INTERRUPT
	.ASCIC	\M\			; MISCELLANEOUS
	.ASCIC	\\			; END OF TABLE INDICATOR

;
; VALUE KEYWORD TABLE FOR TYPE (CONNECT) QUALIFIER
;

TST$AZ_TYPE_CO::			; VALUE:
	.ASCIC	\R\			; REJECT
	.ASCIC	\A\			; ACCEPT
	.ASCIC	\\			; END OF TABLE INDICATOR

;
; VALUE KEYWORD TABLE FOR TYPE (DISCONNECT) QUALIFIER
;

TST$AZ_TYPE_DI::			; VALUE:
	.ASCIC	\S\			; SYNCHRONOUS
	.ASCIC	\A\			; ABORT
	.ASCIC	\\			; END OF TABLE INDICATOR

;
; VALUE KEYWORD TABLE FOR TYPE (DATA) QUALIFIER
;

TST$AZ_TYPE_DA::			; VALUE:
	.ASCIC	\SI\			; SINK
	.ASCIC	\SE\			; SEQUENCE
	.ASCIC	\P\			; PATTERN
	.ASCIC	\E\			; ECHO
	.ASCIC	\\			; END OF TABLE INDICATOR

;
; VALUE KEYWORD TABLE FOR TYPE (INTERRUPT) QUALIFIER
;

TST$AZ_TYPE_IN::			; VALUE:
	.ASCIC	\SI\			; SINK
	.ASCIC	\SE\			; SEQUENCE
	.ASCIC	\P\			; PATTERN
	.ASCIC	\E\			; ECHO
	.ASCIC	\\			; END OF TABLE INDICATOR

;
; VALUE KEYWORD TABLE FOR TYPE (MISCELLANEOUS) QUALIFIER
;

TST$AZ_TYPE_MI::			; VALUE:
	.ASCIC	\N\			; ILLEGAL NODENAME
	.ASCIC	\O\			; NON-EXISTANT OBJECTTYPE
	.ASCIC	\L\			; INVALID LOGICAL LINK ADDRESS
	.ASCIC	\\			; END OF TABLE INDICATOR

;
; VALUE KEYWORD TABLE FOR RETURN QUALIFIER
;

TST$AZ_RETURN::				; VALUE:
	.ASCIC	\S\			; STANDARD
	.ASCIC	\R\			; RECEIVED
	.ASCIC	\\			; END OF TABLE INDICATOR

;
; VALUE KEYWORD TABLE FOR FLOW QUALIFIER
;

TST$AZ_FLOW::				; VALUE:
	.ASCIC	\S\			; SEGMENT
	.ASCIC	\M\			; MESSAGE
	.ASCIC	\\			; END OF TABLE INDICATOR
	.END
