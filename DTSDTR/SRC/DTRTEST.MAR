	.TITLE	TST$DTRTEST - DTR TEST ROUTINES
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY: DTS/DTR DECNET TEST PACKAGE
;
; ABSTRACT:
;	THIS MODULE IMPLEMENTS THE CONNECT, DATA, DISCONNECT,
;	INTERRUPT, AND MISCELLANEOUS TEST SEQUENCES FOR DTR.
;
; ENVIRONMENT: DTR RUNS IN USER MODE AND REQUIRES NETWORK PRIVILEGE.
;
; AUTHOR: JAMES A. KRYCKA,	CREATION DATE: 11-AUG-77
;
; MODIFICATIONS:
;
;--

	.SBTTL	DECLARATIONS

;
; INCLUDE FILES:
;
	$DTSDEF
	CMDDEF				; DEFINE COMMAND LANGUAGE SYMBOLS
	EFNDEF				; DEFINE EFN'S AND FUNCTION CODES
	$MSGDEF				; DEFINE MAILBOX MESSAGE ID CODES
	.IIF NE	K_LIST_MEB, .LIST MEB	; DEFINED IN DTPREFIX.MAR
;
; MACROS:
;
;	NONE
;
; EQUATED SYMBOLS:
;
;	NONE
;
; OWN STORAGE:
;
;	NONE

	.SBTTL	TST$CONN_DTR - CONNECT TEST
	.PSECT	TST$CODE	NOWRT
RT::					; SYMBOL FOR DEBUGGING PURPOSES

;++
; FUNCTIONAL DESCRIPTION:
;
;	NONE
;
; CALLING SEQUENCE:
;
;	BSB/JSB	TST$CONN_DTR
;
; INPUT PARAMETERS:
;
;	R9	TEST SUBFUNCTION VALUE
;	R10	ADDRESS OF NCB USERDATA FIELD (COUNTED ASCII STRING)
;	R11	ADDRESS OF NCB DESCRIPTOR BLOCK
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	R0	COMPLETION CODE
;	R1	ADDRESS OF TEST ID STRING
;	R2-R11	DESTROYED
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	R0	1 = SUCCESS; 0 = FAILURE
;
; SIDE EFFECTS:
;
;	NONE
;
;--

TST$CONN_DTR::				; ENTRY POINT
	CMPB	R9,#5			;
	BLEQU	5$			;
	BSBW	TST$CONN_REJECT		; ISSUE CONNECT REJECT
	MOVL	#DTS$_BADSUBFCN,R0			; GIVE REASON FOR FAILURE
	BRB	CONN_FAILURE		;
5$:	ROTL	#-1,R9,R6		; DIVIDE CONTEST FIELD BY 2 TO
					;  DETERMINE WHAT TYPE (IF ANY)
					;  OF USERDATA IS TO BE RETURNED.
	$CASEB	SELECTOR=R6,DISPL=<-	; RETURN:
		10$-			;  NO USERDATA
		20$-			;  STANDARD DATA
		30$-			;  RECEIVED DATA
	>				;
10$:	CLRB	(R10)			; ZERO LENGTH OF USERDATA STRING
	BRB	30$			; CONTINUE
20$:	MOVB	#16,(R10)+		; STORE 16 BYTES OF THE STANDARD
					;  DATA PATTERN AS A COUNTED STRING
	MOVC3	#16,W^TST$GT_STANDARD+1,(R10) ; "

;
; RESPOND WITH CONNECT ACCEPT OR CONNECT REJECT AS APPROPRIATE.
;

30$:	MOVL	#EFN_K_CONN_REJE,R2	; ASSUME CONNECT REJECT
	BLBC	R9,40$			; IS IT A REJECT REQUEST?
	MOVL	#EFN_K_CONN_ACCE,R2	; NO, IT'S A CONNECT ACCEPT
40$:	MOVL	R11,R4			; P2 = ADDRESS OF NCB DESCRIPTOR BLOCK
	BSBW	TST$QIOW		; RESPOND TO CONNECT INITIATE
	BLBC	R9,CONN_SUCCESS		 ;DID WE REJECT THE CONNECTION?
					 ;NO, WAIT FOR DISCONNECT FROM DTS
	MOVL	#EFN_K_READ_MAIL,R2	 ;GET FUNCTION/INDEX CODE
	MOVZBL	#TST$K_MAILBUF,R4	 ;GET MAILBOX BUFFER SIZE
	BSBW	TST$QIOW		 ;READ MAILBOX
	BSBW	TST$EXAM_MAIL		 ;PARSE MAILBOX MESSAGE
	CMPW	R6,#MSG$_DISCON		 ;WAS IT A SYNCHRONOUS DISCONNECT?
	BEQLU	CONN_SUCCESS		 ;YES, THAT'S OK
	CMPW	R6,#MSG$_ABORT		 ;WAS IT A DISCONNECT ABORT?
	BEQLU	CONN_SUCCESS		 ;YES, THAT'S OK TOO
	MOVL	#DTS$_BADMAIL,R0	;NOTE INVALID MAIL
	MOVZWL	R6,W^TST$GL_FAOARG	;NOTE TYPE OF MAIL
	BRB	CONN_FAILURE		;
CONN_SUCCESS:				; TEST WAS SUCCESSFUL
	MOVL	#1,R0			; SET COMPLETION CODE TO SUCCESS
CONN_FAILURE:				; ENTER HERE IF TEST FAILED
	MOVAB	W^TST$GT_CONN,R1	; RETURN ADDRESS OF TEST ID STRING
	RSB				; YES, EXIT

	.SBTTL	TST$DATA_DTR - DATA TEST
	.PSECT	TST$CODE	NOWRT

;++
; FUNCTIONAL DESCRIPTION:
;
;	NONE
;
; CALLING SEQUENCE:
;
;	BSB/JSB	TST$DATA_DTR
;
; INPUT PARAMETERS:
;
;	R9	TEST SUBFUNCTION VALUE
;	R10	ADDRESS OF NCB USERDATA FIELD (COUNTED ASCII STRING)
;	R11	ADDRESS OF NCB DESCRIPTOR BLOCK
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	R0	COMPLETION CODE
;	R1	ADDRESS OF TEST ID STRING
;	R2-R11	DESTROYED
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	R0	1 = SUCCESS; 0 = FAILURE
;
; SIDE EFFECTS:
;
;	NONE
;
;--

TST$DATA_DTR::				; ENTRY POINT
	CMPB	R9,#VAL_K_TYPE_ECHO	;
	BLEQU	10$			;
	BSBW	TST$CONN_REJECT		; ISSUE CONNECT REJECT
	MOVL	#DTS$_BADSUBFCN,R0			; GIVE REASON FOR FAILURE
	BRB	55$			;
10$:	MOVAB	3(R10),R0		; SAVE REMAINING FIELDS IN MESSAGE
	CMPB	(R0),#VAL_K_FLOW_MESS	;
	BEQL	20$			;
	BSBW	TST$CONN_REJECT		; ISSUE CONNECT REJECT
	MOVL	#DTS$_INVOPTION,R0			; GIVE REASON FOR FAILURE
	BRB	55$			;
20$:	MOVB	(R0)+,W^TST$GB_FLOW	; STORE FCOPT VALUE
	CMPB	(R0),#1			;
	BEQL	30$			;
	BSBW	TST$CONN_REJECT		; ISSUE CONNECT REJECT
	MOVL	#DTS$_INVOPTION,R0			; GIVE REASON FOR FAILURE
	BRB	55$			;
30$:	MOVB	(R0)+,W^TST$GB_RQUEUE	; STORE FCVAL VALUE
	TSTB	(R0)			;
	BEQL	40$			;
	BSBW	TST$CONN_REJECT		; ISSUE CONNECT REJECT
	MOVL	#DTS$_INVOPTION,R0			; GIVE REASON FOR FAILURE
	BRB	55$			;
40$:	MOVB	(R0)+,W^TST$GB_NAK	; STORE NAK VALUE
	TSTB	(R0)			;
	BEQL	50$			;
	BSBW	TST$CONN_REJECT		; ISSUE CONNECT REJECT
	MOVL	#DTS$_INVOPTION,R0			; GIVE REASON FOR FAILURE
	BRB	55$			;
50$:	MOVB	(R0)+,W^TST$GB_BACK	; STORE BPVAL VALUE
	CMPW	(R0),#MAX_K_SIZE_DA	;
	BLEQ	60$			;
	BSBW	TST$CONN_REJECT		; ISSUE CONNECT REJECT
	MOVL	#DTS$_INVOPTION,R0			; GIVE REASON FOR FAILURE
55$:	BRW	DATA_FAILURE		;
60$:	MOVW	(R0)+,W^TST$GW_SIZE	; STORE MSGLEN VALUE

;
; RESPOND TO CONNECT INITIATE WITH A CONNECT ACCEPT WITHOUT USERDATA.
;

	BSBW	TST$CONN_ACCEPT		;

;
; DATA TEST INITIALIZATION
;

	CLRQ	W^TST$GL_XMITDATA	; ZERO TRANSMIT AND RECEIVE
					;  MESSAGE COUNTERS
	CLRQ	W^TST$GL_XMITINTE	; ZERO TRANSMIT AND RECEIVE
					;  INTERRUPT MESSAGE COUNTERS
	MOVL	#1,W^TST$GL_STATUS	; SET AST STATUS CODE TO SUCCESS
	CLRB	W^TST$GB_ASTFLAGS	;NOTE TIMER RUNNING
	MOVAL	TST$QB_QHEAD,TST$QB_QHEAD;INIT QUEUE HEAD
	MOVAL	TST$QB_QHEAD,TST$QB_QHEAD+4
;
; PUT REPETITIONS OF THE STANDARD DATA PATTERN IN THE MESSAGE BUFFER
; BEGINNING AT BUFFER+4.
;

	MOVAB	W^TST$GB_XMITBUF,R3	; GET ADDRESS OF MESSAGE
	CLRL	(R3)+			; INITIALIZE MESSAGE SEQUENCE NUMBER
	MOVZWL	W^TST$GW_SIZE,R4	; GET MESSAGE SIZE
	CMPW	#4,R4			;ANY DATA IN MSG?
	BGEQ	70$			;NO, SO WHY FILLBUFFER
	SUBL2	#4,R4			; REDUCE SIZE ACCORDINGLY
	BSBW	TST$STANDARD		; PUT STD DATA PATTERN IN BUFFER

70$:
;
; RECEIVE [AND TRANSMIT] DATA MESSAGES UNTIL DTS DISCONNECTS THE LINK
;

	MOVL	#EFN_K_RECV_DATA,R2	; GET FUNCTION/INDEX CODE
	MOVZWL	W^TST$GW_SIZE,R4	; GET MESSAGE SIZE
	MOVAB	W^TST$RECVAST_DTR,R5	; GET ADDRESS OF AST ROUTINE
	BSBW	TST$QIOAST		; START UP RECEIVE MESSAGE STREAM
	MOVL	#EFN_K_READ_MAIL,R2	; GET FUNCTION/INDEX CODE
	MOVZBL	#TST$K_MAILBUF,R4	; GET MAILBOX BUFFER SIZE
	MOVAB	W^TST$MAILAST_DTR,R5	; GET ADDRESS OF AST ROUTINE
	BSBW	TST$QIOAST		; START UP READ MAILBOX STREAM

;
; WAIT FOR LINK DISCONNECT
;

	BRB	110$			;CHECK FOR ASTS 
100$:
	$HIBER_S			;GO TO SLEEP TILL AN AST
110$:
	BLBS	W^TST$GB_ASTFLAGS,120$	;JUMP IF TIMER EXPIRED
	REMQUE	@TST$QB_QHEAD,R0	;DEQUEUE AN AST
	BVS	100$			;NOTHING THERE ,SLEEP
	MOVL	TST$QB_CODE(R0),R2		;QIO FUNCTION/CODE
	MOVL	TST$QB_BUFLEN(R0),R4		;SIZE FOR DATA MSG
	MOVL	TST$QB_ASTADR(R0),R5	;AST ADDRESS FOR QIO
	BSBW	TST$QIOAST		;DO QIO WITH AST
	CHECK_SS			;MAKE SERVICE OKAY
	BLBS	R1,110$			;IF OKAY BR
	BRB	DATA_FAILURE		;LINK ABORTED
120$:

;
; DATA TEST IS FINISHED
;

	MOVL	W^TST$GL_STATUS,R0	; POST STATUS
DATA_FAILURE:				; ENTER HERE IF TEST FAILED
	MOVAB	W^TST$GT_DATA,R1	; RETURN ADDRESS OF TEST ID STRING
	RSB				; EXIT

;
; SUBROUTINE TO ISSUE A CONNECT ACCEPT WITHOUT USERDATA.
;

TST$CONN_ACCEPT::			; CONTROL POINT
	MOVL	#EFN_K_CONN_ACCE,R2	; GET FUNCTION/INDEX CODE
	BRB	ACCEPT_REJECT		; JOIN COMMON CODE

;
; SUBROUTINE TO ISSUE A CONNECT REJECT WITHOUT USERDATA.
;

TST$CONN_REJECT::			; CONTROL POINT
	MOVL	#EFN_K_CONN_REJE,R2	; GET FUNCTION/INDEX CODE
ACCEPT_REJECT:				; CONTROL POINT

;
; AN ALTERNATE TO THE FOLLOWING TWO INSTRUCTIONS IS:
;
;	CLRB	(R10)
;
; THE LONGER SEQUENCE BELOW IS USED TO CHECKOUT NETACP'S HANDLING
; OF NO USERDATA STRING PRESENT.
;

	MOVB	#^A\"\,(R10)+		; TERMINATE NCB STRING BEFORE
					;  COUNTED USERDATA STRING
	SUBL3	4(R11),R10,(R11)	; REDUCE SIZE IN NCB DESCRIPTOR
	MOVL	R11,R4			; P2 = ADDRESS OF NCB DESCRIPTOR BLOCK
	BSBW	TST$QIOW		; ISSUE THE CONNECT REJECT
	RSB				; EXIT

	.SBTTL	TST$DISC_DTR - DISCONNECT TEST
	.PSECT	TST$CODE	NOWRT

;++
; FUNCTIONAL DESCRIPTION:
;
;	NONE
;
; CALLING SEQUENCE:
;
;	BSB/JSB	TST$DISC_DTR
;
; INPUT PARAMETERS:
;
;	R9	TEST SUBFUNCTION VALUE
;	R10	ADDRESS OF NCB USERDATA FIELD (COUNTED ASCII STRING)
;	R11	ADDRESS OF NCB DESCRIPTOR BLOCK
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	R0	COMPLETION CODE
;	R1	ADDRESS OF TEST ID STRING
;	R2-R11	DESTROYED
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	R0	1 = SUCCESS; 0 = FAILURE
;
; SIDE EFFECTS:
;
;	NONE
;
;--

TST$DISC_DTR::				; ENTRY POINT
	CMPB	R9,#5			;
	BLEQU	5$			;
	BSBW	TST$CONN_REJECT		; ISSUE CONNECT REJECT
	MOVL	#DTS$_BADSUBFCN,R0			; GIVE REASON FOR FAILURE
	BRB	DISC_FAILURE		;

;
; RESPOND TO CONNECT INITIATE WITH A CONNECT ACCEPT WITHOUT USERDATA.
;

5$:	MOVB	(R10),R7		; SAVE USERDATA STRING COUNT
	BSBW	TST$CONN_ACCEPT		;
	DECL	R10			; RESTORE POINTER
	MOVB	R7,(R10)		; RESTORE USERDATA STRING COUNT

;
; CONTINUE SET-UP FOR DISCONNECT OF LINK JUST ESTABLISHED.
;

	MOVAQ	W^TST$GQ_DEACCESS,R4	; P2 = ADDR OF USERDATA DESC BLOCK
	ROTL	#-1,R9,R6		; DIVIDE DISTEST FIELD BY 2 TO
					; DETERMINE WHAT TYPE (IF ANY)
					; OF USERDATA IS TO BE RETURNED.
	$CASEB	SELECTOR=R6,DISPL=<-	; RETURN:
		10$-			;  NO USERDATA
		20$-			;  STANDARD DATA
		30$-			;  RECEIVED DATA
	>				;
10$:	CLRL	R4			; P2 = 0; SPECIFY NO USERDATA
	BRB	40$			; CONTINUE
20$:	MOVL	#<1+16>,(R4)		; SPECIFY SIZE OF USERDATA
					;  COUNTED STRING
	MOVB	#16,W^TST$GT_STANDARD	; MODIFY COUNT
	MOVAB	W^TST$GT_STANDARD,4(R4)	; SPECIFY ADDRESS OF COUNTED STRING
	BRB	40$			; CONTINUE
30$:	MOVZBL	(R10),(R4)		; SPECIFY SIZE OF RECEIVED DATA
	INCL	(R4)			;  COUNTED STRING
	MOVL	R10,4(R4)		; SPECIFY ADDRESS OF COUNTED STRING

;
; DETERMINE WHETHER TO RESPOND WITH A SYNCHRONOUS DISCONNECT OR A
; DISCONNECT ABORT.
;

40$:	MOVL	#EFN_K_DISC_SYNC,R2	; ASSUME SYNCHRONOUS DISCONNECT
	BLBC	R9,50$			; IS IT A SYNC DISCONNECT REQUEST?
	MOVL	#EFN_K_DISC_ABRT,R2	; NO IT'S A DISCONNECT ABORT
50$:	BSBW	TST$QIOW		; DISCONNECT THE LINK
DISC_SUCCESS:				; TEST WAS SUCCESSFUL
	MOVL	#1,R0			; SET COMPLETION CODE TO SUCCESS
DISC_FAILURE:				; ENTER HERE IF TEST FAILED
	MOVAB	W^TST$GT_DISC,R1	; RETURN ADDRESS OF TEST ID STRING
	RSB				; EXIT

	.SBTTL	TST$INTE_DTR - INTERRUPT TEST
	.PSECT	TST$CODE	NOWRT

;++
; FUNCTIONAL DESCRIPTION:
;
;	NONE
;
; CALLING SEQUENCE:
;
;	BSB/JSB	TST$INTE_DTR
;
; INPUT PARAMETERS:
;
;	R9	TEST SUBFUNCTION VALUE
;	R10	ADDRESS OF NCB USERDATA FIELD (COUNTED ASCII STRING)
;	R11	ADDRESS OF NCB DESCRIPTOR BLOCK
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	R0	COMPLETION CODE
;	R1	ADDRESS OF TEST ID STRING
;	R2-R11	DESTROYED
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	R0	1 = SUCCESS; 0 = FAILURE
;
; SIDE EFFECTS:
;
;	NONE
;
;--

TST$INTE_DTR::				; ENTRY POINT
	CMPB	R9,#VAL_K_TYPE_ECHO	;
	BLEQU	10$			;
	BSBW	TST$CONN_REJECT		; ISSUE CONNECT REJECT
	MOVL	#DTS$_BADSUBFCN,R0			; GIVE REASON FOR FAILURE
	BRB	15$			;INTERRUPT FAILURE
10$:	CMPB	3(R10),#1		;
	BEQL	20$			;
	BSBW	TST$CONN_REJECT		; ISSUE CONNECT REJECT
	MOVL	#DTS$_INVOPTION,R0			; GIVE REASON FOR FAILURE
15$:	BRW	INTE_FAILURE		;
20$:	MOVB	3(R10),W^TST$GB_RQUEUE	; STORE FCVAL VALUE
	MOVW	#MAX_K_SIZE_IN,-	; STORE INTERRUPT MESSAGE SIZE
		W^TST$GW_SIZE		; SINCE THE TEST REQUEST DOES NOT
					;  SPECIFY A SIZE, MAKE IT THE
					;  MAXIMUM SIZE

;
; RESPOND TO CONNECT INITIATE WITH A CONNECT ACCEPT WITHOUT USERDATA.
;

	BSBW	TST$CONN_ACCEPT		;

;
; INTERRUPT TEST INITIALIZATION
;

	CLRQ	W^TST$GL_XMITDATA	; ZERO TRANSMIT AND RECEIVE
					;  MESSAGE COUNTERS
	CLRQ	W^TST$GL_XMITINTE	; ZERO TRANSMIT AND RECEIVE
	MOVL	#1,W^TST$GL_STATUS	; SET AST STATUS CODE TO SUCCESS
					;  INTERRUPT MESSAGE COUNTERS
	CLRB	W^TST$GB_ASTFLAGS	;NOTE TIMER RUNNING
	MOVAL	TST$QB_QHEAD,TST$QB_QHEAD;INIT QUEUE HEAD
	MOVAL	TST$QB_QHEAD,TST$QB_QHEAD+4
;
; PUT REPETITIONS OF THE STANDARD DATA PATTERN IN THE INTERRUPT MESSAGE BUFFER
; BEGINNING AT BUFFER+4.
;

	MOVAB	W^TST$GB_INTEBUF,R3	; GET ADDRESS OF MESSAGE
	CLRL	(R3)+			; INITIALIZE MESSAGE SEQUENCE NUMBER
	MOVZWL	W^TST$GW_SIZE,R4	; GET MESSAGE SIZE
	CMPW	#4,R4			;ANY DATA IN MSG?
	BGEQ	30$			;NOPE DONT FILL BUFFER
	SUBL2	#4,R4			; REDUCE SIZE ACCORDINGLY
	BSBW	TST$STANDARD		; PUT STD DATA PATTERN IN BUFFER

30$:
;
; RECEIVE [AND TRANSMIT] INTERRUPT MESSAGES UNTIL DTS DISCONNECTS THE LINK
;

	MOVL	#EFN_K_READ_MAIL,R2	; GET FUNCTION/INDEX CODE
	MOVZBL	#TST$K_MAILBUF,R4	; GET MAILBOX BUFFER SIZE
	MOVAB	W^TST$MAILAST_DTR,R5	; GET ADDRESS OF AST ROUTINE
	BSBW	TST$QIOAST		; START UP READ MAILBOX STREAM

;
; WAIT FOR LINK DISCONNECT
;

	BRB	110$			;CHECK FOR ASTS
100$:
	$HIBER_S			;GO TO SLEEP TILL AN AST
110$:
	BLBS	W^TST$GB_ASTFLAGS,120$	;JUMP IF TIMER EXPIRED
	REMQUE	@TST$QB_QHEAD,R0	;DEQUEUE AN AST
	BVS	100$			;NOTHING THERE ,SLEEP
	MOVL	TST$QB_CODE(R0),R2		;QIO FUNCTION/CODE
	MOVL	TST$QB_BUFLEN(R0),R4		;SIZE FOR DATA MSG
	MOVL	TST$QB_ASTADR(R0),R5	;AST ADDRESS FOR QIO
	BSBW	TST$QIOAST		;DO QIO WITH AST
	CHECK_SS			;MAKE SERVICE OKAY
	BLBC	R1,INTE_FAILURE		;LINK ABORTED
	BRB	110$			;DEQUEUE ANOTHER
120$:

;
; INTERRUPT TEST IS FINISHED
;

	MOVL	W^TST$GL_STATUS,R0	; POST STATUS
INTE_FAILURE:				; ENTER HERE IF TEST FAILED
	MOVAB	W^TST$GT_INTE,R1	; RETURN ADDRESS OF TEST ID STRING
	RSB				; EXIT

	.SBTTL	TST$MISC_DTR - MISCELLANEOUS TEST
	.PSECT	TST$CODE	NOWRT

;++
; FUNCTIONAL DESCRIPTION:
;
;	NONE
;
; CALLING SEQUENCE:
;
;	BSB/JSB	TST$MISC_DTR
;
; INPUT PARAMETERS:
;
;	R9	TEST SUBFUNCTION VALUE
;	R10	ADDRESS OF NCB USERDATA FIELD (COUNTED ASCII STRING)
;	R11	ADDRESS OF NCB DESCRIPTOR BLOCK
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	R0	COMPLETION CODE
;	R1	ADDRESS OF TEST ID STRING
;	R2-R11	DESTROYED
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	R0	1 = SUCCESS; 0 = FAILURE
;
; SIDE EFFECTS:
;
;	NONE
;
;--

TST$MISC_DTR::				; ENTRY POINT
MISC_SUCCESS:				; TEST WAS SUCCESSFUL
	MOVL	#1,R0			; SET COMPLETION CODE TO SUCCESS
MISC_FAILURE:				; ENTER HERE IF TEST FAILED
	MOVAB	W^TST$GT_MISC,R1	; RETURN ADDRESS OF TEST ID STRING
	RSB				; EXIT

	.SBTTL	TST$BAD_DTR - INVALID TEST TYPE
	.PSECT	TST$CODE	NOWRT

;++
; FUNCTIONAL DESCRIPTION:
;
;	NONE
;
; CALLING SEQUENCE:
;
;	BSB/JSB	TST$BAD_DTR
;
; INPUT PARAMETERS:
;
;	R9	TEST SUBFUNCTION VALUE
;	R10	ADDRESS OF NCB USERDATA FIELD (COUNTED ASCII STRING)
;	R11	ADDRESS OF NCB DESCRIPTOR BLOCK
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	R0	COMPLETION CODE
;	R1	ADDRESS OF TEST ID STRING
;	R2-R11	DESTROYED
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	R0	8 = FAILURE
;
; SIDE EFFECTS:
;
;	NONE
;
;--

TST$BAD_DTR::				; ENTRY POINT
	BSBW	TST$CONN_REJECT		; ISSUE CONNECT REJECT
	MOVL	#DTS$_BADFUNC,R0			; GIVE REASON FOR FAILURE
	MOVAB	W^TST$GT_ERROR,R1	; RETURN ADDRESS OF TEST ID STRING
	RSB				; EXIT
	.END
