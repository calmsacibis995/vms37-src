	.TITLE	TST$DTRMAIN - DTR MAINLINE
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY: DTS/DTR DECNET TEST PACKAGE
;
; ABSTRACT:
;
;	DTS/DTR ARE COOPERATING TEST PROGRAMS THAT EXERCISE NSP LEVEL
;	FUNCTIONS ON A DECNET/VAX-11 NODE. DTS (SENDER) INITIATES A TEST
;	SEQUENCE WHILE DTR (RECEIVER) IS THE PASSIVE PARTNER THAT PERFORMS
;	THE REQUESTED FUNCTION. FIVE BASIC TESTS ARE IMPLEMENTED:
;
;	1.  THE CONNECT TEST EXERCISES THE CONNECT ACCEPT/REJECT LOGIC
;	    WITH/WITHOUT OPTIONAL DATA.
;
;	2.  THE DATA TEST TRANSMITS DATA MESSAGES AND OPTIONALLY COMPUTES
;	    THROUGHPUT STATISTICS. VARIOUS DATA VALIDATION CHECKS
;	    AND FLOW CONTROL MECHANISMS MAY BE ENABLED.
;
;	3.  THE DISCONNECT TEST EXERCISES THE DISCONNECT SYNCHRONOUS/ABORT
;	    LOGIC WITH/WITHOUT OPTIONAL DATA.
;
;	4.  THE INTERRUPT TEST TRANSMITS INTERRUPT MESSAGES AND OPTIONALLY
;	    COMPUTES THROUGHPUT STATISTICS. VARIOUS DATA VALIDATION
;	    CHECKS AND FLOW CONTROL MAY BE ENABLED.
;
;	5.  THE MISCELLANEOUS TEST EXERCISES DECNET/VAX-11 SPECIFIC
;	    FUNCTIONS AND VALIDATES ERROR LOGIC.
;
; ENVIRONMENT: DTR RUNS IN USER MODE AND REQUIRES NETWORK PRIVILEGE.
;
; AUTHOR: JAMES A. KRYCKA,	CREATION DATE: 11-AUG-77
;
; MODIFICATIONS:
;
;	X0.1-11	DJD0001		Darrell Duffy	10-December-1979
;		Change to use LIB$ASN_WTH_MBX
;
;--

	.SBTTL	DECLARATIONS

;
; INCLUDE FILES:
;
	$DTSDEF
	CMDDEF				; DEFINE COMMAND LANGUAGE SYMBOLS
	.IIF NE	K_LIST_MEB, .LIST MEB	; DEFINED IN DTPREFIX.MAR
;
; MACROS:
;
;	NONE
;
; EQUATED SYMBOLS:
;
;	NONE
;
; OWN STORAGE:
;
;	NONE

	.SBTTL	TST$START_DTR - MAINLINE
	.PSECT	TST$CODE	NOWRT
R::					; SYMBOL FOR DEBUGGING PURPOSES

;++
; FUNCTIONAL DESCRIPTION:
;
;	NONE
;
; CALLING SEQUENCE:
;
;	DTR IS INITIATED BY NETACP VIA AN NSP CONNECT INITIATE REQUEST
;	FROM DTS.
;
; INPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	NONE
;
; SIDE EFFECTS:
;
;	NONE
;
;--

	.ENTRY	TST$START_DTR,^M<>	; ENTRY POINT FROM EXECUTIVE

;
; CREATE A TEMPORARY MAILBOX THAT WILL BE USED AS THE ASSOCIATED LINK
; CHANNEL MAILBOX AND ASSIGN A CHANNEL TO IT.
;

;
; CREATE A CONTROL/INFORMATION PATH TO NETACP IN PREPARATION FOR
; NON-TRANSPARENT NETWORK I/O. ALSO ASSOCIATE A MAILBOX WITH THE
; CHANNEL.
;

;
;	These things are all done by the LIB$ASN_WTH_MBX routine
;

	PUSHL	#TST$K_MAILQUOTA	; Setup mailbox quota
	MOVL	SP, R2			; Save its address
	PUSHL	#TST$K_MAILBUF		; Mailbox message size
	MOVL	SP, R1			; its address too
	PUSHAW	W^TST$GW_MAILCHAN	; Address of mailbox channel
	PUSHAW	W^TST$GW_LINKCHAN	; Address for link channel
	PUSHR	#^M<R1, R2>		; Those addresses we saved
	PUSHAQ	W^TST$GQ_LINKNAME	; The name for the device (_NET)
	CALLS	#5, LIB$ASN_WTH_MBX	; Assign the channels and create mbx
	ADDL2	#8, SP			; Dump the quota and message size
	CHECK_SS			; Check the system service status code

;
; TRANSLATE THE LOGICAL NAME 'SYS$NET'. ITS EQUIVALENCE STRING IS
; SET-UP BY NETACP TO BE THE ENTIRE NETWORK CONNECT BLOCK (NCB) WHICH
; IS REQUIRED TO GAIN NON-TRANSPARENT ACCESS TO THE NETWORK.
;

	MOVAQ	W^TST$GQ_NCB,R11	; GET ADDRESS OF NCB DESCRIPTOR BLOCK
	$TRNLOG_S LOGNAM=W^TST$GQ_SYSNAME- ; ADDR OF LOGICAL NAME DESCRIPTOR
		RSLLEN=(R11)-		; UPDATE SIZE IN NCB DESCRIPTOR
		RSLBUF=(R11)		; PUT TRANSLATED STRING IN NCB
	CHECK_SS			; CHECK STATUS CODE

;++
; THE GENERAL FORMAT OF THE EQUIVALENCE STRING DERIVED FROM SYS$NET IS:
;
;	nodespec::"objecttype=taskid/netacp_string"
;
; THE FOLLOWING WILL BE OUTPUT TO THE PRINT FILE:
;
;	nodespec::"objecttype=taskid"
;
; THE FOLLOWING WILL BE PUT INTO THE NCB FOR A CONNECT ACCEPT/REJECT
; WITHOUT USERDATA:
;
;	nodespec::"objecttype=taskid/next_two_bytes"
;
; THE FOLLOWING WILL BE PUT INTO THE NCB FOR A CONNECT ACCEPT/REJECT
; WITH USERDATA:
;
;	nodespec::"objecttype=taskid/next_two_bytes_plus_counted_string"
;--

	LOCC	#^A\/\,(R11),@4(R11)	; FIND TASKID DELIMITER
	BNEQU	10$			; BRANCH IF SLASH FOUND
	BRW	EXIT			; OTHERWISE IT'S A FATAL ERROR!!
10$:	ADDL3	#<1+2>,R1,R10		; COMPUTE ADDRESS OF USERDATA COUNTED
					;  ASCII STRING BY SKIPPING OVER
					;  SLASH AND FIRST TWO BYTES OF
					;  NETACP_STRING DATA
	SUBL3	4(R11),R1,R6		; DETERMINE LENGTH OF NCB STRING
					;  THRU TASKID FIELD FOR PRINTOUT
					;  NOTE, NO MATCHING QUOTE INCLUDED!
	ADDL3	#<1+16>,R10,R2		; COMPUTE ADDRESS OF ONE BYTE PAST
					;  USERDATA STRING; NOTE, NETACP
					;  ALWAYS ALLOCATES 17 BYTES FOR
					;  THE COUNTED STRING
	MOVB	#^A\"\,(R2)+		; TERMINATE NCB STRING WITH
					;  MATCHING QUOTE
	SUBL3	4(R11),R2,(R11)		; UPDATE SIZE OF SHORTENED NCB
					;  STRING IN NCB DESCRIPTOR

;
; PROCESS THE FUNCTION AND SUBFUNCTION VALUES OF THE REQUEST FROM DTSEND
; STORED IN THE USERDATA FIELD OF THE NETACP_STRING.
;

	MOVZBL	1(R10),R5		; GET TESTTYPE FIELD VALUE
	BBCC	#7,R5,20$		; IS PRINT OPTION SPECIFIED?
	MOVB	#VAL_K_PRIN_YES,W^TST$GB_PRINT ; YES, UPDATE PRINT VALUE
20$:	MOVB	R5,W^TST$GB_TEST	; STORE TESTTYPE (FUNCTION) VALUE
	MOVZBL	2(R10),R9		; GET TYPE (SUBFUNCTION) VALUE
	MOVB	R9,W^TST$GB_TYPE	; STORE TYPE VALUE

;
; OPEN THE PRINT FILE
;

	CMPB	W^TST$GB_PRINT,-	; IS PRINT OPTION SPECIFIED?
		#VAL_K_PRIN_YES		;
	BNEQ	DISPATCH		; BRANCH IF NO
	$OPEN	FAB=W^TST$PRTFAB	; OPEN THE FILE
	CHECK_RMS			; CHECK COMPLETION CODE
	$CONNECT RAB=W^TST$PRTRAB	; ESTABLISH A RECORD STREAM
	CHECK_RMS			; CHECK COMPLETION CODE

;
; OUTPUT THE INITIALIZATION MESSAGE TO THE PRINT FILE
;

	$FAO_S	CTRSTR=W^TST$GQ_INIT-	; FORMAT MESSAGE
		OUTLEN=W^TST$GW_PRTLEN-	;
		OUTBUF=W^TST$GQ_PRTBUF-	;
		P1=#TST$GT_DTR-		; INSERT DTR ID
		P2=#TST$GT_VERSION-
		P3=#0			; INSERT DATE AND TIME
	CHECK_SS			; CHECK STATUS CODE
	BSBW	TST$PRINT_FAO		; PRINT MESSAGE

;
; OUTPUT THE IDENTITY OF THE REQUESTOR TO THE PRINT FILE
;

	$FAO_S	CTRSTR=W^TST$GQ_CALLER-	; FORMAT MESSAGE
		OUTLEN=W^TST$GW_PRTLEN-	;
		OUTBUF=W^TST$GQ_PRTBUF-	;
		P1=#TST$GT_DTR-		; INSERT DTR ID
		P2=#TST$GT_VERSION-	; INSERT DTR VERSION NUMBER
		P3=R6-			; LENGTH OF STRING LESS MATCHING QUOTE
		P4=4(R11)		; ADDRESS OF NCB STRING
	CHECK_SS			; CHECK STATUS CODE
	BSBW	TST$PRINT_FAO		; PRINT MESSAGE

;
; DISPATCH TO APPROPRIATE ROUTINE FOR EXECUTING THE COMMAND
;

DISPATCH:				;
	PUSHAB	B^TEST_COMPLETE		; PUT RETURN ADDRESS ON STACK
					;  SO THAT ROUTINES EXECUTED BY
					;  'CASE' CAN EXIT VIA 'RSB'
	$CASEB	SELECTOR=R5,DISPL=<-	; DISPATCH TO:
			TST$CONN_DTR-	;  CONNECT TEST
			TST$DATA_DTR-	;  DATA TEST
			TST$DISC_DTR-	;  DISCONNECT TEST
			TST$INTE_DTR-	;  INTERRUPT TEST
			TST$MISC_DTR-	;  MISCELLANEOUS NSP TEST
	>				;
	BRW	TST$BAD_DTR		;  INVALID TEST TYPE

;
; RETURN HERE AFTER COMPLETING THE TEST
;

TEST_COMPLETE:				;
	CMPB	W^TST$GB_PRINT,-	; IS PRINT OPTION SPECIFIED?
		#VAL_K_PRIN_YES		;
	BNEQ	TERMINATE		; BRANCH IF NO

;
; OUTPUT END-OF-TEST MESSAGE TO THE PRINT FILE
;

	MOVW	#3,W^TST$GT_DTSMSG	;ASSUME THERE IS AN FAO ARG
	MOVL	R0,W^TST$GL_DTERROR	;SETUP ERROR CODE
	CMPL	#1,R0
	BNEQU	1$
	MOVW	#1,W^TST$GT_DTSMSG
1$:
	$PUTMSG_S	MSGVEC=W^TST$GT_DTSMSG-
			FACNAM=W^TST$GQ_DTRDESC
	CHECK_SS			; CHECK STATUS CODE
	CMPL	#1,W^TST$GL_DTERROR
	BEQLU	2$
	BRW	W^TERMINATE		;LEAVE DTR
2$:
	CMPB	W^TST$GB_TEST,#VAL_K_TEST_DATA	;DATA TEST?
	BEQLU	SUMMARY			; YES, THERE'S MORE TO DO
	CMPB	W^TST$GB_TEST,#VAL_K_TEST_INTE ; WAS THIS AN INTERRUPT TEST?
	BNEQU	TERMINATE		; NO, FINISHED
	MOVQ	W^TST$GL_XMITINTE,-	; YES, COPY TRANSMIT AND RECEIVE
		W^TST$GL_XMITDATA	;  INTE COUNTERS TO DATA COUNTERS

;
; OUTPUT DATA/INTERRUPT TEST SUMMARY INFORMATION TO THE PRINT FILE
;

SUMMARY:				;
	MOVZWL	W^TST$GW_SIZE,R0	; GET MESSAGE SIZE
	ADDL3	W^TST$GL_XMITDATA,-	; CALCULATE TOTAL NUMBER OF
		W^TST$GL_RECVDATA,R1	; MESSAGES TRANSFERRED
	MULL3	R0,R1,R2		; CALCULATE TOTAL NUMBER OF
					;  BYTES TRANSFERRED
	$FAO_S	CTRSTR=W^TST$GQ_STAT3-	; FORMAT MESSAGE
		OUTLEN=W^TST$GW_PRTLEN-	;
		OUTBUF=W^TST$GQ_PRTBUF-	;
		P1=R0-			; DATA MESSAGE SIZE
		P2=W^TST$GL_XMITDATA-	; TOTAL # OF MESSAGES TRANSMITTED
		P3=W^TST$GL_RECVDATA-	; TOTAL # OF MESSAGES RECEIVED
		P4=R2			; TOTAL # BYTES TRANSFERRED
	CHECK_SS			; CHECK STATUS CODE
	BSBW	TST$PRINT_FAO		; PRINT MESSAGE

;
; OUTPUT TERMINATION MESSAGE TO THE PRINT FILE
;

TERMINATE:				;
	CMPB	W^TST$GB_PRINT,-	; IS PRINT OPTION SPECIFIED?
		#VAL_K_PRIN_YES		;
	BNEQ	EXIT			; BRANCH IF NO
	$FAO_S	CTRSTR=W^TST$GQ_TERM-	; FORMAT MESSAGE
		OUTLEN=W^TST$GW_PRTLEN-	;
		OUTBUF=W^TST$GQ_PRTBUF-	;
		P1=#TST$GT_DTR-		; INSERT DTR ID
		P2=#0			; INSERT DATE AND TIME
	CHECK_SS			; CHECK STATUS CODE
	BSBW	TST$PRINT_FAO		; PRINT MESSAGE

;
; DEASSIGN I/O CHANNELS
;

;	$DASSGN_S CHAN=W^TST$GW_MAILCHAN ; DEASSIGN ASSOCIATED MAILBOX
;	CHECK_SS			; CHECK STATUS CODE
;	$DASSGN_S CHAN=W^TST$GW_LINKCHAN ; DEASSIGN COMMUNICATIONS LINK
;	CHECK_SS			; CHECK STATUS CODE
;	$CLOSE	FAB=W^TST$PRTFAB	; CLOSE PRINT FILE
EXIT:					;
	$EXIT_S				; EXIT TO VMS
	.END	TST$START_DTR
