	.TITLE	TST$DTSAST - DTS AST ROUTINES
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY: DTS/DTR DECNET TEST PACKAGE
;
; ABSTRACT: THIS MODULE CONTAINS QIO AND TIMER AST ROUTINES FOR DTS.
;
; ENVIRONMENT: DTS RUNS IN USER MODE AND REQUIRES NETWORK PRIVILEGE.
;
; AUTHOR: JAMES A. KRYCKA,	CREATION DATE: 7-DEC-77
;
; MODIFICATIONS:
;
;--

	.SBTTL	DECLARATIONS

;
; INCLUDE FILES:
;
	$DTSDEF				;DTS ERROR CODES
	CMDDEF				; DEFINE COMMAND LANGUAGE SYMBOLS
	EFNDEF				; DEFINE EFN'S AND FUNCTION CODES
	$MSGDEF				; DEFINE MAILBOX MESSAGE ID CODES
	.IIF NE	K_LIST_MEB, .LIST MEB	; DEFINED IN DTPREFIX.MAR
;
; MACROS:
;
;	NONE
;
; EQUATED SYMBOLS:
;
;	NONE
;
; OWN STORAGE:
;
;	NONE

	.SBTTL	TST$TIMER_DTS - TIMER AST ROUTINE
	.PSECT	TST$CODE	NOWRT
SA::					; SYMBOL FOR DEBUGGING PURPOSES

;++
; FUNCTIONAL DESCRIPTION:
;
;	NONE
;
; CALLING SEQUENCE:
;
;	CALL	#5,TST$TIMER_DTS	(INVOKED BY VAX/VMS AS AN AST)
;
; INPUT PARAMETERS:
;
;	4(AP)	ADDRESS OF QIO PARAMETER BLOCK
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	NONE
;
; SIDE EFFECTS:
;
;	NONE
;
;--

	.ENTRY	TST$TIMER_DTS,^M<R2,R3,R4> ; ENTRY POINT
	DECL	W^TST$GL_CLOCK		;DECREMENTS TIMEOUT CONSTANT
	BEQLU	10$			;IF NOT ZERO THEN TEST CONTINUES
	$SETIMR_S EFN=#EFN_K_TIMER-
		DAYTIM=W^TST$GQ_NANOSEC-
		ASTADR=W^TST$TIMER_DTS
	RET
10$:
	$CANCEL_S CHAN=W^TST$GW_LINKCHAN ; CANCEL ALL PENDING LINK I/O REQUESTS
	CHECK_SS			; CHECK STATUS CODE
	$CANCEL_S CHAN=W^TST$GW_MAILCHAN ; CANCEL MAILBOX READ
	CHECK_SS			; CHECK STATUS CODE
;	$SETEF_S EFN=#EFN_K_SIGNAL	; SIGNAL END OF TEST
	MOVB	#1,W^TST$GB_ASTFLAGS	;DENOTE CLOCK TIMEOUT
	$WAKE_S				;WAKEUP MAINLINE
	CHECK_SS			; CHECK STATUS CODE
	RET				; EXIT

	.SBTTL	TST$XMITAST_DTS - TRANSMIT DATA MESSAGE AST ROUTINE
	.PSECT	TST$CODE	NOWRT

;++
; FUNCTIONAL DESCRIPTION:
;
;	NONE
;
; CALLING SEQUENCE:
;
;	CALL	#5,TST$XMITAST_DTS	(INVOKED BY VAX/VMS AS AN AST)
;
; INPUT PARAMETERS:
;
;	4(AP)	ADDRESS OF QIO PARAMETER BLOCK
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	NONE
;
; SIDE EFFECTS:
;
;	NONE
;
;--

	.ENTRY	TST$XMITAST_DTS,^M<R2>	; ENTRY POINT
	CHECK_IOSB W^TST$GQ_XMITIOSB	; CHECK I/O STATUS CODE
	BLBC	R1,10$			; BRANCH ON FAILURE
	CMPW	R2,W^TST$GW_SIZE	; IS MESSAGE CORRECT SIZE?
	BNEQ	20$			; BRANCH ON ERROR
	MOVZWL	W^TST$GQ_XMITIOSB+2,-(SP) ; GET SIZE OF MESSAGE
	PUSHAL	W^TST$GB_XMITBUF	; GET ADDRESS OF MESSAGE BUFFER
	PUSHL	#0			; DENOTE A TRANSMIT
	MOVZBL	W^TST$GB_DISPLAY,-(SP)	; GET MAXIMUM BYTES TO DISPLAY
	CALLS	#4,W^TST$DISPLAY_MSG	; OUTPUT MESSAGE TO PRINT FILE
	INCL	W^TST$GL_XMITDATA	; INCREMENT COUNTER
	INCL	W^TST$GB_XMITBUF	; INCREMENT MESSAGE SEQUENCE NUMBER
;	$QIO_G	@4(AP)			; RE-ISSUE TRANSMIT DATA QIO
	INSQUE	W^TST$QB_XMTDATA,-
		@TST$QB_QHEAD+4		;QUEUE DATA AST 
	$WAKE_S				;WAKEUP MAINLINE FOR REQUEUE
	
	CHECK_SS			; CHECK STATUS CODE
10$:	RET				; EXIT
20$:	MOVL	#DTS$_BADDATLEN,W^TST$GL_STATUS	;NOTE BAD DATA LEN
	RET				; EXIT

	.SBTTL	TST$RECVAST_DTS - RECEIVE DATA MESSAGE AST ROUTINE
	.PSECT	TST$CODE	NOWRT

;++
; FUNCTIONAL DESCRIPTION:
;
;	NONE
;
; CALLING SEQUENCE:
;
;	CALL	#5,TST$RECVAST_DTS	(INVOKED BY VAX/VMS AS AN AST)
;
; INPUT PARAMETERS:
;
;	4(AP)	ADDRESS OF QIO PARAMETER BLOCK
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	NONE
;
; SIDE EFFECTS:
;
;	NONE
;
;--

	.ENTRY	TST$RECVAST_DTS,^M<R2>	; ENTRY POINT
	CHECK_IOSB W^TST$GQ_RECVIOSB	; CHECK I/O STATUS CODE
	BLBC	R1,10$			; BRANCH ON FAILURE
	CMPW	R2,W^TST$GW_SIZE	; IS MESSAGE CORRECT SIZE?
	BNEQ	20$			; BRANCH ON ERROR
	MOVZWL	W^TST$GQ_RECVIOSB+2,-(SP) ; GET SIZE OF MESSAGE
	PUSHAL	W^TST$GB_RECVBUF	; GET ADDRESS OF MESSAGE BUFFER
	PUSHL	#1			; DENOTE A RECEIVE
	MOVZBL	W^TST$GB_DISPLAY,-(SP)	; GET MAXIMUM BYTES TO DISPLAY
	CALLS	#4,W^TST$DISPLAY_MSG	; OUTPUT MESSAGE TO PRINT FILE
	INCL	W^TST$GL_RECVDATA	; INCREMENT COUNTER
;	$QIO_G	@4(AP)			; RE-ISSUE RECEIVE DATA QIO
	INSQUE	W^TST$QB_RCVDATA,-
		@TST$QB_QHEAD+4		;QUEUE DATA AST 
	$WAKE_S				;WAKE MAINLINE TO REQUEUE READ
	CHECK_SS			; CHECK STATUS CODE
10$:	RET				; EXIT
20$:	MOVL	#DTS$_BADDATLEN,W^TST$GL_STATUS	;NOTE BAD LENGTH
	RET				; EXIT

	.SBTTL	TST$MAILAST_DTS - READ MAILBOX AST ROUTINE
	.PSECT	TST$CODE	NOWRT

;++
; FUNCTIONAL DESCRIPTION:
;
;	NONE
;
; CALLING SEQUENCE:
;
;	CALL	#5,TST$MAILAST_DTS	(INVOKED BY VAX/VMS AS AN AST)
;
; INPUT PARAMETERS:
;
;	4(AP)	ADDRESS OF QIO PARAMETER BLOCK
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	NONE
;
; SIDE EFFECTS:
;
;	NONE
;
;--

	.ENTRY	TST$MAILAST_DTS,^M<R2,R6,R7> ; ENTRY POINT
	CHECK_IOSB W^TST$GQ_MAILIOSB	; CHECK I/O STATUS CODE
	BLBC	R1,10$			; BRANCH ON FAILURE
	BSBW	TST$EXAM_MAIL		; EXAMINE THE MESSAGE
	CMPW	R6,#MSG$_INTMSG		; IS IT AN INTERRUPT MESSAGE?
	BNEQU	20$			; NO
	CMPB	(R7),W^TST$GW_SIZE	; IS MESSAGE CORRECT SIZE?
	BNEQ	30$			; BRANCH ON ERROR
	MOVZBL	(R7)+,-(SP)		; GET SIZE OF MESSAGE
	PUSHL	R7			; GET ADDRESS OF MESSAGE BUFFER
	PUSHL	#1			; DENOTE A RECEIVE
	MOVZBL	W^TST$GB_DISPLAY,-(SP)	; GET MAXIMUM BYTES TO DISPLAY
	CALLS	#4,W^TST$DISPLAY_MSG	; OUTPUT MESSAGE TO PRINT FILE
	INCL	W^TST$GL_RECVINTE	; YES, INCREMENT COUNTER
;	$QIO_G	@4(AP)			; RE-ISSUE READ MAILBOX QIO
	INSQUE	W^TST$QB_RCVMAIL,-
		@TST$QB_QHEAD+4		;QUEUE ANOTHER READ
	INSQUE	W^TST$QB_XMTINT,-
		@TST$QB_QHEAD+4		;QUEUE ANOTHER WRITE
	$WAKE_S				;WAKE MAINLINE TO REQUEUE READ
	CHECK_SS			; CHECK STATUS CODE
10$:	RET				; EXIT
20$:	MOVL	#DTS$_BADMAIL,-
		W^TST$GL_STATUS
	MOVZWL	R6,W^TST$GL_FAOARG	;GET TYPE OF MAIL
	$CANTIM_S			; CANCEL THE TIMER
	CHECK_SS			; CHECK STATUS CODE
	$CANCEL_S CHAN=W^TST$GW_LINKCHAN ; CANCEL ALL PENDING LINK I/O REQUESTS
	CHECK_SS			; CHECK STATUS CODE
	MOVB	#1,W^TST$GB_ASTFLAGS	;NOTE END OF TEST
	$WAKE_S				;WAKE MAIN ROUTINE
	CHECK_SS			; CHECK STATUS CODE
	RET				; EXIT
30$:	MOVL	#DTS$_BADDATLEN,W^TST$GL_STATUS
	RET				; EXIT

	.SBTTL	TST$INTEAST_DTS - TRANSMIT INTERRUPT MESSAGE AST ROUTINE
	.PSECT	TST$CODE	NOWRT

;++
; FUNCTIONAL DESCRIPTION:
;
;	NONE
;
; CALLING SEQUENCE:
;
;	CALL	#5,TST$INTEAST_DTS	(INVOKED BY VAX/VMS AS AN AST)
;
; INPUT PARAMETERS:
;
;	4(AP)	ADDRESS OF QIO PARAMETER BLOCK
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	NONE
;
; SIDE EFFECTS:
;
;	NONE
;
;--

	.ENTRY	TST$INTEAST_DTS,^M<R2>	; ENTRY POINT
	CMPW	#SS$_NOSOLICIT,-
		W^TST$GQ_INTEIOSB	;INT MSG MAY HAVE NOT BEEN REQUESTED
	BNEQU	2$			;IF NOT CONTINUE
	$SETIMR_S	EFN=#10,DAYTIM=W^TST$GQ_NANOSEC
	$WAITFR_S		EFN=#10		;WAIT A SECOND BEFORE RESENDING
	BRB		5$
2$:
	CHECK_IOSB W^TST$GQ_INTEIOSB	; CHECK I/O STATUS CODE
	BLBC	R1,10$			; BRANCH ON FAILURE
	CMPW	R2,W^TST$GW_SIZE	; IS MESSAGE CORRECT SIZE?
	BNEQ	20$			; BRANCH ON ERROR
	MOVZWL	W^TST$GQ_INTEIOSB+2,-(SP) ; GET SIZE OF MESSAGE
	PUSHAL	W^TST$GB_INTEBUF	; GET ADDRESS OF MESSAGE BUFFER
	PUSHL	#0			; DENOTE A TRANSMIT
	MOVZBL	W^TST$GB_DISPLAY,-(SP)	; GET MAXIMUM BYTES TO DISPLAY
	CALLS	#4,W^TST$DISPLAY_MSG	; OUTPUT MESSAGE TO PRINT FILE
	INCL	W^TST$GL_XMITINTE	; INCREMENT COUNTER
	INCL	W^TST$GB_INTEBUF	; INCREMENT MESSAGE SEQUENCE NUMBER
;	$QIO_G	@4(AP)			;RE_ISSUE TRANSMIT INTERRUPT QIO
5$:
	CMPB	W^TST$GB_TYPE,-
		#VAL_K_TYPE_ECHO	;WAS THIS AN ECHO TEST
	BEQLU	10$			;YES JUST EXIT,READ WILL REQUE
	INSQUE	W^TST$QB_XMTINT,-
		@TST$QB_QHEAD+4		;QUEUE DATA AST 
	$WAKE_S				;WAKE MAINLINE FOR REQUEUE
	CHECK_SS			; CHECK STATUS CODE
10$:	RET				; EXIT
20$:	MOVL	#DTS$_BADDATLEN,W^TST$GL_STATUS
	RET				; EXIT
	.END
