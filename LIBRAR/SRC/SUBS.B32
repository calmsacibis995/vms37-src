MODULE LIB_SUBS (			! General subroutines for LIBRARIAN
		LANGUAGE (BLISS32),
		IDENT = 'V03-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  Library command processor
!
! ABSTRACT:
!
!	The VAX/VMS librarian is invoked by DCL to process the LIBRARY
!	command.  It utilizes the librarian procedure set to perform
!	the actual modifications to the library.
!
! ENVIRONMENT:
!
!	VAX native, user mode.
!
!--
!
!
! AUTHOR:  Benn Schreiber,	 CREATION DATE:  21-June-1979
!
! MODIFIED BY:
!
!	V01.01		Benn Schreiber		8-Nov-1979
!		Add routine getfilnamdesc
!--



LIBRARY
	'SYS$LIBRARY:STARLET';
REQUIRE
	'PREFIX';

EXTERNAL ROUTINE
	lib$get_vm : ADDRESSING_MODE (GENERAL),	!Allocate virtual memory
	lib$free_vm : ADDRESSING_MODE (GENERAL);!Deallocate virtual memory

GLOBAL ROUTINE lib_get_mem (bytes, retadr) =
!
! allocate virtual memory
!
lib$get_vm (bytes, .retadr);
GLOBAL ROUTINE lib_free_mem (bytes, address) =
!
! deallocate virtual memory
!
lib$free_vm (bytes, address);
GLOBAL ROUTINE lib_get_zmem (bytes, retadr) =
BEGIN
!
! Get zeroed memory
!
perform (lib_get_mem (.bytes, .retadr));
CH$FILL (0, .bytes, ..retadr);
RETURN true
END;

GLOBAL ROUTINE find_list_width (fab, listingwidth) =
BEGIN
!
! Determine the width of the listing line
! FAB is the fab of the open file, width returned in listingwidth.
!
MAP
    fab : REF BBLOCK;

BIND
    namblk = .fab [fab$l_nam] : BBLOCK;		!NAM block

LOCAL
    devnamdesc : BBLOCK [dsc$c_s_bln],
    devnambuf : VECTOR [nam$c_maxrss, BYTE],
    devnambufdesc : BBLOCK [dsc$c_s_bln],
    devinfobuf : BBLOCK [dib$k_length],
    devinfodesc : BBLOCK [dsc$c_s_bln],
    devchan;

LITERAL
    ch_escape = %X '1B';			!ASCII <ESC>
.listingwidth = 80;				!Assume default of 80
IF (.fab [fab$l_dev] AND dev$m_spl) NEQ 0	!If device is spooled
THEN BEGIN
    devnamdesc [dsc$w_length] = CH$FIND_CH (.namblk [nam$b_esl],
				.namblk [nam$l_esa], %ASCII ':')
				- .namblk [nam$l_esa];
    devnamdesc [dsc$a_pointer] = .namblk [nam$l_esa];
    END
ELSE BEGIN					!Device is not spooled
    devnamdesc [dsc$w_length] = CH$FIND_CH (.namblk [nam$b_rsl],
				.namblk [nam$l_rsa], %ASCII ':')
				- .namblk [nam$l_rsa];
    devnamdesc [dsc$a_pointer] = .namblk [nam$l_esa];
    END;
devnambufdesc [dsc$w_length] = nam$c_maxrss;
devnambufdesc [dsc$a_pointer] = devnambuf;
$TRNLOG (LOGNAM = devnamdesc, RSLLEN = devnambufdesc, RSLBUF = devnambufdesc);
IF .devnambuf [0] EQL ch_escape				!Check for process permanent file
THEN BEGIN
    devnambufdesc [dsc$w_length] = .devnambufdesc [dsc$w_length] - 4;
    devnambufdesc [dsc$a_pointer] = .devnambufdesc [dsc$a_pointer] + 4;
    END;
!
! Assign the device and then do a $GETCHN to get the width
!
IF $ASSIGN (DEVNAM = devnambufdesc, CHAN = devchan)
THEN BEGIN
    devinfodesc [dsc$w_length] = dib$k_length;		!Set up descriptor for $GETCHN
    devinfodesc [dsc$a_pointer] = devinfobuf;
    IF $GETCHN (CHAN = .devchan, SCDBUF = devinfodesc)
	THEN .listingwidth = .devinfobuf [dib$w_devbufsiz];
    $DASSGN (CHAN = .devchan);				!Deassign channel
    END;
RETURN true;
END;							!Of find_list_width

GLOBAL ROUTINE getfilnamdesc (fab, filedesc) =
BEGIN
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine returns a string descriptor for a file.
!
! Inputs:
!
!	fab		Address of the fab
!	filedesc	Address of string descriptor to store into
!
! Outputs:
!
!	filedesc is filled in.  The strings tried are:
!
!		1) resultant name string
!		2) expanded name string
!		2) filename string
!
!--

MAP
    fab : REF BBLOCK,
    filedesc : REF BBLOCK;

BIND
    nam = .fab [fab$l_nam] : BBLOCK;

LOCAL
    nameptr;

IF (filedesc [dsc$w_length] = .nam [nam$b_rsl]) NEQ 0	!If resultant name present
THEN filedesc [dsc$a_pointer] = .nam [nam$l_rsa]
ELSE IF (filedesc [dsc$w_length] = .nam [nam$b_esl]) NEQ 0 !If expanded name present
    THEN filedesc [dsc$a_pointer] = .nam [nam$l_esa]
    ELSE BEGIN
	filedesc [dsc$w_length] = .fab [fab$b_fns];	!Use filename string
	filedesc [dsc$a_pointer] = .fab [fab$l_fna];	! if all else fails
	END;
!
! Allocate memory and copy the filename to it
!
lib_get_mem (.filedesc [dsc$w_length], nameptr);
CH$MOVE (.filedesc [dsc$w_length], .filedesc [dsc$a_pointer], .nameptr);
filedesc [dsc$a_pointer] = .nameptr;
RETURN true
END;							!Of getfilnamdesc
END
ELUDOM
