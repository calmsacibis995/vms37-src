MODULE LIB_LIST (			! Routines to list contents of a library
		LANGUAGE (BLISS32),
		IDENT = 'V03-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  Library command processor
!
! ABSTRACT:
!
!	The VAX/VMS librarian is invoked by DCL to process the LIBRARY
!	command.  It utilizes the librarian procedure set to perform
!	the actual modifications to the library.
!
! ENVIRONMENT:
!
!	VAX native, user mode.
!
!--
!
!
! AUTHOR:  Benn Schreiber,	 CREATION DATE:  21-June-1979
!
! MODIFIED BY:
!
!	V02-008		RPG0048		Bob Grosso	17-Dec-1981
!		Suppress history header line on empty history and
!		report status of history.
!
!	V02-007		RPG0047		Bob Grosso	7-Aug-1981
!		Support /BEFORE and /SINCE.
!		Make descriptors shareable.
!
!	V02-006		RPG0039		Bob Grosso	1-Jul-1981
!		List header even when library is empty.
!
!	V02-005		RPG0038		Bob Grosso	12-Jun-1981
!		Add display_history.
!
!	V02-004	BLS0029		Benn Schreiber		23-Dec-1980
!		Convert to message compiler.  Add library of shareable
!		image symbol tables.
!--



LIBRARY
	'SYS$LIBRARY:STARLET.L32';		!System data structures
REQUIRE
	'PREFIX';				!Macros
REQUIRE
	'LIBDEF';				!Librarian data structures
REQUIRE
	'LBRDEF';				!Library processor defs.
REQUIRE
	'OLDFMTDEF';				!Old library format defintions

EXTERNAL ROUTINE
    lib_open_out,				!Open output file
    lib_close_out,				!Close output file
    lib_get_mem,				!Allocate memory
    lib_free_mem,				!and deallocate it
    lbr$lookup_key : ADDRESSING_MODE (GENERAL),	!Lookup a key in the index
    lbr$get_header : ADDRESSING_MODE (GENERAL),	!Return library header
    lbr$get_history : ADDRESSING_MODE (GENERAL),!Return library history
    lbr$get_index : ADDRESSING_MODE (GENERAL),	!Return contents of index
    lbr$set_module : ADDRESSING_MODE (GENERAL),	!Get module header
    lbr$search : ADDRESSING_MODE (GENERAL),	!Search for other keys
    SYS$FAO : ADDRESSING_MODE (GENERAL),
    SYS$FAOL : ADDRESSING_MODE (GENERAL);

EXTERNAL
    lib$before_date : BBLOCK,			!date for /BEFORE
    lib$since_date : BBLOCK,			!date for /SINCE
    lbr$gl_rmsstv : ADDRESSING_MODE (GENERAL),	!RMS STV from librarian
    lbr$gl_control : REF BBLOCK ADDRESSING_MODE (GENERAL),!Pointer to current librarian control table
    lib$gl_modnamix,				!Index number for module names
    lib$gl_objmodix,				!object library module index number
    lib$gl_objgsdix,				!object library gsd index number
    lib$gl_modlisl : VECTOR [2],		!Listhead for "listonly" name list
    lib$al_ascbinf : VECTOR [,LONG],		!Ascii/binary flags and name length
    lib$gl_type,				!type of library
    lib$gl_keysize,				!Max length of keys in library
    lib$gl_listwid,				!/WIDTH-set listing width
    lib$al_months : VECTOR [,LONG],		!Address of ASCIC month name strings
    lib$gl_ctlmsk : BLOCK [2],			!Librarian control mask
    lib$gl_libfdb : REF BBLOCK,			!FDB for library
    lib$gl_libctl,				!Library index number
    lib$al_rab : BBLOCK,			!RAB for I/O
    lib$al_typnames : VECTOR [,LONG],		!Names of library types
    lib$gl_lisfdb : REF BBLOCK;			!FDB for listing file

EXTERNAL LITERAL
    lbr$_nomtchfou,				!No match found
    lbr$_nulidx,				!Null index
    lib$_histerr,				!Error with update history access
    lib$_initerr,				!Error initializing library
    lib$_indexerr,				!Index error
    lib$_mhderr,				!Module header error
    lib$_nomtchfou,				!No match found
    lib$_lookuperr,				!Lookup error
    lib$_faofail;				!FAO failure

FORWARD ROUTINE
    display_history,				!Display library update history
    display_luhnames,				!Display modules names in LUH record
    display_object,				!Display one object module
    display_macro,				!Display one macro 
    check_date,					!Check dates for BEFORE and SINCE
    list_header,				!List the header of a library
    list_old_lib,				!List old format library
    display_globals,				!Display global symbols
    listselectdmods,				!List selected modules only
    lib_faol,					!format line with error handling
    output_listline;				!Write listing line

BIND ROUTINE
    display_shrstb = display_object,		!Same routine as objects
    display_usr = display_macro,		!User defined libraries
    display_text = display_macro,		!all the same to list so
    display_help = display_macro;		!Use the same routine

OWN
    line_width,
    globalcount,				!Counter for global symbol listing
    header_listed,				!True if header listed
    histhdr_listed,				!True if history header line printed
    curmatchdesc  : REF BBLOCK,			!Pointer to current key descriptor
    lib$al_luhop : VECTOR [3,LONG]
	INITIAL (CSTRING ('deleted '),
		 CSTRING ('inserted'),
		 CSTRING ('replaced')),
    outdesc : BBLOCK [dsc$c_s_bln],		!Descriptor for output buffer
    outsize,					!Length of FAO'd string
    outputbuffer : REF BLOCK [,BYTE];		!Pointer to output buffer

BIND
    fao_dirnamtyp  = $descriptor ('Directory of !AC library !AS on !20<!%D!>'),
    fao_line1      = $descriptor ('Creation date:  !20<!%D!>!6* !10<Creator:  !>!AC'),
    fao_line2      = $descriptor ('Revision date:  !20<!%D!>!6* !18<Library format:  !>!UL.!UL'),
    fao_line3      = $descriptor ('!20<Number of modules:  !>!5UL!17* !18<Max. key length:  !>!UL'),
    fao_line4      = $descriptor ('!20<Other entries:  !>!5UL!17* !28<Preallocated index blocks:  !>!5UL'),
    fao_line5      = $descriptor ('!29<Recoverable deleted blocks:  !>!5UL!8* !28<Total index blocks used:  !>!5UL'),
    fao_line6      = $descriptor ('!31<Max. Number history records:  !>!5UL!6* !26<Library history records:  !>!7UL'),
    fao_modhdr     = $descriptor ('!AS'),
    fao_modnamhdr  = $descriptor ('Module !AS'),
    fao_modhdr2    = $descriptor ('!31<!AS!> RFA !UL.:!4<!UW.!>(!XW)'),
    fao_modnamhdr2 = $descriptor ('Module !31<!AS!> RFA !UL.:!4<!UW.!>(!XW)'),
    fao_fulobjhdr  = $descriptor ('!16<!AS!> Ident !16<!AC!> Inserted !20<!%D!> !UL symbol!%S'),
    fao_fulobjhdr2 = $descriptor ('!AS Ident !AC Inserted !20<!%D!> !UL symbol!%S'),
    fao_fulobjhdr3 = $descriptor ('!16<!AS!> Ident !16<!AC!> Inserted !20<!%D!> !UL symbol!%S RFA !UL.:!4<!UW.!>(!XW)'),
    fao_fulobjhdr4 = $descriptor ('!AS Ident !AC Inserted !20<!%D!> !UL symbol!%S RFA !UL.:!4<!UW.!>(!XW)'),
    fao_fulobjhdr5 = $descriptor ('Module !16<!AS!> Ident !16<!AC!> Inserted !20<!%D!> !UL symbol!%S'),
    fao_fulobjhdr6 = $descriptor ('Module !AS Ident !AC Inserted !20<!%D!> !UL symbol!%S'),
    fao_gsmatch    = $descriptor ('!2XL,!6XL'),
    fao_flags      = $descriptor ('!AS'),
    fao_1blankline = $descriptor ('!/'),
    fao_selsrc     = $descriptor ('     Selectively searched'),
    fao_fulmodhdr  = $descriptor ('!16<!AS!> inserted !20<!%D!>'),
    fao_fulmodhdr2 = $descriptor ('!AS inserted !20<!%D!>'),
    fao_fulmodhdr3 = $descriptor ('!16<!AS!> inserted !20<!%D!> RFA !UL.:!4<!UW.!>(!XW)'),
    fao_fulmodhdr4 = $descriptor ('!AS inserted !20<!%D!> RFA !UL.:!4<!UW.!>(!XW)'),
    fao_histline   = $descriptor ('Library Update History'),
    fao_luhrechdr  = $descriptor ('!AC !AC !3UL module!%S on !20<!%D!>'),
    fao_oldcredat  = $descriptor ('Library created by LIB VX129.0'),	!**
    fao_oldlstupd  = $descriptor ('Last update was !ZL-!AC-!ZL !ZL:!ZL:!ZL'),
    fao_oldmnt	   = $descriptor ('!5UL modules allocated, !5UL used, !5UL free'),
    fao_oldgst     = $descriptor ('!5UL symbols allocated, !5UL used, !5UL free'),
    fao_oldelspc   = $descriptor ('!UL bytes of deleted, recoverable space'),
    fao_oldobjful  = $descriptor ('!16<!AS!> Ident !16<!AC!> Inserted !11<!%D!>'),
    fao_oldmacful  = $descriptor ('!16<!AS!> Inserted !11<!%D!>'),
    fao_oldobjful2 = $descriptor ('!16<!AS!> Ident !16<!AC!> Inserted !11<!%D!> RFA !UL.:!4<!UW.!>(!XW)'),
    fao_oldmacful2 = $descriptor ('!16<!AS!> Inserted !11<!%D!> RFA !UL.:!4<!UW.!>(!XW)'),
    lisdefext      = $descriptor ('SYS$DISK:[].LIS'), !Default listing extension

    lis_dispatch = PLIT (
				display_usr,	! usr defined library
				display_object,	!object
				display_macro,
				display_help,
				display_text,
				display_shrstb
				) : VECTOR;


GLOBAL ROUTINE lib_list_lib =
BEGIN

!++
!
! FUNCTIONAL DESCRIPTION:
!
!
!
! CALLING SEQUENCE:
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
!--

LOCAL
    status,
    headary : BBLOCK [lbr$c_pagesize];	 !Return library header info here

BIND
    lisdefnam = lib$gl_lisfdb  [fdb$l_defext] : BBLOCK;

header_listed = false;					!No header listed yet
CH$MOVE (dsc$c_s_bln, lisdefext, lisdefnam);		!Set up default output file
perform (lib_open_out (.lib$gl_lisfdb, lib$gl_libfdb [fdb$t_nam], !Open the output file
				true, line_width));
IF .lib$gl_listwid NEQ 0
THEN line_width = .lib$gl_listwid;

line_width = MIN (lib$c_lisreclng, .line_width);
perform (lib_get_mem (lib$c_lisreclng*2, outputbuffer),			!*2 to allow for long filenames
		lib$_initerr, 1, lib$gl_libfdb [fdb$l_namdesc]);
outdesc [dsc$w_length] = lib$c_lisreclng*2;
outdesc [dsc$a_pointer] = .outputbuffer;
!
!  If /HISTORY requested, then only print list if /FULL also
!
IF (.lib$gl_ctlmsk [lib$v_history] AND .lib$gl_ctlmsk [lib$v_full]) OR
   ( NOT .lib$gl_ctlmsk [lib$v_history] )
THEN
    BEGIN
    IF .lib$gl_ctlmsk [lib$v_only]				!Listing selected modules?
    THEN listselectdmods ()					! then do it
    ELSE BEGIN
	status = lbr$get_index (lib$gl_libctl, lib$gl_modnamix,
				.lis_dispatch [.lib$gl_type]);
	IF NOT .status
	THEN
	    IF .status NEQ lbr$_nulidx
	    THEN SIGNAL (lib$_indexerr, 1, lib$gl_libfdb [fdb$l_namdesc],
			.status, .lbr$gl_rmsstv);
	END;
    END;
!
! List header now if it didn't get out
!
IF NOT .header_listed
    THEN perform (list_header ());
!
! list the update history if requested
!
histhdr_listed = false;
IF  .lib$gl_ctlmsk [lib$v_history]	! If /HIST
THEN
    BEGIN
    !
    !    For each LUH record in the library, call display_history
    !
    perform ( lbr$get_history (lib$gl_libctl, display_history ),
		lib$_histerr, 1, lib$gl_libfdb [fdb$l_namdesc]);
    END;

lib_close_out (.lib$gl_lisfdb, false);			!close output file
lib_free_mem (lib$c_lisreclng, .outputbuffer);		!free the memory
RETURN true
END;					!Of lib_list_lib

ROUTINE display_history ( rec_desc ) =
BEGIN
!
!    This routine is called by lbr$get_history for each LUH record.
!    It prints the library update history record in the listing file.
!
MAP
    rec_desc : REF BBLOCK [dsc$c_s_bln];
BIND
    luhrec = .rec_desc [dsc$a_pointer] : BBLOCK;
LOCAL
    num_modules;

IF NOT .histhdr_listed 
THEN 
    BEGIN
    !
    !   Make sure that the header line needs to be printed.
    !   If /LIST/HIST then header has been printed.
    !   If /LIST/HIST/FULL then header and full library listing has been printed
    !   and the Library History header line is needed.
    !
    IF .lib$gl_ctlmsk [lib$v_full]
    THEN
	BEGIN
	perform (output_listline ());				! Print blank line
	perform (lib_faol (fao_histline, outsize, outdesc));	! Print history header line
	perform (output_listline ());				! Print blank line
	END;
    histhdr_listed = true;					! Only list header line once
    END;

num_modules = .luhrec [lhe$w_modcnt];	! Number of module names in update history record
perform ( lib_faol ( fao_luhrechdr, outsize, outdesc,
			luhrec [lhe$b_usrnamlen], 		! user who updated library
			.lib$al_luhop [(.luhrec [lhe$b_modcode] - 1)],	! what kind of update
			.num_modules,				! number of modules affected
			luhrec [lhe$l_time] ) );		! time of update
IF  .lib$gl_ctlmsk [lib$v_full] 
THEN 
    BEGIN
    !
    !    List module names in LUH record
    !    The module names are stored are counted ASCII strings after the 
    !    fixedsize portion of the LUH record.  
    !    Locate size byte and address of module name and call display_luhnames
    !    to print it.  Then use name length to hop over it and print next
    !    module name, till all have been printed.
    !
    LOCAL
	modnamsadr;	! Address where counted ASCII modules names begin
    modnamsadr = luhrec + lhe$c_fixedsize;	! First module name stored after fixedsize of LUH record
    WHILE .num_modules GTR 0 DO			! num_modules is decremented for each name listed
	BEGIN
	BIND 
	    namlen = .modnamsadr : BYTE,	! namlen contains length of module name
	    name = .modnamsadr + 1;		! name is bound to start of string
	perform (display_luhnames (.namlen, name) );	
	num_modules = .num_modules - 1;
	modnamsadr = .modnamsadr + 1 + .namlen;	! Skip past module name just listed, to the next one in the record
	END;
    perform (output_listline ());		! Flush the buffer
    perform (output_listline ());		! Print a blank line
    END;
RETURN true;
END;		! routine  display_history

ROUTINE display_luhnames (namelen, nameadr) =
BEGIN
!
! This routine is called by the library processor for each
! module name in the LUH record when /HIST/FULL is specified.
!

IF (.outsize + .lib$gl_keysize + 2) GTRU .line_width 	!enough line left?
THEN perform (output_listline ());			!output the line
CH$MOVE (.namelen, .nameadr, .outdesc [dsc$a_pointer]);	!copy name into buffer
outdesc [dsc$w_length] = .outdesc [dsc$w_length] -
			.lib$gl_keysize - 2;			!update descriptor
outdesc [dsc$a_pointer] = .outdesc [dsc$a_pointer] +
			.lib$gl_keysize + 2;
outsize = .outsize + .lib$gl_keysize + 2;			!and length of line used
RETURN true;
END;					!Of display_luhnames

ROUTINE display_object (keydesc, txtrfa) =
BEGIN
!
! This routine is called by the library processor for each object module.
! The information is printed in the listing file.
!
MAP
    keydesc : REF BBLOCK [dsc$c_s_bln],		!String descriptor
    txtrfa  : REF BBLOCK [rfa$c_length];
LOCAL
    shrgstring : VECTOR [sym$c_maxlng+1,BYTE],	!Buffer to hold formatted gsmatch
    shrgsdesc : BBLOCK [dsc$c_s_bln],		!Descriptor for shrgstring
    faostr,
    header : BBLOCK [lbr$c_maxhdrsiz];		!buffer to hold header

IF NOT .header_listed				!If library header not listed yet
THEN perform (list_header ());			! then do it now
IF .lib$gl_ctlmsk [lib$v_full]			!Full listing?
OR .lib$gl_ctlmsk [lib$v_before] OR .lib$gl_ctlmsk [lib$v_since]
OR (.lib$gl_ctlmsk [lib$v_names]		! or listing global symbols
	AND NOT .lib$gl_ctlmsk [lib$v_oldlib])	! and not old format library
THEN BEGIN
    LOCAL
	hdrdesc : BBLOCK [dsc$c_s_bln],		!descriptor for header buffer
	hdrlen;					!length of header read from file

    hdrdesc [dsc$w_length] = lbr$c_maxhdrsiz;	!set up header buffer descriptor
    hdrdesc [dsc$a_pointer] = header;
    rms_perform (lbr$set_module (lib$gl_libctl, .txtrfa, hdrdesc, hdrlen), !Read the module header
			lib$_mhderr, .lbr$gl_rmsstv, 2,
			.keydesc, lib$gl_libfdb [fdb$l_namdesc]);

    IF .lib$gl_ctlmsk [lib$v_before] OR .lib$gl_ctlmsk [lib$v_since]
    THEN
	IF NOT check_date ( header [mhd$l_datim] ) THEN RETURN true;		! if dates don't match, give up

    IF .lib$gl_ctlmsk [lib$v_full]			!Full listing
    THEN BEGIN
	IF .lib$gl_ctlmsk [lib$v_shrstb]		!If this is a shr image stb library
	THEN BEGIN
	    shrgsdesc [dsc$w_length] = sym$c_maxlng;	!Set up descriptor for buffer
	    shrgsdesc [dsc$a_pointer] = shrgstring [1];
	    SYS$FAO (fao_gsmatch, shrgsdesc, shrgsdesc,	!Format the GSMATCH
			.(header [mhd$t_objident])<24,8,0>,	!**Needs symbols**
			.(header [mhd$t_objident])<0,24,0>);
	    shrgstring [0] = .shrgsdesc [dsc$w_length];	!Set length of formatted string
	    END;
	IF NOT .lib$gl_ctlmsk [lib$v_address]		!If not printing RFA's
	THEN BEGIN
	    faostr = (IF .lib$gl_ctlmsk [lib$v_names]
			THEN fao_fulobjhdr5
			ELSE fao_fulobjhdr);
	    IF .keydesc [dsc$w_length] GTR 15		! but if module name
	    OR .header [mhd$b_objidlng] GTR 15		! or ident larger
		THEN faostr = (IF .lib$gl_ctlmsk [lib$v_names]
			THEN fao_fulobjhdr6
			ELSE fao_fulobjhdr2);
	    IF .lib$gl_ctlmsk [lib$v_oldlib] 		!If old format library
		THEN faostr = fao_oldobjful;
	    END
	ELSE BEGIN					!Printing RFA's
	    faostr = fao_fulobjhdr3;
	    IF .keydesc [dsc$w_length] GTR 15
	    OR .header [mhd$b_objidlng] GTR 15
		THEN faostr = fao_fulobjhdr4;
	    IF .lib$gl_ctlmsk [lib$v_oldlib]
		THEN faostr = fao_oldobjful2;
	    END;
	IF NOT .lib$gl_ctlmsk [lib$v_oldlib]
	THEN perform (lib_faol (.faostr, outsize, outdesc,	!Format the line
		.keydesc,
		(IF .lib$gl_ctlmsk [lib$v_shrstb] THEN shrgstring
						  ELSE header [mhd$b_objidlng]),
		 header [mhd$l_datim],
		.header [mhd$l_refcnt]-1, .txtrfa [rfa$l_vbn],
		.txtrfa [rfa$w_offset], .txtrfa [rfa$w_offset]))
	ELSE perform (lib_faol (.faostr, outsize, outdesc,
		.keydesc, header [mhd$b_objidlng], header [mhd$l_datim],
		.txtrfa [rfa$l_vbn], .txtrfa [rfa$w_offset],
		.txtrfa [rfa$w_offset]));
	IF .header [mhd$v_selsrc]			!If this is selctively searched module
!	OR .header [mhd$v_objtir]
	THEN BEGIN
	    IF .header [mhd$v_selsrc]
	    THEN perform (lib_faol (fao_selsrc, outsize, outdesc));
!	    IF .header [mhd$v_objtir]		!If module has TIR records
!	    THEN perform (lib_faol (fao_hastir, outsize, outdesc));
	    END;
	END
    END;
IF NOT .lib$gl_ctlmsk [lib$v_full]
THEN BEGIN
    faostr = fao_modhdr;
    IF .lib$gl_ctlmsk [lib$v_names]
	THEN faostr = fao_modnamhdr;
    IF .lib$gl_ctlmsk [lib$v_address]
	THEN faostr = (IF .lib$gl_ctlmsk [lib$v_names]
			THEN fao_modnamhdr2
			ELSE fao_modhdr2);
    perform (lib_faol (.faostr, outsize, outdesc, .keydesc,
		.txtrfa [rfa$l_vbn], .txtrfa [rfa$w_offset],
		.txtrfa [rfa$w_offset]));
    END;
IF .lib$gl_ctlmsk [lib$v_names]			!Want global symbols also?
AND (globalcount = .header [mhd$l_refcnt] - 1) NEQ 0 ! and there are some to list
THEN BEGIN 
    rms_perform (lbr$search (lib$gl_libctl, lib$gl_objgsdix,	!search for globals with same RFA
	.txtrfa, display_globals),
	lib$_indexerr, .lbr$gl_rmsstv, 1, lib$gl_libfdb [fdb$l_namdesc]);
    IF .outsize NEQ 0				!Partial globals line to list?
    THEN perform (output_listline ());		!yes--do it
    perform (output_listline ());		!Followed by a blank line
    END;
RETURN true
END;					!Of display_module

ROUTINE display_macro (keydesc, txtrfa) =
BEGIN
! 
! This routine lists one macro module
!
MAP
    keydesc : REF BBLOCK [dsc$c_s_bln],		!String descriptor
    txtrfa  : REF BBLOCK [rfa$c_length];
LOCAL
    faoptr,
    header : BBLOCK [lbr$c_maxhdrsiz];

IF NOT .header_listed
THEN perform (list_header ());			!List header if not done yet
IF .lib$gl_ctlmsk [lib$v_full]
OR .lib$gl_ctlmsk [lib$v_before] OR .lib$gl_ctlmsk [lib$v_since]
THEN BEGIN
    LOCAL
	hdrdesc : BBLOCK [dsc$c_s_bln],
	hdrlen;

    hdrdesc [dsc$w_length] = lbr$c_maxhdrsiz;
    hdrdesc [dsc$a_pointer] = header;
    rms_perform (lbr$set_module (lib$gl_libctl, .txtrfa, hdrdesc, hdrlen),
		lib$_mhderr, .lbr$gl_rmsstv, 2, .keydesc,
		lib$gl_libfdb [fdb$l_namdesc]);

    IF .lib$gl_ctlmsk [lib$v_before] OR .lib$gl_ctlmsk [lib$v_since]
    THEN				! if dates don't match, give up
	IF NOT check_date ( header [mhd$l_datim] ) THEN RETURN true; 

    IF NOT .lib$gl_ctlmsk [lib$v_address]
    THEN BEGIN
	faoptr = fao_fulmodhdr;
	IF .keydesc [dsc$w_length] GTR 15
		THEN faoptr = fao_fulmodhdr2;
	IF .lib$gl_ctlmsk [lib$v_oldlib]
		THEN faoptr = fao_oldmacful;
	END
    ELSE BEGIN
	faoptr = fao_fulmodhdr3;
	IF .keydesc [dsc$w_length] GTR 15
		THEN faoptr = fao_fulmodhdr4;
	IF .lib$gl_ctlmsk [lib$v_oldlib]
		THEN faoptr = fao_oldmacful2;
	END;
    perform (lib_faol (.faoptr, outsize, outdesc,
		.keydesc, header [mhd$l_datim], .txtrfa [rfa$l_vbn],
		.txtrfa [rfa$w_offset], .txtrfa [rfa$w_offset]));
    END
ELSE BEGIN
    faoptr = fao_modhdr;
    IF .lib$gl_ctlmsk [lib$v_address]
	THEN faoptr = fao_modhdr2;
    perform (lib_faol (.faoptr, outsize, outdesc, .keydesc,
	.txtrfa [rfa$l_vbn], .txtrfa [rfa$w_offset],
	.txtrfa [rfa$w_offset]));
    END;
RETURN true
END;

ROUTINE check_date (date) =
!----
!
! Functional description
!
!	This routine checks a single date against the /SINCE and /BEFORE 
!	qualifiers and returns whether it matches the date specification
!	or not.
!
! Input parameters
!
!	date		- Address of date to check
!	lib$before_date	- Date specified on /BEFORE qualifier
!	lib$since_date	- Date specified on /SINCE qualifier
!
! Routine value
!
!	True if dates match, else false.
!
!----
BEGIN

MAP
    date:	REF BBLOCK;		! Date to check against

LOCAL
    earlier,				! Boolean, says /BEFORE was true
    later;				! Boolean, says /SINCE was true

MACRO
    high_date	= 4, 0, 32, 0%,		! High-bits in specified date
    low_date	= 0, 0, 32, 0%;		! Low-bits in specified date

earlier = NOT .lib$gl_ctlmsk [lib$v_before];	! Assume no matches
later = NOT .lib$gl_ctlmsk [lib$v_since];	! for both /BEFORE and /SINCE.

!
! If the user said /BEFORE, and the date is previous to the specified date, 
! then set Boolean indicator that /BEFORE was satisfied.
!

IF .lib$gl_ctlmsk [lib$v_before]		! If /BEFORE was specified,
THEN
    IF (.date [high_date]		! and dates are LSSU
            LSSU .lib$before_date [high_date])
        OR ((.date [high_date]
            EQLU .lib$before_date [high_date])
            AND (.date [low_date]
            LSSU .lib$before_date [low_date]))
        THEN
            earlier = TRUE;		! Set /BEFORE satisfed.

!
! If the user said /SINCE, and the date is later than the specified date, then
! set the Boolean indicator that /SINCE was satisifed.
!

IF .lib$gl_ctlmsk [lib$v_since]		! If /SINCE was specified,
THEN
    IF (.date [high_date]		! and dates are GTRU
            GTRU .lib$since_date [high_date])
        OR ((.date [high_date]
            EQLU .lib$since_date [high_date])
            AND (.date [low_date]
            GTRU .lib$since_date [low_date]))
        THEN
            later = TRUE;		! Set /SINCE satisfied.

RETURN .earlier and .later;		! True only if both true

END;

ROUTINE list_header =
BEGIN
!
! This routine displays the module header
!
LOCAL
    headary : BBLOCK [lbr$c_pagesize];

header_listed = true;					!Flag header listed
IF .lib$gl_ctlmsk [lib$v_oldlib]			!If old library
THEN RETURN list_old_lib ();				!Then go do that
perform (lbr$get_header (lib$gl_libctl, headary),	!Get the library header
		lib$_indexerr, 1, lib$gl_libfdb [fdb$l_namdesc]);
lib$gl_type = .headary [lhi$l_type];
perform (lib_faol (fao_dirnamtyp, outsize, outdesc,	!Format the line
	.lib$al_typnames [.headary [lhi$l_type]],
	lib$gl_libfdb [fdb$l_namdesc], 0));		! include now date and time
!
! List data from header
!
perform (lib_faol (fao_line1, outsize, outdesc,
	headary [lhi$l_credat], headary [lhi$t_lbrver]));

perform (lib_faol (fao_line2, outsize, outdesc,
	headary [lhi$l_updtim], .headary [lhi$l_majorid],
	.headary [lhi$l_minorid]));

perform (lib_faol (fao_line3, outsize, outdesc,
	.headary [lhi$l_modcnt], .lib$gl_keysize));

perform (lib_faol (fao_line4, outsize, outdesc,
	.headary [lhi$l_idxcnt] - .headary [lhi$l_modcnt],
	.headary [lhi$l_hipreal] - 1));

perform (lib_faol (fao_line5, outsize, outdesc,
	.headary [lhi$l_freeblk], .headary [lhi$l_idxblks]));

perform (lib_faol (fao_line6, outsize, outdesc,
	.headary [lhi$l_maxluhrec], .headary [lhi$l_numluhrec]));

perform (output_listline ());			!Blank line at the end
RETURN true
END;						!Of list_header

ROUTINE list_old_lib =
BEGIN
!
! This routine lists an old (VMS R1) format library
!
LOCAL
    deletedbytes;

BIND
    header = .lbr$gl_control [lbr$l_hdrptr] : BBLOCK,
    delbytes = header [ohd$l_delbytes] : VECTOR [,WORD],
    lastupdate = header [ohd$t_linstim] : VECTOR [,WORD];

lib$gl_type = .header [lhd$b_type];
perform (lib_faol (fao_dirnamtyp, outsize, outdesc,
		.lib$al_typnames [.lib$gl_type],
		lib$gl_libfdb  [fdb$l_namdesc]));
perform (lib_faol (fao_oldcredat, outsize, outdesc,
		ofl$c_libverlng, header [ohd$t_libver]));
perform (lib_faol (fao_oldlstupd, outsize, outdesc,
		.lastupdate [2], .lib$al_months [.lastupdate [1]-1] , .lastupdate [0],
		.lastupdate [3], .lastupdate [4], .lastupdate [5]));
perform (lib_faol (fao_oldmnt, outsize, outdesc,
		.header [ohd$w_mntallo],
		.header [ohd$w_mntallo] - .header [ohd$w_mntaval],
		.header [ohd$w_mntaval]));
IF .header [ohd$w_gstallo] NEQ 0
THEN perform (lib_faol (fao_oldgst, outsize, outdesc,
		.header [ohd$w_gstallo],
		.header [ohd$w_gstallo] - .header [ohd$w_gstaval],
		.header [ohd$w_gstaval]));
deletedbytes = .delbytes [1] + .delbytes [0]*%X'10000';
perform (lib_faol (fao_oldelspc, outsize, outdesc,
		.deletedbytes));
perform (output_listline ());		!Blank line at the end
RETURN true
END;					!Of list_old_lib

ROUTINE display_globals (keydesc) =
BEGIN
!
! This routine is called by the library processor for each
! global symbol name when /NAMES is specified.
!
MAP
    keydesc : REF BBLOCK [dsc$c_s_bln];

IF (.outsize + .lib$gl_keysize + 2) GTRU .line_width 	!enough line left?
THEN perform (output_listline ());			!output the line
CH$MOVE (.keydesc [dsc$w_length], .keydesc [dsc$a_pointer], !copy name into buffer
			.outdesc [dsc$a_pointer]);
outdesc [dsc$w_length] = .outdesc [dsc$w_length] -
			.lib$gl_keysize - 2;			!update descriptor
outdesc [dsc$a_pointer] = .outdesc [dsc$a_pointer] +
			.lib$gl_keysize + 2;
outsize = .outsize + .lib$gl_keysize + 2;			!and length of line used
globalcount = .globalcount - 1;
RETURN (.globalcount NEQ 0)
END;					!Of display_globals

ROUTINE listselectdmods =
BEGIN
!
! Routine to list only selected modules from the library
!
LOCAL
    txtrfa : BBLOCK [dsc$c_s_bln],
    lnblk : REF BBLOCK,
    status,
    keydesc : BBLOCK [dsc$c_s_bln];

BUILTIN
    REMQUE;

WHILE NOT REMQUE (.lib$gl_modlisl, lnblk)
DO BEGIN
    keydesc [dsc$w_length] = .lnblk [lnb$b_namlng];
    keydesc [dsc$a_pointer] = lnblk [lnb$t_name];
    curmatchdesc = keydesc;
    IF NOT CH$FAIL (CH$FIND_CH (.lnblk [lnb$b_namlng], lnblk [lnb$t_name], !If wildcard
				%ASCII '%'))
	OR NOT CH$FAIL (CH$FIND_CH (.lnblk [lnb$b_namlng], lnblk [lnb$t_name],
				%ASCII '*'))
	THEN BEGIN
	    status = lbr$get_index (lib$gl_libctl, lib$gl_modnamix,	!Then check whole index
			.lis_dispatch [.lib$gl_type], keydesc);
	    IF .status EQL lbr$_nomtchfou
		THEN SIGNAL (lib$_nomtchfou, 1, keydesc)
		ELSE IF NOT .status
		    THEN SIGNAL (lib$_indexerr, 1, lib$gl_libfdb [fdb$l_namdesc],
				.status, .lbr$gl_rmsstv);
	    END
	ELSE BEGIN
	    rms_perform (lbr$lookup_key (lib$gl_libctl, keydesc, txtrfa),
		lib$_lookuperr, .lbr$gl_rmsstv,
		2, keydesc, lib$gl_libfdb [fdb$l_namdesc]);
	    (.lis_dispatch [.lib$gl_type]) (keydesc, txtrfa);		!List it
	    END;
    lib_free_mem (lnb$c_fixedsize+.lnblk [lnb$b_namlng], .lnblk);
    END;
RETURN true
END;

ROUTINE lib_faol (control_string, out_length, out_desc, param_list) =
BEGIN
!
! This routine formats an ascii line with error handling
! It also outputs the line to the listing file
!
perform (SYS$FAOL (.control_string, .out_length, .out_desc, param_list),
		lib$_faofail, 0);
perform (output_listline ());
RETURN true
END;				!Of lib_faol

ROUTINE output_listline =
BEGIN
!
! output the listing line
!
lib$al_rab [rab$w_rsz] = .outsize;		!Set record size
lib$al_rab [rab$l_rbf] = .outputbuffer;		!and address
!
! Delete trailing spaces
!
IF .lib$al_rab [rab$w_rsz] NEQ 0
THEN BEGIN
    LOCAL
	ptr;

    ptr = .lib$al_rab [rab$l_rbf] + .lib$al_rab [rab$w_rsz];
    WHILE (
	    ptr = .ptr - 1;
	    CH$RCHAR (.ptr) EQL %ASCII ' '
	  )
	DO lib$al_rab [rab$w_rsz] = .lib$al_rab [rab$w_rsz] - 1;
    END;
rms_perform ($PUT (RAB = lib$al_rab),		!write the record
	lib$_writeerr,
	.lib$al_rab [rab$l_stv], 1, lib$gl_lisfdb [fdb$l_namdesc]);
outsize = 0;
outdesc [dsc$w_length] = lib$c_lisreclng;
outdesc [dsc$a_pointer] = .outputbuffer;
CH$FILL (%ASCII ' ', lib$c_lisreclng, .outputbuffer);
RETURN true
END;					!Of output_listline
END					! Of module
ELUDOM
