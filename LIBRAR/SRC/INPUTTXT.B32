MODULE lib_inputtxt (			! Get next TEXT input line
		LANGUAGE (BLISS32),
		IDENT = 'V03-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  Library command processor
!
! ABSTRACT:
!
!	The VAX/VMS librarian is invoked by DCL to process the LIBRARY
!	command.  It utilizes the librarian procedure set to perform
!	the actual modifications to the library.
!
! ENVIRONMENT:
!
!	VAX native, user mode.
!
!--
!
!
! AUTHOR:  Marty Jack, Benn Schreiber	 CREATION DATE:  23-Aug-1979
!
! MODIFIED BY:
!
!	V02-007		RPG0047		Bob Grosso	17-Nov-1981
!		Fix entering of empty text modules to not pad other
!		modules with blank line.
!
!	V02-006		RPG0046		Bob Grosso	7-Aug-1981
!		lib$gl_ctlmsk now a quadword
!
!	V02-005		RPG0037		Bob Grosso	24-Jun-1981
!		Permit <> on module name directory specification.
!
!	V02-004		RPG0036		Bob Grosso	18-Jun-1981
!		Permit entering of empty text modules.
!
!	V02-003		RPG0035		Bob Grosso	22-Apr-1981
!		Record module names for Library Update History
!
!	V02-002	BLS0029		Benn Schreiber		23-Dec-1980
!		Convert messages to message compiler
!--



LIBRARY
	'SYS$LIBRARY:STARLET.L32';
REQUIRE
	'PREFIX';
REQUIRE
	'LIBDEF';
REQUIRE
	'LBRDEF';

EXTERNAL ROUTINE
    get_record,					!Read next input record
    lib_log_op,					!Log insert operation
    lib_log_upd,				!Record module names for LUH
    lbr$put_record : ADDRESSING_MODE (GENERAL),	!Write record to library
    lbr$replace_key : ADDRESSING_MODE (GENERAL),!Replace or insert key
    lbr$lookup_key : ADDRESSING_MODE (GENERAL),	!Lookup key
    lbr$insert_key : ADDRESSING_MODE (GENERAL),	!Insert key
    lbr$delete_key : ADDRESSING_MODE (GENERAL),	!Delete key
    lbr$delete_data : ADDRESSING_MODE (GENERAL),!Delete data
    lbr$put_end : ADDRESSING_MODE (GENERAL);	!Finish writing to library

EXTERNAL
    lbr$gl_rmsstv : ADDRESSING_MODE (GENERAL),	!RMS STV from librarian
    lib$gl_keysize,				!Max length of keys
    lib$gl_ctlmsk : BLOCK [2],
    lib$gl_libfdb : REF BBLOCK,
    lib$gl_inpfdb : REF BBLOCK,
    lib$gl_libctl;

EXTERNAL LITERAL
    lib$_inserterr,				!Error inserting
    lib$_deldaterr,				!Delete data error
    lib$_replaced,				!Module replaced
    lib$_inserted,				!Module inserted
    lib$_nomodnam,				!No module name
    lib$_modnamlng,				!Module name length bad
    lib$_dupmod;				!Duplicate module

FORWARD ROUTINE
    setmodname;

OWN
    bufdesc : BBLOCK [dsc$c_s_bln],		! Descriptor for current line
    txtrfa : BBLOCK [rfa$c_length],
    modnamdesc : BBLOCK [dsc$c_s_bln];		! Descriptor for module name

BIND
    linelen = bufdesc [dsc$w_length] : WORD,
    lineaddr = bufdesc [dsc$a_pointer];

GLOBAL ROUTINE lib_input_txt =
BEGIN
!
! This routine reads TEXT source files and inserts them into the library.
!
LOCAL
    deltxtrfa : BBLOCK [rfa$c_length],
    replacing,
    status,
    get_status;

BIND
    libdesc = lib$gl_libfdb [fdb$l_namdesc] : BBLOCK,
    inpdesc = lib$gl_inpfdb [fdb$l_namdesc] : BBLOCK;

perform (setmodname ());
txtrfa = 0;
!
!   Get first record.  If it's blank, then call lbr$put_record to
!   put a module header.  Otherwise loop reading whole input file 
!   until end of file.
!
get_status = get_record (bufdesc);					! read first record
IF NOT (status = lbr$put_record (lib$gl_libctl, bufdesc, txtrfa))	! put a module header and the first record
THEN SIGNAL (lib$_writeerr, 1, libdesc, .status, .lbr$gl_rmsstv);

IF .get_status NEQ rms$_eof						! If the file was not empty
THEN
    BEGIN
    WHILE (get_status = get_record (bufdesc)) NEQ rms$_eof DO		! Read in records until end of file
	IF NOT (status = lbr$put_record (lib$gl_libctl, bufdesc, txtrfa))
	THEN SIGNAL (lib$_writeerr, 1, libdesc, .status, .lbr$gl_rmsstv);
    END;

!
! Write end of module record
!
IF NOT (status = lbr$put_end (lib$gl_libctl))
    THEN SIGNAL (lib$_writeerr, 1, libdesc, .status, .lbr$gl_rmsstv);

!
! If replacing, determine if module already exists in library. If it does,
!  then replace the module and delete the old data.  If it doesn't just
!  insert the module by calling lbr$replace_key.  If inserting the module,
!  then call lbr$insert_key.
!
replacing = false;
IF .lib$gl_ctlmsk [lib$v_replace]
    THEN BEGIN
	replacing = lbr$lookup_key (lib$gl_libctl, modnamdesc, deltxtrfa);
	status = lbr$replace_key (lib$gl_libctl, modnamdesc, deltxtrfa, txtrfa);
	IF NOT .status
	    THEN BEGIN
		SIGNAL (lib$_inserterr, 2, modnamdesc, libdesc, .status, .lbr$gl_rmsstv);
		RETURN lib$_inserterr;
		END;
	IF .replacing
	    THEN IF NOT (status = lbr$delete_data (lib$gl_libctl, deltxtrfa))
		THEN BEGIN
		    SIGNAL (lib$_deldaterr, 1, libdesc, .status, .lbr$gl_rmsstv);
		    RETURN lib$_deldaterr;
		    END;
	END

	ELSE BEGIN
	    status = lbr$insert_key (lib$gl_libctl, modnamdesc, txtrfa);
	    IF NOT .status
		THEN BEGIN
		    SIGNAL (lib$_inserterr, 2, modnamdesc, libdesc, .status, .lbr$gl_rmsstv);
	    	    RETURN lib$_inserterr;
		    END;
	   END;

lib_log_upd ((IF .replacing THEN lhe$c_replaced
			   ELSE lhe$c_inserted), modnamdesc );
lib_log_op ((IF .replacing THEN lib$_replaced
			   ELSE lib$_inserted),	modnamdesc, .lib$gl_libfdb);
RETURN true
END;				!Of lib_input_txt

ROUTINE setmodname =
BEGIN
!
! This routine extracts the file name of the current input file
! and saves it for entering the module name into the library.
!
BIND
    modulename = lib$gl_inpfdb [fdb$l_modnam] : BBLOCK,
    libdesc = lib$gl_libfdb [fdb$l_namdesc] : BBLOCK,
    inpdesc = lib$gl_inpfdb [fdb$l_namdesc] : BBLOCK,
    inpstring = .inpdesc [dsc$a_pointer] : VECTOR [,BYTE];
LOCAL
    modascic : VECTOR [lbr$c_pagesize, BYTE],
    j, k;

IF .modulename [dsc$w_length] NEQ 0			!Specified by command
THEN BEGIN
    modnamdesc [dsc$w_length] = .modulename [dsc$w_length];
    modnamdesc [dsc$a_pointer] = .modulename [dsc$a_pointer];
    END
ELSE BEGIN
    j = k = -1;
    DECR i FROM .inpdesc [dsc$w_length]-1 TO 0 DO
	BEGIN
	    IF .inpstring [.i] EQL %C'.' THEN EXITLOOP j = .i;    
	    END;
    DECR i FROM .j-1 TO 0 DO
	BEGIN
	    IF (.inpstring [.i] EQL %C']') OR (.inpstring [.i] EQL %C'>')
	    THEN EXITLOOP k = .i + 1;
	    END;

    modnamdesc [dsc$w_length] = .j - .k;
    modnamdesc [dsc$a_pointer] = inpstring [.k];
    END;

modascic [0] = .modnamdesc [dsc$w_length];
CH$MOVE (.modascic [0], .modnamdesc [dsc$a_pointer], modascic [1]);
IF .modnamdesc [dsc$w_length] EQL 0
THEN BEGIN
    SIGNAL (lib$_nomodnam, 1, inpdesc);
    RETURN lib$_nomodnam;
    END
ELSE IF .modnamdesc [dsc$w_length] GTRU .lib$gl_keysize
THEN BEGIN
    SIGNAL (lib$_modnamlng, 3, modascic, .modnamdesc [dsc$w_length], inpdesc);
    RETURN lib$_modnamlng;
    END;
IF NOT .lib$gl_ctlmsk [lib$v_replace]
    AND lbr$lookup_key (lib$gl_libctl, modnamdesc, txtrfa)
    THEN BEGIN
	SIGNAL (lib$_dupmod, 3, modascic, inpdesc, libdesc);
	RETURN false;
	END;

RETURN true
END;

END
ELUDOM
