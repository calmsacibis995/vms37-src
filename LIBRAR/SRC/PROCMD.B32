MODULE LIB_PROCMD (			! Process LIBRARY command
		LANGUAGE (BLISS32),
		IDENT = 'V03-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  Library command processor
!
! ABSTRACT:
!
!	The VAX/VMS librarian is invoked by DCL to process the LIBRARY
!	command.  It utilizes the librarian procedure set to perform
!	the actual modifications to the library.
!
! ENVIRONMENT:
!
!	VAX native, user mode.
!
!--
!
!
! AUTHOR:  Benn Schreiber,	 CREATION DATE:  13-June-1979
!
! MODIFIED BY:
!
!	V02-013		RPG0113		Bob Grosso	02-Feb-1982
!		Support logging of replace operations in history.
!
!	V02-012		RPG0112		Bob Grosso	18-Dec-1981
!		Report error status of update history modification.
!
!	V02-011		RPG0111		Bob Grosso	12-Nov-1981
!		Use lbr$set_locate and lbr$ret_rmsstv.
!
!	V02-010		RPG0110		Bob Grosso	7-Aug-1981
!		Support lower case keywords
!		lib$gl_ctlmsk now a quadword
!
!	V02-009		RPG0039		Bob Grosso	21-Jul-1981
!		Process CREATE=(verion:3,keep)
!
!	V02-008		RPG0038		Bob Grosso	17-Jul-1981
!		Signal brknlib on open.
!
!	V02-007		RPG0037		Bob Grosso	1-Jul-1981
!		Correct lhi$l_maxluhrec.
!
!	V02-006		RPG0036		Bob Grosso	3-Jun-1981
!		Support for /HISTORY
!
!	V02-005		RPG0035		Bob Grosso	20-Apr-1981
!		Build library history records
!
!	V02-004	RPG0031		Bob Grosso		7-Apr-1981
!		Correct removal of symbols.
!
!	V02-003	BLS0029		Benn Schreiber		23-Dec-1980
!		Convert to message compiler, add library of shareable
!		image symbol tables
!--



LIBRARY
	'SYS$LIBRARY:STARLET.L32';	!System data structures
REQUIRE
	'PREFIX';			!Librarian macros
REQUIRE
	'LIBDEF';			!Librarian data structures
REQUIRE
	'LBRDEF';			!Library processor definitions

FORWARD ROUTINE
    add_del_mod,			!Add new module to list of modules to delete
    add_rem_sym,			!Add new symbol to list of symbols to removed
    getkeysize,				!Get maximum keysize from library header
    lib_log_op,				!Log operation on console
    lib_create_lib,			!Create library
    lib_remove_syms,			!Remove global symbols from object library
    lib_delete_mods,			!Delete modules from library
    lib_insert_mods,			!Insert modules into library
    lib_log_upd,			!Build updated modules name list
    lib_put_luh;			!Put library update history record

EXTERNAL ROUTINE
    next_input_file,
    lib_extrct_mods,
    lbr$ini_control : ADDRESSING_MODE (GENERAL), !Initialize library control table
    lbr$open : ADDRESSING_MODE (GENERAL), 	!Open library
    lbr$close : ADDRESSING_MODE (GENERAL), 	!Close library
    lbr$set_index : ADDRESSING_MODE (GENERAL),	!Set index number
    lbr$set_locate : ADDRESSING_MODE (GENERAL),	!Set locate mode
    lbr$get_header : ADDRESSING_MODE (GENERAL),	!Get header info
    lbr$get_index : ADDRESSING_MODE (GENERAL),	!Return contents of index
    lbr$delete_key : ADDRESSING_MODE (GENERAL),	!Delete symbol from index
    lbr$put_history : ADDRESSING_MODE (GENERAL),!Put a LUH record
    lbr$ret_rmsstv : ADDRESSING_MODE (GENERAL),	!Return RMS status
    sys$fao : ADDRESSING_MODE (GENERAL),	!Format ASCII
    lib$put_output : ADDRESSING_MODE (GENERAL),	!Write output to terminal
    lib_get_mem,				!allocate virtual memory
    lib_free_mem,				!deallocate virtual memory
    lib_comprs_lib,				!Compress the library
    lib_cross_obj,				!Cross reference of obj lib
    lib_list_lib;				!List contents of library

EXTERNAL
    lbr$gl_control : REF BBLOCK ADDRESSING_MODE (GENERAL), !Librarian control block
    lib$gl_keysize,				!Max length of keys in library
    lib$gl_allblks,				!Number of blocks to allocate
    lib$gl_allgbls,				!Number of globals to allocate
    lib$gl_allmods,				!Number of modules
    lib$gl_allksz,				!Size of keys in index from command
    lib$gl_allhis,				!number of Library Update history records
    lib$gl_allver,				!Version of library to create
    lib$gl_cre8flags : BITVECTOR,		!Flags for create/compress options set by command
    lib$al_deldspat : VECTOR [,LONG],		!Delete module dispatch vector
    lib$al_inpdspat : VECTOR [,LONG],		!Input processing dispatch vector
    lib$al_typnames : VECTOR [lbr$c_typ_decmx+1, LONG], !Library type names
    lib$al_hdrlen : VECTOR [lbr$c_typ_decmx+1, LONG], !Length of extra header bytes
    lib$al_ascbinf : VECTOR [lbr$c_typ_decmx+1, LONG], !ASCII/binary flags
    lib$al_numidx : VECTOR [lbr$c_typ_decmx+1, LONG], !Number of indices
    lib$al_idxopt : VECTOR [lbr$c_typ_decmx+1, LONG], !Number of indices
    lib$gl_modnamix,				!Module name index number
    lib$gl_objgsdix,				!index number for object lib gsd index
    lib$gl_type,				!Type of library requested
    lib$gl_libctl,				!Control index for library
    lib$gl_objsyrml : VECTOR [2],		!listhead for deleted gsd symbols
    lib$gl_delmodl : VECTOR [2],		!listhead for deleted module names
    lib$gl_modupdl : VECTOR [2],		!listhead for updated module names
    lib$gl_ctlmsk : BLOCK [2],			!Control mask
    lib$gl_tmpfdb : REF BBLOCK,			!Pointer to temporary FDB
    lib$gl_outfdb : REF BBLOCK,	 		!Pointer to output FDB
    lib$gl_libfdb : REF BBLOCK; 		!Pointer to library FDB

EXTERNAL LITERAL
    lbr$_errclose,
    lbr$_nomtchfou,
    lbr$_oldlibrary,
    lbr$_oldmismch,
    lbr$_typmismch,

    lib$_brknlib,				!Library improperly close
    lib$_delkeyerr,				!Error deleting a key
    lib$_diftyp,				!Different type than expected
    lib$_histerr,				!error in update history
    lib$_indexerr,				!Index error
    lib$_initerr,				!Initization error
    lib$_nomtchfou,				!No match found
    lib$_notobjlib,				!Not object library
    lib$_removed;				!Removed a symbol

OWN
    textrfa : VECTOR [rfa$c_length, BYTE];

GLOBAL ROUTINE lib_process_cmd  =
BEGIN

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine processes the command line parsed by lib_get_command.
!
! CALLING SEQUENCE:
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!
!	Command has been parsed, data base set up
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	Command processed
!
!--

BIND
    libnamblk = lib$gl_libfdb [fdb$t_nam] : BBLOCK; !Point to NAM block for library

LOCAL
    status,
    func;

func = lbr$c_read;			!Assume function is read
IF .lib$gl_ctlmsk [lib$v_create]	!If function is create
THEN func = lbr$c_create
ELSE IF .lib$gl_ctlmsk [lib$v_delete]	!If function is delete
	OR .lib$gl_ctlmsk [lib$v_insert]!or insert or replace
	OR .lib$gl_ctlmsk  [lib$v_remove]	!or remove
THEN func = lbr$c_update;		!then function is update
!
! initialize the library control table
!
perform (lbr$ini_control (lib$gl_libctl, func, lib$gl_type, libnamblk),
		lib$_initerr, 1, lib$gl_libfdb [fdb$l_namdesc]);
IF .lib$gl_ctlmsk  [lib$v_create]		!Creating?
THEN BEGIN
    perform (lib_create_lib (.lib$gl_libfdb, lib$gl_libctl));
    lib$gl_ctlmsk [lib$v_libopen] = true; !Flag library open
    END
ELSE BEGIN				!Not create--open library
    status = lbr$open (lib$gl_libctl, lib$gl_libfdb  [fdb$l_namdesc]); !Then open it
    IF .status EQL lbr$_oldlibrary
    OR .status EQL lbr$_oldmismch
    THEN BEGIN
	lib$gl_ctlmsk [lib$v_oldlib] = true;
	END;
    IF .status EQL lbr$_typmismch	!If library type mismatch
    OR .status EQL lbr$_oldmismch	! or old format library mismatch
    THEN BEGIN
	IF .lib$gl_type EQL lbr$c_typ_obj
		AND lbr$ret_rmsstv() EQL lbr$c_typ_shstb
		THEN lib$gl_ctlmsk [lib$v_shrstb] = true
		ELSE BEGIN
		    SIGNAL (lib$_diftyp, 3, .lib$al_typnames [lbr$ret_rmsstv()],
				lib$gl_libfdb [fdb$l_namdesc],
				.lib$al_typnames [.lib$gl_type]);
		    lib$gl_ctlmsk [lib$v_shrstb] = false;		!Guaranteed not one of these
		    END;
	END
    ELSE IF NOT .status
    THEN 
	BEGIN
	IF .status EQL lbr$_errclose
	THEN 
	    BEGIN
	    IF .func EQL lbr$c_update 
	    THEN SIGNAL_STOP (lib$_brknlib,1, lib$gl_libfdb [fdb$l_namdesc], lbr$_errclose)
	    ELSE SIGNAL (lib$_brknlib,1, lib$gl_libfdb [fdb$l_namdesc], lbr$_errclose);
	    END
	ELSE
	    SIGNAL_STOP (lib$_openin, 1, lib$gl_libfdb [fdb$l_namdesc],
			.status);
	END;

    lib$gl_type = lbr$ret_rmsstv();		!Set type of library opened
    getkeysize ();				!Get key size from library header
    lib$gl_ctlmsk [lib$v_libopen] = true; 	!flag library open
    END;
lbr$set_locate (lib$gl_libctl);			!Set locate mode
IF .func EQL lbr$c_update
THEN
    BEGIN
    LOCAL
	headary : BBLOCK [lbr$c_pagesize];
    perform ( lbr$get_header (lib$gl_libctl, headary),
		lib$_indexerr, 1, lib$gl_libfdb [fdb$l_namdesc]);
    IF .headary [lhi$l_maxluhrec] GTR 0 
    THEN lib$gl_ctlmsk [lib$v_recordluh] = true;
    END;
!
! If going to modify old library, then convert to new format first
!
IF .lib$gl_ctlmsk [lib$v_oldlib]		!Old format library
AND (.lib$gl_ctlmsk [lib$v_delete]		! and deleting, inserting
	OR .lib$gl_ctlmsk [lib$v_insert]	! or removing symbols
	OR .lib$gl_ctlmsk [lib$v_remove])
THEN BEGIN				!then compress to a new library
    LOCAL
	saveoutfdb;

    saveoutfdb = .lib$gl_outfdb;	!Save old output FDB
    lib$gl_outfdb = .lib$gl_tmpfdb;	!And use temporary FDB
    lib$gl_ctlmsk [lib$v_convert] = true;!Flag to issue convert message
    perform (lib_comprs_lib (lbr$c_update)); !Compress to new format library
    getkeysize ();			!Get keysize from library header
    lib$gl_ctlmsk [lib$v_convert] = false; !No longer converting
    lib$gl_outfdb = .saveoutfdb;
    lbr$set_locate (lib$gl_libctl);			!Set locate mode
    END;
!
! Execute the requested operations
!
IF .lib$gl_ctlmsk [lib$v_delete]	!Delete modules?
THEN
    BEGIN
    lib_delete_mods ();
    perform (lib_put_luh ( lhe$c_deleted ),
		lib$_histerr, 1, lib$gl_libfdb [fdb$l_namdesc]);
    END;
IF .lib$gl_ctlmsk [lib$v_insert]	!Insert or replace
THEN
    BEGIN
    lib_insert_mods ();
    perform (lib_put_luh ( lhe$c_inserted ),
		lib$_histerr, 1, lib$gl_libfdb [fdb$l_namdesc]);
    perform (lib_put_luh ( lhe$c_replaced ),
		lib$_histerr, 1, lib$gl_libfdb [fdb$l_namdesc]);
    END;
IF .lib$gl_ctlmsk [lib$v_remove]
    THEN lib_remove_syms ();
IF .lib$gl_ctlmsk [lib$v_compress]
THEN
    BEGIN
    lib_comprs_lib (lbr$c_read);
    lbr$set_locate (lib$gl_libctl);	!Reset locate mode after compress
    getkeysize ();
    END;
IF .lib$gl_ctlmsk [lib$v_extract]
    THEN lib_extrct_mods ();
IF .lib$gl_ctlmsk [lib$v_cross]
    THEN lib_cross_obj ();
IF .lib$gl_ctlmsk [lib$v_list]
    THEN lib_list_lib ();
IF .lib$gl_ctlmsk [lib$v_libopen]		!If library is open now
THEN BEGIN
    rms_perform (lbr$close (lib$gl_libctl),	!then close it
		lib$_closein, lbr$ret_rmsstv(),
		1, lib$gl_libfdb [fdb$l_namdesc]);
    lib$gl_ctlmsk [lib$v_libopen] = false;	!mark it closed
    END;
RETURN true
END;

ROUTINE getkeysize =
BEGIN
!
! This routine gets the maximum keysize from the library header
!
BIND
    libheader = .lbr$gl_control [lbr$l_hdrptr] : BBLOCK; !Name the header

IF .lib$gl_ctlmsk [lib$v_oldlib]	!If old format library
    THEN lib$gl_keysize = lib$c_shortsym
    ELSE BEGIN
	BIND
	    indexdesc = libheader + lhd$c_idxdesc : BBLOCK; !First index descriptor
	lib$gl_keysize = .indexdesc [idd$w_keylen] - 1;
	END;
RETURN true

END;						!Of getkeysize


GLOBAL ROUTINE lib_create_lib  (fdbadr, control) =
BEGIN
!
! This routine calls the library access procedures
! to create the library.
!
MAP
    fdbadr : REF BBLOCK;
BIND
    namblk = fdbadr [fdb$t_nam] : BBLOCK,
    fildesc = fdbadr [fdb$l_namdesc] : BBLOCK;
LOCAL
    create_opts : BBLOCK [cre$c_length],
    status;

CH$FILL (0, cre$c_length, create_opts);	!Zero create options array
create_opts [cre$l_type] = .lib$gl_type;	!Set the library type
create_opts [cre$l_keylen] = (IF .lib$gl_cre8flags [lib$c_opt_ksz]
				THEN .lib$gl_allksz
				ELSE .lib$al_ascbinf [.lib$gl_type]); !Set ASCII/binary flag
lib$gl_keysize = .create_opts [cre$l_keylen];	!Set max key length of library
create_opts [cre$l_alloc] = .lib$gl_allblks;
create_opts [cre$l_idxmax] = .lib$al_numidx [.lib$gl_type]; !Set number of indices
create_opts [cre$l_uhdmax] = .lib$al_hdrlen [.lib$gl_type]; !Set length of extra header info
IF .lib$gl_type EQL lbr$c_typ_obj
    OR .lib$gl_type EQL lbr$c_typ_shstb
    THEN create_opts [cre$l_entall] = .lib$gl_allgbls + .lib$gl_allmods
    ELSE create_opts [cre$l_entall] = .lib$gl_allmods;
create_opts [cre$l_luhmax] =  .lib$gl_allhis;
create_opts [cre$l_vertyp] =  .lib$gl_allver;	! library version format
create_opts [cre$l_idxopt] =  .lib$al_idxopt [.lib$gl_type]; ! index options

status = lbr$open (.control, fildesc, create_opts,
		fdbadr [fdb$l_defext]);
!
! Get the string descriptor for the filename correct
!
IF .namblk [nam$b_rsl] NEQ 0
THEN BEGIN
    fildesc [dsc$w_length] = .namblk [nam$b_rsl];
    fildesc [dsc$a_pointer] = .namblk [nam$l_rsa];
    END
ELSE IF .namblk [nam$b_esl] NEQ 0
    THEN BEGIN
	fildesc [dsc$w_length] = .namblk [nam$b_esl];
	fildesc [dsc$a_pointer] = .namblk [nam$l_esa];
	END;
IF NOT .status
THEN SIGNAL_STOP (lib$_openout, 1, fildesc, .status, lbr$ret_rmsstv() );
RETURN true
END;

ROUTINE lib_delete_mods =
BEGIN
!
! This routine deletes modules from the library
!
LOCAL
    modnb : REF BBLOCK,
    status,
    modesc : BBLOCK [dsc$c_s_bln];
BUILTIN
    REMQUE;

WHILE NOT REMQUE (.lib$gl_delmodl, modnb)		!get next module to delete
DO BEGIN
    modesc [dsc$w_length] = .modnb [lnb$b_namlng];	!Set up name descriptor
    modesc [dsc$a_pointer] = modnb [lnb$t_name];
!
! Check for wild cards in name.
!
    IF NOT CH$FAIL (CH$FIND_CH (.modnb [lnb$b_namlng], modnb [lnb$t_name],
					%ASCII '%'))
	OR NOT CH$FAIL (CH$FIND_CH (.modnb [lnb$b_namlng], modnb [lnb$t_name],
					%ASCII '*'))
	THEN BEGIN
	    IF (status = lbr$get_index (lib$gl_libctl, lib$gl_modnamix,
					add_del_mod, modesc)) EQL lbr$_nomtchfou
		THEN SIGNAL (lib$_nomtchfou, 1, modesc)
		ELSE IF NOT .status
			THEN SIGNAL (lib$_indexerr, 1, lib$gl_libfdb [fdb$l_namdesc],
				.status, lbr$ret_rmsstv() );
	    END
	ELSE (.lib$al_deldspat [.lib$gl_type]) (modesc);	!Delete the module
    lib_free_mem (lnb$c_fixedsize+.modnb [lnb$b_namlng], .modnb); !Deallocate the block
    END;
RETURN true
END;
ROUTINE add_del_mod (modesc) =
BEGIN
!
! This routine is called by lbr$get_index when looking for module names to delete
!  The name is inserted into the list of modules to delete
!
MAP
    modesc : REF BBLOCK;

LOCAL
    namblk : REF BBLOCK;

BUILTIN
    INSQUE;

perform (lib_get_mem (lnb$c_fixedsize + .modesc [dsc$w_length], namblk));
INSQUE (.namblk, .lib$gl_delmodl [1]);
namblk [lnb$b_namlng] = .modesc [dsc$w_length];
CH$MOVE (.modesc [dsc$w_length], .modesc [dsc$a_pointer], namblk [lnb$t_name]);
RETURN true
END;						!Of add_del_mod

ROUTINE lib_remove_syms =
BEGIN
!
! This routine removes global symbols from object libraries
!
LOCAL
    status,
    symnb : REF BBLOCK,
    symdesc : BBLOCK [dsc$c_s_bln];

BUILTIN
    REMQUE;

IF .lib$gl_type NEQ lbr$c_typ_obj
    AND .lib$gl_type NEQ lbr$c_typ_shstb
THEN BEGIN
    SIGNAL (lib$_notobjlib, 1, lib$gl_libfdb [fdb$l_namdesc]);
    RETURN lib$_notobjlib;
    END;

perform (lbr$set_index (lib$gl_libctl, lib$gl_objgsdix),	!set index to delete global syms
	lib$_indexerr, 1, lib$gl_libfdb [fdb$l_namdesc]);
WHILE NOT REMQUE (.lib$gl_objsyrml, symnb)		!get next module to delete
DO BEGIN
    symdesc [dsc$w_length] = .symnb [lnb$b_namlng];	!Set up name descriptor
    symdesc [dsc$a_pointer] = symnb [lnb$t_name];
    IF NOT CH$FAIL (CH$FIND_CH (.symnb  [lnb$b_namlng], symnb [lnb$t_name],
				%ASCII '%'))
	OR NOT CH$FAIL (CH$FIND_CH (.symnb [lnb$b_namlng], symnb [lnb$t_name],
				%ASCII '*'))
	THEN BEGIN
	    IF (status = lbr$get_index (lib$gl_libctl, lib$gl_objgsdix,
				add_rem_sym, symdesc)) EQL lbr$_nomtchfou
		THEN SIGNAL (lib$_nomtchfou, 1, symdesc)
		ELSE IF NOT .status
		    THEN SIGNAL (lib$_indexerr, 1, lib$gl_libfdb [fdb$l_namdesc],
				.status, lbr$ret_rmsstv() );
	    END
	ELSE BEGIN
	    IF (status = lbr$delete_key (lib$gl_libctl, symdesc))	!Delete the symbol
	        THEN lib_log_op (lib$_removed, symdesc, .lib$gl_libfdb)	!log if logging
		ELSE SIGNAL (lib$_delkeyerr, 2, symdesc, lib$gl_libfdb [fdb$l_namdesc], .status);
	    END;
    lib_free_mem (lnb$c_fixedsize+.symnb [lnb$b_namlng], .symnb); !Deallocate the block
    END;
RETURN true
END;
!
ROUTINE add_rem_sym (modesc) =
BEGIN
!
! This routine is called by lbr$get_index when looking for symbols to delete.
! The name is inserted into the list of symbols to delete
!
MAP
    modesc : REF BBLOCK;

LOCAL
    namblk : REF BBLOCK;

BUILTIN
    INSQUE;

perform (lib_get_mem (lnb$c_fixedsize + .modesc [dsc$w_length], namblk));
INSQUE (.namblk, .lib$gl_objsyrml [1]);
namblk [lnb$b_namlng] = .modesc [dsc$w_length];
CH$MOVE (.modesc [dsc$w_length], .modesc [dsc$a_pointer], namblk [lnb$t_name]);
RETURN true
END;						!Of add_rem_sym

ROUTINE lib_insert_mods =
BEGIN
!
! This routine inserts modules into the library
!
WHILE next_input_file ()
DO (.lib$al_inpdspat [.lib$gl_type]) ();		!Insert each into the library
RETURN true
END;

GLOBAL ROUTINE lib_log_op (opercode, modesc, libfdb) =
BEGIN
!
! This routine logs the operation on the console if /LOG was specified.
!
MAP
    libfdb : REF BBLOCK,
    modesc : REF BBLOCK;


IF .lib$gl_ctlmsk [lib$v_log]				!Logging?
THEN SIGNAL (.opercode, 2, .modesc, libfdb [fdb$l_namdesc]);
RETURN true
END;

GLOBAL ROUTINE lib_log_upd ( operation, module_desc ) =
BEGIN
!+++
!
!  If a library update history is maintained for the library,
!  build a list of the module names of modules that have been
!  updated in library.
!
!---
MAP
    module_desc : REF BBLOCK [dsc$c_s_bln];
BUILTIN
    INSQUE;

IF .lib$gl_ctlmsk [lib$v_recordluh]
THEN
    BEGIN
    LOCAL
	namblk : REF BBLOCK;

    perform (lib_get_mem (lnb$c_fixedsize + .module_desc [dsc$w_length], namblk) );
    INSQUE (.namblk, .lib$gl_modupdl [1] );
    namblk [lnb$b_namlng] = .module_desc [dsc$w_length];
    CH$MOVE(.module_desc [dsc$w_length], .module_desc [dsc$a_pointer],
		namblk [lnb$t_name] );
    namblk [lnb$b_flags] = .operation;
    END;
RETURN true;
END;	! global routine lib_log_upd

ROUTINE lib_put_luh ( opercode ) =
BEGIN
!+++
!
!  Build the library update history records and put them into
!  the history.
!
!---
FIELD				! define a descriptor for $GETJPI
    itmlst_flds =
	SET
	jpi_usrnam_buflen	= [0,0,16,0],
	jpi_usrnam_cod		= [0,16,16,0],
	jpi_usrnam_bufadr	= [1,0,32,0],
	jpi_usrnam_len		= [2,0,32,0],
	jpi_end			= [3,0,32,0]
	TES;
LOCAL
    status,
    modnb : REF BBLOCK,				! entry in linked list of module names
    mod_desc : BBLOCK [dsc$c_s_bln],
    luhrec : BBLOCK [dsc$c_s_bln],		! library update history record being built
    itmlst : BLOCK [4,LONG] FIELD (itmlst_flds),! descriptor for $GETJPI
    iosb : VECTOR [2,LONG],			! status block for $GETJPI
    usrnamlen : WORD,
    usrnambuf : BLOCK [12,BYTE];
BIND
    luhlen = luhrec [dsc$w_length];
BUILTIN
    INSQUE,
    REMQUE;

IF NOT .lib$gl_ctlmsk [lib$v_recordluh]  ! quit if history not maintained
THEN RETURN true;

!
!  initialize descriptor for $GETJPI
!  which will return USERNAME of the process modifying library
!
itmlst [jpi_usrnam_cod] = jpi$_username;
itmlst [jpi_usrnam_buflen] = 12;
itmlst [jpi_usrnam_bufadr] = usrnambuf;
itmlst [jpi_usrnam_len] = usrnamlen;
itmlst [jpi_end] = 0;
status = $GETJPI (efn=1, iosb=iosb, itmlst= itmlst);	! Call GET Job Process Information
$WAITFR (EFN=1);			! set event flag wait 
IF NOT .iosb[0] THEN RETURN .iosb[0];	! check if an error
perform (lib_get_mem (lbr$c_maxrecsiz, luhrec [dsc$a_pointer] ));	! get the space for the LUH record
BEGIN
    LOCAL
	modupdl : VECTOR [2,LONG],		! save module names from different operations
	restore;				! remember that module names have been saved

    BIND
	luhrecbuf = .luhrec [dsc$a_pointer] : BBLOCK;

    restore = false;
    modupdl [0] = modupdl;
    modupdl [1] = modupdl;
    CH$FILL (0, lbr$c_maxrecsiz, luhrecbuf);		! fill it with nulls
    luhrecbuf [lhe$b_usrnamlen] = .usrnamlen;
    CH$MOVE ( .usrnamlen, usrnambuf, luhrecbuf [lhe$t_usrnam]);	! copy username into LUH record
    luhrecbuf [lhe$b_modcode] = .opercode;	! record what kind of operation was performed with these modules
    !
    !    get the date and time
    !
    $GETTIM (TIMADR = luhrecbuf [lhe$l_time]);
    luhlen = lhe$c_fixedsize;
    luhrecbuf [lhe$w_modcnt] = 0;		! Tally of module names in record
    !
    !  copy over module names
    !
    WHILE NOT REMQUE (.lib$gl_modupdl, modnb) DO
        BEGIN
        IF .modnb [lnb$b_flags] EQL .opercode
	THEN
	    BEGIN
            IF .luhlen + .modnb [lnb$b_namlng] + 1 GTR lbr$c_maxrecsiz	! Would next modulename make record too large?
            THEN							! then put what we've got and then build another record
		BEGIN
	        status = lbr$put_history (lib$gl_libctl, luhrec);	! copy the record into the list of history records
		IF NOT .status 
		THEN 
		    BEGIN	! If there's been an error, deallocate memory and quit
		    lib_free_mem ( lbr$c_maxrecsiz, .luhrec [dsc$a_pointer] );
		    RETURN .status;
		    END;
		luhlen = lhe$c_fixedsize;		! header for continuation record is the same
		luhrecbuf [lhe$w_modcnt] = 0;		! except for module count which is reset to 0
		END;
	    BEGIN
	    BIND
		modnamlen = luhrecbuf + .luhlen : BYTE;
	    modnamlen = .modnb [lnb$b_namlng];
            END;
	    luhlen = .luhlen + 1;					! Allow 1 byte to store module name length
	    CH$MOVE (.modnb [lnb$b_namlng], modnb [lnb$t_name],		! copy in module name
		luhrecbuf + .luhlen);
	    luhrecbuf [lhe$w_modcnt] = .luhrecbuf [lhe$w_modcnt] + 1;	! Tally module names in record
	    luhlen = .luhlen + .modnb [lnb$b_namlng];
	    END		! if the module name matches the operation being logged
	ELSE
	    BEGIN
	    INSQUE ( .modnb, .modupdl [1] );				! save module name
	    restore = true;
	    END;
	END;		! while

    IF .restore 
    THEN
	WHILE NOT REMQUE (.modupdl, modnb) DO
	    INSQUE (.modnb, .lib$gl_modupdl [1] );

    IF .luhrecbuf [lhe$w_modcnt] GTR 0
    THEN 
	status = lbr$put_history ( lib$gl_libctl, luhrec);	! out of module names so put what we've got
    END;

lib_free_mem ( lbr$c_maxrecsiz, .luhrec [dsc$a_pointer] );	! return memory
RETURN .status;
END;	! routine lib_put_luh 
END					! Of module
ELUDOM
