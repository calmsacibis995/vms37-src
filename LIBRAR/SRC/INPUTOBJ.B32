MODULE lib_inputobj (
			LANGUAGE (BLISS32),
			IDENT = 'V03-000'
			) =

BEGIN
!
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!
!++
!
! FACILITY:  Library command processor
!
! ABSTRACT:
!
!	The VAX/VMS librarian is invoked by DCL to process the LIBRARY
!	command.  It utilizes the librarian procedure set to perform
!	the actual modifications to the library.
!
! ENVIRONMENT:
!
!	VAX native, user mode.
!
!--
!
!
! AUTHOR:  Benn Schreiber,	 CREATION DATE:  12-June-1979
!
! MODIFIED BY:
!
!	V02-008		RPG0048		Bob Grosso	11-Mar-1982
!		When symbol multiply defined in the same module,
!		disregard subsequent references.
!		Also fix up several places where $BYTEOFFSET should be used.
!
!	V02-007		RPG0047		Bob Grosso	02-Feb-1982
!		Support for logging replace operations in history.
!
!	V02-006		RPG0046		Bob Grosso	21-Nov-1981
!		Support new GSD records
!
!	V02-005		RPG0045		Bob Grosso	7-Aug-1981
!		lib$gl_ctlmsk now a quadword
!
!	V02-004		RPG0036		Bob Grosso	25-Jun-1981
!		Continue after a duplicate module.
!
!	V02-003		RPG0035		Bob Grosso	22-Apr-1981
!		Record module names for update history.
!
!	V02-002	BLS0029		Benn Schreiber		23-Dec-1980
!		Convert messages to message compiler.  Add library of
!		shareable image symbol tables.
!--

%SBTTL  'Declarations';

LIBRARY
	'SYS$LIBRARY:LIB.L32';		!System macro definitions
REQUIRE
	'PREFIX';		!SET OF GENERAL MACROS ETC
REQUIRE
	'LIBDEF';		!Librarian structure defs.
REQUIRE
	'LBRDEF';		!Library processor defs.

EXTERNAL
    lbr$gl_rmsstv : ADDRESSING_MODE (GENERAL),	!RMS STV from librarian
    lib$gl_objmodix,		!Index number for module name index
    lib$gl_objgsdix,		!index number for gsd symbols
    lib$gl_recount,		!Count of records inserted
    lib$al_rab : BBLOCK,	!Input file RAB
    lib$gl_type,		!Type of library opened
    lib$gl_keysize,		!Max size of key
    lib$gl_ctlmsk : BLOCK [2],	!Control flags
    lib$gl_libfdb : REF BBLOCK,	!Pointer to library fdb
    lib$gl_inpfdb : REF BBLOCK,	!Pointer to input file fdb
    lib$gl_libctl;		!Library control index

FORWARD ROUTINE
    prorec,			!check sequence and copy record
    copyrec,			!copy record to object library
    prohdr,			!Routine to process module headers
    protir,			!Routine to process TIR records
    progsd,			!Routine to process gsd records
    proeom,			!   "       "    end of module
    seqchk,			!   "       verify correct sequence of obj records
    propsectdef,		!Process p-section definitions
    symbols,			!Process symbol definitions and references
    entpnts,			!Process entry point definitions
    procedef,			!Process procedure declarations
    pro_epmw,			!Process entry point definition with word psect
    pro_idc,			!Process random entity check
    pro_env,			!Process environment definition
    pro_lsy,			!Process local symbol definition/reference
    pro_lepm,			!Process local symbol entry point definition
    pro_lpro,			!Process local symbol procedure definition
    pro_spsc,			!Process shareable image psect definition
    profile,			!Read all records of file
    finish_object,		!Do end of module processing
    delsym,			!Add symbol to delete symbol list
    prosymbol;			!Do all the work of symbol resolution

EXTERNAL ROUTINE
    lib_get_mem,				!Allocate virtual memory
    lib_get_zmem,				!Allocate zeroed virtual memory
    lib_free_mem,				!and give it back
    lib_log_op,					!Log operation on console
    lib_log_upd,				!record module names for LUH
    lbr$search : ADDRESSING_MODE (GENERAL),	!Search index for keys with RFA
    lbr$delete_data : ADDRESSING_MODE (GENERAL),!Delete data
    lbr$put_record : ADDRESSING_MODE (GENERAL),	!Write record to library
    lbr$put_end    : ADDRESSING_MODE (GENERAL),	!Terminated writing records
    lbr$lookup_key : ADDRESSING_MODE (GENERAL),	!Lookup key in library
    lbr$set_index : ADDRESSING_MODE (GENERAL),	!Set index number
    lbr$insert_key : ADDRESSING_MODE (GENERAL),	!Insert key
    lbr$set_module : ADDRESSING_MODE (GENERAL),	!Set module attributes
    lbr$replace_key : ADDRESSING_MODE (GENERAL),!Replace key
    lbr$delete_key : ADDRESSING_MODE (GENERAL),	!Delete key from library
    get_record;					!Get next input record

EXTERNAL LITERAL
    lib$_notshrimg,				!File not shareable image
    lib$_nosymbols,				!No stb in shareable image
    lib$_reclng,				!Illegal record length
    lib$_rectyp,				!Illegal record type
    lib$_noeom,					!No eom record
    lib$_strlvl,				!Illegal structure level
    lib$_modnamlng,				!Illegal module name length
    lib$_indexerr,				!Index error
    lib$_inserted,				!Module inserted
    lib$_replaced,				!Module replaced
    lib$_dupmodule,				!Duplicate module
    lib$_gsdtyp,				!Illegal gsd type
    lib$_spnamlng,				!Illegal psect name length
    lib$_symnamlng,				!Illegal symbol name length
    lib$_dupglobal,				!Duplicate global
    lib$_comcod,				!Compilation errors in module
    lib$_mhderr,				!Module header error
    lib$_inserterr,				!Insertion error
    lib$_delkeyerr,				!Delete key error
    lib$_deldaterr,				!Delete data error
    lib$_seqnce;				!Record sequence error

OWN
    shrgsmatch,						!GSMATCH for shareable image
    operation,
    mhdseen,
    lnmseen,
    dupseen,						! Record that a duplicate module is being processed
    gsdoffset,						!Offset into concatenated gsd record
    symbolstring	: REF VECTOR [,BYTE], 		!Pointer to current symbol
    recdesc : BBLOCK [dsc$c_s_bln],			!String descriptor for record
    lastrectyp,						!Type of the previous record
    currectyp	: INITIAL (obj$c_eom),			!Type of the current record
    maxreclng	: INITIAL (obj$c_maxrecsiz),		!Maximum record length
    mod_name	: VECTOR [sym$c_maxlng+1, BYTE],	!Module name
    modulerfa	: BBLOCK [rfa$c_length],		!RFA of module text
    oldmodrfa   : BBLOCK [rfa$c_length],		!RFA of old module text
    replacing,						!Flag if replacing this module
    moduledesc : BBLOCK [dsc$c_s_bln] INITIAL		!String descriptor for module name
			(0, mod_name [1]),
    moduledata	: VECTOR [sym$c_maxlng + 2, BYTE],	!Moduleflags, idlng, moduleid
    globlist : VECTOR [2],				!Listhead for globals to insert
    delist : VECTOR [2],				!Listhead for globals to delete
    compilecods : BBLOCK [5 * dsc$c_s_bln] INITIAL	!Name the compilation completion codes
			(STRINGDESC ('success'),
			STRINGDESC ('warnings'),
			STRINGDESC ('errors'),
			STRINGDESC ('fatal errors'),
			STRINGDESC ('illegal compilation code'));

BIND
    modnamlng = mod_name [0] : BYTE,			!Name the module name length
    modulename = mod_name [1] : VECTOR [,BYTE],		! and the module name
    moduleflags = moduledata [0] : BYTE,		!Name module flags byte
    idlng = moduledata [1] : BYTE,			!Length of module ident
    moduleid = moduledata [2] : VECTOR [,BYTE],		!Name module ident
    reclng = recdesc [dsc$w_length] : WORD,		!Name the length of the record
    objrec = recdesc [dsc$a_pointer] : REF BBLOCK,	!and the pointer
    objvec = recdesc [dsc$a_pointer] : REF VECTOR [,BYTE],
    recdispatch = PLIT(					!Set up maximum allowed record type
		prohdr,					!0 - module header
		progsd,					!1 - gsd records
		protir,					!2 - tir
		proeom,					!3 - end of module
		prorec,					!4 - dbg - check sequence and copy
		prorec,					!5 - tbt - check sequence and copy
		prorec,					!6 - lnk - check sequence and copy
		proeom) : VECTOR;			!7 - eomw
BUILTIN
    INSQUE,
    REMQUE;

%SBTTL  'LIB-INPUT_OBJ';

GLOBAL ROUTINE lib_input_obj =
BEGIN
!
! Process an object file
!
LOCAL
    hdrblkcnt,
    symdsc : REF BBLOCK,
    status;

IF .lib$gl_ctlmsk [lib$v_shrstb]		!If processing shareable image stb
THEN BEGIN
    lib$al_rab [rab$l_bkt] = 1;			!Set to read block 1
    lib$al_rab [rab$w_usz] = 512;		! and only block 1
    rms_perform ($READ (RAB = lib$al_rab),	!Read the image header
		lib$_readerr,			! report any error
		.lib$al_rab [rab$l_stv], 1, lib$gl_inpfdb [fdb$l_namdesc]);

    IF .lib$al_rab [rab$w_rsz] NEQ 512		! Image header is 512 bytes long
        OR (
	    BIND
		header = .lib$al_rab [rab$l_ubf] : BBLOCK;

	    IF .header[ihd$b_imgtype] NEQ ihd$k_lim	! type must agree
		OR .header[ihd$w_majorid] NEQ ihd$k_majorid ! major header id must match
		OR .header[ihd$w_minorid] GTRU ihd$k_minorid	! minor id must not be greater
		OR .header[ihd$w_size] GTRU MAXU((.header[ihd$w_patchoff]
				+ ihp$k_length),ihd$k_length+
					iha$k_length+ihs$k_length+ihi$k_length) ! Header fixed part must be less than a block
								! and contained in header
		OR (hdrblkcnt = .header[ihd$b_hdrblkcnt]-1) LSS 0
		OR (symdsc = header + .header[ihd$w_symdbgoff]) ! GST descriptor must be
			GEQU (header + .header[ihd$w_size])	! contained in header
		OR (.symdsc[ihs$w_gstrecs]) LSSU 3		! Must be at least 3 blocks
		OR (.symdsc[ihs$l_gstvbn]) LEQU			! and must be beyond header blocks
						(.hdrblkcnt + 2)
			THEN true				!It's not a shareable image
			ELSE (shrgsmatch = .header[ihd$l_ident];!It's a shareable image, so save the gsmatch
				false))
	THEN BEGIN
	    SIGNAL (lib$_notshrimg, 1, lib$gl_inpfdb [fdb$l_namdesc]);
	    RETURN lib$_notshrimg;
	    END;
    lib$al_rab [rab$b_rac] = rab$c_rfa;				!Set to point to object file
    IF (lib$al_rab [rab$l_rfa0] = .symdsc [ihs$l_gstvbn]) NEQ 0	! which is the symbol table
    THEN BEGIN
	lib$al_rab [rab$w_rfa4] = 0;				! on a block boundary
        rms_perform ($FIND (RAB = lib$al_rab),
			lib$_readerr, 1, lib$gl_inpfdb [fdb$l_namdesc]);
        lib$al_rab [rab$b_rac] = rab$c_seq;			!Reset to sequentioal
	END
    ELSE BEGIN
	SIGNAL (lib$_nosymbols,1,lib$gl_inpfdb [fdb$l_namdesc]);
	RETURN true
	END;
    END;
status = profile ();
IF NOT .status				!Clean up if an error
    THEN finish_object (false);
RETURN .status
END;					!Of lib_input_obj

%SBTTL  'profile';

ROUTINE profile =
BEGIN
!
! Read and process all required object module records of the file just opened
! that is, keep reading records to end of file.
!
!
!
LOCAL
    status;

modnamlng = 0;					!Zero module name
modulerfa [rfa$l_vbn] = 0;			!Clear VBN
mhdseen = false;
lnmseen = false;
currectyp = obj$c_eom;				!Init record to end of module type
globlist [0] = globlist [0];			!Init globals listhead
globlist [1] = globlist [0];
delist [0] = delist [0];
delist [1] = delist [0];
moduleflags = 0;				! Zero module flags
WHILE (status = get_record (recdesc)) NEQ rms$_eof ! While there are more records
DO BEGIN
	lib$gl_recount = .lib$gl_recount + 1;	! Count the record
	IF .reclng GTRU .maxreclng		! And if its length is illegal
	THEN BEGIN
	    SIGNAL (lib$_reclng, 3, .reclng, 	!   then signal the error and give up on this file
			modnamlng, lib$gl_inpfdb [fdb$l_namdesc]);
	    RETURN lib$_reclng;
	    END;
	lastrectyp = .currectyp;		! Copy old current to last type
	currectyp = .objrec [obj$b_rectyp]; 	! And get new type
	IF .currectyp LSSU .recdispatch [-1]	! Check it is legal and if
	THEN
	    BEGIN
	    !
	    !    If a duplicate module is being processed then ignore record
	    !    unless it is a new module header record.
	    !
	    IF (NOT .dupseen) 
	    THEN
		perform ((.recdispatch [.currectyp]) ()); ! So dispatch to record specific routine
	    IF .dupseen AND (.currectyp EQL 3)
	    THEN
		dupseen = false;
	    END
	ELSE
	    BEGIN
	    SIGNAL (lib$_rectyp, 3, .currectyp,	!If unknown, signal and give up
				modnamlng, lib$gl_inpfdb [fdb$l_namdesc]);
	    RETURN lib$_rectyp;
	    END;
	IF .lib$gl_ctlmsk [lib$v_shrstb]
	    AND .currectyp EQL obj$c_eom
	    THEN EXITLOOP;
END;				! Of records loop
IF .currectyp NEQ obj$c_eom				! All done, did we end with eom?
THEN BEGIN
    SIGNAL (lib$_noeom, 2, modnamlng, lib$gl_inpfdb [fdb$l_namdesc]); !no, signal and return
    RETURN lib$_noeom;
    END;
RETURN true				! Finally return after no more
END;					! Of lib_input_obj

%SBTTL  'prohdr';

ROUTINE prohdr =
BEGIN
!
!++
!	process module header records as follows:
!		(1) validate sequence
!		(2) ignore all but main module headers
!		(3) verify structure level is less than
!		    or equal to obj$c_strlvl
!		(4) verify maximum record length 
!		    parameter is less than or equal to
!		    obj$c_maxrecsiz
!		(5) record maximum record length parameter
!                   for checking subsequent records
!		(6) check module title > 0 and less than or
!		    equal to sym$c_maxlng characters
!		(7) copy the module title
!--
!
LOCAL
    txtrfa : BBLOCK [rfa$c_length];

BIND
	modidstring = objrec [mhd$t_name] + .objrec [mhd$b_namlng] : VECTOR [,BYTE];

perform (seqchk ());
IF .objrec [obj$b_subtyp] NEQ obj$c_hdr_mhd 			!Ignore all headers except main header
THEN IF NOT .lib$gl_ctlmsk [lib$v_shrstb]
	THEN RETURN copyrec ()					!Just copy them
	ELSE RETURN true;

IF .objrec [mhd$b_strlvl] GTRU obj$c_strlvl			! Compare its obj format
THEN BEGIN
    SIGNAL (lib$_strlvl, 3, .objrec [mhd$b_strlvl], modnamlng,
		lib$gl_inpfdb [fdb$l_namdesc]);
    RETURN lib$_strlvl;
    END;
IF (maxreclng = .objrec [mhd$w_recsiz]) GTRU obj$c_maxrecsiz	! Compare max with max allowed
THEN BEGIN
    SIGNAL (lib$_reclng, 3, .maxreclng, modnamlng,
		lib$gl_inpfdb [fdb$l_namdesc]);
    RETURN lib$_reclng;
    END;
IF .objrec [mhd$b_namlng] GTRU .lib$gl_keysize			! Check module name is within legal
OR .objrec [mhd$b_namlng] EQL 0					! Length range
THEN BEGIN
    SIGNAL (lib$_modnamlng, 3, objrec [mhd$b_namlng], .objrec [mhd$b_namlng],
		lib$gl_inpfdb [fdb$l_namdesc]);
    RETURN lib$_modnamlng;
    END;
modnamlng = .objrec [mhd$b_namlng];		!Copy length of module name
CH$MOVE  (.objrec [mhd$b_namlng], objrec [mhd$t_name], modulename);
IF .lib$gl_ctlmsk [lib$v_shrstb]
THEN BEGIN
    idlng = 4;					!GSMATCH is 4 bytes long
    CH$MOVE(4,shrgsmatch,moduleid);		!Copy the GSMATCH into module header data
    END
ELSE BEGIN
    idlng = MINU (sym$c_maxlng, .modidstring [0]);
    CH$MOVE (.modidstring [0], modidstring [1], moduleid);
    END;
moduledesc [dsc$w_length] = .modnamlng;
perform (lbr$set_index (lib$gl_libctl, lib$gl_objmodix),
		lib$_indexerr, 1, lib$gl_libfdb [fdb$l_namdesc]);
replacing = false;
operation = lib$_inserted;

CH$FILL (0, rfa$c_length, oldmodrfa);				! initialize rfa
IF lbr$lookup_key (lib$gl_libctl, moduledesc, oldmodrfa)	!If in library already
THEN IF .lib$gl_ctlmsk [lib$v_replace]				!If replace
!
! Key in index, and replacing.  Find globals that belong with old
! module and put on list.
!
    THEN BEGIN
	lbr$search (lib$gl_libctl, lib$gl_objgsdix, oldmodrfa, delsym);
	replacing = true;
	operation = lib$_replaced;				!Set for proeom
	END
    ELSE BEGIN
	SIGNAL (lib$_dupmodule, 3, modnamlng, lib$gl_inpfdb [fdb$l_namdesc],
			lib$gl_libfdb [fdb$l_namdesc]);
	dupseen = true;
	RETURN true;
	END;

perform (copyrec ());						!Copy record to library

RETURN true
END;			! OF prohdr

%SBTTL  'delsym';

ROUTINE delsym (keydesc) =
BEGIN
!
! This routine is called by LBR$SEARCH for all globals that are in the module
! about to be replaced.  The names will be put on delist which will be scanned
! by prosymbol.
!
MAP
    keydesc : REF BBLOCK;

LOCAL
    keynb : REF BBLOCK;

perform (lib_get_mem (lnb$c_fixedsize + .keydesc [dsc$w_length], keynb));
keynb [lnb$b_namlng] = .keydesc [dsc$w_length];
keynb [lnb$b_flags] = 0;
CH$MOVE (.keydesc [dsc$w_length], .keydesc [dsc$a_pointer], keynb [lnb$t_name]);
INSQUE (.keynb, .delist [1]);
RETURN true
END;						!Of delsym

%SBTTL  'protir';

ROUTINE protir =
BEGIN
!
! This routine processes TIR records.  The OBJTIR flag is set in
! the module flags byte and the record is copied.
!
moduleflags = mhd$m_objtir;
RETURN prorec ()
END;			! Of protir

%SBTTL  'progsd';

ROUTINE progsd =
BEGIN
!
!++
!	Verify GSD records and dispatch on the sub-types:
!		(0)  P-SECTION definition
!		(1)  Symbol definition/reference
!		(2)  Entry point definition
!		(3)  Procedure declaration
!		(4)  Symbol definition with word psect
!		(5)  Entry point definiton with word psect
!		(6)  Procedure definition with word psect
!		(7)  Random entity check
!		(8)  Environment definition
!		(9)  Local symbol definition/reference
!		(10) Local symbol entry point definition
!		(11) Local symbol procedure definition
!		(12) Shareable image psect definition
!
!--
!
BIND
	gsddispatch = PLIT (		! index		structure name
			propsectdef,	! gsd_psc	gps$
			symbols,	! gsd_sym	gsy$, srf$, sdf$
			entpnts,	! gsd_epm
			procedef,	! gsd_pro	pro$, fml$, arg$
			symbols,	! gsd_symw	sdfw$
			pro_epmw,	! gsd_epmw
			procedef,	! gsd_prow
			pro_idc,	! gsd_idc
			pro_env,	! gsd_env
			pro_lsy,	! gsd_lsy
			pro_lepm,	! gsd_lepm
			pro_lpro,	! gsd_lpro
			pro_spsc	! gsd_spsc	sgps$
			) : VECTOR;
!
LOCAL
	gsdtype;
!
perform  (seqchk ());
gsdoffset = obj$c_subtyp;
!
WHILE .gsdoffset LSSU .reclng DO
BEGIN
    IF ( gsdtype = .objvec [.gsdoffset]) GEQU .gsddispatch [-1]
    THEN BEGIN
	SIGNAL (lib$_gsdtyp, 3, modnamlng, 
		lib$gl_inpfdb [fdb$l_namdesc], .gsdtype);
	RETURN lib$_gsdtyp;
	END
    ELSE
	perform (( .gsddispatch [.gsdtype]) ());
    END;

IF NOT .lib$gl_ctlmsk [lib$v_shrstb]
    THEN RETURN copyrec ()
    ELSE RETURN true;

END;		! Of progsd

%SBTTL  'propsectdef';

ROUTINE propsectdef =
BEGIN
!
!++
!	process P-section definitions as follows:
!		(0) Check legal p-section name and alignment parameter
!--
!
BIND
	psctdef = objvec [.gsdoffset] : BBLOCK;
LOCAL
	length;
!
!	First check for legal P-section name and alignment
!
IF .psctdef [gps$b_namlng] GTRU sym$c_maxlng			! Check name within the legal
OR .psctdef [gps$b_namlng] EQL 0				! Range for symbol and P-section
THEN BEGIN
    SIGNAL (lib$_spnamlng, 3, modnamlng, lib$gl_inpfdb [fdb$l_namdesc],
		.psctdef [gps$b_namlng]);
    RETURN lib$_spnamlng;
    END;
length = $BYTEOFFSET(gps$t_name) - $BYTEOFFSET(gps$t_start) +	! Compute the offset of next GSD
		.psctdef [gps$b_namlng];
gsdoffset = .gsdoffset + .length;				! From length of this
RETURN true
END;		! Of propsectdef

%SBTTL  'symbols';

ROUTINE symbols =
BEGIN
!
LOCAL
	length;
BIND
	symbolrec = objvec [.gsdoffset] : BBLOCK;


IF NOT .symbolrec [gsy$v_def]
THEN BEGIN
	length = $BYTEOFFSET(srf$t_name) - $BYTEOFFSET(srf$t_start) +
			.symbolrec [srf$b_namlng];
	symbolstring = symbolrec [srf$b_namlng];	! Point to the symbol string
     END

ELSE 
    BEGIN
    IF .objvec [.gsdoffset] EQL obj$c_gsd_symw		! If word psect
    THEN
	BEGIN
	length = $BYTEOFFSET(sdfw$t_name) - $BYTEOFFSET(sdfw$t_start) +
			.symbolrec [sdfw$b_namlng];
	symbolstring = symbolrec [sdfw$b_namlng];	! Point to the symbol
	END
    ELSE
	BEGIN
	length = $BYTEOFFSET(sdf$t_name) - $BYTEOFFSET(sdf$t_start) +
			.symbolrec [sdf$b_namlng];
	symbolstring = symbolrec [sdf$b_namlng];	! Point to the symbol
	END;
    IF NOT .symbolrec [gsy$v_weak]
    THEN 
	perform (prosymbol ());
    END;
gsdoffset = .gsdoffset + .length;	! Update the gsd offset for next
RETURN true
END;					!Of symbols

%SBTTL  'entpnts';

ROUTINE entpnts =
BEGIN
!
LOCAL
	length;
BIND
	symbolrec = objvec [.gsdoffset] : BBLOCK;


length = $BYTEOFFSET(epm$t_name) - $BYTEOFFSET(epm$t_start) +
			.symbolrec [epm$b_namlng];
symbolstring = symbolrec [epm$b_namlng];				! Point to the symbol
perform (prosymbol ());
gsdoffset = .gsdoffset + .length;				! Else update the offset for next
RETURN true
END;						! Of entpnts

%SBTTL  'procedef';

ROUTINE procedef =
BEGIN
!
!	A procedure definition is an extended entry point definition, carrying with
!	it a description of the procedure's formal arguments. processing these consists
!	in normal symbol definition processing followed by:-
!		(1) Validation of the format of formal description (i.e. just check
!			that minimum number of arguments specified is less than
!			or equal to the maximum.
!
!
LOCAL
    argcount;

IF .objvec [.gsdoffset] EQL obj$c_gsd_prow
THEN
    perform (pro_epmw ()) 
ELSE
    perform (entpnts ());

BEGIN
    BIND
	formals = objvec [.gsdoffset] : BBLOCK;
	gsdoffset = .gsdoffset + fml$c_size;			! Update record pointer
	IF (argcount = .formals [fml$b_maxargs]) NEQ 0		! If args
	THEN INCRU i FROM 1 TO .argcount			! then skip them
	DO BEGIN
	    BIND
		argdesc = objvec [.gsdoffset] : BBLOCK;

	    gsdoffset = .gsdoffset + .argdesc [arg$b_bytecnt] + arg$c_size;
	    END;
	RETURN true
     END;
END;					! Of procedef

%SBTTL  'pro_epmw';

ROUTINE pro_epmw =
BEGIN
!
!	Process entry points with word psect
!
LOCAL
	length;
BIND
	symbolrec = objvec [.gsdoffset] : BBLOCK;


length = $BYTEOFFSET(epmw$t_name) - $BYTEOFFSET(epmw$t_start) +
			.symbolrec [epmw$b_namlng];
symbolstring = symbolrec [epmw$b_namlng];				! Point to the symbol
perform (prosymbol ());
gsdoffset = .gsdoffset + .length;				! Else update the offset for next
RETURN true
END;						! Of pro_epmw


%SBTTL  'pro_idc';

ROUTINE pro_idc =
BEGIN
!
!	Process random entity check
!	by skipping it.
!
LOCAL
    identstring : REF VECTOR [,BYTE],	! pointer to ident string
    objectname : REF VECTOR [,BYTE],	! pointer to object name string
    length;
BIND
	idc_rec = objvec [.gsdoffset] : BBLOCK;

identstring = idc_rec [idc$b_namlng] + 1 + .idc_rec [idc$b_namlng];
objectname = identstring [1] + .identstring [0];
length =  objectname [1] + .objectname [0] - idc_rec;
gsdoffset = .gsdoffset + .length;
RETURN true
END;						! Of pro_idc


%SBTTL  'pro_env';

ROUTINE pro_env =
BEGIN
!
!	Process environment definition
!	by skipping it.
!
LOCAL
	length;
BIND
	env_rec = objvec [.gsdoffset] : BBLOCK;


length =  env_rec [env$t_name] - objvec [.gsdoffset] +
			.env_rec [env$b_namlng];
gsdoffset = .gsdoffset + .length;
RETURN true
END;						! Of pro_env


%SBTTL  'pro_lsy';

ROUTINE pro_lsy =
BEGIN
!
!	Process local symbol definition/reference
!	by skipping it.
!
LOCAL
	length;
BIND
	lsy_rec = objvec [.gsdoffset] : BBLOCK;

IF NOT .lsy_rec [lsy$v_def]
THEN
    length = $BYTEOFFSET(lsrf$t_name) - $BYTEOFFSET(lsrf$t_start) +
			.lsy_rec [lsrf$b_namlng]
ELSE
    length = $BYTEOFFSET(lsdf$t_name) - $BYTEOFFSET(lsdf$t_start) +
			.lsy_rec [lsdf$b_namlng];
gsdoffset = .gsdoffset + .length;
RETURN true
END;						! Of pro_lsy


%SBTTL  'pro_lepm';

ROUTINE pro_lepm =
BEGIN
!
!	Process local symbol entry point definition
!	by skipping it.
!
LOCAL
	length;
BIND
	lepm_rec = objvec [.gsdoffset] : BBLOCK;


length = $BYTEOFFSET(lepm$t_name) - $BYTEOFFSET(lepm$t_start) +
			.lepm_rec [lepm$b_namlng];
gsdoffset = .gsdoffset + .length;				! Else update the offset for next
RETURN true
END;						! Of pro_lepm


%SBTTL  'pro_lpro';

ROUTINE pro_lpro =
BEGIN
!
!	Process local symbol procedure definition
!	by skipping it.
!
LOCAL
	length;
BIND
	lpro_rec = objvec [.gsdoffset] : BBLOCK;


length = $BYTEOFFSET(lpro$t_name) - $BYTEOFFSET(lpro$t_start) +
			.lpro_rec [lpro$b_namlng];
gsdoffset = .gsdoffset + .length;				! Else update the offset for next
RETURN true
END;						! Of pro_lpro


%SBTTL  'pro_spsc';

ROUTINE pro_spsc =
BEGIN
!
!	Process shareable image psect definition
!	by ignoring it.
!
LOCAL
	length;
BIND
	spsct_def = objvec [.gsdoffset] : BBLOCK;

!
!	First check for legal P-section name and alignment
!
IF .spsct_def [sgps$b_namlng] GTRU sym$c_maxlng			! Check name within the legal
OR .spsct_def [sgps$b_namlng] EQL 0				! Range for symbol and P-section
THEN BEGIN
    SIGNAL (lib$_spnamlng, 3, modnamlng, lib$gl_inpfdb [fdb$l_namdesc],
		.spsct_def [sgps$b_namlng]);
    RETURN lib$_spnamlng;
    END;

length = $BYTEOFFSET(sgps$t_name) - $BYTEOFFSET(sgps$t_start) +
			.spsct_def [sgps$b_namlng];
gsdoffset = .gsdoffset + .length;
RETURN true
END;						! Of pro_spsc


%SBTTL  'prosymbol';

ROUTINE prosymbol =
BEGIN
!++
!
!
!--
IF .symbolstring [0] GTRU .lib$gl_keysize			! If the symbol length is outside
OR .symbolstring [0] EQL 0					! Legal range
THEN BEGIN
    SIGNAL (lib$_symnamlng, 4, symbolstring [0], modnamlng,
		lib$gl_inpfdb [fdb$l_namdesc], .symbolstring [0]);
    RETURN lib$_symnamlng;
    END;
IF NOT .lib$gl_ctlmsk [lib$v_globals]
THEN RETURN true
ELSE BEGIN

    LOCAL
	status,
	replacekey,
	keynb : REF BBLOCK,
	txtrfa : BBLOCK [rfa$c_length],
	keydesc : BBLOCK [dsc$c_s_bln];

    keydesc [dsc$w_length] = .symbolstring [0];
    keydesc [dsc$a_pointer] = symbolstring [1];
    perform (lbr$set_index (lib$gl_libctl, lib$gl_objgsdix),
			lib$_indexerr, 1, lib$gl_libfdb [fdb$l_namdesc]);
!
!	If the symbol is already in the index and we are not replacing, then that is
!	an error.  If we are replacing, it must be from the same module, otherwise
!	that is an error.
!
    IF (replacekey = lbr$lookup_key (lib$gl_libctl, keydesc, txtrfa))	!If key already in index
	AND (IF .lib$gl_ctlmsk [lib$v_replace]
			THEN NOT CH$EQL (rfa$c_length, txtrfa, rfa$c_length, oldmodrfa)
			ELSE true)
    THEN BEGIN
	SIGNAL (lib$_dupglobal, 3, keydesc, lib$gl_inpfdb [fdb$l_namdesc], !Tell user of error
				lib$gl_libfdb [fdb$l_namdesc]);
	RETURN lib$_dupglobal;
	END;
!
! If replacing the key, look and see if its on the deleted key list.  If it is, remove it
! from that list, and put on the global list.  If not replacing, just put on the global
! list.
!
    status = false;
    IF NOT (
	    IF .replacekey
	    THEN BEGIN
		keynb = delist [0];				!Initialize to search queue
		WHILE (keynb = .keynb [lnb$l_flink]) NEQ delist [0]
		    DO IF CH$EQL (.keydesc [dsc$w_length], .keydesc [dsc$a_pointer],
				.keynb [lnb$b_namlng], keynb [lnb$t_name])
		    THEN BEGIN
			REMQUE (.keynb, keynb);		!Remove from the deleted symbol queue
			status = true;
			EXITLOOP;
			END;
		END;
		.status					!Result of search
	    )
    THEN
	BEGIN
	LOCAL
	    key_nb : REF BBLOCK;			! search globlist to be sure symbol not already on list from this module

	key_nb = globlist [0];
	WHILE (key_nb = .key_nb [lnb$l_flink]) NEQ globlist [0] DO 
	    IF CH$EQL (.keydesc [dsc$w_length], .keydesc [dsc$a_pointer],
			.key_nb [lnb$b_namlng], key_nb [lnb$t_name])
	    THEN RETURN true;				! Key already in list, so exist
	perform (lib_get_mem (lnb$c_fixedsize + .keydesc [dsc$w_length], keynb));
	keynb [lnb$b_namlng] = .keydesc [dsc$w_length];
	CH$MOVE (.keydesc [dsc$w_length], .keydesc [dsc$a_pointer], keynb [lnb$t_name]);
	END;
    keynb [lnb$v_replace] = .replacekey;
    INSQUE (.keynb, .globlist [1]);
    END;
RETURN true
END;								! Of symbol 

%SBTTL  'proeom';

ROUTINE proeom =
BEGIN
!
!	Process end of module records:
!		(1) Validate sequence
!		(2) Interpret compiler completion code,
!		    issuing appropriate error or warning message
!

LOCAL
	datadesc : BBLOCK [dsc$c_s_bln],
	modnamdesc : BBLOCK [dsc$c_s_bln],
	comcode;
!
maxreclng = obj$c_maxrecsiz;					!Reset max record length
perform (seqchk ());
IF (comcode = .objrec [eom$b_comcod]) NEQ 0			! If non zero compilation cplete code
THEN BEGIN							! CHECK
    IF .comcode GTRU 3 THEN comcode = 4;			!Make illegal index legal
    IF .comcode NEQ 0
    THEN SIGNAL (lib$_comcod, 3, compilecods [.comcode * dsc$c_s_bln,0,0,0], !Signal the error (warning)
		modnamlng, lib$gl_inpfdb [fdb$l_namdesc]);
    END;
perform (copyrec ());
rms_perform (lbr$put_end (lib$gl_libctl),
	lib$_writeerr, .lbr$gl_rmsstv, 1, lib$gl_libfdb [fdb$l_namdesc]);
!
! Update the module header
!
IF .lib$gl_ctlmsk [lib$v_selective]
THEN moduleflags = .moduleflags OR mhd$m_selsrc;
datadesc [dsc$w_length] = .idlng + 2;			!include flag and id length bytes
datadesc [dsc$a_pointer] = moduleflags;
modnamdesc [dsc$w_length] = .modnamlng;
modnamdesc [dsc$a_pointer] = modulename;
rms_perform (lbr$set_module (lib$gl_libctl, modulerfa ,0,0, datadesc),
	lib$_mhderr, .lbr$gl_rmsstv, 2, modnamdesc, lib$gl_libfdb [fdb$l_namdesc]);
!
! Insert all the keys now
!
perform (finish_object (true));
!
! Log operation if logging on console
!
lib_log_upd ( 
    (IF .operation EQL lib$_replaced THEN lhe$c_replaced ELSE lhe$c_inserted),
    modnamdesc ); ! log module name for LUH record
lib_log_op (.operation, modnamdesc, .lib$gl_libfdb); !Log insert if /LOG
modulerfa [rfa$l_vbn] = 0;				!Reset module VBN address
globlist [0] = globlist [0];
globlist [1] = globlist [0];
moduleflags = 0;
modnamlng = 0;
RETURN true
END;				! END OF EOM PROCESSING

%SBTTL  'finish_object';

ROUTINE finish_object (allswell) =
BEGIN
!
!	This routine is called when the processing for a module is complete.
!	if allswell is true, the symbols in the queue and the module name
!	are entered in the index, and the old data and any symbols not replaced
!	(if replacing) are deleted from the index.  If allswell is false,
!	the list is merely deallocated.
!
LOCAL
    keydesc : BBLOCK [dsc$c_s_bln],
    keynb : REF BBLOCK;


!
! Write the end of the data if there was an error and then delete it
!
IF .modulerfa [rfa$l_vbn] NEQ 0				!If data was written
    AND NOT .allswell					! and there was an error
THEN BEGIN
    lbr$put_end (lib$gl_libctl);
    lbr$delete_data (lib$gl_libctl, modulerfa);		!Delete the new data
    modulerfa [rfa$l_vbn] = 0;
    END;
!
! Set index to the global symbol index
!
perform (lbr$set_index (lib$gl_libctl, lib$gl_objgsdix),
			lib$_indexerr, 1, lib$gl_libfdb [fdb$l_namdesc]);
!
! Enter the new symbols
!
WHILE NOT REMQUE (.globlist, keynb)				!Insert/replace symbols for module
DO BEGIN
    IF .allswell
    THEN BEGIN
	keydesc [dsc$w_length] = .keynb [lnb$b_namlng];
	keydesc [dsc$a_pointer] = keynb [lnb$t_name];
	rms_perform (lbr$replace_key (lib$gl_libctl, keydesc,
				oldmodrfa, modulerfa),
			lib$_inserterr, .lbr$gl_rmsstv,
			2, keydesc, lib$gl_libfdb [fdb$l_namdesc]);
	END;
    lib_free_mem (lnb$c_fixedsize + .keynb [lnb$b_namlng], .keynb);
    END;
!
! Delete any symbols not replaced
!
WHILE NOT REMQUE (.delist, keynb)
DO BEGIN
    IF .allswell
    THEN BEGIN
	keydesc [dsc$w_length] = .keynb [lnb$b_namlng];
	keydesc [dsc$a_pointer] = keynb [lnb$t_name];
	perform (lbr$delete_key (lib$gl_libctl, keydesc),
			lib$_delkeyerr, 2, keydesc, lib$gl_libfdb [fdb$l_namdesc]);
	END;
    lib_free_mem (lnb$c_fixedsize + .keynb [lnb$b_namlng], .keynb);
    END;
IF .allswell
THEN BEGIN
    perform (lbr$set_index (lib$gl_libctl, lib$gl_objmodix),
			lib$_indexerr, 1, lib$gl_libfdb [fdb$l_namdesc]);
    rms_perform (lbr$replace_key (lib$gl_libctl, moduledesc,
				oldmodrfa, modulerfa),
			lib$_inserterr, .lbr$gl_rmsstv,
			2, moduledesc, lib$gl_libfdb [fdb$l_namdesc]);
!
! If replacing, delete the old data
!
    IF .replacing
    THEN rms_perform (lbr$delete_data (lib$gl_libctl, oldmodrfa),
		lib$_deldaterr, .lbr$gl_rmsstv, 1, lib$gl_libfdb [fdb$l_namdesc]);
    END;

RETURN true
END;							!Of deallocate_list

%SBTTL  'seqchk';

ROUTINE seqchk =
!
!	Routine which validates that records are in correct sequence.
!	Returns value false if not, true otherwise.
!
BEGIN
BIND
	hdrsubtyp = objrec [obj$b_subtyp] : BYTE;
!
IF .currectyp EQL obj$c_hdr
THEN							!If this record is a header
	IF .hdrsubtyp EQL obj$c_hdr_mhd			!and it is the main module header
	THEN						!then we have valid sequence
		IF (.lastrectyp EQL obj$c_eom) OR	!if and only if the previous
		   (.lastrectyp EQL obj$c_eomw)
		THEN (mhdseen = true;			!Record was end of module.  if that
			lnmseen = false;		!
		      RETURN true)			!is the case set mhd record
		ELSE BEGIN
		    SIGNAL (lib$_seqnce, 2, modnamlng,
				lib$gl_inpfdb [fdb$l_namdesc]);
		    RETURN lib$_seqnce;
		    END
	ELSE
		IF .mhdseen				!If some other kind of header
		THEN (IF .hdrsubtyp EQL obj$c_hdr_lnm	!we must have seen a main header
			THEN lnmseen = true;
			RETURN true)
		ELSE BEGIN
		    SIGNAL (lib$_seqnce, 2, modnamlng,
				lib$gl_inpfdb [fdb$l_namdesc]);
		    RETURN lib$_seqnce;
		    END
ELSE
	IF .mhdseen
	AND .lnmseen
	THEN						!If we have seen a main header
		BEGIN
		IF (.currectyp EQL obj$c_eom) OR	!then turn off flag on end of module.
		   (.currectyp EQL obj$c_eomw)
		THEN mhdseen = false;			!sequence error if have not seen
		RETURN true;				!main header and this is not one.
		END
	ELSE BEGIN
	    SIGNAL (lib$_seqnce, 2, modnamlng,
				lib$gl_inpfdb [fdb$l_namdesc]);
	    RETURN lib$_seqnce;
	    END;
END;

%SBTTL  'prorec';

ROUTINE prorec =
BEGIN
!
! This routine checks for proper record sequence and then 
! copies the record to the object library.
!
perform (seqchk ());				!Check sequence
IF NOT .lib$gl_ctlmsk [lib$v_shrstb]
    THEN RETURN copyrec ()			!Copy to library
    ELSE RETURN true
END;				!Of prorec
ROUTINE copyrec =
BEGIN
!
! This routine copies the record to the object library
!
LOCAL
	txtrfa : BBLOCK [rfa$c_length],
	bufdesc : BBLOCK [dsc$c_s_bln];

bufdesc [dsc$w_length] = .reclng;
bufdesc [dsc$a_pointer] = .objrec;
rms_perform (lbr$put_record  (lib$gl_libctl, bufdesc, txtrfa),
	lib$_writeerr, .lbr$gl_rmsstv, 1, lib$gl_libfdb [fdb$l_namdesc]);
IF .modulerfa [rfa$l_vbn] EQL 0
THEN BEGIN
    modulerfa [rfa$l_vbn] = .txtrfa [rfa$l_vbn];
    modulerfa [rfa$w_offset] = .txtrfa [rfa$w_offset];
    END;
RETURN true
END;				!Of copyrec

END
ELUDOM
