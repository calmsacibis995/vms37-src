MODULE lib_extract (			! Extract modules from library
		LANGUAGE (BLISS32),
		IDENT = 'V03-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  Library command processor
!
! ABSTRACT:
!
!	The VAX/VMS librarian is invoked by DCL to process the LIBRARY
!	command.  It utilizes the librarian procedure set to perform
!	the actual modifications to the library.
!
! ENVIRONMENT:
!
!	VAX native, user mode.
!
!--
!
!
! AUTHOR:  Benn Schreiber,	 CREATION DATE:  26-June-1979
!
! MODIFIED BY:
!
!	V02-005		RPG0035		Bob Grosso	03-Mar-1982
!		Close /OUT file if nothing extracted and continue 
!		extracting if one of a list of modules to be extracted 
!		is not found.
!
!	V02-004		RPG0034		Bob Grosso	7-Aug-1981
!		lib$gl_ctlmsk now a quadword
!
!	V02-003	BLS0029		Benn Schreiber		23-Dec-1980
!		Convert messages to message compiler
!
!	V02-002	RPG0003		Bob Grosso		3-Sep-1980
!		Exit read loop and continue extracting modules
!		if read error encountered during extract.
!
!--



LIBRARY
	'SYS$LIBRARY:STARLET.L32';
REQUIRE
	'PREFIX';
REQUIRE
	'LIBDEF';
REQUIRE
	'LBRDEF';

EXTERNAL
    lbr$gl_rmsstv : ADDRESSING_MODE (GENERAL),	!RMS STV from librarian I/O ops
    lib$gl_modxtrl : VECTOR [2],		!Listhead for modules to extract
    lib$gl_ctlmsk : BLOCK [2],			!Librarian control mask
    lib$gl_libctl,				!Library control index
    lib$gl_type,				!Type of library
    lib$gl_modnamix,				!Index number for mod name index
    lib$al_rab : BBLOCK,			!RAB
    lib$gl_libfdb : REF BBLOCK,			!Pointer to library FDB
    lib$gl_outfdb : REF BBLOCK;			!Output file FDB

EXTERNAL ROUTINE
    lbr$find : ADDRESSING_MODE (GENERAL),	!Find known text records
    lbr$lookup_key : ADDRESSING_MODE (GENERAL),	!Lookup key in library
    lbr$get_record : ADDRESSING_MODE (GENERAL),	!Read record from library
    lbr$get_index : ADDRESSING_MODE (GENERAL),	!Return all elements of an index
    lib_open_out,				!Open output file
    lib_close_out,				!Close output file
    lib_log_op,					!Log extraction
    lib_get_zmem,				!Allocate zeroed virtual memory
    lib_get_mem,				!Allocate virtual memory
    lib_free_mem;				!Deallocate virtual memory

EXTERNAL LITERAL
    lbr$_nomtchfou,				!No match found
    lib$_nomtchfou,				!No match found
    lib$_indexerr,				!Index error
    lib$_lookuperr,				!Lookup error in library
    lib$_extracted;				!Successfully extracted module

FORWARD ROUTINE
    extractmodule;				!Extract one module

OWN
    extracted1;					!Flag true if a module was extracted

GLOBAL ROUTINE lib_extrct_mods =
BEGIN
!++
!	Extract modules from the library
!
! Inputs:
!
!	NONE
!
! Implicit inputs:
!
!	lib$gl_modxtrl	is the queue listhead containing the names of the
!			modules to extract.
!
! Outputs:
!
!	the specified modules are extracted and written to the output file.
!
!--

LOCAL
    nmblk : REF BBLOCK,
    keydesc : BBLOCK [dsc$c_s_bln];	!Descriptor for key returned

BIND
    outdesc = lib$gl_outfdb [fdb$l_namdesc] : BBLOCK,
    libdesc = lib$gl_libfdb [fdb$l_namdesc] : BBLOCK;

BUILTIN
    REMQUE;
!
! Open the output file
!
extracted1 = false;
perform (lib_open_out (.lib$gl_outfdb,			!Open the file
		lib$gl_libfdb [fdb$t_nam],		! using the library NAM block as the related NAM block
		(IF .lib$gl_type EQL lbr$c_typ_mlb	! with carriage control
		OR .lib$gl_type EQL lbr$c_typ_hlp	!  if macro or help
		OR .lib$gl_type EQL lbr$c_typ_txt	!  or text library
			THEN true
			ELSE false)));
!
! Now lookup each module on the extract list, and if found
! copy it to the output file.  Issue warning message if
! module is not found
!
WHILE NOT REMQUE (.lib$gl_modxtrl, nmblk)		!Get next one off the list
DO BEGIN
    LOCAL
	status;
    keydesc [dsc$w_length] = .nmblk [lnb$b_namlng];	!Set descriptor for module name
    keydesc [dsc$a_pointer] = nmblk [lnb$t_name];	!...
    IF NOT CH$FAIL (CH$FIND_CH (.keydesc  [dsc$w_length],!Check if any wild cards
			.keydesc [dsc$a_pointer], %ASCII '%'))
	OR NOT CH$FAIL (CH$FIND_CH (.keydesc [dsc$w_length],
			.keydesc [dsc$a_pointer], %ASCII '*'))
	THEN BEGIN
	    IF (status = lbr$get_index (lib$gl_libctl, lib$gl_modnamix,
			extractmodule, keydesc)) EQL lbr$_nomtchfou
		    THEN SIGNAL (lib$_nomtchfou, 1, keydesc)
		    ELSE IF NOT .status
			THEN SIGNAL (lib$_indexerr, 1, 
				lib$gl_libfdb [fdb$l_namdesc], .status,
				.lbr$gl_rmsstv);
	    END
	ELSE
	    extractmodule ( keydesc );		!Extract the module

    lib_free_mem (lnb$c_fixedsize+.nmblk [lnb$b_namlng], .nmblk); !Deallocate the module name block
    END;					!WHILE loop
!
! Close the output file
!
lib_close_out (.lib$gl_outfdb, NOT .extracted1);

RETURN true
END;					! Of lib_extrct_mods

ROUTINE extractmodule (keydesc, modrfa) =
BEGIN
!++
! Routine to extract one module from library
!
! Inputs:
!
!	keydesc		Address of string descriptor for module to extract
!	modrfa		(optional) Address of RFA for module
!
! Outputs:
!
!	The module is extracted from the library
!
!--

MAP
    keydesc : REF BBLOCK;

LOCAL
    recordbuffer : BBLOCK [lbr$c_maxrecsiz], !Record buffer
    recdesc : BBLOCK [dsc$c_s_bln],	!String descriptor for recordbuffer
    status,
    txtrfa : BBLOCK [rfa$c_length];

BUILTIN
    NULLPARAMETER;

recdesc [dsc$w_length] = lbr$c_maxrecsiz;	!set up buffer string descriptor
recdesc [dsc$a_pointer] = recordbuffer;
IF NOT NULLPARAMETER (2)
THEN status = lbr$find (lib$gl_libctl, .modrfa)
ELSE status = lbr$lookup_key (lib$gl_libctl, .keydesc, txtrfa);
IF NOT .status
    THEN BEGIN
	SIGNAL (lib$_lookuperr, 2, .keydesc, 
		lib$gl_libfdb [fdb$l_namdesc], .status, .lbr$gl_rmsstv);
	RETURN true;				!Continue the search
	END
!
! Process module after successful lookup/find
!
    ELSE WHILE true					!found--copy to output file
	DO IF (
		recdesc [dsc$w_length] = lbr$c_maxrecsiz;
		status = lbr$get_record (lib$gl_libctl, recdesc, recdesc) !Read a record
		)
	THEN BEGIN
	    lib$al_rab [rab$w_rsz] = .recdesc [dsc$w_length]; !copy length to RAB
	    lib$al_rab [rab$l_rbf] = .recdesc [dsc$a_pointer]; !and its address
	    status = $PUT (RAB = lib$al_rab);		!Write the record
	    IF NOT .status
	    THEN BEGIN
		SIGNAL (lib$_writeerr,
			 1, lib$gl_outfdb [fdb$l_namdesc],
			.status, .lib$al_rab [rab$l_stv]);
		EXITLOOP;		! but continue to process other modules
		END
	    END
	ELSE IF .status EQL rms$_eof		!If end of text
		THEN BEGIN			!Then we are done
		    lib_log_op (lib$_extracted, .keydesc, ! so log it if logging
				.lib$gl_libfdb);
		    extracted1 = true;
		    RETURN true;
		    END
		ELSE BEGIN
		    SIGNAL (lib$_readerr, 1, lib$gl_libfdb [fdb$l_namdesc],
			    .status, .lbr$gl_rmsstv);
		    EXITLOOP;		! but continue to process other modules
		    END;
RETURN true
END;					! Of extractmodule
END					! Of module
ELUDOM
