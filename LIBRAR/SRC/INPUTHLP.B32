MODULE lib_inputhlp (			! Get next line of Help text
		LANGUAGE (BLISS32),
		IDENT = 'V03-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  Library command processor
!
! ABSTRACT:
!
!	The VAX/VMS librarian is invoked by DCL to process the LIBRARY
!	command.  It utilizes the librarian procedure set to perform
!	the actual modifications to the library.
!
! ENVIRONMENT:
!
!	VAX native, user mode.
!
!--
!
!
! AUTHOR:  Benn Schreiber,	 CREATION DATE:  20-Aug-1979
!
! MODIFIED BY:
!
!	V02-011		RPG44358	Bob Grosso	03-Mar-1982
!		Strip <CR>,<LF> from RUNOFF input
!
!	V02-010		RPG43124	Bob Grosso	07-Jan-1982
!		Check for zero length line in routine is_key_on_line.
!
!	V02-009		RPG0039		Bob Grosso	24-Aug-1981
!		Complete support of lower case keywords
!
!	V02-008		RPG0038		Bob Grosso	7-Aug-1981
!		Support lower case keywords
!
!	V02-007		RPG0036		Bob Grosso	02-Jul-1981
!		Continue after a duplicate module error.
!
!	V02-006		RPG0035		Bob Grosso	22-Apr-1981
!		Record module names for library update history.
!
!	V02-005	BLS0029		Benn Schreiber	23-Dec-1980
!		Convert messages to message compiler
!
!	V02-004	RPG33684	Bob Grosso	15-Dec-1980
!		Permit "-" in HELP keywords to be compatable
!		with V1 Librarian.
!
!
!	V02-003		Benn Schreiber		28-May-1980
!		Correct scan_word to not look past end of line.
!--



LIBRARY
	'SYS$LIBRARY:STARLET.L32';
REQUIRE
	'PREFIX';
REQUIRE
	'LIBDEF';
REQUIRE
	'LBRDEF';

EXTERNAL ROUTINE
    lib_log_op,					!log operation on console
    lib_log_upd,				!Record module names for LUH
    get_record,					!Read next input record
    lib$cvt_dtb : ADDRESSING_MODE (GENERAL),	!Convert decimal to binary
    lbr$put_record : ADDRESSING_MODE (GENERAL),	!Write record to library
    lbr$set_module : ADDRESSING_MODE (GENERAL),	!Read/update module header
    lbr$put_end : ADDRESSING_MODE (GENERAL),	!Terminate PUT
    lbr$lookup_key : ADDRESSING_MODE (GENERAL),	!Lookup key in library
    lbr$insert_key : ADDRESSING_MODE (GENERAL),	!Insert key into library
    lbr$delete_key : ADDRESSING_MODE (GENERAL),	!Delete key
    lbr$delete_data : ADDRESSING_MODE (GENERAL),!Delete data
    lbr$replace_key : ADDRESSING_MODE (GENERAL);!Replace or insert key in index

EXTERNAL
    lbr$gl_rmsstv : ADDRESSING_MODE (GENERAL),	!RMS STV from library procedures
    lib$gl_keysize,				!Max length of keys
    lib$gl_libctl : BLOCK [2],			!Library control index
    lib$gl_ctlmsk : BLOCK [1],			!control flags
    lib$gl_inpfdb : REF BBLOCK,			!Input file FDB
    lib$gl_libfdb : REF BBLOCK;			!Library file FDB

EXTERNAL LITERAL
    lbr$_dupkey,				!Duplicate module
    lib$_inserterr,				!Error inserting
    lib$_deldaterr,				!Delete data error
    lib$_inserted,				!Successfully inserted
    lib$_replaced,				!Successfully replaced
    lib$_illkeylvl,				!Illegal key level
    lib$_keynamlng,				!Illegal key length
    lib$_dupmod,				!Duplicate module
    lib$_dupmodule,				!Duplicate module warning
    lib$_nohlptxt;				!No help text found

LITERAL
    CR 	= 13,					! Carriage return
    LF	= 10;					! Line feed

FORWARD ROUTINE
    is_key_on_line,				!determine if key on line
    symbol_char,				!Determine if character is a symbol
    scan_word,					!Scan a word
    make_upper_case,				!Make word upper case
    skip_blanks;				!Skip blanks
OWN
    lineptr,					!Pointer into line
    endptr,					!Pointer to end of line
    curchar,					!Current character
    linedesc : BBLOCK [dsc$c_s_bln];		!String descriptor for input line

BIND
    linelen = linedesc [dsc$w_length] : WORD,	!Length of line read
    lineaddr = linedesc [dsc$a_pointer] : REF VECTOR [,BYTE]; !And address of line

GLOBAL ROUTINE lib_input_hlp  =
BEGIN

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine inserts help text modules into a help library.
!
!
!--
ROUTINE put_record (linedesc, txtrfa) =
BEGIN

!++
! Local routine to write record to library
!
!--

rms_perform (lbr$put_record (lib$gl_libctl, .linedesc, .txtrfa),
		lib$_writeerr, .lbr$gl_rmsstv, 1, lib$gl_libfdb [fdb$l_namdesc]);
RETURN true
END;

ROUTINE cleanup (txtrfa) =
BEGIN

!++
!
!	Clean up written text, module is no good.
!
!--

MAP
    txtrfa : REF BBLOCK;

IF .txtrfa [rfa$l_vbn] NEQ 0
THEN BEGIN
    lbr$put_end (lib$gl_libctl);			!Write end of module record
    lbr$delete_data (lib$gl_libctl, .txtrfa);		! and delete the works
    END;

RETURN true
END;

ROUTINE insertkey1 (keydesc, txtrfa, replacing, deltxtrfa) =
BEGIN

!++
! Local routine to insert or replace a key1 in the index.
!
!--

MAP
    keydesc : REF BBLOCK,
    txtrfa : REF BBLOCK,
    deltxtrfa : REF BBLOCK;

!
! Determine if replacing or inserting this module
!

IF .lib$gl_ctlmsk [lib$v_replace]
    THEN BEGIN
	rms_perform (lbr$replace_key (lib$gl_libctl, .keydesc, .deltxtrfa, .txtrfa),
			lib$_inserterr, .lbr$gl_rmsstv,	2, keydesc, lib$gl_libfdb [fdb$l_namdesc]);
	IF .replacing
	    THEN rms_perform (lbr$delete_data (lib$gl_libctl, .deltxtrfa),
				lib$_deldaterr, .lbr$gl_rmsstv, 1, lib$gl_libfdb [fdb$l_namdesc]);
	END

    ELSE 
	BEGIN
	LOCAL
	    status;
	status = lbr$insert_key (lib$gl_libctl, .keydesc, .txtrfa);
	IF NOT .status
	THEN
	    BEGIN
	    IF .status NEQ lbr$_dupkey 
	    THEN SIGNAL ( lib$_inserterr, 2, keydesc, lib$gl_libfdb [fdb$l_namdesc], .status, .lbr$gl_rmsstv )
	    ELSE
		BEGIN	! duplicate module, cleanup and continue
		RETURN cleanup (txtrfa);
		END;
	    END;
	END;

lib_log_upd ((IF .replacing THEN lhe$c_replaced
				   ELSE lhe$c_inserted), .keydesc );
lib_log_op ((IF .replacing THEN lib$_replaced
				   ELSE lib$_inserted), .keydesc, .lib$gl_libfdb);

CH$FILL (0, rfa$c_length, txtrfa [rfa$l_vbn]);

RETURN true
END;

ROUTINE put_end =
BEGIN

!++
!
! Local routine to call lbr$put_end
!
!--

rms_perform (lbr$put_end (lib$gl_libctl),
	lib$_writeerr, .lbr$gl_rmsstv, 1, lib$gl_libfdb [fdb$l_namdesc]);

RETURN true
END;

!
! Main body of lib_input_hlp
!

LOCAL
    keyname : VECTOR [lbr$c_pagesize, BYTE],!key name when up cased
    found1,				!True when key1 found
    current_level,			!Current level of key
    get_status,				!status from reading input file
    ret_status,				!status from last library operation
    level,				!new level
    replacing,
    deltxtrfa : BBLOCK [rfa$c_length],	!RFA of text to delete
    txtrfa : BBLOCK [rfa$c_length],	!RFA returned from PUT_RECORD
    key1desc : BBLOCK [dsc$c_s_bln],	!String descriptor for saved key1
    keydesc : BBLOCK [dsc$c_s_bln];	!String descriptor for key

 current_level = 0;
found1 = false;
CH$FILL (0, rfa$c_length, txtrfa);
!
! Read records until end of file
!
WHILE (get_status = get_record (linedesc)) NEQ rms$_eof DO
    BEGIN
    !
    !	Check for RUNOFF lines and remove <CR><LF>
    !
    IF .linedesc [dsc$w_length] GEQU 2  AND				! If line has two or more characters
      .(.linedesc [dsc$a_pointer] + .linedesc [dsc$w_length] -2)<0,16>
      EQLU (CR OR LF^8) 						! and last two are <CR><LF>
    THEN
	linedesc [dsc$w_length] = .linedesc [dsc$w_length] - 2;		! Strip off last two characters

    IF is_key_on_line (level, keydesc)
    THEN BEGIN
	IF NOT .found1							!If havent found key1 yet
	THEN BEGIN
	    IF .level NEQ 1						! and this is not level 1
		THEN BEGIN
		    SIGNAL (lib$_illkeylvl, 4, .level, keydesc,	lib$gl_inpfdb [fdb$l_namdesc], 1);
		    cleanup (txtrfa);
		    RETURN lib$_illkeylvl;
		    END;
	    END

	ELSE BEGIN							!This is not first key1
	    IF .level GTR .current_level 				!If greater than current level
		AND .level NEQ .current_level+1
		OR .level EQL 0
	    THEN BEGIN
		SIGNAL (lib$_illkeylvl, 4, .level, keydesc, lib$gl_inpfdb [fdb$l_namdesc], .current_level);
		cleanup (txtrfa);
		RETURN lib$_illkeylvl;
		END;

	    current_level = .level;					!Set new current level
	    END;

	IF .level NEQ 1							!If not first level
	    THEN put_record (linedesc, txtrfa)				! then write the record

!
! This is level 1 key.  If we have seen level 1 before, then finish writing previous module
! and insert the key.  Then check new key length and save descriptor.
!
	    ELSE BEGIN

		IF .found1						!If writing one already
		THEN BEGIN
		    put_end ();						!Write end of module record
		    insertkey1 (key1desc, txtrfa, .replacing, deltxtrfa);
		    END;

		IF .keydesc [dsc$w_length] GTR .lib$gl_keysize		!Check key length
		THEN BEGIN
		    SIGNAL (lib$_keynamlng, 2, keydesc, lib$gl_inpfdb [fdb$l_namdesc]);
		    RETURN lib$_keynamlng;
		    END;

		CH$MOVE (.keydesc [dsc$w_length], .keydesc [dsc$a_pointer], keyname [1]);	! Store key1 for message text
		keydesc [dsc$a_pointer] = keyname [1];
		keyname [0] = .keydesc [dsc$w_length];			! set length
		CH$MOVE (dsc$c_s_bln, keydesc, key1desc);		! and copy it to a safe place
		replacing = lbr$lookup_key (lib$gl_libctl, key1desc, deltxtrfa);

		IF NOT .lib$gl_ctlmsk [lib$v_replace]			!If not replacing
		    AND .replacing					! but module already in library
		    THEN BEGIN
			!
			!   Signal duplicate now and then process it.  It will be caught again later 
			!   and deleted.
			!
			SIGNAL (lib$_dupmodule, 3, keyname, lib$gl_inpfdb [fdb$l_namdesc],
				lib$gl_libfdb [fdb$l_namdesc]);
			END;

		put_record (linedesc, txtrfa);				!Write the first record
		found1 = true;						!Flag key1 found
		current_level = .level;					!Set current level
		END;
    END

    ELSE IF .found1							!Not a key line, if we have seen a key1...
	THEN put_record (linedesc, txtrfa);				! then write this line to module

END;									!Of WHILE loop

!
! Done reading input file
!

IF NOT .found1 
    THEN SIGNAL (lib$_nohlptxt, 1, lib$gl_inpfdb [fdb$l_namdesc])

!
! The module ended with end of module. finish the module now.
!

    ELSE BEGIN
	put_end ();						!Write end of module record
	insertkey1 (key1desc, txtrfa, .replacing, deltxtrfa);	! and then insert the key
	END;

RETURN true
END;					! Of lib_input_hlp

ROUTINE is_key_on_line (level, keydesc) =
BEGIN
!
! This routine returns true if there is a <number><key>
! on a line and false if not.
!
MAP
    keydesc : REF BBLOCK;

LOCAL
    tokenptr,
    tokenlen;

IF .linelen EQL 0 THEN RETURN false;

lineptr = .lineaddr - 1;
endptr = .lineaddr + .linelen;
curchar = CH$RCHAR (.lineptr + 1);
IF .curchar LSSU %ASCII'0'
OR .curchar GEQU %ASCII '9'
THEN RETURN false
ELSE BEGIN
    skip_blanks ();
    tokenlen = scan_word ();
    tokenptr = .lineaddr;
    IF NOT lib$cvt_dtb (.tokenlen, .tokenptr, .level)
	THEN RETURN false;
    IF NOT skip_blanks ()
	THEN RETURN false
	ELSE BEGIN
	    tokenptr = .lineptr;
	    tokenlen = scan_word ();
	    keydesc [dsc$w_length] = .tokenlen;
	    keydesc [dsc$a_pointer] = .tokenptr;
	    RETURN true;
	    END;
    END;
END;					!Of is_key_on_line

ROUTINE scan_word =
BEGIN
!
! This routine returns the length of the word which is pointed
! to currently by lineptr and advances lineptr to the character past
! the end of the word.
!
LOCAL
    startptr;

startptr = .lineptr;
WHILE CH$DIFF (.endptr, .lineptr + 1) GTR 0
DO BEGIN
    curchar = CH$A_RCHAR (lineptr);
    IF NOT symbol_char () THEN RETURN .lineptr - .startptr;
    END;
RETURN .lineptr + 1 - .startptr;
END;					!Of scan_word

ROUTINE skip_blanks =
BEGIN
!
! This routine skips blanks and tabs in the input line.
! Returns true if skipped to non-blank, non-tab character.
! Returns false if skipped to exclamation point or end of line.
!
WHILE CH$DIFF (.endptr, .lineptr + 1) GTR 0
DO BEGIN
    curchar = CH$A_RCHAR (lineptr);
    IF .curchar EQL %ASCII'!' THEN RETURN false;
    IF .curchar NEQ %ASCII' ' AND .curchar NEQ %ASCII'	'
	THEN RETURN true;
    END;
RETURN false;				!Return false for end of line
END;					!OF skip_blanks

ROUTINE symbol_char =
BEGIN
!
! This routine returns true if curchar is a character that may be
! in a symbol, and false if not.
!
OWN
    symbolics : BBLOCK [68] INITIAL
		('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789$_-');

IF CH$FAIL (CH$FIND_CH (66, symbolics, .curchar))
THEN RETURN false
ELSE RETURN true
END;					!Of symbol_char

ROUTINE make_upper_case (indesc, oname) =
BEGIN
!
! Convert the name to upper case
!
MAP
    indesc : REF BBLOCK,
    oname : REF VECTOR [,BYTE];

BIND
    namlen = indesc [dsc$w_length] : WORD,
    iname = indesc [dsc$a_pointer] : REF VECTOR [,BYTE];

IF .namlen GTRU 0
THEN INCRU i FROM 0 TO .namlen-1
DO IF .iname [.i] GEQU %ASCII'a'
    AND .iname [.i] LEQU %ASCII'z'
    THEN oname [.i] = .iname [.i] - (%ASCII'a' - %ASCII'A')
    ELSE oname [.i] = .iname [.i];
RETURN true
END;					!Of make_upper_case
END					! Of module
ELUDOM
