MODULE lib_delete (				! Delete modules
		LANGUAGE (BLISS32),
		IDENT = 'V03-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  Library command processor
!
! ABSTRACT:
!
!	The VAX/VMS librarian is invoked by DCL to process the LIBRARY
!	command.  It utilizes the librarian procedure set to perform
!	the actual modifications to the library.
!
! ENVIRONMENT:
!
!	VAX native, user mode.
!
!--
!
!
! AUTHOR:  Benn Schreiber,	 CREATION DATE:  2-July-1979
!
! MODIFIED BY:
!
!	V02-002		RPG0035		Bob Grosso	22-Apr-1981
!		Record module names for library update history.
!
!	V02-001	BLS0029		Benn Schreiber		23-Dec-1980
!		Convert messages to message compiler
!--



LIBRARY
	'SYS$LIBRARY:STARLET.L32';
REQUIRE
	'PREFIX';
REQUIRE
	'LIBDEF';
REQUIRE
	'LBRDEF';

FORWARD ROUTINE
    lib_delete_mac,				!Delete macro modules
    deletegsdsym;				!Delete object gsd symbols

EXTERNAL
    lbr$gl_rmsstv : ADDRESSING_MODE (GENERAL),	!RMS STV from librarian
    lib$gl_libfdb : REF BBLOCK,			!Pointer to library FDB
    lib$gl_objmodix,				!index for object modules
    lib$gl_objgsdix,				!index for object gsd index
    lib$gl_macmodix,				!index for macro names
    lib$gl_hlpmodix,				!index for help modules
    lib$gl_txtmodix,				!index for text modules
    lib$gl_libctl;				!library control index

EXTERNAL ROUTINE
    lib_get_zmem,				!Allocate virtual memory
    lib_free_mem,				!Deallocate virtual memory
    lib_log_upd,				!Record module names for LUH
    lib_log_op,					!log delete operation
    lbr$set_index : ADDRESSING_MODE (GENERAL),	!Set current index
    lbr$lookup_key : ADDRESSING_MODE (GENERAL),	!Lookup a key
    lbr$search : ADDRESSING_MODE (GENERAL),	!Search index for RFA
    lbr$delete_key : ADDRESSING_MODE (GENERAL),	!Delete a key
    lbr$delete_data : ADDRESSING_MODE (GENERAL);!Delete data

EXTERNAL LITERAL
    lib$_indexerr,				!Index error
    lib$_lookuperr,				!Error looking up module
    lib$_delkeyerr,				!Error deleteing key
    lib$_deldaterr,				!Error deleteing data
    lib$_deleted;				!Deleted ok

GLOBAL BIND ROUTINE
    lib_delete_hlp = lib_delete_mac,		!Delete help text module
    lib_delete_txt = lib_delete_mac;		!Delete TEXT module

OWN
    gsdlist : VECTOR [2, LONG];			!Listhead for deleted symbols

BUILTIN
    INSQUE,					!Insert into queue
    REMQUE;					!Remove from queue

GLOBAL ROUTINE lib_delete_obj (modulename) =
BEGIN
!
! Delete object modules

MAP
    modulename : REF BBLOCK [dsc$c_s_bln];
BIND
    libdesc = lib$gl_libfdb [fdb$l_namdesc] : BBLOCK;
LOCAL
    gsdlnb : REF BBLOCK,
    gsdesc : BBLOCK [dsc$c_s_bln],
    modulerfa : BBLOCK [rfa$c_length];

perform (lbr$set_index (lib$gl_libctl, lib$gl_objmodix),
		lib$_indexerr, 1, libdesc);

rms_perform (lbr$lookup_key (lib$gl_libctl, .modulename, modulerfa),
		lib$_lookuperr, .lbr$gl_rmsstv, 2, .modulename, libdesc);

perform (lbr$set_index (lib$gl_libctl, lib$gl_objgsdix),
		lib$_indexerr, 1, libdesc);

gsdlist [0] = gsdlist [0];			!Init the queue listhead
gsdlist [1] = gsdlist [0];
rms_perform (lbr$search (lib$gl_libctl, lib$gl_objgsdix, modulerfa, deletegsdsym), !find gsds
		lib$_indexerr, .lbr$gl_rmsstv, 1, libdesc);
!
! Remove the symbols from the list that was accumulated and delete
! them now.
!
WHILE NOT REMQUE (.gsdlist, gsdlnb)
DO BEGIN
    gsdesc [dsc$w_length] = .gsdlnb [lnb$b_namlng];	!Create a descriptor
    gsdesc [dsc$a_pointer] = gsdlnb [lnb$t_name];
    perform (lbr$delete_key (lib$gl_libctl, gsdesc),	!Delete the global symbol
		lib$_delkeyerr, 2, .modulename, libdesc);
    lib_free_mem (lnb$c_fixedsize+.gsdlnb [lnb$b_namlng], .gsdlnb);!Deallocate the block
    END;

perform (lbr$set_index (lib$gl_libctl, lib$gl_objmodix),
		lib$_indexerr, 1, libdesc);

rms_perform (lbr$delete_key (lib$gl_libctl, .modulename),
		lib$_delkeyerr, .lbr$gl_rmsstv, 2, .modulename, libdesc);

rms_perform (lbr$delete_data (lib$gl_libctl, modulerfa),
		lib$_deldaterr, .lbr$gl_rmsstv, 1, libdesc);

lib_log_upd (lhe$c_deleted, .modulename );
lib_log_op (lib$_deleted, .modulename, .lib$gl_libfdb);
RETURN true
END;

GLOBAL ROUTINE lib_delete_mac (modulename) =
BEGIN
!
! Delete macros
!
MAP
    modulename : REF BBLOCK [dsc$c_s_bln];
BIND
    libdesc = lib$gl_libfdb [fdb$l_namdesc] : BBLOCK;
LOCAL
    modulerfa : BBLOCK [rfa$c_length];
perform (lbr$set_index (lib$gl_libctl, lib$gl_macmodix),
		lib$_indexerr, 1, libdesc);

rms_perform (lbr$lookup_key (lib$gl_libctl, .modulename, modulerfa),
		lib$_lookuperr, .lbr$gl_rmsstv, 2, .modulename, libdesc);

rms_perform (lbr$delete_key (lib$gl_libctl, .modulename),
		lib$_delkeyerr, .lbr$gl_rmsstv, 2, .modulename, libdesc);

rms_perform (lbr$delete_data (lib$gl_libctl, modulerfa),
		lib$_deldaterr, .lbr$gl_rmsstv, 1, libdesc);

lib_log_upd (lhe$c_deleted, .modulename );
lib_log_op (lib$_deleted, .modulename, .lib$gl_libfdb);
RETURN true
END;

ROUTINE deletegsdsym (keydesc) =
BEGIN
!
! Delete one gsd symbol
!
MAP
    keydesc : REF BBLOCK [rfa$c_length];
BIND
    libdesc = lib$gl_libfdb [fdb$l_namdesc] : BBLOCK;
LOCAL
    lnb : REF BBLOCK;

perform (lib_get_zmem (lnb$c_fixedsize+.keydesc [dsc$w_length], lnb)); !Alloc a name block
CH$MOVE (.keydesc [dsc$w_length], .keydesc [dsc$a_pointer],	!Copy in the name
	lnb [lnb$t_name]);
lnb [lnb$b_namlng] = .keydesc [dsc$w_length];
INSQUE (.lnb, .gsdlist [1]);					!Insert into queue

RETURN true
END;				!Of deletegsdsym
END
ELUDOM

