MODULE LIB_MAIN (			! Librarian command processor main routine
		LANGUAGE (BLISS32),
		IDENT = 'V03-000',
		MAIN = LIBRARIAN_START
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  Library command processor
!
! ABSTRACT:
!
!	The VAX/VMS librarian is invoked by DCL to process the LIBRARY
!	command.  It utilizes the librarian procedure set to perform
!	the actual modifications to the library.
!
! ENVIRONMENT:
!
!	VAX native, user mode.
!
!--
!
!
! AUTHOR:  Benn Schreiber,	 CREATION DATE:  11-June-1979
!
! MODIFIED BY:
!
!	V02-003	BLS0029		Benn Schreiber		23-Dec-1980
!		Convert to message compiler.  Add library of shareable image
!		symbol tables.
!--



LIBRARY
	'SYS$LIBRARY:STARLET.L32';	!System data structure definitions
REQUIRE
	'PREFIX';			!Macro defs, etc.
REQUIRE
	'LIBDEF';			!Librarian command interface definitions

EXTERNAL ROUTINE
	lib_get_command,		!Get a command line
	lib_process_cmd;		!Process command line

FORWARD ROUTINE
	lib_handler;			!Handler to pick up highest severity

OWN
	exitvalue : BLOCK [1] INITIAL	!Value to exit with
			(ss$_normal);

GLOBAL ROUTINE LIBRARIAN_START (arglist) : NOVALUE =
BEGIN

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This is the entry point to the librarian command processor.  It calls
!	lib_get_command to get the command line and then processes it.
!
!
! CALLING SEQUENCE:
!
!	librarian_start(arglist)
!
! INPUT PARAMETERS:
!
!	arglist		is the argument list passed from CLI
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
!--
LOCAL
    status;

BUILTIN
    FP;

.FP = lib_handler;			!Set handler
IF lib_get_command (arglist-4)		!Parse the command
    THEN lib_process_cmd ();		!And process it

RETURN (status = .exitvalue OR sts$m_inhib_msg); !Exit with no message
END;					!Of librarian_start

ROUTINE lib_handler (sigargs, mechargs) =
BEGIN
!
! This routine is a condition handler called when ever a
! SIGNAL is done by the librarian.  It merely remembers the
! most severe error for an exit status.
!
MAP
    sigargs : REF BBLOCK,
    mechargs : REF BBLOCK;

BIND
    signame = sigargs [chf$l_sig_name] : BBLOCK;	!Name of signal

IF NOT .signame				!If its an error signal
    AND ((.signame [sts$v_severity]	! and severity is worse than it was
	GEQU .exitvalue [sts$v_severity])
	OR .exitvalue [sts$v_severity])	! or we haven't had any errors
    THEN exitvalue = .signame;		! then remember it for exiting

IF .signame [sts$v_severity] EQL sts$k_error
    OR .signame [sts$v_severity] EQL sts$k_severe
THEN BEGIN
    sigargs[chf$l_sig_args] = .sigargs[chf$l_sig_args] - 2;	!Decrement PC/PSL pair
    $putmsg(msgvec=sigargs[chf$l_sig_args]);			!Output the message
    mechargs [chf$l_mch_savr0] = .signame OR sts$m_inhib_msg;	!Set inhib_msg in return R0
    !
    ! Temporary code to set inhib_msg in all messages in the signal vector
    !
    BEGIN
	LOCAL
	    ptr;

	BIND
	    sigargvec = signame : VECTOR[,LONG];

	ptr = 0;
	WHILE .ptr LSSU .sigargs[chf$l_sig_args]	!While there are more args
	DO BEGIN
	    BIND 
		cursigname = sigargvec[.ptr] : BBLOCK;	!Name the current message

	    sigargvec[.ptr] = .sigargvec[.ptr] OR sts$m_inhib_msg; !Set inhib in current msg
	    IF .cursigname[sts$v_fac_no] LEQ 1		!If this is RMS message (or system message)
	    THEN BEGIN
		IF .cursigname[rms$v_stvstatus]		! with an STV status
		THEN BEGIN
		    sigargvec[.ptr+1] = .sigargvec[.ptr+1] OR sts$m_inhib_msg;	!Set inhib in it
		    ptr = .ptr + 2;			!Skip two longwords
		    END
		ELSE ptr = .ptr + 1;			!Otherwise just skip one
		END
	    ELSE ptr = .ptr + .sigargvec[.ptr+1] + 2;	!Not RMS, skip msg + count + lw of count
	    END;
	END;						!Of hack to set inhib_msg
    sigargs[chf$l_sig_args] = .sigargs[chf$l_sig_args] + 2;
    IF .signame [sts$v_severity] EQL sts$k_error
    THEN BEGIN
	SETUNWIND(%REF(1));		!Unwind to caller
        RETURN ss$_continue
	END
    ELSE RETURN ss$_resignal
    END

ELSE RETURN ss$_resignal;		!Resignal to get the error printed
END;					!Of lib_handler

END					! Of module
ELUDOM
