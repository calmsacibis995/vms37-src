%TITLE 'LIB$CREATE_DIR - Create directory'
MODULE LIB$CREATE_DIR (				! Create directory
		IDENT = 'V03-001'		! File: LIBCREDIR.B32 Edit: V03-001
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	General Utility Library
!
! ABSTRACT:
!
!	This routine creates a directory file.
!
! ENVIRONMENT:	Runs at any access mode - AST reentrant
!
! AUTHOR: Martin L. Jack, CREATION DATE: 23-Dec-1981
!
! MODIFIED BY:
!
!	V03-001	ACG0275		Andrew C. Goldstein,	26-Mar-1982  13:50
!		Fix read references to top level directories
!
! 1-001	- Original from LIBACP.B32.  MLJ 23-Dec-1981
!--


%SBTTL 'Declarations'
!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!
LINKAGE
	LINKAGE_JSB_2_2 = JSB(REGISTER=0;REGISTER=1,REGISTER=2);
!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    LIB$CREATE_DIR;				! Create directory

!
! INCLUDE FILES:
!

LIBRARY 'SYS$LIBRARY:LIB';			! System symbols

!*! REQUIRE 'RTLIN:RTLPSECT';			! Define PSECT declarations macros

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! FIELDS:
!
!	NONE
!
! PSECTS:
!
!*! DECLARE_PSECTS (LIB);				! Declare PSECTs for LIB$ facility
    PSECT
	    CODE = _LIB$CODE (READ, NOWRITE, EXECUTE, SHARE, PIC, ADDRESSING_MODE (WORD_RELATIVE)),
	    PLIT = _LIB$CODE (READ, NOWRITE, EXECUTE, SHARE, PIC, ADDRESSING_MODE (WORD_RELATIVE)),
	    OWN  = _LIB$DATA (READ, WRITE, NOEXECUTE, NOSHARE, PIC, ADDRESSING_MODE (LONG_RELATIVE)),
	    GLOBAL = _LIB$DATA (READ, WRITE, NOEXECUTE, NOSHARE, PIC, ADDRESSING_MODE (LONG_RELATIVE)) ;
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    LIB$ANALYZE_SDESC_R2:	LINKAGE_JSB_2_2,	! Analyze descriptor
    LIB$CVT_OTB,			! Convert octal to binary
    LIB$EXTRACT_CONCEALED,		! Extract concealed device/root directory
    LIB$FREE_EF,			! Deallocate an event flag
    LIB$GET_EF;				! Allocate an event flag

EXTERNAL LITERAL			! Completion status codes
    LIB$_INVARG,			! Invalid argument
    LIB$_INVFILSPE;			! Invalid file specification

%SBTTL 'LIB$CREATE_DIR - Create directory'
GLOBAL ROUTINE LIB$CREATE_DIR (			! Create directory
	DEV_DIR_SPEC,				! Device and directory string
	OWNER_UIC,				! Owner UIC
	PROT_ENABLE,				! File protection enables
	PROT_VALUE,				! File protection value
	MAX_VERSIONS,				! Maximum version count
	RVN					! Relative volume number
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine creates directory files.
!
! CALLING SEQUENCE:
!
!	ret_status.wlc.v = LIB$CREATE_DIR (dev-dir-spec.rt.dx,
!		[owner-UIC.rlu.r], [prot-enable.rwu.r], [prot-value.rwu.r],
!		[max-versions.rwu.r], [rvn.rwu.r])
!
! FORMAL PARAMETERS:
!
!	DEV_DIR_SPEC	Address of a descriptor for the device and directory
!			specification.  This string is a standard RMS file
!			specification; it must not contain a node name, file
!			name, file type, file version, or wild card characters;
!			it must contain an explicit directory; it must
!			reference a disk device.  The string must be no longer
!			than 255 characters.
!
!	OWNER_UIC	Address of a longword that specifies the owner UIC of
!			the created directories.  If specified with a zero
!			value, the owner UIC is that of the parent directory.
!			This is an optional parameter.  The default is the
!			current process UIC, except that if the directory is in
!			UIC format, that UIC is the default.
!
!	PROT_ENABLE	Address of a word containing a mask to specify the bits
!			of prot-value to be used.  Bits of the file protection
!			corresponding to set bits in prot-enable are set to the
!			value of the corresponding bit of the prot-value
!			parameter; bits of the file protection corresponding to
!			clear bits in prot-enable are set to the value of the
!			corresponding bit of the parent directory's file
!			protection with delete access dropped for all access
!			categories.  This is an optional parameter.  The
!			default is a mask of all zero bits, which results in
!			propagating the parent directory's file protection.
!			If prot-enable is all zero, prot-value is ignored.
!
!	PROT_VALUE	Address of a word containing a mask to specify the
!			value of the file protection.  Bits of the file
!			protection corresponding to set bits in prot-enable are
!			set to the value of the corresponding bit of the
!			prot-value parameter.  This is an optional parameter.
!			The default is a mask of all zero bits, which specifies
!			full access for all access categories.  In typical
!			usage, prot-value is not omitted unless prot-enable is
!			also omitted; in this case, prot-value is ignored.
!
!	MAX_VERSIONS	Address of a word that specifies the default maximum
!			number of versions for files cataloged in the created
!			directories.  This is an optional parameter.  The
!			default is the parent directory's default version
!			limit.  If specified as zero, the maximum number of
!			versions is not limited.
!
!	RVN		Address of a word that specifies the relative volume
!			number within a volume set on which the directories
!			must be created.  This is an optional parameter.  The
!			default is arbitrary placement.
!
!	The format of PROT_ENABLE and PROT_VALUE is:
!
!		 1 1 1 1 1 1
!		 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
!		+-------+-------+-------+-------+
!		|World  |Group  |Owner  |System |
!		|D E W R|D E W R|D E W R|D E W R|
!		+-------+-------+-------+-------+
!
!	Set bits deny access and clear bits grant access.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS:
!
!	SS$_NORMAL	Normal successful completion; all specified directories
!			already exist
!
!	SS$_CREATED	Normal successful completion; one or more directories
!			created
!
!	LIB$_INVARG	Required argument omitted, or dev-dir-spec longer than
!			255 characters
!
!	LIB$_INVFILSPE	File specification did not contain an explicit
!			directory or contained a node name, file name, file
!			type, file version, or wildcard, or device not a disk
!
!	LIB$ANALYZE_SDESC errors
!	$PARSE errors
!	LIB$EXTRACT_CONCEALED errors
!	$ASSIGN errors
!	LIB$GET_EF errors
!	$QIO errors
!	$DASSGN errors
!	LIB$FREE_EF errors
!
! SIDE EFFECTS:
!
!	Directory files created as requested.
!
!--

BEGIN
LOCAL
	FAB:		$FAB_DECL,	! FAB for $PARSE
	NAM:		$NAM_DECL,	! NAM block for $PARSE
	ESA_BUFFER:	VECTOR[NAM$C_MAXRSS,BYTE], ! Expanded string area
	ROOT_BUFFER:	VECTOR[NAM$C_MAXRSS,BYTE], ! Root directory name area
	TEMP_DESC_1:	BLOCK[DSC$K_S_BLN,BYTE], ! Utility descriptor
	TEMP_DESC_2:	BLOCK[DSC$K_S_BLN,BYTE], ! Utility descriptor
	NAME_BUFFER:	VECTOR[15,BYTE], ! Directory name buffer
	NAME_DESC:	BLOCK[DSC$K_Z_BLN,BYTE], ! Directory name descriptor
	RECATTR:	BLOCK[ATR$S_RECATTR,BYTE]
			VOLATILE,	! Record attributes
	UCHAR:		BLOCK[ATR$S_UCHAR,BYTE]
			VOLATILE,	! File characteristics
	FPRO:		BLOCK[ATR$S_FPRO,BYTE]
			VOLATILE,	! File protection
	UIC:		BLOCK[ATR$S_UIC,BYTE]
			VOLATILE,	! File owner UIC
	HEADER:		BLOCK[ATR$S_HEADER,BYTE]
			VOLATILE,	! File header
	FIB:		BLOCK[FIB$C_LENGTH,BYTE], ! FIB
	FIB_DESC:	VECTOR[2],	! Descriptor for FIB
	ATR:		BLOCKVECTOR[6,8,BYTE], ! Attribute descriptors
	IOSB:		VECTOR[4,WORD],	! I/O status block
	CHANNEL:	WORD,		! Channel number
	EFN,				! Event flag number
	GROUP,				! Binary group number
	MEMBER,				! Binary member number
	LOCAL_ENABLE:	WORD,		! Value of PROT_ENABLE after defaulting
	LOCAL_VALUE:	WORD,		! Value of PROT_VALUE after defaulting
	DIR_LENGTH,			! Length of residual directory string
	DIR_ADDRESS,			! Address of residual directory string
	STATUS_1,			! Status return
	STATUS_2,			! Status return
	STATUS_3,			! Status return
	STATUS_4,			! Status return
	STATUS_5,			! Status return
	STATUS_6,			! Status return
	STATUS_7,			! Status return
	FINAL_STATUS;			! Status return
BIND
	DIR_TYP_VER = UPLIT BYTE ('.DIR;1');
					! File type and version string
LABEL
	PROCESS;			! Block exited when processing complete
BUILTIN
	ACTUALCOUNT,			! Return number of arguments
	LOCC,				! LOCC instruction
	NULLPARAMETER,			! Test if parameter specified
	ROT;				! Rotate longword

!+
! Ensure that the required parameter is present.
!-

IF ACTUALCOUNT() EQL 0 THEN RETURN LIB$_INVARG;

!+
! Initialize RMS structures required to do a $PARSE.
!-

$FAB_INIT(FAB=FAB,
    NAM=NAM);
$NAM_INIT(NAM=NAM,
    ESA=ESA_BUFFER,
    ESS=NAM$C_MAXRSS);

!+
! Analyze the input descriptor and set up the FAB filename descriptor.
!-

BEGIN ! block to use output registers
REGISTER
	R1 = 1,
	R2 = 2;

STATUS_1 = LIB$ANALYZE_SDESC_R2(.DEV_DIR_SPEC; R1, R2);
IF NOT .STATUS_1 THEN RETURN .STATUS_1;
IF .R1 GTRU 255 THEN RETURN LIB$_INVARG;
FAB[FAB$B_FNS] = .R1;
FAB[FAB$L_FNA] = .R2;
END; ! block to use output registers

!+
! Parse the file specification to obtain the expanded name string.  RMS will
! usually return RMS$_DNF (directory not found), but all that is needed is
! the expanded string.
!-

STATUS_2 = $PARSE(FAB=FAB);
IF NOT .STATUS_2 AND .STATUS_2 NEQ RMS$_DNF THEN RETURN .STATUS_2;

!+
! Perform various error checks on the file specification.  It must not have
! a node name, file name, file type, or file version; it must have a directory
! name that does not contain wildcards.  It must reference a disk device.  If
! $PARSE failed with RMS$_DNF, FAB$L_DEV will be zero, but the RMS$_DNF error
! itself establishes that the device is a disk.
!-

IF
    (.FAB[FAB$L_DEV] NEQ 0 AND NOT .BLOCK[FAB[FAB$L_DEV], DEV$V_RND; ,BYTE]) OR
    NOT .NAM[NAM$V_EXP_DIR] OR
    (.NAM[NAM$L_FNB] AND
	(NAM$M_WILDCARD OR
	 NAM$M_NODE OR NAM$M_EXP_NAME OR NAM$M_EXP_TYPE OR NAM$M_EXP_VER))
	NEQ 0
THEN
    BEGIN

    !+
    ! If the string contained a wildcard or a node name, internal RMS resources
    ! have been consumed by $PARSE.  Execute another $PARSE using the same FAB
    ! on a null string to release these resources.
    !-

    FAB[FAB$B_FNS] = 0;
    $PARSE(FAB=FAB);
    RETURN LIB$_INVFILSPE;
    END;

!+
! Get the length and address of the directory string without brackets.
!-

DIR_LENGTH = .NAM[NAM$B_DIR] - 2;		! Length without brackets
DIR_ADDRESS = .NAM[NAM$L_DIR] + 1;		! Address without bracket

!+
! If the directory is in UIC format, convert it to normal format.
!-

IF .NAM[NAM$V_GRP_MBR]
THEN
    BEGIN
    REGISTER
	R0 = 0,
	R1 = 1;
    LOCAL
	COMMA_LENGTH,
	COMMA_ADDRESS;

    !+
    ! Locate the comma separating the group and member numbers and convert
    ! each to binary.
    !-

    IF NOT LOCC(%REF(%C','), DIR_LENGTH, .DIR_ADDRESS; R0, R1)
    THEN RETURN LIB$_INVFILSPE;				! No comma found
    COMMA_LENGTH = .R0;
    COMMA_ADDRESS = .R1;
    IF NOT LIB$CVT_OTB(.COMMA_ADDRESS - .DIR_ADDRESS, .DIR_ADDRESS, GROUP)
    THEN RETURN LIB$_INVFILSPE;				! Invalid group number
    COMMA_LENGTH = .COMMA_LENGTH - 1;
    IF NOT LIB$CVT_OTB(.COMMA_LENGTH, .COMMA_ADDRESS + 1, MEMBER)
    THEN RETURN LIB$_INVFILSPE;				! Invalid member number

    !+
    ! Overwrite the directory string with the converted one.
    !-

    TEMP_DESC_1[DSC$B_CLASS] = DSC$K_CLASS_Z;
    TEMP_DESC_1[DSC$B_DTYPE] = DSC$K_DTYPE_Z;
    TEMP_DESC_1[DSC$W_LENGTH] =  %CHARCOUNT('!OB!OB');
    TEMP_DESC_1[DSC$A_POINTER] = UPLIT BYTE('!OB!OB');
    TEMP_DESC_2[DSC$B_CLASS] = DSC$K_CLASS_Z;
    TEMP_DESC_2[DSC$B_DTYPE] = DSC$K_DTYPE_Z;
    TEMP_DESC_2[DSC$W_LENGTH] = DIR_LENGTH = 6;
    TEMP_DESC_2[DSC$A_POINTER] = .DIR_ADDRESS;
    $FAO(TEMP_DESC_1, 0, TEMP_DESC_2, .GROUP, .MEMBER);
    END;

!+
! Determine if the specified device name is a concealed device with a root
! directory name.
!-

TEMP_DESC_1[DSC$B_CLASS] = DSC$K_CLASS_S;
TEMP_DESC_1[DSC$B_DTYPE] = DSC$K_DTYPE_T;
TEMP_DESC_1[DSC$W_LENGTH] = .NAM[NAM$B_DEV];
TEMP_DESC_1[DSC$A_POINTER] = .NAM[NAM$L_DEV];
TEMP_DESC_2[DSC$B_CLASS] = DSC$K_CLASS_S;
TEMP_DESC_2[DSC$B_DTYPE] = DSC$K_DTYPE_T;
TEMP_DESC_2[DSC$W_LENGTH] = NAM$C_MAXRSS;
TEMP_DESC_2[DSC$A_POINTER] = ROOT_BUFFER;
STATUS_3 = LIB$EXTRACT_CONCEALED(TEMP_DESC_1, 0, TEMP_DESC_2, 0, TEMP_DESC_2);
IF NOT .STATUS_3
THEN
    BEGIN
    IF .STATUS_3 NEQ LIB$_INVFILSPE THEN RETURN .STATUS_3;	! Unexpected
    END
ELSE
    BEGIN
    LOCAL
	ROOT_LENGTH;			! Length of root directory string

    ROOT_LENGTH = .TEMP_DESC_2[DSC$W_LENGTH];

    IF .ROOT_LENGTH NEQ 0
    THEN
	BEGIN

	!+
	! Construct the complete directory string by concatenating the root
	! directory specification and the specified directory into the root
	! directory buffer.
	!-
    
	ROOT_BUFFER[.ROOT_LENGTH] = %C'.';
	CH$MOVE(.DIR_LENGTH, .DIR_ADDRESS, ROOT_BUFFER[.ROOT_LENGTH+1]);
	DIR_LENGTH = .DIR_LENGTH + .ROOT_LENGTH + 1;
	DIR_ADDRESS = ROOT_BUFFER;
	END;
    END;

!+
! Set up the FIB to look up the MFD.
!-

CH$FILL(0, FIB$C_LENGTH, FIB);
FIB[FIB$L_ACCTL] = FIB$M_WRITE OR FIB$M_NOREAD OR FIB$M_NOWRITE;
FIB[FIB$W_FID_NUM] = FID$C_MFD;
FIB[FIB$W_FID_SEQ] = FID$C_MFD;

!+
! Set up the FIB descriptor.
!-

FIB_DESC[0] = FIB$C_LENGTH;
FIB_DESC[1] = FIB;

!+
! Set up the name descriptor.  The length is filled in as need be.
!-

NAME_DESC[DSC$A_POINTER] = NAME_BUFFER;

!+
! Assign a channel to the device.  The descriptor is already set up from
! a preceding operation.
!-

STATUS_4 = $ASSIGN(DEVNAM=TEMP_DESC_1, CHAN=CHANNEL);
IF NOT .STATUS_4 THEN RETURN .STATUS_4;

!+
! Allocate an event flag.
!-

STATUS_5 = LIB$GET_EF(EFN);
IF NOT .STATUS_5
THEN
    BEGIN
    $DASSGN(CHAN=.CHANNEL);
    RETURN .STATUS_5;
    END;

!+
! Beginning of block that is exited when processing is complete.  FINAL_STATUS
! contains the status to be returned to caller.
!-

PROCESS:  BEGIN

!+
! Loop to look up directories.
!-

WHILE 1 DO
    BEGIN

    !+
    ! Copy the file ID to FIB$W_DID so that the next lookup is done in that
    ! directory.
    !-

    FIB[FIB$W_DID_NUM] = .FIB[FIB$W_FID_NUM];
    FIB[FIB$W_DID_SEQ] = .FIB[FIB$W_FID_SEQ];
    FIB[FIB$W_DID_RVN] = .FIB[FIB$W_FID_RVN];

    !+
    ! Locate the next directory name.
    !-

    BEGIN ! block to use output registers
    REGISTER
	R0 = 0,
	R1 = 1;
    LOCAL
	NAME_LENGTH,
	NAME_ADDRESS;

    NAME_ADDRESS = .DIR_ADDRESS;		! Save starting point
    LOCC(%REF(%C'.'), DIR_LENGTH, .DIR_ADDRESS; R0, R1);
    NAME_LENGTH = .DIR_LENGTH - .R0;		! Length preceding dot or end
    DIR_ADDRESS = .R1 + 1;			! Prune to string following dot
    R0 = .R0 - 1;
    DIR_LENGTH = .R0;

    !+
    ! Construct the directory name concatenated with '.DIR;1' in the name
    ! buffer, and a descriptor for this name in the name descriptor.
    !-

    NAME_DESC[DSC$W_LENGTH] = .NAME_LENGTH + 6;
    CH$MOVE(6, DIR_TYP_VER, CH$MOVE(.NAME_LENGTH, .NAME_ADDRESS, NAME_BUFFER));
    END; ! block to use output registers

    !+
    ! Look up the directory at the current level.  If the directory
    ! does not exist, exit the loop to begin creating directories.
    !-

    FINAL_STATUS = $QIOW(
	FUNC=IO$_ACCESS,
	CHAN=.CHANNEL,
	EFN=.EFN,
	IOSB=IOSB,
	P1=FIB_DESC,
	P2=NAME_DESC);
    IF .FINAL_STATUS THEN FINAL_STATUS = .IOSB[0];
    IF .FINAL_STATUS EQL SS$_NOSUCHFILE THEN EXITLOOP;
    IF NOT .FINAL_STATUS THEN LEAVE PROCESS;

    !+
    ! If no more directory levels were specified, all specified directories
    ! already exist, so return with success.
    !-

    IF .DIR_LENGTH LEQ 0
    THEN
	BEGIN
	FINAL_STATUS = SS$_NORMAL;
	LEAVE PROCESS;
	END;
    END;

!+
! We have reached the level at which directories do not yet exist.  FIB$W_DID
! now contains the file ID of the directory in which the new directory must be
! cataloged and the filename descriptor contains the name of the new directory.
!-

!+
! Set up the attribute list.  Because of dependencies later in the routine,
! the file header attribute must be last, preceded by the owner UIC attribute.
!-

ATR[0, ATR$W_TYPE] = ATR$C_RECATTR;	! Record attributes
ATR[0, ATR$W_SIZE] = ATR$S_RECATTR;
ATR[0, ATR$L_ADDR] = RECATTR;
ATR[1, ATR$W_TYPE] = ATR$C_UCHAR;	! File characteristics
ATR[1, ATR$W_SIZE] = ATR$S_UCHAR;
ATR[1, ATR$L_ADDR] = UCHAR;
ATR[2, ATR$W_TYPE] = ATR$C_FPRO;	! File protection
ATR[2, ATR$W_SIZE] = ATR$S_FPRO;
ATR[2, ATR$L_ADDR] = FPRO;
ATR[3, ATR$W_TYPE] = ATR$C_UIC;		! File owner UIC
ATR[3, ATR$W_SIZE] = ATR$S_UIC;
ATR[3, ATR$L_ADDR] = UIC;
ATR[4, ATR$W_TYPE] = ATR$C_HEADER;	! File header
ATR[4, ATR$W_SIZE] = ATR$S_HEADER;
ATR[4, ATR$L_ADDR] = HEADER;
ATR[5, 0,0,32,0] = 0;			! End of list


!+
! Copy the file ID back to FIB$W_FID to do the read attributes on the
! last directory file.
!-

FIB[FIB$W_FID_NUM] = .FIB[FIB$W_DID_NUM];
FIB[FIB$W_FID_SEQ] = .FIB[FIB$W_DID_SEQ];
FIB[FIB$W_FID_RVN] = .FIB[FIB$W_DID_RVN];
FIB[FIB$W_DID_NUM] = 0;
FIB[FIB$W_DID_SEQ] = 0;
FIB[FIB$W_DID_RVN] = 0;

!+
! Read the attributes of the last directory file found so that they
! may be propagated to the directories created.
!-

FINAL_STATUS = $QIOW(
    FUNC=IO$_ACCESS,
    CHAN=.CHANNEL,
    EFN=.EFN,
    IOSB=IOSB,
    P1=FIB_DESC,
    P5=ATR);
IF .FINAL_STATUS THEN FINAL_STATUS = .IOSB[0];
IF NOT .FINAL_STATUS THEN LEAVE PROCESS;


!+
! Delete the file header attribute from the attribute list, since it is not
! valid (or necessary) for creates.
!-

ATR[4, 0,0,32,0] = 0;

!+
! Copy the file ID to FIB$W_DID to create the directory.
!-

FIB[FIB$W_DID_NUM] = .FIB[FIB$W_FID_NUM];
FIB[FIB$W_DID_SEQ] = .FIB[FIB$W_FID_SEQ];
FIB[FIB$W_DID_RVN] = .FIB[FIB$W_FID_RVN];

!+
! Establish the allocation of the created directories.  A Structure Level 1
! directory is allocated zero blocks; a Structure Level 2 directory is
! allocated one block.  (This block is later initialized.)  In both cases,
! the file is marked contiguous.
!-

FIB[FIB$W_EXCTL] = FIB$M_EXTEND OR FIB$M_FILCON OR FIB$M_ALCON;
IF .HEADER[FH2$B_STRUCLEV] EQL 2 THEN FIB[FIB$L_EXSZ] = 1;

!+
! Set up the end of file pointer.  It points to the highest allocated block
! plus one (with a first free byte of zero).  Note that EFBLK is stored in
! inverted format.
!-

RECATTR[FAT$L_EFBLK] = ROT(.FIB[FIB$L_EXSZ] + 1, 16);

!+
! Establish the owner UIC of the created directories.  If the process default
! UIC is to be used, delete the owner UIC attribute from the attribute list
! to cause the ACP to use the default.
!-

IF NOT NULLPARAMETER(2)
THEN
    BEGIN
    IF ..OWNER_UIC NEQ 0 THEN UIC = ..OWNER_UIC;
    END
ELSE
    IF .NAM[NAM$V_GRP_MBR]
    THEN
	BEGIN
	UIC<16,16> = .GROUP;
	UIC<0,16> = .MEMBER;
	END
    ELSE
	ATR[3, 0,0,32,0] = 0;

!+
! Establish the file protection of the created directories.
!-

FPRO = .FPRO OR %X'8888';
LOCAL_ENABLE = 0;
IF NOT NULLPARAMETER(3)
THEN
    LOCAL_ENABLE = .(.PROT_ENABLE)<0,16>;

LOCAL_VALUE = 0;
IF NOT NULLPARAMETER(4)
THEN
    LOCAL_VALUE = .(.PROT_VALUE)<0,16>;

FPRO = (.FPRO AND NOT .LOCAL_ENABLE) OR (.LOCAL_VALUE AND .LOCAL_ENABLE);

!+
! Establish the default version limit of the created directories.
!-

IF NOT NULLPARAMETER(5)
THEN
    RECATTR[FAT$W_VERSIONS] = .(.MAX_VERSIONS)<0,16>;

!+
! Establish the placement of the created directories.  Note that if placement
! is specified, it is required.
!-

IF NOT NULLPARAMETER(6)
THEN
    BEGIN
    FIB[FIB$V_EXACT] = 1;			! Exact placement
    FIB[FIB$B_ALALIGN] = FIB$C_LBN;		! RVN and LBN placement
    FIB[FIB$W_LOC_RVN] = .(.RVN)<0,16>;		! Required RVN
    END;

!+
! Loop to create directories.
!-

WHILE 1 DO
    BEGIN

    !+
    ! Create and access the file.
    !-

    FINAL_STATUS = $QIOW(
	FUNC=IO$_CREATE OR IO$M_CREATE OR IO$M_ACCESS,
	CHAN=.CHANNEL,
	EFN=.EFN,
	IOSB=IOSB,
	P1=FIB_DESC,
	P2=NAME_DESC,
	P5=ATR);
    IF .FINAL_STATUS THEN FINAL_STATUS = .IOSB[0];
    IF NOT .FINAL_STATUS THEN LEAVE PROCESS;

    !+
    ! If the directory is Structure Level 2, write the first block of the
    ! file.
    !-

    IF .HEADER[FH2$B_STRUCLEV] EQL 2
    THEN
	BEGIN
	LOCAL
	    BLOCK_BUFFER:	VECTOR[256,WORD];	! Block buffer

	BLOCK_BUFFER[0] = -1;				! End of block marker
	CH$FILL(0, 510, BLOCK_BUFFER[1]);		! Fill rest of block
	FINAL_STATUS = $QIOW(
	    FUNC=IO$_WRITEVBLK,
	    CHAN=.CHANNEL,
	    EFN=.EFN,
	    IOSB=IOSB,
	    P1=BLOCK_BUFFER,
	    P2=512,
	    P3=1);
	IF .FINAL_STATUS THEN FINAL_STATUS = .IOSB[0];
	IF NOT .FINAL_STATUS THEN LEAVE PROCESS;
	END;

    !+
    ! Deaccess the file.
    !-

    FINAL_STATUS = $QIOW(
	FUNC=IO$_DEACCESS,
	CHAN=.CHANNEL,
	EFN=.EFN,
	IOSB=IOSB);
    IF .FINAL_STATUS THEN FINAL_STATUS = .IOSB[0];
    IF NOT .FINAL_STATUS THEN LEAVE PROCESS;

    !+
    ! If no more directory levels were specified, they have all been created.
    !-

    IF .DIR_LENGTH LEQ 0
    THEN
	BEGIN
	FINAL_STATUS = SS$_CREATED;
	LEAVE PROCESS;
	END;

    !+
    ! Locate the next directory name.
    !-

    BEGIN ! block to use output registers
    REGISTER
	R0 = 0,
	R1 = 1;
    LOCAL
	NAME_LENGTH,
	NAME_ADDRESS;

    NAME_ADDRESS = .DIR_ADDRESS;		! Save starting point
    LOCC(%REF(%C'.'), DIR_LENGTH, .DIR_ADDRESS; R0, R1);
    NAME_LENGTH = .DIR_LENGTH - .R0;		! Length preceding dot or end
    DIR_ADDRESS = .R1 + 1;			! Prune to string following dot
    R0 = .R0 - 1;
    DIR_LENGTH = .R0;

    !+
    ! Construct the directory name concatenated with '.DIR;1' in the name
    ! buffer, and a descriptor for this name in the name descriptor.
    !-

    NAME_DESC[DSC$W_LENGTH] = .NAME_LENGTH + 6;
    CH$MOVE(6, DIR_TYP_VER, CH$MOVE(.NAME_LENGTH, .NAME_ADDRESS, NAME_BUFFER));
    END; ! block to use output registers

    !+
    ! Copy the file ID of the created directory to FIB$W_DID so that the next
    ! directory is cataloged in the directory just created.
    !-

    FIB[FIB$W_DID_NUM] = .FIB[FIB$W_FID_NUM];
    FIB[FIB$W_DID_SEQ] = .FIB[FIB$W_FID_SEQ];
    FIB[FIB$W_DID_RVN] = .FIB[FIB$W_FID_RVN];
    END;

!+
! End of block that is exited when processing is complete.  FINAL_STATUS
! contains the status that is to be returned to caller.
!-

END; ! of block PROCESS

!+
! Deassign the channel and deallocate the event flag.
!-

STATUS_6 = $DASSGN(CHAN=.CHANNEL);
STATUS_7 = LIB$FREE_EF(EFN);
IF NOT .STATUS_7 THEN RETURN .STATUS_7;
IF NOT .STATUS_6 THEN RETURN .STATUS_6;

!+
! Return the status.
!-

RETURN .FINAL_STATUS;
END;					! End of routine LIB$CREATE_DIR

END					! End of module LIB$CREATE_DIR
ELUDOM
