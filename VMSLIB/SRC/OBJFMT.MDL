;	Version 'V03-000'
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;
; MODIFIED BY:
;
;	V02-008		BLS0096		Benn Schreiber		31-Oct-1981
;		Add shareable image psect type SGPS
;
;	V02-007		BLS0094		Benn Schreiber		31-Oct-1981
;		Add STA_LEPM
;
;	V02-006		BLS0084		Benn Schreiber		21-Sep-1981
;		Make IDC IDMATCH 2 bits, add ERRSEV
;
;	V02-005		BLS0062		Benn Schreiber		28-Jul-1981
;		Correct local symbol definition
;
;	V02-004		BLS0045		Benn Schreiber		14-Mar-1981
;		Correct store repeated limit to be longword
;
;	V02-003		BLS0037		Benn Schreiber		29-Jan-1981
;		Add rest of new object language commands: local symbols,
;		end of module word psect.
;
;	V02-002		BLS0033		Benn Schreiber		5-Jan-1981
;		Add new definitions for more psects, add literal operators,
;		and ident check.
;
;	V02-001		BLS0011		Benn Schreiber		1-Sep-1980
;		Implement TIR$C_CTL_STKDL to stack debug location.
;---
;
; Definition file for the VAX/VMS object language
;
	$STRUCT	OBJ, RECDEF

	F	RECTYP, B		;First byte always record type
	C	<			;Permissable record types
		HDR, 0			;Module header record
		 HDR_MHD, 0		; Main header record
		 HDR_LNM, 1		; Language processor record
		 HDR_SRC, 2		; Source files description
		 HDR_TTL, 3		; Title text
		 HDR_CPR, 4		; Copyright text
		 HDR_MTC, 5		; Maintenance text
		 HDR_GTX, 6		; General text
		GSD, 1			;Global symbol definition record
		 GSD_PSC, 0		; P-sect definition
		 GSD_SYM, 1		; Symbol (simple) definition
		 GSD_EPM, 2		; Entry point definition
		 GSD_PRO, 3		; Procedure definition
		 GSD_SYMW, 4		; Symbol definition with word psect
		 GSD_EPMW, 5		; Entry point definition with word psect
		 GSD_PROW, 6		; Procedure definition with word psect
		 GSD_IDC, 7		; Random entity check
		 GSD_ENV, 8		; Environment definition
		 GSD_LSY, 9		; Local symbol definition/reference
		 GSD_LEPM, 10		; Local symbol entry point def.
		 GSD_LPRO, 11		; Local symbol procedure def.
		 GSD_SPSC, 12		; Shareable image psect definition
		TIR, 2			;Text information record
		EOM, 3			;End of module record
		DBG, 4			;Debugger information record
		TBT, 5			;Traceback information record
		LNK, 6			;(NYI)
		EOMW, 7			;End of module record with word psect
		MAXRECTYP, 7		;Last assigned record type
		>
	L	SUBTYP
	F	SUBTYP, B		;Record sub-type byte
	F	MHD_STRLV, B		;Structure level
	F	MHD_RECSZ, W		;Maximum record size
	F	MHD_NAME, T, 0		;Module name field
	C	<			;Misc. constants
		MAXRECSIZ, 2048		;Maximum legal record size
		STRLVL, 0		;Structure level
		SYMSIZ, 31		;Maximum symbol length
		STOREPLIM, -1		;Maximum repeat count on store commands
		PSCALILIM, 9		;Maximum p-sect alignment
		>
	E

;
; Module header record (MHD)
;
	$STRUCT	MHD

	F	RECTYP, B		;Record type (OBJ$C_MHD)
	F	HDRTYP, B		;Type field for MHD
	C	<			;Types of header records
		MHD, 0			;Main header record
		LNM, 1			;Language name and version
		SRC, 2			;Source file specification
		TTL, 3			;Title text of module
		CPR, 4			;Copyright notice
		MTC, 5			;Maintenence status
		GTX, 6			;General text
		MAXHDRTYP, 6		;Maximum allowable type
		>
	F	STRLVL, B		;Structure level
	F	RECSIZ, W		;Maximum record size
	F	NAMLNG, B		;Module name length
	F	NAME, T, 31		;Module name
;					;Module version (ASCIC)
;					;Creation date/time (17 bytes)
;					;Time of last patch (17 bytes)
	E

;
; End of module record (EOM)
;
	$STRUCT	EOM

	F	RECTYP, B		;Record type (OBJ$C_EOM)
	F	COMCOD, B		;Compiler completion code
	C	<			;Values
		SUCCESS, 0		;Successful (no errors)
		WARNING, 1		;Warnings issued
		ERROR, 2		;Errors detected
		ABORT, 3		;Abort the link
		>
	L	EOMMIN			;Min length of EOM record
	F	PSINDX, B		;P-sect of transfer address
	F	TFRADR, L		;Transfer address
	L	EOMMX1			;Length of EOM record w/o transfer flags
	F	TFRFLG, B		;Transfer address flags
	V	<M
		WKTFR			;Transfer address is weak
		>
	L	EOMMAX			;Maximum length of EOM record
	E
;
; End of module record with word of psect (EOMW)
;
	$STRUCT	EOMW

	F	RECTYP, B		;Record type (OBJ$C_EOM)
	F	COMCOD, B		;Compiler completion code
	L	EOMMIN			;Min length of EOM record
	F	PSINDX, W		;P-sect of transfer address
	F	TFRADR, L		;Transfer address
	L	EOMMX1			;Length of EOMW record w/o transfer flags
	F	TFRFLG, B		;Transfer address flags
	V	<M
		WKTFR			;Transfer address is weak
		>
	L	EOMMAX			;Maximum length of EOMW record
	E

;
; Global symbol definition record (GSD)
;

	$STRUCT GSD

	F	RECTYP, B		;Record type (OBJ$C_GSD)
	L	ENTRIES			;Offset to first entry in record
	F	GSDTYP, B		;Type of entry (first byte of entry)
	C	<
		PSC, 0			;Psect definition
		SYM, 1			;Symbol specification
		EPM, 2			;Entry point and mask definition
		PRO, 3			;Procedure with formal arguments
		SYMW, 4			;Symbol specification with word psect
		EPMW, 5			;Entry point mask with word psect
		PROW, 6			;Procedure with word psect
		IDC, 7			;Random entity check
		ENV, 8			;Define environment
		LSY, 9			;Local symbol
		LEPM, 10		;Local symbol entry point definition
		LPRO, 11		;Local symbol procedure definition
		SPSC, 12		;Shareable image psect definition
		MAXRECTYP, 12		;Maximum entry type defined
		>
	E

;
; GSD entry - P-section definition
;
	$STRUCT	GPS

	F	START, T, 0
	F	GSDTYP, B		;Typ field
	F	ALIGN, B		;P-sect alignment
	F	FLAGS, W		;P-sect flags
	V	<M
		PIC			;Position independent
		LIB			;From a shareable image
		OVR			;Overlaid memory allocation
		REL			;Relocatable
		GBL			;Global scope
		SHR			;Shareable
		EXE			;Executable
		RD			;Readable
		WRT			;Writeable
		VEC			;Vector psect
		>
	F	ALLOC, L		;Length of this contribution
	F	NAMLNG, B		;Length of p-sect name
	L	NAME
	F	NAME, T, 31		;Name field
	E
;
; GSD entry - P-section definition in shareable image
;
	$STRUCT	SGPS

	F	START, T, 0
	F	GSDTYP, B		;Typ field
	F	ALIGN, B		;P-sect alignment
	F	FLAGS, W		;P-sect flags
	V	<M
		PIC			;Position independent
		LIB			;From a shareable image
		OVR			;Overlaid memory allocation
		REL			;Relocatable
		GBL			;Global scope
		SHR			;Shareable
		EXE			;Executable
		RD			;Readable
		WRT			;Writeable
		VEC			;Vector psect
		>
	F	ALLOC, L		;Length of this psect in shr image
	F	BASE, L			;Base of this psect in shr image
	F	NAMLNG, B		;Length of p-sect name
	L	NAME
	F	NAME, T, 31		;Name field
	E
;
; GSD entry - Symbol definition
;
; common to definitions, references, and entry
; point definitions.
;

	$STRUCT	GSY

	F	START, T, 0
	F	GSDTYP, B		;Type field
	F	DATYP, B		;Symbol data type
	F	FLAGS, W		;Symbol flags
	V	<M
		WEAK			;Weak symbol
		DEF			;Definition
		UNI			;Universal
		REL			;Relocatable
		>
	E
;
; Symbol reference (SYM$M_DEF in GSY$W_FLAGS is 0)
;
	$STRUCT	SRF

	F	START, T, 0
	F	GSDTYP, B		;Maps over GSY$B_GSDTYP
	F	DATYP, B		;Maps over GSY$B_DATYP
	F	FLAGS, W		;Maps over GSY$W_FLAGS
	F	NAMLNG,B		;Length of symbol name
	L	NAME
	F	NAME, T, 31		;Symbol name
	E
;
; Symbol definition
;
	$STRUCT	SDF

	F	START, T, 0
	F	GSDTYP, B		;Maps over GSY$B_GSDTYP
	F	DATYP, B		;Maps over GSY$B_DATYP
	F	FLAGS, W		;Maps over GSY$W_FLAGS
	F	PSINDX, B		;Owning psect number
	F	VALUE, L		;Value of symbol
	F	NAMLNG, B		;Length of name
	L	NAME
	F	NAME, T, 31		;Symbol name
	E
;
; GSD entry - Entry point definition
;
	$STRUCT	EPM

	F	START, T, 0
	F	GSDTYP, B		;Maps over GSY$B_GSDTYP
	F	DATYP, B		;Maps over GSY$B_DATYP
	F	FLAGS, W		;Maps over GSY$W_FLAGS
	F	PSINDX, B		;Maps over SDF$B_PSINDX
	F	ADDRS, L		;Entry point address, maps over SDF$L_VALUE
	F	MASK, W			;Entry point mask
	F	NAMLNG, B		;Length of name
	L	NAME
	F	NAME, T, 31		;Symbol name
	E
;
; GSD entry - Procedure definition
;
	$STRUCT	PRO

	F	START, T, 0
	F	GSDTYP, B		;Maps over GSY$B_GSDTYP
	F	DATYP, B		;Maps over GSY$B_DATYP
	F	FLAGS, W		;Maps over GSY$W_FLAGS
	F	PSINDX, B		;Maps over SDF$B_PSINDX
	F	ADDRS, L		;Entry point address, maps over SDF$L_VALUE
	F	MASK, W			;Entry point mask
	F	NAMLNG, B		;Length of name
	L	NAME
	F	NAME, T, 31		;Symbol name
	E
;
; Appended to a procedure definition are the formal arguments:
;	FML$ - The fixed part of the formal arguments description
;
	$STRUCT	FML

	F	MINARGS, B		;Minimum number of arguments
	F	MAXARGS, B		;Maximum which include function if procedure is one
	L	SIZE
	E
;
;	ARG$ - The argument descriptors
;
	$STRUCT	ARG

	F	VALCTL, B		;Validation control byte
	V	<
		PASSMECH, 2		;Passing mechanism
		>
	C	<			; Passing mechanisms
		UNKNOWN, 0		;  Unspecified or unknown
		VALUE, 1		;  Passed by value
		REF, 2			;  Passed by reference
		DESC, 3			;  Passed by descriptor
		>
	F	BYTECNT, B		;Remaining byte count
	L	SIZE
	E

;
; Symbol definition with word of psect value
;
	$STRUCT	SDFW

	F	START, T, 0
	F	GSDTYP, B		;Maps over GSY$B_GSDTYP
	F	DATYP, B		;Maps over GSY$B_DATYP
	F	FLAGS, W		;Maps over GSY$W_FLAGS
	F	PSINDX, W		;Owning psect number
	F	VALUE, L		;Value of symbol
	F	NAMLNG, B		;Length of name
	L	NAME
	F	NAME, T, 31		;Symbol name
	E
;
; GSD entry - Entry point definition with word of psect value
;
	$STRUCT	EPMW

	F	START, T, 0
	F	GSDTYP, B		;Maps over GSY$B_GSDTYP
	F	DATYP, B		;Maps over GSY$B_DATYP
	F	FLAGS, W		;Maps over GSY$W_FLAGS
	F	PSINDX, W		;Maps over SDFW$W_PSINDX
	F	ADDRS, L		;Entry point address, maps over SDFW$L_VALUE
	F	MASK, W			;Entry point mask
	F	NAMLNG, B		;Length of name
	L	NAME
	F	NAME, T, 31		;Symbol name
	E
;
; GSD entry - Procedure definition with word of psect value
;
	$STRUCT	PROW

	F	START, T, 0
	F	GSDTYP, B		;Maps over GSY$B_GSDTYP
	F	DATYP, B		;Maps over GSY$B_DATYP
	F	FLAGS, W		;Maps over GSY$W_FLAGS
	F	PSINDX, W		;Maps over SDFW$W_PSINDX
	F	ADDRS, L		;Entry point address, maps over SDFW$L_VALUE
	F	MASK, W			;Entry point mask
	F	NAMLNG, B		;Length of name
	L	NAME
	F	NAME, T, 31		;Symbol name
	E
;
; IDC - Random entity ident consistency check
;
	$STRUCT	IDC

	F	GSDTYP, B		;Type field
	F	FLAGS, W		;Flags
	V	<
		BINIDENT		;Ident is binary longword rather than ASCIC
		IDMATCH,2		;Field for ident match control if binary ident
		ERRSEV,3		;Error severity (default is warning-0)
		>
	C	<			;Match control values
		LEQ
		EQUAL
		>
	F	NAMLNG, B		;Length of entity name
	F	NAME, T, 0		;
					; Followed by entity name
					; Followed by
					;	byte of ident length
					;		ident string (length = string length)
					;			or
					;		ident binary value (length = 4)
					; Followed by byte of length of name of object
					; Followed by the object name
	E
;
; ENV - Define/reference an environment
;
	$STRUCT	ENV

	F	GSDTYP, B		;Type field
	F	FLAGS, W		;Environment flags
	V	<M
		DEF			;Definition of environment
		>
	F	ENVINDX, W		;Index of parent environment
	F	NAMLNG, B		;Length of environment name
	F	NAME, T, 31		;Environment name
	E
;
; LSY - Module-Local symbol definition
;
; Common to definitions, references, entry points, and procedure definitions
;
	$STRUCT	LSY

	F	START, T, 0
	F	GSDTYP, B		;Type field
	F	DATYP, B		;Symbol type
	F	FLAGS, W		;Symbol flags
	V	<M
		WEAK			;Weak symbol (not used)
		DEF			;Defined symbol
		UNI			;Universal (not used)
		REL			;Relocatable
		>
	F	ENVINDX, W		;Environment index
	E
;
; Module-local Symbol reference (LSY$M_DEF in LSY$W_FLAGS is 0)
;
	$STRUCT	LSRF

	F	START, T, 0
	F	GSDTYP, B		;Maps over LSY$B_GSDTYP
	F	DATYP, B		;Maps over LSY$B_DATYP
	F	FLAGS, W		;Maps over LSY$W_FLAGS
	F	ENVINDX, W		;Maps over LSY$W_ENVINDX
	F	NAMLNG,B		;Length of symbol name
	L	NAME
	F	NAME, T, 31		;Symbol name
	E
;
; Module-local Symbol definition
;
	$STRUCT	LSDF

	F	START, T, 0
	F	GSDTYP, B		;Maps over LSY$B_GSDTYP
	F	DATYP, B		;Maps over LSY$B_DATYP
	F	FLAGS, W		;Maps over LSY$W_FLAGS
	F	ENVINDX, W		;Environment index symbol defined in
	F	PSINDX, W		;Owning psect number
	F	VALUE, L		;Value of symbol
	F	NAMLNG, B		;Length of name
	L	NAME
	F	NAME, T, 31		;Symbol name
	E
;
; GSD entry - Module local entry point definition
;
	$STRUCT	LEPM

	F	START, T, 0
	F	GSDTYP, B		;Maps over LSY$B_GSDTYP
	F	DATYP, B		;Maps over LSY$B_DATYP
	F	FLAGS, W		;Maps over LSY$W_FLAGS
	F	ENVINDX, W		;Environment index symbol defined in
	F	PSINDX, W		;Maps over LSDF$W_PSINDX
	F	ADDRS, L		;Entry point address, maps
					; over LSDF$L_VALUE
	F	MASK, W			;Entry point mask
	F	NAMLNG, B		;Length of name
	L	NAME
	F	NAME, T, 31		;Symbol name
	E
;
; GSD entry - Module Local Procedure definition
;
	$STRUCT	LPRO

	F	START, T, 0
	F	GSDTYP, B		;Maps over LSY$B_GSDTYP
	F	DATYP, B		;Maps over LSY$B_DATYP
	F	FLAGS, W		;Maps over LSY$W_FLAGS
	F	ENVINDX, W		;Environment index symbol defined in
	F	PSINDX, W		;Maps over LSDF$W_PSINDX
	F	ADDRS, L		;Entry point address, maps
					; over LSDF$L_VALUE
	F	MASK, W			;Entry point mask
	F	NAMLNG, B		;Length of name
	L	NAME
	F	NAME, T, 31		;Symbol name
	E
;
; Text, information and relocation record (TIR)
;

	$STRUCT	TIR

	F	RECTYP,B		;Record type (OBJ$C_TIR)

	C	<			; Define relocation commands

		STA_GBL, 0		;Stack global symbol value
		STA_SB, 1		;Stack signed byte
		STA_SW, 2		;Stack signed word
		STA_LW, 3		;Stack longword
		STA_PB, 4		;Stack psect base plus byte offset
		STA_PW, 5		;Stack psect base plus word offset
		STA_PL, 6		;Stack psect base plus longword offset
		STA_UB, 7		;Stack unsigned byte
		STA_UW, 8		;Stack unsigned word
		STA_BFI, 9		;Stack byte from image
		STA_WFI, 10		;Stack word from image
		STA_LFI, 11		;Stack longword from image
		STA_EPM, 12		;Stack entry point mask
		STA_CKARG, 13		;Stack result of argument checking (true or false)
		STA_WPB, 14		;Stack psect base plus byte offset -- word psect number
		STA_WPW, 15		;Stack psect base plus word offset -- word psect number
		STA_WPL, 16		;Stack psect base plus longword offset -- word of psect number
		STA_LSY, 17		;Stack local symbol value
		STA_LIT, 18		;Stack literal
		STA_LEPM, 19		;Stack local symbol entry point mask
		MAXSTACOD, 19		;Last assigned code of stack group
		MINSTOCOD, 20		;First assigned store command code
		STO_SB, 20		;Store signed byte
		STO_SW, 21		;Store signed word
		STO_L, 22		;Store longword
		STO_BD, 23		;Store byte displaced
		STO_WD, 24		;Store word displaced
		STO_LD, 25		;Store longword displaced
		STO_LI, 26		;Store short literal
		STO_PIDR, 27		;Store pos. indep. data reference
		STO_PICR, 28		;Store pos. indep. code reference
		STO_RSB, 29		;Store repeated signed byte
		STO_RSW, 30		;Store repeated signed word
		STO_RL, 31		;Store repeated longword
		STO_VPS, 32		;Store arbitrary field
		STO_USB, 33		;Store unsigned byte
		STO_USW, 34		;Store unsigned word
		STO_RUB, 35		;Store repeated unsigned byte
		STO_RUW, 36		;Store repeated unsigned word
		STO_B, 37		;Store byte
		STO_W, 38		;Store word
		STO_RB, 39		;Store repeated byte
		STO_RW, 40		;Store repeated word
		STO_RIVB, 41		;Store repeated immediate variable bytes
		STO_PIRR, 42		;Store pos. indep. relative reference
		MAXSTOCOD, 42		;Last assigned store command code
		MINOPRCOD, 50		;First assigned operator command code
		OPR_NOP, 50		;No-op
		OPR_ADD, 51		;Add
		OPR_SUB, 52		;Subtract
		OPR_MUL, 53		;Multiply
		OPR_DIV, 54		;Divide
		OPR_AND, 55		;Logical AND
		OPR_IOR, 56		;Logical inclusive OR
		OPR_EOR, 57		;Logical exclusive OR
		OPR_NEG, 58		;Negate
		OPR_COM, 59		;Complement
		OPR_INSV, 60		;Insert bit field
		OPR_ASH, 61		;Arithmetic shift
		OPR_USH, 62		;Unsigned shift
		OPR_ROT, 63		;Rotate
		OPR_SEL, 64		;Select one of three longwords on top of stack
		OPR_REDEF, 65		;Redefine this symbol after pass 2
		OPR_DFLIT, 66		;Define a literal
		MAXOPRCOD, 66		;Last assigned operator command code
		MINCTLCOD, 80		;First assigned control command code
		CTL_SETRB, 80		;Set relocation base
		CTL_AUGRB, 81		;Augment relocation base
		CTL_DFLOC, 82		;Define debug location
		CTL_STLOC, 83		;Set debug location
		CTL_STKDL, 84		;Stack debug location
		MAXCTLCOD, 84		;Last assigned control command code
		>
	E
