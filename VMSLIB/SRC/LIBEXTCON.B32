%TITLE 'LIB$EXTRACT_CONCEALED - Extract concealed device and root directory'
MODULE LIB$EXTRACT_CONCEALED (			! Extract concealed device and root directory
		IDENT = 'V03-000'			! File: LIBEXTCON.B32 Edit: 1-001
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	General Utility Library
!
! ABSTRACT:
!
!	This routine determines whether the device component of a file
!	specification is a concealed device, and if so, whether it also
!	specifies a root directory, and returns the concealed device and
!	root directory.
!
! ENVIRONMENT:	Runs at any access mode - AST reentrant
!
! AUTHOR: Martin L. Jack, CREATION DATE: 19-Dec-1981
!
! MODIFIED BY:
!
! 1-001	- Original.  MLJ 19-Dec-1981
!--


%SBTTL 'Declarations'
!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!
LINKAGE
	LINKAGE_JSB_3_6 = JSB(REGISTER=0,REGISTER=1,REGISTER=2):
			  NOPRESERVE(3,4,5,6),

	LINKAGE_JSB_2_2 = JSB(REGISTER=0;REGISTER=1,REGISTER=2);
!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    LIB$EXTRACT_CONCEALED;			! Extract concealed device and root directory

!
! INCLUDE FILES:
!

LIBRARY 'SYS$LIBRARY:LIB';			! System symbols

!*! REQUIRE 'RTLIN:RTLPSECT';			! Define PSECT declarations macros

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! FIELDS:
!
!	NONE
!
! PSECTS:
!
!*! DECLARE_PSECTS (LIB);				! Declare PSECTs for LIB$ facility
    PSECT
	    CODE = _LIB$CODE (READ, NOWRITE, EXECUTE, SHARE, PIC, ADDRESSING_MODE (WORD_RELATIVE)),
	    PLIT = _LIB$CODE (READ, NOWRITE, EXECUTE, SHARE, PIC, ADDRESSING_MODE (WORD_RELATIVE)),
	    OWN  = _LIB$DATA (READ, WRITE, NOEXECUTE, NOSHARE, PIC, ADDRESSING_MODE (LONG_RELATIVE)),
	    GLOBAL = _LIB$DATA (READ, WRITE, NOEXECUTE, NOSHARE, PIC, ADDRESSING_MODE (LONG_RELATIVE)) ;
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    LIB$SCOPY_R_DX6:		LINKAGE_JSB_3_6,	! String copy
    LIB$ANALYZE_SDESC_R2:	LINKAGE_JSB_2_2;	! Analyze descriptor

EXTERNAL LITERAL 			! Condition value symbols
    LIB$_INVARG,			! Invalid argument
    LIB$_STRTRU,			! String truncated
    LIB$_INVFILSPE;			! Invalid file specification

%SBTTL 'LIB$EXTRACT_CONCEALED - Extract concealed device and root directory'
GLOBAL ROUTINE LIB$EXTRACT_CONCEALED (		! Extract concealed device and root directory
	FILE_SPEC,				! File specification
	CONCEALED_DEVICE,			! Concealed device name
	ROOT_DIRECTORY,				! Root directory name
	CONCEALED_DEVICE_LENGTH,		! Length of CONCEALED_DEVICE
	ROOT_DIRECTORY_LENGTH			! Length of ROOT_DIRECTORY
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine determines whether the device component of a file
!	specification is a concealed device, and if so, whether it also
!	specifies a root directory, and returns the concealed device and
!	root directory.
!
! CALLING SEQUENCE:
!
!	ret_status.wlc.v = LIB$EXTRACT_CONCEALED (file-spec.rt.dx,
!		[concealed-device.wt.dx], [root-directory.wt.dx],
!		[concealed-device-length.wwu.r], [root-directory-length.wwu.r])
!
! FORMAL PARAMETERS:
!
!	FILE_SPEC		Address of a descriptor for the file
!				specification to be analyzed.  The string must
!				not be longer than 255 characters.
!
!	CONCEALED_DEVICE	Address of a descriptor to receive the
!				concealed device name.  This is an optional
!				output parameter.
!
!	ROOT_DIRECTORY		Address of a descriptor to receive the root
!				directory name, without brackets or dot.  This
!				is an optional output parameter.  If the file
!				specification does not specify a root
!				directory, this parameter receives a null
!				string.
!
!	CONCEALED_DEVICE_LENGTH	Address of a word to receive the number	of
!				characters written into concealed-device, not
!				counting padding in the case of a fixed-length
!				string.  If the output string is truncated to
!				the size specified in the concealed-device
!				string, concealed-device-length is set to this
!				size.  Therefore, concealed-device-length can
!				always be used by the calling program to access
!				a valid substring of concealed-device.  This is
!				an optional output parameter, passed by
!				reference.
!
!	ROOT_DIRECTORY_LENGTH	Address of a word to receive the number	of
!				characters written into root-directory, not
!				counting padding in the case of a fixed-length
!				string.  If the output string is truncated to
!				the size specified in the root-directory
!				string, root-directory-length is set to this
!				size.  Therefore, root-directory-length can
!				always be used by the calling program to access
!				a valid substring of root-directory.  This is
!				an optional output parameter, passed by
!				reference.
!
!	The output parameters are guaranteed to be stored only if the routine
!	value is true.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS:
!
!	SS$_NORMAL	Normal successful completion
!
!	LIB$_INVARG	Required argument omitted, or file specification longer
!			than 255 characters
!
!	LIB$_STRTRU	String truncated (qualified success)
!
!	LIB$_INVFILSPE	String does not represent a valid concealed device with
!			optional root directory
!
!	LIB$ANALYZE_SDESC errors
!	$TRNLOG errors
!	LIB$SCOPY errors
!
! SIDE EFFECTS:
!
!	NONE
!
!--

BEGIN
LOCAL
	FAB:		$FAB_DECL,		! FAB for $PARSE
	NAM:		$NAM_DECL,		! NAM block for $PARSE
	ESA_BUFFER:	VECTOR[NAM$C_MAXRSS,BYTE], ! Expanded string area
	INPUT_DESC:	BLOCK[DSC$K_Z_BLN,BYTE],! Descriptor for input string
	TRNLOG_DESC:	BLOCK[DSC$K_Z_BLN,BYTE],! Descriptor for translated input string
	TRNLOG_BUFFER:	VECTOR[LOG$C_NAMLENGTH,BYTE], ! Buffer for translated input string
	INPUT_LENGTH,				! Length of compressed input
	INPUT_ADDRESS:	REF VECTOR[,BYTE],	! Address of compressed input
	COMPRESS_CURSOR:REF VECTOR[,BYTE],	! Temporary for upcase/compress
	DEV_LENGTH:	WORD,			! Length of concealed device
	DIR_LENGTH:	WORD,			! Length of root directory
	DIR_ADDRESS,				! Address of root directory
	DELIMITER:	BYTE,			! Closing directory delimiter
	STATUS_1,				! Status return
	STATUS_2,				! Status return
	STATUS_3,				! Status return
	STATUS_4,				! Status return
	ROUTINE_VALUE;				! Final routine value
BUILTIN
	ACTUALCOUNT,				! Determine argument count
	LOCC,					! LOCC instruction
	NULLPARAMETER;				! Test for null parameter

!+
! Ensure that the required parameter is present.
!-

IF ACTUALCOUNT() EQL 0 THEN RETURN LIB$_INVARG;

!+
! Initialize RMS structures required to do a $PARSE.
!-

$FAB_INIT(FAB=FAB,
    NAM=NAM);
$NAM_INIT(NAM=NAM,
    ESA=ESA_BUFFER,
    ESS=NAM$C_MAXRSS);

!+
! Analyze the input descriptor and set up the FAB filename descriptor.
!-

BEGIN ! block to use output registers
REGISTER
	R1 = 1,
	R2 = 2;

STATUS_1 = LIB$ANALYZE_SDESC_R2(.FILE_SPEC; R1, R2);
IF NOT .STATUS_1 THEN RETURN .STATUS_1;
IF .R1 GTRU 255 THEN RETURN LIB$_INVARG;
FAB[FAB$B_FNS] = .R1;
FAB[FAB$L_FNA] = .R2;
END; ! block to use output registers

!+
! Parse the input string to obtain the expanded name string.  Ignore errors
! provided that a device name was actually returned.
!-

$PARSE(FAB=FAB);
IF .NAM[NAM$B_DEV] EQL 0 THEN RETURN LIB$_INVFILSPE;

!+
! Get a descriptor for the input device specification.  The high order word is
! not initialized because system services ignore this word.
!-

INPUT_DESC[DSC$W_LENGTH] = .NAM[NAM$B_DEV];
INPUT_DESC[DSC$A_POINTER] = .NAM[NAM$L_DEV];

!+
! If the string contained a wildcard or a node name, internal RMS resources
! have been consumed by $PARSE.  Execute another $PARSE using the same FAB
! on a null string to release these resources.
!-

FAB[FAB$B_FNS] = 0;
NAM[NAM$B_ESS] = 0;
$PARSE(FAB=FAB);

!+
! Strip text following a leading colon from the specification.
!-

BEGIN ! block to use output registers
REGISTER
	R0 = 0;

LOCC(%REF(%C':'), INPUT_DESC[DSC$W_LENGTH], .INPUT_DESC[DSC$A_POINTER]; R0);
INPUT_DESC[DSC$W_LENGTH] = .INPUT_DESC[DSC$W_LENGTH] - .R0;
END; ! block to use output registers

!+
! Translate the input device specification.
!-

INPUT_ADDRESS = TRNLOG_BUFFER;
TRNLOG_DESC[DSC$B_CLASS] = DSC$K_CLASS_Z;
TRNLOG_DESC[DSC$B_DTYPE] = DSC$K_DTYPE_Z;
TRNLOG_DESC[DSC$W_LENGTH] = LOG$C_NAMLENGTH;
TRNLOG_DESC[DSC$A_POINTER] = .INPUT_ADDRESS;
STATUS_2 = $TRNLOG(LOGNAM=INPUT_DESC, RSLLEN=TRNLOG_DESC, RSLBUF=TRNLOG_DESC);
IF NOT .STATUS_2 THEN RETURN .STATUS_2;

!+
! If the string has no translation, it does not represent a concealed device
! or root directory specification.
!-

IF .STATUS_2 EQL SS$_NOTRAN THEN RETURN LIB$_INVFILSPE;

!+
! Upcase and remove blanks, tabs, and nulls from the string.
!-

INPUT_LENGTH = .TRNLOG_DESC[DSC$W_LENGTH];
COMPRESS_CURSOR = .INPUT_ADDRESS;
INCR N FROM 0 TO .INPUT_LENGTH-1 DO
    BEGIN
    LOCAL
	CHARACTER: BYTE;		! Character from string

    CHARACTER = .INPUT_ADDRESS[.N];
    IF .CHARACTER NEQ %C' ' AND .CHARACTER NEQ %O'011' AND .CHARACTER NEQ 0
    THEN
	BEGIN
	IF .CHARACTER GEQU %C'a' AND .CHARACTER LEQU %C'z'
	    THEN CHARACTER = .CHARACTER - %C'a' + %C'A';
	COMPRESS_CURSOR[0] = .CHARACTER;
	COMPRESS_CURSOR = .COMPRESS_CURSOR + 1;
	END;
    END;
INPUT_LENGTH = .COMPRESS_CURSOR - .INPUT_ADDRESS;
DIR_LENGTH = 0;


BEGIN ! block to use output registers
REGISTER
	R0 = 0,
	R1 = 1;

!+
! Test the string for the form "__any:any".  If found, the portion of the
! string ending with the colon is a valid concealed device.
!-

IF .INPUT_LENGTH LSSU 3 THEN RETURN LIB$_INVFILSPE; ! Not long enough
IF .(.INPUT_ADDRESS)<0,16> NEQ '__'
THEN RETURN LIB$_INVFILSPE;		! No double underline found
IF NOT LOCC(%REF(%C':'), INPUT_LENGTH, .INPUT_ADDRESS; R0, R1)
THEN RETURN LIB$_INVFILSPE;		! No colon found
R0 = .R0 - 1;				! Adjust count/pointer to include colon
R1 = .R1 + 1;
DEV_LENGTH = .R1 - .INPUT_ADDRESS;	! Length up to and including colon
INPUT_ADDRESS = .R1;			! Prune device from string
INPUT_LENGTH = .R0;
END; ! block to use output registers

!+
! If there is no remaining string, exit with success, and no root
! directory.
!-

IF .INPUT_LENGTH NEQ 0
THEN
    BEGIN

    BEGIN ! block to use output registers
    REGISTER
	R0 = 0,
	R1 = 1:		REF VECTOR[,BYTE];

    !+
    ! Test the remaining string for the form "[any.]", where angle brackets
    ! may replace the square brackets.  If found, this string is a valid
    ! root directory.
    !-

    IF .INPUT_ADDRESS[0] NEQ %C'[' AND .INPUT_ADDRESS[0] NEQ %C'<'
    THEN RETURN LIB$_INVFILSPE;			! No directory delimiter
    DELIMITER = .INPUT_ADDRESS[0] - %C'[' + %C']'; ! Get closing delimiter
    INPUT_ADDRESS = .INPUT_ADDRESS + 1;		! Prune delimiter from string
    INPUT_LENGTH = .INPUT_LENGTH - 1;
    DIR_ADDRESS = .INPUT_ADDRESS;		! Get pointer to beginning
    LOCC(%REF(%C'.'), INPUT_LENGTH, .INPUT_ADDRESS; R0, R1);
    IF .R0 NEQ 2 THEN RETURN LIB$_INVFILSPE;	! Dot followed by one character
    IF .R1[1] NEQ .DELIMITER THEN RETURN LIB$_INVFILSPE; ! Wrong delimiter
    DIR_LENGTH = .R1 - .INPUT_ADDRESS;		! Get just intervening part
    END; ! block to use output registers

    END;

!+
! Set up to detect string truncation.
!-

ROUTINE_VALUE = SS$_NORMAL;

!+
! Return the concealed device specification, if requested, and determine if
! truncation occurred.
!-

IF NOT NULLPARAMETER(2)
THEN
    BEGIN
    REGISTER
	R1 = 1:		WORD;

    STATUS_3 = LIB$SCOPY_R_DX6(.DEV_LENGTH, TRNLOG_BUFFER, .CONCEALED_DEVICE);
    IF NOT .STATUS_3 THEN RETURN .STATUS_3;
    LIB$ANALYZE_SDESC_R2(.CONCEALED_DEVICE; R1);
    IF .R1 LSSU .DEV_LENGTH
    THEN
	BEGIN
	DEV_LENGTH = .R1;
	ROUTINE_VALUE = LIB$_STRTRU;
	END;
    END;

!+
! Return the length of the concealed device specification if requested.
!-

IF NOT NULLPARAMETER(4)
THEN
    (.CONCEALED_DEVICE_LENGTH)<0,16> = .DEV_LENGTH;

!+
! Return the root directory specification, if requested, and determine if
! truncation occurred.
!-

IF NOT NULLPARAMETER(3)
THEN
    BEGIN
    REGISTER
	R1 = 1:		WORD;

    STATUS_4 = LIB$SCOPY_R_DX6(.DIR_LENGTH, .DIR_ADDRESS, .ROOT_DIRECTORY);
    IF NOT .STATUS_4 THEN RETURN .STATUS_4;
    LIB$ANALYZE_SDESC_R2(.ROOT_DIRECTORY; R1);
    IF .R1 LSSU .DIR_LENGTH
    THEN
	BEGIN
	DEV_LENGTH = .R1;
	ROUTINE_VALUE = LIB$_STRTRU;
	END;
    END;

!+
! Return the length of the root directory specification if requested.
!-

IF NOT NULLPARAMETER(5)
THEN
    (.ROOT_DIRECTORY_LENGTH)<0,16> = .DIR_LENGTH;

!+
! Return appropriate status.
!-

RETURN .ROUTINE_VALUE;
END;					! End of routine LIB$EXTRACT_CONCEALED

END					! End of module LIB$EXTRACT_CONCEALED
ELUDOM
