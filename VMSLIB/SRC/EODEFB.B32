!	Version 'V03-000'
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!+
! FACILITY :
!	EDITPC Pattern Operator Encodings
!
! ABSTRACT :
!	The EDITPC instruction, Edit Packed to Character String, performs the
!	editing according to the pattern string which consists of one byte
!	pattern operators.  Some pattern operators take no operands.  Some
!	take a repeat count which is contained in the rightmost nibble of the
!	pattern operator itself.  The rest take a one byte operand which
!	follows the pattern operator immediately.  This operand is either an
!	unsigned integer length or byte character.  Edit patterns must end 
!	with the EO$END pattern operator.
!
!	The EODEF macros permit easy construction of the edit pattern.
!
! ENVIRONMENT:
!
! AUTHOR:
!	R. P. Grosso,		Creation Date 9-Oct-1980
!
! MODIFIED BY:
!
!	V02-001		RPG0001		Bob Grosso	3-Aug-1981
!		Parenthesize use of formals and use signed relational
!		expressions.
!
!-

! EO$END edit pattern operator encoding
MACRO
	EO$END = BYTE(%X'00') %;



! EO$END_FLOAT edit pattern operator encoding
MACRO
	EO$END_FLOAT = BYTE(%X'01') %;



! EO$CLEAR_SIGNIF edit pattern operator encoding
MACRO
	EO$CLEAR_SIGNIF = BYTE(%X'02') %;




! EO$SET_SIGNIF edit pattern operator encoding
MACRO
	EO$SET_SIGNIF = BYTE(%X'03') %;



! EO$STORE_SIGN edit pattern operator encoding
MACRO
	EO$STORE_SIGN = BYTE(%X'04') %;



! EO$LOAD_FILL edit pattern operator encoding
! Where CH is the fill character
MACRO
	EO$LOAD_FILL(CH) = BYTE(%X'40',CH) %;



! EO$LOAD_SIGN edit pattern operator encoding
! Where CH is loaded into the sign register
MACRO
	EO$LOAD_SIGN(CH) = BYTE(%X'41',CH) %;



! EO$LOAD_PLUS edit pattern operator encoding
! Where CH is loaded into the sign register
MACRO
	EO$LOAD_PLUS(CH) = BYTE(%X'42',CH) %;



! EO$LOAD_MINUS edit pattern operator encoding
! Where CH is loaded into the sign register
MACRO
	EO$LOAD_MINUS(CH) = BYTE(%X'43',CH) %;



! EO$INSERT edit pattern operator encoding
! Where CH is the character inserted
MACRO
	EO$INSERT(CH) = BYTE(%X'44',CH) %;



! EO$BLANK_ZERO edit pattern operator encoding
!Fix up the destination to be blank when the value is zero
!Where the fill character is stored in the last LEN bytes
!when the source string is zero.
!If LEN EQL 0 then unpredictable
MACRO
	EO$BLANK_ZERO(LEN) = 
	%IF (LEN) LEQ 0
	%THEN %WARN('EO$BLANK_ZERO - Length must be greater than zero')
	%FI 
	BYTE(%X'45', LEN) %;



! EO$REPLACE_SIGN edit pattern operator encoding
! Fix up the destination sign when the value is -0
! Where contents of fill register are stored 
! in last LEN bytes of destination.
! If LEN EQL 0 then unpredictable
MACRO
	EO$REPLACE_SIGN(LEN) = 
	%IF (LEN) LEQ 0
	%THEN %WARN('EO$REPLACE_SIGN - Length must be greater than zero')
	%FI
	BYTE(%X'46', LEN) %;



! EO$ADJUST_INPUT edit pattern operator encoding
! Handle source strings with lenths different from the output
! if LEN EQL 0 or LEN GTR 31 then unpredictable
MACRO
	EO$ADJUST_INPUT(LEN) = 
	%IF (LEN) LEQ 0
	%THEN %WARN('EO$ADJUST_INPUT - Length must be greater than zero')
	%ELSE
		%IF (LEN) GTR 31
		%THEN %WARN('EO$ADJUST_INPUT - Length must be less than 32')
		%FI
	%FI 
	BYTE(%X'47', LEN) %;



! EO$FILL edit pattern operator encoding
! Insert the fill character.
! where R is the repeat count.
! R must fit in a nibble.
MACRO
	EO$FILL(R) =
	%IF (R) LEQ 0
	%THEN %WARN('EO$FILL - Repeat must be greater than zero')
	%ELSE
		%IF (R) GTR 15
		%THEN %WARN('EO$FILL - Repeat must be less than 16')
		%FI
	%FI
	BYTE(%X'80' + R) %;



! EO$MOVE edit pattern operator encoding
! Move digits.
! where R is the repeat count.
! R must fit in a nibble.
MACRO
	EO$MOVE(R) =
	%IF (R) LEQ 0
	%THEN %WARN('EO$MOVE - Repeat must be greater than zero')
	%ELSE 
		%IF (R) GTR 15
		%THEN %WARN('EO$MOVE - Repeat must be less than 16')
		%FI
	%FI
	BYTE(%X'90' + R) %;



! EO$FLOAT edit pattern operator encoding
! Move digits, floating the sign across insignificant digits.
! where R is the repeat count.
! R must fit in a nibble.
MACRO
	EO$FLOAT(R) =
	%IF (R) LEQ 0
	%THEN %WARN('EO$FLOAT - Repeat must be greater than zero')
	%ELSE 
		%IF (R) GTR 15
		%THEN %WARN('EO$FLOAT - Repeat must be less than 16')
		%FI
	%FI
	BYTE(%X'A0' + R) %;

!+
!
!	End EDITPC edit pattern operator encodings
!
!-
