MODULE LIB$TPARSE (
		IDENT = 'V03-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  System Library
!
! ABSTRACT:
!
!	TPARSE is a general purpose state table driven parser. Its
!	general design is that of a finite state parser; however,
!	some of its features allow non-deterministic parsing and
!	limited use as a push-down parser. The input string is parsed
!	by interpreting the transitions in the user suppled state
!	table; user supplied action routines are called as indicated
!	in the state table to provide the semantics associated with
!	the table specified syntax.
!
! ENVIRONMENT:
!
!	Native node star processor; no operating system facilities are
!	needed. Minimum of 21 longwords of stack required.
!
!--
!
!
! AUTHOR:  Andrew C. Goldstein, CREATION DATE:  14-Oct-1976  13:55
!
! MODIFIED BY:
!
!	V02-009	ACG0263		Andrew C. Goldstein,	8-Feb-1982  23:35
!		Fix token pointer after subexpression parse failure
!
!	V02-008	ACG0203		Andrew C. Goldstein,	28-Apr-1981  15:44
!		Propagate return status past subexpression calls
!
!	V02-007	ACG0155		Andrew C. Goldstein,	12-Mar-1980  10:04
!		Allow subexpressions to change the command string
!
!	1-006	ACG26405	Andrew C. Goldstein,	6-Dec-1979  20:14
!		Change string count in control block to word
!
!	1-005	ACG0088		Andrew C. Goldstein,	4-Dec-1979  17:22
!		Propagate action routine status through subexpression returns
!
!	V0004	ACG0019		Andrew C. Goldstein,  26-Mar-1978  16:27
!	Add return of action routine status; fix trailing blanks problem
!	Change PSECTS to new procedure library standards
!
!**


LIBRARY 'SYS$LIBRARY:STARLET.L32';
LIBRARY 'SYS$LIBRARY:TPAMAC.L32';



PSECT
	CODE		= _LIB$CODE (SHARE, PIC),
	PLIT		= _LIB$CODE (SHARE, PIC);

LINKAGE
	L_GETSTRING	= CALL (STANDARD, STANDARD)
			: GLOBAL (CHAR_COUNT = 6);

FORWARD ROUTINE
	LIB$TPARSE,			! main parser routine
	GETSTRING	: L_GETSTRING;	! extract a basic string token


EXTERNAL ROUTINE
	LIB$CVT_DTB	: ADDRESSING_MODE (GENERAL),	! decimal to binary conversion
	LIB$CVT_OTB	: ADDRESSING_MODE (GENERAL),	! octal to binary conversion
	LIB$CVT_HTB	: ADDRESSING_MODE (GENERAL);	! hex to binary conversion

!
! Local macros and symbol definitions
!

LITERAL

! Character codes
!
	SPACE		= %O'40',	! space character
	TERMINATOR	= %O'377',	! keyword string terminator
	TAB		= %O'11',	! tab character

! String types (input to GETSTRING routine)
!
	SPACES		= 0,
	NUMERIC		= 1,
	ALPHANUMERIC	= 2,
	SYMBOL		= 3,

! Token types
!
	$ANY		= %X'FF' AND TPA$_ANY,		! any single character
	$ALPHA		= %X'FF' AND TPA$_ALPHA,	! any alphabetic character
	$DIGIT		= %X'FF' AND TPA$_DIGIT,	! any numeric character
	$STRING		= %X'FF' AND TPA$_STRING,	! any alphanumeric string
	$SYMBOL		= %X'FF' AND TPA$_SYMBOL,	! any symbol constituent set string
	$BLANK		= %X'FF' AND TPA$_BLANK,	! any string of spaces and tabs
	$DECIMAL	= %X'FF' AND TPA$_DECIMAL,	! decimal number
	$OCTAL		= %X'FF' AND TPA$_OCTAL,	! octal number
	$HEX		= %X'FF' AND TPA$_HEX,		! hexadecimal number
	$LAMBDA		= %X'FF' AND TPA$_LAMBDA,	! empty string
	$EOS		= %X'FF' AND TPA$_EOS,		! end of string
	$SUBEXPR	= %X'FF' AND TPA$_SUBEXPR,	! subexpression
	NULL_MATCH	= TPA$_LAMBDA,	! codes geq match null strings
	HIGH_ASCII	= 255,		! highest ASCII character code
	KEYWORD		= 256,		! start of keyword codes
	HIGH_KEYWORD	= 475,		! highest keyword code
	LOW_SPECIAL	= $ANY,		! first special type code
	HIGH_SPECIAL	= $SUBEXPR;	! last special type code

! Macros to determine character types
!

MACRO
	IS_ALPHABETIC (CHAR) = (SELECTONE CHAR OF
				SET
				[%ASCII 'A' TO %ASCII 'Z',
				 %ASCII 'a' TO %ASCII 'z']: 1;
				[OTHERWISE]: 0;
				TES
			       )%,

	IS_NUMERIC (CHAR)    = (SELECTONE CHAR OF
				SET
				[%ASCII '0' TO %ASCII '9']: 1;
				[OTHERWISE]: 0;
				TES
			       )%,

	IS_SYMBOL (CHAR)      = (SELECTONE CHAR OF
				SET
				[%ASCII '_', %ASCII '$']: 1;
				[OTHERWISE]: 0;
				TES
			       )%,

	IS_SPACE (CHAR)      = (SELECTONE CHAR OF
				SET
				[SPACE, TAB]: 1;
				[OTHERWISE]: 0;
				TES
			       )%;

! Macros to fetch state table entries, for both data items and self
! relative addresses.
!

MACRO
	GET_BYTE (POINTER) =
		(POINTER = .POINTER + 1; .(.POINTER-1)<0,8>)
		%,

	GET_WORD (POINTER) =
		(POINTER = .POINTER + 2; .(.POINTER-2)<0,16>)
		%,

	GET_LONG (POINTER) =
		(POINTER = .POINTER + 4; .(.POINTER-4)<0,32>)
		%,

	REL_WORD (POINTER) =
		(POINTER = .POINTER + 2; .POINTER + .(.POINTER-2)<0,16,1>)
		%,

	REL_LONG (POINTER) =
		(POINTER = .POINTER + 4; .POINTER + .(.POINTER-4)<0,32,1>)
		%;

! Structure definition for the transition length table. It consists of 64
! entries, indexed by the 6 transition option bits. Each entry is a 4 bit
! nibble giving the number of words that are used by that transition
! option mask.
!

STRUCTURE
	NIBBLEVECTOR [I; N] =
		[(N+1)/2]
		NIBBLEVECTOR<I*4, 4, 0>;

! Macro to generate nibbles in a PLIT expression.
!

MACRO
	NIBBLE [A, B] =
		BYTE (B^4 + A)
		%;

! The transition length table.
!

BIND
	LENGTH_TABLE	= UPLIT (NIBBLE (0,1,1,2,2,3,3,4,2,3,3,4,4,5,5,6,
					 2,3,3,4,4,5,5,6,4,5,5,6,6,7,7,8,
					 2,3,3,4,4,5,5,6,4,5,5,6,6,7,7,8,
					 4,5,5,6,6,7,7,8,6,7,7,8,8,9,9,10
					 ))
			: NIBBLEVECTOR;

GLOBAL ROUTINE LIB$TPARSE (STATE_VECTOR, START_STATE, KEYTAB) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine is the main parser routine.
!
!
! CALLING SEQUENCE:
!	LIB$TPARSE (ARG1, ARG2, ARG3)
!
!
! INPUT PARAMETERS:
!	ARG1 = address of state vector, containing:
!		options longword
!		    bit 0 set to match blanks and tabs
!		          clear to ignore blanks and tabs
!		    bit 1 set to allow minimum abbreviation of keywords
!			  clear to use match count
!		    high byte = keyword match count (0 = exact)
!		string descriptor of string to be parsed
!		data made available to action routines:
!		    string descriptor of matching token
!		    single character token
!		    numerical value of numeric token
!	ARG2 = address of starting state in state table
!	ARG3 = address of keyword table
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	string descriptor pointed to by ARG1 updated to indicate
!	string not processed by the parser
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	1 if successful parse
!	LIB$_SYNTAXERR if unsuccessful parse
!	LIB$_INVTYPE if state table is invalid
!	value of action routine rejecting transition
!
! SIDE EFFECTS:
!	none except as produced by user's action routines
!
!--


BEGIN

LOCAL
	STATE,				! state table pointer
	LAST_SPACE,			! character count of last string of spaces
	ACT_STATUS	: BLOCK [4, BYTE], ! status return of action routine
	TYPE		: BLOCK [4, BYTE]; ! syntax type of current transition


MAP
	STATE_VECTOR	: REF BLOCK [,BYTE], ! user state vector
	KEYTAB	: REF VECTOR[,WORD,SIGNED];  ! keyword table

BUILTIN
	TESTBITSC;


! TPARSE data area available to action routines.
!
MACRO
	STATE_LENGTH	= STATE_VECTOR[TPA$L_COUNT]%,	! length of user supplied state vector
	STRING_COUNT	= (STATE_VECTOR[TPA$L_STRINGCNT])<0,16>%, ! byte count of string being parsed
	STRING_POINTER	= STATE_VECTOR[TPA$L_STRINGPTR]%, ! address of string being parsed
	TOKEN_COUNT	= STATE_VECTOR[TPA$L_TOKENCNT]%, ! byte count of current token
	TOKEN_POINTER	= STATE_VECTOR[TPA$L_TOKENPTR]%, ! address of current token
	STATE_CHAR	= STATE_VECTOR[TPA$L_CHAR]%,	! current single character token
	STATE_NUMBER	= STATE_VECTOR[TPA$L_NUMBER]%,	! numerical value of number token
	STATE_PARAM	= STATE_VECTOR[TPA$L_PARAM]%,	! action routine parameter from state table
	MCOUNT		= STATE_VECTOR[TPA$B_MCOUNT]%,	! match abbreviation count
	SPACE_FLAG	= STATE_VECTOR[TPA$V_BLANKS]%,	! process spaces explicitly
	ABBRFM_FLAG	= STATE_VECTOR[TPA$V_ABBRFM]%,	! allow first match abbreviations
	ABBREV_FLAG	= STATE_VECTOR[TPA$V_ABBREV]%,	! allow minimal abbreviations
	AMBIG_FLAG	= STATE_VECTOR[TPA$V_AMBIG]%;	! ambiguous keyword in this state


!
! Contents of the type byte - code and flags.
!
MACRO
	TYPECODE	= 0,0,9,0%,	! full token type code
	TYPEBYTE	= 0,0,8,0%,	! token type byte
	OPTION_BITS	= 0,11,6,0%,	! transition option flags
	CODEFLAG	= 0,8,1,0%,	! transition is special code
	EXTRAFLAG	= 0,9,1,0%,	! extra type byte present
	LASTFLAG	= 0,10,1,0%,	! last transition in state
	EXTFLAG		= 0,11,1,0%,	! type extension present
	TRANFLAG	= 0,12,1,0%,	! transition target present
	MASKFLAG	= 0,13,1,0%,	! bitmask present
	ADDRFLAG	= 0,14,1,0%,	! data address present
	ACTFLAG		= 0,15,1,0%,	! action routine present
	PARMFLAG	= 0,16,1,0%;	! parameter longword present

GLOBAL REGISTER
	CHAR_COUNT	= 6;		! character count in string token

EXTERNAL LITERAL
	LIB$_SYNTAXERR,			! syntax error status
	LIB$_INVTYPE;			! invalid state table


!+
!
! Entry initialization consists of loading the starting state
! into the state pointer. Then we proceed into the main
! loop that attempts to match transitions in the state table to
! the current string contents.
!
!-


IF .STATE_LENGTH LSSU TPA$K_COUNT0 THEN RETURN SS$_INSFARG; ! check minimum length of state vector

AMBIG_FLAG = 0;
ACT_STATUS = 0;
STATE = .START_STATE;

WHILE 1 DO
BEGIN

! The following horrendous expression attempts to match the token type
! of the current transition to the current string position. The outer
! IF is a condition which, if true, causes the current transition
! (just evaluated) to be skipped by the code at the end of this loop. The
! inner IF causes the action routine of the transition to be called if
! true (if the transition matches).
!

IF
    BEGIN
    IF
	BEGIN
	TYPE = GET_WORD (STATE);	! get basic type code
	IF .TYPE[EXTRAFLAG]		! and extra byte if present
	THEN TYPE<16,8> = GET_BYTE (STATE);

	LAST_SPACE = 0;

	IF NOT .SPACE_FLAG AND .TYPE[TYPECODE] NEQ TPA$_LAMBDA
	THEN
	    BEGIN
	    GETSTRING (STRING_COUNT, SPACES);
	    LAST_SPACE = .CHAR_COUNT;
	    STRING_COUNT = .STRING_COUNT - .CHAR_COUNT;  ! update string pointer
	    STRING_POINTER = .STRING_POINTER + .CHAR_COUNT;
	    END;

	CHAR_COUNT = 0;			! init matching string descriptor
	TOKEN_POINTER = .STRING_POINTER;

	IF .TYPE[TYPECODE] LSSU NULL_MATCH AND .STRING_COUNT EQL 0
	THEN 0			! no match if at end
	ELSE

	    SELECTONEU .TYPE[TYPECODE] OF
	    SET

! Single characters are matched by token types whose numerical value is
! the ASCII code of the character.
!

	    [0 TO HIGH_ASCII]:	! single ASCII character
		IF .TYPE[TYPEBYTE] EQL CH$RCHAR (.STRING_POINTER)
		THEN
		    BEGIN
		    STATE_CHAR = CH$RCHAR(.STRING_POINTER);
		    CHAR_COUNT = 1
		    END
		ELSE 0;

! Keywords are matched by token types whose bits 0-6 contain the keyword
! number. A keyword token may be either (1) an exact match or
! (2) abbreviated to some number of characters fixed for the call or
! (3) arbitrarily abbreviated (such that the first match wins) or
! (4) abbreviated to the minimum which is locally unambiguous. Condition
! (4) is tested for ambiguity by finding the next entry in the keyword table
! and matching it against the token string. The keyword strings for each
! state are padded with a filler to prevent false matches across states.
!


	    [KEYWORD TO HIGH_KEYWORD]:  ! keyword match
		IF NOT .AMBIG_FLAG
		AND GETSTRING (STRING_COUNT, SYMBOL)
		THEN
		    BEGIN
		    LOCAL KEY;
		    KEY = .KEYTAB + .KEYTAB[.TYPE[TYPEBYTE]];
		    IF CH$EQL (.CHAR_COUNT, .TOKEN_POINTER,
			.CHAR_COUNT, .KEY, 0)
		    THEN
			BEGIN
			IF (CH$RCHAR (.KEY + .CHAR_COUNT) EQL TERMINATOR
			    OR (.MCOUNT NEQ 0 AND .CHAR_COUNT GEQU .MCOUNT)
			    )
			THEN 1
			ELSE IF .ABBRFM_FLAG
			THEN 1
			ELSE IF .ABBREV_FLAG
			THEN
			    BEGIN
			    KEY = 1 + CH$FIND_CH (65535, .KEY+.CHAR_COUNT, TERMINATOR);
			    IF CH$NEQ (.CHAR_COUNT, .TOKEN_POINTER,
					.CHAR_COUNT, .KEY, 0)
			    THEN 1
			    ELSE
				BEGIN
				AMBIG_FLAG = 1;
				0
				END
			    END
			ELSE 0
			END
		    ELSE 0
		    END
		ELSE 0;

! All other token types are special cases, representing commonly occurring
! composites and other useful artifacts.
!

	    [OTHERWISE]:		  ! all other types
		CASE .TYPE[TYPEBYTE] FROM LOW_SPECIAL TO HIGH_SPECIAL OF
		SET

		[$LAMBDA]:		! empty string
		    1;

		[$EOS]:			! end of input
		    .STRING_COUNT EQL 0;

		[$ANY]:			! any single character
		    BEGIN
		    STATE_CHAR = CH$RCHAR (.STRING_POINTER);
		    CHAR_COUNT = 1
		    END;

		[$ALPHA]:		! alphabetic
		    IF IS_ALPHABETIC (CH$RCHAR (.STRING_POINTER))
		    THEN (STATE_CHAR = CH$RCHAR (.STRING_POINTER);
			  CHAR_COUNT = 1)
		    ELSE 0;

		[$DIGIT]:		! single digit
		    IF IS_NUMERIC (CH$RCHAR (.STRING_POINTER))
		    THEN (STATE_CHAR = CH$RCHAR (.STRING_POINTER);
			  CHAR_COUNT = 1)
		    ELSE 0;

		[$STRING]:		! alphanumeric string
		    GETSTRING (STRING_COUNT, ALPHANUMERIC);

		[$SYMBOL]:		! symbol constituent set string
		    GETSTRING (STRING_COUNT, SYMBOL);

		[$BLANK]:		! blanks or tabs
		    GETSTRING (STRING_COUNT, SPACES);

		[$DECIMAL]:		! decimal number
		    IF GETSTRING (STRING_COUNT, NUMERIC)
		    THEN LIB$CVT_DTB (.CHAR_COUNT, .TOKEN_POINTER, STATE_NUMBER)
		    ELSE 0;

		[$OCTAL]:		! octal number
		    IF GETSTRING (STRING_COUNT, NUMERIC)
		    THEN LIB$CVT_OTB (.CHAR_COUNT, .TOKEN_POINTER, STATE_NUMBER)
		    ELSE 0;

		[$HEX]:			! hexa-decimal number
		    IF GETSTRING (STRING_COUNT, ALPHANUMERIC)
		    THEN LIB$CVT_HTB (.CHAR_COUNT, .TOKEN_POINTER, STATE_NUMBER)
		    ELSE 0;

		[$SUBEXPR]:		! subexpression
		    BEGIN
		    LOCAL STATUS, SAVECOUNT, SAVEPOINTER;
		    SAVECOUNT = .STRING_COUNT;  ! save current position
		    SAVEPOINTER = .STRING_POINTER;
		    STATUS = LIB$TPARSE (.STATE_VECTOR, .STATE + 2 + .(.STATE)<0,16,1>,
					 .KEYTAB);
		    IF .STATUS NEQ LIB$_SYNTAXERR
		    THEN ACT_STATUS = .STATUS;
		    TOKEN_POINTER = .SAVEPOINTER;
		    CHAR_COUNT = .STRING_POINTER - .SAVEPOINTER;
		    IF .STATUS
		    THEN
			BEGIN
			STRING_COUNT = .STRING_COUNT + .CHAR_COUNT;
			STRING_POINTER = .SAVEPOINTER;
			1
			END
		    ELSE
			BEGIN
			STRING_COUNT = .SAVECOUNT;
			STRING_POINTER = .SAVEPOINTER;
			0
			END
		    END;

		[INRANGE]: RETURN LIB$_INVTYPE;	! just for completeness

		[OUTRANGE]: RETURN LIB$_INVTYPE;

		TES;			! end of special types case

	    TES				! end of select on .TYPE
	END				! end of inner condition (token match)

!+
!
! The type code in this transition matches the current string,
! which is now described by the global string descriptor. Call
! the user's action routine, if it exists, and if it returns true,
! gobble the string and take the transition. Note that we set R0
! to 1 going into the call, making it easier for the routine to
! return success.
!
!-

    THEN
	BEGIN
	STRING_COUNT = .STRING_COUNT - .CHAR_COUNT;  ! update string pointer
	STRING_POINTER = .STRING_POINTER + .CHAR_COUNT;
	TOKEN_COUNT = .CHAR_COUNT;
					! skip extension if present
	IF TESTBITSC (TYPE[EXTFLAG]) THEN STATE = .STATE + 2;

	IF TESTBITSC (TYPE[PARMFLAG])	! set parameter longword if present
	THEN STATE_PARAM = GET_LONG (STATE);

	IF
	    BEGIN
	    IF TESTBITSC (TYPE[ACTFLAG])
	    THEN
		BEGIN
		BUILTIN R0, CALLG;
		LOCAL STATUS;
		R0 = 1;
		STATUS = CALLG (.STATE_VECTOR, REL_LONG (STATE));  ! call action routine
		IF .STATUS NEQ 0
		THEN ACT_STATUS = .STATUS;
		.STATUS
		END
	    ELSE 1
	    END

! Either there was no action routine, or the action routine has returned
! success; we take the transition. First we get the data address, if present.
! If present, store whatever data is called for: the mask, if supplied, or
! type dependent data if not - either the matching character, the number
! value, or the string descriptor of the matching string.
!

	THEN
	    BEGIN
	    IF .TYPE[ADDRFLAG]
	    THEN
		BEGIN
		LOCAL ADDRESS;
		ADDRESS = REL_LONG (STATE);
		IF .TYPE[MASKFLAG]
		THEN
		    .ADDRESS = ..ADDRESS OR GET_LONG (STATE)
		ELSE
		    BEGIN
		    IF NOT .TYPE[CODEFLAG]
		    THEN
			(.ADDRESS)<0,8> = .STATE_CHAR
		    ELSE
			BEGIN
			CASE .TYPE[TYPEBYTE] FROM LOW_SPECIAL TO HIGH_SPECIAL OF
			SET

			[$ANY, $ALPHA, $DIGIT]:
				(.ADDRESS)<0,8> = .STATE_CHAR;

			[$DECIMAL, $OCTAL, $HEX]:
				.ADDRESS = .STATE_NUMBER;

			[INRANGE, OUTRANGE]:
				BEGIN
				(.ADDRESS) = .TOKEN_COUNT;
				(.ADDRESS+4) = .TOKEN_POINTER;
				END;

			TES;
			END;
		    END;
		END;

! Take the transition. If an explicit target exists, follow it. -1 means
! exit with success, -2 means exit with failure. If no explicit target exists,
! skip transitions until we reach the beginning of the next state.
!

	    AMBIG_FLAG = 0;
	    ACT_STATUS = 0;
	    IF .TYPE[TRANFLAG]
	    THEN			! take the transition
		IF .(.STATE)<0,16,1> EQL TPA$_EXIT  ! TPA$_EXIT means exit
		THEN RETURN 1
		ELSE IF .(.STATE)<0,16,1> EQL TPA$_FAIL  ! TPA$_FAIL means exit
		THEN RETURN LIB$_SYNTAXERR

		ELSE STATE = REL_WORD (STATE)
	    ELSE			! default to next state
		UNTIL .TYPE[LASTFLAG] DO
		    BEGIN
		    TYPE = GET_WORD (STATE);
		    IF .TYPE[EXTRAFLAG]
		    THEN TYPE<16,8> = GET_BYTE (STATE);
					! skip optional components
		    STATE = .STATE + 2 * .LENGTH_TABLE[.TYPE[OPTION_BITS]];
		    END;
	    0
	    END

! The action routine has rejected the transition. Make like it never matched.
!

	ELSE
	    BEGIN			! return characters to string
	    STRING_COUNT = .STRING_COUNT + .CHAR_COUNT;
	    STRING_POINTER = .STRING_POINTER - .CHAR_COUNT;
					! skip the rest of the transition
	    1
	    END
	END

    ELSE
	1
    END					! end of outer condition

!+
!
! If the transition does not match, we execute this code. It skips
! the current transition to set up to try the next one in the state.
! If this was the last transition in the state, a syntax error has
! occurred and TPARSE returns the value 0.
!
!-

THEN
    BEGIN
    STATE = .STATE + 2 * .LENGTH_TABLE[.TYPE[OPTION_BITS]];
    IF .TYPE[LASTFLAG]
    THEN
	BEGIN
	GETSTRING (STRING_COUNT, SPACES);
	GETSTRING (STRING_COUNT, SYMBOL);
	TOKEN_COUNT = .CHAR_COUNT;
	IF .TOKEN_COUNT EQL 0 AND .STRING_COUNT NEQ 0
	THEN TOKEN_COUNT = .TOKEN_COUNT + 1;
	RETURN (
	    IF .ACT_STATUS[STS$V_COND_ID] NEQ 0
	    THEN .ACT_STATUS
	    ELSE LIB$_SYNTAXERR);
	END;

    STRING_COUNT = .STRING_COUNT + .LAST_SPACE; ! return flushed spaces
    STRING_POINTER = .STRING_POINTER - .LAST_SPACE;
    LAST_SPACE = 0;
    END

END					! end of outside loop

END;					! end of routine TPARSE

ROUTINE GETSTRING (STRING, TYPE) : L_GETSTRING =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine extracts a string of the indicated type from
!	the front of the string being parsed.
!
!
! CALLING SEQUENCE:
!	GETSTRING (ARG1, ARG2)
!
!
! INPUT PARAMETERS:
!	ARG1 = address of string descriptor of source string
!	ARG2 = string type code
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	1 if string is not empty
!	0 if string is null
!
! SIDE EFFECTS:
!	NONE
!
!--


BEGIN

MAP
	STRING: REF VECTOR;

EXTERNAL REGISTER
	CHAR_COUNT	= 6;		! character count of found string

!+
!
! To extract the string we simply scan through the input string
! until we hit a character that is not in the class.
! We count the characters in the global string count.
!
!-

CHAR_COUNT = 0;

WHILE .(STRING[0])<0,16> GTRU .CHAR_COUNT
AND (
    (	IF .TYPE EQL SPACES
	THEN IS_SPACE (CH$RCHAR (.STRING[1] + .CHAR_COUNT))
	ELSE 0)
    OR	(IF .TYPE GEQU NUMERIC
	THEN IS_NUMERIC (CH$RCHAR (.STRING[1] + .CHAR_COUNT))
	ELSE 0)
    OR	(IF .TYPE GEQU ALPHANUMERIC
	THEN IS_ALPHABETIC (CH$RCHAR (.STRING[1] + .CHAR_COUNT))
	ELSE 0)
    OR	(IF .TYPE EQL SYMBOL
	THEN IS_SYMBOL (CH$RCHAR (.STRING[1] + .CHAR_COUNT))
	ELSE 0)
    )
DO (CHAR_COUNT = .CHAR_COUNT + 1);

RETURN .CHAR_COUNT GTRU 0;

END;					! end of routine GETSTRING


END
ELUDOM					! end of module TPARSE

