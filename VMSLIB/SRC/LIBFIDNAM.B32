%TITLE 'LIB$FID_TO_NAME - Convert device and file ID to file specification'
MODULE LIB$FID_TO_NAME (			! Convert device and file ID to file specification
		IDENT = '1-004'			! File: LIBFIDNAM.B32 Edit: 1-004
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	General Utility Library
!
! ABSTRACT:
!
!	This routine converts a device and file identification to a file
!	specification.
!
! ENVIRONMENT:	Runs at any access mode - AST reentrant
!
! AUTHOR: Martin L. Jack, CREATION DATE: 23-Dec-1981
!
! MODIFIED BY:
!
! 1-001	- Original from LIBACP.B32.  MLJ 23-Dec-1981
! 1-002 - Print [] rather than [?] if zero backlink at top level.  Add
!	  DIRECTORY_ID parameter.  Use device name if logical volume name not
!	  available.  Check ACP type; avoid [?] for Structure Level 1.
!	  MLJ 15-Jan-1982
! 1-003 - Add ACP_STATUS parameter to return error that occurred in a file
!	  operation.  Print [?] whenever a lookup error occurs on a directory.
!	  MLJ 15-Mar-1982
! 1-004 - Correct two paths on which the routine could return without releasing
!	  channel and event flag.  MLJ 22-Mar-1982
!--


%SBTTL 'Declarations'
!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!
LINKAGE
	LINKAGE_JSB_3_6 = JSB(REGISTER=0,REGISTER=1,REGISTER=2):
			  NOPRESERVE(3,4,5,6),

	LINKAGE_JSB_2_2 = JSB(REGISTER=0;REGISTER=1,REGISTER=2);
!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    LIB$FID_TO_NAME;				! Convert device and file ID to file specification

!
! INCLUDE FILES:
!

LIBRARY 'SYS$LIBRARY:LIB';			! System symbols

!*! REQUIRE 'RTLIN:RTLPSECT';			! Define PSECT declarations macros

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! FIELDS:
!
!	NONE
!
! PSECTS:
!
!*! DECLARE_PSECTS (LIB);				! Declare PSECTs for LIB$ facility
    PSECT
	    CODE = _LIB$CODE (READ, NOWRITE, EXECUTE, SHARE, PIC, ADDRESSING_MODE (WORD_RELATIVE)),
	    PLIT = _LIB$CODE (READ, NOWRITE, EXECUTE, SHARE, PIC, ADDRESSING_MODE (WORD_RELATIVE)),
	    OWN  = _LIB$DATA (READ, WRITE, NOEXECUTE, NOSHARE, PIC, ADDRESSING_MODE (LONG_RELATIVE)),
	    GLOBAL = _LIB$DATA (READ, WRITE, NOEXECUTE, NOSHARE, PIC, ADDRESSING_MODE (LONG_RELATIVE)) ;
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    LIB$ANALYZE_SDESC_R2:	LINKAGE_JSB_2_2,	! Analyze descriptor
    LIB$FREE_EF,			! Deallocate an event flag
    LIB$GET_EF,				! Allocate an event flag
    LIB$SCOPY_R_DX6:		LINKAGE_JSB_3_6;	! String copy

EXTERNAL LITERAL			! Completion status codes
    LIB$_INVARG,			! Invalid argument
    LIB$_STRTRU,			! String truncated
    LIB$_INVFILSPE;			! Invalid file specification

%SBTTL 'LIB$FID_TO_NAME - Convert device and file ID to file specification'
GLOBAL ROUTINE LIB$FID_TO_NAME (		! Convert device and file ID to file specification
	DEVICE_NAME,				! Device name string
	FILE_ID:	REF BLOCK[,BYTE],	! File identification
	FILE_SPEC,				! File specification string
	FILE_SPEC_LENGTH,			! True length of FILE_SPEC
	DIRECTORY_ID:	REF BLOCK[,BYTE],	! Directory identification
	ACP_STATUS				! ACP status return
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine converts a disk device name and file identification to a
!	file specification by using the file name and directory back link
!	pointers recorded in the file headers.  Since directory back link
!	pointers do not exist in Structure Level 1, the routine will not
!	operate well in this case, unless the DIRECTORY_ID parameter is used.
!
! CALLING SEQUENCE:
!
!	ret_status.wlc.v = LIB$FID_TO_NAME (
!		device-name.rt.dx, file-id.rwu.r,
!		file-spec.wt.dx, [file-spec-length.wwu.r],
!		[directory-id.rwu.r], [acp-status.wlu.r])
!
! FORMAL PARAMETERS:
!
!	DEVICE_NAME		Address of a descriptor for a device name.
!				Typically this string is obtained from the
!				NAM$T_DVI field of a VAX-11 RMS name block.
!				The device name must reference a disk device.
!				The string must contain no more than 64
!				characters.
!
!	FILE_ID			Address of an array of three words that
!				specifies a file identification.  Typically
!				this array is obtained from the NAM$W_FID field
!				of a VAX-11 RMS name block.  The $FIDDEF macro
!				defines the structure of this parameter.
!
!	FILE_SPEC		Address of a descriptor for a string that
!				receives the file specification.  This is an
!				output parameter.
!
!	FILE_SPEC_LENGTH	Address of a word to receive the number	of
!				characters written into file-spec, not
!				counting padding in the case of a fixed-length
!				string.  If the output string is truncated to
!				the size specified in the file-spec
!				string, file-spec-length is set to this
!				size.  Therefore, file-spec-length can
!				always be used by the calling program to access
!				a valid substring of file-spec.  This is
!				an optional output parameter, passed by
!				reference.
!
!	DIRECTORY_ID		Address of an array of three words that
!				specifies a directory file identification.
!				Typically this array is obtained from the
!				NAM$W_DID field of a VAX-11 RMS name block.
!				The $FIDDEF macro defines the structure of this
!				parameter.  This is an optional parameter.
!
!	ACP_STATUS		Address of a longword that receives the status
!				resulting from traversing the back links.  This
!				is an optional output parameter.
!
!	The output parameters are guaranteed to be stored only if the routine
!	value is true.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS:
!
!	SS$_NORMAL	Normal successful completion
!
!	LIB$_STRTRU	Output string truncated (qualified success)
!
!	LIB$_INVARG	Required argument omitted, or device-name longer than
!			64 characters
!
!	LIB$_INVFILSPE	Device-name does not reference a disk
!
!	LIB$ANALYZE_SDESC errors
!	$GETDVI errors
!	$WAITFR errors
!	$ASSIGN errors
!	LIB$GET_EF errors
!	$QIO errors
!	$DASSGN errors
!	LIB$FREE_EF errors
!
! SIDE EFFECTS:
!
!	NONE
!
!--

BEGIN
LOCAL
	DEV_DESC:	BLOCK[DSC$K_S_BLN,BYTE], ! Descriptor for device name
	ITM:		BLOCK[28,BYTE],	! Item list for $GETDVI
	FIB:		BLOCK[FIB$C_LENGTH,BYTE], ! FIB
	FIB_DESC:	VECTOR[2],	! Descriptor for FIB
	ASCNAME:	BLOCK[ATR$S_ASCNAME,BYTE]
			VOLATILE,	! Directory name, type, and version
	BACKLINK:	BLOCK[ATR$S_BACKLINK,BYTE]
			VOLATILE,	! File back link pointer
	ATR:		BLOCKVECTOR[3,8,BYTE], ! Attribute descriptors
	IOSB:		VECTOR[4,WORD],	! I/O status block
	CHANNEL:	WORD,		! Channel number
	EFN,				! Event flag number
	FILE_NAME_LEN,			! Length of file name
	FILE_NAME:	BLOCK[ATR$S_ASCNAME,BYTE]
			VOLATILE,	! File name, type, and version
	DIR_LEVELS,			! Number of directory levels
	DIR_NAME_LEN:	VECTOR[9,BYTE],	! Length of directory name
	DIR_NAME:	BLOCKVECTOR[9,9,BYTE], ! Directory name
	ACPTYPE,			! Buffer for ACP type code
	BUFFER:		BLOCK[168,BYTE], ! Buffer to construct return string
	BUF_PTR:	REF VECTOR[,BYTE], ! Pointer to BUFFER
	BUF_LENGTH,			! Length of return string
	STATUS_1,			! Status return
	STATUS_2,			! Status return
	STATUS_3,			! Status return
	STATUS_4,			! Status return
	STATUS_5,			! Status return
	STATUS_6,			! Status return
	FINAL_STATUS,			! Status return
	ACP_STATUS_VALUE;		! Value for ACP_STATUS
MACRO
	ITM_W_SIZE=	0,0,16,0 %,	! Item buffer size
	ITM_W_TYPE=	2,0,16,0 %,	! Item code
	ITM_L_ADDR=	4,0,32,0 %,	! Item buffer address
	ITM_L_LEN=	8,0,32,0 %,	! Address of word to receive length
	ITM_W_SIZE_2=	12,0,16,0 %,	! Item buffer size
	ITM_W_TYPE_2=	14,0,16,0 %,	! Item code
	ITM_L_ADDR_2=	16,0,32,0 %,	! Item buffer address
	ITM_L_LEN_2=	20,0,32,0 %,	! Address of word to receive length
	ITM_L_END=	24,0,32,0 %;	! Zero to mark end of list
LABEL
	PROCESS;			! Block exited when processing complete
BUILTIN
	ACTUALCOUNT,			! Return number of arguments
	LOCC,				! LOCC instruction
	NULLPARAMETER;			! Test if parameter specified

!+
! Ensure that the required parameters are present.
!-

IF ACTUALCOUNT() LSSU 3 THEN RETURN LIB$_INVARG;

!+
! Analyze the input device name descriptor and set up the local descriptor.
!-

BEGIN ! block to use output registers
REGISTER
	R1 = 1,
	R2 = 2;

STATUS_1 = LIB$ANALYZE_SDESC_R2(.DEVICE_NAME; R1, R2);
IF NOT .STATUS_1 THEN RETURN .STATUS_1;
IF .R1 GTRU LOG$C_NAMLENGTH THEN RETURN LIB$_INVARG;
DEV_DESC[DSC$B_DTYPE] = DSC$K_CLASS_Z;
DEV_DESC[DSC$B_CLASS] = DSC$K_DTYPE_Z;
DEV_DESC[DSC$W_LENGTH] = .R1;
DEV_DESC[DSC$A_POINTER] = .R2;
END; ! block to use output registers

!+
! Assign a channel to the device.
!-

STATUS_2 = $ASSIGN(DEVNAM=DEV_DESC, CHAN=CHANNEL);
IF NOT .STATUS_2 THEN RETURN .STATUS_2;

!+
! Allocate an event flag.
!-

STATUS_3 = LIB$GET_EF(EFN);
IF NOT .STATUS_3
THEN
    BEGIN
    $DASSGN(CHAN=.CHANNEL);
    RETURN .STATUS_3;
    END;

!+
! Beginning of block that is exited when processing is complete.  FINAL_STATUS
! contains the status to be returned to caller.
!-

PROCESS:  BEGIN

!+
! Attempt to obtain the logical volume name for the device.
!-

ITM[ITM_W_SIZE] = LOG$C_NAMLENGTH;
ITM[ITM_W_TYPE] = DVI$_LOGVOLNAM;
ITM[ITM_L_ADDR] = BUFFER;
ITM[ITM_L_LEN] = ITM[ITM_W_SIZE];
ITM[ITM_W_SIZE_2] = 4;
ITM[ITM_W_TYPE_2] = DVI$_ACPTYPE;
ITM[ITM_L_ADDR_2] = ACPTYPE;
ITM[ITM_L_LEN_2] = 0;
ITM[ITM_L_END] = 0;
ACPTYPE = 0;
FINAL_STATUS = $GETDVI(CHAN=.CHANNEL, EFN=.EFN, ITMLST=ITM);
IF NOT .FINAL_STATUS THEN LEAVE PROCESS;
FINAL_STATUS = $WAITFR(EFN=.EFN);
IF NOT .FINAL_STATUS THEN LEAVE PROCESS;

!+
! Check the ACP type code to ensure that the device is a disk to which we can
! issue the necessary ACP functions.
!-

IF
    .ACPTYPE NEQ DVI$C_ACP_F11V1 AND
    .ACPTYPE NEQ DVI$C_ACP_F11V2
THEN
    BEGIN
    FINAL_STATUS = LIB$_INVFILSPE;
    LEAVE PROCESS;
    END;

!+
! If no logical volume name was available, use the physical device name.
!-

IF .ITM[ITM_W_SIZE] EQL 0
THEN
    BEGIN

    !+
    ! Reinitialize item list and obtain the device name.
    !-

    ITM[ITM_W_SIZE] = LOG$C_NAMLENGTH;
    ITM[ITM_W_TYPE] = DVI$_DEVNAM;
    FINAL_STATUS = $GETDVI(CHAN=.CHANNEL, EFN=.EFN, ITMLST=ITM);
    IF NOT .FINAL_STATUS THEN LEAVE PROCESS;
    FINAL_STATUS = $WAITFR(EFN=.EFN);
    IF NOT .FINAL_STATUS THEN LEAVE PROCESS;
    IF .ITM[ITM_W_SIZE] EQL 0
    THEN
	BEGIN
	FINAL_STATUS = LIB$_INVFILSPE;
	LEAVE PROCESS;
	END;
    END;

!+
! Set up the FIB.
!-

CH$FILL(0, FIB$C_LENGTH, FIB);
FIB[FIB$W_FID_NUM] = .FILE_ID[FID$W_NUM];
FIB[FIB$W_FID_SEQ] = .FILE_ID[FID$W_SEQ];
FIB[FIB$W_FID_RVN] = .FILE_ID[FID$W_RVN];

!+
! Set up the FIB descriptor.
!-

FIB_DESC[0] = FIB$C_LENGTH;
FIB_DESC[1] = FIB;

!+
! Set up the attribute list.
!-

ATR[0, ATR$W_TYPE] = ATR$C_BACKLINK;	! Directory back link
ATR[0, ATR$W_SIZE] = ATR$S_BACKLINK;
ATR[0, ATR$L_ADDR] = BACKLINK;
ATR[1, ATR$W_TYPE] = ATR$C_ASCNAME;	! File name, type, and version
ATR[1, ATR$W_SIZE] = ATR$S_ASCNAME;
ATR[1, ATR$L_ADDR] = FILE_NAME;
ATR[2, 0,0,32,0] = 0;			! End of list
ACP_STATUS_VALUE = SS$_NORMAL;

!+
! Read attributes of the file.
!-

FINAL_STATUS = $QIOW(
    FUNC=IO$_ACCESS,
    CHAN=.CHANNEL,
    EFN=.EFN,
    IOSB=IOSB,
    P1=FIB_DESC,
    P5=ATR);
IF .FINAL_STATUS THEN FINAL_STATUS = .IOSB[0];
IF NOT .FINAL_STATUS THEN LEAVE PROCESS;

!+
! Scan for spaces following the file name, type, and version and remove these.
!-

BEGIN ! block to use output registers
REGISTER
	R0 = 0;

LOCC(%REF(%C' '), %REF(ATR$S_ASCNAME), FILE_NAME; R0);
FILE_NAME_LEN = ATR$S_ASCNAME - .R0;
END; ! block to use output registers

!+
! If the directory ID was specified, replace the back link recorded in the file
! header.  This improves the output for Structure Level 1 and for multiply
! cataloged files.
!-

IF NOT NULLPARAMETER(5)
THEN
    BEGIN
    BACKLINK[FID$W_NUM] = .DIRECTORY_ID[FID$W_NUM];
    BACKLINK[FID$W_SEQ] = .DIRECTORY_ID[FID$W_SEQ];
    BACKLINK[FID$W_RVN] = .DIRECTORY_ID[FID$W_RVN];
    END;

!+
! Follow the back link file ID until we reach the MFD, encounter an error, or
! have generated eight directory levels.
!-

DIR_LEVELS = 0;
ATR[1, ATR$L_ADDR] = ASCNAME;
UNTIL
    (.BACKLINK[FID$W_NUM] EQL FID$C_MFD AND .BACKLINK[FID$B_NMX] EQL 0) OR
    .DIR_LEVELS GEQU 7
DO
    BEGIN

    !+
    ! If the back link is zero, this guarantees a failure.
    !-

    IF .BACKLINK[FID$W_NUM] EQL 0
    THEN
	BEGIN
	IF .DIR_LEVELS NEQ 0 THEN ACP_STATUS_VALUE = SS$_NOSUCHFILE;
	EXITLOOP;
	END;

    !+
    ! Copy the back link file ID to FIB$W_FID to look up that file.
    !-

    FIB[FIB$W_FID_NUM] = .BACKLINK[FID$W_NUM];
    FIB[FIB$W_FID_SEQ] = .BACKLINK[FID$W_SEQ];
    FIB[FIB$B_FID_NMX] = .BACKLINK[FID$B_NMX];
    IF .BACKLINK[FID$B_RVN] NEQ 0
	THEN FIB[FIB$B_FID_RVN] = .BACKLINK[FID$B_RVN];

    !+
    ! Read attributes of the file.
    !-

    ACP_STATUS_VALUE = $QIOW(
	FUNC=IO$_ACCESS,
	CHAN=.CHANNEL,
	EFN=.EFN,
	IOSB=IOSB,
	P1=FIB_DESC,
	P5=ATR);
    IF .ACP_STATUS_VALUE THEN ACP_STATUS_VALUE = .IOSB[0];
    IF NOT .ACP_STATUS_VALUE THEN EXITLOOP;

    !+
    ! Parse off and save the file name.
    !-

    BEGIN
    REGISTER
	R0 = 0;

    LOCC(%REF(%C'.'), %REF(ATR$S_ASCNAME), ASCNAME; R0);
    DIR_NAME_LEN[.DIR_LEVELS] = R0 = ATR$S_ASCNAME - .R0;
    IF .R0 GTRU 9 THEN EXITLOOP;
    CH$MOVE(.R0, ASCNAME, DIR_NAME[.DIR_LEVELS, 0,0,0,0]);
    END;

    !+
    ! Count this directory level.
    !-

    DIR_LEVELS = .DIR_LEVELS + 1;

    !+
    ! Only execute this loop once for Structure Level 1.
    !-

    IF .ACPTYPE EQL DVI$C_ACP_F11V1 THEN EXITLOOP;
    END;

!+
! End of block that is exited when processing is complete.  FINAL_STATUS
! contains the most severe status encountered during processing.
!-

END; ! of block PROCESS

!+
! Deassign the channel and deallocate the event flag.
!-

STATUS_5 = $DASSGN(CHAN=.CHANNEL);
STATUS_6 = LIB$FREE_EF(EFN);
IF NOT .STATUS_6 THEN RETURN .STATUS_6;
IF NOT .STATUS_5 THEN RETURN .STATUS_5;

!+
! If an error has occurred, return it.
!-

IF NOT .FINAL_STATUS THEN RETURN .FINAL_STATUS;

!+
! If no directory levels were found, and we are currently at the MFD,
! assume [000000].
!-

IF
    .DIR_LEVELS EQL 0 AND
    .BACKLINK[FID$W_NUM] EQL FID$C_MFD AND .BACKLINK[FID$B_NMX] EQL 0
THEN
    BEGIN
    DIR_NAME_LEN[0] = 6;
    DIR_NAME[0, 0,0,32,0] = '0000';
    DIR_NAME[0, 4,0,16,0] = '00';
    DIR_LEVELS = 1;
    END;

!+
! If an error occurred in traversing the back links, append [?] as the topmost
! level, unless the failure occurred on the original file.  This is assumed to
! be because the file is really not in a directory.
!-

IF
    NOT .ACP_STATUS_VALUE AND
    .BACKLINK[FID$W_NUM] NEQ 0 AND
    .DIR_LEVELS NEQ 0
THEN
    BEGIN
    DIR_NAME_LEN[.DIR_LEVELS] = 1;
    DIR_NAME[.DIR_LEVELS, 0,0,8,0] = '?';
    DIR_LEVELS = .DIR_LEVELS + 1;
    END;

!+
! The logical volume name is already in the intermediate buffer.  Position
! beyond it.
!-

BUF_PTR = .ITM[ITM_L_ADDR] + .ITM[ITM_W_SIZE];

!+
! If there is no trailing colon on the logical volume name, add one,
! followed by the leading directory terminator.
!-

IF .BUF_PTR[-1] NEQ %C':'
THEN
    BEGIN
    BUF_PTR[0] = %C':';
    BUF_PTR = .BUF_PTR + 1;
    END;
BUF_PTR[0] = %C'[';
BUF_PTR = .BUF_PTR + 1;

!+
! Loop over all directory levels.
!-

DECR I FROM .DIR_LEVELS-1 TO 0 DO
    BEGIN

    !+
    ! Add the directory name.
    !-

    BUF_PTR = CH$MOVE(.DIR_NAME_LEN[.I], DIR_NAME[.I, 0,0,0,0], .BUF_PTR);

    !+
    ! If this is not the last level, add a dot.
    !-

    IF .I NEQ 0
    THEN
	BEGIN
	BUF_PTR[0] = %C'.';
	BUF_PTR = .BUF_PTR + 1;
	END;
    END;

!+
! Add the trailing directory terminator.
!-

BUF_PTR[0] = %C']';
BUF_PTR = .BUF_PTR + 1;

!+
! Add the file name.
!-

BUF_PTR = CH$MOVE(.FILE_NAME_LEN, FILE_NAME, .BUF_PTR);

!+
! Copy the file specification to its destination, and determine if truncation
! occurred.
!-

BEGIN ! block to use output registers
REGISTER
	R1 = 1;

FINAL_STATUS = SS$_NORMAL;
BUF_LENGTH = .BUF_PTR - .ITM[ITM_L_ADDR];
STATUS_4 = LIB$SCOPY_R_DX6(.BUF_LENGTH, .ITM[ITM_L_ADDR], .FILE_SPEC);
IF NOT .STATUS_4 THEN RETURN .STATUS_4;
LIB$ANALYZE_SDESC_R2(.FILE_SPEC; R1);
IF .R1 LSSU .BUF_LENGTH
THEN
    BEGIN
    BUF_LENGTH = .R1;
    FINAL_STATUS = LIB$_STRTRU;
    END;
END; ! block to use output registers

!+
! Return the length of the file specification if requested.
!-

IF NOT NULLPARAMETER(4)
THEN
    (.FILE_SPEC_LENGTH)<0,16> = .BUF_LENGTH;

!+
! Return the ACP status code if requested.
!-

IF NOT NULLPARAMETER(6)
THEN
    .ACP_STATUS = .ACP_STATUS_VALUE;

!+
! Return the ultimate status.
!-

RETURN .FINAL_STATUS;
END;					! End of routine LIB$FID_TO_NAME

END					! End of module LIB$FID_TO_NAME
ELUDOM
