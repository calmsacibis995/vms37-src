%TITLE 'LIB$UNLOCK_FILE - Clear deaccess lock on file'
MODULE LIB$UNLOCK_FILE (			! Clear deaccess lock on file
		IDENT = 'V03-000'			! File: LIBUNLFIL.B32 Edit: 1-001
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	General Utility Library
!
! ABSTRACT:
!
!	This routine clears a deaccess lock on a file.
!
! ENVIRONMENT:	Runs at any access mode - AST reentrant
!
! AUTHOR: Martin L. Jack, CREATION DATE: 23-Dec-1981
!
! MODIFIED BY:
!
! 1-001	- Original from LIBACP.B32.  MLJ 23-Dec-1981
!--


%SBTTL 'Declarations'
!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!
LINKAGE
	LINKAGE_JSB_2_2 = JSB(REGISTER=0;REGISTER=1,REGISTER=2);
!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    LIB$UNLOCK_FILE;				! Clear deaccess lock on file

!
! INCLUDE FILES:
!

LIBRARY 'SYS$LIBRARY:LIB';			! System symbols

!*! REQUIRE 'RTLIN:RTLPSECT';			! Define PSECT declarations macros

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! FIELDS:
!
!	NONE
!
! PSECTS:
!
!*! DECLARE_PSECTS (LIB);				! Declare PSECTs for LIB$ facility
    PSECT
	    CODE = _LIB$CODE (READ, NOWRITE, EXECUTE, SHARE, PIC, ADDRESSING_MODE (WORD_RELATIVE)),
	    PLIT = _LIB$CODE (READ, NOWRITE, EXECUTE, SHARE, PIC, ADDRESSING_MODE (WORD_RELATIVE)),
	    OWN  = _LIB$DATA (READ, WRITE, NOEXECUTE, NOSHARE, PIC, ADDRESSING_MODE (LONG_RELATIVE)),
	    GLOBAL = _LIB$DATA (READ, WRITE, NOEXECUTE, NOSHARE, PIC, ADDRESSING_MODE (LONG_RELATIVE)) ;
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    LIB$ANALYZE_SDESC_R2:	LINKAGE_JSB_2_2,	! Analyze descriptor
    LIB$FREE_EF,			! Deallocate an event flag
    LIB$GET_EF;				! Allocate an event flag

EXTERNAL LITERAL			! Completion status codes
    LIB$_INVARG,			! Invalid argument
    LIB$_INVFILSPE;			! Invalid file specification

%SBTTL 'LIB$UNLOCK_FILE - Clear deaccess lock on file'
GLOBAL ROUTINE LIB$UNLOCK_FILE (		! Clear deaccess lock on file
	FILE_SPEC				! File specification string
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine clears a deaccess lock on a file.
!
! CALLING SEQUENCE:
!
!	ret_status.wlc.v = LIB$UNLOCK (file-spec.rt.dx)
!
! FORMAL PARAMETERS:
!
!	FILE_SPEC	Address of a descriptor for the file specification.
!			This string is a standard RMS file specification; it
!			must not contain a node name nor wild card characters;
!			it must reference a disk device.  The string must be
!			no longer than 255 characters.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS:
!
!	SS$_WASSET	Normal successful completion; file was unlocked
!
!	SS$_WASCLR	Normal successful completion; file was not locked
!
!	LIB$_INVARG	Required argument omitted, or file-spec longer than
!			255 characters
!
!	LIB$_INVFILSPE	File specification contained a node name or wildcard or
!			did not reference a disk device
!
!	LIB$ANALYZE_SDESC errors
!	$PARSE errors
!	$SEARCH errors
!	$ASSIGN errors
!	LIB$GET_EF errors
!	$QIO errors
!	$DASSGN errors
!	LIB$FREE_EF errors
!
! SIDE EFFECTS:
!
!	Deaccess lock cleared on file.
!
!--

BEGIN
LOCAL
	FAB:		$FAB_DECL,	! FAB for $PARSE
	NAM:		$NAM_DECL,	! NAM block for $PARSE
	ESA_BUFFER:	VECTOR[NAM$C_MAXRSS,BYTE], ! Expanded string area
	TEMP_DESC:	BLOCK[DSC$K_S_BLN,BYTE], ! Utility descriptor
	UCHAR:		BLOCK[ATR$S_UCHAR,BYTE]
			VOLATILE,	! File characteristics
	FIB:		BLOCK[FIB$C_LENGTH,BYTE], ! FIB
	FIB_DESC:	VECTOR[2],	! Descriptor for FIB
	ATR:		BLOCKVECTOR[2,8,BYTE], ! Attribute descriptors
	IOSB:		VECTOR[4,WORD],	! I/O status block
	CHANNEL:	WORD,		! Channel number
	EFN,				! Event flag number
	STATUS_1,			! Status return
	STATUS_2,			! Status return
	STATUS_3,			! Status return
	STATUS_4,			! Status return
	STATUS_5,			! Status return
	STATUS_6,			! Status return
	STATUS_7,			! Status return
	FINAL_STATUS;			! Status return
LABEL
	PROCESS;			! Block exited when processing complete
BUILTIN
	ACTUALCOUNT,			! Return number of arguments
	TESTBITSC;			! Test if bit set, clear bit

!+
! Ensure that the required parameter is present.
!-

IF ACTUALCOUNT() EQL 0 THEN RETURN LIB$_INVARG;

!+
! Initialize RMS structures required to do a $PARSE and $SEARCH.
!-

$FAB_INIT(FAB=FAB,
    NAM=NAM);
$NAM_INIT(NAM=NAM,
    ESA=ESA_BUFFER,
    ESS=NAM$C_MAXRSS);

!+
! Analyze the input descriptor and set up the FAB filename descriptor.
!-

BEGIN ! block to use output registers
REGISTER
	R1 = 1,
	R2 = 2;

STATUS_1 = LIB$ANALYZE_SDESC_R2(.FILE_SPEC; R1, R2);
IF NOT .STATUS_1 THEN RETURN .STATUS_1;
IF .R1 GTRU 255 THEN RETURN LIB$_INVARG;
FAB[FAB$B_FNS] = .R1;
FAB[FAB$L_FNA] = .R2;
END; ! block to use output registers

!+
! Parse the file specification to obtain the expanded name string.
!-

STATUS_2 = $PARSE(FAB=FAB);
IF NOT .STATUS_2 THEN RETURN .STATUS_2;

!+
! Perform various error checks on the file specification.  It must not have a
! node name, must not contain wildcards, and must reference a disk device.
!-

IF
    (.NAM[NAM$L_FNB] AND (NAM$M_WILDCARD OR NAM$M_NODE)) NEQ 0 OR
    NOT .BLOCK[FAB[FAB$L_DEV], DEV$V_RND; ,BYTE]
THEN
    BEGIN

    !+
    ! If the string contained a wildcard or a node name, internal RMS resources
    ! have been consumed by $PARSE.  Execute another $PARSE using the same FAB
    ! on a null string to release these resources.
    !-

    FAB[FAB$B_FNS] = 0;
    $PARSE(FAB=FAB);
    RETURN LIB$_INVFILSPE;
    END;

!+
! Perform a $SEARCH to get the file identification of the file.
!-

STATUS_3 = $SEARCH(FAB=FAB);
IF NOT .STATUS_3 THEN RETURN .STATUS_3;

!+
! Set up the FIB.
!-

CH$FILL(0, FIB$C_LENGTH, FIB);
FIB[FIB$L_ACCTL] = FIB$M_WRITE OR FIB$M_NOREAD OR FIB$M_NOWRITE;
FIB[FIB$W_FID_NUM] = .NAM[NAM$W_FID_NUM];
FIB[FIB$W_FID_SEQ] = .NAM[NAM$W_FID_SEQ];
FIB[FIB$W_FID_RVN] = .NAM[NAM$W_FID_RVN];

!+
! Set up the FIB descriptor.
!-

FIB_DESC[0] = FIB$C_LENGTH;
FIB_DESC[1] = FIB;

!+
! Set up the attribute list.
!-

ATR[0, ATR$W_TYPE] = ATR$C_UCHAR;	! File characteristics
ATR[0, ATR$W_SIZE] = ATR$S_UCHAR;
ATR[0, ATR$L_ADDR] = UCHAR;
ATR[1, 0,0,32,0] = 0;			! End of list

!+
! Assign a channel to the device.
!-

TEMP_DESC[DSC$W_LENGTH] = .NAM[NAM$B_DEV];
TEMP_DESC[DSC$A_POINTER] = .NAM[NAM$L_DEV];
STATUS_4 = $ASSIGN(DEVNAM=TEMP_DESC, CHAN=CHANNEL);
IF NOT .STATUS_4 THEN RETURN .STATUS_4;

!+
! Allocate an event flag.
!-

STATUS_5 = LIB$GET_EF(EFN);
IF NOT .STATUS_5
THEN
    BEGIN
    $DASSGN(CHAN=.CHANNEL);
    RETURN .STATUS_5;
    END;

!+
! Beginning of block that is exited when processing is complete.  FINAL_STATUS
! contains the status to be returned to caller.
!-

PROCESS:  BEGIN

!+
! Read attributes of the file.
!-

FINAL_STATUS = $QIOW(
    FUNC=IO$_ACCESS,
    CHAN=.CHANNEL,
    EFN=.EFN,
    IOSB=IOSB,
    P1=FIB_DESC,
    P5=ATR);
IF .FINAL_STATUS THEN FINAL_STATUS = .IOSB[0];
IF NOT .FINAL_STATUS THEN LEAVE PROCESS;
FINAL_STATUS = SS$_WASCLR;

!+
! If the file is currently locked, clear the lock bit.
!-

IF TESTBITSC(UCHAR[FCH$V_LOCKED])
THEN
    BEGIN

    !+
    ! Rewrite the file characteristics to clear the lock.
    !-

    FINAL_STATUS = $QIOW(
	FUNC=IO$_MODIFY,
	CHAN=.CHANNEL,
	EFN=.EFN,
	IOSB=IOSB,
	P1=FIB_DESC,
	P5=ATR);
    IF .FINAL_STATUS THEN FINAL_STATUS = .IOSB[0];
    IF NOT .FINAL_STATUS THEN LEAVE PROCESS;
    FINAL_STATUS = SS$_WASSET;
    END;

!+
! End of block that is exited when processing is complete.  FINAL_STATUS
! contains the status that is to be returned to caller.
!-

END; ! of block PROCESS

!+
! Deassign the channel and deallocate the event flag.
!-

STATUS_6 = $DASSGN(CHAN=.CHANNEL);
STATUS_7 = LIB$FREE_EF(EFN);
IF NOT .STATUS_7 THEN RETURN .STATUS_7;
IF NOT .STATUS_6 THEN RETURN .STATUS_6;

!+
! Return the status.
!-

RETURN .FINAL_STATUS;
END;					! End of routine LIB$UNLOCK_FILE

END					! End of module LIB$UNLOCK_FILE
ELUDOM
