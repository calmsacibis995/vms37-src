	.TITLE	LIB$CREMAPSEC - CREATE AND MAP A SECTION
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY:
;
; ABSTRACT:
;
;
; ENVIRONMENT:
;
; AUTHOR: PETER H. LIPMAN , CREATION DATE: 22-MAY-77
;
; MODIFIED BY:
;
;	V0207	BLS0125		Benn Schreiber		 1-Jan-1982
;		Change module name to lib$cremapsec, and do not invoke
;		$secdef globally.
;
;--

	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;
	$ATRDEF				;FILE ATTRIBUTE BLOCK DEFINITIONS
	$FABDEF				;FILE ACCESS BLOCK DEFINITIONS
	$SECDEF				;DEFINE SECTION FLAGS
	$XABDEF				;EXTENDED ATTRIBUTE BLOCK DEFINITIONS
;
; MACROS:
;
;
; EQUATED SYMBOLS:
;
;
; OFFSETS FROM AP
;
	$OFFSET	4,POSITIVE,<-
	INADR,-				;INPUT ADDRESS RANGE
	RETADR,-			;RETURN ADDRESS RANGE
	FLAGS,-				;SECTION FLAGS
	GSDNAM,-			;GLOBAL SECTION NAME DESCRIPTOR
	RELPAG,-			;RELATIVE PAGE IN SECTION TO START MAPPING
	FILNAM,-			;FILE NAME DESCRIPTOR
	PAGCNT,-			;MAX PAGE COUNT TO CREATE
	VBN,-				;STARTING VIRTUAL BLOCK IN FILE TO CREATE SECTION
	ACMODE,-			;ACCESS MODE OF SECTION
	CHANADR-			;ADDRESS OF CHANNEL TO BE USED/RETURNED
	>
;
; OFFSETS FROM FP
;
	$OFFSET	0,NEGATIVE,<-
	SVACMODE,-			;SAVED ACMODE PARAMETER IF PRESENT
	<FAB,FAB$C_BLN>,-		;FAB
	<SCRATCHSIZE,0>-		;SIZE OF SCRATCH AREA
	>
;
; OWN STORAGE:
;

	.SBTTL	CREATE AND MAP SECTION
;++
; FUNCTIONAL DESCRIPTION:
;
;	THIS ROUTINE PROVIDES A SLIGHTLY SIMPLER INTERFACE TO THE
; CREATE AND MAP SECTION SYSTEM SERVICE.  IT'S FUNCTION HOWEVER IS
; IDENTICAL, I.E. TO CREATE AND MAP A SECTION.
;
; CALLING SEQUENCE:
;
;	CALLG	ARGLIST,CREMAPSEC
;
; INPUT PARAMETERS:
;
;	INADR(AP)	=		;INPUT ADDRESS RANGE TO MAP
;	RETADR(AP)	=		;RETURN ADDRESS RANGE
;	FLAGS(AP)	=		;SECTION CONTROL FLAGS
;	GSDNAM(AP)	=		;GLOBAL SECTION NAME DESCRIPTOR
;	RELPAG(AP)	=		;RELATIVE PAGE IN SECTION TO START MAPPING
;	FILNAM(AP)	=		;DESCRIPTOR OF FILE NAME STRING
;	PAGCNT(AP)	=		;SIZE OF SECTION TO CREATE
;	VBN(AP)		=		;STARTING VBN OF FILE TO CREATE SECTION FROM
;					;IF THE ABOVE 2 PARAMETERS ARE LEFT OUT
;					;THE SECTION STARTS AT VBN 1 OF THE FILE
;					;AND IS THE FILE LENGTH IN SIZE
;	PFN(AP)		=		;IF PFNMAPPING, IS STARTING PFN TO MAP
;					;TO NOT VBN
;
;	ACMODE(AP)	=		;OPTIONAL PARAMETER SPECIFYING ACCESS MODE
;	CHANADR(AP)	=		;OPTIONAL PARAMETER SPECIFYING EITHER
;					;ADDRESS OF CHANNEL TO USE OR ADDRESS
;					;TO HOLD RETURNED CHANNEL USED
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	R0 = SYSTEM STATUS CODE
;
; IMPLICIT OUTPUTS:
;
;	CHANNEL USED IS RETURNED VIA OPTIONAL PARAMETER, CHANADR.
;
; COMPLETION CODES:
;
;	NONE
;
; SIDE EFFECTS:
;
;	NONE
;
;--

	.LIST	MEB

	.PSECT	_LIB$CODE PIC,SHR,BYTE,RD,EXE,NOWRT

	.ENTRY	LIB$CREMAPSEC,^M<R2,R3,R5,R5,R6>
	BRB	START

	.ENTRY	LIB$_CREMAPSEC,^M<R2,R3,R4,R5,R6>
START:	MOVAL	SCRATCHSIZE(SP),SP	;RESERVE SCRATCH STORAGE
	MOVC5	#0,(SP),#0,#-SCRATCHSIZE,(SP) ;ZERO THE SCRATCH STORAGE
	CMPL	(AP),#<ACMODE/4>	;IS ACCESS MODE PARAMETER PRESENT?
	BLSS	20$			;BRANCH IF NOT
	MOVL	ACMODE(AP),SVACMODE(FP)	;YES, SAVE IT IN A TEMP
20$:	MOVL	FLAGS(AP),R4		;GET CONTROL FLAGS
	BBC	#SEC$V_GBL,R4,40$	;BRANCH IF PROCESS SECTION
	MOVQ	@INADR(AP),R2		;SAVE INPUT ADDRESS RANGE
					;COULD BE OVERWRITTEN BY RETADR IN
					;AN UNSUCCESSFUL MGBLSC ATTEMPT
	CLRL	R1			;ASSUME NO RELATIVE PAGE OFF. SPECIFIED
	BBC	#SEC$V_PFNMAP,R4,25$	;BRANCH IF NOT PFNMAP-ING
	MOVL	RELPAG(AP),R1		;GET RELATIVE PAGE OFFSET
25$:	$MGBLSC_S -
		INADR=@INADR(AP),-	;ADDRESS OF INPUT ADDRESS RANGE
		RETADR=@RETADR(AP),-	;ADDRESS OF RETURN ADDRESS RANGE
		FLAGS=R4,-		;SECTION FLAGS
		ACMODE=SVACMODE(FP),-	;ACCESS MODE
		GSDNAM=@GSDNAM(AP),-	;ADDRESS OF GLOBAL SECTION NAME
		RELPAG=R1		;RELATIVE PAGE IN SECTION
	BLBC	R0,35$			;BRANCH ON ERROR MAPPING FILE
	BRW	EXIT			;BRANCH IF SUCCESSFUL, ALL DONE
35$:	IFNOWRT	#8,@INADR(AP),40$	;UNLESS INPUT RANGE IS READ ONLY
	MOVQ	R2,@INADR(AP)		;RESTORE INPUT ADDRESS RANGE
40$:	CMPL	(AP),#<CHANADR/4>	;WAS CHANADR SPECIFIED?
	BLSS	50$			;BR IF NOT SPECIFIED
	IFNORD	#4,@CHANADR(AP),50$	;CAN THE LOCATION BE READ?
	MOVL	@CHANADR(AP),R6		;GET CHANNEL SPECIFIED BY USER
	BNEQ	100$			;DON'T OPEN FILE IF CHAN PROVIDED
50$:	MOVAL	FAB(FP),R5		;ADDRESS OF FAB

	ASSUME	FAB$B_BLN EQ FAB$B_BID+1 ;ASSUME THESE ARE ADJACENT
	MOVW	#<FAB$C_BLN@8 + FAB$C_BID>,FAB$B_BID(R5) ;SET ID AND SIZE OF FAB
	MOVL	FILNAM(AP),R0		;GET ADDRESS OF FILNAM DESC
	BEQL	100$			;BR ON SECTION NOT MAPPED TO A FILE
	MOVQ	@FILNAM(AP),R0		;GET SIZE AND ADDRESS OF FILE NAME STRING
	MOVB	R0,FAB$B_FNS(R5)	;SIZE OF FILE NAME STRING
	MOVL	R1,FAB$L_FNA(R5)	;ADDRESS OF FILE NAME STRING
	BBC	#SEC$V_WRT,R4,60$ 	;BRANCH IF NOT MAPPING FOR WRITE
	BBS	#SEC$V_CRF,R4,60$ 	;COPY ON REF IS STILL READ ONLY
	MOVB	#FAB$M_PUT,FAB$B_FAC(R5) ;ACCESS FOR WRITING
60$:	BBSS	#FAB$V_UFO,FAB$L_FOP(R5),80$ ;SET USER FILE OPEN
80$:	$OPEN	(R5)			;OPEN THE FILE
	BLBC	R0,EXIT			;BRANCH IF FAILED
	MOVL	FAB$L_STV(R5),R6	;GET CHANNEL FROM FAB
	CMPL	(AP),#<CHANADR/4>	;DOES CALLER WANT THE CHANNEL RETURNED?
	BLSS	100$			;BR IF DOES NOT WANT CHANNEL
	IFNOWRT	#4,@CHANADR(AP),100$	;CHECK CHAN ADR CAN BE WRITTEN
	MOVL	R6,@CHANADR(AP)		;SET RETURN CHANNEL NUMBER
100$:	BBS	#SEC$V_PFNMAP,R4,110$	;BRANCH IF PFNMAP-ING
	MOVL	RELPAG(AP),R1		;GET RELATIVE PAGE TO MAP
	BRB	200$			;GO TRY TO CREATE SECTION
110$:	CLRL	R1			;SET REL PAG AS 0
	CLRL	R6			;SET NO FILE TO MAP TO
200$:	$CRMPSC_S -			;CREATE AND MAP SECTION
		INADR=@INADR(AP),-	;INPUT RANGE DESCRIPTOR
		RETADR=@RETADR(AP),-	;RETURN RANGE DESCRIPTOR
		FLAGS=R4,-		;SECTION FLAGS
		ACMODE=SVACMODE(FP),-	;ACCESS MODE OF SECTION
		GSDNAM=@GSDNAM(AP),-	;GLOBAL SECTION NAME DESCRIPTOR
		RELPAG=R1,-		;RELATIVE PAGE IN SECTION TO MAP
		CHAN=R6,-		;CHANNEL TO FILE
		PAGCNT=PAGCNT(AP),-	;NO. OF SECTION PAGES TO CREATE
		VBN=VBN(AP)		;STARTING VIRTUAL BLOCK IN SECTION
	PUSHL	R0			;SAVE CRMPSC STATUS CODE
	BBC	#SEC$V_GBL,R4,EXIT	;BRANCH IF NOT GLOBAL SECTION
	MOVL	FILNAM(AP),R1		;GET ADR OF FILE NAME DESC
	BEQL	EXIT			;BR ON NO CHANNEL TO DEASSIGN
	CMPL	(AP),#<CHANADR/4>	;DOES CALLER WANT THE CHANNEL RETURNED?
	BGEQ	300$			;BR IF DOES WANT CHANNEL
	$DASSGN_S CHAN=R6		;DEASSIGN THE CHANNEL FOR GLOBAL SECTION
	BLBC	R0,EXIT			;RETURN DEASSIGN CHANNEL ERROR
300$:	POPL	R0			;RETURN CRMPSC STATUS CODE
EXIT:	RET				;AND RETURN TO CALLER

	.END
