	.TITLE	LIB$ASSIGN		; Assign channel to device
	.IDENT	'V03-000'
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;
; FACILITY: Language-independent support library
;++
; ABSTRACT:
;
;
;--
;
; VERSION: 1
;
; HISTORY:
;
; AUTHOR:
;
;	Herb Jacobs		August 1981
;

	.SBTTL	HISTORY		; Detailed Current Edit History

; EDIT HISTORY:
;
; 1-001 - 

	.SBTTL	DECLARATIONS

;
; INCLUDE FILES:
;
	$FABDEF
	$NAMDEF
;
; EXTERNAL SYMBOLS:
;

;
; MACROS:
;

;
; PSECT DECLARATIONS:
;

	.PSECT	_LIB$CODE	PIC, SHR, LONG, EXE, NOWRT

;
; EQUATED SYMBOLS:
;


	.SBTTL	LIB$ASSIGN - 

;++
; FUNCTIONAL DESCRIPTION:
;
;	These routines provide a general mechanism to get a channel assigned
;	to the associated device with a file specification.  The channel
;	assigned is always to the device, never to the file.  The purpose
;	of these routines are to successfully accomplish up cased recursive
;	logical name translation and succeed with process permanent files.
;	Since these routines use RMS as a basis, compatibility is assured
;	with all working programs.
;
; CALLING SEQUENCE:
;
;	ret = LIB$ASSIGN	( filedesc, chan)
;	ret = LIB$ASSIGN_FILE	( filedesc, chan)
;	ret = LIB$ASSIGN_DEV	( filedesc, chan)
;
; INPUT PARAMETERS:
;
;	FILEDESC - Address of character string descriptor describing input
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	CHAN -	Address of word to recieve channel number assigned
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	SS$_NORMAL 	- success
;	All other completion codes are generated as RMS or SS codes.
;
; SIDE EFFECTS:
;
;	NONE
;
;--
	.ENTRY	-
LIB$ASSIGN,	^M<>
	CALLG	(AP),B^LIB$ASSIGN_DEV		;ATTEMPT DEVICE ASSIGNMENT
	BLBS	R0,10$				;BRANCH IF SUCCESSFUL
;
; PROCESS LIST OF RECOGNIZABLE FAILURES AS A DEVICE NAME THAT SHOULD BE
; RETURNED AS AN ERROR RATHER THAN ATTEMPTING AS A FILE NAME
;
	CMPL	#RMS$_CHN,R0			;DEVICE ALLOCATED
	BEQL	10$
	CMPL	#RMS$_PRV,R0			;NO PRIVILEGE FOR DEVICE ACCESS
	BEQL	10$
	CALLG	(AP),B^LIB$ASSIGN_FILE		;ATTEMPT AS GENERAL FILE SPEC
10$:	RET					;RETURN STATUS FROM SUBROUTINE


;
; GET CHANNEL ASSOCIATED WITH FILE SPEC, ASSUME NO SPECIAL PUNCTUATION
;
	.ENTRY	-
LIB$ASSIGN_FILE,^M<R2,R3,R4,R5,R6>
	SUBL	#FAB$C_BLN+NAM$C_BLN,SP		;ALLOCATE ROOM FOR FAB AND NAM
	MOVL	SP,R6				;GET ADDRESS OF FAB
	BSBW	ASSIGN_SETUP			;PERFORM COMMON SETUP
	$PARSE	FAB=<(R6)>			;GET THE DEVICE INFORMATION
10$:	BLBC	R0,20$				;BRANCH IF ERROR TO RETURN CODE
	CALLG	(AP),W^ASSIGN_CHAN		;CALL FOR STACK CLEANUP
20$:	RET					;CHANNEL

;
; GET CHANNEL ASSOCIATED WITH FILE SPEC, FORCE TO LOOK LIKE DEVICE NAME AND
; ONLY SUCCEED IF INPUT REPRESENTS DEVICE NAME.
;
	.ENTRY	-
LIB$ASSIGN_DEV,	^M<R2,R3,R4,R5,R6>
	SUBL	#FAB$C_BLN+NAM$C_BLN,SP		;ALLOCATE ROOM FOR FAB AND NAM
	MOVL	SP,R6				;GET ADDRESS OF FAB
	BSBW	ASSIGN_SETUP			;PERFORM COMMON SETUP
10$:	LOCC	#^A/:/,R0,(R1)			;DOES STRING CONTAIN A COLON?
	BEQL	20$				;BRANCH IF NO
	DECL	R0				;WAS THIS LAST CHARACTER?
	BEQL	30$				;BRANCH IF YES
	CMPB	#^A/:/,1(R1)			;IS THIS A NODE SPECIFIER?
	BNEQ	30$				;BRANCH IF NOT, EXPLICIT ":"
	ADDL	#2,R1				;BUMP PAST "::"
	DECL	R0				;ONE LESS CHARACTER IN COUNT
	BRB	10$				;TRY FOR REAL ":"
20$:	MOVZBL	(R2),R0				;GET SIZE OF STRING
	ADDL	#4,R0				;ROUND UP FOR STACK ALIGNMENT
	BICL	#3,R0				;SIZE NEEDED ON STACK
	SUBL	R0,SP				;ALLOCATE SPACE FOR COPY
	MOVC5	(R2),@4(R2),#^A/:/,R0,(SP)	;MAKE A COPY WITH A ":" AT END
	ADDB3	#1,@4(AP),FAB$B_FNS(R6)		;SET SIZE WITH COLON
	MOVL	SP,FAB$L_FNA(R6)		;SET ADDRESS OF COPY
30$:	BBSS	#FAB$V_NFS,FAB$L_FOP(R6),35$	;SET NON FILE STRUCTURE ACCESS
35$:	$PARSE	FAB=<(R6)>			;GET THE DEVICE INFORMATION
40$:	BLBC	R0,50$				;BRANCH IF ERROR TO RETURN CODE
	MOVZWL	#SS$_IVDEVNAM,R0		;ASSUME FAILURE
	BITL	#<NAM$M_EXP_DIR!NAM$M_EXP_NAME!-;CHECK FOR ANYTHING BUT DEVICE
		NAM$M_EXP_TYPE!NAM$M_EXP_VER!-
		NAM$M_GRP_MBR!NAM$M_WILDCARD>,-
		NAM$L_FNB+FAB$C_BLN(R6)
	BNEQ	50$				;BRANCH IF ANY OTHERS SET
	CALLG	(AP),W^ASSIGN_CHAN		;CALL FOR STACK CLEANUP
50$:	RET

;
;	Routine used for common setup between ASSIGN_FILE and ASSIGN_DEV
;
ASSIGN_SETUP:
	MOVL	#LIB$_INVARG,R0			;ASSUME FAILURE
	CMPB	#2,(AP)				;ARE THERE 2 ARGUMENTS?
	BNEQ	10$				;BRANCH IF NOT
	CMPW	#255,@4(AP)			;IS SIZE OF DEVNAME REASONABLE?
	BLSS	10$				;BRANCH IF SIZE TOO BIG
	MOVC5	#0,(SP),#0,#FAB$C_BLN+NAM$C_BLN,(R6) ;ZERO THEM
	MOVB	#FAB$C_BID,FAB$B_BID(R6)	;SET BLOCK ID TO FAB
	MOVB	#FAB$C_BLN,FAB$B_BLN(R6)	;SET LENGTH OF FAB
	MOVB	#NAM$C_BID,NAM$B_BID+FAB$C_BLN(R6) ;SET BLOCK ID TO NAME BLOCK
	MOVB	#NAM$C_BLN,NAM$B_BLN+FAB$C_BLN(R6) ;SET LENGTH OF NAME BLOCK
	MOVAB	FAB$C_BLN(R6),FAB$L_NAM(R6)	;INDICATE NAME BLOCK EXISTS
	MOVL	4(AP),R2			;GET ADDRESS OF DESCRIPTOR
	MOVZBL	(R2),R0				;GET SIZE OF STRING
	MOVL	4(R2),R1			;GET ADDRESS OF STRING
	MOVB	R0,FAB$B_FNS(R6)		;SET SIZE OF DEVICE NAME
	MOVL	R1,FAB$L_FNA(R6)		;SET ADDRESS OF DEVICE NAME
10$:	RSB					;RETURN

;
;	Routine used for common closure for both ASSIGN_FILE and ASSIGN_DEV
;
ASSIGN_CHAN:
	.WORD	0				;USE COMMON REGISTER SET
	MOVAB	NAM$T_DVI+1+FAB$C_BLN(R6),R4	;SET UP ADDRESS OF DEVICE NAME FIELD
	PUSHL	R4				;FORM A DESCRIPTOR
	MOVZBL	-1(R4),-(SP)			;GET SIZE OF FIELD
	MOVL	SP,R5				;R5 IS INPUT DESC FOR $TRNLOG
	CMPB	#^A\_\,(R4)			;DO WE ALREADY HAVE A PHYSICAL NAME?
	BEQL	10$				;BRANCH IF YES TO ASSIGN THE CHANNEL
	SUBL	#50,SP				;ALLOCATE A BUFFER
	PUSHL	SP				;SET UP THE ADDRESS
	PUSHL	#50				;AND SIZE
	MOVL	SP,R3				;R3 IS OUTPUT DESC FOR $TRNLOG
	$TRNLOG_S (R5),(R3),(R3)		;TRANSLATE THE STRING
	BLBC	R0,20$				;BRANCH IF FAILURE
	MOVL	R3,R5				;SET UP TO USE TRANSLATED STRING
	CMPB	#27,@4(R5)			;DOES OUTPUT START WITH ESCAPE?
	BNEQ	10$				;BARNCH IF NOT
	SUBL	#4,(R5)				;REDUCE SIZE BY PROCESS PERM STUFF
	ADDL	#4,4(R5)			;POINT PAST IT
10$:	PUSHL	#0				;AREA TO GET CHANNEL BACK IN
	MOVL	SP,R2				;GET ADDRESS OF AREA
	$ASSIGN_S (R5),(R2)			;ASSIGN A CHANNEL
	BLBC	R0,20$				;BRANCH IF THIS METHOD FAILS ALSO
	MOVW	(R2),@8(AP)			;STORE THE CHANNEL FOR THE USER
20$:	RET					;RETURN

	.END
