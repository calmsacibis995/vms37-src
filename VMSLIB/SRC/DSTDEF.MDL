;++
;
;	DSTDEF.MDL
;		Definition of dst type DST$K_DTYPE_CAD  command mnemonics
;	Version 'V03-000'
;
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;
; FACILITY:
;
;
; ABSTRACT:
;
;	For more information on the use of the items defined in this
;	document refer to specifications of debug symbol table entries
;	generated by the language processors and the SRM for a description
;	of the VAX standard descriptors.
;
; ENVIRONMENT:
;
;
; Author:
;	Terrell Mitchell   October 4, 1979
;
; Version:	1.00
;
; MODIFIED BY:
;
;--
; 1-001 - Original.  TM 4-Oct-1979


;
;   Following is the MDL definition of the mnemonics for the 
;	address calculation commands found in DSC$K_DTYPE_CAD
;	dst records.  They are processed by DEBUG32.
;
;   The commands operate on a longword stack maintained by the debugger.
;	This type of dst record is specified for items which need address
;	calculation at runtime.  It was originally designed for handling
;	register based record items.
;


	$STRUCT	DST

   	K	<			;  Use a K to indicate constant
		LOCOMMAND,0		;  Low value for range checking
		STA_R00,0		;  Stack contents of R0
		STA_R01,1		;  Stack contents of R1
		STA_R02,2		;  Stack contents of R2
		STA_R03,3		;  Stack contents of R3
		STA_R04,4		;  Stack contents of R4
		STA_R05,5		;  Stack contents of R5
		STA_R06,6		;  Stack contents of R6
		STA_R07,7		;  Stack contents of R7
		STA_R08,8		;  Stack contents of R8
		STA_R09,9		;  Stack contents of R9
		STA_R10,10		;  Stack contents of R10
		STA_R11,11		;  Stack contents of R11
		STA_R12,12		;  Stack contents of R12 (AP)
		STA_R13,13		;  Stack contents of R13 (FP)
		STA_R14,14		;  Stack contents of R14 (SP)
		STA_R15,15		;  Stack contents of R15 (PC)
		STA_IMM_B,16		;  Stack contents of byte operand
					;    sign extending to longword
		STA_IMM_W,17		;  Stack contents of word operand
					;    sign extending to longword
		STA_IMM_L,18		;  Stack contents of longword operand
		OPR_ADD,19		;  Pop two operands, add , 
					;    stack longword result
		STA_REP_B,20		;  Pop top item and stack sign extended
					;    byte at that address
		STA_REP_W,21		;  Pop top item and stack sign extended
					;    word at that address
		STA_REP_L,22		;  Pop top item and stack longword at
					;    that address
		OPR_STOP,23		;  Terminate command string.  Longword
					;    at top of stack contains address
					;    of data item.
		HICOMMAND,23		;  Hi value for range checking
		>
	E

;
;  end of DSTDEF.MDL
;
