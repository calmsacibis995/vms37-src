%TITLE 'LIB$EXECUTE_CLI - Execute CLI commands'
MODULE LIB$EXECUTE_CLI (			! Execute CLI commands
		IDENT = 'V03-000'			! File: LIBEXECLI.B32
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	General Utility Library
!
! ABSTRACT:
!
!	A procedure to execute arbitrary CLI commands when called
!	from a program.
!
! ENVIRONMENT:	Runs at any access mode - AST reentrant
!
! AUTHOR: Len Kawell, CREATION DATE: 21-May-1979
!
! MODIFIED BY:
!
! 3-005   MHB0078	Mark H. Bramhall	 4-Nov-1981
!	  Remove the usage of ASTs so that the routine will correctly
!	  function with ASTs inhibited.
!
! 3-004	  SBL0004	Steve Lionel		14-Sept-1981
!	  Make code agree with comments as to the restriction on the
!	  length of the command line.  Comments said 256 but code
!	  said 132.  Change code to read 256.
!
! 3-003	  LMK0003	Len Kawell		10-Mar-1981
!	  Create subprocess with base priority of master process.  Also
!	  change termination mailbox status check.
!
! 3-002	- LMK0002	Len Kawell		18-January-1981
!	  Fix to only $DELPRC if process was created successfully and correctly
!	  return status to the caller.
!
! 3-001 - SBL3001	Steven B. Lionel	16-January-1980
!	  Make code PIC.  Make PSECT names conform to LIB$ standards.  Allow
!	  arguments to be omitted by reference.  Use authorized privs only
!	  when creating subprocess.  Send a final $ to force EOF.  Restrict
!	  command lengths to 256 bytes.
!--


%SBTTL 'Declarations'
!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!
!	NONE
!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    LIB$EXECUTE_CLI,				! Execute CLI commands
    EXIT_HANDLER : NOVALUE;			! Exit handler

!
! INCLUDE FILES:
!

LIBRARY 'SYS$LIBRARY:STARLET';				! System symbols


!
! MACROS:
!

MACRO
    CKSTATUS[] = 			! Check routine status
	BEGIN
	LOCAL STATUS;
	STATUS = (%REMAINING);
	IF NOT .STATUS THEN LEAVE MAIN_BLOCK WITH .STATUS;
	END%;

!
! EQUATED SYMBOLS:
!

LITERAL
	ESC		= %X'1B',		! ASCII escape
	LOGNAM_SIZ	= 64;			! Maximum logical name size

!
! FIELDS:
!
!	NONE
!
! PSECTS:
!

PSECT
    CODE = _LIB$CODE (READ, NOWRITE, EXECUTE, SHARE, PIC, ADDRESSING_MODE (WORD_RELATIVE)),
    PLIT = _LIB$CODE (READ, NOWRITE, EXECUTE, SHARE, PIC, ADDRESSING_MODE (WORD_RELATIVE));

!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    LIB$GET_EF,					! Allocates event flag number
    LIB$FREE_EF;				! Deallocates event flag number

EXTERNAL LITERAL 				! Condition value symbols
    LIB$_INSEF,					! Insufficient event flags
    LIB$_INVARG;				! Invalid argument


%SBTTL 'LIB$EXECUTE_CLI - Execute CLI commands'
GLOBAL ROUTINE LIB$EXECUTE_CLI (		! Execute CLI commands
    	COMMAND1				! One or more command strings
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	LIB$EXECUTE_CLI creates a subprocess to execute a CLI command
!	or commands.  To do this it first creates two mailboxes, one
!	to be used as the subprocess's input device, and one to receive
!	the subprocess's termination status.  This routine then creates
!	the subprocess running SYS$SYSTEM:LOGINOUT.EXE.  This will
!	initiate the appropriate command interpreter reading commands
!	from the input mailbox.
!
!	When the subprocess terminates, the termination status will
!	be placed in the termination mailbox and returned to the caller.

!
! CALLING SEQUENCE:
!
!	ret_status.wlc.v = LIB$EXECUTE_CLI (command1.rt.dx [, commandn,rt.dx...])
!
! FORMAL PARAMETERS:
!
!	command1 - commandn	- Addresses of string descriptors containing
!				  command line text.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS:
!
!	SS$_NORMAL	Normal successful completion
!	LIB$_INVARG	Invalid argument
!	LIB$_INSEF	Insufficient event flags
!	SS$_xyz		System service failure
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    BUILTIN
	ACTUALCOUNT,				! Count of parameters
	ACTUALPARAMETER;			! Parameter address
LOCAL
	OUTPUT_DESC	: VECTOR[2],		! Output logical name descriptor
	OUTPUTBUF	: VECTOR[LOGNAM_SIZ,BYTE], ! Output logical name buffer
	OUTPUTBUF_DESC	: VECTOR[2],		! Output logical name buffer desc
	EFN_MASK	: VECTOR[1],		! Command/Termination EFN mask
	CMDMBXCHAN	: VECTOR[1,WORD],	! Command mailbox channel
	CMDMBXNAMBUF	: VECTOR[LOGNAM_SIZ,BYTE], ! Command mailbox name buffer
	CMDMBXNAM_DESC	: VECTOR[2],		! Command mailbox name desc
	CMDMBXEFN	: VECTOR[1],		! Command mailbox event flag number
	CMDMBXIOSB	: VECTOR[2],		! Termination mailbox IOSB
	TRMMBXCHAN	: VECTOR[1,WORD],	! Termination mailbox channel
	TRMMBXEFN	: VECTOR[1],		! Termination mailbox event flag number
	TRMMBXIOSB	: VECTOR[2],		! Termination mailbox IOSB
	TRMMSGBUF	: BLOCK[ACC$K_TERMLEN,BYTE], ! Termination message buffer
	CHARBUF		: BLOCK[DIB$K_LENGTH+16,BYTE], ! Characteristics buffer
	CHARBUF_DESC	: VECTOR[2],		! Characteristics buffer desc
	FAOSTR_DESC	: VECTOR[2],		! FAO control string descriptor
	IMAGE_DESC	: VECTOR[2],		! Descriptor for image name
	PRVMSK		: VECTOR[2],		! Permanent process privileges
	GETPRIB		: VECTOR[4],		! Get process priority list
	PRIB		: LONG,			! Process priority
	EXITSTATUS	: VECTOR[1],		! Image exit status
	EXITBLOCK	: VECTOR[5];		! Exit control block

REGISTER
	STATUS		;			! Routine call status

BIND
	SUBPID		= EXITBLOCK[4];		! Subprocess ID

LABEL
	MAIN_BLOCK;				! Name of main block

!
! Zero mailbox channels and event flag numbers, and the subprocess
! ID so we can unconditionally deassign, deallocate, and delete them
! in case of a failure in the middle of execution.
!
TRMMBXCHAN = CMDMBXCHAN = TRMMBXEFN = CMDMBXEFN = SUBPID = 0;
!
! Main block of code in routine
!
STATUS =
MAIN_BLOCK:
	BEGIN

	!
	! Get current process's base priority.
	!
	GETPRIB[0] = 4 OR (JPI$_PRIB ^ 16);
	GETPRIB[1] = PRIB;
	GETPRIB[2] = GETPRIB[3] = 0;
	CKSTATUS($GETJPI(ITMLST=GETPRIB));
	!
	! Get translation of current SYS$OUTPUT logical name
	!
	OUTPUTBUF_DESC[0] = LOGNAM_SIZ;		! Initialize output
	OUTPUTBUF_DESC[1] = OUTPUTBUF;		! logical name buffer desc
	OUTPUT_DESC [0] = %CHARCOUNT ('SYS$OUTPUT');	! Name to translate
	OUTPUT_DESC [1] = UPLIT BYTE ('SYS$OUTPUT');
	DO
		BEGIN
		STATUS = $TRNLOG(LOGNAM=OUTPUT_DESC, ! Translate name
				 RSLLEN=OUTPUT_DESC[0],
				 RSLBUF=OUTPUTBUF_DESC);
		OUTPUT_DESC[1] = OUTPUTBUF;	! Set pointer to translation
		IF (.OUTPUTBUF[0] EQLU ESC) AND	! If name is RMS process
		   (.OUTPUTBUF[1] EQLU 0)	! permanent file name,
		THEN				! strip escape and IFI
			BEGIN
			OUTPUT_DESC[0] = .OUTPUT_DESC[0] - 4;
			OUTPUT_DESC[1] = .OUTPUT_DESC[1] + 4;
			END;
		END
	UNTIL NOT .STATUS OR (.STATUS EQLU SS$_NOTRAN);
	IF .STATUS NEQU SS$_NOTRAN THEN LEAVE MAIN_BLOCK WITH .STATUS;
	!
	! Create the command mailbox and get its name
	!
	CKSTATUS($CREMBX(CHAN=CMDMBXCHAN,
			 MAXMSG=256));		! Create mailbox
	CHARBUF_DESC[0] = DIB$K_LENGTH + 16;	! Initialize characteristics
	CHARBUF_DESC[1] = CHARBUF;		! buffer descriptor
	CKSTATUS($GETCHN(CHAN=.CMDMBXCHAN,	! Get mailbox characteristics
			 PRIBUF=CHARBUF_DESC));
	CMDMBXNAM_DESC[0] = LOGNAM_SIZ;		! Initialize mailbox name
	CMDMBXNAM_DESC[1] = CMDMBXNAMBUF;	! buffer descriptor
	FAOSTR_DESC[0] = %CHARCOUNT ('_!AC!UW:'); ! Device name format
	FAOSTR_DESC[1] = UPLIT BYTE ('_!AC!UW:');
	CKSTATUS($FAO(				! Format mailbox name
			FAOSTR_DESC,		! Control string descriptor
			CMDMBXNAM_DESC,		! output length address
			CMDMBXNAM_DESC,		! output buffer desc address
			(.CHARBUF[DIB$W_DEVNAMOFF] + CHARBUF),
			.CHARBUF[DIB$W_UNIT]));
	!
	! Create the termination mailbox and get its number
	!
	CKSTATUS($CREMBX(CHAN=TRMMBXCHAN));	! Create the mailbox
	CKSTATUS($GETCHN(CHAN=.TRMMBXCHAN,	! Get its characteristics
			 PRIBUF=CHARBUF_DESC));
	!
	! Declare an exit handler to delete the subprocess if we (the
	! creator) are rundown.
	!
	EXITBLOCK[1] = EXIT_HANDLER;		! Set exit handler address
	EXITBLOCK[2] = 2;			! Set argument count
	EXITBLOCK[3] = EXITSTATUS;		! Set address to store
						! exit status
	CKSTATUS($DCLEXH(DESBLK=EXITBLOCK));	! Declare exit handler
	!
	! Create the subprocess running the LOGIN image.  LOGIN will
	! initiate a command interpreter to read and execute the commands
	! we'll write in the command mailbox.
	!
	CKSTATUS($SETPRV(PRVPRV=PRVMSK,		! Get process's permanent
			 PRMFLG=1));		! privileges; don't use image's
	IMAGE_DESC[0] = %CHARCOUNT ('SYS$SYSTEM:LOGINOUT'); ! Image to run
	IMAGE_DESC[1] = UPLIT BYTE ('SYS$SYSTEM:LOGINOUT');
	CKSTATUS($CREPRC(IMAGE=IMAGE_DESC,
			 INPUT=CMDMBXNAM_DESC,
			 OUTPUT=OUTPUT_DESC,
			 ERROR=OUTPUT_DESC,
			 MBXUNT=.CHARBUF[DIB$W_UNIT],
			 PRCNAM=CMDMBXNAM_DESC,
			 PRVADR=PRVMSK,
			 BASPRI=.PRIB,
			 PIDADR=SUBPID));
	!
	! Allocate the termination EFN and the command EFN.  We need the
	! EFNs to be in the same 32 bit group so that we can form an EFN
	! mask for $WFLOR.
	!
	CKSTATUS(LIB$GET_EF(TRMMBXEFN)); ! Allocate termination event flag
	CKSTATUS(LIB$GET_EF(CMDMBXEFN)); ! Allocate command event flag
	IF (.TRMMBXEFN / 32) NEQ (.CMDMBXEFN / 32)
	THEN
	    BEGIN			! A 3rd GET_EF should find same group
	    LOCAL
		TMPMBXEFN : VECTOR[1];
	    CKSTATUS(LIB$GET_EF(TMPMBXEFN));
	    LIB$FREE_EF(TRMMBXEFN);
	    TRMMBXEFN = .TMPMBXEFN;
	    IF (.TRMMBXEFN / 32) NEQ (.CMDMBXEFN / 32)
	    THEN
		LEAVE MAIN_BLOCK WITH LIB$_INSEF;
	    END;
	EFN_MASK = (1 ^ (.TRMMBXEFN AND (32 - 1))) OR
		   (1 ^ (.CMDMBXEFN AND (32 - 1)));
	!
	! Issue a QIO request to read the termination mailbox specifying
	! the termination EFN.  If the EFN gets set, then subprocess died
	! and we have to give up.
	!
	CKSTATUS(  $QIO(CHAN=.TRMMBXCHAN,	! Issue read QIO request
			EFN=.TRMMBXEFN,
			FUNC=IO$_READLBLK,
			IOSB=TRMMBXIOSB,
			P1=TRMMSGBUF,
			P2=ACC$K_TERMLEN));
	!
	! Write the specified command strings to the command mailbox
	! so the subprocess can execute them.
	!
	INCR PARAM FROM 1 TO ACTUALCOUNT()
	DO
	    IF ACTUALPARAMETER(.PARAM) NEQ 0
	    THEN
		BEGIN
		!+
		! Check command string for invalid length.
		!-
	
		IF .(ACTUALPARAMETER(.PARAM))<0,16> GTRU 256
		THEN
		    LEAVE MAIN_BLOCK WITH LIB$_INVARG;

		CKSTATUS($QIO(	CHAN=.CMDMBXCHAN, ! Write command to mailbox
				EFN=.CMDMBXEFN,
				FUNC=IO$_WRITELBLK,
				IOSB=CMDMBXIOSB,
				P1=.(ACTUALPARAMETER(.PARAM) + 4),
				P2=.ACTUALPARAMETER(.PARAM)));
		CKSTATUS($WFLOR(EFN=.TRMMBXEFN,MASK=.EFN_MASK));
		STATUS = .CMDMBXIOSB<0,16>;	! Get completion status
		IF NOT .STATUS THEN LEAVE MAIN_BLOCK WITH .STATUS;
		END;

	!+
	! Write a final $ record to the subprocess.  This will insure that
	! the previous command didn't leave the CLI waiting for more input.
	!-

	CKSTATUS($QIO(	CHAN=.CMDMBXCHAN, ! Write to mailbox
			EFN=.CMDMBXEFN,
			FUNC=IO$_WRITELBLK,
			IOSB=CMDMBXIOSB,
			P1=UPLIT BYTE ('$'),
			P2=%CHARCOUNT ('$')));
	CKSTATUS($WFLOR(EFN=.TRMMBXEFN,MASK=.EFN_MASK));
	STATUS = .CMDMBXIOSB<0,16>;	! Get completion status
	IF NOT .STATUS THEN LEAVE MAIN_BLOCK WITH .STATUS;

	!
	! Write an End-of-File marker to command mailbox.
	!
	CKSTATUS($QIO( CHAN=.CMDMBXCHAN,	! Write EOF
			EFN=.CMDMBXEFN,
			FUNC=IO$_WRITEOF,
			IOSB=CMDMBXIOSB));
	CKSTATUS($WFLOR(EFN=.TRMMBXEFN,MASK=.EFN_MASK));
	STATUS = .CMDMBXIOSB<0,16>;
	IF NOT .STATUS THEN LEAVE MAIN_BLOCK WITH .STATUS;

	STATUS = $WAITFR(EFN=.TRMMBXEFN)	! Wait for subprocess
						! to complete
	END;
    !
    ! Cleanup everything that we used...
    !
    $DASSGN(CHAN=.CMDMBXCHAN);			! Deassign the mailbox
    $DASSGN(CHAN=.TRMMBXCHAN);			! channels
    IF .SUBPID NEQ 0
    THEN
	$DELPRC(PIDADR=SUBPID);			! Make sure subprocess
						! is stopped
    LIB$FREE_EF(CMDMBXEFN);			! Deallocate event flag
    LIB$FREE_EF(TRMMBXEFN);			! numbers
    $CANEXH(DESBLK=EXITBLOCK);			! Cancel exit handler
    IF .TRMMBXIOSB 				! If termination message,
    THEN
	    STATUS = .TRMMSGBUF[ACC$L_FINALSTS]; ! Get subprocess status
    RETURN .STATUS				! Return the status
    
    END;					! Of routine LIB$EXECUTE_CLI


ROUTINE EXIT_HANDLER(EXITSTATUS,SUBPID) : NOVALUE =
!++
! FUNCTIONAL DESCRIPTION:
!
!	EXIT_HANDLER is called as an image exit handler when the
!	current process is rundown.  Its only function is to delete
!	the subprocess.
!
! INPUTS:
!
!	EXITSTATUS		- Address of exit status.
!
!	SUBPID			- Subprocess ID.
!
! OUTPUTS:
!
!	Subprocess deleted.
!
!--
BEGIN
    IF .SUBPID NEQ 0				! If process created
    THEN
	$DELPRC(PIDADR=SUBPID)			! Delete the subprocess
END;


END						! End of module LIB$EXECUTE_CLI

ELUDOM
