	.title	callimage	Merge and call image
	.ident	'V03-000'
	.sbttl	copyright notice
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
	.page
	.sbttl	Program description
;
;   Facility
;
;	LIB$CALL_IMAGE
;
;   Abstract
;
;	This procedure merges a specified image into the P0
;	region and calls it at its transfer address.  On return
;	from the image, this procedure exits with the final
;	status from the image.  This procedure may be called
;	more than once for the same image since the images will
;	be retained in memory and simply re-entered on subseqeuent
;	calls.  The image must be PIC and re-entrant.
;
;   Environment
;
;	Native mode, User mode, Shared library routines
;
;   Author
;
;	Tim Halvorsen, February 1980
;
;   Modified by
;
;	V02-004	LJK0062		Lawrence J. Kenah	10-Sep-1981
;		Add call to perform activation time address relocation.
;
;	V02-003 ROW38534	Ralph O. Weber		 9-JUL-1981
;		Correct missuse of string descriptor length field in
;		ADD_MAPPED.
;
;	V02-002	MHB0071		Mark H. Bramhall	 3-Dec-1980
;		Avoid clobbering R2/R3 in SEARCH_MAPPED.
;
;	V02-001	MHB0064		Mark H. Bramhall	16-Sep-1980
;		Reference length of descriptors as words, not longwords.
;
;--

	.sbttl	Symbol Definitions

;
;	Symbol Defintions
;
	$ihddef				; image header definitions
	$ihadef				; image activation transfer array
	$iacdef				; image activator flags

	.sbttl	Storage definitions

	.psect	_lib$data,noexe,wrt,pic
;
;	Writable storage definitions
;
list_head:
	.long	0			; initialize list head to empty

	.psect	_lib$code,exe,nowrt,pic,shr

	.sbttl	lib$call_image
;---
;
;	This procedure merges a specified image into the P0
;	region and calls it at its transfer address.  On return
;	from the image, this procedure exits with the final
;	status from the image.  This procedure may be called
;	more than once for the same image since the images will
;	be retained in memory and simply re-entered on subseqeuent
;	calls.  The image must be PIC and re-entrant.
;
; Inputs:
;
;	04(ap) = Address of descriptor of image file specification
;	08(ap) = Address of descriptor of default file specification
;	12(ap) = Address of argument list to image (passed to image
;			as the 7th argument -- 28(ap))
;
; Outputs:
;
;	r0 = Status returned by image or by $IMGACT
;
;---
	.enabl	lsb

	.entry	lib$call_image,-
		^m<r2,r3,r4,r5,r6,r7,r8,r9,r10,r11>

	movab	list_head,r10		; r10 = Address of section list head
	ifnord	#8,@4(ap),accvio	; branch if unable to read descriptor
	movq	@4(ap),r2		; get descriptor of image name
	movzwl	r2,r2			;  and isolate length from it
	ifrd	r2,(r3),10$		; branch if have read access
accvio:	movzwl	#ss$_accvio,r0		; cannot access descriptor
	ret

10$:	bsbw	search_mapped		; search mapped image list
	blbs	r0,20$			; if found, don't map it
;
;	this is the first time we have invoked this image.
;	merge the image into existing p0 address space.
;
	ifnord	#8,@8(ap),accvio	; branch if unable to read descriptor
	movq	@8(ap),-(sp)		; put default descriptor on stack
	movq	r2,-(sp)		; put input descriptor on stack
	movq	#1,-(sp)		; specify p0 region
	movl	#512,r1			; length of image activator work area
	bsbw	allocate		; allocate a page for it
	movl	r0,r7			; save address of work area
	movl	sp,r1			; get address of stack
	$imgact_s name=8(r1),-		; merge image into address space
		dflnam=16(r1),-		; using supplied default as default
		hdrbuf=(r7),-		; address of work area
		imgctl=#iac$m_merge!iac$m_expreg,- ; merge into region
		inadr=(r1),-		; address range to map into
		retadr=(r1)		; address to return range to
	blbc	r0,maperr		; branch if error
	$imgfix_s			; perform address relocation
	blbc	r0,maperr		; quit if error occurred
	movq	(r7),r8			; r8 = address of ihd (header desc)
					; r9 = address of ifd (file desc)
	movzwl	ihd$w_activoff(r8),r0	; get offset to activation data
	movab	iha$l_tfradr1(r8)[r0],r1 ; address of transfer address array
	bsbb	add_mapped		; add to mapped image list
	addl	#24,sp			; deallocate descriptors
;
;	call the image
;
20$:	movq	(r7),r8			; address of ihd (image header desc)
	movzwl	ihd$w_activoff(r8),r0	; get offset to activation data
	movab	iha$l_tfradr1(r8)[r0],r1 ; address of transfer address array
	pushl	fp			; save FP from destruction
	pushl	12(ap)			; address of user argument list
	pushl	#0			; no cli option flags
	pushl	ihd$l_lnkflags(r8)	; pass thru link option flags
	movq	r8,-(sp)		; address of ihd and ifd
	pushab	b^clicallback		; address of dummy call back routine
	pushl	r1			; address of transfer address array
	calls	#7,@(r1)		; call native mode code
	popl	fp			; restore saved frame pointer
	ret

;
;	error from $imgact call - map to ie.nsf (no such file)
;
maperr:	pushl	r0			; save status over deallocate
	movl	r7,r0			; address of work page
	movl	#512,r1			; length of work page
	bsbw	deallocate		; deallocate it
	popl	r0			; restore status
	ret

;
; dummy cli call back routine
;
clicallback:
	.word	0
	clrl	r0			; return failure
	ret

	.dsabl	lsb

	.sbttl	search_mapped	Search mapped image list
;---
;
;	This routine searches the mapped image list to
;	determine if the image has already been mapped
;
; Inputs:
;
;	r2/r3 = Descriptor of image file specification
;	r10 = Address of mapped image list head
;
; Outputs:
;
;	r0 = true if already in memory
;	if found, r7 = address of imgact work page
;
;---
search_mapped:
	movl	(r10),r7		; address of first entry
10$:	beql	50$			; branch if not found
	movzbl	8(r7),r0		; length of string name
	pushr	#^m<r2,r3>		; save registers
	cmpc5	r0,9(r7),#0,r2,(r3)	; string match?
	popr	#^m<r2,r3>		; restore registers
	beql	20$			; branch if found
	movl	(r7),r7			; next entry in list
	brb	10$			; and continue searching
20$:	movl	4(r7),r7		; return address of imgact work page
	movl	#1,r0			; success
	rsb
50$:	clrl	r0			; failure
	rsb

	.sbttl	add_mapped	Add to mapped image list
;---
;
;	Add the image just mapped to the mapped image list
;
; Inputs:
;
;	r2/r3 = Descriptor of image file specification
;	r7 = Address of imgact work page
;	r10 = Address of mapped image list head
;
; Outputs:
;
;	None
;
;---
add_mapped:
	pushr	#^m<r1,r2,r3>		; save address, descriptor
	movzwl	r2,r1			; extract image name length
	addl	#9,r1			; compute list entry length
	bsbw	allocate		; allocate memory
	popr	#^m<r1,r2,r3>		; restore address, descriptor
	movl	(r10),(r0)		; insert into list
	movl	r0,(r10)
	movl	r7,4(r0)		; store address of imgact work page
	movb	r2,8(r0)		; store length of counted string
	pushr	#^m<r1,r2,r3,r4,r5>	; save registers
	movc	r2,(r3),9(r0)		; store string itself
	popr	#^m<r1,r2,r3,r4,r5>	; restore registers
	rsb

	.sbttl	allocate	Allocate virtual memory
;---
;
;	Allocate virtual memory
;
; Inputs:
;
;	r1 = Number of bytes to allocate
;
; Outputs:
;
;	r0 = Address of allocated storage
;
;	If error obtaining memory, a RET is performed with the status
;---
allocate:
	pushl	r1			; Get length onto stack
	pushal	-(sp)			; Address of lw to put address
	pushab	8(sp)			; Address of lw containing length
	calls	#2,g^lib$get_vm		; Obtain virtual memory
	blbc	r0,90$			; branch if error
	movq	(sp)+,r0		; Return address of memory
	rsb
90$:	ret

	.sbttl	deallocate	Deallocate virtual memory
;---
;
;	Deallocate virtual memory
;
; Inputs:
;
;	r0 = Address of memory to deallocate
;	r1 = Number of bytes to deallocate
;
; Outputs:
;
;	If error detected, a RET is performed with the status
;
;---
deallocate:
	movq	r0,-(sp)		; put parameters on stack
	pushl	sp			; address of lw containing address
	pushab	8(sp)			; address of lw containing length
	calls	#4,g^lib$free_vm	; deallocate virtual memory
	blbc	r0,90$			; branch if error
	rsb
90$:	ret				; return with status


	.end
