; SRMDEF.MDL - system definitions for System Reference Manual
;
;	Version 'V03-000'
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************

;++
;
; FACILITY:  VAX/VMS System Macro Libraries
;
; ABSTRACT:
;
;	This file contains the MDL source for the System Reference
;	Manual (SRM) structure definitions.
;
; ENVIRONMENT:
;
;	n/a
;
;--
;
;
; AUTHOR:  The VMS Group	 CREATION DATE:  1-Aug-1976
;
; MODIFICATION HISTORY:
;
;	2-010	FM2010		Farokh Morshed		1-DEC-1981
;		Add DSC$K_DTYPE_VT.
;	2-009	SBL2009		Steven B. Lionel	26-Aug-1981
;		Update to Rev. 9.
;	2-008	SBL2008		Steven B. Lionel	20-Aug-1981
;		Add missing DSC$L_POS.
;	2-007	SBL2007		Steven B. Lionel	14-Jan-1981
;		Update to Rev. 8.0 (7-Oct-80).
;	2-006	SBL2006		Steven B. Lionel	8-Sept-1980
;		Update to Rev. 7.5 (20-June-80).
; 2-005 - SBL2005 - Update to Rev. 6 (30-Oct-1979).  SBL 31-Dec-1979
; 2-004 - SBL2004 - Make DSC$B_SCALE signed.  SBL 10-August-1979
; 2-003 - SBL2003 - Add SRM$K symbols for floating faults.  SBL 20-July-1979
; 2-002 - SBL2002 - Update to Rev. 5.2 (25-Apr-79).  SBL 4-Jun-1979
; 2-001 - Added new descriptor datatypes from Appendix C Rev 5.
;	  Steven B. Lionel 1-Feb-79


; VAX Procedure Calling symbols.
; These symbols are taken from Appendix C of the VAX-11
; System Reference Manual which is under ECO control. No
; additions to this file cannot be made without first getting
; formal ECO approval to Appendix C of the SRM.
; No symbols should be removed or changed without careful
; evaluation of the effects of such changes on existing software.
; In case of disagreement, SRM Appendix C takes precedence
; over this file.
; These symbols are taken from Appendix C Rev 9.0


	$STRUCT	DSC		; prefix DSC$_


; Define Procedure argument data types

;   C.9  ARGUMENT DATA TYPES

;   The following encoding is used for atomic data elements:

;         Mnemonic    Code    Description

	K DTYPE_Z,0	; Unspecified.   The  calling   program   has
			; specified   no   data   type;   the  called
			; procedure should assume the argument is  of
			; the correct type.

	K DTYPE_V,1     ; Bit.  An aligned bit string.

	K DTYPE_BU,2	; Byte Logical.  8-bit unsigned quantity.

	K DTYPE_WU,3	; Word Logical.  16-bit unsigned quantity.

	K DTYPE_LU,4	; Longword    Logical.     32-bit    unsigned
			; quantity.

	K DTYPE_QU,5	; Quadword    Logical.     64-bit    unsigned
			; quantity.

	K DTYPE_OU,25	; Octaword   Logical.     128-bit    unsigned
			; quantity.

	K DTYPE_B,6	; Byte Integer.  8-bit signed  2's-complement
			; integer.

	K DTYPE_W,7 	; Word Integer.  16-bit signed 2's-complement
			; integer.

	K DTYPE_L,8	; Longword    Integer.       32-bit signed
			; 2's-complement integer.

	K DTYPE_Q,9	; Quadword    Integer.      64-bit     signed
			; 2's-complement integer.

	K DTYPE_O,26	; Octaword    Integer.     128-bit     signed
			; 2's-complement integer.

	K DTYPE_F,10	; F_floating.  32-bit F_floating quantity representing
			; a single-precision number.

	K DTYPE_D,11	; D_floating.  64-bit D_floating quantity representing
			; a double-precision number.

	K DTYPE_G,27	; G_floating.  64-bit G_floating quantity representing
			; a double-precision number.

	K DTYPE_H,28	; H_floating.  128-bit H_floating quantity representing
			; a quadruple-precision number.

	K DTYPE_FC,12	; F_floating complex.  Ordered pair of F_floating 
			; quantities representing a single-precision complex
			; number.  The lower addressed quantity is the
			; real part, the  higher addressed quantity is the 
			; imaginary part.

	K DTYPE_DC,13	; D_floating complex.  Ordered pair of D_floating 
			; quantities representing a double-precision complex
			; number.  The lower addressed quantity is the
			; real part, the  higher addressed quantity is the 
			; imaginary part.

	K DTYPE_GC,29	; G_floating complex.  Ordered pair of G_floating 
			; quantities representing a double-precision complex
			; number.  The lower addressed quantity is the
			; real part, the  higher addressed quantity is the 
			; imaginary part.

	K DTYPE_HC,30	; H_floating complex.  Ordered pair of H_floating 
			; quantities representing a quadruple-precision complex
			; number.  The lower addressed quantity is the
			; real part, the  higher addressed quantity is the 
			; imaginary part.

	K DTYPE_CIT,31	; COBOL Intermediate Temporary.  Floating point
			; datum with an 18 digit normalized decimal
			; fraction and a 2 digit decimal exponent.  The
			; fraction is represented as a packed decimal
			; number.  The exponent is represented as a
			; 16-bit 2's complement integer.  A detailed
			; description of this data type can be found in
			; Section 7.4 of SRM Appendix C.

	K DTYPE_VU,34	; Bit Unaligned.

;  The following string  types  are  ordinarily  described  by  a  string
;  descriptor.  The data type codes below occur in those descriptors:
  
	K DTYPE_T,14	; Character-coded text.  A single 8-bit character
			; (atomic data type) or a sequence of 0 to
			; 2**16-1 8-bit characters (string data type).
  
	K DTYPE_VT,37	; Varying Character-coded Text Data Type.

	K DTYPE_NU,15	; Numeric string, unsigned.
  
	K DTYPE_NL,16	; Numeric string, left separate sign.
  
	K DTYPE_NLO,17	; Numeric string, left overpunched sign.
  
	K DTYPE_NR,18   ; Numeric string, right separate sign.
  
	K DTYPE_NRO,19	; Numeric string, right overpunched sign.
  
	K DTYPE_NZ,20	; Numeric string, zoned sign.
  
	K DTYPE_P,21    ; Packed decimal string.
  
; The following encodings are used for miscellaneous data types:

	K DTYPE_ZI,22	; Sequence of instructions.
  
	K DTYPE_ZEM,23	; Procedure entry mask.

	K DTYPE_DSC,24	; Descriptor.  This data type allows a descriptor
			; to be an argument data type, thereby allowing
			; the use of levels of descriptors.

	K DTYPE_BPV,32	; Bound Procedure Value.  A two longword entity
			; in which the first longword contains the address
			; of a procedure entry mask and the second longword
			; contains the environment value.  The environmeent
			; value is determined in a language specific
			; fashion when the original Bound Procedure Value
			; is generated.  When the bound procedure is
			; invoked, the calling program loads the second
			; longword into R1.  This data type can be passed
			; using the immediate value mechanism when the
			; environment value is not needed.  In this case
			; the argument list entry contains the address of
			; the procedure entry mask and the second longword
			; is omitted.

	K DTYPE_BLV,33	; Bound label value.

	K DTYPE_ADT,35	; Absolute Date and Time

;	K DTYPE_???,36	; DTYPE code 36 is reserved for future definition

; The following types are used by the VAX/VMS Debug Facility:  \FOR
; INTERNAL DOCUMENTATION ONLY.  For details, see VAX/VMS Debug Facility
; Documentation.\

	K DTYPE_CAD,178 ; Address calculation command
	K DTYPE_ENT,179 ; Entry global definition
	K DTYPE_GBL,180 ; Global symbol definition
	K DTYPE_EPT,181	; Entry point to routine.
	K DTYPE_R11,182	; Line number relative to R11 correlation
			; table.
	K DTYPE_FLD,183	; BLISS FIELD name.

	K DTYPE_PCT,184	; PSECT information.

	K DTYPE_DPC,185	; PC correlation table for FORTRAN IV+

	K DTYPE_LBL,186	; LITERAL or LABEL

	K DTYPE_SLB,187	; Label in non-assembly language modules

	K DTYPE_MOD,188	; Beginning of new module

	K DTYPE_EOM,189	; End of module

	K DTYPE_RTN,190	; Beginning of new routine

	K DTYPE_EOR,191	; End of routine

;   The following type codes are RESERVED for future use:


;                     37-177  RESERVED to DEC
;                     192-255  RESERVED to CSS and customers
	; C.10  ARGUMENT DESCRIPTORS

	; A uniform descriptor mechanism is defined for use  by  all  procedures
	; which  conform  to this standard.  Descriptors are uniformly typed and
	; the mechanism is extensible.  As new varieties  of  descriptor  become
	; necessary, they will be added to this catalogue.

	; Note:
	;
	; All fields represent unsigned quantities unless explicitly stated
	; otherwise.


	; C.10.1  Descriptor Prototype

	; Each class of descriptor consists of  at  least  2  longwords  in  the
	; following format:

	;      +-------+-------+---------------+
	;      | CLASS | DTYPE |    LENGTH     |  :Descriptor
	;      +-------+-------+---------------+
	;      |            POINTER            | 
	;      +-------------------------------+

	;      DSC$W_LENGTH   A one-word field specific to the descriptor 
	;      <0,15:0>       class;  typically a 16-bit (unsigned) length.
	; 
	;      DSC$B_DTYPE    A one-byte atomic data type code (see C.9)
	;      <0,23:16>
	; 
	;      DSC$B_CLASS    A one-byte descriptor class code (see below)
	;      <0,31:24>
	; 
	;      DSC$A_POINTER  A longword pointing to the first byte of the
	;      <1,31:0>       data element described.

	; Note that the descriptor can be placed in a pair of registers  with  a
	; MOVQ  instruction and then the length and address used directly.  This
	; gives a word length, so the class and type are placed as bytes in  the
	; rest  of that longword.  Class 0 is unspecified and hence no more than
	; the above information can be assumed.

	; Define the descriptor class codes;

	K CLASS_Z,0	; Unspecified
	K CLASS_S,1	; Scalar, String Descriptor
	K CLASS_D,2	; Dynamic String Descriptor
	K CLASS_V,3	; Reserved for use by Digital
	K CLASS_A,4	; Array Descriptor 
	K CLASS_P,5	; Procedure Descriptor
	K CLASS_PI,6	; Procedure Incarnation Descriptor
	K CLASS_J,7	; Reserved for use by Digital
	K CLASS_JI,8	; Obsolete
	K CLASS_SD,9	; Decimal Scalar String Descriptor
	K CLASS_NCA,10	; Non-contiguous Array Descriptor
	K CLASS_VS,11	; Varying String Descriptor
	K CLASS_VSA,12	; Varying String Array Descriptor
	K CLASS_UBS,13	; Unaligned Bit String Descriptor
	K CLASS_UBA,14	; Unaligned Bit Array Descriptor

; The following descriptor class is FOR INTERNAL USE ONLY by the VAX
; Common Run-Time Library and Debugger.  This descriptor is not passed
; between separately compiled modules.  For further information, see
; VAX-11 BASIC Description of Generated Code, Software Document
; Retrieval Number JBS-79-004.

	K CLASS_BFA,191	; BASIC File Array Descriptor


	; Descriptor classes 15-190 are RESERVED to DEC.  Classes
	; 192 through 255 are RESERVED to CSS and customers.

;   Array Descriptor (DSC$K_CLASS_A)

;  An array descriptor consists of 3 contiguous blocks. The first block
;  contains  the  descriptor  prototype  information and is part of every
;  array descriptor.  The second and third blocks are optional.   If  the
;  third block is present then so is the second.

;   A complete array descriptor has the form:

;       +-------+-------+---------------+
;       |   4   | DTYPE |    LENGTH     |  :Descriptor
;       +-------+-------+---------------+
;       |            POINTER            |
;       +-------+-------+---------------+
;       | DIMCT | AFLAGS|DIGITS | SCALE |          Block 1 - Prototype
;       +-------+-------+---------------+
;       |            ARSIZE             |
;       +-------------------------------+
;  
;       +-------------------------------+
;       |              A0               |
;       +-------------------------------+
;       |              M1               |
;       +-------------------------------+
;       |              ...              |          Block 2 - Multipliers
;       +-------------------------------+
;       |            M(n-1)             |
;       +-------------------------------+
;       |              Mn               |
;       +-------------------------------+
;  
;       +-------------------------------+
;       |              L1               |
;       +-------------------------------+
;       |              U1               |
;       +-------------------------------+
;       |              ...              |          Block 3 - Bounds
;       +-------------------------------+
;       |              Ln               |
;       +-------------------------------+
;       |              Un               |
;       +-------------------------------+
;  
;  
	;Define descriptor fields:

	; \The following three fields are only valid for descriptor
	; class DSC$K_CLASS_BFA (see above). \

	-F HANDLE,A	; The address of a vector of data concerning the
			; current state of processing of the array.  This
			; is set to zero by the creator of the 
			; descriptor, and maintained thereafter by the
			; BASIC file array processing functions.

	-F BYTEOFF,L	; Byte offset in the file of element 0,0,...,0
			; of the array.  This need not be within the
			; array, or even within the file if the array
			; does not have zero origin.

	-F LOGUNIT,L	; The logical unit number (BASIC channel) on
			; which the file containing the array has
			; been opened.  This is set by the creator of the
			; descriptor before first referencing the array.

; End of BASIC File Array specific descriptor fields.  The remaining
; fields are common to all array descriptors.

	M 1		; Mark for first byte

	F LENGTH,W	; A one-word field specifiec to the descriptor class;
			; typically a 16-bit (unsigned) length.

	P 1		; Go back to first byte

	F MAXSTRLEN,W	; Max length of the BODY field of the varying string
			; in bytes in the range 0 to 2**16-1.
			; (Classes VS, VSA)

	F DTYPE,B	; A one-byte atomic data type code (see C.9)
			; Symbols used in this filed have form: DSC$K_DTYPE_t
			; where t is the data type mnemonic from above
			; and agrees with methodology manual.

	F CLASS,B	; A one-byte descriptor class code (see above).
			; Symbols used in this field have form: DSC$K_CLASS_f
			; where f is the argument form mnemonic from above
			; and agrees with the methodology manual.

	M 1		; Mark for pointer

	F POINTER,A	; A longword pointing to the first byte of the data
			; element described.

	P 1		; Go back to pointer

	F BASE,A	; Base of address relative to which the signed relative
			; bit position, POS, is used to locate the bit string.
			; (Classes UBS and UBA)

	L Z_BLN		; Block length in bytes for Z class desc.
	L S_BLN		; Block length in bytes for S class descr.
	L D_BLN		; Block length in bytes for D class descr.
	L P_BLN		; Block length in bytes for P class descr.
	L J_BLN		; Block length in bytes for J class descr.
	L VS_BLN	; Block length in bytes for VS class descr.

;+
; End of common definitions for all descriptors.
;-

	M 1		; Mark end of common part

;+
; Unaligned bit string definitions.
;-

	P 1		; Begin at end of common part

	F POS,L		; Signed longword relative bit position
			; with respect to BASE of the first bit
			; of unaligned bit string
			; WARNING!!  Do not use this symbol to reference
			; class UBA descriptors!  The DSC$L_POS in that
			; descriptor is at a variable location after the
			; bounds and multiplier blocks.
	L UBS_BLN	; Block length in bytes for UBS class descr.

;+
; Varying type descriptor definitions
;-

	P 1		; Begin at end of common part

	F MAXLEN,W	; An unsigned word specifying the
			; maximum length of the data item
			; (i.e., the space allocated)
	F ,W		; reserved word


;+
; Array Descriptor definitions
;-

	P 1		; go back to end of common descriptor definitions
	F SCALE,B,1,S	; Signed power of ten multiplier to convert the
			; internal form to external form.  For example,
			; if internal number is 123 and scale is +1,
			; then the represented external number is 1230.

	F DIGITS,B	; If non-zero, unsigned number of decimal
			; digits in the external representation.  If
			; zero, the number of digits can be computed
			; based on DSC$W_LENGTH.

	F AFLAGS,B	; Array flag bits.

		V<
		,4		; reserved to Digital
		FL_REDIM,1	; If set, the array can be redimensioned;
				; i.e., DSC$A_A0, DSC$L_Mi, DSC$L_Li, and
				; DSC$L_Ui may be changed.  The redimensioned
				; array cannot exceed the size allocated to
				; the array (i.e. DSC$L_ARSIZE).
		FL_COLUMN,1	; If set, the elements of the array are
				; stored by columns (FORTRAN)>  Otherwise
				; the elements are stored by rows.

		FL_COEFF,1	; If set, the multiplicative coefficients in
				; Block 2 are present.

		FL_BOUNDS,1	; If set, the bounds information in Block 3
				; is present.
		>

	F DIMCT,B	; Number of dimensions

	L SD_BLN	; Block length in bytes for SD class descr.

	F ARSIZE,L	; Total size of array (in bytes unless DTYPE is
			; EQUL DSC$K_DTYPE_V or DSC$K_DTYPE_P).

	M 3		; Mark for A0

	F A0,A		; Address of element A(0,0,...,0). This
			; need not be within the actual array; it
			; is the same as DSC$A_POINTER for 0-origin
				; arrays.

	P 3		; Point to A0

	F V0,L		; Signed bit offset of element A(0,0,...0) with
			; respect to BASE.  (Class UBA)

	M 2		; Mark for M1..Mi and S1...Si

; The following two fields have meaning only if the array is of
; class DSC$K_CLASS_NCA (Non-contiguous array).

	F S1,L		; Stride of the first dimension, i.e. the
			; difference between the addresses of
			; successive elements of the first dimension.

	F S2,L		; Stride of the second dimension.

	P 2		; Point back to position for DSC$K_CLASS_A.

	F M1,L		; Addressing coefficient M1 = U1-L1+1
	F M2,L		; Addressing coefficient M2 = U2-L2+1

;+
; Procedure Incarnation descriptor (DSC$K_CLASS_PI) and
; Label Incarnation descriptor (DSC$K_CLASS_JI).
;-

	P 1		; go back to end of common descriptor definitions.
	F FRAME,A	; Address of frame

	L PI_BLN	; Block length in bytes for PI class descr.
	L JI_BLN		; block length in bytes for JI class descr.



	E		; end Descriptor definitions




;+
; Define SRM Hardware symbols
;-

	$STRUCT	SRM

	K INT_OVF_T,1		; Integer overflow trap code
	K INT_DIV_T,2		; Integer divide by zero trap code
	K FLT_OVF_T,3		; Floating overflow trap code
	K FLT_DIV_T,4		; Floating/decimal Divide by zero trap code
	K FLT_UND_T,5		; Floating Underflow trap code
	K DEC_OVF_T,6		; Decimal string overflow trap code
	K SUB_RNG_T,7		; Subscript range trap
	K FLT_OVF_F,8		; Floating Overflow fault code
	K FLT_DIV_F,9		; Floating Divide by zero fault code
	K FLT_UND_F,10		; Floating Underflow fault code


	E			; End of SRM$ symbols




;+
; Define PSW bits (STARDEF.MDL has PSL bits)
;-

	$STRUCT PSW

	V <M
		C,1	; carry
		V,1	; overflow
		Z,1	; zero
		N,1	; negative
		TBIT,1	; trace trap enable
		IV,1	; integer overflow enable
		FU,1	; floating underflow enable
		DV,1	; decimal overflow enable
	>
	E			; End of PSW$ symbols





;+
; Define stack frame offsets as a separate structure SF$
;-

	$STRUCT SF

	F HANDLER, A		; Adr. of handler or 0 if no handler
	F SAVE_PSW, W		; saved PSW
	V <M
		C,1	; carry
		V,1	; overflow
		Z,1	; zero
		N,1	; negative
		TBIT,1	; trace trap enable
		IV,1	; integer overflow enable
		FU,1	; floating underflow enable
		DV,1	; decimal overflow enable
	>
	F SAVE_MASK, W		; saved register mask plus flags
	V <			; define each field
		SAVE_MASK,12	; register save mask
		,1		; MBZ
		CALLS,1		; 1 if CALLS
		STACKOFFS,2	; SP offset
	>
	F SAVE_AP, L		; saved AP
	F SAVE_FP, L		; saved FP
	F SAVE_PC, L		; saved PC
	F SAVE_REGS, L		; first register saved is saved here

	E			; End of SF$ symbols
