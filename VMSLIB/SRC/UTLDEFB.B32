!	Version 'V03-000'
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!++
!
! UTLDEF.B32 - UTILITY DEFINITION MACROS FOR BLISS PROCESSING
! OF STARLET DEFINITION MACROS.
!
! MODIFIED BY:
!
!	V02-002	BLS0130		Benn Schreiber	 2-Jan-1982
!		Add $shr_msgdef macro to define facility-specific shared
!		messages.  Add $bblock structure definition.
!
!	V02-001	MLJ0009		Martin L. Jack,	12-Mar-1981  8:52
!		Change $DESCRIPTOR to accept a list of strings that will be
!		concatenated.
!
!--

!
! MACROS TO EXTRACT OFFSETS, FIELD WIDTHS, ETC., FROM FIELD EXTRACTION MACROS.
!

MACRO	$BYTEOFFSET (OFFSET, POSITION, WIDTH, SIGN) = OFFSET%;

MACRO	$BITPOSITION (OFFSET, POSITION, WIDTH, SIGN) = POSITION%;

MACRO	$FIELDWIDTH (OFFSET, POSITION, WIDTH, SIGN) = WIDTH%;

MACRO	$EXTENSION (OFFSET, POSITION, WIDTH, SIGN) = SIGN%;

MACRO	$FIELDMASK (OFFSET, POSITION, WIDTH, SIGN) =
	(1^(POSITION+WIDTH) - 1^POSITION)%;

!
! MACRO TO GENERATE EQULST CONSTRUCTS.
!
MACRO
	$EQULST(P,G,I,S)[A]=
	    %NAME(P,GET1ST_ A) =
		%IF NUL2ND_ A
		%THEN (I) + %COUNT*(S)	! ASSUMES I, S ALWAYS GENERATED BY CONVERSION PROGRAM
		%ELSE GET2ND_ A
		%FI %,

	GET1ST_(A,B)=
	     A %,
	GET2ND_(A,B)=
	     B %,	! KNOWN NON-NULL
	NUL2ND_(A,B)=
	     %NULL(B) %;

!
! MACRO TO GENERATE A STRING DESCRIPTOR PLIT
!

MACRO
	$DESCRIPTOR[]= 
		UPLIT(%CHARCOUNT(%REMAINING),UPLIT BYTE(%REMAINING))%;
!
! $SHR_MSGDEF - a macro which defines facility-specific message codes
!	which are based on the system-wide shared message codes.
!
!	$SHR_MSGDEF( name, code, scope, (msg,severity), ... )
!
!	where:
!		name	is the name of the facility (e.g., COPY)
!		code	is the corresponding facility code (e.g., 103)
!		scope	is GLOBAL for global definitions (anything else gets
!					LOCAL)
!		msg	is the name of the shared message (e.g., BEGIN)
!		severity is the desired message severity (e.g., 1, 0, 2, or
!					WARNING, SUCCESS, INFO, ERROR, SEVERE)
!

MACRO
    $SHR_MSGDEF( FACILITY_NAME, FACILITY_CODE, SCOPE) =
	%IF %IDENTICAL(%STRING(SCOPE),'GLOBAL')
	    %THEN GLOBAL LITERAL
	$SHR_MSGIDS( FACILITY_NAME, FACILITY_CODE, %REMAINING );
	    %ELSE LITERAL
	$SHR_MSGIDS( FACILITY_NAME, FACILITY_CODE, %REMAINING );
	%FI%,

    $SHR_MSGIDS( FACILITY_NAME, FACILITY_CODE) [ VALUE ] =
	$SHR_MSGCALC( FACILITY_NAME, FACILITY_CODE, %REMOVE(VALUE) ) %,

    $SHR_MSGCALC( FACILITY_NAME, FACILITY_CODE, MSG_ID, SEVERITY ) =
	%NAME(FACILITY_NAME,'$_',MSG_ID) = %NAME('SHR$_',MSG_ID) + FACILITY_CODE*65536 +
	    %IF %DECLARED(%NAME('STS$K_',SEVERITY))
		%THEN %NAME('STS$K_',SEVERITY)
		%ELSE SEVERITY %FI %;
!
! Define VMS block structures (equivalent to BLOCK[,BYTE])
!
STRUCTURE
	$BBLOCK [O, P, S, E; N] =
		[N]
		($BBLOCK+O)<P,S,E>;
