MODULE libacp (IDENT = 'V03-000') =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY:  File system utility routines
!
! ABSTRACT:
!
!	This module contains routines to manipulate the
!	information in file headers.
!
! ENVIRONMENT:
!
!	VAX/VMS operating system. unprivileged user mode,
!
! AUTHOR:  Tim Halvorsen, Oct 1979
!
! Modified by:
!
!	V02-014	MLJ0066		Martin L. Jack,	31-Dec-1981  9:51
!		Split most routines out into separate modules.  Correct
!		errors in LIB$SET_ERASE.
!
!	V02-013	SHZ0001		Stephen H. Zalewski,	11-Dec-1981  16:53
!		Fixed LIB$FID_TO_NAME so that it does a $GETDVI for LOGVOLNAM.
!		Also added code to insert a question mark into directory
!		structure if the backlinks teminated other than at MFD.
!
!	V012	GRR2012		Greg Robert	16-Nov-1981
!		Return SS$_NONLOCAL when node specified in create
!		directory or set protection operations.
!
!	V011	TMH0011		Tim Halvorsen	20-Aug-1981
!		Fix missing colon in resultant string from LIB$FID_TO_NAME.
!
!	V02-010	MLJ0028		Martin L. Jack,	8-Jul-1981  19:05
!		Extend comparisons on FID$W_NUM to include FID$B_NMX.
!		Clean up illegal up-level reference to NULLPARAMETER.
!
!	V009	GRR2009		Greg Robert	15-Jun-1981
!		Utilized extended name block features to parse
!		input name and to prevent calling ASSIGN system
!		service with device name longer than 63 characters.
!
!	V008	TMH0008		Tim Halvorsen	12-Mar-1981
!		Accept parameters to FID_TO_NAME as descriptors
!		rather than vectors.
!
!	V007	TMH0007		Tim Halvorsen	27-Feb-1981
!		In FID_TO_NAME, if RVN of backlink is zero,
!		use RVN of file itself (RVN=0 is shorthand
!		for "same volume").  Reference RTL routines
!		with general addressing mode.
!
!	V02-006	ACG0184		Andrew C. Goldstein,	14-Jan-1981  11:01
!		Add LIB$SET_ERASE, temporary implementation
!
!	V005	KRM0004		Karl Malik	14-Jan-1981
!		Modified LIB$CHECK_DIR to recognize network
!		directory filespecs.
!
!	V004	TMH0004		Tim Halvorsen	05-Jan-1981
!		Fix LIB$FID_TO_NAME to work even though the backlinks
!		may point to an unknown file.
!
!	003	TMH0003		Tim Halvorsen	17-Mar-1980
!		Add LIB$FID_TO_NAME routine.
!
!	002	TMH0002		Tim Halvorsen	10-Mar-1980
!		Drop delete access for all access modes when propagating
!		protection from parent (because MFD has standard file
!		protection on inited volume including delete access, but
!		is protected from deletion by special check in ACP).
!
!	001	TMH0001		Tim Halvorsen	28-Jan-1980
!		Support UIC format creation of directories.  Rearrange
!		code so that illegal expanded name string won't leave
!		the channel assigned.  Use protection of parent directory
!		rather than process default protection on created directory.
!--

!
! Include files
!

LIBRARY 'SYS$LIBRARY:LIB.L32';		! VMS system definitions

!
! Table of contents
!

FORWARD ROUTINE
	lib$check_dir,			! Check if directory file
	lib$set_erase,			! Mark file for erase-on-delete
	setup_fib;			! Common FIB initialization routine

!
! Define BBLOCK = BLOCK[,BYTE]
!

STRUCTURE
	BBLOCK [O, P, S, E; N] =
		[N]
		(BBLOCK+O)<P,S,E>;

!
! Define various literal values
!

LITERAL
    true	= 1,			! Boolean true
    false	= 0;			! Boolean false

!
! External routines
!

EXTERNAL ROUTINE
    lib$get_vm: ADDRESSING_MODE(GENERAL),	! Virtual memory allocation
    lib$free_vm: ADDRESSING_MODE(GENERAL);	! Free virtual memory

!
! $FAB_DEV - macro to access FAB$L_DEV bits of FAB block.
!

MACRO
    $fab_dev(dev_bit) =
	$BYTEOFFSET(fab$l_dev),
	$BITPOSITION(%NAME('dev$v_',dev_bit)),1,0%;

!
! DESCRIPTOR - define descriptor of static string
!

MACRO
    descriptor(string) =
	UPLIT(%CHARCOUNT(string),UPLIT BYTE (string))%;

!
! Define macros to check status
!

MACRO
    check_io =
	BEGIN
	IF .status				! If submitted ok,
	THEN
	    status = .iosb [0];			! then pick up I/O status

	IF NOT .status				! If error detected,
	THEN
	    BEGIN
	    $DASSGN (CHAN = .channel);		! Deassign channel
	    RETURN .status;			! and report error
	    END;
	END%,

    perform (command) =
	BEGIN
	LOCAL status;
	status = command;
	IF NOT .status
	THEN
	    RETURN .status;
	END%;

GLOBAL ROUTINE lib$check_dir (fab_block) =

!----
! Functional description
!
!	This routine determines whether the file currently open
!	by the specified FAB is a directory file or not.
!
! Input parameters
!
!	fab_block	- FAB associated with the opened file.
!
!	The FAB is assumed to have an associated NAM block
!	containing the FID of the file and a result name string.
!
! Routine value
!
!	TRUE		- The file is a directory
!	ss$_badirectory	- The file is not a directory
!	status		- Error was detected, assume not a directory
!----

BEGIN

MAP
    fab_block: REF BBLOCK;		! Address the input fab

BIND
    nam_block = .fab_block [fab$l_nam]: BBLOCK;

LOCAL
    fib:	BBLOCK[fib$c_accdata],	! File Identification Block
    fib_desc:	BBLOCK[8],		! FIB descriptor
    atr:	BLOCKVECTOR[4,8,BYTE],	! Attribute control block
    filatr:	BBLOCK[atr$s_recattr]	! File attributes
		VOLATILE,
    header:	BBLOCK[atr$s_header]	! File header block
		VOLATILE,
    dev_desc:	BBLOCK[8],		! Device descriptor for ASSIGN
    channel:	WORD,			! Channel to device
    iosb:	VECTOR[4,WORD],		! I/O status block
    status;				! Holds RMS status codes

!
! Check the file type and version.  A valid directory must
! be named .DIR;1 or else it is invalid.
!

IF CH$FIND_SUB(.nam_block [nam$b_rsl], .nam_block [nam$l_rsa],
	6,UPLIT('.DIR;1')) EQL 0	! If not .DIR
THEN
    RETURN ss$_badirectory;		! then not a valid directory
!
! If this is a network directory filespec then do not attempt to
! assign a channel for QIO operations - just return the appropriate
! return value.
!
IF (.fab_block[$fab_dev(net)])		! If this is a network operation
THEN
    BEGIN
    IF (.fab_block[fab$b_rat]) EQL fab$m_blk !and there is no carriage control
    OR (.fab_block[fab$b_rat]) EQL 0 !
    THEN
	RETURN true			! It's a valid network directory
    ELSE
	RETURN ss$_badirectory;		! It's not a valid network directory
    END;
!
! Assign a channel to the device for QIO operations.  If an error
! occurs, then exit without success.
!

dev_desc [dsc$w_length] = .nam_block [nam$b_esl];
dev_desc [dsc$a_pointer] = .nam_block [nam$l_esa];

perform($ASSIGN( DEVNAM = dev_desc,	! Assign channel to device
		  CHAN = channel));

!
! Call the ACP to read the file header attributes with a single QIO.
!

atr [0,atr$w_type] = atr$c_recattr;	! Request file attributes
atr [0,atr$w_size] = atr$s_recattr;
atr [0,atr$l_addr] = filatr;
atr [1,atr$w_type] = atr$c_header;	! Request file header block
atr [1,atr$w_size] = atr$s_header;
atr [1,atr$l_addr] = header;
atr [2,0,0,32,0] = 0;			! Trailing zero longword

fib_desc [dsc$w_length] = fib$c_accdata;
fib_desc [dsc$a_pointer] = fib;

fib [fib$l_acctl] = 0;			! Allow readers and writers
fib [fib$w_fid_num] = .nam_block [nam$w_fid_num];
fib [fib$w_fid_seq] = .nam_block [nam$w_fid_seq];
fib [fib$w_fid_rvn] = .nam_block [nam$w_fid_rvn];

status = $QIOW( CHAN = .channel,	! Open and read file header
		FUNC = IO$_ACCESS,
		IOSB = iosb,		! Address of I/O status block
		P1 = fib_desc,		! Descriptor of FIB block
		P5 = atr);		! Address of attribute block

check_io;				! Check I/O status

!
! Deassign the channel used to access the device
!

perform($DASSGN( CHAN = .channel));	! Deassign the channel

!
! Check the file characteristics to determine if this file is
! really a directory file.
!

IF .header [fh2$b_struclev] EQL 2	! If ODS-2 format,
THEN
    BEGIN
    IF NOT .header [fh2$v_directory]	! DIRECTORY bit must be on
    THEN
        RETURN ss$_badirectory;		! If not, exit not a directory
    END
ELSE
IF .header [fh2$b_struclev] EQL 1	! If ODS-1 format,
THEN
    BEGIN
    IF .filatr [fat$b_rtype] NEQ fat$c_fixed	! Must be fixed records
	OR .filatr [fat$b_rattrib] NEQ 0	! & no carriage control
    THEN
        RETURN ss$_badirectory;		! If not, exit not a directory
    END
ELSE
    RETURN ss$_badirectory;		! If not ODS-1 or 2, bad directory

RETURN true;				! Return file is a directory file

END;

GLOBAL ROUTINE lib$set_erase (name_desc) =

!---
!
! Functional description
!
!	This routine sets the erase-on-delete bit in a file.
!	Note: This is a temporary implementation for DELETE/ERASE only;
!	the file is actually erased by this routine at present.
!
! Inputs:
!
!	name_desc = Address of descriptor of directory file name
!
! Outputs:
!
!	success or failure status
!---

BEGIN

MAP
    name_desc:	REF BBLOCK;		! Address of name descriptor

LITERAL
    buffer_size = 64*512;		! buffer size of 64 blocks

LOCAL
    fib:	BBLOCK[fib$c_extdata],	! File Identification Block
    fib_desc:	BBLOCK[8],		! FIB descriptor
    channel:	WORD,			! Channel to device
    iosb:	VECTOR[4,WORD],		! I/O status block
    status,				! Holds RMS status codes
    buffer_desc: VECTOR [2],		! buffer descriptor
    org_buffer,				! original address of buffer
    vbn;				! next VBN in file to write

!
! Call the common setup routine to get the file ID of the file and
! set up the FIB.
!

perform (setup_fib (.name_desc, fib, channel));

fib_desc [dsc$w_length] = fib$c_extdata; ! Create FIB descriptor
fib_desc [dsc$a_pointer] = fib;

fib [fib$l_acctl] = fib$m_write OR fib$m_noread OR fib$m_nowrite;

status = $QIOW (CHAN = .channel,	! open the file for update
	FUNC = IO$_ACCESS OR IO$M_ACCESS,
	IOSB = iosb,
	P1 = fib_desc);

check_io;				! Check I/O status

!
! Now allocate a buffer of zeroes and proceed to overwrite the file.
! Note the liberal use of $CRETVA, to make as many of the page faults
! be demand-zero faults instead of real ones.
! No bounds checks are necessary - the ACP will do that for us. All
! we have to do is quit on end of file.
!

status = LIB$GET_VM (uplit (buffer_size+512), org_buffer);
IF not .status THEN RETURN .status;

buffer_desc[0] = .org_buffer + 511 AND NOT 511;
buffer_desc[1] = .buffer_desc[0] + buffer_size - 1;
$CRETVA (INADR = buffer_desc[0]);

vbn = 1;
do
    begin
    status = $QIOW (CHAN = .channel,
		    FUNC = IO$_WRITEVBLK,
		    IOSB = iosb,
		    P1   = .buffer_desc[0],
		    P2   = buffer_size,
		    P3   = .vbn
		    );
    vbn = .vbn + buffer_size/512;
    if .status then status = .iosb[0];
    end
until not .status;

IF .status EQL SS$_ENDOFFILE
THEN status = true;

$CRETVA (INADR = buffer_desc[0]);
LIB$FREE_VM (uplit(buffer_size+512), org_buffer);

!
!	Deassign the channel
!

perform ($DASSGN (CHAN = .channel));	! Deassign the channel

RETURN .status;				! Return successful

END;

ROUTINE setup_fib (name_desc, fib, channel) =

!---
!
! Functional description
!
!	This routine parses the specified file name, fills in the fib
!	with the file ID, and assigns a channel to the device.
!
! Inputs:
!
!	name_desc = Address of descriptor of directory file name
!
! Outputs:
!
!	fib = address of fib to be filled in
!	channel = address of word to return channel number
!
! Value:
!
!	success or failure status code
!
!---

BEGIN

MAP
    name_desc:	REF BBLOCK,		! Address of name descriptor
    fib:	REF BBLOCK;		! File Identification Block

LOCAL
    fab:	BBLOCK [fab$c_bln],	! FAB to open directory file
    nam:	BBLOCK [nam$c_bln],	! NAM to obtain DID, etc.
    expbuf:	VECTOR [nam$c_maxrss,BYTE],
    desc:	VECTOR [2],		! Descriptor
    status;				! Holds RMS status codes

!
!	Parse the file specification with RMS to obtain the
!	expanded name string.  RMS should return DNF but all
!	that is needed is the expanded string.
!

$FAB_INIT (FAB = fab,			! Initialize FAB block
	NAM = nam,
	FNA = .name_desc [dsc$a_pointer],
	FNS = .name_desc [dsc$w_length]);

$NAM_INIT (NAM = nam,			! Initialize NAM block
	ESA = expbuf,
	ESS = nam$c_maxrss);

status = $PARSE (FAB = fab);		! Parse the input string

IF NOT .status				! If an unexpected error,
THEN
    RETURN .status;			! exit with status

!
!	If this is a network operation then return a "non-local
!	device" error to the caller.
!

IF .nam [nam$b_node] NEQ 0		! If a node was specified
THEN RETURN ss$_nonlocal;		! then exit with error

IF .nam [nam$v_wildcard]		! If wildcards specified,
THEN
    RETURN ss$_nosuchfile;		! then return no such file

status = $SEARCH (FAB = fab);		! Get FID and DID fields

IF NOT .status				! If not found or error,
THEN
    RETURN .status;			! then exit with status

!
!	Assign a channel to the device ACP
!

desc [0] = .nam [nam$b_dev];		! Fetch the device name size
desc [1] = .nam [nam$l_dev];		! and location from the expanded name

perform ($ASSIGN (DEVNAM = desc,	! Assign channel to ACP
		CHAN = .channel));

!
!	Setup parameters to be sent to the ACP
!

CH$FILL(0,fib$c_extdata,.fib);		! Zero the FIB first

fib [fib$w_fid_num] = .nam [nam$w_fid_num]; ! Copy FID
fib [fib$w_fid_seq] = .nam [nam$w_fid_seq];
fib [fib$w_fid_rvn] = .nam [nam$w_fid_rvn];

RETURN true;				! Return successful

END;

END
ELUDOM
