	.TITLE	OSWPSCHED - SWAP SCHEDULER
	.IDENT	'V03-002'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************

;++
; FACILITY: EXECUTIVE, BALANCE SET SWAPPER
;
; ABSTRACT:
;	OSWPSCHED SELECTS THE LOWEST PRIORITY PROCESS SUITABLE AS AN
;	OUTSWAP CANDIDATE TO MAKE MEMORY PAGES AVAILABLE BOTH FOR
;	INSWAPPING AND MAINTENANCE OF THE DESIRED NUMBER OF FREE PAGES.
;
; ENVIRONMENT:
;	MODE = KERNEL, RESIDENT
;
; AUTHOR: R. I. HUSTVEDT, CREATION DATE: 14-FEB-77
;
; MODIFIED BY:
;
;	V03-002	HRJ0061		Herb Jacobs		25-Mar-1982
;		Rewrite again to make it table driven to allow performance
;		measurement of several different scheduling alternatives.
;		Remove V02-008 code, this is accomplished as a side effect
;		of an unsatisfyable pages needed count.
;
;	V03-001	HRJ0060		Herb Jacobs		20-Mar-1982
;		Add interlock to prevent this code from changing WSLAST
;		out of process context.
;
;	V02-012	HRJ0052		Herb Jacobs		08-Jan-1982
;		Add sysgen parameter threshold of whether using modified
;		page writer should be used for gaining memory.
;
;	V02-011	HRJ0051		Herb Jacobs		30-Jan-1982
;		Don't allow a swap candidate if the process is larger than
;		its swap slot.  This can happen if free working set list
;		returns a resource wait condition as the result of the
;		preparatory shrink.  This should be short lived, and will
;		fix itself on a future need.
;		Also detect a queue reordering as the result of ALLOCPFN
;		reporting free pages; in this case restart rather than
;		continue.
;
;	V02-010	HRJ0049		Herb Jacobs		25-Jan-1982
;		Recompute of extra dynamic working set after MMG$SHRINKWS.
;
;	V02-009	HRJ0044		Herb Jacobs		12-Jan-1982
;		Update for changed interface to MMG$SHRINKWS and add SWPFAIL
;		count into priority consideration for outswaps.
;
;	V02-008	HRJ0024		Herb Jacobs		29-Jul-1981
;		Add back ability to force outswap for shortage of balance set
;		slots.
;
;	V02-007	HRJ0020		Herb Jacobs		20-Apr-1981
;		Major enhancement to attempt to shrink processes working sets
;		to acquire memory before resulting to swapping.
;
;	06	RIH0059		RICHARD I. HUSTVEDT	25-FEB-1980	19:45
;		Remove spurious modification of SWTIME.
;
;	05	RIH0057		RICHARD I. HUSTVEDT	04-FEB-1980	10:07
;		Remove use of SWPRATE.  Moved to SWAPPER instead.
;
;	04	RIH0036		RICHARD I. HUSTVEDT	01-NOV-1979	11:24
;		Change wait time measurement to use SCH$GW_IOTA, a fixed allowance
;		for voluntary waits to avoid undesired negative performance
;		feedback.
;
;	03	RIH0031		RICHARD I. HUSTVEDT 	08-AUG-1979	13:17
;		Remove inhibition on swapping for processes holding a Mutex.
;
;--

	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;

	$CEBDEF				; DEFINE CEB OFFSETS
	$IPLDEF				; DEFINE INTERRUPT PRIORITY LEVELS
	$PCBDEF				; DEFINE PCB OFFSETS
	$PHDDEF				; DEFINE PHD OFFSETS
	$PRDEF				; DEFINE PROCESSOR REGISTERS
	$STATEDEF			; DEFINE STATE VALUES
	$WQHDEF				; DEFINE WAIT QUEUE HEADER OFFSETS
	
;
; MACROS:
;

;
;	OUTSWP - MACRO TO GENERATE ORDERED ACTION TABLE FOR
;		 NON-EXECUTABLE STATES.
;
;	OUTSWP	STATE,[<FLAG,FLAG,FLAG...>]
;
;	WHERE:  STATE = STATE NAME LESS SCH$C_ PREFIX
;		FLAG  = ONE OF THE SWAP SCHEDULING FLAGS
;			_V_CEF = COMMON EVENT FLAG STATE
;			_V_DIOCNT = REQUIRE NONZERO DIOCNT
;			_V_LONGWAIT = ONLY CONSIDER PROCESSES IN A LONG WAIT
;			_V_SHORTWAIT= ONLY CONSIDER PROCESSES IN A SHORT WAIT
;			_V_INQUAN = OBSERVE INITIAL QUANTUM, IGNORE
;				    PROCESS IF PCB$V_INQUAN IS SET
;			_V_NDIOCNT  = IGNORE PROCESS IF PCB$W_DIOCNT IS NONZERO
;			_V_PRIORITY = OBSERVE PRIORITY OF POSSIBLE OUTSWAP
;				      CANDIDATE RELATIVE TO INSWAP CANDIDATE
;			_V_COMPUTE  = USED TO FLAG START OF COM PROCESS SCAN
;			_V_SWPOGOAL = REDUCE PROCESS PAST QUOTA BEFORE SWAPPING
;			_V_SWAPASAP = WHEN A PROCESS IN THIS STATE REACHES A
;				      SWAPPABLE SIZE, EXIT BY SWAPPING IT
;
	.MACRO	OUTSWP,STATE,FLAGS
	.BYTE	SCH$C_'STATE
TMP...=0
	.IRP	FLGS,<FLAGS>
	TMP...=TMP...+<1@_V_'FLGS>
	.ENDR
	.WORD	TMP...
	.ENDM	OUTSWP
;
; EQUATED SYMBOLS:
;

	_VIELD	,0,<-			; DEFINE CONTROL BITS
		CEF,-			; COMMON EVENT FLAG WAIT -MUST BE BIT 0
		DIOCNT,-		; REQUIRE NON-ZERO DIOCNT
		LONGWAIT,-		; PROCESS WAIT MUST BE LONG
		SHORTWAIT,-		; PROCESS WAIT MUST BE SHORT
		INQUAN,-		; OBSERVE INQUAN FLAG
		NDIOCNT,-		; DIOCNT MUST BE ZERO
		PRIORITY,-		; OBSERVE PRIORITY
		COMPUTE,-		; START OF COMPUTE PROCESSES
		SWPOGOAL,-		; DESIRED SIZE IS SWPOUTPGCNT
		SWAPASAP,-		; SWAP PROCESSES IN THIS STATE FIFO
		>
;
; OWN STORAGE:
;

	.PSECT	$$$220,LONG
SWP$GL_SWTIME::				; EARLIEST TIME FOR NEXT EXCHANGE SWAP
	.LONG	0			;

	.PSECT	$OSWPSCHED,BYTE
OSWPSTATE:
OUTSWP	SUSP				; SUSPENDED
.BYTE	0				; ATTEMPT OUTSWAPS BEFORE PROCEEDING
OUTSWP	LEF,<NDIOCNT,LONGWAIT,SWPOGOAL>	; LOCAL EVENT FLAG WAIT, LONG WAIT
OUTSWP	HIB,<LONGWAIT,SWPOGOAL>		; HIBERNATING, LONG WAIT
.BYTE	0				; ATTEMPT OUTSWAPS BEFORE PROCEEDING
OUTSWP	CEF,<CEF,NDIOCNT,SWPOGOAL>	; COMMON EVENT FLAG WAIT
.BYTE	0				; ATTEMPT OUTSWAPS BEFORE PROCEEDING
OUTSWP	LEF,<NDIOCNT,SHORTWAIT,SWPOGOAL>; LOCAL EVENT FLAG WAIT
OUTSWP	HIB,<SHORTWAIT,SWPOGOAL>	; HIBERNATING
.BYTE	0				; ATTEMPT OUTSWAPS BEFORE PROCEEDING
OUTSWP	FPG,<PRIORITY,SWAPASAP>		; FREE PAGE WAIT
OUTSWP	COLPG,<PRIORITY,SWAPASAP>	; COLLIDED PAGE WAIT
.BYTE	0				; ATTEMPT OUTSWAPS BEFORE PROCEEDING
OUTSWP	MWAIT,<SWAPASAP>		; MUTEX WAIT
.BYTE	0				; ATTEMPT OUTSWAPS BEFORE PROCEEDING
OUTSWP	CEF,<CEF,DIOCNT,INQUAN,PRIORITY>; COMMON EVENT WAIT -DIOCNT NONZERO
OUTSWP	LEF,<DIOCNT,INQUAN,PRIORITY>	; LOCAL EVENT WAIT -DIOCNT NONZERO
.BYTE	0				; ATTEMPT OUTSWAPS BEFORE PROCEEDING
OUTSWP	PFW,<INQUAN,PRIORITY,SWAPASAP>	; PAGE FAULT WAIT
OUTSWP	COM,<INQUAN,COMPUTE,SWAPASAP>	; COMPUTE PROCESSES
					; COMPUTE IMPLIES END OF TABLE

	.SBTTL	SCH$OSWPSCHED - OUT SWAP SCHEDULER
;++
; FUNCTIONAL DESCRIPTION:
;	SCH$OSWPCHED SCANS IN LOWEST PRIORITY ORDER FOR PROCESSES THAT
;	CAN BE USED TO ACQUIRE MEMORY FROM TO SATISFY THE DEFICIT.
;	IF AFTER SHRINKING PROCESSES FAIL, A PROCESS WILL BE SELECTED
;	FOR OUTSWAPPING.
;
; CALLING SEQUENCE:
;	BSB/JSB	SCH$OSWPSCHED
;	IPL = IPL$_SYNCH
;
; INPUT PARAMETERS:
;	SWP$GB_ISWPRI - PRIORITY OF INSWAP PROCESS
;	FP - NEGATIVE NUMBER OF DESIRED PAGES
;
; IMPLICIT INPUTS:
;	ALL STATE QUEUE HEADERS AND ATTACHED PROCESS CONTROL BLOCKS.
;
; OUTPUT PARAMETERS:
;	R4 - PCB ADDRESS OF OUTSWAP CANDIDATE
;	     0=> NONE
;	R5 - PHD ADDRESS OF OUTSWAP CANDIDATE
;	R0,R1,R2,R3,R6,R7,R8,R9 DESTROYED
;
; IMPLICIT OUTPUTS:
;	SOME PROCESSES WORKING SETS ARE LIKELY TO BE SHRUNK.
;	PCB$V_RES OF OUTSWAP CANDIDATE IS CLEARED AND A SWPOUT EVENT
;	HAS BEEN REPORTED IF AN OUTSWAP IS TO OCCUR.
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	NONE
;
;--
RETRY:					; USED IN CASE ALLOCPFN REORDERS QUEUES
	ADDL	#4,SP			; POP CONTINUE ADDRESS FROM STACK AND
					; TRY AGAIN
SCH$OSWPSCHED::				; SCHEDULE OUTSWAP
	BSBW	MMG$MPWCHECK		; WILL STARTING MPW SATISFY NEED?
	TSTL	FP			; FP CONTAINS DEFICIT
	BGEQ	90$			; BRANCH IF NO MORE DEFICIT
	CLRB	W^SCH$GB_RESCAN		; CLEAR RESCAN NEEDED FLAG
	MOVAB	OSWPSTATE,R3		; INITIALIZE STATE SCAN AT TOP
10$:	MOVL	R3,R2			; RESET TO NEW SUB SECTION
	BEQL	90$			; BRANCH IF AT END OF TABLE
	BSBW	CANDIDATE		; GET A CANDIDATE TO BE SHRUNK
	BEQL	10$			; BRANCH IF NONE, TRY NEXT SUB SECTION
20$:	SUBW3	PHD$W_WSLIST(R5),PHD$W_WSQUOTA(R5),R8
	INCW	R8			; SIZE TO SHRINK WORKING SET TO
	BSBW	SHRINKWS		; RECLAIM MEMORY FROM IT
	BGEQ	80$			; RETURN WITH NO ONE TO OUTSWAP
	BBS	S^#SCH$V_REORD,W^SCH$GB_RESCAN,RETRY;BRANCH IF FPG STATE CHANGE
	BBC	#_V_SWAPASAP,R6,25$	; BRANCH IF THIS STATE WANTS US TO SCAN
					; OTHERS RATHER THAN SWAP THIS ONE
	BSBW	100$			; CAN WE SWAP THIS PROCESS NOW?
	BLBS	R9,60$			; BRANCH IF YES TO SWAP IT
25$:	JSB	@(SP)+			; TRY FOR THE NEXT ONE
	BNEQ	20$			; BRANCH IF THERE IS ONE
	BSBW	CANDIDATE		; GET A CANDIDATE TO BE SHRUNK
	BEQL	10$			; BRANCH IF NONE, TRY NEXT SUB SECTION
30$:	BSBW	SWAPQUANCHK		; CHECK SWAPABILITY AND INITIAL QUANTUM
	BLBC	R9,40$			; BRANCH IF SHOULD NOT SWAP IT NOW
	MOVL	W^SWP$GL_SWPPGCNT,R8	; VALUE TO SHRINK CANDIDATE TO
	BBS	#_V_SWPOGOAL,R6,35$	; BRANCH IF THIS IS DESIRED GOAL SIZE
	SUBW3	PHD$W_WSLIST(R5),PHD$W_WSQUOTA(R5),R8
	INCW	R8			; SIZE TO SHRINK WORKING SET TO
35$:	BSBW	SHRINKWS		; RECLAIM MEMORY FROM IT
	BGEQ	80$			; RETURN WITH NO ONE TO OUTSWAP
	BBS	S^#SCH$V_REORD,W^SCH$GB_RESCAN,RETRY;BRANCH IF FPG STATE CHANGE
40$:	JSB	@(SP)+			; TRY FOR NEXT ONE
	BNEQ	30$			; BRANCH IF THERE IS ONE
	BSBB	CANDIDATE		; GET A CANDIDATE TO BE OUTSWAPPED
50$:	BEQL	10$			; NO ONE TO OUTSWAP
	BSBB	100$			; CHECK SWAPABILITY AND INITIAL QUANTUM
	BLBS	R9,60$			; BRANCH TO SWAP IT
	JSB	@(SP)+			; TRY FOR NEXT ONE
	BRB	50$			; IS THERE ANOTHER ONE?

80$:	ADDL	#4,SP			; POP CONTINUE ADDRESS OFF STACK
90$:	CLRL	R4			; GET PROCESS TO SWAP, IF ANY
	RSB				; RETURN TO SWAPPER PROPER

60$:	CLRL	R2			; NULL PRIORITY INCREMENT
	BBCCI	#PCB$V_RES,PCB$L_STS(R4),70$ ; CLEAR RESIDENT FLAG
70$:	RPTEVT	SWPOUT			; REPORT SWAPOUT EVENT
	MOVW	W^SCH$GW_SWPFAIL,W^SCH$GW_SWPFCNT; RESET FAILURE COUNTER
	ADDL	#4,SP			; POP CONTINUE ADDRESS OFF STACK
	RSB				; WITH PCB IN R4, PHD IN R5

100$:	ADDW3	PCB$W_PPGCNT(R4),PCB$W_GPGCNT(R4),R9 ;GET SIZE OF PROCESS
	SUBW	PHD$W_SWAPSIZE(R5),R9	; DO WE HAVE ENOUGH SPACE TO SWAP IT?
	BLEQ	110$			; BRANCH IF YES
	CLRL	R9			; SET FAILURE
	RSB				; RETURN
110$:	BSBW	SWAPQUANCHK		; CHECK SWAPABILITY AND INITIAL QUANTUM
	RSB

	.ENABLE	LSB
COMPUTE:				; COMPUTE STATE SCAN
					; STATE FLAGS WORD FOR INQUAN SET!
	MOVAB	W^SCH$AQ_COMOH,R1	; POINT TO LONGWORD BEYOND PRI=0 HDR
10$:	MOVQ	-(R1),R3		; GET QUEUE HEADER
	BEQL	50$			; NONE, SCAN FINISHED
20$:	CMPL	R1,R4			; CHECK FOR EMPTY QUEUE
	BEQL	10$			; YES, NEXT QUEUE (HIGHER PRIORITY)
30$:	CMPB	PCB$B_PRI(R4),W^SWP$GB_ISWPRI ; COMPARE WITH INSWAP CANDIDATE
	BLSS	50$			; BRANCH IF CAN'T SWAP
	MOVL	PCB$L_PHD(R4),R5	; MMG ROUTINES WANT PHD IN R5, SET Z=0
	JSB	@(SP)+			; RETURN WITH CANDIDATE, WE MAY CONTINUE
40$:	MOVL	PCB$L_SQBL(R4),R4	; BLINK THROUGH QUEUE
	BRB	20$			; AND CHECK FOR EMPTY

50$:	DECW	W^SCH$GW_SWPFCNT	; COUNT A FAILURE
	BGEQ	60$			; EXIT IF NO UNDERFLOW
	CLRW	W^SCH$GW_SWPFCNT	; LIMIT VALUE TO ZERO, PREVENTING WRAPAROUND
60$:	CLRL	R3			; INDICATE NONE FOUND, Z BIT SET, END
70$:	RSB				; AND RETURN

CANDIDATE:
	MOVL	R2,R3			; INIT STATE SCAN AT CURRENT SUB SECTION
NEXTSTATE:				; TRY NEXT STATE
	MOVZBL	(R3)+,R1		; GET NEXT STATE TO TRY
	BEQL	70$			; BRANCH IF AT END OF STATE SUB SECTION
	MOVZWL	(R3)+,R6		; FETCH STATE FLAGS WORD
	BBS	#_V_COMPUTE,R6,COMPUTE	; TRY COM IF CANT FIND NON-EXECUTABLE
	BBC	#_V_CEF,R6,110$		; CONTINUE IF NOT CEF WAIT
	MOVAQ	W^SCH$GQ_CEBHD,R7	; GET ADDRESS OF LISTHEAD
	MOVAL	CEB$L_WQFL(R7),R0	; AND MAKE WORKING COPY
NEXTCEB:				; NEXT CEB
	BLBC	R6,NEXTSTATE		; BR IF _V_CEF CLEAR
	MOVL	-CEB$L_WQFL(R0),R0	; FLINK FORWARD
	CMPL	R0,R7			; CHECK FOR END OF CEB LIST
	BEQL	NEXTSTATE		; AT END IF EQL
	ADDL	#CEB$L_WQFL,R0		; POINT TO WAIT QUEUE
	BRB	120$			; ELSE SCAN CEB WAIT QUEUE
110$:	MOVAQ	W^SCH$AQ_WQHDR[R1],R0	; COMPUTE ADDRESS OF WAIT QUEUE HDR
	MOVAL	(R0)[R1],R0		; AS SCH$AQ_WQHDR+12*R1
120$:	MOVL	WQH$L_WQBL(R0),R4	; GET TAIL OF QUEUE

	.DISABLE LSB

WSCAN:	CMPL	R4,R0			; CHECK FOR END OF QUEUE
	BEQL	NEXTCEB			; TRY NEXT STATE OR CEB
	BLBC	PCB$L_STS(R4),NEXTPR	; NOT RESIDENT, NEXT IN QUEUE
	CMPW	PCB$W_DIOCNT(R4),PCB$W_DIOLM(R4) ;  CHECK IT FOR ZERO
	BEQL	10$			; IF ZERO, IS THAT PERMITTED?
	BBS	#_V_NDIOCNT,R6,NEXTPR	; BR IF NON-ZERO NOT PERMITTED
	BRB	20$			; CONTINUE IF NON-ZERO ALLOWED
10$:	BBS	#_V_DIOCNT,R6,NEXTPR	; BR IF ZERO DIOCNT NOT PERMITTED
20$:	BBC	#_V_PRIORITY,R6,30$	; BR IF PRIORITY CAN BE IGNORED
	CMPB	PCB$B_PRI(R4),W^SWP$GB_ISWPRI ; COMPARE WITH INSWAP PRIORITY
	BGEQ	30$			; BRANCH IF LESS IMPORTANT THAN ISWP
	TSTW	W^SCH$GW_SWPFCNT	; CHECK FOR FAILURE COUNT EXHAUSTED
	BGTR	NEXTPR			; BRANCH IF NOT GOOD CHOICE YET
30$:	BITB	#<1@_V_SHORTWAIT>!<1@_V_LONGWAIT>,R6 ; CHECK WAIT TIME?
	BEQL	50$			; BRANCH IF NOT
	MOVL	PCB$L_PHD(R4),R5	; GET PROCESS HEADER ADDRESS
	ADDW3	PHD$W_WAITIME(R5),W^SCH$GW_LONGWAIT,R5 ; GET WAIT TIME + DELTA
	CMPW	W^EXE$GQ_SYSTIME+2,R5	; HOW LONG HAVE WE BEEN WAITING?
	BBC	#_V_SHORTWAIT,R6,40$	; BRANCH IF NON- SHORT WAIT ALLOWED
	BGTRU	NEXTPR			; BRANCH IF WAIT INTERVAL IS LONG
40$:	BBC	#_V_LONGWAIT,R6,50$	; BRANCH IF NON- LONG WAIT ALLOWED
	BLSSU	NEXTPR			; BRANCH IF WAIT INTERVAL IS SHORT
50$:	MOVL	PCB$L_PHD(R4),R5	; MMG ROUTINES WANT PHD IN R5, SET Z=0
	JSB	@(SP)+			; RETURN SO WE CAN CONTINUE
NEXTPR:	MOVL	PCB$L_SQBL(R4),R4	; BLINK THROUGH QUEUE
	BRB	WSCAN			; AND CONTINUE SCAN

SWAPQUANCHK:				; CHECK VALIDITY OF PROCESS CHOICE
	CLRL	R9			; ASSUME BAD CHOICE
	BBS	#PCB$V_PSWAPM,PCB$L_STS(R4),20$ ; BRANCH IF NOT SWAPPABLE
	BBC	#_V_INQUAN,R6,10$	; BRANCH IF INQUAN CAN BE IGNORED
	BBC	#PCB$V_INQUAN,PCB$L_STS(R4),10$	; BRANCH IF INQUAN SATISFIED
	CMPB	W^SWP$GB_ISWPRI,#15	; IS THIS A REAL TIME INSWAP?
	BLEQ	10$			; BRANCH IF SO
	TSTW	W^SCH$GW_SWPFCNT	; CHECK FOR FAILURE COUNT EXHAUSTED
	BGTR	20$			; BRANCH IF NOT GOOD CHOICE YET
10$:	INCL	R9			; SET GOOD CHOICE
20$:	RSB				; RETURN WITH STATUS IN R9

	.SBTTL	SHRINK WORKING SET
;++
; FUNCTIONAL DESCRIPTION:
;	SHRINK IS USED TO MAKE PAGES AVAILABLE FROM OTHER PROCESSES THAT
;	HAVE BORROWED PAGES TO SATISFY HIGH FAULTING RATES OR TO SHRINK
;	A SWAPPABLE PROCESS TO THE DESIRED SIZE FOR SMALLER SWAPS.
;
; CALLING SEQUENCE:
;	BSB/JSB	SHRINKWS
;
; INPUT PARAMETERS:
;	R4 - PCB OF TARGET PROCESS
;	R5 - PHD OF TARGET PROCESS
;	R8 - SIZE TO ATTEMPT TO SHRINK PROCESS TO
;	FP - NEGATIVE NUMBER OF TOTAL PAGES WANTED BY SYSTEM
;
; IMPLICIT INPUTS:
;	WORKING SET LIST
;
; OUTPUT PARAMETERS:
;	FP UPDATED
;	R9 DESTROYED
;
; IMPLICIT OUTPUTS:
;	TARGET PROCESS WORKING SET SHRUNK UP TO R8 INPUT VALUE
;
; COMPLETION CODES:
;	POSITIVE INDICATES SWAPPER REQUEST SATISFIED
;
; SIDE EFFECTS:
;	THIS ROUTINE COULD POTENTIALLY DUMP A LOT OF TRAFFIC INTO THE
;	PAGING SYSTEM, ESPECIALLY THE MODIFIED PAGE WRITER.
;
;--

SHRINKWS:
	SUBW3	PHD$W_WSSIZE(R5),R8,R9	; CAN WE GET ANY PAGES FROM PROCESS?
	BGEQ	30$			; BRANCH IF NOT
	PUSHR	#^M<R0,R1,R2,R3>	; SAVE SWAPPER OUTSWAP SCHEDULER REGS
	CVTWL	R9,R1			; NUMBER OF PAGES TO SHRINK PROCESS BY
	PUSHL	W^SCH$GL_FREECNT	; SAVE OLD FREE LIST COUNT
	BISB	S^#MMG$M_NOLASTUPD!MMG$M_NOWAIT,W^MMG$GB_FREWFLGS ; DISABLE
					; WSLAST UPDATE AND MP LIST SIZE WAIT
	BSBW	MMG$SHRINKWS		; USE ADJWSL CODE, IPL REMAINS AT SYNCH
	BICB	S^#MMG$M_NOLASTUPD!MMG$M_NOWAIT,W^MMG$GB_FREWFLGS ; REENABLE
					; WSLAST UPDATE AND MP LIST SIZE WAIT
	BSBW	MMG$EXTRADYNWS		; RECALC EXTRA DYNAMIC WORKING SET
	SUBL3	(SP)+,W^SCH$GL_FREECNT,R9 ; CALC NUMBER OF PAGES FREED
	ADDL	R9,FP			; HAVE WE SATISFIED DEFICIT?
	BGEQ	20$			; BRANCH IF YES
	BSBB	MMG$MPWCHECK		; WILL STARTING MPW SATISFY NEED?
20$:	POPR	#^M<R0,R1,R2,R3>	; RESTORE OSWPSCHED REGISTERS
30$:	TSTL	FP			; SET DEFICIT INDICATION
	RSB				; RETURN

	.SBTTL	START MODIFIED PAGE WRITER TEST
;++
; FUNCTIONAL DESCRIPTION:
;	THIS ROUTINE IS CALLED BY THE SWAPPER TO OPTIONALLY START THE
;	MODIFIED PAGE WRITER IF IT WILL SOLVE THE CURRENT DEFICIT PROBLEM.
;
; CALLING SEQUENCE:
;	BSB/JSB	MMG$MPWCHECK
;
; INPUT PARAMETERS:
;	FP - NEGATIVE NUMBER OF TOTAL PAGES WANTED BY SYSTEM
;
; IMPLICIT INPUTS:
;	MODIFIED PAGE WRITER VALUES
;
; OUTPUT PARAMETERS:
;	FP UPDATED TO REFLECT HOW MUCH IS EXPECTED BY RUNNING MPW
;
; IMPLICIT OUTPUTS:
;	MODIFY PAGE WRITER LOW THRESHOLD MAY BE SET TO START MPW
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	NONE
;
;--

MMG$MPWCHECK::
	CMPL	W^MPW$GL_THRESH,W^SCH$GL_MFYCNT;IS MPW VALID FOR GETTING MEMORY
	BGTR	10$			; BRANCH IF NOT
	SUBL3	W^SCH$GL_MFYLOLIM,W^SCH$GL_MFYCNT,R0; WILL WRITING MODIFIED
	BLEQ	10$			; PAGES HELP?, BR IF NONE
	ADDL	FP,R0			; ARE THERE ENOUGH?
	BLSS	10$			; BR IF NOT AND AVOID FLUSHING LIST
	MOVW	W^SCH$GL_MFYLOLIM,W^SCH$GL_MFYLIM ; RESET LOWER THRESHOLD
	MOVL	R0,FP			; INDICATE NEW DEFICIT
10$:	RSB				; EXIT, MPW WILL START IF NECESSARY

	.END
