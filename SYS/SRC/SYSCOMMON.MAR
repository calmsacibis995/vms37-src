	.TITLE	SYSCOMMON DATA BASES
	.IDENT	'V03-003'
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
; SYSTEM COMMON DATA BASES
;--
;
;
; AUTHOR: R. HEINEN 9-AUG-76
;
; MODIFICATION HISTORY:
;
;	V03-003	PHL0042		Peter H. Lipman		02-Apr-1982
;		Add EXE$GQ_BOOTCB_D cell in front of EXE$GL_BOOTCB
;		forming a descriptor for the portion of the Boot Control
;		Block to be checksummed.
;
;	V03-002	ROW0074		Ralph O. Weber		26-MAR-1982
;		Enhance the infinite-due-time TQE, already used to mark the 
;		end of the TQE queue, to be a canonical TQE with the repeat 
;		bit off (TEQ$V_REPEAT).  Give this enhanced block a global 
;		name, EXE$AL_TQENOREPT, which routines not desiring to repeat 
;		a timer call can use to place the address of the canonical TQE 
;		in R5 before returning EXE$SWTIMINT thus ensuring no repeating 
;		of the timer call.
;
;	V03-001	PHL0040		Peter H. Lipman		21-Mar-1982
;		Add EXE$GL_SAVEDUMP to record the number of blocks
;		of dump file saved in the page file.  This is the 
;		number of blocks to be released to the page file
;		when the dump has been saved/analyzed.
;
;	V02-043	RIH0090		Richard I. Hustvedt	16-Feb-1982
;		Add cell for TIMESCHDL process priority boost scan.
;
;	V02-042	RIH0089		Richard I. Hustvedt	15-Feb-1982
;		Add fork block for pool expansion code.  Remove memory
;		allocation histogram.
;
;	V02-041	HRJ0050		Herb Jacobs		27-Jan-1982
;		Add global cells for machine check and memory error counts.
;
;	V02-040	RIH0084		Richard I. Hustvedt	18-Jan-1982
;		Add small request packet data base.
;
;	V02-039 JLV0143		Jake VanNoy		2-Jan-1982
;		Remove the EXE$V_xxx definitions and move them to
;		SYSPARAM.
;
;	V02-038	RIH0083		Richard I. Hustvedt	1-Jan-1982
;		Add cells to support non-paged pool extension.
;
;	V02-037	KTA0059		Kerbey T. Altmann	31-Dec-1981
;		Add flag TBCHK to EXE$GL_FLAGS.  Set if there is
;		a TBCHK processor register.
;
;	V02-036	DJD0001		Darrell Duffy		29-Dec-1981
;		Added IOC$GL_IRPMIN for minimum size of structure
;		to take from IRP lookaside list.
;		*TEMP* added memory alc instrumentation histogram
;
;	V02-035	HRJ0040		Herb JAcobs		20-Dec-1981
;		Added flags for knowing whether page file problem messages
;		have been issued.
;
;	V02-034	SRB0042		Steve Beckhardt		30-Nov_1981
;		Added LCK$GB_MAXDEPTH (contains maximum allowed depth
;		of resource names).
;
;	V02-033	HRJ0031		Herb Jacobs		2-Nov-1981
;		Add system wide flags for operator override of day type
;		as either primary or secondary.
;
;	V02-032	PHL0023		Peter H. Lipman		1-Nov-1981
;		Change SYS$SYSDISK to SYS$SYSDEVICE
;		Change 16 char name EXE$V_BLKHOLBUSY to EXE$V_BLKHOLBSY
;
;	V02-031	SPF0041		Steve Forgey		28-Sep-1981
;		Initally enable all accounting except image.
;
;	V02-030	PHL0017		Peter H. Lipman		21-Sep-1981
;		Reuse the RMS Paging flag from V02-021, it wasn't needed.
;		New flag allows for disabling the use of concealed devices.
;
;	V02-029	SRB0031		Steve Beckhardt		19-Aug-1981
;		Added several more cells for lock manager use
;
;	V02-028	SPF0017		Steve Forgey		17-Aug-1981
;		Add accounting manager flag field.
;
;	V02-027	KTA0026		Kerbey T. Altmann	21-Jul-1981
;		Add indirection on LOG$AL_LOGTBL, and allow for
;		table sizes on each table.
;
;	V02-026	KTA0023		Kerbey T. Altmann	17-Jun-1981
;		Remove group/system name table listheads; add cells
;		for use in hash table support of these names.
;
;	V02-025	STJ0050		Steven T. Jeffreys	13-Jun-1981
;		Addes support for mount verification.  This includes
;		the longwords EXE$GL_SYSFLAGS and EXE$GL_SVAPTE, and
;		the blakhole page wait queue list head, EXE$GQ_BLKHOLWQ.
;
;	V02-024	KTA0022		Kerbey T. Altmann	14-Jun-1981
;		Add new flag to EXE$GL_FLAGS, SSINHIBIT.  If set then
;		system services can be inhibited on a per-process basis.
;
;	V02-023	PHL0010		Peter H. Lipman		05-Jun-1981
;		Remove quad word descriptors for SYS.EXE, SYSDUMP.DMP
;		and SWAPFILE.SYS.  Remove the system WCB.  This is
;		now built by INIT.  SYS.EXE and SYSDUMP.DMP may now
;		be non-contiguous.  The swapfile descriptor was obsolete
;		some time ago.
;
;	V02-022	KTA0020		Kerbey T. Altmann	02-Jun-1981
;		Added IOC$GL_CRBTMOUT, list of CRB's to check for timeout.
;
;	V02-021	PHL0009		Peter H. Lipman		30-Apr-1981
;		Added EXE$GL_BOOTCB which points at data and code
;		allowing BUGCHECK to do bootdriver style virtual
;		block I/O from SYS.EXE and to SYSDUMP.DMP.
;
;		Added new flag to EXE$GL_FLAGS for RMS paging.  When RMS
;		paging is shut off, RMS is loaded into non-paged pool.
;
;	V02-020	SRB0019		Steve Beckhardt		23-Apr -1981
;		Added system variables for lock manager
;
;	V02-019	PHL0007		Peter H. Lipman		2-Apr-1981
;		Change default device name from SYS$DISK to SYS$SYSDISK
;
;	V02-018	PHL0007		Peter H. Lipman		27-Mar-1981
;		Add top level directory string passed from VMB to
;		SYSBOOT to INIT.  This is the directory all the system
;		directories are found in.  If null, then the system
;		directories are in the MFD usual.
;
;	V02-017	KDM0048		Kathleen D. Morse	27-Mar-1981
;		Add pointer to MP code that is loaded in pool.
;
;	V02-016	PHL0007		Peter H. Lipman		26-Mar-1981
;		Add descriptor for FIL$OPENFILE cache.
;
;	V02-015	KTA0001		Kerbey T. Altmann	15-Dec-1981
;		Add cell for system-wide user rundown service
;		(EXE$GL_USRUNDWN).
;
;	V0214	CAS0002		C. A. Samuelson		12-Dec-1980
;		Add cells for counting unexpected SCB interrupts and for
;		wait loop iteration counter.
;
;	V0213	SPF0001		Steve Forgey		02-Oct-1980
;		Add large request packet (LRP) data base.
;
;
;
; MACRO LIBRARY CALLS
;
	$ACMDEF				; DEFINE ACCOUNTING MANAGER OFFSETS
	$CADEF				; DEFINE CONDITIONAL ASSEMBLY PARAMETERS
	$DYNDEF				; DEFINE DATA STRUCTURE CODES
	$FKBDEF				; DEFINE FORK BLOCK OFFSETS
	$IPLDEF				; DEFINE INTERRUPT PRIORITIES
	$IRPDEF				; DEFINE IO REQUEST PACKET STRUCTURE
	$LOGDEF				; DEFINE LOG OFFSETS
	$SGNDEF				; DEFINE SYSGEN VALUES
	$TQEDEF				; DEFINE TQE OFFSETS
	$WCBDEF				; DEFINE WCB OFFSETS

;
; MACRO DEFINITIONS:
;

	.MACRO	TIME
	.LONG	0			;
	.LONG	^X859034		; HIGH ORDER BITS OF TIME
	.ENDM	TIME
 
	.PAGE
	.SBTTL	SYSCOMMON
 
	.PSECT	$$$260,QUAD,WRT
;+
; SYSTEM COMMON DATA BASES
;
; SYSTEM FLAGS LONG WORD
;
; NOTE: THE ACTUAL DEFAULT SETTING FOR EXE$GL_FLAGS IS IN SYSPARAM IN
;	CELL EXE$GL_DEFFLAGS AND IS COPIED INTO THE WORKING LOCATION,
;	EXE$GL_FLAGS BY INIT.
;
EXE$GL_FLAGS::
	.LONG	0			; SYSTEM CONTROL FLAGS

;
; ERROR LOG MAILBOX CONTROL
;
EXE$GQ_ERLMBX::				;
	.WORD	0			; UNIT NUMBER (0 => NONE)
	.WORD	0			; RESERVED
	.LONG	0			; PID OF ASSIGNER


;
;	VECTORS TO USER SUPPLIED CHANGE MODE HANDLERS
;
EXE$GL_USRCHMK::			; VECTOR TO USER SUPPLIED CHANGE MODE
	.LONG	0			; TO KERNEL HANDLER
EXE$GL_USRCHME::			; VECTOR TO USER SUPPLIED CHANGE MODE
	.LONG	0			; TO EXECUTIVE HANDLER

;
; FORK QUEUE LISTHEADS
;
 
	.ALIGN	QUAD
SWI$GL_FQFL::				; FORWARD LINK
A:	.LONG	A			; IPL-6 LISTHEAD
SWI$GL_FQBL::				; BACKWARD LINK
	.LONG	A			;
2$:	.LONG	2$,2$			; IPL-7 LISTHEAD
3$:	.LONG	3$,3$			; IPL-8 LISTHEAD
4$:	.LONG	4$,4$			; IPL-9 LISTHEAD
5$:	.LONG	5$,5$			; IPL-10 LISTHEAD
6$:	.LONG	6$,6$			; IPL-11 LISTHEAD
 
;
; LOGICAL NAME TABLE ADDRESS TABLE
;
; NOTE: THE INDIRECTION ON THE SYSTEM/GROUP LEVEL IS NECESSARY SO
;	THAT THE CODE THAT ACCESS ANY TABLE CAN BE SYMMETRICAL AND
;	SIMPLE.  THE INDIRECTION ON THE PROCESS LEVEL IS DICATATED
;	BY THE FACT THAT THE ADDRESS MAY BE DIFFERENT IN EACH PROCESS
;	P1 SPACE.
;
 
LOG$AL_LOGTBL::				; FIRST TWO SET UP NOW IN INIT
	.LONG	10$			; SYSTEM NAME TABLE
	.LONG	20$			; GROUP NAME TABLE
	.LONG	CTL$GL_LOGTBL		; PROCESS NAME TABLE
 
10$:	.LONG	0			; ADDR FILLED IN BY SWAPPER INIT
20$:	.LONG	0			; ADDR FILLED IN BY SWAPPER INIT

;
; LOGICAL NAME TABLE VARIABLE(S)
;

LOG$AB_HTBLCNT::			; NUMBER OF ENTRIES IN HASH TABLE
	.BYTE	0,0,0,0			; (EXPRESSED AS A POWER OF TWO)

;
; LOGICAL NAME TABLE MUTEX TABLE
;
 
LOG$AL_MUTEX::				;
	.WORD	-1,0			; SYSTEM NAME TABLE
	.WORD	-1,0			; GROUP NAME TABLE
 
;
; ADDRESS OF SYSTEM BOOT DEVICE UCB AND DEFAULT DEVICE
;
 
EXE$GL_SYSUCB::				; SYSTEM DEVICE UCB ADDRESS
	.LONG	0			;
FIL$GT_DDDEV::				; FILE READ DEFAULT DEVICE STRING
	.ASCIC	/SYS$SYSDEVICE/		; LOGICAL NAME STRING
FIL$GT_TOPSYS::				; ASCIC TOP LEVEL DIR STRING
	.BLKB	10			; FILLED IN BY INIT WITH STRING
					; FROM VMB AND SYSBOOT
	.ALIGN	LONG
FIL$GQ_CACHE::				; FILE READ CACHE DESCRIPTOR
	.BLKQ	1			;
EXE$GQ_BOOTCB_D::			; DESCRIPTOR FOR BOOT CONTROL BLOCK
	.BLKQ	1			; BYTE COUNT TO BE CHECKSUMMED
EXE$GL_BOOTCB == EXE$GQ_BOOTCB_D+4	; ADDRESS OF BOOT CONTROL BLOCK

EXE$GL_SAVEDUMP::			; BLOCK COUNT TO RELEASE TO PAGE FILE
	.BLKL	1			; WHEN DUMP IN PAGE FILE IS COPIED
 
;
; I/O DONE PACKET QUEUE
;
 
	.ALIGN	QUAD
IOC$GL_PSFL::				;
B:	.LONG	B			; FORWARD LINK
IOC$GL_PSBL::				;
	.LONG	B			; BACKWARD LINK
 
;
; I/O PACKET LOOK ASIDE LISTHEAD
;
 
IOC$GL_IRPFL::				;
	.LONG	IOC$GL_IRPFL		;
IOC$GL_IRPBL::				;
	.LONG	IOC$GL_IRPFL		;
IOC$GL_IRPREM::
	.LONG	0			; Address of partial packet
IOC$GL_IRPCNT::				; 
	.LONG	0			; Current count of allocated packets
IOC$GL_IRPMIN::				; Minimum size to take from list
	.LONG	<<IRP$C_LENGTH*2>/3>



;
; SMALL REQUEST PACKET LOOK ASIDE LISTHEAD AND DATA BASE
;

IOC$GL_SRPFL::				;
	.LONG	IOC$GL_SRPFL		;
IOC$GL_SRPBL::				;
	.LONG	IOC$GL_SRPFL		;
IOC$GL_SRPSIZE::			;
	.LONG	0			;
IOC$GL_SRPMIN::				;
	.LONG	0			;
IOC$GL_SRPSPLIT::			;
	.LONG	0			;
IOC$GL_SRPREM::				;
	.LONG	0			; Address of packet remainder
IOC$GL_SRPCNT::				;
	.LONG	0			; Current count of allocated packets

;
; LARGE REQUEST PACKET LOOK ASIDE LISTHEAD AND DATA BASE
;

IOC$GL_LRPFL::				;
	.LONG	IOC$GL_LRPFL		;
IOC$GL_LRPBL::				;
	.LONG	IOC$GL_LRPFL		;
IOC$GL_LRPSIZE::			;
	.LONG	0			;
IOC$GL_LRPMIN::				;
	.LONG	0			;
IOC$GL_LRPSPLIT::			;
	.LONG	0			;
IOC$GL_LRPREM::				;
	.LONG	0			; Address of packet remainder
IOC$GL_LRPCNT::				;
	.LONG	0			; Current count of allocated packets
;
; FORK BLOCK TO USE FOR POOL EXPANSION
;
IOC$GL_POOLFKB::
	.LONG	0,0			; Flink, Blink
	.WORD	FKB$C_LENGTH		; Size
	.BYTE	DYN$C_FRK		; Type
	.BYTE	IPL$_QUEUEAST		; Fork IPL (6)
	.LONG	0			; Fork PC
	.LONG	0			; Fork R3
	.LONG	0			; Fork R4
IOC$GL_PFKBINT::			;
	.LONG	0			; Fork block interlock 0 => free
;
;
; SYSTEM AQB LISTHEAD
;
IOC$GL_AQBLIST::
	.LONG	0			; SINGLE LINK, EMPTY
;
; SYSTEM-WIDE MOUNTED VOLUME LIST
;
IOC$GQ_MOUNTLST::
	.LONG	.
	.LONG	.-4
;
; TERMINAL BROADCAST MESSAGE LIST HEAD
;
IOC$GQ_BRDCST::				;
1$:	.LONG	1$,1$			; EMPTY

;
; SINGLY LINKED LIST OF CRB'S TO SCAN FOR TIMEOUTS
;
IOC$GL_CRBTMOUT::
	.LONG	0			; EMPTY
;
; GROUP GLOBAL SECTION DESCRIPTOR LIST HEAD
;

EXE$GL_GSDGRPFL::			; FORWARD LINK
	.LONG	.
EXE$GL_GSDGRPBL::			; BACKWARD LINK
	.LONG	.-4

;
; SYSTEM GLOBAL SECTION DESCRIPTOR LIST HEAD
;

EXE$GL_GSDSYSFL::			; FORWARD LINK
	.LONG	.
EXE$GL_GSDSYSBL::			; BACKWARD LINK
	.LONG	.-4

;
; GLOBAL SECTION DESCRIPTOR BLOCK LOOK ASIDE LIST HEAD
;

EXE$GL_GSDFREFL::			; FORWARD LINK
	.LONG	.
EXE$GL_GSDFREBL::			; BACKWARD LINK
	.LONG	.-4
;
; GLOBAL SECTION DESCRIPTOR DELETE PENDING LIST
;

EXE$GL_GSDDELFL::			; FORWARD LINK
	.LONG	.
EXE$GL_GSDDELBL::			; BACKWARD LINK
	.LONG	.-4

;
; WINDOW CONTROL BLOCK DELETE QUEUE - GLOBAL SECTION WINDOWS ARE
;	PLACED HERE WHEN THE SECTION IS DELETED. THEY ARE THEN
;	REMOVED FROM THIS QUEUE AND DEACCESSED.
;

EXE$GL_WCBDELFL::			; FORWARD LINK
	.LONG	.
EXE$GL_WCBDELBL::			; BACKWARD LINK
	.LONG	.-4

;
; SYSTEM WINDOW CONTROL BLOCK LIST - ALL WINDOWS CRAFTED BY MMG$INIWCB
;	AND INIT ARE PLACED HERE.
;

EXE$GL_SYSWCBFL::
	.LONG	.			; FORWARD LINK
EXE$GL_SYSWCBBL::
	.LONG	.-4			; BACKWARD LINK

;
; TIMER PERFORMANCE STATISTICS
;

	.IF NE	CA$_MEASURE		; CHECK FOR MEASUREMENT ENABLED

	.ALIGN	LONG
PMS$GL_KERNEL::				; TIME IN KERNEL MODE
	.LONG	0
PMS$GL_EXEC:				; TIME IN EXECUTIVE MOVE
	.LONG	0
PMS$GL_SUPER:				; TIME IN SUPERVISOR MODE
	.LONG	0
PMS$GL_USER:				; TIME IN USER MODE
	.LONG	0
PMS$GL_INTER:				; TIME ON INTERRUPT STACK
	.LONG	0
PMS$GL_COMPAT::				; TIME IN COMPATIBILITY MODE
	.LONG	0

	.ENDC

;
; SYSTEM ABSOLUTE TIME IN SECONDS
;
 
	.ALIGN	LONG
EXE$GL_ABSTIM::				; ABSOLUTE TIME IN SECONDS
	.LONG	0			;
 
;
; SYSTEM ABSOLUTE TIME IN NANOSECONDS
;
 
	.ALIGN	QUAD
EXE$GQ_SYSTIME::			; SYSTEM ABSOLUTE TIME IN NANOSECONDS
	TIME				; QUAD WORD OF INITIAL TIME
 
EXE$GL_PFAILTIM::			; TODR AT POWER FAIL 
	.LONG	0			;
EXE$GL_PFATIM::				; DURATION OF LAST POWER FAILURE
	.LONG	0			; IN .01 SECOND UNITS FOR POWER FAIL
					; AST.

;
; TIME DEPENDENT SCHEDULER REQUEST QUEUE
;
 
	.ALIGN	QUAD
EXE$GL_TQFL::				; FORWARD LINK OF TIME QUEUE LISTHEAD
	.LONG	DEVICETIM		; LINK TO DEVICE TIME OUT ENTRY
EXE$GL_TQBL:				; BACK LINK OF TIME QUEUE LISTHEAD
	.LONG	PERMENTRY		; LINK TO PERMENENT ENTRY
 
;
; DEVICE TIME OUT TIME QUEUE ENTRY
;
 
	.ALIGN	QUAD
DEVICETIM:				; DEVICE TIME OUT TIME QUEUE ENTRY
	.LONG	PERMENTRY		; FORWARD LINK TO PERMANENT ENTRY
	.LONG	EXE$GL_TQFL		; BACK LINK TO LISTHEAD
	.WORD	0			; SIZE OF ENTRY
	.BYTE	DYN$C_TQE		; TYPE OF DATA STRUCTURE
	.BYTE	TQE$C_SSREPT		; REQUEST TYPE OF ENTRY
	.LONG	EXE$TIMEOUT		; PC OF SYSTEM SUBROUTINE
	.LONG	IOC$GL_DEVLIST		; ADDRESS OF I/O DATA BASE LISTHEAD
	.BLKL	1			; ONE UNUSED LONGWORD
	TIME				; QUAD WORD OF EXPIRATION TIME
	.LONG	100000*100		; DELTA REPEAT TIME OF 1 SECOND
	.LONG	0			;
 
;
; PERMANENT TIME QUEUE ENTRY
;
 
	.ALIGN	QUAD
EXE$AL_TQENOREPT::			; Global name of canonical, no repeat,
					; timer queue entry
PERMENTRY:				; PERMENENT TIME QUEUE ENTRY
	.LONG	EXE$GL_TQFL		; FORWARD LINK TO LISTHEAD
	.LONG	DEVICETIM		; BACK LINK TO DEVICE TIME OUT ENTRY
	.WORD	0			; SIZE OF ENTRY
	.BYTE	DYN$C_TQE		; TYPE OF DATA STRUCTURE
					; This TQE cannot repeat.
	.BYTE	TQE$C_TMSNGL & <^CTQE$M_REPEAT> ; REQUEST TYPE OF ENTRY
	.BLKL	3			; THREE UNUSED LONGWORDS
	.LONG	^X0FFFFFFFF		; INFINITY EXPIRATION TIME
	.LONG	^X0FFFFFFFF		;
 

;
; IOC DATA BASE MUTEX
;

IOC$GL_MUTEX::				; MUTEX FOR IOC DATA BASE
	.WORD	-1			; INITIAL COUNT OF -1
	.WORD	0			; ALL FLAGS CLEARED
 

;
; COMMON EVENT LIST MUTEX
;
 
EXE$GL_CEBMTX::				; MUTEX FOR COMMON EVENT CLUSTER LIST
	.WORD	-1			; INITIAL COUNT OF -1
	.WORD	0			; ALL FLAGS CLEARED
 
;
; DYNAMIC PAGED MEMORY MUTEX
;
 
EXE$GL_PGDYNMTX::			; PAGED DYNAMIC MEMORY MUTEX
	.WORD	-1			; INITIAL COUNT OF -1
	.WORD	0			; ALL FLAGS CLEAR
;
; GLOBAL SECTION DESCRIPTOR TABLE MUTEX
;

EXE$GL_GSDMTX::				; GLOBAL SECTION DESCRIPTOR MUTEX
	.WORD	-1			; INITIAL COUNT OF -1
	.WORD	0			; ALL FLAGS CLEAR

;
; SHARED MEMORY GLOBAL SECTION DESCRIPTOR TABLE MUTEX
;

EXE$GL_SHMGSMTX::			; SHARED MEMORY GLOBAL SECTION DSC MUTEX

	.WORD	-1			; INITIAL COUNT OF -1
	.WORD	0			; ALL FLAGS CLEAR

;
; SHARED MEMORY MAILBOX TABLE MUTEX
;

EXE$GL_SHMMBMTX::			; SHARED MEMORY MAILBOX TABLE MUTEX

	.WORD	-1			; INITIAL COUNT OF -1
	.WORD	0			; ALL FLAGS CLEAR

;
; ENQUEUE/DEQUEUE TABLES MUTEX
;

EXE$GL_ENQMTX::				; ENQUEUE/DEQUEUE TABLES MUTEX
	.WORD	-1			; INITIAL COUNT OF -1
	.WORD	0			; ALL FLAGS CLEAR

;
; KNOWN FILE TABLE DATA
;

EXE$GL_KFIMTX::				; KNOWN FILE TABLE MUTEX
	.WORD	-1			; INITIAL COUNT OF -1
	.WORD	0			; ALL FLAGS CLEAR
EXE$GL_KNOWNFIL::			; ADDRESS OF KNOWN FILE LIST VECTOR
	.LONG	0			; EACH ENTRY OF WHICH POINTS TO 
					; A LIST HEAD FOR THAT KNOWN FILE LIST
KFI$GL_F11AACP::			; ADDRESS OF KNOWN FILE ENTRY FOR
	.LONG	0			; SYSTEM DISK ACP IF SHARING ACP

;
; GLOBAL PAGE TABLE
;

EXE$GL_GPT::
	.LONG	0			; ADDRESS OF FIRST FREE GLOBAL PTE
					; SETUP BY INIT
	.LONG 	0			; NO BYTES IN BLOCK
 
;
; SYSTEM VERSION NUMBER
;
SYS$GQ_VERSION::			;
	.LONG	SYS$K_VERSION
	.ASCII	/    /
 
	.ALIGN	LONG

;
; JOB CONTROLLER DATA CELLS
;
SYS$GW_IJOBCNT::	.WORD	0	; CURRENT COUNT OF INTERACTIVE LOGINS
SYS$GW_NJOBCNT::	.WORD	0	; CURRENT COUNT OF NETWORK LOGINS
SYS$GW_BJOBCNT::	.WORD	0	; CURRENT COUNT OF BATCH LOGINS

;
; PROCESS INDEX OF NEXT PROCESS TO CHECK FOR PRIORITY BOOST
;
EXE$GW_SCANPIX::	.WORD	2	; START AFTER SWAPPER AND NULL
	.ALIGN	LONG
 
;
; ADDRESS OF SYSTEM-WIDE MESSAGE SECTION
;
EXE$GL_SYSMSG::		.LONG	0	; ADDRESS OF SYSTEM-WIDE MESSAGES

;
; ADDRESS OF SYSTEM-WIDE USER RUNDOWN SERVICE VECTOR
;
EXE$GL_USRUNDWN::
	.LONG	0			; VECTOR FOR SYSTEM-WIDE RUNDOWN

	.ALIGN	QUAD
;
; DYNAMIC STORAGE REGION - NONPAGED
;
 
	.PSECT	$$$260,QUAD,WRT
EXE$GL_NONPAGED::			;
	.LONG	11			; DISABLE ALL FORK INTERRUPTS
	.LONG	0			; ADDRESS OF FIRST FREE BLOCK 
	.LONG	0			; NO BYTES IN BLOCK
EXE$GL_SPLITADR::			; LOOKASIDE I/O PACKET LIST SPLIT ADDRESS
	.LONG	0			; ADDRESS OF FIRST FREE BLOCK
 
 
;
; DYNAMIC STORAGE REGION - PAGED
;
 
	.PSECT	$$$260,QUAD,WRT
EXE$GL_PAGED::				;
	.LONG	0			; ADDRESS OF FIRST FREE BLOCK
	.LONG	0			; NO BYTES IN BLOCK
 
 
;
; POINTER TO RMS SHARED FILE DATA BASE
;
RMS$GL_SFDBASE::			; POINTER TO SHARED FILE DATA BASE
	.LONG	0			; INITIALLY EMPTY

;
; SHARED MEMORY CONTROL BLOCK LISTHEAD
;
EXE$GL_SHBLIST::			; SHARED MEMORY CONTROL BLOCKS
	.LONG	0

;
; Address of the realtime control block that describes and contains the
; bit map of SPTs used in connect to interrupt requests.
;

EXE$GL_RTBITMAP::			; Realtime SPT bit map.
	.LONG	0

;
; Cells for Machine Check recovery block
;
 
	.PSECT	$$$260,QUAD,WRT
 
MCHK$GL_MASK::
	.LONG	0			; Function mask for current recovery block
MCHK$GL_SP::
	.LONG	0			; Saved SP for return at end of block
					; 0 (zero) if no current recovery block
;
; CPU error counts
;
EXE$GL_MCHKERRS::
	.LONG	0			; Count of machine checks since boot
EXE$GL_MEMERRS::
	.LONG	0			; Count of memory errors since boot

; 
; Cell to count unexpected DW780 Unibus Adapter interrupts through vector 0
; 
IO$GL_UBA_INT0::
	.LONG	0			; Counter for UBA interrups thru vector 0
; 
; PFN of page used to remap virtual address of powerfailed adapters to
; 
EXE$GL_BLAKHOLE::
	.LONG	0			; Page to use for anything you don't care about

;
; Cell for counting unexpected interrupts through SCB NEXUS vector 0 and
; through SCB vector 0.
;
IO$GL_SCB_INT0::
	.LONG	0			; Counter for unexpected SCB interrupts
;
; Cell for initial value for wait loop counter, replacing use of hardware
; interval timer in device drivers.  Used by system macro $TIMEWAIT.
;
EXE$GL_TENUSEC::
	.LONG	0			; No. of times loop executes in 10 u-sec.
;
; Pointer to MP code, that is loaded into pool.
;
EXE$GL_MP::
	.LONG	0			; Pointer to MP code
;
; Site specific cell that can be used by users to contain the address of
; allocated regions of pool or anything else they need.
;
EXE$GL_SITESPEC::			; Site specific longword
	.LONG	0
;
; Address of top of interrupt stack (i.e. limit of stack)
;
EXE$GL_INTSTKLM::			; Top of interrupt stack
	.LONG	0
;
; Lock manager variables
;
LCK$GL_IDTBL::				; Address of lock id table
	.LONG	0
LCK$GL_NXTID::				; Next lock id to use
	.LONG	0
LCK$GL_MAXID::				; Max. lock id
	.LONG	0
LCK$GL_HASHTBL::			; Address of resource hash table
	.LONG	0
LCK$GL_HTBLCNT::			; Number of entries in hash table
	.LONG	0			; (expressed as a power of two)
LCK$GL_TIMOUTQ::			; Lock timeout queue header
	.LONG	LCK$GL_TIMOUTQ		; (used for deadlock detection)
	.LONG	LCK$GL_TIMOUTQ
LCK$GL_PRCMAP::				; Address of process bitmap
	.LONG	0			; (one bit for each process)
LCK$GB_MAXDEPTH::
	.BYTE	0			; Maximum depth of resource names

	.ALIGN	LONG


;
; DEFINE THE FLAG BITS IN EXE$GL_SYSFLAGS.
;
	$GBLINI	GLOBAL
	$VIELD	EXE,0,<-
		BLKHOLBSY,-		; THE BLAKHOLE PAGE IS BUSY
		>

;
; DEFINE A GLOBAL LONGWORD FOR SYSTEM-WIDE STATUS FLAGS.
;
EXE$GL_SYSFLAGS::			; SYSTEM-WIDE STATUS FLAGS
	.LONG	0

;
; DEFINE A LONGWORD THAT CONTAINS THE ACCOUNTING MANAGER CONTROL FLAGS
;
EXE$GL_ACMFLAGS::			; ACCOUNTING MANAGER CONTROL FLAGS
	.LONG	^C<1@ACM$V_IMAGE>	; ACCOUNTING ENABLED EXCEPT IMAGE

;
; DEFINE A LONGWORD THAT CONTAINS THE SYSTEM VIRTUAL ADDRESS OF A PTE
; (IN THE SPT) THAT MAPS THE BLAKHOLE PAGE INTO SYSTEM SPACE.
;
EXE$GL_SVAPTE::				; SVAPTE FOR PTE THAT MAPS BLAKHOLE PAGE
	.LONG	0

;
; DEFINE A QUADWORD A FUNCTION AS THE WAIT QUEUE LIST HEAD FOR THE BLAKHOLE
; PAGE.  DEVICES THAT WISH TO USE THE BLAKHOLE PAGE FOR MOUNT VERIFICATION
; WILL BE PLACED IN THE WAIT QUEUE LIST IF THE BLAKHOLE PAGE IS BUSY.
;
EXE$GQ_BLKHOLWQ::			; BLAKHOLE PAGE WAIT QUEUE LIST HEAD
	.LONG	EXE$GQ_BLKHOLWQ		; SET FLINK
	.LONG	EXE$GQ_BLKHOLWQ		; SET BLINK


	.END
