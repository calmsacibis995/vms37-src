	.TITLE	DEVICEDAT - VAX/VMS SYSTEM PERMANENT DEVICE DATABASE
	.IDENT	'V03-000'
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
; FACILITY:
;
;	VAX/VMS I/O SUBSYSTEM
;
; ABSTRACT:
;
;	SYSTEM PERMANENT DEVICE DATABASE
;
; AUTHOR:
;	R.HEINEN 3-AUG-76
;
; MODIFIED BY:
;
;	V02-028	DJD0002		Darrell Duffy		31-January-1981
;		Increase the size of OPA0: UCB to allow for extension.
;
;	V02-027	DJD0001		Darrell Duffy		4-January-1981
;		Remove references to UCB$W_IRPSIZE
;
;	V02-026	KTA0058		Kerbey T. Altmann		02-Jan-1982
;		Set ONLINE in UCB$W_STS for OPA0.
;
;	V02-025	ACG0229		Andrew C. Goldstein,	2-Dec-1981  9:38
;		Add I/O counters to WCB
;
;	V02-024	RLR0009		Robert L. Rappaport	13-Nov-1981
;		Initialize UCB$W_IRPSIZE to zero (in UCB macro) so that
;		default IRP size is selected.
;
;	V02-023	JLV0113		Jake VanNoy		10-Nov-1981
;		Add TTY$GL_DPT so port drivers can find the class driver.
;
;	V02-022	STJ0136		Steven T. Jeffreys,	30-Oct-1981
;		Created SYS$C_MBXUCBSIZ literal to represent the size
;		of the UCB that is used to clone mailbox and network UCbs.
;
;	V02-021	PHL0020		Peter H. Lipman		27-Oct-1981
;		Add DEVDEPND2 long word to fixed portion of UCB
;
;	V02-020	JLV0093		Jake VanNoy		27-Oct-1981
;		Changed TTYDEFS to $TTYDEFS.
;
;	V02-019	RLR0008		Robert L. Rappaport		28-Aug-1981
;		Extended length of boot device UCB to 30 additional
;		longwords so as to be somewhat larger than the Disk Class
;		device UCB.
;
;	V02-018	JLV0055		Jake VanNoy			24-Jul-1981
;		Made changes in OPA0 UCB, and redefined vector interface
;		to the terminal driver. Add STO_UCB's for DDT field in UCB.
;
;	VO2-017	RLR0007		Robert L. Rappaport		20-July-1981
;		Fixed inline WCB to conform to new WCB link field.
;		ASSUMEs again save the day.
;
;	V02-016	RLR0006		Robert L. Rappaport		15-July-1981
;		Fixed UCB macro to conform to new $UCBDEF that contains
;		space for UCB$W_IRPSIZE field.
;
;	V02-015	RLR0005		Robert L. Rappaport		24-June-1981
;		Fixed UCB macro to conform to new $UCBDEF that contains
;		space for UCB$L_PDT and UCB$L_DDT.
;
;	V02-014	RLR0004		Robert L. Rappaport		8-May-1981
;		Again modify CRB.
;
;	V02-013	RLR0003		Robert L. Rappaport		6-May-1981
;		Correction for mailbox CRB and general addition of ASSUME
;		statements throughout.
;
;	V02-012	RLR0002		Robert L. Rappaport		5-May-1981
;		CRB modifications.
;
;	V02-011	GWF0025		Gary W. Fowler			9-Apr-1981
;		Increase buffer size for job controller's mailbox
;
;	V02-010	RLR0001		Robert L. Rappaport for R. Spitz	19-Nov-1980
;		Use common definition for Terminal UCB extension.
;
;--
;
; SYMBOL DEFINITIONS
;
 
	$CRBDEF				; DEFINE CRB
	$DCDEF				; DEFINE DEVICE CLASSES
	$DDBDEF				; DEFINE DDB
	$DEVDEF				; DEFINE DEVICE CHARACTERISTICS
	$DYNDEF				; STRUCTURE TYPE CODE DEFINITIONS
	$IDBDEF				; DEFINE IDB
	$IPLDEF				; DEFINE IPL LEVELS
	$IRPDEF				; DEFINE IRP OFFSETS
	$TTDEF				; DEFINE TERMINAL CHARACTERISTICS
	$UCBDEF				; DEFINE UCB
	$TTYDEFS			; TTY UCB extension (must FOLLOW $UCBDEF)
	$VECDEF				; DEFINE CRB VECTOR
	$WCBDEF				; Define WCB
 
;
; LOCAL MACROS
;
	ASSUME	UCB$L_IOQFL	EQ  64
	ASSUME	UCB$L_IOQBL	EQ  68
	ASSUME	UCB$K_LENGTH	EQ  132
	.MACRO	UCB	LABEL,EXPAND=0,?IOL,?EN
UCBASE=.
LABEL::
	.LONG	0,0
	.WORD	EN-LABEL
	.BYTE	DYN$C_UCB
	.BYTE	0
	.BLKL	13
IOL:	.LONG	IOL,IOL
	.BLKL	11
	.BLKL	2			; Space for UCB$L_PDT and UCB$L_DDT.
	.BLKL	1			; Space for reserved longword.
	.BLKL	1			; DEVDEPND2 - 2nd device dependent long word
	.BLKL	EXPAND
EN:
	.ENDM
;
	.MACRO	STO_UCB	OFFSET,SIZE,VALUE
	X=.
	.=UCBASE+UCB$'OFFSET
	.'SIZE	'VALUE
	.=X
	.ENDM
 
	ASSUME	DDB$L_LINK	EQ  0
	ASSUME	DDB$L_UCB	EQ  4
	ASSUME	DDB$W_SIZE	EQ  8
	ASSUME	DDB$B_TYPE	EQ  10
	ASSUME	DDB$L_DDT	EQ  12
	ASSUME	DDB$L_ACPD	EQ  16

	.MACRO DDB NAME,NEXT,FUCB,DDT,ACP,ATYPE,DEVNAM,DRVNAM,?EN
NAME::	.LONG	NEXT
	.LONG	FUCB
	.WORD	EN-'NAME
	.BYTE	DYN$C_DDB,0
	.LONG	DDT
	.LONG	^A/'ACP/+<'ATYPE@24>
	.ASCIC	/'DEVNAM/
	.='NAME+DDB$T_DRVNAME
	.ASCIC	/'DRVNAM/
	.='NAME+DDB$C_LENGTH
EN:
	.ENDM
 
	.PSECT	$$$100,QUAD,WRT

	.SBTTL	SYSTEM DEVICE DATABASE LIST HEADS
;
; SYSTEM DEVICE DATA BLOCK (DDB) LIST HEAD
;
IOC$GL_DEVLIST::
	.LONG	SYS$GL_BOOTDDB		; START DEVICE LIST AT BOOT DEVICE
;
; SYSTEM ADAPTER CONTROL BLOCK (ADP) LIST HEAD
;
IOC$GL_ADPLIST::			;
	.LONG	0			;
;
; SYSTEM DRIVER PROLOGUE LIST HEAD
;
IOC$GL_DPTLIST::			;
	.LONG	IOC$GL_DPTLIST		;
	.LONG	IOC$GL_DPTLIST		;
;
; TERMINAL CLASS DRIVER DPT POINTER
;
TTY$GL_DPT::				;
	.LONG	0			;


	.SBTTL	SYSTEM BOOT DEVICE DATABASE
;
; BOOT DEVICE DDB
;
	DDB	SYS$GL_BOOTDDB,OPA$GL_DDB,SYS$GL_BOOTUCB,0,<F11>,1
;
; UCB FOR SYSTEM BOOT DEVICE
;
	UCB	SYS$GL_BOOTUCB,30
		STO_UCB	B_FIPL,BYTE,8
		STO_UCB	B_DIPL,BYTE,21
		STO_UCB	L_OWNUIC,LONG,<^X010001>
		STO_UCB	L_DDB,LONG,SYS$GL_BOOTDDB
		STO_UCB	L_DEVCHAR,LONG,<<DEV$M_FOD!-
			DEV$M_DIR!-
			DEV$M_AVL!-
			DEV$M_ELG!-
			DEV$M_SHR!-
			DEV$M_IDV!-
			DEV$M_ODV!-
			DEV$M_RND>>
		STO_UCB	B_DEVCLASS,BYTE,DC$_DISK
		STO_UCB	W_DEVBUFSIZ,WORD,512
		STO_UCB	B_ERTCNT,BYTE,8
		STO_UCB	B_ERTMAX,BYTE,8
	

	.SBTTL	SYSTEM CONSOLE DEVICE DATABASE
;
; CONSOLE TERMINAL DDB
;
	DDB	OPA$GL_DDB,MB$GL_DDB,OPA$UCB0,,,0,<OPA>,<OPERATOR>
;
; CONSOLE UCB
;
	UCB	OPA$UCB0,<<UCB$C_TT_LENGTH - UCB$C_LENGTH + 3 + 64> / 4>
		STO_UCB	B_FIPL,BYTE,8
		STO_UCB	B_DIPL,BYTE,20
		STO_UCB	L_OWNUIC,LONG,<^X010001>
		STO_UCB	L_CRB,LONG,OPA$CRB
		STO_UCB	L_DDB,LONG,OPA$GL_DDB
		STO_UCB	L_DEVCHAR,LONG,<<DEV$M_REC!-
			DEV$M_AVL!-
			DEV$M_CCL!-
			DEV$M_TRM!-
			DEV$M_IDV!-
			DEV$M_ODV>>
		STO_UCB	B_DEVCLASS,BYTE,DC$_TERM
		STO_UCB	B_DEVTYPE,BYTE,DT$_LA36
		STO_UCB	W_DEVBUFSIZ,WORD,132
		STO_UCB	W_STS,WORD,UCB$M_ONLINE
		STO_UCB	L_DEVDEPEND,LONG,<<TT$M_LOWER!TT$M_TTSYNC!TT$M_WRAP>>
		STO_UCB	L_DEVDEPEND+3,BYTE,24
		STO_UCB	W_TT_DESIZE,WORD,132
		STO_UCB	L_TT_DECHAR,LONG,<<TT$M_LOWER!TT$M_TTSYNC!TT$M_WRAP>>
		STO_UCB	L_TT_DECHAR+3,BYTE,24
		STO_UCB	W_TT_SPEED,WORD,TT$C_BAUD_300
		STO_UCB	B_TT_DETYPE,BYTE,TT$_LA36
		STO_UCB W_TT_DESPEE,WORD,TT$C_BAUD_300
;
; CONSOLE CRB
;
OPA$CRB::
	.LONG	0,0			;
	.WORD	CD-OPA$CRB		; SIZE
	.BYTE	DYN$C_CRB		; TYPE IS CRB
	.BYTE	0			; UNUSED
	.LONG	1			; REF COUNT=1 AND NEVER BUSY
	ASSUME	CRB$L_AUXSTRUC	EQ  16
	.LONG	0			; Auxiliary structure ptr.

	ASSUME	CRB$L_TIMELINK	EQ  20
	.LONG	0			; CRB thread for periodic wakeups.

	ASSUME	CRB$L_DUETIME	EQ  24
	.LONG	0			; Time when to periodically awaken

	ASSUME	CRB$L_TOUTROUT	EQ  28
	.LONG	0			; Routine to call at periodic awakening

	ASSUME	CRB$L_LINK	EQ  32
	.LONG	0			; NO NEXT CRB
CON$INTDISI::				;
	ASSUME	CON$INTDISI-OPA$CRB	EQ  CRB$L_INTD

	ASSUME	VEC$Q_DISPATCH	EQ  0
	PUSHR	#^M<R0,R1,R2,R3,R4,R5>	; SAVE REGISTERS
	JSB	G^CON$INTINP		; INPUT INTERRUPT SERVICE

	ASSUME	VEC$L_IDB	EQ  8
	.LONG	OPA$IDB			; POINTER TO IDB

	ASSUME	VEC$L_INITIAL	EQ  12
	.LONG	CON$INITIAL		; INITIALIZE CONTROLLER ENTRY POINT

	ASSUME	VEC$W_MAPREG	EQ  16
	ASSUME	VEC$B_NUMREG	EQ  18
	ASSUME	VEC$B_DATAPATH	EQ  19
	.LONG	0			; MAP AND DATA PATH ALLOCATION CONTROL

	ASSUME	VEC$L_ADP	EQ  20
	.LONG	0			; ADDRESS OF ADP

	ASSUME	VEC$L_UNITINIT	EQ  24
	.LONG	CON$INITLINE		; INITIALIZE UNIT

	ASSUME	VEC$L_START	EQ  28
	.LONG	CON$STARTIO		; START OUTPUT ON UNIT

	ASSUME	VEC$L_UNITDISC	EQ  32
	.LONG	CON$DISCON		; DISCONNECT UNIT
	ASSUME	VEC$K_LENGTH	EQ  36

CON$INTDISO::				;
	ASSUME	CON$INTDISO-OPA$CRB	EQ  CRB$L_INTD2

	ASSUME	VEC$Q_DISPATCH	EQ  0
	PUSHR	#^M<R0,R1,R2,R3,R4,R5>	; SAVE REGISTERS
	JSB	G^CON$INTOUT		; OUTPUT INTERRUPT SERVICE
	.LONG	OPA$IDB			; POINTER TO IDB

	ASSUME	VEC$L_IDB	EQ  8
CD:
 
;
; CONSOLE IDB
;
OPA$IDB:
	ASSUME	IDB$L_CSR	EQ  0
	.LONG	0			; CSR ADDRESS

	ASSUME	IDB$L_OWNER	EQ  4
	.LONG	0			; OWNER UCB ADDRESS
	.WORD	ID-OPA$IDB		; SIZE OF IDB
	.BYTE	DYN$C_IDB		; TYPE OF STRUCTURE
	.BYTE	0			; UNUSED

	ASSUME	IDB$W_UNITS	EQ  12
	.WORD	3			; NUMBER OF UNITS
	.WORD	0			; UNUSED

	ASSUME	IDB$L_ADP	EQ  16
	.LONG	0			; ADAPTER ADDRESS

	ASSUME	IDB$L_UCBLST	EQ  20
	.LONG	OPA$UCB0		; UNIT 0 UCB ADDRESS
	.LONG	0			; UNIT 1 UCB ADDRESS (FLOPPY)
	.LONG	0			; UNIT 1 INPUT UCB ADDRESS (FLOPPY)
ID:

	.SBTTL	SYSTEM PERMANENT MAILBOX DATABASE
 
;
; MAILBOX DDB
;
	DDB	MB$GL_DDB,NL$GL_DDB,MB$GL_UCB1,MB$DDT,,0,<MBA>,<MBDRIVER>
;
; CLONE MAILBOX UCB
;
;
; NOTE THAT THIS UCB IS NOT IN THE DDB'S UCB LIST
;
	UCB	 MB$UCB0,0		
		STO_UCB	W_MB_SEED,WORD,0
		STO_UCB	B_FIPL,BYTE,IPL$_MAILBOX
		STO_UCB	B_DIPL,BYTE,IPL$_MAILBOX
		STO_UCB	W_MSGMAX,WORD,20
		STO_UCB	W_BUFQUO,WORD,-1
		STO_UCB	L_OWNUIC,LONG,<^X010001>
		STO_UCB	L_CRB,LONG,SYS_CRB
		STO_UCB	L_DDB,LONG,MB$GL_DDB
		STO_UCB	L_LINK,LONG,MB$GL_UCB1
		STO_UCB	L_DEVCHAR,LONG,<<DEV$M_REC!-
			DEV$M_AVL!-
			DEV$M_IDV!-
			DEV$M_MBX!-
			DEV$M_ODV!-
			DEV$M_SHR>>
		STO_UCB	B_DEVCLASS,BYTE,DC$_MAILBOX
		STO_UCB	B_DEVTYPE,BYTE,DT$_MBX
		STO_UCB	W_DEVBUFSIZ,WORD,256
		STO_UCB	W_REFC,WORD,1
		STO_UCB	W_UNIT,WORD,0
		STO_UCB	W_STS,WORD,UCB$M_ONLINE
		STO_UCB	W_DEVSTS,WORD,UCB$M_PRMMBX
		STO_UCB L_DDT,LONG,MB$DDT
MB$MB0_END:
SYS$C_MBXUCBSIZ	==	<MB$MB0_END - MB$UCB0>

;
; SYSTEM JOB CONTROLLER MAILBOX
;
SYS$GL_JOBCTLMB::			
SYS$C_JOBCTLMB==^A/MBA1/
	UCB	 MB$GL_UCB1,0		
		STO_UCB L_FQFL,LONG,MB$GL_UCB1
		STO_UCB L_FQFL+4,LONG,MB$GL_UCB1
		STO_UCB	B_FIPL,BYTE,IPL$_MAILBOX
		STO_UCB	B_DIPL,BYTE,IPL$_MAILBOX
		STO_UCB	W_MSGMAX,WORD,60
		STO_UCB	W_BUFQUO,WORD,-1
		STO_UCB	W_VPROT,WORD,<^X0FF0F>
		STO_UCB	L_OWNUIC,LONG,<^X010004>
		STO_UCB	L_CRB,LONG,SYS_CRB
		STO_UCB	L_DDB,LONG,MB$GL_DDB
		STO_UCB	L_LINK,LONG,MB$GL_UCB2
		STO_UCB	L_DEVCHAR,LONG,<<DEV$M_REC!-
			DEV$M_AVL!-
			DEV$M_MBX!-
			DEV$M_IDV!-
			DEV$M_ODV!-
			DEV$M_SHR>>
		STO_UCB	B_DEVCLASS,BYTE,DC$_MAILBOX
		STO_UCB	W_DEVBUFSIZ,WORD,1024
		STO_UCB	W_REFC,WORD,1
		STO_UCB	W_UNIT,WORD,1
		STO_UCB	W_STS,WORD,UCB$M_ONLINE
		STO_UCB	W_DEVSTS,WORD,<UCB$M_PRMMBX+^X08000>
		STO_UCB L_DDT,LONG,MB$DDT
;
; SYSTEM OPERATOR MAILBOX
;
SYS$GL_OPRMBX::
SYS$C_OPRMBX==^A/MBA2/
	UCB	 MB$GL_UCB2,0		
		STO_UCB L_FQFL,LONG,MB$GL_UCB2
		STO_UCB L_FQFL+4,LONG,MB$GL_UCB2
		STO_UCB	B_FIPL,BYTE,IPL$_MAILBOX
		STO_UCB	B_DIPL,BYTE,IPL$_MAILBOX
		STO_UCB	W_MSGMAX,WORD,20
		STO_UCB	W_BUFQUO,WORD,-1
		STO_UCB	W_VPROT,WORD,<^X0FF0F>
		STO_UCB	L_OWNUIC,LONG,<^X010004>
		STO_UCB	L_CRB,LONG,SYS_CRB
		STO_UCB	L_DDB,LONG,MB$GL_DDB
		STO_UCB	L_DEVCHAR,LONG,<<DEV$M_REC!-
			DEV$M_AVL!-
			DEV$M_MBX!-
			DEV$M_IDV!-
			DEV$M_ODV!-
			DEV$M_SHR>>
		STO_UCB	B_DEVCLASS,BYTE,DC$_MAILBOX
		STO_UCB	W_DEVBUFSIZ,WORD,256
		STO_UCB	W_REFC,WORD,1
		STO_UCB	W_UNIT,WORD,2
		STO_UCB	W_STS,WORD,UCB$M_ONLINE
		STO_UCB	W_DEVSTS,WORD,UCB$M_PRMMBX
		STO_UCB L_DDT,LONG,MB$DDT

	.SBTTL	NULL DEVICE (NLA) DATABASE
;
; NLA DDB
;
	DDB	NL$GL_DDB,0,NL$GL_UCB0,NL$DDT,,0,<NLA>,<NLDRIVER>
 
;
; NL UCB FOR UNIT 0
;
	UCB	 NL$GL_UCB0,0		
		STO_UCB	B_FIPL,BYTE,8
		STO_UCB	B_DIPL,BYTE,8
		STO_UCB	L_OWNUIC,LONG,<^X010001>
		STO_UCB	L_CRB,LONG,SYS_CRB
		STO_UCB	L_DDB,LONG,NL$GL_DDB
		STO_UCB	L_DEVCHAR,LONG,<<DEV$M_REC!-
			DEV$M_AVL!-
			DEV$M_MBX!-
			DEV$M_IDV!-
			DEV$M_ODV!-
			DEV$M_SHR>>
		STO_UCB	B_DEVCLASS,BYTE,DC$_MAILBOX
		STO_UCB	W_DEVBUFSIZ,WORD,132
		STO_UCB	W_REFC,WORD,1
		STO_UCB	W_UNIT,WORD,0
		STO_UCB	W_STS,WORD,UCB$M_ONLINE
		STO_UCB L_DDT,LONG,NL$DDT

	.SBTTL	NETWORK DEVICE DATABASE
;
; NETWORK DEVICE DATA BLOCK
;
;
; NETWORK WINDOW CONTROL BLOCK - SHARED BY ALL UCB'S
;
NET$WCB::
	.LONG	0			; WLFL
	.LONG	0			; WLBL
	.WORD	10$-NET$WCB		; SIZE
	.BYTE	DYN$C_WCB		; CALL IT A WCB

	ASSUME	WCB$B_ACCESS	EQ  11
	.BYTE	0			; ACCESS BITS

	ASSUME	WCB$L_PID	EQ  12
	.LONG	0			; PID

	ASSUME	WCB$L_ORGUCB	EQ  16
	.LONG	0			; ORGUCB

	ASSUME	WCB$W_ACON	EQ  20
	ASSUME	WCB$W_NMAP	EQ  22
	.LONG	0			; ACON AND NMAP

	ASSUME	WCB$L_FCB	EQ  24
	.LONG	0			; FCB

	ASSUME	WCB$L_RVT	EQ  28
	.LONG	0			; RVT

	ASSUME	WCB$L_LINK	EQ  32
	.LONG	0			; LINK

	ASSUME	WCB$L_READS	EQ  36
	.LONG	0			; READS EXECUTED

	ASSUME	WCB$L_WRITES	EQ  40
	.LONG	0			; WRITES EXECUTED

	ASSUME	WCB$L_STVBN	EQ  44
	.LONG	0			; STVBN
	ASSUME	WCB$K_LENGTH	EQ  48
10$:
 
;
; COMMON CRB FOR MAILBOX TYPE DEVICES
;
SYS_CRB:				;
	.LONG	0,0			; CRB LIST HEAD
	.WORD	10$-SYS_CRB		; SIZE
	.BYTE	DYN$C_CRB		; TYPE
	.BYTE	0			; SPARE BYTE
	.LONG	0			; REF COUNT
	ASSUME	CRB$L_AUXSTRUC	EQ  16
	.LONG	0			; Auxiliary structure ptr.

	ASSUME	CRB$L_TIMELINK	EQ  20
	.LONG	0			; CRB thread for periodic wakeups.

	ASSUME	CRB$L_DUETIME	EQ  24
	.LONG	0			; Time when to periodically awaken

	ASSUME	CRB$L_TOUTROUT	EQ  28
	.LONG	0			; Routine to call at periodic awakening

	ASSUME	CRB$L_LINK	EQ  32
	.LONG	0			; NO NEXT CRB

	ASSUME	.-SYS_CRB	EQ  CRB$L_INTD
	ASSUME	VEC$Q_DISPATCH	EQ  0
	.LONG	0,0			; NO INTERRUPT VECTOR

	ASSUME	VEC$L_IDB	EQ  8
	.LONG	SYS_CRB			; POINTER TO FAKE IDB

	ASSUME	VEC$L_INITIAL	EQ  12
	ASSUME	VEC$W_MAPREG	EQ  16
	ASSUME	VEC$B_NUMREG	EQ  18
	ASSUME	VEC$B_DATAPATH	EQ  19
	ASSUME	VEC$L_ADP	EQ  20
	ASSUME	VEC$L_UNITINIT	EQ  24
	ASSUME	VEC$L_START	EQ  28
	ASSUME	VEC$L_UNITDISC	EQ  32
	.LONG	0,0,0,0,0,0		; NO INITIALIZATION FOR CONTROLLER OR UNIT

	ASSUME	VEC$K_LENGTH	EQ  36

10$:
	ASSUME	10$-SYS_CRB	EQ  CRB$L_INTD2
	.END
