	.TITLE	SYSGETDEV - System Services to Get Device Information
	.IDENT	'V03-000'
 
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
; AUTHOR: Peter H. Lipman,  CREATION DATE: 20-Oct-1981
;
; MODIFIED BY:
;
;	V02-012	MSH0001		Maryann Hinden		19-Feb-1982
;		Fix PROBE problem.
;
;	V02-011	PHL0029		Peter H. Lipman		28-Jan-1982
;		Read lock the logical name mutex to safely read the
;		logical name table entry for the LOGVOLNAM item.
;		Use the new EXE$PROBEW_DSC routine for both space and
;		speed improvement.
;
;	V02-010	PHL0028		Peter H. Lipman		19-Jan-1982
;		Eliminate DEVDPEND2 from the DIB.
;
;	V02-009	PHL0027		Peter H. Lipman		2-Dec-1981
;		Require all item buffers to be at least 4 bytes.
;
;	V02-008	PHL0026		Peter H. Lipman		24-Nov-1981
;		Use new common EXE$PROBEW routine for write check
;		of item buffers.
;
;	V02-007	PHL0024		Peter H. Lipman		10-Nov-1981
;		Reserved argument for wild card context is the
;		address of a buffer descriptor at the end of the 
;		argument list
;
;		Remove CTLNAM, add REFCNT, TRANSCNT, MOUNTCNT, CLUSTER,
;		MAXFILES, SERIALNUM, ACPPID, ACPTYPE
;
;	V02-006	PHL0023		Peter H. Lipman		3-Nov-1981
;		Scan Mount Lists for LOGVOLNAM item.
;
;	V02-005	PHL0020		Peter H. Lipman		10-Oct-1981
;		Add new $GETDVI system service, recode $GETDEV and $GETCHN
;		to use this code.  $GETDEV and $GETCHN are hereby frozen.
;		No new items will be added to the DIB.  $GETDVI should be used
;		by all new code.
;
;	V02-004	BLS0085		Benn Schreiber		28-Sep-1981
;		Temporary fix to return ss$_normal if buffer too small
;		to return devdepnd2.  This will be removed when $GETDVI
;		is completed and devdepnd2 is returned by that service.
;
;	V02-003	JLV0072		Jake VanNoy		26-Aug-1981
;		Add filling in of DIB$L_DEVDEPND2 for terminals.
;
;	V0002	ACG0063		Andrew C. Goldstein,	4-Oct-1979  15:14
;		Add volume size to GETDEV buffer
;
;**
;
; System Services to Get Device Information
;
;	$GETDEV and $GETCHN are obsolete and frozen starting with V3
;	$GETDVI replaces them and all new items are only available
;		via this system service.
;
; MACRO LIBRARY CALLS
;
 
	$AQBDEF				; Define AQB offsets
	$CCBDEF				; Define CCB offsets
	$DCDEF				; Define device type codes
	$DDBDEF				; Define DDB offsets
	$DIBDEF				; Define DIB offsets
	$DVIDEF				; Define Device/Volume Information constants
	$LOGDEF				; Define logical name table entry offsets
	$MTLDEF				; Define Mount List entry offsets
	$RVTDEF				; Define RVT offsets
	$SSDEF				; Define system status values
	$UCBDEF				; Define UCB offsets
	$VCBDEF				; Define VCB offsets
 
;
; LOCAL MACROS
;
; Generate device information control table - $GETDEV and $GETCHN only
;
 
	.MACRO	GENTAB OFFSET,LENGTH
	.BYTE	LENGTH
	.ENDM	GENTAB

;
; Generate field definitions for item value long word
;
	.MACRO	DVIBITS	NAME,SIZE
	DVI_V_'NAME' = DVI_BIT
	DVI_S_'NAME' = SIZE
	DVI_BIT = DVI_BIT + SIZE
	.ENDM	DVIBITS

;
; Macro for $GETDVI items requiring special processing
;
	.MACRO	SPECIAL NAME
	.ADDRESS SPC_'NAME'
	.ENDM	SPECIAL

;
; Macro for $GETDVI items that need no special processing
;
	.MACRO	ITEM	OFFSET,BYTCNT=0,STRUCT,DATATYPE=VALUE,DEVTYPE=ANY_DEV
	.IF IDN	<STRUCT><RVT>
	OFFVAL	= DVI_C_'OFFSET'
	.IFF
	OFFVAL	= 'STRUCT'$'OFFSET'
	.ENDC
	.LONG	<OFFVAL@DVI_V_OFFSET> ! -
		<'BYTCNT'@DVI_V_BYTCNT> ! -
		<DVI_C_'STRUCT'@DVI_V_STRUCT> ! -
		<DVI_C_'DATATYPE'@DVI_V_DATATYPE> ! -
		<DVI_C_'DEVTYPE'@DVI_V_DEVTYPE>
	.ENDM	ITEM
;
; LOCAL SYMBOLS
;
; $GETDEV, $GETCHN Argument List Offset Definitions
;
 
	CHAN_DEVNAM=4			; I/O channel number
					; Device name descriptor
	PRILEN=8			; Address to store length of primary string
	PRIBUF=12			; Address of primary buffer descriptor
	SCDLEN=16			; Address to store length of secondary string
	SCDBUF=20			; Address of secondary buffer descriptor
;
; Bit Field Definititions for Item Value long word
;
	DVI_BIT = 0
	DVIBITS	OFFSET,10		; Offset in specified data structure
	DVIBITS	BYTCNT,10		; Size of item in bytes
	DVIBITS	STRUCT,3		; Structure (UCB, VCB)
	DVIBITS	DATATYPE,3		; Type of data item
	DVIBITS	DEVTYPE,1		; Device to which item is specific
;
; Datatype symbols for $GETDVI
;
	DVI_C_VALUE = 0			; Binary Value
	DVI_C_CSTRING = 1		; Counted String
;
; Structure code symbols for $GETDVI
;
	DVI_C_UCB = 0			; Unit Control Block
	DVI_C_DDB = 1			; Device Data Block
	DVI_C_VCB = 2			; Volume Control Block
	DVI_C_RVT = 3			; Relative Volume Table
	DVI_C_AQB = 4			; ACP Queue Header Block
;
; Device type codes for $GETDVI
;
	DVI_C_ANY_DEV = 0			; Any device
	DVI_C_DISK = 1			; Disk only
;
; Relative Volume Table Item Sub Codes for $GETDVI - in OFFSET field
;
	DVI_C_VOLCOUNT = 0		; Count of volumes in volume set
	DVI_C_ROOTDEVNAM = 1		; Device name for first volume in vol set
	DVI_C_NEXTDEVNAM = 2		; Device name for next volume in  vol set
;
; Local Storage Offsets
;
	$OFFSET	0,NEGATIVE,<-
	<PRIMARY_UCB,16>, -		; Primary UCB/VCB, Secondary UCB/VCB
	<CURRENT_UCB,8>, -		; Current UCB/VCB
	RETLEN_ADR,-			; Address to return length
	<SCRATCH,LOG$C_NAMLENGTH>, -	; Scratch storage
	<SCRATCH_SIZE,0>, -		; Size of local storage
	STATUS, -			; Returned Success Status
	SAVED_ASTADR, -			; Saved ASTADR parameter
	IOUNLOCK, -			; Need to unlock I/O data base if LBS
	>
	RETLEN = STATUS+2		; Return length $GETDEV, $GETCHN
	PRIMARY_VCB = PRIMARY_UCB+4	; Primary VCB address
	SECONDARY_UCB = PRIMARY_UCB+8	; Seconday UCB address
	SECONDARY_VCB = PRIMARY_UCB+12	; Secondary VCB address
	CURRENT_VCB = CURRENT_UCB+4	; Current VCB address
;
; The following ASSUMES guarantee the consistency of the ACP type
; definition in $AQBDEF and the user visible constants in $DVIDEF
;
	ASSUME	AQB$K_F11V1 EQ DVI$C_ACP_F11V1 ; FILES-11 STRUCTURE LEVEL 1
	ASSUME	AQB$K_F11V2 EQ DVI$C_ACP_F11V2 ; FILES-11 STRUCTURE LEVEL 2
	ASSUME	AQB$K_MTA EQ DVI$C_ACP_MTA ; MAGTAPE
	ASSUME	AQB$K_NET EQ DVI$C_ACP_NET ; NETWORKS
	ASSUME	AQB$K_REM EQ DVI$C_ACP_REM ; REMOTE I/O
	ASSUME	AQB$K_JNL EQ DVI$C_ACP_JNL ; JOURNAL
 
;
; LOCAL DATA
;
; Device Information Control Table - $GETDEV, $GETCHN
;
 
	.PSECT	Y$EXEPAGED
DEVTAB:					;
	GENTAB	L_DEVCHAR,4		; Device characteristics
	GENTAB	B_DEVCLASS,1		; DEVCLASS - Device Class
	GENTAB	B_DEVTYPE,1		; DEVTYPE - Device Type
	GENTAB	W_DEVBUFSIZ,2		; DEVBUFSIZ - buffer size
	GENTAB	L_DEVDEPEND,4		; DEVDEPEND - device dependent info
	GENTAB	W_UNIT,<2+2>		; Device unit number
					; DIB$W_DEVNAMOFF <-- 0
	GENTAB	L_PID,4			; Device owner process identification
	GENTAB	L_OWNUIC,4		; Device owner user identification code
	GENTAB	W_VPROT,2		; Device protection mask
	GENTAB	W_ERRCNT,2		; Device error count
	GENTAB	L_OPCNT,<4+2>		; Device operations complete count
					; DIB$W_VOLNAMOFF <-- 0
	GENTAB	W_RECORDSZ,2		; Blocked Record Size
	.BYTE	-DIB$L_MAXBLOCK+DIB$T_DEVNAME ; Skip over string area
	GENTAB	L_MAXBLOCK,4		; Disk size in blocks
	.BYTE	0			; End of table
;
; Item Table - Items must be added at the end
;
DVI_ITEM_TABLE:
;
; The item codes down to MAXBLOCK parallel the DEVTAB above
; DO NOT REORDER OR SEPARATE
;
	.LONG	0			; Index 0 is not used
	ITEM	L_DEVCHAR,4,UCB		; DEVCHAR - Device characteristics
	ITEM	B_DEVCLASS,1,UCB	; DEVCLASS - Device Class
	ITEM	B_DEVTYPE,1,UCB		; DEVTYPE - Device Type
	ITEM	W_DEVBUFSIZ,2,UCB	; DEVBUFSIZ - Width
	ITEM	L_DEVDEPEND,4,UCB	; DEVDEPEND - Device Geometry
	ITEM	W_UNIT,2,UCB		; UNIT - Binary unit number
	ITEM	L_PID,4,UCB		; PID - Owner Process ID
	ITEM	L_OWNUIC,4,UCB		; OWNUIC - Owner UIC
	ITEM	W_VPROT,2,UCB		; VPROT - Volume Protection
	ITEM	W_ERRCNT,2,UCB		; ERRCNT - Error Count
	ITEM	L_OPCNT,4,UCB		; OPCNT - Operation Count
	ITEM	W_RECORDSZ,2,VCB	; RECSIZ - Blocked record size
	ITEM	L_MAXBLOCK,4,UCB,,DISK	; MAXBLOCK - Max Blocks on Vol
	ITEM	L_DEVDEPND2,4,UCB	; DEVDEPEND2 - Terminal bits
	ITEM	W_REFC,2,UCB		; REFCNT - Reference count on UCB
	SPECIAL	DEVNAM			; DEVNAM - Device Name String
	SPECIAL	VOLNAM			; VOLNAM - Volume Name
	ITEM	B_SECTORS,1,UCB,,DISK	; SECTORS - Geometry of disk
	ITEM	B_TRACKS,1,UCB,,DISK	; TRACKS - Geometry of disk
	ITEM	W_CYLINDERS,2,UCB,,DISK	; CYLINDERS - Geometry of disk
	ITEM	L_FREE,4,VCB,,DISK	; FREEBLOCKS - Count of free blocks on disk
	SPECIAL	LOGVOLNAM		; LOGVOLNAM - logical volume name
	SPECIAL	VOLNUMBER		; VOLNUMBER - volume number of this volume
	ITEM	VOLCOUNT,,RVT,,DISK	; VOLCOUNT - Number of volumes in vol set
	ITEM	ROOTDEVNAM,,RVT,,DISK	; ROOTDEVNAM - Device name of 1st vol in set
	ITEM	NEXTDEVNAM,,RVT,,DISK	; NEXTDEVNAM - Next device name in vol set
	ITEM	W_TRANS,2,VCB		; TRANSCNT - Transaction count on volume
	ITEM	W_MCOUNT,2,VCB,,DISK	; MOUNTCNT - Mount count for volume
	ITEM	W_CLUSTER,2,VCB,,DISK	; CLUSTER - Allocation cluster
	ITEM	L_MAXFILES,4,VCB,,DISK	; MAXFILES - Maximum files on volume
	ITEM	L_SERIALNUM,4,VCB,,DISK	; SERIALNUM - Volume serial number
	ITEM	L_ACPPID,4,AQB		; ACPPID - ACP Process ID
	ITEM	B_ACPTYPE,1,AQB		; ACPTYPE - ACP type
;
; *****  Add items in front of this comment *****
;
	MAX_ITEM_CODE = <<.-DVI_ITEM_TABLE>/2>-1

	.SBTTL	$GETCHN - Get Channel Information
;+
; EXE$GETCHN - Get channel information
;
; This service provides the capability to retrieve information about a
; device that is assigned to a channel and its associated device if any.
;
; INPUTS:
;
;	CHAN(AP) = I/O channel number.
;	PRILEN(AP) = Address to store length of primary device information.
;	PRIBUF(AP) = Address of primary buffer descriptor.
;	SCDLEN(AP) = Address to store length of secondary device information.
;	SCDBUF(AP) = Address of secondary buffer descriptor.
;
;	R4 = Current process PCB address.
;
; OUTPUTS:
;
;	R0 low bit clear indicates failure to retrieve device information.
;
;		R0 = SS$_ACCVIO - primary or secondary buffer descriptor
;			cannot be read by calling access mode, or primary
;			buffer, primary buffer length, secondary buffer, or
;			secondary buffer length cannot be written by calling
;			access mode.
;
;		R0 = SS$_IVCHAN - invalid channel number specified.
;
;		R0 = SS$_NOPRIV - specified channel is not assigned to a
;			device or the calling access mode does not have
;			privilege to access the channel.
;
;	R0 low bit set indicates successful completion.
;
;		R0 = SS$_BUFFEROVF - normal completion, all characteristic
;			information did not fit in specified buffer(s).
;
;		R0 = SS$_NORMAL - normal completion, all characteristic
;			information transfered.
;-
 
	.ENABL	LSB

	.ENTRY	EXE$GETCHN,^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>
	MOVAB	W^DVI_USE_CHAN,R1	; Use channel parameter
	BRB	10$			; Join GETDEV code

	.SBTTL	$GETDEV - Get Device Information
;+
; EXE$GETDEV - Get device information
;
; This service provides the capability to retrieve information about a
; device and its associated device if any.
;
; INPUTS:
;
;	DEVNAM(AP) = Address of device name descriptor.
;	PRILEN(AP) = Address to store length of primary device information.
;	PRIBUF(AP) = Address of primary buffer descriptor.
;	SCDLEN(AP) = Address to store length of secondary device information.
;	SCDBUF(AP) = Address of secondary buffer descriptor.
;
;	R4 = Current process PCB address.
;
; OUTPUTS:
;
;	R0 low bit clear indicates failure to retrieve device information.
;
;		R0 = SS$_ACCVIO - Device name string, device name string
;			descriptor, primary buffer descriptor, or secondary
;			buffer descriptor cannot be read by calling access
;			mode, or primary buffer, primary buffer length,
;			secondary buffer, or secondary buffer length cannot
;			be written by calling access mode.
;
;		R0 = SS$_IVDEVNAM - Device name string contains invalid
;			characters, or no device device name string descriptor
;			specified.
;
;		R0 = SS$_IVLOGNAM - Zero or greater than maximum length device
;			name string specified.
;
;		R0 = SS$_NONLOCAL - Device exists on a remote system.
;
;		R0 = SS$_NOSUCHDEV - Specified device does not exist on host
;			system.
;
;	R0 low bit set indicates successful completion.
;
;		R0 = SS$_BUFFEROVF - Normal completion, all characteristic
;			information did not fit in specified buffer(s).
;
;		R0 = SS$_NORMAL - Normal completion, all characteristic
;			information transfered.
;-
 
	.ENTRY	EXE$GETDEV,^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>
	MOVAB	W^DVI_USE_DEVNAM,R1	; Use device name descriptor
;
; R1 = address of USE_CHAN or USE_DEVNAM entry point
;
10$:	MOVAL	SCRATCH_SIZE-4(SP),SP	; Reserve scratch storage
					; include uninitialized return status
	CLRQ	-(SP)			; Init SAVED_ASTADR and IOUNLOCK flag
;
; The above stack locations are all referenced by offsets from FP
;
	MOVL	CHAN_DEVNAM(AP),R0	; Get CHAN or DEVNAM parameter
	JSB	(R1)			; Set up UCB's to be used
	BLBC	R0,40$			; Branch if error
	MOVL	#SS$_NORMAL,STATUS(FP)	; Init normal success status
					; Overwrite possible SS$_CONCEALED
	CLRL	R9			; Primary device items
	MOVQ	PRILEN(AP),R7		; Get primary buffer parameters
	BSBB	FILBUF			; Fill primary buffer
	BLBC	R0,40$			; Branch if error
	MOVL	#1,R9			; Secondary device items
	MOVQ	SCDLEN(AP),R7		; Get secondary buffer parameters
	BSBB	FILBUF			; Fill secondary buffer
	BLBC	R0,40$			; Branch if error
30$:	MOVZWL	STATUS(FP),R0		; Get normal or overflow status to return
40$:	BLBS	IOUNLOCK(FP),50$	; Branch if must unlock I/O data base
	RET
50$:	BRW	IOC$UNLOCK		; Unlock I/O database and return

	.DSABL	LSB
 
;
; Subroutine to fill characteristic buffer
;
; INPUTS:
;
;	R7 = Address to return length of data stored
;	R8 = Descriptor of DIB buffer
;	R9 = 0 if getting primary characteristics
;	   = 1 if getting secondary characteristics
;
; OUTPUTS:
;
;	R0 = Status
;	R1 through R11 altered
;
ACCVIO_1:
	BRW	ACCVIO
FILBUF:	TSTL	R8			; Any buffer specified?
	BNEQ	5$			; Branch if yes
	BRW	160$			; No, nothing to do
5$:	MOVQ	PRIMARY_UCB(FP)[R9],CURRENT_UCB(FP) ; Set current UCB/VCB address
	MOVL	R7,RETLEN_ADR(FP)	; Save address for return length
	IFNORD	#8,(R8),ACCVIO_1	; ACCVIO if cannot read out buf decriptor
	MOVL	4(R8),R7		; Get the address
	MOVZWL	(R8),R6			; and the size of the buffer
	ASSUME  DIB$K_LENGTH LE 512
	CMPW	R6,#DIB$K_LENGTH	; If buffer is larger than needed
	BGEQU	20$			; then use the maximum size for probe
	MOVW	#SS$_BUFFEROVF,STATUS(FP) ; Record buffer overflow status
	BRB	30$
20$:	MOVZBL	#DIB$K_LENGTH,R6	; Actual size of data to be returned
30$:	MOVW	R6,RETLEN(FP)		; Remember how much data will be returned
	IFNOWRT	R6,(R7),ACCVIO		; Can entire buffer be written?
	MOVAL	W^DEVTAB,R11		; Address of item lengths
	CLRL	R8			; No item return length
	MOVQ	R6,-(SP)		; Save DIB descriptor
	PUSHL	R6			; Scratch copy of length
40$:	CVTBL	(R11)+,R10		; Length of buffer for next item
	BGTR	50$			; Branch if item to move
	BEQL	90$			; Branch if end of table
	MNEGL	R10,R10			; Skip over section of DIB
	BRB	70$
50$:	ADDL	#2,R9			; Next item code
	CMPL	R10,(SP)		; Enough room for this item?
	BLEQ	60$			; Branch if yes
	MOVL	(SP),R10		; No, use what space is left
	BLEQ	90$			; All done if no space left
60$:	BSBW	DVI_DO_ITEM		; Put the next item in the DIB
70$:	ADDL	R10,R7			; Next free location in DIB
	SUBL	R10,(SP)		; Adjust space left in DIB
	BGTR	40$			; Branch if room for another item
;
; The DIB is now filled in except for the device controller name string
; and the volume name string and their respective offset locations.  
; DIB$W_DEVNAMOFF and DIB$W_VOLNAMOFF are currently 0.  The string area
; is deliberately NOT backgrounded so that no data is written except that
; which is explicitly returned.
;
90$:	POPR	#^M<R5,R6,R7>		; Clean off scratch cell,
					; recover DIB descriptor
	SUBW	#DIB$T_DEVNAME,R6	; Room for CTLNAM and VOLNAM string
	BLEQ	150$			; Branch if no room for strings
	MOVAL	DIB$T_DEVNAME(R7),R3	; Starting adr in DIB for strings
	MOVL	CURRENT_UCB(FP),R5	; Address of UCB
	ADDL3	#DDB$T_NAME,UCB$L_DDB(R5),R5 ; Address of ASCIC controller name
	MOVZBL	(R5)+,R4		; Size in R4, adr in R5
	BEQL	110$			; Branch if controller name null
	MOVAL	DIB$W_DEVNAMOFF(R7),R8	; Address to store offset to string
	BSBB	MOVE_NAME		; Move the name, set up the offset
110$:	MOVL	CURRENT_VCB(FP),R5	; Address of VCB
	BEQL	150$			; Branch if volume not mounted
	MOVAL	VCB$T_VOLNAME(R5),R5	; Adr of 12 byte blank filled volume name
	MOVL	#12,R4			; Size of name string
	MOVAL	DIB$W_VOLNAMOFF(R7),R8	; Address to store offset to string
	BSBB	MOVE_NAME		; Move the name, set up the offset
;
; DIB is now totally filled in, return length to caller if requested
;
150$:	MOVL	RETLEN_ADR(FP),R0	; Address to return DIB length
	BEQL	160$			; Branch if none specified
	IFNOWRT	#2,(R0),ACCVIO		; Branch if length cannot be written
	MOVW	RETLEN(FP),(R0)		; Return the DIB length
160$:	MOVZWL	#SS$_NORMAL,R0		; Set successful completion
	RSB
ACCVIO:
	MOVZWL	#SS$_ACCVIO,R0		; Access violation
	RSB
;
; Move name string and fill in DIB offset to it
;
; INPUTS:
;
;	R3 = Address to store data
;	R4 = Byte count to store
;	R5 = Source string to store
;	R6 = Count of bytes remaining in output buffer
;	R7 = Base address of DIB
;	R8 = Address to store offset to string
;
; OUTPUTS:
;
;	R3 = Updated address to store next string
;	R6 = Updated space remaining to store next string
;	R0 through R5 altered
;	Other registers preserved
;
MOVE_NAME:
	DECL	R6			; Room for byte count for string
	BLSS	20$			; Branch if not, don't store offset
	SUBL3	R7,R3,R0		; Offset to string
	MOVW	R0,(R8)			; Store offset in DIB
	MOVB	R4,(R3)+		; Store count for ASCIC string
	CMPL	R4,R6			; Enough room for rest of string?
	BLEQ	10$			; Branch if yes
	MOVL	R6,R4			; No, use what is left
10$:	SUBL	R4,R6			; Keep track of space remaining
	MOVC3	R4,(R5),(R3)		; Store the string
20$:	RSB

	.SBTTL	$GETDVI - Get Device Information
;++
;
; FUNCTIONAL DESCRIPTION:
;
;	This service allows a process to get information about a device
;	it currently has a channel assigned to, or one it explicitly names.
;	
; CALLING SEQUENCE:
;
;	CALLS/CALLG
;
; INPUTS:
;
;	EFN(AP)	   = number of the event flag to set when all of the requested
;		     data is valid. 
;	CHAN(AP)   = channel to which desired device is assigned or 0
;		     if specifying device by name.
;	DEVNAM(AP) = address of a string descriptor for the device name
;		     or logical device name desired.  This is only used
;		     if the channel parameter is 0.
;	ITMLST(AP) = address of a list of item descriptors of the form:
;
;		+-----------------------------+
;		!  ITEM CODE   !  BUF. LENGTH !
;		+-----------------------------+
;		!      BUFFER ADDRESS         !
;		+-----------------------------+
;		!  ADDRESS TO RETURN LENGTH   !
;		+-----------------------------+
;
;	IOSB(AP)   = address of a quadword I/O status block to receive final
;		     status
;	ASTADR(AP) = address of an AST routine to be called when all of the
;		     requested data has been supplied.
;	ASTPRM(AP) = 32 bit ast parameter
;	NULARG(AP) = Reserved argument - address of a buffer descriptor
;		     for wild device context.
;
;	R4 = Current process PCB address
;
; IMPLICIT INPUTS:
;
;	none
;
; OUTPUTS:
;
;	none
;
; IMPLICIT OUTPUTS:
;
;	none
;
; ROUTINE VALUE:
;
;	R0 low bit clear indicates failure to retrieve device information
;
;		R0 = SS$_ACCVIO - Device name string descriptor, device
;			name string, or ITMLST cannot be read by the
;			calling access mode.  Item buffer or return
;			length word cannot be written by the calling
;			access mode.
;
;		R0 = SS$_IVCHAN - Invalid channel number specified
;
;		R0 = SS$_IVDEVNAM - Device name string contains invalid
;			characters, or no device name string was
;			specified and no channel number was specified.
;
;		R0 = SS$_IVLOGNAM - Zero or greater than maximum length
;			device name string specified.
;
;		R0 = SS$_NONLOCAL - Device exists on a remote system
;
;		R0 = SS$_NOSUCHDEV - Specified device does not exist on
;			host system
;
;		R0 = SS$_BADPARAM - An invalid item identifier was specified
;
;		R0 = SS$_EXASTLM - An AST was requested and the AST quota
;			was exceeded.
;
;	R0 low bit set indicates successful completion.
;
;		R0 = SS$_NORMAL - Normal completion
;
; SIDE EFFECTS:
;
;	none
;--

;
; Equated Symbols:
;
;	Argument List Offsets
;

	EFN = 4				; Event flag number argument
	CHAN = 8			; Channel assigned to device or 0
	DEVNAM = 12			; Address of device name string descriptor
	ITMLST = 16			; Address of item identifiers
	IOSB = 20			; I/O status block address
	ASTADR = 24			; AST routine address
	ASTPRM = 28			; AST parameter
	NULARG = 32			; Reserved argument - wild context buf dsc


	.ENABL	LSB

	.ENTRY	EXE$GETDVI,^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>
	MOVAL	SCRATCH_SIZE(SP),SP	; Allocate local storage
	PUSHL	#SS$_NORMAL		; Set presumed normal success status
	CLRQ	-(SP)			; Zero SAVED_ASTADR and IOUNLOCK
;
; The above stack locations are all referenced by offsets from FP
;
	MOVZBL	EFN(AP),R3		; Get event flag number
	JSB	G^SCH$CLREF		; Clear this event flag
	BLBC	R0,DVI_ERROR		; If error, exit with error status
	MOVL	IOSB(AP),R1		; Get IOSB address if specified
	BEQL	10$			; Branch in none specified
	IFNOWRT	#8,(R1),DVI_ACCVIO	; If not writable by caller then ACCVIO
	CLRQ	(R1)			; Clear the IOSB
10$:	MOVL	ASTADR(AP),SAVED_ASTADR(FP) ; Save ASTADR parameter
	BEQL	20$			; Branch if none specified
	TSTW	PCB$W_ASTCNT(R4)	; If AST limit is exceeded
	BLEQ	DVI_EXASTLM		; then indicate error
;
; See if Channel parmeter was specified
;
20$:	MOVZWL	CHAN(AP),R0		; Fetch channel parameter if specified
	BEQL	30$			; Branch if not specified
	BSBW	DVI_USE_CHAN		; Get UCB address from channel
	BLBS	R0,40$			; Branch if no error
DVI_ERROR:
	BRB	DVI_ERROR_1
DVI_ACCVIO:
	MOVL	S^#SS$_ACCVIO,R0	; Access violation
	BRB	DVI_ERROR
DVI_EXASTLM:
	MOVZWL	#SS$_EXASTLM,R0		; Exceeded ASTLM quota
	BRB	DVI_ERROR
DVI_BADPARAM:
	MOVZWL	#SS$_BADPARAM,R0	; Bad parameter
	BRB	DVI_ERROR
;
; Use Device Name String parameter to locate desired device
;
30$:	MOVL	DEVNAM(AP),R0		; Get the device name descriptor
	BSBW	DVI_USE_DEVNAM		; Get UCB using device name
	BLBC	R0,DVI_ERROR		; Branch if error
;
; I/O data base locked for reading
;
40$:	MOVL	ITMLST(AP),R11		; Address of list of items
	IFNORD	#4,(R11),DVI_ACCVIO	; Check first long word readable
50$:	MOVZWL	2(R11),R9		; Item code for next item
	BEQL	DVI_COMPLETE		; Done if zero, take normal exit
	CMPW	R9,#MAX_ITEM_CODE	; Valid item code?
	BGTRU	DVI_BADPARAM		; Branch if not
	CMPL	R9,#1			; 0 and 1 are not used
	BLEQ	DVI_BADPARAM		; Branch if bad item code
	MOVAQ	(R11)+,R1		; R1 = R11 = Adr of item buf descriptor
					; R11 = R11 + 8
	BSBW	EXE$PROBEW_DSC		; See if caller can read buf dsc
					; and write the buffer it describes
	BLBC	R0,DVI_ERROR		; Branch if not
	MOVL	R2,R7			; Save item buffer address
	MOVZWL	R1,R10			; and its size
	CMPL	R10,#4			; Item buffer at least 4 bytes?
	BLSS	DVI_BADPARAM		; Branch if not
	IFNORD	#8,(R11),DVI_ACCVIO	; Check access to rest of this item
					; and first long word of the next
	MOVL	(R11)+,R8		; R8 = Address to return length
	BEQL	60$			; Branch if return length not requested
	IFNOWRT	#2,(R8),DVI_ACCVIO	; Make sure caller can write this
60$:	EXTZV	#0,#1,R9,R0		; Get primary/secondary flag
	MOVQ	PRIMARY_UCB(FP)[R0],CURRENT_UCB(FP) ; Set current UCB/VCB
	BSBW	DVI_DO_ITEM		; Process this item
	BRB	50$			; Get next item
DVI_COMPLETE:
	MOVZWL	#SS$_NORMAL,R0		; Set success status
;
; R0 = completion status
;
DVI_ERROR_1:
	PUSHL	R0			; Save completion status
	MOVL	@#CTL$GL_PCB,R4		; Get PCB address
	BLBC	IOUNLOCK(FP),70$	; Branch if no read lock to release
	BSBW	SCH$IOUNLOCK		; Unlock I/O data base
	SETIPL	#0			; Allow all interrupts
70$:	MOVL	PCB$L_PID(R4),R1	; Get process's PID
	CLRL	R2			; Set null priority increment
	MOVL	EFN(AP),R3		; Get event flag number to set
	JSB	G^SCH$POSTEF		; Set the event flag
	MOVL	IOSB(AP),R1		; Get address of IOSB
	BEQL	80$			; Branch if none
	IFNOWRT	#8,(R1),80$		; Check if writable
	MOVL	(SP),(R1)		; Store completion status
80$:	MOVL	SAVED_ASTADR(FP),R5	; Get address of AST routine
	BEQL	90$			; Branch if none specified
	MOVPSL	R4			; Get PSL
	EXTZV	#PSL$V_PRVMOD,#PSL$S_PRVMOD,R4,R4 ; Extract previous mode
	$DCLAST_S (R5),ASTPRM(AP),R4	; Queue the completion AST
90$:	POPR	#^M<R0>			; Restore completion status
	BLBC	R0,100$			; Use error code in R0 if error
	MOVZWL	STATUS(FP),R0		; Otherwise use saved success status
100$:	RET				; and return.

	.DSABL	LSB

	.SBTTL	DVI_DO_ITEM - Validate and move desired item

;++
;
; FUNCTIONAL DESCRIPTION:
;
;	Routine to validate item identifier and return the desired
;	information to the caller's buffer.
;
; CALLING SEQUENCE:
;
;	JSB/BSB
;
; INPUTS:
;
;	R7  = Address of buffer to return item - already probed
;	R8  = Address of buffer to return length - already probed
;	      0 if not returning length
;	R9  = Item code
;	R10 = Size of buffer for item
;
; IMPLICIT INPUTS:
;
;	CURRENT_UCP(FP)   - Address of the UCB
;	CURRENT_VCB(FP)   - Address of the VCB
;	SCRATCH(FP)	  - LOG$C_NAMLENGTH bytes of scratch storage
;
; OUTPUTS:
;
;	none
;
; IMPLICIT OUTPUTS:
;
;	none
;
; ROUTINE VALUE:
;
;	none
;
; SIDE EFFECTS:
;
;	none
;--

DVI_DO_ITEM:
	MOVL	CURRENT_UCB(FP),R6	; Get current UCB address
	ASHL	#-1,R9,R1		; Item index
	MOVL	W^DVI_ITEM_TABLE[R1],R0	; Fetch associated item value
	BGEQ	20$			; Branch if not a special item
	JMP	(R0)			; Handle special items
20$:	BBC	#DVI_V_DEVTYPE,R0,40$	; Branch if no specific device type
	CMPB	UCB$B_DEVCLASS(R6),#DC$_DISK ; Disk only item, is it a disk?
	BNEQ	DVI_NULL_ITEM		; Branch if not, null item
40$:	EXTZV	#DVI_V_STRUCT,#DVI_S_STRUCT,R0,R1 ; Get structure code
	CASE	R1,<-
		DVI_UCB,-		; UCB
		DVI_DDB -		; DDB
	>
;
; Fall through for VCB, RVT, or AQB
;
DVI_VCB_RVT_AQB:
	MOVL	CURRENT_VCB(FP),R5	; Get VCB address if any
	BEQL	DVI_NULL_ITEM		; Branch if none

	ASSUME	DVI_C_RVT EQ DVI_C_VCB+1
	ASSUME	DVI_C_AQB EQ DVI_C_VCB+2
	SUBL	#DVI_C_RVT,R1		; -1 = VCB, 0 = RVT, 1 = AQB
	BLSS	DVI_STRUCT		; Branch if VCB
	BGTR	DVI_AQB			; Branch if AQB
;
; Get Relative Volume Table Address if any
;
	BSBW	DVI_GET_RVT		; Get relative volume table adr
	BEQL	DVI_NO_RVT		; Branch if not a volume set
	MOVZBL	RVT$B_NVOLS(R3),R4	; Number of volumes in volume set
	BRB	DVI_RVT
DVI_NO_RVT:
	MOVL	#1,R2			; This is volume 1 of single volume set
	MOVL	#1,R4			; This is a single volume set
DVI_RVT:
	EXTZV	#DVI_V_OFFSET,#DVI_S_OFFSET,R0,R1 ; Offset is RVT item
;
; R2 = volume number for this volume, 1 if not a volume set
; R3 = RVT address or 0 if not a volume set
; R4 = volume count or 1 if not a volume set
;
	CASE	R1,< -
		RVT_VOLCNT, - 		; VOLCNT - Number of volumes in the vol set
		RVT_ROOTDEVNAM, - 	; ROOTDEVNAM - Device name for root vol in set
		RVT_NEXTDEVNAM -	; NEXTDEVNAM - Next device name in vol set
		>
;
; Get ACP queue header block address - AQB
;
DVI_AQB:
	MOVL	VCB$L_AQB(R5),R5	; Get AQB address
	BLSS	DVI_STRUCT		; Branch if system space address
	BRB	DVI_NULL_ITEM		; No AQB, no item data to return
DVI_DDB:
	MOVL	UCB$L_DDB(R6),R5	; Get DDB address
	BRB	DVI_STRUCT
DVI_UCB:
	MOVL	R6,R5			; Get UCB address
;
; R5 = Address of structure containing desired field
;
DVI_STRUCT:
	EXTZV	#DVI_V_OFFSET,#DVI_S_OFFSET,R0,R1 ; Stucture offset
	ADDL	R1,R5			; Source address of item to move
	EXTZV	#DVI_V_DATATYPE,#DVI_S_DATATYPE,R0,R1 ; Data type
	CASE	R1,<-
		DVI_VALUE -		; VALUE - move specified bytcnt
	>
;
; Fall through to counted string data type
;
DVI_CSTRING:
	MOVZBL	(R5)+,R4		; Get size of string, advance adr
	BRB	DVI_MOVE_ITEM
;
; Null item to return to user
;
DVI_NULL_ITEM:
	CLRL	R0			; Set size field to 0
DVI_VALUE:
	EXTZV	#DVI_V_BYTCNT,#DVI_S_BYTCNT,R0,R4 ; Size of item to move
;
; R4  = size of item to move in bytes
; R5  = source address to move from
; R7  = Destination address - already probed
; R8  = Address to return length or 0 - already probed
; R10 = Size of return buffer for item, zero fill this buffer
;
DVI_MOVE_ITEM:
	CMPL	R10,R4			; If user buffer is too small
	BGEQ	10$
	MOVL	R10,R4			; Move as much as will fit
10$:	TSTL	R8			; Return length requested?
	BEQL	20$			; Branch if not
	MOVW	R4,(R8)			; Set size of data returned
20$:	MOVC5	R4,(R5),#0,R10,(R7)	; Store item zero filled
	RSB

	.SBTTL	Special Items
;
; VOLNUMBER - return relative volume number
;
SPC_VOLNUMBER:
	MOVL	CURRENT_VCB(FP),R5	; If not mounted,
	BEQL	DVI_NULL_ITEM		; Then return zero
	MOVZWL	VCB$W_RVN(R5),R4	; Fetch RVN field
	BNEQ	DVI_VALUE_IN_R4		; Non-zero if in a vol set
	INCL	R4			; It should really be vol 1
;
; ***** Fall through to DVI_VALUE_IN_R4
;
; RVT items - VOLCNT, ROOTDEVNAM, NXTDEVNAM
;
; R4 = Number of volumes in volume set, 1 if not a volume set
;
RVT_VOLCNT:
;
; R4 = long word value to return to caller
;
DVI_VALUE_IN_R4:
	MOVAL	SCRATCH(FP),R5		; Address to store VOLCNT
	MOVL	R4,(R5)			; Save the volume count
	MOVL	#4,R4			; Number of bytes to return
	BRB	DVI_MOVE_ITEM
;
; R2 = Volume number of this volume, 1 if not a volume set
; R3 = RVT address, 0 if not a volume set
; R4 = Volume count, 1 if not a volume set
;
RVT_ROOTDEVNAM:
	TSTL	R3			; If not a volume set
	BEQL	SPC_DEVNAM		; Return this volume's device name
	CLRL	R2			; Otherwise return devnam for first vol
RVT_NEXTDEVNAM:
	BRB	20$			; Loop 0 or more times
10$:	MOVL	RVT$L_UCBLST-4(R3)[R2],R6 ; Get UCB for this RVN
					; RVN is base 1, table is base 0
	BLSS	SPC_DEVNAM		; Branch if UCB present
20$:	AOBLEQ	R4,R2,10$		; Try next RVN
DVI_NULL_ITEM_1:
	BRB	DVI_NULL_ITEM
;
; Device Name String - DEVNAM
;
SPC_DEVNAM:
	MOVL	R6,R5			; UCB Address
	MOVL	R10,R0			; Size of return buffer
	MOVL	R7,R1			; Address of return buffer - pre probed
	BSBW	IOC$CVT_DEVNAM		; Get device name "_ddcu:"
	MOVL	R1,R4			; Size of string returned
	MOVL	R7,R5			; Address of string
	BRB	DVI_MOVE_ITEM		; Move to self, zero filling.
;
; Volume name - strip trailing blanks
;
SPC_VOLNAM:
	MOVL	CURRENT_VCB(FP),R5	; VCB address
	BEQL	DVI_NULL_ITEM_1		; No data if not mounted
	ADDL	#VCB$T_VOLNAME,R5	; Address of volname string
	MOVL	#11,R4			; Base 0 count of characters in name
10$:	CMPB	(R5)[R4],#^A/ /		; Strip off trailing blanks
	BNEQ	20$			; Branch if not a blank
	SOBGEQ	R4,10$			; Try next character
20$:	INCL	R4			; Actual byte count
DVI_MOVE_ITEM_1:
	BRB	DVI_MOVE_ITEM		; Go move the volume name
;
; LOGVOLNAM - logical volume name
;
SPC_LOGVOLNAM:
	CLRL	SCRATCH(FP)		; Set up a null LOGVOLNAM
	MOVL	CURRENT_VCB(FP),R5	; If no volume control block
	BEQL	80$			; then no logical volume name
	BSBW	DVI_GET_RVT		; Return RVT in R3 or zero
	BEQL	10$			; Branch if not a volume set
	MOVL	RVT$L_UCBLST(R3),R6	; Get Root UCB address
	BEQL	80$			; Branch if no UCB, really an error
10$:	MOVAL	@#CTL$GQ_MOUNTLST,R4	; Assume searching Process Mounted Vol List

	ASSUME	VCB$V_GROUP EQ VCB$V_SYSTEM-1
	EXTZV	#VCB$V_GROUP,#2,VCB$B_STATUS(R5),R1 ; 0 = Process
					; 1 = Group, 2 = System
	BEQL	20$			; Branch if not mounted /SYSTEM or /GROUP
	MOVAL	IOC$GQ_MOUNTLST,R4	; Search System/Group Mounted Vol List
	MNEGL	R1,R1			; System = -2, Group = -1
20$:	MOVL	R4,R2			; Copy list head address

	ASSUME	MTL$L_MTLFL EQ 0
30$:	MOVL	MTL$L_MTLFL(R2),R2	; Get next entry on list
	CMPL	R2,R4			; End of list?
	BEQL	80$			; Branch if yes, no MTL, really error
	CMPL	R6,MTL$L_UCB(R2)	; MTL entry for this UCB?
	BNEQ	30$			; Try next if not
	TSTL	R3			; Volume set?
	BEQL	40$			; Branch if not, this MTL is it
	BBC	#MTL$V_VOLSET,MTL$B_STATUS(R2),30$ ; Yes, get the right MTL entry
;
; R1 = 0 if Process, -1 if Group, -2 if System
; R2 = Mounted Volume List (MTL) entry address
;

	ASSUME	LOG$C_SYSTEM EQ 0
	ASSUME	LOG$C_GROUP  EQ 1
	ASSUME	LOG$C_PROCESS EQ 2
40$:	ADDL3	#2,R1,R3		; R3 = 0 if System, 1 if Group, 2 if Process
	MOVL	@#CTL$GL_PCB,R4		; PCB address for this process
	PUSHR	#^M<R3,R4>		; Save for unlock call
	JSB	LOG$LOCKR		; Lock Logical name Mutex for reading
;
; ***** Note that R2 is preserved across the above call
;
	MOVL	MTL$L_LOGNAME(R2),R2	; Get logical name table entry adr
	BEQL	50$			; Branch if none present
	MOVZBL	LOG$T_NAME(R2),R1	; Size of name
	INCL	R1			; Include count byte
	MOVC3	R1,LOG$T_NAME(R2),SCRATCH(FP) ; Save logical name in local storage
50$:	POPR	#^M<R3,R4>		; Get parameters for unlock call
	JSB	LOG$UNLOCK		; Release Logical Name Table Mutex
80$:	MOVAB	SCRATCH(FP),R5		; Address of counted string to return
	BRW	DVI_CSTRING		; Go move counted string
;
; Functional Description:
;
;	Get Relative Volume Table address if any
;
; Calling Sequence:
;
;	BSBW	DVI_GET_RVT
;
; Inputs:
;
;	R5 = VCB address
;	R6 = UCB address
;
; Outputs:
;
;	If this UCB is part of a volume set:
;		Condition code Z is CLEAR
;		R2 = RVN for this volume
;		R3 = RVT address
;		Other registers are preserved
;
;	If this UCB is NOT part of a volume set:
;		Condition code Z is SET
;		R3 = 0
;		Other registers are preserved
;
DVI_GET_RVT:
	CLRL	R3			; Assume not a volume set
	BBS	S^#DEV$V_FOR,UCB$L_DEVCHAR(R6),20$ ; If FOREIGN, not a volume set
	MOVZWL	VCB$W_RVN(R5),R2	; Relative volume number
	BEQL	20$			; Branch if not a volume set
	MOVL	VCB$L_RVT(R5),R3	; Fetch RVT address (still could be 0)
20$:	RSB				; Return Z bit set if R3 = 0

	.SBTTL	Get UCB from channel or device name
;
; FUNCTIONAL DESCRIPTION:
;
;	Given either the channel or the device name string, return
; the primary UCB/VCB addresses and the secondary UCB/VCB addresses
;
; INPUTS:
;
;	R0 = CHAN if entered at DVI_USE_CHAN
;	   = DEVNAM if entered at DVI_USE_DEVNAM
;	     Neither the descriptor nor the string have been probed
;	R4 = Current Process PCB Address
;
; OUTPUTS:
;
;	R0 = status
;	STATUS(FP) = Returned success status from IOC$SEARCHDEV
;		   = SS$_NORMAL or SS$_CONCEALED
;		     Only returned when entered at DVI_USE_DEVNAM
;	PRIMARY_UCB(FP) = Address of the primary UCB
;	PRIMARY_VCB(FP) = Address of the primary VCB
;	SECONDARY_UCB(FP) = Address of the secondary UCB
;	SECONDARY_VCB(FP) = Address of the secondary VCB
;
	.ENABL	LSB

DVI_USE_CHAN:
	BSBW	IOC$VERIFYCHAN		; Verify channel number
	BLBC	R0,60$			; Branch if error
	PUSHL	CCB$L_UCB(R1)		; Get UCB out of CCB
	JSB	G^SCH$IOLOCKR		; Lock I/O database for read access
	INCL	IOUNLOCK(FP)		; Note that unlock is required
	POPR	#^M<R1>			; Recover UCB address
	BRB	30$
10$:	MOVZWL	#SS$_IVDEVNAM,R0	; Invalid device name error
	BRB	60$
20$:	MOVL	#SS$_ACCVIO,R0		; Access violation
	BRB	60$
DVI_USE_DEVNAM:
	MOVL	R0,R1			; Device name string specified?
	BEQL	10$			; Branch if not, IVDEVNAM
	IFNORD	#8,(R1),20$		; Branch if descriptor cannot be read
	JSB	G^SCH$IOLOCKR		; Lock I/O database for read access
	INCL	IOUNLOCK(FP)		; Note that unlock is required
;
; ***** Note that the device name string still must be probed
;
	BSBW	IOC$SEARCHDEV		; Search for device
	BLBC	R0,60$			; If error, return status
	MOVW	R0,STATUS(FP)		; Save success status
					; SS$_NORMAL or SS$_CONCEALED
;
; R1 = desired UCB
; If the device has an associated mail box and it is not spooled, then
; the UCB in the AMB field is the secondary device.  If, however the
; device is spooled, the AMB field (intermediate device) is the primary
; device and the final destination device is the secondary.
;
30$:	MOVL	R1,R2			; Assume primary = secondary
	MOVL	UCB$L_AMB(R1),R3	; Get associated mail box if any
	BEQL	50$			; Branch if none
	BBC	S^#DEV$V_SPL,UCB$L_DEVCHAR(R1),40$ ; Branch if not spooled
	MOVL	R3,R2			; Spooled dev, primary = AMB = intermed dev
	BRB	50$
40$:	MOVL	R3,R1			; Not spooled, secondary = AMB
;
; R2 = primary UCB
; R1 = secondary UCB
;
50$:	MOVAL	PRIMARY_UCB(FP),R0	; Address to store primary UCB/VCB
	BSBB	SET_UCB_VCB		; Store UCB and VCB
	MOVL	R1,R2			; Secondary UCB
	BSBB	SET_UCB_VCB		; Store secondary UCB/VCB
	MOVL	#SS$_NORMAL,R0		; Set success status
60$:	RSB

	.DSABL	LSB
;
; Store UCB and its associated VCB address if any
;
; Inputs:
;
;	R2 = UCB address
;	R0 = address to store UCB/VCB
;
; Outputs:
;
;	R0 updated to next quad word
;	R1,R2 preserved
;	R3 altered
;	other registers preserved
;
SET_UCB_VCB:
	CLRL	R3			; Assume volume not mounted
	BBC	S^#DEV$V_MNT,UCB$L_DEVCHAR(R2),10$ ; Branch if not mounted
	MOVL	UCB$L_VCB(R2),R3	; Get VCB address
10$:	MOVQ	R2,(R0)+		; Store UCB/VCB
	RSB

	.END
