	.TITLE	SYSUPDSEC - Update Section File System Service
	.IDENT	'V03-000'
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************

;++
; FACILITY:	UPDATE SECTION SYSTEM SERVICE
;
; ABSTRACT:
;
; ENVIRONMENT:
;
; AUTHOR: PETER H. LIPMAN	, CREATION DATE: 21-APR-78
;
; MODIFIED BY:
;
;	V02-008	LJK0022		Lawrence J. Kenah	19-May-1981
;		Replace CDL$x_ symbols with MMG$x_ symbols. Add $MMGDEF
;		macro. Make these offsets local symbols.
;
;	V02-007	RLRLBCNT	Robert L. Rappaport	19-Mar-1981
;		Change IRP offset definitions to conform to new IRP layout.
;
;	V02-006	KDM0036		KATHLEEN D. MORSE	03-FEB-1981
;		Re-number local symbols in MMG$PTEPFNMFY.
;
;	V02-005	KDM0035	KATHLEEN D. MORSE	03-FEB-1981
;		Return SS$_NOTCREATOR if $UPDSEC is requested for any
;		shared memory pages that were created on another processor.
;
;	V02-004	KDM0034	KATHLEEN D. MORSE	03-FEB-1981
;		Insure that shared memory global pages are treated as global
;		pages when checking that the pages have been modified. That is,
;		treat all pages in the range as modified.
;
;	V02-003	KDM0033	KATHLEEN D. MORSE	03-FEB-1981
;		Set up correct entry conditions in routine MMG$UPDSECQWT.
;		Also check for all error returns when this routine is called.
;
;--
	.PAGE
	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;
	$ACBDEF				;AST control block definitions
	$CADEF				;Conditional assembly definitions
	$DYNDEF				;Dynamic data structure type codes
	$GSDDEF				;Global section descriptor definitions
	$IRPDEF				;I/O request packet definitions
	$IPLDEF				;Processor priority levels
	$MMGDEF				; Offsets from FP into scratch area
	$PCBDEF				;Process control block definitions
	$PFNDEF				;Page frame number data base definitions
	$PHDDEF				;Process header definitions
	$PRDEF				;Processor register definitions
	$PRIDEF				;Priority increment class definitions
	$PSLDEF				;Processor Status Long Word definitions
	$PTEDEF				;Page table entry definitions
	$RSNDEF				;Resource definitions
	$SECDEF				;Section table entry definitions
	$SHBDEF				;Shared memory control block definitions
	$SSDEF				;System status code definitions
	$VADEF				;Virtual address field definitions
;
; MACROS:
;

;
; EQUATED SYMBOLS:
;
; Offset from AP
;
	INADR		= 4		;Offset to input range
	RETADR		= 8		;Offset to return range
	ACMODE		= 12		;Access Mode
	FLAGS		= 16		;Flags parameter
	EFN		= 20		;QI/O Event Flag
	IOSB		= 24		;QI/O I/O Status Block Address
	ASTADR		= 28		;QI/O AST address
	ASTPRM		= 32		;QI/O AST parameter
;
; Offsets into I/O packet while being used as scratch storage for clustering
;
	$OFFSET	0,POSITIVE,<-
		SVAPTE,-		;Master page table entry address
		PTEDAT,-		;Process PTE data
		<,3>,-
		<IRP_RMOD,1>,-		;Request mode
		MFYCNT,-		;Cluster count at last modified page
		IRP_AST,-		;Ast address
		IRP_ASTPRM,-		;Ast parameter
		CLUSTER,-		;Maximum size of cluster to scan for
		COUNT,-			;Number of pages scanned
		<EXCLWRT,1>,-		;Exclusive write access flag
		<,1>,-
		<IRP_EFN,1>,-		;Event flag
		<IRP_PRI,1>,-		;Priority
		IRP_IOSB,-		;I/O status block address
		INC1,-			;+ or - 1 according to direction
		INC4,-			;+ or - 4 according to direction
		BAK,-			;Backing store address of first PTE
		<,4>,-
		<IRP_IOST1,8>,-		;I/O status return area
		PROCPTE,-		;Process page table entry address
		<,4>,-
		IRP_SEGVBN,-		;Starting virtual address of scan
		<IRP_LENGTH,0>-		;Total size of scratch area used
		>

	ASSUME	IRP_LENGTH	LE IRP$C_LENGTH
	ASSUME	IRP_RMOD	EQ IRP$B_RMOD
	ASSUME	IRP_AST		EQ IRP$L_AST
	ASSUME	IRP_ASTPRM	EQ IRP$L_ASTPRM
	ASSUME	IRP_EFN		EQ IRP$B_EFN
	ASSUME	IRP_PRI		EQ IRP$B_PRI
	ASSUME	IRP_IOSB	EQ IRP$L_IOSB
	ASSUME	IRP_IOST1	EQ IRP$L_IOST1
	ASSUME	IRP_SEGVBN	EQ IRP$L_SEGVBN
;
; Offsets off the end of the I/O request packet
;
	$OFFSET	IRP$C_LENGTH,POSITIVE,<-
		XIP_L_SCANCNT,-		;Count - 1 of pages remaining to scan
		XIP_L_DIREC,-		;+ OR - 200 according to the direction
		XIP_L_STARTVA,-		;Starting virtual address to scan
		<XIP_B_UPDFLG,1>,-	;Section update flags
		<,3>,-			;Spare
		<XIP_C_LENGTH,0> -	;Length of extended I/O packet
		>
;
; OWN STORAGE:
;
	.LIST	MEB

	.SBTTL	UPDSEC - Update Section File
;++
; FUNCTIONAL DESCRIPTION:
;
; CALLING SEQUENCE:
;
;	CALLG	ARGLIST,G^SYS$UPDSEC
;
;
; INPUT PARAMETERS:
;
;	INADR(AP) = Address of 2 long words the 1st of which specifies
;		the starting virtual address, the 2nd specifies the ending
;		virtual address (inclusive) of the pages to operate on.
;	RETADR(AP) = Address of a 2 longword array into which is returned
;		the starting and ending virtual addresses (inclusive)
;		of the pages operated on.
;	ACMODE(AP) = The access mode (maximized with calling mode)
;		against which the page ownership is checked.
;		Only the owner of a page may update its section.
;	FLAGS(AP)  = Update section control flags
;	EFN(AP)    = Event flag number to set on write complete
;	IOSB(AP)   = I/O status block address for reporting the
;		     write completion and its status
;			First word contains the system status.
;			If error status is returned in the first word,
;		     the first bit of the 2nd word (bit 16 of the first
;		     long word) will be set if a write error occurred.
;		     Other errors (e.g. page owner violation) are possible.
;			The second long word contains the first virtual
;		     address not written.
;	ASTADR(AP) = AST address for reporting write completion
;	ASTPRM(AP) = AST parameter for identifying the AST
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	R0 = System Status Code
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	SS$_NORMAL			;Successful Completion
;	SS$_ACCVIO			;Access Violation
;	SS$_PAGOWNVIO			;Page Owner Violation
;	SS$_EXQUOTA			;Quota exceeded for pending AST's
;	SS$_IVSECFLG			;Invalid flags set
;
; SIDE EFFECTS:
;
;	NONE
;
;--
;
; **********************************************************************
;
; **************** THE FOLLOWING CODE MAY BE PAGED *****************
;
	.PSECT	Y$EXEPAGED
;
; **********************************************************************
;
	.ENTRY	EXE$UPDSEC,^M<R2,R3,R4,R5,R6,R7,R8>

	SUBL	S^#-MMG$C_LENGTH,SP	;Reserve area indexed from FP
	MOVL	R4,R8			;Save PCB address
	BSBW	MMG$INADRINI		;Get input address range to R4,R5
					;Init return range to null
	PUSHR	#^M<R4,R5>		;Save input address range
	MOVL	R8,R4			;Restore PCB address
	MOVZBL	EFN(AP),R3		;Get the event flag parameter
	JSB	SCH$CLREF		;Clear the specified event flag
	MOVL	IOSB(AP),R6		;Get I/O status block address
	BEQL	20$			;Branch if none specified
	IFNOWRT	#8,(R6),70$		;Make sure caller could write it
	CLRQ	(R6)			;and initialize it
20$:	MOVL	FLAGS(AP),R7		;Get FLAGS parameter
	CMPL	R7,#1			;Make sure no garbage bits are set
	BGTRU	60$			;Branch if invalid section flags
	MOVL	#XIP_C_LENGTH,R1	;Size of packet to allocate
	JSB	EXE$ALLOCBUF		;Allocate, wait if necessary
					;Packet type is corrected by WRTPGSBAK
	BLBC	R0,80$			;Branch if failed to alloc
					;and resource wait disabled
;
; IPL = ASTDEL, I/O request packet allocated
;
	MOVL	R2,R8			;Packet address to stable registter
	MOVAB	PCB$W_DIOCNT(R4),R2	;Check for Direct I/O quota
	JSB	EXE$SNGLEQUOTA		;and wait if none available
	BLBC	R0,120$			;Branch if exceeded quota
					;and resource wait is disabled
	MOVZBL	B^MMG$L_MAXACMODE(FP),R0 ;Get requesting mode
	MOVQ	ASTADR(AP),IRP$L_AST(R8) ;Set AST address and parameter
	TSTL	IRP$L_AST(R8)		;AST requested?
	BEQL	40$			;Branch if not
	TSTW	PCB$W_ASTCNT(R4)	;Yes, quota exceeded?
	BLEQ	120$			;Branch if yes, don't wait
	DECW	PCB$W_ASTCNT(R4)	;Charge for the AST
	BISB	#ACB$M_QUOTA,R0		;And note that it is charged
40$:	MOVB	R0,IRP$B_RMOD(R8)	;Set requesting mode and AST flag
	MOVB	EFN(AP),IRP$B_EFN(R8)	;Set event flag number
	MOVL	R6,IRP$L_IOSB(R8)	;Set I/O status block address
	MOVB	R7,XIP_B_UPDFLG(R8)	;Set section update flags
	MOVAB	B^MMG$UPDSECPAG,R6	;Address of per page subroutine
	POPR	#^M<R2,R3>		;Recover saved input address range
	BSBW	MMG$CRECOM2		;Common address range loop
	TSTL	R8			;I/O packet to be released?
	BNEQ	130$			;Branch if yes
50$:	RET				;Write was queued successfully

60$:	MOVZWL	#SS$_IVSECFLG,R0	;Invalid section flags parameter
	BRB	80$
70$:	MOVZWL	#SS$_ACCVIO,R0		;Access violation
80$:	PUSHL	R0			;Save the status code
	BRB	140$
;
; Release the I/O request packet, it was never used
;
120$:	MOVZWL	#SS$_EXQUOTA,R0		;Exceeded quota
130$:	PUSHL	R0			;Save status
	BBCC	#ACB$V_QUOTA,IRP$B_RMOD(R8),135$ ;If charged for AST
	INCW	PCB$W_ASTCNT(R4)	;then give back the quota
135$:	MOVL	R8,R0			;Get I/O packet address to release
	JSB	EXE$DEANONPAGED		;Release the I/O request packet
;
; Set the event flag so that the caller may wait for it despite the return
; information showing that nothing was queued.
;
140$:	MOVZBL	EFN(AP),R3		;Get the event flag number
	MOVL	PCB$L_PID(R4),R1	;and the process ID
	MOVZBL	#PRI$_IOCOM,R2		;and the correct priority increment
	JSB	SCH$POSTEF		;Post the event flag, write complete
	POPR	#^M<R0>			;Restore saved status
	MOVL	IOSB(AP),R1		;I/O status requested?
	BEQL	150$			;Branch if not
	IFNOWRT	#8,(R1),150$		;Branch if IOSB not writable
	MOVL	R0,(R1)			;Return the error status
150$:	RET				;and return

	.SBTTL	UPDSECPAG - Update Section for First Cluster of Pages
;
; **********************************************************************
;
; **************** THE FOLLOWING CODE MAY BE PAGED *****************
;
	.PSECT	Y$EXEPAGED
;
; **********************************************************************
;
;++
; FUNCTIONAL DESCRIPTION:
;
;
; CALLING SEQUENCE:
;
;	BSBW	MMG$UPDSECPAG
;
;
; INPUT PARAMETERS:
;
;	R0 = Access Mode for page ownership check
;	R2 = Virtual Address
;	R4 = Current PCB address
;	R5 = Process Header Address - P1 or System Space
;	R6 = Count - 1 of pages to be processed including this one
;	R7 = +^X200 if going forward in the address space
;	   = -^X200 if going backwards in the address space
;	R8 = Address of an extended length I/O request packet
;		IRP$W_SIZE	= size of extended IRP (XIP_C_LENGTH)
;				  type filled in by WRTPGSBAK
;		IRP$L_ASTADR	= AST address if desired
;		IRP$L_ASTPRM	= AST parameter
;		IRP$B_RMOD	= Requesting mode
;				  ACB$V_QUOTA set if AST desired
;		IRP$B_EFN	= Event flag number
;		XIP_L_DIREC	= + OR - ^X200 according to direction of scan
;		XIP_B_UPDFLG	= Update section flags
;
;	IPL = ASTDEL
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;
;	R0 = Status Code
;	R2   Preserved
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;
;	SS$_NORMAL			;Successful Completion
;	SS$_PAGOWNVIO			;Page Owner Violation
;	SS$_LENVIO			;Length Violation
;	SS$_ACCVIO			;Access Violation
;
; SIDE EFFECTS:
;
;	NONE
;
;--

MMG$UPDSECPAG:
	MOVL	R7,XIP_L_DIREC(R8)	;Save direction of scan
	JSB	MMG$UPDSECQWT		;Find and queue the next cluster
	TSTL	R1			;Anything queued for writing?
	BNEQ	20$			;Branch if yes
	CLRL	B^MMG$L_SAVRETADR(FP)	;Return a null range
	BLBC	R0,60$			;Branch if error status
	MOVZWL	#SS$_NOTMODIFIED,R0	;Otherwise return alternate success code
	BRB	60$
20$:	CLRL	R8			;Note I/O packet in use
	MOVL	R2,B^MMG$L_SVSTARTVA(FP) ;Return first address queued
	DECL	R1			;Page count - 1
	MULL	R7,R1			;Byte count
	ADDL	R1,R2			;Address of last page queued
60$:	CLRL	R6			;Force end of range
	RSB				;and return

	.SBTTL	UPDSECAST - Update Section AST
;++
; FUNCTIONAL DESCRIPTION:
;
;	This is a special kernel AST routine invoked by IOPOST at the
; completion of a PAGIO write request with an extended I/O packet.
; It's job is to find the next cluster of modified pages to write 
; and either queue the request or post the I/O completion.
;
; CALLING SEQUENCE:
;
;	BSBW	MMG$UPDSECAST
;
;
; INPUT PARAMETERS:
;
;	R4 = Current PCB address
;	R5 = Address of an extended length I/O request packet
;		IRP$W_SIZE	= size of extended IRP (XIP_C_LENGTH)
;		IRP$B_TYPE	= DYN$C_IRP
;		IRP$L_ASTADR	= AST address if desired
;		IRP$L_ASTPRM	= AST parameter
;		IRP$B_RMOD	= Requesting mode
;				  ACB$V_QUOTA set if AST desired
;		IRP$B_EFN	= Event flag number
;		XIP_L_SCANCNT	= Count - 1 of pages left to scan
;				  before this transfer completed
;		XIP_L_DIREC	= + OR - ^X200 according to direction of scan
;		XIP_L_STARTVA	= First VA used for this transfer
;		XIP_B_UPDFLG	= Update section flags
;		IPR$L_IOST1	= Status of previous write (0:15)
;				= Number of bytes successfully written (16:31)
;
;	IPL = ASTDEL
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;
;
; SIDE EFFECTS:
;
;	NONE
;
;--

;
; **********************************************************************
;
; **************** THE FOLLOWING CODE MAY BE PAGED *****************
;
	.PSECT	Y$EXEPAGED
;
; **********************************************************************
;

MMG$UPDSECAST::
	PUSHR	#^M<R6,R7,R8>		;Save these registers
	MOVL	R5,R8			;I/O request packet address
	MOVL	G^CTL$GL_PHD,R5		;Get P1 address of process header

	ASSUME	XIP_L_DIREC EQ XIP_L_SCANCNT+4
	MOVQ	XIP_L_SCANCNT(R8),R6	;R6=count-1, R7=+ or - ^X200
	MOVL	XIP_L_STARTVA(R8),R2	;R2 = first VA of this transfer
	MOVL	IRP$L_IOST1(R8),R0	;Get status and byte count
	EXTZV	#<16+VA$V_VPN>,#<16-VA$V_VPN>,R0,R1 ;Page count transferred
	MULL3	R7,R1,R3		;Directional byte count
	ADDL	R3,R2			;New starting VA = first VA not written
	MOVL	R2,IRP$L_IOST2(R8)	;Save it as second IOSB long word
	BLBC	R0,100$			;Branch if write error
	SUBL	R1,R6			;Page count remaining to scan
	BLSS	100$			;Branch if did last piece
	JSB	MMG$UPDSECQWT		;Scan for another cluster to write
	BLBC	R0,100$			;Dont continue scanning if error, branch
	TSTL	R1			;Anything found and queued?
	BEQL	100$			;Branch if not
	POPR	#^M<R6,R7,R8>		;restore saved registers
	RSB				;and return from AST
;
; Last cluster of pages was written
; R0 = status
;
100$:	MOVL	R8,R5			;I/O packet address back to R5
	POPR	#^M<R6,R7,R8>		;Restore registers
	MOVZWL	R0,R0			;Zero high 16 bits of status
	BLBS	IRP$L_IOST1(R5),120$	;Branch if not page write error
	BBSS	#16,R0,120$		;Set page write error indication
120$:	MOVL	R0,IRP$L_IOST1(R5)	;Set first long word of return status
	MOVZBL	IRP$B_EFN(R5),R3	;Get the event flag to post
	MOVL	IRP$L_PID(R5),R1	;Process ID
	MOVZBL	#PRI$_IOCOM,R2		;Priority increment for I/O completion
	JSB	SCH$POSTEF		;Post the event flag
	JMP	IOC$DIRPOST1		;Go return status to IOSB if specified
					;and issue AST if requested

	.SBTTL	UPDSECQWT - Update Section File for Single Page

;++
; FUNCTIONAL DESCRIPTION:
;
;
; CALLING SEQUENCE:
;
;	BSBW	MMG$UPDSECQWT
;
;
; INPUT PARAMETERS:
;
;	R2 = Virtual Address
;	R4 = Current PCB address
;	R5 = Process Header Address - P1 or System Space
;	R6 = Count - 1 of pages to be processed including this one
;	R7 = +^X200 if going forward in the address space
;	   = -^X200 if going backwards in the address space
;	R8 = Address of an extended length I/O request packet
;		IRP$W_SIZE	= size of extended IRP (XIP_C_LENGTH)
;				  type filled in by WRTPGSBAK
;		IRP$L_ASTADR	= AST address if desired
;		IRP$L_ASTPRM	= AST parameter
;		IRP$B_RMOD	= Requesting mode
;				  ACB$V_QUOTA set if AST desired
;		IRP$B_EFN	= Event flag number
;		XIP_L_DIREC	= + OR - ^X200 according to direction of scan
;		XIP_B_UPDFLG	= Update section flags
;
;	IPL = ASTDEL
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;
;    If write has been queued, then
;
;	R0 = #SS$_NORMAL
;	R1 = number of pages queued for writing
;	R2 = virtual address of first page (scan order) queued
;	R6 = count - 1 of pages remaining to scan starting with VA in R2;
;
;	Extended portion of I/O request packet updated if write queued
;		XIP_L_STARTVA	= starting virtual address of request just queued
;		XIP_L_SCANCNT	= count - 1 of pages remaining to scan
;				  starting with the first page just queued
;
;    If write has not been queued, then
;
;	R0 = system status code
;	R1 = 0
;	R2 = last virtual address scanned
;	     in the case of an error, this is the address that caused it
;	     if ran off the end of range, this is the last VA in the range
;	R6 = count - 1 of pages remaining to scan starting with VA in R2
;	   = 0 if at end of range and no more to do
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	SS$_NORMAL			;Successful Completion
;	SS$_PAGOWNVIO			;Page Owner Violation
;	SS$_LENVIO			;Length Violation
;	SS$_ACCVIO			;Access Violation
;
; SIDE EFFECTS:
;
;	NONE
;
;--
;
; **********************************************************************
;
; **************** THE FOLLOWING CODE MUST BE RESIDENT *****************
;
	.PSECT	$MMGCOD
;
; **********************************************************************
;

MMG$UPDSECQWT:
	CLRL	R1			;Initialize indicator to no pages queued
	BSBW	MMG$PTEINDX		;Get index to page table entry
	BLBC	R0,100$			;Branch if length violation
	DSBINT	#IPL$_SYNCH		;Push current IPL
					;and raise to SYNCH
	MOVAL	@PCB$L_PHD(R4)[R3],R3	;Form system virtual address of PTE
	ASHL	#-7,R7,R1		;+ OR - 4 for adding to  SVAPTE
10$:	PUSHR	#^M<R1,R2,R3>
	CLRL	R2			;PTEPFNMFY should return section/GPTX
	EXTZV	#0,#2,IRP$B_RMOD(R8),R0	;Access mode to check against page owner
	MOVZBL	XIP_B_UPDFLG(R8),R1	;Exclusive writer indication
	BSBW	MMG$PTEPFNMFY		;Get PFN and modify bit for this PTE
	BLBC	R1,20$			;Branch if page not a candidate for write
	TSTB	R1			;Could be written, is it modified?
	BLSS	70$			;Branch if yes, go write a cluster
	BRB	30$			;No, try the next page if any
20$:	MOVL	R1,R0			;Error, or just not a candidate?
	BNEQ	60$			;Branch if error
30$:	POPR	#^M<R1,R2,R3>		;R3=SVAPTE, R2=VA, R1=+ or - 4
	TSTL	R6			;Check for end of loop
	BEQL	40$			;Avoid modifying VA and Count
	ADDL	R7,R2			;Next virtual address
	ADDL	R1,R3			;and next PTE address
	SOBGEQ	R6,10$			;Try the next page
40$:	MOVZWL	#SS$_NORMAL,R0		;End of range, no more to do
	BRB	65$
60$:	POPR	#^M<R1,R2,R3>
65$:	CLRL	R1			;No pages queued for writing
	BRB	80$
;
; Found a page to start the cluster, queue a cluster of pages
;
70$:	POPR	#^M<R1>			;Clean off + or - 4
	MOVL	(SP),XIP_L_STARTVA(R8)	;Save starting VA for UPDSECAST
	MOVL	(SP),IRP$L_SEGVBN(R8)	;and for WRTPGSBAK
	MOVL	R6,XIP_L_SCANCNT(R8)	;and remaining count for this write
	MOVL	R8,R1			;I/O request packet (extended)
	BSBW	MMG$WRTPGSBAK		;Queue a cluster for write back
	POPR	#^M<R2,R3>		;Restore saved VA, clean off SVAPTE
80$:	ENBINT				;Back to called IPL
100$:	RSB

	.SBTTL	WRTPGSBAK - Write Pages Back to Disk
;++
; FUNCTIONAL DESCRIPTION:
;
;
; CALLING SEQUENCE:
;
;	BSBW	MMG$WRTPGSBAK
;
;
; INPUT PARAMETERS:
;
;	R0 = Page Frame Number of starting page
;	R1 = Address of an I/O request packet
;		IRP$W_SIZE	= XIP_C_LENGTH if called by UPDSEC
;				= IRP$C_LENGTH if called by DELPAG
;		IRP$B_TYPE	= type filled in by WRTPGSBAK
;		IRP$L_ASTADR	= AST address if desired
;		IRP$L_ASTPRM	= AST parameter
;		IRP$B_RMOD	= Requesting mode
;				  ACB$V_QUOTA set if AST desired
;		IRP$B_EFN	= Event flag number
;		IRP$L_SEGVBN	= Starting virtual address of scan
;		XIP_B_UPDFLG	= Update section flags (if extended packet)
;	R2 = Section backing store address (PFN$AL_BAK[R0])
;	     if process section page or shared memory global page
;	   = Global page table index if global page
;	R3 = System virtual address of process page table entry for first page
;	R4 = PCB address
;	R5 = Process header address - P1 or System Space
;	R6 = Count - 1 of pages remaining to be processed including this one
;	R7 = +^X200 if going forward in address space
;	   = -^X200 if going backwards in address space
;	IPL = SYNCH
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	R0 = #SS$_NORMAL
;	R1 = Number of pages queued for writing
;	R2,R3 Scratched
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;
;
; SIDE EFFECTS:
;
;
;--

;
; **********************************************************************
;
; **************** THE FOLLOWING CODE MUST BE RESIDENT *****************
;
	.PSECT	$MMGCOD
;
; **********************************************************************
;
MMG$WRTPGSBAK::
	PUSHR	#^M<R4,R5>		;Preserve R4 and R5 across call
;
; Initialize I/O packet for cluster scan
;
	ASHL	#-7,R7,INC4(R1)		;+ or - 4 according to direction
	ASHL	#-9,R7,INC1(R1)		;+ or - 1 according to direction
	MOVL	R1,R7			;Packet address in stable register
	MOVB	#DYN$C_IRP,IRP$B_TYPE(R7) ;Set packet type, size already set
	CMPL	R0,MMG$GL_MAXPFN	;Is page in shared memory?
	BGTRU	50$			;Br if page is in shared memory gbl sec.
	MOVL	@W^PFN$AL_BAK[R0],BAK(R7) ;Actual section backing store 
					;address even if global page
	MOVL	@W^PFN$AL_PTE[R0],SVAPTE(R7) ;Master PTE address even if global
30$:	MOVL	R3,PROCPTE(R7)		;Keep process pte address
	MOVL	R2,PTEDAT(R7)		;Save section adr/GPTX
	MOVB	PCB$B_PRIB(R4),IRP$B_PRI(R7) ;Set transfer priority
;
; Calculate largest cluster size as the minimum of the default cluster
; size and the number of pages left to operate on.
;
	MOVZWL	W^MPW$GW_MPWPFC,R1	;Default cluster size
	CMPL	R6,R1			;If count-1 is smaller
	BGEQ	40$
	MOVAL	1(R6),R1		;then use count as max cluster size
40$:	MOVL	R1,CLUSTER(R7)		;Set maximum cluster size
	MOVL	#1,COUNT(R7)		;Count the first page in the cluster
	BRB	80$			;and loop zero or more times
;
; Shared Memory global section pages have no PFN data base.
;
50$:	MOVL	R2,BAK(R7)		;Use section table index
	MOVL	R3,SVAPTE(R7)		;Process PTE is the Master PTE
	BRB	30$			;Join common code
;
; The loop that follows gathers pages to cluster write from the same section
; The pages must (of course) be resident, but not all of them must actually
; be modified.  For process section pages, cluster from the first page
; (guaranteed modified) through the last modified page up to the cluster size.
; For global pages, cluster write all the pages in the global writable
; section.  The state of the modified bit is indeterminate since it is
; maintained in the individual PTE's of the processes which map the section
;
60$:	ADDL	INC4(R7),R3		;Next PTE address
	BBS	#PTE$V_TYP0,R2,70$	;If global page (not in sh mem)
	ADDL	INC1(R7),R2		;then next GPTX as well
70$:	EXTZV	#0,#2,IRP$B_RMOD(R7),R0	;Requesting mode
	CLRL	R1			;Assume no update section flags
	CMPW	IRP$W_SIZE(R7),#XIP_C_LENGTH ;If extended I/O packet
	BLSS	75$
	MOVB	XIP_B_UPDFLG(R7),R1	;Use the save update section flags
75$:	BSBW	MMG$PTEPFNMFY		;Get PFN and modify bit if resident
	BLBC	R1,120$			;Branch if not resident
	INCL	COUNT(R7)		;Found another resident page
	TSTB	R1			;See if it was modified
	BGEQ	100$			;Branch if it was not
80$:	MOVL	COUNT(R7),MFYCNT(R7)	;then update last modified page seen
100$:	SOBGTR	CLUSTER(R7),60$		;Try the next page too
;
; Now lock all the pages in the cluster just found
;
120$:	MOVL	SVAPTE(R7),R3		;Get starting Master PTE
	SUBL3	#1,MFYCNT(R7),R1	;Count - 1 of pages in cluster
	MULL	INC4(R7),R1		;* -4 if going backwards in address space
	BGEQ	130$			;Branch if only 1 page or going forwards
;
; Going backwards in the address space, form the correct starting
; PTE addresses and virtual address.
;
	ADDL	R1,R3			;Form starting master PTE address
	MOVL	R3,SVAPTE(R7)		;and save it
	ADDL	R1,PROCPTE(R7)		;Form starting process PTE address
	ASHL	#7,R1,R1		;(count - 1) * -512
	ADDL	R1,IRP$L_SEGVBN(R7)	;Form starting virtual address
130$:	MOVL	MFYCNT(R7),CLUSTER(R7)	;Loop count is to last modified page
;
; Given the Master PTE address get each page ready for the write request
;
150$:	BICL3	#^C<PTE$M_VALID !-	;Get relevant bits from PTE
		PTE$M_TYP1 ! PTE$M_TYP0 !-
		PTE$M_PGFLVB>,(R3)+,R0
	BLSS	260$			;Branch if page is valid
	BEQL	200$			;Demand zero is inconsistent
	ASHL	#-PTE$V_TYP0,R0,R1	;as would be anything other
	BNEQ	200$			;than transition
	EXTV	#PFN$V_LOC,#PFN$S_LOC,-	;Get the page location (-4 to 3)
		@W^PFN$AB_STATE[R0],R2
	CASE	R2,<-
		270$,-			;-1 = active
		220$,-			;0  = on free page list
		220$,-			;1  = on modified page list
		220$,-			;2  = on bad page list
		240$ -			;3  = release pending
		>,TYPE=B,LIMIT=#-1
200$:	BUG_CHECK WRTPGSBAK,FATAL	;Write pages back - inconsistent data base
;
; Page is on the free, modified, or bad page list, must remove it
;
220$:	PUSHL	R3			;Save next PTE address
	BSBW	MMG$REMPFN		;Remove page from free or modified page list
	POPR	#^M<R3>			;Restore next PTE address
240$:	INSV	#PFN$C_WRTINPROG,#PFN$V_LOC,- ;Set state to
		#PFN$S_LOC,@W^PFN$AB_STATE[R0] ;Write in progress
	BRB	270$

;
; Master page table entry is valid, shut off PTE copy of Modify bit, and get PFN
;
260$:	MOVL	PROCPTE(R7),R1		;Process page table entry address
	TSTL	(R1)			;See if it contains a valid PTE
	BGEQ	265$			;Branch if it does not
	BBCC	#PTE$V_MODIFY,(R1),265$	;Shut off process PTE modify bit
					;Branch if it was already off
	INVALID	IRP$L_SEGVBN(R7),R1	;Invalidate translation buffer for
					;process virtual address

	ASSUME	PTE$V_MODIFY GE 24	;PTE modify bit is in high byte
265$:	BICB	#PTE$M_MODIFY@-24,-1(R3) ;Shut off modify in master PTE
	EXTZV	#PTE$V_PFN,#PTE$S_PFN,R0,R0 ;Isolate PFN
	CMPL	R0,MMG$GL_MAXPFN	;Is there PFN data base? (SH MEM page)
	BGTRU	280$			;Br if there is none, page is in SH MEM
270$:	BICB	#PFN$M_MODIFY,@W^PFN$AB_STATE[R0] ;Page not modified
	INCW	@W^PFN$AW_REFCNT[R0]	;Count an I/O reference
280$:	ADDL	#4,PROCPTE(R7)		;Next process PTE address
	ADDL	#512,IRP$L_SEGVBN(R7)	;Next process virtual address
	SOBGTR	CLUSTER(R7),150$	;Loop through each page in the cluster
;
; Now set up to queue the packet for writing
;
	MOVL	BAK(R7),R2		;Get original backing store address
					;section address is same for all pages
	MOVL	SVAPTE(R7),R3		;Starting master PTE address
	EXTZV	#PTE$V_PFN,#PTE$S_PFN,(R3),R0 ;Get PFN for first page to write
	CMPL	R0,MMG$GL_MAXPFN	;Is this a shared memory gbl sec page?
	BGTRU	320$			;Br if page is in shared memory gbl sec
	BBS	#PTE$V_TYP0,PTEDAT(R7),300$ ;Branch if process section page
	MOVL	W^MMG$GL_SYSPHD,R5	;System header for global page
300$:	BSBW	MMG$INIBLDPKT		;Convert to file vbn and window
310$:	MOVL	MFYCNT(R7),R1		;Count of pages to queue

	.IF	GT,CA$_MEASURE
	INCL	W^PMS$GL_PWRITIO	;Count number of write I/O requests
	ADDL	R1,W^PMS$GL_PWRITES	;Count number of pages written
	.ENDC

	MOVL	R7,R5			;I/O packet address
	ASHL	#9,INC1(R5),R7		;Restore R7
	PUSHL	R1			;Save page count to return to caller
	ROTL	#9,R1,R1		;Form byte count to queue
	BSBW	EXE$BUILDPKTW		;Build and queue the packet for writing
	MOVZWL	#SS$_NORMAL,R0		;Indicate packet successfully queued
	POPR	#^M<R1,R4,R5>		;Return byte count in R1, restore R4,R5
	RSB				;and return

;
; COMPUTE THE VBN FOR THE FIRST PAGE IN THE CLUSTER, THE SECTION TABLE ADDRESS,
; AND THE WINDOW ADDRESS.
;
320$:	MOVL	W^MMG$GL_SYSPHD,R5	;System process header (for gbl pages)
	CVTWL	R2,R2			;Section table index
	ADDL3	PHD$L_PSTBASOFF(R5),R5,R1 ;Base of section table
	MOVAL	(R1)[R2],R1		;Section table entry address
	PUSHR	#^M<R4,R6>		;Save registers
	MOVL	SEC$L_GSD(R1),R6	;Address of Global Section Descriptor
;
; Find the relative position of this page within the section.
;
	BSBW	MMG$FINDSHD		;Get sh mem ctl blk & common data page
	SUBL2	SHB$L_BASGSPFN(R4),R0	;Get relative PFN within the sh mem
	MOVAB	GSD$L_BASPFN1(R6),R6	;Get adr of first PFN base in GSD
	MOVZBL	#GSD$C_PFNBASMAX,R2	;Get number of PFN bases allowed
	CLRL	R5			;Zero relative page offset within sec
330$:	CMPL	R0,(R6)			;Is PFN less than this base?
	BLSS	340$			;Br if less than, not within this piece
	ADDL3	(R6)+,(R6),R4		;Get PFN past end of this piece
	CMPL	R0,R4			;Is PFN less than end of piece?
	BLSS	350$			;Br if less than, is within this piece
340$:	ADDL2	(R6)+,R5		;Add pagcnt to relative page offset
	SOBGTR	R2,330$			;Go check if PFN is in next piece
	BUG_CHECK	SCANDEADPT	;Error, PFN must be within this GSD
350$:	SUBL2	-(R6),R0		;Get relative page within this piece
	ADDL2	R5,R0			;Add page counts of other pieces to off
	ADDL2	SEC$L_VBN(R1),R0	;Add in base VBN
	POPR	#^M<R4,R6>		;Restore registers
	MOVL	SEC$L_WINDOW(R1),R2	;Get window address
	BRB	310$			;Join common code

	.SBTTL	PTEPFNMFY - Get PFN and Modify bit from PTE

;+
;
; FUNCTIONAL DESCRIPTION:
;
;	Return PFN and modify bit if page is a candidate for write
; back clustering.
;
; CALLING SEQUENCE:
;
;	BSBW	MMG$PTEPFNMFY
;
; INPUTS:
;
;	R0 = Access mode to check against page owner
;	R1 = Exclusive writer indicator
;	R2 = Process section backing store address or GPTX
;	   = 0 if supposed to return the above or shared memory global page
;	R3 = System Virtual Address of Page Table Entry
;	IPL = SYNCH
;
; OUTPUTS:
;
;	R0 = Page Frame Number if successful
;	R1 = low bit clear if page is not a candidate for write back clustering
;	     non-zero if actual error, 0 if just not a candidate
;	   = low bit set if page could be cluster written
;	     bit 7 set if modified page
;	R2 = Process section address if process page
;	   = GPTX if global page
;	R3   preserved
;
;-
;
; **********************************************************************
;
; **************** THE FOLLOWING CODE MUST BE RESIDENT *****************
;
	.PSECT	$MMGCOD
;
; **********************************************************************
;

	.ENABL	LSB
;
; Pages with PFN's greater than MAXPFN must be in shared memory (or  PFN-mapped,
; PTE$V_WINDOW set).  Shared memory pages are always mapped via global sections.
; There is no PFN data base for shared memory global section pages.
;
SHM_PAGE:
	PUSHR	#^M<R0,R1,R4,R6>	;Save registers
	CLRL	R1			;Indicate no decrement to PTE ref count
	BSBW	MMG$FINDGSDPFN		;Find SHMGSD for this PFN
	BLBC	R0,30$			;Branch if none found (ERROR CONDITION)
	CMPB	SHB$B_PORT(R4),GSD$B_CREATPORT(R6) ;Is process on creator port?
	BNEQ	20$			;Br if different port, cannot do update
	MOVZWL	GSD$W_GSTX(R6),R2	;Get global section table index
	CLRL	R0			;Assume page not a wrt candidate
	BBC	#SEC$V_WRT,GSD$W_FLAGS(R6),30$ ;Br if section not writeable
	POPR	#^M<R0,R1,R4,R6>	;Restore registers
	ADDL2	#4,SP			;Clean off saved input backing store adr
	BBCS	#PTE$V_TYP0,R2,10$	;Treat section as a process section
10$:	BRW	100$			;in WRTPGSBAK routine
20$:	MOVZWL	#SS$_NOTCREATOR,R0	;Return error code
30$:	MOVL	R0,4(SP)		;Insure that error code gets to R1
	POPR	#^M<R0,R1,R4,R6>	;Restore registers
	BRW	180$			;Page not candidate for update

MMG$PTEPFNMFY:
	PUSHL	R1			;Save exclusive writer bit
	PUSHL	R2			;and the input backing store address
	EXTZV	#VA$V_VPN,#VA$S_VPN,R3,R1 ;Check for presence of page table
	TSTL	@W^MMG$GL_SPTBASE[R1]	;If SPT entry is not valid then
	BGEQ	70$			;this page table is not resident
	CMPZV	#PTE$V_OWN,#PTE$S_OWN,(R3),R0 ;Check for page owner violation
	BLSS	130$			;Branch if it is
	BICL3	#^C<PTE$M_VALID !-	;Get valid bit
		PTE$M_TYP1 ! PTE$M_TYP0 !- ;type bits
		PTE$M_PGFLVB>,(R3),R0	;and PFN/GPTX from the PTE
	BGEQ	140$			;Branch if not valid
	BBS	#PTE$V_WINDOW,R0,70$	;Branch if PFN-mapped
40$:	ROTL	#<32-<PTE$V_MODIFY-PFN$V_MODIFY>>,R0,R1 ;R1<7> = Modify bit
	EXTZV	#PTE$V_PFN,#PTE$S_PFN,R0,R0 ;Isolate PFN
	CMPL	R0,MMG$GL_MAXPFN	;Is this a SH MEM page?
	BGTRU	SHM_PAGE		;Br if it is a SH MEM page
50$:	BISB	@W^PFN$AB_STATE[R0],R1	;Or in PFN copy of Modify bit
	MOVL	@W^PFN$AL_BAK[R0],R2	;Backing store address to check
					;if page is not global
	CMPL	R3,@W^PFN$AL_PTE[R0]	;If process PTE address is different
	BEQL	60$			;Branch if process page
	SUBL3	W^MMG$GL_GPTBASE,@W^PFN$AL_PTE[R0],R2 ;Offset from GPT base
	ROTL	#<32-2>,R2,R2		;Form Global Page Table Index
60$:	TSTL	(SP)			;Specified section or GPTX?
	BEQL	80$			;Branch if not, return section or GPTX
	CMPL	R2,(SP)			;Yes, check that this one matches
	BEQL	90$			;Branch if it is
70$:	BRB	170$			;Not the same, end of cluster
80$:	MOVL	R2,(SP)			;Return the section or GPTX
90$:	MOVL	@W^PFN$AL_BAK[R0],R2	;Check that page is really writable
	BBC	#PTE$V_TYP0,R2,170$	;making sure it is a section,
	BBC	#PTE$V_WRT,R2,170$	;that it is writable
	BBS	#PTE$V_CRF,R2,170$	;and that it is not copy on reference
	POPR	#^M<R2>			;Fetch return section/GPTX
	BBS	#PTE$V_TYP0,R2,110$	;Branch if not a global page
;
; For the case of Global pages, the "complete" test for modified is not
; possible since all process' which have valid PTE's for the global page
; have their own copy of the modify bit.  This is only folded back into
; the PFN data base when the page is removed from the process' working
; set.  If the "exclusive write" flag is set, a Global page is only
; considered modified if the process PTE or the PFN data base says that
; the page is modified.  Otherwise, all Global Writable pages are considered
; modified for the purposes of this write back logic.
;
100$:	BLBS	(SP),110$		;Branch if exclusive writer
	BISB	#PFN$M_MODIFY,R1	;Force modify for global writable page
110$:	BISL	#1,R1			;Indicate successful return
120$:	ADDL	#4,SP			;Clean off save exclusive writer bit
	RSB
;
; Page owner violation
;
130$:	MOVZWL	#SS$_PAGOWNVIO,R1	;Return error status
	BRB	180$
;
; Page table entry was not valid, see if it is transition or global
;
140$:	BEQL	170$			;Branch if demand zero, end of cluster
	ASHL	#-PTE$V_TYP0,R0,R1	;Transition page?
	BEQL	160$			;Branch if yes
;
; Process page table entry is not valid and not transition.
; See if it is global.
;
	CMPB	#1,R1			;TYP1 = 0, TYP0 = 1 ?
	BNEQ	170$			;Branch if not global
	EXTZV	#PTE$V_GPTX,#PTE$S_GPTX,R0,R0 ;Isolate GPTX
	BICL3	#^C<PTE$M_VALID !-	;Get valid bit
		PTE$M_TYP1 ! PTE$M_TYP0 !- ;type bits
		PTE$M_PGFLVB>,-		;and PFN/GPTX
		@W^MMG$GL_GPTBASE[R0],R0 ;from the global PTE
	BGTR	150$			;Branch if not valid and not DZRO
	BEQL	170$			;Branch if demand zero to end cluster
	BRW	40$			;Process valid master PTE
150$:	ASHL	#-PTE$V_TYP0,R0,R1	;Check for transition state
	BNEQ	170$			;End of cluster if not
;
; This is a transition page.  If it is on the free or modified page list
; or in the RELPEND or ACTIVE state, then it is still a candidate.
;
160$:	EXTV	#PFN$V_LOC,#PFN$S_LOC,-	;Get page location (-4 to 3)
		@W^PFN$AB_STATE[R0],R1

	ASSUME	PFN$C_RDERR	EQ 4	;Page read error -4
	ASSUME	PFN$C_WRTINPROG	EQ 5	;Write in progress -3
	ASSUME	PFN$C_RDINPROG	EQ 6	;Read in progress -2
	ASSUME	PFN$C_ACTIVE	EQ 7	;Active -1
	ASSUME	PFN$C_FREPAGLST EQ 0	;On free page list
	ASSUME	PFN$C_MFYPAGLST EQ 1	;On modified page list
	ASSUME	PFN$C_BADPAGLST EQ 2	;On bad page list
	ASSUME	PFN$C_RELPEND	EQ 3	;Release pending

	CASE	R1,<-
		200$,-			;-1 = active
		200$,-			;0  = free page list
		200$,-			;1  = modified page list
		190$,-			;2  = bad page list
		200$ -			;3  = release pending
		>,TYPE=B,LIMIT=#-1
;
; This page is not part of the current cluster
;
170$:	CLRL	R1			;Return error status
180$:	POPR	#^M<R2>			;Clean off saved input backing store adr
	BRB	120$
;
; This page is on the bad page list, if it does not have the "bad" bit
; set, then the page was placed there by the modified page writer due to
; a write error.  In this case the page should be a candidate for write back.
;
190$:	BBS	#PFN$V_BADPAG,@W^PFN$AB_TYPE[R0],170$ ;End cluster if bad bit set
;
; This page is resident and has no I/O pending.  It may be clustered.
;
200$:	CLRL	R1			;No modify bit from PTE
	BRW	50$

	.DSABL	LSB

	.END
