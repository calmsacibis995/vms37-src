	.TITLE	SYSSETPRT - Set Page Protection System Service
	.IDENT	'V03-000'
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************

;++
; FACILITY:
;
; ABSTRACT:
;
; ENVIRONMENT:
;
; AUTHOR: PETER H. LIPMAN	, CREATION DATE: 24-APR-78
;
; MODIFIED BY:
;
;	V02-005	LJK0022		Lawrence J. Kenah	19-May-1981
;		Replace CDL$x_ symbols with MMG$x_ symbols. Add $MMGDEF
;		macro. Make these offsets local symbols.
;
;	V02-004 WMC0001		Wayne M. Cardoza	30-March-1981
;		Allow protection changes on global CRF pages
;
;	V02-003	LJK0002		Lawrence J. Kenah	18-Sep-1980 14:35
;		Do not allow protection to be altered for PFN mapped pages.
;
;--

	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;
	$JIBDEF				;JIB OFFSETS
	$MMGDEF				; Offsets from FP into scratch area
	$PFNDEF				;PAGE FRAME NUMBER DATA BASE
	$PHDDEF				;PROCESS HEADER DEFINITIONS
	$PRDEF				;PROCESSOR REGISTER DEFINTIONS
	$PRTDEF				;PROTECTION CODE DEFINITIONS
	$PTEDEF				;PAGE TABLE ENTRY DEFINITIONS
	$SSDEF				;SYSTEM STATUS CODE DEFINTIONS
;
; EXTERNAL SYMBOLS:
;
;
; MACROS:
;
;
; EQUATED SYMBOLS:
;
; OFFSET FROM AP
;
	INADR		= 4		;OFFSET TO INPUT RANGE
	RETADR		= 8		;OFFSET TO RETURN RANGE
	ACMODE		= 12		;ACCESS MODE
	PROT		= 16		;NEW PROTECTION
	PRVPRT		= 20		;PREVIOUS PROTECTION ADDRESS
;
; OWN STORAGE:
;

	.SBTTL	SETPRT - SET PROTECTION FOR RANGE OF PAGES
;++
; FUNCTIONAL DESCRIPTION:
;
;	THE SET PROTECTION SYSTEM SERVICE SETS THE PROTECTION FOR
;	THE SPECIFIED RANGE OF PAGES CHECKING THAT THE SPECIFIED MODE
;	IS AT LEAST AS PRIVILEGED AS THE OWNER OF THE PAGE.
;
; CALLING SEQUENCE:
;
;	CALLG	ARGLIST,@#SYS$SETPRT
;
; INPUT PARAMETERS:
;
;	INADR(AP) = ADDRESS OF 2 LONG WORDS THE 1ST OF WHICH SPECIFIES
;		THE STARTING VIRTUAL ADDRESS TO CREATE, THE 2ND SPECIFIES
;		THE ENDING VIRTUAL ADDRESS TO CREATE (INCLUSIVE).
;	RETADR(AP) = ADDRESS OF A 2 LONGWORD ARRAY INTO WHICH IS RETURNED
;		THE STARTING AND ENDING VIRTUAL ADDRESSES (INCLUSIVE)
;		OF THE PAGES JUST CREATED
;	ACMODE(AP) = THE ACCESS MODE (MAXIMIZED WITH CALLING MODE)
;		ON BEHALF OF WHICH THE CHANGE PROTECTION IS TO BE DONE
;		THIS MODE MUST BE AT LEAST AS PRIVILEGED AS THE MODE
;		OF THE PAGE OWNER.
;	PROT(AP)   = THE NEW PROTECTION FOR THE PAGE(S) SPECIFIED IN
;		THE LOW 4 BITS OF THE PARAMETER IN THE HARDWARE FORMAT.
;		THE REMAINING BITS ARE IGNORED.
;	PRVPRT(AP) = THE ADDRESS TO RETURN THE PREVIOUS PROTECTION
;		OF THE LAST (ONLY) PAGE CHANGED.
;
; IMPLICIT INPUTS:
;
;	CURRENT PCB LOCATED VIA SCH$GL_CURPCB
;	PROCESS HEADER AS SPECIFIED IN PCB$L_PHD OF THE PCB
;
; OUTPUT PARAMETERS:
;
;	R0 = SYSTEM STATUS CODE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	SS$_NORMAL			;SUCCESSFUL COMPLETION
;	SS$_NOPRIV			;NO PRIV TO CHANGE PROT ON SYS OR GLOBAL PAGE
;	SS$_PAGOWNVIO			;PAGE OWNER VIOLATION
;	SS$_LENVIO			;LENGTH VIOLATION
;	SS$_ACCVIO			;ACCESS VIOLATION
;					;INPUT RANGE INACCESSIBLE
;					;RETURN RANGE NOT WRITABLE
;					;PREVIOUS PROTECTION ADDRESS NOT WRITABLE
;
; SIDE EFFECTS:
;
;	NONE
;
;--

;
; **********************************************************************
;
; **************** THE FOLLOWING CODE MAY BE PAGED *****************
;
	.PSECT	Y$EXEPAGED
;
; **********************************************************************
;
	.ENTRY	EXE$SETPRT,^M<R2,R3,R4,R5,R6,R7,R8,R9>

	SUBL	S^#-MMG$C_LENGTH,SP	;RESERVE SCRATCH AREA
	MOVAL	L^MMG$SETPRTPAG,R6	;R6 = SUBR ADR TO CALL

	ASSUME	PRT$C_NA EQ 0
	ASSUME	PRT$C_RESERVED EQ 1
	MOVZBL	PROT(AP),R8		;GET NEW PROTECTION
	CMPL	R8,#PRT$C_RESERVED	;RESERVED OR NO ACCESS?
	BLEQ	40$			;BRANCH IF YES
	BITB	#^C<PTE$M_PROT @ -PTE$V_PROT>,R8 ;BAD PROTECTION CODE?
	BNEQ	50$			;BRANCH IF YES
10$:	CLRL	R9			;INIT THE RETURN PROTECTION
	BSBW	MMG$CRECOM1		;COMMON CREATE CODE
	MOVL	PRVPRT(AP),R2		;ADDRESS TO RETURN PREVIOUS PROTECTION
	BEQL	20$			;BRANCH IF NONE SPECIFIED
	IFNOWRT	#1,(R2),30$		;BRANCH IF NOT WRITABLE
	MOVB	R9,(R2)			;RETURN THE PREVIOUS PROTECTION
20$:
	RET				;EXIT WITH STATUS FROM CRECOM1
30$:	MOVZWL	#SS$_ACCVIO,R0		;ACCESS VIOLATION
	RET
40$:	BEQL	50$			;BRANCH IF RESERVED
;
; REQUESTED PROTECTION IS NO ACCESS
; MUST BE AT LEAST KERNEL READ FOR THE FAULTING LOGIC TO WORK FOR
; TRANSITION PAGES IN BOTH SETPRTPAG AND DELPAG.
;
	MOVL	#PRT$C_KR,R8		;FORCE AT LEAST KERNEL READ
	BRB	10$
;
; ILLEGAL OR RESERVED PROTECTION CODE SPECIFIED
;
50$:	MOVZWL	#SS$_IVPROTECT,R0	;INVALID PROTECTION CODE
	RET

	.SBTTL	SETPRTPAG - SET PROTECTION FOR A SINGLE PAGE
;++
; FUNCTIONAL DESCRIPTION:
;
;
; CALLING SEQUENCE:
;
;	BSBW	MMG$SETPRTPAG
;
;
; INPUT PARAMETERS:
;
;	R0 = ACCESS MODE FOR PAGE OWNERSHIP CHECK
;	R2 = VIRTUAL ADDRESS
;	R4 = CURRENT PCB ADDRESS
;	R5 = PROCESS HEADER ADDRESS - P1 OR SYSTEM SPACE
;	R6 = COUNT - 1 OF PAGES TO BE PROCESSED INCLUDING THIS ONE
;	R7 = +^X200 IF GOING FORWARD IN THE ADDRESS SPACE
;	   = -^X200 IF GOING BACKWARDS IN THE ADDRESS SPACE
;	R8 = NEW PROTECTION
;
;	IPL = ASTDEL
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;
;	R0 = STATUS CODE
;	R2   PRESERVED
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;
;	SS$_NORMAL			;SUCCESSFUL COMPLETION
;	SS$_NOPRIV			;NO PRIV TO CHANGE PROT ON SYS OR GLOBAL PAGE
;	SS$_PAGOWNVIO			;PAGE OWNER VIOLATION
;	SS$_LENVIO			;LENGTH VIOLATION
;	SS$_ACCVIO			;ACCESS VIOLATION
;
; SIDE EFFECTS:
;
;	NONE
;
;--

;
; **********************************************************************
;
; **************** THE FOLLOWING CODE MUST BE RESIDENT *****************
;
	.PSECT	$MMGCOD
;
; **********************************************************************
;
MMG$SETPRTPAG::
	SAVIPL				;SAVE CALLER'S IPL
	PUSHL	R0			;SAVE ACCESS MODE
	BSBW	MMG$PTEREF		;REFERENCE PTE, RETURN SVAPTE
					;RETURN AT IPL=SYNCH
	BLBC	R0,BRPRTPAGRET		;BRANCH IF LENGTH VIOLATION
	MOVL	(R3),R1			;FETCH THE PAGE TABLE ENTRY
	BEQL	PRTPAGACCVIO		;BRANCH IF DELETED
	MOVL	(SP),R0			;ACCESS MODE
	BSBW	MMG$PAGETYPE		;CHECK ACCESS, RETURN PAGE TYPE
	BLBC	R0,BRPRTPAGRET		;BRANCH IF PAGE OWNER VIOLATION
;
; R1 <0:7> PTE TYPE TO CASE ON (TYP0*2 + TYP1)
; R2 = VA, R3 = SVAPTE, IPL = SYNCH
; 0(SP) = ACCESS MODE, 4(SP) = SAVED IPL
;
	EXTZV	#PTE$V_PROT,#PTE$S_PROT,(R3),R9 ;PREVIOUS PROTECTION
;
; THE FOLLOWING CODE SETS BIT 31 OF R8 IF THE REQUESTED PROTECTION
; CHANGE IS FROM READ ONLY TO READ WRITE, WHICH IN TURN WILL TRIGGER
; COPY ON REFERENCE LOGIC FOR SECTION TABLE PAGES.
;
	MOVZBL	R8,R8			;RESET BIT 31
	BEQL	50$			;BRANCH IF NEW PROT IS "NO ACCESS"
	CMPZV	#0,#2,R8,#3		;IF EITHER OF 2 LOW BITS IS CLEAR
					;THEN NEW PROT ALLOWS WRITE
	BEQL	50$			;BRANCH IF READ ONLY
;
; NEW PROTECTION WILL SET PAGE WRITABLE
; SEE IF OLD PROTECTION WAS READ ONLY
;
	CMPZV	#0,#2,R9,#3		;IF BOTH LOW BITS WERE SET
					;THEN PAGE WAS READ ONLY
	BNEQ	50$			;BRANCH IF PAGE WAS WRITABLE
	BBSS	#31,R8,50$		;SET BIT INDICATING TRANSITION
					;FROM READ ONLY TO WRITABLE
50$:
	EXTZV	#PTE$V_PFN,#PTE$S_PFN,(R3),R0 ;R0=PFN IF PTE HAS ONE
	CASE	TYPE=B, SRC=R1, DISPLIST=<- ;DISPATCH ON PTE TYPE
		PRTTRANS,-		;TRANSITION OR DZRO
		PRTPAGFIL,-		;PAGING FILE
		PRTGLOBAL,-		;GLOBAL
		PRTSTX,-		;SECTION TABLE INDEX
		PRTVALID-		;VALID PAGE
	>
;
; TRANSITION OR DEMAND ZERO PAGE
; FAULT THIS PAGE TO AVOID HAVING ANY CODE OTHER THAN THE PAGE FAULT
; UNDERSTAND ALL THE TRANSITION STATES.  THE FAULTING OF DEMAND ZERO
; PAGES ELIMINATES THE POSSIBILITY OF THE "ZERO PAGE" LOGIC IN THE
; PAGE FAULT GETTING AN ACCESS VIOLATION.
;
PRTTRANS:
	TSTL	R0			;DEMAND ZERO PAGE?
	BNEQ	20$			;BRANCH IF NOT
	CMPZV	#0,#2,R8,#3		;NEW PROT ALLOWS WRITING IF
					;EITHER LOW BIT IS 0
	BEQL	20$			;CONTINUE IF PAGE WILL NOT BE WRITABLE
	BRW	PRTCHANGE		;BRANCH IF PAGE WILL STILL BE WRITABLE
					;CHANGE PROTECTION WITHOUT FAULTING PAGE
20$:	POPR	#^M<R0>			;R0 = SAVED ACCESS MODE
	ENBINT				;POP AND RESTORE SAVED IPL
	TSTB	(R2)			;FAULT THE PAGE
	BRB	MMG$SETPRTPAG		;AND RESTART THE SET PROT ROUTINE
;
; PAGE ALREADY DELETED, CAN'T CHANGE PROTECTION
;
PRTPAGACCVIO:
	MOVZWL	#SS$_ACCVIO,R0		;ACCESS VIOLATION
	BRB	BRPRTPAGRET
;
; GLOBAL PAGE
;
PRTGLOBAL:
	MOVL	MMG$GL_GPTBASE,R0
	EXTZV	#PTE$V_GPTX,#PTE$S_GPTX,(R3),R1 ; GET GPTX
	MOVL	(R0)[R1],R1		;GET GPTE
	PUSHL	R1
	CLRL	R0			;ASSUME KERNEL MODE ACCESS
	BSBW	MMG$PAGETYPE
	MOVL	(SP)+,R0		;GET BACK THE GPTE
	CMPB	R1,#3			;IS IT A GLOBAL SECTION INDEX
	BNEQ	PRTNOPRIV		;NO - CAN'T CHANGE THE PROTECTION
	BBS	#PTE$V_CRF,R0,PRTCHANGE ;ALLOWED IF CRF
PRTNOPRIV:
	MOVZWL	#SS$_NOPRIV,R0		;NO PRIVILEGE
BRPRTPAGRET:
	BRB	PRTPAGRET
;
;	R0 - ADDRESS OF JIB
;
; EXCEEDED PAGE FILE QUOTA
;
PGFLQUOTA:
	INCL	JIB$L_PGFLCNT(R0)	;FIX UP THE COUNT
	TSTL	(SP)+			;CLEAN STACK
	MOVZWL	#SS$_EXQUOTA,R0		;RETURN "EXCEEDED QUOTA"
	BRW	PRTPAGRET
;
; SECTION TABLE PAGE
;
PRTSTX:
	BBC	#31,R8,PRTCHANGE	;BRANCH IF NO NEED TO COPY ON REF
	BBS	#PTE$V_WRT,(R3),PRTCHANGE ;BRANCH IF SECTION IS WRITABLE
	PUSHL	R0			;SAVE PFN
	MOVL	PCB$L_JIB(R4),R0	;GET JIB ADDRESS
	DECL	JIB$L_PGFLCNT(R0)	;CHARGE A PAGE FILE PAGE
	BLSS	PGFLQUOTA		;BRANCH IF OVER QUOTA
	POPL	R0			;RESTORE PFN
	BBCS	#PTE$V_CRF,(R3),PRTCHANGE ;FORCE COPY ON REFERENCE
	BRB	PRTCHANGE		;AND GO CHANGE THE PROTECTION
;
; VALID PAGE
;
PRTVALID:
	CMPL	R0,MMG$GL_MAXPFN	;IS THIS PAGE IN SHARED MEMORY?
	BGTRU	PRTNOPRIV		;BR IF IN SHAR MEM, MUST BE GBL SEC PAG
	BBS	#PTE$V_WINDOW,(R3),PRTNOPRIV ;Return error if PFN mapped page
	ASSUME	PFN$C_PROCESS EQ 0	;PROCESS PAGE TYPE
	BITB	#PFN$M_PAGTYP,@W^PFN$AB_TYPE[R0] ;PROCESS PAGE?
	BNEQ	PRTNOPRIV		;BRANCH IF NOT
	BBC	#31,R8,PRTCHANGE	;BRANCH IF NO NEED TO COPY ON REF
	ROTL	#<31-PTE$V_TYP0>,@W^PFN$AL_BAK[R0],R1 ;R1<31> = TYP0 BIT
	BGEQ	PRTCHANGE		;BRANCH IF ALREADY PAGING FILE ADDRESS
;
; CHANGE SECTION ADDRESS TO "NOT YET ALLOCATED" PAGING FILE ADDRESS
;
	BBS	#<PTE$V_WRT+<31-PTE$V_TYP0>>,R1,PRTCHANGE ;BRANCH IF SECTION WRITABLE
	PUSHL	R0			;SAVE PFN
	MOVL	PCB$L_JIB(R4),R0	;GET JIB ADDRESS
	DECL	JIB$L_PGFLCNT(R0)	;CHARGE PAGE FILE QUOTA
	BLSS	PGFLQUOTA		;BRANCH IF OVER QUOTA
	POPL	R0			;RESTORE PFN
	EXTV	#<PTE$V_STX+<31-PTE$V_TYP0>>,- ;GET SECTION INDEX
		#PTE$S_STX,R1,R1		;FROM SHIFTED BACKING STORE ADDRESS
	PUSHL	R2			;SAVE VIRTUAL ADDRESS
	BSBW	MMG$DECSECREF		;COUNT ONE LESS SECTION REFERENCE
	POPR	#^M<R2>			;RESTORE SAVED VIRTUAL ADDRESS
	MOVL	PHD$L_PAGFIL(R5),@W^PFN$AL_BAK[R0] ;SET NULL PAGING FILE ADDRESS
					;SET NULL PAGING FILE ADR
	BBSS	#PTE$V_MODIFY,(R3),10$	;FORCE MODIFY
10$:
;
; PAGE FILE PAGE
;
PRTPAGFIL:
;
; CHANGE THE PAGE PROTECTION
;
PRTCHANGE:
	INSV	R8,#PTE$V_PROT,#PTE$S_PROT,(R3) ;SET NEW PROTECTION
	INVALID	R2			;AND INVALIDATE THE TRANS BUFFER
	MOVZWL	#SS$_NORMAL,R0		;SUCCESSFUL COMPLETION
;
; EXIT HERE WITH R0 ALREADY SET
; 0(SP) = ACCESS MODE, 4(SP) = IPL TO RESTORE, 8(SP) = SAVED PSL
;
PRTPAGRET:
	POPR	#^M<R1>			;POP THE SAVED ACCESS MODE
	ENBINT				;RESTORE CALLER'S IPL
	RSB				;AND RETURN



	.END
