	.TITLE	ALLOCPFN - PFN LIST MANIPULATING ROUTINES
	.IDENT	'V03-001'
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************

;++
; FACILITY:	EXECUTIVE, MEMORY MANAGEMENT SUBROUTINES
;
; ABSTRACT:	ALLOCPFN CONTAINS THE ROUTINES FOR MANIPULATING PFN LISTS
;	THE KNOWLEDGE OF THE FORMAT AND LOCATION OF THESE LISTS IS RESTRICTED
;	TO THIS MODULE, WRTMFYPAG, AND SWAPPER.  SINCE SHRCNT AND WSLX
;	OVERLAP FLINK AND BLINK, THOSE WORD REFERENCES CAN ALSO BE THOUGH
;	OF AS WORD WIDTH DEPENDENCIES FOR THE PFN
;
; ENVIRONMENT:	THESE ROUTINES MUST ALL BE CALLED AT THE SYNCH IPL!!!
;
;--
;
	.SBTTL	HISTORY			; DETAILED
;
; AUTHOR: PETER H. LIPMAN	, CREATION DATE: 14-SEP-76
;
; MODIFIED BY:
;
;	V03-001	LJK0140		Lawrence J. Kenah	4-Mar-1982
;		Change insertion and removal routines to take into account
;		the fact that array elements for PFN 0 may not exist.
;
;	V02-005	HRJ0051		Herb Jacobs		30-Jan-1982
;		Set flag for OSWPSCHED if FPG queue reordered in case
;		OSWPSCHED is looking at that queue.
;
;	V02-004	HRJ0025		Herb Jacobs		18-Aug-1981
;		Make freeing of modified page backing store a subroutine.
;
;	V02-003	HRJ0025		Herb Jacobs		30-Jul-1981
;		Release backing store addresses for pages going to the
;		modified list.
;
;	V02-002	LJK0030		Lawrence J. Kenah	18-May-1981
;		Replace all PFN references to FLINK and BLINK with
;		the PFN_REFERENCE macro to support large physical
;		memory configurations.
;
;	V02-001	LJK0029		Lawrence J. Kenah	18-May-1981
;		Make listheads for three physical page lists longwords instead 
;		of words and change all references to these listheads.

	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;
	$OPDEF				; Define opcode equivalences
	$PFNDEF				; PFN DATA BASE DEFINITIONS
	$PRIDEF				; PRIORITY INCREMENT CLASS DEFINITIONS
	$PTEDEF				; PAGE TABLE ENTRY DEFINITIONS
	$VADEF				; VIRTUAL ADDRESS FIELD DEFINITIONS
	$WQHDEF				; WAIT QUEUE HEADER DEFINITIONS
;
; EXTERNAL SYMBOLS:
;
;
; MACROS:
;
;
; EQUATED SYMBOLS:
;
;
; OWN STORAGE:
;
	.PSECT	$$$210,LONG
;
; PFN LISTS INDEXED BY LIST IDENTIFIER, FREE, MODIFIED, AND BAD PAGE LISTS
;
PFN$AL_HEAD::
	.LONG	0,0,0			;HEAD OF PFN LISTS
	PFN$AL_MFYLSTHD==PFN$AL_HEAD+4	;ADDRESS OF MODIFIED PAGE LIST HEAD
PFN$AL_TAIL:
	.LONG	0,0,0			;TAIL OF PFN LISTS
PFN$AL_COUNT:
	.LONG	0,0,0			;COUNT OF PFN LIST ENTRIES
	SCH$GL_FREECNT==PFN$AL_COUNT	;FREE PAGE COUNT
	SCH$GL_MFYCNT==PFN$AL_COUNT+4	;MODIFIED PAGE COUNT
PFN$GL_PHYPGCNT::			;AVAILABLE PHYSICAL PAGE COUNT
	.LONG	0			;
PFN$AL_HILIMIT::
	.LONG	1@30,25,1@30		;"LIST TOO FULL" THRESHOLD
	SCH$GL_FREEREQ==PFN$AL_HILIMIT	;REQUIRED FREE PAGES BY SWAPPER
	SCH$GL_MFYLIM==PFN$AL_HILIMIT+4	;MODIFIED PAGE LIST HILIMIT
PFN$AL_LOLIMIT::
	.LONG	10,10,-1		;"LIST NEARLY EMPTY" THRESHOLD
	SCH$GL_FREELIM==PFN$AL_LOLIMIT
	SCH$GL_MFYLOLIM==PFN$AL_LOLIMIT+4
SCH$GL_MFYLIMSV::			;THE MODIFIED PAGE WRITER RESTORES
	.LONG	25			;THIS VALUE TO SCH$GL_MFYLIM AFTER
					;WRITING ALL THE MODIFIED PAGES
SCH$GL_MFYLOSV::			;THE MODIFIED PAGE WRITER RESTORES
	.LONG	10			;THIS VALUE TO SCH$GL_MFYLOLIM AFTER
					;WRITING ALL THE MODIFIED PAGES.
;
; **********************************************************************
;
; **************** THIS ENTIRE MODULE MUST BE RESIDENT *****************
;
	.PSECT	$MMGCOD
;
; **********************************************************************
;

	.SBTTL	ALLOCPFN - ALLOCATE A PAGE FROM THE FREE PAGE LIST
;++
; FUNCTIONAL DESCRIPTION:
;
;	ALLOCATE A PFN FROM THE FRONT OF THE FREE LIST, RELEASING ITS
; CONTENTS IF ANY.  IPL MUST BE AT SYNCH OR HIGHER.
;
; CALLING SEQUENCE:
;
;	BSBW	MMG$ALLOCPFN
;
; INPUT PARAMETERS:
;
;	IPL MUST BE AT SYNCH OR HIGHER
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;
;	R0 = PFN IF PAGE IS ALLOCATED OR NEGATIVE IF NONE AVAILABLE
;	PFN$AL_PTE[R0] = 0
;	PFN$AW_REFCNT[R0] = 0
;
; IMPLICIT OUTPUTS:
;
;	IF PFN HAD PREVIOUS CONTENTS (PFN$AL_PTE[R0] NEQ 0), THEN
; THE PREVIOUS PTE IS TRANSFORMED FROM "TRANSITION" TO ITS BACKUP ADDRESS.
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	NONE
;
;--
MMG$ALLOCPFN::
	ASSUME	PFN$C_FREPAGLST EQ 0
	CLRL	R2			;FREE PAGE LIST ID
	BSBW	MMG$REMPFNH		;GET A PAGE FROM THE HEAD
	BBC	#31,R0,20$		;BRANCH IF GOT A PAGE
	RSB				;OTHERWISE RETURN, NONE AVAILABLE
;
; MUST NOW RELEASE ANY PREVIOUS CONTENTS
;
20$:
	TSTW	@W^PFN$AW_REFCNT[R0]	;REF COUNT OK?
	BEQL	MMG$DELCONPFN		;IT MUST BE ZERO AT THIS POINT
	BUG_CHECK FREEPAGREF,FATAL	;FREE PAGE REFERENCE COUNT NONZERO

	.SBTTL	DELCONPFN - DELETE CONTENTS OF PFN
;++
; FUNCTIONAL DESCRIPTION:
;
;	DELCONPFN DELETES THE CONTENTS OF A PFN.  WHEN A PAGE IS 
; PLACED ON THE FREE PAGE LIST, IT NORMALLY RETAINS ITS CONTENTS SO THAT
; IT MAY BE FAULTED OFF THE FREE LIST.  WHEN THE PAGE IS FINALLY ABOUT
; TO BE REUSED, THEN ITS CONTENTS MUST BE DELETED.  THIS BASICALLY INVOLVES
; STORING THE BACKUP ADDRESS IN THE ORIGINAL PTE SO THAT IT NO LONGER POINTS
; TO THIS PFN.
;
; CALLING SEQUENCE:
;
;	BSBW	MMG$DELCONPFN
;
; INPUT PARAMETERS:
;
;	R0 = PFN
;	PFN$AW_REFCNT[R0] = 0
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;
;	R0 PRESERVED
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	NONE
;
;--
MMG$DELCONPFN::
	MOVL	@W^PFN$AL_PTE[R0],R3	;SVA PTE OF CURRENT CONTENTS
	BEQL	60$			;BRANCH IF CONTENTS ALREADY RELEASED
	BICL3	#^C<PTE$M_VALID ! PTE$M_TYP1 ! PTE$M_TYP0 ! PTE$M_PFN>,(R3),R1
	CMPL	R0,R1			;TRANSITION PAGE WITH SAME PFN?
	BNEQ	20$			;BRANCH IF INCONSISTENT
;
; NOW RESTORE BACKUP ADR TO PTE OF ORIGINAL OWNER OF THE PAGE
;
	BICL3	#^C<PTE$M_PROT ! PTE$M_OWN>,(R3),R1 ;R1 = PROT AND OWNER
	BICL3	#^C<PFN$M_BAK ! PFN$M_GBLBAK>,-
		@W^PFN$AL_BAK[R0],R2	;BACKING STORE ADDRESS
	BBSC	#PFN$V_GBLBAK,R2,10$	;CLR GBLBAK BRANCH IF WAS SET
	BBSS	#PTE$V_TYP1,R2,10$	;SET THE HIGH ORDER TYPE BIT
					;FOR SECTION OR PAGE FILE
10$:	BISL3	R1,R2,(R3)		;STORE THE BACKUP ADR

	ASSUME	PFN$C_PROCESS EQ 0
	ASSUME	PFN$C_SYSTEM  EQ 1
	ASSUME	PFN$C_GLOBAL  EQ 2
	ASSUME	PFN$C_GBLWRT  EQ 3
	ASSUME	PFN$C_PPGTBL  EQ 4
	ASSUME	PFN$C_GPGTBL  EQ 5

	EXTZV	#PFN$V_PAGTYP,#PFN$S_PAGTYP,- ;GET PAGE TYPE TO DISPATCH ON
		@W^PFN$AB_TYPE[R0],R1
	CASE	R1,<-
		40$,-			;PROCESS PAGE
		50$,-			;SYSTEM PAGE
		40$,-			;GLOBAL READ ONLY
		40$,-			;GLOBAL WRITABLE
		30$,-			;PROCESS PAGE TABLE
		50$-			;GLOBAL PAGE TABLE
	>
;
; ERROR IN DELCONPFN
;
20$:	BUG_CHECK DELCONPFN,FATAL	;
;
; PROCESS PAGE TABLE PAGE
;
30$:	SUBL3	W^SWP$GL_BALSPT,R3,R1	;BYTE OFFSET INTO SPT FOR PROCESS HEADERS
	DIVL	W^SWP$GL_BSLOTSZ,R1	;PROCESS HEADER INDEX
	ASHL	#-2,R1,R1		;FOR BYTE COUNT
	BSBW	MMG$DECPHDREF1		;DECREMENT PROCESS HEADER REF CNT
	BRB	50$
;
; PROCESS OR GLOBAL PAGE, MUST REDUCE PAGE TABLE REFERENCE COUNT
;
40$:	BSBW	MMG$DECPTREF		;COUNT ONE LESS REF FOR PAGE TABLE
;
; REINITIALIZE THE PFN DATA BASE NOW
;
50$:	CLRL	@W^PFN$AL_PTE[R0]	;ZERO THE PTE POINTER (PAGE EMPTY)
60$:	CLRL	@W^PFN$AL_BAK[R0]	;ZERO THE BACKING STORE ADDRESS
	CLRW	@W^PFN$AW_SWPVBN[R0]	;ZERO THE SWAP FILE VBN
	CLRB	@W^PFN$AB_STATE[R0]	;ZERO THE PFN STATE
	CLRB	@W^PFN$AB_TYPE[R0]	;ZERO THE PFN TYPE
;
; ***** THE FOLLOWING ASSUMPTIONS ARE MADE HERE
;
;	PFN$AW_WSLX[R0]   IS THE SAME AS PFN$AW_BLINK[R0]
;	PFN$AW_SHRCNT[R0] IS THE SAME AS PFN$AW_FLINK[R0]
;
;	BOTH OF THE ABOVE ARE ZEROED BY MMG$REMPFN OR MMG$REMPFNH
;
	RSB


	.SBTTL	REMPFN - REMOVE A PFN FROM LIST

;++
; FUNCTIONAL DESCRIPTION:
;
;	REMOVE A PFN FROM THE SPECIFIED PFN LIST.  THIS ROUTINE ACCEPTS
; A PFN AND A PFN LIST IDENTIFIER AND REMOVES THE PFN FROM THE LIST.
; IT MUST BE CALLED AT IPL GREATER OR EQUAL TO SYNCH.
;
; CALLING SEQUENCE:
;
;	BSBW	MMG$REMPFNH		;REMOVE PFN FROM HEAD OF LIST
;	BSBW	MMG$REMPFN		;REMOVE SPECIFIED PFN FROM LIST
;
; INPUT PARAMETERS:
;
;	R0 = PFN TO REMOVE (UNLESS REMPFNH)
;	R2 = PFN LIST IDENTIFIER
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;
;	R0 = PFN REMOVED
;	     OR NEGATIVE IF REMPFNH FROM EMPTY LIST
;
; IMPLICIT OUTPUTS:
;
;	THE LIST HEAD, TAIL AND COUNT FOR THE SPECIFIED LIST IS UPDATED
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	THESE ROUTINES ARE WRITTEN IN SUCH A WAY THAT THE FIRST ELEMENT
; IN EACH ARRAY NEED NOT CORRESPOND TO PFN 0. THAT IS, THERE NEED NOT BE
; ARRAY ELEMENTS CORRESPONDING TO PFN 0.
;
;--

MMG$REMPFNH::
	MOVL	W^PFN$AL_HEAD[R2],R0	;R0 = PFN FROM HEAD OF LIST
	BNEQ	MMG$REMPFN		;REMOVE THE PFN IF ANY
	DECL	R0			;RETURN NEGATIVE IF EMPTY
	RSB
;
; R0 = PFN TO REMOVE, R2 = LIST IDENTIFIER
;
MMG$REMPFN::
		PFN_REFERENCE	-
	MOVZWL	<@W^PFN$Ax_FLINK[R0],R1>,-	;R1 = NEXT PFN
		LONG_OPCODE=MOVL,-
		IMAGE=SYS_NONPAGED
		PFN_REFERENCE	-
	MOVZWL	<@W^PFN$Ax_BLINK[R0],R3>,-	;R3 = PREVIOUS PFN
		LONG_OPCODE=MOVL,-
		IMAGE=SYS_NONPAGED
	BEQL	10$			;BRANCH IF HEAD OF LIST

		PFN_REFERENCE	-
	MOVW	<R1,@W^PFN$Ax_FLINK[R3]>,-	;FLINK[PREV] = NEXT
		LONG_OPCODE=MOVL,-	;R3 NEQ 0
		IMAGE=SYS_NONPAGED
	BNEQ	15$			;BRANCH IF NOT TAIL

; IF NEXT = 0 THEN PFN BEING REMOVED WAS THE TAIL OF THE LIST

5$:	MOVL	R3,W^PFN$AL_TAIL[R2]	;TAIL = PREVIOUS
	BRB	20$			;JOIN COMMON CODE

; IF PREVIOUS = 0 THEN PFN BEING REMOVED WAS HEAD OF THE LIST

10$:	MOVL	R1,W^PFN$AL_HEAD[R2]	;HEAD = NEXT
	BEQL	5$			;BRANCH IF ALSO TAIL

15$:		PFN_REFERENCE	-
	MOVW	<R3,@W^PFN$Ax_BLINK[R1]>,-	;BLINK[NEXT] = PREVIOUS
		LONG_OPCODE=MOVL,-	;R1 NEQ 0
		IMAGE=SYS_NONPAGED
20$:
	SOBGTR	W^PFN$AL_COUNT[R2],30$	;ONE LESS PFN, BRANCH IF NOT EMPTY
;
; CHECK CONSISTENCY OF THE COUNT AND LIST HEAD OF EMPTY LIST
;
	BISL	R1,R3			;BOTH HEAD AND TAIL 0?
	BEQL	30$			;BRANCH IF OK
	BUG_CHECK PFNLISTCNT,FATAL	;INCONSISTENT PFN LIST COUNT
30$:
		PFN_REFERENCE	-
	CLRW	<@W^PFN$Ax_FLINK[R0]>,-		;ZERO THE NEW PAGE'S FLINK
		LONG_OPCODE=CLRL,-
		IMAGE=SYS_NONPAGED
		PFN_REFERENCE	-
	CLRW	<@W^PFN$Ax_BLINK[R0]>,-		;ZERO THE NEW PAGE'S BLINK
		LONG_OPCODE=CLRL,-
		IMAGE=SYS_NONPAGED
	CMPL	W^PFN$AL_COUNT[R2],W^PFN$AL_LOLIMIT[R2] ;NEARLY EMPTY?
	BGTR	40$			;BRANCH IF NOT
;
; THIS LIST IS BELOW ITS THRESHOLD SIZE, INFORM THE INTERESTED PARTY
;
	CASE	R2,<-
		WAKESWAPPER-		;FREE LIST - INFORM SWAPPER
	>
40$:
	RSB

	.SBTTL	RLPFNSAVPTE - RELEASE PFN SAVING PAGE TABLE ENTRY
;++
; FUNCTIONAL DESCRIPTION:
;
;	THIS ROUTINE RELEASES THE GIVEN PFN BUT LEAVES THE CONTENTS OF
;	THE PTE ADDRESSED BY R3 ALONE.  IT IS USED FOR RELEASING THE PFN
;	FOR A GLOBAL DZRO PAGE WHEN 2 OR MORE PROCESSES TRIED TO ZERO THE
;	PAGE.  ONE MAKES IT, THE OTHERS RELEASE THE PFN AND START OVER.
;
; CALLING SEQUENCE:
;
;	BSBW	MMG$RLPFNSAVPTE
;
; INPUT PARAMETERS:
;
;	R0 = PFN
;	R3 = SYSTEM VIRTUAL ADDRESS OF PAGE TABLE ENTRY
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	NONE
;
; SIDE EFFECTS:
;
;	NONE
;
;--

MMG$RLPFNSAVPTE::
	CLRL	@W^PFN$AL_PTE[R0]	;NO PTE BACK POINTER
	CLRW	@W^PFN$AW_REFCNT[R0]	;AND NO REFERENCES
	MOVB	#<PFN$C_ACTIVE ! PFN$M_DELCON>,-
		@W^PFN$AB_STATE[R0]	;SHUT OFF MODIFY, TURN ON DELCON
;
; THE FOLLOWING ASSUMES THAT THE PTE IS A GLOBAL PTE THAT MUST HAVE
; A REFERENCE COUNT TAKEN AWAY EVEN THOUGH ITS CONTENTS ARE NOT TO
; BE OVERWRITTEN.
;
	BSBW	MMG$DECPTREF		;COUNT ONE LESS PAGE TABLE REFERENCE
	BRB	MMG$RELPFN		;RELEASE THE PFN
					;AND RETURN TO CALLER

	.SBTTL	DELPFNLST - DELETE PFN FROM PFN LIST
;++
; FUNCTIONAL DESCRIPTION:
;
;	THIS ROUTINE REMOVES THE PFN FROM THE SPECIFIED LIST
;	SETS DELCON AND RELEASES THE PAGE.
;
; CALLING SEQUENCE:
;
;	BSBW	MMG$DELPFNLST
;
; INPUT PARAMETERS:
;
;	R0 = PFN
;	R2 = LIST IDENTIFIER
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	NONE
;
; SIDE EFFECTS:
;
;	NONE
;
;--

MMG$DELPFNLST::
	BSBB	MMG$REMPFN		;REMOVE PFN FROM SPECIFIED LIST
	BISB	#PFN$M_DELCON,@W^PFN$AB_STATE[R0] ;JAM 'DELETE CONTENTS' BIT
;
; FALL THROUGH TO MMG$RELPFN
;

	.SBTTL	RELPFN - RELEASE PFN T0 FREE OR MODIFY LIST
;++
; FUNCTIONAL DESCRIPTION:
;
;	THIS ROUTINE RELEASES THE SPECIFIED PFN TO THE MODIFY OR
; FREE PAGE LIST ACCORDING TO THE STATE BITS IN PFN$AB_STATE[R0]
;
; CALLING SEQUENCE:
;
;	BSBW	MMG$RELPFN
;
; INPUT PARAMETERS:
;
;	R0 = PFN, REFCNT=0
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;
;	R0 PRESEVED
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	NONE
;
;--
MMG$RELPFN::
	MOVL	@W^PFN$AL_PTE[R0],R3	;R3 = SVAPTE
	BEQL	10$			;BRANCH IF PAGE IS EMPTY
	BITW	#<PTE$M_VALID ! PTE$M_TYP1 ! PTE$M_TYP0>@-16,2(R3)
	BNEQ	60$			;BRANCH IF NOT TRANSITION PAGE
10$:	EXTZV	#PFN$V_MODIFY,#1,@W^PFN$AB_STATE[R0],R2 ;R2 = MODIFY BIT
	BNEQ	40$			;BRANCH IF PAGE MODIFIED
;
; PAGE NOT MODIFIED R2 = 0 = LIST ID FOR FREE PAGE LIST
; SEE IF SUPPOSED TO DELETE THE CONTENTS OF THE PAGE
;
	BBC	#PFN$V_DELCON,@W^PFN$AB_STATE[R0],50$ ;BRANCH IF RETAIN CONTENTS
	BSBW	MMG$DELCONPFN		;DELETE PAGE CONTENTS
	ASSUME	PFN$C_FREPAGLST EQ 0
	CLRL	R2			;FREE PAGE LIST ID
	BSBB	MMG$INSPFNH		;PUT PAGE ON FRONT OF FREE LIST
	RSB
40$:
	MOVL	@W^PFN$AL_BAK[R0],R1	;GET BACKING STORE CELL
	BSBB	MMG$DALCBAKSTORE	;FREE THE BACKING STORE PAGE
50$:
	BSBW	MMG$INSPFNT		;PUT PAGE AT END OF LIST IN R2
	RSB
;
; PAGE IS NOT A TRANSITION PAGE, IF IT'S NOT VALID, THAT'S A FATAL ERROR.
; IF VALID, THEN FOLD MODIFY BACK TO PFN DATA, SHUT OFF VALID AND MODIFY,
; AND CONTINUE WITH RELEASING THE PAGE.
;
60$:	BGTR	80$			;BRANCH IF PTE NOT VALID
	BBCC	#PTE$V_MODIFY,(R3),70$	;CLEAR MODIFY, BRANCH IF WAS CLEAR
	BISB	#PFN$M_MODIFY,@W^PFN$AB_STATE[R0] ;RECORD IT IN PFN DATA
70$:	BBSC	#PTE$V_VALID,(R3),10$	;CLEAR VALID AND BRANCH (IT WAS SET)
80$:	BUG_CHECK PAGNTRNVAL,FATAL	;PAGE NOT IN TRANSITION OR VALID

;
; SUBROUTINE TO FREE VBN'S TO PAGING FILES.
; R0,R2 PRESERVED
; R1,R3 DESTROYED
;
MMG$DALCBAKSTORE::
	TSTW	@W^PFN$AW_SWPVBN[R0]	;CHECK FOR SWAP FILE BACKING STORE
	BNEQ	50$			;BRANCH IF YES, PAGE MUST KEEP BAK ADDR
	EXTV	#PFN$V_BAK,#PFN$S_BAK,R1,R3 ;BACKING STORE VBN VS PROCESS PTE
	BLEQ	50$			;BRANCH IF NOT, NO BLOCK TO RELEASE
	PUSHR	#^M<R0,R2>		;SAVE PFN, MODIFY LIST DESTINATION
	MOVL	R3,R0			;SET UP VBN FOR MMG$DALCPAGFIL
	ASHL	#-PFN$V_PGFLX,R1,R3	;SET PAGING FILE TO RELEASE BLOCK TO
	BSBW	MMG$DALCPAGFIL		;FREE THE BLOCK
	POPR	#^M<R0,R2>		;RESTORE PFN, MODIFY LIST INDEX
	BICL	#PFN$M_BAK,@W^PFN$AL_BAK[R0] ;CLEAR OUT BACKING STORE ADDRESS
50$:	RSB				;RETURN

	.SBTTL	INSPFN - INSERT PFN AT HEAD OR TAIL OF PFN LIST

;++
; FUNCTIONAL DESCRIPTION:
;
;	INSERT PFN ON SPECIFIED PFN LIST, SETTING THE LOCATION FIELD
; IN PFN$AB_STATE TO REFLECT THE LIST IDENTIFIER.  IPL MUST BE AT SYNCH
; OR HIGHER.  IF THE LIST WAS EMPTY BEFORE THE INSERT SPECIAL ACTION
; IS TAKEN TO INFORM ANY PROCESS THAT MIGHT BE WAITING.
;
; CALLING SEQUENCE:
;
;	BSBW	MMG$DALLOCPFN		;DEALLOCATE PFN, PUT AT TAIL OF FREE LIST
;	BSBW	MMG$INSPFNT		;INSERT PFN AT TAIL OF LIST SPECIFIED IN R2
;	BSBW	MMG$INSPFNH		;INSERT PFN AT HEAD OF LIST SPECIFIED IN R2
;
;
; INPUT PARAMETERS:
;
;	R0 = PFN TO INSERT IN THE LIST
;	R2 = PFN LIST IDENTIFIER (UNLESS DALLOCPFN)
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;
;	R0 PRESERVED
;
; IMPLICIT OUTPUTS:
;
;	PFN LIST HEAD, TAIL AND COUNT ARE UPDATED
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;
;	IF THE LIST WAS EMPTY BEFORE THE INSERT, THEN IF THE LIST IS
; THE FREE PAGE LIST, ANYONE WAITING FOR FREE PAGES IS AWAKENED.  IF
; THE LIST IS THE MODIFIED PAGE LIST, THE MODIFIED PAGE WRITER IS INFORMED.
;
;	THESE ROUTINES ARE WRITTEN IN SUCH A WAY THAT THE FIRST ELEMENT
; IN EACH ARRAY NEED NOT CORRESPOND TO PFN 0. THAT IS, THERE NEED NOT BE
; ARRAY ELEMENTS CORRESPONDING TO PFN 0.
;
;--

MMG$INSPFNH::				;INSERT PFN AT HEAD OF LIST
	TSTW	@W^PFN$AW_REFCNT[R0]	;REFERENCE COUNT MUST BE ZERO
	BNEQ	INSPFNREF		;BRANCH IF NOT, ERROR
	INSV	R2,#PFN$V_LOC,#PFN$S_LOC,@W^PFN$AB_STATE[R0] ;SET LOCATION
	MOVL	W^PFN$AL_HEAD[R2],R1	;R1=PFN OF OLD HEAD
	BEQL	10$			;SKIP NEXT IF LIST PREVIOUSLY EMPTY
		PFN_REFERENCE	-
	MOVW	<R0,@W^PFN$Ax_BLINK[R1]>,-	;BLINK(OLD) = NEW
		LONG_OPCODE=MOVL,-
		IMAGE=SYS_NONPAGED
10$:	MOVL	R0,W^PFN$AL_HEAD[R2]	;HEAD = NEW
		PFN_REFERENCE	-
	CLRW	<@W^PFN$Ax_BLINK[R0]>,-		;BLINK(NEW)=0
		LONG_OPCODE=CLRL,-
		IMAGE=SYS_NONPAGED
		PFN_REFERENCE	-
	MOVW	<R1,@W^PFN$Ax_FLINK[R0]>,-	;FLINK(NEW)=OLD
		LONG_OPCODE=MOVL,-
		IMAGE=SYS_NONPAGED
	BNEQ	NOTEMPTY		;BRANCH IF LIST WAS NOT EMPTY
	MOVL	R0,W^PFN$AL_TAIL[R2]	;LIST NOW HAS JUST ONE ENTRY
	BRB	WASEMPTY		;INFORM OTHERS, LIST NO LONGER EMPTY
;
; PFN REFERENCE COUNT NON-ZERO
;
INSPFNREF:
	BUG_CHECK PFNREFNZRO,FATAL	;PFN REFERENCE COUNT NONZERO

MMG$DALLOCPFN::
	ASSUME	PFN$C_FREPAGLST EQ 0
	CLRL	R2			;FREE PAGE LIST ID
MMG$INSPFNT::				;INSERT PFN AT TAIL OF LIST
	TSTW	@W^PFN$AW_REFCNT[R0]	;MAKE SURE REFERENCE COUNT IS ZERO
	BNEQ	INSPFNREF		;BRANCH IF IT IS NOT, ERROR
	INSV	R2,#PFN$V_LOC,#PFN$S_LOC,@W^PFN$AB_STATE[R0] ;SET LOCATION
	MOVL	W^PFN$AL_TAIL[R2],R1	;R1=PFN OF LAST ENTRY ON LIST
	BEQL	20$			;SKIP NEXT IF LIST PREVIOUSLY EMPTY
		PFN_REFERENCE	-
	MOVW	<R0,@W^PFN$Ax_FLINK[R1]>,-	;FLINK(OLD)=NEW
		LONG_OPCODE=MOVL,-
		IMAGE=SYS_NONPAGED
20$:	MOVL	R0,W^PFN$AL_TAIL[R2]	;NEW ENTRY IS THE NEW TAIL
		PFN_REFERENCE	-
	CLRW	<@W^PFN$Ax_FLINK[R0]>,-		;NEW ENTRY FLINK IS 0
		LONG_OPCODE=CLRL,-
		IMAGE=SYS_NONPAGED
		PFN_REFERENCE	-
	MOVW	<R1,@W^PFN$Ax_BLINK[R0]>,-	;NEW ENTRY BLINK IS OLD TAIL
		LONG_OPCODE=MOVL,-
		IMAGE=SYS_NONPAGED
	BNEQ	NOTEMPTY		;BRANCH IF LIST WAS NOT EMPTY
	MOVL	R0,W^PFN$AL_HEAD[R2]	;LIST WAS EMPTY, NEW ENTRY IS HEAD AND TAIL
;
; THIS LIST JUST WENT FROM EMPTY TO ONE ENTRY.
;
WASEMPTY:
	MOVL	#1,W^PFN$AL_COUNT[R2]	;RESET THE LIST COUNTER
	CASE	R2,<-
		WAKFREPAGWAITQ-		;FREE PAGE LIST WAS EMPTY
	>
	RSB

NOTEMPTY:
	AOBLSS	W^PFN$AL_HILIMIT[R2],W^PFN$AL_COUNT[R2],20$
;
; THIS LIST IS ABOVE ITS THRESHOLD SIZE, INFORM THE INTERESTED PARTY
;
	CASE	R2,<-
		WAKESWAPPER,-		;FREE PAGE LIST
		WAKE_MPW-		;MODIFIED PAGE LIST
	>
20$:
	RSB

;
; FREE PAGE LIST JUST WENT FROM EMPTY TO ONE PAGE.  MUST REPORT 
; THE "FREE PAGE AVAILABLE" EVENT FOR ALL PROCESSES WAITING.
;
WAKFREPAGWAITQ:
	PUSHR	#^M<R0,R4>		;SAVE THE REGISTERS TO BE RETURNED
	MOVL	#PRI$_RESAVL,R2		;"RESOURCE AVAILABLE" PRIORITY INC
10$:
	TSTW	W^SCH$GQ_FPGWQ+WQH$W_WQCNT ;ANYONE WAITING?
	BLEQ	20$			;BRANCH IF NOT
	BISB	S^#<1@SCH$V_REORD>,W^SCH$GB_RESCAN ;SET FLAG FOR OSWPSCHED
	MOVL	W^SCH$GQ_FPGWQ,R4	;GET THE NEXT PCB
	RPTEVT	FPGA			;REPORT "FREE PAGE AVAILABLE"
	BRB	10$
20$:	POPR	#^M<R0,R4>		;RESTORE REGISTERS
	RSB
;
; NEED TO START WRITING MODIFIED PAGES
;
WAKE_MPW:
	BBC	S^#SCH$V_MPW,W^SCH$GB_SIP,WAKESWAPPER ;BRANCH IF MODIFIED PAGE
					;WRITER IS NOT ALREADY ACTIVE
	MOVB	#1,W^SCH$GL_MFYLIM+3	;DISABLE THE THRESHOLD CHECK WHILE
					;MODIFIED PAGE WRITER IS ACTIVE
	RSB
;
; INFORM THE SWAPPER PROCESS THAT SOMETHING OF INTEREST HAS OCCURRED
;
WAKESWAPPER:
	BSBW	SCH$SWPWAKE		;WAKE UP THE SWAPPER PROCESS
	RSB


	.END
