	.TITLE	SVAPTE - SYSTEM VIRTUAL ADDRESS OF PAGE TABLE ENTRY
	.IDENT	'V03-000'
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************

;++
; FACILITY:	EXECUTIVE, MEMORY MANAGEMENT SUBROUTINES
;
; ABSTRACT:	GIVEN A VIRTUAL ADDRESS (PROCESS OR SYSTEM),
;	RETURN THE SYSTEM VIRTUAL ADDRESS OF ITS ASSOCIATED PAGE TABLE ENTRY.
;
; ENVIRONMENT:	KERNEL MODE, NO INTERLOCK REQUIRED
;
;--
;
;	.PAGE
	.SBTTL	HISTORY			; DETAILED
;
; AUTHOR: PETER H. LIPMAN	, CREATION DATE: 14-SEP-76
;
; MODIFIED BY:
;	, : VERSION
; 01	 -

	.PAGE
	.SBTTL	DECLARATIONS

;
; INCLUDE FILES:
;
	$IPLDEF				;PROCESSOR PRIORITY LEVEL DEFINITIONS
	$PCBDEF				;DEFINE PROCESS CONTROL BLOCK OFFSETS
	$PHDDEF				;DEFINE PROCESS HEADER OFFSETS
	$PRDEF				;PROCESSOR REGISTER DEFINITIONS
	$SSDEF				;SYSTEM STATUS CODES
	$VADEF				;VIRTUAL ADDRESS VIELDS
;
; EXTERNAL SYMBOLS:
;

;
; MACROS:
;

;
; EQUATED SYMBOLS:
;
;
; OWN STORAGE:
;
;
; **********************************************************************
;
; **************** THIS ENTIRE MODULE MUST BE RESIDENT *****************
;
	.PSECT	$MMGCOD
;
; **********************************************************************
;

	.SBTTL	SVAPTECHK - SYSTEM VIRTUAL ADDRESS OF PAGE TABLE ENTRY
;++
; FUNCTIONAL DESCRIPTION:
;
;	GIVEN A PROCESS OR SYSTEM VIRTUAL ADDRESS IN R2, RETURN THE
;	SYSTEM VIRTUAL ADDRESS OF THE CORRESPONDING PAGE TABLE ENTRY
;	IF THE ADDRESS IS OFF THE END OF ITS PAGE TABLE, BUGCHK
;
; CALLING SEQUENCE:
;
;	BSBW	MMG$SVAPTECHK
;
; INPUT PARAMETERS:
;
;	R2 = VIRTUAL ADDRESS (P0, P1, OR SYSTEM SPACE)
;	R4 = PROCESS CONTROL BLOCK ADDRESS
;	R5 = PROCESS HEADER ADDRESS
;	IPL = SYNCH (TO AVOID HAVING PROCESS PAGE TABLE MOVE)
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	R2 PRESERVED
;	R3 = SYSTEM VIRTUAL ADDRESS OF THE PAGE TABLE ENTRY
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	NONE
;
; SIDE EFFECTS:
;
;	NONE
;
;--
MMG$SVAPTECHK::
	BBC	#31,R2,MMG$PTEADRCHK	;HANDLE PROCESS SPACE VIA PTEADRCHK
	CMPL	R2,MMG$GL_FRESVA	;ADDRESS WITHIN PAGE TABLE?
	BGEQU	PTELENVIO		;BRANCH IF NOT, LENGTH VIOLATION
	EXTZV	#VA$V_VPN,#VA$S_VPN,R2,R3 ;VIRTUAL PAGE NUMBER
	MOVAL	@W^MMG$GL_SPTBASE[R3],R3	;SYS VIRTUAL ADDRESS OF PTE
	RSB

	.SBTTL	PTEADR, PTEINDX - PAGE TABLE ENTRY ADDRESS OR INDEX
;++
; FUNCTIONAL DESCRIPTION:
;
;	GIVEN A VIRTUAL ADDRESS (SYSTEM OR PROCESS), CALCULATE
;		1) THE SYSTEM VIRTUAL ADDRESS OF THE PAGE TABLE ENTRY
;	OR
;		2) THE LONG WORD INDEX FROM THE BASE OF THE PROCESS/SYSTEM
;		HEADER TO THE PAGE TABLE ENTRY
;
; CALLING SEQUENCE:
;
;	BSBW	MMG$PTEREF		;FAULT PTE, RETURN SYS VIRT ADR OF PTE
;					;RETURN IPL=SYNCH, R0 = SYSTEM STATUS
;	BSBW	MMG$PTEADRCHK		;RETURN SYSTEM VIRTUAL ADDRESS OF PTE
;					;BUGCHK IF LENGTH VIOLATION
;	BSBW	MMG$PTEINDX		;RETURN LONG WORD INDEX TO PTE
;					;R0 = SYSTEM STATUS CODE
;	BSBW	MMG$PTEINDXCHK		;RETURN LONG WORD INDEX TO PTE
;					;BUGCHK IF LENGTH VIOLATION
;
; INPUT PARAMETERS:
;
;	R2 = PROCESS VIRTUAL ADDRESS (P0 OR P1 SPACE)
;	R4 = PROCESS CONTROL BLOCK ADDRESS
;	R5 = PROCESS HEADER ADDRESS
;		THIS MAY BE EITHER THE SYSTEM SPACE OR P1 SPACE ADDRESS
;		OF THE PROCESS HEADER, BUT IF IT IS THE SYSTEM SPACE ADDRESS
;		THE CALLING IPL MUST BE AT SYNCH TO PREVENT SWAPPING
;	IPL LEQ SYNCH - IF REQUESTING THE ADDRESS OF THE PAGE TABLE ENTRY
;		OR IF THE SYSTEM SPACE ADDRESS OF THE PROCESS HEADER IS
;		SPECIFIED, IPL MUST BE AT SYNCH TO PREVENT SWAPPING
;
;  OR
;
;	R2 = SYSTEM SPACE VIRTUAL ADDRESS
;	R4 = SYSTEM PROCESS CONTROL BLOCK ADDRESS
;	R5 = SYSTEM ADDRESS (NO P1 SPACE EQUIVALENT) OF SYSTEM PROCESS HEADER
;	IPL NOT REQUIRED TO BE AT SYNCH SINCE THE SYSTEM PAGE TABLE IS
;		NOT EVER MOVED.
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	R0 = SYSTEM STATUS CODE
;	R2 PRESERVED
;	R3 = SYSTEM VIRTUAL ADDRESS OF PAGE TABLE ENTRY OR LONG WORD
;		INDEX TO PAGE TABLE ENTRY ACCORDING TO THE ENTRY POINT
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	SS$_LENVIO			;PAGE TABLE LENGTH VIOLATION
;
; SIDE EFFECTS:
;
;	NONE
;
;--

	.ENABL	LSB

MMG$PTEADRCHK::
	BSBB	MMG$PTEINDX		;GET INDEX TO PAGE TABLE ENTRY
	BLBS	R0,20$			;BRANCH IF GOT ONE
PTELENVIO:
	BUG_CHECK PTELENVIOL,FATAL	;UNEXPECTED PAGE TABLE LENGTH VIOLATION

MMG$PTEREF::
	BSBB	MMG$PTEINDX		;GET INDEX TO PAGE TABLE ENTRY
	BLBC	R0,30$			;BRANCH IF LENGTH VIOLATION
	TSTL	@PCB$L_PHD(R4)[R3]	;FAULT THE PAGE TABLE IF NECESSARY
	SETIPL	#IPL$_SYNCH		;AND THEN RAISE TO SYNCH
20$:	MOVAL	@PCB$L_PHD(R4)[R3],R3	;CONVERT INDEX TO SYSTEM VIRTUAL
					;ADDRESS OF PAGE TABLE ENTRY
30$:	RSB

	.DSABL	LSB

MMG$PTEINDXCHK::
	BSBB	MMG$PTEINDX		;GET INDEX TO PAGE TABLE ENTRY
	BLBC	R0,PTELENVIO		;BUGCHK IF LENGTH VIOLATION
	RSB

MMG$PTEINDX::
	MOVZWL	#SS$_NORMAL,R0		;ASSUME SUCCESSFUL COMPLETION
	EXTV	#VA$V_VPN,#VA$S_VPN+1,R2,R3 ;SIGN EXTENDED VIRTUAL PAGE NUMBER
					;INCLUDING P1 SPACE BIT
	BLSS	20$			;BRANCH IF P1 SPACE
	CMPL	R2,PHD$L_FREP0VA(R5)	;OFF THE END OF P0 (OR SYSTEM) SPACE?
	BGEQU	30$			;BRANCH IF YES, LENGTH VIOLATION
	BBS	#31,R2,10$		;BRANCH IF SYSTEM SPACE
	ADDL	W^SGN$GL_PHDLWCNT,R3	;ADD OFFSET FROM PHD TO P0PT
	RSB
10$:	ROTL	#<32-2>,W^MMG$GL_SYSPHDLN,-(SP) ;ADD OFFSET FROM SYSPHD
	ADDL	(SP)+,R3		;TO SYSPT
	RSB
;
; P1 SPACE VIRTUAL ADDRESS
;
20$:	CMPL	R2,PHD$L_FREP1VA(R5)	;OFF THE END OF P1 SPACE?
	BLEQU	30$			;BRANCH IF YES, LENGTH VIOLATION
	ADDL	W^SGN$GL_P1LWCNT,R3	;ADD OFFSET FROM PHD
					;TO LAST + 1 ENTRY OFF END OF P1PT
	RSB
30$:	MOVZWL	#SS$_LENVIO,R0		;LENGTH VIOLATION STATUS
	RSB


	.END
