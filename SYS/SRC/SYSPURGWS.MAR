	.TITLE	SYSPURGWS - Purge Working Set System Service
	.IDENT	'V03-000'
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************

;++
; FACILITY:
;
; ABSTRACT:
;
; ENVIRONMENT:
;
; AUTHOR: PETER H. LIPMAN	, CREATION DATE: 22-MAY-78
;
; MODIFIED BY:
;
;	V02-005	WMC0001		Wayne Cardoza		26-Aug-1981
;		In MMG$PURGWSSCN, have a global scan return a resource to 
;		wait for if necessary.
;
;	V02-004	LJK0022		Lawrence J. Kenah	19-May-1981
;		Replace CDL$x_ symbols with MMG$x_ symbols. Add $MMGDEF
;		macro. Make these offsets local symbols.
;
;--
	.PAGE
	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;
	$IPLDEF				;Processor priority levels
	$MMGDEF				; Offsets from FP into scratch area
	$PCBDEF				;Process control block definitions
	$PFNDEF				;Page frame number data base definitions
	$PHDDEF				;Process header definitions
	$PRDEF				;Processor register definitions
	$PSLDEF				;Processor status long word definitions
	$PTEDEF				;Page table entry definitions
	$SSDEF				;System status code definitions
	$WSLDEF				;Working set list definitions
;
; MACROS:
;

;
; EQUATED SYMBOLS:
;
; Offset from AP
;
	INADR		= 4		;Offset to input range
;
; OWN STORAGE:
;
	.LIST	MEB

	.SBTTL	PURGWS - Purge Working Set
;++
; FUNCTIONAL DESCRIPTION:
;
;
; CALLING SEQUENCE:
;
;	CALLG	ARGLIST,G^SYS$PURGWS
;
;
; INPUT PARAMETERS:
;
;	INADR(AP) = Address of 2 long words the 1st of which specifies
;		the starting virtual address to purge, the 2nd specifies
;		the ending virtual address to purge (inclusive).
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;
;	R0 = System status code
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	SS$_NORMAL			;Successful completion
;	SS$_ACCVIO			;Access violation
;
; SIDE EFFECTS:
;	NONE
;
;--
;
; **********************************************************************
;
; **************** THE FOLLOWING CODE MAY BE PAGED *****************
;
	.PSECT	Y$EXEPAGED
;
; **********************************************************************
;
	.ENTRY	EXE$PURGWS,^M<R2,R3,R4,R5,R6,R7,R8>

	MOVAB	B^MMG$PURGWSPAG,R6	;Address of purge subroutine
	SUBL	S^#-MMG$C_LENGTH,SP	;Reserve scratch area
	MOVL	INADR(AP),R2		;Get address range parameter
	BEQL	20$			;Branch if none specified
	IFNORD	#8,(R2),20$		;Branch if not readable by caller
	MOVQ	(R2),R2			;R2 = STARTVA, R3 = ENDVA
	CLRL	B^MMG$L_SAVRETADR(FP)	;Init return range
	CLRL	B^MMG$L_CALLEDIPL(FP)	;Init called IPL
	MOVPSL	R0			;Get Processor Status
	EXTZV	#PSL$V_PRVMOD,#PSL$S_PRVMOD,- ;Set access mode
		R0,B^MMG$L_MAXACMODE(FP) ;from caller's mode
	SETIPL	#IPL$_ASTDEL		;Raise to ASTDEL
	BSBW	MMG$CRECOM2		;Common code for range handling
	RET				;Exit from service
;
; No input address range was specified, or the caller could not read it.
;
20$:	MOVZWL	#SS$_ACCVIO,R0		;Return error if no input range
	RET

;++
; FUNCTIONAL DESCRIPTION:
;
;
; CALLING SEQUENCE:
;
;	BSBW	MMG$PURGWSPAG
;
;
; INPUT PARAMETERS:
;
;	R0 = ACCESS MODE TO CHECK AGAINST PAGE OWNER
;	R2 = VIRTUAL ADDRESS (LOW 9 BITS = 0)
;	R4 = PCB ADDRESS
;	R5 = PROCESS HEADER ADDRESS - P1 OR SYSTEM SPACE
;	R6 = COUNT - 1 OF PAGES REMAINING TO  BE DELETED INCLUDING THIS ONE
;	R7 = +^X200 IF GOING FORWARD IN ADDRESS SPACE
;	   = -^X200 IF GOING BACKWARDS IN ADDRESS SPACE
;	IPL = ASTLVL
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;
;	R0 = STATUS CODE
;	R2 = Address of last page processed
;	R6 = Count of pages remaining ( - 1) to process
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;
;	SS$_NORMAL			;SUCCESSFUL RETURN
;
; SIDE EFFECTS:
;	NONE
;
;--
;
; **********************************************************************
;
; **************** THE FOLLOWING CODE MAY BE PAGED *****************
;
	.PSECT	Y$EXEPAGED
;
; **********************************************************************
;
MMG$PURGWSPAG:
	MOVL	#1,R8			;Purging general pages
	JSB	MMG$PURGWSSCN		;Scan working set to purge the pages
	CLRL	R6			;End of range
	MOVZWL	#SS$_NORMAL,R0		;Successful completion
	RSB

	.SBTTL	PURGWSSCN - Scan Working Set to Purge Pages
;++
; FUNCTIONAL DESCRIPTION:
;
;	This routine is called to do a scan of the working set list
; for pages in the specified virtual address range and delete those
; pages from the working set list.
;
; CALLING SEQUENCE:
;
;	BSBW	MMG$PURGWSSCN
;
; INPUT PARAMETERS:
;
;	R0 = Access mode in low byte, flags in rest
;	R2 = STARTVA
;	R4 = Process Control Block
;	R5 = Process Header Address (P1 space ok)
;	R6 = Number of pages - 1 remaining in range of pages
;	R7 = +^X200 if going forward in the address space
;	   = -^X200 if going backwards in the address space
;	R8 = 0 if scanning only for global pages in the specified range
;	     Used by MMG$DELPAG when a GLOBAL page is found in the range
;	   = 1 if scanning for any pages in the specified range
;	     Used by the $PURGWS System Service
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	R0,R2 PRESERVED
;	R8 = RESOURCE TO WAIT FOR ON A FAILED GLOBAL SCAN
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	NONE
;
; SIDE EFFECTS:
;
;	NONE
;
;--

;
; **********************************************************************
;
; **************** THE FOLLOWING CODE MUST BE RESIDENT *****************
;
	.PSECT	$MMGCOD
;
; **********************************************************************
;
	.ENABL	LSB

PURGWS_EMPTY:
	BRW	80$			;No pages to be purged

MMG$PURGWSSCN::
	DSBINT	#IPL$_SYNCH		;Save called IPL, raise to SYNCH
					;no swapping while scanning the WSL
	MOVZWL	PHD$W_WSLOCK(R5),R1	;Start scanning with locked pages
					;if this is a GLOBAL scan
	MOVZWL	PCB$W_GPGCNT(R4),-(SP)	;Count of GLOBAL pages in WSL
	BLBC	R8,5$			;Branch if scanning for GLOBAL pages
	MOVZWL	PHD$W_WSDYN(R5),R1	;Don't consider the locked pages
					;when scanning for all page types
	ADDW	PCB$W_PPGCNT(R4),(SP)	;Calculate number of WSL entries
	SUBW3	PHD$W_WSLIST(R5),R1,R3	;Number of entries in locked area
	SUBW	R3,(SP)			;Entry count = GPGCNT + PPGCNT - locked
5$:	BEQL	PURGWS_EMPTY		;Branch if no entries to scan
	PUSHR	#^M<R0,R2>		;Save STARTVA, access mode
	BBS	#31,R7,10$		;Branch if going backwards
	ASHL	#-9,R2,R3		;Low virtual page number
	ADDL3	R6,R3,R0		;High virtual page number
	BRB	20$
10$:	ASHL	#-9,R2,R0		;High virtual page number
	SUBL3	R6,R0,R3		;Low virtual page number
20$:	PUSHR	#^M<R0,R3>		;Push high VPN, low VPN
;
; 0(SP)  = High virtual page number
; 4(SP)  = Low virtual page number
; 8(SP)  = Access mode
; 12(SP) = Saved STARVA
; 16(SP) = Count of pages to scan for
; 20(SP) = Saved caller's IPL
;
24$:	MOVL	(R5)[R1],R2		;Fetch next WSLE
	BLBC	R2,60$			;Branch if not valid
	BLBC	R8,26$			;Branch if just scanning for GLOBALS
	BITB	#<WSL$M_WSLOCK ! WSL$M_PFNLOCK>,R2 ;All page types,
	BEQL	28$			;but no locked ones
	BRB	50$
26$:	CMPV	#WSL$V_PAGTYP,#WSL$S_PAGTYP,R2,#PFN$C_GLOBAL ;GLOBAL page?
	BLSS	60$			;Branch if not
28$:	ASHL	#-9,R2,R0		;Get virtual page number
	BLSS	32$			;If system address, then discard it.
					;It is a page table page which is not
					;locked in the working set.
	CMPL	R0,4(SP)		;Above the low address?
	BLSS	50$			;Branch if no
	CMPL	R0,(SP)			;Below the high address?
	BGTR	50$			;Branch if no
32$:	PUSHL	R1			;Save the working set list index
	BSBW	MMG$SVAPTECHK		;Get the SVAPTE in R3
	MOVL	(SP),R1			;Recover WSLX
	BITB	#<WSL$M_WSLOCK ! WSL$M_PFNLOCK>,R2 ;Is this entry locked?
	BEQL	35$			;Branch if not
	MOVZBL	<8+4>(SP),R0		;Get access mode to check
	CMPZV	#PTE$V_OWN,#PTE$S_OWN,(R3),R0 ;Legal to unlock the page?
	BLSS	40$			;Branch if not, just skip it.
	PUSHL	R8			;Save registsers
	PUSHL	R3			;altered by unlock WSLE logic
	BSBW	MMG$ULKGBLWSLE		;Unlock WSLE for GLOBAL page
	BLBC	R0,100$			;Error status should not be returned
	POPR	#^M<R3,R8>		;Recover saved registers
	MOVZWL	PHD$W_WSDYN(R5),R1	;New WSLX for this page
	DECL	(SP)			;Continue scanning from original wslx
35$:	BSBW	MMG$FREWSLX		;Delete working set list entry
	BLBC	R0,90$			;Branch if need to wait for page file
40$:	POPR	#^M<R1>			;Recover WSLX to continue scan from
50$:	DECL	16(SP)			;Count another page found
	BLEQ	70$			;Branch if no more to look for
60$:	ACBW	PHD$W_WSLAST(R5),#1,R1,24$ ;Next working set list index
;
; Did not find the calculated number of pages in the working set.
;
	BUG_CHECK WSLPAGCNT,FATAL	;Working set list page count error
70$:	ADDL	#2*4,SP			;Clean off page numbers
	POPR	#^M<R0,R2>		;Restore R0 = access mode, R2 = STARTVA
80$:	ADDL	#1*4,SP			;Clean off page count
	ENBINT				;Restore caller's IPL
	RSB				;and exit to it
;
; FREWSLX needed to allocate page file and couldn't
;
90$:	BLBS	R8,40$			;Leave it in working set if $PURGWS
	MOVL	R1,R8			;Resource to wait for
	BRB	70$			;Go back
;
; Error in unlocking a locked global page or
; in freeing page from the working set list.
;
100$:	BUG_CHECK PURGWSSCN,FATAL

	.DSABL	LSB


	.END
