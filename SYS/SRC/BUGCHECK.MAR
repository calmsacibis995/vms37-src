	.TITLE	BUGCHECK - SOFTWARE BUG CHECK ERROR LOGIC
	.IDENT	'V03-001'
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
; D. N. CUTLER 29-OCT-77
;
; SOFTWARE BUG CHECK ERROR LOGIC
;
; MODIFICATION HISTORY:
;
;	V03-001	PHL0042		Peter H. Lipman		2-Apr-1982
;		Add resident code to validate the checksum on the
;		boot control block.  If the boot control block is
;		bad, then don't try to read the non-resident bugcheck
;		code, just quietly reboot.
;
;	V02-030	KTA0082		Kerbey T. Altmann	22-Feb-1982
;		When shutting system down, call an adapter specific
;		routine to give each adapter a shutdown sequence
;		if needed.
;
;	V02-029	NPK2010		N. Kronenberg		31-Dec-1981
;		Fix read retry logic on reading fatal bugcheck handler
;		to clear bootdriver arg list from stack before retry.
;		(QAR 269)
;
;	V02-028	KTA0050		Kerbey T. Altmann	01-Dec-1981
;		Add a call to the Boot QIO Unit Init entry after adapter
;		initialization and befor any I/O.
;
;	V02-027	PHL0013		Peter H. Lipman		18-Aug-1981
;		Fix a broken branch destination due to change in PHL0012.
;
;	V02-026	KTA0031		Kerbey T. Altmann	14-Aug-1981
;		Fix an oversight in how many bytes a MOVQ moves.
;
;	V02-025	PHL0012		Peter H. Lipman		14-Aug-1981
;		Fix error in WRITEDUMP that failed to clean off some
;		registers on the stack when the dump file was too short.
;
;	V02-024	KDM0063		Kathleen D. Morse	03-Aug-1981
;		Add process name and id to bugcheck and crash/restart
;		error messages.  Increment dump file version number to 2.
;
;	V02-023	KDM0062		Kathleen D. Morse	28-Jul-1981
;		Remove PCB from bugcheck error log message.
;		Fix some comment lines.
;
;	V02-022	KDM0057		Kathleen D. Morse	15-Jul-1981
;		Add SID to error log buffer message format and make
;		header information be negative values off front of message.
;
;	V02-021	KTA0022		Kerbey T. Altmann	17-Jun-1981
;		Modify stack validity check to use the new stack
;		limit array defined in SHELL.
;
;	V02-020	PHL0010		Peter H. Lipman		2-Jun-1981
;		Use new Boot Control Block maps for reading the
;		non-resident BUGCHECK code and data and for writing
;		the DUMP file.  BUGCHECK is no longer dependent on
;		SYS.EXE or SYSDUMP.DMP being contiguous.
;
;	V02-019	KDM0053		Kathleen D. Morse	14-May-1981
;		Standardize symbolic names for loadable multi-processing
;		hooks.
;
;	V02-018	KDM0041		Kathleen D. Morse	02-Mar-1981
;		Use symbolic names for size of one memory descriptor and
;		number of memory descriptors in RPB.
;
;	V02-017	KDM0040		Kathleen D. Morse	27-Feb-1981
;		Add symbol EXE$MPBUGCHK.
;
; MACRO LIBRARY CALLS
;
 
	$BOODEF				;DEFINE BOOT CONTROL BLOCK OFFSETS
	$BQODEF				;DEFINE BOOT QIO OFFSETS
	$DMPDEF				;DEFINE DUMP FILE HEADER BLOCK
	$EMBDEF	<CR,BC>			;DEFINE EMB OFFSETS
	$IFDDEF				;IMAGE FILE DESCRIPTOR DEFINITIONS
	$MBADEF				;MASS BUS ADAPTER INITIALIZATION
	$PCBDEF				;DEFINE PCB OFFSETS
	$PFNDEF				;DEFINE PFN DATA BASE BITS AND FIELDS
	$PRDEF				;DEFINE PROCESSOR REGISTERS
	$PRVDEF				;DEFINE PRIVILEGE BITS
	$PTEDEF				;DEFINE PAGE TABLE BITS AND FIELDS
	$PSLDEF				;DEFINE PROCESSOR STATUS BITS
	$RPBDEF				;DEFINE RESTART PARAMETER BLOCK
	$SSDEF				;DEFINE SYSTEM STATUS VALUES
	$STSDEF				;DEFINE STATUS CODE FIELDS
	$UBADEF				;DEFINE UNIBUS ADAPTER VALUES
	$VADEF				;DEFINE VIRTUAL ADDRESS FIELDS
 
;
; LOCAL SYMBOLS
;
	.PSECT	$$$025

FATAL_SPSAV:
	.LONG	0			;FATAL BUGCHECK IN PROGRESS SP
EXE$GL_BUGCHECK::			;SAVED FATAL BUGCHECK CODE
	.LONG	0			;
;
; CHARACTER CODE DEFINITIONS
;
 
CR=13					;CARRIAGE RETURN
LF=10					;LINE FEED
 
;
; LOCAL DATA
;
	.PSECT	$ZBUGFATAL,WORD		;PSECT TO LOCATE EXECUTION LOCATION FOR
					;BUGCHECK
BUG$FATAL::				;MARKER ADDRESS
	.PSECT	Z$INIT__BUGZEND,WORD	;END OF BUGCHECK PSECTS
BUG$A_PAGEDEND::			;
; BUG CHECK MESSAGE CONTROL TEXT
;
 
	.PSECT	Z$INIT__BUGC
PRCNAM_MSG:
	.ASCIC	<CR><LF><LF>/    CURRENT PROCESS = /
PRCPRV_MSG:
	.ASCIC	<CR><LF><LF>/    PROCESS PRIVILEGES/<CR><LF><LF>
IMGNAM_MSG:
	.ASCIC	<CR><LF><LF>/    IMAGE NAME = /
SHUT_DOWN:				;OPERATOR REQUESTED SHUTDOWN
	.ASCII	<CR><LF>/	SYSTEM SHUTDOWN COMPLETE - /	;
	.ASCIZ	/USE CONSOLE TO HALT SYSTEM/<CR><LF>
MSGCTRL:				;
	.ASCIZ	<CR><LF><LF>/**** FATAL BUG CHECK, VERSION = / ;
MSGCTRL1:
	.ASCII	<LF>/    REGISTER DUMP/<CR><LF><LF> ;
	.ASCIZ	/	R0 = /		;
	.ASCIZ	/	R1 = /		;
	.ASCIZ	/	R2 = /		;
	.ASCIZ	/	R3 = /		;
	.ASCIZ	/	R4 = /		;
	.ASCIZ	/	R5 = /		;
	.ASCIZ	/	R6 = /		;
	.ASCIZ	/	R7 = /		;
	.ASCIZ	/	R8 = /		;
	.ASCIZ	/	R9 = /		;
	.ASCIZ	/	R10= /		;
	.ASCIZ	/	R11= /		;
	.ASCIZ	/	AP = /		;
	.ASCIZ	/	FP = /		;
	.ASCIZ	/	SP = /		;
	.ASCIZ	/	PC = /		;
	.ASCIZ	/	PSL= /		;
	.ASCII	<LF>^    KERNEL/INTERRUPT STACK^<CR><LF><LF><128> ;
	.ASCII	<LF>/    EXEC STACK/<CR><LF><LF><128> ;
 
;
; PROCESSOR REGISTER DUMP CONTROL TABLE
;
 
	.PSECT	$AEXENONPAGED
REGTAB:					;
	.BYTE	PR$_KSP			;KERNEL STACK POINTER
	.BYTE	PR$_ESP			;EXECUTIVE STACK POINTER
	.BYTE	PR$_SSP			;SUPERVISOR STACK POINTER
	.BYTE	PR$_USP			;USER STACK POINTER
	.BYTE	PR$_ISP			;INTERRUPT STACK POINTER
	.BYTE	128			;TABLE ESCAPE
	.BYTE	PR$_P0BR		;PROGRAM REGION BASE REGISTER
	.BYTE	PR$_P0LR		;PROGRAM REGION LIMIT REGISTER
	.BYTE	PR$_P1BR		;CONTROL REGION BASE REGISTER
	.BYTE	PR$_P1LR		;CONTROL REGION LIMIT REGISTER
	.BYTE	PR$_SBR			;SYSTEM BASE REGISTER
	.BYTE	PR$_SLR			;SYSTEM LIMIT REGISTER
	.BYTE	PR$_PCBB		;PROCESS CONTROL BLOCK BASE REGISTER
	.BYTE	PR$_SCBB		;SYSTEM CONTROL BLOCK BASE REGISTER
	.BYTE	PR$_ASTLVL		;AST DELIVERY LEVEL REGISTER
	.BYTE	PR$_SISR		;SOFTWARE INTERRUPT SUMMARY REGISTER
	.BYTE	PR$_ICCS		;INTERVAL TIMER CONTROL REGISTER
	.BYTE	PR$_ICR			;INTERVAL COUNT REGISTER
	.BYTE	PR$_TODR		;TIME OF DAY REGISTER
	.BYTE	PR$_ACCS		;ACCELERATOR CONTROL REGISTER
	.BYTE	128			;TABLE ESCAPE
	.PAGE
	.SBTTL	BUG CHECK ERROR MESSAGE PROCESSING
;+
; EXE$BUG_CHECK - BUG CHECK ERROR MESSAGE PROCESSING
;
;
; THIS ROUTINE IS CALLED BY EXECUTING THE OPERATION CODE ^XFFFF, WHICH IS
; RESERVED FOR DIGITAL AND IS GUARANTEED TO ALWAYS CAUSE AN EXCEPTION.
;
; THIS ROUTINE CONTAINS A HOOK FOR LOADABLE MULTI-PROCESSING CODE.
; THE HOOK, MPH$BUGCHKHK, MUST BE LOCATED ON THE "JSB EXE$ADPINIT"
; INSTRUCTION.  AFTER EXECUTING SOME MULTI-PROCESSING SPECIFIC CODE,
; EXECUTION WILL BE CONTINUED BY JUMPING TO EXE$ADPINIT AND THEN
; RETURNING TO THE IN-LINE CODE IN THIS ROUTINE.
;
; INPUTS:
;
;	THE CURRENT PROCESS PCB.
;	THE ENTIRE PROCESSOR STATE (I.E. GENERAL REGISTERS, ETC.).
;	THE BUG CHECK CODE WHICH FOLLOWS IMMEDIATELY INLINE.
;
; OUTPUTS:
;
;	IF THE PREVIOUS MODE WAS KERNEL OR EXECUTIVE AND THE BUG SEVERITY IS
;	GREATER THAN OR EQUAL TO ERROR, THEN THE SYSTEM IS SHUT DOWN IN AN
;	ORDERLY FASHION BY EXECUTING THE CRASH RESTART ROUTINE.  THE CODE
;	TO HANDLE A FATAL BUGCHECK IS READ FROM THE SYSTEM IMAGE OVER SOME
;	OF THE PURE EXEC CODE USING THE SAVED BOOTSTRAP DRIVER.
;
;	IF THE PREVIOUS MODE WAS KERNEL OR EXECUTIVE AND THE BUG SEVERITY IS
;	LESS THAN ERROR, THEN AN ERROR LOG ENTRY IS MADE AND EXECUTION OF THE
;	SYSTEM CONTINUES.
;
;	IF THE PREVIOUS MODE WAS SUPERVISOR OR USER AND THE PROCESS HAS THE
;	PRIVILEGE TO CAUSE BUG CHECK ERROR LOG ENTRIES, THEN AN ENTRY IS MADE
;	IN THE ERROR LOG. OTHERWISE NO ENTRY IS MADE.
;
;	IF THE PREVIOUS MODE WAS SUPERVISOR OR USER AND THE BUG SEVERITY IS
;	GREATER THAN OR EQUAL TO ERROR, THEN AN EXIT SYSTEM SERVICE IS PERFORMED
;	ON BEHALF OF THE PROCESS AT THE MODE CAUSING THE BUG CHECK. IF THE BUG
;	SEVERITY IS LESS THAN ERROR, THEN EXECUTION OF THE PROCESS IS RESUMED.
;
;	IF AN ACCESS VIOLATION IS DETECTED WHILE ATTEMPTING TO FETCH THE BUG
;	CHECK CODE, THE EXCEPTION IS TURNED INTO AN ACCESS VIOLATION.
;-
 
EXE$BUG_CHECK::				;BUG CHECK ERROR PROCESSING
	.ENABL LSB
	PUSHR	#^M<R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,AP,FP,SP> ;SAVE
	MOVL	15*4(SP),R0		;GET ADDRESS OF INSTRUCTION
	IFRD	#2,2(R0),20$		;CAN LOWER HALF OF BUG CHECK CODE BE READ?
10$:	POPR	#^M<R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,AP,FP,SP> ;RESTORE
	PUSHL	(SP)			;DUPLICATE ADDRESS OF INSTRUCTION
	ADDL	#2,(SP)			;CALCULATE ADDRESS OF VIOLATION
	PUSHL	#0			;SET REASON CODE
	BRW	EXE$ACVIOLAT		;
 
;
; BUG CHECK CODE CAN BE READ
;
 
20$:	MOVZWL	2(R0),FP		;GET LOWER HALF OF BUGCHECK CODE
	ADDL	#4,15*4(SP)		;CALCULATE ADDRESS OF NEXT INSTRUCTION
	MOVL	SP,AP			;SET ADDRESS OF SAVED REGISTERS
	MOVAB	REGTAB,R11		;GET ADDRESS OF PROCESSOR REGISTER TABLE
	MOVPSL	R10			;READ CURRENT PROCESSOR STATUS
	CMPB	#^XFD,1(R0)		;BUG CHECK LONG?
	BNEQ	25$			;IF NEQ NO
	IFNORD	#2,4(R0),10$		;CAN UPPER HALF OF BUG CHECK CODE BE READ?
	MOVL	2(R0),FP		;GET BUG CHECK CODE
	ADDL	#2,15*4(SP)		;CALCULATE ADDRESS OF NEXT INSTRUCTION
25$:	CMPZV	#PSL$V_PRVMOD,#PSL$S_PRVMOD,- ;PREVIOUS MODE EXEC OR KERNEL?
		R10,#PSL$C_EXEC		;
	BLEQ	70$			;IF LEQ YES
	MOVL	W^SCH$GL_CURPCB,R4	;GET CURRENT PROCESS PCB ADDRESS
	IFNPRIV	BUGCHK,40$		;DOES PROCESS HAVE PRIVILEGE TO BUG CHECK?
	MOVZWL	#EMB$K_UBC,R9		;SET ENTRY TYPE
30$:	MOVZWL	#EMB$K_BC_LENGTH,R1	;GET LENGTH OF BUGCHECK MESSAGE
	BSBW	ERL$ALLOCEMB		;ALLOCATE BUG CHECK ERROR MESSAGE BUFFER
	BLBC	R0,40$			;IF LBC ALLOCATION FAILURE
	BSBW	BUILD_HEADER		;BUILD MESSAGE HEADER AND DUMP REGISTERS
	MOVL	FP,EMB$L_BC_CODE(R2)	;SET BUGCHECK CODE INTO MESSAGE
	MOVL	@#SCH$GL_CURPCB,R1	;GET ADR OF CURRENT PROCESS'S PCB
	MOVL	PCB$L_PID(R1),-
		EMB$L_BC_PID(R2) 	;SET PROCESS ID INTO MESSAGE
	MOVQ	PCB$T_LNAME(R1),-
		EMB$T_BC_LNAME(R2) 	;SET PROCESS NAME INTO
	MOVQ	PCB$T_LNAME+8(R1),-
		EMB$T_BC_LNAME+8(R2) 	; ERROR LOG MESSAGE
	BSBW	ERL$RELEASEMB		;RELEASE ERROR MESSAGE BUFFER
40$:	BLBS	FP,50$			;IF LBS NONFATAL BUG CHECK
	CMPZV	#STS$V_SEVERITY,#STS$S_SEVERITY,- ;FATAL BUG CHECK?
		FP,#STS$K_ERROR		;
	BLSS	50$			;IF LSS NO
	MOVAB	B^60$,15*4(SP)		;REPLACE RETURN PC
50$:	POPR	#^M<R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,AP,FP,SP> ;RESTORE
	REI				;
 
;
; EXECUTE EXIT SYSTEM SERVICE ON BEHALF OF PROCESS
;
 
60$:	$EXIT_S	#SS$_BUGCHECK		;EXIT MODE
	BRB	60$			;
 
;
; PREVIOUS MODE WAS EXECUTIVE OR KERNEL
;
 
70$:	MOVZWL	#EMB$K_SBC,R9		;SET ENTRY TYPE
	BBS	S^#EXE$V_FATAL_BUG,W^EXE$GL_FLAGS,75$ ;IF SET, ALL FATAL
	BLBS	FP,30$			;IF LBS NONFATAL BUG CHECK
	CMPZV	#STS$V_SEVERITY,#STS$S_SEVERITY,- ;FATAL BUG CHECK?
		FP,#STS$K_ERROR		;
	BLSS	30$			;IF LSS NO
 
75$:	BSBW	EXE$BOOTCB_CHK		;IS BOOT CONTROL BLOCK OK?
	BEQL	80$			;BRANCH IF YES
	CLRL	BOO$L_BUG_MAP(R1)	;NO, SET UP TO ISSUE REBOOT
;
; SHUT DOWN SYSTEM IN AN ORDERLY MANNER
;
 
80$:	SETIPL	#31			;DISABLE ALL INTERRUPTS
	MOVL	W^EXE$GL_RPB,R6		;GET ADDRESS OF RESTART PARAMETERS
	JSB	G^EXE$SHUTDWNADP	;SHUT DOWN ANY ADAPTERS THAT NEED IT
MPH$BUGCHKHK::				;MULTI-PROCESSING HOOK (REPLACES JSB)
	JSB	G^EXE$INIBOOTADP	;INIT BOOT DEVICE ADAPTER BEFORE
					; READING FATAL BUGCHECK CODE
					;DO NOT STEP OVER NEXT 2 LINES OR PAGES
					;WILL BE SET RDONLY AFTER JSB BY XDELTA
	JSB	INI$WRITABLE		;MAKE SYSTEM CODE WRITEABLE
	BBSS	S^#EXE$V_SYSWRTABL,W^EXE$GL_FLAGS,85$ ; INHIBIT INI$RDONLY/WRITABLE
					; (RDONLY CALLED ON EVERY XDELTA EXIT)
85$:	MOVL	RPB$L_IOVEC(R6),R3	;FETCH POINTER TO BOOTDRIVER
;
; CHECK THE VMB VERSION NUMBER.  IF IT EXISTS AND IF IT IS 7 OR GREATER, THEN
; CALL A UNIT INITIALIZATION ROUTINE TO DO ANY DEVICE/UNIT SPECIFIC INIT
; THAT IS NOT DONE IN ADAPTER INIT.
;
	MCOMW	BQO$W_VERSION(R3),R0	;GET VMB VERSION NUMBER 1'S COMPLEMENTED
	CMPW	R0,BQO$W_VERSION+2(R3)	;CHECK AGAINST CHECK WORD IN VMB
	BNEQ	90$			;IF NOT, ASSUME NO VERSION NUMBER
	CMPW	BQO$W_VERSION(R3),#7	;VERSION 7 OR GREATER OF VMB?
	BLSSU	90$			;NO, DON'T CALL THE NON-EXISTENT CODE
	MOVL	BQO$L_UNIT_INIT(R3),R5	;YES, IS THE ROUTINE PRESENT?
	BEQL	90$			;NO, DON'T CALL
	MOVL	R6,R9			;YES, SHIFT INPUT PARAMETERS	
	CALLS	#0,(R3)[R5]		;DO IT!
90$:	MOVL	G^EXE$GL_BOOTCB,R5	;ADDRESS OF BOOT CONTROL BLOCK
	MOVL	BOO$L_BUG_MAP(R5),R2	;VIRTUAL TO LOGICAL MAP FOR
					;NON-RESIDENT BUGCHECK CODE AND DATA
	BEQL	REBOOT			;REBOOT IF BAD BOOT CONTROL BLOCK
	PUSHL	R6			;SET RPB ADDRESS IN ARGUMENT LIST
	PUSHL	#1			;SET FOR VIRTUAL ADDRESS I/O
	PUSHL	S^#IO$_READLBLK		;SET FUNCTION TO READ
	PUSHL	8(R2)			;STARTING LBN
	ASHL	#9,4(R2),-(SP)		;NO. OF BYTES IN THIS PIECE
	PUSHAB	W^BUG$FATAL		;BUFFER ADDRESS
	PUSHL	#6			;NO. OF ARGUMENTS
	CALLG	(SP),@BQO$L_QIO(R3)[R3]	;CALL BOOTDRIVR TO READ FOLLOWING CODE
	BLBC	R0,READ_ERR_RETRY	;BR IF ERROR TO RETRY
	JMP	@4(SP)			;JUMP TO FATALBUG

READ_ERR_RETRY:
	ADDL	#7*4,SP			;CLEAN OFF ARG LIST
	BRB	80$			;TRY READ AGAIN
	.DSABL LSB
;
; REBOOT THE PROCESSOR
;
REBOOT:
10$:	MFPR	#PR$_TXCS,R0		;GET TRANSMITTER STATUS
	TSTB	R0			;CHECK FOR DONE
	BGEQ	10$			;NO, WAIT
	MTPR	#^XF02,#PR$_TXDB	;GIVE REBOOT COMMAND
	HALT				;AND HALT TO ALLOW IT TO OCCUR

	.PSECT	Z$INIT__BUGA,PAGE	;FIRST BUGCHECK PSECT IN INIT REGION
BUG$A_PAGED::
FATALBUG:				;START OF FATAL BUGCHECK CODE
;
; READ IN THE REST OF THE BUGCHECK CODE AND DATA THAT WAS NOT CONTIGUOUS
; WITH THIS FIRST PART.  THE FOLLOWING CODE MUST BE TOTALLY CONTAINED
; IN THE FIRST PAGE OF THE NON-RESIDENT BUGCHECK CODE TO BE CERTAIN
; THAT IT IS READ BY THE FIRST READ IN THE RESIDENT PORTION.
;
; THE FOLLOWING STATE IS ASSUMED:
;	R2 = VIRTUAL TO LOGICAL MAP FOR NON-RESIDENT BUGCHECK CODE AND DATA
;	R3 = RPB$L_IOVEC(RPB)
;	THE FIRST SEVEN LONG WORDS ON THE STACK ARE THE ARGUMENT LIST
;		TO BOO$QIO IN THE BOOT DRIVER.
;
	ASHL	#-3,(R2)+,R7		;GET COUNT OF RETRIEVAL POINTERS
	ADDL	#8,R2			;POINT TO SECOND RETRIEVAL POINTER
	BRB	30$			;ALREADY DONE FIRST POINTER
20$:	ADDL	8(SP),4(SP)		;ADJUST XFER ADR BY BYTE COUNT READ
	ASHL	#9,(R2)+,8(SP)		;BYTE COUNT FOR NEXT PIECE
	MOVL	(R2)+,12(SP)		;LBN FOR NEXT PIECE
	CALLG	(SP),@BQO$L_QIO(R3)[R3]	;READ BUGCHECK CODE AND DATA
	BLBS	R0,30$			;BRANCH IF OK
	JMP	@#READ_ERR_RETRY	;ERROR - TRY THE WHOLE THING OVER
30$:	SOBGTR	R7,20$			;READ EVERYTHING IN THE MAP
	ADDL	#7*4,SP			;CLEAN OFF THE ARG LIST
;
; END OF CODE THAT MUST BE TOTALLY CONTAINED IN THE FIRST PAGE OF
; NON-RESIDENT BUGCHECK CODE.
;
	MOVAB	@#FATAL_SPSAV,R0	;ADDRESS OF SAVED FATAL SP
	TSTL	(R0)			;ALREADY IN A FATAL BUGCHECK?
	BEQL	82$			;BRANCH IF NOT
	MOVL	(R0),SP			;RESTORE SP FROM PREVIOUS BUGCHECK
	BRW	200$			;AND GO REBOOT THE SYSTEM
82$:	MOVL	SP,(R0)			;NOTE THAT WE ARE IN A FATAL BUGCHECK
	BBSS	#PSL$V_PRVMOD,R10,84$	;JAM PREVIOUS MODE TO EXEC
					;THUS FORCING EXEC STACK DUMP TOO
;
; NOW BUILD THE DUMP FILE HEADER BLOCK.  A PIECE OF SYSTEM SPACE IS
; USED FOR THE BUFFER SINCE THIS IS THE ONLY ADDRESSES FOR WHICH I/O
; CAN BE DONE.  THE CRASH ERROR LOG ENTRY IS BUILT IN THIS BUFFER TO
; GUARANTEE THAT IS IS INCLUDED IN THE DUMP, (SINCE THE ERROR LOG BUFFERS
; MAY BE FULL).
;
84$:	MOVAB	FATALBUG-512+DMP$C_LENGTH+EMB$K_LENGTH,- ;BUFFER ADDRESS IS
		R2			;THE PAGE PREVIOUS TO THIS CODE
	MOVL	FP,EMB$L_CR_CODE(R2)	;SET BUGCHECK CODE INTO MESSAGE
	MOVL	@#SCH$GL_CURPCB,R1	;GET ADR OF CURRENT PROCESS'S PCB
	MOVL	PCB$L_PID(R1),EMB$L_CR_PID(R2) ;SET PROCESS ID INTO MESSAGE
	MOVQ	PCB$T_LNAME(R1),EMB$T_CR_LNAME(R2) ;SET PROCESS NAME INTO
	MOVQ	PCB$T_LNAME+8(R1),EMB$T_CR_LNAME+8(R2) ; ERROR LOG MESSAGE
	MOVZWL	#EMB$K_CR_LENGTH,EMB$W_SIZE(R2) ;SET THE SIZE OF THIS MSG
	MFPR	#PR$_SID,EMB$L_HD_SID(R2) ;SET SYSTEM ID IN MESSAGE
	MOVQ	@#EXE$GQ_SYSTIME,EMB$Q_CR_TIME(R2) ;SET TIME ERROR OCCURRED
	MOVW	@#ERL$GL_SEQUENCE,EMB$W_CR_ERRSEQ(R2) ;SET ERROR SEQUENCE NUMBER
	INCL	@#ERL$GL_SEQUENCE	;INCREMENT ERROR SEQUENCE NUMBER
	MOVZWL	#EMB$K_CR,R9		;SET TYPE OF ENTRY
	JSB	@#BUILD_HEADER		;BUILD HEADER AND DUMP REGISTERS
	JSB	@#DUMP_REGISTERS	;DUMP REMAINDER OF CPU-INDEPENDENT
					; PROCESSOR REGISTERS
	JSB	@#EXE$DUMPCPUREG	;DUMP CPU-DEPENDENT PROCESSOR
					; REGISTERS
	INCB	EMB$B_VALID(R2)		;INDICATE ERL ENTRY IS COMPLETE
	MOVL	FP,@#EXE$GL_BUGCHECK	;SAVE BUGCHECK CODE
	CMPL	FP,#<BUG$_OPERATOR!STS$K_SEVERE> ;IS THIS AN OPERATOR SHUTDOWN?
	BNEQ	100$			;NO, CONTINUE
	BRW	200$			;YES, DONT GIVE NORMAL BUGCHECK MESSAGE
100$:	PUSHL	FP			;SAVE BUG CHECK CODE
	MOVL	SP,AP			;SET ADDRESS OF REGISTERS
	CLRL	R11			;SET FOR CONSOLE TERMINAL OUTPUT
	MOVAB	MSGCTRL,R9		;GET ADDRESS OF CONTROL TEXT
110$:	CVTBL	(R9)+,R0		;GET NEXT BYTE FROM CONTROL TEXT
	BLSS	130$			;IF LSS END OF TEXT
	BEQL	120$			;IF EQL ESCAPE CHARACTER
	BSBW	EXE$OUTCHAR		;OUTPUT CHARACTER
	BRB	110$			;
120$:	MOVL	(AP)+,R1		;GET NEXT LONGWORD TO CONVERT
	MOVAB	W^MSGCTRL1,R0		;GET ADDRESS OF REGISTER STRING
	CMPL	R0,R9			;CHECK FOR END OF HEADER
	BNEQ	124$			;BRANCH IF NOT AT END
	MOVAQ	-(SP),R1		;CREATE BUFFER FOR VERSION TEXT
	MOVL	@#SYS$GQ_VERSION,1(SP)	;SET VERSION NUMBER IN BUFFER
	MOVB	#5,(SP)			;SET COUNT FOR VERSION AND SPACE
	MOVB	#32,5(SP)		;SET TRAILING SPACE
	BSBW	EXE$OUTCSTRING		;PRINT VERSION NUMBER
	ADDL	#8,SP			;CLEAN STACK
	DIVL3	#8,FP,R0		;CONVERT CODE TO INDEX
	MOVAB	BUG$T_MESSAGES,R1	;SET BASE OF MESSAGES
122$:	MOVZBL	(R1)+,R2		;GET LENGTH OF MESSAGE
	ADDL	R2,R1			;AND POINT TO NEXT MESSAGE
	SOBGTR	R0,122$			;BRANCH IF MESSAGE NOT LOCATED
	BSBW	EXE$OUTCSTRING		;OUTPUT STRING
	MOVAL	PRCNAM_MSG,R1		;"CURRENT PROCESS = "
	BSBW	EXE$OUTCSTRING		;OUTPUT COUNTED STRING
	MOVL	@#SCH$GL_CURPCB,R1	;PROCESS PCB OF CURRENT PROCESS
	ADDL	#PCB$T_LNAME,R1		;POINT AT PROCESS NAME
	BSBW	EXE$OUTCSTRING		;OUTPUT PROCESS NAME COUNTED STRING
	BSBW	EXE$OUTCRLF		;NEW LINE
	BRB	110$			;
124$:					;
	BSBW	EXE$OUTHEX		;OUTPUT CONVERTED HEX LONGWORD
	BSBW	EXE$OUTCRLF		;OUTPUT CARRIAGE RETURN, LINE FEED PAIR
126$:	BRB	110$			;
130$:	MOVZBL	#64,R8			;SET LOOP COUNT
	MOVAB	@#CTL$AL_STACK,R0	;POINTER TO POSSIBLE PROCESS SPACE STACKS
	MOVAB	@#CTL$AL_STACKLIM,R1	;POINTER TO POSSIBLE PROCESS STACK LIMIT
	BBC	#31,AP,135$		;BRANCH IF STACK IS IN PROCESS SPACE
	MOVAB	@#EXE$AL_STACKS,R0	;POINTER TO POSSIBLE SYSTEM SPACE STACKS
	MOVAL	-4(R0),R1		;USE SAME ARRAY AS LIMIT
	CMPL	AP,(R0)+		;ADDRESS IN FIRST(NULL) STACK?
	BLEQU	140$			;YES, OKAY
	BRB	137$			;NO, CHECK FURTHER
;
; CHECK PROCESS KERNEL/EXEC STACKS
;
135$:	CMPL	AP,(R0)+		;ADDRESS IN FIRST STACK?
	BGTRU	137$			;NO, TOO HIGH - TRY SECOND(EXEC) 
	CMPL	AP,(R1)			;BELOW FIRST STACK LIMIT?
	BGTRU	140$			;NO, ALL OKAY
137$:	CMPL	AP,(R0)+		;IN SECOND STACK?
	BGTRU	155$			;BRANCH IF NOT, BAD STACK ADDRESS
	CMPL	AP,4(R1)		;NOW CHECK LIMIT
	BLEQU	155$			;NO, BAD STACK
140$:	SUBL3	AP,-(R0),R0		;NUMBER OF BYTES TO TOP OF STACK
	BLEQ	155$			;BRANCH IF EMPTY
	DIVL	#4,R0			;FORM LONG WORD COUNT OF MAX TO DUMP
	CMPL	R0,R8			;USE SMALLER OF MAX AND DEFAULT
	BGEQ	145$			;
	MOVL	R0,R8			;USE THE MAX
145$:	BSBW	DUMP_ARRAY		;DUMP KERNEL, INTERRUPT, OR EXEC STACK
155$:	BBS	#31,AP,190$		;DO NOT TRY FOR EXEC STACK IF SYSTEM SPACE
	MFPR	#PR$_ESP,AP		;FETCH EXEC STACK POINTER
	BBSC	#PSL$V_PRVMOD,R10,126$	;IF HAVEN'T DUMPED EXEC STACK, DO IT NOW
	MOVAB	PRCPRV_MSG,R1		;"PROCESS PRIVILEGES"
	BSBW	EXE$OUTCSTRING		;OUTPUT COUNTED STRING
	MOVL	@#SCH$GL_CURPCB,AP	;CURRENT PROCESS CONTROL BLOCK ADDRESS
	MOVL	PCB$L_PHD(AP),AP	;PROCESS HEADER ADDRESS
	BGEQ	170$			;IF NOT NEGATIVE, DON'T TRY TO USE IT
	MOVL	#2,R8			;2 LONG WORDS AT FRONT OF HEADER
	BSBW	DUMP_ARRAY		;OUTPUT THE PROCESS PRIVILEGES
170$:	MOVAB	IMGNAM_MSG,R1		;"IMAGE NAME = "
	BSBW	EXE$OUTCSTRING		;OUTPUT THE COUNTED STRING
	MOVAB	@#MMG$IMGHDRBUF,AP	;ADDRESS OF IMAGE HEADER
	CLRL	R8			;DO NOT DUMP ANY DATA
	BSBW	DUMP_ARRAY		;JUST CHECK FOR ACCESSABILITY
	BLBC	R0,190$			;BRANCH IF CANNOT ACCESS THE IMAGE HDR BUF
	MOVL	4(AP),R1		;ADDRESS OF IMAGE FILE DESCRIPTOR
	MOVZWL	IFD$W_FILNAMOFF(R1),R0	;OFFSET TO NAME OF IMAGE BEING RUN
	ADDL	R0,R1			;ADDRESS OF ASCIC NAME
	BSBW	EXE$OUTCSTRING		;OUTPUT THE IMAGE NAME
	BSBW	EXE$OUTCRLF		;OUTPUT CARRIAGE RETURN, LINE FEED PAIR
190$:	TSTL	(SP)+			;REMOVE BUG CHECK CODE FROM STACK
200$:	POPR	#^M<R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,AP,FP,SP> ;RESTORE
	BBS	S^#EXE$V_BUGREBOOT,@#EXE$GL_FLAGS,WRT_DMP	; CHECK FOR REBOOT
	JSB	@#INI$BRK		;STOP IN XDELTA IF PRESENT
WRT_DMP:				;CHECK AND WRITE THE DUMP FILE
	PUSHR	#^M<R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,AP,FP,SP> ;STACK REGS
					;FOR DISK WRITE
	BBC	S^#EXE$V_BUGDUMP,@#EXE$GL_FLAGS,20$ ; BRANCH IF NO DUMP 
;
; THE BOOT CONTROL BLOCK HAS ALREADY BEEN VALIDATED, JUST CHECK THAT
; A DUMP FILE IS ACTUALLY PRESENT.
;
	MOVL	@#EXE$GL_BOOTCB,R10	;BOOT CONTROL BLOCK ADDRESS
	MOVL	BOO$L_DMP_MAP(R10),R5	;VIRTUAL TO LOGICAL MAP FOR DUMP FILE
	MOVL	BOO$L_DMP_SIZE(R10),R9	;SIZE OF DUMP FILE IN BLOCKS
	BGTR	30$			;BRANCH IF SOME BLOCKS ARE PRESENT
20$:	BRW	NODUMP			;NO DUMP
30$:	MOVL	@#EXE$GL_RPB,R6		;GET BASE OF RESTART PARAMETER BLOCK
	MOVL	RPB$L_IOVEC(R6),R5	;FETCH POINTER TO BOOTDRIVER
	MOVAB	FATALBUG-512,R3		;GET ADDRESS OF DUMP HEADER BLK BUFFER
	MOVL	R3,R7			;SET BUFFER ADDRESS FOR WRITEDUMP
	ASSUME	DMP$L_ERRSEQ EQ 0
	MOVL	@#ERL$GL_SEQUENCE,(R3)+	;SAVE ERROR LOG SEQUENCE NUMBER
	ASSUME	DMP$W_FLAGS EQ DMP$L_ERRSEQ+4
	CLRW	(R3)+			;SET DUMP FILE FLAGS
	ASSUME	DMP$W_DUMPVER EQ DMP$W_FLAGS+2
	MOVW	#2,(R3)+		;SET DUMP FILE VERSION NUMBER
	ASSUME	DMP$L_SBR EQ DMP$W_DUMPVER+2
	MFPR	#PR$_SBR,(R3)+		;SET SYSTEM BASE REGISTER
	ASSUME	DMP$L_SLR EQ DMP$L_SBR+4
	MFPR	#PR$_SLR,(R3)+		;SET SYSTEM LENGTH REGISTER
	ASSUME	DMP$L_KSP EQ DMP$L_SLR+4
	MFPR	#PR$_KSP,(R3)+		;SET KERNEL STACK POINTER
	ASSUME	DMP$L_ESP EQ DMP$L_KSP+4
	MFPR	#PR$_ESP,(R3)+		;SET EXEC STACK POINTER
	ASSUME	DMP$L_SSP EQ DMP$L_ESP+4
	MFPR	#PR$_SSP,(R3)+		;SET SUPER STACK POINTER
	ASSUME	DMP$L_USP EQ DMP$L_SSP+4
	MFPR	#PR$_USP,(R3)+		;SET USER STACK POINTER
	ASSUME	DMP$L_ISP EQ DMP$L_USP+4
	MFPR	#PR$_ISP,(R3)+		;SET INTERRUPT STACK POINTER
;
; IF THE RPB WAS CREATED BY A VERSION OF VMB LESS THAN 3, THEN
; CREATE A DUMMY MEMORY DESCRIPTOR FOR MAIN MEMORY BY ASSUMING
; THAT THE SPT RESIDES AT THE END OF PHYSICAL MEMORY
;
	MCOMW	BQO$W_VERSION(R5),R0	;GET VMB VERSION NUMBER 1'S COMPLEMENTED
	CMPW	R0,BQO$W_VERSION+2(R5)	;CHECK AGAINST CHECK WORD IN VMB
	BNEQ	40$			;IF NOT, ASSUME NO VERSION NUMBER
	CMPW	BQO$W_VERSION(R5),#3	;VERSION 3 OF VMB?
	BGEQU	50$			;IF OK, USE DESCRIPTORS IN RPB
40$:	MFPR	#PR$_SLR,R0		;GET LENGTH OF SPT IN LONGWORDS
	MFPR	#PR$_SBR,R1		;GET PHYSICAL ADDRESS OF SPT
	MOVAL	(R1)[R0],R0		;COMPUTE TOTAL PHYSICAL MEMORY SIZE
	ASHL	#-9,R0,RPB$L_MEMDSC(R6)	;STORE IN MEM. DESCRIPTOR PAGCNT,TR=0
	ASSUME	RPB$V_PAGCNT EQ 0
	ASSUME	RPB$V_TR EQ <RPB$V_PAGCNT+24>
	ASSUME	RPB$C_MEMDSCSIZ EQ 8
	CLRQ	RPB$L_MEMDSC+4(R6)	;SET STARTPFN=0 AND STORE 0 TERMINATOR
	ASSUME	RPB$V_BASEPFN EQ 32
	ASSUME	RPB$C_NMEMDSC GE 2
;
; COPY THE MEMORY DESCRIPTORS FROM THE RPB INITIALIZED IN VMB
;
	ASSUME	RPB$C_NMEMDSC EQ DMP$C_NMEMDSC
	ASSUME	RPB$C_MEMDSCSIZ EQ DMP$C_MEMDSCSIZ
50$:	MOVC3	#<RPB$C_NMEMDSC*RPB$C_MEMDSCSIZ>,RPB$L_MEMDSC(R6),(R3) ;SET THE
					;MEMORY DESCRIPTORS FROM THE RPB
;
; STORE THE SYSTEM VERSION AND ONE'S COMPLEMENT CHECKSUM IN HEADER
;
	MOVL	#SYS$K_VERSION,(R3)	;SET THE VERSION # OF THE SYSTEM
	MCOML	(R3),4(R3)		;SET CHECK FIELD = ONES COMPLEMENT
;
; WRITE THE FIRST BLOCK OF THE DUMP FILE (THE HEADER)
;
	MOVZWL	#<EMB$K_CR_LENGTH+EMB$K_LENGTH+DMP$C_LENGTH>,R8 ;BUFFER SIZE
	MOVL	BOO$L_DMP_MAP(R10),R5	;VIRTUAL TO LOGICAL MAP FOR DUMP FILE
	MOVL	BOO$L_DMP_VBN(R10),R10	;STARTING VBN OF DUMP FILE
	BSBW	WRITEDUMP		;WRITE DUMP HEADER
;
; WRITE THE NEXT 2 BLOCKS OF ERROR LOG BUFFERS
;
	MOVZWL	#<2*512>,R8		;SET SIZE FOR ERROR LOG BUFFERS
	MOVL	@#ERL$AL_BUFADDR,R7	;AND BUFFER ADDRESS
	BSBW	WRITEDUMP		;WRITE ERROR LOG BUFFERS
;
; NOW WRITE EVERY PAGE OF EVERY MEMORY OUT TO THE DUMP FILE.  VMB HAS BUILT
; MEMORY DESCRIPTORS INTO THE RPB.  EACH DESCRIPTOR GIVES THE TR NUMBER, BASE
; PFN, AND PAGE COUNT FOR A PARTICULAR MEMORY.  THERE MAY BE UP TO EIGHT MEMORY
; DESCRIPTORS.  A DESCRIPTOR WITH A ZERO PAGE COUNT AND TR NUMBER INDICATES NO
; MORE DESCRIPTORS.
;
	ASSUME	RPB$C_MEMDSCSIZ EQ 8
	MOVL	#RPB$C_NMEMDSC,R4	;GET MAXIMUM # OF MEM DESC POSSIBLE
	MOVAB	RPB$L_MEMDSC(R6),R11	;GET ADR OF FIRST MEM DESC
60$:	EXTZV	#RPB$V_PAGCNT,#RPB$S_PAGCNT,(R11),R8 ;GET PAGCNT FOR THIS MEM
	BEQL	NODUMP			;BR IF MEM DSC NOT USED
	ASHL	#9,R8,R8		;CONVERT PAGE COUNT TO BYTE COUNT
	ASSUME	<RPB$S_PAGCNT + RPB$S_TR> EQ 32
	ADDL	#4,R11			;POINT TO BASE PFN IN MEMORY DESC
	ASSUME	RPB$S_BASEPFN EQ 32
	ASSUME	RPB$V_BASEPFN EQ 32
	MOVL	(R11)+,R7		;GET BASE PFN FOR THIS MEMORY
	ASHL	#9,R7,R7		;CONVERT PFN TO PHYSICAL ADDRESS
	BSBW	WRITEDUMP		;DUMP PAGES FOR THIS MEMORY
	SOBGTR	R4,60$			;LOOK FOR ANOTHER MEMORY DESCRIPTOR
NODUMP:					;
	BBC	S^#EXE$V_BUGREBOOT,@#EXE$GL_FLAGS,20$	;BRANCH IF NO REBOOT
	JMP	@#REBOOT		;REBOOT THE PROCESSOR
20$:	CLRL	R11			;SET FOR CONSOLE TERMINAL OUTPUT
	MOVAB	SHUT_DOWN,R1		;SET ADDRESS OF MESSAGE STRING
	BSBW	EXE$OUTZSTRING		;AND OUTPUT IT TO THE CONSOLE
30$:	BRB	30$			;LOOP FOREVER

	.PAGE
	.SBTTL	DUMP_ARRAY - SUBROUTINE TO DUMP AN ARRAY OF MEMORY LOCATIONS
;
; DUMP AN ARRAY OF MEMORY LOCATIONS WITH THEIR ADDRESSES AND CONTENTS
;
; INPUTS:
;
;	R8 = NUMBER OF LONG WORDS TO DUMP
;	     IF 0 IS SPECIFIED THE FIRST ADDRESS IS CHECKED FOR RESIDENCY
;	AP = ADDRESS OF FIRST LONG WORD TO DUMP
;
; OUTPUTS:
;
;	R0 = LOW BIT SET IF SUCCESSFUL
;	   = LOW BIT CLEAR IF CANNOT ACCESS THE ADDRESS IN AP
;	AP = ADDRESS OF NEXT LONG WORD NOT DUMPED
;	R4,R5,R8 ALTERED
;
DUMP_ARRAY:
	MOVAB	@#MMG$AL_SYSPCB,R4	;PCB ADDRESS IF SYSTEM SPACE
	BBS	#31,AP,20$		;BRANCH IF SYSTEM SPACE
	MOVL	@#SCH$GL_CURPCB,R4	;PROCESS PCB FOR PROCESS SPAC
20$:	MOVL	PCB$L_PHD(R4),R5	;CORRESPONDING PROCESS HEADER ADDRESS
	BRB	70$			;LOOP 0 OR MORE TIMES
60$:	MOVZBL	#^A/	/,R0		;GET TAB CHARACTER
	BSBW	EXE$OUTCHAR		;OUTPUT TAB CHARACTER
	MOVL	AP,R1			;GET ADDRESS OF LONGWORD TO CONVERT
	BSBW	EXE$OUTHEX		;CONVERT ADDRESS OF LONGWORD
	BSBW	EXE$OUTBLANK		;OUTPUT BLANK CHARACTER
	BSBW	EXE$OUTBLANK		;OUTPUT BLANK CHARACTER
	MOVL	(AP)+,R1		;GET CONTENTS OF LONGWORD TO OUTPUT
	BSBW	EXE$OUTHEX		;OUTPUT CONVERTED HEX LONGWORD
	BSBW	EXE$OUTCRLF		;OUTPUT CARRIAGE RETURN, LINE FEED PAIR
70$:	MOVL	AP,R2			;MAKE SURE THAT THIS ADDRESS CAN BE ACCESSED
	JSB	@#MMG$PTEINDX		;GET LONG WORD INDEX TO SVAPTE IN R3
	BLBC	R0,100$			;BRANCH IF LENGTH VIOLATION
	MOVAL	(R5)[R3],R3		;FORM SYSTEM VIRTUAL ADR OF PTE
	TSTL	(R3)			;SEE IF PAGE TABLE ENTRY IS VALID
	BLSS	75$			;BRANCH IF IT IS
	BITW	#<PTE$M_TYP1 ! PTE$M_TYP0>@-16,2(R3) ;IF TRANSITION PAGE
	BNEQ	100$			;BRANCH IF NOT
	EXTZV	#PTE$V_PFN,#PTE$S_PFN,(R3),R0 ;GET PAGE FRAME NUMBER
	BEQL	100$			;BRANCH IF DEMAND ZERO FORMAT
	PUSHL	@#PFN$AB_STATE		;ADDRESS OF STATE TABLE
	CMPZV	#PFN$V_LOC,#PFN$S_LOC,-	;PAGE IS OK IN MEMORY UNLESS
		@(SP)+[R0],#PFN$C_RDINPROG ;IT IS BEING READ IN
	BEQL	100$
	BISB	#<PTE$M_VALID>@-24,3(R3) ;JAM IT VALID AND USE IT
75$:	SOBGEQ	R8,60$			;ANY MORE LONGWORDS TO CONVERT?
80$:	MOVL	#1,R0			;INDICATE SUCCESSFUL COMPLETION
	RSB
;
; CANNOT ACCESS ADDRESS POINTED TO BY AP
;
100$:	CLRL	R0
	RSB
;
; SUBROUTINE TO BUILD HEADER AND DUMP GENERAL REGISTERS
;
 
	.PSECT	$AEXENONPAGED
BUILD_HEADER:				;
	ASSUME	EMB$W_BC_ENTRY EQ EMB$W_CR_ENTRY
	MOVW	R9,EMB$W_BC_ENTRY(R2)	;SET TYPE OF ENTRY IN EMB
	ASSUME	EMB$L_BC_KSP EQ EMB$L_CR_KSP
	MOVAB	EMB$L_BC_KSP(R2),R0	;POINT TO PLACE IN EMB FOR 1ST REGISTER
	BSBB	DUMP_REGISTERS		;INSERT PROCESSOR STACK POINTERS
	ASSUME	EMB$L_BC_R0 EQ EMB$L_BC_R0
	ASSUME	EMB$L_BC_PSL EQ EMB$L_CR_PSL
	MOVL	#<EMB$L_BC_PSL+4-EMB$L_BC_R0>/4,R1 ;SET NUMBER OF REGISTERS
10$:	MOVL	(AP)+,(R0)+		;INSERT GENERAL REGISTER
	SOBGTR	R1,10$			;ANY MORE REGISTERS TO INSERT?
	RSB				;
 
;
; SUBROUTINE TO DUMP PROCESSOR REGISTERS UNTIL ESCAPE
;
 
DUMP_REGISTERS:				;
	CVTBL	(R11)+,R1		;GET NEXT INTERNAL REGISTER NUMBER
	BLSS	RETURN			;IF LSS ESCAPE
	MFPR	R1,(R0)+		;INSERT PROCESSOR REGISTER
	BRB	DUMP_REGISTERS		;
RETURN:	RSB				;
;
; VALIDATE THE CHECKSUM FOR THE BOOT CONTROL BLOCK
;
; INPUTS:
;
;	NONE
;
; OUTPUTS:
;
;	Z SET IF CHECKSUM MATCHES, Z CLEAR IF NOT
;	R1 = ADDRESS OF BEGINNING OF BOOT CONTROL BLOCK
;	R3 = DESIRED CHECKSUM VALUE
;	R0 ALTERED
;	ALL OTHER REGISTERS PRESERVED
;

EXE$BOOTCB_CHK::
	MOVQ	EXE$GQ_BOOTCB_D,R0	;GET DESCRIPTOR OF BLOCK TO CHECKSUM
	ADDL	R0,R1			;POINT TO END OF BOOT CONTROL BLOCK
	DIVL	#4,R0			;FORM LONG WORD COUNT

	ASSUME	BOO$L_CHECKSUM EQ 0
	DECL	R0			;DON'T ADD FIRST LONG WORD
	CLRL	R3			;INIT CHECKSUM
10$:	ADDL	-(R1),R3		;FORM ADDITIVE CHECKSUM
	SOBGTR	R0,10$			;LOOP THROUGH THE BLOCK
	CMPL	R3,-(R1)		;DOES THE CHECKSUM MATCH
	RSB
	.PAGE
	.SBTTL	WRITEDUMP - WRITE DATA TO DUMP FILE
;
; WRITE DATA TO SYSTEM DUMP FILE
;
; INPUTS:
;	R5 - ADDRESS OF VIRTUAL TO LOGICAL MAP FOR DUMP FILE
;	R6 - ADDRESS OF RESTART PARAMETER BLOCK
;	R7 - BUFFER ADDRESS
;	R8 - SIZE OF BUFFER IN BYTES
;	R9 - NUMBER OF BLOCKS NOT YET WRITTEN IN DUMP FILE
;	R10 - VBN OF DUMP FILE (UPDATED)
;
; OUTPUTS:
;	R7 - UPDATED
;	R8 - UPDATED
; 	R9 - UPDATED
;	R10 - UPDATED
;
	IOSIZE=127*512			;MAXIMUM TRANSFER SIZE
	.PSECT	Z$INIT__BUGA,PAGE	;FIRST BUGCHECK PSECT
WRITEDUMP:				;
	PUSHR	#^M<R5,R10>		;SAVE MAP AND VBN
	ASHL	#-3,(R5)+,R2		;COUNT OF RETRIEVAL POINTERS
10$:	MOVQ	(R5)+,R0		;R0=BLOCK COUNT, R1=STARTING LBN
	CMPL	R10,R0			;VBN COVERED BY THIS RETRIEVAL POINTER?
	BLEQ	20$			;BRANCH IF YES
	SUBL	R0,R10			;NO, REDUCE VBN BY BLOCKS PASSED OVER
	SOBGTR	R2,10$			;TRY NEXT RETRIEVAL POINTER
	POPR	#^M<R5,R10>		;RESTORE MAP AND VBN
	BRB	100$			;EOF, NO MORE WRITING
20$:	DECL	R10			;MAKE VBN 0 ORIGIN
	SUBL	R10,R0			;NO. OF BLOCKS AFTER DESIRED VBN
	ADDL	R10,R1			;STARTING LBN OF DESIRED VBN
	POPR	#^M<R5,R10>		;RESTORE MAP AND VBN
;
; R0 = NUMBER OF BLOCKS THAT COULD BE TRANSFERRED
; R1 = STARTING LBN OF THE TRANSFER
;
	MOVZWL	#IOSIZE,R3		;ASSUME MAXIMUM
	ASHL	#9,R0,R0		;BYTE COUNT THAT COULD BE TRANSFERRED
	CMPL	R3,R0			;MINIMIZE WITH MAX LEGAL XFER
	BLEQ	30$
	MOVL	R0,R3
30$:	CMPL	R3,R8			;MINIMIZE WITH BYTE COUNT
	BLEQ	40$			;REMAINING TO BE TRANSFERRED
	MOVL	R8,R3
40$:	MOVAB	511(R3),R2		;ROUND UP BYTE COUNT AND FORM
	ASHL	#-9,R2,R2		;PAGES TO BE WRITTEN
	BEQL	100$			;NOTE NOTHING TO TRANSFER
	CMPL	R2,R9			;MINIMIZE WITH PAGES LEFT IN FILE
	BLEQ	50$
	ASHL	#9,R9,R3		;USE BYTE COUNT REMAINING IN FILE
	MOVL	R9,R2			;AND BLOCK COUNT TO TRANSFER
	BEQL	100$			;BRANCH IF NO BLOCK LEFT IN FILE
50$:	PUSHL	R6			;SET ADDRESS OF RPB
	EXTZV	#VA$V_SYSTEM,#1,R7,-(SP);USE SYSTEM BIT AS VIRTUAL FLAG
	PUSHL	S^#IO$_WRITELBLK	;SET FUNCTION CODE
	PUSHL	R1			;LBN IN DUMP FILE
	PUSHL	R3			;SIZE OF BUFFER IN BYTES
	PUSHL	R7			;ADDRESS OF BUFFER
	MOVL	RPB$L_IOVEC(R6),R0	;BOOT DRIVER VECTOR
	CALLS	#6,@BQO$L_QIO(R0)[R0]	;CALL BOOTDRIVR
	ADDL	R3,R7			;UPDATE BUFFER ADDRESS
	ADDL	R2,R10			;UPDATE VBN
	SUBL	R2,R9			;AND SIZE OF FILE
	BLEQ	100$			;DONE IF END OF FILE
	SUBL	R3,R8			;UPDATE BYTE COUNT
	BLEQ	100$			;DONE IF BYTE COUNT EXHAUSTED
	BRW	WRITEDUMP		;OTHERWISE START FROM THE TOP
100$:	RSB				;

	.END
