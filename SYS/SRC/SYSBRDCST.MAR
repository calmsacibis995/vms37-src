	.TITLE	SYSBRDCST - Broadcast message to terminal system service
	.IDENT	'V03-001'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
; FACILITY:
;
;	VAX/VMS EXECUTIVE SYSTEM SERVICE FOR BROADCASTS
;
; ABSTRACT:
;
;	SYSBRDCST IS A PRIVILEGED SYSTEM SERVICE THAT CREATES
;	BREAK THROUGH WRITE OPERATIONS ON ONE OR MORE TERMINALS.
;
; AUTHOR:
;
;	R.HEINEN 11-JAN-1977
;
; Revision history:
;
;	V03-001	JLV0209		Jake VanNoy		12-APR-1982
;		Remove defaulting of carriage control.
;
;	V02-024	MSH0002		Maryann Hinden		17-Feb-1982
;		Input R7 to SCREEN subroutine correctly; document.
;		Delete obsolete subroutine.
;
;	V02-023 MSH0001		Maryann Hinden		3-Feb-1982
;		Fix PROBE problem.
;
;	V02-022 JLV0177		Jake VanNoy		2-Feb-1982
;		Change ANSI broadcasts to SCREEN broadcasts, sent when 
;		requested to terminals with DEC_CRT characteristic.
;
;	V02-021	RNG0001		Rod N. Gamache		05-Jan-1982
;		Change TT2$V_ANSI to TT2$V_ANSICRT.
;
;	V02-020	JLV0141		Jake VanNoy		2-Jan-1981
;		Bug fixes, enhance PID lookup for privilege check.
;
;	V02-019	JLV0095		Jake VanNoy		27-Oct-1981
;		Changed TTYDEFS to $TTYDEFS. Add filling in of 
;		TTY$L_WB_RETADDR with address of EXE$BRDCSTCOM.
;		Disallow broadcasts to autobauding non-logged-in
;		terminals.
;
;	V02-018	JLV0082		Jake VanNoy		4-Sep-1981
;		Change defaulting carriage control if CARCON is 0.
;
;	V02-017	JLV0073		Jake VanNoy		29-Aug-1981
;		Add $BRDCSTDEF to definitions.
;
;	V02-016	JLV0073		Jake VanNoy		28-Aug-1981
;		Add Broadcast to mailbox code setup by adding
;		the BRD$x_TRMxxx fields and calling EXE$WRTMAILBOX.
;		Add setting of refresh logic.
;
;	V02-015	JLV0059		Jake VanNoy		26-Jul-1981
;		Final touches on JLV0049. Includes a bugfix in the
;		TWP refused error path after call to START_BROADCAST,
;		which deallocated non-paged pool without removing
;		BRD packet from queue.
;
;	V02-014	JLV0049		Jake VanNoy		23-Jun-1981
;		Added carriage control parameter. Added brd$l_carcon
;		to $BRDDEF and made brd$l_data 4 bytes instead of 16.
;
;	V02-013	STJ0015		Steven Jeffreys		06-Dec-1980
;		Allow messages up to 65 kb less some overhead.
;		Return SS$_BADPARAM if message too big.  Removed
;		message size check in ADDRCHK.
;
;	X12	TCM0001		Trudy Matthews	20-Mar-1980
;		In START_BROADCAST, raise IPL to QUEUEAST level so that
;		broadcast completion cannot interrupt in between starting
;		a broadcast packet and incrementing the ref count.
;		In EXE$BRDCSTCOM, bugcheck if the reference count goes
;		negative.
;--

	.SBTTL	Declarations

;
; EXTERNAL DEFINITIONS
;

	$BRDDEF				; Define broadcast descriptor.
	$BRDCSTDEF			; Define broadcast flags
	$DDBDEF				; DEFINE DDB
	$DEVDEF				; DEFINE DEVICE CHARACTERISTICS
	$DYNDEF				; DEFINE DYNAMIC DATA TYPES
	$IPLDEF				; DEFINE IPLS
	$IRPDEF				; Define IRP definitions.
	$MSGDEF				; Define Mailbox Messages
	$PCBDEF				; DEFINE PCB
	$PRDEF				; DEFINE PROCESSOR REGISTERS
	$PRVDEF				; DEFINE PRIVILEGES
	$RSNDEF				; DEFINE RESOURCE NUMBERS
	$SSDEF				; Define status codes.
	$TTYDEF				; DEFINE TERMINAL DRIVER SYMBOLS
	$TT2DEF				; DEFINE TERMINAL DEVDP1 SYMBOLS
	$UCBDEF				; DEFINE UCB
	$TTYDEFS			; DEFINE TERMINAL UCB EXTENSIONS
 
	.PSECT	AEXENONPAGED

; DATA

prefix: .ascid /7[!UB;!UBH[!UBJ[!UB;1H/

;
; Local storage offsets for temporary stack allocation
;

DESC		= 0
PREFIX_OUTPUT	= 8
PREFIX_LEN	= 21
LOCAL_SIZE	= PREFIX_LEN + 8	; 8 is descriptor size
SUFFIX_LEN	= 2

BRD$C_TRMNAME_LEN = 15

;
; parameter offsets
;

MSG	= 4
TERM	= 8
FLAGS	= 12
CC	= 16



	.SBTTL	EXE$BRDCST - Broadcast system service

;++
; EXE$BRDCST - TERMINAL BROADCAST SYSTEM SERVICE
;
; FUNCTIONAL DESCRIPTION:
;
; This is a privileged system service: PRV$_OPER is required for
; multi-terminal broadcsts. Single broadcasts can be issued to terminals
; owned by the requestor.
;
; The system service allocates and initializes a broadcast descriptor
; block as illustrated below:
;
;
; Structure of broadcast message descriptor block.
; 
; 
;                        +-----------+
; BRD$L_FLINK          0 |           |   Broadcast queue forward link.
;                        +-----------+
; BRD$L_BLINK          4 |           |   Broadcast queue backward link.
;                        +-----+-----+
; BRD$W_SIZE           8       |     |   Size of block.
;                           +--+-----+
; BRD$B_TYPE           A    |  |         Type of block.
;                        +--+--+      
;  spare               B |  |            Spare byte.
;                        +--+--------+
; BRD$L_PCB            C |           |   PCB of requestor.
;                        +-----------+
; BRD$L_PID           10 |           |   PID of requestor.
;                        +-----+-----+
; BRD$W_REFC          14       |     |   Terminals outputting message now.
;                        +-----+-----+
; BRD$W_SCRLENGTH     16 |     |         SCREEN message length.
;                        +-----+-----+
; BRD$L_SCRDATA       18 |           |   SCREEN data pointer.
;                        +-----------+
; BRD$L_CARCON        1C |           |   Carriage control parameter.
;                        +-----+-----+
; BRD$W_TRMMSG        20       |     |   Terminal broadcast mail message
;                        +-----+-----+
; BRD$W_TRMUNIT       22 |     |         Terminal unit number
;                        +-----+  +--+
; BRD$T_TRMNAME       24          |  |   Terminal name ascic string
;                        +--------+--+
;                     25 |        |      Space for name
;                        +        +--+
;                        |           |
;                        |           |
;                        |           |
;                        +-----+-----+
; BRD$W_MSGLENGTH     34       |     |   Length of message in bytes.
;                        +-----+-----+
; BRD$L_DATA          36 |     |         Data area.
;                        +     +-----+
;                        |           |
;                        |           |
;                              .
;                              .
;                              .
;
;                        |           |
;                        +-----------+
;                        |           | SCREEN data area (BRD$L_SCRDATA points 
;                        |           |                 to here)
;                              .
;                              .
;                              .
;                        +-----------+
;
;
; The service then identifies terminals to receive the broadcast.
; For each such terminal, the service allocates and initializes a write
; buffer header block that points to the broadcast descriptor block,
; and then calls the terminal's driver's alternate start I/O entry
; point.
;
; If the driver does not want to output the broadcast message to the
; termnal, the driver can return with a rejection status in the "end
; of message address" field in the broadcast buffer packet.
;
; The process issuing the system service call does not regain control
; until the terminal driver(s) either reject the message for all
; terminals, or fork to EXE$BRDCSTCOM for each terminal that output
; the message.
;
; INPUTS:
;
;	(AP) = 2 or 4
;	4(AP) = ADDRESS OF STRING DESCRIPTOR FOR MESSAGE
;	8(AP) = TARGET TERMINAL DESCRIPTOR ADDRESS
;		IF 8(AP) = 0, THEN ALL TERMINALS
;		If 8(AP) = non-zero, then 8(AP) is the address of
;		of a string descriptor that describes the logical name
;		of the target terminal.
;
;		If the descriptor describes a zero length string, then
;		the broadcast message goes out to all terminals that are
;		allocated to a process.
;
;	12(AP) = first byte:  number of lines to blank for an SCREEN broadcast
;		 second byte: flags
;			BRDCST$V_SCREEN - to specify SCREEN
;			BRDCST$V_BOTTOM - to specify bottom (top is default)
;			BRDCST$V_REFRSH - signal terminal driver to refresh 
;					  read prompt (not done yet)
;		 remainder: reserved for future use.
;
;
;	16(AP) = Carriage Control specifier, exactly as in QIO parameter
;		 to terminal driver.
;
;	R4 = CURRENT PROCESS PCB ADDRESS.
;
; OUTPUTS:
;
;	R0 = STATUS OF THE OPERATION
;
; COMPLETION CODES:
;
;	SS$_NORMAL - SUCCESSFUL OPERATION
;	SS$_ACCVIO - MESSAGE ACCESS VIOLATION
;	SS$_EXQUOTA - BUFFERED I/O QUOTA EXCEEDED
;	SS$_INSFMEM - MEMORY ALLOCATION FAILURE WITHOUT RESOURCE WAIT
;	SS$_NOPRIV - CURRENT PROCESS DOES NOT HAVE "PRV$V_OPER"
;	SS$_DEVOFFLINE - DEVICE NOT AVAILABLE FOR BREAK THROUGH WRITE
;	SS$_BADPARAM - BAD PARAMETER. (MESSAGE SIZE TOO BIG)
;--

EXE$BRDCST::				; BROADCAST SYSTEM SERVICE
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8>; Notice restricted set of
					; saved registers.

	PUSHL	R4			; SAVE PCB

;
; ADDRESS CHECK SPECIFIED MESSAGE STRING
;
	MOVL	MSG(AP),R1		; GET STRING DESCRIPTOR ADDRESS
	BSBW	EXE$PROBER_DSC		; ACCESS CHECK DESCRIPTOR & ITS BUFFER
	BLBS	R0,5$			; IF LBS, OKAY FOR READ

	MOVZWL	#SS$_ACCVIO,R0		; INDICATE ACCESS VIOLATION
	RET				; RETURN

5$:	PUSHL	R2			; BUILD DESCRIPTOR ON STACK
	MOVZWL	R1,-(SP)		;  (R1,R2 RETURNED FROM SUBR CALL)

;
; GET CARRIAGE CONTROL
;
	MOVZBL	#^A/ /,R6		; Assume Fortran carriage control
 	CMPL	#4,(AP)			; Is there carriage control ?
	BNEQ	15$			; branch if no

	IFRD	#8,FLAGS(AP),10$	; Have access ?
	MOVZWL	#SS$_ACCVIO,R0		; Set error if not
	BRB	20$			; Exit

10$:	MOVL	CC(AP),R6		; Get specified carriage control
;
; An IRP must be allocated to call EXE$CARRIAGE. The same buffer
; will be used later as the BRD if it is large enough.
;
15$:	MOVZBL	#IRP$C_LENGTH,R1	; Set buffer size
	BSBW	EXE$BUFFRQUOTA		; Check quota
	BLBC	R0,20$			; Branch on error

	BSBW	EXE$ALLOCIRP		; Allocate IRP    (R2 is address)
	BLBC	R0,20$			; Branch on error

	MOVL	R6,IRP$B_CARCON(R2)	; Set carriage control specifier
	MOVL	R2,R3			; Set address of IRP
	BSBW	EXE$CARRIAGE		; Call EXEC routine to decode
	MOVL	IRP$B_CARCON(R2),R6	; Save for BRD later
;
; GET SIZE OF MESSAGE AND OVERHEAD
;
	MOVZBL	R6,R0			; Prefix size
	MOVZBL	IRP$B_CARCON+2(R2),R1	; Suffix size
	ADDL2	R0,R1			; Add together
	MOVZWL	(SP),R0			; Message size
	ADDL3	R0,R1,R5		; Add in, save in R5
	ADDL3	#BRD$C_LENGTH,R5,R1	; Overhead of descriptor block
;
; CHECK FOR SCREEN FLAG
;	
	CMPL	#4,(AP)			; Is there carriage control ?
	BNEQ	18$			; branch if no
	MOVL	FLAGS(AP),R3		; Get parameter
	BBC	#BRDCST$V_SCREEN,R3,18$	; Branch if no SCREEN
;
; SET UP SCREEN STRING
;
	CMPB	#24,R3			; # lines to blank correct ?
	BLSSU	19$			; Branch if not

	ADDL3	#PREFIX_LEN+SUFFIX_LEN,R0,R8
					; Get length of SCREEN string, save
	ADDL2	R8,R1			; Add to length of BRD packet

18$:	CVTLW	R1,R1			; Must be < 65K
	BVC	25$			; Branch if OK
19$:	PUSHL	#SS$_BADPARAM		; Save error
	MOVL	R2,R0			; Address of IRP in R0
	BRW	112$			; Deallocate IRP 
20$:	SETIPL	#0			; Could be set up by other calls
	RET				; Return

25$:	CMPW	#IRP$C_LENGTH,R1	; See if IRP is large enough
	BGEQU	30$			; Branch if yes
	PUSHL	R1			; Save length
	MOVL	R2,R0			; Set address
	BSBW	EXE$DEANONPAGED		; Deallocate

	POPL	R1			; Restore length
	BSBW	EXE$BUFFRQUOTA		; R1 is still length - check quota
	BLBC	R0,20$			; Branch on error

	BSBW	EXE$ALLOCBUF		; Allocate new buffer
	BLBC	R0,20$			; Branch on error

30$:	PUSHR	#^M<R2>			; SAVE BLOCK ADDRESS

;
; Normally, the system service would adjust the process quota here.
; However, since IPL is at IPL$_ASTDEL, so no ASTs can occur until the
; broadcast completes, and the process does not gain control in its
; normal flow until the broadcast completes, it is enough to know that
; the quota is available. No one else can use any until broadcast is
; done.
;
; Set up the broadcast descriptor block.
;

	ASSUME	BRD$W_SIZE   EQ IRP$W_SIZE
	ASSUME	BRD$L_DATA+4 EQ BRD$C_LENGTH 	; must be last thing in BRD

	MOVW	#DYN$C_BRDCST,BRD$B_TYPE(R2)	; Insert block type.
	MOVL	R4,BRD$L_PCB(R2)		; Insert PCB address.
	MOVL	PCB$L_PID(R4),BRD$L_PID(R2)	; Insert associated PID.
	CLRW	BRD$W_REFC(R2)			; Clear UCB reference count.
	MOVW	#MSG$_TRMBRDCST,BRD$W_TRMMSG(R2); Set mailbox message type
	MOVW	R5,BRD$W_MSGLENGTH(R2)		; Set message length
	MOVL	R6,BRD$L_CARCON(R2)		; Carriage control
	CLRL	BRD$L_SCRDATA(R2)		; Assume no SCREEN
;
; COPY MESSAGE INTO BRD PACKET
;
	MOVAB	BRD$L_DATA(R2),R3	; Set address
	MOVAB	BRD$L_CARCON(R2),R0	; Set address
	BSBW	INSERT			; Call prefix insertion

	MOVC3	4(SP),@8(SP),(R3)	; Insert broadcast message.
	POPL	R2			; Restore R2

	MOVAB	BRD$L_CARCON+2(R2),R0	; Set address
	BSBW	INSERT			; Call suffix insertion

	CMPL	#4,(AP)			; Full argument list ?
	BNEQ	35$			; Branch if no
	BBC	#BRDCST$V_SCREEN,-
		FLAGS(AP),35$ 		; Branch if no SCREEN specified
;
; INSERT SCREEN MESSAGE
;
	MOVL	R3,BRD$L_SCRDATA(R2)	; Set address
	MOVW	R8,BRD$W_SCRLENGTH(R2)	; Set length
	MOVL	SP,R7			; Get message descriptor
	PUSHL	R3			; Current end of string
	MOVL	FLAGS(AP),R3		; Flags parameter
	CALLS	#1,W^SCREEN		; Set up SCREEN
	BLBS	R0,32$			; Branch if no FAO error
	BRW	19$			; Branch to exit

32$:	SUBL3	R3,#PREFIX_LEN,R3	; Difference between maximum prefix
	SUBW2	R3,BRD$W_SCRLENGTH(R2)	;   and prefix for this message
;
; LOCK THE I/O DATA BASE
;
35$:
	ADDL2	#8,SP			; POP DESCRIPTOR OFF STACK
	MOVL	R2,R7			; GET BLOCK ADDRESS
	MOVL	(SP),R4			; RESTORE PCB ADDRESS
	BSBW	SCH$IOLOCKW		; LOCK I/O DATABASE FOR WRITE ACCESS
;
; SEPARATE SINGLE DEVICE SEARCH FROM MULTIPLE DEVICE AND ACCESS CHECK
; TERMINAL DESCRIPTOR (IF NEEDED)
;
	MOVL	TERM(AP),R8		; GET DESC ADDRESS, SET CONDITION CODE
	BEQL	50$			; IF EQL THEN ALL TERMS
	IFNORD	#8,(R8),43$		; TEST DESCRIPTOR FOR READ ACCESS
	PUSHL	4(R8)			; BUILD DESCRIPTOR ON STACK
	MOVZBL	(R8),-(SP)		;
	BEQL	48$			; IF EQL, ALL ALLOCATED TERMS 
	IFNORD	(SP),@4(SP),42$		; TEST BUFFER FOR READ ACCESS

;
; DO A SINGLE TERMINAL BROADCAST
;
	MOVL	SP,R1			; ADDRESS DESC
	BSBW	IOC$SEARCHDEV		; FIND THE UCB AFTER LOGICAL NAME SEARCH
	ADDL	#8,SP			; REMOVE ARG DESC
	BLBC	R0,45$			; BR IF ERROR
	MOVL	R1,R5			; COPY UCB ADDRESS
;
; Search up process tree to see if owner
;
	MOVL	R4,R1			; COPY PCB ADDRESS
	MOVL	UCB$L_PID(R5),R2	; COPY OWNER PID
37$:	CMPL	PCB$L_PID(R1),R2	; OWNER?
	BEQL	40$			; IF EQL THEN OPERATION ALLOWED
	MOVZWL	PCB$L_OWNER(R1),R1	; GET CREATOR PROCESS INDEX
	BEQL	38$			; IF ZERO THEN NONE
	MOVL	@L^SCH$GL_PCBVEC[R1],R1	; GET ADDRESS OF CREATOR PCB
	BRB	37$			; LOOP
;
; Not owner, must have OPER privilege
;
38$:	MOVZWL	#SS$_NOPRIV,R0		; ASSUME NO PRIV
	IFNPRIV	OPER,45$		; IF NOT PRIVLEGED USER THEN NO ACCESS
;
; Either owner or have privilege
;
40$:	BBC	#DEV$V_TRM,UCB$L_DEVCHAR(R5),45$; TERMINAL?
	BBC	#UCB$V_ONLINE,UCB$W_STS(R5),45$; ONLINE?
;
; OK to send broadcast
;
	INSQUE	(R7),@W^IOC$GQ_BRDCST+4
	BSBW	START_BROADCAST		; Start a broadcast.
	BRB	90$			; CONTINUE (don't check error here)
;
; ERROR IN PROCESSING AFTER MUTEX LOCK, BUT BEFORE INSQUE
;

42$:	ADDL2	#8,SP			; CLEAN OFF STACK
43$:	MOVZWL	#SS$_ACCVIO,R0		; INDICATE ACCESS VIO.

45$:	POPL	R4			; RESTORE PCB ADDRESS
	PUSHL	R0			;
	BSBW	SCH$IOUNLOCK		; UNLOCK THE MUTEX
	BRW	110$			; CONTINUE
;
; MULTIPLE BROADCAST
;

48$:	ADDL2	#8,SP			; CLEAN OFF STACK

50$:	MOVZWL	#SS$_NOPRIV,R0		; SET NO PRIV FOR OPERATION
	IFNPRIV	OPER,45$		; BR IF NOT PRIV USER
	
	INSQUE	(R7),@W^IOC$GQ_BRDCST+4;
	MOVAB	L^IOC$GL_DEVLIST-DDB$L_LINK,R6; ADDRESS DEVICE LIST
;
; Loop through DDB's
;
55$:	MOVL	DDB$L_LINK(R6),R6	; LINK TO DDB
	BEQL	85$			; IF EQL THEN DONE
	MOVAL	DDB$L_UCB-UCB$L_LINK(R6),R5; GET FIRST UCB ADDRESS LIST
;
; Loop through UCB's
;
60$:	MOVL	UCB$L_LINK(R5),R5	; LINK TO UCB
	BEQL	55$			; IF EQL THEN TRY NEXT DDB
	BBC	#DEV$V_TRM,UCB$L_DEVCHAR(R5),55$; TERMINAL?
	BBC	#UCB$V_ONLINE,UCB$W_STS(R5),60$; ONLINE?

	TSTW	UCB$W_REFC(R5)		; Is terminal allocated?
	BNEQ	70$			; Yes. Output message.
	TSTL	R8			; Is the message for all terms?
	BNEQ	60$			; No. Don't broadcast to it.
	BBS	#TT2$V_AUTOBAUD,-
		UCB$L_TT_DEVDP1(R5),60$ ; Branch if autobaud
;
; Terminal OK, Send packet to driver
;
70$:					; Start the broadcast.
	BSBB	START_BROADCAST		; Start a broadcast.
	CMPW	#SS$_DEVOFFLINE,R0	; Was message refused
	BEQL	60$			; Branch if yes
	BLBS	R0,60$			; Continue if no other errors
	BRB	90$			; Error has occured
;
; END OF MULTIPLE SEARCH
;
85$:	MOVZBL	#SS$_NORMAL,R0		;
;
; Release I/O data base.
;
90$:	POPL	R4			; RESTORE PCB ADDRESS
	PUSHL	R0			; SAVE STATUS
	BSBW	SCH$IOUNLOCK		; UNLOCK DATA BASE
;
; Wait until broadcast though
;
95$:	MOVPSL	R0			; SAVE PSL
	SETIPL	#IPL$_SYNCH		; RAISE TO INTERLOCK

	TSTW	BRD$W_REFC(R7)		; Any terminals still using this
					; broadcast message?
	BEQL	100$			; IF EQL THEN DONE OR ERROR
;
; SET PROCESS INTO RESOURCE WAIT
;
	PUSHL	R0			; PUT PSL ON STACK
	MOVL	#RSN$_BRKTHRU,R0	; GET RESOURCE NUMBER
	BSBW	SCH$RWAIT		; WAIT ON THE RESOURCE
	BRB	95$			; SEE IF RESOURCE IS ACTUALLY AVAIL.

100$:	REMQUE	(R7),R7			; REMOVE BLOCK FROM LIST

110$:	MOVL	R7,R0			; GET ADDRESS OF BLOCK
112$:	BSBW	EXE$DEANONPAGED		; DEALLOCATE THE BLOCK
115$:	POPL	R0			; RESTORE STATUS
	SETIPL	#0
	RET				; CONTINUE

	.SBTTL	START_BROADCAST - Creates and starts a write buffer.

;
; START_BROADCAST
;
; Functional description:
;
;	Allocates a write buffer packet. Initializes its fields and
;	calls a routine in SYSQIOREQ to pass the packet to the driver.
;
;	The format of the write packet is as follows:
;
;				-------------------------------
;	tty$l_wb_flink:		|       forward link          |
;				-------------------------------
;	tty$l_wb_blink:		|       backward link         |
;	tty$w_wb_size:		-------------------------------
;	tty$b_wb_type:		| fipl | type | size of block |
;	tty$b_wb_fipl:		-------------------------------
;	tty$l_wb_next:		|  address of start of data   |
;				-------------------------------
;	tty$l_wb_end:		|   address of end of data    |
;				-------------------------------
;	tty$l_wb_irp:		|              0              |
;				-------------------------------
;	tty$l_wb_retaddr:	|  address of return fork rtn |
;				-------------------------------
;
; Inputs:
;
;	R5	- address of the terminal's UCB
;	R7	- address of broadcast descriptor block
;
; Outputs:
;
;	R0	-  SS$_NORMAL if success
;	        or SS$_DEVOFFLINE, device is offline
;		  otherwise error return from EXE$ALLOCBUF
;	R5	- address of the UCB
;
;	Preserves R6 and R7.
;	Destroys R1,R2,R3.
;
;--

START_BROADCAST:

;
; Set up remainder of BRD packet with terminal specific info for mailing
;
	PUSHR	#^M<R4,R5>		; Save registers
	MOVW	UCB$W_UNIT(R5),BRD$W_TRMUNIT(R7) ; Set unit number
	MOVL	UCB$L_DDB(R5),R1	; Get address of DDB
	EXTZV	#0,#4,DDB$T_NAME(R1),R2	; Get length of name (limit to 15)
	INCL	R2			; Include byte count in size
	MOVC5	R2,DDB$T_NAME(R1),#0,-
		#BRD$C_TRMNAME_LEN,-
		BRD$T_TRMNAME(R7)	; Copy terminal name, fill with zeroes
	POPR	#^M<R4,R5>		; Restore registers
;
; Test for broadcast to mailbox
;
	CLRL	R0			; Assume no mailbox to send to
	BBC	#TT2$V_BRDCSTMBX,-
		UCB$L_TT_DEVDP1(R5),10$ ; Branch if not allowed
	TSTL	UCB$L_AMB(R5)		; Get address of associated mailbox
	BEQL	10$			; Branch if none
;
; Send broadcast to assoicated mailbox
;
	PUSHR	#^M<R3,R4,R5>		; Save registers
	MOVZWL	BRD$W_MSGLENGTH(R7),R3	; Get length of message
	ADDL2	#22,R3			; Add mailbox prefix overhead
	MOVAB	BRD$W_TRMMSG(R7),R4	; Set address of mailbox message
	MOVL	UCB$L_AMB(R5),R5	; Set address of mailbox UCB

	JSB	G^EXE$WRTMAILBOX	; Send message
	POPR	#^M<R3,R4,R5>		; Restore registers
	BLBS	R0,10$			; branch if no error sending to mailbox
	CLRL	R0			; Set error
;
; Allocate a write packet to point to the broadcast message. Return
; with error if no pool available.
;
10$:	PUSHL	R0			; Save status of mailbox output
	MOVZBL	#IRP$K_LENGTH,R1	; Get length of a standard
					; I/O request packet.
	BSBW	EXE$ALLOCBUF		; Allocate a buffer header.
	BLBS	R0,20$			; Branch if no error.
	TSTL	(SP)+			; Get rid of mailbox status
	RSB				; Exit
;
; Address of write buffer packet is in R2. Set up the write packet.
;

20$:	MOVL	R1,TTY$W_WB_SIZE(R2)	; Insert block size.
	MOVB	#DYN$C_TWP,-		; Write a block type in the
		TTY$B_WB_TYPE(R2)	; type field.
	MOVB	#IPL$_QUEUEAST,-	; Set fork IPL for a later
		TTY$B_WB_FIPL(R2)	; fork back to EXE$BRDCSTCOM.
	CLRL	TTY$L_WB_IRP(R2)	; Clear IRP address.
	MOVAB	G^EXE$BRDCSTCOM, -
		TTY$L_WB_RETADDR(R2)	; Set return fork address
;
; Check if SCREEN message should be sent
;
	CLRL	TTY$L_WB_FR3(R2)	; Assume no REFRESH of read
	CMPL	#4,(AP)			; Full parameter list?
	BNEQ	50$			; Branch if no.
	BBC	#BRDCST$V_SCREEN,-
		FLAGS(AP),40$ 		; Branch if no SCREEN specified
	BBC	#TT2$V_DECCRT,-
		UCB$L_TT_DEVDP1(R5),40$	; Branch if terminal not DEC crt
;
; Send SCREEN message
;	
	MOVL	BRD$L_SCRDATA(R7),-	; Insert address of broadcast
		TTY$L_WB_NEXT(R2)	; message.
	MOVZWL	BRD$W_SCRLENGTH(R7),R3	; Get length of message.
	BRB	70$
;
; Send standard non-SCREEN message
;
40$:	BBS	#BRDCST$V_REFRSH,-
		FLAGS(AP),60$		; Branch if no refresh specified
50$:	MOVL	#1,TTY$L_WB_FR3(R2)	; Set REFRESH of read
60$:	MOVAB	BRD$L_DATA(R7),-	; Insert address of broadcast
		TTY$L_WB_NEXT(R2)	; message.
	MOVZWL	BRD$W_MSGLENGTH(R7),R3	; Get length of message.
70$:	ADDL3	R3,TTY$L_WB_NEXT(R2),-	; Calculate address of last
		TTY$L_WB_END(R2)	; character+1 in message.
	MOVL	R2,R3			; Set up packet address.

;
; Send the packet to the driver associated with this terminal via the
; driver's alternate start I/O entry point.
;

	DSBINT	#IPL$_QUEUEAST		; Raise to fork IPL.
	PUSHL	R3			; Save address of packet.
	BSBW	EXE$ALTQUEPKT		; Start the broadcast.
	POPL	R0			; Restore packet address.

;
; If the driver did not want the broadcast message, deallocate the
; packet and then return with success to EXE$BRDCST.
; TTY$L_WB_END will have one of the following:
;
; 	System address:	indicates accepted by TTDRIVER as broadcast
;	1:		indicates accepted by RTTDRIVER
; 	0:		indicates rejected by either
;
	TSTL	TTY$L_WB_END(R0)	; Did terminal want message?
	BLSS	90$			; Yes
	BEQL	80$			; No, refused by either driver
;
; RTTDRIVER has accepted broadcast but will not need TWP or BRD
;
	BSBW	EXE$DEANONPAGED		; No. Deallocate packet.
	BRB	110$			; Return with success

80$:	BSBW	EXE$DEANONPAGED		; No. Deallocate packet.
	MOVZWL	#SS$_DEVOFFLINE,R0	; Set error
	BRB	120$			; Exit

;
; The driver took the packet. Increment the usage count of this
; broadcast descriptor block. Then return with a success code.
; TWP will be deallocated in EXE$BRDCSTCOM.
;

90$:	INCW	BRD$W_REFC(R7)		; Record use of broadcast.
110$:	MOVZWL	#SS$_NORMAL,R0		; Set success status code.

120$:	ENBINT				; Lower IPL.
	TSTL	(SP)+			; Check mailbox status
	BEQL	130$			; branch if zero
	MOVZWL	#SS$_NORMAL,R0		; Set success status code.
130$:	RSB				; Return to caller.


	.SBTTL	EXE$BRDCSTCOM - Release resource holding up process.

;++
; EXE$BRDCSTCOM - release breakthrough resource so system service can exit
;
; Functional description:
;
;	This routine checks to see whether the broadcast message has
;	been output to all terminals that should output it. If all are
;	done, then the routine releases the breakthrough resource so
;	that the system service regains control.
;
;	The routine executes at driver fork IPL. This implies that all
;	terminal drivers must execute at the same IPL.
;
; Inputs:
;
;	R3	- address of end of message string output
;	R5	- address of buffer block
;
; Outputs:
;
;	The routine destroys R0-R2, R4.
;
;--

EXE$BRDCSTCOM::
	MOVL	R5,R0			; Get address of header block.
	PUSHR	#^M<R3>			; Save end of message address.
	BSBW	EXE$DEANONPAGED		; Deallocate the block.
	POPR	#^M<R3>			; Restore end message address.
	MOVAB	W^IOC$GQ_BRDCST,R1	; Get broadcast queue entry.
	MOVL	R1,R2			; Save first entry.

10$:					; Loop to find queue entry for
					; this broadcast message.
	MOVL	BRD$L_FLINK(R1),R1	; Get next entry.
	CMPL	R1,R2			; See if at end of queue.
	BEQL	30$			; Branch out of loop.
	MOVAB	BRD$L_DATA(R1),R0	; Get address of this message.
	MOVZWL	BRD$W_MSGLENGTH(R1),R4	; Get length of message.
	ADDL	R4,R0			; Calculate end address + 1.
	CMPL	R3,R0			; Is this the right message?
	BEQL	15$
; Try the SCREEN MESSAGE
	MOVL	BRD$L_SCRDATA(R1),R0	; Get address of this message.
	BEQL	10$			; Branch if none
	MOVZWL	BRD$W_SCRLENGTH(R1),R4	; Get length of message.
	ADDL	R4,R0			; Calculate end address + 1.
	CMPL	R3,R0			; Is this the right message?
	BNEQ	10$			; No. Try the next.
15$:	DECW	BRD$W_REFC(R1)		; Yes. Decrement ref count.
	BNEQ	20$			; If not down to zero, just
					; return. Someone else will
					; deallocate the block.
	MOVZBL	#RSN$_BRKTHRU,R0	; Specify resource to release.
	JMP	G^SCH$RAVAIL		; Declare resource available.
					; This code RSBs when done.

20$:	BLSS	30$			; Bugcheck if refcount negative; else
					; just return without releasing
	RSB				; breakthrough resource.

30$:					; Should not get here.
	BUG_CHECK -			; Bugcheck because the entry
		BRDMSGLOST		; associated with this message
	RSB				; was not in the broadcast
					; queue.

.SBTTL	INSERT - Module to insert prefix and suffix characters

;
; This module was modeled after the routine in TTDRIVER
;

;
; R0 = Address of carriage control
; R2 = BRD block
; R3 = character beffer address
;

INSERT:	MOVZBL	(R0),R1			; Get number of characters
	BEQL	30$			; If EQL then none
	MOVB	1(R0),(R3)+		; Insert character
	BNEQ	30$			; If NEQ then done
	MOVB	#^X0D,-1(R3)		; Insert carriage return
	INCW	BRD$W_MSGLENGTH(R2)	; Increment count (see note below *)
20$:	MOVB	#^X0A,(R3)+		; Insert LF
	SOBGTR	R1,20$			; Loop until donw
30$:	RSB				; Return

;
; * This is an increment which is not included in the check of buffer
;   quota or the allocation of the buffer. A one or two byte error
;   in the buffer quota will be tolerated here, and the BRD$L_DATA field
;   is already 4 bytes longer than calculated BRD size, so this
;   allows for the extra CR's.
;


.SBTTL	SCREEN - SCREEN terminal message format routine
;+
; SCREEN - Format an SCREEN broadcast message and copy into BRD.
;
; INPUTS:
;	(AP) - Address of where to move message
;	R3   - Flags parameter
;	R7   - Address of message descriptor
;
; OUTPUTS:
;	R3 - Size of prefix escape sequence
;	preserves R2,R4,R5,R6,R8
;
;-

SCREEN:	.WORD	^M<R2,R4,R5,R6,R8>

	MOVZBL	R3,R4			; Number of blank lines
	MOVZBL	#80,R5			; Assume top of page
	MOVL	#1,R6			;   "
	MOVL	R6,R8			;   "
	BBC	#BRDCST$V_BOTTOM,R3,10$	; Branch if top
	SUBL3	R4,#24,R4		; 24 - lines
	INCL	R4			; + 1
	MOVL	R4,R8			;
	MOVL	#1,R5			;
	CLRL	R6			;

10$:	SUBL2	#LOCAL_SIZE,SP		; Allocate storage from stack
	MOVL	SP,R2			; Pointer
	MOVL	#PREFIX_LEN,DESC(R2)	; Count for descriptor
	MOVAL	PREFIX_OUTPUT(R2),DESC+4(R2) ; Address for descriptor

	$FAO_S	CTRSTR = PREFIX, -
		OUTBUF = DESC(R2), -
		OUTLEN = DESC(R2), -
		P1 = R4,-
		P2 = R5,-
		P3 = R6,-
		P4 = R8
	BLBC	R0,20$
	
	MOVAL	DESC(R2),R2		; Set address
	MOVL	(R2),R6			; Save length (return parameter)
	MOVC3	(R2),@4(R2),@4(AP)	; Move in prefix
	MOVC3	(R7),@4(R7),(R3)	; Move in message
	MOVW	#^X0381B,(R3)		; Move in <ESC>8 suffix
	MOVL	#1,R0			; Set success

20$:	ADDL2	#LOCAL_SIZE,SP		; Restore stack pointer

	MOVL	R6,R3			; Prefix message size from FAO
	RET				; Return


	.SBTTL	End of module

	.END

