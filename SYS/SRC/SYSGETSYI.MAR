	.TITLE	SYSGETSYI - GET SYSTEM INFORMATION SYSTEM SERVICE
	.IDENT	'V03-006'
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************

;++
; FACILITY: VMS Executive, System services.
;
; ABSTRACT:
;
;	Return processor information to caller, specifically
;	processor ID register, processor type, and VMS version number.
;
; ENVIRONMENT: Kernel Mode
;
; AUTHOR: John A. Ywoskus,	 CREATION DATE: 06-August-1981
;
; MODIFIED BY:
;
;	V03-006	MSH0001		Maryann Hinden		23-Mar-1982
;		Fix broken BSBW.
;
;	V03-005	JAY0006		John A. Ywoskus		17-Mar-1982
;		Change SS$_EXQUOTA return error to SS$_EXASTLM.
;
;	V03-004 JAY0005		John A. Ywoskus		21-Jan-1982
;		Return 8 bytes for system version instead of 4.
;		General cleanup.
;
;	V02-003	LJK0082		Lawrence J. Kenah	11-Nov-1981
;		Write accessibility of multiple page buffer can
;		now be done on global routine. 
;
;	V03-002 JAY0004		John A. Ywoskus		05-Oct-1981
;		Add null arguments so call list is compatable with
;		$GETJPI. Also, make external references be 
;		addressed with G^, and include VA and PSL defs.
;
;	V03-001	JAY0003		John A. Ywoskus		08-Sep-1981
;		Fix null item bug, make return length optional.
;--
;
	.PAGE
	.SBTTL	DECLARATIONS
	$PSLDEF				; define processor status register
	$PRDEF				; define processor registers
	$PCBDEF				; define processor control block
	$SSDEF				; define status codes
	$SYIDEF				; define GETSYI item identifiers
	$VADEF				; virtual addressing definitions

;
; EQUATED SYMBOLS:
;

	EFN	 = 4			; event flag number argument
	NULLARG1 = 8			; first null argument
	NULLARG2 = 12			; second null argument
	ITMLST	 = 16			; address of item identifiers
	IOSB	 = 20			; I/O status block address
	ASTADR	 = 24			; ast routine address
	ASTPRM	 = 28			; ast parameter
	MAXSTRUC = 2 			; maximum structure code

;

	MAX_SFW_ITEM = <SYI$_LASTSFW&^XFF>-1	; maximum SFW item number
	MAX_HDW_ITEM = <SYI$_LASTHDW&^XFF>-1	; maximum HDW item number

;
; OWN STORAGE:
;

	.PSECT	YEXEPAGED


;
; This array contains the maximum item number for each of the two
; item data structures, indexed by structure number.
;
MAXCOUNT:
	.BYTE	MAX_SFW_ITEM
	.BYTE	MAX_HDW_ITEM

	.PAGE
	.SBTTL	SYSGETSYI - GETSYI main program

;++
;
; FUNCTIONAL DESCRIPTION:
;
;	This service allows a process to receive status and identification
;	information about the system on which the calling process is running.
;	
; CALLING SEQUENCE:
;
;	CALLS/CALLG
;
; INPUTS:
;
;	EFN(AP) = number of the event flag to set when all of the requested
;		  data is valid. 
;	NULLARG1(AP) = null argument, reserved for future use. Ignored.
;	NULLARG2(AP) = null argument, reserved for future use. Ignored.
;	ITMLST(AP) = address of a list of item descriptors of the form:
;
;		+-----------------------------+
;		!  ITEM CODE   !  BUF. LENGTH !
;		+-----------------------------+
;		!      BUFFER ADDRESS         !
;		+-----------------------------+
;		!  ADDRESS TO RETURN LENGTH   !
;		+-----------------------------+
;
;	IOSB(AP) = address of a quadword I/O status block to receive final
;		status
;	ASTADR(AP) = address of an AST routine to be called when all of the
;		requested data has been supplied.
;	ASTPRM(AP) = 32 bit ast parameter
;
; IMPLICIT INPUTS:
;
;	none
;
; OUTPUTS:
;
;	none
;
; IMPLICIT OUTPUTS:
;
;	none
;
; ROUTINE VALUE:
;
;	SS$_NORMAL -> normal completion
;	SS$_EXASTLM -> AST quota exceeded
;	SS$_ACCVIO -> ITMLST can not be read by the calling access mode,
;			or the return buffer or return length word can not
;			be written by the calling access mode
;	SS$_BADPARAM -> an invalid item identifier was supplied
;
; SIDE EFFECTS:
;
;	none
;--

	.ENTRY	EXE$GETSYI,^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>

;
; Check for and clear possible IOSB
;
	MOVL	IOSB(AP),R1		; get IOSB address
	BEQL	3$			; branch if none
	IFNOWRT	#8,(R1),30$		; check write access to it
	CLRQ	(R1)			; clear IOSB
;
; Check for and clear event flag
;
3$:	MOVZBL	EFN(AP),R3		; get event flag number
	JSB	G^SCH$CLREF		; clear event flag
	BLBC	R0,GRET			; and return on errors
;
; Validate AST, if present
;
	TSTL	ASTADR(AP)		
	BEQL	5$			; no AST to check
	MOVL	G^CTL$GL_PCB,R4		; get our PCB address
	TSTW	PCB$W_ASTCNT(R4)	; is AST quota exceeded?
	BLEQ	40$			; branch if so and return error
;
; Loop through item descriptors, validating the requested item
; identifiers and moving accessible items. A zero item identifier
; terminates the list.
;
5$:	MOVL	ITMLST(AP),R5		; get item descriptor list address
	BEQL	50$			; ITMLST not optional
	IFNORD	#4,(R5),30$		; check first longword readable
10$:					; top of item-get loop
	MOVZWL	(R5)+,R6		; get buffer size
	MOVZWL	(R5)+,R1		; get item identifier
	BEQL	60$			; done if zero, take normal exit
	IFNORD	#12,(R5),30$		; check rest of this descriptor ...
					; plus first longword of next one
	MOVQ	(R5)+,R7		; R7 = buffer address, R8 = length address
	PUSHL	R1			; save R1 across accessibility check
	MOVL	R7,R0			; buffer address to R0
	MOVL	R6,R1			; and size to R1
	CLRL	R3			; PROBE will use PSL<PRVMOD>
	JSB	EXE$PROBEW		; check write accessibility of buffer
	BLBC	R0,30$			; buffer not accessible
	POPL	R1			; restore R1 for use by CHECKITEM
	PUSHL	R5			; save R5 across item check
	BSBW	CHECKITEM		; check item's validity
	BLBC	R0,50$			; return error if not valid
	BSBW	PUTDATA			; put the item requested in user buffer
	POPL	R5			; unsave R5
	BLBS	R0,10$			; continue on success
					; else have had an access violation
;
; Error/success dispatch points:
;
30$:	MOVZWL	#SS$_ACCVIO,R0		; access violation
	BRB	GRET			; terminate service below
40$:	MOVZWL	#SS$_EXASTLM,R0		; AST quota exceeded
	BRB	GRET			; terminate service below
50$:	MOVZWL	#SS$_BADPARAM,R0	; illegal item or request
	BRB	GRET			; terminate service below
60$:	MOVZWL	#SS$_NORMAL,R0		; normal return
;
; Set the event flag, post completion status, and declare completion AST
;
GRET:	PUSHL	R0			; save completion status
	MOVL	G^CTL$GL_PCB,R4		; get PCB address
	MOVL	PCB$L_PID(R4),R1	; get process's PID
	CLRL	R2			; set null priority increment
	MOVZBL	EFN(AP),R3		; get event flag number to set
	JSB	G^SCH$POSTEF		; set the event flag
10$:	MOVL	IOSB(AP),R1		; get address of IOSB
	BEQL	20$			; branch if none
	IFNOWRT	#8,(R1),20$		; check if writable
	MOVL	(SP),(R1)		; store completion status
20$:	MOVL	ASTADR(AP),R5		; get address of AST routine
	BEQL	30$			; branch if none specified
	MOVPSL	R4			; get PSL
	EXTZV	#PSL$V_PRVMOD,#PSL$S_PRVMOD,R4,R4 ; extract previous mode
	$DCLAST_S (R5),ASTPRM(AP),R4	; queue the completion AST
30$:	POPL	R0			; restore completion status
	RET				; and return.

	.PAGE
	.SBTTL	CHECKITEM - Validate item identifier

;++
;
; FUNCTIONAL DESCRIPTION:
;
;	Routine to validate item identifier and return information
;	about the item.
;
; CALLING SEQUENCE:
;
;	JSB/BSB
;
; INPUTS:
;
;	R1 = item identifier
;
; IMPLICIT INPUTS:
;
;	none
;
; OUTPUTS:
;
;	R1 = item identifier
;	R2 = structure number
;	R3 = item type code
;
; IMPLICIT OUTPUTS:
;
;	none
;
; ROUTINE VALUE:
;
;	R0 low bit clear -> successful return
;	R0 low bit set -> invalid item identifier
;
; SIDE EFFECTS:
;
;	none
;--

CHECKITEM:
	CLRL	R0			; assume error
	MOVZBL	R1,R3			; get item number
	EXTZV	#8,#8,R1,R2		; get structure number
	BEQL	100$			; error if structure number zero
	CMPB	R2,#MAXSTRUC		; structure number valid?
	BGTRU	100$			; error if not
	CMPB	R3,MAXCOUNT-1[R2]	; check max item values
	BGTRU	100$			; error if illegal item number
	INCL	R0			; else no error
100$:	RSB				; return to caller

	.PAGE
	.SBTTL	PUTDATA - Put requested data in user buffer

;++
;
; FUNCTIONAL DESCRIPTION:
;
;	This routine moves the requested data to the user's buffer and
;	returns the actual data length to the user. It assumes that the
;	user's buffer has been probed.
;
; CALLING SEQUENCE:
;
;	JSB/BSB
;
; INPUTS:
;
;	R1 = item identifier
;	R2 = structure number
;	R3 = item type code
;	R6 = buffer size
;	R7 = buffer address
;	R8 = return length address
;
; IMPLICIT INPUTS:
;
;	none
;
; OUTPUTS:
;
;	none
;
; ROUTINE VALUE:
;
;	R0 low bit set -> success
;	R0 low bit clear -> access violation on write of length
;
; SIDE EFFECTS:
;
;	R2 thru R5 and R9 thru R11 are destroyed
;
;--
PUTDATA:
	MOVL	SP,R11			; save SP
	CASE	R2, 	       -	; dispatch on structure
			<10$,  - 	; structure = software
			 20$>B - 	; structure = hardware
		,#1

10$:	CASE	R3, - 
			<100$>B - 	; item = VMS version number
		,#0

100$:	MOVQ	G^SYS$GQ_VERSION,-(SP)	; copy VMS version number to stack
	MOVL	#8,R9			; get version number size
	BRB	1000$			; finish up below

20$:	CASE	R3, 		-	; dispatch on item type 
			<200$,  -	; CPU type
			 210$>B -	; SID register
		,#0

200$:	MFPR	#PR$_SID,R10		; get system ID register
	EXTZV	#PR$V_SID_TYPE, - 	; get CPU type code
		#PR$S_SID_TYPE,R10,-(SP)
	MOVL	#1,R9			; one byte long
	BRB	1000$			; finish up below
210$:	MFPR	#PR$_SID,-(SP)		; get system ID register
	MOVL	#4,R9			; and size

1000$:	MOVC5	R9,(SP),#0,R6,(R7)	; move it to user buffer
	MOVL	R11,SP			; restore SP

	TSTL	R8			; return length wanted?
	BEQLU	1020$			; branch if not

	CLRL	R0			; assume error
	IFNOWRT	#2,(R8),2000$		; check accessibility of return length

	CMPL	R9,R6			; see how much was moved
	BLEQU	1010$			; use valid data length if it fit
	MOVL	R6,R9			; else give him "too short" buffer size
1010$:	MOVW	R9,(R8)			; return length to user
1020$:	MOVZWL	#SS$_NORMAL,R0		; flag successful completion	

2000$:	RSB				; return to caller
	.END
