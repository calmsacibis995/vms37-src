	.TITLE	SYSLKWSET - LOCK/UNLOCK FROM WORKING SET/MEMORY
	.IDENT	'V03-001'
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************

;++
; FACILITY:
;
; ABSTRACT:
;
; ENVIRONMENT:
;
; AUTHOR: PETER H. LIPMAN	, CREATION DATE: 24-APR-78
;
; MODIFIED BY:
;
;	V03-001	HRJ0058		Herb Jacobs		14-Mar-1982
;		Fix saving of IPL after MMG services work area.
;
;	V02-008	LJK0135		Lawrence J. Kenah	18-Feb-1982
;		Fix compare-and-branch logic for edge condition.
;
;	V02-007	HRJ0054		Herb Jacobs		17-Feb-1982
;		When locking a page into the working set, account for
;		page table also becoming locked, that is 2 dynamic
;		entries are needed.
;
;	V02-006	HRJ0047		Herb Jacobs		18-Jan-1982
;		Fixes for not allowing locking of more pages in working
;		set than quota, and for not returning locked portion of
;		working set full when working set is smaller than quota.
;
;	V02-005	LJK0030		Lawrence J. Kenah	27-May-1981
;		Replace all PFN references to FLINK and BLINK with
;		the PFN_REFERENCE macro to support large physical
;		memory configurations.
;
;	V02-004	LJK0022		Lawrence J. Kenah	19-May-1981
;		Replace CDL$x_ symbols with MMG$x_ symbols. Add $MMGDEF
;		macro. Make these offsets local symbols.
;
;	V02-003	LJK0001		Lawrence J. Kenah	18-Sep-1980 14:10
;		Simply return success if an attempt is made to lock PFN mapped
;		pages or pages located in shared memory.
;
;--

	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;
	$IPLDEF				;PROCESSOR PRIORITY LEVELS
	$MMGDEF				; Offsets from FP into scratch area
	$OPDEF				; Define opcode equivalent values
	$PCBDEF				;PROCESS CONTROL BLOCK DEFINITIONS
	$PFNDEF				;PAGE FRAME NUMBER DATA BASE
	$PHDDEF				;PROCESS HEADER DEFINITIONS
	$PRDEF				;PROCESSOR REGISTER DEFINTIONS
	$PRVDEF				;PRIVILEGE BIT DEFINITIONS
	$PTEDEF				;PAGE TABLE ENTRY DEFINITIONS
	$SSDEF				;SYSTEM STATUS CODE DEFINTIONS
	$VADEF				;VIRTUAL ADDRESS VIELDS
	$WSLDEF				;WORKING SET LIST ENTRY DEFINTIONS
;
; EXTERNAL SYMBOLS:
;
;
; MACROS:
;
;
; EQUATED SYMBOLS:
;
; OFFSET FROM AP
;
	INADR		= 4		;OFFSET TO INPUT RANGE
	RETADR		= 8		;OFFSET TO RETURN RANGE
	ACMODE		= 12		;ACCESS MODE
;
; BIT DEFINITIONS IN R8 CONTROL LONG WORD
;
	_VIELD	LCK,8,<-
		<LCKPAG,,M>,-		;SET IF LOCKING, CLEAR IF UNLOCKING
		<GLOBAL,,M> -		;SET IF GLOBAL PAGE
		>
;
; OWN STORAGE:
;
	.PSECT	$$$210,LONG

MMG$GL_PFNLOCK::
	.LONG	1@30			;DOWN COUNTER OF PAGES REMAINING
					;THAT MAY BE LOCKED IN MEMORY

	.SBTTL	LOCK/UNLOCK PAGES IN WORKING SET/MEMORY
;++
; FUNCTIONAL DESCRIPTION:
;
;	THE LKWSET SYSTEM SERVICE LOCKS THE SPECIFIED RANGE OF PAGES
; INTO THE WORKING SET.  THE PAGES LOCKED ARE NO LONGER CANDIDATES
; FOR PAGE REPLACEMENT AND ARE THUS GUARANTEED RESIDENT IN MEMORY WHEN
; THE PROCESS IS IN THE BALANCE SET.
;	SINCE SOME REASONABLE NUMBER OF DYNAMIC PAGES IS REQUIRED IN ORDER
; TO GUARANTEE THAT AN INSTRUCTION CAN RUN TO COMPLETION, THE NUMBER OF
; PAGES THAT MAY BE LOCKED IN THE WORKING SET IS LIMITED.
;	THE ULWSET SYSTEM SERVICE UNLOCK THE PAGES FROM THE WORKING SET.
;
; CALLING SEQUENCE:
;
;	CALLG	ARGLIST,G^SYS$LKWSET
;	CALLG	ARGLIST,G^SYS$ULWSET
;	CALLG	ARGLIST,G^SYS$LCKPAG
;	CALLG	ARGLIST,G^SYS$ULKPAG
;
; INPUT PARAMETERS:
;
;	INADR(AP) = ADDRESS OF 2 LONG WORDS THE 1ST OF WHICH SPECIFIES
;		THE STARTING VIRTUAL ADDRESS TO LOCK/UNLOCK, THE 2ND SPECIFIES
;		THE ENDING VIRTUAL ADDRESS TO LOCK/UNLOCK (INCLUSIVE).
;	RETADR(AP) = ADDRESS OF A 2 LONGWORD ARRAY INTO WHICH IS RETURNED
;		THE STARTING AND ENDING VIRTUAL ADDRESSES (INCLUSIVE)
;		OF THE PAGES JUST LOCKED/UNLOCKED
;	ACMODE(AP) = THE ACCESS MODE (MAXIMIZED WITH CALLING MODE)
;		ON BEHALF OF WHICH THE LOCK/UNLOCK IS TO BE DONE
;		THIS MODE MUST BE AT LEAST AS PRIVILEGED AS THE MODE
;		OF THE PAGE OWNER.
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	R0 = SYSTEM STATUS CODE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	SS$_WASSET			;PREVIOUS STATE OF LOCK WAS SET
;	SS$_WASCLR			;PREVIOUS STATE OF LOCK WAS CLEAR
;	SS$_ACCVIO			;ACCESS VIOLATION
;	SS$_NOPRIV			;NO PRIVILEGE TO LOCK/UNLOCK PAGE
;	SS$_LKWSETFUL			;LOCKED PORTION OF WORKING SET IS FULL
;	SS$_LCKPAGFUL			;NO MORE PAGES MAY BE LOCKED IN MEMORY
;	SS$_PAGOWNVIO			;PAGE OWNER VIOLATION
;
; SIDE EFFECTS:
;
;	NONE
;
;--

;
; **********************************************************************
;
; **************** THE FOLLOWING CODE MAY BE PAGED *****************
;
	.PSECT	Y$EXEPAGED
;
; **********************************************************************
;
	.ENABL	LSB

	.ENTRY	EXE$ULWSET,^M<R2,R3,R4,R5,R6,R7,R8>

	MOVZBL	#WSL$M_WSLOCK,R8	;UNLOCKING FROM WORKING SET
	BRB	10$

	.ENTRY	EXE$ULKPAG,^M<R2,R3,R4,R5,R6,R7,R8>

	MOVZBL	#WSL$M_PFNLOCK,R8	;UNLOCKING FROM MEMORY
10$:	MOVZWL	#SS$_WASSET,R0		;INIT TO 'PAGES WERE LOCKED'
	SUBL	#-MMG$C_LENGTH,SP	;RESERVE SCRATCH AREA
	SAVIPL				;SAVE CALLERS IPL FOR EXIT
	BRB	30$

	.ENTRY	EXE$LKWSET,^M<R2,R3,R4,R5,R6,R7,R8>

	MOVZBL	#WSL$M_WSLOCK,R8	;LOCKING IN WORKING SET
	BRB	20$

	.ENTRY	EXE$LCKPAG,^M<R2,R3,R4,R5,R6,R7,R8>

	MOVZWL	#SS$_NOPRIV,R0		;ASSUME CANNOT LOCK PAGES IN MEMORY
	IFNPRIV	PSWAPM,45$		;BRANCH IF CANNOT LOCK PAGES IN MEMORY?
	MOVZBL	#WSL$M_PFNLOCK,R8	;LOCKING IN MEMORY
20$:	SUBL	#-MMG$C_LENGTH,SP	;RESERVE SCRATCH AREA
	DSBINT	#IPL$_ASTDEL		;PREVENT SYSTEM WORKING SET GROWTH AST
	BSBB	50$			;SET QUOTA WORKING SET SIZE BEFORE LOCK
25$:	MOVZWL	#SS$_WASCLR,R0		;INIT TO 'PAGES WERE UNLOCKED'
	BBSS	#LCK_V_LCKPAG,R8,30$	;SET LOCK FLAG
30$:	MOVAL	MMG$LCKULKPAG,R6	;ADDRESS OF PAGE LOCK/UNLOCK ROUTINE
	INSV	R0,#16,#16,R8		;INITIAL STATUS IN HIGH 16 BITS
	BSBW	MMG$CRECOM1		;COMMON CREATE CODE
	BLBS	R0,40$			;BRANCH IF SUCCESSFUL
	CMPW	#SS$_LKWSETFUL,R0	;IS THIS LOCKED WORKING SET FULL STATUS
	BNEQ	40$			;BRANCH IF NOT
	BSBB	50$			;REVERIFY SYSTEM DIDN'T SHRINK LIMIT
	BLBS	R2,25$			;BRANCH IF ADJUSTMENT OCCURED
	MOVZWL	#SS$_LKWSETFUL,R0	;RESET ERROR RETURN STATUS
40$:	ENBINT				;RESTORE CALLERS IPL
45$:	RET

50$:	MOVL	G^CTL$GL_PHD,R5		;GET PROCESS HEADER ADDRESS
	CLRL	R2			;ASSUME NO ADJUSTMENT RETURN STATUS
55$:	SUBW3	PHD$W_WSLIST(R5),PHD$W_WSQUOTA(R5),R0 ;GET MAX LOCKABLE SIZE
	INCW	R0			;IN ORIGIN 1
	SUBW	PHD$W_WSSIZE(R5),R0	;GET DIFFERENCE FROM CURRENT SIZE
	BEQL	60$			;BRANCH IF CURRENT SIZE IS QUOTA, R0=0
	CLRL	-(SP)			;NO RETURN SIZE NEEDED
	CVTWL	R0,-(SP)		;FORM ADJUSTMENT SIZE
	CALLS	#2,SYS$ADJWSL		;ADJUST THE WORKING SET SIZE
	BISB	#1,R2			;SET ADJUSTMENT PERFORMED
	BRB	55$			;DO THIS TILL SIZE AT AUTHORIZED QUOTA
60$:	RSB				;R0 LOW BIT INDICATES CHANGE OCCURRED

	.DSABL	LSB

	.SBTTL	UNLOCK GLOBAL PAGE FROM WORKING SET
;
; CALLING SEQUENCE:
;
;	BSBW	MMG$ULKGBLWSLE
;
; INPUTS:
;
;	IPL = SYNCH
;	R1 = WORKING SET LIST INDEX OF ENTRY TO UNLOCK (HIGH 16 BITS = 0)
;	R2 = WORKING SET LIST ENTRY (VA AND PAGE TYPE)
;	R3 = SYSTEM VIRTUAL ADDRESS OF PAGE TABLE ENTRY
;	R4 = PROCESS CONTROL BLOCK ADDRESS
;	R5 = PROCESS HEADER ADDRESS (P1 SPACE OK)
;
; OUTPUTS:
;
;	R2 PRESERVED
;	R8 IS ALTERED
;	PHD$W_WSDYN(R5) = NEW WORKING SET LIST INDEX FOR THE UNLOCKED PAGE
;
; **********************************************************************
;
; **************** THE FOLLOWING CODE MUST BE RESIDENT *****************
;
	.PSECT	$MMGCOD
;
; **********************************************************************
;
MMG$ULKGBLWSLE::
	PUSHL	#IPL$_SYNCH		;SAVE IPL FOR ENBINT TO RESTORE
	MOVQ	R1,-(SP)		;PUSHL VA, PUSHL WSLX
	MOVL	(R3),R0			;GET PAGE TABLE ENTRY
	MOVL	#<SS$_WASSET @16 ! -	;SET UNLOCK PARAMETER
		WSL$M_WSLOCK ! WSL$M_PFNLOCK>,R8 ;IN R8
	BRB	ULKGBLWSLE		;JOIN COMMON LOCK/UNLOCK CODE

	.SBTTL	LOCK/UNLOCK SINGLE PAGE IN WORKING SET/MEMORY
;++
; FUNCTIONAL DESCRIPTION:
;
;
; CALLING SEQUENCE:
;
;	BSBW	MMG$LCKULKPAG
;
; INPUT PARAMETERS:
;
;	R0	  = ACCESS MODE TO CHECK AGAINST PAGE OWNER
;	R2	  = VIRTUAL ADDRESS
;	R4	  = PCB ADDRESS
;	R5	  = PROCESS HEADER ADDRESS - P1 OR SYSTEM SPACE
;	R6	  = COUNT - 1 OF PAGES REMAINING TO  BE DELETED INCLUDING THIS ONE
;	R7	  = +^X200 IF GOING FORWARD IN ADDRESS SPACE
;	  	  = -^X200 IF GOING BACKWARDS IN ADDRESS SPACE
;	R8<0:7>	  = WSL$M_WSLOCK IF LOCKING IN WORKING SET
;		  = WSL$M_PFNLOCK IF LOCKING IN PHYSICAL MEMORY
;		  = EITHER OR BOTH OF THE ABOVE IF UNLOCKING
;	R8<8>	  = LCK_V_LCKPAG SET IF LOCKING, CLEAR IF UNLOCKING
;	R8<16:31> = SS$_WASSET OR SS$_WASCLR
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	R0	  = SYSTEM STATUS CODE (INCLUDING 'WAS SET' BIT IF SUCCESSFUL)
;	R2	  - PRESERVED
;	R8<16:31> = SS$_WASSET IF LOCKING AND THE LOCK HAD ALREADY BEEN SET
;		  = SS$_WASCLR IF UNLOCKING AND THE LOCK HAD ALREADY BEEN CLEAR
;		  - OTHERWISE IT IS PRESERVED.
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	SS$_WASSET			;IF LOCKING, WAS ALREADY LOCKED
;	SS$_WASCLR			;IF UNLOCKING, WAS ALREADY UNLOCKED
;	SS$_ACCVIO			;ACCESS VIOLATION
;	SS$_PAGOWNVIO			;PAGE OWNER VIOLATION
;	SS$_LKWSETFUL			;IF LOCKING, LOCKED PORTION OF WORK SET FULL
;
; SIDE EFFECTS:
;
;	NONE
;
;--

;
; **********************************************************************
;
; **************** THE FOLLOWING CODE MUST BE RESIDENT *****************
;
	.PSECT	$MMGCOD
;
; **********************************************************************
;
	.ENABL	LSB

MMG$LCKULKPAG::
	CLRL	R1			;NO WORKING SET LIST INDEX INPUT
	BBSC	#LCK_V_GLOBAL,R8,15$	;ASSUME NOT A GLOBAL PAGE
15$:	PROBER	#0,#1,(R2)		;IS THIS PAGE ACCESSIBLE?
	BNEQ	30$			;BRANCH IF YES
	MOVZWL	#SS$_ACCVIO,R0		;ACCESS VIOLATION IF NOT
	RSB
30$:	TSTB	(R2)			;FAULT THE PAGE INTO THE WORKING SET
;
; R0 = ACCESS MODE FOR PAGE OWNER CHECK
; R1 = 0 INDICATING NO INPUT WORKING SET LIST INDEX
; R2 = VIRTUAL ADDRESS
;
	DSBINT	#IPL$_SYNCH		;RAISE TO SYNCH TO INTERLOCK PFN DATA
					;PUSHING CALLERS IPL
	PUSHR	#^M<R0,R1,R2>		;PUSH VA, LOCK/UNLOCK FLAG, ACCESS MODE
	BSBW	MMG$SVAPTECHK		;RETURN R3 = SYS VA OF PAGE TABLE ENTRY
	MOVL	(R3),R0			;R0 = PAGE TABLE ENTRY
	BLSS	50$			;BRANCH IF IT'S VALID
;
; PAGE NOT VALID!!  MUST HAVE SWAPPED JUST AFTER TOUCHING IT, TRY AGAIN
;
	POPR	#^M<R0,R1,R2>
	ENBINT				;SO WE CAN FAULT IT AGAIN
	BRB	30$			;TOUCH THE PAGE AGAIN

40$:	MOVZWL	#SS$_PAGOWNVIO,R0	;PAGE OWNER VIOLATION
	BRB	44$
42$:	MOVZWL	#SS$_NOPRIV,R0		;NO PRIVILEGE
44$:	BRW	110$
;
; THIS PAGE IS NOW VALID AND IN THE WORKING SET
;

47$:	MOVZWL	#SS$_WASSET,R0		;Successful return path for shared
	BRW	110$			; memory and PFN mapped pages

50$:	CMPZV	#PTE$V_OWN,#PTE$S_OWN,R0,(SP)+ ;CHECK PAGE OWNERSHIP
	BLSS	40$			;BRANCH IF OWNER VIOLATION
ULKGBLWSLE:
	BBS	#PTE$V_WINDOW,R0,47$	;Return success for PFN mapped pages
	EXTZV	#PTE$V_PFN,#PTE$S_PFN,R0,R0 ;R0 = PAGE FRAME NUMBER
	CMPL	R0,MMG$GL_MAXPFN	;Check for page in shared memory
	BGTRU	47$			;Return success for such pages
	SUBL	PHD$L_P0BR(R5),R3	;BYTE OFFSET OF PAGE TABLE ENTRY
	ASHL	#-9,R3,R2		;BYTE INDEX OF CONTAINING PAGE TABLE

	ASSUME	PFN$C_PROCESS EQ 0
	ASSUME	PFN$C_SYSTEM  EQ 1
	ASSUME	PFN$C_GLOBAL  EQ 2
	ASSUME	PFN$C_GBLWRT  EQ 3
	ASSUME	PFN$C_PPGTBL  EQ 4
	ASSUME	PFN$C_GPGTBL  EQ 5

	EXTV	#PFN$V_PAGTYP,#PFN$S_PAGTYP,- ;SEE IF PAGE IS A TYPE
		@W^PFN$AB_TYPE[R0],R1	;THAT CAN BE LOCKED
	BEQL	56$			;PROCESS PAGES MAY BE LOCKED
	BBSS	#LCK_V_GLOBAL,R8,52$	;PAGE IS GLOBAL (OR ERROR)
52$:	CMPL	R1,#PFN$C_GLOBAL	;SEE IF PAGE IS GLOBAL OR GLOBAL WRITE
	BEQL	54$			;BRANCH IF GLOBAL READ ONLY
	BLSS	42$			;BRANCH IF PAGE TYPE NOT LOCKABLE
;
; PAGE IS GLOBAL WRITE, MAY BE LOCKED IN MEMORY, BUT NOT IN WORKING SET BECAUSE
; THE SWAPPER DROPS GLOBAL WRITABLE PAGES FROM THE WORKING SET ON OUTSWAP
;
	BBC	#LCK_V_LCKPAG,R8,54$	;OK IF UNLOCKING
	BBS	#WSL$V_WSLOCK,R8,42$	;CANNOT LOCK GLOBAL WRITE IN WORKING SET
54$:	MOVZWL	(SP),R1			;NORMALLY 0, WSLX IF ULKGBLWSLE
	BNEQ	57$			;BRANCH IF IT IS A WSLX
;
; NEED TO SCAN FOR THE WORKING SET LIST INDEX SINCE THE WSLX ARRAY
; DOES NOT CONTAIN THE BACKPOINTER FOR GLOBAL PAGES
;
	PUSHL	R2			;SAVE INDEX OF PAGE TABLE CONTAINING THIS PAGE
	MOVL	8(SP),R2		;RECOVER VIRTUAL ADDRESS
	BSBW	MMG$SCNWSLX		;SCAN FOR WORKING SET LIST INDEX
;
; MAY HAVE BEEN SWAPPED, RECALCULATE PTE ADR, REFETCH PFN
;
	EXTZV	#PTE$V_PFN,#PTE$S_PFN,- ;REFETCH PFN GIVEN THE
		@PHD$L_P0BR(R5)[R3],R0	;BYTE OFFSET OF PTE IN PAGE TABLE
	POPR	#^M<R2>			;RECOVER SAVE R2
	TSTL	R1			;FOUND THE WORKING SET LIST INDEX?
	BNEQ	57$			;BRANCH IF YES
;
; ERROR IF NOT IN WORKING SET LIST
;
	BUG_CHECK GBLWSLXERR,FATAL	;GLOBAL PAGE NOT FOUND IN WS
;
; PROCESS PAGE, GET WORKING SET LIST INDEX FROM PFN DATA BASE
;
56$:		PFN_REFERENCE	-
	MOVZWL	<@W^PFN$Ax_WSLX[R0],R1>,-	;R1 = INDEX TO WORKING SET LIST ENTRY
		LONG_OPCODE=MOVL,-
		IMAGE=SYS_NONPAGED
57$:	MOVAL	(R5)[R1],R3		;R3 = ADDRESS OF ENTRY
;
; R0 = PAGE FRAME NUMBER
; R1 = WORKING SET LIST INDEX FOR THIS PAGE
; R2 = INDEX OF PAGE TABLE CONTAINING THIS PAGE
; R3 = WORKING SET LIST ENTRY ADDRESS
; 0(SP) = SCRATCH
; 4(SP) = SAVED VIRTUAL ADDRESS
;
58$:	BBC	#LCK_V_LCKPAG,R8,80$	;BRANCH IF UNLOCKING
;
; LOCK THE PAGE IN THE WORKING SET LIST
;
	BITB	R8,(R3)			;ALREADY LOCKED?
	BEQL	60$			;BRANCH IF NOT
	INSV	#SS$_WASSET,#16,#16,R8	;PREVIOUS STATE OF LOCK WAS SET
	BRB	96$			;NOTE INSV CLEARS Z BIT
60$:	BICB3	#^C<WSL$M_WSLOCK ! WSL$M_PFNLOCK>,- ;SAVE THE CURRENT STATE
		(R3),(SP)		;OF THE LOCK BITS
	BNEQ	62$			;BRANCH IF NEITHER IS SET
	CMPW	#1,PHD$W_EXTDYNWS(R5)	;POSSIBLE TO LOCK 2 MORE PAGES?
	BLSS	62$			;BRANCH IF YES
	MOVZWL	#SS$_LKWSETFUL,R0	;LOCKED PORTION OF WORKING SET FULL
	BRB	110$
62$:	BBC	#WSL$V_PFNLOCK,R8,68$	;BRANCH IF LOCKING IN WORKING SET
	BBC	#LCK_V_GLOBAL,R8,64$	;BRANCH IF PAGE IS NOT GLOBAL
		PFN_REFERENCE	-
	ACBW	<#1,#1,@W^PFN$Ax_WSLX[R0],64$ >,- ;BRANCH IF FIRST LOCK IN
		LONG_OPCODE=ACBL,-
		IMAGE=SYS_NONPAGED
					;MEMORY OF THIS GLOBAL PAGE
	BRB	68$
64$:	DECL	W^MMG$GL_PFNLOCK	;CAN ANY MORE PAGES BE LOCKED IN MEMORY?
	BLSS	150$			;BRANCH IF NO, TOO MANY ALREADY LOCKED
68$:	BISB	R8,(R3)			;SET NEW LOCK BIT IN WSLE
	TSTB	(SP)			;WAS ENTRY ALREADY IN LOCKED PART OF WS?
	BNEQ	100$			;BRANCH IF YES
;
; ENTRY MUST BE PLACED IN THE LOCKED PORTION OF THE WORKING SET
;
	BSBB	SWAPLOCK		;SWAP THE WORKING SET LIST ENTRIES
	INCB	(R2)			;COUNT ANOTHER LOCKED WSLE FOR THIS PAGE TABLE
	BGTR	70$			;BRANCH IF NOT THE FIRST IN THIS PT
	INCW	PHD$W_PTCNTLCK(R5)	;ANOTHER PAGE TABLE WITH LOCKED WSLE'S
70$:	INCW	PHD$W_WSDYN(R5)		;DYNAMIC PART OF LIST
					;STARTS ONE ENTRY HIGHER
	CMPW	PHD$W_WSNEXT(R5),PHD$W_WSDYN(R5) ;IS WSNEXT NO LONGER
					;POINTING INTO DYNAMIC REGION?
	BGEQU	98$			;BRANCH IF IT'S OK
	MOVW	PHD$W_WSLAST(R5),PHD$W_WSNEXT(R5) ;OTHERWISE POINT IT TO END
	BRB	98$			;EXIT SUCCESSFULLY
;
; UNLOCK PAGE FROM WORKING SET LIST
;
80$:	BITB	R8,(R3)			;IS THIS PAGE LOCKED?
	BNEQ	90$			;BRANCH IF YES
	INSV	#SS$_WASCLR,#16,#16,R8	;AT LEAST ONE PAGE WAS ALREADY UNLOCKED
	BRB	100$
90$:	BBC	#WSL$V_PFNLOCK,(R3),94$	;BRANCH IF PAGE NOT LOCKED IN MEMORY
	BBC	#WSL$V_PFNLOCK,R8,94$	;BRANCH IF NOT UNLOCKING IT FROM MEMORY
	BBC	#LCK_V_GLOBAL,R8,92$	;BRANCH IF NOT A GLOBAL PAGE
		PFN_REFERENCE	-
	DECW	<@W^PFN$Ax_WSLX[R0]>,-		;ONE LESS MEMORY LOCK FOR THIS GLOBAL
		LONG_OPCODE=DECL,-
		IMAGE=SYS_NONPAGED
	BGTR	94$			;BRANCH IF NOT LAST MEMORY LOCK
92$:	INCL	W^MMG$GL_PFNLOCK	;ANOTHER PAGE MAY BE LOCKED IN MEMORY
94$:	BICB	R8,(R3)			;CLEAR THE DESIRED LOCK BIT(S)
	BITB	#<WSL$M_WSLOCK ! WSL$M_PFNLOCK>,(R3) ;MUST PAGE REMAIN IN THE
					;LOCKED PORTION OF THE WORKING SET?
96$:	BNEQ	100$			;BRANCH IF YES, IT IS STILL LOCKED
;
; MOVE THIS WORKING SET LIST ENTRY OUT OF THE LOCKED PORTION OF THE WORKING ET
;
	DECW	PHD$W_WSDYN(R5)		;INCLUDE LAST LOCKED SLOT IN DYNAMIC REGION
	BSBB	SWAPLOCK		;SWAP ENTRIES WITH THE LAST LOCKED ONE
	DECB	(R2)			;ONE LESS WSLE LOCKED IN THIS PT
	BGEQ	98$			;BRANCH IF SOME STILL LOCKED IN THIS PT
	DECW	PHD$W_PTCNTLCK(R5)	;ONE LESS PT WITH LOCKED WSLE'S
98$:	BSBW	MMG$EXTRADYNWS		;RECALCULATE EXTRA DYNAMIC WSLE COUNT
100$:	ASHL	#-16,R8,R0		;RETURN WASSET OR WASCLR
110$:	POPR	#^M<R1,R2>		;RESTORE R2 = VIRTUAL ADDRESS
	ENBINT				;AND RESTORE THE CALLING IPL
	RSB				;AND RETURN

;
; TOO MANY PAGES LOCKED IN MEMORY TO ALLOW ANOTHER TO BE LOCKED
;
150$:	BBC	#LCK_V_GLOBAL,R8,155$	;BRANCH IF PAGE NOT GLOBAL
		PFN_REFERENCE	-
	DECW	<@W^PFN$Ax_WSLX[R0]>,-		;THIS GLOBAL PAGE NOT LOCKED IN MEMORY
		LONG_OPCODE=DECL,-
		IMAGE=SYS_NONPAGED
155$:	INCL	W^MMG$GL_PFNLOCK	;FIX THE COUNTER
	MOVZWL	#SS$_LCKPAGFUL,R0	;NO MORE PAGES MAY BE LOCKED IN MEMORY
	BRB	110$

	.DSABL	LSB

	.SBTTL	SWAPLOCK - INTERFACE TO SWAPWSLE FROM LOCK/UNLOCK

;
; INPUTS:
;
;	R0 = PFN OF THE FIRST WORKING SET LIST SLOT
;	R1 = INDEX TO FIRST WORKING SET LIST SLOT (WSLX1)
;	R2 = BYTE INDEX OF PAGE TABLE CONTAINING THE PAGE BEING LOCKED/UNLOCKED
;	R4 = PCB ADDRESS
;	R5 = PROCESS HEADER ADDRESS - P1 OR SYSTEM SPACE
;	IPL = SYNCH, ESSENTIAL FOR MANIPULATING WORKING SET LIST
;		FOR SYSTEM SPACE, AND BECAUSE PFN DATA BASE IS CHANGED
;
; OUTPUTS:
;
;	R0 PRESERVED
;	R2 = ADDRESS OF BYTE CONTAINING COUNT OF LOCKED WORKING SET LIST
;		ENTRIES IN THE PAGE TABLE
;	SPECIFIED WORKING SET LIST ENTRIES ARE SWAPPED
;
SWAPLOCK:
	PUSHL	R2			;SAVE PAGE TABLE NUMBER
	MOVZWL	PHD$W_WSDYN(R5),R2	;INDEX TO SECOND WORKING SET LIST SLOT (WSLX2)
	BSBB	MMG$SWAPWSLE		;SWAP THE WORKING SET LIST ENTRIES
	ADDL3	PHD$L_PTWSLELCK(R5),R5,R2 ;BASE ADDRESS OF ARRAY OF COUNTS OF
					;LOCKED WORKING SET LIST ENTRIES
	ADDL	(SP)+,R2		;ADDRESS OF COUNT BYTE FOR # OF LOCKED
					;WSLE'S IN THE PAGE TABLE
	RSB

	.SBTTL	SWAPWSLE - SWAP WORKING SET LIST ENTRIES
;++
; FUNCTIONAL DESCRIPTION:
;
;	THIS ROUTINE SWAPS THE CONTENTS OF THE FIRST WORKING SET LIST SLOT
; WHICH MUST BE ACTIVE WITH THAT OF THE SECOND WORKING SET LIST SLOT
; WHICH MAY BE EITHER ACTIVE OR FREE.
;
; CALLING SEQUENCE:
;
;	BSBW	MMG$SWAPWSLE
;
; INPUT PARAMETERS:
;
;	R0 = PFN OF THE FIRST WORKING SET LIST SLOT
;	R1 = INDEX TO FIRST WORKING SET  LIST SLOT (WSLX1)
;	R2 = INDEX TO SECOND WORKING SET LIST SLOT (WSLX2)
;	R4 = PCB ADDRESS
;	R5 = PROCESS HEADER ADDRESS - P1 OR SYSTEM SPACE
;	IPL = SYNCH, ESSENTIAL FOR MANIPULATING WORKING SET LIST
;		FOR SYSTEM SPACE, AND BECAUSE PFN DATA BASE IS CHANGED
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	R0 PRESERVED
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	NONE
;
; SIDE EFFECTS:
;
;	NONE
;
;--

;
; **********************************************************************
;
; **************** THE FOLLOWING CODE MUST BE RESIDENT *****************
;
	.PSECT	$MMGCOD
;
; **********************************************************************
;
	.ENABL	LSB

MMG$SWAPWSLE::
	CMPL	R1,R2			;IS THE SWAP A NOP?
	BEQL	90$			;BRANCH IF YES
	PUSHL	(R5)[R1]		;PUSH WSLE1
	PUSHR	#^M<R0,R2>		;PUSH WSLX2, PFN(WSLX1)
	MOVL	(R5)[R2],R2		;GET WSLE2
	BNEQ	50$			;BRANCH IF NOT AN EMPTY ENTRY
	CLRL	(R5)[R1]		;JUST FREE WSLX1
	BRB	70$			;AND GO SET UP WSLX2
50$:	BLBC	R2,SWAPWSLEBUG		;BRANCH IF WSLE NOT VALID, ERROR
	PUSHL	R1			;SAVE WSLX1
	BSBW	MMG$SVAPTECHK		;RETURN R3 = SYS VA OF PAGE TABLE ENTRY
	BSBW	MMG$WSLEPFN		;GET PFN FROM SVAPTE OF THIS WSLE
	POPR	#^M<R1>			;R1 = WSLX1
	BSBB	SETWSLE			;STORE WSLE AND WSLX
;
; MOVE THE OLD WSLE1 INTO SLOT INDEXED BY WSLX2
; 0(SP) = PFN OF WSLE1, 4(SP) = WSLX2, 8(SP) = WSLE1
;
70$:	POPR	#^M<R0,R1,R2>		;R0=PFN, R1=WSLX2, R2=WSLE1
;
; STORE WORKING SET LIST ENTRY INTO ITS WORKING SET LIST ENTRY SLOT
; AND STORE WSLX INTO PFN DATA BASE IF PAGE TYPE IS NOT GLOBAL
; R0 = PAGE FRAME NUMBER
; R1 = WSLX, R2 = WORKING SET LIST ENTRY WITH PAGE TYPE
;
SETWSLE:
	MOVL	R2,(R5)[R1]		;STORE WORKING SET LIST ENTRY
	CMPV	#WSL$V_PAGTYP,#WSL$S_PAGTYP,R2,#PFN$C_GLOBAL ;GLOBAL PAGE?
	BGEQ	90$			;BRANCH IF NOT
		PFN_REFERENCE	-
	MOVW	<R1,@W^PFN$Ax_WSLX[R0]>,-	;SET PFN WSLX
		LONG_OPCODE=MOVL,-
		IMAGE=SYS_NONPAGED
90$:	RSB				;AND RETURN
;
; LENGTH VIOLATION FOR VIRTUAL ADDRESS IN WORKING SET LIST
;
SWAPWSLEBUG:
	BUG_CHECK SWAPWSLE,FATAL

	.SBTTL	SCNWSLX - SCAN FOR WORKING SET LIST INDEX
;++
;
; FUNCTIONAL DESCRIPTION:
;
;	THIS ROUTINE SCANS THE ENTIRE WORKING SET FOR THE SPECIFIED
; VIRTUAL ADDRESS.  IT IS CALLED AT IPL=SYNCH, LOWERS TO IPL=ASTDEL
; TO DO THE SCAN AND RAISES BACK TO SYNCH WHEN COMPLETED.
;	DROPPING IPL TO ASTDEL AND THUS MAKING THE PROCESS ELIGIBLE 
; FOR SWAPPING, PLACES THE FOLLOWING RESTRICTIONS ON THIS CODE AND
; ITS CALLERS.
;
;	1) THIS CODE MAY NOT FAULT PROCESS PAGES SINCE THAT MIGHT
; FAULT OUT THE DESIRED WORKING SET LIST ENTRY.
;	2) THE CALLING CODE MAY NOT KEEP ANY SYSTEM SPACE ADDRESSES
; FOR THE PROCESS HEADER OR PAGE TABLE ENTRIES SINCE THE HEADER BASE
; ADDRESS MAY CHANGE IF THE PROCESS IS SWAPPED.
;	3) THE CALLING CODE MAY NOT HOLD A PFN FOR A GIVEN PAGE SINCE
; THAT TOO COULD CHANGE IF THE PROCESS WERE SWAPPED.
;
; CALLING SEQUENCE:
;
;	BSBW	MMG$SCNWSLX
;
; INPUTS:
;
;	R2  = VIRTUAL ADDRESS TO SCAN FOR
;	R5  = P1 ADDRESS OF PROCESS HEADER
;	IPL = SYNCH, DROPS TO ASTDEL, RESTORES TO SYNCH ON RETURN
;	      SEE FUNCTIONAL DESCRIPTION ABOVE!
;
; OUTPUTS:
;
;	R1  = WORKING SET LIST INDEX IF FOUND
;	    = 0 IF NOT FOUND
;	R3  = PRESERVED
;	IPL = IS LOWERED TO ASTDEL AND RESTORED TO SYNCH ON RETURN
;	      SEE FUNCTIONAL DESCRIPTION ABOVE!
;--

;
; **********************************************************************
;
; **************** THE FOLLOWING CODE MUST BE RESIDENT *****************
;
	.PSECT	$MMGCOD
;
; **********************************************************************
;
MMG$SCNWSLX::
	SETIPL	#IPL$_ASTDEL		;LOWER IPL FROM SYNCH TO ASTDEL
	ASHL	#-VA$S_BYTE,R2,R2	;JUST INTERESTED IN PAGE NUMBER BITS
	MOVZWL	PHD$W_WSLOCK(R5),R1	;INDEX TO FIRST NON-PERMANENT WSLE
	MOVAL	(R5)[R1],R1		;ADDRESS OF FIRST WSLE
	MOVZWL	PHD$W_WSLAST(R5),R0	;INDEX TO LAST (INCLUSIVE) WSLE
	MOVAL	(R5)[R0],R0		;ADDRESS OF LAST WSLE
20$:	CMPV	#VA$V_VPG,#VA$S_VPG,(R1),R2 ;IS THIS THE DESIRED WSLE?
	BEQL	40$			;BRANCH IF YES
	ACBL	R0,#4,R1,20$		;LOOP THROUGH ALL THE SLOTS
;
; WORKING SET LIST ENTRY NOT FOUND FOR SPECIFIED VIRTUAL ADDRESS
;
30$:	CLRL	R1			;RETURN IMPOSSIBLE WSLX
	SETIPL	#IPL$_SYNCH		;RESTORE IPL SYNCH
	RSB				;AND RETURN TO CALLER
;
; FOUND THE WORKING SET LIST ENTRY
;
40$:	SETIPL	#IPL$_SYNCH		;BACK TO IPL SYNCH
	BLBC	(R1),30$		;MAKE SURE SWAPPER DIDN'T JUST
					;RIP THE ENTRY OUT FROM UNDER US
	SUBL	R5,R1			;CONVERT ADDRESS
	ROTL	#<32-2>,R1,R1		;BACK TO INDEX
	RSB				;RETURN WITH WSLX IN R1



	.END
