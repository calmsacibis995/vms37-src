	.TITLE	SYSMAILBX - SYSTEM SERVICES TO CREATE AND DELETE MAILBOXES
	.IDENT	'V03-002'
 
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
; D. N. CUTLER 1-OCT-76
;
;	V03-002	KDM0095		Kathleen D. Morse	9-Apr-1982
;		Add an SHB reference count for each UCB for a shared
;		memory mailbox, not for the mailbox itself.
;
;	V03-001	KDM0094		Kathleen D. Morse	9-Apr-1982
;		Stay at device IPL during entire initialization of
;		the shared memory mailbox UCB to prevent race with
;		the use of the UCB via an incoming PRQ.
;
;	V02-009 MSH0001		Maryann Hinden		19-Feb-1982
;		Fix PROBE problem.
;
;	V02-008	STJ0132		STEVEN T. JEFFREYS	20-OCT-1981
;		RETURN SS$_IVLOGNAM FOR LOGICAL NAMES OF LENGTH 0.
;
;	V02-007	STJ0059		STEVEN T. JEFFREYS	02-JUL-1981
;		MODIFY CREATE_LOGNAM TO USE NEW CALL INTERFACE TO IOC$CVT_DEVNAM.
;		
;	V02-006	KTA0014		Kerbey Altmann		10-Apr-1981
;		Change some code to accommodate changed IOC$FFCHAN.
;
;	V05	LMK0003		LEN KAWELL	15-FEB-1980
;		REMOVED MAXIMUM NUMBER OF MESSAGES LOGIC AS THERE WAS
;		NO WAY TO SET IT ON A PER MAILBOX BASIS AND THE BUFFER
;		QUOTA PROVIDES SUFFICIENT PROTECTION.  ALSO CHANGED THE
;		PER PORT SHARED MEMORY MAILBOX QUOTAS.
;
;	V04	RIH0033		R. HUSTVEDT	16-OCT-1979
;		CHANGE PCB$W_BYTCNT TO JIB$L_BYTCNT.
;
;	V03	LMK0002		LEN KAWELL	27-JUL-1979
;		FIXED MUTEX DEADLOCK PROBLEM.
;
;	V02	LMK0001		LEN KAWELL	21-MAY-1979
;		ADDED SHARED MEMORY MAILBOX CREATION.
;
; SYSTEM SERVICES TO CREATE AND DELETE MAILBOXES
;
; MACRO LIBRARY CALLS
;
 
	$ADPDEF				;DEFINE ADAPTER CONTROL BLOCK OFFSETS
	$CCBDEF				;DEFINE CCB OFFSETS
	$CRBDEF				;DEFINE CRB OFFSETS
	$DDBDEF				;DEFINE DDB OFFSETS
	$DEVDEF				;DEFINE DEVICE CHARACTERISTIC BITS
	$DYNDEF				;DEFINE DATA STRUCTURE TYPE CODES
	$IDBDEF				;DEFINE INTERRUPT DISPATCH BLOCK
	$IPLDEF				;DEFINE INTERRUPT PRIORITY LEVELS
	$JIBDEF				;DEFINE JIB OFFSETS
	$LOGDEF				;DEFINE LOG OFFSETS
	$MBXDEF				;DEFINE SHARED MEMORY MAILBOX
	$PCBDEF				;DEFINE PCB OFFSETS
	$PRDEF				;DEFINE PROCESSOR REGISTERS
	$PRVDEF				;DEFINE PRIVILEGE BITS
	$SHBDEF				;DEFINE SHARED MEMORY CONTROL BLOCK
	$SHDDEF				;DEFINE SHARED MEMORY DATAPAGE
	$SSDEF				;DEFINE SYSTEM STATUS CODES
	$UCBDEF				;DEFINE UCB OFFSETS
	$VECDEF				;DEFINE INTERRUPT VECTOR OFFSETS
 
;
; LOCAL SYMBOLS
;
MBXNAMSIZ	= 10			;MAXIMUM MAILBOX DEVICE NAME SIZE (_MBXNNNNN:)

;
; ARGUMENT LIST OFFSET DEFINITIONS FOR CREATE MAILBOX
;
 
	$OFFSET	4,POSITIVE,<-
		PRMFLG,-		;MAILBOX CREATION TYPE INDICATOR
		CRCHAN,-		;ADDRESS TO STORE ASSIGNED CHANNEL
		MAXMSG,-		;MAXIMUM MAILBOX MESSAGE SIZE
		BUFQUO,-		;MAXIMUM BYTES FOR MESSAGE BUFFERING
		PROMSK,-		;PROTECTION MASK FOR CREATED MAILBOX
		ACMODE,-		;ACCESS MODE FOR CHANNEL ASSIGNMENT
		LOGNAM,-		;ADDRESS OF LOGICAL NAME STRING DESCRIPTOR
		>
 
;
; ARGUMENT LIST OFFSET DEFINITIONS FOR DELETE MAILBOX
;
	$OFFSET	4,POSITIVE,<-
		DLCHAN,-		;CHANNELT NUMBER OF SPECIFIED MAILBOX
		>
;
; STACK LOCAL STORAGE SYMBOLS
;
	$OFFSET	0,NEGATIVE,<-
		CHANADDR,-		;ADDRESS TO STORE CHANNEL NUMBER
		CCBADDR,-		;CCB ADDRESS FOR THAT CHANNEL
		CHANNUM,-		;ASSIGNED CHANNEL NUMBER
		LOGTABLE,-		;LOGICAL NAME TABLE NUMBER
		SHBADDR,-		;SHARED MEMORY CONTROL BLOCK ADDR
		LOCALSIZ,-		; SIZE OF LOCAL STORAGE
		>
	.PAGE
	.SBTTL	CREATE MAILBOX
;+
; EXE$CREMBX - CREATE MAILBOX
;
; THIS SERVICE PROVIDES THE CAPABILITY TO CREATE A VIRTUAL MAILBOX DEVICE
; AND ASSIGN AN I/O CHANNEL TO IT.
;
; INPUTS:
;
;	PRMFLG(AP) = MAILBOX CREATION TYPE INDICATOR.
;		LOW BIT CLEAR INDICATES TEMPORARY MAILBOX.
;		LOW BIT SET INDICATES PERMANENT MAILBOX.
;	CRCHAN(AP) = ADDRESS TO STORE ASSIGNED CHANNEL NUMBER.
;	MAXMSG(AP) = MAXIMUM MAILBOX MESSAGE SIZE.
;	BUFQUO(AP) = MAXIMUM BYTES FOR MESSAGE BUFFERING.
;	PROMSK(AP) = PROTECTION MASK FOR CREATED MAILBOX.
;	ACMODE(AP) = ACCESS MODE CHANNEL IS TO BE ASSIGNED TO.
;	LOGNAM(AP) = ADDRESS OF LOGICAL NAME STRING DESCRIPTOR.
;
;	R4 = CURRENT PROCESS PCB ADDRESS.
;
; OUTPUTS:
;
;	R0 LOW BIT CLEAR INDICATES FAILURE TO CREATE MAILBOX.
;
;		R0 = SS$_ACCVIO - LOGICAL NAME STRING OR LOGICAL NAME STRING
;			DESCRIPTOR CANNOT BE READ BY CALLING ACCESS MODE,
;			OR CHANNEL NUMBER CANNOT BE WRITTEN BY CALLING
;			ACCESS MODE.
;
;		R0 = SS$_EXQUOTA - PROCESS HAS INSUFFICIENT BUFFER QUOTA TO
;			ALLOCATE MAILBOX UCB OR SATISFY BUFFER REQUIREMENTS.
;
;		R0 = SS$_INSFMEM - SUFFICIENT SYSTEM DYNAMIC MEMORY DOES NOT
;			EXIST TO ALLOCATE MAILBOX UCB.
;
;		R0 = SS$_IVLOGNAM - GREATER THAN MAXIMUM LENGTH LOGICAL
;			NAME STRING SPECIFIED.
;
;		R0 = SS$_NOIOCHAN - NO I/O CHANNEL IS AVAILABLE FOR ASSIGNMENT.
;
;		R0 = SS$_NOPRIV - PROCESS DOES NOT HAVE PRIVILEGE TO CREATE
;			SPECIFIED TYPE OF MAILBOX.
;		R0 = SS$_INTERLOCK - UNABLE TO OBTAIN MAILBOX TABLE INTERLOCK.
;
;		R0 = SS$_EXPORTQUOTA - PORT'S MAILBOX CREATION QUOTA EXCEEDED.
;
;		R0 = SS$_NOSHMBLOCK - NO SHARED MEMORY MAILBOX TABLE BLOCKS
;			ARE AVAILABLE.
;
;	R0 LOW BIT SET INDICATES SUCCESSFUL COMPLETION.
;
;		R0 = SS$_NORMAL - NORMAL COMPLETION., IF LOGICAL NAME SPECIFIED,
;			NEW ENTRY DID NOT SUPERSEDE PREVIOUS ENTRY.
;
;		R0 = SS$_SUPERSEDE - NORMAL COMPLETION, NEW ENTRY SUPERSEDED
;			PREVIOUS ENTRY IN SPECIFIED LOGICAL NAME TABLE.
;-
 
	.PSECT	Y$EXEPAGED
	.ENTRY	EXE$CREMBX,^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>
	MOVAB	LOCALSIZ(SP),SP		;ALLOCATE LOCAL STORAGE
	MOVZWL	S^#SS$_ACCVIO,R0	;ASSUME ACCESS VIOLATION
	MOVL	CRCHAN(AP),R6		;GET ADDRESS TO STORE CHANNEL NUMBER
	IFNOWRT	#2,(R6),EXIT		;CAN CHANNEL NUMBER BE WRITTEN?
	CLRW	(R6)			;CLEAR CHANNEL NUMBER IN CASE OF ERROR
;
; GET AND TRANSLATE SPECIFIED LOGICAL NAME (IF ANY)
;
	MOVL	LOGNAM(AP),R11		;GET ADDRESS OF LOGICAL NAME STRING DESCRIPTOR
	BEQL	10$			;IF EQL NO LOGICAL NAME SPECIFIED
	IFNORD	#8,(R11),EXIT		;CAN LOGICAL NAME STRING DESCRIPTOR BE READ?
	MOVQ	(R11),-(SP)		;MOVE DESCRIPTOR TO KERNEL STACK
	MOVL	SP,R9			;GET ADDRESS OF DESCRIPTOR
	MOVL	4(R9),R10		;GET ADDRESS OF LOGICAL NAME STRING
	MOVZWL	(R9),R11		;GET LENGTH OF STRING IN BYTES
	BEQL	BAD_LOGNAM		;IF EQL STRING HAS ZERO LENGTH
	ASSUME  LOG$C_NAMLENGTH LE 512
	CMPW	R11,#LOG$C_NAMLENGTH-1	;LOGICAL NAME TOO LARGE?
	BGTRU	BAD_LOGNAM		;IF GTRU YES
	IFNORD	R11,(R10),EXIT		;CAN ENTIRE LOGICAL NAME STRING BE READ?
	MOVAB	-SHD$C_NAMLENGTH(SP),SP	;CREATE MEMORY NAME BUFFER
	PUSHL	SP			;CREATE BUFFER DESCRIPTOR
	PUSHL	#SHD$C_NAMLENGTH-1	;...
	MOVL	SP,R10			;GET ADDRESS OF DESCRIPTOR
	MOVAB	-LOG$C_NAMLENGTH(SP),SP	;CREATE MAILBOX NAME BUFFER
	PUSHL	SP			;CREATE BUFFER DESCRIPTOR
	PUSHL	#LOG$C_NAMLENGTH-1	;...
	MOVL	SP,R11			;GET ADDRESS OF DESCRIPTOR
	BSBW	MMG$MBXTRNLOG		;TRANSLATE THE LOGICAL NAME
	BLBC	R0,EXIT			;IF LBC FAILURE
;
; GET A FREE CHANNEL AND CHECK PRIVILEGES
;
10$:
	SETIPL	#IPL$_ASTDEL		;BLOCK AST DELIVERY
	BSBW	IOC$FFCHAN		;FIND A FREE CHANNEL
	BLBC	R0,EXIT			;IF LBC ERROR
	ASSUME	CHANNUM+4 EQ CCBADDR
	MOVQ	R1,CHANNUM(FP)		;SAVE CHANNEL NUMBER AND CCBADDR
	MOVL	R6,CHANADDR(FP)		;SAVE ADDRESS TO STORE CHANNEL NUMBER
	MOVL	PRMFLG(AP),R9		;GET FLAGS ARGUMENT
	MOVZWL	#SS$_IVSTSFLG,R0	;ASSUME BAD FLAGS SET
	BITL	#^C<1>,R9		;ANY BITS BUT DEFINED BITS SET?
	BNEQ	EXIT			;IF NEQ YES
	MOVZWL	#SS$_NOPRIV,R0		;ASSUME PROCESS DOES NOT HAVE PRIVILEGE
	IFPRIV	PRMMBX,DISPATCH		;CAN PROCESS CREATE PERMANENT MAILBOX?
	BLBS	R9,EXIT			;IF LBS NEEDS PRMMBX PRIVILEGE
	IFPRIV	TMPMBX,DISPATCH		;CAN PROCESS CREATE TEMPORARY MAILBOX?
EXIT:
	SETIPL	#0			;RESTORE IPL
	RET				;
BAD_LOGNAM:
	MOVZWL	#SS$_IVLOGNAM,R0	;INVALID LOGICAL NAME
	RET				;
;
; DISPATCH TO APPROPRIATE TYPE MAILBOX CREATION ROUTINE
;
DISPATCH:
	TSTL	R11			;LOGICAL NAME SPECIFIED?
	BEQL	NONAME			;IF EQL NO - UNNAMED LOCAL MAILBOX
	TSTW	(R10)			;MEMORY NAME SPECIFIED?
	BNEQ	SHAREDMEM		;IF NEQ YES - SHARED MEMORY MAILBOX
;
; CREATE NAMED LOCAL MEMORY MAILBOX
;
NAMEDLOCAL:
	MOVAB	MB$UCB0,R5		;GET ADDRESS OF TEMPLATE UCB
	BSBW	SEARCH_MBXUCB		;CHECK IF MAILBOX EXISTS
	TSTL	R6			;MAILBOX FOUND?
	BNEQ	ASSIGN_IT		;IF NEQ YES
	BSBW	CHECK_QUOTA		;CHECK BYTE COUNT QUOTA
	BLBC	R0,EXIT_UNLKLOGTAB	;IF LBC INSUFFICIENT QUOTA
	BSBW	ALLOC_LOGNAM		;ALLOCATE LOGICAL NAME BLOCK
	BLBC	R0,EXIT_UNLKLOGTAB	;IF LBC FAILURE
	BSBW	CREATE_LOCALUCB		;CREATE LOCAL MEMORY UCB
	BLBC	R0,EXIT_DALOGNAM	;IF LBC FAILURE
	BRW	CREATE_LOGNAM		;CREATE LOGICAL NAME, ASSIGN CHANNEL,
					; AND EXIT
;
; CREATE UNNAMED LOCAL MEMORY MAILBOX
;
NONAME:					;CREATE UNNAMED MAILBOX
	MOVAB	MB$UCB0,R5		;GET ADDRESS OF TEMPLATE UCB
	BSBW	CHECK_QUOTA		;CHECK BYTE COUNT QUOTA
	BLBC	R0,EXIT			;IF LBC INSUFFICIENT QUOTA
	BSBW	SCH$IOLOCKW		;LOCK I/O DATABASE FOR WRITE
	BSBW	CREATE_LOCALUCB		;CREATE A LOCAL MAILBOX UCB
	BLBC	R0,EXIT_UNLKIODB	;IF LBC FAILURE
	CLRL	UCB$L_LOGADR(R6)	;SET NO NAME FOR MAILBOX
ASSIGN_IT:				;
	BRW	ASSIGN			;ASSIGN CHANNEL AND EXIT
;
; CREATE SHARED MEMORY MAILBOX
;
SHAREDMEM:
	MOVZWL	S^#SS$_NOPRIV,R0	;ASSUME NO PRIVILEGE
	IFNPRIV	SHMEM,EXIT		;CAN PROCESS CREATE SHARED MEMORY OBJECTS?
	BSBW	GET_SHMTEMPLATE		;GET ADDRESS OF TEMPLATE UCB
	BLBC	R0,EXIT			;IF LBC FAILURE
	BSBW	SEARCH_MBXUCB		;CHECK IF MAILBOX EXISTS
	TSTL	R6			;MAILBOX FOUND?
	BNEQ	ASSIGN_IT		;IF NEQ YES
	BSBW	CHECK_QUOTA		;CHECK BYTE COUNT QUOTA
	BLBC	R0,EXIT_UNLKLOGTAB	;IF LBC FAILURE
	BSBW	ALLOC_LOGNAM		;ALLOCATE LOGICAL NAME BLOCK
	BLBC	R0,EXIT_UNLKLOGTAB	;IF LBC FAILURE
	BSBW	SEARCH_SHMMBX		;SEARCH SHARED MEMORY FOR MAILBOX
					; AND CREATE IT IF NOT FOUND
	BLBC	R0,EXIT_DALOGNAM	;IF LBC FAILURE
	BSBW	CREATE_SHMUCB		;CREATE SHARED MEMORY UCB
	BLBC	R0,20$			;IF LBC FAILURE
	BRW	CREATE_LOGNAM		;CREATE LOGICAL NAME, ASSIGN CHANNEL,
					; AND EXIT
20$:
	CLRB	MBX$B_FLAGS(R7)		;CATASTROPHIC ERROR - CLEAR ALL FLAGS
EXIT_DALOGNAM:				;EXIT, DEALLOCATING LOGICAL NAME BLOCK
	BSBW	DALLOC_LOGNAM		;DEALLOCATE LOGICAL NAME BLOCK
EXIT_UNLKLOGTAB:			;EXIT, UNLOCKING LOGICAL NAME TABLE
	PUSHL	R0			;SAVE EXIT STATUS
	MOVL	LOGTABLE(FP),R3		;GET LOGICAL NAME TABLE NUMBER
	BSBW	LOG$UNLOCK		;UNLOCK THE TABLE
	POPL	R0			;RESTORE EXIT STATUS
EXIT_UNLKIODB:				;EXIT, UNLOCKING I/O DATABASE
	BRW	IOC$UNLOCK		;UNLOCK I/O DATABASE AND EXIT
	.PAGE
	.SBTTL	GET_SHMTEMPLATE - GET SHARED MEMORY MAILBOX TEMPLATE UCB
;++
;
; THIS ROUTINE IS CALLED TO GET THE ADDRESS OF THE "TEMPLATE" MAILBOX
; UCB FOR A SPECIFIED SHARED MEMORY.
;
; INPUTS:
;
;	R10 = ADDRESS OF SHARED MEMORY NAME DESCRIPTOR.
;
; OUTPUTS:
;
;	R0 = SUCCESS OR FAILURE.
;	R5 = ADDRESS OF TEMPLATE MAILBOX UCB.
;	SHBADDR(FP) = ADDRESS OF SHB.
;--
GET_SHMTEMPLATE:			;GET ADDRESS OF TEMPLATE UCB
	MOVAL	EXE$GL_SHBLIST,R6	;GET ADDRESS OF SHARED MEMORY LISTHEAD
10$:
	ASSUME	SHB$L_LINK EQ 0
	MOVL	SHB$L_LINK(R6),R6	;GET ADDRESS OF NEXT SHB
	BEQL	40$			;IF EQL NO SUCH MEMORY
	MOVL	SHB$L_DATAPAGE(R6),R5	;GET ADDRESS OF DATAPAGE
	CMPC5	(R10),@4(R10),#0,-	;NAMES MATCH?
		#SHD$C_NAMLENGTH-1,SHD$T_NAME+1(R5)
	BNEQ	10$			;IF NEQ NO
	BBC	#SHB$V_CONNECT,SHB$B_FLAGS(R6),40$ ;BR IF NOT CONNECTED
	MOVAL	IOC$GL_DEVLIST,R0	;GET ADDRESS OF DDB LISTHEAD
20$:
	ASSUME	DDB$L_LINK EQ 0
	MOVL	DDB$L_LINK(R0),R0	;GET ADDRESS OF NEXT DDB
	BEQL	40$			;IF EQL NOT FOUND
	MOVL	DDB$L_UCB(R0),R5	;GET ADDRESS OF UCB
	BBC	#DEV$V_MBX,UCB$L_DEVCHAR(R5),20$ ;IF CLR NOT MAILBOX
	BBC	#UCB$V_SHMMBX,UCB$W_DEVSTS(R5),20$ ;IF CLR NOT SHARED MEM MAILBOX
	MOVL	UCB$L_CRB(R5),R1	;GET CRB ADDRESS
	MOVL	CRB$L_INTD+VEC$L_ADP(R1),R1 ;GET ADAPTER CONTROL BLOCK ADDRESS
	CMPL	ADP$L_SHB(R1),R6	;SHARED MEMORY BLOCK ADDRESS MATCH?
	BNEQ	20$			;IF NEQ NO - WRONG MEMORY
	MOVL	R6,SHBADDR(FP)		;SAVE SHB ADDRESS
	MOVL	#1,R0			;SET SUCCESS
	RSB				;
40$:
	MOVZWL	#SS$_SHMNOTCNCT,R0	;SET MEMORY NOT CONNECTED
	RSB				;
	.PAGE
	.SBTTL	SEARCH_MBXUCB - SEARCH FOR SPECIFIED MAILBOX UCB
;++
; THIS ROUTINE IS CALLED TO SEARCH FOR THE SPECIFIED MAILBOX UCB.
; IF IT IS FOUND, THE MAILBOX ALREADY EXISTS AND THE UCB ADDRESS IS
; RETURNED.  IF IT IS NOT FOUND, THE MAILBOX MUST BE CREATED.
;
; INPUTS:
;
;	R5 = ADDRESS OF TEMPLATE MAILBOX
;	R9 = 0 IF MAILBOX IS TEMPORARY
;	     1 IF MAILBOX IS PERMANENT
;	R11 = ADDRESS OF MAILBOX NAME DESCRIPTOR
;
; OUTPUTS:
;
;	IF MAILBOX UCB FOUND.
;	
;		R6 = ADDRESS OF MAILBOX UCB.
;
;		I/O DATABASE LOCKED FOR WRITE.
;
;	IF MAILBOX UCB NOT FOUND.
;
;		R6 = 0
;		
;		LOGICAL NAME TABLE AND I/O DATABASE LOCKED FOR WRITE.
;--
SEARCH_MBXUCB:				;SEARCH FOR MAILBOX UCB
	BSBW	SCH$IOLOCKW		;LOCK I/O DATABASE FOR WRITE
	MOVZBL	#LOG$C_SYSTEM,R3	;SET SYSTEM TABLE NUMBER
	BLBS	R9,10$			;IF LBS SYSTEM TABLE
	MOVZBL	#LOG$C_GROUP,R3		;SET GROUP TABLE NUMBER
10$:
	MOVL	R3,LOGTABLE(FP)		;SAVE TABLE NUMBER
	BSBW	LOG$LOCKW		;LOCK LOGICAL NAME TABLE
	MOVL	UCB$L_DDB(R5),R6	;GET ADDRESS OF DDB
	MOVAL	DDB$L_UCB-UCB$L_LINK(R6),R6 ;SET TO START AT FIRST UCB
20$:
	MOVL	UCB$L_LINK(R6),R6	;GET ADDRESS OF NEXT UCB
	BEQL	30$			;IF EQL END OF LIST - NOT FOUND
	MOVL	UCB$L_LOGADR(R6),R1	;GET ADDRESS OF LOGICAL NAME BLOCK
	BEQL	20$			;IF EQL NO NAME
	CMPB	LOGTABLE(FP),LOG$B_TABLE(R1) ;DO TABLE TYPES MATCH?
	BNEQ	20$			;IF NEQ NO
	BLBS	R9,25$			;IF LBS SYSTEM NAME
	CMPW	PCB$W_GRP(R4),LOG$W_GROUP(R1) ;DO GROUPS MATCH?
	BNEQ	20$			;IF NEQ NO
25$:
	MOVZBL	LOG$T_NAME(R1),R0	;GET SIZE OF NAME
	CMPC5	(R11),@4(R11),#0,R0,LOG$T_NAME+1(R1) ;DO NAMES MATCH?
	BNEQU	20$			;IF NEQ NO
	INCW	UCB$W_REFC(R6)		;INCREMENT REFERENCE COUNT
	MOVL	LOGTABLE(FP),R3		;GET LOGICAL NAME TABLE NUMBER
	BRW	LOG$UNLOCK		;UNLOCK THE TABLE AND RETURN
30$:
	RSB				;
	.PAGE
	.SBTTL	CHECK_QUOTA - CHECK BUFFER I/O BYTE COUNT QUOTA
;++
; THIS ROUTINE IS CALLED TO CHECK IF PROCESS HAS ENOUGH BUFFER I/O
; BYTE COUNT QUOTA FOR TEMPORARY MAILBOX UCB AND MESSAGES.
;
; INPUTS:
;
;	BUFQUO(AP) = SPECIFIED MAILBOX BUFFER QUOTA FOR MESSAGES.
;	R9 = 0 IF TEMPORARY MAILBOX.
;	   = 1 IF PERMANENT MAILBOX.
;
; OUTPUTS:
;
;	R0 = SUCCESS OR FAILURE.
;	R8 = BYTE COUNT QUOTA FOR MESSAGES.
;--
CHECK_QUOTA:				;CHECK BUFFER QUOTA
	MOVZWL	S^#SS$_NORMAL,R0	;ASSUME SUCCESS
	MOVZWL	BUFQUO(AP),R8		;GET SPECIFIED BUFFER QUOTA
	BNEQ	10$			;IF NEQ BUFER QUOTA SPECIFIED
	MOVZWL	IOC$GW_MBXBFQUO,R8	;GET DEFAULT BUFFER QUOTA
10$:
	BLBS	R9,30$			;IF LBS PERMANENT MAILBOX
	ADDW3	UCB$W_SIZE(R5),R8,R1	;ADD MAILBOX SIZE AND BUFFER REQUIREMENTS
	BCS	20$			;IF CS BYTE COUNT OVERFLOW
	ADDW	#256,R1			;ADD IN EXTRA NEEDED FOR PROCESS DELETION
	BCS	20$			;IF CS BYTE COUNT OVERFLOW
	MOVZWL	R1,-(SP)			;CONVERT TO LONGWORD
	MOVL	PCB$L_JIB(R4),R1	;GET JIB ADDRESS
	CMPL	(SP)+,JIB$L_BYTCNT(R1)	;ENOUGH BYTES TO SATISFY REQUIREMENTS?
	BLEQU	30$			;IF LEQU YES
20$:
	MOVZWL	#SS$_EXQUOTA,R0		;SET FAILURE
30$:
	RSB				;
	.PAGE
	.SBTTL	ALLOC_LOGNAM - ALLOCATE LOGICAL NAME BLOCK
;++
; THIS ROUTINE IS CALLED TO ALLOCATE PAGED POOL FOR A LOGICAL NAME BLOCK.
;
; INPUTS:
;
;	R11 = ADDRESS OF LOGICAL NAME DESCRIPTOR.
;
; OUTPUTS:
;
;	R0 = SUCCESS OR FAILURE.
;	R10 = ADDRESS OF LOGICAL NAME BLOCK.
;--
ALLOC_LOGNAM:				;ALLOCATE LOGICAL NAME BLOCK
	MOVZWL	(R11),R1		;GET LOGICAL NAME SIZE
	ADDL	#LOG$C_LENGTH+MBXNAMSIZ+2,R1 ;CALCULATE SIZE OF BLOCK
	JSB	EXE$ALOPAGED		;ALLOCATE PAGED MEMORY
	BLBC	R0,10$			;IF LBC FAILURE
	MOVL	R2,R10			;SAVE ADDRESS OF BLOCK
	MOVW	R1,LOG$W_SIZE(R10)	;SET SIZE OF ALLOCATED BLOCK
	RSB				;
10$:
	MOVZWL	#SS$_INSFMEM,R0		;SET FAILURE
	RSB				;
	.PAGE
	.SBTTL	DALLOC_LOGNAM - DEALLOCATE LOGICAL NAME BLOCK
;++
; THIS ROUTINE IS CALLED TO DEALLOCATE THE LOGICAL NAME BLOCK
;
; INPUTS:
;
;	R10 = ADDRESS OF LOGICAL NAME BLOCK.
;
; OUTPUTS:
;
;	R0 IS PRESERVED.
;--
DALLOC_LOGNAM:				;DEALLOCATE LOGICAL NAME BLOCK
	PUSHL	R0			;SAVE STATUS
	MOVL	R10,R0			;SET ADDRESS OF BLOCK
	JSB	EXE$DEAPAGED		;DEALLOCATE THE BLOCK
	POPL	R0			;RESTORE STATUS
	RSB				;
	.PAGE
	.SBTTL	SEARCH_SHMMBX - SEARCH FOR SHARED MEMORY MAILBOX
;++
; THIS ROUTINE IS CALLED TO SEARCH THE SPECIFIED SHARED MEMORY MAILBOX
; TABLE TO SEE IF THE SPECIFIED MAILBOX ALREADY EXISTS.
;
; INPUTS:
;
;	R11 = ADDRESS OF MAILBOX NAME DESCRIPTOR.
;	SHBADDR(FP) = ADDRESS OF SHARED MEMORY CONTROL BLOCK.
;
; OUTPUTS:
;
;	R0 = SUCCESS IF FOUND
;
;		R7 = ADDRESS OF MAILBOX CONTROL BLOCK.
;
;		EXITS TO UNLOCK_SHMMBX.
;
;	ELSE, NOT FOUND AND
;
;		R7 = ADDRESS OF FIRST UNALLOCATED MAILBOX BLOCK.
;
;		EXITS TO CREATE_SHMMBX
;
;	R6 = ADDRESS OF SHARED MEMORY CONTROL BLOCK.
;
;	MAILBOX TABLE MUTEX OWNED, MAILBOX TABLE LOCK OWNED, IPL = 31.
;--
SEARCH_SHMMBX:				;SEARCH SHARED MEMORY MAILBOXES
	MOVAL	EXE$GL_SHMMBMTX,R0	;GET ADDRESS OF MAILBOX MUTEX
	BSBW	SCH$LOCKW		;LOCK SHARED MEMORY MAILBOX MUTEX
	SETIPL	SHMMBX_CODE		;LOCK CODE IN MEMORY
	MOVL	SHBADDR(FP),R6		;GET ADDRESS OF SHB
	MOVL	SHB$L_DATAPAGE(R6),R1	;GET ADDRESS OF MEMORY DATAPAGE
	LOCK	#SHD$V_MBXLCK,SHD$B_FLAGS(R1) ;LOCK MAILBOX TABLE
	ADDL3	SHD$L_MBXPTR(R1),R1,R7	;GET ADDRESS OF FIRST MAILBOX
	MOVZWL	SHD$W_MBXMAX(R1),-(SP)	;GET NUMBER OF MAILBOXES
	CLRL	-(SP)			;SET NO UNALLOCATED ENTRY YET
20$:
	BBC	#MBX$V_VALID,MBX$B_FLAGS(R7),30$ ;IF CLR MAILBOX NOT VALID
	MOVZBL	MBX$T_NAME(R7),R0	;GET MAILBOX NAME SIZE
	CMPC5	(R11),@4(R11),#0,-	;MAILBOX NAME MATCH ONE SPECIFIED?
		R0,MBX$T_NAME+1(R7)	;
	BNEQ	40$			;IF NEQ NO - TRY NEXT ONE
	ADDL	#8,SP			;REMOVE MAILBOX COUNT + POINTER
	MOVZBL	SHB$B_PORT(R6),R0	;GET PORT NUMBER
	BBSSI	R0,MBX$W_REF(R7),35$	;SET PORT'S REFERENCE FLAG
35$:					;
	MOVL	S^#SS$_NORMAL,R0	;SET SUCCESS
	BRW	UNLOCK_SHMMBX		;
30$:
	TSTL	(SP)			;FIND AN UNALLOCATED ENTRY YET?
	BNEQ	40$			;IF NEQ YES
	MOVL	R7,(SP)			;SAVE ADDRESS OF UNALLOCATED ENTRY
40$:
	ADDL	#MBX$C_LENGTH,R7	;INCREMENT MAILBOX POINTER
	SOBGTR	4(SP),20$		;DECREMENT MAILBOX COUNTER AND LOOP
	POPL	R7			;GET ADDRESS OF UNALLOCATED ENTRY
	ADDL	#4,SP			;REMOVE MAILBOX COUNT FROM STACK
					;CONTINUE IN CREATE_SHMMBX
	.PAGE
	.SBTTL	CREATE_SHMMBX - CREATE SHARED MEMORY MAILBOX BLOCK
;++
; THIS ROUTINE IS CALLED TO CREATE A SHARED MEMORY MAILBOX CONTROL BLOCK.
;
; INPUTS:
;
;	R6 = ADDRESS OF SHARED MEMORY CONTROL BLOCK.
;	R7 = ADDRESS OF FIRST UNALLOCATED ENTRY IN MAILBOX TABLE.
;	R8 = BYTE COUNT QUOTA OF MESSAGES.
;	00(SP) = SAVED PROCESSOR IPL.
;
;	MAILBOX TABLE MUTEX OWNED, MAILBOX TABLE LOCK OWNED, IPL = 31.
;
; OUTPUTS:
;
;	R0 = SUCCESS OR FAILURE.
;	R7 = ADDRESS OF CREATED MAILBOX CONTROL BLOCK.
;--
CREATE_SHMMBX:				;CREATE SHARED MEMORY MAILBOX
	MOVZWL	#SS$_NOSHMBLOCK,R0	;ASSUME NO SLOT AVAILABLE
	TSTL	R7			;WAS A SLOT AVAILABLE?
	BEQL	UNLOCK_SHMMBX		;IF EQL NO SLOT FOUND
	MOVZWL	#SS$_EXPORTQUOTA,R0	;ASSUME PORT'S MAILBOX LIMIT EXCEEDED
	MOVL	SHB$L_DATAPAGE(R6),R1	;GET DATAPAGE ADDRESS
	MOVZBL	SHB$B_PORT(R6),R2	;GET PORT NUMBER
	TSTW	SHD$W_MBXQUOTA(R1)[R2] 	;DOES PORT HAVE ANY MAILBOX QUOTA LEFT?
	BLEQ	UNLOCK_SHMMBX		;IF LEQ QUOTA EXHAUSTED
	DECW	SHD$W_MBXQUOTA(R1)[R2]	;DECREMENT PORT'S QUOTA
	MOVB	R2,MBX$B_CREATPORT(R7)	;SET CREATOR PORT NUMBER
	CLRQ	MBX$Q_MSG(R7)		;INITIALIZE MESSAGE QUEUE LISTHEAD
	ASSUME MBX$W_REF+2 EQ MBX$W_READER
	ASSUME MBX$W_READER+2 EQ MBX$W_READAST
	ASSUME MBX$W_READAST+2 EQ MBX$W_WRITAST
	CLRQ	MBX$W_REF(R7)		;INIT REF FLAGS, READER, READAST, AND WRITAST
	ASHL	R2,#1,MBX$W_REF(R7)	;SET THIS PORT'S REFERENCE FLAG
	CLRW	MBX$W_MSGCNT(R7)	;CLEAR MESSAGE COUNT
	MOVW	MAXMSG(AP),MBX$W_MAXMSG(R7) ;SET MAXIMUM MESSAGE SIZE
	BNEQ	10$			;IF NEQ MESSAGE SIZE SPECIFIED
	MOVW	IOC$GW_MBXMXMSG,MBX$W_MAXMSG(R7) ;SET DEFAULT MAXIMUM SIZE
10$:	MOVW	R8,MBX$W_BUFFQUO(R7)	;SET BUFFER QUOTA
	MOVW	PROMSK(AP),MBX$W_PROT(R7) ;SET PROTECTION MASK
	MOVL	PCB$L_UIC(R4),MBX$L_OWNUIC(R7) ;SET OWNER UIC
	PUSHR	#^M<R4,R5>		;SAVE MOVC REGISTERS
	MOVC5	(R11),@4(R11),#0,-	;SET MAILBOX NAME
		#15,MBX$T_NAME+1(R7)	;
	POPR	#^M<R4,R5>		;RESTORE MOVC REGISTERS
	MOVB	(R11),MBX$T_NAME(R7)	;SET MAILBOX NAME SIZE
	BISB	#MBX$M_VALID,MBX$B_FLAGS(R7) ;MARK MAILBOX VALID
	MOVL	S^#SS$_NORMAL,R0	;SET SUCCESS
UNLOCK_SHMMBX:				;UNLOCK SHARED MEMORY MAILBOXES
	MOVL	SHB$L_DATAPAGE(R6),R1	;GET ADDRESS OF MEMORY DATAPAGE
	UNLOCK	#SHD$V_MBXLCK,SHD$B_FLAGS(R1) ;UNLOCK MAILBOX TABLE
	PUSHL	R0			;SAVE EXIT STATUS
	MOVAL	EXE$GL_SHMMBMTX,R0	;GET ADDRESS OF MAILBOX MUTEX
	BSBW	SCH$UNLOCK		;UNLOCK SHARED MEMORY MAILBOX MUTEX
	POPL	R0			;RESTORE EXIT STATUS
	SETIPL	#IPL$_ASTDEL		;RESTORE IPL
	RSB				;
SHMMBX_CODE:				;IPL TO LOCK PREVIOUS CODE IN MEMORY
	.LONG	IPL$_SYNCH
	ASSUME	<.-SEARCH_SHMMBX> LE 512 ;CAN ONLY LOCK 1 PAGE
	.PAGE
	.SBTTL	CREATE_SHMUCB - CREATE SHARED MEMORY MAILBOX UCB
;++
; THIS ROUTINE IS CALLED TO CREATE A UCB FOR A SHARED MEMORY MAILBOX.
;
; INPUTS:
;
;	R5 = ADDRESS OF TEMPLATE MAILBOX UCB.
;	R6 = ADDRESS OF SHARED MEMORY CONTROL BLOCK.
;	R7 = ADDRESS OF SHARED MEMORY MAILBOX CONTROL BLOCK.
;	R8 = BYTE COUNT QUOTA FOR MESSAGES.
;
; OUTPUTS:
;
;	R0 = SUCCESS OR FAILURE.
;	R6 = ADDRESS OF CREATED UCB.
;
;	EXECUTES AT DEVICE IPL, IPL$_MAILBOX.
;	I/O DATABASE LOCKED FOR WRITE.
;--
CREATE_SHMUCB:				;CREATE SHARED MEMORY MAILBOX UCB
	SUBW3	#1,MBX$W_UNIT(R7),UCB$W_MB_SEED(R5) ;SET UNIT NUMBER (LESS ONE)
	DSBINT	#IPL$_MAILBOX		;LOCK OUT PRQ'S UNTIL UCB COMPLETE
	BSBW	IOC$CREATE_UCB		;CREATE MAILBOX UCB
	BLBC	R0,20$			;IF LBC ALLOCATION FAILURE
	MOVL	R6,UCB$L_MB_SHB(R2)	;SAVE ADDRESS OF SHB
	INCL	SHB$L_REFCNT(R6)	;INCREMENT MEMORY REFERENCE COUNT
	MOVZBL	SHB$B_PORT(R6),UCB$L_MB_PORT(R2) ;SET PORT NUMBER
	MOVL	R2,R6			;SAVE ADDRESS OF UCB
	MOVL	R7,UCB$L_MB_MBX(R6)	;SAVE ADDRESS OF MAILBOX
	MOVAL	UCB$L_MB_WIOQFL(R6),UCB$L_MB_WIOQFL(R6) ;INIT WRITE I/O REQUEST QUEUE
	MOVAL	UCB$L_MB_WIOQFL(R6),UCB$L_MB_WIOQBL(R6) ;
	ASSUME	MBX$W_BUFFQUO+2 EQ MBX$W_PROT
	ASSUME	UCB$W_BUFQUO+2 EQ UCB$W_VPROT
	MOVL	MBX$W_BUFFQUO(R7),UCB$W_BUFQUO(R6) ;SET BUFFER QUOTA AND PROTECTION
	MOVL	MBX$L_OWNUIC(R7),UCB$L_OWNUIC(R6) ;SET OWNER UIC
	MOVW	MBX$W_MAXMSG(R7),UCB$W_DEVBUFSIZ(R6) ;SET MAXIMUM MESSAGE SIZE
10$:
	BSBB	COMP_CHARGES		;COMPUTE QUOTA CHARGES
	MOVZWL	UCB$W_UNIT(R6),R2	;GET UNIT NUMBER
	MOVL	UCB$L_CRB(R6),R1	;GET CRB ADDRESS
	MOVL	CRB$L_INTD+VEC$L_IDB(R1),R1 ;GET IDB ADDRESS
	MOVL	R6,IDB$L_UCBLST(R1)[R2]	;SET UCB ADDRESS IN IDB LIST
	BISW	#UCB$M_ONLINE,UCB$W_STS(R6) ;SET MAILBOX ONLINE
20$:
	ENBINT				;ALLOW PRQ PROCESSING NOW
	RSB				;
	.PAGE
	.SBTTL	CREATE_LOCALUCB - CREATE LOCAL MEMORY MAILBOX UCB
;++
; THIS ROUTINE IS CALLED TO CREATE A UCB FOR A LOCAL MEMORY MAILBOX.
;
; INPUTS:
;
;	R5 = ADDRESS OF TEMPLATE MAILBOX UCB.
;	R8 = BYTE COUNT QUOTA FOR MESSAGES.
;
; OUTPUTS:
;
;	R0 = SUCCESS OR FAILURE.
;	R6 = ADDRESS OF CREATED UCB.
;--
	.ENABL	LSB
CREATE_LOCALUCB:			;CREATE LOCAL MEMORY MAILBOX UCB
	BSBW	IOC$CREATE_UCB		;CREATE MAILBOX UCB
	BLBC	R0,20$			;IF LBC ALLOCATION FAILURE
	MOVL	R2,R6			;SAVE ADDRESS OF ALLOCATED UCB
	MOVW	R8,UCB$W_BUFQUO(R6)	;SET BUFFER QUOTA
	MOVW	PROMSK(AP),UCB$W_VPROT(R6) ;SET PROTECTION MASK
	CLRL	UCB$L_PID(R6)		;CLEAR OWNER PID
	MOVW	MAXMSG(AP),UCB$W_DEVBUFSIZ(R6) ;SET MAXIMUM MESSAGE SIZE
	BNEQ	COMP_CHARGES		;IF NEQ MESSAGE SIZE SPECIFIED
	MOVW	IOC$GW_MBXMXMSG,UCB$W_DEVBUFSIZ(R6) ;SET DEFAULT MAXIMUM SIZE
;
; COMPUTE BYTE COUNT CHARGES
;
COMP_CHARGES:
	CLRL	UCB$L_DEVDEPEND(R6)	;INIT USER VISABLE CURRENT MESSAGE COUNT
	ADDW3	UCB$W_SIZE(R6),R8,R1	;COMPUTE TOTAL BYTE COUNT CHARGE
	MOVW	R1,UCB$W_CHARGE(R6)	;INSERT BYTE COUNT QUOTA CHARGE
	BLBC	R9,10$			;IF LBC TEMPORARY MAILBOX
	BBCS	#UCB$V_PRMMBX,-		;SET PERMANENT MAILBOX
		UCB$W_DEVSTS(R6),20$
10$:	BISW	#UCB$M_DELMBX,UCB$W_DEVSTS(R6) ;MARK MAILBOX FOR DELETE
	MOVZWL	R1,-(SP)		;CONVERT TO LONGWORD
	MOVL	PCB$L_JIB(R4),R1	;GET JIB ADDRESS
	SUBL	(SP),JIB$L_BYTLM(R1)	;REDUCE PROCESS BYTE COUNT LIMIT
	SUBL	(SP)+,JIB$L_BYTCNT(R1)	;REDUCE PROCESS BYTE COUNT QUOTA
20$:
	RSB				;
	.DSABL	LSB
 
		.PAGE
	.SBTTL	CREATE_LOGNAM - CREATE LOGICAL NAME
;++
; THIS ROUTINE IS CALLED TO FILL-IN THE ALLOCATED LOGICAL NAME BLOCK
; AND INSERT IT INTO THE APPROPRIATE LOGICAL NAME TABLE.
;
; INPUTS:
;
;	R6 = ADDRESS OF MAILBOX UCB.
;	R10 = ADDRESS OF LOGICAL NAME BLOCK.
;	R11 = ADDRESS OF LOGICAL NAME DESCRIPTOR.
;
;	LOGICAL NAME TABLE LOCKED FOR WRITE.
;
; OUTPUTS:
;
;	R0 = INSERTION STATUS.
;
;	EXITS TO ASSIGN.
;--
CREATE_LOGNAM:				;CREATE LOGICAL NAME
	MOVL	R10,UCB$L_LOGADR(R6)	;SET ADDRESS OF LOGICAL NAME BLOCK
	MOVAB	LOG$B_TYPE(R10),R2	;GET ADDRESS OF BLOCK TYPE
	MOVB	#DYN$C_LOG,(R2)+	;SET DATA STRUCTURE TYPE CODE
	MOVB	LOGTABLE(FP),(R2)+	;SET TABLE NUMBER
	MOVZWL	PCB$W_GRP(R4),(R2)+	;INSERT CREATOR GROUP
	MOVL	R6,(R2)+		;INSERT ADDRESS OF MAILBOX UCB
	MOVQ	(R11),R0		;GET LOGICAL NAME DESCRIPTOR
	MOVB	R0,(R2)+		;INSERT LENGTH OF LOGICAL NAME
	MOVAB	(R2)[R0],R3		;GET ADDRESS OF EQUIVALENCE STRING
	PUSHR	#^M<R3,R4,R5>		;SAVE MOVC REGISTERS
	MOVC	R0,(R1),(R2)		;INSERT LOGICAL NAME STRING
	POPR	#^M<R3,R4,R5>		;RESTORE MOVC REGISTERS
	ADDL3	#1,R3,R1		;CALCULATE ADDRESS OF OUTPUT BUFFER
	MOVZBL	#MBXNAMSIZ,R0		;SET LENGTH OF OUTPUT BUFFER
	MOVL	R6,R5			;MOVE UCB ADDRESS TO R5
	BSBW	IOC$CVT_DEVNAM		;CONVERT DEVICE NAME AND UNIT
	MOVB	R1,(R3)			;SET LENGTH OF CONVERTED DEVICE NAME
	MOVL	R10,R5			;SET LOGICAL NAME BLOCK ADDRESS
	MOVZBL	LOG$B_TABLE(R5),R3	;GET TABLE NUMBER
	BSBW	LOG$INSLOGN_LCK		;INSERT NAME IN TABLE AND EXIT
	.PAGE
	.SBTTL	ASSIGN - ASSIGN CHANNEL TO MAILBOX
;++
; THIS ROUTINE IS CALLED TO ASSIGN A CHANNEL TO THE MAILBOX,
; UNLOCK THE I/O DATABASE, AND EXIT THE SYSTEM SERVICE.
;
; INPUTS:
;
;	CHANADDR(FP) = ADDRESS TO STORE CHANNEL NUMBER.
;	CHANNUM(FP) = CHANNEL NUMBER.
;	CCBADDR(FP) = ADDRESS OF CCB FOR CHANNEL NUMBER.
;	R6 = ADDRESS OF UCB
;
; OUTPUTS:
;
;	CHANNEL NUMBER STORED AT CALLER'S ADDRESS.
;	I/O DATABASE UNLOCKED AND SERVICE EXITED.
;--
ASSIGN:					;ASSIGN CHANNEL
	ASSUME	CHANNUM+4 EQ CCBADDR
	ASSUME	CCBADDR+4 EQ CHANADDR
	MOVQ	CCBADDR(FP),R10		;RETRIEVE CCB AND CHANNEL ADDRESSES
	MOVW	CHANNUM(FP),(R11)	;STORE CHANNEL NUMBER
	MOVL	R6,CCB$L_UCB(R10)	;STORE UCB ADDRESS IN CCB
	EXTZV	#0,#2,ACMODE(AP),R0	;GET SPECIFIED ACCESS MODE
	BSBW	EXE$MAXACMODE		;MAXIMIZE ACCESS MODE
	ADDB3	#1,R0,CCB$B_AMOD(R10)	;STORE ASSIGN ACCESS MODE
	MOVZWL	#SS$_NORMAL,R0		;SET FINAL STATUS
	BRW	IOC$UNLOCK		;UNLOCK I/O BATA BASE AND RETURN

	.PAGE
	.SBTTL	DELETE MAILBOX
;+
; EXE$DELMBX - DELETE MAILBOX
;
; THIS SERVICE PROVIDES THE CAPABILITY TO MARK A PERMANENT MAILBOX FOR
; DELETION. ACTUAL DELETION OF THE MAILBOX OCCURS WHEN ITS REFERENCE COUNT
; REACHES ZERO.
;
; INPUTS:
;
;	DLCHAN(AP) = CHANNEL NUMBER THAT THE MAILBOX TO BE DELETED IS ASSIGNED TO.
;
;	R4 = CURRENT PROCESS PCB ADDRESS.
;
; OUTPUTS:
;
;	R0 LOW BIT CLEAR INDICATES FAILURE TO MARK MAILBOX FOR DELETE.
;
;		R0 = SS$_DEVNOTMBX - SPECIFIED CHANNEL IS NOT ASSIGNED TO A
;			MAILBOX.
;
;		R0 = SS$_IVCHAN - INVALID CHANNEL NUMBER SPECIFIED.
;
;		R0 = SS$_NOPRIV - PROCESS DOES NOT HAVE PRIVILEGE TO DELETE A
;			PERMANENT MAILBOX, SPECIFIED CHANNEL IS NOT ASSIGNED
;			TO A DEVICE, OR THE CALLER DOES NOT HAVE SUFFICIENT
;			PRIVILEGE TO ACCESS THE CHANNEL.
;
;	R0 LOW BIT SET INDICATES SUCCESSFUL COMPLETION.
;
;		R0 = SS$_NORMAL - NORMAL COMPLETION.
;-
 
	.ENTRY	EXE$DELMBX,^M<R2,R3,R4,R5>
	MOVZWL	DLCHAN(AP),R0		;GET CHANNEL NUMBER OF MAILBOX
	BSBW	IOC$VERIFYCHAN		;VERIFY CHANNEL NUMBER
	BLBC	R0,20$			;IF LBC INVALID CHANNEL
	MOVL	CCB$L_UCB(R1),R5	;GET ASSIGNED DEVICE UCB ADDRESS
	MOVZWL	#SS$_DEVNOTMBX,R0	;SET DEVICE NOT MAILBOX STATUS
	BBC	#DEV$V_MBX,UCB$L_DEVCHAR(R5),20$ ;IF CLR, DEVICE NOT MAILBOX
	MOVZWL	#SS$_NOPRIV,R0		;ASSUME CALLER DOES NOT HAVE PRIVILEGE
	BBC	#UCB$V_PRMMBX,UCB$W_DEVSTS(R5),10$ ;IF CLR, NOT PERMANENT MAILBOX
	IFNPRIV	PRMMBX,20$		;CALLER HAVE PRIVILEGE TO DELETE?
	BISW	#UCB$M_DELMBX,UCB$W_DEVSTS(R5) ;MARK MAILBOX FOR DELETION
10$:	MOVZWL	#SS$_NORMAL,R0		;SET NORMAL COMPLETION
20$:	RET				;
 
	.END
