	.TITLE	MBDRIVER - VAX/VMS MAILBOX DEVICE DRIVER 
	.IDENT	'V03-001'
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
; FACILITY:
;
;	VAX/VMS MAILBOX DEVICE DRIVER
;
; ABSTRACT:
;
;	THIS MODULE CONTAINS THE MAILBOX DRIVER I/O ROUTINES.
;
; AUTHOR: R. HEINEN 16-SEPT-76
;
; MODIFIED BY:
;
;	V03-001	ROW0076		Ralph O. Weber		27-MAR-1982
;		Fix READCHECKIO and WRITECHECKIO to test length of transfer 
;		and return immediate success if the length is zero.  The form 
;		of this fix is duplicated from MBXDRIVER, the shared memory 
;		mailbox driver.
;
;	V02-013	SRB0045		Steve Beckhardt		13-Jan-1981
;		Fixed synchronization bug involving going into MWAIT
;		due to insufficient pool or mailbox full.
;
;	V02-012	STJ0135		Steven T. Jeffreys,	30-Oct-1981
;		Use the symbol SYS$C_MBXUCBSIZ for the size of a mailbox UCB.
;
;	V02-011 STJ0025		Steven T. Jeffreys	05-Feb-1981
;		Modify FDTSET to default to IO$M_WRTATTN if no function
;		modifier is present.
;
;	V02-010	STJ0018		Steven T. Jeffreys	28-Jan-1981
;		Modified FDTSET to support SETPROT function.  Changed
;		EXE$WRTMAILBOX path to check for system write access
;		allowed and return SS$_INSFMEM if nonpaged pool
;		cannot be allocated.
;
;	V2-009	LMK0002		Len Kawell		09-Jun-1980
;		Allow zero length messages.
;
;	V0008	LMK0001		Len Kawell		8-Feb-1980
;		Remove maximum number of messages checks (UCB$W_MSGMAX)
;		since there is no way to set it on a per mailbox basis
;		and the buffer quota is sufficient protection.
;
;		Also, return SS$_INSFMEM and SS$_MBFULL when resource wait is
;		disabled.
;
;	V0007	ACG0047		Andrew C. Goldstein,	8-Aug-1979  17:10
;		Protection check interface changes
;
;--
; EXTERNAL SYMBOLS
;
	$ACBDEF				; DEFINE AST CONTROL BLOCK
	$CADEF				; DEFINE CONDITIONAL ASSEMBLY
	$DDBDEF				; DEFINE DDB
	$DYNDEF				; DEFINE DYNAMIC BLOCK TYPES
	$IODEF				; DEFINE FUNCTION CODES
	$IRPDEF				; DEFINE I/O PACKET OFFSETS
	$IPLDEF				; DEFINE IPL NUMBERS
	$PCBDEF				; DEFINE PCB OFFSETS
	$PRDEF				; DEFINE PROCESSOR REGISTERS
	$PRIDEF				; DEFINE PRIORITY INCREMENTS
	$RSNDEF				; DEFINE RESOURCE NUMBERS
	$SSDEF				; DEFINE SYSTEM STATUS CODES
	$UCBDEF				; DEFINE UCB OFFSETS
 
;
; LOCAL DEFINITIONS
;
UCB$L_MB_MSGQ	=UCB$L_FQFL
UCB$L_MB_W_AST	= UCB$L_ASTQFL
UCB$L_MB_R_AST	= UCB$L_ASTQBL
 
P1		= 0			; OFFSET TO BUFFER ADDRESS IN ARGUMENT BLOCK
P2		= 4			; OFFSET TO REQUEST SIZE IN ARGUMENT BLOCK
P3		= 8			; OFFSET FOR PARAMETER 3
P4		= 12			; OFFSET FOR PARAMETER 4
 
;
; LOCAL DATA STORAGE
;
	.PSECT	$$$105_PROLOGUE
MB$DPT::				; DRIVER START
	DPTAB	-			; DRIVER PROLOGUE TABLE
		END=MB_END,-		; END OF DRIVER
		ADAPTER=UBA,-		; FAKE ADAPTER
		UCBSIZE=SYS$C_MBXUCBSIZ,- ; SIZE OF UCB
		NAME=MBDRIVER		; DRIVER NAME
	DPT_STORE INIT			;
	DPT_STORE REINIT		;
	DPT_STORE END			; START AND END OF CONTROLLER INIT
 
	.PSECT	$$$115_DRIVER,LONG
 
	DDTAB	MB,-			; DRIVER DISPATCH TABLE
		STARTIO,-		; STARTIO OPERATION
		0,-			; NO UNSOLICITED INTERRUTPS
		FUNCTABLE,-		; FUNCTION DECISION TABLE
		CANCELIO,-		; CANCEL I/O
		0,-			; REGISTER DUMP ROUTINE
		0,-			; SIZE OF DIAGNOSTIC BUFFER
		0			; SIZE OF ERROR LOG BUFFER
 
;
; FUNCTION DECISION TABLE
;
 
FUNCTABLE:				; FUNCTION DECISION TABLE
	FUNCTAB	,<-			; LEGAL FUNCTIONS
		SETMODE,-		; ASK FOR READ OR WRITE AST'S
		WRITEOF,-		; WRITE EOF
		READLBLK,WRITELBLK,-
		READVBLK,WRITEVBLK,-
		READPBLK,WRITEPBLK>
	FUNCTAB,<READLBLK,READVBLK,READPBLK,-
		WRITELBLK,WRITEVBLK,WRITEPBLK>
	FUNCTAB FDTREAD,<READLBLK,READPBLK,READVBLK>; READ FUNCTION
	FUNCTAB FDTWRITE,<WRITELBLK,WRITEPBLK,WRITEVBLK>; WRITE FUNCTION
	FUNCTAB	FDTSET,<SETMODE>	; SET AST CONTROL
	FUNCTAB	FDTEOF,<WRITEOF>	; WRITE EOF

	.SBTTL	EXE$SNDEVMSG - SEND DEVICE DRIVER MAILBOX MESSAGE
;++
; EXE$SNDEVMSG - SEND DEVICE SPECIFIC MESSAGE ON BEHALF OF DRIVER
;
; FUNCTIONAL DESCRIPTION:
;
; THIS ROUTINE BUILDS AND SENDS A DEVICE SPECIFIC MESSAGE TO A MAILBOX.
; THE MESSAGE IS FORMATTED AS FOLLOWS:
;
;	WORD 0   = TYPE OF MESSAGE
;	WORD 1   = UNIT OF DEVICE
;	REMAINDER = COUNTED STRING OF DEVICE NAME
;
; INPUTS:
;
;	R3 = MAILBOX UCB ADDRESS
;	R4 = TYPE OF MESSAGE
;	R5 = DEVICE UCB ADDRESS
;
;
; OUTPUTS:
;
;	R0 = STATUS OF THE OPERATION
;	R1,R2,R3,R4,R5 ARE DISTROYED
;
; STATUS RETURNS:
;
;	SEE EXE$WRTMAILBOX.
;--
EXE$SNDEVMSG::				; SEND MESSAGE FOR DEVICE DRIVER
	PUSHL	R5			; SAVE SENDING DEVICE UCB
	PUSHR	#^M<R4,R5,R6,R7,R8>	; PUSH MESSAGE TYPE AND RESERVE SPACE
	MOVW	UCB$W_UNIT(R5),2(SP)	; INSERT UNIT OF DEVICE
	MOVL	UCB$L_DDB(R5),R5	; ADDRESS SENDING DDB
	MOVL	SP,R2			; COPY MESSAGE ADDRESS
	PUSHR	#^M<R2,R3>		; SAVE MESSAGE ADDRESS AND TARGET UCB
	EXTZV	#0,#4,DDB$T_NAME(R5),-(SP); GET SIZE OF NAME TO 15 CHARAS
	INCL	(SP)			; SET UP TO COPY SIZE TOO
	MOVC3	(SP),DDB$T_NAME(R5),4(R2); COPY NAME
	ADDL3	#4,(SP)+,R3		; GET TOTAL MESSAGE SIZE
	POPR	#^M<R4,R5>		; GET ADDRESS AND TARGET UCB
	BSBB	EXE$WRTMAILBOX		; DO THE MAILBOX WRITE
	ADDL	#20,SP			; RESTORE STACK
	POPR	#^M<R5>			; RESTORE SENDING UCB
	RSB				; RETURN

	.SBTTL	SYSTEM INTERNAL WRITE TO MAILBOX SUBROUTINE
;++
; EXE$WRTMAILBOX - WRITE TO MAILBOX SUBROUTINE FOR EXECUTIVE USE
;
; FUNCTIONAL DESCRIPTION:
;
; THIS ROUTINE IS USED BY SYSTEM ROUTINES TO WRITE A MESSAGE TO A MAILBOX.
;
; INPUTS:
;
;	R3 = SIZE OF MESSAGE
;	R4 = MESSAGE ADDRESS
;	R5 = MAILBOX UCB ADDRESS
;
; OUTPUTS:
;
;	R0 = STATUS OF OPERATION
;
;	R1,R2 USED.
;
; COMPLETION CODES:
;
;	SS$_NORMAL
;	SS$_MBTOOSML - MESSAGE TOO LARGE FOR MAILBOX
;	SS$_MBFULL - MAILBOX FULL OF MESSAGES
;	SS$_INSFMEM - MEMORY ALLOCATION PROBLEM
;	SS$_NOPRIV - NO OWNER WRITE ACCESS
;
;--
EXE$WRTMAILBOX::			;
;
; SET THE PROPER IPL FOR INTERLOCK
;
	MFPR	#PR$_IPL,-(SP)		; SAVE CURRENT IPL
	CMPB	#IPL$_MAILBOX,(SP)	; HIGH ENOUGH?
	BLEQU	10$			; IF LEQU THEN YES
	SETIPL	#IPL$_MAILBOX		; SET THE PROPER IPL
;
; MAIL THE MESSAGE
;
10$:	MOVZWL	#SS$_MBFULL,R0		; ASSUME MESSAGE WILL NOT FIT
	CMPW	R3,UCB$W_BUFQUO(R5)	; MESSAGE FIT?
	BGTRU	20$			; IF GTRU THEN NO
	MOVZWL	#SS$_MBTOOSML,R0	; ASSUME MESSAGE TOO BIG
	CMPW	R3,UCB$W_DEVBUFSIZ(R5)	; BIGGER THAN ALLOWED?
	BGTRU	20$			; IF YES THEN ALSO ERROR
	MOVZWL	#SS$_NOPRIV,R0		; ASSUME NO WRITE PRIVILEGE
	BBS	#5,UCB$W_VPROT(R5),20$	; BRANCH IF NO OWNER WRITE ACCESS
	ADDL3	#22,R3,R1		; COMPUTE SIZE OF MESSAGE BLOCK
	PUSHR	#^M<R3,R4,R5>		; SAVE REGISTERS FROM MOVC
	JSB	G^EXE$ALONONPAGED	; GET THE MEMORY BLOCK
	BLBS	R0,12$			; BRANCH IS SUCCESS
	MOVZWL	#SS$_INSFMEM,R0		; SET CORRECT ERROR STATUS
	BRB	15$			; RETURN ERROR STATUS
;
; FILL IN BLOCK
;
12$:	PUSHAQ	(R2)+			; SAVE BLOCK ADDRESS AND PASS LINK WORDS
	MOVW	R1,(R2)+		; INSERT BLOCK SIZE
	MOVW	#DYN$C_BUFIO,(R2)+	; INSERT BLOCK TYPE AND ZERO FUNCTION
	MOVW	4(SP),(R2)+		; INSERT SIZE OF MESSAGE
	CLRL	(R2)+			; SET NO PACKET
	MOVL	G^SCH$GL_CURPCB,R0	; GET CURRENT PCB
	MOVL	PCB$L_PID(R0),(R2)+	; INSERT IT ( WHATEVER IT IS! )
;
; COPY DATA
;
	MOVC3	4(SP),(R4),(R2)		; MOVE DATA
;
; INSERT IN MESSAGE QUEUE
;
	POPR	#^M<R2>			; RESTORE BLOCK ADDRESS
	MOVL	8(SP),R5		; RESTORE MAILBOX UCB ADDRESS
	BSBW	INSMBQUEUE		; INSERT ON QUEUE
	MOVZBL	#SS$_NORMAL,R0		; SET SUCCESS
15$:	POPR	#^M<R3,R4,R5>		; RESTORE REGISTERS
20$:	ENBINT				; ENABLE INTERUPTS TO CALLER'S IPL
	RSB				; AND RETURN

	.SBTTL	CANCELIO - CANCEL I/O ON MAILBOX UNIT
;++
; CANCELIO - CANCEL I/O ON MAILBOX UNIT
;
; FUNCTIONAL DESCRIPTION:
;
; THIS ROUTINE IS ENTERED TO CANCEL ALL OUTSTANDING I/O FOR A PARTICULAR
; PROCESS AND CHANNEL ON A MAILBOX UNIT.
; IF THE UNIT IS BUSY, THE CURRENT READ PACKET IS CHECKED AND COMPLETED
; IF IT BELONGS TO THE CANCELLING PROCESS. ALL QUEUED REQUESTS HAVE BEEN REMOVED.
; IF NO READER EXISTS THEN THE QUEUE OF OUTSTANDING MESSAGES IS SEARCHED
; FOR MESSAGES AND WAITING WRITES. IF A PID MATCH EXISTS THEN THESE I/O
; ARE ALSO COMPLETED ALONG WITH REMOVING THE MESSAGES.
; THE FINAL ACTION IS TO SEARCH THE QUEUE OF AST REQUESTS TO REMOVE THE ONES
; ASSOCIATED WITH THE CANCELLING PROCESS.
;
; INPUTS:
;
;	R2 = NEGITIVE OF CHANNEL NUMBER
;	R3 = CURRENT PACKET ADDRESS
;	R4 = PCB OF CANCELLING PROCESS
;	R5 = UCB OF UNIT
;
; OUTPUTS:
;
;	R4,R5 ARE PRESERVED
;
; IPL = MAILBOX IPL
;--
CANCELIO:				; CANCEL I/O ON MAILBOX UNIT
	PUSHR	#^M<R4,R5,R6,R7>	; SAVE R4-R7
	MOVL	R2,R6			; COPY CHANNEL NUMBER
	BBC	#UCB$V_BSY,UCB$W_STS(R5),10$; BUSY?
	CMPL	PCB$L_PID(R4),IRP$L_PID(R3); PIDS MATCH?
	BNEQ	40$			; IF NO THEN CANCEL DONE
	CMPW	R6,IRP$W_CHAN(R3)	; CHANNEL MATCH?
	BNEQ	40$			; IF NEQ THEN NO
	MOVQ	#SS$_ABORT,R0		; SET STATUS FOR ABORT
	JSB	G^IOC$REQCOM		; COMPLETE THE REQUEST
	BRB	40$			; AND CANCEL IS DONE
;
; NO READER WAITING - CHECK MESSAGE QUEUE
;
10$:	MOVAB	UCB$L_MB_MSGQ(R5),R2	; ADDRESS MESSAGE QUEUE
	MOVL	R2,R0			; COPY LIST HEAD ADDRESS
20$:	MOVL	(R2),R2			; ADDRESS LIST ENTRY
	CMPL	R0,R2			; END OF LIST?
	BEQL	40$			; IF YES THEN DONE
	CMPL	PCB$L_PID(R4),18(R2)	; MESSAGE BELONG TO CANCELLING PROCESS?
	BNEQ	20$			; IF NO THEN SEARCH MORE
	MOVL	14(R2),R3		; ADDRESS PACKET IF ANY
	BEQL	20$			; IF EQL THEN NO ASSOC PACKET
	CMPW	R6,IRP$W_CHAN(R3)	; CHANNEL MATCH?
	BNEQ	20$			; IF NEQ THEN NO
					; BUT GET RID OF MESSAGE
	MOVQ	#SS$_ABORT,IRP$L_MEDIA(R3); SET STATUS
	JSB	G^COM$POST		; COMPLETE THE OPERATION
30$:	REMQUE	(R2),R0			; REMOVE MESSAGE FROM QUEUE
	ADDW	12(R2),UCB$W_BUFQUO(R5)	; ADJUST QUOTA
	DECW	UCB$W_MSGCNT(R5)	; AND MESSAGE COUNT
	MOVW	UCB$W_MSGCNT(R5),UCB$L_DEVDEPEND(R5); SAVE IT
	JSB	G^COM$DRVDEALMEM	; DEALLOCATE MESSAGE
	BRB	10$			; SEARCH LIST FROM THE START
;
; SEARCH AST QUEUE
;
40$:	MOVAB	UCB$L_MB_W_AST(R5),R7	; ADDRESS LIST OF AST'S
	MOVL	(SP),R4			; GET CANCEL PCB
	JSB	G^COM$FLUSHATTNS	; FLUSH ATTENTION AST'S
	MOVAB	UCB$L_MB_R_AST(R5),R7	; ADDRESS WRITER AST'S
	JSB	G^COM$FLUSHATTNS	; FLUSH THAT LIST
	POPR	#^M<R4,R5,R6,R7>	; RESTORE REGISTERS R4-R7
	SETIPL	#IPL$_SYNCH		; LOWER IPL
	MOVZBL	#RSN$_MAILBOX,R0	; DECLARE RESOURCE AVAILABLE
	JMP	G^SCH$RAVAIL		;  AND RETURN TO CALLER

	.SBTTL	CHECKIO - CHECK READ AND WRITE PARAMETERS
;++
; READCHECKIO - CHECK READ PARAMETERS
; WRITECHECKIO - CHECK WRITE PARAMETERS
;
; FUNCTIONAL DESCRIPTION:
;
; THIS ROUTINE IS USED BY THE READ AND WRITE FDT ROUTINES TO VALIDATE THE
; I/O REQUEST. THE CHECKS ARE MADE BASED ON THE SETTING OF THE IRP$V_FUNC
; OPERATION DIRECTION BIT. THE CHECKS ARE, 1) ACCESS TO UNIT BY UIC,
; 2) MESSAGE REQUEST SIZE WITHIN MAX MESSAGE SIZE, 3) BUFFER ACCESSIBLE.
;
; ACCESS VIOLATIONS CAUSE COMPLETIONS HERE.
;
; INPUTS:
;
;	R3 = PACKET ADDRESS
;	R4 = PCB ADDRESS
;	R5 = UCB ADDRESS
;	R6 = CCB ADDRESS
;	R7 = FUNCTION CODE
;	R9 = (SCRATCH)
;	AP = ADDRESS OF THE FIRST QIO PARAMETER
;
; OUTPUTS:
;
;	R0 = BUFFER ADDRESS
;	R1 = BUFFER SIZE
;	R3 = PACKET ADDRESS
;	R4 = PCB ADDRESS
;	R5 = UCB ADDRESS
;
; IMPLICIT OUTPUTS:
;
;	THE BUFFER ADDRESS AND COUNT IS SAVED IN IRP$L_MEDIA.
;--
	.ENABL	LSB
READCHECKIO:				; CHECK READ PARAMETERS
	PUSHAB	G^EXE$READCHK		; READ CHECKS NEEDED
	MOVAB	G^EXE$CHKRDACCES,R9	;
	BRB	10$			; CONTINUE IN COMMON
WRITECHECKIO:				; SET UP FOR WRITE CHECK
	MOVAB	G^EXE$CHKWRTACCES,R9	; SET UP WRITE CHECK
	PUSHAB	G^EXE$WRITECHK		;
10$:	MOVL	PCB$L_ARB(R4),R0	; GET ACCESS RIGHTS BLOCK
	MOVZWL	UCB$W_VPROT(R5),R1	; SET UP FOR UIC CHECK
	MOVL	UCB$L_OWNUIC(R5),R2	;
	CLRW	IRP$W_BOFF(R3)		; RESET QUOTA
	JSB	(R9)			; CHECK UIC ACCESS
	BLBC	R0,ERROR		; BR IF ACCESS FAILURE
	MOVZWL	P2(AP),R1		; GET BUFFER SIZE
	BEQL	ZEROLENGTH		; IF EQL THEN COMPLETE HERE
	CMPW	R1,UCB$W_DEVBUFSIZ(R5)	; MESSAGE SIZE IN RANGE?
	BGTRU	50$			; IF GTRU THEN NO
	MOVL	P1(AP),R0		; GET BUFFER ADDRESS
	MOVL	R0,IRP$L_MEDIA(R3)	; SAVE BUFFER ADDRESS
	RSB				; RETURN AND CHECK BUFFER
50$:	MOVZWL	#SS$_MBTOOSML,R0	; SET BOX TOO SMALL
ERROR:	JMP	G^EXE$ABORTIO		; ABORT THE I/O

ZEROLENGTH:				; COMPLETE ZERO LENGTH TRANSFERS
	MOVZBL	#SS$_NORMAL,R0		; SET SUCCESS
	JMP	G^EXE$FINISHIOC		;
 
	.DSABL	LSB

	.SBTTL	FDTREAD - READ FUNCTION DECISION ROUTINE
;++
; FDTREAD - FUNCTION DECISION ROUTINE FOR READ OPERATIONS
;
; FUNCTIONAL DESCRIPTION:
;
; THE USER REQUEST IS VAILDATED FOR:
;
;	1.ACCESS BY UIC.
;	2.REQUEST WITHIN MAXIMUM MESSAGE SIZE.
;	3.BUFFER ACCESSIBLE FOR WRITE.
;
; THEN THE PACKET IS QUEUED ONTO THE UCB FOR PROCESSING WHEN THE UNIT IS IDLE.
;  FOR READ NOW FUNCTIONS, IF NO MESSAGES ARE PRESENT IN THE MAILBOX
; THE OPERATION IS COMPLETED.
;
; INPUTS:
;
;	R3 = I/O PACKET ADDRESS
;	R4 = CURRENT PCB ADDRESS
;	R5 = UCB ADDRESS
;	R6 = CCB ADDRESS
;	R7 = FUNCTION CODE
;	AP = PARAMETER BLOCK AT USER ARGUMENT "P1"
;
; OUTPUTS:
;
;	THE PACKET IS QUEUED VIA "EXE$QIODRVPKT" OR
;	THE REQUEST IS COMPLETED WITH AN ERROR VIA "EXE$ABORTIO"
;
; STATUS CODES:
;
;	SS$_NOPRIV - USER DOES NOT HAVE PRIVILEGE TO READ MAILBOX
;	SS$_ACCVIO - BUFFER ACCESS VIOLATION ( "EXE$READCHK" )
;	SS$_MBTOOSML - REQUEST EXCEEDS THE MAXIMUM MESSAGE SIZE
;	SS$_ENDOFFILE - FOR "READNOW" NO DATA RETURN
;	SS$_NORMAL - NORMAL STATUS ( "STARTIO" )
;--
FDTREAD:				;
	BSBB	READCHECKIO		; VALIDATE THE REQUEST
	BISW	#IRP$M_MBXIO,IRP$W_STS(R3); SET MAILBOX READ
;
; UPDATE MEASUREMENT COUNTER IF ENABLED
;
	.IF NE CA$_MEASURE
	INCL	PMS$GL_MBREADS		; COUNT MAILBOX READS
	.ENDC
;
; CHECK FOR READ NOW FUNCTIONS
;
	BBC	#IO$V_NOW,IRP$W_FUNC(R3),50$; BR IF NOT "NOW"
;
; READ NOW
;
; TEST TO SEE IF THERE ARE ANY MESSAGES WAITING
;
	SETIPL	#IPL$_MAILBOX		; SET TO FORK IPL
	TSTW	UCB$W_MSGCNT(R5)	; ANY MESSAGES?
	BNEQ	50$			; IF NEQ THEN YES
;
; COMPLETE "READNOW" FUNCTIONS BECAUSE NO MESSAGES ARE AVAILABLE
;
	MOVZWL	#SS$_ENDOFFILE,R0	; SET NO TRANSFER AND STATUS
	JMP	G^EXE$FINISHIOC		; COMPLETE THE I/O
;
; QUEUE PACKET TO DRIVER LIST
;
50$:	JMP	G^EXE$QIODRVPKT		; QUEUE PACKET ON UCB

	.SBTTL	FDTSET - HANDLE SET MODE FUNCTION
;++
; FDTSET - HANDLE SET MODE FUNCTION
;
; FUNCTIONAL DESCRIPTION:
;
; THIS ROUTINE IMPLEMENTS THE IO$_SETMODE FUNCTIONS.
; THE DIFFERENT FUNCTIONS ARE SELECTED BY A FUNCTION CODE MODIFIER.
; THE FUNCTIONS ARE:
;
;	IO$M_SETPROT	- SET VOLUME PROTECTION
;	IO$M_READATTN	- SET READ ATTENTION AST
;	IO$M_WRTATTN	- SET WRITE ATTENTION AST
;
; INPUTS:
;
;	R3 = I/O PACKET ADDRESS
;	R4 = CURRENT PCB
;	R5 = UCB ADDRESS FOR MAILBOX UNIT
;
; OUTPUTS:
;
;	NONE, THE I/O IS COMPLETED
;
; STATUS RETURNS:
;
;	SS$_NORMAL - SUCCESSUFL COMPLETION
;	SS$_INSFMEM - INSUFICIENT MEMORY
;	SS$_EXQUOTA - AST QUOTA EXCEEDED
;	SS$_ILLIOFUNC - ILLEGAL SET MODE FUNCTION
;	SS$_NOPRIV - NO PRIVILEGE FOR SETPROT FUNCTION
;--
FDTSET:					; SET RECEIVE AST FUNCTION

;
; GET THE FUNCTION MODIFIER BITS, AND MAKE SURE THAT ONLY ONE
; FUNCTION IS SPECIFIED.  IF NO BITS ARE SET, THEN IT IS A
; SET-WRITE-ATTENTION-AST FUNCTION.
;
	MOVZWL	#SS$_ILLIOFUNC,R0	; ASSUME ILLEGAL I/O FUNCTION
	EXTZV	#IRP$V_FMOD,#IRP$S_FMOD,IRP$W_FUNC(R3),R1
	BEQL	5$			; IF EQL THEN ASSUME DEFAULT
	SUBL3	#1,R1,R2		; SUBTRACT ONE FROM THE FUNCTION MODIFIER
	BICL3	R2,R1,R2		; CLEAR THE RESULT INTO THE ORIGINAL
	CMPL	R1,R2			; ARE THEY EQUAL?
	BNEQ	ERROR			; IF NOT EQL, THEN MORE THAN ONE BIT SET
	
;
; SEE IF THIS IS A SETPROT FUNCTION
;
	BBS	#IO$V_SETPROT,-		; BRANCH IF SETPROT FUNCTION
		IRP$W_FUNC(R3),50$	;
;
; SEE IF USER CAN READ THIS MAILBOX
;
5$:	MOVL	PCB$L_ARB(R4),R0	; GET ACCESS RIGHTS BLOCK
	MOVZWL	UCB$W_VPROT(R5),R1	; GET UNIT PROTECTION
	MOVL	UCB$L_OWNUIC(R5),R2	; GET OWNER UIC
	JSB	G^EXE$CHKRDACCES	; CHECK THE ACCESS OF THIS USER
	BLBC	R0,ERROR		; IF LOW CLEAR THEN ERROR
	MOVAB	UCB$L_MB_W_AST(R5),R7	; ASSUME WRITER AST
	BBC	#IO$V_READATTN,IRP$W_FUNC(R3),10$; BR IF NOT READER AST
	TSTL	(R7)+			; POINT TO READER AST LIST
10$:	PUSHR	#^M<R4,R7>		; SAVE PCB AND LIST HEAD
	JSB	G^COM$SETATTNAST	; CONTINUE IN COMMON
	POPR	#^M<R1,R4>		; POP PCB AND SET LIST HEAD ADDRESS
	SETIPL	#IPL$_MAILBOX		; SET UP THE IPL
	BBS	#IO$V_READATTN,IRP$W_FUNC(R3),15$; BR IF READER AST
					; DEFUALT IS WRITE ATTN
	TSTW	UCB$W_MSGCNT(R5)	; ANY MESSAGES?
	BEQL	25$			; IF EQL THEN NONE
	BRB	20$			; IF NEQ THEN DELIVER AST
15$:	BBC	#UCB$V_BSY,UCB$W_STS(R5),25$; BR IF NOT BUSY
20$:	JSB	G^COM$DELATTNAST	; DELIVER THE ASTS
25$:	MOVL	R1,R4			; RESTORE PCB
30$:	JMP	G^EXE$FINISHIOC		; COMPLETE THE I/O
;
; HANDLE THE SETPROT FUNCTION
;
50$:	MOVZWL	#SS$_NOPRIV,R0		; ASSUME NO PRIVILEGE
	CMPL	PCB$L_UIC(R4),-		; IS THIS THE VOLUME OWNER?
		UCB$L_OWNUIC(R5)	;
	BNEQ	52$			; BRANCH IF NOT
51$:	MOVW	P2(AP),R1		; GET THE PROTECTION MASK
	MOVZWL	#SS$_NORMAL,R0		; SET SUCCESS STATUS
	SETIPL	#IPL$_MAILBOX		; DISABLE DEVICE INTERRUPTS
	MOVW	R1,UCB$W_VPROT(R5)	; SET THE VOLUME PROTECTION
	BRB	30$			; COMPLETE THE I/O
52$:	BBS	#PRV$V_BYPASS,-		; BRANCH IF USER HAS BYPASS
		@PCB$L_PHD(R4),51$	;
	BRW	ERROR			; ABORT THE I/O

	.SBTTL	FDTEOF - WRITE EOF MESSAGE TO MAILBOX
;++
; FDTEOF - WRITE EOF MESSAGE TO THE MAILBOX
;
; FUNCTIONAL DESCRIPTION:
;
; THIS IS THE FDT ROUTINE FOR IO$WRITEOF. THE ACTION IS TO BUILD A
; ZERO LENGTH MESSAGE AND TO INSERT IT IN THE MAILBOX.  THE FUNCTION
; CODE IS SAVED IN THE MESSAGE AND INDICATES THAT THE MESSAGE WAS AN
; END-OF-FILE.
;
; INPUTS:
;
;	R3 = I/O PACKET ADDRESS
;	R4 = CURRENT PCB ADDRESS
;	R5 = MAILBOX UCB ADDRESS
;	R7 = I/O FUNCTION CODE.
;
; OUTPUTS:
;
;	THE I/O IS COMPLETED IN THE WRITE FDT LOGIC. ( SEE BELOW)
;--
FDTEOF:					;
	CLRL	IRP$W_BOFF(R3)		; SET NO TRANSFER AND NO QUOTA
	MOVL	PCB$L_ARB(R4),R0	; GET ACCESS RIGHTS BLOCK
	MOVZWL	UCB$W_VPROT(R5),R1	; GET VOLUME PROTECTION
	MOVL	UCB$L_OWNUIC(R5),R2	; GET THE OWNER UIC
	JSB	G^EXE$CHKWRTACCES	; CHECK THE ACCESS
	BLBC	R0,10$			; IF ERROR THEN BR
	CLRL	R1			; SET NO DATA
	MOVAB	(SP),R0			; FAKE GOOD ADDRESS FOR THE FUTURE MOVC
	BRB	WRITE			; WRITE THE MESSAGE
10$:	BRW	ERROR			; CONTINUE

	.SBTTL	FDTWRITE - WRITE OPERATION FDT ROUTINE
;++
; FDTWRITE -- FUNCTION DECISION ACTION ROUTINE FOR WRITE FUNCTIONS
;
; FUNCTIONAL DESCRIPTION:
;
; THE USER REQUEST IS VALIDATED FOR PRIVILEGE, SIZE, ACCESS AND AVAILABLE
; SPACE. IF VALID, A BUFFERED I/O BLOCK IS ALLOCATED (IMPLIED RESOURCE WAIT).
; THE BLOCK IS SET UP AND QUEUED TO THE UNIT MESSAGE LIST. IF THE UNIT
; IS BUSY, THE OUTSTANDING READ OPERATION IS COMPLETED DIRECTLY.
; IN THE CASE OF "WRITENOW" FUNCTIONS THE I/O IS COMPLETED BEFORE THE
; MESSAGE IS QUEUED. OTHERWISE THE READ COMPLETE ROUTINE COMPLETES
; THE MESSAGE ASSOCIATED WRITE.
;
; INPUTS:
;
;	R3 = I/O PACKET ADDRESS
;	R4 = CURRENT PCB ADDRESS
;	R5 = UCB ADDRESS
;	R6 = CCB ADDRESS
;	R7 = FUNCTION CODE
;	AP = ADDRESS OF USER ARGUMENT BLOCK AT "P1"
;
; OUTPUTS:
;
;	THE I/O IS COMPLETED IN ERROR, THE I/O IS RESTARTED BECAUSE OF
;	RESOURCE WAIT, OR THE I/O IS COMPETED NORMALLY.
;
; STATUS RETURNS:
;
;	SS$_MBTOOSML - MESSAGE IS TOO BIG
;	SS$_ACCVIO - BUFFER ACCESS VIOLATION ( "EXE$WRITECHK" )
;	SS$_MBFULL - MAILBOX IS FULL
;	SS$_NOPRIV - USER DOES NOT HAVE WRITE PRIVILEGE
;	SS$_NORMAL - SUCCESSFUL STATUS
;	SS$_INSFMEM - NO MEMORY FOR BUFFER ALLOCATION
;--
FDTWRITE:				;
	BSBW	WRITECHECKIO		; CHECK OPERATION PARAMETERS
WRITE:
	PUSHR	#^M<R0,R3>		; SAVE REGISTERS
	ADDL	#22,R1			; ADJUST REQUEST SIZE FOR HEADER
;
; GET BUFFER
;
	SETIPL	#IPL$_SYNCH		; RAISE TO IPL$_SYNCH
	JSB	G^EXE$ALONONPAGED	; ALLOCATE A BUFFER
	BLBC	R0,55$			; CONTINUE
	SETIPL	#IPL$_ASTDEL		; LOWER IPL
	POPR	#^M<R0,R3>		; RESTORE PACKET ADDRESS AND DATA ADDRESS
;
; SET UP BLOCK
;
	PUSHR	#^M<R2,R3,R4,R5>	; SAVE BLOCK,PACKET,PCB AND UCB
	ADDL	#8,R2			; POINT PAST FIXED PART
	MOVW	R1,(R2)+		; INSERT SIZE
	MOVB	#DYN$C_BUFIO,(R2)+	; INSERT TYPE
	MOVB	R7,(R2)+		; INSERT FUNCTION CODE
	MOVW	IRP$W_BCNT(R3),(R2)+	; INSERT MESSAGE SIZE
	MOVL	R3,(R2)+		; INSERT SAVED PACKET ADDRESS
	BBC	#IO$V_NOW,IRP$W_FUNC(R3),15$; BR IF NOT "NOW"
	CLRL	-4(R2)			; RESET MESSAGE PACKET POINTER
15$:	MOVL	PCB$L_PID(R4),(R2)+	; INSERT PID OF SENDER
;
; COPY DATA FROM USER TO SYSTEM
;
	MOVC3	IRP$W_BCNT(R3),(R0),(R2); MOVE CHARACTERS TO SYSTEM SPACE
	POPR	#^M<R2,R3,R4,R5>	; RESTORE REGISTERS
;
; CHECK TO SEE IF THERE IS ROOM IN MAILBOX FOR MESSAGE.  THAT IS, THAT
; THE MAILBOX'S BUFFER QUOTA IS NOT EXCEEDED.  THIS MUST BE DONE AT FORK
; IPL TO INTERLOCK WITH OTHER MAILBOX WRITERS.
;
20$:	DSBINT	#IPL$_MAILBOX		; RAISE TO DRIVER FORK LEVEL
	CMPW	IRP$W_BCNT(R3),UCB$W_BUFQUO(R5); MESSAGE FIT?
	BGTRU	60$			; IF GTR THEN NO
;
; QUEUE THE MESSAGE
;
	PUSHR	#^M<R3,R5>		; SAVE UCB ADDRESS AND PACKET
	BSBB	INSMBQUEUE		; INSERT THE MESSAGE
	POPR	#^M<R3,R5>		; RESTORE UCB ADDRESS AND PACKET
	ENBINT				; LOWER IPL
;
; SEE IF WRITE I/O GETS COMPLETED NOW
;
	BBS	#IO$V_NOW,IRP$W_FUNC(R3),50$; BR IF WRITE NOW
	JMP	G^EXE$QIORETURN		; RETURN TO CALLER
;
; FINISH WRITE I/O OPERATION
;
50$:	MOVL	IRP$W_BCNT-2(R3),R0	; GET TRANSFER COUNT
	MOVW	#SS$_NORMAL,R0		; SET STATUS IN LOW
	JMP	G^EXE$FINISHIOC		; COMPLETE THE I/O
;
; INSUFFICIENT MEMORY TO BUFFER MESSAGE - WAIT FOR RESOURCE
;
55$:	POPR	#^M<R1,R3>
	MOVZWL	#SS$_INSFMEM,R0		; SET INSUFFICIENT MEMORY STATUS
	MOVZBL	#RSN$_NPDYNMEM,R1	; SET RESOURCE TO AWAIT
	BRB	65$			;
;
; MAILBOX IS FULL - WAIT FOR A MESSAGE TO BE READ
;
60$:	ADDL	#4,SP			; POP OLD IPL OFF STACK
	SETIPL	#IPL$_SYNCH		; LOWER TO IPL$_SYNCH
	MOVL	R2,R0			; DEALLOCATE MESSAGE BLOCK
	PUSHL	R3			; SAVE PACKET
	JSB	G^EXE$DEANONPAGED	;
	POPL	R3			; RESTORE PACKET
	MOVZWL	#SS$_MBFULL,R0		; SET MAILBOX FULL STATUS
	MOVZBL	#RSN$_MAILBOX,R1	; SET RESOURCE TO AWAIT
65$:	JMP	G^EXE$IORSNWAIT		; ENTER WAIT STATE


	.SBTTL INSERT MESSAGE IN MAILBOX QUEUE
;++
; INSMBQUEUE - INSERT MESSAGE ON MAILBOX QUEUE
;
; INPUTS:
;
;	R2 = ADDRESS OF MESSAGE BLOCK
;	R5 = UCB OF MAILBOX
;
; OUTPUTS:
;
;	THE MESSAGE IS QUEUED AND IF THE UNIT IS BUSY THEN
;	CONTROL IS TRANSFERED TO "FINISHREAD" TO COMPLETE THE
;	WAITING READ REQUEST.
;--
INSMBQUEUE:				;
	INCW	UCB$W_MSGCNT(R5)	; ADJUST MESSAGE COUNT
	MOVW	UCB$W_MSGCNT(R5),UCB$L_DEVDEPEND(R5); SAVE IT
	SUBW	12(R2),UCB$W_BUFQUO(R5)	; ADJUST BYTE QUOTA BY MESSAGE SIZE
	.IF NE CA$_MEASURE		; CHECK FOR MEASUREMENT ENABLED
	INCL	PMS$GL_MBWRITES		; COUNT MAILBOX WRITES
	.ENDC
;
; TEST UNIT BUSY -- IF BUSY FINISH OUTSTANDING READ
;
	BBS	#UCB$V_BSY,UCB$W_STS(R5),FINISHREAD; BRANCH IF BUSY
;
; INSERT MESSAGE IN QUEUE
;
	INSQUE	(R2),@UCB$L_MB_MSGQ+4(R5); INSERT MESSAGE IN QUEUE
;
; DELIVER ALL AST'S WAITING FOR MESSAGES ON THIS MAILBOX
;
	MOVAB	UCB$L_MB_W_AST(R5),R4	; ADDRESS ATTENTION LIST HEAD
	JMP	G^COM$DELATTNAST	; DELIVER THE AST'S

	.SBTTL	STARTIO - STARTIO OPERATION
;++
; STARTIO - START READ OPERATION ON IDLE MAILBOX UNIT
;
; FUNCTIONAL DESCRIPTION:
;
; THIS ROUTINE IS ENTERED WHEN THE UNIT IS NOT BUSY AND THERE IS A 
; PACKET TO PROCESS. IF THERE IS ANY MESSAGE WAITING THE READ IS COMPLETED
; OTHERWISE, AN RSB IS DONE LEAVING THE UNIT BUSY AND THE PACKET IN
; LIMBO.
;
; INPUTS:
;
;	R3 = I/O PACKET ADDRESS
;	R5 = UCB ADDRESS
;
; OUTPUTS:
;
;	R2 = MESSAGE ADDRESS ON TRANSFER TO "FINISHREAD".
;
;	OTHERWISE AN RSB IS DONE.
;--
STARTIO:				;
	REMQUE	@UCB$L_MB_MSGQ(R5),R2	; GET MESSAGE IF ANY FROM QUEUE
	BVC	FINISHREAD		; IF V-CLEAR THEN COMPLETE THE READ
	MOVAB	UCB$L_MB_R_AST(R5),R4	; ADDRESS LIST OF READER AST'S
	JMP	G^COM$DELATTNAST	; DELIVER AST'S

	.SBTTL	FINISHREAD - FINISH READ I/O OPERATION
;++
; FINISHREAD - FINISH READ OPERATION
;
; FUNCTIONAL DECRIPTION:
;
; THIS ROUTINE IS ENTERED WHEN THE UNIT IS BUSY AND A MESSAGE
; IS AVAILABLE.
; THE WAITING READ IS COMPLETED ALONG WITH THE MATCHING WRITE
; REQUEST IF THE WRITE WAS A WAIT TYPE.
;
; INPUTS:
;
;	R2 = MESSAGE ADDRESS
;	R5 = UCB ADDRESS
;
; OUTPUTS:
;
;--
FINISHREAD:				;
	MOVL	UCB$L_IRP(R5),R3	; GET CURRENT I/O PACKET
	MOVL	R2,IRP$L_SVAPTE(R3)	; INSERT BLOCK ADDRESS IN PACKET
	MOVAB	22(R2),(R2)+		; INSERT ADDRESS OF DATA
	MOVL	IRP$L_MEDIA(R3),(R2)+	; INSERT USER VIRTUAL ADDRESS
	TSTL	(R2)+			; PASS TYPE WORD
	ADDW	(R2),UCB$W_BUFQUO(R5)	; ADJUST QUOTA BY MESSAGE BLOCK SIZE
	CMPW	IRP$W_BCNT(R3),(R2)	; REQUEST GTRU ACTUAL?
	BGTRU	10$			; IF GTRU THEN MESSAGE SIZE CORRECT
	MOVW	IRP$W_BCNT(R3),(R2)	; OTHERWISE REQUEST SIZE IS CORRECT
10$:	ASHL	#16,(R2),R0		; GET SIZE TO UPPER WORD
	MOVW	#SS$_NORMAL,R0		; ASSUME NORMAL STATUS
	MOVW	(R2)+,IRP$W_BCNT(R3)	; REPLACE ORIGIONAL SIZE WITH CORRECT
	CMPB	-3(R2),#IO$_WRITEOF	; WAS FUNCTION END-OF-FILE?
	BNEQ	15$			; BR IF NOT
	MOVW	#SS$_ENDOFFILE,R0	; SET EOF STATUS
15$:	DECW	UCB$W_MSGCNT(R5)	; ADJUST MESSAGE COUNT
	MOVW	UCB$W_MSGCNT(R5),UCB$L_DEVDEPEND(R5); SAVE IT
	PUSHL	R3			; SAVE PACKET OF READER
	MOVL	IRP$L_PID(R3),R1	; GET READER PID
	MOVL	(R2)+,R3		; GET WRITER PACKET
	BEQL	20$			; IF EQL THEN NONE
	MOVQ	R0,IRP$L_MEDIA(R3)	; SET READ STATUS AND PID OF RECEIVER
	MOVZBW	#SS$_NORMAL,IRP$L_MEDIA(R3); INSURE SUCCESS
	JSB	G^COM$POST		; COMPLETE THE I/O
20$:	MOVL	(R2),R1			; GET WRITER PID
	POPL	R3			; RESTORE PACKET ADDRESS
	REQCOM				; COMPLETE REQUEST!!!
MB_END:
 	.END

