	.TITLE	SYSGETPTI - Get Page Table Information System Service
	.IDENT	'V03-000'
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************

;++
; FACILITY:
;
; ABSTRACT:
;
; ENVIRONMENT:
;
; AUTHOR: PETER H. LIPMAN	, CREATION DATE: 24-APR-78
;
; MODIFIED BY:
;
;	V02-001	LJK0022		Lawrence J. Kenah	19-May-1981
;		Replace CDL$x_ symbols with MMG$x_ symbols. Add $MMGDEF
;		macro. Make these offsets local symbols.
;
;--

	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;
	$MMGDEF				; Offsets from FP into scratch area
	$PRDEF				;PROCESSOR REGISTER DEFINTIONS
	$PTEDEF				;PAGE TABLE ENTRY DEFINITIONS
	$SSDEF				;SYSTEM STATUS CODE DEFINTIONS
;
; EXTERNAL SYMBOLS:
;
;
; MACROS:
;
;
; EQUATED SYMBOLS:
;
; OFFSET FROM AP
;
	INADR		= 4		;Offset to input range
	RETADR		= 8		;Offset to return range
	ACMODE		= 12		;Access mode
	MASK		= 16		;Mask of PTI attributes
	PAGCNT		= 20		;Minimum number of pages to return
					;as having the specified attributes
;
; OWN STORAGE:
;

	.SBTTL	GETPTI - Get Page Table Information
;++
; FUNCTIONAL DESCRIPTION:
;
; CALLING SEQUENCE:
;
;	CALLG	ARGLIST,@#SYS$GETPTI
;
;
; INPUT PARAMETERS:
;
;	INADR(AP) = Address of 2 long words the 1st of which specifies
;		the starting virtual address, the 2nd specifies the ending
;		virtual address (inclusive) of the pages to operate on.
;	RETADR(AP) = Address of a 2 longword array into which is returned
;		the starting and ending virtual addresses (inclusive)
;		of the pages operated on.
;	ACMODE(AP) = The access mode (maximized with calling mode)
;		against which the page ownership is checked.
;	MASK(AP)   = Mask of Page Table Information control bits
;		     bit 0 - Pages which are demand zero
;	PAGCNT(AP) = Minimum page count.  If the next range of pages which
;		     satisfies one or more of the PTI criteria contains
;		     fewer pages than PAGCNT specifies, then the range
;		     does not satisfy the criteria and another range
;		     is sought.
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	R0 = System Status Code
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	SS$_NORMAL			;Successful Completion
;	SS$_ACCVIO			;Access Violation
;	SS$_PAGOWNVIO			;Page Owner Violation
;
; SIDE EFFECTS:
;
;	NONE
;
;--
;
; **********************************************************************
;
; **************** THE FOLLOWING CODE MAY BE PAGED *****************
;
	.PSECT	Y$EXEPAGED
;
; **********************************************************************
;
	.ENTRY	EXE$GETPTI,^M<R2,R3,R4,R5,R6,R7,R8,R9,R10>

	MOVAL	L^MMG$GETPTIPAG,R6	;Per-page subroutine
	MOVL	MASK(AP),R8		;Type of information desired
	MNEGL	#1,R9			;No pages found yet
	SUBL3	#1,PAGCNT(AP),R10	;Minimum page count - 1
	BGEQ	10$			;Branch if specified
	CLRL	R10			;Default to 1 page
10$:	SUBL	S^#-MMG$C_LENGTH,SP	;Reserve scratch area
	BSBW	MMG$CRECOM1		;Common Create code
	RET

	.SBTTL	GETPTIPAG - Get Page Table Info for Single Page

;++
; FUNCTIONAL DESCRIPTION:
;
;
; CALLING SEQUENCE:
;
;	BSBW	MMG$GETPTIPAG
;
;
; INPUT PARAMETERS:
;
;	R0  = Access Mode for page ownership check
;	R2  = Virtual Address
;	R4  = Current PCB address
;	R5  = Process Header Address - P1 or System Space
;	R6  = Count - 1 of pages to be processed including this one
;	R7  = +^X200 if going forward in the address space
;	    = -^X200 if going backwards in the address space
;	R8  = Page table information mask, specifying the criteria
;	      against which the pages are tested.
;	R9  = count - 1 of pages found so far that satisfy the criteria
;	R10 = threshhold page count - 1.  Once a run of pages is found
;	      that meets the criteria, a further check is made to see if
;	      the range of pages is large enough.
;
;	IPL = ASTDEL
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;
;	R0 = Status Code
;	R2   Preserved
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;
;	SS$_NORMAL			;Successful Completion
;	SS$_PAGOWNVIO			;Page Owner Violation
;	SS$_LENVIO			;Length Violation
;	SS$_ACCVIO			;Access Violation
;
; SIDE EFFECTS:
;
;	NONE
;
;--
;
; **********************************************************************
;
; **************** THE FOLLOWING CODE MUST BE RESIDENT *****************
;
	.PSECT	$MMGCOD
;
; **********************************************************************
;
MMG$GETPTIPAG::
	SAVIPL				;Save caller's IPL
	PUSHL	R0			;Save access mode
	BSBW	MMG$PTEREF		;Reference PTE, return SVAPTE
					;return at IPL=SYNCH
	BLBC	R0,90$			;Branch if Length Violation
	MOVZWL	#SS$_ACCVIO,R0		;In case this page is not accessable
	MOVL	(R3),R1			;Fetch the page table entry
	BEQL	90$			;Branch if deleted, access violation
	MOVL	(SP),R0			;Access Mode
	BSBW	MMG$PAGETYPE		;Check access, return page type
	BLBC	R0,90$			;Branch if Page Owner Violation
	EXTZV	#PTE$V_PGFLVB,#PTE$S_PGFLVB,(R3),R0 ;PFN, PGFLVB, GPTX
	MOVQ	R7,-(SP)		;Push R8, reserve a scratch location
20$:	FFS	#0,#32,R8,(SP)		;Convert next bit to its bit number
	BEQL	40$			;Branch if no more bits
	BBCC	(SP),R8,30$		;Shut off the bit
30$:	BSBB	100$			;See if this page has desired attribute
	BLBC	R0,20$			;Branch if not, check next attribute
40$:	POPR	#^M<R1,R8>		;Clean off scratch loc, restore R8
	ADDL	R0,R9			;If match found, count it
	BLSS	60$			;Branch if haven't found first page
	BLBC	R0,50$			;Branch if end of "run"
	BNEQ	60$			;Branch if not first page of "run"
	MOVL	R2,B^MMG$L_SVSTARTVA(FP) ;Save address of first page
	BRB	60$
50$:	BBSS	#31,R6,60$		;Indicate end of run
60$:	MOVZWL	#SS$_NORMAL,R0		;Set success indication
	TSTL	R6			;Check for end of range or end of "run"
	BGTR	90$			;Branch if not
	TSTL	R9			;At end range or end "run"
	BLSS	80$			;Branch if no "run" found
	CMPL	R9,R10			;Is the "run" large enough?
	BLSS	70$			;Branch if not, start over
;
; Found a large enough range, return it
;
	TSTL	R6			;At end of range?
	BEQL	90$			;Branch if yes, this VA is in the range
	CLRL	R6			;Force end of range
	SUBL	R7,R2			;and back off 1 page
	BRB	90$
;
; This "run" was too small, start looking for another
;
70$:	MNEGL	#1,R9			;No pages in the "run"
	EXTZV	#0,#30,R6,R6		;Restore count - 1 of pages left in range
	BNEQ	90$			;Branch if still some to do
80$:	CLRL	B^MMG$L_SAVRETADR(FP)	;Force null return range
90$:	POPR	#^M<R1>			;Clean off saved access mode
	ENBINT				;Restore called IPL
	RSB				;and return
;
; Subroutine to determine whether the specified page is of the type
; described by the specified type code.
;
; INPUTS:
;
;	R0 = PFN, PGFLVB, GPTX, OR SECX WITH SECTION BITS
;	R1 = Page type
;	   = 0 - transition or demand zero
;	   = 1 - page file
;	   = 2 - global
;	   = 3 - section
;	   = 4 - valid
;	R2 = Virtual address
;	R3 = System Virtual Address of page table entry
;	R4 = Current PCB address
;	R5 = Process Header address
;	4(SP) = Page Table Information Code to CASE on
;
; OUTPUTS:
;
;	R0 = 0 if page is not of the specified type
;	   = 1 if page is of the specified type
;	R2 preserved
;
100$:	CASE	4(SP),<-
		INF_DZRO -		;0 = page is demand zero
		>
;
; Page is not of the specified type
;
INF_NO:	CLRL	R0
	RSB
;
; See if page is demand zero
;
INF_DZRO:
	CASE	R1,<-
		20$,-			;Transition or Demand Zero
		INF_NO,-		;Page file
		40$,-			;Global
		60$ -			;Section
		>,TYPE=B
	BRB	INF_NO			;Valid
;
; Transition or demand zero page
;
20$:	TSTL	R0			;Zero PFN means demand zero
	BNEQ	INF_NO			;Branch if not dzro
	INCL	R0			;Return 1 for dzro page
	RSB
;
; Global page, see if it is a demand zero section
;
40$:	BICL3	#^C<PTE$M_VALID !-	;Get valid,
		PTE$M_TYP1 ! PTE$M_TYP0 !- ;type bits,
		PTE$M_PGFLVB>,-		;and section bits
		@W^MMG$GL_GPTBASE[R0],R0 ;from global PTE
	BLSS	INF_NO			;Branch if valid
	ASHL	#-PTE$V_TYP0,R0,R1	;Transition?
	BEQL	INF_NO			;Branch if yes

	ASSUME	<PTE$V_TYP1-PTE$V_TYP0> LE 7
	XORB	#<PTE$M_TYP1 ! PTE$M_TYP0>@-PTE$V_TYP0,R1 ;Section address?
	BNEQ	INF_NO			;Branch if not
;
; Section page, section bits in R0
;
60$:	BBC	#PTE$V_DZRO,R0,INF_NO	;Branch if not demand zero section
	MOVL	#1,R0			;It is a demand zero section
	RSB



	.END
