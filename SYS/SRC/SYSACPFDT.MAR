	.TITLE	SYSACPFDT - ACP FUNCTION DECISION TABLE ACTION ROUTINES
	.IDENT	'V03-000'
 
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
; D. N. CUTLER 22-NOV-76
;
; MODIFIED BY:
;
;	V02-011	MSH0001		Maryann Hinden		05-Feb-1982
;		Fix PROBE problem.
;
;	V02-010	ACG0229		Andrew C. Goldstein,	11-Dec-1981  15:26
;		Add I/O counters to window
;
;	V02-009	RLRLBCNT	Robert L. Rappaport	18-Mar-1981
;		Changes associated with expansion of IRP fields containing
;		byte counts (IRP$x_BCNT, IRP$x_OBCNT, and IRP$x_ABCNT)
;		from word to longword quantities.
;
;	V02-008	ACG0192		Andrew C. Goldstein,	18-Feb-1981  20:59
;		Fix error status returned by software writelock
;
;	V02-007	ACG0176		Andrew C. Goldstein,	6-Jun-1980  17:05
;		Redirect UCB pointer in I/O packet after map virtual
;
;**
;
; ACP FUNCTION DECISION TABLE ACTION ROUTINES
;
; MACRO LIBRARY CALLS
;
 
	$CCBDEF				;DEFINE CCB OFFSETS
	$DEVDEF				;DEFINE DEVICE CHARACTERISTICS BITS
	$DYNDEF				;DEFINE STRUCTURE TYPE CODES
	$IPLDEF				;DEFINE INTERRUPT PRIORITY LEVELS
	$IODEF				;DEFINE I/O FUNCTION CODES
	$IRPDEF				;DEFINE IRP OFFSETS
	$JIBDEF				;DEFINE JIB OFFSETS
	$PCBDEF				;DEFINE PCB OFFSETS
	$PRDEF				;DEFINE PROCESSOR REGISTERS
	$PRVDEF				;DEFINE PRIVILEGE BITS
	$UCBDEF				;DEFINE UCB OFFSETS
	$VADEF				;DEFINE VIRTUAL ADDRESS FIELDS
	$VCBDEF				;DEFINE VCB OFFSETS
	$WCBDEF				;DEFINE WCB OFFSETS
 
;
; LOCAL SYMBOLS
;
; ARGUMENT LIST OFFSET DEFINITIONS
;
 
P1=0					;FIRST FUNCTION DEPENDENT PARAMETER
P2=4					;SECOND FUNCTION DEPENDENT PARAMETER
P3=8					;THIRD FUNCTION DEPENDENT PARAMETER
P4=12					;FOURTH FUNCTION DEPENDENT PARAMETER
P5=16					;FIFTH FUNCTION DEPENDENT PARAMETER
P6=20					;SIXTH FUNCTION DEPENDENT PARAMETER
 
;
; MAXIMUM NUMBER OF ACP DESCRIPTORS
;
 
MXDESCR=5+17				;MAXIMUM NUMBER OF ACP DESCRIPTORS
	.PAGE
	.SBTTL	ACCESS AND CREATE ACP FUNCTION PROCESSING
;+
; ACP$ACCESS - ACCESS AND CREATE ACP FUNCTION PROCESSING
; ACP$ACCESSNET - ACCESS (CONNECT) TO NETWORK FUNCTION PROCESSING
;
; ***TBS***
;
; INPUTS:
;
;	R0 = SCRATCH.
;	R1 = SCRATCH.
;	R2 = SCRATCH.
;	R3 = ADDRESS OF I/O REQUEST PACKET.
;	R4 = CURRENT PROCESS PCB ADDRESS.
;	R5 = ASSIGNED DEVICE UCB ADDRESS.
;	R6 = ADDRESS OF CCB.
;	R7 = I/O FUNCTION CODE BIT NUMBER.
;	R8 = FUNCTION DECISION TABLE DISPATCH ADDRESS.
;	R9 = SCRATCH.
;	R10 = SCRATCH.
;	R11 = SCRATCH.
;	AP = ADDRESS OF FIRST FUNCTION DEPENDENT PARAMETER.
;
; OUTPUTS:
;
; ***TBS***
;-
 
	.ENABL	LSB
BRMODIFY:				;
	BRW	ACP$MODIFY		;
ACP$ACCESS::				;ACCESS AND CREATE ACP FUNCTION PROCESSING
	BBC	#IO$V_ACCESS,IRP$W_FUNC(R3),BRMODIFY ; IF CLR, NOT ACCESS
ACP$ACCESSNET::				;ACCESS (CONNECT) TO NETWORK FUNCTION PROCESSING
	MOVZWL	#SS$_FILALRACC,R0	;ASSUME FILE ALREADY ACCESSED
	TSTL	CCB$L_WIND(R6)		;FILE ALREADY ACCESSED ON CHANNEL?
	BGTR	20$			;IF GTR PROCESS SECTION OPEN ON CHANNEL
	BNEQ	30$			;IF NEQ FILE OPEN ON CHANNEL
	MOVZWL	#SS$_EXQUOTA,R0		;ASSUME FILE QUOTA EXCEEDED
	MOVL	PCB$L_JIB(R4),R1	;GET JIB ADDRESS
	TSTW	JIB$W_FILCNT(R1)	;FILE QUOTA EXCEEDED?
	BLEQ	30$			;IF LEQ YES
	BSBW	BUILDACPBUF		;BUILD ACP BUFFER
	BSBW	CHKDISMOUNT		;CHECK VOLUME AND UPDATE TRANSACTION COUNT
	MOVL	PCB$L_JIB(R4),R1	;GET JIB ADDRESS
	DECW	JIB$W_FILCNT(R1)	;UPDATE FILE ACCESS COUNT
	INCL	CCB$L_WIND(R6)		;SET CHANNEL INTERLOCK
	BRB	70$			;
	.PAGE
	.SBTTL	DEACCESS ACP FUNCTION PROCESSING
;+
; ACP$DEACCESS - DEACCESS ACP FUNCTION PROCESSING
;
; ***TBS***
;
; INPUTS:
;
;	R0 = SCRATCH.
;	R1 = SCRATCH.
;	R2 = SCRATCH.
;	R3 = ADDRESS OF I/O REQUEST PACKET.
;	R4 = CURRENT PROCESS PCB ADDRESS.
;	R5 = ASSIGNED DEVICE UCB ADDRESS.
;	R6 = ADDRESS OF CCB.
;	R7 = I/O FUNCTION CODE BIT NUMBER.
;	R8 = FUNCTION DECISION TABLE DISPATCH ADDRESS.
;	R9 = SCRATCH.
;	R10 = SCRATCH.
;	R11 = SCRATCH.
;	AP = ADDRESS OF FIRST FUNCTION DEPENDENT PARAMETER.
;
; OUTPUTS:
;
; ***TBS***
;-
 
ACP$DEACCESS::				;DEACCESS ACP FUNCTION PROCESSING
	MOVZWL	#SS$_FILNOTACC,R0	;ASSUME FILE NOT ACCESSED
	MOVL	CCB$L_WIND(R6),R1	;FILE ACCESSED ON CHANNEL?
	BGTR	20$			;IF GTR PROCESS SECTION OPEN ON CHANNEL
	BEQL	30$			;IF EQL NO FILE OPEN ON CHANNEL
	BITB	#WCB$M_NOTFCP!WCB$M_SHRWCB,WCB$B_ACCESS(R1) ;NORMAL WINDOW?
	BNEQ	40$			;IF NEQ NO
10$:	BSBW	BUILDACPBUF		;BUILD ACP BUFFER
	INCL	CCB$L_WIND(R6)		;SET CHANNEL INTERLOCK
	BSBW	UPTRANSCNT		;UPDATE TRANSACTION COUNT
	CMPW	#1,CCB$W_IOC(R6)	;ANY OTHER I/O ON CHANNEL?
	BEQL	70$			;IF EQL NO
	DECW	CCB$W_IOC(R6)		;ADJUST COUNT FOR DEACCESS
	MOVL	R3,CCB$L_DIRP(R6)	;SAVE ADDRESS OF DEACCESS PACKET
	BRW	EXE$QIORETURN		;
20$:	MOVZWL	#SS$_IVCHNLSEC,R0	;SET INVALID SECTION CHANNEL STATUS
30$:	BRW	EXE$ABORTIO		;
40$:	BBC	#WCB$V_SHRWCB,WCB$B_ACCESS(R1),50$ ;IF CLR, NOT SHARED WINDOW
	DECW	WCB$W_REFCNT(R1)	;ANY SHARERS REMAINING?
	BNEQ	50$			;IF NEQ YES
	BBC	#WCB$V_NOTFCP,WCB$B_ACCESS(R1),10$ ;IF CLR, NOT FCP WINDOW
50$:	MOVL	PCB$L_JIB(R4),R0	;GET JIB ADDRESS
	INCW	JIB$W_FILCNT(R0)	;INCREMENT FILE COUNT
	CLRL	CCB$L_WIND(R6)		;CLEAR WINDOW ADDRESS
	MOVZWL	#SS$_NORMAL,R0		;SET NORMAL COMPLETION STATUS
	BRW	EXE$FINISHIOC		;
	.PAGE
	.SBTTL	DELETE AND MODIFY ACP FUNCTION PROCESSING
;+
; ACP$MODIFY - DELETE AND MODIFY ACP FUNCTION PROCESSING
;
; ***TBS***
;
; INPUTS:
;
;	R0 = SCRATCH.
;	R1 = SCRATCH.
;	R2 = SCRATCH.
;	R3 = ADDRESS OF I/O REQUEST PACKET.
;	R4 = CURRENT PROCESS PCB ADDRESS.
;	R5 = ASSIGNED DEVICE UCB ADDRESS.
;	R6 = ADDRESS OF CCB.
;	R7 = I/O FUNCTION CODE BIT NUMBER.
;	R8 = FUNCTION DECISION TABLE DISPATCH ADDRESS.
;	R9 = SCRATCH.
;	R10 = SCRATCH.
;	R11 = SCRATCH.
;	AP = ADDRESS OF FIRST FUNCTION DEPENDENT PARAMETER.
;
; OUTPUTS:
;
; ***TBS***
;-
 
ACP$MODIFY::				;DELETE AND MODIFY ACP FUNCTION PROCESSING
	BSBW	BUILDACPBUF		;BUILD ACP BUFFER
	BSBW	CHKMOUNT		;CHECK VOLUME AND UPDATE TRANSACTION COUNT
	BRB	70$
	.PAGE
	.SBTTL	MOUNT ACP FUNCTION PROCESSING
;+
; ACP$MOUNT - MOUNT ACP FUNCTION PROCESSING
;
; ***TBS***
;
; INPUTS:
;
;	R0 = SCRATCH.
;	R1 = SCRATCH.
;	R2 = SCRATCH.
;	R3 = ADDRESS OF I/O REQUEST PACKET.
;	R4 = CURRENT PROCESS PCB ADDRESS.
;	R5 = ASSIGNED DEVICE UCB ADDRESS.
;	R6 = ADDRESS OF CCB.
;	R7 = I/O FUNCTION CODE BIT NUMBER.
;	R8 = FUNCTION DECISION TABLE DISPATCH ADDRESS.
;	R9 = SCRATCH.
;	R10 = SCRATCH.
;	R11 = SCRATCH.
;	AP = ADDRESS OF FIRST FUNCTION DEPENDENT PARAMETER.
;
; OUTPUTS:
;
; ***TBS***
;-
 
ACP$MOUNT::				;MOUNT ACP FUNCTION PROCESSING
	BSBW	BUILDACPBUF		;BUILD ACP BUFFER
	MOVZWL	#SS$_NOPRIV,R0		;ASSUME INSUFFICIENT PROCESS PRIVILEGE
	IFNPRIV	MOUNT,90$		;PROCESS HAVE PRIVILEGE TO MOUNT VOLUME?
	BBCC	#UCB$V_MOUNTING,UCB$W_STS(R5),80$ ;IF CLR, NOT MOUNTING DEVICE
	BSBW	UPTRANSCNT		;UPDATE VOLUME TRANSACTION COUNT
70$:	BRW	EXE$QIOACPPKT		;QUEUE ACP PACKET
80$:	MOVZWL	#SS$_DEVNOTMOUNT,R0	;SET DEVICE NOT MOUNTED STATUS
90$:	BRW	EXE$ABORTIO		;ABORT I/O OPERATION
	.DSABL	LSB
	.PAGE
	.SBTTL	READ AND WRITE BLOCK ACP FUNCTION PROCESSING
;+
; ACP$READBLK - READ BLOCK ACP FUNCTION PROCESSING
; ACP$WRITEBLK - WRITE BLOCK ACP FUNCTION PROCESSING
;
; ***TBS***
;
; INPUTS:
;
;	R0 = SCRATCH.
;	R1 = SCRATCH.
;	R2 = SCRATCH.
;	R3 = ADDRESS OF I/O REQUEST PACKET.
;	R4 = CURRENT PROCESS PCB ADDRESS.
;	R5 = ASSIGNED DEVICE UCB ADDRESS.
;	R6 = ADDRESS OF CCB.
;	R7 = I/O FUNCTION CODE BIT NUMBER.
;	R8 = FUNCTION DECISION TABLE DISPATCH ADDRESS.
;	R9 = SCRATCH.
;	R10 = SCRATCH.
;	R11 = SCRATCH.
;	AP = ADDRESS OF FIRST FUNCTION DEPENDENT PARAMETER.
;
; OUTPUTS:
;
; ***TBS***
;-
 
	.ENABL	LSB
ACP$READBLK::				;READ BLOCK ACP FUNCTION PROCESSING
	MOVAB	W^EXE$READLOCK,R10	;SET ADDRESS OF READ CHECK AND LOCK ROUTINE
	MOVAB	EXE$CHKRDACCES,R11	;SET ADDRESS OF ACCESS CHECK ROUTINE
	BBC	S^#DEV$V_RCK,UCB$L_DEVCHAR(R5),20$ ;IF CLR, NO DEVICE READ CHECK
10$:	BISW	#IO$M_DATACHECK,IRP$W_FUNC(R3) ;SET DATA CHECK ENABLE
	BRB	20$			;
;
; ZERO LENGTH TRANSFER
;
 
15$:	MOVZWL	#SS$_NORMAL,R0		;SET NORMAL COMPLETION
	BRW	EXE$FINISHIOC		;FINISH I/O OPERATION
;
; DEVICE SOFTWARE WRITE LOCKED
;

17$:	MOVZWL	#SS$_WRITLCK,R0		;SET WRITE LOCK ERROR
	BRB	70$

;
; RECORD LENGTH TOO SHORT FOR MAGTAPE TRANSFER
;
 
45$:	MOVZWL	#SS$_BADPARAM,R0	;SET BAD PARAMETER STATUS
	BRB	70$			;
 
 
ACP$WRITEBLK::				;WRITE BLOCK ACP FUNCTION PROCESSING
	BBS	S^#DEV$V_SWL,UCB$L_DEVCHAR(R5),17$ ;IF SET, SOFTWARE WRITE LOCKED
	MOVAB	W^EXE$WRITELOCK,R10	;SET ADDRESS OF WRITE CHECK AND LOCK ROUTINE
	MOVAB	EXE$CHKWRTACCES,R11	;SET ADDRESS OF ACCESS CHECK ROUTINE
	BBS	S^#DEV$V_WCK,UCB$L_DEVCHAR(R5),10$ ;IF SET, DEVICE LEVEL WRITE CHECK
20$:	MOVL	P1(AP),R0		;GET STARTING ADDRESS OF TRANSFER
	MOVZWL	P2(AP),R1		;GET NUMBER OF BYTES TO TRANSFER
	BEQL	15$			;IF EQL ZERO LENGTH TRANSFER
	BBC	S^#DEV$V_SQD,UCB$L_DEVCHAR(R5),30$ ;IF CLR, NOT SEQUENTIAL DEVICE
	CMPL	#14,R1			;RECORD TOO SHORT?
	BGTR	45$			;IF GTR YES
30$:	JSB	(R10)			;CHECK BUFFER AND LOCK IN MEMORY
	MOVL	P3(AP),R0		;GET STARTING MEDIA ADDRESS
	MOVL	IRP$L_BCNT(R3),R1	;RETRIEVE TRANSFER BYTE COUNT
	MOVL	R1,IRP$L_OBCNT(R3)	;SET ORIGNINAL BYTE COUNT
	CLRL	IRP$L_ABCNT(R3)		;CLEAR ACCUMULATED BYTE COUNT
	CMPZV	#IRP$V_FCODE,#IRP$S_FCODE,- ;LOGICAL OR PHYSICAL I/O FUNCTION?
		IRP$W_FUNC(R3),#IO$_LOGICAL ;
	BLEQ	120$			;IF LEQ YES
	MOVL	IRP$L_WIND(R3),R2	;FILE ACCESSED ON CHANNEL?
	BEQL	50$			;IF EQL NO
	BBS	#IRP$V_FUNC,IRP$W_STS(R3),80$ ;IF SET, READ FUNCTION
 
;
; CHECK WRITE ACCESS
;
 
	BBC	#WCB$V_WRITE,WCB$B_ACCESS(R2),60$ ;IF CLR, NO WRITE ACCESS ALLOWED
	BBC	S^#DEV$V_SQD,UCB$L_DEVCHAR(R5),35$ ;IF CLR, NOT SEQUENTIAL DEVICE
	BICB	#WCB$M_READ,WCB$B_ACCESS(R2) ;DON'T ALLOW FURTHER READS
35$:	INCL	WCB$L_WRITES(R2)	;COUNT THE WRITE OPERATION
	BBS	#WCB$V_WRITECK,WCB$W_ACON(R2),90$ ;IF SET, WRITE DATA CHECK ENABLED
	BRB	100$			;
 
;
; FILE NOT ACCESSED ON CHANNEL
;
 
50$:	MOVZWL	#SS$_FILNOTACC,R0	;SET FILE NOT ACCESSED
	BRB	70$			;
 
;
; PRIVILEGE VIOLATION
;
 
60$:	MOVZWL	#SS$_NOPRIV,R0		;SET NO PRIVILEGE
70$:	BRW	EXE$ABORTIO		;
 
;
; CHECK READ ACCESS
;
 
80$:	BBC	#WCB$V_READ,WCB$B_ACCESS(R2),60$ ;IF CLR, READ ACCESS NOT ALLOWED
	INCL	WCB$L_READS(R2)		;COUNT THE READ OPERATION
	BBC	#WCB$V_READCK,WCB$W_ACON(R2),100$ ;IF CLR, NO READ CHECK
90$:	BISW	#IO$M_DATACHECK,IRP$W_FUNC(R3) ;SET DATA CHECK ENABLE
100$:	BISW	#IRP$M_VIRTUAL,IRP$W_STS(R3) ;SET VIRTUAL I/O FUNCTION
	MOVL	R0,IRP$L_SEGVBN(R3)	;SAVE STARTING VIRTUAL BLOCK NUMBER
	MOVL	IRP$L_SVAPTE(R3),IRP$L_DIAGBUF(R3) ;COPY STARTING PTE ADDRESS
	SUBW	#IO$_WRITEVBLK-IO$_WRITEPBLK,- ;CONVERT TO PHYSICAL I/O FUNCTION
		IRP$W_FUNC(R3)		;
	SETIPL	UCB$B_FIPL(R5)		;RAISE TO DRIVER FORK LEVEL
	BSBW	IOC$MAPVBLK		;MAP VIRTUAL BLOCK TO LOGICAL BLOCK
	MOVL	R5,IRP$L_UCB(R3)	;STORE MODIFIED UCB IN I/O PACKET
	MOVL	R1,R0			;COPY STARTING LOGICAL BLOCK NUMBER
	SUBL3	R2,IRP$L_OBCNT(R3),R1	;CALCULATE LENGTH OF SEGMENT
	MOVL	R1,IRP$L_BCNT(R3)	;STORE IN I/O PACKET
	BEQL	160$			;IF EQL COMPLETE MAP FAILURE
	BBS	S^#DEV$V_SQD,UCB$L_DEVCHAR(R5),140$ ;IF CLR, NOT SEQUENTIAL DEVICE
	MOVQ	R0,R9			;COPY LBN AND COUNT FOR USE BELOW
	BRB	130$			;
120$:	MOVL	R0,IRP$L_MEDIA(R3)	;SAVE MEDIA ADDRESS
	MOVQ	R0,R9			;SAVE TRANSFER PARAMETERS
	MOVL	PCB$L_ARB(R4),R0	;GET ACCESS RIGHTS BLOCK
	MOVZWL	UCB$W_VPROT(R5),R1	;GET VOLUME PROTECTION MASK
	MOVL	UCB$L_OWNUIC(R5),R2	;GET VOLUME OWNER UIC
	JSB	(R11)			;CHECK FOR PROPER ACCESS RIGHTS
	BLBC	R0,60$			;IF LBC PRIVILEGE VIOLATION
	CMPZV	#IRP$V_FCODE,#IRP$S_FCODE,- ;PHYSICAL I/O FUNCTION?
		IRP$W_FUNC(R3),#IO$_PHYSICAL ;
	BLEQ	150$			;IF LEQ YES
	SUBW	#IO$_WRITELBLK-IO$_WRITEPBLK,- ;CONVERT TO PHYSICAL I/O FUNCTION
		IRP$W_FUNC(R3)		;
	BBS	S^#DEV$V_SQD,UCB$L_DEVCHAR(R5),140$ ;IF SET, SEQUENTIAL DEVICE
130$:	DECL	R10			;ROUND BYTE COUNT DOWN
	ASHL	#-VA$S_BYTE,R10,R10	;CONVERT TO BLOCK COUNT
	ADDL	R9,R10			;CALCULATE ENDING BLOCK NUMBER
	BCS	170$			;IF CS ILLEGAL BLOCK NUMBER
	CMPL	R10,UCB$L_MAXBLOCK(R5)	;LEGAL BLOCK NUMBER?
	BGEQU	170$			;IF GEQU NO
	MOVL	R9,R0			;RETRIEVE STARTING MEDIA ADDRESS
	BSBW	IOC$CVTLOGPHY		;CONVERT LOGICAL BLOCK TO PHYSICAL ADDRESS
140$:	BICW	#IO$M_INHERLOG!IO$M_INHSEEK,- ;CLEAR INHIBIT ERROR LOGGING
		IRP$W_FUNC(R3)		;AND EXPLICIT SEEK
150$:	BRW	EXE$QIODRVPKT		;QUEUE I/O PACKET TO DRIVER
160$:	MOVL	R2,IRP$L_BCNT(R3)	;SET REQUESTED BYTE COUNT
	MOVL	IRP$L_WIND(R3),R2	;GET WINDOW ADDRESS
	BBS	#WCB$V_NOTFCP,WCB$B_ACCESS(R2),180$ ;IF SET, NOT FCP WINDOW
	BRW	EXE$QIOACPPKT		;QUEUE ACP PACKET
170$:	MOVZWL	#SS$_ILLBLKNUM,R0	;SET ILLEGAL BLOCK NUMBER STATUS
	BRB	190$
180$:	MOVZWL	#SS$_ENDOFFILE,R0	;SET END OF FILE STATUS
190$:	BRW	EXE$FINISHIOC		;FINISH I/O OPERATION
	.DSABL	LSB
	.PAGE
	.SBTTL	BUILD ACP BUFFER
;
; SUBROUTINE TO BUILD ACP BUFFER
;
 
	.ENABL	LSB
BUILDACPBUF:				;BUILD ACP BUFFER
	MOVAB	-MXDESCR*8(SP),SP	;ALLOCATE SPACE FOR MAXIMUM DESCRIPTORS
	MOVL	SP,R11			;SET ADDRESS TO STORE DESCRIPTORS
	MOVL	#16,R10			;SET INITIAL BYTE COUNT
	MOVL	#4,(R11)+		;INSERT WINDOW ADDRESS LENGTH AND ACCESS MODE
	MOVAL	CCB$L_WIND(R6),(R11)+	;INSERT WINDOW ADDRESS
	BSBW	CHKDESCR		;INSERT FIB DESCRIPTOR
	CMPB	#IO$_DEACCESS,R7	;IS OPERATION A DEACCESS
	BNEQ	3$			;IF NEQ, NO
	CMPL	CCB$L_UCB(R6),IRP$L_UCB(R3) ;IS OPERATION FOR IMPLICIT SPOOLING
	BEQL	3$			;IF EQL, NO
	MOVL	#12+8,R0		;SIZE OF USER NAME PLUS ACCOUNT
	MOVAB	CTL$T_USERNAME,R1	;ADDRESS OF THOSE IN P1 SPACE
	BSBW	UPBYTCNT		;INSERT DESCRIPTOR FOR NAME AND ACCOUNT
	TSTL	(AP)+			;IGNORE FILE NAME ARGUMENT
	BRB	7$			;
3$:	BSBW	CHKDESCR		;INSERT NAME STRING DESCRIPTOR
7$:	MOVL	(AP)+,R0		;GET ADDRESS TO STORE RESULT STRING LENGTH
	BEQL	10$			;IF EQL NONE SPECIFIED
	MOVL	R0,R1			;SET ADDRESS OF RESULT LENGTH
	MOVL	#2,R0			;GET LENGTH OF RESULT LENGTH
	IFNOWRT	R0,(R1),ACCVIO		;CAN RESULT LENGTH BE WRITTEN?
10$:	BSBW	UPBYTCNT		;INSERT DESCRIPTOR AND UPDATE BYTE ACCUMULATION
	BSBW	CHKDESCR		;INSERT RESULT STRING DESCRIPTOR
	MOVL	#MXDESCR-5,R9		;SET MAXIMUM NUMBER OF ATTRIBUTE DESCRIPTORS
	MOVL	(AP),AP			;GET ADDRESS OF ATTRIBUTE LIST
	BEQL	30$			;IF EQL NONE SPECIFIED
20$:	IFNORD	#2,(AP),ACCVIO		;CAN ATTRIBUTE LENGTH BE READ?
	MOVW	(AP)+,(R11)+		;INSERT ATTRIBUTE LENGTH
	BEQL	30$			;IF EQL END OF ATTRIBUTE LIST
	IFNORD	#6,(AP),ACCVIO		;CAN REST OF ATTRIBUTE DESCRIPTOR BE READ?
	MOVW	(AP)+,(R11)+		;INSERT ATTRIBUTE NUMBER
	MOVL	(AP)+,(R11)+		;INSERT ATTRIBUTE ADDRESS
	PUSHL	R3			;SAVE IRP ADDRESS
	CLRL	R3			;SPECIFY MODE
	MOVZWL	-8(R11),R1		;GET LENGTH
	MOVL	-4(R11),R0		;GET ADDRESS OF BUFFER	
	JSB	EXE$PROBEW		;PROBE BUFFER
	POPL	R3			;RESTORE REGISTER
	BLBC	R0,ACCVIO		;IF LBC, NO WRITE ACCESS
	ADDW	-8(R11),R10		;UPDATE BYTE ACCUMULATION
	BCS	35$			;IF CS ACCUMULATION OVERFLOW
	SOBGTR	R9,20$			;ANY MORE ATTRIBUTES TO PROCESS?
30$:	SUBL3	R9,#MXDESCR,R9		;CALCULATE TOTAL NUMBER OF DESCRIPTORS
	MULL3	#9,R9,AP		;CALCULATE BYTES REQUIRED BY DESCRIPTORS
	ADDW	AP,R10			;UPDATE BYTE ACCUMULATION
35$:	BCS	BRXQUOTA		;IF CS ACCUMULATION OVERFLOW
	PUSHL	R3			;SAVE I/O PACKET ADDRESS
	MOVL	R10,R1			;SET NUMBER OF BYTES REQUIRED
	BSBW	EXE$BUFFRQUOTA		;CHECK BUFFER BYTE COUNT QUOTA
	BLBC	R0,40$			;IF LBC QUOTA EXCEEDED
	MOVL	R10,R1			;SET NUMBER OF BYTES REQUIRED
	BSBW	EXE$ALLOCBUF		;ALLOCATE BUFFERED I/O BUFFER
	BLBS	R0,50$			;IF LBS SUCCESSFUL ALLOCATION
 
;
; QUOTA CHECK OR BUFFER ALLOCATION FAILURE
;
 
40$:	POPR	#^M<R3>			;RETRIEVE I/O PACKET ADDRESS
	BRB	80$			;
 
;
; ACCESS VIOLATION ON DESCRIPTOR OR INFORMATION STRING
;
 
ACCVIO:	MOVZWL	#SS$_ACCVIO,R0		;SET ACCESS VIOLATION
	BRB	80$			;
 
BRXQUOTA:BRB	XQUOTA			;
;
; ACP BUFFER ALLOCATED AND ALL DESCRIPTORS CHECKED
;
 
50$:	POPR	#^M<R3>			;RETRIEVE I/O PACKET ADDRESS
	MOVL	R2,IRP$L_SVAPTE(R3)	;INSERT ADDRESS OF ACP BUFFER
	MOVL	R9,IRP$L_BCNT(R3)	;INSERT NUMBER OF DESCRIPTORS
	MOVW	R10,IRP$W_BOFF(R3)	;SET NUMBER OF BYTES CHARGED TO QUOTA
	BISW	#IRP$M_COMPLX!-		;SET COMPLEX BUFFERED I/O AND
	IRP$M_FILACP!IRP$M_VIRTUAL,IRP$W_STS(R3) ; VIRTUAL, COMPLEX FILE ACP I/O
	DECW	PCB$W_DIOCNT(R4)	;CHARGE A DIRECT I/O
	MOVAL	12(R2),(R2)+		;SET POINTER TO FIRST DESCRIPTOR
	CLRL	(R2)+			;CLEAR SPARE LONGWORD
	MOVW	R10,(R2)+		;SET SIZE OF BUFFER
	MOVZBW	#DYN$C_BUFIO,(R2)+	;SET DATA STRUCTURE TYPE
	MOVL	PCB$L_JIB(R4),AP	;GET JIB ADDRESS
	MOVZWL	R10,R10			;CONVERT TO LONGWORD
	SUBL	R10,JIB$L_BYTCNT(AP)	;UPDATE CURRENT BUFFERED I/O USAGE
	MULL3	#8,R9,AP		;CALCULATE OFFSET TO START OF DATA AREA
	ADDL	R2,AP			;CALCULATE ADDRESS OF DATA AREA
	MOVL	R2,R10			;SET ADDRESS OF FIRST OUTPUT DESCRIPTOR
	MOVL	SP,R11			;SET ADDRESS OF FIRST INPUT DESCRIPTOR
	PUSHR	#^M<R3,R4,R5>		;SAVE REGISTERS R3, R4, AND R5
	BSBB	WRDESCR			;PROCESS WINDOW ADDRESS DESCRIPTOR
	BSBB	RDDESCR			;PROCESS FIB DESCRIPTOR
	BSBB	RDDESCR			;PROCESS NAME STRING DESCRIPTOR
	BSBB	RDDESCR			;PROCESS RESULT STRING LENGTH DESCRIPTOR
	BSBB	RDDESCR			;PROCESS RESULT STRING DESCRIPTOR
	SUBL	#5,R9			;CALCULATE NUMBER OF REMAINING DESCRIPTORS
	BEQL	70$			;IF EQL NONE
60$:	BSBB	RDDESCR			;PROCESS ATTRIBUTE DESCRIPTOR
	SOBGTR	R9,60$			;ANY MORE ATTRIBUTES TO PROCESS?
70$:	POPR	#^M<R3,R4,R5>		;RESTORE REGISTERS R3, R4, AND R5
	MOVAB	MXDESCR*8(SP),SP	;REMOVE DESCRIPTOR STORAGE FROM STACK
	MOVL	CCB$L_UCB(R6),IRP$L_MEDIA(R3) ;INSERT ORIGINAL UCB ADDRESS
	SETIPL	#IPL$_SYNCH		;SYNCHRONIZE ACCESS TO SYSTEM DATA BASE
	RSB				;
BRACCVIO1:
	POPL	R0
BRACCVIO:				;
	BRB	ACCVIO			;
 
;
; BYTE ACCUMULATION OVERFLOW
;
 
XQUOTA:	MOVZWL	#SS$_EXQUOTA,R0		;SET QUOTA EXCEEDED
80$:	BRW	EXE$ABORTIO
	.DSABL	LSB
	.PAGE
	.SBTTL	CHECK DESCRIPTOR AND UPDATE BYTE ACCUMULATION
;
; SUBROUTINE TO CHECK PARAMETER DESCRIPTOR AND UPDATE BYTE ACCUMULATION
;
 
CHKDESCR:				;CHECK PARARMETER DESCRIPTOR
	MOVL	(AP)+,R0		;GET ADDRESS OF DESCRIPTOR
	BEQL	UPBYTCNT		;IF EQL NONE SPECIFIED
	IFNORD	#8,(R0),BRACCVIO	;CAN DESCRIPTOR BE READ?
	MOVZWL	(R0),R1			;GET LENGTH OF INFORMATION STRING
	MOVL	4(R0),R0		;GET ADDRESS OF INFORMATION STRING
	BEQL	UPBYTCNT		;IF EQL ZERO LENGTH
	PUSHL	R1			;SAVE REGISTERS
	PUSHL	R0
	PUSHL	R3
	CLRL	R3			;SPECIFY MODE
	JSB	EXE$PROBEW		;PROBE FOR WRITE ACCESS
	POPL	R3			;RESTORE REGISTERS
	POPL	R1			; (SWAP R0 & R1)
	BLBC	R0,BRACCVIO1		;IF LBC, NO ACCESS
	POPL	R0			;RESTORE R0
UPBYTCNT:				;INSERT DESCRIPTOR AND UPDATE BYTE ACCUMULATION
	ADDW	R0,R10			;UPDATE BYTE ACCUMULATION
	BCS	XQUOTA			;IF CS ACCUMULATION OVERFLOW
	MOVW	R0,(R11)+		;INSERT LENGTH OF INFORMATION STRING
	MOVZBW	IRP$B_RMOD(R3),(R11)+	;INSERT ACCESS MODE
	MOVL	R1,(R11)+		;INSERT INFORMATION STRING ADDRESS
	RSB				;
	.PAGE
	.SBTTL	BUILD INFORMATION DESCRIPTOR AND COPY DATA
;
; SUBROUTINE TO BUILD DESCRIPTOR FOR INFORMATION THAT IS BEING READ FROM THE
; CALLING PROCESS' ADDRESS SPACE.
;
 
	.ENABL	LSB
RDDESCR:				;BUILD READ DESCRIPTOR
	PUSHL	#1			;SET READ INDICATOR
	BRB	10$			;
 
;
; SUBROUTINE TO BUILD DESCRIPTOR FOR INFORMATION THAT WILL BE WRITTEN TO THE
; CALLING PROCESS' ADDRESS SPACE.
;
 
WRDESCR:				;BUILD WRITE DESCRIPTOR
	PUSHL	#0			;SET WRITE INDICATOR
10$:	SUBL3	R10,AP,(R10)+		;CALCULATE OFFSET TO DATA AREA
	
	MOVW	(R11)+,-2(R10)		;INSERT LENGTH OF DATA AREA
	MOVB	(R11)+,(AP)+		;INSERT ACCESS MODE OR ATTRIBUTE NUMBER
	INCL	R11			;ADVANCE TO INFORMATION ADDRESS
	MOVL	(R11)+,(R10)+		;INSERT ADDRESS OF INFORMATION
	BLBC	(SP)+,20$		;IF LBC INFORMATION BEING WRITTEN
	
	MOVC	-6(R10),@-4(R10),(AP)	;MOVE INFORMATION TO BUFFER
20$:	MOVZWL	-6(R10),R0		;GET LENGTH OF DATA AREA
	ADDL	R0,AP			;POINT TO NEXT DATA AREA
	RSB				;
	.DSABL	LSB
	.PAGE
	.SBTTL	CHECK VOLUME AND UPDATE TRANSACTION COUNT
;
; SUBROUTINE TO CHECK IF VOLUME MARKED FOR DISMOUNT, VOLUME NOT MOUNTED,
; OR VOLUME MOUNTED FOREIGN. IF ALL CHECKS SUCCEED, THEN UPDATE VOLUME
; TRANSACTION COUNT. ELSE RETURN APPROPRIATE ERROR.
;
 
	.ENABL	LSB
CHKDISMOUNT:				;CHECK IF VOLUME MARKED FOR DISMOUNT
	BBS	S^#DEV$V_DMT,UCB$L_DEVCHAR(R5),10$ ;IF SET, VOLUME MARKED FOR DISMOUNT
 
;
; SUBROUTINE TO CHECK IF VOLUME NOT MOUNTED OR MOUNTED FOREIGN. IF BOTH
; CHECKS SUCCEED, THEN UPDATE TRANSACTION COUNT. ELSE RETURN APPROPRIATE
; ERROR.
;
 
CHKMOUNT:				;CHECK IF VOLUME MOUNTED AND NOT FOREIGN
	BBC	S^#DEV$V_MNT,UCB$L_DEVCHAR(R5),10$ ;IF CLR, VOLUME NOT MOUNTED
	BBS	S^#DEV$V_FOR,UCB$L_DEVCHAR(R5),20$ ;IF SET, VOLUME FOREIGN
 
;
; SUBROUTINE TO UPDATE VOLUME TRANSACTION COUNT. IF THERE IS A FILE OPEN ON
; THE CHANNEL, REDIRECT THE I/O FUNCTION TO THE UCB ON WHICH THE FILE IS
; OPEN.
;
 
UPTRANSCNT:				;UPDATE VOLUME TRANSACTION COUNT
	BBC	#DEV$V_FOD,UCB$L_DEVCHAR(R5),5$ ;BRANCH IF DEVICE IS NOT FILE DEV
	BBS	#DEV$V_SQD,UCB$L_DEVCHAR(R5),5$ ;BRANCH IF DEVICE IS MAGTAPE
	MOVL	IRP$L_WIND(R3),R0	;GET WINDOW ADDRESS FROM IRP
	BEQL	5$			;BRANCH IF NO FILE OPEN
	MOVL	WCB$L_ORGUCB(R0),R5	;GET UCB ADDRESS OF FILE
	CMPL	IRP$L_UCB(R3),IRP$L_MEDIA(R3) ;SEE IF THIS IS A SPOOL OPERATION
	BNEQ	4$			;BRANCH IF YES
	MOVL	R5,IRP$L_MEDIA(R3)	;REDIRECT ALTERNATE UCB AS WELL
4$:	MOVL	R5,IRP$L_UCB(R3)	;REDIRECT UCB ADDRESS IN IRP

5$:	MOVL	UCB$L_VCB(R5),R0	;GET ADDRESS OF VCB
	INCW	VCB$W_TRANS(R0)		;UPDATE VOLUME TRANSACTION COUNT
	RSB				;
 
;
; VOLUME MARKED FOR DISMOUNT OR NOT MOUNTED
;
 
10$:	MOVZWL	#SS$_DEVNOTMOUNT,R0	;SET DEVICE NOT MOUNTED
	BRB	30$
 
;
; DEVICE MOUNTED FOREIGN
;
 
20$:	MOVZWL	#SS$_DEVFOREIGN,R0	;SET DEVICE FOREIGN
30$:	BRW	EXE$ABORTIO


	.DSABL	LSB
 
	.END
