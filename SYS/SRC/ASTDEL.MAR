	.TITLE	ASTDEL - AST ENQUEUE AND DELIVERY
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************

;++
; FACILITY: EXECUTIVE, SCHEDULER
;
; ABSTRACT:
;	ASTDEL CONTAINS THE AST DELIVERY INTERRUPT SERVICE ROUTINE AND THE
;	ASSOCIATED SUBROUTINES SCH$QAST AND SCH$NEWLVL.  THESE ROUTINES
;	IMPLEMENT THE PRIMITIVE AST QUEUEING AND DELIVERY MECHANISMS.
;
; ENVIRONMENT:
;	MODE = KERNEL
;--
;
;	.PAGE
	.SBTTL	HISTORY			; DETAILED
;
; AUTHOR:	R. HUSTVEDT	 CREATION DATE: 1-SEP-76
;
; MODIFIED BY:
;
;	V02-009	KTA0054		Kerbey T. Altmann	23-Dec-1918
;		Add new piggyback kast routine for IPAST.
;		Make EXE$ASTDEL a global symbol.
;
;	V02-008	SRB0037		Steve Beckhardt		28-Oct-1981
;		Added entry point SCH$REMOVACB.
;
;	V02-007	SRB0023		Steve Beckhardt		3-Jun-1981
;		Added routine SCH$SWAPACBS.
;
;	V02-006	KDM0053		Kathleen D. Morse	15-May-1981
;		Add entry points for loadable multi-processing code.
;		Fix a couple comments.
;
;	V02-005	RIH0001		Richard I. Hustvedt	25-Aug-1980
;		General performance enhancement and re-organization.
;

	.PAGE
	.SBTTL	DECLARATIONS

;
; INCLUDE FILES:
;
	$ACBDEF				; AST CONTROL BLOCK DEFINITIONS
	$IPLDEF				; IPL DEFINITIONS
	$PCBDEF				; PCB DEFINITIONS
	$PHDDEF				; PHD DEFINITIONS
	$PRDEF				; PROCESSOR REGISTER DEFINITIONS
	$PRIDEF				; PRIORITY INCREMENT CLASS DEFS
	$PSLDEF				; PSL FIELD DEFINITIONS
	$SSDEF				; STATUS CODE DEFINITIONS

;
; EQUATED SYMBOLS:
;
ASTEXIT=0				; AST EXIT CHANGE MODE CODE
;
; OWN STORAGE:
;
	.PSECT	A$EXENONPAGED,LONG

	.PAGE
	.SBTTL	SCH$ASTDEL - AST DELIVERY INTERRUPT HANDLER

;++
; FUNCTIONAL DESCRIPTION:
;	SCH$ASTDEL RECEIVES THE AST DELIVERY INTERRUPT (IPL - 2) WHICH
;	IS INITIATED BY AN REI INSTRUCTION DETECTING ASTLVL LESS THAN
;	OR EQUAL TO PSL<CURRENT_MODE>.  THE HEAD OF THE AST QUEUE
;	FOR THE CURRENT PROCESS IS REMOVED AND PROCESSED.  SPECIAL
;	KERNEL MODE ASTS ARE PROCESSED WITH IPL REMAINING AT IPL 2.
;	NORMAL ASTS ARE DELIVERED BY PUSHING THE AST INFORMATION ON 
;	THE STACK OF THE MODE RECEIVING THE AST AND THE AST ACTIVE
;	BIT FOR THAT MODE IS SET TO PREVENT SUBSEQUENT ASTS UNTIL THE
;	CURRENT ONE FOR THAT MODE HAS BEEN PROCESSED.
;	SPURIOUS AST INTERRUPTS WILL BE DETECTED AND IGNORED.
;
;	THIS ROUTINE CONTAINS TWO HOOKS FOR LOADABLE MULTI-PROCESSING
;	CODE.  THE FIRST HOOK, MPH$ASTDELHK, IS REPLACED BY A BRANCH
;	TO THE LOADABLE CODE, WHILE THE SECOND HOOK, MPH$ASTDELCONT, IS
;	THE ENTRY POINT AT WHICH THE LOADABLE CODE REJOINS THE COMMON
;	LINE OF EXECUTION.
;
;
; CALLING SEQUENCE:
;	IPL - 2  INTERRUPT
;
;
; INPUT PARAMETERS:
;	00(SP) = PC AT AST DELIVERY INTERRUPT
;	04(SP) = PSL AT AST DELIVERY INTERRUPT
;
; IMPLICIT INPUTS:
;	PCB OF CURRENT PROCESS LOCATED VIA SCH$GL_CURPCB
;	AST CONTROL BLOCK AT HEAD OF AST QUEUE FOR PROCESS
;
; OUTPUT PARAMETERS:
;	NONE
;
; COMPLETION CODES:
;	NONE
;--

	.ALIGN	LONG			; INTERRUPT ROUTINES ON LW BOUND
SCH$ASTDEL::				; AST DELIVERY INTERRUPT HANDLER
	PUSHL	R5			; SAVE R0-R5
	PUSHL	R4			; ONE REGISTER AT A TIME FOR
	PUSHL	R3			; SPEED AT THE
	PUSHL	R2			; EXPENSE OF SPACE AND
	PUSHL	R1			; CLARITY
	PUSHL	R0			; (PUSHLS ARE FASTER THAN MOVQ OR PUSHR)
GETNEXT:MOVL	W^SCH$GL_CURPCB,R4	; GET POINTER TO CURRENT PCB
	SETIPL	#IPL$_SYNCH		; BLOCK SYSTEM EVENTS
MPH$ASTDELHK::				; MULTI-PROCESSING CHECK HOOKS IN HERE
	REMQUE	@PCB$L_ASTQFL(R4),R5	; AND REMOVE HEAD OF QUEUE
	BVS	QEMPTY			; EXIT IF QUEUE EMPTY
MPH$ASTDELCONT::			; MULTI-PROCESSING CHECK RETURNS TO HERE
	BBCC	#ACB$V_KAST,ACB$B_RMOD(R5),NORM	; BR IF NORMAL AST
	.PAGE
	.SBTTL	KAST - SPECIAL KERNEL AST DISPATCHING
;
; AST LEVEL WILL BE LEFT AT 0 (KERNEL) WHILE PROCESSING THE SPECIAL KERNEL
; AST.  IT WILL BE CORRECTED EVENTUALLY BEFORE IPL IS DROPPED BELOW IPL$_ASTDEL
; BY REPEATED TRIPS TO GETNEXT.
;
; THE KERNEL AST ROUTINE IS ENTERED VIA A JSB TO THE SPECIFIED
; ADDRESS WITH IPL=2 AND THE POINTER TO THE AST CONTROL BLOCK
; IN R5.  IT IS THE RESPONSIBILITY OF THE KERNEL AST ROUTINE
; TO PROPERLY RELEASE OR OTHERWISE DISPOSE OF THE AST CONTROL
; BLOCK.  THE PCB BASE ADDRESS IS IN R4.
;
; REGISTERS R0-R5 HAVE BEEN PRESERVED AND ARE AVAILABLE FOR 
; USE BY THE AST ROUTINE.
;
;
; SINCE KAST ROUTINES OFTEN QUEUE NORMAL ASTS, QIO FOR EXAMPLE, ATTEMPT
; TO DELIVER FURTHER ASTS WITHOUT INCURRING REDUNDANT EXIT AND ENTRY COSTS.
;

	PUSHAB	GETNEXT			; SET RETURN ADDRESS TO CONTINUE WITH Q
	SETIPL	#IPL$_ASTDEL		; DROP IPL TO PERMIT SYSTEM EVENTS
	JMP	@ACB$L_KAST(R5)		; DO KERNEL MODE AST

;
; THIS UNUSUAL CALLING SEQUENCE IS TO MINIMIZE THE NUMBER OF TAKEN BRANCHES
; AND IS EQUIVALENT TO:
;	JSB	@ACB$L_KAST(R5)
;	BRB	GETNEXT
;
	.PAGE
	.SBTTL	ASTDEL EXITS
;
; IF THE ASTMODE IS DISABLED OR ACTIVE, THEN SET ASTLVL TO PREVENT
; FURTHER INTERRUPTS.  THERE IS AN ASSUMPTION (AND HAS BEEN FOREVER)
; THAT AN INNER ACCESS MODE WILL NOT EXIT TO AN OUTER ACCESS MODE
; WITH EITHER AN ACTIVE AST OR LEAVING ASTS DISABLED.
;

BLOCKED:				;

;
; THE AST DELIVERY INTERRUPT WAS SPURIOUS, A PENDING IPL-2 INTERRUPT LEFT
; OVER FROM THE PREVIOUS PROCESS.  THESE OCCUR INFREQUENTLY AND ARE DETECTED
; BY COMPARING THE ACCESS MODE OF THE FIRST AST IN THE QUEUE WITH THE CURRENT
; MODE OF THE INTERRUPTED PSL.  SPURIOUS IPL-2 INTERRUPTS ARE ALSO DETECTED
; BY THE REMQUE ABOVE FINDING AN EMPTY QUEUE.  
;

SPURIOUS:				;
	INSQUE	(R5),PCB$L_ASTQFL(R4)	; REQUEUE AT HEAD OF QUEUE
	BRB	SETLVL			; AND SET NEW ASTLEVEL
	
;
; THE AST QUEUE IS NOW EMPTY.   EITHER THE AST DELIVERY INTERRUPT IS SPURIOUS
; OR ALL OF THE QUEUED ASTS HAVE BEEN CANCELED BY SIMPLY REMOVING THEM FROM THE
; QUEUE.  INSURE THAT ASTLVL IS SET TO PREVENT FURTHER INTERRUPTS.
;
; R4 - PCB ADDRESS
;
MPH$QEMPTYCONT::			; MULTI-PROCESSING CHECK RETURNS TO HERE
QEMPTY:
	MOVL	#4,R1			; SET NULL AST LEVEL
;
; SET AST LEVEL TO BEST ESTIMATE OF CORRECT ACCESS MODE.
;
; R1 - NEW ACCESS MODE TO SET IN ASTLVL
;
SETLVL:	MOVL	PCB$L_PHD(R4),R0	; GET PROCESS HEADER ADDRESS
	MOVB	R1,PHD$B_ASTLVL(R0)	; SET ASTLEVEL IN HW PCB
	MTPR	R1,#PR$_ASTLVL		; AND PROCESSOR REGISTER
ASTDEXIT:				; AST DELIVERY EXIT
	MOVQ	(SP)+,R0		; RESTORE REGISTERS R0,R1
	MOVQ	(SP)+,R2		; RESTORE REGISTERS R2,R3
	MOVQ	(SP)+,R4		; RESTORE REGISTERS R4,R5
	REI				; AND RETURN
	.PAGE
	.SBTTL	NORM - NORMAL AST DELIVERY
;
;	AT THIS POINT THE KERNEL STACK IS:
;	00(SP) = SAVED R0
;	04(SP) = SAVED R1
;	08(SP) = SAVED R2
;	12(SP) = SAVED R3
;	16(SP) = SAVED R4
;	20(SP) = SAVED R5
;	24(SP) = SAVED PC
;	28(SP) = SAVED PSL
;
;	R0 - PHD ADDRESS
;	R1 - ACCESS MODE OF NEXT ACB OR NULL AST LEVEL
;	R4 - PCB ADDRESS
;	R5 - ACB ADDRESS
;

NORM:					; NORMAL AST DELIVERY
	ASSUME	ACB$V_MODE EQ 0
	ASSUME	ACB$S_MODE EQ 2
	CLRL	R1			; BACKGROUND R3 WITH ZEROES
	BICB3	#^C<3>,ACB$B_RMOD(R5),R1; EXTRACT ACCESS MODE FOR CURRENT AST
	CMPZV	#PSL$V_CURMOD,#PSL$S_CURMOD,28(SP),R1  ; IS CURRENT MODE LEGAL
	BLSS	SPURIOUS		; BR IF SPURIOUS
	MOVAB	(R1)+,R3		; SET FOR NEXT ACCESS MODE
	BBC	R3,PCB$B_ASTEN(R4),BLOCKED ; BR IF AST DISABLED
	BBSS	R3,PCB$B_ASTACT(R4),BLOCKED ; SET AST ACTIVE
	MTPR	R1,#PR$_ASTLVL		; SET AST LEVEL IN PROCESSOR REGISTER
	MOVL	PCB$L_PHD(R4),R0	; GET PROCESS HEADER ADDRESS
	MOVB	R1,PHD$B_ASTLVL(R0)	; SET AST LEVEL IN HW PCB
	BBC	#ACB$V_QUOTA,ACB$B_RMOD(R5),30$	; SKIP IF NO QUOTA ACCOUNTING
	INCW	PCB$W_ASTCNT(R4)	; UPDATE OUTSTANDING COUNT
30$:					; AND DELIVER AST
	SETIPL	#IPL$_ASTDEL		; NOW DROP IPL TO PERMIT SYSTEM EVENTS
;
;	A NEW VALUE FOR ASTLVL HAS NOW BEEN COMPUTED AND SET.
;	THE AST REPRESENTED BY THE AST CONTROL BLOCK LOCATED VIA
;	R5 CAN NOW BE DELIVERED.
;
	TSTL	R3			; CHECK FOR DELIVERY TO KERNEL
	BNEQ	NOTKMODE		; BR IF NOT KERNEL MODE
	.PAGE
	.SBTTL	NORMAL KERNEL MODE AST
;
;	DELIVER NORMAL AST TO KERNEL MODE
;
KMODE:	MOVQ	(SP)+,R0		; RESTORE R0,R1
	CMPL	16(SP),#ASTEXIT_CHMK	; DELIVERY OCCUR DURING ASTEXIT REI?
	BNEQ	40$			; NO, JUST CONTINUE
	BITB	#<PSL$M_CURMOD-		; WAS INTERRUPTED MODE KERNEL?
		@<-PSL$V_CURMOD>>,23(SP);
	BEQL	50$			; YES, PREVIOUS AST R0,R1,PC,PSL ALREADY ON STACK
;
;	00(SP) = R2, 04(SP) = R3, 08(SP) = R4, 12(SP) = R5,
;	16(SP) = PC, 20(SP) = PSL
;
40$:
	MOVQ	8(SP),-(SP)		; SHUFFLE STACK
;
;	00(SP) = R4, 04(SP) = R5, 08(SP) = R2, 12(SP) = R3,
;	16(SP) = R4, 20(SP) = R5, 24(SP) = PC, 28(SP) = PSL
;
	MOVQ	8(SP),-(SP)		; OPEN FOR AST ARG LIST
;
;	00(SP) = R2, 04(SP) = R3, 08(SP) = R4, 12(SP) = R5,
;	16(SP) = R2, 20(SP) = R3, 24(SP) = R4, 28(SP) = R5,
;	32(SP) = PC, 36(SP) = PSL
;
	MOVQ	R0,24(SP)		; SET R0,R1 IN ARG LIST
50$:	MOVL	ACB$L_ASTPRM(R5),20(SP)	; SET AST PARAMETER IN ARG LIST
	MOVL	#5,16(SP)		; SET COUNT FOR ARGUMENT LIST
	MOVL	R5,R0			; RELEASE AST CONTROL BLOCK
	PUSHL	ACB$L_AST(R5)		; SAVE AST ROUTINE ADDRESS
	BBC	#ACB$V_PKAST,ACB$B_RMOD(R5),60$ ; BR IF NO PIGGY-BACK KAST
;
; CALL PIGGY-BACK SPECIAL KERNEL AST ROUTINE.
; 	R5 - ACB ADDRESS (MUST BE PRESERVED)
; 	IPL = IPL$_ASTDEL (MUST NOT BE LOWERED)
;
	JSB	@ACB$L_KAST(R5)		; CALL KAST ROUTINE
	BRB	70$			; NO DELETE FOR PKAST
60$:	BBS	#ACB$V_NODELETE,ACB$B_RMOD(R5),70$; BR IF NOT DELETEABLE
	BSBW	EXE$DEANONPAGED		; TO DYNAMIC POOL
70$:	MOVQ	(SP)+,R1		; RESTORE R1,R2
	MOVQ	(SP)+,R3		; RESTORE R3,R4
	MOVL	(SP)+,R5		; RESTORE R5
	SETIPL	#0			; DROP IPL TO ZERO
;	BRB	EXE$ASTDEL		; FALL THROUGH TO CALL AST ROUTINE
	.PAGE
;
;	CALL AST ROUTINE WITH AST ARGUMENT LIST
;
;	THE CALL IS EXECUTED AT THE MODE WHICH RECEIVED THE AST WITH
;	THE AST ARGUMENT LIST ON THE TOP OF THE STACK.  WHEN THE
;	AST ROUTINE RETURNS FROM THE CALL, AN ASTEXIT CHANGE MODE
;	TO KERNEL INSTRUCTION WILL BE ISSUED.  ASTEXIT WILL RESET 
;	THE AST ACTIVE BIT FOR THE CURRENT MODE AND MAY CAUSE DELIVERY 
;	OF ADDITIONAL ASTS.
;
;	AST ARGUMENT LIST:
;	------------------
;
;	00(SP) = NUMBER OF ARGUMENTS, =5
;	04(SP) = AST PARAMETER
;	08(SP) = SAVED R0
;	12(SP) = SAVED R1
;	16(SP) = SAVED PC
;	20(SP) = SAVED PSL
;
EXE$ASTDEL::				; DELIVER AST CALL
	CALLG	(SP),(R1)		; CALL AST ROUTINE
EXE$ASTRET::				; RETURN ADDRESS FOR AST CALL
	ADDL	#8,SP			; REMOVE ARG COUNT AND ASTPRM
	CHMK	S^#ASTEXIT		; AND EXIT FROM AST ROUTINE
ASTEXIT_CHMK:				; RETURN ADDRESS FOR AST EXIT CHMK
	MOVQ	(SP)+,R0		; RESTORE R0,R1
	REI				; EXECUTE REI IN MODE OF AST

	.PAGE
	.SBTTL	NORMAL EXEC, SUPER AND USER MODE AST
;
;	DELIVER NORMAL AST FOR EXEC, SUPER AND USER MODE
;

NOTKMODE:				; NOT AN AST FOR KERNEL MODE
;
	MFPR	R3,R1			; GET STACK POINTER
	IFNOWRT	#24,-24(R1),STACKERR,R3	; ENOUGH STACK SPACE??
	MOVQ	24(SP),-(R1)		; MOVE PC,PSL TO PROPER STACK
	MOVQ	(SP)+,-(R1)		; AND R0,R1 FROM KERNEL STACK
	CMPL	16(SP),#ASTEXIT_CHMK	; DELIVERY OCCUR DURING ASTEXIT REI?
	BEQL	50$			; YES, CHECK FOR SAME MODE
10$:	MOVL	ACB$L_ASTPRM(R5),-(R1)	; SET AST PARAMETER IN ARG LIST
	MOVL	#5,-(R1)		; AND FINALLY, ARGUMENT COUNT OF 5
	MTPR	R1,R3			; SAVE UPDATED STACK POINTER
	PUSHL	ACB$L_AST(R5)		; STACK AST ENTRY POINT
	MOVL	R5,R0			; SET ADDRESS OF ACB FOR RELEASE
	MOVAB	EXE$ASTDEL,20(SP)	; SET PC TO AST DELIVERY CALL
	MOVAL	(R3)[R3],R3		; MODE=MODE*5, CURMOD=PRVMOD
	ASSUME	PSL$V_CURMOD EQ PSL$V_PRVMOD+2; FOR ABOVE MOVAL
	ASHL	#PSL$V_PRVMOD,R3,24(SP)	; SYNTHESIZE PSL FOR PROPER MODE
	BITB	#<ACB$M_NODELETE!ACB$M_PKAST>,ACB$B_RMOD(R5) ; SPECIAL ACTIONS?
	BNEQ	40$			; BR IF SO AND DECODE
20$:	BSBW	EXE$DEANONPAGED		; RELEASE AST CONTROL BLOCK
30$:	MOVQ	(SP)+,R1		; RESTORE R1,R2
	MOVQ	(SP)+,R3		; RESTORE R3,R4
	MOVL	(SP)+,R5		; RESTORE R5
	REI				; AND ENTER AST MODE
					; DROPS IPL TO ZERO
40$:	BBC	#ACB$V_PKAST,ACB$B_RMOD(R5),30$ ; BR IF NO PIGGY-BACK KAST
;
; CALL PIGGY-BACK SPECIAL KERNEL AST ROUTINE.
; 	R5 - ACB ADDRESS (MUST BE PRESERVED)
; 	IPL = IPL$_ASTDEL (MUST NOT BE LOWERED)
;
	JSB	@ACB$L_KAST(R5)		; CALL KAST ROUTINE
	BRB	30$			; NO DELETE FOR PKAST
;
; SPECIAL CASE FOR AST DURING AST EXIT.
;
50$:	CMPZV	#PSL$V_CURMOD,-		; WAS AST'S MODE THE ONE INTERRUPTED?
		#PSL$S_CURMOD,20(SP),R3	;
	BNEQ	10$			; NO, JUST CONTINUE
	ADDL	#16,R1			; POP R0,R1,PC,PSL - ALREADY ON STACK
	BRB	10$			; CONTINUE

;
;	REFLECT STACK ERROR
;
STACKERR:				; ERROR IN STACK MOVE
	CMPL	#PSL$C_USER,R3		; IS THIS AST FOR USER MODE?
	BNEQ	10$			; NO, THEN WE CANT EXTEND THE STACK
	PUSHR	#^M<R1,R2,R3,R4,R5>	; SAVE NECESSARY REGISTERS
	MOVAB	-24(R1),R2		; COMPUTE DESIRED STACK TOP ADDRESS
	JSB	EXE$EXPANDSTK		; EXPAND USER STACK TO DESIRED SIZE
	POPR	#^M<R1,R2,R3,R4,R5>	; RESTORE REGISTERS
	BLBS	R0,NOTKMODE		; CONTINUE IF SPACE CREATED
10$:	BBCC	R3,PCB$B_ASTACT(R4),20$	; CLEAR AST ACTIVE BIT
20$:	MOVQ	16(SP),-(SP)		; CREATE SPACE ON STACK
	MOVQ	16(SP),-(SP)		; BY MOVING R2-R5 DOWN
	MOVQ	40(SP),32(SP)		; SAVE PC,PSL AT INTERRUPT
	MOVL	ACB$L_AST(R5),40(SP)	; SET PC AT FAULT TO AST ADDRESS
	MOVL	ACB$L_ASTPRM(R5),28(SP)	; SET ASTPRM IN ARGLIST
	MOVL	R1,24(SP)		; SAVE STACK VA AT FAULT
	MULL	#1+<1@<PSL$V_CURMOD-PSL$V_PRVMOD>>,R3	; CURRENT MODE = PREV
	ROTL	#PSL$V_PRVMOD,R3,44(SP)	; SYNTHESIZE NEW PSL FOR FAULT
	MOVL	R5,R0			; SET ADDRESS FOR RELEASE OF ACB
	BBC	#ACB$V_PKAST,ACB$B_RMOD(R5),30$ ; BR IF NO PIGGY-BACK KAST
;
; CALL PIGGY-BACK SPECIAL KERNEL AST ROUTINE.
; 	R5 - ACB ADDRESS (MUST BE PRESERVED)
; 	IPL = IPL$_ASTDEL (MUST NOT BE LOWERED)
;
	JSB	@ACB$L_KAST(R5)		; CALL KAST ROUTINE
	BRB	40$			; NO DELETE FOR PKAST
30$:	BBS	#ACB$V_NODELETE,ACB$B_RMOD(R5),40$; BR IF NOT DELETEABLE
	BSBW	EXE$DEANONPAGED		; AND DEALLOCATE IT
40$:	POPR	#^M<R2,R3,R4,R5>	; RESTORE ALL REGISTERS
	POPR	#^M<R0,R1>		; FROM POINT OF INTERRUPT
	SETIPL	#0			; DROP IPL TO 0
	BRW	EXE$ASTFLT		; REFLECT EXCEPTION
	.PAGE
	.SBTTL	EXE$IPAPBKAST - SPECIAL PIGGY BACK KAST FOR IPAST SERVICE
;++
; FUNCTIONAL DESCRIPTION:
;	THIS ROUTINE IS A SPECIAL PIGGY BACK KAST ROUTINE CALLED BY
;	ASTDEL DURING DELIVERY OF THE INTER-PROCESS AST.  IT TAKES THE
;	IPAST INDEX RESIDING IN ACB$L_AST AND USES IT TO INDEX INTO THE
;	VECTOR OF AST ADDRESSES LOCATED IN THE VECTOR PAGE OF THE CONTROL
;	REGION.  THIS ADDRESS REPLACES WHAT WAS ON THE STACK WHEN THIS
;	ROUTINE WAS ENTERED.  ROUTINE IS INCLUDED HERE SINCE ITS HAS
;	KNOWLEDGE OF HOW STACK LOOKS WHEN PIGGYBACK AST IS CALLED.
;
; INPUTS:
;	4(SP) --> AST ADDRESS
;	ACB$L_AST(R5) = INDEX OF IPASTS
;
; OUTPUTS:
;	4(SP) --> NEW AST ADDRESS
;
;--

EXE$IPAPBKAST::
	MOVL	ACB$L_AST(R5),R2	; Pick up index
	MOVL	@#CTL$AL_IPASTVEC[R2],R0; Get IPAST address
	BEQL	10$			; No longer in use
	MOVL	R0,4(SP) 		; Fixup AST delivery address
10$:	MOVL	R5,R0			; Transfer address of packet
	BRW	EXE$DEANONPAGED		; Get rid of it
	.PAGE
	.SBTTL	SCH$QAST - ENQUEUE AST CONTROL BLOCK FOR PROCESS
;++
; FUNCTIONAL DESCRIPTION:
;	SCH$QAST INSERTS THE AST CONTROL BLOCK SUPPLIED IN THE PROPER
;	POSITION BY ACCESS MODE IN THE AST QUEUE OF THE PROCESS SPECIFIED
;	BY THE PID FIELD OF THE AST CONTROL BLOCK.  AN AST ARRIVAL EVENT
;	IS THEN REPORTED FOR THE PROCESS TO REACTIVATE FROM A WAIT STATE
;	IF APPROPRIATE.  THE AST CONTROL BLOCK WILL BE RELEASED IMMEDIATELY
;	IF THE PID SPECIFIES A NON-EXISTENT PROCESS.
;
;	LOADABLE MULTI-PROCESSING CODE WILL REPLACE THIS ROUTINE WITH
;	ENTIRELY NEW CODE, AT MPH$QAST.
;
; CALLING SEQUENCE:
;	BSB/JSB	SCH$QAST
;
; INPUT PARAMETERS:
;	R2 - PRIORITY INCREMENT CLASS
;	R5 - POINTER TO AST CONTROL BLOCK
;
; IMPLICIT INPUTS:
;	PCB OF PROCESS IDENTIFIED BY PID FIELD
;
; OUTPUT PARAMETERS:
;	R0 - COMPLETION STATUS CODE
;	R4 - PCB ADDRESS OF PROCESS FOR WHICH AST WAS QUEUED
;
; SIDE EFFECTS:
;	THE PROCESS IDENTIFIED BY THE PID IN THE AST CONTROL BLOCK
;	WILL BE MADE EXECUTABLE IF NOT SUSPENDED.
;
; COMPLETION CODES:
;	SS$_NORMAL  -  NORMAL SUCCESSFUL COMPLETION STATUS
;	SS$_NONEXPR -  NON-EXISTENT PROCESS
;--
	.ENABL	LSB
QNONEXPR:				;
	MOVL	R5,R0			; RELEASE AST CONTROL BLOCK
	BSBW	EXE$DEANONPAGED		; IF NO SUCH PROCESS
	MOVZWL	#SS$_NONEXPR,R0		; SET ERROR STATUS CODE
	BRB	QEXIT			; AND EXIT

MPH$QAST::				; MULTI-PROCESSING HOOK TO REPLACE RTN
SCH$QAST::				; ENQUEUE AST FOR PROCESS
	MOVZWL	ACB$L_PID(R5),R0	; GET PROCESS INDEX FOR AST TARGET
	DSBINT	#IPL$_SYNCH		; DISABLE SYSTEM EVENTS
	MOVL	@W^SCH$GL_PCBVEC[R0],R4	; LOOK UP PCB ADDRESS
	CMPL	ACB$L_PID(R5),PCB$L_PID(R4) ; CHECK FOR MATCH IN PID
	BNEQ	QNONEXPR		; PID MISMATCHES
	CLRL	R0			; ASSUME KERNEL MODE AND CLEAR HIGH BITS
	INSQUE	(R5),PCB$L_ASTQFL(R4)	; ASSUME QUEUE IS EMPTY AND ATTEMPT INSERT
	BNEQ	50$			; BR IF IT WAS NOT EMPTY
	TSTB	ACB$B_RMOD(R5)		; CHECK FOR SPECIAL KERNEL AST
	BLSS	10$			; BR IF YES
	BICB3	#^C<3>,ACB$B_RMOD(R5),R0; GET AST MODE
;
; THE PROCESS HEADER ADDRESS IS ALWAYS A SYSTEM SPACE ADDRESS (NEGATIVE NUMBER)
; WHILE THE PROCESS HEADER IS RESIDENT.  DURING THE OUTSWAP TRANSITION IT IS
; THE BALANCE SLOT INDEX, A SMALL POSITIVE NUMBER.  FINALLY, AFTER OUTSWAP IT
; IS SET TO ZERO.  HENCE, THE FOLLOWING TEST COMBINES THE FETCH OF THE PHD
; ADDRESS WITH THE TEST FOR PROCESS RESIDENCE.
;
10$:	MOVL	PCB$L_PHD(R4),R1	; POINT TO PROCESS HEADER
	BGEQ	20$			; DON'T SET ASTLVL IF NOT RESIDENT
	MOVB	R0,PHD$B_ASTLVL(R1)	; SET ASTLVL IN PROCESS HEADER
20$:	CMPL	W^SCH$GL_CURPCB,R4	; IS PROCESS CURRENT PROCESS
	BEQL	40$			; YES,
	RPTEVT	AST			; REPORT AST ARRIVAL
30$:	MOVZWL	#SS$_NORMAL,R0		; SET SUCCESS STATUS CODE
QEXIT:	ENBINT				; ENABLE INTERRUPTS
	RSB				; AND RETURN
;
; IF THE AST IS BEING ENQUEUED FOR THE CURRENT PROCESS, THEN THE REPORTING
; OF THE AST EVENT CAN BE BYPASSED AND THE ASTLVL PROCESSOR REGISTER MUST BE
; SET INSTEAD.
;
40$:	MTPR	R0,#PR$_ASTLVL		; ALSO SET ASTLVL REGISTER
	BRB	30$			;
;
; THE AST QUEUE WAS NOT EMPTY (ITS USUAL CONDITION) AND THE PROPER
; POSITION FOR THE NEW AST MUST BE LOCATED.  SINCE THE AST CONTROL
; BLOCK HAS BEEN ERRONEOUSLY INSERTED ON THE QUEUE, IT MUST BE REMOVED
; FIRST.
;
50$:	REMQUE	(R5),R5			; ELSE CORRECT MISTAKE
	MOVAL	PCB$L_ASTQFL(R4),R1	; POINT TO QUEUE HEADER
	MOVL	(R1),R3			; GET FIRST ENTRY ON QUEUE
	TSTB	ACB$B_RMOD(R5)		; CHECK FOR SPECIAL KERNEL AST
	BGEQ	70$			; BR IF NOT
;
; THE NEW AST IS A SPECIAL KERNEL AST.  IT WILL GO AFTER ALL OTHER SPECIAL
; KERNEL ASTS OR AT THE HEAD OF THE QUEUE IF THERE ARE NONE.
;
60$:	CMPL	R1,R3			; CHECK FOR END OF QUEUE
	BEQL	110$			; BR IF NOT
	TSTB	ACB$B_RMOD(R3)		; CHECK FOR SPECIAL KERNEL IN QUEUE
	BGEQ	110$			; BR IF NOT
	MOVL	(R3),R3			; FLINK ON TO NEXT ACB
	BRB	60$			;
;
; THE NEW AST IS A NORMAL AST.  IT WILL GO AFTER ALL SPECIAL KERNEL ASTS
; AND ASTS WITH LOWER ACCESS MODE.
;
70$:	BICB3	#^C<3>,ACB$B_RMOD(R5),R0; GET AST MODE
80$:	CMPL	R1,R3			; CHECK FOR END OF QUEUE
	BEQL	110$			; INSERT IF AT END
	CMPZV	#ACB$V_MODE,#ACB$S_MODE,-
		ACB$B_RMOD(R3),R0	; COMPARE ACCESS MODES
	BGTR	100$			; IF GTR AT RIGHT PLACE
90$:	MOVL	(R3),R3			; FLINK ON TO NEXT ACB
	BRB	80$			;
100$:	TSTB	ACB$B_RMOD(R3)		; IS THIS ENTRY A SPECIAL KAST?
	BLSS	90$			; YES, MUST GO AFTER THIS
;
; NOW THE CORRECT POSITION HAS BEEN LOCATED.  INSERT THE AST CONTROL BLOCK
; ON THE QUEUE AND COMPUTE THE NEW VALUE FOR ASTLVL BY INTERROGATING THE
; MODE OF THE AST CONTROL BLOCK AT THE HEAD OF THE QUEUE.
;
110$:	INSQUE	(R5),@ACB$L_ASTQBL(R3)	; INSERT AFTER PREVIOUS
	CLRL	R0			; ASSUME KERNEL MODE
	MOVL 	PCB$L_ASTQFL(R4),R1	; GET HEAD OF AST QUEUE
	TSTB	ACB$B_RMOD(R1)		; IS IT KAST?
	BLSS	10$			; BR IF YES TO SET ASTLVL
	BICB3	#^C<3>,ACB$B_RMOD(R1),R0; GET AST MODE FOR HEAD OF QUEUE
	BRB	10$			; GO SET ASTLVL

	.DSABL LSB
	ASSUME	ACB$V_MODE EQ 0
	ASSUME	ACB$S_MODE EQ 2
	ASSUME	ACB$V_KAST EQ 7

	.PAGE
	.SBTTL	SCH$NEWLVL - COMPUTE NEW AST LEVEL
;
;	SCH$NEWLVL - COMPUTE NEW ASTLVL
;
;	THIS ROUTINE COMPUTES THE NEW AST LEVEL.  MPH$NEWLVLHK IS
;	THE LOCATION OF A HOOK FOR LOADABLE MULTI-PROCESSING CODE.
;	THE REMAINDER OF THE ROUTINE IS REPLACED BY THE LOADABLE CODE.
;
; INPUT:
;	R4 - ADDRESS OF CURRENT PCB
;
; OUTPUT:
;	PR$_ASTLVL - NEW AST LEVEL
;	PHD$V_ASTLVL - NEW AST LEVEL
;
	.ENABL	LSB
SCH$NEWLVL::				; COMPUTE NEW AST LEVEL
	MOVAL	PCB$L_ASTQFL(R4),R0	; GET ADDRESS OF AST QUEUE
	DSBINT	#IPL$_SYNCH		; DISABLE SYSTEM EVENTS
	CLRL	R2			; ASSUME KERNEL MODE
	MOVL	(R0),R1			; GET FLINK
	CMPL	R0,R1			; AND CHECK FOR EMPTY QUEUE
	BEQL	20$			; YES, QUEUE IS EMPTY
	ASSUME	ACB$V_KAST EQ 7
	TSTB	ACB$B_RMOD(R1)		; CHECK FOR KERNEL AST
	BLSS	10$			; BR IF NOT
	BICB3	#^C<3>,ACB$B_RMOD(R1),R2; GET REQUEST MODE
10$:	MOVL	PCB$L_PHD(R4),R0	; GET ADDRESS OF PHD
MPH$NEWLVLHK::				; MULTI-PROCESSING HOOK REPLACES REST
					; OF THIS ROUTINE
	ASSUME	PHD$S_ASTLVL EQ 8	; FOR USE OF MOVB
	MOVB	R2,PHD$B_ASTLVL(R0)	; SET ASTLVL IN PHD
	MTPR	R2,#PR$_ASTLVL		; SET ASTLVL REGISTER
	ENBINT				; ENABLE SYSTEM EVENTS AGAIN
	RSB				; RETURN
; 
20$:	MOVL	#4,R2			; SET NULL AST LEVEL
	BRB	10$			;
	.DSABL	LSB
	.PAGE
	.SBTTL	SCH$SWAPACBS - SWAP AST CONTROL BLOCKS
	.SBTTL	SCH$REMOVACB - REMOVE AST CONTROL BLOCK

;++
;
; FUNTIONAL DESCRIPTION:
;
;	SCH$SWAPACBS REMOVES AN ACB FROM AN AST QUEUE AND INSERTS ANOTHER
;	ACB IN ITS PLACE.  I.E. IT SWAPS THE TWO ACBS.  THIS IS NORMALLY
;	DONE BECAUSE THE ACB BEING REMOVED IS PART OF A LARGER STRUCTURE
;	THAT MUST BE FREED UP FOR ANOTHER PURPOSE.  THE ACB BEING 
;	INSERTED IS NORMALLY A COPY OF THE ONE BEING REMOVED EXCEPT THAT THE
;	ACB$M_NODELETE BIT IS NORMALLY CLEARED.  I.E. THE ONE BEING
;	REMOVED WAS NOT DELETABLE BUT THE ONE BEING INSERTED IS.
;
;
;	SCH$REMOVACB IS AN ALTERNATE ENTRY POINT THAT SIMPLY REMOVES
;	AN ACB FROM AN AST QUEUE.
;
; CALLING SEQUENCE:
;
;	BSB/JSB SCH$SWAPACBS
;	BSB/JSB SCH$REMOVACB
;	NOTE:  THESE ROUTINES MUST BE CALLED AT IPL$_SYNCH
;
; INPUT PARAMETERS:
;
;	R2	ADDRESS OF ACB TO INSERT (SCH$SWAPACBS ONLY)
;	R5	ADDRESS OF ACB TO REMOVE
;
; OUTPUT PARAMETERS:
;
;	NONE
;--

SCH$SWAPACBS::
	INSQUE	(R2),(R5)		; INSERT NEW ACB AFTER OLD ONE
SCH$REMOVACB::
	REMQUE	(R5),R5			; REMOVE OLD ACB
	RSB



	.END
