	.TITLE	SDAT SCHEDULER DATA
	.IDENT	'V03-001'

;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************

;++
; FACILITY: EXECUTIVE,SCHEDULER
;
; ABSTRACT: THIS MODULE CONTAINS THE STATIC GLOBAL DATA FOR ALL
;	    PROCESS SCHEDULING MODULES.
;
;	V03-001	HRJ0060		Herb Jacobs	30-Mar-1982
;		Add flags for swapper to synchronize FREWSLE with process.
;
;	V02-003	HRJ0051		Herb Jacobs	29-Jan-1982
;		Added flag byte for RELPFN to communicate with OSWPSCHED.
;		Remove global definitions of unused SIP flags.
;
;	V02-002	SPF0006		Steve Forgey	06-Jul-1981
;		Add cumulative pages inswapped counter
;
;--
	$STATEDEF			; SCHEDULER STATE DEFINITIONS
;
; MACROS:
;
	.MACRO	$HEADR
	.LONG	.
	.LONG	.-4
	.ENDM

;
;	WAIT QUEUE HEADER GENERATING MACRO
;
;	WQHEAD	WAITSTATE,QNAME
;
	.MACRO	WQHEAD,STATE,QNAME
SAVE.=.
ST=SCH$C_'STATE
STMP=ST-MXST
	.IF	GT,STMP
	.REPT	STMP
	$HEADR
	.LONG	0
	.ENDR
SAVE.=.
MXST=ST
	.ENDC
ST=12*ST
.=ST+SCH$AQ_WQHDR
SCH$GQ_'QNAME::
	$HEADR
	.WORD	0
	.WORD	SCH$C_'STATE
	.IF	GT,STMP
SAVE.=.
	.ENDC
.=SAVE.
	.ENDM	WQHEAD

;
; EQUATES:
;
MXST=1					;INITIALIZE MAXIMUM STATE SEEN

;
; SCHEDULER GLOBAL DATA AREA
;
;       CAUTION - - THESE DATA STRUCTURES ARE CAREFULLY ORDERED AND 
;   		    SHOULD NOT BE ALTERED WITHOUT MAKING CORRESPONDING
;		    CHANGES IN ALL CODE REFERENCING THEM.
;
	.PSECT	$$$220,LONG
	.LONG	0,0			; ZERO HEADER FOR OSWPSCHED SCAN
SCH$AQ_COMH::
	.LONG	.		;PRIORITY 0 COMPUTE QUEUE HEAD
SCH$AQ_COMT::
	.LONG	.-4		;PRIORITY 0 COMPUTE QUEUE TAIL
;
	$HEADR			;PRIORITY 1 COMPUTE QUEUE HEADER
	$HEADR			;PRIORITY 2 COMPUTE QUEUE HEADER
	$HEADR			;PRIORITY 3 COMPUTE QUEUE HEADER
	$HEADR			;PRIORITY 4 COMPUTE QUEUE HEADER
	$HEADR			;PRIORITY 5 COMPUTE QUEUE HEADER
	$HEADR			;PRIORITY 6 COMPUTE QUEUE HEADER
	$HEADR			;PRIORITY 7 COMPUTE QUEUE HEADER
	$HEADR			;PRIORITY 8 COMPUTE QUEUE HEADER
	$HEADR			;PRIORITY 9 COMPUTE QUEUE HEADER
	$HEADR			;PRIORITY 10 COMPUTE QUEUE HEADER
	$HEADR			;PRIORITY 11 COMPUTE QUEUE HEADER
	$HEADR			;PRIORITY 12 COMPUTE QUEUE HEADER
	$HEADR			;PRIORITY 13 COMPUTE QUEUE HEADER
	$HEADR			;PRIORITY 14 COMPUTE QUEUE HEADER
	$HEADR			;PRIORITY 15 COMPUTE QUEUE HEADER
	$HEADR			;PRIORITY 16 COMPUTE QUEUE HEADER
	$HEADR			;PRIORITY 17 COMPUTE QUEUE HEADER
	$HEADR			;PRIORITY 18 COMPUTE QUEUE HEADER
	$HEADR			;PRIORITY 19 COMPUTE QUEUE HEADER
	$HEADR			;PRIORITY 20 COMPUTE QUEUE HEADER
	$HEADR			;PRIORITY 21 COMPUTE QUEUE HEADER
	$HEADR			;PRIORITY 22 COMPUTE QUEUE HEADER
	$HEADR			;PRIORITY 23 COMPUTE QUEUE HEADER
	$HEADR			;PRIORITY 24 COMPUTE QUEUE HEADER
	$HEADR			;PRIORITY 25 COMPUTE QUEUE HEADER
	$HEADR			;PRIORITY 26 COMPUTE QUEUE HEADER
	$HEADR			;PRIORITY 27 COMPUTE QUEUE HEADER
	$HEADR			;PRIORITY 28 COMPUTE QUEUE HEADER
	$HEADR			;PRIORITY 29 COMPUTE QUEUE HEADER
	$HEADR			;PRIORITY 30 COMPUTE QUEUE HEADER
	$HEADR			;PRIORITY 31 COMPUTE QUEUE HEADER
SCH$AQ_COMOH::			; NON_RESIDENT COMPUTE QUEUE HEADER VECTOR
	.LONG	.		; PRIORITY 0 NON-RES HEADER
SCH$AQ_COMOT::			; NON-RESIDENT COMPUTE QUEUE TAIL VECTOR
	.LONG	.-4		;
	$HEADR			; PRIORITY 1 NON-RES COMPUTE QUEUE
	$HEADR			; PRIORITY 2 NON-RES COMPUTE QUEUE
	$HEADR			; PRIORITY 3 NON-RES COMPUTE QUEUE
	$HEADR			; PRIORITY 4 NON-RES COMPUTE QUEUE
	$HEADR			; PRIORITY 5 NON-RES COMPUTE QUEUE
	$HEADR			; PRIORITY 6 NON-RES COMPUTE QUEUE
	$HEADR			; PRIORITY 7 NON-RES COMPUTE QUEUE
	$HEADR			; PRIORITY 8 NON-RES COMPUTE QUEUE
	$HEADR			; PRIORITY 9 NON-RES COMPUTE QUEUE
	$HEADR			; PRIORITY 10 NON-RES COMPUTE QUEUE
	$HEADR			; PRIORITY 11 NON-RES COMPUTE QUEUE
	$HEADR			; PRIORITY 12 NON-RES COMPUTE QUEUE
	$HEADR			; PRIORITY 13 NON-RES COMPUTE QUEUE
	$HEADR			; PRIORITY 14 NON-RES COMPUTE QUEUE
	$HEADR			; PRIORITY 15 NON-RES COMPUTE QUEUE
	$HEADR			; PRIORITY 16 NON-RES COMPUTE QUEUE
	$HEADR			; PRIORITY 17 NON-RES COMPUTE QUEUE
	$HEADR			; PRIORITY 18 NON-RES COMPUTE QUEUE
	$HEADR			; PRIORITY 19 NON-RES COMPUTE QUEUE
	$HEADR			; PRIORITY 20 NON-RES COMPUTE QUEUE
	$HEADR			; PRIORITY 21 NON-RES COMPUTE QUEUE
	$HEADR			; PRIORITY 22 NON-RES COMPUTE QUEUE
	$HEADR			; PRIORITY 23 NON-RES COMPUTE QUEUE
	$HEADR			; PRIORITY 24 NON-RES COMPUTE QUEUE
	$HEADR			; PRIORITY 25 NON-RES COMPUTE QUEUE
	$HEADR			; PRIORITY 26 NON-RES COMPUTE QUEUE
	$HEADR			; PRIORITY 27 NON-RES COMPUTE QUEUE
	$HEADR			; PRIORITY 28 NON-RES COMPUTE QUEUE
	$HEADR			; PRIORITY 29 NON-RES COMPUTE QUEUE
	$HEADR			; PRIORITY 30 NON-RES COMPUTE QUEUE
	$HEADR			; PRIORITY 31 NON-RES COMPUTE QUEUE
;
;
;	WAIT QUEUE HEADERS
;
;	THE WAIT QUEUE HEADERS ARE ARRANGED IN STATE NUMBER ORDER
;	BY THE WQHEAD MACRO.  SINCE THEY ARE INDEXED BY STATE NUMBER
;	THIS ORDER MUST BE PRESERVED.
;
;
SCH$AQ_WQHDR==.-12		; BASE OF WAIT QUEUE HEADER VECTOR
	WQHEAD	LEF,LEFWQ	; LOCAL EVENT FLAG WAIT (RESIDENT)
	WQHEAD	LEFO,LEFOWQ	; LOCAL EVENT FLAG WAIT (NON-RESIDENT)
	WQHEAD	HIB,HIBWQ	; HIBERNATE WAIT (RESIDENT)
	WQHEAD	HIBO,HIBOWQ	; HIBERNATE WAIT (NON-RESIDENT)
	WQHEAD	SUSP,SUSP	; SUSPENDED (RESIDENT)
	WQHEAD	SUSPO,SUSPO	; SUSPENDED (NON-RESIDENT)
	WQHEAD	MWAIT,MWAIT	; MUTEX WAIT
	WQHEAD	COLPG,COLPGWQ	; COLLIDED PAGE WAIT
	WQHEAD	PFW,PFWQ	; PAGE FAULT WAIT
	WQHEAD	FPG,FPGWQ	; FREE PAGE WAIT


;
SCH$GL_CURPCB::				;ADDRESS OF CURRENTLY ACTIVE PCB
	.LONG	SCH$GL_NULLPCB		;
	;
SCH$GL_COMQS::				;COMPUTE QUEUE SUMMARY BITS
	.LONG	0			; INITIALIZE TO ZERO
SCH$GL_COMOQS::				;NON-RESIDENT COMPUTE QUEUE SUMMARY BITS
	.LONG	0			; INITIALIZE TO ZERO

;
;	SWAPPER CONTROL CELLS
;
SCH$GB_SIP::				; SWAP IN PROGRESS FLAG
	.BYTE	0			; 1 => SWAP IN PROGRESS
SCH$V_SIP==0				; SWAP IN PROGRESS FLAG
SCH$V_MPW==2				; MODIFY PAGE WRITER ACTIVE
; REST OF ABOVE BYTE RESERVED

SCH$GB_RESCAN::
	.BYTE	0			; FLAG BYTE FOR RELPFN TO NOTIFY
SCH$V_REORD==0				; OSWPSCHED QUEUE REORDERING OCCURED

MMG$GB_FREWFLGS::
	.BYTE	0			; FLAGS TO ALLOW SWAPPER USE OF FREWSLE
MMG$M_NOWAIT==2				; DON'T ALLOW FREWSLE TO RESOURCE WAIT
MMG$V_NOWAIT==1				; ON MODIFIED LIST BACK PRESSURE
MMG$M_NOLASTUPD==1			; DON'T ALLOW FREWSLE TO UPDATE WSLAST
MMG$V_NOLASTUPD==0			; (PREVENT WSLAST/WSSIZE INTERACTIONS)

	.ALIGN	WORD			; PRESERVE ALIGNMENT
SCH$GW_PROCCNT::			; CURRENT COUNT OF PROCESSES
	.WORD	0			; CREATED WHICH REQUIRE SWAP FILE
SCH$GW_PROCLIM::			; MAXIMUM NUMBER OF PROCESSES
	.WORD	64			; ACTUALLY SET BY INIT 
	.ALIGN	LONG			; PRESERVE ALIGNMENT
SWP$GL_SLOTCNT::			; COUNT OF AVAILABLE SWAP SLOTS
	.LONG	16			; NON-ZERO TO PERMIT CREATE OF SYSINIT
					; ACTUALLY SET BY SYSINIT.

;
;	COMMON EVENT CLUSTER LIST
;
SCH$GQ_CEBHD::				; COMMON EVENT BLOCK HEADER
	$HEADR				; GENERATE LIST HEADER
SCH$GW_CEBCNT::				; NUMBER OF COMMON EVENT BLOCKS
	.WORD	0			; INIT TO ZERO
SCH$GW_DELPHDCT::			; COUNT OF HEADERS WITH DELETE PENDING
	.WORD	0			; INIT TO ZERO
	.ALIGN	LONG			; GET TO LONGWORD BOUND
SWP$GL_SHELL::				; SHELL PROCESS SWAP ADDRESS
	.LONG	0			; FILLED BY INITIALIZATION
SWP$GL_INPCB::				; PCB ADDRESS OF INSWAP PROCESS
	.LONG	0			;

SWP$GL_ISPAGCNT::			; INSWAP PAGE COUNT
	.LONG	0			;
SWP$GW_IBALSETX::			; INSWAP BALANCE SET INDEX
	.WORD	0			;

SWP$GB_ISWPRI::				; INSWAP PROCESS PRIORITY
	.BYTE	31			; INSWAP PROCESS PRIORITY

	.BYTE	0			; SPARE ***********

SWP$GL_ISWPPAGES::			; COUNT OF INSWAPPED PAGES
	.LONG	0
SWP$GL_ISWPCNT::			; COUNT OF INSWAPS PERFORMED
	.LONG	0			;
SWP$GL_OSWPCNT::			; COUNT OF OUTSWAPS PERFORMED
	.LONG	0			;
SWP$GL_HOSWPCNT::			; COUNT OF HEADER OUTSWAPS
	.LONG	0			;
SWP$GL_HISWPCNT::			; COUNT OF HEADER INSWAPS
	.LONG	0			;

;
;	SCH$GL_RESMASK IS A BIT VECTOR INDEXED BY RSN$_NAME TO 
;	INDICATE THE PRESENCE OF PROCESSES WAITING FOR THAT RESOURCE.
;
SCH$GL_RESMASK::			; RESOURCE WAIT BIT VECTOR
	.LONG	0			; INITIALIZE TO ZERO, NONE WAITING
;
SCH$GB_PRI::				;CURRENT PROCESS PRIORITY
	.BYTE	0			;
	.END
