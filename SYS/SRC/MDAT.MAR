	.IF	NDF,PRMSW	;
	.TITLE	MDAT		;MEMORY MANAGEMENT DATA BASE
	.IFF			;
	.TITLE	SPTSKEL	- SKELETON SYSTEM PAGE TABLE
	.ENDC			;
	.IDENT	'V03-001'
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************

;++
; FACILITY:	EXECUTIVE,  MEMORY MANAGEMENT DATA BASE
;
; ABSTRACT:	MDAT ALLOCATES AND INITIALIZES THE STORAGE FOR THE 
;	MEMORY MANAGEMENT DATA BASES. IT IS ASSEMBLED IN TWO FORMS
;	ONE TO PRODUCE A SKELETON SPT AND THE OTHER TO PRODUCE THE SYSTEM
;	MEMORY MANAGEMENT DATA STRUCTURES.
;
; ENVIRONMENT:
;
;--
;
	.SBTTL	HISTORY			; DETAILED
;
; AUTHOR: RICHARD I. HUSTVEDT	, CREATION DATE: 18-MAY-1978
;
; MODIFIED BY:
;
;	V03-001	LJK0159		Lawrence J. Kenah	9-Apr-1982
;		Include holes caused by page alignment into patch areas.
;		Change names of PSECTs and global labels to include
;		string "PATCH".
;
;	V02-013	LJK0095		Lawrence J. Kenah	3-Dec-1981
;		Move definition of label that marks boundary between
;		nonpaged and pageable executive to SYSPARAM so that
;		cell containing the boundary is accessible to SYSBOOT.
;
;	V02-012	LJK0078		Lawrence J. Kenah	6-Nov-1981
;		Increase size of read-only (pageable and nonpaged) patch
;		areas to two pages each. Add two more pages that can be
;		used for either pageable or nonpaged patch area.
;
;	V02-011	LJK0074		Lawrence J. Kenah	6-Oct-1981
;		Point MMG$GL_RMSBASE to procedure that always returns success.
;		This prevents anamolous system failures when RMS is called
;		inadvertently before the RMS image is mapped.
;
;	V02-010	WMC0002		Wayne Cardoza		20-Aug-1981
;		Add MMG$GL_GBLPAGFIL to limit page file utilization for global
;		sections with page file backing store.
;
;	V02-009 WMC0001		Wayne Cardoza		12-Aug-1981
;		Add MMG$GL_GBLSECFND to assist in finding section tables for 
;		global sections with page file backing store.
;
;	V02-008	HRJ0023		Herb Jacobs		06-Jul-1981
;		Indicate system process doesn't need swap space.
;
;	V02-007	LJK0030		Lawrence J. Kenah	28-May-1981
;		Add global labels for three arrays used by INIT for opcode
;		fixup that occurs at bootstrap time.
;
;	V02-006	HRJ0021		Herb Jacobs		10-May-1981
;		Fix historic reference to WSNEXT-1 to WSNEXT.
;
;	V02-005	TCM0001		Trudy C. Matthews	8-May-1981
;		Delete the definition of MMG$AL_SBICONF array.  Instead add
;		EXE$GL_CONFREG and MMG$GL_SBICONF, which hold the addresses
;		of the arrays (which are allocated in pool).
;		Add definition of EXE$GL_NUMNEXUS field, to hold number of
;		nexuses present on the system.
;
	.PAGE
	.SBTTL	DECLARATIONS

;
; INCLUDE FILES:
;
	$DYNDEF			;DYNAMIC DATA STRUCTURE TYPE DEFINITIONS
	$PHDDEF			;DEFINE PROCESS HEADER
	$PTEDEF			;PAGE TABLE ENTRY DEFINTIONS
	$SECDEF			;PSTE/GSTE DEFINITIONS
	$SGNDEF			;DEFINE SYSGEN VALUES
	$WSLDEF			;WORKING SET LIST DEFINITIONS
;
; EXTERNAL SYMBOLS:
;

;
; MACROS:
;
	.MACRO	SYSPTE	NUM,ACCESS,PFN=0
	.IF	DF,PRMSW
	.PSECT	$$$065
	.ENDC
	.REPT	NUM
	.IF	DF,PRMSW
	.LONG	PTE$M_VALID!PTE$C_'ACCESS
	.ENDC	
	PFN...=PFN...+1
	SPTLEN=SPTLEN+1
	.ENDR
	.ENDM	SYSPTE

	.MACRO	PHD	SYM
	.=SAV...+PHD$'SYM
	.ENDM	PHD

	.MACRO	PCB	SYM
	.=SAV...+PCB$'SYM
	.ENDM	PCB

	.LIST	MEB
;
; EQUATED SYMBOLS:
;
	NPGDPATCH = 504			; ONE PAGE OF NONPAGED CODE PATCH AREA
	NPGDRWPATCH = 504		; ONE PAGE OF NONPAGED DATA PATCH AREA
	PGDPATCH = 504 + 512		; TWO PAGES OF PAGED CODE PATCH AREA
	PATCH_AREA = 3*512		; THREE	PAGES OF EXTRA PATCH AREA
;
; OWN STORAGE:
;

	.PAGE
	.SBTTL	MEMORY MANAGEMENT DATA BASE

	.IF	NDF,PRMSW		;
;
; PROCESS HEADER VECTOR
;
	.PSECT	$$$222,LONG
PHV$GL_PIXBAS::				;BASE OF PROCESS INDEX VECTOR
	.LONG	0			;
PHV$GL_REFCBAS::			;BASE OF PROCESS HDR REFERENCE COUNT VECTOR
	.LONG	0			;

;
; Define data to identify the nexuses on a system.
;
EXE$GL_CONFREG::			; Holds the address of a byte array 
	.LONG	0			; of nexus-device types.
MMG$GL_SBICONF::			; Holds the address of a longword
	.LONG	0			; array of nexus slot VAs.
EXE$GL_NUMNEXUS::			; Number of nexuses present on system.
	.LONG	0

MMG$GL_RMSBASE::			; BASE OF RMS IMAGE
	.ADDRESS	EXE$SUCCESS	; THIS PROCEDURE ALWAYS SUCCEEDS

MMG$GL_GBLSECFND::			;Last global section table entry found
	.LONG	0			;when deleting page file backing store addresses
MMG$GL_GBLPAGFIL::
	.LONG	-1			; page file allowed (remaining) for global sections
	.ENDC				;
	.PAGE
	.SBTTL	SYSTEM HEADER AND PAGE TABLE
;--------------------------------------------------------------------
;
;	SYSTEM HEADER / SYSTEM WORKING SET LIST / SYSTEM PAGE TABLE
;
;--------------------------------------------------------------------
	.IF	DF,PRMSW		;
	.PSECT	$$$063,PAGE		; PAGE ALIGNED

BOO$A_SYSPHD::				; SYSTEM PROCESS HEADER
	SAV...=.			; REFERENCE POINT FOR FILLING PHD
	.BLKB	PHD$C_LENGTH		; RESERVE SPACE FOR IT
SYSPHDEND=.				; MARK END OF PHD

WSL...=<.-SAV...>@-2			; LONGWORD INDEX TO FIRST WS ENTRY
	PHD	W_WSLOCK		; POINTER TO START OF LOCKED PAGES
	.WORD	WSL...			;

	PHD	W_WSDYN			; POINTER TO START OF DYNAMIC WS
	.WORD	WSL...			;

	PHD	W_WSLIST		; START OF WORKING SET LIST
	.WORD	WSL...			;

	PHD	W_WSNEXT		; NEXT WORKING SET ENTRY
	.WORD	WSL...			;

	PHD	L_FREP1VA		; SMALLEST VA IN P1 SPACE (EMPTY)
	.LONG	-1

	PHD	W_EXTDYNWS		; EXTRA DYNAMIC WORKING SET LIST
	.WORD	4096			; LARGE NUMBER TO DEFEAT TEST FOR

	PHD	W_SWAPSIZE		; SWAP SPACE SIZE TO SWAP PROCESS
	.WORD	-1			; DISABLE FOR SYSTEM PROCESS

	PHD	L_PTWSLELCK		; POINTER TO LOCKED PAGE TABLE ARRAY
	.LONG	^X40000000		; FORCE ACCESS VIOLATION FOR SYSTEM SPACE

	PHD	L_PTWSLEVAL		; POINTER TO VALID PAGE TABLE ARRAY
	.LONG	^X40000000		; FORCE ACCESS VIOLATION FOR SYSTEM SPACE

.=SYSPHDEND				; RESTORE LOCATION COUNTER
SYSPHDLEN=.-SAV...			; LENGTH OF SYSTEM HEADER
	.ENDC				;
	.PAGE
	.SBTTL	SYSTEM PAGE TABLE
;
; BUILD THE SYSTEM PAGE TABLE
;
	.IF	DF,PRMSW		;
	.PSECT	$$$065,PAGE
	.ENDC				;
	PFN...=0
	SPTLEN=0			; INITIALIZE LENGTH COUNTER
	.IF	DF,PRMSW		;
MMG$AL_SYSPAGTB::			;SYSTEM VIRTUAL ADDRESS OF SPT
	.ENDC				;
;
; SYSTEM SERVICE VECTORS - PSECT $$$000 HAS SGN$C_SYSVECPGS PAGES ALLOCATED ELSEWHER
;
	SYSPTE	SGN$C_SYSVECPGS,UR	;SYSTEM SERVICE VECTORS ($$$000)
	SYSPTE	2,UREW			;FCP PERFORMANCE DATA PAGE

	.IF	DF,PRMSW
MMG$C_SPTSKEL==SPTLEN			; LENGTH OF SKELETON SPT IN  LONGWORDS
	.ENDC

;
	.IF	NDF,PRMSW
	.ENDC
	.IF	NDF,PRMSW		;
	.PSECT	$$$000ENDVEC,PAGE,EXE
MMG$A_ENDVEC::				; MARKER FOR END OF VECTOR PAGES
	.PSECT	$$$900,PAGE		; MARKER FOR BASE OF SYSPARAM
MMG$A_SYSPARAM::			;
	.PSECT	$$$890_PATCH_NONPGD_DATA,LONG,EXE,WRT
PAT$A_NONPGD_DATA::			; NONPAGED DATA PATCH AREA
	.LONG	MMG$A_SYSPARAM-<.+8>	; SIZE OF AREA (INCLUDE EXCESS)
	.ADDRESS	.+4		; POINTER TO FIRST AVAILABLE BYTE
	.BLKB	NPGDRWPATCH		;

	.PSECT	$$$999,PAGE,EXE		;END OF WRITABLE REGION
MMG$FRSTRONLY::					;SYSTEM VIRTUAL ADDRESS
						;OF FIRST READ ONLY PAGE

	.PAGE
	.SUBTITLE	READ-ONLY PATCH AREAS

;+
;  There is a single page of read-only patch space located at the boundary
;  between the nonpaged and pageable exec routines. This page is used for
;  patches to the nonpaged routines in SYS.EXE. There are two pages located
;  in the middle of the pageable exec routines that are used for a pageable
;  patch area. 
;
;  In addition, there are three more pages located at the boundary
;  between the nonpaged and pageable exec routines. These pages are all
;  initially pageable. If either read-only patch area needs room to
;  expand, one of these pages can be used. 
;
;     o If a pageable page is required, it should be taken from the
;	high address end (the third page). A patch descriptor must
;	be added for each page in this area used for pageable patch
;	area. 
;
;     o If more nonpaged patch space is needed, that can be obtained
;	by extending the current nonpaged patch area. This expansion
;	consists of two steps. The first longword in the patch
;	descriptor (global label PAT$A_NONPGD_CODE) must be increased by
;	512 to reflect the size increase in the patch area. The
;	contents of the cell MMG$GL_PGDCOD, the boundary between the
;	nonpaged and pageable exec, must be increased by 512 to reflect
;	the fact that the nonpaged exec has grown by a page. To simplify
;	location of these two cells, they have additional labels that
;	clearly relate them to expanding nonpaged read-only patch area.
;
;		PAT$A_NONPGD_CODE	PAT$GL_EXP_NPG1
;		MMG$GL_PGDCOD		PAT$GL_EXP_NPG2
;-

	.PSECT	X___PATCH_NONPGD_CODE,EXE	; NONPAGED CODE PATCH AREA
PAT$A_NONPGD_CODE::			; NONPAGED PURE 
PAT$GL_EXP_NPG1::			; (SYNONYM)
	.LONG	PAT$A_NONPGD_CODE_END-<.+8>	; SIZE OF NONPAGED PATCH AREA
	.ADDRESS	.+4		; POINTER TO START
	.BLKB	NPGDPATCH		; ALLOCATE PAGE AREA

;  The rest of this patch area starts out as pageable exec. It may be
;  made part of the nonpaged exec if more than one page of nonpaged
;  patch space is needed.

	.PSECT	Y$$$PATCH_EXTEND_CODE,PAGE
PAT$A_NONPGD_CODE_END:			; END OF NONPAGED PATCH AREA
	.BLKB	PATCH_AREA

	.PSECT	YF$$$PATCH_PAGED_CODE,LONG	; PATCH ARE FOR PAGED CODE

;  The pageable read-only patch area is placed approximately in the middle
;  of the pageable exec to allow control to be passed into and out of the
;  patch area with BRW instructions rather than JMP instructions.

PAT$A_PAGED_CODE::				;
	.LONG	PGDPATCH		; SIZE OF AREA
	.ADDRESS	.+4		; START OF FREE AREA
	.BLKB	PGDPATCH		;

;
;	MARK END OF PAGED CODE
;
	.PSECT	YZ99$PAGEDEND,PAGE
MMG$AL_PGDCODEN::			;

	.PAGE
	.SUBTITLE	OTHER GLOBAL LABELS

;
; DEFINE BEGINNING AND END OF DRIVER REGION
;
 
	.PSECT	$$$110_BEGDRIVE,LONG
MMG$AL_BEGDRIVE::			;
	.PSECT	$$$120_ENDDRIVE,LONG
MMG$AL_ENDDRIVE::			;

;
; Define global labels for opcode/address table used by fixup code in 
; INIT when more than 32 Mbytes of memory is present on the system.
; Each six byte entry in this table consists of an address whose contents
; are to be altered, a byte containing the current contants of that location
; to be used as a sanity check, and a byte containing the new opcode. The 
; table is terminated with an address of zero.
;

	.PSECT	Z$INIT$PFN_FIXUP_TABLE
MMG$AL_FIXUPTBL::			; Listhead for opcode/address table

	.ENDC				;
	.END
