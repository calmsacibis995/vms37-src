	.TITLE	SYSSCHEVT - SYSTEM SERVICES TO SCHEDULE EVENTS
	.IDENT	'V03-000'
 
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
; D. N. CUTLER 4-OCT-76
;
;
;	V02-004	MLJ41905	Martin L. Jack	31-Jan-1982
;		Record in TQE whether the expiration time was specified as an
;		absolute or delta time.  This now affects processing in the
;		$SETTIM service.
;
;	03	RIH0033		R. I. HUSTVEDT	18-OCT-1979
;		MOVE TQCNT FROM PCB TO JIB.
;
;
;	02	RIH23909	R. I. HUSTVEDT	14-MAY-1979
;		Remove superfluous branch after SCH$CLREF due to change in
;		interface to SCH$CLREF.
;
; SYSTEM SERVICES TO SCHEDULE EVENTS
;
;	SCHEDULE WAKEUP
;	SET TIMER
;
; MACRO LIBRARY CALLS
;
 
	$ACBDEF				;DEFINE ACB OFFSETS
	$IPLDEF				;DEFINE INTERRUPT PRIORITY LEVELS
	$JIBDEF				;DEFINE JIB OFFSETS
	$PCBDEF				;DEFINE PCB OFFSETS
	$PRDEF				;DEFINE PROCESSOR REGISTERS
	$PSLDEF				;DEFINE PROCESSOR STATUS FIELDS
	$RSNDEF				;DEFINE RESOURCE WAIT NUMBERS
	$SSDEF				;DEFINE SYSTEM STATUS VALUES
	$TQEDEF				;DEFINE TQE OFFSETS
 
;
; LOCAL SYMBOLS
;
; ARGUMENT LIST OFFSET DEFINITIONS FOR SCHEDULE WAKEUP
;
 
PIDADR=4				;ADDRESS OF PROCESS IDENTIFICATION
LOGNAM=8				;ADDRESS OF PROCESS NAME STRING DESCRIPTOR
WKDAYTIM=12				;ADDRESS OF DELTA TIME TO EXPIRATION
WKREPTIM=16				;ADDRESS OF DELTA TIME TO REPEAT EXPIRATION
 
;
; ARGUMENT LIST OFFSET DEFINITIONS FOR SET TIMER
;
 
EFN=4					;EVENT FLAG NUMBER
TMDAYTIM=8				;ADDRESS OF DELTA TIME TO EXPIRATION
ASTADR=12				;ADDRESS OF AST ROUTINE
REQIDT=16				;REQUEST IDENTIFICATION
	.PAGE
	.SBTTL	SCHEDULE WAKEUP
;+
; EXE$SCHDWK - SCHEDULE WAKEUP
;
; THIS SERVICE PROVIDES THE CAPABILITY TO SCHEDULE A WAKE UP FOR A PROCESS
; THAT WILL OCCUR AT A SPECIFIED TIME AND OPTIONALLY BE REPEATED AT A FIXED
; INTERVAL.
;
; INPUTS:
;
;	PIDADR(AP) = ADDRESS OF PROCESS IDENTIFICATION.
;	LOGNAM(AP) = ADDRESS OF PROCESS NAME STRING DESCRIPTOR.
;	WKDAYTIM(AP) = ADDRESS OF DELTA TIME TO EXPIRATION.
;	WKREPTIM(AP) = ADDRESS OF DELTA TIME TO REPEAT EXPIRATION.
;
;	R4 = CURRENT PROCESS PCB ADDRESS.
;
; OUTPUTS:
;
;	R0 LOW BIT CLEAR INDICATES FAILURE TO SCHEDULE WAKE UP REQUEST.
;
;		R0 = SS$_ACCVIO - EXPIRATION TIME, DELTA REPEAT TIME, PROCESS
;			NAME STRING, OR PROCESS NAME STRING DESCRIPTOR
;			CANNOT BE READ BY CALLING ACCESS MODE, OR PROCESS
;			IDENTIFICATION CANNOT BE WRITTEN BY CALLING ACCESS
;			MODE.
;
;		R0 = SS$_EXQUOTA - PROCESS HAS INSUFFICIENT AST QUOTA
;			REMAINING TO SCHEDULE WAKE UP.
;
;		R0 = SS$_INSFMEM - SUFFICIENT SYSTEM DYNAMIC MEMORY DOES NOT
;			EXIST TO ALLOCATE TIME QUEUE ENTRY AND IMPLICIT
;			RESOURCE WAIT IS NOT ENABLED.
;
;		R0 = SS$_IVLOGNAM - ZERO OR GREATER THAN MAXIMUM LENGTH
;			PROCESS NAME STRING SPECIFIED.
;
;		R0 = SS$_IVTIME - POSITIVE DELTA REPEAT TIME SPECIFIED.
;
;		R0 = SS$_NONEXPR - NONEXISTENT PROCESS OR INVALID PROCESS
;			IDENTIFICATION SPECIFIED.
;
;		R0 = SS$_NOPRIV - PROCESS DOES NOT HAVE PRIVILEGE TO WAKE
;			SPECIFIED PROCESS.
;
;	R0 LOW BIT SET INDICATES SUCCESSFUL COMPLETION.
;
;		R0 = SS$_NORMAL - NORMAL COMPLETION.
;-
 
	.ENABL	LSB
	.ENTRY	EXE$SCHDWK,^M<R2,R3,R4,R5,R6,R7,R8,R9>
	BSBW	EXE$NAMPID		;GET TARGET PROCESS ID
	SETIPL	#0			;ALLOW INTERRUPTS
	BLBC	R0,20$			;IF LBC INVALID ARGUMENT
	MOVL	R1,R9			;SET TARGET PROCESS ID
	MOVZBL	#TQE$C_WKSNGL,R8	;SET SINGLE SHOT WAKEUP REQUEST
	MOVL	WKREPTIM(AP),R5		;GET ADDRESS OF DELTA REPEAT TIME
	BEQL	10$			;IF EQL NONE SPECIFIED
	MOVZWL	#SS$_ACCVIO,R0		;ASSUME ACCESS VIOLATION
	IFNORD	#8,(R5),20$		;CAN DELTA REPEAT TIME BE READ?
	MOVZWL	#SS$_IVTIME,R0		;ASSUME INVALID REPEAT TIME
	MOVQ	(R5),R5			;GET REPEAT TIME
	BEQL	10$			;IF EQL NONE SPECIFIED
	BGTR	20$			;IF GTRU INVALID REPEAT TIME
	MOVZBL	#TQE$C_WKREPT,R8	;SET REPEAT WAKEUP REQUEST
	MNEGL	R6,R6			;NEGATE REPEAT TIME
	MNEGL	R5,R5			;
	SBWC	#0,R6			;
	BNEQ	10$			;IF NEQ REPEAT TIME GREATER THAN 10MS
	CMPL	#10*1000*10,R5		;REPEAT TIME GREATER THAN 10MS?
	BLEQU	10$			;IF LEQU YES
	MOVL	#10*1000*10,R5		;SET REPEAT TIME TO 10MS
10$:	MOVL	WKDAYTIM(AP),R7		;GET ADDRESS OF DELTA EXPIRATION TIME
	MOVL	W^SCH$GL_CURPCB,R4	;GET CURRENT PROCESS PCB ADDRESS
	BSBW	BUILDTQE		;CHECK ACCESSIBILITY OF DAY TIME
	TSTW	PCB$W_ASTCNT(R4)	;AST QUEUE ENTRY QUOTA EXCEEDED?
	BLEQ	50$			;IF LEQ YES
	JSB	@(SP)+			;ALLOCATE AND FILL IN TIME QUEUE ENTRY
	DECW	PCB$W_ASTCNT(R4)	;UPDATE AVAILABLE AST QUEUE ENTRIES
	RSB				;
20$:	RET				;
	.PAGE
	.SBTTL	SET TIMER
;+
; EXE$SETIMR - SET TIMER
;
; THIS SERVICE PROVIDES THE CAPABILITY TO SCHEDULE THE SETTING OF AN EVENT
; FLAG AND DECLARATION OF AN AST TO OCCUR AT A SPECIFIED TIME.
;
; INPUTS:
;
;	EFN(AP) = EVENT FLAG NUMBER.
;	TMDAYTIM(AP) = ADDRESS OF DELTA TIME TO EXPIRATION.
;	ASTADR(AP) = ADDRESS OF AST ROUTINE.
;	REQIDT(AP) = REQUEST IDENTIFICATION.
;
;	R4 = CURRENT PROCESS PCB ADDRESS.
;
; OUTPUTS:
;
;	R0 LOW BIT CLEAR INDICATES FAILURE TO SET TIMER.
;
;		R0 = SS$_ACCVIO - EXPIRATION TIME CANNOT BE READ BY CALLING
;			ACCESS MODE.
;
;		R0 = SS$_EXQUOTA - INSUFFICIENT AST OR TIMER QUOTA REMAINING
;			AND IMPLICIT RESOURCE WAIT IS NOT ENABLED.
;
;		R0 = SS$_ILLEFC - ILLEGAL EVENT FLAG CLUSTER SPECIFIED.
;
;		R0 = SS$_INSFMEM - SUFFICIENT SYSTEM DYNAMIC MEMORY DOES NOT
;			EXIST TO ALLOCATE TIME QUEUE ENTRY AND IMPLICIT
;			RESOURCE WAIT IS NOT ENABLED.
;
;		R0 = SS$_UNASEFC - SPECIFIED EVENT FLAG CLUSTER IS NOT
;			ASSIGNED.
;
;	R0 LOW BIT SET INDICATES SUCCESSFUL COMPLETION.
;
;		R0 = SS$_NORMAL - NORMAL COMPLETION.
;-
 
	.ENTRY	EXE$SETIMR,^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>
	MOVL	TMDAYTIM(AP),R7		;GET ADDRESS OF DELTA EXPIRATION TIME
	MOVZBL	#TQE$C_TMSNGL,R8	;SET SINGLE SHOT TIMER REQUEST
	MOVL	PCB$L_PID(R4),R9	;SET TARGET PROCESS ID
	MOVZBL	EFN(AP),R3		;GET EVENT FLAG NUMBER
	PUSHL	R3			;SAVE EVENT FLAG NUMBER
	BSBW	SCH$CLREF		;CLEAR SPECIFIED EVENT FLAG
	BSBB	BUILDTQE		;CHECK ACCESSIBILITY OF DAY TIME
	MOVL	REQIDT(AP),R11		;GET REQUEST IDENTIFICATION
	MOVL	ASTADR(AP),R10		;GET ADDRESS OF AST ROUTINE
	BEQL	30$			;IF EQL NONE SPECIFIED
	TSTW	PCB$W_ASTCNT(R4)	;AST QUEUE ENTRY QUOTA EXCEEDED?
	BLEQ	50$			;IF LEQ YES
30$:	SETIPL	#IPL$_SYNCH		;RAISE IPL TO SYNCH LEVEL
	MOVL	PCB$L_JIB(R4),R1	;GET ADDRESS OF JIB
	TSTW	JIB$W_TQCNT(R1)		;ANY TIMER QUOTA REMAINING?
	BEQL	70$			;IF EQL NO
	SETIPL	#IPL$_ASTDEL		;LOWER IPL TO ASTDEL LEVEL
	JSB	@(SP)+			;ALLOCATE AND FILL IN TIME QUEUE ENTRY
	MOVL	PCB$L_JIB(R4),R2	;GET JIB ADDRESS
	DECW	JIB$W_TQCNT(R2)		;UPDATE AVAILABLE TIME QUEUE ENTRIES
	MOVPSL	R2			;READ CURRENT PSL
	EXTZV	#PSL$V_PRVMOD,#PSL$S_PRVMOD,R2,TQE$B_RMOD(R5) ;INSERT REQUEST ACCESS MODE
	MOVL	R10,TQE$L_AST(R5)	;INSERT ADDRESS OF AST ROUTINE
	BEQL	40$			;IF EQL NONE SPECIFIED
	DECW	PCB$W_ASTCNT(R4)	;UPDATE AVAILABLE AST QUEUE ENTRIES
	BISB	#ACB$M_QUOTA,TQE$B_RMOD(R5) ;SET AST ACCOUNTING FLAG
40$:	MOVL	R11,TQE$L_ASTPRM(R5)	;INSERT AST PARAMETER/REQUEST IDENTIFICATION
	MOVB	4(SP),TQE$B_EFN(R5)	;SET EVENT FLAG NUMBER
	RSB				;
50$:	MOVZWL	#SS$_EXQUOTA,R0		;SET QUOTA EXCEEDED
60$:	SETIPL	#0			;ALLOW INTERRUPTS
	RET				;
70$:	BBS	#PCB$V_SSRWAIT,PCB$L_STS(R4),50$ ;IF SET, IMPLIED WAIT DISABLED
	MOVZBL	#RSN$_ASTWAIT,PCB$L_EFWM(R4) ;SET WAIT STATE RESOURCE NUMBER
	BISL	#<1@RSN$_ASTWAIT>,SCH$GL_RESMASK ; SET PRESENCE FLAG IN SUMMARY
	MOVL	8(FP),AP		;RESTORE ORIGINAL ARGUMENT POINTER
	MOVL	FP,SP			;TRIM STACK BACK TO CHANGE MODE DISPATCH
	MOVAQ	W^SCH$GQ_MWAIT,R2	;SET ADDRESS OF WAIT QUEUE LISTHEAD
	BRW	SCH$WAIT		;WAIT PROCESS IN ORIGINAL ACCESS MODE
	.DSABL	LSB
	.PAGE
	.SBTTL	BUILD PROTOTYPE TIME QUEUE ENTRY
;
; SUBROUTINE TO CHECK ARGUMENTS, ALLOCATE TIME QUEUE ENTRY, AND FILL IN
; PROTOTYPE TIME QUEUE ENTRY.
;
 
BUILDTQE:				;BUILD TIME QUEUE ENTRY
	MOVZWL	#SS$_ACCVIO,R0		;ASSUME ACCESS VIOLATION
	IFNORD	#8,(R7),40$		;CAN EXPIRATION TIME BE READ?
	SETIPL	#IPL$_ASTDEL		;RAISE TO AST DELIVERY LEVEL
	JSB	@(SP)+			;CHECK QUOTAS
	BSBW	EXE$ALLOCTQE		;ALLOCATE TIME QUEUE ENTRY
	BLBC	R0,40$			;IF LBC ALLOCATION FAILURE
	MOVQ	R5,TQE$Q_DELTA(R2)	;INSERT REPEAT TIME
	BISB3	#TQE$M_ABSOLUTE,R8,TQE$B_RQTYPE(R2)
					;SET REQUEST TYPE, assume absolute
	MOVL	R9,TQE$L_PID(R2)	;INSERT TARGET PROCESS ID
	MOVL	PCB$L_PID(R4),TQE$L_RQPID(R2) ;INSERT REQUESTER PROCESS ID
	MOVQ	(R7),R0			;MAKE SURE EXPIRATION TIME IS IN MEMORY
 
	ASSUME	IPL$_SYNCH EQ IPL$_TIMER
 
	SETIPL	#IPL$_SYNCH		;SYNCHRONIZE ACCESS TO SYSTEM DATA BASE
	MOVQ	W^EXE$GQ_SYSTIME,R8	;GET CURRENT ABSOLUTE TIME
	MOVQ	R0,R0			;GET EXPIRATION TIME
	BGEQ	10$			;IF GEQ ALREADY ABSOLUTE TIME
	BICB2	#TQE$M_ABSOLUTE,TQE$B_RQTYPE(R2) ; Indicate not absolute
	MNEGL	R1,R1			;NEGATE EXPIRATION TIME
	MNEGL	R0,R0			;
	SBWC	#0,R1			;
	ADDL	R8,R0			;CALCULATE REAL EXPIRATION TIME
	ADWC	R9,R1			;
10$:	CMPZV	#0,#3,TQE$B_RQTYPE(R2),#TQE$C_WKREPT ;REPEAT WAKEUP REQUEST?
	BNEQ	20$			;IF NEQ NO
	ADDL	R0,R5			;CALCULATE NEXT EXPIRATION TIME
	ADWC	R1,R6			;
	CMPL	R9,R6			;CURRENT TIME AFTER NEXT TIME?
	BLSSU	20$			;IF LSSU NO
	BGTRU	30$			;IF GTRU YES
	CMPL	R8,R5			;CURRENT TIME AFTER NEXT TIME?
	BGTRU	30$			;IF GTRU YES
20$:	MOVL	R2,R5			;COPY ADDRESS OF TIME QUEUE ENTRY
	JSB	@(SP)+			;FILL IN REQUEST DEPENDENT PARAMETERS
	BSBW	EXE$INSTIMQ		;INSERT ENTRY IN TIME QUEUE
	MOVZWL	#SS$_NORMAL,R0		;SET NORMAL COMPLETION STATUS
	BRB	40$			;
30$:	MOVL	R2,R0			;SET ADDRESS OF TIME QUEUE ENTRY
	BSBW	EXE$DEANONPAGED		;DEALLOCATE TIME QUEUE ENTRY
	MOVZWL	#SS$_IVTIME,R0		;SET INVALID TIME COMPLETION STATUS
40$:	SETIPL	#0			;ALLOW INTERRUPTS
	RET				;
 
	.END
