	.TITLE	SYSASSIGN - SYSTEM SERVICE ASSIGN I/O CHANNEL
	.IDENT	'V03-000'
 
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
; D. N. CUTLER 25-AUG-76
;
; SYSTEM SERVICE ASSIGN I/O CHANNEL
;
; MODIFICATION HISTORY:
;
;	V02-010	DJD0001		Darrell Duffy	11-December-1981
;		Call unitinit when a ucb is cloned for network or
;		other template type ucb.
;
;	V02-009	KTA0014		Kerbey Altmann	10-Apr-1981
;		Change some code to accommodate changed IOC$FFCHAN.
;
;	V08	LMK0003		LEN KAWELL	20-JAN-1980
;		ADD NON-SHAREABLE DEVICE IMPLICIT ALLOCATION PRIVILEGE CHECK.
;
;	V07	RIH0033		R. HUSTVEDT	16-OCT-1979
;		CHANGE PCB$W_BYTCNT TO JIB$L_BYTCNT.
;
;	V06	LMK0002		LEN KAWELL	27-SEP-1979
;		SET CCB$M_AMB IF A MAILBOX WAS ASSOCIATED WITH DEVICE.
;
;	V05	LMK0001		LEN KAWELL	27-JUL-1979
;		RETAINED LOCK OF I/O DATABASE BEFORE CALL TO IOC$CREATE_UCB
;		AS THAT IS THE NEW INTERFACE TO IOC$CREATE_UCB.
;
;	V04	ADE0002		A.D.E		22-JUN-1979	13:00
;		Test UCB$V_TEMPLATE in UCB$W_STS to determine if a
;		UCB needs to be created rather than deadreckoning
;		on UCB$NET0
;
;	V03	SGD0001		S.G.D.		04-APR-1979	17:10
;		Use "_NET" instead of "NET".
;
;	V02	TGD0001		T.G. DOPIRAK	22-FEB-1979
;		RETURN SS$_DEVACTIVE IF MAILBOX ALREADY ASSOCIATED
;		WITH DEVICE.
;
;--

;
; MACRO LIBRARY CALLS
;
 
	$CCBDEF				;DEFINE CCB OFFSETS
	$CRBDEF				; Define controller block offsets
	$DDTDEF				; Driver dispatch table
	$IODEF				;DEFINE I/O FUNCTION CODES
	$JIBDEF				;DEFINE JIB OFFSETS
	$LOGDEF				;DEFINE LOG OFFSETS
	$PCBDEF				;DEFINE PCB OFFSETS
	$PRDEF				;DEFINE PROCESSOR REGISTERS
	$PRVDEF				;DEFINE PRIVILEGE BITS
	$SSDEF				;DEFINE SYSTEM STATUS VALUES
	$UCBDEF				;DEFINE UCB OFFSETS
	$VECDEF				; Vector offsets
 
;
; LOCAL SYMBOLS
;
; ARGUMENT LIST OFFSET DEFINITIONS
;
 
DEVNAM=4				;ADDRESS OF DEVICE NAME STRING DESCRIPTOR
CHAN=8					;ADDRESS TO STORE ASSIGNED CHANNEL NUMBER
ACMODE=12				;ACCESS MODE
MBXNAM=16				;ADDRESS OF MAILBOX NAME STRING DESCRIPTOR
 
;
; STACK LOCAL STORAGE SYMBOL
;
	$OFFSET	0,NEGATIVE,<-
		MAXACMODE>		;MAXIMIZED ACCESS MODE

;
; LOCAL DATA
;
 
	.PSECT	Y$EXEPAGED
NETNAM:	.ASCII	/_NET/			;NETWORK DEVICE NAME
NETEND:					;REFERENCE LABEL
	.PAGE
	.SBTTL	ASSIGN I/O CHANNEL
;+
; EXE$ASSIGN - ASSIGN I/O CHANNEL
;
; THIS SERVICE PROVIDES THE CAPABILITY TO ASSIGN A DEVICE TO AN I/O CHANNEL
; AND ESTABLISH NECESSARY DEVICE LINKAGE AND CONTROL INFORMATION IN THE
; ASSOCIATED CHANNEL CONTROL BLOCK. OPTIONALLY A MAILBOX CAN ALSO BE
; SPECIFIED WHICH WILL RECEIVE UNSOLICITED INPUT SENT TO THE ASSIGNED
; DEVICE.
;
; INPUTS:
;
;	DEVNAM(AP) = ADDRESS OF DEVICE NAME STRING DESCRIPTOR.
;	CHAN(AP) = ADDRESS TO STORE ASSIGNED CHANNEL NUMBER.
;	ACMODE(AP) = ACCESS MODE CHANNEL IS TO BE ASSIGNED TO.
;	MBXNAM(AP) = ADDRESS OF MAILBOX NAME STRING DESCRIPTOR (ZERO IMPLIES
;		NONE).
;
;	R4 = CURRENT PROCESS PCB ADDRESS.
;
; OUTPUTS:
;
;	R0 LOW BIT CLEAR INDICATES FAILURE TO ASSIGN CHANNEL TO DEVICE.
;
;		R0 = SS$_ACCVIO - DEVICE NAME STRING, DEVICE NAME STRING
;			DESCRIPTOR, MAILBOX NAME STRING, OR MAILBOX NAME
;			STRING DESCRIPTOR CANNOT BE READ BY CALLING ACCESS
;			MODE, OR CHANNEL NUMBER CANNOT BE WRITTEN BY CALLING
;			ACCESS MODE.
;
;		R0 = SS$_DEVALLOC - DEVICE ALLOCATED TO ANOTHER PROCESS.
;
;		R0 = SS$_DEVNOTMBX - SPECIFIED MAILBOX DEVICE IS NOT A
;			MAILBOX.
;
;		R0 = SS$_EXQUOTA - PROCESS HAS INSUFFICIENT BUFFER QUOTA TO
;			ALLOCATE NETWORK UCB.
;
;		R0 = SS$_INSFMEM - SUFFICIENT SYSTEM DYNAMIC MEMORY DOES NOT
;			EXIST TO ALLOCATE NETWORK UCB.
;
;		R0 = SS$_IVDEVNAM - DEVICE OR MAILBOX NAME STRING CONTAINS
;			INVALID CHARACTERS, OR NO DEVICE NAME STRING
;			DESCRIPTOR SPECIFIED.
;
;		R0 = SS$_IVLOGNAM - ZERO OR GREATER THAN MAXIMUM LENGTH
;			DEVICE OR MAILBOX NAME STRING SPECIFIED.
;
;		R0 = SS$_NOIOCHAN - NO I/O CHANNEL IS AVAILABLE FOR ASSIGNMENT.
;
;		R0 = SS$_NOPRIV - PROCESS DOES NOT HAVE PRIVILEGE TO CREATE
;			NETWORK UCB OR DOES NOT HAVE PRIVILEGE TO ALLOCATE
;			THE DEVICE.
;
;		R0 = SS$_NOSUCHDEV - SPECIFIED DEVICE OR MAILBOX DOES NOT
;			EXIST ON HOST SYSTEM.
;
;	R0 LOW BIT SET INDICATES SUCCESSFUL COMPLETION.
;
;		R0 = SS$_REMOTE - NORMAL COMPLETION, ASSIGNMENT COMPLETED
;			ON REMOTE SYSTEM.
;
;		R0 = SS$_NORMAL - NORMAL COMPLETION, ASSIGNMENT COMPLETED
;			ON HOST SYSTEM.
;	
;		R0 = SS$_DEVACTIVE - MAILBOX ALREADY ASSOCIATED WITH DEVICE
;-
 
	.ENTRY	EXE$ASSIGN,^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>
	CLRL	-(SP)			;SPACE FOR STACK LOCAL
	MOVL	CHAN(AP),R11		;GET ADDRESS TO STORE CHANNEL NUMBER
	IFNOWRT	#2,(R11),30$		;CAN CHANNEL NUMBER BE WRITTEN?
	CLRW	(R11)			;CLEAR CHANNEL NUMBER IN CASE OF ERROR
	MOVL	MBXNAM(AP),R10		;GET ADDRESS OF MAILBOX NAME DESCRIPTOR
	BEQL	10$			;IF EQL NO MAILBOX SPECIFIED
	IFNORD	#8,(R10),30$		;CAN MAILBOX DESCRIPTOR BE READ?
	MOVQ	(R10),-(SP)		;COPY MAILBOX NAME DESCRIPTOR
	MOVL	SP,R10			;SET ADDRESS OF MAILBOX NAME DESCRIPTOR
10$:	MOVZWL	#SS$_IVDEVNAM,R0	;SET INVALID DEVICE NAME STATUS
	MOVL	DEVNAM(AP),R9		;GET ADDRESS OF DEVICE NAME DESCRIPTOR
	BEQL	20$			;IF EQL NO DEVICE SPECIFIED
	IFNORD	#8,(R9),30$		;CAN DEVICE NAME DESCRIPTOR BE READ?
	EXTZV	#0,#2,ACMODE(AP),R0	;GET SPECIFIED ACCESS MODE
	BSBW	EXE$MAXACMODE		;MAXIMIZE ACCESS MODE
	MOVL	R0,MAXACMODE(FP)	;SAVE MAXIMIZED ACCESS MODE
	BSBW	IOC$FFCHAN		;FIND FREE I/O CHANNEL
	BLBS	R0,FREECHAN		;IF LBS FREE I/O CHANNEL FOUND
20$:	RET				;
30$:	MOVZWL	#SS$_ACCVIO,R0		;SET ACCESS VIOLATION STATUS
	RET				;
 
;
; FREE CHANNEL FOUND
;
 
	.ENABL	LSB
FREECHAN:				;FREE CHANNEL FOUND
	MOVQ	R1,R7			;SAVE CHANNEL AND CCB ADDRESS
	BSBW	SCH$IOLOCKW		;LOCK I/O DATA BASE FOR WRITE ACCESS
	BSBW	TEST_MAILBOX		;TEST IF MAILBOX SPECIFIED
	BLBC	R0,30$			;IF LBC SEARCH FAILURE
	MOVL	R9,R1			;SET ADDRESS OF DEVICE NAME DESCRIPTOR
	BSBW	IOC$SEARCHDEV		;SEARCH FOR DEVICE
	BLBC	R0,40$			;IF LBC SEARCH FAILURE
 
;
; DEVICE FOUND
;
 
	MOVL	R1,R5			;SAVE ADDRESS OF DEVICE UCB
	BBS	S^#DEV$V_SPL,UCB$L_DEVCHAR(R5),80$ ;IF SET, SPOOLED DEVICE
	BBC	S^#UCB$V_TEMPLATE,-	;IF CLR, ASSIGNING TO A LOCAL DEVICE
		UCB$W_STS(R5),LOCAL	;
	BRW	NETWORK			;IF SET, NETWORK ASSIGN
 
;
; LOCAL ASSIGNMENT
;
 
LOCAL:					;LOCAL ASSIGNMENT
	MOVL	UCB$L_PID(R5),R0	;GET PROCESS ID OF OWNER
	BEQL	50$			;IF EQL DEVICE NOT ALLOCATED
	MOVL	R4,R1			;COPY PROCESS PCB ADDRESS
10$:	CMPL	R0,PCB$L_PID(R1)	;PROCESS ID MATCH?
	BEQL	70$			;IF EQL YES
	MOVZWL	PCB$L_OWNER(R1),R1	;GET CREATOR PROCESS INDEX
	BEQL	20$			;IF EQL NO CREATOR
	MOVL	@L^SCH$GL_PCBVEC[R1],R1	;GET ADDRESS OF CREATOR PCB
	BRB	10$			;
20$:	MOVZWL	#SS$_DEVALLOC,R0	;SET DEVICE ALREADY ALLOCATED
30$:	BRB	90$			;
 
;
; DEVICE SEARCH FAILURE
;
 
40$:	CMPW	#SS$_NONLOCAL,R0	;REMOTE DEVICE?
	BNEQ	90$			;IF NEQ NO
	BRW	REMOTE			;
 
;
; DEVICE NOT SPOOLED OR ALLOCATED - IF IT'S ALSO NOT SHAREABLE, CHECK THAT
; PROCESS HAS PRIVILEGE TO ALLOCATE IT
;
 
50$:	BBS	S^#DEV$V_SHR,UCB$L_DEVCHAR(R5),70$ ;IF SET, DEVICE SHAREABLE
	MOVL	PCB$L_ARB(R4),R0	;GET ACCESS RIGHTS BLOCK ADDRESS
	MOVZWL	UCB$W_VPROT(R5),R1	;GET DEVICE PROTECTION MASK
	MOVL	UCB$L_OWNUIC(R5),R2	;GET DEVICE OWNER UIC
	BSBW	EXE$CHKRDACCES		;CHECK USER'S RIGHT TO ALLOCATE DEVICE
	BLBC	R0,90$			;IF LBC NO PRIVILEGE
;
; NONSHAREABLE DEVICE - PERFORM IMPLICIT ALLOCATION
;
 
60$:	MOVL	PCB$L_PID(R4),UCB$L_PID(R5) ;SET CURRENT PROCESS AS OWNER
 
;
; ASSOCIATE MAILBOX IF:
;
;	1. NOT FILE DEVICE
;	2. NOT SHAREABLE DEVICE
;	3. MAILBOX NOT ALREADY ASSOCIATED
;	4. MAILBOX IS SPECIFIED
;
 
70$:	BBS	S^#DEV$V_FOD,UCB$L_DEVCHAR(R5),80$ ;IF SET, FILE DEVICE
	BBS	S^#DEV$V_SHR,UCB$L_DEVCHAR(R5),80$ ;IF SET, SHARED DEVICE
	TSTL	R6			;ARE WE ASSOCIATING A MBX
	BEQL	80$			;IF NOT JUST CONTINUE
	TSTL	UCB$L_AMB(R5)		;IS THERE ONE CURRENTLY ASSOC?
	BEQL	75$			;IF NOT ASSOC NEW ONE
	CMPL	R6,UCB$L_AMB(R5)	;TRYING TO ASSOC DIFFERENT MBX?
	BEQL	80$			;IF NOT JUST CONTINUE
	MOVZWL	#SS$_DEVACTIVE,R0	;DON'T DO THE ASSIGN
	BRB	90$			;RETURN THE ERROR
75$:
	MOVL	R6,UCB$L_AMB(R5)	;SET ASSOCIATED MAILBOX UCB ADDRESS
	INCW	UCB$W_REFC(R6)		;INCREMENT MAILBOX UCB REFERENCE COUNT
	MOVZBL	#CCB$M_AMB,R6		;SET ASSOCIATED MAILBOX FLAG
80$:	MOVL	R5,CCB$L_UCB(R8)	;STORE UCB ADDRESS IN CCB
	INCW	UCB$W_REFC(R5)		;INCREMENT UCB REFERENCE COUNT
	ADDB3	#1,MAXACMODE(FP),CCB$B_AMOD(R8)	;STORE ACCESS MODE OF CHANNEL
	MOVB	R6,CCB$B_STS(R8)	;SET CHANNEL STATUS FLAGS
	MOVW	R7,(R11)		;STORE ASSIGNED CHANNEL NUMBER
	MOVZWL	#SS$_NORMAL,R0		;SET NORMAL COMPLETION STATUS
90$:	BRW	IOC$UNLOCK		;UNLOCK I/O DATA BASE AND RETURN
 
;
; NETWORK ASSIGNMENT
;
 
NETWORK:				;
	MOVZWL	#SS$_NOPRIV,R0		;ASSUME PROCESS DOES NOT HAVE PRIVILEGE
	IFNPRIV	NETMBX,90$		;CAN PROCESS CREATE NETWORK DEVICE?
	MOVZWL	#SS$_EXQUOTA,R0		;SET QUOTA EXCEEDED STATUS
	ADDW3	#256,UCB$W_SIZE(R5),R1	;ADD IN BIAS *******TEMP*******
	MOVZWL	R1,-(SP)		;CONVERT TO LONGWORD COUNT
	MOVL	PCB$L_JIB(R4),R1	;GET ADDRESS OF JIB
	CMPL	(SP)+,JIB$L_BYTCNT(R1)	;ENOUGH BYTES TO SATISFY REQUIREMENTS?
	BGTRU	90$			;IF GTRU NO
	BSBW	IOC$CREATE_UCB		;CREATE NETWORK UCB
	BLBC	R0,90$			;IF LBC CREATION FAILURE
	BISW	#UCB$M_DELMBX,UCB$W_DEVSTS(R2) ;MARK NETWORK UCB FOR DELETE
	MOVL	PCB$L_JIB(R4),R5	;GET JIB ADDRESS AGAIN
	MOVZWL	UCB$W_SIZE(R2),R1	;GET SIZE OF UCB FOR ACCOUNTING
	MOVW	R1,UCB$W_CHARGE(R2) 	;SET BYTES CHARGED TO PROCESS
	SUBL	R1,JIB$L_BYTCNT(R5) 	;REDUCE CURRENT BYTE COUNT
	SUBL	R1,JIB$L_BYTLM(R5) 	;REDUCE BYTE COUNT LIMIT
	MOVL	R2,R5			;COPY ADDRESS OF CREATED UCB
	BICW	#UCB$M_TEMPLATE,UCB$W_STS(R5)	; UCB IS NOT A TEMPLATE
	MOVL	UCB$L_DDT(R5), R0	; Look for a unitinit entry in ddt
	MOVL	DDT$L_UNITINIT(R0), R0	; Its address?
	CMPL	R0, #IOC$RETURN		; Its the null address?
	BNEQ	120$			; Nope, so call it
	MOVL	UCB$L_CRB(R5), R0	; Look in the crb for an entry
	MOVL	CRB$L_INTD+ -		; Look for the address here
		VEC$L_UNITINIT(R0), R0	; to call
	BEQL	130$			; No address here either
120$:	JSB	(R0)			; Call unitinit entry with
					; r3 not valid, r4 -> pcb, r5 -> ucb
130$:					; No unitinit entry to call
	BSBW	TEST_MAILBOX		;TEST IF MAILBOX SPECIFIED
	DECW	UCB$W_REFC(R5)		;DECREMENT UCB REFERENCE COUNT
	BLBC	R0,95$			;IF THERE WAS AN ERROR CLEANUP
	BRW	60$			;DO MAILBOX ASSOCIATION
95$:
	PUSHL	R0			;SAVE STATUS VALUE
	BSBW	IOC$DELMBX		;DELETE MAILBOX
	POPL	R0			;RETRIEVE STATUS VALUE
	BRB	90$			;
	.DSABL	LSB
 
;
; REMOTE DEVICE SPECIFIED
;
 
REMOTE:					;
	BSBW	SCH$IOUNLOCK		;UNLOCK I/O DATA BASE
	MOVL	R9,R1			;SET ADDRESS OF DEVICE NAME DESCRIPTOR
	MOVZBL	#LOG$C_NAMLENGTH,R2	;GET MAXIMUM LENGTH OF LOGICAL NAME
	SUBL	R2,SP			;ALLOCATE SPACE TO STORE TRANSLATED NAME
	MOVL	SP,R3			;SET ADDRESS OF TRANSLATED NAME STORAGE
	CLRL	R5			;CLEAR NAME TABLE SEARCH DISABLE MASK
	BSBW	LOG$TRNSLOGNAME		;TRANSLATE LOGICAL NAME
	SETIPL	#0			;ALLOW INTERRUPTS
	BLBC	R0,30$			;IF LBC TRANSLATION FAILURE
	PUSHAB	(SP)			;BUILD TRANSLATED NAME DESCRIPTOR
	PUSHL	R1			;
	CMPB	#^A/_/,8(SP)		;TRANSLATED NAME START WITH UNDERSCORE?
	BNEQ	10$			;IF NEQ NO
	DECL	(SP)			;DECREMENT LENGTH OF TRANSLATED NAME
	INCL	4(SP)			;INCREMENT STARTING ADDRESS OF NAME
10$:	MOVL	SP,R9			;SET ADDRESS OF TRANSLATED NAME DESCRIPTOR
	PUSHAB	NETNAM			;BUILD NETWORK DEVICE NAME DESCRIPTOR
	PUSHL	#NETEND-NETNAM		;
	MOVL	SP,R6			;SAVE ADDRESS OF NAME STRING DESCRIPTOR
	MOVAL	-(SP),R7		;ALLOCATE SPACE TO STORE CHANNEL NUMBER
	$ASSIGN_S (R6),(R7),MAXACMODE(FP),(R10)	;ASSIGN CHANNEL TO NETWORK
	BLBC	R0,30$			;IF LBC ASSIGNMENT FAILURE
	$QIO_S	#31,(R7),#IO$_ACCESS!IO$M_ACCESS,(R6),,,,R9 ;CONNECT TO NETWORK
	BLBC	R0,40$			;IF LBC SERVICE FAILURE
20$:	$WAITFR_S #31			;WAIT FOR CONNECT TO COMPLETE
	$CLREF_S #31			;CLEAR EVENT FLAG
	MOVZWL	(R6),R0			;GET I/O COMPLETION CODE
	BEQL	20$			;IF EQL I/O NOT FINISHED
	BLBC	R0,40$			;IF LBC CONNECT FAILURE
	MOVW	(R7),(R11)		;STORE ASSIGNED DEVICE CHANNEL NUMBER
	MOVZWL	#SS$_REMOTE,R0		;SET COMPLETION STATUS
30$:	RET				;
40$:	PUSHL	R0			;SAVE FINAL STATUS
	$DASSGN_S (R7)			;DEASSIGN CHANNEL
	POPL	R0			;RETRIEVE FINAL STATUS
	RET				;
	.PAGE
	.SBTTL	TEST IF MAILBOX SPECIFIED
;
; SUBROUTINE TO TEST IF A MAILBOX IS SPECIFIED
;
; INPUTS:
;
;	R10 = ADDRESS OF MAILBOX NAME DESCRIPTOR
;
; OUTPUTS:
;
;	R0 = SS$_NORMAL IF SPECIFIED MAILBOX EXISTS
;	     SS$_NOSUCHDEV IF SPECIFIED MAILBOX DOES NOT EXIST
;	     SS$_DEVNOTMBX IF SPECIFIED DEVICE IS NOT A MAILBOX
;	R6 = ADDRESS OF MAILBOX UCB
;	     ZERO IF MAILBOX NOT SPECIFIED (USED AS CHANNEL STATUS FLAGS)
;
 
TEST_MAILBOX:				;
	MOVL	R10,R6			;SET ADDRESS OF MAILBOX NAME DESCRIPTOR
	BEQL	10$			;IF EQL NO NAME SPECIFIED
	MOVL	R6,R1			;COPY ADDRESS OF MAILBOX NAME DESCRIPTOR
	BSBW	IOC$SEARCHDEV		;SEARCH FOR DEVICE
	BLBC	R0,20$			;IF LBC SEARCH ERROR
	MOVZWL	#SS$_DEVNOTMBX,R0	;SET DEVICE NOT MAILBOX STATUS
	BBC	S^#DEV$V_MBX,UCB$L_DEVCHAR(R1),20$ ;IF CLR, DEVICE NOT MAILBOX
	BBS	S^#DEV$V_NET,UCB$L_DEVCHAR(R1),20$ ;IF SET, NETWORK DEVICE
	MOVL	R1,R6			;SAVE ADDRESS OF MAILBOX UCB
10$:	MOVZWL	#SS$_NORMAL,R0		;SET NORMAL COMPLETION STATUS
20$:	RSB				;
 
	.END
