	.TITLE	EXSUBROUT - EXECUTIVE SUPPORT SUBROUTINES
	.IDENT	'V03-001'
 
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
; Abstract:
;
;	EXECUTIVE SUPPORT SUBROUTINES
;
; Author:
;
;	D. N. CUTLER 17-AUG-76
;
; MODIFIED BY:
;	
;	V03-001	MSH0001		Maryann Hinden	       16-Mar-1982
;		Support longword buffer counts in EXE$PROBEW,
;		EXE$PROBER.  Move to nonpaged PSECT.
;
;	V02-011	LJK0109		Lawrence J. Kenah	2-Jan-1982
;		Change PROBER of descriptor to use INFORD macro.
;
;	V02-010	ROW0057		Ralph O. Weber		 9-DEC-1981
;		Correct comments in EXE$INSTIMQ to reflect that it may only be 
;		called from IPL$_TIMER.
;
;	V02-009	PHL0026		Peter H. Lipman		24-Nov-1981
;		Add routines that accept the address of a buffer descriptor
;		and properly check the accessibility of the buffer when
;		it is longer than 512 bytes.
;
;	V02-008	LJK0082		Lawrence J. Kenah	11-Nov-1981
;		Add routines that perform PROBEs on user-specified buffers
;		that are longer than 512 bytes. These routines should be
;		used by all system services that need to check accessibility
;		to buffers whose length is also specified by the user.
;
;	V02-007 ROW0023		Ralph O. Weber		24-AUG-1981
;		Discard entire V02-006 modification and design a new way for 
;		EXE$BUFFRQUOTA, EXE$BUFQUOPRC, EXE$SNGLEQUOTA, and 
;		EXE$MULTIQUOTA to handle longword BIO Byte Count Quota in 
;		coordination with the other word-sized quotas.  The basic 
;		comparison instruction, after EXE$MULTIQUOTA, is a variable 
;		bit field instruction with the number of bits determined by 
;		a previously loaded register.  The register is correctly 
;		loaded by one of the previous entry points.  All quota 
;		references are to current values in memory.  EXE$SNGLEQUOTA 
;		and EXE$MULTIQUOTA are limited to checking only quota values 
;		stored in words.
;		
;	V02-006	ROW0009		Ralph O. Weber		4-AUG-1981
;		Change EXE$BUFFRQUOTA, EXE$BUFQUOPRC, EXE$SNGLEQUOTA, and 
;		EXE$MULTIQUOTA to handle longword BIO Byte Limit and Byte 
;		Quotas in coordination with the other word-sized quotas.  The 
;		basic quota-request comparison, after EXE$MULTIQUOTA, must be 
;		a lonword compare and everybody who uses it must account for 
;		this fact.
;
;
;--
;
; MACRO LIBRARY CALLS
;
 
	$ACBDEF				;DEFINE ACB OFFSETS
	$ARBDEF				; DEFINE ACCESS RIGHTS BLOCK

	.SBTTL	Declarations

	$IPLDEF				;DEFINE PRIORITY LEVELS
	$JIBDEF				;DEFINE JOB INFORMATION BLOCK
	$PCBDEF				;DEFINE PCB OFFSETS
	$PRDEF				;DEFINE PROCESSOR REGISTERS
	$PSLDEF				;DEFINE PROCESSOR STATUS FIELDS
	$RSNDEF				;DEFINE RESOURCE WAIT NUMBERS
	$SSDEF				;DEFINE SYSTEM STATUS VALUES
	$TQEDEF				;DEFINE TQE OFFSETS

	.SBTTL	CHECK PROCESS RESOURCE REQUEST
 
	.ENABL	LSB
;+
; EXE$BUFFRQUOTA - CHECK BUFFER BYTE COUNT QUOTA AND CONDITIONALLY WAIT
; EXE$BUFQUOPRC - CHECK PROCESS BUFFER QUOTA ONLY AND CONDITIONALLY WAIT
; EXE$MULTIQUOTA - CHECK MULTI-UNIT RESOURCE REQUEST AND CONDITIONALLY WAIT
; EXE$SNGLEQUOTA - CHECK SINGLE-UNIT RESOURCE REQUEST AND CONDITIONALLY WAIT
;
; THESE ROUTINES ARE CALLED TO CHECK IF A PROCESS HAS SUFFICIENT RESIDUAL
; QUOTA TO GRANT A RESOURCE. IF SUFFICIENT QUOTA IS NOT AVAILABLE AND THE
; PROCESS IS ENABLED FOR IMPLIED RESOURCE WAIT, THEN THE PROCESS IS ENTERED
; IN A WAIT STATE TO WAIT FOR SUFFICIENT QUOTA TO BECOME AVAILABLE.
;
; INPUTS:
;
;	R4 = CURRENT PROCESS PCB ADDRESS.
;
; IF ENTRY AT EXE$BUFFRQUOTA, EXE$BUFQUOPRC, OR EXE$MULTIQUOTA, THEN
;
;	R1 = NUMBER OF UNITS OF RESOURCE REQUESTED.
;
; IF ENTRY AT EXE$MULTIQUOTA OR EXE$SNGLEQUOTA, THEN
;
;	R2 = ADDRESS OF QUOTA WORD CONTAINING REMAINING UNITS FOR SPECIFIED
;		RESOURCE.
;
;	NOTICE: EXE$MULTIQUOTA and EXE$SNGLEQUOTA cannot be used to check 
;		Buffered I/O Byte Count Quota, since these quota and count 
;		values 	are stored in longwords.  EXE$BUFFRQUOTA or 
;		EXE$BUFQUOPRC must be use to check Buffered I/O Byte Count 
;		Quota.
;
; OUTPUTS:
;
;	R0 LOW BIT CLEAR INDICATES CHECK FAILURE WITH CALLING IPL PRESERVED.
;
;		R0 = SS$_EXQUOTA = QUOTA EXCEEDED OR REQUEST GREATER THAN
;			MAXIMUM PROCESS OR SYSTEM QUOTA.
;
;	R0 LOW BIT SET INDICATES SUCCESS WITH IPL SET TO AST DELIVERY
;		LEVEL.
;
;		R0 = SS$_NORMAL = NORMAL COMPLETION.
;
;	The following table shows how the various routines treat R1 - R3.
;
;	Routine		R1	R2	R3
;	EXE$BUFFRQUOTA	 P	 D	 D
;	EXE$BUFQUOPRC	 P	 D	 D	P ==> Preserved
;	EXE$MULTIQUOTA	 P	 P	 D	D ==> Destroyed
;	EXE$SNGLEQUOTA	 D	 P	 D
;-
 
	.PSECT	AEXENONPAGED
EXE$BUFFRQUOTA::			;CHECK BUFFER BYTE COUNT QUOTA
	MOVZWL	IOC$GW_MAXBUF,R0	; Get max system buffer size.
	CMPL	R1,R0			;REQUEST GREATER THAN SYSTEM MAXIMUM?
	BGTRU	10$			;IF GTRU YES
EXE$BUFQUOPRC::				;CHECK PROCESS BUFFER QUOTA ONLY
	MOVL	PCB$L_JIB(R4),R0	;GET ADDRESS OF JOB INFORMATION BLOCK
	MOVAB	JIB$L_BYTCNT(R0),R2	;SET ADDRESS OF BYTE COUNT QUOTA
	MOVL	#32, R3			;ESTABLISH LONGWORD QUOTA CHECKING.
	CMPL	R1,JIB$L_BYTLM(R0)	;REQUEST GREATER THAN PROCESS MAXIMUM?
	BLEQU	15$			;IF LEQU NO
10$:	MOVZWL	#SS$_EXQUOTA,R0		;SET QUOTA EXCEEDED
	RSB				;
EXE$SNGLEQUOTA::			;CHECK SINGLE-UNIT RESOURCE REQUEST
	MOVL	#1,R1			;SET NUMBER OF UNITS OF RESOURCE REQUESTED
EXE$MULTIQUOTA::			;CHECK MULTI-UNIT RESOURCE REQUEST
	MOVL	#16, R3			;Establish word length quota checking.
15$:	MOVPSL	-(SP)			;Save PSL for possible resource wait.
	DSBINT	#IPL$_SYNCH		;Synchronize system data base access,
					;and save current IPL on stack.
	CMPZV	#0, R3, (R2), R1	;Compare either word or longword
					;using number of bits value in R3.
	BLSSU	30$			;Branch if insufficent resourse left.
	MOVZWL	#SS$_NORMAL,R0		;Enough quota left; normal completion.
	MOVL	#IPL$_ASTDEL,(SP)	;Insure exit IPL is 2, so that checked
					;resource is protected from AST's.
					;SS$_NORMAL & SS$_EXQUOTA common exit
20$:	ENBINT				;Restore IPL as appropriate.
	MOVAB	4(SP),SP		;Remove saved PSL from stack.
	RSB				;Return to caller.

30$:	MOVZWL	#SS$_EXQUOTA, R0	;Setup possible exceeded quota return 
	BBS	#PCB$V_SSRWAIT, -	;code, and branch if resource wait 
		PCB$L_STS(R4), 20$	;mode is disabled.  (NB: restored IPL 
					;will be that of our caller.)
	MOVZWL	#RSN$_ASTWAIT, R0	;Set AST wait resource number.
	MOVAB	4(SP), SP		;Strip saved caller's IPL from stack.
	BSBW	SCH$RWAIT		;Wait; adding PC stacked caller's PSL.
	BRB	15$			;Then try again.
	.DSABL	LSB

	.SBTTL	GET PROTECTION MASK ACCORDING TO UIC ACCESS
;+
; EXE$GETACCESS - GET ACCESS RIGHTS ACCORDING TO UIC AND PROTECTION MASK
;
; THIS ROUTINE RETURNS THE ACCESS RIGHTS OF A GIVEN PROCESS WITH
; REGARDS TO A PROTECTION / UIC MASK PAIR.
;
; INPUTS:
;
;	R0 = ADDRESS OF PROCESS' ACCESS RIGHTS BLOCK
;	R1 = PROTECTION MASK IN "RWED" FORM (SYSTEM,OWNER,GROUP,WORLD).
;	R2 = UIC ASSOCIATED WITH PROTECTION MASK.
;
; OUTPUTS:
;	
;	R0 = MASK IN "RWED" FORM (SYSTEM,OWNER,GROUP,WORLD) WHICH
;	     CORRESPONDS TO THE ACCESS AVAILABLE TO THE PROCESS.
;
;	R3, R4 ARE PRESERVED ACROSS CALL.
;-
 
	.PSECT	Y$EXEPAGED
EXE$GETACCESS::				;
	BBS	#PRV$V_BYPASS,ARB$Q_PRIV(R0),40$ ;BRANCH IF CALLER IS TOTALLY PRIVILEGED
	PUSHL	R3			;SAVE R3
	MOVZWL	#^XF000,R3		;SET WORLD MASK
 
;
; TEST GROUP ACCESS
;
 
	MOVZWL	ARB$L_UIC+2(R0),-(SP)	;GET CURRENT PROCESS GROUP CODE
	CMPZV	#16,#16,R2,(SP)+	;COMPARE GROUP VALUES
	BNEQ	20$			;IF NEQ THEN NOT THE SAME GROUP
	INSV	#^XF,#8,#4,R3		;INSERT GROUP MASK
 
;
; TEST OWNER ACCESS
;
 
	CMPW	ARB$L_UIC(R0),R2	;COMPARE MEMBER VALUES
	BNEQ	20$			;IF NEQ THENNOT SAME MEMBER
	INSV	#^XF,#4,#4,R3		;INSERT OWNER MASK
 
;
; CHECK SYSTEM ACCESS
;
 
20$:	BBS	#PRV$V_SYSPRV,ARB$Q_PRIV(R0),25$ ;BRANCH IF USER HAS SYSTEM PRIV
	CMPW	L^EXE$GL_SYSUIC,ARB$L_UIC+2(R0) ;COMPARE GROUP WITH SYSTEM ACCESS
	BLSSU	30$			;IF LSSU THEN NOT SYSTEM
25$:	INSV	#^XF,#0,#4,R3		;INSERT SYSTEM MASK
 
;
; FORM FINAL MASK
;
 
30$:	BICL3	R1,R3,R0		;RETURN RESULT IN R0
	MOVL	(SP)+,R3		;RESTORE R3
	RSB				;

;
; TO HERE IF CALLER IS TOTALLY PRIVILEGED - FORM ALL PRIVILEGES MASK.
;

40$:	MNEGL	#1,R0			;RETURN ALL PRIVILEGES
	RSB

	.SBTTL CHECK ACCESS PROTECTION
;+
; EXE$CHKCREACCES - CHECK CREATE ACCESS
; EXE$CHKDELACCES - CHECK DELETE ACCESS
; EXE$CHKLOGACCES - CHECK LOGICAL I/O FUNCTION ACCESS
; EXE$CHKPHYACCES - CHECK PHYSICAL I/O FUNCTION ACCESS
; EXE$CHKRDACCES - CHECK READ ACCESS
; EXE$CHKWRTACCES - CHECK WRITE ACCESS
;
; THESE ROUTINES RETURN A TRUE OR FALSE VALUE ON ACCESS
; GIVEN A REQUESTING PROCESS AND A PROTECTION MASK / UIC PAIR.
;
; INPUTS:
;
;	R0 = ADDRESS OF ACCESSOR'S ACCESS RIGHTS BLOCK
;	R1 = PROTECTION MASK - "RWED" FOR (SYSTEM,OWNER,GROUP,WORLD).
;	R2 = UIC ASSOCIATED WITH PROTECTION MASK.
;
; OUTPUTS:
;
;	R0 = SS$_NORMAL FOR ACCESS ALLOWED
;	R0 = SS$_NOPRIV FOR ACCESS DENIED
;
;	R3, R4 ARE PRESERVED ACROSS CALL.
;-
 
	.ENABL	LSB
EXE$CHKDELACCES::			;CHECK DELETE ACCESS
EXE$CHKLOGACCES::			;CHECK LOGICAL I/O FUNCTION ACCESS
	MOVZWL	#^X7777,-(SP)		;SET COMPLEMENT OF NEEDED ACCESS
	BRB	10$			;
EXE$CHKCREACCES::			;CHECK CREATE ACCESS
EXE$CHKPHYACCES::			;CHECK PHYSICAL I/O FUNCTION ACCESS
	MOVZWL	#^XBBBB,-(SP)		;SET COMPLEMENT OF NEEDED ACCESS
	BRB	10$			;
EXE$CHKRDACCES::			;CHECK READ ACCESS
	MOVZWL	#^XEEEE,-(SP)		;SET COMPLEMENT OF NEEDED ACCESS
	BRB	10$			;
EXE$CHKWRTACCES::			;CHECK WRITE ACCESS
	MOVZWL	#^XDDDD,-(SP)		;SET COMPLEMENT OF NEEDED ACCESS
10$:	BSBB	EXE$GETACCESS		;GET THE PROCESS' ACCESS RIGHTS
	BICL	(SP)+,R0		;FORM ANSWER -- IF 0 THEN FALSE
	BEQL	20$			;RETURN NO PRIVILEGE IF EQL
	MOVZBL	#SS$_NORMAL,R0		;SET SUCCESS INDICATOR
	RSB				;AND RETURN
20$:	MOVZWL	#SS$_NOPRIV,R0		;SET ERROR
	RSB				;AND RETURN
	.DSABL	LSB

	.SBTTL	INSERT ENTRY IN TIME DEPENDENT SCHEDULER QUEUE
;+
; EXE$INSTIMQ - INSERT ENTRY IN TIME DEPENDENT SCHEDULER QUEUE
;
; THIS ROUTINE IS CALLED TO INSERT AN ENTRY IN THE TIME DEPENDENT SCHEDULER
; QUEUE. THE ENTRY IS THREADED INTO THE QUEUE ACCORDING TO ITS DUE TIME.
; THE QUEUE IS ORDERED SUCH THAT THE MOST IMMINENT ENTRIES ARE AT THE FRONT
; OF THE QUEUE.
;
; INPUTS:
;
;	R0 = LOW ORDER PART OF EXPIRATION TIME.
;	R1 = HIGH ORDER PART OF EXPIRATION TIME.
;	R5 = ADDRESS OF ENTRY TO INSERT IN TIME QUEUE.
;
;	IPL MUST BE IPL$_TIMER.
;
; OUTPUTS:
;
;	SPECIFIED ENTRY IS INSERTED INTO THE TIME DEPENDENT SCHEDULER QUEUE
;	ACCORDING TO ITS DUE TIME.
;-
 
	.PSECT
EXE$INSTIMQ::				;INSERT ENTRY IN TIME QUEUE
	MOVQ	R0,TQE$Q_TIME(R5)	;SET ABSOLUTE DUE TIME
	MOVAL	W^EXE$GL_TQFL,R3	;GET ADDRESS OF TIME QUEUE LISTHEAD
	MOVL	R3,R2			;COPY ADDRESS OF TIME QUEUE LISTHEAD
10$:	MOVL	TQE$L_TQBL(R2),R2	;GET ADDRESS OF NEXT ENTRY
	CMPL	R3,R2			;END OF QUEUE?
	BEQL	20$			;IF EQL YES
	CMPL	R1,TQE$Q_TIME+4(R2)	;COMPARE HIGH ORDER PARTS OF TIME
	BLSSU	10$			;IF LSSU NEW ENTRY MORE IMMINENT
	BGTRU	20$			;IF GTRU NEW ENTRY LESS IMMINENT
	CMPL	R0,TQE$Q_TIME(R2)	;COMPARE LOW ORDER PART OF TIME
	BLSSU	10$			;IF LSSU NEW ENTRY MORE IMMINENT
20$:	INSQUE	TQE$L_TQFL(R5),TQE$L_TQFL(R2) ;INSERT NEW ENTRY IN TIME QUEUE
	RSB				;

	.SBTTL	MAXIMIZE ACCESS MODE
;+
; EXE$MAXACMODE - MAXIMIZE ACCESS MODE
;
; THIS ROUTINE IS CALLED TO MAXIMIZE A SPECIFIED ACCESS MODE WITH THE PREVIOUS
; MODE FIELD OF THE CURRENT PSL.
;
; INPUTS:
;
;	R0 = ACCESS MODE TO MAXIMIZE WITH PREVIOUS MODE FIELD OF PSL.
;
; OUTPUTS:
;
;	THE SPECIFIED ACCESS MODE IS MAXIMIZED WITH THE PREVIOUS MODE FIELD
;	OF THE CURRENT PSL AND RETURNED IN REGISTER R0.
;
;	REGISTERS R2 AND R3 ARE PRESERVED ACROSS CALL.
;-
 
	.PSECT	Y$EXEPAGED
EXE$MAXACMODE::				;MAXIMIZE ACCESS MODE
	MOVPSL	R1			;READ CURRENT PSL
	CMPZV	#PSL$V_PRVMOD,#PSL$S_PRVMOD,R1,R0 ;COMPARE WITH PREVIOUS MODE
	BLEQ	10$			;IF LEQ SPECIFIED ACCESS MODE LESS PRIVILEGED
	EXTZV	#PSL$V_PRVMOD,#PSL$S_PRVMOD,R1,R0 ;EXTRACT PREVIOUS MODE FIELD
10$:	RSB				;

	.SBTTL	REMOVE ENTRY FROM TIME DEPENDENT SCHEDULER QUEUE
;+
; EXE$RMVTIMQ - REMOVE ENTRY FROM TIME DEPENDENT SCHEDULER QUEUE
;
; THIS ROUTINE IS CALLED TO REMOVE ONE OR MORE ENTRIES FROM THE TIME
; DEPENDENT SCHEDULER QUEUE. ENTRIES ARE REMOVED BY TYPE, ACCESS MODE,
; REQUEST IDENTIFICATION, AND PROCESS ID.
;
; INPUTS:
;
;	R2 = ACCESS MODE (ALL EQUAL AND HIGHER ACCESS MODES).
;	R3 = REQUEST IDENTIFICATION (ZERO IMPLIES ALL).
;	R4 = TYPE OF ENTRY TO REMOVE (ALL SINGLE AND REPEAT ENTRIES).
;	R5 = PROCESS ID OF PROCESS TO REMOVE ENTRIES FOR.
;
;	IPL MUST BE IPL$_TIMER OR ABOVE.
;
;	IF SYSTEM SUBROUTINE OR WAKE REQUESTS ARE BEING REMOVED, THEN ACCESS
;	MODE AND REQUEST IDENTIFICATION ARE NOT USED AND NEED NOT BE SUPPLIED
;	IN THE CALLING SEQUENCE.
;
; OUTPUTS:
;
;	ALL ENTRIES OF THE SPECIFIED TYPE ARE REMOVED FROM THE TIME 
;	DEPENDENT SCHEDULER QUEUE.
;-
 
	.PSECT
EXE$RMVTIMQ::				;REMOVE ENTRY FROM TIME QUEUE
10$:	MOVAL	W^EXE$GL_TQFL,R0	;GET ADDRESS OF TIMER QUEUE LISTHEAD
	MOVL	R0,R1			;COPY LISTHEAD ADDRESS
20$:	MOVL	TQE$L_TQFL(R1),R1	;GET ADDRESS OF NEXT ENTRY
	CMPL	R1,R0			;END OF QUEUE?
	BEQL	80$			;IF EQL YES
	CMPZV	#0,#2,TQE$B_RQTYPE(R1),R4 ;REQUEST TYPE MATCH?
	BNEQ	20$			;IF NEQ NO
	CMPL	R5,TQE$L_PID(R1) 	;PROCESS ID MATCH?
	BNEQ	20$			;IF NEQ NO
	CMPB	#TQE$C_TMSNGL,R4	;SYSTEM SUBROUTINE OR CANCEL WAKE?
	BNEQ	40$			;IF NEQ YES - SKIP ID-ACCESS TEST
	TSTL	R3			;ALL REQUEST ID'S MATCH?
	BEQL	30$			;IF EQL YES
	CMPL	R3,TQE$L_ASTPRM(R1)	;REQUEST IDENTIFICATION MATCH?
	BNEQ	20$			;IF NEQ NO
30$:	CMPZV	#0,#2,TQE$B_RMOD(R1),R2	;REQUEST MODE LESS THAN SPECIFIED MODE?
	BLSS	20$			;IF LSS YES
40$:	PUSHR	#^M<R2,R3>		;SAVE REGISTERS R2 AND R3
	PUSHL	TQE$L_TQBL(R1)		;SAVE BACKWARD LINK OF ENTRY
	PUSHL	R0			;SAVE REGISTER R0
	REMQUE	TQE$L_TQFL(R1),R0	;REMOVE ENTRY FROM QUEUE
	CMPB	#TQE$C_SSSNGL,R4	;CANCEL SYSTEM SUBROUTINE?
	BEQL	70$			;IF EQL YES
	MOVZWL	TQE$L_RQPID(R0),R1	;GET PROCESS INDEX
	MOVL	@W^SCH$GL_PCBVEC[R1],R1	;GET ADDRESS OF PROCESS PCB
	CMPL	TQE$L_RQPID(R0),PCB$L_PID(R1) ;PROCESS ID MATCH?
	BNEQ	60$			;IF NEQ NO
	CMPB	#TQE$C_WKSNGL,R4	;CANCEL WAKE UP REQUEST?
	BEQL	50$			;IF EQL YES
	MOVL	PCB$L_JIB(R1),R2	;GET JIB ADDRESS
	INCW	JIB$W_TQCNT(R2)		;UPDATE AVAILABLE TIME QUEUE ENTRIES
	BBC	#ACB$V_QUOTA,TQE$B_RMOD(R0),60$ ;IF CLR, NO AST SPECIFIED
50$:	INCW	PCB$W_ASTCNT(R1)	;UPDATE AVAILABLE AST QUEUE ENTRIES
60$:	BSBW	EXE$DEANONPAGED		;DEALLOCATE TIME QUEUE ENTRY
70$:	POPR	#^M<R0,R1,R2,R3>	;RESTORE REGISTERS R0, R1, R2, AND R3
	BRB	20$			;
80$:	RSB				;
 
	.PAGE
	.SBTTL	EXE$PROBER - Check read accessibility of user buffer

;++	
;		
; FUNCTIONAL DESCRIPTION:
;	
;	This routine performs a series of PROBEs to check the read 
;	accessibility of the user-supplied buffer. Multiple PROBEs
;	must be done because the PROBE instruction only checks the
;	first and last pages while the user buffer may span several pages.
;
; CALLING SEQUENCE:	
;
;	JSB/BSB	EXE$PROBER
;
; INPUTS:
;
;	R0	Buffer address to be probed
;	R1	Buffer length
;	R3	Access mode to maximize with PSL<PRVMOD>
;
; SIDE EFFECTS:
;
;	R0 through R2 are destroyed
;
; ROUTINE VALUE:
;
;	R0 low bit set => successful return (SS$_NORMAL)
;	R0 low bit clear => portion of buffer is inaccessible (SS$_ACCVIO)
;
;--

	.PSECT	AEXENONPAGED

EXE$PROBER::
	ADDL	R0,R1			; Ending address of buffer
	BICW	#VA$M_BYTE,R0		; Truncate to start of page
	SUBL	R0,R1			; Calculate length of buffer to probe
	CVTWL	#-^X200,R2		; Set address adjustment constant
10$:	CVTLW	R1,R1			; Greater than 32K?
	BVS	30$			; If VS, yes; check by chunks
20$:
	IFNORD	R1,(R0),ACCVIO,R3	; Can ends of user's buffer be read?
	SUBL	R2,R0			; Calculate VA of next page
	MOVAW	(R1)[R2],R1		; Calculate new length
	BGTR	20$			; If GTR then more to test
	MOVZWL	#SS$_NORMAL,R0		; Indicate success
	RSB				;  and return

30$:	
	MOVQ	R0,-(SP)		; Save current values on stack
	MOVZWL	#^X7E00,R1		; Size of chunk used stepping thru buf.
					;  (32K - 1 page)
	ADDL	R1,(SP)			; Advance address by this amount
	SUBL	R1,4(SP)		; Decrease count
	BSBB	20$			; Probe chunk
	BLBC	R0,ACCVIO1		; If LBC, no access
	MOVQ	(SP)+,R0		; Pop pre-adjusted values off stack
	BRB	10$			; See if length now LT 32K.

ACCVIO1:
	ADDL	#8,SP			; Clean off stack
	RSB
ACCVIO:
	MOVZWL	S^#SS$_ACCVIO,R0	; Indicate access violation
	RSB	

	.PAGE
	.SBTTL	EXE$PROBEW - Check write accessibility of user buffer

;++	
;		
; FUNCTIONAL DESCRIPTION:
;	
;	This routine performs a series of PROBEs to check the write 
;	accessibility of the user-supplied buffer. Multiple PROBEs
;	must be done because the PROBE instruction only checks the
;	first and last pages while the user buffer may span several pages.
;
; CALLING SEQUENCE:	
;
;	JSB/BSB	EXE$PROBEW
;
; INPUTS:
;
;	R0	Buffer address to be probed
;	R1	Buffer length
;	R3	Access mode to maximize with PSL<PRVMOD>
;
; SIDE EFFECTS:
;
;	R0 through R2 are destroyed
;
; ROUTINE VALUE:
;
;	R0 low bit set => successful return (SS$_NORMAL)
;	R0 low bit clear => portion of buffer is inaccessible (SS$_ACCVIO)
;
;--

	.PSECT	AEXENONPAGED

EXE$PROBEW::
	ADDL	R0,R1			; Ending address of buffer
	BICW	#VA$M_BYTE,R0		; Truncate to start of page
	SUBL	R0,R1			; Calculate length of buffer to probe
	CVTWL	#-^X200,R2		; Set address adjustment constant
10$:	CVTLW	R1,R1			; Greater than 32K?
	BVS	30$			; If VS, yes; check by chunks

20$:
	IFNOWRT	R1,(R0),ACCVIO,R3	; Can ends of user's buffer be written?
	SUBL	R2,R0			; Calculate VA of next page
	MOVAW	(R1)[R2],R1		; Calculate new length
	BGTR	20$			; If GTR then more to test
	MOVZWL	#SS$_NORMAL,R0		; Indicate success
	RSB				;  and return

30$:	
	MOVQ	R0,-(SP)		; Save current values on stack
	MOVZWL	#^X7E00,R1		; Size of chunk used stepping thru buf.
					;  (32K - 1 page)
	ADDL	R1,(SP)			; Advance address by this amount
	SUBL	R1,4(SP)		; Decrease count
	BSBB	20$			; Probe chunk
	BLBC	R0,ACCVIO1		; If LBC, no access
	MOVQ	(SP)+,R0		; Pop pre-adjusted values off stack
	BRB	10$			; See if length now LT 32K.

	.PAGE
	.SBTTL	EXE$PROBER_DSC, EXE$PROBEW_DSC - Check buffer accessibility

;++	
;		
; FUNCTIONAL DESCRIPTION:
;	
;	Given the address of a buffer descriptor, this routine checks
;	the accessibility of the buffer descriptor and the specified
;	accessibility of the buffer.
;
;	***** NOTE WELL *****
;
;	If the buffer is accessible as desired, the buffer descriptor
;	information is returned in R1 and R2 including the high 16 bits
;	of the first long word.  The caller MUST NOT fetch the
;	descriptor again as that would open a protection hole.  Rather,
;	he/she should store R1,R2 for later use in local storage.
;	storage.
;
; CALLING SEQUENCE:	
;
;	JSB/BSB	EXE$PROBER_DSC
;	JSB/BSB	EXE$PROBEW_DSC
;
; INPUTS:
;
;	R1	Address of a buffer descriptor
;
; SIDE EFFECTS:
;
;	R3 is destroyed
;
; ROUTINE VALUE:
;
;	R0 low bit set => successful return (SS$_NORMAL)
;		R1<0:15>  = size of buffer in bytes
;		R1<16:31> = contents of the high word of the descriptor
;		R2 = Buffer address
;	R0 low bit clear => portion of buffer is inaccessible (SS$_ACCVIO)
;		R1 and R2 destroyed
;
;--
	.PSECT	Y$EXEPAGED		; This code can page
	.ENABL	LSB

EXE$PROBER_DSC::
	CLRL	R3			; Flag to indicate read probe
	BRB	10$
EXE$PROBEW_DSC::
	MOVL	#1,R3			; Flag to indicate write probe
10$:	IFNORD	#8,(R1),NOACCESS	; Error if can't read descriptor
	MOVL	#SS$_NORMAL,R0		; Assume buffer is accessible
	MOVQ	(R1),R1			; R1<0:15> = size of buf, R2 = adr
					; R1<16:31> = undefined, 
					; but must be returned to caller.
	CMPW	R1,#512			; Will one probe cover the buffer?
	BGTRU	50$			; Branch if not, need a probe loop
	BLBS	R3,30$			; Branch if checking for write access
	PROBER	#0,R1,(R2)		; See if buffer can be read by caller
	BNEQ	80$			; Branch if buffer can be read
					; otherwise, flow through the PROBEW
					; and return SS$_ACCVIO
30$:	PROBEW	#0,R1,(R2)		; See if buffer can be written by caller
	BNEQ	80$			; Branch if write access is allowed
	BRB	NOACCESS		; Buffer cannot be accessed
;
; Need to use a PROBE loop to check this buffer for the desired access.
;
50$:	PUSHR	#^M<R1,R2>		; Save contents of buffer descriptor
					; Caller must not refetch these
	PUSHAB	W^EXE$PROBER		; Assume checking for read access
	BBCC	#0,R3,60$		; Br if checking read access
					; and set R3 = 0
	MOVAB	W^EXE$PROBEW,(SP)	; Check for write access
60$:	MOVL	R2,R0			; Buffer address
	MOVZWL	R1,R1			; Size of buffer in bytes
	JSB	@(SP)+			; Call PROBER/W
	POPR	#^M<R1,R2>		; Recover contents of buf descriptor
80$:	RSB				; Return with R0 = status
NOACCESS:
	MOVZWL	S^#SS$_ACCVIO,R0
	RSB

	.DSABL	LSB

	.END
