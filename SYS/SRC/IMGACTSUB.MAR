	.TITLE	IMGACTSUB - Image Activator Subroutines
	.IDENT	'V03-000'
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************

;++
; Facility:	Executive, Memory Management System Service
;
; Abstract:
;
;	This module contains subroutines used by the image activator
;
; Environment:
;
;	Most of the code in this module runs in executive access mode
;
	.SBTTL	History		
;
; Author:		Lawrence J. Kenah
;
; Creation Date:	19 March 1981
;
; Modified by:
;
;	V02-007	LJK0120		Lawrence J. Kenah	11-Feb-1982
;		If a privileged shareable image has been activated,
;		call the image activator to allow vectored code to
;		be called.
;
;	V02-006	LJK0119		Lawrence J. Kenah	9-Feb-1982
;		Clear image activator context longword. Change error
;		code for privileged shareable images to SS$_NOSHRIMG.
;
;	V02-005	LJK0117		Lawrence J. Kenah	25-Jan-1981
;		Add subroutine that does internal .ADDRESS fixups
;		for privileged shareable images
;
;	V02-004	PHL0025		Peter H. Lipman		19-Nov-1981
;		Add new routine IAC$RESET_IAF which resets the fixup
;		vector data base in the control region when activating
;		a new image.
;
;		Add the functionality to do one-shot SHL context
;		initialization on a successful search for an SHL entry.
;
;	V02-003	LJK0083		Lawrence J. Kenah	11-Nov-1981
;		Move all pageable code from Y$EXEPAGED to new pageable
;		PSECT to alleviate strain on word displacements
;		throughout the pageable exec.
;
;	V02-002	LJK0062		Lawrence J. Kenah	17-Sep-1981
;		Remove instruction that zaps forward link to fixup
;		vectors to allow fixups to be done in user mode.
;
;--

	.SBTTL	Declarations

;
; Include Files:
;
	$IACDEF				; Image activator control flags
	$IAFDEF				; Offsets into image activator fixup 
					;  area within image file
	$IFDDEF				; Image file descriptor flags
	$PSLDEF				; PSL field definitions and constants
	$SETPRTDEF			; Argument list offsets for $SETPRT
					;  system service
	$SHLDEF				; Offsets into shareable image list element
;
; External Symbols:
;

;
; Macros:
;

;
; Equated Symbols:
;

	.SBTTL	EXE$IMGFIX	Address Relocation Fixup System Service

;++
; Functional Description:
;
;	This procedure is called after an image is activated but before it
;	is called in order to allow address fixups to be performed in user
;	access mode if the caller of the image so wishes. This prevents
;	process destruction os security breaches if the image that has just
;	been activated contains garbage or selected cleverness.
;
; Calling Sequence:
;
;	CALLS	#0,EXE$IMGFIX
;
; Input Parameters:
;
;	none
;
; Implicit Input:
;
;	Address space of image just activated that contains fixup vectors
;	that describe the address fixups that must be done.
;
; Output Parameters:
;
;	none
;
; Implicit Output:
;
;	All appropriate locations are relocated to reflect the locations
;	of each shareable image during this activation of the image.
;
; Completion Codes:
;
;	R0 low bit set => successful completion (SS$_NORMAL)
;
;	R0 low bit clear => error occurred 
;		(Error status codes are returned by IAC$FIXUP_ADDR and
;		 IAC$FIXUP_IAF.)
;
; Side Effects:
;
;	none
;
;--

	.PSECT	Y$EXEPAGED		; All of this code can page

EXE$IMGFIX::
	.WORD	0			; Null entry mask
	BSBW	IAC$FIXUP_IAF		; First tie each fixup vector in a
					;  shareable image to the master list
	BLBC	R0,10$			; Skip hard part if an error occurred
	BSBW	IAC$FIXUP_ADDR		; Do the actual relocation
	BBC	#IFD$V_SETVECTOR,@#IAC$GL_IMAGCTX,10$	; Any vectors to set?
	$IMGACT_S	0,0,0,-
		IMGCTL=#IAC$M_SETVECTOR	; Let image activator set them
10$:	RET				; Return with final status

; Put the rest of this module into a separate program section

	.PSECT	YF$$SYSIMGACT	


	.SBTTL	IAC$FIXUP_IAF	Map shareable image IAF to executable image

;++
; Functional Description:
;
;	This routine is called after a fixup vector associated with a
;	shareable image has been mapped to link each shareable image
;	list entry in the shareable image's fixup vector to the associated
;	shareable image list entry in the executable image. If no entry
;	is found in the executable image, a link of zero is used.
;
; Calling Sequence:
;
;	BSBW	IAC$FIXUP_IAF
;
; Input Parameters:
;
;	none
;
; Implicit Input:
;
;	Image activator IAF listheads
;
; Output Parameters:
;
;	none
;
; Implicit Output:
;
;	none
;
; Completion Codes:
;
;	none
;
; Side Effects:
;
;	R0 and R1 are destroyed
;
;--

IAC$FIXUP_IAF::
	PUSHR	#^M<R2,R3,R4,R5>	; Save some registers
	MOVAL	@#<CTL$GL_FIXUPLNK-IAF$L_FIXUPLNK>,R5 ; Pick up listhead address

10$:	MOVL	IAF$L_FIXUPLNK(R5),R5	; Get address of next fixup vector
	BEQL	30$			; Return success if done
	MOVL	IAF$L_SHRIMGCNT(R5),R2	; Count of SHL entries to R2
	BEQL	10$			; None here. Get next fixup vector
	ADDL3	R5,IAF$L_SHLSTOFF(R5),R3 ; Address of first SHL entry to R3

20$:	MOVAB	SHL$T_IMGNAM(R3),R0	; Pass shareable image name in R0
	BSBW	IAC$SRCH_SHL_C		; Find associated SHL entry in EXE's IAF
	BLBC	R0,50$			; Quit if error occurred
	MOVL	R1,SHL$L_SHLPTR(R3)	; Establish linkage
	ADDL2	#SHL$K_LENGTH,R3	; Point to next SHL entry
	SOBGTR	R2, 20$			;  and do next entry
	BRB	10$			; Go back and get next fixup vector

30$:	MOVZWL	#SS$_NORMAL,R0		; Indicate success to caller
40$:	POPR	#^M<R2,R3,R4,R5>	; Restore registers
	RSB				;  and return

50$:	MOVZWL	#SS$_RELINK,R0		; Force a relink of the .EXE
	BRB	40$

	.SBTTL	IAC$SRCH_SHL	Search shareable image list

;++
; Functional Description:
;
;	This routine searches the shareable image list associated with the
;	executable image to determine whether a shareable image with a given
;	name exists in the list. This routine is used to determine whether a
;	shareable image has already been mapped. Is is also used to relate the
;	relative shareable image list within a shareable image to the shareable
;	image list associated with the executable image.
;
; Calling Sequence:
;
;	BSBW	IAC$SRCH_SHL_C
;	BSBW	IAC$SRCH_SHL_D
;
; Input Parameters:
;
;	R0 = address of counted (ASCIC) string of shareable image name
;		if entry at IAC$SRCH_SHL_C.
;	R0 = address of string descriptor of shareable image name if
;		if entry at IAC$SRCH_SHL_D.
;
; Implicit Input:
;
;	CTL$GL_IAFLINK	Listhead of linked list of fixup vectors
;
; Output Parameters:
;
;	If successful, R1 contains address of shareable image list element
;	that matches input string. R1 is cleared on failure.
;
; Implicit Output:
;
;	If the shareable image list element was in a process permanent fixup
;	vector and if the sharable image had some impure data sections,
;	then these impure sections are reinitialized and a "one shot" 
;	bit is set indicating that it has been done for this sharable
;	image.
;
; Completion Codes:
;
;	R0 low bit set indicates success (SS$_NORMAL)
;
;	R0 low bit clear indicates failure (SS$_DIRFULL)
;		This status indicates that no match occurred and there
;		was no extra room to copy the shareable image name into
;		the fixup vector. 
;
; Side Effects:
;
;	If the name does not exist in the last fixup vector but there is
;	room for extra SHL entries in that fixup vector, the shareable
;	image name is copied to one of the extra entries.
;
;--

	.ENABLE		LOCAL_BLOCK

IAC$SRCH_SHL_C::
	PUSHR	#^M<R2,R3,R4,R5,R6,R7,R8,R9,R10> ; Save some registers
	MOVZBL	(R0)+,R8		; Input character count in R8
	MOVL	R0,R9			;  and string address in R9
	BRB	5$			; Join common code

IAC$SRCH_SHL_D::
	PUSHR	#^M<R2,R3,R4,R5,R6,R7,R8,R9,R10> ; Save some registers
	MOVZBL	(R0),R8			; Input character count in R8
	MOVL	4(R0),R9		;  and string address in R9

5$:	MOVAL	@#CTL$GL_IAFLINK,R10	; Pick up contents of fixup vector listhead
;
; The permanent portion of the fixup vector list ends with the dummy
; entry the address of which is CTL$GL_IAFPERM.  If the fixup vector
; in which the SHL is found is permanent, then the PERMCTX cell in 
; the SHL may describe some areas of memory that need to be reinitialized.
; This will be a list of MOVC parameters.  Each set of MOVC parameters
; is 3 long words, a byte count (limited to 16 bits), a source address,
; and a destination address.  The list ends with a zero byte count.
;
	PUSHAL	@#CTL$GL_IAFPERM	; Address of end of permanent IAF's
					; and flag indicating whether or not
					; we have passed it.
	ASSUME	IAF$L_IAFLINK EQ 0
7$:	MOVL	IAF$L_IAFLINK(R10),R10	; Get next fixup vector address
	BEQL	30$			; Branch if none => no match
	CMPL	R10,(SP)		; End of process permanent IAF's
	BNEQ	8$			; Branch if not
	CLRL	(SP)			; Yes, record the fact.
8$:	MOVL	IAF$L_SHRIMGCNT(R10),R7	; Number of shareable images in list to R7
	BEQL	7$			; If equal, list empty => no match in this IAF
	ADDL3	R10,IAF$L_SHLSTOFF(R10),R6	; R6 now points to first SHL entry

10$:	CMPB	R8,SHL$T_IMGNAM(R6)	; Check counts first
	BNEQ	20$			; If not equal, no match
	CMPC3	R8,(R9),SHL$T_IMGNAM+1(R6) ; Then compare strings
	BEQL	40$			; Equal means success
20$:	ADDL2	#SHL$K_LENGTH,R6	; Advance R6 to next SHL entry
	SOBGTR	R7,10$			;  and see if that matches
	BRB	7$			; No match here. Get next fixup vector.

30$:	BSBB	COPY_SHL		; Try to create a SHL entry
	ADDL	#4,SP			; Clean off process permanent indicator
	BRB	50$			; Join common exit path 

;  This is the successful exit path. R6 points to the SHL entry that matches.

40$:	TSTL	(SP)+			; Is this SHL process permanent?
	BEQL	46$			; Branch if not
	MOVL	SHL$L_PERMCTX(R6),R7	; Yes, see if any MOVC's to do
	BEQL	46$			; Branch if none for this SHL
	BLBS	R7,46$			; Branch if already done MOVC's
	INCL	SHL$L_PERMCTX(R6)	; Do these MOVC's only once
42$:	CVTLW	(R7)+,R0		; Get byte count to move
	BEQL	46$			; Branch if done
	MOVC3	R0,@(R7)+,@(R7)+	; Move saved (pure) copy of writable
					;  data to reinit impure data of 
					;  the sharable image.
	BRB	42$			; Go do the next MOVC if any
46$:	MOVL	R6,R1			; Return the address of the SHL in R1
	MOVZWL	#SS$_NORMAL,R0		;  and a success indicator in R0
50$:	POPR	#^M<R2,R3,R4,R5,R6,R7,R8,R9,R10> ; Restore registers
	RSB

	.DISABLE	LOCAL_BLOCK

	.SBTTL	COPY_SHL	Copy shareable image name into fixup vector

;+
; Functional Description:
;
;	This routine copies a shareable image name into one of the extra
;	SHL entries in a fixup vector.
;
; Calling Sequence:
;
;	BSBW	COPY_SHL
;
; Input Parameters:
;
;	R8 = Number of characters in shareable image name
;	R9 = Address of first character in shareable image name
;
; Implicit Input:
;
;	CTL$GL_IAFEXE	Address of first fixup vector in fixup vector list
;			that is specific to this activation
;
; Output Parameters:
;
;	R1 points to a SHL containing the desired shareable image name
;
; Implicit Output:
;
;	If there are any extra SHL slots in the last fixup vector, the 
;	shareable image name is copied to one of those slots.
;
; Completion Codes:
;
;	SS$_NORMAL	Shareable image name successfully copied
;
;	SS$_DIRFULL	No extra SHL slots in last fixup vector
;
; Side Effects:
;
;	R0 and R2 through R6 are destroyed
;
;-

COPY_SHL:
	MOVAL	@#CTL$GL_IAFEXE,R6	; Get address of fixup vector listhead
10$:	MOVL	IAF$L_IAFLINK(R6),R6	; Get next fixup vector
	BEQL	20$			; Report error if end of list
	TSTL	IAF$L_SHLEXTRA(R6)	; Any extra SHL slots?
	BLEQ	10$			; No. Try next ficup vector
	MOVL	IAF$L_SHRIMGCNT(R6),R1	; Use old count as new index
	ADDL3	R6,IAF$L_SHLSTOFF(R6),R0 ; Base address of this shareable image list
	EMUL	#SHL$K_LENGTH,R1,R0,R1	; Get address of first free SHL
	MOVB	R8,SHL$T_IMGNAM(R1)	; Store image name count
	PUSHL	R1			; Save address of SHL
	MOVC5	R8,(R9),#0,#SHL$C_MAXNAMLNG,SHL$T_IMGNAM+1(R1) ; Store image name
	INCL	IAF$L_SHRIMGCNT(R6)	; Count one more SHL entry
	DECL	IAF$L_SHLEXTRA(R6)	;  and one less extra entry
	POPL	R1			; Restore R1
	MOVZWL	#SS$_NORMAL,R0		; Indicate successful string copy
	RSB				;  and return

20$:	MOVZWL	#SS$_DIRFULL,R0		; Indicate no extra SHL slots
	RSB				;  and return error status

	.SBTTL	IAC$FIXUP_ADDR	Routine that performs post-activation fixups

;++
; Functional Description:
;
;	This routine processes a linked list of fixup vectors and performs
;	the specific fixup operations listed in each vector. There are three
;	forms of fixup. 
;
;		o  Each exit vector has the base address of the shareable
;		   image added to each entry.
;
;		o  Each .ADDRESS directive has the base address of the 
;		   appropriate shareable image added to it.
;
;		o  The protection of each fixup vector is changed to prevent
;		   its being written when the image executes.
;
; Calling Sequence:
;
;	BSBW	IAC$FIXUP_ADDR
;
; Input Parameters:
;
;	none
;
; Implicit Input:
;
;	CTL$GL_FIXUPLNK		Listhead of linked list of fixup vectors for
;				a set of shareable images
;
; Output Parameters:
;
;	none
;
; Implicit Output:
;
;	Elements in fixup vector G-hat offset area have base address
;	of appropriate shareable image added to them.
;
;	.ADDRESS directives throughout the address space have base
;	addresses added in.
;
;	Pages that should eventually be read-only but were set to
;	writable while the image activator works are set back to read-only.
;
; Completion Codes:
;
;	none
;
; Side Effects:
;
;	CTL$GL_FIXUPLNK cleared after fixups are completed.
;
;--

IAC$FIXUP_ADDR::
	PUSHR	#^M<R2,R3,R4,R5>	; Save some registers
	MOVAL	@#<CTL$GL_FIXUPLNK-IAF$L_FIXUPLNK>,R5 ; Pick up listhead address

10$:	MOVL	IAF$L_FIXUPLNK(R5),R5	; Get address of next fixup vector
	BEQL	40$			; Quit if no more to process
	CLRL	R1			; Need base address of this shareable
	BSBW	SHIMG_BASVA		;  image (with index 0) 
	MOVL	R1,R3			; Load correct input register
	MOVL	IAF$L_G_FIXOFF(R5),R4	; Get offset to G-hat fixup data
	BEQL	20$			; Skip this step if none
	ADDL2	R5,R4			; Make an address
	BSBW	FIXUP_G_HAT		; Go do the actual work
20$:	MOVL	IAF$L_DOTADROFF(R5),R4	; Get offset to .ADDRESS fixup data
	BEQL	30$			; Skip this step if none
	ADDL2	R5,R4			; Make an address
	BSBW	FIXUP_ADDRESS		; Fixup all .ADDRESS data
30$:	MOVL	IAF$L_CHGPRTOFF(R5),R4	; Get offset to page protection data
	BEQL	10$			; Skip this step if none
	ADDL2	R5,R4			; Make an address
	BSBW	FIXUP_PROT		; Change page protection
	BRB	10$			; All done with this fixup vector
					;  See if there are any more
40$:	POPR	#^M<R2,R3,R4,R5>	; Restore registers
	RSB

	.SBTTL	FIXUP_G_HAT	Fixup G-hat exit vector

;++
; Functional Description:
;
;	This routine performs the G-hat fixup for a specific exit vector.
;	specifically, the base address of the appropriate shareable image
;	is added to each entry in the exit vector.
;
; Calling Sequence:
;
;	BSBW	FIXUP_G_HAT
;
; Input Parameters:
;
;	R4 = Address of G-hat fixup area within fixup vector
;
; Implicit Input:
;
;	Contents of G-hat fixup area
;
; Output Parameters:
;
;	none
;
; Implicit Output:
;
;	Elements in fixup vector G-hat offset area have base address
;	  of appropriate shareable image added to them.
;
; Completion Codes:
;
;	none
;
; Side Effects:
;
;	R0, R1, and R2 are destroyed
;
;--

FIXUP_G_HAT:
	MOVL	(R4)+,R2		; R2 contains a count of fixups
	BEQL	20$			; A zero indicates the end of the G-hat data
	MOVL	(R4)+,R1		; Store shareable image number in R1
	BSBB	SHIMG_BASVA		;  and then load R1 with base address 
					;  of next shareable image. 
10$:	ADDL2	R1,(R4)+		; Bias next exit vector entry
	SOBGTR	R2,10$			; Do next entry
	BRB	FIXUP_G_HAT		; Now do next shareable image

20$:	MOVZWL	#SS$_NORMAL,R0		; Indicate success
	RSB				; Return

	.SBTTL	SHIMG_BASVA	Convert a shareable image index to an address

;++
; Functional Description:
;
;	This routine converts a relative shareable image number into the
;	absolute base address at which that shareable image is mapped. It
;	assumes that the image activator has modified each entry in the
;	shareable image list in this fixup vector to point to the relevant
;	entry in the shareable image list in the executable image.
;
; Calling Sequence:
;
;	BSBW	SHIMG_BASVA
;
; Input Parameters:
;
;	R1 = Relative number of shareable image
;	R5 = Base address of fixup vector
;
; Implicit Input:
;
;	Contents of shareable image list in this shareable image and contents
;	of shareable image list in executable image
;
; Output Parameters:
;
;	R1 = Base address of shareable image indicated by input parameter
;
; Implicit Output:
;
;	none
;
; Completion Codes:
;
;	none
;
; Side Effects:
;
;	R0 is destroyed
;
;--

SHIMG_BASVA:
	ADDL3	R5,IAF$L_SHLSTOFF(R5),R0 ; Base address of this shareable image list
	EMUL	#SHL$K_LENGTH,R1,R0,R0	; Now R0 points to pointer in this
					;  shareable image list
	MOVL	SHL$L_BASEVA(R0),R1	; First see if base address is in this SHL
	BNEQ	10$			; All done if it is
	MOVL	SHL$L_SHLPTR(R0),R1	; If not, follow pointer to SHL in EXE,
	MOVL	SHL$L_BASEVA(R1),R1	;  pick up base address stored there,
10$:	RSB				;  and return

	.SBTTL	FIXUP_ADDRESS	Fixup .ADDRESS entries throughout the image

;++
; Functional Description:
;
;	This routine performs the .ADDRESS fixup for a specific exit vector.
;	Specifically, the base address of the appropriate shareable image
;	is added to each .ADDRESS entry in this shareable image.
;
; Calling Sequence:
;
;	BSBW	FIXUP_ADDRESS
;
; Input Parameters:
;
;	R3 = Base address of shareable image whose .ADDRESS directives
;		are being fixed
;	R4 = Address of .ADDRESS fixup area within fixup vector
;
; Implicit Input:
;
;	Contents of .ADDRESS fixup area
;
; Output Parameters:
;
;	none
;
; Implicit Output:
;
;	.ADDRESS directives within this shareable image have the base addresses
;	of the appropriate shareable images added to them.
;
; Completion Codes:
;
;	none
;
; Side Effects:
;
;	none
;
;--

FIXUP_ADDRESS:
	MOVL	(R4)+,R2		; R2 contains a count of fixups
	BEQL	20$			; A zero indicates the end of the G-hat data
	MOVL	(R4)+,R1		; Store shareable image number in R1
	BSBB	SHIMG_BASVA		;  and then load R1 with base address 
					;  of next shareable image. 
10$:	ADDL3	R3,(R4)+,R0		; Get address of .ADDRESS directive
	ADDL2	R1,(R0)			; Bias by base address of shareable image
	SOBGTR	R2,10$			; Do next entry
	BRB	FIXUP_ADDRESS		; Now do next shareable image

20$:	MOVZWL	#SS$_NORMAL,R0		; Indicate success
	RSB				; Return

	.SBTTL	FIXUP_PROT	Alter page protection to read only

;++
; Functional Description:
;
;	This routine alters the page protection of various sections within
;	the image to read only. These pages were initially writable so the
;	image activator could fixup all of the relative references. The pages
;	cannot be writable while the image is executing.
;
; Calling Sequence:
;
;	BSBW	FIXUP_PROT
;
; Input Parameters:
;
;	R3 = Base address of image whose pages' protection is being altered
;	R4 = Address of protection data within fixup vector
;
; Implicit Input:
;
;	Contents of protection data in fixup vector
;
; Output Parameters:
;
;	none
;
; Implicit Output:
;
;	Pages in address ranges specified in fixup vector have their protections
;	changed to the protections also specified in that data area. The
;	protection is usually no write access for any access mode.
;
; Completion Codes:
;
;	none
;
; Side Effects:
;
;	R0, R1, and R2 are destroyed
;
;--

FIXUP_PROT:
	PUSHL	R6			; Need one more register here
	SUBL2	#<4*SETPRT$_NARGS>,SP	; Set up space for argument list
	PUSHL	#SETPRT$_NARGS		; Push argument count
	MOVL	SP,R6			; Use R6 as argument pointer
	CLRQ	-(SP)			; Initialize input address array
	MOVL	SP,SETPRT$_INADR(R6)	; Put its address into argument list
	CLRL	SETPRT$_RETADR(R6)	; Not interested in this argument
	MOVL	#PSL$C_EXEC,SETPRT$_ACMODE(R6) ; The image activator owns these pages
	CLRL	SETPRT$_PRVPRT(R6)	; Not interested in this either
	MOVZWL	#SS$_NORMAL,R0		; Establish initial status
	MOVL	(R4)+,R2		; Get count of number of protection changes
	BEQL	20$			; Do not even start if nothing here
10$:	ADDL3	R3,(R4)+,(SP)		; Get starting address
	MOVZWL	(R4)+,R1		; Ending address must be calculated
	ASHL	#9,R1,R1		;  ... from page count in image section
	DECL	R1			; Make byte count an inclusive count
	ADDL3	R1,(SP),4(SP)		; Put ending address in second longword
	MOVZWL	(R4)+,SETPRT$_PROT(R6)	; Get new protection from fixup vector
	CALLG	(R6),G^SYS$SETPRT	; Call the system service
					; Ignore errors
	SOBGTR	R2,10$			; Go get next image section

20$:	ADDL2	#<8+4+<4*SETPRT$_NARGS>>,SP ;Reset stack pointer,
	POPL	R6			;  restore that extra register,
	RSB				;  and return

	.SBTTL	IAC$PRVSHRIMG	Fixup Routine for Privileged Shareable Images
;++
; Functional Description:
;
;	This routine checks that a privileged shareable image has no 
;	outbound calls. For images passing this test, remaining
;	.ADDRESS fixups are performed.
;
; Calling Sequence:
;
;	BSBW	IAC$PRVSHRIMG
;
; Input Parameters:
;
;	R0	Address of fixup vector
;	R1	Base address of privileged shareable image currently
;		being mapped
;
; Output Parameters:
;
;	none
;
; Implicit Output:
;
;	If the fixup vector indicates no outbound calls, the base address
;	of the privileged shareable image is stored in the fixup vector
;	and the .ADDRESS fixups are performed.
;
; Side Effects:
;
;	R0 and R1 are destroyed
;
; Completion Codes:
;
;	SS$_NORMAL	Fixups were completed for privileged shareable image
;
;	SS$_NOSHRIMG	Shareable image has outbound calls
;--

IAC$PRVSHRIMG::
	PUSHR	#^M<R2,R3,R4,R5>	; Save some registers
	MOVL	R0,R5			; Store fixup vector address in R5
	SUBL3	#1,IAF$L_SHRIMGCNT(R5),R0	; Is shareable imagc count 1?
	BNEQ	30$			; If not, report error
	TSTL	IAF$L_G_FIXOFF(R5)	; Also report error if G^ fixup data
	BNEQ	30$
	MOVL	R1,R3			; Store base address of image in R3
	ADDL3	R5,IAF$L_SHLSTOFF(R5),R0	; Also store base address in
	MOVL	R1,SHL$L_BASEVA(R0)	;  SHL entry for SHIMG_BASVA
	MOVL	IAF$L_DOTADROFF(R5),R4	; Any .ADDRESS fixups?
	BEQL	10$			; Branch if none
	ADDL2	R5,R4			; Convert R4 offset to address
	BSBW	FIXUP_ADDRESS		; Fixup all .ADDRESS data
10$:	MOVL	IAF$L_CHGPRTOFF(R5),R4	; Get offset to protection data
	BEQL	20$			; All done if none
	ADDL2	R5,R4			; Make R4 an address
	BSBW	FIXUP_PROT		; Change page protection
20$:	POPR	#^M<R2,R3,R4,R5>	; Restore registers
	RSB				;  and return

30$:	MOVZWL	#SS$_NOSHRIMG,R0	; No outbound calls allowed
	BRB	20$			; Return error status

	.SBTTL	IAC$RESET_IAF	Reset fixup vector data base

;++
; Functional Description:
;
;	This routine is called to clean up the process permanent portion
;	of the image activator fixup vector data base at the start of
;	a full image activate.
;
; Calling Sequence:
;
;	BSBW	IAC$RESET_IAF
;
; Input Parameters:
;
;	none
;
; Implicit Input:
;
;	Control region pointer cells to fixup data and the process
;	permanent fixup vectors.
;
; Output Parameters:
;
;	none
;
; Implicit Output:
;
;	Control region pointers to fixup vector data base are reset to
;	indicate that there is no active image.  The process permanent
;	Shareable Image List elements have their "one shot" impure
;	section context "rearmed."  These permanent sharable images
;	which have impure data sections must have those sections
;	reinitialized once each activation, but not on a merge.  So
;	there is a "one shot" bit indicating that the sharable image
;	impure data has been reinitialized.  This is reset at the
;	full activation of an image.
;
; Completion Codes:
;
;	none
;
; Side Effects:
;
;	R0, R1, and R2 are destroyed
;
;--

IAC$RESET_IAF::
	CLRL	@#CTL$GL_IAFEXE		; Clear address of fixup vector for .EXE
	MOVAL	@#CTL$GL_IAFPERM,@#CTL$GL_IAFLAST ; Reset end of fixup vector list 
	CLRL	@#IAC$GL_IMAGCTX	; Clear image context flags
;
; For each permanent fixup vector loop through the SHL entries and
; clear the bit in the PERMCTX cell that indicates that the context
; for that SHL has already been applied.  This bit is set to indicate
; that the work has already been done and is not to be done again.  It
; is reset at each fresh image activation to say that the works needs 
; to be done.
;
	MOVAL	@#CTL$GL_IAFLINK,R0	; Pointer to first fixup vector
					; All permanent ones are before the
					; Dummy IAFPERM entry.
	ASSUME	IAF$L_IAFLINK EQ 0
10$:	MOVL	IAF$L_IAFLINK(R0),R0	; Point to next fixup vector
	MOVL	IAF$L_SHRIMGCNT(R0),R2	; Number of SHL entries
					; IAFPERM has 0 SHL's
					; Legal permanent entry does not
	BEQL	30$			; Branch if none
	ADDL3	IAF$L_SHLSTOFF(R0),R0,R1 ; Address of first SHL
20$:	BICL	#1,SHL$L_PERMCTX(R1)	; Shut off "already used" bit
	ADDL	#SHL$K_LENGTH,R1	; Form adr of next SHL in list
	SOBGTR	R2,20$			; Loop through all SHL's
	BRB	10$			; Get next fixup vector
					; To point to permanent IAF in P1 space
30$:	RSB

	.END
