	.TITLE	SYSSETSTK - SET STACK LIMITS
	.IDENT	'V03-000'

;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************

;++
; FACILITY: EXECUTIVE, SYSTEM SERVICES
;
; ABSTRACT: 
;	This module implements the service to set the stack limits for
;	any mode.  Actually, USER mode is a nop since it requires no
;	system service to change and is virtually infinite. (Groan!!!)
;
; ENVIRONMENT: VAX/VMS
;
; AUTHOR: Kerbey T. Altmann,	 CREATION DATE: 05-Jun-1981
;
; MODIFIED BY:
;
;--
	.page
	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;
	$PSLDEF
	$SSDEF

;
; LOCAL SYMBOLS:
;
	INADR=	4			; Address of input array
	RETADR= 8			; Address of output array
	ACMODE=	12			; The stack mode to set

	.page
	.SBTTL	EXE$SETSTK - SET STACK LIMITS

;++
; FUNCTIONAL DESCRIPTION:
;
;	The SETSTK system service allows one to change the values in
;	the stack limit and base arrays held in per-process P1 space.
;	These arrays are used by EXCEPTION and BUGCHECK to validate
;	stack address during error processing.  The first longword
;	is the setting for the low memory (limit or top) address of
;	the stack - the check for validity would be less than or
;	equal to this value.  The second longword is the setting for
;	the high memory (base) address of the stack - the check for
;	validity would be greater than this value.
;
; INPUTS:
;
;	INADR(AP)	Pointer to a 2 longword array specifying the
;			new contents of the stack arrays.
;	RETADR(AP)	Pointer to a 2 longword array to receive the
;			contents of the former settings.
;	ACMODE(AP)	A longword containing the value of the access
;			mode for whose stack the settings are to be
;			changed (maximized with the current mode).
;
; OUTPUTS:
;
;	R0		Status code
;
;--

	.PSECT	YEXEPAGED
	.ENTRY	EXE$SETSTK, ^M<R2,R3,R4>

	EXTZV	#0,#2,ACMODE(AP),R0	; Get specified access mode
	BSBW	EXE$MAXACMODE		; Maximize access mode
	MOVL	R0, R1			; Hold for later
	CMPL	#PSL$C_USER, R0		; Is it USER mode?
	BEQL	20$			; Yes, just make it a no-op
	MOVZWL	#SS$_ACCVIO, R0		; Assume access violation
	MOVL	INADR(AP), R2		; Pick up pointer to input range
	BEQL	30$			; No range specified is ACCVIO
	IFNORD	#8, (R2), 30$		; Check accessibility
	MOVL	RETADR(AP), R3		; Pick up pointer to output range
	BEQL	10$			; None specified
	IFNOWRT	#8, (R3), 30$		; Check accessibility
	MOVL	@#CTL$AL_STACKLIM[R1],-	; Return the Lo-address (limit)
		(R3)+
	MOVL	@#CTL$AL_STACK[R1], (R3); Return the Hi-address (base)
10$:	MOVL	(R2)+, -
		@#CTL$AL_STACKLIM[R1]	; Set the Lo-address (limit)
	MOVL	(R2), @#CTL$AL_STACK[R1]; Set the Hi-address (base)
20$:	MOVZWL	#SS$_NORMAL, R0		; Success
30$:	RET

	.END
