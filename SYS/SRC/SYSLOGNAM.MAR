	.TITLE	SYSLOGNAM - SYSTEM SERVICES TO MANIPULATE LOGICAL NAMES
	.IDENT	'V03-000'
 
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
; D. N. CUTLER 10-OCT-76
;
; SYSTEM SERVICES TO MANIPULATE LOGICAL NAMES
;
;	CREATE LOGICAL NAME
;	DELETE LOGICAL NAME
;	TRANSLATE LOGICAL NAME
;
; MODIFICATION HISTORY:
;
;	V02-004 MSH0001		Maryann Hinden			11-Feb-1982
;		Fix PROBE problem.
;
;	V02-003	KTA0026		Kerbey T. Altmann		21-Jul-1981
;		Modify access to LOG$AL_LOGTBL.
;
;	V02-002	KTA0023		Kerbey T. Altmann		17-Jun-1981
;		Modify SYSDELLOG to accommodate the new hash table.
;
;
; MACRO LIBRARY CALLS
;
 
	$DYNDEF				;DEFINE DATA STRUCTURE TYPE CODES
	$IPLDEF				;DEFINE INTERRUPT PRIORITY LEVELS
	$LOGDEF				;DEFINE LOG OFFSETS
	$PCBDEF				;DEFINE PCB OFFSETS
	$PRVDEF				;DEFINE PRIVILEGE BITS
	$PSLDEF				;DEFINE PROCESSOR STATUS FIELDS
	$SSDEF				;DEFINE SYSTEM STATUS VALUES
	$UCBDEF				;DEFINE UCB OFFSETS
 
;
; LOCAL SYMBOLS
;
; ARGUMENT LIST OFFSET DEFINITIONS FOR CREATE LOGICAL NAME
;
 
TBLFLG=4				;LOGICAL NAME TABLE NUMBER
LOGNAM=8				;ADDRESS OF LOGICAL NAME STRING DESCRIPTOR
EQLNAM=12				;ADDRESS OF EQUIVALENCE NAME STRING DESCRIPTOR
CRACMODE=16				;ACCESS MODE
 
;
; ARGUMENT LIST OFFSET DEFINITIONS FOR DELETE LOGICAL NAME
;
 
TBLFLG=4				;LOGICAL NAME TABLE NUMBER
LOGNAM=8				;ADDRESS OF LOGICAL NAME STRING DESCRIPTOR
DLACMODE=12				;ACCESS MODE
 
;
; ARGUMENT LIST OFFSET DEFINITIONS FOR TRANSLATE LOGICAL NAME
;
 
TRLOGNAM=4				;ADDRESS OF LOGICAL NAME STRING DESCRIPTOR
RSLLEN=8				;ADDRESS TO STORE LENGTH OF RESULT STRING
RSLBUF=12				;ADDRESS OF RESULT BUFFER DESCRIPTOR
TABLE=16				;ADDRESS TO STORE TRANSLATION TABLE NUMBER
TRACMODE=20				;ADDRESS TO STORE ASSIGNMENT ACCESS MODE
DSBMSK=24				;TABLE SEARCH DISABLE MASK
	.PAGE
	.SBTTL	CREATE LOGICAL NAME
;+
; EXE$CRELOG - CREATE LOGICAL NAME
;
; THIS SERVICE PROVIDES THE CAPABILITY TO INSERT A LOGICAL NAME EQUIVALENCE
; INTO EITHER THE PROCESS, GROUP, OR SYSTEM LOGICAL NAME TABLE. IF THE LOG-
; ICAL NAME ALREADY EXISTS IN THE RESPECTIVE TABLE, THEN THE NEW ENTRY SUPER-
; SEDES THE OLD.
;
; INPUTS:
;
;	TBLFLG(AP) = LOGICAL NAME TABLE NUMBER.
;	LOGNAM(AP) = ADDRESS OF LOGICAL NAME STRING DESCRIPTOR.
;	EQLNAM(AP) = ADDRESS OF EQUIVALENCE NAME STRING DESCRIPTOR.
;	CRACMODE(AP) = ACCESS MODE OF LOGICAL NAME TO BE CREATED.
;
;	R4 = CURRENT PROCESS PCB ADDRESS.
;
; OUTPUTS:
;
;	R0 LOW BIT CLEAR INDICATES FAILURE TO CREATE LOGICAL NAME TABLE ENTRY.
;
;		R0 = SS$_ACCVIO - LOGICAL NAME STRING, LOGICAL NAME STRING
;			DESCRIPTOR, EQUIVALENCE NAME STRING, OR EQUIVALENCE
;			NAME STRING DESCRIPTOR CANNOT BE READ BY CALLING
;			ACCESS MODE.
;
;		R0 = SS$_INSFMEM - SUFFICIENT SYSTEM DYNAMIC MEMORY DOES NOT
;			EXIST TO ALLOCATE LOGICAL NAME TABLE ENTRY AND
;			IMPLICIT RESOURCE WAIT IS NOT ENABLED.
;
;		R0 = SS$_IVLOGNAM - ZERO OR GREATER THAN MAXIMUM LENGTH
;			LOGICAL OR EQUIVALENCE NAME STRING SPECIFIED.
;
;		R0 = SS$_IVLOGTAB - INVALID LOGICAL NAME TABLE NUMBER
;			SPECIFIED.
;
;		R0 = SS$_NOPRIV - PROCESS DOES NOT HAVE PRIVILEGE TO CREATE
;			ENTRY IN SPECIFIED LOGICAL NAME TABLE.
;
;	R0 LOW BIT SET INDICATES SUCCESSFUL COMPLETION.
;
;		R0 = SS$_NORMAL - NORMAL COMPLETION, NEW ENTRY ENTERED IN
;			SPECIFIED LOGICAL NAME TABLE.
;
;		R0 = SS$_SUPERSEDE - NORMAL COMPLETION, NEW ENTRY SUPERSEDED
;			PREVIOUS ENTRY IN SPECIFIED LOGICAL NAME TABLE.
;-
 
	.PSECT	Y$EXEPAGED
	.ENTRY	EXE$CRELOG,^M<R2,R3,R4,R5,R6,R7,R8>
	EXTZV	#0,#2,CRACMODE(AP),R0	;GET SPECIFIED ACCESS MODE
	BSBW	CHECKTABLE		;CHECK TABLE NUMBER AND PRIVILEGE
	TSTL	R0			;LOGICAL NAME SPECIFIED?
	BEQL	20$			;IF EQL NO
	MOVL	EQLNAM(AP),R7		;GET ADDRESS OF EQUIVALENCE NAME STRING DESCRIPTOR
	IFNORD	#8,(R7),30$		;CAN EQUIVALENCE NAME STRING DESCRIPTOR BE READ?
	MOVZWL	(R7),R6			;GET LENGTH OF EQUIVALENCE NAME STRING
	BEQL	20$			;IF EQL INVALID LOGICAL NAME STRING
	ASSUME  LOG$C_NAMLENGTH-1 LE 512 ;ONE PROBE OK?
	CMPW	R6,#LOG$C_NAMLENGTH-1	;LEGAL NAME STRING LENGTH?
	BGTRU	20$			;IF GTRU NO
	MOVL	4(R7),R7		;GET ADDRESS OF EQUIVALENCE NAME STRING
	IFNORD	R6,(R7),30$		;CAN EQUIVALENCE NAME STRING BE READ?
	PUSHR	#^M<R0,R1,R3>		;SAVE LOGICAL NAME PARAMETERS
	MOVAB	LOG$C_LENGTH+2+7(R0)[R6],R1 ;CALCULATE SIZE OF LOGICAL NAME ENTRY
	BICL	#7,R1			;TRUNCATE TO QUADWORD MULTIPLE
	PUSHAB	L^EXE$ALOPAGED		;ASSUME SYSTEM OF GROUP NAME
	BBC	#1,R3,10$		;IF CLR, SYSTEM OR GROUP TABLE
	MOVAB	L^EXE$ALLOCATE,(SP)	;SET ADDRESS OF ALLOCATION ROUTINE
	MOVAB	@#CTL$GQ_ALLOCREG,R3	;GET ADDRESS OF ALLOCATION LISTHEAD
10$:	SETIPL	S^#IPL$_ASTDEL		;RAISE TO AST DELIVERY LEVEL
	JSB	@(SP)+			;ALLOCATE LOGICAL NAME BLOCK
	BLBC	R0,40$			;IF LBC ALLOCATION FAILURE
 
;
; FILL OUT LOGICAL NAME BLOCK
;
 
	MOVW	R1,LOG$W_SIZE(R2)	;INSERT SIZE OF BLOCK ALLOCATED
	POPR	#^M<R0,R1,R3>		;RETRIEVE LOGICAL NAME STRING PARAMETERS
	MOVL	R2,R5			;SAVE ADDRESS OF LOGICAL NAME BLOCK
	PUSHR	#^M<R4,R5>		;SAVE REGISTERS
	ADDL	#LOG$B_TYPE,R2		;POINT TO BLOCK TYPE
	MOVB	#DYN$C_LOG,(R2)+	;SET DATA STRUCTURE TYPE
	MOVB	R3,(R2)+		;SET NAME TABLE NUMBER
	MOVW	PCB$L_UIC+2(R4),(R2)+	;INSERT CREATOR GROUP
	MOVZBW	R8,(R2)+		;INSERT CREATION ACCESS MODE
	CLRL	(R2)+			;CLEAR MAILBOX UCB ADDRESS
	MOVB	R0,(R2)+		;SET LENGTH OF LOGICAL NAME STRING
	MOVC	R0,(R1),(R2)		;INSERT LOGICAL NAME STRING
	MOVB	R6,(R3)+		;SET LENGTH OF EQUIVALENCE NAME STRING
	MOVC	R6,(R7),(R3)		;INSERT EQUIVALENCE NAME STRING
	POPR	#^M<R4,R5>		;RESTORE REGISTERS
	BSBW	LOG$INSLOGN		;INSERT LOGICAL NAME BLOCK IN TABLE
	RET				;
20$:	BRW	IVLOGN			;
30$:	BRW	ACCVIO			;
40$:	MOVZWL	#SS$_INSFMEM,R0		;SET INSUFFICIENT MEMORY
	RET				;
	.PAGE
	.SBTTL	DELETE LOGICAL NAME
;+
; EXE$DELLOG - DELETE LOGICAL NAME
;
; THIS SERVICE PROVIDES THE CAPABILITY TO DELETE A PREVIOUSLY CREATED LOG-
; ICAL NAME EQUIVALENCE FROM EITHER THE PROCESS, GROUP, OR SYSTEM LOGICAL
; NAME TABLE.
;
; INPUTS:
;
;	TBLFLG(AP) = LOGICAL NAME TABLE NUMBER.
;	LOGNAM(AP) = ADDRESS OF LOGICAL NAME STRING DESCRIPTOR. ZERO
;		IMPLIES ALL.
;	DLACMODE(AP) = ACCESS MODE OF LOGICAL NAME TO BE DELETED.
;
;	R4 = CURRENT PROCESS PCB ADDRESS.
;
; OUTPUTS:
;
;	R0 LOW BIT CLEAR INDICATES FAILURE TO DELETE LOGICAL NAME TABLE ENTRY.
;
;		R0 = SS$_ACCVIO - LOGICAL NAME STRING OR LOGICAL NAME STRING
;			DESCRIPTOR CANNOT BE READ BY CALLING ACCESS MODE.
;
;		R0 = SS$_IVLOGNAM - ZERO OR GREATER THAN MAXIMUM LENGTH
;			LOGICAL NAME STRING SPECIFIED.
;
;		R0 = SS$_IVLOGTAB - INVALID LOGICAL NAME TABLE NUMBER SPECIFIED.
;
;		R0 = SS$_NOLOGNAM - LOGICAL NAME DOES NOT EXIST IN SPECIFIED
;			LOGICAL NAME TABLE OR LOGICAL NAME EXISTS IN PROCESS
;			TABLE BUT WAS ENTERED FROM A MORE PRIVILEGED ACCESS
;			MODE.
;
;		R0 = SS$_NOPRIV - PROCESS DOES NOT HAVE PRIVILEGE TO DELETE
;			ENTRY FROM SPECIFIED LOGICAL NAME TABLE.
;
;	R0 LOW BIT SET INDICATES SUCCESSFUL COMPLETION.
;
;		R0 = SS$_NORMAL - NORMAL COMPLETION.
;-
 
	.ENTRY	EXE$DELLOG,^M<R2,R3,R4,R5,R6,R7,R8>
	EXTZV	#0,#2,DLACMODE(AP),R0	;GET SPECIFIED ACCESS MODE
	BSBW	CHECKTABLE		;CHECK TABLE NUMBER AND PRIVILEGES
	MOVQ	R0,R5			;SAVE LOGICAL NAME STRING PARAMETERS
	MOVL	R3,R7			;SAVE LOGICAL NAME TABLE NUMBER
	BSBW	LOG$LOCKW		;LOCK NAME TABLE FOR WRITE
	TSTL	R5			;DELETE ALL LOGICAL NAME TABLE ENTRIES?
	BNEQ	60$			;IF NEQ NO
;
; DELETE ALL ENTRIES
;
	MOVL	G^LOG$AL_LOGTBL[R7],R5	;GET POINTER TO ADDR OF NAME TABLE
	MOVL	(R5),R5			;TRANSFER TO NON-VOLATILE REGISTER
	MOVZWL	-4(R5),R1		;PICK UP SIZE OF TABLE(ALLOCATED)
	SUBL2	#12,R1			;GET RID OF HEADER
	BICB2	#15,R1			;ROUND DOWN
	ADDL3	R1,R5,R6		;SET ENDING ADDRESS
10$:	CMPL	R5,R6			;REACHED END OF TABLE YET?
	BGEQU	80$			;YEP, LEAVE
	MOVL	(R5)+,R1		;NO, GET NEXT BUCKET
20$:	BEQL	10$			;EMPTY, TRY AGAIN
	BBC	#1,R7,40$		;IF CLR, GROUP OR SYSTEM TABLE
	CMPB	R8,LOG$B_AMOD(R1)	;CAN ENTRY BE DELETED?
	BLEQ	50$			;YES, GO DO IT
30$:	MOVL	LOG$L_LTFL(R1),R1	;NO, GET NEXT ENTRY ON CHAIN
	BRB	20$			;TEST FOR END OF LINE

40$:	BLBC	R7,50$			;IF LBC SYSTEM NAME TABLE
	CMPW	PCB$W_GRP(R4),LOG$W_GROUP(R1) ;GROUP NUMBERS MATCH?
	BGTR	30$			;NO, TRY AGAIN
	BLSS	10$			;NO AND THEY NEVER WILL
50$:	PUSHL	LOG$L_LTFL(R1)		;SAVE THE NEXT POINTER
	BSBW	LOG$DELETE		;GET RID OF THE THING
	POPL	R1			;RECOVER THE POINTER
	BRB	20$			;TRY AGAIN
;
; DELETE SINGLE ENTRY
;
60$:	MOVQ	R5,R0			;RETRIEVE LOGICAL NAME STRING PARAMETERS
	MOVL	R7,R2			;TRANSFER NAME TABLE NUMBER
	MOVZBL	#PSL$C_USER,R3		;SET SEARCH ACCESS MODE
	BSBW	LOG$SEARCHLOG		;SEARCH FOR SPECIFIED LOGICAL NAME
	BLBC	R0,90$			;IF LBC SEARCH FAILURE
	BBC	#1,R7,70$		;IF CLR, GROUP OR SYSTEM TABLE
	MOVZWL	#SS$_NOLOGNAM,R0	;ASSUME LOGICAL NAME CANNOT BE DELETED
	CMPB	R8,LOG$B_AMOD(R1)	;CAN ENTRY BE DELETED?
	BGTR	90$			;IF GTR NO
70$:	BSBW	LOG$DELETE		;DELETE LOGICAL NAME ENTRY
80$:	MOVZWL	#SS$_NORMAL,R0		;SET NORMAL COMPLETION
90$:	PUSHL	R0			;SAVE FINAL STATUS
	MOVL	R7,R3			;SET NAME TABLE NUMBER
	BSBW	LOG$UNLOCK		;UNLOCK NAME TABLE
	POPR	#^M<R0>			;RESTORE FINAL STATUS
	RET				;
	.PAGE
	.SBTTL	CHECK TABLE NUMBER AND PRIVILEGES
;
; CHECK TABLE NUMBER AND PRIVILEGES
;
 
CHECKTABLE:				;CHECK TABLE NUMBER AND PRIVILEGES
	JSB	EXE$MAXACMODE		;MAXIMIZE ACCESS MODE
	MOVL	R0,R8			;SAVE MAXIMIZED ACCESS MODE
	MOVZBL	TBLFLG(AP),R3		;GET LOGICAL NAME TABLE NUMBER
	CMPL	#LOG$C_PROCESS,R3	;LEGAL TABLE NUMBER?
	BLSS	30$			;IF LSS NO
	BEQL	10$			;IF EQL PROCESS NAME TABLE
	ADDL3	#PRV$V_SYSNAM,R3,R2	;CALCULATE PRIVILEGE BIT NUMBER
	IFNPRIV	R2,40$			;CAN PROCESS CREATE LOGICAL NAME?
10$:	MOVL	LOGNAM(AP),R0		;GET ADDRESS OF LOGICAL NAME STRING DESCRIPTOR
	BEQL	20$			;IF EQL NO LOGICAL NAME STRING DESCRIPTOR
	IFNORD	#8,(R0),ACCVIO		;CAN LOGICAL NAME STRING DESCRIPTOR BE READ?
	MOVL	4(R0),R1		;GET ADDRESS OF LOGICAL NAME STRING
	MOVZWL	(R0),R0			;GET LENGTH OF LOGICAL NAME STRING
	BEQL	IVLOGN			;IF EQL INVALID LOGICAL NAME STRING
	ASSUME  LOG$C_NAMLENGTH-1 LE 512 ;ONE PROBE OK?
	CMPW	R0,#LOG$C_NAMLENGTH-1	;LEGAL NAME STRING LENGTH?
	BGTRU	IVLOGN			;IF GTRU NO
	IFNORD	R0,(R1),ACCVIO		;CAN LOGICAL NAME STRING BE READ?
20$:	RSB				;
30$:	MOVZWL	#SS$_IVLOGTAB,R0	;SET INVALID LOGICAL NAME TABLE NUMBER
	RET				;
40$:	MOVZWL	#SS$_NOPRIV,R0		;SET NO PRIVILEGE
	RET				;
IVLOGN:	MOVZWL	#SS$_IVLOGNAM,R0	;SET INVALID LOGICAL NAME
	RET				;
ACCVIO:	MOVZWL	#SS$_ACCVIO,R0		;SET ACCESS VIOLATION
	RET				;
	.PAGE
	.SBTTL	TRANSLATE LOGICAL NAME
;+
; EXE$TRNLOG - TRANSLATE LOGICAL NAME
;
; THIS SERVICE PROVIDES THE CAPABILITY TO TRANSLATE A LOGICAL NAME STRING
; TO A RESULTANT NAME STRING. THE TRANSLATION EMPLOYS THE PROCESS, GROUP,
; AND SYSTEM LOGICAL NAME TABLES HEIRARCHICALLY.
;
; INPUTS:
;
;	TRLOGNAM(AP) = ADDRESS OF LOGICAL NAME STRING DESCRIPTOR.
;	RSLLEN(AP) = ADDRESS TO STORE LENGTH OF RESULT STRING.
;	RSLBUF(AP) = ADDRESS OF RESULTANT STRING BUFFER DESCRIPTOR.
;	TABLE(AP) = ADDRESS TO STORE TRANSLATION TABLE NUMBER.
;	TRACMODE(AP) = ADDRESS TO STORE ASSIGNMENT ACCESS MODE.
;	DSBMSK(AP) = TABLE SEARCH DISABLE MASK.
;
;	R4 = CURRENT PROCESS PCB ADDRESS.
;
; OUTPUTS:
;
;	R0 LOW BIT CLEAR INDICATES FAILURE TO TRANSLATE LOGICAL NAME STRING.
;
;		R0 = SS$_ACCVIO - LOGICAL NAME STRING, LOGICAL NAME STRING
;			DESCRIPTOR, OR RESULT BUFFER DESCRIPTOR CANNOT BE
;			READ FROM CALLING ACCESS MODE, OR RESULT BUFFER,
;			RESULT LENGTH, TRANSLATION TABLE NUMBER, OR ASSIGN-
;			MENT ACCESS MODE CANNOT BE WRITTEN BY CALLING ACCESS
;			MODE.
;
;		R0 = SS$_RESULTOVF - ZERO LENGTH RESULT BUFFER OR EQUIVALENCE
;			STRING LARGER THAN RESULT BUFFER.
;
;	R0 LOW BIT SET INDICATES SUCCESSFUL COMPLETION.
;
;		R0 = SS$_NORMAL - NORMAL COMPLETION, EQUIVALENCE STRING IN
;			RESULT BUFFER.
;
;		R0 = SS$_NOTRAN - NORMAL COMPLETION, LOGICAL NAME STRING IN
;			RESULT BUFFER.
;-
 
	.ENTRY	EXE$TRNLOG,^M<R2,R3,R4,R5>
	MOVL	DSBMSK(AP),R5		;SET TABLE SEARCH DISABLE MASK
	MOVL	RSLBUF(AP),R3		;GET ADDRESS OF RESULT STRING BUFFER DESCRIPTOR
	IFNORD	#8,(R3),ACCVIO		;CAN RESULT STRING BUFFER DESCRIPTOR BE READ?
	MOVZWL	#SS$_RESULTOVF,R0	;ASSUME NO BUFFER SPECIFIED
	MOVZWL	(R3),R2			;GET SIZE OF RESULT STRING BUFFER
	BEQL	30$			;IF EQL NULL
	MOVL	4(R3),R3		;GET ADDRESS OF RESULT STRING BUFFER
	CMPW	R2,#512			;HOW BIG IS BUFFER?
	BLEQU	5$			;IF LEQU, OKAY AS IS
	MOVZWL	#512,R2			;USE SMALLER SIZE
5$:	IFNOWRT R2,(R3),ACCVIO		;CAN RESULTANT BUFFER BE WRITTEN?
	MOVL	TRLOGNAM(AP),R1		;GET ADDRESS OF LOGICAL NAME STRING
	IFNORD	#8,(R1),ACCVIO		;CAN LOGICAL NAME DESCRIPTOR BE READ?
	BSBW	LOG$TRNSLOGNAME		;TRANSLATE LOGICAL NAME
	BLBC	R0,30$			;IF LBC TRANSLATION FAILURE
	MOVL	RSLLEN(AP),R5		;GET ADDRESS TO STORE RESULT LENGTH
	BEQL	10$			;IF EQL NONE SPECIFIED
	IFNOWRT	#2,(R5),ACCVIO		;CAN LENGTH BE WRITTEN?
	MOVW	R1,(R5)			;STORE RESULT STRING LENGTH
10$:	MOVL	TABLE(AP),R5		;GET ADDRESS TO STORE TABLE NUMBER
	BEQL	20$			;IF EQL NONE SPECIFIED
	IFNOWRT	#1,(R5),ACCVIO		;CAN TABLE NUMBER BE WRITTEN?
	MOVB	R2,(R5)			;STORE TRANSLATION TABLE NUMBER
20$:	MOVL	TRACMODE(AP),R5		;GET ADDRESS TO STORE ASSIGNMENT ACCESS MODE
	BEQL	30$			;IF EQL NONE SPECIFIED
	IFNOWRT	#1,(R5),ACCVIO		;CAN ACCESS MODE BE WRITTEN?
	MOVB	R3,(R5)			;STORE ASSIGNMENT ACCESS MODE
30$:	RET				;
 
	.END
