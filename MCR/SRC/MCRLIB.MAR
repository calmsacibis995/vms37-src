;****************************************************************************
;
;
;                              M C R L I B
;
;	Version 'V03-000'
;
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;
; Modified by:
;
;	V002	MAJ0001		Melanie Johnson		18-Nov-81
;		Eliminate macros DEFCMD, ERRMSG, STATUS, ENABLE,
;		ERROR, SETBIT, and CLRBIT since they'll be in CLIMAC.MAR.
;
;	V001	TMH0001		Tim Halvorsen		01-Jun-1981
;		Add macros to reference new MDL structures
;---

; RUN DOWN IMAGE
;
 
	.MACRO	$RUNDWN_S MODE
		PUSHL	MODE
		CALLS	#1,@#SYS$RUNDWN
	.ENDM	$RUNDWN_S
 
;
; ALLOCATE BUFFER AND BUILD DESCRIPTOR
;
 
	.MACRO	ALLOCBUF
		BSBW	MCR$ALLOCBUF
	.ENDM	ALLOCBUF
 
;
; ALLOCATE SYMBOL TABLE ENTRY
;
 
	.MACRO	ALLOCSYM
		BSBW	MCR$ALLOCSYM
	.ENDM	ALLOCSYM
 
;
; ALLOCATE SYMBOL TABLE ENTRY AFTER DISABLING ASTS
;
 
	.MACRO	ALLOCSYMD
		BSBW	MCR$ALLOCSYMD
	.ENDM	ALLOCSYMD
 
;
; CHECK FOR PENDING CONTROL Y/C AST
;
 
	.MACRO	CHECK_AST
		BSBW	MCR$CHECK_AST
	.ENDM	CHECK_AST
;
; VERFIY A CHARACTER IS ACCEPTABLE ALPHA
;
	.MACRO	CHKALPHA
 
		BSBW	MCR$CHKALPHA
 
	.ENDM	CHKALPHA
;
; CONVERT A NUMBER TO BINARY WITH DEFAULT DECIMAL RADIX
;
	.MACRO	CNVNUMDEC
		BSBW	MCR$CNVNUMDEC
	.ENDM	CNVNUMDEC
 
;
; DISABLE CONTROL Y/C AST'S
;
 
	.MACRO	DISABLE
		BSBW	MCR$DISABLE
	.ENDM	DISABLE
 
 
;
; COMPRESS QUOTED STRING AND BUILD DESCRIPTOR
;
 
	.MACRO	COMPSTRING
		BSBW	MCR$COMPSTRING
	.ENDM	COMPSTRING
 
;
; DEALLOCATE SYMBOL TABLE ENTRY
;
 
	.MACRO	DEALLOCSYM
		BSBW	MCR$DEALLOCSYM
	.ENDM	DEALLOCSYM
 
;
; ENABLE CONTROL Y AST
;
 
	.MACRO	ENBCONTRLY
		BSBW	MCR$ENBCONTRLY
	.ENDM	ENBCONTRLY
 
 
;
; ERROR MESSAGE OUTPUT
;
 
	.MACRO	ERROUT
		BSBW	MCR$ERROUT
	.ENDM	ERROUT
 
;
; PROCESS STRING EQUATE
;
 
	.MACRO	EQUATE
		BSBW	MCR$EQUATE
	.ENDM	EQUATE
 
;
; EVALUATE ARITHMETIC ASSIGNMENT STATEMENT
;
 
	.MACRO	EVALUATE
		BSBW	MCR$EVALUATE
	.ENDM	EVALUATE
 
;
; PROCESS ARITHMETIC EXPRESSION
;
 
	.MACRO	EXPRESS
		BSBW	MCR$EXPRESS
	.ENDM	EXPRESS
 
;
; FLUSH COMMAND BUFFER
;
 
	.MACRO	FLUSH
		BSBW	MCR$FLUSH
	.ENDM	FLUSH
 
;
; FORCE NONBLANK CHARACTER
;
 
	.MACRO	FORNBLK
		BSBW	MCR$FORNBLK
	.ENDM	FORNBLK
 
;
; GENERATE RESULT PARSE DESCRIPTOR
;
 
	.MACRO	GENDESCR
		BSBW	MCR$GENDESCR
	.ENDM	GENDESCR
 
;
; GET CHARACTER
;
 
	.MACRO	GETCHAR
		BSBW	MCR$GETCHAR
	.ENDM	GETCHAR
 
;
; GET RESULT PARSE TABLE DESCRIPTOR VALUES
;
 
	.MACRO	GETDVAL
		BSBW	MCR$GETDVAL
	.ENDM	GETDVAL
 
;
; GET NONBLANK CHARACTER
;
 
	.MACRO	GETNBLK
		BSBW	MCR$GETNBLK
	.ENDM	GETNBLK
 
;
; GET TOKEN
;
 
	.MACRO	GETOKEN
		BSBW	MCR$GETOKEN
	.ENDM	GETOKEN
;
; GET EXPANDED SYMBOL
;
	.MACRO	GETXSYM
		BSBW	MCR$GETXSYM
	.ENDM	GETXSYM
 
;
; GET SPECIAL SYMBOL
;
	.MACRO	GETSSYM
		BSBW	MCR$GETSSYM
	.ENDM	GETSSYM
 
;
; GET BLANK TOKEN
;
 
	.MACRO	GTBTOKEN
		BSBW	MCR$GTBTOKEN
	.ENDM	GTBTOKEN
 
;
; LOCATE STRING BY INDEX NUMBER
;
 
	.MACRO	LOCATE
		BSBW	MCR$LOCATE
	.ENDM	LOCATE
 
;
; MOVE CHARACTER AND GET BLANK TOKEN
;
 
	.MACRO	MOVBTOKN
		BSBW	MCR$MOVBTOKN
	.ENDM	MOVBTOKN
 
;
; MOVE CHARACTER TO COMMAND BUFFER
;
 
	.MACRO	MOVCHAR
		BSBW	MCR$MOVCHAR
	.ENDM	MOVCHAR
 
;
; MOVE CHARACTER AND GET TOKEN
;
 
	.MACRO	MOVTOKN
		BSBW	MCR$MOVTOKN
	.ENDM	MOVTOKN
 
;
; MOVE TERMINATOR AND CHECK FOR CORRECT CHARACTER
;
 
	.MACRO	MOVTERM	CHAR
		BSBW	MCR$MOVTERM
		.BYTE	^A\CHAR\
	.ENDM
 
;
; MESSAGE OUTPUT
;
 
	.MACRO	MSGOUT
		BSBW	MCR$MSGOUT
	.ENDM	MSGOUT
 
;
; ON ERROR RESET
;
 
	.MACRO	ONRESET
		BSBW	MCR$ONRESET
	.ENDM	ONRESET
 
;
; POSITION FILE FOR GOTO
;
 
	.MACRO	POSITION
		BSBW	MCR$POSITION
	.ENDM	POSITION
 
;
; PROCESS FILE SPECIFICATION
;
 
	.MACRO	PROCFILE
		BSBW	MCR$PROCFILE
	.ENDM	PROCFILE
 
;
; PROCESS QUALIFIER SPECIFICATION
;
 
	.MACRO	PROCQUAL
		BSBW	MCR$PROCQUAL
	.ENDM	PROCQUAL
 
;
; PUT CHARACTER IN COMMAND BUFFER
;
 
	.MACRO	PUTCHAR
		BSBW	MCR$PUTCHAR
	.ENDM	PUTCHAR
 
;
; SEARCH FOR SYMBOL ENTRY
;
 
	.MACRO	SEARCH
		BSBW	MCR$SEARCH
	.ENDM	SEARCH
 
;
; SEARCH SPECIFIC TABLE FOR SYMBOL ENTRY
;
 
	.MACRO	SEARCHT
		BSBW	MCR$SEARCHT
	.ENDM	SEARCHT

;
; SEARCH SPECIFIC TABLE FOR SYMBOL ENTRY DEFINED AT CURRENT NESTING LEVEL
;

	.MACRO	SEARCHTLVL
		BSBW	MCR$SEARCHTLVL
	.ENDM	SEARCHTLVL
 
;
; PEEK AT NEXT CHARACTER IN INPUT BUFFER
;
 
	.MACRO	SETCHAR
		BSBW	MCR$SETCHAR
	.ENDM	SETCHAR
 
;
; SET NEXT NONBLANK CHARACTER
;
 
	.MACRO	SETNBLK
		BSBW	MCR$SETNBLK
	.ENDM	SETNBLK
 
;
; MOVE CHARACTER TO COMMAND BUFFER THEN SET NON BLANK
;
 
	.MACRO	MOVNCHR
		BSBW	MCR$MOVNCHR
	.ENDM	MOVNCHR
 
;
; SET COMPLETION STATUS
;
 
	.MACRO	SET_STATUS
		BSBW	MCR$SET_STATUS
	.ENDM	SET_STATUS
 
;
; SHUT DOWN IMAGE
;
 
	.MACRO	SHUTDOWN
		BSBW	MCR$SHUTDOWN
	.ENDM	SHUTDOWN
 
;
; STACK INDIRECT FILE SPECIFICATION
;
 
	.MACRO	STACKIND
		BSBW	MCR$STACKIND
	.ENDM	STACKIND
 
 
;
; TEST FOR SIGNIFICANT BLANK
;
 
	.MACRO	TESTBLANK
		BSBW	MCR$TESTBLANK
	.ENDM
 
;
; UNSTACK INDIRECT FILE SPECIFICATION
;
 
	.MACRO	UNSTACK
		BSBW	MCR$UNSTACK
	.ENDM	UNSTACK
 
;
; THE FOLLOWING MACRO DEFINES THE BLOCKS FOR THE VERB AND COMMAND DATABASE
;
; DEFINE COMMAND BLOCK OFFSETS
;
 
	.MACRO	DEFCMDBLK
	CMDDEF				; COMMAND DEFINITIONS
	.MACRO	DEFCMDBLK
	.ENDM	DEFCMDBLK
	.ENDM	DEFCMDBLK
 

 
;
; DEFINE COMMAND WORK AREA OFFSETS
;
 
	.MACRO	DEFCMDWRK
 
	PRCDEF				;DEFINE PROCESS STORAGE
	MCRDEF				;DEFINE MCR FLAGS
	WRKDEF				;DEFINE COMMAND PARSING STORAGE

DATETIMESIZ	= WRK_C_DATETIME	; Size of <DATE> or <TIME> buffer
CMDBUFSIZ	= WRK_C_CMDBUFSIZ	;COMMAND BUFFER SIZE IN BYTES
INPBUFSIZ	= WRK_C_INPBUFSIZ	;INPUT BUFFER SIZE IN BYTES
MSGBUFSIZ	= WRK_C_MSGBUFSIZ	;OUTPUT MESSAGE BUFFER SIZE
RSLBUFSIZ	= WRK_C_RSLBUFSIZ	;RESULT PARSE BUFFER SIZE

WRK_AB_BUFFER	= WRK_G_BUFFER
WRK_AG_RESULT	= WRK_G_RESULT

	.ENDM	DEFCMDWRK
 
;
; DEFINE SYMBOL TABLE STRUCTURES
;

	.MACRO	DEFSYMTBL
	SYMDEF				;SYMBOL TABLE DEFINITIONS
	.ENDM

;
; DEFINE ERROR/STATUS VALUES
;
 
	.MACRO	DEFERRCOD
	$CLIMSGDEF
.IIF NDF CLI$_NORMAL,	CLI$_NORMAL = <3@16+1>
	.MACRO	$CLIMSGDEF
	.ENDM	$CLIMSGDEF
	.MACRO	DEFERRCOD
	.ENDM	DEFERRCOD
	.ENDM	DEFERRCOD
 
;
; DEFINE RESULT PARSE DESCRIPTOR FORMAT
;
 
	.MACRO	DEFPTRDSC
	PTRDEF				; TOKEN DESCRIPTOR DEFINITIONS
	.ENDM	DEFPTRDSC
 
;
; DEFINE MCR RESULT PARSE WORK AREA OFFSETS
;
	.MACRO	DEFMCRRPW
 
	RPWDEF				; RESULT PARSE WORK AREA
RPW_AG_BITS	= RPW_G_BITS
RPW_AG_PRMLIM	= RPW_G_PRMLIM

	PLMDEF				; PARAMETER LIST MARKER DEFINITIONS

	.ENDM	DEFMCRRPW

;
; DEFINE THE OUTPUT RESULT PARSE VALUE SPECIAL CASES
;
; THIS LIST INDICATES THE MANNER TO DETERMIN THE OUTPUT FOR THE
; COMMAND WHEN THE OUTPUT IS NOT DEFINED BY A COMMAND QUALIFIER
;
 
	.MACRO	DEFOPIMCR		; OUTPUT PARSE INDICATORS
	$EQULST	OPI_K_,,-1,-1,<-	; VALUES START AT MINUS 1 AND GO BACKWARDS
		MCRUTLIST,-		; MCR UTILITY FILE LIST(IE:A,B,C=...)
		>
	.ENDM	DEFOPIMCR


	.MACRO	SETINTR	VAL
 
	MOVL	#<CLI$_'VAL!1@31>,R0
 
	.ENDM	SETINTR
 
;
; MACRO TO GET A PARAMETER
;
	.MACRO	GETPARM
		BSBW	MCR$GETPARM
	.ENDM	GETPARM
 
;
; MACRO TO LOCATE A PARAMETER QUALIFIER DESCRIPTOR
;
	.MACRO	GETPARMQUAL
		BSBW	MCR$GETPARMQUAL
	.ENDM	GETPARMQUAL
 
;
; MACRO TO EXTRACT A RESULT DESCRIPTOR SIZE,ADDRESS, AND TYPE
;
	.MACRO	EXTRSLDESC
		BSBW	MCR$EXTRSLDESC
	.ENDM	EXTRSLDESC
 
;
; MACRO TO EXTRACT THE NEXT DESCRIPTOR
;
	.MACRO	EXTNXTDESC
		BSBW	MCR$EXTNXTDESC
	.ENDM	EXTNXTDESC
 
;
; MACRO TO LOCATE A COMMAND QUALIFIER IN THE COMMAND PARSE BUFFER
;
	.MACRO	LOCCMDQUAL
		BSBW	MCR$LOCCMDQUAL
	.ENDM	LOCCMDQUAL
 
;
; MACRO TO PROCESS COMMAND QUALIFIERS FOR THE CURRENT PARAMETER
;
	.MACRO	PROCMDQUAL
		BSBW	MCR$PROCMDQUAL
	.ENDM	PROCMDQUAL
 
;
; MACRO TO GET A DESCRIPTOR FOR A COMMAND QUALIFIER
;
	.MACRO	GETQUALDESC
		BSBW	MCR$GETQUALDESC
	.ENDM	GETQUALDESC
 
;
; MACRO TO HANDLE A QUALIFIER FOUND IN THE COMMAND
;
	.MACRO	HANDLQUAL
		BSBW	MCR$HANDLQUAL
	.ENDM	HANDLQUAL
 
;
; MACRO TO SET THE  ADDRESS OF A RESULT DESCRIPTOR WORD
;
	.MACRO	SETDESCADR
		BSBW	MCR$SETDESCADR
	.ENDM	SETDESCADR
 
;
; MACRO TO GET A  DESCRIPTOR AND EXTRACT BASE,SIZE, AND TYPE
;
	.MACRO	GETEXTDESC
		BSBW	MCR$GETEXTDESC
	.ENDM	GETEXTDESC
 
;
; THE NEXT SET OF MACROS WERE TAKEN FROM [DCL.SRC]CLIMAC.MAR (AND HAVE BEEN
; MODIFIED).
;

;
; MACRO TO LOAD AN ERROR STATUS INTO R0
;
	.MACRO	LODSTAT	VAL,PLC=R0
	.IF IDN	<VAL><NORMAL>
	MOVL	#1,PLC
	.IFF
	_$$_ = <<CLI$_'VAL & ^X 7FFF>/4>
	.IF LT	<_$$_ - 64>
	MNEGL	#_$$_,PLC
	.IFF
	.IF LT <_$$_-128>
	CVTBL	#-_$$_,PLC
	.IFF
	CVTWL	#-_$$_,PLC
	.ENDC
	.ENDC
	.ENDC
	.ENDM	LODSTAT
 
;
; ERROR MESSAGE GENERATION
;
 
	.MACRO	ERRMSG ERROR
		.IF NB	ERROR
		LODSTAT	ERROR
		.ENDC
		BSBW	MCR$ERRORMSG
	.ENDM	ERRMSG
 
;
; SET COMPLETION STATUS VALUE
;
 
	.MACRO	STATUS ERROR,PLC
		LODSTAT	ERROR,PLC
	.ENDM	STATUS
 
;
; SPECIAL MACROS USED BY RESULT PARSE ROUTINES
;
 
	.MACRO	SETSTAT	VAL
	.IF IDN	<VAL><SUCCESS>
	MOVL	#1,R0
	.IFF
	.IF IDN	<VAL><FAIL>
	CLRL	R0
	.IFF
	MOVZWL	#CLI$_'VAL&^XFFFF,R0
	.ENDC
	.ENDC
	.ENDM	SETSTAT
 
;
; ENABLE CONTROL Y/C AST'S
;
 
	.MACRO	ENABLE
		JSB	@(SP)+
	.ENDM	ENABLE


 
;
; MACRO TO SET OR CLEAR A BIT BY BIT NUMBER
;
;CALL:
;	SETBIT	BITNUM,FLAGWORD
; OR:
;	CLRBIT	BITNUM,FLAGWORD
;
; WHERE:
;	BITNUM IS ANY VALID SOURCE OPERAND SECIFYING THE BIT
;		OFFSET FROM THE FLAG BASE TO SET/CLEAR
;
;	FLAGWORD IS ANY VALID DESTINATION OPERAND
;
	.MACRO	SETBIT	VAL,FLAG
	.NTYPE	_$$_	VAL
	.IF EQ	<_$$_-^X0EF>
	.IF NDF	VAL
	BBSS	S^#VAL,FLAG,.+1
	.IFF
	.IF LT <VAL-8>
	BISB	#<1@VAL>,FLAG
	.IFF
	BBSS	#VAL,FLAG,.+1
	.ENDC
	.ENDC
	.IFF
	BBSS	VAL,FLAG,.+1
	.ENDC
	.ENDM	SETBIT
;
	.MACRO	CLRBIT	VAL,FLAG
	.NTYPE	_$$_	VAL
	.IF EQ	<_$$_-^X0EF>
	.IF NDF	VAL
	BBCC	S^#VAL,FLAG,.+1
	.IFF
	.IF LT <VAL-8>
	BICB	#<1@VAL>,FLAG
	.IFF
	BBCC	#VAL,FLAG,.+1
	.ENDC
	.ENDC
	.IFF
	BBCC	VAL,FLAG,.+1
	.ENDC
	.ENDM	CLRBIT

 
;
; DEFCMD	VERB,QUAL,MINPRM,MAXPRM,DEFIMG,FLAGS,OUTPRS,PRMPTS,QUALST
;
;		WHERE:
;
;			VERB - COMMAND VERB
;			QUAL - 'QUALIFIERS ALLOWED' FLAG - 'NO'=NO; 'YES'=YES
;			MINPRM - MINIMUM NUMBER OF REQUIRED PARAMETERS
;			MAXPRM - MAXIMUM NUMBER OF POSSIBLE PARAMETERS
;			DEFIMG - DEFAULT IMAGE TO ACTIVATE
;			FLAGS - COMMAND FLAGS ENCLOSED IN BRACKETS
;			OUTPRS - LIST OF 1-4 CASE VALUES FOR OUTPUT RESULT PARSE
;			PRMPTS - LIST OF PROMPTS AND PROMPT FLAGS
;				ENCLOSED IN BRACKETS
;			QUALST - THE NAME OF A VERB THAT THIS COMMAND SHARES A
;				QUALIFIER LIST WITH.
;

	.MACRO	DEFCMD	VERB,QUAL,MINPRM,MAXPRM,DEFIMG,FLAGS,-
			OUTPRS,PRMPTS,QUALST,?CMD,?CMDEND,?PRO,?QUA,?OUTLST,?L1

	.PSECT	TAB$VERBTBL,BYTE,RD,NOWRT

	.IIF	B	VERB,	.ERROR	;NO VERB;
	.NCHR	$$$,VERB		;GET LENGTH OF VERB
	.IIF	GT	$$$-4,	.ERROR	;VERB TOO LONG;
$XX$=128
	.IRPC	$YY$,<VERB>
	.BYTE	^A/$YY$/!$XX$
$XX$=0
	.ENDM
	.REPT	4-$$$			;PAD VERB WITH BLANKS
	.ASCII	\ \			;BLANK PADDING
	.ENDR

	.PSECT	TAB$COMDPTR,BYTE,RD,NOWRT

	.LONG	VERB_G_'VERB'-.-4	;OFFSET TO COMMAND DESCRIPTOR BLOCK
 
	.PSECT	TAB$CMDATA,BYTE,RD,NOWRT

	.IIF	B	MINPRM,	.ERROR	;NO MIN PARM TEXT;
	.IIF	B	MAXPRM,	.ERROR	;NO MAX PARM TEXT;

VERB_G_'VERB:				;NEEDED TO REFERENCE FROM ANOTHER PSECT
CMD:
	.BYTE	CMDEND-CMD		;LENGTH OF STRUCTURE

	.IF DF	CLI$K_VERB_'VERB	;IF THIS COMMAND HAS GENERIC VERB TYPE
	.BYTE	CLI$K_VERB_'VERB	;VERB GENERIC TYPE
	.IFF				;IF NO GENERIC TYPE ASSIGNED
	.BYTE	0			;ZERO IS NONE GENERIC COMMAND
	.ENDC

	.BYTE	MAXPRM*16+MINPRM	;PARAMETER COUNTS

$$$=0
	.IRP	$ARG$,<FLAGS>
	$$$ = $$$ ! CMD_M_'$ARG$	;'OR' IN FLAG
	.ENDR
	.BYTE	$$$			;GENERATE FLAG WORD
 
	.IF NB	<DEFIMG>
	.WORD	-IMG_K_'DEFIMG		;DEFAULT IMAGE NAME INDEX NUMBER
	.IFF
	.WORD	0			;NO DEFAULT IMAGE NAME
	.ENDC

	.IF	IDN	QUAL,<NO>	;CHECK IF QUAL DEFINED FOR COMMAND
	.WORD	0			;NO QUALIFIERS ON THIS COMMAND
	.IFF
	.IF	IDN	QUAL,<YES>	;CHECK IF QUAL DEFINED FOR COMMAND
	.IF	NB	<QUALST>	;IF EXTERNAL QUALIFIER LIST SPECIFIED
	.WORD	MCR$G_'QUALST'QUALS-CMD	;SET OFFSET TO THAT LIST
	.IFF
	.WORD	QUA-CMD			;OFFSET TO QUALIFIER DESCRIPTOR BLOCK
	.ENDC
	.IFF
	.ERROR				;QUALIFIER NOT SPECIFIED AS YES OR NO;
	.ENDC
	.ENDC

	.IF NB	<PRMPTS>
	.IF NE	MAXPRM
	.WORD	PRO-CMD			;OFFSET TO PROMPT DESCRIPTORS
	.IFF
	.WORD	0
	.ENDC
	.IFF
	.WORD	0
	.ENDC
 
	.IF NB	<OUTPRS>
	.WORD	OUTLST-CMD		;OFFSET TO OUTPUT LIST
	.IFF
	.WORD	0
	.ENDC

	.WORD	0			;NO MUTUAL EXCLUSION SET
	.WORD	0			;NO IMPLICATION SET

	.IF NB	<OUTPRS>		; GENERATE OUTPUT LIST IF NEEDED
OUTLST:	.BYTE	L1-.-1
	.IRP	$ARG$,<OUTPRS>
	.BYTE	$ARG$
	.ENDR
L1:
	.ENDC	
CMDEND:

	.IF NB	<PRMPTS>		; GENERATE PARAMETER BLOCKS IF NEEDED
	.IF NE	<MAXPRM>
PRO:	BLDPROMPTS MAXPRM,<PRMPTS>
	.ENDC
	.ENDC
 
	.IF IDN	<QUAL>,<YES>		; GENERATE QUALIFIER BLOCKS IF NEEDED
	.IF B	<QUALST>
QUA:
	.LIST
	$MCRDEFQUAL'VERB
	.NLIST
	.ENDC
	.ENDC

	.ENDM	DEFCMD
