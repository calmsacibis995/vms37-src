	.TITLE	MCRINDCMD - MCR INDIRECT COMMANDS
	.IDENT	'V03-002'
 
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
; W. H. BROWN 17-NOV-1977
;
; MCR INDIRECT COMMANDS
;
; MODIFIED BY:
;	
;	V3.0002	MAJ0008		Melanie Johnson	08-Apr-1982
;		Fix .OPENA #n filespec (using a channel number) which was
;		broken by MAJ0007.  Set R8=0 before calling PROCFILE to
;		indicate not device only.
;
;	V3.0001	MAJ0007		Melanie Johnson	15-Mar-1982
;		Allow .OPENA to either open an existing file for append
;		or create a new file if the file specified does not exist.
;		This parallels the functionality of the RSX .OPENA.
;
;	V006	MAJ0006		Melanie Johnson	04-Aug-1981
;		Keep info. for <FILSPC> and <FILERR> in the PRC
;		data structure rather than the WRK data structure so
;		they may be examined after a .TESTFILE and not re-intialized.
;		Cause .TESTFILE to set <FILERR>.  Add a version number of 0
;		for files found not to exist by .TESTFILE.
;
;	V005	TMH0005		Tim Halvorsen	24-Nov-1980
;		Make .OPEN supersede an existing file if an explicit
;		version number is specified to make compatible with
;		RSX11-M.  SPR #33724
;
;	V02-004	RN0031		R. Newland	 9-Apr-1980
;		Correct bug in .TESTFILE which left file accessed, and
;		remove leading underscore from the file specification
;		assigned to special symbol <FILSPC>.
;
;	V01.03	RN0012		R. Newland	29-Nov-1979
;		Add .OPENR, .PARSE, .READ and .TESTFILE indirect commands
;		and setting of <FILERR> and <FILSPC> symbols.
;
;	V01.01	RN0001		R. Newland	22-Feb-1979
;		New indirect commands for RSX-11M V3.2 compatibility
;
;	V01.02	RN0005		R. Newland	17-Jun-1979
;		Do not process indirect commands during forward scan
;		when between .ENABLE DATA and .DISABLE DATA
;		Process .ONERR label as ON WARNING THEN GOTO label
;
; MACRO LIBRARY CALLS
;
 
	DEFCMDWRK			; DEFINE WORK AREA OFFSETS
	DEFERRCOD			; DEFINE ERROR/STATUS CODES
	$RABDEF				; RECORD ACCESS BLOCK DEFINTIONS
	$FABDEF				; FILE ACCESS BLOCK DEFINTIONS
	$RMSDEF				; RMS definitions
	$NAMDEF				; NAM block definitions
	DEFSYMTBL			; Define symbol entry offsets
	BLKDEF				; Define block frame offsets
	MCR$K_TIMEFN = 31		; SAME EVENT FLAG AS ^Y ENABLE

;
; Local definitions
;
;
	WRK_L_STRSIZ	= WRK_L_IMAGE	; Parse string size
	WRK_L_STRADR	= WRK_L_QUABLK	; Parse string address
	WRK_L_CSTSIZ	= WRK_L_MINPARM	; Control string size
	WRK_L_CSTADR	= WRK_L_MAXPARM	; Control string address
	WRK_L_STRCNT	= WRK_L_PARMCNT	; Substring count
 

;
; LOCAL MACRO TO DEFINE A COMMAND
;
 
	.MACRO	INDCOMD	NAME,SUFFIX
	.SAVE
	.PSECT	MCR$ZDATA
	.ASCIC	\NAME\
	.RESTORE
	.WORD	<MCR$'NAME'SUFFIX-INDISP>
	.ENDM
 
;
; MACRO TO END THE INDIRECT COMMAND LIST
;
 
	.MACRO	ENDCOMD
	.SAVE
	.PSECT	MCR$ZDATA
	.BYTE	0
	.RESTORE
	.ENDM
 
;
; LOCAL DATA
;
 
	.PSECT	MCR$ZDATA	BYTE,RD,NOWRT
 
MCR$INDLST:				; ORIGIN OF INDIRECT COMMMAND LIST
 
	.PSECT	MCR$ZCODE	BYTE,RD,NOWRT
 
DATFIL:	.ASCII	/.DAT/			; DEFAULT TYPE FOR DATA FILES
 
ENABLS:	.ASCIC	\DATA\			; NOTE: THE ORDER OF THIS TABLE
	.ASCIC	\DOLL\			;	STARTING WITH DOLLARS
	.ASCIC	\ESCAPE\		; 	AND THE ORDER OF THE
	.ASCIC	\GLOBAL\		;	ASSOCIATED BITS
	.ASCIC	\LOWER\			;	IN THE CLIFLAG WORD
	.ASCIC	\SUBS\			;	MUST MATCH
	.ASCIC	\QUIET\
	.BYTE	0			; TERMINATE THE LIST
;
; Legal keywords of .ERASE command
;
ERASE:	.ASCIC	/GLOBAL/
	.ASCIC	/LOCAL/
	.BYTE	0			; End of table
;
; Indirect command processed during forward scan
;
FWDSCAN:.ASCIC	/BEGIN/
	.ASCIC	/END/
	.ASCIC	/ENAB/
	.BYTE	0			; End of table
	.PAGE
	.SBTTL	INDIRECT COMMAND EXECUTION
;+
; MCR$INDIRECT - INDIRECT COMMAND EXECUTION
;
; THIS ROUTINE IS CALLED AS AN INTERNAL COMMAND TO EXECUTE ANY
; COMMAND STARTING WITH A ".".
;
; INPUTS:
;
;	R9 = ADDRESS OF NEXT BYTE IN COMMAND BUFFER.
;	R10 = RESULT PARSE DESCRIPTOR TABLE POINTER.
;	R11 = BASE ADDRESS OF PROCESS WORK AREA.
;	FP = BASE ADDRESS OF COMMAND WORK AREA.
;
; OUTPUTS:
;
;	THE COMMAND IS DECODED AND IF RECOGNIZED EXECUTED BY RETURNING
;	CONTROL TO THE COMMAND MODULE.  IF THE COMMAND IS IN ERROR
;	OR DOES NOT GET EXECUTED, THEN CONTROL IS TRANSFERED TO THE
;	COMMAND INITIATOR.
;
;
;
;
;		R0 = MCR$_NORMAL - NORMAL COMPLETION.
;-
 
	.PSECT	MCR$ZCODE,BYTE,RD,NOWRT
	.ENABL	LSB
 
MCR$INDCMD::				; INDIRECT COMMAND
	MOVB	#8,WRK_B_CURADX(FP)	; RESET TO DEFAULT RADIX
	MOVAB	W^MCR$INDLST,R5		; SET START OF COMMAND LIST
	BSBW	MCR$SRCTBL		; SEARCH FOR MATCH
	BLBC	R0,90$			; BR IF NO MATCH
	CASEW	R4,#1,S^#<<<INDEND-INDISP>/2>-1> ; DISPATCH ON COMMAND TYPE
INDISP:	INDCOMD	IF			; IF COMMAND
	INDCOMD	SETT			; SET TRUE
	INDCOMD	SETF			; SET FALSE
	INDCOMD	SETS			; SET STRING
	INDCOMD	SETN			; SET NUMERIC VALUE
	INDCOMD	ASKS			; ASK FOR A STRING
	INDCOMD	ASKN			; ASK FOR NUMERIC VALUE
	INDCOMD	ASK			; ASK FOR A LOGICAL
	INDCOMD	INC			; ADD 1 TO VALUE
	INDCOMD	DEC			; SUBTRACT 1 FROM VALUE
	INDCOMD	OPENR			; Open file for reading
	INDCOMD	OPENA			; Open and append to a data file
	INDCOMD	OPEN			; OPEN A DATA FILE
	INDCOMD	DATA			; ADD DATA TO A FILE
	INDCOMD	CLOSE			; CLOSE THE FILE
	INDCOMD	TESTFILE		; Test existance of file
	INDCOMD	TEST			; TEST A STRING EXPRESSION
	INDCOMD	GOTO			; GOTO LABEL
	INDCOMD	GOSUB			; GOTO SUBROUTINE
	INDCOMD	RETURN			; RETURN FROM SUBROUTINE
	INDCOMD	CHAIN			; CHAIN TO NEXT FILE
	INDCOMD	DISA			; DISABLE OPTION
	INDCOMD	ENAB			; ENABLE AN OPTION
	INDCOMD	DELAY			; DELAY EXECUTION
	INDCOMD	PAUSE			; PAUSE INDIRECT COMMAND PROCESS
	INDCOMD	ERASE			; Erase local and global symbols
	INDCOMD	EXIT,IND		; Exit from indirect command file
	INDCOMD	STOP,IND		; Stop indirect command file processing
	INDCOMD	BEGIN			; Start block
	INDCOMD	END			; End block
	INDCOMD	ONERR			; Set on error label
	INDCOMD	PARSE			; Parse command file parameters
	INDCOMD	READ			; Read next record from file
INDEND:	ENDCOMD				; END OF LIST
90$:	STATUS	IVVERB			; ILLEGAL VERB
	RSB				;
 
	.DSABL	LSB
	.PAGE
	.SBTTL	ENABLE/DISABLE OPTION
;+
; MCR$ENAB - ENABLE  AN OPTION
; MCR$DISA - DISABLE AN OPTION
;
; THIS ROUTINE IS ENTERED WHEN A ".DIABLE" OF .ENABLE" DIRECTIVE
; IS ENCOUNTERD. THE SPECIFIED OPTION IS SET AS INDICATED.
;-
	.ENABL	LSB
MCR$ENAB::				; ENABLE THE OPTION
	PUSHL	#1			; PUSH A TRUE FOR ENABLE
	BRB	10$			;
MCR$DISA::				; DISABLE OPTION
	PUSHL	#0			; PUSH FALSE FOR DISABLE
10$:	MOVTOKN				; COPY TERMINATOR AND GET TOKEN
	MOVAB	ENABLS,R5		; SET TABLE ADDRESS
	BSBB	MCR$SRCTBL		; SEARCH FOR OPTION
	BLBC	R0,60$			; BR IF NO MATCH
	DECL	R4			; WAS ENABLE = DATA
	BLBC	(SP),15$		; Branch if .DISABLE
	BEQL	50$			; BR IF YES
15$:
	ADDL	#MCR_V_DOLLARS-1,R4	; FIND BIT NUMBER
	BBSS	R4,PRC_W_CLIFLAG(R11),20$ ; SET THE OPTION
20$:	BLBS	(SP)+,40$		; BR IF OPTION IS ENABLE
	BBCC	R4,PRC_W_CLIFLAG(R11),40$ ; CLEAR THE OPTION
40$:	STATUS	NORMAL
	RSB
 
;
; HANDLE ".ENABLE DATA"
;
 
50$:	POPR	#^M<R0>			; GET FLAG
	BRW	MCR$ENABDATA		; HANDLE ENABLE DATA
;
; UNRECOGNIZED OPTION
;
60$:	TSTL	(SP)+			; CLEAR FLAG FROM THE STACK
	STATUS	INVKEY			; SET ERROR
	RSB				;
 
	.DSABL	LSB
	.PAGE
	.SBTTL	SEARCH TABLE
;+
; MCR$SCRTBL - SEARCH TABLE
;
; THIS ROUTINE IS CALLED TO SEARCH A TABLE FOR A MATCH OF A KEYWORD.
; ONLY THE LENGTH OF THE ENTRY IN THE TABLE IS CHECKED. THE KEY
; ENTERED MUST BE AS LONG AS THAT ENTERED BUT MAY BE LONGER.
; TABLE MUST BE ORDERED WITH TOKENS AFTER ANY OTHER TOKEN OF
; WHICH IT IS A SUBSTRING.
;
; INPUTS:
;
;	R1 = THE LENGTH OF THE KEYWORD TO MATCH
;	R2 = STARTING ADDRESS
;	R5 = THE TABLE ADDRESS TO SEARCH
;
; OUTPUTS:
;
;	R4 IS THE INDEX INTO THE TABLE IF MATCH FOUND
;
;	R0 = ZERO IF NO MATCH
;	R0 = TRUE IF MATCH
;
;	REGISTER R3 - R5 ARE MODIFIED
;-
 
MCR$SRCTBL::				;
	CLRL	R4			; ZERO CASE INDEX
	PUSHR	#^M<R1,R2>		; PUSH DESCRIPTOR FOR TOKEN TO MATCH
10$:	INCL	R4			; COUNT UP COMMAND CASE INDEX
	MOVAB	(R5),R1			; COPY ADDRESS OF NEXT KEYWORK
	MOVZBL	(R1)+,R0		; FIND MAXIMUM LENGTH OF COMMAND NAME
	BEQL	30$			; BR IF NO COMMAND MATCH
	ADDL3	R0,R1,R5		; SET ADDRESS OF NEXT KEYWORD
	CMPL	R0,(SP)			; IS NAME VERB SHORTER THAN USER ENTERED
	BGTR	10$			; BR IF NO MATCH POSSIBLE
20$:	CMPC	R0,(R1),@4(SP)		; CHECK FOR COMMAND MATCH
	BNEQ	10$			; BR IF NO MATCH
	INCL	R0			; SET NORMAL STATUS
30$:	POPR	#^M<R1,R2>		; RESTORE DESCRIPTOR FOR TOKEN
RSB0:	RSB				;
	.PAGE
	.SBTTL	DELAY EXECUTION FOR SOME TIME
;+
; MCR$DELAY - DELAY EXECUTION FOR SOME TIME
;
; THIS ROUTINE IS CALLED TO PROCESS THE DELAY MCR INDIRECT COMMAND.
; THE COMMAND INTERPRETER IS SUSPENDED FOR THAT AMOUNT OF TIME.
;
; INPUTS:
;
;	R9 = NEXT CHARACTER IN THE PARSE BUFFER
;	R10 = RESULT PARSE DESCRIPTOR BUFFER POINTER
;	R11 = PROCESS IMPURE AREA
;	FP = COMMAND IMPURE AREA
;
; OUTPUTS:
;
;	THE DELAY IS EFFECTED.
;-
	.ENABL	LSB
10$:	.ASCII	\MST\			; MINUTES, SECONDS, TICKS
20$:	.LONG	-10000000/10		; 100 NANOSECONDS PER TICK
	.LONG	-10000000*1		; 100 NANOSECONDS PER SECOND
	.LONG	-10000000*60		; 100 NANOSECONDS PER MINUTE
MCR$DELAY:
	GETOKEN				; GET UNITS AND UNIT INDICATOR
	BEQL	40$			; BR IF NONE
	TSTB	R0			; CHECK FOR END OF LINE
	BNEQ	40$			; BR IF NOT END OF LINE
	DECL	R1			; SUBTRACT 1 FROM LENGTH FOR UNITS
	MOVQ	R1,R2			; SET STRING DESCRIPTOR FOR CONVERT
	CNVNUMDEC			; CONVERT NUMBER TO DECIMAL
	BNEQ	40$			; BR IF ERROR CONVERTING NUMBER
	MOVL	R1,R5			; SAVE UNIT COUNT
	LOCC	(R3),#3,10$		; LOCATE THE UNIT
	BEQL	40$			; BR IF SYNTAX ERROR
	EMUL	20$-4[R0],R5,#0,-(SP)	; FIND DELAY IN 100 NANOSECOND UNITS
	MOVL	SP,R0			; SAVE ADDRESS OF TIME VALUE
	DISABLE				; NO CONTROL Y INTERRUPTIONS NOW
	$SETIMR_S #MCR$K_TIMEFN,(R0)	; START A TIMER
	$WAITFR_S #MCR$K_TIMEFN		; AND WAIT FOR IT TO RUN OUT
	ADDL	#8*2,SP			; CLEAR STACK OF TIME AND DISABLE
	RSB				;
40$:	STATUS	EXPSYN			;
	RSB				;
	.DSABL	LSB
	.PAGE
	.SBTTL	PAUSE EXECUTION FOR SOME TIME
;+
; MCR$PAUSE - PAUSE EXECUTION FOR SOME TIME
;
; THIS ROUTINE IS CALLED TO PROCESS THE PAUSE MCR INDIRECT COMMAND.
; THE COMMAND INTERPRETERIS PLACED INTO A PSEUDO ^Y STATE UNTIL
; A CONTINUE COMMAND IS EXECUTED.
;
; INPUTS:
;
;	R9 = NEXT CHARACTER IN THE PARSE BUFFER
;	R10 = RESULT PARSE DESCRIPTOR BUFFER POINTER
;	R11 = PROCESS IMPURE AREA
;	FP = COMMAND IMPURE AREA
;
; OUTPUTS:
;
;	THE PAUSE IS EFFECTED.
;-
MCR$PAUSE:
	BISW	#<PRC_M_PAUSE!PRC_M_YLEVEL>,- ; IDICATE PAUSE AND PROCESS
		PRC_W_FLAGS(R11)	; AT ^Y LEVEL
	STATUS	NORMAL			;
	RSB				;
	.PAGE
	.SBTTL	OPEN DATA FILE
;+
; MCR$OPEN - OPEN A DATA FILE
; MCR$OPENA - OPEN A DATA FILE AND APPEND TO IT
; MCR$OPENR - OPEN A FILE FOR READING
; MCR$TESTFILE - TEST EXISTANCE OF A FILE
;
; THIS ROUTINE IS CALLED TO PROCESS THE INDIRECT COMMAND FILE OPEN
; THE PROPER FILE IS OPENED AND A CONNECT IS PERFORMED.
;
; INPUTS:
;
;	R9 = NEXT CHARACTER IN THE PARSE BUFFER
;	R10 = RESULT PARSE DESCRIPTOR BUFFER POINTER
;	R11 = PROCESS IMPURE AREA
;	FP = COMMAND IMPURE AREA
;
; OUTPUTS:
;
;	THE PROPER FILE INDEX IN THE PROCESS PARAMETERS IMPURE AREA 
;	IS SET TO POINT AT THE CONNECTED RAB.
;-
 
	.ENABL	LSB

MCR$TESTFILE::
	SETBIT	WRK_V_FTEST,WRK_W_FLAGS(FP) ; Set .TESTFILE flag
	BICW2	#<WRK_M_FPROC!WRK_M_FACCESS>,- ; Set for OPEN file and
		WRK_W_FLAGS(FP)		; GETs
	MOVAB	PRC_L_CLIWRK4+4(R11),R7	; Set ip file slot pointer
	MOVL	#4,R1			; and count
5$:
	TSTL	-(R7)			; Is this file slot free?
	BEQL	12$			; Yes if EQL, so use it
	SOBGTR	R1,5$			; Back to try next
	STATUS	FILOPN			; All files open
	BRB	15$

MCR$OPENR::
	BICW2	#<WRK_M_FPROC!WRK_M_FACCESS>,- ; Set for OPEN file and
		WRK_W_FLAGS(FP)		; GETs
	BRB	10$

MCR$OPENA::
	MOVL	R9,R6			; Save expansion buffer pointer for re-parse
	PUSHL	WRK_L_CHARPTR(FP)	; Save input buffer pointer for re-parse
	SETNBLK				; Get next non-blank character
	CMPB	#^A/#/,R0		; Channel number given in command?
	BNEQ	7$			; If NEQ no
	MOVCHAR				; Move the # sign
	GETOKEN				; Move channel # out of inp. buff. for .TESTFILE
	BRB	8$			; Ready to do the .TESTFILE
7$:	MOVB	#^A/ /,R0		; Replace the blank...
	BSBW	MCR$BACKUPCHAR		; that was stripped from the input buffer
8$:	BSBW	MCR$TESTFILE		; Find out if the file exists or not
	MOVL	R6,R9			; Restore saved expansion buffer pointer
	POPL	WRK_L_CHARPTR(FP)	; Restore saved input buffer pointer
	CMPB	#^A/1/,PRC_L_FILERR(R11) ; Does it exist?
	BNEQ	MCR$OPEN		; If NEQ no
	CLRBIT	WRK_V_FPROC,WRK_W_FLAGS(FP) ; Set for OPEN file
	SETBIT	WRK_V_FACCESS,WRK_W_FLAGS(FP) ; and PUTs
 	BRB	10$

MCR$OPEN::				; OPEN THE FILE
	BISW2	#<WRK_M_FPROC!WRK_M_FACCESS>,- ; Set for CREATE file and
		WRK_W_FLAGS(FP)		; PUTs
10$:
	CLRBIT	WRK_V_FTEST,WRK_W_FLAGS(FP) ; Clear .TESTFILE bit
	BSBW	GETFIL			; GET THE PROPER FILE INDEX
	BNEQ	15$			; BR if file already exists
12$:
	DISABLE				; DISABLE ASTS
	CLRQ	(SP)+			; REAMOVE RETURN INFORMATION
	MOVZBL	#RAB$C_BLN+7,R1		; SET SIZE OF ALLOCATION
	BSBW	MCR$ALLDYNMEM		; ALLOCATE MEMEORY FOR RAB
	BLBC	R0,15$			; BR if allocation failed
	MOVL	R2,(R7)			; SAVE ADDRESS OF ALLOCATED BLOCK
	BSBW	MCR$MARK		; SET ERROR PRINT LIMIT
	CLRL	R8			; SET FLAG TO INDICATE NOT DEVICE ONLY
	PROCFILE			; PROCESS THE FILE SPEC
	BLBS	R0,18$			; BR if OK
15$:
	BRW	40$
18$:
	MOVL	R10,WRK_L_RSLNXT(FP)	; SET ADDRESS OF LAST DESCRIPTOR
	TSTL	-(R10)			; BACK UP RESULT PARSE INDICATOR
	GETDVAL				; TAKE DESCRIPTOR APART
	MOVL	PRC_L_INDFAB(R11),R8	; GET THE PROCESS FAB
	MOVB	#4,FAB$B_DNS(R8)	; SIZE OF DEFAULT NAME STRING
	MOVAB	DATFIL,FAB$L_DNA(R8)	; AND ITS ADDRESS
	MOVB	R1,FAB$B_FNS(R8)	; SET FILE NAME STRING SIZE
	MOVL	R2,FAB$L_FNA(R8)	; AND THE ADDRESS
	MOVL	#FAB$M_PPF!FAB$M_SQO!FAB$M_SUP,FAB$L_FOP(R8) ; SET FILE OPTIONS
	MOVB	#FAB$M_CR,FAB$B_RAT(R8)	; SET RECORD TO BE IMPLIED CR/LF
	MOVB	#FAB$M_PUT,FAB$B_FAC(R8); SET PUT ACCESS INORDER TO WRITE
	CLRL	FAB$L_ALQ(R8)		; Clear allocation quantity
	CLRW	FAB$W_DEQ(R8)		; and default extension quantity
	MOVB	#FAB$C_VAR,FAB$B_RFM(R8); Set for variable-length record format
	CLRB	FAB$B_FSZ(R8)		; Clear fixed control area size
	BBS	#WRK_V_FACCESS,-	; Branch if file access is PUT
		WRK_W_FLAGS(FP),19$
	MOVB	#FAB$M_GET,FAB$B_FAC(R8); Set GET access mode to read
19$:
	MOVZBW	#132,FAB$W_MRS(R8)	; AND SET THE MAXIMUM RECORD SIZE
	CLRW	FAB$W_IFI(R8)		; RESET THE IFI FIELD
	BSBW	INIFILSPC		; Initialise <FILSPC> symbol
	BBC	#WRK_V_FPROC, -		; Branch if an OPEN
		WRK_W_FLAGS(FP),20$
	$CREATE	FAB=(R8)		; CREATE THE FILE
	BRB	30$
20$:
	$OPEN	FAB=(R8)		; Open existing file
30$:
	BSBW	SETFILSPC		; Set <FILSPC> symbol
	BSBW	SETFILERR		; Set <FILERR> symbol
	BBS	#WRK_V_FTEST,WRK_W_FLAGS(FP),70$ ; Branch if .TESTFILE
	BLBC	R0,60$			; BR IF ERROR CREATING FILE
	MOVC5	#0,(AP),#0,#RAB$C_BLN,@0(R7) ; INIT THE RAB TO ZERO
	MOVL	(R7),R2			; GET ADDRESS OF THE RAB
	MOVL	R8,RAB$L_FAB(R2)	; SET FAB FOR THE CONNECT
	MOVW	#RAB$C_BLN@8+RAB$C_BID,(R2) ; SET RAB ID FIELDS
	MOVB	#1,RAB$B_MBC(R2)	; SET BLOCK COUNT TO 1
	MOVB	#-1,RAB$B_MBF(R2)	; AND -1 FOR MULTI BUFFER COUNT
	BBS	#WRK_V_FPROC, -		; Branch if CREATE processing
		WRK_W_FLAGS(FP),35$
	BBC	#WRK_V_FACCESS, -	; Branch if GET accessing
		WRK_W_FLAGS(FP),35$	; otherwise its an .OPENA
	SETBIT	RAB$V_EOF,RAB$L_ROP(R2)	; Set record processing options to
					; position to end of file
35$:
	$CONNECT RAB=(R2)		; CONNECT TO THE RECORD STREAM
	BLBC	R0,60$			; CLOSE THE FILE
	MOVW	FAB$W_IFI(R8),RAB$L_CTX(R2) ; SAVE FILE INTERNAL INDEX
40$:	RSB				;
 
;
; ERROR ON THE FILE - CLOSE IT
;
 
60$:	PUSHL	R0			; SAVE THE STATUS OF ERROR
	BSBW	MCR$CLSFIL		; CLOSE THE CURRENT FILE
	POPR	#^M<R0>			; RETREIVE FINAL STATUS
	RSB


;
; Clean up after .TESTFILE
;
70$:	PUSHL	R0			; Save RMS status
	PUSHL	PRC_L_FILERR(R11)	; Save FILERR
	MOVL	(R7),R2			; Get address of RAB
	MOVW	FAB$W_IFI(R8), -	; Put IFI in context field
		RAB$L_CTX(R2)		; for CLSFIL routine
	BSBB	MCR$CLSFIL		; Close file
	POPL	PRC_L_FILERR(R11)	; Reset <FILERR> (was changed by CLSFIL)
	POPL	R0			; Restore RMS status
	STATUS	NORMAL			; Return with success
	RSB

	.DSABL	LSB

;+
; GETFIL - LOCAL SUBROUTINE TO GET THE FILE SLOT FOR DATA FILES
;
; INPUTS:
;
;	FILE NUMBER, IF PRESENT, IS NEXT ON THE COMMAND LINE
;
; OUTPUT:
;
;	THE SLOT NUMBER IS COMPUTED AND R7 IS SET TO POINT AT
;	THE PROPER FILE DESCRIPTOR IN THE PROCESS IMPURE AREA.
;	CONDITION CODE 'Z' IS SET IF FILE NOT OPEN.
;-
GETFIL:	MOVAL	PRC_L_CLIWRK1(R11),R7	; SET DEFAULT FILE INDEX
	ADDL3	#2,WRK_L_CHARPTR(FP),R2	; ADVANCE TO FIRST NONE BLANK CHARACTER
	CMPB	#^A/#/,(R2)+		; CHANNEL NUMBER COMMING?
	BNEQ	10$			; BR IF NO
	BSBW	MCR$MARK		; COPY POINT IN BUFFER
	MOVL	-2(R2),(R9)+		; COPY INPUT DATA TO PARSE BUFFER
	DECL	R9			; REALLY ONLY WANT 3 BYTES
	CLRL	R1			; ZERO UPPER 3 BYTES OF REGISTER
	MOVL	R2,WRK_L_CHARPTR(FP)	; SET FOR GET CHARACTER
	SUBB3	#^A/0/,(R2)+,R1		; CONVERT CHANNEL TO BINARY
	BLSS	40$			; BR IF NOT A DIGIT
	CMPL	R1,#3			; VALUE IN RANGE
	BGTRU	40$			; BR IF OUT OF RANGE
	MOVAL	(R7)[R1],R7		; FIND PROPER SLOT
	LOCC	(R2),#3,B^30$		; CHECK FOR VALID DELIMITERS
	BEQL	40$			; BR IF NONE
10$:	STATUS	UNDFIL			; ASSUME NO FILE HERE
	TSTL	(R7)			; IS THE FILE OPEN
	BEQL	20$			; BR IF NO FILE
	STATUS	FILOPN			; SET PROPER ERROR INCASE
20$:	RSB				;
30$:	.ASCII	\ 	\<0>		; VALID DELIMITERS
 
;
; REPORT FATAL ERROR TO TOP LEVEL CALLER
;
 
 
40$:	STATUS	ILLVAL			; SET ERROR TO BAD VALUE
	TSTL	(SP)+			; CLEAR STACK
	RSB				; REPORT ERROR
	.PAGE
	.SBTTL	CLOSE DATA FILE
;+
; MCR$CLOSE - CLOSE A DATA FILE
;
; THIS ROUTINE IS CALLED TO PROCESS THE INDIRECT COMMAND FILE CLOSE
; THE PROPER FILE IS CLOSED.
;
; INPUTS:
;
;	R9 = NEXT CHARACTER IN THE PARSE BUFFER
;	R10 = RESULT PARSE DESCRIPTOR BUFFER POINTER
;	R11 = PROCESS IMPURE AREA
;	FP = COMMAND IMPURE AREA
;
; OUTPUTS:
;
;	THE FILE THAT IS OPEN IN THE INDICATED SLOT IS CLOSED.
;	THE PROPER FILE INDEX IN THE PROCESS PARAMETERS IMPURE AREA 
;	IS SET TO ZERO AND THE ASSOCIATED MEMORY IS RELEASED.
;-
	.ENABL	LSB
MCR$CLOSE::				; CLOSE THE FILE
	BSBB	GETFIL			; GET THE FILE INDEX
	BEQL	40$			; BR IF NO FILE OPEN
	DISABLE				; DISABLE ASTS
	CLRQ	(SP)+			; GET RID OF AST PARAMETERS
MCR$CLSFIL::				; ENTRY FOR "STOP" AND OPEN ERRORS
	MOVL	(R7),R2			; GET ADDRESS OF RAB
	CLRL	(R7)			; INDICATE SLOT IS FREE
	MOVL	PRC_L_INDFAB(R11),R0	; AND THE PROCESS FAB
	MOVW	RAB$L_CTX(R2),FAB$W_IFI(R0) ; SET INTERNAL FILE INDEX
	$CLOSE	FAB=(R0)		; CLOSE THE FILE
	BSBW	SETFILERR		; Set <FILERR> symbol
	PUSHL	R0			; SAVE STATUS OF CLOSE
	MOVL	R2,R0			; SET ADDRESS OF BLOCK
	MOVZBL	#RAB$C_BLN+7&^C7,R1	; SIZE OF BLOCK
	BSBW	MCR$DEADYNMEM		; DEALLOCATE THE BLOCK
	POPR	#^M<R0>			; RETRIEVE STATUS OF CLOSE
40$:	RSB				;
	.DSABL	LSB
	.PAGE
	.SBTTL	DATA OUTPUT ROUTINES
;+
; MCR$DATA - ADD ONE LINE OF DATA TO AN OUTPUT FILE
; MCR$ENABDATA - ADD ALL INTERVENING LINES TO THE DATA FILE
;
; THESE ROUTINES ARE USED TO STORE DATA IN THE CURRENTLY OPEN FILE
;
; INPUTS:
;
;	R9 = NEXT CHARACTER IN THE PARSE BUFFER
;	R10 = RESULT PARSE DESCRIPTOR BUFFER POINTER
;	R11 = PROCESS IMPURE AREA
;	FP = COMMAND IMPURE AREA
;
; OUTPUTS:
;
; 	THE DATA IS WRITTEN TO THE FILE
;-
	.ENABL	LSB
MCR$ENABDATA::				; ENABLE DATA MODE TO THE FILE
	BSBB	GETFIL			; GET THE ASSOCIATED FILE SLOT
	BEQL	60$			; BR IF NO FILE OPEN
MCR$ENABDATAFS::
10$:	MOVL	PRC_L_INDINPRAB(R11),R4	; INPUT RAB ADDRESS
	BSBW	MCR$GETINPUT		; READ A LINE OF INPUT
	BLBC	R0,60$			; BR IF ERROR READING FILE
	CMPB	#^A/./,(R2)+		; IS IT AN INDIRECT COMMAND
	BNEQ	30$			; BR IF NO
	CMPL	#^A/DISA/,(R2)		; IS A DISABLE?
	BEQL	50$			; BR IF YES
30$:	BBS	#PRC_V_GOTO, -		; DON'T PUT LINE IF IN FORWARD SCAN
		PRC_W_FLAGS(R11),10$
	BSBB	PUTLIN			; PUT A LINE INTO FILE
	BLBC	R0,60$			; BR IF ERROR WRITING FILE
	BRB	10$			; PARSE NEXT LINE
50$:	STATUS NORMAL			;
60$:	RSB				;
	.DSABL	LSB
 
	.ENABL	LSB
MCR$DATA::				; PUT SINGLE LINE TO DATA FILE
	BSBW	GETFIL			; GET THE FILE SLOT
	BEQL	30$			; BR IF NO FILE OPEN
	INCL	WRK_L_CHARPTR(FP)	; SKIP THE SEPARATING BLANK
PUTLIN:	ADDL3	#1,WRK_L_CHARPTR(FP),R2	; POINT AT NEXT BYTE IN INPUT
	LOCC	#0,#INPBUFSIZ,(R2)	; FIND END OF LINE
	MOVAB	-1(R1),WRK_L_CHARPTR(FP); RESET CHARACTER POINTER TO EOL
	SUBL	R2,R1			; FIND LENGTH
	MOVL	(R7),R0			; GET THE RAB
	MOVW	R1,RAB$W_RSZ(R0)	; SET RECORD LENGTH
	MOVL	R2,RAB$L_RBF(R0)	; AND THE ADDRESS
	$PUT	RAB=(R0)		; WRITE THE RECORD
	BSBW	SETFILERR		; Set <FILERR> symbol
30$:	RSB				; RETURN WITH STATUS FROM WRITE
 
	.DSABL	LSB

	.SBTTL	ERASE SYMBOLS
;+
; MCR$ERASE - Erase local or global symbols
;
; This routine is called to process the indirect commands to erase
; the local or global symbol tables
;
; Inputs:
;
;	R9  = Next character in the parse buffer
;	R10 = Result parse descriptor buffer pointer
;	R11 = Process impure area
;	FP  = Command impure area
;
; Outputs:
;
;	The entries in the local or global symbol table are
;	removed from the symbol queue and returned to dynamic memory.
;
; Registers modified:
;
;	R0, R1, R2, R3, R4 and R5
;-
;
MCR$ERASE::
	MOVTOKN				; Copy terminator and get token
	MOVAB	ERASE,R5		; Set table address
	BSBW	MCR$SRCTBL		; Search for keyword
	BLBC	R0,20$			; Branch if no match
	CASEB	R4,#1,#2		; Dispatch on keyword type
10$:	.WORD	MCR$ERASE_GLOBL-10$	; GLOBAL
	.WORD	MCR$ERASE_LOCAL-10$	; LOCAL
20$:
	STATUS	INVKEY			; Set error
	RSB

	.SBTTL	ERASE GLOBAL SYMBOLS
;+
; MCR$ERASE_GLOCAL - Erase global symbol table
;
; This routine is called to erase the global symbol table.  Permanent
; symbols are not erased.
;
; Inputs:
;
;	R11 = Process impure area
;
; Outputs:
;
;	Non-permanent entries in the global symbol table are removed
;	from the global symbol queue and returned to dynamic memory.
;
; Registers modified:
;
;	R2, R3, R4 and R5
;-
;
MCR$ERASE_GLOBL::
	DISABLE				; Disable ASTs
	MOVAL	PRC_Q_GLOBAL(R11),R5	; Get global symbol queue address
	MOVL	SYM_L_FL(R5),R4		; Point to first entry
10$:
	CMPL	R4,R5			; At end of list?
	BEQL	20$			; Yes if EQL
	MOVL	R4,R3			; Set pointer to this entry
	MOVL	SYM_L_FL(R4),R4		; Advance entry pointer to next
	CMPB	SYM_B_TYPE(R3),#SYM_K_PERM ; Is symbol permanent?
	BEQL	10$			; Yes if EQL so don't erase
	DEALLOCSYM			; Remove and deallocate symbol
	BRB	10$			; Back for next
20$:
	ENABLE				; Enable ASTs
	STATUS	NORMAL
	RSB

	.SBTTL	ERASE LOCAL SYMBOLS AND LABELS
;+
; MCR$ERASE_LOCAL - Erase local symbols
;
; MCR$ERASE_LABEL - Erase labels
;
; These routines are called to erase the local symbol table or label
; table.  All symbol entries defined at the current nesting level
; are erased.
;
; Inputs:
;
;	R11 = Process impure area
;
; Outputs:
;
;	Local symbols or labels defined at the current block nesting
;	level are removed from the symbol queue and returned to
;	dynamic memory.
;
; Registers modified:
;
;	R2, R3, R4 and R5
;-
;
	.ENABLE LSB
;
MCR$ERASE_LABEL::
	MOVAL	PRC_Q_LABEL(R11),R5	; Get label queue address
	BRB	10$			; Branch to common code
;
MCR$ERASE_LOCAL::
	MOVAL	PRC_Q_LOCAL(R11),R5	; Get local symbol queue address
10$:
	DISABLE				; Disable ASTs
	MOVL	SYM_L_FL(R5),R4		; Point to first entry
20$:
	CMPL	R4,R5			; At end of list?
	BEQL	30$			; Yes if EQL
	MOVL	R4,R3			; Set pointer to this entry
	MOVL	SYM_L_FL(R4),R4		; Advance entry pointer to next
	CMPB	SYM_B_NESTLEVEL(R3), -	; Is definition level equal than
		PRC_B_NESTLEVEL(R11)	; current block nesting level?
	BNEQ	20$			; No if NEQ, so don't erase symbol
	DEALLOCSYM			; Remove and deallocate symbol
	BRB	20$			; Back for next symbol
30$:
	ENABLE				; Enable ASTs
	STATUS	NORMAL
	RSB
;
	.DSABL	LSB

	.SBTTL	BEGIN BLOCK
;+
; MCR$BEGIN - BEGIN NEW BLOCK
;
; This routine is called to process the indirect command to begin
; a new block
;
; Inputs:
;
;	R9  = Next character in the parse buffer
;	R10 = Result parse descriptor buffer pointer
;	R11 = Process impure area
;	FP  = Command impure area
;
; Outputs:
;
; A new block context is established.  The BEGIN position of
; the current block is saved on the process stack and the position
; of the new block set.
;-
MCR$BEGIN::
	CMPB	PRC_B_NESTLEVEL(R11),#127 ; At maximum nesting level?
	BGEQU	10$			; Yes if GEQU
	SUBL3	#BLK_K_BLN, -		; Allocate stack space for block frame
		PRC_L_STACKPT(R11),R0
	CMPL	R0,PRC_L_STACKLM(R11)	; Did stack overflow?
	BLEQU	20$			; Yes if LEQU
	MOVL	R0,PRC_L_STACKPT(R11)	; Set new stack pointer
	MOVL	PRC_L_BLKLNK(R11), -	; Link new block frame into list
		BLK_L_LNK(R0)
	MOVAL	BLK_L_LNK(R0),PRC_L_BLKLNK(R11)
	MOVL	PRC_W_BEGINRFA+0(R11), -; Save position of start of block
		BLK_W_BEGINRFA+0(R0)
	MOVW	PRC_W_BEGINRFA+4(R11), -; (3 words)
		BLK_W_BEGINRFA+4(R0)
	MOVL	PRC_L_INDINPRAB(R11),R0	; Get input RAB address
	MOVL	RAB$W_RFA+0(R0), - 	; Save BEGIN position of this block
		PRC_W_BEGINRFA+0(R11)
	MOVW	RAB$W_RFA+4(R0), -	; (3 words)
		PRC_W_BEGINRFA+4(R11)
	INCB	PRC_B_NESTLEVEL(R11)	; Increment nesting level
	BSBW	MCR$ERASE_LOCAL		; Erase all local symbols at this level
	BSBW	MCR$ERASE_LABEL		; Erase all labels at this level
	STATUS	NORMAL
	RSB
10$:
	STATUS	BLKOVRFLOW		; Indicate block overflow
	RSB
20$:
	STATUS	STKOVF			; Indicate no space for block
	RSB

	.SBTTL	END BLOCK
;+
; MCR$END - END NEW BLOCK
;
; This routine is called to process the indirect command to being
; a new block
;
; Inputs:
;
;	R9  = Next character in the parse buffer
;	R10 = Result parse descriptor buffer pointer
;	R11 = Process impure area
;	FP  = Command impure area
;
; Outputs:
;
;	The current block context is removed and the previous block
;	context restored.
;-
MCR$END::
	TSTB	PRC_B_NESTLEVEL(R11)	; At lowest block level?
	BEQL	10$			; Yes if EQL
	MOVL	PRC_L_BLKLNK(R11),R0	; Get address of current block frame
	BEQL	20$			; If EQL there are no blocks
	MOVL	BLK_L_LNK(R0), -	; Unlink block frame from block list
		PRC_L_BLKLNK(R11)
	MOVL	BLK_W_BEGINRFA+0(R0), -	; Restore BEGIN position
		PRC_W_BEGINRFA(R11)
	MOVW	BLK_W_BEGINRFA+4(R0), -	; (3 words)
		PRC_W_BEGINRFA+4(R11)
	MOVAB	BLK_K_BLN(R0), -	; Remove block frame from stack and
		PRC_L_STACKPT(R11)	; reset stack pointer
	BSBW	MCR$ERASE_LOCAL		; Erase all local symbols at this level
	BSBW	MCR$ERASE_LABEL		; Erase all labels at this level
	DECB	PRC_B_NESTLEVEL(R11)	; Decrement nesting level
	STATUS	NORMAL
	RSB
10$:
	STATUS	BLKUNDFLOW		; Indicate block underflow
	RSB
20$:
	STATUS	BADBLK			; Indicate bad block
	RSB

	.SBTTL	FORWARD SCAN PROCESSING
;
; This routine is called to process indirect commands during a forward
; scan.   Only .BEGINs and .ENDs are relevant.  All other indirect
; commands are flushed.   Forward goto processing occurs either when a label
; is being searched for (as a result of a .GOTO or .GOSUB command) or a
; .END (as a result of a .EXIT command).
;
; Inputs
;
;	R9  = Next character in the parse buffer
;	R10 = Result parse descriptor buffer pointer
;	R11 = Process impure area
;	FP  = Command impure area
;
; Outputs:
;
;	The command is decoded and if not .BEGIN or .END it is flushed.
;	If searching for a .GOSUB label the command is flushed.  If
;	searching for a .GOTO label the block nesting level count is
;	incremented for a .BEGIN and decremented for a .END.  If a .END
;	a test is made for the end of the block.
;	If processing a .EXIT command the block nesting level count is
;	incremented for a .BEGIN and decremented for a .END.  If a .END
;	is found at the correct level the forward goto flags are cleared.
;
;-
MCR$INDCMDSCAN::
	MOVAB	FWDSCAN,R5		; Set table address
	BSBW	MCR$SRCTBL		; Search for command
	BLBC	R0,70$			; Not found if LBC, so ignore command
	CMPB	R4,#3			; Was command .ENAB?
	BNEQ	5$			; No if NEQ
	MOVTOKN				; Get keyword
	CMPL	(R2),#^A/DATA/		; Is is DATA?
	BNEQ	70$			; No if NEQ so flush command
	BRW	MCR$ENABDATAFS		; Process .ENABLE DATA
5$:
	MULB3	PRC_B_FWDSCAN(R11),#2,R5 ; Get forward scan type and double it
	ADDL2	R5,R4			; and add to command type
10$:
	CASEB	R4,#<PRC_K_GOTO+1>,#<<PRC_K_EXIT*2>+2> ; Dispatch on scan/command
20$:	.SIGNED_WORD	30$-20$		; .GOTO   .BEGIN
	.SIGNED_WORD	50$-20$		; .GOTO   .END
	.SIGNED_WORD	70$-20$		; .GOSUB  .BEGIN
	.SIGNED_WORD	70$-20$		; .GOSUB  .END
	.SIGNED_WORD	30$-20$		; .EXIT   .BEGIN
	.SIGNED_WORD	40$-20$		; .EXIT   .END
	BRB	70$
;
; .BEGIN during .GOTO or .EXIT scan
; The scan nesting level is checked against the maximum allowed
; and if ok incremented.
;
30$:
	CMPB	WRK_B_SCANLEVEL(FP),#127	; At maximum nseting level?
	BGEQU	80$			; Yes if GEQU
	INCB	WRK_B_SCANLEVEL(FP)	; Increment nesting level
	BRB	70$
;
; .END during .EXIT scan
; The scan nesting level is compared with the nesting level when the
; .EXIT command was executed.  If greater the .END is terminating an
; inner block so the scan is continued.  If equal (or less) the end of
; current block has been found so the block is deallocated, and the
; forward scan terminated.
;
40$:
	CMPB	WRK_B_SCANLEVEL(FP), -	; Is scan nesting level equal to
		PRC_B_NESTLEVEL(R11)	; current level?
	BGTRU	60$			; No if GTRU
	BSBW	MCR$END			; Deallocate block
	BICW	#<PRC_M_GOTO!PRC_M_GOEOF>, - ; Clear forward scan flags
		PRC_W_FLAGS(R11)
	BRB	70$
;
; .END during .GOTO scan
; The scan nesting level is compared with the current nesting level.
; If greater the .END is terminating an inner block.  If equal (or less)
; the end of the current block has been found without finding the
; required label.
;
50$:
	CMPB	WRK_B_SCANLEVEL(FP), -	; Is scan nesting level <=
		PRC_B_NESTLEVEL(R11)	; current level?
	BLEQ	100$			; Yes if LEQ, label not found

60$:
	TSTB	WRK_B_SCANLEVEL(FP)	; At lowest nesting level?
	BEQL	90$			; Yes if EQL
	DECB	WRK_B_SCANLEVEL(FP)	; Decrement scan nesting level
70$:
	FLUSH
	STATUS	NORMAL
	RSB
80$:
	STATUS	BLKOVRFLOW
	RSB
90$:
	STATUS	BLKUNDFLOW
	RSB
100$:
	STATUS	USGOTO
	RSB
;

	.SBTTL	READ LINE FROM FILE
;+
; MCR$READ - Read line from file and place in symbol
;
; This routine is called to read the next line from a file opened with
; .OPENR.  The contents of the line are assigned to the specified string
; symbol.
;
; Inputs:
;
;	R9  = Next character in the pasrse buffer
;	R10 = Result parse descriptor pointer
;	R11 = Process impure area
;	FP  = Command impure area
;
; Outputs:
;
;	If a line is successfully read from the file its contents are
;	assigned to the specified symbol.
;	The flag MCR_V_EOF in PRC_W_CLIFLAG(R11) is cleared to indicate no
;	end-of-file and set to indicate end-of-file detected.
;
; Registers modified:
;
;	R0, R1, R2, R3, R4 and R5
;
;-
;
MCR$READ::
	BSBW	GETFIL			; Get associated file slot
	BEQL	20$			; BR if no file is open
	BSBW	MCR$SYMNAM		; Get symbol name
	MOVL	(R7),R2			; Get file RAB address
	MOVZBW	#255,RAB$W_USZ(R2)	; Set maximum record size
	MOVAB	WRK_AB_BUFFER+255(FP),-	; and buffer address
		RAB$L_UBF(R2)
	CLRBIT	MCR_V_EOF,PRC_W_CLIFLAG(R11) ; Assume no end-of-file
	$GET	RAB=(R2)		; Get next line
	BSBB	SETFILERR		; Set <FILERR> symbol
	BLBC	R0,10$			; Error if LBC
	MOVZWL	RAB$W_RSZ(R2),R1	; Set record size and type
	MOVL	RAB$L_RBF(R2),R2	; and address
	BRW	MCR$ALLOCSYMD		; allocate symbol
10$:
	CMPL	R0,#RMS$_EOF		; Was error end-of-file?
	BNEQ	20$			; No if NEQ
	SETBIT	MCR_V_EOF,PRC_W_CLIFLAG(R11) ; Set end-of-file flag
	STATUS	NORMAL
20$:
	RSB

	.SBTTL	SET <FILERR> SYMBOL
;+
; SETFILERR - Set new value for <FILERR> special symbol
;
; This routine is called after an RMS operation during processing of
; an .OPEN, .OPENA, .OPENR, .TESFILE, .READ, .CLOSE or .DATA command
; to update the current value of the <FILERR> special symbol.
;
; Inputs:
;
;	R0 = RMS status code
;
; Outputs:
;
;	PRC_L_FILERR(R11) is set with the equivalent RSX error code
;
;-
;
SETFILERR:
	MOVZBL	#^A/1/,PRC_L_FILERR(R11)	; Assume success code
	BLBS	R0,10$			; Success if LBS
	MOVL	#^A/346/,PRC_L_FILERR(R11) ; Giver error code
10$:
	RSB

	.SBTTL	INITIALISE <FILSPC> SYMBOL
;+
; INIFILSPC - Initialise for a new <FILSPC> symbol
;
; This routine is called before an RMS operation during processing of
; an .OPEN, .OPENA, .OPENR or .TESTFILE command to remove any previous
; value of the <FILSPC> symbol and set up a NAM block and expanded/resultant
; string buffer.
;
; Inputs:
;
;	R8 = FAB address of file
;
; Outputs:
;
;	Any previous <FILSPC> value is deallocated and returned to
;	dynamic memory and a NAM block and ES/RS buffer is initialised.
;
; Registers modified:
;
;	R0, R1, R2, R3, R4 and R5
;
;-
;
INIFILSPC:
	MOVL	PRC_L_FILSPC(R11),R0	; Get address of current value
	BEQL	10$			; If EQL there is none
	MOVZBL	(R0),R1			; Get size of string
	ADDL2	#<1+7>,R1		; include byte count and round up to a
	BICL2	#7,R1			; multiple of 8
	BSBW	MCR$DEADYNMEM		; Deallocate memory
10$:
	MOVL	FAB$L_NAM(R8),PRC_L_FILSPC(R11) ; Save previous NAM block pointer
	MOVAB	WRK_AB_BUFFER+NAM$C_BLN(FP),R0 ; Set address of NAM block
	MOVL	R0,FAB$L_NAM(R8)	; Put address in FAB
	PUSHL	R0			; Save address
	MOVC5	#0,(R0),#0,#NAM$C_BLN,(R0); Clear out NAM block
	POPL	R0			; Restore NAM block address
	MOVZWL	#<NAM$C_BID+<NAM$C_BLN@8>>, - ; Identify as NAM block
		NAM$B_BID(R0)
	MOVAB	WRK_AB_BUFFER+NAM$C_BLN+ - ; Set address of resultant string
		NAM$C_MAXRSS(FP),R1	; buffer
	MOVL	R1,NAM$L_ESA(R0)	; Set address and size of
	MOVB	#NAM$C_MAXRSS,NAM$B_ESS(R0) ; expanded string buffer
	MOVL	R1,NAM$L_RSA(R0)	; Set address and size of
	MOVB	#NAM$C_MAXRSS,NAM$B_RSS(R0) ; resultant string buffer
	RSB

	.SBTTL	SET <FILSPC> SYMBOL
;+
; SETFILSPC - Set new value for <FILSPC> special symbol
;
; This routine is called after an RMS operation during the processing of
; an .OPEN, .OPENA, .OPENR or .TESTFILE command to set a new value for the
; <FILSPC> special symbol.
;
; Inputs:
;
;	R0 = RMS status code
;	R8 = FAB address
;
; Oututs:
;
;	R0 = RMS status code
;
; Registers modified
;
;	R1, R2, R3, R4 and R5
;
;-
;
SETFILSPC:
	PUSHL	R0			; Save RMS status
	PUSHL	PRC_L_FILSPC(R11)	; Get saved previous NAM block pointer
	MOVL	FAB$L_NAM(R8),R2	; Get NAM block address
	MOVL	NAM$L_RSA(R2),R4	; Get resultant string address
	MOVZBL	NAM$B_RSL(R2),R5	; and size
	BNEQ	10$			; If NEQ then got a string
	MOVL	NAM$L_ESA(R2),R4	; Get expanded string address
	MOVZBL	NAM$B_ESL(R2),R5	; and size
10$:
	CMPB	(R4),#^A/_/		; If first character is underscore (_)
	BNEQ	15$			; then remove from resultant string
	DECL	R5			; Reduce string size by 1
	INCL	R4			; and advance string pointer by 1
15$:
	ADDL3	R4,R5,R3		; Find the end of the file spec. string
	CMPB	#^A/0/,-(R3)		; Check to see if there's a version #
	BGTR	17$			; If GT then there's no version #
	CMPB	#^A/9/,(R3)		; Is the character in the range 0-9?
	BGEQ	18$			; If GE then there's a version # there
17$:
	INCL	R3			; Need to add a version # of 0 to
	MOVB	#^A/0/,(R3)+		; this file spec.
	INCL	R5			; Increment file spec. string size
18$:
	ADDL3	#<1+7>,R5,R1		; Add byte count and round up factor
	BSBW	MCR$ALLDYNMEM		; Allocate dynamic memory
	BLBC	R0,20$			; Error if LBC
	MOVL	R2,PRC_L_FILSPC(R11)	; Save memory address
	MOVB	R5,(R2)+		; Store string size in memory
	MOVC3	R5,(R4),(R2)		; and then copy string
20$:
	POPL	FAB$L_NAM(R8)		; Restore previous NAM block pointer
	POPL	R0			; Restore RMS status
	RSB

	.SBTTL	PARSE STRING
;+
; MCR$PARSE - Parse string into substrings
;
; This routine is called to parse a string into substrings using the
; delimeters spcecified in a control string.
;
; Inputs:
;
;	R9  = Next character in the parse buffer
;	R10 = Result parse descriptor pointer
;	R11 = Process impure area
;	FP  = Command impure area
;
; Outputs:
;
;	The string is broken up into substrings which are allocated
;	to the list of symbols.
;
; Registers modified:
;
;	R0, R1, R2, R3, R4 and R5
;
;-
;
MCR$PARSE::
	CLRL	WRK_L_STRCNT(FP)	; Initialise substring count
	BSBW	MCR$EVLSTRING		; Get string
	MOVL	R1,WRK_L_STRSIZ(FP)	; Save string size
	MOVL	R2,WRK_L_STRADR(FP)	; and address
	BSBW	MCR$EVLSTRING		; Get control string
	MOVL	R1,WRK_L_CSTSIZ(FP)	; Save control string size
	MOVL	R2,WRK_L_CSTADR(FP)	; and address
10$:
	BSBW	MCR$SYMNAM		; Get next symbol name
	TSTL	WRK_L_STRSIZ(FP)	; Is string size 0?
	BEQL	20$			; Yes if EQL, implied null string
	INCL	WRK_L_STRCNT(FP)	; Increment substring count
20$:
	MOVL	WRK_L_STRADR(FP),R2	; Get address of string
	SETCHAR				; Look at next character in command line
	TSTL	R0			; Is it end of line?
	BEQL	30$			; Yes if EQL, allocate rest of line
	LOCC	@WRK_L_CSTADR(FP), -	; Search for delimeter character
		WRK_L_STRSIZ(FP),(R2)	; in string
	BEQL	30$			; If EQL character was not found
	ADDL3	#1,R1,WRK_L_STRADR(FP)	; Advance string pointer over delimeter
	SUBL3	R0,WRK_L_STRSIZ(FP),R1	; Set length of new substring and type
	SUBL3	#1,R0,WRK_L_STRSIZ(FP)	; Set remaining length of string
	BRB	40$
30$:
	MOVL	R1,WRK_L_STRADR(FP)	; Set string pointer to end of string
	MOVL	WRK_L_STRSIZ(FP),R1	; Substring size is string size
	CLRL	WRK_L_STRSIZ(FP)	; Set remaining length of string to zero
40$:
	ALLOCSYMD			; Allocate substring symbol
	CMPL	WRK_L_CSTSIZ(FP),#1	; At last delimeter character?
	BEQL	50$			; Yes if EQL
	INCL	WRK_L_CSTADR(FP)	; Point to next delimeter character in
	DECL	WRK_L_CSTSIZ(FP)	; control string and decrement size
50$:
	SETCHAR				; Look at next character in input line
	TSTL	R0			; Is it end of line?
	BNEQ	10$			; No if NEQ, back for next symbol
	MOVL	WRK_L_STRCNT(FP),R0	; Get substring count
	MOVZBL	#8,R1			; Set for octal radix
	MOVAB	PRC_L_CLIWRK0(R11),R2	; Set address of 4 byte string
	CLRL	R3			; Set for zero suppression
	BSBW	MCR$CNVNUM		; Convert number to ascii
	CLRB	(R2)+			; and mark and of number
	STATUS	NORMAL
	RSB
;
	.END

