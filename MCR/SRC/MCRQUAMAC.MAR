
;***********************************************************************
;
;
;                               Q U A M A C
;	Version 'V03-000'
;
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
; THIS MODULE CONTAINS THE MACROS TO ASSEMBLE THE STARLET QUALIFIER
; DEFINITION FILE INTO THE TABLE NECESSARY FOR THE MCR COMMAND PARSER.
;
; MODIFIED BY:
;
;	V003	TMH0003		Tim Halvorsen	10-Nov-1980
;		Terminate parameter lists with null link pointer.
;
;	V002	TMH0002		Tim Halvorsen	18-Oct-1980
;		Allow entity labels to be specified for parameters
;		and qualifiers.
;
;	V001	TMH0001		Tim Halvorsen	08-Jul-1980
;		Update macros for new structure definitions.
;---
 

;
; BLDPROMPTS	MAXPARM,PROMPTS
;
;		WHERE:
;
;			MAXPARM - MAXIMUM NUMBER OF PARAMETERS
;			PROMPTS - LIST OF PROMPT AND PROMPT FLAGS
;
 
	.MACRO	BLDPROMPTS	MAXPARM,PROMPTS
$PMTCNT$=0				;INITIALIZE COUNT OF PROMPT BLOCKS
	.IRP	$ARG$,<PROMPTS>
$PMTCNT$=$PMTCNT$+1			;ACCUMULATE COUNT OF PROMPT BLOCKS
	BLDPROMPTS1	$ARG$		;GENERATE PROMPT DESCRIPTOR
	.ENDR
	.IIF NE	MAXPARM-$PMTCNT$, .ERROR ;TOO MANY OR TOO FEW PROMPT;
	.IF GT	$PMTCNT$		;IF AT LEAST 1 PARAMETER BLOCK
	.SAVE
.=$PARMBLK$
	.BYTE	0			;TERMINATE PARAMETER LIST
	.RESTORE
	.ENDC
	.ENDM	BLDPROMPTS

;
; BLDPROMPTS1	PROMPT,FLAGS
;
;		WHERE:
;
;			PROMPT - PROMPT TEXT
;			FLAGS - PROMPT FLAGS
;			LABEL - PARAMETER LABEL (OPTIONAL)
;

	.MACRO	BLDPROMPTS1	PROMPT,FLAGS,LABEL,?L1,?L2,?L3
$OPTION$=0
$$$=0					;INITIALIZE SYMBOL VALUE
	.IIF	B	<FLAGS>,	.ERROR	;NO FLAG;
	.IF	DIF	<FLAGS>,<NONE>	;IF FLAGS PRESENT
	.IRP	$ARG$,<FLAGS>
	.IF IDN <$ARG$>,<REQ>
	$$$ = $$$ ! ENT_M_VALREQ	;REQ -> VALREQ
	.IFF
	.IF DIF <$ARG$>,<OPTION>	;IGNORE OPTION
	$$$ = $$$ ! ENT_M_'$ARG$	;'OR' NEXT FLAG VALUE
	.IFF
	$OPTION$ = 1			; MARK OPTION BIT PRESENT
	.ENDC
	.ENDC
	.ENDR
	.ENDC

$PARMBLK$ = .				;SAVE LOCATION OF LAST PARAMETER BLOCK

L1:	.BYTE	L2-L1			;OFFSET TO NEXT BLOCK
	.BYTE	L2-L1			;SIZE OF THIS BLOCK
	.BYTE	ENT_C_PARAMETER		;ENTITY TYPE
	.BYTE	0			;SPARE
	.WORD	$PMTCNT$		;PARAMETER NUMBER
	.IF NB	LABEL
	.WORD	L3-L1			;OFFSET TO PARAMETER LABEL
	.IFF
	.WORD	0			;NO PARAMETER LABEL
	.ENDC
	.WORD	0			;NO DEFAULT VALUE
	.WORD	0			;NO SYNTAX LIST
	.IF EQ	$OPTION$		;IF NO OPTION
	.WORD	0			;NO KEYWORD LIST
	.IFF
	.WORD	L2-L1			;KEYWORD LIST = QUALIFIER LIST
	.ENDC
	.IIF	B	<PROMPT>,	.ERROR	;NO PROMPTS TEXT;
	.WORD	PRO_G_'PROMPT-L1	;INDEX TO PROMPT STRING
	.LONG	$$$			;GENERATE FLAG STORAGE
	.IF NB	LABEL
L3:	.ASCIC	/LABEL/			;GENERATE ASCIC PARAMETER LABEL
	.ENDC
L2:
	.ENDM	BLDPROMPTS1

;
; MACRO TO INITIALIZE THE CREATION OF A COMMAND QUALIFIER BLOCK
;
; DEFQUALBLK	VERB,GLOBAL,GBLTAG
;
;		WHERE:
;
;			VERB - VERB OF COMMAND
;			GLOBAL - IF  EQUAL TO YES MEANS DEFINE SYMBOLS GLOBAL
;			GBLTAG - INDICATES A GLOBAL LABEL SHOULD BE DEFINED
;

	.MACRO	DEFQUALBLK	VERB,GLOBAL,GBLTAG
	.NLIST
	.IIF	B	VERB,	.ERROR	;NO VERB TEXT;
	.NCHR	$$$,VERB		;GET LENGTH OF VERB
	.IIF	GT	$$$-4,	.ERROR	;VERB TOO LONG;
$$$GBL=0
.IIF IDN <GLOBAL><YES>,	$$$GBL=1

	.IF DF	$MCRDEFQUALBLK$
	.SAVE
	.PSECT	TAB$CMDATA,BYTE,RD,NOWRT
$QUALST$=.
QUA_G_'VERB:
.IIF NB <GBLTAG>, MCR$G_'VERB'QUALS::
	.IFTF
$QUALNUM$=1				;START NUMBERING QUALIFIERS AT 1
 
	.ENDC
	.LIST
	.ENDM	DEFQUALBLK

 
;
; MACRO TO FORM THE END OF A SET OF QUALIFIER BLOCKS
;
	.MACRO	DEFQUALEND
	.NLIST
	.IF DF	$MCRDEFQUALBLK$
.=$QUALBLK$				;RESET TO OFFSET IN LAST QUALIFIER
	.BYTE	0			;END OF QUAL BLOCK FLAG
	.RESTORE
	.ENDC
	.LIST
	.ENDM	DEFQUALEND

;
; MACRO TO DEFINE A QUALIFIER FOR THE CURRENT COMMAND QUALIFIER BLOCK
;
; DEFINEQUAL	VERB,QUAL,TYPE,FLAGS,IMAGE,CHNGLIST,DEFVAL
;
;		WHERE:
;
;			VERB - NAME OF COMMAND VERB OR SUBQUALIFIER
;			QUAL - FIRST 4 CHARACTERS OF QUALIFIER
;			TYPE - IS "LOCAL" TO INDICATE KEYWORD FOR
;				THE QUALIFIER IS LOCAL TO THE BLOCK
;			FLAGS - LIST OF FLAGS ENCLOSED IN BRACKETS
;			IMAGE - IMAGE NAME TO ACITVATE
;			CHNGLIST - REPLACEMENT FOR MINIMUM PARAMETERS, MAXIMUM
;				PARAMETERS, QUALIFIERS BLOCKS, AND PARAMETER
;				PROMPTS
;			DEFVAL - ASCII VALUE TO BE ASSIGNED BY DEFAULT
;			LABEL - QUALIFIER LABEL (OPTIONAL)
;

	.MACRO	DEFINEQUAL VERB,QUAL,TYPE,FLAGS,IMAGE,CHNGLIST,DEFVAL,LABEL,?L1,?L2,?L3,?L4,?L5,?L6
	.NLIST
	.IF	NB	<VERB>		;GEN THIS BLOCK IF A VERB

	.IF EQ	$$$GBL
CLI$K_'VERB'_'QUAL=$QUALNUM$		;ASSIGN UNIQUE NUMBER TO QUALIFIER
	.IFF
CLI$K_'VERB'_'QUAL==$QUALNUM$		;ASSIGN UNIQUE NUMBER TO QUALIFIER
	.ENDC

$QUALNUM$=$QUALNUM$+1			;ADD 1 TO QUALIFIER COUNT

.IIF NDF $MCRDEFQUALBLK$, .LIST		;IF NOT 'DATABASE', RESTORE LISTING
.IIF NDF $MCRDEFQUALBLK$, .MEXIT	;COUNTER AND EXIT W/ONLY DEFINITION

$QUALBLK$=.				;SAVE LOCATION OF QUALIFIER BLOCK

L1:	.BYTE	L4-L1			;OFFSET TO NEXT BLOCK
	.BYTE	L4-L1			;LENGTH OF THIS BLOCK
	.BYTE	ENT_C_QUALIFIER		;TYPE OF ENTITY
	.BYTE	0			;VALUE TYPE

	.IIF	B	<QUAL>,	.ERROR	;NO QUALIFIER TEXT;
	.NCHR	$$$,QUAL		;GET LENGTH OF QUAL
	.IIF	GT	$$$-4,	.ERROR	;QUALIFIER TOO LONG;

	.WORD	<L3-L1>			;OFFSET TO QUALIFIER NAME
	.IF NB	LABEL
	.WORD	L6-L1			;OFFSET TO QUALIFIER LABEL
	.IFF
	.WORD	0			;NO QUALIFIER LABEL
	.ENDC

	.IF NB	<DEFVAL>
	.WORD	L2-L1			;IF DEFVAL, GEN OFFSET
	.IFF
	.WORD	0			;IF NO DEFVAL, GEN NO OFFSET
	.ENDC

$CHG$=0					;ASSUME NO CHANGE LIST
	.IIF DIF <IMAGE>,<NONE>, $CHG$=1
	.IIF NB	<CHNGLIST>, $CHG$=1

	.IF NE $CHG$
	.WORD	L5-L1			;OFFSET TO SYNTAX LIST
	.IFF
	.WORD	0
	.ENDC

	$KEYLST$ = 0			;ASSUME NO KEYWORD LIST
	$$$ = ENT_M_LIST		;ASSUME VALUE LIST
	.IRP	$ARG$,<FLAGS>
	.IF IDN <$ARG$>,<ONEVAL>
	$$$ = $$$ & ^C<ENT_M_LIST>	;ONEVAL -> NOT(LIST)
	.IFF
	.IF DIF <$ARG$>,<OUTPUT>	;IGNORE OUTPUT,KEYVAL
	.IF DIF <$ARG$>,<KEYVAL>
	$$$ = $$$ ! ENT_M_'$ARG$	;'OR' NEXT FLAG VALUE
	.IFF				;IF KEYVAL,
	$KEYLST$ = ^XFFFF		;SET KEYWORDS NONZERO
					;FOR PROCQUAL VALUE SPLIT TEST
	.ENDC
	.ENDC
	.ENDC
	.ENDR

	.WORD	$KEYLST$		;NO KEYWORD LIST
	.WORD	0			;NO VALUE PROMPT STRING

	.LONG	$$$			;GENERATE FLAG STORAGE

	.NCHR	$$$,QUAL
L3:	.ASCIC	\'QUAL'\		; GENERATE QUALIFIER NAME
	.REPT	4-$$$			; SPACE PAD TO AT LEAST 4 CHARACTERS
	.ASCII	% %
	.ENDR

	.IF	NB	<DEFVAL>
L2:	.ASCIC	\'DEFVAL'\		; AN COUNTED ASCII STRING CONSTANT
	.ENDC

	.IF NB	LABEL
L6:	.ASCIC	/LABEL/			; GENERATE QUALIFIER LABEL
	.ENDC

	.IF NE $CHG$			;IF CHANGE LIST PRESENT
L5:	DEFCHGLIST QUAL,IMAGE,CHNGLIST	;GEN NEW MIN, MAX PARM CNT AND PROMPTS
	.ENDC

	.ENDC
L4:
	.LIST
	.ENDM	DEFINEQUAL

;
; DEFCHGLIST	SUBQUAL,IMAGE,MINPARM,MAXPARM,PROMPTS,QUALIST
;
;		WHERE:
;
;			SUBQUAL - NAME OF SUBQUALIFIER
;			IMAGE	- NEW IMAGE NAME ("NOCHANGE" IF NONE)
;			MINPARM - MINIMUM NUMBER OF REQUIRED PARAMETERS
;			MAXPARM - MAXIMUM NUMBER OF POSSIBLE PARAMETERS
;			PROMPTS - LIST OF PROMPTS AND PROMPT FLAGS
;			QUALIST - LIST OF SUBQUALIFIERS
;

	.MACRO	DEFCHGLIST	SUBQUAL,IMAGE,MINPARM,MAXPARM,PROMPTS,QUALIST,?L1,?L2,?L3

L1:	.BYTE	L2-L1			;LENGTH OF CHANGE LIST

$$$=0
	.IIF DIF <IMAGE>,<NOCHANGE>, $$$=$$$!<CHG_M_IMAGE>
	.IIF NB <MINPARM>, $$$=$$$!<CHG_M_PARMS>
	.IF NB	<QUALIST>
	.IIF DIF <QUALIST>,<NO_QUALS>, $$$=$$$!<CHG_M_QUALS>
	.ENDC

	.BYTE	$$$			;FLAGS BYTE

	.IF IDN	<IMAGE>,<NOCHANGE>
	.WORD	0
	.IFF
	.WORD	-IMG_K_'IMAGE		;IMAGE NAME INDEX NUMBER
	.ENDC

	.IF B	<MINPARM>		;IF PARAMETER/QUALIFIERS NOT CHANGED
	.BYTE	0			;THEN PAD OUT THE BLOCK
	.WORD	0
	.WORD	0
	.IFF

	.BYTE	MAXPARM*16+MINPARM	;GENERATE PARAMETER COUNTS

	.IF NE	<MAXPARM>
	.WORD	L3-L1			;OFFSET TO PARAMETER DESCRIPTORS
	.IFF
	.WORD	0
	.ENDC

	.IF NB	<QUALIST>
	.IF DIF	<QUALIST>,<NO_QUALS>
	.WORD	QUALIST-L1		;OFFSET TO QUALIFER BLOCKS
	.IFF
	.WORD	0
	.ENDC
	.IFF
	.WORD	0			;NO QUALIFIER BLOCKS
	.ENDC

	.IF NE	<MAXPARM>		;GEN PROMPTS IF MAXPARM NE ZERO
L3:	BLDPROMPTS MAXPARM,<PROMPTS>	;GEN THE PROMPTS
	.ENDC				;END PROMPT GEN
	.ENDC

L2:
	.ENDM


;
; DEFINE PROMPT DESCRIPTOR BLOCK
;
 
	.MACRO	DEFPROBLK
 
	$DEFINI	PRO
 
$DEF	PRO_B_PROMPT	.BLKB	1	;PROMPT STRING INDEX NUMBER
$DEF	PRO_B_FLAGS	.BLKB	1	;PROMPT FLAGS
	_VIELD	PRO,0,<-		; PROMPT FLAG BIT DEFINITIONS
		<CONCAT,,M>,-		; CONCATENATED PARAMETERS ALLOWED
		<IMPCAT,,M>,-		; PARAMETERS ARE IMPLICITLY CONCATENTAED
		<LIST,,M>,-		; PARAMETER LIST ALLOWED
		<OPTION,,M>,-		; PARAMETER IS QUALIFIER
		<REQ,,M>,-		; PARAMETER IS REQUIRED
		<STRING,,M>,-		; PARAMETER IS A STRING
		<LOCAL,,M>,-		; PRO_B_PROMPT IS AN OFFSET, NOT INDEX
	>
$DEF	PRO_K_LENGTH			;LENGTH OF PROMPT DESCRIPTOR
 
	$DEFEND	PRO
 
	.MACRO	DEFPROBLK
	.ENDM	DEFPROBLK
 
	.ENDM	DEFPROBLK
