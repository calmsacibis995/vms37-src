MODULE PMS (
		LANGUAGE (BLISS32),
		IDENT = 'V03-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  F11ACP Structure Level 1
!
! ABSTRACT:
!
!	This module contains the local performance measurement data base
!	and the performance metering routines.
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines.
!
!--
!
!
! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  25-Aug-1977  11:30
!
! MODIFIED BY:
!
!	A0100	ACG0001		Andrew C. Goldstein,  10-Oct-1978  20:01
!		Previous revision history moved to F11A.REV
!
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:FCPDEF.B32';


FORWARD ROUTINE
	PMS_START	: NOVALUE,	! start measuring main function
	PMS_END		: NOVALUE,	! end measuring main function
	PMS_START_SUB	: NOVALUE,	! start measuring subfunction
	PMS_END_SUB	: NOVALUE;	! end measuring subfunction

!+
!
! The performance measurement data base consists of the accounting array in
! system space, as well as some local storage to keep intermediate figures.
! The data accumulated per function (and also broken out for significant
! subfunctions) includes the number of functions executed, the number of
! modifiers, the number of disk reads, disk writes, and cache reads, the
! amount of CPU time, and the number of page faults.
!
!-

!
! System space data array. Each measured parameter is contained in a vector
! with one entry per function.
!

EXTERNAL
	PMS$GL_FCP	: VECTOR ADDRESSING_MODE (ABSOLUTE);
					! base of FCP measurement array

BIND
	PMS$GL_COUNT	= PMS$GL_FCP + 0	: VECTOR [10],
	PMS$GL_MCNT	= PMS$GL_FCP + 40	: VECTOR [10],
	PMS$GL_READ	= PMS$GL_FCP + 80	: VECTOR [10],
	PMS$GL_WRITE	= PMS$GL_FCP + 120	: VECTOR [10],
	PMS$GL_CACHE	= PMS$GL_FCP + 160	: VECTOR [10],
	PMS$GL_CPU	= PMS$GL_FCP + 200	: VECTOR [10],
	PMS$GL_PFA	= PMS$GL_FCP + 240	: VECTOR [10];

!
! Running totals maintained by FCP routines.
!

GLOBAL
	PMS_TOT_READ,			! total disk reads
	PMS_TOT_WRITE,			! total disk writes
	PMS_TOT_CACHE;			! total cache reads

!
! Base values of parameters at start of this function.
!

OWN
	PMS_FNC_READ,
	PMS_FNC_WRITE,
	PMS_FNC_CACHE,
	PMS_FNC_CPU,
	PMS_FNC_PFA;

!
! Base values of parameters at start of current subfunction.
!


GLOBAL
	PMS_SUB_NEST;			! nested subfunction flag

OWN
	PMS_SUB_FUNC,			! subfunction code
	PMS_SUB_READ,
	PMS_SUB_WRITE,
	PMS_SUB_CACHE,
	PMS_SUB_CPU,
	PMS_SUB_PFA;

GLOBAL ROUTINE PMS_START : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine initiates measurement for the main function being executed.
!
!
! CALLING SEQUENCE:
!	PMS_START ()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN

LOCAL
	PROCESS_HEADER	: REF BBLOCK;	! pointer to FCP process header

EXTERNAL
	CTL$GL_PHD	: REF BBLOCK ADDRESSING_MODE (ABSOLUTE);
					! address of process header in control region


! To initialize measurement, we take copies of the running totals of all the
! parameters and stash them, so we can later compute the incremental usage.
!

PROCESS_HEADER = .CTL$GL_PHD;		! get address of own process header

PMS_FNC_READ = .PMS_TOT_READ;
PMS_FNC_WRITE = .PMS_TOT_WRITE;
PMS_FNC_CACHE = .PMS_TOT_CACHE;
PMS_FNC_CPU = .PROCESS_HEADER[PHD$L_CPUTIM];
PMS_FNC_PFA = .PROCESS_HEADER[PHD$L_PAGEFLTS];

END;					! end of routine PMS_START

GLOBAL ROUTINE PMS_END : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine ends measurement for the current main function. It
!	subtracts the stored base values from the running totals of the
!	parameters and accumulates the delta in the system space cells
!	for the particular function.
!
!
! CALLING SEQUENCE:
!	PMS_END ()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	IO_PACKET: address of I/O packet of this function
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	measurement data base updated
!
!--

BEGIN

BIND					! table to translate function to array index
	FUNCTAB		= UPLIT BYTE   (IO$_ACCESS,
					IO$_CREATE,
					IO$_DEACCESS,
					IO$_DELETE,
					IO$_MODIFY,
					IO$_ACPCONTROL)
			: VECTOR [,BYTE];

LOCAL
	D,				! value of parameter change
	FUNCTION	: BBLOCK[4],	! I/O function code, including modifiers
	J,				! array index
	PROCESS_HEADER	: REF BBLOCK;	! address of own process header

EXTERNAL
	IO_PACKET	: REF BBLOCK,	! address of I/O packet
	CTL$GL_PHD	: REF BBLOCK ADDRESSING_MODE (ABSOLUTE);
					! address of process header in control region

! If there is a subfunction open, close it first.
!

IF .PMS_SUB_NEST NEQ 0
THEN
    BEGIN
    PMS_SUB_NEST = 1;
    PMS_END_SUB ();
    END;

! Derive the table index from the function code by searching the function
! code table. If the code is not found, we do not record data.
!

J =
    BEGIN
    INCR I FROM 0 TO 5 DO
    IF .IO_PACKET[IRP$V_FCODE] EQL .FUNCTAB[.I]
    THEN EXITLOOP .I
    END;

IF .J EQL -1 THEN RETURN;

! Compute the deltas and accumulate them into the system space array.
! Note that we explicitly compute the change for each parameter and then
! add it into the data base cell, to prevent windows in which the value of
! the parameter is held in a local. This is because we cannot count on the
! compiler to generate simple stores which would be hazard free.
!

PROCESS_HEADER = .CTL$GL_PHD;
FUNCTION = .IO_PACKET[IRP$W_FUNC];

PMS$GL_COUNT[.J] = .PMS$GL_COUNT[.J] + 1;
IF .FUNCTION[IO$V_ACCESS]
THEN PMS$GL_MCNT[.J] = .PMS$GL_MCNT[.J] + 1;
IF .FUNCTION[IO$V_CREATE]
THEN PMS$GL_MCNT[.J] = .PMS$GL_MCNT[.J] + 1;
IF .FUNCTION[IO$V_DELETE]
THEN PMS$GL_MCNT[.J] = .PMS$GL_MCNT[.J] + 1;
D =  .PMS_TOT_READ - .PMS_FNC_READ;
PMS$GL_READ[.J] = .PMS$GL_READ[.J] + .D;
D =  .PMS_TOT_WRITE - .PMS_FNC_WRITE;
PMS$GL_WRITE[.J] = .PMS$GL_WRITE[.J] + .D;
D =  .PMS_TOT_CACHE - .PMS_FNC_CACHE;
PMS$GL_CACHE[.J] = .PMS$GL_CACHE[.J] + .D;
D =  .PROCESS_HEADER[PHD$L_CPUTIM] - .PMS_FNC_CPU;
PMS$GL_CPU[.J] = .PMS$GL_CPU[.J] + .D;
D =  .PROCESS_HEADER[PHD$L_PAGEFLTS] - .PMS_FNC_PFA;
PMS$GL_PFA[.J] = .PMS$GL_PFA[.J] + .D;

END;					! end of routine PMS_END

GLOBAL ROUTINE PMS_START_SUB (INDEX) : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine starts metering for the indicated subfunction.
!
!
! CALLING SEQUENCE:
!	PMS_START_SUB (ARG1)
!
! INPUT PARAMETERS:
!	ARG1: index of measurement array to use
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN

LOCAL
	PROCESS_HEADER	: REF BBLOCK;	! pointer to FCP process header

EXTERNAL
	CTL$GL_PHD	: REF BBLOCK ADDRESSING_MODE (ABSOLUTE);
					! address of process header in control region

! We copy the current running totals into subfunction holding cells to
! compute the deltas later. Note that since the extend subfunction can be
! reentered, we do nothing if the depth count is already non-zero.
!

PMS_SUB_NEST = .PMS_SUB_NEST + 1;
IF .PMS_SUB_NEST NEQ 1 THEN RETURN;
PROCESS_HEADER = .CTL$GL_PHD;

PMS_SUB_FUNC = .INDEX;
PMS_SUB_READ = .PMS_TOT_READ;
PMS_SUB_WRITE = .PMS_TOT_WRITE;
PMS_SUB_CACHE = .PMS_TOT_CACHE;
PMS_SUB_CPU = .PROCESS_HEADER[PHD$L_CPUTIM];
PMS_SUB_PFA = .PROCESS_HEADER[PHD$L_PAGEFLTS];

END;					! end of routine PMS_START_SUB

GLOBAL ROUTINE PMS_END_SUB : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine ends metering for the currently active subfunction.
!
!
! CALLING SEQUENCE:
!	PMS_END_SUB ()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	measurement data base updated
!
!--

BEGIN

LOCAL
	J,				! array index
	D,				! parameter difference
	PROCESS_HEADER	: REF BBLOCK;	! pointer to FCP process header

EXTERNAL
	CTL$GL_PHD	: REF BBLOCK ADDRESSING_MODE (ABSOLUTE);
					! address of process header in control region

! Decrement the nesting count. If non-zero, we are in a nested extend and
! do nothing.
!

PMS_SUB_NEST = .PMS_SUB_NEST - 1;
IF .PMS_SUB_NEST NEQ 0 THEN RETURN;

! Now compute the delta for each parameter by subtracting the base from the
! running total. Record it by adding into the system array. Also deduct
! the delta from the charge for the main function by adding it into the
! main function base.
!

PROCESS_HEADER = .CTL$GL_PHD;
J = .PMS_SUB_FUNC;			! get array index

PMS$GL_COUNT[.J] = .PMS$GL_COUNT[.J] + 1;

D = .PMS_TOT_READ - .PMS_SUB_READ;
PMS$GL_READ[.J] = .PMS$GL_READ[.J] + .D;
PMS_FNC_READ = .PMS_FNC_READ + .D;

D = .PMS_TOT_WRITE - .PMS_SUB_WRITE;
PMS$GL_WRITE[.J] = .PMS$GL_WRITE[.J] + .D;
PMS_FNC_WRITE = .PMS_FNC_WRITE + .D;

D = .PMS_TOT_CACHE - .PMS_SUB_CACHE;
PMS$GL_CACHE[.J] = .PMS$GL_CACHE[.J] + .D;
PMS_FNC_CACHE = .PMS_FNC_CACHE + .D;

D = .PROCESS_HEADER[PHD$L_CPUTIM] - .PMS_SUB_CPU;
PMS$GL_CPU[.J] = .PMS$GL_CPU[.J] + .D;
PMS_FNC_CPU = .PMS_FNC_CPU + .D;

D = .PROCESS_HEADER[PHD$L_PAGEFLTS] - .PMS_SUB_PFA;
PMS$GL_PFA[.J] = .PMS$GL_PFA[.J] + .D;
PMS_FNC_PFA = .PMS_FNC_PFA + .D;

END;					! end of routine PMS_END_SUB

END
ELUDOM
