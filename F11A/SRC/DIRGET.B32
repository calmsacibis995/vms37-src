MODULE DIRGET (
		LANGUAGE (BLISS32),
		IDENT = 'V03-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  F11ACP Structure Level 1
!
! ABSTRACT:
!
!	This routine gets a directory record from the directory being
!	operated upon.
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines.
!
!--
!
!
! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  26-Dec-1976  18:48
!
! MODIFIED BY:
!
!	A0100	ACG0001		Andrew C. Goldstein,  10-Oct-1978  20:01
!		Previous revision history moved to F11A.REV
!
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:FCPDEF.B32';

GLOBAL ROUTINE DIRGET (RECNUMBER, MULTI) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine gets a directory record from the directory being
!	operated upon.
!
! CALLING SEQUENCE:
!	DIRGET (ARG1, ARG2)
!
! INPUT PARAMETERS:
!	ARG1: record number of directory entry to get
!	ARG2: 0 to read just 1 block
!	      1 to read multiple blocks
!
! IMPLICIT INPUTS:
!	DIR_FCB: address of FCB for directory
!	DIR_WINDOW: address of window for directory
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	address of record in buffer or
!	0 if end of file
!
! SIDE EFFECTS:
!	directory blocks read into memory
!
!--

BEGIN

LOCAL
	VBN,				! VBN of directory to read
	LBN,				! LBN of directory block
	COUNT,				! number of blocks to read
	ADDRESS;			! buffer address of record

EXTERNAL
	DIR_VBN,			! VBN of current directory block
	DIR_BUFFER	: REF BBLOCK,	! address of current directory block
	DIR_FCB		: REF BBLOCK,	! FCB for directory file
	DIR_WINDOW	: REF BBLOCK;	! window for directory file

EXTERNAL ROUTINE
	MAP_VBN,			! map VBN to LBN
	READ_BLOCK;			! read a block from the disk


! Compute the VBN of the directory block containing the desired record.
! If the VBN is the same as the last one read, skip the read.
! Check it against the directory end of file recorded in the FCB.
!

VBN = (.RECNUMBER-1) / (512/16) + 1;	! 512 byte blocks, 16 byte records
IF .VBN NEQ .DIR_VBN
THEN
    BEGIN
    DIR_VBN = 0;
    IF .VBN GTRU .DIR_FCB[FCB$L_EFBLK] THEN RETURN 0; ! no record if beyond end

! Now map VBN to LBN. If the directory is contiguous, use the FCB; if not,
! call the mapper with the window. Also, if the directory is contiguous
! and multi-block reads are enabled, compute the number of blocks to be read.
!

    COUNT = 1;
    IF .DIR_FCB[FCB$L_STLBN] NEQ 0	! non-zero start LBN means contiguous
    THEN
	BEGIN
	LBN = .DIR_FCB[FCB$L_STLBN] + .VBN - 1;
	IF .MULTI
	THEN COUNT = .DIR_FCB[FCB$L_EFBLK] - .VBN + 1;
	END
    ELSE
	BEGIN
	LBN = MAP_VBN (.VBN, .DIR_WINDOW);
	IF .LBN EQL -1 THEN RETURN 0;	! EOF if map fails
	END;

! Read the block and point to the record within it.
!

    DIR_BUFFER = READ_BLOCK (.LBN, .COUNT, DIRECTORY_TYPE);
    DIR_VBN = .VBN;
    END;

ADDRESS = .DIR_BUFFER + (.RECNUMBER-1)*16 - (.VBN-1)*512;
RETURN .ADDRESS;

END;					! end of routine DIRGET

END
ELUDOM
