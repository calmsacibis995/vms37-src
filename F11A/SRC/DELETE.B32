MODULE DELETE (
		LANGUAGE (BLISS32),
		IDENT = 'V03-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  F11ACP Structure Level 1
!
! ABSTRACT:
!
!	This routine performs the DELETE function.
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines.
!
!--
!
!
! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  1-Apr-1977
!
! MODIFIED BY:
!
!	A0101	ACG0116		Andrew C. Goldstein,	16-Jan-1980  16:47
!		Swallow errors reading the file header
!
!	A0100	ACG00001	Andrew C. Goldstein,  10-Oct-1978  20:02
!	Previous revision history moved to F11A.REV
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:FCPDEF.B32';


FORWARD ROUTINE
	DELETE,				! main delete function
	MARK_DELETE	: NOVALUE,	! mark file for delete
	MARKDEL_FCB,			! mark FCB of file for delete
	DELETE_HANDLER;			! condition handler for delete function

OWN
	SAVE_STATUS;			! place to save user status for handler

GLOBAL ROUTINE DELETE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine performs the remove and mark for delete functions.
!
! CALLING SEQUENCE:
!	DELETE ()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	IO_PACKET: I/O packet in process
!
! OUTPUT PARAMETERS:
!	PRIMARY_FCB: FCB of file
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	1
!
! SIDE EFFECTS:
!	directory entry removed
!	file marked for delete or deleted
!
!--

BEGIN

LOCAL
	ABD		: REF BBLOCKVECTOR [,ABD$C_LENGTH],
					! buffer descriptors
	FIB		: REF BBLOCK;	! FIB

EXTERNAL
	CLEANUP_FLAGS	: BITVECTOR,	! cleanup action flags
	IO_PACKET	: REF BBLOCK,	! I/O packet in process
	CURRENT_WINDOW	: REF BBLOCK,	! window of open file
	PRIMARY_FCB	: REF BBLOCK,	! FCB of file
	CURRENT_VCB	: REF BBLOCK;	! VCB of volume

EXTERNAL ROUTINE
	GET_FIB,			! get FIB of request
	FIND,				! find name in directory
	SEARCH_FCB;			! search FCB list


! First find the buffer descriptor, FIB, FCB, etc. then remove the
! directory entry.
!

					! pointer to buffer descriptors
ABD = .BBLOCK [.IO_PACKET[IRP$L_SVAPTE], AIB$L_DESCRIPT];
FIB = GET_FIB (.ABD);

IF .CURRENT_VCB[VCB$V_NOALLOC]
THEN ERR_EXIT (SS$_WRITLCK);

! If a directory ID is present, do a directory search first and remove
! the directory entry.
!

IF .FIB[FIB$W_DID_NUM] NEQ 0
THEN FIND (.ABD, .FIB, 1);

! If there is a file open on the channel, check the file ID returned by the
! FIND against that of the open file. If they do not match, treat the file
! as if it were not open.
!

IF .PRIMARY_FCB NEQ 0
THEN
    BEGIN
    IF .PRIMARY_FCB[FCB$W_FID_NUM] NEQ .FIB[FIB$W_FID_NUM]
    OR .PRIMARY_FCB[FCB$W_FID_SEQ] NEQ .FIB[FIB$W_FID_SEQ]
    THEN CURRENT_WINDOW = 0;
    END;

PRIMARY_FCB = SEARCH_FCB (FIB[FIB$W_FID]);

! Now actually mark the file for delete if requested.
!

IF .BBLOCK [IO_PACKET[IRP$W_FUNC], IO$V_DELETE]
THEN MARK_DELETE (.FIB);

RETURN 1;

END;					! end of routine DELETE

GLOBAL ROUTINE MARK_DELETE (FIB) : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine marks the indicated file for delete and deletes it
!	if it is not accessed.
!
! CALLING SEQUENCE:
!	MARK_DELETE (ARG1)
!
! INPUT PARAMETERS:
!	ARG1: address of FIB
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	file marked for delete or deleted
!
!--

BEGIN

BUILTIN
	FP;

MAP
	FIB		: REF BBLOCK;	! FIB

LOCAL
	FCB		: REF BBLOCK,	! FCB of file
	HEADER		: REF BBLOCK;	! file header

OWN
	DELETELOGENB	: INITIAL (0);	! delete logger enable

EXTERNAL
	USER_STATUS,			! status to return to user
	CLEANUP_FLAGS	: BITVECTOR,	! cleanup action flags
	CURRENT_WINDOW	: REF BBLOCK;	! window of open file

EXTERNAL ROUTINE
	SEARCH_FCB,			! search FCB list
	READ_HEADER,			! read file header
	LOG_DELETE,			! send message to delete logger
	CHECK_PROTECT,			! check file protection
	MARK_DIRTY,			! mark buffer for write-back
	DELETE_FILE,			! delete the file
	CHECKSUM;			! checksum file header


! Check that the file is not a reserved file (FID less than 5).
!

IF .FIB[FIB$W_FID_NUM] LSSU 5
THEN ERR_EXIT (SS$_NOPRIV);

! Find the FCB, if any, and then read the header. Reading the header is done
! under a condition handler that quietly exits with success if errors are
! encountered. Thus, deleting a bad file header succeeds quietly.
!

FCB = SEARCH_FCB (FIB[FIB$W_FID]);
SAVE_STATUS = .USER_STATUS;
.FP = DELETE_HANDLER;
HEADER = READ_HEADER (FIB[FIB$W_FID], .FCB);
.FP = 0;

IF .DELETELOGENB THEN LOG_DELETE (.FIB, .HEADER);

! Check file protection. Check if the file is write accessed by someone
! else and not the deleter.
!

CHECK_PROTECT (DELETE_ACCESS, .HEADER, .FCB);
IF (
    IF .FCB EQL 0
    THEN 0
    ELSE .FCB[FCB$W_WCNT] NEQ 0)
AND (
    IF .CURRENT_WINDOW EQL 0
    THEN 1
    ELSE NOT .CURRENT_WINDOW[WCB$V_WRITE])
THEN ERR_EXIT (SS$_ACCONFLICT);

CLEANUP_FLAGS[CLF_REENTER] = 0;		! from now on deletion proceeds


! Mark the file for delete. If the file is not accessed, then proceed to
! actually delete it.
!

HEADER[FH1$V_MARKDEL] = 1;
MARK_DIRTY (.HEADER);

IF KERNEL_CALL (MARKDEL_FCB, .FCB)
THEN DELETE_FILE (.FIB, .HEADER)
ELSE CHECKSUM (.HEADER);

END;					! end of routine MARK_DELETE

GLOBAL ROUTINE MARKDEL_FCB (FCB) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine marks the FCB for the current file, if any, for delete.
!	This routine must be executed in kernel mode.
!
! CALLING SEQUENCE:
!	MARKDEL_FCB (ARG1)
!
! INPUT PARAMETERS:
!	ARG1: address of FCB
!
! IMPLICIT INPUTS:
!	PRIMARY_FCB: FCB of file if any
!	DIR_FCB: FCB of directory file if any
!	CURRENT_VCB: VCB of volume
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	1 if FCB removed (i.e., if file is deletable)
!	0 if delete is to be deferred
!
! SIDE EFFECTS:
!	FCB marked for delete, may be deallocated
!
!--

BEGIN

MAP
	FCB		: REF BBLOCK;	! FCB arg

LOCAL
	DUMMY;				! dummy destination for REMQUE

EXTERNAL
	CURRENT_VCB	: REF BBLOCK,	! VCB of volume
	PRIMARY_FCB	: REF BBLOCK,	! FCB of current file
	DIR_FCB		: REF BBLOCK;	! FCB of directory file

EXTERNAL ROUTINE
	DEL_EXTFCB,			! delete extension FCB's
	DEALLOCATE;			! deallocate dynamic memory


! If the FCB exists, we mark it for delete (causing the file to be deleted
! when the access count goes to 0). Make sure that the directory LRU bit
! in the FCB is off (crediting 1 to the LRU count if it was on). If the
! access count is zero, dump the FCB and its extensions.
!

IF .FCB NEQ 0
THEN
    BEGIN
    FCB[FCB$V_MARKDEL] = 1;
    IF TESTBITSC (FCB[FCB$V_DIR])
    THEN CURRENT_VCB[VCB$B_LRU_LIM] = .CURRENT_VCB[VCB$B_LRU_LIM] + 1;
    IF .FCB[FCB$W_ACNT] NEQ 0 THEN RETURN 0; ! file is accessed
    REMQUE (.FCB, DUMMY);
    DEL_EXTFCB (.FCB);
    DEALLOCATE (.FCB);
    IF .PRIMARY_FCB EQL .FCB THEN PRIMARY_FCB = 0;
    IF .DIR_FCB EQL .FCB THEN DIR_FCB = 0;
    END;

RETURN 1;				! ok to delete file

END;					! end of routine MARKDEL_FCB

ROUTINE DELETE_HANDLER (SIGNAL, MECHANISM) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine is the condition handler for reading the file header.
!	If any errors occurr, it unwinds and returns to MARK_DELETE's caller,
!	causing the delete oif a bad file header to be a quiet NOP.
!
!
! CALLING SEQUENCE:
!	HANDLER (ARG1, ARG2)
!
! INPUT PARAMETERS:
!	ARG1: address of signal array
!	ARG2: address of mechanism array
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	SS$_RESIGNAL or none if unwind
!
! SIDE EFFECTS:
!	NONE
!
!--


BEGIN

MAP
	SIGNAL		: REF BBLOCK,	! signal arg array
	MECHANISM	: REF BBLOCK;	! mechanism arg array

EXTERNAL
	USER_STATUS;			! status to return to user


! If the condition is change mode to user (error exit) cause an unwind to
! return to DELETE's caller.
! Otherwise, just resignal the condition.
!

IF .SIGNAL[CHF$L_SIG_NAME] EQL SS$_CMODUSER
THEN
    BEGIN
    USER_STATUS = .SAVE_STATUS;
    $UNWIND ();
    END;

RETURN SS$_RESIGNAL;			! status is irrelevant if unwinding

END;					! end of routine DELETE_HANDLER

END
ELUDOM
