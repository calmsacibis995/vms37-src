MODULE MAPVBN (
		LANGUAGE (BLISS32),
		IDENT = 'V03-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  F11ACP Structure Level 1
!
! ABSTRACT:
!
!	This routine maps the specified virtual blocks to their
!	corresponding logical blocks using the supplied window.
!	The window is turned if necessary.
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines.
!
!--
!
!
! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  3-Mar-1977  12:20
!
! MODIFIED BY:
!
!	V02-002	LMP0005		L. Mark Pilant,		29-Dec-1981  15:20
!		Add support for Cathedral windows.
!
!	V02-001	ACG0229		Andrew C. Goldstein,	22-Dec-1981  19:44
!		Move updating of PMS$GL_TURN from TURN_WINDOW
!
!	V02-000	ACG0167		Andrew C. Goldstein,	7-May-1980  18:51
!		Previous revision history moved to F11A.REV
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:FCPDEF.B32';

GLOBAL ROUTINE MAP_VBN (VBN, WINDOW, BLOCK_COUNT, UNMAPPED_BLOCKS) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine maps the specified virtual blocks to their
!	corresponding logical blocks using the supplied window.
!	the window is turned if necessary.
!
! CALLING SEQUENCE:
!	MAP_VBN (ARG1, ARG2, ARG3, ARG4)
!
! INPUT PARAMETERS:
!	ARG1: desired VBN
!	ARG2: address of window to use
!	ARG3: number of blocks to map
!		if not present, 1
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	ARG4: if present, addres to store number of unmapped blocks
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	starting LBN or -1 if no map
!
! SIDE EFFECTS:
!	window may be turned, header may be read
!
!--

BEGIN

MAP
	WINDOW		: REF BBLOCK;

LOCAL
	COUNT,				! number of blocks to map
	UNMAPPED,			! address to store unmapped block count
	DUMMY,				! place for above by default
	FCB		: REF BBLOCK,	! address of FCB of file
	HEADER		: REF BBLOCK,	! address of file header
	LBN;				! resulting LBN of map

EXTERNAL
	PMS$GL_TURN	: ADDRESSING_MODE (GENERAL);
					! system count of window turns

EXTERNAL ROUTINE
	MAP_WINDOW,			! scan window map
	READ_HEADER,			! read file header
	TURN_WINDOW,			! turn window
	REMAP_FILE;			! remap the file completely


! Check the VBN for legality - i.e., non-zero and within the file size
! given in the FCB.
!

FCB = .WINDOW[WCB$L_FCB];
IF .VBN EQL 0 OR .VBN GTRU .FCB[FCB$L_FILESIZE]
THEN RETURN -1;

! If the file is multi-header, scan the extension FCB's for the one
! containing the desired VBN. The right FCB is identified by noting that
! there are no more, or that the start VBN of the next one is greater than
! the desired VBN.
!

UNTIL
    (IF .FCB[FCB$L_EXFCB] EQL 0 THEN 1
     ELSE .BBLOCK [.FCB[FCB$L_EXFCB], FCB$L_STVBN] GTRU .VBN
    )
DO FCB = .FCB[FCB$L_EXFCB];

! Default the optional arguments.
!

COUNT = (IF ACTUALCOUNT GEQ 3
	THEN .BLOCK_COUNT
	ELSE 1
	);
UNMAPPED = (IF ACTUALCOUNT GEQ 4
	THEN .UNMAPPED_BLOCKS
	ELSE DUMMY
	);

! If an extension was done on a file which was has Cathedral windows, it is
! necessary to remap the file to correctly map the extended portion of the
! file.
!

IF .WINDOW[WCB$V_CATHEDRAL] AND NOT .WINDOW[WCB$V_COMPLETE]
THEN REMAP_FILE ();

! Attempt to map the transfer with the existing window. If the map fails
! completely, turn the window and try once more. When any blocks map,
! return the relevant data.
!

DECR I FROM 2 TO 1 DO
   BEGIN

    LBN = KERNEL_CALL (MAP_WINDOW, .VBN, .WINDOW, .COUNT, .UNMAPPED);
    IF .LBN NEQ -1 THEN EXITLOOP;

    HEADER = READ_HEADER (0, .FCB);
    KERNEL_CALL (TURN_WINDOW, .WINDOW, .HEADER, .VBN, .FCB[FCB$L_STVBN]);
    PMS$GL_TURN = .PMS$GL_TURN + 1;	! count window turn in PMS data base

    END;

RETURN .LBN;

END;					! end of routine MAP_VBN

END
ELUDOM
