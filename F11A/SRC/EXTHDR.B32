MODULE EXTHDR (
		LANGUAGE (BLISS32),
		IDENT = 'V03-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  F11ACP Structure Level 1
!
! ABSTRACT:
!
!	This routine creates an extension file header for the given file
!	header.
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines.
!
!--
!
!
! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  27-Jul-1977  10:15
!
! MODIFIED BY:
!
!	V02-001	LMP0005		L. Mark Pilant,		29-Dec-1981 15:00
!		Add support for Cathedral windows.
!
!	A0100	ACG0001		Andrew C. Goldstein,  10-Oct-1978  20:01
!		Previous revision history moved to F11A.REV
!
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:FCPDEF.B32';

GLOBAL ROUTINE EXTEND_HEADER (OLD_HEADER, FCB) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine creates an extension file header for the given file
!	header.
!
!
! CALLING SEQUENCE:
!	EXTEND_HEADER (ARG1, ARG2)
!
! INPUT PARAMETERS:
!	ARG1: address of present last file header
!	ARG2: address of present last FCB or 0
!
! IMPLICIT INPUTS:
!	CURRENT_WINDOW: address of file window or 0
!	PRIMARY_FCB: primary FCB of file
!	CURRENT_VCB: address of VCB of volume
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	address of new file header
!
! SIDE EFFECTS:
!	file header created, window turned, FCB created
!
!--

BEGIN

MAP
	OLD_HEADER	: REF BBLOCK,	! file header arg
	FCB		: REF BBLOCK;	! FCB arg

LOCAL
	OLD_FID		: BBLOCK [FID$C_LENGTH], ! file ID of old header
	EXT_FID		: BBLOCK [FID$C_LENGTH], ! file ID of new header
	VBN,				! index file VBN of new header
	LBN,				! LBN of new header
	MAP_AREA	: REF BBLOCK,	! file header map area
	NEW_HEADER	: REF BBLOCK;	! address of new file header

EXTERNAL
	CLEANUP_FLAGS	: BITVECTOR,	! cleanup action flags
	USER_STATUS	: VECTOR,	! I/O status block for user
	PRIMARY_FCB	: REF BBLOCK,	! primary FCB of file
	CURRENT_WINDOW	: REF BBLOCK,	! window of file
	CURRENT_VCB	: REF BBLOCK,	! VCB of volume
	HEADER_LBN,			! LBN of current file header
	NEW_FID;			! file number of new extension header

EXTERNAL ROUTINE
	INIT_FCB,			! initialize FCB
	TURN_WINDOW,			! update window
	CHECKSUM,			! checksum file header
	MARK_DIRTY,			! mark header for writeback
	CREATE_HEADER,			! create a new file ID and header
	INVALIDATE,			! discard a block buffer
	RESET_LBN,			! reassign buffer LBN
	WRITE_HEADER,			! write file header
	READ_HEADER,			! read file header
	MAKE_EXTFCB;			! create an extension FCB


! Save the file ID of the current last header. If the file is accessed, fix
! up the FCB if it is not the primary and turn the window to include blocks
! from the header if possible. Then prepare the old header for write-back.
!

OLD_FID[FID$W_NUM] = .OLD_HEADER[FH1$W_FID_NUM];
OLD_FID[FID$W_SEQ] = .OLD_HEADER[FH1$W_FID_SEQ];
OLD_FID[FID$W_RVN] = 0;

IF .FCB NEQ 0 AND .FCB NEQ .PRIMARY_FCB
THEN KERNEL_CALL (INIT_FCB, .FCB, .OLD_HEADER);

IF .CURRENT_WINDOW NEQ 0
THEN IF NOT .CURRENT_WINDOW[WCB$V_CATHEDRAL]
THEN KERNEL_CALL (TURN_WINDOW, .CURRENT_WINDOW, .OLD_HEADER, .PRIMARY_FCB[FCB$L_FILESIZE], .FCB[FCB$L_STVBN]);

CHECKSUM (.OLD_HEADER);

! Now create the new file ID. Map and read the corresponding block in the
! index file to extract the file sequence number; then punt the buffer.
!

NEW_HEADER = CREATE_HEADER ();
EXT_FID[FID$W_NUM] = .NEW_HEADER[FH1$W_FID_NUM];
EXT_FID[FID$W_SEQ] = .NEW_HEADER[FH1$W_FID_SEQ];
LBN = .HEADER_LBN;
INVALIDATE (.NEW_HEADER);

! Get back the old file header, which may or may not have been written out
! due to buffer pool thrashing. Check the segment number for overflow.
! Plug in the header extension linkage and write it.
!

NEW_HEADER = READ_HEADER (OLD_FID, .FCB);
MAP_AREA = .NEW_HEADER + .NEW_HEADER[FH1$B_MPOFFSET]*2;
IF .MAP_AREA[FM1$B_EX_SEGNUM] GEQU 255
THEN ERR_EXIT (SS$_HEADERFULL);
MAP_AREA[FM1$W_EX_FILNUM] = .EXT_FID[FID$W_NUM];
MAP_AREA[FM1$W_EX_FILSEQ] = .EXT_FID[FID$W_SEQ];

CHECKSUM (.NEW_HEADER);
WRITE_HEADER ();
NEW_FID = 0;				! header extension is complete

! We now build the new file header over the old one in the same buffer, thus
! keeping the attributes.
!

RESET_LBN (.NEW_HEADER, .LBN);
MARK_DIRTY (.NEW_HEADER);
HEADER_LBN = .LBN;

NEW_HEADER[FH1$W_FID_NUM] = .EXT_FID[FID$W_NUM];
NEW_HEADER[FH1$W_FID_SEQ] = .EXT_FID[FID$W_SEQ];

MAP_AREA[FM1$B_EX_SEGNUM] = .MAP_AREA[FM1$B_EX_SEGNUM] + 1;
MAP_AREA[FM1$W_EX_FILNUM] = 0;
MAP_AREA[FM1$W_EX_FILSEQ] = 0;
MAP_AREA[FM1$B_INUSE] = 0;

CH$FILL (0, .MAP_AREA[FM1$B_AVAIL]*2, .MAP_AREA+FM1$C_POINTERS);

! Finally create an extension FCB if the file is accessed.
!

IF .FCB NEQ 0
THEN KERNEL_CALL (MAKE_EXTFCB, .NEW_HEADER, .FCB, 2);

RETURN (.NEW_HEADER);

END;					! end of routine EXTEND_HEADER

END
ELUDOM
