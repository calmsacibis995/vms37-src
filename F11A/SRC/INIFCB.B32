MODULE INIFCB (
		LANGUAGE (BLISS32),
		IDENT = 'V03-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  F11ACP Structure Level 1
!
! ABSTRACT:
!
!	These routines create and initialize a file control block
!	from the given file header.
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines. These routines must be called in
!	kernel mode.

!
!--
!
!
! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  14-Dec-1976  16:48
!
! MODIFIED BY:
!
!	A0100	ACG0001		Andrew C. Goldstein,  10-Oct-1978  20:01
!		Previous revision history moved to F11A.REV
!
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:FCPDEF.B32';

GLOBAL ROUTINE INIT_FCB (FCB, HEADER) : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine initializes the given FCB according to the given
!	file header.
!
! CALLING SEQUENCE:
!	INIT_FCB (ARG1, ARG2)
!
! INPUT PARAMETERS:
!	ARG1: FCB address
!	ARG2: header address
!
! IMPLICIT INPUTS:
!	HEADER_LBN contains LBN of header block
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	FCB initialized
!
!--

BEGIN

MAP
	FCB		: REF BBLOCK,	! FCB argument
	HEADER		: REF BBLOCK;	! file header arg

LOCAL
	MAP_AREA	: REF BBLOCK,	! pointer to header map area
	MAP_COUNT,			! count of map pointers
	MAP_POINTER	: REF BBLOCK,	! pointer to scan map
	FILESIZE;			! size of file in blocks

EXTERNAL
	HEADER_LBN;			! LBN of file header

! Get the known constants and the simple stuff from the file header
! (i.e., header LBN, file ID, starting VBN, file owner and file protection).
!

FCB[FCB$L_HDLBN]	= .HEADER_LBN;
FCB[FCB$W_FID_NUM]	= .HEADER[FH1$W_FID_NUM];
FCB[FCB$W_FID_SEQ]	= .HEADER[FH1$W_FID_SEQ];
FCB[FCB$W_UICMEMBER]	= .HEADER[FH1$B_UICMEMBER];
FCB[FCB$W_UICGROUP]	= .HEADER[FH1$B_UICGROUP];
FCB[FCB$W_FILEPROT]	= .HEADER[FH1$W_FILEPROT];
IF .HEADER[FH1$V_SPOOL] THEN FCB[FCB$V_SPOOL] = 1;
FCB[FCB$L_EFBLK]	= ROT (.BBLOCK[HEADER[FH1$W_RECATTR], FAT$L_EFBLK], 16);
IF  .FCB[FCB$L_EFBLK] NEQ 0
AND .BBLOCK[HEADER[FH1$W_RECATTR], FAT$W_FFBYTE] EQL 0
THEN FCB[FCB$L_EFBLK] = .FCB[FCB$L_EFBLK] - 1;

! Now scan the map area. Get the starting LBN if the file is contiguous
! and count up the file size from the retrieval pointers.
!

MAP_AREA = .HEADER + .HEADER[FH1$B_MPOFFSET]*2;
MAP_POINTER = .MAP_AREA + FM1$C_POINTERS;
FCB[FCB$W_SEGN] = .MAP_AREA[FM1$B_EX_SEGNUM];

FCB[FCB$L_STLBN] = 0;			! assume non-contiguous file
IF .HEADER[FH1$V_CONTIG]
THEN
    BEGIN
    FCB[FCB$L_STLBN] = .MAP_POINTER[FM1$W_LOWLBN]; ! get low order LBN
    (FCB[FCB$L_STLBN])<16,8> = .MAP_POINTER[FM1$B_HIGHLBN]; ! and high order
    END;

FILESIZE = 0;
DECR MAP_COUNT FROM .MAP_AREA[FM1$B_INUSE]/2 TO 1 DO
    BEGIN
    FILESIZE = .FILESIZE + .MAP_POINTER[FM1$B_COUNT] + 1;
    MAP_POINTER = .MAP_POINTER + 4;
    END;
FCB[FCB$L_FILESIZE] = .FILESIZE;

IF .FCB[FCB$L_EFBLK] GTR .FILESIZE
THEN FCB[FCB$L_EFBLK] = .FILESIZE;

END;					! end of routine INIT_FCB

END
ELUDOM
