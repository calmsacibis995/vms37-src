MODULE RDBLOK (
		LANGUAGE (BLISS32),
		IDENT = 'V03-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  F11ACP Structure Level 2
!
! ABSTRACT:
!
!	This module contains routines for basic block I/O, as well
!	as the buffer management mechanism.
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines.
!
!--
!
!
! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  13-Dec-1976  22:48
!
! MODIFIED BY:
!
!	V02-003	ACG0157		Andrew C. Goldstein,	13-Mar-1980  14:43
!		Reverse LRU ordering of buffers in multi-block read
!
!	A0102	ACG0117		Andrew C. Goldstein,	16-Jan-1980  17:00
!		Return true I/O status on ACP I/O errors
!
!	A0101	ACG0106		Andrew C. Goldstein,	15-Jan-1980  15:55
!		Change cache descriptor sizes to words
!
!	A0100	ACG00001	Andrew C. Goldstein,  10-Oct-1978  20:03
!	Previous revision history moved to F11A.REV
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:FCPDEF.B32';


FORWARD ROUTINE
	INIT_POOL	: NOVALUE,	! initialize the buffer pool
	FIND_BUFFER,			! find an appropriate I/O buffer
	READ_BLOCK,			! read a block
	RESET_LBN	: NOVALUE,	! assign new LBN to a buffer
	WRITE_BLOCK	: NOVALUE,	! write a block
	CREATE_BLOCK,			! fabricate a buffer
	MARK_DIRTY	: NOVALUE,	! mark buffer for write-back
	INVALIDATE	: NOVALUE,	! invalidate a buffer
	WRITE_HEADER	: NOVALUE,	! write file header
	FLUSH_BUFFERS	: NOVALUE,	! flush all dirty buffers
	FLUSH_FID	: NOVALUE;	! flush a file from the pool

!++
!
! Buffer pool data base.
!
! The root of the buffer data base is the pool vector which is used to index
! a block type into the buffer pool used for that type. The buffer pools are
! managed by 3 vectors, indexed by the pool code. The first vector contains
! the buffer index of the first buffer assigned to each pool. The second
! vector contains the number of buffers in each pool. The third vector 
! contains the listheads for the LRU list of each pool.
! 
! The buffers themselves are a block vector. Each buffer is identified by
! its address to the outside world, and internally by its vector index
! (the two are interchangeable in the obvious manner.) Associated with the
! buffers are status vectors: the UCB address of the currently resident
! block (0 if none), the LBN of the currently resident block, the LRU list
! entry, the file ID to which the block belongs, and the dirty bit.
!
!--


! Define the layout of the buffer pool. The pool descriptors are filled in
! by the pool initialization code. Note that each pool must consist of one
! virtually contiguous area. Note also that the storage map buffers are
! allocated first. This causes the buffer sweep at the end of each operation
! to write out the storage map blocks first, resulting in maximum safety.
!

LITERAL
	POOL_COUNT	= 3;		! number of pools

MACRO
	LRU_FLINK	= 0,0,32,0%,	! LRU entry forward link
	LRU_BLINK	= 4,0,32,0%;	! LRU entry back link

! Buffer pool vector
!

BIND
	POOL_TABLE	= UPLIT BYTE (	1,	! file headers
					0,	! storage map
					2,	! directories
					1,	! index file blocks
					2	! random data blocks
			) : VECTOR [,BYTE];

! Base index of each buffer pool
!

OWN
	POOL_BASE	: VECTOR [POOL_COUNT, WORD];

! Number of buffers in each pool
!

OWN
	POOL_SIZE	: VECTOR [POOL_COUNT, WORD];

! LRU list head for each pool
!

OWN
	POOL_LRU	: BLOCKVECTOR [POOL_COUNT, 8, BYTE];

! Pointers to buffer descriptor vectors. The vectors are dynamically allocated
! at initialization time.
!

OWN
	BUFFER_LRU	: REF BLOCKVECTOR [, 8, BYTE],
	BUFFER_FID	: REF VECTOR,
	BUFFER_LBN	: REF VECTOR,
	BUFFER_UCB	: REF VECTOR,
	BUFFER_DIRTY	: REF BITVECTOR;

! Pointer to the I/O buffers.
!

STRUCTURE
	BUFVECTOR [I; N] =
	[N*512]
	(BUFVECTOR + I*512)<0, 32>;

OWN
	BUFFERS		: REF BUFVECTOR,
	BUFFER_COUNT;

GLOBAL ROUTINE INIT_POOL : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine initializes the buffer pool. It creates sufficient
!	virtual space for the desired size buffer pool and sets up the
!	descriptors.
!
! CALLING SEQUENCE:
!	INIT_POOL ()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	pool descriptor vectors
!	ACP$GW_MAPCACHE: number of bitmap buffers to allocate
!	ACP$GW_HDRCACHE: number of header buffers to allocate
!	ACP$GW_DIRCACHE: number of directory buffers to allocate
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	pool initialized
!
!--

BEGIN

LITERAL
	EXEC_MODE	= 1;		! code for EXEC access mode

LOCAL
	MAP_COUNT,			! number of map buffers
	HDR_COUNT,			! number of header buffers
	DIR_COUNT,			! number of directory buffers
	BUFFER_SIZE,			! number of buffers in pool
	SIZE_NEEDED,			! total virtual space needed
	PAGE_COUNT,			! space actually obtained
	SPACE_DESC	: VECTOR [2];	! descriptor of retun from $EXPREG

EXTERNAL
	ACP$GW_MAPCACHE	: WORD ADDRESSING_MODE (ABSOLUTE),
					! number of map buffers to use
	ACP$GW_HDRCACHE	: WORD ADDRESSING_MODE (ABSOLUTE),
					! number of header buffers to use
	ACP$GW_DIRCACHE	: WORD ADDRESSING_MODE (ABSOLUTE);
					! number of directory buffers to use

! Compute the total virtual space needed and create it. The space needed is
! the total number of buffers plus the descriptor space - 161 bits per buffer.
!

MAP_COUNT = MAXU (1, .ACP$GW_MAPCACHE);
HDR_COUNT = MAXU (1, .ACP$GW_HDRCACHE);
DIR_COUNT = MAXU (2, .ACP$GW_DIRCACHE);
BUFFER_SIZE = .MAP_COUNT + .HDR_COUNT + .DIR_COUNT;
SIZE_NEEDED = .BUFFER_SIZE + (.BUFFER_SIZE*161 + 4095) / 4096;

$EXPREG (PAGCNT = .SIZE_NEEDED, ACMODE = EXEC_MODE, RETADR = SPACE_DESC);

! Compute the space we actually got and make sure it is at least the minimum.
! If it is less then we asked for, divide it up in the ratio 1:1:6.
!

PAGE_COUNT = (.SPACE_DESC[1] - .SPACE_DESC[0]) / 512 + 1;
IF .PAGE_COUNT LSSU 5
THEN $EXIT (CODE = SS$_INSFMEM);

IF .PAGE_COUNT LSSU .SIZE_NEEDED
THEN
    BEGIN
    BUFFER_SIZE = (.PAGE_COUNT*4096) / 4257;
    MAP_COUNT = HDR_COUNT = .BUFFER_SIZE / 8;
    DIR_COUNT = .BUFFER_SIZE - (.MAP_COUNT + .HDR_COUNT);
    END;

! Allocate and set up the pointers for the buffer descriptors and the buffers
! themselves.
!

BUFFER_LRU = .SPACE_DESC[0];
BUFFER_FID = .BUFFER_LRU + .BUFFER_SIZE*8;
BUFFER_LBN = .BUFFER_FID + .BUFFER_SIZE*4;
BUFFER_UCB = .BUFFER_LBN + .BUFFER_SIZE*4;
BUFFER_DIRTY = .BUFFER_UCB + .BUFFER_SIZE*4;
BUFFERS = .BUFFER_DIRTY + (.BUFFER_SIZE+7)/8 + 511 AND NOT 511;

POOL_SIZE[0] = .MAP_COUNT;
POOL_SIZE[1] = .HDR_COUNT;
POOL_SIZE[2] = .DIR_COUNT;
POOL_BASE[0] = 0;
POOL_BASE[1] = .MAP_COUNT;
POOL_BASE[2] = .MAP_COUNT + .HDR_COUNT;
BUFFER_COUNT = .BUFFER_SIZE;

! Loop for all pools. First init the LRU list head to be empty. Then loop
! for all buffers in each pool, linking each buffer into the pool LRU listhead.
!

INCR POOL FROM 0 TO POOL_COUNT-1 DO
    BEGIN
    POOL_LRU[.POOL, LRU_FLINK] = POOL_LRU[.POOL, LRU_FLINK];
    POOL_LRU[.POOL, LRU_BLINK] = POOL_LRU[.POOL, LRU_FLINK];

    INCR I FROM 0 TO .POOL_SIZE[.POOL]-1 DO
	INSQUE (BUFFER_LRU[.POOL_BASE[.POOL]+.I, LRU_FLINK],
		.POOL_LRU[.POOL, LRU_BLINK]);
    END;

END;					! end of routine INIT_POOL

ROUTINE FIND_BUFFER (LBN, TYPE, COUNT, FOUND_COUNT) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine searches for a buffer suitable for the indicated
!	block(s). It looks first for a buffer containing that block; failing
!	that, it finds free buffers or frees them.
!
! CALLING SEQUENCE:
!	FIND_BUFFER (ARG1, ARG2, ARG3, ARG4)
!
! INPUT PARAMETERS:
!	ARG1: LBN of first desired block
!	ARG2: type code of buffer
!	ARG3: length of buffer desired in blocks
!
! IMPLICIT INPUTS:
!	CURRENT_UCB: UCB of device in use
!	DIR_FCB: FCB of directory file
!
! OUTPUT PARAMETERS:
!	ARG4: number of blocks of buffer reserved
!
! IMPLICIT OUTPUTS:
!	BUFFER_LBN: (of returned buffer(s)) LBN of block
!	BUFFER_UCB: (of returned buffer(s)) CURRENT_UCB if block was resident,
!		zero if new buffer
!
! ROUTINE VALUE:
!	index of first buffer found
!
! SIDE EFFECTS:
!	LRU list relinked, buffers may be written
!
!--

BEGIN

LOCAL
	I,				! index of found buffer
	N,				! number of found buffers
	POOL,				! index of pool to use
	NEXT_LBN,			! next higher LBN in pool
	LRU_ENTRY	: REF BLOCK;	! pointer to buffer LRU entry

EXTERNAL
	CURRENT_UCB	: REF BBLOCK,	! UCB of current device
	CURRENT_VCB	: REF BBLOCK,	! VCB of current device
	CURRENT_FIB	: REF BBLOCK,	! address of FIB of current operation
	PMS_TOT_CACHE,			! cumulative count of buffer cache hits
	DIR_FCB		: REF BBLOCK,	! directory FCB
	ACP$GB_MAXREAD	: BYTE ADDRESSING_MODE (ABSOLUTE);
					! maximum number of blocks to read


! First search the indicated buffer pool for a buffer containing the
! desired LBN and UCB. Also track the LBN of the next highest block in the
! cache. Note that we assume that block type classes are
! nonintersecting sets, and thus avoid having the same block show up in
! multiple pools by good behavior in the file system.
!

POOL = .POOL_TABLE[.TYPE];
NEXT_LBN = -1;

I = (
    INCR J FROM .POOL_BASE[.POOL] TO .POOL_BASE[.POOL] + .POOL_SIZE[.POOL] - 1
    DO
    IF .BUFFER_UCB[.J] EQL .CURRENT_UCB
    THEN
	BEGIN
	IF  .BUFFER_LBN[.J] GEQU .LBN
	AND .BUFFER_LBN[.J] LSSU .NEXT_LBN
	THEN NEXT_LBN = .BUFFER_LBN[.J];

	IF .BUFFER_LBN[.J] EQL .LBN
	THEN EXITLOOP .J
	END
    );

! If we found a block, pull the buffer out of the LRU and count a cache hit.
! Link the buffer onto the end of the LRU list to indicate recent use.
! On a cache hit, we always return exactly one block.
!

IF .I NEQ -1
THEN
    BEGIN
    REMQUE (BUFFER_LRU[.I, LRU_FLINK], LRU_ENTRY);
    INSQUE (.LRU_ENTRY, .POOL_LRU[.POOL, LRU_BLINK]);
    PMS_TOT_CACHE = .PMS_TOT_CACHE + 1;
    .FOUND_COUNT = 1;
    END

! Get the first buffer on the LRU. If multiple buffers are requested,
! grab additional buffers in ascending memory order until we hit the end of the
! pool. Stop if we hit a block that is already in the cache (recorded by
! NEXT_LBN). If we still need more, get them in descending memory order. Then
! loop for all found buffers, relinking them onto the LRU in ascending
! order and writing them if they are dirty.
!

ELSE
    BEGIN
    I = (.POOL_LRU[.POOL, LRU_FLINK] - BUFFER_LRU[0, LRU_FLINK]) / 8;

    N = .COUNT;
    IF .N GTRU .ACP$GB_MAXREAD
    THEN N = .ACP$GB_MAXREAD;
    IF .NEXT_LBN - .LBN LEQU .N
    THEN N = .NEXT_LBN - .LBN;

    IF .POOL_SIZE[.POOL] + .POOL_BASE[.POOL] - .I LSS .N
    THEN
	BEGIN
	IF .POOL_SIZE[.POOL] LEQ .N
	THEN
	    BEGIN
	    I = .POOL_BASE[.POOL];
	    N = .POOL_SIZE[.POOL];
	    END
	ELSE
	    I = .POOL_SIZE[.POOL] + .POOL_BASE[.POOL] - .N;
	END;
    .FOUND_COUNT = .N;

    DECR J FROM .N-1 TO 0
    DO
	BEGIN
	REMQUE (BUFFER_LRU[.I+.J, LRU_FLINK], LRU_ENTRY);
	INSQUE (.LRU_ENTRY, .POOL_LRU[.POOL, LRU_BLINK]);

	IF .BUFFER_DIRTY[.I+.J]
	THEN WRITE_BLOCK (BUFFERS[.I+.J]);

	BUFFER_UCB[.I+.J] = 0;
	BUFFER_LBN[.I+.J] = .LBN + .J;

	CASE .TYPE FROM 0 TO 4 OF
	SET
	[INDEX_TYPE, HEADER_TYPE]:  BUFFER_FID[.I+.J] = 1;
	[BITMAP_TYPE]:		    BUFFER_FID[.I+.J] = 2;
	[DIRECTORY_TYPE]:	    BEGIN
				    BUFFER_FID[.I+.J] = .DIR_FCB[FCB$W_FID_NUM];
				    IF .CURRENT_VCB[VCB$V_EXTFID]
				    THEN (BUFFER_FID[.I+.J])<16,8> = .DIR_FCB[FCB$B_FID_NMX];
				    END;
	[DATA_TYPE]:		    BEGIN
				    BUFFER_FID[.I+.J] = .CURRENT_FIB[FIB$W_FID_NUM];
				    IF .CURRENT_VCB[VCB$V_EXTFID]
				    THEN (BUFFER_FID[.I+.J])<16,8> = .CURRENT_FIB[FIB$B_FID_NMX];
				    END;
	[OUTRANGE]:	(BUG_CHECK (BADBUFTYP, FATAL, 'Bad ACP buffer type code'); 0);
	TES;
	END;
    END;

RETURN .I;

END;					! end of routine FIND_BUFFER

GLOBAL ROUTINE READ_BLOCK (LBN, COUNT, TYPE) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine reads the desired block(s) from the disk.
!	Blocks are categorized by type to aid buffer management.
!	Note that the caller assumes only one block is ever read; multiple
!	blocks read ahead are acquired through cache hits on subsequent calls.
!
! CALLING SEQUENCE:
!	READ_BLOCK (ARG1, ARG2, ARG3)
!
! INPUT PARAMETERS:
!	ARG1: LBN of block(s)
!	ARG2: number of blocks to read
!	ARG3: block type code
!
! IMPLICIT INPUTS:
!	CURRENT_UCB contains address of UCB in process
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	IO_STATUS receives status of I/O transfer
!
! ROUTINE VALUE:
!	address of buffer containing block
!
! SIDE EFFECTS:
!	BLOCK READ
!
!--

BEGIN

LOCAL
	I,				! index of buffer used
	STATUS,				! QIO service status
	FOUND_COUNT;			! count of buffers gotten

EXTERNAL
	PMS_TOT_READ,			! cumulative count of disk reads
	CLEANUP_FLAGS	: BITVECTOR,	! cleanup action flags
	DIR_VBN,			! current VBN in directory buffer
	BITMAP_VBN,			! current VBN in storage map buffer
	IO_CHANNEL,			! channel number for all I/O
	CURRENT_UCB,			! UCB of device in process
	IO_STATUS	: VECTOR;	! common I/O status block


! Find a suitable block buffer. If it does not already contain the block,
! read it.
!

I = FIND_BUFFER (.LBN, .TYPE, .COUNT, FOUND_COUNT);

IF .BUFFER_UCB[.I] EQL 0
THEN
    BEGIN
    PMS_TOT_READ = .PMS_TOT_READ + 1;
    STATUS = $QIOW (
		EFN   = EFN,
		CHAN  = .IO_CHANNEL,
		FUNC  = IO$_READLBLK,
		IOSB  = IO_STATUS,
		P1    = BUFFERS[.I],
		P2    = .FOUND_COUNT*512,
		P3    = .LBN
		);
    IF NOT .STATUS THEN IO_STATUS = .STATUS;
    IF NOT .IO_STATUS
    THEN
	BEGIN
	INCR J FROM 0 TO .FOUND_COUNT-1
	DO
	    INVALIDATE (BUFFERS[.I+.J]);
	DIR_VBN = 0;
	BITMAP_VBN = 0;
	ERR_EXIT (.IO_STATUS<0,16>);
	END;
    INCR J FROM 0 TO .FOUND_COUNT - 1
    DO
	BUFFER_UCB[.I+.J] = .CURRENT_UCB;
    END;

RETURN BUFFERS[.I];

END;					! end of routine READ_BLOCK

GLOBAL ROUTINE RESET_LBN (BUFFER, LBN) : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine changes the resident LBN of the indicated block.
!
! CALLING SEQUENCE:
!	RESET_LBN (ARG1, ARG2)
!
! INPUT PARAMETERS:
!	ARG1: address of block buffer
!	ARG2: new LBN
!
! IMPLICIT INPUTS:
!	buffer descriptor arrays
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	backing LBN for buffer altered
!
!--

BEGIN

LOCAL
	I;				! index of buffer


! Compute the buffer index from the buffer address supplied. Set the
! buffer dirty bit and store the new LBN.
!

IF .BUFFER LSSU BUFFERS[0] OR .BUFFER GEQU BUFFERS[.BUFFER_COUNT]
THEN BUG_CHECK (BADBUFADR, FATAL, 'ACP buffer address out of range of buffer pool');

I = (.BUFFER - BUFFERS[0]) / 512;
BUFFER_DIRTY[.I] = 1;

BUFFER_LBN[.I] = .LBN;

END;					! end of routine RESET_LBN

GLOBAL ROUTINE WRITE_BLOCK (BUFFER) : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine writes the indicated block back to the disk.
!
! CALLING SEQUENCE:
!	WRITE_BLOCK (ARG1)
!
! INPUT PARAMETERS:
!	ARG1: address of block buffer
!
! IMPLICIT INPUTS:
!	BUFFER DESCRIPTOR ARRAYS
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	block written
!
!--

BEGIN

LOCAL
	STATUS,				! service status of QIO call
	I;				! index of buffer

EXTERNAL
	PMS_TOT_WRITE,			! cumulative count of disk writes
	CURRENT_UCB	: REF BBLOCK,	! UCB of volume in process
	DIR_VBN,			! current VBN in directory buffer
	BITMAP_VBN,			! current VBN in storage map buffer
	UNREC_COUNT,			! unrecorded but allocated blocks
	NEW_FID,			! unrecorded new file ID
	IO_CHANNEL,			! channel number for all I/O
	IO_STATUS	: VECTOR,	! status block for all I/O
	CLEANUP_FLAGS	: BITVECTOR,	! cleanup action flags
	CONTEXT_SAVE	: BITVECTOR,	! context save area
	CONTEXT_START;			! start of reentrant context area


! Compute the buffer index from the buffer address supplied. Clear the
! buffer dirty bit and make sure the buffer ucb address corresponds to the
! current UCB.
!

IF .BUFFER LSSU BUFFERS[0] OR .BUFFER GEQU BUFFERS[.BUFFER_COUNT]
THEN BUG_CHECK (BADBUFADR, FATAL, 'ACP buffer address out of range of buffer pool');

I = (.BUFFER - BUFFERS[0]) / 512;
BUFFER_DIRTY[.I] = 0;

IF .BUFFER_UCB[.I] NEQ .CURRENT_UCB
    THEN BUG_CHECK (WRTINVBUF, FATAL, 'ACP attempted to write an invalid buffer');

PMS_TOT_WRITE = .PMS_TOT_WRITE + 1;
STATUS = $QIOW (
		EFN  = EFN,
		CHAN = .IO_CHANNEL,
		FUNC = IO$_WRITELBLK,
		IOSB = IO_STATUS,
		P1   = BUFFERS[.I],
		P2   = 512,
		P3   = .BUFFER_LBN[.I]
		);

! If an I/O error occurrs, we must take special error handling. The first level
! handling currently implemented works for simple errors such as a write
! locked disk. It will not correctly unwind if successful writes have already
! occurred. We flush the cache of all buffers containing blocks from the current
! volume, and disable those portions of the cleanup that attempt to alter the
! disk.
!

IF NOT .STATUS THEN IO_STATUS = .STATUS;
IF NOT .IO_STATUS
THEN
    BEGIN
    DIR_VBN = 0;
    BITMAP_VBN = 0;
    NEW_FID = 0;
    UNREC_COUNT = 0;
    CLEANUP_FLAGS = .CLEANUP_FLAGS AND NOT CLF_M_WRITEDISK;
    CLEANUP_FLAGS[CLF_FIXFCB] = 1;
    IF .CONTEXT_SAVE NEQ 0
    THEN
	BEGIN
	(CONTEXT_SAVE - CONTEXT_START + UNREC_COUNT) = 0;
	CONTEXT_SAVE = .CONTEXT_SAVE AND NOT CLF_M_WRITEDISK;
	CONTEXT_SAVE[CLF_FIXFCB] = 1;
	END;
    CH$FILL (0, (.BUFFER_COUNT+7)/8, BUFFER_DIRTY[0]);
    FLUSH_FID (0);
    ERR_EXIT (.IO_STATUS<0,16>);
    END;

END;					! end of routine WRITE_BLOCK


!++
!
!	The routine DIRPUT is equivalent to WRITE_BLOCK
!
!--

GLOBAL BIND ROUTINE
	DIRPUT		= WRITE_BLOCK;	! write a directory record

GLOBAL ROUTINE CREATE_BLOCK (LBN, COUNT, TYPE, COUNT_FOUND) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine fabricates block buffer(s) containing the designated
!	block(s). The type code is as for READ_BLOCK and determines the buffer
!	pool to be used.
!
! CALLING SEQUENCE:
!	CREATE_BLOCK (ARG1, ARG2, ARG3, ARG4)
!
! INPUT PARAMETERS:
!	ARG1: LBN to be assigned to block
!	ARG2: number of blocks to reserve in buffer
!	ARG3: block type code
!
! IMPLICIT INPUTS:
!	CURRENT_UCB: UCB address of device in process
!
! OUTPUT PARAMETERS:
!	ARG4: number of buffers found (optional)
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	address of buffer
!
! SIDE EFFECTS:
!	buffer zeroed and recorded as a block read
!
!--

BEGIN

LOCAL
	I,				! index of buffer to use
	FOUND_COUNT;			! number of buffers gotten

EXTERNAL
	CURRENT_UCB	: REF BBLOCK;	! address of device UCB


! Find an available buffer. Mark it resident and dirty and fill it with
! zeroes.
!

I = FIND_BUFFER (.LBN, .TYPE, .COUNT, FOUND_COUNT);
INCR J FROM 0 TO .FOUND_COUNT - 1
DO
    BEGIN
    BUFFER_UCB[.I+.J] = .CURRENT_UCB;
    CH$FILL (0, 512, BUFFERS[.I+.J]);
    BUFFER_DIRTY[.I+.J] = 1;
    END;

IF ACTUALCOUNT GEQU 4
THEN .COUNT_FOUND = .FOUND_COUNT;
RETURN BUFFERS[.I];

END;					! end of routine CREATE_BLOCK

GLOBAL ROUTINE MARK_DIRTY (BUFFER) : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine marks the indicated buffer for write-back.
!
! CALLING SEQUENCE:
!	MARK_DIRTY (ARG1)
!
! INPUT PARAMETERS:
!	ARG1: address of block buffer
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	buffer marked for write-back
!
!--

BEGIN

LOCAL
	I;				! index of buffer


IF .BUFFER LSSU BUFFERS[0] OR .BUFFER GEQU BUFFERS[.BUFFER_COUNT]
THEN BUG_CHECK (BADBUFADR, FATAL, 'ACP buffer address out of range of buffer pool');

I = (.BUFFER - BUFFERS[0]) / 512;

BUFFER_DIRTY[.I] = 1;

END;					! end of routine MARK_DIRTY

GLOBAL ROUTINE INVALIDATE (BUFFER) : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine invalidates the indicated buffer.
!
! CALLING SEQUENCE:
!	INVALIDATE (ARG1)
!
! INPUT PARAMETERS:
!	ARG1: address of block buffer
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	buffer contents forgotten
!
!--

BEGIN

LOCAL
	I,				! index of buffer
	POOL,				! index of pool
	LRU_ENTRY;			! address of LRU list entry


! A buffer is invalidated by zeroing its associated UCB address and
! clearing the dirty bit. Also, we relink the buffer onto the front of the
! buffer LRU to encourage its re-use.
!

IF .BUFFER LSSU BUFFERS[0] OR .BUFFER GEQU BUFFERS[.BUFFER_COUNT]
THEN BUG_CHECK (BADBUFADR, FATAL, 'ACP buffer address out of range of buffer pool');

I = (.BUFFER - BUFFERS[0]) / 512;
POOL = (
    INCR J FROM 0 TO POOL_COUNT-1 DO
    IF .I LSS .POOL_BASE[.J] + .POOL_SIZE[.J]
    THEN EXITLOOP .J
    );

BUFFER_UCB[.I] = 0;
BUFFER_DIRTY[.I] = 0;

REMQUE (BUFFER_LRU[.I, LRU_FLINK], LRU_ENTRY);
INSQUE (.LRU_ENTRY, POOL_LRU[.POOL, LRU_FLINK]);

END;					! end of routine INVALIDATE

GLOBAL ROUTINE WRITE_HEADER : NOVALUE  =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine writes out the currently resident file header.
!
! CALLING SEQUENCE:
!	WRITE_HEADER ()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	FILE_HEADER: address of current file header
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	IO_STATUS: status of I/O transfer
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	checksum checked, header written
!
!--

BEGIN

EXTERNAL
	FILE_HEADER	: REF BBLOCK;	! address of last file header read

EXTERNAL ROUTINE
	CHECKSUM;			! compute file header checksum


! The checksum of the header should be good, since all routines that modify
! the header bless it with a new checksum when they are finished. Check the
! checksum and write the header.
!

IF NOT CHECKSUM (.FILE_HEADER)
THEN BUG_CHECK (WRTINVHDR, FATAL, 'ACP attempted to write an invalid file header');

WRITE_BLOCK (.FILE_HEADER);

END;					! end of routine WRITE_HEADER

GLOBAL ROUTINE FLUSH_BUFFERS : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine writes all buffers which were modified back to the
!	disk from whence they came.
!
! CALLING SEQUENCE:
!	FLUSH_BUFFERS[0] ()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	all own storage of this module
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	dirty buffers written.
!
!--

BEGIN


! We simply scan the dirty bit vector and write all buffers marked dirty.
!

INCR I FROM 0 TO .BUFFER_COUNT-1 DO
    IF .BUFFER_DIRTY[.I]
    THEN WRITE_BLOCK (BUFFERS[.I]);

END;					! end of routine FLUSH_BUFFERS[0]

GLOBAL ROUTINE FLUSH_FID (FID) : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine removes from the buffer cache all blocks contained
!	within the specified file. Dirty buffers are written.
!
! CALLING SEQUENCE:
!	FLUSH_FID (ARG1)
!
! INPUT PARAMETERS:
!	ARG1: file ID of file to flush
!	      0 to match all
!
! IMPLICIT INPUTS:
!	all own storage of this module
!	CURRENT_UCB: UCB of current device
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	dirty buffers written, appropriate buffers invalidated
!
!--

BEGIN

MAP
	FID		: REF BBLOCK;	! file ID arg
LOCAL
	I;				! index to buffers

EXTERNAL
	CURRENT_UCB	: REF BBLOCK,	! address of device UCB
	CURRENT_VCB	: REF BBLOCK;	! address of current VCB


! We scan the UCB and FID vectors looking for matches. Buffers that match
! are written if dirty and then invalidated.
!

INCR I FROM 0 TO .BUFFER_COUNT-1 DO
    BEGIN
    IF .BUFFER_UCB[.I] EQL .CURRENT_UCB
    AND (.FID EQL 0
	OR  (.(BUFFER_FID[.I])<0,16> EQL .FID[FID$W_NUM]
	    AND (IF .CURRENT_VCB[VCB$V_EXTFID]
		THEN .(BUFFER_FID[.I])<16,8> EQL .FID[FID$B_NMX]
		ELSE 1
		)
	    )
	)
    THEN
	BEGIN
	IF .BUFFER_DIRTY[.I]
	THEN WRITE_BLOCK (BUFFERS[.I]);
	INVALIDATE (BUFFERS[.I]);
	END;
    END;

END;					! end of routine FLUSH_FID

END
ELUDOM
