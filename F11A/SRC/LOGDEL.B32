MODULE LOGDEL (
		LANGUAGE (BLISS32),
		IDENT = 'V03-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  F11ACP Structure Level 1
!
! ABSTRACT:
!
!	This routine sends a message to log each delete operation that takes
!	place.
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines.
!
!--
!
!
! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  21-Jul-1978  13:10
!
! MODIFIED BY:
!
!	A0100	ACG0001		Andrew C. Goldstein,  10-Oct-1978  20:01
!		Previous revision history moved to F11A.REV
!
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:FCPDEF.B32';

!+
!
! Format of message to the delete logger
!
!-

MACRO
	MSG_TIME	= 00, 0, 0, 0%,	! time of day (8 bytes)
	MSG_DEVNAME	= 08, 0,32, 0%,	! device name (counted ascii)
	MSG_UNIT	= 12, 0,16, 0%,	! unit number
	MSG_DID		= 14, 0, 0, 0%,	! directory ID (6 bytes)
	MSG_FILENAME	= 20, 0, 0, 0%,	! file name (20 bytes)
	MSG_OWNER	= 40, 0,32, 0%,	! file owner UIC
	MSG_PROCNAME	= 44, 0, 0, 0%,	! process name (16 bytes)
	MSG_UIC		= 60, 0,32, 0%;	! process UIC

LITERAL
	MESSAGE_LENGTH	= 64;		! length of message

GLOBAL ROUTINE LOG_DELETE (FIB, HEADER) : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine sends a message to log each delete operation that takes
!	place.
!
!
! CALLING SEQUENCE:
!	LOG_DELETE (ARG1, ARG2)
!
! INPUT PARAMETERS:
!	ARG1: address of user FIB
!	ARG2: address of file header
!
! IMPLICIT INPUTS:
!	IO_PACKET: address of I/O request packet
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	message sent to delete logger mailbox
!
!--

BEGIN

MAP
	FIB		: REF BBLOCK,	! user FIB
	HEADER		: REF BBLOCK;	! file header arg

LOCAL
	MESSAGE		: BBLOCK [MESSAGE_LENGTH], ! message buffer
	IDENT_AREA	: REF BBLOCK,	! address of header ident area
	PCB		: REF BBLOCK,	! address of caller PCB
	CHANNEL		: WORD;		! channel assigned to mailbox

EXTERNAL
	IO_PACKET	: REF BBLOCK,	! address of I/O packet
	CURRENT_UCB	: REF BBLOCK,	! address of device UCB
	SCH$GL_PCBVEC	: REF VECTOR ADDRESSING_MODE (ABSOLUTE);
					! system PCB vector

EXTERNAL ROUTINE
	MAKE_STRING;			! make string from RAD-50 file name


! Assign a channel to the mailbox. If the assignment fails, the logger is not
! running. Then build the message and send it.
!

IF NOT $ASSIGN (CHAN = CHANNEL, DEVNAM = DESCRIPTOR ('ACP$DELLOG_MBX'))
THEN RETURN;

$GETTIM (TIMADR = MESSAGE[MSG_TIME]);	! time of day
MESSAGE[MSG_DEVNAME]	= .(BBLOCK [.CURRENT_UCB[UCB$L_DDB], DDB$T_NAME])<0,32>;
MESSAGE[MSG_UNIT]	= .CURRENT_UCB[UCB$W_UNIT];
CH$MOVE (FIB$S_DID, FIB[FIB$W_DID], MESSAGE[MSG_DID]);
IDENT_AREA = .HEADER + .HEADER[FH1$B_IDOFFSET]*2;
CH$FILL (' ', 20, MESSAGE[MSG_FILENAME]);
MAKE_STRING (IDENT_AREA[FI1$W_FILENAME]-6, MESSAGE[MSG_FILENAME]);
MESSAGE[MSG_OWNER]	= .(HEADER[FH1$W_FILEOWNER])<0,8>;
(MESSAGE[MSG_OWNER])<16,8>= .(HEADER[FH1$W_FILEOWNER])<8,8>;
PCB = .SCH$GL_PCBVEC[.(IO_PACKET[IRP$L_PID])<0,16>];
CH$MOVE (PCB$S_LNAME, PCB[PCB$T_LNAME], MESSAGE[MSG_PROCNAME]);
MESSAGE[MSG_UIC]	= .PCB[PCB$L_UIC];

$QIOW (
	CHAN = .CHANNEL,
	FUNC = IO$_WRITEVBLK OR IO$M_NOW,
	P1   = MESSAGE,
	P2   = MESSAGE_LENGTH
	);

$DASSGN (CHAN = .CHANNEL);

END;					! end of routine LOG_DELETE

END
ELUDOM
