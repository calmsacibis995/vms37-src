MODULE SNDERL (
		LANGUAGE (BLISS32),
		IDENT = 'V03-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  F11ACP Structure Level 1
!
! ABSTRACT:
!
!	This routine sends a message to the error logger to inform it of a
!	volume mount or dismount.
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines.
!
!--
!
!
! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  23-Jun-1978  18:47
!
! MODIFIED BY:
!
!	A0100	ACG0001		Andrew C. Goldstein,  10-Oct-1978  20:01
!		Previous revision history moved to F11A.REV
!
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:FCPDEF.B32';

!
! This routine is called at raised IPL and must be locked into the working set.
!

LOCK_CODE;

GLOBAL ROUTINE SEND_ERRLOG (MODE, UCB) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine sends a message to the error logger to inform it of a
!	volume mount or dismount.
!
!
! CALLING SEQUENCE:
!	SEND_ERRLOG (ARG1, ARG2)
!
! INPUT PARAMETERS:
!	ARG1: 1 to signal mount
!	      0 to signal dismount
!	ARG3: address of UCB
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	1
!
! SIDE EFFECTS:
!	Message sent to error logger
!
!--

BEGIN

MAP
	UCB		: REF BBLOCK;	! UCB argument

LINKAGE
	L_ERL_ALLOC	= JSB (REGISTER = 1) :
			  GLOBAL (ADDRESS = 2)
			  NOTUSED (3, 4, 5, 6, 7, 8, 9, 10, 11),

	L_ERL_RELEASE	= JSB (REGISTER = 2) :
			  NOTUSED (3, 4, 5, 6, 7, 8, 9, 10, 11);

LOCAL
	MSG_BUFFER	: REF BBLOCK;	! other buffer pointer to dodge MOVC

EXTERNAL ROUTINE
	ERL$ALLOCEMB	: L_ERL_ALLOC ADDRESSING_MODE (GENERAL),
					! allocate error log buffer
	ERL$RELEASEMB	: L_ERL_RELEASE ADDRESSING_MODE (GENERAL);
					! release error log buffer


! Allocate an errror log buffer. If this fails, forget it.
!

BEGIN
GLOBAL REGISTER
	ADDRESS		= 2 : REF BBLOCK; ! pointer to error log buffer

IF NOT ERL$ALLOCEMB (EMB$K_VM_LENGTH)
THEN RETURN 1;
MSG_BUFFER = .ADDRESS;
END;

! Now fill in the message buffer.
!

IF .MODE
THEN MSG_BUFFER[EMB$W_VM_ENTRY] = EMB$K_VM
ELSE MSG_BUFFER[EMB$W_VM_ENTRY] = EMB$K_VD;	! log entry type

MSG_BUFFER[EMB$L_VM_OWNUIC]	= .UCB[UCB$L_OWNUIC];
MSG_BUFFER[EMB$L_VM_ERRCNT]	= .UCB[UCB$W_ERRCNT];
MSG_BUFFER[EMB$L_VM_OPRCNT]	= .UCB[UCB$L_OPCNT];
MSG_BUFFER[EMB$W_VM_UNIT]	= .UCB[UCB$W_UNIT];

MSG_BUFFER[EMB$W_VM_VOLNUM]	= 0;
MSG_BUFFER[EMB$W_VM_NUMSET]	= 0;

CH$MOVE (.(BBLOCK [.UCB[UCB$L_DDB], DDB$T_NAME])<0,8> + 1,
	 BBLOCK [.UCB[UCB$L_DDB], DDB$T_NAME],
	 MSG_BUFFER[EMB$B_VM_NAMLNG]);

IF .BBLOCK[UCB[UCB$L_DEVCHAR],DEV$V_FOR]
OR NOT .BBLOCK[UCB[UCB$L_DEVCHAR],DEV$V_SQD]
THEN
    CH$MOVE (VCB$S_VOLNAME,
	 BBLOCK [.UCB[UCB$L_VCB], VCB$T_VOLNAME],
	 MSG_BUFFER[EMB$T_VM_LABEL])
ELSE
    BEGIN
    LOCAL
	MVL		: REF BBLOCK,		! magtape volume labels
	MVL_ENTRY	: REF BBLOCK,		! address of label entry
	RUN,					! relative unit number
	RVT		: REF BBLOCK,		! relative volume table
	UCBLIST		: REF VECTOR,		! address of UCB list
	VCB		: REF BBLOCK;		! volume control block
    VCB = .UCB[UCB$L_VCB];
    RVT = .VCB[VCB$L_RVT];
    UCBLIST = RVT[RVT$L_UCBLST];
    MVL = .VCB[VCB$L_MVL];
    MSG_BUFFER[EMB$W_VM_NUMSET] = .MVL[MVL$B_NVOLS];	! no of volumes in vol set known
    CH$FILL(' ',VCB$S_VOLNAME,MSG_BUFFER[EMB$T_VM_LABEL]);
    INCR I FROM 0 TO .RVT[RVT$B_NVOLS] - 1 DO
	BEGIN
	RUN = .I;
	IF .UCBLIST[.I] EQL .UCB THEN EXITLOOP;
	END;
    MVL_ENTRY = .MVL + MVL$K_FIXLEN;
    INCR I FROM 0 TO .MVL[MVL$B_NVOLS] -1 DO
	BEGIN
	IF .MVL_ENTRY[MVL$B_RVN] EQL .RUN
	AND .MVL_ENTRY[MVL$V_MOUNTED] 
	THEN
	    BEGIN
	    MSG_BUFFER[EMB$W_VM_VOLNUM] = .I + 1;
	    CH$COPY(MVL$S_VOLLBL,MVL_ENTRY[MVL$T_VOLLBL],' ',
		VCB$S_VOLNAME,MSG_BUFFER[EMB$T_VM_LABEL]);
	    EXITLOOP;
	    END;
	MVL_ENTRY = .MVL_ENTRY + MVL$K_LENGTH;
	END;
    END;


! Finally release the buffer and make the entry.
!

ERL$RELEASEMB (.MSG_BUFFER);

RETURN 1;

END;					! end of routine SEND_ERRLOG

END
ELUDOM
