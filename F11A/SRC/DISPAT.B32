MODULE DISPAT (
		LANGUAGE (BLISS32),
		MAIN  = STARTUP,
		IDENT = 'V03-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  F11ACP Structure Level 1
!
! ABSTRACT:
!
!	This module is the main routine of FCP. It dequeues a request,
!	executes it, and signals completion to the user.
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines.
!
!--
!
!
! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  20-Dec-1976  14:33
!
! MODIFIED BY:
!
!	V02-001	LMP0005		L. Mark Pilant,		13-Jan-1982  13:10
!		Adding support for Cathedral windows.
!
!	A0100	ACG0001		Andrew C. Goldstein,  10-Oct-1978  20:01
!		Previous revision history moved to F11A.REV
!
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:FCPDEF.B32';

!
! Establish the max and min function codes for the function dispatch.
!

LITERAL
	LOW_FUNCTION	= MINU (
		IO$_ACCESS,
		IO$_CREATE,
		IO$_DEACCESS,
		IO$_DELETE,
		IO$_MODIFY,
		IO$_ACPCONTROL,
		IO$_MOUNT
		),

	HIGH_FUNCTION	= MAXU (
		IO$_ACCESS,
		IO$_CREATE,
		IO$_DEACCESS,
		IO$_DELETE,
		IO$_MODIFY,
		IO$_ACPCONTROL,
		IO$_MOUNT
		);

FORWARD ROUTINE
	STARTUP		: NOVALUE,
	DISPATCHER	: NOVALUE,
	MAIN_HANDLER	: NOVALUE;

GLOBAL ROUTINE STARTUP : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine is the startup point for FCP. It locks all of FCP
!	into memory and then calls the dispatcher loop in exec mode.
!
! CALLING SEQUENCE:
!	UNDEFINED
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	FCP locked into memory, dispatcher started.
!
!--

BEGIN


EXEC_CALL (DISPATCHER);

END;					! end of routine STARTUP

GLOBAL ROUTINE DISPATCHER : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine is the main routine of FCP. It dequeues a request,
!	executes it, and signals completion to the user.
!
! CALLING SEQUENCE:
!	DISPATCHER ()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	FCP functions executed
!
!--

BEGIN

LOCAL
	FUNCTION;			! function being executed

EXTERNAL
	IO_PACKET	: REF BBLOCK;	! current I/O packet

EXTERNAL ROUTINE
	INIT_FCP,			! one time initialization
	INIT_COMMON,			! per call initialization
	PMS_START,			! start performance metering
	PMS_END,			! end performance metering
	GET_REQUEST,			! get next I/O request
	READ_WRITEVB,			! process read/write virtual
	ACCESS,				! ACCESS function routine
	CREATE,				! CREATE function routine
	DEACCESS,			! DEACCESS function routine
	DELETE,				! DELETE function routine
	MODIFY,				! MODIFY function routine
	ACPCONTROL,			! ACPCONTROL function routine
	MOUNT,				! MOUNT function routine
	ERR_CLEANUP,			! error cleanup routine
	CLEANUP,			! general cleanup routine
	IO_DONE;			! I/O completion processing


! Do the one time initialization. Then for each request, do the per
! request initialization, get the next request, and process it. If
! the request fails, call the error cleanup before returning
! completion.
!

!	ENABLE MAIN_HANDLER;
BEGIN
BUILTIN FP;
.FP = MAIN_HANDLER;
END;
KERNEL_CALL (INIT_FCP);

WHILE 1 DO
    BEGIN
    PMS_START ();
    INIT_COMMON ();
    IO_PACKET = KERNEL_CALL (GET_REQUEST);
    FUNCTION = .IO_PACKET[IRP$V_FCODE];

    IF .FUNCTION EQL IO$_READPBLK
    OR .FUNCTION EQL IO$_WRITEPBLK
    THEN
	BEGIN
	IF NOT READ_WRITEVB ()
	THEN
	    BEGIN
	    IF ERR_CLEANUP () THEN CLEANUP () ELSE (ERR_CLEANUP (); CLEANUP ());
	    PMS_END ();
	    KERNEL_CALL (IO_DONE, .IO_PACKET);
	    END;
	END
    ELSE
	BEGIN

	IF
	    (
	    CASE .FUNCTION FROM LOW_FUNCTION TO HIGH_FUNCTION OF
		SET
		[IO$_ACCESS]:	ACCESS ();
		[IO$_CREATE]:	CREATE ();
		[IO$_DEACCESS]:	DEACCESS ();
		[IO$_DELETE]:	DELETE ();
		[IO$_MODIFY]:	MODIFY ();
		[IO$_ACPCONTROL]: ACPCONTROL ();
		[IO$_MOUNT]:	MOUNT ();
		[INRANGE]:	(ERR_STATUS (SS$_ILLIOFUNC); 0);
		[OUTRANGE]:	(ERR_STATUS (SS$_ILLIOFUNC); 0);
		TES
	    )
	THEN				! successful completion
	    BEGIN
	    IF NOT CLEANUP () THEN (ERR_CLEANUP (); CLEANUP ());
	    END
	ELSE				! error completion
	    BEGIN
	    IF ERR_CLEANUP () THEN CLEANUP () ELSE (ERR_CLEANUP (); CLEANUP ());
	    END;

	PMS_END ();
	KERNEL_CALL (IO_DONE, .IO_PACKET);
	END
    END;

END;					! end of routine DISPATCHER
GLOBAL ROUTINE MAIN_HANDLER (SIGNAL, MECHANISM) : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine is the main level condition handler. It stores the
!	condition value (FCP error code) in the user status block, unwinds
!	and returns from the function that was executing.
!
! CALLING SEQUENCE:
!	MAIN_HANDLER (ARG1, ARG2)
!
! INPUT PARAMETERS:
!	ARG1: address of signal array
!	ARG2: address of mechanism array
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	USER_STATUS: receives signal code
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	stack unwound to main level to return to dispatcher
!
!--

BEGIN

MAP
	SIGNAL		: REF BBLOCK,	! signal array arg
	MECHANISM	: REF BBLOCK;	! mechanism array arg

EXTERNAL
	USER_STATUS	: WORD;		! I/O status to user

EXTERNAL ROUTINE
	SYS$UNWIND	: ADDRESSING_MODE (ABSOLUTE);


! Check the signal code. The only permissible ones are SS$_UNWIND, which
! is ignored, and SS$_CMODUSER. The error status is the 16 bit CHMU code.
! If the error value is non-zero, store it in the user status (zero
! means just exit). Set up a return value of 0, unwind to the current
! depth, and return, causing the invoked function to return with failure
! to the dispatcher.
!

IF .SIGNAL[CHF$L_SIG_NAME] EQL SS$_UNWIND THEN RETURN;
IF .SIGNAL[CHF$L_SIG_NAME] NEQ SS$_CMODUSER
THEN BUG_CHECK (UNXSIGNAL, FATAL, 'Unexpected signal name in ACP');

IF .SIGNAL[CHF$L_SIG_ARG1] NEQ 0
THEN USER_STATUS = .SIGNAL[CHF$L_SIG_ARG1];

MECHANISM[CHF$L_MCH_SAVR0] = 0;

SYS$UNWIND (MECHANISM[CHF$L_MCH_DEPTH], 0);

RETURN;

END;					! end of routine MAIN_HANDLER

END
ELUDOM
