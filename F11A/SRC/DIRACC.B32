MODULE DIRACC (
		LANGUAGE (BLISS32),
		IDENT = 'V03-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  F11ACP Structure Level 1
!
! ABSTRACT:
!
!	This routine "accesses" a directory and readies it for processing.
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines.
!
!--
!
!
! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  2-Jan-1977  22:53
!
! MODIFIED BY:
!
!	V02-002	ACG0229		Andrew C. Goldstein,	22-Dec-1981  19:49
!		Count directory LRU hits and misses
!
!	V02-001	ACG33975	Andrew C. Goldstein,	13-Mar-1981  15:46
!		Fix losing directory FCB's when LRU is disabled
!
!	V02-000	ACG0167		Andrew C. Goldstein,	7-May-1980  18:49
!		Previous revision history moved to F11A.REV
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:FCPDEF.B32';

GLOBAL ROUTINE DIR_ACCESS (FIB, WRITE) : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine "accesses" a directory and readies it for processing.
!
! CALLING SEQUENCE:
!	DIR_ACCESS (ARG1, ARG2)
!
! INPUT PARAMETERS:
!	ARG1: address of FIB
!	ARG2: 0 if read only
!	      1 if read/write
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	DIR_FCB: address of FCB for directory
!	DIR_WINDOW: address of window, if any
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	FCB and/or window may be created
!	directory LRU may be altered
!	directory file header may be read
!
!--

BEGIN

MAP
	FIB		: REF BBLOCK;	! FIB argument

LOCAL
	TEMP,				! temp storage for file header address
	FCB		: REF BBLOCK,	! FCB address
	HEADER		: REF BBLOCK,	! directory header address
	MAP_AREA	: REF BBLOCK;	! address of file header map area

EXTERNAL
	DIR_FCB		: REF BBLOCK,	! global FCB address
	DIR_WINDOW	: REF BBLOCK,	! global window address
	FILE_HEADER	: REF BBLOCK,	! global file header address
	PMS$GL_DIRHIT	: ADDRESSING_MODE (GENERAL),
					! count of directory LRU hits
	PMS$GL_DIRMISS	: ADDRESSING_MODE (GENERAL);
					! count of directory LRU misses

EXTERNAL ROUTINE
	SEARCH_FCB,			! search FCB list
	READ_HEADER,			! read file header
	CREATE_FCB,			! create an FCB
	CREATE_WINDOW,			! create a file window
	CHECK_PROTECT,			! check file protection
	MAKE_DIR_FCB;			! put directory FCB in LRU


! First find the FCB of the directory, if any exists.
!

HEADER = 0;				! assume no header
IF (FCB = .DIR_FCB) EQL 0
THEN
    BEGIN
    FCB = SEARCH_FCB (FIB[FIB$W_DID]);

! If there was no FCB, or it is an accessed file, read the header.
! If the FCB is in the LRU, check the sequence number since no
! one else does. If there was no FCB, create one.
!

    IF (IF .FCB EQL 0 THEN 1 ELSE (NOT .FCB[FCB$V_DIR]))
    THEN
	BEGIN
	PMS$GL_DIRMISS = .PMS$GL_DIRMISS + 1;
	TEMP = .FILE_HEADER;
	HEADER = READ_HEADER (FIB[FIB$W_DID], .FCB);
	FILE_HEADER = .TEMP;		! restore address for cleanup
	END
    ELSE
	BEGIN
	PMS$GL_DIRHIT = .PMS$GL_DIRHIT + 1;
	IF .FCB[FCB$W_FID_SEQ] NEQ .FIB[FIB$W_DID_SEQ]
	THEN ERR_EXIT (SS$_FILESEQCHK);
	END;

    IF .FCB EQL 0
    THEN FCB = KERNEL_CALL (CREATE_FCB, .HEADER);
    DIR_FCB = .FCB;				! store global FCB address
    END;

! Check directory file protection.
!

CHECK_PROTECT (.WRITE, .HEADER, .FCB);

! If we read a header, check the file attributes to make sure that
! this is a real directory file.
!

IF .HEADER NEQ 0
THEN
    BEGIN
    MAP_AREA = .HEADER + .HEADER[FH1$B_MPOFFSET]*2;
    IF .BBLOCK [HEADER[FH1$W_RECATTR], FAT$B_RTYPE] NEQ FAT$C_FIXED
    OR .BBLOCK [HEADER[FH1$W_RECATTR], FAT$W_RSIZE] NEQ 16
    OR .MAP_AREA[FM1$B_EX_SEGNUM] NEQ 0
    OR .MAP_AREA[FM1$W_EX_FILNUM] NEQ 0
    OR .MAP_AREA[FM1$W_EX_FILSEQ] NEQ 0
    THEN ERR_EXIT (SS$_BADIRECTORY);
    END;

! Arbitrate the access interlocks.
!

IF .FCB[FCB$V_EXCL]			! check for exclusive access
    THEN ERR_EXIT (SS$_ACCONFLICT);
IF .WRITE				! if write access desired
AND .FCB[FCB$W_LCNT] NEQ 0		! and file locked against writers
    THEN ERR_EXIT (SS$_ACCONFLICT);

! If the file is not contiguous, construct a window.
!

IF .FCB[FCB$L_STLBN] EQL 0
AND .DIR_WINDOW EQL 0
THEN DIR_WINDOW = KERNEL_CALL (CREATE_WINDOW, 0, 0, .HEADER, 0, .FCB);

! Make the final diddles for the FCB to be useful for directory searches.
!

KERNEL_CALL (MAKE_DIR_FCB, .FCB);

RETURN 1;

END;					! end of routine ACCESS_DIR

END
ELUDOM
