MODULE FIND (
		LANGUAGE (BLISS32),
		IDENT = 'V03-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  F11ACP Structure Level 1
!
! ABSTRACT:
!
!	This routine performs a find operation on the indicated directory.
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines.
!
!--
!
!
! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  2-Jan-1977  22:11
!
! MODIFIED BY:
!
!	V02-004	ACG0238		Andrew C. Goldstein,	6-Jan-1982  13:11
!		Make UPDATE_DIRSEQ global
!
!	V02-003	ACG0167		Andrew C. Goldstein,	7-May-1980  18:50
!		Previous revision history moved to F11A.REV
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:FCPDEF.B32';


FORWARD ROUTINE
	FIND		: NOVALUE,	! find directory entry
	UPDATE_DIRSEQ;			! bump UCB directory sequence count

GLOBAL ROUTINE FIND (ABD, FIB, REMOVE) : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine performs a FIND operation on the indicated directory.
!
! CALLING SEQUENCE:
!	FIND (ARG1, ARG2, ARG3)
!
! INPUT PARAMETERS:
!	ARG1: address of descriptor list in buffer packet
!	ARG2: address of FIB
!	ARG3: 0 to just do a find
!	      1 to remove the found entry
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	ARG2: file ID and context returned in FIB
!
! IMPLICIT OUTPUTS:
!	DIR_RECORD: record number of found directory entry
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	Directory LRU may be altered
!	directory blocks read
!
!--

BEGIN

MAP
	ABD		: REF BBLOCKVECTOR [,ABD$C_LENGTH],
					! descriptor list arg
	FIB		: REF BBLOCK;	! FIB argument

LOCAL
	NAMEBLOCK	: BBLOCK [NMB$C_LENGTH],
					! RAD-50 name block
	OLD_NAMEBLOCK	: BBLOCK [NMB$C_LENGTH],
					! another RAD-50 name block
	COMPLEX,			! complex operation flag
	SAVED_FLAGS,			! original flag bits for operation
	SAVED_CONTEXT,			! record number of first occurrence
	STRING		: VECTOR [20, BYTE],
					! space for result string
	COUNT,				! count of name string
	STRINGP,			! address of name string
	RECADDR		: REF BBLOCK;	! pointer to found directory entry

EXTERNAL
	CLEANUP_FLAGS	: BITVECTOR,	! cleanup action flags
	DIR_RECORD,			! record number of directory entry
	SUPER_FID	: BBLOCK;	! file ID of superseded/deleted file

EXTERNAL ROUTINE
	PMS_START_SUB,			! start subfunction metering
	PMS_END_SUB,			! end subfunction metering
	COPY_NAME,			! copy file name to result string
	DIR_ACCESS,			! access the directory
	MAKE_NAMEBLOCK,			! construct name block
	DIR_SCAN,			! search the directory
	MAKE_STRING,			! convert directory entry to string
	RETURN_DIR,			! return data to buffer packet
	DIRPUT;				! write directory record


! Start metering for this subfunction.
!

PMS_START_SUB (PMS_FIND);

! If this is an operation on a spooled device, noop it and return a file ID
! of -2, -2 with success.
!

IF .CLEANUP_FLAGS[CLF_SPOOLFILE]
THEN
    BEGIN
    FIB[FIB$W_FID_NUM] = -2;
    FIB[FIB$W_FID_SEQ] = -2;
    FIB[FIB$W_FID_RVN] = 0;
    KERNEL_CALL (COPY_NAME, .ABD);
    RETURN;
    END;

! Find the name string in the buffer packet. Construct the RAD-50 name block
! from it and the other data in the FIB.
!

COUNT = .ABD[ABD$C_NAME, ABD$W_COUNT];
STRINGP = .ABD[ABD$C_NAME, ABD$W_TEXT] + ABD[ABD$C_NAME, ABD$W_TEXT] + 1;

MAKE_NAMEBLOCK (.COUNT, .STRINGP, NAMEBLOCK);
CH$MOVE (FIB$S_FID, FIB[FIB$W_FID], NAMEBLOCK[NMB$W_FID]);
NAMEBLOCK[NMB$W_FLAGS] = .NAMEBLOCK[NMB$W_FLAGS] OR .FIB[FIB$W_NMCTL];
NAMEBLOCK[NMB$W_CONTEXT] = .FIB[FIB$L_WCC];

! Determine if this is a complex operation (wild card name, default version).
! If so, set up the required parameters.
!

COMPLEX = 0;
IF (.NAMEBLOCK[NMB$V_ALLNAM] OR .NAMEBLOCK[NMB$V_ALLTYP])
AND NOT .NAMEBLOCK[NMB$V_ALLVER]
AND .NAMEBLOCK[NMB$W_VERSION] EQL 0
THEN
    BEGIN
    COMPLEX = 1;
    NAMEBLOCK[NMB$V_ALLVER] = 1;
    SAVED_FLAGS = .NAMEBLOCK[NMB$W_FLAGS];
    END;

! Access the directory. We need write access if this is a REMOVE.
!

DIR_ACCESS (.FIB, .REMOVE);

! If this is a wild card operation (i.e., if the wild card context is nonzero),
! position to the indicated record. This is done with the positional context
! and the supplied resultant name string, if any.
!

IF .FIB[FIB$L_WCC] NEQ 0
THEN
    BEGIN
    COUNT = MINU (.ABD[ABD$C_RES, ABD$W_COUNT],
		  IF .ABD[ABD$C_RESL, ABD$W_COUNT] GEQU 2
		  THEN .(ABD[ABD$C_RESL, ABD$W_TEXT] +
			.ABD[ABD$C_RESL, ABD$W_TEXT] + 1)<0,16>
		  ELSE 0
		 );
    IF .COUNT NEQ 0
    THEN
	BEGIN
	STRINGP = .ABD[ABD$C_RES, ABD$W_TEXT] + ABD[ABD$C_RES, ABD$W_TEXT] + 1;
	MAKE_NAMEBLOCK (.COUNT, .STRINGP, OLD_NAMEBLOCK);
	IF .OLD_NAMEBLOCK[NMB$V_WILD]
	THEN ERR_EXIT (SS$_BADFILENAME);
	OLD_NAMEBLOCK[NMB$W_CONTEXT] = .FIB[FIB$L_WCC] - 1;
	IF .COMPLEX THEN OLD_NAMEBLOCK[NMB$V_ALLVER] = 1;

	IF DIR_SCAN (OLD_NAMEBLOCK, 0) EQL 0
	THEN
	    BEGIN
	    OLD_NAMEBLOCK[NMB$W_CONTEXT] = 0;
	    IF DIR_SCAN (OLD_NAMEBLOCK, 0) NEQ 0
	    THEN NAMEBLOCK[NMB$W_CONTEXT] = .DIR_RECORD;
	    END
	ELSE
	    NAMEBLOCK[NMB$W_CONTEXT] = .DIR_RECORD;
	END;
    END;

! Now search the directory. If this is a complex operation, we may
! loop several times before finding a suitable entry.
!

WHILE 1 DO
    BEGIN
    RECADDR = DIR_SCAN (NAMEBLOCK, 0);
    IF .RECADDR EQL 0			! if not found
    THEN
	IF .FIB[FIB$L_WCC] EQL 0
	THEN ERR_EXIT (SS$_NOSUCHFILE)
	ELSE
	    BEGIN
	    FIB[FIB$L_WCC] = 0;
	    ERR_EXIT (SS$_NOMOREFILES);
	    END;
    SAVED_CONTEXT = .DIR_RECORD;	! save record number found
    IF NOT .COMPLEX THEN EXITLOOP;	! for simple lookups that's all

! This is a complex operation. We have now found some occurrence of the desired
! file. Now search from the beginning of the directory for the first occurring
! version of this entry. If it precedes the one found, then we have already
! found it on a previous call, so try from the start for something new. If
! it follows the one found, we are in trouble.
!

    CH$MOVE (NMB$C_DIRENTRY-2, .RECADDR, NAMEBLOCK);
    NAMEBLOCK[NMB$W_FLAGS] = NMB$M_ALLVER;
    NAMEBLOCK[NMB$W_CONTEXT] = 0;

    RECADDR = DIR_SCAN (NAMEBLOCK, 0);
    IF .RECADDR EQL 0 OR .DIR_RECORD GTRU .SAVED_CONTEXT
    THEN ERR_EXIT (SS$_BADIRECTORY);

! If the entry found on the second scan is the same as the first, then this is
! a first occurrence. Now scan the remainder of the directory for the latest
! version of this occurrence. We will return the latest version entry to
! the caller, but the context of the first occurrence found.
!

    IF .DIR_RECORD EQL .SAVED_CONTEXT
    THEN
	BEGIN
	NAMEBLOCK[NMB$W_FLAGS] = 0;
	NAMEBLOCK[NMB$W_CONTEXT] = .SAVED_CONTEXT - 1;
	RECADDR = DIR_SCAN (NAMEBLOCK, 0);
	IF .RECADDR EQL 0
	THEN BUG_CHECK (DIRENTRY, FATAL, 'ACP failed to find same directory entry');
	EXITLOOP;
	END;

! This was a duplicate. Restore the original flags and continue the basic
! scan from where we left off.
!

    NAMEBLOCK[NMB$W_FLAGS] = .SAVED_FLAGS;
    NAMEBLOCK[NMB$W_CONTEXT] = .SAVED_CONTEXT;
    END;				! end of directory scan loop

! Now convert the resulting directory entry into the ASCII resultant string.
! Return this and the record number to the buffer packet.
!

CH$MOVE (FIB$S_FID, RECADDR[NMB$W_FID], FIB[FIB$W_FID]);
FIB[FIB$L_WCC] =
    (
    IF .FIB[FIB$V_WILD]
    THEN .SAVED_CONTEXT
    ELSE 0
    );
COUNT = MAKE_STRING (.RECADDR, STRING);
KERNEL_CALL (RETURN_DIR, .COUNT, STRING, .ABD);

! If a remove operation is requested, do so by simply zeroing the file number
! word of the directory entry and writing it back. Note that we save the
! removed FID for replacement in case of subsequent error.
! If the entry being removed is of the form xxx.DIR;1, bump the sequence count
! in the UCB to invalidate RMS caches.
!

IF .REMOVE
THEN
    BEGIN
    CH$MOVE (FIB$S_FID, RECADDR[NMB$W_FID],SUPER_FID);
    RECADDR[NMB$W_FID_NUM] = 0;
    DIRPUT (.RECADDR);
    CLEANUP_FLAGS[CLF_REENTER] = 1;

    IF  .RECADDR[NMB$W_TYPE] EQL %RAD50_11 'DIR'
    AND .RECADDR[NMB$W_VERSION] EQL 1
    THEN KERNEL_CALL (UPDATE_DIRSEQ);
    END;

! Stop metering of this subfunction
!

PMS_END_SUB ();

END;					! end of routine FIND

GLOBAL ROUTINE UPDATE_DIRSEQ =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine bumps the directory sequence count in the UCB to invalidate
!	RMS directory caches on the volume.
!
!
! CALLING SEQUENCE:
!	UPDATE_DIRSEQ ()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	CURRENT_UCB: UCB of device in use
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	directory sequence count incremented
!
! ROUTINE VALUE:
!	1
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN

EXTERNAL
	CURRENT_UCB	: REF BBLOCK;	! UCB of device


CURRENT_UCB[UCB$W_DIRSEQ] = .CURRENT_UCB[UCB$W_DIRSEQ] + 1;

RETURN 1;

END;					! end of routine UPDATE_DIRSEQ

END
ELUDOM
