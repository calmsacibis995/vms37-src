MODULE DEACCS (
		LANGUAGE (BLISS32),
		IDENT = 'V03-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  F11ACP Structure Level 1
!
! ABSTRACT:
!
!	This routine implements the DEACCESS function.
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines.
!
!--
!
!
! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  6-Jan-1977  23:29
!
! MODIFIED BY:
!
!	V02-002	ACG0247		Andrew C. Goldstein,	23-Dec-1981  0:58
!		Update file revision count only if written
!
!	V02-001	ACG0245		Andrew C. Goldstein,	18-Dec-1981  18:27
!		Moving queueing of spool file to cleanup
!
!	V02-000	ACG0167		Andrew C. Goldstein,	7-May-1980  18:48
!		Previous revision history moved to F11A.REV
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:FCPDEF.B32';

GLOBAL ROUTINE DEACCESS  =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine implements the DEACCESS function.
!	If an attribute list is present, attributes are written.
!
! CALLING SEQUENCE:
!	DEACCESS ()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	IO_PACKET: I/O packet in process
!	CURRENT_WINDOW: window of file
!	PRIMARY_FCB: FCB of file
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	file deaccessed
!	FCB may be deleted
!	header may be modified
!
!--

BEGIN

LOCAL
	K,				! local copy of truncate lock count
	ABD		: REF BBLOCKVECTOR [,ABD$C_LENGTH],
					! buffer descriptors
	FIB		: REF BBLOCK,	! FIB
	FCB		: REF BBLOCK,	! pointer to FCB
	HEADER		: REF BBLOCK,	! file header
	IDENT_AREA	: REF BBLOCK;	! header ident area

EXTERNAL
	CLEANUP_FLAGS	: BITVECTOR,	! cleanup action flags
	USER_STATUS	: VECTOR,	! I/O status going back to user
	IO_PACKET	: REF BBLOCK,	! I/O packet in process
	FILE_HEADER	: REF BBLOCK,	! global pointer to current file header
	CURRENT_WINDOW	: REF BBLOCK,	! window of file
	PRIMARY_FCB	: REF BBLOCK,	! FCB of file
	CURRENT_VCB	: REF BBLOCK;	! VCB of volume

EXTERNAL ROUTINE
	GET_FIB,			! get FIB of request
	READ_HEADER,			! read file header
	MARK_DIRTY,			! mark buffer for write-back
	GET_TIME,			! get date and time string
	WRITE_ATTRIB,			! write attributes routine
	TRUNCATE,			! truncate file
	UPDATE_FCB,			! update contents of FCB
	CHECKSUM;			! compute file header checksum


! Set the cleanup flags to cause the deaccess to occurr.
! Find the buffer descriptor and FIB.
!

CLEANUP_FLAGS[CLF_ZCHANNEL] = 1;
CLEANUP_FLAGS[CLF_DEACCESS] = 1;
CLEANUP_FLAGS[CLF_DELWINDOW] = 1;

					! pointer to buffer descriptors
ABD = .BBLOCK [.IO_PACKET[IRP$L_SVAPTE], AIB$L_DESCRIPT];
FIB = GET_FIB (.ABD);
FCB = .PRIMARY_FCB;

! Make sure irrelevant parameters are not present.
!

IF .FIB[FIB$V_EXTEND]
THEN ERR_STATUS (SS$_BADPARAM);

! If the file is accessed for write, or if the file is marked for delete
! and this is the last access, read the header.
!

IF .CURRENT_WINDOW[WCB$V_WRITE]
OR ((.FCB[FCB$V_MARKDEL] OR .CLEANUP_FLAGS[CLF_SPOOLFILE])
    AND .FCB[FCB$W_ACNT] EQL 1)
THEN HEADER = READ_HEADER (0, .FCB);

! If this the last deaccess from a file marked for delete, delete the file.
! If the file is a spool file, send it to the job controller.
!

IF .FCB[FCB$W_ACNT] EQL 1
THEN
    BEGIN

    IF .FCB[FCB$V_MARKDEL]
    THEN CLEANUP_FLAGS[CLF_DELFILE] = 1;

    IF .CLEANUP_FLAGS[CLF_SPOOLFILE]
    THEN CLEANUP_FLAGS[CLF_DOSPOOL] = 1;
    END;

! Do deaccess processing for a write accessed file.
!

IF .CURRENT_WINDOW[WCB$V_WRITE]
THEN
    BEGIN
    MARK_DIRTY (.HEADER);


! Increment the revision count of the file. If a deaccess lock was
! requested on the file, set the lock bit. Then process the write
! attributes, if any. If attributes were written, then clear the
! lock bit.
!

    IF .CURRENT_WINDOW[WCB$L_WRITES] NEQ 0
    THEN
	BEGIN
	IDENT_AREA = .HEADER + .HEADER[FH1$B_IDOFFSET]*2;
	IDENT_AREA[FI1$W_REVISION] = .IDENT_AREA[FI1$W_REVISION] + 1;
	GET_TIME (IDENT_AREA[FI1$T_REVDATE]);
	END;

    IF .CURRENT_WINDOW[WCB$V_DLOCK]
    THEN HEADER[FH1$V_LOCKED] = 1;

    IF .IO_PACKET[IRP$W_BCNT] GTR ABD$C_ATTRIB
    AND .USER_STATUS[0]
    THEN
	BEGIN
	WRITE_ATTRIB (.HEADER, .ABD);
	HEADER[FH1$V_LOCKED] = 0;
	END;

! If a truncate is requested, do it (if the file was write accessed). Note
! that we must manually clear the truncate cleanup flag, since deaccess
! always exits through error exit.
!

    IF .FIB[FIB$V_TRUNC]
    THEN
	BEGIN
	IF .CURRENT_VCB[VCB$V_NOALLOC]
	THEN ERR_EXIT (SS$_WRITLCK);

	K = .FCB[FCB$W_TCNT];
	IF .CURRENT_WINDOW[WCB$V_NOTRUNC]
	THEN K = .K - 1;
	IF .K NEQ 0
	THEN ERR_EXIT (SS$_ACCONFLICT);

	CHECKSUM (.HEADER);
	TRUNCATE (.FIB, .HEADER, DEALLOC_BLOCKS);
	CLEANUP_FLAGS[CLF_CLEANTRUNC] = 0;
	CLEANUP_FLAGS[CLF_FIXFCB] = 0;
	KERNEL_CALL (UPDATE_FCB, .FILE_HEADER);
	END;

    CHECKSUM (.HEADER);			! checksum the file header
    END;

! Return failure to let the error cleanup do the actual deaccessing.
!

RETURN 0;

END;					! end of routine DEACCESS

END
ELUDOM
