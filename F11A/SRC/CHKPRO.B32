MODULE CHKPRO (
		LANGUAGE (BLISS32),
		IDENT = 'V03-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  F11ACP Structure Level 1
!
! ABSTRACT:
!
!	This routine checks the volume and file protection to see if the
!	user is authorized to perform the intended operation.
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines.
!
!--
!
!
! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  2-May-1977  10:45
!
! MODIFIED BY:
!
!	A0102	ACG0089		Andrew C. Goldstein,	6-Dec-1979  17:43
!		Fix uninitialized pointer
!
!	A0101	ACG0047		Andrew C. Goldstein,	8-Aug-1979  22:02
!		Add SYSPRV privilege, protection interface changes
!
!	A0100	ACG00001	Andrew C. Goldstein,  10-Oct-1978  20:02
!	Previous revision history moved to F11A.REV
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:FCPDEF.B32';

GLOBAL ROUTINE CHECK_PROTECT (ACCESS, HEADER, FCB) : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine checks the volume and file protection to see if the
!	user is authorized to perform the intended operation.
!
! CALLING SEQUENCE:
!	CHECK_PROTECTION (ARG1, ARG2, ARG3)
!
! INPUT PARAMETERS:
!	ARG1: access mode
!		READ_ACCESS	= 0
!		WRITE_ACCESS	= 1
!		DELETE_ACCESS	= 2
!		CREATE_ACCESS	= 3
!		RDATT_ACCESS	= 4
!		WRATT_ACCESS	= 5
!	ARG2: address of file header, if any
!	ARG3: address of FCB or 0
!
! IMPLICIT INPUTS:
!	CURRENT_UCB: address of device UCB
!	IO_PACKET: I/O packet of this request
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN

MAP
	HEADER		: REF BBLOCK,	! file header arg
	FCB		: REF BBLOCK;	! FCB arg

LITERAL					! file and volume protection bits
	READ_BIT	= 1,
	WRITE_BIT	= 2,
	DELETE_BIT	= 8;

LOCAL
	FILE_PROT,			! protection code of file
	FILE_UIC,			! file owner UIC
	SEG_NUMBER,			! segment number of file header
	ARB		: REF BBLOCK,	! access rights block of user
	MAP_AREA	: REF BBLOCK;	! file header map area

BIND					! access mode tables
					! write operation on volume
	WRITE_OP	= UPLIT BYTE (
			%B'101110'
			) : BITVECTOR,

					! check system or owner UIC
	SYS_OWNER	= UPLIT BYTE (
			%B'110000'
			) : BITVECTOR,

					! check for zero file segment number
	EXT_HEADER	= UPLIT BYTE (
			%B'100111'
			) : BITVECTOR,

					! volume access bits
	VOL_ACCESS	= UPLIT BYTE (
			READ_BIT,
			READ_BIT OR WRITE_BIT,
			DELETE_BIT,
			READ_BIT OR WRITE_BIT,
			READ_BIT,
			READ_BIT OR WRITE_BIT
			) : VECTOR [,BYTE],

					! file access bits
	FILE_ACCESS	= UPLIT BYTE (
			READ_BIT,
			READ_BIT OR WRITE_BIT,
			DELETE_BIT,
			0,
			READ_BIT,
			0
			) : VECTOR [,BYTE];

EXTERNAL
	CLEANUP_FLAGS	: BITVECTOR,	! cleanup action and status flags
	CURRENT_UCB	: REF BBLOCK,	! device UCB
	IO_PACKET	: REF BBLOCK;	! I/O packet of this request

EXTERNAL ROUTINE
	GET_ACCESS;			! get access bits for user


! First, if this is a write operation, check is the volume is software
! write locked.
!

IF .WRITE_OP[.ACCESS]
AND .BBLOCK [CURRENT_UCB[UCB$L_DEVCHAR], DEV$V_SWL]
THEN ERR_EXIT (SS$_WRITLCK);

! Now check the volume protection. Get the volume access rights for this user
! and use them to bit clear the access intent bits appropriate to the
! function. If all intent bits clear, access is granted.
!

IF (NOT GET_ACCESS (.CURRENT_UCB[UCB$L_OWNUIC], .CURRENT_UCB[UCB$W_VPROT])
    AND .VOL_ACCESS[.ACCESS]) NEQ 0
THEN ERR_EXIT (SS$_NOPRIV);

! Get the protection bits and the owner UIC of the file.
!

IF .FCB NEQ 0
THEN
    BEGIN
    FILE_PROT = .FCB[FCB$W_FILEPROT];
    FILE_UIC = .FCB[FCB$L_FILEOWNER];
    SEG_NUMBER = .FCB[FCB$W_SEGN];
    END
ELSE
    BEGIN
    IF .HEADER NEQ 0
    THEN
	BEGIN
	FILE_PROT = .HEADER[FH1$W_FILEPROT];
	FILE_UIC = .HEADER[FH1$B_UICMEMBER];
	FILE_UIC<16,8> = .HEADER[FH1$B_UICGROUP];
	MAP_AREA = .HEADER + .HEADER[FH1$B_MPOFFSET]*2;
	SEG_NUMBER = .MAP_AREA[FM1$B_EX_SEGNUM];
	END
    ELSE
	BEGIN
	FILE_PROT = 0;
	FILE_UIC = 0;
	SEG_NUMBER = 0;
	END;
    END;

! Check if the system or owner is allowed regardless of file protection.
!

ARB = .IO_PACKET[IRP$L_ARB];
IF .SYS_OWNER[.ACCESS]
AND (.CLEANUP_FLAGS[CLF_SYSPRV]
    OR .ARB[ARB$L_UIC] EQL .FILE_UIC)
THEN RETURN;

! Check if this is an extension header. If so, only the system is allowed access
! for most operations.
!

IF .EXT_HEADER[.ACCESS]
THEN
    BEGIN
    IF .SEG_NUMBER NEQ 0
    AND NOT .CLEANUP_FLAGS[CLF_SYSPRV]
    THEN ERR_EXIT (SS$_NOPRIV);
    END;


! Finally check the access intent bits against the file protection in the
! same way as the volume protection. Note that write attributes is not
! handled by protection bits - it must have passed system or owner above.
!

IF .ACCESS EQL WRATT_ACCESS
OR (NOT GET_ACCESS (.FILE_UIC, .FILE_PROT)
    AND .FILE_ACCESS[.ACCESS]) NEQ 0
THEN ERR_EXIT (SS$_NOPRIV);

END;					! end of routine CHECK_PROTECT

END
ELUDOM
