MODULE NXTHDR (
		LANGUAGE (BLISS32),
		IDENT = 'V03-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  F11ACP Structure Level 1
!
! ABSTRACT:
!
!	This routine reads the next extension header, if any, of the
!	given file.
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines.
!
!--
!
!
! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  22-Jul-1977  17:40
!
! MODIFIED BY:
!
!	A0100	ACG0001		Andrew C. Goldstein,  10-Oct-1978  20:01
!		Previous revision history moved to F11A.REV
!
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:FCPDEF.B32';

GLOBAL ROUTINE NEXT_HEADER (HEADER, FCB, EXT_FID, SEGNUM) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine reads the next extension header, if any, of the
!	indicated file. Extension data is taked from either the indicated
!	file header or the arguments.
!
!
! CALLING SEQUENCE:
!	NEXT_HEADER (ARG1, ARG2, ARG3, ARG4)
!
! INPUT PARAMETERS:
!	ARG1: address of current file header or 0
!	ARG2: address of corresponding FCB or zero
!	ARG3: extension file ID, if present
!	ARG4: extension segment number, if present
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	Address of header read or 0 if none
!
! SIDE EFFECTS:
!	File header may be read
!
!--

BEGIN

MAP
	HEADER		: REF BBLOCK,	! file header arg
	FCB		: REF BBLOCK,	! FCB arg
	EXT_FID		: REF BBLOCK;	! extension file ID arg

LOCAL
	NEW_HEADER	: REF BBLOCK,	! address of extension file header read
	MAP_AREA	: REF BBLOCK,	! address of header map area
	EXT_FCB		: REF BBLOCK,	! address of extension FCB
	FILE_ID		: BBLOCK [FID$C_LENGTH], ! file ID of extension header
	SEG_NUMBER	: BYTE;		! segment number of file header

EXTERNAL ROUTINE
	READ_HEADER;			! read a file header


! Get the extension file number of the file header. If it is zero, then
! there is no extension header. If it is non-zero, read the header, using
! the extension FCB if one exists.
!

IF ACTUALCOUNT LSS 4
THEN
    BEGIN
    MAP_AREA = .HEADER + .HEADER[FH1$B_MPOFFSET]*2;
    FILE_ID[FID$W_NUM] = .MAP_AREA[FM1$W_EX_FILNUM];
    FILE_ID[FID$W_SEQ] = .MAP_AREA[FM1$W_EX_FILSEQ];
    FILE_ID[FID$W_RVN] = 0;
    SEG_NUMBER = .MAP_AREA[FM1$B_EX_SEGNUM] + 1;
    END
ELSE
    BEGIN
    CH$MOVE (FID$C_LENGTH, .EXT_FID, FILE_ID);
    SEG_NUMBER = .SEGNUM;
    END;

IF .FILE_ID[FID$W_NUM] EQL 0 THEN RETURN 0;
EXT_FCB =
    (IF .FCB NEQ 0
     THEN .FCB[FCB$L_EXFCB]
     ELSE 0
    );
NEW_HEADER = READ_HEADER (FILE_ID, .EXT_FCB);

! Check the segment number of the header read for consistency.
!

MAP_AREA = .NEW_HEADER + .NEW_HEADER[FH1$B_MPOFFSET]*2;
IF .SEG_NUMBER NEQ .MAP_AREA[FM1$B_EX_SEGNUM]
THEN ERR_EXIT (SS$_BADFILEHDR);

RETURN .NEW_HEADER;

END;					! end of routine NEXT_HEADER

END
ELUDOM
