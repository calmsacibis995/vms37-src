MODULE CREATE (
		LANGUAGE (BLISS32),
		IDENT = 'V03-001'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  F11ACP Structure Level 1
!
! ABSTRACT:
!
!	This module processes the create function. It creates a file with the
!	attributes requested, enters it in a directory if desired, and
!	accesses it if requested.
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines.
!
!--
!
!
! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  28-Mar-1977  15:05
!
! MODIFIED BY:
!
!	V03-001	LMP0018		L. Mark Pilant,		31-Mar-1982  13:10
!		Modify to use a local copy of the window complete flag.
!
!	V02-004	LMP0005		L. Mark Pilant,		29-Dev-1981  14:30
!		Added byte limit quota check on window creation, also a
!		remap is done if the create did an initial allocation and
!		Cathedral windows are desired.
!
!	V02-003	ACG0247		Andrew C. Goldstein,	23-Dec-1981  1:11
!		Set revision date to creation date
!
!	V02-002	ACG0167		Andrew C. Goldstein,	7-May-1980  18:48
!		Previous revision history moved to F11A.REV
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:FCPDEF.B32';

GLOBAL ROUTINE CREATE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine processes the CREATE function. It creates a file with the
!	attributes requested, enters it in a directory if desired, and
!	accesses the file if requested.
!
! CALLING SEQUENCE:
!	CREATE ()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	CURRENT_VCB: VCB of volume
!	IO_PACKET: packet of this I/O request
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	PRIMARY_FCB: FCB of file if accessed
!	CURRENT_WINDOW: window of file if accessed
!	USER_STATUS: I/O status block of user
!
! ROUTINE VALUE:
!	1 if successful
!	0 if error
!
! SIDE EFFECTS:
!	File created, blocks allocated, directory modified, file accessed, etc.
!
!--

BEGIN

LOCAL
	PACKET		: REF BBLOCK,	! address of I/O packet
	ABD		: REF BBLOCKVECTOR [,ABD$C_LENGTH],
					! buffer descriptors
	FIB		: REF BBLOCK,	! file identification block
	RESULT_LENGTH,			! length of result string from ENTER
	RESULT		: VECTOR [20, BYTE], ! result string from ENTER
	NAMEBLOCK	: BBLOCK [NMB$C_LENGTH], ! name block to build RAD-50 name
	IDENT_AREA	: REF BBLOCK,	! pointer to file header ident area
	ARB		: REF BBLOCK,	! access rights block of caller
	MAP_AREA	: REF BBLOCK,	! file header map area
	IDX_FCB		: REF BBLOCK,	! FCB of index file
	FCB		: REF BBLOCK,	! FCB address
	HEADER		: REF BBLOCK,	! address of file header
	FUNCTION	: BLOCK [1];	! function code qualifiers

EXTERNAL
	USER_STATUS	: VECTOR,	! I/O status block of user
	CURRENT_VCB	: REF BBLOCK,	! VCB of volume
	PRIMARY_FCB	: REF BBLOCK,	! FCB of file
	CURRENT_WINDOW	: REF BBLOCK,	! window for file
	IO_PACKET	: REF BBLOCK,	! I/O request packet
	FILE_HEADER	: REF BBLOCK,	! global address of file header
	NEW_FID,			! unrecorded file ID
	HEADER_LBN,			! LBN of current file header
	SUPER_FID	: BBLOCK,	! file ID of superseded file
	SECOND_FIB	: BBLOCK,	! FIB for secondary operation
	CLEANUP_FLAGS	: BITVECTOR;	! cleanup action flags

EXTERNAL ROUTINE
	GET_FIB,			! get FIB for operation
	CHECK_PROTECT,			! check file protection
	CREATE_HEADER,			! create a file ID and header
	CHECKSUM,			! compute header checksum
	MARK_DIRTY,			! mark buffer for write-back
	WRITE_HEADER,			! write file header
	READ_HEADER,			! read file header
	ENTER,				! enter file in directory
	COPY_NAME,			! copy file name to result string
	MAKE_NAMEBLOCK,			! convert name string into RAD-50 name block
	GET_TIME,			! get system date and time string
	CREATE_FCB,			! create an FCB
	CREATE_WINDOW,			! create a window
	MAKE_ACCESS,			! complete the access
	MARKDEL_FCB,			! mark FCB for delete
	WRITE_ATTRIB,			! write attributes
	EXTEND,				! extend the file
	SAVE_CONTEXT,			! save reentrant context area
	RESTORE_CONTEXT,		! restore reentrant context area
	MARK_DELETE,			! mark file for delete
	NEXT_HEADER,			! read next extension file header
	UPDATE_FCB,			! update contents of FCB
	REMAP_FILE;			! remap the file completely


! Enable the deaccess cleanup if an access is taking place.
!

PACKET = .IO_PACKET;
FUNCTION = .PACKET[IRP$W_FUNC];
IF .FUNCTION[IO$V_ACCESS]
THEN
    BEGIN
    CLEANUP_FLAGS[CLF_ZCHANNEL] = 1;
    CLEANUP_FLAGS[CLF_DELWINDOW] = 1;
    END;

! Set up pointers to interesting control blocks.
!

					! pointer to buffer descriptors
ABD = .BBLOCK [.PACKET[IRP$L_SVAPTE], AIB$L_DESCRIPT];
FIB = GET_FIB (.ABD);			! pointer to FIB

IF .FIB[FIB$V_TRUNC]
OR (.FUNCTION[IO$V_DELETE] AND NOT .FUNCTION[IO$V_ACCESS])
OR (NOT .FUNCTION[IO$V_CREATE]
    AND (.FIB[FIB$V_EXTEND]
	OR .PACKET[IRP$W_BCNT] GTR ABD$C_ATTRIB
	OR .FUNCTION[IO$V_ACCESS]
	)
    )
THEN ERR_EXIT (SS$_BADPARAM);

IF .CURRENT_VCB[VCB$V_NOALLOC]
THEN ERR_EXIT (SS$_WRITLCK);

! Do the create if requested. Start by allocating a file number from the
! index file bitmap and reading in the initial file header.
!

IF .FUNCTION[IO$V_CREATE]
THEN
    BEGIN
    CHECK_PROTECT (CREATE_ACCESS, 0, 0);

    HEADER = CREATE_HEADER ();
    FIB[FIB$W_FID_NUM] = .HEADER[FH1$W_FID_NUM];
    FIB[FIB$W_FID_SEQ] = .HEADER[FH1$W_FID_SEQ];
    FIB[FIB$W_FID_RVN] = 0;

! Now build an initialized file header in the buffer.
!

    HEADER[FH1$B_IDOFFSET] = FH1$C_LENGTH / 2;
    HEADER[FH1$B_MPOFFSET] = (FH1$C_LENGTH+FI1$C_LENGTH) / 2;
    HEADER[FH1$W_STRUCLEV] = FH1$C_LEVEL1;
    ARB = .PACKET[IRP$L_ARB];
    HEADER[FH1$B_UICMEMBER] = .(ARB[ARB$L_UIC])<0,8>;
    HEADER[FH1$B_UICGROUP] = .(ARB[ARB$L_UIC])<16,8>;
    HEADER[FH1$W_FILEPROT] = .CURRENT_VCB[VCB$W_FILEPROT];

    CH$FILL (0, 512 - $BYTEOFFSET(FH1$W_FILECHAR), HEADER[FH1$W_FILECHAR]);

    IF .FUNCTION[IO$V_DELETE]
    THEN HEADER[FH1$V_MARKDEL] = 1;

    IF .CLEANUP_FLAGS[CLF_SPOOLFILE]
    THEN HEADER[FH1$V_SPOOL] = 1;

    MAP_AREA = .HEADER + FH1$C_LENGTH + FI1$C_LENGTH;
    MAP_AREA[FM1$B_COUNTSIZE] = 1;
    MAP_AREA[FM1$B_LBNSIZE] = 3;
    MAP_AREA[FM1$B_INUSE] = 0;
    MAP_AREA[FM1$B_AVAIL] = (512 - FH1$C_LENGTH - FI1$C_LENGTH - FM1$C_LENGTH - 2) / 2;

    NEW_FID = 0;			! new file ID is no longer unrecorded
    MARK_DIRTY (.HEADER);
    CLEANUP_FLAGS[CLF_DELFILE] = 1;
    FILE_HEADER = .HEADER;		! record header address for cleanup
    CHECKSUM (.HEADER);
    END;

! If a non-zero directory ID is supplied, enter the file in the directory.
! Otherwise, just copy down the name string (if any) into the result string.
! Note that the directory operation is nooped on spool file operations.
! Then convert the result string, from whatever source, into RAD-50 into the
! file header ident area.
!

IF .FIB[FIB$W_DID_NUM] NEQ 0 AND NOT .CLEANUP_FLAGS[CLF_SPOOLFILE]
THEN
    ENTER (.ABD, .FIB, RESULT_LENGTH, RESULT)
ELSE
    BEGIN
    KERNEL_CALL (COPY_NAME, .ABD);
    RESULT_LENGTH = .ABD[ABD$C_NAME, ABD$W_COUNT];
    CH$MOVE (.RESULT_LENGTH,
	.ABD[ABD$C_NAME, ABD$W_TEXT] + ABD[ABD$C_NAME, ABD$W_TEXT] + 1, RESULT);
    END;

! Now write attributes as specified.
!

IF .FUNCTION[IO$V_CREATE]
THEN
    BEGIN
    HEADER = READ_HEADER (FIB[FIB$W_FID], 0);

    MAKE_NAMEBLOCK (.RESULT_LENGTH, RESULT, NAMEBLOCK);
    IDENT_AREA = .HEADER + .HEADER[FH1$B_IDOFFSET]*2;
    CH$MOVE (10, NAMEBLOCK[NMB$W_NAME], IDENT_AREA[FI1$W_FILENAME]);
    GET_TIME (IDENT_AREA[FI1$T_CREDATE]);
    CH$MOVE (FI1$S_CREDATE+FI1$S_CRETIME, IDENT_AREA[FI1$T_CREDATE], IDENT_AREA[FI1$T_REVDATE]);

    IF .PACKET[IRP$W_BCNT] GTR ABD$C_ATTRIB
    THEN WRITE_ATTRIB (.HEADER, .ABD);

! If access is requested, access the file.
!

    IF .FUNCTION[IO$V_ACCESS]
    THEN
	BEGIN
	FCB = KERNEL_CALL (CREATE_FCB, .HEADER);
	PRIMARY_FCB = .FCB;

	CURRENT_WINDOW = KERNEL_CALL (CREATE_WINDOW, .FIB[FIB$L_ACCTL],
	    .FIB[FIB$B_WSIZE], .HEADER, .PACKET[IRP$L_PID], .FCB);
	IF .CURRENT_WINDOW EQL 0 THEN ERR_EXIT (SS$_EXBYTLM);
	KERNEL_CALL (MAKE_ACCESS, .FCB, .CURRENT_WINDOW, .ABD);
	IF .FUNCTION[IO$V_DELETE]
	THEN KERNEL_CALL (MARKDEL_FCB, .FCB);
	END;

! Now extend the file if requested.
!

    IF .FIB[FIB$V_EXTEND] THEN EXTEND (.FIB, .HEADER);
    HEADER = .FILE_HEADER;
    KERNEL_CALL (UPDATE_FCB, .HEADER);
    CHECKSUM (.HEADER);
    WRITE_HEADER ();

! Perform the remap operation if necessary to account for any initial extend.
!

    IF .FUNCTION[IO$V_ACCESS] AND .FIB[FIB$V_EXTEND]
    THEN IF .CURRENT_WINDOW[WCB$V_CATHEDRAL]
    THEN REMAP_FILE ();
    END;

! If this is a supersede operation, delete the file that was removed during
! the enter operation above. This must be done last since we cannot undo
! a delete in cleaning up from a subsequent error. We first copy the primary
! context into the context save area since this is a secondary operation.
!

IF TESTBITSC (CLEANUP_FLAGS[CLF_SUPERSEDE])
THEN
    BEGIN
    USER_STATUS[0] = SS$_SUPERSEDE;
    SAVE_CONTEXT ();
    CH$COPY (FID$C_LENGTH, SUPER_FID, 0,
	     FIB$C_LENGTH - $BYTEOFFSET (FIB$W_FID), SECOND_FIB[FIB$W_FID]);
    MARK_DELETE (SECOND_FIB);
    RESTORE_CONTEXT ();
    END;


RETURN 1;

END;					! end of routine CREATE

END
ELUDOM
