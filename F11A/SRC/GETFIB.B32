MODULE GETFIB (
		LANGUAGE (BLISS32),
		IDENT = 'V03-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  F11ACP Structure Level 1
!
! ABSTRACT:
!
!	This routine obtains the address of the FIB for this operation.
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines.
!
!--
!
!
! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  7-Jan-1977  01:02
!
! MODIFIED BY:
!
!	A0100	ACG0001		Andrew C. Goldstein,  10-Oct-1978  20:01
!		Previous revision history moved to F11A.REV
!
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:FCPDEF.B32';

GLOBAL ROUTINE GET_FIB (ABD) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine obtains the address of the FIB for this operation.
!	It copies the FIB from the buffer packet into local storage
!	and zero extends it to maximum length.
!
! CALLING SEQUENCE:
!	GET_FIB (ARG1)
!
! INPUT PARAMETERS:
!	ARG1: buffer descriptor list
!
! IMPLICIT INPUTS:
!	CURRENT_WINDOW: address of user's window or 0
!	IO_PACKET: address of user's I/O packet
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	address of FIB
!
! SIDE EFFECTS:
!	file ID may be written into FIB
!	channel window pointer write-back inhibited
!	result string buffers zeroed
!
!--

BEGIN

MAP
	ABD		: REF BBLOCKVECTOR [,ABD$C_LENGTH];
					! buffer descriptors

LOCAL
	FCB		: REF BBLOCK,	! FCB of file
	FIBL;				! length of user FIB

EXTERNAL
	LOCAL_FIB	: BBLOCK,	! internal copy of user FIB
	IO_PACKET	: REF BBLOCK,	! I/O packet of this operation
	PRIMARY_FCB	: REF BBLOCK,	! FCB of current file
	CURRENT_FIB	: REF BBLOCK,	! pointer to current FIB in use
	CURRENT_WINDOW	: REF BBLOCK;	! user's window


! Get the length of the user-supplied FIB. If there is a window,
! and there is no user FIB, use the file ID from
! the window's FCB. Also use the FCB's file ID if the file number
! in the user FIB is zero.
!

FIBL = .ABD[ABD$C_FIB, ABD$W_COUNT];

CH$COPY (.FIBL,
	.ABD[ABD$C_FIB, ABD$W_TEXT] + ABD[ABD$C_FIB, ABD$W_TEXT] + 1,
	0,
	FIB$C_LENGTH,
	LOCAL_FIB);
CURRENT_FIB = LOCAL_FIB;

IF .CURRENT_WINDOW NEQ 0
THEN
    BEGIN
    FCB = .CURRENT_WINDOW[WCB$L_FCB];
    IF .LOCAL_FIB[FIB$W_FID_NUM] EQL 0
    THEN CH$MOVE (FIB$S_FID, FCB[FCB$W_FID], LOCAL_FIB[FIB$W_FID]);

! If the file ID in the FIB does not match that in the FCB, this operation
! is not on the open file; clear the FCB and window addresses (except in
! the case of a DEACCESS, in which we force the file ID to that of the open
! file and signal an error).
!

    IF .LOCAL_FIB[FIB$W_FID_NUM] NEQ .FCB[FCB$W_FID_NUM]
    OR .LOCAL_FIB[FIB$W_FID_RVN] NEQ .FCB[FCB$W_FID_RVN]
    THEN
	BEGIN
	IF .IO_PACKET[IRP$V_FCODE] EQL IO$_DEACCESS
	THEN
	    BEGIN
	    CH$MOVE (FIB$S_FID, FCB[FCB$W_FID], LOCAL_FIB[FIB$W_FID]);
	    ERR_STATUS (SS$_BADPARAM);
	    END
	ELSE
	    BEGIN
	    CURRENT_WINDOW = 0;
	    PRIMARY_FCB = 0;
	    END;
	END;
    END

! If there is no file open, there must be a minimum FIB.
!

ELSE
    BEGIN
    IF .FIBL LSS FIB$C_ACCDATA
    THEN ERR_EXIT (SS$_INSFARG);
    END;

! If the directory ID is -1,-1, convert it to 4,4,0 to be compatible with
! the old RSX MFD kluge.
!

IF .LOCAL_FIB[FIB$W_DID_NUM] EQL 65535
AND .LOCAL_FIB[FIB$W_DID_SEQ] EQL 65535
THEN
    BEGIN
    LOCAL_FIB[FIB$W_DID_NUM] = 4;
    LOCAL_FIB[FIB$W_DID_SEQ] = 4;
    LOCAL_FIB[FIB$W_DID_RVN] = 0;
    END;

RETURN LOCAL_FIB;

END;					! end of routine GET_FIB

END
ELUDOM
