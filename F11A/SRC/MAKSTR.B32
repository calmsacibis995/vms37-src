MODULE MAKSTR (
		LANGUAGE (BLISS32),
		IDENT = 'V03-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  F11ACP Structure Level 1
!
! ABSTRACT:
!
!	This routine converts a RAD-50 file name block into the
!	equivalent ASCII name string.
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines.
!
!--
!
!
! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  3-Jan-1977  11:11
!
! MODIFIED BY:
!
!	V02-001	ACG0186		Andrew C. Goldstein,	4-Feb-1981  21:19
!		Fix garbage in high word of returned length
!
!	V02-000	ACG0167		Andrew C. Goldstein,	16-Apr-1980  19:27
!		Previous revision history moved to F11B.REV
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:FCPDEF.B32';

GLOBAL ROUTINE MAKE_STRING (NAMEBLOCK, STRING) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine converts a RAD-50 file name block into the
!	equivalent ASCII name string.
!
! CALLING SEQUENCE:
!	MAKE_STRING (ARG1, ARG2)
!
! INPUT PARAMETERS:
!	ARG1: address of file name block
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	ARG2: address of buffer for string
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	length of string generated
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN

MAP
	NAMEBLOCK	: REF BBLOCK,	! name block argument
	STRING		: REF VECTOR [,BYTE]; ! string buffer arg

LOCAL
	BLOCKP		: REF VECTOR [,WORD], ! pointer into name block
	STRINGP		: REF VECTOR [,BYTE], ! pointer into string
	CHARS		: VECTOR [3, BYTE], ! holding place for characters
	STRINGD		: VECTOR [2];	! string descriptor for FAO

BIND
	FORMAT		= DESCRIPTOR ('!SW'), ! format string for FAO
	DELIMITER	= UPLIT BYTE (' ;.')
			: VECTOR [,BYTE]; ! type and version delimiters


! Set up the pointers. Then start up the outer loop, which iterates
! over name and type fields.
!

BLOCKP = NAMEBLOCK[NMB$W_NAME];
STRINGP = .STRING;

DECR K FROM 2 TO 1 DO
    BEGIN

! The next loop iterates over the RAD-50 words in the name block.
! There are 3 words for name, 1 for type. Expand each word into
! the 3 RAD-50 characters.
!

    DECR I FROM (IF .K THEN 1 ELSE 3) TO 1 DO
	BEGIN
	CHARS[0] = .BLOCKP[0] / (40*40);
	CHARS[1] = .BLOCKP[0]/40 MOD 40;
	CHARS[2] = .BLOCKP[0] MOD 40;

! Now convert each character into the correct ASCII code and store it
! in the string buffer if it is not null.
!

	INCR J FROM 0 TO 2 DO
	    IF .CHARS[.J] NEQ 0
	    THEN
		BEGIN
		STRINGP[0] =
		    (
		    IF .CHARS[.J] LSS 30
		    THEN .CHARS[.J] - 1 + 'A'
		    ELSE .CHARS[.J] - 30 + '0'
		    );
		STRINGP = .STRINGP + 1;
		END;
	BLOCKP = .BLOCKP + 2;		! move to next word
	END;				! end of word loop

! At the end of each field, insert the appropriate field delimiter.
!

    STRINGP[0] = .DELIMITER[.K];
    STRINGP = .STRINGP + 1;
    END;				 ! end of outer loop

! Now build a descriptor for the remainder of the string buffer and
! call FAO to convert the version number.
!

STRINGD[0] = 6;
STRINGD[1] = .STRINGP;
$FAO (FORMAT, STRINGD[0], STRINGD[0], .BLOCKP[0]);

RETURN .STRINGP + .STRINGD[0] - .STRING;	! final byte count

END;					! end of routine MAKE_STRING

END
ELUDOM
