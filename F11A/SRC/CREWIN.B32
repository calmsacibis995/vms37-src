MODULE CREWIN (
		LANGUAGE (BLISS32),
		IDENT = 'V03-001'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  F11ACP Structure Level 1
!
! ABSTRACT:
!
!	This routine creates and initializes a file window.
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines. This routine must be called
!	in kernel mode.
!
!--
!
!
! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  14-Dec-1976  17:10
!
! MODIFIED BY:
!
!	V03-001	LMP0018		L. Mark Pilant,		31-Mar-1982  13:13
!		Modify to use a local of the window complete flag.
!
!	V02-001	LMP0005		L. Mark Pilant,		29-Dec-1981  14:40
!		Add support for Cathedral windows.
!
!	A0100	ACG0001		Andrew C. Goldstein,  10-Oct-1978  20:01
!		Previous revision history moved to F11A.REV
!
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:FCPDEF.B32';

GLOBAL ROUTINE CREATE_WINDOW (ACCTL, SIZE, HEADER, PID, FCB) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine creates a file access window.
!
! CALLING SEQUENCE:
!	CREATE_WINDOW (ARG1, ARG2, ARG3, ARG4, ARG5)
!
! INPUT PARAMETERS:
!	ARG1: access control word (from FIB, usually)
!	ARG2: size of window in # of pointers
!	ARG3: address of file header
!	ARG4: PID of accessor
!	ARG5: address of file FCB
!
! IMPLICIT INPUTS:
!	CURRENT_VCB: address of VCB of volume in process
!	CURRENT_UCB: address of UCB of disk in process
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	address of window
!
! SIDE EFFECTS:
!	window block created
!
!--

BEGIN

MAP
	HEADER		: REF BBLOCK,	! file header arg
	FCB		: REF BBLOCK;	! FCB arg

LOCAL
	WINDOW_SIZE,			! actual size of window
	WINDOW		: REF BBLOCK,	! window created
	PRIMARY_WINDOW	: REF BBLOCK;	! address of the primary window

EXTERNAL
	CURRENT_VCB	: REF BBLOCK,	! VCB in process
	CURRENT_UCB	: REF BBLOCK;	! UCB in process

EXTERNAL ROUTINE
	ALLOCATE,			! allocate dynamic memory
	TURN_WINDOW;			! window turner routine

! Compute the size of the window. If fixed, allocate it and turn it to
! map VBN 1. If a maximal window is requested (indicated by a size of -1),
! the window turner will allocate the window.
!

WINDOW_SIZE = .SIZE;
IF .WINDOW_SIZE EQL 0
THEN WINDOW_SIZE = .CURRENT_VCB[VCB$B_WINDOW];

IF .WINDOW_SIZE NEQ -1
THEN
    BEGIN
    IF .WINDOW_SIZE GTRU MAX_WINDOW
    THEN WINDOW_SIZE = MAX_WINDOW;
    IF .WINDOW_SIZE LSSU MIN_WINDOW
    THEN WINDOW_SIZE = MIN_WINDOW;
    WINDOW = ALLOCATE (.WINDOW_SIZE * 6 + WCB$C_LENGTH, WCB_TYPE);
    IF .WINDOW NEQ 0
    THEN TURN_WINDOW (.WINDOW, .HEADER, 1, 1);
    END
ELSE
    WINDOW = TURN_WINDOW (0, .HEADER, 1, 1);

! Init cells within the window
!

PRIMARY_WINDOW = .WINDOW;
UNTIL .WINDOW EQL 0
DO
    BEGIN
    WINDOW[WCB$L_PID]	= .PID;			! accessor PID
    WINDOW[WCB$L_ORGUCB]	= .CURRENT_UCB;	! original device UCB
    WINDOW[WCB$W_ACON]	= .ACCTL<0,16>;		! access control bits
    WINDOW[WCB$L_FCB]	= .FCB;			! FCB address
    WINDOW[WCB$V_READ]	= 1;			! read access always allowed
    WINDOW[WCB$V_WRITE]	= .WINDOW[WCB$V_WRITEAC]; ! write access sometimes
    IF .HEADER[FH1$V_READCHECK] THEN WINDOW[WCB$V_READCK] = 1;
    IF .HEADER[FH1$V_WRITCHECK] THEN WINDOW[WCB$V_WRITECK] = 1;
    WINDOW = .WINDOW[WCB$L_LINK];
    END;

RETURN .PRIMARY_WINDOW;

END;					! end of routine CREATE_WINDOW

END
ELUDOM
