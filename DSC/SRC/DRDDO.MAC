	$BEGIN	DRDDO,0003,<READ DATA FROM OUTPUT DISK FILE>

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
; ANDREW C. GOLDSTEIN  28-OCT-76  22:05
;
; ANDREW C. GOLDSTEIN  15-JAN-1980  20:08
; ACG0107 - FIX BUFFER LINKING ON MAP FAILURE
;
; GROO1---G.RITTENBURG FEB.22,1978
; CORRECTION TO INHIBIT EXTEND IF NMG MODE COMPARE
; 11M DSC CORRECTIONS
;


;+
;
; *** - $DRDDO	READ DATA FROM OUTPUT DISK FILE
;
; THIS ROUTINE READS THE INDICATED DATA BLOCKS FROM THE OUTPUT DISK
; FILE INTO THE INDICATED DATA BUFFER. VIRTUAL BLOCKS ARE MAPPED
; TO LOGICAL BLOCKS USING THE OUTPUT FILE HEADER AND LOGICAL TRANSFERS
; ARE INITIATED AS NECESSARY. NOTE THAT A BLOCK COUNT CAUSES A DUMMY
; TRANSFER OF ZERO LENGTH.
;
; INPUTS:
;
;	R1 = BLOCK COUNT TO READ
;	$WVBN = HIGH AND LOW STARTING VBN
;	R4 = INPUT BUFFER DESCRIPTOR
;
; OUTPUTS:
;
;	R4 = BUFFER DESCRIPTOR ADDRESS
;	$WVBN UPDATED TO NEXT BLOCK
;	BUFFER PREAMBLE INITIALIZED
;	TRANSFER INTO BUFFER INITIATED
;	OTHER REGISTERS CLOBBERED
;
;-

$DRDDO::
	$CALL $BUFCK <,,,,R4>		; WAIT FOR BUFFER
	LET B.SIZ+P.VBN(R4) := $WVBN	; SET UP STARTING VBN
	LET B.SIZ+P.VBN+2(R4) := $WVBN+2 ; IN PREAMBLE
	LET B.SIZ+P.CNT(R4) := #0	; INIT BYTE COUNT TO 0
	LET B.SIZ+P.FLAG(R4) := #PF.DAT	; SET DATA BLOCK FLAG
	PUSH R1				; SAVE BLOCK COUNT
	PUSH R4				; SAVE DESCRIPTOR ADDRESS
	LET (SP) := (SP) + #B.SIZ+P.SIZ	; BUILD START ADDRESS
	REPEAT
MAP:	  LET R5 := #$OHBF		; MAP USING OUTPUT FILE HEADER
	  LET R3 := $WVBN - H.VBN(R5)	; GET CURRENT VBN, ADJUSTED
	  LET R2 := $WVBN+2 - CARRY - H.VBN+2(R5) ; BY BASE VBN
	  IF 2(SP) EQ #0 GOTO EXIT	; IF NULL TRANSFER
	  $CALL $MPVBN <,,R2,R3,,R5>	; MAP TO LOGICAL
	  ON.ERROR
	    IF #KY.MRG SET.IN $OFLAG	; IF MERGE MODE
	      PUSH R4			; SAVE BCB POINTER
	      $CALL $FILSZ <,,,,R5>	; COMPUTE SIZE OF THIS HEADER
	      LET H.VBN(R5) := H.VBN(R5) + R1 ; UPDATE START VBN
	      LET H.VBN+2(R5) := H.VBN+2(R5) + CARRY + R0
	      LET R4 := #$OHHD		; GET HEADER BUFFER HEADER
	      LET B.STAT(R4) := #0	; RELEASE THE BUFFER
	      $CALL $RDNXO <,,,,R4,R5>	; TRY TO READ EXTENSION HEADER
	      POP R4
	    ELSE
	      SEC			; NO EXTEND IN /NMG COMPARE
	    END
	    ON.NOERROR GOTO MAP		; PROCEED
	    ERRP ER.MPO			; PRINT MESSAGE
EXIT:	    TST (SP)+			; CLEAN THE STACK
	    GOTO EXITA
	  END
	  IF R0 NE #0 OR R1 HI 2(SP)	; IF MORE BLOCKS MAPPED
	    LET R0 := #0		; THAN DESIRED,
	    LET R1 := 2(SP)		; REDUCE TO DESIRED NUMBER
	  END
	  LET $WVBN := $WVBN + R1	; BUMP VBN TO NEXT SEGMENT
	  LET $WVBN+2 := $WVBN+2 + CARRY
	  LET 2(SP) := 2(SP) - R1	; DECREMENT BLOCK COUNT
	  $CALL $MUL <#512.,R1>		; COMPUTE BYTE COUNT
	  POP R5			; GET CURRENT BUFFER ADDR
	  $CALL $READO <,R1,R2,R3,R4,R5> ; START THE READ
	  $CALL @$WATO  <,R1,R2,R3,R4,R5> ; WAIT
	  LET R5 := R5 + R1		; UPDATE BUFFER ADDRESS
	  IF (SP) EQ #0 LEAVE LOOP	; IF COUNT IS 0 THEN DONE
	  LET B.STAT(R4) := #0
	  PUSH R5			; AND SAVE FOR NEXT READ
	END LOOP
EXITA:	LET $WVBN := $VBN
	LET $WVBN+2 := $VBN+2		; SET O.P. VBN = I.P. VBN
	TST (SP)+			; CLEAN THE STACK
	RETURN



	.END
