	$BEGIN	DWTSU,0018,<WRITE VOLUME SUMMARY TO DISK>

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
; ANDREW C. GOLDSTEIN  15-AUG-76  18:30
;
; ANDREW C. GOLDSTEIN  28-FEB-1980  23:51
; ACG0151 - ADD CONDITIONAL ASSEMBLY TO RUN UNDER 11M
;
; ANDREW C. GOLDSTEIN  20-FEB-1980
; ACG0141 - BACKGROUND ENTIRE INDEX FILE BEFORE COPY
;
; ANDREW C. GOLDSTEIN  17-OCT-1979  10:58
; ACG0052 - CME DISK CHARACTERISTICS CHANGES
; GEORGE RITTENBURG  11-MAR-77	001  CONDITIONAL FOR 11D AND IAS INSERTED
;
; **GR01---G.RITTENBURG 23-OCT-1978
; CONDITIONALIZED FOR 11M
;
; ACG0014 - ANDREW C. GOLDSTEIN 28-FEB-1979
; ROUND UP VOLUME SIZE TO CLUSTER, EOF FIXES FOR SYSTEM FILES
;
	.IF	NDF,R$$NVX
	.MCALL	GLUN$C,FHDL2$
	FHDL2$				; DEFINE FILE HEADER OFFSETS
	.IFF
	.MCALL	GLUN$C
	.ENDC

;
; RAD-50 FILE NAMES FOR THE STORAGE MAP AND BAD BLOCK FILES
;
BITNAM:	.ASCII	"BITMAP"
BADNAM:	.ASCII	"BADBLK"


;+
;
; *** - $DWTSU	WRITE VOLUME SUMMARY TO DISK
;
; THIS ROUTINE ESSENTIALLY PERFORMS AN INITVOL ON THE CURRENT
; OUTPUT DISK. THE BAD BLOCK MAP IS CONSTRUCTED FROM THE BAD BLOCK
; DATA, THE SYSTEM FILES ARE ALLOCATED, AND THE STORAGE MAP IS
; INITIALIZED. THEN THE INDEX FILE, STORAGE MAP, AND BAD BLOCK
; FILE HEADERS ARE RECONSTRUCTED AND WRITTEN TO THE DISK.
;
; INPUTS:
;
;	OUTLUN ASSIGNED TO DISK
;	VOLUME SUMMARY BLOCK IN $BUF2
;	$OUDEV POINTING AT DEVICE TABLE ENTRY
;
; OUTPUTS:
;
;	DISK INITIALIZED
;	REST OF DEVICE TABLE ENTRY FILLED IN
;	INDEX FILE HEADER IN $OXBF AND $OHBF
;	ALL REGISTERS CLOBBERED
;
;-

$DWTSU::
	$CALL $BUFCK <,,,,#$B1HD>	; USE BUF1 AS SCRATCH AREA
	THRU R1 := #<2048.+B.SIZ+P.SIZ>/2
	  LET (R4)+ := #0		; INIT IT TO ZERO
	END LOOP

	GLUN$C OUTLUN,$LUNBF		; GET DEVICE CHARACTERISTICS
	.IF	NDF,R$$NVX
	.IF	NDF,R$$11M
	GGOM$C	OUTLUN,$DEVGM		; GET DEVICE GEOMETRY
	.ENDC
	$CALL  $CMEFX			; REARRANGE GEOMETRY INFO.
	.ENDC
	LET R0 := $CLF			; GET CLUSTER FACTOR
	LET R2 := R0 - #1		; MINUS 1
	LET R2 := R2 + $CW3		; ADD TO VOLUME SIZE
	LET R1 := $CW2 + CARRY
	$CALL $DDIV <R0,R1,R2>		; DIVIDE BY CLUSTER SIZE
	LET R0 := $CLF			; AND MULTIPLY BACK UP
	LET R3 := R2
	LET R2 := R1
	$CALL $DMUL <R0,,R2,R3>		; TO ROUND UP TO CLUSTER BOUNDARY
	LET $VOLSZ := R1
	LET $VOLSZ+2 := R0
	$CALL $DELTA			; COMPUTE HOME BLOCK PLACEMENT DELTA.
	$CALL $DSCBD			; DO BAD BLOCK PROCESSING
	LET R0 := $OUDEV		; POINT TO DEVICE TABLE ENTRY
					; SEE IF DISK HAS ENOUGH SPACE
	DCOMP V.FRBK+2(R0),V.FRBK(R0), $B2DAT+S.USE+2,$B2DAT+S.USE
	IF RESULT IS LO THEN ERROR ER.DEX

	$CALL $DSCAL			; ALLOCATE SYSTEM FILES
	LET R0 := $OUDEV + #V.RVN	; DEVICE TABLE ENTRY AGAIN
	LET (R0)+ := $B2DAT+S.RVN	; SET RVN OF THIS DISK
	LET (R0)+ := $B2DAT+S.HFNU	; HIGHEST FILE NUMBER USED
	LET  (R0)+  :=  $B2DAT+S.HFNU+2
	SUB $B2DAT+S.USE,(R0)+		; COMPUTE SPACE THAT WILL BE LEFT
	SBC (R0)
	SUB $B2DAT+S.USE+2,(R0)+
	LET (R0)+ := #1			; FIRST FREE LBN SET TO 1
	LET (R0)+ := $B2DAT+S.IBSZ	; INDEX FILE BITMAP SIZE
	LET (R0)+ := $INDXF+4		; INDEX FILE BITMAP LBN
	LET (R0)+ := $INDXF+6
	LET (R0) := $SBM		; STORAGE MAP SIZE,
	DEC (R0)+			; EXCLUDING SCB
	LET (R0)+ := $SBM+4		; AND LBN
	LET (R0)+ := $SBM+6
	LET (R0)+ := $B2DAT+S.CLF	; STORAGE MAP CLUSTER FACTOR

	$CALL $DSCBT			; INIT STORAGE BITMAP

;
; NOW CONSTRUCT THE INDEX FILE HEADER FROM THE ONE READ IN WITH
; THE VOLUME SUMMARY BLOCK.
;
	$CALL $BUFCK <,,,,#$OXHD>	; GET INDEX FILE HEADER BUFFER
	LET B.STAT(R4) := #1		; MARK IT BUSY
	LET R5 := #$OXBF		; POINT TO INDEX FILE HEADER BUFFER
	LET R1 := R5
	LET R2 := #$B2DAT+512.		; POINT TO INDEX FILE HEADER IMAGE
	THRU R0 := #256.
	  LET (R1)+ := (R2)+		; COPY INDEX FILE HEADER IMAGE
	END LOOP
	$CALL $ZMAP <,,,,,R5>		; CLEAN OUT THE MAP AREA
	LET R4 := #$BOOTB		; POINT TO START OF ALLOCATION TABLE
	$CALL ALCRP			; BUILD MAP FOR BOOT BLOCK
	$CALL ALCRP			; AND HOME BLOCK
	$CALL ALCRP			; AND BACKUP HOME BLOCK
	$CALL ALCRP			; AND BACKUP INDEX FILE HEADER
	$CALL ALCRP			; AND REST OF INDEX FILE
	$CALL $WRHDR <,,,,#$OXHD>	; WRITE INDEX FILE HEADER
;
; CONSTRUCT AND WRITE THE STORAGE BITMAP FILE HEADER
;
	$CALL $BUFCK <,,,,#$OHHD>	; GET HEADER BUFFER
	LET R5 := #$OHBF		; POINT TO HEADER BUFFER
	LET R1 := R5
	LET R2 := #$OXBF		; AND INDEX FILE HEADER
	THRU R0 := #256.
	  LET (R1)+ := (R2)+		; COPY THE HEADER
	END LOOP
	LET H.FNUM(R5) := #2		; STORAGE MAP IS FILE #2
	LET H.FSEQ(R5) := #2
	LET R0 := #0
	LET R0 :B= R0 SET.BY H.IDOF(R5)	; FIND THE IDENT AREA
	LET R0 := R0 L.SHIFT 1 + #$OHBF+I.FNAM
	LET R1 := #BITNAM
	THRU R2 := #6
	  LET (R0)+ :B= (R1)+		; COPY IN FILE NAME OF BITMAP
	END LOOP
	$CALL $ZMAP <,,,,,R5>		; CLEAN OUT MAP AREA
	LET H.UFAT+F.EFBK+2(R5)  :=  $SBMEF+2 ; SET THE END OF FILE MARK.
	LET H.UFAT+F.EFBK(R5)  :=  $SBMEF
	LET H.UFAT+F.FFBY(R5)  :=  #0
	LET R4 := #$SBM			; GET STORAGE MAP ALLOCATION
	LET H.UFAT+F.HIBK+2(R5) := (R4)	; SET HIGH BLOCK IN FILE ATTRIBUTES.
	LET H.UFAT+F.HIBK(R5) := 2(R4)
	$CALL	ALCRP			; BUILD RP TO MAP STORAGE BIT MAP.
	$CALL $WRHDR <,,,,#$OHHD>	; WRITE THE HEADER
;
; NOW CONSTRUCT AND WRITE THE BAD BLOCK FILE HEADER
;
	$CALL $BUFCK <,,,,#$OHHD>	; GET HEADER BUFFER
	LET H.FNUM(R5) := #3		; BAD BLOCK FILE IS NUMBER 3
	LET H.FSEQ(R5) := #3
	LET R0 := #0
	LET R0 :B= R0 SET.BY H.IDOF(R5)	; FIND THE IDENT AREA
	LET R0 := R0 L.SHIFT 1 + #$OHBF+I.FNAM
	LET R1 := #BADNAM
	THRU R2 := #6
	  LET (R0)+ :B= (R1)+		; COPY IN FILE NAME OF BITMAP
	END LOOP
	LET  H.UFAT+F.EFBK+2(R5)  :=  #0 ; SET THE END OF FILE MARK.
	LET  H.UFAT+F.EFBK(R5)  :=  #0
	$CALL $ZMAP <,,,,,R5>		; CLEAN OUT MAP AREA
	LET R4 := #$BADBK		; POINT TO START OF BAD BLOCK DATA
	WHILE R4 LO $BADP		; LOOP FOR ALL BAD EXTENTS
	  $CALL ALCRP			; CREATE RETRIEVAL POINTER FOR EACH
	END LOOP
	$CALL $FILSZ <,,,,,R5>		; COMPUTE FILE SIZE
	LET H.UFAT+F.HIBK(R5) := R0	; STORE IN FILE ATTRIBUTES
	LET H.UFAT+F.HIBK+2(R5) := R1
	LET R1 := R1 + #01		; BUMP FOR USE AS EOF
	LET R0 := R0 + CARRY
	LET H.UFAT+F.EFBK(R5) := R0
	LET H.UFAT+F.EFBK+2(R5) := R1
	$CALL $WRHDR <,,,,#$OHHD>	; AND WRITE THE HEADER

	$CALL $BUFCK <,,,,#$OHHD>	; GET HEADER BUFFER
	LET B.STAT(R4) := #1		; MARK IT BUSY
	LET R0 := #$OHBF
	LET R1 := #$OXBF
	THRU R2 := #256.
	  LET (R0)+ := (R1)+		; COPY INDEX FILE HEADER INTO
	END LOOP			; HEADER BUFFER
	LET (R0)+ := #0			; INIT BASE VBN
	LET (R0)+ := #0
	LET $B1HD+B.STAT := #0		; RELEASE THE I/O BUFFERS
	LET $B2HD+B.STAT := #0
;
; NOW BACKGROUND THE ENTIRE INDEX FILE WITH ZEROS. THIS IS NECESSARY TO
; COVER THE OBSCURE AND UNPREDICTABLE CASES IN WHICH A HEADER BLOCK IS
; LEFT UNINITIALIZED. THIS MUST NOT OCCURR, TO PREVENT THE LATER APPEARANCE
; OF PHANTOM FILE HEADERS.
;
	LET R1 := $OUDEV		; POINT TO OUTPUT DEVICE TABLE ENTRY
	LET R1 := V.IBSZ(R1)		; GET INDEX FILE BITMAP SIZE
	LET R3 := $INDXF+4 + R1		; COMPUTE START OF FILE HEADERS
	LET R2 := $INDXF+6 + CARRY
	NEG R1
	LET R1 := R1 + $INDXF		; COMPUTE SPACE ALLOCATED FOR HEADERS
	LET R0 := $INDXF+2 + CARRY - #1
	LET R3 := R3 + #5		; SKIP STANDARD HEADERS
	LET R2 := R2 + CARRY
	LET R1 := R1 - #5
	LET R0 := R0 - CARRY
	PUSH R0,R1			; SAVE BLOCK COUNT ON STACK

	LET R4 := #$B1HD		; GET BUFFER DESCRIPTOR
	LET R5 := #$BUF2
	THRU R1 := #1024.		; ZERO BUFFER 2 (NOTE WE USE BOTH
	  LET (R5)+ := #0		; BUFFERS FOR MAX SPEED)
	END

	REPEAT
	  LET R1 := #8.			; ASSUME FULL BUFFER WRITE
	  IF 2(SP) EQ #0 AND (SP) LO R1	; IF LESS LEFT...
	    LET R1 := (SP)		; THEN DO WHAT'S LEFT
	  END
	  LET (SP) := (SP) - R1		; UPDATE BLOCK COUNT
	  LET 2(SP) := 2(SP) - CARRY
	  SWAB R1			; CONVERT BLOCK TO BYTE COUNT
	  ASL R1
	  $CALL $WRITE <,R1,R2,R3,R4>	; WRITE THE BLOCKS
	  $CALL $WAITO <,,,,R4>		; AND WAIT FOR COMPLETION
	  ON.ERROR THEN ERROR ER.IOR
	  IF (SP) EQ #0 AND 2(SP) EQ #0
	    LEAVE LOOP
	  END
	  LET R3 := R3 + #8.		; BUMP LBN
	  LET R2 := R2 + CARRY
	END LOOP
	CMP (SP)+,(SP)+			; CLEAN THE STACK
	RETURN

;+
;
; SUBROUTINE TO CALL THE RETRIEVAL POINTER BUILDER WITH AN ALLOCATION
; TABLE ENTRY AS INPUT. R4 POINTS TO THE TABLE ENTRY, ON RETURN IT IS
; BUMPED TO THE NEXT.
;
;-

ALCRP:	LET R1 := (R4)+			; GET BLOCK COUNT
	LET R0 := (R4)+
	LET R3 := (R4)+			; AND LBN
	LET R2 := (R4)+
	$CALL $BLDRP <R0,R1,R2,R3,,R5>	; CONSTRUCT RETRIEVAL POINTERS
	RETURN



	.END
