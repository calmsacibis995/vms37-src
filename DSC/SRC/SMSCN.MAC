	$BEGIN	SMSCN,0001,<STORAGE MAP SCAN>

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
; ANDREW C. GOLDSTEIN  1-AUG-76  13:17
; PETER H. LIPMAN	27-FEB-74

;+
;
; *** - .SMSCN	SCAN AND OPERATE ON STORAGE MAP
;
; THIS ROUTINE ACCEPTS A BIT COUNT AND A STARTING BIT ADDRESS, AND
; THE ADDRESS OF A ROUTINE TO CALL. STARTING WITH THE SPECIFIED BIT,
; THE ROUTINE IS CALLED ITERATIVELY WITH THE ADDRESS AND VALUE OF EACH
; BIT UNTIL:
; 	1) THE BIT COUNT GOES TO ZERO, I.E. THE SCAN SUCCEEDED
; 	2) C = 1 IS RETURNED BY THE SPECIFIED ROUTINE I.E. THE SCAN FAILED
;
; INPUTS:
;
; 	R0 = BIT MASK STARTING BIT
; 	R1 = BIT WORD ADDRESS OF STARTING BIT
; 	R2,R3 = COUNT OF BITS TO OPERATE ON
; 	R4 = DEVICE TABLE ENTRY
; 	R5 = ADDRESS OF ROUTINE TO CALL
; 	   CALLING AND RETURN CONVENTIONS DOCUMENTED BELOW
; 	.SMVBN CONTAINS CURRENT STORAGE MAP VBN IN .SMBUF
;
; OUTPUTS:
;
; 	C = 0 IF DESIRED NO. OF BITS SUCCESSFULLY OPERATED ON
; 	C = 1 IF COUNT NOT EXHAUSTED
; 	R0 = BIT MASK OF LAST BIT OPERATED ON
; 	R1 = BIT WORD ADDRESS OF LAST BIT OPERATED ON
; 	R2,R3 = REMAINING BIT COUNT
; 	R4,R5 PRESERVED
;
;-

.SMSCN::CLC
10$:	BIT	R0,(R1)
	CALL	(R5)		; C = 0 AND Z = 0 IF BIT OFF, Z = 1 IF BIT ON
	BCS	20$
	SUB	#1,R3		; COUNT THIS OPERATION
	SBC	R2		; AND CLEAR CARRY
	MOV	R3,-(SP)	; ANY MORE BITS TO TEST
	BIS	R2,(SP)+
	BEQ	20$		; BRANCH IF DONE
	CALL	.SMNXB		; SET UP NEXT BIT
	BCC	10$		; BRANCH IF ANOTHER BIT IS AVAILABLE
20$:	RETURN

;+
;
; THE FOLLOWING ROUTINES OPERATE ON A BIT IN THE STORAGE MAP AND OBEY
; THE FOLLOWING INPUT AND OUTPUT CONVENTIONS.
;
; INPUTS:
;
; 	C = 0
; 	Z = 0 IF BIT IS CLEAR
; 	Z = 1 IF BIT IS SET
; 	R0 = BIT MASK WORD OF BIT TO OPERATE ON
; 	R1 = BIT WORD ADDRESS OF BIT TO OPERATE ON
;
; OUTPUTS:
;
; 	C = 0 IF OPERATION IS SUCCESSFUL
; 	C = 1 IF OPERATION FAILED
; 	IF BIT IS ALTERED, THEN "DIRTY BIT" IN .SMVBN
; 		(SIGN BIT) MUST BE SET
;-

;
; CHECK IF BIT IS AVAILABLE, C = 1 IF NOT
;
.CKFRE::
	BNE	10$		; BRANCH IF BIT IS AVAILABLE
	SEC
10$:	RETURN
;
; ALLOCATE (CLEAR) SPECIFIED BIT
;
	.ENABL	LSB

.ALOBT::
	BEQ	10$		; BRANCH IF BIT ALREADY ALLOCATED
	BIC	R0,(R1)		; ALLOCATE IT
	BIS	#1,.SMFLG	; MARK BUFFER DIRTY
	RETURN

10$:	FATAL <BIT IN USE BUT SHOULD HAVE BEEN FREE>



	.END

