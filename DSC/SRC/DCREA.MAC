	$BEGIN	DCREA,0021,<CREATE FILE ON DISC>

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
; ANDREW C. GOLDSTEIN  20-AUG-76  14:30
;
; **GR01---G.RITTENBURG--10,OCT,1978
; CORRECTIONS FROM 11M DSC
;
	.IF	NDF,R$$NVX
	.MCALL	FHDL2$
	FHDL2$				; DEFINE FILE HEADER OFFSETS (ODS-2)
	.ENDC

;+
;
; *** - $DCREA	CREATE FILE ON DISK
;
; THIS ROUTINE ALLOCATES SPACE ON THE OUTPUT DISK AND INITIALIZES THE
; HEADER FOR THE INDICATED FILE.
;
; INPUTS:
;
;	OUTLUN ASSIGNED TO DISK
;	OUTPUT DEVICE TABLE ENTRY
;	ATTRIBUTE BLOCK IN $BUF1
;	FILE HEADER IN $BUF2
;
; OUTPUTS:
;
;	CC - C	CLEAR IF ALL OK
;		SET IF ERROR
;	FILE HEADER IN $OHBF
;	BIT TURNED ON IN INDEX FILE BITMAP
;	HEADER WRITTEN TO DISK
;	STORAGE BITMAP ALTERED
;
;
; *** - $DEXTD	EXTEND DISK FILE
;
; THIS ROUTINE EXTENDS THE DISK FILE BEING WRITTEN BY THE AMOUNT
; MAPPED BY THE NEW HEADER, AND CREATES A NEW EXTENSION HEADER IF
; NECESSARY.
; **** - NOTE! THIS ROUTINE DOES NOT WORK FOR MULTI-VOLUME FILES!

;
; INPUTS:
;
;	OUTLUN ASSIGNED TO DISK
;	OUTPUT DEVICE TABLE ENTRY
;	FILE EXTENSION HEADER IN $BUF2
;	CURRENT FILE HEADER IN $OHBF
;
; OUTPUTS:
;
;	CC - C	CLEAR IF ALL OK
;		SET IF ERROR
;	UPDATED FILE HEADER IN $OHBF
;	HEADER(S) WRITTEN TO DISK
;	STORAGE BITMAP ALTERED
;
;-

$DEXTD::
	$CALL $FILSZ <,,,,,#$B2DAT>  	; COMPUTE ADDITIONAL SIZE **5-10-77
	LET $ALSIZ := R1		; AND SAVE
	LET $ALSIZ+2 := R0
	LET R0 := $CURAL SET.BY $CURAL+2 ; SEE IF EXISTS SPACE
	IF RESULT IS NE
	  PUSH  #EX.AC1			; IF YES, SAVE CONTIG INDIC ON STACK.
	ELSE
	  PUSH  #0			; SAVE NON CONTIG INDIC ON STACK.
	END
	$CALL	CKEXTD			;TO CHECK FOR POSSIBLE EXTEND
	JUMPTO ALC1

$DCREA::
	$CALL $BUFCK <,,,,#$OHHD>	; GET FILE HEADER BUFFER
	LET B.STAT(R4) := #1		; MARK IT BUSY
	LET R5 := #$OHBF
	LET $OHBF+H.VBN := #0		; INIT HEADER VBN
	LET $OHBF+H.VBN+2 := #0
	LET R0 := R5
	LET R1 := #$B2DAT		; POINT TO INCOMING HEADER  **5-10-77
	THRU R2 := #256.
	  LET (R0)+ := (R1)+		; COPY HEADER TO BUFFER
	END LOOP
	LET $CURAL := #0		; INIT HOLDOVER ALLOCATION
	LET $CURAL+2 := #0
	IFB $B1DAT+A$FLG EQ #0 AND $B1DAT+A$FOP NE #0 ; IF CONTIGUOUS
	  PUSH  #EX.AC1			; IF YES, SAVE CONTIG INDIC ON STACK.
	  LET H.UCHA(R5) :B= H.UCHA(R5) SET.BY #UC.CON ; MARK THE HEADER
	  LET R0 := $B1DAT+A$ALQ+2	;GET FILE SIZE FROM ATTRIBUTES
	  LET R1 := $B1DAT+A$ALQ	; TO ALLOCATE ALL AT ONCE
	ELSE				; IF NON-CONTIGUOUS
	  PUSH  #0			; SAVE NON CONTIG INDIC ON STACK.
	  LET H.UCHA(R5) :B= H.UCHA(R5) OFF.BY #UC.CON ; MARK THE HEADER
	  $CALL $FILSZ <,,,,,#$B2DAT>	; ALLOCATE ONLY CURRENT HEADER'S WORTH
	END
	LET $ALSIZ := R1		; SAVE BLOCK COUNT
	LET $ALSIZ+2 := R0
	IF #KY.NBO OFF.IN $OFLAG	; IF THIS IS A BOOTABLE VOLUME
	  BEGIN CMPBO
	    $CALL $MPVBN <,,#0,#1,,#$B2DAT> ; FIND STARTING LBN OF FILE
	    DCOMP $BOLBN+2,$BOLBN, R2,R3 ; SEE IF FILE CONTAINS BOOT LBN
	    IF RESULT IS HIS
	      LET R3 := R3 - $BOLBN	; COMPUTE OFFSET INTO FILE
	      LET R2 := R2 - CARRY - $BOLBN+2
	      NEG R2
	      NEG R3
	      SBC R2
	      DCOMP R2,R3, R0,R1	; CHECK AGAINST END
	      IF RESULT IS LO		; IF THE FIRST EXTENT OF THIS FILE
		LET R3 := R3 + #01	; MAPS THE BOOT IMAGE, COMPUTE
		LET R2 := R2 + CARRY	; THE BOOT FILE VBN
		LEAVE CMPBO
	      END
	    END
	    LET R2 := #0		; ZERO MEANS NOT MAPPED
	    LET R3 := #0
	  END CMPBO
	  LET $BOVBN := R3		; SAVE THE RESULT
	  LET $BOVBN+2 := R2
	END
	LET $B1HD+B.STAT := #0		; RELEASE $BUF1
	$CALL	CKEXTD			;TO CHECK FOR POSSIBLE EXTEND
	PUSH #0				; STARTING SEGMENT NUMBER = 0

ALCOM:	$CALL $ZMAP <,,,,,#$OHBF>	; CLEAN OUT THE MAP AREA
	IF #KY.MRG SET.IN $OFLAG	; IF MERGE MODE
	  LET H.FSEG(R5) :=  (SP)+	; SET SEGMENT NUMBER
	  LET H.EFNU(R5) := #0		; EXT.FILE NUMBER
	  LET H.EFSQ(R5) := #0		; EXT. FILE SEQ. NUMBER
	  LET H.ERVN(R5) := #0		; EXT. REL VOL NUMBER
	ELSE
	  CLR $EXFLG			; INHIBIT EXTEND
	  TST (SP)+			; CLEAN STACK
	END
;
; NOW TURN ON THE HEADER'S BIT IN THE INDEX FILE BITMAP
;
	LET R4 := $OUDEV		; GET DEVICE TABLE ENTRY
	LET R0 := $OHBF+H.FNUM
	LET $FNU := R0			; SAVE FILE NUMBER FOR MESSAGES
	LET R0 := R0 - #1		; GET FILE NUMBER LESS 1
	$CALL $DIV <R0,#4096.>		; COMPUTE BLOCK NUMBER
	PUSH R1				; SAVE BIT NUMBER
	IF R0 HIS V.IBSZ(R4)		; IF OUT OF BOUNDS
	  TST (SP)+			; CLEAN STACK
	  ERRP ER.OFN			; PRINT MESSAGE
	  RETURN			; AND QUIT ON THIS FILE
	END
	LET R3 := V.IBLB(R4) + R0	; COMPUTE LBN
	LET R2 := #0 + CARRY
	$CALL $RDWLN <#OUTLUN,,R2,R3,#$B1HD> ; READ MAP BLOCK
	POP R0				; GET BIT NUMBER OF FILE
	$CALL $DIV <R0,#8.>		; COMPUTE BYTE & BIT
	LET R0 := R0 + R5		; BUFFER ADDRESS
	LET (R0) :B= (R0) SET.BY $BIT(R1) ; TURN IT ON
	LET B.STAT(R4) := #0		; RELEASE THE BUFFER
	$CALL $WRI1B <,,R2,R3,R4>	; AND REWRITE THE BLOCK
	$CALL $WAITO <,,,,R4>		; WAIT FOR COMPLETION
	ON.ERROR THEN ERROR ER.WXB
;
; NOW ALLOCATE SPACE AND BUILD RETRIEVAL POINTERS
;
ALC1:	$CALL $BUFCK <,,,,#$B1HD>	; GET I/O BUFFER
	THRU R0 := #1024.
	  LET (R4)+ := #0		; ZERO BUFFER FOR USE BY
	END LOOP			; ALLOCATER
	LET  .SMCTL  :B=  (SP)+		; SET CONTIG/NONCONTIG FOR ALLOCATOR.
	LET R4 := $OUDEV		; OUPUT DEVICE TABLE ENTRY
	LET R3 := V.FLBN(R4)		; GET STARTING POINT FOR SCAN
	$CALL .SMRVB <,,,R3,R4>		; GET BITMAP BLOCK
	REPEAT
	  LET R0 := $ALSIZ SET.BY $ALSIZ+2 SET.BY $CURAL SET.BY $CURAL+2
	  IF RESULT IS EQ LEAVE LOOP
	  LET R5 := #$CURAL		; LOOK AT PREVIOUS ALLOCATION
	  LET R1 := (R5)+
	  LET R0 := (R5)+
	  LET R3 := (R5)+
	  LET R2 := (R5)+
	  PUSH R0
	  BIS R1,(SP)+
	  IF RESULT IS EQ		; IF NONE ALLOCATED
	    $CALL .SMALC <$ALSIZ+2,$ALSIZ,,,R4>	; GET SOME BLOCKS
	    ON.ERROR THEN ERROR ER.DFU	; DEVICE FULL
	  END
	  DCOMP R0,R1, $ALSIZ+2,$ALSIZ	; IF MORE ALLOCATED THAN NEEDED
	  IF RESULT IS HIS
	    LET $ALSIZ := #0		; SAY IT'S DONE
	    LET $ALSIZ+2 := #0
	  ELSE
	    LET $ALSIZ := $ALSIZ - R1	; DEDUCT FROM SPACE NEEDED
	    LET $ALSIZ+2 := $ALSIZ+2 - CARRY - R0
	  END
	  $CALL $BLDRP <R0,R1,R2,R3,,#$OHBF> ; BUILD MAP POINTERS
	  LET R5 := #$CURAL
	  LET (R5)+ := R1		; SAVE REMAINDER FOR EXTENSION
	  LET (R5)+ := R0		; HEADER TO COME LATER
	  LET (R5)+ := R3
	  LET (R5)+ := R2
	  ON.ERROR			; IF HEADER FULL
	    $CALL .SMRVB <,,,#0,R4>	; FLUSH MAP BUFFER
	    LET $B1HD+B.STAT := #0  	; INVALIDATE BITMAP BUFFER
	  IF $EXFLG EQ #1		;SWITCH TO EXT. HDR. ?
		LET $ALSIZ := $ALSIZ + $CURAL ;RESTORE $ALSIZ
		LET $ALSIZ+2 := $ALSIZ+2 + $CURAL+2 + CARRY
		GOTO EXTHD
	  END
	    IFB .SMCTL NE #0		; IF CONTIGUOUS
	      LEAVE LOOP
	    ELSE			; IF NON-CONTIGUOUS
	      ERRP ER.HFU		; WE LOSE
	      $CALL $WRHDR <,,,,#$OHHD>	; WRITE THE HEADER
	      LET $OHHD+B.STAT := #0	; INVALIDATE HEADER
	      LET $B2HD+B.STAT := #0	; INVALIDATE BUFFER
	      RETURN ERROR		; MUST FLUSH THIS FILE
	    END
	  END
	END LOOP
;
; THIS FILE HEADER IS COMPLETE
;
	IFB .SMCTL EQ #0		; IF THIS WAS A NON-CONTIGUOUS
	  LET V.FLBN(R4) := .SMVBN	; ALLOCATION, SAVE NEW MAP VBN
	END
	$CALL .SMRVB <,,,#0,R4>		; FLUSH MAP BUFFER
	$CALL $WRHDR <,,,,#$OHHD>	; WRITE THE HEADER
	IF $SWFLG NE #0			; IF WE SWAPPED HEADERS
	  LET R0 := #$B2DAT		; SWAP THEM BACK
	  THRU R1 := #256.
	    LET R2 := (R5)
	    LET (R5)+ := (R0)
	    LET (R0)+ := R2
	  END LOOP
	END
	IF $EXFLG NE #0			; IF WE DID NOT USE AN EXTENSION HEADER
	  $CALL $DLHDR <,,,,#$B2HD,#$B2DAT> ; DELETE IT
	END
	LET $B1HD+B.STAT := #0	; INVALIDATE BOTH BUFFERS
	LET $B2HD+B.STAT := #0
	PUSH $BOVBN			; SEE IF WE FOUND THE BOOT LBN
	BIS $BOVBN+2,(SP)+		; IN THIS FILE
	IF RESULT IS NE
	  $CALL $RDWLN <#OUTLUN,,#0,#0,#$B1HD> ; READ BOOT BLOCK
	  $CALL $MPVBN <,,$BOVBN+2,$BOVBN,,#$OHBF> ; FIND NEW LBN
	  LET $BUF1+4 := R2		; STORE IN BOOT BLOCK
	  LET $BUF1+6 := R3
	  LET B.STAT(R4) := #0		; RELEASE BUFFER AFTER I/O
	  $CALL $WRI1B <,,#0,#0,#$B1HD>	; AND REWRITE IT
	END
	RETURN NOERROR
;
; WE GET HERE IF THERE IS AN EXTENSION HEADER AND THE CURRENT HEADER IS
; FULL. WE WRITE THE FULL HEADER AND THEN SWAP IT FOR THE EXTENSION
; HEADER AND CONTINUE THE ALLOCATION IN IT.
;
EXTHD:	LET  R0  :=  #$OHBF		; ADDR OF HEADER TO R0.
	LET -(SP) :B= H.FSEG(R0)	; SAVE SEGMENT NUMBER
	LET (SP) := (SP) + #1		; BUMPED BY 1
	LET H.EFNU(R0) := $B2DAT+H.FNUM	; FILL IN FILE NUMBER
	LET H.EFSQ(R0) := $B2DAT+H.FSEQ	; AND SEQUENCE NUMBER
	$CALL $WRHDR <,,,,#$OHHD>	; WRITE THE HEADER
	LET R0 := #$B2DAT		; POINT TO NEW HEADER
	THRU R1 := #256.
	  LET R2 := (R5)		; SWAP OLD AND NEW HEADERS
	  LET (R5)+ := (R0)		; IN THEIR BUFFERS
	  LET (R0)+ := R2
	END LOOP
	LET $EXFLG := #0		; NO MORE EXTENSION
	LET $SWFLG := #1		; SWAP HAS OCCURRED
	JUMPTO ALCOM			; PROCEED WITH ALLOCATION

;
; CHECK TO DETERMINE IF EXTEND IS POSSIBLE
;
CKEXTD:	LET $EXFLG := #0		; ASSUME NO
	LET $SWFLG := #0		; SET NO HDR SWITCH YET
	LET R5 := #$B2DAT		;ADDR EXT HDR TO R5
	LET R0 := #$OHBF		;ADDR CUR.HDR TO R0
	LET R1 := H.EFNU(R0)		;R1 IS EXT HDR FILE #
	LET R2 := H.EFSQ(R0)		;R2 IS EXT HDR FILE SEQ #
	IF 2(SP) EQ #0			;IF NON-CONTIG ALLOC
; IF EXT HDR AND O.P. HDRS HAVE EQUAL FILE ID'S,THIS IS EITHER
; THE ALLOC FOR THE FIRST HDR OR THE PRIOR ALLOC REQUIRED
; EXTEND.OTHERWISE,THE O.P. HDR REMAINS FROM THE PRIOR ALLOC
; AND MAY BE USED FOR EXTEND IF NEEDED.
;
	  IF H.FNUM(R5) EQ H.FNUM(R0)
		IF R1 EQ #0		; NO EXTEND POSSIBLE
		  RETURN
		ELSE
		  LET H.FNUM(R5) := R1	;SET EXT HDR FILE #
		  LET H.FSEQ(R5) := R2	;SET EXT HDR FILE SEQ #
		END
	  END
	ELSE
	  RETURN
	END
	LET $EXFLG := #1		; ALLOW EXTEND
	RETURN


	.END
