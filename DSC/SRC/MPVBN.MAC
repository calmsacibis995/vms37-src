	$BEGIN	MPVBN,0002.2,<MAP VIRTUAL TO LOGICAL (ODS-2)>

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
; JOSEPH A. CARCHIDI  9-DEC-77  17:30
; **GR01---G.RITTENBURG 23-OCT-1978
; CONDITIONALIZED FOR 11M
;
; ACG0014 - ANDREW C. GOLDSTEIN
; IGNORE PLACEMENT DATA POINTERS, FIX BUG IN COUNTS GTR 65K

	.IF	NDF,R$$NVX
	.MCALL	FHDL2$
	FHDL2$				; DEFINE FILE HEADER LAYOUT
	.ENDC

;+
;
; *** - $MPVBN	MAP VIRTUAL BLOCKS TO LOGICAL BLOCKS
;
; THIS ROUTINE MAPS THE INDICATED VIRTUAL BLOCKS (GIVEN RELATIVE TO
; THE START OF THE FILE HEADER) TO THEIR CORRESPONDING LOGICAL
; BLOCKS AND INDICATES THE NUMBER OF BLOCKS THAT MAP CONTIGUOUSLY.
;
; INPUTS:
;
;	R2, R3 = HIGH AND LOW STARTING VBN
;	R5 =	 ADDRESS OF FILE HEADER TO USE
;
; OUTPUTS:
;
;	CC - C	CLEAR IF SUCCESSFUL MAP
;		SET IF VBN NOT CONTAINED IN FILE
;	R0, R1 = NUMBER OF BLOCKS MAPPED
;	R2, R3 = HIGH AND LOW STARTING LBN
;	ALL OTHER REGISTERS PRESERVED
;-

$MPVBN::
	PUSH  R4,R5			; SAVE CALLER'S REGS.
	LET R3 := R3 - #01		; NORMALIZE VBN TO 0
	LET R2 := R2 - CARRY
	CLR  -(SP)			; CREATE LOOP COUNTER.
	BISB  H.USE(R5),(SP)		; SET LOOP COUNT.
	CLR  R4
	BISB  H.MPOF(R5),R4		; MAP AREA OFFSET.
	ASL  R4				; CONVERT TO BYTES.
	ADD  R4,R5			; POINT R5 AT MAP AREA.
	PUSH  R2,R3			; PUT VBN INTO TEMPS.
	BEGIN MAP
	  BEGIN SCAN
	    WHILE  4(SP)  GT  #0	; LOOP FOR ALL POINTERS.
	      CALL  $GT1RP		; GET ONE RETRIEVAL POINTER.
	      ADD   #1,R1		; ADJUST TO ACTUAL
	      ADC   R0			; BLOCK COUNT.
	      SUB   R1,(SP)		; DEDUCT FROM VBN.
	      SBC   2(SP)
	      IF RESULT IS CS
		SUB   R0,2(SP)
		LEAVE SCAN  		; THIS IS THE POINTER.
	      END
	      SUB   R0,2(SP)
	      IF RESULT IS CS LEAVE SCAN  ; THIS IS THE POINTER.
	      SUB   R4,4(SP)		; DECR LOOP CTR BY PTR SIZE.
	    END  LOOP
	    CMP  (SP)+,(SP)+		; DISCARD VBN.
	    SEC				; TO HERE IF EMPTY HEADER
	    LEAVE MAP
	  END SCAN

;
; R2,R3 CONTAIN THE LBN FROM THE RETRIEVAL POINTER.
; ADD THE COUNT AND THE DECREMENTED VBN TO GENERATE
; THE ACTUAL LBN.
;
	  ADD  R1,R3			; ADD THE COUNT AND
	  ADC  R2
	  ADD  R0,R2
	  ADD  (SP),R3			; THE DECREMENTED VBN TO
	  ADC  R2			; COMPUTE THE LBN OFFSET.
	  ADD  2(SP),R2	
;
; WE HAVE FOUND THE RETRIEVAL POINTER THAT MAPS THE STARTING VBN.
; CONVERT NUMBER OF CONTIGUOUS BLOCKS MAPPED TO POSITIVE AND
; RETURN IN R0,R1.
;
	  MOV  (SP)+,R1			; MOV THE NUMBER OF CONTIGUOUS
	  MOV  (SP)+,R0			; BLOCKS MAPPED TO R0,R1.
	  NEG  R0			; MAKE IT POSITIVE.
	  NEG  R1
	  SBC  R0
	END MAP

	INC  (SP)+			; DISCARD LOOP COUNTER.
	POP  R5,R4			; RESTORE CALLER'S REGS.
	RETURN




;+
; *** - $GT1RP  GET 1 RETRIEVAL POINTER.
;
; THIS ROUTINE EXTRACTS THE COUNT AND LBN VALUES FROM ONE 
; RETRIEVAL POINTER AND RETURNS THEM IN REGISTERS.
; IN ADDITION, IT RETURNS THE POINTER SIZE IN WORDS.
;
; INPUTS:
;
;	R5 = ADDRESS OF CURRENT RETRIEVAL POINTER.
;
; OUTPUTS:
;
; 	R0,R1 = COUNT FROM RETRIEVAL POINTER (UNADJUSTED).
;	R2,R3 = LBN FROM RETRIEVAL POINTER.
;	R4 = SIZE OF POINTER IN WORDS.
;	R5 = ADDRESS OF NEXT RETRIEVAL POINTER.
;-
$GT1RP::
	MOV  #2,R4			; INIT TO INDICATE 2 WORD POINTER.
	IF #140000 OFF.IN (R5)		; IF THIS IS A PLACEMENT POINTER
	  TST  (R5)+			; SKIP IT
	  INC R4			; COUNT THE WORD
	END

	CLR  R0				; ZERO THE HIGH ORDER COUNT.
	MOV  (R5)+,R1			; GET FIRST WORD OF RETRIEVAL POINTER.
	MOV  R1,R2			; MAKE A COPY.
	IF  RESULT  IS  PL		; 2 WORD POINTER ?
;
; 2 WORD POINTER.
;
	  BIC  #^C377,R1		; ISOLATE COUNT.
	  CLRB  R2			; ISOLATE HIGH ORDER LBN.
	  SWAB  R2
	  BIC  #^C77,R2			; SIX BITS ONLY.
	  MOV  (R5)+,R3			; LOW ORDER LBN TO R3.
	ELSE				; MUST BE 3 WORD OR 4 WORD POINTER.
;
; 3 OR 4 WORD POINTER.
;
	  INC  R4			; INDICATE 3 WORD POINTER
	  BIC  #140000,R1		; ISOLATE THE COUNT.
	  IF  #040000  SET.IN  R2	; 4 WORD POINTER ?
;
; 4 WORD POINTER.
;
	    MOV  R1,R0			; HIGH ORDER COUNT TO R0.
	    MOV  (R5)+,R1		; GET LOW ORDER COUNT.
	    INC  R4			; INDICATE 4 WORD POINTER.
	  END
;
; 3 OR 4 WORD POINTER.
;
	  MOV  (R5)+,R3			; LOW ORDER LBN TO R3.
	  MOV  (R5)+,R2			; HIGH ORDER LBN TO R2.
	END
;
; ALL POINTER TYPES.
;
	RETURN

	.END

