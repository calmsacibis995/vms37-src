	$BEGIN	DLHDD,0001,<DELETE FILE HEADER ON DISK>

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
; ANDREW C. GOLDSTEIN  8-MAR-1979
;
	.IF	NDF,R$$NVX
	.MCALL	FHDL2$
	FHDL2$				; DEFINE FILE HEADER OFFSETS (ODS-2)
	.ENDC

;+
;
; *** - $DLHDD	DELETE FILE HEADER ON DISK
;
; THIS ROUTINE OVERWRITES THE CORRESPONDING FILE HEADER ON DISK WITH A
; DELETED FILE HEADER IMAGE IF THE HEADER IS NOT IN USE. ITS PURPOSE IS
; TO PREVENT UNINITIALIZED HEADER BLOCKS ON THE OUTPUT DISK, WHICH COULD
; CONTAIN VALID FILE HEADERS FROM A PREVIOUS USE OF THE DISK. THIS ROUTINE
; IS CALLED FOR ALL HEADERS FROM THE INPUT DISK WHICH EITHER READ WITH
; ERROR OR WERE CONTINUATION HEADERS IN MERGE MODE.
;
; INPUTS:
;
;	OUTLUN ASSIGNED TO DISK
;	OUTPUT DEVICE TABLE ENTRY
;	BAD HEADER RECORD IN $BUF1
;
; OUTPUTS:
;
;	NONE (ALL REGISTERS BASHED)
;
;-

$DLHDD::
	LET R4 := $OUDEV		; GET DEVICE TABLE ENTRY
	LET R0 := $B1DAT+H.FNUM
	LET $FNU := R0			; SAVE FILE NUMBER FOR MESSAGES
	LET R0 := R0 - #1		; GET FILE NUMBER LESS 1
	$CALL $DIV <R0,#4096.>		; COMPUTE BLOCK NUMBER
	PUSH R1				; SAVE BIT NUMBER
	IF R0 HIS V.IBSZ(R4)		; IF OUT OF BOUNDS
	  TST (SP)+			; CLEAN STACK
	  ERRP ER.OFN			; PRINT MESSAGE
	  RETURN			; AND QUIT ON THIS FILE
	END
	LET R3 := V.IBLB(R4) + R0	; COMPUTE LBN
	LET R2 := #0 + CARRY
	$CALL $RDWLN <#OUTLUN,,R2,R3,#$B2HD> ; READ MAP BLOCK
	LET B.STAT(R4) := #0		; RELEASE THE BUFFER
	POP R0				; GET BIT NUMBER OF FILE
	$CALL $DIV <R0,#8.>		; COMPUTE BYTE & BIT
	LET R0 := R0 + R5		; BUFFER ADDRESS
	IFB $BIT(R1) SET.IN (R0)	; SEE IF HEADER IS IN USE
	  RETURN			; NO ACTION IF SO
	END
;
; THE FILE HEADER IS NOT IN USE. WRITE A DELETED HEADER ON IT.
;
	$CALL $DLHDR <,,,,#$B1HD,#$B1DAT>
	LET B.STAT(R4) := #0		; RELEASE THE BUFFER
	RETURN



	.END
