	.TITLE	$MULQ - QUAD MULTIPLY ROUTINE

	.IDENT	/V03000/
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
; ANDREW C. GOLDSTEIN  17-NOV-76  10:45


;+
;
; *** - $MULQ	QUAD MULTIPLY ROUTINE
;
; THIS ROUTINE DOES A 64 BIT MULTIPLY OPERATION (ALL OPERANDS ARE
; 64 BITS IN LENGTH). NUMBERS ARE STORED WITH INCREASING
; SIGNIFICANCE IN INCREASING ADDRESSED BYTES.
;
; INPUTS:
;
;	R0 = ADDRESS OF MULTIPLIER
;	R1 = ADDRESS OF MULTIPLICAND
;	R2 = ADDRESS OF PRODUCT
;
; OUTPUTS:
;
;	PRODUCT STORED IN SPECIFIED ADDRESS
;
;-

$MULQ::
	CALL	$SAVAL
	MOV	#64.,-(SP)	; SET UP ITERATION COUNT
	MOV	R2,R4		; POINT TO PRODUCT
	CLR	(R4)+		; ZERO THE PRODUCT
	CLR	(R4)+
	CLR	(R4)+
	CLR	(R4)+
	ADD	#8.,R0		; POINT TO HIGH ORDER OF MULTIPLIER

10$:	CLR	R5		; INITIALIZE MASK
	TST	-(R0)		; MOVE TO NEXT LOWER WORD OF MULTIPLIER
	SEC
20$:	ROR	R5		; SHIFT TO NEXT LOWER BIT
	BCS	10$		; MOVE TO NEXT WORD IF NECESSARY

	MOV	R2,R4		; POINT TO PRODUCT
	ROL	(R4)+		; SHIFT IT LEFT ONE PLACE
	ROL	(R4)+
	ROL	(R4)+
	ROL	(R4)+
	BIT	R5,(R0)		; SEE IF BIT OF MULTIPLIER IS ON
	BEQ	30$		; BRANCH IF NOT - NO ADD
	MOV	R1,R3		; POINT TO MULTIPLICAND
	MOV	R2,R4		; POINT TO PRODUCT
	ADD	(R3)+,(R4)+	; ADD MULTIPLICAND INTO PRODUCT
	ADC	(R4)+
	ADC	(R4)+
	ADC	(R4)
	CMP	-(R4),-(R4)
	ADD	(R3)+,(R4)+
	ADC	(R4)
	ADC	2(R4)
	ADD	(R3)+,(R4)+
	ADC	(R4)
	ADD	(R3)+,(R4)+
30$:	CLC			; CLEAR CARRY FOR ABOVE ROTATE
	DEC	(SP)		; BUMP STEP COUNT
	BNE	20$		; AND LOOP

	TST	(SP)+		; CLEAN THE STACK
	RETURN



	.END
