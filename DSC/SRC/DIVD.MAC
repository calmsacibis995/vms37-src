	.TITLE	DIVD - FULL DOUBLE PRECISION DIVIDE
	.IDENT	/V03000/
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;
; ANDREW C. GOLDSTEIN  4 MAR 76  11:41
;
; BASED ON THE ALGORITHM IN RT-11'S LIBRARY ROUTINE JDIV
;
;+
;
; ***  - $DIVD	DOUBLE PRECISION DIVIDE
;
; THIS ROUTINE PERFORMS AN UNSIGNED DIVIDE WITH 32 BIT DIVISOR,
; DIVIDEND, QUOTIENT, AND REMAINDER. DIVIDE BY ZERO IS NOT CHECKED.
;
; INPUTS:
;
;	R0 = HIGH ORDER DIVISOR
;	R1 = LOW ORDER DIVISOR
;	R2 = HIGH ORDER DIVIDEND
;	R3 = LOW ORDER DIVIDEND
;
; OUTPUTS:
;
;	R0 = HIGH ORDER REMAINDER
;	R1 = LOW ORDER REMAINDER
;	R2 = HIGH ORDER QUOTIENT
;	R3 = LOW ORDER QUOTIENT
;
;	R4,R5 PRESERVED
;
;-


$DIVD::
	MOV	R4,-(SP)	; SAVE R4 & R5
	MOV	R5,-(SP)
	MOV	#33.,-(SP)	; SET UP ITERATION COUNT
	CLR	R4		; QUOTIENT ENDS UP IN R2:R3
	CLR	R5		; REMAINDER ENDS UP IN R4:R5
10$:	ROL	R5		; EXPOSE NEW BIT OF NUMERATOR
	ROL	R4
	CMP	R0,R4		; DOES DENOM FIT?
	BHI	30$		; BRANCH IF NOT, C=0
	BNE	20$		; BRANCH IF YES
	CMP	R1,R5		; HIGH PARTS SAME, CHECK LOW
	BHI	30$		; BRANCH IF NOT, C=0
20$:	SUB	R1,R5		; SUBTRACT DENOM FROM REMAINDER
	SBC	R4
	SUB	R0,R4
	SEC			; INDICATE NEW QUOTIENT BIT
30$:	ROL	R3		; SHIFT IN NEW BIT OF QUOTIENT
	ROL	R2
	DECB	(SP)		; CHECK LOOP COUNT
	BGT	10$		; BRANCH TO LOOP
	TST	(SP)+		; CLEAN THE STACK
	MOV	R4,R0		; MOVE REMAINDER TO R0 & R1
	MOV	R5,R1
	MOV	(SP)+,R5	; RESTORE R4 & R5
	MOV	(SP)+,R4
	RETURN



	.END

