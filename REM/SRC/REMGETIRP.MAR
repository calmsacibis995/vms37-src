	.TITLE	REMGETIRP - PROCESS IRP'S
	.IDENT	'V03-001'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************

;++
; FACILITY: REMOTE I/O ACP
;
; ABSTRACT:
;	THIS MODULE PERFORMS STATE TRANSITIONS FOR
;	LOGICAL LINKS AND FOR NSP.
;
; ENVIRONMENT:
;	MODE = KERNEL
;--
	.PAGE
	.SBTTL	HISTORY
; AUTHOR:	SCOTT G. DAVIS, CREATION DATE: 06-JUL-1979
;
; MODIFIED BY:
;
;	V03-001	DJD3001	Darrell Duffy	16-March-1982
;		Remove extra code in post path for CANCEL.
;
;	V02-004	DJD2001 Darrell Duffy	5-Mar-1981
;		RTTDRIVER calls NETDRIVER directly for IO
;
;	V02-003	SGD2001	Scott G. Davis	23-Sep-1980
;		Remove multiple devices, ignore unknown messages
.PAGE
	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;
 
	$AQBDEF
	$IPLDEF
	$IRPDEF
	$PRDEF
	$RDPDEF
	$RBFDEF
	$UCBDEF
	$VCBDEF
;
; MACROS:
;

;
; EQUATED SYMBOLS:
;

;
; OWN STORAGE:
;

	.PSECT	REM_PURE,NOWRT,NOEXE

RANGE:	.LONG	0			; RANGE FOR WORKING-SET PURGE
	.LONG	<1@31>-1		; DO IT ALL

WORK_VECTOR:				; Vector of items for work queue processing
	.ADDRESS	REM$MBX_READ	; Put up a mailbox read
	.ADDRESS	REM$RECV_MSG	; Put up a link read

	.PSECT	REM_IMPURE	NOSHR,NOEXE,RD,WRT

UNIT:	.BLKW	1			; For saving remote's unit no.
	.PAGE
	.PSECT	REM_CODE,NOWRT

	.SBTTL	PROCESS QIO
;++
; FUNCTIONAL DESCRIPTION:
;
; REM$MAIN - purge working set and process IRP's from the AQB.
;		This routine determines what the I/O request type is
;		and processes CANCEL functions by itself.
;		For a regular IRP, the data in the associated buffered
;		io packet is sent to the remote for processing.
;		For a CANCEL function (ACPCONTROL sans complex buffer),
;		a message for each IRP using the affected channel
;		is sent to the remote, who does the actual cancel.
;
;--

REM$MAIN::
	$PURGWS_S	W^RANGE		; Purge the working set
;
; TRY TO DEQUEUE A REQUEST
;
10$:
	MOVL	W^REM$GL_Q_HEAD,R2	; Get address of queue head
	REMQUE	@(R2),R3		; Try to get a packet
	BVC	20$			; If VC there is one
;
; Nothing in queue - see whether it is time to go away
;
	TSTB	AQB$B_MNTCNT(R2)	; Any "volumes" mounted?
	BNEQ	15$			; If NEQ yes
	BSBW	REM$CHK_ACPDONE		; See if the ACP is all done
15$:
;
; Go to sleep, my baaaby
;
	$HIBER_S			; Hibernate
	BRB	10$			; Loop
;
; There was a request
;
20$:
	MOVAB	IRP$B_TYPE(R3),R0	; Point at block type
	TSTB	(R0)+			; Is it a work queue element?
	BNEQ	22$			; If NEQ no
	MOVZBL	(R0)+,R10		; Get the work index
	MOVL	(R0),R11		; Get the device index, maybe
	MOVL	W^WORK_VECTOR-4[R10],R10 ; Get address of processing routine
	MOVL	R3,R0			; Get the address for deallocation
	JSB	G^EXE$DEANONPAGED	; Deallocate the IRP
	JSB	(R10)			; Process the element
	BRB	10$			; Try to dequeue something else
22$:
	CMPB	IRP$B_TYPE(R3),S^#DYN$C_IRP ; Is it an IRP?
	BEQL	35$			; If EQL yes
	CMPB	UCB$B_TYPE(R3),S^#DYN$C_UCB ; Is it a UCB?
	BNEQ	30$			; If NEQ no - fatal error
;
; There is a UCB in my queue
;
	MOVZBL	UCB$B_ERTCNT(R3),R11	; Get the index
	BEQL	10$			; If EQL none - ignore
;
; The channels to this device may be gone - get rid of it, maybe
;
	$SETAST_S	#0		; Disable AST's
	BSBW	REM$KILL_UCB		; Delete the UCB and break the link
	$SETAST_S	#1		; Enable AST's
	BRB	10$			; Try for a packet
;*****
; can't assign channel
;*****

30$:
	BUG_CHECK	NOTIRPAQB,FATAL	; Bad ACP queue entry
35$:
	MOVW	IRP$W_FUNC(R3),R7	; Get the I/O function code
	MOVL	IRP$L_UCB(R3),R5	; Get the UCB address
	CMPZV	S^#IO$V_FCODE,S^#IO$S_FCODE,R7,S^#IO$_ACPCONTROL ; Control?
	BNEQ	30$			; If NEQ no - Bad unsupported error
	BBS	#IRP$V_COMPLX,IRP$W_STS(R3),30$ ; If BS then real ACPCONTROL
	MOVQ	#SS$_NORMAL, -		; This is a cancel, so just post it
		IRP$L_IOST1(R3)		; with success and so
	BSBW	REM$POST		; ignore it.
	BRW	10$			; For another entry


;++
;
; REM$ALLOC_IRP - allocate an IRP-size block for use as a message buffer
;
; OUTPUTS:
;
;	R2 - buffer address, with size and type filled in
;
;--

REM$ALLOC_IRP::
	MOVL	G^SCH$GL_CURPCB,R4	; Set up my PCB address
	JSB	G^EXE$ALLOCIRP		; Allocate a block (IRP's are easy to get)
	SETIPL	#0			; Bring down the IPL
	RSB				; Done

	.END
