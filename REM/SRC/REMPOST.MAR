	.TITLE	REMPOST - USER VIRTUAL I/O COMPLETION
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************

;++
; FACILITY:	VIRTUAL I/O ACP
;
; ABSTRACT:
;
; ENVIRONMENT:
;	MODE = KERNEL
;--
	.PAGE
	.SBTTL	HISTORY
; AUTHOR:	SCOTT G. DAVIS, CREATION DATE: 09-JUL-79
;
; MODIFIED BY:
;
;	V02-005 DJD2002	Darrell Duffy	3-December-1981
;		Remove check for queue empty before causing
;		iopost interrupt.  This fixes problem since we may be
;		swapped out.
;
;	V02-004	DJD2001	Darrell Duffy	11-Mar-1981
;	RTTDRIVER calls NETDRIVER directly for io
;
	.PAGE
	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;
	$IPLDEF
	$IRPDEF
	$PRDEF
	$UCBDEF
	$VCBDEF

;
; MACROS:
;

;
; EQUATED SYMBOLS:
;

;
; OWN STORAGE:
;
	.PAGE
	.PSECT	REM_CODE,NOWRT

	.SBTTL	TERMINATE I/O
;++
; FUNCTIONAL DESCRIPTION:
;
; REM$POST - POST I/O, FIX UP UCB AND VCB COUNTS, CHECK FOR ACP DONE
;
; CALLING SEQUENCE:
;
;	BSB	REM$POST
;
; INPUT PARAMETERS:
;
;	R3 - IRP ADDRESS
;	R5 - UCB ADDRESS
;
; IMPLICIT INPUTS:
;
; MESSAGE BUFFER FROM REMOTE
;
; COMPLETION CODES:
;
;	WHATEVER CAME OUT OF MESSAGE BUFFER
;
; SIDE EFFECTS:
;
;	I/O POSTED FOR USER; UCB, VCB UPDATED
;
;--

REM$POST::
	INCL	UCB$L_OPCNT(R5)		; ANOTHER OPERATION
;
;	The only transactions that come here now are the cancels.
;	Noone increments the count, so we do not decrement it here.
;
;	MOVL	UCB$L_VCB(R5),R0	; GET THE VCB ADDRESS
;	DECW	VCB$W_TRANS(R0)		; ONE MORE TRANSACTION COMPLETE

;
; POST THE I/O TO THE USER
;
	INSQUE	(R3),@L^IOC$GL_PSBL	; QUEUE PACKET FOR I/O POST
;
;	Always cause this interrupt incase the queue is blocked because
;	someone else has been suspended before causing the softint.
;
;	BNEQ	10$			; IF NEQ QUEUE WASN'T EMPTY
	SOFTINT	#IPL$_IOPOST		; POST THE I/O
10$:
;*****
;	MOVAB	L^REM$UCB0,R1		; GET REM0'S UCB ADDRESS
;	BBC	S^#DEV$V_DMT,UCB$L_DEVCHAR(R1),20$ ; IF BC, NOT MARKED FOR DISMOUNT
;	BSBW	REM$DISMOUNT		; SEE IF DISMOUNT OK
;20$:
	RSB

	.END
