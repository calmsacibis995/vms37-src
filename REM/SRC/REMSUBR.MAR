	.TITLE	REMSUBR - SUBROUTINES FOR REMOTE I/O
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************

;++
; FACILITY:	REMOTE I/O ACP
;
; ABSTRACT:
;	This module contains miscellaneous routines
;
; ENVIRONMENT:
;	MODE = KERNEL
;--


	.SBTTL	HISTORY
; AUTHOR:	SCOTT G. DAVIS, CREATION DATE: 17-JUL-79
;
; MODIFIED BY:
;
;	V02-004 DJD2002 Darrell Duffy	28-July-1981
;		Fix to use DDT entries as absolute addresses.
;
;	V02-003	DJD2001 Darrell Duffy	5-Mar-1981
;		RTTDRIVER calls NETDRIVER directly for IO.
;		Pass real buffered IO packets to RTTDRIVER.
;
;	V02-002	SGD2001	Scott G. Davis	23-Sep-1980
;		Remove multiple devices, ignore unknown messages

	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;

	$CCBDEF
	$CRBDEF
	$DDBDEF
	$DDTDEF
	$DYNDEF
	$IRPDEF
	$RBFDEF
	$REMDEF
	$UCBDEF

	$RTTUCBEXT			; RTT extensions to UCB
;
; MACROS:
;

;
; EQUATED SYMBOLS:
;

;
; OWN STORAGE:
;

	.SBTTL	REM$CLEAN_UP  - Clean up io in progress

	.PSECT	REM_CODE,NOWRT
;++
;
; REM$CLEAN_UP - Clean up the I/O in progress
;
; INPUTS:
;
;	R11 -	device index
;
;--

REM$CLEAN_UP::
	MOVL	@W^REM$GL_UCBVEC[R11],R5 ; Get the associated UCB address
	BNEQ	5$			; If NEQ proceed
	RSB				; UCB is gone
5$:	MOVL	#RBF$C_TT_HANGUP, R2	; The code for a hangup.
;	**** Fall through ****

	.SBTTL	REM$ATTNMSG  - Send an attention message
;++
; REM$ATTNMSG  - Send an attention message to the driver
;
;	An attention message is formatted for the driver given a code
;	as input to this routine.
;
; inputs:
;	r2 = modifier for attention message
;	r5 = rtt ucb
; outputs:
;	r0 - r4, r6 clobbered
;--
REM$ATTNMSG::
	MOVL	R2, R6			; Save the modifier out of harms way
	BSBW	REM$ALLOC_IRP		; Get a block
	MOVL	R2,R3			; Get address where it belongs
	MOVB	#DYN$C_BUFIO,-		; Set the block type
		RBF$B_TYPE(R2)
	MOVAB	RBF$W_OPCODE(R2),-	; Set the data address
		RBF$L_MSGDAT(R2)
	CLRL	RBF$L_USRBFR(R2)	; Set the user buffer address
	
	MNEGW	#-RBF$C_ATTN,-		; This is an attention packet
		RBF$W_OPCODE(R2)	;
	MOVW	R6, RBF$W_MOD(R2)	; Modifier into message
	MOVL	UCB$L_DDB(R5),R2	; Get the DDB address
	MOVL	DDB$L_DDT(R2),R2	; Get the DDT address
	MOVL	DDT$L_UNSOLINT(R2),R2	; Get the UNSOL address
	JSB	(R2)			; Pass the message and return
	RSB


	.SBTTL	REM$ENQUEUE  - Put element in work queue
;++
;
; REM$ENQUEUE - Put an element into the work queue
;
; INPUTS:
;
;
;	R10 - Low byte has work type
;	R11 - Device index - saved, but not always relevant
; OUTPUTS:
;
;	R0-R3 destroyed
;
;--

REM$ENQUEUE::
	BSBW	REM$ALLOC_IRP		; Get storage for a queue element
	MOVAB	IRP$B_TYPE(R2),R3	; Point to area to put info
	CLRB	(R3)+			; Mark as a work element
	MOVB	R10,(R3)+		; Store the work type
	MOVL	R11,(R3)		; Store the device index (maybe)
	MOVL	W^REM$GL_Q_HEAD,R3	; Get the ACP queue head
	INSQUE	(R2),@4(R3)		; Put element in the queue
	BNEQ	10$			; If NEQ this is not the first element
	$WAKE_S				; Cause processing to occur
10$:
	RSB				; Done

	.END
