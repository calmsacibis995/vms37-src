	.TITLE	REMINI
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************

;++
; FACILITY:	REMOTE I/O ACP
;
; ABSTRACT:
;	THIS MODULE PERFORMS INITIALIZATION FOR THE ACP.
;
; ENVIRONMENT:
;	MODE = KERNEL
;--


; AUTHOR:	SCOTT G. DAVIS, CREATION DATE: 06-JUL-79
;
; MODIFIED BY:
;
;	V02-004 DJD3002 Darrell Duffy	21-October-1981
;		Use RJOBLIM sysgen parameter for max number of
;		remote connections to allow.
;
;	V02-003	DJD2001 Darrell Duffy	5-Mar-1981
;		RTTDRIVER calls NETDRIVER directly for IO.
;		Allow maximum links to be determined at init time.
;
;	V02-002	SGD2001	Scott G. Davis	23-Sep-1980
;		Remove multiple devices, ignore unknown messages


;
; INCLUDE FILES:
;
	$AQBDEF
	$PCBDEF
	$REMDEF
	$UCBDEF
	$VCBDEF

;
; MACROS:
;

;
; EQUATED SYMBOLS:
;

;
; OWN STORAGE:
;
	.PSECT	REM_PURE,NOWRT,NOEXE
   
LKWSET_ADDR:				; DESCRIPTOR FOR LOCKING IODONE IN WSET
	.LONG	START_LOCK		; START ADDRESS
	.LONG	END_LOCK		; END ADDRESS

DEV_DESC:	.ASCID	/RT/		; For device name descriptor



	.PSECT	REM_INITIALIZE,NOWRT
;++
;
; REM$INITIALIZE - INITIALIZE THE VIRTUAL I/O ACP
; FUNCTIONAL DESCRIPTION:
;
;	This module does the following initialization:
;
;	1. Allocates an AQB so REMACP can get IRP's from drivers
;	2. "Mounts" all virtual devices - creates VCB's, wires the
;	   AQB to the VCB, and wires the VCB's to the template UCB
;	3. Makes up tables describing the remote devices and the related
;	   object types (for DECnet).
;	Note that there is expected to be a template UCB for each
;	virtual/remote device type which will be cloned whenever one is needed.
;
;--

REM$INITIALIZE:: .WORD	0		; ACP entry point
	$LKWSET_S	W^LKWSET_ADDR	; Lock IODONE into working set
	$CMKRNL_S	B^STARTUP	; GO TO KERNEL MODE FOREVER
	HALT				; SHOULD NEVER GET HERE!!!!!!!!!


STARTUP:	.WORD	0		; ENTRY POINT
	MOVAL	W^FATAL,(FP)		; SET UP FOR EXCEPTIONS

	MOVZWL	G^SYS$GW_RJOBLIM, -	; Obtain sysgen parameter for max
		w^REM$GB_MAXLINKS	; number of links to support
	MOVL	W^REM$GB_MAXLINKS,R0	; Check range for 2 to 255
	CMPL	R0,#2			; 
	BLSS	10$			; Not enough
	CMPL	R0,#254			; Too large?
	BLEQ	20$			; Ok
10$:	MOVB	#REM$C_MAXLINKS,-	; Use constant
		W^REM$GB_MAXLINKS	; thats wired in
20$:	INCB	W^REM$GB_MAXLINKS	; Make it the number of terminal links

;
; BUILD THE ACP QUEUE BLOCK(AQB)
;
	MOVZBL	#AQB$C_LENGTH,R1	; Length of AQB
	JSB	G^EXE$ALONONPAGED	; Get a chunk of storage
	BLBS	R0,30$			; If LBS successful allocation
	$EXIT_S	#SS$_INSFMEM		; Exit with status
30$:

;
; FILL IN THE AQB
;
	MOVW	#AQB$C_LENGTH,AQB$W_SIZE(R2) ; Record size of AQB
	MOVB	S^#DYN$C_AQB,AQB$B_TYPE(R2) ; Note type of block
	MOVL	R2,AQB$L_ACPQFL(R2)	; Set queue forward link
	MOVL	R2,AQB$L_ACPQBL(R2)	; Set queue back link
	CLRB	AQB$B_MNTCNT(R2)	; Initialize mount count
;
; LINK THE AQB INTO THE AQB LIST
;

	BSBW	REM$LINK_AQB		; Link in the AQB
	MOVB	#AQB$K_REM,AQB$B_ACPTYPE(R8) ; Mark the ACP type
	MOVL	R8,W^REM$GL_Q_HEAD 	; Save the AQB header address
;
; Determine driver information
;
	MOVAQ	W^DEV_DESC,R1		; Set up device name descriptor
	BSBW	REM$FIND_UCB		; Find the associated UCB
	BLBC	R0,40$ ;GO_AWAY		; If LBC device not found
	MOVL	R1,W^REM$GL_TEMPLATE	; Save the UCB template address
	MOVL	R1,R5			; Set up to allocate VCB
	BSBW	REM$ALLOC_VCB		; Allocate a VCB for this device
	BLBC	R0,40$ ;GO_AWAY		; If LBC error

;
; Obtain the space for all the vectors and build the pointers
; to them.
;
	MOVZBL	REM$GB_MAXLINKS, R4	; The maximum links
	EMUL	R4, W^REM$GL_VECSIZE,-	; Obtain the total size of vectors
		#511, R5		; rounded up by a page
	DIVL2	#512, R5		; Make number of pages
	INCL	R5			; Just to make sure
	$EXPREG_S -			; Obtain the space
		PAGCNT = R5,-		; Number of pages
		RETADR = W^REM$GL_UCBVEC ; Return address here
40$:	BLBC	R0, GO_AWAY		; Not available or something
	MOVL	W^REM$GL_UCBVEC, R3	; Obtain address of space
	MOVAL	W^REM$GT_VECTBL, R2	; Control vector
50$:	MOVL	R3, @(R2)		; Store the address in the pointer
	SUBL2	4(R2), @(R2)+		; Back up by the width of entry
	MULL3	(R2)+, R4, R1		; Make size of this vector
	ADDL2	R1, R3			; Point beyond this vector
	TSTL	(R2)			; End of table
	BNEQ	50$			; Nope
	SUBL3	#2, R3,-		; Channel was last.  Point this to
		W^REM$GL_REJ_CHAN	; Reject channel address



;
; Allocate space for receive buffers
;

;	R4 = maxlinks

	MOVZWL	G^IOC$GW_MAXBUF,R2	; Max I/O size
	EMUL	R2,R4,#511,R5		; Space needed in bytes
	DIVL2	#512,R5			; This is the PAGCNT
	INCL	R5			; Round up, just in case
	MOVL	W^REM$GL_RBUFVEC,R3	; This is where to put the count
	TSTL	(R3)+			; Advance to the first real spot
	$EXPREG_S	PAGCNT=	R5-	; No. of pages
			RETADR=	(R3)	; Where to return (2 longwords needed)
	BLBC	R0,GO_AWAY		; If LBC error - evaporate
	BRB	70$			; Go into loop to set up address vector
60$:
	ADDL3	(R3)+,R2,(R3)		; Compute next address
70$:
	SOBGTR	R4,60$			; Loop
;
; Initialize the transport mechanism, e.g., DECnet
;
	BSBW	REM$XPORT_START		; Do whatever is necessary
	BLBC	R0,GO_AWAY		; If LBC couldn't get going
;
; NOW TRY TO PERFORM SOME OPERATION
;
	BRW	REM$MAIN		; TRY TO DEQUEUE A REQUEST - WILL HIBERNATE
GO_AWAY:
	BRW	REM$GO_AWAY		; Clean up everything and say goodbye

;++
;
; REM$ALLOC_VCB - This routine allocates a VCB and hooks everything together
;
; INPUTS:
;
;	R5 - UCB address
;
; OUTPUTS:
;
;	R0 - LBC => error; LBS => OK
;
; SIDE EFFECTS
;
;	VCB is hooked to UCB
;	AQB is hooked to VCB
;	AQB mount count is set to 1
;
;--

REM$ALLOC_VCB::
;
; Now allocate a VCB and mark the device mounted
;
	MOVZBL	#VCB$C_LENGTH,R1	; Get length of block
	JSB	G^EXE$ALONONPAGED	; Allocate the storage
	BLBC	R0,10$			; If LBC couldn't allocate
	MOVB	S^#DYN$C_VCB,VCB$B_TYPE(R2) ; Set structure type
	MOVZBW	#VCB$C_LENGTH,VCB$W_SIZE(R2) ; Set size of VCB
	MOVW	#1,VCB$W_TRANS(R2)	; Set the traditional ACP idle count
	CLRW	VCB$W_MCOUNT(R2)	; No terminals mounted yet.
	MOVL	W^REM$GL_Q_HEAD,R0	; Get AQB address
	INCB	AQB$B_MNTCNT(R0)	; Bump the mount count
	MOVAB	(R0)+,VCB$L_AQB(R2)	; Link AQB to VCB and set success
	MOVL	R2,UCB$L_VCB(R5)	; Link VCB to UCB
10$:
	RSB				; Done


;
; COME HERE IF THERE ANY EXCEPTIONS
;
FATAL:	.WORD	0
	BUG_CHECK	FATALEXCPT,FATAL


	.END	REM$INITIALIZE
