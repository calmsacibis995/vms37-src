	.TITLE	REMQIO - PERFORM QIO FUNCTIONS
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************

;++
; FACILITY:	REMOTE I/O ACP
;
; ABSTRACT:
;	THIS MODULE PROCESSES QIO REQUESTS.
;
; ENVIRONMENT:
;	MODE = KERNEL
;--
	.PAGE
	.SBTTL	HISTORY
; AUTHOR:	SCOTT G. DAVIS, CREATION DATE: 13-JUL-79
;
; MODIFIED BY:
;
;	V02-002	DJD2001	Darrell Duffy	5-Mar-1981
;		RTTDRIVER calls NETDRIVER directly for IO.
;
	.PAGE
	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;

	$CRBDEF
	$DDBDEF
	$DDTDEF
	$IPLDEF
	$IRPDEF
	$RDPDEF
	$RBFDEF
	$REMDEF
	$UCBDEF
;
; MACROS:
;

;
; EQUATED SYMBOLS:
;

;
; OWN STORAGE:
;
	.PAGE
	.PSECT	REM_CODE,NOWRT

	.SBTTL	PROCESS ASTS

;++
;
; RCV_AST - process link message received AST
;
; INPUTS:
;
;	4(AP) - Device index
;
;--

RCV_AST:	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>
	MOVL	4(AP),R11		; Get the device index
	MOVL	@W^REM$GL_RBUFVEC[R11],R7 ; Get the buffer address
	MOVQ	@W^REM$GL_RIOSBVEC[R11],R0 ; Get the IOSB
	BLBS	R0,5$			; If LBS I/O was OK
;
; I/O failed
;
3$:
	BSBW	REM$CLEAN_UP		; Clean up the channel
	RET				; Done
5$:
	MOVL	@W^REM$GL_UCBVEC[R11],R5 ; Get the UCB address
	BNEQ	6$			; If NEQ proceed
	RET				; UCB is gone
6$:
	BBS	#UCB$V_ONLINE,UCB$W_STS(R5),3$ ; If BC initing protocol
	BSBW	REM$PROTOCOL		; Call the protocol-dependent routine
	RET				; Dismiss the AST
.PAGE
	.SBTTL	I/O Processing
;++
;
; REM$RECV_MSG - This routine allocates a buffer and issues a receive
;
; INPUTS:
;
;	R11 - device index
;
; OUTPUTS:
;
;	R0 - LBC => failure; LBS => success
;
;--

REM$RECV_MSG::
	MOVL	@W^REM$GL_RBUFVEC[R11],R6 ; Get the receive buffer address
	MOVAQ	@W^REM$GL_RIOSBVEC[R11],R5 ; Get the IOSB address
	MOVAB	W^RCV_AST,R8		; Set AST address
	MOVW	S^#IO$_READVBLK,R9	; Function code
	MOVZWL	G^IOC$GW_MAXBUF,R10	; This is the size of the read bfr
	BRB	COMMON_QIO		; Do the QIO and return to caller



;++
;
; REM$SEND_MSG - send message over logical link - no AST
; REM$SEND_MSGAST - send message over logical link - AST
;
; INPUTS:
;
;	R6 - buffer address
;	R8 - AST address (REM$SEND_MSGAST)
;	R10 - buffer length
;	R11 - device index
;
; OUTPUTS:
;
;	R0 - LBC => failure; LBS => success
;
;--

REM$SEND_MSG::
	CLRL	R8			; No AST

REM$SEND_MSGAST::
	CLRL	R5			; No IOSB
	MOVW	S^#IO$_WRITEVBLK,R9	; Function code
COMMON_QIO:
	MOVW	@W^REM$GL_CHANVEC[R11],R7 ; Get the I/O channel
					; Fall through to do QIO...
					; and return to caller



;++
;
; REM$DO_QIO - Issue QIO
;
; INPUTS:
;
;	R5 - IOSB address or 0
;	R6 -	P1
;	R7 -	channel number
;	R8 -	AST address
;	R9 -	function code
;	R10 -	P2
;	R11 -	device index
;
; OUTPUTS:
;
;	R0 - LBC => failure; LBS => success
;
;--

REM$DO_QIO::
	$QIO_S	CHAN=	R7,-		; Issue accept or reject
		FUNC=	R9,-
		IOSB=	(R5),-
		ASTADR=	(R8),-
		ASTPRM=	R11,-		; Device index
		P1=	(R6),-
		P2=	R10
QIO_DONE:
	RSB				; Done

	.END
