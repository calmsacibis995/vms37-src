;
;	MACRO DEFINITIONS FOR SYSTEM DUMP ANALYZER
;	Version 'V03-000'
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
; Author:	Tim Halvorsen
;
; Modified by:
;
;	V002	MTR0001		Mike Rhodes	24-Jun-1981
;		Change MOVZWL to MOVL in .Macro STATUS.
;
;	V001	TMH0001		Tim Halvorsen	07-Feb-1981
;		Change word displacements to longword displacements
;---


;
;	RETIFERR - RETURN IF ERROR CONDITION
;

	.MACRO	RETIFERR ?L1
	BLBS	R0,L1
	RET
L1:
	.ENDM	RETIFERR



;
;	STATUS - SET RETURN STATUS MESSAGE
;

	.MACRO	STATUS	MSG
	MOVL	#MSG$_'MSG',R0
	.ENDM	STATUS



;
;	SIGNAL - SIGNAL AN ERROR CONDITION
;

	.MACRO	SIGNAL	CNT,MSG,?L1
	.IF	DIF,<CNT>,<RMS>
	.IIF	B,MSG,BLBS	R0,L1
	.IIF	NB,CNT,PUSHL	#CNT
	.IIF	NB,MSG,STATUS	MSG
	PUSHL	R0
	.IIF	NB,CNT,CALLS	#<CNT+2>,G^LIB$SIGNAL
	.IIF	B,CNT,CALLS	#1,G^LIB$SIGNAL
	.IFF
	BLBS	R0,L1
	MOVAB	MSG,R1
	PUSHL	FAB$L_STV(R1)
	PUSHL	R0
	CALLS	#2,G^LIB$SIGNAL
	.ENDC
L1:
	.ENDM	SIGNAL



;
;	ENSURE - ENSURE ENOUGH LINES REMAIN ON THE PAGE
;

	.MACRO	ENSURE	LINECNT,?L1
	SUBL3	LINE_COUNT,PAGE_SIZE,-(SP)
	CMPL	(SP)+,#LINECNT
	BGEQ	L1
	SKIP	PAGE
L1:
	.ENDM	ENSURE



;
;	ERROR - OUTPUT ERROR MESSAGE TO THE TERMINAL
;
;	CNT	= NUMBER OF FAO ARGUMENTS TO PASS TO FAO
;	TEXT	= FAO CONTROL STRING
;

	.MACRO	ERROR,CNT,TEXT,STR
	TYPE	CNT,<TEXT>,STR
	.ENDM	ERROR



;
;	GETMEM - READ MEMORY, SIGNAL/RETURN IF NOT AVAILABLE
;
;	START	= STARTING VIRTUAL ADDRESS TO READ
;	DEST	= BUFFER TO RETURN MEMORY INTO
;	LENGTH	= LENGTH TO READ
;

	.MACRO	GETMEM START,DEST,LENGTH=#4
	.IF	DIF,LENGTH,#4
	ARGS=3
	PUSHL	LENGTH
	PUSHAL	DEST
	.IFF
	ARGS=1
	.ENDC
	PUSHAB	START
	CALLS	#ARGS,GETMEM
	.IF	IDN,LENGTH,#4
	.IF	NB,DEST
	MOVL	R1,DEST
	.ENDC
	.ENDC
	.ENDM	GETMEM



;
;	REQMEM - FETCH REQUIRED MEMORY, SIGNAL/EXIT IF NOT AVAILABLE
;
;	START	= STARTING VIRTUAL ADDRESS TO READ
;	DEST	= BUFFER TO RETURN MEMORY INTO
;	LENGTH	= LENGTH TO READ
;

	.MACRO	REQMEM START,DEST,LENGTH=#4
	.IF	DIF,LENGTH,#4
	ARGS=3
	PUSHL	LENGTH
	PUSHAL	DEST
	.IFF
	ARGS=1
	.ENDC
	PUSHAB	START
	CALLS	#ARGS,REQMEM
	.IF	IDN,LENGTH,#4
	.IF	NB,DEST
	MOVL	R1,DEST
	.ENDC
	.ENDC
	.ENDM	REQMEM



;
;	TRYMEM - FETCH OPTIONAL MEMORY 
;
;	START	= STARTING VIRTUAL ADDRESS TO READ
;	DEST	= BUFFER TO RETURN MEMORY INTO
;	LENGTH	= LENGTH TO READ
;

	.MACRO	TRYMEM START,DEST,LENGTH=#4
	.IF	DIF,LENGTH,#4
	ARGS=3
	PUSHL	LENGTH
	PUSHAL	DEST
	.IFF
	ARGS=1
	.ENDC
	PUSHAB	START
	CALLS	#ARGS,TRYMEM
	.IF	IDN,LENGTH,#4
	.IF	NB,DEST
	MOVL	R1,DEST
	.ENDC
	.ENDC
	.ENDM	TRYMEM



;
;	PUTMEM - STORE INTO DUMP MEMORY, SIGNAL/EXIT IF ERROR
;
;	START	= STARTING DUMP VIRTUAL ADDRESS TO WRITE
;	LOCAL	= LOCAL BUFFER TO TRANSFER FROM
;	LENGTH	= LENGTH TO WRITE
;

	.MACRO	PUTMEM START,LOCAL,LENGTH
	PUSHL	LENGTH
	PUSHAL	LOCAL
	PUSHAB	START
	CALLS	#3,PUTMEM
	.ENDM	PUTMEM



;
;	PRINT - PRINT A LINE TO THE OUTPUT FILE
;
;	CNT	= NUMBER OF FAO ARGUMENTS TO PASS TO FAO
;	TEXT	= FAO CONTROL STRING 
;

	.MACRO	PRINT,CNT,TEXT,?L1,?L2
	.SAVE
	.PSECT	LITERALS,EXE,NOWRT
L1:	.LONG	L2-L1-8
	.LONG	L1+8
	.ASCII	\TEXT\
L2:
	.RESTORE
	PUSHAQ	L1
	CALLS	#<1+CNT>,PRINT
	.ENDM	PRINT



;
;	SKIP - SKIP A SPECIFIED NUMBER OF LINES
;
;	CNT	= NUMBER OF BLANK LINES TO OUTPUT
;

	.MACRO	SKIP,CNT
	.IF	IDN,<CNT>,<PAGE>
	CALLS	#0,NEW_PAGE
	.IFF
	.IF	IDN,<CNT>,<page>
	CALLS	#0,NEW_PAGE
	.IFF
	PUSHL	#'CNT
	CALLS	#1,SKIP_LINES
	.ENDC
	.ENDC
	.ENDM	SKIP



;
;	STRING - GENERATE A STRING DESCRIPTOR
;
;	STR	= STRING TEXT
;

	.MACRO	STRING,STR,?L1,?L2
	.LONG	L2-L1
	.LONG	L1
L1:	.ASCII	\STR\
L2:
	.ENDM	STRING



;
;	SUBHD - SPECIFY NEW SUB-HEADING FOR LISTING OUTPUT
;
;	TEXT	= TEXT OF NEW SUB-HEADING
;

	.MACRO	SUBHD	TEXT,?L1
	.SAVE
	.PSECT	LITERALS,EXE,NOWRT
L1:	STRING	<TEXT>
	.RESTORE
	PUSHAQ	L1
	CALLS	#1,SET_HEADING
	.ENDM	SUBHD



;
;	TYPE - TYPE A SPECIFIED STRING TO THE TERMINAL
;
;	CNT	= NUMBER OF FAO ARGUMENTS TO PASS TO FAO
;	TEXT	= FAO CONTROL STRING
;

	.MACRO	TYPE,CNT,TEXT,STR,?L1
	PUSHAQ	CMND_DESCR
	PUSHAL	OUTPUT+RAB$W_RSZ
	.IF	NB,STR
	PUSHAQ	STR
	.IFF
	.SAVE
	.PSECT	LITERALS,EXE,NOWRT
L1:	STRING	<TEXT>
	.RESTORE
	PUSHAQ	L1
	.ENDC
	CALLS	#<CNT+3>,G^SYS$FAO
	MOVAB	CMND_BUFFER,OUTPUT+RAB$L_RBF
	$PUT	OUTPUT
	SIGNAL	RMS,OUTPUT
	.ENDM	TYPE


;
;	ALLOC - ALLOCATE BUFFER ON STACK
;
;	THIS MACRO ALLOCATES SPACE ON THE STACK FOR
;	A BUFFER PRECEEDED BY A DESCRIPTOR DESCRIBING
;	THAT BUFFER.  THE ADDRESS OF THE DESCRIPTOR
;	WILL BE RETURNED IN THE SECOND ARGUMENT.
;

	.MACRO	ALLOC	LENGTH,RSLDESC
	SUBL	#<LENGTH+3>&<^C3>,SP
	PUSHL	SP
	PUSHL	#LENGTH
	.IF	NB,RSLDESC
	MOVL	SP,RSLDESC
	.ENDC
	.ENDM


;
;	TABLE - GENERATE DEFINITION TABLE
;
;	THIS MACRO GENERATES A BIT OR VALUE DEFINITION TABLE
;	FOR USE IN TRANSLATING GIVEN VALUES/BITMASKS INTO THE
;	NAMES CORRESPONDING TO THE VALUES/BITS.
;

	.MACRO	TABLE,PREFIX,VALUES
	.IRP	VALUE,VALUES
	.SAVE
	.PSECT	LITERALS,EXE,NOWRT
$$$	=	.
	.ASCIC	\VALUE\
	.RESTORE
	.LONG	'PREFIX''VALUE'
	.LONG	$$$
	.ENDR
	.LONG	-1,-1
	.ENDM	TABLE
