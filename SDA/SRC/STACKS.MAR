	.TITLE	STACKS	DUMP STACK MEMORY ROUTINES
	.SBTTL	COPYRIGHT NOTICE
	.IDENT	'V03-000'
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
	.PAGE
	.SBTTL	PROGRAM DESCRIPTION
;++
;   FACILITY
;
;	SYSTEM DUMP ANALYZER
;
;   ABSTRACT
;
;	DUMP STACK MEMORY ROUTINES
;
;   ENVIRONMENT
;
;	NATIVE MODE, USER MODE
;
;   AUTHOR
;
;	TIM HALVORSEN, JULY 1978
;
;   MODIFIED BY
;
;	V005	TMH0005		Tim Halvorsen	19-Oct-1981
;		Fix KTA0023 to correctly read stack limit/base arrays
;		(it wasn't doing an indirection through the required
;		symbol pointers to get the array address in P1 space).
;
;	V03-004	KTA0023		Kerbey Altmann	05-Jul-1981
;		Change method of calculating stack sizes so as
;		to conform to new array of limits.
;
;	V003	MTR0001		Mike Rhodes	22-Jun-1981
;		Change all CMPW's referencing an MSG$_ symbol to CMPL's.
;		Remove references to $SDAMSGDEF macro.
;
;	V002	TMH0002		Tim Halvorsen	20-May-1981
;		Add routine to print any range of memory as a stack.
;
;	V001	TMH0001		Tim Halvorsen	07-Feb-1981
;		Change word displacements to longword displacements.
;--

	.SBTTL	DECLARATIONS
;
;	SYMBOL DEFINTIONS
;
	$VADEF			; VIRTUAL ADDRESS DEFINITIONS
	$EMBDEF <CR>		; CRASHDUMP ERROR LOG ENTRY
	$PCBDEF			; PROCESS CONTROL BLOCK
	$PHDDEF			; PROCESS HEADER BLOCK
	$PSLDEF			; PROCESS STATUS LONGWORD
	$OPTDEF			; DEFINE OPTION BITS

	.SBTTL	READ-ONLY DATA DEFINITIONS

;
;	READ-ONLY DATA DEFINITIONS
;

	.PSECT	STACKS,EXE,NOWRT

	.DEFAULT DISPLACEMENT,LONG

INTERRUPT:
	.ASCIC	'INTERRUPT'
MODES:
	.ASCIC	'KERNEL'
	.ASCIC	'EXECUTIVE'
	.ASCIC	'SUPERVISOR'
	.ASCIC	'USER'
SWAPPER:
	.ASCIC	'SWAPPER KERNEL'
UNKNOWN:
	.ASCIC	'UNKNOWN'

	.SBTTL	PRINT_ANY_STACK, PRINT ANY RANGE AS STACK
;---
;
;	PRINT ANY RANGE OF MEMORY AS A STACK, ONE LONGWORD PER LINE,
;	WITH SYMBOLIZATION OF THE LONGWORDS.
;
; INPUTS:
;
;	OPTIONS = OPTIONS FLAGS (RANGE OR LENGTH BITS RELEVANT)
;	ESP	= BASE OF STACK (HIGHEST ADDRESS)
;		(OR, IF LENGTH BIT SET)
;	ESP	= SIZE OF STACK
;	ESP+4	= LOWER LIMIT OF STACK
;
; OUTPUTS:
;
;	NONE
;---
	.ENABL	LSB

	.ENTRY	PRINT_ANY_STACK,^M<R2,R3,R4>

	MOVL	OPTIONS, R2
	MOVL	ESP, R1			; POINT TO EXPRESSION STACK
	BBS	#OPT$V_RANGE, R2, 10$	; RANGE SPECIFIED
	BBS	#OPT$V_LENGTH, R2, 20$	; LENGTH SPECIFIED
	CLRL	R0			; SYNTAX ERROR
	RET

10$:	MOVL	4(R1),R2		; R2 = LOWEST ADDRESS (LIMIT)
	MOVL	(R1),R3			; R3 = HIGHEST ADDRESS (BASE)
	BRB	30$

20$:	MOVL	4(R1),R2		; R2 = LOWEST ADDRESS (LIMIT)
	ADDL3	(R1),4(R1),R3		; R3 = HIGHEST ADDRESS (BASE)

30$:	CMPL	R2,R3			; CHECK IF DONE YET
	BGEQU	90$			; BRANCH IF NOT
	TRYMEM	(R2)			; GET NEXT LONGWORD
	BLBC	R0,80$			; BRANCH IF NOT FOUND
	MOVL	R1,R4			; SAVE IN R3
	ALLOC	40,-(SP)		; RESULT BUFFER
	PUSHL	R4
	CALLS	#2,SYMBOLIZE		; ATTEMPT TO SYMBOLIZE
	PUSHL	R1			; SYMBOL STRING
	PUSHL	R4			; CONTENTS OF LONGWORD
	PUSHL	R2			; ADDRESS OF LONGWORD
	PRINT	3,<!_!_!XL  !XL!_!AS>
	ADDL	#40+8,SP		; DEALLOCATE BUFFER
	ADDL2	#4,R2			; NEXT LONGWORD
	BRB	30$			; LOOP UNTIL DONE

80$:	PRINT	0,<!_!_(Stack not in physical memory)>

90$:	MOVL	#1, R0			; SUCCEED
	RET				;

	.DSABL	LSB

	.SBTTL	PRINT_STACKS -- PRINT THE AVAILABLE STACKS
;---
;
;	PRINT_STACKS
;
;	THIS ROUTINE DETERMINES WHICH STACK IS CURRENTLY BEING
;	RUN AND PRINTS THAT STACK.  IN ADDITION, IT ALSO PRINTS
;	ALL THE REMAINING PROCESS STACKS TO FOLLOW CALL CHAINS.
;
;   INPUTS:
;
;	ERLPTR	= ADDRESS OF ERROR LOG ENTRY
;
;   OUTPUTS:
;
;	NONE
;
;---

	.ENABL	LSB

PRINT_STACKS::
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10>

;
;	SETUP ARRAY CONTAINING EACH STACK POINTER, BASE AND LENGTH
;	OF STACK, AND ADDRESS OF TEXT DESCRIBING STACK.
;
	BSBW	GET_POINTERS		; SETUP STACK ARRAY
;	R8 = ADDRESS OF 5-ENTRY 4-LONGWORD ARRAY
;	R9 = ADDRESS OF ARRAY ENTRY FOR STACK CURRENTLY IN USE
;
;	PRINT THE CURRENT OPERATING STACK IF NO OPTIONS SELECTED
;
	MOVL	OPTIONS,R6		; BIT MASK OF STACKS TO DUMP
	BNEQ	50$			; IF WANTS GIVEN STACK TYPE
	SUBHD	<Current operating stack>
	TSTL	R9			; IS STACK POINTER KNOWN?
	BEQL	20$			; BRANCH IF NOT
	SUBL3	R8,R9,R0		; GET OFFSET INTO ARRAY
	ASHL	#-4,R0,R0		; CALCULATE INDEX INTO ARRAY
	ASHL	R0,#1,R6		; SET TO PRINT CURRENT STACK
	BRB	55$
20$:
	MOVL	#1,R6			; SET TO PRINT 1 STACK
	MOVL	R8,R9			; USE INTERRUPT STACK SLOT
	MOVL	R10,(R9)		; SET STACK POINTER
	MOVAB	-512(R10),4(R9)		; SET BASE 1 PAGE AWAY
	MOVZWL	#512,8(R9)		; SET LENGTH TO 1 PAGE
	MOVAB	UNKNOWN,12(R9)		; SET TEXT STRING ADDRESS
	BRB	55$
;
;	PRINT THE SPECIFIED STACKS
;
50$:
	SUBHD	<Process stacks>	; SET PAGE HEADING
55$:
	SKIP	PAGE
	MOVL	#^B1,R7			; START AT INTERRUPT STACK
60$:
	BITL	R7,R6			; CHECK IF REQUESTED
	BEQL	70$			; BRANCH IF NOT
	BICL2	R7,R6			; INDICATE PRINTED
	TSTL	8(R8)			; CHECK LENGTH OF STACK
	BEQL	70$			; SKIP IF COULD NOT LOCATE
	PUSHL	(R8)			; PUSH STACK POINTER
	PUSHL	8(R8)			; LENGTH OF STACK SPACE
	PUSHL	4(R8)			; BASE STACK ADDRESS
	PUSHL	12(R8)			; ADDRESS OF TEXT STRING
	SKIP	PAGE
	CMPL	R8,R9			; IS THIS CURRENT STACK?
	BNEQ	65$			; BRANCH IF NOT
	PRINT	1,<Current operating stack (!AC):>
	BRB	68$
65$:	PRINT	1,<!AC stack:>
68$:	SKIP	1
	CALLS	#3,DUMP_STACK		; DUMP THE STACK
70$:	ASHL	#1,R7,R7		; SHIFT BIT TO NEXT STACK
	ADDL	#16,R8			; SKIP TO NEXT ENTRY
	CMPL	R7,#^B10000		; CHECK IF DONE
	BLEQ	60$			; CONTINUE UNTIL DONE
	STATUS	SUCCESS
	RET

	.DSABL	LSB

	.SBTTL	GET_POINTERS, OBTAIN STACK POINTERS
;---
;
;	THIS SUBROUTINE IS USED TO OBTAIN THE STACK POINTERS
;	FOR THE CURRENTLY SELECTED PROCESS.  IT RETURNS AN ARRAY
;	OF ENTRIES FOR EACH OF THE POSSIBLE STACKS (ISP THRU USP).
;	EACH ENTRY CONTAINS THE STACK POINTER, STACK BASE, LENGTH
;	AND ASCIC STRING DESCRIBING ENTRY FOR DISPLAY PURPOSES.
;
; CALLING SEQUENCE:
;
;	ERLPTR = ADDRESS OF ERROR LOG ENTRY
;	PROC_INDEX = INDEX OF CURRENTLY SELECTED PROCESS
;	JSB
;	R8 = ADDRESS OF ARRAY (5 4-LONGWORD ENTRIES)
;		ISP	BASE	SIZE		TEXT
;		KSP	BASE	SIZE		TEXT
;		ESP	BASE	SIZE		TEXT
;		SSP	BASE	SIZE		TEXT
;		USP	BASE	(INFINITE)	TEXT
;	R9 = ADDRESS OF ARRAY ENTRY FOR STACK CURRENTLY IN USE
;		IF CURRENTLY USING UNKNOWN STACK, R9 = 0
;	R10 = CURRENT STACK POINTER
;
;---

GET_POINTERS:
;
;	ALLOCATE ARRAY ON CALLER'S STACK
;
	POPL	R0			; SAVE RETURN ADDRESS
	SUBL	#5*4*4,SP		; 5 4-LONGWORD ENTRIES
	MOVL	SP,R8			; ADDRESS OF ARRAY
	PUSHL	R0			; SET RETURN ADDRESS
	PUSHR	#^M<R2,R3,R4,R5>	; SAVE REGISTERS
	MOVC5	#0,(SP),#0,#5*4*4,(R8)	; PRE-ZERO ARRAY
	PUSHL	R8			; SAVE ADDRESS OF ARRAY
;
;	FILL ENTRY FOR INTERRUPT STACK
;
	MOVL	ERLPTR,R5		; ADDRESS OF ERROR LOG ENTRY
	MOVL	EMB$L_CR_ISP(R5),(R8)+	; SETUP ISP ENTRY
	REQMEM	@EXE$GL_RPB		; RESTART PARAMETER BLOCK
	SUBL3	R1,-4(R8),R0		; IS ISP IN RPB PAGE?
	BLSS	5$			; BRANCH IF NOT
	CMPL	R0,#512			; RPB IS ONLY 1 PAGE
	BGTR	5$			; BRANCH IF NOT IN RPB
	ADDL3	R1,#512,(R8)+		; BASE ADDRESS OF RPB STACK
	MOVL	#1,R1			; SIZE OF STACK IN PAGES
	BRB	8$			; SET STACK SIZE
5$:	REQMEM	@EXE$GL_INTSTK,(R8)+	; BASE OF INTERRUPT STACK
	REQMEM	@SGN$GW_ISPPGCT		; INTERRUPT STACK PAGE COUNT
	MOVZWL	R1,R1			; ZERO FILL TO LONGWORD
8$:	ASHL	#9,R1,(R8)+		; SET INTERRUPT STACK SIZE
	MOVAB	INTERRUPT,(R8)+		; ADDRESS OF TEXT STRING
;
;	GET CURRENT SP AND ADDRESS OF PROCESS STACK POINTERS
;
	MOVZWL	PROC_INDEX,R2		; GET CURRENTLY SELECTED INDEX
	CMPW	R2,EMB$C_CR_LENGTH+PCB$L_PID(R5) ; CRASH PROCESS?
	BNEQ	10$			; BRANCH IF SOME OTHER PROCESS
	MOVAB	EMB$L_CR_KSP(R5),R2	; R2 = ADDRESS OF KSP-USP
	MOVL	EMB$L_CR_SP(R5),R3	; R3 = STACK POINTER
	BRB	20$
10$:	REQMEM	@SCH$GL_PCBVEC		; VECTOR OF PCB ADDRESSES
	MOVAL	(R1)[R2],R1		; ADDRESS OF POINTER TO PCB
	REQMEM	(R1)			; GET ADDRESS OF PCB
	REQMEM	PCB$L_PHD(R1)		; GET ADDRESS OF PHD
	REQMEM	(R1),PHD,#PHD$C_LENGTH	; READ ENTIRE PROCESS HEADER
	MOVAB	PHD+PHD$L_KSP,R2	; R2 = ADDRESS OF KSP-USP
	MOVL	PHD+PHD$L_PSL,R0	; GET PROCESS STATUS LONGWORD
	MOVL	EMB$L_CR_ISP(R5),R3	; ASSUME ON INTERRUPT STACK
	BBS	#PSL$V_IS,R0,20$	; BRANCH IF OK
	EXTZV	#PSL$V_CURMOD,#PSL$S_CURMOD,R0,R0 ; GET CURRENT MODE
	MOVL	(R2)[R0],R3		; GET PROCESS STACK POINTER
;
;	FILL PROCESS STACK ENTRIES
;
20$:	SUBL	#8*4,SP			; ALLOCATE 8 LONGWORD ARRAY
	MOVAL	4*4(SP),R4		; R4 = LIMIT ADDRESS BUFFER
	TRYMEM	@CTL$AL_STACKLIM,(R4),#4*4 ; READ 4 LIMIT ADDRESSES
	BLBC	R0,45$			; BRANCH IF CANNOT READ
	MOVL	SP,R4			; R4 = BASE ADDRESS BUFFER
	TRYMEM	@CTL$AL_STACK,(R4),#4*4	; READ 4 BASE ADDRESSES
	BLBC	R0,45$			; BRANCH IF CANNOT READ
	MOVAB	MODES,R5		; ADDRESS OF TEXT STRINGS
	MOVL	#4,R0			; ITERATION COUNT
30$:
	MOVL	(R2)+,(R8)+		; SET STACK POINTER
	MOVL	(R4),(R8)+		; SET BASE OF STACK
	SUBL3	4*4(R4),(R4)+,(R8)+	; SET LENGTH OF STACK SPACE
	BGTR	40$			; BRANCH IF OK
	MOVZWL	#^XFFFF,-4(R8)		; USER STACK HAS INFINITE LENGTH
40$:	MOVL	R5,(R8)+		; ADDRESS OF TEXT STRING
	MOVZBL	(R5)+,R1		; LENGTH OF STRING
	ADDL	R1,R5			; SKIP TO NEXT STRING
	SOBGTR	R0,30$			; CONTINUE UNTIL DONE
45$:
	ADDL	#8*4,SP			; DEALLOCATE BUFFER SPACE
;
;	DECIDE WHICH STACK IS CURRENTLY IN USE AND SET R9
;
	MOVL	(SP),R8			; RESET R8 TO START OF ARRAY
	MOVL	#5,R0			; ITERATION COUNT
50$:
	CMPL	R3,4(R8)		; CHECK IF BELOW BASE ADDRESS
	BGEQU	60$			; BRANCH IF NOT
	SUBL3	8(R8),4(R8),R1		; CALCULATE LOWEST ADDRESS
	CMPL	R3,R1			; CHECK IF ABOVE LOW ADDRESS
	BLSSU	60$			; BRANCH IF NOT
	MOVL	R8,R9			; SET ADDRESS OF CURRENT ENTRY
	BRB	90$			; AND EXIT
60$:	ADDL	#16,R8			; SKIP TO NEXT ENTRY
	SOBGTR	R0,50$			; CONTINUE UNTIL ALL CHECKED
;
;	IF NOT ANY OF THE STACKS IN THE ARRAY, THEN MAKE SPECIAL
;	CHECK FOR SWAPPER STACK.  IF NOT SWAPPER, SET R9 = 0.
;
	CLRL	R9			; ASSUME UNKNOWN ADDRESS
	SUBL3	R3,SWP$A_KSTK,R0	; CHECK IF BELOW BASE ADDRESS
	BLSS	90$			; BRANCH IF NOT
	CMPL	R0,SWP$K_KSTKSZ		; CHECK IF WITHIN SWAPPER STACK
	BGTRU	90$			; BRANCH IF NOT IN RANGE
	ADDL3	#16,(SP),R9		; SET TO KERNEL STACK
	MOVL	R9,R8
	MOVL	R3,(R8)+		; SET STACK POINTER
	MOVL	SWP$A_KSTK,(R8)+	; SET SWAPPER BASE ADDRESS
	MOVL	SWP$K_KSTKSZ,(R8)+	; SET SWAPPER STACK SIZE
	MOVAB	SWAPPER,(R8)+		; SET SWAPPER TEXT STRING
90$:	POPL	R8			; RESTORE ADDRESS OF ARRAY
	MOVL	R3,R10			; RETURN CURRENT STACK POINTER
	POPR	#^M<R2,R3,R4,R5>	; RESTORE REGISTERS
	RSB

	.SBTTL	DUMP_STACK -- DUMP CONTENTS OF STACK
;---
;
;	DUMP_STACK
;
;	THIS ROUTINE PRINTS THE CONTENTS OF THE SPECIFIED
;	STACK, 1 LONGWORD PER LINE.  AN ATTEMPT IS MADE
;	TO PRINT THE SYMBOLIC VALUE OF EACH LONGWORD NEXT
;	TO ITS HEXIDECIMAL VALUE.  SOME OF THE MEMORY PRECEEDING
;	THE STACK POINTER IS DUMPED AS IT IS SOMETIMES
;	USEFUL IN DEBUGGING.
;
;   INPUTS:
;
;	 4(AP)	= INITIAL ADDRESS OF STACK
;	 8(AP)	= LENGTH OF STACK SPACE 
;	12(AP)	= STACK POINTER
;
;   OUTPUTS:
;
;	NONE
;
;---

STACKLIM =	3*512			; MAX. BYTES TO DUMP

	.ENABL	LSB

DUMP_STACK::
	.WORD	^M<R2,R3>

	SUBL3	#32,12(AP),R2		; 32 BYTES PRECEEDING SP
	SUBL3	12(AP),4(AP),R1		; STACK SPACE IN USE
	BLSSU	1$			; IF SP OUT OF BOUNDS
	CMPL	R1,8(AP)		; CHECK IF BEYOND STACK
	BGTRU	1$			; IF SP OUT OF BOUNDS
	CMPL	R1,#STACKLIM		; MAX. DUMP SIZE
	BLEQ	5$			; BRANCH IF OK
1$:	ADDL3	#STACKLIM,12(AP),4(AP)	; SET NEW ENDING ADDRESS
	BRB	10$			; NEVER RESET STARTING ADDR.
5$:
	SUBL3	8(AP),4(AP),R1		; COMPUTE BASE ADDRESS
	CMPL	R2,R1			; UNLESS IT RUNS OVER
	BGEQU	10$			; IF NOT, GO AHEAD
	MOVL	R1,R2			; IF SO, START AT THE BASE
10$:
	CMPL	R2,4(AP)		; CHECK IF DONE YET
	BLSSU	15$			; BRANCH IF NOT
	BRW	90$			; EXIT - DONE
15$:
	TRYMEM	(R2)			; GET NEXT LONGWORD
	BLBC	R0,80$			; BRANCH IF NOT FOUND
	MOVL	R1,R3			; SAVE IN R3
	ALLOC	40,-(SP)		; RESULT BUFFER
	PUSHL	R3
	CALLS	#2,SYMBOLIZE		; ATTEMPT TO SYMBOLIZE
	PUSHL	R1			; SYMBOL STRING
	PUSHL	R3			; CONTENTS OF LONGWORD
	PUSHL	R2			; ADDRESS OF LONGWORD
	CMPL	R2,12(AP)		; IS THIS TOP OF STACK?
	BNEQ	20$			; BRANCH IF NOT
	SKIP	1
	PRINT	3,^/!_ SP =>  !XL  !XL!_!AS/
	BRB	50$
20$:
	PRINT	3,<!_!_!XL  !XL!_!AS>
50$:
	ADDL	#40+8,SP		; DEALLOCATE BUFFER
	ADDL2	#4,R2			; NEXT LONGWORD
	BRW	10$			; LOOP UNTIL DONE
80$:
	PRINT	0,<!_!_(Stack not in physical memory)>
	RET
90$:
	CMPL	R2,12(AP)		; ARE WE AT TOP OF STACK?
	BNEQ	95$			; BRANCH IF NOT
	SKIP	1
	PRINT	0,^/!_ SP =>  (STACK IS EMPTY)/
95$:
	RET

	.DSABL	LSB


	.END
