	.title	device	Display device data structures
	.sbttl	copyright notice
	.ident	'V03-000'
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
	.page
	.sbttl	Program description
;++
;   Facility
;
;	System Dump Analyzer
;
;   Abstract
;
;	This module contains routines to print device data
;	structures for the i/o subsystem.
;
;   Environment
;
;	Native mode, User mode
;
;   Author
;
;	Tim Halvorsen, July 1978
;
;   Modified by
;
;	V004	MTR0002		Mike Rhodes		28-Aug-1981
;		Add new bit definitions to SDA's known bit definitions
;		in the "unit_status: table" and the "request_status: table".
;		These bits correspond to the new bits in the UCB and IRP for:
;
;		UCB$V_MNTVERIP - Mount Verification in Progress.
;		UCB$V_WRONGVOL - Wrong Volume mounted on device.
;		IRP$V_MVIRP    - IRP is a Mount Verification IRP.
;		
;	V003	MTR0001		Mike Rhodes		22-Jun-1981
;		A.  Change all CMPW's referencing an MSG$_ symbol to CMPL's.
;		B.  Change default addressing mode to longword.
;		C.  Remove references to $SDAMSGDEF macro.
;		D.  Remove definition of symbol DDT$C_LENGTH.
;
;	V002	TMH0002		Tim Halvorsen		12-Dec-1980
;		Fix end-of-list check when attempting to locate a DPT
;		for the DDB list.
;
;	V001	TMH0001		Tim Halvorsen		04-Nov-1980
;		Do not display controller data structures if explicit
;		device unit was requested.
;		Fix AQB display to print AQB$B_ACPTYPE, not AQB$B_TYPE.
;--

	.page
	.sbttl	declarations
;
;	symbol defintions
;
	$ddbdef			; device data block (DDB)
	$ucbdef			; unit control block (UCB)
	$irpdef			; I/O request package (IRP)
	$tpadef			; TPARSE definitions
	$crbdef			; channel request block (CRB)
	$idbdef			; interrupt dispatch block (IDB)
	$vecdef			; interrupt transfer vector (in IDB)
	$vcbdef			; Volume control block (VCB)
	$aqbdef			; ACP queue header block (AQB)
	$dyndef			; Dynamic storage type definitions
	$pcbdef			; Process control block (PCB)
	$ddtdef			; Driver dispatch table (DDT)
	$dptdef			; Driver prologue table (DPT)

	.page
	.sbttl	storage definitions
;
;	storage definitions
;

	.psect	sdadata,noexe,wrt

ddb:	.blkb	ddb$c_length	; device data block (DDB)
ucb:	.blkb	ucb$c_length	; unit control block (UCB)
irp:	.blkb	irp$c_length	; I/O request package (IRP)
vcb:	.blkb	vcb$c_length	; Volume control block (VCB)
aqb:	.blkb	aqb$c_length	; ACP queue header block (AQB)
dpt:	.blkb	dpt$c_length	; Driver prologue table (DPT)


	.psect	device,exe,nowrt,long

	.default displacement,long

	.page
	.sbttl	read-only data definitions

;
;	read-only data definitions
;

unit_status:
	table	ucb$v_,<tim,int,erlogip,cancel,online,power,timout,-
		inttype,bsy,mounting,deadmo,valid,unload,mntverip,-
		wrongvol>

volume_status:
	table	vcb$v_,<write_if,write_sm,homblkbad,idxhdrbad,noalloc,-
		extfid,group,system>

request_status:
	table	irp$v_,<bufio,func,pagio,complx,virtual,chained,swapio,-
		diagbuf,physio,termio,mbxio,extend,filacp,mvirp>

acp_status:
	table	aqb$v_,<unique,defclass,defsys,creating>

	.page
	.sbttl	display_device -- display i/o data structures
;---
;
;	display_device
;
;	This routine displays all i/o data structures related
;	to a specified generic device name.
;
;   Inputs:
;
;	AP = pointer to TPARSE block
;
;   Outputs:
;
;	The i/o data structures for that device are shown.
;
;---
	.enabl	lsb

display_device::
	.word	^m<r2,r3,r4,r5,r6,r7,r8>

	bsbw	parse_device		; parse the device into name and unit
	clrl	r8			; preset "ucb displayed" false

	subhd	<I/O data structures>
	tstl	tpa$l_number(ap)	; check if unit specified
	bgeq	20$			; if explicit unit, skip ddb info
	callg	(ap),show_ddbs	; show DDB summary

20$:	reqmem	@ioc$gl_devlist		; address of first DDB
	movab	ddb,r6		; address DDB in local storage
	movl	r1,ddb$l_link(r6)	; set link to first DDB
;
;	Loop thru each DDB to find the requested device(s)
;
30$:
	movl	ddb$l_link(r6),r1	; skip to next DDB
	beql	60$			; branch if end of list
	getmem	(r1),(r6),#ddb$c_length	; read entire DDB
	blbc	r0,60$			; skip if cannot read
	tstl	tpa$l_tokencnt(ap)	; was generic device specified?
	beql	40$			; branch if not
	movzbl	ddb$t_name(r6),r0	; length of ddb name
	cmpb	r0,tpa$l_tokencnt(ap)	; Is device name big enough?
	blssu	30$			; branch if not
	cmpc3	tpa$l_tokencnt(ap),@tpa$l_tokenptr(ap),ddb$t_name+1(r6)
	beql	40$			; branch if match found
	brb	30$			; loop until end of list

60$:	brw	100$			; exit
;
;	Display each UCB associated with the DDB.
;
40$:	movab	ucb,r7		; address UCB in local storage
	movl	ddb$l_ucb(r6),r2	; Address of first UCB
	beql	30$			; Branch if none
	getmem	(r2),(r7),#ucb$c_length	; Read first UCB
	blbc	r0,30$			; Skip if cannot read
	tstl	tpa$l_number(ap)	; check if unit specified
	bgeq	52$			; if explicit unit, skip ddb info
	movq	r6,-(sp)		; address of DDB,UCB blocks
	calls	#2,show_controller	; Display controller info
	brb	52$			; ...enter loop
50$:
	movl	ucb$l_link(r7),r2	; address of next UCB in chain
	beql	30$			; branch if no more
	getmem	(r2),(r7),#ucb$c_length
	blbc	r0,30$			; skip rest if chain broken
52$:
	tstl	tpa$l_number(ap)	; check if unit specified
	blss	55$			; branch if not
	cmpw	ucb$w_unit(r7),tpa$l_number(ap)	; check if request unit
	bneq	50$			; skip if not
55$:
	pushl	r2			; actual address of UCB
	movq	r6,-(sp)		; address of DDB,UCB blocks
	calls	#3,show_ucb		; display current UCB
	movl	#1,r8			; mark at least 1 UCB was displayed
	brb	50$			; loop thru all UCB's

100$:	blbs	r8,110$			; branch if at least 1 ucb displayed
	movzwl	#ss$_nosuchdev,r0	; signal "no such device"
	signal	0
110$:	status	success			; exit to tparse w/success
	ret

	.dsabl	lsb

	.page
	.sbttl	parse_device -- parse device name into name and unit number
;---
;
;	parse the device name into name and unit number
;
; Inputs:
;
;	tpa$l_tokencnt(ap) = Descriptor of device name
;
; Outputs:
;
;	tpa$l_tokencnt(ap) = Descriptor of device name portion
;	tpa$l_number(ap) = Unit number portion (-1 if none)
;
;	r2-r6 are destroyed.
;---

parse_device:
	movq	tpa$l_tokencnt(ap),r5	; get descriptor of string
	clrl	r1			; clear unit number
	movl	#1,r3			; init the multiplier
	movab	(r6)[r5],r2		; address of end of string
10$:	cmpl	r2,r6			; at beginning of string?
	blssu	20$			; if so, end of loop
	subb3	#^a'0',-(r2),r0		; get last character
	blss	20$			; if le '0', then not numeric
	cmpb	r0,#9			; check upper bounds
	bgtru	20$			; branch if not numeric
	mull	r3,r0			; multiply by current multiplier
	addl	r0,r1			; add to current accumulator
	mull	#10,r3			; increase multiplier
	brb	10$
20$:	incl	r2			; adjust for char detected non-numeric
	subl3	r6,r2,r0		; get remaining size of name portion
	cmpl	r0,tpa$l_tokencnt(ap)	; did we remove any unit number?
	bneq	30$			; if so, store it as is
	mnegl	#1,r1			; if no unit, store as -1
30$:	movl	r1,tpa$l_number(ap)	; store unit number portion
	movl	r0,tpa$l_tokencnt(ap)	; store updated name length
	rsb

	.page
	.sbttl	show_ddbs -- display device data blocks (DDBs)
;---
;
;	show_ddbs
;
;	This routine displays all active DDB's associated
;	with a specified generic device name.
;
;   Inputs:
;
;	AP = pointer to TPARSE block
;
;---
	.enabl	lsb
90$:	ret

show_ddbs:
	.word	^m<r2,r3,r4,r5,r6,r7,r8,r9>

	skip	page
	print	0,<!_!_!_!_DDB list>
	print	0,<!_!_!_!_-------->
	skip	1
	print	0,<!_ Address  Controller   ACP       Driver      DPT   DPT size>
	print	0,<!_ -------  ----------   ---       ------      ---   -------->
	skip	1
	movab	ddb,r6
	reqmem	@ioc$gl_devlist,ddb$l_link(r6)	; set address of first DDB
10$:
	movl	ddb$l_link(r6),r9	; skip to next DDB
	beql	90$			; branch if end of list
	getmem	(r9),(r6),#ddb$c_length	; read entire DDB
	blbc	r0,90$			; exit if DDB chain broken
	tstl	tpa$l_tokencnt(ap)	; was generic device specified?
	beql	15$			; branch if not
	movzbl	ddb$t_name(r6),r0	; length of ddb name
	cmpb	r0,tpa$l_tokencnt(ap)	; Is device name big enough?
	blssu	10$			; branch if not
	cmpc3	tpa$l_tokencnt(ap),@tpa$l_tokenptr(ap),ddb$t_name+1(r6)
	bneq	10$			; branch if not
15$:
	bsbb	find_dpt		; locate dpt; r7 = local dpt; r8 = address
	blbc	r0,17$			; branch if not found
	movzwl	dpt$w_size(r7),-(sp)	; length of DPT
	pushl	r8			; address of DPT
17$:	pushal	ddb$t_drvname(r6)	; address of driver name
	clrq	-(sp)			; allocate 2 longwords for ACP name
	pushal	(sp)
	pushl	#6			; length of ACP name
	movl	ddb$l_acpd(r6),8(sp)	; construct entire name
	bneq	18$
	clrl	(sp)			; turn into null string
18$:
	movl	#^a'ACP',11(sp)		; append 'ACP' to end of name
	pushal	ddb$t_name(r6)		; generic device name for controller
	pushl	r9			; actual address of DDB
	blbc	r0,20$			; use different if dpt not found
	print	7,<!_!XL      !3AC     !6AD!+!+    !10AC !XL  !XW>
	brw	10$
20$:	print	5,<!_!XL      !3AC     !6AD!+!+    !10AC>
	brw	10$

	.dsabl	lsb

;
;	Subroutine to locate the DPT corresponding to the current
;	DDB.
;
find_dpt:
	pushr	#^m<r2,r3,r4,r5>
	movab	dpt,r7
	trymem	@ioc$gl_dptlist,dpt$l_flink(r7)	; set address of first DPT
	blbc	r0,90$			; branch if error
10$:	movl	dpt$l_flink(r7),r8	; skip to next DPT
	cmpl	r8,ioc$gl_dptlist	; check if back to listhead
	beql	80$			; branch if end of list
	trymem	(r8),(r7),#dpt$c_length	; read the entire dpt
	blbc	r0,90$			; branch if error
	movzbl	dpt$t_name(r7),r0	; get length of dpt driver name
	cmpc	r0,dpt$t_name+1(r7),ddb$t_drvname+1(r6)
	bneq	10$			; branch if no match yet
50$:	movl	#1,r0			; success
	brb	90$
80$:	clrl	r0			; not found
90$:	popr	#^m<r2,r3,r4,r5>
	rsb

	.page
	.sbttl	show_controller, Display controller information
;---
;
;	show_controller
;
;	Display all information related to the controller
;	device associated with each generic device name.
;
;   Inputs:
;
;	4(ap) = Address of DDB in local storage
;	8(ap) = Address of UCB in local storage
;
;---

show_controller:
	.word	^m<r2,r3,r4,r5>

	movq	4(ap),r2		; get address of DDB,UCB
	movab	buffer,r4
	skip	page
	pushal	ddb$t_name(r2)		; generic controller name
	print	1,<Controller: !AC>
	print	0,<--------------->
	skip	1
	print	0,<Device Data Block (DDB):>
	pushl	ddb$l_ddt(r2)		; DDT address
	print	1,<!_DDT address               !XL>
	pushl	ddb$l_ucb(r2)		; First UCB address
	print	1,<!_First UCB address         !XL>
	pushl	ucb$l_crb(r3)		; CRB address
	print	1,<!_CRB address               !XL>
	skip	1
	print	0,<Channel Request Block (CRB):>
	getmem	@ucb$l_crb(r3),(r4),#crb$c_length  ; read entire CRB
	retiferr
	pushl	crb$w_refc(r4)		; UCB reference count
	print	1,<!_UCB reference count       !8UW>
	pushl	crb$b_mask(r4)		; Channel allocation mask
	print	1,<!_Channel allocation mask   !8XB>
	pushl	crb$l_link(r4)		; Address of secondary CRB
	print	1,<!_Secondary CRB address     !XL>
	pushl	crb$l_intd+vec$l_idb(r4)	; IDB address
	print	1,<!_IDB address               !XL>
	pushl	crb$l_intd+vec$l_initial(r4)
	print	1,<!_Controller init. routine  !XL>
	pushl	crb$l_intd+vec$l_unitinit(r4)
	print	1,<!_Unit init. routine        !XL>
	pushl	crb$l_intd+vec$l_start(r4)
	print	1,<!_Unit start routine        !XL>
	pushl	crb$l_intd+vec$l_unitdisc(r4)
	print	1,<!_Unit disconnect routine   !XL>
	skip	1
	print	0,<Interrupt Dispatch Block (IDB):>
	getmem	@crb$l_intd+vec$l_idb(r4),(r4),#idb$c_length
	retiferr
	pushl	idb$l_csr(r4)		; CSR address
	print	1,<!_CSR address               !XL>
	pushl	idb$l_owner(r4)		; Owner UCB address
	print	1,<!_Owner UCB address         !XL>
	pushl	idb$w_units(r4)		; Number of units
	print	1,<!_Number of units           !8UB>
	pushl	idb$l_adp(r4)		; ADP address
	print	1,<!_ADP address               !XL>
	skip	1
	print	0,<Driver Dispatch Table (DDT):>
	getmem	@ddb$l_ddt(r2),(r4),#ddt$c_length  ; Read entire DDT
	retiferr
	pushl	ddt$l_start(r4)		; Start I/O routine
	print	1,<!_Start I/O routine         !XL>
	pushl	ddt$l_unsolint(r4)	; Unsolicited interrupt routine
	print	1,<!_Unsol. interrupt routine  !XL>
	pushl	ddt$l_fdt(r4)		; Function decision table
	print	1,<!_Function Decision table   !XL>
	pushl	ddt$l_cancel(r4)	; Cancel I/O routine
	print	1,<!_Cancel I/O routine        !XL>
	pushl	ddt$l_regdump(r4)	; Register dump routine
	print	1,<!_Register dump routine     !XL>
	movzwl	ddt$w_diagbuf(r4),-(sp)	; Diagnostic buffer size
	print	1,<!_Diagnostic buffer size        !XW>
	movzwl	ddt$w_errorbuf(r4),-(sp) ; Error buffer size
	print	1,<!_Error buffer size             !XW>
;	pushl	ddt$l_init(r4)		; Unit initialization routine
;	print	1,<!_Unit init. routine        !XL>

	ret

	.page
	.sbttl	show_ucb, show unit control block (UCB)
;---
;
;	show_ucb
;
;	This routine shows the unit control block associated
;	with a device.
;
;
;	4(ap) = address of DDB in local storage
;	8(ap) = address of UCB in local storage
;	12(ap)= actual address of UCB
;
;---

show_ucb:
	.word	^m<r2,r3,r4>

	movq	4(ap),r2		; get address of DDB,UCB
	skip	page
	pushl	ucb$w_unit(r3)		; unit number within channel
	pushal	ddb$t_name(r2)		; generic controller name
	print	2,<!AC!UW>
	print	0,<---->
	skip	1
	pushl	12(ap)			; virtual address of UCB
	print	1,<!_UCB address:      !XL>
	alloc	80,r4			; allocate output buffer
	movzwl	ucb$w_sts(r3),-(sp)	; device status
	pushab	unit_status		; bit definition table
	calls	#2,translate_bits	; translate bits into string
	pushl	r4			; result string
	pushl	ucb$w_sts(r3)		; device status
	print	1,<!_Device status:    !8XW   !AS>
	pushl	ucb$l_devchar(r3)	; device characteristics
	print	1,<!_Characteristics:  !XL>
	skip	1
	pushl	ucb$l_svpn(r3)
	pushl	ucb$b_devclass(r3)
	pushl	ucb$l_irp(r3)
	print	3,<-
IRP address     !XL     -
Device class    !8XB     -
SVPN          !XL>
	pushl	ucb$l_svapte(r3)
	pushl	ucb$b_devtype(r3)
	pushl	ucb$l_crb(r3)
	print	3,<-
CRB address     !XL     -
Device type     !8XB     -
SVAPTE        !XL>
	pushl	ucb$w_boff(r3)
	pushl	ucb$w_devbufsiz(r3)
	pushl	ucb$l_vcb(r3)
	print	3,<-
VCB address     !XL     -
DEVBUFSIZ       !8UW     -
BOFF          !8XW>
	pushl	ucb$w_bcnt(r3)
	pushl	ucb$l_devdepend(r3)
	pushl	ucb$l_fqfl(r3)
	print	3,<-
FQFL            !XL     -
DEVDEPEND       !XL     -
BCNT          !8XW>
	pushl	ucb$b_ertcnt(r3)
	pushl	ucb$w_devsts(r3)
	pushl	ucb$l_fqbl(r3)
	print	3,<-
FQBL            !XL     -
DEVSTS          !8XW     -
ERTCNT        !8UB>
	pushl	ucb$b_ertmax(r3)
	pushl	ucb$b_dipl(r3)
	pushl	ucb$b_fipl(r3)
	print	3,<-
Fork IPL        !8UB     -
Device IPL      !8UB     -
ERTMAX        !8UB>
	pushl	ucb$w_errcnt(r3)
	pushl	ucb$w_refc(r3)
	pushl	ucb$l_fpc(r3)
	print	3,<-
Fork PC         !XL     -
Reference count !8UW     -
ERRCNT        !8UW>
	movzwl	ucb$l_ownuic(r3),-(sp)
	movzwl	ucb$l_ownuic+2(r3),-(sp)
	pushl	ucb$l_opcnt(r3)
	pushl	ucb$l_fr3(r3)
	print	4,<-
Fork R3         !XL     -
Operation count !8UL     -
Owner UIC    [!3OW,!3OW]>
	pushl	ucb$l_pid(r3)
	pushl	ucb$l_amb(r3)
	pushl	ucb$l_fr4(r3)
	print	3,<-
Fork R4         !XL     -
AMB address     !XL     -
PID           !XL>

	movq	8(ap),-(sp)		; push local,real address of UCB
	calls	#2,b^show_ioq		; Display I/O request queue
	callg	(r3),show_vcb		; Display volume control block
	ret

	.page
	.sbttl	show_ioq, Display I/O queue for device
;---
;
;	show_ioq
;
;	Display the IRPs in the I/O queue associated with
;	a specified device.
;
; Inputs:
;
;	4(ap) = Address of UCB in local storage
;	8(ap) = Actual address of UCB
;
;---
	.enabl	lsb

show_ioq:
	.word	^m<r2,r3,r4,r5,r6>

	skip	1
	movl	4(ap),r2		; address of UCB
	addl3	#ucb$l_ioqfl,8(ap),r4	; Get real address of queue header
	cmpl	ucb$l_ioqfl(r2),r4	; Empty i/o queue?
	bneq	10$			; Branch if not
	bbs	#ucb$v_bsy,ucb$w_sts(r2),10$  ; Branch if have IRP
	print	0,<!_*** I/O request queue is empty ***>
	ret
10$:
	skip	1
	print	0,<!_!_!_!_I/O request queue>
	print	0,<!_!_!_!_----------------->
	skip	1
	bsbw	irp_heading		; Print heading line
	bbc	#ucb$v_bsy,ucb$w_sts(r2),20$	; Branch if not busy
	movl	ucb$l_irp(r2),r3	; Address of current IRP
	movl	#1,r6			; Indicate current IRP
	bsbw	print_irp		; Print line for current IRP
20$:
	movl	ucb$l_ioqfl(r2),r3	; Get address of first IRP in queue
	clrl	r6			; Indicate not current IRP
30$:
	cmpl	r3,r4			; end of queue?
	beql	90$			; Branch if so
	bsbw	print_irp		; print IRP line
	movl	irp$l_ioqfl(r5),r3	; Skip to next IRP in queue
	brb	30$
90$:
	status	success
	ret
	.dsabl	lsb

	.page
	.sbttl	show_acpq, display acp queue
;---
;
;	show_acpq
;
;	Display the IRP queue associated with the ACP
;	on the current volume.
;
; Inputs:
;
;	ap = address of VCB in local storage
;
;---
	.enabl	lsb

show_acpq:
	.word	^m<r2,r3,r4,r5,r6>

	tstl	vcb$l_aqb(ap)		; Is there any AQB?
	bneq	10$			; Branch if so
80$:	brw	90$			; Exit
10$:
	movab	aqb,r2
	getmem	@vcb$l_aqb(ap),(r2),#aqb$c_length  ; Read entire AQB
	blbc	r0,80$
	getmem	@sch$gl_pcbvec,r3	; Get address of PCB vector
	blbc	r0,12$
	cvtwl	aqb$l_acppid(r2),r1	; Extract process index
	moval	(r3)[r1],r1		; Point to PCB address entry
	getmem	(r1)			; Read PCB address
	blbc	r0,12$
	movab	buffer,r3
	getmem	pcb$t_lname(r1),(r3),#16  ; Read 16-byte process name
	blbc	r0,12$
	skip	2
	pushl	r3			; Address of ASCIC string
	print	1,<ACP for volume: !AC>
	skip	1
12$:
	pushl	aqb$l_acppid(r2)	; Process ID
	print	1,<PID            !XL>
	pushl	aqb$b_acptype(r2)
	print	1,<ACP type       !8UB>
	pushl	aqb$b_class(r2)
	print	1,<ACP class      !8UB>
	alloc	80			; 80 byte string buffer
	movzbl	aqb$b_status(r2),-(sp)	; ACP status
	pushab	acp_status		; Bit definition table
	calls	#2,translate_bits	; Translate bits into names
	pushl	sp			; Address of string descriptor
	pushl	aqb$b_status(r2)	; ACP status
	print	2,<Status         !8XB   !AS>
	pushl	aqb$b_mntcnt(r2)	; ACP mount count
	print	1,<Mount count    !8UB>
	pushl	aqb$l_link(r2)		; Link to next AQB
	print	1,<AQB linkage    !XL>
	skip	2
	movl	aqb$l_acpqfl(r2),r3	; Get address of first IRP
	addl3	#aqb$l_acpqfl,vcb$l_aqb(ap),r4	; Get real address of queuehead
	cmpl	r3,r4			; Empty ACP queue?
	bneq	20$			; Branch if not
	print	0,<!_*** ACP request queue is empty ***>
	ret
20$:
	print	0,<!_!_!_!_ACP request queue>
	print	0,<!_!_!_!_----------------->
	skip	1
	bsbb	irp_heading		; Print heading line
	clrl	r6			; Indicate not current IRP
30$:
	cmpl	r3,r4			; End of queue?
	beql	90$			; Branch if so
	bsbb	print_irp		; Print IRP line
	movl	irp$l_ioqfl(r5),r3	; skip to next IRP
	brb	30$
90$:
	status	success
	ret
	.dsabl	lsb

	.page
	.sbttl	print_irp, print a single IRP block
;---

	.enabl	lsb
;
;	Subroutine to print information for a single IRP block
;
; Inputs:
;
;	r3 = Dump address of IRP block
;	r6 = 1 if current IRP, else 0
;
; Outputs:
;
;	r5 = Address of IRP in local storage
;
;---

irp_heading:
	print	0,<CURR    IRP       PID  MODE CHAN  FUNC    WCB     EFN    AST     IOSB    STATUS>
	skip	1
	rsb

print_irp:
	movab	irp,r5
	alloc	80			; 80 byte output buffer
	getmem	(r3),(r5),#irp$c_length	; read entire IRP
	blbc	r0,90$
	movzwl	irp$w_sts(r5),-(sp)	; request status
	pushab	request_status		; bit definition table
	calls	#2,translate_bits	; translate bits to names
	pushl	sp			; address of string descriptor
	pushl	irp$w_sts(r5)		; request status
	pushl	irp$l_iosb(r5)		; address of IOSB
	pushl	irp$l_ast(r5)		; address of AST routine
	pushl	irp$b_efn(r5)		; Event flag number
	pushl	irp$l_wind(r5)		; Address of WCB
	pushl	irp$w_func(r5)		; Function code
	pushl	irp$w_chan(r5)		; Channel number
	extzv	#irp$v_mode,#irp$s_mode,irp$b_rmod(r5),r0
	pushl	#^a'KESU'		; Possible user modes
	pushab	(sp)[r0]		; Address of string
	pushl	#1			; Length of string
	pushl	irp$l_pid(r5)		; Process identification
	pushl	r3			; Address of IRP
	pushl	#^a' '			; String containing space
	pushl	sp			; Address of string
	pushl	#1			; Length of string
	cmpl	r3,ucb$l_irp(r2)	; check if current IRP
	bneq	20$			; branch if not
	movl	#^a'*',8(sp)		; Flag current IRP being done
20$:
	print	16,< !AD!+   !XL  !XL  !AD!+  !XW  !XW  !XL  !2UB  !XL  !XL  !XW  !AS>
90$:
	addl	#88,sp			; deallocate translate buffer
	rsb

	.dsabl	lsb

	.page
	.sbttl	show_vcb, Display Volume Control Block (VCB)
;---
;
;	show_vcb
;
;	Display the Volume Control Block (VCB)
;
; Inputs:
;
;	ap = Address of UCB in local storage
;
;---

show_vcb:
	.word	^m<r2,r3,r4,r5>

	tstl	ucb$l_vcb(ap)		; any VCB for this unit?
	bneq	10$			; Branch if so
90$:
	status	success
	ret
10$:
	bbs	#dev$v_spl,ucb$l_devchar(ap),90$  ; ignore VCB for
					; spooled devices (wrong usage)
	movab	vcb,r2
	getmem	@ucb$l_vcb(ap),(r2),#vcb$c_length ; read entire VCB
	blbc	r0,90$
	cmpb	vcb$b_type(r2),#dyn$c_vcb	; Check if block valid
	bneq	90$			; Exit if not valid type

	skip	2
	pushal	vcb$t_volname(r2)	; Address of volume name
	pushl	#12			; Length of volume name
	print	1,<Volume: !AD>
	alloc	80			; 80 byte output buffer
	movzbl	vcb$b_status(r2),-(sp)	; Volume status
	pushab	volume_status		; Bit definition table
	calls	#2,translate_bits	; Translate bits to names
	pushl	sp			; Address of output descriptor
	pushl	vcb$b_status(r2)
	print	2,<Status:  !XB   !AS>
	skip	1
	pushl	vcb$w_cluster(r2)	; Cluster size
	pushl	vcb$l_aqb(r2)		; AQB address
	print	2,<-
AQB address         !XL     -
Cluster size        !8UW>
	pushl	vcb$b_resfiles(r2)	; Number of reserved files
	pushl	vcb$w_rvn(r2)		; Relative volume number
	print	2,<-
Rel. Volume #       !8UW     -
Reserved files      !8UB>
	pushl	vcb$l_maxfiles(r2)	; Maximum number of files
	pushl	vcb$w_trans(r2)		; Number of transactions
	print	2,<-
Transactions        !8UW     -
Maximum files       !8UL>
	pushl	vcb$l_free(r2)		; Number of free blocks
	pushl	vcb$w_mcount(r2)	; Mount count
	print	2,<-
Mount count         !8UW     -
Free blocks         !8UL>
	pushl	vcb$w_recordsz(r2)	; Record size
	pushl	vcb$b_window(r2)	; Default window size
	print	2,<-
Window size         !8UB     -
Record size         !8UW>
	pushl	vcb$l_rvt(r2)		; RVT address
	pushl	vcb$w_extend(r2)	; Default extension size
	print	2,<-
Default extension   !8UW     -
RVT address         !XL>

	callg	(r2),show_acpq		; Display ACP queue (if any)
	ret

	.end
