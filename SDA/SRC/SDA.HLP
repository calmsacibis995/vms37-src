!
!	DCL System Dump Analyzer help command.
!
1 HELP
    This facility allows you to inspect data structures
    and/or memory from the dump taken at crash time.  The
    program may be used interactively or the output sent
    to a listing file.  You may perform the following
    operations:

	- print a list of all processes at crash time
	- display information about a process
	- display the system page table
	- display the non-paged dynamic storage pool
	- display saved hardware context
	- display any process stack or interrupt stack
	- display the value of a system symbol and the
		contents at that location (if possible)
	- examine memory for any process

    You can obtain help on any of the following commands
    by typing:	HELP <name>

	COPY	DEFINE	EVALUATE   EXAMINE	EXIT
	HELP	FORMAT	READ	   REPEAT	SET	SHOW

    or type HELP OPERATION for an overview.
2 OPERATION

    The Dump Analyzer program is executed via directives
    obtained from SYS$INPUT (terminal or procedure data).
    The output can be sent to a listing file or can be
    directly at the terminal via interactive use.  The
    program is initiated via the command:

	$ ANALYZE/CRASH_DUMP or
	$ ANALYZE/SYSTEM or
	$ RUN SYS$SYSTEM:SDA

    When the system crashes due to a fatal BUGCHECK error,
    the kernel routine writes the current state of the
    hardware registers and all physical memory to a pre-
    defined contiguous file called SYSDUMP.DMP in [SYSEXE]
    on the system disk.  Notice that pages currently on
    the paging file ("paged out") are not saved due to the
    immense size of the paging file and will be lost.  This
    has a minimal effect on debugging since most pages
    relating to the crash will be in physical memory.

    The system dump analyzer program can then be used to
    interrogate the dump.  A system manager can set up
    their system startup file so that the analyzer program
    is always initiated during startup.  In this type of
    operation, the analyzer automatically executes the
    given commands ONLY if the system just crashed.  For
    example, the following commands could be added to the
    system startup file to print an analyzer listing following
    a crash:

	$ !
	$ !	Invoke the Dump Analyzer if we just crashed
	$ !
	$ ANALYZE/CRASH_DUMP SYS$SYSTEM:SYSDUMP
	COPY [CRASH]SYSDUMP.DMP		! Save dump file for later
	SET OUTPUT LPA0:SYSDUMP.LIS	! Make listing file
	SHOW CRASH			! Display crash information
	SHOW STACK			! Show current operating stack
	SHOW SUMMARY			! List all active processes
	SHOW PROCESS/PCB/PHD/REGISTERS	! Display current process
	SHOW SYMBOLS/ALL		! Print the system symbol table
	SHOW POOL			! Dump the entire non-paged pool
	EXAMINE/SYSTEM			! Dump writable system region
	EXIT


    The program can be executed interactively if further
    information is required.  It is recommended that the
    SYSDUMP.DMP file be saved after a crash (perhaps by the
    system startup procedure) so that if the system crashes
    again, the dump will not be overwritten.  The saved dump
    may be inspected by typing the file specification of the
    saved file at the initial SDA prompt.

!
!	Program portion of SDA Help commands.
!
1 COPY <filespec>

    Makes a copy of the system dump file currently being examined.
    Each time the system crashes, new dump information is written
    over the contents of SYSDUMP.DMP.  The COPY command allows you
    to preserve the contents of the dump file by copying it to
    another file.  For example, the COPY command can be placed in
    the system startup file which causes the dump file to be copied
    only when the system has just crashed (SDA commands are only
    processed in the startup file if the system just crashed).

1 SET

    This command is a non-printing directive.  The following
    types of SET commands are available:

	SET PROCESS name
	SET OUTPUT filespec

2 PROCESS name [/INDEX=n] [/SYSTEM]

    Selects a process to be used as the current process
    for later commands.

    If the process name cannot be typed, the /INDEX qualifier
    is provided to specify by process index.  /SYSTEM specifies
    the "system PCB" (not associated with any visable process)
    which resides in system space.

2 OUTPUT filespec

    The command is used to specify that all remaining
    output should be sent to the given listing file.

1 SHOW

    Prints formatted data structures and/or memory.  The
    following types are available:

	SHOW CRASH
	SHOW DEVICE
	SHOW PAGE_TABLE
	SHOW PFN_DATA
	SHOW POOL
	SHOW PROCESS
	SHOW STACK
	SHOW SUMMARY
	SHOW SYMBOL

2 DEVICE name

    This command can be used to display the I/O data
    structures associated with a generic device name.
    The device name may be a generic device (DB) which
    shows all I/O structures associated with that device
    type.  Or, it may be a specific device name (DBA1)
    which prints only information concerning that device.

    This command is mainly used for debugging user written
    I/O drivers.

2 PROCESS name [/INDEX=n] [/SYSTEM]

    This command is used to display information about a
    particular process.  Either the "name" or the "index"
    should be specified to indicate the desired process.
    The process index must be specified in hexidecimal if
    used.  /SYSTEM selects the "system PCB" (not associated
    with any visable process) which resides in system space.

    If no options are given, the PCB is printed by default.
    The following qualifiers select what information is to
    be printed:

	/WORKING_SET_LIST
	/PROCESS_SECTION_TABLE
	/PAGE_TABLES
	/REGISTERS
	/PCB			(default)
	/PHD
	/ALL

2 SUMMARY

    This command displays a list of all processes in the
    system at the time the system crashed.

2 POOL

    This prints a formatted dump of the non-paged dynamic
    storage pool.  It attempts to identify each block by
    block type.

	/IRP prints only the IRP lookaside list storage
	/NONPAGED prints everything but the IRP list
	/PAGED prints the contents of the paged pool
	/ALL is the default and prints everything

2 STACK

    This prints a stack for the current process.  If no
    options are given, the current operating stack is printed.
    You may also specify any of the following access modes
    to print the corresponding stack.

	/INTERRUPT	System-wide interrupt stack
	/KERNEL		Kernel mode stack
	/EXECUTIVE	Executive mode stack
	/SUPERVISOR	Supervisor mode stack
	/USER		User mode stack
	/ALL		All stacks

2 PAGE_TABLE

    This prints a formatting listing of the system page tables.
    The following qualifiers select which page table to display:

	/SYSTEM prints the system page table (SPT)
	/GLOBAL prints the global page table (GPT)
	/ALL prints both the SPT and GPT (default)

2 PFN_DATA [pfn]

    This prints a listing of the free, modified and bad page
    lists as well as the entire PFN data base.

    If the optional pfn is specified, the information associated
    with that particular page frame number is printed.  The
    following qualifiers select various portions of the PFN data:

	/FREE prints the free page list
	/MODIFIED prints the modified page list
	/BAD prints the bad page list
	/SYSTEM prints all physical page information in PFN order
	/ALL prints all of the above (default)

2 SYMBOL name

    This command prints the value of the given system symbol
    and the contents of that memory location (if possible).

	/ALL prints all symbols sorted by name and by value.

1 EXAMINE range

    Prints the contents of the specified memory location(s).
    The range can be a single address or a range of locations
    given as "n:m" (n thru m inclusive) or "n;m" (starting at
    n for m bytes) where n and m may be arithmetic expressions.

    Type HELP EXPRESSIONS for the syntax of SDA expressions.

    In addition, you can dump the entire contents of a memory
    region by specifying the following options:

	/P0		Process Region
	/P1		Control Region
	/SYSTEM		System Region
	/ALL		All of the above

1 EVALUATE <expression>

    Computes the value of the specified expression.  The
    result is displayed in both hexidecimal and decimal.

1 DEFINE symbol [=] value

    Defines a temporary symbol with the specified value.
    The symbol can be used in expressions exactly like a
    system symbol.  Each subsequent definition of the same
    symbol overrides any previous definitions.

1 EXIT

    Exits the current display when typed at the screen
    overflow prompt, or exits the program if at normal
    prompt.

1 EXPRESSIONS

    Certain SDA commands allow expressions as command parameters.
    To create expressions, you may use:

	-  radix operators
	-  unary operators
	-  binary operators
	-  special characters
	-  symbols

    Radix operators specify a given radix for the following number.

	^X	hexadecimal (default)
	^O	octal
	^D	decimal

    Unary operators:

	+	assigns positive value (default)
	-	assigns negative value
	@	uses contents of location
	G	adds ^X80000000 to value (system space)
	H	adds ^X7FFE0000 to value (control region)

    Binary operators:

	+	addition
	-	subtraction
	*	multiplication
	/	division	
	@	arithmetic shift

	Multiplication, division and arithmetic shift are performed
	before addition and subtraction.

    Special characters:

	Parenthesis may be used to control the evaluation of
	all operations.

    Symbols:

	Symbols are composed of 1-15 alpanumeric characters that
	may include the special characters ($) and (_).  They are
	created from SYS.STB file, DEFINE command and READ command.
	The following special symbols may also be used:

	.	current location
	G	^X80000000 (system space)
	H	^X7FFE0000 (control region)
	R0-R11	General registers
	AP	Argument pointer
	FP	Frame pointer
	SP	Stack pointer	
	PC	Program counter
	PSL	Processor status longword

1 FORMAT <location> [/TYPE=type]

    Displays the formatted contents of a VMS control block.
    Most VMS blocks include a byte which indicates the block
    type (offset 10 decimal).  Associated with each block type,
    a set of symbols with a common prefix describe the various
    fields with the block.  If the block type byte represents
    a valid block type, the symbols associated with that block
    type (see $DYNDEF) are retrieved from the symbol table and
    their values are used for format the block.  /TYPE must be
    used when the block does not valid a valid block type in
    byte 10 (decimal) of the block.

    SDA finds all symbols containing the specified block type
    (e.g. PCB) prefix in the form:

	<prefix>$<type>_<name>

    where prefix is the block type, and type is one of the
    following:

	L	longword
	W	word
	B	byte
	Q	quadword
	T	counted ascii (0-31 characters)

    If SDA cannot find the symbols associated with the block
    type you have indicated, it will issue the message:

	No <block type> symbols found to format this block

    Use the READ command to obtain additional block definitions
    other than those in SYS.STB.

1 READ <filespec>

    Copies symbols from an object module to the SDA symbol table.
    The READ command lets you extract global symbols from any
    object module file and insert the definitions automatically
    into the SDA symbol table.  If you do not specify a file type,
    .STB is used by default.

    The object module file may be the output of a compiler or
    assembler or the output of the linker using /SYMBOL_TABLE.

    The following MACRO program may be used to obtain additional
    definitions other than those in SYS.STB:

	.TITLE	GLOBALS
	$PHDDEF	GLOBAL		; Process header definitions
	$DDBDEF	GLOBAL		; Device data block
	$UCBDEF	GLOBAL		; Unit control block
	$VCBDEF	GLOBAL		; Volume control block
	$ACBDEF	GLOBAL		; AST control block
	$IRPDEF	GLOBAL		; I/O request packet
    ;	more can be inserted here
	.END

    Use the command

	$ MACRO GLOBALS+SYS$LIBRARY:LIB/LIBRARY /OBJECT=GLOBALS.STB

    to generate an object module file containing the globals
    defined in the program.

1 REPEAT

    Repeats execution of the last SDA command given.  This
    command may also be invoked quicker by pressing the ESCAPE
    key on terminal input devices.

    This command provides a convenient method of stepping through
    a linked list of data structures or examine a sequence of
    locations.  For example,

	FORMAT @IOC$GL_DEVLIST	! Start at first DDB in system
	FORMAT @.		! Skip to next entry in list
	<escape key>		! Repeat FORMAT @. command
	.
	.
	.

