%title 'RMS3IDX - Analyze Things for Prolog 3 Indexed Files'
	module rms3idx	(
			ident='V03-004') = begin

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! Facility:	VAX/VMS Analyze Facility, Analyze Things for Prolog 3
!
! Abstract:	This module is responsible for analyzing various structures
!		in prolog 3 indexed files.  Those routines that are common
!		to prolog 2 and 3 can be found in RMS2IDX.
!
!
! Environment:
!
! Author: Paul C. Anagnostopoulos, Creation Date: 26 June 1981
!
! Modified By:
!	V03-004	PCA0060		Paul Anagnostopoulos	29-Mar-1982
!		Changed the way the index record statistics were
!		calculated to make them parallel to the data record.
!
!	V03-003	PCA0051		Paul Anagnostopoulos	26-mar-1982
!		The statistics callback that specified the nominal
!		length of the data record did not include the key.
!
!	V03-002	PCA0004		Paul Anagnostopoulos	16-Mar-1982
!		The key significance count is no longer present in
!		the data bucket trailer.
!
!	V03-001	PCA0003		Paul Anagnostopoulos	16-Mar-1982
!		A bug in ANL$3RECLAIMED_BUCKET_HEADER caused it to
!		sometimes think the bucket header was not at the
!		beginning of the bucket.
!--

%sbttl 'Module Declarations'
!
! Libraries and Requires:
!

library 'lib';
require 'rmsreq';

!
! Table of Contents:
!

forward routine
	anl$3bucket_header,
	anl$3reclaimed_bucket_header,
	anl$3index_record,
	anl$3primary_data_record,
	anl$3format_data_bytes: novalue,
	anl$3sidr_record;

!
! External References:
!

external routine
	anl$bucket,
	anl$bucket_callback,
	anl$check_flags,
	anl$data_callback,
	anl$format_error,
	anl$format_flags,
	anl$format_hex,
	anl$format_line,
	anl$format_skip,
	anl$index_callback,
	anl$reclaimed_bucket_callback;

external
	anl$gb_mode: byte,
	anl$gl_fat: ref block[,byte],
	anl$gw_prolog: word;

!
! Own Variables:
!

%sbttl 'ANL$3BUCKET_HEADER - Print and Check a Bucket Header'
!++
! Functional Description:
!	This routine is responsible for printing and checking the contents
!	of the bucket header in prolog 3 indexed file buckets.
!
! Formal Parameters:
!	the_bsd		The address of a BSD describing the complete bucket.
!			We update it to the next bucket.
!	key_id		The alleged ID of the key descriptor for this bucket.
!	dups		A boolean, true if duplicates allowed for this key.
!	level		The alleged level of this bucket.
!	report		A boolean, true if we are to print a report.
!	indent_level	The indentation level of the report.
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	True if there is another bucket in this chain, false otherwise.
!
! Side Effects:
!
!--


global routine anl$3bucket_header(the_bsd,key_id,dups,level,report,indent_level) = begin

bind
	b = .the_bsd: bsd;

own
	index_flags_def: block[3,long] initial(
				1,
				uplit byte (%ascic 'BKT$V_LASTBKT'),
				uplit byte (%ascic 'BKT$V_ROOTBKT')
				),

	data_flags_def: block[4,long] initial(
				2,
				uplit byte (%ascic 'BKT$V_LASTBKT'),
				0,
				uplit byte (%ascic 'BKT$V_LAST_CONT')
				);

local
	sp: ref block[,byte],
	tp: ref block[,byte];


! We know the bucket header fits in the bucket.  Set up a pointer to the header
! and a pointer to the trailer, which is the last 8 bytes.

sp = .b[bsd$l_bufptr];
tp = .b[bsd$l_endptr] - 8;

! Now we can format the header if requested.

if .report then (

	! Start with a nice header, containing the VBN.

	anl$format_line(3,.indent_level,anl$_bkt,.b[bsd$l_vbn]);
	anl$format_skip(0);

	! Format the check character.

	anl$format_line(0,.indent_level+1,anl$_bktcheck,.sp[bkt$b_checkchar]);

	! Format the key ID.

	anl$format_line(0,.indent_level+1,anl$_bktkey,.sp[bkt$b_indexno]);

	! Now the VBN address sample.

	anl$format_line(0,.indent_level+1,anl$_bktsample,.sp[bkt$w_adrsample]);

	! Now the free space offset.

	anl$format_line(0,.indent_level+1,anl$_bktfree,.sp[bkt$w_keyfrespc]);

	! Now the next available record ID.

	anl$format_line(0,.indent_level+1,anl$_bktrecid3,.sp[bkt$w_nxtrecid]);

	! Now the next bucket VBN.

	anl$format_line(0,.indent_level+1,anl$_bktnext,.sp[bkt$l_nxtbkt]);

	! Now the level number.

	anl$format_line(0,.indent_level+1,anl$_bktlevel,.sp[bkt$b_level]);

	! Now the control bits.

	anl$format_flags(.indent_level+1,anl$_bktflags,.sp[bkt$b_bktcb],
			(if .sp[bkt$b_level] eqlu 0 then data_flags_def else index_flags_def));

	! Now the VBN list pointer size.

	anl$format_line(0,.indent_level+1,anl$_bktptrsize,.sp[bkt$v_ptr_sz]+2);

	! Now we are going to format the stuff at the end of the bucket.
	! Begin with the VBN free space offset if this is an index or SIDR
	! bucket.

	anl$format_skip(0);
	if .sp[bkt$b_level] gtru 0 or
	   (.sp[bkt$b_level] eqlu 0 and .sp[bkt$b_indexno] nequ 0) then
		anl$format_line(0,.indent_level+1,anl$_bktvbnfree,.tp[4,0,16,0]);

	! If this is a data bucket for a key which allows duplicates, then
	! we have the VBN of the last bucket in the duplicate chain.

	if .sp[bkt$b_level] eqlu 0 and .dups then
		anl$format_line(0,.indent_level+1,anl$_bktlastbkt,
				(if .sp[bkt$b_indexno] eqlu 0 then .tp[2,0,32,0] else .tp[0,0,32,0]));
);

! Now we are going the check the contents of the bucket header.  This is a
! fairly rigorous test, but doesn't check anything that requires looking
! at other structures.

! Make sure the check byte is present in the last byte of the bucket.

if .sp[bkt$b_checkchar] nequ ch$rchar(.b[bsd$l_endptr]-1) then
	anl$format_error(anl$_badbktcheck,.b[bsd$l_vbn]);

! Check the key ID.

if .sp[bkt$b_indexno] nequ .key_id then
	anl$format_error(anl$_badbktkeyid,.b[bsd$l_vbn]);

! Check the bucket address sample.

if .sp[bkt$w_adrsample] nequ (.b[bsd$l_vbn] and %x'0000ffff') then
	anl$format_error(anl$_badbktsample,.b[bsd$l_vbn]);

! Check that the next available byte is within reasonable limits.
!!!TEMP!!!

if .sp[bkt$w_freespace] lssu bkt$c_overhdsz or
   .sp[bkt$w_freespace] gtru .b[bsd$w_size]*512-1 then
	anl$format_error(anl$_badbktfree,.b[bsd$l_vbn]);

! Check the level number.

if .sp[bkt$b_level] nequ .level then
	anl$format_error(anl$_badbktlevel,.b[bsd$l_vbn]);

! Check the byte of control flags.  Make sure we don't get confused by
! the pointer size.

anl$check_flags(.b[bsd$l_vbn],.sp[bkt$b_bktcb] and %x'e7',
		(if .sp[bkt$b_level] eqlu 0 then data_flags_def else index_flags_def));

! Now split up depending on the type of bucket.

if .sp[bkt$b_level] gtru 0 or .sp[bkt$b_indexno] nequ 0 then (

	! This is an index or SIDR bucket.  Check the VBN free space offset.
	! If we are accumulating statistics, then call the bucket callback
	! routine, telling it the level, bucket size, and fill amount.

	if .tp[4,0,16,0] lssu .sp[bkt$w_freespace]-1 or
	   .tp[4,0,16,0] gtru .b[bsd$w_size]*512-1	then
		anl$format_error(anl$_badvbnfree,.b[bsd$l_vbn]);

	statistics_callback(
		anl$bucket_callback(.sp[bkt$b_level],
				    .b[bsd$w_size],
				    .b[bsd$w_size]*512 - .tp[4,0,16,0] + .sp[bkt$w_freespace] - 1);
	);

) else

	! All we need to do for primary data buckets is call the statistics
	! callback routine with the same information.

	statistics_callback(
		anl$bucket_callback(.sp[bkt$b_level],
				    .b[bsd$w_size],
				    .sp[bkt$w_freespace] + 1);
	);

! If this is not the last bucket in this chain, then let's update the
! BSD to describe the next one.  Otherwise forget it.

if not .sp[bkt$v_lastbkt] then (
	b[bsd$l_vbn] = .sp[bkt$l_nxtbkt];
	anl$bucket(b,0);
	return true;
) else
	return false;

end;

%sbttl 'ANL$3RECLAIMED_BUCKET_HEADER - Check & Format Reclaimed Bucket'
!++
! Functional Description:
!	This routine is called to check and optionally format the header
!	of a reclaimed bucket.  These buckets reside on the available
!	list chained off the area descriptor.
!
! Formal Parameters:
!	the_bsd		Address of BSD describing bucket.
!	report		A boolean, true if we are to format the header.
!	indent_level	Indentation level for the report.
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	True if there is another bucket in the chain, false otherwise.
!
! Side Effects:
!
!--


global routine anl$3reclaimed_bucket_header(the_bsd,report,indent_level) = begin

bind
	b = .the_bsd: bsd;

own
	control_flags_def: block[2,long] initial(
				0,
				uplit byte (%ascic 'BKT$V_LASTBKT')
				);

local
	sp: ref block[,byte];


! We know the bucket header fits in the bucket.

! Now we can format the header if requested.

sp = .b[bsd$l_bufptr];

if .report then (

	! Start with a nice header, containing the VBN.

	anl$format_line(3,.indent_level,anl$_reclaimbkt,.b[bsd$l_vbn]);
	anl$format_skip(0);

	! Format the check character.

	anl$format_line(0,.indent_level+1,anl$_bktcheck,.sp[bkt$b_checkchar]);

	! Format the VBN address sample.

	anl$format_line(0,.indent_level+1,anl$_bktsample,.sp[bkt$w_adrsample]);

	! Now the next available record ID.

	anl$format_line(0,.indent_level+1,anl$_bktrecid3,.sp[bkt$w_nxtrecid]);

	! Now the next bucket VBN.

	anl$format_line(0,.indent_level+1,anl$_bktnext,.sp[bkt$l_nxtbkt]);

	! Finally, the flags.

	anl$format_flags(.indent_level+1,anl$_bktflags,.sp[bkt$b_bktcb],control_flags_def);
);

! Now we are going to check those items which we formatted above.  The rest
! of the bucket header (and trailer, if prolog 3) were probably left alone
! when the bucket was reclaimed, but we don't care.

! Make sure the check byte is present in the last byte of the bucket.

if .sp[bkt$b_checkchar] nequ ch$rchar(.b[bsd$l_endptr]-1) then
	anl$format_error(anl$_badbktcheck,.b[bsd$l_vbn]);

! Check the bucket address sample.

if .sp[bkt$w_adrsample] nequ (.b[bsd$l_vbn] and %x'0000ffff') then
	anl$format_error(anl$_badbktsample,.b[bsd$l_vbn]);

! We can't check anything else in the header because we don't know what's
! left over from the original bucket.

statistics_callback(

	! If we are accumulating statistics, then we have to call the
	! bucket callback routine so it can tally the bucket.

	anl$reclaimed_bucket_callback(.b[bsd$w_size]);
);

! If this is not the last bucket in this chain, then let's update the
! BSD to describe the next one.  Otherwise forget it.

if not .sp[bkt$v_lastbkt] then (
	b[bsd$l_vbn] = .sp[bkt$l_nxtbkt];
	anl$bucket(b,0);
	return true;
) else
	return false;

end;

%sbttl 'ANL$3INDEX_RECORD - Format and Check an Index Record'
!++
! Functional Description:
!	This routine is responsible for formatting and checking the contents
!	of an index record (for prolog 3).
!
! Formal Parameters:
!	rec_bsd		Address of BSD describing index record.  We update it
!			to describe the next record.  The work longword is
!			assumed to specify the number of the record.
!	key_bsd		Address of BSD for key descriptor of this index.
!	report		A boolean, true if we are to format the record.
!	indent_level	Indentation level for the report.
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	True if there is another index record, false otherwise.
!
! Side Effects:
!
!--


global routine anl$3index_record(rec_bsd,key_bsd,report,indent_level) = begin

bind
	b = .rec_bsd: bsd,
	k = .key_bsd: bsd;

local
	sp: ref block[,byte],
	hp: ref block[,byte],
	kp: ref block[,byte],
	vp: ref block[,byte],
	key_length: long;


! We want to ensure that the key portion of the index record fits in the
! record free space.  Begin by calculating the length of the key, which
! depends on whether or not it's compressed.

hp = .b[bsd$l_bufptr];
sp = .b[bsd$l_bufptr] + .b[bsd$l_offset];
kp = .k[bsd$l_bufptr] + .k[bsd$l_offset];

key_length =	(if .kp[key$v_idx_compr] then
			.sp[0,0,8,0] + irc$c_keycmpovh
		else
			.kp[key$b_keysz]);

! Make sure that the key fits in the record free space.

if .b[bsd$l_offset]+.key_length gtru .hp[bkt$w_keyfrespc] then (
	anl$format_error(anl$_bad3idxkeyfit,.b[bsd$l_vbn]);
	signal (anl$_unwind);
);

! Now we have to calculate the address of the corresponding VBN in the
! VBN list.

vp =	(.b[bsd$l_endptr]-4) - (.b[bsd$l_work]+1) * (.hp[bkt$v_ptr_sz]+2);

! Now we can format the index record, if requested.

if .report then (

	! Begin with a nice heading.

	anl$format_line(3,.indent_level,anl$_idxrec,.b[bsd$l_vbn],.b[bsd$l_offset]);
	anl$format_skip(0);

	! Now the VBN.

	anl$format_line(0,.indent_level+1,anl$_idxrecptr,.hp[bkt$v_ptr_sz]+2,
			(case .hp[bkt$v_ptr_sz] from 0 to 2 of set
			[0]:	.vp[0,0,16,0];
			[1]:	.vp[0,0,24,0];
			[2]:	.vp[0,0,32,0];
			tes));

	! And the key itself, in hex.

	anl$format_line(0,.indent_level+1,anl$_idxkeybytes);

	begin
	local
		key_dsc: descriptor;

	build_descriptor(key_dsc,.key_length,.sp);
	anl$format_hex(.indent_level+2,key_dsc);
	end;
);

statistics_callback(

	! If we are accumulating statistics, then we have to call the
	! index record callback routine, telling it the level, nominal
	! record length, and compressed record length.

	anl$index_callback(.hp[bkt$b_level],
			   .kp[key$b_keysz] + .hp[bkt$v_ptr_sz]+2,
			   .key_length + .hp[bkt$v_ptr_sz]+2);
);

! Now we can advance to the next index record.  If there isn't another
! one, then just return without modifying the BSD.  Otherwise update the
! BSD.  Don't forget to increment the record number in the work longword.

if .b[bsd$l_offset]+.key_length lssu .hp[bkt$w_keyfrespc] then (
	b[bsd$l_offset] = .b[bsd$l_offset] + .key_length;
	increment (b[bsd$l_work]);
	return true;
) else
	return false;

end;

%sbttl 'ANL$3PRIMARY_DATA_RECORD - Format and Check a Primary Data Record'
!++
! Functional Description:
!	This routine is responsible for formatting and checking the contents
!	of a primary data record for prolog 3 indexed files.  This does not
!	include formatting of the data bytes themselves.
!
! Formal Parameters:
!	rec_bsd		Address of BSD describing data record.  It is updated
!			to describe the next record.
!	key_bsd		Address of BSD for key descriptor of this index.
!	report		A boolean, true if we are to print a report.
!	indent_level	The indentation level for the report.
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	True if there is another record, false otherwise.
!
! Side Effects:
!
!--


global routine anl$3primary_data_record(rec_bsd,key_bsd,report,indent_level) = begin

bind
	b = .rec_bsd: bsd,
	k = .key_bsd: bsd;

own
	data_flags_def: vector[6,long] initial(
				4,
				0,
				0,
				uplit byte (%ascic 'IRC$V_DELETED'),
				uplit byte (%ascic 'IRC$V_RRV'),
				uplit byte (%ascic 'IRC$V_NOPTRSZ')
				);

local
	rp: ref block[,byte],
	sp: ref block[,byte],
	hp: ref block[,byte],
	kp: ref block[,byte],
	length: long,
	data_length: long,
	key_length: long;


! We need to ensure that the data record fits in the used space of the
! bucket.  Begin by making sure that the first byte fits.

hp = .b[bsd$l_bufptr];

if .b[bsd$l_offset] gequ .hp[bkt$w_freespace] then (
	anl$format_error(anl$_baddatarecfit,.b[bsd$l_vbn]);
	signal (anl$_unwind);
);

! Now we need to calculate the overall length of the record.  Begin with
! the control byte, record ID, and RRV.

rp = .b[bsd$l_bufptr] + .b[bsd$l_offset];
length =	1 +
		2 +
		(if .rp[irc$v_noptrsz] then 0 else
			(case .rp[irc$v_ptrsz] from 0 to 3 of set
			[0]:	4;
			[1]:	5;
			[2]:	6;
			[3]:	(anl$format_error(anl$_baddatarecps,.b[bsd$l_vbn]);
				signal (anl$_unwind););
			tes)
		);

! Now if this record is not an RRV, we need to calculate the key length
! and data length.

if not .rp[irc$v_rrv] then (

	! The format of the remainder of the record depends on the 
	! compression status of the key and data.  Determine the length
	! of these two parts and set up a pointer SP to the key.

	kp = .k[bsd$l_bufptr] + .k[bsd$l_offset];
	sp = .rp + .length;

	if .kp[key$v_key_compr] then (

		! The key is compressed.  So we have a remaining length,
		! followed by the compressed key, followed by the (perhaps
		! compressed) data.

		key_length = .sp[2,0,8,0] + irc$c_keycmpovh;
		data_length = .sp[0,0,16,0] - .key_length;
		length = .length + 2 + .sp[0,0,16,0];
		sp = .sp + 2;

	) else

		if .kp[key$v_rec_compr] then (

			! The key is not compressed, but the data is.  So we
			! have a remaining length, followed by the key,
			! followed by the compressed data.

			key_length = .kp[key$b_keysz];
			data_length = .sp[0,0,16,0] - .key_length;
			length = .length + 2 + .sp[0,0,16,0];
			sp = .sp + 2;

		) else (

			! Neither key nor data are compressed.  We have a
			! remaining length if it's a variable-length record,
			! followed by the key, followed by the data.

			key_length = .kp[key$b_keysz];
			if .anl$gl_fat[fat$v_rtype] eqlu fat$c_fixed then (
				data_length = .anl$gl_fat[fat$w_maxrec] - .key_length;
				length = .length + .key_length + .data_length;
			) else (
				data_length = .sp[0,0,16,0] - .key_length;
				length = .length + 2 + .sp[0,0,16,0];
				sp = .sp + 2;
			);
		);
);

! Finally we can ensure that the entire record fits in the unused space.

if .b[bsd$l_offset]+.length gtru .hp[bkt$w_freespace] then (
	anl$format_error(anl$_baddatarecfit,.b[bsd$l_vbn]);
	signal (anl$_unwind);
);

! Now we can format the record, if requested.  This does not include the
! actual data bytes.

if .report then (

	! Start with a nice heading.

	anl$format_line(3,.indent_level,anl$_idxprimrec,.b[bsd$l_vbn],.b[bsd$l_offset]);
	anl$format_skip(0);

	! Now the control flags.

	anl$format_flags(.indent_level+1,anl$_idxprimrecflags,.rp[irc$b_control],data_flags_def);

	! Now the record ID.

	anl$format_line(0,.indent_level+1,anl$_idxprimrecid,.rp[irc$w_id]);

	! Now the RRV, both record ID and bucket pointer, if present.

	if not .rp[irc$v_noptrsz] then
		anl$format_line(0,.indent_level+1,anl$_idxprimrecrrv,
				.rp[irc$w_rrv_id],.rp[irc$v_ptrsz]+2,
				(case .rp[irc$v_ptrsz] from 0 to 2 of set
				[0]:	.rp[5,0,16,0];
				[1]:	.rp[5,0,24,0];
				[2]:	.rp[5,0,32,0];
				tes));

	! And the key itself, in hex.  It may not exist.

	if not .rp[irc$v_rrv] then (
		local
			key_dsc: descriptor;

		anl$format_line(0,.indent_level+1,anl$_idxkeybytes);
		build_descriptor(key_dsc,.key_length,.sp);
		anl$format_hex(.indent_level+2,key_dsc);
	);
);

! Now we can actually check the integrity of this data record.  Most of
! the checking has been done, since it involved the fit of the record
! in the bucket.  However, we have a few more things to do.

! Check the control flags.  Don't get confused by the pointer size.

anl$check_flags(.b[bsd$l_vbn],.rp[irc$b_control] and %x'fc',data_flags_def);

! We don't check the VFC header size since the record might be compressed.

if not .rp[irc$v_rrv] and not .rp[irc$v_deleted] then statistics_callback(

	! If we are accumulating statistics, then we need to call the
	! statistics callback routine for data records.  It wants the
	! nominal record length, compressed key length, and compressed 
	! data length.

	local
		end_address: long,
		nominal_length: long;

	! If the data is compressed, we have to determine its nominal
	! length by scanning it.  The data record is composed of triplets
	! of the form (fragment-length,fragment,compression-count).

	if .kp[key$v_rec_compr] then (
		sp = .sp + .key_length;
		end_address = .sp + .data_length;
		nominal_length = 0;

		while .sp lssa .end_address do (
			nominal_length = .nominal_length + .sp[0,0,16,0];
			sp = .sp + 2 + .sp[0,0,16,0];
			nominal_length = .nominal_length + .sp[0,0,8,0];
			increment (sp);
		);
	);

	anl$data_callback(.kp[key$b_keysz] + 
				(if .kp[key$v_rec_compr] then .nominal_length else .data_length),
			  .key_length,
			  .data_length,
			  0);
);

! Now we want to advance to the next data record.  If there is room in
! the bucket for another, then update the BSD.  Otherwise don't touch it.

if .b[bsd$l_offset]+.length lssu .hp[bkt$w_freespace] then (
	b[bsd$l_offset] = .b[bsd$l_offset] + .length;
	return true;
) else
	return false;

end;

%sbttl 'ANL$3FORMAT_DATA_BYTES - Format Actual Primary Record Data Bytes'
!++
! Functional Description:
!	This routine is responsible for formatting the actual data bytes
!	in a primary record for prolog 3 indexed files.  Unlike prolog 2,
!	this is a separate routine because it's a bit messy.
!
! Formal Parameters:
!	indent_level	The indentation level for the report.
!	rec_bsd		BSD describing COMPLETE primary record.
!	key_bsd		BSD for key descriptor for primary index.
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	None
!
! Side Effects:
!
!--


global routine anl$3format_data_bytes(indent_level,rec_bsd,key_bsd): novalue = begin

bind
	b = .rec_bsd: bsd,
	k = .key_bsd: bsd;

local
	rp: ref block[,byte],
	sp: ref block[,byte],
	kp: ref block[,byte],
	data_length: long;


! Let's begin by setting up a pointer SP to the first byte after the RRV.

rp = .b[bsd$l_bufptr] + .b[bsd$l_offset];
sp =	.rp +
	1 +
	2 +
	(if .rp[irc$v_noptrsz] then 0 else .rp[irc$v_ptrsz]+4);

! Now let's calculate the data length and a pointer SP to the data.
! This depends on the compression status of the key and data.

kp = .k[bsd$l_bufptr] + .k[bsd$l_offset];

if .kp[key$v_key_compr] then (

	! The key is compressed.  We have a remaining length, followed by
	! the key, followed by the data bytes.

	data_length = .sp[0,0,16,0] - (.sp[2,0,8,0] + irc$c_keycmpovh);
	sp = .sp + 2 + (.sp[2,0,8,0] + irc$c_keycmpovh);

) else
	if .kp[key$v_rec_compr] then (

		! The key is not compressed, but the data is.  We have a
		! remaining length, followed by the key, followed by the
		! data bytes.

		data_length = .sp[0,0,16,0] - .kp[key$b_keysz];
		sp = .sp + 2 + .kp[key$b_keysz];

	) else

		! Neither key nor data are compressed.  We have a remaining
		! length if variable-length records, followed by the key,
		! followed by the data bytes.

		if .anl$gl_fat[fat$v_rtype] eqlu fat$c_fixed then (
			data_length = .anl$gl_fat[fat$w_maxrec] - .kp[key$b_keysz];
			sp = .sp + .kp[key$b_keysz];
		) else (
			data_length = .sp[0,0,16,0] - .kp[key$b_keysz];
			sp = .sp + 2 + .kp[key$b_keysz];
		);

! Now we can format the stupid record in hex.

begin
local
	data_dsc: descriptor;

build_descriptor(data_dsc,.data_length,.sp);
anl$format_hex(.indent_level,data_dsc);
end;

return;

end;

%sbttl 'ANL$3SIDR_RECORD - Print & Check a Secondary Data Record'
!++
! Functional Description:
!	This routine is reserved for analyzing SIDR records for prolog
!	3 indexed files.  VMS V3.0 did not support secondary keys in
!	prolog 3 files.
!
! Formal Parameters:
!
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!
!
! Side Effects:
!
!--


global routine anl$3sidr_record = begin

anl$format_error(anl$_p3sidr);
signal (anl$_unwind);

end;

end eludom
