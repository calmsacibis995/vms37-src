%title 'OBJINPUT - Handle Object Files & Libraries'
	module objinput	(
			ident='V03-002') = begin

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! Facility:	VAX/VMS Analyze Facility, Handle Object Files & Libraries
!
! Abstract:	This module is responsible for handling file specs from
!		the command line, and reading data from object files and
!		libraries.
!
!
! Environment:
!
! Author: Paul C. Anagnostopoulos, Creation Date: 8 January 1981
!
! Modified By:
!
!	V03-002	PCA0022		Paul Anagnostopoulos	24-Mar-1982
!		Signal errors using the correct STV values.
!
!	V03-001	PCA0013		Paul Anagnostopoulos	22-Mar-1982
!		Use the resultant spec rather than the wildcard spec
!		when complaining about a file to be analyzed.
!--

%sbttl 'Module Declarations'
!
! Libraries and Requires:
!

library 'starlet';
require 'objexereq';

!
! Table of Contents:
!

forward routine
	anl$open_next_object_file,
	anl$object_include,
	anl$get_object_record;

!
! External References:
!

external routine
	anl$object_positionals,
	cli$get_value: addressing_mode(general),
	lbr$close: addressing_mode(general),
	lbr$get_index: addressing_mode(general),
	lbr$get_record: addressing_mode(general),
	lbr$ini_control: addressing_mode(general),
	lbr$lookup_key: addressing_mode(general),
	lbr$open: addressing_mode(general),
	lib$find_file: addressing_mode(general),
	lib$free_vm: addressing_mode(general),
	lib$get_vm: addressing_mode(general),
	str$trim: addressing_mode(general);

!
! Own Variables:
!
! The following data is needed to keep track of what kind of file we
! are processing.

own
	own_described_buffer(resultant_spec,nam$c_maxrss),
	object_library: byte,
	library_index: long;

! The following data structures are used to access and read records from
! a file we are to analyze.

own
	object_fab: $fab(fac=get,
			 shr=get),

	own_described_buffer(object_buffer,obj$c_maxrecsiz),

	object_rab: $rab(fab=object_fab,
			 rac=seq,
			 rop=loc,
			 ubf=object_buffer+8,
			 usz=obj$c_maxrecsiz);

%sbttl 'ANL$OPEN_NEXT_OBJECT_FILE - Right'
!++
! Functional Description:
!	This routine is called to open the next object file we are to analyze.
!	It handles multiple file specs, wildcarding, and object libraries.
!
! Formal Parameters:
!	opened_spec	Address of descriptor of buffer in which to return
!			the spec of the file we open.  We set the length.
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	True if there is another object file, false otherwise.
!
! Side Effects:
!
!--


global routine anl$open_next_object_file(opened_spec) = begin

bind
	opened_spec_dsc = .opened_spec: descriptor;

own
	own_described_buffer(wildcard_spec,nam$c_maxrss),
	wildcard_context: long initial(0),
	all_modules: byte,
	module_list: ref blockvector[,obj$c_symsiz,byte],
	module_list_size: long,
	module_list_index: signed long;

local
	status: long;

! The following internal routine is called by the librarian when we need to
! scan an object library index.  We do this if the user asks us to analyze
! all the modules in the library.  The routine is called once for each module.

routine add_module_to_list(module_name) = begin

bind
	module_name_dsc = .module_name: descriptor;

! Copy the module name into the next module_list entry.

ch$copy(.module_name_dsc[len],.module_name_dsc[ptr],
	' ',obj$c_symsiz,module_list[.module_list_size,0,0,0,0]);

! Increment the module list size.

increment (module_list_size);

return ss$_normal;

end;

! If the wildcard context is zero, it means this is the first call, or
! we finished with a file spec on the previous call.  So we must obtain
! the next file spec from the command line.

if .wildcard_context eqlu 0 then (
	wildcard_spec[len] = nam$c_maxrss;
	status = cli$get_value(describe('file_specs'),wildcard_spec);

	! If there are no more specs, we are all done.

	if not .status then
		return false;
	str$trim(wildcard_spec,wildcard_spec,wildcard_spec);

	! Call a routine to process any positional qualifiers for this spec.
	! We don't know how to do that.

	anl$object_positionals();

	! Now we have to find out if this new spec has a /INCLUDE qualifier
	! attached to it, meaning that it is an object library.  If it is,
	! then the module list will be filled in with the module names.

	status = lib$get_vm(%ref(1000*obj$c_symsiz),module_list);
	check (.status, .status);
	object_library = anl$object_include(all_modules,module_list_size,.module_list);
	module_list_index = -1;
);

! On the other hand, if the wildcard context is non-zero, we may have just
! finished processing a file.  This is only true if we're processing
! an individual object file.  Better close it.

if .wildcard_context nequ 0 and .object_fab[fab$w_ifi] nequ 0 then (
	status = $close(fab=object_fab);
	check (.status, anl$_closein,1,resultant_spec,.status,.object_fab[fab$l_stv]);
);

! We have obtained a wildcard spec from the file parameter, and any associated
! positional qualifiers.

! Now we have to see if we need to find the next file that matches the
! current file spec.  This is always the case if it's not an object library.
! If it is, then we must search if this is the first time or we finished
! with the previous library.

if not .object_library or
   (.object_library and .module_list_index eqlu -1) then (
	resultant_spec[len] = nam$c_maxrss;
	status = lib$find_file(wildcard_spec,resultant_spec,wildcard_context,
			       (if .object_library then describe('.OLB') else describe('.OBJ')));
	str$trim(resultant_spec,resultant_spec,resultant_spec);

	! If we failed to find a file, then free up the module list, reset
	! the wildcard context, and call ourselves recursively to do the
	! next file spec.  Also give an error, unless we just plain ran
	! out of files.

	if not .status then (
		if .status nequ rms$_nmf then
			signal (anl$_openin,1,resultant_spec,.status);
		status = lib$free_vm(%ref(1000*obj$c_symsiz),module_list);
		check (.status, .status);
		wildcard_context = 0;
		return anl$open_next_object_file(opened_spec_dsc);
	);

	! Hey, we got a file spec.  Open the library or file, as appropriate.

	if .object_library then (
		status = lbr$ini_control(library_index,%ref(lbr$c_read),%ref(lbr$c_typ_obj));
		check (.status, .status);
		status = lbr$open(library_index,resultant_spec);
		check (.status, anl$_openin,1,resultant_spec,.status);
	) else (
		object_fab[fab$b_fns] = .resultant_spec[len];
		object_fab[fab$l_fna] = .resultant_spec[ptr];
		status = $open(fab=object_fab);
		check (.status, anl$_openin,1,resultant_spec,.status,.object_fab[fab$l_stv]);
		if .status then (
			status = $connect(rab=object_rab);
			check (.status, anl$_openin,1,resultant_spec,.status,.object_rab[rab$l_stv]);
		);
	);

	! If the open failed, then we need to recurse to try the next file.

	if not .status then
		return anl$open_next_object_file(opened_spec_dsc);

	! If this is an object library, it may be the case that our call
	! to ANL$OBJECT_INCLUDE told us that the user wanted all modules.
	! If so, let's ask the librarian for them; it will call ADD_MODULE_
	! TO_LIST for each one.

	if .object_library and .all_modules then (
		module_list_size = 0;
		status = lbr$get_index(library_index,%ref(1),add_module_to_list);
		check (.status, .status);
	);
);

! We know that we have a good file opened.

! OK, now we may be processing an object library.  If so, we have to
! get the next module name out of the module list and prepare to read it.

if .object_library then (
	local
		module_name_dsc: descriptor,
		module_text_rfa: block[8,byte];

	increment (module_list_index);

	! If we are at the end of the list, then call ourselves recursively
	! to process the next file matching the current spec.  But first we
	! must close the library we just finished.

	if .module_list_index eqlu .module_list_size then (
		status = lbr$close(library_index);
		check (.status,anl$_closein,1,resultant_spec,.status);
		module_list_index = -1;
		return anl$open_next_object_file(opened_spec_dsc);
	);

	! Prepare to read the next module.  If it isn't in the library,
	! recurse to try the next one.

	module_name_dsc[0,0,32,0] = obj$c_symsiz;
	module_name_dsc[ptr] = module_list[.module_list_index,0,0,0,0];
	str$trim(module_name_dsc,module_name_dsc,module_name_dsc);
	status = lbr$lookup_key(library_index,module_name_dsc,module_text_rfa);
	if not .status then (
		check (.status, anl$_nosuchmod,2,resultant_spec,module_name_dsc);
		return anl$open_next_object_file(opened_spec_dsc);
	);
);

! Finally, we have to build the real resultant file spec.  If we're not
! doing an object library, then we already have it.  If we are, we have
! to append the module name.  In all cases, trim trailing blanks.

str$trim(opened_spec_dsc,resultant_spec,opened_spec_dsc);
if .object_library then (
	ch$copy(1,uplit byte(' '),obj$c_symsiz,module_list[.module_list_index,0,0,0,0],
		' ',obj$c_symsiz+1,.opened_spec_dsc[ptr]+.opened_spec_dsc[len]);
	opened_spec_dsc[len] = .opened_spec_dsc[len] + obj$c_symsiz+1;
	str$trim(opened_spec_dsc,opened_spec_dsc,opened_spec_dsc);
);

return true;

end;

%sbttl 'ANL$OBJECT_INCLUDE - Process a /INCLUDE Qualifier'
!++
! Functional Description:
!	This routine is called to process the /INCLUDE qualifier that
!	might be attached to a file spec.  We need to return a list of
!	the module names in the qualifier.
!
! Formal Parameters:
!	all		Address of a byte to set if the user wants all
!			modules analyzed.
!	list_size	Address of a longword in which we return the size
!			of the module list.
!	list		Address of a vector of blocks in which we
!			place the list.
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	True if there is a /INCLUDE qualifier, false if not.
!
! Side Effects:
!
!--


global routine anl$object_include(all,list_size,list) = begin

bind
	all_modules = .all: byte,
	module_list_size = .list_size: long,
	module_list = .list: blockvector[,obj$c_symsiz,byte];

local
	status: long;
local
	local_described_buffer(module_name,obj$c_symsiz);


! Try to get the first module name.  If there is no qualifier, then
! just return false.

status = cli$get_value(describe('include'),module_name);
if not .status then
	return false;

! If the first name is an asterisk, then the user wants all modules.

if ch$eql(.module_name[len],.module_name[ptr], 1,uplit byte('*'),' ') then (
	all_modules = true;
	return true;
) else
	all_modules = false;

! Now we loop for each module name and add it to the list.

module_list_size = 0;
do (
	ch$move(obj$c_symsiz,.module_name[ptr], module_list[.module_list_size,0,0,0,0]);
	increment (module_list_size);
	status = cli$get_value(describe('include'),module_name);
) until not .status;

return true;

end;

%sbttl 'ANL$GET_OBJECT_RECORD - Read Record from Object File'
!++
! Functional Description:
!	This routine is called to read the next record from the current
!	object file, which is assumed to be open.
!
! Formal Parameters:
!	buffer		Address of a descriptor to fill in.
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	True if there is another record, false if not.
!
! Side Effects:
!
!--


global routine anl$get_object_record(buffer) = begin

bind
	buffer_dsc = .buffer: descriptor;

local
	status: long;

! We split up depending upon whether it's an object library.

if .object_library then (
	status = lbr$get_record(library_index,object_buffer,buffer_dsc);
	if .status eqlu rms$_eof then
		return false;
	check (.status, anl$_readerr,1,resultant_spec,.status);

) else (

	status = $get(rab=object_rab);
	if .status eqlu rms$_eof then
		return false;
	check (.status, anl$_readerr,1,resultant_spec,.status,.object_rab[rab$l_stv]);
	build_descriptor(buffer_dsc,.object_rab[rab$w_rsz],.object_rab[rab$l_rbf]);
);

return true;

end;

end eludom
