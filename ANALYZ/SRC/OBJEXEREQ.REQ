!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! Facility:	VAX/VMS Analyze Command, BLISS Require File
!
! Abstract:	This is the BLISS require file for the ANALYZE facility.
!		It includes various useful constructs and the definitions
!		of all control blocks used by the facility.
!
!
! Environment:
!
! Author: Paul C. Anagnostopoulos, Creation Date: 29 December 1980
!
! Modified By:
!
! , : Version
! 01 -
!--

!
! Here we will define "extensions" to the BLISS language.
!
! First we need values for boolean variables.

literal
	false		= 0,
	true		= 1;

! Now we will define macros to generate various things associated with
! string descriptors.

field descriptor_fields = set
	len	= [0,0,16,0],
	ptr	= [4,0,32,0]
tes;

macro descriptor =
	block[8,byte] field(descriptor_fields) %;

macro describe[] =
	uplit long(%charcount(%remaining), uplit byte(%remaining)) %;

macro build_descriptor(name,length,address) =
	(name[0,0,32,0] = length;
	name[ptr] = address)
%;

! Now we define two macros that can generate descripted buffers.  The
! first is for OWN buffers and the second for LOCAL buffers.  Note that
! the local buffer must be defined last in the declarations.

macro own_described_buffer(name,length) =
	name: block[8+length,byte] field(descriptor_fields)
				   initial(length,name+8)
%;

macro local_described_buffer(name,length) =
	name: block[8+length,byte] field(descriptor_fields);
	name[0,0,32,0] = length;
	name[ptr] = name+8
%;

! Now we define macros to increment and decrement a variable.

macro increment (var) =
	(var = .var + 1) %,
      decrement (var) =
	(var = .var - 1) %;

! We need an "infinite" loop contruct.  We also need a more elegant construct
! for terminating a loop.

macro loop =
	while 1 do %;

macro exitif[] =
	if %remaining then exitloop %;

! Define a macro that can check statuses from routines.

macro check(status)[] =
	(if not status then 
		signal(%remaining);)
%;


! Define literals for useful control characters.

literal
	bell		= %x'07',
	backspace	= %x'08',
	tab		= %x'09',
	linefeed	= %x'0a',
	formfeed	= %x'0c',
	creturn		= %x'0d',
	ctrl_u		= %x'15',
	ctrl_w		= %x'17',
	ctrl_z		= %x'1a',
	escape		= %x'1b',
	delete		= %x'7f';

! The following macros allow us to deal with fields in variable-length
! records.  Since we are analyzing, we can never assume that a field exists.

! This first macro requires five arguments:
!	1-4)	A structure reference to a field in a block.
!	  5)	The address of a descriptor of the record containing the block.
! Upon entry, we assume two things:
!		FIT_OK says whether all fields have fit so far.
!		SCANP points to the block within the record.
! What we will do is ensure that the specified field, defined relative to
! SCANP, fits within the specified record.  If not, we will produce an
! error messages and clear FIT_OK.

macro ensure_field_fit(position,offset,size,extension,record_dsc) =
	if .fit_ok then
		if .scanp+position+size/8 gtru .record_dsc[ptr]+.record_dsc[len] then (
			anl$format_error(anl$_fieldfit);
			fit_ok = false;
		);
%;

! The next macro requires exactly the same five arguments, and makes the
! same two assumptions.  However, in this case, we assume the field describes
! the count byte of an ASCIC string.  We will check the fit of both the
! count byte and the string itself.  We will also construct a descriptor
! of the string in the sixth argument for later use.

macro ensure_ascic_fit(position,offset,size,extension,record_dsc,ascic_dsc) =
	if .fit_ok then (
		ensure_field_fit(position,offset,size,extension,record_dsc);
		if .fit_ok then (
			build_descriptor(ascic_dsc,ch$rchar(.scanp+position),.scanp+position+1);
			ensure_field_fit(offset+1,0,.ascic_dsc[len],0,record_dsc);
		);
	);
%;

! Include the definitions of all the ridiculous message status codes.

external literal
	anl$_ok,
	anl$_anything,
	anl$_datatype,
	anl$_errorcount,
	anl$_errornone,
	anl$_errors,
	anl$_exefixa,
	anl$_exefixaimage,
	anl$_exefixaline,
	anl$_exefixcount,
	anl$_exefixextra,
	anl$_exefixfixed,
	anl$_exefixflags,
	anl$_exefixg,
	anl$_exefixgimage,
	anl$_exefixgline,
	anl$_exefixlist,
	anl$_exefixname,
	anl$_exefixname0,
	anl$_exefixp,
	anl$_exefixpsect,
	anl$_exefixup,
	anl$_exefixupnone,
	anl$_exegst,
	anl$_exehdr,
	anl$_exehdractive,
	anl$_exehdrblkcount,
	anl$_exehdrchancount,
	anl$_exehdrchandef,
	anl$_exehdrdececo,
	anl$_exehdrdst,
	anl$_exehdrfileid,
	anl$_exehdrfixed,
	anl$_exehdrflags,
	anl$_exehdrgblident,
	anl$_exehdrgst,
	anl$_exehdrident,
	anl$_exehdrimageid,
	anl$_exehdrisd,
	anl$_exehdrisdbase,
	anl$_exehdrisdcount,
	anl$_exehdrisdflags,
	anl$_exehdrisdgblnam,
	anl$_exehdrisdnum,
	anl$_exehdrisdpfcdef,
	anl$_exehdrisdpfcsiz,
	anl$_exehdrisdtype,
	anl$_exehdrisdvbn,
	anl$_exehdrlinkid,
	anl$_exehdrmatch,
	anl$_exehdrname,
	anl$_exehdrnopatch,
	anl$_exehdrpagecount,
	anl$_exehdrpagedef,
	anl$_exehdrpatch,
	anl$_exehdrpatchdate,
	anl$_exehdrpriv,
	anl$_exehdrropatch,
	anl$_exehdrrwpatch,
	anl$_exehdrsymdbg,
	anl$_exehdrsysver,
	anl$_exehdrtextvbn,
	anl$_exehdrtime,
	anl$_exehdrtypeexe,
	anl$_exehdrtypelim,
	anl$_exehdrusereco,
	anl$_exehdrxfer1,
	anl$_exehdrxfer2,
	anl$_exehdrxfer3,
	anl$_exeheading,
	anl$_exepatch,
	anl$_flag,
	anl$_hexdata,
	anl$_hexheading1,
	anl$_hexheading2,
	anl$_interact,
	anl$_mask,
	anl$_objcprrec,
	anl$_objdbgrec,
	anl$_objenv,
	anl$_objeomflags,
	anl$_objeomrec,
	anl$_objeomsevabt,
	anl$_objeomseverr,
	anl$_objeomsevign,
	anl$_objeomsevres,
	anl$_objeomsevsuc,
	anl$_objeomsevwrn,
	anl$_objeomwrec,
	anl$_objfadpassmech,
	anl$_objgsdenv,
	anl$_objgsdenvflags,
	anl$_objgsdenvpar,
	anl$_objgsdepm,
	anl$_objgsdepmw,
	anl$_objgsdidc,
	anl$_objgsdidcent,
	anl$_objgsdidcflags,
	anl$_objgsdidcmatch,
	anl$_objgsdidcobj,
	anl$_objgsdidcvala,
	anl$_objgsdidcvalb,
	anl$_objgsdlepm,
	anl$_objgsdlpro,
	anl$_objgsdlsy,
	anl$_objgsdpro,
	anl$_objgsdprow,
	anl$_objgsdpsc,
	anl$_objgsdpscalign,
	anl$_objgsdpscalloc,
	anl$_objgsdpscbase,
	anl$_objgsdpscflags,
	anl$_objgsdrec,
	anl$_objgsdspsc,
	anl$_objgsdsym,
	anl$_objgsdsymw,
	anl$_objgtxrec,
	anl$_objhdrignrec,
	anl$_objheading,
	anl$_objlitindex,
	anl$_objlnkrec,
	anl$_objlnmrec,
	anl$_objmhdcreate,
	anl$_objmhdname,
	anl$_objmhdpatch,
	anl$_objmhdrec,
	anl$_objmhdrecsiz,
	anl$_objmhdstrlvl,
	anl$_objmhdversion,
	anl$_objmtccorrect,
	anl$_objmtcinput,
	anl$_objmtcname,
	anl$_objmtcrec,
	anl$_objmtcseqnum,
	anl$_objmtcuic,
	anl$_objmtcversion,
	anl$_objmtcwhen,
	anl$_objproargcount,
	anl$_objproargnum,
	anl$_objpsect,
	anl$_objsrcrec,
	anl$_objstatheading1,
	anl$_objstatheading2,
	anl$_objstatline,
	anl$_objstattotal,
	anl$_objsymbol,
	anl$_objsymflags,
	anl$_objtirargindex,
	anl$_objtircmd,
	anl$_objtircmdstk,
	anl$_objtbtrec,
	anl$_objtirrec,
	anl$_objtirstoim,
	anl$_objtirvield,
	anl$_objttlrec,
	anl$_objvalue,
	anl$_objuvalue,
	anl$_protection,
	anl$_severity,
	anl$_text,
	anl$_texthdr,
	anl$_nosuchmod,
	anl$_baddate,
	anl$_badseverity,
	anl$_badsym1st,
	anl$_badsymchar,
	anl$_badsymlen,
	anl$_exebadfixupend,
	anl$_exebadfixupisd,
	anl$_exebadfixupvbn,
	anl$_exebadisds1,
	anl$_exebadisdtype,
	anl$_exebadmatch,
	anl$_exebadpatchlen,
	anl$_exebadobj,
	anl$_exebadtype,
	anl$_exebadxfer0,
	anl$_exehdrisdlong,
	anl$_exehdrlong,
	anl$_exeisdlendzro,
	anl$_exeisdlengbl,
	anl$_exeisdlenpriv,
	anl$_exenotnative,
	anl$_extrabytes,
	anl$_fieldfit,
	anl$_flagerror,
	anl$_notok,
	anl$_objbadidcmatch,
	anl$_objbadnum,
	anl$_objbadpop,
	anl$_objbadpush,
	anl$_objbadtype,
	anl$_objbadvield,
	anl$_objeombadsev,
	anl$_objeommissing,
	anl$_objfadbadavc,
	anl$_objfadbadrbc,
	anl$_objgsdbadalign,
	anl$_objgsdbadsubtyp,
	anl$_objhdrres,
	anl$_objmhdbadrecsiz,
	anl$_objmhdbadstrlvl,
	anl$_objmhdmissing,
	anl$_objnontircmd,
	anl$_objnopsc,
	anl$_objnullrec,
	anl$_objp0space,
	anl$_objprominmax,
	anl$_objpscabslen,
	anl$_objrectoobig,
	anl$_objtirres,
	anl$_objundefenv,
	anl$_objundeflit,
	anl$_objundefpsc,
	analyze$_facility;

! We use a few of the message in the shareable message file SHRMSG.
! Define status codes for these which include our facility code and
! the message severity.

literal
	anl$_closein	= shr$_closein + 177*65536 + sts$k_error,
	anl$_closeout	= shr$_closeout + 177*65536 + sts$k_error,
	anl$_openin	= shr$_openin + 177*65536 + sts$k_error,
	anl$_openout	= shr$_openout + 177*65536 + sts$k_severe,
	anl$_readerr	= shr$_readerr + 177*65536 + sts$k_error,
	anl$_writeerr	= shr$_writeerr + 177*65536 + sts$k_severe;
