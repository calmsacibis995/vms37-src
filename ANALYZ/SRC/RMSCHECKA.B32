%title 'RMSCHECKA - Check a File Structure'
	module rmschecka (
			ident='V03-003') = begin

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! Facility:	VAX/VMS Analyze Facility, Check a File Structure
!
! Abstract:	This module is responsible for checking the structure of
!		an RMS file as requested via /CHECK.  It also prepares a 
!		report of the results.
!
!
! Environment:
!
! Author: Paul C. Anagnostopoulos, Creation Date: 20 February 1981
!
! Modified By:
!
!	V03-003	PCA0061		Paul Anagnostopoulos	29-Mar-1982
!		Fix bug in ANL$PROLOG_CHECKSUMS so it calculates the
!		number of prologue blocks correctly.
!
!	V03-002	PCA0006		Paul Anagnostopoulos	16-Mar-1982
!		Modify table of stream record delimiters to conform
!		to new standard.
!
!	V03-001	PCA0005		Paul Anagnostopoulos	16-Mar-1982
!		Fix relative file checking so that it doesn't choke
!		on a file with no records.
!--

%sbttl 'Module Declarations'
!
! Libraries and Requires:
!

library 'lib';
require 'rmsreq';

!
! Table of Contents:
!

forward routine
	anl$check_mode: novalue,
	anl$seq_check: novalue,
	anl$seq_data_record,
	anl$stream_record_length,
	anl$rel_check: novalue,
	anl$rel_prolog: novalue,
	anl$rel_cell,
	anl$prolog_checksums: novalue;

!
! External References:
!

external routine
	anl$bucket,
	anl$check_flags,
	anl$condition_handler,
	anl$error_count,
	anl$format_error,
	anl$format_file_attributes,
	anl$format_file_header,
	anl$format_flags,
	anl$format_hex,
	anl$format_line,
	anl$format_skip,
	anl$idx_check,
	anl$open_next_rms_file,
	anl$prepare_report_file,
	cli$get_value: addressing_mode(general),
	lib$establish: addressing_mode(general);

external
	anl$gb_mode: byte,
	anl$gl_fat: ref block[,byte];

!
! Own Variables:
!

%sbttl 'ANL$CHECK_MODE - Check an RMS File Structure'
!++
! Functional Description:
!	This is the main routine for checking the structure of an RMS file
!	and producing a report of the results.  It is responsible for
!	cycling through the input files and calling the appropriate routine.
!
!	This routine is also called for /STATISTICS mode.  This mode is
!	a superset of /CHECK mode, doing all the same checking in addition
!	to printing some statistics.
!
! Formal Parameters:
!	none
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	none
!
! Side Effects:
!
!--


global routine anl$check_mode: novalue = begin

local
	status: long;


! We go into a loop, once through for each input file.

loop (
	local
		local_described_buffer(resultant_file_spec,nam$c_maxrss);

	status = anl$open_next_rms_file(resultant_file_spec);

exitif (not .status);

	! Prepare the file to receive the check report.

	anl$prepare_report_file((if .anl$gb_mode eqlu anl$k_check then 
					anl$_checkhdg 
				else 
					anl$_stathdg),resultant_file_spec);

	! Print the file header information and RMS attribute information in
	! the report.

	anl$format_file_header();

	anl$format_skip(0);
	anl$format_skip(0);
	anl$format_file_attributes();

	! Now call the appropriate checking routine.

	selectoneu .anl$gl_fat[fat$v_fileorg] of set
	[fat$c_sequential]:	anl$seq_check();
	[fat$c_relative]:	anl$rel_check();
	[fat$c_indexed]:	anl$idx_check();
	tes;

	! Tell the user how many structure errors were discovered.

	anl$format_skip(0);
	anl$format_skip(0);
	anl$error_count();

	! Finally, include the command line at the end of the report.

	begin
	local
		local_described_buffer(command_line,80);

	cli$get_value(describe('$LINE'),command_line);
	anl$format_skip(0);
	anl$format_skip(0);
	anl$format_line(0,0,anl$_anything,command_line);
	end;

);

return;

end;

%sbttl 'ANL$SEQ_CHECK - Sequential File Check'
!++
! Functional Description:
!	This routine is responsible for performing the structure check
!	on an RMS sequential file.
!
! Formal Parameters:
!	none
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	none
!
! Side Effects:
!
!--


global routine anl$seq_check: novalue = begin

local
	b: bsd;


! Establish the condition handler for drastic structure errors.

lib$establish(anl$condition_handler);

! If the file is null, just forget it.

if .anl$gl_fat[fat$l_efblk] eqlu 1 and .anl$gl_fat[fat$w_ffbyte] eqlu 0 then
	return;

! We are going to scan the blocks of the file, treating the file as if
! it contains single block buckets.  Get the first block.

init_bsd(b);
b[bsd$w_size] = 1;
b[bsd$l_vbn] = 1;
anl$bucket(b,0);

! Now we sit in a loop, checking each record.

while anl$seq_data_record(b,false) do;

anl$bucket(b,-1);

return;

end;

%sbttl 'ANL$SEQ_DATA_RECORD - Display & Check a Sequential Data Record'
!++
! Functional Description:
!	This routine is responsible for analyzing a data record from a
!	sequential file.  It can display the record and also check its
!	validity.
!
! Formal Parameters:
!	rec_bsd		A BSD describing the record.  We update it to
!			describe the next record.
!	report		A boolean, true if we are to format the record.
!	indent_level	The level of indentation of the report.
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	True if there is a record following this one; false otherwise.
!
! Side Effects:
!
!--


global routine anl$seq_data_record(rec_bsd,report,indent_level) = begin

bind
	b = .rec_bsd: bsd;

local
	sp: ref block[,byte],
	filler: byte,
	data_length: long, length: long,
	d: bsd,
	next_vbn: long, next_offset: long;


! Set up a pointer to the record.

sp = .b[bsd$l_bufptr] + .b[bsd$l_offset];

! Now we will set up three items.  FILLER will tell us whether this is a
! block filler for a no-span file.  DATA_LENGTH will tell us the length
! of the actual data bytes.  LENGTH will give us the overall length of the
! record.

selectoneu .anl$gl_fat[fat$v_rtype] of set
[fat$c_undefined]:	(filler = false;
			length = data_length = 512;);

[fat$c_fixed]:		(filler = .anl$gl_fat[fat$v_nospan] and
				  .anl$gl_fat[fat$w_maxrec] gtru 512-.b[bsd$l_offset];
			data_length = .anl$gl_fat[fat$w_maxrec];
			length = .data_length + .data_length mod 2;);

[fat$c_variable,
 fat$c_vfc]:		(filler = .anl$gl_fat[fat$v_nospan] and
				  .sp[0,0,16,0] eqlu %x'ffff';
			data_length = .sp[0,0,16,0];
			length = 2 + .data_length + .data_length mod 2;);
[fat$c_stream,
 fat$c_streamlf,
 fat$c_streamcr]:	(filler = false;
			length = data_length = anl$stream_record_length(b););
tes;
	
! Now we must check to see if a record in a no-span file spills across
! a block.  If so, we have a drastic structure error.

if .anl$gl_fat[fat$v_nospan] and not .filler and .b[bsd$l_offset]+.length gtru 512 then (
	anl$format_error(anl$_spanerror,.b[bsd$l_vbn]);
	signal (anl$_unwind);
);

! Now we can format the record if requested.

if .report then

	if .filler then

		! If it's a nospan filler, just format a heading.

		anl$format_line(0,.indent_level,anl$_nospanfiller,
				.b[bsd$l_vbn],.b[bsd$l_offset])

	else (

		! If it's a real record, we need to bring the entire thing
		! into memory.  Build a BSD describing the record and get it.

		init_bsd(d);
		d[bsd$w_size] = (.b[bsd$l_offset] + .length + 511) / 512;
		d[bsd$l_vbn] = .b[bsd$l_vbn];
		d[bsd$l_offset] = .b[bsd$l_offset];
		anl$bucket(d,0);

		! Now we can format a heading and the data in hex.

		begin
		local
			data_dsc: descriptor;

		anl$format_line(4,.indent_level,anl$_datarec,
				.b[bsd$l_vbn],.b[bsd$l_offset]);
		anl$format_skip(0);
		build_descriptor(data_dsc, .length,.d[bsd$l_bufptr]+.d[bsd$l_offset]);
		anl$format_hex(.indent_level+2,data_dsc);
		end;

		anl$bucket(d,-1);
	);

! Now check the length of a VFC record to make sure the header can fit.

if .anl$gl_fat[fat$v_rtype] eqlu fat$c_vfc and .data_length lssu .anl$gl_fat[fat$b_vfcsize] then
	anl$format_error(anl$_vfctooshort,.b[bsd$l_vbn]);

! Now we need to calculate the VBN and offset of the potential next record
! in the file.

if .filler then (
	next_vbn = .b[bsd$l_vbn] + 1;
	next_offset = 0;
) else (
	next_vbn = .b[bsd$l_vbn] + (.b[bsd$l_offset]+.length)/512;
	next_offset = (.b[bsd$l_offset]+.length) mod 512;
);

! At this point, we would like to ensure that the record didn't spill past
! the end of file.  However, some VMS files violate the end of file 
! convention as defined by ODS II (e.g., images linked with debug). 
! Therefore we can't make the check, or we'll for sure generate a ton
! of SPRs.  Instead, we will simply assume that there isn't another record
! if we are at or past the end of file.

if (.next_vbn eqlu .anl$gl_fat[fat$l_efblk] and .next_offset gequ .anl$gl_fat[fat$w_ffbyte]) or
   (.next_vbn gtru .anl$gl_fat[fat$l_efblk])	then
	return false;

! Well, it appears we do indeed have another record.  Update the caller's BSD
! to describe it.

b[bsd$l_vbn] = .next_vbn;
b[bsd$l_offset] = .next_offset;
anl$bucket(b,0);

return true;

end;

%sbttl 'ANL$STREAM_RECORD_LENGTH - Determine Length of Stream Record'
!++
! Functional Description:
!	This routine is responsible for determining the length of a 
!	record in a sequential file with stream record format.  Records
!	end with one of three sets of delimiters.
!
! Formal Parameters:
!	rec_bsd		Address of BSD describing beginning of record.
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	length of the record.
!
! Side Effects:
!
!--


global routine anl$stream_record_length(rec_bsd) = begin

bind
	b = .rec_bsd: bsd;

bind
	delimiter_table = ch$transtable(
				rep 10 of (false),
				true,			! line feed
				true,			! vertical tab
				true,			! form feed
				true,			! carriage return
				rep 242 of (false)
				);
local
	r: bsd,
	rp: ref block[,byte],
	found: byte;

builtin
	scanc;


! We have to scan the bytes in this block and succeeding ones until we
! find a delimiter.  Copy the caller's BSD because we don't want to
! modify it.

init_bsd(r);
copy_bucket(b,r);

! We go through our scanning loop once for each potential delimiter we
! encounter.

do (

	! Search the bytes in this block for any character which could 
	! possibly be a delimiter.

	rp = scanc(%ref(512-.r[bsd$l_offset]),.r[bsd$l_bufptr]+.r[bsd$l_offset],
		   delimiter_table,uplit byte (%x'ff'));

	if .rp eqla 0 then (

		! We didn't find any delimiter in this block.  If this block
		! contains the end-of-file, then we have a drastic structure
		! error.

		if .r[bsd$l_vbn] eqlu .anl$gl_fat[fat$l_efblk] then (
			anl$format_error(anl$_badstreameof,.b[bsd$l_vbn]);
			signal (anl$_unwind);
		);

		! We need to search the next block.  Update our BSD and
		! read it in.

		increment (r[bsd$l_vbn]);
		r[bsd$l_offset] = 0;
		anl$bucket(r,0);

	) else (

		! We found a potential delimiter.  To determine if it really
		! is one, we have to split up on record format.  Set flag
		! FOUND if it really is.

		found =	(selectoneu .anl$gl_fat[fat$v_rtype] of set
			 [fat$c_stream]:	ch$rchar(.rp) nequ creturn;
			 [fat$c_streamlf]:	ch$rchar(.rp) eqlu linefeed;
			 [fat$c_streamcr]:	ch$rchar(.rp) eqlu creturn;
			 tes);

		! Update the offset in the BSD to point at the character
		! following the one we found.  Then continue searching if
		! it wasn't a real delimiter.

		r[bsd$l_offset] = .rp - .r[bsd$l_bufptr] + 1;
	);

) until .found;

anl$bucket(r,-1);

! We found a real delimiter.  BSD B tells us where we started searching,
! and R tells us where we finished.  Calculate the length of the record.

return (.r[bsd$l_vbn]*512+.r[bsd$l_offset]) - (.b[bsd$l_vbn]*512+.b[bsd$l_offset]);

end;

%sbttl 'ANL$REL_CHECK - Relative File Check'
!++
! Functional Description:
!	This routine is responsible for performing a check of the structure
!	of a relative file.
!
! Formal Parameters:
!	none
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!
!
! Side Effects:
!
!--


global routine anl$rel_check: novalue = begin

local
	status: long,
	b: bsd,
	pp: ref block[,byte];


! Establish the condition handler for drastic structure errors.

lib$establish(anl$condition_handler);

! First call a routine to check the checksum in the prolog block.

anl$prolog_checksums();

! Read in the prolog block and check the fields relevent to relative files.

init_bsd(b);
b[bsd$w_size] = 1;
b[bsd$l_vbn] = 1;
anl$bucket(b,0);
pp = .b[bsd$l_bufptr];

anl$format_skip(0);
anl$format_skip(0);
anl$rel_prolog(b,true,0);


! Now let's read in the first data bucket and check all cells.
! There are no cells if the file isn't big enough for even one bucket.

if .anl$gl_fat[fat$l_hiblk]-1 gequ .anl$gl_fat[fat$b_bktsize] then (
	b[bsd$w_size] = .anl$gl_fat[fat$b_bktsize];
	b[bsd$l_vbn] = .pp[plg$w_dvbn];
	anl$bucket(b,0);

	while anl$rel_cell(b,false) do;
);

anl$bucket(b,-1);

return;
	
end;

%sbttl 'ANL$REL_PROLOG - Format and Check a Relative File Prolog'
!++
! Functional Description:
!	This routine is responsible for formatting and checking the prolog
!	of a relative file.  This is fairly simple.
!
! Formal Parameters:
!	prolog_bsd	A BSD describing the prolog.
!	report		A boolean, true if we are to format a report.
!	indent_level	The indentation level of the report.
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	none
!
! Side Effects:
!
!--


global routine anl$rel_prolog(prolog_bsd,report,indent_level): novalue = begin

bind
	p = .prolog_bsd: bsd;

own
	flags_def: vector[2,long] initial(
				0,
				uplit byte (%ascic 'PLG$V_NOEXTEND')
				);

local
	sp: ref block[,byte];


! We can start right off and format the prolog if requested.  Begin with
! a nice heading.

sp = .p[bsd$l_bufptr] + .p[bsd$l_offset];
if .report then (
	anl$format_line(3,.indent_level,anl$_relprolog);
	anl$format_skip(0);

	! Format the flags.

	anl$format_flags(.indent_level+1,anl$_prologflags,.sp[plg$b_flags],flags_def);

	! Format the first data bucket VBN.

	anl$format_line(0,.indent_level+1,anl$_databktvbn,.sp[plg$w_dvbn]);

	! Format the maximum record number.

	anl$format_line(0,.indent_level+1,anl$_relmaxrec,.sp[plg$l_mrn]);

	! Format the end-of-file VBN.

	anl$format_line(0,.indent_level+1,anl$_releofvbn,.sp[plg$l_eof]);

	! Format the prolog version number.

	anl$format_line(0,.indent_level+1,anl$_prologver,.sp[plg$w_ver_no]);
);

! Now we can check the prolog.
! Make sure the flag bits are valid.

anl$check_flags(.p[bsd$l_vbn],.sp[plg$b_flags],flags_def);

! If an extension error occurred, tell the user.

if .sp[plg$v_noextend] then
	anl$format_error(anl$_extenderr);

return;

end;

%sbttl 'ANL$REL_CELL - Format and Check a Relative File Cell'
!++
! Functional Description:
!	This routine is responsible for producing a report and checking the
!	contents of a record cell in a relative file.
!
! Formal Parameters:
!	cell_bsd	Address of a BSD describing the cell.
!			We update it to describe the following cell.
!	report		A boolean, true if we are to produce a report.
!	indent_level	The indentation level of the report.
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	True if there is another cell, false if not.
!
! Side Effects:
!
!--


global routine anl$rel_cell(cell_bsd,report,indent_level) = begin

bind
	c = .cell_bsd: bsd;

own
	cell_flags_def: vector[5,long] initial(
					3,
					0,
					0,
					uplit byte (%ascic 'DLC$V_DELETED'),
					uplit byte (%ascic 'DCL$V_REC')
					);

local
	sp: ref block[,byte],
	data_length: long, overhead: long, length: long;


! We begin by calculating two lengths.  The first is the length of only the
! actual data.  The second is the overall length of the cell.

sp = .c[bsd$l_bufptr] + .c[bsd$l_offset];
data_length = (selectoneu .anl$gl_fat[fat$v_rtype] of set
	       [fat$c_fixed]:	.anl$gl_fat[fat$w_maxrec];

	       [fat$c_variable,
	        fat$c_vfc]:	.sp[1,0,16,0];
	       tes);
overhead = 1 +
	   (if .anl$gl_fat[fat$v_rtype] eqlu fat$c_fixed then 0 else 2);
length = .overhead +
	 (if .anl$gl_fat[fat$v_rtype] eqlu fat$c_vfc then .anl$gl_fat[fat$b_vfcsize] else 0) +
	 .anl$gl_fat[fat$w_maxrec];

! We will assume that the cell fits in the bucket.  Otherwise we would have
! gone on to the next bucket last time.

! Now we can format the cell if requested.  This will begin with a heading
! and the flag byte.

if .report then (
	anl$format_line(4,.indent_level,anl$_cell,.c[bsd$l_vbn],.c[bsd$l_offset]);
	anl$format_skip(0);
	anl$format_flags(.indent_level+1,anl$_cellflags,.sp[0,0,8,0],cell_flags_def);

	! Now we can dump the record with a nice heading.  Only can do if the
	! record is present and not deleted.

	if .sp[dlc$v_rec] and not .sp[dlc$v_deleted] then (
		local
			data_dsc: descriptor;

		anl$format_line(0,.indent_level+1,anl$_celldata);
		build_descriptor(data_dsc,
				 (if .anl$gl_fat[fat$v_rtype] eqlu fat$c_fixed then 0 else 2) +
				 .data_length,
				 .sp + 1);
		anl$format_hex(.indent_level+2,data_dsc);
	);
);

! OK, now we have a few checks to make.  Start with the flags.

anl$check_flags(.c[bsd$l_vbn],.sp[0,0,8,0],cell_flags_def);

! Make sure that the data fits within the fixed cell size.

if .data_length gtru .length-.overhead then
	anl$format_error(anl$_badcellfit,.c[bsd$l_vbn]);

! Make sure that a VFC record is large enough to contain the header.

if .c[dlc$v_rec] and not .c[dlc$v_deleted] then
	if .anl$gl_fat[fat$v_rtype] eqlu fat$c_vfc and
	   .data_length lssu .anl$gl_fat[fat$b_vfcsize] then
		anl$format_error(anl$_vfctooshort,.c[bsd$l_vbn]);

! If another cell can fit in this bucket, then update the BSD to describe it.

if .sp + 2*.length leqa .c[bsd$l_endptr] then (
	c[bsd$l_offset] = .c[bsd$l_offset] + .length;
	return true;
);

! If there are more buckets, advance to the first cell in the next one.
! Otherwise we're done.  When we opened the file, we placed the
! end-of-file VBN in the FAT block, like for a sequential file.

if .c[bsd$l_vbn] + 2*.c[bsd$w_size] lequ .anl$gl_fat[fat$l_efblk] then (
	c[bsd$l_vbn] = .c[bsd$l_vbn] + .c[bsd$w_size];
	c[bsd$l_offset] = 0;
	anl$bucket(c,0);
	return true;
) else
	return false;

end;

%sbttl 'ANL$PROLOG_CHECKSUMS - Check Prolog Block Checksums'
!++
! Functional Description:
!	This routine is responsible for checking the checksums that are
!	present at the end of prolog blocks.  This pertains to both relative
!	and indexed files.
!
! Formal Parameters:
!	none
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	none
!
! Side Effects:
!
!--


global routine anl$prolog_checksums: novalue = begin

local
	blocks: long,
	p :bsd,
	pp: ref block[,byte],
	vbn: long,
	checksum: word, i: long;


! We will be reading in the prolog blocks as if they were single block buckets.

init_bsd(p);
p[bsd$w_size] = 1;

! We begin by calculating the number of prolog blocks.

if .anl$gl_fat[fat$v_fileorg] eqlu fat$c_relative then

	! Relative files always have one prolog block.

	blocks = 1

else (

	! The number of prolog blocks in an indexed file depends on the
	! number of keys and areas.  We have to read in the first prolog
	! block to determine this.

	p[bsd$l_vbn] = 1;
	anl$bucket(p,0);
	pp = .p[bsd$l_bufptr];

	! The key descriptors are first, followed by the area descriptors.
	! Thus we can determine the total prolog blocks from the first
	! area descriptor VBN and the number of areas.

	blocks = .pp[plg$b_avbn] + 
		 (.pp[plg$b_amax]-1) / (512/area$c_bln);
);

! Now we can loop through the prolog blocks and read them in one at a time.

incru vbn from 1 to .blocks do (

	p[bsd$l_vbn] = .vbn;
	anl$bucket(p,0);

	! Sum up the first 255 words of the block, ignoring overflow.  This is
	! the correct checksum, but if it's wrong, tell the user.

	begin
	bind
		word_vector = .p[bsd$l_bufptr]: vector[256,word];

	checksum = 0;
	incru i from 0 to 254 do
		checksum = .checksum + .word_vector[.i];

	if .checksum nequ .word_vector[255] then
		anl$format_error(anl$_badchecksum,.vbn);
	end;
);

anl$bucket(p,-1);
return;

end;

end eludom
