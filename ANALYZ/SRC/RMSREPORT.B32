%title 'RMSREPORT - Handle Output for ANALYZE/RMS_FILE'
	module rmsreport (
			ident='V03-003') = begin

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! Facility:	VAX/VMS Analyze Facility, Handle Reports for ANALYZE/RMS_FILE
!
! Abstract:	This module is responsible for all reports from the
!		ANALYZE/RMS_FILE command.  Reports can be routed to a file
!		and/or the terminal.
!
!
! Environment:
!
! Author: Paul C. Anagnostopoulos, Creation Date:  18 February 1981
!
! Modified By:
!
!	V03-003	PCA0031		Paul Anagnostopoulos	24-Mar-1982
!		Fix error messages so they use the correct STV value.
!
!	V03-002	PCA0012		Paul Anagnostopoulos	16-Mar-1982
!		Remove maximum record size restriction on report file.
!
!	V03-001	PCA0011		Paul Anagnostopoulos	16-Mar-1982
!		Include new global buffer count when formatting the
!		report of the file attribute area.
!--

%sbttl 'Module Declarations'
!
! Libraries and Requires:
!

library 'lib';
require 'rmsreq';

!
! Table of Contents:
!

forward routine
	anl$prepare_report_file: novalue,
	anl$report_page: novalue,
	anl$format_line: novalue,
	anl$format_skip: novalue,
	anl$format_error: novalue,
	anl$error_count: novalue,
	anl$format_flags: novalue,
	anl$format_hex: novalue,
	anl$format_protection_mask: novalue,
	anl$format_file_attributes: novalue;

!
! External References:
!

external routine
	cli$get_value: addressing_mode(general),
	lib$lp_lines: addressing_mode(general),
	lib$put_output: addressing_mode(general),
	str$trim: addressing_mode(general);

external
	anl$gb_mode: byte,
	anl$gl_fat: ref block[,byte];

!
! Own Variables:
!
! To create the report file, we need a RAB, FAB, and NAM block.  We also
! need a second NAM block to act as the related NAM block.

own
	related_resultant_spec: block[nam$c_maxrss,byte],
	related_expanded_spec: block[nam$c_maxrss,byte],

	related_nam: $nam(esa=related_expanded_spec,
			  ess=nam$c_maxrss,
			  rsa=related_resultant_spec,
			  rss=nam$c_maxrss),

	report_nam: $nam(rlf=related_nam),

	own_described_buffer(report_file_spec,nam$c_maxrss),

	report_fab: $fab(fac=put,
			 fop=ofp,
			 nam=report_nam,
			 org=seq,
			 rat=cr,
			 rfm=var),

	report_rab: $rab(fab=report_fab,
			 rac=seq);

! The following variables are needed to format the report.

own
	report_heading_msg: long,
	own_described_buffer(input_file_spec,nam$c_maxrss),
	page_number: long,
	line_counter: signed long;

! We need some variables for keeping track of errors.  One tells us where
! the analysis report is going.  We also count the number of errors, and
! keep track of whether any errors occurred in the entire session.

own
	report_to_file: byte,
	error_count: long initial(0),
	at_least_1_error: byte initial(false);

%sbttl 'ANL$PREPARE_REPORT_FILE - Prepare Report File'
!++
! Functional Description:
!	This routine is called whenever we begin the analysis of a new
!	file.  On the first call, it creates a report file to receive
!	the analysis.  On subsequent calls, if any, it just starts a new
!	report in the file.
!
! Formal Parameters:
!	heading_msg	An optional message code specifying the report
!			page heading message.
!	input_spec	The resultant spec of the input file we are analyzing.
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	none
!
! Side Effects:
!
!--


global routine anl$prepare_report_file(heading_msg,input_spec): novalue = begin

bind
	input_spec_dsc = .input_spec: descriptor;

own
	first_call: byte initial(true);

local
	status: long;


! If this is the first call, then we need to create the report file and
! prepare for one or more analysis reports.

if .first_call then (

	! We begin by obtaining the value of the /OUTPUT qualifier.  This will
	! tell us the name of the desired report file.  Trim the name for use
	! in error messages.

	report_to_file = cli$get_value(describe('OUTPUT'),report_file_spec);
	str$trim(report_file_spec,report_file_spec,report_file_spec);

	! Now we split up depending on the mode of operation.

	selectoneu .anl$gb_mode of set

	[anl$k_check,
	 anl$k_statistics]:

		! In these modes, the user specifies the name of the
		! report file, and we use ANALYZE.ANL as the defaults.
		! If the user didn't include an /OUTPUT qualifier, then
		! we just put the report on the terminal.

		if .report_to_file then (
			report_fab[fab$l_fna] = .report_file_spec[ptr];
			report_fab[fab$b_fns] = .report_file_spec[len];
			report_fab[fab$l_dna] = uplit byte('ANALYZE.ANL');
			report_fab[fab$b_dns] = 11;
		) else (
			report_fab[fab$l_fna] = uplit byte('SYS$OUTPUT');
			report_fab[fab$b_fns] = 10;
		);
		
	[anl$k_fdl]:

		! In this mode, the user specifies the name of the FDL
		! file, we use .FDL as the default, and we use a related
		! name equal to the input file spec.  This produces the
		! standard related name situation where the output file
		! has the same name as the input file.

		! To parse the input file name, we use the report FAB
		! temporarily so we can do a $PARSE and a $SEARCH into
		! the related NAM block.

		(report_fab[fab$l_fna] = .input_spec_dsc[ptr];
		report_fab[fab$b_fns] = .input_spec_dsc[len];
		report_fab[fab$l_nam] = related_nam;
		status = $parse(fab=report_fab);
		check (.status, .status);
		status = $search(fab=report_fab);
		check (.status, .status);

		! Now we can set up the blocks for creation of the report file.
		! The FAB specifies output file parse, as required.
		
		report_fab[fab$l_fna] = .report_file_spec[ptr];
		report_fab[fab$b_fns] = .report_file_spec[len];
		report_fab[fab$l_dna] = uplit byte('.FDL');
		report_fab[fab$b_dns] = 4;
		report_fab[fab$l_nam] = report_nam;);

	[anl$k_interactive]:

		! In this mode, the user specifies the name of the
		! transcipt file, and we use ANALYZE.ANL as the defaults.
		! If the user didn't include an /OUTPUT qualifier, then
		! we don't produce a transcript.

		if .report_to_file then (
			report_fab[fab$l_fna] = .report_file_spec[ptr];
			report_fab[fab$b_fns] = .report_file_spec[len];
			report_fab[fab$l_dna] = uplit byte('ANALYZE.ANL');
			report_fab[fab$b_dns] = 11;
		) else
			return;

	tes;

	! Now we can create the report file and connect the RAB.

	status = $create(fab=report_fab);
	check (.status, anl$_openout,1,report_file_spec,.status,.report_fab[fab$l_stv]);
	status = $connect(rab=report_rab);
	check (.status, .status);

	! Save the heading message code.

	report_heading_msg = .heading_msg;

	first_call = false;
);

! Save the input file spec for use in the report page headings.

input_file_spec[len] = .input_spec_dsc[len];
ch$move(.input_spec_dsc[len],.input_spec_dsc[ptr], .input_file_spec[ptr]);

! Begin the report by resetting the page number and starting a new page.

page_number = 0;
anl$report_page();

return;

end;

%sbttl 'ANL$REPORT_PAGE - Eject Page in Report'
!++
! Functional Description:
!	This routine is called to eject the page in a report and print
!	the heading on the new page.
!
! Formal Parameters:
!	none
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	none
!
! Side Effects:
!
!--


global routine anl$report_page: novalue = begin


! Since we are starting a new page, reset the line counter.

line_counter = lib$lp_lines() - 7;

! Now we can eject and print the heading line.  Don't do this if the
! current heading message is zero - page headers are not desired.

if .report_heading_msg nequ 0 then (
	anl$format_line(-1,0,anl$_anything,describe(%char(formfeed)));

	increment (page_number);
	anl$format_line(-1,0,.report_heading_msg,0,.page_number);
	anl$format_line(-1,0,anl$_anything,input_file_spec);
	anl$format_skip(-1);
	anl$format_skip(-1);
);

return;

end;

%sbttl 'ANL$FORMAT_LINE - Format a Line of the Report'
!++
! Functional Description:
!	This routine is called to format a line and place it in the current
!	report file.  It also goes to the terminal if this is an interactive
!	session.
!
! Formal Parameters:
!	widow_control	Controls widowing as follows:
!				positive	specifies number of lines that
!						must remain on the page.
!				zero		doesn't matter how many lines.
!				negative	Same as zero, but don't send
!						the line to the screen.
!	indent_level	The number of tab stops to indent the line.
!	template_msg	The status code of the message defining the line
!			template.
!	fao1...		$FAO arguments to fill into the message.
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	none
!
! Side Effects:
!
!--


global routine anl$format_line(widow_control,indent_level,template_msg,fao1): novalue = begin

local
	status: long;


! First we obtain the text of the template message.

begin
local
	local_described_buffer(template_buf,nam$c_maxrss);

status = $getmsg(msgid=.template_msg,
		 msglen=template_buf,
		 bufadr=template_buf,
		 flags=%b'0001');
check (.status,.status);

! Now we can plug the $FAO arguments into the message template.

begin
local
	local_described_buffer(result_buf,132);

status = $faol(ctrstr=template_buf,
	       outlen=result_buf,
	       outbuf=result_buf,
	       prmlst=fao1);
check (.status,.status);

! Prefix the resulting text with enough tabs to effect the indentation.

ch$move(.result_buf[len],.result_buf[ptr], .result_buf[ptr]+.indent_level);
result_buf[len] = .result_buf[len] + .indent_level;
ch$fill(%char(tab), .indent_level,.result_buf[ptr]);

! There are two cases for widow control.  If zero, then only eject if we
! are out of lines.  If positive, then eject if there are not said number
! of lines left on the page.

if (.widow_control leq 0 and .line_counter leq 0) or
   (.widow_control geq 1 and .line_counter lss .widow_control) then
	anl$report_page();

! If there is a current report file, put the line into it.  Also account
! for the line on the page.

if .report_rab[rab$w_isi] nequ 0 then (
	report_rab[rab$w_rsz] = .result_buf[len];
	report_rab[rab$l_rbf] = .result_buf[ptr];
	status = $put(rab=report_rab);
	check (.status, anl$_writeerr,1,report_file_spec,.status,.report_rab[rab$l_stv]);
	decrement (line_counter);
);

! If we are doing an interactive session, also put the line onto the screen.
! However, lines with widow control of -1 are not displayed.

if .anl$gb_mode eqlu anl$k_interactive and .widow_control geq 0 then (
	status = lib$put_output(result_buf);
	check (.status, .status);
);

end;
end;

return;

end;

%sbttl 'ANL$FORMAT_SKIP - Skip a Line in Report'
!++
! Functional Description:
!	This routine can be called to skip a line in the current report.
!
! Formal Parameters:
!	widow_control	See ANL$FORMAT_LINE
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	none
!
! Side Effects:
!
!--


global routine anl$format_skip(widow_control): novalue = begin


! Just call FORMAT_LINE with a blank line.

anl$format_line(.widow_control,0,anl$_anything,describe(''));

return;

end;

%sbttl 'ANL$FORMAT_ERROR - Put Error Message in Report'
!++
! Functional Description:
!	This routine is called to format an error message into the report
!	file.
!
! Formal Parameters:
!	error_msg	Status code for the error message.
!	fao1...		$FAO substitution parameters for the message.
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	none
!
! Side Effects:
!
!--


global routine anl$format_error(error_msg,fao1,fao2,fao3,fao4): novalue = begin

bind
	flag_string = describe('***  ');

builtin
	actualcount;


! We case on the number of $FAO parameters and call ANL$FORMAT_LINE to
! do the work.  In all cases, however, we add our own first parameter,
! which is the error message flag string.

case actualcount() from 1 to 5 of set
[1]:	anl$format_line(0,0,.error_msg,flag_string);
[2]:	anl$format_line(0,0,.error_msg,flag_string,.fao1);
[3]:	anl$format_line(0,0,.error_msg,flag_string,.fao1,.fao2);
[4]:	anl$format_line(0,0,.error_msg,flag_string,.fao1,.fao2,.fao3);
[5]:	anl$format_line(0,0,.error_msg,flag_string,.fao1,.fao2,.fao3,.fao4);
tes;

! Keep track of the number of errors reported.  Also remember if at least
! one error occurs at all.

increment (error_count);
at_least_1_error = true;

return;

end;

%sbttl 'ANL$ERROR_COUNT - Report Count of Errors'
!++
! Functional Description:
!	This routine is called to print a line telling how many errors
!	were discovered during the analysis.
!
! Formal Parameters:
!	none
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	none
!
! Side Effects:
!
!--


global routine anl$error_count: novalue = begin


! First we print the error count in the report.

if .error_count eqlu 0 then
	anl$format_line(0,0,anl$_errornone)
else
	anl$format_line(0,0,anl$_errorcount,.error_count);

! If this is a /CHECK or /STATISTICS report, we want the user to know
! what happened.  If the report is going to a file, then we better display
! a summary line.

if (.anl$gb_mode eqlu anl$k_check or .anl$gb_mode eqlu anl$k_statistics) and .report_to_file then
	signal (anl$_errors,2,input_file_spec,.error_count);

! Now we can reset the error counter for the next file.

error_count = 0;

return;

end;

%sbttl 'ANL$EXIT_WITH_STATUS - Exit to VMS With a Status'
!++
! Functional Description:
!	This routine is called when it's time to exit back to VMS.  We
!	return the appropriate status.  This routine is in this module
!	because the status depends on any errors found.
!
! Formal Parameters:
!	none
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	does not return
!
! Side Effects:
!
!--


global routine anl$exit_with_status = begin


! If at least one error occurred during the analysis, return an error status.
! However, interactive sessions always return success.

if .anl$gb_mode nequ anl$k_interactive and .at_least_1_error then
	$exit(code=anl$_notok or sts$m_inhib_msg)
else
	$exit(code=anl$_ok);

end;

%sbttl 'ANL$FORMAT_FLAGS - Format Flag Bits'
!++
! Functional Description:
!	This routine is called to format the flags in a byte/word/longword
!	of flags.
!
! Formal Parameters:
!	indent_level	The level at which the introductory message is to
!			be indented.  The flags are indented one more level.
!	intro_msg	The introductory message.
!	flags		The flag bits.
!	flag_def	A longword vector defining the flags.  The zeroth
!			entry specifies the highest-numbered flag.  The
!			remaining longwords contain the address of a counted
!			string giving the name of the flag.  If the flag is
!			undefined, the longword contains zero.
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	none
!
! Side Effects:
!
!--


global routine anl$format_flags(indent_level,intro_msg,flags,flag_def): novalue = begin

bind
	flags_vector = flags: bitvector[],
	flag_def_vector = .flag_def: vector[,long];

local
	i: long;


! Begin by printing the introductory message.

anl$format_line(2,.indent_level,.intro_msg);

! Now we loop through the flags and process each one that is defined.
! We print the flag name, bit number, and current setting.

incru i from 0 to .flag_def_vector[0] do (
	if .flag_def_vector[.i+1] nequ 0 then
		anl$format_line(0,.indent_level+1,anl$_flag,
				.i,.flag_def_vector[.i+1],.flags_vector[.i]);
);

return;

end;

%sbttl 'ANL$FORMAT_HEX - Format Hex Dump of Data'
!++
! Functional Description:
!	This routine is called to format a hex dump of some bytes.
!	It includes the character representation of the bytes also.
!
! Formal Parameters:
!	indent_level	The indentation level at which to place the dump.
!	data		Address of descriptor of data to be dumped.
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	none
!
! Side Effects:
!
!--


global routine anl$format_hex(indent_level,data): novalue = begin

bind
	data_dsc = .data: descriptor,
	data_vector = .data_dsc[ptr]: vector[,byte];

local
	i: long,
	arg_list: vector[20,long],
	count: long;

builtin
	callg;


! If the data is null, just quit.

if .data_dsc[len] eqlu 0 then
	return;

! We begin by printing two heading lines.  The first shows the offsets
! of the bytes and the second is a line of dashes.

anl$format_line(3,.indent_level,anl$_hexheading1);
anl$format_line(0,.indent_level,anl$_hexheading2);

! We will be builing argument lists to ANL$FORMAT_LINE.  It will always
! include widow control, indentation level, and the message code.

arg_list[1] = 0;
arg_list[2] = .indent_level;
arg_list[3] = anl$_hexdata;

! Now we go into a loop, once through for each 8 bytes to be formatted.

i = 0;
while .i lssu .data_dsc[len] do (

	! Calculate the number of bytes that will go on this line.

	count = minu(.data_dsc[len]-.i,8);

	! Next in the argument list we need a count of the spaces to skip
	! so the bytes will be lined up from right to left.

	arg_list[4] = (8 - .count) * 3;

	! Now we need the count itself.

	arg_list[5] = .count;

	! Now we loop through 8 (or less) bytes and put them in the
	! argument list (backwards, of course).

	decr j from .count-1 to 0 do (
		arg_list[6+.j] = .data_vector[.i];
		increment (i);
	);

	! Next we have the byte offset.

	arg_list[6+.count] = .i - .count;

	! Now we have to add to the argument list the byte count and a
	! pointer to the byte string.

	arg_list[7+.count] = .count;
	arg_list[8+.count] = data_vector[.i - .count];

	! Finally, fill in the argument count.

 	arg_list[0] = 8 + .count;
 
	! Now we can print the hex data.

	callg(arg_list,anl$format_line);
);

return;

end;

%sbttl 'ANL$FORMAT_PROTECTION_MASK - Format Protection Mask'
!++
! Functional Description:
!	This routine is called to format the standard 16-bit system
!	protection mask.
!
! Formal Parameters:
!	indent_level	Indentation level in the report.
!	message		Status code for message to use.
!	protection	Protection mask.
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	none
!
! Side Effects:
!
!--


global routine anl$format_protection_mask(indent_level,message,protection): novalue = begin

own
	protection_table: vector[16,long] initial(
				uplit byte (%ascic 'RWED'),
				uplit byte (%ascic 'WED'),
				uplit byte (%ascic 'RED'),
				uplit byte (%ascic 'ED'),
				uplit byte (%ascic 'RWD'),
				uplit byte (%ascic 'WD'),
				uplit byte (%ascic 'RD'),
				uplit byte (%ascic 'D'),
				uplit byte (%ascic 'RWE'),
				uplit byte (%ascic 'WE'),
				uplit byte (%ascic 'RE'),
				uplit byte (%ascic 'E'),
				uplit byte (%ascic 'RW'),
				uplit byte (%ascic 'W'),
				uplit byte (%ascic 'R'),
				uplit byte (%ascic ''));


! Simply format the message using the above protection code table.

anl$format_line(0,.indent_level,.message,.protection_table[.protection<0,4,0>],
					 .protection_table[.protection<4,4,0>],
					 .protection_table[.protection<8,4,0>],
					 .protection_table[.protection<12,4,0>]);

return;

end;

%sbttl 'ANL$FORMAT_FILE_ATTRIBUTES - Format File Attribute Area'
!++
! Functional Description:
!	This routine is called to format the user file attribute area, which
!	is assumed to contain RMS file attributes.  We don't check the
!	attributes.
!
! Formal Parameters:
!	none
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	none
!
! Side Effects:
!
!--


global routine anl$format_file_attributes: novalue = begin


! We start with a nice little header.

anl$format_line(3,0,anl$_fileattr);
anl$format_skip(0);

!  The first data printed is the file organization.

anl$format_line(0,1,anl$_fileorg,(selectoneu .anl$gl_fat[fat$v_fileorg] of set
				  [fat$c_sequential]:	uplit byte (%ascic 'sequential');
				  [fat$c_relative]:	uplit byte (%ascic 'relative');
				  [fat$c_indexed]:	uplit byte (%ascic 'indexed');
				  tes));

! Now we include the record format and attributes.

anl$format_line(0,1,anl$_recfmt,
		(selectoneu .anl$gl_fat[fat$v_rtype] of set
		 [fat$c_undefined]:	uplit byte (%ascic 'undefined');
		 [fat$c_fixed]:		uplit byte (%ascic 'fixed');
		 [fat$c_variable]:	uplit byte (%ascic 'variable');
		 [fat$c_vfc]:		uplit byte (%ascic 'variable-with-fixed-control');
		 [fat$c_stream]:	uplit byte (%ascic 'stream');
		 [fat$c_streamlf]:	uplit byte (%ascic 'stream-LF');
		 [fat$c_streamcr]:	uplit byte (%ascic 'stream-CR');
		 tes));

anl$format_line(0,1,anl$_recattr,(if .anl$gl_fat[fat$v_nospan] then uplit byte (%ascic 'no-span')
			     else				    uplit byte (%ascic '')),
				 (if .anl$gl_fat[fat$v_impliedcc] then uplit byte (%ascic 'carriage-return')
			     else if .anl$gl_fat[fat$v_fortrancc] then uplit byte (%ascic 'fortran')
			     else if .anl$gl_fat[fat$v_printcc]   then uplit byte (%ascic 'print')
			     else				       uplit byte (%ascic '')));

! Now the maximum record size and the longest record size.

anl$format_line(0,1,anl$_maxrecsize,.anl$gl_fat[fat$w_maxrec]);
if .anl$gl_fat[fat$v_fileorg] eqlu fat$c_sequential or .anl$gl_fat[fat$v_rtype] eqlu fat$c_fixed then
	anl$format_line(0,1,anl$_longrec,.anl$gl_fat[fat$w_rsize]);

! Now the header size for variable with fixed control.

if .anl$gl_fat[fat$v_rtype] eqlu fat$c_vfc then
	anl$format_line(0,1,anl$_ctlsize,.anl$gl_fat[fat$b_vfcsize]);

! Now the number of blocks allocated, extend quantity, and the end-of-file
! information.

anl$format_line(0,1,anl$_alloc,.anl$gl_fat[fat$l_hiblk],.anl$gl_fat[fat$w_defext]);
if .anl$gl_fat[fat$v_fileorg] eqlu fat$c_sequential then
	anl$format_line(0,1,anl$_eof,.anl$gl_fat[fat$l_efblk],.anl$gl_fat[fat$w_ffbyte]);

! Now the bucket size and global buffer count, unless it's a sequential file.

if .anl$gl_fat[fat$v_fileorg] eqlu fat$c_relative or .anl$gl_fat[fat$v_fileorg] eqlu fat$c_indexed then (
	anl$format_line(0,1,anl$_bucketsize,.anl$gl_fat[fat$b_bktsize]);
	anl$format_line(0,1,anl$_globalbufs,.anl$gl_fat[fat$w_gbc]);
);

return;

end;

end eludom
