%title 'OBJEXECHK - General Checking Routines'
	module objexechk(
			ident='V03-000') = begin

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! Facility:	VAX/VMS Analyze Facility, General Checking Routines
!
! Abstract:	This module provides general checking routines for the
!		ANALYZE/OBJECT and ANALYZE/IMAGE command image.
!
!
! Environment:
!
! Author: Paul C. Anagnostopoulos, Creation Date: 15 January 1980
!
! Modified By:
!
! , : Version
! 01 -
!--

%sbttl 'Module Declarations'
!
! Libraries and Requires:
!

library 'starlet';
require 'objexereq';

!
! Table of Contents:
!

forward routine
	anl$check_symbol: novalue,
	anl$check_when: novalue,
	anl$check_flags: novalue;

!
! External References:
!

external routine
	anl$format_error;

!
! Own Variables:
!

%sbttl 'ANL$CHECK_SYMBOL - Check Validity of Symbol'
!++
! Functional Description:
!	This routine is called to check the validity of a symbol, such
!	as a module name or a global name.
!
! Formal Parameters:
!	symbol		The address of a descriptor of the symbol.
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	none
!
! Side Effects:
!
!--


global routine anl$check_symbol(symbol): novalue = begin

bind
	symbol_dsc = .symbol: descriptor;

bind
	symbol_table = ch$transtable(
				rep  32 of (false),
				rep   1 of (true),	! space
				rep   3 of (false),
				rep   1 of (true),	! dollar sign
				rep   9 of (false),
				rep   1 of (true),	! period
				rep   1 of (false),
				rep  10 of (true),	! digits
				rep   7 of (false),
				rep  26 of (true),	! upper-case letters
				rep   4 of (false),
				rep   1 of (true),	! underscore
				rep 160 of (false));

builtin
	spanc;


! First we check the length of the symbol.

if (.symbol_dsc[len] lssu 1) or (.symbol_dsc[len] gtru obj$c_symsiz) then
	anl$format_error(anl$_badsymlen,obj$c_symsiz);

! Now we verify that the symbol is composed of the correct character set.

if spanc(symbol_dsc[len],.symbol_dsc[ptr],symbol_table,%ref(%x'ff')) nequ 0 then
	anl$format_error(anl$_badsymchar);

! Finally, make sure the symbol does not start with a digit.

if (ch$rchar(.symbol_dsc[ptr]) gequ '0') and
   (ch$rchar(.symbol_dsc[ptr]) lequ '9')	then
	anl$format_error(anl$_badsym1st);

return;

end;

%sbttl 'ANL$CHECK_WHEN - Check Date/Time Field'
!++
! Functional Description:
!	This routine is called to check the format of a date/time field.
!
! Formal Parameters:
!	when		The address of a descriptor of the field.
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!
!
! Side Effects:
!
!--


global routine anl$check_when(when): novalue = begin

bind
	when_dsc = .when: descriptor;

local
	when_ok: byte,
	i: long,
	char: byte,
	char_ok: byte;


! First we check the length of the date field.

when_ok = .when_dsc[len] eqlu 17;

! Now we scan each character of the date and make sure that it is valid.

incru i from 0 to minu(.when_dsc[len]-1,17-1) do (

	char = ch$rchar(.when_dsc[ptr]+.i);

	case .i from 0 to 16 of set
	[0, 12]:	char_ok = (.char eqlu ' ') or
				  ((.char gequ '0') and (.char lequ '9'));
	[ 1,
	  7 to 10,
	 13,
	 15 to 16]:	char_ok = (.char gequ '0') and (.char lequ '9');

	[2, 6]:		char_ok = .char eqlu '-';

	[3 to 5]:	char_ok = ((.char gequ 'A') and (.char lequ 'Z')) or
				  ((.char gequ 'a') and (.char lequ 'z'));

	[11]:		char_ok = .char eqlu ' ';

	[14]:		char_ok = .char eqlu ':';
	tes;

	when_ok = .when_ok and .char_ok;
);

! If the date wasn't valid, print an error message.

if not .when_ok then
	anl$format_error(anl$_baddate);

return;

end;

%sbttl 'ANL$CHECK_FLAGS - Check Flag Usage'
!++
! Functional Description:
!	This routine is called to check the usage of flags in a flag
!	byte/word/longword.
!
! Formal Parameters:
!	flags		A longword containing the flags to be checked.
!	flag_def	A longword vector defining the valid flags.  The
!			zeroth longword contains the bit number of the
!			last valid flag.  The remaining longwords contain
!			zero if the flag is unused, non-zero otherwise.
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	none
!
! Side Effects:
!
!--


global routine anl$check_flags(flags,flag_def): novalue = begin

bind
	flags_vector = flags: bitvector[],
	flag_def_vector = .flag_def: vector[,long];

local
	i: long;


! We will simply sit in a loop scanning the flag bits.  If any flag is
! set but undefined, we will issue an error message.

incru i from 0 to 31 do (
	if .flags_vector[.i] then
		if .i lequ .flag_def_vector[0] then (
			if .flag_def_vector[.i+1] eqlu 0 then
				anl$format_error(anl$_flagerror,.i)
		) else
			anl$format_error(anl$_flagerror,.i);
);

return;

end;

end eludom
