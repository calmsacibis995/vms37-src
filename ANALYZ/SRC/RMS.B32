%title 'RMS - Main Module for ANALYZE/RMS_FILE'
	module rms	(main=anl$rms,
			ident='V03-000') = begin

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! Facility:	VAX/VMS Analyze Facility, Main Module for ANALYZE/RMS_FILE
!
! Abstract:	This is the main module for the ANALYZE/RMS_FILE command.
!		It contains the routine that determines which mode we are
!		to operate in.  It also contains routines that don't fit
!		anywhere else.
!
!
! Environment:
!
! Author: Paul C. Anagnostopoulos, Creation Date: 18 February 1981
!
! Modified By:
!
! , : Version
! 01 -
!--

%sbttl 'Module Declarations'
!
! Libraries and Requires:
!

library 'lib';
require 'rmsreq';

!
! Table of Contents:
!

forward routine
	anl$rms: novalue,
	anl$condition_handler,
	anl$internalize_number,
	anl$check_flags: novalue;

!
! External References:
!

external routine
	anl$check_mode,
	anl$exit_with_status,
	anl$fdl_mode,
	anl$format_error,
	anl$interactive_mode,
	cli$present: addressing_mode(general),
	ots$cvt_ti_l: addressing_mode(general),
	ots$cvt_tz_l: addressing_mode(general);

!
! Global Variables:
!
! The following variable contains the current mode of operation.

global
	anl$gb_mode: byte;

!
! Own Variables:
!

%sbttl 'ANL$RMS - Main Routine for ANALYZE/RMS_FILE'
!++
! Functional Description:
!	This is the main routine, entered when the user performs an
!	ANALYZE/RMS_FILE command.  We decide which mode of operation
!	has been requested and do it.
!
! Formal Parameters:
!	none
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	none
!
! Side Effects:
!
!--


global routine anl$rms: novalue = begin


! See which mode the user has requested.  The default is /CHECK.

if cli$present(describe('FDL')) then (
	anl$gb_mode = anl$k_fdl;
	anl$fdl_mode();
)
else if cli$present(describe('INTERACTIVE')) then (
	anl$gb_mode = anl$k_interactive;
	anl$interactive_mode();
)
else if cli$present(describe('STATISTICS')) then (
	anl$gb_mode = anl$k_statistics;
	anl$check_mode();
)
else (
	anl$gb_mode = anl$k_check;
	anl$check_mode();
);

! All done.  Just exit with a nice status to Mother VMS...

anl$exit_with_status();

end;

%sbttl 'ANL$CONDITION_HANDLER - Handle Signalled Conditions'
!++
! Functional Description:
!	This principal purpose of this routine is to handle the anl$_unwind
!	status that is signalled by routines when they find drastic 
!	structural errors in a file.  By signalling this condition, they are
!	saying that they can't continue to analyze the structure.
!
! Formal Parameters:
!	Standard condition handler parameters.
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	ss$_resignal	We don't handle this condition.
!	ss$_normal	We unwound the stack.
!
! Side Effects:
!
!--


global routine anl$condition_handler(signal_array_ptr) = begin

bind
	signal_array = .signal_array_ptr: block[,byte];

local
	status: long;


! If the condition is not that raised by anl$_unwind, then we just resignal
! it, because someone else must handle it.

if .signal_array[chf$l_sig_name] nequ anl$_unwind then
	return ss$_resignal;

! It's a drastic structure error.  Put out an error message and unwind
! to the establisher's caller.

anl$format_error(anl$_unwind);
status = $unwind();
check (.status, .status);

return ss$_normal;

end;

%sbttl 'ANL$INTERNALIZE_NUMBER - Convert String to Longword'
!++
! Functional Description:
!	This routine will convert the ASCII representation of a decimal
!	or hexadecimal number to a longword.  It is here for lack of a
!	better place.
!
! Formal Parameters:
!	string		Address of descriptor of ASCII number.  Decimal
!			numbers are just digits, while hexadecimal numbers
!			begin with %X or are enclosed in %X'...'.
!	longword	Address of longword in which to return value.
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	True if number was valid, false if invalid.
!
! Side Effects:
!
!--


global routine anl$internalize_number(string,longword) = begin

bind
	string_dsc = .string: descriptor;

local
	status: long,
	sp: ref block[,byte],
	hex_dsc: descriptor;


! If the string is null, then it's invalid.

if .string_dsc[len] eqlu 0 then
	return false;

! Split up depending upon whether it's a decimal or hex number.

if ch$eql(minu(.string_dsc[len],2),.string_dsc[ptr], 2,uplit byte('%X'), ' ') then (

	! We have a hex number.  Build a descriptor of the actual digits.
	! If the third character is an apostrophe, then we must find the
	! matching apostrophe.

	if ch$rchar(.string_dsc[ptr]+2) eqlu '''' then (
		sp = ch$find_ch(.string_dsc[len]-3,.string_dsc[ptr]+3, '''');
		if .sp eqlu 0 then
			return false;
		build_descriptor(hex_dsc,.sp-.string_dsc[ptr]-3,.string_dsc[ptr]+3);
	) else
		build_descriptor(hex_dsc,.string_dsc[len]-2,.string_dsc[ptr]+2);
	status = ots$cvt_tz_l(hex_dsc,.longword,4,%b'1');

) else

	! We have a decimal number.  Convert it and return the status.

	status = ots$cvt_ti_l(string_dsc,.longword,4,%b'11');

return .status;

end;

%sbttl 'ANL$CHECK_FLAGS - Check Flag Usage'
!++
! Functional Description:
!	This routine is called to check the usage of flags in a flag
!	byte/word/longword.  This routine is here for no better place.
!
! Formal Parameters:
!	vbn		VBN of the bucket containing the flags.
!	flags		A longword containing the flags to be checked.
!	flag_def	A longword vector defining the valid flags.  The
!			zeroth longword contains the bit number of the
!			last valid flag.  The remaining longwords contain
!			zero if the flag is unused, non-zero otherwise.
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	none
!
! Side Effects:
!
!--


global routine anl$check_flags(vbn,flags,flag_def): novalue = begin

bind
	flags_vector = flags: bitvector[],
	flag_def_vector = .flag_def: vector[,long];

local
	i: long;


! We will simply sit in a loop scanning the flag bits.  If any flag is
! set but undefined, we will issue an error message.

incru i from 0 to 31 do (
	if .flags_vector[.i] then
		if .i lequ .flag_def_vector[0] then (
			if .flag_def_vector[.i+1] eqlu 0 then
				anl$format_error(anl$_flagerror,.vbn,.i)
		) else
			anl$format_error(anl$_flagerror,.vbn,.i);
);

return;

end;


end eludom
