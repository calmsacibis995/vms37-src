%title 'OBJEXEOUT - Handle Report Output'
	module objexeout(
			ident='V03-002') = begin

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! Facility:	VAX/VMS Analyze Facility, Handle Report Output
!
! Abstract:	This module is responsible for generating report output
!		for ANALYZE/OBJECT and ANALYZE/IMAGE.  It provides the
!		capability to create report files and fill them with
!		output lines.
!
!
! Environment:
!
! Author: Paul C. Anagnostopoulos, Creation Date: 8 January 1981
!
! Modified By:
!
!	V03-002	PCA0021		Paul Anagnostopoulos	24-Mar-1982
!		Signal errors using the correct STV values.
!
!	V03-001	PCA0015		Paul Anagnostopoulos	22-Mar-1982
!		Don't constrain report file lines to 132 characters.
!--

%sbttl 'Module Declarations'
!
! Libraries and Requires:
!

library 'starlet';
require 'objexereq';

!
! Table of Contents:
!

forward routine
	anl$prepare_report_file: novalue,
	anl$report_page: novalue,
	anl$report_line: novalue,
	anl$format_line: novalue,
	anl$format_error: novalue,
	anl$error_count: novalue,
	anl$format_hex: novalue,
	anl$format_flags: novalue,
	anl$format_data_type: novalue,
	anl$format_mask: novalue,
	anl$format_protection: novalue,
	anl$format_severity: novalue,
	anl$interact;

!
! External References:
!

external routine
	cli$get_value: addressing_mode(general),
	lib$get_input: addressing_mode(general),
	lib$lp_lines: addressing_mode(general),
	str$trim: addressing_mode(general);

external
	anl$gb_interactive: byte;

!
! Own Variables:
!
! The following data structures are needed to create and print to the
! report file.  They include the FAB and RAB, and a buffer for the report
! spec.

own
	own_described_buffer(report_spec,nam$c_maxrss),

	report_fab: $fab(dnm='ANALYZE.ANL',
			 fac=put,
			 fna=report_spec+8,
			 fns=nam$c_maxrss,
			 fop=sqo,
			 org=seq,
			 rat=cr,
			 rfm=var),

	report_rab: $rab(fab=report_fab,
			 rac=seq);

! The following variables are needed to format the report.

own
	own_described_buffer(input_file_spec,nam$c_maxrss),
	report_heading_msg: long,
	page_number: long,
	line_counter: signed long;

! We also need to keep track of how many errors were reported.

own
	error_count: long initial(0),
	at_least_1_error: byte initial(false);

%sbttl 'ANL$PREPARE_REPORT_FILE - Prepare Report File'
!++
! Functional Description:
!	This routine is called whenever we begin the analysis of a new
!	file.  It sets up a report file to receive the analysis.
!
! Formal Parameters:
!	output_spec	The report file spec as specified by the user.
!			This is used on the first call to create the file.
!	input_spec	The spec of the input file we are analyzing.
!	heading_msg	An optional message code specifying the report
!			page heading.
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	none
!
! Side Effects:
!
!--


global routine anl$prepare_report_file(output_spec,input_spec,heading_msg): novalue = begin

bind
	output_spec_dsc = .output_spec: descriptor,
	input_spec_dsc = .input_spec: descriptor;

local
	status: long;

builtin
	nullparameter;


! If the report file is not open, then we want to create it and prepare
! for the report.

if .report_rab[rab$w_isi] eqlu 0 then (

	! Save the output file spec as the principal name of the report file.

	ch$copy(.output_spec_dsc[len],.output_spec_dsc[ptr],
		' ',.report_spec[len],.report_spec[ptr]);
	str$trim(report_spec,report_spec,report_spec);

	! Now let's create the report file and connect it.

	status = $create(fab=report_fab);
	check (.status, anl$_openout,1,report_spec,.status,.report_fab[fab$l_stv]);
	status = $connect(rab=report_rab);
	check (.status, .status);
);

! Now let's save the report heading message and the input file spec for
! a subheading.

report_heading_msg = .heading_msg;
input_file_spec[len] = .input_spec_dsc[len];
ch$copy(.input_spec_dsc[len],.input_spec_dsc[ptr],
	' ',.input_file_spec[len],.input_file_spec[ptr]);

! Now reset the page counter and start a new page.

page_number = 0;
anl$report_page();

return;

end;

%sbttl 'ANL$REPORT_PAGE - Eject Page in Report'
!++
! Functional Description:
!	This routine is called to eject the page in a report and print
!	the heading on the new page.
!
! Formal Parameters:
!	none
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	none
!
! Side Effects:
!
!--


global routine anl$report_page: novalue = begin


! Since we are starting a new page, reset the line counter.

line_counter = lib$lp_lines() - 7;

! If this is an interactive session, don't print any page headings.
! They will really annoy the poor guy.

if .anl$gb_interactive then
	return;

! Eject the page.

anl$report_line(-1,describe(%char(formfeed)));

! Increment the page number for the new page and print the heading lines.

increment (page_number);
anl$format_line(-1,0,.report_heading_msg,0,.page_number);
anl$format_line(-1,0,anl$_anything,input_file_spec);
anl$report_line(-1);
anl$report_line(-1);

return;

end;

%sbttl 'ANL$REPORT_LINE - Print a Line in Report'
!++
! Functional Description:
!	This routine is called to print a line into the report file.
!
! Formal Parameters:
!	widow_control	Controls widowing as follows:
!				positive	specifies number of lines that
!						must remain on the page.
!				zero		doesn't matter how many lines.
!				negative	Force line onto current page.
!	line		Address of descriptor of line.  Optional.
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	none
!
! Side Effects:
!
!--


global routine anl$report_line(widow_control,line): novalue = begin

bind
	line_dsc = .line: descriptor;

local
	status: long;

builtin
	nullparameter;


! If the caller isn't forcing this line onto the page, and there are not
! enough lines left for prevention of widowing, then eject the page.

if (.widow_control geq 0) and
   (.line_counter lss .widow_control) then 
	anl$report_page();

! Print the line if there is one.  Otherwise put out a blank line.

if nullparameter(2) then
	report_rab[rab$w_rsz] = 0
else (
	report_rab[rab$w_rsz] = .line_dsc[len];
	report_rab[rab$l_rbf] = .line_dsc[ptr];
);
status = $put(rab=report_rab);
check (.status, anl$_writeerr,1,report_spec,.status,.report_rab[rab$l_stv]);

! Account for the line on the page.

decrement (line_counter);

return;

end;

%sbttl 'ANL$FORMAT_LINE - Format Line for Report'
!++
! Functional Description:
!	This routine is called to format a line and print it in the
!	report file.
!
! Formal Parameters:
!	widow_control	The number of lines that must be remaining on the
!			current page.
!	indent_level	The number of tab stops to indent the line.
!	template_msg	The status code of the message defining the line
!			template.
!	fao1...		$FAO arguments to fill in the template.
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	none
!
! Side Effects:
!
!--


global routine anl$format_line(widow_control,indent_level,template_msg,fao1): novalue = begin

local
	status: long;


! First we obtain the text of the template message.

begin
local
	local_described_buffer(template_buf,132);

status = $getmsg(msgid=.template_msg,
		 msglen=template_buf,
		 bufadr=template_buf,
		 flags=%b'0001');
check (.status,.status);

! Now we can plug the $FAO arguments into the message template.

begin
local
	local_described_buffer(result_buf,132);

status = $faol(ctrstr=template_buf,
	       outlen=result_buf,
	       outbuf=result_buf,
	       prmlst=fao1);
check (.status,.status);

! Prefix the resulting text with enough tabs to effect the indentation.

ch$move(.result_buf[len],.result_buf[ptr], .result_buf[ptr]+.indent_level);
result_buf[len] = .result_buf[len] + .indent_level;
ch$fill(%char(tab), .indent_level,.result_buf[ptr]);

! Print the line, passing along the widow control number.

anl$report_line(.widow_control,result_buf);

end;
end;

return;

end;

%sbttl 'ANL$FORMAT_ERROR - Put Error Message in Report'
!++
! Functional Description:
!	This routine is called to format an error message into the report
!	file.
!
! Formal Parameters:
!	error_msg	Status code for the error message.
!	fao1...		$FAO substitution parameters for the message.
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	none
!
! Side Effects:
!
!--


global routine anl$format_error(error_msg,fao1,fao2,fao3,fao4): novalue = begin

bind
	flag_string = describe('***  ');

builtin
	actualcount;


! We case on the number of $FAO parameters and call ANL$FORMAT_LINE to
! do the work.  In all cases, however, we add our own first parameter,
! which is the error message flag string.

case actualcount() from 1 to 5 of set
[1]:	anl$format_line(-1,0,.error_msg,flag_string);
[2]:	anl$format_line(-1,0,.error_msg,flag_string,.fao1);
[3]:	anl$format_line(-1,0,.error_msg,flag_string,.fao1,.fao2);
[4]:	anl$format_line(-1,0,.error_msg,flag_string,.fao1,.fao2,.fao3);
[5]:	anl$format_line(-1,0,.error_msg,flag_string,.fao1,.fao2,.fao3,.fao4);
tes;

! Keep track of the number of errors reported.  Also remember if at least
! one error occurs at all.

increment (error_count);
at_least_1_error = true;

return;

end;

%sbttl 'ANL$ERROR_COUNT - Report Count of Errors'
!++
! Functional Description:
!	This routine is called to print a line telling how many errors
!	were discovered during the analysis.
!
! Formal Parameters:
!	none
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	none
!
! Side Effects:
!
!--


global routine anl$error_count: novalue = begin


! First we print the error count in the report.

if .error_count eqlu 0 then
	anl$format_line(0,0,anl$_errornone)
else
	anl$format_line(0,0,anl$_errorcount,.error_count);
anl$report_line(0);
anl$report_line(0);

! If the report is not going to SYS$OUTPUT, we also want to display one line
! for the user at the terminal.  This contains the report heading text and
! the error count.

if ch$neq(.report_spec[len],.report_spec[ptr], 10,uplit byte('SYS$OUTPUT'),' ') then
	signal(anl$_errors,2,input_file_spec,.error_count);

! Now we can reset the error counter for the next file.

error_count = 0;

return;

end;

%sbttl 'ANL$EXIT_WITH_STATUS - Exit to VMS With a Status'
!++
! Functional Description:
!	This routine is called when it's time to exit back to VMS.  We
!	return the appropriate status.  This routine is in this module
!	because the status depends on any errors found.
!
! Formal Parameters:
!	none
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	does not return
!
! Side Effects:
!
!--


global routine anl$exit_with_status = begin


! If at least one error occurred during the analysis, return an error status.
! However, interactive sessions always return success.

if not .anl$gb_interactive and .at_least_1_error then
	$exit(code=anl$_notok or sts$m_inhib_msg)
else
	$exit(code=anl$_ok);

end;

%sbttl 'ANL$FORMAT_HEX - Format Hex Dump of Data'
!++
! Functional Description:
!	This routine is called to format a hex dump of some bytes.
!	It includes the character representation of the bytes also.
!
! Formal Parameters:
!	indent_level	The indentation level at which to place the dump.
!	data		Address of descriptor of data to be dumped.
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	none
!
! Side Effects:
!
!--


global routine anl$format_hex(indent_level,data): novalue = begin

bind
	data_dsc = .data: descriptor,
	data_vector = .data_dsc[ptr]: vector[,byte];

local
	i: long,
	arg_list: vector[20,long],
	count: long;

builtin
	callg;


! If the data is null, just quit.

if .data_dsc[len] eqlu 0 then
	return;

! We begin by printing two heading lines.  The first shows the offsets
! of the bytes and the second is a line of dashes.

anl$format_line(3,.indent_level,anl$_hexheading1);
anl$format_line(0,.indent_level,anl$_hexheading2);

! We will be builing argument lists to ANL$FORMAT_LINE.  It will always
! include widow control, indentation level, and the message code.

arg_list[1] = 0;
arg_list[2] = .indent_level;
arg_list[3] = anl$_hexdata;

! Now we go into a loop, once through for each 8 bytes to be formatted.

i = 0;
while .i lssu .data_dsc[len] do (

	! Calculate the number of bytes that will go on this line.

	count = minu(.data_dsc[len]-.i,8);

	! Next in the argument list we need a count of the spaces to skip
	! so the bytes will be lined up from right to left.

	arg_list[4] = (8 - .count) * 3;

	! Now we need the count itself.

	arg_list[5] = .count;

	! Now we loop through 8 (or less) bytes and put them in the
	! argument list (backwards, of course).

	decr j from .count-1 to 0 do (
		arg_list[6+.j] = .data_vector[.i];
		increment (i);
	);

	! Next we have the byte offset.

	arg_list[6+.count] = .i - .count;

	! Now we have to add to the argument list the byte count and a
	! pointer to the byte string.

	arg_list[7+.count] = .count;
	arg_list[8+.count] = data_vector[.i - .count];

	! Finally, fill in the argument count.

 	arg_list[0] = 8 + .count;
 
	! Now we can print the hex data.

	callg(arg_list,anl$format_line);
);

return;

end;

%sbttl 'ANL$FORMAT_FLAGS - Format Flag Bits'
!++
! Functional Description:
!	This routine is called to format the flags in a byte/word/longword
!	of flags.
!
! Formal Parameters:
!	indent_level	The level at which the introductory message is to
!			be indented.  The flags are indented one more level.
!	intro_msg	The introductory message.
!	flags		The flag bits.
!	flag_def	A longword vector defining the flags.  The zeroth
!			entry specifies the highest-numbered flag.  The
!			remaining longwords contain the address of a counted
!			string giving the name of the flag.  If the flag is
!			undefined, the longword contains zero.
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	none
!
! Side Effects:
!
!--


global routine anl$format_flags(indent_level,intro_msg,flags,flag_def): novalue = begin

bind
	flags_vector = flags: bitvector[],
	flag_def_vector = .flag_def: vector[,long];

local
	i: long;


! Begin by printing the introductory message.

anl$format_line(2,.indent_level,.intro_msg);

! Now we loop through the flags and process each one that is defined.
! We print the flag name, bit number, and current setting.

incru i from 0 to .flag_def_vector[0] do (
	if .flag_def_vector[.i+1] nequ 0 then
		anl$format_line(0,.indent_level+1,anl$_flag,
				.i,.flag_def_vector[.i+1],.flags_vector[.i]);
);

return;

end;

%sbttl 'ANL$FORMAT_DATA_TYPE - Format a Data Type'
!++
! Functional Description:
!	This routine is called to format a nice line for a data type,
!	as defined in the VAX architecture manual.
!
! Formal Parameters:
!	indent_level	The level of indentation for the line.
!	data_type	The data type byte.
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	none
!
! Side Effects:
!
!--


global routine anl$format_data_type(indent_level,data_type): novalue = begin


own
	data_type_table: vector[33,long] initial(
				uplit byte(%ascic 'Z'),
				uplit byte(%ascic 'V'),
				uplit byte(%ascic 'BU'),
				uplit byte(%ascic 'WU'),
				uplit byte(%ascic 'LU'),
				uplit byte(%ascic 'QU'),
				uplit byte(%ascic 'B'),
				uplit byte(%ascic 'W'),
				uplit byte(%ascic 'L'),
				uplit byte(%ascic 'Q'),
				uplit byte(%ascic 'F'),
				uplit byte(%ascic 'D'),
				uplit byte(%ascic 'FC'),
				uplit byte(%ascic 'DC'),
				uplit byte(%ascic 'T'),
				uplit byte(%ascic 'NU'),
				uplit byte(%ascic 'NL'),
				uplit byte(%ascic 'NLO'),
				uplit byte(%ascic 'NR'),
				uplit byte(%ascic 'NRO'),
				uplit byte(%ascic 'NZ'),
				uplit byte(%ascic 'P'),
				uplit byte(%ascic 'ZI'),
				uplit byte(%ascic 'ZEM'),
				uplit byte(%ascic 'DSC'),
				uplit byte(%ascic 'OU'),
				uplit byte(%ascic 'O'),
				uplit byte(%ascic 'G'),
				uplit byte(%ascic 'H'),
				uplit byte(%ascic 'GC'),
				uplit byte(%ascic 'HC'),
				uplit byte(%ascic 'CIT'),
				uplit byte(%ascic 'BPV'));


! If it is a standard data type, print it's name and number.  Otherwise just
! use the number.

anl$format_line(0,.indent_level,anl$_datatype,
		(if .data_type lssu %allocation(data_type_table)/4 then .data_type_table[.data_type]
								   else uplit byte(%ascic '???')),
		.data_type);

return;

end;

%sbttl 'ANL$FORMAT_MASK - Format an Entry Mask'
!++
! Functional Description:
!	This routine is called to format an entry mask word.
!
! Formal Parameters:
!	indent_level	The level of indentation for the mask.
!	mask		The mask itself.
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	none
!
! Side Effects:
!
!--


global routine anl$format_mask(indent_level,mask): novalue = begin

bind
	mask_vector = mask: bitvector[16];

own
	bit_name: vector[16,long] initial(
			'R0,',	'R1,',	'R2,',	'R3,',
			'R4,',	'R5,',	'R6,',	'R7,',
			'R8,',	'R9,',	'R10,',	'R11,',
			'--,',	'--,',	'IV,',	'DV,');

local
	i: long,
	bit_name_len: long;
local
	local_described_buffer(mask_buf,64);


! We are going to scan the entry mask and concatenate together the names
! of the bits that are on.

mask_buf[len] = 0;
incru i from 0 to 15 do (
	if .mask_vector[.i] then (
		bit_name_len = (if .i eqlu 10 or .i eqlu 11 then 4 else 3);
		ch$move(.bit_name_len,bit_name[.i], .mask_buf[ptr]+.mask_buf[len]);
		mask_buf[len] = .mask_buf[len] + .bit_name_len;
	);
);

! If any bits were set in the mask, we will have a spurious trailing comma.
! Get rid of it.

if .mask_buf[len] gtru 0 then
	decrement (mask_buf[len]);

! Now we can print the mask.

anl$format_line(0,.indent_level,anl$_mask,mask_buf);

return;

end;

%sbttl 'ANL$FORMAT_PROTECTION - Format Memory Protection Code'
!++
! Functional Description:
!	This routine is responsible for formatting a 4-bit memory 
! 	protection code in a nice way.
!
! Formal Parameters:
!	indent_level	The level of indentation for the line.
!	prot_code	The 4-bit protection code.
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	none
!
! Side Effects:
!
!--


global routine anl$format_protection(indent_level,prot_code): novalue = begin

own
	prot_code_table: vector[16,long] initial(
			uplit byte (%ascic 'NA'),
			uplit byte (%ascic '???'),
			uplit byte (%ascic 'KW'),
			uplit byte (%ascic 'KR'),
			uplit byte (%ascic 'UW'),
			uplit byte (%ascic 'EW'),
			uplit byte (%ascic 'ERKW'),
			uplit byte (%ascic 'ER'),
			uplit byte (%ascic 'SW'),
			uplit byte (%ascic 'SREW'),
			uplit byte (%ascic 'SRKW'),
			uplit byte (%ascic 'SR'),
			uplit byte (%ascic 'URSW'),
			uplit byte (%ascic 'UREW'),
			uplit byte (%ascic 'URKW'),
			uplit byte (%ascic 'UR'));


! Simply print a line with the protection code.

anl$format_line(0,.indent_level,anl$_protection,.prot_code_table[.prot_code]);

return;

end;

%sbttl 'ANL$FORMAT_SEVERITY - Format Error Severity Code'
!++
! Functional Description:
!	This routine is called to format a standard VMS error severity
!	code.  It also checks to make sure the code is valid.
!
! Formal Parameters:
!	indent_level	Level of indentation for report.
!	severity	The severity code.
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	none
!
! Side Effects:
!
!--


global routine anl$format_severity(indent_level,severity): novalue = begin

own
	severity_code_table: vector[8,long] initial(
				uplit byte(%ascic 'WARNING'),
				uplit byte(%ascic 'SUCCESS'),
				uplit byte(%ascic 'ERROR'),
				uplit byte(%ascic 'INFO'),
				uplit byte(%ascic 'SEVERE'),
				uplit byte(%ascic 'reserved'),
				uplit byte(%ascic 'reserved'),
				uplit byte(%ascic 'reserved'));


! Format a line with the severity code on it.

anl$format_line(0,.indent_level,anl$_severity,.severity_code_table[.severity]);

! Check for a reserved severity.

if .severity gequ 5 then
	anl$format_error(anl$_badseverity,.severity);

return;

end;

%sbttl 'ANL$INTERACT - See If User Wants to Continue'
!++
! Functional Description:
!	This routine is called as part of the processing of the /INTERACTIVE
!	qualifier.  We see if the user wants to continue with this file,
!	or quit.  
!
! Formal Parameters:
!	none
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	True if user wants to continue; false otherwise.
!
! Side Effects:
!
!--


global routine anl$interact = begin

local
	status: long,
	local_described_buffer(answer_buf,1);


! First we display a message telling the user what to do.

anl$format_line(-1,0,anl$_interact);

! Now we get the user's answer.  If it is a period (.), then we return
! false.  If it's blank, we return true.  If CTRL/Z, we just bag it.

status = lib$get_input(answer_buf);
if .status eqlu rms$_eof then
	anl$exit_with_status();
return ch$rchar(.answer_buf[ptr]) nequ '.';

end;

end eludom
