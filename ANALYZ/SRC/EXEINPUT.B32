%title 'EXEINPUT - Handle Image Files & Libraries'
	module exeinput	(
			ident='V03-002') = begin

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! Facility:	VAX/VMS Analyze Facility, Handle Image Files
!
! Abstract:	This module is responsible for handling file specs from
!		the command line, and reading data from image files.
!
!
! Environment:
!
! Author: Paul C. Anagnostopoulos, Creation Date: 31 March 1981
!
! Modified By:
!
!	V03-002	PCA0020		Paul Anagnostopoulos	24-Mar-1982
!		Signal errors using the correct STV value.
!
!	V03-001	PCA0014		Paul Anagnostopoulos	22-Mar-1982
!		Use the resultant spec rather than the wildcard spec
!		when complaining about a file to be analyzed.
!--

%sbttl 'Module Declarations'
!
! Libraries and Requires:
!

library 'starlet';
require 'objexereq';

!
! Table of Contents:
!

forward routine
	anl$open_next_image_file,
	anl$get_image_block,
	anl$map_fixup_section;

!
! External References:
!

external routine
	anl$image_positionals,
	cli$get_value: addressing_mode(general),
	lib$find_file: addressing_mode(general),
	lib$free_vm: addressing_mode(general),
	lib$get_vm: addressing_mode(general),
	str$trim: addressing_mode(general);

!
! Own Variables:
!
! The following data structures are used to access and read records from
! a file we are to analyze.

own
	own_described_buffer(resultant_spec,nam$c_maxrss),

	image_fab: $fab(fac=<bio,get>,
			shr=get),

	image_buffer: block[512,byte],

	image_rab: $rab(fab=image_fab);

%sbttl 'ANL$OPEN_NEXT_IMAGE_FILE - Right'
!++
! Functional Description:
!	This routine is called to open the next image file we are to analyze.
!	It handles multiple file specs and wildcarding.  It does not handle
!	sharable image libraries.
!
! Formal Parameters:
!	opened_spec	Address of descriptor of buffer in which to return
!			the spec of the file we open.  We set the length.
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	True if there is another image file, false otherwise.
!
! Side Effects:
!
!--


global routine anl$open_next_image_file(opened_spec) = begin

bind
	opened_spec_dsc = .opened_spec: descriptor;

own
	own_described_buffer(wildcard_spec,nam$c_maxrss),
	wildcard_context: long initial(0);

local
	status: long;


! If the wildcard context is zero, it means this is the first call, or
! we finished with a file spec on the previous call.  So we must obtain
! the next file spec from the command line.

if .wildcard_context eqlu 0 then (
	wildcard_spec[len] = nam$c_maxrss;
	status = cli$get_value(describe('file_specs'),wildcard_spec);

	! If there are no more specs, we are all done.

	if not .status then
		return false;
	str$trim(wildcard_spec,wildcard_spec,wildcard_spec);

	! Call a routine to process any positional qualifiers for this spec.
	! We don't know how to do that.

	anl$image_positionals();
);

! On the other hand, if the wildcard context is non-zero, we may have just
! finished processing a file.  Better close it.

if .wildcard_context nequ 0 and .image_fab[fab$w_ifi] nequ 0 then (
	status = $close(fab=image_fab);
	check (.status, anl$_closein,1,resultant_spec,.status,.image_fab[fab$l_stv]);
);

! We have obtained a wildcard spec from the file parameter.  We also have
! all the positional qualifiers associated with it.

! Now we need to find the next file that matches the current wildcard spec.

resultant_spec[len] = nam$c_maxrss;
status = lib$find_file(wildcard_spec,resultant_spec,wildcard_context,describe('.EXE'));
str$trim(resultant_spec,resultant_spec,resultant_spec);

! If we failed to find a file, then reset the wildcard context and call
! ourselves recursively to process the next file spec.  Also give an
! error, unless we just plain ran out of files.

if not .status then (
	if .status nequ rms$_nmf then
		signal (anl$_openin,1,resultant_spec,.status);
	wildcard_context = 0;
	return anl$open_next_image_file(opened_spec_dsc);
);

! Hey, we got a file spec.  Open the file and connect the RAB.

image_fab[fab$b_fns] = .resultant_spec[len];
image_fab[fab$l_fna] = .resultant_spec[ptr];
status = $open(fab=image_fab);
check (.status, anl$_openin,1,resultant_spec,.status,.image_fab[fab$l_stv]);
if .status then (
	status = $connect(rab=image_rab);
	check (.status, anl$_openin,1,resultant_spec,.status,.image_rab[rab$l_stv]);
);

! If the open failed, then we need to recurse to try the next file.

if not .status then
	return anl$open_next_image_file(opened_spec_dsc);

! Finally, we have to return the resultant file spec to the caller.

opened_spec_dsc[len] = .resultant_spec[len];
ch$move(.resultant_spec[len],.resultant_spec[ptr], .opened_spec_dsc[ptr]);

return true;

end;

%sbttl 'ANL$GET_IMAGE_BLOCK - Get Block from Image'
!++
! Functional Description:
!	This routine is called to read a block from the current image
!	file, which is assumed to be open.
!
! Formal Parameters:
!	vbn		Virtual block number of desired block.
!	buffer		Address of buffer pointer to fill in with the
!			address of our buffer.
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	RMS status from $read.
!
! Side Effects:
!
!--


global routine anl$get_image_block(vbn,buffer) = begin

bind
	buffer_ptr = .buffer: ref block[,byte];

local
	status: long;


! Read in the desired block to the static buffer.

image_rab[rab$w_usz] = 512;
image_rab[rab$l_ubf] = image_buffer;
image_rab[rab$l_bkt] = .vbn;
status = $read(rab=image_rab);

! Point the caller's pointer at our buffer.  Then return the RMS status.

buffer_ptr = image_buffer;
return .status;

end;

%sbttl 'ANL$MAP_FIXUP_SECTION - Map Fixup Section into Memory'
!++
! Functional Description:
!	This routine is called to map a shareable image's fixup section
!	into memory so we can analyze it.  It is also called to free up
!	the mapping.  We read the section blocks, as opposed to actually
!	mapping the section, so that we can analyze remote images.
!
! Formal Parameters:
!	fixup_size	Number of blocks in fixup section.
!	fixup_vbn	Starting VBN of fixup section.
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	We return the address of the mapped memory, or zero if we couldn't
!	map it.
!
! Side Effects:
!
!--


global routine anl$map_fixup_section(fixup_size,fixup_vbn) = begin

own
	saved_size: long,
	saved_address: long;

local
	status: long;

builtin
	nullparameter;


! If we are called with both parameters, then we must map the fixup
! section into main memory and return its address.

if not nullparameter(1) and not nullparameter(2) then (

	image_rab[rab$w_usz] = saved_size = .fixup_size * 512;
	status = lib$get_vm(saved_size,saved_address);
	check (.status, .status);
	image_rab[rab$l_ubf] = .saved_address;
	image_rab[rab$l_bkt] = .fixup_vbn;

	status = $read(rab=image_rab);
	if not .status or .image_rab[rab$w_usz] nequ .saved_size then (

		! Oops, we couldn't read it in correctly.

		anl$map_fixup_section();
		return 0;
	) else
		return .saved_address;

) else (

	! We are to free up the mapped memory.

	status = lib$free_vm(saved_size,saved_address);
	check (.status, .status);
	return;
);

end;

end eludom
