%title 'RMSCHECKB - Check a File Structure'
	module rmscheckb (
			ident='V03-001') = begin

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! Facility:	VAX/VMS Analyze Facility, Check a File Structure
!
! Abstract:	This module is responsible for checking the structure of
!		an RMS file as requested via /CHECK.  It also prepares a 
!		report of the results.
!
!
! Environment:
!
! Author: Paul C. Anagnostopoulos, Creation Date: 5 August 1981
!
! Modified By:
!
!	V03-001	PCA0062		Paul Anagnostopoulos	29-Mar-1982
!		Fix bug in code that determines when the analysis of
!		indexed file data blocks is complete.  It was skipping
!		some blocks at times.
!--

%sbttl 'Module Declarations'
!
! Libraries and Requires:
!

library 'lib';
require 'rmsreq';

!
! Table of Contents:
!

forward routine
	anl$idx_check: novalue,
	anl$idx_check_key_stuff: novalue;

!
! External References:
!

external routine
	anl$area_descriptor,
	anl$area_statistics,
	anl$bucket,
	anl$2bucket_header,
	anl$3bucket_header,
	anl$condition_handler,
	anl$format_error,
	anl$format_line,
	anl$format_skip,
	anl$idx_prolog,
	anl$2index_record,
	anl$3index_record,
	anl$key_descriptor,
	anl$key_statistics,
	anl$2primary_data_record,
	anl$3primary_data_record,
	anl$prolog_checksums,
	anl$3reclaimed_bucket_header,
	anl$2sidr_record,
	anl$3sidr_record,
	lib$establish: addressing_mode(general);

external
	anl$gb_mode: byte,
	anl$gl_fat: ref block[,byte],
	anl$gw_prolog: word;

!
! Own Variables:
!

%sbttl 'ANL$IDX_CHECK - Check Structure of Indexed File'
!++
! Functional Description:
!	This routine is responsible for checking the structure of an 
!	indexed file, as requested by /CHECK mode.
!
!	It is also responsible for producing the statistics requested
!	by /STATISTICS mode.  This is done as a superset of /CHECK mode,
!	so the structure gets checked while the statistics are done.
!
! Formal Parameters:
!	none
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	none
!
! Side Effects:
!
!--


global routine anl$idx_check: novalue = begin

local
	p: bsd, c: bsd,
	sp: ref block[,byte],
	area_count: long,
	id: long,
	areas_vector: vector[256,byte],
	another: byte;


! Establish the condition handler for drastic structure errors.

lib$establish(anl$condition_handler);

! First we want to check the checksums in the prolog blocks.

anl$prolog_checksums();

! Now we can read in the first prolog block and check the fixed portion
! of the prolog.

init_bsd(p);
p[bsd$w_size] = 1;
p[bsd$l_vbn] = 1;
anl$bucket(p,0);

anl$format_skip(0);
anl$format_skip(0);
anl$idx_prolog(p,true,0);

! Now we will check all of the area descriptors, because they describe the
! basic structure of the file.  Read in the first descriptor.

sp = .p[bsd$l_bufptr];
area_count = .sp[plg$b_amax];
p[bsd$l_vbn] = .sp[plg$b_avbn];
p[bsd$l_offset] = 0;
anl$bucket(p,0);

! Now we will loop through each area descriptor.  As we go, we build up
! the areas vector, which tells us the bucket size for each area.

init_bsd(c);
ch$fill(%x'00', 256,areas_vector);

incru id from 0 to .area_count-1 do (

	! Copy the BSD describing the area descriptor into another one, because
	! the analysis routine will advance to the next descriptor.

	copy_bucket(p,c);

	! Analyze the descriptor for validity.  This will advance the BSD on
	! to the next one, telling us if it exists.

	anl$format_skip(0);
	anl$area_descriptor(p,.id,true,0);

	! Put the bucket size into the areas vector.

	sp = .c[bsd$l_bufptr] + .c[bsd$l_offset];
	areas_vector[.id] = .sp[area$b_arbktsz];

	! Now we will check any reclaimed buckets on the available list.
	! Using the C BSD, get the first bucket and then loop through them.

	if .sp[area$l_avail] nequ 0 then (
		c[bsd$w_size] = .sp[area$b_arbktsz];
		c[bsd$l_vbn] = .sp[area$l_avail];
		anl$bucket(c,0);

		while anl$3reclaimed_bucket_header(c,false) do;
	);

	! If we are operating in statistics mode, we now call a routine
	! to print the statistics that have been accumulated about this
	! area.

	if .anl$gb_mode eqlu anl$k_statistics then
		anl$area_statistics(.id);
);

! Now we are going to analyze the key descriptors.  Begin by setting up a 
! BSD and reading in the first one.

p[bsd$l_vbn] = 1;
p[bsd$l_offset] = 0;
anl$bucket(p,0);

! Now loop through, analyzing each one.

incru id from 0 do (

	! Copy the BSD describing this key into another one, because the
	! analysis routine will advance to the next one.

	copy_bucket(p,c);

	! Analyze the descriptor for validity.  This will advance on to the
	! next one, telling us if there is a next one.

	anl$format_skip(0);
	another = anl$key_descriptor(p,.id,areas_vector,true,0);

	! Now we want to check the complete index and data structure for
	! this key.  We can skip it if the index is uninitialized.

	sp = .c[bsd$l_bufptr] + .c[bsd$l_offset];
	if not .sp[key$v_initidx] then
		anl$idx_check_key_stuff(.sp[key$l_rootvbn],c,.sp[key$b_rootlev]);

	! If we are operating in statistics mode, we now call a routine
	! to print the statistics that have been accumulated about this
	! key.

	if .anl$gb_mode eqlu anl$k_statistics then
		anl$key_statistics(c);

	! If that was the last key descriptor, we're done.

exitif (not .another);
);

anl$bucket(p,-1);
anl$bucket(c,-1);

return;

end;

%sbttl 'ANL$IDX_CHECK_KEY_STUFF - Check Structure of Index & Data'
!++
! Functional Description:
!	This routine is called to check the structure of the index and
!	data buckets for a key.  It scans the index entries and data
!	records in order, checking for structural flaws.
!
!	It is a requirement of this routine that it visit each bucket
!	exactly once.  This is because the routine is also used to collect
!	statistics about the key.
!
! Formal Parameters:
!	vbn		The VBN of the index bucket to be checked.  On first
!			call, this is the root bucket.  On recursions, it is
!			some lower-level index bucket.
!	key_bsd		Address of BSD for the key descriptor.
!	level		The alleged level of this index bucket.
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	none
!
! Side Effects:
!
!--


global routine anl$idx_check_key_stuff(vbn,key_bsd,level): novalue = begin

bind
	prolog_3 = .anl$gw_prolog eqlu plg$c_ver_3,
	k = .key_bsd: bsd;

own
	bucket_count: signed long,
	d: bsd;

local
	kp: ref block[,byte],
	hp: ref block[,byte],
	rp: ref block[,byte],
	vp: ref block[,byte],
	b: bsd,
	another_record: byte,
	down_vbn: long;


! We will be referencing the key descriptor throughout this routine.

kp = .k[bsd$l_bufptr] + .k[bsd$l_offset];

! We have to do some initialization based upon whether this is the root
! bucket or not (i.e., on the first call).

if .level eqlu .kp[key$b_rootlev] then (

	! We want to detect loops in the bucket structure.  To do this,
	! we will initialize a counter to the maximum possible number
	! of buckets that can appear for this key.  If the count ever
	! goes to zero as we read a bucket, we're in trouble.

	bucket_count = 		.anl$gl_fat[fat$l_hiblk] / 
			minu(.kp[key$b_idxbktsz],.kp[key$b_datbktsz]);

	! We will be scanning all of the data buckets for this key when
	! we get down to the lowest-level index buckets.  Let's build a
	! BSD for scanning these buckets now, and leave it around during
	! all recursive calls.

	init_bsd(d);
	d[bsd$w_size] = .kp[key$b_datbktsz];
	d[bsd$l_vbn] = .kp[key$l_ldvbn];
	anl$bucket(d,.k[bsd$l_vbn]);

);

! Begin by setting up a BSD for the index bucket we are to check.  Read in
! the bucket and set up a pointer to the header.

init_bsd(b);
b[bsd$w_size] = .kp[key$b_idxbktsz];
b[bsd$l_vbn] = .vbn;
anl$bucket(b,0);
hp = .b[bsd$l_bufptr];

! Decrement the count of possible buckets.  If it goes to zero, then
! there is a loop in the index structure.

if decrement(bucket_count) lss 0 then (
	anl$format_error(anl$_bktloop,.vbn,.kp[key$b_keyref]);
	signal (anl$_unwind);
);

! Now we want to check the integrity of the bucket header.  The routine
! we call will update the BSD to describe the next bucket in the chain.
! We don't want this, so we use a copy of the BSD.

begin
local
	h: bsd;

init_bsd(h);
copy_bucket(b,h);
if prolog_3 then
	anl$3bucket_header(h,.kp[key$b_keyref],.kp[key$v_dupkeys],.level,false)
else
	anl$2bucket_header(h,(if .level eqlu 1 then .kp[key$b_lanum]
					       else .kp[key$b_ianum]),.level,false);
anl$bucket(h,-1);
end;

! Now we can check the root bucket bit in the header to make sure it is
! correct.  If not, we better just forget it.

if .level eqlu .kp[key$b_rootlev] xor .hp[bkt$v_rootbkt] then (
	anl$format_error(anl$_badbktrootbit,.b[bsd$l_vbn]);
	signal (anl$_unwind);
);


! We are ready to scan the index records in this bucket.  Set up the
! BSD to point at the first one.  The work longword will count them as
! we go.

b[bsd$l_offset] = bkt$c_overhdsz;
b[bsd$l_work] = 0;

do (

	! Save a pointer to the index record to be checked on this iteration.
	! In the case of prolog 3, we also need a pointer to the VBN in the
	! VBN list at the end of the bucket.

	rp = .b[bsd$l_bufptr] + .b[bsd$l_offset];
	if prolog_3 then
		vp = (.b[bsd$l_endptr]-4) - (.b[bsd$l_work]+1) * (.hp[bkt$v_ptr_sz]+2);

	! Now we call a routine to analyze the index record, which will
	! cause the BSD to be updated to the next record.  A flag is returned
	! to tell us if there is another record.

	another_record = (if prolog_3 then anl$3index_record
				      else anl$2index_record) (b,k,false);

	! We need to extract the bucket pointer from this index record.
	! We also want RP to point at the actual key, which is already
	! the case for prolog 3.

	if prolog_3 then
		down_vbn =	(case .hp[bkt$v_ptr_sz] from 0 to 2 of set
				[0]:	.vp[0,0,16,0];
				[1]:	.vp[0,0,24,0];
				[2]:	.vp[0,0,32,0];
				tes)

	else (
		down_vbn =	(case .rp[irc$v_ptrsz] from 0 to 2 of set
				[0]:	.rp[1,0,16,0];
				[1]:	.rp[1,0,24,0];
				[2]:	.rp[1,0,32,0];
				tes);
		rp = .rp + .rp[irc$v_ptrsz] + 3;
	);

	! Now we want to analyze the bucket that the bucket pointer
	! referenced.

	if .level gequ 2 then

		! It references another index bucket.  Recurse to check it,
		! passing the address of what should be its last key.

		anl$idx_check_key_stuff(.down_vbn,k,.level-1,.rp)

	else (

		! It references a data bucket.  We want to read the data
		! bucket and check it.  However, it is possible that some
		! data buckets exist between the last one we checked
		! and this new one (for example, if a bunch of SIDR duplicates
		! take more than one bucket to store).  So let's read and
		! check all buckets up to and including this new one.

		bind
			highest_key = .level eqlu 1 and
				      .hp[bkt$v_lastbkt] and
				      not .another_record	: byte;
		local
			r: bsd,
			another_bucket: byte;


		! Now we go into a loop, once through for each bucket we
		! want to check.

		init_bsd(r);

		loop (

			local
				hp: ref block[,byte];

			! We want to check the header of the bucket.  This
			! will update the BSD to describe the next bucket.
			! Make a copy of the BSD before so we can get at
			! the bucket contents below.

			copy_bucket(d,r);
			another_bucket = (if prolog_3 then
						anl$3bucket_header(d,.kp[key$b_keyref],
							           .kp[key$v_dupkeys],0,false)
					 else
						anl$2bucket_header(d,.kp[key$b_danum],0,false));

			! Now we want to loop through the data records in the
			! bucket, if there are any.  Set up the BSD for the 
			! first one.  Then loop for each record, allowing the 
			! analysis routine to update the BSD.

			hp = .r[bsd$l_bufptr];
			if .hp[bkt$w_freespace] gtru bkt$c_overhdsz then (
				r[bsd$l_offset] = bkt$c_overhdsz;

				while ((if prolog_3 then
						if .kp[key$b_keyref] eqlu 0 then
							anl$3primary_data_record
						else
							anl$3sidr_record
					else
						if .kp[key$b_keyref] eqlu 0 then
							anl$2primary_data_record
						else
							anl$2sidr_record) (r,k,false)) do;
			);

			! Decrement the count of possible buckets.  If it 
			! goes to zero, then there is a loop in the data
			! bucket structure.

			if decrement(bucket_count) lss 0 then (
				anl$format_error(anl$_bktloop,.r[bsd$l_vbn],.kp[key$b_keyref]);
				signal (anl$_unwind);
			);

			! The following absurdity determines when we are
			! done checking data buckets on this iteration.
			! If we're at the highest key in the index, we check
			! all remaining buckets.  If not, then we check
			! buckets until we "catch up" to the index entry.

			if highest_key then (
				exitif(not .another_bucket);
			) else
				if .r[bsd$l_vbn] eqlu .down_vbn then (
					exitloop;
				) else
					if not .another_bucket then (
						anl$format_error(anl$_missingbkt,.b[bsd$l_vbn],.down_vbn);
						signal (anl$_unwind);
					);

		);

		anl$bucket(r,-1);
	);

	! Continue on to the next index record.

) while .another_record;

! Free up bucket buffers.

anl$bucket(b,-1);
if .level eqlu .kp[key$b_rootlev] then
	anl$bucket(d,-1);

return;

end;

end eludom
