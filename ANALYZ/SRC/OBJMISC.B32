%title 'OBJMISC - Analyze Miscellaneous Object Records'
	module objmisc	(
			ident='V03-000') = begin

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! Facility:	VAX/VMS Analyze Facility, Analyze Miscellaneous Object Records
!
! Abstract:	This module is responsible for analyzing the following object
!		record types:
!			EOM	End-of-Module Records
!			HDR	Header Records
!			LNK	Link Option Records
!				and also reserved record types
!
!
! Environment:
!
! Author: Paul C. Anagnostopoulos, Creation Date: 13 January 1981, my birthday!
!
! Modified By:
!
! , : Version
! 01 -
!--

%sbttl 'Module Declarations'
!
! Libraries and Requires:
!

library 'starlet';
require 'objexereq';

!
! Table of Contents:
!

forward routine
	anl$object_eom: novalue,
	anl$object_hdr: novalue,
	anl$object_hdr_mhd: novalue,
	anl$object_record_size: novalue,
	anl$object_hdr_text: novalue,
	anl$object_hdr_mtc: novalue,
	anl$object_lnk: novalue;

!
! External References:
!

external routine
	anl$check_flags,
	anl$check_symbol,
	anl$check_when,
	anl$format_error,
	anl$format_flags,
	anl$format_hex,
	anl$format_line,
	anl$object_env_check,
	anl$object_psect_check,
	anl$object_psect_ref,
	anl$object_record_line,
	anl$object_tir_clean,
	anl$report_line;

!
! Own Variables:
!
! The following variable is used to remember the record size from
! the module header.

own
	mhd_record_size: long initial(obj$c_maxrecsiz);

%sbttl 'ANL$OBJECT_EOM - Analyze EOM and EOMW Records'
!++
! Functional Description:
!	This routine analyzes end of module records, of which there are
!	two flavors.
!
! Formal Parameters:
!	record_number	Number of this object record.
!	the_record	Address of descriptor of the record.
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	none
!
! Side Effects:
!
!--


global routine anl$object_eom(record_number,the_record): novalue = begin

bind
	record_dsc = .the_record: descriptor;

own
	transfer_flags_def: vector[2,long] initial(
				0,
				uplit byte (%ascic 'EOM$V_WKTFR')
				);

local
	status: long,
	scanp: ref block[,byte],
	fit_ok: byte;

builtin
	nullparameter;


! If we are called with no arguments, it means that we reached the end of
! an object file and were missing an end-of-module record.  In this case,
! we are to "force" and end-of-module.  Skip all the record analysis stuff.

if not nullparameter(1) then (

! First we print a major line for the record.  We won't indent this code
! because it is so long.

scanp = .record_dsc[ptr];
anl$object_record_line((if .scanp[obj$b_rectyp] eqlu obj$c_eom then anl$_objeomrec
							       else anl$_objeomwrec),
			.record_number,record_dsc);
anl$report_line(0);

! Now we make sure the severity is present and print it.

fit_ok = true;

ensure_field_fit(eom$b_comcod,record_dsc);
if .fit_ok then (
	anl$format_line(0,1,	(selectoneu .scanp[eom$b_comcod] of set
				[eom$c_success]:	anl$_objeomsevsuc;
				[eom$c_warning]:	anl$_objeomsevwrn;
				[eom$c_error]:		anl$_objeomseverr;
				[eom$c_abort]:		anl$_objeomsevabt;
				[4 to 10]:		anl$_objeomsevres;
				[otherwise]:		anl$_objeomsevign;
				tes),
				.scanp[eom$b_comcod]);
	if .scanp[eom$b_comcod] gequ 4 and .scanp[eom$b_comcod] lequ 10 then
		anl$format_error(anl$_objeombadsev);
);

! Now we are done if that is the end of the record.

if .record_dsc[len] gtru 2 then (

	! I guess we have a transfer address.  First there is a psect number,
	! which is either a byte or word depending on the record type.  Be sure
	! to record the reference.

	if .scanp[obj$b_rectyp] eqlu obj$c_eom then (
		ensure_field_fit(eom$b_psindx,record_dsc);
		if .fit_ok then (
			anl$format_line(0,1,anl$_objpsect,.scanp[eom$b_psindx]);
			anl$object_psect_ref(.scanp[eom$b_psindx]);
			scanp = scanp[eom$l_tfradr];
		);

	) else (

		ensure_field_fit(eomw$w_psindx,record_dsc);
		if .fit_ok then (
			anl$format_line(0,1,anl$_objpsect,.scanp[eomw$w_psindx]);
			anl$object_psect_ref(.scanp[eomw$w_psindx]);
			scanp = scanp[eomw$l_tfradr];
		);
	);

	! Now we have the transfer offset itself.  Print it.

	ensure_field_fit(0,0,32,0,record_dsc);
	if .fit_ok then (
		anl$format_line(0,1,anl$_objvalue,.scanp[0,0,32,0]);
		if .scanp[0,0,32,0] gtru %x'3fffffff' then
			anl$format_error(anl$_objp0space);
		scanp = .scanp + 4;
	);

	! Again, the record may end at this point.  If so, we are done.

	if .record_dsc[ptr]+.record_dsc[len] gtru .scanp then (

		! OK, so there must be the transfer flags byte.
		! Print it and check it.

		anl$format_flags(1,anl$_objeomflags,.scanp[0,0,8,0],transfer_flags_def);
		anl$check_flags(.scanp[0,0,8,0],transfer_flags_def);
		increment (scanp);

		! We must ensure that there are no spurious bytes at the end.

		if .record_dsc[ptr]+.record_dsc[len] gtru .scanp then
			anl$format_error(anl$_extrabytes);
	);
);
);

! The following code is necessary to check for module-wide errors and to
! clean up after the module.

! We have to check for various TIR errors and let it clean up.

anl$object_tir_clean();

! We have to check to see that no psect reference errors occurred.
! We also have to do the same for environments.

anl$object_psect_check();
anl$object_env_check();

! Finally, we reset the maximum record size for the next module.

mhd_record_size = obj$c_maxrecsiz;

return;

end;


%sbttl 'ANL$OBJECT_HDR - Analyze Object Header Records'
!++
! Functional Description:
!	This routine is called to analyze header records from object files.
!
! Formal Parameters:
!	record_number	The record number of this header record.
!	the_record	The address of the descriptor of this record.
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	none
!
! Side Effects:
!
!--


global routine anl$object_hdr(record_number,the_record): novalue = begin

bind
	record_dsc = .the_record: descriptor;

local
	status: long,
	scanp: ref block[,byte],
	fit_ok: byte;


! Decide what to do based on the header type.  If there isn't one, forget it.

scanp = .record_dsc[ptr];
fit_ok = true;
ensure_field_fit(obj$b_subtyp,record_dsc);
if not .fit_ok then
	return;

selectoneu .scanp[obj$b_subtyp] of set
[obj$c_hdr_mhd]:	anl$object_hdr_mhd(.record_number,record_dsc);

[obj$c_hdr_lnm,
 obj$c_hdr_src,
 obj$c_hdr_ttl,
 obj$c_hdr_cpr,
 obj$c_hdr_gtx]:	anl$object_hdr_text(.record_number,record_dsc);

[obj$c_hdr_mtc]:	anl$object_hdr_mtc(.record_number,record_dsc);

[mhd$c_maxhdrtyp+1
 to 100]:		(anl$format_error(anl$_objhdrres,.record_number,.scanp[obj$b_subtyp]);
			anl$report_line(0);
			anl$format_hex(1,record_dsc););

[101 to 255]:		(anl$format_line(0,0,anl$_objhdrignrec,.record_number,
					.scanp[obj$b_subtyp],.record_dsc[len]);
			anl$report_line(0);
			anl$format_hex(1,record_dsc););
tes;

return;

end;

%sbttl 'ANL$OBJECT_HDR_MHD - Analyze Module Header Record'
!++
! Functional Description:
!	This routine is called to analyze the module header record.
!
! Formal Parameters:
!	record_number	The number of this record in the object file.
!	the_record	The address of the descriptor of the record.
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	none
!
! Side Effects:
!
!--


global routine anl$object_hdr_mhd(record_number,the_record): novalue = begin

bind
	record_dsc = .the_record: descriptor;

local
	status: long,
	scanp: ref block[,byte],
	fit_ok: byte,
	work_dsc: descriptor;


! We begin by printing a record line for this module header.

anl$object_record_line(anl$_objmhdrec,.record_number,record_dsc);
anl$report_line(0);

! Now we print the structure level and make sure it is valid.

scanp = .record_dsc[ptr];
fit_ok = true;
ensure_field_fit(mhd$b_strlvl,record_dsc);
if .fit_ok then (
	anl$format_line(0,1,anl$_objmhdstrlvl,.scanp[mhd$b_strlvl]);
	if .scanp[mhd$b_strlvl] gtru obj$c_strlvl then
		anl$format_error(anl$_objmhdbadstrlvl,obj$c_strlvl);
);

! Now we print the maximum record size and make sure it's valid.  We also
! save it for future use.

ensure_field_fit(mhd$w_recsiz,record_dsc);
if .fit_ok then (
	anl$format_line(0,1,anl$_objmhdrecsiz,.scanp[mhd$w_recsiz]);
	if .scanp[mhd$w_recsiz] gtru obj$c_maxrecsiz then
		anl$format_error(anl$_objmhdbadrecsiz,obj$c_maxrecsiz);
	mhd_record_size = .scanp[mhd$w_recsiz];
);

! Now we print the module name and make sure it's valid.

ensure_ascic_fit(mhd$b_namlng,record_dsc,work_dsc);
if .fit_ok then (
	anl$format_line(0,1,anl$_objmhdname,.work_dsc[len],.work_dsc[ptr]);
	anl$check_symbol(work_dsc);
	scanp = .work_dsc[ptr] + .work_dsc[len];
);

! Now we print the module version and make sure it's valid.

ensure_ascic_fit(0,0,8,0,record_dsc,work_dsc);
if .fit_ok then (
	anl$format_line(0,1,anl$_objmhdversion,.work_dsc[len],.work_dsc[ptr]);
	if (.work_dsc[len] lssu 1) or (.work_dsc[len] gtru obj$c_symsiz) then
		anl$format_error(anl$_badsymlen,obj$c_symsiz);
	scanp = .work_dsc[ptr] + .work_dsc[len];
);

! Now we print the creation date/time and make sure it's valid.

ensure_field_fit(0,0,17*8,0,record_dsc);
if .fit_ok then (
	build_descriptor(work_dsc,17,.scanp);
	anl$format_line(0,1,anl$_objmhdcreate,work_dsc);
	anl$check_when(work_dsc);
	scanp = .scanp + 17;
);

! Now we print the last patch date/time and make sure it's valid.  It can
! be blank or contain a date.

ensure_field_fit(0,0,17*8,0,record_dsc);
if .fit_ok then (
	build_descriptor(work_dsc,17,.scanp);
	anl$format_line(0,1,anl$_objmhdpatch,work_dsc);
	if ch$neq(17,.scanp, 0,0,' ') then
		anl$check_when(work_dsc);
	scanp = .scanp + 17;
);

! Finally, we ensure that there are no spurious bytes at the end.

if .record_dsc[ptr]+.record_dsc[len] gtru .scanp then
	anl$format_error(anl$_extrabytes);
				  
return;

end;

%sbttl 'ANL$OBJECT_RECORD_SIZE - Check Object Record Size'
!++
! Functional Description:
!	This little routine is called to check the size of an object record
!	against the maximum size specified in the module header.  We assume
!	the maximum size has been retrieved by now.
!
! Formal Parameters:
!	size		Size of the object record to check.
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	none
!
! Side Effects:
!
!--


global routine anl$object_record_size(size): novalue = begin


! Just check the size and print an error message if too large.

if .size gtru .mhd_record_size then
	anl$format_error(anl$_objrectoobig,.mhd_record_size);

return;

end;

%sbttl 'ANL$OBJECT_HDR_TEXT - Analyze Text Header Records'
!++
! Functional Description:
!	This routine is called to analye the header records that just 
!	contain text.
!
! Formal Parameters:
!	record_number	Number of this object record.
!	the_record	Address of a descriptor of the record.
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	none
!
! Side Effects:
!
!--


global routine anl$object_hdr_text(record_number,the_record): novalue = begin

bind
	record_dsc = .the_record: descriptor;

own
	record_msg: vector[7,long] initial(
					0,
					anl$_objlnmrec,
					anl$_objsrcrec,
					anl$_objttlrec,
					anl$_objcprrec,
					0,
					anl$_objgtxrec);
local
	scanp: ref block[,byte],
	work_dsc: descriptor;


! First we print the main record line for this text record.

scanp = .record_dsc[ptr];
anl$object_record_line(.record_msg[.scanp[obj$b_subtyp]],.record_number,record_dsc);
anl$report_line(0);

! Now we format the textual information into lines, with as many characters
! per line as possible.  SCANP will act as the text pointer.

anl$format_line(0,1,anl$_texthdr);
scanp = .scanp + 2;
while .scanp lssa (.record_dsc[ptr]+.record_dsc[len]) do (
	
	! Build a descriptor for this line of text.

	build_descriptor(work_dsc,minu(.record_dsc[ptr]+.record_dsc[len]-.scanp,65),.scanp);

	! Print the text.

	anl$format_line(0,1,anl$_text,.work_dsc[len],.work_dsc[ptr]);

	! Update the text pointer.

	scanp = .scanp + .work_dsc[len];
);

return;

end;

%sbttl 'ANL$OBJECT_HDR_MTC - Analyze Maintenance Header Records'
!++
! Functional Description:
!	This routine is called to analyze maintenance header records.
!
! Formal Parameters:
!	record_number	The number of this record in the object file.
!	the_record	The address of the descriptor of the record.
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	none
!
! Side Effects:
!
!--


global routine anl$object_hdr_mtc(record_number,the_record): novalue = begin

bind
	record_dsc = .the_record: descriptor;

local
	status: long,
	scanp: ref block[,byte],
	fit_ok: byte,
	work_dsc: descriptor;


! We begin by printing a record line for this maintenance record.

anl$object_record_line(anl$_objmtcrec,.record_number,record_dsc);
anl$report_line(0);

! Now we print the patch utility name.

scanp = .record_dsc[ptr];
fit_ok = true;
ensure_ascic_fit(0,0,8,0,record_dsc,work_dsc);
if .fit_ok then (
	anl$format_line(0,1,anl$_objmtcname,.work_dsc[len],.work_dsc[ptr]);
	scanp = .work_dsc[ptr] + .work_dsc[len];
);

! Next we print the patch utility version.

ensure_ascic_fit(0,0,8,0,record_dsc,work_dsc);
if .fit_ok then (
	anl$format_line(0,1,anl$_objmtcversion,.work_dsc[len],.work_dsc[ptr]);
	scanp = .work_dsc[ptr] - .work_dsc[len];
);

! Now the UIC of the stupid patch person (WHY NOT JUST RECOMPILE?).

ensure_field_fit(0,0,16,0,record_dsc);
if .fit_ok then (
	anl$format_line(0,1,anl$_objmtcuic,.scanp[0,0,8,0],.scanp[1,0,8,0]);
	scanp = .scanp + 2;
);

! Now the input file specification.

ensure_ascic_fit(0,0,8,0,record_dsc,work_dsc);
if .fit_ok then (
	anl$format_line(0,1,anl$_objmtcinput,.work_dsc[len],.work_dsc[ptr]);
	scanp = .work_dsc[ptr] + .work_dsc[len];
);

! Now the correction file specification.

ensure_ascic_fit(0,0,8,0,record_dsc,work_dsc);
if .fit_ok then (
	anl$format_line(0,1,anl$_objmtccorrect,.work_dsc[len],.work_dsc[ptr]);
	scanp = .work_dsc[ptr] + .work_dsc[len];
);

! Now the date and time of patching.

ensure_field_fit(0,0,17*8,0,record_dsc);
if .fit_ok then (
	build_descriptor(work_dsc,17,.scanp);
	anl$format_line(0,1,anl$_objmtcwhen,work_dsc);
	anl$check_when(work_dsc);
	scanp = .scanp + 17;
);

! Last, and hopefully least, the sequence number.

ensure_field_fit(0,0,8,0,record_dsc);
if .fit_ok then (
	anl$format_line(0,1,anl$_objmtcseqnum,.scanp[0,0,8,0]);
	increment (scanp);
);

! Finally, we ensure that there are no spurious bytes at the end.

if .record_dsc[ptr]+.record_dsc[len] gtru .scanp then
	anl$format_error(anl$_extrabytes);
				  
return;

end;


%sbttl 'ANL$OBJECT_LNK - Analyze LNK Record'
!++
! Functional Description:
!	This routine analyzes the LNK record, with link option specifications.
!	Currently this is ignored by the linker, so we will just dump it in
!	hex for the guy.
!
! Formal Parameters:
!	record_number	The number of this object record.
!	the_record	Address of descriptor of record.
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	none
!
! Side Effects:
!
!--


global routine anl$object_lnk(record_number,the_record): novalue = begin

bind
	record_dsc = .the_record: descriptor;


! First we print a major line for the record.

anl$object_record_line(anl$_objlnkrec,.record_number,record_dsc);
anl$report_line(0);

! Now we just dump the contents in hex.

anl$format_hex(1,record_dsc);

return;

end;

end eludom
