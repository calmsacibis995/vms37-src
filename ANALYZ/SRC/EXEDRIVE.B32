%title 'EXEDRIVE - Drive Analysis of Image Files'
	module exedrive	(
			ident='V03-000') = begin

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! Facility:	VAX/VMS Analyze Facility, Image File Analyzer
!
! Abstract:	This module is the main control for the analysis of image
!		files.
!
!
! Environment:
!
! Author: Paul C. Anagnostopoulos, Creation Date: 31 March 1981
!
! Modified By:
!
! , : Version
! 01 -
!--

%sbttl 'Module Declarations'
!
! Libraries and Requires:
!

library 'starlet';
require 'objexereq';

!
! Table of Contents:
!

forward routine
	anl$image: novalue,
	anl$image_positionals: novalue,
	anl$image2: novalue;

!
! External References:
!

external routine
	anl$error_count,
	anl$format_error,
	anl$format_hex,
	anl$format_line,
	anl$image_fixup_info,
	anl$image_gst,
	anl$image_header,
	anl$image_patch_text,
	anl$open_next_image_file,
	anl$prepare_report_file,
	anl$report_line,
	anl$report_page,
	cli$get_value: addressing_mode(general),
	cli$present: addressing_mode(general),
	str$trim: addressing_mode(general);

external
	anl$gb_interactive: byte;

!
! Own Variables:
!
! The following variables contain various positional qualifier values.

own
	fixup_section_flag: byte,
	gst_flag: byte,
	patch_text_flag: byte;

%sbttl 'ANL$IMAGE - Control Analysis of Image Files'
!++
! Functional Description:
!	This routine is responsible for controlling the analysis of image
!	files.
!
! Formal Parameters:
!	none
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	none
!
! Side Effects:
!
!--


global routine anl$image: novalue = begin

own
	own_described_buffer(report_file_spec,nam$c_maxrss);

local
	status: long;


! Get the global qualifiers that can be specified for ANALYZE/OBJECT.
! The first one is the /INTERACTIVE qualifier.

anl$gb_interactive = cli$present(describe('INTERACTIVE'));

! The second one is the /OUTPUT qualifier, specifying the report file
! spec.  However, if this is an interactive session, we will use SYS$OUTPUT.

if .anl$gb_interactive then
	ch$copy(10,uplit byte ('SYS$OUTPUT'),
		' ',.report_file_spec[len],.report_file_spec[ptr])
else
	cli$get_value(describe('OUTPUT'),report_file_spec);

! We go into a loop, once through for each image file.

loop (
	local
		local_described_buffer(resultant_file_spec,nam$c_maxrss);

	status = anl$open_next_image_file(resultant_file_spec);

exitif (not .status);

	! Prepare the file to receive the image analysis report.

	anl$prepare_report_file(report_file_spec,resultant_file_spec,anl$_exeheading);

	! Analyze the image file.

	anl$image2();
);

return;

end;

%sbttl 'ANL$IMAGE_POSITIONALS - Process Positional Qualifiers'
!++
! Functional Description:
!	This routine is called by the EXEINPUT module whenever it scans
!	off the next file spec from the command line.  We need to process
!	positional qualifiers.
!
! Formal Parameters:
!	none
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	none
!
! Side Effects:
!
!--


global routine anl$image_positionals: novalue = begin

local
	all_portions: byte;


! We process the qualifiers that specify which portions of the image are
! to be analyzed.  If none are specified, we analyze everything.  If any are
! specified, we analyze only those specified.

all_portions = not cli$present(describe('FIXUP_SECTION')) and
	       not cli$present(describe('GST')) and
	       not cli$present(describe('HEADER')) and
	       not cli$present(describe('PATCH_TEXT'));

fixup_section_flag = .all_portions or cli$present(describe('FIXUP_SECTION'));
gst_flag = .all_portions or cli$present(describe('GST'));
patch_text_flag = .all_portions or cli$present(describe('PATCH_TEXT'));

return;

end;

%sbttl 'ANL$IMAGE2: Produce Analysis of One Image'
!++
! Functional Description:
!	This routine is responsible for producing the analysis report for
!	one image.
!
! Formal Parameters:
!	none
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	none
!
! Side Effects:
!
!--


global routine anl$image2: novalue = begin

local
	hp: ref block[,byte],
	continue: long,
	image_base: long, fixup_size: long, fixup_vbn: long;


! As we analyze each portion of the image, we get a return status that tells
! us whether or not to continue (false if interactive and user says quit).
! We always analyze the image header.
! The header analysis routine will return info about the starting address
! of the image and its fixup section.

continue = anl$image_header(image_base,fixup_size,fixup_vbn);

! Now if the user wants us to print the patch text, let's do it.

if .continue and .patch_text_flag then
	continue = anl$image_patch_text();

! Now if the user wants us to analyze the global symbol table, let's do it.

if .continue and .gst_flag then
	continue = anl$image_gst();

! If the user wants us to analyze the fixup section, do it.

if .continue and .fixup_section_flag then
	continue = anl$image_fixup_info(.image_base,.fixup_size,.fixup_vbn);

! Tell the user how many errors were uncovered.

anl$report_line(-1);
anl$report_line(-1);
anl$report_line(-1);
anl$error_count();

! Finally, print the command line that was used to generate the report.

begin
local
	local_described_buffer(command_line,80);

cli$get_value(describe('$LINE'),command_line);
anl$format_line(0,0,anl$_anything,command_line);
end;

return;

end;

end eludom
