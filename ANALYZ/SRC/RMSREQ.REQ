!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! Facility:	VAX/VMS Analyze Command, BLISS Require File for /RMS_FILE
!
! Abstract:	This is the BLISS require file for the ANALYZE/RMS_FILE
!		facility.  It includes various useful constructs and the
!		definitions of all control blocks used by the facility.
!
!
! Environment:
!
! Author: Paul C. Anagnostopoulos, Creation Date: 12 February 1981
!
! Modified By:
!
! , : Version
! 01 -
!--

!
! Here we will define "extensions" to the BLISS language.
!
! First we need values for boolean variables.

literal
	false		= 0,
	true		= 1;

! Now we will define macros to generate various things associated with
! string descriptors.

field descriptor_fields = set
	len	= [0,0,16,0],
	ptr	= [4,0,32,0]
tes;

macro descriptor =
	block[8,byte] field(descriptor_fields) %;

macro describe[] =
	uplit long(%charcount(%remaining), uplit byte(%remaining)) %;

macro build_descriptor(name,length,address) =
	(name[0,0,32,0] = length;
	name[ptr] = address;)
%;

! Now we define two macros that can generate descripted buffers.  The
! first is for OWN buffers and the second for LOCAL buffers.  Note that
! the local buffer must be defined last in the declarations.

macro own_described_buffer(name,length) =
	name: block[8+length,byte] field(descriptor_fields)
				   initial(length,name+8)
%;

macro local_described_buffer(name,length) =
	name: block[8+length,byte] field(descriptor_fields);
	name[0,0,32,0] = length;
	name[ptr] = name+8
%;

! Now we define macros to increment and decrement a variable.

macro increment (var) =
	(var = .var + 1) %,
      decrement (var) =
	(var = .var - 1) %;

! We need an "infinite" loop contruct.  We also need a more elegant construct
! for terminating a loop.

macro loop =
	while 1 do %;

macro exitif[] =
	if %remaining then exitloop %;

! Define a macro that can check statuses from routines.

macro check(status)[] =
	(if not status then 
		signal(%remaining);)
%;


! Define literals for useful control characters.

literal
	bell		= %x'07',
	backspace	= %x'08',
	tab		= %x'09',
	linefeed	= %x'0a',
	formfeed	= %x'0c',
	creturn		= %x'0d',
	ctrl_u		= %x'15',
	ctrl_w		= %x'17',
	ctrl_z		= %x'1a',
	escape		= %x'1b',
	delete		= %x'7f';

! The following literals identify the various modes we can be in.
! Some routines require knowledge of the mode in order to operate correctly.

literal
	anl$k_check		= 1,	! ANALYZE/RMS_FILE/CHECK
	anl$k_fdl		= 2,	! ANALYZE/RMS_FILE/FDL
	anl$k_interactive	= 3,	! ANALYZE/RMS_FILE/INTERACTIVE
	anl$k_statistics	= 4;	! ANALYZE/RMS_FILE/STATISTICS

! The following macro is used by the low-level structure analysis routines
! to call the statistics callback routines.  See module RMSSTATS.

macro statistics_callback[] =
	if .anl$gb_mode eqlu anl$k_fdl or .anl$gb_mode eqlu anl$k_statistics then (
		%remaining
	)
%;

! The following data structure is called a Bucket Structure Descriptor.
! It contains all the information necessary to identify a particular
! data structure within a bucket.

field bsd_fields = set
	bsd$w_type	= [ 0,0,16,0],	! Type of structure (used in RMSINTER
					! module).
	bsd$w_size	= [ 2,0,16,0],	! Size of bucket in blocks.
	bsd$l_vbn	= [ 4,0,32,0],	! VBN of bucket.
	bsd$l_offset	= [ 8,0,32,0],	! Offset of structure within bucket.
	bsd$l_bufptr	= [12,0,32,0],	! Address of bucket buffer.
	bsd$l_endptr	= [16,0,32,0],	! Address of byte past end of buffer.
	bsd$l_work	= [20,0,32,0]	! Work longword.  Used to specify
					! additional context vis-a-vis the
					! structure.
tes;
literal
	bsd$c_size	= 24;		! Size of a BSD.

macro bsd = block[bsd$c_size,byte] field(bsd_fields) %;

! The following macro initializes a new BSD.

macro init_bsd(b) = 
	ch$fill(%x'00', bsd$c_size,b)
%;

! The following macro will copy a bucket by building a matching BSD and
! then reading the bucket.  If the "to" BSD (which must at least be
! initialized) describes a previous bucket, ANL$BUCKET will free it up.

macro copy_bucket(from_bsd,to_bsd) =
	(bind
		f = from_bsd: bsd,
		t = to_bsd: bsd;

	t[bsd$w_type] = .f[bsd$w_type];
	t[bsd$w_size] = .f[bsd$w_size];
	t[bsd$l_vbn] = .f[bsd$l_vbn];
	t[bsd$l_offset] = .f[bsd$l_offset];
	t[bsd$l_work] = .f[bsd$l_work];
	anl$bucket(t,0);
	)
%;

! Include the definitions of all the ridiculous message status codes.

external literal
	anl$_ok,
	anl$_alloc,
	anl$_anything,
	anl$_backup,
	anl$_bkt,
	anl$_bktarea,
	anl$_bktcheck,
	anl$_bktflags,
	anl$_bktfree,
	anl$_bktkey,
	anl$_bktlastbkt,
	anl$_bktlevel,
	anl$_bktnext,
	anl$_bktptrsize,
	anl$_bktrecid,
	anl$_bktrecid3,
	anl$_bktsample,
	anl$_bktvbnfree,
	anl$_bucketsize,
	anl$_cell,
	anl$_celldata,
	anl$_cellflags,
	anl$_checkhdg,
	anl$_contig,
	anl$_creation,
	anl$_ctlsize,
	anl$_datarec,
	anl$_databktvbn,
	anl$_dumpheading,
	anl$_eof,
	anl$_errorcount,
	anl$_errornone,
	anl$_errors,
	anl$_expiration,
	anl$_fileattr,
	anl$_filehdr,
	anl$_fileid,
	anl$_fileorg,
	anl$_filespec,
	anl$_flag,
	anl$_globalbufs,
	anl$_hexdata,
	anl$_hexheading1,
	anl$_hexheading2,
	anl$_idxarea,
	anl$_idxareaalign,
	anl$_idxareabktsz,
	anl$_idxareaflags,
	anl$_idxareanext,
	anl$_idxareaqty,
	anl$_idxarearecl,
	anl$_idxarearelid,
	anl$_idxareaused,
	anl$_idxkey,
	anl$_idxkeyareas,
	anl$_idxkeybktsz,
	anl$_idxkeybytes,
	anl$_idxkey1type,
	anl$_idxkeydatavbn,
	anl$_idxkeyfill,
	anl$_idxkeyflags,
	anl$_idxkeykeysz,
	anl$_idxkeyname,
	anl$_idxkeynext,
	anl$_idxkeyminrec,
	anl$_idxkeynull,
	anl$_idxkeyposs,
	anl$_idxkeyrootlvl,
	anl$_idxkeyrootvbn,
	anl$_idxkeysegs,
	anl$_idxkeysizes,
	anl$_idxprimrec,
	anl$_idxprimrecflags,
	anl$_idxprimrecid,
	anl$_idxprimreclen,
	anl$_idxprimrecrrv,
	anl$_idxproareas,
	anl$_idxprolog,
	anl$_idxrec,
	anl$_idxrecptr,
	anl$_idxsidr,
	anl$_idxsidrflags,
	anl$_idxsidrrecid,
	anl$_idxsidrptrflags,
	anl$_idxsidrptrref,
	anl$_intercommand,
	anl$_interhdg,
	anl$_longrec,
	anl$_maxrecsize,
	anl$_nobackup,
	anl$_noexpiration,
	anl$_nospanfiller,
	anl$_perform,
	anl$_prologflags,
	anl$_prologver,
	anl$_prot,
	anl$_recattr,
	anl$_recfmt,
	anl$_reclaimbkt,
	anl$_relbucket,
	anl$_releofvbn,
	anl$_relmaxrec,
	anl$_relprolog,
	anl$_reliab,
	anl$_revision,
	anl$_stathdg,
	anl$_owneruic,
	anl$_attop,
	anl$_badcmd,
	anl$_badpath,
	anl$_badvbn,
	anl$_downhelp,
	anl$_downpath,
	anl$_emptybkt,
	anl$_nodata,
	anl$_nodown,
	anl$_nonext,
	anl$_noreclaimed,
	anl$_norecs,
	anl$_norrv,
	anl$_restdone,
	anl$_stackfull,
	anl$_uninitindex,
	anl$_fdlident,
	anl$_fdlsystem,
	anl$_fdlsource,
	anl$_fdlfile,
	anl$_fdlalloc,
	anl$_fdlbesttry,
	anl$_fdlbucketsize,
	anl$_fdlcontig,
	anl$_fdlextension,
	anl$_fdlglobalbufs,
	anl$_fdlmaxrecord,
	anl$_fdlfilename,
	anl$_fdlorg,
	anl$_fdlowner,
	anl$_fdlprotection,
	anl$_fdlreadcheck,
	anl$_fdlwritecheck,
	anl$_fdlrecord,
	anl$_fdlspan,
	anl$_fdlcc,
	anl$_fdlvfcsize,
	anl$_fdlformat,
	anl$_fdlsize,
	anl$_fdlarea,
	anl$_fdlkey,
	anl$_fdlchanges,
	anl$_fdldataarea,
	anl$_fdldatafill,
	anl$_fdldatakeycompb,
	anl$_fdldatareccompb,
	anl$_fdldups,
	anl$_fdlindexarea,
	anl$_fdlindexcompb,
	anl$_fdlindexfill,
	anl$_fdll1indexarea,
	anl$_fdlkeyname,
	anl$_fdlnorecs,
	anl$_fdlnullkey,
	anl$_fdlnullvalue,
	anl$_fdlprolog,
	anl$_fdlseglength,
	anl$_fdlsegpos,
	anl$_fdlsegtype,
	anl$_fdlanalarea,
	anl$_fdlrecl,
	anl$_fdlanalkey,
	anl$_fdldatakeycomp,
	anl$_fdldatareccomp,
	anl$_fdldatarecs,
	anl$_fdldataspace,
	anl$_fdldepth,
	anl$_fdldupsper,
	anl$_fdlidxcomp,
	anl$_fdlidxfill,
	anl$_fdlidxspace,
	anl$_fdldatalenmean,
	anl$_fdlidxlenmean,
	anl$_statarea,
	anl$_statrecl,
	anl$_statkey,
	anl$_statdepth,
	anl$_statidxlenmean,
	anl$_statidxspace,
	anl$_statidxfill,
	anl$_statidxcomp,
	anl$_statdatarecs,
	anl$_statdupsper,
	anl$_statdatalenmean,
	anl$_statdataspace,
	anl$_statdatafill,
	anl$_statdatakeycomp,
	anl$_statdatareccomp,
	anl$_statefficiency,
	anl$_badarea1st2,
	anl$_badareaalign,
	anl$_badareabktsize,
	anl$_badareafit,
	anl$_badareaid,
	anl$_badareanext,
	anl$_badarearfi,
	anl$_badarearoot,
	anl$_badareaused,
	anl$_badbktareaid,
	anl$_badbktcheck,
	anl$_badbktfree,
	anl$_badbktkeyid,
	anl$_badbktlevel,
	anl$_badbktrootbit,
	anl$_badbktsample,
	anl$_badcellfit,
	anl$_badchecksum,
	anl$_baddatarecfit,
	anl$_baddatarecps,
	anl$_bad3idxkeyfit,
	anl$_badidxlastkey,
	anl$_badidxorder,
	anl$_badidxrecbits,
	anl$_badidxrecfit,
	anl$_badidxrecps,
	anl$_badkeyareaid,
	anl$_badkeydatabkt,
	anl$_badkeydatatype,
	anl$_badkeyidxbkt,
	anl$_badkeyfill,
	anl$_badkeyfit,
	anl$_badkeyrefid,
	anl$_badkeyrootlevel,
	anl$_badkeysegcount,
	anl$_badkeysegvec,
	anl$_badkeysummary,
	anl$_badreadnopar,
	anl$_badreadpar,
	anl$_badsidrdupct,
	anl$_badsidrptrfit,
	anl$_badsidrptrsz,
	anl$_badsidrsize,
	anl$_badstreameof,
	anl$_badvbnfree,
	anl$_bktloop,
	anl$_extenderr,
	anl$_flagerror,
	anl$_missingbkt,
	anl$_p3sidr,
	anl$_notok,
	anl$_spanerror,
	anl$_toomanyrecs,
	anl$_unwind,
	anl$_vfctooshort,
	anl$_cachefull,
	anl$_cacherelfail,
	analyze$_facility;

! We use a few of the message in the shareable message file SHRMSG.
! Define status codes for these which include our facility code and
! the message severity.

literal
	anl$_closein	= shr$_closein + 177*65536 + sts$k_error,
	anl$_closeout	= shr$_closeout + 177*65536 + sts$k_error,
	anl$_openin	= shr$_openin + 177*65536 + sts$k_error,
	anl$_openout	= shr$_openout + 177*65536 + sts$k_severe,
	anl$_readerr	= shr$_readerr + 177*65536 + sts$k_error,
	anl$_writeerr	= shr$_writeerr + 177*65536 + sts$k_severe;
