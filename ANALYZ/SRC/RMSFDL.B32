%title 'RMSFDL - Generate FDL for a File'
	module rmsfdl	(
			ident='V03-002') = begin

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! Facility:	VAX/VMS Analyze Facility, Generate FDL for a File
!
! Abstract:	This module is responsible for generating the File Definition
!		Language (FDL) for an extant file.  The user can then create
!		additional similar files, or modify the FDL and create
!		different sorts of file.
!		See "Functional Specification for FDL - VAX-11 RMS File
!		Definition Language" by Ken Henderson.
!
!
! Environment:
!
! Author: Paul C. Anagnostopoulos, Creation Date: 14 July 1981
!
! Modified By:
!
!	V03-001	PCA0008		Paul Anagnostopoulos	16-Mar-1982
!		Put out an allocation in the area primary of an FDL spec.
!		Even though it might not be the entire allocation,
!		something is better than nothing.
!
!	V03-002	PCA0007		Paul Anagnostopoulos	16-Mar-1982
!		Don't put out the compression secondaries in a prologue 2
!		FDL spec.
!--

%sbttl 'Module Declarations'
!
! Libraries and Requires:
!

library 'lib';
require 'rmsreq';

!
! Table of Contents:
!

forward routine
	anl$fdl_mode: novalue,
	anl$fdl_record: novalue,
	anl$fdl_areas: novalue,
	anl$fdl_keys: novalue,
	anl$analyze_areas: novalue,
	anl$analyze_keys: novalue;

!
! External References:
!

external routine
	anl$area_descriptor,
	anl$bucket,
	anl$condition_handler,
	anl$fdl_analysis_of_area,
	anl$fdl_analysis_of_key,
	anl$fdl_file,
	anl$format_line,
	anl$format_skip,
	anl$idx_check_key_stuff,
	anl$key_descriptor,
	anl$open_next_rms_file,
	anl$prepare_report_file,
	anl$3reclaimed_bucket_header,
	cli$get_value: addressing_mode(general),
	lib$establish: addressing_mode(general);

external
	anl$gl_fat: ref block[,byte],
	anl$gw_prolog: word;

!
! Own Variables:
!
! The following little table is for putting out boolean items.

own
	yes_no: vector[2,long] initial(
			uplit byte (%ascic 'no'),
			uplit byte (%ascic 'yes')
			);

%sbttl 'ANL$FDL_MODE - Drive the Generation of an FDL'
!++
! Functional Description:
!	This routine is responsible for driving the generation of an
!	FDL spec for a file.  We open the file and call various routines
!	to generate parts of the FDL.
!
! Formal Parameters:
!	none
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	none
!
! Side Effects:
!
!--


global routine anl$fdl_mode: novalue = begin

local
	status: long;
local
	local_described_buffer(resultant_file_spec,nam$c_maxrss);


! Establish the condition handler for drastic structure errors.

lib$establish(anl$condition_handler);

! Begin by opening the file to be analyzed.  If the user blew it, just quit.

if not anl$open_next_rms_file(resultant_file_spec) then
	return;

! Now we can prepare the output file to receive the FDL specification.
! We don't want any page headings in the file.

anl$prepare_report_file(0,resultant_file_spec);

! Begin the spec with an IDENT that identifies who produced it.

anl$format_line(0,0,anl$_fdlident,0);

! Now put out the system primary with the source.

anl$format_skip(0);
anl$format_line(0,0,anl$_fdlsystem);
anl$format_line(0,1,anl$_fdlsource);

! Now call routines to put out the file and record primaries.

anl$format_skip(0);
anl$fdl_file();

anl$format_skip(0);
anl$fdl_record();

! Now if this is an indexed file, call routines to put out the area
! primaries, key primaries, analysis_of_area primaries, and 
! analysis_of_key primaries.

if .anl$gl_fat[fat$v_fileorg] eqlu fat$c_indexed then (

	anl$fdl_areas();

	anl$fdl_keys();

	anl$analyze_areas();

	anl$analyze_keys();
);

return;

end;

%sbttl 'ANL$FDL_RECORD - Generate RECORD primary for FDL'
!++
! Functional Description:
!	This routine is responsible for generating the RECORD primary in an
!	FDL spec.  This primary describes things about the record format
!	of the file.
!
! Formal Parameters:
!	none
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	none
!
! Side Effects:
!
!--


global routine anl$fdl_record: novalue = begin


! We just format a line for each item in the record primary.

anl$format_line(0,0,anl$_fdlrecord);
anl$format_line(0,1,anl$_fdlspan,.yes_no[not .anl$gl_fat[fat$v_nospan] and 1]);
anl$format_line(0,1,anl$_fdlcc,
		(if .anl$gl_fat[fat$v_impliedcc] then uplit byte (%ascic 'carriage_return')
	    else if .anl$gl_fat[fat$v_fortrancc] then uplit byte (%ascic 'fortran')
	    else if .anl$gl_fat[fat$v_printcc]   then uplit byte (%ascic 'print')
	    else				      uplit byte (%ascic 'none')));
if .anl$gl_fat[fat$v_rtype] eqlu fat$c_vfc then
	anl$format_line(0,1,anl$_fdlvfcsize,.anl$gl_fat[fat$b_vfcsize]);
anl$format_line(0,1,anl$_fdlformat,
		(selectoneu .anl$gl_fat[fat$v_rtype] of set
		[fat$c_undefined]:	uplit byte (%ascic 'undefined');
		[fat$c_fixed]:		uplit byte (%ascic 'fixed');
		[fat$c_variable]:	uplit byte (%ascic 'variable');
		[fat$c_vfc]:		uplit byte (%ascic 'vfc');
		[fat$c_stream]:		uplit byte (%ascic 'stream');
		[fat$c_streamlf]:	uplit byte (%ascic 'stream_lf');
		[fat$c_streamcr]:	uplit byte (%ascic 'stream_cr');
		tes));
anl$format_line(0,1,anl$_fdlsize,.anl$gl_fat[fat$w_maxrec]);

return;

end;

%sbttl 'ANL$FDL_AREAS - Generate AREA Primaries for FDL'
!++
! Functional Description:
!	This routine is responsible for generating the area primaries in
!	an FDL spec.  This is needed for defining indexed files.
!	
! Formal Parameters:
!	none
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	none
!
! Side Effects:
!
!--


global routine anl$fdl_areas: novalue = begin

local
	p: bsd,
	sp: ref block[,byte],
	area_count: long,
	id: long;


! We begin by setting up a BSD for the prolog and reading it in.

init_bsd(p);
p[bsd$w_size] = 1;
p[bsd$l_vbn] = 1;
anl$bucket(p,0);

! Now we will scan all of the area descriptors.  Read in the first one.

sp = .p[bsd$l_bufptr];
area_count = .sp[plg$b_amax];

p[bsd$l_vbn] = .sp[plg$b_avbn];
p[bsd$l_offset] = 0;
anl$bucket(p,0);

! Loop through the descriptors one by one.

incru id from 0 to .area_count-1 do (

	! Generate the FDL for this descriptor.  We can only put out
	! the current extent for the allocation secondary.
	! We won't put out positioning information because it probably
	! isn't useful.

	sp = .p[bsd$l_bufptr] + .p[bsd$l_offset];

	anl$format_skip(0);
	anl$format_line(0,0,anl$_fdlarea,.id);
	anl$format_line(0,1,anl$_fdlalloc,.sp[area$l_cnblk]);
	anl$format_line(0,1,anl$_fdlbesttry,.yes_no[.sp[area$v_cbt] and 1]);
	anl$format_line(0,1,anl$_fdlbucketsize,.sp[area$b_arbktsz]);
	anl$format_line(0,1,anl$_fdlcontig,
			.yes_no[not .sp[area$v_cbt] and .sp[area$v_ctg] and 1]);
	anl$format_line(0,1,anl$_fdlextension,.sp[area$w_deq]);

	! Now we can advance on to the next descriptor.  In the process,
	! we will check it for validity.

	anl$area_descriptor(p,.id,false);
);

anl$bucket(p,-1);
return;

end;

%sbttl 'ANL$FDL_KEYS - Generate KEY Primaries for FDL'
!++
! Functional Description:
!	This routine is responsible for generating the key primaries in an
!	FDL spec.  These are needed for indexed files.
!
! Formal Parameters:
!	none
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	none
!
! Side Effects:
!
!--


global routine anl$fdl_keys: novalue = begin

own
	types: vector[6,long] initial(
			uplit byte (%ascic 'string'),
			uplit byte (%ascic 'int2'),
			uplit byte (%ascic 'bin2'),
			uplit byte (%ascic 'int4'),
			uplit byte (%ascic 'bin4'),
			uplit byte (%ascic 'decimal')
			);
local
	p: bsd,
	id: long,
	sp: ref block[,byte],
	i: long;


! We will be looking at all of the key descriptors.  Set up a BSD for the
! first one.

init_bsd(p);
p[bsd$w_size] = 1;
p[bsd$l_vbn] = 1;
p[bsd$l_offset] = 0;
anl$bucket(p,0);

! Now we can loop through the key descriptors.

incru id from 0 do (

	! Now we can format the FDL for the key.

	sp = .p[bsd$l_bufptr] + .p[bsd$l_offset];

	anl$format_skip(0);
	anl$format_line(0,0,anl$_fdlkey,.id);
	anl$format_line(0,1,anl$_fdlchanges,.yes_no[.sp[key$v_chgkeys] and 1]);

	! The data key and record compression flags are only used for
	! the primary key of a prologue 3 file.

	if .anl$gw_prolog eqlu plg$c_ver_3 and .id eqlu 0 then (
		anl$format_line(0,1,anl$_fdldatakeycompb,.yes_no[.sp[key$v_key_compr] and 1]);
		anl$format_line(0,1,anl$_fdldatareccompb,.yes_no[.sp[key$v_rec_compr] and 1]);
	);

	anl$format_line(0,1,anl$_fdldataarea,.sp[key$b_danum]);
	anl$format_line(0,1,anl$_fdldatafill,(.sp[key$w_datfill] * 100) /
					      (.sp[key$b_datbktsz]*512));
	anl$format_line(0,1,anl$_fdldups,.yes_no[.sp[key$v_dupkeys] and 1]);
	anl$format_line(0,1,anl$_fdlindexarea,.sp[key$b_ianum]);

	! The index compression flag is only used for prologue 3 files.

	if .anl$gw_prolog eqlu plg$c_ver_3 then
		anl$format_line(0,1,anl$_fdlindexcompb,.yes_no[.sp[key$v_idx_compr] and 1]);

	anl$format_line(0,1,anl$_fdlindexfill,(.sp[key$w_idxfill] * 100) /
					       (.sp[key$b_idxbktsz]*512));
	anl$format_line(0,1,anl$_fdll1indexarea,.sp[key$b_lanum]);

	! For the key name, we have to find the first null in the field
	! so we know how long it is.  If there is no name, forget it.

	begin
	local
		np: ref block[,byte],
		length: long;

	np = ch$find_ch(key$s_keynam,sp[key$t_keynam], %x'00');
	length =	(if .np eqla 0 then
				key$s_keynam
			else
				.np - sp[key$t_keynam]);
	if .length nequ 0 then
		anl$format_line(0,1,anl$_fdlkeyname,.length,sp[key$t_keynam]);
	end;

	anl$format_line(0,1,anl$_fdlnullkey,.yes_no[.sp[key$v_nulkeys] and 1]);
	if .sp[key$v_nulkeys] then
		anl$format_line(0,1,anl$_fdlnullvalue,.sp[key$b_nullchar]);

	! The prolog version only appears in the primary key.

	if .id eqlu 0 then
		anl$format_line(0,1,anl$_fdlprolog,.anl$gw_prolog);

	! To put out the segment sizes and positions, we have to loop
	! through the segment arrays.

	begin
	bind
		size_vector = sp[key$b_size0]: vector[,byte],
		pos_vector = sp[key$w_position0]: vector[,word];

	incru i from 0 to .sp[key$b_segments]-1 do (
		anl$format_line(0,1,anl$_fdlseglength,.i,.size_vector[.i]);
		anl$format_line(0,1,anl$_fdlsegpos,.i,.pos_vector[.i]);
	);
	end;

	! Now we can put out the key data type.

	anl$format_line(0,1,anl$_fdlsegtype,.types[.sp[key$b_datatype]]);

	! Now we can go on to the next descriptor, if there is one.
	! This will also check the descriptor's validity.

exitif (not anl$key_descriptor(p,.id,0,false));
);

anl$bucket(p,-1);
return;

end;

%sbttl 'ANL$ANALYZE_AREAS - Generate Analysis Primaries for Areas'
!++
! Functional Description:
!	This routine is responsible for generating the analysis_of_area
!	primaries, one for each area.  This primary contains useful
!	statistics about an area.
!
! Formal Parameters:
!	none
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	none
!
! Side Effects:
!
!--


global routine anl$analyze_areas: novalue = begin

local
	p: bsd,
	sp: ref block[,byte],
	area_vbn: long,
	id: long,
	r: bsd;


! We begin by setting up a BSD for the prolog and reading it in.

init_bsd(p);
p[bsd$w_size] = 1;
p[bsd$l_vbn] = 1;
anl$bucket(p,0);

! Save the VBN of the first area descriptor for later use.

sp = .p[bsd$l_bufptr];
area_vbn = .sp[plg$b_avbn];

! Now we will loop through the area descriptors and generate an
! analysis of them.  We move from one to the next manually, rather
! than by calling anl$area_descriptor, because we don't want to 
! check them again.

init_bsd(r);

incru id from 0 to .sp[plg$b_amax]-1 do (

	! Compute the VBN and offset of this area descriptor.  Get the
	! descriptor and set up a pointer SP to it.

	p[bsd$l_vbn] = .area_vbn + .id / (512/area$c_bln);
	p[bsd$l_offset] = .id mod (512/area$c_bln) * area$c_bln;
	anl$bucket(p,0);
	sp = .p[bsd$l_bufptr] + .p[bsd$l_offset];

	! If the area contains any reclaimed buckets, we want to count
	! them.  Only prolog 3 files have such buckets.

	if .sp[area$l_avail] nequ 0 then (

		! Get the first reclaimed bucket, using BSD R.

		r[bsd$w_size] = .sp[area$b_arbktsz];
		r[bsd$l_vbn] = .sp[area$l_avail];
		anl$bucket(r,0);

		! To accumulate the statistics for this area, we will check
		! the validity of the reclaimed bucket chain, as if we were
		! in /CHECK mode.  This causes statistics to be accumulated
		! via the statistics callback mechanism (see module RMSSTATS).

		while anl$3reclaimed_bucket_header(r,false) do;
	);

	! Now we can generate the analysis primary.

	anl$fdl_analysis_of_area(.id);
);

anl$bucket(p,-1);
anl$bucket(r,-1);
return;

end;

%sbttl 'ANL$ANALYZE_KEYS - Generate Analysis Primaries for Keys'
!++
! Functional Description:
!	This routine is responsible for generating the analysis_of_key
!	primaries, one for each key.  This primary contains useful
!	statistics about a key.
!
! Formal Parameters:
!	none
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	none
!
! Side Effects:
!
!--


global routine anl$analyze_keys: novalue = begin

local
	p: bsd,
	id: long,
	sp: ref block[,byte],
	i: long;


! We will be looking at all of the key descriptors.  Set up a BSD for the
! first one.

init_bsd(p);
p[bsd$w_size] = 1;
p[bsd$l_vbn] = 1;
p[bsd$l_offset] = 0;

! Now we can loop through the key descriptors.  We move from one to the
! next manually, rather than by calling anl$key_descriptor, because we
! don't want to check them again.

incru id from 0 do (

	! Get the key descriptor and set up SP to point at it.

	anl$bucket(p,0);
	sp = .p[bsd$l_bufptr] + .p[bsd$l_offset];

	! Now we want to calculate the statistics for this index.  We do
	! this by "pretending" to check the index structure.
	! It can't be done if the index is uninitialized.

	if not .sp[key$v_initidx] then
		anl$idx_check_key_stuff(.sp[key$l_rootvbn],p,.sp[key$b_rootlev]);

	! Now we can generate the analysis primary.

	anl$fdl_analysis_of_key(p);

	! Now we can go on to the next descriptor, if there is one.

exitif (.sp[key$l_idxfl] eqlu 0);
	p[bsd$l_vbn] = .sp[key$l_idxfl];
	p[bsd$l_offset] = .sp[key$w_noff];
);

anl$bucket(p,-1);
return;

end;

end eludom
