%title 'EXEFIXUP - Analyze Fixup Info'
	module exefixup (
			ident='V03-000') = begin

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! Facility:	VAX/VMS Analyze Facility, Analyze Image Fixup Info
!
! Abstract:	This module is responsible for analyzing the fixup info
!		section of an image.  This section contains info necessary
!		for the linking and activation of shareable images.
!
!
! Environment:
!
! Author: Paul C. Anagnostopoulos, Creation Date: 20 April 1981
!
! Modified By:
!
! , : Version
! 01 -
!--

%sbttl 'Module Declarations'
!
! Libraries and Requires:
!

library 'lib';
require 'objexereq';

!
! Table of Contents:
!

forward routine
	anl$image_fixup_info;

!
! External References:
!

external routine
	anl$check_flags,
	anl$check_symbol,
	anl$format_error,
	anl$format_flags,
	anl$format_line,
	anl$format_protection,
	anl$interact,
	anl$map_fixup_section,
	anl$report_page,
	anl$report_line;

external
	anl$gb_interactive: byte;

!
! Own Variables:
!

%sbttl 'ANL$IMAGE_FIXUP_INFO - Analyze Fixup Info'
!++
! Functional Description:
!	This routine is responsible for the analysis of the fixup info
!	section of a shareable image.
!
! Formal Parameters:
!	image_base		Starting address of the complete image.
!	fixup_size		Number of blocks of fixup info.
!	fixup_vbn		VBN of fixup info.
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	If interactive session:  true if we are to continue, false otherwise.
!
! Side Effects:
!
!--


global routine anl$image_fixup_info(image_base,fixup_size,fixup_vbn) = begin

own
	flags_def: vector[2,long] initial(
				0,
				uplit byte (%ascic 'IAF$V_SHR'));

local
	fp: ref block[,byte],
	end_ptr: ref block[,byte],
	sp: ref block[,byte],
	i: long,
	count: long,
	long_array: vector[4,long];


! We begin with a nice heading on a new page.

anl$report_page();
anl$format_line(0,0,anl$_exefixup);
anl$report_line(-1);
anl$report_line(-1);

! If the fixup size and VBN are zero, then there was no fixup section.
! Tell the user and quit.

if .fixup_size eqlu 0 then (
	anl$format_line(0,1,anl$_exefixupnone);
	return true;
);

! Map the fixup section into memory.  If the routine returns zero, then
! we couldn't, so tell the user.

fp = anl$map_fixup_section(.fixup_size,.fixup_vbn);
if .fp eqla 0 then (
	anl$format_error(anl$_exebadfixupvbn,.fixup_vbn,.fixup_size);
	return;
);

! Set up a pointer to the end of the section so we can test for it.

end_ptr = .fp + .fixup_size*512;

! Now we will format the fixed part of the fixup info.  The only items
! we need to bother with are the flags, shareable image count,
! and extra allowed count.

anl$format_line(3,1,anl$_exefixfixed);
anl$report_line(-1);
anl$format_flags(2,anl$_exefixflags,.fp[iaf$w_flags],flags_def);
anl$check_flags(.fp[iaf$w_flags],flags_def);
anl$format_line(0,2,anl$_exefixcount,.fp[iaf$l_shrimgcnt]);
anl$format_line(0,2,anl$_exefixextra,.fp[iaf$l_shlextra]);

! If this is an interactive session, then let's see what the user wants to do.

if .anl$gb_interactive then
	if not anl$interact() then
		return false;

! Now we are going to print the shareable image list.  This involves
! only the name of the image.  And the first list entry has no name,
! because it refers to this image.

anl$report_line(-1);
anl$format_line(3,1,anl$_exefixlist);
anl$report_line(-1);

sp = .fp + .fp[iaf$l_shlstoff];
incru i from 0 to .fp[iaf$l_shrimgcnt]-1 do (
	local
		name_dsc: descriptor;

	if .i eqlu 0 then
		anl$format_line(0,2,anl$_exefixname0,.i)
	else (
		anl$format_line(0,2,anl$_exefixname,.i,sp[shl$t_imgnam]);
		build_descriptor(name_dsc,.sp[shl$b_namlng],sp[shl$t_imgnam]+1);
		anl$check_symbol(name_dsc);
	);
	sp = .sp + shl$c_length;
);

! If this is an interactive session, then let's see what the user wants to do.

if .anl$gb_interactive then
	if not anl$interact() then
		return false;

! Now we will analyze the external address data (G^ fixups).  For each
! shareable image with such fixups, we have a fixup count, the image
! number, and a list of references.


if .fp[iaf$l_g_fixoff] nequ 0 then (

	anl$report_line(-1);
	anl$format_line(3,1,anl$_exefixg);
	sp = .fp + .fp[iaf$l_g_fixoff];

	! Loop until we get to the end of the data.

	while .sp[0,0,32,0] nequ 0 do (

		! If we have run off the end of the section, then the
		! end of data marker is missing.

		if .sp geqa .end_ptr then (
			anl$format_error(anl$_exebadfixupend);
	exitloop;
		);

		! Format a line with the count and image number.

		count = .sp[0,0,32,0];
		sp = .sp + 4;
		anl$report_line(-1);
		anl$format_line(2,2,anl$_exefixgimage,.count,.sp[0,0,32,0]);
		sp = .sp + 4;

		! Loop through the references and format them 4 to a line.

		incru i from 0 to .count-1 do (
			long_array[.i mod 4] = .sp[0,0,32,0];
			sp = .sp + 4;

			if .i mod 4 eqlu 3 or .i eqlu .count-1 then
				anl$format_line(0,3,anl$_exefixgline,.i mod 4 + 1,
						.long_array[0],.long_array[1],.long_array[2],.long_array[3]);
		);
	);

	! If this is an interactive session, then let's see what the user
	! wants to do.

	if .anl$gb_interactive then
		if not anl$interact() then
			return false;
);

! Now we will analyze the internal address data (.ADDRESS fixups).  For each
! shareable image with such fixups, we have a fixup count, the image
! number, and a list of offsets.

if .fp[iaf$l_dotadroff] nequ 0 then (

	! Put out a heading line including the base address of the image,
	! since the address are relative to it.

	anl$report_line(-1);
	anl$format_line(3,1,anl$_exefixa,.image_base);
	sp = .fp + .fp[iaf$l_dotadroff];

	! Loop until we get to the end of the data.

	while .sp[0,0,32,0] nequ 0 do (

		! If we have run off the end of the section, then the
		! end of data marker is missing.

		if .sp geqa .end_ptr then (
			anl$format_error(anl$_exebadfixupend);
	exitloop;
		);

		! Format a line with the count and image number.

		count = .sp[0,0,32,0];
		sp = .sp + 4;
		anl$report_line(-1);
		anl$format_line(2,2,anl$_exefixaimage,.count,.sp[0,0,32,0]);
		sp = .sp + 4;

		! Loop through the references and format them 4 to a line.

		incru i from 0 to .count-1 do (
			long_array[.i mod 4] = .sp[0,0,32,0];
			sp = .sp + 4;

			if .i mod 4 eqlu 3 or .i eqlu .count-1 then
				anl$format_line(0,3,anl$_exefixaline,.i mod 4 + 1,
						.long_array[0],.long_array[1],.long_array[2],.long_array[3]);
		);
	);

	! If this is an interactive session, then let's see what the user
	! wants to do.

	if .anl$gb_interactive then
		if not anl$interact() then
			return false;
);

! Now we will analyze the section protection change data.  This consists
! of a count of changes, followed by the changes.  Each change specifies
! the address and extent of the section, along with its new protection.

if .fp[iaf$l_chgprtoff] nequ 0 then (

	! Put out a heading line including the base address of the image,
	! since the address are relative to it.

	anl$report_line(-1);
	anl$format_line(3,1,anl$_exefixp,.image_base);
	sp = .fp + .fp[iaf$l_chgprtoff];
	count = .sp[0,0,32,0];
	sp = .sp + 4;

	! Now we will loop through the change entries.

	incru i from 1 to .count do (

		! If we have run off the end of the section, then the
		! count is screwed up.

		if .sp geqa .end_ptr then (
			anl$format_error(anl$_exebadfixupend);
	exitloop;
		);

		! Format the information about this change.

		anl$report_line(-1);
		anl$format_line(2,2,anl$_exefixpsect,.sp[icp$l_baseva],.sp[icp$w_npages]);
		anl$format_protection(2,.sp[icp$w_newprt]);

		! Advance to the next change entry.

		sp = .sp + 8;
	);
		
	! If this is an interactive session, then let's see what the user
	! wants to do.

	if .anl$gb_interactive then
		if not anl$interact() then
			return false;
);

! We are all done.  Free up the memory mapping the fixup section.

anl$map_fixup_section();

return true;

end;

end eludom
