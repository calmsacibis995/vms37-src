%title 'OBJGSD - Analyze GSD Records'
	module objgsd	(
			ident='V03-000') = begin

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! Facility:	VAX/VMS Analyze Facility, Analyze GSD Object Records
!
! Abstract:	This module handles the analysis of GSD records.
!
!
! Environment:
!
! Author: Paul C. Anagnostopoulos, Creation Date: 20 January 1980
!
! Modified By:
!
! , : Version
! 01 -
!--

%sbttl 'Module Declarations'
!
! Libraries and Requires:
!

library 'starlet';
require 'objexereq';

!
! Table of Contents:
!

forward routine
	anl$object_gsd: novalue,
	anl$object_argument_dsc,
	anl$object_psect_ref: novalue,
	anl$object_psect_check: novalue,
	anl$object_env_ref: novalue,
	anl$object_env_check: novalue;

!
! External References:
!

external routine
	anl$check_flags,
	anl$check_symbol,
	anl$format_data_type,
	anl$format_error,
	anl$format_flags,
	anl$format_hex,
	anl$format_line,
	anl$format_mask,
	anl$format_severity,
	anl$object_record_line,
	anl$report_line,
	lib$free_vm: addressing_mode(general),
	lib$get_vm: addressing_mode(general);

!
! Own Variables:
!

! The following variables are needed to keep track of psect references and
! check their validity.

own
	highest_def_psect: signed long initial(-1),
	highest_ref_psect: signed long initial(-1),
	psect_ref_bits: ref bitvector[65536];

! The following variables perform the same function, but for environments.

own
	highest_def_env: signed long initial(-1),
	highest_ref_env: signed long initial(-1),
	env_ref_bits: ref bitvector[65536];

%sbttl 'ANL$OBJECT_GSD - Analyze GSD Object Records'
!++
! Functional Description:
!	This routine is responsible for analyzing the GSD object records.
!
! Formal Parameters:
!	record_number	The number of this object record.
!	the_record	Address of descriptor of the object record.
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	none
!
! Side Effects:
!
!--


global routine anl$object_gsd(record_number,the_record): novalue = begin

bind
	record_dsc = .the_record: descriptor;

! The following data structures define the various flag bytes and words
! that are present in GSD records.

! This defines the flags in a psect definition subrecord:

own
	psc_flags_def: vector[11,long] initial(
				9,
				uplit byte(%ascic 'GPS$V_PIC'),
				uplit byte(%ascic 'GPS$V_LIB'),
				uplit byte(%ascic 'GPS$V_OVL'),
				uplit byte(%ascic 'GPS$V_REL'),
				uplit byte(%ascic 'GPS$V_GBL'),
				uplit byte(%ascic 'GPS$V_SHR'),
				uplit byte(%ascic 'GPS$V_EXE'),
				uplit byte(%ascic 'GPS$V_RD'),
				uplit byte(%ascic 'GPS$V_WRT'),
				uplit byte(%ascic 'GPS$V_VEC'));

! This defines the flags in the symbol, entry point, and procedure subrecords.

own
	sym_flags_def: vector[5,long] initial(
				3,
				uplit byte(%ascic 'GSY$V_WEAK'),
				uplit byte(%ascic 'GSY$V_DEF'),
				uplit byte(%ascic 'GSY$V_UNI'),
				uplit byte(%ascic 'GSY$V_REL'));

! This defines the flags in the environment subrecord.

own
	env_flags_def: vector[2,long] initial(
				0,
				uplit byte(%ascic 'ENV$V_DEF'));

! This defines the flags in the entity check subrecord.

own
	entity_flags_def: vector[2,long] initial(
				0,
				uplit byte(%ascic 'IDC$V_BINIDENT'));

own
	gsd_subrecord_msg: vector[gsd$c_maxrectyp+1,long] initial(
					anl$_objgsdpsc,
					anl$_objgsdsym,
					anl$_objgsdepm,
					anl$_objgsdpro,
					anl$_objgsdsymw,
					anl$_objgsdepmw,
					anl$_objgsdprow,
					anl$_objgsdidc,
					anl$_objgsdenv,
					anl$_objgsdlsy,
					anl$_objgsdlepm,
					anl$_objgsdlpro,
					anl$_objgsdspsc);

local
	status: long,
	gsd_type: byte,
	scanp: ref block[,byte],
	subrecord_number: long,
	fit_ok: byte,
	work_dsc: descriptor;


! We begin by printing a major line for the record.

anl$object_record_line(anl$_objgsdrec,.record_number,record_dsc);

! Now we go into a loop processing the subrecords in the record.
! SUBRECORD_NUMBER will count them as we go.
! SCANP will advance along the various subrecords of the record.
! FIT_OK will remain true unless a field spills off the end of the record.

subrecord_number = 0;
scanp = .record_dsc[ptr] + 1;
fit_ok = true;
while (.scanp lssa .record_dsc[ptr]+.record_dsc[len]) and .fit_ok do (

	! Count the subrecord and prepare to print it nicely.  Then print a
	! minor line for the subrecord.  If the subrecord type is invalid,
	! show the user and forget the record.

	increment (subrecord_number);
	anl$report_line(0);

	gsd_type = .scanp[0,0,8,0];
	if .gsd_type lequ gsd$c_maxrectyp then
		anl$format_line(2,1,.gsd_subrecord_msg[.gsd_type],.subrecord_number)
	else (
		anl$format_error(anl$_objgsdbadsubtyp,.gsd_type);
		build_descriptor(work_dsc,.record_dsc[len]-(.scanp-.record_dsc[ptr]),.record_dsc[ptr]);
		anl$format_hex(2,work_dsc);
		return;
	);

	! Now we can select on the subrecord type and analyze the subrecord.

	case .gsd_type from 0 to gsd$c_maxrectyp of set

	[gsd$c_psc,
	 gsd$c_spsc]:

		! We have a psect definition subrecord.  The first field
		! contains the psect alignment.  Print it and check it.
		! Also include the psect number for this guy.

		(ensure_field_fit(gps$b_align,record_dsc);
		if .fit_ok then (
			increment (highest_def_psect);
			anl$format_line(0,2,anl$_objgsdpscalign,1^.scanp[gps$b_align],
					.highest_def_psect);
			if .scanp[gps$b_align] gtru obj$c_pscalilim then
				anl$format_error(anl$_objgsdbadalign,obj$c_pscalilim);
		);

		! The next field is the flags byte.  Print it and check it.

		ensure_field_fit(gps$w_flags,record_dsc);
		if .fit_ok then (
			anl$format_flags(2,anl$_objgsdpscflags,.scanp[gps$w_flags],psc_flags_def);
			anl$check_flags(.scanp[gps$w_flags],psc_flags_def);
		);

		! The next field is the allocation size.  Print it and check.

		ensure_field_fit(gps$l_alloc,record_dsc);
		if .fit_ok then (
			anl$format_line(0,2,anl$_objgsdpscalloc,.scanp[gps$l_alloc]);
			if .scanp[gps$l_alloc] gtru %x'3fffffff' then
				anl$format_error(anl$_objp0space);
			if not .scanp[gps$v_rel] and .scanp[gps$l_alloc] nequ 0 then
				anl$format_error(anl$_objpscabslen);
		);

		! The next field is only present in shareable image psect
		! entries.  It contain the base address of the psect in
		! the shareable image.  Print it and check.  We also have
		! to set up SCANP for the next field, since it can be at
		! two different offset.

		if .gsd_type eqlu gsd$c_spsc then (
			ensure_field_fit(sgps$l_base,record_dsc);
			if .fit_ok then
				anl$format_line(0,2,anl$_objgsdpscbase,.scanp[sgps$l_base]);
			scanp = scanp[sgps$b_namlng];
		) else
			scanp = scanp[gps$b_namlng];

		! The final field is the psect name.  Print it and check it.

		ensure_ascic_fit(0,0,8,0,record_dsc,work_dsc);
		if .fit_ok then (
			anl$format_line(0,2,anl$_objsymbol,.work_dsc[len],.work_dsc[ptr]);
			anl$check_symbol(work_dsc);
		);

		! Finally, advance the scan pointer past this subrecord.

		scanp = .work_dsc[ptr] + .work_dsc[len];
		);

	[gsd$c_sym,
	 gsd$c_epm,
	 gsd$c_pro,
	 gsd$c_symw,
	 gsd$c_epmw,
	 gsd$c_prow,
	 gsd$c_lsy,
	 gsd$c_lepm,
	 gsd$c_lpro]:

		! We have a symbol specification, entry point definition,
		! or procedure definition.  As we proceed, we will need to
		! know if it is a symbol specification and what kind.

		(local
			symbol_spec: byte,
			symbol_def: byte;


		! All of these records begin with a data type, so let's print
		! it in the report.

		ensure_field_fit(gsy$b_datyp,record_dsc);
		if .fit_ok then (
			anl$format_data_type(2,.scanp[gsy$b_datyp]);
		);

		! All the records also contain a byte of flags.  Let's print
		! them and check.
		! There was a BUG in the V2 linker that sometimes caused
		! flag 11 to be set.  To avoid a flood of SPRs, we will
		! force that flag off so we won't produce an error.

		ensure_field_fit(gsy$w_flags,record_dsc);
		if .fit_ok then (
			anl$format_flags(2,anl$_objsymflags,.scanp[gsy$w_flags],sym_flags_def);
			anl$check_flags(.scanp[gsy$w_flags] and %x'f7ff',sym_flags_def);

			! Now let's figure out if this is a symbol specification.
			! Also record whether it is a reference or definition.

			symbol_spec = (.gsd_type eqlu gsd$c_sym) or
				      (.gsd_type eqlu gsd$c_symw) or
				      (.gsd_type eqlu gsd$c_lsy);
			symbol_def  = .scanp[gsy$v_def];

		);

		! From now on it becomes hard to keep track of where we
		! are, since different subrecords have different formats.
		! We will use SCANP to point at successive fields.

		scanp = scanp[gsy$w_flags] + 2;

		! At this point we have an environment index if this is a
		! local symbol subrecord.

		if .gsd_type eqlu gsd$c_lsy or
		   .gsd_type eqlu gsd$c_lepm or
		   .gsd_type eqlu gsd$c_lpro then (
			ensure_field_fit(0,0,16,0,record_dsc);
			if .fit_ok then (
				anl$format_line(0,2,anl$_objenv,.scanp[0,0,16,0]);
				anl$object_env_ref(.scanp[0,0,16,0]);
				scanp = .scanp + 2;
			);
		);

		! At this point we have some fields that are present in all
		! records except symbol references.

		if not (.symbol_spec and not .symbol_def) then (

			! OK, since it's not a symbol reference, then the
			! next thing is a psect number.  It may be a byte
			! or a word.  Print it and record the reference.

			if (.gsd_type eqlu gsd$c_sym) or
			   (.gsd_type eqlu gsd$c_epm) or
			   (.gsd_type eqlu gsd$c_pro)	then (
				ensure_field_fit(0,0,8,0,record_dsc);
				if .fit_ok then (
					anl$format_line(0,2,anl$_objpsect,.scanp[0,0,8,0]);
					anl$object_psect_ref(.scanp[0,0,8,0]);
					increment (scanp);
				);

			) else (

				ensure_field_fit(0,0,16,0,record_dsc);
				if .fit_ok then (
					anl$format_line(0,2,anl$_objpsect,.scanp[0,0,16,0]);
					anl$object_psect_ref(.scanp[0,0,16,0]);
					scanp = .scanp + 2;
				);
			);

			! Continuing on, these records contain a longword
			! value.  Print it and check it.

			ensure_field_fit(0,0,32,0,record_dsc);
			if .fit_ok then (
				anl$format_line(0,2,anl$_objvalue,.scanp[0,0,32,0]);
				scanp = .scanp + 4;
			);

			! Whew.  OK, now we have the entry mask, but not if
			! it's a symbol definition (or reference, of course).
			! Print it and check it.

			if not (.symbol_spec and .symbol_def) then (
				ensure_field_fit(0,0,16,0,record_dsc);
				if .fit_ok then (
					anl$format_mask(2,.scanp[0,0,16,0]);
					scanp = .scanp + 2;
				);
			);
		);

		! OK, now all cases join together.  We have the name of the
		! symbol or entry point.  Print it and check it.

		ensure_ascic_fit(0,0,8,0,record_dsc,work_dsc);
		if .fit_ok then (
			anl$format_line(0,2,anl$_objsymbol,.work_dsc[len],.work_dsc[ptr]);
			anl$check_symbol(work_dsc);
			scanp = .work_dsc[ptr] + .work_dsc[len];
		);

		! Well, we're done unless it's a procedure definition.  If so,
		! we have the argument counts and formal descriptors.

		if .gsd_type eqlu gsd$c_pro or 
		   .gsd_type eqlu gsd$c_prow or
		   .gsd_type eqlu gsd$c_lpro then (

			local
				max_args: long,
				i: long;

			! First we have two bytes containing the minimum and
			! maximum argument counts.  Print them and check.

			ensure_field_fit(0,0,16,0,record_dsc);
			if .fit_ok then (
				anl$format_line(0,2,anl$_objproargcount,.scanp[0,0,8,0],.scanp[1,0,8,0]);
				if .scanp[0,0,8,0] gtru .scanp[1,0,8,0] then
					anl$format_error(anl$_objprominmax);
				max_args = .scanp[1,0,8,0];
				scanp = .scanp + 2;

				! Now we have the formal argument descriptors,
				! one for each argument.

				incru i from 1 to .max_args do (
					anl$format_line(0,2,anl$_objproargnum,.i);
					fit_ok = anl$object_argument_dsc(3,scanp,record_dsc);
				);
			);
		);
		);

	[gsd$c_idc]:

		! We have an entity identity consistency check subrecord
		! (groan).  The first field is flags, although it contains
		! some other stuff we must ignore.

		(local
			binary: byte;

		ensure_field_fit(idc$w_flags,record_dsc);
		if .fit_ok then (
			anl$format_flags(2,anl$_objgsdidcflags,.scanp[idc$w_flags],entity_flags_def);
			anl$check_flags(.scanp[idc$w_flags] and %x'ffffffc1',entity_flags_def);
		);

		! If this is a binary identity, then the flags contain a
		! match control value.  Print it and check.

		if (binary = .scanp[idc$v_binident]) then
			case .scanp[idc$v_idmatch] from 0 to 3 of set
			[idc$c_leq]:	anl$format_line(0,2,anl$_objgsdidcmatch,uplit byte(%ascic 'LEQ'));
			[idc$c_equal]:	anl$format_line(0,2,anl$_objgsdidcmatch,uplit byte(%ascic 'EQUAL'));
			[inrange]:	anl$format_error(anl$_objbadidcmatch,.scanp[idc$v_binident]);
			tes;

		! There is also a standard error severity in the flags word.

		anl$format_severity(2,.scanp[idc$v_errsev]);

		! Next we have the entity name.  

		ensure_ascic_fit(idc$b_namlng,record_dsc,work_dsc);
		if .fit_ok then
			anl$format_line(0,2,anl$_objgsdidcent,.work_dsc[len],.work_dsc[ptr]);
		scanp = .work_dsc[ptr] + .work_dsc[len];

		! This next field is the identity value.  It is a counted
		! string, which can be a longword value.

		ensure_ascic_fit(0,0,8,0,record_dsc,work_dsc);
		if .fit_ok then
			if .binary then
				anl$format_line(0,2,anl$_objgsdidcvalb,.scanp[1,0,32,0])
			else
				anl$format_line(0,2,anl$_objgsdidcvala,.work_dsc[len],.work_dsc[ptr]);
		scanp = .work_dsc[ptr] + .work_dsc[len];

		! Finally, we have the name of the object.

		ensure_ascic_fit(0,0,8,0,record_dsc,work_dsc);
		if .fit_ok then
			anl$format_line(0,2,anl$_objgsdidcobj,.work_dsc[len],.work_dsc[ptr]);

		! Advance on past this subrecord.

		scanp = .work_dsc[ptr] + .work_dsc[len];
		);

	[gsd$c_env]:

		! We have an environment specification subrecord.  The
		! first field is flags, which we print and check.

		(ensure_field_fit(env$w_flags,record_dsc);
		if .fit_ok then (
			increment (highest_def_env);
			anl$format_flags(2,anl$_objgsdenvflags,.scanp[env$w_flags],env_flags_def);
			anl$check_flags(.scanp[env$w_flags],env_flags_def);
		);

		! The next field is the parent environment index.  Print
		! it with this environment's index, and check it.

		ensure_field_fit(env$w_envindx,record_dsc);
		if .fit_ok then (
			anl$format_line(0,2,anl$_objgsdenvpar,.scanp[env$w_envindx],.highest_def_env);
			anl$object_psect_ref(.scanp[env$w_envindx]);
		);

		! The final field is the environment name.  Print it and check.

		ensure_ascic_fit(env$b_namlng,record_dsc,work_dsc);
		if .fit_ok then (
			anl$format_line(0,2,anl$_objsymbol,.work_dsc[len],.work_dsc[ptr]);
			anl$check_symbol(work_dsc);
		);

		! Finally, advance the scan pointer past this record.

		scanp = .work_dsc[ptr] + .work_dsc[len];
		);

	tes;

);

return;

end;

%sbttl 'ANL$OBJECT_ARGUMENT_DSC - Analyze Argument Descriptors'
!++
! Functional Description:
!	This routine analyzes argument descriptors, which appear in GSD
!	records and in TIR commands.
!
! Formal Parameters:
!	indent_level	Level at which to indent lines.
!	scanp_address	Address of argument descriptor block pointer.  We
!			update it to point past the block.
!	the_record	Address of descriptor of record containing block.
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	True if descriptor fit in record; false otherwise.
!
! Side Effects:
!
!--


global routine anl$object_argument_dsc(indent_level,scanp_address,the_record) = begin

bind
	scanp = .scanp_address: ref block[,byte],
	record_dsc = .the_record: descriptor;

own
	passing_mechanism_table: vector[4,long] initial(
				uplit byte(%ascic 'UNKNOWN'),
				uplit byte(%ascic 'VALUE'),
				uplit byte(%ascic 'REF'),
				uplit byte(%ascic 'DESC'));

local
	fit_ok: byte,
	work_dsc: descriptor;


! The argument descriptor begins with a validation control byte containing
! the passing mechanism.  Print it and check it.

fit_ok = true;

ensure_field_fit(0,0,8,0,record_dsc);
if .fit_ok then (
	anl$format_line(0,.indent_level,anl$_objfadpassmech,.passing_mechanism_table[.scanp[0,0,2,0]]);
	if .scanp[0,2,6,0] nequ 0 then
		anl$format_error(anl$_objfadbadavc);
	increment (scanp);
);

ensure_ascic_fit(0,0,8,0,record_dsc,work_dsc);
if .fit_ok then (
	if .work_dsc[len] nequ 0 then
		anl$format_error(anl$_objfadbadrbc);
	scanp = .work_dsc[ptr] + .work_dsc[len];
);

return .fit_ok;

end;

%sbttl 'ANL$OBJECT_PSECT_REF - Mark Psect Reference'
!++
! Functional Description:
!	This routine is called to mark a psect reference in the psect
!	reference bitvector.  By remembering every psect that is referenced
!	we can check whether undefined psects are ever referenced.
!
! Formal Parameters:
!	psect_number	The number of the psect that was referenced.
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	none
!
! Side Effects:
!
!--


global routine anl$object_psect_ref(psect_number): novalue = begin

local
	status: long;


! We begin by checking to see whether or not a psect reference bitvector
! has been allocated.  If not, we allocate it and clear it.

if .psect_ref_bits eqla 0 then (
	status = lib$get_vm(%ref(65536/8),psect_ref_bits);
	check (.status,.status);
	ch$fill(%x'00', 65536/8,.psect_ref_bits);
);

! Now we can set the psect bit and remember the highest referenced psect.

psect_ref_bits[.psect_number] = true;
highest_ref_psect = max(.psect_number,.highest_ref_psect);

return;

end;

%sbttl 'ANL$OBJECT_PSECT_CHECK - Check Psect References'
!++
! Functional Description:
!	This routine is called at the end of an object module to check the
!	psect references.  We need to make sure that no undefined psects
!	were referenced.
!
! Formal Parameters:
!	none
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	none
!
! Side Effects:
!
!--


global routine anl$object_psect_check: novalue = begin

local
	status: long;


! First let's make sure that at least one psect was defined.  An object
! module must define at least one.

if .highest_def_psect lss 0 then
	anl$format_error(anl$_objnopsc);

! OK, now we are going to make sure that all referenced psects were defined.
! We do this by looping through any psect referenced bits whose number is
! higher than the highest defined psect.

if .highest_ref_psect gtr .highest_def_psect then (
	anl$format_error(anl$_objundefpsc);
	incru i from .highest_def_psect+1 to .highest_ref_psect do (
		if .psect_ref_bits[.i] then
			anl$format_error(anl$_objbadnum,.i);
	);
);

! Now we can reset everything for the next module.

highest_def_psect = highest_ref_psect = -1;
if .psect_ref_bits neqa 0 then (
	status = lib$free_vm(%ref(65536/8),psect_ref_bits);
	check (.status,.status);
	psect_ref_bits = 0;
);

return;

end;

%sbttl 'ANL$OBJECT_ENV_REF - Mark Environment Reference'
!++
! Functional Description:
!	This routine is called to mark a environment reference in the environ-
!	ment reference bitvector.  By remembering every environment that is 
!	referenced we can check whether undefined environments are ever 
!	referenced.
!
! Formal Parameters:
!	env_number	The number of the environment that was referenced.
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	none
!
! Side Effects:
!
!--


global routine anl$object_env_ref(env_number): novalue = begin

local
	status: long;


! We begin by checking to see whether or not an environment reference bitvector
! has been allocated.  If not, we allocate it and clear it.

if .env_ref_bits eqla 0 then (
	status = lib$get_vm(%ref(65536/8),env_ref_bits);
	check (.status,.status);
	ch$fill(%x'00', 65536/8,.env_ref_bits);
);

! Now we can set the environment bit and remember the highest referenced one.

env_ref_bits[.env_number] = true;
highest_ref_env = max(.env_number,.highest_ref_env);

return;

end;

%sbttl 'ANL$OBJECT_ENV_CHECK - Check Environment References'
!++
! Functional Description:
!	This routine is called at the end of an object module to check the
!	environment references.  We need to make sure that no undefined 
!	environments were referenced.
!
! Formal Parameters:
!	none
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	none
!
! Side Effects:
!
!--


global routine anl$object_env_check: novalue = begin

local
	status: long;


! We are going to make sure that all referenced environments were defined.
! We do this by looping through any environment reference bits whose number is
! higher than the highest defined environment.

if .highest_ref_env gtr .highest_def_env then (
	anl$format_error(anl$_objundefenv);
	incru i from .highest_def_env+1 to .highest_ref_env do (
		if .env_ref_bits[.i] then
			anl$format_error(anl$_objbadnum,.i);
	);
);

! Now we can reset everything for the next module.

highest_def_env = highest_ref_env = -1;
if .env_ref_bits neqa 0 then (
	status = lib$free_vm(%ref(65536/8),env_ref_bits);
	check (.status,.status);
	env_ref_bits = 0;
);

return;

end;

end eludom
