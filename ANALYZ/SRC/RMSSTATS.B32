%title 'RMSSTATS - Calculate and Report File Statistics'
	module rmsstats (
			ident='V03-003') = begin

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! Facility:	VAX/VMS Analyze Facility, Calculate and Report File Statistics
!
! Abstract:	This module is responsible for accumulating, calculating, and
!		reporting statistics about RMS files.  This includes both the
!		analysis primaries for FDL files, and statistics reports.
!
!
! Environment:
!
! Author: Paul C. Anagnostopoulos, Creation Date: 11 August 1981
!
! Modified By:
!
!	V03-003	PCA0064		Paul Anagnostopoulos	29-Mar-1982
!		Use quadword arithmetic when calculating percentages
!		so large files don't result in garbage numbers.
!
!	V03-002	PCA0063		Paul Anagnostopoulos	29-Mar-1982
!		Change calculation of index record statistics so they
!		are parallel to data record statistics.
!
!	V03-001	PCA0050		Paul Anagnostopoulos	26-Mar-1982
!		Fix a bug in the way data record compression was
!		calculated.
!--

%sbttl 'Module Declarations'
!
! Libraries and Requires:
!

library 'lib';
require 'rmsreq';

!
! Table of Contents:
!

forward routine
	anl$fdl_analysis_of_area: novalue,
	anl$fdl_analysis_of_key: novalue,
	anl$area_statistics: novalue,
	anl$key_statistics: novalue,
	anl$percentage,
	anl$bucket_callback: novalue,
	anl$reclaimed_bucket_callback: novalue,
	anl$index_callback: novalue,
	anl$data_callback: novalue;

!
! External References:
!

external routine
	anl$format_line,
	anl$format_skip;

external
	anl$gl_fat: ref block[,byte],
	anl$gw_prolog: word;

!
! Own Variables:
!
! The following variables are used to accumulate statistical data about
! the file we are currently analyzing.  The following abbreviations are
! used in the variable names:
!
!	blk	block
!	c	count
!	comp	compression
!	len	length
!	max	maximum
!	rec	record
!	t	total

own
	statistics_accumulators: vector[20,long] initial(rep 20 of (0));

! This variable accumulates data about a single area of an indexed file.

bind
	reclaimed_blk_c			= statistics_accumulators[ 0]: long;

! These variables accumulate data about a single key of an indexed file.
! There is a set of variables for the primary data level and a set for
! the index levels.

bind
	data_blk_c			= statistics_accumulators[ 1]: long,
	data_fill_t			= statistics_accumulators[ 2]: long,
	data_rec_c			= statistics_accumulators[ 3]: long,
	data_rec_len_t			= statistics_accumulators[ 4]: long,
	data_comp_key_len_t		= statistics_accumulators[ 5]: long,
	data_comp_rec_len_t		= statistics_accumulators[ 6]: long,
	data_sidr_ptr_c			= statistics_accumulators[ 7]: long,

	index_blk_c			= statistics_accumulators[ 8]: long,
	index_fill_t			= statistics_accumulators[ 9]: long,
	index_rec_c			= statistics_accumulators[10]: long,
	index_rec_len_t			= statistics_accumulators[11]: long,
	index_comp_rec_len_t		= statistics_accumulators[12]: long,
	max_depth			= statistics_accumulators[13]: long;

%sbttl 'ANL$FDL_ANALYSIS_OF_AREA - Generate ANALYSIS_OF_AREA Primary'
!++
! Functional Description:
!	This routine is responsible for generating an analysis primary for
!	an indexed file area.  This routine is called after the appropriate
!	statistics have been accumulated via the statistics callback
!	mechanism described below.
!
! Formal Parameters:
!	area_id		The ID of this area.
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	none
!
! Side Effects:
!
!--


global routine anl$fdl_analysis_of_area(area_id): novalue = begin


! We begin with a heading which includes the area ID.

anl$format_skip(0);
anl$format_line(0,0,anl$_fdlanalarea,.area_id);

! Now we put out the statistic that says how many blocks worth of
! reclaimed space there is.

anl$format_line(0,1,anl$_fdlrecl,.reclaimed_blk_c);

! Clear the statistics accumulators for the next area.

ch$fill(%x'00', %allocation(statistics_accumulators),statistics_accumulators);

return;

end;

%sbttl 'ANL$FDL_ANALYSIS_OF_KEY - Generate FDL Analysis Primary'
!++
! Functional Description:
!	This routine is responsible for generating an analysis primary for
!	an indexed file key.  This routine is called after the appropriate
!	statistics have been accumulated via the statistics callback 
!	mechanism described below.
!
! Formal Parameters:
!	key_bsd		Address of BSD describing the key.
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	none
!
! Side Effects:
!
!--


global routine anl$fdl_analysis_of_key(key_bsd): novalue = begin

bind
	k = .key_bsd: bsd;

local
	kp: ref block[,byte],
	data_bytes: long;


! We begin with a heading which includes the key ID.

kp = .k[bsd$l_bufptr] + .k[bsd$l_offset];
anl$format_skip(0);
anl$format_line(0,0,anl$_fdlanalkey,.kp[key$b_keyref]);

! If there are no data records in this index because it is uninitialized,
! then let's just put out a comment and quit.  Otherwise we'll have a
! lot of trouble with dividing by zero.

if .data_rec_c eqlu 0 then (
	anl$format_line(0,1,anl$_fdlnorecs);
	return;
);

! Now we put out the statistics for this index in alphabetical order.
! Some items only apply to primary or secondary indices.  Others only
! apply to prologue 3.

anl$format_line(0,1,anl$_fdldatafill,
	anl$percentage(.data_fill_t,.data_blk_c*512));
if .anl$gw_prolog eqlu plg$c_ver_3 then (
	anl$format_line(0,1,anl$_fdldatakeycomp,
		anl$percentage(.data_rec_c*.kp[key$b_keysz] - .data_comp_key_len_t,.data_rec_c*.kp[key$b_keysz]));
	data_bytes = .data_rec_len_t - .data_rec_c*.kp[key$b_keysz];
	anl$format_line(0,1,anl$_fdldatareccomp,
		anl$percentage(.data_bytes - .data_comp_rec_len_t,.data_bytes));
);
anl$format_line(0,1,anl$_fdldatarecs,
	.data_rec_c);
anl$format_line(0,1,anl$_fdldataspace,
	.data_blk_c);
anl$format_line(0,1,anl$_fdldepth,
	.max_depth);
if .kp[key$b_keyref] nequ 0 then
	anl$format_line(0,1,anl$_fdldupsper,
		(.data_sidr_ptr_c + .data_rec_c/2) /
			.data_rec_c);
if .anl$gw_prolog eqlu plg$c_ver_3 then
	anl$format_line(0,1,anl$_fdlidxcomp,
		anl$percentage(.index_rec_len_t - .index_comp_rec_len_t,.index_rec_len_t));
anl$format_line(0,1,anl$_fdlidxfill,
	anl$percentage(.index_fill_t,.index_blk_c*512));
anl$format_line(0,1,anl$_fdlidxspace,
	.index_blk_c);
anl$format_line(0,1,anl$_fdldatalenmean,
	(.data_rec_len_t + .data_rec_c/2) /
		.data_rec_c);
anl$format_line(0,1,anl$_fdlidxlenmean,
	(.index_rec_len_t + .index_rec_c/2) /
		.index_rec_c);

! Clear the statistics accumulators for the next key.

ch$fill(%x'00', %allocation(statistics_accumulators),statistics_accumulators);

return;

end;

%sbttl 'ANL$AREA_STATISTICS - Print Statistics for Area'
!++
! Functional Description:
!	This routine is called during /STATISTICS mode to print the
!	statistics for an indexed file area.  We are called after the
!	appropriate statistics have been accumulated via the statistics
!	callback mechanism described below.
!
! Formal Parameters:
!	area_id		The ID of this area.
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	none
!
! Side Effects:
!
!--


global routine anl$area_statistics(area_id): novalue = begin


! We begin with a heading which includes the area ID.

anl$format_skip(0);
anl$format_line(0,0,anl$_statarea,.area_id);
anl$format_skip(0);

! Now we put out the statistic that says how many blocks worth of
! reclaimed space there is.

anl$format_line(0,1,anl$_statrecl,.reclaimed_blk_c);

! Clear the statistics accumulators for the next area.

ch$fill(%x'00', %allocation(statistics_accumulators),statistics_accumulators);

return;

end;

%sbttl 'ANL$KEY_STATISTICS - Print Statistics for a Key'
!++
! Functional Description:
!	This routine is called during /STATISTICS mode to print the
!	statistics for an indexed file key.  We are called after the
!	appropriate statistics have been accumulated via the statistics
!	callback mechanism described below.
!
! Formal Parameters:
!	key_bsd		Address of BSD describing the key.
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	none
!
! Side Effects:
!
!--


global routine anl$key_statistics(key_bsd): novalue = begin

bind
	k = .key_bsd: bsd;

local
	kp: ref block[,byte],
	data_bytes: long;


! We begin with a heading which includes the key ID.

kp = .k[bsd$l_bufptr] + .k[bsd$l_offset];
anl$format_skip(0);
anl$format_line(0,0,anl$_statkey,.kp[key$b_keyref]);
anl$format_skip(0);

! If there are no data records in this index because it is uninitialized,
! then let's just put out a comment and quit.  Otherwise we'll have a
! lot of trouble with dividing by zero.

if .data_rec_c eqlu 0 then (
	anl$format_line(0,1,anl$_fdlnorecs);
	return;
);

! Now we put out the statistics for the index levels in a logical order.
! Some values only make sense for prologue 3.

anl$format_line(0,1,anl$_statdepth,
	.max_depth);
anl$format_line(0,1,anl$_statidxlenmean,
	(.index_rec_len_t + .index_rec_c/2) /
		.index_rec_c);
anl$format_line(0,1,anl$_statidxspace,
	.index_blk_c);
anl$format_line(0,1,anl$_statidxfill,
	anl$percentage(.index_fill_t,.index_blk_c*512));
if .anl$gw_prolog eqlu plg$c_ver_3 then
	anl$format_line(0,1,anl$_statidxcomp,
		anl$percentage(.index_rec_len_t - .index_comp_rec_len_t,.index_rec_len_t));

! Now we put out the statistics for the data records in a logical order.
! Some statistics only make sense for primary or secondary indices.
! Others make sense only for prologue 3.

anl$format_skip(0);
anl$format_line(0,1,anl$_statdatarecs,
	.data_rec_c);
if .kp[key$b_keyref] nequ 0 then
	anl$format_line(0,1,anl$_statdupsper,
		.data_sidr_ptr_c /
		  .data_rec_c);
anl$format_line(0,1,anl$_statdatalenmean,
	(.data_rec_len_t + .data_rec_c/2) /
		.data_rec_c);
anl$format_line(0,1,anl$_statdataspace,
	.data_blk_c);
anl$format_line(0,1,anl$_statdatafill,
	anl$percentage(.data_fill_t,.data_blk_c*512));
if .anl$gw_prolog eqlu plg$c_ver_3 then (
	anl$format_line(0,1,anl$_statdatakeycomp,
		anl$percentage(.data_rec_c*.kp[key$b_keysz] - .data_comp_key_len_t,.data_rec_c*.kp[key$b_keysz]));
	data_bytes = .data_rec_len_t - .data_rec_c*.kp[key$b_keysz];
	anl$format_line(0,1,anl$_statdatareccomp,
		anl$percentage(.data_bytes - .data_comp_rec_len_t,.data_bytes));
);

! If this is the primary key, then print an indication of the overall
! space efficiency.

anl$format_skip(0);
if .kp[key$b_keyref] eqlu 0 then
	anl$format_line(0,1,anl$_statefficiency,
		anl$percentage(.data_rec_len_t,.anl$gl_fat[fat$l_hiblk]*512));

! Clear the statistics accumulators for the next key.

ch$fill(%x'00', %allocation(statistics_accumulators),statistics_accumulators);

return;

end;

%sbttl 'ANL$PERCENTAGE - Calculate a Percentage'
!++
! Functional Description:
!	This routine is called to calculate a percentage.
!
! Formal Parameters:
!	dividend	The dividend in the percentage.
!	divisor		The divisor in the percentage.
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	The percentage.
!
! Side Effects:
!
!--


global routine anl$percentage(dividend,divisor)	= begin

local
	quadword: block[8,byte],
	quotient: signed long, remainder: signed long;

builtin
	emul, ediv;


! If the divisor is zero, then just return zero.

if .divisor eqlu 0 then
	return 0;

! Calculate the percentage using quadword arithmetic.

emul(dividend,%ref(100),%ref(0),quadword);
ediv(divisor,quadword,quotient,remainder);

return .quotient;

end;

!			STATISTICS CALLBACK ROUTINES
!
! The method by which we collect the statistics for an RMS file is known
! as statistics callback routines.  These are routines in this module
! which are "called back" by the various low-level structure analysis
! routines.  The analysis routines pass enough information so that the
! callback routines can accumulate raw statistical information.  After the
! analysis is finished, one of the statistics formatting routines
! (ANL$STATISTICS_FDL or ANL$STATISTICS_MODE) can calculate the final
! statistics and format them.
!
! When an analysis routine wants to call back a statistics routine, it
! uses the STATISTICS_CALLBACK macro.  This macro takes an arbitrary
! number of statements as its argument, and causes them to be executed
! only if the current mode does statistics (/FDL or /STATISTICS).

%sbttl 'ANL$BUCKET_CALLBACK - Statistics Callback for Buckets'
!++
! Functional Description:
!	This is the statistics callback routine for the analysis of a bucket.
!	We keep track of information about the buckets.
!
! Formal Parameters:
!	level		The level of this bucket.
!	blocks		Number of blocks in the bucket.
!	fill		Fill count for this bucket.
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	none
!
! Side Effects:
!
!--


global routine anl$bucket_callback(level,blocks,fill): novalue = begin


! We need to keep track of the space occupied and the data fill count.
! It's done separately for data and index.

if .level eqlu 0 then (
	data_blk_c = .data_blk_c + .blocks;
	data_fill_t = .data_fill_t + .fill;
) else (
	index_blk_c = .index_blk_c + .blocks;
	index_fill_t = .index_fill_t + .fill;
);

return;

end;

%sbttl 'ANL$RECLAIMED_BUCKET_CALLBACK - Statistics Callback for Reclaimed'
!++
! Functional Description:
!	This is the statistics callback routine for reclaimed buckets 
!	hanging off an area descriptor.
!
! Formal Parameters:
!	blocks		Number of blocks in the bucket.
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	none
!
! Side Effects:
!
!--


global routine anl$reclaimed_bucket_callback(blocks): novalue = begin


! All we need to do is keep track of the number of reclaimed blocks.

reclaimed_blk_c = .reclaimed_blk_c + .blocks;

return;

end;

%sbttl 'ANL$INDEX_CALLBACK - Statistics Callback for Index Record'
!++
! Functional Description:
!	This is the statistics callback routine for an index record.  We
!	accumulate various information about the index.
!
! Formal Parameters:
!	level		Level of the index bucket.
!	record_len	Nominal length of the entire index record.
!	compressed_len	Compressed length of the entire index record.
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!
!
! Side Effects:
!
!--


global routine anl$index_callback(level,record_len,compressed_len): novalue = begin


! Count this index record.

increment (index_rec_c);

! We have to keep track of the total nominal record length, and the total 
! compressed record length.

index_rec_len_t = .index_rec_len_t + .record_len;
index_comp_rec_len_t = .index_comp_rec_len_t + .compressed_len;

! Now we must keep track of the maximum index depth.

max_depth = maxu(.max_depth,.level);

return;

end;

%sbttl 'ANL$DATA_CALLBACK - Statistics Callback for Data Records'
!++
! Functional Description:
!	This is the statistics callback routine for data records.  We 
!	accumulate various information about the records.
!
! Formal Parameters:
!	record_len		Nominal length of this data record.
!	compressed_key_len	Compressed length of the key.
!	compressed_data_len	Compressed length of the data bytes.
!	sidr_pointers		Count of pointers in this SIDR.
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	none
!
! Side Effects:
!
!--


global routine anl$data_callback(record_len,compressed_key_len,compressed_data_len,sidr_pointers): novalue = begin


! Count this data record.

increment (data_rec_c);

! Keep track of the total nominal record length, total compressed key length, 
! and total compressed data length.

data_rec_len_t = .data_rec_len_t + .record_len;
data_comp_key_len_t = .data_comp_key_len_t + .compressed_key_len;
data_comp_rec_len_t = .data_comp_rec_len_t + .compressed_data_len;

! For secondary data, keep track of the total number of SIDR pointers.

data_sidr_ptr_c = .data_sidr_ptr_c + .sidr_pointers;

return;

end;

end eludom
