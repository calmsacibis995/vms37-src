MODULE DBGLAN (	ADDRESSING_MODE (EXTERNAL = LONG_RELATIVE),
		IDENT = 'V03-000') =
BEGIN

!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:
!	DEBUG (DBG)
!
! ABSTRACT:
!	Changes DEBUG context to either FORTRAN, MACRO, BLISS, COBOL,
!	BASIC, PL/I or PASCAL.
!	Changes parse tables, where appropriate.
!
!
! ENVIRONMENT:
!	This module runs on VAX under STARLET, user mode, non-AST level.
!
! Version:	3.08
!
! History:
!	Author:
!		Carol Peters, July, 1977.
!
!	Modified by:
!		Dale Roedger, 22 November 1978
!		David Plummer, 6-10-80
!		David Plummer, 8-25-80
!		John Francis, 20 May 1981
!		Richard Title, 22 Oct 1981
!
! 1.01	31-AUG-78	MCC	Enabled BLISS language.
! 1.02  15-SEP-78	MCC	Added COBOL and BASIC to language_table, changed
!				"???_module" to "???_lang" references in dbg$language.
!				Made dbg$set_lang return value of language index. 
! 1.03	26-SEP-78	DAR	Made the table names external and removed the
!				require files for the grammar tables.
! 1.04	22-NOV-78	DAR	Implemented setting language to COBOL and BASIC.
! 1.05	20-SEP-79	JBD	Added BASIC+2 support.
! 1.06  10-JUN-80	DLP     Added PL/I and PASCAL languages
! 1.07	25-AUG-80	DLP	Cancel psuedos when changing languages
! 3.08	20-MAY-81	JF	Converted COBOL support to new style debugger
! 3.09	22-Oct-81	RT	Put in initialization of search settings (dbg$set_search_def)
!--

! TABLE OF CONTENTS:
!

FORWARD ROUTINE
	DBG$LANGUAGE,			! Produce name of given language.
	DBG$SET_LANG;			! Changes the DEBUG syntax

!
! INCLUDE FILES:
!
REQUIRE 'SRC$:DBGPROLOG.REQ';
 
REQUIRE 'SRC$:DBGGEN.REQ';
REQUIRE	'SRC$:COMTER.REQ';
REQUIRE 'SRC$:SYSSER.REQ';
!
! MACROS:
!
!++
!
! The keyword_table is made of four-tuple entries,
! 1) the language index (0 - n),
! 2) the number of characters in the minimal abbreviation,
! 3) the number of characters in the language name,
! 4) the language name as an ASCII string.
! 
! Macro KEY_NAME formats table entries for the language name table.
! Each entry has three formals:
! 1) the ASCII string representing a language name,
! 2) the length of that ASCII string abbreviated,
! 3) the  language index for that lanugage (-1 not yet implemented).
!--
MACRO
	key_name (kname, kabbrev, kequiv) =
			kequiv, kabbrev, %CHARCOUNT (kname), %ASCII kname%;

!
! EQUATED SYMBOLS:
!

LITERAL
	dbg_lan	= 0;		! diagnostic messages in dbg$set_lang
	
!
! OWN STORAGE:
!

BIND
	language_table 	= UPLIT BYTE (

	key_name ('MACRO',	2, 0),
	key_name ('FORTRAN',	2, 1),
	key_name ('BLISS',	2, 2),
	key_name ('COBOL',	2, 3),
	key_name ('BASIC',	2, 4),
	key_name ('PLI',	2, 5),
	key_name ('PASCAL',	2, 6),   

	0	) : VECTOR [, BYTE];

!

!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
	dbg$bli_get_lex: WEAK,			! BLISS lexical scanner
	dbg$bli_reductn: WEAK,			! BLISS action routines
	dbg$for_get_lex: WEAK,			! FORTRAN lexical scanner
	dbg$for_reductn: WEAK,			! FORTRAN action routines
	dbg$mar_get_lex: WEAK,			! MACRO lexical scanner
	dbg$mar_reductn: WEAK,			! MACRO action routines
	DBG$BP2_GET_LEX: WEAK,			! BASIC+2 lexical scanner
	DBG$BP2_REDUCTN: WEAK,			! BASIC+2 action routines
	dbg$set_mod_def,			! initializes mode settings
	dbg$ncancel_loc_and_val : NOVALUE,	! Cancels '.' and '\'
    	dbg$set_search_def : NOVALUE,		! inititialize search settings
	dbg$set_stp_def,			! initializes step settings
	dbg$tran_lexeme,			! translates lexeme into index
	dbg$nchange_to_old : NOVALUE,		! Switch to old debugger
	dbg$nchange_to_new : NOVALUE;		! Switch to new debugger

EXTERNAL
	MAR_STATE_TABLE,
	MAR_ACT_TABLE,
	MAR_POP_TABLE,
	MAR_LHS_TABLE,
	MAR_SEM_TABLE,
	FOR_STATE_TABLE,
	FOR_ACT_TABLE,
	FOR_POP_TABLE,
	FOR_LHS_TABLE,
	FOR_SEM_TABLE,
	BLI_STATE_TABLE,
	BLI_ACT_TABLE,
	BLI_POP_TABLE,
	BLI_LHS_TABLE,
	BLI_SEM_TABLE,
	BP2_STATE_TABLE,
	BP2_ACT_TABLE,
	BP2_POP_TABLE,
	BP2_LHS_TABLE,
	BP2_SEM_TABLE,
	dbg$gb_language: BYTE,			! holds the language index
	dbg$gl_get_lex,				! holds name of current get lex routine
	dbg$gl_partbptr: VECTOR,		! list of parse table addresses
	dbg$gl_reduc_rt;			! name of action routine for a syntax

GLOBAL ROUTINE dbg$set_lang (lang_str_desc, language_module)  =
!++
! Functional description:
!	This routine loads the pointers to the current parsing tables
!	with those of the new language.  The reduction routine and lexeme
!	collection routine addresses are also changed.
!
! Formal parameters:
!	lang_str_desc	- The address of a string descriptor that holds
!			  the new language name, or 0.
!	language_module	- If "lang_str_desc" is zero this parameter holds the
!			  language and module index number as defined in
!			  DBGGEN.REQ.
!			  0 = MACRO
!			  1 = FORTRAN
!			  2 = BLISS
!			  3 = COBOL
!			  4 = BASIC
!			  5 = PL/I
!			  6 = PASCAL
!
! Implicit inputs:
!	none
!
! Outputs:
!	none
!
! Implicit outputs:
!	The pointers to the parsing tables and to the action routines
!	are changed.
!
! Routine value:
!	The language index of the language to which DEBUG will be set.
!
! Side effects:
!	Signal if language name is not recognized or not yet supported.
!--

	BEGIN

	LOCAL
		count;

	IF (.lang_str_desc NEQ 0)		! Was routine called with descriptor?
	THEN
	    BEGIN
	    count = dbg$tran_lexeme ( .lang_str_desc, language_table);
	    IF (.count EQL alpha_str_token)
	    THEN
		SIGNAL (dbg$_nosuchlan, 1, .lang_str_desc);
	    IF (.count GTR max_language)
	    THEN
		SIGNAL (dbg$_notimplan, 1, dbg$language(.count));
	    END
	ELSE
	    count = .language_module;

%IF dbg_lan
%THEN
	$fao_tt_out ('language index is !SL', .count);
%FI

	! Set language and change debuggers, if indicated

	CASE .dbg$gb_language FROM 0 TO max_language OF
	    SET
	    [lang_macro,lang_fortran,lang_bliss,lang_basic] :	! Old languages
		CASE .count FROM 0 to max_language OF
		    SET
		    [lang_cobol,lang_pascal,lang_pli] :
			dbg$nchange_to_new();	! Changing from old to new
		    [inrange] :
			0;			! Both languages old-style
		    TES;
	    [lang_cobol,lang_pascal,lang_pli] :			! New languages
		CASE .count FROM 0 to max_language OF
		    SET
		    [lang_macro,lang_fortran,lang_bliss,lang_basic] :
			dbg$nchange_to_old();	! Changing from new to old
		    [inrange] :
			0;			! Both languages new-style
		    TES;
	    TES;

	! Change language setting

	dbg$gb_language = .count;

	! Load the parse tables if language is an old debugger language

	CASE .count FROM 0 TO max_language OF

	    SET

	    [lang_macro]:	! MACRO language
		BEGIN
		dbg$gl_partbptr [0] = mar_state_table;
		dbg$gl_partbptr [1] = mar_act_table;
		dbg$gl_partbptr [2] = mar_pop_table;
		dbg$gl_partbptr [3] = mar_lhs_table;
		dbg$gl_partbptr [4] = mar_sem_table;
		dbg$gl_get_lex = dbg$mar_get_lex;
		dbg$gl_reduc_rt = dbg$mar_reductn;
		END;


	    [lang_fortran]:	! FORTRAN language
	     	BEGIN
		dbg$gl_partbptr [0] = for_state_table;
		dbg$gl_partbptr [1] = for_act_table;
		dbg$gl_partbptr [2] = for_pop_table;
		dbg$gl_partbptr [3] = for_lhs_table;
		dbg$gl_partbptr [4] = for_sem_table;
		dbg$gl_get_lex = dbg$for_get_lex;
		dbg$gl_reduc_rt = dbg$for_reductn;
		END;


	    [lang_bliss]:	! BLISS language
		BEGIN
		dbg$gl_partbptr [0] = bli_state_table;
		dbg$gl_partbptr [1] = bli_act_table;
		dbg$gl_partbptr [2] = bli_pop_table;
		dbg$gl_partbptr [3] = bli_lhs_table;
		dbg$gl_partbptr [4] = bli_sem_table;
		dbg$gl_get_lex = dbg$bli_get_lex;
		dbg$gl_reduc_rt = dbg$bli_reductn;
		END;



	    [lang_basic]:	! BASIC+2
		BEGIN
		DBG$GL_PARTBPTR[0] = BP2_STATE_TABLE;
		DBG$GL_PARTBPTR[1] = BP2_ACT_TABLE;
		DBG$GL_PARTBPTR[2] = BP2_POP_TABLE;
		DBG$GL_PARTBPTR[3] = BP2_LHS_TABLE;
		DBG$GL_PARTBPTR[4] = BP2_SEM_TABLE;
		DBG$GL_GET_LEX = DBG$BP2_GET_LEX;
		DBG$GL_REDUC_RT = DBG$BP2_REDUCTN;
		END;

	    [INRANGE, OUTRANGE]:	! Do nothing since new debugger doesn't use tables
		BEGIN
		    0;
		END;

		TES;

	dbg$set_mod_def ();
	dbg$set_stp_def ();
    	dbg$set_search_def ();
	dbg$ncancel_loc_and_val ();

%IF dbg_lan
%THEN
	$fao_tt_out ('reduction routine is !XL', .dbg$gl_reduc_rt);
%FI
	RETURN .count;
	END;

GLOBAL ROUTINE dbg$language ( lang_encoding ) =
!++
! Functional Description:
!
!	Return a pointer to a counted string which is
!	the name of the given language.
!	This function exists simply to consolidate this nameing
!	translation into one place.
!
! Formal parameters:
!	lang_encoding	-The numeric encoding used internally to
!			 represent the language.  This is the same
!			 value that comes in the DST MODULE records for
!			 each language, and it is the same value that we
!			 store in DBG$GL_LANGUAGE.
!
! Routine value:
!	A pointer to a counted string, which names the indicated language.
!	The string "???" is returned if the given "lang_encoding" is foreign.
!
! Side Effects:
!	none.
!--
    BEGIN
	LOCAL
		LANG_NAME;

	!+
	! Just return the desired pointer.
	!-
	LANG_NAME = (SELECTONE .LANG_ENCODING OF
		    SET
		    [LANG_MACRO]:	UPLIT( %ASCIC 'MACRO' );
		    [LANG_FORTRAN]:	UPLIT( %ASCIC 'FORTRAN' );
		    [LANG_BLISS]:	UPLIT( %ASCIC 'BLISS' );
		    [LANG_COBOL]:	UPLIT( %ASCIC 'COBOL' );
		    [LANG_BASIC]:	UPLIT( %ASCIC 'BASIC' );
		    [LANG_PLI]:		UPLIT( %ASCIC 'PLI'   );
		    [LANG_PASCAL]:      UPLIT( %ASCIC 'PASCAL');
		    [OTHERWISE]:	UPLIT( %ASCIC '???' );
		    TES);
	RETURN(.LANG_NAME);
    END;


END
ELUDOM
