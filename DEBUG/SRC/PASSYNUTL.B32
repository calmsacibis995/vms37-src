MODULE	PASSYNUTL ( ! Utilities for Syntax Analysis for Pascal-Specific
		    ! Debugger Modules
		IDENT = 'V03-000'
		)=
BEGIN
!
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!
!++
!
! FACILITY:	VAX-11 PASCAL-SPECIFIC DEBUGGER MODULES
!
! ABSTRACT:
!
!	This module is the main portion of the Pascal-Plus recursive
!	descent Parser.
!
! ENVIRONMENT:	VAX/VMS user mode
!
! AUTHOR: Robert Gottlieb, CREATION DATE: 21-Jan-1980
!
! MODIFIED BY:	P. Hohensee	17-July-1980	Stolen from PASCAL-PLUS
!
!--

REQUIRE 'SRC$:PASPROLOG';
REQUIRE 'SRC$:PASSYNMAC';

!
! Table of Contents
!
FORWARD ROUTINE
	PAS$_Syn_Initialize	: NOVALUE,			! Initialize Lexical and Syntax Analysis
	PAS$_Scan_Token		: NOVALUE,			! Scanner used by kernal Pathname Parser
	PAS$_Backup_Scanner	: Syntax_Routine NOVALUE,	! Back up the scanner to just before
								! the current token. Any look-ahead
								! is eliminated
	PAS$_Get_Token		: Syntax_Routine NOVALUE,	! Advance to next token
	PAS$_Look_Ahead_Token	: Syntax_Routine NOVALUE,	! Look ahead N PAS$_Tokens
	Read_Token		:                NOVALUE;	! Translate next token to internal form

!
! EXTERNAL ROUTINES
!
EXTERNAL ROUTINE
	PAS$_Initialize_Tables	: NOVALUE,		! Initialize name, symbol, and type
							! table address offsets

	PAS$_Lex_Token		: NOVALUE;		! Lexical Analysis Routine

!
! EXTERNALs
!
EXTERNAL
	PAS$_Message_Vector	: LONG;			! Address of address of error message vector

!
! Lexical Analysis Global Storage
!
EXTERNAL
	PAS$_Scanning_Pathname	: BYTE UNSIGNED,	! True = Scanning a pathname
	PAS$_Default_Radix	: LONG,			! Default number radix
	PAS$_Lex_Column		: WORD UNSIGNED,	! Current Column Number
	PAS$_Lex_SrcDesc	: BLOCK [8, BYTE],	! Source Line Descriptor
	PAS$_Lex_LineDesc	: BLOCK [8, BYTE];	! Original Source Line Descriptor

!
! Semantic Analysis Global Storage
!
EXTERNAL
	PAS$_Is_Primary			: BYTE UNSIGNED,! True = in Primary Interpreter,
							! False = in Expression Interpreter

	PAS$_Current_Symbol_Header	: LONG,		! Pointer to symbol table head
	PAS$_Current_Symbol_Trailer	: LONG,		! Pointer to symbol table tail
	PAS$_Expr_Depth			: LONG,		! Current Expression Sttack Depth
	PAS$_Expr_Stack			: BLOCKVECTOR [Expr_Stack_Depth, Expr_S_Entry, BYTE]
		FIELD(Expression_Stack_Fields);		! Expression Stack

!
! GLOBAL Storage:
!
GLOBAL
	PAS$_Tokens			: VECTOR [4, LONG],	! Look-Ahead PAS$_Tokens
	PAS$_Token_Values		: NULLVECTOR [4, 16],	! Look-Ahead Values
	PAS$_Token_Types		: VECTOR [4, LONG],	! Look-Ahead Value Types
	PAS$_Token_Positions		: VECTOR [4, LONG],	! Look-Ahead Token Line Number
	PAS$_Look_Ahead			: LONG;			! # of PAS$_Tokens of Look-Ahead

GLOBAL ROUTINE PAS$_Syn_Initialize ( Input_Desc, Radix, Message_Vect, Is_Primary ) : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine initializes Lexical, Syntax and Semantic Analysis
!
! FORMAL PARAMETERS:
!
!	Input_Desc	- Address of a string descriptor for the source line
!	Radix		- Default Number Radix (in Kernal Debugger Form)
!	Message_Vect	- Address of a longword to contain the address of an
!			  error message vector
!	Is_Primary	- True	= Called by Primary Interpreter
!			  False	= Called by Expression Interpreter
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	The Lexical, Syntax, and Semantic Analysers are initialized
!--

    BEGIN

    BIND
	Message_Vector_Address	= .Message_Vect;

    ! Load the input string descriptor into global storage
    !
    MOVEBYTE(8, .Input_Desc, PAS$_Lex_LineDesc);
    MOVEBYTE(8, .Input_Desc, PAS$_Lex_SrcDesc);
    PAS$_Lex_Column	= 1;

    ! Set up default number radix
    !
    PAS$_Default_Radix =
	(CASE .Radix FROM MIN(DBG$K_DEFAULT, DBG$K_BINARY, DBG$K_OCTAL, DBG$K_DECIMAL, DBG$K_HEX) TO
			  MAX(DBG$K_DEFAULT, DBG$K_BINARY, DBG$K_OCTAL, DBG$K_DECIMAL, DBG$K_HEX) OF
	    SET
	    [DBG$K_DEFAULT, DBG$K_DECIMAL] :
		0;
	    [DBG$K_BINARY] :
		1;
	    [DBG$K_OCTAL] :
		3;
	    [DBG$K_HEX] :
		4;
	    [INRANGE, OUTRANGE] :
		Pascal_Bugcheck(PAS$K_ILLRAD);
	    TES);

    ! Set up Symbol Table chain
    !
    PAS$_Current_Symbol_Header = 0;
    PAS$_Current_Symbol_Trailer = 0;

    ! Save whether in Primary or Expression Interpreter
    !
    PAS$_Is_Primary = .Is_Primary;

    ! Clear expression stack
    !
    PAS$_Expr_Depth = -1;

    ! No error message vector to start with
    !
    Message_Vector_Address	= 0;
    PAS$_Message_Vector		= Message_Vector_Address;

    ! Not scanning pathname to start with
    !
    PAS$_Scanning_Pathname	= False;

    END;

GLOBAL ROUTINE PAS$_Scan_Token (Input_Desc, Token_Desc, Token_Kind) : NOVALUE =

!++
! FUNCTIONAL SPECIFICATION:
!
!	Scanner used by the Kernal Debugger Pathname Parser. It is assumed that
!	the caller of the Pathname Parser has saved the value of the input descriptor
!	passed to either the Primary or Expression Interpreters, since this
!	routine writes Input_Desc into it.
!
! FORMAL PARAMETERS:
!
!	Input_Desc	- The address of the input string descriptor
!	Token_Desc	- The address of a string descriptor to correspond to the token scanned
!	Token_Kind	- The address of a longword to contain the kind of token scanned
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
!--

    BEGIN
    GLOBAL REGISTER
	Token		= 8	: LONG,
	Token_Value	= 9	: LONG,
	Token_Type	= 10	: LONG,
	Token_Position	= 11	: LONG;

    MAP
	Input_Desc		: REF BLOCK [8, BYTE],		! Input string descriptor
	Token_Desc		: REF BLOCK [8, BYTE];		! Token string descriptor

    BIND
	Scanned_Token		= .Token_Kind;			! Kind of token scanned

    ! Set up for the scan
    !
    MOVEBYTE(8, .Input_Desc, PAS$_Lex_SrcDesc);
    PAS$_Lex_Column	= .Input_Desc[DSC$A_Pointer] - .PAS$_Lex_LineDesc[DSC$A_Pointer] + 1;
    PAS$_Look_Ahead	= 0;

    ! Scan the next token
    !
    PAS$_Get_Token();

    ! Find out what kind of token it is
    !
    SELECTONE .Token OF
	SET

	[Syn_K_Ident] :
	    BEGIN
	    BIND
		Name_Entry	= .Token_Value	: BLOCK [, BYTE] FIELD(NAM_Fields);

	    IF CH$EQL(2, UPLIT BYTE('DO'), .Name_Entry[NAM_Length], Name_Entry[NAM_First_Char])
	    THEN
		! 'DO' is a reserved word in the debugger
		!
		Scanned_Token = DBG$K_Tok_Inval
	    ELSE
		Scanned_Token = DBG$K_Tok_Id;
	    END;

	[Syn_K_Integer] :
	    Scanned_Token = DBG$K_Tok_Int;

	[Syn_K_Eof] :
	    Scanned_Token = DBG$K_Tok_Null;

	[Syn_K_Period] :
	    Scanned_Token = DBG$K_Tok_Dot;

	[Syn_K_$Label] :
	    Scanned_Token = DBG$K_Tok_Label;

	[Syn_K_$Line] :
	    Scanned_Token = DBG$K_Tok_Line;

	[Syn_K_Backslash] :
	    Scanned_Token = DBG$K_Tok_Bs;

	[Syn_K_$R0 TO Syn_K_$PSL] :
	    Scanned_Token = DBG$K_Tok_Reg;

	[OTHERWISE] :
	    Scanned_Token = DBG$K_Tok_Inval;

	TES;

    ! Set up the Token Descriptor
    !
    Token_Desc[DSC$W_Length]	= .PAS$_Lex_Column - .Token_Position;
    Token_Desc[DSC$A_Pointer]	= .PAS$_Lex_SrcDesc[DSC$A_Pointer] - (.PAS$_Lex_Column - .Token_Position);

    END;

GLOBAL ROUTINE PAS$_Backup_Scanner : Syntax_Routine NOVALUE =

!++
! FUNCTIONAL SPECIFICATION:
!
!	Backs up the scanner to just before the current token was scanned.
!	Any look-ahead is elminated. It is assumed that the current token is
!	on the current line (always true for the Debugger).
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	Lexical and Syntax Analysis Global Storage
!
! IMPLICIT OUTPUTS:
!
!	Lexical and Syntax Analysis Global Storage
!
! ROUTINE VALUE:
!
!	NONE
!
!--

    BEGIN
    EXTERNAL REGISTER
	Token			: LONG,
	Token_Value		: LONG,
	Token_Type		: LONG,
	Token_Position		: LONG;

    ! Back up the scanner
    !
    PAS$_Lex_SrcDesc[DSC$W_Length]	= .PAS$_Lex_SrcDesc[DSC$W_Length] +
					(.PAS$_Lex_Column - .Token_Position);
    PAS$_Lex_SrcDesc[DSC$A_Pointer]	= .PAS$_Lex_SrcDesc[DSC$A_Pointer] -
					(.PAS$_Lex_Column - .Token_Position);

    PAS$_Lex_Column			= .PAS$_Lex_Column -
					(.PAS$_Lex_Column - .Token_Position);

    ! Eliminate any look-ahead
    !
    PAS$_Look_Ahead = 0;

    ! Clear out token information
    !
    Token		= Syn_K_Error;
    Token_Value		= 0;
    Token_Type		= Lex_K_Error;

    PAS$_Tokens[0]		= .Token;
    PAS$_Token_Values[0]	= .Token_Value;
    PAS$_Token_Types[0]		= .Token_Type;

    END;

GLOBAL ROUTINE PAS$_Get_Token : Syntax_Routine NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine gets the next token in the input stream. It handles
!	Look-Ahead by keeping a buffer of input when needed
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	PAS$_Look_Ahead	- Count of Look-Ahead Elements
!
! IMPLICIT OUTPUTS:
!
!	PAS$_Look_Ahead	- Count of Look-Ahead ELements
!
! SIDE EFFECTS:
!
!	The routine READ_TOKEN may be called to get the next token
!--

    BEGIN
    EXTERNAL REGISTER
	Token			: LONG,
	Token_Value		: LONG,
	Token_Type		: LONG,
	Token_Position		: LONG;

    IF .PAS$_Look_Ahead GTR 0
    THEN

	! Just advance the elements and decrement the look-ahead counter
	!
	BEGIN
	PAS$_Look_Ahead = .PAS$_Look_Ahead - 1;
	INCR I FROM 0 TO .PAS$_Look_Ahead DO
	    BEGIN
	    PAS$_Tokens[.I]          = .PAS$_Tokens[.I+1];
	    PAS$_Token_Types[.I]     = .PAS$_Token_Types[.I+1];
	    PAS$_Token_Positions[.I] = .PAS$_Token_Positions[.I+1];
    
	    MOVELONG(4, PAS$_Token_Values[.I+1], PAS$_Token_Values[.I]);
	    END
	END
    ELSE

	! No advance PAS$_Tokens, just read the next one
	!
	Read_Token(.PAS$_Look_Ahead);

    ! Get values into registers
    !
    Token          = .PAS$_Tokens[0];
    Token_Value    = .(PAS$_Token_Values[0]);
    Token_Type     = .PAS$_Token_Types[0];
    Token_Position = .PAS$_Token_Positions[0];
    END;

GLOBAL ROUTINE PAS$_Look_Ahead_Token (N) : Syntax_Routine NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine verifies that the look-ahead elements are correctly
!	set for a look-ahead of "N"
!
! FORMAL PARAMETERS:
!
!	N		- The number of elements ahead to look
!
! IMPLICIT INPUTS:
!
!	Look-Ahead	- Current number of elements ahead
!
! IMPLICIT OUTPUTS:
!
!	Look_Ahead	- Current number of elements ahead
!
! SIDE EFFECTS:
!
!	The Look-Ahead buffers may be filled
!--

    BEGIN
    EXTERNAL REGISTER
	Token			: LONG,
	Token_Value		: LONG,
	Token_Type		: LONG,
	Token_Position		: LONG;

    IF .N GTRU 3
    THEN
	Pascal_BugCheck(PAS$K_PARSERR);

    IF .N GTR .PAS$_Look_Ahead
    THEN
	BEGIN
	INCR I FROM .PAS$_Look_Ahead + 1 TO .N DO
	    Read_Token(.I);
	PAS$_Look_Ahead = .N;
	END;

    END;

ROUTINE Read_Token ( Position ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine reads the next token from LEX_TOKEN into the specified
!	look-ahead slot.
!
! FORMAL PARAMETERS:
!
!	Position	- Specifies which look-ahead slot to use.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! SIDE EFFECTS:
!
!	The routine PAS$_LEX_TOKEN is called.
!--

    BEGIN

    LOCAL
	Symbol_Entry	: REF BLOCK [,BYTE] FIELD(Symbol_Fields);

    BIND
	I		= .POSITION,

	Syntax_Type	= UPLIT LONG(			! Lexical -> Syntax translations
				Syn_K_Ident,		! Lex_K_Name
				Syn_K_String,		! Lex_K_String
				Syn_K_Integer,		! Lex_K_Integer
				Syn_K_Float,		! Lex_K_Float_F
				Syn_K_Float,		! Lex_K_Float_D
				Syn_K_Float,		! Lex_K_Float_G
				Syn_K_Float,		! Lex_K_Float_H
				Syn_K_Eof)		! Lex_K_Eof
	    : VECTOR [8, LONG];

    ! Call Lex_Token to get the next input token
    !
    PAS$_Lex_Token (PAS$_Token_Types[I], PAS$_Token_Values[I], PAS$_Token_Positions[I]);

    ! Check for error token
    !
    IF .PAS$_Token_Types[I] EQL Lex_K_Error
    THEN
	PAS$_Tokens[I] = Syn_K_Error
    ELSE
	PAS$_Tokens[I] = .Syntax_Type[.PAS$_Token_Types[I] - 1];

    ! Names are funny, must handle specially
    !
    IF .PAS$_Token_Types[I] EQL Lex_K_Name
    THEN

	! If it is a reserved token, then use the token value. Otherwise, it is an Identifier
	!
	IF
	    (IF 0 NEQ (Symbol_Entry = .BLOCK[.(PAS$_Token_Values[I]), Nam_Pointer ; ,BYTE])
		THEN
		    .Symbol_Entry[Sym_Class] EQL Sym_K_Reserved_Word)
	THEN
	    PAS$_Tokens[I] = .Symbol_Entry[RESW_Token];

    END;
END
ELUDOM
