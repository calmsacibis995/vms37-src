.TITLE EXTNDMATH
.IDENT 'V03-000'


;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************

;++
; FACILITY: DEBUG
;
; ABSTRACT: 
;	This module implements checking for overflow in simple arithmetic
;	situations.
;
;
; REVISION HISTORY:
;
;--
	.PSECT	DBG$CODE,NOWRT,RD,EXE,SHR,LCL,REL,CON,PIC


.SBTTL DBG$NCHKOVER_SUB

;++
; FUNCTIONAL DESCRIPTION:
;
;	This routine does a longword subtract and then checks if
;	the result has produced an integer overflow. If it has
;	produced an integer overflow then r0 contains a 0 upon
;	return, otherwise r0 contains a 1 upon return from this routine.
;
; CALLING SEQUENCE:
;	4(AP)	- The second operand.
;	8(AP)	- The first operand.
;	12(AP)	- The result of the subtraction.
;
;
; IMPLICIT INPUTS:
;	NONE
;
;
; IMPLICIT OUTPUTS:
;	NONE
;
; ROUTINE VALUE:
;	WHATEVER IS IN R0
;
; SIDE EFFECTS:
;	NONE
;--


.ENTRY DBG$NCHKOVER_SUB ^M<>

    			subl3 	4(ap), 8(ap), @12(ap)	;subtract the two 
    							;operands
    			bvs	overflow		;if overflow then
    							;goto overflow
    			movl	#1, r0			;otherwise set up for
    							;successful return
    			ret				;and return 
    							;successfully


overflow:		clrl	r0			;set up for error 
    							;return
    			ret				;and return 
    							;unsuccessfully



.END 
