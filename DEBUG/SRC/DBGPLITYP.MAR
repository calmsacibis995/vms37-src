;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
	.title	dbgplityp
	.subtitle dbg$npli_type_conv
;
;GLOBAL ROUTINE DBG$NPLI_TYPE_CONV (source, target_radix, target_type, 
;++
; FUNCTIONAL DESCRIPTION:
;
;       Performs language specific and language independent type conversions.
;       These will be both internal-to-internal and internal-to-external in
;       nature. Source is described by a language specific value descriptor.
;       Target may be described by either a language specific value descriptor
;       or a VAX standard descriptor from the following set:
;
;       dsc$k_dtype_b 
;
;       dsc$k_dtype_w 
;
;       dsc$k_dtype_l
;
;       dsc$k_dtype_t
;
;       Note that this routine will be used to obtain the 'printable'
;	(external) value of the source as the result of EXAMINE commands. In
;	this case, the target descriptor will be a VAX standard descriptor of
;	type dsc$k_dtype_t.
;
; FORMAL PARAMETERS:
;
;       source          - A longword which contains the address of a language
;                         specific value descriptor
;       
;       target_radix    - A longword containing an integer encoding of the
;			  radix to be used when converting to a 'printable'
;			  value:
;
;               dbg$k_default (1)       - source language default radix
;
;               dbg$k_binary (2)        - binary radix
;
;               dbg$k_octal (8)         - octal radix
;
;               dbg$k_decimal (10)      - decimal radix
;
;               dbg$k_hex (16)          - hexadecimal radix
;
;                       Note that this parameter is significant ONLY when the
;                       object described by the source descriptor is to be
;                       converted to external format. A request for a binary,
;                       octal, or hex 'printable' value means to consider the
;                       value of source as a bit pattern to be translated to
;                       special characters. In this sense, the type of the
;			source value is not significant - only the length.
;			Values will therefore be displayed as unsigned
;			integers within the specified radix. Values will be
;			left-extended to nibble boundaries.
;       
;       target_type     - A longword containing an unsigned integer encoding of
;			  the type of information contained within the target
;			  parameter:
;
;               dbg$k_vax_desc (130)       - target contains the address of a
;                                            VAX standard descriptor
;
;                                            Note: The caller of
;					     dbg$nxxx_type_conv must assure
;					     that the dsc$a_pointer field of
;					     the descriptor contains the
;                                            address of an appropriately large
;                                            block of storage.
;
;               dbg$k_value_desc (122)     - target contains the address of a
;                                            language specific value descriptor
;
;               dbg$k_external_desc (129)  - target contains the address of
;                                            a VAX standard string descriptor.
;                                            This is a request to convert to
;                                            'printable' format. Conversion
;					     must include check for unprintable
;					     characters.
;
;       target          - A longword which contains the address of either a VAX
;                         standard descriptor, or a language specific value
;			  descriptor
;
;       message_vect    - The address of a longword to contain the address of
;                         a message argument vector as described on page 4-119
;			  of the VAX/VMS system reference, volume 1A
;
; IMPLICIT INPUTS:
;
;       NONE
;
; IMPLICIT OUTPUTS:
;
;       When this routine is called to obtain the 'printable' (external) value
;       of the source object, the target will contain the address of a VAX
;       standard string descriptor with length and pointer fields set to 0.
;       Dynamic storage must be obtained to contain the resulting ascii string.
;
;       In all other cases, this routine is not required to allocate storage to
;       contain the resulting value of a conversion request. Targets which are
;       described by VAX standard descriptors MUST contain the address of a
;       block of storage (the dsc$a_pointer field)
;       in which the resulting value of the conversion will be stored. 
;
;       Dynamic storage must be used to construct the message argument vector
;       upon a severe error return.
;
; ROUTINE VALUE:
;
;       unsigned integer longword completion code
;
; COMPLETION CODES:
;
;       STS$K_SUCCESS (1) - Success. Conversion performed.
;
;       STS$K_SEVERE  (4) - Failure. No conversion. Message argument vector
;                            constructed and returned.
;
; SIDE EFFECTS:
;
;       Informational messages such as string and number truncation may be 
;       issued during processing.
;
;--
;
	$dbglib
	$dscdef
	$stsdef
	$dbgdef
	$plidef
	$chfdef
ap_source        =  4			;parameter offset to source
ap_target_radix  =  8			;parameter offset to target radix
ap_target_type   = 12			;parameter offset to target type
ap_target        = 16			;parameter offset to target
ap_message_vect  = 20			;parameter offset to message vector
;
;    register use
;
;	r6	address of the address of free storage
;	r7	point to source value descriptor
;
	.psect	dbg$code,exe,nowrt,long,pic,shr
	.enable	local_block		;
	.entry	dbg$npli_type_conv,^m<r2,r3,r4,r5,r6,r7,r8>
	moval	conv_cdh,(fp)		;establish condition handler
;
;relocate value descriptor
;
	movl	ap_source(ap),r7	;point to value descriptor
	moval	pli_vd$a_ptr(r7),pli_vd$a_addr(r7) ;relocate data ptr ptr
	cmpb	#dbg$k_value_desc,dsc$b_dtype(r7) ;non-volatile source?
	bneq	5$			;branch if volatile
	moval	pli_vd$k_size(r7),pli_vd$a_ptr(r7) ;point to copied data
;
;determine target type
;
5$:	cmpl	#dbg$k_value_desc,ap_target_type(ap) ;pli value descriptor?
	bneq	10$			;branch if not a pli value descriptor
	brw	pli_val_desc		;branch if a pli value descriptor
10$:	cmpl	#dbg$k_external_desc,ap_target_type(ap) ;external format
	bneq	20$			;branch if not external format
	brw	external_format		;external format desired
20$:	cmpl	#dbg$k_vax_desc,ap_target_type(ap) ;vax standard descriptor?
	beql	40$			;branch if vax standard desired

	brw	bad_type		;must be bad parameter if not
;
;************************************************************************
;*		vax standard descriptor	given as target			*
;************************************************************************
;
40$:					;
; r6 points to 512 bytes of free zeroed storage
; target is vax standard descriptor
; target types currently supported are only:
; byte,word,long, ascii
;
	bsbw	radix_check		;make sure radix is decimal
	movl	#pli$k_never,r0		;default error code through this code.
	movl	ap_target(ap),r4	;point to target descriptor
	cvtbl	dsc$b_dtype(r4),r1	;get type of target
	bgeq	50$			;branch if within range
	brw	bug_check		;branch if illegal type
50$:	cmpl	r1,#<end_vax_to_pli-vax_to_pli_tbl>/2 ;bigger than table?
	blss	55$			;branch if ok
	brw	bug_check		;signal internal error
55$:	ashl	#1,r1,r1		;convert to word offset
	movab	vax_to_pli_tbl[r1],r1	;point to conversion information
	cvtbl	(r1)+,r2		;length of data (or case index if neg.)
	bgeq	60$			;branch if no descriptor required
	brw	70$			;branch if it requires a descriptor
60$:	movzbl	(r1),r3			;pli target code
	pushl	#0			;bit offset of target
	pushl	r2			;size of target
	pushl	r3			;type of target
	pushal	dsc$a_pointer(r4)	;pointer to data pointer of target
	moval	-16(sp),sp		;we are going to push 4 more longwords
	movc3	#16,pli_vd$a_addr(r7),(sp) ;move in the source description
	cmpl	#char_var_,pli_vd$l_type(r7) ;character varying?
	bneq	65$			;branch if nothing to do
	movl	@pli_vd$a_addr(r7),r8	;point to data
	cmpw	(r8),8(sp)		;current length, max length
	bgtru	65$			;branch if current length is illegal
					;(e.g. uninitialized) and use the
					;maximum length
	movzwl	(r8),8(sp)		;make the current size the size
65$:					;
	calls	#8,pli$cvrt_any		;call pli any-to-any routine
	movl	#sts$k_success,r0	;successful return
	ret				;
;
;needs a descriptor to make conversion
;right now only ascii text supported
;
70$:	cmpl	#-2,r2			;data type of text?
	beql	100$			;branch if ok
	movl	#pli$k_not_yet,r0	;otherwise not yet implemented
	brw	bug_check		;go signal error
;
;************************************************************************
;*		(printable) external format as target			*
;************************************************************************
;
external_format:			;
	cmpl	#pointer_,pli_vd$l_type(r7) ;pointer to printable output?
	beql	200$			;branch if source is pointer
	cmpl	#file_,pli_vd$l_type(r7) ;file to printable output?
	beql	300$			;branch if source is file
100$:
	movw	pli_vd$l_type(r7),-(sp) ;type of target
	movw	pli_vd$l_size(r7),-(sp) ;size of target
	calls	#1,pli_datatype_to_str_size ;get size of target in bytes
	blbs	r0,120$			;branch if ok
	ret				;
120$:					;
	addl3	#9,r1,r0		;setup to get memory
	ashl	#-2,r0,r0		;convert to longwords
	movl	r1,r2			;save the size of char var max. bytes
	bsbw	getmem			;get the required memory
	bsbw	radix_check		;make sure radix is decimal
	pushl	#0			;bit offset of target
	.disable local_block		;
	pushl	r2			;size of target
	pushl	#char_var_		;character varying target type
	moval	4(r6),(r6)		;point to the rest of the free
	pushl	r6			;push address of address of free
	moval	-16(sp),sp		;we are going to push 4 more longwords
	movc3	#16,pli_vd$a_addr(r7),(sp) ;move in the source description
	cmpl	#char_var_,pli_vd$l_type(r7) ;character varying?
	bneq	150$			;branch if nothing to do
	movl	@pli_vd$a_addr(r7),r8	;point to data
	cmpw	(r8),8(sp)		;current length, max length
	bgtru	150$			;branch if current length is illegal
					;(.e.g uninitialized) and use the
					;maximum length
	movzwl	(r8),8(sp)		;make the current size the size
150$:	calls	#8,pli$cvrt_any		;call pli any-to-any routine
	movl	(r6),r3			;point to varying string
160$:	movl	ap_target(ap),r0	;point to target descriptor
	movw	(r3)+,dsc$w_length(r0)	;put in actual length
	movl	r3,dsc$a_pointer(r0)	;put in address of start of string
	movl	#sts$k_success,r0	;successful return
	ret				;
;
;pointer to printable output
;
200$:	bsbw	get32			;get 32 bytes into register 6
	brw	long_out		;output longword in proper radix
;
;file to printable output
;
300$:	pushl	#0			;holds address of output string
	pushl	ap_message_vect(ap)	;pass along message vector
	pushal	4(sp)			;address of output string pointer
	movl	@pli_vd$a_addr(r7),r0	;point to file control block pointer
	pushl	(r0)			;pass address of file control block
	calls	#3,pli$$dbg_display_file ;get the text description
	blbs	r0,310$			;branch if ok
	ret				;
310$:	movl	(sp)+,r3		;point to the text (char varying)
	brw	160$			;merge with common code
;
;************************************************************************
;*	pli value descriptor is given as target				*
;************************************************************************
;
pli_val_desc:				;
	bsbw	radix_check		;make sure decimal radix
	movl	ap_target(ap),r6	;point to target descriptor
	moval	pli_vd$a_ptr(r6),pli_vd$a_addr(r6) ;relocate ptr to data ptr
;
;non computational data types are for source are special cased
;
	movl	pli_vd$l_type(r7),r0	;datatype of source
	cmpl	#pointer_,r0		;source is pointer?
	beql	20$			;branch if source is pointer
	cmpl	#file_,r0		;source is file?
	beql	30$			;branch if source is file
	cmpl	#structure_,r0		;source is structure?
	beql	99$			;branch if source is structure
	cmpl	#entry_,r0		;source is entry?
	beql	99$			;branch if source is entry
	cmpl	#label_,r0		;source is label?
	beql	99$			;branch if source is label
	cmpl	#area_,r0		;source is area?
	beql	99$			;branch if source is area
	cmpl	#offset_,r0		;source is offset?
	beql	99$			;branch if source is offset
10$:	moval	-32(sp),sp		;make room for all those arguments
	movc3	#16,pli_vd$a_addr(r6),16(sp) ;move in target description
;
; special case non-computational target datatypes. If they
; appear here (other than pointer which is a special case)
; we go signal "incompatible datatypes - conversion error"
; because we have already special cased the valid conversions
; by looking at special source datatypes
;
	movl	-12(r3),r0		;get target data type
	cmpl	#pointer_,r0		;look at target data type
	beql	90$			;branch if target is pointer
	cmpl	#file_,r0		;target is a file?
	beql	99$			;branch if target is file
	cmpl	#structure_,r0		;target is structure?
	beql	99$			;branch if target is structure
	cmpl	#entry_,r0		;target is entry?
	beql	99$			;branch if target is entry
	cmpl	#label_,r0		;target is label?
	beql	99$			;branch if target is label
	cmpl	#area_,r0		;target is area?
	beql	99$			;branch if target is area
	cmpl	#offset_,r0		;target is offset?
	beql	99$			;branch if target is offset
	brw	100$			;go copy source description
;
;special case:
;		pointer to pointer
;		file to file
;
;source is target
;
20$:	cmpl	#pointer_,pli_vd$l_type(r6) ;target is pointer?
	bneq	10$			;continue as normal if not
	brb	40$			;common proccessing
;
;source is file
;
30$:	cmpl	#file_,pli_vd$l_type(r6) ;target is file?
	bneq	10$			;continue as normal if not
40$:	movl	@pli_vd$a_addr(r7),r0	;address of source data
	movl	@pli_vd$a_addr(r6),r1	;address of target data
	movl	(r0),(r1)		;move 4 bytes
	brw 	160$			;successful return
;
;target is pointer, source is not pointer
;(treat target as fixed binary (31)
;
;***later
;	This allows us to call pli$cvrt_any but there is a problem that we must
;	represent system addresses as negative numbers.
;
90$:	movl	#fixed_bin_,-12(r3)	;jam in data type of fixed binary
	movl	#31,-8(r3)		;jam in precision of 31
	brb	100$			;go move in source description
99$:	brw	999$			;go signal incompatible data types
;
;move in source description and call pli runtime routine to convert
;computational datatypes
;
100$:	movc3	#16,pli_vd$a_addr(r7),(sp) ;move in source description
	cmpl	#char_var_,pli_vd$l_type(r7) ;character varying?
	bneq	150$			;branch if nothing to do
	movl	@pli_vd$a_addr(r7),r8	;point to data
	cmpw	(r8),8(sp)		;current length, max length
	bgtru	150$			;branch if current length is illegal
					;(.e.g uninitialized) and use the
					;maximum length
	movzwl	(r8),8(sp)		;make the current size the size
150$:					;
	calls	#8,pli$cvrt_any		;call pli any-to-any routine
160$:	movl	#sts$k_success,r0	;successful return
	ret				;
;
;illegal converstion because of the data types involved
;
999$:					;
	pushl	#dbg$_nocnvt		;incompatible datatypes, no convert
	calls	#1,dbg$nmake_arg_vect	;make the argument vector
	movl	r0,@ap_message_vect(ap)	;update vector pointer
	movl	#sts$k_severe,r0	;severe error
	ret				;
;************************************************************************
;*		utility routines					*
;************************************************************************
;
;upon exit
;r6 = address of 512 byte block of zeroed storage
;
get512:	movl	#128,r0			;512 bytes required = 128 longwords
getmem:	pushl	#0			;room for 1 longword
	pushl	ap_message_vect(ap)	;push address of message vector
	pushal	4(sp)			;address of longword to hold free ptr
	pushl	r0			;longwords required
10$:	calls	#3,dbg$nlist_freez	;get the storage
	blbs	r0,20$			;branch if ok
	movl	#sts$k_severe,r0	;severe error code
	ret				;
20$:	movl	(sp)+,r6		;point to free storage
	rsb				;
get32:	movl	#8,r0			;32 bytes requested
	brb	getmem			;merge with common code
;
;long_out outputs a longword in required radix
;
; upon entrance r6 points to 32 bytes of listed memory
;		r7 points to primary descriptor
;
; within this routine:
;	register	use
;	r3,r2		dividend
;	r4		divisor
;	r7		output pointer
;	r8		digit count
;
out_digit: .ascii /0123456789ABCDEF/
long_out:				;
	clrl	r3			;high order longword of dividend
	movl	@pli_vd$a_addr(r7),r2	;point to longword of data
	movl	(r2),r2			;get longword that is to be converted
	moval	32(r6),r7		;point past output vector
	movl	ap_target_radix(ap),r4	;radix to be used for output
	clrl	r8			;digit count initialized
	cmpl	#16,r4			;hex?
	beql	50$			;branch if hex
	cmpl	#10,r4			;decimal?
	beql	40$			;branch if decimal
	cmpl	#8,r4			;octal?
	beql	30$			;branch if octal
	cmpl	#2,r4			;binary
	beql	20$			;branch if octal
	cmpl	#1,r4			;default?
	bneq	10$			;branch if unknown radix
	movl	#10,r4			;default radix is decimal
	brb	40$			;go get decimal digit count
10$:	brw	bad_radix		;unknown radix, go bugcheck
20$:	addl2	#21,r8			;binary (32 digits)
30$:	incl	r8			;octal (11 digits)
40$:	addl2	#2,r8			;decimal (10 digits)
50$:	addl2	#8,r8			;hex (8 digits)
	movl	ap_target(ap),r0	;point to target descriptor
	movw	r8,dsc$w_length(r0)	;put in length of output string
100$:	ediv	r4,r2,r2,r5		;get remainder
	movb	out_digit[r5],-(r7)	;put in proper digit
	sobgtr	r8,100$			;do for all digits
	movl	r7,dsc$a_pointer(r0)	;address of first digit
	movl	#sts$k_success,r0	;successfull return
	ret				;
radix_check:				;
	cmpl	#dbg$k_default,ap_target_radix(ap) ;is radix specification ok?
	beql	10$			;branch if ok
	cmpl	#dbg$k_decimal,ap_target_radix(ap) ;decimal is ok too.
	beql	10$			;branch if ok
;***later check to see if the debugger should really have the target
;radix undefined on deposits
	tstl	ap_target_radix(ap)	;(undefined on deposits)
	beql	10$			;branch if ok
	bneq	bad_radix		;if not, then signal error
10$:	rsb				;
;
; internal coding error
;
bad_radix:				;
	pushl	#dbg$_ilradix		;conversion error	
	calls	#1,dbg$nmake_arg_vect	;make the argument vector
	movl	r0,@ap_message_vect(ap)	;update vector pointer
	movl	#sts$k_severe,r0	;severe error
	ret				;
bad_type: movl	#pli$k_type,r0		;bad type specified for parameter
bug_check:				;signal errors
	pushl	r0			;error type
	pushl	#1			;one fa0 argument
	pushl	#dbg$_debugbug		;pli debug module error
	calls	#3,lib$signal		;signal error
	ret				;should never return
;
;condition handler
;
conv_cdh: .word	^m<r2,r3,r4,r5> 	;pli conversion condition handler
	movl	chf$l_sigarglst(ap),r3	;point to signal arguments
	cmpl	#pli$_error,chf$l_sig_name(r3) ;is it a pli conversion error?
	beql	10$			;branch if so
	cmpl	#ss$_intovf,chf$l_sig_name(r3) ;integer overflow?
	beql	10$			;branch if integer overflow
	cmpl	#ss$_fltovf,chf$l_sig_name(r3) ;floating overflow?
	beql	10$			;branch if floating overflow
	cmpl	#ss$_decovf,chf$l_sig_name(r3) ;decimal overflow?
	beql	10$			;branch if decimal overflow
	cmpl	#ss$_fltund,chf$l_sig_name(r3) ;floating underflow
	beql	10$			;branch if floating underflow
	movl	#ss$_resignal,r0	;resignal the error
	ret				;
10$:					;pli conversion error
	movl	chf$l_mcharglst(ap),r4	;point to mechanism list
	$unwind_s chf$l_mch_depth(r4),20$ ;unwind the frames
	ret				;error
20$:	pushl	#0			;no fao arguments
	pushl	#dbg$_convert		;conversion error	
	calls	#2,dbg$nmake_arg_vect	;make the argument vector
	movl	r0,@ap_message_vect(ap)	;update vector pointer
	movl	#sts$k_severe,r0	;severe error
	ret				;
	.page
	.subtitle file display
;++
; facility:
;
;	VAX/VMS PL1 runtime library.
; abstract:
;
;	This module contains the routine for displaying the contents of a pl/i
;	file during a debug session.
;
; author: c. spitz 18-jul-79
;
; modified:
;
;--


;
; external definitions
;

	$deffcb				;define file control block offsets
	$defpl1rtcons			;define pl1 runtime constants
	$defkcb				;define key control block offsets
	$fabdef				;define fab offsets
	$namdef				;define nam offsets
	$rabdef				;define rab offsets

; local definitions
cr = 13
lf = 10
fname:	.ascii	/ filename = '/		;
fname_size = .-fname			;
new_line: .ascii /'/<cr><lf>/	/	;
new_line_size = .-new_line		;
opened:	.ascii	/ opened/		;
opened_size = .-opened			;
closed:	.ascii	/ closed/ 		;
closed_size = .-closed			;
stream:	.ascii	/ stream/		;
stream_size = .-stream			;
print:	.ascii	/ print/		;
print_size = .-print			;
record:	.ascii	/ record/		;
record_size = .-record			;
keyed:	.ascii	/ keyed/		;
keyed_size = .-keyed			;
seql:	.ascii	/ sequential/		;
seql_size = .-seql			;
direct:	.ascii	/ direct/		;
direct_size = .-direct			;
input:	.ascii	/ input/		;
input_size = .-input			;
output:	.ascii	/ output/		;
output_size = .-output			;
update:	.ascii	/ update/		;
update_size = .-update			;


;++
; pli$$dbg_display_file -- display a pl1 file for debug
;
; inputs:
;	0(ap) - number of parameters (3)
;	4(ap) - address of file control block
;	8(ap) - address for output string
;	12(ap) - message vector
; outputs:
;	a string is allocated with dbg$nlist_freez and filled with the infor-
;		mation to be displayed about the file.
;	@8(ap) - the address of the output string
; local register usage:
;	r3 - addr of next byte in output string
;--

	.enabl	lsb
fail:	pushl	#dbg$_invalfcb		;invalid file control block message
	calls	#1,dbg$nmake_arg_vect	;make the message vector
	movl	r0,@12(ap)		;put in message pointer
	movl	#sts$k_severe,r0	;severe return code
	ret				;return	
	.entry	pli$$dbg_display_file,^m<r2,r3,r4,r5,r6,r7,r8,r9>
	subl	#255,sp			;get room for the string temp
	movl	sp,r3			;init addr of next byte in output string
	movl	4(ap),r6		;get addr of file control block
	prober	#0,#fcb_c_len,(r6)	;probe the fcb
	beql	fail			;if eq, fail
	cmpw	fcb_w_revision(r6),#pli$c_version ;right version of the fcb?
	bneq	fail			;if neq, no, fail
	movzwl	fcb_w_ident_len(r6),r2	;get size of file's identifier
	beql	fail			;if eql, fail
	cmpl	r2,#31			;is length too big?
	bgtr	fail			;if gtr, yes, fail
	movc3	r2,fcb_b_ident_nam(r6),(r3) ;copy name to output string
	movab	fcb_b_nam(r6),r7	;get addr of name block
	movzbl	nam$b_rsl(r7),r8	;is there a resultant name string?
	bneq	10$			;if neq, yes, cont
	movzbl	nam$b_esl(r7),r8	;use expanded name string
	beql	20$			;if eql, no rms name
10$:	movc3	#fname_size,fname,(r3)	;set " filename: "
	movc3	r8,fcb_b_esa(r6),(r3)	;set rms file name
	movc3	#new_line_size,new_line,(r3) ;get a new line
20$:	movl	fcb_l_attr(r6),r9	;get file attributes
	bbc	#atr_v_opened,r9,30$	;if file is not opened, cont
	movc3	#opened_size,opened,(r3) ;set " opened"
	brb	40$			;cont
30$:	movc3	#closed_size,closed,(r3) ;set " closed"
	movl	fcb_l_dttr(r6),r9	;use declared attributes
40$:	bbc	#atr_v_input,r9,200$	;if not input, cont
	movc3	#input_size,input,(r3)	;set " input"
200$:	bbc	#atr_v_output,r9,210$	;if not output, cont
	movc3	#output_size,output,(r3) ;set " output"
210$:	bbc	#atr_v_update,r9,220$	;if not update, just return
	movc3	#update_size,update,(r3) ;set " update"
220$:	bbc	#atr_v_stream,r9,230$ 	;if not stream, cont
	movc3	#stream_size,stream,(r3) ;set " stream"
230$:	bbc	#atr_v_print,r9,50$ 	;if not print, cont
	movc3	#print_size,print,(r3)	;set " print"
50$:	bbc	#atr_v_record,r9,60$	;if not record, cont
	movc3	#record_size,record,(r3) ;set " record"
60$:	bbc	#atr_v_keyed,r9,110$ 	;if not keyed, cont
	movc3	#keyed_size,keyed,(r3)	;set " keyed"
110$:	bbc	#atr_v_seql,r9,120$ 	;if not seql, cont
	movc3	#seql_size,seql,(r3)	;set " sequential"
120$:	bbc	#atr_v_direct,r9,done 	;if not direct, cont
	movc3	#direct_size,direct,(r3) ;set " direct"
done:	subl3	sp,r3,r7		;get length of string
	addl3	#5,r7,r3		;add in length word and round up to
	ashl	#-2,r3,r3		;get number of longwords needed
	pushl	12(ap)			;set message vector
	pushl	8(ap)			;set addr to get string address
	pushl	r3			;set number of longwords needed
	calls	#3,g^dbg$nlist_freez	;get the storage
	blbs	r0,125$			;branch if ok
	ret				;
125$:	movl	@8(ap),r3		;get addr of the storage
	movw	r7,(r3)+		;insert length
	movc3	r7,(sp),(r3)		;store the output string
	movl	#sts$k_success,r0	;successful return
	ret				;
	.dsabl	lsb
	.end
