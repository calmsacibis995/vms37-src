MODULE	PASLEXTOK ( ! Lexical Analysis Main Routines
	IDENT = 'V03-000'
	)=
BEGIN
!
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!
!++
!
! FACILITY:	VAX-11 PASCAL-SPECIFIC DEBUGGER MODULES
!
! ABSTRACT:
!
!	This module contains the Lexical Analysis routines that interface
!	to the I/O System, do Name Table lookup/entry, convert values to
!	internal numbers, etc.
!
! ENVIRONMENT:	VAX/VMS user mode
!
! AUTHOR: R. Gottlieb, CREATION DATE: 15-Nov-1979
!
! MODIFIED BY:	P. Hohensee	16-July-1980	Stolen from PASCAL-PLUS
!
!--

REQUIRE 'SRC$:PASPROLOG';

LINKAGE
    Lex_Char_Call	= CALL : GLOBAL(Char_Column = 9,
	Char_Length = 10, Char_Pointer = 11) NOPRESERVE(0,1,2,3);

!
!	Table of Contents
!
FORWARD ROUTINE
    PAS$_LEX_Token	: NOVALUE,		! Get next Token
    PAS$_LEX_Enter_Name,			! Enter a Symbol in the Symbol Table
    LEX_QUOTE		: Lex_Char_Call,	! Extract Simple Quoted String
    LEX_RADIX		: Lex_Char_Call,	! Convert Rad Value to Number
    LEX_NUMBER		: Lex_Char_Call,	! Convert Number to Value
    LEX_SCANC		: Lex_Char_Call,	! SCANC Instruction
    LEX_SPANC		: Lex_Char_Call;	! SPANC Instruction

!
! EXTERNAL ROUTINES
!
EXTERNAL ROUTINE
	PAS$_Get_Symbol;		! Look up a name in the Debugger RST

!
! EXTERNAL Storage
!
EXTERNAL
    PAS$_Message_Vector	: LONG,			! Address of address of error message vector

    PAS$_Scanning_Pathname	: BYTE UNSIGNED,! True = Scanning a pathname
    PAS$_Default_Radix	: LONG,			! Default number radix

    PAS$_Lex_Column	: WORD UNSIGNED,	! Current Column Number
    PAS$_Lex_Hash_Table	: VECTOR [Lex_Hash_Bucket, LONG],
						! Hash Table for Names
    PAS$_Lex_SrcDesc	: BLOCK [8, BYTE],	! Descriptor for Current Line
    PAS$_Lex_LineDesc	: BLOCK [8, BYTE];	! Descriptor for Original Line

!
! Name Table entries for Tokens
!
EXTERNAL
    PAS$_LRW_$Assign,
    PAS$_LRW_$CloseBrkt,
    PAS$_LRW_$CloseParen,
    PAS$_LRW_$Colon,
    PAS$_LRW_$Comma,
    PAS$_LRW_$Divide,
    PAS$_LRW_$Equal,
    PAS$_LRW_$Greater,
    PAS$_LRW_$GreatEqual,
    PAS$_LRW_$Less,
    PAS$_LRW_$LessEqual,
    PAS$_LRW_$Minus,
    PAS$_LRW_$Multiply,
    PAS$_LRW_$NotEqual,
    PAS$_LRW_$OpenBrkt,
    PAS$_LRW_$OpenParen,
    PAS$_LRW_$Period,
    PAS$_LRW_$Plus,
    PAS$_LRW_$Semicolon,
    PAS$_LRW_$Subrange,
    PAS$_LRW_$UpArrow,
    PAS$_LRW_$Power,

    PAS$_LRW_$$Line,
    PAS$_LRW_$$Label,

    PAS$_LRW_$Backslash,

    PAS$_LRW_$$R0,
    PAS$_LRW_$$R1,
    PAS$_LRW_$$R2,
    PAS$_LRW_$$R3,
    PAS$_LRW_$$R4,
    PAS$_LRW_$$R5,
    PAS$_LRW_$$R6,
    PAS$_LRW_$$R7,
    PAS$_LRW_$$R8,
    PAS$_LRW_$$R9,
    PAS$_LRW_$$R10,
    PAS$_LRW_$$R11,
    PAS$_LRW_$$AP,
    PAS$_LRW_$$FP,
    PAS$_LRW_$$SP,
    PAS$_LRW_$$PC,
    PAS$_LRW_$$PSL;


!
! LITERALs in the source
!
LITERAL
    CR			= 13,			! Carriage Return
    QUOTE		= 39;			! Quote Character

MACRO
    ERROR_TOKEN =
	(.Type = Lex_K_Error;
	 .Data_Ptr = 0;
	 PAS$_Lex_SrcDesc[DSC$W_LENGTH]		= .Char_Length;
	 PAS$_Lex_SrcDesc[DSC$A_POINTER]	= .Char_Pointer;
	 PAS$_Lex_Column			= .Char_Column;
	 RETURN) %,

    TOKEN(Token_Name, Token_Length) =
	(Item_Pointer = %NAME('PAS$_LRW_$',Token_Name);
	 Item_Length = Token_Length; EXITLOOP) %;

!
! Character -> Class Index
!
BIND
    Lex_Type_Table = UPLIT BYTE(
	REP 9 OF (0), LEX_M_Space, 0, 0, REP 2 OF (LEX_M_Space),
	REP 18 OF (0), LEX_M_Space, REP 15 OF (0),
	REP 2 OF (LEX_M_Hex OR LEX_M_Decimal OR LEX_M_Octal OR LEX_M_Binary),
	REP 6 OF (LEX_M_Hex OR LEX_M_Decimal OR LEX_M_Octal),
	REP 2 OF (LEX_M_Hex OR LEX_M_Decimal), REP 7 OF (0),
	REP 6 OF (LEX_M_Hex OR LEX_M_Ident),
	REP 20 OF (Lex_M_Ident), REP 4 OF (0), Lex_M_Ident, 0,
	REP 6 OF (Lex_M_Hex OR Lex_M_Ident), 
	REP 20 OF (Lex_M_Ident),
	REP 133 OF (0))
	    : VECTOR [256,BYTE];

!
! Upcase, etc.
!
BIND
    Translate_Table = UPLIT BYTE(		! Translate Table
	REP 36 OF (0), %C'$', REP 11 OF (0), %C'0', %C'1',
	%C'2', %C'3', %C'4', %C'5', %C'6', %C'7', %C'8', %C'9',
	REP 7 OF (0), %C'A', %C'B', %C'C', %C'D', %C'E', %C'F',
	%C'G', %C'H', %C'I', %C'J', %C'K', %C'L', %C'M', %C'N',
	%C'O', %C'P', %C'Q', %C'R', %C'S', %C'T', %C'U', %C'V',
	%C'W', %C'X', %C'Y', %C'Z', REP 4 OF (0), %C'_',     0,
	%C'A', %C'B', %C'C', %C'D', %C'E', %C'F', %C'G', %C'H',
	%C'I', %C'J', %C'K', %C'L', %C'M', %C'N', %C'O', %C'P',
	%C'Q', %C'R', %C'S', %C'T', %C'U', %C'V', %C'W', %C'X',
	%C'Y', %C'Z', REP 5 OF (0))
	    : VECTOR [256,BYTE];


GLOBAL ROUTINE PAS$_LEX_Token(Type, Data_Ptr, Position) : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine is the main Lexical Analyser routine.
!
! FORMAL PARAMETERS:
!
!	TYPE		- The Type returned (Name table entry, String, ...)
!	DATA_PTR	- A pointer to where to place the returned value
!	POSITION	- The column position at which the beginning of the token is found
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	The input string is scanned during the calls to PAS$_LEX_TOKEN
!
!--

    BEGIN

    GLOBAL REGISTER
	Char_Column	=  9 : WORD UNSIGNED,		! Current Column in Line
	Char_Length	= 10 : WORD UNSIGNED,		! Width left in the Line
	Char_Pointer	= 11 : REF VECTOR [,BYTE];	! Pointer to Current Character

    LOCAL
	Item_Length	: WORD UNSIGNED,		! Width of the Item
	Item_Pointer	: REF BLOCK [,BYTE];		! Pointer to Name Block Entry

    Char_Column  = .PAS$_Lex_Column;				! Copy current column,
    Char_Length  = .PAS$_Lex_SrcDesc[DSC$W_LENGTH];		!    string length,
    Char_Pointer = .PAS$_Lex_SrcDesc[DSC$A_POINTER];		!    string pointer

    !
    ! Loop for each Record
    !
    REPEAT
	BEGIN

	!
	! No characters left in the record, return eof.
	!
	IF .Char_Length EQL 0
	THEN
	    BEGIN
	    (.Type) = Lex_K_Eof;
	    PAS$_Lex_SrcDesc[DSC$W_LENGTH] 	= 0;
	    PAS$_Lex_SrcDesc[DSC$A_POINTER]	= .Char_Pointer;
	    PAS$_Lex_Column			= .Char_Column;
	    .Position				= .Char_Column;
	    RETURN;
	    END;

	! Mark column for start of token
	!
	.Position = .Char_Column;

	!
	! Case on the next character
	!
	CASE .Char_Pointer[0] FROM 0 TO 127 OF
	    SET

	    !
	    ! Identifiers
	    !
	[%C'A' to %C'Z', %C'a' TO %C'z', %C'$', %C'_'] :
	    BEGIN
	    LOCAL
		Name_Length	: WORD UNSIGNED,
		Name_Descr	: BLOCK [8, BYTE],
		Name_Buffer	: VECTOR [31, BYTE];

	    !
	    ! Skip past all valid Identifier Characters
	    !
	    Name_Length  = .Char_Length;
	
	    PAS_MOVTUC(Char_Length, .Char_Pointer, 0, Translate_Table,
		%REF(31), Name_Buffer, Char_Length, Char_Pointer);
	    LEX_SPANC(Lex_M_Ident OR Lex_M_Decimal);
	
	    IF (Name_Length = .Name_Length - .Char_Length) GTR 31
	    THEN
		Name_Length     = 31;
	
	    Char_Column = .Char_Column + .Name_Length;

	    ! Build a Name Descriptor
	    !
	    Name_Descr[DSC$W_Length]  = .Name_Length;
	    Name_Descr[DSC$B_DType]   = DSC$K_DType_T;
	    Name_Descr[DSC$B_Class]   = DSC$K_Class_S;
	    Name_Descr[DSC$A_Pointer] = Name_Buffer;

	    ! Enter the Name
	    !
	    Item_Pointer = PAS$_LEX_Enter_Name(Name_Descr);
	    Item_Length  = 0;

	    EXITLOOP
	    END;

	    !
	    ! Skip Spaces and CR
	    !
	[CR, %C' '] :
		LEX_SPANC(LEX_M_Space);

	[%C'('] :    Token(OpenParen,	1);

	[%C'+'] :    Token(Plus,	1);

	[%C'-'] :    Token(Minus,	1);

	[%C'/'] :    Token(Divide,	1);

	[%C'='] :    Token(Equal,	1);

	[%C')'] :    Token(CloseParen,	1);

	[%C'['] :    Token(OpenBrkt,	1);

	[%C']'] :    Token(CloseBrkt,	1);

	[%C','] :    Token(Comma,	1);

	[%C';'] :    Token(Semicolon,	1);

	[%C'^'] :    Token(UpArrow,	1);

	[%C'\'] :    Token(Backslash,	1);

	    !
	    ! Either "*" or "**"
	    !
	[%C'*'] :
	    IF
		IF .Char_Length GEQ 2
		THEN
		    .Char_Pointer[1] EQLU %C'*'
	    THEN
		Token(Power, 2)
	    ELSE
		Token(Multiply, 1);

	    !
	    ! Either "<", "<>",  or "<="
	    !
	[%C'<'] :
	    IF
		IF .Char_Length GEQ 2
		THEN
		    SELECTONE .Char_Pointer[1] OF
			SET
		[%C'=']:     (Item_Pointer = PAS$_LRW_$LessEqual; TRUE);
		[%C'>']:     (Item_Pointer = PAS$_LRW_$NotEqual;  TRUE);
		[OTHERWISE]: (FALSE);
			TES
	    THEN
		BEGIN
		Item_Length   = 2;
		EXITLOOP
		END
	    ELSE
		Token(Less, 1);

	    !
	    ! Either ">" or ">="
	    !
	[%C'>'] :
	    IF
		IF .Char_Length GEQ 2
		THEN
		    .Char_Pointer[1] EQLU %C'='
	    THEN
		Token(GreatEqual, 2)
	    ELSE
		Token(Greater, 1);

	    !
	    ! Period (.)
	    !
	[%C'.'] :
	    IF NOT
		(IF .Char_Length GEQ 2
		THEN
		    SELECTONE .Char_Pointer[1] OF
			SET

	      [%C'.'] :	BEGIN
			Token(Subrange, 2);
			True
			END;

     [%C'0' TO %C'9'] :	IF NOT .PAS$_Scanning_Pathname
			THEN
			    BEGIN
			    Lex_Number(.Type, .Data_Ptr);
			    RETURN;
			    END
			ELSE
			    False;

	  [OTHERWISE] : False;
			TES)
	    THEN
		Token(Period, 1);

	    !
	    ! Number (0 - 9)
	    !
	[%C'0' TO %C'9'] :
	    BEGIN

	    IF .PAS$_Default_Radix EQL 0
	    THEN
		Lex_Number(.Type, .Data_Ptr)
	    ELSE
		BEGIN
		!
		! Back up the scanner two characters to compensate for
		! Lex_Radix moving it forward two characters (kluge)
		!
		Char_Column	= .Char_Column - 2;
		Char_Length	= .Char_Length + 2;
		Char_Pointer	= .Char_Pointer - 2;

		(.Data_Ptr) = Lex_Radix(.PAS$_Default_Radix);
		(.Type)     = Lex_K_Integer;

		PAS$_Lex_SrcDesc[DSC$W_LENGTH]  = .Char_Length;
		PAS$_Lex_SrcDesc[DSC$A_POINTER] = .Char_Pointer;
		PAS$_Lex_Column                 = .Char_Column;
		END;

	    RETURN;
	    END;

	    !
	    ! %X, %O, %B, %LINE, %LABEL, %R0 - %PSL
	    !
	[%C'%'] :
	    IF NOT
		(IF .Char_Length GEQ 2
		THEN
		    SELECTONEU .Translate_Table[.Char_Pointer[1]] OF
			SET
		  [0] :	False;

		    !
		    ! Hexadecimal Constant
		    !
	      [%C'X'] : BEGIN

			! Extract and Convert the String
			!
			(.Data_Ptr) = Lex_Radix(4);
			(.Type)     = Lex_K_Integer;

			PAS$_Lex_SrcDesc[DSC$W_LENGTH]  = .Char_Length;
			PAS$_Lex_SrcDesc[DSC$A_POINTER] = .Char_Pointer;
			PAS$_Lex_Column                 = .Char_Column;

			RETURN
			END;

			!
			! Octal Constant
			!
	      [%C'O'] : BEGIN

			! Extract and Convert the String
			!
			(.Data_Ptr) = Lex_Radix(3);
			(.Type)     = Lex_K_Integer;

			PAS$_Lex_SrcDesc[DSC$W_LENGTH]  = .Char_Length;
			PAS$_Lex_SrcDesc[DSC$A_POINTER] = .Char_Pointer;
			PAS$_Lex_Column                 = .Char_Column;

			RETURN
			END;

			!
			! Binary Constants
			!
	      [%C'B'] : BEGIN

			! Extract and Convert the String
			!
			(.Data_Ptr) = Lex_Radix(1);
			(.Type)     = Lex_K_Integer;

			PAS$_Lex_SrcDesc[DSC$W_LENGTH]  = .Char_Length;
			PAS$_Lex_SrcDesc[DSC$A_POINTER] = .Char_Pointer;
			PAS$_Lex_Column                 = .Char_Column;

			RETURN
			END;

			!
			! Check for Identifiers ('LINE', 'LABEL', 'R0' - 'PSL')
			! 
	  [OTHERWISE] :

			BEGIN
			LOCAL
			    Name_Length		: WORD UNSIGNED,
			    Name_Pointer	: REF VECTOR [,BYTE],
			    Name_Buffer		: VECTOR [31,BYTE];

			! Translate and move
    			!
			Name_Length  = .Char_Length  - 1;
			Name_Pointer = .Char_Pointer + 1;

			PAS_MOVTUC(Name_Length, .Name_Pointer, 0, Translate_Table,
			    %REF(31), Name_Buffer, Char_Length, Char_Pointer);
			Lex_Spanc(Lex_M_Ident OR Lex_M_Decimal);

			! Compute the Name Length
			!
			IF (Name_Length = .Name_Length - .Char_Length) GTR 31
			THEN
			    Name_Length = 31;

			Char_Column = .Char_Column + .Name_Length + 1;

			! See if a valid Identifier
			!
			IF NOT (
			    SELECTONE .Name_Length OF
			    SET

		      [2] : BEGIN
			    IF CH$EQL(2, Name_Buffer[0], 2, UPLIT BYTE('R0'))
			    THEN
				Token($R0,	0)
			    ELIF CH$EQL(2, Name_Buffer[0], 2, UPLIT BYTE('R1'))
			    THEN
				Token($R1,	0)
			    ELIF CH$EQL(2, Name_Buffer[0], 2, UPLIT BYTE('R2'))
			    THEN
				Token($R2,	0)
			    ELIF CH$EQL(2, Name_Buffer[0], 2, UPLIT BYTE('R3'))
			    THEN
				Token($R3,	0)
			    ELIF CH$EQL(2, Name_Buffer[0], 2, UPLIT BYTE('R4'))
			    THEN
				Token($R4,	0)
			    ELIF CH$EQL(2, Name_Buffer[0], 2, UPLIT BYTE('R5'))
			    THEN
				Token($R5,	0)
			    ELIF CH$EQL(2, Name_Buffer[0], 2, UPLIT BYTE('R6'))
			    THEN
				Token($R6,	0)
			    ELIF CH$EQL(2, Name_Buffer[0], 2, UPLIT BYTE('R7'))
			    THEN
				Token($R7,	0)
			    ELIF CH$EQL(2, Name_Buffer[0], 2, UPLIT BYTE('R8'))
			    THEN
				Token($R8,	0)
			    ELIF CH$EQL(2, Name_Buffer[0], 2, UPLIT BYTE('R9'))
			    THEN
				Token($R9,	0)
			    ELIF CH$EQL(2, Name_Buffer[0], 2, UPLIT BYTE('AP'))
			    THEN
				Token($AP,	0)
			    ELIF CH$EQL(2, Name_Buffer[0], 2, UPLIT BYTE('FP'))
			    THEN
				Token($FP,	0)
			    ELIF CH$EQL(2, Name_Buffer[0], 2, UPLIT BYTE('SP'))
			    THEN
				Token($SP,	0)
			    ELIF CH$EQL(2, Name_Buffer[0], 2, UPLIT BYTE('PC'))
			    THEN
				Token($PC,	0)
			    END;

		      [3] : BEGIN
			    IF CH$EQL(3, Name_Buffer[0], 3, UPLIT BYTE('R10'))
			    THEN
				Token($R10,	0)
			    ELIF CH$EQL(3, Name_Buffer[0], 3, UPLIT BYTE('R11'))
			    THEN
				Token($R11,	0)
			    ELIF CH$EQL(3, Name_Buffer[0], 3, UPLIT BYTE('PSL'))
			    THEN
				Token($PSL,	0)
			    END;

		      [4] : BEGIN
			    IF CH$EQL(4, Name_Buffer[0], 4, UPLIT BYTE('LINE'))
			    THEN
				Token($LINE,	0)
			    END;

		      [5] : BEGIN
			    IF CH$EQL(5, Name_Buffer[0], 5, UPLIT BYTE('LABEL'))
			    THEN
				Token($LABEL,	0)
			    END;

			    TES)

			THEN
			    Error_Token;

			True
			END;

			TES)

	    THEN
		!
		! Not a valid %xxx Token, return error
		!
		Error_Token;

	    ! End of %xxx processing

	    !
	    ! Quote Character (')
	    !
	[QUOTE] :
	    BEGIN

	    LOCAL
		Str_Block_Ptr	: REF BLOCK [,BYTE]	! Pointer to STR Entry
			FIELD(STR_FIELDS),
		String_Length	: WORD UNSIGNED,	! Length Remaining
		String_Buffer	: VECTOR [LEX_K_Max_Str, BYTE];
							! String Buffer
	    !
	    ! Extract the Simple String from the Source
	    !
	    String_Length = Lex_Quote(String_Buffer, Lex_K_Max_Str);

	    IF DBG$NLIST_FREEZ(ROUND_BYTE_TO_LONG_(Str_S_Entry + .String_Length),
			 Str_Block_Ptr, .PAS$_Message_Vector)
	    THEN
		BEGIN
		MOVEBYTE(.String_Length, String_Buffer, Str_Block_Ptr[Str_First_Char]);

		Str_Block_Ptr[STR_Next]		= 0;
		Str_Block_Ptr[STR_Length]	= .String_Length;
		(.Data_Ptr)			= .Str_Block_Ptr;
		END
	    ELSE
		! No room
		!
		SIGNAL(DBG$_NOFREE);

	    (.Type) = Lex_K_String;

	    PAS$_Lex_SrcDesc[DSC$W_LENGTH]	= .Char_Length;
	    PAS$_Lex_SrcDesc[DSC$A_POINTER]	= .Char_Pointer;
	    PAS$_Lex_Column			= .Char_Column;
	    RETURN
	    END;

	    !
	    ! Illegal Character
	    !
	[INRANGE, OUTRANGE] :
	    Error_Token;

	TES;	! CASE on the current character

	END;	! REPEAT loop

    !
    ! The token is a name-table entry. Finish it up and return
    !
    (.Type)     = LEX_K_Name;
    (.Data_Ptr) = .Item_Pointer;

    PAS$_Lex_SrcDesc[DSC$W_LENGTH]	= .Char_Length  - .Item_Length;
    PAS$_Lex_SrcDesc[DSC$A_POINTER]	= .Char_Pointer + .Item_Length;
    PAS$_Lex_Column			= .Char_Column + .Item_Length;

    TRUE
    END;

%SBTTL	'Lex_Enter_Name - Enter/Lookup Names'
GLOBAL ROUTINE PAS$_LEX_Enter_Name (Symbol_Descriptor) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine enters/looks up a Symbol in the Symbol Table
!
! INPUTS:
!
!	Symbol_Descriptor	- A string descriptor
!
! OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	A Pointer to the Name Table entry or zero if no space can be
!	allocated for one
!--

    BEGIN
    MAP
	Symbol_Descriptor	: REF BLOCK [8, BYTE];

    LOCAL
	Sym_Current		: REF BLOCK [,BYTE] FIELD(NAM_FIELDS),
							! Pointer to Current Entyr
	Sym_Previous		: REF BLOCK [,BYTE] FIELD(NAM_FIELDS),
							! Pointer to Previous Entry
	Sym_Hash,					! Pointer to Hash Entry
	Name_Buffer		: REF VECTOR [,BYTE,UNSIGNED],
							! Pointer to Start of Buffer
	Name_Hash		: LONG,			! Hash Value
	Name_Length		: WORD UNSIGNED;	! Length of the Name

    !
    ! Compute the Hash Value for the Symbol, then look for it in
    ! the Symbol Table
    !
    IF .Symbol_Descriptor[DSC$W_Length] EQL 0
    THEN
	BEGIN
	Name_Length	= 1;
	Name_Buffer	= UPLIT BYTE(%C' ');
	END
    ELSE
	BEGIN
	Name_Length	= .Symbol_Descriptor[DSC$W_Length];
	Name_Buffer	= .Symbol_Descriptor[DSC$A_Pointer]
	END;

    Name_Hash = (.Name_Buffer[0] + .Name_Length + .Name_Buffer[.Name_Length - 1] +
		    (IF .Name_Length GEQ 2 THEN .Name_Buffer[1]))
	AND (Lex_Hash_Bucket - 1);

    Sym_Hash     = PAS$_Lex_Hash_Table[.Name_Hash];
    Sym_Previous = .Sym_Hash;
    Sym_Current  = ..Sym_Hash;		    

    REPEAT
	BEGIN

	IF .Sym_Current EQL 0
	THEN
	    !
	    ! New entry in Name Table
	    !
	    BEGIN

	    ! Set up an entry in the local name table
	    !
	    IF DBG$NLIST_FREEZ(ROUND_BYTE_TO_LONG_(NAM_S_ENTRY + .Name_Length),
			Sym_Current, .PAS$_Message_Vector)
	    THEN
		BEGIN
		! Fill in new entry
		!
		Sym_Current[NAM_Pointer] = 0;
		Sym_Current[NAM_Chain]   = ..Sym_Hash;
		Sym_Current[NAM_Length]  = .Name_Length;
		MOVEBYTE(.Name_Length, .Name_Buffer, Sym_Current[NAM_First_Char]);
		(.Sym_Hash) = .Sym_Current;

		END
	    ELSE
		! No space for Name Table entry.
		!
		SIGNAL(DBG$_NOFREE);

	    EXITLOOP
	    END;

	!
	! If the Same Symbol, then point to it and move it to
	! the beginning of the linked (bucket) list
	!
	IF
	    IF .Sym_Current[NAM_Length] EQL .Name_Length<B0_>
	    THEN
		CH$EQL(.Name_Length, .Name_Buffer, .Name_Length, Sym_Current[NAM_First_Char], 0)
	THEN
	    BEGIN
	    IF .Sym_Hash NEQA .Sym_Previous
	    THEN
		BEGIN
		Sym_Previous[NAM_Chain] = .Sym_Current[NAM_Chain];
		Sym_Current[NAM_Chain]  = ..Sym_Hash;
		(.Sym_Hash)		= .Sym_Current;
		END;

	    EXITLOOP
	    END;

	!
	! Not yet end of list or found, just descend the list
	!
	Sym_Previous = .Sym_Current;
	Sym_Current  = .Sym_Previous[NAM_Chain];
	END;

    RETURN .Sym_Current
    END;

%SBTTL 'Lex_Quote - Extract a Simple Quoted String'
ROUTINE Lex_Quote(Buffer, Max_Length) : Lex_Char_Call =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine extracts a Simple Quoted String from the Source
!
! PARAMETERS:
!
!	Buffer		- Pointer to the Start of the String Buffer
!	Max_Length	- Length of the String Buffer
!
! INPUTS:
!
!	Char_Pointer	- Pointer to start of Comment
!	Char_Length	- Length Remaining in String
!	Char_Column	- Current Column Number
!
! OUTPUTS:
!
!	Char_Pointer	- Pointer past end of Comment
!	Char_Length	- Length Remaining in String
!	Char_Column	- Current Column Number
!
! RETURN VALUE:
!
!	Returns the Length of the String
!--

    BEGIN
    EXTERNAL REGISTER
	Char_Column	: WORD UNSIGNED,	! Current Line Column
	Char_Length	: WORD UNSIGNED,	! Length remaining in the String
	Char_Pointer	: REF VECTOR [,BYTE];	! Pointer to String

    LOCAL
	String_Length	: WORD UNSIGNED,	! Length of the String
	String_Pointer	: REF VECTOR [,BYTE];	! Pointer to Current Character

    !
    ! Skip the leading quote, initialize values
    !
    Char_Column  = .Char_Column  + 1;
    Char_Length  = .Char_Length  - 1;
    Char_Pointer = .Char_Pointer + 1;

    String_Pointer = .Buffer;
    String_Length  = .Max_Length;

    ! Scan for Ending Quote
    !
    WHILE .Char_Length GTR 0 DO
	BEGIN

	SELECTONEU .Char_Pointer[0] OF
	    SET

  [QUOTE] : BEGIN
	    Char_Column  = .Char_Column  + 1;
	    Char_Length  = .Char_Length  - 1;
	    Char_Pointer = .Char_Pointer + 1;

	    ! If not immediately followed by a second quote,
	    ! Then exit the loop
	    !
	    IF NOT
		(IF .Char_Length GTR 0
		 THEN
		    (.Char_Pointer[0] EQLU Quote))
	    THEN
		EXITLOOP;

	    END;

[OTHERWISE] : Char_Column = .Char_Column + 1;

	    TES;

	! Now copy the last character into the string and
	! Adjust the current context information
	!
	IF .String_Length GTR 0
	THEN
	    BEGIN
	    String_Pointer[0] = .Char_Pointer[0];
	    String_Pointer    = .String_Pointer + 1;
	    String_Length     = .String_Length - 1;
	    END;

	Char_Pointer = .Char_Pointer + 1;
	Char_Length  = .Char_Length  - 1;
	END;


    .Max_Length - .String_Length
    END;

%SBTTL 'Lex_Radix - Extract Radix String'
ROUTINE Lex_Radix(Precision) : Lex_Char_Call =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine extracts a value string from the source for
!	use in Radix values (i.e., Base 16 = %X, Base 8 = %O, and
!	Base 2 = %B).
!
! INPUTS:
!
!	Char_Pointer	- Pointer to start of Radix String
!	Char_Length	- Length Remaining in String
!	Precision	- Number of bits in each Digit
!
! OUTPUTS:
!
!	Char_Pointer	- Pointer past end of Radix String
!	Char_Length	- Length Remaining in String
!	String_Pointer	- Pointer to start of Radix String
!	String_Length	- Length of Radix String
!--

    BEGIN
    EXTERNAL REGISTER
	Char_Column	: WORD UNSIGNED,	! Current Line Column
	Char_Length	: WORD UNSIGNED,	! Length remaining in the String
	Char_Pointer	: REF VECTOR [,BYTE];	! Pointer to String

    LOCAL
	Start_Pointer,				! Pointer to start of numeric string
	String_Length	: WORD UNSIGNED,	! Length remaining in the String
	String_Pointer	: REF VECTOR [,BYTE],	! Pointer to String
	String_Overflow,			! Indicator for Overflow
	String_Value;				! Accumulated String Value

    BIND
	Mask = Selectone .Precision OF
	    SET
	[4] : Lex_M_Hex;
	[3] : Lex_M_Octal;
	[1] : Lex_M_Binary;

	[OTHERWISE] : Pascal_BugCheck(PAS$K_ILLRAD);
	    TES;

    ! Mark the start of the string
    !
    Start_Pointer= .Char_Pointer;

    ! Skip the %x Characters
    !
    Char_Column  = .Char_Column  + 2;
    Char_Length  = .Char_Length  - 2;
    Char_Pointer = .Char_Pointer + 2;

    IF .Char_Length LEQ 0
    THEN
	! No String to Scan, signal error
	!
 	SIGNAL(DBG$_INVNUMBER, .Start_Pointer, .Char_Pointer)

    ELSE

	IF .Char_Pointer[0] EQLU Quote
	THEN
	
	    ! If the string starts with a Quote, look for trailing quote
	    !
	    BEGIN
	    String_Length    = .Char_Length  - 1;	! Skip Leading Quote
	    String_Pointer   = .Char_Pointer + 1;
	
	    PAS_LOCC(String_Length, .String_Pointer, Quote, Char_Length, Char_Pointer);
	
	    String_Length = .String_Length - .Char_Length;
	
	    ! Compute current Column Number
	    !
	    INCR I FROM .String_Pointer to .Char_Pointer - 1 DO
		Char_Column = .Char_Column + 1;
	
	    IF .Char_Length EQL 0			! No trailing Quote found
	    THEN
		SIGNAL(DBG$_IMPTERMNO, .Start_Pointer, .Char_Pointer)
	    ELSE
		BEGIN
		Char_Length  = .Char_Length  - 1;
		Char_Pointer = .Char_Pointer + 1;
		Char_Column  = .Char_Column  + 1;
		END;
	    END
	ELSE
	
	    ! Scan until we find a character which is not valid in the radix
	    !
	    BEGIN
	    String_Length  = .Char_Length;
	    String_Pointer = .Char_Pointer;
	
	    Lex_Spanc(Mask);
	
	    String_Length = .String_Length - .Char_Length;
	
	    IF .Char_Length GTR 0
	    THEN
		IF .Translate_Table[.Char_Pointer[0]] NEQU 0
		THEN
	
		    ! String followed by Identifier Character, error
		    !
		    SIGNAL(DBG$_IMPTERMNO, .Start_Pointer, .Char_Pointer);
	    END;

    ! Compute the value in the current radix
    !
    String_Value    =  0;
    String_Overflow = -1;

    DECR I FROM .String_Length TO 1 DO
	BEGIN
	LOCAL
	    String_Char;

	! Indicate Error on Overflow
	!
	IF .String_Value <32 - .Precision, .Precision, 0> NEQ 0
	THEN
	    BEGIN
	    String_Value    = .String_Value<0,32 - .Precision,0>;
	    String_Overflow = .Char_Column + .String_Pointer - .Char_Pointer - 7;
	    END;

	! Shift and Insert the new value
	!
	String_Char  = CH$RCHAR_A(String_Pointer);
	String_Value = (String_Value = .String_Value ^ .Precision) OR
	    (SELECTONE .Precision OF
		SET
	    !
	    ! Hexadecimal Value
	    !
	  [4] :	(SELECTONEU .String_Char OF
		    SET
     ['0' TO '9'] : .String_Char - '0';
     ['A' TO 'F'] : .String_Char - 'A' + 10;
     ['a' TO 'f'] : .String_Char - 'a' + 10;
      [OTHERWISE] : SIGNAL(DBG$_INVNUMBER, .Start_Pointer, .Char_Pointer);	! Illegal digit
		    TES);
	    !
	    ! Octal Value
	    !
	  [3] :	(SELECTONEU .String_Char OF
		    SET
     ['0' TO '7'] : .String_Char - '0';
      [OTHERWISE] : SIGNAL(DBG$_INVNUMBER, .Start_Pointer, .Char_Pointer);	! Illegal digit
		    TES);
	    !
	    ! Binary Value
	    !
	  [1] :	(SELECTONEU .String_Char OF
		    SET
     ['0' TO '1'] : .String_Char - '0';
      [OTHERWISE] : SIGNAL(DBG$_INVNUMBER, .Start_Pointer, .Char_Pointer);	! Illegal digit
		    TES)
		TES);
	    END;

	! If Overflow has occurred, then indicate Error
	!
	IF (.String_Overflow GEQ 0)
	THEN
	    SIGNAL(DBG$_INVNUMBER, .Start_Pointer, .Char_Pointer);

	.String_Value
    END;

%SBTTL 'Lex_Number - Extract Number'
ROUTINE Lex_Number(Type, Data_Ptr) : Lex_Char_Call =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine extracts a number from the source text,
!	and figures out what type of number it is.
!
! FORMAL PARAMETERS:
!
!	Data_Ptr	- Pointer to where to place the value
!	Type		- Pointer to where to place the result type
!
! INPUTS:
!
!	Char_Column	- Current Character Column
!	Char_Pointer	- Pointer to start of Radix String
!	Char_Length	- Length Remaining in String
!
! OUTPUTS:
!
!	Char_Column	- Current Character Column
!	Char_Pointer	- Pointer past end of Radix String
!	Char_Length	- Length Remaining in String
!
!--

    BEGIN
    EXTERNAL REGISTER
	Char_Column	: WORD UNSIGNED,	! Current Character Column
	Char_Length	: WORD UNSIGNED,	! Length remaining in the String
	Char_Pointer	: REF VECTOR [,BYTE];	! Pointer to String

    EXTERNAL ROUTINE
	OTS$CVT_TI_L,				! Text (Integer) => Longword
	OTS$CVT_T_D,				! Text => Floating Double
	OTS$CVT_T_G,				! Text => Floating G-Double
	OTS$CVT_T_H;				! Text => Floating Quad

    BUILTIN
	CVTDF;					! Convert Double to Single

    LOCAL
	String_Column	: WORD UNSIGNED,	! Start Column for Number
	String_Char_Ptr	: REF VECTOR [1,BYTE],	! Pointer to a Character
	String_Char	: BYTE UNSIGNED,	! The Saved Character
	String_Desc	: BLOCK [8,BYTE];	! String Descriptor

    ! Skip past leading decimal digits
    !
    String_Column   = .Char_Column;
    String_Char_Ptr = 0;
    (.Type) = Lex_K_Integer;

    String_Desc[DSC$W_LENGTH]  = .Char_Length;
    String_Desc[DSC$B_DTYPE]   = DSC$K_DTYPE_T;
    String_Desc[DSC$B_CLASS]   = DSC$K_CLASS_S;
    String_Desc[DSC$A_POINTER] = .Char_Pointer;

    Lex_Spanc(Lex_M_Decimal);

    !
    ! Check for Floating Value : Decimal Point
    !
    IF
	(IF NOT .PAS$_Scanning_Pathname
	THEN
	    IF .Char_Length GEQ 1
	    THEN
		IF .Char_Pointer[0] EQLU %C'.'
		THEN
		    IF .Char_Length GTR 1
		    THEN
			(.Char_Pointer[1] NEQU %C'.')
		    ELSE
			True)
    THEN
	BEGIN
	(.Type) = Lex_K_Float_F;

	Char_Column  = .Char_Column  + 1;
	Char_Length  = .Char_Length  - 1;
	Char_Pointer = .Char_Pointer + 1;

	Lex_Spanc(Lex_M_Decimal);
	END;

    ! Check for a Exponential Value
    !
    IF .Char_Length GTR 0
    THEN
	BEGIN
	LOCAL
	    Exp_Type		: REF VECTOR [,BYTE];

	BIND
	    Exp_Type_List	= UPLIT BYTE('EeSsDdQq') : VECTOR [8,BYTE],

	    Exp_Type_Table	= UPLIT BYTE(
		Lex_K_Float_F,	Lex_K_Float_F,	Lex_K_Float_D,	Lex_K_Float_H,
		Lex_K_Float_D,	Lex_K_Float_D,	Lex_K_Float_H,	0,
		Lex_K_Float_H,	Lex_K_Float_H,	0,		0,

		Lex_K_Float_F,	Lex_K_Float_F,	Lex_K_Float_G,	Lex_K_Float_H,
		Lex_K_Float_G,	Lex_K_Float_G,	Lex_K_Float_H,	0,
		Lex_K_Float_H,	Lex_K_Float_H,	0,		0)
		    : VECTOR [24,BYTE];


	IF NOT CH$FAIL(
	    Exp_Type = CH$FIND_CH(8, Exp_Type_List, .Char_Pointer[0]))
	THEN
	    BEGIN
	    Exp_Type = ((.Exp_Type - Exp_Type_List) ^ -1) AND (%B'11');
	    (.Type)  = .Exp_Type_Table[.Exp_Type];

	    String_Char_Ptr =  Char_Pointer[0];
	    String_Char     = .Char_Pointer[0];
	    Char_Pointer[0] = 'E';

	    Char_Pointer = .Char_Pointer + 1;
	    Char_Column  = .Char_Column  + 1;
	    Char_Length  = .Char_Length  - 1;

	    IF .Char_Length GTR 0
	    THEN
		IF  (.Char_Pointer[0] EQLU '-') OR
		    (.Char_Pointer[0] EQLU '+')
		THEN
		    BEGIN
		    Char_Pointer = .Char_Pointer + 1;
		    Char_Length  = .Char_Length  - 1;
		    Char_Column  = .Char_Column  - 1;
		    END;
	    END;

	Lex_Spanc(Lex_M_Decimal);
	END;

    String_Desc[DSC$W_LENGTH] = .String_Desc[DSC$W_LENGTH] - .Char_Length;

    SELECTONE ..Type OF
	SET
[Lex_K_Integer] :
	    IF NOT OTS$CVT_TI_L(String_Desc, .Data_Ptr)
	    THEN
		SIGNAL(DBG$_INTOVER);			! Integer over/underflow

[Lex_K_Float_F] :
	    IF NOT
		(IF OTS$CVT_T_D(String_Desc, .Data_Ptr)
		THEN
		    CVTDF(.Data_Ptr, .Data_Ptr))
	    THEN
		SIGNAL(DBG$_FLTOVER);			! Out of range

[Lex_K_Float_D] :
	    IF NOT OTS$CVT_T_D(String_Desc, .Data_Ptr)
	    THEN
		SIGNAL(DBG$_FLTOVER);			! Out of range

[Lex_K_Float_G] :
	    IF NOT OTS$CVT_T_G(String_Desc, .Data_Ptr)
	    THEN
		SIGNAL(DBG$_FLTOVER);			! Out of range

[Lex_K_Float_H] :
	    IF NOT OTS$CVT_T_H(String_Desc, .Data_Ptr)
	    THEN
		SIGNAL(DBG$_FLTOVER);			! Out of range

	TES;

    IF .String_Char_Ptr NEQ 0
    THEN
	String_Char_Ptr[0] = .String_Char;

    PAS$_Lex_Column			= .Char_Column;
    PAS$_Lex_SrcDesc[DSC$A_POINTER]	= .Char_Pointer;
    PAS$_Lex_SrcDesc[DSC$W_LENGTH]	= .Char_Length;

    True
    END;

%SBTTL 'Lex_Spanc - SPANC Instruction'
ROUTINE Lex_Spanc(Mask) : Lex_Char_Call =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine spans a set of characters as in the SPANC
!	instruction.
!
! FORMAL PARAMETERS:
!
!	Mask		- Mask to use in scanning
!
! INPUTS:
!
!	Char_Column	- Current Column
!	Char_Length	- Length remaining in String
!	Char_Pointer	- Pointer to Current Character
!
! OUTPUTS:
!
!	Char_Column	- Current Column
!	Char_Length	- Length remaining in String after Scan
!	Char_Pointer	- Pointer past non-matching characters
!
!--

    BEGIN
    EXTERNAL REGISTER
	Char_Column	: WORD UNSIGNED,
	Char_Length	: WORD UNSIGNED,
	Char_Pointer	: REF VECTOR [,BYTE];

    BUILTIN
	R0, R1, SPANC;

    SPANC(Char_Length, .Char_Pointer, Lex_Type_Table, Mask);

    Char_Column  = .Char_Column - .R0<W0_>;
    Char_Column  = .Char_Column + .Char_Length;

    Char_Pointer = .R1;
    Char_Length  = .R0<W0_>;

    (.R0<W0_> NEQ 0)
    END;

%SBTTL 'Lex_Scanc - SCANC Instruction'
ROUTINE LEX_SCANC(Mask) : Lex_Char_Call =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine spans a set of characters as in the SCANC
!	instruction.
!
! FORMAL PARAMETERS:
!
!	Mask		- Mask to use in scanning
!
! INPUTS:
!
!	Char_Column	- Current Column
!	Char_Length	- Length remaining in String
!	Char_Pointer	- Pointer to Current Character
!
! OUTPUTS:
!
!	Char_Column	- Current Column
!	Char_Length	- Length remaining in String after Scan
!	Char_Pointer	- Pointer past non-matching characters
!
!--

    BEGIN
    EXTERNAL REGISTER
	Char_Column	: WORD UNSIGNED,
	Char_Length	: WORD UNSIGNED,
	Char_Pointer	: REF VECTOR [,BYTE];

    BUILTIN
	R0, R1, SCANC;

    SCANC(Char_Length, .Char_Pointer, Lex_Type_Table, Mask);

    Char_Column  = .Char_Column - .R0<W0_>;
    Char_Column  = .Char_Column + .Char_Length;

    Char_Pointer = .R1;
    Char_Length  = .R0<W0_>;

    (.R0<W0_> NEQ 0)
    END;

END
ELUDOM
