MODULE DBGDP1 ( IDENT = 'V03-000') =
BEGIN

!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
! FACILITY:	DEBUG
!
!++
! FUNCTIONAL DESCRIPTION:
!	DEPOSIT ROUTINES FOR STARLET DEBUG FACILITY
!
! Version:	1.21
!
! History:
!	Author:
!		Carol Peters, 21 Jul 1976: Version 01
!
!	Modified by:
!		Mike Candela, 25-APR-79
!		TKM,  6-AUG-79
!		TKM,  12-SEP-79
!		DLP,  3-JAN-80
!		DLP,  15-JAN-80
!		DLP,  15-JAN-80
!		KAN,  28-APR-80
!		DLP,  19-MAR-81
!		Richard Title 17-JUL-81 
!
! Revision history:
! 1.01	22-SEP-78	DAR	Deleted require file LISTEL.
! 1.02	25-SEP-78	MCC	Deleted require file SYSLIT
! 1.03	27-SEP-78	MCC	Converted dbg$cnv...routines to BUILTIN
!				calls, streamlined diagnostics in symbol_deposit
! 1.04	 8-NOV-78	MCC	Changed dbg$examine_cmd to set the global
!				pointer dbg$gl_lis_ptr so that access to
!				the command arg list will be possible
!				when examining BLISS structures.
! 1.05	13-NOV-78	DAR	Fixed cause of informational message in dbg$reg_match
!				Fixed up dbg$deposit_cmd and symbol_deposit, they
!				now handle numeric string data types and use the
!				new command argument list format.
! 1.06	04-DEC-78	DAR	DBG$EVALUAT_CMD now handles DSC$K_DTYPE_FLD and
!				tries to output a register name if the address
!				is that of a register.
! 1.07	 9-DEC-78	MCC	Made changes to allow depositing into BLISS
!				structures or variables with field references.
!				This included the addition of the routine bli_write_mem.
!				Also changed dbg$evaluate_cmd to handle field refs
! 1.08	18-DEC-78	DAR	Added support for depositing packed decimal data
! 1.09	24-APR-79	MCC	Modified dbg$examine_cmd to first check that a
!				variable to be examined is not a reference to
!				a permanent symbol before resetting the type
!				field to -1. (Bug fix)
! 1.10	24-APR-79	MCC	Fixed a bug in symbol_deposit which prevented
!				deposits into globals with field references from
!				working correctly.
! 1.11   6-AUG-79	TKM	Changed OUTPUT_MEM_LOC to pass the symbol name
!				name table pointer to dbg$out_typ_val if it had
!				one.
! 1.12   12-SEP-79	TKM     Changed deposit command to handle new data types
!
! 1.13	28-NOV-79	BAO	Added support for override types.
!
! 1.14  3-JAN-80  	DLP	Changed size for asci output to reflect overrides
!
! 1.15	15-JAN-80	DLP	Added support for word integer to single or
!				double precision float Deposits.
! 1.16  16-JAN-80	DLP	Added check for asci deposits crossing
!				page boundaries (bug fix).
! 1.17	16-JAN-80	MCC	Fixed bug with default type of ascii when doing
!				deposits.	
! 1.18	20-Feb-80	JBD	Null strings are now output without an access
!				violation, which is to say, nothing is output.
! 1.19	21-Feb-80	JBD	Made EV <string-symbol> work. Also made deposits
!				into null strings work.
! 1.20	28-APR-80	KAN	Split this module (DBGDP1) away from DBGEXA
!				on one page.
! 1.21  19-MAR-81	DLP	Fixed bug that caused memory prots to not be reset
!			  	if a no-conversion was Signaled
!
! 1.22  17-JUL-81        RT     Changed deposit command to handle 
!				new type octa_word.
! 3.01	 3-AUG-81	 RT	Split out a piece of the routine dbg$deposit_cmd,
!				and called the new piece dbg$perform_deposit.
! 3.02	22-Sep-81	 RT	Moved initialization of DBG$DEPOSIT_LENGVEC
!				to DBGBAS so it only gets performed once.
!--

! TABLE OF CONTENTS
!--
FORWARD ROUTINE
	chk_pc_and_prot : NOVALUE,
	dbg$deposit_cmd : NOVALUE,	! ROUTINE TO DEPOSIT A DATUM INTO AN ADDRESS
	recover_mem	: NOVALUE,	! Change all pages of memory
					! temporarily altered for DEPOSIT
					! command back to original.
	dbg$perform_deposit ;  ! subroutine of dbg$deposit_cmd
!
! Require files:
!

REQUIRE 'src$:dbgprolog.req';
REQUIRE 'SRC$:DBGGEN.REQ';
REQUIRE 'src$:sysser.req';
REQUIRE 'src$:bstruc.req';


EXTERNAL

	dbg$gl_loctyp,				! TYPE SPECIFIED BY VERB
						! MODIFIER
	dbg$gb_signal_flag,			! indicates that a signal
						! will be done to formatting
						! output routine
	dbg$gw_loclngth : WORD,			! LENGTH SPECIFIED BY VERB MODIFIER
	dbg$gl_gbltyp,				! OVERRIDE TYPE
	dbg$gw_gbllngth : WORD,			! OVERRIDE LENGTH
	dbg$gl_dflttyp,				! DEFAULT TYPE
	dbg$gw_dfltleng : WORD,			! DEFAULT LENGTH
	dbg$gl_asci_len,			! Holds the length of the char. variable
	dbg$gl_head_lst,			! HEAD OF LINKED LIST OF EXPRESSIONS
	dbg$gl_last_loc,			! LAST location DISPLAYED
	dbg$gl_next_loc,			! NEXT location TO DISPLAY
	DBG$GB_LANGUAGE : BYTE,			! LANGUAGE INDEX
	dbg$floating_buffer : vector[,byte],
	dbg$float_desc : block[,byte],
	dbg$dbl_desc  :  block[,byte],
	dbg$dyn_str_desc,			! pointer to descriptor for dynamic string
	dbg$deposit_source : BLOCK[, BYTE],	! A standard descriptor for the source
	dbg$deposit_target : BLOCK[, BYTE],	! A standard descriptor for the target
						! a vector containing the lengths of fixed size data types
	dbg$deposit_lengvec : VECTOR [, BYTE],
	dbg$gl_runframe : REF BLOCK [, BYTE];	! pointer to current run frame


EXTERNAL ROUTINE
	dbg$rst_type,
	DBG$OUT_DIMENSN,			! Format array dimensions for I/O
	dbg$val_to_sat,				! translates a value to a symbol name
	dbg$get_bounds : NOVALUE,		! Calculate array bounds.
	dbg$check_prot,				! checks the protection of a page
	dbg$symbol_valu,			! finds the value bound to a symbol name
	dbg$ins_encode,				! routine to encode a symbolic instruction
	dbg$redo_prot,				! reset page protection to read only
	dbg$deposit_type_ubs ,
	dbg$deposit_type_hc ,
	dbg$deposit_type_gc ,
	dbg$deposit_type_h ,
	dbg$deposit_type_g ,
	dbg$deposit_type_p ,
	dbg$deposit_type_nz ,
	dbg$deposit_type_nro ,
	dbg$deposit_type_nr ,
	dbg$deposit_type_nlo ,
	dbg$deposit_type_nl ,
	dbg$deposit_type_nu ,
	dbg$deposit_type_t ,
	dbg$deposit_type_dc ,
	dbg$deposit_type_fc ,
	dbg$deposit_type_d ,
	dbg$deposit_type_f ,
	dbg$deposit_type_o ,
	dbg$deposit_type_q ,
	dbg$deposit_type_l ,
	dbg$deposit_type_w ,
	dbg$deposit_type_b ,
	dbg$deposit_type_qu ,
	dbg$deposit_type_lu ,
	dbg$deposit_type_wu ,
	dbg$deposit_type_bu ,
	dbg$deposit_type_v ,
	dbg$deposit_type_z ;


LITERAL

	DSC$K_DTYPE_CAS = 127,
	flting_buf_len  = 30,
	float_buf_len	= 15,
	dbl_buf_len	= 25,
	float_fra_dig	= 7,
	dbl_fra_dig	= 16,
	digits_in_int	= 1,
	scale_factor	= 0,
	float_exp_dig	= 2,
	dbl_exp_dig	= 2,
	MIN_NT_TYPE = 0,
	MAX_NT_TYPE = 31,
	ZERO_NT_TYPE = 0,
	MIN_BYTE_VAL = -128,
	MAX_BYTE_VAL = 127,
	MAX_UBYTE_VAL = 255,
	MIN_WORD_VAL = -32768,
	MAX_WORD_VAL = 32767,
	MAX_UWORD_VAL = 65535,
	MIN_LONG_VAL = -2147483648,
	MAX_LONG_VAL = 2147483647,
	max_inst_len	= 80,		! maximum number of binary bytes in an instruction
	page_size = 512,		! number of bytes / page of memory
	pages = 8;			! The maximum number of pages
					! whose protection can be
					! changed.

MACRO	dsc$w_bit_offst	= 8, 0, 16, 0 %,	!fields for the descriptor
	dsc$_sgn_ext	= 10, 0, 1, 0 %;	!of an unalligned bit string

! Own storage used during deposit
OWN
		affected_bytes, 		! The number of bytes whose
						! value may be changed by
						! this deposit.

		number_of_pages,		! The number of pages whose
						! protection may be temporarily
						! altered.

		address_to_check,		! The address we are currently
						! checking.

		prot_change_status : VECTOR[pages, BYTE],  ! Place to store if
							   ! protection was
							   ! changed.

		prot_changed_to : VECTOR[pages, BYTE];	   ! Place to store old
							   ! protections.




	ROUTINE CHK_PC_AND_PROT(target) : NOVALUE =

	    BEGIN
		MAP 	target : 	REF BLOCK[,BYTE];
	 	LOCAL
    			START_LOC,
    			prot_change_indx;	! Index into the vector of
    						! protection change statuses.

		start_loc = .target[dsc$a_pointer] + 
				(IF .target[dsc$b_dtype] EQL dsc$k_dtype_ubs
					THEN .target[dsc$w_bit_offst]/%BPUNIT
					else 0);
		affected_bytes = (IF .target[dsc$b_dtype] EQL dsc$k_dtype_ubs
				     THEN (.target[dsc$w_bit_offst] MOD %BPUNIT
				           +  .target[dsc$w_length])/%BPUNIT
				   + (IF((.target[dsc$w_bit_offst] +
				          .target[dsc$w_length]     ) MOD %BPUNIT)
						NEQ 0 THEN 1 ELSE 0)
				     ELSE .target[dsc$w_length]);

		IF .start_loc LEQA dbg$gl_runframe[dbg$l_user_pc] + 4
					AND
		   .start_loc + .affected_bytes GEQA dbg$gl_runframe[dbg$l_user_pc]
		THEN
		    dbg$gl_runframe[dbg$l_user_psl] = %X'F7FFFFFF' AND
						      .dbg$gl_runframe[dbg$l_user_psl];
    		! Set up to check all pages to see if we can change their
    		! protection to allow us to temporarily write into them

    		address_to_check = .target[dsc$a_pointer];

    		! Make sure we get the right number of pages and
    		! not too many.

		IF (.address_to_check / page_size)
			     EQL
		   ((.address_to_check + .affected_bytes) / page_size)
		THEN
		    number_of_pages = 1     ! Everything lives on one page
		ELSE
    		    number_of_pages = 
    			(IF (.affected_bytes MOD page_size GTR 1)
    			 THEN .affected_bytes/page_size+2
    			 ELSE .affected_bytes/page_size+1);

    		INCR prot_change_indx FROM 0 TO (.number_of_pages-1) BY 1
    		    DO BEGIN


    			   IF (prot_change_status[.prot_change_indx] 
    				= dbg$check_prot(.address_to_check,
    					prot_changed_to[.prot_change_indx]))
    				EQL 0
    			   THEN BEGIN


				!++
				! If this is the last page we may have gone
				! one page too far in making sure that
				! all possible pages involved were accounted
				! for--check this out
				!--


    				    recover_mem(.target[dsc$a_pointer],
    					prot_change_status, prot_changed_to,
    					.number_of_pages);
		    		    signal ( dbg$_noaccessw, 1, 
    						.target[dsc$a_pointer]);
    				END
    			   ELSE address_to_check = .address_to_check
    					+ page_size;


    		       END;
	    END;

GLOBAL ROUTINE dbg$deposit_cmd : NOVALUE =
!++
! FUNCTIONAL DESCRIPTION:
!	The command argument list is made up of entries that are
!	each five longwords long.  The first is a forward link to the
!	next entry. The second longword in the first entry in the list
!	is the address into which some value(s) is (are) to be deposited.
!	The third longword is unused, and the fourth (the TYPE1 field)
!	applies ONLY to the first deposit in a list.  The second longword
!	in the second and subsequent entries are the values to be deposited,
!	and their corresponding TYPE1 fields apply only to them.
!	The first value goes into the specified location; the second into
!	that location plus the current mode_length, etc.
!
!	For instruction deposits, the increment is the length of each
!	subsequent deposited instruction. The second longword contains
!	the address of a counted byte stream that is to be translated
!	into a binary instruction and then deposited.
!
!	This module performs the required set-up, and controls the depositing
!	done in other routines.
!
! INPUTS:
!	none
!
! IMPLICIT INPUTS:
!	THE HEAD OF THE LINKED LIST and the current mode
!
! OUTPUTS:
!	none
!
! IMPLICIT OUTPUTS:
!	The values dbg$gl_last_loc and dbg$gl_next_loc
!	are set after each deposit is done.
!
! ROUTINE VALUE:
!	NOVALUE
!
! SIDE EFFECTS:
!	THE SPECIFIED ADDRESSES HAVE THEIR VALUES CHANGED.
!	If a failure in a write occurs, the routine returns immediately.
!--

BEGIN





	LOCAL
		STATUS,
		DESC : REF BLOCK[,BYTE],
		source_ptr,
		in_list,			! a flag to indicate that we've
						! already deposited the first element 
						! in a list.
		in_complx,			! a flag to indicate that we're
						! depositing into a complex number
		in_array,			! a flag to indicate that we're in 
						! deposit list and the first deposit
						! was into a cell of an array.
		array_uppr_bnd,			! The upper bound of the array in
						! which we're depositing. 
		array_desc;			! The address of an array descriptor, used for used for error reporting



!CHECK SYNTAX ERROR - The parser accepts "DEP "XXX" = EXPR", allocates dynamic
!storage for "XXX", and puts its address in list_elem_store(.dbg$gl_head_lst).
!We check for and report this syntax error here.

	IF( .list_elem_store(.dbg$gl_head_lst) NEQA 0 )
	THEN
		BEGIN
		LOCAL
			cs_ptr : ref vector[,byte],
			lhs_stg_desc : block[8,byte];

		cs_ptr = .list_elem_store(.dbg$gl_head_lst);
		lhs_stg_desc[DSC$A_POINTER] = cs_ptr[1];
		lhs_stg_desc[DSC$W_LENGTH] = .cs_ptr[0];

		SIGNAL( DBG$_SYNTAX, 1, lhs_stg_desc);
		! no return
		END;

	in_complx = 0 ;
	in_list = 0;
	IN_ARRAY = 0;
	source_ptr = .list_elem_flink(.dbg$gl_head_lst);

        ch$fill(%x'00',12,dbg$deposit_target);
	dbg$float_desc[dsc$a_pointer] = dbg$floating_buffer ;
	dbg$float_desc[dsc$w_length] = float_buf_len;
	dbg$dbl_desc[dsc$a_pointer] = dbg$floating_buffer;
	dbg$dbl_desc[dsc$w_length] = dbl_buf_len;

	DO	!END TESTED LOOP. Each pass does one deposit in the list

	    BEGIN

	! Zero out the descriptors before we start

	    ch$fill(%x'00',12,dbg$deposit_source);

	! BUILD TARGET DESCRIPTOR

	    dbg$deposit_target[dsc$b_class] = dsc$k_class_s ;		! start as scaler
	    dbg$deposit_target[dsc$a_pointer] = 
		(IF .in_list THEN .dbg$gl_next_loc
			    ELSE .list_elem_exp1[.dbg$gl_head_lst]);

	    SELECTONE TRUE OF 
		SET
				
		[.dbg$gl_loctyp NEQ -1]: 

		    BEGIN
			IF NOT .IN_LIST  ! SET UP ORIGINAL DESCRIPTOR
			THEN
			    BEGIN  ! CHECK FOR FIELD REF
			    
			    IF .LIST_ELEM_ARGS(.DBG$GL_HEAD_LST) NEQ 0
					OR
			      .LIST_ELEM_FLDRF(.DBG$GL_HEAD_LST) NEQ 0
			    THEN
				BEGIN
				dbg$deposit_target[DSC$B_DTYPE] = DSC$K_DTYPE_UBS;
				dbg$deposit_target[DSC$W_BIT_OFFST] = .LIST_ELEM_POS(.DBG$GL_HEAD_LST);
				dbg$deposit_target[DSC$W_LENGTH] = ( IF .DBG$GW_LOCLNGTH EQL 0
							 THEN 
							    .LIST_ELEM_SIZE(.DBG$GL_HEAD_LST)
							 ELSE
							    .DBG$GW_LOCLNGTH * %BPUNIT);
			        END

			    ELSE  ! SET TO OVERRIDE TYPE
				BEGIN
				dbg$deposit_target[DSC$B_DTYPE] = .DBG$GL_LOCTYP;
				dbg$deposit_target[DSC$W_LENGTH] = (IF .dbg$deposit_lengvec[.DBG$GL_LOCTYP] EQL 0
							THEN
							    .DBG$GW_LOCLNGTH
							ELSE
							    .dbg$deposit_lengvec[.DBG$GL_LOCTYP]);
				END;
			    END
			
			ELSE  ! REUSE DESCRIPTOR
			    BEGIN
			    0;
			    END;
			END;

		[.dbg$gl_gbltyp NEQ -1] :

		    BEGIN

		
		IF NOT .IN_LIST
		THEN
		    BEGIN
		    IF .LIST_ELEM_ARGS(.DBG$GL_HEAD_LST) NEQ 0
				OR
		       .LIST_ELEM_FLDRF(.DBG$GL_HEAD_LST) NEQ 0
		    THEN
			BEGIN
			dbg$deposit_target[DSC$B_DTYPE] = DSC$K_DTYPE_UBS;
			dbg$deposit_target[DSC$W_BIT_OFFST] = .LIST_ELEM_POS(.DBG$GL_HEAD_LST);
			dbg$deposit_target[DSC$W_LENGTH] = (IF .DBG$GW_GBLLNGTH EQL 0
						THEN
						    .LIST_ELEM_SIZE(.DBG$GL_HEAD_LST)
						ELSE
						    .DBG$GW_GBLLNGTH * %BPUNIT);
			END
		    ELSE
			BEGIN
			dbg$deposit_target[DSC$B_DTYPE] = .DBG$GL_GBLTYP;
			dbg$deposit_target[DSC$W_LENGTH] = (IF .dbg$deposit_lengvec[.DBG$GL_GBLTYP] EQL 0
						THEN
						    .DBG$GW_GBLLNGTH
						ELSE
						    .dbg$deposit_lengvec[.DBG$GL_GBLTYP]);
			END;
		    END
		ELSE
		    BEGIN
		    0;
		    END;
		END;
			
		[.in_list] : 

		    BEGIN

			! If the orignal target specification had a field specifier
			! or a structure reference

			IF .list_elem_args(.dbg$gl_head_lst) NEQ 0
					OR
			   .list_elem_fldrf(.dbg$gl_head_lst) NEQ 0

			    ! Then we reuse the target descriptor built on the
			    ! last pass. The pointer has already been updated.

			    THEN 
				BEGIN
				0;
				END

			! If the original target was an array cell, and we have
			! run out of space in the array, 

			ELSE IF .in_array 
				THEN IF (.dbg$deposit_target[dsc$a_pointer]) GEQ .array_uppr_bnd

					! we complain

				     THEN 
					BEGIN
					LOCAL out_buf : VECTOR [TTY_OUT_WIDTH, BYTE];
					dbg$gb_signal_flag = 1;
					DBG$OUT_DIMENSN(.array_desc, out_buf);
					SIGNAL(DBG$_INVDIM, 1, out_buf);
					dbg$gb_signal_flag = 0;
					END

			! If the original target was an array and we have room
			! to do the current deposit then we reuse the previous
			! target descriptor; its pointer has already been updated.

				     ELSE 0			
				ELSE IF .in_complx
					THEN 0

			! We try to symbolize .dbg$gl_next_loc; 
			!     if successful we get the target type from the symbol table,
			!     otherwise we use the default type.

			     ! Try to find a matching symbol
			     ELSE 
			    	BEGIN
				     LOCAL SAT_PTR : REF SAT_RECORD;
				     IF dbg$val_to_sat(.dbg$gl_next_loc, sat_ptr)
				     THEN 
					BEGIN
					    LOCAL   nt_ptr : REF rst$entry,
						    symbol_start;
					    nt_ptr = .sat_ptr[sat$l_rstptr];

					    IF dbg$symbol_valu(.nt_ptr,
								symbol_start)
						THEN 
						    BEGIN
						    LOCAL
							DST : REF dst$record,
							DESC : REF BLOCK[,BYTE],
							F;
						    dst = .nt_ptr[rst$l_dstptr];
						    DESC = .SYMBOL_START;

		!   in case of dynamic string
					    dbg$dyn_str_desc = .symbol_start; 
			    IF ( IF .dst[dst$v_valkind] EQL dst$k_valkind_desc
		THEN ( f = 1 ; .dbg$gl_next_loc EQL .desc[dsc$a_pointer])
			ELSE ( f = 0 ; .dbg$gl_next_loc EQL .symbol_start ))
		! match found so use symbol table type.
						    THEN
							    BEGIN
		    dbg$deposit_target[dsc$b_dtype] = dbg$rst_type(.nt_ptr);

							    IF .f
						    	    THEN
								BEGIN
								dbg$deposit_target[dsc$b_class] = .desc[dsc$b_class];
								IF .desc[dsc$b_class] EQL DSC$K_CLASS_SD
								THEN
								    dbg$deposit_target[dsc$b_scale] = .desc[dsc$b_scale];
								END
							    END
							! no matching symbol so use default type
						    ELSE
							    BEGIN
							    dbg$deposit_target[dsc$b_dtype] = .dbg$gl_dflttyp;
							    IF .dbg$deposit_target[dsc$b_dtype] EQL dsc$k_dtype_t
							        THEN 
							    	dbg$deposit_target[dsc$w_length] = 
							    	    (IF .dbg$gw_dfltleng  NEQ 0
							    		THEN .dbg$gw_dfltleng
							    		ELSE 4);
							    END
						    END
						ELSE 
						    BEGIN
						    dbg$deposit_target[dsc$b_dtype] = .dbg$gl_dflttyp;
						    IF .dbg$deposit_target[dsc$b_dtype] EQL dsc$k_dtype_t
						        THEN 
						    	dbg$deposit_target[dsc$w_length] = 
						    	    (IF .dbg$gw_dfltleng NEQ 0
						    		THEN .dbg$gw_dfltleng
						    		ELSE 4);						    
						    END
					END
				     ELSE 
					    BEGIN
					    dbg$deposit_target[dsc$b_dtype] = .dbg$gl_dflttyp;
					    IF .dbg$deposit_target[dsc$b_dtype] EQL dsc$k_dtype_t
					        THEN 
					    	dbg$deposit_target[dsc$w_length] = 
					    	    (IF .dbg$gw_dfltleng NEQ 0
					    		THEN .dbg$gw_dfltleng
					    		ELSE 4);
				    END
			   END;
		    END;

		[.list_elem_ntptr(.dbg$gl_head_lst) NEQ 0]:
			
		    BEGIN

			! If a field specification or structure reference appeared,
			! fill in the descriptor from the target cell of the
			! commmand argument list, ocnfident that range checking 
			! has been done in DBGBLI.

			IF .list_elem_args(.dbg$gl_head_lst) NEQ 0
					OR
			   .list_elem_fldrf(.dbg$gl_head_lst) NEQ 0
				 THEN
				     BEGIN
					dbg$deposit_target[dsc$b_dtype] = dsc$k_dtype_ubs;
					dbg$deposit_target[dsc$w_length] = .list_elem_size(.dbg$gl_head_lst);
					dbg$deposit_target[dsc$w_bit_offst] = .list_elem_pos(.dbg$gl_head_lst);
					dbg$deposit_target[dsc$_sgn_ext] = .list_elem_ext(.dbg$gl_head_lst);
				     END
			! If the target is an array cell we use the type of that
			! cell, confident that range checking has been done in 
			! dbg$getarrayadr.
			ELSE 
			    BEGIN
				LOCAL nt_ptr : REF rst$entry;
				nt_ptr = .list_elem_ntptr(.dbg$gl_head_lst);

				! If the symbol is not global

				IF (.nt_ptr[rst$b_kind] NEQ rst$k_module)
				AND NOT .nt_ptr[rst$v_global]
				    THEN
					BEGIN
					    LOCAL dst_ptr : REF dst$record;
					    dst_ptr = .nt_ptr[rst$l_dstptr];

					    ! and if it is an array

			    IF .dst_ptr[dst$v_valkind] EQL dst$k_valkind_desc
						THEN

						! fill in the array upper bound and
						! the array descriptor pointer for later use.

						BEGIN
						    LOCAL BOUNDS : ARRAY_BNDS_DESC;
						    dbg$symbol_valu(.nt_ptr,
								array_desc);
						    dbg$dyn_str_desc = .array_desc; ! for dynamic strings
						    desc = .array_desc;
				    IF .desc[dsc$b_class] EQL DSC$K_CLASS_SD OR
					.desc[dsc$b_class] EQL DSC$K_CLASS_A OR
					.desc[dsc$b_class] EQL DSC$K_CLASS_nca
						    THEN
							BEGIN
							dbg$deposit_target[dsc$b_scale] = .desc[dsc$b_scale] ;
							IF NOT (.desc[dsc$b_class] EQL DSC$K_CLASS_SD )
							THEN
							    BEGIN
							    in_array = TRUE ;
							    dbg$get_bounds(.array_desc,bounds);
							    array_uppr_bnd = .bounds[array_address] + 
									.bounds[array_length];
							    END;
							END
						    ELSE
							dbg$deposit_target[dsc$b_class] = .desc[dsc$b_class];
						END;
					END;
 
				! SET SYMBOL TYPE
		CASE dbg$rst_type(.nt_ptr) FROM min_nt_type TO max_nt_type
				    OF
				    SET
				    [ZERO_NT_TYPE] :
					BEGIN
					dbg$deposit_target[DSC$B_DTYPE] = DSC$K_DTYPE_LU;
					END;
				    [INRANGE] :
					BEGIN
		dbg$deposit_target[DSC$B_DTYPE] = dbg$rst_type(.NT_PTR);

					IF .dbg$deposit_target[DSC$B_DTYPE] EQL DSC$K_DTYPE_FC
					OR .dbg$deposit_target[DSC$B_DTYPE] EQL DSC$K_DTYPE_DC
					OR .dbg$deposit_target[DSC$B_DTYPE] EQL DSC$K_DTYPE_GC
					OR .dbg$deposit_target[DSC$B_DTYPE] EQL DSC$K_DTYPE_HC
					THEN
				   	    BEGIN
					    IN_COMPLX = TRUE ;
					    END;


					dbg$deposit_target[DSC$W_LENGTH] = 
					    (CASE .dbg$deposit_target[DSC$B_DTYPE] FROM DSC$K_DTYPE_Z
									TO DSC$K_DTYPE_HC
						OF
						SET
						[DSC$K_DTYPE_T,
						DSC$K_DTYPE_NU,
						DSC$K_DTYPE_NL,
						DSC$K_DTYPE_NR,
						DSC$K_DTYPE_NLO,
						DSC$K_DTYPE_NRO,
						DSC$K_DTYPE_P,
						DSC$K_DTYPE_NZ] :
						    BEGIN
						    .DESC[DSC$W_LENGTH]


						    END;
						[INRANGE,OUTRANGE] :
						    BEGIN
						    0
						    END;
						TES);
					END;
				    [OUTRANGE] :
					BEGIN
					dbg$deposit_target[DSC$B_DTYPE] = .DBG$GL_DFLTTYP;
					IF .dbg$deposit_target[DSC$B_DTYPE] EQL DSC$K_DTYPE_T
					THEN
					    BEGIN
					    dbg$deposit_target[DSC$W_LENGTH] =
						(IF .DBG$GW_DFLTLENG NEQ 0
						 THEN .DBG$GW_DFLTLENG
						 ELSE 4);
					    END;


					END;
				    TES;
			    END
		    END;


		[OTHERWISE] : 

		    BEGIN
			IF .list_elem_args(.dbg$gl_head_lst) NEQ 0
					OR
			   .list_elem_fldrf(.dbg$gl_head_lst) NEQ 0
				 THEN
				     BEGIN
					dbg$deposit_target[dsc$b_dtype] = dsc$k_dtype_ubs;
					dbg$deposit_target[dsc$w_length] = .list_elem_size(.dbg$gl_head_lst);
					dbg$deposit_target[dsc$w_bit_offst] = .list_elem_pos(.dbg$gl_head_lst);
					dbg$deposit_target[dsc$_sgn_ext] = .list_elem_ext(.dbg$gl_head_lst);
				     END
				 ELSE 
				     BEGIN
					dbg$deposit_target[dsc$b_dtype] = .dbg$gl_dflttyp;
					IF .dbg$deposit_target[dsc$b_dtype] EQL dsc$k_dtype_t
					    THEN 
						dbg$deposit_target[dsc$w_length] =
							(IF .dbg$gw_dfltleng NEQ 0
								THEN .dbg$gw_dfltleng
								ELSE 4);
				     END
		    END;

		TES;

		! If the target type has a fixed length we fill in the length
		! field of the descriptor here

		IF .dbg$deposit_lengvec[.dbg$deposit_target[dsc$b_dtype]] NEQ 0
			THEN 
				BEGIN
				dbg$deposit_target[dsc$w_length] = .dbg$deposit_lengvec[.dbg$deposit_target[dsc$b_dtype]];
				END;

! IF THE TARGET TYPE IS NOT INSTRUCTION, THEN
! IF OVERWRITING PC THEN CLEAR PARTLY DONE BIT;
! CHECK AND STORE THE TARGET'S PROTECTION STATUS.
! SIGNAL AN ACCESS VIOLATION IF APPROPRIATE.
! FOR INSTRUCTION DEPOSITS THIS MUST BE DONE AFTER THE SOURCE HAS BEEN ENCODED.
! ASCI DEPOSITS MAY RUN ACROSS PAGE BOUNDARIES SO CHECK FOR THIS AND
! TRUNCATE IF APPROPRIATE.
! CHK_PC_AND_PROT checks and stores the target's protection, resets the partly
! done bit if the target overlaps the user pc, and has the side effect of
! setting affected_bytes.

		SELECTONE .dbg$deposit_target[DSC$B_DTYPE]
		    OF
		    SET

		    [DSC$K_DTYPE_T] :
			BEGIN
		!	IF .dbg$deposit_target[DSC$W_LENGTH] GTR PAGE_SIZE
		!	THEN
		!	    BEGIN
		!	    SIGNAL (DBG$_STGTRUNC);
		!	    dbg$deposit_target[DSC$W_LENGTH] = PAGE_SIZE;
		!	    END;
			! Check the protection for non-dynamic descriptors
			IF .dbg$deposit_target[DSC$B_CLASS] NEQ DSC$K_CLASS_D
			THEN CHK_PC_AND_PROT (dbg$deposit_target);
			END;

		    [DSC$K_DTYPE_ZI] :
			BEGIN
			0;
			END;

		    [OTHERWISE] :
			BEGIN
			CHK_PC_AND_PROT (dbg$deposit_target);
			END;
		    TES;



!BUILD SOURCE DESCRIPTOR: 
!
! hack for strings
		IF .LIST_ELEM_EXP1(.source_ptr) NEQA 0 
				AND
		   .LIST_ELEM_EXP1(.source_ptr) EQLA .LIST_ELEM_STORE(.source_ptr)
		THEN
		    LIST_ELEM_TYPE(.source_ptr) = DSC$K_DTYPE_CAS ;

		! SET SOURCE TYPE, CHECKING FOR SPECIAL CASE OF UBS
		IF .LIST_ELEM_ARGS(.source_ptr) NEQ 0
				OR
		   .LIST_ELEM_FLDRF(.source_ptr) NEQ 0

		THEN  ! UNALIGNED BIT STRING
		    dbg$deposit_source[DSC$B_DTYPE] = DSC$K_DTYPE_UBS

		ELSE  ! ALL OTHER CASES
		    dbg$deposit_source[DSC$B_DTYPE] = .LIST_ELEM_TYPE(.source_ptr);

		! THE DOT FIELD IS IGNORED DURING PARSING UNLESS THE
		! LANGUAGE IS BLISS OR MACRO, SO SET IT NOW.
		! QUOTED AND DYNAMIC STRING SOURCES ALWAYS GET A DOT.

		IF .dbg$deposit_source[DSC$B_DTYPE] EQL DSC$K_DTYPE_T
				OR
		   .dbg$deposit_source[DSC$B_DTYPE] EQL DSC$K_DTYPE_CAS
		THEN
		    LIST_ELEM_DOT(.source_ptr) = 1;

		IF .DBG$GB_LANGUAGE NEQ LANG_MACRO
				AND
		   .DBG$GB_LANGUAGE NEQ LANG_BLISS
		THEN
		    LIST_ELEM_DOT(.source_ptr) = 1;



		! NOW DETERMINE IF WE HAVE INDIRECTION OR NOT
		IF .LIST_ELEM_DOT(.source_ptr)

		THEN
		    BEGIN

		    ! WE WANT ACTUAL VALUES SO SET NECESSARY FIELDS.

		    SELECTONE .dbg$deposit_source[DSC$B_DTYPE]
		    OF SET

			[DSC$K_DTYPE_Z] :  ! STRUCTURES WITH NO FIELD REFS
				BEGIN
				dbg$deposit_source[DSC$B_DTYPE] = DSC$K_DTYPE_LU;
				dbg$deposit_source[DSC$A_POINTER] = LIST_ELEM_EXP1(.source_ptr);
				dbg$deposit_source[DSC$W_LENGTH] = .dbg$deposit_lengvec[DSC$K_DTYPE_LU];
				END;

			[DSC$K_DTYPE_B,
			 DSC$K_DTYPE_BU,
			 DSC$K_DTYPE_W,
			 DSC$K_DTYPE_WU,
			 DSC$K_DTYPE_L,
			 DSC$K_DTYPE_LU,
			 DSC$K_DTYPE_F,
			 DSC$K_DTYPE_D] :
				BEGIN
				dbg$deposit_source[DSC$A_POINTER] = LIST_ELEM_EXP1(.source_ptr);
				dbg$deposit_source[DSC$W_LENGTH] = 
					.dbg$deposit_lengvec[.dbg$deposit_source[DSC$B_DTYPE]];
				END;

			[DSC$K_DTYPE_T] :
				BEGIN
				dbg$deposit_source[DSC$A_POINTER] = .LIST_ELEM_EXP1(.source_ptr);
				dbg$deposit_source[DSC$W_LENGTH] = .DBG$GL_ASCI_LEN;
				dbg$deposit_source[DSC$B_CLASS] = DSC$K_CLASS_S;
				END;

			[DSC$K_DTYPE_UBS] :
				BEGIN
				dbg$deposit_source[DSC$W_LENGTH] = .LIST_ELEM_SIZE(.source_ptr);
				dbg$deposit_source[DSC$A_POINTER] = LIST_ELEM_EXP1(.source_ptr);
				dbg$deposit_source[DSC$W_BIT_OFFST] = .LIST_ELEM_POS(.source_ptr);
				dbg$deposit_source[DSC$_SGN_EXT] = .LIST_ELEM_EXT(.source_ptr);
				END;

			[OTHERWISE] :
				IF .dbg$deposit_source[DSC$B_DTYPE] LEQ dsc$k_dtype_highest
				THEN
				BEGIN
				dbg$deposit_source[DSC$A_POINTER] = LIST_ELEM_EXP1(.source_ptr);
				dbg$deposit_source[DSC$W_LENGTH] = .dbg$deposit_lengvec[.dbg$deposit_source[DSC$B_DTYPE]];
				END

				ELSE ! THESE GET A LOCAL DEFAULT TYPE
				BEGIN
				IF  .dbg$deposit_source[DSC$B_DTYPE] EQL DSC$K_DTYPE_CAS
				THEN
				    BEGIN
				    LOCAL
					CS_PTR : REF VECTOR[,BYTE];
				    CS_PTR = .LIST_ELEM_EXP1(.source_ptr);


				    dbg$deposit_source[DSC$A_POINTER] = CS_PTR[1];
				    dbg$deposit_source[DSC$W_LENGTH] = .CS_PTR[0];
				    dbg$deposit_source[DSC$B_CLASS] = DSC$K_CLASS_S;
				    dbg$deposit_source[DSC$B_DTYPE] = DSC$K_DTYPE_T;
				    END
				ELSE
				    BEGIN
				    dbg$deposit_source[DSC$B_DTYPE] = DSC$K_DTYPE_LU;
				    dbg$deposit_source[DSC$A_POINTER] = LIST_ELEM_EXP1(.source_ptr);
				    dbg$deposit_source[DSC$W_LENGTH] = .dbg$deposit_lengvec[DSC$K_DTYPE_LU];
				    END;
				END;
			TES;
		    END


	        ELSE
		    BEGIN
		 
		    ! NO INDIRECTION. THE TARGET SHOULD GET THE ADDRESS OF THE SOURCE

		    SELECTONE .dbg$deposit_source[DSC$B_DTYPE]
		    OF SET
		
			[DSC$K_DTYPE_UBS] :
				BEGIN
				LIST_ELEM_EXP1(.source_ptr) = .LIST_ELEM_EXP1(.source_ptr)
							+ .LIST_ELEM_POS(.source_ptr)
							/ %BPUNIT;
				dbg$deposit_source[DSC$A_POINTER] = LIST_ELEM_EXP1(.source_ptr);
				END;

			[OTHERWISE]:
				BEGIN
				dbg$deposit_source[DSC$A_POINTER] = LIST_ELEM_EXP1(.source_ptr);
				END;
		    TES;

		    ! TYPE IS ALWAYS SET TO LONGWORD LOGICAL
		    dbg$deposit_source[DSC$B_DTYPE] = DSC$K_DTYPE_LU;
		END;

	! NOW DEPOSIT SOURCE INTO TARGET
	status = dbg$perform_deposit();

!RESET PROTECTION IF NECESSARY
		!++
		! IF ANY OF THE PROTECTION STATUSES SAY RESET THE PROTECTION
		! (TO READ ONLY), THEN RESET THE PROTECTION ON THAT PAGE.
		!--

		   recover_mem(.dbg$deposit_target[dsc$a_pointer], prot_change_status,
				prot_changed_to, .number_of_pages);

		! Check for an unsuccessful deposit
		!
		IF NOT .status 
		THEN
		    SIGNAL (dbg$_nocnvt);

		dbg$gl_last_loc = .dbg$deposit_target[dsc$a_pointer];
		dbg$gl_next_loc = .dbg$gl_last_loc + .affected_bytes;
		in_list = TRUE;
		END
	WHILE (source_ptr = .list_elem_flink(.source_ptr)) NEQA 0;
END;	! of DBG$DEPOSIT_CMD

GLOBAL ROUTINE DBG$PERFORM_DEPOSIT =
	BEGIN
!++
!	This routine is called by dbg$deposit_cmd after the source and
!	target descriptors have been set up.
!	It was factored out into a subroutine so it could also be called
!	from the new debugger routine dbg$nexecute_deposit.
!--

	
		!This code is organized like a tree with a case statement on the
		! target type followed in each instance with a case statement on
		! the source type.

		! NOTE: dsc$k_dtype_UBS is homemade and means UNALLIGNED BIT STRING
		! It should be replaced when and if there is an official data type
		! of the same nature.

		(SELECTONE .dbg$deposit_target[dsc$b_dtype] OF

		    SET

		    [dsc$k_dtype_z] : 	! UNSPECIFIED, 0
				dbg$deposit_type_z();
		    [dsc$k_dtype_v] :	! ALLIGNED BIT STRING, 1
				dbg$deposit_type_v();
		    [dsc$k_dtype_bu] :	! BYTE LOGICAL, 2
				dbg$deposit_type_bu();
		    [dsc$k_dtype_wu] :	! WORD LOGICAL, 3
				dbg$deposit_type_wu();
		    [dsc$k_dtype_lu] :	! LONGWORD LOGICAL, 4
				dbg$deposit_type_lu();
		    [dsc$k_dtype_qu] :	! QUADWORD LOGICAL, 5
				dbg$deposit_type_qu();
		    [dsc$k_dtype_b] :	! BYTE INTEGER, 6
				dbg$deposit_type_b();
		    [dsc$k_dtype_w] :	! WORD INTEGER, 7
				dbg$deposit_type_w();
		    [dsc$k_dtype_l] :	! LONGWORD INTEGER, 8
				dbg$deposit_type_l();
		    [dsc$k_dtype_q] :	! QUADWORD INTEGER, 9
				dbg$deposit_type_q();
		    [dsc$k_dtype_o] :   ! OCTA_WORD INTEGER, 26
				dbg$deposit_type_o();
		    [dsc$k_dtype_f] :	! SINGLE PRECISION FLOATING, 10
				dbg$deposit_type_f();
		    [dsc$k_dtype_d] :	! DOUBLE PRECISION FLOATING, 11
				dbg$deposit_type_d();
		    [dsc$k_dtype_fc] :	! COMPLEX, 12
				dbg$deposit_type_fc();
		    [dsc$k_dtype_dc] :	! DOUBLE PRECISION FLOATING COMPLEX, 13
				dbg$deposit_type_dc();
		    [dsc$k_dtype_t] :	! ASCII TEXT STRING, 14
				dbg$deposit_type_t();
		    [dsc$k_dtype_nu] :	! NUMERIC STRING UNSIGNED, 15
				dbg$deposit_type_nu();
		    [dsc$k_dtype_nl] :	! NUMERIC STRING LEFT SEPARATE SIGN, 16
				dbg$deposit_type_nl();
		    [dsc$k_dtype_nlo] :	! NUMERIC STRING LEFT OVERPUNCHED SIGN, 17
				dbg$deposit_type_nlo();
		    [dsc$k_dtype_nr] :	! NUMERIC STRING RIGHT SEPARATE SIGN, 18
				dbg$deposit_type_nr();
		    [dsc$k_dtype_nro] :	! NUMERIC STRING RIGHT OVERPUNCHED SIGN, 19
				dbg$deposit_type_nro();
		    [dsc$k_dtype_nz] :	! NUMERIC STRING ZONED SIGN, 20
				dbg$deposit_type_nz();
		    [dsc$k_dtype_p] :	! PACKED DECIMAL STRING, 21
				dbg$deposit_type_p();
		    [dsc$k_dtype_zi] :	! SEQUENCE OF INSTURCTIONS, 22
			BEGIN
			IF .dbg$deposit_source[dsc$b_dtype] EQL dsc$k_dtype_t
			    THEN
				BEGIN
				LOCAL 	INSTR_BUF : VECTOR[MAX_INST_LEN, BYTE],
					COUNTED_STRING : VECTOR[256,BYTE];
				counted_string[0] =
					.dbg$deposit_source[dsc$w_length];
				CH$MOVE(.counted_string[0], 
					.dbg$deposit_source[dsc$a_pointer],
					counted_string[1]);
				IF dbg$ins_encode(counted_string, 
					  instr_buf, 
					  .dbg$deposit_target[dsc$a_pointer])
				    THEN
				        BEGIN
					dbg$deposit_target[dsc$w_length] =
						.instr_buf[0];
					chk_pc_and_prot(dbg$deposit_target);
					CH$MOVE(.instr_buf[0],
					        instr_buf[1],
				         (.dbg$deposit_target[dsc$a_pointer]));
					true
				        END
				    ELSE false
				END
			    ELSE false
			END;
		    [dsc$k_dtype_zem] : ! PROCEDURE ENTRY MASK, 23
				BEGIN
				false
				END;
		    [dsc$k_dtype_ou] :	! OCTAWORD LOGICAL, 25
			BEGIN
			false
			END;
		    [dsc$k_dtype_o] :	! OCTAWORD INTEGER, 26
			BEGIN
			false
			END;
		    [dsc$k_dtype_g] :	! DOUBLE PRECISION G FLOATING, 64 BIT, 27
				dbg$deposit_type_g();
		    [dsc$k_dtype_h] :	! QUADRUPLE PRECISION FLOATING, 128 BIT, 28
				dbg$deposit_type_h();
		    [dsc$k_dtype_gc] :	! DOUBLE PRECISION COMPLEX, G FLOATING, 29
				dbg$deposit_type_gc();
		    [dsc$k_dtype_hc] :	! QUADRUPLE PRECISION COMPLEX, H FLOATING, 30
				dbg$deposit_type_hc();
		    [dsc$k_dtype_ubs] : 
				dbg$deposit_type_ubs();
		    [OTHERWISE] : false;
		    TES)

	END ; ! dbg$perform_deposit



ROUTINE recover_mem (start_address, was_any_change, changes_made, 
    			number_of_pages) :NOVALUE =

!++
! Functional description:
!	This routine goes thru the vector changes_made and changes
!	all pages whose memory protection was altered back to their
!	previous protections. It is to be used in conjunction with
!	routines which wish to temporarily alter the protection on
!	pages of memory for such purposes as depositing a value
!	into a location on that page.
!
! Input parameters:
!	start_address	-	Where to start changing the protection on
!				pages of memory which were previously altered.
!
!	was_any_change	-	A vector containing in each byte whether a 
!				change was made for that page of memory.
!
!	changes_made	-	A vector containing the original protections
!				of pages of memory whose protection was
!				altered.
!
!	number_of_pages	-	The number of pages of memory which were
!				affected by possible alteration.
!
! Inplicit inputs:
!	None.
! 
! Output parameters:
!	None.
!
! Implicit outputs:
! 	None.
!
! Routine value:
!	None.
!
! Side effects:
!	Any pages whose protection was temporarily altered within
!	the range specified by start_address thru 
!	(start_address * number_of_pages) is returned to its original
!	value.
!
!--

BEGIN
    MAP 
    	changes_made:	VECTOR[,BYTE],
    	was_any_change:	VECTOR[,BYTE];


    LITERAL
    	pages = 8,		! Maximum number of pages that can be changed.
    	page_size = 512;	! The page size in bytes on a VAX.


    LOCAL
    	change_it,		! Index variable to go thru all the addresses
    				! to be checked for possible recovery of
    				! original memory protection.

    	address_changed;	! The address that is to be checked for 
    				! possible recovery of original memory
    				! protection.


    INCR change_it FROM 0 TO .number_of_pages - 1
    	DO BEGIN
    		IF .was_any_change[.change_it] EQL dbg$k_reset_prt
        	THEN BEGIN
    			 address_changed = (page_size * (.change_it ))
    						+ .start_address;


    			 dbg$redo_prot(.address_changed,
    					 changes_made[.change_it]);
    		     END;
    	   END;

END;


END
ELUDOM
