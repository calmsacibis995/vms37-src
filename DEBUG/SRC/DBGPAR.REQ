
!		REQUIRE FILE DBGPAR.REQ
!
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!
!++
! FACILITY:
!	
!	DEBUG
!
! ABSTRACT:
!
!	Contains definitions for parsing related structures:
!
!	1)	Ascii string descriptor ( Vax standard )
!
!	2)	Command execution tree nodes
!
!	3)	Literal values for selected ascii characters
!
! ENVIRONMENT:
!
!	VAX/VMS
!
! AUTHOR:
!
!	David Plummer
!
! CREATION DATE:
!
!	6-26-80
!
! MODIFIED BY:
!	
!	1-July-1980	Alyson L. Abramowitz
!	11-Sep-1981	Richard Title
!
! VERSION:
!
! 1.00 				Added definitions for plus, minus, multiply, divide, left
!				parenthesis and right parenthesis.
! 3.00	RT	10-Sep-81	Added the field dbg$l_noun_value2 to the noun_node.
!				This was to accomodate ranges in the EXAMINE and
!				TYPE commands.
! 3.01	RT	25-Sep-81	Added ascii code dbg$k_ampersand
!--



	! Input string descriptor definition. This definition is compatable
	! with the use of the dsc$b_dtype, dsc$b_class, dsc$w_length, and 
	! dsc$a_pointer MACROs.

LITERAL
	DBG$K_STG_DESC_SIZE 	= 8;		! Length in BYTES 

MACRO
	DBG$STG_DESC = BLOCK [DBG$K_STG_DESC_SIZE, BYTE] %;

	! Dummy definition of fields. These are declared for real in STARLET.

! MACRO
!	DSC$W_LENGTH	= 0, 0, 16, 0 %,	! Length of string
!	DSC$B_DTYPE	= 2, 0, 8, 0 %,		! type of descriptor (dsc$k_dtype_t)
!	DSC$B_CLASS	= 3, 0, 8, 0 %,		! Class of descriptor (dsc$k_class_s)
!	DSC$A_POINTER	= 4, 0, 32, 0 %;	! Address of string


	! Definition for command execution tree nodes


FIELD
    DBG$VERB_NODE_FIELDS =
	SET

	DBG$B_VERB_LITERAL	= [0, 0, 8, 0],		! First level verb
	DBG$B_VERB_COMPOSITE	= [0, 8, 8, 0],		! Second or third level verb
	DBG$L_VERB_ADVERB_PTR	= [1, 0, 32, 0],	! Pointer to adverb node
	DBG$L_VERB_OBJECT_PTR	= [2, 0, 32, 0]		! Pointer to object (noun node)

	TES;

LITERAL
	DBG$K_VERB_NODE_SIZE	= 3;			! Length in longwords

MACRO
	DBG$VERB_NODE = BLOCK [DBG$K_VERB_NODE_SIZE] FIELD (DBG$VERB_NODE_FIELDS) %;
	

FIELD
    DBG$ADVERB_NODE_FIELDS =
	SET

	DBG$B_ADVERB_LITERAL	= [0, 0, 8, 0],		! Adverb id literal
	DBG$L_ADVERB_VALUE	= [1, 0, 32, 0],	! Value (integer)
	DBG$L_ADVERB_LINK	= [2, 0, 32, 0]		! Link to next adverb node

	TES;

LITERAL
	DBG$K_ADVERB_NODE_SIZE	= 3;			! Length in longwords

MACRO
	DBG$ADVERB_NODE = BLOCK [DBG$K_ADVERB_NODE_SIZE] FIELD (DBG$ADVERB_NODE_FIELDS) %;


FIELD
    DBG$NOUN_NODE_FIELDS =
	SET

	DBG$L_NOUN_VALUE	= [0, 0, 32, 0],	! Noun value 
	DBG$L_ADJECTIVE_PTR	= [1, 0, 32, 0],	! Pointer to adjective (unused)
	DBG$L_NOUN_LINK		= [2, 0, 32, 0],	! Pointer to next noun
    	DBG$L_NOUN_VALUE2	= [3, 0, 32, 0]

	TES;

LITERAL
	DBG$K_NOUN_NODE_SIZE	= 4;			! Length in longwords

MACRO
    DBG$NOUN_NODE = BLOCK [DBG$K_NOUN_NODE_SIZE] FIELD (DBG$NOUN_NODE_FIELDS) %;
	



	! Ascii character literals

LITERAL
	DBG$K_LCBIAS		= 32,			! Lower case bias
	DBG$K_TAB		= 9,			! Horizontal tab
	DBG$K_SEMICOLON		= 59,			! ';'
	DBG$K_CAR_RETURN	= 13,			! <cr>
	DBG$K_LINE_FEED		= 10,			! <lf>
	DBG$K_NULL		= 0,			! Null character
	DBG$K_EX_POINT		= 33,			! '!'
	DBG$K_BLANK		= 32,			! ' '
    	DBG$K_AMPERSAND		= 38,			! '&'   
	DBG$K_AT_SIGN		= 64,			! '@'
	DBG$K_SLASH		= 47,			! '/'
	DBG$K_BACKSLASH		= 92,			! '\'
	DBG$K_EQUAL		= 61,			! '='
	DBG$K_COMMA		= 44,			! ','
	DBG$K_DOT		= 46,			! '.'
	DBG$K_COLON		= 58,			! ':'
	DBG$K_UPARROW		= 94,			! '^'
	DBG$K_QUOTE		= 39,			! '''
    	DBG$K_LEFT_PARENTHESIS	= 40,			! '('
    	DBG$K_RIGHT_PARENTHESIS = 41,			! ')'
    	DBG$K_MULTIPLY		= 42,			! '*'
    	DBG$K_PLUS		= 43,			! '+'
    	DBG$K_MINUS		= 45,			! '-'
    	DBG$K_DIVIDE		= DBG$K_SLASH,		! '/'
	DBG$K_DBLQUOTE		= 34,			! '"'



! Define unary operators too

    	DBG$K_UNARY_PLUS	= 230,
    	DBG$K_UNARY_MINUS	= 231;


	! End of dbgpar.req
	
