1 @file-spec
     Instructs the debugger to execute debugger commands contained  in
     the  specified  file.  A file specified in the @file-spec command
     is called a command procedure or an indirect command file.

     The command procedure can contain any debugger command, including
     another  @file-spec  command.  When the debugger executes an EXIT
     command in a command procedure or reaches the end of the file, it
     returns  control  to  the command stream that invoked the command
     procedure.  A command stream can  be  the  terminal,  a  previous
     command  procedure,  or  a  DO  command  sequence  in a SET BREAK
     command.

          If you enter SET OUTPUT VERIFY, all  commands  read  from  a
     command procedure are echoed on the terminal.

 Format:

     @file-spec
2 Parameters
 file-specification

     Specifies  the  command  procedure  to  be  executed.    If   the
     file-specification does not include a file type, the default file
     type .COM is used.  Note  that  the  file  specification  is  not
     delimited by quotation marks (") or apostrophes (').
1 CALL
     Calls the specified procedure.  You can specify  the  procedure's
     name  or  virtual address.  If the procedure requires one or more
     arguments, you must specify them in the CALL command.

 Format:

     CALL routine-name [ (argument1 [,argument2,...]) ]
2 Parameters
 routine-name

     Specifies the name or the virtual address of the procedure to  be
     called.   Note  that,  if  a  virtual address is used, it must be
     expressed as an integer, not as an expression.

 argument(s)

     One or more arguments required by the procedure.
1 CANCEL
     Cancels breakpoints, tracepoints, and watchpoints,  and  restores
     scope and user-set entry/display modes and types to their default
     values.  The item canceled depends on the  keyword  specified  in
     the command.

 Format:

     CANCEL keyword [/qualifier] [parameters]
2 Parameters
 keyword

     Specifies the item to be canceled.  Keyword can  be  ALL,  BREAK,
     EXCEPTION BREAK, MODE, MODULE, SCOPE, TRACE, TYPE, or WATCH.

 qualifier

     Depends on the keyword specified.

 parameters

     Depends on the keyword specified.
2 ALL
     Cancels all breakpoints, tracepoints, watchpoints,  and  restores
     scope and user-set entry/display modes and types to their default
     values.

     CANCEL ALL does not affect the modules included in  the  debugger
     symbol table or the current language.

 Format:

     CANCEL ALL
2 BREAK
     Cancels a breakpoint at the location  denoted  by  the  specified
     address-expression or cancels all breakpoints.

     You  must  specify  either  an  address-expression  or  the  /ALL
     qualfier, but not both, when you use the CANCEL BREAK command.

     Note that the command CANCEL ALL also cancels all breakpoints.

 Format:

     CANCEL BREAK [/qualifier] [address-expression]
3 Parameters
 address-expression

     Denotes the location of the breakpoint to be canceled.
3 Qualifiers
/ALL

     Specifies that all breakpoints be canceled.
2 EXCEPTION BREAK
     Cancels exception breakpoints.

     The command CANCEL EXCEPTION BREAK  cancels  the  effect  of  the
     command  SET  EXCEPTION BREAK.

 Format:

     CANCEL EXCEPTION BREAK
2 MODE
     Cancels  radix  mode  and   symbolic/nosymbolic   mode   settings
     established   by   the  SET  MODE  command,  thus  reestablishing
     language-specific default mode values.

 Format:

     CANCEL MODE
2 MODULE
     Removes symbols declared in the specified  module(s)  or  in  all
     modules  from  the  debugger  symbol  table.   The  CANCEL MODULE
     command can be used when the symbol  table  is  full  and  it  is
     necessary to delete the symbols of selected module(s) in order to
     make room for the symbols of other module(s).

     You can remove the symbols  from  one  module,  from  a  list  of
     modules, or from all modules.

 Format:

     CANCEL MODULE [/qualifier] [ module1[,module2,...] ]
3 Parameters
 module(s)

     Specifies the name of the  module(s)  whose  symbols  are  to  be
     removed from the symbol table.
3 Qualifiers
/ALL

     Specifies that symbols in all modules be removed from the  symbol
     table.
2 SCOPE
     Cancels the current scope search  list  established  by  the  SET
     SCOPE command.

     The CANCEL SCOPE command is equivalent in effect to  the  command
     SET  SCOPE  0.   As a result of the CANCEL SCOPE command, symbols
     without pathname prefixes are interpreted as if they occurred  in
     the  currently  active  program  unit,  that is, the program unit
     containing the PC.

 Format:

     CANCEL SCOPE
2 SOURCE
     Cancels the current source directory search list  established  by
     previous SET SOURCE commands.

     The CANCEL SOURCE command without a command qualifier cancels the
     effect  of a previous SET SOURCE command;  it does not cancel the
     effect of any previous SET SOURCE/MODULE=modname commands.

     The CANCEL SOURCE/MODULE=modname command cancels the effect of  a
     previous  SET  SOURCE/MODULE=modname  command  in  which the same
     module name was specified;  it does not cancel the  effect  of  a
     previous  SET  SOURCE  command  or of a SET SOURCE/MODULE=modname
     command in which a different module name was specified.

Format

     CANCEL SOURCE[/MODULE=modname]
3 Qualifiers
/MODULE=modname

     Specifies the name of a  module  for  which  a  source  directory
     search list is to be canceled.
2 TRACE
     Cancels a  tracepoint  at  a  location  denoted  by  a  specified
     address-expression,   at  each  member  of  the  family  of  CALL
     instructions,  at  each  member   of   the   family   of   BRANCH
     instructions, or at all instructions.

     If you specify an address-expression as a parameter in the CANCEL
     TRACE  command,  the  tracepoint  at the location denoted by that
     address-expression is canceled.  If you specify /BRANCH or /CALL,
     tracepoints  on  instructions  that  are members of the family of
     BRANCH  instructions  or  CALL  instructions,  respectively,  are
     canceled.  If you specify /ALL, all tracepoints are canceled.

     Note that the command CANCEL ALL also cancels all tracepoints.

 Format:

     CANCEL TRACE [/qualifier] [address-expression]
3 Parameters
 address-expression

     Denotes the location of the tracepoint to be canceled.
3 Qualifiers
/ALL

     Cancels all tracepoints.
/BRANCH

     Cancels  tracepoints  at  members  of  the   family   of   BRANCH
     instructions.
/CALL

     Cancels  tracepoints  at  members   of   the   family   of   CALL
     instructions.
2 TYPE/OVERRIDE
     Cancels  the  debugger  override  type  established  by  the  SET
     TYPE/OVERRIDE  command, thus setting the current override type to
     "none."

     As a result of the CANCEL TYPE/OVERRIDE command, program entities
     are  interpreted  in  compiler-generated  types or in the default
     type.

     Note that the CANCEL TYPE command  must  be  specified  with  the
     /OVERRIDE command qualifier.

 Format:

     CANCEL TYPE/OVERRIDE
3 Qualifiers
/OVERRIDE

     Must be specified.  The minimum abbreviation is /OVERR.
2 WATCH
     Cancels a watchpoint set at the location denoted by the specified
     address-expression or at all watchpoints.

     If  you  specify  an  address-expression  as  a  parameter,   the
     watchpoint  at the location denoted by that address-expression is
     canceled.  If you specify /ALL, all watchpoints are canceled.

     Note that the CANCEL ALL command also cancels all watchpoints.

 Format:

     CANCEL WATCH [/qualifier] [address-expression]
3 Parameters
 address-expression

     Denotes the location of the watchpoint to be canceled.
3 Qualifiers
/ALL

     Specifies that all watchpoints be canceled.
1 Control
2 Key
     Generally, the effect of pressing CTRL/Y or CTRL/C is  the  same:
     the image is interrupted (but unchanged), the terminal type-ahead
     buffer is purged, and the command interpreter receives control.

     Interrupting program execution with CTRL/Y or  CTRL/C  is  useful
     (1) if you have not run your program with the debugger but decide
     that you want the debugger or (2) if your program is executing an
     infinite loop that does not contain a breakpoint.

     Pressing CTRL/Z  causes  orderly  termination  of  the  debugging
     session.   It  is  identical  in effect to the EXIT command.  See
     Section 1.5 and Section 1.6 for more information.

 Format:

     <CTRL/C>
     <CTRL/Y>
     <CTRL/Z>
1 DEFINE
          Defines one or more symbol(s)  and  assigns  them  specified
     address(es) for the duration of the debugging session.


          You can use these symbols to reference  an  address  in  the
     image.   For  example,  you  can  define  symbols for nonsymbolic
     program locations or for symbolic program locations  having  long
     pathname  prefixes,  thereby  enabling  you  to  reference  these
     program locations by using the symbols you define for them.

 Format:

     DEFINE symbol=expression [,symbol=expression ...]
2 Parameters
 symbol

     Specifies the name of the symbol to be  defined.   The  following
     rules must be followed when defining a symbol name:

      o  Symbols can be composed of alphanumeric characters  (A-Z  and
         0-9),  underscores  (_),  dollar  signs ($), and periods (.).
         Periods cannot be  used  in  some  languages.   The  debugger
         interprets  lowercase  alphabetic  characters  as  uppercase.

      o  The first character must not be a number (0-9)  or a  period.

      o  The symbol must be no more than 31 characters long.

 expression

     Either a virtual address or a symbolic address.   The  expression
     must   have  a  value  between  1  and  0FFFFFFFF  (hexadecimal).
     Integers in the expression are interpreted in the  current  radix
     mode.   You can use radix operators to override the current radix
     mode.
1 DEPOSIT
     Deposits the expression directly following  the  equal  sign  (=)
     into the location denoted by the address-expression, and deposits
     any additional expressions specified  into  locations  which  are
     logical  successors  to  the  location  denoted  by the specified
     address-expression.

 Format:

     DEPOSIT    [/qualifier]    address-expression    =    expression1
     [,expression2,...]
2 Parameters
 address-expression

     Denotes  the  location  into  which  the  expression  immediately
     following the equal sign (=) is to be deposited.

     In some languages, the DEPOSIT command sets  the  current  entity
     symbol (.) to the program location denoted by address-expression.
     Logical successors are figured using the  value  of  the  current
     entity symbol.

 expression

     Denotes the value to be deposited.  If more than  one  expression
     is  specified,  the first expression is deposited at the location
     denoted by the address-expression, the second expression  at  the
     location denoted by the logical successor of the location denoted
     by  the  address-expression,  and  so  on,  for  each  expression
     specified.  Expressions are separated by a comma.

     An expression is evaluated in the syntax of the source  language.

     Radix mode qualifiers usually affect its interpretation.

     Upon execution of the DEPOSIT command, the value of expression is
     converted  to  the  type  associated  with address-expression and
     placed at the location denoted by address-expression.

     If expression is an ASCII string or a VAX-11 instruction, it must
     be delimited by quotation marks (") or by apostrophes (').
2 Qualifiers
/BYTE

     Specifies that type byte integer (length 1  byte)  be  associated
     with the location denoted by address-expression.
/WORD

     Specifies  that  the  type  word  integer  (length  2  bytes)  be
     associated with the location denoted by address-expression.
/LONG

     Specifies that the type longword  integer  (length  4  bytes)  be
     associated with the location denoted by address-expression.
/QUADWORD

     Specifies that the type quadword  integer  (length  8  bytes)  be
     associated with the location denoted by the address expression.
/OCTAWORD

     Specifies that the type octaword integer  (length  16  bytes)  be
     associated with the location denoted by the address expression.
/FLOAT

     Specifies that the F_floating type (length 4 bytes) be associated
     with  the  location denoted by the address expression.  Values of
     type F_floating may range from  .29*10**-38  to  1.7*10**38  with
     approximately 7 decimal digits precision.
/D_FLOAT

     Specifies that the D_floating type (length 8 bytes) be associated
     with  the  location denoted by the address expression.  Values of
     type D_floating may range from  .29*10**-38  to  1.7*10**38  with
     approximately 16 decimal digits precision.
/G_FLOAT

     Specifies that the G_floating type (length 8 bytes) be associated
     with  the  location denoted by the address expression.  Values of
     type G_floating may range from .56*10**-308  to  .9*10**308  with
     approximately 15 decimal digits precision.
/H_FLOAT

     Specifies  that  the  H_floating  type  (length  16   bytes)   be
     associated  with  the location denoted by the address expression.
/ASCII:n

     Specifies that type ASCII of length n (in  bytes)  be  associated
     with  the location denoted by address-expression.  The value n is
     interpreted in the  radix  specified  by  a  radix  mode  command
     qualifier  or  in  the  current radix mode.  If n is omitted, the
     debugger assumes a default length of 4 bytes.
/INSTRUCTION

     Specifies that type INSTRUCTION be associated with  the  location
     denoted  by  address-expression.   Length  associated  with  type
     instruction is variable, depending on the number of operands  and
     the kind of addressing modes used in the instruction.
/OCTAL

     Specifies   that   numbers   in   expressions    and    in    the
     address-expression be interpreted in octal radix.
/DECIMAL

     Specifies   that   numbers   in   expressions    and    in    the
     address-expression be interpreted in decimal radix.
/HEXADECIMAL

     Specifies   that   numbers   in   expressions    and    in    the
     address-expression be interpreted in hexadecimal radix.
1 EVALUATE
     Evaluates an expression.  The debugger interprets  the  parameter
     in an EVALUATE command as a source-language expression, evaluates
     it in the semantics of the  source  language,  and  displays  its
     value as a literal in the source-language.

     If   an    expression    contains    symbols    with    different
     compiler-generated  types,  the debugger uses the type-conversion
     rules of the current language to evaluate the expression.

 Format:

     EVALUATE [/qualifier] expression [,expression,...]
2 Parameters
 expression

     Any legal expression in the source language, where an  expression
     may   be   composed  of  one  or  more  operators,  operands,  or
     delimiters.
2 Qualifiers
/ADDRESS

     Specifies that the expression  which  is  the  parameter  in  the
     EVALUATE  command  be interpreted as an address-expression, whose
     value is a virtual memory address.
/DECIMAL

     Specifies that  numbers  in  the  expression  be  interpreted  in
     decimal  radix  and  (in  some  languages)  that the value of the
     expression be displayed in decimal radix.
/HEXADECIMAL

     Specifies that  numbers  in  the  expression  be  interpreted  in
     hexadecimal  radix  and (in some languages) that the value of the
     expression be displayed in hexadecimal radix.
/OCTAL

     Specifies that numbers in the expression be interpreted in  octal
     radix and (in some languages) that the value of the expression be
     displayed in octal radix.
1 EXAMINE
     Displays the value of the entity at the location denoted  by  the
     address-expression in the type associated with that location.

     When you examine  the  PSL  in  SYMBOL  mode,  the  debugger
     displays its contents in a formatted arrangement;  otherwise, the
     debugger displays its  contents  as  a  numeric  literal  in  the
     current radix mode.

 Format:

     EXAMINE [/qualifier[/qualifier]] [addr-expr[:addr-expr] [,addr-expr[:addr-expr]...]]
2 Parameters
 addr-expr

     Specifies the entity to be examined.  If a range of  entities  is
     to  be examined, the value of the address-expression that denotes
     the first entity in the range must be less than the value of  the
     address-expression that denotes the last entity in the range.  If
     a list of entities is to  be  examined,  the  address-expressions
     which denote them may be listed in the command in any order.
2 Qualifiers
/BYTE

     Specifies that the examined entity or entities  be  displayed  in
     the type byte integer (length 1 byte)
/WORD

     Specifies that the examined entity or entities  be  displayed  in
     the type word integer (length 2 bytes)
/LONG

     Specifies that the examined entity or entities  be  displayed  in
     the type long integer (length 4 bytes)
/FLOAT

     Specifies that the examined entity or entities  be  displayed  in
     the  F_floating type (length 4 bytes).  Values of type F_floating
     may range from .29*10**-38 to  1.7*10**38  with  approximately  7
     decimal digits precision.
/D_FLOAT

     Specifies that the examined entity or entities  be  displayed  in
     the  D_floating type (length 8 bytes).  Values of type D_floating
     may range from .29*10**-38 to 1.7*10**38  with  approximately  16
     decimal digits precision.
/G_FLOAT

     Specifies that the examined entity or entities  be  displayed  in
     the  G_floating type (length 8 bytes).  Values of type G_floating
     may range from .56*10**-308 to .9*10**308 with  approximately  15
     decimal digits precision.
/H_FLOAT

     Specifies that the examined entity or entities  be  displayed  in
     the H_floating type (length 16 bytes).  Values of type H_floating
     may range from .84*10**-4932 to .59*10**4932  with  approximately
     33 decimal digits precision.
/QUADWORD

     Specifies that the examined entity or entities  be  displayed  in
     the type quadword integer (length 8 bytes).
/OCTAWORD

     Specifies that the examined entity or entities  be  displayed  in
     the type octaword integer (length 16 bytes).
/ASCII:n

     Specifies  that  the  entity   or   entities   denoted   by   the
     address-expression(s)  be  displayed  in  type  ASCII of length n
     bytes.  The length indicates both the number of bytes  of  memory
     to  be  examined  and  the  number  of  ASCII  characters  to  be
     displayed.  If n is omitted, the debugger uses the default  value
     of 4 bytes.
/INSTRUCTION

     Specifies that the examined entity or entities  be  displayed  in
     the type INSTRUCTION.  Length associated with type instruction is
     variable, depending on the number of operands  and  the  kind  of
     addressing modes used in the instruction.
/SOURCE

     Specifies that the parameter is to be  interpreted as an address,
     and  the  source  line  corresponding  to  the  address  is to be 
     displayed.
/OCTAL

     Specifies that numeric literals in the  address-expression(s)  be
     interpreted  in  octal radix and that examined entity or entities
     be displayed in octal radix.
/DECIMAL

     Specifies that numeric literals in the  address-expression(s)  be
     interpreted  in  decimal  radix  and  that the examined entity or
     entities be displayed in decimal radix.
/HEXADECIMAL

     Specifies that numeric literals in the  address-expression(s)  be
     interpreted  in hexadecimal radix and that the examined entity or
     entities be displayed in hexadecimal radix.
/SYMBOL

     Specifies  that  the  debugger  translate  the   value   of   the
     address-expression  in  the  EXAMINE command and use its symbolic
     equivalent (if one exists) on  the  next  display  line  when  it
     displays   the   entity   at   the   location   denoted   by  the
     address-expression.   If  the  displayed  entity   is   of   type
     instruction,   its  operand(s)  are  displayed  symbolically  (if
     possible).  The PSL is  displayed  in  formatted  form  when  the
     nosymbol command qualifier is specified in an EXAMINE command.
/NOSYMBOL

     Specifies  that  the  debugger   display   the   value   of   the
     address-expression  in  the  EXAMINE  command as a virtual memory
     address or as an offset to a symbolic location when  it  displays
     the  entity  at  that  location  on  the  display  line.   If the
     displayed entity is  of  type  instruction,  its  operand(s)  are
     displayed  as  numeric  literals,  even  if  they have a symbolic
     representation.  The PSL is displayed as a numeric  literal,  not
     in formatted form.
1 EXIT
     Causes  orderly  termination  of  the  debugging  session.    The
     debugger  exit handler is executed and exit status information is
     displayed.

     After execution of an EXIT command, you cannot continue debugging
     your program by entering the DCL commands DEBUG and CONTINUE.  To
     reinitiate the debugger, you must run your program again.

     Note that the EXIT command is also used  to  signal  the  end  of
     command  input in an indirect command file (or command procedure)
     and in a DO command sequence.  In either case, it does not  cause
     termination  of  the  debugging session.  In a command procedure,
     the EXIT command causes return of control to the  command  stream
     that  invoked the command procedure.  In a DO command sequence at
     breakpoint, the EXIT command causes additional commands in the DO
     command  sequence  to  be  ignored  and the debugger prompt to be
     displayed.

 Format:

     EXIT
1 GO
     Starts or continues program execution.

     If the GO command is specified without an address-expression as a
     parameter,  execution  resumes  at the point of suspension or, in
     the case of debugger start-up, at the transfer address.

     If the GO command is specified with an address-expression as
     a  parameter,  execution  resumes  at the location denoted by the
     address-expression.  Note that using an address-expression  as  a
     parameter  in the GO command can produce unpredictable results if
     the state of your program required to commence execution  at  the
     location  specified by the address-expression is not identical to
     the state of your program at the time the GO command is issued.

 Format:

     GO [address-expression]
2 Parameters
 address-expression

     Specifies that program execution resume at the  location  denoted
     by the address-expression.
1 HELP
     Displays the following information about any debugger command:  a
     description  of  the  command,  format of the command, qualifiers
     that may be specified with the command, and parameters  that  may
     be specified with the command.

     If  you  want  information  about  a  particular   qualifier   or
     parameter,  specify  it  as  a subtopic.  If you want information
     about all command qualifiers, specify "qualifier" as a  subtopic.
     If you want information about all parameters, specify "parameter"
     as a subtopic.  If you want all  available  information  about  a
     command, specify an asterisk (*) as a subtopic.

 Format:

     HELP topic [subtopic ...]
2 Parameters
 topic

     Specifies the name of the command you need help with.

 subtopic

     Specifies a particular qualifier or  parameter  about  which  you
     want  further  information,  or  a command keyword that gives you
     information about a range of qualifiers or parameters or both.


     If you want information  about  a  particular  qualifier  or
     parameter,  specify it as a subtopic.  Note that when you specify
     a qualifier, you must include the preceding slash  (/).   If  you
     want   information   about   all   command   qualifiers,  specify
     "qualifier" as a subtopic.  If you  want  information  about  all
     parameters,  specify  "parameter" as a subtopic.  If you want all
     available information about a command, specify an asterisk (*) as
     a subtopic.
1 SEARCH

     Directs the debugger to search the source code for the  specified
     string  and  to  display  the  source line or lines containing an
     occurrence of the string.

     The range parameter designates a program region to  be  searched.

     The string parameter specifies the  source  code  characters  for
     which  to  search.  If the string parameter is not specified, the
     debugger uses the last specified  search  string,  that  is,  the
     string  parameter specified in the last SEARCH command.

 Format

     SEARCH[/qualifier[/qualifier]] range string
2 Parameters
 range

     Limits the debugger's search for occurrences  of  the  string  to
     specified   program   regions.   These  program  regions  may  be
     specified in any of the following formats:

      o  MODNAME indicates a search of the specified module from  line
         number 0 to the end of the module

      o  MODNAME\LINE-NUM indicates a search of the  specified  module
         from the specified line number to the end of the module

      o  MODNAME\LINE-NUM:LINE-NUM indicates a search of the specified
         module  beginning at the line number specified to the left of
         the colon and ending at the  line  number  specified  to  the
         right of the colon

      o  LINE-NUM indicates a search of the module designated  by  the
         current  scope  setting from the specified line number to the
         end of the module

      o  LINE-NUM:LINE-NUM indicates a search of the module designated
         by  the  current  scope  setting beginning at the line number
         specified to  the  left  of  the  colon  and  ending  at  the
         line-number to the right of the colon

      o  NULL (that is, no entry)  indicates  a  search  of  the  same
         module  as  that  from  which a source line was most recently
         displayed (as a result of either  a  TYPE  or  EXAMINE/SOURCE
         command), beginning at the first line following the line most
         recently displayed and continuing to the end of the module
 string

     Specifies the string in the source code for which to search.

     The string parameter may be enclosed in quotation marks (") or in
     apostrophes (') or may be specified without delimiters.

     If  the  string  is  delimited  by  either  quotation  marks   or
     apostrophes,  it  may  contain  spaces  and  tabs, as well as any
     alphanumeric or special characters.

     If the  string  is  enclosed  in  quotation  marks,  an  enclosed
     quotation  mark is indicated by a double quotation mark ("").  If
     the string is enclosed in apostrophes, an enclosed apostrophe  is
     indicated by a double apostrophe ('').

     If,  however,  the  string  is  not  delimited,   the   following
     restrictions apply:

      o  It must have no leading or trailing blanks or tabs.

      o  It must have no embedded semicolon (;).

      o  The range parameter must not be null;  that is,  an  explicit
         range must be specified.
2 Qualifiers

/ALL

     Specifies that the debugger search for  all  occurrences  of  the
     string  in  the specified range and display every line containing
     an occurrence of the string.
/NEXT

     Specifies that the debugger search for the  first  occurrence  of
     the  string  in  the  specified  range  and only display the line
     containing this occurrence.  This is the default.
/IDENTIFIER

     Specifies that the debugger  search  for  an  occurrence  of  the
     string  in  the specified range but display the string only if it
     is bounded on either side by a character that cannot be  part  of
     an identifier in the current language.
/STRING

     Specifies that the debugger search for and display the string  as
     specified,   and   not   interpret  the  context  surrounding  an
     occurrence of the string, as it does in the case of  /IDENTIFIER.
     This is the default.
1 SET

     Establishes breakpoints, tracepoints, or watchpoints or sets  the
     language,  modules, step conditions, and default modes and types.
     The item set depends on the keyword specified.

 Format:

     SET keyword [/qualifier] parameter
2 Parameters
 keyword

     Specifies the item to be set.  Keyword can  be  BREAK,  EXCEPTION
     BREAK,  LANGUAGE,  LOG, MODE, MODULE, OUTPUT, SCOPE, STEP, TRACE,
     TYPE, or WATCH.

 parameters

     Depends on the keyword specified.
2 BREAK
     Establishes a breakpoint at the location denoted by the specified
     address-expression.

     When a breakpoint is activated, the  debugger  (1)  suspends
     program  execution,  (2) displays the location of the breakpoint,
     (3) executes a DO command sequence (if one was specified when the
     breakpoint was set), and (4) issues its prompt.

     When you set a breakpoint, you  can  specify  that  one  or  more
     debugger  commands  be executed at breakpoint activation.  You do
     this by including a DO command sequence in the SET BREAK command.

 Format:

     SET    BREAK     [/qualifier]     address-expression     [     DO
     (command[;command;...]) ]
3 Parameters
 address-expression

     Specifies the location at which the breakpoint is set.

 command

     Any debugger command that you want the  debugger  to  execute  as
     part  of  the DO command sequence when break action is taken.  If
     you  specify  more  than  one  command,  separate  them  with   a
     semicolon.
3 Qualifiers
/AFTER:n

     Specifies that break action  not  be  taken  until  the  nth  and
     subsequent   activations   of  the  location  designated  by  the
     address-expression.  The value n is interpreted in decimal  radix
     mode, no matter what radix mode settings are in effect.
2 EXCEPTION BREAK
     Specifies  that  the  debugger  treat  an   exception   condition
     generated by your program as a breakpoint.

     As a result of this command, whenever your program  generates  an
     exception  condition, the debugger responds by suspending program
     execution, reporting the exception condition, and  prompting  you
     for  input.  Exception handlers that are part of your program are
     not executed.

 Format:

     SET EXCEPTION BREAK
2 LANGUAGE
     Establishes the current language.

     At debugger start-up, the debugger sets the current  language  to
     that  in  which  the  module  containing  the transfer address is
     written.  You can (and should) change this language  by  the  SET
     LANGUAGE  command  if  you  begin debugging a module written in a
     different source language.


     The current language  influences  several  debugger  default
     parameters,  namely,  those  of type, radix, and step values.  In
     addition, languages differ on such matters as  type  conversions,
     the  evaluation  of  expressions,  and acceptable syntax, special
     characters, and symbols.

 Format:

     SET LANGUAGE language-name
3 Parameters
 language-name

     Specifies the name of the language.  Valid languages include  the
     following:  BASIC, BLISS, COBOL, FORTRAN, PASCAL, PL/I (specified
     as PLI), and MACRO.
2 LOG
     Specifies the name of the log file to which the  debugger  writes
     when the output parameter is set to LOG.

 Format:

     SET LOG file-spec
3 Parameters
 file-spec

     The log file's file specification.   If  the  file  specification
     begins  with  a  special symbol such as a square bracket ([), you
     must enclose the file specification in  quotation  marks  (")  or
     apostrophes   (');    otherwise,   do   not   enclose   the  file
     specification in these delimiters.
2 MARGIN
     Specifies the leftmost source-line character position at which to
     begin  display  of a line of source code (the left margin) and/or
     the rightmost source-line character  position  at  which  to  end
     display of a line of source code.

     The SET MARGIN command affects  only  the  display  of  lines  of
     source code, that is, the display resulting from commands such as
     TYPE and EXAMINE/SOURCE.  The SET MARGIN command does not  affect
     the  display  resulting from commands (such as EXAMINE, EVALUATE,
     SHOW MODE, and so on) that do not  display  source  code.

 Format:

                  rm
     SET MARGIN   lm:rm
                  lm:
                    :rm

3 Parameters:

 lm - The source-line character position at which to begin  display  of
      the line of source code (the left margin).

 rm - The source-line character position at which to end display of the
      line of source code (the right margin).
     If you specify a single number, the debugger sets the left margin
     to 1 and the right margin to the number specified.

     If you specify two numbers, separated with a colon, the  debugger
     sets  the  left margin to the number specified to the left of the
     colon and the right margin to the number specified to  the  right
     of the colon.

     If you specify a single number followed by a colon, the  debugger
     sets the left margin to the number specified and leaves the right
     margin unchanged.

     If you specify a colon followed by a single number, the  debugger
     sets the right margin to the number specified and leaves the left
     margin unchanged.
2 MAX_SOURCE_FILES

     Specifies the maximum number of source files  that  the  debugger
     may keep open at any one time.

     If you do not issue the SET MAX_SOURCE_FILES command  to  specify
     the  maximum  number  of  I/O channels that the debugger may keep
     open at any one time, a default value of 5 is assumed.

     Note that the value of MAX_SOURCE_FILES does not limit the number
     of  source files that the debugger can open, it limits the number
     that may be kept open at any one time.   Thus,  if  the  debugger
     reaches this limit, it must close a file in order to open another
     one.

     Note too that setting MAX_SOURCE_FILES to a very small number can
     make the debugger's use of source files inefficient.
 Format

     SET MAX_SOURCE_FILES n


3 Parameters

 n - Specifies the maximum number of source files  that  the  debugger
     may keep open at any one time.
2 MODE
     Establishes   the    default    radix    and/or    the    default
     symbolic/nosymbolic modes.

 Format:

     SET MODE mode-keyword [,mode-keyword]
3 Parameters
 mode-keyword

     May be any one of the following:

     o  DECIMAL -- Sets the default radix to decimal.

     o  HEXADECIMAL -- Sets the default radix to hexadecimal.

     o  OCTAL -- Sets the default radix to octal.

     o  NOSYMBOLIC -- Specifies that the debugger display all  symbols
        in their numeric equivalents.

     o  SYMBOLIC -- Specifies that the debugger display the  locations
        denoted  by  address-expressions  symbolically  (if possible),
        display instruction operands symbolically (if  possible),  and
        display the value of the PSL in a formatted arrangement.
2 MODULE
     Copies compiler-generated records  about  the  symbols  in   the
     specified  module(s),  or  all  modules, into the run-time symbol
     table.

 Format:

     SET MODULE [/qualifier] [module-name [,module-name] ...  ]
3 Parameters
 module-name

     Specifies the name of the module whose symbol records are  to  be
     copied into the run-time symbol table.
3 Qualifiers
/ALL

     Specifies that the symbol records of all modules be  copied  into
     the run-time symbol table.
2 OUTPUT
     Specifies the debugger output configuration, that is, the way  in
     which debugger responses to commands are displayed and recorded.

 Format:

     SET OUTPUT option [,option ...]
3 Parameters
 option

     May be one of the following six output parameters:

     o  LOG -- Specifies that both debugger output and user  input  be
        recorded  in  a  log file.  If you specify the name of the log
        file by the SET LOG command, the debugger writes to that file;
        otherwise, the debugger writes to a file with the default file
        specification DEBUG.LOG.

     o  NOLOG -- Specifies that debugger output and user input  not  be
        recorded in a log file.  This is a default output parameter.

     o  TERMINAL -- Specifies that debugger output be displayed at the
        terminal.  This is a default output parameter.

     o  NOTERMINAL --  Specifies  that  debugger  output,  except  for
        diagnostic messages, not be displayed at the terminal.

     o  VERIFY -- Specifies that the debugger's echoing of commands in
        command  procedures and in DO Command sequences be included as
        debugger output.

     o  NOVERIFY -- Specifies that the debugger's echoing of  commands
        in  command  procedures  and  in  DO  Command Sequences not be
        included  as  debugger  output.   This  is  a  default  output
        parameter.
2 SCOPE
     Designates one or more program locations (specified by  pathnames
     and/or other special characters) to be used in the interpretation
     of symbols  that  are  specified  without  pathname  prefixes  in
     debugger commands.

 Format:

     SET SCOPE location [,location,...]
3 Parameters
 location

     Designates one or more program locations specified  by  pathnames
     and/or  other  special  characters.  The following are acceptable
     parameters in the SET SCOPE command:

     o  Pathname -- One or more program location labels, separated  by
        the   backslash  character  (\),  that  identifies  a  program
        location or a range of program  locations.   Program  location
        labels  may  be  module,  routine, and block names, as well as
        line numbers and numeric labels.  A common pathname format  is
        the  following:   MODULE\ROUTINE\BLOCK\.   A  pathname  may be
        complete or incomplete, so long  as  it  identifies  a  unique
        program location or range of program locations.

     o  0,1,2,...--  The  set  of  decimal  integers  represent
        called  routines,  where  0  represents  the  currently active
        program  unit,  1  represents  the  routine  that  called  the
        currently active program unit, and so on.

     o  \ -- Represents the set of all program locations in which  the
        declaration of any global symbol in the program is known.
2 SEARCH

     Establishes current SEARCH parameters to be used by the  debugger
     whenever  a SEARCH command qualifier is not specified in a SEARCH
     command.

     SEARCH parameters determine whether the debugger searches for all
     occurrences  (ALL)  of  the  string  or  only the next occurrence
     (NEXT) of the string,  and  whether  the  debugger  displays  any
     occurrence  of  the  string (STRING) or only those occurrences in
     which the string is not bounded on either  side  by  a  character
     that  cannot  be  part  of  an identifier in the current language
     (IDENTIFIER).

     You can specify more than one SEARCH parameter in  a  single  SET
     SEARCH command by separating each parameter with a comma.

 Format

     SET SEARCH parameter[,parameter]


3 Parameters

 parameter

     Specifies  the  current   SEARCH   parameters.    The   following
     parameters may be specified:

      o  ALL specifies that the debugger search for all occurrences of
         the  string  in  the  specified  range and display every line
         containing an occurrence of the string.

      o  NEXT  specifies  that  the  debugger  search  for  the  first
         occurrence  of  the string in the specified range and display
         the line containing this occurrence.  This is the default.

      o  IDENTIFIER  specifies  that  the  debugger  search   for   an
         occurrence  of  the string in the specified range but display
         the string only  if  it  is  bounded  on  either  side  by  a
         character that cannot be part of an identifier in the current
         language.

      o  STRING specifies that the debugger search for and display the
         string   as   specified,   and   not  interpret  the  context
         surrounding an occurrence of the string, as it  does  in  the
         case of IDENTIFIER.
2 SOURCE

     Directs the  debugger  in  the  location  of  source  file(s)  by
     overriding  selected  field(s)  in the full file specification of
     the original (at compile time) source file(s).

     You use the SET SOURCE command to override one, several,  or  all
     fields -- but  typically  only  the directory name -- in the full
     file specification of the original (at compile time) source file.
     The debugger then inserts the specified name field(s) in place of
     the  corresponding   name   field(s)   of   the   original   file
     specification  to produce a new full file specification, which it
     then uses to locate the source file.  However, if a  new  version
     number  field  is not explicitly specified, the debugger searches
     all versions of the new file specification  until  it  finds  one
     with  the  same size, revision date, and revision time as that of
     the original source file, and then uses this version  for  source
     line display.

     You can override the name field(s) in more  than  one  full  file
     specification  using  a  single  SET SOURCE command by separating
     with a comma (,)  the  name  field(s)  that  apply  to  one  file
     specification  from  those that apply to another.  Since the name
     field(s) are most often just directory names, when  you  override
     these  names  for  more than one full file specification, you are
     said to be creating a source directory search list.  The debugger
     handles  a  source  directory  search list by searching the first
     directory specified to locate the source file for a module,  then
     the  second  directory specified, then the next, and so on, until
     it either locates  the  source  file  or  exhausts  the  list  of
     directories.

 Format

     SET SOURCE[/MODULE=modname] dirname[,dirname...]

3 Parameters

 dirname

     Specifies one or more  file-specification  fields  to  insert  in
     place   of   the   corresponding   field(s)   in  the  full  file
     specification of the original (at compile time) source file(s).

     Dirname may consist of one, several,  or  all  of  the  following
     fields  in  the  full file specification, which has the following
     format:
          node::device:[directory]file-name.file-type;version-number

     When specifying  any  of  these  fields,  you  must  include  the
     punctuation  for  that  field, as shown in the above format.  For
     example, to specify a node name, follow it with two colons  (::);
     to specify a device name, follow it with a colon (:);  to specify
     a directory name, enclose it in brackets ([]);  to specify a file
     type,  precede  it  with  a period (.);  and to specify a version
     number, precede it with a semicolon (;).   A  file  name  is  not
     punctuated.
3 Qualifiers
/MODULE=modname

     Specifies that the indicated directory search list is to be  used
     in locating source files only for the specified module.
2 STEP
     Establishes current step conditions to be used  by  the  debugger
     whenever  a  step  command  qualifier  is not specified in a STEP
     command.

 Format:

     SET STEP condition [,condition ...]
3 Parameters
 condition

     Specifies  the  current  step  condition.   The  following   STEP
     conditions are acceptable parameters in the SET STEP command.

     o  INSTRUCTION -- A single step  causes  execution  of  a  single
        instruction   at   the   location  where  execution  was  last
        suspended.

     o  LINE -- A single step causes execution of all  the  user  code
        between  the  location  where execution was last suspended and
        the next line boundary.

     o  INTO -- Steps "into" a called  routine  in  the  user  program
        space.   In  its  execution  of  steps,  the debugger does not
        differentiate between code within a called  routine  and  code
        outside of a called routine.

     o  OVER -- Steps "over" a called  routine  in  the  user  program
        space.  The debugger considers any code executed as the result
        of a CALL instruction, up to and including  the  corresponding
        RETURN instruction, to be part of a single STEP.

     o  SYSTEM -- Steps "into" called routines in system space.
        In its execution of steps, the debugger does not differentiate
        between code within a called routine in system space and  code
        outside a called routine in system space.  This step condition
        allows you to step  through  code  in  system  space  that  is
        executing in user mode.

     o  NOSYSTEM -- Steps "over" called routines in system space.  The
        debugger  considers  any code executed as the result of a CALL
        instruction, up to  and  including  the  corresponding  RETURN
        instruction, to be part of a single STEP.

     o  SOURCE -- Displays the line(s) of source code that correspond
        to the instruction(s) being executed with each step.

     o  NOSOURCE -- Specifies that line(s)  of  source  code  not  be
        displayed  when  STEP  commands  are  executed.   This is the
        default.
2 TRACE
     Establishes a tracepoint at the location denoted by  a  specified
     address-expression,  or  at  instructions that are members of the
     family of CALL instructions, or at instructions that are  members
     of the family of BRANCH instructions, or at instructions that are
     members of either the CALL or BRANCH families.

 Format:

     SET TRACE [/qualifier] [address-expression]
3 Parameters
 address-expression

     Denotes  the  location  at  which  the  tracepoint   is   to   be
     established.
3 Qualifiers
/BRANCH

     Specifies  that  tracepoints  be  established  at  each  of   the
     following  members  of  the family of BRANCH instructions:  BNEQ,
     BEQL, BGTR, BLEQ, BGEQ, BLSS,  BGTRU,  BLEQU,  BVC,  BVS,  BGEQU,
     BLSSU,  BRB,  BRW,  JMP, BBS, BBC, BBSS, BBCS, BBSC, BBCC, BBSSI,
     BBCCI, BLBS, BLBC, ACBB, ACBW, ACBL, ACBF, ACBD, AOBLEQ,  AOBLSS,
     SOBGEQ, SOBGTR, CASEB, CASEW, CASEL.
/CALL

     Specifies  that  tracepoints  be  established  at  each  of   the
     following  members  of  the  family of CALL instructions:  CALLS,
     CALLG, BSBW, BSBB, JSB, RSB, RET.
2 TYPE
     Establishes the  default  type  to  be  associated  with  untyped
     program locations and, when the /OVERRIDE qualifier is specified,
     the type to be associated with both untyped program locations and
     program locations that have compiler-generated types.

 Format:

     SET TYPE [/qualifier] type-keyword
3 Parameters
 type-keyword

     May be one of the following debugger types:

     o  BYTE -- Type byte integer (length 1 byte)

     o  WORD -- Type word integer (length 2 bytes).

     o  LONG -- Type longword integer (length 4 bytes).

     o  ASCII:n --  Type  ASCII  character  (length  n  bytes).   Each
        character  occupies one byte of memory.  If you do not specify
        a value for n, the debugger assumes  a  default  length  of  4
        bytes.  The value n is interpreted in decimal radix.

     o  INSTRUCTION -- Type  instruction  whose  length  is  variable,
        depending  on  the number of instruction operands and the kind
        of addressing modes used.

     o  QUADWORD -- Type quadword integer (length 8 bytes).

     o  OCTAWORD -- Type octaword integer (length 16 bytes).

     o  FLOAT -- F_floating type (length 4 bytes).   Values  of  type
        F_floating  may  range  from  .29*10**-38  to 1.7*10**38 with
        approximately 7 decimal digits precision.

     o  D_FLOAT -- D_floating type (length 8 bytes).  Values of  type
        D_floating  may  range  from  .29*10**-38  to 1.7*10**38 with
        approximately 16 decimal digits precision.

     o  G_FLOAT -- G_floating type (length 8 bytes).  Values of  type
        G_floating  may  range  from  .56*10**-308 to .9*10**308 with
        approximately 15 decimal digits precision.

     o  H_FLOAT -- H_floating type (length 16 bytes).  Values of type
        H_floating  may range from .84*10**-4932 to .59*10**4932 with
        approximately 33 decimal digits precision.
3 Qualifiers
/OVERRIDE

     Indicates that the specified  type  be  associated  with  untyped
     program   locations   and   with   those   locations   that  have
     compiler-generated  types.   Locations  that  are  referenced  by
     commands  containing  type command qualifiers are given the types
     specified by the command qualifiers.
2 WATCH
     Establishes  a  watchpoint  at  the  location  specified  by  the
     address-expression.

     Whenever an instruction causes  the  modification  of  a   watched
     location,   the debugger (1) suspends program execution after that
     instruction has completed  execution,  (2)  reports  the   watched
     location,   (3)  identifies  the  instruction  that  modified  the
     watched location,  (4) reports the value at the  watched  location
     before modification,  (5) reports the new or modified value at the
     watched location, and (6) issues its prompt.

 Format:

     SET WATCH address-expression
3 Parameters
 address-expression

     Specifies  the  location  at  which  the  watchpoint  is  to   be
     established.
1 SHOW
     Causes  the  debugger  to  display   the   current   breakpoints,
     tracepoints,  watchpoints,  modes,  types,  calls,  language, log
     file, modules, output configuration, scope, and  step  conditions
     when the corresponding keyword is specified.

 Format:

     SHOW keyword [/qualifier] [parameter]
2 Parameters
 keyword

     Specifies the item to be displayed.  Keyword can be BREAK, CALLS,
     LANGUAGE,  LOG,  MARGIN,  MAX_SOURCE_FILES, MODE, MODULE, OUTPUT,
     SCOPE, SEARCH, SOURCE, STEP, TRACE, TYPE, and WATCH.
 parameter

     Depends on the keyword specified.
 /qualifier 

    Depends on the keyword specified.
2 BREAK

     Causes the debugger to display breakpoints established by the SET
     BREAK command.

     If you  established  a  breakpoint  using  the  /AFTER:n  command
     qualifier  with  the  SET  BREAK  command, the SHOW BREAK command
     displays the current value of the decimal integer n, that is, the
     originally  specified  integer  value minus one for each time the
     breakpoint location was reached.  (The debugger decrements n each
     time  the  breakpoint location is reached until the value of n is
     zero, at which time the debugger takes break action.)

 Format:

     SHOW BREAK
2 CALLS
     Causes the debugger to display information about the sequence  of
     currently active procedure calls, or the number of call frames on
     the stack.

     The optional parameter n specifies the call count, or the  number
     of call frames to be displayed, by a decimal integer in the range
     0 through  32767.   If  you  do  not  specify  the  parameter  n,
     information about all call frames is displayed.

 Format:

     SHOW CALLS [n]
3 Parameters
 n

     Specifies the number of call frames  that  you  wish  information
     about.   If  omitted, the debugger displays information about all
     call frames.
2 LANGUAGE
     Causes the debugger to display the current language.

     The current language is the language last established by the  SET
     LANGUAGE   command   or  the  language  established  at  debugger
     start-up.

 Format:

     SHOW LANGUAGE
2 LOG
     Causes the debugger to display the name of the current  log  file
     and to report whether the debugger is writing to that log file.

     The current log file is the log file last established  by  a  SET
     LOG command or the default log file DEBUG.LOG.

 Format:

     SHOW LOG

2 MARGINS
     Displays the current source-line margin settings for the  display
     of source code.

     Margin settings are established by the SET  MARGIN  command.   By
     default,  the  debugger  sets  the left margin to 1 and the right
     margin to 255.

 Format

     SHOW MARGINS
2 MAX_SOURCE_FILES
     Displays the maximum number of source files that the debugger may
     keep open at any one time.

     The maximum number of source files that  the  debugger  may  keep
     open   at   any   one   time  may  be  specified  using  the  SET
     MAX_SOURCE_FILES command or may be the default value of 5.

 Format

     SHOW MAX_SOURCE_FILES
2 MODE
     Causes the debugger to display the current  radix  mode  and  the
     current symbolic or nosymbolic mode.

     The current modes are the modes last established by the SET  MODE
     command   or  the  default  modes  associated  with  the  current
     language.

 Format:

     SHOW MODE
2 MODULE
     Causes the debugger to display the  following  information  about
     each module in your program:

      o  The module name

      o  The language in which the module is written

      o  Whether or not the run-time symbol table contains information
         about the symbols in that module

      o  The space (in bytes) required in the  run-time  symbol  table
         for symbols in that module

      o  The total number of modules in the program

      o  The number of unused bytes in the  space  allocated  for  the
         run-time symbol table

 Format:

     SHOW MODULE
2 OUTPUT
     Causes the debugger to display the current output configuration.

     The current output configuration  reflects  whether  or  not  the
     debugger is displaying output on the terminal, whether or not the
     debugger is writing output to a log file, and whether or not  the
     debugger  displays input command strings when it executes command
     procedures and DO command sequences.

 Format:

     SHOW OUTPUT
2 SCOPE
     Causes the debugger to display the  current  scope  search  list,
     that  is, the scope search list established by the last SET SCOPE
     command.

     The current scope search list  designates  one  or  more  program
     locations   (specified   by   pathnames   and/or   other  special
     characters) to be used in the interpretation of symbols that  are
     specified without pathname prefixes in debugger commands.

 Format:

     SHOW SCOPE
2 SEARCH
     Displays the current SEARCH parameters.

     Current SEARCH parameters  are  either  established  by  the  SET
     SEARCH command or are the default values ALL and STRING.

     SEARCH parameters determine whether the debugger searches for all
     occurrences  (ALL)  of  the  string  or  only the next occurrence
     (NEXT) of the string,  and  whether  the  debugger  displays  any
     occurrence  of  the  string (STRING) or only those occurrences in
     which the string is not bounded on either  side  by  a  character
     that  cannot  be  part  of  an identifier in the current language
     (IDENTIFIER).

 Format

     SHOW SEARCH
2 SOURCE
     Displays the source directory search list(s) currently in effect.

     The  SET  SOURCE/MODULE=modname  command  establishes  a   source
     directory  search  list  for a particular module.  The SET SOURCE
     command establishes  a  source  directory  search  list  for  all
     modules  not  explicitly mentioned in a SET SOURCE/MODULE=modname
     command.

     If a directory search list has not been established by  means  of
     the  SET  SOURCE  or SET SOURCE/MODULE=modname commands, the SHOW
     SOURCE  command  indicates  that  no  directory  search  list  is
     currently  in  effect.   In  this case, the debugger expects each
     source file to be in the same directory as it was in  at  compile
     time.

 Format

     SHOW SOURCE
2 STEP
     Causes the debugger to display the current step conditions.

     The current step conditions reflect whether the debugger steps by
     lines  or  by  instructions,  whether  the  debugger steps "into"
     routines in the user program or  "over"  them,  and  whether  the
     debugger steps "into" routines in system space or "over" them.

     Current step conditions are the step  conditions  established  by
     the  last  SET  STEP  command  or  the  default  step  conditions
     established by the current language.

 Format:

     SHOW STEP
2 TRACE
     Causes the debugger to display tracepoints established by the SET
     TRACE command.

     If the /BRANCH or /CALL command qualifiers were used with the SET
     TRACE  command,  the  SHOW  TRACE  command causes the debugger to
     report that members of either of these families  of  instructions
     are currently being traced.

 Format:

     SHOW TRACE
2 TYPE
     Causes the debugger to display the current default  type  or,  if
     the   /OVERRIDE  command  qualifier  is  specified,  the  current
     override type.

 Format:

     SHOW TYPE [/qualifier]
3 Qualifiers
/OVERRIDE

     Causes the debugger to display the current override type.
2 WATCH
     Causes the debugger to display the locations at which watchpoints
     have  been established by the SET WATCH command and to report the
     length in bytes of each watched location.

 Format:

     SHOW WATCH
1 STEP
     Causes the debugger  to  execute  your  program  by  line  or  by
     instruction, depending on current STEP conditions.

     When you issue a STEP command, the debugger (1) reports the  next
     instruction  to be executed, (2) executes an instruction or a set
     of instructions from your program, (3)  reports  the  instruction
     that  follows  the  last instruction executed, and (4) issues its
     prompt.

 Format:

     STEP [/qualifier] [n]
2 Parameters
 n

     Specifies the number of lines or instructions to be  executed  by
     the  STEP  command.   If  you do not specify the parameter n, the
     debugger executes one line or one instruction.

2 Qualifiers
/INSTRUCTION

     A single step causes execution of a  single  instruction  at  the
     location where execution was last suspended.
/INTO

     Steps "into" a called routine in the user program space.  In  its
     execution  of  steps, the debugger does not differentiate between
     code within a  called  routine  and  code  outside  of  a  called
     routine.
/LINE

     A single step causes execution of all the user code  between  the
     location  where  execution  was  last suspended and the next line
     boundary.
/NOSOURCE
     
     Suppresses   display   of   source   code  corresponding  to  the 
     instruction that is stepped to.
/NOSYSTEM

     Steps "over" called  routines  in  system  space.   The  debugger
     considers  any code executed as the result of a CALL instruction,
     up to and including the corresponding RETURN instruction,  to  be
     part of a single STEP.
/OVER

     Steps "over" a called routine in the  user  program  space.   The
     debugger  considers  any  code  executed  as the result of a CALL
     instruction,  up  to  and  including  the  corresponding   RETURN
     instruction, to be part of a single STEP.

/SOURCE

     Displays  the  line(s)  of  source  code  corresponding  to   the
     instruction or line that follows the last instruction executed as
     a result of the STEP.


/SYSTEM

     Steps "into" called routines in system space.  In  its  execution
     of steps, the debugger does not differentiate between code within
     a called routine in  system  space  and  code  outside  a  called
     routine  in system space.  This step condition allows you to step
     through code in system space that is executing in user mode.
1 TYPE

     Displays the source language statement(s)  corresponding  to  the
     specified line number(s).

     After displaying a single line of source code,  you  can  display
     the  next  line  by issuing a TYPE command without a line number,
     that is, by issuing a TYPE command followed by  the  RETURN  key.

     You can specify a module name with the line number(s) to indicate
     that  the  line(s) are located in that module.  In this case, you
     enter the module name, a backslash (\), and the  line  number(s),
     without intervening spaces.

 Format

     TYPE [ [modname\]line-number[:line-number] -
          [,[modname\]line-number[:line-number]...] ]

2 Parameters

 line-number

     Any number generated by a compiler to  label  a  source  language
     statement or statements.

     If you specify a single line number, the  debugger  displays  the
     source code corresponding to that line number.

     If you specify a list of line numbers,  separating  each  with  a
     comma,  the  debugger  displays  the source code corresponding to
     each of the line numbers.

     If you specify a range of line numbers, separating  the  starting
     and  ending  line numbers in the range with a colon, the debugger
     displays the source code corresponding  to  that  range  of  line
     numbers.

