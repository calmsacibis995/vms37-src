MODULE DBGNEXIT (IDENT = 'V03-000') =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY: DEBUG
!
! ABSTRACT:
!
! 	This module contains the parse and execution networks to support the
!	EXIT command.
!
! ENVIRONMENT:	VAX/VMS
!
! AUTHOR:	David Plummer, CREATION DATE:	4/1/80
!
! VERSION : V02.2-001
!
! MODIFIED BY:
!		John Francis, 5 March 1981
!
! 002	JF	 5-MAR-81	Zero out dbg$gb_debug when EXITing from DEBUG
!				and always exit (even if testable DEBUG)
!
!--

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
	DBG$NPARSE_EXIT,			! ATN parse network for EXIT command
	DBG$NEXECUTE_EXIT;			! Execution network for EXIT command

!
! INCLUDE FILES:
!

REQUIRE 'SRC$:DBGPROLOG.REQ';

REQUIRE 'SRC$:DBGGEN.REQ';

!
! EXTERNAL REFERENCES:
!
EXTERNAL LITERAL dbg$gl_sup_or_test : WEAK;	! Switch for SUPERDEBUG or TEST debug

EXTERNAL ROUTINE
	DBG$NCIS_REMOVE;			! Removes links from the command input stream

EXTERNAL
	DBG$GB_DEBUG	: BYTE,			! Set if DEBUG is running
	DBG$GB_EXIT_DBG : BYTE,			! Version 2 exit from debug
	DBG$GB_DEF_OUT  : VECTOR [,BYTE],	!    "    " output configuration structure
	DBG$GL_LOGFAB   : BLOCK [,BYTE],	!    "    " FAB for log file
	DBG$GL_CISHEAD  : REF cis_link;		!    "    " head of command input stream


GLOBAL ROUTINE DBG$NPARSE_EXIT (VERB_NODE, MESSAGE_VECT) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine is the parse network for the EXIT command. Since the EXIT
!	verb has already been recognized in dbg$nparse_cmd, and nothing else may
!	follow that keyword, simply return success.
!
! FORMAL PARAMETERS:
!
!	verb_node - 		command verb node - the head of the command execution
!				tree.
!
!	message_vect -		the address of a longword to contain the address
!				of a standard message argument vector
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE - 	  The command execution tree is unaffected by this network.
!
! ROUTINE VALUE:	unsigned integer lomgword completion code
!
! COMPLETION CODES:
!
!	sts$k_success (1) -	Always returned as the value of this routine
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    RETURN sts$k_success;

    END;			! End of dbg$nparse_exit


GLOBAL ROUTINE DBG$NEXECUTE_EXIT (VERB_NODE, MESSAGE_VECT) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine is the execution network for the EXIT command. An EXIT issued
!	from an indirect command file or DO action buffer means to cease taking
!	commands from the present buffer. In this case, a buffer is removed from
!	the command input stream. An EXIT issued from the terminal means to exit
!	the debugger.
!
! FORMAL PARAMETERS:
!
!	verb_node - 	The head of the command excution tree which in the case 
!			of EXIT consists only of this one node. The value of the
!			verb node is used only to direct processing to this routine
!			and is not used by dbg$nexecute_exit itself.
!
!	message_vect -  The address of a longword to contain the address of a
!			message argument vector
!
! IMPLICIT INPUTS:
!
!	dbg$gb_exit_dbg -		Version 2 debugger exit from debug swithc
!
!	dbg$gb_def_out -		    "   "    "     output configuration structure
!
!	dbg$gl_cishead -		    "   "    "     head of command input stream
!
! IMPLICIT OUTPUTS:
!
!	The above data structures may be altered.
!
!	On failure, a message argument vector is returned.
!
! ROUTINE VALUE:
!
!	An unsigned integer longword completion code.
!
! COMPLETION CODES:
!
!	sts$k_severe (4) -	The command could not be executed.
!
!	sts$k_success (1) - 	The command was executed.
!
! SIDE EFFECTS:
!
!	This routine may force the exit of the program image. Nodes may be
!	removed from the command input stream.
!
!--

    BEGIN

    ! When an EXIT is entered to the debugger we want to 'go up a level' to
    ! the next link in the command input stream. This is done for indirect command
    ! files by removing the links for the RAB as well as the associated buffer.
    !
    IF .dbg$gl_cishead [dsc$b_dtype] EQL cis_inpbuf
    THEN
	BEGIN
	LOCAL
	    PREV_LINK : REF cis_link;

  	prev_link = .dbg$gl_cishead [next_link];
	IF .prev_link [dsc$b_dtype] EQL cis_rab
	THEN
	    BEGIN
	    IF NOT dbg$ncis_remove (.message_vect)	! Remove buffer
	    THEN
		RETURN sts$k_severe;

	    IF NOT dbg$ncis_remove (.message_vect)	! Remove RAB
	    THEN
		RETURN sts$k_severe;
	    END

	ELSE
	    IF .prev_link [dsc$b_dtype] EQL cis_dbg$input
	    THEN
		BEGIN

		! We are accepting command from DBG$INPUT, so just
		! exit to the system CLI.
		!
		dbg$gb_exit_dbg = true;

		IF .dbg$gb_def_out [out_log]
		THEN
			$CLOSE (FAB = dbg$gl_logfab);	! Close log file
		dbg$gb_debug = FALSE;
		IF dbg$gl_sup_or_test EQL 1
		THEN
			SIGNAL (ss$_debug);
		$EXIT (code = ss$_normal);
		END;

	END

    ELSE

	! If we are accepting commands from an action buffer
	! we go up a level by removing that buffer.
	!
	IF .dbg$gl_cishead [dsc$b_dtype] EQL cis_acbuf
	THEN
	    IF NOT dbg$ncis_remove (.message_vect)	! Remove the buffer
	    THEN
		RETURN sts$k_severe;

    RETURN sts$k_success;

    END;			! End of dbg$nexecute_exit


END				!End of module
ELUDOM
