MODULE DBGCON (IDENT = 'V03-000') =
BEGIN

!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
! FACILITY:	General Library
!
!++
! FUNCTIONAL DESCRIPTION:
!	CONVERSION ROUTINES.
!
! Version:	13
!
! History:
!	Author:
!		Carol Peters, 18 May 1976: Version 01
!
!	Modified by:
!		Mike Candela, 19-May-78: Version 13
!		Richard Title, 23-Jul-81: Version 3.0
!
! Revision history:
!	13	19-May-78	MCC	Changed argument passed into DBG$RADX_CONVRT
!					from string address to input_stg_desc.
!					Also made routine return a value instead
!					of NOVALUE.
!	3.0     23-Jul-81	 RT	Added routines dbg$octal_valtostg_cvt
!					and dbg$decimal_valtostg_cvt. These are
!					used in dbg$out_typ_val in DBGSSV.
!	3.0	4 -Sep-81	 RT	Added routine dbg$hex_dec_cvrt
!	3.0	21-Dec-81	 RT	Fixed a bug in dbg$decimal_valtostg_cvt.
!--

! TABLE OF CONTENTS
!

FORWARD ROUTINE
	dbg$conv_r_50,			! SPECIAL-PURPOSE RAD50 CONVERSION ROUTINE.
	dbg$radx_convrt ;	! CONVERTS A STRING TO A VALUE

!+
!	REQUIRE FILES
!-
REQUIRE 'SRC$:DBGPROLOG.REQ';

REQUIRE 'SRC$:DBGPCT.REQ';
REQUIRE 'SRC$:DBGGEN.REQ';
REQUIRE 'SRC$:SYSSER.REQ';

EXTERNAL
	dbg$gb_mod_ptr: REF VECTOR [, BYTE];	! pointer to current modes

EXTERNAL ROUTINE
	dbg$freez,
	dbg$freerelease;
LITERAL
	dbg_con		= FALSE;		! diagnostic flag

GLOBAL ROUTINE DBG$RADX_CONVRT (string_desc)  =
!++
! FUNCTIONAL DESCRIPTION:
!	CONVERTS AN ASCII STRING TO A LONGWORD value IN THE
!	current radix.
!
!
! INPUTS:
!	string_desc	- ADDRESS OF ASCII STRING INFORMATION BLOCK
!
! IMPLICIT INPUTS:
!	contents of dbg$gb_mod_ptr [mode_radix], which is the current
!	radix.
!
! OUTPUTS:
!	none
!
! IMPLICIT OUTPUTS:
!	A signal and unwind occurs if the conversion fails.
!	The converted value is placed in the address passed as the
!	second argument.
!
! ROUTINE value:
!	32 bit converted value.
!
! SIDE EFFECTS:
!	signals errors.
!--

	BEGIN

	BUILTIN
		EMUL;			! Multiply and add two longwords
					! to produce quadword result.

	MAP
		string_desc: REF BLOCK [, BYTE];

	LOCAL
		trunc_flag,		! Truncation flag
		string_ptr,		! Temporary pointer to string
		negate,			! NEGATIVE NUMBER FLAG
		char,			! character-HOLDING VARIABLE
		VALUE : VECTOR[2,LONG];	! Quadword to hold converted value.

%IF dbg_con
%THEN
	$fao_tt_out ('string is "!AS"', .string_desc);
%FI

	trunc_flag = FALSE;				! Initialize truncation flag
	VALUE[1] = 0;				 	! Initialize result
	VALUE[0] = 0;			
	string_ptr = .string_desc [dsc$a_pointer];	! Initialize temp
							! string pointer
	negate = FALSE;

	INCR n FROM 0 TO (.string_desc [dsc$w_length] - 1) DO
		BEGIN
		char = CH$RCHAR_A (string_ptr);
		IF .n EQL 0
		THEN
			BEGIN
			IF (.char EQL %C'-')
			THEN
			    BEGIN
				negate = TRUE;
				char = %C'0';
			    END;
			IF (.char EQL %C'+')
			THEN	char = %C'0';
			END;
		IF ((.char GEQ %C'0') AND (.char LEQ %C'9'))
		THEN char = .char - %C'0'
		ELSE
			IF ((.char GEQ %C'A') AND (.char LEQ %C'F'))
			THEN char = .char - %C'A' + 10
			ELSE char = 256;
		IF .char GEQ .dbg$gb_mod_ptr [mode_radix]
		THEN SIGNAL ( DBG$_INVNUMBER, 1, .string_desc)
		ELSE
			EMUL (VALUE[0], %REF(.DBG$GB_MOD_PTR[MODE_RADIX]), CHAR, VALUE);
		IF .VALUE[1] NEQ 0 THEN   trunc_flag = TRUE;

		END;


	IF .trunc_flag
	THEN SIGNAL (DBG$_NUMTRUNC);
      
	IF .negate
	THEN	VALUE[0] = - .VALUE[0];
    
    
%IF dbg_con
%THEN
	$fao_tt_out ('returned value = !XL', .VALUE[0]);
%FI
   
	RETURN .value[0];
	END;

GLOBAL ROUTINE dbg$conv_r_50( OPWORD, DST_PTR ) =
!++
! FUNCTIONAL DESCRIPTION:
!	THIS ROUTINE IS A SPECIAL-PURPOSE RAD50-TO-ASCII CONVERSION
!	ROUTINE.  IT TAKES A LONGWORD CONTAINING 2 RAD50 WORDS,
!	CONVERTS THEM TO A 6-character STRING, AND 'STUFFS' THESE 
!	characters INTO THE BYTE VECTOR WE ARE PASSED A POINTER TO.
!
! WARNING:
!	THE REST OF THE CODE WHICH INTERFACES TO THIS USES THE
!	LITERAL 'OP_CH_SIZE' TO REFER TO THIS 6-character STRING,
!	BUT THIS SIZE IS IMPLICIT IN THE CODE HERE.  IF THIS
!	CODE IS CHANGED, THE LITERAL MUST ALSO BE CHANGED.  JUST
!	CHANGING THE LITERAL IS NOT ENOUGH.
!
! CALLING SEQUENCE:
!	dbg$conv_r_50 ( LONGWORD, BYTE_POINTER );
!
! INPUTS:
!	OPWORD	- THE LONGWORD WHICH CONTAINS THE 6 RAD50 characters.
!		- THIS WORD COMES FROM THE OP_NAME FIELD OF THE
!		  dbg$GB_OPINFO DATA VECTOR.
!	DST_PTR - ANY BYTE ADDRESS INTO WHICH THIS ROUTINE WILL
!		  STUFF THE 6 ASCII characters OBTAINED FROM OPWORD.
!
! IMPLICIT INPUTS:
!	OP_CH_SIZE - FROM VAXOPS.REQ, WHICH MUST BE 6 TO MATCH THIS CODE.
!
! OUTPUTS:
!	NONE.
!
! IMPLICIT OUTPUTS:
!	THE 6 ASCII chars ARE STUFFED BACK INTO THE USER-SUPPLIED
!	STRING.
!
! ROUTINE VALUE:
!	The number of non-blank characters stuffed into
!	the output string.
!
! SIDE EFFECTS:
!	SEE IMPLICIT OUTPUTS.
!--

    BEGIN

    MAP
	DST_PTR : REF VECTOR[,BYTE];	! WHERE TO STUFF THE chars.

    LOCAL
	non_blanks,
	J,	! INDEX.
	W,	! THE LONGWORD.
	PTR : REF VECTOR[,BYTE];

    BIND
	DIVTAB = UPLIT(1, %O'50', %O'3100') : VECTOR;

	! JUST EXTRACT EACH OF THE TWO WORDS, CONVERT THEM,
	! AND STUFF BACK THE RESTULS.

	PTR = .DST_PTR;
	non_blanks = 0;

	INCR K FROM 0 TO 16 BY 16
	    DO
	    BEGIN ! DO THE CONVERSION ON BOTH WORDS SEPARATELY.
	
	    W = .OPWORD<.K,16>;
	
	    DECR I FROM 2 TO 0 DO
		BEGIN
		J = .W/.DIVTAB[.I]; W = .W - .J*.DIVTAB[.I];
		IF .J NEQ 0
		THEN
		    BEGIN
		    IF .J NEQ %O'33'
		    THEN
			BEGIN
			IF .J LSS %O'33' THEN J = .J + %O'56';
			J = .J + %O'11';
			END;
		    J = .J + %O'11';
		    END
		ELSE
		    J = %O'40';
	
		! AT THIS POINT, A SINGLE char IS IN BYTE 0 OF J.
		! Stuff the character back and tally up the
		! number of non-blank ones.
	
		IF( ((.PTR)<0,8> = .J) NEQ %O'40' )
		then
			non_blanks = .non_blanks +1;

		PTR = .PTR + 1;
		END;
	
	END;
	! END OF K LOOP.
	
    !Return the number of non-blank characters
    ! we stuffed back.

    RETURN(.non_blanks);
    END; ! OF conv_r_50 ROUTINE.

global routine dbg$octal_valtostg_cvt(value, count) =

! ++
! Functional Description:
! 	Convert a value to an ascii string. The string, when
!	printed, displays the octal representation of the value.
!
! Inputs
!	value - the actual value we are to convert.
!	count - the number of characters in the result string.
!
! Routine Value
!	A pointer to a counted string.
! Side effects
!	Allocates space for the result. This should be
!	freed by the caller when he is finished with it.
! --

    begin

    own
	result_ptr : ref vector[,byte],
    
	tran_table : vector[8,byte]
		     initial( byte( %ascii '01234567'));

    ! allocate space for the string.
    result_ptr = dbg$freez(((1+.count)/%upval)+1);

    if .result_ptr eql 0 then signal(dbg$_nofree)
    else 

	! fill in result string from right to left.
	decr i from .count to 1 do
	    begin
	    result_ptr[.i] = .tran_table[.value mod 8];
	    value = .value / 8
	    end;

    ! fill in the count.
    result_ptr[0] = .count;

    .result_ptr

    end; ! of dbg$octal_valtostg_cvt


global routine dbg$decimal_valtostg_cvt(in_value_ptr,len) =
!++
! Functional description:
!	Converts a value to an ascii string to be printed.
! Inputs
!	in_value_ptr -	points to the place in memory where the
!			value is stored.
!	len       -	length in bytes of the value
! Routine value
!	A pointer to a counted string with the result.
!	Storage for the result string is allocated dynamically
!	by calling dbg$freez.
! Side effects
!	Allocates space for the result. This should be
!	released by the caller.
!--
    begin
    map 
        in_value_ptr : ref bitvector [] ;

    local
        value_copy : bitvector[128],
    	value_ptr : ref bitvector[],
	sign_flag,
	string : ref vector[,byte],
	power_of_two,
	new_string : ref vector[,byte],
	new_power_of_two;


			! define extended precision add routine which
			! operates on counted ascii strings.
			routine addc(a,b) =
			    begin
			    map a : ref vector [,byte],
				b : ref vector [,byte];
			    local 
				temp,
				m,
				n,
				carry,
				result : ref vector [,byte];
			    own ctable : vector[20,byte]
				initial(byte('01234567890123456789')); 
			    ! n is size of larger argument
			    n = (if .a[0] gtr .b[0] then .a[0] else .b[0]);
			    ! m is size of smaller argument.
			    m = (if .a[0] gtr .b[0] then .b[0] else .a[0]);
			    ! dbg$freez takes longword sizes.
			    result = dbg$freez((2+.n)/4+1);
			    carry = 0;
			    decr i from .n to 1+.n-.m do
				begin
				result[.i+1] = .ctable[temp =
				    (.carry+
					(if .a[0] gtr .b[0]
					then .a[.i] +
					    .b[.i-(.n-.m)]
					else .b[.i] +
					    .a[.i-(.n-.m)])
					    - 2*%C'0')];
				carry = .temp geq 10;
				end;
			    decr i from .n-.m to 1 do
				begin
				result[.i+1] = .ctable[temp=
					(.carry+
					(if .a[0] gtr .b[0] 
					then .a[.i]
					else .b[.i]) -
					%C'0')];
				carry = .temp geq 10;
				end;
			    if .carry eql 1 then
				begin
				result[0] = .n+1;
				result[1] = %C'1';
				end
			    else
				begin
				result[0] = .n;
				ch$move(.n,
				    result[2],result[1]);
				end;
			    .result
			    end; ! addc

    			! Copy the value to be examined into a local variable
    			!
    			value_ptr = value_copy;
    			ch$move (16, .in_value_ptr, .value_ptr);

			! now build up print string representing the
			! octaword integer.
			string = dbg$freez(1);
			power_of_two = dbg$freez(1); 
			(.string) = %ASCIC'0';
			(.power_of_two) = %ASCIC'1';
			sign_flag = 0;
			IF .value_ptr[8*.len-1] EQL 1 
			THEN ! sign bit set.
			    BEGIN
			    sign_flag = 1;
			    ! negate number.
			    incr i from 0 to .len/4-1 do
				(.value_ptr+4*.i) =
				    NOT .(.value_ptr+4*.i);
			    END;
			incr i from 0 to (8*.len)-2 do
			    begin
			    ! look at the ith bit of the integer.
			    IF .value_ptr[.i] EQL 1
			    THEN 
				BEGIN
				! if the bit is set, must add in the
				! appropriate power of two.
				new_string = addc(.string,.power_of_two);
				dbg$freerelease(.string,0);
				string = .new_string;
				END;
			    new_power_of_two = addc(
				.power_of_two,.power_of_two);
			    dbg$freerelease(.power_of_two);
			    power_of_two = .new_power_of_two;
			    end; ! loop
			IF .sign_flag EQL 1 
			THEN
			    BEGIN
			    ! un-complement number
			    ! (we complemented earlier)
			    incr i from 0 to .len/4-1 do
				(.value_ptr+4*.i) =
				    NOT .(.value_ptr+4*.i);
			    ! add 1 (we complemented earlier)
			    new_string = addc(.string, 
				UPLIT BYTE(%ASCIC '1'));
			    ! append minus sign.
			    string = dbg$freez(1+(2+.new_string[0])/4);
			    string[0] = 1+.new_string[0];
			    string[1] = %C'-';
			    ch$move(.new_string[0],new_string[1],string[2]);
			    dbg$freerelease(.new_string,0);
			    END;
    dbg$freerelease(.power_of_two);
    .string
    end; ! of dbg$decimal_valtostg_cvt


global routine dbg$hex_dec_cvrt(h) =
!+
! Functional description
!	Takes a number h that was entered when mode was set to hex.
!	Returns the number the user meant to enter if he entered the
!	number in decimal. E.g., 
!	16 -> 10
!	17 -> 11
!	256 -> 100
!-
    begin
    local f,m;
    if .dbg$gb_mod_ptr[mode_radix] eql hex_radix
    then
        begin
        f = 1; m = 0;
        while .h gtr 0 do
	    begin
	    m = .m + ((.h mod 16) * .f);
	    f = .f * 10;
	    h = .h / 16;
	    end;
        return .m
        end
    else
    	return .h;
    end;

END
ELUDOM
