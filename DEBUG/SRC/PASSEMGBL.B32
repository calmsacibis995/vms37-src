MODULE	PASSEMGBL( ! Initial Values for Semantic Phases
	IDENT = 'V03-000'
	)=
BEGIN
!
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!
!++
!
! FACILITY:	VAX-11 PASCAL-SPECIFIC DEBUGGER MODULES
!
! ABSTRACT:
!
!	This module defines the values pre-declared for the Semantic phase.
!
! ENVIRONMENT:	VAX/VMS user mode
!
! AUTHOR: R. Gottlieb, CREATION DATE: 8-Feb-1980
!
! MODIFIED BY:
!	Paul Hohensee	15-Aug-1980	Stolen from PASCAL-PLUS
!
!--
REQUIRE 'SRC$:PASPROLOG';

!
!		T Y P E   D E S C R I P T I O N S
!
    EXTERNAL
	PAS$_Table_Base,

	PAS$_SRW_BOOLEAN,
	PAS$_SRW_CHAR,
	PAS$_SRW_DOUBLE,
	PAS$_SRW_FALSE,
	PAS$_SRW_INTEGER,
	PAS$_SRW_NIL,
	PAS$_SRW_QUADRUPLE,
	PAS$_SRW_REAL,
!	PAS$_SRW_TEXT,
	PAS$_SRW_UNSIGNED;

    PSECT
	GLOBAL = SET_PAS$PLIT;

! Type description for BOOLEAN
!
    GLOBAL PAS$_TRW_BOOLEAN : BLOCK [TYP_S_Ordinal, BYTE] INITIAL(
	BYTE(Typ_K_Ordinal, 0),			! TYP_Class, TYP_Unsigned
	BYTE(0),
	BYTE(DST$K_Bool),			! TYP_Rst_Class
	LONG(PAS$_SRW_BOOLEAN - PAS$_Table_Base),	! TYP_Symbol
	LONG(1),				! TYP_Packed_Size (bits)
	LONG(1),				! TYP_Full_Size   (bytes)
	LONG(PAS$_TRW_BOOLEAN - PAS$_Table_Base),	! ORD_Type
	LONG(0),				! ORD_Lower
	LONG(1),				! ORD_Upper
	LONG(U_bool),				! ORD_DType
	LONG(2),				! ORD_Enum_Count
	LONG(PAS$_SRW_FALSE - PAS$_Table_Base));! ORD_Enum_Element

! Type Description for CHAR
!
    GLOBAL PAS$_TRW_CHAR : BLOCK [TYP_S_Ordinal, BYTE] INITIAL(
	BYTE(Typ_K_Ordinal, 0),			! TYP_Class, TYP_Unsigned
	BYTE(0),
	BYTE(DSC$K_Dtype_T),			! TYP_Rst_Class
	LONG(PAS$_SRW_CHAR - PAS$_Table_Base),	! TYP_Symbol
	LONG(8),				! TYP_Packed_Size (bits)
	LONG(1),				! TYP_Full_Size   (bytes)
	LONG(PAS$_TRW_CHAR - PAS$_Table_Base),	! ORD_Type
	LONG(0),				! ORD_Lower
	LONG(%X'FF'),				! ORD_Upper
	LONG(BU_int),				! ORD_Dtype
	LONG(0),				! ORD_Enum_Count
	LONG(0));				! ORD_Enum_Element

! Type Description for DOUBLE
!
    GLOBAL PAS$_TRW_DOUBLE : BLOCK [TYP_S_Real, BYTE] INITIAL(
	BYTE(Typ_K_Real, 0),			! TYP_Class
	BYTE(0),
	BYTE(DSC$K_Dtype_D),			! TYP_Rst_Class
	LONG(PAS$_SRW_REAL - PAS$_Table_Base),	! TYP_Symbol
	LONG(64),				! TYP_Packed_Size (bits)
	LONG(8),				! TYP_Full_Size   (bytes)
	LONG(D_float));				! REAL_DType

! Type Description for DOUBLE_G
!
    GLOBAL PAS$_TRW_DOUBLE_G : BLOCK [TYP_S_Real, BYTE] INITIAL(
	BYTE(Typ_K_Real, 0),			! TYP_Class
	BYTE(0),
	BYTE(DSC$K_Dtype_G),			! TYP_Rst_Class
	LONG(PAS$_SRW_REAL - PAS$_Table_Base),	! TYP_Symbol
	LONG(64),				! TYP_Packed_Size (bits)
	LONG(8),				! TYP_Full_Size   (bytes)
	LONG(G_float));				! REAL_DType

! Type Description for INTEGER
!
    GLOBAL PAS$_TRW_INTEGER : BLOCK [TYP_S_Ordinal, BYTE] INITIAL(
	BYTE(Typ_K_Ordinal, 0),			! TYP_Class
	BYTE(0),
	BYTE(DSC$K_Dtype_L),			! TYP_Rst_Class
	LONG(PAS$_SRW_INTEGER - PAS$_Table_Base),	! TYP_Symbol
	LONG(32),				! TYP_Packed_Size (bits)
	LONG(4),				! TYP_Full_Size   (bytes)
	LONG(PAS$_TRW_INTEGER - PAS$_Table_Base),	! ORD_Type
	LONG(%X'80000000'),			! ORD_Lower
	LONG(%X'7FFFFFFF'),			! ORD_Upper
	LONG(L_int),				! ORD_Dtype
	LONG(0),				! ORD_Enum_Count
	LONG(0));				! ORD_Enum_Element

! Type Description for NIL
!
    GLOBAL PAS$_TRW_NIL : BLOCK [TYP_S_Pointer, BYTE] INITIAL(
	BYTE(TYP_K_Pointer, 0),			! TYP_Class
	BYTE(0),
	BYTE(DSC$K_Dtype_Z),			! TYP_Rst_Class
	LONG(PAS$_SRW_NIL - PAS$_Table_Base),	! TYP_Symbol
	LONG(32),				! TYP_Packed_Size
	LONG(4),				! TYP_Full_Size
	LONG(0));				! PTR_Type

! Type Description for QUADRUPLE
!
    GLOBAL PAS$_TRW_QUADRUPLE : BLOCK [TYP_S_Real, BYTE] INITIAL(
	BYTE(Typ_K_Real, 0),			! TYP_Class
	BYTE(0),
	BYTE(DSC$K_Dtype_H),			! TYP_Rst_Class
	LONG(PAS$_SRW_REAL - PAS$_Table_Base),	! TYP_Symbol
	LONG(128),				! TYP_Packed_Size (bits)
	LONG(16),				! TYP_Full_Size   (bytes)
	LONG(H_float));				! REAL_DType

! Type Description for REAL
!
    GLOBAL PAS$_TRW_REAL : BLOCK [TYP_S_Real, BYTE] INITIAL(
	BYTE(Typ_K_Real, 0),			! TYP_Class
	BYTE(0),
	BYTE(DSC$K_Dtype_F),			! TYP_Rst_Class
	LONG(PAS$_SRW_REAL - PAS$_Table_Base),	! TYP_Symbol
	LONG(32),				! TYP_Packed_Size (bits)
	LONG(4),				! TYP_Full_Size   (bytes)
	LONG(F_float));				! REAL_DType

! Type Description for TEXT
!
!    GLOBAL TRW_TEXT : BLOCK [TYP_S_File, BYTE] INITIAL(
!	BYTE(Typ_K_File, 2),			! TYP_Class
!	BYTE(0),
!	BYTE(0),				! TYP_Rst_Class
!	LONG(PAS$_SRW_TEXT - PAS$_Table_Base),	! TYP_Symbol
!	LONG(0),				! TYP_Packed_Size (bits) ***
!	LONG(0),				! TYP_Full_Size   (bytes)***
!	LONG(PAS$_TRW_CHAR - PAS$_Table_Base));	! FIL_Type

! Type Description for UNSIGNED
!
    GLOBAL PAS$_TRW_UNSIGNED : BLOCK [TYP_S_Ordinal, BYTE] INITIAL(
	BYTE(Typ_K_Ordinal, 0),			! TYP_Class
	BYTE(0),
	BYTE(DSC$K_Dtype_LU),			! TYP_Rst_Class
	LONG(PAS$_SRW_UNSIGNED - PAS$_Table_Base),	! TYP_Symbol
	LONG(32),				! TYP_Packed_Size (bits)
	LONG(4),				! TYP_Full_Size   (bytes)
	LONG(PAS$_TRW_UNSIGNED - PAS$_Table_Base),	! ORD_Type
	LONG(0),				! ORD_Lower
	LONG(%X'FFFFFFFF'),			! ORD_Upper
	LONG(LU_int),				! ORD_Dtype
	LONG(0),				! ORD_Enum_Count
	LONG(0));				! ORD_Enum_Element

END
ELUDOM
