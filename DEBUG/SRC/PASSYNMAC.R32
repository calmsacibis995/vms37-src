!
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!
!++
!
! FACILITY:	VAX-11 PASCAL-SPECIFIC DEBUGGER MODULES
!
! ABSTRACT:
!
!	This module consists of MACROs for use in the Parsing routines.
!
! ENVIRONMENT:	VAX/VMS user mode
!
! AUTHOR: Robert Gottlieb, CREATION DATE: 3-March-1980
!
! MODIFIED BY:	P. Hohensee	17-July-1980	Stolen from PASCAL-PLUS
!
!--

LINKAGE
	Syntax_Routine	= CALL : GLOBAL (Token = 8, Token_Value = 9, Token_Type = 10, Token_Position = 11);

MACRO
	! This macro performs a test to see if the Token specified by the
	! first argument is in the set of elements (specified by the remaining
	! elements). An example would be:
	!
	!	IF In_Set(.Token, Semicolon, Comma) THEN ...
	!
	! which would test to see if Token is a Semicolon or a Comma
	!
	In_Set(Value) =
	    BEGIN
	    LOCAL I_ : LONG;
	    COMPILETIME I_Min_ = Min_Token(%REMAINING);
	    COMPILETIME I_Max_ = Max_Token(%REMAINING);
	    %IF I_Max_ / %BPVAL LEQ (I_Max_ - I_Min_) / %BPVAL
	    %THEN
		%ASSIGN(I_Min_, 0)
		I_ = Value;
	    %ELSE
	    IF (I_ = Value - I_Min_) GEQ 0
	    THEN
	    %FI
		IF .I_ LEQ I_Max_ - I_Min_
		THEN
		    .BITVECTOR[
			UPLIT( In_BV_LBMSK_(I_Min_, I_Max_, %REMAINING) ),
			.I_ ; I_Max_ - I_Min_ + 1]
	    END %;

MACRO
	! This macro is used to start most Syntax routines. It declares
	! the registers common to all syntax_routines
	!
	Syntax_Routine_Registers =
	    EXTERNAL REGISTER
		Token			: LONG,
		Token_Value		: LONG,
		Token_Type		: LONG,
		Token_Position		: LONG %;

MACRO

	! This macro extracts the lowest-valued token in a list of tokens.
	! useful in building bit vectors for tests, as well as the lower bound
	! for case statements
	!
	Min_Token(A)[]=
	    %IF %NULL(%REMAINING)
	    %THEN
		%NAME('SYN_K_',A)
	    %ELSE
		MIN( %NAME('SYN_K_',A), Min_Token( %REMAINING ))
	    %FI %;

MACRO

	! This macro extracts the highest-valued token in a list of tokens.
	! useful in building bit vectors for tests, as well as the upper bound
	! for case statements
	!
	Max_Token(A)[]=
	    %IF %NULL(%REMAINING)
	    %THEN
		%NAME('SYN_K_',A)
	    %ELSE
		MAX( %NAME('SYN_K_',A), Max_Token( %REMAINING ))
	    %FI %;

MACRO
	In_BV_LBMSK_(Start,High)[]=
	    (0 OR In_BV_XBMSK_(Start, %REMAINING))
	    %IF Start + %BPVAL LEQ High
	    %THEN
		, In_BV_LBMSK_(Start+%BPVAL, High, %REMAINING)
	    %FI
	    %,

	In_BV_XBMSK_(Start)[A]=
	    %IF %NAME('SYN_K_',A)-(Start) LSSU %BPVAL
	    %THEN
		( 1 ^ (%NAME('SYN_K_',A) - (Start)) )
	    %ELSE
		0
	    %FI %;


STRUCTURE

	! This structure is used to describe Token_Values, an array of
	! 16-byte (i.e., H-Floating size) elements. This description is
	! used for arbitrary n-byte x m-element vectors.
	!
	NULLVECTOR[I; N, UNIT=4] =
	    [N*UNIT]
	    (NULLVECTOR+I*UNIT)<0,32,0>;

