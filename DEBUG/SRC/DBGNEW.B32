MODULE DBGNEW ( IDENT = 'V03-000') =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	DEBUG (DBG)
!
! ABSTRACT:
!	Routines to interface DEBUG V2 and DEBUG V3 symbol table access.
!
! ENVIRONMENT:	STARLET, user mode, interrupts disabled.
!
! Version:	1.02
!
! History:
!       Modified by: Ping Sager, 15 June 1981
!
! Revision History:
! 1.02  15-JUN-81         PS        Routine DBG$RST_TYPE, for ARRAY TYPE, if
!                                   its DSC data type is descriptor, return
!                                   DST data type, else return DSC data type
!--

!
! REQUIRE FILES:
!

REQUIRE 'src$:dbgprolog.req';
REQUIRE 'SRC$:DBGGEN.REQ';
REQUIRE 'SRC$:SYSSER.REQ';

FORWARD ROUTINE
	dbg$rst_name_addr,
	dbg$rst_name_count,
	dbg$rst_char_addr,
	dbg$rst_type;

EXTERNAL ROUTINE
	dbg$sta_typefcode,
	dbg$sta_typ_atomic : NOVALUE,
	dbg$sta_typ_array : NOVALUE,
	dbg$sta_typ_descr : NOVALUE,
	dbg$sta_symkind : NOVALUE,
	dbg$sta_symname : NOVALUE;




GLOBAL ROUTINE dbg$rst_name_addr (rst_ptr)  =
BEGIN
	MAP
		rst_ptr : REF rst$entry;
	LOCAL
		nameptr;

	dbg$sta_symname(.rst_ptr, nameptr);
	RETURN .nameptr;
END;


GLOBAL ROUTINE dbg$rst_name_count (rst_ptr) =
BEGIN
	MAP
		rst_ptr : REF rst$entry;
	LOCAL 
		nameptr,
		x;

	dbg$sta_symname(.rst_ptr, nameptr);
	x = ..nameptr;
	X = .X<0,8>;

	RETURN .X;
END;


GLOBAL ROUTINE dbg$rst_char_addr (rst_ptr)  =
BEGIN
	MAP
		rst_ptr : REF rst$entry;
	LOCAL
		nameptr;

	dbg$sta_symname(.rst_ptr, nameptr);
	RETURN .nameptr + 1;
END;


GLOBAL ROUTINE dbg$rst_type( rst_ptr ) =
!++
! Functional Description:
!	-Look up the type associated with a given object (via
!	 rst record).
!
! Formal Parameters:
!	rst_ptr		-a pointer to the rst$entry that corresponds
!			 to the symbol whose type we want.
!
! Implicit Inputs:
!
!	NONE
!
! Implicit Outputs:
!	NONE
!
! Routine Value:
!	The type of the symbol (via dst).
!
!--

BEGIN
	MAP
	    rst_ptr    : REF rst$entry;
	LOCAL
		fcode,
		typeid;

	IF .rst_ptr[rst$b_kind] EQL rst$k_data
	THEN
		fcode = dbg$sta_typefcode(.rst_ptr)
	ELSE
		BEGIN
		LOCAL
			dst_ptr : REF dst$record;
		dst_ptr = .rst_ptr[rst$l_dstptr];
		RETURN (.dst_ptr[dst$b_type]);
	END;

	IF .fcode EQL rst$k_type_atomic
	THEN
		BEGIN
		LOCAL
			size;
		dbg$sta_typ_atomic(.rst_ptr, typeid, size);
		RETURN (.typeid)
	END
	ELSE IF .fcode EQL rst$k_type_cobhack
	THEN
		BEGIN
		LOCAL dst_ptr : REF dst$record;
		dst_ptr =.rst_ptr[rst$l_dstptr];
		RETURN (cad_srm_type(dst_ptr));
		END
	ELSE IF .fcode EQL rst$k_type_blidata
	THEN
		RETURN (dst$k_bli)
	ELSE IF .fcode EQL rst$k_type_blifld
	THEN
		RETURN dst$k_blifld
	ELSE IF .fcode EQL rst$k_type_descr
	THEN
		BEGIN
		LOCAL
			dst_recrd : REF dst$record;
		dbg$sta_typ_descr(.rst_ptr, typeid);
		dst_recrd = .rst_ptr[rst$l_dstptr];
		IF .dst_recrd[dst$b_type] EQL dsc$k_dtype_cad
		THEN
			RETURN (cad_srm_type(dst_recrd))
		ELSE
			RETURN (.dst_recrd[dst$b_type]);
	END
	ELSE IF .fcode EQL rst$k_type_array
	THEN
		BEGIN
		LOCAL
			ctyp,
			dims,
			dimvec,
			size,
		        DST_PTR: REF DST$RECORD,
                        DSC_TYPE,
                	dscaddr : REF BLOCK[,BYTE];

		dbg$sta_typ_array(.rst_ptr,dscaddr,ctyp,dims,dimvec,size);
		DSC_TYPE = .DSCADDR[DSC$B_DTYPE];
                IF .DSC_TYPE EQL DSC$K_DTYPE_DSC
                THEN
                   BEGIN
                   DST_PTR = .RST_PTR[RST$L_DSTPTR];
                   RETURN (.DST_PTR[DST$B_TYPE]);
                   END
                ELSE
                   RETURN (.dscaddr[dsc$b_dtype]);
	END
	ELSE
		SIGNAL (dbg$_alientype);

RETURN (0);
END;

END
ELUDOM
