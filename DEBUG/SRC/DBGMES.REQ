!	REQUIRE FILE DBGMES.REQ 
!
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:
!
!	DEBUG
!
! ABSTRACT:
!
!	The macros in this require file are designed to be used with version
!	2 debugger routines which signal error messages rather than returning
!	a message argument vector. These macros convert the signal into a failure
!	return. To use the macros:
!
!	1) Add REQUIRE 'SRC$:DBGMES.REQ'; to the module preface that contains the
!	   version V03-000 routine to be converted.
!
!	2) Delete the NOVALUE attribute of the routine from the forward declaration
!
!	3) Add the following declarations to the routine(s) being modified:
!	
!	BUILTIN
!		ACTUALCOUNT,
!		ACTUALPARAMETER;
!
!
!	4) Invoke the macro SET_FLAG (number_of_parameters) as the first line of
!	executable code in the routine. The number_of_parameters actual should
!	be a literal integer which corresponds to the number of visable parameters
!	supplied to the routine. Note that if the routine already has hidden parameters,
!	this actual should be the number of formals + number of hidden parameters.
!	which are always supplied. IT IS ASSUMED that the last parameter supplied
!	to the routine is the address of a longword to contain the address of the
!	message argument vector.
!
!	5) Replace every occurance of SIGNAL by IF_SIGNAL.
!
!	*** Version 2 routines which already have hidden parameters should ***
!	*** probably NOT use this package.				   ***
!
!	Note that info level signals will output immediately, not channeled into
!	a return.
!
!	The value of signal_flag should be propagated in calls to other version 2
!	debugger routines which use this package, as .signal_flag is the address
!	of a longword to contain the address of a message arguemnt vector.
!
!	To propagate signal_flag:
!
!	Replace every call to an old debugger routine with the sequence:
!
!	IF IF_FLAG
!	THEN
!		dbg$xxx (p1, ... ,pn, IF_PARAM)
!
!	ELSE
!		dbg$xxx (p1, ... ,pn)
!
! ENVIRONMENT:
!
!	VAX/VMS
!
! AUTHOR:
!
!	David Plummer
!
! CREATION DATE:
!
!	18-JUN-8-
!
! MODIFIED BY:
!
! VERSION :
!
!	01
!--

EXTERNAL ROUTINE
	dbg$nout_info,		! Outputs a informational message
	dbg$nmake_arg_vect;	! Constructs a message argument vector

MACRO
	IF_SIGNAL (code)  =
	    IF .signal_flag NEQ 0
	    THEN
		BEGIN
		    IF NOT
		    	( IF %LENGTH GTR 1
			  THEN dbg$nout_info (code, %REMAINING)
			  ELSE dbg$nout_info (code))
		    THEN
			BEGIN
			    .signal_flag = (IF %LENGTH GTR 1
					    THEN
						dbg$nmake_arg_vect (code, %REMAINING)
					    ELSE
						dbg$nmake_arg_vect (code));
			    RETURN sts$k_severe;
			END
		END
	    ELSE
		BEGIN
		    IF %LENGTH GTR 1
		    THEN
			SIGNAL (code, %REMAINING)
		    ELSE
			SIGNAL (code)
		END %;

MACRO
	SET_FLAG (param_num) =
	    LOCAL
		signal_flag;

	    signal_flag = (IF actualcount () GTR param_num
			   THEN
				actualparameter (actualcount())
			   ELSE
				0) %;

MACRO
	IF_FLAG =
	    (IF .signal_flag NEQ 0
	     THEN 1 ELSE 0) %;

MACRO
	IF_PARAM =
	    .signal_flag %;

!	End of dbgmes.req


