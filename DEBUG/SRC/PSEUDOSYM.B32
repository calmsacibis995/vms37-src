MODULE PSEUDOSYM (IDENT = 'V03-000') =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY: 	DEBUGGER
!
! ABSTRACT:
!
!	This module implements the Pseudo-Symbol Interpreter for the 
!	VAX DEBUGGER. That is, it evaluates Pseudo-Symbols and determines
!	their value.
!
!
! ENVIRONMENT:
!	VAX/VMS.
!
! AUTHOR:	
!	Alyson L. Abramowitz
!
! CREATION DATE: 
!	19-June, 1980
!
! VERSION:
!	1.0
!
! MODIFIED BY:
!
!--






!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    DBG$NPSEUDO_SYM_INT,		! Interpreter Pseudo-Symbols for the
    					! new version of the DEBUGGER.

    DBG$NGET_LASTVAL,			! Returns a value descriptor to 
    					! language dependent routines
    					! corresponding to the interpretation
    					! of last value

    GET_SUCCESSOR_OR_PREDECESSOR,	! Gets the successor to the last
    					! location.

    AMOUNT_TO_ADD,			! Given a type and length, determines
    					! how many bytes they represent.

    GET_AMOUNT_TO_USE;			! Gets the appropriate override
    					! type and length as well as the
    					! number of bytes that are 
    					! associated with that type and
    					! length.
	


!
! INCLUDE FILES:
!

    REQUIRE 'SRC$:DBGPROLOG.REQ';
    REQUIRE 'SRC$:SYSSER.REQ';

!
! MACROS:
!

!
! EQUATED SYMBOLS:
!

!
! OWN STORAGE:
!

!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE 
    DBG$NREPORT_LAST_VAL,	! Finds the value descriptor corresponding to
    				! the last value displayed by the DEBUGGER,
    				! if any

    DBG$NREPORT_LAST_LOC,	! Finds the descriptor corresponding to the 
    				! last location displayed by the DEBUGGER,
    				! if any

    DBG$NMAKE_ARG_VECT,		! Makes a VAX Standard Message Argument Vector

    DBG$NPERM_SYM_INT,		! Obtains a Permanent Symbol Descriptor
    				! for the DEBUG Pseudo Symbols.

    DBG$NLOG_PREDSUC,		! Finds the logical successor or predecessor
    				! to a Primary Descriptor

    DBG$NGET_TYPE_AND_VALUE,	! Gets the type and value of a Primary 
    				! Descriptor.

    DBG$NGET_OVERRIDE_TYPE,	! Gets the override type for the current
    				! command.

    DBG$NGET_DEFAULT_TYPE;	! Gets the default type for the current 
    				! command.








GLOBAL ROUTINE DBG$NPSEUDO_SYM_INT (symbol_code, return_type, symbol_val,
    					override_type, override_length, 
    					    message_vect) =

!++
! FUNCTIONAL DESCRIPTION:
!
!       A kernel DEBUG routine to find the interpretation of a DEBUG 
!	pseudo-symbol. These pseudo-symbols include:
!
!
!       '.' - current location
!
!       '^' - predecessor to current location
!
!       '\' - last value
!
!       <CR>- successor to current location. Note that language 
!             specific routines will never ask for the interpretaion 
!             of this symbol.
!
!       The interpretaion of '.', '^', and <CR> produce either Primary 
!       Descriptors, Permanent Symbol Descriptors or virtual addresses.
!
!       The interpretation of '\' produces a value descriptor.
!
! FORMAL PARAMETERS:
!
!       symbol_code     - A longword containing the unsigned integer encoding 
!                         of the pseudo-symbol to be interpreted as follows:
!
!                         dbg$k_current_loc - find the interpretation of '.'
!
!                         dbg$k_predecessor - find the interpretation of '^'
!
!                         dbg$k_successor   - find the interpretation of '<CR>'
!
!                         dbg$k_last_value  - find the interpretation of '\'
!
!
!       return_type     - The address of a longword to contain an unsigned 
!                         integer encoding of the interpretation of 
!                         returntype as follows:
!
!                         On a return completion code of STS$K_SUCCESS:
!
!                             dbg$k_primary_desc - address of a primary 
!						   descriptor
!
!                             dbg$k_value_desc   - address of a value 
!						   descriptor
!
!                             dbg$k_perm_desc    - address of a permanent 
!						   symbol descriptor
!
!                             dbg$k_notype 	 - virtual address
!
!       symbol_val      - The address of a longword to contain the address of
!                         a primary descriptor, permanent symbol descriptor,
!                         or value descriptor
!
!                                       OR
!
!                       - An unsigned integer virtual address
!
!       override_type   - The address of a longword to contain the 
!                         override type used in evaluating the previous
!                         address that the user saw. Standard Argument
!                         Data Types as described in Appendix C of
!                         the VAX/11 Architecture Handbook will be used,
!                         however only the following subset of those
!                         Data Types will be understood:
!
!                               DSC$K_DTYPE_BU  (2)- Byte logical
!                               DSC$K_DTYPE_WU  (3)- Word logical
!                               DSC$K_DTYPE_LU  (4)- Longword logical
!                               DSC$K_DTYPE_T  (14)- ASCII text
!                               DSC$K_DTYPE_ZI (22)- Instruction
!
!				      and the special DEBUG type:
!
!				DBG$K_NOTYPE        - The default type
!						      is to be used
!
!       override_length - In the case of a counted length override_type
!                         (i.e., DSC$K_DTYPE_ZI) the length associated
!                         with the override type
!
!                             
!
!       message_vect    - The address of a longword to contain the address of a
!                         message argument vector as described on page 4-119 of
!                         the VAX/VMS system reference, volume 1A
!
! IMPLICIT INPUTS:
!
!       1) - A stored address expression descriptor representing the 
!            value of '.'
!
!       2) - The stored current override or default type
!
!       3) - A stored value descriptor representing '\'
!
!       The above information will be obtained by calls to appropriate session
!       specific information access routines.
!
! IMPLICIT OUTPUTS:
!
!       In case of a success return, either a primary 
!       descriptor, a permanent symbol descriptor, value descriptor, or
!       address.
!
!       In case of a severe error return, a message argument vector 
!       is constructed and returned.
!
! ROUTINE VALUE:
!
!       An usigned integer longword completion code
!
! COMPLETION CODES:
!
!       STS$K_SUCCESS (1) - Success. Primary descriptor, Value Descriptor
!                           Permanent Symbol Descriptor, or Address returned.
!                           In some cases, routines which call the Pseudo
!                           Symbol Interpreter will not consider all of these
!                           descriptors as valid returns. It is the callers
!                           responsibility to determine which returns are
!                           valid and construct error messages to deal with
!                           non-valid successful returns.
!
!       STS$K_SEVERE  (4) - Failure. Pseudo-symbol could not be interpreted.
!                           Message argument vector constructed and returned.
!
! SIDE EFFECTS:
!
!       NONE
!
!--


    BEGIN
    	LOCAL
    	    ae_desc: REF  DBG$AED;	! Place to put the Address Expression
    					! Descriptor describing the last
    					! location

    	CASE .symbol_code
    	 FROM dbg$k_current_loc TO dbg$k_last_value OF
    	     SET

    	     [dbg$k_last_value]:
    	          BEGIN
    		      IF dbg$nreport_last_val (.symbol_val, .message_vect)
    		      THEN 
    			  BEGIN

    			      ! Got a value descriptor for the last value

    			      .return_type = dbg$k_value_desc;
    			      .override_type = dbg$k_notype;
    			      .override_length = 0;
    			      RETURN (sts$k_success);
    			 END

    		      ! Otherwise there was no last value 

    		      ELSE RETURN (sts$k_severe);    
    		  END;

    	     [dbg$k_current_loc]:

    		! Get the current location

    		BEGIN
    			
    		    IF dbg$nreport_last_loc ( ae_desc, 
    				.override_type, .override_length, 
    				  .message_vect)
    		    THEN 
    			BEGIN
    			    CASE .ae_desc [ dbg$b_aed_type]
    			     FROM dbg$k_primary_desc TO dbg$k_notype OF
    	
    			        SET

    				[dbg$k_primary_desc, dbg$k_perm_desc,
    				 	dbg$k_notype, dbg$k_instruction]:

    				    BEGIN
    				        .return_type = 
    						.ae_desc [dbg$b_aed_type];

    					.symbol_val  =
    						.ae_desc [dbg$l_aed_value];
    					RETURN (sts$k_success);
    				    END;

    				[inrange, outrange]:

    					! A bad Address Expression Descriptor

    					signal ( dbg$_debugbug, 1, 
    					   dbg$k_bad_aed);
    				TES;
    			    END
    		        ELSE RETURN (sts$k_severe);
    	          END;
    	
    	     [dbg$k_successor, dbg$k_predecessor]:

    		  ! Get the successor to the current location

    		  IF get_successor_or_predecessor( .symbol_code, .symbol_val, 
    			   .override_type, .override_length, .return_type, 
    			       .message_vect)
    		  THEN RETURN (sts$k_success)
    		  ELSE RETURN (sts$k_severe);


    	     [INRANGE, OUTRANGE]:

    		  ! Should never happen, the Pseudo-Symbol Interpreter
    		  ! was asked for a symbol that it doesn't understand

   		  signal( dbg$_debugbug, 1, dbg$k_unknown_pseud_sym_type);
 		  
  	     TES;

         ! Make BLISS happy, we should never, ever get here

    	 .message_vect = dbg$nmake_arg_vect (dbg$_debugbug, 1, 
    				dbg$k_unknown_pseud_sym_type);
    	 RETURN (sts$k_severe);
    END;





ROUTINE GET_SUCCESSOR_OR_PREDECESSOR ( symbol_code, answer, override_type, 
    					   override_length, descriptor_type, 
    					       error_message) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine computes the logical successor or predecessor (if any) to
!	the last address that was computed for the user.
!
! FORMAL PARAMETERS:
!
!	symbol_code	- 	The address of a longword to contain
!				an unsigned integer representing either
!				successor or predecessor. This value
!				determines whether this routine is attempting
!				to find the successor or predecessor to
!				the last address that was computed for the 
!				user. The only valid values for this parameter
!				are:
!					dbg$k_predecessor
!					dbg$k_successor
!
!	answer		-	The address of a longword to contain
!				the either successor/predecessor to the 
!				last address that was computed for the user or
!				the address of a descriptor describing
!				the successor/predecessor to the 
!				last address that was computed for the user.
!
!	override_type 	-	The address of a longword to contain
!				the override_type used in evaluating 
!				the previous address that the user saw.
!				Standard Argument Data Types as described
!				in Appendix C of the VAX/11 Architecture 
!				Handbook will be used, however only the 
!				following subset of those data types
!				will be understood:
!
!					DSC$K_DTYPE_BU	(2)- Byte logical
!					DSC$K_DTYPE_WU  (3)- Word logical
!					DSC$K_DTYPE_LU	(4)- Longword logical
!					DSC$K_DTYPE_B	(6)- Byte integer
!					DSC$K_DTYPE_W	(7)- Word integer
!					DSC$K_DTYPE_L	(8)- Longword integer
!					DSC$K_DTYPE_T  (14)- ASCII text
!					DSC$K_DTYPE_ZI (22)- Instruction
!
!						and the special DEBUG type:
!					
!					DBG$K_NOTYPE	    - The default type
!							    - is to be used
!
!	override_length	-	In the case of a counted length override_type
!				(i.e., DSC$K_DTYPE_ZI) the length associated
!				with the override type.
!
!	descriptor_type	-	The address of a longword to contain an
!				unsigned integer encoding of the interpretation
!				of the type of value returned as follows:
!
!					dbg$k_primary_desc - address of a 
!							     primary descriptor
!
!					dbg$k_perm_desc	   - address of a 
!							     permanent symbol 
!							     descriptor
!
!					dbg$k_notype	   - a virtural address
!
!	error_message	-	The address of a longword to contain the 
!				address	of a message argument vector 
!				as described on	page 4-119 of the 
!				VAX/VMS System Reference Manual, Volume 1A.
!
! IMPLICIT INPUTS:
!
!	1)	- A stored Address Expression Descriptor representing the 
!		  value of '.'
!
!	2)	- The stored current override or default type and associated
!		  length
!
!	The above information will be obtained by calls to appropriate session
!	specific information access routines.
!
! IMPLICIT OUTPUTS:
!
!	In the case of a successful return, either a Primary Descriptor, a
!	Permanent Symbol Descriptor, or a virtual address
!	describing the succeeding or preceding location (as specified
!	as a parameter to this routine) is returned.
!
!	In the case of a severe error return, a message argument vector
!	is constructed and returned.
!
! ROUTINE VALUE:
!
!	An unsigned integer longword completion code.
!
! COMPLETION CODES:
!
!	STS$K_SUCCESS (1)	-	Success. Primary Descriptor, 
!					Permanent Symbol Descriptor, or
!					virtual address returned.
!
!	STS$K_SEVERE  (4)	-	Failure. There was no 
!					successor/predecessor (whichever was
!					being search for) to the current 
!				        location defined or something went 
!					wrong in finding the current 
!					location. A Message Argument Vector 
!					has been constructed and is being 
!					returned.
!
! SIDE EFFECTS:
!
!	None.
!
!--

    BEGIN
    
    	LOCAL 
    	    AE_DESC: REF DBG$AED,	    ! Place to put the Address 
    					    ! Expression Descriptor
					    ! describing the last location
	
       	    REG,			    ! The register which is the
    					    ! successor to the current
    					    ! register.

    	    INTERNAL_TYPE,		    ! The internal type of the 
    					    ! Primary Descriptor

    	    AMOUNT,			    ! The amount of bytes associated
    					    ! with the type and length being
    					    ! used.

    	    VIRTUAL_ADDRESS;		    ! A raw address found in the AED





    	! Check that we're looking for something valid

    	CASE .symbol_code
         FROM dbg$k_predecessor TO dbg$k_successor OF

    	    SET

    	    [dbg$k_predecessor, dbg$k_successor]:

    		! These are the only two valid answers

    		0;

    	    [INRANGE, OUTRANGE]:

    		! Should never happen we only call this routine to find
    		! a successor or predecessor

    		signal (dbg$_debugbug, 1, dbg$k_unknown_pseud_sym_type);

    	    TES;

	! Start out by getting the current location

    	IF dbg$nreport_last_loc ( ae_desc, .override_type, .override_length,
    		.error_message)
    	THEN
    	    BEGIN
    			
    		IF NOT dbg$nget_type_and_value (ae_desc [dbg$l_aed_value], 
    			   ae_desc [dbg$b_aed_type], internal_type, 
    			   virtual_address, .error_message)
    		THEN RETURN (sts$k_severe);


    		!++
    		! If a current location is defined, find its successor 
    		! if possible. If the current location override type
    		! was not dbg$k_notype,  or there was a Primary Descriptor
    		! with the internal type of instruction, then use 
    		! the override types in a language independent 
    		! manner to find successor and predecessor.
    		!--

    		IF (..override_type NEQ dbg$k_notype  
    			OR
    		   (.ae_desc[dbg$b_aed_type] EQL dbg$k_primary_desc
    			AND 
    		    .internal_type EQL dbg$k_instruction))
    		THEN
    		    BEGIN

    			! No predecessor to an instruction

    			IF ((.internal_type EQL dbg$k_instruction
    					OR
    			    .ae_desc [dbg$b_aed_type] EQL dbg$k_instruction
    					OR
    			    ..override_type EQL dsc$k_dtype_zi)
    					AND
    			    .symbol_code EQL dbg$k_predecessor)
    			THEN
    			    BEGIN

    				.error_message = dbg$nmake_arg_vect ( 
    							dbg$_noinstpred, 0);
    				RETURN (sts$k_severe);
    			    END
    			ELSE
    			    BEGIN

    				! Successor/predecessor exists

    				CASE .symbol_code 
    				 FROM dbg$k_predecessor TO dbg$k_successor OF

    				    SET

    				    [dbg$k_predecessor]:
    					BEGIN
    					    IF get_amount_to_use( 
    						  .override_type, 
    						   .override_length, amount,
    						    .error_message)
    					    THEN .answer = .virtual_address
    								- .amount
    					    ELSE RETURN (sts$k_severe);
    					END;

    				    [dbg$k_successor]:
    					
    					.answer = .virtual_address 
    							+ ..override_length;

    				    [INRANGE, OUTRANGE]:

    					signal (dbg$_debugbug, 1, 
    					   dbg$k_unknown_pseud_sym_type);
    					
    				    TES;

    						
    				! The override length is which ever length
    				! currently has the most dominance

    				IF get_amount_to_use (.override_type, 
    					.override_length, amount, 
    					.error_message)
    			        THEN .override_length = .amount
    				ELSE RETURN (sts$k_severe);

    				IF (.ae_desc[dbg$b_aed_type] EQL
    					dbg$k_instruction
    					     OR
    				     ..override_type EQL dsc$k_dtype_zi)
    				THEN .override_type = dsc$k_dtype_zi
    				ELSE .override_type = .internal_type;
    				.descriptor_type = dbg$k_notype;
    				RETURN (sts$k_success);
    			    END;
    		    END
    		ELSE
    		    BEGIN
    			CASE .ae_desc [dbg$b_aed_type]
    			 FROM dbg$k_primary_desc TO dbg$k_notype OF
    				    
    			    SET

    			    [dbg$k_primary_desc]:

    				IF dbg$nlog_predsuc ( 
    					.ae_desc[ dbg$l_aed_value],
    					.answer, .symbol_code, 
    					.error_message)
    				THEN 
    				    BEGIN

    					! Got a successor/predecessor

    					.descriptor_type = 
    						dbg$k_primary_desc;
    					.override_type = dbg$k_notype;
    					.override_length = 0;
    					RETURN (sts$k_success);
    				    END
    				ELSE RETURN (sts$k_severe);

    			    [dbg$k_perm_desc]:

    				BEGIN

    		    		    BIND perm_desc = 
    			                   .ae_desc [dbg$l_aed_value]:
    							DBG$PERMSD;


		                    IF .symbol_code EQL dbg$k_successor
    			            THEN 
    			                BEGIN
				    
    			                    ! Make sure there can be a 
    				            ! successor to this

    				            IF ((.perm_desc [dbg$b_permsd_id]
    					       		GEQ dbg$k_r0)
    						           AND
    					        ( .perm_desc [dbg$b_permsd_id]
    					                LSS dbg$k_psl))
    				    	    THEN reg = 
    					            .perm_desc [dbg$b_permsd_id] + 1
   				    	    ELSE 
    				                BEGIN
    					            .error_message = 
    				                          dbg$nmake_arg_vect( 
    					 	               dbg$_nosucc, 0);
    				            	    RETURN (sts$k_severe);
    						END;
    			        	END
    			    	ELSE 
    				    BEGIN
    				        IF ((.perm_desc [dbg$b_permsd_id]
    						      GTR dbg$k_r0)
    						AND
    					    (.perm_desc [dbg$b_permsd_id] 
    						      LEQ dbg$k_psl))
    					THEN reg = 
    						.perm_desc [dbg$b_permsd_id]-1
    			                ELSE 
    					   BEGIN
    					       .error_message =
    							dbg$nmake_arg_vect(
    					 		     dbg$_nopred, 0);
    					       RETURN (sts$k_severe);
    					   END;
    				    END;

    			   IF dbg$nperm_sym_int ( .reg, .answer,
    					.perm_desc [dbg$l_permsd_path],
    						   .error_message)
    			   THEN 
    			       BEGIN
    				  .override_length = 0;
    				  .override_type = dbg$k_notype;
    			          .descriptor_type = dbg$k_perm_desc;
    			          RETURN (sts$k_success);
    			       END
    			
    			   ! The Permanent Symbol can not be 
    			   ! interpreted.

    			   ELSE RETURN (sts$k_severe);

    		        END;

                      
    	            [INRANGE, OUTRANGE]:

    	                signal ( dbg$_uncomp);

    	            TES;
                    		    
    		END;
    	    END;

    	! No current location could be found

    	RETURN (sts$k_severe);
    END;
    	





GLOBAL ROUTINE DBG$NGET_LASTVAL (value_desc, message_vect) =
!++
! FUNCTIONAL DESCRIPTION:
!
!       A kernel DEBUG routine which returns a value descriptor corresponding
!       to the interpretation of '\', 'last value'.
!
! FORMAL PARAMETERS:
!
!       value_desc      - The address of a longword to contain the address of a
!                         value descriptor corresponding to the interpretation 
!                         of '\'. Only non-volatile value descriptors, 
!			  i.e. those containing a type of dsc$k_valuedesc, 
!			  will be returned.
!
!       message_vect    - The address of a longword to contain the address of a
!                         message arguemnt vector as described on page 4-119 of
!                         the VAX/VMS system reference, volume 1A.
!
! IMPLICIT INPUTS:
!
!       NONE
!
! IMPLICIT OUTPUTS:
!
!       In case of success return, a value descriptor is constructed.
!
!       In the case of severe error return, a message argument vector 
!	is constructed.
!
! ROUTINE VALUE:
!
!       An unsigned integer longword completion code
!
! COMPLETION CODES:
!
!       STS$K_SUCCESS (1) - Success. Value descriptor returned.
!
!       STS$K_FAILURE (4) - Failure. Message argument vector returned.
!
! SIDE EFFECTS:
!
!       NONE
!
!--
    BEGIN

    	LOCAL
    	    value_to_find,		! The kind of pseudo-symbol
    					! that should be found

    	    type,			! The type of descriptor returned
    					! from the Pseudo-symbol Interpreter.
    					! This value should always be 
    					! dbg$k_value_desc.

    	    override_type,		! The override type returned from
    					! the Pseudo-symbol Interpreter.
    					! This value should always be 
    				        ! dbg$k_notype.

    	    override_length;		! The override length returned from
    					! the Pseudo-symbol Interpreter.
    					! This value should always be 0.



    	value_to_find = dbg$k_last_value;
    	IF dbg$npseudo_sym_int (.value_to_find, type, .value_desc, 
    		override_type, override_length, .message_vect)
    	THEN 
    	    BEGIN

    		! Check that the values returned were valid

    		IF (.type NEQ dbg$k_value_desc) 
    				OR
    		   (.override_type NEQ dbg$k_notype)
    				OR
    		   (.override_length NEQ 0)
    		THEN signal (dbg$_debugbug, 1, dbg$k_bad_pseud_sym_results)
    		ELSE RETURN (sts$k_success);
    	    END

    	ELSE RETURN (sts$k_severe);

    	! Make BLISS happy, we should never, ever get here

    	.message_vect= dbg$nmake_arg_vect( dbg$_debugbug, 1, 
    				dbg$k_bad_pseud_sym_results);
    	RETURN (sts$k_severe);

    END;





ROUTINE GET_AMOUNT_TO_USE ( override_type, override_length, amount, er_msg)=

!++
!
! FUNCTIONAL DESCRIPTION
!
!	This routine determines the best override type and length to use
!	and computes the length of that override type in bytes. The
!	priority it uses in figuring out which override type and lenght
!	to use is to first try for a CLI override type. If this fails
!	then the CLI's default type is used.
!
! FORMAL PARAMETERS:
!
!	override_type	-	The address of a longword to contain
!				the override type used in evaluating
!				the previous address that the user saw.
!				Standard Argument Data Types as described
!				in Appendix C of the VAX/11 Architecture
!				Handbook will be used, however only the 
!				following subset of thos data types will
!				be understood:
!
!					DSC$K_DTYPE_BU	(2)- Byte logical
!					DSC$K_DTYPE_WU	(3)- Word logical
!					DSC$K_DTYPE_LU	(4)- Longword logical
!					DSC$K_DTYPE_B	(6)- Byte integer
!					DSC$K_DTYPE_W	(7)- Word integer
!					DSC$K_DTYPE_L	(8)- Longword integer
!					DSC$K_DTYPE_T  (14)- ASCII text
!					DSC$K_DTYPE_ZI (22)- Instruction
!
!	override_length	-	The address of a longword which in the case
!				of a counted length override_type (i.e.,
!				DSC$K_DTYPE_ZI) will contain the 
!				length associated with the override type. 
!				In all other cases the longword 
!				contains a zero.
!	
!	amount		-	The address of a longword to contain the 
!				amount of bytes that one associates with the
!				override type and length, if the type was
!				a supported type.
!
!	er_msg		-	The address of a longword to contain
!				the address of a message argument vector
!				as described on page 4-119 of the VAX/VMS
!				System Reference Manual, Volume 1A.
!
! IMPLICIT INPUTS:
!
!	None.
!
! IMPLICIT OUTPUTS:
!
!	In the case of a successful return the amount parameter is equal to the
!	amount of bytes associated with the override type and length and the
!	appropriate override type and length has been found.
!
!	In the case of a severe return, a message argument vector is 
!	constructed and returned.
!
! ROUTINE VALUE:
!
!	STS$K_SUCCESS	(1)	-	Success. The amount of bytes associated
!					with the appropriate override type
!					and length is returned.
!
!	STS$K_SEVERE	(4)	-	Failure. The type given to this routine
!					is not currently supported.
!
! SIDE EFFECTS:
!
!	None.
!
!--

    BEGIN

    	LOCAL
    	    this_command_override_type,		! This command's override type
    	    this_command_override_length;	! This command's override 
    					        ! length

    	! First try for an override type

    	IF NOT dbg$nget_override_type ( this_command_override_type, 
    			this_command_override_length)

        ! Otherwise try for a default type
		
    	THEN dbg$nget_default_type ( this_command_override_type, 
    			this_command_override_length);

    	! Now get the amount of bytes associated with the type and length

        IF NOT amount_to_add ( .this_command_override_type, 
    				.this_command_override_length, .amount,
    					.er_msg)
    	THEN RETURN (sts$k_severe)
    	ELSE RETURN (sts$k_success);
    END;




 

ROUTINE AMOUNT_TO_ADD ( override_type, override_length, amount, error_msg)=

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine translates an override_type and override_length into
!	a physical amount of bytes. These bytes can then be used by other
!	routines to determine such things as the beginning byte of the
!	successor to a location.
!
! FORMAL PARAMETERS:
!
!	override_type	-	The address of a longword to contain 
!				the override type.
!
!				This override type is not necessarily the
!				formal override type used by the PSI and
!				the AEI but what ever type is being currently
!				used as a type. Valid types are:
!
!					DSC$K_DTYPE_BU	(2)- Byte logical
!					DSC$K_DTYPE_WU	(3)- Word logical
!					DSC$K_DTYPE_LU	(4)- Longword logical
!					DSC$K_DTYPE_B	(6)- Byte integer
!					DSC$K_DTYPE_W	(7)- Word integer
!					DSC$C_DYTPE_L	(8)- Longword integer
!					DSC$K_DTYPE_T  (14)- ASCII text
!					DSC$K_DTYPE_ZI (22)- Instruction
!
!	override_length	-	In the case of a counted length override_type
!				(i.e., DSC$K_DTYPE_ZI the address of a 
!				longword containing the length associated 
!				with the override type. Otherwise this 
!				parameter's value is ignored.
!
!	amount		-	The address of a longword to contain 
!				the amount of bytes that one associates 
!				with the override_type and override_length 
!				if the type was a supported type.
!
!	error_msg	-	The address of a longword to contain 
!				the address of a message argument vector
!				as described on page 4-119 of the VAX/VMS
!				System Reference Manual, Volume 1A.
!
! IMPLICIT INPUTS:
!
!	None.
!
! IMPLICIT OUTPUTS:
!
!	In the case of a successful return the amount parameter is equal
!	to the amount of bytes associated with the override type and length.
!
!	In the case of a severe return, a message argument vector is 
!	constructed and returned.
!
! ROUTINE VALUE:
!
!	STS$K_SUCCESS	(1)	-	Success. The amount of bytes associated
!					with the override type and length is
!					returned.
!
!	STS$K_SEVERE	(2)	-	Failure. The type given to this routine
!					is not currently supported.
!
! SIDE EFFECTS:
!
!	None.
!
!--

    BEGIN

        CASE .override_type
    	 FROM DSC$K_DTYPE_BU TO DSC$K_DTYPE_ZI OF

    	    SET

    	    [DSC$K_DTYPE_BU, DSC$K_DTYPE_B]:

    		! A byte

    		.amount = 1;

    	    [DSC$K_DTYPE_WU, DSC$K_DTYPE_W]:

    		! A word

    		.amount = 2;

    	    [DSC$K_DTYPE_LU, DSC$K_DTYPE_L]:

    		! A longword

    		.amount = 4;

    	    [DSC$K_DTYPE_T]:

    		! An ASCII string, get it's length if non-zero

    		IF .override_length NEQ 0 
    		THEN .amount = .override_length
    		ELSE signal (dbg$_debugbug, 1, dbg$k_ill_over_length);

	    [DSC$K_DTYPE_ZI]:

		! Instruction gets zero length for override since we use the
		! length of the last instruction displayed.

		.amount = 0;

    	    [INRANGE, OUTRANGE]:    	
    		
    		signal (dbg$_debugbug, dbg$k_ill_over_type);
    	    TES;

    	RETURN (sts$k_success);
    END;





END    
ELUDOM    
