MODULE DBGNEVLTE (IDENT = 'V03-000') =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:
!
!	DEBUG
!
! ABSTRACT:
!
!	This module contains the parse and execution routines to support the
!	EVALUATE command. Parsing is done by means of ATN's. A command execution
!	tree is constructed during parsing. This tree is passed as input to the
!	command execution network.
!
!
! ENVIRONMENT:
!
!	VAX/VMS
!
! AUTHOR:
!
!	David Plummer
!
! CREATION DATE:
!
!	7-2-80
!
! VERSION:
!
!	V02.2-001
!
! MODIFIED BY:
!
!--

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
	DBG$NPARSE_EVALUATE,		! Parse network
	DBG$NEXECUTE_EVALUATE;		! Command execution network

!
! REQUIRE FILES:
!

REQUIRE 'SRC$:DBGPROLOG.REQ';

REQUIRE 'SRC$:DBGGEN.REQ';
REQUIRE 'SRC$:SYSSER.REQ';

!
! OWN STORAGE:
!

!
! EQUATED SYMBOLS:
!
LITERAL

	! legal verb composites
	!
	EVALUATE 	= 1,		! Plain jane EVALUATE
	EVALUATE_ADDR	= 2;		! EVALUATE/ADDRESS

!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
	DBG$NSAVE_LAST_VAL,		! Saves definition of '\'
	DBG$NSAVE_LAST_LOC,		! Saves definition of '.'
	DBG$OUT_PUT,			! Prints a buffer
	DBG$FAO_PUT,			! Formats into output buffer
	DBG$OUT_NUM_VAL,		! Formats numeric output
	DBG$NGET_RADIX,			! Returns mode radix
	DBG$NGET_TRANS_RADIX,		! Returns a translation of default radix
	DBG$NPARSE_EXPRESSION,		! Interface to Expression Interpreter
	DBG$NPARSE_ADDRESS,		! Interface to Address Expression Interpreter
	DBG$NMAKE_ARG_VECT,		! Constructs message argument vector
	DBG$NTYPE_CONV,			! Type converter
	DBG$NLIST_FREEZ,		! Allocates listed dynamic storage
	DBG$NMATCH,			! Matches counted strings against input
	DBG$NSYNTAX_ERROR,		! Formats a syntax error
	DBG$NNEXT_WORD,			! Gets next word of input
	DBG$NGET_ADDRESS,		! Obtains an lvalue from an addr exp desc
	DBG$TRANS_TO_REGNAME;		! Translate address to register name

EXTERNAL
	DBG$CP_OUT_STR	: REF VECTOR [,BYTE],	! Points into current output buffer
	DBG$GL_BUF_SIZ;				! Holds size of current output

GLOBAL ROUTINE DBG$NPARSE_EVALUATE (INPUT_DESC, VERB_NODE, MESSAGE_VECT) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Parse network for the EVALUATE command. The parsing method used is that
!	of ATN's. This network constructs a command execution tree to be executed
!	by dbg$nexecute_evaluate.
!
! FORMAL PARAMETERS:
!
!	INPUT_DESC		- A longword containing the address of a standard
!				  string descriptor which reflects the input string
!
!	VERB_NODE		- A longword containing the address of the verb
!				  (head) node of the command execution tree
!
!	MESSAGE_VECT		- The address of a longword to contain the
!				  address of a standard message argument vector on errors
!
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	On success, a command execution tree is constructed representing the parsed
!	input command.
!
!	On failure, a message argument vector is constructed.
!
! ROUTINE VALUE:
!
!	An unsigned integer longword completion code
!
! COMPLETION CODES:
!
!	sts$k_success (1)	- Success. Input parsed and execution tree constructed.
!
!	sts$k_severe  (4)	- Failure. Tree not constructed. Message vector
!				  constructed.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	VERB_NODE : REF dbg$verb_node;

    ! Define counted strings used at this level
    !
    BIND
	DBG$CS_ADDRESS 		= UPLIT BYTE (7, 'ADDRESS'),
	DBG$CS_HEXADECIMAL 	= UPLIT BYTE (11, 'HEXADECIMAL'),
	DBG$CS_OCTAL   		= UPLIT BYTE (5, 'OCTAL'),
	DBG$CS_DECIMAL 		= UPLIT BYTE (7, 'DECIMAL'),
	DBG$CS_SLASH   		= UPLIT BYTE (1, dbg$k_slash);

    LOCAL
	STATUS,					! Holds return status
	NOUN_NODE 	: REF dbg$noun_node,	! Object
	ADVERB_NODE 	: REF dbg$adverb_node,	! Modifier
	RADIX;					! Radix

    ! Create and link a noun node
    !
    IF NOT dbg$nlist_freez (dbg$k_noun_node_size, noun_node, .message_vect)
    THEN
	RETURN sts$k_severe;

    verb_node [dbg$l_verb_object_ptr] = .noun_node;


    ! Start with default radix
    !
    radix = dbg$nget_radix ();


    ! Accept any / switches. Start with plain jane evaluate - this may get changed.
    !
    verb_node [dbg$b_verb_composite] = evaluate;

    WHILE dbg$nmatch (.input_desc, dbg$cs_slash, 1)
    DO
	BEGIN

	! Try to match legal switches
	!
	SELECTONE true
	    OF
	    SET

	    [dbg$nmatch (.input_desc, dbg$cs_address, 1)]  : ! address switch
		BEGIN
		verb_node [dbg$b_verb_composite] = evaluate_addr;
		END;

	    [dbg$nmatch (.input_desc, dbg$cs_hexadecimal, 1)]	: ! Change radix to hex
		BEGIN
		radix = dbg$k_hex;
		END;

	    [dbg$nmatch (.input_desc, dbg$cs_octal, 1)] : ! Change radix to octal
		BEGIN
		radix = dbg$k_octal;
		END;

	    [dbg$nmatch (.input_desc, dbg$cs_decimal, 1)] : ! Change radix to decimal
		BEGIN
		radix = dbg$k_decimal;
		END;

	    [OTHERWISE] :	! Syntax error
		BEGIN
		.message_vect = dbg$nsyntax_error (dbg$nnext_word (.input_desc));
		RETURN sts$k_severe;
		END;

	    TES

	END;


    ! Obtain the object of the evaluate based on the verb composite
    !
    CASE .verb_node [dbg$b_verb_composite] FROM evaluate TO evaluate_addr
   	OF
	SET

	[evaluate] : 	! Call Expression Interpreter to obtain expression value
	    BEGIN
	    IF NOT (status =  dbg$nparse_expression (.input_desc,
						     .radix,
						     noun_node [dbg$l_noun_value],
					  	     .message_vect))
	    THEN
		BEGIN
		IF .status EQL sts$k_warning
		THEN
		    .message_vect = dbg$nsyntax_error (dbg$nnext_word (.input_desc));
		RETURN sts$k_severe;
		END;
	    END;

	[evaluate_addr] :	! Call Address Expression Interpreter
	    BEGIN
	    IF NOT (status = dbg$nparse_address (.input_desc,
						 noun_node [dbg$l_noun_value],
				  	         .radix,
						 .message_vect))
	    THEN
		BEGIN

		! We are responsible for formatting error messages on sts$k_warning
		!
		IF .status EQL sts$k_warning
		THEN
		    .message_vect = dbg$nsyntax_error (dbg$nnext_word (.input_desc));
		RETURN sts$k_severe;
		END;
	    END;

	TES;


	! Check for a modifier
	!
	IF .radix NEQ dbg$k_default
	THEN
	    BEGIN

	    ! Construct a radix modifier node and link to verb node
	    !
	    IF NOT dbg$nlist_freez (dbg$k_adverb_node_size, adverb_node, .message_vect)
	    THEN
		RETURN sts$k_severe;

	    adverb_node [dbg$b_adverb_literal] = .radix;
	    verb_node [dbg$l_verb_adverb_ptr] = .adverb_node;
	    adverb_node [dbg$l_adverb_link] = 0;

	    END;

    RETURN sts$k_success;

    END;			! End of dbg$nparse_evaluate


GLOBAL ROUTINE DBG$NEXECUTE_EVALUATE (VERB_NODE, MESSAGE_VECT) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine is the command execution network for the EVALUATE command.
!	Various semantic actions are performed which correspond to the arguments
!	and operands of the parsed input string.
!
!	EVALUATE sets lat val '\', EVALUTATE/ADDRESS sets '.', current loc.
!
! FORMAL PARAMETERS:
!
!	VERB_NODE		- A longword containing the address of the head
!				  node in the command execution tree
!
!	MESSAGE_VECT		- The address of a longword to contain the address
!				  of a standard message argument vector for errors.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	An unsigned integer longword completion code
!
! COMPLETION CODES:
!
!	sts$k_success (1)	- Success. The command was executed.
!
!	sts$k_severe  (4)	- Failure. Command not executed. Message vector
!				  constructed and returned.
!
! SIDE EFFECTS:
!
!	A value is displayed to the user
!
!--
    BEGIN

    MAP
	VERB_NODE : REF DBG$VERB_NODE;

    BIND
	AS 		= UPLIT BYTE (%ASCIC '!AS');

    LOCAL
	OUTPUT_BUFFER 	: VECTOR [tty_out_width, BYTE], ! Output buffer
	NOUN_NODE 	: REF dbg$noun_node,	! noun node
	ADVERB_NODE 	: REF dbg$adverb_node,	! adverb node
	REG_NAME_PTR: REF VECTOR[,BYTE];	! Register name counted ASCII



    ! Set up to do standard output
    !
    dbg$cp_out_str = output_buffer + 1;
    dbg$gl_buf_siz = 0;


    ! Recover the noun node
    !
    noun_node = .verb_node [dbg$l_verb_object_ptr];


    ! Recover the adverb_node
    !
    adverb_node = .verb_node [dbg$l_verb_adverb_ptr];


    ! Perform the EVALUATE based on the verb composite
    !
    CASE .verb_node [dbg$b_verb_composite] FROM evaluate TO evaluate_addr
	OF
	SET

	[evaluate] :
	    BEGIN
	    LOCAL
		string_desc : dbg$stg_desc,	! Target descriptor for conv.
		radix,				! Target radix
		target_type;			! Target descriptor type for conv

	    ! We call type converter to obtain the printable format of the value
	    ! descriptor. Initialize the target and the target type and call the
	    ! type converter.
	    !
	    string_desc [dsc$b_class] = dsc$k_class_s;
	    string_desc [dsc$b_dtype] = dsc$k_dtype_t;
	    string_desc [dsc$w_length] = 0;
	    string_desc [dsc$a_pointer] = 0;

	    target_type = dbg$k_external_desc;
	    radix = ( IF .adverb_node EQLA 0 THEN dbg$k_default ELSE .adverb_node [dbg$b_adverb_literal]);
	
	    IF NOT dbg$ntype_conv (.noun_node [dbg$l_noun_value],
				   .radix,
				   .target_type,
				   string_desc,
				   .message_vect)
	    THEN
		RETURN sts$k_severe;


	    ! Format the output
	    !
	    dbg$fao_put (output_buffer, AS, string_desc);


	    ! Set up '\'
	    !
	    dbg$nsave_last_val (.noun_node [dbg$l_noun_value]);

	    END;

	[evaluate_addr] :
	    BEGIN
	    
 	    LOCAL
		ADDRESS : VECTOR [2],
		TYPE,
		RADIX;

	    ! Try to get an address
	    !
	    IF NOT dbg$nget_address (.noun_node [dbg$l_noun_value], address [0],
				     type, .message_vect)
	    THEN
		RETURN sts$k_severe;


	    ! If this address corresponds to a register name, we format it as
	    ! such.
	    !
	    IF DBG$TRANS_TO_REGNAME(.ADDRESS[0], REG_NAME_PTR)
	    THEN
		BEGIN
		DBG$FAO_PUT(OUTPUT_BUFFER, UPLIT BYTE(%ASCIC '!AC'),
							.REG_NAME_PTR);
		END


	    ! It is not a register name.  Format it according to the appropriate
	    ! radix, unsigned.
	    !
	    ELSE
		BEGIN


		! Check for radix overrides.
		!
		RADIX = (IF .ADVERB_NODE EQLA 0
		     THEN
			 dbg$nget_trans_radix (dbg$k_default)
		     ELSE
			 .adverb_node [dbg$b_adverb_literal]);


		! We do not care about the type associated with the address.
		! Simply format the address, unsigned, using the correct radix.
		! Note that we ignore any bit offset for the address.
		!
		DBG$OUT_NUM_VAL(OUTPUT_BUFFER, .ADDRESS[0], LONG_LENGTH,
					.RADIX, TRUE);
		END;


	    ! Save '.'
	    !
	    dbg$nsave_last_loc (.noun_node [dbg$l_noun_value],
				-1,	! No override
				-1);

	    END;

	[INRANGE,OUTRANGE] :	! Nothing else supported yet
	    BEGIN

	    .message_vect = dbg$nmake_arg_vect (dbg$_notimplan, 1,
						UPLIT BYTE (17, 'full verb support'));
	    RETURN sts$k_severe;

	    END;

	TES;


    ! Output the formatted buffer
    !
    dbg$out_put (output_buffer);

    RETURN sts$k_success;

    END;

END				!End of module
ELUDOM
