MODULE DBGSIO (	IDENT = 'V03-000') =
BEGIN

!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
! FACILITY:	DEBUG
!
!++
! FUNCTIONAL DESCRIPTION:
!	FAO FORMATTING ROUTINE
!
! Version:	1.03
!
! History:
!	Author:
!		Carol Peters, 01 Oct 1976: Version 01
!
!	Modified by:
!		Mike Candela, 25 July 1979
!
! Revision history:
! 1.01	25-SEP-78	MCC	Deleted require file SYSLIT.
! 1.02	14-MAR-79	MCC	Updated DBG$FAO_OUT to write output
!				to LOG file if logging is enabled.
! 1.03	25-JUL-79	MCC	Added changes for [NO]TERMINAL
!--

! TABLE OF CONTENTS:
!
FORWARD ROUTINE
	DBG$FAO_OUT: NOVALUE;		! ROUTINE TO FORMAT AND OUTPUT A STRING

!
! REQUIRE FILES:
!
REQUIRE 'SRC$:DBGPROLOG.REQ';

REQUIRE 'SRC$:DBGPCT.REQ';
REQUIRE 'SRC$:DBGGEN.REQ';

EXTERNAL ROUTINE
	SYS$FAOL: ADDRESSING_MODE (GENERAL);	! ROUTINE TO FORMAT AN ASCII STRING

EXTERNAL
	dbg$gb_exit_dbg: BYTE,			! flag that says exit from DEBUG
	DBG$GL_OUTPRAB : BLOCK [, BYTE], 	! RAB for 'OUTPUT'
	dbg$gb_def_out : VECTOR [,BYTE],	! OUTPUT config VECTOR
	dbg$gl_log_buf,				! Ptr to log filespec
	dbg$gl_lograb  : BLOCK [, BYTE];	! RAB for LOG file

GLOBAL ROUTINE DBG$FAO_OUT (STRING, ARGUMENTS) : NOVALUE =
!++
! FUNCTIONAL DESCRIPTION:
!	SETS UP INPUT AND OUTPUT STRING DESCRIPTORS, CALLS SYS$FAOL TO
!	FORMAT THE STRING INTO THE OUTPUT BUFFER, AND THEN PRINTS THE
!	MESSAGE ON DBG$OUTPUT.
!
!	If RMS$_RSA is returned from $PUT the routine issues a $WAIT
!	and then attempts the output again.  If that $PUT fails the
!	returned status code is signaled to DBG$OUTPUT.
!
! FORMAL PARAMETERS:
!	STRING		- THE ADDRESS OF A COUNTED CONTROL STRING TO FAO
!	ARGUMENTS	- MAY BE ABSENT. ARGUMENTS TO BE APPLIED TO THE
!			  FAO CONTROL STRING.
!
! IMPLICIT INPUTS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NOVALUE
!
! SIDE EFFECTS:
!	The message is output to DBG$OUTPUT.
!--

	BEGIN
	
	MAP
		STRING: REF VECTOR [, BYTE];

	LOCAL
		OUT_BUF: VECTOR [TTY_OUT_WIDTH, BYTE],
		INP_DESC: VECTOR [2],
		OUT_DESC: VECTOR [2],
		STATUS;

	INP_DESC [0] = .STRING [0];
	INP_DESC [1] = STRING [1];
	OUT_DESC [0] = TTY_OUT_WIDTH;
	OUT_DESC [1] = OUT_BUF + 1;
	SYS$FAOL (INP_DESC, DBG$GL_OUTPRAB [RAB$W_RSZ], OUT_DESC, ARGUMENTS);

	! If a LOG file is being written, put OUT_BUF there

	IF .dbg$gb_def_out [out_log]
	THEN
		BEGIN
		LOCAL
			out_buf_a : REF VECTOR[,BYTE];

		! Put an "!" at the beginning of the comment line

		out_buf_a = out_buf;
		out_buf_a [0] = %C'!';

		dbg$gl_lograb [rab$l_rbf] = out_buf;
		dbg$gl_lograb [rab$w_rsz] = .dbg$gl_outprab [rab$w_rsz] + 1;

		status = $PUT(RAB = dbg$gl_lograb);
		IF .status EQL rms$_rsa			! record stream active error
		THEN
			BEGIN
			$WAIT (RAB = dbg$gl_lograb);	! Wait & try again
			status = $PUT(RAB = dbg$gl_lograb);
			END;

		IF NOT .status
		THEN
			BEGIN
			LOCAL
				fab_ptr  : REF $FAB_DECL,
				msg_desc : BLOCK [8,BYTE];

			fab_ptr = .dbg$gl_lograb [rab$l_fab];
			IF .dbg$gl_log_buf NEQ 0
			THEN
				BEGIN
				msg_desc [dsc$w_length] = .fab_ptr [fab$b_fns];
				msg_desc [dsc$a_pointer]= .fab_ptr [fab$l_fna];
				END
			ELSE
				BEGIN
				msg_desc [dsc$w_length] = .fab_ptr [fab$b_dns];
				msg_desc [dsc$a_pointer]= .fab_ptr [fab$l_dna];
				END;
			SIGNAL (shr$_writeerr + dbg_fac_code, 1, msg_desc,
			       .dbg$gl_lograb[rab$l_sts], .dbg$gl_lograb[rab$l_stv]);
			END;
		END;


	! If output mode is NOTERMINAL, don't write to it

	IF NOT .dbg$gb_def_out[out_term]
	THEN
		RETURN;

	DBG$GL_OUTPRAB [RAB$L_RBF] = OUT_BUF + 1;

	STATUS = $PUT (RAB = DBG$GL_OUTPRAB);
	IF .STATUS EQL RMS$_RSA		! Record stream active error
	THEN
	    BEGIN
	    !+
	    ! Wait for current I/O to finish and re-try $PUT
	    !-
	    $WAIT (RAB = DBG$GL_OUTPRAB);
	    STATUS = $PUT (RAB = DBG$GL_OUTPRAB);
	    END;

	IF NOT .STATUS
	THEN
		BEGIN
		LOCAL
			msg_desc : BLOCK [8,BYTE];
		msg_desc [dsc$w_length]  = 10;
		msg_desc [dsc$a_pointer] = UPLIT BYTE(%ASCII 'DBG$OUTPUT');
		SIGNAL(shr$_writeerr + dbg_fac_code, 1, msg_desc,
		      .dbg$gl_outprab[rab$l_sts], .dbg$gl_outprab[rab$l_stv]);
		END;

	END;


END
ELUDOM
