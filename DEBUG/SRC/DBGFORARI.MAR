	.TITLE	DBGFORARI
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************

;++
;
; FACILITY:  DEBUG
;
; ABSTRACT:
;	arithmetic routines for FORTRAN debugging. Includes integer,
;	single, and double precision add, subtract, multiply, and
;	divide.
;
; ENVIRONMENT:
;	user mode, non-AST.
;
; REVISION HISTORY:
;
; AUTHOR:  Carol Peters		CREATION DATE:	December 5, 1977
;
; MODIFIED BY:
;		Dale Roedger, 16-May-1978
;
;+
; 1.01	05-OCT-78	DAR	Deleted conversion routines since we now use the
;				BUILTIN capability of BLISS.
; 1.02 13-OCT-78	DAR	All arithmetic routines are now passed the
;				addresses to the data and type fields.
;--

;
; INCLUDE FILES:
;

;
; MACROS:
;
	$dbgdef			; DEBUG definitions
	$dscdef			; SRM data type definitions

;
; EQUATED SYMBOLS:
;

;
; OWN STORAGE:
;

.SBTTL	DBG$FOR_ADD	Fortran addition routine
;++
;
; FUNCTIONAL DESCRIPTION:
;	Adds two elements from the parse stack. The elements' addresses
;	are the four (4) arguments to this routine.  The following FORTRAN
;	mixed mode arithmetic rules are used.
;
;		integer + integer = integer
;		integer + single_precision = single_precision
;		integer + double_precision = double_precision
;		single_precision + single_precision = single_precision
;		single_precision + double_precision = double_precision
;		double_precision + double_precision = double_precision
;
;	Any unknown data types are treated as INTEGER.
;
; FORMAL PARAMETERS:
;	4(AP)	- address of addend and result
;	8(AP)	- address of addend's type and result's type
;	12(AP)	- address of augend
;	16(AP)	- address of augend's type
;
; IMPLICIT INPUTS:
;	none.
;
; IMPLICIT OUTPUTS:
;	The sum of the two numbers is output in the address at 4(AP),
;	the type of the sum is output to the address at 8(AP).
;
; ROUTINE VALUE:
;	NONE
;
; SIDE EFFECTS:
;	none.
;
;--

	.PSECT	DBG$CODE BYTE, PIC, SHR, NOWRT, EXE

	.ENTRY	dbg$for_add, ^M<>

	CMPB	#DSC$K_DTYPE_D, @8(AP)	; Is the addend double precision?
	BNEQ	100$			; Try floating if not.

	CMPB	#DSC$K_DTYPE_D, @16(AP)	; Is the augend double?
	BEQL	20$			; Yes, go add double.

	CMPB	#DSC$K_DTYPE_F, @16(AP)	; Is the augend single precision?
	BNEQ	10$			; Assume integer if not.

	CVTFD	@12(AP), @12(AP)	; Convert to double.
	BRB	20$			; Go to ADD Double

10$:	CVTLD	@12(AP), @12(AP)	; Convert to Double.

20$:	ADDD2	@12(AP), @4(AP)		; Double precision addition
	RET				; Type correct already.

100$:	CMPB	#DSC$K_DTYPE_F, @8(AP)	; Is the addend single precision?
	BNEQ	200$			; Assume integer if not.

	CMPB	#DSC$K_DTYPE_D, @16(AP)	; Is the augend double?
	BNEQ	110$			; Check for single
	CVTFD	@4(AP), @4(AP)		; Convert addend to double
	ADDD2	@12(AP), @4(AP)		; Double precision addition
	MOVB	#DSC$K_DTYPE_D, @8(AP)	; Make type double.
	RET				;

110$:	CMPB	#DSC$K_DTYPE_F, @16(AP)	; Is the augend single precision?
	BEQL	120$			; Go to single precision add

	CVTLF	@12(AP), @12(AP)	; Convert to single precision.
120$:	ADDF2	@12(AP), @4(AP)		; Single precision addition.
	RET				; Type correct already.

200$:	CMPB	#DSC$K_DTYPE_D, @16(AP)	; Is the augend double?
	BNEQ	210$			; No, go try single precision.

	CVTLD	@4(AP), @4(AP)		; Convert to double precision
	ADDD2	@12(AP), @4(AP)		; Double precision addition
	MOVB	#DSC$K_DTYPE_D, @8(AP)	; Set type to double.
	RET				;

210$:	CMPB	#DSC$K_DTYPE_F, @16(AP)	; Is the augend single precision?
	BNEQ	220$			; Assume integer if not.

	CVTLF	@4(AP), @4(AP)		; Convert to single precision.
	ADDF2	@12(AP), @4(AP)		; Single precision addition.
	MOVB	#DSC$K_DTYPE_F, @8(AP)	; Set type to single.
	RET				;

220$:	ADDL2	@12(AP), @4(AP)		; Integer addition.
	MOVB	#DSC$K_DTYPE_L, @8(AP)	; Make type integer!!!!
	RET				;

.SBTTL	DBG$FOR_SUB	Fortran subtraction routine
;++
; FUNCTIONAL DESCRIPTION:
;	Subtracts two elements from the parse stack. The elements' addresses
;	are the four (4) arguments to this routine.  The following FORTRAN
;	mixed mode arithmetic rules are used.
;
;		integer - integer = integer
;		integer - single_precision = single_precision
;		integer - double_precision = double_precision
;		single_precision - single_precision = single_precision
;		single_precision - double_precision = double_precision
;		double_precision - double_precision = double_precision
;
;	Any unknown data types are treated as INTEGER.
;
; FORMAL PARAMETERS:
;	4(AP)	- address of subtrahend and result
;	8(AP)	- address of subtrahend's type and result's type
;	12(AP)	- address of minuend
;	16(AP)	- address of minuend's type
;
; IMPLICIT INPUTS:
;	none.
;
; IMPLICIT OUTPUTS:
;	The difference of the two numbers is output in the address at 4(AP),
;	the type of the difference is output to the address at 8(AP).
;
; ROUTINE VALUE:
;	NONE
;
; SIDE EFFECTS:
;	none.
;
;--

	.PSECT	DBG$CODE BYTE, PIC, SHR, NOWRT, EXE

	.ENTRY	dbg$for_sub, ^M<>

	CMPB	#DSC$K_DTYPE_D, @8(AP)	; Is the subtrahend double precision?
	BNEQ	100$			; Try floating if not.

	CMPB	#DSC$K_DTYPE_D, @16(AP)	; Is the minuend double?
	BEQL	20$			; Yes, go subtract double.

	CMPB	#DSC$K_DTYPE_F, @16(AP)	; Is the minuend single precision?
	BNEQ	10$			; Assume integer if not.

	CVTFD	@12(AP), @12(AP)	; Convert to double.
	BRB	20$			; Go to subtract Double

10$:	CVTLD	@12(AP), @12(AP)	; Convert to Double.

20$:	SUBD2	@12(AP), @4(AP)		; Double precision subtraction
	RET				; Type correct already.

100$:	CMPB	#DSC$K_DTYPE_F, @8(AP)	; Is the subtrahend single precision?
	BNEQ	200$			; Assume integer if not.

	CMPB	#DSC$K_DTYPE_D, @16(AP)	; Is the minuend double?
	BNEQ	110$			; Check for single
	CVTFD	@4(AP), @4(AP)		; Convert subtrahend to double
	SUBD2	@12(AP), @4(AP)		; Double precision subtraction
	MOVB	#DSC$K_DTYPE_D, @8(AP)	; Make type double.
	RET				;

110$:	CMPB	#DSC$K_DTYPE_F, @16(AP)	; Is the minuend single precision?
	BEQL	120$			; Go to single precision SUB

	CVTLF	@12(AP), @12(AP)	; Convert to single precision.
120$:	SUBF2	@12(AP), @4(AP)		; Single precision subtraction.
	RET				; Type correct already.

200$:	CMPB	#DSC$K_DTYPE_D, @16(AP)	; Is the minuend double?
	BNEQ	210$			; No, go try single precision.

	CVTLD	@4(AP), @4(AP)		; Convert to double precision
	SUBD2	@12(AP), @4(AP)		; Double precision subtraction
	MOVB	#DSC$K_DTYPE_D, @8(AP)	; Set type to double.
	RET				;

210$:	CMPB	#DSC$K_DTYPE_F, @16(AP)	; Is the minuend single precision?
	BNEQ	220$			; Assume integer if not.

	CVTLF	@4(AP), @4(AP)		; Convert to single precision.
	SUBF2	@12(AP), @4(AP)		; Single precision subtraction.
	MOVB	#DSC$K_DTYPE_F, @8(AP)	; Set type to single.
	RET				;

220$:	SUBL2	@12(AP), @4(AP)		; Integer subtraction.
	MOVB	#DSC$K_DTYPE_L, @8(AP)	; Make type integer!!!!
	RET				;

.SBTTL	DBG$FOR_MUL	Fortran multiplication routine
;++
; FUNCTIONAL DESCRIPTION:
;	Multiplies two elements from the parse stack. The elements' addresses
;	are the four (4) arguments to this routine.  The following FORTRAN
;	mixed mode arithmetic rules are used.
;
;		integer * integer = integer
;		integer * single_precision = single_precision
;		integer * double_precision = double_precision
;		single_precision * single_precision = single_precision
;		single_precision * double_precision = double_precision
;		double_precision * double_precision = double_precision
;
;	Any unknown data types are treated as INTEGER.
;
; FORMAL PARAMETERS:
;	4(AP)	- address of multiplicand and result
;	8(AP)	- address of multiplicand's type and result's type
;	12(AP)	- address of multiplier
;	16(AP)	- address of multiplier's type
;
; IMPLICIT INPUTS:
;	none.
;
; IMPLICIT OUTPUTS:
;	The product of the two numbers is output in the address at 4(AP),
;	the type of the product is output to the address at 8(AP).
;
; ROUTINE VALUE:
;	NONE
;
; SIDE EFFECTS:
;	none.
;
;--

	.PSECT	DBG$CODE BYTE, PIC, SHR, NOWRT, EXE

	.ENTRY	dbg$for_mul, ^M<>

	CMPB	#DSC$K_DTYPE_D, @8(AP)	; Is the multiplicand double precision?
	BNEQ	100$			; Try floating if not.

	CMPB	#DSC$K_DTYPE_D, @16(AP)	; Is the multiplier double?
	BEQL	20$			; Yes, go multiply double.

	CMPB	#DSC$K_DTYPE_F, @16(AP)	; Is the multiplier single precision?
	BNEQ	10$			; Assume integer if not.

	CVTFD	@12(AP), @12(AP)	; Convert to double.
	BRB	20$			; Go to multiply Double

10$:	CVTLD	@12(AP), @12(AP)	; Convert to Double.

20$:	MULD2	@12(AP), @4(AP)		; Double precision multiplication
	RET				; Type correct already.

100$:	CMPB	#DSC$K_DTYPE_F, @8(AP)	; Is the multiplicand single precision?
	BNEQ	200$			; Assume integer if not.

	CMPB	#DSC$K_DTYPE_D, @16(AP)	; Is the multiplier double?
	BNEQ	110$			; Check for single
	CVTFD	@4(AP), @4(AP)		; Convert multiplicand to double
	MULD2	@12(AP), @4(AP)		; Double precision multiplication
	MOVB	#DSC$K_DTYPE_D, @8(AP)	; Make type double.
	RET				;

110$:	CMPB	#DSC$K_DTYPE_F, @16(AP)	; Is the multiplier single precision?
	BEQL	120$			; Go to single precision multiply

	CVTLF	@12(AP), @12(AP)	; Convert to single precision.
120$:	MULF2	@12(AP), @4(AP)		; Single precision multiplication.
	RET				; Type correct already.

200$:	CMPB	#DSC$K_DTYPE_D, @16(AP)	; Is the multiplier double?
	BNEQ	210$			; No, go try single precision.

	CVTLD	@4(AP), @4(AP)		; Convert to double precision
	MULD2	@12(AP), @4(AP)		; Double precision multiplication
	MOVB	#DSC$K_DTYPE_D, @8(AP)	; Set type to double.
	RET				;

210$:	CMPB	#DSC$K_DTYPE_F, @16(AP)	; Is the multiplier single precision?
	BNEQ	220$			; Assume integer if not.

	CVTLF	@4(AP), @4(AP)		; Convert to single precision.
	MULF2	@12(AP), @4(AP)		; Single precision multiplication.
	MOVB	#DSC$K_DTYPE_F, @8(AP)	; Set type to single.
	RET				;

220$:	MULL2	@12(AP), @4(AP)		; Integer multiplication.
	MOVB	#DSC$K_DTYPE_L, @8(AP)	; Make type integer!!!!
	RET				;

.SBTTL	DBG$FOR_DIV	Fortran division routine
;++
; FUNCTIONAL DESCRIPTION:
;	Divides two elements from the parse stack. The elements' addresses
;	are the four (4) arguments to this routine.  The following FORTRAN
;	mixed mode arithmetic rules are used.
;
;		integer / integer = integer
;		integer / single_precision = single_precision
;		integer / double_precision = double_precision
;		single_precision / single_precision = single_precision
;		single_precision / double_precision = double_precision
;		double_precision / double_precision = double_precision
;
;	Any unknown data types are treated as INTEGER.
;
; FORMAL PARAMETERS:
;	4(AP)	- address of dividend and result
;	8(AP)	- address of dividend's type and result's type
;	12(AP)	- address of divisor
;	16(AP)	- address of divisor's type
;
; IMPLICIT INPUTS:
;	none.
;
; IMPLICIT OUTPUTS:
;	The product of the two numbers is output in the address at 4(AP),
;	the type of the product is output to the address at 8(AP).
;
; ROUTINE VALUE:
;	NONE
;
; SIDE EFFECTS:
;	If the divisor is zero (0) an error is signaled and an UNWIND occurs.
;
;--

	.PSECT	DBG$CODE BYTE, PIC, SHR, NOWRT, EXE

	.ENTRY	dbg$for_div, ^M<>

	CMPB	#DSC$K_DTYPE_D, @8(AP)	; Is the dividend double precision?
	BNEQ	100$			; Try floating if not.

	CMPB	#DSC$K_DTYPE_D, @16(AP)	; Is the divisor double?
	BEQL	20$			; Yes, go divide double.

	CMPB	#DSC$K_DTYPE_F, @16(AP)	; Is the divisor single precision?
	BNEQ	10$			; Assume integer if not.

	CVTFD	@12(AP), @12(AP)	; Convert to double.
	BRB	20$			; Go to divide Double

10$:	CVTLD	@12(AP), @12(AP)	; Convert to Double.

20$:	TSTD	@12(AP)			; Is divisor zero?
	BEQL	DIV_BY_ZERO		; YES!
	DIVD2	@12(AP), @4(AP)		; Double precision division
	RET				; Type correct already.

100$:	CMPB	#DSC$K_DTYPE_F, @8(AP)	; Is the dividend single precision?
	BNEQ	200$			; Assume integer if not.

	CMPB	#DSC$K_DTYPE_D, @16(AP)	; Is the divisor double?
	BNEQ	110$			; Check for single
	CVTFD	@4(AP), @4(AP)		; Convert dividend to double
	TSTD	@12(AP)			; Is divisor zero?
	BEQL	DIV_BY_ZERO		; YES!
	DIVD2	@12(AP), @4(AP)		; Double precision division
	MOVB	#DSC$K_DTYPE_D, @8(AP)	; Make type double.
	RET				;

110$:	CMPB	#DSC$K_DTYPE_F, @16(AP)	; Is the divisor single precision?
	BEQL	120$			; Go to single precision add

	CVTLF	@12(AP), @12(AP)	; Convert to single precision.
120$:	TSTF	@12(AP)			; Is divisor zero?
	BEQL	DIV_BY_ZERO		; YES!
	DIVF2	@12(AP), @4(AP)		; Single precision division.
	RET				; Type correct already.

200$:	CMPB	#DSC$K_DTYPE_D, @16(AP)	; Is the divisor double?
	BNEQ	210$			; No, go try single precision.

	CVTLD	@4(AP), @4(AP)		; Convert to double precision
	TSTD	@12(AP)			; Is divisor zero?
	BEQL	DIV_BY_ZERO		; YES!
	DIVD2	@12(AP), @4(AP)		; Double precision division
	MOVB	#DSC$K_DTYPE_D, @8(AP)	; Set type to double.
	RET				;

210$:	CMPB	#DSC$K_DTYPE_F, @16(AP)	; Is the divisor single precision?
	BNEQ	220$			; Assume integer if not.

	CVTLF	@4(AP), @4(AP)		; Convert to single precision.
	TSTF	@12(AP)			; Is divisor zero?
	BEQL	DIV_BY_ZERO		; YES!
	DIVF2	@12(AP), @4(AP)		; Single precision division.
	MOVB	#DSC$K_DTYPE_F, @8(AP)	; Set type to single.
	RET				;

220$:	TSTL	@12(AP)			; Is divisor zero?
	BEQL	DIV_BY_ZERO		; YES!
	DIVL2	@12(AP), @4(AP)		; Integer division.
	MOVB	#DSC$K_DTYPE_L, @8(AP)	; Make type integer!!!!
	RET				;

DIV_BY_ZERO:
	PUSHL	#DBG$_DIVBYZERO		; Divisor is zero (0)
	CALLS	#1, LIB$SIGNAL		; Signal error and UNWIND.

.SBTTL	DBG$FOR_NEG	Fortran negation routine
;++
; FUNCTIONAL DESCRIPTION:
;	Negates the top element on the parse stack. The element's address
;	and destination are the four (4) arguments to this routine.
;	The following FORTRAN conversion rules are used.
;
;		- integer = integer
;		- single_precision = single_precision
;		- double_precision = double_precision
;		- single_precision = single_precision
;		- double_precision = double_precision
;		- double_precision = double_precision
;
;	Any unknown data types are treated as INTEGER.
;
; FORMAL PARAMETERS:
;	4(AP)	- address of number
;	8(AP)	- address of number's type
;	12(AP)	- address of result
;	16(AP)	- address of result's type
;
;
; IMPLICIT INPUTS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; ROUTINE VALUE:
;	NONE
;
; SIDE EFFECTS:
;	NONE
;
;--

	.ENTRY	dbg$for_neg, ^M<>

	CMPB	#dsc$k_dtype_d, @8(AP)	; Is number double precision?
	BNEQ	10$			; no, branch and check for single
	MNEGD	@4(AP), @12(AP)		; Negate number.
	MOVB	#dsc$k_dtype_d, @16(AP)	; Set data type
	RET				; and return successfully

10$:	CMPB	#dsc$k_dtype_f, @8(AP)	; Is number single precision?
	BNEQ	20$			; no, branch and assume integer
	MNEGF	@4(AP), @12(AP)		; Negate number.
	MOVB	#dsc$k_dtype_f, @16(AP)	; Set data type
	RET				; and return successfully

20$:	MNEGL	@4(AP), @12(AP)		; Negate number.
	MOVB	#dsc$k_dtype_l, @16(AP)	; Set data type
	RET				; and return successfully

.END

