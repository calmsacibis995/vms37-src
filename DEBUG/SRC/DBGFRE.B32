MODULE DBGFRE (IDENT = 'V03-000') =

BEGIN

!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
! WRITTEN BY
!	Bert Beander	August, 1980.
!
! MODULE FUNCTION
!	This module contains all old memory management routines used in the
!	Debugger.  The new memory management routines are found is module
!	GETMEMORY.  The "old" routines found here are largely dummy routines
!	which simply call the new ones.  Someday this module will be obsolete.
!

REQUIRE 'SRC$:DBGPROLOG.REQ';

FORWARD ROUTINE
    DBG$FREEINIT:	NOVALUE,	! Initialize the free memory pool
    DBG$FREERELEASE:	NOVALUE,	! Release a memory block to the pool
    DBG$FREEZ,				! Allocate a memory block
    DBG$REPORT_FREE,			! Say how much free space is left
    DBG$NFREEZ,				! Allocate a memory block (no signals)
    DBG$NLIST_FREEZ,			! Allocate a temporary memory block
    DBG$NFREERELEASE,			! Release a memory block (no signals)
    DBG$NRELEASE_ALL,			! Release all temporary memory blocks
    DBG$NCOPY,				! Make a copy of a memory block
    DBG$NLIST_COPY;			! Make a temporary copy of a block

EXTERNAL ROUTINE
    DBG$COPY_MEMORY,			! Make a copy of a memory block in a
					!      permanent block
    DBG$COPY_TEMPMEM,			! Make a copy of a memory block in a
					!      temporary block
    DBG$EXPAND_MEMORY,			! Expand the free memory pool
    DBG$FREE_MEM_LEFT,			! Compute amount of free memory left
    DBG$GET_MEMORY,			! Get a memory block
    DBG$GET_TEMPMEM,			! Get a temporary memory block
    DBG$INIT_MEMORY:	NOVALUE,	! Initialize the free memory pool
    DBG$REL_MEMORY:	NOVALUE,	! Release a memory block
    DBG$REL_TEMPMEM:	NOVALUE;	! Release all temporary memory blocks

GLOBAL ROUTINE DBG$FREEINIT: NOVALUE =
!
! FUNCTION
!	Initialize the free memory pool.
!
! INPUTS
!	NONE
!
! OUTPUTS
!	NONE
!

    BEGIN

    DBG$INIT_MEMORY();
    RETURN;

    END;

GLOBAL ROUTINE DBG$FREERELEASE(BLKPTR, LENGTH): NOVALUE =
!
! FUNCTION
!	Release a memory block back to the memory pool.
!
! INPUTS
!	BLKPTR	- A pointer to the memory block to be released.
!
!	LENGTH	- Obsolete parameter--ignored by this routine.
!
! OUTPUTS
!	NONE
!

    BEGIN

    DBG$REL_MEMORY(.BLKPTR);
    RETURN;

    END;

GLOBAL ROUTINE DBG$FREEZ(LENGTH) =
!
! FUNCTION
!	Allocates a zeroed memory block and returns it address.
!
! INPUTS
!	LENGTH	- The desired size of the memory block in longwords.
!
! OUTPUTS
!	VALUE	- The address of the allocated memory block.
!

    BEGIN

    RETURN DBG$GET_MEMORY(.LENGTH);

    END;

GLOBAL ROUTINE DBG$REPORT_FREE =
!
! FUNCTION
!	Returns the number of bytes of free memory left in the memory pool.
!
! INPUTS
!	NONE
!
! OUTPUTS
!	VALUE	- The number of bytes of free memory left in the memory pool.
!

    BEGIN

    RETURN 4*DBG$FREE_MEM_LEFT();

    END;

GLOBAL ROUTINE DBG$NFREEZ(LENGTH, BLKPTR, MESSAGE_VECT) =
!
! FUNCTION
!	Allocates a memory block and returns its address to the caller.  This
!	routine does not generate a signal if no memory is available.
!
! INPUTS
!	LENGTH	- The desired size of the memory block in longwords.
!
!	BLKPTR	- The address of a longword location to receive the address
!		  of the returned memory block.
!
!	MESSAGE_VECT - The address of a longword location to receive the
!		  address of a "message vector" if the desired memory block
!		  cannot be allocated.
!
! OUTPUTS
!	BLKPTR	- The address of the desired memory block is returned to the
!		  BLKPTR location.
!
!	MESSAGE_VECT - The address of a signal message vector is returned to
!		  MESSAGE_VECT if no memory could be allocated.
!
!	VALUE	- The routine's value is STS$K_SUCCESS if the allocation was
!		  succesful or STS$K_SEVERE if the requested memory was not
!		  available.
!

    BEGIN

    MAP
	BLKPTR: REF VECTOR[1],		! Address of block pointer
	MESSAGE_VECT: REF VECTOR[1];	! Address of message vector pointer

    OWN
	DBG$MSG_VECT: VECTOR[3];	! Signalling message vector



    BLKPTR[0] = DBG$GET_MEMORY(.LENGTH, 0);
    IF .BLKPTR[0] NEQ 0 THEN RETURN STS$K_SUCCESS;
    DBG$MSG_VECT[0] = 2;
    DBG$MSG_VECT[1] = DBG$_NOFREE;
    DBG$MSG_VECT[2] = 0;
    MESSAGE_VECT[0] = DBG$MSG_VECT[0];
    RETURN STS$K_SEVERE;

    END;

GLOBAL ROUTINE DBG$NLIST_FREEZ(LENGTH, BLKPTR, MESSAGE_VECT) =
!
! FUNCTION
!	Allocate a "temporary" memory block and return its address.
!
! INPUTS
!	LENGTH	- The desired length of the memory block in longwords.
!
!	BLKPTR	- The address of a longword location to receive the address
!		  of the returned memory block.
!
!	MESSAGE_VECT - Obsolete parameter--ignored by this routine.
!
! OUTPUTS
!	BLKPTR	- The address of the allocated temporary memory block is
!		  stored in the BLKPTR location.
!
!	VALUE	- The value STS$K_SUCCESS is returned.
!

    BEGIN

    MAP
	BLKPTR: REF VECTOR[1];		! Address to receive block pointer



    BLKPTR[0] = DBG$GET_TEMPMEM(.LENGTH);
    RETURN STS$K_SUCCESS;

    END;

GLOBAL ROUTINE DBG$NFREERELEASE(BLKPTR, MESSAGE_VECT) =
!
! FUNCTION
!	This routine releases an allocated memory block to the memory pool.
!
! INPUTS
!	BLKPTR	- A pointer to the memory block to be released.
!
!	MESSAGE_VECT - Obsolete parameter--ignored by this routine.
!
! OUTPUTS
!	VALUE	- The value STS$K_SUCCESS is returned.
!

    BEGIN

    DBG$REL_MEMORY(.BLKPTR);
    RETURN STS$K_SUCCESS;

    END;

GLOBAL ROUTINE DBG$NRELEASE_ALL(MESSAGE_VECT) =
!
! FUNCTION
!	This routine releases all "temporary" memory blocks to the memory pool.
!
! INPUTS
!	MESSAGE_VECT - Obsolete parameter--ignored by this routine.
!
! OUTPUTS
!	VALUE	- The value STS$K_SUCCESS is returned.
!

    BEGIN

    DBG$REL_TEMPMEM();
    RETURN STS$K_SUCCESS;

    END;

GLOBAL ROUTINE DBG$NCOPY(SOURCE, TARGET, MESSAGE_VECT) =
!
! FUNCTION
!	This routine allocates a new memory block of sufficient size and copies
!	the contents of a specified block to that new block.  The new block is
!	a permanent (not temporary) memory block.
!
! INPUTS
!	SOURCE	- A pointer to the source block to be copied.
!
!	TARGET	- The address of a longword location to receive a pointer to
!		  the allocated block containing the new copy.
!
!	MESSAGE_VECT - Obsolete parameter--ignored by this routine.
!
! OUTPUTS
!	TARGET	- A pointer to the new memory block is returned to the TARGET
!		  location.
!
!	VALUE	- The value STS$K_SUCCESS is returned.
!

    BEGIN

    MAP
	TARGET: REF VECTOR[1];		! Address of pointer to new block



    TARGET[0] = DBG$COPY_MEMORY(.SOURCE);
    RETURN STS$K_SUCCESS;

    END;

GLOBAL ROUTINE DBG$NLIST_COPY(SOURCE, TARGET, MESSAGE_VECT) =
!
! FUNCTION
!	This routine allocates a "temporary" memory block of sufficient size and
!	copies the contents of a specified block to that new block.
!
! INPUTS
!	SOURCE	- A pointer to the source block to be copied.
!
!	TARGET	- The address of a longword location to receive a pointer to
!		  the allocated temporary block containing the new copy.
!
!	MESSAGE_VECT - Obsolete parameter--ignored by this routine.
!
! OUTPUTS
!	TARGET	- A pointer to the new memory block is returned to the TARGET
!		  location.
!
!	VALUE	- The value STS$K_SUCCESS is returned.
!

    BEGIN

    MAP
	TARGET: REF VECTOR[1];		! Address of pointer to new block



    TARGET[0] = DBG$COPY_TEMPMEM(.SOURCE);
    RETURN STS$K_SUCCESS;

    END;

END ELUDOM
