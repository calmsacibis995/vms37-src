MODULE DBGNEXCTE (IDENT = 'V03-000') =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	DEBUG
!
! ABSTRACT:
!
!	Contained in this module is the routine dbg$nexecute_cmd which uses the
!	literal value ot the verb node of the command execution tree to decide
!	which command execution network to invoke. In addition to this routine
!	which is the highest level command execution network, this module contains
!	several routines which are used by more than one command execution network
!	during command execution.
!
! ENVIRONMENT:	VAX/VMS
!
! AUTHOR:	David Plummer, CREATION DATE:	4/15/80
!
! VERSION:	V02.2-001
!
! MODIFIED BY:
!		Richard Title, Sep 12 1981	Made DBG$NEXECUTE_CMD recognize
!						the TYPE verb.
!		Richard Title, Oct 13 1981	Made DBG$NEXECUTE_CMD recognize
!						the SEARCH verb
!
!--

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
	DBG$NEXECUTE_CMD,			! Highest level execution network
	DBG$NCIS_ADD,				! Adds a node to the cis
	DBG$NCIS_OPENICF,			! Opens an icf node in the cis
	DBG$NCIS_REMOVE,			! Removes a node from the cis
	DBG$NGET_ADDRESS;			! Obtains an lvalue or rvalue for
						! an entity described by an addr exp desc
!
! REQUIRE FILES:
!

REQUIRE 'SRC$:DBGPROLOG.REQ';

REQUIRE 'SRC$:DBGGEN.REQ';

!
! MACROS
!

	! The following macro verifies entrance to, or exit form an icf

MACRO
	ICF_MESSAGE (PREFIX) =
	
	BEGIN
	BIND
		ENTER_PHRASE = UPLIT BYTE(8, %ASCII 'entering'),
		EXIT_PHRASE  = UPLIT BYTE(7, %ASCII 'exiting');

	LOCAL
		PHRASE;
	
	IF prefix EQL 1
	THEN
		phrase = enter_phrase
	ELSE
		phrase = exit_phrase;


	dbg$nout_info (dbg$_verifyicf, 3, .phrase, .fab_ptr[fab$b_fns], .fab_ptr[fab$l_fna]);	! Info message

	END % ;
	
!
! EQUATED SYMBOLS:
!
LITERAL
	
	! Legal verb literals
	!
	AT_SIGN_VERB 	= dbg$k_at_sign_verb,
	CALL_VERB 	= dbg$k_call_verb,
	CANCEL_VERB 	= dbg$k_cancel_verb,
	DEFINE_VERB 	= dbg$k_define_verb,
	DEPOSIT_VERB 	= dbg$k_deposit_verb,
	EVALUATE_VERB 	= dbg$k_evaluate_verb,
	EXAMINE_VERB 	= dbg$k_examine_verb,
	EXIT_VERB 	= dbg$k_exit_verb,
	GO_VERB 	= dbg$k_go_verb,
	SET_VERB 	= dbg$k_set_verb,
    	SEARCH_VERB 	= dbg$k_search_verb,
	SHOW_VERB 	= dbg$k_show_verb,
	STEP_VERB 	= dbg$k_step_verb,
    	TYPE_VERB	= dbg$k_type_verb,
	HELP_VERB 	= dbg$k_help_verb;

!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
	DBG$NEXECUTE_AT_SIGN,		! @ filespec execution network
	DBG$NEXECUTE_CANCEL,		! CANCEL command execution network
	DBG$NEXECUTE_DEPOSIT,		! DEPOSIT command execution network
	DBG$NEXECUTE_EVALUATE,		! EVALUATE command execution network
	DBG$NEXECUTE_EXAMINE,		! EXAMINE command execution network
	DBG$NEXECUTE_EXIT,		! EXIT command execution network
	DBG$NEXECUTE_GO,		! GO command execution network
	DBG$NEXECUTE_HELP,		! HELP command excution network
    	DBG$NEXECUTE_SEARCH,		! SEARCH command execution network
	DBG$NEXECUTE_SET,		! SET verb execution network
	DBG$NEXECUTE_SHOW,		! SHOW verb execution network
	DBG$NEXECUTE_STEP,		! STEP command execution network
    	DBG$NEXECUTE_TYPE,		! TYPE command execution network
	DBG$NOUT_INFO,			! Outputs an info message
	DBG$NMAKE_ARG_VECT,		! Constructs a message argument vector
	DBG$NFREEZ,			! Allocates non-listed dynamic storage
	DBG$NLIST_FREEZ,		! Allocates listed dynamic storage
	DBG$NFREERELEASE,		! Deallocates dynamic storage
	DBG$NGET_LVAL,			! Obtains a symbol's lvalue from a prim desc
	DBG$NGET_RVAL,			! Obtains a symbol's rvalue from a prim desc
	DBG$NGET_TYPE;			! Obtains a symbol's type form a prim desc

EXTERNAL
	DBG$GL_CISHEAD : REF cis_link,  ! Version 2 debugger head of command input stream
	DBG$GB_DEF_OUT : VECTOR [,BYTE]; ! Old debugger output vector control


GLOBAL ROUTINE DBG$NEXECUTE_CMD (VERB_NODE_PTR, MESSAGE_VECT) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	dbg$nexecute_cmd is the highest level command execution network. This
!	routine examines the value of the verb node in the command execution tree
!	to decide which DEBUG command is to be executed, and transfer to an
!	appropriate subnetwork to perform the associated semantic action.
!
! FORMAL PARAMETERS:
!
!	verb_node_ptr -		pointer to the head of the command execution tree
!
!	message_vect - 		address of a longword to contain the address of 
!				a message argument vector 
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	unsigned integer longword completion code
!
! COMPLETION CODES:
!
!	sts$k_severe (4) -	the specified command could not be executed
!
!	sts$k_success (1) -	the specified command was executed
!
! SIDE EFFECTS:
!
!	The semantic actions corresponding to the parsed DEBUG command are
!	performed. Various states of the debugger and user program may be
!	altered, and output may be displayed to the user and written to a log
!	file.
!
!--

    BEGIN

    LOCAL
	VERB_NODE : REF dbg$verb_node;		! command verb node

    ! Check for a command to execute
    !
    IF .verb_node_ptr EQL 0
    THEN 
	RETURN sts$k_success;


    ! Obtain the verb node and set the pointer to it to 0
    !
    verb_node = ..verb_node_ptr;
    .verb_node_ptr = 0;


    ! Now transfer control to the appropriate subnetwork and return
    !
    RETURN
	( CASE .verb_node [dbg$b_verb_literal] FROM dbg$k_first_verb TO dbg$k_last_verb
	    OF
	    SET

	    [at_sign_verb] :
		BEGIN
		dbg$nexecute_at_sign (.verb_node, .message_vect)
		END;

	    [cancel_verb] :
		BEGIN
		dbg$nexecute_cancel (.verb_node, .message_vect)
		END;

	    [deposit_verb] :
		BEGIN
		dbg$nexecute_deposit (.verb_node, .message_vect)
		END;

	    [evaluate_verb] :
		BEGIN
		dbg$nexecute_evaluate (.verb_node, .message_vect)
		END;

	    [examine_verb] :
		BEGIN
		dbg$nexecute_examine (.verb_node, .message_vect)
		END;

	    [exit_verb] :
		BEGIN
		dbg$nexecute_exit (.verb_node, .message_vect)
		END;

	    [go_verb] :
		BEGIN
		dbg$nexecute_go (.verb_node, .message_vect)
		END;

	    [help_verb] :
		BEGIN
		dbg$nexecute_help (.verb_node, .message_vect)
		END;

    	    [search_verb] :
    		BEGIN
    		dbg$nexecute_search (.verb_node, .message_vect)
    		END;

	    [show_verb] :
		BEGIN
		dbg$nexecute_show (.verb_node, .message_vect)
		END;

	    [set_verb] :
		BEGIN
		dbg$nexecute_set (.verb_node, .message_vect)
		END;

	    [step_verb] :
		BEGIN
		dbg$nexecute_step (.verb_node, .message_vect)
		END;

    	    [type_verb] :
    		BEGIN
    		dbg$nexecute_type(.verb_node, .message_vect)
    		END;

	    [INRANGE, OUTRANGE] :
		BEGIN
		.message_vect = dbg$nmake_arg_vect (dbg$_notimplan, 1,
						    UPLIT BYTE (17, 'full verb support'));
		sts$k_severe
		END;

	    TES );


    END;			! End of dbg$nexecute_cmd


GLOBAL ROUTINE DBG$NCIS_ADD (POINTER, LENGTH, TYPE, MESSAGE_VECT) =
!++
! FUNCTIONAL DESCRIPTION:
!	Adds a link to the command input stream
!
! FORMAL PARAMETERS:
! 	pointer	-	The address of either a buffer or a RAB to be placed
!			in the dsc$a_pointer field of the new link.
!	length	-	The length of the above buffer. (0 for RAB)
!	type	-	The type of the link to be added
!	message_vect -  address of a longword to contain address of message vector
!
! IMPLICIT INPUTS:
!	The head of the command input stream
!
! IMPLICIT OUTPUTS:
!	None
!
! ROUTINE VALUE:
!	
!	sts$k_success (1)  -  node created
!
!	sts$k_severe (4)  - node not created
!
! SIDE EFFECTS:
!	None
!--

    BEGIN
    LOCAL
	TEMP;		! Temporary pointer to head cis node

    ! Save current list head and allocate a new one
    !	
    temp = .dbg$gl_cishead ;
    IF NOT dbg$nfreez ((cis_elements + 3) / %UPVAL, dbg$gl_cishead, .message_vect)
    THEN
	RETURN sts$k_severe;

    dbg$gl_cishead [next_link] = .temp;
    dbg$gl_cishead [dsc$a_pointer] = .pointer;
    dbg$gl_cishead [dsc$b_dtype] = .type;
    dbg$gl_cishead [dsc$w_length] 	= .length;


    ! The fields "init_addr" and "init_length"  are used to determine
    ! how much storage to release for this buffer, since the pointer
    ! field is modified by the parser among others.
    !
    dbg$gl_cishead [init_addr]	= .pointer;

	
    ! If we are adding an input buffer add 1 byte to the length
    ! to be released because we allocated an extra one so we could
    ! guarantee a zero byte at the end of the string.
    !
    IF .type EQL cis_inpbuf
    THEN
	dbg$gl_cishead [init_length]	= .length + 1
    ELSE
	dbg$gl_cishead [init_length]	= .length;

    RETURN sts$k_success;

    END;	


GLOBAL ROUTINE DBG$NCIS_OPENICF (MESSAGE_VECT) =
!++
! FUNCTIONAL DESCRIPTION:
!	Routine is called when there is a RAB at the top of the command
!	input stream. It opens the related FAB and connects the RAB to it
!
! FORMAL PARAMETERS:
!
!	message_vect	- address of a longword to contain address of message vector
!
! IMPLICIT INPUTS:
!	The head of the command input stream
!
! IMPLICIT OUTPUTS:
!	
!	on failure, a message argument vector
!
! ROUTINE VALUE:
!	
!	sts$k_success (1) - action performed
!
!	sts$k_severe (4) - failure
!
! SIDE EFFECTS:
!	A FAB is opened and a RAB connected to it. If SET OUTPUT VERIFY, then
!	a message is generated indicating we are entering an indirect command file
!--
    BEGIN

    LOCAL
	STATUS,				! Holds RMS status code
	FAB_PTR : REF $FAB_DECL,	! File access block pointer
	RAB_PTR : REF $RAB_DECL;	! Record access block pointer

    ! Extract the related FAB from the RAB at the top of the cis
    !
    rab_ptr = .dbg$gl_cishead [dsc$a_pointer];
    fab_ptr = .rab_ptr [rab$l_fab];

    status = $OPEN (FAB=.fab_ptr);
    IF NOT .status
    THEN
	BEGIN

	LOCAL
		MSG_DESC : REF dbg$stg_desc;	! String descriptor for message

	IF NOT dbg$nlist_freez (2, msg_desc, .message_vect)
	THEN
	    RETURN sts$k_severe;

	msg_desc[dsc$w_length]  = .fab_ptr[fab$b_fns];
	msg_desc[dsc$a_pointer] = .fab_ptr[fab$l_fna];


	! Flag link for removal so we won't try to read from it again
	!
	dbg$gl_cishead[remove_flag] = 1;

	.message_vect = dbg$nmake_arg_vect (shr$_openin + dbg_fac_code,
					    1,
					   .msg_desc, .fab_ptr[fab$l_sts], .fab_ptr[fab$l_stv]);

	RETURN sts$k_severe;

	END;


    ! Connect the RAB to the just opened FAB
    !
    status = $CONNECT (RAB=.rab_ptr);
    IF NOT .status
    THEN
	BEGIN
	LOCAL
		MSG_DESC : REF dbg$stg_desc; ! string descriptor for message

	IF NOT dbg$nlist_freez (2, msg_desc, .message_vect)
	THEN
	    RETURN sts$k_severe;

	msg_desc[dsc$w_length]  = .fab_ptr[fab$b_fns];
	msg_desc[dsc$a_pointer] = .fab_ptr[fab$l_fna];


	! Flag link for removal so we won't try to read from it again
	!
	dbg$gl_cishead[remove_flag] = 1;

	.message_vect = dbg$nmake_arg_vect (shr$_openin + dbg_fac_code,
					    1, .msg_desc, 
					    .fab_ptr[fab$l_sts],
					    .fab_ptr[fab$l_stv]);

	RETURN sts$k_severe;

	END;


    ! Ckeck for verification message.
    !
    IF .dbg$gb_def_out [out_verify]
    THEN
	icf_message(1);

    RETURN sts$k_success;

    END;


GLOBAL ROUTINE DBG$NCIS_REMOVE (MESSAGE_VECT) =
!++
! FUNCTIONAL DECSRIPTION:
!	Removes the top link from the command input stream and delete the 
!	storage for it. If the link has additional dynamic storage related to
!	it, such as a FAB,RAB, input buffer etc., that storage is freed also.
!
! FORMAL PARAMETERS:
!	
!	message_vect	- the address of a longword to contain the address of
!			  a message argument vector
!
! IMPLICIT INPUTS:
!
!	The head of the command input stream
!
! IMPLICIT OUTPUTS:
!	
!	On error, a message argument vector is constructed and returned
!
! ROUTINE VALUE:
!	
!	sts$k_success (1) - success. actions performed.
!
!	sts$k_severe (4) - failure. error message argument vector constructed.
!
! SIDE EFFECTS:
!	The head of the command input stream is reset to what was the
!	"next" link before this routine was called. If SET OUTPUT VERIFY,
!	then a message is generated saying we are exiting the indirect
!	command file.
!--
    BEGIN

    LOCAL
	TEMP,		! Temporary pointer to cis node
	TYPE;		! cis node type

    ! If top link is an input buffer, release the storage for that buffer.
    !
    IF .dbg$gl_cishead [dsc$b_dtype] EQL cis_inpbuf
    THEN
	IF NOT dbg$nfreerelease (.dbg$gl_cishead [init_addr], .message_vect)
	THEN
	    RETURN sts$k_severe;

    ! If top link is a RAB, release the storage for the FAB, RAB and the
    ! buffer that holds the indirect command filespec.
    !
    IF .dbg$gl_cishead [dsc$b_dtype] EQL cis_rab
    THEN
	BEGIN
	LOCAL
	    FAB_PTR : REF $FAB_DECL, ! File access block pointer
	    RAB_PTR : REF $RAB_DECL; ! Record access block pointer

	rab_ptr = .dbg$gl_cishead [ dsc$a_pointer];
	fab_ptr = .rab_ptr [rab$l_fab];

	IF .dbg$gb_def_out [out_verify]
	THEN
	    icf_message(2);	! Exiting the icf

	! Release the filespec buffer. Remember this is a counted
	! string so the address and length have to be adjusted to 
	! include the count.
	!
	IF NOT dbg$nfreerelease( .fab_ptr[fab$l_fna]-1, .message_vect)
	THEN
	    RETURN sts$k_severe;


	! CLOSE and DISCONNECT
	!
	$CLOSE (FAB=.fab_ptr);

	IF NOT dbg$nfreerelease (.rab_ptr, .message_vect)
	THEN
	    RETURN sts$k_severe;

	IF NOT dbg$nfreerelease (.fab_ptr, .message_vect)
	THEN
	    RETURN sts$k_severe;
	END;


	! Remove the link from the command input stream
	!
	temp = .dbg$gl_cishead ;
	dbg$gl_cishead = .dbg$gl_cishead [next_link];


	! Now release the storage for the link itself 
	!
	IF NOT dbg$nfreerelease (.temp, .message_vect)
	THEN
	    RETURN sts$k_severe;

	RETURN sts$k_success;

    END;


GLOBAL ROUTINE DBG$NGET_ADDRESS (ADDR_EXP_DESC, ADDRESS, TYPE, MESSAGE_VECT) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine is called with an address expression descriptor, as returned
!	by the Address Expression Interpreter, to obtain the address bound to the
!	entity described by the addr exp desc. The addr exp desc may contain a
!	pointer to a primary descriptor, a pointer to a permanent symbol descriptor,
!	or the address itself within the value field of the addr exp desc. When
!	addr exp desc points to a primary descriptor, calls must be made to 
!	dbg$nget_type, and either dbg$nget_lvalue or dbg$nget_rvalue, depending
!	on the type of the primary descriptor. The address may be deduced directly
!	from a permanent symbol descriptor.
!
!	This routine also returns a type to be associated with the address it returns.
!	This may be type 'instruction', or type 'notype'.
!
!
! FORMAL PARAMETERS:
!
!	ADDR_EXP_DESC	- A longword containing the address of an address expression
!			  descriptor
!
!	ADDRESS		- The address of a quadword to contain the resulting
!			  byte address and bit offset
!
!	TYPE		- The address of a longword to contain the type of the address
!
!	MESSAGE_VECT	- The address of a longword to contain the address of a
!			  message argument vector upon detection of errors
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	On error, a message argument vector is constructed and returned.
!
! ROUTINE VALUE:
!
!	An unsigned integer longword completion code
!
! COMPLETION CODES:
!
!	STS$K_SUCCESS (1)	- Success. Address and type returned.
!
!	STS$K_SEVERE  (4)	- Failure. No type and/or address obtained.
!				  Message argument vector returned.
!
! SIDE EFFECTS:
!
!	NONE
!
!--
    BEGIN

    MAP
	addr_exp_desc : REF dbg$aed;

    ! Process the address expression descriptor based on it's type
    !
    CASE .addr_exp_desc [dbg$b_aed_type] FROM dbg$k_primary_desc TO dbg$k_notype
	OF
	SET

	[dbg$k_primary_desc] :
	    BEGIN

	    LOCAL
		LOCAL_TYPE;

	    ! First find the type of the primary descriptor
	    !
	    IF NOT dbg$nget_type (.addr_exp_desc [dbg$l_aed_value], local_type,
				  .message_vect)
	    THEN
		RETURN sts$k_severe;


	    ! Now get the lvalue or rvalue based on type
	    !
	    CASE .local_type FROM dbg$k_nc_instruction TO dbg$k_other
		OF
		SET

		[dbg$k_nc_instruction] :	! What we need is an rvalue
		    BEGIN
		    LOCAL 
			STATUS;			! Return status

		    .type = dbg$k_instruction;  ! Return the type of instruction
		    IF NOT(status = dbg$nget_rval (.addr_exp_desc [dbg$l_aed_value],
						   .address, .message_vect))
		    THEN
			BEGIN

			! If get_rval returns sts$k_warning, we have a label
			! or routine variable. This conflicts with the variable
			! type of dbg$k_nc_instruction.
			!
			IF .status EQL sts$k_warning
			THEN
			    SIGNAL (dbg$_debugbug, 1, dbg$k_type_conflict)
			ELSE
			    RETURN sts$k_severe;
			END;
		    END;

		[dbg$k_nc_other] : 	! We still need an rvalue
		    BEGIN
		    LOCAL
			STATUS;			! Holds return status

		    .type = dbg$k_notype;	! For out purposes, there is no type
		    IF NOT(status =  dbg$nget_rval (.addr_exp_desc [dbg$l_aed_value],
						    .address, .message_vect))
		    THEN
			BEGIN

			! Look for type conflict, as above.
			!
			IF .status EQL sts$k_warning
			THEN
			    SIGNAL (dbg$_debugbug, 1, dbg$k_type_conflict)
			ELSE
			    RETURN sts$k_severe;
			END;
		    END;

		[dbg$k_other]	:	! We need to try to get an lvalue
		    BEGIN
		    LOCAL
			status;

		    .type = dbg$k_notype;	! Again, no type for us
		    IF NOT (status = dbg$nget_lval (.addr_exp_desc [dbg$l_aed_value],
					    	    .address, .message_vect))
		    THEN
			BEGIN
			IF .status EQL sts$k_severe
			THEN
			    BEGIN
			    RETURN sts$k_severe;
			    END
			ELSE
			    BEGIN	! We'll take an rvalue, if there is one

			    IF NOT(status = dbg$nget_rval (.addr_exp_desc [dbg$l_aed_value],
						 	   .address, .message_vect))
			    THEN
				BEGIN

				! If warning, change type to instruction
				!
				IF .status EQL sts$k_warning
				THEN
				    .type = dbg$k_nc_instruction
				ELSE
				    RETURN sts$k_severe;
				END;
			    END;
		    	END;
		    END;

		[OUTRANGE] :		! We have an internal error
		    BEGIN
		    SIGNAL (dbg$_debugbug, 1, dbg$k_bad_spec_type);  ! NO RETURN
		    END;

		TES;
		
	    END;

	[dbg$k_perm_desc] :		! We have a permanent symbol descriptor
	    BEGIN
	    LOCAL
		PERM_DESC : REF dbg$permsd;

	    ! recover the permanent symbol descriptor
	    !
	    perm_desc = .addr_exp_desc [dbg$l_aed_value];
	    .type = dbg$k_notype;
	    .address = .perm_desc [dbg$l_permsd_addr];

	    END;

	[dbg$k_instruction,
	 dbg$k_notype] :		! The value contains the address
	    BEGIN
	    .type = .addr_exp_desc [dbg$b_aed_type];	! May be instruction or not
	    .address = .addr_exp_desc [dbg$l_aed_value];
	    END;

	[INRANGE,OUTRANGE] :		! We have an internal error - bad aed
	    BEGIN
	    SIGNAL (dbg$_debugbug, 1, dbg$k_bad_aed_field); ! NO RETURN
	    END;

	TES;

    RETURN sts$k_success;

    END;		! End of dbg$nget_address


END				!End of module
ELUDOM
