MODULE DBGNSDATA (IDENT = 'V03-000') =

BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:
!
!	DEBUG
!
! ABSTRACT:
!
!	This module consists of data structures and data structure management
!	routines that manage the user's session specific data during the
!	processing of debugger commands while under the control of the new
!	Command Line Interpreter. Specifically, this module keeps track of
!	scopes, types, override types, radicies, current location, and
!	last value.
!
! ENVIRONMENT:
!
!	VAX/VMS
!
! AUTHOR:
!
!	David Plummer
!
! CREATION DATE:
!
!	10-Jul-80
!
! VERSION:
!
!	V02.2-001
!
! MODIFIED BY:
!
!--

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE		
	DBG$NGET_RADIX,			   ! Returns the user specified or default radix
	DBG$NGET_TRANS_RADIX,		   ! Translates a default radix into the actual radix
	DBG$NGET_DEFAULT_TYPE 	: NOVALUE, ! Returns user set default type
	DBG$NGET_OVERRIDE_TYPE, 	   ! Returns user set override type
	DBG$NGET_MODE,			   ! Returns true if 'symbolic', false 
    					   ! if 'nosymbolic'
    	DBG$NREPORT_LAST_VAL,		   ! Returns the last value given to the
    					   ! user that was stored by the DEBUGGER
    	DBG$NREPORT_LAST_LOC,		   ! Returns the last location that was
    					   ! shown to the user by the DEBUGGER
	DBG$NSET_LAST_TYPLEN    : NOVALUE, ! Stores potential last loc type and length
	DBG$NGET_POTENTIAL_TYPE : NOVALUE, ! Returns the type associted with '.'
					   ! by the Address Expression Interpreter
	DBG$NSAVE_LAST_VAL 	: NOVALUE, ! Stores a value descriptor for last val
	DBG$NSAVE_LAST_LOC 	: NOVALUE, ! Stores an address expression desc for 
					   ! current location
	DBG$NCANCEL_LOC_AND_VAL : NOVALUE, ! Cancel last val and current loc for both
					   ! old and new debuggers
	DBG$NPERM_SYM_INT;		   ! Permanent symbol Interpreter


!
! REQUIRE FILES:
!

REQUIRE 'SRC$:DBGPROLOG.REQ';

REQUIRE 'SRC$:DBGGEN.REQ';

!
! OWN STORAGE:
!
OWN
	LAST_VALUE 	      : REF dbg$dhead INITIAL (0), ! Pointer to last value
	LAST_LOC   	      : REF dbg$aed INITIAL (0),   ! Pointer to last location
	POTENTIAL_LAST_TYPE   : INITIAL (-1),	 	   ! Possible type for current loc
	POTENTIAL_LAST_LENGTH : INITIAL (0),		   ! Possible length for current loc
	LAST_TYPE 	      : INITIAL (-1),		   ! Real type for current loc
	LAST_LENGTH 	      : INITIAL (0);		   ! Real length for current loc



!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
	DBG$NOUT_INFO,				! Outputs an informational message
	DBG$STA_LOCK_SYMID   : NOVALUE,		! Saves symids
	DBG$STA_UNLOCK_SYMID : NOVALUE,		! Releases symids
	DBG$NCOPY_DESC,				! Copies primary and value descriptors
	DBG$NFREE_DESC,				! Frees copied descriptors
	DBG$NGET_SYMID,				! Obtains symid list for descriptors
	DBG$NLIST_COPY,				! Copies to listed storage
	DBG$NMAKE_ARG_VECT,			! Constructs a message arguemnt vector
	DBG$SET_MOD_LVL,			! Sets mode pointer
	DBG$NFREEZ,				! Allocates non-listed dynamic storage
	DBG$NLIST_FREEZ,			! Allocates listed dynmaic storage
	DBG$NFREERELEASE,			! Releases non-listed dynamic storage
	DBG$NCOPY;				! Copies to non-listed storage

EXTERNAL
	DBG$GL_RUNFRAME 	: REF BLOCK [,BYTE],	! Pointer to user runframe
	DBG$GL_LAST_VAL,				! Old last value
	DBG$GL_LAST_LOC,				! Old last location
	DBG$GL_NEXT_LOC,				! Old next location
	DBG$GL_GBLTYP,					! Override type
	DBG$GW_GBLLNGTH		: WORD,			! Override length
	DBG$GL_DFLTTYP,					! Default type
	DBG$GW_DFLTLENG		: WORD,			! Default length
	DBG$GB_MOD_PTR 		: REF VECTOR [,BYTE],	! Mode structure
	DBG$GB_LANGUAGE		: BYTE;			! Language setting

GLOBAL ROUTINE DBG$NGET_RADIX =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Returns a literal corresponding to the user specified radix.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	DBG$GB_MOD_PTR	- Pointer to mode structure
!
!	DBG$GB_LANGUAGE - Language setting
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	An unsigned integer longword literal corresponding to user specified radix
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--
    BEGIN

    LOCAL
	RADIX,					! Radix to return
	MODE_LEVEL : REF VECTOR [,BYTE];	! Mode structure


    ! Recover the mode structure
    !
    mode_level = .dbg$gb_mod_ptr;


    ! Recover the radix
    !
    radix = .mode_level [mode_radix];


    ! If the specified radix is the same as the default radix for the present
    ! language, map it into dbg$k_default.
    !
    CASE .radix FROM binary_radix TO hex_radix
	OF
	SET

	[binary_radix] :
	    BEGIN
	    radix = dbg$k_binary;
	    END;

	[octal_radix] :
	    BEGIN
	    radix = dbg$k_octal;
	    END;

	[decimal_radix] :
	    BEGIN
	    IF .dbg$gb_language NEQ dbg$k_macro
			    AND
	       .dbg$gb_language NEQ dbg$k_bliss
	    THEN
		radix = dbg$k_default;
	    END;

	[hex_radix] :
	    BEGIN
	    radix = dbg$k_hex;
	    END;

	[INRANGE,OUTRANGE] :
	    BEGIN
	    0;
	    END;

	TES;

    RETURN .radix;

    END;			! End of dbg$nget_radix

GLOBAL ROUTINE DBG$NGET_TRANS_RADIX (RADIX) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Returns a translation of the default radix if dbg$k_default was suppplied.
!	Otherwise, simply returns the input value.
!
! FORMAL PARAMETERS:
!
!	RADIX	- A longword containing the radix literal.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	An unsigned integer longword corresponding to the translated radix literal.
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--
    BEGIN

    IF .radix EQL dbg$k_default
    THEN
	BEGIN
	IF .dbg$gb_language NEQ dbg$k_macro
			AND
	   .dbg$gb_language NEQ dbg$k_bliss
	THEN
	    RETURN dbg$k_decimal
	ELSE
	    RETURN dbg$k_hex;
	END
   ELSE
	BEGIN
	RETURN .radix;
	END;

    END; 		! End of dbg$nget_trans_radix


GLOBAL ROUTINE DBG$NGET_DEFAULT_TYPE (TYPE, LENGTH) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Returns user specified default type and length.
!
! FORMAL PARAMETERS:
!
!	TYPE	- The address of a longword to contain the default type
!
!	LENGTH	- The address of a longword to contain the default length
!
! IMPLICIT INPUTS:
!
!	DBG$GL_DFLTTYP		- Contains default type
!
!	DBG$GW_DFLTLENG		- Contains default length
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--
    BEGIN
    .type = .dbg$gl_dflttyp;
    .length = .dbg$gw_dfltleng;
    RETURN sts$k_success;
    END;


GLOBAL ROUTINE DBG$NGET_OVERRIDE_TYPE (TYPE, LENGTH) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Returns user specified override type and length, if set.
!
! FORMAL PARAMETERS:
!
!	TYPE	- The address of a longword to contain the override type
!
!	LENGTH	- The address of a longword to contain override length
!
! IMPLICIT INPUTS:
!
!	DBG$GL_GBLTYP	- Contains -1 (no override) or user specified override type
!
!	DBG$GW_GBLLNGTH - Contains override length
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	An unsigned integer longword completion code
!
! COMPLETION CODES:
!
!	STS$K_SUCCESS	- If an overrride type has been set
!
!	STS$K_ERROR	- No override set
!
! SIDE EFFECTS:
!
!	NONE
!
!--
    BEGIN

    IF .dbg$gl_gbltyp EQL -1
    THEN
	RETURN sts$k_error;

    .type = .dbg$gl_gbltyp;
    .length = .dbg$gw_gbllngth;

    RETURN sts$k_success;

    END;


GLOBAL ROUTINE DBG$NGET_MODE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine returns an indication of the user specified mode: that is,
!	TRUE if 'SYMBOLIC', FALSE if 'NOSYMBOLIC'
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	DBG$GB_MOD_PTR	- Pointer to current mode level
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	TRUE	- IF mode_symbols is true
!
!	FALSE	- IF mode_symbols is false
!
! SIDE EFFECTS:
!
!	NONE
!
!--
    BEGIN

    LOCAL
	SAVE_LEVEL,				! Holds old pointer	
	LEVEL_PTR : REF VECTOR [,BYTE];		! mode structure


    ! Save the present mode level
    !
    save_level= .dbg$gb_mod_ptr;


    ! Set the mode pointer to the user default level
    !
    dbg$set_mod_lvl (user_def_mode);


    ! Pick up the new pointer
    !
    level_ptr = .dbg$gb_mod_ptr;


    ! Reset the mode level
    !
    dbg$gb_mod_ptr = .save_level;

    RETURN (IF .level_ptr [mode_symbols] THEN true ELSE false);

    END;

GLOBAL ROUTINE DBG$NREPORT_LAST_VAL (VALUE_DESC, MESSAGE_VECT) =
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	Returns the last value given to the user that was stored by the
!	DEBUGGER.
!
! FORMAL PARAMETERS:
!
!	value_desc	-	The address of a longword to contain the
!				value descriptor last created to describe
!				the output to the user.
!
!	msg_vec		-	The address of a longword to contain the 
!				address of a message argument vector 
!				as described on page 4-119 of the
!				VAX/VMS system reference, volume 1A.
!
! IMPLICIT INPUTS:
!
!	LAST_VALUE	- Pointer to the stored last value descriptor
!
! IMPLICIT OUTPUTS:
!
!	If successful returns a value descriptor describing the last value
!	that the user saw. Otherwise this routine returns a message argument
!	vector describing the error message.
!
! ROUTINE VALUE:
!
!	An unsigned integer longword completion code.
!
! COMPLETION CODES:
!
!	STS$K_SUCCESS	(1)	- Successful return. The value descriptor 
!				  describing the last value that the user
!				  saw was returned.
!
!	STS$K_SEVERE	(4)	- Failure. No value descriptor could be found.
!				  The longword to contain the address of the
!				  Standard VAX Message Argument Vector is 
!				  filled in to point to a fatal error message.
!
! SIDE EFFECTS:
!
!	None.
!
!--
    BEGIN


    ! Check for not having a last value
    !
    IF .last_value EQLA 0
    THEN
	BEGIN
	.message_vect = dbg$nmake_arg_vect (dbg$_nolastval);
	RETURN sts$k_severe;
	END;


    ! Return the value descriptor
    !
    .value_desc = .last_value;

    RETURN sts$k_success;

    END;


GLOBAL ROUTINE DBG$NREPORT_LAST_LOC( ADDR_EXP_DESC, TYPE, LENGTH, MESSAGE_VECT) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	Returns the last location that was returned shown to the user
!	by the DEBUGGER.
!
! FORMAL PARAMETERS:
!
!	add_exp_desc	-	The address of a longword to contain 
!				the address of an Address Expression
!				Descriptor.
!
!	type		-	The address of a longword to contain
!				the type of the last location shown
!				to the user. This type may be one
!				of the following types:
!
!				dsc$k_dtype_b, dsc$k_dtype_w, dsc$k_dtype_l,
!				dsc$k_dtype_lu, dsc$k_dtype_t, dsc$k_dtype_zi
!
!	length		-	The address of a longword to contain
!				the length of the object output to the
!				user.
!
!	msg_vec		-	The address of a longword to contain
!				the address of a standard VAX Message
!				Argument Vector as described on page 
!				4-119 of the VAX/VMS system reference 
!				manual, volume 1A.
!
! IMPLICIT INPUTS:
!
!	LAST_LOC	- Pointer to the stored address expression descriptor
!
!	LAST_TYPE	- The type in which current loc was last displayed.
!
!	LAST_LENGTH	- The last length used for curren loc.
!
! IMPLICIT OUTPUTS:
!
!	If successful, this routine returns an Address Expression Descriptor
!	describing the last location that the user looked at and the associated
!	type and length of the object previously looked at by the user in the
!	DEBUGGER. 
!
!	If unsuccessful, the longword containing the address of the
!	Standard VAX Message Argument Vector for that buffer is updated
!	to contain the address of the error message buffer.
!
! ROUTINE VALUE:
!
!	STS$K_SUCCESS	(1)	- An Address Expression Descriptor describing
!				  the last location looked at by the user was
!				  found and is returned along with the 
!				  associated type and length of the object that
!				  was displayed.
!
!	STS$K_SEVERE	(4)	- Failure. No Address Expression Descriptor 
!				  describing the last location that the user
!				  looked at could be found. The longword
!				  containing the address of the Standard VAX
!				  Message Argument Vector is filled in to 
!				  point to a fatal error message.
!
! SIDE EFFECTS:
!
!	None.
!
!--


    BEGIN


    ! Check for no current location
    !
    IF .last_loc EQLA 0
    THEN
	BEGIN
	.message_vect = dbg$nmake_arg_vect (dbg$_nocurloc);
	RETURN sts$k_severe;
	END;
    

    ! Check to see if we have a permanent symbol descriptor. If we do, then
    ! we must get a new interpretation of the register
    !
    IF .last_loc [dbg$b_aed_type] EQL dbg$k_perm_desc
    THEN
	BEGIN
	LOCAL
	    PSD_PTR,
	    PERM_DESC : REF dbg$permsd;

  	perm_desc = .last_loc [dbg$l_aed_value];

	IF NOT dbg$nperm_sym_int (.perm_desc [dbg$b_permsd_id], psd_ptr, 0, .message_vect)
	THEN
	    RETURN sts$k_severe;


	! Release the old permanent symbol descriptor and set up the address
	! expression descriptor to point to the new one.
	!
	dbg$nfreerelease (.perm_desc, .message_vect);


	! Make a permanent copy of the new permanent symbol descriptor
	!
	IF NOT dbg$ncopy (.psd_ptr, perm_desc, .message_vect)
	THEN
	    RETURN sts$k_severe;

	last_loc [dbg$l_aed_value] = .perm_desc;
	END;


    ! Return the requested information
    !
    .addr_exp_desc = .last_loc;
    .type = .last_type;
    .length = .last_length;

    RETURN sts$k_success;

    END;	! End of dbg$nreport_last_loc


GLOBAL ROUTINE DBG$NSET_LAST_TYPLEN (TYPE, LENGTH) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Stores the values of the input parameters for possible use of typing
!	current location. The type for curren loc is returned by the AEI
!
! FORMAL PARAMETERS:
!
!	TYPE	-	A longword containing the value of a vax standard type.
!
!	LENGTH  -	A longword containing the length in bytes to be stored.
!
! IMPLICIT INPUTS:
!
!	POTENTIAL_LAST_TYPE	- A longword to contain the value of type
!
!	POTENTIAL_LAST_LENGTH   - A longword to contain the length
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NOVALUE
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--
    BEGIN


    ! Just tuck away the information
    !
    potential_last_type = .type;
    potential_last_length = .length;

    RETURN;

    END;	! End of dbg$nsave_last_typlen


GLOBAL ROUTINE DBG$NGET_POTENTIAL_TYPE (TYPE, LENGTH) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine returns the AEI set type to be associated with current location
!	in lieu of any overrides. This information is used to type raw addresses.
!
! FORMAL PARAMETERS:
!
!	TYPE	- The address of a longword to contain type information
!
!	LENGTH  - The address of a longword to contain the length (in bytes)
!
! IMPLICIT INPUTS:
!
!	potential_last_type	- a longword containing the type set by AEI
!
!	potential_last_length - a longword containing the length set by AEI
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NOVALUE
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--
    BEGIN


    ! Just return the requested information
    !
    .type = .potential_last_type;
    .length = .potential_last_length;

    RETURN;

    END;	! End of dbg$nget_potential_type


GLOBAL ROUTINE DBG$NSAVE_LAST_VAL (VALUE_DESC) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
! 	Saves the input parameter as the interpretation of
!	last value. A copy of the value descriptor is constructed from non-listed
!	storage.
!
!	Value descriptors may be volatile or non-volatile. This routine will
!	store only non-volatile value descriptors.
!
! FORMAL PARAMETERS:
!
!	VALUE_DESC	- A longword containing the address of a value descriptor
!			  to be stored for last val. If 0, then last val is
!			  canceled.
!
! IMPLICIT INPUTS:
!
!	LAST_VAL	- A longword to contain the address of the stored value
!			  descriptor
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NOVALUE
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Redefines last value.
!
!--
    BEGIN

    MAP VALUE_DESC : REF dbg$dhead;

    LOCAL
	DUMMY,			! Dummy parameter
	OLD_SYMID_LIST,		! Symid list for old '\'	
	NEW_SYMID_LIST,		! Symid list for new '\'
	MESSAGE_VECT,		! Holds address of message argument vector
	VALUE_PTR;		! Temporary pointer to value descriptor.

    old_symid_list = 0;
    new_symid_list = 0;
    value_ptr = 0;


    ! Check for non-null input
    !
    IF .value_desc NEQA 0
    THEN
	BEGIN

	! Check for a volatile value descriptor.
	!
    	IF .value_desc [dbg$b_dhead_type] EQL dbg$k_v_value_desc
    	THEN
	    BEGIN
	    dbg$nout_info (dbg$_nonewval);
	    END
        ELSE
	    BEGIN

    	    ! We have a non-volatile value descriptor. Obtain the new symid_list.
	    !
	    IF NOT dbg$nget_symid (.value_desc, new_symid_list, dummy)
	    THEN
	        BEGIN

		! Once again, can't save new '\'.
		!
	    	dbg$nout_info (dbg$_nonewval);
		END

	    ELSE
		BEGIN
	
		! Try to copy the value descriptor
		!
		IF NOT dbg$ncopy_desc (.value_desc, value_ptr, dummy)
		THEN
	    	    BEGIN

	    	    ! Can't save '\'
		    !
	    	    dbg$nout_info (dbg$_nonewval);
		    value_ptr = 0;
		    END
		ELSE
		    BEGIN

		    ! The descriptor has been copied. Lock the symids.
		    !
		    dbg$sta_lock_symid (.new_symid_list);
		    END;
		END;
	    END;
	END;


    ! The new descriptor has been copied and saved. Delete the old descriptor and
    ! unlock symids
    !
    IF .last_value NEQA 0
    THEN
	BEGIN

	! Obtain the symids for '\' and unlock them.
	!
	IF dbg$nget_symid (.last_value, old_symid_list, dummy)
	THEN
	    dbg$sta_unlock_symid (.old_symid_list);


	! Release the storage
	!
	dbg$nfree_desc (.last_value, dummy);
	END;

    last_value = .value_ptr;

    RETURN;

    END;		! End of dbg$nsave_last_val


GLOBAL ROUTINE DBG$NSAVE_LAST_LOC (ADDR_EXP_DESC, OVERRIDE_TYPE, OVERRIDE_LENGTH) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Makes an unlisted copy of an address expression descriptor to store as
!	the interpretation of current location. If override type and length are
!	supplied, current location is typed accordingly.
!
! FORMAL PARAMETERS:
!
!	ADDR_EXP_DESC	- A longword containing the address of an address expression
!			  descriptor. If 0, then current loc is canceled.
!
!	OVERRIDE_TYPE   - A longword containing a vax standard type with which to
!			  type current location. 
!
!	OVERRIDE_LENGTH - A longword containg an integer representing the override
!			  length to be associated with current location.
!
! IMPLICIT INPUTS:
!
!	LAST_LOC	- A longword to contain the address of an addr exp desc
!			  for current location.
!
!	LAST_TYPE	- A longword to contain the override type for current loc
!
!	POTENTIAL_LAST_TYPE - A longword containing a possible type for current loc.
!
!	LAST_LENGTH	- A longword to contain the override length for current loc
!
!	POTENTIAL_LAST_LENGTH - A longword containing a potential last length for curren loc
!	
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NOVALUE
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Redefines current location.
!
!--
    BEGIN

    MAP
	ADDR_EXP_DESC 	   : REF dbg$aed;

    LOCAL
	DUMMY,					! Dummy parameter
	OLD_SYMID_LIST,				! Pointer to old symid list
	NEW_SYMID_LIST,				! Pointer to new symid list
	SAVE_ADDR_EXP_DESC : REF dbg$aed;	! The address expression descriptor to save

    old_symid_list = 0;
    new_symid_list = 0;
    save_addr_exp_desc = 0;


    ! Check for null input
    !
    IF .addr_exp_desc NEQA 0
    THEN
	BEGIN
	
    	! When this routine is called, an address expression descriptor is supplied
    	! to become the definition of current loc. If a type and length (not EQL -1)
    	! are supplied, we type current loc according to these parameters. Otherwise,
    	! we use potential_type and potential_loc to type current loc.
	!
	IF .override_type EQL -1
	           OR
           .override_length EQL -1
    	THEN
	    BEGIN
	    last_type = .potential_last_type;
	    last_length = .potential_last_length;
	    END
    	ELSE
	    BEGIN
	    last_type = .override_type;
	    last_length = .override_length;
	    END;


    	! Current location has been typed. Now a copy of the address expression
	! descriptor, and any descriptors it points to must be made. First make a
    	! copy of the address expression descriptor.
	!
    	IF NOT dbg$ncopy (.addr_exp_desc, save_addr_exp_desc, dummy)
        THEN
	    BEGIN

	    ! Can't make the save
	    !
	    dbg$nout_info (dbg$_nonewcur);
	    save_addr_exp_desc = 0;
	    END

	ELSE
	    BEGIN

 	    ! Make copies of any descriptors pointed to by the address expression descriptor
    	    !
    	    CASE .addr_exp_desc [dbg$b_aed_type] FROM dbg$k_primary_desc TO dbg$k_notype
		OF
		SET

		[dbg$k_primary_desc] :
	    	    BEGIN
		    LOCAL
		        NEW_PRIM : REF dbg$dhead;
	    

	    	    ! Have to copy the primary descriptor and notify the symbol table that
	    	    ! we're hanging on to a symid.
		    !
	    	    IF NOT dbg$nget_symid (.addr_exp_desc [dbg$l_aed_value], new_symid_list, dummy)
	    	    THEN
		        BEGIN

		        ! Can't save new '.'
			!
		        dbg$nout_info (dbg$_nonewcur);
		        dbg$nfreerelease (.save_addr_exp_desc, dummy);
		        save_addr_exp_desc = 0;
		        END

	    	    ELSE
		        BEGIN
		        IF NOT dbg$ncopy_desc (.addr_exp_desc [dbg$l_aed_value], new_prim, dummy)
	    	        THEN
			    BEGIN
			    dbg$nout_info (dbg$_nonewcur);
			    dbg$nfreerelease (.save_addr_exp_desc, dummy);
			    save_addr_exp_desc = 0;
			    END
		        ELSE
			    BEGIN

	    		    ! Notify the symbol table to hang on to the new symids
			    !
			    dbg$sta_lock_symid (.new_symid_list);


	    		    ! point the address expression to the permanent primary descriptor
			    !
	    		    save_addr_exp_desc [dbg$l_aed_value] = .new_prim;
	    		    END;
		        END;
		    END;

	    	[dbg$k_perm_desc] :
	    	    BEGIN

	    	    ! Have to make a non-listed copy of the permanent symbol descriptor.
		    !
	    	    IF NOT dbg$ncopy (.addr_exp_desc [dbg$l_aed_value],
			              save_addr_exp_desc [dbg$l_aed_value],
			              dummy)
	    	    THEN
		        BEGIN

		        ! Can't save '.'
			!
		        dbg$nout_info (dbg$_nonewcur);
		        dbg$nfreerelease (.save_addr_exp_desc, dummy);
		        save_addr_exp_desc = 0;

		        END;
	            END;

	        [INRANGE,OUTRANGE] :
	    	    BEGIN

	    	    ! Not pointing to any descriptors. All the work has been done.
		    !
	    	    0;

	    	    END;

	        TES;
	    END;
	END
    ELSE
	BEGIN
	save_addr_exp_desc = 0;
	END;

    
    ! Release storage and symids for the old address expression descriptor
    !
    IF .last_loc NEQA 0
    THEN
	BEGIN
	CASE .last_loc [dbg$b_aed_type] FROM dbg$k_primary_desc TO dbg$k_notype
	    OF
	    SET

	    [dbg$k_primary_desc] :
	    	BEGIN
	   	LOCAL
		    OLD_PRIM_DESC : REF dbg$dhead;

	    	old_prim_desc = .last_loc [dbg$l_aed_value];  ! Get the primary desc


		! Extract the symids
		!
		IF dbg$nget_symid (.old_prim_desc, old_symid_list, dummy)
		THEN
		    dbg$sta_unlock_symid (.old_symid_list);

	    	! Release the storage for the primary descriptor
		!
	    	dbg$nfree_desc (.old_prim_desc, dummy);

	    	END;

	    [dbg$k_perm_desc] :
		BEGIN

		! Just release the storage for the permanent symbol descriptor
		!
	        dbg$nfreerelease (.last_loc [dbg$l_aed_value], dummy);

		END;

	    [INRANGE,OUTRANGE] :
		BEGIN

		! No extra storage to release
		!
		0;

		END;

	    TES;


	! Release the storage for the address expression descriptor itself and
	! set current loc to nil
	!
	dbg$nfreerelease (.last_loc, dummy);

	END;


    ! Save the new address expression descriptor
    !
    IF .save_addr_exp_desc NEQA 0
    THEN
	last_loc = .save_addr_exp_desc
    ELSE
	last_loc = 0;

    RETURN;

    END;	! End of dbg$nsave_last_loc


GLOBAL ROUTINE DBG$NCANCEL_LOC_AND_VAL : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	When changing languages, last val and current location go away. This
!	routine does this.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	dbg$gl_last_val		- Old debugger last value
!
!	dbg$gl_last_loc		- Old debugger last location (current loc)
!
!	dbg$gl_next_loc		- Old debugger next location ( <CR> )
!
!	last_value		- Pointer to value descriptor for last val
!
!	last_loc		- Pointer to addr exp desc for current loc
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NOVALUE
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	The meaning of current location and last value is erased for the old and
!	new debuggers.
!
!--
    BEGIN


    ! Wipe out the pseudos for the old debugger
    !
    dbg$gl_last_val = 0;
    dbg$gl_last_loc = 0;
    dbg$gl_next_loc = 0;


    ! Wipe out the pseudos for the new debugger
    !
    dbg$nsave_last_val (0);
    dbg$nsave_last_loc (0, dbg$k_notype, 0);

    RETURN;

    END;	! End to dbg$ncancel_loc_and_val


GLOBAL ROUTINE DBG$NPERM_SYM_INT (REG_NUM, PERM_SYM_PTR, PATH_NAME_VECT, MESSAGE_VECT) =

!++
! FUNCTIONAL DESCRIPTION:
!
!       A kernel DEBUG routine to obtain a permanent symbol descriptor for the
!       DEBUG permanent symbols R0-R11, AP, PC, FP, and PSL.
!
!       A permanent symbol descriptor contains information which:
!       
!       1) - identifies the symbol by register number
!
!       2) - contains a virtual address which represents the location at which
!            the debugger has stored the value of the register
!
! FORMAL PARAMETERS:
!
!       reg_num         - A longword containing an unsigned integer between 0 and 16,
!                         inclusive. This integer identifies the permanent symbol
!                         to be found according to the following code:
!
!                          dbg$k_r0 (200)       - R0
!                         
!                          dbg$k_r1 (201)       - R1
!
!                          dbg$k_r2 (202)       - R2
!
!                          dbg$k_r3 (203)       - R3
!
!                          dbg$k_r3 (204)       - R4
!
!                          dbg$k_r5 (205)       - R5
!
!                          dbg$k_r6 (206)       - R6
!
!                          dbg$k_r7 (207)       - R7
!                         
!                          dbg$k_r8 (208)       - R8
!
!                          dbg$k_r9 (209)       - R9
!
!                          dbg$k_r10 (210)      - R10
!
!                          dbg$k_r11 (211)      - R11
!
!                          dbg$k_ap (212)       - R12 (AP)
!
!                          dbg$k_fp (213)       - R13 (FP)
!
!                          dbg$k_sp (214)       - R14 (SP)
!
!                          dbg$k_pc (215)       - R15 (PC)
!
!                          dbg$k_psl (216)      - PSL
!
!       perm_sym_ptr   - The address of a longword to contain the address of a
!                         permanent symbol descriptor upon return. This permanent
!                         symbol descriptor consists of nine byte block. The first
!                         byte contains the register id number as input in reg_num.
!                         The next four bytes contain the address of the stored
!                         value of the register. The next four bytes are reserved
!                         for future use and will be set to 0 in this release.
!
!       path_name_vect - Not used in this release. Should be a longword containing
!                         0. A future release of DEBUG will allow pathname qual-
!                         ification of registers.
!
!       message_vect    - The address of a longword to contain the address of a
!                         message argument vector as described on page 4-119 of
!                         the VAX/VMS system reference, volume 1A.
!
! IMPLICIT INPUTS:
!
!       NONE
!
! IMPLICIT OUTPUTS:
!
!       In case of a success return, a permanent symbol descriptor is constructed
!       and returned.
!
!       In case of a severe error return, a message argument vector is constructed
!       and returned.
!
! ROUTINE VALUE:
!
!       An usigned integer longword completion code
!
! COMPLETION CODES:
!
!       STS$K_SUCCESS (1) - Success. Permanent symbol descriptor constructed
!                            and returned.
!
!       STS$K_SEVERE  (4) - Failure. Permanent symbol not interpreted. Message
!                            argument vector constructed and returned.
!
! SIDE EFFECTS:
!
!       NONE
!
!--
    BEGIN

    LOCAL
	PERM_SYM_DESC : REF dbg$permsd;


    ! Create storage for the permanent symbol descriptor
    !
    IF NOT dbg$nlist_freez (dbg$k_permsd_size, perm_sym_desc, .message_vect)
    THEN
	RETURN sts$k_severe;


    ! copy the register id over to the permanent symbols descriptor and make sure
    ! that the pathname pointer field is 0.
    !
    perm_sym_desc [dbg$b_permsd_id] = .reg_num;
    perm_sym_desc [dbg$l_permsd_path] = 0;


    ! Obtain the address of the register, keying off the id number.
    !
    perm_sym_desc [dbg$l_permsd_addr] =

	(CASE .reg_num FROM dbg$k_r0 TO dbg$k_psl
	    OF
	    SET

	    [dbg$k_r0] 		: dbg$gl_runframe [dbg$l_user_r0];
	    [dbg$k_r1] 		: dbg$gl_runframe [dbg$l_user_r1];
	    [dbg$k_r2] 		: dbg$gl_runframe [dbg$l_user_r2];
	    [dbg$k_r3] 		: dbg$gl_runframe [dbg$l_user_r3];
	    [dbg$k_r4] 		: dbg$gl_runframe [dbg$l_user_r4];
	    [dbg$k_r5] 		: dbg$gl_runframe [dbg$l_user_r5];
	    [dbg$k_r6] 		: dbg$gl_runframe [dbg$l_user_r6];
	    [dbg$k_r7] 		: dbg$gl_runframe [dbg$l_user_r7];
	    [dbg$k_r8] 		: dbg$gl_runframe [dbg$l_user_r8];
	    [dbg$k_r9] 		: dbg$gl_runframe [dbg$l_user_r9];
	    [dbg$k_r10] 	: dbg$gl_runframe [dbg$l_user_r10];
	    [dbg$k_r11] 	: dbg$gl_runframe [dbg$l_user_r11];
	    [dbg$k_ap] 		: dbg$gl_runframe [dbg$l_user_ap];
	    [dbg$k_fp] 		: dbg$gl_runframe [dbg$l_user_fp];
	    [dbg$k_sp] 		: dbg$gl_runframe [dbg$l_user_sp];
	    [dbg$k_pc] 		: dbg$gl_runframe [dbg$l_user_pc];
	    [dbg$k_psl] 	: dbg$gl_runframe [dbg$l_user_psl];

	    [INRANGE,OUTRANGE] 	: SIGNAL (dbg$_debugbug, 1, dbg$k_bad_reg_id);
	    TES);

    .perm_sym_ptr = .perm_sym_desc;

    RETURN sts$k_success;

    END;		! End of dbg$nperm_sym_int

END				!End of module
ELUDOM
