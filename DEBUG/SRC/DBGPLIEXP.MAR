;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
	.title dbgpliexp
	.ident 'V03-000'
;GLOBAL ROUTINE DBG$NPLI_EXP_INT (input_desc, radix, value_ptr, message_vect) =
;++
; FUNCTIONAL DESCRIPTION:
;
;       Evaluates source language expressions, with certain DEBUG extensions, 
;       which occur in DEBUG commands. Expressions are defined to be source
;       language constructs which may appear on the right hand side of an
;       assignment statement. A language specific value descriptor is con-
;       structed to describe the value of the expression. This value descriptor
;       must be marked (within the language independent header portion)
;       as to whether the value descriptor is to be considered volatile or
;       non-volatile. This is done by writing the value of dbg$k_value_desc
;       (non-volatile) or dbg$k_v_value_desc (volatile) into the type field.
;
;       Non-volatile value descriptors will be stored to represent the DEBUG
;       psuedo symbol '\', 'last value'. Volatile value descriptors will not.
;
;       A maximal initial substring of the input string is parsed. The input
;       string descriptor is updated to reflect one character beyond the last
;       character accepted.
;
;       DEBUG extensions to source language expressions include the use of the
;       following as expression operands:
;
;       1) DEBUG permanent symbols R0-R11, AP, SP, PC, PSL. If the language
;          allows explicit operations on registers, then the use of these
;	  symbols overrides user defined symbolic references with the
;	  same name, unless an explicit pathname is specified such as
;	  MODULE\ROUTINE\R5. If the source language does not allow explicit
;	  operations on registers, then a register name must be preceeded with
;	  '%', such as %R5, to be re-cognized. Otherwise the symbol wil be
;	  assumed to be a user defined symbolic reference. 
;
;       2) The DEBUG pseudo-symbol '\'. This symbol stands for 'last value'
;          as represented by the stored value descriptor corresponding to the
;          value of the last expression EVALUATEd. The 'last value' value
;	   descriptor will be obtained by a call to dbg$nget_lastval.
;
;          Note that other DEBUG pseudo-symbols are NOT allowed in an
;	   expression.
;
; FORMAL PARAMETERS:
;
;       input_desc -    the address of a VAX standard string descriptor which
;                       describes the input string
;
;       radix       -   a longword containing an unsigned integer encoding of
;			the radix to be used in the evaluation of numeric
;			literals appearing in the input string as follows:
;
;               dbg$k_default (1)       - source language default radix
;
;               dbg$k_binary (2)        - binary
;
;               dbg$k_octal (8)         - octal
;
;               dbg$k_decimal (10)      - decimal
;
;               dbg$k_hex (16)          - hexadecimal
;
;                       Note that a string purporting to be a hexadecimal
;			numeric literal is required to have a leading '0',
;			such as '0A14' to differentiate the numeric string
;			from a symbolic reference.
;
;       value_ptr  -    the address of a longword to contain the address of a
;                       language specific value descriptor upon return
;
;       message_vect -  the address of a longword to contain the address of a
;                       message argument vector as described on page 4-119 of
;                       the VAX/VMS system reference manual, volume 1A
;
; IMPLICIT INPUTS:
;
;       NONE
;
; IMPLICIT OUTPUTS:
;
;       In case of a success or warning return, a language specific value 
;       descriptor is constructed from dynamic storage. Value_ptr is set to
;       contain the address of this descriptor.
;
;       In case of a severe error return, a message argument vector is 
;       constructed from dynamic storage and message_vect is set to contain the
;       beginning address of the vector.
;
; ROUTINE VALUE:
;
;       unsigned integer longword completion code
;
; COMPLETION CODES:
;
;       STS$K_SUCCESS (1) -     A value descriptor was constructed and 
;                               returned. No unfamilar input was encountered.
;                               Input string exhausted.
;
;       STS$K_WARNING (0) -     A value descriptor was constructed and
;                               returned. Unfamiliar input encountered. 
;
;                               Note that some DEBUG commands allow expression
;                               lists where each expression is seperated by
;                               commas. In these cases (or whenever unfamilar
;				input is encountered), this return should be 
;                               used.
;
;       STS$K_SEVERE  (4) -     No value descriptor constructed. Message ar-
;                               gument vector constructed and returned. Fatal
;                               syntax or semantic error encountered. No input 
;                               accepted.
;
;                               Note that the input string descriptor fields
;                               should be returned to their initial (on input)
;                               values even though some characters (but not a
;                               complete primary string) have been accepted.
;       
; SIDE EFFECTS:
;
;       Informational messages such as number or string truncation may be 
;       issued by this routine.
;
;       The VAX standard string descriptor which describes the input string
;       is updated to reflect one character beyond the last character accepted.
;
;--
;
	$dscdef
	$stsdef
	$dbgdef
	$dbglib
	$plidef
ap_input_desc	=	4		;parameter offset - input desc.ap_radix	=	8			;parameter offset - radix
ap_radix	=	8		;parameter offset - radix
ap_value_ptr	=	12		;parameter offset - value ptr.
ap_message_vect	=	16		;parameter offset - message
;
;local storage offsets
;
hot_tree_code	=	0		;return from make_hot_tree. Tells
					;if more on input line
tree_pointer	=	4		;pointer to head node of tree
local_storage_size =	8		;**warning** make this first free byte
	.psect	dbg$code,exe,nowrt,long,pic,shr
	.entry	dbg$npli_exp_int,^m<r2,r3,r4,r5>
;
;	r11	address of input string descriptor
;	r10	address of local storage
;
	movl	ap_input_desc(ap),r11	;address of input descriptor
;
;create work area for local values
;
	moval	-<local_storage_size>(sp),sp ;get local storage
	movl	sp,r10			;pointer to local storage
;
;initialize local storage
;
	pushl	ap_message_vect(ap)	;pass along message vector
	pushal	hot_tree_code(r10)	;for code from make tree
	pushl	#pli_node_mode$k_pli	;tree is to be a pli expression tree
	pushal	tree_pointer(r10)	;tree head node pointer
	pushl	ap_radix(ap)		;value of the radix
	pushl	r11			;input string descriptor
	calls	#6,pli_make_tree	;make the expression tree
	blbs	r0,100$			;branch if ok
	brw	severe_exit		;error detected when makeing tree
100$:					;validate the tree
	pushl	ap_message_vect(ap)	;pass along message vector pointer
	pushl	tree_pointer(r10)	;pointer to head node
	calls	#2,pli_validate_tree	;validate the tree
	blbs	r0,200$			;branch if ok
	ret				;
200$:					;convert hot tree to value descriptor
	pushl	ap_message_vect(ap)	;parameter - message vector
	pushl	ap_value_ptr(ap)	;parameter - vd pointer
	pushl	tree_pointer(r10)	;parameter - hot tree head
	pushl	tree_pointer(r10)	;parameter - subtree to convert
	calls	#4,pli_hot_to_vd	;convert hot tree to value desc.
	blbs	r0,300$			;branch if ok
	ret				;return with his error code
300$:	movl	hot_tree_code(r10),r0	;return code from make_tree
	ret				;
;
;***************************************************************************
;*                                                                         *
;*    error processing                                                     *
;*                                                                         *
;***************************************************************************
;
;
;set up message vector and return with error code = sts$k_severe
;enter with arguments stacked for dbg$nmake_arg_vect and
;r0 = number of such arguments
;
setup_severe:				;
	calls	r0,dbg$nmake_arg_vect	;unexpected end of command line
	movl	r0,@ap_message_vect(ap)	;update pointer to message vector
	brw	severe_exit		;update descriptor and return
;
;***************************************************************************
;*                                                                         *
;*   exit processing                                                       *
;*                                                                         *
;***************************************************************************
;
ok_exit: 				;
	movl	#sts$k_success,r0	;success return code
	ret				;
warning_exit:				;
	movl	#sts$k_warning,r0	;seems to be more, e.g. a ","
	ret				;
error_exit:				;
	movl	#sts$k_error,r0		;1st character is illegal
	ret				;
severe_exit:				;
	movl	#sts$k_severe,r0	;error in middle of parse
	ret				;

	.end
