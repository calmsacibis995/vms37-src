;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
	.title		pliwork2
	$dscdef
	$stsdef
	$dbgdef
	$dbglib
	$plidef
	$dstrecrds
	$chfdef
	.subtitle	pli_integer_to_string_size
	.page
;
;****************************************************************
;*	pli_integer_to_string_size				*
;****************************************************************
;
;	input: r1 contains the value of integer to size
;	output: r0 contains number of bytes to hold ascii representation
;
pli_integer_to_string_size:		;
	movl	#1,r0			;at least one byte required
	tstl	r1			;integer to be sized
	bneq	20$			;branch if not zero
	rsb				;return with size in bytes
20$:	bgtr	40$			;branch if positive
30$:	incl	r0			;add to byte counted
40$:	divl2	#10,r1			;remove low order digit
	bneq	30$			;branch (continue) if not zero	
	rsb				;return with count

	.subtitle	pli_struct_name_size
;
;****************************************************************
;*	pli_struct_name_size					*
;****************************************************************
;
; ***WARNING*** this routine assumes that the symid context has been set
;
;	register	use
;	r11		name node pointer
;	r10		structure descriptor pointer
;	r9		subscript vector pointer
;	r8		optional type block pointer
;	r7		pointer to array descriptor
;	r6		pn pointer
;	r5		pointer to pn pointers to counted strings
;	r4		dimension index
;	r2		running byte sum
;	on exit:r0 contains the number of bytes required by
;		the ascii representation of the structure, including
;		"." separators, and "(", ",", ")" for arrays of structures.
;		It includes "\" separators for module qualifiers, names,
;		and strings which represent subscript values.
;
	.entry	pli_struct_name_size,^m<r2,r3,r4,r5,r6,r7,r8,r9,r10,r11>
ap_name_node_ptr=	4
ap_pn_ptr	=	8
	clrl	r2			;zero byte count
	movl	ap_name_node_ptr(ap),r11 ;point to name node
	movl	pli_node_nam_vector(r11),r9 ;point to first vector element
	movl	pli_node_nam_desc_ptr(r11),r10 ;point to first structure desc
	movl	ap_pn_ptr(ap),r6	;point to pathname descriptor

	movzbl	pth$b_totcnt(r6),r0	;total pathname elements
	moval	pth$a_pathvector(r6)[r0],r5 ;point past last pointer in pn
20$:					;
	tstl	pli_struct_desc_flink(r10) ;last structure descriptor
	beql	1000$			;branch if last structure descriptor
	movl	-(r5),r0		;point to counted string
	movzbl	(r0),r0			;convert byte count
	addl2	r0,r2			;add to running sum
	incl	r2			;add separator count
30$:	cmpl	#rst$k_type_array,pli_struct_desc_fcode(r10) ;an array?
	bneq	100$			;branch if not an array
	incl	r2			;count for "("
	movl	pli_struct_desc$a_opt(r10),r8 ;point to optional type block
	movl	pli_struc_opt$a_desc(r8),r7 ;point to array descriptor
	movzbl	dsc$b_dimct(r7),r4	;number of dimensions
	addl2	r4,r2			;subscript's following "," or ")"
40$:	movl	(r9)+,r1		;next subscript value
	bsbb	pli_integer_to_string_size ;convert to required number of bytes
					;for the ascii representation
	addl2	r0,r2			;add to running total
	sobgtr	r4,40$			;repeat for all subscripts
100$:	movl	pli_struct_desc_flink(r10),r10 ;point to next structure desc.
	bneq	20$			;continue if more present (branch)
	movl	r2,r0			;return value
	ret				;
;last structure element, include count for "real" pathname part of pn
1000$:	movb	pth$b_totcnt(r6),r3	;save total count of pathname desc.
	cmpb	r3,pth$b_pathcnt(r6)	;any structures?
	bneq	1100$			;branch if structures
;
;no structures so there is no separator between 2nd structure element of name
;and the "pathname+1st structure" element of name
;
	decl	r2			;adjust count for separator
1100$:	movb	pth$b_pathcnt(r6),pth$b_totcnt(r6) ;dummy up total count
	pushal	-(sp)			;address of pointer to counted string
	pushl	r6			;address of pathname descriptor
	calls	#2,dbg$npathdesc_to_cs	;convert pathname to counted string
					;using debug kernel routine
	movb	r3,pth$b_totcnt(r6)	;restore total count if structure
	movl	(sp)+,r0		;point to counted string
	movzbl	(r0),r0			;get byte count
	addl2	r0,r2			;add to running total
	incl	r2			;separator
	brw	30$			;see if any array is involved


	.subtitle	pli_integer_to_cs
;
;****************************************************************
;	pli_integer_to_cs					*
;****************************************************************
;
;	input:	ap_integer_ptr = pointer to longword signed integer to be
;		converted to a counted ascii string
;
;		ap_cs_ptr = points to 16 bytes to storage to hold counted
;		string.
;
;	output: the storage pointed to by ap_cs_ptr is written with
;		a character varying string representing the value of
;		the integer passed to this routine (ap_integer(ap)).
;		The 1st WORD is the count field which differs from
;		the kernals 1 byte count field for counted strings. It
;		is up to the caller to adjust for this difference.
;
;
ap_integer_ptr	=	4		;pointer to longword signed integer
					;to convert
ap_cs_ptr	=	8		;pointer to storage for counted string
	.entry	pli_integer_to_cs,^m<r2,r3,r4,r5,r6,r7,r8,r9,r10,r11>
	pushl	#0			;bit offset of target
	pushl	#16			;size of target
	pushl	#char_var_		;character varying target datatype
	pushal	ap_cs_ptr(ap)		;address of pointer to target buffer
	pushl	#0			;bit offset of source
	pushl	#31			;size of source
	pushl	#fixed_bin_		;fixed binary datatype
	pushal	ap_integer_ptr(ap)	;address of pointer to integer
	calls	#8,pli$cvrt_any		;convert integer to ascii
	movl	#sts$k_success,r0	;success always
	ret				;

	.subtitle	pli_struct_to_cs
;
;****************************************************************
;*	pli_struct_to_string					*
;****************************************************************
;
; ***WARNING*** this routine assumes that the symid context has been set
;
;	register	use
;	r11		structure descriptor pointer
;	r10		subscript vector pointer
;	r9		pn pointer
;	r8		pointer to pn pointers to counted strings
;	r7		dimension index
;	r6		buffer pointer
;
	.entry	pli_struct_to_string,^m<r2,r3,r4,r5,r6,r7,r8,r9,r10,r11>
ap_name_node_ptr=	4		;address of name node
ap_pn_ptr	=	8		;address of pathname vector
ap_free_ptr_ptr	=	12		;address of free storage pointer
ap_free_end_addr=	16		;address just beyond last free byte
temp	=	-16			;displacement off fp to temp. storage

	moval	-16(sp),sp		;16 bytes of temporary storage
	movl	ap_free_end_addr(ap),r6	;point to last free byte of storage
	movl	ap_pn_ptr(ap),r9	;point to pathname descriptor
	movl	ap_name_node_ptr(ap),r11 ;point to name node
	movl	pli_node_nam_vector(r11),r10 ;point to first subs. vect. elem.
	movl	pli_node_nam_desc_ptr(r11),r11 ;point to first structure desc
					;(last name of structure reference)
	movzbl	pth$b_totcnt(r9),r0	;total pathname elements
	moval	pth$a_pathvector(r9)[r0],r8 ;point past last pointer in pn
20$:					;
	cmpl	#rst$k_type_array,pli_struct_desc_fcode(r11) ;an array?
	bneq	100$			;branch if not an array
	movb	#^a/)/,-(r6)		;put in terminating subscript delimiter
	movl	pli_struct_desc$a_opt(r11),r7 ;point to optional type block
	movl	pli_struc_opt$a_desc(r7),r7 ;point to array descriptor
	movzbl	dsc$b_dimct(r7),r7	;number of dimensions
	brb	50$			;go put in last subscript
40$:	movb	#^a/,/,-(r6)		;subscript separator
50$:	pushal	temp(fp)		;point to temporary storage
	pushal	(r10)+			;next subscript value
	calls	#2,pli_integer_to_cs	;convert integer to counted string
					;(always successful return)
	movzwl	temp(fp),r0		;get (word) length of counted string
	skpc	#^a/ /,r0,temp+2(fp)	;skip leading blanks
	subl2	r0,r6			;make room in buffer for string
	movc3	r0,(r1),(r6)		;copy subscript in ascii form
	sobgtr	r7,40$			;repeat for all subscripts
	movb	#^a/(/,-(r6)		;initiating subscript delimiter
100$:					;
	tstl	pli_struct_desc_flink(r11) ;last structure descriptor?
	beql	200$			;branch if last structure descriptor
	movl	-(r8),r3		;point to counted string
	movzbl	(r3)+,r0		;convert byte count
	subl2	r0,r6			;start address of string target
	movc3	r0,(r3),(r6)		;copy the name
	movb	#^a/./,-(r6)		;structure separator
110$:	movl	pli_struct_desc_flink(r11),r11 ;point to next structure desc.
	bneq	20$			;continue if more present (branch)
	movl	#sts$k_success,r0	;return value
	ret				;
;
;last structure element, include "real" pathname part of pn
;
200$:	movb	pth$b_totcnt(r9),r5	;save total count of pathname desc.
	movb	pth$b_pathcnt(r9),pth$b_totcnt(r9) ;dummy up total count
	pushal	-(sp)			;address of pointer to counted string
	pushl	r9			;address of pathname descriptor
	calls	#2,dbg$npathdesc_to_cs	;convert pathname to counted string
					;using debug kernel routine
	movb	r5,pth$b_totcnt(r9)	;restore proper total count
	movl	(sp)+,r3		;point to counted string
	movzbl	(r3)+,r0		;convert byte count
	subl2	r0,r6			;start address of string target
	movc3	r0,(r3),(r6)		;copy the name
	brw	110$			;see if any array is involved
	.subtitle pli_inc_subscript
	.page
;
;****************************************************************
;*	pli_inc_subscript					*
;****************************************************************
;
; This routine takes as input, a pointer to a structure descriptor
;and modifies the subscript vector to point to the next element
;in the array or array of structures. If none exists, the vector
;is set to the first element of the array, the message vector
;properly set up, and an error return given.
;
;	register	use
;	r11		structure descriptor pointer
;	r10		subscript counter
;	r9		pointer to array descriptor
;	r8		subscript vector element pointer
;	r7		stride pointer
;	r6		bound pointer
;	r5		dimension count for array descriptor
;
;
ap_first_struct_desc	=	4	;address of first structure descriptor
ap_vector_count		=	8	;number of subscripts (value)
ap_vector_addr		=	12	;address of subscript vector
ap_message_vect		=	16	;pointer to the message vector
	.entry	pli_inc_subscript,^m<r2,r3,r4,r5,r6,r7,r8,r9,r10,r11>
	movl	ap_first_struct_desc(ap),r11 ;get first structure descriptor
	movl	ap_vector_count(ap),r10	;subscript counter
	movl	ap_vector_addr(ap),r8	;subscript vector element pointer
10$:	cmpl	#rst$k_type_array,pli_struct_desc_fcode(r11) ;an array?
	beql	30$			;go process if an array
15$:	movl	pli_struct_desc_flink(r11),r11 ;point to next struct. desc.
	bneq	10$			;if another one, go process
;
; Enter if we have no more structure descriptors but are in the
; process of trying to find the next highest element of the array.
; This can only happen if we are at the last element of the array.
;
20$:	brw	2000$			;error message - no successor
30$:					;process array descriptor
	movl	pli_struct_desc$a_opt(r11),r9 ;point to optional type block
	movl	pli_struc_opt$a_desc(r9),r9 ;point to array descriptor
;
;check to see if the array is class dsc$k_class_a, for if it is
;certain data structure checks are made
;
	cmpb	#dsc$k_class_a,dsc$b_class(r9)	;dsc$k_class_a descriptor?
	bneq	100$			;branch if not
	bbs	#dsc$v_fl_column,-	;branch as an error if column
		dsc$b_aflags(r9),50$	;major array
	bbc	#dsc$v_fl_coeff,-	;branch as an error if there
		dsc$b_aflags(r9),50$	;are no multipliers
	bbs	#dsc$v_fl_bounds,-	;branch to process descriptor because
		dsc$b_aflags(r9),100$	;bounds are present
50$:					;we can't process this descriptor
;
;invalid array descriptor, this should never happen because we are
;working with a previously created (valid) primary descriptor
;
	pushl	#pli$k_never		;this should never happen
	calls	#1,dbg$nmake_arg_vect	;make the message vector
60$:	movl	r0,@ap_message_vect(ap)	;put in message vector value
	movl	#sts$k_severe,r0	;severe error
	ret				;
;
;setup to process descriptor
;
100$:	movzbl	dsc$b_dimct(r9),r5	;dimension count (sob index)
	moval	dsc$l_s1(r9)[r5],r7	;point to last stride + 4
	movaq	(r7)[r5],r6		;point to last bounds + 4
;
;increment the next subscript
;
500$:	decl	r10			;decrease subsc. vector count
	blss	2000$			;branch if not enough subscripts
					;to allow for a successor
	incl	(r8)			;increment next subscript
	movl	(r8)+,r0		;get the next subscript value
	cmpl	r0,-(r6)		;compare subscript with upper bound
	bleq	9999$			;branch if done (within range)	
	movl	-(r6),-4(r8)		;reset subscript to lowest value
	sobgtr	r5,500$			;iterate for all dimensions
	brw	15$			;go process more subscripts
;
;no valid successor
;
2000$:	pushl	#dbg$_nosucc		;no valid successor 
	calls	#1,dbg$nmake_arg_vect	;make the message vector
	brw	60$			;merge with common message exit code
9999$:	movl	#sts$k_success,r0	;successful return code
	ret				;

	.subtitle pli_dec_subscript
	.page
;
;****************************************************************
;*	pli_dec_subscript					*
;****************************************************************
;
; This routine takes as input, a pointer to a structure descriptor
;and modifies the subscript vector to point to the previous element
;in the array or array of structures. If none exists, the vector
;is set to the last element of the array, the message vector
;properly set up, and an error return given.
;
;
;	register	use
;	r11		structure descriptor pointer
;	r10		subscript counter
;	r9		pointer to array descriptor
;	r8		subscript vector element pointer
;	r7		stride pointer
;	r6		bound pointer
;	r5		dimension count for array descriptor
;
;
ap_first_struct_desc	=	4	;address of first structure descriptor
ap_vector_count		=	8	;number of subscripts (value)
ap_vector_addr		=	12	;address of subscript vector
ap_message_vect		=	16	;pointer to the message vector
	.entry	pli_dec_subscript,^m<r2,r3,r4,r5,r6,r7,r8,r9,r10,r11>
	movl	ap_first_struct_desc(ap),r11 ;get first structure descriptor
	movl	ap_vector_count(ap),r10	;subscript counter
	movl	ap_vector_addr(ap),r8	;subscript vector element pointer
10$:	cmpl	#rst$k_type_array,pli_struct_desc_fcode(r11) ;an array?
	beql	30$			;go process if an array
15$:	movl	pli_struct_desc_flink(r11),r11 ;point to next struct. desc.
	bneq	10$			;if another one, go process
;
; Enter if we have no more structure descriptors but are in the
; process of trying to find the next lowest element of the array.
; This can only happen if we are at the first element of the array.
;
20$:	brw	2000$			;error message - no predecessor
30$:					;
	movl	pli_struct_desc$a_opt(r11),r9 ;point to optional type block
	movl	pli_struc_opt$a_desc(r9),r9 ;point to array descriptor
;
;check to see if the array is class dsc$k_class_a, for if it is
;certain data structure checks are made
;
	cmpb	#dsc$k_class_a,dsc$b_class(r9)	;dsc$k_class_a descriptor?
	bneq	100$			;branch if not
	bbs	#dsc$v_fl_column,-	;branch as an error if column
		dsc$b_aflags(r9),50$	;major array
	bbc	#dsc$v_fl_coeff,-	;branch as an error if there
		dsc$b_aflags(r9),50$	;are no multipliers
	bbs	#dsc$v_fl_bounds,-	;branch to process descriptor because
		dsc$b_aflags(r9),100$	;bounds are present
50$:					;we can't process this descriptor
;
;invalid array descriptor, this should never happen because we are
;working with a previously created (valid) primary descriptor
;
	pushl	#pli$k_never		;this should never happen
	calls	#1,dbg$nmake_arg_vect	;make the message vector
60$:	movl	r0,@ap_message_vect(ap)	;put in message vector value
	movl	#sts$k_severe,r0	;severe error
	ret				;
;
;setup to process descriptor
;
100$:	movzbl	dsc$b_dimct(r9),r5	;dimension count (sob index)
	moval	dsc$l_s1(r9)[r5],r7	;point to last stride + 4
	movaq	(r7)[r5],r6		;point to last bounds + 4
;
;decrement the next subscript
;
500$:	decl	r10			;decrease subsc. vector count
	blss	2000$			;branch if not enough subscripts
					;to allow for a predecessor
	decl	(r8)			;decrement next subscript
	movl	(r8)+,r0		;get the next subscript value
	subl2	#8,r6			;next bound pair + 4 = current lower
	cmpl	r0,(r6)			;compare subscript with lower bound
	bgeq	9999$			;branch if done (within range)	
	movl	4(r6),-4(r8)		;reset subscript to highest value
	sobgtr	r5,500$			;iterate for all dimensions
	brw	15$			;go process more subscripts
;
;no valid predecessor
;
2000$:	pushl	#dbg$_nopred		;no valid predecessor
	calls	#1,dbg$nmake_arg_vect	;make the message vector
	brw	60$			;merge with common message exit code
;
;successful return
;
9999$:	movl	#sts$k_success,r0	;successful return code
	ret				;
	.end
