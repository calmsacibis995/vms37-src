MODULE DBGNPARSE (IDENT = 'V03-000') =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	DEBUG
!
! ABSTRACT:
!
!	This module contains the highest level parse network, dbg$nparse_cmd, and
!	several parsing associated routines. Legal command verbs are recognized by
!	dbg$nparse_cmd and control is passed to the subnetwork responsible for parsing
!	the rest of the input associated with the verb recognized. In total, the
!	routines produce a command execution tree which is the version 3 debugger
!	form of intermediate code.
!
!	Also contained in this module are the routines dbg$nparse_address and
!	dbg$nparse_expression which are the interfaces between the debugger
!	parser and the Address Expression Interpreter and Expression Interpreter.
!
! ENVIRONMENT:	VAX/VMS
!
! AUTHOR:	David Plummer, CREATION DATE:	4/15/80
!
! VERSION:	V2.2-001
!
! MODIFIED BY:
!
!		Richard Title, 			7/30/81
!
! REVISION HISTORY:
! 3.01	30-Jul-81	RT	Changed dbg$nnext_word so that it allows
!				underscores in keywords. This was 
!				necessary for the new type qualifiers
!				d_float, g_float, and h_float.
! 3.02	12-Sep-81	RT	Made dbg$nparse_cmd recognize the 
!				TYPE verb.
! 3.03	16-Sep-81	RT	Added the routine dbg$nget_dir_list to
!				parse directory lists for the 
!				SET SOURCE command.
! 3.04  13-Oct-81	RT	Added the SEARCH verb to the list of verbs
!				recognized by dbg$nparse_cmd
!--

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
	DBG$NPARSE_CMD,			! Highest level network for parsing
	DBG$NMATCH,			! String matching routine
	DBG$NNEXT_WORD,			! Produces a counted string from the input
	DBG$NPARSE_EXPRESSION,		! Interface to expression interpreters
	DBG$NPARSE_ADDRESS,		! Interface to address expression interpreters
	DBG$NSAVE_DECIMAL_INTEGER,	! Converts ascii input to integer
	DBG$NSAVE_STRING,		! Stores a string from input
    	DBG$NGET_DIR_LIST;		! Parses a directory list.

!
! REQUIRE FILES:
!

REQUIRE 'SRC$:DBGPROLOG.REQ';

!
! EQUATED SYMBOLS:
!
LITERAL
	AT_SIGN_VERB 	= dbg$k_at_sign_verb,		! Code for indirect command file execution
	CALL_VERB 	= dbg$k_call_verb,		! Code for CALL command
	CANCEL_VERB 	= dbg$k_cancel_verb,		! Code for CANCEL command
	DEFINE_VERB 	= dbg$k_define_verb,		! Code for DEFINE command
	DEPOSIT_VERB 	= dbg$k_deposit_verb,		! Code for DEPOSIT command
	EVALUATE_VERB 	= dbg$k_evaluate_verb,		! Code for EVALUATE command
	EXAMINE_VERB 	= dbg$k_examine_verb,		! Code for EXAMINE command
	EXIT_VERB 	= dbg$k_exit_verb,		! Code for EXIT command
	GO_VERB 	= dbg$k_go_verb,		! Code for GO command
    	SEARCH_VERB	= dbg$k_search_verb,		! Code for SEARCH command
	SET_VERB 	= dbg$k_set_verb,		! Code for SET command
	SHOW_VERB 	= dbg$k_show_verb,		! Code for SHOW command
	STEP_VERB 	= dbg$k_step_verb,		! Code for STEP command
    	TYPE_VERB	= dbg$k_type_verb,		! Code for TYPE command
	HELP_VERB 	= dbg$k_help_verb,		! Code for HELP command

	WORD_SIZE 	= 80;				! Maximum word size

!
! OWN STORAGE:
!
OWN
	WORD_BUF : VECTOR [word_size + 1, BYTE]; ! Buffer for counted string word
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
	DBG$STA_SETCONTEXT : NOVALUE,   ! Sets registers context
	DBG$NSET_LAST_TYPLEN,		! Sets type and length of current location
	DBG$NGET_RADIX,			! Obtains user set radix
	DBG$NEXP_INT,			! Expression Interpreter
	DBG$NADDR_EXP_INT,		! Address Expression Interpreter
	DBG$NPARSE_AT_SIGN,		! @ filespec parse network
	DBG$NPARSE_CANCEL,		! CANCEL command parse network
	DBG$NPARSE_DEPOSIT,		! DEPOSIT command parse network
	DBG$NPARSE_EVALUATE,		! EVALUATE command parse network
	DBG$NPARSE_EXAMINE,		! EXAMINE command parse network
	DBG$NPARSE_EXIT,		! EXIT command parse network
	DBG$NPARSE_GO,			! GO command parse network
	DBG$NPARSE_HELP,		! HELP command parse network
    	DBG$NPARSE_SEARCH,		! SEARCH command parse network
	DBG$NPARSE_SET,			! SET command parse network
	DBG$NPARSE_SHOW,		! SHOW command parse network
	DBG$NPARSE_STEP,		! STEP command parse network
    	DBG$NPARSE_TYPE,		! TYPE command parse network
    	DBG$FREEZ,			! Allocates space
	DBG$NLIST_FREEZ,		! Allocates and lists dynamic storage
	DBG$NMAKE_ARG_VECT,		! Constructs a message vector
	DBG$NOUT_INFO,			! Outputs an info message
	DBG$NSYNTAX_ERROR;		! Constructs a message vector for a syntax error

    EXTERNAL
	DBG$GB_VERB : BYTE;		! Holds command verb value


GLOBAL ROUTINE DBG$NPARSE_CMD (INPUT_DESC, VERB_NODE_PTR, MESSAGE_VECT) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Highest level command parsing ATN network. This routine recognizes the
!	verb portion of the input command and transfers control to the appropriate
!	ATN subnetwork to parse the rest of the command.
!
! FORMAL PARAMETERS:
!
!	input_desc -		standard VAX string descriptor of the input command
!
!	verb_node_ptr -		pointer to the verb (head) node of the command execution
!				tree
!
!	message_vect		- Address of a longword to contain the address of
!				  a message argument vector
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	The command execution tree is constructed and verb_node_ptr is set to point
!	to the dynamically allocated verb node which is the head node of the tree.
!
! ROUTINE VALUE:
!
!	unsigned longword integer completion code
!
! COMPLETION CODES:
!
!	sts$k_severe (4) -	unsuccessful parse
!
!	sts$k_success (1) -	successful parse of the input command
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	INPUT_DESC 	: REF dbg$stg_desc;

    ! Define strings used at this level of parsing
    !
    BIND
	DBG$CS_AT_SIGN 	= UPLIT BYTE (1, dbg$k_at_sign),
	DBG$CS_CANCEL 	= UPLIT BYTE (6, 'CANCEL'),
	DBG$CS_DEPOSIT 	= UPLIT BYTE (7, 'DEPOSIT'),
	DBG$CS_EVALUATE = UPLIT BYTE (8, 'EVALUATE'),
	DBG$CS_EXAMINE	= UPLIT BYTE (7, 'EXAMINE'),
	DBG$CS_EXIT 	= UPLIT BYTE (4, 'EXIT'),
	DBG$CS_HELP 	= UPLIT BYTE (4, 'HELP'),
	DBG$CS_GO 	= UPLIT BYTE (2, 'GO'),
    	DBG$CS_SEARCH	= UPLIT BYTE (6, 'SEARCH'),
	DBG$CS_SET 	= UPLIT BYTE (3, 'SET'),
	DBG$CS_SHOW 	= UPLIT BYTE (4, 'SHOW'),
	DBG$CS_STEP 	= UPLIT BYTE (4, 'STEP'),
    	DBG$CS_TYPE	= UPLIT BYTE (4, 'TYPE'),
	DBG$CS_CR 	= UPLIT BYTE (1, dbg$k_car_return);

    LOCAL
	verb_node 	: REF  dbg$verb_node;		! Verb node (head of tree)


    ! Construct and link the verb node
    !
    IF NOT dbg$nlist_freez (dbg$k_verb_node_size, verb_node, .message_vect)
    THEN
	RETURN sts$k_severe;

    .verb_node_ptr = .verb_node;
    dbg$gb_verb = 0;


    ! Set registers to current context as a default
    !
    dbg$sta_setcontext (0);


    ! Try to recognize a legal verb. If one is found, transfer control 
    ! to a command parse subnetwork.
    !
    IF
	( SELECTONE true
	    OF
	    SET

	    [dbg$nmatch (.input_desc, dbg$cs_at_sign, 1)] :
		BEGIN
	        verb_node [dbg$b_verb_literal] = at_sign_verb;
		dbg$gb_verb = dbg$k_at_sign_verb;
 		dbg$nparse_at_sign (.input_desc, .verb_node, .message_vect)
		END;

	    [dbg$nmatch (.input_desc, dbg$cs_cancel, 3)] :
		BEGIN
		verb_node [dbg$b_verb_literal] = cancel_verb;
		dbg$gb_verb = dbg$k_cancel_verb;
		dbg$nparse_cancel (.input_desc, .verb_node, .message_vect)
		END;

	    [dbg$nmatch (.input_desc, dbg$cs_deposit, 1)] :
		BEGIN
		verb_node [dbg$b_verb_literal] = deposit_verb;
		dbg$gb_verb = dbg$k_deposit_verb;
		dbg$nparse_deposit (.input_desc, .verb_node, .message_vect)
		END;

	    [dbg$nmatch (.input_desc, dbg$cs_evaluate, 2)] :
		BEGIN
		verb_node [dbg$b_verb_literal] = evaluate_verb;
		dbg$gb_verb = dbg$k_evaluate_verb;
		dbg$nparse_evaluate (.input_desc, .verb_node, .message_vect)
		END;

	    [dbg$nmatch (.input_desc, dbg$cs_examine, 1)] :
		BEGIN
		verb_node [dbg$b_verb_literal] = examine_verb;
		dbg$gb_verb = dbg$k_examine_verb;
		dbg$nparse_examine (.input_desc, .verb_node, .message_vect)
		END;

	    [dbg$nmatch (.input_desc, dbg$cs_exit, 3)] :
		BEGIN
		verb_node [dbg$b_verb_literal] = exit_verb;
		dbg$gb_verb = dbg$k_exit_verb;
		dbg$nparse_exit (.input_desc, .verb_node, .message_vect)
		END;

	    [dbg$nmatch (.input_desc, dbg$cs_go, 1)] :
		BEGIN
		verb_node [dbg$b_verb_literal] = go_verb;
		dbg$gb_verb = dbg$k_go_verb;
		dbg$nparse_go (.input_desc, .verb_node, .message_vect)
		END;

	    [dbg$nmatch (.input_desc, dbg$cs_help, 1)] :
		BEGIN
		verb_node [dbg$b_verb_literal] = help_verb;
		dbg$gb_verb = dbg$k_help_verb;
		dbg$nparse_help (.input_desc, .verb_node, .message_vect)
		END;

    	    [dbg$nmatch (.input_desc, dbg$cs_search, 3)] :
    		BEGIN
    		verb_node [dbg$b_verb_literal] = search_verb;
    		dbg$gb_verb = dbg$k_search_verb;
    		dbg$nparse_search (.input_desc, .verb_node, .message_vect)
    		END;

	    [dbg$nmatch (.input_desc, dbg$cs_set, 2)] :
		BEGIN
		verb_node [dbg$b_verb_literal] = set_verb;
		dbg$gb_verb = dbg$k_set_verb;
		dbg$nparse_set (.input_desc, .verb_node, .message_vect)
		END;

	    [dbg$nmatch (.input_desc, dbg$cs_show, 2)] :
		BEGIN
		verb_node [dbg$b_verb_literal] = show_verb;
		dbg$gb_verb = dbg$k_show_verb;
		dbg$nparse_show (.input_desc, .verb_node, .message_vect)
		END;

	    [dbg$nmatch (.input_desc, dbg$cs_step, 1)] :
		BEGIN
		verb_node [dbg$b_verb_literal] = step_verb;
		dbg$gb_verb = dbg$k_step_verb;
		dbg$nparse_step (.input_desc, .verb_node, .message_vect)
		END;

    	    [dbg$nmatch (.input_desc, dbg$cs_type, 1)] :
    		BEGIN
    		verb_node[dbg$b_verb_literal] = type_verb;
    		dbg$gb_verb = dbg$k_type_verb;
    		dbg$nparse_type(.input_desc,.verb_node,.message_vect)
    		END;

	    [OTHERWISE] : ! Syntax error
		BEGIN
		.message_vect = dbg$nsyntax_error (dbg$nnext_word (.input_desc));
		false
		END;
	    
	    TES)

    THEN
	RETURN

	    ! Check for exhausted input
	    !
	    ( IF .input_desc [dsc$w_length] EQL 0
			    OR
		 dbg$nmatch (.input_desc, dbg$cs_cr, 1)
	      THEN
		sts$k_success
	      ELSE
		BEGIN
		    .message_vect = dbg$nsyntax_error (dbg$nnext_word (.input_desc));
		    sts$k_severe
		END )
    ELSE
	RETURN sts$k_severe;
	
    END;			! End of dbg$nparse_cmd


GLOBAL ROUTINE DBG$NMATCH (STRING_DESC, COUNTED_STRING, UNIQUE_CHARS) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine is used extensively during command parsing. What it does is
!	to compare the first word of the command input string against the supplied
!	counted string to see if they match. If they do, the matched word is removed
!	from the head of the command input string and success is returned as the value
!	of the routine. Note that the input word may be shorter than the counted
!	string to allow for abbreviations of commands.
!
! FORMAL PARAMETERS:
!
!	string_desc - 		VAX standard string descriptor of the input command
!
!	counted_string -	the counted string against which the input word is
!				to be compared
!
!	unique_chars - 		the number of characters which the input word must
!				match against the counted string for purposes of
!				disambiguating the input word
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	unsigned integer longword
!
! COMPLETION CODES:
!
!	sts$k_severe (4) -	the input word did not match the counted string
!
!	sts$k_success (1) -	the input word did match
!
! SIDE EFFECTS:
!
!	On a successful match, the input string descriptor is updated to just beyond
!	the word of input matched against the counted string.
!
!--

    BEGIN

    LOCAL
	WORD_STRING 	: REF VECTOR [,BYTE],	! Holds the next input word
	SAVE_PTR,				! Saves the address of the input buffer
	SAVE_LEN,				! Saves the length of the input buffer
	MATCH_FLAG;				! Signals a match

    MAP
	STRING_DESC 	: REF dbg$stg_desc,
	COUNTED_STRING 	: REF VECTOR [,BYTE];

    ! Save the original descriptor buffer address and length
    !
    save_ptr = .string_desc [dsc$a_pointer];
    save_len = .string_desc [dsc$w_length];


    ! Get the next input word
    !
    word_string = dbg$nnext_word (.string_desc);


    ! Perform the match, check for special cases
    !
    match_flag = true;

    SELECTONE true
	OF
	SET

	[.counted_string [0] EQL 0] :		! Match
	    BEGIN
	    0;
	    END;

	[.word_string [0] GTR .counted_string [0]] : ! NO match
	    BEGIN
	    match_flag = false;
	    END;

	[.word_string [0] EQL 0] :		! NO match
	    BEGIN
	    match_flag = false;
	    END;

	[.word_string [0] LSS .unique_chars] : 	! NO match
	    BEGIN
	    match_flag = false;
	    END;

	[OTHERWISE] : 				! Normal match
	    BEGIN
	    LOCAL
		I;		! Loop counter

	    i = 1;

	    WHILE .i LEQ .word_string [0]
	    DO
		BEGIN
		IF .word_string [.i] NEQ .counted_string [.i]
		THEN
		    match_flag = false;
		i = .i + 1;
		END;
	    END;

	TES;


    ! Check for match or no match
    !
    RETURN
	( IF NOT .match_flag
	  THEN
		BEGIN

		! Restore old descriptor.
		!
		string_desc [dsc$a_pointer] = .save_ptr;
		string_desc [dsc$w_length] = .save_len;
		sts$k_severe
		END
	  ELSE
		sts$k_success);

    END;			! End of dbg$nmatch


GLOBAL ROUTINE DBG$NNEXT_WORD (STRING_DESC) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Routine dbg$nnext_word isolates the next word of the input command. A word
!	is defined to be any number of alphabetic characters delimited by blanks
!	or a single non-alphabetic character. The word isolated is represented as
!	a counted string. 
!
!	The input string is assumed to be terminated by a <cr>.
!
!	Maximum word size is 80 characters.
!
! FORMAL PARAMETERS:
!
!	string_desc -		VAX standard string descriptor of the input command
!
! IMPLICIT INPUTS:
!
!	word_buf -		OWNed byte vector to contain the word of input
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	The address of word_buf, the counted string representing the next word
!	of input.
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Word_buf is always filled with the next word of input. Word_buf [0]
!	contains the count of the characters in the word. On exhausted input,
!	word_buf [0] equals 0. The command string descriptor is updated past the
!	word of input.
!
!--

    BEGIN

    MAP
	STRING_DESC 	: REF dbg$stg_desc;

    LOCAL
	CHAR 		: BYTE,			! Holds next character of input
	POINTER,				! Temp pointer
	COUNT;					! Count of characters

    ! Check for exhausted input
    !
    IF .string_desc [dsc$w_length] LEQ 0
    THEN
	BEGIN
	string_desc [dsc$w_length] = 0;
	word_buf [0] = 0;	! No word    
	string_desc [dsc$a_pointer] = 0;
	RETURN word_buf [0]; 
	END;


    ! Ignore leading white space
    !
    WHILE ch$rchar (.string_desc [dsc$a_pointer]) EQL ' '
    DO
	BEGIN
	string_desc [dsc$a_pointer] = ch$plus (.string_desc [dsc$a_pointer], 1);
	string_desc [dsc$w_length] = .string_desc [dsc$w_length] - 1;
	END;


    ! Count the number of characters in the next word. Note that we always return
    ! atleast one character.
    !
    pointer = .string_desc [dsc$a_pointer];
    char = ch$rchar (.string_desc [dsc$a_pointer]);

    IF (.char GEQ 'A'
	   AND
       .char LEQ 'Z')
    THEN
	BEGIN

	! We take more than one char
	!
	char = ch$a_rchar (string_desc [dsc$a_pointer]);
	string_desc [dsc$w_length] = .string_desc [dsc$w_length] - 1;

	WHILE ((.char GEQ 'A'	 
		  AND  
	      .char LEQ 'Z')
		   OR	
	      .char EQL '_')	! allow underscore in keywords 
				! d_float, g_float, h_float
	          AND
	      ch$diff (.string_desc [dsc$a_pointer], .pointer) LEQU word_size
   	DO
	    BEGIN
	    char = ch$a_rchar (string_desc [dsc$a_pointer]);
	    string_desc [dsc$w_length] = .string_desc [dsc$w_length] - 1;
	    END;
	END

    ELSE
	BEGIN

	! Take one char only
	!
	char = ch$a_rchar (string_desc [dsc$a_pointer]);
	string_desc [dsc$w_length] = .string_desc [dsc$w_length] - 1;
	END;


    ! Calculate the number of characters in the new word
    !
    count = ch$diff (.string_desc [dsc$a_pointer], .pointer);


    ! Now copy over th appropriate number of chars.
    !
    word_buf [0] = .count;
    ch$move (.count, .pointer, word_buf [1]);


    ! Check for exhausted input
    !
    IF .string_desc [dsc$w_length] LEQ 0
    THEN
	BEGIN
	string_desc [dsc$w_length] = 0;
	string_desc [dsc$a_pointer] = 0;
	END;

    RETURN word_buf [0];

    END;	! End of dbg$nnext_word


GLOBAL ROUTINE DBG$NPARSE_EXPRESSION (INPUT_DESC, RADIX, VALUE_DESC_PTR, MESSAGE_VECT) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine interfaces to the Expression Interpreter. 
!
! FORMAL PARAMETERS:
!
!	INPUT_DESC		- The address of a VAX standard ascii string descriptor
!				  which describes the user input
!
!	RADIX			- A longword containing an integer encoding of the
!				  radix to be used for the interpretation of numeric
!				  literals
!	VALUE_DESC_PTR		- The address of a longword to contain the address
!				  of a language specific value descriptor
!
!	MESSAGE_VECT		- The address of a longword to contain the address
!				  of a message argument vector for errors
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	Same as the Expression Interpreter.
!
! COMPLETION CODES:
!
!	Same as the Expression Interpreter.
!
! SIDE EFFECTS:
!
!	Same as the Expression Interpreter.
!
!--

    BEGIN

    ! If the caller of this routine has passed in a value for radix that is other
    ! than dbg$k_default, then we just pass along the radix unchanged. If the
    ! caller has passed in dbg$k_default, then we change radix to the user (or
    ! language) defined radix. All other parameters are passed unchanged.
    !
    IF .radix EQL dbg$k_default
    THEN
	radix = dbg$nget_radix ();

    RETURN (dbg$nexp_int (.input_desc, .radix, .value_desc_ptr, .message_vect));

    END;			! End of dbg$nparse_expression


GLOBAL ROUTINE DBG$NPARSE_ADDRESS (INPUT_DESC, ADDR_EXP_PTR, RADIX, MESSAGE_VECT) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine interfaces to the Address Expression Interpreter to obtain
!	an address expression descriptor. Address expression descriptors are
!	used to describe the object of commands which use address expressions.
!	The descriptor may contain a pointer to a primary descriptor, a pointer
!	to a permanent symbol descriptor, an untyped lvalue, or an lvalue of type
!	instruction.
!
! FORMAL PARAMETERS:
!
!	INPUT_DESC		- A longword containing the address of a standard
!				  string descriptor describing the input command
!
!	ADDR_EXP_PTR		- The address of a longword to contain the address
!				  of an address expression descriptor
!
!	RADIX			- A longword containing the integer code of the
!				  radix to be used in interpreting numeric literals
!
!	MESSAGE_VECT		- The address of a longword to contain the address
!				  of a message argument vector for errors
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	On success, an address expression descriptor is returned.
!
!	On failure, a message argument vector is constructed.
!
! ROUTINE VALUE:
!
!	An unsigned integer longword completion code
!
! COMPLETION CODES:
!
!	Returns whatever completion code the address expression interpreter returns.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	status,				! Return status
	type,				! current location type
	length;				! current location length


    ! If the caller of this routine has passed in a value for radix that is other
    ! than dbg$k_default, then we just pass along the radix unchanged. If the
    ! caller has passed in dbg$k_default, then we change radix to the user (or
    ! language) defined radix. All other parameters are passed unchanged.
    !
    IF .radix EQL dbg$k_default
    THEN
	radix = dbg$nget_radix ();

    type = dbg$k_notype;
    length = 0;

    status = dbg$naddr_exp_int (.input_desc, .addr_exp_ptr, type, length,
			       .radix, .message_vect);


    ! Set the potential type and length for current location
    !
    dbg$nset_last_typlen (.type, .length);

    RETURN .status;

    END;			! End of dbg$nparse_address


GLOBAL ROUTINE DBG$NSAVE_DECIMAL_INTEGER (INPUT_DESC, RESULT, MESSAGE_VECT) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Extracts a numeric string from the command input string and converts it
!	to a binary longword integer. Decimal radix is assumed for the input.
!
! FORMAL PARAMETERS:
!
!	INPUT_DESC	- A longword  containing the address of a standard ascii
!			  string descriptor corresponding to the input command line
!
!	RESULT		- The address of a longword to contain the result (the
!			  longword integer value)
!
!	MESSAGE_VECT	- The address of a longword to contain the address of a
!			  message argument vector for errors
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	On error, a message argument vector is constructed and returned.
!
! ROUTINE VALUE:
!
!	An unsigned integer longword completion code
!
! COMPLETION CODES:
!
!	STS$K_SUCCESS (1) 	- Success. Integer rcognized and converted.
!
!	STS$K_SEVERE  (4) 	- Failure. No result returned. Message argument
!				  vector constructed and returned.
!
! SIDE EFFECTS:
!
!	The input string is updated to the end of the numeric string
!
!--
    BEGIN

    BUILTIN
	EMUL;					! Multiply and add two longwords
						! to produce quadword result.

    MAP
	INPUT_DESC 	: REF dbg$stg_desc;

    BIND
	DBG$CS_CR 	= UPLIT BYTE (1, dbg$k_car_return);

    LOCAL
	VALUE 		: VECTOR [2],		! Result quadword
	STRING_PTR,				! Pointer to input string
	TRUNC_FLAG,				! Indicates truncation
	CHAR;					! Holds characters

    ! Check for null input
    !
    IF dbg$nmatch (.input_desc, dbg$cs_cr, 1)
    THEN
	BEGIN
	.message_vect = dbg$nmake_arg_vect (dbg$_needmore);
	RETURN sts$k_severe;
	END;


    ! Delete leading white space
    !
    string_ptr = .input_desc [dsc$a_pointer];
    WHILE .input_desc [dsc$w_length] GTR 0
    DO
	BEGIN
	char = ch$rchar_a (string_ptr);
	input_desc [dsc$w_length] = .input_desc [dsc$w_length] - 1;
	IF .char NEQ dbg$k_blank
	THEN
	    EXITLOOP;
	END;


    ! Check for a numeric character. If we don't have one - syntax error
    !
    IF .char LSS '0' OR .char GTR '9' 
    THEN
	BEGIN
	.message_vect = dbg$nsyntax_error (dbg$nnext_word (.input_desc));
	RETURN sts$k_severe;
	END;


    ! Now continue to accept numeric chars and convert them
    !
    value [0] = 0;
    value [1] = 0;
    trunc_flag = false;

    WHILE .char GEQ '0' and .char LEQ '9'
    DO
	BEGIN
	char = .char - '0';
	emul (value[0], %REF (10), char, value);  ! Always use decimal radix

	
	! Check for overflow
	!
	IF .value [1] NEQ 0
	THEN
	    trunc_flag = true;


	! Get the next numeric character
	!
	input_desc [dsc$w_length] = .input_desc [dsc$w_length] - 1;
	char = ch$rchar_a (string_ptr);
	END;


    ! Update the input pointer and length. Remember that char right now contains
    ! the first non-numeric character of the remaining string. Therefore, string_ptr
    ! points one place to the right too far.
    !
    input_desc [dsc$w_length] = .input_desc [dsc$w_length] + 1;
    input_desc [dsc$a_pointer] = ch$plus (.string_ptr, -1);


    ! Set up the result, check for truncation, check for negative number.
    !
    IF .trunc_flag 
    THEN
	dbg$nout_info (dbg$_numtrunc);

    IF .value [0] LSS 0
    THEN
	value [0] = -.value [0];
    
    .result = .value [0];

    RETURN sts$k_success;

    END;	! End of dbg$nsave_decimal_integer


GLOBAL ROUTINE DBG$NSAVE_STRING (INPUT_DESC, BUFF_PTR, MESSAGE_VECT) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine accepts the next string from the input buffer
!	and stores it away in a dynamic buffer. Leading white space is ignored.
!	Trailing white space, comma, or <cr> terminate the string.
!	The saved string is stored as a counted string.
!
! FORMAL PARAMETERS:
!
!	INPUT_DESC		- The address of a VAX standard ascii string
!				  descriptor which describes input user command
!
!	BUFF_PTR		- The address of a longword to contain the beginning
!				  address of the stored counted string
!
!	MESSAGE_VECT		- The address of a longword to contain the address
!				  of a message argument vector for errors
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	On success, the stored counted ascii string.
!
!	On failure, a message argument vector.
!
! ROUTINE VALUE:
!
!	An unsigned integer longword completion code
!
! COMPLETION CODES:
!
!	STS$K_SUCCESS (1)	- Success. String isolated and stored.
!
!	STS$K_SEVERE  (4)	- Failure. No string stored. Message argument
!				  vector returned.
!
!				  Note that this routine returns failure if a
!				  string cannot be found. A NEEDMORE
!				  message is constructed in such cases.
!
! SIDE EFFECTS:
!
!	The input buffer is updated to reflect one character beyond the last
!	character accepted.
!
!--
    BEGIN

    MAP
	INPUT_DESC 	: REF dbg$stg_desc;

    BIND
	DBG$CS_CR 	= UPLIT BYTE (1, dbg$k_car_return);

    LOCAL
	STRING 		: REF VECTOR [,BYTE],	! Will hold the string
	COUNT,					! Count of characters in string
	POINTER;				! Temporary pointer


    ! Check for null input
    !
    IF dbg$nmatch (.input_desc, dbg$cs_cr, 1)
    THEN
	BEGIN
	.message_vect = dbg$nmake_arg_vect (dbg$_needmore);
	RETURN sts$k_severe;
	END;


    ! Delete leading white space
    !
    WHILE ch$rchar (.input_desc [dsc$a_pointer]) EQL ' '
    DO
	BEGIN
	input_desc [dsc$a_pointer] = ch$plus (.input_desc [dsc$a_pointer], 1);
	input_desc [dsc$w_length] = .input_desc [dsc$w_length] - 1;
	END;


    ! Save the start of the string
    !
    pointer = .input_desc [dsc$a_pointer];


    ! Now look for a comma, a blank, or <cr>
    !
    WHILE ch$rchar (.input_desc [dsc$a_pointer]) NEQ ' '
			    AND
	  ch$rchar (.input_desc [dsc$a_pointer]) NEQ ','
			    AND
	  ch$rchar (.input_desc [dsc$a_pointer]) NEQ dbg$k_car_return
    DO
	BEGIN
	input_desc [dsc$a_pointer] = ch$plus (.input_desc [dsc$a_pointer], 1);
	input_desc [dsc$w_length] = .input_desc [dsc$w_length] - 1;
	END;


    ! Figure out how many characters to save
    !
    count = ch$diff (.input_desc [dsc$a_pointer], .pointer);


    ! Allocate the proper size buffer
    !
    IF NOT dbg$nlist_freez ((.count / %UPVAL) + 1, string, .message_vect)
    THEN
	RETURN sts$k_severe;


    ! Copy over the count and the characters.
    !
    string [0] = .count;
    ch$move (.count, .pointer, string [1]);


    ! Set up the output parameter and return
    !
    .buff_ptr = string [0];

    RETURN sts$k_success;

    END;		! End of dbg$nsave_string
    

GLOBAL ROUTINE dbg$nget_dir_list(
	lex_stg_desc,
    	result_ptr,
	message_vect) =
!+
! Function
!
!	Parse a directory list. Used by the command
!	SET SOURCE dir-list
!
! Inputs
!
!	lex_stg_desc   - a string descriptor for the unparsed 
!			 directory list.  
!	result_ptr     - The result of the parse will be placed at the
!			 address given by result_ptr.
!	message_vect   - Address of a longword to contain the address of 
!			 the message argument vector.
!
! Outputs
!
!	This routine builds a linked list of directory names and
!	leaves a pointer to this list in result_ptr.
!
! Routine Value
!
!	A completion code which is one of either:
!	sts$k_severe (4)	unsuccessful parse
!	sts$k_success (1)	successful parse 
!
! Algorithm
!	The directory list will be of the form:
!	[dir1]file1,[dir2]file2,...[dirn]filen
!	Do until end of list is reached:
!	    Pick up a single directory name by scanning until
!	    a separating comma is reached (commas inside of
!	    square brackets are ignored)
!	    Allocate space for a node containing the directory name.
!	    Copy the directory name into this node, and
!	    link the node into the list.
!-
    BEGIN

    MAP
	lex_stg_desc : REF BLOCK [,BYTE];

    LOCAL
	tot_length, ! number of chars to be read from parse_stg_desc
	tot_chars_read, ! number of chars read from parse_stg_desc so far
	chars_read, ! number of chars in directory name under construction
	in_brackets, ! true if we are inside of square brackets
	char, ! current character
    	prev_char_ptr,
	first_dir_flag, ! true if this is first directory in list
	prev_dirname : REF sdsl$entry, ! previous directory name
	curr_dirname : REF sdsl$entry, ! current directory name
	first_dirname, ! pointer to first directory name (head of linked list)
	input_ptr,
    	output_ptr,
    	new_input_ptr,
    	prev_char,
    	quote_flag,	! true if the directory currently being processed
    			! is inside of quotes
    	dblquote_flag;	! true if the directory currently being processed
    			! is inside of double quotes

    ! initialize in_brackets
    in_brackets = FALSE;

    ! initialize tot_length and tot_chars_read
    tot_length = .lex_stg_desc[dsc$w_length];
    tot_chars_read = 0;

    ! initialize quote flags
    quote_flag = FALSE;
    dblquote_flag = FALSE;

    ! initialize chars_read 
    chars_read = 0;

    ! first_dir_flag is true initially because we are processing the
    ! first directory in the list.
    first_dir_flag = TRUE;

    prev_dirname = 0;

    WHILE .tot_chars_read LSS .tot_length DO
	BEGIN ! outer while loop

	input_ptr = ch$ptr(.lex_stg_desc[dsc$a_pointer]);
	char = ch$rchar_a(input_ptr);

    	! Skip leading blanks
    	WHILE .char EQL dbg$k_blank 
    	    AND .tot_chars_read LSS .tot_length
    	    DO
    	    BEGIN
    	    char = ch$rchar_a(input_ptr);
    	    tot_chars_read = .tot_chars_read + 1;
    	    lex_stg_desc[dsc$a_pointer] = ch$plus(
    		.lex_stg_desc[dsc$a_pointer],1);
    	    lex_stg_desc[dsc$w_length] = .lex_stg_desc[dsc$w_length] - 1;
    	    END;

    	IF .char EQL dbg$k_quote OR .char EQL dbg$k_dblquote
    	THEN
    	    BEGIN
    	    IF .char EQL dbg$k_quote
    	    THEN
    	        quote_flag = TRUE
    	    ELSE
    		dblquote_flag = TRUE;
    	    ! advance the pointer past the quote
    	    lex_stg_desc[dsc$a_pointer] = 
    		ch$plus(.lex_stg_desc[dsc$a_pointer],1);
    	    lex_stg_desc[dsc$w_length] = .lex_stg_desc[dsc$w_length] - 1;
    	    tot_chars_read = .tot_chars_read + 1;
    	    char = ch$rchar_a (input_ptr);
    	    END;

	! pick up next directory name
	WHILE   .tot_chars_read LSS .tot_length 
    	    AND
    		.char NEQ dbg$k_car_return
	    AND
	        (.char NEQU %C',' OR .in_brackets) DO
	    ! not looking at end of string or at separating comma
	    BEGIN ! inner while loop
	    IF .char EQLU %C'[' OR .char EQLU %C'<' 
	    THEN
		in_brackets = TRUE;
	    IF .char EQLU %C']' OR .char EQLU %C'>'
	    THEN
		in_brackets = FALSE;

    	    IF .char NEQ dbg$k_blank 
    	    THEN
    		prev_char_ptr = ch$plus(.input_ptr,-1);
    	    prev_char = .char;
	    char = ch$rchar_a(input_ptr);
    	    IF .dblquote_flag 
    		AND .char EQL dbg$k_dblquote
    		AND .prev_char EQL dbg$k_dblquote
    	    THEN
    		! undouble the quotes
    		! for now, just mark the position
    		(.prev_char_ptr)<0,8,0> = 0;

	    tot_chars_read = .tot_chars_read + 1;
	    chars_read = .chars_read + 1;
	    END; ! inner while loop

	! we now have a complete directory name.
	! allocate space for it.
	curr_dirname = dbg$freez(2+(1+.chars_read)/%UPVAL);
	
	IF (.first_dir_flag) 
	THEN
    	    BEGIN
    	    first_dir_flag = FALSE;
	    first_dirname = .curr_dirname;
    	    END;

	! link in next directory name
	IF (.prev_dirname NEQA 0)
	THEN
	    prev_dirname[sdsl$l_ent_flink] = .curr_dirname;

	! Set prev_dirname for next time around loop
	prev_dirname = .curr_dirname;

	! fill in the fields of curr_dirname
	curr_dirname[sdsl$l_ent_flink] = 0;
	curr_dirname[sdsl$b_ent_dirlen] = 0;

    	new_input_ptr = ch$ptr (.lex_stg_desc[dsc$a_pointer]);
    	output_ptr = ch$ptr(.curr_dirname + 5);
    	INCR i FROM 0 TO .chars_read-1 DO
    	    BEGIN
    	    char = ch$rchar_a (new_input_ptr);
    	    IF .char NEQ 0
    	    THEN
    		BEGIN
    		ch$wchar_a (.char, output_ptr);
    		curr_dirname[sdsl$b_ent_dirlen] = 
    		    .curr_dirname[sdsl$b_ent_dirlen] + 1;
    		END;
    	    END;

    	! strip off trailing quote
    	IF .quote_flag
    	THEN
    	    BEGIN
    	    IF ch$rchar(.prev_char_ptr) EQL dbg$k_quote
    	    THEN
    		BEGIN
     		curr_dirname[sdsl$b_ent_dirlen] =
    		    .curr_dirname[sdsl$b_ent_dirlen] - 
    			(.input_ptr-.prev_char_ptr-1);
    		quote_flag = FALSE;
    		END
    	    END   
        ELSE
    	    IF .dblquote_flag
    	    THEN
    		IF ch$rchar(.prev_char_ptr) EQL dbg$k_dblquote
    		THEN
    		    BEGIN
    		    curr_dirname[sdsl$b_ent_dirlen] =
    			.curr_dirname[sdsl$b_ent_dirlen] - 
    			    (.input_ptr-.prev_char_ptr-1);
    		    dblquote_flag = FALSE;
    		    END;
    	    
    	IF .tot_chars_read LSS .tot_length
    	THEN
    	    BEGIN
    	    ! increment chars_read to take us past the separating comma.
	    chars_read = .chars_read + 1;
	    tot_chars_read = .tot_chars_read + 1;
    	    END;
	lex_stg_desc[dsc$w_length] =
	    .lex_stg_desc[dsc$w_length] - .chars_read;
	lex_stg_desc[dsc$a_pointer] =
	    ch$plus(.lex_stg_desc[dsc$a_pointer],.chars_read);
	
	chars_read = 0;
	END; ! outer while loop

    IF .quote_flag OR .dblquote_flag 
    THEN
    	SIGNAL (dbg$_MATQUOMIS);

    ! place pointer to linked list into into the result pointer
    .result_ptr = .first_dirname;

    RETURN sts$k_success

    END ; ! dbg$nget_dir_list
END				!End of module
ELUDOM
