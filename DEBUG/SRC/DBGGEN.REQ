!	dbggen.req - require file for vax/vms DEBUG facility
!
!	Version 'V03-000'
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
!	Modified by:
!		Bruce Olsen, 30 Aug 1979
!		Richard Title, 20 Aug 1981
!
!	13-JAN-78	DAR	Add literals for module type and language.
!	3-feb-78	KGP	-Added PC correlation type LOOKUP_EXC
!	19-apr-78	KGP	-Added step type literals.
!	08-may-78	KGP	-Added literal SYSTEM_SPACE
!	16-may-78	KGP	 Deleted macro out_diag_info
!	17-MAY-78	DAR	Added literal P1_SPACE
!	25-MAY-78	DAR	Added literal "literal_mode" to the mode values
!	13-JUL-78	DAR	Deleted literal "address_mode", since it's not used
!	15-SEP-78	MCC	Added COBOL and BASIC language names;
!				Deleted "mar", "for" and "bli" def_radix literals.
!	22-SEP-78	DAR	Added literal MAX_STACK_PTR from VXPALT.REQ
!	25-SEP-78	MCC	Added contents of SYSLIT.REQ
!	17-OCT-78	DAR	Added literal thread_code to conditionally compile
!				threaded code support.
!	18-OCT-78	MCC	Added new semantic stack BLOCKVECTOR
!	25-OCT-78	DAR	Changed MARS_MODULE to MACRO_MODULE!
!	 1-NOV-78	MCC 	Added BLISS structure literals
!	22-NOV-78	DAR	All language names are now of form: LANG_xxx
!	01-DEC-78	DAR	CHS_PER_LEXEME and MAX_SYM_LENGTH are now 31.
!	 9-DEC-78	MCC	Added fields for dot_present and field_ref_present
!				to internal stack
!	14-MAR-79	MCC	Added output configuration data structure to
!				support LOG files
!	13-JUL-79	MCC	Added command input stream structure
!	30-Aug-79	BAO	Added link cells for singly linked lists.
!	29-Jun-80	DLP	Added literals for PL/I, PASCAL, and C
!	29-JAN-81	DLP	chs_per_lexeme is now 50
!	20-AUG-81	 RT	Changed step_lvl_size and added step_source
!				because of new command 
!				SET STEP SOURCE
!--


macro
	null_pos_size	=0, 0, 0%,	! null pse for undotted references to blocks
	operand_mode	=0, 4, 4, 0%,	! mode part of an operand
	operand_value	=0, 0, 4, 0%;	! value part of an operand

literal
	dbg_fac_code	= 2 * 65536,	! DEBUG facility code
	thread_code	=1,		! Conditional switch for threaded code
	fatal_bit	=4,		! mask for fatal bit in error codes
	add_the_offset	=1,		! add offset to value
	sub_the_offset	=0,		! subtract offset from value

	!++
	! The next three literals used to be defined in SYSLIT.REQ
	!--
	no_override	= 0,		! use current length and radix
	tty_out_width	= 132,		! width of terminal line
	tty_ascii_len	= 80,		! max size of character variable

	!++
	! values for register name tables
	!--
	register_count	=17,		! seventeen registers counting psl

	!++
	! size parameters
	!--
	max_ascii_leng	= 4096,		! largest N in "ASCII:N" 
	max_stack_ptr	=20,		! Depth of the parser's parse stack.
	no_of_inp_chars	=132,		! max number of characters in input line
					! ****must be divisible by 4***
	chs_per_lexeme	=50,		! max number of characters in a single lexeme
					! ***must be divisible by 4***
	no_of_tokens	=30,		! max number of tokens permitted
					! ***must be an even number***
	max_byte_int	= 127,		! largest byte integer
	all_bpts	=-1,		! all breakpoints in chain
	bpt_instruction	=%X'03',	! opcode assignment for bpt instruction (srm revision 3)
	break_point	= 1,		! table entry is breakpoint
	trace_point	= 2,		! table entry is tracepoint
	watch_point	= 3,		! table entry is watchpoint

	write_watch	= 1,		! watchpoint is for write access
	read_writ_watch	= 2,		! watchpoint is for read/write access
	execute_watch	= 3,		! this is break or trace point

	num_max_length	=11,		! maximum number of characters per numeric string
	sym_max_length	=31,		! maximum number of characters per symbol
	upper_case_dif	='a' - 'A',	! difference between ASCII representation of upper and lower case
	ascii_offset	=%O'60',	! offset from numeric value to ASCII value

	!++
	! ASCII character representations
	!--
	linefeed	=%O'12',	! ASCII representation of linefeed
	carriage_ret	=%O'15',	! ASCII representation of carriage return
	asc_at_sign	=%ASCII '@',	! ASCII representation of an at sign
	asc_clos_paren	=%ASCII ')',	! ASCII representation of closed parenthesis
	asc_comma	=%ASCII ',',	! ASCII representation of a comma
	asc_doub_quote	=%ASCII '"',	! ASCII representation of a double quote
	asc_minus	=%ASCII '-',	! ASCII representation of a minus sign
	asc_open_paren	=%ASCII '(',	! ASCII representation of open parenthesis
	asc_percent	=%ASCII '%',	! ASCII representation of a percent sign
	asc_period	=%ASCII '.',	! ASCII representation of a period
	asc_plus	=%ASCII '+',	! ASCII representation of a plus sign
	asc_pounds	=%ASCII '#',	! ASCII representation of a pounds sign
	asc_quote	=%ASCII '''',	! ASCII representation of a quote character
	asc_space	=%ASCII ' ',	! ASCII representation of a space
	asc_sq_clo_brak	=%ASCII ']',	! ASCII representation of a closed square bracket
	asc_sq_opn_brak	=%ASCII '[',	! ASCII representation of an open square bracket
	asc_tab		=%ASCII '	',	! ASCII representation of a tab
	asc_up_arrow	=%ASCII '^',	! ASCII representation of an up arrow

	! The 'mode' data structure is really just
	! a byte vector with the following characteristics.

	mode_lvl_size	=9,		! number of bytes in each level.
	mode_levels	=4,		! number of levels for mode settings

	! each level of the mode data strucutre has
	! the following entries

	mode_radix	=0,		! radix - dec,hex,oct, etc.
	mode_length	=1,		! length - long,word,byte, etc.
	mode_symbols	=2,		! boolean -> whether we know values
					!   as "extern + offset" or not.
	mode_instruc	=3,		! boolean -> whether we input/output 
					!   values as machine instruction.
	mode_ascii	=4,		! boolean -> whether we output (only!)
					!   values as ASCII strings or not.
	mode_scope	=5,		! whether or not there is a csp,
					! (and whether we should apply it)
	mode_globals	=6,		! whether or not we should apply
					! global scope first in the search rules.
	mode_fortran	=7,		! %line, %label
	mode_immediate	=8,		! FORTRAN address or contents of mode

	! the four levels have the following
	! names and indices.

	default_mode	=0,		! default system initialized mode
	user_def_mode	=1,		! user-set default mode
	override_mode	=2,		! one-line override mode
	local_mode	=3,		! local mode

	! the mode_length field should be one of the following

	byte_length	=1,		! byte length
	word_length	=2,		! word length
	long_length	=4,		! longword length

	! and the mode_radix field should be one of:

	decimal_radix	=10,		! decimal radix
	hex_radix	=16,		! hexadecimal radix
	octal_radix	=8,		! octal radix
	binary_radix	=2,		! binary radix

	! the FORTRAN mode fields are as follows:

	label_mode	=1,		! numbers are label numbers
	line_mode	=2,		! numbers are line numbers
	literal_mode	=3,		! numbers are literal values

	!+
	! The 'STEP' data structure is really just
	! a byte vector with the following characteristics.
	! It is isomorphic to the 'mode' structure.
	!-

	step_lvl_size	=4,		! number of bytes in each level.
	step_levels	=3,		! number of levels for step settings

	! each level of the step data strucutre has
	! the following entries

	step_line	=0,		! LINE or INSTRUCTION (a boolean)
	step_nosystem	=1,		! [no]SYSTEM steps (a boolean)
	step_over	=2,		! INTO or OVER (a boolean)
	step_source	=3,		! SOURCE or NOSOURCE

	! the three levels have the following
	! names and indices.

	default_step	=0,		! default system initialized step
	user_def_step	=1,		! user-set default step type
	override_step	=2,		! one-line override step type

    	! The data structure which holds the settings for SET SEARCH is 
    	! a byte vector with the following characteristics (it works the
    	! same as the STEP data structure above)
    	!
    	search_lvl_size = 2,
    	search_levels = 3,

    	! Each level of the data structure has the following entries
    	!
    	search_all = 0,
    	search_ident = 1,

    	! The three levels have the following names and indices
    	!
    	default_search = 0,
    	user_def_search = 1,
    	override_search = 2, 

	! The output configuration data structure is comparable to the
	! STEP or MODE data structures except that it has only one level.
	! It is used to store information pertaining to DEBUG's output setting

	output_size = 3,		! no of bytes in the data structure

	! the following entries are contained in the output config vector
	out_log 	= 0,		! LOG or NOLOG
	out_term 	= 1,		! TERMINAL or NOTERMINAL
	out_verify	= 2,		! VERIFY or NOVERIFY

	!+
	! used to identify the flavor of type between dbg$show_type and its 
	! callers.
	!-

	default 	= 0,
	override	= 1,

	!+
	! bit configurations for context flags.
	!-
	context_bits	=32,		! number of context bits

	! position of opcode byte at a breakpoint
	!
	opcode_byte	=0,		! opcode offset

	! location types for end range arguments
	!
	memory_loc	=0,		! memory location

	!+
	! names of exception types for traceback.
	!-
	not_an_exc	=0,		! line number searching for pc
	trap_exc	=1,		! pc of trap searching for line number
	fault_exc	=2,		! pc of fault searching for line number
	lookup_exc	=3;		! Like TRAP only don't do val_to_sym again.

	!+
	! Literals to define the various address spaces in the
	! VAX architecture.
	!-
LITERAL
	system_space	= %X'80000000',
	P1_SPACE	= %X'40000000' ;

LITERAL
	!+
	! language names
	!-
	lang_macro	= 0,
	lang_fortran	= 1,
	lang_bliss	= 2,
	lang_cobol	= 3,		! COBOL
	lang_basic	= 4,		! BASIC+2
	lang_pli	= 5,		! PL/I
	lang_pascal	= 6,		! Pascal
	lang_c		= 7,		! C

	max_language	= 6;		! languages 0 - 6 (C not supported yet)

	!+
	! the semantic stack is a BLOCKVECTOR for which the following fields
	! are defined...
	!-
FIELD
	stack_fields =

	  SET
		stk$v_base   = [0,0,0,0],	! base of block.
		stk$v_val1   = [0,0,32,0],	! first value field
		stk$v_val2   = [1,0,32,0],	! second value field 
		stk$v_nt_ptr = [2,0,32,0],	! pointer to name table entry
		stk$v_index  = [3,0,16,0],	! index field
		stk$v_offset = [3,16,16,0],	! offset field
		stk$v_pos    = [4,0,16,0],	! position field
		stk$v_type   = [4,16,8,0],	! token type field
		stk$v_size   = [4,24,8,0],	! size field
		stk$v_ext    = [5,0,1,0],	! sign extension bit
		stk$v_ref    = [5,1,1,0],	! is token a REF bit
		stk$v_immed  = [5,2,1,0],	! immediate mode bit
		stk$v_args   = [5,3,1,0],	! access actuals supplied bit
		stk$v_fldrf  = [5,4,2,0],	! <field_ref> supplied flag
		stk$v_dot    = [5,6,1,0],	! indirection flag
		stk$v_struc  = [5,8,4,0]	! kind of BLISS structure
	TES;

LITERAL
	stack_entry_siz = 6,			! no of longwords in a semantic_stack BLOCK
	no_struc	= 0,			! BLISS structure types
	vectr		= 1,
	bitvec		= 2,
	blok		= 3,
	blockvec	= 4;

MACRO
	semantic_stack = BLOCKVECTOR [20, stack_entry_siz] FIELD (stack_fields)%;

!	The command input stream (cis) is a linked list that the debugger
!	maintains to describe where it is currently taking input from.

FIELD

	cis_fields =

	SET

	input_type 	= [2,0,8,0],		! type of cis link
	input_ptr	= [4,0,32,0],		! pointer to input buffer
	next_link	= [8,0,32,0],		! ptr to next cis link
	init_addr	= [12,0,32,0],		! ptr to start of input buffer
	init_length	= [16,0,16,0],		! allocated buffer size
	remove_flag	= [18,0,1,0]		! is link flagged for removal

	TES;	

LITERAL
	cis_elements	= 19,			! cis block size (bytes)

!	The following are legal types for cis links

	cis_dbg$input	=  0,			! type dbg$input
	cis_rab		=  1,			! type RAB
	cis_inpbuf	=  2,			! type input buffer
	cis_acbuf	=  3;			! type action buffer

MACRO
	cis_link = BLOCK [cis_elements, BYTE] FIELD(cis_fields)% ;
		
!	dbggen.req - last line

!+
! General purpose structure for manipulation of singly linked lists.
! Each cell contains two long-word fields. The first is a pointer 
! to the next list link cell; the second is a pointer to the current 
! element in the list.
!-

LITERAL
	list_link_size	=  8;			! bytes in a list link cell

FIELD
	list_link_flds =

	  SET
		next_one_ptr	=  [0,0,32,0],	! Pointer to the next link cell
		this_one_ptr	=  [4,0,32,0]	! Pointer to the current object in the list
	  TES;

MACRO
	list_link = BLOCK [list_link_size, byte] FIELD (list_link_flds)%;

