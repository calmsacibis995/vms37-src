MODULE	PASERROR ( ! Pascal-Specific Debugger Modules Error Handler
	IDENT = 'V03-000'
	)=
BEGIN
!
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!
!++
!
! FACILITY:	VAX-11 PASCAL-SPECIFIC DEBUGGER MODULES
!
! ABSTRACT:
!
!	This module contains the error handling routines invoked
!	for any error encountered in the Primary or Expression
!	Interpreters.
!
! ENVIRONMENT:	VAX/VMS user mode
!
! AUTHOR: P. Hohensee, CREATION DATE: 22-JULY-1980
!
! MODIFIED BY:
!
!--

REQUIRE 'SRC$:PASPROLOG';
REQUIRE 'SRC$:PASSYNMAC';

!
! Table of Contents
!
FORWARD ROUTINE
	Bracket_Token		: NOVALUE,		! Bracket the current token
	Last_Reference		: NOVALUE,		! Create a string descriptor for the last reference made
	PAS$_Error_Handler;				! Primary Error Handler

!
! Address of place to put error message address. Set up by primary and
! expression interpreters as part of initialization
!
GLOBAL
	PAS$_Message_Vector	: LONG;

!
! Primary Interpreter global storage
!
EXTERNAL
	PAS$_Static_Desc	: PAS$_Primary_Desc,	! Static part of Result Descriptor
	PAS$_Nonstatic_Desc_Head: REF VECTOR,		! Pointer to head of nonstatic descriptor
	PAS$_Nonstatic_Desc_Tail: REF VECTOR,		! Pointer to tail of nonstatic descriptor
	PAS$_Descriptor_Size	: LONG;			! Current size, in longwords, of
							! Primary Descriptor

!
! Lexical Analysis Global Storage
!
EXTERNAL
	PAS$_Default_Radix	: LONG,			! Default number radix
	PAS$_Lex_Column		: WORD UNSIGNED,	! Current Column Number
	PAS$_Lex_LineDesc	: BLOCK [8, BYTE],	! Original Source Line Descriptor
	PAS$_Lex_SrcDesc	: BLOCK [8, BYTE];	! Source Line Descriptor

!
! Syntax Analysis Global Storage
!
EXTERNAL
	PAS$_Tokens		: VECTOR [4, LONG],	! Look-Ahead Tokens
	PAS$_Token_Values	: NULLVECTOR [4, 16],	! Look-Ahead Values
	PAS$_Token_Types	: VECTOR [4, LONG],	! Look-Ahead Value Types
	PAS$_Token_Positions	: VECTOR [4, LONG],	! Look-Ahead Token Column Numbers
	PAS$_Look_Ahead		: LONG;			! # of Tokens of Look-Ahead

!
! Semantic Analysis Global Storage
!
EXTERNAL
	PAS$_Is_Primary			: BYTE UNSIGNED,! True = in Primary Interpreter,
							! False = in Expression Interpreter

	PAS$_Current_Symbol_Header	: LONG,		! Pointer to symbol table head
	PAS$_Current_Symbol_Trailer	: LONG,		! Pointer to symbol table tail
	PAS$_Expr_Depth			: LONG,		! Current Expression Sttack Depth
	PAS$_Expr_Stack			: BLOCKVECTOR [Expr_Stack_Depth, Expr_S_Entry, BYTE]
		FIELD(Expression_Stack_Fields);		! Expression Stack


ROUTINE Bracket_Token (Descriptor) : NOVALUE =

!++
! FUNCTIONAL SPECIFICATION:
!
!	Fill in a string descriptor describing the current token
!
! FORMAL PARAMETERS:
!
!	Descriptor	- Address of a string descriptor
!
! IMPLICIT INPUTS:
!
!	Lexical and Syntax Analysis global storage
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
!--

    BEGIN
    MAP
	Descriptor	: REF BLOCK [8, BYTE];

    LITERAL
	CR = 13;				! Carriage Return

    LOCAL
	Token_String	: REF VECTOR [,BYTE];

    ! Fill in static fields
    !
    Descriptor[DSC$B_Dtype]	= DSC$K_Dtype_T;
    Descriptor[DSC$B_Class]	= DSC$K_Class_S;

    ! Bracket the current token
    !
    IF .PAS$_Lex_Column - .PAS$_Token_Positions[0] LSS 0
    THEN
	BEGIN
	Descriptor[DSC$W_Length]	= 0;
	Descriptor[DSC$A_Pointer]	= 0;
	END
    ELSE
	BEGIN
	Descriptor[DSC$W_Length]	= .PAS$_Lex_Column - .PAS$_Token_Positions[0];
	Descriptor[DSC$A_Pointer]	= .PAS$_Lex_SrcDesc[DSC$A_Pointer] -
					(.PAS$_Lex_Column - .PAS$_Token_Positions[0]);
	END;

    Token_String	= .Descriptor[DSC$A_Pointer];

    IF
	(IF .Descriptor[DSC$W_Length] EQL 0
	THEN
	    True
	ELSE
	    .Token_String[0] EQL CR)
    THEN
	BEGIN
	LOCAL
	    String_Length;

	! Scan backwards to a non-blank/CR
	!
	String_Length	= .PAS$_Lex_LineDesc[DSC$W_Length];
	Token_String	= .PAS$_Lex_LineDesc[DSC$A_Pointer] + .String_Length - 1;

	WHILE .String_Length GTR 0 DO
	    IF	(.(.Token_String)<B0_> NEQU CR)		AND
		(.(.Token_String)<B0_> NEQU %C' ')
	    THEN
		BEGIN
		LOCAL
		    Token_End;

		! Scan backwards to a blank
		!
		Token_End	= .Token_String;
		String_Length	= .String_Length - 1;
		Token_String	= .Token_String - 1;

		WHILE .String_Length GTR 0 DO
		    IF .(.Token_String)<B0_> EQLU %C' '
		    THEN
			EXITLOOP
		    ELSE
			BEGIN
			String_Length	= .String_Length - 1;
			Token_String	= .Token_String - 1;
			END;

		! Found a blank or beginning of string
		!
		Descriptor[DSC$W_Length]	= .Token_End - .Token_String;
		Descriptor[DSC$A_Pointer]	= .Token_String + 1;

		RETURN;
		END
	    ELSE
		BEGIN
		String_Length	= .String_Length - 1;
		Token_String	= .Token_String - 1;
		END;

	! Totally blank string
	!
	Descriptor[DSC$W_Length]	= 1;
	Descriptor[DSC$A_Pointer]	= UPLIT BYTE( %C' ' );
	END;

    END;

ROUTINE Last_Reference (Reference_Desc) : NOVALUE =

!++
! FUNCTIONAL SPECIFICATION:
!
!	Fill in a string descriptor for the last data reference made by the user
!
! FORMAL PARAMETERS:
!
!	Reference_Desc	- Address of a string descriptor to fill in
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
!--

    BEGIN
    MAP
	Reference_Desc	: REF BLOCK [, BYTE];

    LITERAL
	CR = 13;				! Carriage Return

    OWN
	Non_Delimiters	: VECTOR [256, BYTE] PRESET(
		['$'] = True, [','] = True, ['.'] = True, ['0'] = True, ['1'] = True, ['2'] = True, ['3'] = True,
		['4'] = True, ['5'] = True, ['6'] = True, ['7'] = True, ['8'] = True, ['9'] = True,
		['A'] = True, ['B'] = True, ['C'] = True, ['D'] = True, ['E'] = True, ['F'] = True, ['G'] = True,
		['H'] = True, ['I'] = True, ['J'] = True, ['K'] = True, ['L'] = True, ['M'] = True, ['N'] = True,
		['O'] = True, ['P'] = True, ['Q'] = True, ['R'] = True, ['S'] = True, ['T'] = True, ['U'] = True,
		['V'] = True, ['W'] = True, ['X'] = True, ['Y'] = True, ['Z'] = True, ['['] = True, ['\'] = True,
		[']'] = True, ['^'] = True, ['_'] = True, ['a'] = True, ['b'] = True, ['c'] = True, ['d'] = True,
		['e'] = True, ['f'] = True, ['g'] = True, ['h'] = True, ['i'] = True, ['j'] = True, ['k'] = True,
		['l'] = True, ['m'] = True, ['n'] = True, ['o'] = True, ['p'] = True, ['q'] = True, ['r'] = True,
		['s'] = True, ['t'] = True, ['u'] = True, ['v'] = True, ['w'] = True, ['x'] = True, ['y'] = True,
		['z'] = True);

    LOCAL
	Original_String_Length,
	String_Length,
	String_Pointer	: REF VECTOR [, BYTE];

    ! Scan backwards thru the source string, looking for a delimiter
    !
    Original_String_Length = String_Length  = .PAS$_Token_Positions[0] - 1;
    String_Pointer = .PAS$_Lex_LineDesc[DSC$A_Pointer];

    ! Check for trailing CR
    !
    IF .String_Pointer[.String_Length - 1] EQL CR
    THEN
	Original_String_Length = String_Length = .String_Length - 1;

    WHILE .String_Length NEQ 0 DO
	IF NOT .Non_Delimiters[.String_Pointer[.String_Length - 1]]
	THEN
	    ! Hit a delimiter
	    !
	    EXITLOOP
	ELSE
	    String_Length = .String_Length - 1;

    ! Set up descriptor
    !
    Reference_Desc[DSC$W_Length]  = .Original_String_Length - .String_Length;
    Reference_Desc[DSC$A_Pointer] = String_Pointer[.String_Length];
    END;

GLOBAL ROUTINE PAS$_Error_Handler (Sig, Mech, Enbl) =

!++
! FUNCTIONAL SPECIFICATION:
!
!	Pascal-Specific Debugger Modules Error Handler. All errors not known to
!	this handler are resignaled. For all informational messages, a message
!	is output and SS$_CONTINUE is returned. For all errors, an error message
!	vector is built, the establisher's routine value is set to STS$K_SEVERE,
!	and the stack is unwound to the establisher's caller.
!
! FORMAL PARAMETERS:
!
!	Sig	- Signal Argument Vector
!	Mech	- Mechanism Argument Vector
!	Enbl	- Enable Argument Vector
!
! IMPLICIT INPUTS:
!
!	Any and all data structures of interest to the Expression and Primary
!	Interpreters (see above GLOBAL and EXTERNAL declarations). Also, any
!	other data structures as may be necessary in the future.
!
! IMPLICIT OUTPUTS:
!
!	PAS$_Message_Vector	- Address of address of error message vector
!
! ROUTINE VALUE:
!
!	SS$_RESIGNAL or SS$_CONTINUE
!
!--

    BEGIN
    MAP
	Sig	: REF VECTOR,
	Mech	: REF VECTOR,
	Enbl	: REF VECTOR;

    BIND
	Cond		= Sig[1],
	Return_Value	= Mech[3];

    OWN
	Token_Desc	: BLOCK [8, BYTE];	! Token String Descriptor

    ! Check for certain hardware faults and convert them to DEBUG errors
    !
    SELECTONE .Cond OF
	SET

	[SS$_INTOVF]:	Cond = DBG$_INTOVER;	! Integer Overflow
	[SS$_FLTOVF]:	Cond = DBG$_FLTOVER;	! Floating Overflow
	[SS$_FLTUND]:	Cond = DBG$_FLTUNDER;	! Floating Underflow
	[SS$_ROPRAND]:	Cond = DBG$_ROPRAND;	! Reserved Operand Access
	[SS$_FLTDIV,
	 SS$_INTDIV]:	Cond = DBG$_DIVBYZERO;	! Attempted divide by zero

	[OTHERWISE]:	;

	TES;

    ! SELECT on the condition code
    !
    SELECTONE .Cond OF
	SET

	[DBG$_SYNTAX,	DBG$_NOTIDENT,	DBG$_NOTDOTDOT,	DBG$_NOTCOMMA,	DBG$_INVEXPR,
	 DBG$_ILLPATH,	DBG$_ILLOPER,	DBG$_NOTRPAREN,	DBG$_INTOVER,	DBG$_FLTOVER,
	 DBG$_FLTUNDER,	DBG$_UNDEXP,	DBG$_ROPRAND,	DBG$_INVPATH,	DBG$_LOWGTRUP,
	 DBG$_NILREF,	DBG$_UNDMOD,	DBG$_NOTINTID] :
	    BEGIN

	    Bracket_Token(Token_Desc);

	    ! Create the message vector
	    !
	    .PAS$_Message_Vector = DBG$NMAKE_ARG_VECT(.Cond, 1, Token_Desc);
	    END;

	[DBG$_NOSYMBOL,	DBG$_NOUNIQUE] :
	    ! Create the message vector. Sig[2] contains the address of the
	    ! pathname descriptor representing the symbol.
	    !
	    BEGIN
	    LOCAL
		Reference_String	: REF VECTOR [,BYTE];

	    DBG$NPATHDESC_TO_CS(.Sig[2], Reference_String);
	    .PAS$_Message_Vector = DBG$NMAKE_ARG_VECT(.Cond, 1, .Reference_String);
	    END;

	[DBG$_IMPTERMNO,	DBG$_INVNUMBER] :
	    !
	    ! Sig[2] contains a pointer to the start of the bad string,
	    ! Sig[3] contains a pointer to the character just after the bad string
	    !
	    BEGIN

	    ! Adjust for beginning and end of line
	    !
	    IF .Sig[2] LSSU .PAS$_Lex_LineDesc[DSC$A_Pointer]
	    THEN
		Sig[2] = .PAS$_Lex_LineDesc[DSC$A_Pointer];
	    IF .Sig[3] EQLA (.PAS$_Lex_LineDesc[DSC$A_Pointer] + .PAS$_Lex_LineDesc[DSC$W_Length] - 2)
	    THEN
		Sig[3] = .Sig[3] + 1;

	    Token_Desc[DSC$W_Length]	= .Sig[3] - .Sig[2];
	    Token_Desc[DSC$B_Dtype]	= DSC$K_Dtype_T;
	    Token_Desc[DSC$B_Class]	= DSC$K_Class_S;
	    Token_Desc[DSC$A_Pointer]	= .Sig[2];

	    .PAS$_Message_Vector = DBG$NMAKE_ARG_VECT(.Cond, 1, Token_Desc);
	    END;

	[DBG$_SUBOUTBNDS] :
	    ! Subscript out of bounds. Sig[2] contains the subscript value,
	    ! Sig[3] contains a pointer to the subscript type table entry
	    !
	    BEGIN
	    EXTERNAL ROUTINE
		DBG$NPAS_Type_Conv;

	    BIND
		Index_Type		= .Sig[3]
			: BLOCK [,BYTE] FIELD(Type_Fields);
	    OWN
		Subscript_Desc		: BLOCK [8, BYTE];

	    LOCAL
		Subscript_Value_Desc	: PAS$_Perm_Value_Desc;

	    Bracket_Token(Token_Desc);

	    ! Create a value descriptor and hand it over to the type convertor
	    ! to materialize the value of the subscript
	    !
	    Subscript_Value_Desc[DBG$W_Dhead_Length]	= PAS$S_VAL_Perm_Size;
	    Subscript_Value_Desc[DBG$B_Dhead_Type]	= DBG$K_Value_Desc;
	    Subscript_Value_Desc[DBG$B_Dhead_Lang]	= DBG$K_Pascal;
	    ZEROLONG(PAS$S_VAL_Perm_Size - 1, Subscript_Value_Desc[DBG$L_Dhead_Pointer]);
	    Subscript_Value_Desc[PAS$VAL_Dtype]		= .Index_Type[ORD_Dtype];
	    Subscript_Value_Desc[PAS$VAL_Size]		= 32;
	    Subscript_Value_Desc[PAS$VAL_Type_Entry]	= Index_Type;
	    Subscript_Value_Desc[PAS$VAL_Value]		= .Sig[2];

	    Subscript_Desc[DSC$W_Length]	= 0;
	    Subscript_Desc[DSC$B_Dtype]		= DSC$K_Dtype_T;
	    Subscript_Desc[DSC$B_Class]		= DSC$K_Class_S;
	    Subscript_Desc[DSC$A_Pointer]	= 0;

	    IF DBG$NPAS_Type_Conv(Subscript_Value_Desc, DBG$K_Default, DBG$K_External_Desc, Subscript_Desc, .PAS$_Message_Vector)
	    THEN
		! Create the message vector.
		!
		.PAS$_Message_Vector = DBG$NMAKE_ARG_VECT(.Cond, 2, Subscript_Desc, Token_Desc);

	    END;

    	[DBG$_NOLASTVAL, DBG$_NOPERMSYM] :
	    !
	    ! Message Vector already constructed
	    !
	    0;

	[DBG$_WRONGLANG] :
	    !
	    ! Primary or value descriptor for another language
	    !
	    .PAS$_Message_Vector = DBG$NMAKE_ARG_VECT(.Cond, 1, UPLIT BYTE(%ASCIC 'Pascal'));

	[DBG$_EXPSTKOVR,	DBG$_INVCHAR,	DBG$_PATHTLONG,		DBG$_NEEDMORE,
	 DBG$_ILLTYPE,		DBG$_NOTCOMPAT,	DBG$_ILLSETELEM,	DBG$_SETNOTCOMP,
	 DBG$_ILLINDTYPE,	DBG$_INDNOTCOMP,DBG$_NOTPTR,		DBG$_NOVALUE,
	 DBG$_NOTARRAY,		DBG$_NOCNVT,	DBG$_NODEPOSIT,		DBG$_INTEGER,
	 DBG$_FILEASGN,		DBG$_NOPRED,	DBG$_NOSUCC,		DBG$_ILLINSET,
	 DBG$_FILEVERS,		DBG$_STRNGVAL,	DBG$_STRVALRNG,		DBG$_NOEXAM,
    	 DBG$_NOFREE] :
	    !
	    ! No FAO arguments to set up
	    !
	    .PAS$_Message_Vector = DBG$NMAKE_ARG_VECT(.Cond);

	[DBG$_UNKNOWNTYP] :
	    !
	    ! Use the last token as the argument
	    !
	    BEGIN
	    LOCAL
		Name_String	: REF VECTOR [,BYTE];

	    Bracket_Token(Token_Desc);

	    IF DBG$NLIST_FREEZ(ROUND_BYTE_TO_LONG_(.Token_Desc[DSC$W_Length]), Name_String, .PAS$_Message_Vector)
	    THEN
		BEGIN
		Name_String[0]	= .Token_Desc[DSC$W_Length];
		MOVEBYTE(.Token_Desc[DSC$W_Length], .Token_Desc[DSC$A_Pointer], Name_String[1]);

		.PAS$_Message_Vector = DBG$NMAKE_ARG_VECT(.Cond, 2, .Name_String,
						UPLIT BYTE(%ASCIC 'Pascal') );
		END;

	    END;

	[DBG$_NOTLABEL,	DBG$_NOTLINE, DBG$_ILLREF] :
	    !
	    ! Sig[2] is the address of a pathname vector
	    !
	    BEGIN
	    BIND
		Pathname	= Sig[2]			: REF PTH$Pathname,
		Vector_Size	= Pathname[PTH$B_Totcnt]	: BYTE UNSIGNED,
		Pathvector	= Pathname[PTH$A_Pathvector]	: VECTOR;

	    ! Construct a message vector using the last element of the pathname
	    !
	    .PAS$_Message_Vector = DBG$NMAKE_ARG_VECT(.Cond, 1, .Pathvector[.Vector_Size - 1]);
	    END;

	[DBG$_NOFIELD] :
	    !
	    ! Sig[2] is the address of an ASCIC string
	    !
	    .PAS$_Message_Vector = DBG$NMAKE_ARG_VECT(.Cond, 1, .Sig[2]);

	[DBG$_NOACCESSR,	DBG$_NOACCESSW] :
	    !
	    ! Sig[2] is the inaccessible address
	    !
	    .PAS$_Message_Vector = DBG$NMAKE_ARG_VECT(.Cond, 1, .Sig[2]);

	[DBG$_NUMTRUNC,	DBG$_NOTCMPTRNC,DBG$_NOTCMPEXT,	DBG$_NOTCMP,	DBG$_VALOUTBNDS,	DBG$_STRNGPAD] :
	    !
	    ! Informational with no arguments. Write out the message and continue
	    !
	    BEGIN
	    IF NOT DBG$NOUT_INFO(.Cond)
	    THEN
		! The 'informational' error is not informational
		!
		Pascal_Bugcheck(PAS$K_NOTINFO);

	    RETURN SS$_CONTINUE;
	    END;

	[DBG$_ILLTAGVAL] :
	    !
	    ! Informational
	    !	Sig[2]	= Address of tag field ASCIC name string
	    !	Sig[3]	= Tag value
	    !
	    BEGIN
	    IF NOT DBG$NOUT_INFO(.Cond, 3, .Sig[2], .Sig[3], .Sig[3])
	    THEN
		Pascal_Bugcheck(PAS$K_NOTINFO);

	    RETURN SS$_CONTINUE;
	    END;

	[DBG$_WRONGVAR] :
	    !
	    ! Incorrect variant
	    ! Sig[2] 	= Address of ASCIC field name
	    ! Sig[3] 	= Current tag value
	    ! Sig[4] 	= Address of tag type table entry
	    ! Sig[5]	= Address of ASCIC tag field name
	    !
	    BEGIN
	    EXTERNAL ROUTINE
		DBG$NPAS_Type_Conv;

	    BIND
		Tag_Type		= .Sig[4]
			: BLOCK [,BYTE] FIELD(Type_Fields),
		Tag_Desc		= Token_Desc
			: BLOCK [8, BYTE];

	    LOCAL
		Tag_Value_Desc		: PAS$_Perm_Value_Desc;

	    ! Create a value descriptor and hand it over to the type convertor
	    ! to materialize the value of the tag field
	    !
	    Tag_Value_Desc[DBG$W_Dhead_Length]	= PAS$S_VAL_Perm_Size;
	    Tag_Value_Desc[DBG$B_Dhead_Type]	= DBG$K_Value_Desc;
	    Tag_Value_Desc[DBG$B_Dhead_Lang]	= DBG$K_Pascal;
	    ZEROLONG(PAS$S_VAL_Perm_Size - 1, Tag_Value_Desc[DBG$L_Dhead_Pointer]);
	    Tag_Value_Desc[PAS$VAL_Dtype]	= .Tag_Type[ORD_Dtype];
	    Tag_Value_Desc[PAS$VAL_Size]	= 32;
	    Tag_Value_Desc[PAS$VAL_Type_Entry]	= .Sig[4];
	    Tag_Value_Desc[PAS$VAL_Value]	= .Sig[3];

	    Tag_Desc[DSC$W_Length]	= 0;
	    Tag_Desc[DSC$B_Dtype]	= DSC$K_Dtype_T;
	    Tag_Desc[DSC$B_Class]	= DSC$K_Class_S;
	    Tag_Desc[DSC$A_Pointer]	= 0;

	    IF DBG$NPAS_Type_Conv(Tag_Value_Desc, DBG$K_Default, DBG$K_External_Desc, Tag_Desc, .PAS$_Message_Vector)
	    THEN
		! Write out the message
		!
		IF NOT DBG$NOUT_INFO(.Cond, 3, .Sig[2], Tag_Desc, .Sig[5])
		THEN
		    Pascal_Bugcheck(PAS$K_NOTINFO)
		ELSE
		    RETURN SS$_CONTINUE;
	    END;

	[DBG$_ILLSCALAR] :
	    !
	    ! Informational
	    ! Sig[2] contains the illegal value
	    !
	    BEGIN
	    BIND
		Reference_Desc	= Token_Desc	: BLOCK [8, BYTE];

	    Reference_Desc[DSC$W_Length]	= 0;
	    Reference_Desc[DSC$B_Class]		= DSC$K_Class_S;
	    Reference_Desc[DSC$B_Dtype]		= DSC$K_Dtype_T;
	    Reference_Desc[DSC$A_Pointer]	= 0;

	    Last_Reference(Reference_Desc);

	    IF NOT DBG$NOUT_INFO(.Cond, 3, Reference_Desc, .Sig[2], .Sig[2])
	    THEN
		Pascal_Bugcheck(PAS$K_NOTINFO);

	    RETURN SS$_CONTINUE;
	    END;

	[DBG$_BADSCALAR,	DBG$_BADSUBSCR] :
	    !
	    ! Informational
	    ! Sig[2] contains the value
	    !
	    BEGIN

	    IF NOT DBG$NOUT_INFO(.Cond, 2, .Sig[2], .Sig[2])
	    THEN
		Pascal_Bugcheck(PAS$K_NOTINFO);

	    RETURN SS$_CONTINUE;
	    END;

	[OTHERWISE] :
	    !
	    ! Resignal
	    !
	    RETURN SS$_RESIGNAL;

	TES;

    ! Unwind
    !
    Return_Value = STS$K_SEVERE;
    SETUNWIND();

    ! Dummy return value
    !
    SS$_RESIGNAL
    END;

END
ELUDOM
