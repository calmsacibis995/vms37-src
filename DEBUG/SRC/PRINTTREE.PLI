/*
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
*/

	%replace debug by '0'b;
/* this routine prints out trees used by the pli debug code */
/*
walk type codes:
		walk_type value		meaning
			0		return immediately
			1		order of creation
*/

pli_print_tree:	procedure(node_ptr) returns(fixed bin (31));
	dcl out file print;
	dcl print_tree_switch bit(32) globaldef static initial('0000'b4);
	dcl	1 head_node based,
			2 flink ptr,
			2 blink ptr,
			2 type fixed bin(31),
			2 id fixed bin(31),
			2 $a_str ptr,
			2 $w_sl fixed bin(15),
			2 reserved fixed bin(15),
			2 bit_flags bit(32) aligned,
			2 node_count fixed bin(31),
			2 original_verb fixed bin(31),
			2 fp ptr;
	dcl	1 any_node based,
			2 flink ptr,
			2 blink ptr,
			2 type fixed bin(31),
			2 id fixed bin(31),
			2 $a_str ptr,
			2 $w_sl fixed bin(15),
			2 reserved fixed bin(15);
	dcl	1 name_node based,
			2 flink ptr,
			2 blink ptr,
			2 type fixed bin(31),
			2 id fixed bin(31),
			2 $a_str ptr,
			2 $w_sl fixed bin(15),
			2 reserved fixed bin(15),
			2 kind fixed bin(31),
			2 sym_id ptr,
			2 arg_fl ptr,
			2 arg_bl ptr,
			2 pn_ptr ptr,
			/* needed? */
			2 valkind fixed bin(31),
			2 flags(32) bit,
			2 fp ptr,
			2 address ptr,
			2 offset ptr;
	dcl 	1	dss_node based,
			2 flink ptr,
			2 blink ptr,
			2 type fixed bin(31),
			2 id fixed bin(31),
			2 $a_str ptr,
			2 $w_sl fixed bin(15),
			2 reserved fixed bin(15),
			2 kind fixed bin(31),
			2 sym_cod fixed bin(31),
			2 arg_fl ptr,
			2 arg_bl ptr,
			2 pn_ptr ptr;
	dcl	1	dbg_node based,
			2 flink ptr,
			2 blink ptr,
			2 type fixed bin(31),
			2 id fixed bin(31),
			2 $a_str ptr,
			2 $w_sl fixed bin(15),
			2 reserved fixed bin(15),
			2 value ptr,
			2 radix fixed bin(31);
	dcl	1	vd_node based,
			2 flink ptr,
			2 blink ptr,
			2 type fixed bin(31),
			2 id fixed bin(31),
			2 $a_str ptr,
			2 $w_sl fixed bin(15),
			2 reserved fixed bin(15),
			2 stype fixed bin(31),
			2 ssize fixed bin(31),
			2 a_addr ptr,
			2 l_type fixed bin(31),
			2 l_size fixed bin(31),
			2 l_boff fixed bin(31);
	dcl	1	opr_node based,
			2 flink ptr,
			2 blink ptr,
			2 type fixed bin(31),
			2 id fixed bin(31),
			2 $a_str ptr,
			2 $w_sl fixed bin(15),
			2 reserved fixed bin(15),
			2 subtype fixed bin(31),
			2 arg_cur fixed bin(31),
			2 arg_min fixed bin(31),
			2 arg_max fixed bin(31),
			2 args(2),
				3 flink ptr,
				3 blink ptr;
	dcl	(node_ptr,start_ptr,return_ptr) ptr;
	dcl 	(i,j,k) fixed bin(31);
/*************************************************
* start of print_tree mainline			 *
*************************************************/
	open file(out) title('print$tree');
	on endpage(out);
	start_ptr=node_ptr;
	if print_tree_switch='0'b then return(1);
/* order of creation */
walk_case(1):
	call common_start(start_ptr);
	put list ('**** ordered by creation ****') file(out);
	return_ptr=null();
	do i=1 to node_ptr->head_node.node_count;
	return_ptr=null();
	call find_identified_node(i,return_ptr,start_ptr,node_ptr);
	if return_ptr = null() then do;
				put skip list('node:',i,' is missing')
				file(out);
				end;
	else call print_node(return_ptr);
	end;
	return(1);


bad_exit:;
	put skip list('*#*#* making bad exit return *#*#*') file(out);
	return(4);

/*************************************************
* common startup routine			 *
*************************************************/
common_start:	proc(p);
	dcl p ptr;
	if p->any_node.type ^= 1 then goto bad_exit;
	put skip list('PLI EXPRESSION TREE') file(out);
	put skip file(out);
	return;
end common_start;

/*************************************************
* find_identified_node				 *
*************************************************/
/*
routine looks for id, returning pointer in ret_ptr if found.
	search begins at node pointed to by start_ptr and
	continues until flink points to stop_ptr.
*/
find_identified_node:	proc(id,ret_ptr,start_ptr,stop_ptr);
	dcl id fixed bin(31);
	dcl (ret_ptr,start_ptr,stop_ptr) ptr;
	dcl i fixed bin(31);
	goto nodetype(start_ptr->any_node.type);
nodetype(0):; /*reserved node*/
nodetype(1):; /*head node*/
if debug then put skip list('**temp head %reserved',start_ptr->any_node.id)
		file(out);
	if start_ptr->head_node.id=id then do;
				ret_ptr=start_ptr;
				return;
				end;
	if start_ptr->any_node.flink=stop_ptr then return;
	call find_identified_node(id,ret_ptr,start_ptr->
						any_node.flink,stop_ptr);
	return;
nodetype(2):; /*name node function*/
nodetype(3):; /*name node data*/
nodetype(4):; /*name mode other (routine, module)*/
if debug then put skip list('***temp name node',start_ptr->any_node.id)
		file(out);
	if start_ptr->name_node.id=id then do;
				ret_ptr=start_ptr;
				return;
				end;
	if start_ptr->name_node.arg_fl ^= null then do;
				call find_identified_node(id,ret_ptr,
					start_ptr->name_node.arg_fl,
					start_ptr);
				if ret_ptr ^= null() then return;
				end;
	if start_ptr->any_node.flink=stop_ptr then return;
	call find_identified_node(id,ret_ptr,start_ptr->
						any_node.flink,stop_ptr);
	return;
nodetype(5):; /*operator node - infix or postfix operator*/
nodetype(6):; /*operator node - named function*/
nodetype(7):; /*operator node - named data*/
nodetype(8):; /*operator node - named other*/
nodetype(9):; /*operator node - pointer*/
nodetype(10):; /*operator node - arguments*/
nodetype(11):; /*operator node - subscripts*/
nodetype(12):; /*operator node - left parenthesis*/
nodetype(13):; /*operator node - continue*/
nodetype(17):; /*oprnd node - state = need more name*/
nodetype(18):; /*oprscr node - state = need more subscriptrs*/
nodetype(19):; /*oprcon node -state = need more operands*/
if debug then put skip list('***temp operator node',start_ptr->any_node.id)
		file(out);
	if start_ptr->opr_node.id=id then do;
				ret_ptr=start_ptr;
				return;
				end;
	
	do i=1 to start_ptr->opr_node.arg_cur;
		call find_identified_node(id,ret_ptr,
			start_ptr->opr_node.args(i).flink,
			start_ptr);
		if ret_ptr ^= null() then return;
	end;
	return;

nodetype(14):; /*pli value descriptor node*/
nodetype(15):; /*debug special symbol node*/
nodetype(16):; /*debug constant node*/
if debug then put skip list('***temp vd,dss,dbg',start_ptr->any_node.id)
		file(out);
	if start_ptr->dbg_node.id=id then ret_ptr=start_ptr;
	return;
end find_identified_node;


/*************************************************
* print_node                                     *
*************************************************/
print_node:	procedure(node_ptr);
	dcl node_ptr ptr;
	dcl (i,j,k) fixed bin(31);
	goto nodetype(node_ptr->any_node.type);
nodetype(0):; /*reserved node*/
	call print_common;
	return;
nodetype(1):; /*head node*/
	call print_common;
	begin;
		dcl 1 break_bit_flag
			 based(addr(node_ptr->head_node.bit_flags)),
			2 mode bit(4),	
			2 side bit(1),
			2 reserved bit(27);
		dcl (i,j,k) fixed bin(31);
		dcl dc_mode(0:2) char(30) var static initial(
			'debug address expression',
			'pli expression',
			'c expression');
		dcl dc_side(0:1) char(30) var static initial(
			'r.h.s. of assignment',
			'l.h.s. of assignment');
		dcl dc_debug_verb(13) char(30) var static initial(
			'at_sign',
			'call',
			'cancel',
			'define',
			'deposit',
			'evaluate',
			'examine',
			'exit',
			'go',
			'set',
			'show',
			'step',
			'help');
		i=0;
		j=0;
		unspec(i)=unspec(break_bit_flag.mode);
		unspec(j)=unspec(break_bit_flag.side);
		put skip edit('    mode:',dc_mode(i),'    ',dc_side(j))
			(a,a,a,a) file(out);
		put skip edit('    node count:',
			trimint(node_ptr->head_node.node_count),
			'    debug verb:',
			dc_debug_verb(node_ptr->head_node.original_verb),
			'    fp:',hex(node_ptr->head_node.fp))
			(a,a,a,a,a,a) file(out);
	end;	
	return;
nodetype(2):; /*name node function*/
nodetype(3):; /*name node data*/
nodetype(4):; /*name mode other (routine, module)*/
	call print_common;
	begin;
		dcl dc_kind(0:12) char(30) var static initial(
		'invalid',
		'module',
		'routine',
		'block',
		'label',
		'line',
		'data',
		'type',
		'entry',
		'notunique',
		'typcomp',
		'variant',
		'invocnum');
		dcl (i,j) fixed bin(31);
		dcl 1 pn_desc based(node_ptr->name_node.pn_ptr),
			2 totcnt fixed bin(7),
			2 pathcnt fixed bin(7),
			2 locinvoc fixed bin(7),
			2 reserved fixed bin(7),
			2 invocnum fixed bin(31),
			2 pathvector(50) ptr;
		dcl 1 pn_cs based(pn_desc.pathvector(i)),
			2 count fixed bin(7),
			2 str char(pn_cs.count);

	put skip edit('    kind code:',dc_kind(node_ptr->name_node.kind),
		'    sym_id:',hex(node_ptr->name_node.sym_id))
		(a,a,a,a) file(out);
	if node_ptr->name_node.arg_fl ^= null() then
		put skip edit(
		'    subscript flink:',trimint(node_ptr->name_node.arg_fl->
					any_node.id),'(',
			hex(node_ptr->name_node.arg_fl),')')
		(a,a,a,a,a) file(out);
	if node_ptr->name_node.arg_fl ^= null() then
		put edit(
		'    subscript blink:',trimint(node_ptr->name_node.arg_bl->
					any_node.id),'(',
			hex(node_ptr->name_node.arg_fl),')')
			(a,a,a,a,a) file(out);
	if node_ptr->name_node.pn_ptr ^= null()
	 then do;
		put skip edit(
			'    pathname vector...totcnt:',
			trimintt(pn_desc.totcnt),
			'  pathcnt:',trimintt(pn_desc.pathcnt),
			'  locinvoc:',trimintt(pn_desc.locinvoc),
			'  invocnum:',trimint(pn_desc.invocnum))
			(a) file(out);
		put skip edit('    pathname...''') (a) file(out);
			do i=1 to pn_desc.totcnt;
			put edit(pn_cs.str) (a) file(out);
			if i=pn_desc.locinvoc then
				put edit(' ',trimint(pn_desc.invocnum))(a)
				 file(out);
			if i ^= pn_desc.totcnt
			then do;
				if i < pn_desc.pathcnt then put edit('\')(a)
								 file(out);
				else put edit('.')(a) file(out);
			     end;
			end;
			put edit('''')(a) file(out);
		end;
	end;
	return;
nodetype(5):; /*operator node - infix or postfix operator*/
nodetype(6):; /*operator node - named function*/
nodetype(7):; /*operator node - named data*/
nodetype(8):; /*operator node - named other*/
nodetype(9):; /*operator node - pointer*/
nodetype(10):; /*operator node - arguments*/
nodetype(11):; /*operator node - subscripts*/
nodetype(12):; /*operator node - left parenthesis*/
nodetype(13):; /*operator node - continue*/
nodetype(17):; /*oprnd node - state = need more name*/
nodetype(18):; /*oprscr node - state = need more subscriptrs*/
nodetype(19):; /*oprcon node -state = need more operands*/
	call print_common;
	put skip edit('    subtype:',trimint(node_ptr->opr_node.subtype),
		'  current args:',trimint(node_ptr-> opr_node.arg_cur),
		'  minimum args:',trimint(node_ptr-> opr_node.arg_min),
		'  maximum args:',trimint(node_ptr-> opr_node.arg_max))
		(a) file(out);
	do i=1 to node_ptr->opr_node.arg_cur;
		put skip edit('    arg(',
			trimint(i),
			'):    flink:',
			trimint(node_ptr->opr_node.args(i).flink->any_node.id),
			'(',
			hex(node_ptr->opr_node.args(i).flink),
			')',
			'    blink:',
			trimint(node_ptr->opr_node.args(i).blink->any_node.id),
			'(',
			hex(node_ptr->opr_node.args(i).blink),
			')')
			(a) file(out);
	end;
	return;
nodetype(14):; /*pli value descriptor node*/
	call print_common;
		begin;
		dcl 1 split based(ptr),
			2 p fixed bin(7),
			2 s fixed bin(7);
		dcl ptr ptr;
		dcl dc_datatype(28) char(30) var static initial(
			'pictured_',
			'fixed_bin_',
			'float_bin_',
			'fixed_dec_',
			'float_dec_',
			'complex_fixed_bin_',
			'complex_float_bin_',
			'complex_fixed_dec_',
			'complex_float_dec_',
			'char_',
			'char_var_',
			'bit_',
			'bit_var_',
			'bit_aligned_',
			'pointer_',
			'offset_ ',
			'area_',
			'file_',
			'label_',
			'entry_',
			'format_',
			'dope_',
			'data_',
			'structure_',
			'bif_',
			'cond_',
			'array_',
			'any_type_');
		dcl inthex ptr;
		ptr=addr(node_ptr->vd_node.ssize);
		unspec(inthex)=unspec(node_ptr->vd_node.ssize);
		put skip edit(
		'    sec. datatype:',
		dc_datatype(node_ptr->vd_node.stype),
		'    sec. size:',
		hex(inthex),
		' (precision:',
		trimintt(p),
		'  size:',
		trimintt(s),
		')')
		(a) file(out);
		ptr=addr(node_ptr->vd_node.l_size);
		unspec(inthex)=unspec(node_ptr->vd_node.l_size);
		put skip edit(
		'    addr data ptr:',
		hex(node_ptr->vd_node.a_addr),
		' type:',
		dc_datatype(node_ptr->vd_node.l_type),
		'    size:',
		hex(inthex),
		' (precision:',
		trimintt(p),
		'  size:',
		trimintt(s),
		')')
		(a) file(out);
		end;
	return;
nodetype(15):; /*debug special symbol node*/
	call print_common;
	return;
nodetype(16):; /*debug constant node*/
	call print_common;
	put skip edit(
	'    value:',hex(node_ptr->dbg_node.value),
	'    radix:',trimint(node_ptr->dbg_node.radix))
	(a) file(out);
	return;
print_common:	procedure;
	dcl token_str char(node_ptr->any_node.$w_sl)
		 based(node_ptr->any_node.$a_str);
	dcl dc_type(0:19) char(30) var static initial(
		'***reserved***',
		'head node',
		'namef node',
		'named node',
		'nameo node',
		'opriop node',
		'oprnf node',
		'oprnd node',
		'oprno node',
		'oprptr node',
		'oprarg node',
		'oprscr node',
		'oprlp node',
		'oprcon node',
		'plivd node',
		'dss node',
		'dbgcon node',
		'oprnd:state=need more',
		'oprscr:state=need more',
		'oprcon:state=need more');
	put skip file(out);
	put skip edit
			(trimint(node_ptr->any_node.id),
			'(',hex(node_ptr),')  ',
			dc_type(node_ptr->any_node.type),
			'flink:',
			trimint(node_ptr->any_node.flink->any_node.id),
			'(',
			hex(node_ptr->any_node.flink),
			')   ',
			'blink:',
			trimint(node_ptr->any_node.blink->any_node.id),
			'(',
			hex(node_ptr->any_node.blink),
			')   ')
		(a(3),a,a,a,a(15),a,a(3),a,a(8),a,a,a(3),a,a(8),a) file(out);
	put skip edit('    token(',trimsint(node_ptr->any_node.$w_sl),'):''',
		token_str,'''') (a,a,a,a,a) file(out);
	return;
end print_common;
end print_node;
hex:	proc(p) returns(char(8));
	dcl p ptr;
	dcl s bit(32) aligned;
	dcl digit(0:15) char(1) static initial('0','1','2','3','4','5','6',
			'7','8','9','A','B','C','D','E','F');
	dcl (i,n) fixed bin(15),r char(8);
	unspec(s)=unspec(p);
	do i=1 to 8;
	unspec(n)=substr(s,4*(i-1)+1,4);
	substr(r,9-i,1)=digit(n);
	end;
	return(r);
end hex;
trimstr:	proc(x) returns(char(132) var);
	dcl x char(*) var;
	return(substr(x,verify(x,' ')));
end trimstr;
 
trimint:	proc(x) returns(char(132) var);
	dcl x fixed bin(31);
	return(substr(character(x),verify(character(x),' ')));
end trimint;

trimsint:	proc(x) returns(char(132) var);
	dcl x fixed bin(15);
	return(substr(character(x),verify(character(x),' ')));
end trimsint;
trimintt:	proc(x) returns(char(132) var);
	dcl x fixed bin(7);
	return(substr(character(x),verify(character(x),' ')));
end trimintt;
end pli_print_tree;
