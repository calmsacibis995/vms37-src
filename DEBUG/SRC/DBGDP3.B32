MODULE DBGDP3 ( IDENT = 'V03-000') =
BEGIN

!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
! FACILITY:	DEBUG
!
!++
! FUNCTIONAL DESCRIPTION:
!	DEPOSIT ROUTINES FOR STARLET DEBUG FACILITY
!
! Version:	1.20
!
! History:
!	Author:
!		Carol Peters, 21 Jul 1976: Version 01
!
!	Modified by:
!		Mike Candela, 25-APR-79
!		TKM,  6-AUG-79
!		TKM,  12-SEP-79
!		DLP,  3-JAN-80
!		DLP,  15-JAN-80
!		DLP,  15-JAN-80
!		KAN,  28-APR-80
!		Richard Title, 5-AUG-81
!
! Revision history:
! 1.01	22-SEP-78	DAR	Deleted require file LISTEL.
! 1.02	25-SEP-78	MCC	Deleted require file SYSLIT
! 1.03	27-SEP-78	MCC	Converted dbg$cnv...routines to BUILTIN
!				calls, streamlined diagnostics in symbol_deposit
! 1.04	 8-NOV-78	MCC	Changed dbg$examine_cmd to set the global
!				pointer dbg$gl_lis_ptr so that access to
!				the command arg list will be possible
!				when examining BLISS structures.
! 1.05	13-NOV-78	DAR	Fixed cause of informational message in dbg$reg_match
!				Fixed up dbg$deposit_cmd and symbol_deposit, they
!				now handle numeric string data types and use the
!				new command argument list format.
! 1.06	04-DEC-78	DAR	DBG$EVALUAT_CMD now handles DSC$K_DTYPE_FLD and
!				tries to output a register name if the address
!				is that of a register.
! 1.07	 9-DEC-78	MCC	Made changes to allow depositing into BLISS
!				structures or variables with field references.
!				This included the addition of the routine bli_write_mem.
!				Also changed dbg$evaluate_cmd to handle field refs
! 1.08	18-DEC-78	DAR	Added support for depositing packed decimal data
! 1.09	24-APR-79	MCC	Modified dbg$examine_cmd to first check that a
!				variable to be examined is not a reference to
!				a permanent symbol before resetting the type
!				field to -1. (Bug fix)
! 1.10	24-APR-79	MCC	Fixed a bug in symbol_deposit which prevented
!				deposits into globals with field references from
!				working correctly.
! 1.11   6-AUG-79	TKM	Changed OUTPUT_MEM_LOC to pass the symbol name
!				name table pointer to dbg$out_typ_val if it had
!				one.
! 1.12   12-SEP-79	TKM     Changed deposit command to handle new data types
!
! 1.13	28-NOV-79	BAO	Added support for override types.
!
! 1.14  3-JAN-80  	DLP	Changed size for asci output to reflect overrides
!
! 1.15	15-JAN-80	DLP	Added support for word integer to single or
!				double precision float Deposits.
!
! 1.15  16-JAN-80	DLP	Added check for asci deposits crossing
!				page boundaries (bug fix).
! 1.17	16-JAN-80	MCC	Fixed bug with default type of ascii when doing
!				deposits.	
! 1.18	20-Feb-80	JBD	Null strings are now output without an access
!				violation, which is to say, nothing is output.
! 1.19	21-Feb-80	JBD	Made EV <string-symbol> work. Also made deposits
!				into null strings work.
! 1.20	28-APR-80	KAN	Split this module (DBGDP3) away from DBGEXA.
! 3.01   5-AUG-81	 RT	Modified dbg$deposit_type_b to handle
!				conversion from ascii string.
!--

! TABLE OF CONTENTS
!--
FORWARD ROUTINE
	dbg$deposit_type_ubs ,
	dbg$deposit_type_nz ,
	dbg$deposit_type_t ,
	dbg$deposit_type_b ,
	dbg$deposit_type_qu ,
	dbg$deposit_type_lu ,
	dbg$deposit_type_wu ,
	dbg$deposit_type_bu ,
	dbg$deposit_type_v ,
	dbg$deposit_type_z ;

!
! Require files:
!

REQUIRE 'src$:dbgprolog.req';
REQUIRE 'SRC$:DBGGEN.REQ';


EXTERNAL

	dbg$dyn_str_desc,			! pointer to descriptor for dynamic string
	dbg$deposit_source : BLOCK[,BYTE],
	dbg$deposit_target : BLOCK[,BYTE],
	dbg$deposit_lengvec : VECTOR[,BYTE];


EXTERNAL ROUTINE
	dbg$sta_lookup_gbl,
	C74$ME4B,
	C74$MS4B : NOVALUE ,
	dbg$digit_scan;

BIND
	dyn_str_copy = uplit(%ASCIC'STR$COPY_DX'),
	max_packed_size = uplit(31);

LITERAL
	DSC$K_DTYPE_CAS = 127,
	flting_buf_len  = 30,
	float_buf_len	= 15,
	dbl_buf_len	= 25,
	float_fra_dig	= 7,
	dbl_fra_dig	= 16,
	digits_in_int	= 1,
	scale_factor	= 0,
	float_exp_dig	= 2,
	dbl_exp_dig	= 2,
	MIN_BYTE_VAL = -128,
	MAX_BYTE_VAL = 127,
	MAX_UBYTE_VAL = 255,
	MIN_WORD_VAL = -32768,
	MAX_WORD_VAL = 32767,
	MAX_UWORD_VAL = 65535,
	MIN_LONG_VAL = -2147483648,
	MAX_LONG_VAL = 2147483647,
	max_inst_len	= 80,		! maximum number of binary bytes in an instruction
	page_size = 512;		! number of bytes / page of memory


MACRO	dsc$w_bit_offst	= 8, 0, 16, 0 %,	!fields for the descriptor
	dsc$_sgn_ext	= 10, 0, 1, 0 %;	!of an unalligned bit string

OWN
	sd : block [12,byte],
	dstat;


BUILTIN
	CVTFL,CVTDL,CVTLF,CVTDF,CVTLD,CVTFD,
	CVTLP,CVTSP,CVTPL,CMPP,CVTPS;

GLOBAL ROUTINE dbg$deposit_type_z =

	! UNSPECIFIED, 0
	BEGIN
	!CASE .dbg$deposit_source[dsc$b_dtype] FROM dsc$k_dtype_z to dsc$k_dtype_ubs
	!    OF
	!    SET
	!    [dsc$k_dtype_l] :
	!	BEGIN
	!	END;
	!    [dsc$k_dtype_f] :
	!	BEGIN
	!	END;
	!    [dsc$k_dtype_d] :
	!	BEGIN
	!	END;
	!    [dsc$k_dtype_t] :
	!	BEGIN
	!	END;
	!    [dsc$k_dtype_ubs] :
	!	BEGIN
	!	END;
	!    [INRANGE, OUTRANGE] :
	!	BEGIN
	!	END;
	!    TES;
	RETURN false;
	END;

GLOBAL ROUTINE dbg$deposit_type_v =

	! ALLIGNED BIT STRING, 1
	BEGIN
	!CASE .dbg$deposit_source[dsc$b_dtype] FROM dsc$k_dtype_z to dsc$k_dtype_ubs
	!    OF
	!    SET
	!    [dsc$k_dtype_l] :
	!	BEGIN
	!	END;
	!    [dsc$k_dtype_f] :
	!	BEGIN
	!	END;
	!    [dsc$k_dtype_d] :
	!	BEGIN
	!	END;
	!    [dsc$k_dtype_t] :
	!	BEGIN
	!	END;
	!    [dsc$k_dtype_ubs] :
	!	BEGIN
	!	END;
	!    [INRANGE, OUTRANGE] :
	!	BEGIN
	!	END;
	!    TES;
	RETURN false;
	END;

GLOBAL ROUTINE dbg$deposit_type_bu =

	! BYTE LOGICAL, 2
	BEGIN
	SELECTONE .dbg$deposit_source[dsc$b_dtype]
	    OF
	    SET
	    [DSC$K_DTYPE_B,
	     DSC$K_DTYPE_BU,
	     DSC$K_DTYPE_W,
	     DSC$K_DTYPE_WU,
	     DSC$K_DTYPE_L,
	     DSC$K_DTYPE_LU] :
		BEGIN
		IF ..dbg$deposit_source[DSC$A_POINTER] GTRU MAX_UBYTE_VAL
			AND
		   (..dbg$deposit_source[DSC$A_POINTER] GTR MAX_BYTE_VAL
			OR
		    ..dbg$deposit_source[DSC$A_POINTER] LSS MIN_BYTE_VAL)
		THEN
		    SIGNAL(DBG$_NUMTRUNC);
		(.dbg$deposit_target[DSC$A_POINTER])<0,8> = ..dbg$deposit_source[DSC$A_POINTER];
		END;
	    [dsc$k_dtype_f] :
		BEGIN
			CVTFL(.dbg$deposit_source[dsc$a_pointer], .dbg$deposit_source[dsc$a_pointer]);
		(.dbg$deposit_target[dsc$a_pointer])<0,8> = .(.dbg$deposit_source[dsc$a_pointer])<0,8>
		END;
	    [dsc$k_dtype_d] :
		BEGIN
			CVTDL(.dbg$deposit_source[dsc$a_pointer], .dbg$deposit_source[dsc$a_pointer]);
			(.dbg$deposit_target[dsc$a_pointer])<0,8> = .(.dbg$deposit_source[dsc$a_pointer])<0,8>
		END;
	    [dsc$k_dtype_t] :
		BEGIN
		RETURN false;
		END;
	    [dsc$k_dtype_ubs] :
		BEGIN
			IF .dbg$deposit_source[dsc$w_length] GTR 8
			    then SIGNAL(DBG$_NUMTRUNC);
			(.dbg$deposit_target[dsc$a_pointer])<0,8> =
			    (IF .dbg$deposit_source[dsc$_sgn_ext] 
				THEN
			    .(.dbg$deposit_source[dsc$a_pointer])<.dbg$deposit_source[dsc$w_bit_offst],
						   .dbg$deposit_source[dsc$w_length], 1>
				ELSE
			    .(.dbg$deposit_source[dsc$a_pointer])<.dbg$deposit_source[dsc$w_bit_offst],
						   .dbg$deposit_source[dsc$w_length], 0> );
			END;
	    [OTHERWISE] :
		BEGIN
		RETURN false;
		END;
	    TES;
	RETURN true;
	END;

GLOBAL ROUTINE dbg$deposit_type_wu =

	! WORD LOGICAL, 3
	BEGIN
	SELECTONE .dbg$deposit_source[dsc$b_dtype]
	    OF
	    SET
	    [DSC$K_DTYPE_B] :
		BEGIN
		(.dbg$deposit_target[DSC$A_POINTER])<0,16> = .(.dbg$deposit_source[DSC$A_POINTER])<0,8,1>;
		END;
	    [DSC$K_DTYPE_BU] :
		BEGIN
		(.dbg$deposit_target[DSC$A_POINTER])<0,16> = .(.dbg$deposit_source[DSC$A_POINTER])<0,8>;
		END;
	    [DSC$K_DTYPE_W,
	     DSC$K_DTYPE_WU,
	     DSC$K_DTYPE_L,
	     DSC$K_DTYPE_LU] :
		BEGIN
		IF ..dbg$deposit_source[DSC$A_POINTER] GTRU MAX_UWORD_VAL
			AND
		  (..dbg$deposit_source[DSC$A_POINTER] GTR MAX_WORD_VAL
			OR
		   ..dbg$deposit_source[DSC$A_POINTER] LSS MIN_WORD_VAL)
		THEN
		    SIGNAL(DBG$_NUMTRUNC);
		(.dbg$deposit_target[DSC$A_POINTER])<0,16> = ..dbg$deposit_source[DSC$A_POINTER];
		END;
	    [dsc$k_dtype_f] :
		BEGIN
			CVTFL(.dbg$deposit_source[dsc$a_pointer], .dbg$deposit_source[dsc$a_pointer]);
			(.dbg$deposit_target[dsc$a_pointer])<0,16> = .(.dbg$deposit_source[dsc$a_pointer])<0,16>
		END;
	    [dsc$k_dtype_d] :
		BEGIN
			CVTDL(.dbg$deposit_source[dsc$a_pointer], .dbg$deposit_source[dsc$a_pointer]);
			(.dbg$deposit_target[dsc$a_pointer])<0,16> = .(.dbg$deposit_source[dsc$a_pointer])<0,16>
		END;
	    [dsc$k_dtype_t] :
		BEGIN
		LOCAL p:vector[16,byte],f,l;
		LOCAL
		    t:vector[32,byte],a,sc,newsrc:block[12,byte];
		dstat = dbg$digit_scan(.dbg$deposit_source[dsc$a_pointer],.dbg$deposit_source[dsc$w_length],newsrc);
		IF NOT .dstat
		THEN
		    SIGNAL(dbg$_invnumber,1,dbg$deposit_source);
		sc = .dbg$deposit_source[dsc$w_length] - 1;
		a = (IF .dstat EQL 3
		     THEN
			.dbg$deposit_source[dsc$a_pointer]
		     ELSE
			BEGIN
			t[0] = %C'+';
			IF .sc GTR 30
			THEN
			    BEGIN
			    SIGNAL(dbg$_stgtrunc);
			    sc = 30 ;
			    END;
			sc = .sc + 1 ;
			ch$move(.sc,.dbg$deposit_source[dsc$a_pointer],t[1]);
			t[0] 
			END );
		f = 0;
		IF CVTSP(sc,.a,max_packed_size,p[0]) EQL 0
		THEN
		    BEGIN
		    f = 1 ;
		    SIGNAL(dbg$_numtrunc);
		    END;
		IF CVTPL(max_packed_size,p[0],l) EQL 0 AND NOT .f
		THEN
		    BEGIN
		    f = 1 ;
		    SIGNAL(dbg$_numtrunc);
		    END;
		IF .l LSS 0 THEN l = - .l ;
		IF .l GTR 65535 AND NOT .f
		THEN
		    SIGNAL(dbg$_numtrunc);
		(.dbg$deposit_target[dsc$a_pointer])<0,16>= .l<0,16> ;
			END;
	    [dsc$k_dtype_ubs] :
		BEGIN
			IF .dbg$deposit_source[dsc$w_length] GTR 16
			    then SIGNAL(DBG$_NUMTRUNC);
			(.dbg$deposit_target[dsc$a_pointer])<0,16> =
			    (IF .dbg$deposit_source[dsc$_sgn_ext] 
				THEN
			    .(.dbg$deposit_source[dsc$a_pointer])<.dbg$deposit_source[dsc$w_bit_offst],
						   .dbg$deposit_source[dsc$w_length], 1>
				ELSE
			    .(.dbg$deposit_source[dsc$a_pointer])<.dbg$deposit_source[dsc$w_bit_offst],
						   .dbg$deposit_source[dsc$w_length], 0> );
			END;
	    [OTHERWISE] :
		BEGIN
		RETURN false;
		END;
	    TES;
	RETURN true;
	END;

GLOBAL ROUTINE dbg$deposit_type_lu =

	! LONGWORD LOGICAL, 4
			BEGIN
			SELECTONE .dbg$deposit_source[dsc$b_dtype]
			    OF
			    SET
			    [DSC$K_DTYPE_B] :
				BEGIN
				(.dbg$deposit_target[DSC$A_POINTER])<0,32> = .(.dbg$deposit_source[DSC$A_POINTER])<0,8,1>;
				END;
			    [DSC$K_DTYPE_BU] :
				BEGIN
				(.dbg$deposit_target[DSC$A_POINTER])<0,32> = .(.dbg$deposit_source[DSC$A_POINTER])<0,8>;
				END;
			    [DSC$K_DTYPE_W] :
				BEGIN
				(.dbg$deposit_target[DSC$A_POINTER])<0,32> = .(.dbg$deposit_source[DSC$A_POINTER])<0,16,1>;
				END;
			    [DSC$K_DTYPE_WU] :
				BEGIN
				(.dbg$deposit_target[DSC$A_POINTER])<0,32> = .(.dbg$deposit_source[DSC$A_POINTER])<0,16>;
				END;
			    [DSC$K_DTYPE_L,
			     DSC$K_DTYPE_LU] :
				BEGIN
				(.dbg$deposit_target[DSC$A_POINTER])<0,32> = ..dbg$deposit_source[DSC$A_POINTER];
				END;
			    [dsc$k_dtype_f] :
				BEGIN
					CVTFL(.dbg$deposit_source[dsc$a_pointer], .dbg$deposit_source[dsc$a_pointer]);
					(.dbg$deposit_target[dsc$a_pointer]) = ..dbg$deposit_source[dsc$a_pointer];
				END;
			    [dsc$k_dtype_d] :
				BEGIN
					IF CVTDL(.dbg$deposit_source[dsc$a_pointer], .dbg$deposit_source[dsc$a_pointer]) EQL 0
					    THEN SIGNAL(DBG$_NUMTRUNC);
					(.dbg$deposit_target[dsc$a_pointer]) = ..dbg$deposit_source[dsc$a_pointer];
				END;
			    [dsc$k_dtype_t] :
				BEGIN
				LOCAL p:vector[16,byte],f;
				LOCAL
				    t:vector[32,byte],a,sc,newsrc:block[12,byte];
				dstat = dbg$digit_scan(.dbg$deposit_source[dsc$a_pointer],.dbg$deposit_source[dsc$w_length],newsrc);
				IF NOT .dstat
				THEN
				    SIGNAL(dbg$_invnumber,1,dbg$deposit_source);
				sc = .dbg$deposit_source[dsc$w_length] - 1;
				a = (IF .dstat EQL 3
				     THEN
					.dbg$deposit_source[dsc$a_pointer]
				     ELSE
					BEGIN
					t[0] = %C'+';
					IF .sc GTR 30
					THEN
					    BEGIN
					    SIGNAL(dbg$_stgtrunc);
					    sc = 30 ;
					    END;
					sc = .sc + 1 ;
					ch$move(.sc,.dbg$deposit_source[dsc$a_pointer],t[1]);
					t[0] 
					END );
				f = 0 ;
				IF CVTSP(sc,.a,max_packed_size,p[0]) EQL 0
				THEN
				    BEGIN
				    f = 1 ;
				    SIGNAL(dbg$_numtrunc);
				    END;
				IF CVTPL(max_packed_size,p[0],.dbg$deposit_target[dsc$a_pointer])
					EQL 0 AND NOT .f
				THEN
				    SIGNAL(dbg$_numtrunc);

				END;
			    [dsc$k_dtype_ubs] :
				BEGIN
					(.dbg$deposit_target[dsc$a_pointer]) =
					    (IF .dbg$deposit_source[dsc$_sgn_ext] 
						THEN
					    .(.dbg$deposit_source[dsc$a_pointer])<.dbg$deposit_source[dsc$w_bit_offst],
								   .dbg$deposit_source[dsc$w_length], 1>
						ELSE
					    .(.dbg$deposit_source[dsc$a_pointer])<.dbg$deposit_source[dsc$w_bit_offst],
								   .dbg$deposit_source[dsc$w_length], 0> );
				END;
			    [OTHERWISE] :
				BEGIN
				RETURN false;
				END;
			    TES;
			RETURN true;
			END;

GLOBAL ROUTINE dbg$deposit_type_qu =

	! QUADWORD LOGICAL, 5
			BEGIN
			SELECTONE .dbg$deposit_source[dsc$b_dtype]
			    OF
			    SET
			    [dsc$k_dtype_l] :
				BEGIN
				(.dbg$deposit_target[DSC$A_POINTER]) = ..dbg$deposit_source[DSC$A_POINTER];
				END;
			    [dsc$k_dtype_f] :
				BEGIN
					CVTFL(.dbg$deposit_source[dsc$a_pointer], .dbg$deposit_source[dsc$a_pointer]);
					(.dbg$deposit_target[dsc$a_pointer]) = ..dbg$deposit_source[dsc$a_pointer];
				END;
			    [dsc$k_dtype_d] :
				BEGIN
					CVTDL(.dbg$deposit_source[dsc$a_pointer], .dbg$deposit_source[dsc$a_pointer]);
					(.dbg$deposit_target[dsc$a_pointer]) = ..dbg$deposit_source[dsc$a_pointer];
				END;
			    [dsc$k_dtype_t] :
				BEGIN
				ch$move(12,dbg$deposit_source,sd);
				dstat = dbg$digit_scan(.dbg$deposit_source[dsc$a_pointer],.dbg$deposit_source[dsc$w_length],sd);
				if not .dstat
				then
				    signal(dbg$_invnumber,1,dbg$deposit_source);
				if c74$me4b(sd,dbg$deposit_target) neq 0
				then
				    begin
				    signal(dbg$_numtrunc);
				    c74$ms4b(sd,dbg$deposit_target);
				    end;

				END;
			    [dsc$k_dtype_ubs] :
				BEGIN
					(.dbg$deposit_target[dsc$a_pointer]) =
					    (IF .dbg$deposit_source[dsc$_sgn_ext] 
						THEN
					    .(.dbg$deposit_source[dsc$a_pointer])<.dbg$deposit_source[dsc$w_bit_offst],
								   .dbg$deposit_source[dsc$w_length], 1>
						ELSE
					    .(.dbg$deposit_source[dsc$a_pointer])<.dbg$deposit_source[dsc$w_bit_offst],
								   .dbg$deposit_source[dsc$w_length], 0> );

				END;
			    [OTHERWISE] :
				BEGIN
				RETURN false;
				END;
			    TES;
			RETURN true;
			END;

GLOBAL ROUTINE dbg$deposit_type_b =

	! BYTE INTEGER, 6
			BEGIN
			LOCAL
			   td : BLOCK [12, BYTE];
			SELECTONE .dbg$deposit_source[dsc$b_dtype]
			    OF
			    SET
			    [DSC$K_DTYPE_B,
			     DSC$K_DTYPE_BU,
			     DSC$K_DTYPE_W,
			     DSC$K_DTYPE_WU,
			     DSC$K_DTYPE_L,
			     DSC$K_DTYPE_LU] :
				BEGIN
				IF ..dbg$deposit_source[DSC$A_POINTER] GTRU MAX_UBYTE_VAL
					AND
				  (..dbg$deposit_source[DSC$A_POINTER] GTR MAX_BYTE_VAL
					OR
				   ..dbg$deposit_source[DSC$A_POINTER] LSS MIN_BYTE_VAL)
				THEN
				    SIGNAL(DBG$_NUMTRUNC);
				(.dbg$deposit_target[DSC$A_POINTER])<0,8> = ..dbg$deposit_source[DSC$A_POINTER];
				END;
			    [dsc$k_dtype_f] :
				BEGIN
					CVTFL(.dbg$deposit_source[dsc$a_pointer], .dbg$deposit_source[dsc$a_pointer]);
					(.dbg$deposit_target[dsc$a_pointer])<0,8> = ..dbg$deposit_source[dsc$a_pointer];
				END;
			    [dsc$k_dtype_d] :
				BEGIN
					CVTDL(.dbg$deposit_source[dsc$a_pointer], .dbg$deposit_source[dsc$a_pointer]);
					(.dbg$deposit_target[dsc$a_pointer])<0,8> = ..dbg$deposit_source[dsc$a_pointer];
				END;
			    [dsc$k_dtype_t] :
				BEGIN
				ch$move(12,dbg$deposit_target,td);
				td[dsc$b_dtype] = dsc$k_dtype_w;
				! (the above is necessary because
				!  c74$me4b does not understand about
				!  type_b)
				td[dsc$w_length] = 2;
				ch$move(12,dbg$deposit_source,sd);
				dstat = dbg$digit_scan(
				    .dbg$deposit_source[dsc$a_pointer],
				    .dbg$deposit_source[dsc$w_length],
				    sd);
				IF NOT .dstat
				THEN
				    signal(dbg$_invnumber,1,
					dbg$deposit_source);
				IF c74$me4b(sd,td) NEQ 0
				THEN
				    BEGIN
				    signal(dbg$_numtrunc);
				    c74$ms4b(sd,td);
				    END;
				END;
			    [dsc$k_dtype_ubs] :
				BEGIN
					IF .dbg$deposit_source[dsc$w_length] GTR 8
					    then SIGNAL(DBG$_NUMTRUNC);
					(.dbg$deposit_target[dsc$a_pointer])<0,8> =
					    (IF .dbg$deposit_source[dsc$_sgn_ext] 
						THEN
					    .(.dbg$deposit_source[dsc$a_pointer])<.dbg$deposit_source[dsc$w_bit_offst],
								   .dbg$deposit_source[dsc$w_length], 1>
						ELSE
					    .(.dbg$deposit_source[dsc$a_pointer])<.dbg$deposit_source[dsc$w_bit_offst],
								   .dbg$deposit_source[dsc$w_length], 0> );

				END;
			    [OTHERWISE] :
				BEGIN
				RETURN false;
				END;
			    TES;
			RETURN true;
			END;

GLOBAL ROUTINE dbg$deposit_type_t =

	! ASCII TEXT STRING, 14
			BEGIN
			SELECTONE .dbg$deposit_source[dsc$b_dtype]
			    OF
			    SET
			    [dsc$k_dtype_t] :
				BEGIN
				IF .dbg$deposit_target[dsc$b_class] eql DSC$K_CLASS_D
				THEN
				    BEGIN
				    LOCAL 
					rst_ptr : REF rst$entry,
					s,addr : REF dst$record ;
			    IF (rst_ptr=dbg$sta_lookup_gbl(dyn_str_copy)) eql 0
				    THEN
					RETURN false
				    ELSE
					BEGIN
		! we have to use the real descriptor for these babies
					addr = .rst_ptr[rst$l_dstptr];
					s=(.addr[dst$l_value])(.dbg$dyn_str_desc,dbg$deposit_source);

					END
				    END
				ELSE
				IF .dbg$deposit_source[dsc$w_length] GTR .dbg$deposit_target[dsc$w_length]
					THEN 
					    BEGIN
						SIGNAL(DBG$_STGTRUNC);
						CH$MOVE(.dbg$deposit_target[dsc$w_length],
					 	.dbg$deposit_source[dsc$a_pointer],
					 	(.dbg$deposit_target[dsc$a_pointer]));
					    END
				ELSE 
				    BEGIN
					LOCAL NUM_BLANKS;
					num_blanks = .dbg$deposit_target[dsc$w_length] ;
					CH$FILL(%C' ', .num_blanks, (.dbg$deposit_target[dsc$a_pointer]));
					CH$MOVE(.dbg$deposit_source[dsc$w_length],
					     .dbg$deposit_source[dsc$a_pointer],
					     (.dbg$deposit_target[dsc$a_pointer]) );
				    END;
				END;
			    [dsc$k_dtype_ubs] :
				BEGIN
				IF .dbg$deposit_source[dsc$w_length]  GTR (8 * .dbg$deposit_target[dsc$w_length])
				THEN
				    BEGIN
					SIGNAL(DBG$_STGTRUNC);
					(.dbg$deposit_target[dsc$a_pointer]) = 
						.(.dbg$deposit_source[dsc$a_pointer])<.dbg$deposit_source[dsc$w_bit_offst],
									8 * .dbg$deposit_target[dsc$w_length]>
				    END
				ELSE 
					(.dbg$deposit_target[dsc$a_pointer]) =
					    (IF .dbg$deposit_source[dsc$_sgn_ext] 
						THEN
					    .(.dbg$deposit_source[dsc$a_pointer])<.dbg$deposit_source[dsc$w_bit_offst],
								   .dbg$deposit_source[dsc$w_length], 1>
						ELSE
					    .(.dbg$deposit_source[dsc$a_pointer])<.dbg$deposit_source[dsc$w_bit_offst],
								   .dbg$deposit_source[dsc$w_length], 0> );
				END;
			    [OTHERWISE] :
				BEGIN
				RETURN false;
				END;
			    TES;
			RETURN true;
			END;

GLOBAL ROUTINE dbg$deposit_type_nz =

	! NUMERIC STRING ZONED SIGN, 20
			BEGIN
			SELECTONE .dbg$deposit_source[dsc$b_dtype]
			    OF
			    SET
			    [dsc$k_dtype_l] :
				BEGIN
				RETURN false;
				END;
			    [dsc$k_dtype_f] :
				BEGIN
				RETURN false;
				END;
			    [dsc$k_dtype_d] :
				BEGIN
				RETURN false;
				END;
			    [dsc$k_dtype_t] :
				BEGIN
				IF .dbg$deposit_source[dsc$w_length] GTR .dbg$deposit_target[dsc$w_length]
					THEN 
					    BEGIN
						SIGNAL(DBG$_STGTRUNC);
						CH$MOVE(.dbg$deposit_target[dsc$w_length],
					 	.dbg$deposit_source[dsc$a_pointer],
					 	(.dbg$deposit_target[dsc$a_pointer]));
					    END
				ELSE CH$MOVE(.dbg$deposit_source[dsc$w_length],
					     .dbg$deposit_source[dsc$a_pointer],
					     (.dbg$deposit_target[dsc$a_pointer]));

				END;
			    [dsc$k_dtype_ubs] :
				BEGIN
				IF .dbg$deposit_source[dsc$w_length]  GTR (8 * .dbg$deposit_target[dsc$w_length])
				THEN
				    BEGIN
					SIGNAL(DBG$_STGTRUNC);
					(.dbg$deposit_target[dsc$a_pointer]) = 
						.(.dbg$deposit_source[dsc$a_pointer])<.dbg$deposit_source[dsc$w_bit_offst],
									8 * .dbg$deposit_target[dsc$w_length]>
				    END
				ELSE 
					(.dbg$deposit_target[dsc$a_pointer]) =
					    (IF .dbg$deposit_source[dsc$_sgn_ext] 
						THEN
					    .(.dbg$deposit_source[dsc$a_pointer])<.dbg$deposit_source[dsc$w_bit_offst],
								   .dbg$deposit_source[dsc$w_length], 1>
						ELSE
					    .(.dbg$deposit_source[dsc$a_pointer])<.dbg$deposit_source[dsc$w_bit_offst],
								   .dbg$deposit_source[dsc$w_length], 0> );
				END;
			    [OTHERWISE] :
				BEGIN
				RETURN false;
				END;
			    TES;
			RETURN true;
			END;

GLOBAL ROUTINE dbg$deposit_type_ubs =


			BEGIN
			SELECTONE .dbg$deposit_source[dsc$b_dtype]
			OF  SET
			    [DSC$K_DTYPE_B] :
				BEGIN
				IF .dbg$deposit_source[DSC$W_LENGTH] * %BPUNIT GTR .dbg$deposit_target[DSC$W_LENGTH]
				THEN
				    SIGNAL(DBG$_NUMTRUNC);
				(.dbg$deposit_target[DSC$A_POINTER])
				<.dbg$deposit_target[DSC$W_BIT_OFFST],.dbg$deposit_target[DSC$W_LENGTH]> =
				.(.dbg$deposit_source[DSC$A_POINTER])<0,8,1>;
				END;
			    [DSC$K_DTYPE_BU] :
				BEGIN
				IF .dbg$deposit_source[DSC$W_LENGTH] * %BPUNIT GTR .dbg$deposit_target[DSC$W_LENGTH]
				THEN
				    SIGNAL(DBG$_NUMTRUNC);
				(.dbg$deposit_target[DSC$A_POINTER])
				<.dbg$deposit_target[DSC$W_BIT_OFFST],.dbg$deposit_target[DSC$W_LENGTH]> =
				.(.dbg$deposit_source[DSC$A_POINTER])<0,8>;
				END;
			    [DSC$K_DTYPE_W] :
				BEGIN
				IF .dbg$deposit_source[DSC$W_LENGTH] * %BPUNIT GTR .dbg$deposit_target[DSC$W_LENGTH]
				THEN
				    SIGNAL(DBG$_NUMTRUNC);
				(.dbg$deposit_target[DSC$A_POINTER])
				<.dbg$deposit_target[DSC$W_BIT_OFFST],.dbg$deposit_target[DSC$W_LENGTH]> =
				.(.dbg$deposit_source[DSC$A_POINTER])<0,16,1>;
				END;
			    [DSC$K_DTYPE_WU] :
				BEGIN
				IF .dbg$deposit_source[DSC$W_LENGTH] * %BPUNIT GTR .dbg$deposit_target[DSC$W_LENGTH]
				THEN
				    SIGNAL(DBG$_NUMTRUNC);
				(.dbg$deposit_target[DSC$A_POINTER])
				<.dbg$deposit_target[DSC$W_BIT_OFFST],.dbg$deposit_target[DSC$W_LENGTH]> =
				.(.dbg$deposit_source[DSC$A_POINTER])<0,16>;
				END;
			    [DSC$K_DTYPE_L,
			    DSC$K_DTYPE_LU,
			    DSC$K_DTYPE_F,
			    DSC$K_DTYPE_D] :
				BEGIN
				IF .dbg$deposit_source[DSC$W_LENGTH] * %BPUNIT 
					GTR .dbg$deposit_target[DSC$W_LENGTH]
				THEN
				    SIGNAL(DBG$_NUMTRUNC);
				(.dbg$deposit_target[DSC$A_POINTER])
				<.dbg$deposit_target[DSC$W_BIT_OFFST],
					.dbg$deposit_target[DSC$W_LENGTH]> =
				..dbg$deposit_source[DSC$A_POINTER];
				END;
			    [dsc$k_dtype_t] :
				BEGIN
				IF .dbg$deposit_source[dsc$w_length]*%BPUNIT GTR
				   .dbg$deposit_target[dsc$w_length] 
				   THEN SIGNAL (DBG$_STGTRUNC);
				(.dbg$deposit_target[DSC$A_POINTER])
				<.dbg$deposit_target[DSC$W_BIT_OFFST],
					.dbg$deposit_target[DSC$W_LENGTH]> =
				..dbg$deposit_source[DSC$A_POINTER];
				END;

			    [dsc$k_dtype_ubs] :
				BEGIN
				IF .dbg$deposit_source[DSC$W_LENGTH] GTR
					.dbg$deposit_target[DSC$W_LENGTH]
				THEN
				    SIGNAL(DBG$_STGTRUNC);
				IF .dbg$deposit_source[DSC$_SGN_EXT]
				THEN
				    BEGIN
				    (.dbg$deposit_target[DSC$A_POINTER])
				    <.dbg$deposit_target[DSC$W_BIT_OFFST],
					.dbg$deposit_target[DSC$W_LENGTH]> = 
				    .(.dbg$deposit_source[DSC$A_POINTER])
				    <.dbg$deposit_source[DSC$W_BIT_OFFST],
					.dbg$deposit_source[DSC$W_LENGTH],1>;
				    END
				ELSE
				    BEGIN
				    (.dbg$deposit_target[DSC$A_POINTER])
				    <.dbg$deposit_target[DSC$W_BIT_OFFST],
					.dbg$deposit_target[DSC$W_LENGTH]> =
				    .(.dbg$deposit_source[DSC$A_POINTER])
				    <.dbg$deposit_source[DSC$W_BIT_OFFST],
					.dbg$deposit_source[DSC$W_LENGTH],0>;
				    END;
				END;
			    [OTHERWISE] : RETURN false;
			    TES;
			RETURN true;
			END;



END
ELUDOM
