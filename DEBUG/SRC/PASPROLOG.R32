!
!	PASPROLOG.R32 - STANDARD PROLOG FILE FOR PASCAL-SPECIFIC DEBUGGER MODULES
!
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!
!	AUTHOR:
!		P. Hohensee	Created: 09-Jul-1980
!
!	Modified:
!

LIBRARY	'SRC$:PASLIB.L32';

LIBRARY 'SRC$:DBGCOMLIB.L32';

LIBRARY 'SRC$:DSTRECRDS.L32';

REQUIRE 'SRC$:DBGCOMPLG.REQ';

REQUIRE 'LIB$:DBGMSG.REQ';
!
! MACROs to declare Pascal-Specific data PSECTs
!
MACRO
	SET_PAS$GLOBAL	=
		DBG$PASGLOBAL(PIC, NOSHARE, WRITE, NOEXECUTE, ALIGN(2),
			ADDRESSING_MODE(LONG_RELATIVE)) %,

	SET_PAS$PLIT	=
		DBG$PASPLIT  (PIC, NOSHARE, WRITE, NOEXECUTE, ALIGN(2),
			ADDRESSING_MODE(LONG_RELATIVE)) %;

!
! Kernal Debugger External Routine definitions
!
EXTERNAL ROUTINE
	! The Pathname Parser
	!
	DBG$NPATHNAME_PARSER,

	!
	! RST Access Routines
	!
	DBG$STA_GETSYMBOL	: NOVALUE,	! Get RST pointer to a symbol
						! corresponding to a pathname
	DBG$STA_SYMPATHNAME	: NOVALUE,	! Get the pathname corresponding to an RST pointer
	DBG$STA_SYMKIND		: NOVALUE,	! Get a symbol's RST kind
	DBG$STA_SYMNAME		: NOVALUE,	! Get a pointer to a symbol's name
	DBG$STA_SYMTYPE		: NOVALUE,	! Get a symbol's data type
	DBG$STA_SYMSIZE		: NOVALUE,	! Get an object's size in bits
	DBG$STA_SYMID_IN_FRAME,			! Find out if a symbol's frame is still defined
	DBG$STA_SETCONTEXT	: NOVALUE,	! Set up context for SYMVALUE
	DBG$STA_SYMVALUE	: NOVALUE,	! Get a pointer to a symbol's value
	DBG$STA_SAME_DST_OBJECT,		! Returns True if 2 Symids denote
						! the same DST entry, False otherwise

	DBG$STA_TYPEFCODE,			! Return the type format code
	DBG$STA_TYP_ARRAY	: NOVALUE,	! Get info for an array type
	DBG$STA_TYP_ATOMIC	: NOVALUE,	! Get SRM standard type code for an atomic type
	DBG$STA_TYP_DESCR	: NOVALUE,	! Get descriptor for descriptor type
	DBG$STA_TYP_ENUM	: NOVALUE,	! Get info for an enumeration type
	DBG$STA_TYP_FILE	: NOVALUE,	! Get info for a file type
	DBG$STA_TYP_TYPEDPTR	: NOVALUE,	! Get info for a typed pointer
	DBG$STA_TYP_RECORD	: NOVALUE,	! Get info for a record type
	DBG$STA_TYP_SET		: NOVALUE,	! Get info for a set type
	DBG$STA_TYP_SUBRNG	: NOVALUE,	! Get info for a subrange type
	DBG$STA_TYP_UNION	: NOVALUE,	! Get info for a union type
	DBG$STA_TYP_VARIANT	: NOVALUE,	! Get info for a variant type
	DBG$STA_TYP_VARIANT_COMP: NOVALUE,	! Get info about a particular variant

	! Permanent symbols
	!
	DBG$NGET_LASTVAL,			! Get a value descriptor for '\'
	DBG$NPERM_SYM_INT,			! Permanent symbol interpreter ('R0' - 'PSL')

	! Pathname string construction
	!
	DBG$ADDRESS_STRING,			! Construct a numeric string in the current radix corresponding
						! to an address
	DBG$NPATHDESC_TO_CS	: NOVALUE,	! Create an ASCIC string corresponding to
						! the Module/Routine/First-Reference part of
						! a pathname descriptor

	!
	! Dynamic storage management
	!
	DBG$NLIST_FREEZ,		! Storage Allocator
	DBG$NLIST_COPY,			! Dynamic Storage Copier
	DBG$NCOPY,			! Non-listed storage copier
	DBG$NFREERELEASE,		! Non-listed storage release

	!
	! Error handling
	!
	DBG$NOUT_INFO,			! Output an informational message
	DBG$NMAKE_ARG_VECT,		! Create a message argument string

	! Debugging
	!
	DBG$FAO_Put		: NOVALUE,
	DBG$OUT_Put		: NOVALUE;

EXTERNAL
	DBG$CP_Out_Str,
	DBG$GL_Buf_Siz;

!
!	PASPROLOG.R32 LAST LINE
