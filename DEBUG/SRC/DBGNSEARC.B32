MODULE DBGNSEARC (IDENT = 'V03-000') =

BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:
!
!	DEBUG
!
! ABSTRACT:
!
!	This module contains the parse and execution networks for the SEARCH
!	verb. The parsing method employed is that of ATN's.
!
! ENVIRONMENT:
!
!	VAX/VMS
!
! AUTHOR:
!
!	Richard Title
!
! CREATION DATE:
!
!	10-22-81
!
! VERSION:
!
!	V03.0-001
!
! MODIFIED BY:
!	
!
! REVISION HISTORY:
!
!--

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE	
	DBG$NPARSE_SEARCH,			! Parse network
	DBG$NEXECUTE_SEARCH,			! Execution network
    	DBG$NACCEPT_STRING,			! Subroutine of parsing routine
    						!	that reads the search
    						!	string from the input
    						!	stream.
    	DBG$PARSE_SEARCH;			! Provides an interface to 
    						!	dbg$nparse_search from
    						!	the old debugger.
    
!
! REQUIRE FILES:
!

REQUIRE 'SRC$:DBGPROLOG.REQ';

REQUIRE 'SRC$:DBGGEN.REQ';
REQUIRE 'SRC$:SYSSER.REQ';

EXTERNAL ROUTINE
    dbg$fao_put,			! Formatted ascii output
    dbg$nlist_freez,			! Allocates space
    dbg$nmake_arg_vect,			! Constructs error messages
    dbg$nmatch,				! Tries to match the next token
    dbg$nnext_word,			! Gets next word from input
    dbg$nout_arg_vect: NOVALUE,		! Outputs an error message
    dbg$nsave_decimal_integer,		! Reads an integer from the 
    					! 	input string
    dbg$nsave_string,			! Reads a character string from the
    					! 	input string
    dbg$nsyntax_error, 			! Reports a syntax error
    dbg$out_put,			! Formatted ascii output
    dbg$set_search_lvl: NOVALUE,	! Sets level of search data structure
    					! 	overrid (see DBGMOD)
    dbg$src_search_cmd: NOVALUE,	! The routine in DBGSOURCE that
    					! 	performs the search and outputs
    					! 	the result to the terminal
    dbg$sta_getsourcemod,		! Gets module rst pointer
    dbg$sta_symname;			! Turns module rst pointer back
    					! 	into a string

EXTERNAL
    dbg$cp_out_str,			! Points to output buffer for dbg$fao_put 
    dbg$gb_search_ptr:REF VECTOR[,BYTE],! pointer to SEARCH data structure
    dbg$gl_buf_siz,			! Length of string in output buffer
    dbg$src_next_lnum,			! Contains the default starting line number
    dbg$src_next_modrstptr,		! Contains the default module rst pointer
    dbg$src_search_string : VECTOR [, BYTE];
    					! The global in DBGSOURCE that is used
    					! to pass the search string.

LITERAL
    adverb_literal_all = 0,
    adverb_literal_ident = 1;


GLOBAL ROUTINE dbg$nparse_search (
    input_desc,
    verb_node,
    message_vect) =
!++
! Functional Description
!
!	ATN parse network for the SEARCH verb.
!	This routine takes a verb node for the SEARCH verb, and a string
!	descriptor for the remaining (unparsed) input.
!	A command execution tree is built. The form of the tree is:
!
!	 -----------       -----------       -----------
!	| verb node |-->--| noun node |-->--| noun node |
!        -----------       -----------       -----------
!	      |
!	      V
!	 -------------       -------------
!	| adverb node |-->--| adverb node |
!	 -------------       -------------
!
! 	The adverb nodes contain the command switches (STRING, IDENTIFIER,
!	NEXT, ALL) if any are present. 
!	The first noun node contains the starting line number,
!	ending line number, and module rst pointer. The second noun node 
!	contains a pointer to the search string.
!  
! Formal Parameters
!
!	input_desc	- A longword containing the address of the 
!			  	command input descriptor.
!	verb_node	- A longword containing the address of the verb node.
!	message_vect	- The address of a longword to contain the address
!			  	of a standard message argument vector.
!
! Implicit Inputs
!
!	none
!
! Implicit Outputs
!	
!	On success, the command execution tree is constructed.
!	On failure, a message argument vector is constructed or obtained.
!
! Routine value
!
!	sts$k_success (1)	- Success. Command execution tree constructed.
!	sts$k_severe  (4)	- Failure. Error encountered. Message argument
!				  constructed and returned.
!
! Side Effects
!
!	none
!--
BEGIN

MAP
    input_desc  : REF dbg$stg_desc,
    verb_node	: REF dbg$verb_node;

BIND
    dbg$cs_all		= UPLIT BYTE (3, 'ALL'),
    dbg$cs_ident	= UPLIT BYTE (10,'IDENTIFIER'),
    dbg$cs_next		= UPLIT BYTE (4, 'NEXT'),
    dbg$cs_string	= UPLIT BYTE (6, 'STRING'),
    dbg$cs_backslash	= UPLIT BYTE (1, dbg$k_backslash),
    dbg$cs_colon	= UPLIT BYTE (1, dbg$k_colon),
    dbg$cs_cr		= UPLIT BYTE (1, dbg$k_car_return),
    dbg$cs_quote	= UPLIT BYTE (1, dbg$k_quote),
    dbg$cs_dblquote	= UPLIT BYTE (1, dbg$k_dblquote),
    dbg$cs_slash	= UPLIT BYTE (1, dbg$k_slash);

! NAME_BUF must be an OWN variable since its address may get placed in
! an error message vector and used later during output of an error 
! message.
!
OWN
    name_buf : VECTOR [81, BYTE]; 	! Holds counted string with module name

LOCAL
    adverb_node : REF dbg$adverb_node,	! points to an adverb node
    all_flag,				! TRUE if /ALL or /NEXT is present
    all_value,				! TRUE for /ALL, FALSE for /NEXT
    char,				! Used during parsing of module name
    dblquote_flag,			! Indicates a double quote 
    delimiter,				! either " or '
    eol_flag,				! Indicates end of command line
    high_lnum,				! High line number in the search range
    ident_flag,				! TRUE if /IDENT or /STRING is present
    ident_value,			! TRUE for /IDENT, FALSE for /STRING
    is_it_name,				! flag indicating we read a module name
    length,				! Used during parsing of module name
    link,				! Used for building linked lists.
    low_lnum,				! Low line number in the search range
    modrstptr,				! RST pointer for the module being searched
    noun_node : REF dbg$noun_node,	! A node in the command execution tree
    quote_flag,				! Indicates a '
    saved_length,
    saved_pointer,
    string_ptr,				! Used during parsing of module name
    switch_flag;			! Indicates a switch is present

    ! Initialize the switch variables.
    !
    switch_flag = FALSE;
    all_flag = FALSE;
    ident_flag = FALSE;

    ! Accept any override switches that may be present
    !
    WHILE dbg$nmatch (.input_desc, dbg$cs_slash, 1) DO
    	BEGIN
    	SELECTONE TRUE OF 
    	    SET

    	    [dbg$nmatch (.input_desc, dbg$cs_all, 1)] : ! /ALL
    		BEGIN
    		switch_flag = TRUE;
    		all_flag = TRUE;
    		all_value = TRUE;
    		END;

    	    [dbg$nmatch (.input_desc, dbg$cs_ident, 1)] : ! /IDENT
    		BEGIN
    		switch_flag = TRUE;
    		ident_flag = TRUE;
    		ident_value = TRUE;
    		END;

    	    [dbg$nmatch (.input_desc, dbg$cs_next, 1)] : ! ! /NEXT
    		BEGIN
    		switch_flag = TRUE;
    		all_flag = TRUE;
    		all_value = FALSE;
    		END;

    	    [dbg$nmatch (.input_desc, dbg$cs_string, 1)] : ! /STRING
    		BEGIN
    		switch_flag = TRUE;
    		ident_flag = TRUE;
    		ident_value = FALSE;
    		END;

    	    [ OTHERWISE ] :	! Syntax error
    		BEGIN
    		.message_vect = 
    		    dbg$nsyntax_error (dbg$nnext_word (.input_desc));
    		RETURN sts$k_severe;
    		END;

    	    TES;
    	END;

    ! Construct any adverb nodes, if needed.
    !
    IF .switch_flag
    THEN
    	BEGIN

    	link = verb_node [dbg$l_verb_adverb_ptr];

    	SELECT TRUE OF
    	    SET

    	    [.all_flag] : ! We have either /ALL or /NEXT
    		BEGIN
    		! Construct an adverb node and link.
    		! 
    		IF NOT dbg$nlist_freez (dbg$k_adverb_node_size, adverb_node,
    			.message_vect)
    		THEN
    		    RETURN sts$k_severe;
    		.link = .adverb_node;
    		link = adverb_node [dbg$l_adverb_link];
    		adverb_node [dbg$b_adverb_literal] = adverb_literal_all;
    		adverb_node [dbg$l_adverb_value] = .all_value;
    		END;

    	    [.ident_flag] : ! We have either /IDENT or /STRING
    		BEGIN
    		! Construct an adverb node and link.
    		! 
    		IF NOT dbg$nlist_freez (dbg$k_adverb_node_size, adverb_node,
    			.message_vect)
    		THEN
    		    RETURN sts$k_severe;
    		.link = .adverb_node;
    		link = adverb_node [dbg$l_adverb_link];
    		adverb_node [dbg$b_adverb_literal] = adverb_literal_ident;
    		adverb_node [dbg$l_adverb_value] = .ident_value;
    		END;

    	    TES;
    	
    	! Now put a zero in the last link field
    	! 
    	.link = 0;

    	END;

    ! Create and link a noun node
    !
    IF NOT dbg$nlist_freez(dbg$k_noun_node_size, noun_node, .message_vect)
    THEN
    	RETURN sts$k_severe;
    verb_node[dbg$l_verb_object_ptr] = .noun_node;

    ! Check for SEARCH <cr>
    !
    IF dbg$nmatch (.input_desc, dbg$cs_cr, 1)
    THEN
    	BEGIN
    	eol_flag = TRUE;
    	dblquote_flag = FALSE;
    	quote_flag = FALSE;
    	END
    ELSE
    	BEGIN
    	eol_flag = FALSE;
    	
        ! Check for SEARCH "string"
    	!
    	IF dbg$nmatch (.input_desc, dbg$cs_dblquote, 1)
    	THEN
    	    BEGIN
    	    dblquote_flag = TRUE;
    	    quote_flag = FALSE;
    	    delimiter = dbg$k_dblquote;
    	    END
    	ELSE
    	    BEGIN
    	    dblquote_flag = FALSE;
    	    IF dbg$nmatch (.input_desc, dbg$cs_quote, 1)
    	    THEN
    		BEGIN
    		quote_flag = TRUE;
    		delimiter = dbg$k_quote;
    		END
    	    ELSE
    		BEGIN
    		quote_flag = FALSE;
    		delimiter = dbg$k_car_return;
    		END;
    	    END;
    	END;

    IF .dblquote_flag OR .quote_flag OR .eol_flag
    THEN
    	BEGIN ! no location argument supplied

    	! Try to get default module.
    	!
    	IF .dbg$src_next_modrstptr EQL 0
    	THEN
    	    BEGIN
    	    ! report an error
    	    .message_vect = dbg$nmake_arg_vect(dbg$_nonxtlin);
    	    RETURN sts$k_severe;
    	    END;
    	    
    	! The module rst pointer is placed in the adjective field of
    	! the noun node.
    	!
    	noun_node [dbg$l_adjective_ptr] = .dbg$src_next_modrstptr;

    	! Fill in the starting line number based on global info
    	!
    	noun_node [dbg$l_noun_value] = .dbg$src_next_lnum; ! Start of search

    	! The search should go to the end of the module. Fill in a line
    	! number that is definitely beyond the end of the module.
    	!
    	noun_node [dbg$l_noun_value2] = 2000000000; 

    	END;

    IF .eol_flag
    THEN
    	BEGIN
    	! The link field is zero
    	!       
    	noun_node [dbg$l_noun_link] = 0;
    	RETURN sts$k_success;
    	END; 

    IF NOT (.dblquote_flag OR .quote_flag)
    THEN
    	BEGIN
    
    	! We now attempt to read a module name
    	!
    	name_buf[0] = 0;
    	string_ptr = .input_desc[dsc$a_pointer];
    	length = .input_desc[dsc$w_length];

    	! read past leading blanks
    	!
    	WHILE .length GTR 0 DO 
    	    BEGIN
    	    char = ch$rchar_a(string_ptr);
    	    length = .length - 1;
    	    IF .char NEQ dbg$k_blank
    	    THEN
    	    	EXITLOOP;
    	    END;

        ! If the length reaches zero then it is an error
    	! This should not happen.
        !
        IF .length EQL 0 AND .char EQL dbg$k_blank 
        THEN
    	    BEGIN
    	    .message_vect = dbg$nmake_arg_vect(dbg$_debugbug,1,
    			dbg$k_parse_search_confused);
    	    RETURN sts$k_severe;
    	    END;

        ! Read until we reach a separating character.
        ! Place the characters into name_buf as we read them. 
        !
        WHILE .length GTR 0 DO 
    	    BEGIN
    	    IF .char EQL '\'  
    	    OR .char EQL ':' OR .char EQL ' '
    	    THEN
    		BEGIN
    		! Correct for loop going one too far.
    		string_ptr = ch$plus (.string_ptr, -1);
    		length = .length + 1;
    	        EXITLOOP;
    		END;
    	    name_buf[0] = .name_buf[0] + 1;
    	    name_buf[.name_buf[0]] = .char;
    	    char = ch$rchar_a(string_ptr);
    	    length = .length - 1;
    	    END;

    	! Decide whether what the user entered seems to be a name or a number.
    	!
    	is_it_name = FALSE;
    	INCR i FROM 1 to .name_buf[0] DO
    	    IF .name_buf[.i] GTR '9' OR .name_buf[.i] LSS '0'
    	    THEN
    		is_it_name = TRUE;    	    

    	! Now decide whether we are looking at a module name.
    	! Convert the name to an rst pointer.
    	!
    	noun_node[dbg$l_adjective_ptr] = 
    	    dbg$sta_getsourcemod(name_buf);

    	! If the above routine returned a non-zero value then the user entered
    	! an valid module.
    	!
    	IF .noun_node[dbg$l_adjective_ptr] NEQ 0
        THEN
    	    BEGIN
    	    ! Update the input descriptor
     	    !
    	    input_desc[dsc$a_pointer] = .string_ptr;
    	    input_desc[dsc$w_length] = .length;

    	    ! Eat the backslash which may follow the module name.
    	    ! If it is not there, don't worry about it.
    	    !
    	    dbg$nmatch (.input_desc, dbg$cs_backslash, 1);

    	    ! fill in new value of modrstptr
    	    modrstptr = .noun_node[dbg$l_adjective_ptr];

    	    END ! pick up module name
    		
        ELSE

    	    BEGIN ! decide whether to put out an error message.

    	    ! If the user seems to have entered a name but it is
    	    ! not a valid module name then issue an error message.
    	    !
    	    IF .is_it_name
    	    THEN
    		BEGIN
    		.message_vect = dbg$nmake_arg_vect (
    			dbg$_nosuchmodu, 1, name_buf);
		RETURN sts$k_severe;
    		END;

	    ! Fill in a module based on current scope
    	    !    		
    	    modrstptr = dbg$sta_getsourcemod(0);
    		
    	    IF .modrstptr EQL 0
    	    THEN
		BEGIN

	        ! If this is zero, then we have no scope with
	        ! which to supply a module. Report an error.
    		!
    		.message_vect = dbg$nmake_arg_vect(
    			dbg$_noscope, 1, .dbg$src_next_lnum);
    		RETURN sts$k_severe;
    		END

    	    ELSE
    		! we have found a module. 
    		! fill in the adjective field.
    		noun_node[dbg$l_adjective_ptr] = .modrstptr;

    	    END; ! Fill in default module

    	! read the low line num
    	!
    	! SAVE_DECIMAL_INTEGER  may clobber input_desc, so guard against that.
    	!
    	saved_length = .input_desc [dsc$w_length];
    	saved_pointer = .input_desc [dsc$a_pointer];
    	IF NOT dbg$nsave_decimal_integer(.input_desc, low_lnum,
    		    .message_vect)
    	THEN
    	    BEGIN
    	    input_desc [dsc$w_length] = .saved_length;
    	    input_desc [dsc$a_pointer] = .saved_pointer;
    	    low_lnum = 1;
    	    high_lnum = 2000000000;
    	    END;
    	   
    	! Now look for colon which signifies that the user has also 
    	! specified a high line num.
    	!
    	IF dbg$nmatch(.input_desc,dbg$cs_colon,1)
    	THEN
	    BEGIN
    	    ! Get high line num
    	    !			
    	    ! SAVE_DECIMAL_INTEGER  may clobber input_desc, so guard against that.
    	    !
    	    saved_length = .input_desc [dsc$w_length];
    	    saved_pointer = .input_desc [dsc$a_pointer];
    	    IF NOT dbg$nsave_decimal_integer(
    	        .input_desc, high_lnum, .message_vect)
    	    THEN
    		BEGIN
    	    	input_desc [dsc$w_length] = .saved_length;
    	    	input_desc [dsc$a_pointer] = .saved_pointer;
    		high_lnum = 2000000000;
    		END;
    	    END

    	ELSE

    	    ! No high line num supplied. Search goes to end of module.
    	    !
    	    high_lnum = 2000000000;

    	! Fill in the fields of noun_node
    	!
    	noun_node[dbg$l_noun_value] = .low_lnum;
    	noun_node[dbg$l_noun_value2] = .high_lnum;

    	! Now that we have read the module and/or line range information,
    	! look for quote or double quote once again.
    	!
    	IF dbg$nmatch (.input_desc, dbg$cs_dblquote, 1)
    	THEN
    	    BEGIN
    	    dblquote_flag = TRUE;
    	    delimiter = dbg$k_dblquote;
    	    END
        ELSE
    	    IF dbg$nmatch (.input_desc, dbg$cs_quote, 1)
    	    THEN
    		BEGIN
    		quote_flag = TRUE;
    	 	delimiter = dbg$k_quote;
    		END
    	    ELSE
    		BEGIN
    		! No quotes specified. We want to strip off leading
    		! white space before reading the string
    		!
    		LOCAL
    		    char;
   		WHILE  .input_desc [dsc$w_length] GTR 0 DO
    		    BEGIN
    		    char = ch$rchar_a(input_desc[dsc$a_pointer]);
    		    input_desc[dsc$w_length]  = .input_desc[dsc$w_length] - 1;
    		    IF .char NEQ dbg$k_blank THEN EXITLOOP;
    		    END;

    		! Back up since the above read one too far.
    		!
    		input_desc[dsc$a_pointer] = 
    			ch$plus(.input_desc[dsc$a_pointer],-1);
    		input_desc [dsc$w_length] = .input_desc [dsc$w_length] + 1;
    		END;

    	END;
    
    ! At this point we have accepted the module and line number range
    ! (or used defaults). We now expect to see the search string.
    !
    IF dbg$nmatch (.input_desc, dbg$cs_cr, 1) 
    THEN
    	BEGIN
    	! First check for the case of SEARCH "  or SEARCH ' ,
    	! both of which we shall treat as errors.
    	IF .dblquote_flag OR .quote_flag
    	THEN
    	    SIGNAL(dbg$_noend,3,.input_desc,1,delimiter);

    	! No search string specified, so we just fill a zero into the
    	! noun link field and return.
    	!
    	noun_node[dbg$l_noun_link] = 0;
    	RETURN sts$k_success;
    	END;

    ! If we reach this point then the user has specified a search string.
    ! So we create and link new noun node for the search string.
    link = noun_node[dbg$l_noun_link];
    IF NOT dbg$nlist_freez(dbg$k_noun_node_size, noun_node,
    		.message_vect)
    THEN
        RETURN sts$k_severe;
    .link = .noun_node;

    
    ! Read the string and leave a pointer in the second noun node
    !
    IF NOT dbg$naccept_string (.input_desc, noun_node[dbg$l_noun_value],
    				 .delimiter,.message_vect)
    THEN
    	RETURN sts$k_severe;

    RETURN sts$k_success;

    END; ! dbg$nparse_search



GLOBAL ROUTINE dbg$nexecute_search (verb_node,message_vect) =
!++
! Functional Description
!	
!	This routine performs the action associated with the SEARCH
!	command.
!
! Formal Parameters
!
!	verb_node	- A longword containing the address of the
!			  head (verb) node.
!	message_vect	- The address of a longword to contain the
!			  address of an error message vector
!
! Implicit Inputs
!
!	The command tree contains a verb node, a linked list
!	of one or two noun nodes, and possibly a linked list of
!	one or two adverb nodes. (See the diagram in the header for
!	dbg$nparse_search). 
!
! Implicit Outputs
!
!	This routine calls a routine in DBGSOURCE which displays the
!	source lines to the user.
!
! Routine Value
!
!	A completion code.
!
! Completion Codes
!
!	sts$k_success (1) 	- Success. Command executed
!	sts$k_severe (4)	- Failure. The command could not be
!				  executed. An error message is constructed.
!
! Side Effects
!
!	none
!--
    BEGIN

    MAP 
        verb_node : REF dbg$verb_node;

    LOCAL
    	adverb_node: REF dbg$adverb_node,	! Pointer to an adverb node
    	buffer : VECTOR[120, BYTE], 		! Buffer for dbg$fao_put
    	cs_ptr: REF VECTOR[,BYTE],		! Points to the search string
    	link,					! Points to a node in the
    						!	command execution tree.
        modnameptr,				! Pointer to module name
    	next_flag,				! TRUE if /NEXT was specified
        noun_node : REF dbg$noun_node,		! address of first noun node
    	second_noun_node : REF dbg$noun_node, 	! address of second noun node
    	string_flag;				! TRUE if /STRING was specified

    noun_node = .verb_node[dbg$l_verb_object_ptr];

    ! First output the module name.

    ! set up for fao_put
    dbg$cp_out_str = buffer[1];
    dbg$gl_buf_siz = 0;

    ! get module name
    dbg$sta_symname(.noun_node[dbg$l_adjective_ptr], modnameptr);

    dbg$fao_put(buffer, UPLIT BYTE(%ASCIC 'module !AC'),.modnameptr);
    dbg$out_put(buffer);

    ! If the user supplied a string, copy it into DBG$SRC_SEARCH_STRING
    ! which is where the search routine expects to find it.
    !	
    IF .noun_node[dbg$l_noun_link] NEQ 0
    THEN
        BEGIN
    	second_noun_node = .noun_node [dbg$l_noun_link];
    	cs_ptr = .second_noun_node [dbg$l_noun_value];
    	dbg$src_search_string[0] = .cs_ptr[0];
    	ch$move (.cs_ptr[0], cs_ptr[1], dbg$src_search_string[1]);
    	END;

    ! Process any command overrides that may be present.
    link = .verb_node [dbg$l_verb_adverb_ptr];

    IF .link NEQA 0
    THEN
    	dbg$set_search_lvl (override_search);

    WHILE .link NEQA 0 DO
    	BEGIN
    	adverb_node = .link;
    	CASE .adverb_node [dbg$b_adverb_literal] FROM adverb_literal_all
    						TO adverb_literal_ident
    	    OF
    	    SET

    	    [adverb_literal_all] : ! /ALL or /NEXT
    		BEGIN
    		dbg$gb_search_ptr[search_all] = 
    		    .adverb_node [dbg$l_adverb_value];
    		link = .adverb_node [dbg$l_adverb_link];
    		END;

    	    [adverb_literal_ident] : ! /IDENT or /STRING
    		BEGIN
    		dbg$gb_search_ptr [search_ident] =
    		    .adverb_node [dbg$l_adverb_value];
    		link = .adverb_node [dbg$l_adverb_link];
    		END;

    	    TES;

    	END;

    IF .dbg$gb_search_ptr [search_ident]
    THEN
    	string_flag = 0
    ELSE
    	string_flag = 1;
    IF .dbg$gb_search_ptr [search_all]
    THEN
    	next_flag = 0
    ELSE
    	next_flag = 1;

    ! call the routine which actually searches for the string
    !
    dbg$src_search_cmd (
    	.noun_node[dbg$l_adjective_ptr],
    	.noun_node[dbg$l_noun_value],
    	0,
    	.noun_node[dbg$l_noun_value2],
    	0,
    	.string_flag,
    	.next_flag);

    RETURN sts$k_success

    END; ! dbg$nexecute_search

ROUTINE dbg$naccept_string (input_desc, result_addr, delimiter, message_vect) =
!++
! Functional Description
!	
!	This routine is called at the point when DBG$NPARSE_SEARCH expects to 
!	see a search string. Some possible forms of the search command are:
!	SEARCH low:high search-string
!	SEARCH "search-string"
!	SEARCH 'search-string'
!	
!	At the point this routine is called the leading quote, if there was one,
!	has already been eaten. The delimiter will indicate what kind of leading
!	quote was present, or will be <cr> if no leading quote was present.
!
!	This routine allocates space for the search string. It then reads
!	characters from the input stream until it hits the delimiter,
!	copying them to the allocated area as it reads. It also translates
!	lower case to upper case and undoubles quotes as it is doing this.
!	It returns the address of the counted string in RESULT_ADDR.
!	It updates INPUT_DESC to reflect the characters read.
!
! Inputs
!
!	input_desc	- A string descriptor for the remaining input.
!	result_addr	- The address at which to leave the string that
!			  	is read.
!	delimiter	- The character that terminates the string. This 
!				will be one of:
!				quote, double quote, or carriage return.
!	message_vect	- The argument vector for error messages.
!
! Outputs
!
!	A counted string is created and its address is left in RESULT_ADDR.
!
! Routine Value
!
!	A standard completion code.
!--
    BEGIN
    MAP
    	input_desc : REF dbg$stg_desc;		! String descriptor for the
    						!	remaining (unparsed)
    						!	input string.
    LOCAL
    	char,					! Holds a single character thatr
    						!	is being copied from the
    						!	input stream to the 
    						!	result string area.
    	input_ptr,				! Pointer to the current position
						!	in the input stream.
    	lahead_char,				! Holds next character in stream.
    						!	Used to look ahead one
    						!	character to determine
    						!	whether it is necessary
    						!	to undouble quotes.
    	length,					! Holds the remaining length of the
    						!	input stream.
    	output_ptr,				! Pointer to the current position
    						! 	in the output character 
    						!	string.
    	result_str: REF VECTOR [,BYTE];		! A pointer to the counted string
    						! 	containing the search string.
    
    ! We first allocate space for the result, so we can copy the string over
    ! as we read it character by character. (The call below may reserve
    ! more space than is needed, but doing things this way simplifies the
    ! algorithm. The alternative would be to loop through character by
    ! character, keeping a count, then reserve space, then loop through again
    ! to copy it over).
    !
    IF NOT dbg$nlist_freez (((1+.input_desc[dsc$w_length])/%UPVAL)+1,
    				result_str, .message_vect)
    THEN
    	RETURN sts$k_severe;

    ! Perform some initialization.
    !
    result_str[0] = 0;
    input_ptr = ch$ptr (.input_desc [dsc$a_pointer]);
    output_ptr = ch$ptr (result_str[1]);
    length = .input_desc [dsc$w_length];
    
    ! Read the first character. Each time we read a character we decrement
    ! the length variable since it represents remaining length.
    !
    char = ch$rchar_a (input_ptr);
    length = .length - 1;

    ! Loop until we hit the delimiter
    !
    WHILE TRUE DO
    	BEGIN
    	! First check for the delimiter
    	!
    	IF .char EQL .delimiter
    	THEN
    	    ! If we see the delimiter, then check to see whether we are looking
    	    ! at a pair of quotes, E.g., 
    	    ! SEARCH "AB""CD"
    	    ! In this case we want to undouble the quotes and continue.
    	    !
    	    BEGIN
    	    lahead_char = ch$rchar (.input_ptr);
    	    IF .lahead_char EQL .char  AND .delimiter NEQ dbg$k_car_return
    	    THEN
    		! Undouble the quotes
    		!
    		BEGIN
    		input_ptr = ch$plus (.input_ptr, 1);
    		END
    	    ELSE
    		! Not a case of double quotes, so just exit the loop.
    		EXITLOOP;
    	    END;

    	! Translate lower case to upper case.
    	!
    	IF .char GEQ %C'a' AND .char LEQ %C'z'
    	THEN
    	    char = .char - (%C'a'-%C'A');    

    	! Write the current character to the output buffer and 
    	! get the next character.
    	!
	ch$wchar_a (.char, output_ptr);
    	result_str[0] = .result_str[0] + 1;
    	char = ch$rchar_a (input_ptr);

    	! Check for exhausted input
    	!
    	IF .length EQL 0 
    	THEN
    	    BEGIN
    	    ! If we reach the end of the input without seeing the delimiter
    	    ! character then this is an error
    	    !
    	    input_desc[dsc$w_length] = .input_desc[dsc$w_length] - 1;
    	    IF .delimiter EQL dbg$k_quote
    	    THEN ! this was signaled as (nodelims) 
    		.message_vect = dbg$nmake_arg_vect (dbg$_MATQUOMIS)
    	    ELSE 
    		IF .delimiter EQL dbg$k_dblquote
    	        THEN    ! this was signaled as (nodelimd)		
    		    .message_vect = dbg$nmake_arg_vect (dbg$_MATQUOMIS)
    		ELSE
    		    .message_vect = dbg$nmake_arg_vect (dbg$_debugbug,
    			1,dbg$k_parse_search_confused);
    	    RETURN sts$k_severe;
    	    END;
    	    
    	length = .length - 1;
    	END; 
    	
    ! Now back up so that we do not include trailing blanks
    !
    IF .delimiter EQL dbg$k_car_return
    THEN
        DECR i FROM .result_str[0] TO 1 DO
    	    BEGIN
    	    IF .result_str[.i] NEQ %C' '
    	    THEN
    	        EXITLOOP;
    	    .result_str[0] = .result_str[0] - 1;
    	    END;

    ! Update the command string descriptor so it points to beyond 
    ! the end of the string just read.
    !
    input_desc [dsc$a_pointer] = .input_ptr;
    input_desc [dsc$w_length] = .length;

    ! The address of the counted string we have just read goes into result_addr.
    ! 
    .result_addr = .result_str;

    RETURN sts$k_success        	

    END; 

GLOBAL ROUTINE dbg$parse_search (parse_stg_desc) =
!+
! Functional Description
!
!	This routine provides an interface from the old language parsers to
!	the new debugger parse network for SEARCH. It is passed a string 
!	descriptor for the remainder of the input line.
!	It calls DBG$NPARSE_SEARCH to construct
!	a command execution network, and returns a pointer to the verb node.
!
! Inputs
!
!	parse_stg_desc	-	A string descriptor for the remainder of the
!				input line.
!
! Outputs
!
!	A command execution network is constructed, 
!	consisting of a verb node for the SEARCH
!	verb, 0-2 adverb nodes for the overrides /IDENT, /ALL, etc. , and
!	two noun nodes. A pointer to this network is returned. 
!--
    BEGIN
    MAP
    	parse_stg_desc : REF BLOCK [,BYTE];
    LOCAL
    	char,
    	dummy_mess_vect: REF VECTOR,	! Address for message vector returned
    					!    from DBG$NPARSE_SEARCH
    	len,				! Length of command line
    	parse_stg_ptr,			! Pointer into command line
    	stg : REF VECTOR [,BYTE],	! Pointer to a new copy of the 
    					!    command line
    	verb_node;			! Pointer to the head of the command
    					!    execution tree for SEARCH

    ! Call the 'new style' parse network for the search
    ! command. This builds a command execution network.
    ! We return a pointer to the verb node.
    !
    ! First allocate space for the verb node.
    !
    IF NOT dbg$nlist_freez (dbg$k_verb_node_size,
    	verb_node,
    	dummy_mess_vect)
    THEN
    	SIGNAL (dbg$_nofree);
    			
    ! Then stuff a carriage return character at the end
    ! of the input line since this is what the new style
    ! parser expects to see. Also, translate the line to
    ! upper case (the new debugger does this; the old does not)
    !
    len = .parse_stg_desc[dsc$w_length];
    IF NOT dbg$nlist_freez (1+(1+.len)/%UPVAL,
    	stg,
    	dummy_mess_vect)
    THEN
    	SIGNAL (dbg$_nofree);
    parse_stg_ptr = ch$ptr(.parse_stg_desc[dsc$a_pointer]);
    INCR i FROM 0 TO .len-1 DO
        BEGIN
    	char = ch$rchar_a(parse_stg_ptr);
    	IF .char GEQ %C'a' AND .char LEQ %C'z' 
    	THEN 
    	    stg[.i] = .char - (%C'a'-%C'A')
    	ELSE
    	    stg[.i] = .char;
    	END;
    stg[.len] = dbg$k_car_return;
    parse_stg_desc[dsc$a_pointer] = .stg;
    parse_stg_desc[dsc$w_length] = 
        .parse_stg_desc[dsc$w_length] + 1;
    		
    ! Now call the parser on the remainder of the input line
    !
    IF NOT dbg$nparse_search (.parse_stg_desc,
    	.verb_node, dummy_mess_vect)
    THEN
    	! If the above routine does not return success, then we signal
    	! an error using the error message vector that we got back.
        !
    	BEGIN
    	EXTERNAL ROUTINE
    	    LIB$SIGNAL : ADDRESSING_MODE(GENERAL);
    	BUILTIN 
    	    CALLG;
    	CALLG (.dummy_mess_vect, lib$signal);
    	END;

    ! Restore pointer field of PARSE_STG_DESC since this can be wiped out 
    ! during new style parsing.
    !
    IF .parse_stg_desc[dsc$a_pointer] EQL 0
    THEN
        parse_stg_desc[dsc$a_pointer] = .stg+.len;
    
    ! Finally, return a pointer to the verb node.
    !
    RETURN .verb_node

    END; ! dbg$parse_search
END
ELUDOM
