MODULE DBGBAS (IDENT = 'V03-000') =
BEGIN

!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
! FACILITY:	DEBUG (DBG)
!
!++
! FUNCTIONAL DESCRIPTION:
!	INITIALIZATION ROUTINES FOR DEBUG.
!
! Version:	1.19
!
! History:
!	Author:
!		Carol Peters, 12 Aug 1976: Version 01
!
!	Modified by:
!		Mike Candela, 29 FEB 1980
!		tkm	2-nov-1979
!		Richard Title, 21-AUG-1981
!		Ping Sager, 19-Oct-1981
!
! Revision history:
! V1.0	09-AUG-78	DAR	Changed version number for release 1 of VMS.
! 1.01	22-SEP-78	DAR	Deleted require file DLLNAM.
! 1.02	25-SEP-78	MCC	Deleted require file SYSLIT.
! 1.03	12-OCT-78	MCC	First BLISS baselevel X1.01  
! 1.04	08-NOV-78	DAR	Version X1.02, added new context bit "dbg$k_thread"
! 1.05	05-DEC-78	DAR	Version X1.03.
! 1.06	 4-JAN-79	MCC	Version V1.5
! 1.07	14-MAR-79	MCC	Added two new context bits, and a call to a routine
!				(dbg$set_out_def) to initialize OUTPUT config.
!				in support of log files
! 1.07a	 7-MAY-79	MCC	Version X1.51
! 1.08	13-JUL-79	MCC	DBG$INIT_DEBUG changed to init the cis.
! 1.08a	 9-AUG-79	MCC	Version X1.52
! 1.08b	17-OCT-79	MCC	Version X1.53
! 1.09   2-NOV-79	TKM	DBG$INIT_DEBUG changed to init DBG$WA
! 1.10  16-JAN-80	BAO	Version X1.64 16 JANUARY 80
! 1.11  18-JAN-80	BAO	Version X1.65 18 JANUARY 80
! 1.12  21-JAN-80	BAO	Version X1.66 21 JANUARY 80
! 1.13	28-JAN-80	MCC	Version X1.67 25 JANUARY 80
! 1.14	31-JAN-80	MCC	Version X1.68 31 JANUARY 80
! 1.15	11-FEB-80	MCC	Version X1.69 11 February 80
! 1.16	14-FEB-80	BAO	CHANGED NAME TO VAX-11 DEBUG, DELETED DATE FROM
!				STARTUP MESSAGE
! 1.17  28-FEB-80	BAO	Version X1.70
! 1.18	29-FEB-80	MCC	CHANGED STARTUP MESSAGE, VER 2.00
! 1.19  12-FEB-81	DLP	Changed startup message to ver 2.3-5
! 3.00	21-AUG-81	 RT	Changed dbg$set_context to initialize
!				dbg$k_source context bit to FALSE
!				Similarly with dbg$k_maxfiles
! 3.01	22-Sep-81	 RT	Moved initialization of dbg$deposit_lengvec
!				from dbgdp1 to here so it only gets 
!				performed once.
! 3.02  19-Oct-81        PS     Get terminal size in DBG$INIT_DEBUG
! 3.03	04-Nov-81	 RT	Added initialization of dbg$k_search bit 
!				in DBG$SET_CONTEXT
!--

! TABLE OF CONTENTS:
!
FORWARD ROUTINE
	dbg$set_context: NOVALUE,	! ROUTINE TO INITIALIZE CONTEXT BITS
    	dbg$init_lengvec : NOVALUE,	! ROUTINE TO INITIALIZE LENGTH VECTOR
	dbg$init_debug : NOVALUE;	! ROUTINE TO INITIALIZE DEBUG UNDER STARLET

!
! Require files:
!
REQUIRE 'src$:DBGPROLOG.REQ';

REQUIRE 'src$:DBGPCT.REQ';
REQUIRE 'src$:DBGGEN.REQ';
REQUIRE 'SRC$:BSTRUC.REQ';
REQUIRE 'src$:COMTER.REQ';
REQUIRE 'SRC$:SYSSER.REQ';

EXTERNAL LITERAL
	dbg$gl_sup_or_test : WEAK;

LITERAL
	dbg_multi_lang	= TRUE;		! multiple languages permitted

EXTERNAL ROUTINE
	dbg$set_optrace : NOVALUE,		! initialize for opcode tracing.
	dbg$wa_init,				! init DBG$WA
	dbg$freeinit,				! ROUTINE TO INITIALIZE FREE STORAGE
	dbg$freez,				! ROUTINE TO ALLOCATE A BLOCK OF FREE STORAGE
	dbg$init_break,				! ROUTINE TO INITIALIZE BREAKPOINT STORAGE
	dbg$set_out_def : NOVALUE;		! Initializes OUTPUT config.

%IF dbg_multi_lang
%THEN
EXTERNAL ROUTINE
	dbg$set_lang;				! sets up default language
%FI

EXTERNAL
	dbg$gb_exit_dbg: BYTE,			! EXIT SWITCH
	dbg$gb_resignal: BYTE,			! RESIGNALING SWITCH
	dbg$gl_context: BITVECTOR, 		! CONTEXT WORD
	dbg$gl_inpfab: BLOCK [, BYTE],		! FAB FOR 'INPUT'
	dbg$gl_inprab: BLOCK [, BYTE],		! RAB FOR 'INPUT'
	dbg$gl_outpfab: BLOCK [, BYTE],		! FAB FOR 'OUTPUT'
	dbg$gl_outprab: BLOCK [, BYTE],		! RAB FOR 'OUTPUT'
	dbg$gl_runframe: REF BLOCK [, BYTE],	! pointer to current run frame
	dbg$gl_cishead: REF cis_link,		! List Head for cis
        dbg$deposit_lengvec : VECTOR [, BYTE],  ! Table of lengths vs. data type 
	dbg$gl_symhead,				! LIST HEAD FOR SYMBOL TABLE
    	dbg$src_term_width;			! Terminal set width

LITERAL
	dbg_bas		= 0;			! for debugging

GLOBAL ROUTINE dbg$set_context : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!	initializes context bits that are necessary for command
!	processing. These bits are valid only during the processing
!	of a single command. They are all reset after each command.
!
! CALLING SEQUENCE:
!	dbg$set_context ()
!
! INPUTS:
!	none
!
! IMPLICIT INPUTS:
!	the names of the context bits that are to be turned off
!
! OUTPUTS:
!	none
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	novalue
!
! SIDE EFFECTS:
!	the context bits are set to false
!--

	BEGIN
 	dbg$gl_context [dbg$k_all]	 = FALSE;
	dbg$gl_context [dbg$k_all_break] = FALSE;
	dbg$gl_context [dbg$k_all_trace] = FALSE;
	dbg$gl_context [dbg$k_all_watch] = FALSE;
 	dbg$gl_context [dbg$k_break]	 = FALSE;
 	dbg$gl_context [dbg$k_cancel]	 = FALSE;
 	dbg$gl_context [dbg$k_examine]	 = FALSE;
 	dbg$gl_context [dbg$k_language]	 = FALSE;
 	dbg$gl_context [dbg$k_mode]	 = FALSE;
 	dbg$gl_context [dbg$k_module]	 = FALSE;
 	dbg$gl_context [dbg$k_override]	 = FALSE;
 	dbg$gl_context [dbg$k_resignal]	 = FALSE;
 	dbg$gl_context [dbg$k_scope]	 = FALSE;
    	dbg$gl_context [dbg$k_search] 	 = FALSE;
 	dbg$gl_context [dbg$k_set_break] = FALSE;
	dbg$gl_context [dbg$k_step]	 = FALSE;
 	dbg$gl_context [dbg$k_trce_call] = FALSE;
 	dbg$gl_context [dbg$k_trace]	 = FALSE;
 	dbg$gl_context [dbg$k_traceback] = FALSE;
	dbg$gl_context [dbg$k_watch]	 = FALSE;
	dbg$gl_context [dbg$k_trce_brch] = FALSE;
	dbg$gl_context [dbg$k_thread]	 = FALSE;
	dbg$gl_context [dbg$k_output]	 = FALSE;
	dbg$gl_context [dbg$k_log]	 = FALSE;
	dbg$gl_context [dbg$k_source]	 = FALSE;
    	dbg$gl_context [dbg$k_margins]   = FALSE;
	dbg$gl_context [dbg$k_maxfiles]	 = FALSE;
	END;

GLOBAL ROUTINE dbg$init_debug : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!	SETS UP LOCAL CONTEXT FOR THE DEBUG FACILITY UNDER STARLET.
!	IF THE LOGICAL DEVICES 'INPUT' AND 'OUTPUT' CANNOT BE SET UP,
!	THE ROUTINE RETURNS FALSE; OTHERWISE, IT RETURNS TRUE.
!
! CALLING SEQUENCE:
!	dbg$init_debug ()
!
! INPUTS:
!	none
!
! IMPLICIT INPUTS:
!	The FABs and RABs for input and output.
!	addresses of context blocks that are to be set by the initialization.
!
! OUTPUTS:
!	none
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	novalue
!
! SIDE EFFECTS:
!	CONTEXT, INPUT AND OUTPUT MODES, STEP SIZE, ETC ARE SET UP
!--

	BEGIN

    	BIND
		input_device	= UPLIT BYTE (%ASCII 'DBG$INPUT'),
		inp_dev_size	= %CHARCOUNT (%ASCII 'DBG$INPUT'),
		output_device	= UPLIT BYTE (%ASCII 'DBG$OUTPUT'),
		out_dev_size	= %CHARCOUNT (%ASCII 'DBG$OUTPUT');

	LOCAL
    		devchar: ref block[,byte],		!Device characteristics field
		status;

	!++
	! If the OPENs and CONNECTs cannot be done successfully for
	! logical devices 'DBG$INPUT' and 'DBG$OUTPUT', then signal the
	! error. This causes a return to the command line interpreter in
	! the operating system.
	!--
	dbg$gl_inpfab [fab$l_fna] = input_device;
	dbg$gl_inpfab [fab$b_fns] = inp_dev_size;
	status = $OPEN (FAB = dbg$gl_inpfab);
	IF NOT .status 
	THEN
		BEGIN
		status = .status OR fatal_bit;
		$exit (code = .status);
		RETURN
		END;

	dbg$gl_outpfab [fab$l_fna] = output_device;
	dbg$gl_outpfab [fab$b_fns] = out_dev_size;
	status = $CREATE (FAB = dbg$gl_outpfab);
	IF NOT .status
	THEN
		BEGIN
		status = .status OR fatal_bit;
		$exit (code = .status);
		RETURN
		END;

	dbg$gl_inprab [rab$l_fab] = dbg$gl_inpfab;
	status = $CONNECT (RAB = dbg$gl_inprab);
	IF NOT .status
	THEN
		BEGIN
		status = .status OR fatal_bit;
		$exit (code = .status);
		RETURN
		END;

	dbg$gl_outprab [rab$l_fab] = dbg$gl_outpfab;
	status = $CONNECT (RAB = dbg$gl_outprab);
	IF NOT .status
	THEN
		BEGIN
		status = .status OR fatal_bit;
		$exit (code = .status);
		RETURN
		END;

    	! Get the terminal width.
    	!
    	devchar = dbg$gl_outpfab[fab$l_dev];
    	if .devchar[dev$v_trm]
    	then
    	    dbg$src_term_width = .dbg$gl_outpfab[fab$w_bls]
    	else
    	    dbg$src_term_width = 80;

	!++
	! Set the flag that says resignal all exceptions from the user
	! program except for user-set breakpoints and tracepoints.
	!--
	dbg$gb_resignal = TRUE;

	!++
	! Initialize an area of free storage.
	!--
	dbg$freeinit ();

	!++
	! initialize the work area used by DBGUTL conversion routines
	!__
	dbg$wa_init();

	!++
	! Allocate a block of storage for the current DEBUG incarnation.
	! This holds all context that is particular to a single user
	! run, such as, the most common, the user program itself; or
	! less commonly, the routine called by a CALL command.
	!--
	dbg$gl_runframe = dbg$freez ((dbg$k_runfr_len + 3) / %UPVAL);
	dbg$gl_runframe [dbg$l_next_link] = 0;
	dbg$gl_runframe [dbg$l_frame_ptr] = 0;
	dbg$gl_runframe [dbg$w_run_stat] = 0;

	!++
	! Set the default language.
	!--
	dbg$set_lang (0,lang_macro);		! Default language is MACRO

	!++
	! Set all the single command context bits to false. These bits
	! refer to context that is valid only during a single command,
	! not across multiple commands.
	!--
	dbg$set_context ();

	!++
	! Initialize the breakpoint chain by allocating storage for the
	! header link and setting its pointers to point to the header link
	! itself.  Also do the once-only initialization of
	! the data structure for opcode tracing.
	!--
	dbg$init_break ();
	dbg$set_optrace(0);

	!++
	! Initialize the symbol chain by allocating storage for the header
	! link and setting the pointers to point to the link. This code
	! might become a routine or a macro. As a routine, it would be
	! practically identical to dbg$init_break.
	!--
	dbg$gl_symhead = dbg$freez (overhead_sym);
	dll_rlink (.dbg$gl_symhead) = .dbg$gl_symhead;
	dll_llink (.dbg$gl_symhead) = .dbg$gl_symhead;
	sym_value (.dbg$gl_symhead) = 0;
	sym_cstring (.dbg$gl_symhead) = 0;

	! Initialize the Command Input Stream to DBG$INPUT

	dbg$gl_cishead = dbg$freez (cis_elements/%UPVAL);	! get storage
	dbg$gl_cishead[next_link] = 0;				! anchor the list
	dbg$gl_cishead[dsc$b_dtype] = cis_dbg$input;
	dbg$gl_cishead[dsc$a_pointer] = dbg$gl_inprab;

	! Initialize the OUTPUT configuration

	dbg$set_out_def();

        ! Initialize dbg$deposit_lengvec

    	dbg$init_lengvec();

%IF dbg_bas
%THEN
	$fao_tt_out ('!/initialization complete');
%FI

	!++
	! Initialization is complete and successful.
	!--

	IF dbg$gl_sup_or_test EQL 2
	THEN
	$fao_tt_out ('!/	VAX-11 SUPERDEBUG Version 3.0-5           !/')
	ELSE
	$fao_tt_out ('!/		    VAX-11 DEBUG Version 3.0-5    !/');

	END;

ROUTINE dbg$init_lengvec : NOVALUE =
!++
! Function
!	Initializes a table of lengths that is used by the deposit command.
!--
BEGIN

	
! note that the lines commented out must be put back in for complex numbers
! when the right syntax for the deposit of a complex number is supported
	DBG$DEPOSIT_LENGVEC[DSC$K_DTYPE_Z] = 0;
	DBG$DEPOSIT_LENGVEC[DSC$K_DTYPE_V] =  1;
	DBG$DEPOSIT_LENGVEC[DSC$K_DTYPE_BU] =  1;
	DBG$DEPOSIT_LENGVEC[DSC$K_DTYPE_WU] =  2;
	DBG$DEPOSIT_LENGVEC[DSC$K_DTYPE_LU] =  4;
	DBG$DEPOSIT_LENGVEC[DSC$K_DTYPE_QU] =  8;
	DBG$DEPOSIT_LENGVEC[DSC$K_DTYPE_OU] =  16;
	DBG$DEPOSIT_LENGVEC[DSC$K_DTYPE_B] =  1;
	DBG$DEPOSIT_LENGVEC[DSC$K_DTYPE_W] =  2;
	DBG$DEPOSIT_LENGVEC[DSC$K_DTYPE_L] =  4;
	DBG$DEPOSIT_LENGVEC[DSC$K_DTYPE_Q] =  8;
	DBG$DEPOSIT_LENGVEC[DSC$K_DTYPE_P] = 0;
	DBG$DEPOSIT_LENGVEC[DSC$K_DTYPE_O] =  16;
	DBG$DEPOSIT_LENGVEC[DSC$K_DTYPE_F] =  4;
	DBG$DEPOSIT_LENGVEC[DSC$K_DTYPE_FC] = 4;
!	DBG$DEPOSIT_LENGVEC[DSC$K_DTYPE_FC] = 8 ;
	DBG$DEPOSIT_LENGVEC[DSC$K_DTYPE_D] =  8;
	DBG$DEPOSIT_LENGVEC[DSC$K_DTYPE_DC] = 8;
!	DBG$DEPOSIT_LENGVEC[DSC$K_DTYPE_DC] = 16 ;
	DBG$DEPOSIT_LENGVEC[DSC$K_DTYPE_G] =  8;
	DBG$DEPOSIT_LENGVEC[DSC$K_DTYPE_GC] = 8;
!	DBG$DEPOSIT_LENGVEC[DSC$K_DTYPE_GC] = 16 ;
	DBG$DEPOSIT_LENGVEC[DSC$K_DTYPE_H] =  16;
	DBG$DEPOSIT_LENGVEC[DSC$K_DTYPE_HC] = 16;
!	DBG$DEPOSIT_LENGVEC[DSC$K_DTYPE_HC] =  32;
	DBG$DEPOSIT_LENGVEC[DSC$K_DTYPE_T] =  0;
	DBG$DEPOSIT_LENGVEC[DSC$K_DTYPE_NU] =  0;
	DBG$DEPOSIT_LENGVEC[DSC$K_DTYPE_NL] =  0;
	DBG$DEPOSIT_LENGVEC[DSC$K_DTYPE_NLO] =  0;
	DBG$DEPOSIT_LENGVEC[DSC$K_DTYPE_NR] =  0;
	DBG$DEPOSIT_LENGVEC[DSC$K_DTYPE_NRO] =  0;
	DBG$DEPOSIT_LENGVEC[DSC$K_DTYPE_NZ] =  0;
	DBG$DEPOSIT_LENGVEC[DSC$K_DTYPE_ZI] =  0;
	DBG$DEPOSIT_LENGVEC[DSC$K_DTYPE_ZEM] =  2;
!	DBG$DEPOSIT_LENGVEC[DSC$K_DTYPE_TR] =  0;
	DBG$DEPOSIT_LENGVEC[DSC$K_DTYPE_UBS] = 0;

END; ! dbg$deposit_lengvec

END
ELUDOM
