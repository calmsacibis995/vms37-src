MODULE DBGNHELP (IDENT = 'V03-000') =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY: 	DEBUG
!
! ABSTRACT:	
!
!	This module contains the ATN parse and command execution networks to
!	support the HELP command. The routine dbg$nexecute_help consists of
!	the version 2 debugger routine dbg$get_help with a few modifications
!	to allow it to perform correctly in version 3. Specifically, error
!	signals (which unwind the stack) have been replaced with calls to
!	version 3 error output routines.
!
!
! ENVIRONMENT:	VAX/VMS
!
! AUTHOR:	David Plummer, CREATION DATE:	4/9/80
!
! MODIFIED BY:
!
!		Richard Title	15 Dec 1981	Converted to the new help
!						librarian LBR$OUTPUT_HELP,
!						which prompts for output
!						("Topic? ", "Subtopic? ")
!
! VERSION:	V02.2-001
!
!--

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
	DBG$NPARSE_HELP,		! Creates the command execution tree for help
	DBG$NEXECUTE_HELP;		! Executes the parsed HELP command

!
! REQUIRE FILES:
!

REQUIRE 'SRC$:DBGPROLOG.REQ';

REQUIRE 'SRC$:DBGGEN.REQ';
REQUIRE 'SRC$:SCALIT.REQ';
REQUIRE 'SRC$:SYSSER.REQ';

!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
	DBG$NFREERELEASE,		! Releases dynamic storage
	DBG$NFREEZ,			! Allocates non-listed storage
	DBG$NLIST_FREEZ,		! Allocates listed dynamic storage
    	DBG$GET_TEMPMEM,		! Allocates temporary dynamic storage
	DBG$NMAKE_ARG_VECT,		! Constructs a message argument vector
	LBR$INI_CONTROL,		! Librarian init control table
	LBR$OPEN,			! Librarian open library file
	LBR$CLOSE,			! Librarian close library file
	LBR$GET_HELP,			! Librarian get help
    	LBR$OUTPUT_HELP,		! Librarian output help
    	LIB$PUT_OUTPUT,			! Library output routine
    	LIB$GET_INPUT;			! Library input routine

EXTERNAL
	DBG$CHAR_TABLE : VECTOR [,BYTE], ! Character type table
    	DBG$GL_INPRAB  : BLOCK [,BYTE],	 ! RAB for DEBUG input (DBG$INPUT)
    	DBG$GL_OUTPRAB : BLOCK [,BYTE];  ! RAB for DEBUG output (DBG$OUTPUT)

!
! OWN STORAGE
!


GLOBAL ROUTINE DBG$NPARSE_HELP (INPUT_DESC, VERB_NODE, MESSAGE_VECT) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	dbg$nparse_help constructs the command execution tree for the HELP command.
!	Specifically, a noun node is allocated and linked to the verb node. A copy
!	of the present input descriptor (describing the input line minus the keyword
!	HELP) is made, and the value of the noun node is a pointer to this descriptor.
!	The actual parsing of the HELP string is done by dbg$nexecute_help.
!
! FORMAL PARAMETERS:
!
!	input_desc -		Descriptor of the present input line
!
!	verb_node -		Head of the command execution tree
!
!	message_vect -		The address of a longword to contain the address 
!				of a message argument vector
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	The command execution tree is constructed
!
! ROUTINE VALUE:
!
!	An unsigned integer longword completion code
!
! COMPLETION CODES:
!
!	sts$k_severe (4) - 	The input could not be parsed.
!
!	sts$k_success (1) - 	The input was parsed and an execution tree created
!
! SIDE EFFECTS:
!
!	NONE
!
!--
    BEGIN

    MAP
	INPUT_DESC	: REF dbg$stg_desc,
	VERB_NODE 	: REF dbg$verb_node;

    LOCAL
  	NOUN_NODE 	: REF dbg$noun_node,		! Noun node for execution tree
	command_desc 	: REF dbg$stg_desc;		! Descriptor of help line

    ! Get storage for the noun node and link to verb node
    !
    IF NOT dbg$nlist_freez (dbg$k_noun_node_size, noun_node, .message_vect)
    THEN
	RETURN sts$k_severe;

    verb_node [dbg$l_verb_object_ptr] = .noun_node;


    ! Get storage for the command descriptor
    !
    IF NOT dbg$nlist_freez (2, command_desc, .message_vect)
    THEN
	RETURN sts$k_severe;


    ! Copy the fields of the input descriptor to the command descriptor
    !
    command_desc [dsc$w_length] = .input_desc [dsc$w_length];
    command_desc [dsc$a_pointer] = .input_desc [dsc$a_pointer];


    ! Set the value of the noun node to the address of the command descriptor 
    !
    noun_node [dbg$l_noun_value] = .command_desc;


    ! Eat the rest of the input command
    !
    input_desc [dsc$w_length] = 0;

    RETURN sts$k_success;

    END;			! End of dbg$nparse_help


GLOBAL ROUTINE DBG$NEXECUTE_HELP (VERB_NODE, MESSAGE_VECT) =
!++
! FUNCTIONAL DESCRIPTION:
!	Invoke the VMS librarian to implement the HELP command. 
!
! FORMAL PARAMETERS:
!	
!	verb_node - 	Head of the command excution tree
!
!	message_vect -  The address of a longword to contain the address of a
!			message argument vector
!				
! IMPLICIT INPUTS:
!	none
!
! IMPLICIT OUTPUTS:
!
!	The HELP text is displayed to the terminal.
!
! ROUTINE VALUE:
!
!	sts$k_severe (4) - 	The command was not executed
!
!	sts$k_success (1) - 	The command was executed
!
! SIDE EFFECTS:
! 	The input string is updated to the end of the HELP command line.
!
!--

    BEGIN
    MAP 
	VERB_NODE : REF dbg$verb_node;

    LOCAL
    	CHAR,					! Temporary placeholder for a char
    	COUNT,					! Counter for leading blanks
    	INPUT_PTR,				! Temporary pointer into input
	LIB_NAME 	: REF dbg$stg_desc,	! descriptor for library name
	NOUN_NODE 	: REF dbg$noun_node, 	! noun node of command execution tree
	PARSE_STG_DESC	: REF dbg$stg_desc, 	! Descriptor of the help command
    	SAVED_PARSE_STG_DESC,
	STATUS;					! Librarian routines return status


ROUTINE PRINT_HELP_LINE (LINE_DESC) =
!++
! Functional Description:
!	Print a line of HELP text to the DEBUG output device
!	It is necessary to pass this routine to LBR$OUTPUT_HELP, instead
!	of using the default routine LIB$PUT_OUTPUT, because DEBUG writes
!	its output to DBG$OUTPUT and not to SYS$OUTPUT.
!
! Formal Parameters:
!	linedesc  	- address of string descriptor for the line to be output
!
! Implicit Inputs:
!	None
!
! Implicit Outputs:
!	None
!
! Routine Value:
!	None
!
! Side Effects:
!	None
!
!--
    BEGIN

    MAP
        line_desc	: REF dbg$stg_desc;

    $fao_tt_out ('!AD', .line_desc[dsc$w_length], .line_desc[dsc$a_pointer]);

    RETURN ss$_normal;

    END;

ROUTINE input_help_line (get_str, prompt_str) =
!++
! FUNCTION
!
!	Reads a line of HELP input from the DEBUG input stream. This routine
!	is used by LBR$OUTPUT_HELP to collect responses to the "Topic? " and
!	"Subtopic? " prompts. It is necessary to use this instead of the
!	default LIB$GET_INPUT, because DEBUG reads its input from DBG$INPUT
!	and not from SYS$INPUT.
!
! INPUTS
!
!	get_str		- The address of a string descriptor to receive the input
!	prompt_str	- A string descriptor specifying the prompt string
!
! OUTPUTS
!
! 	The get_str and out_len parameters are output parameters.
!	The return value is SS$_NORMAL if everything went OK.
!--
    BEGIN

    MAP
    	get_str: REF dbg$stg_desc,
    	prompt_str: REF dbg$stg_desc;  

    LOCAL
    	status;

    ! Set up the RAB and call RMS to give the prompt and read a line
    !
    dbg$gl_inprab[rab$w_usz] = .get_str[dsc$w_length];
    dbg$gl_inprab[rab$l_ubf] = .get_str[dsc$a_pointer];
    dbg$gl_inprab[rab$b_psz] = .prompt_str[dsc$w_length];
    dbg$gl_inprab[rab$l_pbf] = .prompt_str[dsc$a_pointer];
    status = $get (rab = dbg$gl_inprab);

    ! Put the number of characters read back into the string descriptor.
    !
    get_str[dsc$w_length] = .dbg$gl_inprab[rab$w_rsz];

    ! Return status that was obtained from the $get.
    !
    RETURN .status;

    END; ! of input_help_line
    
    !
    ! Executable code for DBG$NEXECUTE_HELP begins here
    !

    ! Recover the noun node
    !
    noun_node = .verb_node [dbg$l_verb_object_ptr];


    ! Recover the command descriptor
    !
    parse_stg_desc = .noun_node [dbg$l_noun_value];


    ! initialize the library name
    !
    lib_name = dbg$get_tempmem (2);
    lib_name [dsc$w_length] = 8;
    lib_name [dsc$a_pointer] = UPLIT BYTE(%ASCII 'DEBUGHLP');

    ! Suppress leading blanks
    !
    count = -1;
    input_ptr = ch$ptr (.parse_stg_desc[dsc$a_pointer]);
    DO
    	BEGIN
    	char = ch$rchar_a (input_ptr);
    	count = .count + 1;
    	END
    UNTIL
    	.dbg$char_table [.char] NEQ blanks; 	! blanks or tabs
    
    ! The above loop goes one too far, so correct it.
    !	
    input_ptr = ch$plus (.input_ptr, -1);
    parse_stg_desc[dsc$w_length] = .parse_stg_desc[dsc$w_length] - .count;
    parse_stg_desc[dsc$a_pointer] = .input_ptr;

    ! Save away the parse_stg_desc before we clobber it.
    !
    saved_parse_stg_desc = .parse_stg_desc;

    ! Remove the trailing carriage return from parse_stg_desc.
    !
    input_ptr = ch$ptr (.parse_stg_desc[dsc$a_pointer]);
    input_ptr = ch$plus (.input_ptr, .parse_stg_desc[dsc$w_length] - 1);
    IF ch$rchar(.input_ptr) EQL dbg$k_car_return
    THEN
    	parse_stg_desc[dsc$w_length] = .parse_stg_desc[dsc$w_length] - 1;

    ! Check for all blanks. If so, put zero in parse_stg_desc to tell the
    ! HELP librarian that no keys were specified.
    ! 
    IF .parse_stg_desc[dsc$w_length] EQL 0
    THEN
        parse_stg_desc = 0;    	

    ! Call the library routine to output help text
    !
    IF NOT (status = lbr$output_help (print_help_line, 0, .parse_stg_desc,
    				      .lib_name, UPLIT(hlp$m_prompt),
    			  	      input_help_line))
    THEN
    	BEGIN
    	SIGNAL (dbg$_debugbug, 1, dbg$k_lib_get_fail); ! No return
    	END;

    ! help has been displayed, cleanup and go home
    !
    parse_stg_desc = .saved_parse_stg_desc;
    parse_stg_desc[dsc$a_pointer] = ch$plus(.parse_stg_desc[dsc$a_pointer],
    					    .parse_stg_desc[dsc$w_length]);
    parse_stg_desc[dsc$w_length] = 0;

    RETURN sts$k_success;

    END;			! End of dbg$nexecute_help

END				!End of module
ELUDOM
