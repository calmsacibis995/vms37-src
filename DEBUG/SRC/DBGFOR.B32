MODULE DBGFOR (	IDENT = 'V03-000') =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	DEBUG (DBG)
!
! ABSTRACT:
!	This module contains the lexical scanner and reduction routines
!	for FORTRAN/DEBUG.
!
! ENVIRONMENT:	VAX/VMS, user mode, interrupts disabled.
!
! Version:	1.12
!
! History:
!	Author:
!		Carol Peters, 25 July 1977
!
!	Modified by:
!		Mike Candela, 14 NOV 1979 
!		Richard Title 7 Jul 1981
!
! 1.01	21-SEP-78	MCC	Added dbg$for_reductn from DBGPAR.
! 1.02	26-SEP-78	DAR	Removed require file SYSLIT and added FORTRN.REQ
! 1.03	18-OCT-78	MCC	Changed semantic stack from VECTOR to BLOCKVECTOR
!				to accomodate BLISS fields.
! 1.04	25-OCT-78	DAR	Changed DBG$FOR_REDUCTN to make explicit calls
!				to DBG$ADD_ARG instead of using "LINK_XX" macros.
! 1.05	30-MAR-79	MCC	Changed dbg$for_reductn to support LOG files
! 1.06	13-JUL-79	MCC	Changed dbg$for_reductn to include actions
!				for indirect command files.
! 1.07  2 -OCT-79	BAO	Added action routines to support new search rules.
! 1.08  3 -NOV-79	BAO	Added action routines and macro to support SET/SHOW TYPE.
! 1.09	14-NOV-79	MCC	Fixed Lex to support Q exponent
! 1.10	28_NOV-79	BAO	Added support for override type.
! 1.11   9-jan-79	MCC	changed dbgrst.req to rstreq.req
! 1.12	30-JAN-80	MCC	Added support for HELP
!	7-JUL-1981	RT	Changed the parse tables in fortrn.req, 
!				to allow types FLOAT, D_FLOAT, etc.,
!				in a deposit, examine, or set type command.
!				Changed the dbg$save_type macro in redmac.req
!				accordingly.
! 3.01	18-Sep-81	RT	Added support for source line display commands
! 3.02	04-Nov-81	RT	Added support for search command.
! 3.03	13-Nov-81	RT	Fixed a bug concerning nested subscripts.
! 3.04	20-Nov-81	RT	Changed SET MODULE so that it accepts module
!				names that begin with numbers.
!--

! TABLE OF CONTENTS:
!
FORWARD ROUTINE

	dbg$for_get_lex,	! extracts a FORTRAN lexeme from the input buffer
	dbg$for_reductn;	! FORTRAN action routines
!
! INCLUDE FILES:
!

REQUIRE 'src$:dbgprolog.req';
REQUIRE 'SRC$:DBGGEN.REQ';
REQUIRE 'src$:COMTER.REQ';			
REQUIRE 'SRC$:SCALIT.REQ';
REQUIRE 'SRC$:BSTRUC.REQ';
REQUIRE 'SRC$:SYSSER.REQ';
REQUIRE 'src$:FORTRN.REQ';		! FORTRAN/DEBUG Parse tables.
! REQUIRE 'src$:redmac.req' is required in MACRO section



!
! MACROS:
!
REQUIRE 'src$:redmac.req';


!
! EQUATED SYMBOLS:
!


!
! OWN STORAGE:
OWN
	line_path : INITIAL (0);

!
! EXTERNAL REFERENCES:
!
EXTERNAL ROUTINE
	dbg$pars_linnum,
	dbg$for_add,			! FORTRAN add
	dbg$for_sub,			! FORTRAN subtract
	dbg$for_mul,			! FORTRAN multiply
	dbg$for_div,			! FORTRAN divide
	dbg$for_neg,			! unary dbg$negation
	dbg$lng_dig_str: novalue,	! Make a long digit string
    	dbg$push_nest_stack: NOVALUE,	! Pushes onto a stack containing 
    					!     subscript lists (used for
    					!     handling nested subscripts)
    	dbg$pop_nest_stack: NOVALUE,	! Pops from a stack containing
    					!     subscript lists (used for
    					!     handling nested subscripts)
	dbg$get_filesp,			! Extract a filespec from input string
	dbg$freerelease,		! Release dynamically allocated storage
	dbg$radx_convrt,		! converts ASCII strings to binary numbers
    	dbg$sta_getsourcemod,		! looks up a module rst pointer
    	dbg$get_dir_list,		! parses a directory list
	dbg$cis_getfsp,			! Get filespec for indirect com file
	dbg$show_type,			! Prints user specified type.
	dbg$verify_out,			! decides whether to VERIFY input
	dbg$get_help,			! Invoke librarian for HELP
    	dbg$parse_search, 		! Parses the SEARCH command
	dbg$cis_openicf;		! Open indirect command file

EXTERNAL
	dbg$char_table : VECTOR [, BYTE],	! Character type table
	dbg$token_table : VECTOR [, BYTE],	! Table of token types.
    	dbg$gl_search_verb,			! Points to command execution
    						!    tree for SEARCH
    	dbg$gb_set_module_flag: BYTE,		! TRUE during processing of
    						!    a SET MODULE command.
    						!    This changes the behavior
    						!    of the lexer to allow for
    						!    module names that begin
    						!    with numbers.
	dbg$gb_def_mod : VECTOR [, BYTE],	! mode structure
	dbg$gl_get_lex,				! holds name of get lexeme routine
	dbg$gl_gbltyp,				! the type override field.
	dbg$gw_gbllngth : WORD,			! The length field for use with 
						! type ASCII.
    	dbg$gl_set_source,
    	dbg$gl_set_source2,
    	dbg$gl_module,				! Holds module rst pointer 
    						! for use during the SET SOURCE
    						! command.
    	dbg$gl_dirlist,				! Holds pointer to a directory
    						! list for use during the
    						! SET SOURCE command
	dbg$gl_log_buf,				! Addr of buffer containing LOG filespec
	dbg$gl_stk : semantic_stack,		! semantic stack for tokens, etc.
    	dbg$src_left_margin,			! left margin for source display
    	dbg$src_right_margin;			! right margin for source display


GLOBAL ROUTINE dbg$for_get_lex (input_stg_desc, lexeme_stg_desc) =

!++
! Functional description:
!	Using the character pointer for the input line, extracts a lexeme
!	from the input line. A lexeme is defined as an operator, an
!	alphanumeric string, a numeric string, or an
!	illegal string. Blanks and comments are absorbed.
!	The lexeme is returned in the lexeme buffer in the
!	same form as in the input string, except for numeric
!	strings, in which case the string is converted to a
!	binary number and that is returned in the lexeme buffer.
!	A token equivalent of the lexeme is the value of the
!	routine.
!
! Formal parameters:
!	input_stg_desc	- string descriptor to the input buffer.
!	lexeme_stg_desc	- varying string descriptor to the lexeme buffer
!
! Implicit inputs:
!	DBG$CHAR_TABLE	- a 128 byte VECTOR that maps each ascii character
!			  onto a dense list of equivalents.
!	DBG$TOKEN_TABLE	- a 21 byte VECTOR that maps each operator onto
!			  its token equivalent.
!
! Outputs:
!	input_stg_desc	- the field dsc$a_pointer is updated to point to
!			  the next byte to be read in the input stream.
!			  This byte is the delimiter of the lexeme found.
!			  The field dsc$w_length contains the length of
!			  the yet unread input line.
!	lexeme_stg_desc	- the field dsc$w_length holds the actual length
!			  in bytes of the lexeme found. The lexeme buffer
!			  addressed by the field dsc$a_pointer holds the
!			  lexeme string or value.
!
! Implicit outputs:
!	The ASCII representation of the lexeme is written into the
!	string addressed by the dsc$a_pointer field of lexeme_stg_desc.
!
! Routine value:
!	The type of lexeme found, alpha_str_token, digit_str_token,
!	eol_token or "operator"_token.
!
! Side effects:
!	Signal if an input character is invalid,
!	or the input string has a negative length.
!--

	BEGIN

	LITERAL
		single_prec	= 1,
		double_prec	= 3,
		quad_prec	= 5,
		table_offset	= 9,
		operator_max	= 30;

	LITERAL
		max_state_index	= 4,			! index ranges from 0 to 4
		invalid_state	= 0,			! invalid character seen
		alpha_state	= 1,			! alphabetic string expected
		numeric_state	= 2,			! numeric string expected
		eocommand_state	= 3,			! logical end of line or error seen
		radix_state	= 4,			! radix setting expected
		unspec_state	= 5;			! unspecified state, probably special character operator

	BIND
		lex_type_tbl	= UPLIT (

		mask (illegal),
		mask (alpha, alpha_low, alpha_and_hex, alphalo_and_hex
			, period, percent_sign),
		mask (numeric),
		mask (ind_comment, end_of_line),
		mask (quote)

		) : VECTOR;

	BIND
		lex_state_tbl	= UPLIT BYTE (

		invalid_state,
		alpha_state,
		numeric_state,
		eocommand_state,
		radix_state

		) : VECTOR [, BYTE];


	MAP
		input_stg_desc	: REF BLOCK [, BYTE],	! input string descriptor
		lexeme_stg_desc	: REF BLOCK [, BYTE];	! lexeme string descriptor

	LOCAL
		input_ptr,				! character pointer for input
		lexeme_ptr,				! character pointer for lexeme
		previous_radix,				! current local radix
		special_radix,				! special radix setting
		state_index,				! index into lex_state_tbl
		state,					! current state of lexical processor
		char,					! holds a single character
		count;					! counts characters used

	LABEL
		alpha_block;			! label for alpha case in the select

	!++
	! See whether there is any input line left. If not, signal
	! internal error.
	!--
	IF .input_stg_desc [dsc$w_length] LSS 0
	THEN SIGNAL (dbg$_parseerr);

	!++
	! Make the string pointers into formal BLISS character
	! pointers.
	!--
	input_ptr = ch$ptr (.input_stg_desc [dsc$a_pointer]);
	lexeme_ptr = ch$ptr (.lexeme_stg_desc [dsc$a_pointer]);

	previous_radix = .dbg$gb_mod_ptr [mode_radix];		! Save radix in case of local override.

	special_radix = FALSE;

	count = -1;
	DO						! Loop to skip leading blanks.
	    BEGIN
	    char = ch$rchar_a (input_ptr);
	    count = .count + 1;
	    END
	UNTIL .dbg$char_table[.char] NEQ blanks;

	input_ptr = ch$plus (.input_ptr, -1);		! Adjust ptr to first non-blank.
	input_stg_desc [dsc$w_length] = .input_stg_desc [dsc$w_length] - .count;
	input_stg_desc [dsc$a_pointer] = .input_stg_desc[dsc$a_pointer] + .count;


    	!+
    	! First check whether we are processing a SET SOURCE command.
    	! If so, just read a character and return alpha_str_token.
    	! The routine dbg$get_dir_list in DBGPAR will handle the rest.
    	!-
    	IF .dbg$gl_set_source
    	THEN
    	    BEGIN
    	    ! check for exhausted input
    	    IF .input_stg_desc[dsc$w_length] EQL 0
    	    THEN
    		SIGNAL(dbg$_MISDIRLIS);
    	
    	    ch$wchar_a (.char, lexeme_ptr);
    	    lexeme_stg_desc [dsc$w_length] = 1;
    	    input_stg_desc [dsc$a_pointer] = ch$plus(.input_ptr,1);
    	    input_stg_desc [dsc$w_length] = .input_stg_desc[dsc$w_length] - 1;

    	    ! Check for SET SOURCE/MODULE=XXX
    	    IF .char EQL '/'
    	    THEN
    		BEGIN
    		dbg$gl_set_source = FALSE;
    		dbg$gl_set_source2 = TRUE;
    		RETURN slash_token
    		END
    	    ELSE
    	        RETURN alpha_str_token;
    	    END;

	!++
	! Convert the mapping of the first significant character
	! into a lexical state. This state drives the later CASE
	! processing.
	!--
	state_index = 0;
	REPEAT
		BEGIN
		IF .lex_type_tbl [.state_index] ^ .dbg$char_table [.char] LSS 0
		THEN
			BEGIN
			state = .lex_state_tbl [.state_index];
			EXITLOOP
			END
		ELSE
			BEGIN
			state_index = .state_index + 1;
			IF .state_index GTR max_state_index
			THEN
				BEGIN
				state = unspec_state;
				EXITLOOP
				END;
			END;
		END;


    	! The following code allows for module names that begin with numeric
    	! characters, as in SET MODULE 5A
    	! The idea is that in this case we want to read the name as an
    	! alpha_string. 
    	!
    	IF .dbg$gb_set_module_flag
    	THEN
    	    IF .char GEQ %C'0' AND .char LEQ %C'9' 
    	    THEN
    		! The above processing put us in numeric_state, but since
    		! we are in a SET MODULE command, we really want to be
    		! in alpha_state.
    		!
    		state = alpha_state;

	REPEAT CASE .state FROM 0 to max_state_index + 1 OF	! analyze current state

		SET

		[invalid_state]:			! if illegal, just signal
			SIGNAL (dbg$_invchar);

		[alpha_state]:				! alphanumeric string
alpha_block:		BEGIN

			!++
			! If the initial character is
			! a period, see whether the next character is
			! an alphabetic. If it is, this must be a logical
			! operator keyword, so allow the leading dot.
			! Otherwise, it is a number or a standalone term.
			!--
			LOCAL
				period_present;
			IF .char EQL %C'.'
			THEN
				BEGIN

				LOCAL
					new_char;

				new_char = ch$rchar (ch$plus (.input_ptr, 1));
				IF NOT (oneof (.dbg$char_table [.new_char], alpha, alpha_low,
						alpha_and_hex, alphalo_and_hex))
				THEN
					BEGIN
					IF .dbg$char_table [.new_char] EQL numeric
					THEN state = numeric_state
					ELSE state = unspec_state;
					LEAVE alpha_block;
					END
				ELSE period_present = TRUE;
				END
			ELSE period_present = FALSE;
			!++
			! Now read the input buffer until a non-alpha
			! and non-numeric
			! character is encountered. Store each
			! character found in the buffer for the lexeme
			! unless the length of that buffer is expended.
			!--

			count = 0;

			DO
				BEGIN
				IF (.char GEQU %C'a')
				THEN char = .char - upper_case_dif;
				count = .count + 1;
				IF .count LEQ sym_max_length
				THEN ch$wchar_a (.char, lexeme_ptr);
				char = ch$a_rchar (input_ptr);
				END
			WHILE	(oneof (.dbg$char_table [.char], alpha, alpha_low, numeric,
						alpha_and_hex, alphalo_and_hex));

			!++
			! Now see whether the next character
			! is a period and the string started with a
			! period. In this case, store the ending period
			! also.
			!--
			IF .char EQL %C'.' AND .period_present
			THEN
				BEGIN
				count = .count + 1;
				IF .count LEQ sym_max_length
				THEN ch$wchar (.char, .lexeme_ptr);
				input_ptr = ch$plus (.input_ptr, 1);
				END;

			IF .count GTR sym_max_length
			THEN
				BEGIN
				SIGNAL (dbg$_stgtrunc);
				lexeme_stg_desc [dsc$w_length] = sym_max_length;
				END
			ELSE lexeme_stg_desc [dsc$w_length] = .count;
			input_stg_desc [dsc$a_pointer] = .input_ptr;
			input_stg_desc [dsc$w_length] = .input_stg_desc [dsc$w_length] - .count;


			RETURN alpha_str_token
			END;

		[numeric_state]:			! numeric string
			BEGIN

			!++
			! A number can begin with
			! or contain a decimal point (period). See
			! whether there is a leading decimal point,
			! and if so, set a flag indicating that.
			! This will allow trailing zeroes to be ignored.
			!--

			LOCAL
				period_present,
				floating_flag;

			IF .char EQL asc_period
			THEN period_present = TRUE
			ELSE period_present = FALSE;
			floating_flag = 0;

			!++
			! Now read the input buffer until a non-numeric
			! character is encountered. Ignore all leading
			! zeroes unless a decimal point was present.
			! Store each character found in the buffer for
			! the lexeme unless the length of that buffer
			! is expended.
			!--
			count = 0;

			IF NOT .period_present
			THEN
				WHILE (.char EQL %C'0')
				DO
					BEGIN
					count = .count + 1;
					char = ch$a_rchar (input_ptr);
					END;

			!++
			! If the entire number was zero, put a single
			! zero in the lexeme buffer and return.
			!--
			input_stg_desc [dsc$w_length] = .input_stg_desc [dsc$w_length] - .count;
			count = 0;
			IF .dbg$char_table [.char] NEQ numeric
				AND .dbg$char_table [.char] NEQ period
				AND NOT .period_present
				AND NOT (oneof (.dbg$char_table [.char], alpha_and_hex, alphalo_and_hex))
			THEN
				BEGIN
				lexeme_stg_desc [dsc$w_length] = 1;
				input_stg_desc [dsc$a_pointer] = .input_ptr;
				IF .dbg$gb_mod_ptr [mode_fortran] EQL label_mode
						OR
				   .dbg$gb_mod_ptr [mode_fortran] EQL line_mode
				THEN
				    BEGIN
				    ch$wchar ('0', .lexeme_ptr);
				    RETURN alpha_str_token;
				    END
				ELSE
				    BEGIN
				    ch$wchar (0, .lexeme_ptr);
				    RETURN digit_str_token;
				    END;
				END;

			!++
			! This is the normal store and pick up next
			! numeric character.
			!--
			IF (NOT .period_present) AND (.dbg$char_table [.char] NEQ period)
			THEN
				DO
					BEGIN
					IF .dbg$char_table[.char] EQL alphalo_and_hex
					THEN char = .char - upper_case_dif;
					count = .count + 1;
					IF .count GTR num_max_length
					THEN
						BEGIN


						ch$move (num_max_length - 1,
							ch$plus (ch$ptr (.lexeme_stg_desc [dsc$a_pointer]), 1),
							ch$ptr (.lexeme_stg_desc [dsc$a_pointer]));
						ch$wchar (.char, .lexeme_ptr-1);
						END
					ELSE ch$wchar_a (.char, lexeme_ptr);
					char = ch$a_rchar (input_ptr);


					END
				WHILE (oneof (.dbg$char_table [.char], numeric,
						alpha_and_hex, alphalo_and_hex));

			!++
			! FORTRAN may have a decimal point following the
			! string of digits. Look for the decimal point.
			! If it is present as the next character, set
			! the period present flag.
			!--
			IF .char EQL asc_period
			THEN IF NOT .period_present
			THEN
				BEGIN
				period_present = TRUE;
				DO
					BEGIN
					count = .count + 1;
					IF .count LEQ .lexeme_stg_desc [dsc$w_maxlen]
					THEN ch$wchar_a (.char, lexeme_ptr);
					char = ch$a_rchar (input_ptr);
					END
				WHILE (.dbg$char_table[.char] EQL numeric);
				END;

			!++
			! Now see if this is a number of the form
			! 'nnn'X or 'nnn'O, in which case, look for
			! the closing quote and the radix indicator.
			!--
			IF ((.special_radix) AND (NOT .period_present))
			THEN
				BEGIN

				!++
				! Processing a numeric string that is
				! enclosed in quotes and followed by a
				! letter indicating radix. Look for the
				! closing quote and the radix letter.
				!--
				IF .char EQL asc_quote
				THEN
				    BEGIN
				    char = ch$rchar (ch$plus (.input_ptr, 1));
				    IF .dbg$char_table[.char] EQL alpha_low
				    THEN char = .char - upper_case_dif;
				    SELECTONE .char OF
					SET
					[%C'O']: dbg$gb_mod_ptr[mode_radix] = octal_radix;
					[%C'X']: dbg$gb_mod_ptr[mode_radix] = hex_radix;
					[otherwise]: dbg$gb_mod_ptr[mode_radix] = decimal_radix;
					TES;
					input_ptr = ch$plus (.input_ptr, 2);
					input_stg_desc[dsc$w_length] = .input_stg_desc[dsc$w_length] - 2;
				    END;
				END
			ELSE
				BEGIN

				!++
				! Now allow for a D,E or Q form of floating
				! number, followed by an optional positive
				! or negative sign, followed by more digits.
				!--
				IF (.char GEQU %C'a')
				THEN char = .char - upper_case_dif;
				IF (.char EQL %C'D') 
					  OR 
				   (.char EQL %C'E')
					  OR
				   (.char EQL %C'Q')
				THEN
					BEGIN
					IF .char EQL %C'Q'
				        THEN
					    floating_flag = quad_prec
					ELSE
					    IF .char EQL %C'D'
					    THEN 
					    	floating_flag = double_prec
					    ELSE 
					    	floating_flag = single_prec;
					ch$wchar_a (.char, lexeme_ptr);
					count = .count + 1;
					char = ch$a_rchar (input_ptr);
					END;
				IF .period_present AND .floating_flag
				THEN
					BEGIN
					IF (.char EQL %C'+') OR (.char EQL %C'-')
					THEN
						BEGIN
						ch$wchar_a (.char, lexeme_ptr);
						count = .count + 1;
						char = ch$a_rchar (input_ptr);
						END;
					END;
				IF .period_present OR .floating_flag
				THEN	WHILE (.dbg$char_table[.char] EQL numeric)
					DO
					BEGIN
					count = .count + 1;
					IF .count LEQ .lexeme_stg_desc [dsc$w_maxlen]
					THEN ch$wchar_a (.char, lexeme_ptr);
					char = ch$a_rchar (input_ptr);
					END;
				END;

			! Update the input descriptor
			!
			input_stg_desc [dsc$a_pointer] = .input_ptr;
			input_stg_desc [dsc$w_length] = .input_stg_desc [dsc$w_length] - .count;


			! Update the lexeme descriptor. Check for truncation.
			!
			IF .count GTR .lexeme_stg_desc [dsc$w_maxlen]
			THEN
			    BEGIN
			    lexeme_stg_desc [dsc$w_length] = .lexeme_stg_desc [dsc$w_maxlen];
			    SIGNAL (dbg$_stgtrunc);
			    END
			ELSE
			    lexeme_stg_desc [dsc$w_length] = .count;


			!++
			! See whether the user has just said %LABEL or
			! the %LABEL mode is in effect, in which case
			! a string must be returned instead of the
			! actual binary number.
			!--


			IF (NOT .period_present) AND (NOT .floating_flag)
				AND (.dbg$gb_mod_ptr [mode_fortran] NEQ label_mode)
				AND (.dbg$gb_mod_ptr [mode_fortran] NEQ line_mode)
			THEN
				BEGIN


				! Check for long or regular digit string
				!
				IF .lexeme_stg_desc [dsc$w_length] GTR 9
				THEN
				    BEGIN
				    LOCAL
					lng_dig_desc : BLOCK [8,byte];


				    ! Convert to long digit string
				    !
				    lng_dig_desc [dsc$w_length] = .lexeme_stg_desc [dsc$w_length];
				    lng_dig_desc [dsc$a_pointer] = .lexeme_stg_desc [dsc$a_pointer];
				    dbg$lng_dig_str (lng_dig_desc,
						     .lexeme_stg_desc,
						     .lng_dig_desc [dsc$w_length] + 1);
				    RETURN l_dig_str_token;
				    END
				ELSE
				    BEGIN
				    .lexeme_stg_desc[dsc$a_pointer] = dbg$radx_convrt (.lexeme_stg_desc);
				    dbg$gb_mod_ptr [mode_radix] = .previous_radix;
				    lexeme_stg_desc [dsc$w_length] = 4;
				    RETURN digit_str_token;
				    END;
				END;

			IF (.dbg$gb_mod_ptr [mode_fortran] EQL label_mode)
				OR (.dbg$gb_mod_ptr [mode_fortran] EQL line_mode)
			THEN
				BEGIN
				IF .dbg$gb_mod_ptr [mode_radix] NEQ .previous_radix
				    OR .period_present
				THEN
				    BEGIN
				    SIGNAL (dbg$_invnumber, 1, .lexeme_stg_desc);
				    RETURN (0);
				    END;
				RETURN alpha_str_token;
				END
			ELSE	
			    IF .floating_flag EQL quad_prec
			    THEN
				BEGIN

				! Convert to long digit string
				!
				LOCAL
				    lng_dig_desc : BLOCK [8,BYTE];

				lng_dig_desc [dsc$w_length] = .lexeme_stg_desc [dsc$w_length];
				lng_dig_desc [dsc$a_pointer] = .lexeme_stg_desc [dsc$a_pointer];
				dbg$lng_dig_str (lng_dig_desc,
					         .lexeme_stg_desc,
					         .lng_dig_desc [dsc$w_length] + 1);
				RETURN l_dig_str_token;
				END
			     ELSE
				IF .floating_flag EQL double_prec	
			        THEN 
				    RETURN double_fl_token
			        ELSE
				    RETURN single_fl_token;
			END;

		[eocommand_state]:			! logical end of line
			BEGIN

			!++
			! The length of the input line should be set to
			! zero here. Reduce it one so that it is less than
			! zero. This will cause an error if this same
			! input line ever comes back to the lex routine.
			!--
			lexeme_stg_desc [dsc$w_length] = 0;
			input_stg_desc [dsc$a_pointer] = ch$plus (.input_ptr, 1);
			input_stg_desc [dsc$w_length] = .input_stg_desc [dsc$w_length] - 1;
			RETURN eol_token
			END;

		[radix_state]:				! up arrow, quote, percent sign
			BEGIN		! FORTRAN handling

			!++
			! A quote can occur as the beginning of an
			! alphabetic string, or as a special character
			! that begins a numeric string that ends in another
			! quote and then a radix-indicator letter.
			! See whether this is a quote followed by a
			! number. If so, save a state variable, 
			! and proceed to collect the number.
			!--
			LOCAL
				temp_ptr;

			temp_ptr = ch$plus(.input_ptr, 1);
			char = ch$rchar_a(temp_ptr);
			IF (oneof (.dbg$char_table[.char], numeric, alpha_and_hex,
					alphalo_and_hex))
			THEN
				BEGIN
				DO
				char = ch$rchar_a(temp_ptr)
				UNTIL (oneof (.dbg$char_table[.char], quote, end_of_line));
				IF (.dbg$char_table[.char] EQL quote)
				THEN
				    BEGIN
				    char = ch$rchar(.temp_ptr);
				    IF (.char GEQU %C'a')
				    THEN char = .char - upper_case_dif;
				    IF ((.char EQL %C'O') OR (.char EQL %C'X')
					OR (.char EQL %C'D'))
				    THEN state = numeric_state;
				    END;
				END;
			IF (.state EQL numeric_state)
			THEN
				BEGIN
				char = ch$a_rchar(input_ptr);		! update ptr and get first no.
				input_stg_desc[dsc$a_pointer] = .input_ptr;
				input_stg_desc[dsc$w_length] = .input_stg_desc[dsc$w_length] - 1;
				special_radix = TRUE;
				END
			ELSE
				BEGIN
				char = ch$rchar(.input_ptr);
				state = unspec_state;
				END;

			END;

		[unspec_state]:				! special character like operator or illegal
			BEGIN

			!++
			! Most likely, this is a single character
			! operator. Write its ASCII value into the
			! lexeme buffer, and return its equivalent
			! token.
			!--
			LOCAL
				index;

			index = .dbg$char_table[.char];
			IF ((.index GEQ table_offset) AND (.index LEQ operator_max))
			THEN
				BEGIN
				ch$wchar (.char, .lexeme_ptr);
				lexeme_stg_desc[dsc$w_length] = 1;
				input_stg_desc[dsc$a_pointer] = ch$plus (.input_ptr, 1);
				input_stg_desc[dsc$w_length] = .input_stg_desc[dsc$w_length] - 1;
				RETURN .dbg$token_table[.index - table_offset]
				END;

			!++
			! This doesn't seem to be anything about which
			! we know. SIGNAL invalid character.
			!--
			SIGNAL (dbg$_invchar);
			END;			! loop back to CASE statement.

		TES;

	RETURN 1;
	END;					! end of dbg$for_get_lex

GLOBAL ROUTINE dbg$for_reductn (action_key, stack, lex_stg_desc, lahead_stg_desc, parse_stg_desc) =
!++
! Functional description:
!	Does the action associated with a reduction. The action is chosen
!	based on the action_key, which is the name of an action routine
!	as specified in the semantics table.
!
! Formal Parameters:
!	action_key	- name of the action routine
!	stack		- top of stack in the context of the reduction
!
! Implicit inputs:
!	the name of the parse stack : dbg$gl_stk
!
! Outputs:
!	none
!
! Routine value:
!	TRUE or FALSE
!
! Side effects:
!	The top of stack is often changed. arguments are put into
!	linked lists, context values are altered.
!--

    BEGIN
    MAP
	lex_stg_desc	: REF BLOCK [ ,BYTE],
	lahead_stg_desc	: REF BLOCK [ ,BYTE],
	parse_stg_desc	: REF BLOCK [ ,BYTE];

    EXTERNAL
    	dbg$gl_modrstptr2; ! Holds module rst pointer during TYPE command.
    			   ! Is used to implement "sticky" module specs,
    			   ! e.g.,
    			   ! TYPE MOD1\1,10,20
    			   ! The MOD1 applies to all three elements.

    CASE .action_key FROM 1 TO fornone OF

	SET

	[forcomlin]:	BEGIN
			dbg$verify_out (.parse_stg_desc);
			IF NOT dbg$perform_cmd(.stack) 
			THEN 
				RETURN false;
			END;

	[foraddexa]:	dbg$add_arg (dbg$gl_stk[.stack+2, stk$v_base], 0);
	[foraddexp]:	dbg$for_add (dbg$gl_stk [.stack, stk$v_val1], dbg$gl_stk [.stack, stk$v_type],
			     dbg$gl_stk [.stack + 2, stk$v_val1], dbg$gl_stk [.stack + 2, stk$v_type]);
    	[foraddone]:	dbg$add_arg (dbg$gl_stk[.stack,stk$v_base], -1);
	[foraddran]:	dbg$add_arg (dbg$gl_stk[.stack+2, stk$v_base],
					dbg$gl_stk[.stack+4, stk$v_base]);
    	[foraddsrc]:	dbg$add_arg (dbg$gl_stk[.stack+2, stk$v_base], -1);
	[foraftcnt]:	dbg$get_step_count (.stack + 1, .lex_stg_desc);
	[forandopr]:	dbg$logical_and (.stack);
	[forarrnam]:	BEGIN
    			dbg$push_nest_stack();
    			dbg$redu_path_addr (.stack);
    			END;
	[forascclr]:	IF .dbg$gl_gbltyp EQL dsc$k_dtype_t
			THEN dbg$gl_gbltyp = -1;
	[forasclen]:	dbg$save_ascii_leng(.lex_stg_desc);
	[forbreacb]:	dbg$gl_list[2] = dbg$get_bpt_act(.parse_stg_desc);
	[forcanarg]:	dbg$cancel_parm (.stack);
	[forcanind]:	dbg$set_over_adr();
    	[forcanmod]:	dbg$gl_context [dbg$k_module] = TRUE;
	[forcanovr]:	dbg$gl_gbltyp = -1;
	[forcanswi]:	dbg$can_switch (.stack);
	[forcalsub]:	dbg$add_arg (dbg$gl_stk[.stack+1, stk$v_base], 0);
	[fordefarg]:	dbg$add_arg (dbg$gl_stk[.stack, stk$v_base],
					dbg$gl_stk[.stack+2, stk$v_base]);
	[fordeflst]:	dbg$add_arg (dbg$gl_stk[.stack+2, stk$v_base],
					dbg$gl_stk[.stack+4, stk$v_base]);
    	[fordefmod]:	BEGIN
    			IF .dbg$gl_modrstptr2 EQL 0
    			THEN
    			    dbg$gl_stk[.stack,stk$v_nt_ptr] =
    				dbg$sta_getsourcemod(0)
    			ELSE
    			    dbg$gl_stk[.stack,stk$v_nt_ptr] = 
    				.dbg$gl_modrstptr2;
    			IF .dbg$gl_stk[.stack,stk$v_nt_ptr] EQL 0
    			THEN
    			    SIGNAL(dbg$_noscope,
    				.dbg$gl_stk[.stack,stk$v_val1]);
    			END;
	[fordefnam]:	dbg$save_name (.stack, .lex_stg_desc);
	[fordeploc]:	BEGIN
			dbg$add_arg (dbg$gl_stk[.stack, stk$v_base], 0);
			dbg$set_overs (override_mode, noimmed_n_token);
			END;
	[fordgptho]:	dbg$bld_num_pth(.lahead_stg_desc);
	[fordigpat]:	dbg$bld_num_pth(.lex_stg_desc);
	[fordigstr]:	dbg$trans_name(.stack, .lahead_stg_desc);
	[fordimadd]:	dbg$add_dimension (.stack + 2);
	[fordimone]:	dbg$add_dimension (.stack);
	[fordivexp]:	dbg$for_div (dbg$gl_stk [.stack, stk$v_val1], dbg$gl_stk [.stack, stk$v_type],
			     dbg$gl_stk [.stack + 2, stk$v_val1], dbg$gl_stk [.stack + 2, stk$v_type]);

	[fordfltyp]:	dbg$set_default_typ();
	[foreqvexp]:	dbg$equivalence (.stack);
	[forexaone]:	dbg$add_arg (dbg$gl_stk[.stack, stk$v_base], 0);
    	[forexasrc]:	dbg$gl_stk[.stack,stk$v_val1] = exsource_token;
	[forexpran]:	dbg$add_arg (dbg$gl_stk[.stack, stk$v_base],
					dbg$gl_stk[.stack+2, stk$v_base]);
	[forindcom]:	dbg$cis_openicf();
	[forinsclr]:	IF .dbg$gl_gbltyp EQL dsc$k_dtype_zi
			THEN dbg$gl_gbltyp = -1;
    	[forgetdir]:	BEGIN
    			dbg$get_dir_list(.lex_stg_desc,.parse_stg_desc,.stack);
    			dbg$gl_set_source = FALSE;
    			END;
	[forgethlp]:	dbg$get_help( .parse_stg_desc);
	[forgeticf]:	dbg$cis_getfsp(.lex_stg_desc, .parse_stg_desc);
	[forgetfsp]:	BEGIN
			MAP dbg$gl_log_buf : REF VECTOR [,BYTE];
			dbg$gl_log_buf = dbg$get_filesp(.lex_stg_desc, .parse_stg_desc);
			END;
    	[forintstr]:	dbg$trans_name(.stack,.lex_stg_desc);
	[forloctyp]:	dbg$set_local_type();
    	[formarone]:	BEGIN
    			! Right margin goes in val2,
    			! left margin in val1.
    			! Since only one margin was specified, it was the
    			! right margin so put it in val2
    			dbg$gl_stk[.stack,stk$v_val2] = 
    			    .dbg$gl_stk[.stack,stk$v_val1];
    			! Use 1 for the left margin.
    			dbg$gl_stk[.stack,stk$v_val1] = 1;
    			END;
    	[formartwo]:	BEGIN
    			! Right margin is in position stack+2.
    			! Put it on top of the stack in field val2.
    			dbg$gl_stk[.stack,stk$v_val2] = 
    			    .dbg$gl_stk[.stack+2,stk$v_val1];
    			END;
    	[formarlef]:	BEGIN
    			! SET MARGIN L:
    			dbg$gl_stk[.stack,stk$v_val2] = -1;
    			END;
    	[formarrig]: 	BEGIN
    			! SET MARGIN :R
    			dbg$gl_stk[.stack,stk$v_val1] = -1;
    			dbg$gl_stk[.stack,stk$v_val2] =
    			    .dbg$gl_stk[.stack+1,stk$v_val1];
    			END;
    	[formaxfil]:	dbg$gl_context[dbg$k_maxfiles] = TRUE;
    	[formodcan]:	BEGIN
    			dbg$gl_context[dbg$k_source] = TRUE;
    			dbg$gl_module = .dbg$gl_stk[.stack+5,stk$v_val1];
    			END;
    	[formodsou]:	BEGIN
    			dbg$gl_context[dbg$k_source] = TRUE;
    			dbg$gl_dirlist = .dbg$gl_stk[.stack+5,stk$v_val1];
    			dbg$gl_module = .dbg$gl_stk[.stack+4,stk$v_val1];
    			END;
	[formulexp]:	dbg$for_mul (dbg$gl_stk [.stack, stk$v_val1], dbg$gl_stk [.stack, stk$v_type],
			     dbg$gl_stk [.stack + 2, stk$v_val1], dbg$gl_stk [.stack + 2, stk$v_type]);

	[fornegexp]:	dbg$for_neg (dbg$gl_stk [.stack + 1, stk$v_val1], dbg$gl_stk [.stack + 1, stk$v_type],
			     dbg$gl_stk [.stack, stk$v_val1], dbg$gl_stk [.stack, stk$v_type]);

	[fornegstr]:
		BEGIN
		LOCAL s : REF VECTOR[,BYTE];
		dbg$pop_stack(.stack);
		s = .dbg$gl_stk[.stack,stk$v_val1];
		s[1] = %C'-';
		END;

	[fornotopr]:	dbg$complement (.stack);
	[fororoper]:	dbg$logical_or (.stack);
	[forovrins]:	dbg$gl_gbltyp = dsc$k_dtype_zi;
	[forovrasc]:	BEGIN
			    dbg$gl_gbltyp = dsc$k_dtype_t;
			    dbg$gw_gbllngth = 4;
			END;
	[forovropl]:	dbg$set_overr_mode (.stack + 2);
	[forovropr]:	dbg$set_overr_mode(.stack + 1);
	[forovropt]:	dbg$set_overr_mode (.stack);
	[forovrstl]:	dbg$set_overr_step (.stack + 2);
	[forovrstp]:	dbg$set_overr_step (.stack + 1);
	[forovrtyp]:	dbg$set_over_typ();
	[forplsstr]:	dbg$pop_stack(.stack);
	[forposexp]:	dbg$pop_stack (.stack);
	[forquotec]:	BEGIN
			dbg$gl_stk [.stack, stk$v_val1] = dbg$extract_str (.parse_stg_desc);
			dbg$gl_stk [.stack, stk$v_val2] = .dbg$gl_stk [.stack, stk$v_val1];
			DBG$GL_STK [.STACK, STK$V_TYPE] = DSC$K_DTYPE_T;
			END;
	[forrefarr]:	BEGIN
    		        dbg$reduce_array (.stack);
    			dbg$pop_nest_stack();
    			END;
	[forrempar]:	dbg$pop_stack (.stack);
	[forsavmod]:	BEGIN
    			dbg$add_module (.stack, .lex_stg_desc);
    			IF .dbg$gl_set_source2 
    			THEN
    			    dbg$gl_set_source = TRUE;
    			END;
	[forsavone]:	dbg$sav_pth_nam();
	[forsavpat]:	BEGIN
			IF .line_path
			THEN
				BEGIN
				LOCAL
					ptr : REF VECTOR[,BYTE];
				ptr = .lex_stg_desc[dsc$a_pointer];
				IF .ptr[0] GEQ %C'0'
				AND .ptr[0] LEQ %C'9'
				THEN
					BEGIN
					dbg$pars_linnum(.lex_stg_desc, 0);
					line_path = FALSE;
				END
				ELSE
					dbg$build_path(.lex_stg_desc, FALSE);
			END
			ELSE
				dbg$build_path (.lex_stg_desc, FALSE);
			END;
	[forsavtyp]:	dbg$save_type(.stack);
    	[forsetsea]:	dbg$gl_context[dbg$k_search] = TRUE;
     	[forsearch]: 	BEGIN
    			! Call a routine which will parse the remainder of
    			! the input line. It will construct a command 
    			! execution network and leave a pointer to the
    			! result on the stack.
    			!
    			dbg$gl_search_verb = 
    				dbg$parse_search (.parse_stg_desc);
    			END;
    	[forshosea]:	dbg$gl_context[dbg$k_search] = TRUE;
	[forsetbre]:	dbg$break_setup (.stack, .dbg$gl_stk [.stack + 2, stk$v_val1], 1);
	[forsetbra]:	dbg$break_setup (.stack, .dbg$gl_stk [.stack + 3, stk$v_val1],
					.list_elem_exp1(.dbg$gl_head_lst));
    	[forsetmar]:	dbg$gl_context[dbg$k_margins] = TRUE;
    	[forsetsou]:	BEGIN
    			dbg$gl_context[dbg$k_source] = TRUE;
    			dbg$gl_dirlist = .dbg$gl_stk[.stack+1,stk$v_val1];
    			dbg$gl_module = 0;
    			END;
	[forsettrc]:	dbg$gl_context[dbg$k_trce_call] = TRUE;
	[forsettrb]:	dbg$gl_context[dbg$k_trce_brch] = TRUE;
	[forsetdec]:	dbg$set_dec_overs() ;
	[forsetind]:	dbg$set_over_noadr();
	[forsetlan]:	dbg$save_lang_name (.stack+2, .lex_stg_desc);
	[forsetlin]:	BEGIN
			dbg$set_line_dec (.stack);
			line_path = TRUE;
			END;
	[forsetloc]:	dbg$set_overs (local_mode, .dbg$gl_stk [.stack, stk$v_val1]);
	[forsetlog]:	dbg$gl_context[dbg$k_log] = TRUE;
    	[formodule]:	! At this point we have just done the reduction
    			! SET_MODULE -> SET MODULE
    			! We set a flag indicating to the lexer that it 
    			! is about to process a module list. This changes
    			! the behavior of the lexer to allow for module
    			! names that begin with numbers.
    			!
    			dbg$gb_set_module_flag = TRUE;
	[forsetmdl]:	dbg$gl_context[dbg$k_module] = TRUE;
	[forsetmod]:	dbg$gl_context[dbg$k_mode] = TRUE;
	[forsetout]:	dbg$gl_context[dbg$k_output] = TRUE;
	[forsetsco]:	dbg$gl_context[dbg$k_scope] = TRUE;
	[forsetstp]:	dbg$gl_context[dbg$k_step] = TRUE;
	[forshoarg]:	dbg$show_param (.stack);
	[forshocal]:	dbg$gl_context[dbg$k_traceback] = TRUE;
	[forshcall]:	BEGIN
			dbg$get_step_count (.stack + 1, .lex_stg_desc);
			dbg$gl_context[dbg$k_traceback] = TRUE;
			END;
	[forshotyp]:	dbg$show_type(default);
	[forshovtp]:	dbg$show_type(override);
    	[forsoucon]:	dbg$gl_set_source = TRUE;
    	[forsrcmod]:	BEGIN
    			dbg$gl_modrstptr2 = dbg$gl_stk[.stack,stk$v_nt_ptr] =
    			    .dbg$gl_stk[.stack,stk$v_val1];
    			dbg$gl_stk[.stack,stk$v_val1] =
    			    .dbg$gl_stk[.stack+2,stk$v_val1];
    			dbg$gl_stk[.stack,stk$v_val2] =
    			    .dbg$gl_stk[.stack+2,stk$v_val2];
    			END;
    	[forsrcone]:	dbg$gl_stk[.stack,stk$v_val2] =
    			    .dbg$gl_stk[.stack,stk$v_val1];
    	[forsrcran]:	dbg$gl_stk[.stack,stk$v_val2] = 
    			    .dbg$gl_stk[.stack+2,stk$v_val1];
	[forstaloc]:	dbg$add_arg (dbg$gl_stk[.stack+1, stk$v_base], 0);
	[forstcoun]:	dbg$get_step_count (.stack + 1, .lex_stg_desc);
	[forstpcnt]:	dbg$get_step_count (.stack + 2, .lex_stg_desc);
	[forsubexp]:	dbg$for_sub (dbg$gl_stk [.stack, stk$v_val1], dbg$gl_stk [.stack, stk$v_type],
			     dbg$gl_stk [.stack + 2, stk$v_val1], dbg$gl_stk [.stack + 2, stk$v_type]);

	[forsubstr]:	dbg$char_substring(.stack);
	[forsvolpt]:	dbg$build_path(.lahead_stg_desc, FALSE);
	[fortrnlab]:	dbg$reduce_label (.stack, .lahead_stg_desc);
	[fortrnnam]:	dbg$reduce_pathname (.stack, .lahead_stg_desc);
	[foruqunam]:	dbg$translate_name (.stack, .lex_stg_desc);
	[forxorexp]:	dbg$exclusive_or (.stack);
	[fornone]  :		0;

	[inrange, outrange]:	RETURN FALSE;

	TES;

    RETURN TRUE
    END;


END							! End of module
ELUDOM
