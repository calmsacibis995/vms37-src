MODULE DBGLANVEC (IDENT = 'V03-000') =

BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:
!	DEBUG (DBG)
!
! ABSTRACT: Invokes a language dependent routine which 
!	corresponds to the current language setting.
!	Kernel DEBUG routines call routines in this module which act
!	as interfaces to the language specific routines. Kernel DEBUG
!	routines can, as a result, be largely unaware of the fact that
!	there are several PRIMARY INTERPRETERS, one for each language.
!
! Version 3.01
!
!
! AUTHOR:	Bruce Olsen, July 1980
!
!++


! TABLE OF CONTENTS:
!
FORWARD ROUTINE
	DBG$NPRIM_INT,
	DBG$NEXP_INT,
	DBG$NPRIM_OUT,
	DBG$NGET_LVAL,
	DBG$NGET_TYPE,
	DBG$NMAKE_VAL_DESC,
	DBG$NTYPE_CONV,
	DBG$NSYMBOLIZE,
	DBG$NGET_PAGES,
	DBG$NGET_LENGTH,
	DBG$NCOPY_DESC,
	DBG$NFREE_DESC,
	DBG$NGET_SYMID,
	DBG$NLOG_PREDSUC,
	DBG$NINITIALIZE : NOVALUE;

!
! INCLUDE FILES:
!
REQUIRE 'SRC$:DBGPROLOG.REQ';

!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
	DBG$NPAS_PRIM_INT,
	DBG$NPLI_PRIM_INT,
	DBG$NCOB_PRIM_INT,
	DBG$NPAS_EXP_INT,
	DBG$NPLI_EXP_INT,
	DBG$NCOB_EXP_INT,
	DBG$NPAS_PRIM_OUT,
	DBG$NPLI_PRIM_OUT,
	DBG$NCOB_PRIM_OUT,
	DBG$NPAS_GET_LVAL,
	DBG$NPLI_GET_LVAL,
	DBG$NCOB_GET_LVAL,
	DBG$NPAS_GET_TYPE,
	DBG$NPLI_GET_TYPE,
	DBG$NCOB_GET_TYPE,
	DBG$NPAS_GET_RVAL,
	DBG$NPLI_GET_RVAL,
	DBG$NCOB_GET_RVAL,
	DBG$NPAS_MAKE_VAL_DESC,
	DBG$NPLI_MAKE_VAL_DESC,
	DBG$NCOB_MAKE_VAL_DESC,
	DBG$NPAS_TYPE_CONV,
	DBG$NPLI_TYPE_CONV,
	DBG$NCOB_TYPE_CONV,
	DBG$NPAS_SYMBOLIZE,
	DBG$NPLI_SYMBOLIZE,
	DBG$NCOB_SYMBOLIZE,
	DBG$NPAS_GET_PAGES,
	DBG$NPLI_GET_PAGES,
	DBG$NCOB_GET_PAGES,
	DBG$NPAS_GET_LENGTH,
	DBG$NPLI_GET_LENGTH,
	DBG$NCOB_GET_LENGTH,
	DBG$NPAS_COPY_DESC,
	DBG$NPLI_COPY_DESC,
	DBG$NCOB_COPY_DESC,
	DBG$NPAS_FREE_DESC,
	DBG$NPLI_FREE_DESC,
	DBG$NCOB_FREE_DESC,
	DBG$NPAS_GET_SYMID,
	DBG$NPLI_GET_SYMID,
	DBG$NCOB_GET_SYMID,
	DBG$NPAS_LOG_PREDSUC,
	DBG$NPLI_LOG_PREDSUC,
	DBG$NCOB_LOG_PREDSUC,
	DBG$NPAS_COM_INIT : NOVALUE;
!***	DBG$NPLI_COM_INIT : NOVALUE;
!***	DBG$NCOB_COM_INIT : NOVALUE;

EXTERNAL 
	DBG$GB_LANGUAGE : BYTE;

LITERAL
	min_language_code = MIN (dbg$k_pli,dbg$k_pascal,dbg$k_cobol),
	max_language_code = MAX (dbg$k_pli,dbg$k_pascal,dbg$k_cobol);


GLOBAL ROUTINE DBG$NPRIM_INT (PARAM1, PARAM2, PARAM3, PARAM4, PARAM5) =
!++
! FUNCTIONAL DESCRIPTION:
!	Invokes the appropriate language specific primary interpreter
!	depending on the current language setting. It returns the 
!	value produced by these routines without looking at it.
!	It passes on its input parameters without looking at them.
!
! FORMAL PARAMETERS:
!
!	PARAM1, PARAM2, PARAM3, PARAM4, PARAM5 the formals for the language
!	dependent primary interpreters. This routine neither reads or
!	writes them, it only passes them on to the language dependent 
!	routines.
!
! IMPLICIT INPUTS:
!
!	dbg$gb_language, a global variable containing the encoded current
!	language setting.
!
! IMPLICIT OUTPUTS:
!
!	none
!
! COMPLETION CODES:
!
!	The same as the primary interpreters. See their routine headers
!	for details.
!
! SIDE EFFECTS:
!
!	The same as the primary interpreters. See their routine headers
!	for details. This routine will produce a SIGNAL if the language of
!	dbg$gb_language is unknown.
!--

    BEGIN
	RETURN 
	    (CASE .dbg$gb_language
		FROM min_language_code TO max_language_code OF
		    SET
		[dbg$k_pli] :
		    dbg$npli_prim_int(.param1,.param2,.param3,.param4,.param5);
		[dbg$k_pascal] :
		    dbg$npas_prim_int(.param1,.param2,.param3,.param4,.param5);
		[dbg$k_cobol] :
		    dbg$ncob_prim_int(.param1,.param2,.param3,.param4,.param5);
		[inrange, outrange]: 
		    SIGNAL (dbg$_debugbug,1,dbg$k_bad_lang_msg_num);
		    TES
	    );
    END;	! END  of routine DBG$NPRIM_INT.


GLOBAL ROUTINE DBG$NEXP_INT (PARAM1, PARAM2, PARAM3, PARAM4) =
!++
! FUNCTIONAL DESCRIPTION:
!	Invokes the appropriate language specific expression interpreter
!	depending on the current language setting. It returns the 
!	value produced by these routines without looking at it.
!	It passes on its input parameters without looking at them.
!
! FORMAL PARAMETERS:
!
!	PARAM1, PARAM2, PARAM3, PARAM4 : the formals for the language
!	dependent expression interpreters. This routine neither reads or
!	writes them, it only passes them on to the language dependent 
!	routines.
!
! IMPLICIT INPUTS:
!
!	dbg$gb_language, a global variable containing the encoded current
!	language setting.
!
! IMPLICIT OUTPUTS:
!
!	none
!
! COMPLETION CODES:
!
!	The same as the expression interpreters. See their routine headers
!	for details.
!
! SIDE EFFECTS:
!
!	The same as the expression interpreters. See their routine headers
!	for details. This routine will produce a SIGNAL if the language of
!	dbg$gb_language is unknown.
!--

    BEGIN
	RETURN 
	    (CASE .dbg$gb_language
		FROM min_language_code TO max_language_code OF
		    SET
		[dbg$k_pli] :
		    dbg$npli_exp_int(.param1,.param2,.param3,.param4);
		[dbg$k_pascal] :
		    dbg$npas_exp_int(.param1,.param2,.param3,.param4);
		[dbg$k_cobol] :
		    dbg$ncob_exp_int(.param1,.param2,.param3,.param4);
		[inrange, outrange]: 
		    SIGNAL (dbg$_debugbug,1,dbg$k_bad_lang_msg_num);
		    TES
	    );
    END;	! END  of routine DBG$NEXP_INT


GLOBAL ROUTINE DBG$NPRIM_OUT (PRIM_DESC, PARAM2, PARAM3) =
!++
! FUNCTIONAL DESCRIPTION:
!	Invokes the appropriate language specific primary outputer
!	depending on the contents of the language field in the 
!	primary descriptor header. It returns the 
!	value produced by these routines without looking at it.
!	It passes on its input parameters without looking at them.
!
! FORMAL PARAMETERS:
!
!	PRIM_DESC - The address of the primary descriptor of the 
!		primary to be output.
!	
!	PARAM2 - The second parameter for the language
!		dependent primary outputers. This routine neither 
!		reads or writes it, it only passes it on to the 
!		language dependent routines.
!
!	PARAM3 - The third parameter for tha language dependent primary ouput
!		routines. Unknow to this routine.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION CODES:
!
!	The same as the primary outputers. See their routine headers
!	for details.
!
! SIDE EFFECTS:
!
!	The same as the primary outputers. See their routine headers
!	for details. This routine will produce a SIGNAL for an unknown language.
!--

    BEGIN
	MAP prim_desc : REF dbg$dhead;
 	RETURN 
	    (CASE .prim_desc[dbg$b_dhead_lang]
		FROM min_language_code TO max_language_code OF
		    SET
		[dbg$k_pli] :
		    dbg$npli_prim_out(.prim_desc,.param2,.param3);
		[dbg$k_pascal] :
		    dbg$npas_prim_out(.prim_desc,.param2,.param3);
		[dbg$k_cobol] :
		    dbg$ncob_prim_out(.prim_desc,.param2,.param3);
		[inrange, outrange]: 
		    SIGNAL (dbg$_debugbug,1,dbg$k_bad_lang_msg_num);
		    TES
	    );
    END;	! END  of routine DBG$NPRIM_OUT.


GLOBAL ROUTINE DBG$NGET_LVAL (PRIM_DESC, PARAM2, PARAM3) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Language vectoring routine for the get_lval language specific routines.
!	Control is transfered to the appropriate language specific routine on the
!	basis of the language literal written in the primary descriptor header.
!
! FORMAL PARAMETERS:
!
!	PRIM_DESC	- A longword containing the address of a primary descriptor
!
!	PARAM2		- Unknown to this routine
!
!	PARAM3		- Unknown to this routine
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	This routine returns the value of the language specific routine invoked
!	unless a language literal error is detected.
!
! COMPLETION CODES:
!
!	Same as language specific routine invoked unless a language literal error
!	is detected.
!
! SIDE EFFECTS:
!
!	Same as language specifc routine invoked. This routine will produce a SIGNAL
!	for unknown languages.
!
!--
    BEGIN
	MAP prim_desc : REF dbg$dhead;
 	RETURN 
	    (CASE .prim_desc[dbg$b_dhead_lang]
		FROM min_language_code TO max_language_code OF
		    SET
		[dbg$k_pli] :
		    dbg$npli_get_lval(.prim_desc,.param2,.param3);
		[dbg$k_pascal] :
		    dbg$npas_get_lval(.prim_desc,.param2,.param3);
		[dbg$k_cobol] :
		    dbg$ncob_get_lval(.prim_desc,.param2,.param3);
		[inrange, outrange]: 
		    SIGNAL (dbg$_debugbug,1,dbg$k_bad_lang_msg_num);
		    TES
	    );
    END;	! End of dbg$nget_lval


GLOBAL ROUTINE DBG$NGET_TYPE (PRIM_DESC, PARAM2, PARAM3) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Languagw vectoring routine to invoke the appropriate language specific
!	get_type routine. This routine keys off of the language literal written
!	into the header of the primary descriptor.
!
! FORMAL PARAMETERS:
!
!	PRIM_DESC	- A longword containing the address of a primary descriptor
!
!	PARAM2		- Unknown to this routine
!
!	PARAM3		- Unknown to this routine
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	This routine returns the value of the invoked language specific routine
!	unless a language literal error is detected.
!
! COMPLETION CODES:
!
!	Same as the invoked language specific routines unless a language literal
!	error is detected.
!
! SIDE EFFECTS:
!
!	Same as the invoked language specific routine. This routine generates a
!	SIGNAL on a language literal error.
!
!--
    BEGIN
	MAP prim_desc : REF dbg$dhead;
 	RETURN 
	    (CASE .prim_desc[dbg$b_dhead_lang]
		FROM min_language_code TO max_language_code OF
		    SET
		[dbg$k_pli] :
		    dbg$npli_get_type(.prim_desc,.param2,.param3);
		[dbg$k_pascal] :
		    dbg$npas_get_type(.prim_desc,.param2,.param3);
		[dbg$k_cobol] :
		    dbg$ncob_get_type(.prim_desc,.param2,.param3);
		[inrange, outrange]: 
		    SIGNAL (dbg$_debugbug,1,dbg$k_bad_lang_msg_num);
		    TES
	    );
    END;	! End of dbg$nget_type


GLOBAL ROUTINE DBG$NGET_RVAL (PRIM_DESC, PARAM2, PARAM3) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Language vectoring routine for the get_rval language specific routines.
!	Control is transfered to the appropriate language specific routine on the
!	basis of the language literal written in the primary descriptor header.
!
! FORMAL PARAMETERS:
!
!	PRIM_DESC	- A longword containing the address of a primary descriptor
!
!	PARAM2		- Unknown to this routine
!
!	PARAM3		- Unknown to this routine
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	This routine returns the value of the language specific routine invoked
!	unless a language literal error is detected.
!
! COMPLETION CODES:
!
!	Same as language specific routine invoked unless a language literal error
!	is detected.
!
! SIDE EFFECTS:
!
!	Same as language specifc routine invoked. This routine generates a SIGNAL
!	when an unkonw language is detected.
!
!--
    BEGIN
	MAP prim_desc : REF dbg$dhead;
 	RETURN 
	    (CASE .prim_desc[dbg$b_dhead_lang]
		FROM min_language_code TO max_language_code OF
		    SET
		[dbg$k_pli] :
		    dbg$npli_get_rval(.prim_desc,.param2,.param3);
		[dbg$k_pascal] :
		    dbg$npas_get_rval(.prim_desc,.param2,.param3);
		[dbg$k_cobol] :
		    dbg$ncob_get_rval(.prim_desc,.param2,.param3);
		[inrange, outrange]: 
		    SIGNAL (dbg$_debugbug,1,dbg$k_bad_lang_msg_num);
		    TES
	    );
    END;	! End of dbg$nget_rval

GLOBAL ROUTINE DBG$NMAKE_VAL_DESC (PRIM_DESC, PARAM2, PARAM3, PARAM4) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine interfaces to the language specific MAKE_VAL_DESC routines.
!	The language field of the primary descriptor is used to vector control
!	to the approproate routine.
!
! FORMAL PARAMETERS:
!
!	PRIM_DESC	- A longword containing the address of a language specific
!			  primary descriptor
!
!	PARAM2 - PARAM4	- Unknown to this routine
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	This routine returns whatever the language specific routine has constructed.
!
! ROUTINE VALUE:
!
!	Same as the invoked language specific routine.
!
! SIDE EFFECTS:
!
!	Same as the invoked language specific routine. This routine will produce
!	a SIGNAL if the language of the primary descriptor is unknown.
!
!--

    BEGIN
	MAP prim_desc : REF dbg$dhead;
 	RETURN 
	    (CASE .prim_desc[dbg$b_dhead_lang]
		FROM min_language_code TO max_language_code OF
		    SET
		[dbg$k_pli] :
		    dbg$npli_make_val_desc(.prim_desc,.param2,.param3,.param4);
		[dbg$k_pascal] :
		    dbg$npas_make_val_desc(.prim_desc,.param2,.param3,.param4);
		[dbg$k_cobol] :
		    dbg$ncob_make_val_desc(.prim_desc,.param2,.param3,.param4);
		[inrange, outrange]: 
		    SIGNAL (dbg$_debugbug,1,dbg$k_bad_lang_msg_num);
		    TES
	    );
    END;	! End of dbg$nmake_val_desc
	

GLOBAL ROUTINE DBG$NTYPE_CONV (VALUE_DESC, PARAM2, PARAM3, PARAM4, PARAM5) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine examines th language of the value descriptor and transfers
!	control to the appropriate language specific type conversion routine.
!
!	This routine returns whatever the invoked language specific type converstion
!	routine has produced. PARAM2 - PARAM5 are passed along without modification.
!
! FORMAL PARAMETERS:
!
!	VALUE_DESC	- A longword containing the address of a language specific
!			  value descriptor
!
!	PARAM2 - PARAM5	- Unknown to this routine
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	Same as the invoked language specific routine
!
! ROUTINE VALUE:
!
!	Same as the invoked language specific routine
!
! COMPLETION CODES:
!
!	Same as the invoked language specific routine.
!
! SIDE EFFECTS:
!
!	Same as the invoked language specific routine. This routine generates
!	a SIGNAL for unknown languages.
!
!--
    BEGIN
	MAP value_desc : REF dbg$dhead;
 	RETURN 
	    (CASE .value_desc[dbg$b_dhead_lang]
		FROM min_language_code TO max_language_code OF
		    SET
		[dbg$k_pli] :
		    dbg$npli_type_conv(.value_desc,.param2,.param3,.param4,.param5);
		[dbg$k_pascal] :
		    dbg$npas_type_conv(.value_desc,.param2,.param3,.param4,.param5);
		[dbg$k_cobol] :
		    dbg$ncob_type_conv(.value_desc,.param2,.param3,.param4,.param5);
		[inrange, outrange]: 
		    SIGNAL (dbg$_debugbug,1,dbg$k_bad_lang_msg_num);
		    TES
	    );
    END;	! End of dbg$type_conv
	

GLOBAL ROUTINE DBG$NSYMBOLIZE (PRIM_DESC, PARAM2, PARAM3) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Uses the language field of the input primary descriptor to invoke the
!	appropriate language specific SYMBOLIZE routine.
!
!	The second and third parameters are unchanged by this routine.
!
! FORMAL PARAMETERS:
!
!	PRIM_DESC	- A longword containing the address of a language specific
!			  primary descriptor
!
!	PARAM2, PARAM3	- Unknown to this routine
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	Same as the invoked language specific routine
!
! ROUTINE VALUE:
!
!	Same as the invoked language specific routine
!
! COMPLETION CODES:
!
!	Same as the invoked language specific routine
!
! SIDE EFFECTS:
!
!	Same as the invoked language specific routine.
!
!	This routine will generate a SIGNAL upon detection of a foreign
!	language value within the primary descriptor.
!
!--
    BEGIN
	MAP prim_desc : REF dbg$dhead;
 	RETURN 
	    (CASE .prim_desc[dbg$b_dhead_lang]
		FROM min_language_code TO max_language_code OF
		    SET
		[dbg$k_pli] :
		    dbg$npli_symbolize(.prim_desc,.param2,.param3);
		[dbg$k_pascal] :
		    dbg$npas_symbolize(.prim_desc,.param2,.param3);
		[dbg$k_cobol] :
		    dbg$ncob_symbolize(.prim_desc,.param2,.param3);
		[inrange, outrange]: 
		    SIGNAL (dbg$_debugbug,1,dbg$k_bad_lang_msg_num);
		    TES
	    );
    END;	! End of dbg$nsymbolize


GLOBAL ROUTINE DBG$NGET_PAGES (PRIM_DESC, PARAM2, PARAM3) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine examines the language setting of the input primary descriptor
!	and invokes the correct language specific GET PAGES routine. This routine
!	neither reads nor writes to the other input parameters.
!
! FORMAL PARAMETERS:
!
!	PRIM_DESC		- The address of a language specific primary descriptor
!
!	PARAM2, PARAM3		- Unknown to this routine
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	Same as the invoked language specific routine
!
! COMPLETION CODES:
!
!	Same as the invoked language specific routine
!
! SIDE EFFECTS:
!
!	Same as the invoked language specific routine.
!
!	This routine will generate a SIGNAL if the language of the primary
!	descriptor is foreign
!
!--
    BEGIN
	MAP prim_desc : REF dbg$dhead;
 	RETURN 
	    (CASE .prim_desc[dbg$b_dhead_lang]
		FROM min_language_code TO max_language_code OF
		    SET
		[dbg$k_pli] :
		    dbg$npli_get_pages(.prim_desc,.param2,.param3);
		[dbg$k_pascal] :
		    dbg$npas_get_pages(.prim_desc,.param2,.param3);
		[dbg$k_cobol] :
		    dbg$ncob_get_pages(.prim_desc,.param2,.param3);
		[inrange, outrange]: 
		    SIGNAL (dbg$_debugbug,1,dbg$k_bad_lang_msg_num);
		    TES
	    );
    END;	! End of dbg$nget_pages


GLOBAL ROUTINE DBG$NGET_LENGTH (PRIM_DESC, PARAM2, PARAM3) =

!++
! FUNCTIONAL DESCRIPTION:
!	Invokes the appropriate language specific get length routine,
!	depending on the contents of the language field in the 
!	primary descriptor header. It returns the 
!	value produced by these routines without looking at it.
!	It passes on its input parameters without looking at them.
!
! FORMAL PARAMETERS:
!
!	PRIM_DESC - The address of the primary descriptor of the 
!		    entity for which the length is desired.
!	
!	PARAM2 - The second parameter for the language
!		dependent get length routines. This routine neither 
!		reads or writes it, it only passes it on to the 
!		language dependent routines.
!
!	PARAM3 - The third parameter for the language dependent primary ouput
!		routines. Unknow to this routine.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION CODES:
!
!	The same as the get length routines. See their routine headers
!	for details.
!
! SIDE EFFECTS:
!
!	The same as the get length routines. See their routine headers
!	for details. This routine will produce a SIGNAL for an unknown language.
!--

    BEGIN
	MAP prim_desc : REF dbg$dhead;
 	RETURN 
	    (CASE .prim_desc[dbg$b_dhead_lang]
		FROM min_language_code TO max_language_code OF
		    SET
		[dbg$k_pli] :
		    dbg$npli_get_length(.prim_desc,.param2,.param3);
		[dbg$k_pascal] :
		    dbg$npas_get_length(.prim_desc,.param2,.param3);
		[dbg$k_cobol] :
		    dbg$ncob_get_length(.prim_desc,.param2,.param3);
		[inrange, outrange]: 
		    SIGNAL (dbg$_debugbug,1,dbg$k_bad_lang_msg_num);
		    TES
	    );
    END;	! END  of routine dbg$nget_length


GLOBAL ROUTINE DBG$NCOPY_DESC (DESC, PARAM2, PARAM3) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Examines the input DESC and invokes the appropriate language specific
!	primary descriptor - value descriptor copy routine, based on the language
!	written in the language independent header of the source descriptor.
!
! FORMAL PARAMETERS:
!
!	DESC		- A longword containing the address of either a language
!			 specific primary descriptor or value descriptor
!
!	PARAM2, PARAM3	- Unknown to this routine
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	Same as the invoked language specific routine.
!
! ROUTINE VALUE:
!
!	Same as the invoked language specific routine.
!
! COMPLETION CODES:
!
!	Same as the invoked language specific routine.
!
! SIDE EFFECTS:
!
!	Same as the invoked language specific routine.
!
!	This routine SIGNALs if the language of the DESC is unknown.
!
!--
    BEGIN
	MAP desc : REF dbg$dhead;
 	RETURN 
	    (CASE .desc[dbg$b_dhead_lang]
		FROM min_language_code TO max_language_code OF
		    SET
		[dbg$k_pli] :
		    dbg$npli_copy_desc(.desc,.param2,.param3);
		[dbg$k_pascal] :
		    dbg$npas_copy_desc(.desc,.param2,.param3);
		[dbg$k_cobol] :
		    dbg$ncob_copy_desc(.desc,.param2,.param3);
		[inrange, outrange]: 
		    SIGNAL (dbg$_debugbug,1,dbg$k_bad_lang_msg_num);
		    TES
	    );
    END;	! END  of routine dbg$ncopy_desc


GLOBAL ROUTINE DBG$NFREE_DESC (DESC, PARAM2, PARAM3) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Examine the input DESC and invokes the appropriate language specific
!	descriptor release routine to release dynamic storage associated with
!	a descriptor produced by DBG$NCOPY_DESC.
!
! FORMAL PARAMETERS:
!
!	DESC		- A longword containing the address of a COPIED language
!			  specific primary or value descriptor
!
!	PARAM2, PARAM3	- Unknown to this routine
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	Same as the invoked language specific routine.
!
! ROUTINE VALUE:
!
!	Same as the invoked language specific routine.
!
! COMPLETION CODES:
!
!	Same as the invoked language specific routine.
!
! SIDE EFFECTS:
!
!	Same as the invoked language specific routine.
!
!	This routine SIGNALs when the language of the DESC is unknown.
!
!--
    BEGIN
	MAP desc : REF dbg$dhead;
 	RETURN 
	    (CASE .desc[dbg$b_dhead_lang]
		FROM min_language_code TO max_language_code OF
		    SET
		[dbg$k_pli] :
		    dbg$npli_free_desc(.desc,.param2,.param3);
		[dbg$k_pascal] :
		    dbg$npas_free_desc(.desc,.param2,.param3);
		[dbg$k_cobol] :
		    dbg$ncob_free_desc(.desc,.param2,.param3);
		[inrange, outrange]: 
		    SIGNAL (dbg$_debugbug,1,dbg$k_bad_lang_msg_num);
		    TES
	    );
    END;	! END  of routine dbg$nfree_desc


GLOBAL ROUTINE DBG$NGET_SYMID (DESC, PARAM2, PARAM3) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Examines the language of the input DESC and invokes the appropriate
!	language specific get symid routine to obtain the symids associated
!	with a language specific primary or value descriptor.
!
! FORMAL PARAMETERS:
!
!	DESC		- A longword contianing the address of a language specific
!			  primary or value descriptor
!
!	PARAM2, PARAM3	- Unknown to this routine
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	Same as the invoked language specific routine.
!
! ROUTINE VALUE:
!
!	Same as the invoked language specific routine.
!
! COMPLETION CODES:
!
!	Same as the invoked language specific routine.
!
! SIDE EFFECTS:
!
!	Same as the invoked language specific routine.
!
!	This routine SIGNALs if the language of the input DESC is unknown.
!
!--
    BEGIN
	MAP desc : REF dbg$dhead;
 	RETURN 
	    (CASE .desc[dbg$b_dhead_lang]
		FROM min_language_code TO max_language_code OF
		    SET
		[dbg$k_pli] :
		    dbg$npli_get_symid(.desc,.param2,.param3);
		[dbg$k_pascal] :
		    dbg$npas_get_symid(.desc,.param2,.param3);
		[dbg$k_cobol] :
		    dbg$ncob_get_symid(.desc,.param2,.param3);
		[inrange, outrange]: 
		    SIGNAL (dbg$_debugbug,1,dbg$k_bad_lang_msg_num);
		    TES
	    );
    END;	! END  of routine dbg$nget_symid


GLOBAL ROUTINE DBG$NLOG_PREDSUC (PRIM_DESC, PARAM2, PARAM3, PARAM4) =
!
! FUNCTIONAL DESCRIPTION:
!
!	Examines the language of the input primary descriptor and invokes the
!	appropriate language specific routine to obtain logical successor
!	or predecessor.
!
! FORMAL PARAMETERS:
!
!	PRIM_DESC	- A longword containing the address of a language 
!			  specific primary descriptor
!
!	PARAM2-PARAM4	- Unknown to this routine
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	Same as invoked language specific routine
!
! ROUTINE VALUE:
!
!	Same as invoked language specific routine
!
! COMPLETION CODES:
!
! 	Same as invoked language specific routine
!
! SIDE EFFECTS:
!
!	Same as invoked language specific routine.
!
!	This routine will produce a SIGNAL if the language of the primary 
!	descriptor is unknown.
!

    BEGIN
	MAP prim_desc : REF dbg$dhead;
 	RETURN 
	    (CASE .prim_desc[dbg$b_dhead_lang]
		FROM min_language_code TO max_language_code OF
		    SET
		[dbg$k_pli] :
		    dbg$npli_log_predsuc(.prim_desc,.param2,.param3,.param4);
		[dbg$k_pascal] :
		    dbg$npas_log_predsuc(.prim_desc,.param2,.param3,.param4);
		[dbg$k_cobol] :
		    dbg$ncob_log_predsuc(.prim_desc,.param2,.param3,.param4);
		[inrange, outrange]: 
		    SIGNAL (dbg$_debugbug,1,dbg$k_bad_lang_msg_num);
		    TES
	    );
    END;

GLOBAL ROUTINE DBG$NINITIALIZE : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	 This routine calls language specific initialization routines.  This is
!	done before each command is processed to garuantee the integrity of the
!	language specific machinery.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NOVALUE
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--
    BEGIN

    dbg$npas_com_init ();
!** dbg$npli_com_init ();

    RETURN;

    END;

END 	! END OF MODULE DBGLANVEC
ELUDOM
