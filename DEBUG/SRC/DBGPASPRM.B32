MODULE	DBGPASPRM( ! Pascal Primary Interpreter
	IDENT = 'V03-000'
	) =
BEGIN
!
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!
!++
!
! FACILITY:	VAX-11 PASCAL-SPECIFIC DEBUGGER MODULES
!
! ABSTRACT:
!
!	This is the Pascal-Specific Primary Interpreter
!
! ENVIRONMENT:	VAX/VMS user mode
!
! AUTHOR: P. Hohensee, CREATION DATE: 13-JULY-1980
!
! MODIFIED BY:
!
!--

REQUIRE 'SRC$:PASPROLOG';
REQUIRE 'SRC$:PASSYNMAC';

!
! Table of Contents
!
FORWARD ROUTINE
	PAS$_Create_Primary_Desc	: NOVALUE,	! Fill in the static descriptor as a primary descriptor
	Construct_Primary_Desc,				! Copy the private primary descriptor to new contiguous storage

	PAS$_Push_Primary_Operand	: NOVALUE,	! Push an operand into the Primary Descriptor
	Prim_Init			: NOVALUE,	! Initialize the Primary Interpreter
	DBG$NPAS_PRIM_INT;				! Primary Interpreter

!
! EXTERNAL ROUTINES
!
EXTERNAL ROUTINE
	PAS$_Error_Handler,					! Error Trap

	PAS$_Syn_Initialize	: NOVALUE,			! Lexical and Syntax Analysis Initialization

	PAS$_Get_Token		: Syntax_Routine NOVALUE,	! Advance to next token
	PAS$_Look_Ahead_Token	: Syntax_Routine NOVALUE,	! Look Ahead N Tokens
	PAS$_Syn_Variable	: Syntax_Routine NOVALUE;	! Parse a variable reference

!
! EXTERNAL Storage:
!
EXTERNAL
	PAS$_Message_Vector	: LONG,			! Address of address of error message vector

	!
	! Lexical Analysis
	!
	PAS$_Lex_Column		: LONG,			! Current Column Number
	PAS$_Lex_SrcDesc	: BLOCK [8, BYTE],	! Input string descriptor
	PAS$_Lex_LineDesc	: BLOCK [8, BYTE],	! Original Input string descriptor

	!
	! Syntax Analysis
	!
	PAS$_Tokens		: VECTOR [4, LONG],	! Look-ahead Tokens
	PAS$_Token_Values	: NULLVECTOR [4, 16],	! Look-ahead Values
	PAS$_Token_Types	: VECTOR [4, LONG],	! Look-ahead Value Types
	PAS$_Token_Positions	: VECTOR [4, LONG],	! Look_ahead Token Column Numbers
	PAS$_Look_Ahead		: LONG;			! # of Tokens of Look-ahead

!
! GLOBAL Storage
!
GLOBAL
	PAS$_Result_Type	: LONG,			! Debug Result Type
	PAS$_Nonstatic_Desc_Head: REF VECTOR,		! Pointer to first block of nonstatic descriptor
	PAS$_Nonstatic_Desc_Tail: REF VECTOR,		! Pointer to last block of nonstatic descriptor
	PAS$_Descriptor_Size	: LONG,			! Current size, in longwords, of descriptor
	PAS$_Static_Desc	: BLOCK			! Static part of Primary Descriptor plus 1st non-static block
				[PAS$S_PRIM_Size + PAS$S_PRIM_Block_Size + 1]
				FIELD(DBG$Dhead_Fields, PAS$PRIM_Desc_Fields);

!
! Semantic Analysis EXTERNAL Storage
!
EXTERNAL
	PAS$_Is_Primary			: BYTE UNSIGNED,! True = in Primary Interpreter,
							! False = in Expression Interpreter
	PAS$_Current_Symbol_Header	: LONG,		! Pointer to symbol table head
	PAS$_Current_Symbol_Trailer	: LONG,		! Pointer to symbol table tail
	PAS$_Expr_Depth			: LONG,		! Current Expression Sttack Depth
	PAS$_Expr_Stack			: BLOCKVECTOR [Expr_Stack_Depth, Expr_S_Entry, BYTE]
		FIELD(Expression_Stack_Fields);		! Expression Stack

GLOBAL ROUTINE PAS$_Create_Primary_Desc : NOVALUE =

!++
!
! FUNCTIONAL SPECIFICATION:
!
!	Initializes the fields of the static Primary Descriptor
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	The Static Primary Descriptor
!
! ROUTINE VALUE:
!
!	NONE
!
!--

    BEGIN

    ! Set Result Type
    !
    PAS$_Result_Type = DBG$K_PRIMARY_DESC;

    ! Set pointers to non-static descriptor storage
    !
    PAS$_Nonstatic_Desc_Head = PAS$_Static_Desc[PAS$PRIM_Ident];
    PAS$_Nonstatic_Desc_Tail = PAS$_Static_Desc[PAS$PRIM_Ident];

    ! Set current descriptor size
    !
    PAS$_Descriptor_Size = PAS$S_PRIM_Size;

    ! Initialize Header Block
    !
    PAS$_Static_Desc[DBG$B_Dhead_Lang]		= DBG$K_Pascal;
    PAS$_Static_Desc[DBG$B_Dhead_Type]		= DBG$K_Primary_Desc;
    PAS$_Static_Desc[DBG$W_Dhead_Length]	= (PAS$S_PRIM_Size + 1) * 4;
    PAS$_Static_Desc[DBG$L_Dhead_Pointer]	= 0;

    ! Initialize Pascal-Specific Block
    !
    PAS$_Static_Desc[PAS$PRIM_Size]		= 0;
    PAS$_Static_Desc[PAS$PRIM_Operations]	= -1;
    PAS$_Static_Desc[PAS$PRIM_Byte_Address]	= 0;
    PAS$_Static_Desc[PAS$PRIM_Bit_Offset]	= 0;
    PAS$_Static_Desc[PAS$PRIM_Frame]		= 0;
    PAS$_Static_Desc[PAS$PRIM_Kind]		= DBG$K_Val_Novalue;
    PAS$_Static_Desc[PAS$PRIM_Symbol]		= 0;
    PAS$_Static_Desc[PAS$PRIM_Ident]		= 0;

    ! Clear pointer to next block
    !
    PAS$_Nonstatic_Desc_Tail[PAS$S_PRIM_Block_Size] = 0;

    END;

ROUTINE Construct_Primary_Desc =

!++
! FUNCTIONAL SPECIFICATION:
!
!	Constructs a complete and contiguous Primary Descriptor from
!	the private Static and Nonstatic Descriptors
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	The Static and Nonstatic Descriptors
!	PAS$_Expr_Stack		- The expression stack
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	The address of the new Primary Descriptor
!
!--

    BEGIN
    LOCAL
	Descriptor	: REF PAS$_Primary_Desc,	! New Primary Descriptor Address
	Current_Block	: REF VECTOR,			! Pointer to current nonstatic block
	Next_Block	: REF VECTOR,			! Pointer to next nonstatic block
	Current_Address,				! Pointer to place in new descriptor to put next block
	Block_Size;					! Current nonstatic block size in longwords

    ! Attempt to allocate storage for the new descriptor
    !
    IF DBG$NLIST_FREEZ(.PAS$_Descriptor_Size, Descriptor, .PAS$_Message_Vector)
    THEN
	BEGIN

	! Check for a literal
	!
	IF .PAS$_Static_Desc[PAS$PRIM_Kind] EQL DBG$K_Val_Literal
	THEN
	    ! Load the literal value into the descriptor
	    !
	    BEGIN
	    BIND
		Type_Entry	= .PAS$_Expr_Stack[0, Expr_Type]	: BLOCK [, BYTE] FIELD(Type_Fields);

	    LOCAL
		Size;

	    IF .Type_Entry[TYP_Packed_Size] GTRU 32
	    THEN
		Size = 32
	    ELSE
		Size = .Type_Entry[TYP_Packed_Size];

	    IF
		(IF .Type_Entry[TYP_Class] EQL TYP_K_Ordinal
		THEN
		    NOT .Type_Entry[ORD_Unsigned]
		ELSE
		    0)
	    THEN
		! Sign-extend
		!
		PAS$_Static_Desc[PAS$PRIM_Byte_Address]	= .(.PAS$_Static_Desc[PAS$PRIM_Byte_Address])
						<.PAS$_Static_Desc[PAS$PRIM_Bit_Offset], .Size, 1>
	    ELSE
		PAS$_Static_Desc[PAS$PRIM_Byte_Address]	= .(.PAS$_Static_Desc[PAS$PRIM_Byte_Address])
						<.PAS$_Static_Desc[PAS$PRIM_Bit_Offset], .Size, 0>;

	    PAS$_Static_Desc[PAS$PRIM_Bit_Offset]	= 0;
	    END;

	! Copy the Static Descriptor
	!
	CH$MOVE(PAS$S_PRIM_Size * 4, PAS$_Static_Desc, .Descriptor);

	Descriptor[DBG$W_Dhead_Length] = .PAS$_Descriptor_Size * 4;

	! Copy the Nonstatic Descriptor
	!
	Current_Block	= .PAS$_Nonstatic_Desc_Head;
	Current_Address	= Descriptor[PAS$PRIM_Ident];

	WHILE .Current_Block NEQA 0
	DO
	    BEGIN
	    ! Get address of next block
	    !
	    Next_Block = .Current_Block[PAS$S_PRIM_Block_Size];

	    ! Get number of longwords to move
	    !
	    IF .Next_Block EQLA 0
	    THEN
		Block_Size = (.PAS$_Descriptor_Size - PAS$S_PRIM_Size) MOD PAS$S_PRIM_Block_Size
	    ELSE
		Block_Size = PAS$S_PRIM_Block_Size;

	    ! Move the block
	    !
	    CH$MOVE(.Block_Size * 4, .Current_Block, .Current_Address);

	    ! Load address of next block and
	    ! increment pointer into new descriptor
	    !
	    Current_Block	= .Next_Block;
	    Current_Address	= .Current_Address + (.Block_Size * 4);
	    END;

	END

    ELSE
	! No space
	!
	SIGNAL(DBG$_NOFREE);

    ! Return Descriptor Address
    !

    .Descriptor
    END;

GLOBAL ROUTINE PAS$_Push_Primary_Operand (Value) : NOVALUE =

!++
! FUNCTIONAL SPECIFICATION:
!
!	Push a longword value into the global Primary Descriptor
!
! FORMAL PARAMETERS:
!
!	Value	- Operand to be pushed
!
! IMPLICIT INPUTS:
!
!	The global Primary Descriptor
!
! IMPLICIT OUTPUTS:
!
!	The global Primary Descriptor
!
! ROUTINE VALUE:
!
!	NONE
!
!--

    BEGIN
    LOCAL
	Depth;		! Current index into non-static descriptor storage

    IF (Depth = (.PAS$_Descriptor_Size - PAS$S_PRIM_Size) MOD PAS$S_PRIM_Block_Size) EQL 0
    THEN
	IF .PAS$_Nonstatic_Desc_Tail NEQA PAS$_Static_Desc[PAS$PRIM_Ident]
	THEN
	    ! No room. Future implementation will allocate new storage
	    !
	    BEGIN
	    .PAS$_Message_Vector = DBG$NMAKE_ARG_VECT(DBG$_NOFREE);
	    SIGNAL(DBG$_NOFREE);
	    END;

    ! Push the operand
    !
    PAS$_Static_Desc[PAS$PRIM_Operations]	= .PAS$_Static_Desc[PAS$PRIM_Operations] + 1;
    PAS$_Nonstatic_Desc_Tail[.Depth]		= .Value;
    PAS$_Descriptor_Size			= .PAS$_Descriptor_Size + 1;

    END;

ROUTINE Prim_Init ( Input_Desc,
                    Result_Type,
                    Result,
                    Radix,
                    Message_Vect ) : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine initializes stuff for the Primary Interpreter
!
! FORMAL PARAMETERS:
!
!	Identical to those for the Primary Interpreter itself
!	(DBG$NPAS_PRIM_INT).
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	The parameters are initialized with return values and
!	loaded into global storage. Lexical, Syntax, and Semantic
!	Analysis are initialized
!--

    BEGIN

    BIND
	Message_Vector_Address	= .Message_Vect;

    !
    ! Initialize Result to a literal zero in case of disaster
    !
    PAS$_Result_Type	= DBG$K_LITERAL;
    .Result_Type	= DBG$K_LITERAL;
    .Result		= 0;

    ! Initialize Lexical, Syntax, and Semantic Analysis
    !
    PAS$_Syn_Initialize(.Input_Desc, .Radix, Message_Vector_Address, True);

    END;

GLOBAL ROUTINE DBG$NPAS_PRIM_INT ( Input_Desc,
                                  Result_Type,
                                       Result,
                                        Radix,
                                 Message_vect ) =   

!++
! FUNCTIONAL DESCRIPTION:
!
!	Parses a maximal initial substring of the input string as a source
!	language symbolic reference or literal with certain DEBUG extensions.
!	Returns one of four types of data:
!
!	1) Primary descriptors are constructed for symbolic source language
!	   entities. In addition, primary descriptors are constructed for
!	   the DEBUG %LINE and %LABEL artifacts. %LINE and %LABEL should
!	   always have type 'instruction' associated with them.
!
!	2) A value descriptor is obtained (from DBG$NGET_LASTVAL) for
!	   the DEBUG pseudo symbol '\'.
!
!	   Note that the other DEBUG pseudo-symbols, '^' and '.' are NOT
!	   interpreted by this routine. They are to be regarded as syntax errors.
!
!	3) Permanent symbol descriptors are obtained (from DBG$NPERM_SYM_INT)
!	   for the DEBUG permanent symbols R0-R11, AP, SP, PC, and PSL.
!
!	4) A signed longword integer is returned as the value of numeric 
!	   literals encountered in the input string. Floating point literals
!	   are invalid.
!
! FORMAL PARAMETERS:
!
!	input_desc  -	A longword containing the address of a VAX standard
!			string descriptor describing the input string
!
!	result_type -  The address of a longword to contain an unsigned 
!			value specifying the interpretation of the result 
!			parameter according to the following code:
!
!		dbg$k_literal (120)	- result is a signed longword integer
!					  representing a numeric literal value
!			
!		dbg$k_primary_desc (121) - result is the address of a primary
!					   descriptor
!
!		dbg$k_value_desc (122)  -  result is the address of a value
!					   descriptor
!
!		dbg$k_perm_desc (123)   -  result is the address of a
!					   permanent symbol descriptor
!
!	result 	     -	The address of a longword to contain either the address
!			of one of the three types of descriptors mentioned 
!			above, or a signed longword integer
!
!	radix	     -  A longword which contains an unsigned integer code which
!			describes the radix to be used in the interpretation of
!			numeric literals as follows:
!
!		dbg$k_default (10)	- source language default radix
!		
!		dbg$k_binary (11)	- binary
!
!		dbg$k_octal (12)	- octal
!
!		dbg$k_decimal (13)	- decimal
!
!		dbg$k_hex (14)		- hexadecimal
!
!	message_vect - The address of a longword to contain the address of a
!			message argument vector as described on page 4-119 of
!			the VAX/VMS reference manual, volume 1A
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	Primary descriptors are constructed from dynamic storage.
!
!	In case of a warning, error or severe error return, a message argument
!	vector is constructed from dynamic storage.
!
! ROUTINE VALUE:
!
!	unsigned integer longword completion code
!
! COMPLETION CODES:
!
!	STS$K_WARNING (0) -	Result returned. Unexpected input encountered.
!				Message argument vector representing a syntax
!				error constructed.
!
!				Note that some DEBUG commands allow address
!				expression lists, seperated by commas. This
!				return should be used in these cases ( or 
!				when any foreign character is encountered
!				following complete processing of a primary).
!
!	STS$K_SUCCESS (1) -	Result returned. No error encountered.
!				Input string exhausted.
!
!	STS$K_ERROR   (2) -     No result returned. Syntax error encountered
!				immediately - no input accepted. Message argument
!				vector returned.
!
!			 	Note that this return should be used when encountering
!				any foreign character at the start of primary
!				processing such as a DEBUG pseudo-symbol other
!				than '\'.
!
!	STS$K_SEVERE  (4) -     No result returned. Fatal syntax or semantic 
!				error encountered during processing of primary.
!				Message argument vector returned.
!	
!
! SIDE EFFECTS:
!
!	The VAX standard string descriptor describing the input string is
!	updated to reflect the character following the last character accepted.
!
!	Informational message such as string or number truncation may be issued
!	during processing.
!
!--

BEGIN

    MAP
	Input_Desc	: REF BLOCK [8, BYTE];

    BIND
	Message_Vector_Address	= .Message_Vect;

    GLOBAL REGISTER
	Token		= 8	: LONG,
	Token_Value	= 9	: LONG,
	Token_Type	= 10	: LONG,
	Token_Position	= 11	: LONG;

    ENABLE
	PAS$_Error_Handler;

    ! Initialize
    !
    Prim_Init( .Input_Desc, .Result_Type, .Result, .Radix, Message_Vector_Address ) ;

    ! Scan the first token
    !
    PAS$_Look_Ahead = 0;
    PAS$_Get_Token();

    ! Parse
    !
    RETURN
	(SELECTONEU .Token OF
	    SET

	    ! Number (Address)
	    !
	[Syn_K_Integer] :
	    BEGIN

	    ! Might be a pathname
	    !
	    PAS$_Look_Ahead_Token(1);

	    IF .PAS$_Tokens[1] NEQ Syn_K_Backslash
	    THEN
		! Integer constant
		!
		BEGIN

		! Set return values
		!
		.Result_Type	= DBG$K_LITERAL;
		.Result		= .Token_Value;

		! Scan the next token, whatever it is
		!
		PAS$_Get_Token();
		END

	    ELSE
		! Pathname
		!
		BEGIN

		! Fill in Primary Descriptor Skeleton
		! (Note that if we have '\' or %R0 - %PSL, the skeleton will be
		! ignored and the address of a value or permanent symbol descriptor
		! will be placed in PAS$_Static_Desc)
		!
		PAS$_Create_Primary_Desc();

		! Parse the reference
		!
		PAS$_Syn_Variable();

		!
		! No error if we've made it this far
		!

		IF .PAS$_Result_Type EQLU DBG$K_PRIMARY_DESC
		THEN
		    ! Allocate space for the descriptor and copy the private
		    ! descriptor into it.
		    !
		    .Result = Construct_Primary_Desc()
		ELSE
		    ! Copy the address of the value or permanent symbol descriptor
		    !
		    .Result = .PAS$_Static_Desc;

		! Set result type
		!
		.Result_Type = .PAS$_Result_Type;

		END;

	    ! Copy updated input string descriptor
	    !
	    MOVEBYTE( 8, PAS$_Lex_SrcDesc, .Input_Desc );

	    ! Check for more stuff on the line
	    !
	    IF .Token EQLU Syn_K_Eof
	    THEN
		! Ate it all
		!
		BEGIN

		! Clear address of input string
		!
		Input_Desc[DSC$A_POINTER] = 0;

		STS$K_SUCCESS
		END
	    ELSE
		! Slight indigestion
		!
		BEGIN
		! Back up length and address values in line descriptor
		!
		Input_Desc[DSC$W_LENGTH]	= .Input_Desc[DSC$W_LENGTH] +
						(.PAS$_Lex_Column - .Token_Position);
		Input_Desc[DSC$A_POINTER]	= .Input_Desc[DSC$A_POINTER] -
						(.PAS$_Lex_Column - .Token_Position);

		STS$K_WARNING
		END
	    END;

	    ! Nothing on the line
	    !
	[Syn_K_Eof] :
	    SIGNAL(DBG$_NEEDMORE);

	    ! Reference, Last Value, Debug Permament Symbol, %LINE, %LABEL
	    !
	[Syn_K_Ident, Syn_K_Backslash, Syn_K_$Line, Syn_K_$Label, Syn_K_$R0 TO Syn_K_$PSL] :
	    BEGIN

	    ! Fill in Primary Descriptor Skeleton
	    ! (Note that if we have '\' or %R0 - %PSL, the skeleton will be
	    ! ignored and the address of a value or permanent symbol descriptor
	    ! will be placed in PAS$_Static_Desc)
	    !
	    PAS$_Create_Primary_Desc();

	    ! Parse the reference
	    !
	    PAS$_Syn_Variable();

	    !
	    ! No error if we've made it this far
	    !

	    IF .PAS$_Result_Type EQLU DBG$K_PRIMARY_DESC
	    THEN
		! Allocate space for the descriptor and copy the private
		! descriptor into it.
		!
		.Result = Construct_Primary_Desc()
	    ELSE
		! Copy the address of the value or permanent symbol descriptor
		!
		.Result = .PAS$_Static_Desc;

	    ! Set result type
	    !
	    .Result_Type = .PAS$_Result_Type;

	    ! Copy updated command line descriptor
	    !
	    MOVEBYTE(8, PAS$_Lex_SrcDesc, .Input_Desc);

	    ! Check for more stuff on the line
	    !
	    IF .Token EQLU Syn_K_Eof
	    THEN
		! Ate it all
		!
		BEGIN

		! Clear input string address
		!
		Input_Desc[DSC$A_POINTER] = 0;

		STS$K_SUCCESS
		END
	    ELSE
		! Slight indigestion
		!
		BEGIN
		! Backup length and address values in line descriptor
		!
		Input_Desc[DSC$W_LENGTH]	= .Input_Desc[DSC$W_LENGTH] +
						(.PAS$_Lex_Column - .Token_Position);
		Input_Desc[DSC$A_POINTER]	= .Input_Desc[DSC$A_POINTER] -
						(.PAS$_Lex_Column - .Token_Position);

		STS$K_WARNING
		END
	    END;
	    
	    ! Total wipeout
	    !
	[OTHERWISE] :
	    BEGIN

	    ! Copy updated input string descriptor
	    !
	    MOVEBYTE( 8, PAS$_Lex_SrcDesc, .Input_Desc );

	    ! Backup length and address values in line descriptor
	    !
	    Input_Desc[DSC$W_LENGTH]	= .Input_Desc[DSC$W_LENGTH] +
						(.PAS$_Lex_Column - .Token_Position);
	    Input_Desc[DSC$A_POINTER]	= .Input_Desc[DSC$A_POINTER] -
						(.PAS$_Lex_Column - .Token_Position);

	    STS$K_ERROR
	    END;

	    TES
	)

END;


END

ELUDOM
