! REDMAC.REQ
!
! FACILITY : DEBUG
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
! This require file used to contain reduction macros.
! These macros have now been turned into routines in
! DBGREDUC.B32. 
! This require file now just contains the external declarations for
! these routines.
!
EXTERNAL ROUTINE
    dbg$division : NOVALUE,
    dbg$logical_or : NOVALUE,
    dbg$logical_and : NOVALUE,
    dbg$exclusive_or : NOVALUE,
    dbg$pop_stack : NOVALUE,
    dbg$negation : NOVALUE,
    dbg$complement : NOVALUE,
    dbg$bli_complement : NOVALUE,
    dbg$mac_indirection : NOVALUE,
    dbg$ftn_indirection : NOVALUE,
    dbg$equivalence : NOVALUE,
    dbg$extract_bits : NOVALUE,
    dbg$add_module : NOVALUE,
    dbg$add_dimension : NOVALUE,
    dbg$char_substring : NOVALUE,
    dbg$save_name : NOVALUE,
    dbg$set_overr_step : NOVALUE,
    dbg$set_overr_mode : NOVALUE,
    dbg$set_dec_overs : NOVALUE,
    dbg$set_line_dec : NOVALUE,
    dbg$set_over_noadr : NOVALUE,
    dbg$set_over_adr : NOVALUE,
    dbg$get_step_count : NOVALUE,
    dbg$translate_name : NOVALUE,
    dbg$reduce_array : NOVALUE,
    dbg$save_lang_name : NOVALUE,
    dbg$reduce_pathname : NOVALUE,
    dbg$redu_path_addr : NOVALUE,
    dbg$reduce_label : NOVALUE,
    dbg$save_ascii_leng : NOVALUE,
    dbg$set_local_type : NOVALUE,
    dbg$set_default_typ : NOVALUE,
    dbg$set_over_typ : NOVALUE,
    dbg$save_type : NOVALUE;

EXTERNAL ROUTINE
	dbg$get_bounds : NOVALUE,	! Calculate array bounds
	dbg$add_arg,			! Add arguments to the command arg list
	dbg$bld_num_pth,		! Builds numeric pathnames.
	dbg$break_setup,		! Collects args for breakpoint setup
	dbg$build_path,			! Builds a path name
	dbg$path_to_val,		! Evaluates pathnames
	dbg$cancel_parm,		! Arguments to a CANCEL command
	dbg$can_switch,			! Sets context bits for cancel command
	dbg$find_module,		! Finds the RST address of a module
	dbg$freez,			! Allocates a block of free storage
	dbg$getarrayadr,		! Gets absolute address of array element
	dbg$init_modes,			! Initializes I/O modes
	dbg$perform_cmd,		! Executes a complete command
	dbg$read_access,		! Checks read access to a page
	dbg$sav_pth_nam,		! places a pathname in the scope list
	dbg$set_mod_lvl,		! Resets modes to a specified level
	dbg$set_new_mod,		! Sets a mode in current level
	dbg$set_overs,			! Sets override or local mode
	dbg$show_param,			! Collects args to SHOW command
	dbg$trans_name,			! Translates a name into a binary value
	dbg$set_stp_lvl,		! Sets level of STEP
	dbg$set_new_stp,		! Sets a new STEP value
	dbg$get_bpt_act,		! Pick up BPT action string
	dbg$extract_str;		! Pick up delimited strings


EXTERNAL

	dbg$gb_mod_ptr : REF VECTOR [,BYTE],	! Current mode
	dbg$gw_length,				! temporarily holds user given length
	dbg$gw_loclngth,			! holds command override length
	dbg$gw_dfltleng,			! holds user defined default length
	dbg$gl_context : BITVECTOR,		! Context word	
	dbg$gl_dimenlst : VECTOR,		! Holds dimension elements for array
	dbg$gl_asci_len,			! Holds length of ascii variables
	dbg$gl_head_lst,			! Head of command arg list
	dbg$gl_type,				! temporarily holds user given type 
	dbg$gl_loctyp,				! holds command override type
	dbg$gl_dflttyp,				! holds user defined default type
    	dbg$deposit_lengvec : VECTOR [,BYTE],	! Table of lengths
	dbg$gl_list : VECTOR;			! Holds breakpoint arguments
