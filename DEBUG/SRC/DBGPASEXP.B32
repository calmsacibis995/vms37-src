MODULE	DBGPASEXP ( ! Pascal-Specific Expression Interpreter
	IDENT = 'V03-000'
	)=
BEGIN
!
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!
!++
!
! FACILITY:	VAX-11 PASCAL-SPECIFIC DEBUGGER MODULES
!
! ABSTRACT:
!
!	This module contains the Pascal-Specific Expression Interpreter
!
! ENVIRONMENT:	VAX/VMS user mode
!
! AUTHOR: P. Hohensee, CREATION DATE: 25-JULY-1980
!
! MODIFIED BY:
!
!--

REQUIRE 'SRC$:PASPROLOG';
REQUIRE 'SRC$:PASSYNMAC';

!
! Table of Contents
!
FORWARD ROUTINE
	PAS$_Push_Value_Desc	: NOVALUE,		! Push the value in a value descriptor
							! into the top element of the expression stack
	Exp_Init		: NOVALUE,		! Initialize Expression Interpreter
	DBG$NPAS_EXP_INT;				! Expression Interpreter

EXTERNAL ROUTINE
	PAS$_Error_Handler,				! Error Trap

	PAS$_Syn_Initialize	: NOVALUE,		! Initialize Lexical, Syntax, and Semantic Analysis
	PAS$_Get_Token		: Syntax_Routine NOVALUE,	! Advance to next Token
	PAS$_Syn_Expression	: Syntax_Routine NOVALUE,	! Parse an expression

	PAS$_Get_Srm_Type;				! Get a pointer to a Type Table entry
							! corresponding to an SRM type code

!
! EXTERNAL routines used to create the value descriptor
!
EXTERNAL ROUTINE
	PAS$_Construct_Value_Desc;			! Construct a value descriptor

!
! Error message vector
!
EXTERNAL
	PAS$_Message_Vector	: LONG;			! Address of address of error message vector

!
! Lexical Analysis EXTERNAL Storage
!
EXTERNAL
	PAS$_Default_Radix	: LONG,			! Default Number Radix
	PAS$_Lex_Column		: WORD UNSIGNED,	! Current Column Number
	PAS$_Lex_SrcDesc	: BLOCK [8, BYTE],	! Source Line Descriptor
	PAS$_Lex_LineDesc	: BLOCK [8, BYTE];	! Original Source Line Descriptor

!
! Syntax Analysis EXTERNAL Storage
!
EXTERNAL
	PAS$_Tokens		: VECTOR [4, LONG],	! Look-Ahead Tokens
	PAS$_Token_Values	: NULLVECTOR [4, 16],	! Look-Ahead Values
	PAS$_Token_Types	: VECTOR [4, LONG],	! Look-Ahead Value Types
	PAS$_Token_Positions	: VECTOR [4, LONG],	! Look-Ahead Token Column Numbers
	PAS$_Look_Ahead		: LONG;			! # of Tokens of Look-Ahead

!
! Semantic Analysis EXTERNAL Storage
!
EXTERNAL
	PAS$_Is_Primary			: BYTE UNSIGNED,! True = in Primary Interpreter,
							! False = in Expression Interpreter

	PAS$_Current_Symbol_Header	: LONG,		! Pointer to symbol table head
	PAS$_Current_Symbol_Trailer	: LONG,		! Pointer to symbol table tail
	PAS$_Expr_Depth			: LONG,		! Current Expression Sttack Depth
	PAS$_Expr_Stack			: BLOCKVECTOR [Expr_Stack_Depth, Expr_S_Entry, BYTE]
		FIELD(Expression_Stack_Fields);		! Expression Stack

GLOBAL ROUTINE PAS$_Push_Value_Desc (Value_Desc) : NOVALUE =

!++
! FUNCTIONAL SPECIFICATION:
!
!	Move the value in a value descriptor into the top element
!	on the expression stack
!
! FORMAL PARAMETERS:
!
!	Value_Desc	- Pointer to a value descriptor
!
! IMPLICIT INPUTS:
!
!	PAS$_Expr_Stack		- Expression Stack
!	PAS$_Expr_Depth		- Expression Stack Depth
!
! IMPLICIT OUTPUTS:
!
!	PAS$_Expr_Stack		- Expression Stack
!	PAS$_Expr_Depth		- Expression Stack Depth
!
! ROUTINE VALUE:
!
!	NONE
!
!--

    BEGIN
    MAP
	Value_Desc		: REF PAS$_Value_Desc;

    ! Check for Pascal Value Descriptor
    !
    IF .Value_Desc[DBG$B_Dhead_Lang] NEQ DBG$K_Pascal
    THEN
	SIGNAL(DBG$_WRONGLANG);

    ! Check for Expression Stack overflow
    !
    IF (PAS$_Expr_Depth = .PAS$_Expr_Depth + 1) GEQ Expr_Stack_Depth
    THEN
	SIGNAL(DBG$_EXPSTKOVR);

    IF .Value_Desc[PAS$VAL_Type] EQL 0
    THEN
	! Vax Standard Type
	!
	BEGIN

	! Get a pointer to the type
	!
	PAS$_Expr_Stack[.PAS$_Expr_Depth, Expr_Type] = PAS$_Get_Srm_Type(.Value_Desc[PAS$VAL_Srm_Type_Code]);

	! Place the address of the value in the top stack element
	!
	PAS$_Expr_Stack[.PAS$_Expr_Depth, Expr_Byte_Address]	= Value_Desc[PAS$VAL_Value];
	PAS$_Expr_Stack[.PAS$_Expr_Depth, Expr_Bit_Offset]	= 0;

	END

    ELSE
	! Pascal-Specific Type
	!
	BEGIN
	Not_Implemented();
	END;

    END;

ROUTINE Exp_Init(Input_Desc, Radix, Value_Ptr, Message_Vect) : NOVALUE =

!++
! FUNCTIONAL SPECIFICATION:
!
!	Initializes the Expression Interpreter
!
! FORMAL PARAMETERS:
!
!	Identical to DBG$NPAS_EXP_INT
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
!--

    BEGIN
    BIND
	Message_Vector_Address	= .Message_Vect;

    ! Clear return descriptor address in case of disaster
    !
    .Value_Ptr	= 0;

    ! Initialize Lexical, Syntax, and Semantic Analysis
    !
    PAS$_Syn_Initialize(.Input_Desc, .Radix, Message_Vector_Address, False);

    END;

GLOBAL ROUTINE DBG$NPAS_EXP_INT (Input_Desc, Radix, Value_Ptr, Message_Vect) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Evaluates source language expressions, with certain DEBUG extensions, 
! 	which occur in DEBUG commands. Expressions are defined to be source
!	language constructs which may appear on the right hand side of an
!	assignment statement. A language specific value descriptor is con-
!	structed to describe the value of the expression. This value descriptor
!	must be marked (within the language independent header portion)
!	as to whether the value descriptor is to be considered volatile or
!	non-volatile. This is done by writing the value of dbg$k_value_desc
!	(non-volatile) or dbg$k_v_value_desc (volatile) into the type field.
!
!	Non-volatile value descriptors will be stored to represent the DEBUG
!	psuedo symbol '\', 'last value'. Volatile value descriptors will not.
!
!	A maximal initial substring of the input string is parsed. The input
!	string descriptor is updated to reflect one character beyond the last
!	character accepted.
!
!	DEBUG extensions to source language expressions include the use of the
!	following as expression operands:
!
!	1) DEBUG permanent symbols R0-R11, AP, SP, PC, PSL. If the language
!	   allows explicit operations on registers, then the use of these symbols
!	   overrides user defined symbolic references with the same name, unless
!	   an explicit pathname is specified such as MODULE\ROUTINE\R5. If the
!	   source language does not allow explicit operations on registers, then
!	   a register name must be preceeded with '%', such as %R5, to be re-
!	   cognized. Otherwise the symbol wil be assumed to be a user defined
!	   symbolic reference.
!
!	2) The DEBUG pseudo-symbol '\'. This symbol stands for 'last value'
!	   as represented by the stored value descriptor corresponding to the
!	   value of the last expression EVALUATEd. The 'last value' value descriptor
!	   will be obtained by a call to dbg$nget_lastval.
!
!	   Note that other DEBUG pseudo-symbols are NOT allowed in an expression.
!
! FORMAL PARAMETERS:
!
!	input_desc  - 	the address of a VAX standard string descriptor which
!			describes the input string
!
!	radix	    -	a longword containing an unsigned integer encoding of the
!			radix to be used in the evaluation of numeric literals
!			appearing in the input string as follows:
!
!		dbg$k_default (1)	- source language default radix
!
!		dbg$k_binary (2)	- binary
!
!		dbg$k_octal (8)   	- octal
!
!		dbg$k_decimal (10)	- decimal
!
!		dbg$k_hex (16)		- hexadecimal
!
!			Note that a string purporting to be a hexadecimal numeric
!			literal is required to have a leading '0', such as 
!			'0A14' to differentiate the numeric string from a symbolic
!			reference.
!
!	value_ptr    -	the address of a longword to contain the address of a
!			language specific value descriptor upon return
!
!	message_vect -	the address of a longword to contain the address of a
!			message argument vector as described on page 4-119 of
!			the VAX/VMS system reference manual, volume 1A
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	In case of a success or warning return, a language specific value 
!	descriptor is constructed from dynamic storage. Value_ptr is set to
!	contain the address of this descriptor.
!
!	In case of a severe error return, a message argument vector is 
!	constructed from dynamic storage and message_vect is set to contain the
!	beginning address of the vector.
!
! ROUTINE VALUE:
!
!	unsigned integer longword completion code
!
! COMPLETION CODES:
!
!	STS$K_SUCCESS (1) -	A value descriptor was constructed and 
!				returned. No unfamilar input was encountered.
!				Input string exhausted.
!
!	STS$K_WARNING (0) -	A value descriptor was constructed and
!				returned. Unfamiliar input encountered. 
!
!				Note that some DEBUG commands allow expression
!				lists where each expression is seperated by
!				commas. In these cases (or whenever unfamilar input
!				is encountered), this return should be 
!				used.
!
!	STS$K_SEVERE  (4) -	No value descriptor constructed. Message ar-
!				gument vector constructed and returned. Fatal
!				syntax or semantic error encountered. No input 
!				accepted.
!
!				Note that the input string descriptor fields
!				should be returned to their initial (on input)
!				values even though some characters (but not a
!				complete primary string) have been accepted.
!	
! SIDE EFFECTS:
!
!	Informational messages such as number or string truncation may be 
!	issued by this routine.
!
!	The VAX standard string descriptor which describes the input string
!	is updated to reflect one character beyond the last character accepted.
!
!--

    BEGIN
    MAP
	Input_Desc		: REF BLOCK [8, BYTE];

    BIND
	Message_Vector_Address	= .Message_Vect;

    GLOBAL REGISTER
	Token		= 8	: LONG,
	Token_Value	= 9	: LONG,
	Token_Type	= 10	: LONG,
	Token_Position	= 11	: LONG;

    ENABLE
	PAS$_Error_Handler;

    ! Initialize
    !
    Exp_Init(.Input_Desc, .Radix, .Value_Ptr, Message_Vector_Address);

    ! Scan first token
    !
    PAS$_Look_Ahead	= 0;
    PAS$_Get_Token();

    ! Evaluate the expression
    !
    PAS$_Syn_Expression();

    !
    ! All ok if we've gotton this far
    !

    ! The value of the expression is on top of the expression stack
    ! Get its type and construct either a transient, permanent or permanent
    ! address value descriptor.
    !
    .Value_Ptr = PAS$_Construct_Value_Desc(False, False);

    ! Load updated command line descriptor
    !
    MOVEBYTE(8, PAS$_Lex_SrcDesc, .Input_Desc);

    ! Check for more stuff on the line
    !
    IF .Token EQLU Syn_K_Eof
    THEN
	! Ate it all
	!
	BEGIN

	! Clear string address in input descriptor
	!
	Input_Desc[DSC$A_POINTER] = 0;

	RETURN STS$K_SUCCESS;
	END
    ELSE
	! Slight Indigestion
	!
	BEGIN
	! Back up length and address values in line descriptor
	!
	Input_Desc[DSC$W_LENGTH]	= .Input_Desc[DSC$W_LENGTH] +
					(.PAS$_Lex_Column - .Token_Position);
	Input_Desc[DSC$A_POINTER]	= .Input_Desc[DSC$A_POINTER] -
					(.PAS$_Lex_Column - .Token_Position);

	RETURN STS$K_WARNING;
	END;

    END;

END
ELUDOM
