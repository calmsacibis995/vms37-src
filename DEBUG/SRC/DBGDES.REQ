!	DBGDES.REQ	- REQUIRE FILE FOR VAX/VMS DEBUG FACILITY
!
!	VERSION	'V03-000'
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	
!
!	DEBUG
!
! ABSTRACT:
!
!	REQUIRE file which contains definitions for:
!
!	1) Address expression descriptors used by CLI and AEI
!
!	2) Permanent symbol descriptors used by EI, PI, AEI, and PeSI.
!
!	3) Primary and value descriptor headers used by CLI, Monitor, languge
!	   vectoring routines, and language specific routines such as EI and PI.
!
!	4) Field value literals for the above descriptors.
!
!	5) General purpose literals
!
! ENVIRONMENT:
!
!	VAX/VMS
!
! AUTHOR:	
!
!	David Plummer
!
! CREATION DATE:
!
!	25-June-80
!
! VERSION:
!
!	01
!
! MODIFIED BY:
!
!--


	! Address expression descriptor definition

FIELD
    DBG$AED_FIELDS =
	SET

	DBG$B_AED_TYPE 	= [0, 0, 8, 0],		! Type of value field
	DBG$L_AED_VALUE	= [1, 0, 32, 0]		! L-value or pointer to descriptor

	TES;					! Note that 3 bytes of the first
						! longword are unused
						
LITERAL
	DBG$K_AED_SIZE = 2;			! Length in longwords
MACRO
	DBG$AED = BLOCK [DBG$K_AED_SIZE] FIELD (DBG$AED_FIELDS) %;

	! Legal values for the AED type field

!	DBG$K_PRIMARY_DESC		! Value field contains address
!					! of primary descriptor
!	DBG$K_PERM_DESC			! Value field contains address
!					! of permanent symbol descriptor
!	DBG$K_INSTRUCTION		! Value field contains PC value
!	DBG$K_NOTYPE			! Value field contains untyped l-value



	! Permanent symbol descriptor definition

FIELD
    DBG$PERMSD_FIELDS =
	SET

	DBG$B_PERMSD_ID 	= [0, 0, 8, 0],		! Symbol id (register number)
	DBG$L_PERMSD_ADDR	= [1, 0, 32, 0],	! Address of register
	DBG$L_PERMSD_PATH	= [2, 0, 32, 0]		! Address of pathname vector

	TES;						! Note that bytes 2-4
							! of the first longword
							! are unused.
LITERAL
	DBG$K_PERMSD_SIZE = 3;		! Length in longwords

MACRO
	DBG$PERMSD = BLOCK [DBG$K_PERMSD_SIZE] FIELD (DBG$PERMSD_FIELDS) %;

	! ID field values

LITERAL
	DBG$K_R0	= 200,		! R0
	DBG$K_R1	= 201,		! R1
	DBG$K_R2	= 202,		! R2
	DBG$K_R3	= 203,		! R3
	DBG$K_R4	= 204,		! R4
	DBG$K_R5	= 205,		! R5
	DBG$K_R6	= 206,		! R6
	DBG$K_R7	= 207,		! R7
	DBG$K_R8	= 208,		! R8
	DBG$K_R9	= 209,		! R9
	DBG$K_R10	= 210,		! R10
	DBG$K_R11	= 211,		! R11
	DBG$K_AP	= 212,		! AP
	DBG$K_FP	= 213,		! FP
	DBG$K_SP	= 214,		! SP
	DBG$K_PC	= 215,		! PC
	DBG$K_PSL	= 216;		! PSL



	! Value and primary descriptor header block

FIELD
    DBG$DHEAD_FIELDS	=
	SET

	DBG$B_DHEAD_LANG	= [0, 24, 8, 0],	! Language of descriptor
	DBG$B_DHEAD_TYPE	= [0, 16, 8, 0],	! Type of descriptor
	DBG$W_DHEAD_LENGTH	= [0, 0, 16, 0],	! Length of descriptor in
							! bytes, including header
	DBG$L_DHEAD_POINTER	= [1, 0, 32, 0]		! Unused

	TES;

LITERAL
	DBG$K_DHEAD_SIZE = 2;		! Length in longwords

MACRO
	DBG$DHEAD = BLOCK [DBG$K_DHEAD_SIZE] FIELD (DBG$DHEAD_FIELDS) %;

	! Language field literals - these are the same as DST language ids.

LITERAL
	DBG$K_MACRO	= 0,		! MACRO
	DBG$K_FORTRAN	= 1,		! F4P
	DBG$K_BLISS	= 2,		! BLISS-32
	DBG$K_COBOL	= 3,		! COBOL-74, COBOL-79
	DBG$K_BASIC	= 4,		! BASIC-P
	DBG$K_PLI	= 5,		! PL/I
	DBG$K_PASCAL	= 6,		! PASCAL
	DBG$K_C		= 7;		! C

	! Legal type field values.

!	DBG$K_PRIMARY_DESC 		! Primary descriptor follows. Defined above
!	DBG$K_VALUE_DESC		! Value descriptor follows.



	! Object type literals - used as type values.

LITERAL
	DBG$K_LITERAL		= 120,
	DBG$K_PRIMARY_DESC	= 121,
	DBG$K_VALUE_DESC	= 122,
	DBG$K_PERM_DESC		= 123,
	DBG$K_INSTRUCTION	= 124,
	DBG$K_NC_INSTRUCTION	= 125,	! Named constant, instuction type
	DBG$K_NC_OTHER		= 126,	! Named constant, no instruction
	DBG$K_OTHER		= 127,
	DBG$K_NOTYPE		= 128;

	! Type converter descriptor type literals

LITERAL
	DBG$K_EXTERNAL_DESC	= 129,	! External (printable format)
	DBG$K_VAX_DESC		= 130;	! Vax standard descriptor

	! Note that dbg$k_value_desc may also be used above

	
	! Radix literals

LITERAL
	DBG$K_DEFAULT		= 1,	! Default source language radix
	DBG$K_BINARY		= 2,	
	DBG$K_OCTAL		= 8,
	DBG$K_DECIMAL		= 10,
	DBG$K_HEX		= 16;	! Hexadecimal


	! Pseudo symbol codes

LITERAL
	DBG$K_CURRENT_LOC	= 220,	! '.'
	DBG$K_PREDECESSOR	= 221,	! '^'
	DBG$K_SUCCESSOR		= 222,	! <cr>
	DBG$K_LAST_VALUE	= 223;	! '\'

	


	! End of dbgdes.req
