MODULE DBGNCANCL (IDENT = 'V03-000') =

BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:
!
!	DEBUG
!
! ABSTRACT:
!
!	This module contains the command parse and execution networks for
!	the CANCEL command.
!
! ENVIRONMENT:
!
!	VAX/VMS
!
! AUTHOR:
!
!	David Plummer
!
! CREATION DATE:
!
!	9-Jul-80
!
! VERSION:
!
!	V02.2-001
!
! MODIFIED BY:
!
!	Richard Title	16-Sep-81
!
! REVISION HISTORY:
!	
! 3.01	16-SEP-81	RT	Implemented CANCEL SOURCE command
!--

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
	DBG$NPARSE_CANCEL,		! ATN parse network for CANCEL
	DBG$NEXECUTE_CANCEL;		! Command execution network for CANCEL

!
! REQUIRE FILES:
!

REQUIRE 'SRC$:DBGPROLOG.REQ';

REQUIRE 'SRC$:COMTER.REQ';
REQUIRE 'SRC$:DBGGEN.REQ';
REQUIRE 'SRC$:SYSSER.REQ';

!
! EQUATED SYMBOLS:
!
LITERAL			! Legal verb composites

	CANCEL_ALL		= 1,
	CANCEL_BREAK		= 2,
	CANCEL_BREAK_ALL	= 3,
	CANCEL_EXCEPTION_BREAK	= 4,
	CANCEL_MODE		= 5,
	CANCEL_MODULE		= 6,
	CANCEL_MODULE_ALL	= 7,
	CANCEL_SCOPE		= 8,
	CANCEL_TRACE		= 9,
	CANCEL_TRACE_CALLS	= 10,
	CANCEL_TRACE_BRANCH	= 11,
	CANCEL_TRACE_ALL	= 12,
	CANCEL_TYPE_OVERRIDE	= 13,
	CANCEL_WATCH		= 14,
	CANCEL_WATCH_ALL	= 15,
    	CANCEL_SOURCE 		= 16;

!
! EXTERNAL REFERENCES:
!
EXTERNAL ROUTINE
	DBG$RST_SETSCOPE : NOVALUE,	! Cancels (and sets) user scope
	DBG$RST_CANMOD,			! Cancels a module
	DBG$NSAVE_STRING,		! Saves a string form the input stream
	DBG$SET_OPTRACE,		! Sets and cancels opcode tracing
	DBG$IS_IT_ENTRY,		! Returns true if address = entry point
	DBG$NGET_ADDRESS,		! Obtains an address from an addr exp desc
	DBG$NLIST_FREEZ,		! Allocates dynamic listed storage
	DBG$SET_MOD_DEF,		! Resets mode level to default
	DBG$NMATCH,			! Matches counted strings to input
    	DBG$SRC_CANCEL_SOURCE : NOVALUE,! Implements CANCEL SOURCE command
    	DBG$STA_GETSOURCEMOD,		! Looks up module rst pointer
	DBG$SET_STP_DEF  : NOVALUE,	! Sets default step
	DBG$NSYNTAX_ERROR,		! Formats a syntax error
	DBG$NNEXT_WORD,			! Returns the next word of input
	DBG$NPARSE_ADDRESS,		! Obtains an address expression descriptor
	DBG$CANCEL_BPT,			! Cancels user set breakpoints
	DBG$NMAKE_ARG_VECT;		! Constructs a message argument vector

EXTERNAL
	DBG$GL_GBLTYP,			! Override type
	DBG$GW_GBLLNGTH : WORD,		! Override length
	DBG$GL_DFLTTYP,			! Default type
	DBG$GW_DFLTLENG : WORD,		! Default length
	DBG$GL_RUNFRAME : REF BLOCK [,BYTE], ! User runframe
	DBG$GB_RESIGNAL : BYTE,		! Flag for resignaling exceptions
	DBG$GL_CONTEXT  : BITVECTOR;	! Context word


GLOBAL ROUTINE DBG$NPARSE_CANCEL (INPUT_DESC, VERB_NODE, MESSAGE_VECT) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine comprises the ATN parse network for the CANCEL verb.
!	A command execution tree is constructed during the parsing process
!	which is used as input to the command execution network following
!	a complete and successful parse. Upon detection a a syntax error,
!	a message argument vector is constructed and returned.
!
! FORMAL PARAMETERS:
!
!	INPUT_DESC	- A longword containing the address of a standard
!			  ascii string descriptor corresponding to the input
!			  command
!
!	VERB_NODE	- A longword containing the address of the command
!			  verb node which is the head node of the command
!			  execution tree
!
!	MESSAGE_VECT	- The address of a longword to contain the address of
!			  a standard message argument vector upon detection of
!			  errors
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	The command execution tree corresponding to the input command is constructed
!	on success. 
!
!	On failure, a message argument vector is constructed and returned.
!
! ROUTINE VALUE:
!
!	An unsigned integer longword completion code
!
! COMPLETION CODES:
!
!	STS$K_SUCCESS (1)	- Success. Command parsed and execution tree made.
!
!	STS$K_SEVERE  (4)	- Failure. No tree constructed. Message argument
!				  vector constructed and returned.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP	
	VERB_NODE : REF dbg$verb_node;

    LOCAL
	STATUS,				! Holds routine's return status
	NOUN_NODE : REF dbg$noun_node;  ! Noun node of command execution tree

    ! Define strings used at this level of parsing
    !
    BIND	
	DBG$CS_ALL		= UPLIT BYTE (3, 'ALL'),
	DBG$CS_BREAK		= UPLIT BYTE (5, 'BREAK'),
	DBG$CS_EXCEPTION	= UPLIT BYTE (9, 'EXCEPTION'),
	DBG$CS_MODE		= UPLIT BYTE (4, 'MODE'),
	DBG$CS_MODULE		= UPLIT BYTE (6, 'MODULE'),
	DBG$CS_SCOPE		= UPLIT BYTE (5, 'SCOPE'),
    	DBG$CS_SOURCE		= UPLIT BYTE (6, 'SOURCE'),
	DBG$CS_TRACE		= UPLIT BYTE (5, 'TRACE'),
	DBG$CS_TYPE		= UPLIT BYTE (4, 'TYPE'),
	DBG$CS_WATCH		= UPLIT BYTE (5, 'WATCH'),
    	DBG$CS_EQUAL		= UPLIT BYTE (1, dbg$k_equal),
	DBG$CS_SLASH		= UPLIT BYTE (1, dbg$k_slash),
	DBG$CS_CR		= UPLIT BYTE (1, dbg$k_car_return);

    ! Create and link a noun node. Note that the noun node will not
    ! be used for certain commands like CANCEL BREAK/ALL.
    !
    IF NOT dbg$nlist_freez (dbg$k_noun_node_size, noun_node, .message_vect)
    THEN
	RETURN sts$k_severe;

    verb_node [dbg$l_verb_object_ptr] = .noun_node;


    ! Parse the next keyword and transfer control to a subnetwork
    !
    SELECTONE true
	OF
	SET

	[dbg$nmatch (.input_desc, dbg$cs_all, 1)] :	! Cancel all
	    BEGIN
	    verb_node [dbg$b_verb_composite] = cancel_all;
	    END;

	[dbg$nmatch (.input_desc, dbg$cs_break, 1)] : 	! CANCEL BREAK
	    BEGIN
	    BIND
		DBG$CS_SLASH = UPLIT BYTE (1, dbg$k_slash);
	    LOCAL
		STATUS;		! Holds return status

	    ! Check for /ALL

	    IF dbg$nmatch (.input_desc, dbg$cs_slash, 1)
	    THEN
		BEGIN
		IF dbg$nmatch (.input_desc, dbg$cs_all, 1)
		THEN
		    BEGIN
		    verb_node [dbg$b_verb_composite] = cancel_break_all;
		    RETURN sts$k_success;
		    END
		ELSE
		    BEGIN
		    .message_vect =
		    (
		     IF dbg$nmatch (.input_desc, dbg$cs_cr, 1)
		     THEN
			 dbg$nmake_arg_vect (dbg$_needmore)
		     ELSE
			 dbg$nsyntax_error (dbg$nnext_word (.input_desc))
		    );
		    RETURN sts$k_severe;
		    END;
		END;


	    ! We didn't find the /all. We must have an address expression.
	    !
	    verb_node [dbg$b_verb_composite] = cancel_break;

	    IF NOT (status = dbg$nparse_address (.input_desc,
						 noun_node [dbg$l_noun_value],
						 dbg$k_default,
						 .message_vect))
	    THEN
		BEGIN

		! We must format a syntax error on sts$k_warning because this means
		! more input follows the parsed primary string and we don't
		! expect this.
		!	
		IF .status EQL sts$k_warning
		THEN
		    .message_vect = dbg$nsyntax_error (dbg$nnext_word (.input_desc));
		RETURN sts$k_severe;
		END;
	    END;

	[dbg$nmatch (.input_desc, dbg$cs_exception, 1)] : ! CANCEL EXCEPTION BREAK
	    BEGIN

	    ! We look for BREAK
	    !
	    IF NOT dbg$nmatch (.input_desc, dbg$cs_break, 1)
	    THEN
		BEGIN
		.message_vect = 
		(
		 IF dbg$nmatch (.input_desc, dbg$cs_cr, 1)
		 THEN
		     dbg$nmake_arg_vect (dbg$_needmore)
		 ELSE
		     dbg$nsyntax_error (dbg$nnext_word (.input_desc))
		);
		RETURN sts$k_severe;
		END;

	    verb_node [dbg$b_verb_composite] = cancel_exception_break;
	    END;

	[dbg$nmatch (.input_desc, dbg$cs_mode, 1)] :	! CANCEL MODE
	    BEGIN
	    verb_node [dbg$b_verb_composite] = cancel_mode;
	    END;

	[dbg$nmatch (.input_desc, dbg$cs_module, 4)] :  ! CANCEL MODULE
	    BEGIN

	    ! Check for CANCEL MODULE/ALL
	    !
	    IF dbg$nmatch (.input_desc, dbg$cs_slash, 1)
	    THEN
		BEGIN
		BIND
		    DBG$CS_ALL = UPLIT BYTE (3, 'ALL');

		IF NOT dbg$nmatch (.input_desc, dbg$cs_all, 1)
		THEN
		    BEGIN
		    .message_vect =
		    (IF dbg$nmatch (.input_desc, dbg$cs_cr, 1)
		     THEN
		         dbg$nmake_arg_vect (dbg$_needmore)
		     ELSE
		         dbg$nsyntax_error (dbg$nnext_word (.input_desc)));
		    RETURN sts$k_severe;
		    END;

		verb_node [dbg$b_verb_composite] = cancel_module_all;
		END

	    ELSE
	 	BEGIN

		! We have a module name list to parse
		!
		BIND
		    DBG$CS_COMMA = UPLIT BYTE (1, dbg$k_comma);
		LOCAL
		    LINK;		! Temporary pointer

		! Accept strings and commas
		!
		WHILE true
		DO
		    BEGIN

		    IF NOT DBG$NSAVE_STRING  (.input_desc, 
					      noun_node [dbg$l_noun_value],
					      .message_vect)
		    THEN
			RETURN sts$k_severe;


		    ! Check for a comma
		    !
		    IF NOT dbg$nmatch (.input_desc, dbg$cs_comma, 1)
		    THEN
			EXITLOOP;


		    ! Create a new noun node to hold the next string
		    !
		    link = noun_node [dbg$l_noun_link];
		    IF NOT dbg$nlist_freez (dbg$k_noun_node_size,
					    noun_node,
					    .message_vect)
		    THEN
			RETURN sts$k_severe;
	
		    .link = .noun_node;

		    END;	! End of loop


		! Place a zero in the last link field
		!
		noun_node [dbg$l_noun_link] = 0;

		verb_node [dbg$b_verb_composite] = cancel_module;

		END;

	    END;

	[dbg$nmatch (.input_desc, dbg$cs_scope, 1)] :
	    BEGIN
	    verb_node [dbg$b_verb_composite] = cancel_scope;
	    END;

    	[dbg$nmatch (.input_desc, dbg$cs_source, 2)] :
    	    BEGIN
    	    verb_node[dbg$b_verb_composite] = cancel_source;

    	    ! Check for CANCEL SOURCE/MODULE=modname

    	    IF dbg$nmatch (.input_desc, dbg$cs_slash, 1)
    	    THEN
    		BEGIN
    		LOCAL 
    		    modnameptr;
    		BIND
    	            dbg$cs_module = UPLIT BYTE (6, 'MODULE');

    		! Read the string MODULE
    	
    		IF NOT dbg$nmatch (.input_desc, dbg$cs_module, 4)
    		THEN
    		    BEGIN
    		    .message_vect = dbg$nsyntax_error(
    			dbg$nnext_word(.input_desc));
    		    RETURN sts$k_severe;
    		    END;

    		! Read the = sign
    		
    		IF NOT dbg$nmatch (.input_desc, dbg$cs_equal, 1)
    		THEN
    		    BEGIN
    		    .message_vect = dbg$nsyntax_error(
    			dbg$nnext_word(.input_desc));
    		    RETURN sts$k_severe;
    		    END;

    		! Read the module name
    
    		IF NOT dbg$nsave_string (.input_desc,
    		    modnameptr, .message_vect)
    		THEN
    		    RETURN sts$k_severe;

    		! Convert the module name into an rst pointer

    		noun_node[dbg$l_noun_value] = 
    		    dbg$sta_getsourcemod(.modnameptr);

    		! If the above routine returns zero then the user has
    		! entered an invalid module name.

    		IF .noun_node[dbg$l_noun_value] EQL 0
    		THEN
    		    BEGIN
    		    .message_vect = dbg$nmake_arg_vect(
    			dbg$_nosuchmodu, 1, .modnameptr);
    	    	    RETURN sts$k_severe;
    		    END;

    		END ! CANCEL SOURCE/MODULE=modname

    	    ELSE ! the user has just entered CANCEL SOURCE

    		noun_node[dbg$l_noun_value] = 0;

    	    END; ! CANCEL SOURCE

	[dbg$nmatch (.input_desc, dbg$cs_trace, 1)] :	! CANCEL TRACE
	    BEGIN
	    BIND
		DBG$CS_CALLS = UPLIT BYTE (5, 'CALLS'),
		DBG$CS_BRANCH = UPLIT BYTE (6, 'BRANCH');
	    LOCAL
		STATUS;		! Holds return status

	    ! Check for /ALL, /CALLS, or /BRANCH
	    !
	    IF dbg$nmatch (.input_desc, dbg$cs_slash, 1)
	    THEN
		BEGIN
		SELECTONE true
		    OF
		    SET

		    [dbg$nmatch (.input_desc, dbg$cs_branch, 1)] :
			BEGIN
			verb_node [dbg$b_verb_composite] = cancel_trace_branch;
			END;

		    [dbg$nmatch (.input_desc, dbg$cs_calls, 1)] :
			BEGIN
			verb_node [dbg$b_verb_composite] = cancel_trace_calls;
			END;

		    [dbg$nmatch (.input_desc, dbg$cs_all, 1)] :
			BEGIN
			verb_node [dbg$b_verb_composite] = cancel_trace_all;
			END;

		    [OTHERWISE] :	! Syntax error
			BEGIN
		    	.message_vect =
		    	(
		     	 IF dbg$nmatch (.input_desc, dbg$cs_cr, 1)
		     	 THEN
			     dbg$nmake_arg_vect (dbg$_needmore)
		     	 ELSE
			     dbg$nsyntax_error (dbg$nnext_word (.input_desc))
		    	);
		    	RETURN sts$k_severe;
		    	END;

		    TES;

		RETURN sts$k_success;

		END;


	    ! We didn't find the /xxx. We must have an address expression.
	    !
	    verb_node [dbg$b_verb_composite] = cancel_trace;

	    IF NOT (status = dbg$nparse_address (.input_desc,
						 noun_node [dbg$l_noun_value],
						 dbg$k_default,
						 .message_vect))
	    THEN
		BEGIN

		! We must format a syntax error on sts$k_warning because this means
		! more input follows the parsed primary string and we don't
		! expect this.
		!
		IF .status EQL sts$k_warning
		THEN
		    .message_vect = dbg$nsyntax_error (dbg$nnext_word (.input_desc));
		RETURN sts$k_severe;
		END;
	    END;

	[dbg$nmatch (.input_desc, dbg$cs_type, 2)] :    ! CANCEL TYPE/OVERRIDE
	    BEGIN
	    BIND
		DBG$CS_OVERRIDE = UPLIT BYTE (8, 'OVERRIDE');

	    ! Look for the /
	    !
	    IF NOT dbg$nmatch (.input_desc, dbg$cs_slash, 1)
	    THEN
		BEGIN
		.message_vect =
		(IF dbg$nmatch (.input_desc, dbg$cs_cr, 1)
		THEN
		    dbg$nmake_arg_vect (dbg$_needmore)
		ELSE
		    dbg$nsyntax_error (dbg$nnext_word (.input_desc)));
		RETURN sts$k_severe;
		END;


	    ! Look for 'override'
	    !
	    IF NOT dbg$nmatch (.input_desc, dbg$cs_override, 1)
	    THEN
		BEGIN
		.message_vect =
		(IF dbg$nmatch (.input_desc, dbg$cs_cr, 1)
		THEN
		    dbg$nmake_arg_vect (dbg$_needmore)
		ELSE
		    dbg$nsyntax_error (dbg$nnext_word (.input_desc)));
		RETURN sts$k_severe;
		END;

	    verb_node [dbg$b_verb_composite] = cancel_type_override;
	    END;

	[dbg$nmatch (.input_desc, dbg$cs_watch, 1)] :	! CANCEL WATCH
	    BEGIN
	    BIND
		DBG$CS_SLASH = UPLIT BYTE (1, dbg$k_slash);
	    LOCAL
		STATUS;		! Holds return status

	    ! Check for /ALL
	    !
	    IF dbg$nmatch (.input_desc, dbg$cs_slash, 1)
	    THEN
		BEGIN
		IF dbg$nmatch (.input_desc, dbg$cs_all, 1)
		THEN
		    BEGIN
		    verb_node [dbg$b_verb_composite] = cancel_watch_all;
		    RETURN sts$k_success;
		    END
		ELSE
		    BEGIN
		    .message_vect =
		    (
		     IF dbg$nmatch (.input_desc, dbg$cs_cr, 1)
		     THEN
			 dbg$nmake_arg_vect (dbg$_needmore)
		     ELSE
			 dbg$nsyntax_error (dbg$nnext_word (.input_desc))
		    );
		    RETURN sts$k_severe;
		    END;
		END;


	    ! We didn't find the /all. We must have an address expression.
	    !
	    verb_node [dbg$b_verb_composite] = cancel_watch;

	    IF NOT (status = dbg$nparse_address (.input_desc,
						 noun_node [dbg$l_noun_value],
						 dbg$k_default,
						 .message_vect))
	    THEN
		BEGIN

		! We must format a syntax error on sts$k_warning because this means
		! more input follows the parsed primary string and we don't
		! expect this.
		!
		IF .status EQL sts$k_warning
		THEN
		    .message_vect = dbg$nsyntax_error (dbg$nnext_word (.input_desc));
		RETURN sts$k_severe;
		END;
	    END;		

	[OTHERWISE] :	! Syntax error
	    BEGIN
	    .message_vect =
	    (
	     IF dbg$nmatch (.input_desc, dbg$cs_cr, 1)
	     THEN
		 dbg$nmake_arg_vect (dbg$_needmore)
	     ELSE
		 dbg$nsyntax_error (dbg$nnext_word (.input_desc))
	    );
	    RETURN sts$k_severe;
	    END;

	TES;

    RETURN sts$k_success;

    END;			! End of dbg$nparse_cancel


GLOBAL ROUTINE DBG$NEXECUTE_CANCEL (VERB_NODE, MESSAGE_VECT) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine uses the command execution tree constructed by the parse
!	network as input and performs the semantic actions associated with
!	the given input corresponding to the CANCEL xxx command. If the command
!	cannot be executed, a message argument vector is constructed and returned.
!
! FORMAL PARAMETERS:
!
!	VERB_NODE	- A longword containing the address of the head node
!			  of the command execution tree. This corresponds to
!			  the veb node.
!
!	MESSAGE_VECT	- The address of a longword to contain the address of
!			  a standard message argument vector upon detection of
!			  errors.
!
! IMPLICIT INPUTS:
!
!	The linked list command execution tree pointed to by verb_node.
!
! IMPLICIT OUTPUTS:
!
!	On failure, a message argument vector is constructed and returned.
!
! ROUTINE VALUE:
!
!	An unsigned integer longword completion code
!
! COMPLETION CODES:
!
!	STS$K_SUCCESS (1)	- Success. Command executed.
!
!	STS$K_SEVERE  (4)	- Failure. Command not executed. Message argument
!				  vector constructed and returned.
!
! SIDE EFFECTS:
!
!	Various semantic actions corresponding to the CANCEL xxx command are
!	performed.
!
!--
    BEGIN

    MAP
	VERB_NODE 	: REF dbg$verb_node;		! Head node of execution tree

    LOCAL
	NOUN_NODE 	: REF dbg$noun_node,		! Noun node of execution tree
	ADDR_EXP_DESC 	: REF dbg$aed,			! Address expression descriptor
	ADDRESS 	: VECTOR [2],			! Address and bit offset
	TYPE;						! Type of AED described object

    ! Recover the noun node
    !
    noun_node = .verb_node [dbg$l_verb_object_ptr];


    ! Perform the indicated action base on the verb composite
    !
    CASE .verb_node [dbg$b_verb_composite] FROM cancel_all TO cancel_source
	OF
	SET

	[cancel_all] :		! CANCEL ALL
	    BEGIN
	    LOCAL
		SCOPE_LIST,
		DUMMY;

	    ! Just cancel everything in sight
	    !
	    scope_list = 0;
	    dbg$gl_context [dbg$k_all] = true;
	    dbg$cancel_bpt (-1);			! All xpoints
	    dbg$gl_runframe [dbg$v_trace_all] = false;  ! For next two calls
	    dbg$set_optrace (calls_token);		! Trace/calls
	    dbg$set_optrace (branch_token);		! Trace/branch
	    dbg$gb_resignal = true;			! Exception break
	    dbg$set_mod_def ();				! Set mode defaults
	    dbg$set_stp_def ();				! Set step defaults
	    dbg$rst_setscope (scope_list, dummy);	! Scopes (new debugger)
	    dbg$gl_gbltyp = -1;				! Override type
	    dbg$gw_gbllngth = 0;			! Override length
	    dbg$gl_dflttyp = dsc$k_dtype_l;		! Default type
	    dbg$gw_dfltleng = 4;			! Default length
	    END;

	[cancel_break] :	! CANCEL BREAK <ADDR_EXP>
	    BEGIN

	    ! Obtain the address of the entity
	    !
	    addr_exp_desc = .noun_node [dbg$l_noun_value];
	    IF NOT dbg$nget_address (.addr_exp_desc, address [0], type, .message_vect)
	    THEN
		RETURN sts$k_severe;


	    ! Check for an entry point
	    !
	    IF dbg$is_it_entry (.address [0])
	    THEN
		address [0] = .address [0] + 2;	! Skip over entry mask


	    ! Set the appropriate context bit and cancel the breakpoint.
	    !
	    dbg$gl_context [dbg$k_break] = true;
	    IF NOT dbg$cancel_bpt (.address [0], .message_vect)
	    THEN
		RETURN sts$k_severe;
	    END;

	[cancel_break_all] :	! CANCEL BREAK/ALL
	    BEGIN

	    ! Set the appropriate context bit and cancel all breakpoints
	    !
	    dbg$gl_context [dbg$k_all_break] = true;
	    IF NOT dbg$cancel_bpt (-2, .message_vect)
	    THEN
		RETURN sts$k_severe;
	    END;

	[cancel_exception_break] : ! CANCEL EXCEPTION BREAK
	    BEGIN
	    dbg$gb_resignal = true;
	    END;

	[cancel_mode] :	! CANCEL MODE
	    BEGIN
	    dbg$set_mod_def ();
	    END;

	[cancel_module] :	! CANCEL MODULE or CANCEL MODULE/ALL
	    BEGIN
		
	    ! Module names are stored away as counted strings
	    !
	    LOCAL
		NAME_BUFF : REF VECTOR [,BYTE];	! Module name buffer

	    WHILE .noun_node NEQA 0
	    DO
		BEGIN

		! Retrieve the name buffer and call the symbol table
		!
		name_buff = .noun_node [dbg$l_noun_value];
		IF NOT dbg$rst_canmod (name_buff [1], .name_buff [0])
		THEN
		    BEGIN
		    .message_vect = dbg$nmake_arg_vect (dbg$_nosuchmodu,
							1,
							name_buff [0]);
		    RETURN sts$k_severe;
		    END;


		! Obtain the next noun node
		!
		noun_node = .noun_node [dbg$l_noun_link];

		END;	! End of Loop
	
	    END;

	[cancel_module_all] :
	    BEGIN
	    dbg$rst_canmod (0, 0);
	    END;

	[cancel_scope] :
	    BEGIN
	    LOCAL
		DUMMY,
		SCOPE_LIST;

	    scope_list = 0;
	    dbg$rst_setscope (scope_list, dummy);
	    END;

    	[cancel_source] : 	! CANCEL SOURCE[/MODULE=modname]
    	    BEGIN
    	    dbg$src_cancel_source(.noun_node[dbg$l_noun_value]);
    	    END;

	[cancel_trace] :	! CANCEL TRACE <ADDR_EXP>
	    BEGIN

	    ! Obtain the address of the entity

	    addr_exp_desc = .noun_node [dbg$l_noun_value];

	    IF NOT dbg$nget_address (.addr_exp_desc, address [0], type, .message_vect)
	    THEN
		RETURN sts$k_severe;


	    ! Check for an entry mask
	    !
	    IF dbg$is_it_entry (.address [0])
	    THEN
		address [0] = .address [0] + 2;


	    ! Set the appropriate context bit and cancel the breakpoint.
	    !
	    dbg$gl_context [dbg$k_trace] = true;
	    IF NOT dbg$cancel_bpt (.address [0], .message_vect)
	    THEN
		RETURN sts$k_severe;
	    END;

	[cancel_trace_calls] :	! CANCEL TRACE/CALLS
	    BEGIN

	    ! Set the context bit and cancel calls tracing
	    !
	    dbg$gl_context [dbg$k_cancel] = true;	! dbg$set_optrace cares about this
							! bit only for CANCEL
	    dbg$gl_context [dbg$k_trce_call] = true;
	    dbg$gl_runframe [dbg$v_trace_all] = dbg$set_optrace (calls_token);
	    END;

	[cancel_trace_branch] :	! CANCEL TRACE/BRANCH
	    BEGIN

	    ! Set the context bits and cancel branch tracing
	    !
	    dbg$gl_context [dbg$k_cancel] = true;	! dbg$set_optrace cares about 
							! this bit only for CANCEL
	    dbg$gl_context [dbg$k_trce_brch] = true;
	    dbg$gl_runframe [dbg$v_trace_all] = dbg$set_optrace (branch_token);
	    END;

	[cancel_trace_all] :	! CANCEL TRACE/ALL
	    BEGIN

	    ! Set the appropriate context bit and cancel all trace points
	    !
	    dbg$gl_context [dbg$k_all_trace] = true;
	    dbg$gl_context [dbg$k_cancel] = true;
	    dbg$set_optrace (calls_token);
	    dbg$set_optrace (branch_token);
	    dbg$gl_runframe [dbg$v_trace_all] = false;
	    IF NOT dbg$cancel_bpt (-3, .message_vect)
	    THEN
		RETURN sts$k_severe;
	    END;

	[cancel_type_override] : !CANCEL TYPE/OVERRIDE
	    BEGIN
	    dbg$gl_gbltyp = -1;
	    dbg$gw_gbllngth = 0;
	    END;

	[cancel_watch] :	! CANCEL WATCH <ADDR_EXP>
	    BEGIN

	    ! Obtain the address of the entity
	    !
	    addr_exp_desc = .noun_node [dbg$l_noun_value];
	    IF NOT dbg$nget_address (.addr_exp_desc, address [0], type, .message_vect)
	    THEN
		RETURN sts$k_severe;


	    ! Set the appropriate context bit and cancel the watch point.
	    !
	    dbg$gl_context [dbg$k_watch] = true;
	    IF NOT dbg$cancel_bpt (.address [0], .message_vect)
	    THEN
		RETURN sts$k_severe;
	    END;

	[cancel_watch_all] :	! CANCEL WATCH/ALL
	    BEGIN

	    ! Set the appropriate context bit and cancel all breakpoints
	    !
	    dbg$gl_context [dbg$k_all_watch] = true;
	    IF NOT dbg$cancel_bpt (-4, .message_vect)
	    THEN
		RETURN sts$k_severe;
	    END;

	[INRANGE,OUTRANGE] :	! Feature not supported yet
	    BEGIN
	    .message_vect = dbg$nmake_arg_vect (dbg$_notimplan , 1,
						UPLIT BYTE (17, 'full verb support'));
	    RETURN sts$k_severe;
	    END;

	TES;

    RETURN sts$k_success;

    END;		! End of dbg$nexecute_cancel

END				!End of module
ELUDOM
