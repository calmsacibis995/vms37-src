MODULE DBGLST ( IDENT = 'V03-000') =
BEGIN

!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
! FACILITY:	DEBUG
!
!++
! FUNCTIONAL DESCRIPTION:
!	CREATES AND ADDS ITEMS TO A LINKED LIST
!
! Version:	1.02
!
! History:
!	Author:
!		Carol Peters, 28 Oct 1976: Version 01
!
!	Modified by:
!		Mike Candela, 25 Oct 1978	
!		Richard Title, 25 Aug 1981
! Revision history:
!
! 1.01	22-SEP-78	DAR	Deleted require file  LISTEL.
! 1.02	25-OCT-78	MCC	Changed DBG$ADD_ARG to initialize all the
!				command argument list fields with the values found
!				on the semantic stack.
! 3.01	25-AUG-81	RT	Changed DBG$ADD_ARG so that it will also
!				initialize the "val2" field for the TYPE
!				command (if a range is specified, this
!				field will hold the upper line number
!				in the range)
!--

! TABLE OF CONTENTS:
!
FORWARD ROUTINE
	DBG$ADD_ARG,		! CREATES A LINKED LIST OR ADDS A NEW ENTRY TO IT
	DBG$FREE_ARG : NOVALUE;	! FREES A LINKED LIST

!
! REQUIRE FILES:
!

REQUIRE 'src$:dbgprolog.req';
REQUIRE 'SRC$:DBGGEN.REQ';
REQUIRE 'SRC$:BSTRUC.REQ';
REQUIRE 'SRC$:SYSSER.REQ';

EXTERNAL ROUTINE
	DBG$FREEZ,		! GETS A PIECE OF FREE STORAGE
	DBG$FREERELEASE;	! RELEASES FREE STORAGE

EXTERNAL
	DBG$GL_HEAD_LST;	! ADDRESS OF HEAD OF LINKED LIST

OWN
	tail_lst;		! ADDRESS OF TAIL OF LINKED LIST

LITERAL
	DBG_LST		= 0,		! for debugging purposes
	dbg_lst1	= 0;		! diagnostics in free_arg

GLOBAL ROUTINE DBG$ADD_ARG (block_addr_1, block_addr_2) =

!++
! FUNCTIONAL DESCRIPTION:
!	ADDS AN ELEMENT TO A LINKED LIST OR CREATES A LINKED
!	LIST AND INSERTS THE FIRST ELEMENT.
!	THE ADDRESS OF THE HEAD OF THE LIST IS AT DBG$GL_HEAD_LST
!	AND THE ADDRESS OF THE TAIL AT tail_lst.
!	THIS ROUTINE LOADS ALL FIELDS IN THE LIST ELEMENT FROM THE SEMANTIC STACK
!	BEGINNING AT THE LONGWORD AFTER THE POINTER.
!
!
! FORMAL PARAMETERS:
!	BLOCK_ADDR_1	- ADDRESS OF STACK FRAME FROM WHICH TO LOAD LIST ELEMENT
!	BLOCK_ADDR_2	- SAME AS ABOVE, BUT ONLY NEEDED WHEN GIVEN A RANGE
!			  (I.E.  EX A:B)
!			  BLOCK_ADDR_2 is zero when a range is not given.
!			  BLOCK_ADDR_2 is -1 when a range is given for
!			  the TYPE command (this kludge was inserted because
!			  the TYPE command handles ranges differently from
!			  the EXAMINE command.)
!
! IMPLICIT INPUTS:
!	THE HEAD AND TAIL OF THE LINKED LIST.
!	THE LENGTH OF A LIST ELEMENT (LIST_ELEM_LEN).
!
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	THE POINTER TO THE ELEMENT, OR A ZERO IF NO ELEMENT WAS ALLOCATED.
!
! SIDE EFFECTS:
!	THE LIST ELEMENT IS WRITTEN. THE TAIL OF THE LIST IS REWRITTEN.
!	IF THE LIST WAS CREATED, BOTH THE HEAD AND THE TAIL ARE WRITTEN
!	TO THEIR GLOBAL VARIABLE NAMES.
!--

	BEGIN

	MAP
		block_addr_1 : REF BLOCK FIELD(stack_fields),
		block_addr_2 : REF BLOCK FIELD(stack_fields);

	LOCAL
		POINTER;

%IF DBG_LST
%THEN
	$FAO_TT_OUT ('!/expression is !XL', .EXPRESSION);
%FI
	POINTER = DBG$FREEZ (LIST_ELEM_LEN);
	IF .DBG$GL_HEAD_LST EQL 0
	THEN DBG$GL_HEAD_LST = .POINTER
	ELSE LIST_ELEM_FLINK (.tail_lst) = .POINTER;
	LIST_ELEM_FLINK (.POINTER) = 0;
	tail_lst = .POINTER;

	list_elem_exp1  (.pointer)	= .block_addr_1 [stk$v_val1];
	list_elem_type  (.pointer) 	= .block_addr_1 [stk$v_type];
	list_elem_size  (.pointer) 	= .block_addr_1 [stk$v_size];
	list_elem_ext   (.pointer) 	= .block_addr_1 [stk$v_ext];
	list_elem_ref   (.pointer) 	= .block_addr_1 [stk$v_ref];
	list_elem_immed (.pointer) 	= .block_addr_1 [stk$v_immed];
	list_elem_ntptr (.pointer) 	= .block_addr_1 [stk$v_nt_ptr];
	list_elem_index (.pointer) 	= .block_addr_1 [stk$v_index];
	list_elem_offst (.pointer) 	= .block_addr_1 [stk$v_offset];
	list_elem_pos   (.pointer) 	= .block_addr_1 [stk$v_pos];
	list_elem_args  (.pointer) 	= .block_addr_1 [stk$v_args];
	list_elem_fldrf (.pointer)	= .block_addr_1 [stk$v_fldrf];
	list_elem_dot   (.pointer)	= .block_addr_1 [stk$v_dot];
	list_elem_struc (.pointer) 	= .block_addr_1 [stk$v_struc];

	IF .block_addr_2 EQL -1
	THEN
	    ! this only happens for the TYPE command.
	    BEGIN
	    ! for the TYPE command, the upper line in the range has already
	    ! been put at block_addr_1[stk$v_val2]
	    list_elem_exp2 (.pointer) = .block_addr_1[stk$v_val2];
	    RETURN .pointer
	    END;

	IF .block_addr_2 NEQ 0
	THEN
		list_elem_exp2 (.pointer) = .block_addr_2 [stk$v_val1]
	ELSE
		IF .block_addr_1 [stk$v_type] EQL dsc$k_dtype_d
		THEN
			list_elem_exp2 (.pointer) = .block_addr_1 [stk$v_val2]
		ELSE
			list_elem_store (.pointer) = .block_addr_1 [stk$v_val2];
	RETURN .POINTER
	END;

GLOBAL ROUTINE DBG$FREE_ARG : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!	FREES EACH ELEMENT OF A LINKED LIST, AND ZEROES THE
!	POINTER TO THE LIST.  Also looks in each list
!	element for a pointer (STORE) which may also indicate
!	storage which needs to be freed up.  Currently this storage
!	is allocated for quoted strings (ASCII or INSTRUCTION).
!
!	THIS ROUTINE IS INTENDED TO BE CALLED AT THE END OF
!	PROCESSING OF A COMPLETE COMMAND LINE.
!
! CALLING SEQUENCE:
!	DBG$FREE_ARG ()
!
! INPUTS:
!	NONE
!
! IMPLICIT INPUTS:
!	THE HEAD OF THE LINKED LIST.
!	THE LENGTH OF A LIST ELEMENT (LIST_ELEM_LEN).
!	The STORE element which points to associated
!	storage which should be freed up when the
!	list_elem is.
!
! OUTPUTS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NOVALUE
!
! SIDE EFFECTS:
!	THE ELEMENTS OF THE LIST ARE RETURNED TO THE FREE STORAGE POOL.
!--

BEGIN
	LOCAL
		current,
		next;

	! Pick up a pointer to the supposed command arg list.
	! If this pointer is 0, then it is just that the
	! last-executed command did not use an arg list.

	IF (current = .DBG$GL_HEAD_LST) EQL 0
	THEN
		return;

	! Otherwise skip along the list deleting
	! each element of it.

	DO
		BEGIN
		LOCAL
				! If there is auxiliary storage associated
				! with a list_elem, then this storage is
				! the address of a counted string which
				! tells us how large it is.
			cs_ptr : ref vector[,byte];

		! See if there is any storage associated with
		! this list element which needs to be freed up.

		if( (cs_ptr = .list_elem_store(.current)) neq 0 )
		then
			begin
%if dbg_lst1
%then
			$fao_tt_out('free_arg: auxiliary = !XL, bytes = !SB',
				.list_elem_store(.current),.cs_ptr[0]);
%FI
			! Release 1 more byte than the string size indicates
			! since we allocated space for this size byte too.

			dbg$freerelease(.cs_ptr,RST_UNITS(.cs_ptr[0]+1));
			end;

		! Now release the LIST_ELEM itself, having first
		! extracted from it the address of the next one.

		next = .LIST_ELEM_FLINK (.current);
		DBG$FREERELEASE (.current, LIST_ELEM_LEN);
		END
	UNTIL (current = .next) EQL 0;

	! Destroy any trace of the command arg list in preparation
	! for the next input command.

	DBG$GL_HEAD_LST = 0;
END;

END
ELUDOM
