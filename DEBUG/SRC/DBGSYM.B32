MODULE DBGSYM (IDENT = 'V03-000') =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	DEBUG (DBG)
!
! ABSTRACT:
!	This module contains the routines for manipulating the
!	user-defined and global symbols.
!
! ENVIRONMENT:	STARLET, user mode, interrupts disabled.
!
! Version:	1.01
!
! History:
!	Author:
!		Carol Peters, 13 Dec 1976: Version 01
!
!	Modified by:
!		Dale Roedger, 22 Sept 1978
!
! Revision history:
!	1.01	22-SEP-78	DAR	Deleted require file DLLNAM...
!--

FORWARD ROUTINE
	dbg$find_val,			! Lookup symbol given value.
	dbg$define_sym : NOVALUE,	! STORES A USER-DEFINED SYMBOL IN SYMBOL TABLE
	dbg$find_sym;			! FINDS A SYMBOL IN THE SYMBOL TABLE

!
! REQUIRE FILES:
!
REQUIRE 'SRC$:DBGPROLOG.REQ';

REQUIRE 'SRC$:DBGPCT.REQ';
REQUIRE 'SRC$:DBGGEN.REQ';
REQUIRE 'SRC$:BSTRUC.REQ';
REQUIRE 'SRC$:SYSSER.REQ';

EXTERNAL ROUTINE
	dbg$freez,			! ALLOCATES A BLOCK OF FREE STORAGE
	dbg$reg_match;			! matches a string to the register names

EXTERNAL
	dbg$gl_symhead: VECTOR;		! SYMBOL TABLE

BUILTIN
	insque;

LITERAL
	dbg_sym		= 0,		! for debugging purposes
	dbg_sym1	= 0,		! ditto
	dbg_sym2	= 0;		! ditto

GLOBAL ROUTINE dbg$define_sym (string_desc, value) : NOVALUE =

!++
! Functional description:
!	STORES A USER-DEFINED SYMBOL IN THE SYMBOL TABLE, WHICH IS A DOUBLY
!	LINKED LIST. FIRST SEARCHES (IN A BINARY FASHION) THE TABLE TO SEE
!	WHETHER THE SYMBOL EXISTS. If it does not, then
!	THE SYMBOL IS INSERTED, EXCEPT IF NO FREE STORAGE IS LEFT,
!	IN WHICH CASE ANOTHER ERROR MESSAGE IS REPORTED from freez.
!
! Calling sequence:
!	CALLS #2, dbg$define_sym
!
! Inputs:
!	string_desc	- a string descriptor describing the string
!			  representing the symbol.
!	value		- the value to be stored as the equivalent of the
!			  symbol.
!
! Implicit inputs:
!	the head link of the symbol table
!
! Implicit outputs:
!	none
!
! Routine value:
!	novalue
!
! Side effects:
!	The symbol is inserted into the symbol table. The links of
!	the table are appropriately adjusted.
!--

	BEGIN

	MAP
		string_desc : REF BLOCK [, BYTE];

	LOCAL
		pointer;

%IF dbg_sym
%THEN
	$fao_tt_out ('!/defining symbol !AD, value is !XL', .string_desc [dsc$w_length],
		.string_desc [dsc$a_pointer], .value);
%FI

	IF dbg$reg_match (.string_desc) NEQ -1
	THEN SIGNAL (dbg$_redefreg);
	pointer = dbg$find_sym (.string_desc);
	IF .pointer EQL 0
	THEN
		BEGIN

		!++
		! Symbol did not exist. Insert it into
		! the symbol table. First allocate a block of dynamic
		! storage to hold it.
		!--
		pointer = dbg$freez ((.string_desc [dsc$w_length] + 1 + 3) / 4 + overhead_sym - 1);

		!++
		! Space allocated. Insert the new link. Then
		! write the symbol name and value into the new
		! symbol table entry.
		!--
		insque (.pointer, .dbg$gl_symhead);
		ch$move (.string_desc [dsc$w_length], ch$ptr (.string_desc [dsc$a_pointer]),
				ch$ptr (sym_name (.pointer)));
		sym_chcount (.pointer) = .string_desc [dsc$w_length];
		sym_value (.pointer) = .value;
		END
	ELSE
		BEGIN

		!++
		! Symbol already was defined. Just reset the value of
		! the symbol stored in the symbol table.
		!--
		sym_value (.pointer) = .value;
		END;
	END;

GLOBAL ROUTINE dbg$find_val (value, match_flag) =

!++
! Functional description:
!	Searches (in a binary manner) through the doubly-linked symbol
!	table for the name of a symbol which matches the given value.
!	If such a symbol is found, the address of the entry is
!	returned.  Otherwise 0 is returned.
!
!	If match_flag is TRUE, an exact match must be found.
!	Otherwise we return a pointer to the closest symbol.
!
! Calling sequence:
!	CALLS #2, dbg$find_val
!
! Inputs:
!	value		-the key we are to search on
!	match_flag	-TRUE => insist on an exact match,
!			 otherwise, the closest one will do.
!
! Implicit inputs:
!	dbg$gl_symhead, the address of the header link in the symbol table.
!
! Outputs:
!	The address of the symbol entry, or zero, if the name is not found.
!
! Implicit outputs:
!	none
!
! Routine value:
!	an address or zero
!
! Side effects:
!	none
!--

	BEGIN

	LOCAL
		pointer;

%IF dbg_sym1
%THEN
	$fao_tt_out ('looking for symbol whose value is !XL, flag = !XB',
		.value,.match_flag);
%FI

	pointer = .dll_rlink (.dbg$gl_symhead);
	WHILE .pointer NEQ .dbg$gl_symhead
	DO
		BEGIN

%IF dbg_sym2
%THEN
		$fao_tt_out ('symbol "!AD" has value !XL',
		.sym_chcount (.pointer), sym_name (.pointer),sym_value(.pointer));
%FI
		! Look for exact or non-exact match.

		IF( .MATCH_FLAG )
		THEN
			BEGIN
			IF( .SYM_VALUE(.POINTER) EQL .VALUE )
			THEN
				RETURN(.POINTER)
			END
		ELSE
			BEGIN
			$fao_tt_out('non-exact DEFine match not implemented');
			END;
		
		! Go back and look at the next element on the list.

		pointer = .dll_rlink (.pointer);
		END;
	RETURN 0
	END;

GLOBAL ROUTINE dbg$find_sym (string_desc) =

!++
! Functional description:
!	Searches (in a binary manner) through the doubly-linked symbol
!	table for a symbol name. If it is found, the address of the entry
!	is returned. Else a zero is returned.
!
! Calling sequence:
!	CALLS #1, dbg$find_sym
!
! Inputs:
!	string_desc	- the string descriptor of the symbol to find
!
! Implicit inputs:
!	dbg$gl_symhead, the address of the header link in the symbol table.
!
! Outputs:
!	The address of the symbol entry, or zero, if the name is not found.
!
! Implicit outputs:
!	none
!
! Routine value:
!	an address or zero
!
! Side effects:
!	none
!--

	BEGIN

	MAP
		string_desc : REF BLOCK [, BYTE];

	LOCAL
		pointer;

%IF dbg_sym1
%THEN
	$fao_tt_out ('!/looking for symbol "!AD"', .string_desc [dsc$w_length],
			.string_desc [dsc$a_pointer]);
%FI

	pointer = .dll_rlink (.dbg$gl_symhead);
	WHILE .pointer NEQ .dbg$gl_symhead
	DO
		BEGIN

%IF dbg_sym2
%THEN
		$fao_tt_out ('!/matching symbol "!AD"', .sym_chcount (.pointer), sym_name (.pointer));
%FI

		IF ch$eql (.string_desc [dsc$w_length], ch$ptr (.string_desc [dsc$a_pointer]),
				.sym_chcount (.pointer), ch$ptr (sym_name (.pointer)))
		THEN RETURN .pointer
		ELSE pointer = .dll_rlink (.pointer);
		END;
	RETURN 0
	END;

END
ELUDOM
