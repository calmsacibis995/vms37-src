
MODULE DBGNAT (IDENT = 'V03-000') =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	DEBUG
!
! ABSTRACT:
!
!		This module contains the parse and execution networks to support the 
!	the @ filespec command. The method of parsing is that of ATN's. The execution
!	network uses old debugger (version 2) routines.
!
! ENVIRONMENT:	VAX/VMS
!
! AUTHOR:	David Plummer, CREATION DATE: 3/28/80
!
! VERSION :	V02.2-001
!
! MODIFIED BY:
!
!--

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
	DBG$NPARSE_AT_SIGN,		! Indirect command file parse network
	DBG$NEXECUTE_AT_SIGN;		!    "        "      "  execution  "
	

!
! REQUIRE FILES:
!

REQUIRE 'SRC$:DBGPROLOG.REQ';

REQUIRE 'SRC$:DBGGEN.REQ';

!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
	DBG$NFREEZ,			! Allocates dynamic storage
	DBG$NLIST_FREEZ,		! Allocates and lists dynamic storage
	DBG$NSAVE_FILESP,		! saves a file specification string
	DBG$NCIS_ADD,			! Routine to add a node to the cis
	DBG$NCIS_OPENICF;		! Routine to connect an icf


GLOBAL ROUTINE DBG$NPARSE_AT_SIGN (INPUT_DESC, VERB_NODE, MESSAGE_VECT) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Parses an @ filespec command. The @ has already been recognized in the routine
!	dbg$nparse_cmd network. This routine merely aquires the filespec string
!	and causes the noun node ( noun value ) field to point to the filespec which
!	is stored as a counted string in dynamically allocated storage.
!
!
! FORMAL PARAMETERS:
!
!	input_desc -			The present command line input descriptor
!
!	verb_node  -			The already existing command verb node
!
!	message_vect -			The address of a longword to contain the
!					address of a message argument vector
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	On success, the appropriate command execution tree is constructed.
!
!	On failure, a message argument vector is constructed
!
! ROUTINE VALUE:
!
!	An unsigned integer longword completion code
!
! COMPLETION CODES:
!
!	sts$k_severe (4) -		Error in parsing
!
!	sts$k_success (1) -		Successful parse
!
! SIDE EFFECTS:
!
!	None
!
!--

    BEGIN

    MAP
	VERB_NODE : REF dbg$verb_node;

    LOCAL
	NOUN_NODE : REF dbg$noun_node;

    ! Create and link a noun node
    !
    IF NOT dbg$nlist_freez (dbg$k_noun_node_size, noun_node, .message_vect)
    THEN
	RETURN sts$k_severe;

    verb_node [dbg$l_verb_object_ptr] = .noun_node;


    ! Get the filespec
    !
    IF NOT dbg$nsave_filesp (.input_desc, noun_node [dbg$l_noun_value], .message_vect)
    THEN
	RETURN sts$k_severe;

    RETURN sts$k_success;
	
    END;			! End of dbg$nparse_at_sign


GLOBAL ROUTINE DBG$NEXECUTE_AT_SIGN (VERB_NODE, MESSAGE_VECT) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine begins execution of an @ filespec command. That is, a FAB and
!	a RAB are allocated for the indirect command file, and calls are made to
!	version 2 debugger routines to add the file to the command input string
!	and to connect the file.
!
! FORMAL PARAMETERS:
!
!	verb_node -			The command verb node which is the start
!					of the command execution tree
!
!	message_vect -			The address of a longword to contain the
!					address of a message argument vector
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	On failure, a message argument vector is returned
!
! ROUTINE VALUE:	
!
!	An unsigned integer longword completion code
!
! COMPLETION CODES:
!
!	sts$k_success (1) -	Indicates the file was created and connected
!
!	sts$k_severe (4) -	Failure, file not created. Message argument vector returned
!
! SIDE EFFECTS:
!
!	An indirect command file is placed in the command input stream and connected
!
!--

    BEGIN

    BIND
	DEFICF_NAME 	= UPLIT BYTE ('DEBUG.COM'),
	DEFICF_SIZE 	= %CHARCOUNT ('DEBUG.COM');

    MAP
	VERB_NODE 	: REF dbg$verb_node;

    LOCAL
	NOUN_NODE 	: REF dbg$noun_node,		! Command object noun
	FAB_PTR 	: REF $FAB_DECL,		! Pointer to icf FAB
	RAB_PTR 	: REF $RAB_DECL;		! Pointer to icf RAB

    ! Obtain the noun node
    !
    noun_node = .verb_node [dbg$l_verb_object_ptr];


    ! Allocate a FAB and a RAB and initialize them
    !
    IF NOT dbg$nfreez ((fab$c_bln + 3) / %UPVAL, fab_ptr, .message_vect)
    THEN
	RETURN sts$k_severe;

    IF NOT dbg$nfreez ((rab$c_bln + 3) / %UPVAL, rab_ptr, .message_vect)
    THEN
	RETURN sts$k_severe;

    $FAB_INIT (FAB=.fab_ptr, FAC=GET, FNA=.noun_node [dbg$l_noun_value] + 1,
	       FNS=.(.noun_node [dbg$l_noun_value]) <0, 8, 0>,
               DNA=deficf_name, DNS=deficf_size);
    $RAB_INIT (RAB=.rab_ptr, FAB=.fab_ptr);


    ! Place the icf on the command input stream and open it
    !
    IF NOT dbg$ncis_add (.rab_ptr, 0, cis_rab, .message_vect)
    THEN
	RETURN sts$k_severe;

    IF NOT dbg$ncis_openicf (.message_vect)
    THEN
	RETURN sts$k_severe;

    RETURN sts$k_success;

    END;	! End of dbg$nexecute_at

END		! End of module
ELUDOM
