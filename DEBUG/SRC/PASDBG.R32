!
!	File: PASDBG.R32
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
!	Pascal language specific definitions of interest to the entire debugger
!
!	Author:
!		P. Hohensee	Created 07-Jul-1980
!
!	History:
!
!--

!
!			P R I M A R Y   D E S C R I P T O R
!
!	This describes the format of the Pascal-specific fixed part of a
!	primary descriptor
!
!	 3 3 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1
!	 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
!
!	+---------------------------------------------------------------+
!	|                        PAS$PRIM_Size                          |   2
!	+---------------------------------------------------------------+
!	|                      PAS$PRIM_Operations                      |   3
!	+---------------------------------------------------------------+
!	|                     PAS$PRIM_Byte_Address                     |   4
!	+---------------------------------------------------------------+
!	|                      PAS$PRIM_Bit_Offset                      |   5
!	+---------------------------------------------------------------+
!	|                        PAS$PRIM_Frame                         |   6
!	+---------------------------------------------------------------+
!	|                                               | PAS$PRIM_Kind |   7
!	+---------------------------------------------------------------+
!	|                       PAS$PRIM_Symbol                         |   8
!	+---------------------------------------------------------------+
!	|                        PAS$PRIM_Ident                         |   9
!	+---------------------------------------------------------------+
!
!
FIELD
    PAS$PRIM_Desc_Fields =
	!
	! Fixed primary descriptor fields
	!
        SET
        PAS$PRIM_Size =		[2, L_],	! number of bits in the object
        PAS$PRIM_Byte_Size =	[2, V_(3, 29)],	! number of whole bytes in the object
	PAS$PRIM_Bit_Size =	[2, V_(0, 3)],	! number of excess bits (0..7) in the object
        PAS$PRIM_Operations =	[3, L_],	! number of operations
	PAS$PRIM_Address =	[4, A_],	! Address block as a whole
	PAS$PRIM_Byte_Address =	[4, L_],	! Byte address
	PAS$PRIM_Bit_Offset =	[5, L_],	! Bit Offset
	PAS$PRIM_Frame =	[6, L_],	! Frame pointer for frame in which reference is defined
	PAS$PRIM_Kind =		[7, B0_],	! Value kind as returned by DBG$STA_SYMVALUE
	PAS$PRIM_Symbol =	[8, L_],	! Symbol Table entry address. Non-zero only if PAS$PRIM_Ident is zero
        PAS$PRIM_Ident =	[9, L_]		! Debugger RST pointer to name entry
        TES ;

LITERAL
	PAS$S_PRIM_Entry	= 7,	! Size in longwords of Pascal-Specific fixed portion of primary descriptor
	PAS$S_PRIM_Size		= PAS$S_PRIM_Entry + DBG$K_Dhead_Size,

	PAS$S_PRIM_Block_Size	= 50;	! Number of longwords allocated for a block of non-static
					! Primary Descriptor Storage (that part of the descriptor that
					! follows the static part just described)
					! Each block allocated actually contains one more than
					! PAS$S_PRIM_Block_Size longwords, the extra longword being a
					! pointer to the next block

MACRO
	PAS$_Primary_Desc =
		BLOCK	[PAS$S_PRIM_Size]
			FIELD(DBG$DHEAD_FIELDS, PAS$PRIM_Desc_Fields) %;

!
!			V A L U E   D E S C R I P T O R
!
!	The Pascal Value Descriptor comes in two flavors, a transient one
!	which is discarded after command execution, and a permanent one,
!	which may be kept around by the debugger after command execution.
!	The Transient Descriptor contains a pointer to a 'large', 'dynamic'
!	object's value, while the Permanent Descriptor contains either the
!	bit pattern that represents the value of a 'small' object, or a
!	pointer to a 'large', 'static' object. The latter is called a
!	Permanent Address Descriptor.
!
!	The definition of 'small' is equivalent to the Pascal definition
!	of scalar, which implies that a 'large' value is any aggregate
!	value. The largest 'small' value is currently H-Floating.
!	A 'static' value is one whose address or value is constant over
!	the life of the image being debugged, while a 'dynamic' value is
!	anything else. Examples of static values are named constants and
!	program level global variables.	Examples of 'dynamic' values are
!	variables allocated on the stack or heap.
!
!	The Kernal Debugger makes the distinction between Transient and
!	Permanent descriptors in the header block (not shown here), while
!	the Pascal-specific routines make the distinction between Permanent
!	and Permanent Address descriptors.
!
!	The debugger makes the value of '\' (last value) undefined when
!	a transient descriptor results from an expression evaluation
!
!	 3 3 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1
!	 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
!
!	+---------------------------------------------------------------+
!	| PAS$VAL_Dtype |               | PAS$VAL_Flags |PAS$VAL_Srm_Type_Code|  2
!	+---------------------------------------------------------------+
!	|                         PAS$VAL_Type				|  3
!	+---------------------------------------------------------------+
!	|                         PAS$VAL_Size				|  4
!	+---------------------------------------------------------------+
!	|                      PAS$VAL_Type_Entry                       |  5
!	+---------------------------------------------------------------+
!	|PAS$VAL_Byte_Address or PAS$VAL_Value or PAS$VAL_Value_Address |  6
!	+---------------------------------------------------------------+
!	|                      PAS$VAL_Bit_Address                      |  7
!	+---------------------------------------------------------------+
!	|                                                               |  8
!	+---------------------------------------------------------------+
!	|								|  9
!	+---------------------------------------------------------------+

FIELD
    PAS$VAL_Desc_Fields	=
	SET

	PAS$VAL_Srm_Type_Code	= [2, B0_ ],		! SRM Type Code: Zero if no Pascal equivalent
	PAS$VAL_Flags		= [2, B1_],		! Flags byte
		PAS$VAL_Permanent_Address	= [2, V1_(0)],	! Set if Permanent Address Descriptor
		PAS$VAL_Depositable		= [2, V1_(1)],	! Set if the descritor contains the object's address
							! (either Transient or Permanent Address)
							! This bit is redundant in that the expression:
							! (DBG$B_Dhead_Type EQL DBG$K_V_ValueDesc) OR PAS$VAL_Permanent_Address
							! is equivalent to: PAS$VAL_Depositable

	PAS$VAL_Dtype		= [2, B3_],		! Pascal Data Type (used for ordinal and real types)
	PAS$VAL_Type		= [3, L_ ],		! Pointer to RST entry for type of object
							! Zero if not needed (e.g., PAS$VAL_Srm_Type_Code non-zero)
	PAS$VAL_Size		= [4, L_ ],		! Bit size of value
	PAS$VAL_Byte_Size	= [4, V_(3, 29)],	! Number of whole bytes in the value
	PAS$VAL_Bit_Size	= [4, V_(0, 3)],	! Number of excess bits in the object (0..7)
	PAS$VAL_Type_Entry	= [5, L_ ],		! Address of a Type Table entry
							! This field can be used with a permanent
							! descriptor only if the table entry
							! is in static storage (e.g., NIL)

	!
	! Transient or Permanent Address Value Descriptor. Pointer to the value
	!
	PAS$VAL_Byte_Address	= [6, L_ ],	! Byte Address of object
	PAS$VAL_Bit_Address	= [7, L_ ],	! Bit offset from Byte Address of object (0..7)

	!
	! Permanent Value Descriptor. Literal Value
	!
	PAS$VAL_Value		= [6, L_ ],	! First longword of object value
	PAS$VAL_Value_Address	= [6, A_ ]	! Address of literal value (used to access objects
						! whose size is > 1 longword and <= 4 longwords)

	TES;

LITERAL
	PAS$S_VAL_Transient_Entry	= 6,	! Size in longwords of Pascal-Specific Transient
						! Value Descriptor
	PAS$S_VAL_Perm_Entry		= 8,	! Size in longwords of Pascal-Specific Permanent
						! Value Descriptor

	PAS$S_VAL_Transient_Size	= PAS$S_VAL_Transient_Entry + DBG$K_Dhead_Size,
	PAS$S_VAL_Perm_Size		= PAS$S_VAL_Perm_Entry + DBG$K_Dhead_Size,

	PAS$S_VAL_Size			= MAX(PAS$S_VAL_Transient_Size, PAS$S_VAL_Perm_Size);

MACRO
	PAS$_Transient_Value_Desc	=
		BLOCK	[PAS$S_VAL_Transient_Size]
			FIELD(DBG$DHEAD_FIELDS, PAS$VAL_Desc_Fields) %,

	PAS$_Perm_Value_Desc		=
		BLOCK	[PAS$S_VAL_Perm_Size]
			FIELD(DBG$DHEAD_FIELDS, PAS$VAL_Desc_Fields) %,

	PAS$_Value_Desc			=
		BLOCK	[PAS$S_VAL_Size]
			FIELD(DBG$DHEAD_FIELDS, PAS$VAL_Desc_Fields) %;



!
!	PASDBG.R32 LAST LINE
