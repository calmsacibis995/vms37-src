MODULE DBGMAC (IDENT = 'V03-000') =
BEGIN

!++
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
! FACILITY:
!	VAX INSTRUCTION DECODER.
!
! Version:	1.06
!
! History:
!	Author:
!		KEVIN PAMMETT, 2-MAR-77: Version 01
!
!	Modified by:
!		MCC	Mike Candela
!		JBD	Bruce Dawson
!
! Revision history:
!	1.01	25-SEP-78	MCC	Deleted require file SYSLIT
!	1.5	27-Jun-79	JBD	Made DBG$GB_OPINFO use the new
!					OPCODE_TBL structure.
!	1.02	15-Aug-79	JBD	Fixed bug that made short
!					literals look like long ones.
! 1.03	4-Oct-79	JBD	Replaced DISPLACEMENT. Now I can understand it.
! 1.04	23-Oct-79	JBD	CASE instructions were failing when base and
!				limit were zero. Now they don't.
! 1.05	28-Nov-79	JBD	Fixed sign extension bug in DISPLACEMENT. Also
!				output message when literals over a longword 
!				are encountered.
!				
! 1.06  21-apr-80	ala	Changed output buffer to dbg$pv_to_cs to
!				be 256 bytes long.
!--

!
! TABLE OF CONTENTS:
!
FORWARD ROUTINE
	DBG$INS_DECODE,		! DECODE AN INSTRUCTION.
	ins_operand,		! PRINT OUT AN OPERAND REFERENCE.
	DISPLACEMENT,		! ROUTINE TO EXTRACT DISPLACEMENTS FROM INSTRUCTIONS.
	BRANCH_TYPE,		! DECIDE AND HANDLE BRANCH TYPE addressing.
	INS_CONTEXT,		! DECIDE WHAT CONTEXT THIS INSTRUCTION IS.
	PUT_REG : NOVALUE;		! PRINT A REGISTER REFERENCE.

!+
! Require and Library files:
!-
REQUIRE 'SRC$:DBGPROLOG.REQ';

REQUIRE 'SRC$:DBGPCT.REQ';
REQUIRE 'SRC$:DBGGEN.REQ';		! REQUIRE FILE FOR DEBUG FACILITY.
REQUIRE 'SRC$:VAXOPS.REQ';		! LITERALS AND MACROS RELATED TO OPCODES
REQUIRE 'SRC$:SYSSER.REQ';		! the diagnostic facility.

EXTERNAL ROUTINE
	DBG$CONV_R_50,			! convert from RAD50
	DBG$FAO_PUT : NOVALUE,		! FORMATTED I/O TO TERMINAL.
	DBG$OUT_NUM_VAL : NOVALUE,	! Output values as numerics.
	DBG$OUT_SYM_VAL : NOVALUE,	! Output values as numerics or symbols.
	DBG$OUT_PUT : NOVALUE,		! Flush the output buffer.
	DBG$READ_ACCESS;		! Probe for read accessability.

EXTERNAL
	DBG$CP_OUT_STR : REF VECTOR[,BYTE],	! POINTS TO CURRENT OUTPUT BUFFER.
	DBG$GB_OPINFO : OPCODE_TBL,
	DBG$GB_MOD_PTR : REF VECTOR[,BYTE],	! MODE DATA STRUCTURE POINTER.
	DBG$GL_BUF_SIZ,				! Holds character count of output buffer
	DBG$GL_LAST_VAL;			! BRANCH INSTRUCTIONS OVERWRITE THIS SO THAT
						! THE USER CAN "EX \" TO TRACE THRU A BRANCH.

!+
! EQUATED SYMBOLS:
!-

LITERAL
	DBG_MAC		= 0,	! Diagnostics for CASE instructions
	DBG_MAC1	= 0;	! Diagnostics for DISPLACEMENT

LITERAL
	ROUND_BRACKETS	= 0,	! These are all flag parameters to
	SQUARE_BRACKETS	= 2,	!    the routine 'PUT_REG'.
	NO_BRACKETS	= 1;

MACRO
	PUTC(C)	= ! PUT 1 CHAR INTO THE OUTPUT BUFFER
		BEGIN
		IF .DBG$CP_OUT_STR NEQ 0
		THEN
		    BEGIN
		    (.DBG$CP_OUT_STR)<0,8> = C;
		    DBG$CP_OUT_STR = .DBG$CP_OUT_STR + 1;
		    DBG$GL_BUF_SIZ = .DBG$GL_BUF_SIZ + 1;
		    END;
		END %;

!+
! OWN storage.
!-

OWN
	CASE_SIZE,		! Number of operands in CASE instruction.
	CASE_FLAG;		! Allows us to special-case CASE instructions.


GLOBAL ROUTINE DBG$INS_DECODE( STREAM_PNTR, OUTPUT_BUFFER ) =

!++
! 
! FUNCTIONAL DESCRIPTION:
!	THIS ROUTINE IS THE 'ENTRY POINT' FOR THIS MODULE.
!
!	THIS ROUTINE EXAMINES A BYTE STREAM THAT IT IS PASSED
!	A POINTER TO, AND TRIES TO OUTPUT WHAT INSTRUCTIONS
!	THIS CORRESPONDS TO SYMBOLICALLY.
!
! FORMAL PARAMETERS:
!	STREAM_PTNR	- A BYTE POINTER TO THE SUPPOSED INSTRUCTION
!			  STREAM.
!	OUTPUT_BUFFER	-This is a pointer to the beginning
!			 of the current output buffer.
!			-If this is 0, no output is done and
!			 no errors are signaled from these routines.
!
! IMPLICIT INPUTS:
!	DBG$GB_OPINFO	- DATA VECTOR THAT CONTAINS THE INSTRUCTION
!			  MNEMONICS AND RELATED INFORMATION.
!	DBG$CP_OUT_STR	- POINTS INTO CURRENT OUTPUT BUFFER.
!	DBG$GL_BUF_SIZ	- holds character count in output buffer
!	CASE_SIZE	- Number of operands in CASE instr.
!
! IMPLICIT OUTPUTS:
!	None.
!
! ROUTINE VALUE:
!	THIS ROUTINE RETURNS THE ADDRESS OF THE
!	BEGINNING OF THE NEXT INSTRUCTION.  
!
!	If "output_buffer" is zero this routine returns
!	FALSE if it fails to decode the instruction.
!
!
! SIDE EFFECTS:
!	-An error message is produced if we are unable to
!	 read the supposed instruction.
!	-THE CURRENT OUTPUT BUFFER POINTER IS INCREMENTED,
!	 THE CHARACTER REPRESENTATION OF THE INSTRUCTION
!	 HAVING BEEN STUFFED INTO THE BUFFER.
!	-The count of the output buffer is also incremented.
!--

	BEGIN

	MAP
		STREAM_PNTR : REF VECTOR[,BYTE];

	LOCAL
		STREAM_PTR : REF VECTOR[,BYTE],	! POINTS TO THE INSTR STREAM.
		OPCODE;				! INSTRUCTION OPCODE.
	BIND
		STREAM_SIGNED = STREAM_PTR : REF VECTOR[,BYTE,SIGNED];

	STREAM_PTR = .STREAM_PNTR;

	CASE_FLAG = 0;			! We have to special-case CASE instructions.

	IF .OUTPUT_BUFFER EQL 0
	THEN
	    DBG$CP_OUT_STR = 0;		! Set output pointer to zero if no output desired

	DBG$READ_ACCESS (.STREAM_PTR, 1); ! See if we can read the opcode byte.

	!  PICK UP THE OPCODE AND IT CHECK FOR VALIDITY.

	OPCODE = .STREAM_PTR[0];
	IF .OPCODE EQL %X'FD'	! Check to see if 2 byte opcode
	THEN
		BEGIN		! It is. Get the next byte of opcode.
		OPCODE = .STREAM_PTR[1]^8 + .OPCODE;
		STREAM_PTR = .STREAM_PTR + 1;
		END;
	IF (.DBG$GB_OPINFO[.OPCODE, OP_NUMOPS] EQL NOT_AN_OP)
	THEN		! WE DON'T RECOGNIZE THE OPCODE.
	    BEGIN
	    IF .OUTPUT_BUFFER NEQ 0
	    THEN
		SIGNAL (DBG$_NOINSTRAN, 1, .STREAM_PTR);

	    RETURN (FALSE);
	    END;

	!+
	! Bump the instruction pointer up past the opcode,
	! and output the character sequence which 
	! corresponds to it.
	!-
	STREAM_PTR = .STREAM_PTR + 1;

	IF .OUTPUT_BUFFER NEQ 0
	THEN
	    BEGIN
	    DBG$CONV_R_50( .DBG$GB_OPINFO[ .OPCODE, OP_NAME], .DBG$CP_OUT_STR );
	    DBG$CP_OUT_STR = .DBG$CP_OUT_STR + OP_CH_SIZE;
	    DBG$GL_BUF_SIZ = .DBG$GL_BUF_SIZ + OP_CH_SIZE;
	    !+
	    ! MAKE SURE THAT THIS IS AN OPCODE WHICH WE HAVE THE
	    ! REQUIRED INFORMATION ABOUT.  SO FAR, THIS ONLY MEANS
	    ! THAT WE HAVE TO KNOW HOW MANY OPERANDS TO EXPECT.
	    ! Also put out two spaces since some opcodes
	    ! take up the full OP_CH_SIZE field printed, above.
	    !-
	    DBG$FAO_PUT( .output_buffer, UPLIT( %ASCIC '  ' ));
	    END;

	! See if this is one of the CASE instructions.

	IF( .OPCODE EQL OP_CASEB OR .OPCODE EQL OP_CASEW OR .OPCODE EQL OP_CASEL )
	THEN
		CASE_FLAG = -1;

	! LOOP, ENCODING HOW EACH OPERAND IS REFERENCED.

	INCR I FROM 1 TO .DBG$GB_OPINFO[ .OPCODE, OP_NUMOPS]
		DO
		BEGIN
		STREAM_PTR = ins_operand (.output_buffer, .STREAM_PTR, 
    						.I, .OPCODE );

		IF( .I NEQ 0 AND .I LSS .DBG$GB_OPINFO[ .OPCODE, OP_NUMOPS] )
		THEN
			PUTC(%C',');
		END;

	! The reason for special-casing CASE instructions is because
	! they along are not simply made up of OPCODE followed by a
	! fixed number of operands.  They are followed by N+1 words
	! (offsets), where N is the last operand of the instruction.
	! We can therefore only do this if the operand was
	! given as a literal.  If this is true, we simply
	! print out these offsets.

	IF( .CASE_FLAG NEQ 0 )
	THEN
		BEGIN
		BIND
					! Set up so that we can extract
					! words from the instruction stream.
			CASE_OFFSETS = STREAM_PTR : REF VECTOR[,WORD,SIGNED];

		! Extract and print out the case offsets.

		INCR I FROM 0 TO .CASE_SIZE
			DO
			BEGIN

			! Make sure we can access the word.  This
			! routine does not return if no access was
			! granted.

			DBG$READ_ACCESS(CASE_OFFSETS[.I], 2);

%IF DBG_MAC
%THEN
			$FAO_TT_OUT('case offset !SL = !XW',.I,.case_offsets[.I]);
%FI
			! Output the operand in the same way as
			! we would a branch operand.  First,
			! see if we should start a new output buffer.

			IF( .output_buffer NEQ 0 )
			THEN
				BEGIN
		
				! Flush the current buffer and set up to start a new one.
		
				DBG$OUT_PUT(.output_buffer);
				DBG$CP_OUT_STR = .output_buffer+1;
				DBG$GL_BUF_SIZ = 0;
				DBG$FAO_PUT( .output_buffer, 
    					UPLIT( %ASCIC '!_!_' ));
				dbg$out_sym_val( 
    					.stream_ptr + .case_offsets[.i],
						 LONG_LENGTH,
						 NO_OVERRIDE, .output_buffer
					        );

				! For all but the last one, put
				! a ',' after the operand.

				IF( .I NEQ .case_SIZE )
				then
					dbg$fao_put( .output_buffer, 
    						UPLIT( %ASCIC ','));
				END;
			END;

		! Finally, update the instruction-stream pointer.

		STREAM_PTR = .STREAM_PTR + ((.CASE_SIZE+1)*2);
		END;

	!  RETURN A POINTER TO THE BEGINNING OF THE NEXT INSTRUCTION.

	RETURN( .STREAM_PTR );
END;


ROUTINE ins_operand( out_buf, STREAM_PTR, INDEX, OPCODE ) =

!++
! FUNCTIONAL DESCRIPTION:
!	PRINT OUT A REFERENCE TO AN INSTRUCTION OPERAND.
!
! WARNING:
!	1) THERE IS CODE IN THE 'DEFERRED' MACRO WHICH WILL CEASE
!	   TO WORK WHEN/IF WE CHANGE THE REPRESENTATION OF TRUE
!	   AND FALSE.
!	2) THE LOCAL MACROS, BELOW, CHECK FOR THE INDICATED ADDRESSING
!	   MODES ONLY GIVEN THAT THEY APPEAR IN THE CODE WHERE THEY
!	   DO - IE, THE CHECKS TAKE ADVANTAGE OF WHAT WE KNOW ABOUT
!	   WHICH CASES WE HAVE ALREADY ELIMINATED, ETC.
!
! FORMAL PARAMETERS:
!	out_buf	   - The address of the output buffer
!	STREAM_PTR - A BYTE POINTER TO THE FIRST BYTE OF THE INSTRUCTION
!		     STREAM WHICH BEGINS THE REFERENCE TO THIS OPERAND.
!		     THIS BYTE IS WHAT WE REFER TO AS THE DOMINANT MODE.
!	INDEX	   - ORDINAL OF WHICH OPERAND WE ARE ON.  THIS IS NEEDED TO 
!		     DECIDE THE 'CONTEXT' FOR THIS OPERAND IF PC-RELATIVE
!		     ADDRESSING MODE IS USED.
!	OPCODE		- The opcode we are currently working on.
!			 (This parameter has already been validated.)
!
! IMPLICIT INPUTS:
!	None.
!
! IMPLICIT OUTPUTS:
!	THE REFERENCE TO THE CURRENT OPERAND IS STUFFED INTO THE
!	CURRENT OUTPUT BUFFER IN MACHINE-LANGUAGE FORMAT.
!
! ROUTINE VALUE:
!	-THE INSTRUCTION-STREAM BYTE POINTER, WHICH WE HAVE
!	INCREMENTED TO REFLECT HOW MUCH OF THE INSTRUCTION
!	STREAM WE HAVE 'EATEN UP', IS PASSED BACK.  THIS
!	POINTER SHOULD POINT TO THE BEGINNING OF EITHER THE
!	NEXT INSTRUCTION, OR THE NEXT OPERAND REFERENCE,
!	DEPENDING ON HOW MANY OPERANDS THE CURRENT INSTRUCTION HAS.
!
! SIDE EFFECTS:
!	IF WE DON'T EAT UP EXACTLY AS MUCH OF THE INSTRUCTION
!	STREAM AS WE SHOULD, THE POINTER WE RETURN TO THE
!	SUPPOSED NEXT INSTRUCTION WILL BE WRONG.  THIS 
!	WILL CAUSE A COMPLETELY MISLEADING 'INSTRUCTION'
!	TO BE OUTPUT ON THE NEXT CALL TO THIS ROUTINE.
!--
	BEGIN

	! LOCAL MACROS USED TO CHECK FOR THE INDICATED ADDRESSING MODES.
	! SEE 'WARNING:', ABOVE.

	MACRO
		REGISTR(MODE)	! REGISTER MODE ADDRESSING.
			= (MODE EQL 5) %,
		DEFERRED(MODE)  ! THOSE WHICH BEGIN WITH '@' ARE
				!  9 - @(RN)+,
				!  B - @BYTE(RN),
				!  D - @WORD(RN),
				!  F - @LONG(RN),
				! OR ANY OF THESE + INDEXING.
				! THE THING WHICH IS COMMON TO ONLY THESE
				! MODES IS THAT THEY ALL HAVE THE SIGN
				! BIT SET AND ARE ODD!
			= ( MODE LSS 0 AND MODE ) %,

		AUTODEC(MODE)	! SEE IF MODE IS AUTO DECREMENT.
				! THIS CHECK IS RIGHT FROM SRM.
			= (MODE EQL 7) %,

		AUTOINC(MODE)	! MODE IS AUTO INCREMENT
				! THIS CHECK DEPENDS UPON THE FACT THAT
				! WE EXTRACTED THE MODE WITH SIGN EXTENSION,
				! AND THAT WE HAVE ALREADY ELIMINATED
				! MANY OF THE OTHER POSSIBILITIES.
			= (MODE LSS 0) %;

	MAP
		STREAM_PTR : REF BLOCK[,BYTE];
	LOCAL
		NEW_STR_PTR,	! NEW STREAM POINTER.
		FLAG,		! INDICATES WHICH TYPE OF DISPLACMENT WE HAVE.
		DISPL,		! THE ACTUAL DISPLACEMENT.
		DISP_SIZE,	! THE SIZE, IN BYTES, OF A DISPLACEMENT.
		DOM_OPRND,	! OPERAND WHICH WE EXTRACT FROM THE
				!  DOMINANT MODE BYTE.  IT MAY BE RN, 
				!  RX, OR A LITERAL.  (SRM NOTATION).
		DOM_MODE;	! THE PRIMARY ADDRESSING MODE COMES FROM
				!    THIS DOMINANT BYTE AS WELL.

	! WE HAVE TO CONSIDER THE POSSIBILITY OF
	! SO-CALLED 'BRANCH TYPE' ADDRESSING FIRST
	! BEFORE ANYTHING ELSE BECAUSE OTHERWISE YOU CANNOT
	! DIFFERENTIATE SHORT LITERAL FROM BYTE DISPLACEMENT
	! BRANCHING.

	IF( (NEW_STR_PTR = BRANCH_TYPE( .out_buf, .STREAM_PTR, .INDEX, 
    				.OPCODE )) NEQ 0 )
	THEN
		! SUCCESS!  We're done.
		RETURN( .NEW_STR_PTR );

	! See that we can access atleast the opcode.

	DBG$READ_ACCESS ( .STREAM_PTR, 1 );

	! EXTRACT THE NEEDED FIELDS FROM THE FIRST BYTE OF
	!  THE OPERAND SPECIFIER.  WE EXTRACT SOME FIELDS
	!  WITH SIGN EXTENSION SIMPLY BECAUSE THAT MAKES
	!  MAKING VARIOUS TESTS MORE CONVENIENT.

	DOM_MODE = .STREAM_PTR[ AMODE ];
	DOM_OPRND = .STREAM_PTR[ AREG ];

	! TAKE SPECIAL ACTION FOR INDEXING MODE.

	IF( .DOM_MODE EQL INDEXING_MODE )
	THEN
		BEGIN
		! HANDLE INDEXING MODE RECURSIVELY.

		STREAM_PTR = ins_operand ( .out_buf, 
    				STREAM_PTR[ NEXT_FIELD(1) ], .INDEX, .OPCODE );

		PUT_REG( .out_buf, .DOM_OPRND, SQUARE_BRACKETS );
		RETURN( .STREAM_PTR );
		END;

	! SIMPLE MODES ARE EASIER:

	! FIRST SEE IF THERE WILL BE A LITERAL OR DISPLACEMENT
	!  IN THE OPERAND REFERENCE.

	STREAM_PTR = DISPLACEMENT ( .STREAM_PTR, FLAG, DISPL, DISP_SIZE, .INDEX, .OPCODE );

	! BEGIN CHECKING FOR THE ADDRESSING MODES WHICH BEGIN
	! WITH SPECIAL CHARACTERS SINCE WE HAVE TO PRINT THEM
	! FIRST.  WE TRY TO HANDLE SIMILAR CASES WITH THE SAME
	! CODE, GETTING THE DIFFERENCES 'OUT OF THE WAY' FIRST.

	IF( DEFERRED( .DOM_MODE ) )
	THEN
		PUTC(%C'@')
	ELSE
		IF( AUTODEC( .DOM_MODE ) )
		THEN
			PUTC(%C'-');

	! NEXT WE HAVE TO CONSIDER DISPLACEMENTS OR LITERALS.
	! WHETHER OR NOT THIS IS THE CASE HAS ALREADY BEEN 
	! DETERMINED IN THE CALL TO 'DISPLACEMENT', ABOVE.

	IF( .FLAG )
	THEN
		BEGIN
		! THERE IS A LITERAL, SO PRINT IT.
		! THE FLAG VALUE RETURNED BY DISPLACEMENT()
		! DISTINGUISHES WHEN THERE SHOULD BE A '#',
		! AS OPPOSED TO WHEN THE NUMBER IS ACTUALLY
		! A DISPLACEMENT OFF A REGISTER.

		IF( .FLAG GTR 0 )
		THEN
			BEGIN
			PUTC(%C'#');

			! EXCEPT FOR @# MODE, Make .DOM_OPRND NEQ PC_REG so that
			! later only checking that will also tell us
			! that .FLAG is GTR 0.

			IF( NOT DEFERRED( .DOM_MODE ) )
			THEN
				DOM_OPRND = PC_REG +1;

			! If this is a case instruction, we store the value
			! of this 3rd-arg literal operand away for later use.

			IF( .CASE_FLAG NEQ 0 AND .index EQL 3 )
			THEN
				CASE_SIZE = .DISPL;
			END
		ELSE
			BEGIN
			OWN
				DISPL_ID : VECTOR[4,BYTE]
				INITIAL( BYTE( 'B', 'W', '?', 'L') );

			! Print an indication of the displacement size.

			IF .DBG$CP_OUT_STR NEQ 0
			THEN
			    DBG$FAO_PUT( .out_buf, UPLIT(%ASCIC '!AD^'), 
    					1, DISPL_ID[ .DISP_SIZE -1 ] );
			END;

		! Output here is always "displ(reg)", for non-PC 
		! displacments, and just "effective", otherwise. 

		IF( .FLAG LSS 0  AND  .DOM_OPRND EQL PC_REG )
		THEN
			BEGIN
			! Pick up the displacement and make
			! it into an effective address.

			DISP_SIZE = 4;
			DISPL = .DISPL + .STREAM_PTR;
			END;

		! Output either of the two forms described above.

		IF( .DOM_OPRND EQL PC_REG )
		THEN
			BEGIN
			IF .DBG$CP_OUT_STR NEQ 0
			THEN
			    DBG$OUT_SYM_VAL( .DISPL, LONG_LENGTH, 
    						NO_OVERRIDE, .out_buf)
			END
		ELSE
			BEGIN

			! Literals or real (non-PC) displacement modes.

			IF .DBG$CP_OUT_STR NEQ 0
			THEN
			    DBG$OUT_NUM_VAL ( .out_buf, .DISPL, .DISP_SIZE, 
    						NO_OVERRIDE);

			IF( .FLAG LSS 0 )
			THEN
				PUT_REG( .out_buf, .DOM_OPRND, 
    						ROUND_BRACKETS );
			END;
		END
	ELSE
		! NO LITERAL OR DISPLACEMENT -> WE MUST HAVE SOME TYPE OF
		! REGISTER REFERENCE.  SORT OUT THE FEW CASES AND PRINT THEM.

		IF( REGISTR( .DOM_MODE ) )
		THEN
			PUT_REG( .out_buf, .DOM_OPRND, NO_BRACKETS )
		ELSE
			BEGIN
			PUT_REG( .out_buf, .DOM_OPRND, ROUND_BRACKETS );
			IF( AUTOINC( .DOM_MODE ) )
			THEN
				PUTC(%C'+');
			END;

	! RETURN THE NEW BYTE STREAM POINTER.

	RETURN( .STREAM_PTR );
	END;


ROUTINE BRANCH_TYPE( outbufr, STREAM_PTR, INDEX, OPCODE ) =

!++
! FUNCTIONAL DESCRIPTION:
!	DECIDE IF THE CURRENT OPERAND IS USING BRANCH TYPE
!	ADDRESSING.  IF SO, PRINT OUT THE REFERENCE AND
!	LOOK AFTER ALL THE DETAILS.  OTHERWISE RETURN 0
!	AND LET SOMEONE ELSE HANDLE IT.
!
! FORMAL PARAMETERS:
!	STREAM_PTR	- A POINTER TO THE CURRENT DOMINANT
!			  MODE BYTE.
!	INDEX		- WHICH OPERAND (ORDINAL) WE'RE WORKING ON.
!	OPCODE		-The opcode we are currently working on.
!			 (This parameter has already been validated.)
!	outbfr		- The address of the output buffer.
!
! IMPLICIT INPUTS:
!	DBG$GB_OPINFO - THE OPCODE INFORMATION TABLE.
!	DBG$CP_OUT_STR - The pointer to the output string, if zero don't 
!			  output.
!
! IMPLICIT OUTPUTS:
!	IF THE CURRENT OPERAND IS A REFERENCE USING BRANCH TYPE
!	ADDRESSING, AND IF DBG$CP_OUT_STR IS NON-ZERO, THIS REFERENCE
!	IS PRINTED.  OTHERWISE THE ROUTINE DOES NO OUTPUT WHATSOEVER.
!
! ROUTINE VALUE:
!	0	 - IF THE CURRENT OPERAND IS NOT A BRANCH TYPE 
!		(i.e. If the calling routine should continue on
!		 further to decode the instruction.)
!	non-zero - The address of the next instruction is returned.
!
! SIDE EFFECTS:
!	NONE.
!--
	BEGIN
	LOCAL
		N_OPS,		! NUMBER OF OPERANDS FOR CURRENT OPCODE
		DISP_SIZE,	! SIZE OF BRANCH OPERAND, IN BYTES.
		DISPL;		! THE ACTUAL BRANCH DISPLACEMENT.

	! THERE IS NO POINT IN EVEN CONSIDERING BRANCH TYPE
	! ADDRESSING UNLESS WE'RE ON THE LAST OPERAND FOR
	! THIS INSTRUCTION.

	IF( (N_OPS = .DBG$GB_OPINFO[ .OPCODE, OP_NUMOPS ]) NEQ .INDEX)
	THEN
		RETURN (0);

	! FURTHERMORE, SINCE WE REALLY USE THE SAME BITS IN
	! THE OPINFO TABLE FOR 2 PURPOSES, (NAMELY OP_BR_TYPE
	! AND OP_CONTEXT( MAXOPRNDS ) ), WE CAN NOT EVEN LOOK
	! FOR BRANCH INFORMATION UNLESS THIS OPCODE HAS LESS
	! THAN THE MAXIMUM NUMBER OF OPERANDS.

	IF( .INDEX EQL MAXOPRNDS )
	THEN
		RETURN (0);

	! NOW WE KNOW WE CAN TAKE THE OP_BR_TYPE FIELD LITERALLY.
	! IT CONTAINS THE NUMBER OF BYTES USED FOR THE BRANCH
	! DISPLACEMENT.  0 IN THIS FIELD INDICATES THAT
	! THIS OPCODE HAS NO BRANCH TYPE OPERANDS.

	IF( (DISP_SIZE = .DBG$GB_OPINFO[ .OPCODE, OP_BR_TYPE ]) EQL NO_BR )
	THEN
		RETURN (0);

	DBG$READ_ACCESS ( .STREAM_PTR, .DISP_SIZE );	! See if we can read the displacement.

	!+
	! SUCCESS!  WE HAVE DISCOVERED A CASE OF BRANCH TYPE ADDRESSING.
	! HANDLE THIS BY SIMPLY EXTRACTING THE FIELD, (WITH SIGN
	! EXTENSION AS PER SRM),  PRINTING OUT THE REFERENCE,
	! AND RETURNING A POINTER TO THE NEXT INSTRUCTION.
	! WE ALSO UPDATE THE VARIABLE WHICH THE USER ACCESSES AS
	! '\' - THE LAST VALUE DISPLAYED.  IN THIS CASE WE DEFINE
	! THE VALUE TO BE WHAT THE BRANCH WOULD BE TO IF IT HAPPENS.
	!-

	DISPL = .(.STREAM_PTR)<0,.DISP_SIZE*8,1>;
	STREAM_PTR = .STREAM_PTR + .DISP_SIZE;
	DBG$GL_LAST_VAL = .DISPL + .STREAM_PTR;

	! Put out the branch operand and return a
	! pointer to the next instruction.

	IF .DBG$CP_OUT_STR NEQ 0
	THEN
	    dbg$out_sym_val( .stream_ptr + .displ, 
    				LONG_LENGTH, NO_OVERRIDE, .outbufr);

	RETURN( .STREAM_PTR );
	END;


ROUTINE PUT_REG( buf_out, REG, CS_FLAG ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!	THIS ROUTINE TAKES 1 PARAMETER WHICH IT ASSUMES IS
!	THE NUMBER OF A VAX REGISTER.  IT THEN PRINTS OUT
!	'R' FOLLOWED BY THE NUMBER (IN DECIMAL), UNLESS THE
!	REGISTER NUMBER IS 'SPECIAL'.  THESE INCLUDE:
!
!	REGISTER NUMBER		SPECIAL NAME
!
!		12		   AP
!		13		   FP
!		14		   SP
!		15		   PC
!
!	An additional parameter is used as a flag to indicate
!	whether the register reference should be enclosed in
!	round/square brackets or not.
!
! INPUTS:
!	REG - The register number.
!	CS_FLAG - A flag to control printing before/after REG.
!
! IMPLICIT INPUTS:
!	DBG$CP_OUT_STR - pointer to output buffer, if zero no output is done.
!
! OUTPUTS:
!	THE REGISTER REFERENCE IS PRINTED.
!
! IMPLICIT OUTPUTS:
!	NONE.
!
! ROUTINE VALUE:
!	NOVALUE
!
! SIDE EFFECTS:
! 	NONE.
!--
	BEGIN
	LOCAL
		INDEX;
	OWN
		ENCLOSING_CS : VECTOR[4,WORD]	! Enclosing strings for REG.
			       INITIAL(	WORD(	%ASCIC '(',
						%ASCIC ')',
						%ASCIC '[',
						%ASCIC ']'
					    )
				      ),

		PUT_CS   : VECTOR[4,BYTE]	! FAO formatting string.
			   INITIAL( %ASCIC '!AC' ),

		REGNAMES : VECTOR[4,WORD]	! SPECIAL REGISTER NAMES.
			   INITIAL( WORD( 'AP', 'FP', 'SP', 'PC') );

	IF .DBG$CP_OUT_STR EQL 0
	THEN
	    RETURN;				! No output is to be done.

	!+
	! If we are to put out any enclosing strings,
	! then we have been passed the INDEX which we
	! need to pick this string out of the above
	! vector.
	!-

	IF( (INDEX = .CS_FLAG) NEQ NO_BRACKETS )
	THEN
		DBG$FAO_PUT( .buf_out, PUT_CS, ENCLOSING_CS[.INDEX] );

	! Now print the actual register reference.

	IF( .REG LSS AP_REG )
	THEN
		DBG$FAO_PUT( .buf_out, UPLIT ( %ASCIC 'R!UB' ), .REG )
	ELSE
		! The reserved registers have special names which
		! we extract from the above vector.

		DBG$FAO_PUT( .buf_out, UPLIT ( %ASCIC '!AD' ), 2, 
    				REGNAMES[.REG-12] );

	! See again if there is any enclosing string.

	IF( .INDEX NEQ NO_BRACKETS )
	THEN
		DBG$FAO_PUT( .buf_out, PUT_CS, ENCLOSING_CS[.INDEX+1] );

	END;


ROUTINE DISPLACEMENT( STREAM_PTR, FLAG, DISPL, PTR_DISP_SIZE, INDEX, OPCODE ) =
!++
! FUNCTIONAL DEFINITION
!	Return any displacement associated with the current operand of the
! current instruction. Note that for short literals, the literal is returned
! in DISPL; for displacement mode instructions, the actual displacement is
! returned in DISPL; and for PC Mode instructions, the displacement is returned
! in DISPL. For other mode instructions, the routine effectively No-ops.
!
! FORMAL PARAMETERS
!	STREAM_PTR.ma.ra - Where the current operand specifier starts.
!	FLAG.mlu.r - Where we indicate the displacement type
!	DISPL.ma.ra - Where we put the actual displacement
!	PTR_DISP_SIZE.ma.ra - Number of bytes in the displcaement
!	INDEX.rl.v - Designates the Current operand
!	OPCODE.rl.v - Number of opcode of current instruction
!
! IMPLICIT INPUTS
!	None
!
! IMPLICIT OUTPUTS
!	None
!
! ROUTINE VALUE
!	Address of the next operand or address of the same operand if a
! displacement wasn't found.
!
! SIDE EFFECTS
!	INS_CONTEXT: Tells us the context of an operand (how many bytes it is).
!
!--
	BEGIN
	MACRO 
		SHORT_LITERAL_MODE = (.MODE LEQ 3 AND .MODE GEQ 0)%,
		DISPLACEMENT_MODE = (.MODE LEQ 15 AND .MODE GEQ 10) %,
		PC_MODE = (.REG EQL PC_REG AND (.MODE EQL 8 OR .MODE EQL 9)) %;
	LOCAL
		REG,			! Register in operand specifier
		MODE;			! Mode in operand specifier

	MAP
		STREAM_PTR : REF BLOCK[,BYTE],
		FLAG : REF VECTOR,
		DISPL : REF BLOCK,
		OPCODE : BLOCK,
		PTR_DISP_SIZE : REF VECTOR;

	REG = .STREAM_PTR[AREG];
	MODE = .STREAM_PTR[DSPL_MODE];
%IF DBG_MAC1 %THEN
	$FAO_TT_OUT ('MAC1: Operand mode is: !XB, reg is !XB', .MODE, .REG);
	$FAO_TT_OUT ('MAC1: STREAM_PTR is !XL, containing !XB', .STREAM_PTR,
		.STREAM_PTR[0,0,8,0]);
%FI
	! Get past operand specifier byte
	STREAM_PTR = STREAM_PTR[NEXT_FIELD(1)];
	SELECTONE 1 OF
		SET
		[SHORT_LITERAL_MODE]:	! Short literal mode
			BEGIN
%IF DBG_MAC1 %THEN
			$FAO_TT_OUT ('MAC1: Short literal mode');
%FI
			! Extract the number from operand specifier
			DISPL[0,0,32,0] = .MODE<0,2,0>^4 OR .REG;
			FLAG[0] = 1;	! Say its a literal
			PTR_DISP_SIZE[0] = 1;
			RETURN .STREAM_PTR;
			END;
		[DISPLACEMENT_MODE]:	! Displacement modes
			BEGIN
%IF DBG_MAC1 %THEN
			$FAO_TT_OUT ('MAC1: Displacement mode');
%FI
			FLAG[0] = -1;	! Say its a displacement
			PTR_DISP_SIZE[0] =
				(CASE .MODE FROM 10 TO 15 OF
				SET
				[12,13]: 2;	! 2 bytes of displacement info
				[14,15]: 4;	! 4 bytes of displacement info
				[INRANGE]: 1;	! 1 byte of displacement info
				TES);
			! Save off the displacement
			BLOCK[.DISPL,0,0,32,0] = .STREAM_PTR[0,0,8*.PTR_DISP_SIZE[0],1];
			RETURN STREAM_PTR [NEXT_FIELD(.PTR_DISP_SIZE[0])];
			END;
		[PC_MODE]:		! PC Modes
			BEGIN
%IF DBG_MAC1 %THEN
			$FAO_TT_OUT ('MAC1: PC Mode');
%FI
			FLAG[0] = 1;
			IF .MODE EQL 9
			THEN PTR_DISP_SIZE[0] = 4	! 4 bytes of address
			! Else amount of displacement is dependent upon instruction
			ELSE PTR_DISP_SIZE[0] = INS_CONTEXT(.INDEX, .OPCODE);
			BLOCK[.DISPL,0,0,32,0] = .STREAM_PTR[0,0,8*MIN(.PTR_DISP_SIZE[0], 4), 0];
			IF .PTR_DISP_SIZE[0] GTR 4
			THEN SIGNAL (DBG$_NUMTRUNC);	! Can't handle quad or octawords yet.
			RETURN STREAM_PTR[NEXT_FIELD(.PTR_DISP_SIZE[0])];
			END;
		[OTHERWISE]:
			BEGIN		! None of the above, so No op.
%IF DBG_MAC1 %THEN
			$FAO_TT_OUT ('MAC1: No mode');
%FI
			FLAG[0] = 0;
			PTR_DISP_SIZE[0] = 0;
			DISPL[0,0,32,0] = 0;
			! Back over the byte we advanced over earlier
			RETURN STREAM_PTR[NEXT_FIELD(0)];
			END;
		TES;
	END;


ROUTINE INS_CONTEXT( INDEX, OPCODE ) =

!++
! FUNCTIONAL DESCRIPTION:
!	THIS ROUTINE DECIDES WHAT CONTEXT APPLIES TO THE GIVEN
!	OPERAND FOR A SPECIFIC OPCODE.  IT IS USED BECAUSE WE NEED
!	TO KNOW WHETHER A PC-RELATIVE MODE FOR THIS OPERAND WOULD
!	REQUIRE A BYTE, WORD, LONGWORD, OR QUADWORD OPERAND.
!
! INPUTS:
!	INDEX - WHICH OPERAND WE'RE DEALING WITH.  THIS NUMBER
!		MUST BE 1, 2, ... 6.
!	OPCODE	-The opcode we are currently working on.
!		 (This parameter has already been validated.)
!
! IMPLICIT INPUTS:
!	None.
!
! OUTPUTS:
!	NONE.
!
! IMPLICIT OUTPUTS:
!	NONE.
!
! ROUTINE VALUE:
!	IF SOME ERROR IS DETECTED, WE RETURN FALSE.  OTHERWISE WE RETURN
!	THE NUMBER OF BYTES FROM THE INSTRUCTION STREAM THAT THE CURRENT
!	OPERAND REFERENCE SHOULD CONSUME.  THIS NUMBER WILL BE:
!
!     NUMBER	OP_CONTEXT 	NAME FROM OPI MACRO DEFINITION
!   OF BYTES         VALUE
!	
!	    1	         0		BYT
!	    2		 1		WRD
!	    4		 2		LNG
!	    8		 3		QAD
!
!   THE VALUE, 0 TO 3, STORED IN THE OP_CONTEXT FIELD IS SIMPLY 
!   OUR ENCODING OF 4 VALUES INTO A 2-BIT FIELD.  THE 'NUMBER OF
!   BYTES' ENTRY, ABOVE, IS THE NUMBER WE ARE ACTUALLY AFTER.
!
! SIDE EFFECTS:
!	NONE.
!--
	BEGIN
	!+
	! CHECK FOR ANY OF THE FOLLOWING ERROR CONDITIONS:
	!	1) WE DON'T RECOGNIZE THIS OPCODE.
	!	2) WE DON'T HAVE ENOUGH INFORMATION ABOUT IT.
	!	   (IE - IT IS RESERVED OR YET TO BE DEFINED).
	!	3) WE KNOW ABOUT IT, BUT DON'T BELIEVE THAT IT
	!	   SHOULD HAVE AS MANY OPERANDS AS WHAT
	!	   'INDEX' IMPLIES.  THIS CHECK IS NECESSARY
	!	   BECAUSE THE 'NUL' ENTRY IN THE OPINFO
	!	   DECLARATION MACROS RESULTS IN THE SAME VALUE
	!	   BEING ENCODED AS THE 'BYT' ONES DO.  SINCE
	!	   WE CAN CROSS-CHECK FOR THIS ERROR AT THIS
	!	   POINT (BY LOOKING AT THE OP_NUMOPS ENTRY FOR
	!	   THIS OPCODE), IT DID NOT SEEM WORTH TAKING UP MORE
	!	   BITS IN THE OPINFO TABLE TO DIFFERENTIATE 'NUL'
	!	   AND THE OTHERS.
	!--

!	IF ( .OPCODE GTRU MAXOPCODE )
!	THEN
!		! ERROR 1, SEE ABOVE.
!		RETURN(FALSE);

	IF( .DBG$GB_OPINFO[ .OPCODE, OP_NUMOPS ] EQL NOT_AN_OP )
	THEN
		! ERROR 2, SEE ABOVE.
		RETURN(FALSE);

	IF( ( .DBG$GB_OPINFO[ .OPCODE, OP_NUMOPS ] LSS .INDEX )
	   OR
	    ( .INDEX LEQ 0 ) )
	THEN
		! ERROR 3, SEE ABOVE.
		RETURN(FALSE);

	! NOW IT IS JUST A MATTER OF LOOKING INTO OUR OPINFO TABLE
	! WHERE WE GET 0, 1, 2, OR 3.  THIS JUST HAPPENS TO BE
	! THE POWER OF 2 WHICH WE NEED TO CALCULATE THE NUMBER
	! OF BYTES OCCUPIED BY THE CORRESPONDING OPERAND.

	RETURN( ( 1 ^ .DBG$GB_OPINFO[.OPCODE, OP_CONTEXT(.INDEX)] ) );
	END;

END
ELUDOM
