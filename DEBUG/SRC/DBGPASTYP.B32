MODULE	DBGPASTYP ( ! Type Converter routine for the Debugger/Pascal interface
		IDENT = 'V03-000'
		) =

BEGIN

!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!
!++
!
! FACILITY:	VAX-11 PASCAL-SPECIFIC DEBUGGER MODULES
!
! ABSTRACT:
!
!	Type Converter Routines
!
! ENVIRONMENT:	VAX/VMS user mode
!
! AUTHORS: Susan H. Azibert and Paul Hohensee,	CREATION DATE: 4-July-1980
!
! MODIFIED BY:
!	Richard Title	3-Aug-81
!	Ping Sager      17-Nov-198
!
! REVISION HISTORY:
! 3.01	3-Aug-81	 RT	Changed the routine VAX_DESC so that it
!				accepts target descriptors of type
!				dsc$k_dtype_f, dsc$k_dtype_d, etc.
!				This was needed for DEP/FLOAT, DEP/D_FLOAT,
!				and so on.
!
! 3.03  17-Nov-81        PS     In EXTERNAL_DESC, it did not require enough 
!				memory space for character string array data
!                               type, so character string overflows.
!                               
!--

REQUIRE 'SRC$:PASPROLOG.R32';

!
! Table of Contents
!
FORWARD ROUTINE
	Vax_Desc,				! Target is a vax standard descriptor
	Value_Desc,				! Deposit source into target
	External_Srm_Desc	: NOVALUE,	! Convert SRM value to external form
	External_Desc,				! Convert to external form
	DBG$NPAS_TYPE_CONV;

!
! EXTERNAL storage
!
EXTERNAL
	PAS$_Message_Vector		: LONG;			! Address of address of error message vector

! Standard Type Table entries
!
EXTERNAL
	PAS$_TRW_Boolean		: BLOCK [,BYTE],	! Type Table entry for BOOLEAN
	PAS$_TRW_Char			: BLOCK [,BYTE],	! Type Table entry for CHAR
	PAS$_TRW_Double			: BLOCK [,BYTE],	! Type Table entry for DOUBLE
	PAS$_TRW_Double_G		: BLOCK [,BYTE],	! Type Table entry for DOUBEL_G
	PAS$_TRW_Integer		: BLOCK [,BYTE],	! Type Table entry for INTEGER
	PAS$_TRW_Quadruple		: BLOCK [,BYTE],	! Type Table entry for QUADRUPLE
	PAS$_TRW_Real			: BLOCK [,BYTE],	! Type Table entry for REAL
	PAS$_TRW_Unsigned		: BLOCK [,BYTE];	! Type Table entry for UNSIGNED

!
! External Routines
!
EXTERNAL ROUTINE
	PAS$_Error_Handler,			! Error trap

	PAS$_Get_Type,				! Create a Type Table entry for a Pascal-Specific type
	PAS$_Get_Srm_Type,			! Create a Type Table entry for an SRM type
	PAS$_Read_Access	: NOVALUE,	! Check read access
	PAS$_Write_Access	: NOVALUE,	! Check write access
	PAS$_Assign		: NOVALUE,	! Do an assignement
	PAS$_Arith_Convert,			! Pascal-Specific Conversions
	PAS$_String,				! Check for character string type

	OTS$CVT_L_TI,				! Convert longword to text integer
	OTS$CVT_L_TZ,				! Convert longword to hexadecimal text
	FOR$CVT_D_TE,				! Convert double to E-format text
	FOR$CVT_D_TD;				! Convert double to D-format text

ROUTINE Vax_Desc ( Source, Target ) =

!++
! FUNCTIONAL SPECIFICATION:
!
!	Convert the value specified by a Pascal-Specific value descriptor into
!	the value specified by a Vax-Standard descriptor. It is assumed that
!	the pointer field of the Target points to enough space to hold the value.
!
! FORMAL PARAMETERS:
!
!	Source	- Address of a Pascal-Specific Value Descriptor
!	Target	- Address of a Vax-Standard Descriptor
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	Condition Code
!
!--

    BEGIN
    MAP
	Source			: REF PAS$_Value_Desc,
	Target			: REF BLOCK [,BYTE];

    BIND
	Target_Address		= Target[DSC$A_Pointer];! Address at which converted value is stored

    LOCAL
	Source_Address		: DBG$Address_Desc,
	Source_Type		: REF BLOCK [,BYTE] FIELD(Type_Fields),
							! Source Data Type
	Source_Size,					! Source size in bits
	Target_Size,					! Target size in bits
	Source_Temp;					! Storage for the source if it is <= 32 bits

    LITERAL
	Byte_Length	= 8,				! bit length of a byte
	Word_Length	= 16,				! bit length of a word
	Longword_Length = 32;				! bit length of a longword




    ! Build the VAX standard descriptor; All the descriptors
    ! produced will be of type BU, B, WU, W, LU, L, and T.

    ! Get the source address
    !
    IF .Source[PAS$VAL_Depositable]
    THEN
	MOVELONG(DBG$K_Address_Desc_Size, Source[PAS$VAL_Value_Address], Source_Address)
    ELSE
	BEGIN
	Source_Address[DBG$L_Address_Byte_Addr]		= Source[PAS$VAL_Value];
	Source_Address[DBG$L_Address_Bit_Offset]	= 0;
	END;

    ! Get the source type
    !
    IF .Source[PAS$Val_Srm_Type_Code] NEQ 0
    THEN
	! Source is a VAX-Standard type
	!
	Source_Type = PAS$_Get_Srm_Type(.Source[PAS$Val_Srm_Type_Code])

    ELIF .Source[PAS$Val_Type] NEQ 0
    THEN
	! Source is a Pascal-specific type
	!
	Source_Type = PAS$_Get_Type(.Source[PAS$Val_Type], %REF(SYM_K_Variable))

    ELIF .Source[PAS$Val_Type_Entry] NEQ 0
    THEN
	! Type table entry has already been created
	!
	Source_Type = .Source[PAS$Val_Type_Entry]

    ELSE
	Pascal_Bugcheck(PAS$K_ILLVAL);


    ! Get source size in bits
    !
    Source_Size = .Source[PAS$Val_Size];


    ! Check read access
    !
    PAS$_Read_Access(Source_Address, .Source_Size);


    ! Extract the source to a temporary if it is <= 32 bits.
    ! This will also take care of the case where the source is unaligned.
    !
    IF .Source_Size LEQU 32
    THEN
	BEGIN
	IF 
	    (IF .Source_Type[TYP_Class] EQL TYP_K_Ordinal
	    THEN
		NOT .Source_Type[ORD_Unsigned])
	THEN
	    Source_Temp = .(.Source_Address[DBG$L_Address_Byte_Addr])
			<.Source_Address[DBG$L_Address_Bit_Offset], .Source[PAS$Val_Size], 1>

	ELSE
	    Source_Temp = .(.Source_Address[DBG$L_Address_Byte_Addr])
			<.Source_Address[DBG$L_Address_Bit_Offset], .Source[PAS$Val_Size], 0>;

	Source_Address[DBG$L_Address_Byte_Addr] = Source_Temp;
	Source_Address[DBG$L_Address_Bit_Offset] = 0;
	END;



    ! Get the target size in bits
    !
    Target_Size =
	(CASE .Target[DSC$B_Dtype] FROM DSC$K_Dtype_Z TO DSC$K_Dtype_h OF
	    SET

	[DSC$K_Dtype_B]:	Byte_Length;
	[DSC$K_Dtype_BU]:	Byte_Length;
	[DSC$K_Dtype_W]:	Word_Length;
	[DSC$K_Dtype_WU]:	Word_Length;
	[DSC$K_Dtype_L]:	Longword_Length;
	[DSC$K_Dtype_LU]:	Longword_Length;
	[DSC$K_Dtype_q]: 	64;
	[dsc$k_dtype_o]:	128;
	[dsc$k_dtype_f]:	32;
	[dsc$k_dtype_d]:	64;
	[dsc$k_dtype_g]:	64;
	[dsc$k_dtype_h]:	128;
	[DSC$K_Dtype_T]:	.Target[DSC$W_Length] * 8;
	[INRANGE, OUTRANGE] :	SIGNAL(DBG$_NOEXAM);

	    TES);


    ! Move the source to the target, truncating or zero-extending as appropriate
    !
    IF .Source_Size GTRU .Target_Size
    THEN
	BEGIN

	IF .Target_Size LEQU 32
	THEN
	    (.Target_Address)<0, .Target_Size> = .(.Source_Address)<0, .Target_Size>
	ELSE
	    ! Source and target are an integral number of bytes
	    !
	    MOVEBYTE(.Target_Size, .Source_Address, .Target_Address);

	! Issue an informational message
	!
	SIGNAL(DBG$_NOTCMPTRNC);
	END

    ELIF .Source_Size LSSU .Target_Size
    THEN
	BEGIN

	IF .Source_Size LEQU 32
	THEN
	IF .Target_Size LEQU 32
	    THEN
		.Target_Address	= .(.Source_Address)<0, .Source_Size, 0>
	    ELSE
		BEGIN

		! Target must be an integral number of bytes
		!
		.Target_Address	= .(.Source_Address)<0, .Source_Size, 0>;
		CH$FILL(0, (.Target_Size ^ -3) - 1, .Target_Address + 1);
		END
	ELSE
	    ! Source and target are both an integral number of bytes
	    !
	    CH$COPY(.Source_Size ^ -3, .Source_Address, 0, .Target_Size ^ -3, .Target_Address);

	! Issue an informational message
	!
	SIGNAL(DBG$_NOTCMPEXT);
	END

    ELSE
	BEGIN

	IF .Source_Size LEQU 32
	THEN
	    ! Source and target are the same size
	    !
	    (.Target_Address)<0, .Source_Size> = .(.Source_Address)<0, .Source_Size>
	ELSE
	    ! Source and target are an integral number of bytes
	    !
	    MOVEBYTE(.Source_Size ^ -3, .Source_Address, .Target_Address);

	END;

    ! Return success
    !
    STS$K_Success
    END;

ROUTINE Value_Desc (Source, Target) =

!++
! FUNCTIONAL SPECIFICATION:
!
!	Deposit the value described by the Source value descriptor into the
!	address of the value described by the Target value descriptor. The
!	Target value descriptor must be depositable.
!
! FORMAL PARAMETERS:
!
!	Source	- Address of a Pascal-Specific Value Descriptor
!	Target	- Address of a Pascal-Specific Value Descriptor
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	Condition Code
!
!--

    BEGIN
    MAP
	Source			: REF PAS$_Value_Desc,
	Target			: REF PAS$_Value_Desc;

    LOCAL
	Source_Address		: DBG$Address_Desc,		! Address of source value
	Target_Address		: DBG$Address_Desc,		! Deposit Address
	Source_Type		: REF BLOCK [,BYTE] FIELD(Type_Fields),
	Target_Type		: REF BLOCK [,BYTE] FIELD(Type_Fields);

    ! Make sure Target is Pascal-Specific
    !
    IF .Target[DBG$B_Dhead_Lang] NEQ DBG$K_Pascal
    THEN
	SIGNAL(DBG$_WRONGLANG);

    ! Make sure target descriptor is depositable
    !
    IF NOT .Target[PAS$VAL_Depositable]
    THEN
	SIGNAL(DBG$_NODEPOSIT);

    ! Get source address. Target address is in the descriptor
    !
    IF .Source[PAS$VAL_Depositable]
    THEN
	! Source address is in the descriptor
	!
	MOVELONG(DBG$K_Address_Desc_Size, Source[PAS$VAL_Value_Address], Source_Address)
    ELSE
	! Source is in the descriptor
	!
	BEGIN
	Source_Address[DBG$L_Address_Byte_Addr]		= Source[PAS$VAL_Value];
	Source_Address[DBG$L_Address_Bit_Offset]	= 0;
	END;

    !
    ! Get pointers to the types
    !

    IF .Source[PAS$VAL_Srm_Type_Code] NEQ 0
    THEN
	! Source is a Vax-Standard type
	!
	Source_Type	= PAS$_Get_Srm_Type(.Source[PAS$VAL_Srm_Type_Code])

    ELIF .Source[PAS$VAL_Type] NEQ 0
    THEN
	! Source is a Pascal-Specific type
	!
	Source_Type	= PAS$_Get_Type(.Source[PAS$VAL_Type], %REF(SYM_K_Variable))

    ELIF .Source[PAS$VAL_Type_Entry] NEQ 0
    THEN
	! Type Table entry already created
	!
	Source_Type	= .Source[PAS$VAL_Type_Entry]

    ELSE
	Pascal_Bugcheck(PAS$K_ILLVAL);


    IF .Target[PAS$VAL_Srm_Type_Code] NEQ 0
    THEN
	! Target is a Vax-Standard type
	!
	Target_Type	= PAS$_Get_Srm_Type(.Target[PAS$VAL_Srm_Type_Code])

    ELIF .Target[PAS$VAL_Type] NEQ 0
    THEN
	! Target is a Pascal-Specific type
	!
	Target_Type	= PAS$_Get_Type(.Target[PAS$VAL_Type], %REF(SYM_K_Variable))

    ELIF .Target[PAS$VAL_Type_Entry] NEQ 0
    THEN
	! Type Table entry already created
	!
	Target_Type	= .Target[PAS$VAL_Type_Entry]

    ELSE
	Pascal_Bugcheck(PAS$K_ILLVAL);

    ! Do the assignment
    !
    PAS$_Assign(Source_Address, .Source[PAS$VAL_Size], .Source_Type,
		Target[PAS$VAL_Value_Address], .Target[PAS$VAL_Size], .Target_Type);

    ! Return Success
    !
    STS$K_SUCCESS
    END;

ROUTINE External_Srm_Desc (Srm_Type_Code, Source, Target) : NOVALUE =

!++
! FUNCTIONAL SPECIFICATION:
!
!	Convert the value at .Source to external (printable) form.
!
! FORMAL PARAMETERS:
!
!	Srm_Type_Code	- SRM standard data type code
!	Source		- Address of the source value
!	Target		- Address of a string descriptor to describe the result string
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
!--

    BEGIN
    MAP
	Target		: REF BLOCK [8, BYTE];

    LITERAL
	!
	! Lengths of the various output strings exclusive of the count byte
	!
	B_Length		= 4,
	BU_Length		= 3,
	W_Length		= 6,
	WU_Length		= 5,
	L_Length		= 11,
	LU_Length		= 10,
	F_Length		= 16,
	D_Length		= 24,
	T_Length		= 7,
	Bool_Length		= 5,

	Digits_In_Int		= 1,		! Digits in integer part of real
	Digits_In_Fract_Of_Real	= 9,		! Digits in fractional part of F_Float
	Digits_In_Fract_Of_Double	= 14;	! Digits in fractional part of D_Float

    LOCAL
	Position,
	String_Length;					! Result string length

    ! Figure out how much space to allocate
    !
    String_Length =
	    (CASE .Srm_Type_Code FROM DSC$K_Dtype_BU TO DSC$K_Dtype_H OF
		SET
	    [DSC$K_Dtype_B]:	B_Length;
	    [DSC$K_Dtype_BU]:	BU_Length;
	    [DSC$K_Dtype_W]:	W_Length;
	    [DSC$K_Dtype_WU]:	WU_Length;
	    [DSC$K_Dtype_L]:	L_Length;
	    [DSC$K_Dtype_LU]:	LU_Length;
	    [DSC$K_Dtype_F]:	F_Length;
	    [DSC$K_Dtype_D]:	D_Length;
	    [DSC$K_Dtype_T]:	T_Length;
	    [INRANGE, OUTRANGE]:IF .Srm_Type_Code EQL DST$K_Bool
				THEN
				    Bool_Length
				ELSE
				    Pascal_Bugcheck(PAS$K_ILLVAL);

		TES);

    ! Allocate space for the ASCIC string
    !
    IF NOT DBG$NLIST_FREEZ(ROUND_BYTE_TO_LONG_(.String_Length), Target[DSC$A_POINTER], .PAS$_Message_Vector)
    THEN
	SIGNAL(DBG$_NOFREE);

    ! Set the length field of the descriptor
    !
    Target[DSC$W_Length]	= .String_Length;

    ! Do the conversion
    !
    CASE .Srm_Type_Code FROM DSC$K_Dtype_BU TO DSC$K_Dtype_H OF
	SET

	[DSC$K_Dtype_B,	DSC$K_Dtype_BU,	DSC$K_Dtype_W,
	 DSC$K_Dtype_WU,DSC$K_Dtype_L]:
	    !
	    ! Signed INTEGER or small UNSIGNED
	    !
	    IF NOT OTS$CVT_L_TI(.Source, .Target)
	    THEN
		Pascal_Bugcheck(PAS$K_OTSFAIL);

	[DSC$K_Dtype_LU]:
	    !
	    ! UNSIGNED
	    !
	    IF NOT OTS$CVT_L_TI(.Source, .Target)
	    THEN
		Pascal_Bugcheck(PAS$K_OTSFAIL);

!	    BEGIN
!	    BIND
!		Fao_Unsigned_Desc	= %ASCID '!#UL';
!
!	    $FAO(Fao_Unsigned_Desc, 0, .Target, .String_Length, ..Source);
!
!	    END;

	[DSC$K_Dtype_F]:
	    !
	    ! REAL, SINGLE
	    !
    	    BEGIN
    	    LOCAL
    		Double_Source	: VECTOR [2, LONG];

    	    Double_Source[0]	= ..Source;
    	    Double_Source[1]	= 0;
	    IF NOT FOR$CVT_D_TE(Double_Source, .Target, Digits_In_Fract_Of_Real, Digits_In_Int)
	    THEN
		Pascal_Bugcheck(PAS$K_OTSFAIL);
    	    END;

	[DSC$K_Dtype_D]:
	    !
	    ! DOUBLE
	    !
	    IF NOT FOR$CVT_D_TD(.Source, .Target, Digits_In_Fract_Of_Double, Digits_In_Int)
	    THEN
		Pascal_Bugcheck(PAS$K_OTSFAIL);

	[DSC$K_Dtype_T]:
	    !
	    ! CHAR
	    !
	    BEGIN
	    BIND
		String_Target		= .Target[DSC$A_Pointer]
			: VECTOR [,BYTE];

	    IF  ( .(.Source)<B0_> GTRU 126 )	OR
		( .(.Source)<B0_> LSSU %C' ' )
	    THEN
		! Write ''(number)
		!
		BEGIN
		LOCAL
		    String_Index;

		String_Target[0]	= %C'''';
		String_Target[1]	= %C'''';
		String_Target[2]	= %C'(';

		String_Index		= 3;

		IF .(.Source)<B0_> GTRU 99
		THEN
		    BEGIN
		    String_Target[.String_Index]	= .(.Source)<B0_> / 100 + %C'0';
		    String_Index			= .String_Index + 1;
		    END;

		IF .(.Source)<B0_> GTRU 9
		THEN
		    BEGIN
		    String_Target[.String_Index]	= (.(.Source)<B0_> MOD 100) / 10 + %C'0';
		    String_Index			= .String_Index + 1;
		    END;

		String_Target[.String_Index]		= (.(.Source)<B0_> MOD 10) + %C'0';
		String_Target[.String_Index + 1]	= %C')';

		Target[DSC$W_Length]	= .String_Index + 2;
		END

	    ELSE
		BEGIN
		String_Target[0]	= %C'''';
		String_Target[1]	= .(.Source)<B0_>;
		String_Target[2]	= %C'''';

		Target[DSC$W_Length]	= 3;
		END;

	    END;

	[INRANGE, OUTRANGE]:
	    !
	    ! Must be BOOLEAN
	    !
	    IF ..Source
	    THEN
		BEGIN
		Target[DSC$W_Length]	= 4;
		MOVEBYTE(4, UPLIT BYTE(%ASCII 'TRUE'), .Target[DSC$A_Pointer]);
		END
	    ELSE
		MOVEBYTE(5, UPLIT BYTE(%ASCII 'FALSE'), .Target[DSC$A_Pointer]);

	TES;

    ! Drop leading blanks
    !
    IF (Position = CH$FIND_NOT_CH(.Target[DSC$W_LENGTH], .Target[DSC$A_POINTER], %C' ')) NEQ 0
    THEN
	! There are leading blanks to drop
	!
	BEGIN

    	Target[DSC$W_Length]	= .Target[DSC$W_Length] - (.Position - .Target[DSC$A_POINTER]);
	Target[DSC$A_POINTER]	= .Position;
	END;

    END;

ROUTINE External_Desc (Source, Target_Radix, Target) =

!++
! FUNCTIONAL SPECIFICATION:
!
!	Convert the value in the Source value descriptor to external
!	(printable) form. If the Target_Radix is anything other than
!	DBG$K_Default, a string in the appropriate radix is constructed,
!	rather than the default Pascal form.
!
! FORMAL PARAMETERS:
!
!	Source		- Address of a Pascal_Specific Value Descriptor
!	Target_Radix	- Type override radix
!	Target		- Address of a Vax-Standard String Descriptor
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	Condition Code
!
!--

    BEGIN
    MAP
	Source			: REF PAS$_Value_Desc,
	Target			: REF BLOCK [8, BYTE];

    BIND
	Target_String		= Target[DSC$A_POINTER]	: REF VECTOR [,BYTE];

    LOCAL
	Source_Address		: DBG$Address_Desc,
	Source_Temp,					! Temp for sources whose size is <= 32 bits
	Source_Type		: REF BLOCK [,BYTE] FIELD(Type_Fields),
	Position;					! Pointer to first non-blank character in result string

    ! Initialize the target string descriptor
    !
    Target[DSC$B_Dtype] = DSC$K_Dtype_T;
    Target[DSC$B_Class] = DSC$K_Class_S;
    Target[DSC$W_Length] = 0;

    ! Get the source address
    !
    IF .Source[PAS$VAL_Depositable]
    THEN
	MOVELONG(DBG$K_Address_Desc_Size, Source[PAS$VAL_Value_Address], Source_Address)
    ELSE
	BEGIN
	Source_Address[DBG$L_Address_Byte_Addr]		= Source[PAS$VAL_Value];
	Source_Address[DBG$L_Address_Bit_Offset]	= 0;
	END;

    ! Check read access
    !
    PAS$_Read_Access(Source_Address, .Source[PAS$VAL_Size]);

    ! Check for non-default radix
    !
    IF	(.Target_Radix NEQ DBG$K_Default) AND
	(.Target_Radix NEQ DBG$K_Decimal)
    THEN
	BEGIN
	LOCAL
	    Bits_Per_Digit,
	    Digits,
	    Left_Over_Bits,
	    Current_Digit,
	    String_Address	: REF VECTOR [,BYTE];

	! Get number of bits for each digit
	!
	Bits_Per_Digit =
	    (SELECTONE .Target_Radix OF
		SET
		[DBG$K_Binary]:	1;
		[DBG$K_Octal]:	3;
		[DBG$K_Hex]:	4;
		[OTHERWISE]:	Pascal_Bugcheck(PAS$K_ILLRAD);
		TES);

	Digits	= (.Source[PAS$VAL_Size] + .Bits_Per_Digit - 1) / .Bits_Per_Digit;

	! Allocate space for the string
	!
	IF NOT DBG$NLIST_FREEZ(ROUND_BYTE_TO_LONG_(.Digits), String_Address, .PAS$_Message_Vector)
	THEN
	    SIGNAL(DBG$_NOFREE);

	! Get the string length and address
	!
	Target[DSC$W_Length]	= .Digits;
	Target[DSC$A_Pointer]	= .String_Address;

	! Get the bits of the first digit (last digit in the value)
	!
	Left_Over_Bits	=
	    (IF (.Source[PAS$VAL_Size] / .Bits_Per_Digit) LSSU .Digits
	    THEN
		.Bits_Per_Digit - (.Digits * .Bits_Per_Digit) + .Source[PAS$VAL_Size]
	    ELSE
		.Bits_Per_Digit);

	Current_Digit	= .(.Source_Address[DBG$L_Address_Byte_Addr])
		<.Source_Address[DBG$L_Address_Bit_Offset] + .Source[PAS$VAL_Size] - .Left_Over_Bits,
		.Left_Over_Bits, 0>;

	! Write the string
	!
	DECR Digit_Count FROM .Digits - 1 TO 0 DO
	    BEGIN

	    ! Write the current digit into the string
	    !
	    String_Address[.Digits - 1 - .Digit_Count] =
		(IF (.Bits_Per_Digit LSSU 4)	OR
		    (.Current_Digit LSSU 10)
		THEN
		    .Current_Digit + %C'0'
		ELSE
		    .Current_Digit - 10 + %C'A');

	    ! Extract the bits corresponding to the next digit
	    !
	    IF .Digit_Count GTRU 0
	    THEN
		Current_Digit	= .(.Source_Address[DBG$L_Address_Byte_Addr])
			<.Source_Address[DBG$L_Address_Bit_Offset] + ((.Digit_Count - 1) * .Bits_Per_Digit),
			.Bits_Per_Digit, 0>;

	    END;

	! Success
	!
	RETURN STS$K_SUCCESS;
	END;

    !
    ! Standard output. Figure out what to do and do it
    !


    ! Get a pointer to the type
    !
    IF .Source[PAS$VAL_Srm_Type_Code] NEQ 0
    THEN
	! Source is a Vax-Standard type
	!
	Source_Type	= PAS$_Get_Srm_Type(.Source[PAS$VAL_Srm_Type_Code])

    ELIF .Source[PAS$VAL_Type] NEQ 0
    THEN
	! Source is Pascal-Specific
	!
	Source_Type	= PAS$_Get_Type(.Source[PAS$VAL_Type], %REF(SYM_K_Variable))

    ELIF .Source[PAS$VAL_Type_Entry] NEQ 0
    THEN
	Source_Type	= .Source[PAS$VAL_Type_Entry]

    ELSE
	Pascal_Bugcheck(PAS$K_ILLVAL);

    ! If the source is <= 32 bits, extract it to a temporary
    ! This also covers the case where the source is unaligned
    !
    IF .Source[PAS$VAL_Size] LEQU 32
    THEN
	BEGIN
	IF
	    (IF .Source_Type[TYP_Class] EQL TYP_K_Ordinal
	    THEN
		NOT .Source_Type[ORD_Unsigned])
	THEN
	    Source_Temp	= .(.Source_Address[DBG$L_Address_Byte_Addr])
				<.Source_Address[DBG$L_Address_Bit_Offset], .Source[PAS$VAL_Size], 1>

	ELSE
	    Source_Temp	= .(.Source_Address[DBG$L_Address_Byte_Addr])
				<.Source_Address[DBG$L_Address_Bit_Offset], .Source[PAS$VAL_Size], 0>;

	Source_Address[DBG$L_Address_Byte_Addr]		= Source_Temp;
	Source_Address[DBG$L_Address_Bit_Offset]	= 0;
	END;


    IF .Source[PAS$VAL_Srm_Type_Code] NEQ 0
    THEN
	! Source is a Vax-Standard type
	!
	External_Srm_Desc(.Source[PAS$VAL_Srm_Type_Code], .Source_Address, .Target)

    ELSE
	! Source is Pascal-Specific
	!
	BEGIN

	! CASE on the type class
	!
	CASE .Source_Type[TYP_Class] FROM TYP_K_Array TO TYP_K_Varying OF
	    SET

	    [TYP_K_Ordinal] :
		!
		! Scalar type
		!
		BEGIN
		BIND
		    Base_Type		= .Source_Type[ORD_Type]
				: BLOCK [,BYTE] FIELD(Type_Fields);

		IF .Base_Type[TYP_Rst_Class] NEQ DSC$K_Dtype_Z
		THEN
		    ! Subrange of an SRM type
		    !
		    External_Srm_Desc(.Base_Type[TYP_Rst_Class], .Source_Address, .Target)

		ELSE
		    ! Enumerated (except BOOLEAN)
		    !
		    BEGIN
		    LOCAL
			Symbol_Entry		: REF BLOCK [,BYTE] FIELD(Symbol_Fields);

		    ! Scan the Symbol Table chain for the value
		    !
		    Symbol_Entry = .Base_Type[ORD_Enum_Element];

		    WHILE .Symbol_Entry NEQA 0 DO
			IF .Symbol_Entry[CON_Literal] EQL ..Source_Address
			THEN
			    ! Found it
			    !
			    BEGIN
			    LOCAL
				Name_Entry		: REF BLOCK [,BYTE] FIELD(Nam_Fields);

			    Name_Entry = .Symbol_Entry[SYM_Name];

			    Target[DSC$W_Length] = .Name_Entry[NAM_Length];
			    Target[DSC$A_Pointer]= Name_Entry[NAM_First_Char];

			    EXITLOOP;
			    END

			ELSE
			    Symbol_Entry = .Symbol_Entry[CON_Next];

		    IF .Symbol_Entry EQL 0
		    THEN
			! Didn't find the element
			!
			SIGNAL(DBG$_BADSCALAR, ..Source_Address);

		    END;

		END;

	    [TYP_K_Array,
	     TYP_K_Varying] :
		IF PAS$_String(.Source_Type)
		THEN
		    ! Character string
		    !
		    BEGIN
		    LOCAL
			Index_Type		: REF BLOCK [,BYTE] FIELD(Type_Fields),
			String_Source		: REF VECTOR [,BYTE],
			String_Source_Length,		! Number of characters in source string
			Character_Index,		! Index into character string
			String_Length,
			Last_Was_Printable;

		    IF .Source_Type[TYP_Class] EQL TYP_K_Array
		    THEN
			BEGIN
			Index_Type		= .Source_Type[ARR_Itype];
			String_Source		= .Source_Address;
			String_Source_Length	= .Index_Type[ORD_Upper];
			END
		    ELSE
			BEGIN
			String_Source		= .Source_Address + 2;
			String_Source_Length	= .(.Source_Address)<W0_>;
			END;

		    ! Find the length of the string
		    !
		    String_Length	= 1;
		    Character_Index	= -1;
		    Last_Was_Printable	= True;

		    REPEAT
			BEGIN

			String_Length	= .String_Length + 1;

			Character_Index	= .Character_Index + 1;
			IF .Character_Index EQL .String_Source_Length
			THEN
			    EXITLOOP;

			IF (.String_Source[.Character_Index] GTRU 126)	OR
			   (.String_Source[.Character_Index] LSSU %C' ')
			THEN
			    BEGIN
			    IF .String_Source[.Character_Index] GTRU 126
			    THEN
				String_Length	= .String_Length + 4
			    ELIF .String_Source[.Character_Index] LSSU 10
			    THEN
				String_Length	= .String_Length + 2
			    ELSE
				String_Length	= .String_Length + 3;

			    Last_Was_Printable	= False;
			    END
			ELSE
			    BEGIN
			    IF NOT .Last_Was_Printable
			    THEN
				String_Length	= .String_Length + 3;

			    Last_Was_Printable	= True;
			    END;
			END;

		    ! Allocate space for it
		    !
		    IF NOT DBG$NLIST_FREEZ(ROUND_BYTE_TO_LONG_(.String_Length), Target[DSC$A_Pointer],
				.PAS$_Message_Vector)
		    THEN
			SIGNAL(DBG$_NOFREE)

		    ELSE
			! Write it
			!
			BEGIN
			BIND
			    String_Target	= Target[DSC$A_Pointer]
					: REF VECTOR [,BYTE];

			String_Target[0]	= %C'''';
			String_Length		= 0;
			Character_Index		= -1;
			Last_Was_Printable	= True;

			REPEAT
			    BEGIN

			    Character_Index	= .Character_Index + 1;
			    IF .Character_Index EQL .String_Source_Length
			    THEN
				EXITLOOP;

			    String_Length	= .String_Length + 1;

			    IF (.String_Source[.Character_Index] LEQU 126)	AND
			       (.String_Source[.Character_Index] GEQU %C' ')
			    THEN
				! Printing character
				!
				BEGIN
				IF NOT .Last_Was_Printable
				THEN
				    BEGIN
				    String_Target[.String_Length - 1]	= %C')';
				    String_Target[.String_Length]	= %C'''';
				    String_Length			= .String_Length + 1;
				    END;

				String_Target[.String_Length]	= .String_Source[.Character_Index];
				Last_Was_Printable		= True;
				END
			    ELSE
				BEGIN
				! Check for quote, open paren
				!
				IF .Last_Was_Printable
				THEN
				    BEGIN
				    String_Target[.String_Length]	= %C'''';
				    String_Length			= .String_Length + 1;
				    String_Target[.String_Length]	= %C'(';
				    String_Length			= .String_Length + 1;
				    END;

				IF .String_Source[.Character_Index] GTRU 99
				THEN
				    BEGIN
				    String_Target[.String_Length]
						= .String_Source[.Character_Index] / 100 + %C'0';
				    String_Length			= .String_Length + 1;
				    END;

				IF .String_Source[.Character_Index] GTRU 9
				THEN
				    BEGIN
				    String_Target[.String_Length]
						= (.String_Source[.Character_Index] MOD 100) / 10 + %C'0';
				    String_Length			= .String_Length + 1;
				    END;

				String_Target[.String_Length]
						= (.String_Source[.Character_Index] MOD 10) + %C'0';

				String_Length			= .String_Length + 1;
				String_Target[.String_Length]	= %C',';

				Last_Was_Printable = False;
				END;

			    END;

			IF .Last_Was_Printable
			THEN
			    BEGIN
			    String_Length			= .String_Length + 1;
			    String_Target[.String_Length]	= %C'''';
			    END
			ELSE
			    String_Target[.String_Length]	= %C')';

			Target[DSC$W_Length]	= .String_Length + 1;
			END;		    

		    END

		ELSE
		    ! Anything other than a character string array
		    ! cannot be examined
		    !
		    SIGNAL(DBG$_NOEXAM);

	    [TYP_K_File,
	     TYP_K_Record] :
		!
		! Cannot be examined
		!
		SIGNAL(DBG$_NOEXAM);

	    [TYP_K_Pointer] :
		IF ..Source_Address EQLA 0
		THEN
		    ! Write 'NIL'
		    !
		    BEGIN
		    Target[DSC$W_Length]	= 3;
		    Target[DSC$A_Pointer]	= UPLIT BYTE(%ASCII 'NIL');
		    END

		ELSE
		    ! Write the hex value
		    !
		    BEGIN
		    IF NOT DBG$NLIST_FREEZ(2, Target[DSC$A_Pointer], .PAS$_Message_Vector)
		    THEN
			SIGNAL(DBG$_NOFREE);

		    Target[DSC$W_Length]	= 8;

		    IF NOT OTS$CVT_L_TZ(.Source_Address, .Target, 8)
		    THEN
			Pascal_Bugcheck(PAS$K_OTSFAIL);

		    END;

	    [TYP_K_Set] :
		BEGIN
		BIND
		    Source_Set_Type	= .Source_Type[SET_Type]
				: BLOCK [,BYTE] FIELD(Type_Fields);

		LOCAL
		    Element_Type	: REF BLOCK [,BYTE] FIELD(Type_Fields),
		    Element_List_Head	: DBG$Link_Node,
		    Current_Element	: REF DBG$Link_Node,
		    New_Element,
		    Element_Value_Desc	: PAS$_Transient_Value_Desc,
		    Element_String_Desc	: REF BLOCK [8, BYTE],
		    String_Length,
		    String_Address	: REF VECTOR [,BYTE],
		    Current_Character,
		    Last_Bit_Offset;

		! Check for null set type
		!
		IF Source_Set_Type EQLA 0
		THEN
		    BEGIN
		    Target[DSC$W_Length]	= 2;
		    Target[DSC$A_Pointer]	= UPLIT BYTE(%ASCII '[]');
		    RETURN STS$K_Success;
		    END;

		Element_Type = .Source_Set_Type[ORD_Type];

		! Create a list of string descriptors for the elements
		! in the set
		!

		! Fill in a transient value descriptor with everything except
		! the value address
		!
		Element_Value_Desc[DBG$W_Dhead_Length]	= PAS$S_VAL_Transient_Size * 4;
		Element_Value_Desc[DBG$B_Dhead_Type]	= DBG$K_V_Value_Desc;
		Element_Value_Desc[DBG$B_Dhead_Lang]	= DBG$K_Pascal;
		ZEROLONG(PAS$S_VAL_Transient_Size - 1, Element_Value_Desc[DBG$L_Dhead_Pointer]);
		Element_Value_Desc[PAS$VAL_Depositable]	= True;
		Element_Value_Desc[PAS$VAL_Dtype]	= .Element_Type[ORD_Dtype];
		Element_Value_Desc[PAS$VAL_Size]	= .Element_Type[TYP_Packed_Size];
		Element_Value_Desc[PAS$VAL_Type_Entry]	= .Element_Type;

		! Initialize the list
		!
		Element_List_Head[DBG$L_Link_Node_Link]	= 0;
		Element_List_Head[DBG$L_Link_Node_Value]= 0;

		Current_Element		= Element_List_Head;

		! Get the element value string descriptors
		!
		String_Length		= 1;

		IF  (Source_Set_Type EQLA PAS$_TRW_Integer)	OR
		    (Source_Set_Type EQLA PAS$_TRW_Unsigned)
		THEN
		    Last_Bit_Offset = 255
		ELSE
		    Last_Bit_Offset = .Source_Set_Type[ORD_Upper];

		INCRU Element_Value FROM 0 TO .Last_Bit_Offset DO
		    IF .(.Source_Address)<.Element_Value, 1, 0>
		    THEN
			BEGIN

			! Fill in the element value address in the transient
			! value descriptor
			!
			Element_Value_Desc[PAS$VAL_Byte_Address] = Element_Value;

			! Allocate space for a string descriptor
			!
			IF NOT DBG$NLIST_FREEZ(2, Element_String_Desc, .PAS$_Message_Vector)
			THEN
			    SIGNAL(DBG$_NOFREE);

			! Initialize it
			!
			Element_String_Desc[DSC$W_Length]	= 0;
			Element_String_Desc[DSC$B_Dtype]	= DSC$K_Dtype_T;
			Element_String_Desc[DSC$B_Class]	= DSC$K_Class_S;
			Element_String_Desc[DSC$A_Pointer]	= 0;

			! Fill it in
			!
			External_Desc(Element_Value_Desc, DBG$K_Default, .Element_String_Desc);

			! Allocate a list node
			!
			IF NOT DBG$NLIST_FREEZ(DBG$K_Link_Node_Size, New_Element, .PAS$_Message_Vector)
			THEN
			    SIGNAL(DBG$_NOFREE);

			! Increment the target string length
			!
			String_Length = .String_Length + .Element_String_Desc[DSC$W_Length] + 1;

			! Link it to the chain of such descriptors
			!
			Current_Element[DBG$L_Link_Node_Link]	= .New_Element;
			Current_Element				= .New_Element;
			Current_Element[DBG$L_Link_Node_Link]	= 0;
			Current_Element[DBG$L_Link_Node_Value]	= .Element_String_Desc;
			END;

		! Check for the empty set
		!
		IF .String_Length EQL 1
		THEN
		    String_Length = 2;

		! Allocate space for the set string
		!
		IF NOT DBG$NLIST_FREEZ(ROUND_BYTE_TO_LONG_(.String_Length), String_Address,
				.PAS$_Message_Vector)
		THEN
		    SIGNAL(DBG$_NOFREE);

		! Fill in the target descriptor
		!
		Target[DSC$W_Length]	= .String_Length;
		Target[DSC$A_Pointer]	= .String_Address;

		! Copy the element values into the target string
		!
		String_Address[0]	= %C'[';

		Current_Character	= 1;
		Current_Element		= .Element_List_Head[DBG$L_Link_Node_Link];

		WHILE .Current_Element NEQ 0 DO
		    BEGIN
		    Element_String_Desc	= .Current_Element[DBG$L_Link_Node_Value];
		    MOVEBYTE(.Element_String_Desc[DSC$W_Length], .Element_String_Desc[DSC$A_Pointer],
				String_Address[.Current_Character]);
		    String_Address[.Current_Character + .Element_String_Desc[DSC$W_Length]] = %C',';

		    Current_Character	= .Current_Character + .Element_String_Desc[DSC$W_Length] + 1;
		    Current_Element	= .Current_Element[DBG$L_Link_Node_Link];
		    END;
		! Write the closing ']'
		!
		String_Address[.String_Length - 1]	= %C']';

		END;

	    [INRANGE,
	     OUTRANGE] :
		!
		! Expression Interpreter or Make_Value_Desc produced a bad
		! value descriptor
		!
		Pascal_Bugcheck(PAS$K_ILLVAL);

	    TES;

    	END;

    ! Drop leading blanks
    !
    IF (Position = CH$FIND_NOT_CH(.Target[DSC$W_LENGTH], .Target[DSC$A_POINTER], %C' ')) NEQ 0
    THEN
	! There are leading blanks to drop
	!
	BEGIN

    	Target[DSC$W_Length]	= .Target[DSC$W_Length] - (.Position - .Target[DSC$A_POINTER]);
	Target[DSC$A_POINTER]	= .Position;
	END;

    ! Return Success
    !
    STS$K_SUCCESS
    END;

GLOBAL ROUTINE DBG$NPAS_TYPE_CONV (Source, Target_Radix, Target_Type, Target, Message_Vect) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Performs language specific and language independent type conversions.
!	These will be both internal-to-internal and internal-to-external in
!	nature. Target may be described by either language
!	specific value descriptor or a subset of VAX standard descriptors.
!	The latter category includes the following:
!
!	dsc$k_dtype_v
!
!	dsc$k_dtype_b, dsc$k_dtype_bu
!
!	dsc$k_dtype_w, dsc$k_dtype_wu
!
!	dsc$k_dtype_l, dsc$k_dtype_lu
!
!	dsc$k_dtype_q, dsc$k_dtype_qu
!
!	dsc$k_dtype_f, dsc$k_dtype_d
!
!	dsc$k_dtype_t
!
!	The source descriptor must be a language specific value descriptor.
!
!	Note that this routine will be used to obtain the 'printable' (external)
!	value of the source as the result of EXAMINE commands.
!
! FORMAL PARAMETERS:
!
!	source		- A longword which contains the address of 
!			   a language specific value descriptor
!	
!	target_radix	- A longword containing an integer encoding of the radix
!			  to be used when converting to a 'printable' value:
!
!		dbg$k_default (1)	- source language default radix
!
!		dbg$k_binary (2)	- binary radix
!
!		dbg$k_octal (8)    	- octal radix
!
!		dbg$k_decimal (10)	- decimal radix
!
!		dbg$k_hex (16)		- hexadecimal radix
!
!			Note that this parameter is significant ONLY when the
!		   	object described by the source descriptor is to be
!			converted to external format. A request for a binary,
!			octal, or hex 'printable' value means to consider the
!			value of source as a bit pattern to be translated to
!			special characters. In this sense, the type of the source
!			value is not significant - only the length. Values will
!			therefore be displayed as unsigned integers within the
!			specified radix. Values will be left-extended to nibble
!			boundaries.
!	
!	target_type	- A longword containing an unsigned integer encoding of the
!			  type of information contained within the target parameter:
!
!		dbg$k_vax_desc (130)	   - target contains the address of a
!					     VAX standard descriptor
!
!					     Note: The caller of dbg$nxxx_type_conv
!					     must assure that the dsc$a_pointer
!					     field of the descriptor contains the
!					     address of an appropriately large
!					     block of storage.
!
!		dbg$k_value_desc (122)     - target contains the address of a
!					     language specific value descriptor.
!					     The type convertor deposits the
!					     value of Source into the address of
!					     the value in Target.
!
!		dbg$k_external_desc (129)  - target contains the address of
!					     a VAX standard string descriptor.
!					     This is a request to convert to
!					     'printable' format. Conversion must
!					     include check for unprintable characters.
!
!	target		- A longword which contains the address of either a VAX
!			  standard descriptor, or a language specific value descriptor
!
!	message_vect	- The address of a longword to contain the address of
!			  a message argument vector as described on page 4-119 of
!			  the VAX/VMS system reference, volume 1A
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	When this routine is called to obtain the 'printable' (external) value
!	of the source object, the target will contain the address of a VAX
!	standard string descriptor with length and pointer fields set to 0.
!	Dynamic storage must be obtained to contain the resulting ascii string.
!
!	In all other cases, this routine is not required to allocate storage to
!	contain the resulting value of a conversion request. Targets which are
!	described by VAX standard descriptors MUST contain the address of a
!	block of storage (the dsc$a_pointer field)
!	in which the resulting value of the conversion will be stored. 
!
!	Dynamic storage must be used to construct the message argument vector
!	upon a severe error return.
!
! ROUTINE VALUE:
!
!	unsigned integer longword completion code
!
! COMPLETION CODES:
!
!	STS$K_SUCCESS (1) - Success. Conversion performed.
!
!	STS$K_SEVERE  (4) - Failure. No conversion. Message argument vector
!			     constructed and returned.
!
! SIDE EFFECTS:
!
!	Informational messages such as string and number truncation may be 
!	issued during processing.
!
!--

    BEGIN

    MAP
	Source		: REF PAS$_Value_Desc,
	Target		: REF BLOCK [,Byte];

    BIND
	Message_Vector_Address		= .Message_Vect;

    ! Set up error trap
    !
    ENABLE
	PAS$_Error_Handler;

    PAS$_Message_Vector = Message_Vector_Address;

    ! Check for correct source language
    !
    IF .Source[DBG$B_Dhead_Lang] NEQ DBG$K_Pascal
    THEN
	SIGNAL(DBG$_WRONGLANG);

    RETURN
	(SELECTONE .Target_Type OF
	    SET

	[DBG$K_Value_Desc] :
	    !
	    ! Deposit
	    !
	    Value_Desc(.Source, .Target);

	[DBG$K_External_Desc] :
	    !
	    ! Convert to printable form
	    !
	    External_Desc(.Source, .Target_Radix, .Target);

	[DBG$K_Vax_Desc] :
	    !
	    ! CLI forced conversion
	    !
	    Vax_Desc(.Source, .Target);

	[OTHERWISE] :
	    !
	    ! the target_type has an illegal value
	    !
	    Pascal_Bugcheck(PAS$K_ILLARG);

	    TES);

    END;

END
ELUDOM
