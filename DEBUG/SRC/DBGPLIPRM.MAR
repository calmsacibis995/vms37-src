;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
	.title dbgpliprm
	.ident/v02-002/
	$dscdef
	$stsdef
	$dbgdef
	$dbglib
	$plidef
	$dstrecrds
	.subtitle primary interpreter
;
;GLOBAL ROUTINE DBG$NPLI_PRIM_INT (input_desc, result_type, result,
;++
; FUNCTIONAL DESCRIPTION:
;
;       Parses a maximal initial substring of the input string as a source
;       language symbolic reference or literal with certain DEBUG extensions.
;       Returns one of four types of data:
;
;       1) Primary descriptors are constructed for symbolic source language
;          entities. In addition, primary descriptors are constructed for
;          the DEBUG %LINE and %LABEL artifacts. Primary descriptors for
;          %LINE and %LABEL should retain enough information to allow
;          DBG$NxxxGETTYPE to associate a type of 'instruction' with the
;          described entity.
;
;       2) A value descriptor is obtained (from DBG$NGET_LASTVAL) for
;          the DEBUG pseudo symbol '\'.
;
;          Note that the other DEBUG pseudo-symbols, '^' and '.' are NOT
;          interpreted by this routine. They are to be regarded as syntax
;	   errors.
;
;       3) Permanent symbol descriptors are obtained (from DBG$NPERM_SYM_INT)
;          for the DEBUG permanent symbols R0-R11, AP, SP, PC, and PSL. If the
;          source language allows explicit operations on registers, then the
;          use of these symbols overrides user defined symbolic references
;          with the same name, unless an explicit pathname is given such as
;          MODULE\ROUTINE\R5. If the source language does not allow
;          explicit operations on integers, then a register name must be
;          preceeded with '%', such as %R5, to be recognized. Otherwise, the
;          symbol will be assumed to be a user defined symbolic reference.
;
;       4) An unsigned longword integer is returned as the value of numeric 
;          literals encountered in the input string. Literals which do not
;          represent longword integers (such as ASCII strings and aggregates)
;          are invalid.
;
; FORMAL PARAMETERS:
;
;       input_desc  -   A longword containing the address of a VAX standard
;                       string descriptor describing the input string
;
;       result_type -  The address of a longword to contain an unsigned 
;                       value specifying the interpretation of the result 
;                       parameter according to the following code:
;
;               dbg$k_literal (120)     - result is a signed longword integer
;                                         representing a numeric literal value
;                       
;               dbg$k_primary_desc (121) - result is the address of a primary
;                                          descriptor
;
;               dbg$k_value_desc (122)  -  result is the address of a value
;                                          descriptor
;
;               dbg$k_perm_desc (123)   -  result is the address of a
;                                          permanent symbol descriptor
;
;                       Note that strings purporting to be hexadecimal numeric
;                       literals are required to begin with a leading '0' such 
;                       as '0A15' to differentiate them from symbolic
;			references.
;
;       result       -  The address of a longword to contain either the address
;                       of one of the three types of descriptors mentioned 
;                       above, or a signed longword integer
;
;       radix        -  A longword which contains an unsigned integer code
;			which describes the radix to be used in the
;			interpretation of numeric literals as follows:
;
;               dbg$k_default (1)       - source language default radix
;               
;               dbg$k_binary (2)        - binary
;
;               dbg$k_octal (8)         - octal
;
;               dbg$k_decimal (10)      - decimal
;
;               dbg$k_hex (16)          - hexadecimal
;
;       message_vect - The address of a longword to contain the address of a
;                       message argument vector as described on page 4-119 of
;                       the VAX/VMS reference manual, volume 1A
;
; IMPLICIT INPUTS:
;
;       NONE
;
; IMPLICIT OUTPUTS:
;
;       Primary descriptors are constructed from dynamic storage.
;
;       In case of a severe error return, a message argument vector is
;       constructed from dynamic storage.
;
; ROUTINE VALUE:
;
;       unsigned integer longword completion code
;
; COMPLETION CODES:
;
;       STS$K_WARNING (0) -     Result returned. Unexpected input encountered.
;                       
;                               Note that some DEBUG commands allow address
;                               expression lists, seperated by commas. This
;                               return should be used in these cases ( or 
;                               when any foreign character is encountered
;                               following complete processing of a primary).
;
;       STS$K_SUCCESS (1) -     Result returned. No error encountered.
;                               Input string exhausted.
;
;       STS$K_ERROR   (2) -     No result returned. Syntax error encountered
;                               immediately - no input accepted.
;
;                               Note that this return should be used when
;				encountering any foreign character at the
;				start of primary processing such as a DEBUG
;				pseudo-symbol other than '\'.
;
;       STS$K_SEVERE  (4) -     No result returned. Fatal syntax or semantic 
;                               error encountered during processing of primary.
;                               Message argument vector returned. No input 
;                               accepted.
;
;                               Note that the input string descriptor fields 
;                               should be returned to their initial (on input)
;                               values even though some input characters (but
;                               not a complete primary string) have been
;				accepted.
;       
;
; SIDE EFFECTS:
;
;       The VAX standard string descriptor describing the input string is
;       updated to reflect the character following the last character accepted.
;
;       Informational message such as string or number truncation may be issued
;       during processing.
;
;--
;
; DESIGN
;
;
; Note that we use the debug address interpreter to perform address
; arithmetic. Future extensions will probably result in this routine
; building a parse tree and making the address calculations itself. This makes
; sure that operator precedence and extended functions (like addr(), %pli(),
; and %c() ) mesh reasonably with the language being debugged.
;
;
;
; BASIC ALGORITHM:
;
; 1) save input descriptor
;
; 2) call get_token(mode,input_desc,radix,no_path,token_type,result,
;		message_vect)
;	for first token
;
; 3) special case debug address expression tokens:
;	debug constant
;	%line
;	backslash
;	register
;
; 4) save original input descriptor
;
; 5) call pli_make_tree(input_desc,radix,
;			tree_pointer,initial_mode,code,msg_vect)
;	stacked parameter values are:
;	input_desc = pointer to input descriptor
;	tree_pointer = pointer to pointer to tree head
;	initial_mode = value
;	code = pointer to longword containing code. Return appropriate for
;		caller of dbgpliprm, i.e.
;		ok = no more input, warning = input desc. not 0
;
; 6) calculate length of original string
;
; 7) call pli_cool_tree(subtree_pointer,head_pointer,message_vect)
;
; 8) call get pli_get_pd_length(tree_pointer,length,message_vect)
;	length = pointer to longword where length is to be stored
;
; 9) get storage for primary descriptor
;
; 10) construct primary descriptor
;	(calling
;	pli_make_pd(tree_pointer,pd_pointer,message_vect)
;	in the process)
;
;
; ROUTINES CALLED:
;
;	get_token(mode,input_desc,radix,no_path,token_type,result,message_vect)
;	(which calls)
;	dbg$n_pn_parser
;	(which in turn calls)
;	pli_get_tok_prm
;
;	pli_make_tree(input_desc,radix,
;		tree_pointer,initial_mode,code,msg_vect)
;	pli_cool_tree(subtree_pointer,head_pointer,message_vector)
;	pli_get_pd_length(tree_pointer,length,message_vect)
;	pli_make_pd(tree_pointer,pd_pointer,message_vect)
;
;
;
; REGISTER     USE
;
;	r11	address of input string descriptor
;	fp	base of local storage
;
; local storage offsets from fp
current_node	=	 -4		;current node type
current_mode	=	 -8		;current mode
current_token_type =	-12		;current token type code
start_length	=	-16		;original length of input string
start_pointer	=	-20		;starting address of original string
hot_tree_code	=	-24		;code value from make_tree
hot_string_length =	-28		;length of hot tree as a string
pd_length 	=	-32		;length of primary descriptor
tree_pointer	=	-36		;pointer to head node of tree
result_vector_last =	-40		;result vector last longword
					;***warning*** must be last
local_storage_size = <result_vector_last - pli_tokr$k_size +4>;size in bytes of
					;local storage
result_vector	=	local_storage_size ;first longword of local storage
;
;parameter offset definitions
;
ap_input_desc	=	4		;input descriptor
ap_result_type	=	8		;result type code
ap_result	=	12		;pointer to result
ap_radix	=	16		;radix over-ride value
ap_message_vect	=	20		;message vector pointer


	.psect	dbg$code,exe,nowrt,long,pic,shr
;
	.entry	dbg$npli_prim_int,^m<r2,r3,r4,r5,r6,r7,r8,r9,r10,r11>
;
	movl	ap_input_desc(ap),r11	;address of input descriptor
	movzwl	dsc$w_length(r11),r6	;length of input string
	movl	dsc$a_pointer(r11),r7	;address of input string
;
;create work area for local values
;
	moval	<local_storage_size>(sp),sp ;get local storage
;
;initialize local storage
;
	movl	#pli_node_type$k_head,current_node(fp) ;current node is head
					;actually there is no head node at all
	movl	#pli_node_mode$k_dae,current_mode(fp) ;current mode = debug
					;address expression
	movl	r6,start_length(fp)	;initialize starting length
	movl	r7,start_pointer(fp)	;initialize starting pointer
;
;create parameter list for call to pli_get_token
	pushl	ap_message_vect(ap)	;parameter - message vector
	pushal	result_vector(fp)	;parameter - ptr. to result vector
	pushal	current_token_type(fp)	;parameter - ptr. to current token type
	pushl	#0			;look for path_name
	pushal	ap_radix(ap)		;parameter - ptr. to radix
	pushl	r11			;parameter - ptr. to input descriptor
	pushal	current_mode(fp)	;parameter - ptr. to current mode
;
;get the next token
;
	calls	#7,pli_get_token	;get the next token
	blbs	r0,100$			;branch if ok
	ret				;
100$:	movl	current_token_type(fp),r0 ;get type of token
	mull3	current_mode(fp),#<pli_node_type$k_last_type+1*4>,r1
					;displacement to node list for this
					;mode
	moval	parse_matrix,r3		;point to parse matrix
	addl2	r1,r3			;point to proper node list for mode
	movl	current_node(fp),r4	;get current node
	movl	(r3)[r4],r5		;point to token list for this mode and
					;node
	addl2	r3,r5			;relocate address
	movzbl	(r5)[r0],r2		;parse expression action code
	caseb	r2,#0,#<pea_last_code>
110$:	.word	never_error	- 110$	;there is no expression action zero
	.word	never_error	- 110$	;pea_ok; tree completed
	.word	never_error	- 110$	;pea_never; internal coding error
	.word	need_more	- 110$	;pea_null; no input, no tree
	.word	never_error	- 110$	;pea_warning; tree (possibly null),
					;warning return
	.word	error_exit	- 110$	;pea_error; null tree, unknown error
					;immediately
	.word	syntax_error	- 110$	;pea_severe; syntax error detected
	.word	never_error	- 110$	;pea_err_token; syntax error from
					;gettoken
	.word	never_error	- 110$	;pea_pop; up tree for left parenthesis
	.word	never_error	- 110$	;pea_comma; comma encountered
	.word	never_error	- 110$	;pea_ptr; pointer encountered
	.word	never_error	- 110$	;pea_subscript; subscripts 
					;(possible mode change)
	.word	never_error	- 110$	;pea_argument; arguments
					;(possible mode change)
	.word	200$		- 110$	;pea_first_id; first identifier in a
					;name
	.word	never_error	- 110$	;pea_more_id; identifiers in a name
					;after the first
	.word	never_error	- 110$	;pea_prefix; prefix operator
					;encountered
	.word	never_error	- 110$	;pea_infix; infix operator encountered
	.word	1700$		- 110$	;pea_dss; debug special symbol
					;encountered
	.word	never_error	- 110$	;pea_plivd; pli value descriptor
	.word	1900$		- 110$	;pea_dbgcon; debug constant (address)
	.word	never_error	- 110$	;pea_push; left parenthesis encountered
	.word	never_error	- 110$	;pea_err_ptr; error - pointer
	.word	never_error	- 110$	;pea_err_fun; error - function
	.word	never_error	- 110$	;pea_err_mis_rp; error - missing right
					;parenthesis
	.word	never_error	- 110$	;pea_err_var; error - variable name
	.word	2500$		- 110$	;pea_dbg_line; debug special symbol
					;%line encountered
	.word	2600$		- 110$	;pea_dbg_bs; debug special symbol
					;"\" encountered
	.word	never_error	- 110$	;pea_name_dot;should never happen
	.word	never_error	- 110$	;pea_err_more_name; should never happen
	.word	severe_msg	- 110$	;pea_severe_msg - gettoken had error
	.word	never_error	- 110$	;pea_err_more_scr
	.word	never_error	- 110$	;pea_err_more_operand
	.word	never_error	- 110$	;pea_need_scr_got_id
	.word	never_error	- 110$	;pea_need_scr_got_dbgc
	.word	never_error	- 110$	;pea_need_scr_got_plic
	.word	never_error	- 110$	;pea_need_scr_got_dbgr
	.word	never_error	- 110$	;pea_need_scr_got_bs
	.word	never_error	- 110$	;pea_need_scr_got_oper
	.word	never_error	- 110$	;pea_need_scr_got_lpar
	.word	never_error	- 110$	;pea_need_operand_got_lpar
	.word	never_error	- 110$	;pea_need_operand_got_id
	.word	never_error	- 110$	;pea_need_operand_got_dbgc
	.word	never_error	- 110$	;pea_need_operand_got_plic
	.word	never_error	- 110$	;pea_need_operand_got_dbgr
	.word	never_error	- 110$	;pea_need_operand_got_bs
	.word	never_error	- 110$	;pea_continue
	brw	never_error		;bad parse table action code
;
;
; First token is not a special debug address interpreter token so we go
; parse the string as an expression with mode as pli_node_mode$k_dae.
; If we have 
;		A + B
; as the expression, then this parse will succeed in identifying the "A"
; and will terminate with "+" and give a warning exit. If the mode were
; pli_node_mode$k_pli then the "+" is interpreted as a pli add operator
; and the parse absorbs it.
;
; Note that        PTR -> A.B.C 
; parsed in mode pli_node_mode$k_dae results in the "->" being absorbed.
; Top level tokens that do stop the parse include "(", ")", "+", "-",
; "*" etc.
;
; Note: We have already special cased out initial tokens:
;	debug constant
;	%line
;	backslash
;	register (%r0, %r1, ... %psl)
;	special tokens ")(+-,*/"
;
;
; terminology:
;	hot tree: this is an expression tree which represents the parsed
;		input string in a canonical form. It could be used by a
;		pretty print routine to convert the input string to a
;		standard form (pretty printed). No variable values are
;		determined, no functions called. Symids are determined
;		for all names that are static (in pli, this is all names).
;
;	cool tree: the hot tree is converted to a cool tree by the
;		following actions. The idea is to capture a symbolic
;		form of the location specified that is useful when for
;		example, a watchpoint is triggered and we want to display
;		the contents of the watched location. This cannot be done
;		in anything like a complete fashion. Ideally we would represent
;		an address symbolically but values may have changed so that we
;		can not always use the input string originally used to
;		represent the address. We may have, for example, created a PD
;		using the command:
;			set watch x(i)
;		But when the watchpoint is taken, i may have a new value so
;		that x(i) is inappropriate as the symbolic address. Displaying
;		the watchpoint as a hexadecimal address does not seem
;		appropriate either. The compromise is to capture the value of i
;		and display
;			x(3)	(if i had value 3 when the watchpoint was set).
;		If 
;			ptr -> x
;		and the value for ptr is the same when we wish to display the
;		address, we can use
;			ptr -> x
;		otherwise, we use the actual hexadecimal address:
;			0000845C -> x
;
;		problems:
;			1) p1 -> z -> x may result in the same final address
;			  but different values for p1 and p1 -> z
;			  now exist.
;
;			 current solution: if ANY values are different, we
;				display the address as a hexadecimal number
;
;			2) fnct() -> x
;			  We can not always re-invoke the function (to
;			  determine if the address has changed because the
;			  function may have side effects).
;			 current solution: In this case we always display
;			 the hexadecimal address
;
;
;	In particular, to create a cool tree we do the following:
;
;
;		1) all subscripts are evaluated (a potentially complex
;		  operation involving pli expressions of arbitrary complexity.)
;
;		2) Functions are called and function arguments are 
;		  evaluated with the exception of the (first operand of the)
;		  first pointer of the expression or a single top level
;		  function (whose value is eventually used to produce an lval)
;
;		3) Pointers are NOT evaluated although their values are
;		  eventually obtained and saved in the primary descriptor.
;
;
;
;	Frozen tree: All functions that may have side effects (or would
;	in general, produce different results with another call) have
;	been executed (once). They should never be executed again. The
;	tree may or may not contain function nodes corresponding to these
;	functions. Presumably the values of the functions are stored someplace
;	(in the primary descriptor).
;
;
;
;
;
200$:					;
;
; start over again and make a tree out of the original input line
;
	movl	#dbg$k_primary_desc,@ap_result_type(ap) ;result type code
	movw	start_length(fp),dsc$w_length(r11) ;restore original length
	movl	start_pointer(fp),dsc$a_pointer(r11) ;and pointer of input
	pushl	ap_message_vect(ap)	;copy message vector
	pushal	hot_tree_code(fp)	;for code from make tree
	pushl	#pli_node_mode$k_dae	;tree is to be an address expression
	pushal	tree_pointer(fp)	;tree head node pointer
	pushl	ap_radix(ap)		;pass radix value
	pushl	r11			;input string descriptor
	calls	#6,pli_make_tree	;make the expression tree
	blbs	r0,210$			;branch if ok
	ret				;
210$:
	movzwl	dsc$w_length(r11),r0	;current left over length
	subl3	start_length(fp),r0,-	;length of parsed string
		hot_string_length(fp)	;
;
;validate the tree
;
	pushl	ap_message_vect(ap)	;pass along message vector
	pushl	tree_pointer(fp)	;ree head address
	calls	#2,pli_validate_tree	;validate the tree
	blbs	r0,220$			;branch if ok
	ret				;
;
; cool the tree
;
220$:					;
	pushl	ap_message_vect(ap)	;pass along message vector
	pushl	tree_pointer(fp)	;tree head address
	pushl	(sp)			;subtree to cool
	calls	#3,pli_cool_tree	;cool the tree
	blbs	r0,230$			;branch if ok
	ret				;
;
;determine the number of top level pointers in the cool tree
;
230$:
;
;find the length of the primary descriptor
;
	pushl	ap_message_vect(ap)	;pass along message vector
	pushal	pd_length(fp)		;cool representation length
	pushal	tree_pointer(fp)	;tree head pointer
	calls	#3,pli_get_pd_length 	;get the length of primary descriptor
;
;calculate the length of the primary descriptor and obtain required storage
;all this work is necessary so that the primary descriptor will be contiguous
;and position independent.
;
	pushl	ap_message_vect(ap)	;copy message vector
	pushl	ap_result(ap)		;longword for pointer to free storage
	addl3	pd_length(fp),#3,r3	;add round factor for longword convert
	ashl	#-2,r3,-(sp)		;push number of longwords needed
	calls	#3,dbg$nlist_freez	;get listed (zeroed) storage
	blbs	r0,250$			;branch if got the storage
	ret				;
250$:					;
	movl	@ap_result(ap),r0	;point to free storage
	movw	r3,dsc$w_length(r0)	;put in length of pd
	pushl	ap_message_vect(ap)	;pass along message vector
	pushl	ap_result(ap)		;use free area obtained earlier
	pushal	tree_pointer(fp)	;parameter - pointer to head node
	calls	#3,pli_make_pd		;cool representation obtained
	blbs	r0,350$			;branch if ok
	ret				;
350$:					;
	movl	hot_tree_code(fp),r0	;return code from pli_make_tree
	ret				;return
;
;***************************************************************************
;*                                                                         *
;*  debug special symbol (register)					   *
;*                                                                         *
;***************************************************************************
;
;
;pea_dss	=	17		;debug special symbol (register)
;
1700$:					;
	movl	#dbg$k_perm_desc,@ap_result_type(ap) ;result=permanent
					;descriptor
	pushl	ap_message_vect(ap)	;address of message vector
	pushl	<result_vector+pli_tokr$l_3>(fp) ;pathname pointer
	pushl	ap_result(ap)		;address of permanent symbol descriptor
	pushl	<result_vector+pli_tokr$l_2>(fp) ;register code
	calls	#4,dbg$nperm_sym_int	;get value of permanent symbol
	blbs	r0,1710$		;branch if got permanent symbol value
	brw	severe_exit		;severe error return
1710$:					;
	brw	more_check		;see if anything more on input line
;
;
;pea_dbgcon	=	19		;debug constant (address)
;
;***************************************************************************
;*                                                                         *
;*  debug constant (address)                                               *
;*                                                                         *
;***************************************************************************
;
1900$:					;
	movl	#dbg$k_literal,@ap_result_type(ap) ;result = literal address
	movl	<result_vector+pli_tokr$l_2>(fp),- ;address specified
		@ap_result(ap)		;returned as result
	brw	more_check		;see if anything more on input line
;
;***************************************************************************
;*                                                                         *
;*  %line								   *
;*                                                                         *
;***************************************************************************
; construct simplified primary descriptor for this case
; layout looks as follows:
;	+-------------------------------+
;	!	pd fixed size		!
;	+-------------------------------+
;	!	head node		!
;	+-------------------------------+
;	!	operator named other	!
;	+-------------------------------+
;	!	name node other		!
;	+-------------------------------+
;	!	structure descriptor	!
;	+-------------------------------+
;	!	value descriptor	!
;	+-------------------------------+
;	!	input string		!
;	+-------------------------------+
;
2500$:					;
	movl	<result_vector + pli_tokr$l_2>(fp),r9 ;pathname vector
	movl	<result_vector + pli_tokr$l_0>(fp),r6 ;token length
	movl	<result_vector + pli_tokr$l_1>(fp),r7 ;token address
;
;calculate the length of the primary descriptor which is:
; note: this is a special primary descriptor
;
	movl	#dbg$k_primary_desc,@ap_result_type(ap) ;result type code
	pushl	ap_message_vect(ap)	;copy message vector
	pushl	ap_result(ap)		;longword for pointer to free storage
	addl3	#pli_pd$k_fixed_size+-	;fixed size of primary descriptor+
		pli_head_node$k_size+-	;head node size+
		pli_node_opr$k_size+-	;operator node size+
		pli_node_nam$k_size+-	;name node size+
		pli_struct_desc$k_size+-;structure descriptor size+
		pli_vd$k_size+-		;value descriptor size+
		3,r6,r3			;length of token +3 (round factor)
;
;note: to simplify copying, we specify the size needed by the general
;	tree copying routine. This routine will make a separate copy of
;	the input string token for each node. Since this pd uses the
;	single string placed at the end of the descriptor, we still
;	have to specify space as though separate copies were made. This
;	is because the length of this pd is used when making a copy of
;	the primary descriptor
;
	addl2	r6,r3			;input token length for operator node
	addl2	r6,r3			;input token length for name node
	pushl	r9			;address of pathname vector
	calls	#1,pli_get_pn_desc_size	;get the size of the pathname descr.
	addl2	r0,r3			;add length to total tree size
	ashl	#-2,r3,-(sp)		;push number of longwords needed
	calls	#3,dbg$nlist_freez	;get listed (zeroed) storage
	blbs	r0,2520$		;branch if got the storage
	ret				;
2520$:	movl	@ap_result(ap),r5	;point to primary descriptor
	movw	r3,dsc$w_length(r5)	;length of primary descriptor in header
	movb	#dbg$k_pli,dsc$b_class(r5) ;language code
	movb	#dbg$k_primary_desc,dsc$b_dtype(r5) ;type code into header
	movl	#pli_pd$k_type_line,pli_pd$l_type(r5) ;type of primary desc.
;
;create head node
;
	moval	pli_pd$l_head_node(r5),r4 ;point to head node
	moval	pli_head_node$k_size(r4),pli_node_flink(r4) ;flink to operator
	moval	pli_head_node$k_size(r4),pli_node_blink(r4) ;blink to operator
	movl	#pli_node_type$k_head,pli_node_type(r4) ;type=head node
	movl	#1,pli_node_ident(r4)	;first node in tree
	moval	pli_pd$k_fixed_size+-	;fixed size of primary descriptor+
		pli_head_node$k_size+-	;head node size+
		pli_node_opr$k_size+-	;operator node size+
		pli_node_nam$k_size+-	;name node size+
		pli_struct_desc$k_size+-;structure descriptor size+
		pli_vd$k_size-		;value descriptor size+
		(r5),pli_node$a_str(r4)	;point to input string
	movw	r6,pli_node$w_sl(r4)	;length of input string
	movl	#3,pli_head_node_count(r4) ;total nodes in tree
	movb	g^dbg$gb_verb,pli_head_node_orig_verb(r4) ;originating verb
;
;create operator node
;
	moval	pli_head_node$k_size(r4),r4 ;point to start of operator node
	moval	-pli_head_node$k_size(r4),pli_node_flink(r4) ;flink to name
	moval	-pli_head_node$k_size(r4),pli_node_blink(r4) ;blink to name
	movl	#pli_node_type$k_oprno,pli_node_type(r4) ;operator named other
	movl	#2,pli_node_ident(r4)	;node identifier
	moval	pli_pd$k_fixed_size+-	;fixed size of primary descriptor+
		pli_head_node$k_size+-	;head node size+
		pli_node_opr$k_size+-	;operator node size+
		pli_node_nam$k_size+-	;name node size+
		pli_struct_desc$k_size+-;structure descriptor size+
		pli_vd$k_size-		;value descriptor size+
		(r5),pli_node$a_str(r4)	;point to input string
	movw	r6,pli_node$w_sl(r4)	;length of input string
	movl	#1,pli_node_opr_arg_cur(r4) ;one argument
	movl	#1,pli_node_opr_arg_min(r4) ;minimum number of arguments
	movl	#1,pli_node_opr_arg_max(r4) ;maximum number of arguments
	moval	pli_node_opr$k_size(r4),pli_node_opr_sub_fl(r4) ;flink to name
	moval	pli_node_opr$k_size(r4),pli_node_opr_sub_bl(r4) ;blink to name
;
;create name node
;
	moval	pli_node_opr$k_size(r4),r4 ;point to name node
	moval	-pli_node_opr$k_size(r4),pli_node_flink(r4) ;flink to opr node
	moval	-pli_node_opr$k_size(r4),pli_node_blink(r4) ;blink to opr node
	movl	#pli_node_type$k_nameo,pli_node_type(r4) ;operator named other
	movl	#3,pli_node_ident(r4)	;node identifier
	moval	pli_pd$k_fixed_size+-	;fixed size of primary descriptor+
		pli_head_node$k_size+-	;head node size+
		pli_node_opr$k_size+-	;operator node size+
		pli_node_nam$k_size+-	;name node size+
		pli_struct_desc$k_size+-;structure descriptor size+
		pli_vd$k_size-		;value descriptor size+
		(r5),pli_node$a_str(r4)	;point to input string
	movw	r6,pli_node$w_sl(r4)	;length of input string

	movl	r9,pli_node_nam_pn_ptr(r4) ;put in pathname pointer
	pushal	pli_node_nam_kind(r4)	;parameter kind code longwords addr
	pushal	pli_node_nam_symid(r4)	;parameter - symid
	pushl	r9			;parameter - pathname vector
	calls	#3,dbg$sta_getsymbol	;get symid
	cmpl	#rst$k_line,pli_node_nam_kind(r4) ;make sure no internal error
	beql	2530$			;branch if ok
;
; line does not exist as far as debugger is concerned
;
	pushl	r7			;address of token
	pushl	r6			;length of token
	pushl	#2			;number of $fao arguments
	pushl	#dbg$_notfound		;not found message code
	movl	#4,r0			;make_arg_vect parameter count
	brw	setup_severe		;go create message vector
2530$:					;
;
;call symvalue to get address and valkind values
;
	pushl	pli_node_nam_symid(r4)	;symid for this %Line
	calls	#1,dbg$sta_setcontext	;set the context
;
;point to structure descriptor and value descriptor
;
	moval	pli_node_nam$k_size(r4),r3 ;point to structure descriptor
	moval 	pli_struct_desc$k_size(r3),r2 ;point to value descriptor
	movl	r3,pli_node_nam_desc_ptr(r4) ;name node's struc. desc. ptr.
	movl	r2,pli_node_nam_vd_ptr(r4) ;name node's value desc. ptr.
	movl	pli_node_nam_symid(r4),pli_struct_desc_symid(r3) ;copy symid
	movl	pli_node_nam_kind(r4),pli_struct_desc_kind(r3) ;copy kind code
	pushal	pli_struct_desc_valkind(r3);address to receive valkind code
	pushal	pli_struct_desc$l_byte(r3) ;address of valptr 3 longwords
	pushl	pli_node_nam_symid(r4)	;symid for this %line
	calls	#3,dbg$sta_symvalue	;get the address and valkind
	movl	pli_struct_desc$l_byte(r3),pli_vd$a_ptr(r2) ;pointer to data
	movl	pli_struct_desc$l_bit(r3),pli_vd$l_boff(r2) ;bit offset
;
;put in invoking string
;
	moval	pli_vd$k_size(r2),r4	;point to free area
	movc3	r6,(r7),(r4)		;put in token string
	brw	more_check		;see if any more on the input line
;
;pea_dbg_bs	=	26		;debug special symbol "\" encountered
;
;
;
;***************************************************************************
;*                                                                         *
;*  backslash                                                              *
;*                                                                         *
;***************************************************************************
;
2600$:	movl	#dbg$k_value_desc,@ap_result_type(ap) ;result = value
					;descriptor
	pushl	ap_message_vect(ap)	;address of pointer to message vector
	pushl	ap_result(ap)		;address of result longword
	calls	#2,dbg$nget_lastval	;get last value
	blbs	r0,2610$		;branch if ok
	brw	severe_exit		;severe return if failure
2610$:	brw	more_check		;new backup point
;
;***************************************************************************
;*                                                                         *
;*    error processing                                                     *
;*                                                                         *
;***************************************************************************
;
;
;severe error return, gettoken formatted the error message
;
severe_msg:				;severe error, result vector has msg
	movl	result_vector+pli_tokr$l_2(fp),- ;copy the pointer to the
		@ap_message_vect(ap)	;message vector pointer
	movw	start_length(fp),dsc$w_length(r11) ;restore old length
	movl	start_pointer(fp),dsc$a_pointer(r11) ;restore old pointer
	brw	severe_exit		;return with severe exit code
;
;syntax error detected as part of parse
;
syntax_error:				;
	pushl	#0			;to hold pointer to message vector
	pushl	ap_message_vect(ap)	;pass along message vector
	pushal	4(sp)			;parameter points to free pointer
	pushl	#2			;2 longwords of storage needed
	calls	#3,dbg$nlist_freez	;get the storage
	blbs	r0,10$			;branch if ok
	ret				;
10$:	popl	r1			;get the address of free storage
	movzwl	start_length(fp),r0	;get old length
	decl	r0			;don't count CR at the end
	bgeq	20$			;branch if not negative
	clrl	r0			;otherwise keep it at zero
20$:	movw	r0,dsc$w_length(r1)	;restore old length
	movl	start_pointer(fp),dsc$a_pointer(r1) ;restore old pointer
	movb	#dsc$k_class_s,dsc$b_class(r1) ;scalar descriptor class code
	movb	#dsc$k_dtype_t,dsc$b_dtype(r1) ;text data type
	pushl	r1			;input descriptor for bad string
	pushl	#1			;one fao argument
	pushl	#dbg$_invexpr		;invalid expression debug message code
	calls	#3,dbg$nmake_arg_vect	;unexpected end of command line
	movl	r0,@ap_message_vect(ap) ;update pointer to message vector
	movw	start_length(fp),dsc$w_length(r11) ;restore old length
	movl	start_pointer(fp),dsc$a_pointer(r11) ;restore old pointer
	brw	severe_exit		;return with severe exit code
;
;all blanks encountered
;exit will be with code sts$k_severe
;
need_more:				;
	pushl	#dbg$_needmore		;code for message descriptor
	movl	#1,r0			;make_arg_vect parameter count
;
;set up message vector and return with error code = sts$k_severe
;enter with arguments stacked for dbg$nmake_arg_vect and
;r0 = number of such arguments
;
setup_severe:				;
	calls	r0,dbg$nmake_arg_vect	;unexpected end of command line
	movl	r0,@ap_message_vect(ap)	;update pointer to message vector
	brw	severe_exit		;update descriptor and return
;
;signal internal coding error
;
never_error:				;should never execute
	movl	#pli$k_never,r0		;never code
;
;inconsistency within this module (or bad parameter passed to this module
;on input, r0 contains error type (pli debug error codes 200 - 299)
;error will be signaled
;
bug_check:				;
	pushl	r0			;error type
	pushl	#1			;one fa0 argument
	pushl	#dbg$_debugbug		;pli debug module error
	calls	#3,lib$signal		;signal error, should never return
	movl	#dbg$_debugbug,r0	;return code
	ret				;
;
;***************************************************************************
;*                                                                         *
;*   exit processing                                                       *
;*                                                                         *
;***************************************************************************
;
; more_check assumes that r11 points to the input string descriptor
;
more_check:
	cmpw	dsc$w_length(r11),#1	;any more input?
	bgtr	warning_exit		;branch if more
	clrw	dsc$w_length(r11)	;clean up length in case it is 1
	clrl	dsc$a_pointer(r11)	;clear address field	
ok_exit: 				;
	movl	#sts$k_success,r0	;success return code
	ret				;
warning_exit:				;
	movl	#sts$k_warning,r0	;seems to be more, e.g. a ","
	ret				;
error_exit:				;
	movw	start_length(fp),dsc$w_length(r11) ;restore old length
	movl	start_pointer(fp),dsc$a_pointer(r11) ;restore old pointer
	movl	#sts$k_error,r0		;1st character is illegal
	ret				;
severe_exit:				;
	movl	#sts$k_severe,r0	;error in middle of parse
	ret				;

	.end
