MODULE	PASSYNEXP ( ! Expression Syntax Routines for Pascal-Specific
		    ! Debugger Modules
		  IDENT = 'V03-000'
		  )=
BEGIN
!
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!
!++
!
! FACILITY:	VAX-11 PASCAL-SPECIFIC DEBUGGER MODULES
!
! ABSTRACT:
!
!	This module is the main portion of the Pascal-Plus recursive
!	descent Parser.
!
! ENVIRONMENT:	VAX/VMS user mode
!
! AUTHOR: Robert Gottlieb, CREATION DATE: 21-Jan-1980
!
! MODIFIED BY: P. Hohensee	17-July-1980	Stolen from PASCAL-PLUS
!
!--

REQUIRE 'SRC$:PASPROLOG';
REQUIRE 'SRC$:PASSYNMAC';

!
! Table of Contents
!
FORWARD ROUTINE
	PAS$_SYN_Expression	: Syntax_Routine NOVALUE,	! <Expression>
	SYN_Factor		: Syntax_Routine NOVALUE,	! <Factor>
	PAS$_SYN_Function	: Syntax_Routine NOVALUE,	! <Function Designator>
	SYN_Primary		: Syntax_Routine NOVALUE,	! <Primary>
	SYN_Set			: Syntax_Routine NOVALUE,	! <Set>
	SYN_Simple_Expression	: Syntax_Routine NOVALUE,	! <Simple Expression>
	SYN_String		: Syntax_Routine NOVALUE,	! <String>
	SYN_Term		: Syntax_Routine NOVALUE,	! <Term>
	PAS$_SYN_Variable	: Syntax_Routine NOVALUE;	! <Variable>

!
! EXTERNAL ROUTINES
!
EXTERNAL ROUTINE
	PAS$_Lex_Enter_Name,					! Enter/Lookup a name in the Name Table

	PAS$_Get_Token		: Syntax_Routine NOVALUE,	! Gets the next token
	PAS$_Scan_Token		: Syntax_Routine NOVALUE,	! Scanner used by the
								! Kernal Pathname Parser
	PAS$_Backup_Scanner	: Syntax_Routine NOVALUE,	! Back the scanner up to just before
								! the current token was scanned
								! Any look-ahead is elminated
	PAS$_Look_Ahead_Token	: Syntax_Routine NOVALUE;	! Look Ahead N Tokens

!
! EXTERNAL Storage:
!
EXTERNAL
	PAS$_Message_Vector		: LONG,			! Address of address of error message vector

	!
	! Lexical Analysis
	!
	PAS$_Scanning_Pathname		: BYTE UNSIGNED,	! True = Scanning a pathname
	PAS$_Lex_Column			: WORD UNSIGNED,	! Current source column
	PAS$_Lex_SrcDesc		: BLOCK [8, BYTE],	! Source string descriptor
	PAS$_Lex_LineDesc		: BLOCK [8, BYTE],	! Original source string descriptor

	!
	! Syntax Analysis
	!
	PAS$_Tokens			: VECTOR [4, LONG],	! Look-Ahead Tokens
	PAS$_Token_Values		: NULLVECTOR [4, 16],	! Look-Ahead Values
	PAS$_Token_Types		: VECTOR [4, LONG],	! Look-Ahead Value Types
	PAS$_Token_Positions		: VECTOR [4, LONG],	! Look-Ahead Token Line Number
	PAS$_Look_Ahead			: LONG;			! # of Tokens of Look-Ahead

!
! Semantic Analysis EXTERNALs
!
EXTERNAL
	PAS$_Is_Primary			: BYTE UNSIGNED,	! True = in Primary Interpreter,
								! False = in Expression Interpreter

	PAS$_Current_Symbol_Header	: LONG,			! Pointer to Linked List
	PAS$_Current_Symbol_Trailer	: LONG,			! Pointer to Linked List
	PAS$_Expr_Depth			: LONG,			! Expression Stack Depth
	PAS$_Expr_Stack			: BLOCKVECTOR [Expr_Stack_Depth, Expr_S_Entry, BYTE]
	    FIELD(Expression_Stack_Fields);			! Expression Stack

!
! EXTERNAL ROUTINEs for Semantics
!
EXTERNAL ROUTINE
	PAS$_Sem_Addition		: NOVALUE,	! Addition
	PAS$_Sem_AND			: NOVALUE,	! AND
	PAS$_Sem_Append_Integer		: NOVALUE,	! Append integer onto string literal
	PAS$_Sem_Append_String		: NOVALUE,	! Append string literal onto string literal
	PAS$_Sem_Arithmetic_Binary_Op	: NOVALUE,	! general for Math binary ops
	PAS$_Sem_Boolean_Binary_Op	: NOVALUE,	! general for Boolean binary Ops
	PAS$_Sem_Comparison_Binary_Op	: NOVALUE,	! general for Comparisons
	PAS$_Sem_DIV			: NOVALUE,	! DIV
	PAS$_Sem_Divide			: NOVALUE,	! Division
	PAS$_Sem_Equal			: NOVALUE,	! Equal
	PAS$_Sem_Exponentiation		: NOVALUE,	! Exponentiation
	PAS$_Sem_Field			: NOVALUE,	! Field Access
	PAS$_Sem_Float_F		: NOVALUE,	! Floating F Literal
	PAS$_Sem_Float_D		: NOVALUE,	! Floating D Literal
	PAS$_Sem_Float_G		: NOVALUE,	! Floating G Literal
	PAS$_Sem_Float_H		: NOVALUE,	! Floating H Literal
	PAS$_Sem_Function_Call_1	: NOVALUE,	! Function Call
	PAS$_Sem_Function_Call_2	: NOVALUE,	! Function Call
	PAS$_Sem_Greater		: NOVALUE,	! Greater Than
	PAS$_Sem_GreaterEqual		: NOVALUE,	! Greater Than or Equal to
	PAS$_Sem_IN			: NOVALUE,	! IN
	PAS$_Sem_Inclusive_OR		: NOVALUE,	! OR
	PAS$_Sem_Integer		: NOVALUE,	! <Integer Constant>
	PAS$_Sem_Label_Reference	: NOVALUE,	! %LABEL
	PAS$_Sem_Last_Value		: NOVALUE,	! Debug Last Value ('\')
	PAS$_Sem_Less			: NOVALUE,	! Less Than
	PAS$_Sem_LessEqual		: NOVALUE,	! Less Than or Equal to
	PAS$_Sem_Line_Reference		: NOVALUE,	! %LINE
	PAS$_Sem_MOD			: NOVALUE,	! MOD
	PAS$_Sem_Multiply		: NOVALUE,	! Multiply
	PAS$_Sem_Negation		: NOVALUE,	! Negation
	PAS$_Sem_NOT			: NOVALUE,	! NOT
	PAS$_Sem_NotEqual		: NOVALUE,	! Not Equal
	PAS$_Sem_Permanent_Symbol	: NOVALUE,	! Debug Permanent Symbol (%R0 - %PSL)
	PAS$_Sem_Set_Binary_Op		: NOVALUE,	! Binary Ops for Sets
	PAS$_Sem_Set_1			: NOVALUE,	! <Set> #1
	PAS$_Sem_Set_2			: NOVALUE,	! <Set> #2
	PAS$_Sem_Set_3			: NOVALUE,	! <Set> #3
	PAS$_Sem_Set_4			: NOVALUE,	! <Set> #4
	PAS$_Sem_String			: NOVALUE,	! String
	PAS$_Sem_Subscript		: NOVALUE,	! Subscripting
	PAS$_Sem_Subtraction		: NOVALUE,	! Subtraction
	PAS$_Sem_UpArrow		: NOVALUE,	! Pointer Reference
	PAS$_Sem_Variable		: NOVALUE,	! Variable
	PAS$_Sem_Variable_Reference	: NOVALUE;	! Variable Reference

GLOBAL ROUTINE PAS$_SYN_Expression : Syntax_Routine NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine handles the following productions:
!
!	<Expression> ::= <simple Expression>
!		      |  <simple Expression> <relational operator> <simple Expression>
!
!	<relational operator> ::=  =
!			       |   <>
!			       |   <
!			       |   <=
!			       |   >=
!			       |   >
!			       |   IN
! FORMAL PARAMETERS:
!
!	NONE
!
!--

    BEGIN
	Syntax_Routine_Registers;

    LOCAL
	Operator		: LONG;


    SYN_Simple_Expression();

    ! Determine if this is relation or just an Expression
    !
    IF In_Set(.Token, Equal, NotEqual, Less, Greater, LessEqual, GreatEqual, IN)
    THEN

	! Relational, call <Simple Expression> again
	!
	BEGIN
	Operator       = .Token;

	PAS$_Get_Token();

	SYN_Simple_Expression();

	IF .Operator EQL Syn_K_IN
	THEN
	    PAS$_Sem_IN()
    
	ELSE
	    CASE .Operator
		FROM Min_Token(Equal, NotEqual, Less, Greater, LessEqual, GreatEqual)
		TO   Max_Token(Equal, NotEqual, Less, Greater, LessEqual, GreatEqual)
		OF   SET
	
	[Syn_K_Equal]:
		PAS$_Sem_Equal();
	
	[Syn_K_NotEqual]:
		PAS$_Sem_NotEqual();
	
	[Syn_K_Less]:
		PAS$_Sem_Less();
	
	[Syn_K_Greater]:
		PAS$_Sem_Greater();
	
	[Syn_K_LessEqual]:
		PAS$_Sem_LessEqual();
	
	[Syn_K_GreatEqual]:
		PAS$_Sem_GreaterEqual();
	
	[INRANGE, OUTRANGE]:
		Pascal_Bugcheck(PAS$K_PARSERR);	! Should never have gotton this far
		TES;

	END;

    END;

ROUTINE SYN_Factor : Syntax_Routine NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine handles the following productions:
!
!	<Factor> ::= <Variable>
!		 |   <Unsigned Constant>
!		 |   ( <Expression> )
!		 |   <Function Designator>
!		 |   <Set>
!		 |   NOT <Factor>
!		 |   \
!		 |   <Label Reference Variable>
!		 |   <Line Reference Variable>
!		 |   <Permanent Symbol Reference>
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	PAS$_Expr_Stack	- The Expression stack is used to pass information
!
! IMPLICIT OUTPUTS:
!
!	PAS$_Expr_Stack	- The Expression stack is used to pass information
!
!--

    BEGIN
	Syntax_Routine_Registers;

    CASE .Token
	FROM Min_Token(Ident, 'String', Integer, Float)
	TO   Max_Token(Ident, 'String', Integer, Float)
	OF   SET

	! <Factor> ::= <Unsigned Constant>
	!
[Syn_K_Integer]:
	BEGIN

	! Might be a pathname
	!
	PAS$_Look_Ahead_Token(1);

	IF .PAS$_Tokens[1] EQL Syn_K_Backslash
	THEN
	    ! Pathname
	    !
	    BEGIN
	    PAS$_Syn_Variable();

	    PAS$_Sem_Variable_Reference();
	    END

	ELSE
	    ! Integer constant
	    !
	    BEGIN
	    PAS$_Sem_Integer( PAS$_Token_Values[0] );

	    PAS$_Get_Token();
	    END;

	END;

[Syn_K_Float] :
	BEGIN
	CASE .Token_Type FROM Lex_K_Float_F TO Lex_K_Float_H OF
	    SET
    
	[Lex_K_Float_F]:
	    PAS$_Sem_Float_F( PAS$_Token_Values[0] );
    
	[Lex_K_Float_D]:
	    PAS$_Sem_Float_D( PAS$_Token_Values[0] );
    
	[Lex_K_Float_G]:
	    PAS$_Sem_Float_G( PAS$_Token_Values[0] );
    
	[Lex_K_Float_H]:
	    PAS$_Sem_Float_H( PAS$_Token_Values[0] );
    
	    TES;

	PAS$_Get_Token();
	END;

	! <Factor> ::= <String>
	!
[Syn_K_String]:

	Syn_String();


	! <Factor> ::= <Variable>
	!
[Syn_K_Ident] :
	BEGIN

	! Functions and constant constructors have to go in here at some point
	!
	PAS$_Syn_Variable();

	PAS$_Sem_Variable_Reference();
	END;

[OUTRANGE]:
	SELECTONE .Token OF
	    SET
    
	    ! <Factor> ::= ( <Expression> )
	    !
    [Syn_K_OpenParen]:
	    BEGIN
	    PAS$_Get_Token();
    
	    PAS$_SYN_Expression();
    
	    ! Expecting a ")". If this is not it, give an error
	    !
	    IF .Token NEQ Syn_K_CloseParen
	    THEN
		SIGNAL(DBG$_NOTRPAREN);

	    ! Skip a ")", if any
	    !
	    PAS$_Get_Token();
	    END;
    
	    ! <Factor> ::= <Set>
	    !
    [Syn_K_OpenBrkt] :
	    SYN_Set();

    
	    ! <Factor> ::= NOT <Factor>
	    !
    [Syn_K_NOT] :
	    BEGIN
	    PAS$_Get_Token();

	    SYN_Factor();
    
	    PAS$_Sem_NOT();
	    END;

	    ! <Factor> ::= \ | <Permanent Symbol Reference>
	    !
    [Syn_K_Backslash, Syn_K_$R0 TO Syn_K_$PSL] :
	    BEGIN
	    PAS$_Syn_Variable();

	    PAS$_Sem_Variable_Reference();
	    END;

    [OTHERWISE] :
	    !
	    ! Illegal expression
	    !
	    SIGNAL(DBG$_INVEXPR);

	    TES;
	TES;
	
    END;

GLOBAL ROUTINE PAS$_SYN_Function : Syntax_Routine NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine handles the following productions:
!
!	<Function Designator> ::= <Function Identifier>
!			      |   <Function Identifier> ( <Actual Parameter> { , <Actual Parameter> } )
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	PAS$_Expr_Stack	- Used to remember Stack Information
!
! IMPLICIT OUTPUTS:
!
!	PAS$_Expr_Stack	- Used to remember Stack Information
!
!--

    BEGIN
	Syntax_Routine_Registers;

    LOCAL
	Symbol_Entry		: REF BLOCK [,BYTE] FIELD(Symbol_Fields);

    BIND
	Name_Entry		= .Token_Value : BLOCK [,BYTE] FIELD(Nam_Fields);

    ! Must be a Function; if not, Error
    !
    IF
	(IF .Token EQL Syn_K_Ident THEN (Name_Entry EQLA 0) ELSE True)
    THEN
	Pascal_BugCheck(PAS$K_PARSERR);

    ! Skip the Variable Name
    !
    Symbol_Entry   = .Name_Entry[NAM_Pointer];

    ! Call Semantic Routine to start parameter list
    !
    PAS$_Sem_Function_Call_1(.Symbol_Entry);

    PAS$_Get_Token();

    ! Handle a Parameter List
    !
    IF .Token EQL Syn_K_OpenParen
    THEN
	PAS$_Get_Token();

    ! Call Semantic Routine
    !
    PAS$_Sem_Function_Call_2(.Symbol_Entry);
    END;

ROUTINE SYN_Primary : Syntax_Routine NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine parses the following productions:
!
!	<Primary> ::= <Factor>
!		  |   <Primary> ** <Factor>
!
! FORAML PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	PAS$_Expr_Stack	- Used to remember Stack Information
!
! IMPLICIT OUTPUTS:
!
!	PAS$_Expr_Stack	- Used to remember Stack Information
!
!--

    BEGIN
	Syntax_Routine_Registers;

    ! Call <Factor>
    !
    SYN_Factor();

    ! Loop for recursion
    !
    WHILE .Token EQL Syn_K_Power DO
	BEGIN
	PAS$_Get_Token();

	SYN_Factor();

	PAS$_Sem_Exponentiation();
	END;
    END;

ROUTINE SYN_Set : Syntax_Routine NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine parses the following productions:
!
!	<Set> ::= [ <Element List> ]
!
!	<Element List> ::= <Element> { , <Element> }
!		       |   <empty>
!
!	<Element> ::= <Expression>
!		  |   <Expression> .. <Expression>
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	PAS$_Expr_Stack	- Used to remember Stack Information
!
! IMPLICIT OUTPUTS:
!
!	PAS$_Expr_Stack	- Used to remember Stack Information
!
!--

    BEGIN
	Syntax_Routine_Registers;

    ! Verify the "["
    !
    IF .Token EQL Syn_K_OpenBrkt
    THEN
	PAS$_Get_Token()
    ELSE
	Pascal_BugCheck(PAS$K_PARSERR);	! Expecting '['

    ! loop to scan the elements
    !
    PAS$_Sem_Set_1();

    IF .Token NEQ Syn_K_CloseBrkt
    THEN
	REPEAT
	    BEGIN
	    PAS$_SYN_Expression();
	    CASE .Token
		FROM Min_Token(CloseBrkt, Comma)
		TO   Max_Token(CloseBrkt, Comma)
		OF   SET
    
		! A "]" indicates the end of the <Set>
		!
    [Syn_K_CloseBrkt]:
		BEGIN
		PAS$_Sem_Set_2();

		PAS$_Get_Token();
		EXITLOOP
		END;
    
		! A "," indicates more elements to follow
		!
    [Syn_K_Comma]:
		BEGIN
		PAS$_Sem_Set_2();

		PAS$_Get_Token();
		END;

		! We either have a ".." or a syntax error. Find out which
		! and handle appropriately
		!
    [INRANGE,OUTRANGE]:
		BEGIN
		IF .Token NEQ Syn_K_SubRange
		THEN
		    ! Error - wasn't a "..", so is a Syntax Error
		    !
		    SIGNAL(DBG$_NOTDOTDOT)

		ELSE
		    ! The <Set Element> is of the form <Expression> .. <Expression>
		    ! so parse the second expression
		    !
		    BEGIN
		    PAS$_Get_Token();
		    PAS$_SYN_Expression();

		    PAS$_Sem_Set_3();

		    CASE .Token
			FROM Min_Token(Comma, CloseBrkt)
			TO   Max_Token(Comma, CloseBrkt)
			OF   SET
    
			! Followed by a "," so continue
			!
	[Syn_K_Comma]:
			PAS$_Get_Token();
    
			! Followed by a "]" so end the <Set>
			!
	[Syn_K_CloseBrkt]:
			BEGIN
			PAS$_Get_Token();
    			EXITLOOP;
			END;
    
			! Syntax Error, signal
			!
	[INRANGE,OUTRANGE]:
			SIGNAL(DBG$_NOTRBRACK);

			TES;
		    END;
		END;
		TES;
	    END
    ELSE
	PAS$_Get_Token();

    PAS$_SEM_Set_4();
    END;

ROUTINE SYN_Simple_Expression : Syntax_Routine NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine parses the following productions:
!
!	<Simple Expression> ::= <Term>
!			    |   <Sign> <Term>
!			    |	<Simple Expression> <Adding Operator> <Term>
!
!	<Sign> ::= +
!	       |   -
!
!	<Adding Operator> ::= +
!			  |   -
!			  |   OR
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	PAS$_Expr_Stack	- Used to remember Stack Information
!
! IMPLICIT OUTPUTS:
!
!	PAS$_Expr_Stack	- Used to remember Stack Information
!
!--

    BEGIN
	Syntax_Routine_Registers;

    LOCAL
	Operator		: LONG;

    ! Initialize w/ nothing
    !
    Operator    = 0;

    ! Check for leading + or -
    !
    IF .Token EQL Syn_K_Plus
    THEN
	PAS$_Get_Token()
    ELIF .Token EQL Syn_K_Minus
    THEN
	BEGIN
	Operator = .Token;
	PAS$_Get_Token();
	END;

    ! Call <Term>
    !
    SYN_Term();

    IF .Operator NEQ 0					%( Semantic Routine )%
    THEN
	PAS$_Sem_Negation();

    ! Check for recursive Expression
    !
    WHILE In_Set(.Token, Plus, Minus, OR) DO
	BEGIN
	Operator       = .Token;

	PAS$_Get_Token();

	SYN_Term();

	SELECTONE .Operator OF
	    SET
    
    [Syn_K_Plus]:					%( Semantic Routine )%
	    PAS$_Sem_Addition();
    
    [Syn_K_Minus]:					%( Semantic Routine )%
	    PAS$_Sem_Subtraction();
    
    [Syn_K_OR]:						%( Semantic Routine )%
	    PAS$_Sem_Inclusive_OR();
	    TES;

	END;

    END;

ROUTINE SYN_String : Syntax_Routine NOVALUE =

!++
! FUNCTIONAL SPECIFICATION:
!
!	<String> ::=
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
!--

    BEGIN
	Syntax_Routine_Registers;

    LOCAL
	String_Current	: REF BLOCK [,BYTE] FIELD(STR_Fields),
	String_Head	: REF BLOCK [,BYTE] FIELD(STR_Fields);

    String_Head		= .Token_Value;
    String_Current	= .Token_Value;

    REPEAT
	BEGIN

	! Look for a '('
	!
	PAS$_Get_Token();

	IF .Token NEQ SYN_K_OpenParen
	THEN
	    EXITLOOP;

	! Scan the integer list
	!
	DO
	    BEGIN

	    ! Scan the identifier or integer
	    !
	    PAS$_Get_Token();

	    IF .Token EQL SYN_K_Integer
	    THEN
		BEGIN
		PAS$_Sem_Integer(%REF(.Token_Value));

		PAS$_Get_Token();
		END

	    ELIF (.Token EQL SYN_K_Ident)	OR
		 (.Token EQL SYN_K_Backslash)	OR
		 ((.Token GEQ SYN_K_$R0) AND (.Token LEQ SYN_K_$PSL))
	    THEN
		BEGIN
		PAS$_Syn_Variable();

		PAS$_Sem_Variable_Reference();
		END

	    ELSE
		SIGNAL(DBG$_NOTINTID);

	    ! Append the integer value onto the string
	    !
	    PAS$_Sem_Append_Integer(String_Current);

	    END
	UNTIL .Token NEQ SYN_K_Comma;

	IF .Token NEQ SYN_K_CloseParen
	THEN
	    SIGNAL(DBG$_NOTRPAREN);

	! Scan past the ')'
	!
	PAS$_Get_Token();

	IF .Token EQL Syn_K_String
	THEN
	    PAS$_Sem_Append_String(String_Current, .Token_Value);

	END;

    PAS$_Sem_String(.String_Head);

    END;

ROUTINE SYN_Term : Syntax_Routine NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine handles the following productions:
!
!	<Term> ::= <Primary>
!	       |   <Term> <Multiplying Operator> <Primary>
!
!	<Multiplying Operator> ::= *
!			       |   /
!			       |   DIV
!			       |   MOD
!			       |   AND
!			       |   REM
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	PAS$_Expr_Stack	- Used to remember Stack Information
!
! IMPLICIT OUTPUTS:
!
!	PAS$_Expr_Stack	- Used to remember Stack Information
!
!--

    BEGIN
	Syntax_Routine_Registers;

    LOCAL
	Operator		: LONG;

    ! Call <Primary>
    !
    SYN_Primary();

    ! Loop for recursion
    !
    WHILE In_Set(.Token, Multiply, Divide, DIV, MOD, AND) DO
	BEGIN
	Operator       = .Token;

	PAS$_Get_Token();

	SYN_Primary();

	SELECTONE .Operator OF
	    SET
    
    [Syn_K_Multiply]:
	    PAS$_Sem_Multiply();
    
    [Syn_K_Divide]:
	    PAS$_Sem_Divide();
    
    [Syn_K_DIV]:
	    PAS$_Sem_DIV();
    
    [Syn_K_MOD]:
	    PAS$_Sem_MOD();
    
    [Syn_K_AND]:
	    PAS$_Sem_AND();
    
	    TES;

	END;

    END;

GLOBAL ROUTINE PAS$_SYN_Variable : Syntax_Routine NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine handles the following productions:
!
!	<Variable> ::= <Kernal Debugger-Defined Pathname> <Variable1>
!
!	<Variable1> ::=	<Entire Variable>
!		    |   <Component Variable>
!		    |   <Referenced Variable>
!		    |   <Debug Permanent Symbol>
!
!	<Debug Permanent Symbol> ::= % <Identifier>
!
!	<Entire Variable> ::= <Variable Identifier>
!
!	<Component Variable> ::= <Indexed Variable>
!			     |   <Field Designator>
!			     |   <File Buffer>
!
!	<Indexed Variable> ::= <Array Variable> [ <Expression> { , <Expression> } ]
!
!	<Field Designator> ::= <Record Variable> . <Field Identifier>
!
!	<Record Variable> ::= <Variable>
!
!	<File Buffer> ::= <File Variable> ^
!
!	<Referenced Variable> ::= <Pointer Variable> ^
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	PAS$_Expr_Stack	- Used to remember Stack Information
!
! IMPLICIT OUTPUTS:
!
!	PAS$_Expr_Stack	- Used to remember Stack Information
!
!--

    BEGIN
	Syntax_Routine_Registers;

    LOCAL
	Symbol_Entry		: REF BLOCK [,BYTE] FIELD(Symbol_Fields),
	Is_Primary,
	Saved_Input_Column,
	Saved_Input_Desc	: BLOCK [8, BYTE],
	Copied_Input_Desc	: BLOCK [8, BYTE],			! Input for DBG$NPATHNAME_PARSER
	Status,
	Pathname_Type,
	Pathname		: REF PTH$Pathname,
	Name_Desc		: REF BLOCK [8, BYTE];			! Identifer name descriptor

    ! Back up the scanner to just BEFORE the current token was scanned
    !
    PAS$_Backup_Scanner();

    ! Save the state of the scanner in case of error
    !
    Saved_Input_Column = .PAS$_Lex_Column;
    MOVEBYTE(8, PAS$_Lex_SrcDesc, Saved_Input_Desc);

    ! Set up for call to Pathname Parser
    !
    MOVEBYTE(8, PAS$_Lex_SrcDesc, Copied_Input_Desc);
    PAS$_Scanning_Pathname = True;

    ! Call the pathname parser
    !
    Status = DBG$NPATHNAME_PARSER(Copied_Input_Desc, PAS$_Scan_Token, Pathname, Pathname_Type, Name_Desc);

    ! Restore the scanner state, eliminating any look-ahead by the Pathname Parser
    !
    PAS$_Scanning_Pathname = False;
    MOVEBYTE(8, Copied_Input_Desc, PAS$_Lex_SrcDesc);
    PAS$_Lex_Column = .PAS$_Lex_LineDesc[DSC$W_Length] - .PAS$_Lex_SrcDesc[DSC$W_Length] + 1;
    PAS$_Look_Ahead = 0;

    IF NOT .Status
    THEN
	! Syntax error, check for '\' and <integer>
	!
	BEGIN

	! Restore the scanner state to before the call to the Pathname Parser
	!
	MOVEBYTE(8, Saved_Input_Desc, PAS$_Lex_SrcDesc);
	PAS$_Lex_Column = .Saved_Input_Column;

	PAS$_Get_Token();

	IF .Token NEQ Syn_K_Backslash
	THEN
	    SIGNAL(DBG$_INVPATH);

	PAS$_Sem_Last_Value();

	PAS$_Get_Token();
	RETURN;
	END;

    ! Check for Debug Permanent Symbols (%R0 - %PSL)
    !
    IF .Pathname_Type EQL DBG$K_Reg
    THEN
	BEGIN

	! Scan the permanent symbol
	!
	PAS$_Get_Token();

	PAS$_Sem_Permanent_Symbol(.Pathname, .Token);

	PAS$_Get_Token();
	RETURN;
	END;

    ! Check for %LINE and %LABEL
    !
    IF .Pathname_Type EQL DBG$K_Line
    THEN
	IF NOT .PAS$_Is_Primary
	THEN
	    ! Illegal in expression
	    !
	    SIGNAL(DBG$_INVEXPR)
	ELSE
	    BEGIN
	    PAS$_Sem_Line_Reference(.Pathname);

	    PAS$_Get_Token();
	    RETURN;
	    END;

    IF .Pathname_Type EQL DBG$K_Label
    THEN
	IF NOT .PAS$_Is_Primary
	THEN
	    ! Illegal in expression
	    !
	    SIGNAL(DBG$_INVEXPR)
	ELSE
	    BEGIN
	    PAS$_Sem_Label_Reference(.Pathname);

	    PAS$_Get_Token();
	    RETURN;
	    END;

    ! Must be a Identifier: if not, the Pathname Parser failed
    !
    IF .Pathname_Type NEQ DBG$K_Pn
    THEN
	Pascal_Bugcheck(PAS$K_PNPFAIL);

    ! Restore token information
    !
    Token		= Syn_K_Ident;
    Token_Value		= PAS$_Lex_Enter_Name(.Name_Desc);
    Token_Type		= Lex_K_Name;
    Token_Position	= .Name_Desc[DSC$A_Pointer] - .PAS$_Lex_LineDesc[DSC$A_Pointer] + 1;

    ! Bugcheck if no Name Table entry
    !
    IF .Token_Value EQL 0
    THEN
	Pascal_BugCheck(PAS$K_NILNAM);

    ! Skip the Variable Name
    !
    PAS$_Sem_Variable(.Pathname, .Token_Value);

    PAS$_Get_Token();

    WHILE   (.Token EQL Syn_K_OpenBrkt) OR
	    (.Token EQL Syn_K_Period)   OR
	    (.Token EQL Syn_K_Uparrow)
    DO
	BEGIN

	! This is a subscript - Handle it appropriately
	!
	IF .Token EQL Syn_K_OpenBrkt
	THEN
    
	    ! Skip the "[" 
	    !
	    BEGIN
	    PAS$_Get_Token();
	    REPEAT
		BEGIN
    
		! get the next Expression
		!

		! Save local copy of PAS$_Is_Primary and tell the rest of the
		! parse that we are now evaluating expressions
		!
		Is_Primary	= .PAS$_Is_Primary;
		PAS$_Is_Primary	= False;

		PAS$_SYN_Expression();

		! Restore PAS$_IS_PRimary
		!
		PAS$_Is_Primary = .Is_Primary;

		PAS$_Sem_Subscript();

		IF .Token EQL Syn_K_CloseBrkt
		THEN

		    ! Close Bracket found, end the subscript list
		    !
		    BEGIN
		    PAS$_Get_Token();
		    EXITLOOP;
		    END;
    
		IF .Token NEQ Syn_K_Comma
		THEN

		    ! Not a comma, must be a Syntax Error
		    !
		    SIGNAL(DBG$_NOTCOMMA);

		PAS$_Get_Token();

		END;
	    END;

	! Should be a Period for Field Name
	!
	IF .Token EQL Syn_K_Period
	THEN

	    ! Skip the Period and handle the field
	    !
	    BEGIN
	    PAS$_Get_Token();
    
	    IF .Token NEQ Syn_K_Ident
	    THEN
		SIGNAL(DBG$_NOTIDENT)
	    ELSE
		BEGIN
		PAS$_Sem_Field( .Token_Value );
    
		PAS$_Get_Token();
		END;
	    END;    
    
	! Finished with subscripts and fields. Now handle <File Buffer>
	! and <Referenced Variable>s
	!
	IF .Token EQL Syn_K_UpArrow
	THEN
	    BEGIN
	    PAS$_Sem_UpArrow();
    
	    PAS$_Get_Token();
	    END;
    
	END;

    ! Routine End
    !
    END;

END
ELUDOM
