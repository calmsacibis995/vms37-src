MODULE DBGNSTEP (IDENT = 'V03-000') =

BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:
!
!	DEBUG
!
! ABSTRACT:
!
!	This module contains the command parse and execution networks to support
!	the STEP command. Parsing is done by means of ATN's. During parsing, a
!	linked list known as the command execution tree is constructed. This
!	tree contains components which represent keywords and operands of the
!	user's input command. The command execution tree is passed to the command
!	execution network as input.
!
! ENVIRONMENT:
!
!	VAX/VMS
!
! AUTHOR:
!
!	David Plummer
!
! CREATION DATE:
!
!	9-Jul-80
!
! VERSION:
!
!	V02.2-001
!
! MODIFIED BY:
!
!	Richard Title 	15 SEP 1981
!
! REVISION HISTORY:
!
! 3.01	15-SEP-81	RT	Modified the STEP command to allow
!				STEP/SOURCE and STEP/NOSOURCE
! 3.02	21-Dec-81	RT	Disallowed STEP from an exception break.
!--

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
	DBG$NPARSE_STEP,		! STEP parse network
	DBG$NEXECUTE_STEP;		! STEP execution network

!
! REQUIRE FILES:
!
REQUIRE 'SRC$:DBGPROLOG.REQ';

REQUIRE 'SRC$:DBGGEN.REQ';

!
! EQUATED SYMBOLS:
!
LITERAL

	! Legal adverb literals
	!
	ADVERB_LITERAL_LINE 	= 1,
	ADVERB_LITERAL_OVER 	= 2,
	ADVERB_LITERAL_NOSYSTEM = 3,
    	ADVERB_LITERAL_SOURCE	= 4;

!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
	DBG$NLIST_FREEZ,			! Allocates listed dynamic storage
	DBG$NMATCH,				! Matches counted strings to input
	DBG$NSAVE_DECIMAL_INTEGER,		! Converts ascii input into an integer
	DBG$SET_STP_LVL,			! Sets step structure pointer
	DBG$NSYNTAX_ERROR,			! Formats a syntax error
	DBG$NNEXT_WORD,				! Obtains next word of input
	DBG$NMAKE_ARG_VECT;			! Constructs a message argument vector

EXTERNAL
    	DBG$GB_EXC_BRE_FLAG: BYTE,		! TRUE during an exception break.
	DBG$GL_STEP_NUM,			! Holds step number
	DBG$GB_STP_PTR  : REF VECTOR [,BYTE],	! Pointer to step types
	DBG$GL_RUNFRAME : REF BLOCK [,BYTE],	! Pointer to current runframe
	DBG$GB_TAKE_CMD : BYTE;			! Flag for taking commands


GLOBAL ROUTINE DBG$NPARSE_STEP (INPUT_DESC, VERB_NODE, MESSAGE_VECT) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine comprises the ATN parse network for the STEP command.
!	During processing, other routines are invoked to capture operands.
!	This routine recognizes keywords and constructs a command execution tree
!	to be used as input to the command execution network. Upon detection of
!	errors, a message argument vector is constructed and returned.
!
! FORMAL PARAMETERS:
!
!	INPUT_DESC	- A longword containing the address of a standard ascii
!			  string descriptor representing the user's input
!
!	VERB_NODE	- A longword containing the address of the verb (head)
!			  node of the command execution tree. The string corresponding
!			  to the verb has already been processed upon entry.
!
!	MESSAGE_VECT	- The address of a longword to contain the address of a
!			  message argument vector on errors
!			  
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	On success, the entire command execution tree corresponding to the parsed
!	STEP command is constructed.
!
!	On error, a message argument vector is constructed and returned.
!
! ROUTINE VALUE:
!
!	An unsigned integer longword completion code
!
! COMPLETION CODES:
!
!	STS$K_SUCCESS (1)	- Success. Input parsed and execution tree constructed.
!
!	STS$K_SEVERE  (4)	- Failure. Error detected and message argument
!				  vector constructed.
!
! SIDE EFFECTS:
!
!	NONE
!
!--
    BEGIN

    ! Define strings used at this level
    !
    BIND
	DBG$CS_LINE 		= UPLIT BYTE (4, 'LINE'),
	DBG$CS_INSTRUCTION 	= UPLIT BYTE (11, 'INSTRUCTION'),
	DBG$CS_INTO 		= UPLIT BYTE (4, 'INTO'),
	DBG$CS_OVER 		= UPLIT BYTE (4, 'OVER'),
	DBG$CS_SYSTEM 		= UPLIT BYTE (6, 'SYSTEM'),
	DBG$CS_NOSYSTEM 	= UPLIT BYTE (8, 'NOSYSTEM'),
    	DBG$CS_SOURCE		= UPLIT BYTE (6, 'SOURCE'),
    	DBG$CS_NOSOURCE		= UPLIT BYTE (8, 'NOSOURCE'),
	DBG$CS_SLASH 		= UPLIT BYTE (1, dbg$k_slash),
	DBG$CS_CR 		= UPLIT BYTE (1, dbg$k_car_return);

    MAP
	VERB_NODE : REF dbg$verb_node;

    LOCAL
	NOUN_NODE   : REF dbg$noun_node,	! Noun node 
	ADVERB_NODE : REF dbg$adverb_node,	! Adverb node
	SWITCH_FLAG,				! If true then /xxx else noswitch
	LINE_FLAG,				! Indicates a /line or /instruction switch
	LINE_V,					! If true, then LINE else INSTRUCTION step
	OVER_FLAG,				! Indicates a /INTO or /OVER switch
	OVER_V,					! If true then OVER else INTO
	NOSYSTEM_FLAG,				! Indicates a /SYSTEM or /NOSYSTEM switch
	NOSYSTEM_V,				! IF true then NOSYSTEM else SYSTEM
    	SOURCE_FLAG,				! Indicates a /SOURCE or /NOSOURCE
    	SOURCE_V;				! If true then /SOURCE else /NOSOURCE


    ! Check for no more input - plain STEP
    !
    IF dbg$nmatch (.input_desc, dbg$cs_cr, 1)
    THEN
	RETURN sts$k_success;


    ! Some input left. Initialize switch variables and accept all switches.
    !
    switch_flag = false;
    line_flag = false;
    over_flag = false;
    nosystem_flag = false;
    source_flag = false;

    WHILE dbg$nmatch (.input_desc, dbg$cs_slash, 1)
    DO
	BEGIN

	! Now check for a legal switch keyword
	!
	SELECTONE true 
	    OF
	    SET

	    [dbg$nmatch (.input_desc, dbg$cs_line, 1)]	:	! /LINE
		BEGIN
		switch_flag = true;
		line_flag = true;
		line_v = true;
		END;

	    [dbg$nmatch (.input_desc, dbg$cs_instruction, 3)] :	! /INSTRUCTION
		BEGIN
		switch_flag = true;
		line_flag  = true;
		line_v = false;
		END;

	    [dbg$nmatch (.input_desc, dbg$cs_into, 3)] :	! /INTO
		BEGIN
		switch_flag = true;
		over_flag = true;
		over_v = false;
		END;

	    [dbg$nmatch (.input_desc, dbg$cs_over, 1)] :	! /OVER
		BEGIN
		switch_flag = true;
		over_flag = true;
		over_v = true;
		END;

	    [dbg$nmatch (.input_desc, dbg$cs_system, 1)] :	! /SYSTEM
		BEGIN
		switch_flag = true;
		nosystem_flag = true;
		nosystem_v = false;
		END;

	    [dbg$nmatch (.input_desc, dbg$cs_nosystem, 1)] :	! /NOSYSTEM
		BEGIN
		switch_flag = true;
		nosystem_flag = true;
		nosystem_v = true;
		END;

    	    [dbg$nmatch (.input_desc, dbg$cs_source, 2)] : ! /SOURCE
    		BEGIN
    		switch_flag = true;
    		source_flag = true;
    		source_v = true;
    		END;

    	    [dbg$nmatch (.input_desc, dbg$cs_nosource, 4)] : ! /NOSOURCE
    		BEGIN
    		switch_flag = true;
    		source_flag = true;
    		source_v = false;
    		END;

	    [OTHERWISE] :	! Syntax error
		BEGIN
		.message_vect = dbg$nsyntax_error (dbg$nnext_word (.input_desc));
		RETURN sts$k_severe;
		END;

	    TES;

	END;


    ! Construct any adverb nodes, if needed.
    !	
    IF .switch_flag
    THEN
	BEGIN

	LOCAL
	    LINK;		! Link field to be filled in with node address

	link = verb_node [dbg$l_verb_adverb_ptr];

	SELECT true
	    OF
	    SET

	    [.line_flag] :	! We have either /line or /INSTRUCTION
		BEGIN

		! Construct an adverb node and link
		!
		IF NOT dbg$nlist_freez (dbg$k_adverb_node_size, adverb_node,
					.message_vect)
		THEN
		    RETURN sts$k_severe;

		.link = .adverb_node;
		link = adverb_node [dbg$l_adverb_link];
		adverb_node [dbg$b_adverb_literal] = adverb_literal_line;
		adverb_node [dbg$l_adverb_value] = .line_v;
		END;

	    [.over_flag] :	! /INTO or /OVER
		BEGIN

		! Construct an adverb node and link
		!
		IF NOT dbg$nlist_freez (dbg$k_adverb_node_size, adverb_node,
					.message_vect)
		THEN
		    RETURN sts$k_severe;

		.link = .adverb_node;
		link = adverb_node [dbg$l_adverb_link];
		adverb_node [dbg$b_adverb_literal] = adverb_literal_over;
		adverb_node [dbg$l_adverb_value] = .over_v;
		END;

	    [.nosystem_flag] :	! /SYSTEM or /NOSYSTEM
		BEGIN

		! Construct the adverb node and link
		!
		IF NOT dbg$nlist_freez (dbg$k_adverb_node_size, adverb_node,
					.message_vect)
		THEN
		    RETURN sts$k_severe;

		.link = .adverb_node;
		link = adverb_node [dbg$l_adverb_link];
		adverb_node [dbg$b_adverb_literal] = adverb_literal_nosystem;
		adverb_node [dbg$l_adverb_value] = .nosystem_v;
		END;

    	    [.source_flag] : ! /SOURCE or /NOSOURCE

    		BEGIN

    		! Construct an adverb node and link
    		!
    		IF NOT dbg$nlist_freez (dbg$k_adverb_node_size,
    			adverb_node, .message_vect)
    		THEN
    		    RETURN sts$k_severe;

    		.link = .adverb_node;
    		link = adverb_node[dbg$l_adverb_link];
    		adverb_node[dbg$b_adverb_literal] = adverb_literal_source;
    		adverb_node[dbg$l_adverb_value] = .source_v;
    		
    		END;

	    TES;


	! Now put a 0 in the last link field
	!
	.link = 0;

	END;


    ! Now check for additional input
    !
    IF dbg$nmatch (.input_desc, dbg$cs_cr, 1)
    THEN
	RETURN sts$k_success;


    ! More input. We have a digit string or syntax error. Construct a noun node.
    !
    IF NOT dbg$nlist_freez (dbg$k_noun_node_size, noun_node, .message_vect)
    THEN
	RETURN sts$k_severe;

    verb_node [dbg$l_verb_object_ptr] = .noun_node;


    ! Now obtain the digit string
    !
    IF NOT dbg$nsave_decimal_integer (.input_desc, noun_node [dbg$l_noun_value],
				      .message_vect)
    THEN
	RETURN sts$k_severe;

    RETURN sts$k_success;


    END;			! End of dbg$nparse_step


GLOBAL ROUTINE DBG$NEXECUTE_STEP (VERB_NODE, MESSAGE_VECT) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine accepts as input the command execution tree constructed
!	by the parse network and performs semantic actions corresponding to the
!	parsed input STEP command. If the action cannot be performed, a message
!	argument vector is constructed and returned. Actual stepping is NOT
!	performed in this network. This is handled by the DEBUG monitor.
!
!	This routine manipulates the dbg$gb_def_stp structure, as well as the
!	step level pointer.
!
! FORMAL PARAMETERS:
!
!	VERB_NODE	- A longword containing the address of the verb (head)
!			  node of the command execution tree
!
!	MESSAGE_VECT	- The address of a longword to contain the address of
!			  a standard message argument vector upon detection of
!			  of errors
!
! IMPLICIT INPUTS:
!
!	The entire linked list command execution tree as pointed to by the
!	verb node.
!
! IMPLICIT OUTPUTS:
!
!	On error, a message argument vector is constructed and returned.
!
! ROUTINE VALUE:
!
!	An unsigned integer longword completion code
!
! COMPLETION CODES:
!
!	STS$K_SUCCESS (1)	- Success. A STEP will be performed.
!
!	STS$K_SEVERE  (4)	- Failure. The STEP will not be performed.
!				  Message argument vector returned.
!
! SIDE EFFECTS:
!
!	The DEBUG monitor will be informed to perform a step.
!
!--
    BEGIN

    MAP
	VERB_NODE	: REF dbg$verb_node;

    LOCAL
	NEW_PC,						! User's PC
	NOUN_NODE 	: REF dbg$noun_node,		! Noun node structure
	ADVERB_NODE 	: REF dbg$adverb_node;		! Adverb node structure

    BUILTIN
	PROBER;

    
    ! If we are in an exception break, then it is illegal to STEP.
    !
    IF .dbg$gb_exc_bre_flag
    THEN
    	SIGNAL (dbg$_stefroexc);

    ! Make sure that we can start execution at the currently set start address
    !
    new_pc = .dbg$gl_runframe [dbg$l_user_pc];

    IF NOT PROBER (%REF (0), %REF (1), .new_pc)
    THEN
	BEGIN
	.message_vect = dbg$nmake_arg_vect (dbg$_badstartpc, 1, .new_pc);
	RETURN sts$k_severe;
	END;


    ! Recover the noun node, if any.
    !
    noun_node = .verb_node [dbg$l_verb_object_ptr];


    ! We must decide which level of the step data structure to point to.
    ! If the user supplied step switches, then we point to the override level
    ! and fill in the appropriate information. Otherwise, we point to the user
    ! defined level so that we use whatever switches were set by the SET STEP xxx
    ! command.
    !
    ! Check for presence of override switches
    !
    IF .verb_node [dbg$l_verb_adverb_ptr] NEQA 0
    THEN
	BEGIN	

	! User supplied command override switches, so set level to override
	!
	LOCAL
	    LINK;		! We use this to point to links
	
	dbg$set_stp_lvl (override_step);


	! Now fill in the user supplied overrides
	!
	link = .verb_node [dbg$l_verb_adverb_ptr];

	WHILE .link NEQA 0
	DO
	    BEGIN
	    adverb_node = .link;	! Place the template at the correct address
	    CASE .adverb_node [dbg$b_adverb_literal] FROM adverb_literal_line
    						     TO   adverb_literal_source
		OF
		SET

		[adverb_literal_line] :	! /LINE or /INSTRUCTION
		    BEGIN
		    dbg$gb_stp_ptr [step_line] = .adverb_node [dbg$l_adverb_value];
		    link = .adverb_node [dbg$l_adverb_link];
		    END;

		[adverb_literal_over] : ! /INTO or /OVER
		    BEGIN
		    dbg$gb_stp_ptr [step_over] = .adverb_node [dbg$l_adverb_value];
		    link = .adverb_node [dbg$l_adverb_link];
		    END;

		[adverb_literal_nosystem] : ! /SYSTEM or NOSYSTEM
		    BEGIN
		    dbg$gb_stp_ptr [step_nosystem] = .adverb_node [dbg$l_adverb_value];
		    link = .adverb_node [dbg$l_adverb_link];
		    END;

    		[adverb_literal_source] : ! /SOURCE or /NOSOURCE
    		    BEGIN
    		    dbg$gb_stp_ptr[step_source] = .adverb_node[dbg$l_adverb_value];
    		    link = .adverb_node[dbg$l_adverb_link];
    		    END;

		TES;

	    END;

	END

    ELSE
	BEGIN

	! No override switches, so set level to user defined level
	!
	dbg$set_stp_lvl (user_def_step);
	END;


    ! We have set the correct level. Now look for a user supplied digit.
    ! If there isn't one, supply a 1 for one step. We have to place the step count
    ! into a global location.
    !
    dbg$gl_step_num =
	( IF .noun_node EQLA 0 THEN 1 ELSE .noun_node [dbg$l_noun_value]);


    ! The step number is not negative, but it may be 0. If it is - nop command.
    !
    IF .dbg$gl_step_num GTR 0
    THEN
	BEGIN

	! Set the correct stepping switches for the monitor
   	!
	dbg$gl_runframe [dbg$v_stepping] = true;
	dbg$gb_take_cmd = false;
	END;

    RETURN sts$k_success;

    END;		! End of dbg$nexecute_step

END				!End of module
ELUDOM
