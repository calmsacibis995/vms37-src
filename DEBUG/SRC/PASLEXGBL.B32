MODULE	PASLEXGBL( ! Initial Entries in Name Table for Lexical Analyser
	IDENT = 'V03-000'
	)=
BEGIN
!
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!
!++
!
! FACILITY:	VAX-11 PASCAL-SPECIFIC DEBUGGER MODULES
!
! ABSTRACT:
!
!	This module defines the values pre-declared in the Name and Symbol
!	Tables for the Lexical and Syntactic Analysis phase. It also contains
!	a routine to convert the address offsets in these tables and the Type
!	Table (see module PASSEMGBL) to absolute addresses.
!
! ENVIRONMENT:	VAX/VMS user mode
!
! AUTHOR: R. Gottlieb, CREATION DATE: 8-Nov-1979
!
! MODIFIED BY:	P. Hohensee	16-July-1980	Stolen from PASCAL-PLUS
!
!--

LIBRARY 'SRC$:PASLIB';

LIBRARY 'SRC$:DBGCOMLIB.L32';

!
! Table of Contents
!
FORWARD ROUTINE
	Fixup_Special_Items	: NOVALUE,	! Convert some Name Table offsets to absolute addresses
	Fixup_Hash_Table	: NOVALUE,	! Convert Hash Table offsets to absolute addresses
	Fixup_Type_Table	: NOVALUE,	! Convert Type Table offsets to absolute addresses
	PAS$_Initialize_Tables	: NOVALUE;	! Convert address offsets to
						! absolute addresses in the Name,
						! Symbol and Type Tables

!
! Handle the Reserved Words (not built-in functions) for the Symbol Table
!
MACRO
    RESERVED_SYM_WORDS[A]=
	FORWARD %NAME('PAS$_LRW_',A) : BLOCK [NAM_S_ENTRY + %CHARCOUNT(A), BYTE];
	OWN %NAME('RESSY_',A) : BLOCK [SYM_S_Reserved_Word, BYTE]
	    INITIAL(
		BYTE(SYM_K_Reserved_Word, 0),
		WORD(0),
		LONG(0, 0, 0, %NAME('PAS$_LRW_',A) - PAS$_Table_Base, %NAME('SYN_K_',A)) ) ;
	GLOBAL %NAME('PAS$_SRW_',A) : BLOCK [SYM_S_Reserved_Word, BYTE]; %,

    RESERVED_SYM_REDEF_WORDS[A]=
	FORWARD %NAME('PAS$_LRW_',A) : BLOCK [NAM_S_ENTRY + %CHARCOUNT(A), BYTE];
	OWN %NAME('RESSY_',A) : BLOCK [SYM_S_Reserved_Word, BYTE]
	    INITIAL(
		BYTE(SYM_K_Reserved_Word, 4),
		WORD(0),
		LONG(0, 0, 0, %NAME('PAS$_LRW_',A) - PAS$_Table_Base, %NAME('SYN_K_',A)) ) ;
	GLOBAL %NAME('PAS$_SRW_',A) : BLOCK [Sym_S_Reserved_Word, BYTE]; %,

    RESERVED_SYM_TYPE_WORDS[A]=
	FORWARD %NAME('PAS$_LRW_',A) : BLOCK [NAM_S_ENTRY + %CHARCOUNT(A), BYTE];
	EXTERNAL %NAME('PAS$_TRW_',A);
	OWN %NAME('RESSY_',A) : BLOCK [SYM_S_Type, BYTE]
	    INITIAL(
		BYTE(SYM_K_TYPE, 0),
		WORD(0),
		LONG(0, 0, 0, %NAME('PAS$_LRW_',A) - PAS$_Table_Base, %NAME('PAS$_TRW_',A) - PAS$_Table_Base) );
	GLOBAL %NAME('PAS$_SRW_',A) : BLOCK [SYM_S_Type, BYTE]; %,

    RESERVED_SYM_CONSTANT_WORDS[A,B,C,D,E] =
	FORWARD %NAME('PAS$_LRW_',A) : BLOCK [NAM_S_ENTRY + %CHARCOUNT(A), BYTE];
	OWN %NAME('RESSY_',A) : BLOCK [SYM_S_Constant, BYTE]
	    INITIAL(
		BYTE(SYM_K_Constant, 0, 0, 0),
		LONG(0, 0, 0, %NAME('PAS$_LRW_',A) - PAS$_Table_Base,
			%NAME('PAS$_TRW_',B) - PAS$_Table_Base, C, D, E) );
	GLOBAL %NAME('PAS$_SRW_',A) : BLOCK [SYM_S_Constant, BYTE]; %;

!
! Define the "Reserved Words" for the Lexical Analyser
!
MACRO

    !
    ! Substring Character Extraction Macro
    !
    EXTRACT(A,B)=
	%IF B LEQ %CHARCOUNT(%EXPLODE(A))
	%THEN
	    EXTRACT_(B,%EXPLODE(A))
	%ELSE
	    0
	%FI %,

    EXTRACT_(A,B)[]=
	%IF A GTR %COUNT+1
	%THEN
	    EXTRACT_(A, %REMAINING)
	%ELSE
	    %IF A EQL %COUNT+1
	    %THEN
		%ASSIGN(I, (B))
		%NUMBER(I)
	    %ELSE
		0
	    %FI
	%FI %,

    !
    ! Hash Generating Macro
    !
    HASH_VALUE(A)=
	%ASSIGN(I, (EXTRACT(A,1) + EXTRACT(A,2) + EXTRACT(A,%CHARCOUNT(A))
	    + %CHARCOUNT(A)) MOD 128)
	%NUMBER(I) %,

    !
    ! Three phases in Initialization
    !
    RESERVED_NAM_WORDS[]=
	RESERVED_NAM_INIT(%REMAINING)
	RESERVED_NAM_LIST(%REMAINING) %,

    !
    ! Initialize the Hash Table Entries
    !
    RESERVED_NAM_INIT[A]=
	%ASSIGN(I, HASH_VALUE(A))
	%IF NOT %DECLARED(%NAME('INIT$',%NUMBER(I)))
	%THEN
	    COMPILETIME %NAME('INIT$',%NUMBER(I)) = 1 ;
	    MACRO %NAME('INITHASH',%NUMBER(I)) = A %QUOTE % ;
	%ELSE
	    RESERVED_NAM_CHAIN(A, %STRING('$', %NAME(%STRING('INITHASH',%NUMBER(I)))))
	%FI %,

    RESERVED_NAM_CHAIN(A,B)[]=
	%IF NOT %DECLARED(%NAME(B))
	%THEN
	    COMPILETIME %NAME(B) = 1 ;
	    MACRO %NAME('$',B) = A %QUOTE %;
	%ELSE
	    RESERVED_NAM_CHAIN(A, %STRING('$',%NAME('$',B)))
	%FI %,

    RESERVED_NAM_LIST(A)[]=
	%IF %LENGTH GTR 1 %THEN RESERVED_NAM_LIST(%REMAINING) %FI
	RESERVED_NAM_ITEM(A) %,

    RESERVED_NAM_ITEM(A)=
	OWN %NAME('RESWD_',A) : BLOCK[NAM_S_ENTRY + %CHARCOUNT(A), BYTE]
	    INITIAL( LONG(
		%IF %DECLARED(%NAME('RESSY_',A))
		%THEN
		    %NAME('PAS$_SRW_', A) - PAS$_Table_Base
		%ELSE
		    0
		%FI,

		%IF %DECLARED(%NAME('$',A))
		%THEN
		    %NAME('PAS$_LRW_', %NAME('$$',A)) - PAS$_Table_Base
		%ELSE
		    0
		%FI,

		0),
		BYTE(%ASCIC %STRING(A)) );

	GLOBAL %NAME('PAS$_LRW_',A) : BLOCK [NAM_S_ENTRY + %CHARCOUNT(A), BYTE] ; %,

    RESERVED_NAM_HASH=
	OWN
	    LEX_INITHASH	: VECTOR [128,LONG] INITIAL(RESERVED_NAM_BUCKET(128));

	GLOBAL
	    PAS$_LEX_HASH_TABLE	: VECTOR [128,LONG]; %,

    RESERVED_NAM_BUCKET(A)[]=
	%ASSIGN(I,A-1)
	%IF I GTR 0 %THEN RESERVED_NAM_BUCKET(%NUMBER(I)) , %FI

	%ASSIGN(I,A-1)
	%IF %DECLARED(%NAME(%STRING('INIT$',%NUMBER(I))))
	%THEN
	    %NAME (%STRING('PAS$_LRW_',%NAME('INITHASH',%NUMBER(I)))) - PAS$_Table_Base
	%ELSE
	    0
	%FI %,

    SPECIAL_ITEMS[A,B]=
	FORWARD %NAME('PAS$_SRW_$',A) : BLOCK [SYM_S_Reserved_Word, BYTE];

	OWN %NAME('RESWD_$',A) : BLOCK [NAM_S_ENTRY + %CHARCOUNT(B), BYTE]
	    INITIAL( LONG(%NAME('PAS$_SRW_$',A) - PAS$_Table_Base, 0, 0), BYTE(%ASCIC B) );
	GLOBAL %NAME('PAS$_LRW_$',A) : BLOCK [NAM_S_ENTRY + %CHARCOUNT(B), BYTE];

	OWN %NAME('RESSY_$',A) : BLOCK [SYM_S_Reserved_Word, BYTE]
	    INITIAL( BYTE(SYM_K_Reserved_Word, 0), WORD(0),
		LONG(0, 0, 0, %NAME('PAS$_LRW_$',A) - PAS$_Table_Base, %NAME('SYN_K_',A)));
	GLOBAL %NAME('PAS$_SRW_$',A) : BLOCK [SYM_S_Reserved_Word, BYTE]; %;

    COMPILETIME I = 0;

    !
    ! Initialize the Symbol Table
    !
SWITCHES
    ADDRESSING_MODE(EXTERNAL = GENERAL, NONEXTERNAL = LONG_RELATIVE);

MACRO
    SET_PAS$GLOBAL	=
	DBG$PASGLOBAL	(PIC, NOSHARE, WRITE, NOEXECUTE, ALIGN(2),
			ADDRESSING_MODE(LONG_RELATIVE)) %,

    SET_PAS$PLIT	=
	DBG$PASPLIT	(PIC, NOSHARE, WRITE, NOEXECUTE, ALIGN(2),
			ADDRESSING_MODE(LONG_RELATIVE)) %;

    PSECT
	GLOBAL	= SET_PAS$GLOBAL,
	OWN	= SET_PAS$PLIT,
	CODE	= SET_PAS$PLIT,
	PLIT	= SET_PAS$PLIT;

    GLOBAL
	PAS$_LEX_CLEAR0		: VECTOR [0],	! Start of Name Table
	PAS$_Table_Base		: VECTOR [0];	! Start of Name Table

    PSECT
	GLOBAL	= SET_PAS$PLIT;

    GLOBAL
	PAS$_RESWD_CLEAR0	: VECTOR [0];	! Start of Name Table (copy)

    PSECT
	GLOBAL  = SET_PAS$GLOBAL;

! True RESERVED WORDS
!
    RESERVED_SYM_WORDS(
	'AND',		'DIV',		'IN',		'MOD',
	'NOT',		'OR');		

! Special redefinable RESERVED WORDS
!
!    RESERVED_SYM_REDEF_WORDS(
!	'EXTERN',	'FORTRAN',	'FORWARD',	'OTHERWISE',
!	'VALUE');

! Pre-defined Types
!
    RESERVED_SYM_TYPE_WORDS(
	'BOOLEAN',	'CHAR',		'DOUBLE',	'INTEGER',
	'QUADRUPLE',	'REAL',		'UNSIGNED');

! Pre-defined constants
!
    EXTERNAL
	PAS$_TRW_NIL	: BLOCK [,BYTE];

    RESERVED_SYM_CONSTANT_WORDS(
	'TRUE',		'BOOLEAN',	U_Bool,		0,		1,
	'FALSE',	'BOOLEAN',	U_Bool,		PAS$_SRW_TRUE - PAS$_Table_Base,
									0,
	'MAXINT',	'INTEGER',	L_Int,		0,   %X'7FFFFFFF',
	'NIL',		'NIL',		LU_Int,		0,		0);

! Predefined entries in the name table
!
    RESERVED_NAM_WORDS(
	'ABS',		'AND',		'ARCTAN',	'BOOLEAN',
	'CHAR',		'CHR',		'COS',		'DIV',
	'DOUBLE',	'EOF',		'EOLN',		'EXP',
	'FALSE',	'GET',		'IN',		'INPUT',
	'INTEGER',	'LN',		'MAXINT',	'MOD',
	'NEW',		'NIL',		'NOT',		'ODD',
	'OR',		'OUTPUT',	'PACK',		'PAGE',
	'PRED',		'PUT',		'QUADRUPLE',	'READ',
	'READLN',	'REAL',		'RESET',	'REWRITE',
	'ROUND',	'SINGLE',	'SIN',		'SQR',
	'SQRT',		'SUCC',		'TEXT',		'TRUE',
	'TRUNC',	'UNPACK',	'UNSIGNED',	'WRITE',
	'WRITELN');

! Entries in the name table for non-symbol terminal characters
!
    SPECIAL_ITEMS(
	'ASSIGN',	':=',
	'CLOSEBRKT',	']',
	'CLOSEPAREN',	')',
	'COLON',	':',
	'COMMA',	',',
	'DIVIDE',	'/',
	'EQUAL',	'=',
	'GREATEQUAL',	'>=',
	'GREATER',	'>',
	'LESS',		'<',
	'LESSEQUAL',	'<=',
	'MINUS',	'-',
	'MULTIPLY',	'*',
	'NOTEQUAL',	'<>',
	'OPENBRKT',	'[',
	'OPENPAREN',	'(',
	'PERIOD',	'.',
	'PLUS',		'+',
	'POWER',	'**',
	'SEMICOLON',	';',
	'SUBRANGE',	'..',
	'UPARROW',	'^',

	'$LINE',	'%LINE',
	'$LABEL',	'%LABEL',

	'BACKSLASH',	'\',

	'$R0',		'%R0',
	'$R1',		'%R1',
	'$R2',		'%R2',
	'$R3',		'%R3',
	'$R4',		'%R4',
	'$R5',		'%R5',
	'$R6',		'%R6',
	'$R7',		'%R7',
	'$R8',		'%R8',
	'$R9',		'%R9',
	'$R10',		'%R10',
	'$R11',		'%R11',
	'$AP',		'%AP',
	'$FP',		'%FP',
	'$SP',		'%SP',
	'$PC',		'%PC',
	'$PSL',		'%PSL');

    RESERVED_NAM_HASH;

    PSECT
	GLOBAL	= SET_PAS$PLIT;

    GLOBAL
	PAS$_RESWD_CLEAR1	: VECTOR [0];	! End of Name Table (copy)

    PSECT
	GLOBAL	= SET_PAS$GLOBAL;

    GLOBAL
	PAS$_Lex_LineDesc	: BLOCK [8, BYTE],	! Original Source Line Descriptor
	PAS$_Lex_SrcDesc	: BLOCK [8 ,BYTE],	! Source Line Descriptor
	PAS$_Lex_Column		: WORD UNSIGNED,	! Source Line Column
	PAS$_LEX_CLEAR1		: VECTOR [0],		! End of Name Table and
							! Lexical Analysis Storage

	PAS$_Default_Radix	: LONG,			! Default Number Radix
	PAS$_Scanning_Pathname	: BYTE UNSIGNED,	! True = Scanning a pathname
	PAS$_Tables_Initialized	: BYTE UNSIGNED INITIAL(False);
							! Initialization Flag:
							! False = Addresses in Name, Symbol, and Type
							! Tables need to be initialized

!
! Address Initialization MACROs
!
MACRO
	ADDRESS_RESERVED_SYM_WORDS[A]=
	    BEGIN
	    MAP
		%NAME('RESSY_',A)	: BLOCK [,BYTE] FIELD(Symbol_Fields);
	    %NAME('RESSY_',A)[Sym_Name] = .%NAME('RESSY_',A)[Sym_Name] + .T;
	    END; %,

	ADDRESS_RESERVED_SYM_REDEF[A]=
	    BEGIN
	    MAP
		%NAME('RESSY_',A)	: BLOCK [,BYTE] FIELD(Symbol_Fields);
	    %NAME('RESSY_',A)[Sym_Name] = .%NAME('RESSY_',A)[Sym_Name] + .T;
	    END; %,

	ADDRESS_RESERVED_SYM_TYPE_WORDS[A]=
	    BEGIN
	    MAP
		%NAME('RESSY_',A)	: BLOCK [,BYTE] FIELD(Symbol_Fields);
	    %NAME('RESSY_',A)[Sym_Name]	= .%NAME('RESSY_',A)[Sym_Name] + .T;
	    %NAME('RESSY_',A)[Sty_Type]	= .%NAME('RESSY_',A)[Sty_Type] + .T;
	    END; %,

	ADDRESS_RESERVED_SYM_CONSTANT[A]=
	    BEGIN
	    MAP
		%NAME('RESSY_',A)	: BLOCK [,BYTE] FIELD(Symbol_Fields);
	    %NAME('RESSY_',A)[SYM_Name] = .%NAME('RESSY_',A)[SYM_Name] + .T;
	    %NAME('RESSY_',A)[CON_Type] = .%NAME('RESSY_',A)[CON_Type] + .T;
	    IF %NAME('RESSY_',A)[CON_Next] NEQA 0
	    THEN
		%NAME('RESSY_',A)[CON_Next] = .%NAME('RESSY_',A)[CON_Next] + .T;
	    END; %,

	!
	! Fix up Reserved Names
	!
	ADDRESS_RESERVED_NAM_LIST(A)[]=
	    %IF %LENGTH GTR 1 %THEN ADDRESS_RESERVED_NAM_LIST(%REMAINING) %FI
	    ADDRESS_RESERVED_NAM_ITEM(A) %,

	ADDRESS_RESERVED_NAM_ITEM(A)=
	    %IF %DECLARED(%NAME('RESSY_',A))
	    %THEN
		BEGIN
		MAP
		    %NAME('RESWD_',A)	: BLOCK [,BYTE] FIELD(Nam_Fields);
		%NAME('RESWD_',A)[Nam_Pointer] = .%NAME('RESWD_',A)[Nam_Pointer] + .T;
		END;
	    %FI

	    %IF %DECLARED(%NAME('$',A))
	    %THEN
		BEGIN
		MAP
		    %NAME('RESWD_',A)	: BLOCK [,BYTE] FIELD(Nam_Fields);
		%NAME('RESWD_',A)[Nam_Chain] = .%NAME('RESWD_',A)[Nam_Chain] + .T;
		END;
	    %FI %,

	!
	! Convert Hash Table offsets to addresses
	!
	ADDRESS_RESERVED_NAM_HASH=
	    ADDRESS_RESERVED_NAM_BUCKET(128) %,

	ADDRESS_RESERVED_NAM_BUCKET(A)[]=
	    %ASSIGN(I,A-1)
	    %IF I GTR 0 %THEN ADDRESS_RESERVED_NAM_BUCKET(%NUMBER(I)) %FI

	    %ASSIGN(I,A-1)
	    %IF %DECLARED(%NAME(%STRING('INIT$',%NUMBER(I))))
	    %THEN
		LEX_INITHASH[I] = .LEX_INITHASH[I] + .T;
	    %FI %,

	!
	! Fix up SPECIAL_ITEMS
	!
	ADDRESS_SPECIAL_ITEMS[A,B]=
	    BEGIN
	    MAP
		%NAME('RESWD_$',A)	: BLOCK [,BYTE] FIELD(Nam_Fields),
		%NAME('RESSY_$',A)	: BLOCK [,BYTE] FIELD(Symbol_Fields);
	    %NAME('RESWD_$',A)[Nam_Pointer] = .%NAME('RESWD_$',A)[Nam_Pointer] + .T;
	    %NAME('RESSY_$',A)[Sym_Name] = .%NAME('RESSY_$',A)[Sym_Name] + .T;
	    END; %;

!
! WARNING!!!!	The following SWITCHES and PSECT declarations MUST match
!		the ones used for the kernel debugger (see DBGPROLOG.REQ)
!
SWITCHES
	ADDRESSING_MODE(EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

PSECT
	GLOBAL	= DBG$GLOBAL(PIC, NOSHARE, WRITE, NOEXECUTE, ALIGN(2),
			ADDRESSING_MODE(LONG_RELATIVE)),
	OWN	= DBG$OWN   (PIC, NOSHARE, WRITE, NOEXECUTE, ALIGN(2),
			ADDRESSING_MODE(LONG_RELATIVE)),
	CODE	= DBG$CODE  (PIC, SHARE, NOWRITE, EXECUTE, ALIGN(0),
			ADDRESSING_MODE(WORD_RELATIVE)),
	PLIT	= DBG$PLIT  (PIC, SHARE, NOWRITE, EXECUTE, ALIGN(0),
			ADDRESSING_MODE(LONG_RELATIVE));

ROUTINE Fixup_Special_Items : NOVALUE =

!++
! FUNCTIONAL SPECIFICATION:
!
!	Fix up the Special Item offsets in the Name Table
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	The Name Table
!
! IMPLICIT OUTPUTS:
!
!	The Name Table
!
! ROUTINE VALUE:
!
!	NONE
!
!--

    BEGIN
    REGISTER
	T;			! Force common sub-expression because of BLISS glitch

    T = PAS$_Table_Base;

    ADDRESS_SPECIAL_ITEMS(
	'ASSIGN',	':=',
	'CLOSEBRKT',	']',
	'CLOSEPAREN',	')',
	'COLON',	':',
	'COMMA',	',',
	'DIVIDE',	'/',
	'EQUAL',	'=',
	'GREATEQUAL',	'>=',
	'GREATER',	'>',
	'LESS',		'<',
	'LESSEQUAL',	'<=',
	'MINUS',	'-',
	'MULTIPLY',	'*',
	'NOTEQUAL',	'<>',
	'OPENBRKT',	'[',
	'OPENPAREN',	'(',
	'PERIOD',	'.',
	'PLUS',		'+',
	'POWER',	'**',
	'SEMICOLON',	';',
	'SUBRANGE',	'..',
	'UPARROW',	'^',

	'$LINE',	'%LINE',
	'$LABEL',	'%LABEL',

	'BACKSLASH',	'\',

	'$R0',		'%R0',
	'$R1',		'%R1',
	'$R2',		'%R2',
	'$R3',		'%R3',
	'$R4',		'%R4',
	'$R5',		'%R5',
	'$R6',		'%R6',
	'$R7',		'%R7',
	'$R8',		'%R8',
	'$R9',		'%R9',
	'$R10',		'%R10',
	'$R11',		'%R11',
	'$AP',		'%AP',
	'$FP',		'%FP',
	'$SP',		'%SP',
	'$PC',		'%PC',
	'$PSL',		'%PSL');

    END;

ROUTINE Fixup_Hash_Table : NOVALUE =

!++
! FUNCTIONAL SPECIFICATION:
!
!	Convert the offsets in the Hash Table to absolute addresses
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	The Name Hash Table
!
! IMPLICIT OUTPUTS:
!
!	The Name Hash Table
!
! ROUTINE VALUE:
!
!	NONE
!

    BEGIN
    REGISTER
	T;			! Force common sub-expression because of BLISS glitch

    T = PAS$_Table_Base;

    ADDRESS_RESERVED_NAM_HASH

    END;

ROUTINE Fixup_Type_Table : NOVALUE =

!++
! FUNCTIONAL SPECIFICATION:
!
!	Convert offsets in the Type Table to absolute addresses
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	The Type Table
!
! IMPLICIT OUTPUTS:
!
!	The Type Table
!
! ROUTINE VALUE:
!
!	NONE
!
!--

    BEGIN
    MAP
	PAS$_TRW_Boolean	: BLOCK [,BYTE] FIELD(Type_Fields),
	PAS$_TRW_Char		: BLOCK [,BYTE] FIELD(Type_Fields),
	PAS$_TRW_Double		: BLOCK [,BYTE] FIELD(Type_Fields),
	PAS$_TRW_Integer	: BLOCK [,BYTE] FIELD(Type_Fields),
	PAS$_TRW_Nil		: BLOCK [,BYTE] FIELD(Type_Fields),
	PAS$_TRW_Quadruple	: BLOCK [,BYTE] FIELD(Type_Fields),
	PAS$_TRW_Real		: BLOCK [,BYTE] FIELD(Type_Fields),
	PAS$_TRW_Unsigned	: BLOCK [,BYTE] FIELD(Type_Fields);

    REGISTER
	T;			! Force common sub-expression because of BLISS glitch

    T = PAS$_Table_Base;

    !
    ! Type Table Initialization
    !
    PAS$_TRW_Boolean[Typ_Symbol]	= .PAS$_TRW_Boolean[Typ_Symbol] + .T;
    PAS$_TRW_Boolean[Ord_Type]		= .PAS$_TRW_Boolean[Ord_Type] + .T;
    PAS$_TRW_Boolean[Ord_Enum_Element]	= .PAS$_TRW_Boolean[Ord_Enum_Element] + .T;

    PAS$_TRW_Char[Typ_Symbol]		= .PAS$_TRW_Char[Typ_Symbol] + .T;
    PAS$_TRW_Char[Ord_Type]		= .PAS$_TRW_Char[Ord_Type] + .T;

    PAS$_TRW_Double[Typ_Symbol]		= .PAS$_TRW_Double[Typ_Symbol] + .T;

    PAS$_TRW_Integer[Typ_Symbol]	= .PAS$_TRW_Integer[Typ_Symbol] + .T;
    PAS$_TRW_Integer[Ord_Type]		= .PAS$_TRW_Integer[Ord_Type] + .T;

    PAS$_TRW_Nil[Typ_Symbol]		= .PAS$_TRW_Nil[Typ_Symbol] + .T;

    PAS$_TRW_Quadruple[Typ_Symbol]	= .PAS$_TRW_Quadruple[Typ_Symbol] + .T;

    PAS$_TRW_Real[Typ_Symbol]		= .PAS$_TRW_Real[Typ_Symbol] + .T;

    PAS$_TRW_Unsigned[Typ_Symbol]	= .PAS$_TRW_Unsigned[Typ_Symbol] + .T;
    PAS$_TRW_Unsigned[Ord_Type]		= .PAS$_TRW_Unsigned[Ord_Type] + .T;

    END;

GLOBAL ROUTINE PAS$_Initialize_Tables : NOVALUE =

!++
! FUNCTIONAL SPECIFICATION:
!
!	Convert the address offsets in the Name, Symbol, and Type Tables to
!	absolute addresses. Since the debugger must be PIC, pointers in these
!	tables must be compiled as offsets from a base address that is not
!	known until execution time (PAS$_Table_Base). This base address
!	is, however, known as an offset from the PC at link time, so that its
!	actual value can be computed at execution time, thus allowing us to
!	compute absolute addresses to replace the offset values in the pointers
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	The Name, Symbol, and Type Tables
!
! IMPLICIT OUTPUTS:
!
!	The Name, Symbol, and Type Tables
!
! ROUTINE VALUE:
!
!	NONE
!
!--

    BEGIN
    REGISTER
	T;			! Force common sub-expression because of BLISS glitch

    T = PAS$_Table_Base;

! True RESERVED WORDS
!
    ADDRESS_RESERVED_SYM_WORDS(
	'AND',		'DIV',		'IN',		'MOD',
	'NOT',		'OR');		

! Special redefinable RESERVED WORDS
!
!    ADDRESS_RESERVED_SYM_REDEF(
!	'EXTERN',	'FORTRAN',	'FORWARD',	'OTHERWISE',
!	'VALUE');

! Predefined Types
!
    ADDRESS_RESERVED_SYM_TYPE_WORDS(
	'BOOLEAN',	'CHAR',		'DOUBLE',	'INTEGER',
	'QUADRUPLE',	'REAL',		'UNSIGNED');

! Predefined constants
!
    ADDRESS_RESERVED_SYM_CONSTANT(
	'TRUE',		'FALSE',	'MAXINT',	'NIL');

! Predefined entries in the name table
!
    ADDRESS_RESERVED_NAM_LIST(
	'ABS',		'AND',		'ARCTAN',	'BOOLEAN',
	'CHAR',		'CHR',		'COS',		'DIV',
	'DOUBLE',	'EOF',		'EOLN',		'EXP',
	'FALSE',	'GET',		'IN',		'INPUT',
	'INTEGER',	'LN',		'MAXINT',	'MOD',
	'NEW',		'NIL',		'NOT',		'ODD',
	'OR',		'OUTPUT',	'PACK',		'PAGE',
	'PRED',		'PUT',		'QUADRUPLE',	'READ',
	'READLN',	'REAL',		'RESET',	'REWRITE',
	'ROUND',	'SINGLE',	'SIN',		'SQR',
	'SQRT',		'SUCC',		'TEXT',		'TRUE',
	'TRUNC',	'UNPACK',	'UNSIGNED',	'WRITE',
	'WRITELN');

    Fixup_Special_Items();

    Fixup_Hash_Table();

    Fixup_Type_Table();

    !
    ! Note that initialization has been done
    !
    PAS$_Tables_Initialized = True;

    END;

END
ELUDOM
