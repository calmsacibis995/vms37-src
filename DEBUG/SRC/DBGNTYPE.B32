MODULE DBGNTYPE (IDENT = 'V03-000') =

BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:
!
!	DEBUG
!
! ABSTRACT:
!
!	This module contains the parse and execution networks for the TYPE
!	verb. The parsing method employed is that of ATN's.
!
! ENVIRONMENT:
!
!	VAX/VMS
!
! AUTHOR:
!
!	Richard Title
!
! CREATION DATE:
!
!	9-14-81
!
! VERSION:
!
!	V03.0-001
!
! MODIFIED BY:
!	
!
! REVISION HISTORY:
!
!--

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE	
	DBG$NPARSE_TYPE,			! Parse network
	DBG$NEXECUTE_TYPE;			! Execution network

!
! REQUIRE FILES:
!

REQUIRE 'SRC$:DBGPROLOG.REQ';

REQUIRE 'SRC$:DBGGEN.REQ';
REQUIRE 'SRC$:SYSSER.REQ';

EXTERNAL ROUTINE
    dbg$sta_getsourcemod,		! Gets module rst pointer
    dbg$sta_symname,			! Turns module rst pointer back
    					! into a string
    dbg$fao_put,			! Formatted ascii output
    dbg$nnext_word,			! gets next word from input
    dbg$out_put,
    dbg$nmatch,				! Tries to match the next token
    dbg$nlist_freez,			! Allocates space
    dbg$nmake_arg_vect,			! Constructs error messages
    dbg$nsave_decimal_integer,		! Reads an integer from the 
    					! input string
    dbg$nsyntax_error, 			! Reports a syntax error
    
    dbg$src_type_lnum_source;		! The routine in DBGSOURCE that
    					! actually outputs the source
    					! lines to the terminal

EXTERNAL
    dbg$src_next_modrstptr,		! Contains module rst pointer
    					! used by TYPE command
    dbg$src_next_lnum,			! Contains next line num to be
    					! output in case of a TYPE command
    					! with no argument
    dbg$cp_out_str,			! Points to output buffer for 
    					! dbg$fao_put
    dbg$gl_buf_siz;			! Length of string in output buffer


GLOBAL ROUTINE dbg$nparse_type(
    input_desc,
    verb_node,
    message_vect) =
!++
! Functional Description
!
!	ATN parse network for the TYPE verb.
!	This routine takes a verb node for the TYPE verb, and a string
!	descriptor for the remaining (unparsed) input.
!	It constructs a linked list of noun nodes, each of which
!	contains a module rst pointer and a line number range.
!
! Formal Parameters
!
!	input_desc	- a longword containing the address of the 
!			  command input descriptor.
!	verb_node	- a longword containing the address of the verb node
!	message_vect	- the address of a longword to contain the address
!			  of a standard message argument vector.
!
! Implicit Inputs
!
!	none
!
! Implicit Outputs
!	
!	On success, the command execution tree is constructed.
!	On failure, a message argument vector is constructed or obtained.
!
! Routine value
!
!	sts$k_success (1)	- Success. Command execution tree constructed.
!	sts$k_severe  (4)	- Failure. Error encountered. Message argument
!				  constructed and returned.
!
! Side Effects
!
!	none
!--
BEGIN

MAP
    input_desc  : REF dbg$stg_desc,
    verb_node	: REF dbg$verb_node;

BIND
    dbg$cs_colon	= UPLIT BYTE (1, dbg$k_colon),
    dbg$cs_slash	= UPLIT BYTE (1, dbg$k_slash),
    dbg$cs_comma	= UPLIT BYTE (1, dbg$k_comma),
    dbg$cs_cr		= UPLIT BYTE (1, dbg$k_car_return),
    dbg$cs_backslash	= UPLIT BYTE (1, dbg$k_backslash);

LOCAL
    modrstptr,
    noun_node	    : REF dbg$noun_node,
    prev_noun_node  : REF dbg$noun_node,
    low_lnum,
    high_lnum,
    first_flag;				! True if this is the first
    					! line number range in the list.

    ! Create and link a noun node
    IF NOT dbg$nlist_freez(dbg$k_noun_node_size, noun_node, .message_vect)
    THEN
    	RETURN sts$k_severe;

    verb_node[dbg$l_verb_object_ptr] = .noun_node;

    first_flag = TRUE;
    modrstptr = 0;

    ! Check for TYPE <cr>

    IF dbg$nmatch(.input_desc, dbg$cs_cr, 1)
    THEN

    	BEGIN ! no argument supplied

    	! Try to get default module.

    	IF .dbg$src_next_modrstptr EQL 0
    	THEN
    	    BEGIN
    	    ! report an error
    	    .message_vect = dbg$nmake_arg_vect(dbg$_nonxtlin);
    	    RETURN sts$k_severe;
    	    END;
    	    
    	! The module rst pointer is placed in the adjective field of
    	! the noun node.

    	noun_node [dbg$l_adjective_ptr] = .dbg$src_next_modrstptr;

    	! Fill in the line numbers based on global info

    	noun_node [dbg$l_noun_value] = .dbg$src_next_lnum;
    	noun_node [dbg$l_noun_value2] = .dbg$src_next_lnum;

    	! The link field is zero
   
    	noun_node [dbg$l_noun_link] = 0;

    	END ! no argument supplied


    ELSE

    	WHILE TRUE DO

    	    BEGIN

    	    OWN
    		name_buf : VECTOR [81, BYTE]; ! Holds counted string with
    					      ! the module name
    	    
    	    LOCAL
    		string_ptr,
    		length,
    		char;

    	    ! Loop through the list of line number ranges.
    	    ! The most general form of the command is:

    	    ! TYPE mod1\l1:h1, mod2\l2:h2, ... , modn\ln:hn

    	    ! The user may omit the module, in which case it 
    	    ! defaults to a previously-specified module or
    	    ! to a module determined by the current scope.
    	    ! He may omit the high line num, in which case it
    	    ! is the same as the low line num.

    	    name_buf[0] = 0;
       	    string_ptr = .input_desc[dsc$a_pointer];
    	    length = .input_desc[dsc$w_length];

    	    ! read past leading blanks

    	    WHILE .length GTR 0 
    	    DO
    		BEGIN
    		char = ch$rchar_a(string_ptr);
    		length = .length - 1;
    		IF .char NEQ dbg$k_blank
    		THEN
    		    EXITLOOP;
    		END;

    	    ! If the length reaches zero then it is an error

    	    IF .length EQL 0 AND .char EQL dbg$k_blank 
    	    THEN
    		BEGIN
    		.message_vect = dbg$nmake_arg_vect(dbg$_needmore);
    		RETURN sts$k_severe;
    		END;

    	    ! Read until we reach a separating character.
    	    ! Place the characters into name_buf as we read them. 

    	    WHILE .length GTR 0 
    	    DO
    		BEGIN
    		IF .char EQL '\' OR .char EQL ',' 
    		OR .char EQL ':' OR .char EQL ' '
    		THEN
    		    EXITLOOP;
    		name_buf[0] = .name_buf[0] + 1;
    		name_buf[.name_buf[0]] = .char;
    		char = ch$rchar_a(string_ptr);
    		length = .length - 1;
    		END;

    	    IF .char EQL '\'  ! this signifies that we read a module name
    	    THEN
    		BEGIN

    		! Update the input descriptor
    		input_desc[dsc$a_pointer] = .string_ptr;
    		input_desc[dsc$w_length] = .length;
    	
    		! convert the name to an rst pointer and put it in the
    		! adjective field.

    		noun_node[dbg$l_adjective_ptr] = 
    		    dbg$sta_getsourcemod(name_buf);

    		! If the above routine returned zero then the user entered
    		! an invalid module.

    		IF .noun_node[dbg$l_adjective_ptr] EQL 0
    		THEN
    		    BEGIN
    		    .message_vect = dbg$nmake_arg_vect(
    			dbg$_nosuchmodu, 1, name_buf);
    		    RETURN sts$k_severe;
    		    END;

    		! fill in new value of modrstptr
    		modrstptr = .noun_node[dbg$l_adjective_ptr];

    		END ! pick up module name
    		
    	   ELSE

    		BEGIN ! fill in default module

    		IF .modrstptr NEQ 0
    		THEN
    		    ! use global default
    		    noun_node[dbg$l_adjective_ptr] = .modrstptr
    	
    		ELSE
    	
    		    BEGIN
    		    ! No default in modrstptr, so try to fill
    		    ! in a module based on current scope
    		
    		    modrstptr = dbg$sta_getsourcemod(0);
    		
    		    IF .modrstptr EQL 0
    		    THEN

    			BEGIN

    		        ! If this is still zero, then we have no scope with
       		        ! which to supply a module. Report an error.

    			.message_vect = dbg$nmake_arg_vect(
    			    dbg$_noscope, 1, .dbg$src_next_lnum);
    		 	RETURN sts$k_severe;

    			END

    		    ELSE
    			! we have found a module. 
    			! fill in the adjective field.
    			noun_node[dbg$l_adjective_ptr] = .modrstptr;

    		    END
    		END; ! Fill in default module

    	    ! read the low line num

    	    IF NOT dbg$nsave_decimal_integer(.input_desc, low_lnum,
    		.message_vect)
    	    THEN
    		RETURN sts$k_severe;    		
    	   
    	    ! Now look for colon which signifies that the user has also 
    	    ! specified a high line num.

    	    IF dbg$nmatch(.input_desc,dbg$cs_colon,1)
    	    THEN

    		BEGIN

    		! Get high line num

    		IF NOT dbg$nsave_decimal_integer(
    		    .input_desc, high_lnum, .message_vect)
    		THEN
    		    RETURN sts$k_severe;

    		END

    	    ELSE

    		! high line num same as low line num

    		high_lnum = .low_lnum;

    	    ! Fill in the fields of noun_node

    	    noun_node[dbg$l_noun_value] = .low_lnum;
    	    noun_node[dbg$l_noun_value2] = .high_lnum;

    	    ! Link in the noun node

    	    IF NOT .first_flag
    	    ! The first noun has already been linked to the verb
    	    THEN
    	
    		BEGIN

    		prev_noun_node[dbg$l_noun_link] = .noun_node;
    		noun_node[dbg$l_noun_link] = 0;

    		END;

    	    ! set up for next time around loop
    	    first_flag = FALSE;
    	    prev_noun_node = .noun_node;
    	
    	    ! Now look for comma or for end of line

    	    IF dbg$nmatch(.input_desc,dbg$cs_cr,1)
    	    THEN
    		EXITLOOP;

    	    ! If we did not see end of line, then the next character
    	    ! must be a comma.

    	    IF NOT dbg$nmatch(.input_desc,dbg$cs_comma,1)
    	    THEN
    		
    		BEGIN

    		.message_vect =
    		    dbg$nsyntax_error(dbg$nnext_word(.input_desc));
    		RETURN sts$k_severe;

    		END;

    	    ! Now create a new noun node for the next time around the loop.
    	    IF NOT dbg$nlist_freez(dbg$k_noun_node_size, noun_node,
    		.message_vect)
    	    THEN
    		RETURN sts$k_severe;

    	    END; ! While loop

    RETURN sts$k_success;

END; ! dbg$nparse_type



GLOBAL ROUTINE dbg$nexecute_type(verb_node,message_vect) =
!++
! Functional Description
!	
!	This routine performs the action associated with the TYPE
!	command.
!
! Formal Parameters
!
!	verb_node	- A longword containing the address of the
!			  head (verb) node.
!	message_vect	- The address of a longword to contain the
!			  address of an error message vector
!
! Implicit Inputs
!
!	The command tree contains a verb node and a linked list
!	of one or more noun nodes.
!
! Implicit Outputs
!
!	This routine calls a routine in DBGSOURCE which displays the
!	source lines to the user.
!
! Routine Value
!
!	A completion code.
!
! Completion Codes
!
!	sts$k_success (1) 	- Success. Command executed
!	sts$k_severe (4)	- Failure. The command could not be
!				  executed. An error message is constructed.
!
! Side Effects
!
!	none
!--
BEGIN

MAP 
    verb_node : REF dbg$verb_node;

LOCAL
    noun_node : REF dbg$noun_node,
    buffer : VECTOR[120, BYTE], 	! Buffer for dbg$fao_put
    modnameptr;

    noun_node = .verb_node[dbg$l_verb_object_ptr];

    DO
    	BEGIN

    	! loop through linked list of noun nodes.

    	! First output the module name.

    	! set up for fao_put
    	dbg$cp_out_str = buffer[1];
 	dbg$gl_buf_siz = 0;

    	! get module name
    	dbg$sta_symname(.noun_node[dbg$l_adjective_ptr], modnameptr);

    	dbg$fao_put(buffer, UPLIT BYTE(%ASCIC 'module !AC'),.modnameptr);
    	dbg$out_put(buffer);

    	! call the routine which actually displays the source lines

    	dbg$src_type_lnum_source(
    		.noun_node[dbg$l_adjective_ptr],
    		.noun_node[dbg$l_noun_value],
    		0,
    		.noun_node[dbg$l_noun_value2],
    		0,
    		0);

    	END
    
    UNTIL 0 EQL (noun_node = .noun_node[dbg$l_noun_link]);

    RETURN sts$k_success

END; ! dbg$nexecute_type

END
ELUDOM
