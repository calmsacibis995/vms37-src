MODULE DBGSTO (	IDENT = 'V03-000') =
BEGIN

!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
! FACILITY:	DEBUG
!
!++
! FUNCTIONAL DESCRIPTION:
!	DECLARES GLOBAL VARIABLES FOR DEBUG FACILITY
!
! Version:	1.12
!
! History:
!	Author:
!		Carol Peters, 03 Jul 1976: Version 01
!
!	Modified by:
!		Bruce Olsen, 11 SEP 1979
!		Ken Nappa, 28 APR 1980
!		Richard Title, 21 AUG 1981
!
! Revision history:
! 3.00  21-AUG-81	 RT	Added some globals that are used during the
!				source line display.
! 3.01	25-Sep-81	 RT 	Added & to dbg$token_table
! 3.02	20-Oct-81	 RT	Added dbg$gb_search_ptr and dbg$gb_def_search
!				to implement the SEARCH command.
! 3.03	12-Nov-81	 RT	Added dbg$gl_nest_stack and dbg$gl_nest_level
!				to fix a bug in handling nested subscript expressions
!				in FORTRAN and BASIC.
! 3.04	20-Nov-81	 RT	Added dbg$gb_set_module_flag. This is used to
!				allow for module names that begin with a number.
! 3.05  21-Dec-81	 RT	Added DBG$GB_EXC_BRE_FLAG and DBG$GB_GO_ARG_FLAG
!				to handle continuing from an exception break.
! 3.06  21-Dec-81	 RT	Deleted changes 1.01 through 1.10 from this list
!--

! INCLUDE FILES
!

REQUIRE 'src$:DBGPROLOG.REQ';
REQUIRE 'src$:DBGGEN.REQ';
REQUIRE 'src$:COMTER.REQ';

	!++
	!********************************************************************
	!NOTE:
	!
	! All initialization of addresses and pointers in the debugger
	!                MUST be done dynamically
	! to maintain position independence. At compile time these addresses
	! are relative to 0, but are relocated at run time since the debugger
	! is brought in "behind" the user program.
	!********************************************************************
	!--

!GLOBAL LITERAL
! The base of RST storage.  Some of the RST  data structures base 'pointers' 
!off this. This is now a link time input
	
!	DBG$_RST_BEGIN	= %X'7FFF0000'; for standard and test debugger
!	DBG$_RST_BEGIN  = "somewhere in P0 for SUPERDEBUG


LITERAL
	macro_syntax	= TRUE,		! MACRO debugger
	fortran_syntax	= TRUE,		! FORTRAN debugger
	bliss_syntax	= FALSE;	! BLISS debugger


!++
! THE dbg$char_table associates each ASCII character with a value
! from 0 to n. The meaning of the numeric value can be seen in
! literal definitions declared in SCALIT.BEG (for example, 1 is bound
! to alpha).
!--
GLOBAL BIND
	dbg$char_table = UPLIT BYTE (

	6,  0,  0,  0,  0,  0,  0,  0,	!000-007	treat null char as lf
	0,  4,  6,  6,  6,  6,  0,  0,	!010-017	tab, lf, vtab, ff, cr
	0,  0,  0,  0,  0,  0,  0,  0,	!020-027
	0,  0,  0,  0,  0,  0,  0,  0,	!030-037
	4,  5, 16, 28,  1, 29,  0, 16,	!040-047	space ! " # $ % & '
	9, 10, 21, 11, 24, 12, 20, 13,	!050-057	( ) * + , - . /
	2,  2,  2,  2,  2,  2,  2,  2,	!060-067	0 1 2 3 4 5 6 7
	2,  2, 14, 15, 22, 25, 23,  0,	!070-077	8 9 : ; < = > ?
	19, 3,  3,  3,  3,  3,  3,  1,	!100-107	@ A B C D E F G
	1,  1,  1,  1,  1,  1,  1,  1,	!110-117	H I J K L M N O
	1,  1,  1,  1,  1,  1,  1,  1,	!120-127	P Q R S T U V W
	1,  1,  1, 26, 18, 27, 17,  1,	!130-137	X Y Z [ \ ] ^ _
	0,  8,  8,  8,  8,  8,  8,  7,	!140-147	` a b c d e f g
	7,  7,  7,  7,  7,  7,  7,  7,	!150-157	h i j k l m n o
	7,  7,  7,  7,  7,  7,  7,  7,	!160-167	p q r s t u v w
	7,  7,  7,  0,  0,  0,  0,  0	!170-177	x y z { | } ~ delete

		) : VECTOR [,BYTE];

GLOBAL BIND
	dbg$token_table = UPLIT BYTE (
			op_paren_token,
			cl_paren_token,
			plus_token,
			minus_token,
			slash_token,
			colon_token,
			semicolon_token,
			quote_token,
			up_arrow_token,
			backslash_token,
			at_sign_token,
			period_token,
			asterisk_token,
			langle_token,
			rangle_token,
			comma_token,
			equals_token,
			lsquare_token,
			rsquare_token,
			hash_token,
			percent_token
    				) : VECTOR [, BYTE];

GLOBAL
	DBG$DEPOSIT_LENGVEC : VECTOR [DSC$K_DTYPE_HIGHEST, BYTE];

GLOBAL
	!++
	! Byte vectors are used to contain the
	! 'mode', 'step type', 'search type',
    	! and output configuration data structures and
	! also, the buffers used by RMS to return fully qualified filespecs
	!--
	dbg$gb_def_mod: VECTOR [mode_levels * mode_lvl_size, BYTE],	! DEFAULT MODE BLOCK
	dbg$gb_def_stp: VECTOR [step_levels * step_lvl_size, BYTE],	! DEFAULT STEP BLOCK
    	dbg$gb_def_search: VECTOR [search_levels * search_lvl_size, BYTE],
	dbg$gb_def_out: VECTOR [output_size, BYTE],			! DEFAULT OUTPUT CONFIG


	!++
	!********************************************************************
	!NOTE:
	!
	! All initialization of addresses and filespec "strings" input to
	! RMS user control blocks (FABs, RABs, etc.) MUST be done dynamically
	! to maintain position independence. At compile time these addresses
	! are relative to 0, but are relocated at run time since the debugger
	! is brought in "behind" the user program.
	!*********************************************************************
	!--
	!++
	! declare the FAB and RAB blocks for terminal I/O.
	!--

	dbg$gl_inpfab:	$FAB (FAC=GET
				, MRS=no_of_inp_chars
				),
	dbg$gl_outpfab:	$FAB (FAC=PUT
				, MRS=tty_out_width
				, RAT=<CR>
				, SHR=<NIL>
				),
	dbg$gl_inprab:	$RAB (USZ=no_of_inp_chars
				, ROP=<PMT>
				),
	dbg$gl_outprab:	$RAB (),


	! Declare FAB and RAB blocks for LOG file

	dbg$gl_logfab:	$FAB (RFM=VAR
				, FAC=PUT
				, FOP=<MXV>
				, MRS=tty_out_width
				, RAT=CR
				, SHR=NIL
				),
	dbg$gl_lograb:	$RAB (ROP=<EOF>
				),
	!++
	! This the only bitvector.
	!--
	dbg$gl_context: BITVECTOR [context_bits],			! context LONGWORD

	!++
	! These are global bytes.
	!--
    	dbg$gb_set_module_flag: BYTE,	! TRUE during processing of SET MODULE.
    					!    This changes the behavior of the
    					!    lexers so that they allow module
    					!    names that begin with numbers.
    	dbg$gb_exc_bre_flag: BYTE,	! TRUE if we are in an EXCEPTION BREAK
    	dbg$gb_go_arg_flag: BYTE,	! TRUE if there is an argument to GO
	dbg$gb_language: BYTE,		! HOLDS LANGUAGE INDEX
	dbg$gb_debug: BYTE,		! SAYS DEBUG OR USER CONTEXT
	dbg$gb_enab_ast: BYTE,		! BOOLEAN, TRUE IF ASTS ARE ENABLED
	dbg$gb_exit_dbg: BYTE,		! EXIT FROM DEBUG
	dbg$gb_loc_type: BYTE,		! TELLS WHAT SORT OF END RANGE LOCATION
	dbg$gb_resignal: BYTE,		! BOOLEAN, TRUE IF RESIGNALING ALL EXCEPTIONS
	dbg$gb_take_cmd: BYTE,		! BOOLEAN, TRUE IF ANOTHER COMMAND WILL BE READ
	dbg$gb_tbit_ok: BYTE,		! TBITS ARE LEGAL
	dbg$gb_sym_status : BYTE,	! contains status of sym lookups.
	dbg$gb_no_globals : BYTE,	! replaces mc_global_locked flag.
	dbg$gb_verb : BYTE,
	!++
	! Global words.
	!--
	dbg$gw_length,							! a place for the parser to store a user given length
	dbg$gw_loclngth	: INITIAL (0),					! Length given in a verb modifier type specification
	dbg$gw_gbllngth : INITIAL (0),					! Length given an override type spec
	dbg$gw_dfltleng : INITIAL (0),					! length given in a default type spec

	!++
	! Now refs to byte vectors. Don't confuse these with byte
	! vectors.
	!--
	dbg$gb_verptr  : REF VECTOR [, BYTE],				! POINTER TO INPUT BUFFER FOR VERIFY
	dbg$cp_out_str : REF VECTOR [, BYTE],				! POINTS INTO CURRENT OUTPUT BUFFER.
	dbg$gb_mod_ptr: REF VECTOR [, BYTE],				! POINTER TO CURRENT MODE LEVEL
	dbg$gb_stp_ptr: REF VECTOR [, BYTE],				! POINTER TO CURRENT STEP type
    	dbg$gb_search_ptr : REF VECTOR [, BYTE],

	!++
	! REFs to more complicated (or more general)
	! things than the above BYTE vectors.
	! (The defn of the following 'types' is why
	!  DBGRST.BEG is included in this module.)
	!--

	dbg$gb_logfsr : REF VECTOR [,BYTE],			! Resultant LOG filespec
	dbg$gb_logfse : REF VECTOR [,BYTE],			! Expanded LOG filespec
	dbg$gl_lognam : REF $NAM_DECL,				! LOG file NAM block

				! Pointer to the current scope vector (CSP)
	DBG$GL_CSP_PTR	: REF pth$pathname,

	DBG$GL_CISHEAD	: REF CIS_LINK,		! Command input stream anchor

	!++
	! Normal longword vectors.
	!--

	dbg$reg_values  : VECTOR [17,LONG]		! Register values
			  INITIAL (REP 17 OF (0)),
	dbg$reg_vector  : VECTOR [17,LONG]
			  INITIAL (REP 17 OF (0)),	! Vector of pointers to context regs
	dbg$gl_dimenlst : VECTOR [10],			! dimensions for FORTRAN array
    	dbg$gl_nest_stack : VECTOR [25],		! This stack holds the
    							! contents of DBG$GL_DIMENLST
    							! during nested subscript
    							! expressions. See the 
    							! routines DBG$PUSH_NEST_STACK
    							! and DBG$POP_NEST_STACK
    							! in the module DBGREDUC
    							! for details on how this works.
    	dbg$gl_nest_level,				! The level of nesting of
    							! subscript expressions.
	dbg$gl_list: VECTOR [3],			! LIST FOR COMMAND ARGUMENTS
	dbg$gl_partbptr: VECTOR [5],			! addresses of parse tables
	dbg$gl_stk : semantic_stack,			! semantic stack for tokens, etc.

	!++
	! And finally the global scalar longwords.
	!--
	dbg$gl_asci_len : INITIAL (4),		! Number of ascii characters to output
	dbg$gl_bpthead,				! POINTER TO HEAD OF BREAKPOINT CHAIN
	dbg$gl_buf_siz,				! character count in output buffer
	dbg$gl_type,				! a place for the parser to store a type.
	dbg$gl_dflttyp : INITIAL (DSC$K_DTYPE_L),! The type specified in a SET TYPE statement.
	dbg$gl_loctyp : INITIAL (-1),		! Type specified in verb modifier
	dbg$gl_gbltyp : INITIAL (-1),		! global override type.
	dbg$gl_get_lex,				! current lexical lexeme routine
	dbg$gl_head_lst,			! HEAD OF LINKED LIST
	dbg$gl_help_input,			! pointer to input for HELP
	dbg$gl_ind_com_file,			! Pointer to icf filespec
	dbg$gl_lis_ptr,				! pointer to current element of com arg list
	dbg$gl_keyw_tbl,			! name of current keyword table
	dbg$gl_last_loc,			! LAST LOCATION DISPLAYED
	dbg$gl_last_val,			! LAST VALUE DISPLAYED
	dbg$gl_next_loc,			! NEXT LOCATION TO DISPLAY
	dbg$gl_ovridtyp : INITIAL (0),		! The type specified as a verb modifier.
    	dbg$gl_set_source : INITIAL(0),		! TRUE DURING set source
    	dbg$gl_set_source2 : INITIAL(0),
	dbg$gl_reduc_rt,			! name of current action routines
	dbg$gl_runframe,			! pointer to current run frame
	dbg$gl_step_num,			! number of steps in stepping
	dbg$gl_symhead,				! POINTER TO HEAD OF SYMBOL TABLE
	dbg$gl_dlishead : INITIAL(0),		! Pointer to list of dummy descriptors
	dbg$gl_dlislast : INITIAL(0),		! Pointer to last item in
						!    in list of dummy descriptors
    	dbg$gl_search_verb,			! Points to head of command execution
    						!    tree for SEARCH.

	! Globals used for communication between the phases of the
	! SET SOURCE command:
	dbg$gl_module : INITIAL(0),		! Contains the module rst pointer
	dbg$gl_dirlist,				! Contains a pointer to the
						! directory list.

	dbg$gl_log_buf,							! pointer to buffer containing LOG filespec

	! Used for CLI communication

	dbg$gl_cmnd_radix : INITIAL (0),

	! Some globals used for communication between the phases of
	! deposit_cmd:

	dbg$floating_buffer : vector[30,byte],
	dbg$float_desc : BLOCK[8,BYTE],
	dbg$dbl_desc : BLOCK[8,BYTE],
	dbg$dyn_str_desc,		! pointer to descriptor for dynamic string
	dbg$deposit_source : BLOCK[12, BYTE], ! A standard descriptor for the source
	dbg$deposit_target : BLOCK[12, BYTE]; ! A standard descriptor for the target

	! Globals used for dst and gst management.
GLOBAL
	dbg$dst_begin_addr,		! virtual address where DST begins.
	dbg$dst_end_addr,		! virtual address of last byte in DST.
	dbg$dst_next_addr,		! virtual address where 'next' DST record begins.
	dbg$gsr_begin_addr,			! virtual address where GST begins.
	dbg$GSR_next_addr : ref vector[,word],	! virtual address of 'next' GST
	dbg$gst_begin_addr : ref gst_record;	! virtual address of current GST record
						! This is used solely by GET_NXT_GST

END
ELUDOM
