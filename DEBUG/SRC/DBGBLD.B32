MODULE DBGBLD ( IDENT = 'V03-000' ) =
BEGIN

!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:
!	DEBUG
!
! ABSTRACT:
!	Initialize and build the Runtime Symbol Table (RST) data structures.
!
!
! ENVIRONMENT:
!	This module runs on VAX under STARLET, user mode, non-AST level.
!
! Author:
!	Kevin Pammett, August 12, 1977.
!
! Version:	1.17
!
! MODIFIED BY:
!		Mike Candela, 30 January 1979
!		Mike CAndela, 25 January 1980
!
! 1.01	19-SEP-78	DAR	Changed diagnostics over to %IF form and
!				deleted routine PR_CS.
! 1.02	 3-OCT-78	MCC	Included logic to add BLISS type 0 records to
!				NT and SAT. Also, type 183 records to NT.	
! 1.03	24-OCT-78	DAR	Added new DST types to DBG$BUILD_MC and
!				DBG$_ADD_MODULE.
! 1.04	10-NOV-78	DAR	DBG$SRM_TYP_LEN now handles SRM types thru
!				DSC$K_DTYPE_P.
! 1.05	20-NOV-78	DAR	New names are added to the front of the linked
!				list in ADD_NT so that we can find multiple mappings.
! 1.06	08-DEC-78	DAR	Make explicit check in DBG$ADD_MODULE for descriptor
!				that indicates symbol should go into the SAT,
!				instead of calling DBG$DST_VALUE.
! 1.07	14-DEC-78	MCC	Changed dbg$add_module to set the NT_IS_BOUNDED
!				flag for BLISS routine formals that are REF to
!				a BLISS predefined structure.
! 1.08	 3-JAN-79	MCC	Fixed dbg$get_bounds to get correct length for
!				packed decimal strings
! 1.09	 9-JAN-79	MCC	Modified dbg$get_bounds to no longer check "column"
!				flag. This allows COBOL-74 array descriptors to
!				be added to the DST.
! 1.10	17-JAN-79	MCC	Changed dbg$get_bounds to accomodate new
!				COBOL-74 array descriptor type
! 1.11 	30-JAN-79	MCC	Fixed the way dbg$get_bounds computes array
!				length for class_anh descriptors.
! 1.12  21-AUG-79	TKM	Rewrote SRM_TYP_LEN to handle all SRM defined types
!				Modified GET_BOUNDS to accept CLASS_SD entries
! 1.13  11-OCT-79	TKM	Modified calls to DBG$DST_VALUE. Let the routine
!				Know if you are really accessing the item or adding
!				it to the name table
! 1.14  12-OCT-79	TKM	Added support of DSC$K_DTYPE_CAD to ADD_NT,
!					DBG$ADD_MODULE,DBG$BUILD_MC
! 1.15	14-JAN-80	KAN	Added call to dbg$read_access in dbg$get_bounds
!				to catch uninitialized descriptor garbage.
!				Previously generated "internal coding error."
!
! 1.16	25-JAN-80	MCC	Enhanced error recovery for OK_TO_ADD, eliminated
!				bug caused by error SIGNAL at too low a level
! 1.17  4-FEB-80	MCC	Revised worst cast estimating for OK_TO_ADD
!--

! TABLE OF CONTENTS:
!

FORWARD ROUTINE
	DBG$SRM_TYP_LEN,		! map standard types to corresponding lengths
	DBG$GET_BOUNDS : NOVALUE;	! Calculate the bounds of an array.

!
! INCLUDE FILES:
!

REQUIRE 'src$:dbgprolog.req';
REQUIRE 'SRC$:DBGGEN.REQ';
REQUIRE 'SRC$:SYSSER.REQ';

!
! MACROS:
!

!
! EQUATED SYMBOLS:
!


!+
! Declare the things necessary for the
! so-called RST statistics gathering facility.
!-


!
! EXTERNAL REFERENCES:
!

EXTERNAL
	DBG$GL_ASCI_LEN;		! Length (in bytes) of string data



EXTERNAL ROUTINE

	dbg$read_access;		! Verify access to memory


!
! OWN STORAGE:
!


GLOBAL ROUTINE DBG$SRM_TYP_LEN ( TYPE ) =
!++
! Functional Description:
!
!	Map the so-called SRM standard types to their
! associated size, in bytes.
!
! Formal Parameters:
!
!	type	-the SRM type encoding - a number from
!		 DSC$K_DTYPE_BU to DSC$K_DTYPE_HC, inclusive.
!
! Routine Value:
!
!	0, if the type is not one which we expect,
!	the size of the datum, in bytes, otherwise.
!
! Side Effects:
!
!	none.
!--
    BEGIN
	LOCAL
	    v ;

	OWN
	    SRM_LENGTHS : VECTOR[31,BYTE]	! Sizes of SRM type data.
	    INITIAL( BYTE (
		0, !	DSC$K_DTYPE_Z,  unspecified
		0, !	DSC$K_DTYPE_V,  bit
		1, !	DSC$K_DTYPE_BU,	Byte logical.
		2, !	DSC$K_DTYPE_WU,	Word logical.
		4, !	DSC$K_DTYPE_LU,	Longword logical.
		8, !	DSC$K_DTYPE_QU,	Quadword logical.
		1, !	DSC$K_DTYPE_B,	Byte integer.
		2, !	DSC$K_DTYPE_W,	Word integer.
		4, !	DSC$K_DTYPE_L,	Longword integer.
		8, !	DSC$K_DTYPE_Q,	Quadword integer.
		4, !	DSC$K_DTYPE_F,	Single-precision floating.
		8, !	DSC$K_DTYPE_D,	Double-precision floating.
		8, !	DSC$K_DTYPE_FC,	Complex.
		16,!	DSC$K_DTYPE_DC,	Double-precision Complex.
		0, !	DSC$K_DTYPE_T,  ASCII text string
		0, ! 	DSC$K_DTYPE_NU, numeric string unsigned
		0, !	DSC$K_DTYPE_NL, numeric string left separate sign
		0, !	DSC$K_DTYPE_NLO,numeric string left overpunch
		0, !	DSC$K_DTYPE_NR, numeric string right separate sign
		0, !	DSC$K_DTYPE_NRO,numeric string right overpunch
		0, !	DSC$K_DTYPE_NZ, numeric string zoned sign
		0, !	DSC$K_DTYPE_P,  packed decimal string
		0, !	DSC$K_DTYPE_ZI, sequence of instructions
		0, !	DSC$K_DTYPE_ZEM,procedure entry mask
		0, !	DSC$K_DTYPE_TR, ASCII text right justified
		16,!	DSC$K_DTYPE_OU, octaword logical
		16,!	DSC$K_DTYPE_O,  octaword
		8, !	DSC$K_DTYPE_G,  g_floating
		16,!	DSC$K_DTYPE_H,  h_floating
		16,!	DSC$K_DTYPE_GC, g_floating complex
		32 !	DSC$K_DTYPE_HC, h_floating complex		
	    ));


    IF ( v= .srm_lengths[.type]) GTR 0 
    THEN
	RETURN (.v);

    IF .type EQL DSC$K_DTYPE_P
    THEN
	RETURN ( (.dbg$gl_asci_len / 2) + 1 );

    IF ( .type GEQ DSC$K_DTYPE_T
    AND .type LEQ DSC$K_DTYPE_NZ )
    THEN
	RETURN (.dbg$gl_asci_len);

    RETURN (0);

    END;

GLOBAL ROUTINE DBG$GET_BOUNDS( DESCRIP_BLOCK, BOUNDS_DESC ) : NOVALUE =
!++
! Functional Description:
!
!	Deduce the virtual address of the begnning,
!	and the length (in bytes), of the indicated
!	array.  i.e. Given the SRM-defined 'array descriptor',
!	produce the corresponding DEBUG/RST-defined
!	'array bounds descriptor'.  The latter is
!	defined in DBGRST.BEG
!
! Formal Parameters:
!	DESCRIP_BLOCK	-address of SRM array descriptor
!	BOUNDS_DESC	-address of the ARRAY_BNDS_DESC we are
!			 to 'fill in'.
!
! Implicit Inputs:
!
!	The SRM-defined notion of 'array descriptor',
!	classes _A and _S, is currently implemented.
!
! Implicit Outputs:
!
!	None.
!
! Routine Value:
!	NOVALUE
!
! Side Effects:
!
!	BOUNDS_DESC is an output parameter.  (see above)
!--

BEGIN
	MAP
		DESCRIP_BLOCK : REF BLOCK [,BYTE],
		BOUNDS_DESC : REF ARRAY_BNDS_DESC;
	LOCAL
		SPAN_BLOCK : REF VECTOR,
		NUM_ARRAY_ELEMS;

	! Verify that descrip_block[dsc$b_class] is referencable.
	! If not, dbg$read_access will give us a clean escape.

	dbg$read_access(descrip_block[dsc$b_class],1);


	! See that we have been given a valid array
	! descriptor.  For now we only handle
	! _CLASS_A (general array) and
	! _CLASS_B (type CHARACTER) and
	! COBOL-74 _CLASS_ANH arrays.

	IF .DESCRIP_BLOCK[ DSC$B_CLASS ] EQL DSC$K_CLASS_A 
	THEN
		BEGIN

		! General array descriptors.  Check consistency
		! and get out if there is something wrong.

		IF   
		     (NOT .DESCRIP_BLOCK [DSC$V_FL_COEFF])
		   OR
		     (NOT .DESCRIP_BLOCK [DSC$V_FL_BOUNDS])
		   OR
		     (.DESCRIP_BLOCK[ DSC$B_DIMCT] LEQ 0 )
		THEN
			BEGIN
			SIGNAL( DBG$_INVARRDSC );
			! no return
			RETURN;
			END;

		! Calculate the required values for general arrays.
		! The length of the array is simply
		! tallied up by multiplying 
		! the total number of elements by each
		! element size.  The total number of 
		! elements is the product of the number of
		! elements in each dimension.
	
		SPAN_BLOCK = DESCRIP_BLOCK[ DSC$L_M1 ];
		NUM_ARRAY_ELEMS = .SPAN_BLOCK[0];
	
		INCR COUNT FROM 1 TO (.DESCRIP_BLOCK[ DSC$B_DIMCT ] -1 )
			DO
	
		NUM_ARRAY_ELEMS = .NUM_ARRAY_ELEMS * .SPAN_BLOCK[.COUNT];
	
		! Calculate the length of the array, in bytes,
		! and pass back this info.

		BOUNDS_DESC[ ARRAY_LENGTH ] = .NUM_ARRAY_ELEMS * 
						.DESCRIP_BLOCK[ DSC$W_LENGTH ];

		! End of special _CLASS_A processing.
		END
	ELSE
	IF .DESCRIP_BLOCK[ DSC$B_CLASS ] EQL DSC$K_CLASS_S OR
	   .DESCRIP_BLOCK[ DSC$B_CLASS ] EQL DSC$K_CLASS_SD OR
	   .DESCRIP_BLOCK[ DSC$B_CLASS ] EQL DSC$K_CLASS_D
	THEN
		BEGIN

		! Class S is for static strings.
		! For now, no checking.  Just pick up
		! the needed info and send it back.
		! Only check for packed decimal string because length is in 
		! digits and must be converted to bytes.

		IF .DESCRIP_BLOCK [DSC$B_DTYPE] EQL DSC$K_DTYPE_P
		THEN
	BOUNDS_DESC [ARRAY_LENGTH] = (.DESCRIP_BLOCK [DSC$W_LENGTH] / 2) + 1
		ELSE
		BOUNDS_DESC[ ARRAY_LENGTH ] = .DESCRIP_BLOCK[ DSC$W_LENGTH ];

		! End of special _CLASS_S processing.
		END
	ELSE
	IF .DESCRIP_BLOCK [DSC$B_CLASS] EQL DSC$K_CLASS_nca
	THEN
		BEGIN
		IF   (.DESCRIP_BLOCK [DSC$V_FL_COLUMN] EQL 1)
		   OR
		     (NOT .DESCRIP_BLOCK [DSC$V_FL_COEFF])
		   OR
		     (NOT .DESCRIP_BLOCK [DSC$V_FL_BOUNDS])
		   OR
		     (.DESCRIP_BLOCK[ DSC$B_DIMCT] LEQ 0 )
		THEN
			SIGNAL (DBG$_INVARRDSC);	! NO RETURN
		
		! Pick up the array size in bytes from the descriptor. 
		! NOTE this is the total no. of bytes within which we can
		! expect to find array elements (i.e. the span * the upper
		! bound for each dimension. However, the value in ARSIZE is
		! based on the "imaginary" _A0 address and must be adjusted
		! when used with _POINTER

		BOUNDS_DESC [ARRAY_LENGTH] = .DESCRIP_BLOCK [DSC$L_ARSIZE] -
					    (.DESCRIP_BLOCK [DSC$A_POINTER] -
					     .DESCRIP_BLOCK [DSC$A_A0]);

		! End of special _CLASS_ANH processing
		END
	ELSE

		! No more classes currently supported.

		BEGIN
		SIGNAL( DBG$_INVARRDSC );
		! no return
		RETURN;
		END;
	
	! Pass back the required info common to all types.
	! Currently this is only the address where the data begins.

	BOUNDS_DESC[ ARRAY_ADDRESS ] = .DESCRIP_BLOCK[ DSC$A_POINTER ];

END;
END				!End of module
ELUDOM
