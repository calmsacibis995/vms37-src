MODULE DBGACT ( IDENT = 'V03-000') =
BEGIN

!++
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!--

!++
! FACILITY:	DEBUG (DBG)
!
! ABSTRACT:
!	End of command line action routine plus a few other parsing
!	action routines.
!
! ENVIRONMENT:	STARLET, user mode, interrupts disabled.
!
! Version:	1.16
!
! History:
!	Author:
!		Carol Peters, 03 Jul 1976: Version 01
!
!	Modified by:
!		John Francis, 7 April 1981
!		Richard Title, 20 Aug 1981
!
!+
! 3.00  20-AUG-81	 RT	Added support for the following new commands:
!				TYPE, EXAMINE/SOURCE, SET SOURCE, and
!				CANCEL SOURCE
! 3.01	29-OCT-81	 RT	Added support for the SEARCH command
! 3.02	15-NOV-81	 RT	Initialized DBG$GL_NEST_STACK in DBG$END_OF_CMD.
!				This stack was added to fix an SPR about 
!				arrays in FORTRAN.
! 3.03	20-Nov-81	 RT	Initialized DBG$GB_SET_MODULE_FLAG in DBG$END_OF_CMD.
!				This flag was added to fix a bug regarding
!				module names that begin with numbers.
! 3.04  21-Dec-81	 RT	Changed GO and STEP to correctly handle 
!				continuation from an exception break.
! 3.05	21-Dec-81	 RT	Removed changes 1.01 through 1.16 from this list.
!--


! TABLE OF CONTENTS
!--
FORWARD ROUTINE
	dbg$break_setup : NOVALUE,	! ROUTINE TO PREPARE TO SET BREAKPOINTS
	dbg$cancel_parm : NOVALUE,	! SETS CONTEXT BITS FOR CANCEL COMMAND.
	dbg$can_switch : NOVALUE,	! SETS CONTEXT BITS FOR "/" CANCELS.
	dbg$end_of_cmd : NOVALUE,	! END OF COMMAND PROCESSING ROUTINE
	dbg$end_of_line : NOVALUE,	! end of line processing routine
	dbg$perform_cmd,		! EXECUTES A DEBUG COMMAND
	dbg$set_overs : NOVALUE,	! SETS MODE LEVEL TO LOCAL OR OVERRIDE LEVEL
	dbg$show_param : NOVALUE,	! SETS CONTEXT BITS ABOUT WHAT IS TO BE SHOWN
	delete_desclist: NOVALUE,	! Free up space used for dummy descriptors
	switch_command : NOVALUE;	! SWITCHES BREAKPOINTS, DEFAULTS, ETC.


!
! Require files:
!

REQUIRE 'src$:dbgprolog.req';
REQUIRE 'src$:DBGGEN.REQ';
REQUIRE 'SRC$:BSTRUC.REQ';
REQUIRE 'src$:COMTER.REQ';
REQUIRE 'SRC$:SYSSER.REQ';

EXTERNAL LITERAL dbg$gl_sup_or_test : WEAK;	! Switch for SUPERDEBUG or TEST debug

EXTERNAL ROUTINE
	dbg$sta_setcontext : NOVALUE,		! Sets registers context
	dbg$ninitialize : NOVALUE,		! Calls lang spec initialization
    	dbg$nexecute_search,			! Performs the SEARCH command
	DBG$REL_TEMPMEM: NOVALUE,		! Release all temporary memory
	DBG$RST_TEMP_RELEASE: NOVALUE,		! Release temporary RST entries
	dbg$nout_arg_vect : NOVALUE,		! Outputs message arg vector
	dbg$rst_type,				! Symbol table type routine
	dbg$evaluat_cmd : novalue,		! handle the DEBUG EValuate command
	dbg$cis_connecticf : NOVALUE,		! Opens and connects an icf
	dbg$emit_help : NOVALUE,		! Outputs HELP
	dbg$srm_typ_len,			! map data types to sizes, in bytes.
	dbg$set_optrace,			! SET/CANCEL opcode tracing.
	dbg$language,				! report on the current language
	dbg$is_it_entry,			! Determine if ADDR => routine.
	dbg$sta_setregisters : NOVALUE,		! Resets registers context
	dbg$delete_path,			! free up pathname storage
	dbg$call_cmd,				! calls a user subroutine
	dbg$canc_module,			! cancels symbols for modules
	dbg$define_sym,				! DEFINE COMMAND
	dbg$deposit_cmd,			! deposit COMMAND
	dbg$examine_cmd,			! EXAMINE COMMAND
	dbg$free_arg,				! FREES ELEMENTS OF A COMMAND ARGUMENT LIST
	dbg$freerelease,			! releases storage in dynamic allocation area
	dbg$hex_dec_cvrt,			! conversion routine
	dbg$init_modes,				! INITIALIZES MODES
	dbg$set_mod_def,			! RESETS MODES TO INITIALIZATION MODE
    	dbg$init_search: NOVALUE,		! Initializes search settings
    	dbg$set_search_lvl: NOVALUE,		! Sets search level back
    						!     to user-defined level
    	dbg$set_search_lst: NOVALUE,		! Sets a list of search settings
	dbg$save_bpt,				! SETS A BREAKPOINT
	dbg$save_scope,				! saves a current path name
	dbg$set_context,			! INITIALIZES CONTEXT BITS
	dbg$set_lang,				! sets the DEBUG input language
	dbg$set_mod_lst,			! SETS MODE LIST
	dbg$set_mod_lvl,			! SETS MODE pointer
	dbg$set_module,				! sets up symbols for modules
	dbg$set_new_mod,			! SETS NEW MODES
	dbg$show_bpts,				! SHOW BREAK COMMAND
	dbg$show_mode,				! SHOW MODE COMMAND
	dbg$show_module,			! show module command
	dbg$rst_showscope : NOVALUE,		! show scope command
	dbg$show_type,				! show type command
	dbg$cancel_bpt,				! Routine to cancel one or more
						! break, trace, or watchpoints.
	dbg$traceback,				! shows current stack frame nesting
	dbg$set_stp_def,			! RESETS STEP LEVELS TO DEFAULTS
	dbg$show_step,				! display step settings
	dbg$set_stp_lst,			! sets step list
	dbg$thread_ret,				! Address threaded breakpoints
						! return to.
	dbg$show_output: NOVALUE,		! Display OUTPUT configuration
	dbg$set_log: NOVALUE,			! Set LOG file filespec
	dbg$set_out_lst: NOVALUE,		! Set OUTPUT configuration
	dbg$cis_remove,				! Remove a link from the cis
	dbg$src_show_source : NOVALUE,		! Handles SHOW SOURCE command.
    	dbg$show_search: NOVALUE,		! Handles SHOW SEARCH command
	dbg$type_cmd : NOVALUE,			! Handles TYPE command.
	dbg$exa_source_cmd : NOVALUE,		! Handles EX/SOURCE command.
	dbg$src_cancel_source : NOVALUE,	! Handles CANCEL SOURCE command.
	dbg$src_set_source : NOVALUE,		! Handles SET SOURCE command.
	dbg$src_set_max_files : NOVALUE,	! Handles SET MAX_SOURCE_FILES
    	dbg$nshow_max_source_files : NOVALUE,	! Handles SHOW MAX_SOURCE_FILES
    	dbg$nshow_margins : NOVALUE;		! Handles SHOW MARGINS

EXTERNAL
    	dbg$gb_exc_bre_flag: BYTE,		! TRUE during an exception break
    	dbg$gb_go_arg_flag: BYTE,		! TRUE if there is an argument
    						!    to GO.
	dbg$gl_help_input,			! Pointer to HELP input
    	dbg$gb_search_ptr: REF VECTOR[,BYTE],	! Pointer to search structure
	dbg$gb_mod_ptr: REF VECTOR [,BYTE],	! Pointer to the mode structure
    	dbg$gb_set_module_flag: BYTE,		! TRUE during SET MODULE command.
	dbg$gb_exit_dbg: BYTE,			! EXIT FROM DEBUG
	dbg$gb_debug:	 BYTE,			! FLAG WHICH SAYS IN DEBUG
	dbg$gb_resignal: BYTE,			! FLAG FOR RESIGNALING EXCEPTIONS
	dbg$gb_take_cmd: BYTE,			! FLAG WHICH SAYS CONTINUE TO ACCEPT COMMANDS
	dbg$gb_language: BYTE,			! contains index to current language
	dbg$gw_loclngth: word,			! Length field of command override type
	dbg$gw_dfltleng: word,			! Length given in SET TYPE

	dbg$gw_gbllngth: word,			! Length given in SET TYPE/OVERRIDE.
	dbg$gl_dlishead,			! Pointer to list of dummy descriptors
	dbg$gl_asci_len,			! holds length of ascii string.
	dbg$gl_context: BITVECTOR,		! CONTEXT WORD
	dbg$gl_dimenlst : VECTOR,		! FORTRAN dimension list
    	dbg$gl_nest_level,			! Nesting level of subscripts
    	dbg$gl_nest_stack: VECTOR,		! Stack of saved subscripts
    	dbg$gl_search_verb,			! Head of command execution tree
    						!    for SEARCH
    	dbg$gl_set_source,
    	dbg$gl_set_source2,
	dbg$gl_head_lst,			! HEAD OF COMMAND ARGUMENT LIST
	dbg$gl_lis_ptr,				! ptr to current element of command arg list
	dbg$gl_list: VECTOR,			! LIST FOR EXPRESSIONS
	dbg$gl_loctyp,				! command override type.
	dbg$gl_dflttyp,				! type given in SET TYPE.
	dbg$gl_gbltyp,				! type given in SET TYPE/OVERRIDE.
	dbg$gl_runframe : REF BLOCK [, BYTE],	! pointer to current run frame
	dbg$gl_stk : semantic_stack,		! semantic stack for tokens etc.
	dbg$GB_stp_ptr : ref vector[,byte],	! current step type
	dbg$gl_step_num,			! number of steps to take in single step mode
	dbg$pseudo_prog,			! Used for DEBUG's CALL command.
	dbg$gl_logfab : BLOCK [,BYTE],		! FAB for LOG file
	dbg$gb_def_out : VECTOR [,BYTE], 	! OUTPUT config structure
	dbg$gl_cishead : REF cis_link,		! Head of command input stream
	dbg$gl_modrstptr2,			! Holds module pointer during
						! TYPE command.
	dbg$gl_module,				! Hold module pointer during
						! SET SOURCE/MODULE= command.
	dbg$gl_dirlist,				! Holds pointer to directory
						! list during 
						! SET SOURCE dir-list
						! command.
    	dbg$src_left_margin,			! left margin for source display
    	dbg$src_right_margin;			! right margin for source display


GLOBAL ROUTINE dbg$break_setup (semsp, expr_value, after_count) : NOVALUE =
!++
! FUNCTIONAL DESCRIPTION:
!	Sets the context bit that says the command is setting a breakpoint,
!	watchpoint, or tracepoint.  Saves the location at which to set the
!	BPT or watchpoint.
!
! FORMAL PARAMETERS:
!	semsp		- OFFSET TO TOP OF PARSE STACK WHICH HOLDS "SET_TOKEN"
!	expr_value	- VALUE OF THE EXPRESSION FOR THE BREAK, TRACE, OR WATCH.
!	after_count	- VALUE OF THE "AFTER" SWITCH OR 1.
!
! IMPLICIT INPUTS:
!	none
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	NOVALUE
!
! SIDE EFFECTS:
!	Sets a context bit based on the tokens on the semantic stack and
!	saves the location of the break, trace, or watchpoint.
!
!	Fills in entries of DBG$GL_LIST[0,1,2] since they are used to
!	communicate break/trace/watch-point info.
!--

    BEGIN


	SELECTONE .dbg$gl_stk [.semsp + 1, stk$v_val1] OF

	SET

	[exception_token]:	dbg$gl_context [dbg$k_resignal] = TRUE;

	[watch_token]:
		BEGIN
		LOCAL
			nt_ptr : REF rst$entry;

		dbg$gl_context [dbg$k_watch] = TRUE;		! Set watchpoint context bit.

		!+
		! Use the 0th element of the list to pass on the watchpoint
		! address, and the second element to pass on the element
		! size, in bytes.
		! We will use the mode length if we can't find the size.
		!-

		dbg$gl_list[0] = .expr_value;		! Load address of watchpoint.
		IF (nt_ptr = .dbg$gl_stk [.semsp+2, stk$v_nt_ptr]) NEQ 0
		then	! Pass on the element length, if it can be deduced.

		dbg$gl_list[1] = dbg$srm_typ_len( dbg$rst_type(.nt_ptr) );
		END;

	[trace_token]:
		BEGIN
		dbg$gl_context [dbg$k_trace] = TRUE;
		dbg$gl_list [0] = .expr_value;		! Load address of tracepoint.
		END;

	[break_token]:
		BEGIN
		dbg$gl_context [dbg$k_break] = TRUE;
		dbg$gl_list[0] = .expr_value;		! Address of desired breakpoint
		dbg$gl_list[1] = .after_count;		! After count for breakpoint
		END;

	TES;
	dbg$gl_context [dbg$k_set_break] = TRUE;
    END;

GLOBAL ROUTINE dbg$cancel_parm (semsp) : NOVALUE =
!++
! FUNCTIONAL DESCRIPTION:
!	SETS THE CONTEXT BIT TO CANCEL.
!	ALSO SETS A CONTEXT BIT TO SAY WHETHER BREAKPOINTS,
!	TRACEPOINTS, MODES, OR ALL ARE TO BE SWITCHED.
!	ARE TO BE SWITCHED.
!
! FORMAL PARAMETERS:
!	semsp - OFFSET IN PARSE STACK WHICH HOLDS CURRENT TOKEN
!		HOLDS THE KEYWORD CANCEL.
!
! IMPLICIT INPUTS:
!   4(SEMSP) points to the token about to be canceled, one of:
!	EXCEPTION, MODE, MODULE, ALL, SCOPE, BREAK, TRACE, or WATCH.
!   8(SEMSP) points to the expression value if the token was:
!	BREAK, TRACE, or WATCH.
!
! IMPLICIT OUTPUTS:
!	A context bit in DBG$GL_CONTEXT is set.
!
! ROUTINE VALUE:
!	NOVALUE
!
! SIDE EFFECTS:
!	none
!--

    BEGIN


    dbg$gl_context [dbg$k_cancel] = TRUE;		! Set CANCEL context bit

    SELECTONE .dbg$gl_stk [.semsp + 1, stk$v_val1] OF

	SET

	[exception_token]:	dbg$gl_context [dbg$k_resignal] = TRUE;

	[mode_token]:		dbg$gl_context [dbg$k_mode] = TRUE;

	[module_token]:		dbg$gl_context [dbg$k_module] = TRUE;

	[all_token]:		dbg$gl_context [dbg$k_all] = TRUE;

	[scope_token]:		dbg$gl_context [dbg$k_scope] = TRUE;

	[source_token]:		dbg$gl_context [dbg$k_source] = TRUE;

	[break_token]:		BEGIN
				!+
				! If the given BREAK address corresponds to a
				! routine, then the break was actually set
				! on routine+2 so that is what we should cancel.
				!-
				dbg$gl_list[1] = .dbg$gl_stk [.semsp + 2, stk$v_val1];

				IF DBG$IS_IT_ENTRY(.dbg$gl_list[1])
				THEN	dbg$gl_list[1] = .dbg$gl_list[1] +2;
				dbg$gl_context [dbg$k_break] = TRUE;
				END;

	[trace_token]:		BEGIN
				dbg$gl_list [1] = .dbg$gl_stk [.semsp + 2, stk$v_val1];
				IF dbg$is_it_entry(.dbg$gl_list [1])
				THEN dbg$gl_list [1] = .dbg$gl_list [1] +2;
				dbg$gl_context [dbg$k_trace] = TRUE;
				END;


	[watch_token]:		BEGIN
				dbg$gl_context [dbg$k_watch] = TRUE;
				dbg$gl_list [1] = .dbg$gl_stk  [.semsp + 2, stk$v_val1];
				END;

	TES;
    END;

GLOBAL ROUTINE dbg$can_switch (semsp) : NOVALUE =
!++
! FUNCTIONAL DESCRIPTION:
!	This routine is called when a switch appears in the cancel command,
!	as in "CANCEL BREAK/ALL".  It sets the cancel context bit and looks
!	back on the parse stack for the tokens that indicate which context
!	bit to set.
!
! FORMAL PARAMETERS:
!	semsp	- Pointer into the parse stack. (currently pointing to
!		  the CANCEL_TOKEN.
!
! IMPLICIT INPUTS:
!   4(SEMSP) Points to one of the tokens: BREAK, TRACE, or WATCH.
!   8(SEMSP) Points to one of the tokens: ALL, CALLS, or BRANCH.
!
! IMPLICIT OUTPUTS:
!	A context bit in DBG$GL_CONTEXT is set.
!
! ROUTINE VALUE:
!	NOVALUE
!
! SIDE EFFECTS:
!	none
!--

    BEGIN

    dbg$gl_context[dbg$k_cancel] = TRUE;		! Set the cancel context bit.

    SELECTONE .dbg$gl_stk [.semsp + 1, stk$v_val1] OF

	SET

	[break_token]:	dbg$gl_context[dbg$k_all_break] = TRUE;	! Cancel all breakpoints

	[watch_token]:	dbg$gl_context[dbg$k_all_watch] = TRUE;	! Cancel all watchpoints

	[trace_token]:	BEGIN
			IF .dbg$gl_stk [.semsp + 3, stk$v_val1] EQL all_token
			THEN	dbg$gl_context[dbg$k_all_trace] = TRUE
			ELSE
			    IF .dbg$gl_stk [.semsp + 3, stk$v_val1] EQL calls_token
			    THEN    dbg$gl_context[dbg$k_trce_call] = TRUE
			    ELSE    dbg$gl_context[dbg$k_trce_brch] = TRUE;
			END;
	TES;

    END;

GLOBAL ROUTINE DBG$END_OF_CMD : NOVALUE =
!++
! FUNCTIONAL DESCRIPTION:
!	Resets all DEBUG context that is exclusive to a single
!	DEBUG command. This includes resetting default
!	modes from single line overrides back to the actual default
!	modes and resetting a large number of context bits.
!
!	This routine also releases all temporary memory allocated in the
!	course of processing the command, and it releases all unreferenced
!	RST entries on the Temporary RST Entry List.
!
! FORMAL PARAMETERS:
!	none
!
! IMPLICIT INPUTS:
!	none
!
! IMPLICIT OUTPUTS:
!	The default modes, step-modes, and context bits are established.
!	Some global storage is re-initialized and all excess storage is released.
!
! ROUTINE VALUE:
!	novalue
!
! SIDE EFFECTS:
!	none
!--

    BEGIN

	!+
	! Set the exit flag to true so that if an error occurs during
	! the processing of this routine, that error is perceived
	! as fatal. This routine guarantees the internal consistency
	! of DEBUG, and must succeed or give up.
	!-
	dbg$gb_exit_dbg = TRUE;

    	! Reset mode level to user default level
    	!
	dbg$init_modes (override_mode, user_def_mode);
	dbg$set_mod_lvl (user_def_mode);

    	! Reset search settings back to user default level
    	!
    	dbg$init_search (override_search, user_def_search);
    	dbg$set_search_lvl (user_def_search);

	dbg$set_context ();

	dbg$free_arg ();		! Free storage used in argument accumulation,
	delete_desclist();		! Free storage used in dummy descriptors
	dbg$delete_path();		! pathname building, and for the input line itself.
	DBG$REL_TEMPMEM();
	DBG$RST_TEMP_RELEASE();
	dbg$gl_list [0] = 0;		! Zero out the locations that hold breakpoint setting data.
	dbg$gl_list [1] = 0;
	dbg$gl_list [2] = 0;
	dbg$gl_lis_ptr  = 0;		! Zero current ptr to command arg list
	dbg$gl_asci_len = .dbg$gb_mod_ptr[mode_length];	! Initialize ascii length
	dbg$gl_loctyp = -1;		! Zero command override type.
	dbg$gw_loclngth= 0;		! And its associated length.

	dbg$gl_module = 0;		! Zero out global used to hold 
					! module pointer during
					! SET SOURCE/MODULE= command.
	dbg$gl_modrstptr2 = 0;		! Zero out global used to hold 
					! module pointer during
					! TYPE command.
    	dbg$gl_set_source = 0;
    	dbg$gl_set_source2 = 0;
    	dbg$gb_set_module_flag = FALSE;	! This flag is TRUE during a SET MODULE 
    					!    command.
	zerocor (dbg$gl_dimenlst, 10);	! Zero storage to hold array dimensions.
    	zerocor (dbg$gl_nest_stack, 25);! Zero storage to hold array dimensions
    					!     during nested subscript evaluation
    	dbg$gl_nest_level = 0;		! Nesting level of subscript expressions
    					!     set back to zero.
	dbg$sta_setcontext (0);		! Set default register context

	dbg$gb_exit_dbg = FALSE;	! Now cancel exit flag since all went well.

    END;

GLOBAL ROUTINE dbg$end_of_line : NOVALUE =
!++
! FUNCTIONAL DESCRIPTION:
!	Calls dbg$end_of_cmd to reset all single command context.
!	Then frees the storage that was allocated to hold the command
!	line. The top link of the command input stream is removed, but
!	only if it is of type "buffer".
!
! FORMAL PARAMETERS:
!	none
!
! IMPLICIT INPUTS:
!	The head of the command argument list.
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	none
!
! SIDE EFFECTS:
!	Defaults are reestablished. Storage for input line is freed.
!	A link may be removed from the command argument list.
!--
    BEGIN

	dbg$end_of_cmd ();		! Perform end of command cleanup
	dbg$gb_exit_dbg = TRUE;		! Set the exit flag to return to CLI on errors

	! We only want to remove the top link of the cis if that link is a
	! buffer of some flavor. If the top link is of type cis_rab, it has
	! just been put there by an @... command and not yet read from.

	IF .dbg$gl_cishead[dsc$b_dtype] EQL cis_inpbuf
	OR .dbg$gl_cishead[dsc$b_dtype] EQL cis_acbuf
	THEN
		dbg$cis_remove();

	dbg$gb_exit_dbg = FALSE;	! Reset exit flag.

    END;

GLOBAL ROUTINE dbg$perform_cmd (semsp) =
!++
! FUNCTIONAL DESCRIPTION:
!	Action routine that executes a DEBUG command.
!	Then the one-line modes are reset to their default settings.
!
! FORMAL PARAMETERS:
!	semsp	- offset in parse stack that holds current token. This
!		  is always a command verb or an end of command token.
!
! IMPLICIT INPUTS:
!	DBG$GB_TAKE_CMD says if we are really supposed to do
!	the indicated command or not.
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	TRUE	- Continue parsing input string.
!	FALSE	- Go read another command from the user.
!
! SIDE EFFECTS:
!	A DEBUG command is actually executed.
!	A signal is done to get us out if we aren't supposed
!	to be executing user commands at this point.
!--

	BEGIN



	!++
	! Execute the complete command now that it is safe to do so.
	!--
	SELECTONE .dbg$gl_stk [.semsp, stk$v_val1] OF

		SET

		[at_sign_token]:

			BEGIN

			! Check for end of present input line

			IF .dbg$gl_stk [.semsp+1, stk$v_val1] EQL eol_token
			THEN
			    dbg$end_of_line ();

			! Open and connect the icf

			dbg$cis_connecticf ();

			! Return false so that input is taken from the icf

			RETURN false;

			END;
		[calls_token]:
			BEGIN
			dbg$call_cmd ();
			IF .dbg$gl_stk[.semsp+1, stk$v_val1] EQL eol_token
			THEN
				dbg$end_of_line()
			ELSE
				dbg$end_of_cmd();
			RETURN FALSE
			END;

		[cancel_token]:
			switch_command ();


		[define_token]:
			BEGIN

			LOCAL
				desc_ptr : REF BLOCK [, BYTE],
				pointer;

			pointer = .dbg$gl_head_lst;
			WHILE .pointer NEQ 0
			DO
				BEGIN
				dbg$define_sym (.list_elem_exp1 (.pointer), .list_elem_exp2 (.pointer));
				desc_ptr = .list_elem_exp1 (.pointer);
				dbg$freerelease (.desc_ptr, ((.desc_ptr [dsc$w_length] + 3) / %UPVAL) + 2);
				pointer = .list_elem_flink (.pointer);
				END;
			END;


		[deposit_token]:
			BEGIN
			dbg$deposit_cmd ();
			dbg$sta_setregisters ();
			END;


		[eol_token]:
			BEGIN
			dbg$end_of_line ();
			RETURN FALSE
			END;


		[examine_token]:
			BEGIN
			dbg$gl_context [dbg$k_examine] = TRUE;
			dbg$examine_cmd ();
			END;


		[evaluate_token]:
			BEGIN
			dbg$evaluat_cmd();
			END;

		[exsource_token] :
			BEGIN
			dbg$exa_source_cmd();
			END;

		[exit_token]:
			BEGIN
			! When an EXIT is entered to the debugger
			! we want to 'go up a level' to the next link
			! in the command input stream. This is done for
			! indirect command files by removing
			! the links for the RAB as well as the associated buffer.

			IF .dbg$gl_cishead[dsc$b_dtype] EQL cis_inpbuf
			THEN
				BEGIN
				LOCAL
					prev_link : REF cis_link;
				
				prev_link = .dbg$gl_cishead[next_link] ;
				IF .prev_link[dsc$b_dtype] EQL cis_rab
				THEN
					BEGIN
					dbg$cis_remove();	! remove buffer
					dbg$cis_remove();	! remove RAB
					RETURN FALSE;
					END
				ELSE
					IF .prev_link[dsc$b_dtype] EQL cis_dbg$input
					THEN
					! We are accepting commands from 
					! DBG$INPUT, so just exit to CLI

						BEGIN
						dbg$gb_exit_dbg = TRUE;
						IF .dbg$gb_def_out [out_log]
						THEN
							$CLOSE (FAB = dbg$gl_logfab);
						dbg$gb_debug = FALSE;
						$exit (code = ss$_normal);
						END ;

				END
			ELSE

			! If we are accepting commands from an action buffer
			! we go up a level by removing that buffer

				IF .dbg$gl_cishead[dsc$b_dtype] EQL cis_acbuf
				THEN
					BEGIN
					dbg$cis_remove() ;	! remove buffer
					RETURN FALSE;
					END;
			END;


		[go_token]:
			BEGIN
			LOCAL
				old_pc : REF VECTOR [, WORD],	! Used to access instruction.
				new_pc;
			BUILTIN
				PROBER;
			!+
			! If there is an associated arg, it is the new starting
			! address.  We make sure this address is readable before
			! depositing it into the runframe.
			!-
			IF .dbg$gl_head_lst NEQ 0
			THEN
				BEGIN

				! Pick up the new PC and check for read access.

				new_pc = .list_elem_exp1 (.dbg$gl_head_lst);
				IF dbg$is_it_entry(.new_pc)	! Skip over entry mask if Entry Point
				THEN
					new_pc = .new_pc + 2;

				IF NOT PROBER( %REF(0), %REF(1), .new_pc )
				THEN
				    SIGNAL (DBG$_BADSTARTPC, 1, .new_pc);	! No return
				!+
				! For "GO <expr>", we load the new PC into the
				! runframe and clear the FPD bit in the PSL.
				!-
				old_pc = .dbg$gl_runframe[dbg$l_user_pc];

				IF .dbg$gl_context[dbg$k_thread] ! This is a thread
				THEN
				    BEGIN
				    IF .old_pc[0] EQL %X'9B17'	 ! Instruction is "JMP @(R11)+"
				    OR .old_pc EQL DBG$THREAD_RET ! Address threaded BPTs return to.
				    THEN
					dbg$gl_runframe[dbg$l_user_r11] = .new_pc
				    ELSE
					SIGNAL (DBG$_NOTLINBND);
				    END
				ELSE
				    dbg$gl_runframe[dbg$l_user_pc] = .new_pc;

				dbg$gl_runframe[dbg$l_user_psl] = %X'F7FFFFFF' AND
						.dbg$gl_runframe[dbg$l_user_psl];
				END;

			new_pc =  .dbg$gl_runframe [dbg$l_user_pc];	! Check PC for read access
			IF NOT PROBER( %REF(0), %REF(1), .new_pc )
			THEN
			    SIGNAL (DBG$_BADSTARTPC, 1, .new_pc);	! no return

			! OK. The next time around, USER_PROC will
			! not ask for new commands but will instead
			! return SS$_CONTINUE to EXC_HANDLER.

    			! See if there is an argument GO <addr> and set the
    			! global flag accordingly.
    			!
			IF .dbg$gl_head_lst NEQ 0
    			THEN
    			    dbg$gb_go_arg_flag = TRUE
    			ELSE
    			    dbg$gb_go_arg_flag = FALSE;

			dbg$gb_take_cmd = FALSE;
			IF .dbg$gl_stk[.semsp+1, stk$v_val1] EQL eol_token
			THEN
				dbg$end_of_line()
			ELSE
				dbg$end_of_cmd();
    
			RETURN FALSE;
			END;


		[help_token]:
			BEGIN
			dbg$emit_help (.dbg$gl_help_input);
			END;

    		[search_token]:
    			BEGIN
    			LOCAL 
    			    dummy_mess_vect: REF VECTOR[,BYTE];
    			IF NOT dbg$nexecute_search 
    				(.dbg$gl_search_verb,
    				dummy_mess_vect)
    			THEN
    			    BEGIN
    			    ! If the above routine does not return success,
    			    ! then we signal an error using the message
    			    ! argument vector that we got back.
    			    !
    			    EXTERNAL ROUTINE
    				LIB$SIGNAL : ADDRESSING_MODE(GENERAL);
    			    BUILTIN
    				CALLG;
    			    CALLG (.dummy_mess_vect, lib$signal);
    			    END;
    			END;

		[set_token]:
			BEGIN

			SELECTONE TRUE OF
			SET

			[.dbg$gl_context [dbg$k_set_break]]:
				BEGIN
				IF .dbg$gl_context [dbg$k_resignal]
				THEN dbg$gb_resignal = FALSE
				ELSE dbg$save_bpt (.dbg$gl_list[0],
						.dbg$gl_list[2],
						.dbg$gl_list[1],
						0);
				END;
			[.dbg$gl_context [dbg$k_trce_call]]:
				BEGIN
				dbg$gl_runframe [dbg$v_trace_all] = TRUE;
				dbg$set_optrace(CALLS_TOKEN);
				END;
			[.dbg$gl_context [dbg$k_trce_brch]]:
				BEGIN
				dbg$gl_runframe [dbg$v_trace_all] = TRUE;
				dbg$set_optrace(branch_TOKEN);
				END;
			[.dbg$gl_context [dbg$k_scope]]:
				BEGIN
				dbg$save_scope (TRUE)
				END;
    			[.dbg$gl_context [dbg$k_search]]:
    				BEGIN
    				dbg$set_search_lst(user_def_search);
    				END;
			[.dbg$gl_context [dbg$k_source]]:
				BEGIN
				dbg$src_set_source(
				    .dbg$gl_module,
				    .dbg$gl_dirlist);
				END;
    			[.dbg$gl_context [dbg$k_margins]]:
    				BEGIN
    				LOCAL
    				    left,
    				    right;
    				left = .dbg$gl_stk[.semsp+2,stk$v_val1];
    			  	IF .left EQL -1
    				THEN
    				    left = .dbg$src_left_margin
    				ELSE
    				    left = dbg$hex_dec_cvrt(.left);
    				right = .dbg$gl_stk[.semsp+2,stk$v_val2];
    				IF .right EQL -1
    				THEN
    				    right = .dbg$src_right_margin
    				ELSE
    				    right = dbg$hex_dec_cvrt(.right);
    				IF .left GEQ .right
    				THEN
    				    BEGIN
    				    dbg$nshow_margins();
    			 	    SIGNAL(dbg$_invmar);
    				    END;
    				dbg$src_left_margin = .left;
    				dbg$src_right_margin = .right;
    				END;
			[.dbg$gl_context [dbg$k_maxfiles]]:
				BEGIN
				! If mode was hex, the number was read
				! in hex. Convert to decimal here.
				LOCAL n;
				n = dbg$hex_dec_cvrt(
				    .dbg$gl_stk[.semsp+2,stk$v_val1]);
				dbg$src_set_max_files(.n);
				END;
			[.dbg$gl_context [dbg$k_mode]]:
				BEGIN
				dbg$set_mod_lst (user_def_mode)
				END;
			[.dbg$gl_context [dbg$k_module]]:
				BEGIN
				dbg$set_module (0)
				END;
			[.dbg$gl_context [dbg$k_language]]:
				BEGIN
				LOCAL
					pointer : REF VECTOR;
				pointer = .dbg$gl_stk[.semsp+2, stk$v_val1];
				dbg$set_lang (.pointer);
				dbg$freerelease(.pointer,
					( (.pointer[0] + 3) / %UPVAL) + 2);
				IF .dbg$gl_stk [.semsp + 1, stk$v_val1] EQL eol_token
				THEN
				    dbg$end_of_line ()
				ELSE
				    dbg$end_of_cmd ();
				RETURN false;
				END;
			[.dbg$gl_context [dbg$k_step]]:
				BEGIN
				dbg$set_stp_lst (user_def_step)
				END;

			[.dbg$gl_context [dbg$k_output]]:
				BEGIN
				dbg$set_out_lst();
				END;
			[.dbg$gl_context [dbg$k_log]]:
				BEGIN
				dbg$set_log();
				END;

			TES;
			END;

		[show_token]:
			BEGIN


			SELECTONE TRUE OF
			SET

			[.dbg$gl_context [dbg$k_break]]:
				BEGIN
				dbg$show_bpts ();
				END;
			[.dbg$gl_context [dbg$k_trace]]:
				BEGIN
				dbg$show_bpts ();
				END;
			[.dbg$gl_context [dbg$k_watch]]:
				BEGIN
				dbg$show_bpts ();
				END;
    			[.dbg$gl_context [dbg$k_margins]]:
    				BEGIN
    				dbg$nshow_margins();
    				END;
    			[.dbg$gl_context [dbg$k_maxfiles]]:
    				BEGIN
    				dbg$nshow_max_source_files();
    				END;
			[.dbg$gl_context [dbg$k_mode]]:
				BEGIN
				dbg$show_mode ();
				dbg$show_type(default);
				dbg$show_type(override);
				END;

			[.dbg$gl_context [dbg$k_module]]:
				BEGIN
				dbg$show_module ();
				END;
    			[.dbg$gl_context [dbg$k_search]]:
    				BEGIN
    				dbg$show_search();
    				END;
			[.dbg$gl_context [dbg$k_scope]]:
				BEGIN
				dbg$rst_showscope ();
				END;
			[.dbg$gl_context[dbg$k_source]]:
				dbg$src_show_source();
			[.dbg$gl_context [dbg$k_traceback]]:
				BEGIN
				LOCAL
					temp;

				IF (.dbg$gl_head_lst EQL 0)
				THEN temp = -1
				ELSE temp = .list_elem_exp1 (.dbg$gl_head_lst);
				dbg$traceback (.dbg$gl_runframe [dbg$l_user_pc],
						.dbg$gl_runframe [dbg$l_user_fp],
						(IF	.dbg$gl_runframe [dbg$v_at_fault] OR
							.dbg$gl_runframe [dbg$v_at_break]
						 THEN	fault_exc
						 ELSE	trap_exc),
						.temp);
				END;
			[.dbg$gl_context [dbg$k_language]]:
				BEGIN
				$fao_tt_out ('language: !AC',dbg$language(.dbg$gb_language));
				END;
			[.dbg$gl_context [dbg$k_step]]:
				BEGIN
				dbg$show_step();
				END;
			
			[.dbg$gl_context [dbg$k_output]]:
				BEGIN
				dbg$show_output(1);
				END;

			[.dbg$gl_context [dbg$k_log]]:
				BEGIN
				dbg$show_output(0);
				END;

			TES;
			END;


		[step_token]:
			BEGIN
			LOCAL
				new_pc;
			BUILTIN
				PROBER;

    			! If we are at an exception break, then it is
    			! illegal to STEP.
    			!
    			IF .dbg$gb_exc_bre_flag
    			THEN
    			    BEGIN
    			    SIGNAL (dbg$_stefroexc);
    			    END;
    		
			! Make sure that we can start execution
			! at the currently-set start address.
    			!
			new_pc = .dbg$gl_runframe [ DBG$L_USER_PC ];
			IF( NOT PROBER( %REF(0), %REF(1), .new_pc ) )
			THEN
				! You can't STEP if you can't start.
				SIGNAL(DBG$_BADSTARTPC, 1, .new_pc);
				! no return

			! Pick up new count or take default.

			IF .dbg$gl_head_lst NEQ 0
			THEN dbg$gl_step_num = .list_elem_exp1 (.dbg$gl_head_lst)
			ELSE dbg$gl_step_num = 1;

			! Step_num is guaranteed NOT to be negative,
			! the action routine looks after this, but it
			! may be 0.  STEP 0 is a no-op command.

			IF( .DBG$GL_STEP_NUM GTR 0 )
			THEN
				BEGIN
				dbg$gl_runframe [dbg$v_stepping] = TRUE;
				dbg$gb_take_cmd = FALSE;
				IF .dbg$gl_stk[.semsp+1, stk$v_val1] EQL eol_token
				THEN
					dbg$end_of_line()
				ELSE
					dbg$end_of_cmd();
				RETURN FALSE
				END;
			END;
		
		[type_token] :
			dbg$type_cmd();

		TES;


	IF .dbg$gl_stk [.semsp + 1, stk$v_val1] EQL eol_token
	THEN
	    BEGIN
	    dbg$end_of_line ();
	    RETURN FALSE
	    END;

	dbg$end_of_cmd ();		! Command ended with ";"
	RETURN TRUE
	END;

GLOBAL ROUTINE dbg$set_overs (level, token) : NOVALUE =
!++
! FUNCTIONAL DESCRIPTION:
!	SETS OVERRIDE OR LOCAL MODES BY SETTING THE NEW
!	MODE level, AND THEN SETTING THE MODE ITSELF.
!
! FORMAL PARAMETERS:
!	level		- level OF MODES TO SET
!	token		- mode token to be set in the mode stack.
!
! IMPLICIT INPUTS:
!	none
!
! IMPLICIT OUTPUTS:
!	The desired mode and level are set.
!
! ROUTINE VALUE:
!	NOVALUE
!
! SIDE EFFECTS:
!	none
!--

    BEGIN
	dbg$set_mod_lvl (.level);
	dbg$set_new_mod (.token);
    END;

GLOBAL ROUTINE dbg$show_param (semsp) : NOVALUE =
!++
! FUNCTIONAL DESCRIPTION
!	Sets a context bit to say whether the show command is to be
!	applied to breakpoints, tracepoints, modes, modules, or scope.
!
! FORMAL PARAMETERS:
!	semsp	- offset to current top of the parse stack. Points
!		  to SHOW_TOKEN, which is followed at 4 (parse_stack)
!		  by the token indicating what is to be shown.
!
! IMPLICIT INPUTS:
!	The second token on the parse stack.
!
! IMPLICIT OUTPUTS:
!	A bit is set in the context word indicating what is to be shown.
!
! ROUTINE VALUE:
!	novalue
!
! SIDE EFFECTS:
!	none.
!--

    BEGIN

    SELECT .dbg$gl_stk [.semsp + 1, stk$v_val1] OF

	SET

	[break_token]:		dbg$gl_context[dbg$k_break] = TRUE;

    	[margins_token]:	dbg$gl_context[dbg$k_margins] = TRUE;

    	[maxfiles_token]:	dbg$gl_context[dbg$k_maxfiles] = TRUE;

	[mode_token]:		dbg$gl_context[dbg$k_mode] = TRUE;

	[module_token]:		dbg$gl_context[dbg$k_module] = TRUE;

	[scope_token]:		dbg$gl_context[dbg$k_scope] = TRUE;

	[source_token]:		dbg$gl_context[dbg$k_source] = TRUE;

	[trace_token]:		dbg$gl_context[dbg$k_trace] = TRUE;

	[watch_token]:		dbg$gl_context[dbg$k_watch] = TRUE;

    	[search_token]:		dbg$gl_context[dbg$k_search] = TRUE;

	[step_token]:		dbg$gl_context[dbg$k_step] = TRUE;

	[language_token]:	dbg$gl_context[dbg$k_language] = TRUE;

	[output_token]:		dbg$gl_context[dbg$k_output] = TRUE;

	[log_token]:		dbg$gl_context[dbg$k_log] = TRUE;

	TES;

    END;

ROUTINE switch_command : NOVALUE =
!++
! FUNCTIONAL DESCRIPTION:
!	Cancels breakpoints, tracepoints, resignaling, modes, or
!	current scope settings.
!
! FORMAL PARAMETERS:
!	none
!
! IMPLICIT INPUTS:
!	THE CONTEXT WORD CAN HAVE THE FOLLOWING BITS SET:
!		dbg$k_resignal	- SWITCH BREAKPOINTING ON ALL EXCEPTIONS.
!		dbg$k_all	- SWITCH ALL USER-SET DEFAULT MODES, AND
!				  ALL BREAKPOINTS, TRACEPOINTS, opcode tracing,
!				  and WATCHPOINTS.
!		dbg$k_break	- SWITCH ALL OR ONE USER-SET BREAKPOINT.
!		dbg$k_mode	- SWITCH USER SET DEFAULTS.
!		dbg$k_module	- cancel symbols for modules
!		dbg$k_scope	- cancel current scope path
!		dbg$k_all_break	- cancel all breakpoints
!		dbg$k_all_trace	- cancel all tracepoints and opcode tracing
!		dbg$k_trce_call	- cancel /CALL opcode tracing
!		dbg$k_trce_brch	- cancel /BRANCH opcode tracing
!		dbg$k_all_watch	- cancel all watchpoints
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	novalue
!
! SIDE EFFECTS:
!	THE CONTEXT OF DEBUG IS ALTERED ACCORDING TO THE SETTING OF THE
!	CONTEXT BITS.
!--

	!--
	! When cancelling xpoints, the language specific routines require
	! initialization. The call to the routine dbg$ninitialize does this.
	!++

	BEGIN

	SELECTONE TRUE OF
	SET

	[.dbg$gl_context [dbg$k_all]]:
		BEGIN

		!++
		! IF ALL WAS SPECIFIED WITHOUT QUALIFICATION, BREAKPOINTS,
		! RESIGNALING OF EXCEPTIONS, AND DEFAULTS ARE ALL RESET TO
		! THEIR STATE AT INITIALIZATION.  Tracepoint, watchpoints,
		! and opcode tracing also get cancelled.
		!--

		dbg$ninitialize ();		! Set language specific context
		dbg$cancel_bpt (-1);
		dbg$gl_runframe[dbg$v_trace_all] = FALSE;
		dbg$set_optrace(CALLS_TOKEN);
		dbg$set_optrace(BRANCH_TOKEN);
		dbg$gb_resignal = TRUE;
		dbg$set_mod_def ();
		dbg$set_stp_def ();
		dbg$save_scope (FALSE);
		dbg$gl_gbltyp = -1;
		dbg$gw_gbllngth = 0;
		dbg$gl_dflttyp = dsc$k_dtype_l;
		dbg$gw_dfltleng = 0;
		END;

	[.dbg$gl_context[dbg$k_break]]:
		BEGIN
		dbg$ninitialize ();
		dbg$cancel_bpt (.dbg$gl_list [1]);
		END;

	[.dbg$gl_context[dbg$k_source]]:
		dbg$src_cancel_source(.dbg$gl_module);

	[.dbg$gl_context[dbg$k_trace]]:
		BEGIN
		dbg$ninitialize ();
		dbg$cancel_bpt (.dbg$gl_list [1]);
		END;

	[.dbg$gl_context[dbg$k_watch]]:
		BEGIN
		dbg$ninitialize ();
		dbg$cancel_bpt (.dbg$gl_list [1]);
		END;

	[.dbg$gl_context[dbg$k_mode]]:
		BEGIN
		dbg$set_mod_def ();
		dbg$gl_gbltyp = -1;
		dbg$gw_gbllngth = 0;
		dbg$gl_dflttyp = dsc$k_dtype_l;
		dbg$gw_dfltleng = 0;
		END;


	[.dbg$gl_context[dbg$k_module]]:
		BEGIN
		dbg$canc_module ();
		END;

	[.dbg$gl_context[dbg$k_resignal]]:
		BEGIN
		dbg$gb_resignal = TRUE;
		END;

	[.dbg$gl_context[dbg$k_scope]]:
		BEGIN
		dbg$save_scope (FALSE);
		END;

	[.dbg$gl_context[dbg$k_all_break]]:
		BEGIN
		dbg$ninitialize ();
		dbg$cancel_bpt (-2);
		END;

	[.dbg$gl_context[dbg$k_all_trace]]:
		BEGIN
		dbg$ninitialize ();
		dbg$cancel_bpt (-3);
		dbg$set_optrace(CALLS_TOKEN);
		dbg$set_optrace(BRANCH_TOKEN);
		dbg$gl_runframe[dbg$v_trace_all] = FALSE;
		END;

	[.dbg$gl_context[dbg$k_all_watch]]:
		BEGIN
		dbg$ninitialize ();
		dbg$cancel_bpt (-4);
		END;

	[.dbg$gl_context[dbg$k_trce_call]]:
		BEGIN
		dbg$gl_runframe[dbg$v_trace_all] = dbg$set_optrace(CALLS_TOKEN);
		END;

	[.dbg$gl_context[dbg$k_trce_brch]]:
		BEGIN
		dbg$gl_runframe[dbg$v_trace_all] = dbg$set_optrace(BRANCH_TOKEN);
		END;

	[ otherwise ]:

	TES;
	END;

ROUTINE delete_desclist: NOVALUE =
!++
! FUNCTIONAL DESCRIPTION:
!	Free us the space that was used for dummy descriptors during this
!	command
!
! FORMAL PARAMETERS:
!	none
!
! IMPLICIT INPUTS:
!
!	dbg$gl_dlishead - pointer to list of entries describing the dummy
!		descriptors
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	novalue
!
! SIDE EFFECTS:
!	dbg$gl_dlishead set to 0 and space freed up
!--
BEGIN
    LOCAL
	ll : REF VECTOR ,
	a;

    IF (ll=.dbg$gl_dlishead) EQL 0
    THEN					! None to free up
	RETURN ;

    DO
	BEGIN
!
!  Free up the space for the descriptor and then the list entry

	dbg$freerelease(.ll[dlis_pointer],rst_units(.ll[dlis_descsize])) ;
	a = .ll[dlis_link] ;		! address of next entry on list
	dbg$freerelease(.ll,rst_units(dlis_entry*%UPVAL)); ! Free the list entry
	END
    UNTIL  (ll=.a) EQL 0 ;

    dbg$gl_dlishead = 0 ;
 
    RETURN ;
END;


END
ELUDOM
