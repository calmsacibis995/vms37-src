	.TITLE	OTS$POWLULU - LU ** LU Exponentiation Routine
	.IDENT	'V03-000'			; File: OTSPOWLUL.MAR, Edit: SBL1001

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY: Mathematics Library
;
; ABSTRACT:
;
;	This module contains OTS$POWLULU which takes an unsigned longword base
;	to an unsigned longword power resulting in an unsigned longword.
;
; ENVIRONMENT: Runs at any access mode, AST Reentrant
;
;
; AUTHOR: Steven B. Lionel, CREATION DATE: 2-September-1980
;
; MODIFIED BY:
;
; 1-001	- Original. SBL 2-September-1980
;--

	.SBTTL	DECLARATIONS
;
; LIBRARY MACRO CALLS:
;
;	NONE
;
; EXTERNAL DECLARATIONS:
;
	.DSABL	GBL		; Force all external symbols to be declared
	.EXTRN	MTH$$SIGNAL	; Signal a math error
	.EXTRN	MTH$K_UNDEXP	; Undefined exponentiation error code
;
; MACROS:
;
;	NONE
;
; EQUATED SYMBOLS:
;
;	NONE
;
; OWN STORAGE:
;
;	NONE
;
; PSECT DECLARATIONS:
;
	.PSECT _MTH$CODE PIC, USR, CON, REL, LCL, SHR, -
			EXE, RD, NOWRT, LONG


	.SBTTL	OTS$POWLULU - LU ** LU Exponentiation Routine
;++
; FUNCTIONAL DESCRIPTION:
;
;	This routine takes an unsigned longword integer base to an unsigned
;	longword integer power yielding an unsigned longword integer result.
;
;	Overflow can not happen in this routine.  If the result or intermediate
;	result is greater than 32 bits, the low 32 bits are used.

; CALLING SEQUENCE:
;
;	result.wlu.v = OTS$POWLULU (base.rlu.v, exponent.rlu.v)
;
; FORMAL PARAMETERS:
;
	base = 4		; Unsigned longword integer base by value
	exponent = 8		; Unsigned longword integer exponent by value
;
; IMPLICIT INPUTS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; FUNCTION VALUE:
;
;	The unsigned longword integer result is returned in R0.
;
; SIDE EFFECTS:
;
;	MTH$_UNDEXP if both the base and exponent are zero
;
;--

	.ENTRY	OTS$POWLULU, ^M<R2>

	MOVL	#1, R0			; Intialize result
	MOVL	base(AP), R2		; Get base
	MOVL	exponent(AP), R1	; Get exponent
	BEQL	ZERO_EXP		; If exponent is zero, result is 1
					; unless base is zero.

;+
; Scan exponent bits from right to left, squaring base each time through loop.
; If an exponent bit is set, multiply the current result by the current base.
;-

LOOP:
	BLBS	R1, PARTIAL		; If exponent bit set, get partial result
LOOP1:
	ASHL	#-1, R1, R1		; Drop rightmost exponent bit
	BICL2	#^X80000000, R1		; Clear leftmost bit
	BEQL	EXIT			; If zero, we're done
	MULL2	R2, R2			; Square current base
					; If overflow, use low 32 bits
	BRB	LOOP			; Continue searching

PARTIAL:
	MULL2	R2, R0			; Get new partial result
					; If we overflow, use low 32 bits
	BRB	LOOP1			; Continue searching

ZERO_EXP:
	TSTL	R2			; Exponent is zero, is base?
	BNEQ	EXIT			; If not, result is 1
	MOVZBL	#MTH$K_UNDEXP, -(SP)	; If so, it's an error
	CALLS	#1, G^MTH$$SIGNAL	; Signal the error

EXIT:	RET				; Return with result in R0

	.END				; End of module OTS$POWLULU
