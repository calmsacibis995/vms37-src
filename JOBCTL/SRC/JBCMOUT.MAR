	.TITLE	JBCMOUT - JOB CONTROLLER MESSAGE OUTPUT ROUTINE
	.IDENT	'V03-001'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************

;++
; FACILITY:	JOB CONTROLLER
;
; ABSTRACT:	THIS ROUTINE FORMATS AND OUTPUTS MESSAGES
;
; ENVIRONMENT:	USER MODE NATIVE CODE
;
; AUTHOR:	W.H.BROWN, CREATION DATE: 
;
; MODIFIED BY:
;
;	V03-001	MLJ0086		Martin L. Jack,	2-Apr-1982  0:26
;		Delete unused messages from table.
;
;	V02-007	MLJ44176	Martin L. Jack,	24-Feb-1982  15:16
;		Make "fatal exception" message look standard so it can be
;		documented.
;
;	V02-006	MLJ43450	Martin L. Jack,	6-Feb-1982  11:02
;		Clarify "fatal exception" message.
;
;	V02-005	SPF0058		Steve Forgey		04-Jan-1981
;		Use new accounting file fabs and rabs.
;
;	V02-004	GWF0103		Gary Fowler		19-Aug-1981
;		Add new messages for failure to create or init queue file
;		Add call to SYS$BRDCST to display error messages if OPCOM fails
;
;	V02-003	GWF0093		Gary Fowler		29-Jul-1981
;		Fix call to SYS$BRDCST to correctly clean stack after call.
;
;	V02-002	GWF0001		Gary Fowler		6-Aug-1979
;		Corrected UIC on $CREPRC so JOB CONTROLLER will restart after
;		exception.
;--

	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;
;	[235,10]JOBCTL/ML
;
; EQUATED SYMBOLS:
;
	JBCPARDEF			; DEFINE JOB CONTROLLER PARAMETERS
	JBCQUEDEF			; DEFINE QUEUE OFFSETS
	$CHFDEF				; DEFINE CONDITION HANDLING FRAME VALUES
	$STSDEF				; DEFINE STATUS LONG WORD VALUES
	$OPCDEF				; OPERATOR CODE DEFINITIONS
	$OPCMSG				; OPERATOR MESSAGES
	OPRDSIZ = 80			; LENGTH OF BUFFER FOR MESSAGE TO OPER
 
;
; MACROS:
;
; MACRO TO GENERATE AN ENTRY IN THE ERROR MESSAGE TABLE
;
;	JBC_ERR	ERR,MESG,GETERR=NO,SEVERITY=WARN
;
; WHERE:
;
;	ERR = THE NAME OF THE ERROR
;	MESG =	THE SYSTEM ERROR CODE ID FIELD
;	GETERR = A FLAG TO INDICATE IF THIS HAS AN ERROR CAUSE CODE IN R0
;	SEVERITY = SEVERITY
;
 
	.MACRO	JBC_ERR	ERR,MESG,GETERR=NO,SEVERITY=WARN
ERR==JBC_ERR_NUM
	.$$. = 0			; DEFAULT SEVERITY IS WARNING
.IIF IDN <SEVERITY><ERROR>, .$$. = 2	; SET "ERROR" SEVERITY
.IIF IDN <SEVERITY><FATAL>, .$$. = 4	; SET "SEVER" SEVERITY
 
	.WORD	<<JBC$_'MESG ! .$$.> & ^XFFFF>
 
.IIF IDN <GETERR><YES>,	JBC_GETERR = JBC_GETERR!<1 @ JBC_ERR_NUM>
 
JBC_ERR_NUM = JBC_ERR_NUM + 1
 
	.ENDM
 
;
; MACRO TO FORMAT AND OUTPUT A MESSAGE
;
 
	.MACRO	FAOUT	MSG,CNT
	BSBW	FAOUT1
	.BYTE	<CNT+3>
	.WORD	<MSG-.-2>
	.ENDM
;
; OWN STORAGE:
;
; IMPURE DATA AREA FOR OPERATOR MESSAGES
;
	IMPURE_DATA
 
SNDOPR:	.BYTE	OPC$_RQ_RQST		; REQUEST CODE
	.WORD	OPC$M_NM_CENTRL		; REPORT TO CENTRAL OPERATOR ONLY
	.BYTE	0
	.LONG	0			; NO REQUEST ID
OPRHDR = . - SNDOPR
OPRDATA:.BLKB	OPRDSIZ			; LENGTH OF BUFFER FOR MESSAGE
;
	PURE_SECTION	JBC$MSGOUT,ALIGN=LONG
 
;
; SET UP INTERNAL ERROR DATA BASE
;
 
	JBC_ERR_NUM = 0			; INITIAL ERROR NUMBER
	JBC_GETERR = 0			; INITIALIZE GETERR FLAG
 
JBC$AW_ERR_CODE:			; START OF ERROR CODE ARRAY
 
	JBC_ERR	MAILBOX_ASSIGN,MBASGN,YES,FATAL ; ERROR ASSIGNING INTERNAL MAILBOX
	JBC_ERR	MAILBOX_READ,MBREAD,YES,FATAL ; ERROR READING INTERNAL MAILBOX
	JBC_ERR	CREATE_PROC,PRCREAT,YES	; ERROR CREATING PROCESS
	JBC_ERR	INVALID_MESG,INVMSG	; INVALID MESSAGE RECEIVED
	JBC_ERR	RESPONCE_ERR,SNDRESP,YES ; ERROR SENDING RESPONCE TO PROCESS
	JBC_ERR	QUEUE_COUNT,QUECNT	; PRINT QUEUE COUNT IS INCORRECT
	JBC_ERR	MULT_ALLOCATE,MULTREC	; QUEUE RECORD IN MULTIPLE LISTS
	JBC_ERR	LOST_RECORDS,LOSTREC	; THE QUEUE HAS MISSING RECORDS
	JBC_ERR	ASSIGN_SYMB_MB,SYMBASN,YES ; ASSIGN ERROR ON SYMBIONT MAILBOX
	JBC_ERR	WRITE_SYMB_MB,SYMBWRT,YES ; ERROR WRITING TO SYMBIONT MAILBOX
	JBC_ERR	SCT_SEARCH_FAIL,SCTERR	; SYMBIONT CONTROL TABLE SEARCH FAILED
	JBC_ERR	DASSGN_MB,MBDEAS,YES	; DEASSIGN OF MAILBOX
	JBC_ERR	ILL_SYM_STATE,INVSCT	; ILLEGAL SYMBIONT STATE
	JBC_ERR	UNX_SYM_DEL,SYMDEL	; UNEXPECTED SYMBIONT DELETE
	JBC_ERR	ACNT_FIL_OPN,ACNTOPN,YES ; ERROR OPENNING ACCOUNTING FILE
	JBC_ERR	ACNT_FIL_RIT,ACNTWRT,YES ; ERROR WRITING ACCOUNT FILE
	JBC_ERR	QUE_UPD,QUEUPD,YES	; ERROR UPDATING THE SYSTEM QUEUE

JBC$L_GETERR:				; SET GET ERROR FLAG BIT ARRAY
	.LONG	JBC_GETERR		;
 
ERRMSGDEV:				; NAME OF DEVICE FOR ERROR OUTPUT
	STRING_DESC	<OPA0>		; LOGICAL DEVICE NAME
 
;
; DATA FOR FATAL EXCEPTION ROUTINE
;
 
HDRMSG:	.ASCIC	\%JBC-F-EXCEPTION, fatal exception in JOB_CONTROL process !#(10XL), PC=!XL, PSL=!XL\
REGMSG:	.ASCIC	\Registers !UB-!UB	  !6(10XL)\
STKMSG:	.ASCIC	\    !#(10XL)\
OLDNAM:	STRING_DESC <JBC_OLD>
JBCIMG:	STRING_DESC <SYS$SYSTEM:JOBCTL.EXE>
STKHDR:	.ASCIC	\Stack dump:\

	.SBTTL	ERROR MESSAGE HANDLER
;++
; FUNCTIONAL DESCRIPTION:
;
;	THIS ROUTINE IS ENTERED BY THE CHANGE MODE DISPATCHER
;	WHEN A CHANGE MODE TO USER INSTRUCTION HAS BEEN EXECUTED.
;	THIS IS THE MEANS FOR THE JOB CONTROLLER TO REPORT ALL
;	ERRORS.
;
; CALLING SEQUENCE:
;
;	CALLED SUCH THAT AN REI WILL RETURN CONTROL TO
;	POINT OF THE CHANGE MODE INSTRUCTION AFTER CLEARING
;	THE ARGUMENT LONG WORD FROM THE STACK.
;
; INPUT PARAMETERS:
;
;	(SP) IS CHANGE MODE ARGUEMENT
;	4(SP) IS PC OF CHANGE MODE INSTRUCTION
;	8(SP) IS PSL OF CHANGE MODE INSTRUCTION
;	R11 HAS ADDRESS JOB CONTROLLER DATA BLOCK
;
; OUTPUT PARAMETERS:
;
;	ERROR MESSAGE IS DISPLAYED
;
; COMPLETION CODES:	NONE
;
; SIDE EFFECTS:
;
;	AN IMAGE EXIT IS EFFECTED IF THE ERROR WAS FATAL
;
;--
 
JBC$ERRORMSG::				; ENTER HERE AS VIA TRAP
	POPR	#^M<R1>			; GET INTERNAL ERROR NUMBER
	PUSHR	#^M<R0,R1>		; SAVE R0 AND INTERNAL ERROR NUMBER
	MOVZWL	JBC$AW_ERR_CODE[R1],R0	; GET INTERNAL ERROR CODE
	INSV	#<JBC$_NORMAL@-STS$V_FAC_NO>,-; INSERT JBC FACILITY NUMBER
		#STS$V_FAC_NO,#STS$S_FAC_NO,R0 ; INTO ERROR MESSAGE NUMBER
	BSBW	JBC$SYSMSG		; PRINT MESSAGE FOR SYSTEM MESSAGE FILE
	MOVQ	(SP),R0			; RESTORE ERROR CODE AND SAVED R0
	BBC	R1,JBC$L_GETERR,10$	; BR IF R0 IS NOT A SYSTEM ERROR CODE
	BSBW	JBC$SYSMSG		; PRINT THE SYSTEM MESSAGE
10$:	POPR	#^M<R0,R1>		; GET INTERNAL ERROR NUMBER AND R0
	MOVZWL	JBC$AW_ERR_CODE[R1],R1	; GET INTERNAL ERROR CODE BACK
	BBS	#2,R1,20$		; BR IF FATAL BIT IS SET
	REI				;
20$:	$EXIT_S	R0			; EXIT WITH ERROR
	.PAGE
	.SBTTL	FATAT EXCEPTION HANDLER
;++
; FUNCTIONAL DESCRIPTION:
;
;	THIS ROUTINE IS ENTERED WHEN THE JOB CONTROLLER GETS AN EXCEPTION.
;	IT PRINTS THE CONTEXT OF THE ERROR, STARTS A NEW INCARNATION
;	OF THE JOB CONTROLLER, THEN DELETES ITSELF.
;
; CALLING SEQUENCE:
;
;	ENTER VIA A CALL INSTRUCTION FROM THE EXCEPTION DISPATCHER
;
; INPUT PARAMETERS:
;
;	THE EXCEPTION ARGUMENT LIST
;
; OUTPUT PARAMETERS:	NONE
;
; COMPLETION CODES:	NONE
;
; SIDE EFFECTS:
;
;	AN IMAGE EXIT IS EFFECTED.
;
;--
	.ENABL	LSB
 
	.ENTRY	JBC$EXCEPTION,^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>
 
	$SETAST_S  #0			; DISABLE AST'S
	MOVAB	W^JBC$T_DATABLK,R11	; SET JOB_CONTROLLER DATA BLOCK
	MOVL	CHF$L_SIGARGLST(AP),R9	; ADDRESS OF SIGNAL ARRAY
	MOVL	CHF$L_MCHARGLST(AP),R8	; AND THE MECHANISM ARRAY
	MOVL	(R9),R0			; GET SIGNAL ARRAY COUNT
	MOVAL	4(R9)[R0],R7		; GET TOP OF EXCEPTION STACK
10$:	PUSHL	(R9)[R0]		; PUSH SIGNAL ARGUMENTS
	SOBGTR	R0,10$			; LOOP IF MORE
	SUBL3	#2,(R9),-(SP)		; SET ERROR ARGUMENT COUNT
	ADDL3	#<1+3>,(R9),R1		; SET TOTAL FAO ARGUMENT COUNT
	BSBW	FAOUT0			; FORMAT AND OUTPUT MESSAGE
	.WORD	<HDRMSG-.-2>		; OFFSET TO MESSAGE FORMAT STRING
	MOVAL	20+<10*4>(FP),R1	; POINT AT REGISTERS SAVED BY CALL
	MOVL	#10,R0			; SET NUMBER OF REGISTERS SAVED
20$:	PUSHL	-(R1)			; PUT REGISTERS IN STACK IN PROPER ORDER
	SOBGTR	R0,20$			; LOOP
	MOVQ	CHF$L_MCH_SAVR0(R8),-(SP) ; NOW PUSH R0 AND R1
	PUSHL	#5			; HI REQISTER
	PUSHL	#0			; LO REGISTER
	FAOUT	REGMSG,8		; PRINT RGISTER 0-5
	PUSHL	#11			; HI REGISTER
	PUSHL	#6			; LO REGISTER
	FAOUT	REGMSG,8		; NOW REGISTERS 6-11
	MOVAB	STKHDR,R1		; SET STACK DUMP PREFIX
	BSBW	TYPE			; PRINT THAT
30$:	MOVL	#4,R1			; SET STACK FRAME DUMP LOOP COUNT
40$:	CMPL	R7,CHF$L_MCH_FRAME(R8)	; DUMP UP TO THE HANDLER FRAME?
	BGEQU	50$			; IF YES - STOP PRINTING
	PUSHL	(R7)+			; PUSH A STACK FRAME VALUE
	SOBGTR	R1,40$			; DUMP 4 LOCATIONS
50$:	SUBL3	R1,#4,-(SP)		; SET NUMBER OF LOCATIONS TO PRINT
	BEQL	60$			; BR IF NOTHING TO PRINT
	ADDL3	#<3+1>,(SP),R1		; SET TOTAL FAO COUNT
	BSBW	FAOUT0			; PRINT THE STACK
	.WORD	<STKMSG-.-2>		; FORMAT STRING
	CMPL	R7,CHF$L_MCH_FRAME(R8)	; ALL DONE?
	BLSSU	30$			; BR IF NO - PRINT SOME MORE
60$:					; REF
;
; NOW CLEAN UP PRIOR TO STARTING A NEW COPY OF JOBCTL
;
 
JBC$RESTART::				; START A NEW JOB CONTROLLER
	$SETAST_S  #0			; MAKE SURE AST'S ARE OFF
	MOVL	JCD_A_QUEBASE(R11),R10	; MAKE SURE BASE OF QUEUE IS HERE
	BEQL	65$			; BR IF THERE IS NO QUEUE
	ADDL3	SQH$L_NEXTREC(R10),R10,-(SP) ; FIND END OF USED QUEUE SPACE
	PUSHL	R10			; START OF QUEUE
	PUSHAB	W^JBC$RWDEND		; END OF WRITABLE DATA
	PUSHAB	W^JBC$RWDTOP		; START OF THAT AREA
	CALLS	#4,W^LIB$SNAPSHOT	; GET A LISTING OF ALL OF THAT
65$:	$CANCEL_S  JCD_W_MBCHAN(R11)	; KILL THE IO GOING ON MAILBOX
	$DASSGN_S  JCD_W_MBCHAN(R11)	; DISCONNECT FROM MAILBOX
	TSTW	JCD_W_TMPCHAN(R11)	; RESPONSE MAILBOX CHANNEL ASSIGNED?
	BEQL	70$			; BR IF NO
	$DASSGN_S  JCD_W_TMPCHAN(R11)	; AND RESPONCE MAILBOX IF THERE IS ONE
70$:	$CLOSE	FAB=@W^JBC$G_ACNTFAB	; CLOSE THE ACCOUNTING FILE
	$SETPRN_S  OLDNAM		; CHANGE NAME TO "OLD"
	MOVAB	ERRMSGDEV,R1		; COMMON PARAMETER
	$CREPRC_S	-		; CREATE A PROCESS
		PRCNAM=JBC$Q_JBCNAM,-	; NAME OF PROCESS
		INPUT =(R1),-		;
		OUTPUT=(R1),-
		ERROR =(R1),-		;
		IMAGE =JBCIMG,-		; NAME OF IMAGE TO RUN
		BASPRI=#8,-		; THE PRIORITY
		PRVADR=JBC$Q_PRIVMASK,-	; ALL POSSIBLE PRIVILEGES
		UIC   =#<<1@16>!4>	; UIC = 1,4
	$EXIT_S	R0			; EXIT WITH STATUS FROM CREATE PROCESS
 
	.ENABL	LSB

	.SBTTL	FORMAT AND OUTPUT A MESSAGE
;++
; FUNCTIONAL DESCRIPTION:
;
;	THIS ROUTINE IS CALLED TO FORMAT THEN PRINT A MESSAGE
;
; CALLING SEQUENCE:
;
;	BSB/JSB	FAOUT0			; CALL WITH ARG COUNT IN R1
;	BSB/JSB	FAOUT1			; CALL WIHT ARG COUNT IN LINE
;
; INPUT PARAMETERS:
;
; AT FAOUT0:	R1 IS TOTAL ARGUMENT COUNT FOR FAO
;
; AT FAOUT1:	(SP) IS TOTAL ARGUMENT COUNT FOR FAO
;
; EITHER:	NEXT SEQENTIAL LOCATION IS OFFSER TO MESSAGE FORMAT STRING
;		R11 HAS ADDRESS JOB CONTROLLER DATA BLOCK
;
; OUTPUT PARAMETERS:
;
;	MESSAGE IS FORMATTED AND DISPLAYED
;
; COMPLETION CODES:	NONE
;
; SIDE EFFECTS:		NONE
;--
	.ENABL	LSB
 
FAOUT0:	POPR	#^M<R3>			; GET PC OF SUBROUTINE CALL
	BRB	10$			;
FAOUT1:	POPR	#^M<R3>			; GET PC OF SUBROUTINE CALL
	MOVZBL	(R3)+,R1		; PICK UP FAO ARGUMENT COUNT
10$:	CVTWL	(R3)+,R0		; GET OFFSET TO MESSAGE
	ADDL	R3,R0			; FIND ADDRESS OF STRING
	MOVZBL	(R0)+,JCD_Q_TMPDESC(R11); SET SIZE OF STRING
	MOVL	R0,JCD_Q_TMPDESC+4(R11)	; SET ADDRESS OF STRING
	MOVAW	JCD_W_LBUFSIZ(R11),R2	; SET POINTER TO LINE BUFFER SIZE WORD
	MOVW	(R2),-(R2)		; SET LENGTH
	PUSHAQ	(R2)			; BUFFER DESCRIPTOR
	PUSHAW	(R2)			; PLACE TO RETURN RESULTANT LENGTH
	PUSHAQ	JCD_Q_TMPDESC(R11)	; FORMAT STRING DESCRIPTOR
	CALLS	R1,@#SYS$FAO		; FORMAT MESSAGE
	PUSHL	R3			; SET REAL RETURN ADDRESS
TYPR2:	MOVZBL	(R2),R0			; GET THE LENGTH
	MOVL	4(R2),R1		; STARTING ADDRESS OF MESSAGE
	BRB	TYP0			; TYPE THAT OUT
TYPE:	MOVZBL	(R1)+,R0		; COUNT TO R0, STRING ADDRESS TO R1
TYP0:	PUSHR	#^M<R0,R1>		; PUSH STRING DESCRIPTOR IN STACK
	PUSHAL	W^ERRMSGDEV		; ADDRESS OF DEVICE NAME
	PUSHAL	4(SP)			; ADDRESS OF STRING DESCIPTOR OF MESSAGE
	CALLS	#2,@#SYS$BRDCST		; PRINT MESSAGE ON 1 DEVICE
	ADDL	#8,SP			; REMOVE DESCRIPTOR FROM STACK
	RSB				; GET OUT

	.SBTTL	JBC ERROR/MESSAGE OUTPUT
;++
; FUNCTIONAL DESCRIPTION:
;
;	THIS MODULE IS CALL TO DISPLAY AN ERROR FOR THE
;	JOB CONTROLLER.
;
; CALLING SEQUENCE:
;
;	BSB	JBC$SYSMSG		; TO DISPLAY A SYSTEM ERROR AND RETURN
;
; INPUT PARAMETERS:
;
;	R0 IS ERROR CODE
;
; OUTPUT PARAMETERS:	NONE
;
; COMPLETION CODES:
;
;	R0,R1 RETURNED AS SET BY QIO SYSTEM SERVICE
;
; SIDE EFFECTS:		NONE
;--
JBC$SYSMSG::				; PRINT SYSTEM MESSAGE
	PUSHL	R0			; SAVE ERROR CODE
	PUSHAB	W^OPRDATA		; FORM QUAD WORD DESCRIPTOR
	MOVZBL	#OPRDSIZ,-(SP)		; FOR OPERATOR MESSAGE BUFFER
	MOVL	SP,R1			; ADDRESS OF DESCRIPTOR
	$GETMSG_S  R0,(R1),(R1),#15	; CONVERT ERROR CODE
	ADDL	#OPRHDR,(SP)		; ADD IN THE HEADER
	SUBL	#OPRHDR,4(SP)		; BACKUP ADDRESS FOR HEADER
	CLRL	-(SP)			; RESPONCE MAILBOX CHANNEL
	PUSHAQ	4(SP)			; ADDRESS OF MESSAGE DESCRIPTOR
	CALLS	#2,@#SYS$SNDOPR		; SENT TO OPER
	BLBC	R0,900$			; IF LBC - THEN SEND VIA BROADCAST
	CMPL	R0,#OPC$_NOPERATOR	; NO OPERATOR ENABLED?
	BNEQ	1000$			; IF NEQ - THEN OPERATOR ENABLED
900$:	MOVL	SP,R1			; GET STACK ADDRESS
	MOVZBL	#OPRDSIZ,(R1)		; SET SIZE OF BUFFER
	MOVAB	W^OPRDATA,4(R1)		; SET ADDRESS OF BUFFER
	MOVL	8(R1),R0		; GET ERROR CODE
	$GETMSG_S  R0,(R1),(R1),#15	; CONVERT ERROR CODE
	$BRDCST_S	-		; CALL BROADCAST
		MSGBUF=(R1),-		; ADDRESS OF TEXT
		DEVNAM=W^ERRMSGDEV	; DEVICE TO BROADCAST TO
1000$:	ADDL	#12,SP			; REMOVE STUFF FROM STACK
	RSB				; RETURN TO CALLER
 
	.END
