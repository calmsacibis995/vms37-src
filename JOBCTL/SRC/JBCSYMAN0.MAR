	.TITLE	JBCSYMAN0 - SYMBIONT MANAGER MAIN ROUTINE
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************

;++
; FACILITY:	STARTLET JOB CONTROLLER
;
; ABSTRACT:	SYMBIONT MANAGER MAIN ROUTINE
;
; ENVIRONMENT:	USER MODE, NON-PRIVLEDGED CODE
;
; AUTHOR:	W.H.BROWN, CREATION DATE:14-JAN-77
;
; MODIFIED BY:
;
;	, : VERSION
;
;	V02-005	GWF0069		Gary W. Fowler		29-Jun-1981
;		Add routine to check for ALTPRI privilege.  Set flag to cause
;		update of queue in command dispatcher.
;
;	V02-004	GWF0022		Gary W. Fowler		25-Feb-1981
;		Add new message type to send queue name to LOGINOUT
;
;	V02-003	GWF0002		Gary W. Fowler		19-Jun-1981
;		Fix problem of batch job submitted with /AFTER time from
;		starting at the wrong time
;
;	V02-002	GWF0001		Gary W. Fowler		29-Jun-1979
;		Added routines to check for WORLD and GROUP privileges.
;--

	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;
;	[235,10]JBCP.MAR

;
; MACROS:
;

;
; EQUATED SYMBOLS:
;
	$PRVDEF				; DEFINE PRIVILEGE BITS
	$IODEF				; IO DEFINITIONS
	$SMRDEF				; SYMBIONT MANAGER REQUEST CODES
	$MSGDEF				; MESSAGE DEFINITIONS
	JBCPARDEF			; DEFINE JOB CONTROLLER PARAMETERS
	JBCQUEDEF			; DEFINE QUEUE OFFSETS
	JBCSCTDEF			; SYMBIONT CONTROL TABLE DEFINITIONS

;
; OWN STORAGE:
;

	PURE_SECTION

;
; THE FOLLOWING BIT MASK IS USED TO DETERMIN WHICH REQUESTS
; REQUIRE A SEARCH OF THE SYMBIONT MANAGER QUEUE. A BIT SET
; INDICATES THAT A SEARCH IS REQUIRED
;
QUESRCFLG:				; QUEUE SEARCH FLAG, REQUIRED FOR:
	.LONG	<1@SMR$K_INITIAL>!-	; INITIAL
		<1@SMR$K_DELETE>!-	; DELETE
		<1@SMR$K_START>!-	; START
		<1@SMR$K_PAUSE>!-	; PAUSE
		<1@SMR$K_MERGE>!-	; MERGE
		<1@SMR$K_REDIRECT>!-	; REDIRECT
		<1@SMR$K_JUSTIFY>!-	; JUSTIFY
		<1@SMR$K_STOP>!-	; STOP
		<1@SMR$K_ENTER>!-	; ENTER
		<1@SMR$K_CREJOB>!-	; CREATE JOB
		<1@SMR$K_RMVJOB>!-	; REMOVE JOB
		<1@SMR$K_ALTER>!-	; ALTER JOB CHARACTERISTICS
		<1@SMR$K_ABORT>!-	; ABORT
		<1@SMR$K_RELEASE>!-	; RELEASE JOB
		<1@SMR$K_SYNCJOB>	; SYNCRONIZE WITH BATCH JOB

;
; OPERATOR REQUEST - THE FOLLOWING BIT MASK DEFINES THE REQUESTS THAT REQUIRE
;	OPERATOR PRIVILEGE.
;
OPRREQ:	.LONG	<1@SMR$K_INITIAL>!-	; INITIALIZE A QUEUE
		<1@SMR$K_DELETE>!-	; DELETE A QUEUE
		<1@SMR$K_START>!-	; START A QUEUE
		<1@SMR$K_PAUSE>!-	; PAUSE A QUEUE
		<1@SMR$K_MERGE>!-	; MERGE 2 QUEUES
		<1@SMR$K_REDIRECT>!-	; REDIRECT A QUEUE
		<1@SMR$K_JUSTIFY>!-	; JUSTIFY A QUEUE
		<1@SMR$K_STOP>		; STOP A QUEUE

	.SBTTL	SYMBIONT MANAGER MAIN DISPATCHER
;++
; FUNCTIONAL DESCRIPTION:
;
;	THIS ROUTINE IS ENTERED BY THE JOB CONTROLLER MAINLINE
;	WHEN IT DETECTS A MESSAGE IN THE APPROPRIATE LIST.
;	THIS ROUTINE IN TURN DISPATCHES TO ONE OF SEVERAL
;	ROUTINES DEPENDING UPON THE MESSAGE TYPE CODE INCLUDED.
;	THE DISPATCH IS DONE WITH A CASE INSTRUCTION BASED ON
;	THE REQUEST CODE FOLLOWED BY A CALL.  THE CALL IS DONE
;	TO GENERATE A CALL FRAME SO THAT IF A FATAL ERROR IS
;	DETECTED, ALL THAT NEED BE DONE IS ISSUE A RET WITH
;	THE FAILURE INDICATION IN R0. PRIOR TO CASING ON THE
;	REQUEST TYPE, A SEARCH OF THE SYMBIONT MANAGER QUEUES
;	IS DONE TO FIND THE QUEUE ASSOCIATED WITH THE REQUEST.
;	THE LOCATION "QUESRCFLG" HAS A BIT SET CORRESPONDING
;	TO THE FUNCTIONS WHICH REQUIRE A QUEUE SEARCH.
;	THERE IS ONE SPECIAL CASE, THAT IS INITIALIZE A
;	QUEUE MAY OR MAY NOT FAIL TO FIND THE QUEUE AND EITHER
;	CASE IS VALID. IN OTHER CASES, FAILURE TO FIND THE
;	QUEUE RESULTS IN TERMINATION OF THE REQUEST.
;
; CALLING SEQUENCE:
;
;	BSB/JSB	JBC$SYMBMAN
;
; INPUT PARAMETERS:
;
;	R2 HAS THE ADDRESS OF THE MESSAGE TO BE PROCESSED
;	R10 HAS BASE ADDRESS OF THE SYSTEM QUEUE FILE
;	R11 HAS ADDRESS OF THE JOB CONTROLLER DATA BLOCK
;
; OUTPUT PARAMETERS:
;
; COMPLETION CODES:
;
;	R0 CONTAINS THE FINAL STATUS OF THE REQUEST
;	R2 CONTAINS THE MESSAGE CODE FOR RESPONCE
;
; SIDE EFFECTS:
;
;	THE QUEUE IS MODIFIED AS PER THE REQUEST.
;--

	PURE_SECTION
	.ENABL	LSB

SYM$SYMBMAN::
	SETSTAT	SYMBDSAB		; SYMBIONT MANAGER DISABLED ERROR
	TSTL	R10			; IS THERE A SYSTEM QUEUE SECTION?
	BEQL	20$			; BR IF NO-RETURN ERROR
	CALLG	(AP),B^100$		; CREATE A CALL FRAME
20$:	MOVZWL	#MSG$_SMBRSP,R2		; SET MESSAGE TYPE
	RSB				; BACK TO JOB CONTROLLER
;
; DISPATCH TO THE APPROPRIATE ROUTINE.  IF QUEUE SEARCH WAS DONE
; R5 POINTS AT NAME IF SEARCHED FAILED, R6 CONTAINS ADDRESS OF
; DEVICE QUEUE IF FOUND.
;
100$:	.WORD	0			 ; ENTRY MASK
	MOVZWL	SMR$W_USERREQ(R9),R7	; GET USER REQUEST CODE
	BBC	R7,OPRREQ,105$		; BR IF OPERATOR PRIVILEGE NOT NEEDED
	BSBW	SYM$CKOPRPRV		; VERIFY PROCESS HAS THIS PRIVILEGE
	BLBC	R0,120$			; RETURN ERROR IF NO PRIVILEGE
105$:	MOVAL	SMR$T_DATA(R9),R5	; SET POINTER TO DATA PORTION OF MESSAGE
	BBC	R7,QUESRCFLG,110$	; BR IF QUEUE SEARCH NO REQUIRED
	BSBW	SYM$FINDQUEUE		; LOCATE THE QUEUE
	BLBS	R0,110$			; BR IF FOUND OK
	ASSUME	SMR$K_INITIAL EQ 0
	TSTL	R7			; WAS REQUEST INITIALIZE?
	BNEQ	120$			; BR IF NO- ITS AN ERROR
110$:	CLRB	JBC$B_QUEWRT		; SET TO UPDATE QUEUE
	CASE	R7,<-			; DECODE REQUEST TYPE
		SYM$INITIALIZE,-	; INITIALIZE A QUEUE
		SYM$DELETEQUE,-		; REMOVE A QUEUE
		SYM$START,-		; BEGIN DEQUEUEING FROM QUEUE
		SYM$PAUSE,-		; SUSPEND THE PRINTING
		SYM$MERGE,-		; MERGE FILE INTO A SINGLE QUEUE
		SYM$REDIRECT,-		; REDIRECT A QUEUE TO ANOTHER
		SYM$JUSTIFY,-		; POSSITION TO TOP-OF-FORM
		SYM$STOP,-		; INHIBIT FURTHER DEQUEUEING
		SYM$ENTER,-		; ADD A RECORD TO A QUEUE
		SYM$CREJOB,-		; CREATE A JOB
		SYM$ADDFIL,-		; ADD A FILE TO PRINT JOB
		SYM$CLSJOB,-		; CLOSE OUT THE JOB
		SYM$RMVJOB,-		; REMOVE JOB FROM THE QUEUE
		SYM$ALTER,-		; CHANGE SOME VALUES ON A QUEUE RECORD
		SYM$ABORT,-		; ABORT PRINTING THE JOB
		SYM$RELEASE,-		; RELEASE A PRVIOUSLY HELD JOB
		SYM$NXTJOBSTEP,-	; NEXT JOB STEP FOR BATCH JOB
		SYM$SYNCJOB,-		; SYNCRONIZE WITH JOB
		SYM$SENDQUE,-		; SEND QUEUE NAME
		>
	SETSTAT	SMINVREQ		; SET ERROR-INVALID REQUEST CODE
120$:	RET				; GO BACK TO DISPATCHER
 
;+
; ROUTINE TO SERVICE THE TIME QUEUE.  ALL OVER DUE ENTRIES ARE
; INSERTED IN THE ACTIVE PRINT QUEUE.
;-
 
SYM$SRVTIMER::				;
210$:	MOVL	SQH$L_TIMQUE(R10),R7	; GET INDEX TO NEXT JOB IN TIME QUEUE
	BEQL	240$			; BR IF THERE ARE NO MORE
	ADDL	R10,R7			; FIND REAL ADDRESS
	CMPQUAD	SJH$Q_TIME(R7), -	; CHECK IF TIME HAS RUN OUT
		JCD_Q_TIME(R11)		; AGAINST CURRENT TIME
	BGTRU	230$			; IF NO TIME QUEUE IS SREVICED
	MOVL	SJH$L_NEXTJOB(R7),SQH$L_TIMQUE(R10) ; CLOSE THE LIST
	CLRL	SJH$L_NEXTJOB(R7)	; REMOVE NEXT FROM THIS JOB
	SYM_QUECHANGE			; TELL THE WORLD THE QUEUE CHANGED
	MOVQ	JCD_Q_TIME(R11),SJH$Q_TIME(R7)	; SET NEW TIME FOR THIS JOB
	BSBW	SYM$INSACTQUE		; INSERT IN DEVICE QUEUE
	BRB	210$			;
230$:	BSBW	SYM$SETIMER		; START THE CLOCK FOR THE NEXT REQUEST
240$:	RSB				;
 
	.DSABL	LSB
;
; SUBROUTINE TO CHECK OPERATOR PRIVILEGE
;
SYM$CKOPRPRV::				; CHECK FOR OPERATOR PRIVILEGE
	SETSTAT	NOPRIV			; ASSUME CHECK WILL FAIL
	BBC	#PRV$V_OPER,-		; BR IF THE REQUESTING PROCESS
		SMR$Q_PRVMSK(R9),10$	; HAS NO OPERATOR PRIVILEGE
	SETSTAT	NORMAL			; OK! SAY OPERATION IS OK
10$:	RSB				;
 
;
; SUBROUTINE TO CHECK WORLD PRIVILEGE
;
SYM$CKWLDPRV::				; CHECK FOR WORLD PRIVILEGE
	SETSTAT	NOPRIV			; ASSUME CHECK WILL FAIL
	BBC	#PRV$V_WORLD,-
		SMR$Q_PRVMSK(R9),20$	; CHECK BIT - BR IF NO PRIV
	SETSTAT	NORMAL			; INDICATE HE HAS PRIVILEGE
20$:	RSB				;
;
; SUBROUTINE TO CHECK GROUP PRIVILEGE
;
SYM$CKGRPPRV::				; CHECK FOR GROUP PRIVILEGE
	SETSTAT	NOPRIV			; ASSUME CHECK WILL FAIL
	BBC	#PRV$V_GROUP,-		; CHECK BIT - BR IF NO PRIV
		SMR$Q_PRVMSK(R9),30$	;
	SETSTAT	NORMAL			; INDCICATE HE HAS PRIVILEGE
30$:	RSB				;
;
; SUBROUTINE TO CHECK FOR ALTPRI OR OPER PRIVILEGE
;
SYM$CKALTPRV::
	SETSTAT	NOPRIV			; ASSUME NO PRIVILEGE
	BBS	#PRV$V_SETPRI,-		; CHECK BIT - BR IF NO PRIV
		SMR$Q_PRVMSK(R9),40$
	BBC	#PRV$V_OPER,-		; CHECK IF HAS OPER PRIV
		SMR$Q_PRVMSK(R9),50$	; IF BIT CLEAR THEN NO
40$:	SETSTAT	NORMAL			; INDICATE HE HAS PRIVILEGE
50$:	RSB
	.END				;
