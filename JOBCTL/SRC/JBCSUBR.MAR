	.TITLE	JBCSUBR - COMMON JOB CONTROLLER SUBROUTINES
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************

;++
; FACILITY:	STARLET JOB CONTROLLER
;
; ABSTRACT:	GENERALLY USED UTILITY SUBROUTINES
;
; ENVIRONMENT:	USER MODE NON-PRIVILEGED CODE
;
; AUTHOR:	W.H.BROWN, CREATION DATE:  28-FEB-77
;
; MODIFIED BY:
;
;	, : VERSION
; 01	- 
;--
	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:   [235,10]J/ML
;
; MACROS:
;
; EQUATED SYMBOLS:	NONE
;
; OWN STORAGE:
;
;	NO LOCAL STORAGE IN THIS MODULE


	.SBTTL	ASSIGN DEVICE
;++
; FUNCTIONAL DESCRIPTION:
;
;	THIS ROUTINE IS CALLED TO ASSIGN A SPECIFIED CHANNEL TO
;	A DEVICE. THE ASSIGNMENT IS DONE WITH A PRECEEDING "_"
;	TO INSURE THAT THE DEVICE ASSIGNED IS THE ONE SPECIFIED.
;
; CALLING SEQUENCE:
;
;	BSB/JSB	JBC$ASSIGNDEV		; ASSIGN ANY DEVICE
;	BSB/JSB	JBC$ASSIGNMB		; ASSIGN A MAILBOX
;
; INPUT PARAMETERS:
;
; FOR ASSIGNDEV:
;
;	R0 IS THE ADDRESS AS A COUNTED STRING
;
; FOR ASSIGNMB:
;
;	R0 IS THE BINARY UNIT NUMBER OF MAILBOX TO ASSIGN
;
; EITHER:
;
;	R1 CONTAINS THE ADDRESS OF WORD TO STORE ASSIGNED CHANNEL NUMBER.
;
; OUTPUT PARAMETERS:
;
;	THE SPECIFIED LOCATION CONTAINS THE CHANNEL NUMBER
;	AND THE CHANNEL IS ASSINGED.
;
; COMPLETION CODES:
;
;	R0 RETURNED AS SET BY THE SYSTEM SERVICE ASSIGN CHANNEL.
;
; SIDE EFFECTS:
;
;	R2 IS SCRATCHED
;--
	PURE_SECTION
 
JBC$ASSIGNMB::				; ASSIGN A MAILBOX
	MOVAB	W^JBC$T_MBOXUNIT,R2	; SET ADDRESS FOR MAILBOX UNIT
	PUSHL	R1			; SAVE CHANNEL WORD ADDRESS
	BSBW	JBC$BIN2ASC		; CONVERT UNIT TO ASCII
	POPR	#^M<R1>			; RESTORE CHANNEL WORD ADDRESS
	MOVAB	W^JBC$T_MBOXNAME+1,R0	; GET START OF NAME STRING
	SUBL	R0,R2			; FIND FINAL LENGTH OF NAME
	MOVB	R2,-(R0)		; SET LENGTH OF FINAL MAILBOX NAME
 
JBC$ASSIGNDEV::				; ENTER WITH JSB/BSB
	SUBL	#20,SP			; MAKE DEVICE NAME BUFFER IN STACK
	MOVL	SP,R2			; SET BUFFER POINTER
	PUSHR	#^M<R1,R2>		; PUSH BUFFER ADDRESS FOR DESCRIPTOR
					; AND SAVE CHANNEL NUMBER ADDRESS
	MOVZBL	(R0)+,R1		; GET LENGTH OF GENERIC NAME
10$:	MOVB	(R0)+,(R2)+		; APPEND GENERIC NAME TO UNDERSCORE
	SOBGTR	R1,10$			; MOVE ENTIRE NAME
	POPR	#^M<R1>			; RESTORE CHANNEL NUMBER
	SUBL3	(SP),R2,-(SP)		; COMPUTE COUNT FOR STRING DESCRIPTOR
	MOVL	SP,R0			; GET ADDRESS OF DEVICE NAME DESCRIPTOR
	$ASSIGN_S  (R0),(R1)		; NOW ASSIGN THE CHANNEL
	ADDL	#20+8,SP		; CLEAR BUFFER & DESCRIPTOR FROM STACK
	RSB				; RETURN WITH STATUS

	.SBTTL	BINARY TO ASCII
;++
; FUNCTIONAL DESCRIPTION:
;
;	THIS ROUTINE CONVERTS A BINARY NUMBER TO A DECIMAL ASCII.
;
; CALLING SEQUENCE:
;
;	BSB/JSB	JBC$BIN2ASC		; FOR ZERO SUPPRESSED OUTPUT
;
; INPUT PARAMETERS:
;
;	R0 = NUMBER TO CONVERT
;	R2 = ADDRESS OF PLACE TO STORE FIRST BYTE
;
; OUTPUT PARAMETERS:
;
;	NUMBER IS CONVERTED AND STORED
;	R2 IS INCREMENTED PAST LAST BYTE STORED
;
; COMPLETION CODES:	NONE
;
; SIDE EFFECTS:
;
;	R0,R1 ARE RETURNED ZERO.
;--

JBC$BIN2ASC::				; ENTER WITH JSB/BSB
	CLRL	R1			; ZERO HI 1/2 OF QUAD WORD
20$:	EDIV	#10,R0,R0,-(SP)		; DIVIDE BY DECIMAL RADIX
	ADDL	#^O60,(SP)		; CONVERT TO ASCII
	TSTL	R0			; ANYTHING LEFT TO CONVERT
	BEQL	30$			; BR IF NO MORE SIGNIFICANT DIGITS
	BSBB	20$			; RECURSE THRU ASCII CONVERT
30$:	CVTLB	(SP)+,(R2)+		; INSERT ASCII UNIT NUMBER
	RSB				; UNWIND RECURSIVE LOOP
 
 
	.END				; *** END OF MODULE ***
