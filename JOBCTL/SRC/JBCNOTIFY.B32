MODULE JBCNOTIFY( %TITLE 'NOTIFY LOGGED ON USER OF JOB COMPLETION'
		IDENT = 'V03-000' ) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	VAX/VMS JOB CONTROLLER
!
! ABSTRACT:	Notify logged on user that batch/print job has completed
!
! ENVIRONMENT:	NATIVE/USER MODE
!
! AUTHOR: Gary W. Fowler, CREATION DATE: 10-APR-1981
!
! MODIFIED BY:
!
!--

!
! TABLE OF CONTENTS:
!

!
! INCLUDE FILES:
!
	LIBRARY 'SYS$LIBRARY:STARLET.L32';
!
! MACROS:
!
MACRO
	DESCRIPTOR []=				! Produce a character descriptR
		UPLIT(%CHARCOUNT(%REMAINING),UPLIT BYTE(%REMAINING))%;


!
! EQUATED SYMBOLS:
!
LITERAL
	BELL	= 7,				! ASCII bell
	JBC$K_NOTSIZ = 256;			! Size of message buffeR
!
! EXTERNAL SYMBOLS
!
EXTERNAL LITERAL
	JBC$_JOBABORT;				! Status is job aborted

!
! DECLARE PSECT DEFINITIONS
!
PSECT OWN = JBC_RWDATA(NOEXECUTE,WRITE,READ,ALIGN(2));
PSECT PLIT = JBC_PURE(EXECUTE,READ,NOWRITE,ALIGN(0));


!
! Output messages
!
BIND
WARNING =  UPLIT(%ASCIC'completed with warnings'),
SUCCESS =  UPLIT(%ASCIC'completed'),
FAILURE =  UPLIT(%ASCIC'completed with errors'),
INFORM  =  UPLIT(%ASCIC'completed with informational'),
FATAL   =  UPLIT(%ASCIC'completed with fatal error'),
ABORTED =  UPLIT(%ASCIC'was aborted');

!
! OWN STORAGE
!
OWN
PID,							! Process id
USERNAME_LEN,						! Username descriptor
USERNAME_BUFF:	BLOCK[12,BYTE],				! Username buffer
TERMINAL_BUFF:	BLOCK[8,BYTE],				! Terminal name buffer
TERMINAL_DESC:	BLOCK[8,BYTE],				! Term name descriptor
MESSAGE_VECTOR:	VECTOR[9] INITIAL(WARNING,SUCCESS,FAILURE,INFORM,FATAL,
				   SUCCESS,WARNING,SUCCESS,ABORTED);
							! Vector of mess. addrs
BIND
	GETJPIITMLST =				! $GETJPI item list
		 UPLIT(	WORD(12),		! Length of buffer
			WORD(JPI$_USERNAME),	! Username item code
			LONG(USERNAME_BUFF),	! Address of buffer
			LONG(USERNAME_LEN),	! Address of length buff
			WORD(8),		! Length of buffer
			WORD(JPI$_TERMINAL),	! Terminal item code
			LONG(TERMINAL_BUFF),	! Address of buffer
			LONG(TERMINAL_DESC),	! Address of length buff
			LONG(0)			! End of list
			);




	PSECT CODE = JBC_PURE(EXECUTE,READ,NOWRITE,ALIGN(0));
GLOBAL ROUTINE SYM$NOTIFY(USERNAME,JOBNAME,SEQNUM,COMPSTATUS,JOBTYPE) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!	Loops through all the processes on the system, and if a process's
!	user name matches the specified username, and the process is an
!	interactive process, a job completion message is broadcast to 
!	the terminal.
!
! INPUTS:
!
!	USERNAME   =  Address of username descriptor.
!	JOBNAME    =  Address of job name descriptor.
!	SEQNUM	   =  Job sequence number
!	COMPSTATUS =  Completion status of job
!	JOBTYPE	   =  Address of descriptor of "Batch" or "Print"
!
!
! OUTPUTS:
!
!	job completion message broadcast to user's terminal, if logged on.
!--
BEGIN
MAP
	USERNAME : REF BLOCK[8,BYTE],		! User name to broadcast to
	COMPSTATUS: BLOCK[,BYTE];		! Completion status of job
LOCAL
	MSG_BUFF:	VECTOR[JBC$K_NOTSIZ],	! Message buffer
	MSG_BUFF_DESC:	BLOCK[8,BYTE],		! Message buffer descriptor
	MESSAGE_OUT,				! Addr of output message
	STATUS;					! Routine status

MSG_BUFF_DESC[DSC$W_LENGTH] = JBC$K_NOTSIZ;	! Set length of message buffer
MSG_BUFF_DESC[DSC$A_POINTER] = MSG_BUFF;	! Set address of message buffer

    IF .COMPSTATUS EQL JBC$_JOBABORT		! Job aborted?
    THEN
	MESSAGE_OUT = .MESSAGE_VECTOR[8]	! yes, set addr. of message
    ELSE					! Job not aborted
	MESSAGE_OUT = .MESSAGE_VECTOR[.COMPSTATUS[STS$V_SEVERITY]];
						! set addr. of message
! Format completion message

$FAO(	DESCRIPTOR('!/',%CHAR(BELL),%CHAR(BELL),'!AS !ZW !AS !AC on !17%D'),
	MSG_BUFF_DESC,
	MSG_BUFF_DESC,
	.JOBTYPE,				   ! Batch or Print
	.SEQNUM,				   ! Sequence no.
	.JOBNAME,				   ! Job name
	.MESSAGE_OUT,				   ! Descriptor of message
	0);					   ! current data and time

PID = -1;					! Initialize wildcard PID
TERMINAL_DESC[DSC$A_POINTER] = TERMINAL_BUFF;	! Initialize terminal 
DO
	BEGIN
	STATUS = $GETJPI(EFN=1,			! Get next process's info
			 PIDADR=PID,		!
			 ITMLST=GETJPIITMLST);	!
	IF .STATUS				! If success,
	THEN	BEGIN
		$WAITFR(EFN=1);			! Wait for the info
		IF (.TERMINAL_DESC[DSC$W_LENGTH] NEQ 0) ! If interactive job
		AND (CH$EQL(.USERNAME[DSC$W_LENGTH], ! and username matches
			   .USERNAME[DSC$A_POINTER],
			   .USERNAME_LEN,
			   USERNAME_BUFF,' '))
		THEN	$BRDCST(MSGBUF=MSG_BUFF_DESC, ! Broadcast message
				DEVNAM=TERMINAL_DESC);
		END
	END
UNTIL .STATUS EQL SS$_NOMOREPROC;		! Continue until all processes
						! are checked
END;

END
ELUDOM
