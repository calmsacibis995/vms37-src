
MODULE HEADER (LANGUAGE (BLISS32) ,
		IDENT = 'V03-000'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  MTAACP
!
! ABSTRACT:
!	This module contains routines which position to headers or trailers
!	and read them.
!
! ENVIRONMENT:
!
!	Starlet operating system, including privileged system services
!	and internal exec routines.
!
!--

!
!
! AUTHOR:  D. H. GILLESPIE,	 CREATION DATE:  25-MAY-77 15:00
!
! MODIFIED BY:
!
!	V02-010	REFORMAT	Maria del C. Nasr	30-Jun-1980
!
!	V02-009	MCN0016		Maria del C. Nasr,	18-Jun-1980  11:55
!		Initialize default HDR2 with blanks, instead of zeroes, to
!		avoid setting the old RMS attributes field.
!
!	A0008	MCN0013		Maria del C. Nasr	11-Mar-1980  11:25
!		Check for HDR3 instead of HDR2 to determine if current file
!		should be included in search or not.
!
!	A0007	MCN0011		Maria del C. Nasr	04-Feb-1980  9:05
!		Add input parameter to UPDVCB_LEOV routine to either clear
!		or set flag, and make routine global.
!
!	A0006	MCN0003		Maria del C. Nasr	28-Sep-79   10:39
!		Add HDR3 processing
!
!	A0005	SPR24948	Maria del C. Nasr	11-Sep-79	17:30
!		Forced spacing to eof when current position bit set to
!		fix bug.
!
!
!**

LIBRARY 'SYS$LIBRARY:LIB.L32';

REQUIRE 'SRC$:MTADEF.B32';

FORWARD ROUTINE
    READ_HDR		: COMMON_CALL,		! read HDR1, HDR2, and and HDR3 if exist
    SPACE_EOF		: COMMON_CALL NOVALUE,	! space to end of file
    UPDVCB_LEOV		: COMMON_CALL NOVALUE,	! update VCB logical end of file
    MAKE_CUR_FILE	: COMMON_CALL NOVALUE,	! update VCB
    WRAP_AROUND		: L$WRAP_AROUND;	! continue search at beginning of volume set  !
   
EXTERNAL
    CURRENT_UCB		: REF BBLOCK,
    IO_PACKET		: REF BBLOCK,		! address of IO request packet
    HDR1		: REF BBLOCK,		! address HDR1 label
    HDR2		: REF BBLOCK,		! address of HDR2 label
    HDR3		: REF BBLOCK;		! address of HDR3 label


GLOBAL ROUTINE GET_START_HDR : L$GET_START_HDR =

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine positions to the header label set of the start file
!	in current search and reads HDR1, HDR2, and HDR3 labels unless
!	they have already been read.
!
! CALLING SEQUENCE:
!	GET_START_HDR()
!
! INPUT PARAMETERS:
!	none
!
! IMPLICIT INPUTS:
!	CURRENT_VCB, CURRENT_UCB
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	HDR1 read in, HDR2 read in or defaulted, HDR3 read in or defaulted
!
! ROUTINE VALUE:
!	0 unsuccessful, logical end of volume set
!	1 successful
!
! SIDE EFFECTS:
!	none
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_REG;

    EXTERNAL LITERAL
	UCB$L_MT_RECORD;			! displacement into ucb

    EXTERNAL ROUTINE
	MOUNT_VOL	: COMMON_CALL;		! mount volume

    EXTERNAL
	CURRENT_UCB	: REF BBLOCK,		! address of current ucb
	LOCAL_FIB	: BBLOCK;			! copy of user's fib

    LOCAL
	RELATIVE_BLOCK,			! relative block number to last tm
	TM;					! number of tm's

    ! mount volume if the current relative volume number is zero
    !

    IF .CURRENT_VCB[VCB$B_CUR_RVN] EQL 0
    THEN
	MOUNT_VOL(1, $FIELDMASK(MOU$V_REWIND) + $FIELDMASK(MOU$V_LBLCHECK));

    ! if at logical end of volume set, return immediately
    !

    IF .CURRENT_VCB[VCB$V_LOGICEOVS]
    THEN
	RETURN 0;

    ! If the number of tape marks into the file is not 0, then the previous file
    ! was closed prematurely and should not be included in search except in the
    ! case where there is no HDR3 and the tape is left positioned beyond the
    ! tm. If the section is not the first, then space to next file
    !

    IF (.CURRENT_VCB[VCB$B_TM] NEQU 0
	AND
	NOT (.CURRENT_VCB[VCB$B_TM] EQLU 1 AND .HDR3[HD3$L_HD3LID] NEQU 'HDR3'
	AND
	(.(.CURRENT_UCB + UCB$L_MT_RECORD)<0,32> - .CURRENT_VCB[VCB$L_ST_RECORD]) EQLU 0))
	OR
	.CURRENT_VCB[VCB$W_CUR_SEQ] GTR 1
    THEN
	SPACE_EOF()				! position to beginning of next file
    ELSE

	! If function is create, and current position bit is set, then force
	! spacing to end of file, unless positioned in dummy file header set...
	!

	IF ((.IO_PACKET[IRP$V_FCODE] EQL IO$_CREATE) AND .LOCAL_FIB[FIB$V_CURPOS])
	    AND
	    (.CURRENT_VCB[VCB$B_TM] NEQU 0) AND (.CURRENT_VCB[VCB$W_CUR_NUM] NEQU 0)
	THEN
	    SPACE_EOF();

    ! When new volume is mounted, VOL1 has been read but not the header labels.
    ! Therefore, the actual block count equals 1.  If relative block count = 0,
    ! then the headers have not been read for this file.
    !
    RELATIVE_BLOCK = .(.CURRENT_UCB + UCB$L_MT_RECORD)<0,32> -
	.CURRENT_VCB[VCB$L_ST_RECORD];

    IF (.RELATIVE_BLOCK EQL 0 OR .(.CURRENT_UCB + UCB$L_MT_RECORD)<0,32> EQLU 1)
	AND
	.CURRENT_VCB[VCB$B_TM] EQLU 0
    THEN
	RETURN READ_HDR();

    RETURN 1;

    END;					! end of routine


GLOBAL ROUTINE READ_HDR : COMMON_CALL =

!++
!
! FUNCTIONAL DESCRIPTION:
!	Read HDR1, and HDR2 if it exists - otherwise, it is defaulted.
!	HDR3 is read only if HDR2 is found, and if starlet file.
!
! CALLING SEQUENCE:
!	READ_HDR()
!
! INPUT PARAMETERS:
!	none
!
! IMPLICIT INPUTS:
!	CURRENT_VCB - address of VCB
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	HDR1, HDR2, and HDR3 read in
!	If starlet file, VCB notes this fact
!	If logical end of tape (ie:  tm encountered on read of HDR1) then this fact is noted in VCB
!
! ROUTINE VALUE:
!	0 - tm encountered when reading HDR1, logical end of volume set
!	1 - successful
!
! SIDE EFFECTS:
!	First user label may be located in scratch label area
!
! USER ERRORS:
!	SS$_TAPEPOSLOST - HDR1 not encountered on read
!
!--

    BEGIN

    LOCAL
	DESCR	: VECTOR [2];

    EXTERNAL REGISTER
	COMMON_REG;

    EXTERNAL ROUTINE
	READ_BLOCK	: COMMON_CALL;		! read one magtape block

    BIND
	CVT5 = DESCRIPTOR('!5ZW'),
	DEFAULT = UPLIT ('00512');

    IF NOT READ_BLOCK(.HDR1, 80)
    THEN
	BEGIN
	KERNEL_CALL(UPDVCB_LEOV, 1);
	RETURN 0;

	END;

    WHILE 1
    DO
	BEGIN

	IF .HDR1[HD1$L_HD1LID] EQLU 'HDR1'
	THEN
	    EXITLOOP;

	IF NOT READ_BLOCK(.HDR1, 80)
	THEN
	    ERR_EXIT(SS$_TAPEPOSLOST);

	END;

    KERNEL_CALL(MAKE_CUR_FILE, .HDR1);

    ! Default HDR2 values
    !
    CH$FILL(' ', 80, .HDR2);
    HDR2[HD2$B_RECFORMAT] = 'F';
    DESCR[0] = HD2$S_BLOCKLEN;
    DESCR[1] = HDR2[HD2$T_BLOCKLEN];

    IF NOT $FAO(CVT5, 0, DESCR, .CURRENT_UCB[UCB$W_DEVBUFSIZ])
    THEN
	CH$MOVE(HD2$S_BLOCKLEN, DEFAULT, HDR2[HD2$T_BLOCKLEN]);

    CH$MOVE(HD2$S_RECLEN, HDR2[HD2$T_BLOCKLEN], HDR2[HD2$T_RECLEN]);

    IF .CURRENT_VCB[VCB$W_RECORDSZ] NEQ 0
    THEN
	BEGIN
	DESCR[0] = HD2$S_RECLEN;
	DESCR[1] = HDR2[HD2$T_RECLEN];

	IF NOT $FAO(CVT5, 0, DESCR, .CURRENT_VCB[VCB$W_RECORDSZ])
	THEN
	    CH$MOVE(HD2$S_RECLEN, HDR2[HD2$T_BLOCKLEN], HDR2[HD2$T_RECLEN]);

	END;

    ! Now try to read HDR2
    !

    IF READ_BLOCK(.HDR2 + 160, 80)		! read into scratch area
    THEN

	IF .(.HDR2 + 160) EQLU 'HDR2'
	THEN
	    BEGIN
	    CH$MOVE(80, .HDR2 + 160, .HDR2);	! HDR2 found
	    CH$FILL(0, 80, .HDR3);		! clear HDR3 area

	    IF .CURRENT_VCB[VCB$V_STARFILE]	! if starlet file
	    THEN

		IF READ_BLOCK(.HDR3 + 80, 80)	! try to read HDR3
		THEN

		    IF .(.HDR3 + 80) EQLU 'HDR3'
		    THEN
			CH$MOVE(80, .HDR3 + 80, .HDR3);	! HDR3 found

	    END;

    RETURN 1;					! return success

    END;					! end of routine


GLOBAL ROUTINE WRAP_AROUND : L$WRAP_AROUND =

!++
!
! FUNCTIONAL DESCRIPTION:
!	If this is not the first time through and the search started
!	at the beginning of the volume set then return error else rewind volume set
!
! CALLING SEQUENCE:
!	WRAP_AROUND()
!
! INPUT PARAMETERS:
!	none
!
! IMPLICIT INPUTS:
!	LOCAL_FIB - copy of user's fib
!	CURRENT_VCB - address of current volume VCB
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	0 back to beginning of search
!	1 at beginning of volume set
!
! SIDE EFFECTS:
!	none
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_REG;

    EXTERNAL ROUTINE
	MOUNT_VOL	: COMMON_CALL,		! mount volume
	REWIND_VOL_SET	: COMMON_CALL;		! rewind volume set

    EXTERNAL
	LOCAL_FIB	: BBLOCK;		! copy of user's fib

    IF .CURRENT_VCB[VCB$L_START_FID] EQL %X'00010001'
    THEN
	RETURN 0
    ELSE
	BEGIN
	REWIND_VOL_SET();

	! get first volume mounted
	!
	MOUNT_VOL(1, $FIELDMASK(MOU$V_REWIND) + $FIELDMASK(MOU$V_LBLCHECK));

	IF NOT READ_HDR()
	THEN
	    ERR_EXIT(SS$_TAPEPOSLOST);

	END;

    RETURN 1;

    END;					! end of routine


GLOBAL ROUTINE SPACE_EOF : COMMON_CALL NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine spaces to the end of the current file, right
!	before the next file.
!
! CALLING SEQUENCE:
!	SPACE_EOF()
!
! INPUT PARAMETERS:
!	none
!
! IMPLICIT INPUTS:
!	CURRENT_VCB _ address of current VCB
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	none
!
! SIDE EFFECTS:
!	The tape is left positioned in front of HDR1 of the next file
!
!--

    BEGIN

    SWITCHES NOOPTIMIZE;

    EXTERNAL REGISTER
	COMMON_REG;

    EXTERNAL LITERAL
	UCB$L_MT_RECORD;			! global displacement into ucb

    EXTERNAL ROUTINE
	GTNEXT_VOL_READ	: JSB,			! get next volume on read
	READ_BLOCK	: COMMON_CALL,		! read mag tape block
	SPACE_TM	: COMMON_CALL;		! space tm's

    EXTERNAL
	CURRENT_UCB	: REF BBLOCK;		! address of current ucb

    LOCAL
	TM;

    ! If tape is positioned in header set, space 2 tape marks
    !

    IF .CURRENT_VCB[VCB$B_TM] EQL 0 AND	.HDR1[HD1$L_HD1LID] EQL 'HDR1'
    THEN
	SPACE_TM(2);

    ! if in data area, space 1 tape mark
    !

    IF .CURRENT_VCB[VCB$B_TM] EQLU 1
    THEN
	SPACE_TM(1);

    ! Now if trailer label has not been read, read it
    !

    IF .CURRENT_VCB[VCB$B_TM] EQLU 2
	AND
	(.(.CURRENT_UCB + UCB$L_MT_RECORD)<0,32> - .CURRENT_VCB[VCB$L_ST_RECORD]) EQL 0
    THEN

	IF NOT READ_BLOCK(.HDR1, 80)
	THEN
	    ERR_EXIT(SS$_TAPEPOSLOST);

    WHILE 1
    DO
	BEGIN

	IF .HDR1[HD1$L_HD1LID] EQL 'EOF1'
	THEN
	    EXITLOOP;

	IF .HDR1[HD1$L_HD1LID] NEQ 'EOV1'
	THEN
	    ERR_EXIT(SS$_TAPEPOSLOST);

	GTNEXT_VOL_READ();

	IF .CURRENT_VCB[VCB$B_TM] EQLU 0
	THEN
	    SPACE_TM(2)
	ELSE
	    SPACE_TM(1);

	IF NOT READ_BLOCK(.HDR1, 80)
	THEN
	    ERR_EXIT(SS$_TAPEPOSLOST);

	END;

    IF .CURRENT_VCB[VCB$B_TM] EQLU 2
    THEN
	SPACE_TM(1);

    END;					! end of routine


ROUTINE MAKE_CUR_FILE (LABELS) : COMMON_CALL NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine updates the current file number and the Starlet
!	file indicator.
!
! CALLING SEQUENCE:
!	MAKE_CUR_FILE(ARG1), call in kernel mode
!
! INPUT PARAMETERS:
!	ARG1 - address of labels
!
! IMPLICIT INPUTS:
!	none
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	If file is Starlet file, then VCB$V_STARFILE = 1
!	CUR_NUM is updated
!
! ROUTINE VALUE:
!	none
!
! SIDE EFFECTS:
!	none
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_REG;

    MAP
	LABELS	: REF BBLOCK;			! HDR1, HDR2, and HDR3 address

    BIND

	! Any file with 11 code will be supported, instead of only 11A
	!
	STARID = UPLIT ('DECFILE11');

    EXTERNAL ROUTINE
	FORMAT_FID	: COMMON_CALL;		! format file id

    CURRENT_VCB[VCB$V_STARFILE] = CH$EQL(9, STARID, 9, LABELS[HD1$T_SYSCODE],0);
    FORMAT_FID(CURRENT_VCB[VCB$W_CUR_NUM]);
    END;					! end of routine


GLOBAL ROUTINE UPDVCB_LEOV (BIT_VALUE) : COMMON_CALL NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine sets or clears the logical end of file bit in the VCB
!
! CALLING SEQUENCE:
!	UPDVCB_LEOV(ARG1), called in kernel mode
!
! INPUT PARAMETERS:
!	value to set logical end of volume to:
!		0 - clear bit
!		1 - set bit
!
! IMPLICIT INPUTS:
!	CURRENT_VCB - address of volume control block
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	CURRENT_VCB[VCB$V_LOGICEOVS] is set or cleared
!
! ROUTINE VALUE:
!	none
!
! SIDE EFFECTS:
!	none
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_REG;

    CURRENT_VCB[VCB$V_LOGICEOVS] = .BIT_VALUE;
    END;					! end of routine

END

ELUDOM
