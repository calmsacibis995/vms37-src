MODULE FRMHDR (LANGUAGE (BLISS32) ,
		IDENT = 'V03-000'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  MTAACP
!
! ABSTRACT:
!
!	This module formats HDR1, HDR2, and HDR3.
!
! ENVIRONMENT:
!
!	Starlet operating system, including privileged system services
!	and internal exec routines.
!
!--

!
!
! AUTHOR:  D. H. GILLESPIE,	 CREATION DATE:  2-JUN-77 14:35
!
! MODIFIED BY:
!
!	V02-012 DMW00069	David Michael Walp	11-Jan-1981
!		Added support of ANSI "a" 17 character filename thru
!		QIO filename parameter
!
!	V02-011 DMW00064	David Michael Walp	 6-Jan-1981
!		Return VMS file spec created by ASCNAME without quotes
!
!	V02-010 DMW00063	David Michael Walp	18-Dec-1981
!		Finished ANSI "a" 17 character file name support
!
!	V02-009 DMW00053	David Michael Walp	10-Nov-1981
!		Return if ANSI resultant name, return it minus trailing
!		spaces.
!
!	V02-008 DMW00043	David Michael Walp	27-Oct-1981
!		Added ANSI "a" 17 character file name support
!
!	V02-007 DMW00016	David Michael Walp	20-May-1981
!		Get the File Set Id from the MVL rather then 1st volume
!		mounted label in the VCB.
!
!	V02-006 DMW00008	David Michael Walp	23-Jan-1981
!		Added check for "%" wild card, needed beacuse of expanded
!		wild card support.  Also code commented out for support of
!		HDR2 attributes.
!
!	V02-005	REFORMAT	Maria del C. Nasr	30-Jun-1980
!
!	A0004	MCN0008		Maria del C. Nasr	22-Feb-1980  16:29
!		Temporary support of RMS attributes in HDR2
!
!	A0003	MCN0003		Maria del C. Nasr	28-Sep-79   10:23
!		Add HDR3 processing
!
!**

LIBRARY 'SYS$LIBRARY:LIB.L32';

REQUIRE 'SRC$:MTADEF.B32';

FORWARD ROUTINE
    FORMAT_HDRS	       : COMMON_CALL NOVALUE;	! format headers

MACRO RAD50_TO_VMS ( STRING, VERSION, OUT_INDEX ) =

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine converts a RAD-50 file name block into the
!	equivalent VMS format name.
!
! CALLING SEQUENCE:
!	RAD50_TO_VMS ( ARG1, ARG2, ARG3 ) 
!
! INPUT PARAMETERS:
!	none
!
! IMPLICIT INPUTS:
!	NMBLOCK - the Radix 50 name block
!
! OUTPUT PARAMETERS:
!	ARG1 - buffer for file name string
!	ARG2 - word to receive version number
!	ARG2 - size of filename string
!
! IMPLICIT OUTPUTS:
!	none
!
! SIDE EFFECTS:
!	none
!
!--

    BEGIN

    EXTERNAL
	NMBLOCK : VECTOR [ , WORD ];		! the rad50 name block

    MAP
	STRING	  : VECTOR [ , BYTE ],		! string buffer arg
	VERSION	  : WORD,			! version number arg
	OUT_INDEX : LONG;			! file name size arg

    LOCAL
	CHARS	: VECTOR [ 3, BYTE ];		! holding place for characters


    ! Set up the index. Then start up the outer loop, which iterates
    ! over name and type fields.
    !
    OUT_INDEX = 0;

    INCR K FROM 0 TO 3 BY 3 DO
	BEGIN

	! The next loop iterates over the RAD-50 words in the name block.
	! There are 3 words for name, 1 for type. Expand each word into
	! the 3 RAD-50 characters.
	!
	INCR I FROM 0 TO ( IF .K THEN 0 ELSE 2 ) 
	    DO

	    BEGIN
	    CHARS [ 0 ] =   .NMBLOCK [ .I + .K ]  / ( 40 * 40 );
	    CHARS [ 1 ] = ( .NMBLOCK [ .I + .K ]  / 40 )	MOD 40;
	    CHARS [ 2 ] =   .NMBLOCK [ .I + .K ]		MOD 40;

	    ! Now convert each character into the correct ASCII code and store
	    ! it in the string buffer if it is not null.
	    !
	    INCR J FROM 0 TO 2 DO
		IF .CHARS [ .J ] NEQ 0 THEN
		    BEGIN
		    STRING [ .OUT_INDEX ] = ( IF .CHARS [ .J ] LSS 30
					      THEN ( .CHARS [ .J ] - 1 ) + 'A'
					      ELSE ( .CHARS [ .J ] - 30 ) + '0' );

		    OUT_INDEX = .OUT_INDEX + 1;
		    END;

	    END;				! end of word loop

	! At the end of name field, insert the dot.
	!
	IF .K EQL 0
	THEN
	    BEGIN
	    STRING [ .OUT_INDEX ] = '.';
	    OUT_INDEX = .OUT_INDEX + 1;
	    END;
	END;					! end of outer loop

    ! fill in the version number
    !
    VERSION = .NMBLOCK [ 4 ];

    END;
    %;					! end of macro RAD50_TO_ASCII

MACRO FORMAT_FILE_NAME =

!++
!
! FUNCTIONAL DESCRIPTION:
!	formats the File's Name, Type and Version to placed into the header
!
! CALLING SEQUENCE:
!	FORMAT_FILE_NAME
!
! INPUT PARAMETERS:
!	none
!
! IMPLICIT INPUTS:
!	none
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	file name is formatted
!
! SIDE EFFECTS:
!	none
!
!--

    BEGIN    

    EXTERNAL ROUTINE				! turn VMS version number
	CALC_TAPE_VER,				!  into ANSI generation nums
	PARSE_NAME_TYPE,			! parse file name string
	PARSE_QUOTED_NAME: COMMON_CALL NOVALUE,	! parse a spec in quotes
	RESULTANT_STRING: COMMON_CALL NOVALUE,	! return resultant string
	STRIP_VERSION	: COMMON_CALL,		! strip version from file spec
	SYS$FAO		: ADDRESSING_MODE ( ABSOLUTE ); ! format generation num

    EXTERNAL
	ANSI_NAME_SIZE	: SIGNED BYTE,		! size of the ANSI file name
	HDR1		: REF BBLOCK,		! point to the file header 1
	IO_PACKET	: REF BBLOCK,		! pointer to current IRP
	LOCAL_FIB	: BBLOCK;		! copy of users File Info Blk

    LITERAL
	FILE_SPEC_MAX	= 13;			! maximum file spec length
						!	9 for name
						!	3 for type
						!	1 for dot

    LOCAL
	ABD		: REF BBLOCKVECTOR [ , ABD$C_LENGTH ],
						! pointer to ACP buffer desc
	DESCRIPT	: VECTOR [ 2, LONG ],	! general purpose descriptor
	FILE_SPEC_PTR	: LONG,			! point to file name buffer
	FILE_SPEC_LEN	: LONG,			! length of file name buffer
	NAME_STRING	: VECTOR [ FILE_SPEC_MAX, BYTE ],
						! buff to hold converted RAD50
	GEN_NUM_VER	: VECTOR [ 2, LONG ],	! ANSI version numbers
	QUOTED_NAME	: BITVECTOR [ 1 ],	! was the spec passed in quotes
	VERSION		: WORD;			! VMS version number


    ! which filename should be used
    ! get the filename from name block if not specifed as attribute
    !
    ABD = .BBLOCK [ .IO_PACKET [ IRP$L_SVAPTE ], AIB$L_DESCRIPT ];
    IF .ABD [ ABD$C_NAME, ABD$W_COUNT ] EQLU 0
    THEN
	BEGIN
	RAD50_TO_VMS ( NAME_STRING, VERSION, FILE_SPEC_LEN );
	FILE_SPEC_PTR = NAME_STRING;
	QUOTED_NAME [ 0 ] = FALSE;
	END
    ELSE
	BEGIN
	FILE_SPEC_LEN = .ABD [ ABD$C_NAME, ABD$W_COUNT ];
	FILE_SPEC_PTR = .ABD [ ABD$C_NAME, ABD$W_TEXT ] + 
			 ABD [ ABD$C_NAME, ABD$W_TEXT ] + 1;

	! do not allow wild cards in the version field
	!
	VERSION = STRIP_VERSION ( FILE_SPEC_LEN,
				  FILE_SPEC_PTR,
				  FALSE,
				  QUOTED_NAME [ 0 ] );
	END;

    ! check that it is not to large
    !
    IF .VERSION GTRU 32767 THEN ERR_EXIT ( SS$_BADFILEVER );

    ! parse the file name if is a VMS file spec and place into HDR1
    !
    IF .ANSI_NAME_SIZE LSS 0
    THEN
	BEGIN
	DESCRIPT [ 0 ] = HD1$S_FILEID;
	DESCRIPT [ 1 ] = HDR1 [ HD1$T_FILEID ];

	! call the correct parse routine
	!
	IF .QUOTED_NAME [ 0 ]
	THEN
	    BEGIN
	    PARSE_QUOTED_NAME ( .FILE_SPEC_LEN,
				.FILE_SPEC_PTR,
				DESCRIPT );

	    ! set a dummy value so it is tested to see if it is VMS spec
	    !
	    ANSI_NAME_SIZE = 1;
	    END
	ELSE
	    BEGIN
	    IF NOT PARSE_NAME_TYPE ( FALSE, ! no wild cards allowed
				     .FILE_SPEC_LEN,
				     .FILE_SPEC_PTR,
				     DESCRIPT )
	    THEN ERR_EXIT ( SS$_BADFILENAME );
	    END;
	END;

    ! test if the file spec give to us by ATR$_ASCNAME or in quotes is a VMS
    ! spec so we do not return it in quotes.  A size of zero will not work
    ! cause you need at least a "."
    !
    IF .ANSI_NAME_SIZE GTR 0
    THEN
	BEGIN
	EXTERNAL WORK_AREA;	! address of general work area
	DESCRIPT [ 0 ] = HD1$S_FILEID;
	DESCRIPT [ 1 ] = WORK_AREA;
	IF PARSE_NAME_TYPE ( FALSE, ! no wild cards allowed
			     HD1$S_FILEID,
			     HDR1 [ HD1$T_FILEID ],
			     DESCRIPT )
	THEN ANSI_NAME_SIZE = -1;
	END;
	

    ! if enter function return file name string to user
    !
    IF .LOCAL_FIB [ FIB$W_DID_NUM ] NEQ 0
    THEN
	RESULTANT_STRING ( .ANSI_NAME_SIZE LSS 0,
			   HD1$S_FILEID,
			   HDR1 [ HD1$T_FILEID ],
			   .VERSION );

    ! transform the VMS file version number into ANSI format
    !
    CALC_TAPE_VER ( .VERSION, GEN_NUM_VER );
    DESCRIPT [ 0 ] = HD1$S_GENNO + HD1$S_GENVER;
    DESCRIPT [ 1 ] = HDR1 [ HD1$T_GENNO ];
    SYS$FAO ( DESCRIPTOR ( '!4ZL!2ZL' ), 0, DESCRIPT,
	     .GEN_NUM_VER [ 0 ], .GEN_NUM_VER [ 1 ] );

    END;
    %;					! end of macro FORMAT_FILE_NAME

GLOBAL ROUTINE FORMAT_HDRS : COMMON_CALL NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine formats HDR1, HDR2 and HDR3.
!
! CALLING SEQUENCE:
!	FORMAT_HDRS()
!
! INPUT PARAMETERS:
!	none
!
! IMPLICIT INPUTS:
!	CURRENT_VCB - address of current vcb
!	HDR1 - address of HDR1 label
!	HDR2 - address of HDR2 label
!	HDR3 - address of HDR3 label
!	LOCAL_FIB - copy of user's fib
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	HDR1, HDR2, and HDR3 formatted
!
! ROUTINE VALUE:
!	none
!
! SIDE EFFECTS:
!	none
!
!--

    BEGIN

    EXTERNAL ROUTINE
	CONVDATE_R2J,				! convert regular date to
						!  Julian for tape
	SYS$ASCTIM	: ADDRESSING_MODE(ABSOLUTE),! get ASCII date/time
	SYS$FAO		: ADDRESSING_MODE(ABSOLUTE),! format ASCII output
	WRITE_ATTRIBUTE : COMMON_CALL;		! write user supplied attrbts


    EXTERNAL REGISTER
	COMMON_REG;

    EXTERNAL
	CURRENT_UCB : REF BBLOCK,		! address of current UCB
	HDR1	    : REF BBLOCK,		! address of HDR1(EOF1) label
	HDR2	    : REF BBLOCK,		! address of HDR2(EOF2) label
	HDR3	    : REF BBLOCK,		! address of HDR3 label
	IO_PACKET   : REF BBLOCK,		! address of IO request packet
	LOCAL_FIB   : BBLOCK;			! copy of user file info block

    BIND
	CVT4	  = DESCRIPTOR ( '!4XW' ),
	CVT5	  = DESCRIPTOR ( '!5ZW' ),
	DEFAULT	  = UPLIT ('00512'),
	DEF_HEX	  = UPLIT ('0200'),
	STARID	  = UPLIT ('DECFILE11A');

    GLOBAL
	NMBLOCK	    : BBLOCK [10];			! name block

    LOCAL
	DESCR	    : VECTOR [2],			! general descriptor
	MVL	    : REF BBLOCK,			! magtape volume list
	TODAY	    : VECTOR [12, BYTE];		! regular date string


    !++
    !
    ! first default the fields in HDR1, HDR2, and HDR3
    !
    !--
    CH$FILL(' ', 240, .HDR1);
    HDR1[HD1$L_HD1LID] = 'HDR1';
    MVL = .CURRENT_VCB[VCB$L_MVL];
    CH$MOVE(HD1$S_FILESETID, MVL[MVL$T_SET_ID], HDR1[HD1$T_FILESETID]);
    CH$FILL('0', HD1$S_BLOCKCNT, HDR1[HD1$T_BLOCKCNT]);
    CH$MOVE(10, STARID, HDR1[HD1$T_SYSCODE]);

    ! default expiration and creation date
    !
    DESCR[0] = 12;
    DESCR[1] = TODAY;
    SYS$ASCTIM(0, DESCR, 0, 0);		    ! get today's date in dd-mmm-yyyy
    CONVDATE_R2J(TODAY, HDR1[HD1$T_CREATEDT]);
    CH$MOVE(HD1$S_CREATEDT, HDR1[HD1$T_CREATEDT], HDR1[HD1$T_EXPIREDT]);

    !++
    !
    ! format HDR2 defaults
    !
    !--
    HDR2[HD2$L_HD2LID] = 'HDR2';
    HDR2[HD2$B_RECFORMAT] = 'F';
    DESCR[0] = HD2$S_BLOCKLEN;
    DESCR[1] = HDR2[HD2$T_BLOCKLEN];

    ! fill in the blocksize
    !
    IF NOT $FAO(CVT5, 0, DESCR, .CURRENT_UCB[UCB$W_DEVBUFSIZ])
    THEN CH$MOVE(HD2$S_BLOCKLEN, DEFAULT, HDR2[HD2$T_BLOCKLEN]);

    ! default the the record size to be the blocksize
    !
    CH$MOVE(HD2$S_RECLEN, HDR2[HD2$T_BLOCKLEN], HDR2[HD2$T_RECLEN]);

    ! use the record size if it exists
    !
    IF .CURRENT_VCB[VCB$W_RECORDSZ] NEQ 0
    THEN
	BEGIN
	DESCR[0] = HD2$S_RECLEN;
	DESCR[1] = HDR2[HD2$T_RECLEN];

	IF NOT $FAO(CVT5, 0, DESCR, .CURRENT_VCB[VCB$W_RECORDSZ])
	THEN
	    CH$MOVE(HD2$S_RECLEN, HDR2[HD2$T_BLOCKLEN], HDR2[HD2$T_RECLEN]);
	END;

    HDR2[HD2$T_BUFOFF] = '00';

    !++
    !
    ! default HDR3 ( sequencial files, fixed lenght block size )
    !
    !--
    HDR3[HD3$L_HD3LID] = 'HDR3';
    CH$FILL('0', HD3$S_RECATR, HDR3[HD3$T_RECATR]);
    (HDR3[HD3$T_RECATR] + 4)<0, 32> = '0201';


    !++
    !
    ! fill in the RMS default record size 
    !	if record size on mount then use it
    !	else if blocks size the use it
    !	else default
    !
    !--
    DESCR[0] = 4;
    DESCR[1] = HDR3[HD3$T_RECATR];
    IF .CURRENT_VCB[VCB$W_RECORDSZ] NEQ 0
    THEN
	BEGIN
	IF NOT $FAO( CVT4, 0, DESCR, .CURRENT_VCB[VCB$W_RECORDSZ] )
	THEN
	    BEGIN
	    IF NOT $FAO( CVT4, 0, DESCR, .CURRENT_UCB[UCB$W_DEVBUFSIZ] )
	    THEN CH$MOVE ( 4, DEF_HEX, HDR3[HD3$T_RECATR] );
	    END;
	END
    ELSE
	BEGIN
	IF NOT $FAO( CVT4, 0, DESCR, .CURRENT_UCB[UCB$W_DEVBUFSIZ] )
	THEN CH$MOVE ( 4, DEF_HEX, HDR3[HD3$T_RECATR] );
	END;


    ! pickup user supplied attributes
    !
    CH$FILL ( 0, 10, NMBLOCK );
    WRITE_ATTRIBUTE ();

    !+
    !
    ! set up the file specification
    !
    !-
    FORMAT_FILE_NAME;

    END;					! end of routine FORMAT_HDRS

END

ELUDOM
