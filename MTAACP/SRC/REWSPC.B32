
MODULE REWSPC (LANGUAGE (BLISS32) ,
		IDENT = 'V03-000'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  MTAACP
!
! ABSTRACT:
!
!	This module rewinds a file and spaces within a file
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines.
!
!--


! AUTHOR:  D. H. GILLESPIE,	 CREATION DATE:  6-AUG-1977
!
! MODIFIED BY:
!
!	V02-004	REFORMAT	Maria del C. Nasr	30-Jun-1980
!
!**

LIBRARY 'SYS$LIBRARY:LIB.L32';

REQUIRE 'SRC$:MTADEF.B32';

FORWARD ROUTINE
    REWIND_FILE		: COMMON_CALL NOVALUE,	! main control for rewind file
    SPACE_IN_FILE	: COMMON_CALL NOVALUE,	! space within a file
    SETUP_AT_END	: COMMON_CALL NOVALUE,  ! setup at end of file after checking position
    SETUP_END		: COMMON_CALL NOVALUE,	! setup at end
    UPD_ST_RECORD	: COMMON_CALL NOVALUE;  ! update start record in current file section

EXTERNAL ROUTINE
    CLOSE_FILE		: L$CLOSE_FILE,		! close file
    FORMAT_FID		: COMMON_CALL,		! format file ID in current VCB
    GTNEXT_VOL_READ	: NOVALUE JSB,		! get next volume on read
    MOUNT_VOL,					! mount relative volume
    POSITION_BY_FID	: COMMON_CALL,		! position by FID
    READ_BLOCK		: COMMON_CALL,		! read data block
    RESTORE_ACCESS	: COMMON_CALL,		! restore original access to file
    SPACE		: COMMON_CALL,		! space blocks
    SPACE_TM		: COMMON_CALL,		! space tape marks
    SYS$QIOW		: ADDRESSING_MODE (ABSOLUTE);

EXTERNAL
    CURRENT_UCB	: REF BBLOCK,			! address of current UCB
    CURRENT_WCB	: REF BBLOCK,			! address of current window control block
    HDR1	: REF BBLOCK,			! address of HDR1 (EOF1) label
    HDR2	: REF BBLOCK,			! address of HDR2(EOF2) label
    LOCAL_FIB	: BBLOCK,			! copy of user's FIB
    IO_CHANNEL,
    IO_STATUS	: VECTOR [2],			! IO status
    USER_STATUS	: VECTOR [2];			! status returned to user

EXTERNAL LITERAL
    UCB$L_MT_RECORD;				! global displacement into UCB


GLOBAL ROUTINE REWIND_FILE : COMMON_CALL NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine rewinds to the beginning of the current file. if
!	the beginning is on another volume, that volume is mounted and
!	positioned to the beginning of the files data area.  Once at the
!	beginning the access to the file is reset to the original
!	requested access.
!
! CALLING SEQUENCE:
!	REWIND_FILE()
!
! INPUT PARAMETERS:
!	none
!
! IMPLICIT INPUTS:
!	CURRENT_VCB - address of current volume control block
!	CURRENT_WCB - address of current window control block
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	none
!
! SIDE EFFECTS:
!	file positioned to beginning
!	original access restore
!
! USER ERRORS:
!	SS$_FILNOTACC - file not accessed
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_REG;

    LOCAL
	FID,					! file identification
	SEQ,					! file section sequence number
	TM,					! tape marks
	VOL;					! relative volume number

    ! if file is not accessed give error
    !

    IF .CURRENT_WCB EQL 0
    THEN
	ERR_EXIT(SS$_FILNOTACC);

    ! if writing, then close out file
    !

    IF NOT .CURRENT_WCB[WCB$V_READ]
    THEN
	CLOSE_FILE();

    ! calculate which relative volume the beginning is on
    !
    SEQ = .CURRENT_VCB[VCB$W_CUR_SEQ];		! file section number

    IF .SEQ EQL 1
    THEN
	BEGIN				! currently in first file section

	IF .CURRENT_VCB[VCB$V_LOGICEOVS]
	THEN
	    SPACE_TM(-4)			! write case
	ELSE
	    BEGIN				! read case

	    ! number of tape marks into current file section
	    !
	    TM = .CURRENT_VCB[VCB$B_TM];

	    IF .TM EQL 0  AND  .HDR1[HD1$L_HD1LID] NEQ 'HDR1'
	    THEN
		TM = 3;

	    IF .TM GEQ 1
	    THEN

		! backspace to tape mark preceding start of data
		!
		SPACE_TM(-.TM);

	    END;

	SPACE_TM(1);				! pass over TM
	HDR1[HD1$L_HD1LID] = 'HDR1';

	IF HDR2[HD2$L_HD2LID] NEQ 0
	THEN
	    HDR2[HD2$L_HD2LID] = 'HDR2';

	END
    ELSE
	BEGIN

	! current file number and section
	!
	FID = .CURRENT_VCB[VCB$L_CUR_FID];
	FID<16, 16> = 1;			! want section one
	VOL = .CURRENT_VCB[VCB$B_CUR_RVN];	! current volume
	VOL = .VOL - .SEQ + 1;			! calculate volume wanted
	POSITION_BY_FID(.FID, .VOL);		! position to file section

	IF .CURRENT_VCB[VCB$B_TM] EQL 0
	THEN
	    SPACE_TM(1);

	END;

    KERNEL_CALL(RESTORE_ACCESS);	! restore original access to the file
    END;


ROUTINE SETUP_END (TM) : COMMON_CALL NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!	Setup at end of file
!
! CALLING SEQUENCE:
!	SETUP_END(ARG1)
!
! INPUT PARAMETERS:
!	ARG1 - number of tape marks to be spaced and direction
!
! IMPLICIT INPUTS:
!	CURRENT_UCB - address of current unit control block
!	HDR1 - address of 'HDR1' and 'EOF1' label
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	CURRENT_VCB[VCB$L_ST_RECORD]
!
! ROUTINE VALUE:
!	none
!
! SIDE EFFECTS:
!	none
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_REG;

    EXTERNAL ROUTINE
	LIB$CVT_DTB	: ADDRESSING_MODE (ABSOLUTE);

    LOCAL
	BLOCK;

    SPACE_TM(.TM);	! space to end of file, right before end date TM

    ! setup as if trailers had not been read
    !
    HDR1[HD1$L_HD1LID] = 'HDR1';

    IF HDR2[HD2$L_HD2LID] NEQ 0
    THEN
	HDR2[HD2$L_HD2LID] = 'HDR2';

    IF NOT LIB$CVT_DTB(EO1$S_BLOCKCNT, HDR1[EO1$T_BLOCKCNT], BLOCK)
    THEN
	ERR_EXIT(SS$_BLOCKCNTERR);

    BLOCK = .(.CURRENT_UCB + UCB$L_MT_RECORD)<0, 32> - .BLOCK;
    KERNEL_CALL(UPD_ST_RECORD, .BLOCK);
    END;

ROUTINE UPD_ST_RECORD (BLOCK) : COMMON_CALL NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine updates the start record count in the volume control block
!	and sets the TM count to 1 because now positioned before end data TM
!
! CALLING SEQUENCE:
!	UPD_ST_RECORD(ARG1)
!	called in kernel mode
!
! INPUT PARAMETERS:
!	ARG1 - new value of start record count
!
! IMPLICIT INPUTS:
!	CURRENT_VCB
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	CURRENT_VCB[VCB$L_ST_RECORD] = BLOCK
!
! ROUTINE VALUE:
!	none
!
! SIDE EFFECTS:
!	none
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_REG;

    CURRENT_VCB[VCB$B_TM] = 1;
    CURRENT_VCB[VCB$L_ST_RECORD] = .BLOCK;
    END;


GLOBAL ROUTINE SPACE_IN_FILE : COMMON_CALL NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine spaces forwards and backwards within a file
!
! CALLING SEQUENCE:
!	SPACE_IN_FILE()
!
! INPUT PARAMETERS:
!	none
!
! IMPLICIT INPUTS:
!	CURRENT_VCB - address of current volume control block
!	LOCAL_FIB - copy of user's file information block
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	none
!
! SIDE EFFECTS:
!	none
!
! USER ERRORS:
!	SS$_BEGOFFILE - beginning of file
!	SS$_ENDOFFILE - end of file
!	SS$_FILNOTACC - file not accessed
!	SS$_BADPARAM - can not space forward if writing
!	SS$_TAPEPOSLOST - tape position lost
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_REG;

    STACKLOCAL
	BLOCKS;			! number of blocks to space

    LOCAL
	TM;			! number of tape marks into file section

    ! file must be accessed
    !

    IF .CURRENT_WCB EQL 0
    THEN
	ERR_EXIT(SS$_FILNOTACC);

    BLOCKS = .LOCAL_FIB[FIB$L_CNTRLVAL];

    IF .BLOCKS GTR 0
    THEN 				! sign determines direction to space
	BEGIN				! beginning of forward space

	IF .BLOCKS<16, 16> NEQ 0
	THEN
	    ERR_EXIT(SS$_BADPARAM);

	! can not space forward if writing
	!

	IF NOT .CURRENT_WCB[WCB$V_READ]
	THEN
	    ERR_EXIT(SS$_BADPARAM);

	! position to data in current file section
	!

	IF  .CURRENT_VCB[VCB$B_TM] EQL 0
	    AND
	    .HDR1[HD1$L_HD1LID] EQL 'HDR1'
	THEN
	    SPACE_TM(1);

	IF .CURRENT_VCB[VCB$B_TM] NEQ 1
	THEN
	    BEGIN

	    IF .CURRENT_VCB[VCB$B_TM] EQL 2
	    THEN
		TM = -1
	    ELSE
		BEGIN

		IF .CURRENT_VCB[VCB$V_LOGICEOVS]
		THEN
		    TM = -3
		ELSE
		    TM = -2;
    		END;

	    SPACE_TM(.TM);
	    END;

	WHILE 1
	DO
	    BEGIN				! forward space loop

	    IF SPACE(.BLOCKS)
	    THEN
		EXITLOOP;

	    USER_STATUS<16, 16> = .USER_STATUS<16, 16> + .IO_STATUS<16, 16> - 1;
	    BLOCKS = .BLOCKS - .IO_STATUS<16, 16> + 1;	! TM counts

	    IF NOT READ_BLOCK(.HDR1, 80)
	    THEN
		ERR_EXIT(SS$_TAPEPOSLOST);

	    IF .HDR1[HD1$L_HD1LID] EQL 'EOF1'
	    THEN
		BEGIN
		SETUP_END(-1);
		KERNEL_CALL(RESTORE_ACCESS);
		ERR_EXIT(SS$_ENDOFFILE);
		END;

	    IF .HDR1[HD1$L_HD1LID] NEQ 'EOV1'
	    THEN
		ERR_EXIT(SS$_TAPEPOSLOST);

	    GTNEXT_VOL_READ();		! get next volume in volume set

	    IF .CURRENT_VCB[VCB$B_TM] EQL 0
	    THEN
		SPACE_TM(1);

	    END;

	END					! end of forward space loop
    ELSE
	BEGIN					! begin of backspace

	IF .BLOCKS NEQ 0
	THEN
	    BLOCKS = -(.BLOCKS);

	IF .BLOCKS<15, 17> NEQ 0
	THEN
	    ERR_EXIT(SS$_BADPARAM);

	! position to data if not there
	!

	IF NOT .CURRENT_WCB[WCB$V_READ]
	THEN
	    CLOSE_FILE();

	IF .CURRENT_VCB[VCB$V_LOGICEOVS]
	THEN
	    SETUP_END(-3)
	ELSE
	    BEGIN				! read case
	    TM = .CURRENT_VCB[VCB$B_TM];

	    IF .TM EQL 0  AND  .HDR1[HD1$L_HD1LID] EQL 'HDR1'
	    THEN
		BEGIN
		SPACE_TM(1);
		KERNEL_CALL(RESTORE_ACCESS);
		ERR_EXIT(SS$_BEGOFFILE);
		END;

	    IF .TM EQL 0
	    THEN
		TM = 3;

	    IF .TM GEQ 2
	    THEN
		SETUP_END(-(.TM - 1));

	    END;

	WHILE 1
	DO
	    BEGIN				! beginning of backspace loop

	    LOCAL
		FID,
		SEQ,
		VOL;

	    IF SPACE(-(.BLOCKS))
	    THEN
		EXITLOOP;

	    USER_STATUS<16, 16> = .USER_STATUS<16, 16> + .IO_STATUS<16, 16> - 1;

	    ! calc number remaining to space
	    !
	    BLOCKS = .BLOCKS - .IO_STATUS<16, 16> + 1;
	    FID = .CURRENT_VCB[VCB$L_CUR_FID];
	    SEQ = .CURRENT_VCB[VCB$W_CUR_SEQ];

	    IF .SEQ EQL 1
	    THEN 		! is tape positioned at beginning of file?

		BEGIN

		! space to beginning of data to avoid blocking virtual IO
		!
		SPACE_TM(1);
		KERNEL_CALL(RESTORE_ACCESS);
		ERR_EXIT(SS$_BEGOFFILE);
		END;

	    ! previous volume number
	    !
	    VOL = .CURRENT_VCB[VCB$B_CUR_RVN] - 1;
	    MOUNT_VOL(.VOL, $FIELDMASK(MOU$V_LBLCHECK));
	    BEGIN

	    LOCAL
		STATUS;

	    STATUS = SYS$QIOW(EFN, .IO_CHANNEL, IO$_SENSECHAR,
    		IO_STATUS, 0,0,0,0,0,0,0,0);

	    IF .STATUS	AND  .IO_STATUS EQL SS$_ENDOFTAPE
	    THEN
		BEGIN
		SPACE_TM(-3);
		SPACE_TM(1);
		SETUP_AT_END();
		KERNEL_CALL(FORMAT_FID, CURRENT_VCB[VCB$L_CUR_FID]);
		END
	    ELSE
		BEGIN
		FID<16, 16> = .SEQ - 1;
		POSITION_BY_FID(.FID, .VOL);
		TM = 2 - .CURRENT_VCB[VCB$B_TM];
		SPACE_TM(.TM);
		SETUP_AT_END();
		END;

    	    END;
	    END;			! end of while loop

	END;				! end of forward and backward space

    USER_STATUS<16, 16> = .USER_STATUS<16, 16> + .IO_STATUS<16, 16>;
    KERNEL_CALL(RESTORE_ACCESS);
    END;


ROUTINE SETUP_AT_END : COMMON_CALL NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine makes the current file section current
!	and positions at end of this file section's data
!
! CALLING SEQUENCE:
!	SETUP_AT_END()
!
! INPUT PARAMETERS:
!	none
!
! IMPLICIT INPUTS:
!	none
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	file section made current
!	start record of data section calculated
!
! ROUTINE VALUE:
!	none
!
! SIDE EFFECTS:
!	none
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_REG;

    IF NOT READ_BLOCK(.HDR1, 80)
    THEN
	ERR_EXIT(SS$_TAPEPOSLOST);

    IF .HDR1[EO1$L_EO1LID] NEQ 'EOV1'
    THEN
	ERR_EXIT(SS$_TAPEPOSLOST);

    SETUP_END(-1);
    END;
END

ELUDOM
