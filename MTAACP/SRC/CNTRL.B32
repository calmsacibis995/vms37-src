
MODULE CNTRL (LANGUAGE (BLISS32) ,
		MAIN = STARTUP,
		IDENT = 'V03-000'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  MTAACP
!
! ABSTRACT:
!	Main control module for MTAACP
!
! ENVIRONMENT:
!
!	Starlet operating system, including privileged system services
!	and internal exec routines.
!
!--

!
!
! AUTHOR:  D. H. GILLESPIE,	 CREATION DATE:  15-MAY-1977
!
! MODIFIED BY:
!
!	V02-009 DMW00054	David Michael Walp	30-Nov-1981
!		Fixed bug in exception handler which IO$M_REVERSE as
!		IO$M_ACCESS, causing system crash
!
!	V02-008	REFORMAT	Maria del C. Nasr	30-Jun-1980
!
!	A0007	MCN0003		Maria del C. Nasr	25-Sep-1979   16:32
!		Add HDR3 processing
!
!**

LIBRARY 'SYS$LIBRARY:LIB.L32';

REQUIRE 'SRC$:MTADEF.B32';

FORWARD ROUTINE
    CANCEL		: COMMON_CALL NOVALUE,		! signal cancel error
    EXCEPT_HNDLR	: COMMON_CALL NOVALUE,		! handles exceptions
    MTA_CONTROL		: NOVALUE NOPRES,		! main control
    RETURN_ALL_ERR	: COMMON_CALL NOVALUE;		! return all blocked io in error



GLOBAL ROUTINE STARTUP : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine is the startup point for MTAACP.  It locks the appropriate
!	parts of the MTAACP into memory and then calls the control loop in
!	EXEC mode.
!
! CALLING SEQUENCE:
!	STARTUP()
!
! INPUT PARAMETERS:
!	none
!
! IMPLICIT INPUTS:
!	none
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	none
!
! SIDE EFFECTS:
!	MTAACP locked into memory, control started
!
!--

    BEGIN
    EXEC_CALL(MTA_CONTROL)			! end of routine startup
    END;


ROUTINE MTA_CONTROL : NOVALUE NOPRES =

!++
!
! FUNCTIONAL DESCRIPTION:
!	Main control module for MTAACP
!
! CALLING SEQUENCE:
!	MTA_CONTROL()
!
! INPUT PARAMETERS:
!	none
!
! IMPLICIT INPUTS:
!	ACP QUEUE
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	none
!
! SIDE EFFECTS:
!	MTAACP functions executed
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_REG;

    GLOBAL

	! the following are not initialized for each request
	!
	QUEUE_HEAD	: REF BBLOCK,		! pter to MTAACP input queue
	DISK_UCB	: REF BBLOCK,		! UCB of SYS$DISK
	IO_CHANNEL,				! channel # for I/O
	MAIL_CHANNEL,				! channel # for mailbox
	FREE_PAGE_HEAD	: VECTOR [2],		! free page list head
	LAST_PAGE,	! last page of program region in virtual memory

	! the following are initialized for each request
	!
	USER_STATUS	: VECTOR [2],		! i/o status to user
	IO_STATUS	: VECTOR [2],		! status block used by mtaacp
	IO_PACKET	: REF BBLOCK,		! addr of i/o request packet
	CURRENT_UCB	: REF BBLOCK,		! addr of current ucb
	CURRENT_WCB	: REF BBLOCK,		! addr of current wcb
	HDR1		: REF BBLOCK,		! address hdr1 label(eof1)
	HDR2		: REF BBLOCK,		! address hdr2 label(eof2)
	HDR3		: REF BBLOCK,		! address hdr3 label
	LOCAL_FIB	: BBLOCK [FIB$K_MTALEN],	! copy of fib
	IMPURE_END	: VECTOR [0];

    GLOBAL LITERAL
	IMPURE_SIZE = IMPURE_END - USER_STATUS;

    LOCAL
	FUNCTION;				! function code and qualifiers

    OWN
	RANGE	: VECTOR [2] INITIAL (0, %X'FFFFFFFF');

    EXTERNAL ROUTINE
	END_OF_VOL	: NOPRES,		! end-of-volume processing
	GET_REQ		: L$GET_REQ,		! get next request
	INIT_MTAACP,				! acp initialization
	IO_DONE,				! complete i/o processing
	MTA_ACCESS	: NOPRES,		! access a file
	MTA_ACPCNTRL	: NOPRES,		! mtaacp control functions
	MTA_CREATE	: NOPRES,		! create a file
	MTA_DEACCESS	: NOPRES,		! deaccess a file
	MTA_MODIFY	: NOPRES,		! modify a file
	MTA_MOUNT	: NOPRES,		! mount a volume
	SYS$PURGWS	: ADDRESSING_MODE (ABSOLUTE);

    ! enable except_hndlr
    !
    BEGIN

    BUILTIN
	FP;

    .FP = EXCEPT_HNDLR;
    END;
    KERNEL_CALL(INIT_MTAACP);		! initialize acp, one time only
    SYS$PURGWS(RANGE);

    WHILE 1
    DO
	BEGIN

	! initialize impure area and set user status to success
	!
	CH$FILL(0, IMPURE_SIZE, USER_STATUS);
	USER_STATUS[0] = 1;
	IO_PACKET = GET_REQ();			! get a request
	FUNCTION = .IO_PACKET[IRP$V_FCODE];

	IF .CURRENT_VCB[VCB$V_CANCELIO] AND .FUNCTION NEQ IO$_DEACCESS
	THEN
	    CANCEL()
	ELSE

	    IF .FUNCTION EQL IO$_READPBLK OR .FUNCTION EQL IO$_WRITEPBLK
	    THEN
		END_OF_VOL()			! end of volume processing
	    ELSE
		BEGIN

		CASE .FUNCTION FROM IO$_ACCESS TO IO$_MOUNT OF
		    SET

		    [IO$_ACCESS] :	MTA_ACCESS();

		    [IO$_CREATE] :	MTA_CREATE();

		    [IO$_DEACCESS] :	MTA_DEACCESS();

		    [IO$_DELETE] :	(ERROR(SS$_ILLIOFUNC);0);

		    [IO$_MODIFY] :	MTA_MODIFY();

		    [IO$_ACPCONTROL] :	MTA_ACPCNTRL();

		    [IO$_MOUNT] :	MTA_MOUNT();

		    [INRANGE] :		(ERROR(SS$_ILLIOFUNC);0);

		    [OUTRANGE] :	(ERROR(SS$_ILLIOFUNC);0);
		    TES;

		END;

	IF .IO_PACKET NEQ 0
	THEN
	    KERNEL_CALL(IO_DONE, .IO_PACKET);

	END;					! end of while loop

    END;					! end of routine


GLOBAL ROUTINE EXCEPT_HNDLR (SIGNAL, MECHANISM) : COMMON_CALL NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine handles exceptions.  This code stores the condition value
!	(if given) in the user status block, unwinds the stack, completes
!	io and returns.
!
!
! CALLING SEQUENCE:
!	EXCEPT_HNLR(ARG1,ARG2)
!
! INPUT PARAMETERS:
!	ARG1 - address of signal array
!	ARG2 - address of mechanism array
!
! IMPLICIT INPUTS:
!	none
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	USER_STATUS - receives exception parameter
!
! ROUTINE VALUE:
!	none
!
! SIDE EFFECTS:
!	Stack is unwound to main level to continue processing requests.
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_REG;

    LOCAL
	FUNCTION	: BLOCK [1];		! io request function with modifiers

    MAP
	SIGNAL		: REF BBLOCK,		! signal array
	MECHANISM	: REF BBLOCK;		! mechanism array

    EXTERNAL
	CURRENT_WCB	: REF BBLOCK,		! address of current window
	IO_PACKET	: REF BBLOCK,		! address of current io request packet
	USER_STATUS	: WORD;			! status returned to user

    EXTERNAL ROUTINE
	SYS$UNWIND	: ADDRESSING_MODE (ABSOLUTE),	! unwind the stack
	TERMINATE_VOL	: COMMON_CALL,		! terminate activity on this volume
	ZERO_CHANNEL	: COMMON_CALL;		! clean up user channel

    ! Check the signal code. The only permissible ones are SS$_UNWIND which is
    ! ignored and SS$_CMODUSER.  The error status is the 16 bit CHMU code.  If
    ! the error value is non_zero, store it in the user status, complete the
    ! i/o, unwind the stack and return to the control module.  If the error
    ! value is zero the user status is not changed but the i/o is completed,
    ! the stack is unwound and the return is to the control module.
    !

    IF .SIGNAL[CHF$L_SIG_NAME] EQL SS$_UNWIND
    THEN
	RETURN;

    IF .SIGNAL[CHF$L_SIG_NAME] NEQ SS$_CMODUSER
    THEN
	BUG_CHECK(UNXSIGNAL);

    ! Get IO function and mask out the create bit, then if access modifier bit
    ! set on a valid "access type" function THEN clean user channel
    !
    FUNCTION = .IO_PACKET[IRP$W_FUNC] AND (NOT IO$M_CREATE);
    IF (.FUNCTION EQL (IO$_ACCESS OR IO$M_ACCESS))
    OR (.FUNCTION EQL (IO$_CREATE OR IO$M_ACCESS))
    THEN
	KERNEL_CALL(ZERO_CHANNEL, .IO_PACKET);

    ! error to be returned to user
    !
    IF .SIGNAL[CHF$L_SIG_ARG1] NEQ 0
    THEN
	USER_STATUS = .SIGNAL[CHF$L_SIG_ARG1];

    ! return all blocked io in error
    !
    IF NOT .CURRENT_VCB[VCB$V_WAIUSRLBL]
    THEN
	KERNEL_CALL(RETURN_ALL_ERR);

    ! if tape position lost, then force user to close open files and reposition
    ! at beginning of volume set
    !
    IF .SIGNAL[CHF$L_SIG_ARG1] EQL SS$_TAPEPOSLOST
    THEN
	KERNEL_CALL(TERMINATE_VOL, .CURRENT_VCB[VCB$L_WCB]);

    SYS$UNWIND(MECHANISM[CHF$L_MCH_DEPTH], 0);
    RETURN;

    END;


GLOBAL ROUTINE RETURN_ALL_ERR : COMMON_CALL NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine returns all blocked io with the error given in user_status
!
! CALLING SEQUENCE:
!	RETURN_ALL_ERROR, called in kernel mode
!
! INPUT PARAMETERS:
!	none
!
! IMPLICIT INPUTS:
!	CURRENT_VCB - address of current volume control block
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	none
!
! SIDE EFFECTS:
!	none
!
! USER ERRORS:
!	none
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_REG;

    EXTERNAL ROUTINE
	IO_DONE;				! complete io

    EXTERNAL
	USER_STATUS;				! status to be returned to user

    LOCAL
	STATUS,					! save status
	PACKET	: REF BBLOCK;

    STATUS = .USER_STATUS;			! save status
    USER_STATUS<16, 16> = 0;			! these io's have no transfer count

    WHILE 1
    DO
	BEGIN

	IF REMQUE(.CURRENT_VCB[VCB$L_BLOCKFL], PACKET)
	THEN
	    EXITLOOP;

	PACKET[IRP$V_VIRTUAL] = 0;		! make sure not seen again
	IO_DONE(.PACKET);
	END;

    USER_STATUS = .STATUS;			! restore status
    END;					! end of routine


ROUTINE CANCEL : COMMON_CALL NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine signals the cancel error.  The call is necessary so
!	that the unwind returns to the control module and not exit
!
! CALLING SEQUENCE:
!
! INPUT PARAMETERS:
!	none
!
! IMPLICIT INPUTS:
!	none
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	none
!
! SIDE EFFECTS:
!	none
!
! USER ERRORS:
!	none
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_REG;

    ERR_EXIT(SS$_CANCEL);
    END;
END

ELUDOM
