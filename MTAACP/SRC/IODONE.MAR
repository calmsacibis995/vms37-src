	.TITLE	IODONE - POST REQUEST DONE TO USER
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
;
; Facility:  f11acp structure level 1
;
; Abstract:
;
;	this routine posts i/o completion for the indicated fcp request.
;
; Environment:
;
;	starlet operating system, including privileged system services
;	and internal exec routines. this routine must be called in
;	kernel mode.
;
; Author:  andrew c. goldstein, Creation Date:  20-DEC-1976  11:25
;
; Modified By:
;
;	V02-003 DMW00049	David Michael Walp	 6-Nov-1981
;		Lawrence J. Kenah fix to posting I/O done hang.
;		Removed check for "que previously not empty" when making
;		software interrupt request.  The request is always made.
;
;	V02-002	REFORMAT	Keith B. Thompson	30-Jul-1980
;
;	A0101	DGH0002		D. H. Gillespie		15-NOV-1978  17:00
;		fix race condition between post io and check dismount
;--

;
; Equated Symbols:
;

	PACKET	=4			; address of i/o packet arg

	$ABDDEF				; define buffer packet offsets
	$DEVDEF				; define device characteristic bits
	$FIBDEF				; define fib offsets
	$IRPDEF				; define i/o packet offsets
	$UCBDEF				; define ucb offsets
	$VCBDEF				; define vcb offsets
	$IPLDEF				; define ipl symbols
	$PRDEF				; define priority levels
	$IODEF				; define i/o function codes


;++
;
;  IO$DONE	- this routine posts i/o completion for the indicated
;		  fcp request.
;
; Calling sequence:
;	call	iodone (arg1)
;
; Input Parameters:
;	arg1: address of i/o packet
;
; Implicit Inputs:
;	USER_STATUS: status of i/o request
;
; Output Parameters:
;	none
;
; Implicit Outputs:
;	IOC$GL_PSBL: tail of i/o post queue
;
; Routine Value:
;	none
;
; Side Effects:
;	i/o packet placed on i/o post queue
;	operation counted in ucb
;	volume checked for dismount
;
;--

	.PSECT	$CODE$,NOWRT,LONG

IO_DONE::
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8>	; save registers
	MOVL	PACKET(AP),R6			; get packet address
	MOVQ	W^USER_STATUS,IRP$L_MEDIA(R6)	; set status in packet
	MOVL	IRP$L_UCB(R6),R8		; get ucb address
	MOVL	UCB$L_VCB(R8),R4		; get vcb address
	INCL	UCB$L_OPCNT(R8)			; count completed operation
	EXTZV	#IRP$V_FCODE,#IRP$S_FCODE,-	; get function code without qualifiers
		IRP$W_FUNC(R6),R7
	CMPB	R7,#IO$_READPBLK		; if read physical
	BEQL	10$
	CMPB	R7,#IO$_WRITEPBLK		; or write do special processing
	BEQL	10$

;
; post processing for all acp functions: bump down the volume transaction
; count and do the fixups for the buffer packet.
;

	DECW	VCB$W_TRANS(R4)			; deduct this req from trans
						;  count
	BBC	#IRP$V_COMPLX,IRP$W_STS(R6),30$	; branch if no buffer packet
	MOVL	@IRP$L_SVAPTE(R6),R4		; get buffer descriptor address
	CLRW	<ABD$C_NAME*ABD$C_LENGTH>+ABD$W_COUNT(R4)	; inhibit write
								;  back of name
								; string
	MOVAB	<ABD$C_FIB*ABD$C_LENGTH>+ABD$W_TEXT(R4),R2
	MOVZWL	(R2),R3				; get offset address of fib in
						;  packet
	ADDL	R3,R2				; compute absolute address
	MOVC5	#FIB$C_LENGTH,W^LOCAL_FIB,#0,-	; copy local fib back into
		<ABD$C_FIB*ABD$C_LENGTH>+ABD$W_COUNT(R4),-	;  packet
		1(R2)
	BBSS	#IRP$V_FUNC,IRP$W_STS(R6),30$	; if read bit is set, keep
	MOVW	#ABD$C_ATTRIB,IRP$W_BCNT(R6)	; else dump attribute text
	BRB	30$

;
; for read/write physical, knock down the virtual bit in the packet. only
; errors come through here, and we don't want to see them again (i/o post
; recycles virtual i/o errors for acp error processing). we also restore
; the original svapte and byte count from where they were saved in the packet
; so that the pages can be unlocked.
;

10$:	BBCC	#IRP$V_VIRTUAL,-		; clear the virtual bit
		IRP$W_STS(R6),20$
20$:	MOVL	IRP$L_DIAGBUF(R6),-		; restore original page address
		IRP$L_SVAPTE(R6)
	MOVW	IRP$W_OBCNT(R6),IRP$W_BCNT(R6)	; and byte count for page unlock


30$:	INSQUE	(R6),@IOC$GL_PSBL		; insert packet into queue
	SOFTINT	#IPL$_IOPOST			; signal i/o post interrupt
	PUSHL	R8
	CALLS	#1,CHECK_DISMOUNT		; put check here to stop race
						;  with user deallocate
	RET



	.END
