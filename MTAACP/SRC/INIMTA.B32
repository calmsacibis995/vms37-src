
MODULE INIMTA (LANGUAGE (BLISS32) ,
		IDENT = 'V03-000'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  MTAACP
!
! ABSTRACT:
!	One time initialization for mtaACP
!
! ENVIRONMENT:
!
!	Starlet operating system, including privileged system services
!	and internal exec routines.
!
!--

!
!
! AUTHOR:  D. H. GILLESPIE,	 CREATION DATE:  25-MAY-77 15:00
!
! MODIFIED BY:
!
!	V02-005 DMW00076	David Michael Walp	 8-Feb-1982
!		Store away the ACP's usersname and account name
!
!	V02-004 DMW00013	David Michael Walp	14-Mar-1981
!		Changed calculation of CCB address to GET_CCB
!
!	V02-003	KDM0037		Kathleen D. Morse	12-Feb-1981
!		Change non-kernel mode references to SCH$GL_CURPCB to
!		use CTL$GL_PCB instead.
!
!	V02-002	REFORMAT	Maria del C. Nasr	30-Jun-1980
!
!**

LIBRARY 'SYS$LIBRARY:LIB.L32';

REQUIRE 'SRC$:MTADEF.B32';

! Dummy vectors to bracket the locked down code and data psects.
!

PSECT
    OWN = $LOCKEDC0$(NOWRITE, EXECUTE, ALIGN (9));

OWN
    L_CODE_START	: VECTOR [0];

PSECT
    OWN = $LOCKEDC9$(NOWRITE, EXECUTE, ALIGN (2));

OWN
    L_CODE_END		: VECTOR [0];

PSECT
    OWN = $LOCKEDD0$;

OWN
    L_DATA_START	: VECTOR [0];

PSECT
    OWN = $LOCKEDD9$;

OWN
    L_DATA_END		: VECTOR [0];

PSECT
    OWN = $LOCKEDD1$;


GLOBAL ROUTINE INIT_MTAACP : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!	One time initialization of mtaACP
!
! CALLING SEQUENCE:
!	INIT_MTAACP(), in kernel mode
!
! INPUT PARAMETERS:
!	none
!
! IMPLICIT INPUTS:
!	IO data base
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	IO_CHANNEL	: channel # for I/O
!	MAIL_CHANNEL	: channel # for mailbox
!	QUEUE_HEAD	: ACP queue list head
!	FREE_PAGE_HEAD	: initialized to be empty
!	LAST_PAGE	: 0 (not determined yet)
!
! ROUTINE VALUE:
!	none
!
! SIDE EFFECTS:
!	none
!
!--

    BEGIN

    EXTERNAL
	CTL$T_USERNAME	: ADDRESSING_MODE (ABSOLUTE),
	CTL$T_ACCOUNT	: ADDRESSING_MODE (ABSOLUTE);

    GLOBAL
	! store away the username and account name of the ACP
	! use the size of the Volume Virtual Page ( which has been checked
	! against the JIB definations
	!
	ACP_USERNAME : VECTOR [ VVP$S_USERNAME, BYTE ],
	ACP_ACCOUNT  : VECTOR [ VVP$S_ACCOUNT, BYTE ];

    LOCAL
	SYSEXV	: VECTOR [2],		! system exception handlers
	AQB	: REF BBLOCK,		! pointer to scan AQB list
	CCB	: REF BBLOCK;		! pointer to channel control block

    LITERAL
	MSGSIZE = 128,
	PROTECTION = %X'0000';

    EXTERNAL

	IO_CHANNEL	: REF BBLOCK,	! channel # for I/O
	DISK_UCB	: REF BBLOCK,	! UCB address of 'sys$disk'
	IOC$GL_AQBLIST	: REF BBLOCK ADDRESSING_MODE (ABSOLUTE),
	FREE_PAGE_HEAD	: VECTOR [2],	! address of two long words which are
					!  the free page list head
	LAST_PAGE,			! last page in program region
	MAIL_CHANNEL,			! channel # for mailbox
	QUEUE_HEAD	: REF BBLOCK,	! address of queue head
	CTL$GL_PCB	: REF BBLOCK ADDRESSING_MODE (ABSOLUTE);
					! address of current PCB
    EXTERNAL ROUTINE
	SYS$ASSIGN	: ADDRESSING_MODE (ABSOLUTE),	! assign device
	SYS$CREMBX	: ADDRESSING_MODE (ABSOLUTE),	! create a mailbox
	GET_CCB;			! get the address of the CCB

    ! disable the kernel exception vectors
    !
    $SETEXV(VECTOR = 0, ACMODE = EXEC_MODE, PRVHND = SYSEXV[0]);
    $SETEXV(VECTOR = 1, ACMODE = EXEC_MODE, PRVHND = SYSEXV[1]);

    ! ***** for debug:  if the previous handler addresses are found to be in
    ! process space, put them back since they belong to the debugger
    !

    IF .SYSEXV[0] GTR 0
    THEN
	$SETEXV(VECTOR = 0, ACMODE = EXEC_MODE, ADDRES = .SYSEXV[0]);

    IF .SYSEXV[1] GTR 0
    THEN
	$SETEXV(VECTOR = 1, ACMODE = EXEC_MODE, ADDRES = .SYSEXV[1]);

    ! Find the queue header for this ACP by searching the system AQB list
    ! for an AQB with a matching PID.  Then assign a channel to 'sys$disk' (as
    ! good a device as any) and record the channel number.  Said channel number
    ! is used for all I/O - it is assigned to the right device simply by
    ! stuffing the UCB pointer in the CCB.  Also save the UCB address in the
    ! channel so that it can be restored to properly deassign the channel when
    ! we exit.
    !
    AQB = .IOC$GL_AQBLIST;

    UNTIL .AQB EQL 0 OR	.AQB[AQB$L_ACPPID] EQL .CTL$GL_PCB[PCB$L_PID]
    DO
	AQB = .AQB[AQB$L_LINK];

    IF .AQB NEQ 0
    THEN
	QUEUE_HEAD = .AQB
    ELSE
	$EXIT(CODE = SS$_NOAQB);

    ! Now lock some code and data into the working set.  Some is necessary
    ! inorder to raise IPL.
    !
    $ADJWSL(PAGCNT = -10000);			! adjust working set to minimum
    $ADJWSL(PAGCNT = 64);			! then add desired size
    (

    LOCAL
	STATUS;

    STATUS = $LKWSET(INADR = UPLIT (L_CODE_START, L_CODE_END));

    IF NOT .STATUS
    THEN
	$EXIT(CODE = .STATUS));

    BEGIN

    LOCAL
	STATUS;

    STATUS = $LKWSET(INADR = UPLIT (L_DATA_START, L_DATA_END));

    IF NOT .STATUS
    THEN
	$EXIT(CODE = .STATUS);

    END;		

    MAIL_CHANNEL = 0;

    BEGIN

    LOCAL
	STATUS;

    STATUS = SYS$CREMBX(0, MAIL_CHANNEL, MSGSIZE, 0, PROTECTION, EXEC_MODE, 0);

    IF NOT .STATUS
    THEN
	$EXIT(CODE = .STATUS);

    END;	

    ! setup free page header
    !
    FREE_PAGE_HEAD[0] = FREE_PAGE_HEAD;
    FREE_PAGE_HEAD[1] = FREE_PAGE_HEAD;
    LAST_PAGE = 0;

    ! assign channel for I/O and create a mailbox to communicate with operator
    !
    IO_CHANNEL = 0;				! clear upper word

    IF NOT SYS$ASSIGN(DESCRIPTOR('SYS$SYSTEM'), IO_CHANNEL, EXEC_MODE, 0)
    THEN
	BUG_CHECK(NOACPCHAN);

    CCB = GET_CCB ( .IO_CHANNEL );
    DISK_UCB = .CCB[CCB$L_UCB];

    ! Clear the transition bit in the AQB to tell MOUNT that we are alive and
    ! well.
    !
    QUEUE_HEAD[AQB$V_CREATING] = 0;

    ! stuff away the ACP's account and username ( used to restore from after a
    !	     request is made to the operator )
    !
    CH$MOVE ( VVP$S_USERNAME, CTL$T_USERNAME, ACP_USERNAME );
    CH$MOVE ( VVP$S_ACCOUNT,  CTL$T_ACCOUNT,  ACP_ACCOUNT  );
    END;					! end of routine

END

ELUDOM
