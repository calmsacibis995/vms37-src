	.TITLE	LOCKDN - LOCK FCP INTO REAL MEMORY
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
;
; Facility:  F11ACP structure level 1
;
; Abstract:
;
;	This routine touches all of the pages in fcp to bring them
;	into real memory.
;
; Environment:
;
;	Starlet operating system, including privileged system services
;	and internal exec routine.
;
; Author:  Andrew C. Goldstein, Creation Date:  22-DEC-1976  14:46
;
; Modified By:
;
;	V02-002	REFORMAT	Maria del C. Nasr	23-Jul-1980
; 
;--

;
; Define labels for the start and end of the locked down areas
;

	.PSECT	$LOCKEDC0$,NOWRT,PAGE
LCODE_START:

	.PSECT	$LOCKEDC9$,NOWRT,LONG
LCODE_END:

	.PSECT	$LOCKEDD0$,NOEXE,LONG
LDATA_START:

	.PSECT	$LOCKEDD9$,NOEXE,LONG
LDATA_END:

	.PSECT	$LOCKEDD1$,NOEXE,LONG

;
; Own Storage:
;

WORKING_SET:
	.BLKL	1			; space to receive working set size
SET_SIZE::
	.LONG	64			; size to adjust working set to
LAST_PAGE:
	.BLKL	2			; space to receive last page pointers

;
; descriptors to lock down the code and data areas that are to be locked into
; the working set
;

	.PSECT	$CODE$,NOWRT,LONG

LOCKED_CODE:
	.LONG	LCODE_START,LCODE_END-1
LOCKED_DATA:
	.LONG	LDATA_START,LDATA_END-1


;++
;
; LOCKDN
;	LOCKDOWN
;
;	This routine touches all of the pages in fcp to bring them
;	into real memory.
;
; Calling sequence:
;	call lockdown ()
;	none
;
; Input Parameters:
;	none
;
; Implicit Inputs:
;	none
;
; Output Parameters:
;	none
;
; Implicit Outputs:
;	none
;
; Routine Value:
;	none
;
; Side Effects:
;	all of fcp residing in real memory
;
;--

LOCKDOWN::
	.WORD	^M<>

;
; adjust the working set size to a suitable value
;

	$ADJWSL_S	#0,W^WORKING_SET; read current size
	SUBL3	W^WORKING_SET,W^SET_SIZE,R0; compute increment
	$ADJWSL_S	R0,W^WORKING_SET; and set to desired size

;
; lock into the working set the code and data areas that should be.
;

	$LKWSET_S	LOCKED_CODE
	$LKWSET_S	LOCKED_DATA

;
; expand the program region by one page to get the address of the top.
; this page will never be touched and will therefore remain demand zero.
;

	$EXPREG_S	#1,LAST_PAGE,REGION=#0

;
; now touch all pages up to the one created.
;

	MOVAB	@#^X200,R0		; start with page 1
10$:	TSTL	(R0)			; touch it
	ACBL	LAST_PAGE,#^X200,R0,10$	; next page and loop
	RET



	.END
