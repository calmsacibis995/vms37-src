
MODULE RDATTR (LANGUAGE (BLISS32) ,
		IDENT = 'V03-000'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  MTAACP
!
! ABSTRACT:
!	This module reads attributes
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines.
!
!--

!
!
! AUTHOR:  D. H. GILLESPIE,	 CREATION DATE:	19-MAY-77 13:55
!
! MODIFIED BY:
!
!	V02-012 DMW00065	David Michael Walp	 8-Jan-1982
!		Added support for HDR1 access code
!
!	V02-011 DMW00051	David Michael Walp	10-Nov-1981
!		Added support for ANSI 17 "a" character name to be passed
!		back through ASCNAME attribute.
!
!	V02-010 DMW00048	David Michael Walp	 3-Nov-1981
!		added Journal ATTRIBUTE support
!
!	V02-009 DMW00045	David Michael Walp	28-Oct-1981
!		Reformat module into routines, and comment out old
!		dead code
!
!	V02-008 DMW00041	David Michael Walp	 2-Oct-1981
!		Handle zero Julian date, and added zero time
!
!	V02-007 DMW0003		David Michael Walp	11-Nov-1980
!		New BLISS compiler, FUNCTION declaration changed from
!		BBLOCK TO BLOCK.  Old compiler used to give a longword
!		with a declaration of "BBLOCK [1]".
!
!	V02-006	REFORMAT	Maria del C. Nasr	30-Jun-1980
!
!	A0005	MCN0006		Maria del C. Nasr	08-Nov-1979   19:10
!		Change size of file characteris attribute.
!
!	A0004	MCN0003		Maria del C. Nasr	16-Oct-1979   14:19
!		Add HDR3 processing
!
!	A0003	MCN0004		Maria del C. Nasr	15-Oct-1979   15:36
!		Changed to use new file header structur name
!
!**

LIBRARY 'SYS$LIBRARY:LIB.L32';

REQUIRE 'SRC$:MTADEF.B32';

FORWARD ROUTINE
    ANSI_FILE_NAME	: COMMON_CALL NOVALUE,	! return the full ANSI name
    CALCULATE_STATISTICS: COMMON_CALL NOVALUE,	! dummy up a stat block
    CONVERT_DATE	:	      NOVALUE,  ! converts Julian to binnary
    GET_BLOCK_SIZE	:	      NOVALUE,	! get the block size
    HANDLER		: COMMON_CALL NOVALUE,	! exception handler
    MOVE_DATA		: COMMON_CALL NOVALUE,	! move attribute date
    READ_ATTRIBUTE	: COMMON_CALL NOVALUE,	! read attributes
    SET_BCNT		: COMMON_CALL NOVALUE;  ! set # of valid buffer descr

EXTERNAL
    CURRENT_UCB		: REF BBLOCK,		! address of current UCB
    HDR1		: REF BBLOCK,		! address of HDR1(EOF1) label
    
IO_PACKET		: REF BBLOCK;		! address of current IRP

EXTERNAL ROUTINE
    FORMAT_F11HOD1	: COMMON_CALL,  	! format & write ODS1 header
    LIB$CVT_DTB		: ADDRESSING_MODE (ABSOLUTE);! convert decimal 2 binary

OWN
    CURRENT_ATTRIB;				! current attribute number


    ! work area for file header
    !
PSECT  GLOBAL = $DATA$;
GLOBAL DATA		: BLOCK [512, BYTE],
       ODS1_HEADER	: BLOCK [512, BYTE];

!++
!
! The Attribute Table is indexed by attribute number.  Each entry is a
! longword which contains a description of possible file attributes.
! The entries on the table are:  maximum attribute size, byte offset of
! attribute into structure, index of the action routine to process the
! attribute, and a description flag.
!
!--

    ! read attributes action routine encoding
    !
    LITERAL
	ATR_HDR		= 0,			! copy from header
	ATR_STAT	= 1,			! build statistics block
	ATR_BLSZ	= 2,			! block size
	ATR_USERLBL	= 3,			! user labels
	ATR_NOP		= 4,			! ignore attribute
	ATR_ENDLBLAST	= 5,			! end of file user labels
	ATR_ZERO	= 6,			! zero valued attribute
	ATR_BINDATE	= 7,			! date and time
	ATR_UIC		= 8,			! owner uic
	ATR_ANSI_NAME	= 9,			! ANSI name in ASCII Name Attr
	ATR_HDR1_ACC	= 10;			! HDR1 access character

    ! check that number of attributes has not changed
    !
    ASSUME ( 30, ATR$C_MAX_CODE );

    ! the table and its values
    !
    GLOBAL	ATR_TABLE  : BLOCKVECTOR [ ATR$C_MAX_CODE, 1 ] INITIAL ( BYTE (

	5,		 $BYTEOFFSET(FH1$W_FILEOWNER),	ATR_HDR,       0,
	3,		 $BYTEOFFSET(FH1$W_FILEPROT),	ATR_HDR,       0,
	ATR$S_UCHAR,	 $BYTEOFFSET(FH1$W_FILECHAR),	ATR_HDR,       0,
	ATR$S_RECATTR,	 $BYTEOFFSET(FH1$W_RECATTR),	ATR_HDR,       0,
	ATR$S_FILNAM
	 +ATR$S_FILTYP
	 +ATR$C_FILVER,  $BYTEOFFSET(FI1$W_FILENAME)
			  +FH1$K_LENGTH,		ATR_HDR,       0,
	ATR$S_FILTYP
	 +ATR$S_FILVER, $BYTEOFFSET(FI1$W_FILETYPE)
			  +FH1$K_LENGTH,		ATR_HDR,       0,
	ATR$S_FILVER,	 $BYTEOFFSET(FI1$W_VERSION)
			  +FH1$K_LENGTH,		ATR_HDR,       0,
	ATR$S_EXPDAT,	 $BYTEOFFSET(FI1$T_EXPDATE)
			  +FH1$K_LENGTH,		ATR_HDR,       1,
	ATR$S_STATBLK,	 0,				ATR_STAT,      0,

	! the real size is 512 but it will not fit in a byte, so..
	!  there are hacks to test if size is zero and uses 512 when
	!  doing checks for attribute length
	!
	0,		 0,				ATR_HDR,       0,
	ATR$S_BLOCKSIZE, 0,				ATR_BLSZ,      1,
	ATR$S_USERLABEL, 0,				ATR_USERLBL,   0,
	ATR$S_ASCDATES,  $BYTEOFFSET(FI1$W_REVISION)
			  +FH1$K_LENGTH,		ATR_HDR,       0,
	ATR$S_ALCONTROL, 0,				ATR_NOP,       0,
	ATR$S_ENDLBLAST, 0,				ATR_ENDLBLAST, 1,
	ATR$S_ASCNAME,	 0,				ATR_ANSI_NAME, 0,
	ATR$S_CREDATE,	 0,				ATR_BINDATE,   1,
	ATR$S_REVDATE,	 0,				ATR_ZERO,      0,
	ATR$S_EXPDATE,	 0,				ATR_BINDATE,   1,
	ATR$S_BAKDATE,	 0,				ATR_ZERO,      0,
	ATR$S_UIC,	 0,				ATR_UIC,       0,
	ATR$S_FPRO,	 $BYTEOFFSET(FH1$W_FILEPROT)
			  +FH1$K_LENGTH,		ATR_HDR,       0,
	ATR$S_RPRO,	 0,				ATR_ZERO,      0,
	ATR$S_ACLEVEL,	 0,				ATR_ZERO,      0,
	ATR$S_SEMASK,	 0,				ATR_ZERO,      0,
	ATR$S_UIC_RO,	 0,				ATR_UIC,       0,
	ATR$S_DIRSEQ,	 0,				ATR_NOP,       0,
	ATR$S_BACKLINK,	 0,				ATR_NOP,       0,
	ATR$S_JOURNAL,	 0,				ATR_NOP,       0,
	ATR$S_HDR1_ACC,	 0,				ATR_HDR1_ACC,  1 ));

GLOBAL ROUTINE READ_ATTRIBUTE (ABD) : COMMON_CALL NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine reads attributes
!
! CALLING SEQUENCE:
!	READ_ATTRIBUTE(ARG1)
!
! INPUT PARAMETERS:
!	ARG1 - address of buffer descriptors
!
! IMPLICIT INPUTS:
!	none
!
! OUTPUT PARAMETERS:
!	ARG1 - address of buffer descriptors
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	none
!
! SIDE EFFECTS:
!	Attribute data written into buffer packet, write-back enabled
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_REG;

    LOCAL
	CODE,					! current attribute code
	COUNT,					! length of attribute buffer
	P,					! address of current attribute
	VALID_HEADER	: BITVECTOR [ 1 ];	! has the ODS header created

    MAP	ABD		: REF BBLOCKVECTOR [, ABD$C_LENGTH];
						! addr of buffer desc

    ! attribute table layout
    !
    MACRO   MAX  = 0,0,8,0%;			! maximum size of attribute
    MACRO   DISP = 0,8,8,0%;			! displacement into file header
    MACRO   ATR  = 0,16,8,0%;			! attribute type

    BUILTIN FP;


    ! initialize header variables
    !
    VALID_HEADER [0] = FALSE;

    .FP = HANDLER;

    ! scan through buffer attribute descriptors filling them in one at a time
    !
    INCRU I FROM ABD$C_ATTRIB TO .IO_PACKET[IRP$W_BCNT] - 1 DO
	BEGIN
	CURRENT_ATTRIB = .I;			! for use by exception handler
	P	       = .ABD [ .I, ABD$W_TEXT ] + ABD [ .I, ABD$W_TEXT ];
	COUNT	       = .ABD [ .I, ABD$W_COUNT ];
	CODE	       = .(.P)<0, 8> - 1;

	! if an error is found, set the descriptor count equal to the one
	! that is in error this also inhibits the return of unprocessed
	! descriptors.
	!
	! check attribute code to see if its in range
	!
	IF .CODE GTRU ATR$C_MAX_CODE - 1 THEN ERR_EXIT(SS$_BADATTRIB);

	! check the size against limit
	!
	BEGIN
	LOCAL MAX_SIZE;
	MAX_SIZE = .ATR_TABLE[.CODE, MAX];
	IF .MAX_SIZE EQL 0 THEN MAX_SIZE = 512;
	IF .COUNT GTRU .MAX_SIZE THEN ERR_EXIT(SS$_BADATTRIB);
    	END;

	! now call subroutine to format attribute
	!
	CASE .ATR_TABLE [ .CODE, ATR ] FROM ATR_HDR TO ATR_HDR1_ACC OF
	    SET
	    [ATR_HDR]	    : IF NOT .VALID_HEADER [0]
			      THEN
				  BEGIN
				  FORMAT_F11HOD1 (ODS1_HEADER);
				  VALID_HEADER [0] = TRUE;
				  END;
	    [ATR_STAT]	    : CALCULATE_STATISTICS ();
	    [ATR_BLSZ]	    : GET_BLOCK_SIZE ();
	    [ATR_USERLBL]   : ERR_EXIT(SS$_BADATTRIB);
	    [ATR_NOP]	    : COUNT = 0;
	    [ATR_ENDLBLAST] : ERR_EXIT(SS$_BADATTRIB);
	    [ATR_ZERO]	    : CH$FILL(0, .COUNT, DATA);
	    [ATR_BINDATE]   : CONVERT_DATE (.CODE);
	    [ATR_UIC]	    : DATA = .CURRENT_UCB[UCB$L_OWNUIC];
	    [ATR_ANSI_NAME] : ANSI_FILE_NAME ( COUNT );
	    [ATR_HDR1_ACC]  : DATA [ 0, 0, 8, 0 ] = .HDR1 [ HD1$B_FILACCESS ];
	    TES;

	IF .ATR_TABLE [ .CODE, ATR ] EQL ATR_HDR
	THEN KERNEL_CALL(MOVE_DATA, 
		.COUNT, ODS1_HEADER + .ATR_TABLE [ .CODE, DISP ], .P, .ABD, .I)
	ELSE KERNEL_CALL(MOVE_DATA,
		.COUNT, DATA + .ATR_TABLE [ .CODE, DISP ], .P, .ABD, .I);
	END;

    END;


ROUTINE MOVE_DATA (COUNT, SOURCE, DESTINATION, ABD, I) : COMMON_CALL NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!	Write back of attribute enabled and attribute written into buffer packet
!
! CALLING SEQUENCE:
!	MOVE_DATA(ARG1,ARG2,ARG3,ARG4,ARG5), called in kernel mode
!
! INPUT PARAMETERS:
!	ARG1 - number of characters to move
!	ARG2 - source address
!	ARG3 - destination address
!	ARG4 - address of buffer descriptors
!	ARG5 - number of current buffer descriptor
!
! IMPLICIT INPUTS:
!	none
!
! OUTPUT PARAMETERS:
!	ARG3 - destination address
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	none
!
! SIDE EFFECTS:
!	none
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_REG;

    MAP
	ABD	: REF BBLOCKVECTOR [, ABD$C_LENGTH];	! address of buffer descriptors

    ! set the buffered read bit in the I/O packet to indicate to IO_DONE that
    ! the attribute buffers are valid
    !
    IO_PACKET[IRP$V_FUNC] = 1;

    ! restore access mode of user
    !
    (.DESTINATION)<0, 8> = .IO_PACKET[IRP$B_RMOD];

    ! return actual size of attribute to user
    !
    ABD[.I, ABD$W_COUNT] = .COUNT;

    ! move attribute to buffer in system space
    !
    CH$MOVE(.COUNT, .SOURCE, .DESTINATION + 1);
    END;

ROUTINE CALCULATE_STATISTICS : COMMON_CALL NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!	calculate the statistics block
!
! CALLING SEQUENCE:
!	CALCULATE_STATISTICS
!
! INPUT PARAMETERS:
!	none
!
! IMPLICIT INPUTS:
!	DATA
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	DATA get fill in
!
! ROUTINE VALUE:
!	none
!
! SIDE EFFECTS:
!	none
!
! USER ERRORS:
!	none
!
!--

    BEGIN

    EXTERNAL ROUTINE
	GTNEXT_VOL_READ	: JSB,			! mount next volume for read
	READ_BLOCK	: COMMON_CALL,		! read MT data block
	SPACE_TM	: COMMON_CALL;		! space TM

    EXTERNAL REGISTER
	COMMON_REG;

    ! layout of statistics block
    !
    MACRO   LBN	     = 0,0,32,0%;
    MACRO   BLOCKCNT = 4,0,32,0%;
    MACRO   ACCCNT   = 8,0,8,0%;
    MACRO   LCKCNT   = 9,0,8,0%;

    EXTERNAL CURRENT_WCB    : REF BBLOCK;	! address of current WCB

    LOCAL    FUNCTION	    : BLOCK [1];

    FUNCTION = .IO_PACKET[IRP$W_FUNC];

    !	If a window exists then the file has been accessed in which
    !	case do not bother to get block count.  Also do not return
    !	block count if file will be accessed.
    !
    IF .CURRENT_WCB NEQ 0  OR  .FUNCTION[IO$V_ACCESS]
    THEN
	BEGIN
	DATA[LBN]      = 0;
	DATA[BLOCKCNT] = 0;
	DATA[ACCCNT]   = 1;
	DATA[LCKCNT]   = 1;
	END

    ELSE
	! if partially created file then all statistics are zeroed
	!
	IF .CURRENT_VCB[VCB$V_PARTFILE]
	THEN
	    CH$FILL(0, 10, DATA)

	ELSE
	    ! now if not accessed calculate block count
	    !
	    BEGIN

	    ! accumulative block total  This must be on the stack so it is 
	    ! saved when a block is done on multi-volume files
	    !
	    STACKLOCAL	ACCBLCNT;

	    LOCAL BLCNT;

	    ACCBLCNT = 0;

	    WHILE 1
	    DO
		BEGIN

		! read trailers
		!
		SPACE_TM(2 - .CURRENT_VCB[VCB$B_TM]);
		IF NOT READ_BLOCK(.HDR1, 80) THEN ERR_EXIT(SS$_TAPEPOSLOST);
		LIB$CVT_DTB(EO1$S_BLOCKCNT, HDR1[EO1$T_BLOCKCNT], BLCNT);
		ACCBLCNT = .ACCBLCNT + .BLCNT;
		IF .HDR1[EO1$L_EO1LID] EQL 'EOF1' THEN EXITLOOP;
		GTNEXT_VOL_READ();
		END;

	    DATA[LBN]	   = 0;
	    DATA[BLOCKCNT] = ROT(.ACCBLCNT, 16);
	    DATA[ACCCNT]   = 0;
	    DATA[LCKCNT]   = 0;
	    END;

    END;			! end of routine

ROUTINE GET_BLOCK_SIZE : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!	get block size from HDR2 if availible else return 512
!
! CALLING SEQUENCE:
!	GET_BLOCK_SIZE
!
! INPUT PARAMETERS:
!	none
!
! IMPLICIT INPUTS:
!	DATA
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	DATA get fill in
!
! ROUTINE VALUE:
!	none
!
! SIDE EFFECTS:
!	none
!
! USER ERRORS:
!	none
!
!--

    BEGIN

    EXTERNAL HDR2 : REF BBLOCK;		! address of HDR2(EOF2) label

    LOCAL RESULT;

    IF NOT LIB$CVT_DTB(HD2$S_BLOCKLEN, HDR2[HD2$T_BLOCKLEN], RESULT)
    THEN RESULT = 512;

    DATA<0, 16> = .RESULT<0, 16>;
    END;

ROUTINE CONVERT_DATE ( CODE ) : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!	convert the date from ANSI Julian to 64 bit binary
!
! CALLING SEQUENCE:
!	CONVERT_DATE
!
! INPUT PARAMETERS:
!	CODE - the attribute code
!
! IMPLICIT INPUTS:
!	DATA
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	DATA get fill in
!
! ROUTINE VALUE:
!	none
!
! SIDE EFFECTS:
!	none
!
! USER ERRORS:
!	none
!
!--


    BEGIN

    LOCAL
	ADDR	: REF BBLOCK;

    EXTERNAL ROUTINE
	CONVDATE_J2R,				! convert Julian to reg date
	SYS$BINTIM : ADDRESSING_MODE (ABSOLUTE);! ASCII to 64 bit time

    IF (.CODE + 1) EQLU ATR$C_CREDATE
    THEN ADDR = HDR1[HD1$T_CREATEDT]
    ELSE ADDR = HDR1[HD1$T_EXPIREDT];

    IF CONVDATE_J2R(DATA + 8, .ADDR)
    THEN
	BEGIN

	! append a zero time to the date string
	! set up a descriptor to the date string
	! and convert to 64 bit number
	!
	BIND NO_TIME = UPLIT BYTE ( ' 00:00:00.00' );

	CH$MOVE ( 12, NO_TIME, DATA + 19 );
	(DATA + 32) = 23;
	(DATA + 36) = DATA + 8;
	SYS$BINTIM(DATA + 32, DATA);
	END

    ELSE

	! date was bad or no date, return binary zero
	!
	CH$FILL ( 0, 8, DATA );
    END;				! end of routine

ROUTINE ANSI_FILE_NAME ( COUNT ) : COMMON_CALL NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!	return the the ANSI file name from HDR1 in the ASCII name attribute
!
! CALLING SEQUENCE:
!	ANSI_FILE_NAME
!
! INPUT PARAMETERS:
!	count - the size of the users buffer
!
! IMPLICIT INPUTS:
!	DATA
!
! OUTPUT PARAMETERS:
!	count - the size of the users buffer minus trailing spaces
!
! IMPLICIT OUTPUTS:
!	the name gets filled into DATA
!
! ROUTINE VALUE:
!	none
!
! SIDE EFFECTS:
!	none
!
! USER ERRORS:
!	SS$_BADATTRIB - if the buffer is to small
!
!--

    BEGIN

    ! point to the file identifier field in the header label
    !
    BIND HDR1_FILE_ID 	= HDR1 [ HD1$T_FILEID ];

    ! make things look nice
    !
    MAP
	COUNT 		: REF VECTOR [ 1, LONG ],	 ! pointer to long word
	HDR1_FILE_ID	: VECTOR [ HD1$S_FILEID, BYTE ]; ! vector of characters

    LOCAL STRIPED_SIZE  : LONG INITIAL ( 0 );		! file id size minus
    	  		       	       	   		! trailing spaces

    ! find the size of the File Id minus trailing spaces
    !
    DECR I FROM (HD1$S_FILEID - 1) TO 0 DO
	IF .HDR1_FILE_ID [ .I ] NEQ ' '
	THEN
	    BEGIN
	    STRIPED_SIZE = .I + 1;
	    EXITLOOP
	    END;

    ! if the file id is to large for buffer return error
    !
    IF .STRIPED_SIZE GTRU .COUNT [ 0 ] THEN ERR_EXIT ( SS$_BADATTRIB );
    
    ! copy the id to the return buffer padd with spaces
    !
    CH$COPY ( HD1$S_FILEID, HDR1_FILE_ID, ' ', .COUNT [ 0 ], DATA );

    ! return the actual size of the file id
    !
    COUNT = .STRIPED_SIZE;

    END;

ROUTINE HANDLER : COMMON_CALL NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine does clean-up on attribute error
!
! CALLING SEQUENCE:
!	HANDLER()
!
! INPUT PARAMETERS:
!	none
!
! IMPLICIT INPUTS:
!	CURRENT_ATTRIB - address of descriptor number for current attribute
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	none
!
! SIDE EFFECTS:
!	none
!
! USER ERRORS:
!	none
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_REG;

    KERNEL_CALL(SET_BCNT, .CURRENT_ATTRIB);
    END;

ROUTINE SET_BCNT (NUMBER) : COMMON_CALL NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine sets the buffer count to the number of valid buffer descriptors
!
! CALLING SEQUENCE:
!	SET_BCNT(ARG1), called in kernel mode
!
! INPUT PARAMETERS:
!	The number of valid buffer descriptor
!
! IMPLICIT INPUTS:
!	IO_PACKET - address of current IO request packet
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	none
!
! SIDE EFFECTS:
!	none
!
! USER ERRORS:
!	none
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_REG;

    IO_PACKET[IRP$W_BCNT] = .NUMBER;
    END;


!++++
!GLOBAL ROUTINE COMPLETE_USRLBL (AST_BLOCK, NUMBER) : COMMON_CALL NOVALUE =
!
!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine releases the current AST block, stores the users next AST
!	control block and completes the current IO request
!
! CALLING SEQUENCE:
!	COMPLETE_USRLBL(ARG1,ARG2), called in kernel mode
!
! INPUT PARAMETERS:
!	ARG1 - address of user supplied AST control block
!	ARG2 - number of descriptor for current attribute
!
! IMPLICIT INPUTS:
!	none
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	none
!
! SIDE EFFECTS:
!	none
!
! USER ERRORS:
!	none
!
!--
!
!    BEGIN
!
!    EXTERNAL REGISTER
!	COMMON_REG;
!
!    LOCAL
!	PCB	: REF BBLOCK;
!
!    IF .CURRENT_VCB[VCB$L_USRLBLAST] NEQ 0
!    THEN
!    	! if one currently recorded
!    	!
!	BEGIN
!	DEALLOCATE(.CURRENT_VCB[VCB$L_USRLBLAST]);	! deallocate memory
!
!	! inc user AST quota
!	!
!	PCB = .SCH$GL_PCBVEC[.(IO_PACKET[IRP$L_PID])<0, 16>];
!	PCB[PCB$W_ASTCNT] = .PCB[PCB$W_ASTCNT] + 1;
!	END;
!
!    CURRENT_VCB[VCB$L_USRLBLAST] = .AST_BLOCK;
!
!    IF .CURRENT_VCB[VCB$V_WAIUSRLBL]
!    THEN
!	BEGIN
!	IO_DONE(.IO_PACKET);
!	IO_PACKET = 0;			! note packet already returned to user
!	END;
!
!    END;
!----

!+		LOCAL
!		    AST_BLOCK : REF BBLOCK,
!		    MODE,
!		    LENGTH;
!
!		AST_BLOCK = .(.P+1);		! pickup attribute following attr code
!
!		! if AST address given then it must be a valid AST type control block
!		!
!		BEGIN
!		BUILTIN
!		    PROBER;
!		MODE = 0;
!		LENGTH = 4;
!		IF  .AST_BLOCK NEQ 0				! check for no AST block given
!		    AND
!		    (NOT PROBER(MODE,LENGTH,.AST_BLOCK)		! check valid address
!		        OR
!		    .AST_BLOCK[ACB$B_TYPE] NEQ DYN$C_ACB)	! check AST block type
!		THEN
!		    ERR_EXIT(SS$_ILLLBLAST);
!		END;
!		KERNEL_CALL(COMPLETE_USRLBL,.AST_BLOCK,.I);
!		IF .CURRENT_VCB[VCB$V_WAIUSRLBL]
!		THEN
!		    UNBLOCK(.CURRENT_VCB);
!-

!+		LOCAL
!		    STRATCH : REF BBLOCK;
!
!		! if not reading or not waiting for user label read or not EOF then error
!		!
!		IF  NOT .CURRENT_WCB[WCB$V_READ]
!		    OR
!		    (NOT .CURRENT_VCB[VCB$V_WAIUSRLBL]
!		    AND
!		    NOT (.HDR1[EO1$L_EO1LID] EQL 'EOF1'
!			AND
!			.CURRENT_VCB[VCB$B_TM] EQL 2))
!		THEN
!		    ERR_EXIT(SS$_ILLUSRLBLRD);
!
!		! check if label set terminator has been encountered already
!		!
!		IF (.(.HDR1)<0,16> EQL 'HD'  AND .CURRENT_VCB[VCB$B_TM] EQL 1)
!		   OR (.(.HDR1)<0,16> EQL 'EO' AND .CURRENT_VCB[VCB$B_TM] EQL 0)
!		THEN
!		    BEGIN
!		    ERROR(SS$_ENDOFUSRLBL);	! no more user labels in the set
!		    COUNT = 0;
!		    END
!		ELSE
!		    BEGIN
!		    LOCAL
!		        ID,
!		        SCRATCH : REF BBLOCK;
!		    IF .(.HDR1)<0,16> EQL 'HD'
!		    THEN
!			ID = 'UHL' 	! note which set of labels
!		    ELSE
!			ID = 'UTL';	! are to be read
!
!		    ! one label may be in the scratch label area if the was no HDR2
!		    !
!		    SCRATCH = .HDR1 + 240;	! address of scratch label
!		    IF .(.SCRATCH)<0,24> EQL .ID<0,24>
!		    THEN
!			! was one read already?
!			!
!			BEGIN
!			CH$MOVE(.SCRATCH,DATA,.COUNT);
!			.SCRATCH = 0;	! retreive this one only once
!			END
!		    ELSE
!		        BEGIN		! no user label previously read or reported
!			WHILE 1 DO
!			    BEGIN
!			    IF NOT READ_BLOCK(DATA,.COUNT)
!			    THEN
!			        BEGIN
!				ERROR(SS$_ENDOFUSRLBL);
!				COUNT = 0;
!				EXITLOOP;
!				END;
!
!			    ! retrieve only valid user labels
!			    !
!			    IF .DATA<0,24> EQL .ID<0,24>
!			    THEN
!				EXITLOOP;
!			    END;		! end of read user label loop
!		        IF .IO_STATUS<16,16> LSS .COUNT
!			THEN
!			    COUNT = .IO_STATUS<16,16>;
!		        USER_STATUS<16,16> = .COUNT;
!		        END;		! end of either already read or must read
!		    END;		! end of either end of label set or retrieve label
!-

END

ELUDOM
