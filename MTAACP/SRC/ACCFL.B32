
MODULE ACCFL (LANGUAGE (BLISS32) ,
		IDENT = 'V03-000'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  MTAACP
!
! ABSTRACT:
!	This module makes necessary changes to i/o data base to allow access.
!
! ENVIRONMENT:
!
!	Starlet operating system, including privileged system services
!	and internal exec routines.
!
!--

!
!
! AUTHOR:  D. H. Gillespie,	 CREATION DATE:	17-MAY-77
!
! MODIFIED BY:
!
!	V02-003	REFORMAT	Maria del C. Nasr	30-Jun-1980
!
!	A0002	SPR27676	Maria del C. Nasr	14-Dec-1979  16:17
!		Update transaction count in VCB for each file access and
!		deaccess.
!
!**

LIBRARY 'SYS$LIBRARY:LIB.L32';

REQUIRE 'SRC$:MTADEF.B32';

EXTERNAL ROUTINE
    ALLOCATE,				! allocate non_paged system space
    IO_DONE;				! returns IO packet

EXTERNAL
    IO_PACKET	: REF BBLOCK;		! address of current IO request packet


GLOBAL ROUTINE ACCESS_FILE (ORIGINAL_ACC, PID, READ_ACCESS, WRITE_ACCESS, ABD)
    : COMMON_CALL NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine makes necessary changes to i/o data base to allow access.
!
!CALLING SEQUENCE:
!	ACCESS_FILE(ARG1,ARG2,ARG3,ARG4,ARG5)
!
! INPUT PARAMETERS:
!	ARG1 - Original access request
!	ARG2 - PID of process requesting access
!	ARG3 - read access requested(0 - no, 1 - yes)
!	ARG4 - write access requested(0 - no, 1 - yes)
!	ARG5 - address of buffer descriptors
!
! IMPLICIT INPUTS:
!	CURRENT_UCB	- address of current unit control block
!	CURRENT_VCB	- address of current vcb
!	LOCAL_FIB 	- copy of user's fib
!
! OUTPUT PARAMETERS:
!	None
!
! IMPLICIT OUTPUTS:
!	CURRENT_WCB - address of window control block
!
! ROUTINE VALUE:
!	None
!
! SIDE EFFECTS:
!	enable write back of window
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_REG;

    LOCAL
	WINDOW	: REF BBLOCK;		! address of window for this file

    MAP

	! address of buffer descriptors
	!
	ABD	: REF BBLOCKVECTOR [, ABD$C_LENGTH];

    EXTERNAL
	LOCAL_FIB	: BBLOCK,	! copy of user's file information block

	! address of current unit control block
	!
	CURRENT_UCB	: REF BBLOCK,

	! address of current window control block
	!
	CURRENT_WCB	: REF BBLOCK;

    ! create window
    !
    WINDOW = ALLOCATE(WCB$C_LENGTH + 6);
    WINDOW[WCB$B_TYPE] = DYN$C_WCB;

    ! initialize window
    !
    WINDOW[WCB$L_WLFL] = .CURRENT_VCB;		! link to vcb
    WINDOW[WCB$L_WLBL] = .CURRENT_VCB;
    WINDOW[WCB$V_READ] = .READ_ACCESS;		! read access specified
    WINDOW[WCB$V_WRITE] = .WRITE_ACCESS;	! write access specified
    WINDOW[WCB$L_PID] = .PID;			! pid of requester

    ! current unit control block address
    !
    WINDOW[WCB$L_ORGUCB] = .CURRENT_UCB;
    WINDOW[WCB$W_ACON] = .ORIGINAL_ACC<0, 16>;	! access control bits saved
    WINDOW[WCB$W_NMAP] = 0;			! prevent virtual io

    ! address of relative volume table
    !
    WINDOW[WCB$L_RVT] = .CURRENT_VCB[VCB$L_RVT];

    ! put unit to receive io in mapping pter
    !
    (WINDOW[WCB$W_P1_COUNT])<0, 32> = .CURRENT_UCB;
    CURRENT_WCB = .WINDOW;			! current window control block
    CURRENT_VCB[VCB$L_WCB] = .WINDOW;		! note window address

    ! not partial file since access establishes handles on it
    !
    CURRENT_VCB[VCB$V_PARTFILE] = 0;

    ! increase transaction count
    !
    CURRENT_VCB[VCB$W_TRANS] = .CURRENT_VCB[VCB$W_TRANS] + 1;

    ! enable write back of window
    !
    ABD[ABD$C_WINDOW, ABD$W_COUNT] = 4;
    .ABD[ABD$C_WINDOW, ABD$W_TEXT] + ABD[ABD$C_WINDOW, ABD$W_TEXT] + 1 =
			    .WINDOW;
    IO_DONE(.IO_PACKET);			! complete IO
    IO_PACKET = 0;				! indicate IO has been completed
    END;					! end of routine

END

ELUDOM
