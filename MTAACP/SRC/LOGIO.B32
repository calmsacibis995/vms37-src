
MODULE LOGIO (LANGUAGE (BLISS32) ,
		IDENT = 'V03-000'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  MTAACP
!
! ABSTRACT:
!	This module handles logical IO.
!
!
! ENVIRONMENT:
!
!	Starlet operating system, including privileged system services
!	and internal exec routines.
!
!--

!
!
! AUTHOR:  D. H. GILLESPIE,	 CREATION DATE:  14-JUL-1977
!
! MODIFIED BY:
!
!	V02-004	REFORMAT	Maria del C. Nasr	30-Jun-1980
!
!	00003	MCN0009		Maria del C. Nasr	20-Nov-1979   12:00
!		The STATUS code from a QIO is returned in low 16 bits of
!		longword.  Fix check for STATUS to <0,16>.
!
!!
!**

LIBRARY 'SYS$LIBRARY:LIB.L32';

REQUIRE 'LIBD$:[VMSLIB.OBJ]MOUNTMSG.B32';

REQUIRE 'SRC$:MTADEF.B32';

FORWARD ROUTINE
    ADJTM	: COMMON_CALL NOVALUE,		! adjust tape mark count
    ISSUE_IO	: L$ISSUE_IO,			! issue IO
    READ_BLOCK	: COMMON_CALL,			! read logical block
    REPOSITION	: L$REPOSITION NOVALUE,		! reposition tape
    RESTORE_POS	: NOVALUE COMMON_CALL,
    SPACE	: COMMON_CALL,			! space blocks
    SPACE_TM	: COMMON_CALL NOVALUE,		! space tape marks
    UNBLOCK_SPACE	: COMMON_CALL NOVALUE,	! unblock for SPACE_TM
    WRITE_BLOCK	: COMMON_CALL NOVALUE,		! write logical block
    WRITE_TM	: NOVALUE L$WRITE_TM;		! write one tape mark

EXTERNAL
    CURRENT_UCB	: REF BBLOCK,			! address of current unit control block
    IO_CHANNEL,					! address of IO channel
    IO_STATUS,					! IO status
    USER_STATUS;				! user status

EXTERNAL ROUTINE
    MOUNT_VOL		: COMMON_CALL,		! mount volume
    PRINT_OPR_MSG	: L$PRINT_OPR_MSG,	! print an operator message
    RESET_UNIT		: COMMON_CALL,
    SYS$QIOW		: ADDRESSING_MODE (ABSOLUTE);	! queue io request

EXTERNAL LITERAL
    UCB$L_MT_RECORD;				! global displacement into ucb


GLOBAL ROUTINE READ_BLOCK (ADDR, LEN) : COMMON_CALL =

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine reads a logical record from magnetic tape.
!
! CALLING SEQUENCE:
!	READ_BLOCK(ARG1,ARG2)
!
! INPUT PARAMETERS:
!	ARG1 - address for data
!	ARG2 - length to read
!
! IMPLICIT INPUTS:
!	IO_CHANNEL
!
! OUTPUT PARAMETERS:
!	ARG1 - address for data
!
! IMPLICIT OUTPUTS:
!	USER_STATUS, IO_STATUS
!
! ROUTINE VALUE:
!	0 - tm encountered
!	1 - successful read
!
! SIDE EFFECTS:
!	none
!
! ERRORS:
!	Primary status is I/O error returned from driver
!	SS$_FCPREADERR - read failure
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_REG;

    LOCAL
	STATUS;					! IO status

    STATUS = ISSUE_IO(IO$_READLBLK, .ADDR, .LEN);

    IF .STATUS
	OR
	.STATUS<0,16> EQLU SS$_DATAOVERUN OR .STATUS<0,16> EQLU SS$_ENDOFTAPE
    THEN
	RETURN 1;

    IF .STATUS<0,16> NEQU SS$_ENDOFFILE
    THEN
	BEGIN
	USER_STATUS = .STATUS;
	USER_STATUS + 4 = SS$_FCPREADERR;
	ERR_EXIT();
	END;

    KERNEL_CALL(ADJTM, 1);
    RETURN 0;					! tm encountered

    END;					! end of routine


GLOBAL ROUTINE WRITE_BLOCK (ADDR, LEN) : COMMON_CALL NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine writes one logical block.
!
! CALLING SEQUENCE:
!	WRITE_BLOCK(ARG1,ARG2)
!
! INPUT PARAMETERS:
!	ARG1 - address of data block to write
!	ARG2 - length of data block to write
!
! IMPLICIT INPUTS:
!	IO_CHANNEL
!
! OUTPUT PARAMETERS:
!	one block written
!
! IMPLICIT OUTPUTS:
!	IO_STATUS, USER_STATUS
!
! ROUTINE VALUE:
!	none
!
! SIDE EFFECTS:
!	SS$_FCPWRITERR - write failure
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_REG;

    LOCAL
	STATUS;					! IO status

    STATUS = ISSUE_IO(IO$_WRITELBLK, .ADDR, .LEN);

    IF NOT .STATUS AND	.STATUS<0,16> NEQ SS$_ENDOFTAPE
    THEN
	BEGIN
	USER_STATUS = .STATUS;
	USER_STATUS + 4 = SS$_FCPWRITERR;
	ERR_EXIT();
	END;

    END;					! end of routine


GLOBAL ROUTINE SPACE (NUMBER) : COMMON_CALL =

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine spaces a given number of records in either direction.
!
! CALLING SEQUENCE:
!	SPACE(ARG1)
!
! INPUT PARAMETERS:
!	ARG1 - number of records to space
!	( positive means forward space, negative means backspace )
!
! IMPLICIT INPUTS:
!	IO_CHANNEL
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	IO_STATUS, USER_STATUS
!	Tape positioned accordingly
!
! ROUTINE VALUE:
!	0 - end of file
!	1 - successful
!
! SIDE EFFECTS:
!	SS$_FCPSPACERR - space failure
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_REG;

    LOCAL
	TM,					! number of tape marks
	STATUS;					! io status

    STATUS = ISSUE_IO(IO$_SKIPRECORD OR	IO$M_INTSKIP, .NUMBER, 0);

    IF NOT .STATUS
    THEN
	BEGIN

	IF .STATUS<0,16> EQL SS$_ENDOFFILE
	THEN
	    BEGIN
	    TM = 1;				! encountered one spacing forward

	    IF .NUMBER LSS 0
	    THEN
		TM = -1;			! encountered one backspacing

	    ! end of file indicates tape mark encountered
	    !
	    KERNEL_CALL(ADJTM, .TM);
	    RETURN 0;

	    END;

	IF .STATUS<0,16> EQL SS$_ENDOFTAPE
	THEN
	    RETURN 1;

	USER_STATUS = .STATUS;
	USER_STATUS + 4 = SS$_FCPSPACERR;
	ERR_EXIT();
	END;

    RETURN 1;

    END;					! end of routine


GLOBAL ROUTINE WRITE_TM : NOVALUE L$WRITE_TM =

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine writes one tape mark.
!
! CALLING SEQUENCE:
!	WRITE_TM()
!
! INPUT PARAMETERS:
!	none
!
! IMPLICIT INPUTS:
!	IO_CHANNEL
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	IO_STATUS, USER_STATUS
!	Tape mark written, tm count incremented.
!
! ROUTINE VALUE:
!	none
!
! SIDE EFFECTS:
!	SS$_FCPWRITERR - write failure
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_REG;

    LOCAL
	STATUS;					! io status

    STATUS = ISSUE_IO(IO$_WRITEOF, 0, 0);

    IF NOT .STATUS AND .STATUS<0,16> NEQ SS$_ENDOFTAPE
    THEN
	BEGIN
	USER_STATUS = .STATUS;
	USER_STATUS + 4 = SS$_FCPWRITERR;
	ERR_EXIT();
	END;

    KERNEL_CALL(ADJTM, 1);
    END;					! end of routine


GLOBAL ROUTINE ADJTM (NUMBER) : COMMON_CALL NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine adjusts the tm count by the given number.
!
! CALLING SEQUENCE:
!	ADJTM(ARG1), called in kernel mode
!
! INPUT PARAMETERS:
!	ARG1 - signed number to adjust count by
!
! IMPLICIT INPUTS:
!	CURRENT_VCB[VCB$B_TM]
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	CURRENT_VCB[VCB$B_TM]
!	CURRENT_VCB[VCB$L_ST_RECORD]
!
! ROUTINE VALUE:
!	none
!
! SIDE EFFECTS:
!	none
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_REG;

    LOCAL
	TM;					! number of tm's

    TM = .CURRENT_VCB[VCB$B_TM];
    TM = .TM + .NUMBER;

    ! Now adjust number so it is a number between 0 and 2
    !

    IF .TM GEQ 3
    THEN
	TM = .TM - 3;

    IF .TM LSS 0
    THEN
	TM = .TM + 3;

    CURRENT_VCB[VCB$B_TM] = .TM;
    CURRENT_VCB[VCB$L_ST_RECORD] = .(.CURRENT_UCB + UCB$L_MT_RECORD)<0,32>;
    END;					! end of routine


GLOBAL ROUTINE ISSUE_IO (FUNCTION, P1, P2) : L$ISSUE_IO =

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine issues the I/O and if the device is offline or
!	the volume is invalid it repositions it.
!
!
! CALLING SEQUENCE:
!	ISSUE_IO(FUNCTION,P1,P2)
!
! INPUT PARAMETERS:
!	ARG1 - function code
!	ARG2 - P1 parameter
!	ARG3 - P2 parameter
!
! IMPLICIT INPUTS:
!	none
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	I/O status
!
! SIDE EFFECTS:
!	none
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_REG;

    LOCAL
	CUR_RECORD;

    ! save current position
    !   
    CUR_RECORD = .(.CURRENT_UCB + UCB$L_MT_RECORD)<0, 32>;

    WHILE 1
    DO
	BEGIN

	BEGIN
	LOCAL
	    STATUS;

	STATUS = $QIOW(EFN = EFN, CHAN = .IO_CHANNEL, FUNC = .FUNCTION,
	    IOSB = IO_STATUS, P1 = .P1, P2 = .P2);

	IF NOT .STATUS
	THEN
	    IO_STATUS = .STATUS;
	END;

	IF .IO_STATUS<0,16> NEQ SS$_MEDOFL AND .IO_STATUS<0,16> NEQ SS$_VOLINV
	THEN
	    RETURN .IO_STATUS;

	REPOSITION(.CUR_RECORD);
	END;

    END;					! end of routine ISSUE_IO


GLOBAL ROUTINE SPACE_TM (NUMBER) : COMMON_CALL NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine spaces a given number of tm's in either direction.
!
! CALLING SEQUENCE:
!	SPACE_TM(NUMBER)
!
! INPUT PARAMETERS:
!	ARG1 - number of tm's to space
!		(if negative, space backward. if positive, space forward.)
!
! IMPLICIT INPUTS:
!	IO_CHANNEL
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	TM count incremented to reflect tape postioned beyond the tm specified
!	IO_STATUS, USER_STATUS
!
! ROUTINE VALUE:
!	none
!
! SIDE EFFECTS:
!	SS$_FCPSPACERR - space failure
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_REG;

    EXTERNAL ROUTINE
	BLOCK,
	SYS$QIO	: ADDRESSING_MODE (ABSOLUTE);

    LOCAL
	CUR_RECORD,				! current position of tape
	STATUS;					! io status

    CUR_RECORD = .(.CURRENT_UCB + UCB$L_MT_RECORD)<0,32>;

    WHILE 1
    DO
	BEGIN
	BBLOCK[.CURRENT_VCB[VCB$L_VPFL], VVP$L_NO_TM] = .NUMBER;
	$QIO( CHAN = .IO_CHANNEL,
		 FUNC = IO$_SKIPFILE,
		 IOSB = BBLOCK[.CURRENT_VCB[VCB$L_VPFL], VVP$L_STATUS],
		 ASTADR = UNBLOCK_SPACE,
		 ASTPRM = .CURRENT_VCB,
		 P1 = .NUMBER );

	! Block the process to wait for function to be completed
	!
	BLOCK($FIELDMASK(VCB$V_WAIREWIND));

	STATUS = .BBLOCK[.CURRENT_VCB[VCB$L_VPFL], VVP$L_STATUS];

	IF .STATUS<0,16> NEQ SS$_MEDOFL AND .STATUS<0,16> NEQ SS$_VOLINV
	THEN
	    EXITLOOP;

	REPOSITION(.CUR_RECORD);
	END;

    IF NOT .STATUS AND .STATUS<0,16> NEQ SS$_ENDOFTAPE
    THEN
	BEGIN
	USER_STATUS = .STATUS;
	USER_STATUS + 4 = SS$_FCPSPACERR;
	ERR_EXIT();
	END;

    KERNEL_CALL(ADJTM, .NUMBER);
    END;					! end of routine


GLOBAL ROUTINE REPOSITION (NO_RECORD) : L$REPOSITION NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine mounts the device that is offline and repositions
!	to the current position.
!
! CALLING SEQUENCE:
!	REPOSITION(ARG1)
!
! INPUT PARAMETERS:
!	ARG1 - number of record to position to
!
! IMPLICIT INPUTS:
!	CURRENT_UCB - address of current unit control block
!	CURRENT_VCB - address of current volume control block
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	none
!
! SIDE EFFECTS:
!	none
!
! USER ERRORS:
!	none
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_REG;

    LABEL
	OFFLINE;

    LOCAL
	SAV_TM,
	SAV_ST_REC,
	MVL_ENTRY,			! address of cur volume MVL entry
	VOL;				! current volume

    VOL = .CURRENT_VCB[VCB$B_CUR_RVN];
    SAV_TM = .CURRENT_VCB[VCB$B_TM];
    SAV_ST_REC = .CURRENT_VCB[VCB$L_ST_RECORD];

    ! Set device not mounted since rewind does not currently recognize device
    ! offline
    !
    MVL_ENTRY = .CURRENT_VCB[VCB$L_MVL] + MVL$K_FIXLEN + ((.VOL -  1)*MVL$K_LENGTH);

OFFLINE :
    BEGIN

    WHILE 1
    DO
	BEGIN

	! Send message to operator informing that the device is offline
	!
	PRINT_OPR_MSG(MOUN$_OFFLINE, 0, BBLOCK[.CURRENT_UCB[UCB$L_DDB],
		DDB$T_NAME], .CURRENT_UCB[UCB$W_UNIT]);
	KERNEL_CALL(RESET_UNIT);

	! Mount volume again
	MOUNT_VOL(.VOL,
	    $FIELDMASK(MOU$V_REWIND) + $FIELDMASK(MOU$V_LBLCHECK) +
		$FIELDMASK(MOU$V_MOUNTERR));

	WHILE 1
	DO
	    BEGIN
	    (

	    LOCAL
		STATUS;

	    ! Space the number of blocks left to space
	    !
	    STATUS = $QIOW(EFN = EFN,
		      CHAN = .IO_CHANNEL,
		      FUNC = IO$_SKIPRECORD,
		      IOSB = IO_STATUS,
		      P1 = .NO_RECORD - .(.CURRENT_UCB + UCB$L_MT_RECORD)<0,32>);
	
	    IF NOT .STATUS
	    THEN
		.IO_STATUS = .STATUS);		! directive status

	    IF .NO_RECORD EQL .(.CURRENT_UCB + UCB$L_MT_RECORD)<0,32>
	    THEN
		LEAVE OFFLINE;			! repositioning complete

	    IF .IO_STATUS<0,16> EQL SS$_MEDOFL OR .IO_STATUS<0,16> EQL SS$_VOLINV
		OR
		.(.CURRENT_UCB + UCB$L_MT_RECORD)<0,32> GEQ .NO_RECORD
	    THEN
		EXITLOOP			! start again
	    ELSE

		IF .IO_STATUS<0,16> NEQ SS$_ENDOFFILE
		THEN
		    BEGIN
		    USER_STATUS = .IO_STATUS;
		    USER_STATUS + 4 = SS$_FCPREPSTN;
		    ERR_EXIT();
		    END;

	    END;

	END;

    END;					! end offline
    KERNEL_CALL(RESTORE_POS, .SAV_TM, .SAV_ST_REC);
    END;					! end of routine


ROUTINE RESTORE_POS (TM, REC) : COMMON_CALL NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine restores the tape position information destroyed by
!	ASSUME_MOUNTED.
!
! CALLING SEQUENCE:
!	RESTORE_POS(ARG1,ARG2), in kernel mode
!
! INPUT PARAMETERS:
!	ARG1 - number or tape marks
!	ARG2 - number of blocks into tape since last tape mark
!
! IMPLICIT INPUTS:
!	address of current VCB
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	CURRENT_VCB[VCB$B_TM] and CURRENT_VCB[VCB$L_ST_RECORD] updated
!
! ROUTINE VALUE:
!	none
!
! SIDE EFFECTS:
!	none
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_REG;

    CURRENT_VCB[VCB$B_TM] = .TM;
    CURRENT_VCB[VCB$L_ST_RECORD] = .REC;
    END;

ROUTINE UNBLOCK_SPACE (VCB) : COMMON_CALL NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine unblocks after a SPACE_TM has been done.  If I/O
! 	is canceled, the tape position is updated.
!
! calling sequence:
!	UNBLOCK_SPACE()
!
! INPUT PARAMETERS:
!	ARG1	- address of volume control block
!
! IMPLICIT INPUTS:
!	VVP$L_NO_TM	- number of tape marks positioned.
!			( If neg then backwards,  else forwards.)
!	Saved stack and impure area
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	CURRENT_VCB[VCB$L_ST_RECORD]
!
! ROUTINE VALUE:
!	none
!
! SIDE EFFECT:
!	Never returns to PC where AST's were enabled.
!	Instead it resumes where the blocked request left off.
!
!--

    BEGIN

    EXTERNAL
	IO_PACKET;

    LOCAL
	STATUS;

    EXTERNAL ROUTINE
	DO_CANCEL	: COMMON_CALL,		! cancel i/o
	UNBLOCK;				! unblock processing

    EXTERNAL REGISTER
	COMMON_REG;

    CURRENT_VCB = .VCB;

    ! If cancel I/O request came thru while spacing tape mark, then restore
    ! UCB address, adjust number of tape marks if successful, and cancel
    ! request
    !
    IF .CURRENT_VCB[VCB$V_CANCELIO]
    THEN
	BEGIN
	STATUS = .BBLOCK[.CURRENT_VCB[VCB$L_VPFL], VVP$L_STATUS];
	CURRENT_UCB = .(.CURRENT_VCB[VCB$L_VPBL] + VVP$K_LENGTH + (CURRENT_UCB
	- USER_STATUS));

	IF .STATUS<0,16> EQL SS$_ENDOFTAPE OR .STATUS
	THEN
	    KERNEL_CALL(ADJTM, .BBLOCK[.CURRENT_VCB[VCB$L_VPFL], VVP$L_NO_TM]);

	ERROR(SS$_CANCEL);
	KERNEL_CALL(DO_CANCEL);
	IO_PACKET = 0;
	RETURN;

	END;

    ! Unblock process and continue where request processing left off.
    !
    UNBLOCK();
    END;						! end of routine
END

ELUDOM
