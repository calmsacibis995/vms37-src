
MODULE FIND ( LANGUAGE ( BLISS32 ),
		IDENT = 'V03-000'
		 ) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  MTAACP
!
! ABSTRACT:
!	This module finds a file by file name string.
!
! ENVIRONMENT:
!
!	Starlet operating system, including privileged system services
!	and internal exec routines.
!
!--

!
!
! AUTHOR:  D. H. GILLESPIE,	 CREATION DATE:  25-MAY-77 15:20
!
! MODIFIED BY:
!
!	V02-009 DMW00073	David Michael Walp	28-Jan-1981
!		Fixed wildcard characters in quoted string bug
!
!	V02-008 DMW00068	David Michael Walp	11-Jan-1981
!		Added support for 17 ANSI 'a' characters thru QIO
!		filename parameters
!
!	V02-007 DMW00062	David Michael Walp	18-Dec-1981
!		Rewrite to support 17 ANSI 'a' characters file names
!
!       V02-006 DMW00006	David Michael Walp	22-Jan-1981
!		Added code for complete wild card support.  Changes
!		in routine FIND_FILE.  Replaced direct compares of
!		the file name and type via CH$EQL with the new
!		FMG$MATCH_NAME procedure and removed old wild code.
!
!	V02-005	REFORMAT	Maria del C. Nasr	30-Jun-1980
!
!**

LIBRARY 'SYS$LIBRARY:LIB.L32';

REQUIRE 'SRC$:MTADEF.B32';

FORWARD ROUTINE
    FIND_FILE		: COMMON_CALL NOVALUE,	! find file by file name string
    CLEAR_ST_SEARCH	: COMMON_CALL NOVALUE;	! clear start of search

LINKAGE
    L_MATCH_NAME = JSB ( REGISTER = 2, REGISTER = 3, REGISTER = 4, REGISTER = 5 ) 
		 : NOTUSED ( 10, 11 );



GLOBAL ROUTINE FIND_FILE : COMMON_CALL NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine finds a file by file name string.
!
! CALLING SEQUENCE:
!	FIND ( ) 
!
! INPUT PARAMETERS:
!	none
!
! IMPLICIT INPUTS:
!	LOCAL_FIB, CURRENT_VCB
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	If file found, HDR1 and HDR2 will be read in or defaulted
!	result file name string and length returned to user.
!
! USER ERRORS:
!	SS$_NOSUCHFILE - file not found
!	SS$_RESULTOVF  - result string overflow
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_REG;

    EXTERNAL
	LOCAL_FIB	: BBLOCK;		! copy of user's fib

    EXTERNAL ROUTINE
	FORMAT_FID	   : COMMON_CALL,	! format fid
	FMG$MATCH_NAME	   : L_MATCH_NAME,	! match general wild card str
	GET_START_HDR	   : L$GET_START_HDR,	! get hdrs to start search on
	PARSE_HDR1_FID,				! parse FID fields in HDR1
	PARSE_PATTERN_SPEC : COMMON_CALL,	! parse pattern spec
	READ_HDR	   : COMMON_CALL,	! read headers
	RESULTANT_STRING   : COMMON_CALL NOVALUE,!  return resultant string
	REWIND_VOL_SET	   : COMMON_CALL,	! rewind volume set
	SPACE_EOF	   : COMMON_CALL,	! space to end of file
	SYS$FAO		   : ADDRESSING_MODE ( ABSOLUTE ),! format ASCII output
	WRAP_AROUND	   : L$WRAP_AROUND;	! wrap around to beginning of
						!   volume set
    LITERAL
	WILD_QUOTED	   = 0,			! bit layout for FILE_SPEC_BITS
	PATTERN_VMS_SPEC   = 1,			!  .
	TAPE_ID_VMS_SPEC   = 2,			!  .

	NO_VMS		   = 0,			! meanings of the 2nd and 3rd
	PAT_VMS		   = 1,			!  bits in FILE_SPEC_BITS
	TAPE_VMS	   = 2,			!
	BOTH_VMS	   = 3;			!

    LOCAL
	FILE_SPEC_BITS	   : BITVECTOR [ 3 ],	! info about the file specs
	FID_VER		   : WORD,		! HDR1 FID binary version
	PAT_VER		   : WORD,		! Pattern binary fid version

	! descriptors and buffer for the file spec string
	! size of 17 or HD1$S_FILEID > 13 ( 9 for name, 3 for type, 1 for dot )
	!	
	FID_DESC	   : VECTOR [ 2, LONG ],
	FID_STR		   : VECTOR [ HD1$S_FILEID, BYTE ],
	PAT_DESC	   : VECTOR [ 2, LONG ],
	PAT_STR		   : VECTOR [ HD1$S_FILEID, BYTE ];

    BIND
	FILENAMES_TYPES	   = FILE_SPEC_BITS : BLOCK;


    MACRO
	BITS_2_3	   = 0, 1, 2, 0%;

    ! if this is not a wild card lookup then zero context
    !
    IF NOT .LOCAL_FIB [ FIB$V_WILD ] THEN LOCAL_FIB [ FIB$L_WCC ] = 0;

    ! if beginning of search check for rewind switch
    !
    IF .LOCAL_FIB [ FIB$L_WCC ] EQL 0
    THEN
	BEGIN

	IF .LOCAL_FIB [ FIB$V_REWIND ] EQL 1 THEN REWIND_VOL_SET ( );

	! clear start of search file ID
	!
	KERNEL_CALL ( CLEAR_ST_SEARCH );
	END

    ELSE
	BEGIN

	! If either of these two values are zero then the user has not preceded
	! this call with a first time thru lookup.
	!
	IF .CURRENT_VCB [ VCB$L_CUR_FID ]   EQL 0
	OR .CURRENT_VCB [ VCB$L_START_FID ] EQL 0
	THEN ERR_EXIT ( SS$_BADPARAM );

	! if not first time through , then don't include current file in search
	!
	IF NOT .CURRENT_VCB [ VCB$V_LOGICEOVS ] THEN SPACE_EOF ( );

	END;

    ! position to first file
    !
    IF NOT GET_START_HDR ( )
    THEN

	! tm, so at logical end of volume set
	! continue search at beginning of tape unless the start of search was
	! the beginning
	!
	IF NOT WRAP_AROUND ( ) THEN ERR_EXIT ( SS$_NOSUCHFILE );

    ! if dummy file, deny its existence
    !
    IF .CURRENT_VCB [ VCB$W_CUR_NUM ] EQLU 0 THEN ERR_EXIT ( SS$_NOSUCHFILE );

    ! if first time through save start context else check not at beginning of
    ! search
    !
    IF .LOCAL_FIB [ FIB$L_WCC ] EQL 0
    THEN

	! convert file seq and section number
	!
	KERNEL_CALL ( FORMAT_FID, CURRENT_VCB [ VCB$W_START_NUM ] ) 

    ELSE

	! possible end of search
	!
	IF .CURRENT_VCB [ VCB$L_CUR_FID ] EQL .CURRENT_VCB [ VCB$L_START_FID ] 
	THEN ERR_EXIT ( SS$_NOSUCHFILE );

    ! initialize buffer descriptors with constants
    !
    PAT_DESC [ 0 ] = HD1$S_FILEID;
    PAT_DESC [ 1 ] = PAT_STR;
    FID_DESC [ 1 ] = FID_STR;

    ! parse the pattern string
    !
    FILE_SPEC_BITS = PARSE_PATTERN_SPEC ( PAT_DESC, PAT_VER );

    ! loop until a match or we have searched them all
    !
    WHILE 1
    DO
	BEGIN

	! reset the size of the FID buffer
	! parse the FID of the current file
	!
	FID_DESC [ 0 ] = HD1$S_FILEID;
	FILE_SPEC_BITS [TAPE_ID_VMS_SPEC] = PARSE_HDR1_FID (FID_DESC,FID_VER);

	! test if the current file spec fits the pattern spec, exitloop
	!   and return if we have a match
	!
	!
	!	match name    |	    Tape File ID Field Value
	!	 and type     |	   Quoted	|   VMS
	!    -----------------+-----------------+--------------------------
	!     Pattern  Quoted |	 Strings Equal  | String Equal ( in case
	!      File	      |			| VMS spec in quotes )
	!      Spec   --------+-----------------+--------------------------
	!      Value	VMS   |	 Only *.* or *. | Normal wildcard match
	!
	IF ( CASE .FILENAMES_TYPES [ BITS_2_3 ] FROM 0 TO 3 OF
		  SET
		  [ NO_VMS ]	: CH$EQL ( .FID_DESC[0], .FID_DESC[1],
					   .PAT_DESC[0], .PAT_DESC[1], ' ' );
		  [ PAT_VMS ]	: .FILE_SPEC_BITS [ WILD_QUOTED ];
		  [ TAPE_VMS ]  : CH$EQL ( .FID_DESC[0], .FID_DESC[1],
					   .PAT_DESC[0], .PAT_DESC[1], ' ' );
		  [ BOTH_VMS ]  : FMG$MATCH_NAME ( .FID_DESC[0], .FID_DESC[1],
						   .PAT_DESC[0], .PAT_DESC[1] )
		  TES )
	AND
	   (	.LOCAL_FIB [ FIB$V_ALLVER ] !    wild version
	     OR	( .PAT_VER LEQU 0 )	    ! OR first or last version
	     OR	( .PAT_VER EQLU .FID_VER )  ! OR same version

	   ) 
	THEN EXITLOOP;

	! no match, space to the end of this file and read the header for the
	! next file, also test if have looked at all files
	!
	SPACE_EOF ( );
	IF NOT READ_HDR ( ) 
	THEN
	     IF NOT WRAP_AROUND ( ) THEN ERR_EXIT ( SS$_NOSUCHFILE );

	IF .CURRENT_VCB [ VCB$L_CUR_FID ] EQL .CURRENT_VCB [ VCB$L_START_FID ] 
	THEN ERR_EXIT ( SS$_NOSUCHFILE );

	END;					! end of while loop


    ! have file match setup to write back FID
    ! return File Identifier Number in File Information Block
    !
    FORMAT_FID ( LOCAL_FIB [ FIB$W_FID_NUM ] );
    LOCAL_FIB [ FIB$W_FID_RVN ] = .CURRENT_VCB [ VCB$B_CUR_RVN ] ;

    ! note through lookup at least once
    !
    IF .LOCAL_FIB [ FIB$V_WILD ] 
    THEN LOCAL_FIB [ FIB$L_WCC ] = 1
    ELSE LOCAL_FIB [ FIB$L_WCC ] = 0;

    ! return resultant string
    !
    RESULTANT_STRING ( .FILE_SPEC_BITS [ TAPE_ID_VMS_SPEC ],
		       .FID_DESC [ 0 ],
		       .FID_DESC [ 1 ],
		       .FID_VER );

    END;					! end of routine FIND_FILE

ROUTINE CLEAR_ST_SEARCH : COMMON_CALL NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine clears the file id indicating the start of this search.
!
! CALLING SEQUENCE:
!	CLEAR_ST_SEARCH ( ), called in kernel mode
!
! INPUT PARAMETERS:
!	none
!
! IMPLICIT INPUTS:
!	CURRENT_VCB - address of current volume control block
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	CURRENT_VCB [ VCB$L_START_FID ] cleared
!
! ROUTINE VALUE:
!	none
!
! SIDE EFFECTS:
!	none
!
! USER ERRORS:
!	none
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_REG;

    CURRENT_VCB [ VCB$L_START_FID ] = 0;
    END;
END

ELUDOM
