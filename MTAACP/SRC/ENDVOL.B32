
MODULE ENDVOL (LANGUAGE (BLISS32) ,
		IDENT = 'V03-000'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  MTAACP
!
! ABSTRACT:
!	this module handles virtaul io errors including mapping errors.
!
!
! ENVIRONMENT:
!
!	starlet operating system, including privileged system services
!	and internal exec routines.
!
!--

!
!
! AUTHOR:  D. H. GILLESPIE,	 CREATION DATE:
!
! MODIFIED BY:
!
!	V02-006	REFORMAT	Maria del C. Nasr	30-Jun-1980
!
!	V02-005 MCN0017		Maria del C. Nasr	18-Jun-1980
!		Request START_VIO in next volume write after IO has been
!		successfully completed.  This is to fix a problem with
!		multivolume processing, in which the next volume was not
!		requested if EOT was sensed when writing the header labels.
!
!	V02-004	SPR27361	Maria del C. Nasr	10-Jun-1980
!		Hold posting of IO after all IO has been completed successfully,
!		to avoid hanging the user process by the need to return errors
!		after IO has been posted.  Also, eliminate the check for user
!		labels AST's.
!
!
!**

LIBRARY 'SYS$LIBRARY:LIB.L32';

REQUIRE 'SRC$:MTADEF.B32';

FORWARD ROUTINE
    END_OF_VOL		: NOPRES NOVALUE,		! end of volume processing

    ! insert request in error at head of blocked io queue
    !
    INSERT_HEAD		: COMMON_CALL NOVALUE,

    ! insert map failures at tail of blocked io queue
    !
    INSERT_TAIL		: COMMON_CALL NOVALUE,
    NEXT_VOL_READ	: NOVALUE L$NEXT_VOL_READ,	! get next volume on read
    NEXT_VOL_WRITE	: NOVALUE L$NEXT_VOL_WRIT;	! get next volume on write

EXTERNAL ROUTINE
    ADJTM		: COMMON_CALL,			! adjust tape mark counter
    GTNEXT_VOL_READ	: L$GTNEXT_VOL_RE NOVALUE,	! get next volume for read
    GTNEXT_VOL_WRIT	: L$GTNEXT_VOL_WR NOVALUE,	! get next volume for write
    IO_DONE,						! complete io
    LIB$CVT_DTB		: ADDRESSING_MODE (ABSOLUTE),	! convert decimal to binary
    READ_BLOCK		: COMMON_CALL,			! read one tape block
    RETURN_ALL_ERR	: COMMON_CALL,			! return blocked io in error    
    SPACE_TM		: COMMON_CALL,			! space given number of tape marks
    START_VIO		: COMMON_CALL,			! start up virtual io
    REPOSITION		: L$REPOSITION,			! reposition tape
    WRITE_HEADERS	: L$WRITE_HEADER NOVALUE,	! write hdr1 and hdr2
    WRITE_TM		: L$WRITE_TM,			! write tape mark
    WRITE_TRAILERS	: L$WRITE_TRAILER NOVALUE;	! write trailer label set

EXTERNAL
    CURRENT_UCB		: REF BBLOCK,			! address of current unit control block
    CURRENT_WCB		: REF BBLOCK,			! address of current window control block
    HDR1		: REF BBLOCK,			! address of hdr1 (eof1) label
    IO_PACKET		: REF BBLOCK,			! address of io request packet
    USER_STATUS		: VECTOR [2];			! status returned to user

EXTERNAL LITERAL
    UCB$L_MT_RECORD;					! global displacement in ucb


GLOBAL ROUTINE END_OF_VOL : NOPRES NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!	this routine handles io errors on virtual io including mapping errors
!
! CALLING SEQUENCE:
!	end_of_vol()
!
! INPUT PARAMETERS:
!	none
!
! IMPLICIT INPUTS:
!	current_vcb	- address of current volume control block
!	io_packet	- address of io request packet
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	io_packet zeroed if it should not be completed
!
! ROUTINE VALUE:
!	none
!
! SIDE EFFECTS:
!	end of volume processing
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_REG;

    LOCAL
	BLOCKS1,				! number of blocks read
	BLOCKS2,				! number of blocks recorded in trailer label
	IO_ERROR,				! driver error
	PACKET	: REF BBLOCK;			! address of io request packet

    PACKET = .IO_PACKET;

    ! if virtual bit set then mapping error.  this occurs when io is being held
    ! up for either user labels, io error, end_of_volume processing or because
    ! end_of_file has been read
    !

    IF .PACKET[IRP$V_VIRTUAL]
    THEN
	BEGIN

	! if mapping error caused by writing user labels and therefore forcing a
	! close of the current file then return the io in error
	!

	IF .CURRENT_VCB[VCB$V_MUSTCLOSE]
	THEN
	    ERR_EXIT(SS$_MUSTCLOSEFL);

	! if the number of tape marks into the file is two and label indicates
	! eof then at end_of_file
	!

	IF .HDR1[HD1$L_HD1LID] EQL 'EOF1'
	THEN
	    ERR_EXIT(SS$_ENDOFFILE);

	! blocked io because of mapping failure
	!
	KERNEL_CALL(INSERT_TAIL, .PACKET);
	IO_PACKET = 0;
	RETURN;

	END
    ELSE

	! if  virtual bit is not set then an error occurred on a virtual io
	! request. the error if ss$_endoftape or ss$_endoffile indicates that
	! end of volume processing is necessary
	!
	BEGIN
	IO_ERROR = .(PACKET[IRP$L_IOST1])<0, 16>;

	IF .IO_ERROR EQL SS$_MEDOFL
	THEN
	    BEGIN
	    REPOSITION(.(.CURRENT_UCB + UCB$L_MT_RECORD)<0, 32>);
	    KERNEL_CALL(INSERT_HEAD, .PACKET);
	    IO_PACKET = 0;			! don't complete io
	    KERNEL_CALL(START_VIO);
	    RETURN;

	    END;

	IF .IO_ERROR NEQ SS$_ENDOFFILE
	    AND
	    .IO_ERROR NEQ SS$_ENDOFTAPE
	THEN
	    BEGIN				! return all other errors to user
	    USER_STATUS[0] = .PACKET[IRP$L_IOST1];
	    USER_STATUS[1] = .PACKET[IRP$L_IOST2];
	    KERNEL_CALL(START_VIO);		! allow other io to continue
	    RETURN;				! complete i/o in error

	    END
	ELSE
	    BEGIN

	    ! end of volume processing
	    !

	    IF NOT .CURRENT_WCB[WCB$V_READ]
	    THEN
		BEGIN				! end of volume on write
		USER_STATUS<16, 16> = .(PACKET[IRP$L_IOST1])<16, 16>;
		USER_STATUS[1] = .PACKET[IRP$L_IOST2];
		NEXT_VOL_WRITE();

		! this io was written successfully
		!
		KERNEL_CALL(IO_DONE, .PACKET);
		IO_PACKET = 0;
		KERNEL_CALL(START_VIO);
		RETURN;				! don't complete io

		END
	    ELSE
		BEGIN				! end of volume on read

		! if end of tape on read, then make that io successful and
		! requeue any blocked io.  will eventually hit tape mark
		!

		IF .IO_ERROR EQL SS$_ENDOFTAPE
		THEN
		    BEGIN
		    KERNEL_CALL(START_VIO);	! requeue any blocked io
		    USER_STATUS<16, 16> = .(PACKET[IRP$L_IOST1])<16, 16>;
		    USER_STATUS[1] = .PACKET[IRP$L_IOST2];
		    RETURN;			! complete current io

		    END
		ELSE
		    BEGIN

		    ! calculate the number of blocks since last tape mark.  this
		    ! will be compared with the number in the trailer record.
		    ! since a tape mark triggered end_of_vol processing, record
		    ! it.  then discover if this is the end_of_vol or end
		    ! _of_file.
		    !
		    BLOCKS1 = .(.CURRENT_UCB + UCB$L_MT_RECORD)<0, 32> - 1 -
		    .CURRENT_VCB[VCB$L_ST_RECORD];

		    ! tape mark triggered end_of_file
		    !
		    KERNEL_CALL(ADJTM, 1);

		    IF NOT READ_BLOCK(.HDR1, 80)
			OR
			(.HDR1[EO1$L_EO1LID] NEQ 'EOF1'
			AND
			.HDR1[EO1$L_EO1LID] NEQ 'EOV1')
		    THEN
			ERR_EXIT(SS$_TAPEPOSLOST);

		    ! convert the number of blocks recored in the trailer
		    ! record.  compare it with the number read.  if the numbers
		    ! are not equal then return all virtual io to the user in
		    ! error.
		    !
		    LIB$CVT_DTB(EO1$S_BLOCKCNT, HDR1[EO1$T_BLOCKCNT], BLOCKS2);

		    IF .BLOCKS1 NEQ .BLOCKS2
		    THEN
			BBLOCK[.CURRENT_VCB[VCB$L_VPFL], VVP$L_BLOCKDIF] =
			.BBLOCK[.CURRENT_VCB[VCB$L_VPFL], VVP$L_BLOCKDIF] +
			.BLOCKS1 - .BLOCKS2;

		    ! if end_of_file read, return all physical io in error,
		    ! signal user to read user labels now and return
		    !

		    IF .HDR1[EO1$L_EO1LID] EQL 'EOF1'
		    THEN
			ERR_EXIT(SS$_ENDOFFILE);

		    ! end of volume processing
		    !
		    NEXT_VOL_READ();		! get next volume on read

		    ! put in blocked io queue
		    !
		    KERNEL_CALL(INSERT_HEAD, .PACKET);
		    IO_PACKET = 0;		! don't complete io
		    KERNEL_CALL(START_VIO);	! requeue blocked io
		    RETURN;

		    END;

		END;		! if end_of_file or end_of_tape on read

	    END;				! end of if write else read

	END;					! end of if map else error

    END;					! end of routine


ROUTINE INSERT_HEAD (PACKET) : COMMON_CALL NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!	this routine inserts io packet at the header of the blocked io queue
!
! CALLING SEQUENCE:
!	insert_head(arg1), called in kernel mode
!
! INPUT PARAMETERS:
!	arg1 - address of io request packet
!
! IMPLICIT INPUTS:
!	current_vcb 	- address of current volume control block
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	none
!
! SIDE EFFECTS:
!	packet inserted at head of queue
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_REG;

    ! clobber nmap until this function is in driver
    !
    INSQUE(.PACKET, CURRENT_VCB[VCB$L_BLOCKFL]);
    END;					! end of routine

ROUTINE INSERT_TAIL (PACKET) : COMMON_CALL NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!	this routine inserts the packet in the tail of the blocked io request
!	queue
!
! CALLING SEQUENCE:
!	insert_tail(arg1), called in kernel mode
!
! INPUT PARAMETERS:
!	none
!
! IMPLICIT INPUTS:
!	current_vcb	- address of current volume control block
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	none
!
! SIDE EFFECTS:
!	none
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_REG;

    INSQUE(.PACKET, .CURRENT_VCB[VCB$L_BLOCKBL]);
    END;					! end of routine


GLOBAL ROUTINE NEXT_VOL_WRITE : L$NEXT_VOL_WRIT NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine writes end of volume trailers, gets the next volume
!	for write, and writes the header labels.
!
! CALLING SEQUENCE:
!	NEXT_VOL_WRITE()
!
! INPUT PARAMETERS:
!	none
!
! IMPLICIT INPUTS:
!	blocked io queue
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	io requeue to next volume
!
! ROUTINE VALUE:
!	none
!
! SIDE EFFECTS:
!	none
!
! USER ERRORS:
!	none
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_REG;

    WRITE_TRAILERS('V');			! write trailers
    WRITE_TM();
    WRITE_TM();

    GTNEXT_VOL_WRIT();				! get the next volume for write
    WRITE_HEADERS();				! write hdr1 and hdr2

    ! Close out header label set with tape mark
    !

    WRITE_TM();
    END;


GLOBAL ROUTINE NEXT_VOL_READ : L$NEXT_VOL_READ NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine positions the current volume at the very end, gets the
!	next volume for read, verifies the headers and positions the tape at
!	the beginning of the data section.
!
! CALLING SEQUENCE:
!	NEXT_VOL_READ()
!
! INPUT PARAMETERS:
!	none
!
! IMPLICIT INPUTS:
!	blocked io queue
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	requeue blocked io to next volume
!
! ROUTINE VALUE:
!	none
!
! SIDE EFFECTS:
!	none
!
! USER ERRORS:
!	none
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_REG;

    ! If user labels are read, a tape mark could be read, which makes TM=0
    !

    SPACE_TM(IF .CURRENT_VCB[VCB$B_TM] EQL 0 THEN 1 ELSE 2);

    GTNEXT_VOL_READ();				! get the next volume for read

    IF .CURRENT_VCB[VCB$B_TM] EQL 0
    THEN
	SPACE_TM(1);

    END;

END

ELUDOM
