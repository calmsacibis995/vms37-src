
MODULE GETFIB (LANGUAGE (BLISS32) ,
		IDENT = 'V03-000'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  MTAACP
!
! ABSTRACT:
!
!	This routine obtains the address of the fib for this operation.
!
! ENVIRONMENT:
!
!	Starlet operating system, including privileged system services
!	and internal exec routines.
!
!--

!
!
! AUTHOR:  D. H. GILLESPIE,	 CREATION DATE:  11-MAY-1977  01:02
!
! MODIFIED BY:
!
!	V02-002	REFORMAT	Maria del C. Nasr	30-Jun-1980
!
!
!**

LIBRARY 'SYS$LIBRARY:LIB.L32';

REQUIRE 'SRC$:MTADEF.B32';


GLOBAL ROUTINE GET_FIB (ABD) : COMMON_CALL =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine obtains the address of the fib for this operation.
!	If a file is already accessed and fid is given than it must be that of the
!	accessed file.  A copy is made in user space.
!
! CALLING SEQUENCE:
!	GET_FIB (ARG1)
!
! INPUT PARAMETERS:
!	ARG1	: address of buffer descriptor list
!
! IMPLICIT INPUTS:
!	CURRENT_WCB : address of user's window or 0
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	address of fib
!
! SIDE EFFECTS:
!	fid checked
!
! USER ERRORS:
!	SS$_INSFARG  - insufficient arguments
!	SS$_BADPARAM - bad input parameters
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_REG;

    MAP
	ABD	: REF BBLOCKVECTOR [, ABD$C_LENGTH];	! buffer descriptors

    LOCAL
	FIB		: REF BBLOCK,			! address of fib
	FIBL;						! length of user fib

    EXTERNAL
	LOCAL_FIB	: BBLOCK,			! internal copy of user fib
	IO_PACKET	: REF BBLOCK,			! address of current io request packet
	CURRENT_WCB	: REF BBLOCK;			! user's window

    BIND
	LOC_FID = LOCAL_FIB[FIB$W_FID];

    ! get the length of the user-supplied fib.
    !
    FIBL = .ABD[ABD$C_FIB, ABD$W_COUNT];
    FIB = .ABD[ABD$C_FIB, ABD$W_TEXT] + ABD[ABD$C_FIB, ABD$W_TEXT] + 1;
    CH$COPY(.FIBL, .FIB, 0, FIB$K_MTALEN, LOCAL_FIB);

    ! if file open, the input fid must request same file
    !
    IF .CURRENT_WCB NEQ 0
    THEN
	BEGIN

	IF .FIBL NEQ 0
	    AND
	    .FIBL LSS FIB$C_ACCDATA
	THEN
	    ERR_EXIT(SS$_INSFARG);

	IF .LOCAL_FIB[FIB$W_FID_NUM] EQL 0
	THEN
	    BEGIN
	    LOC_FID<0, 16> = .CURRENT_VCB[VCB$W_CUR_NUM];
	    LOC_FID<16, 16> = 1;			! always return seq = 1
	    LOCAL_FIB[FIB$W_FID_RVN] = .CURRENT_VCB[VCB$W_RVN];
	    END;

	IF .CURRENT_VCB[VCB$W_CUR_NUM] NEQ .LOC_FID<0, 16>
	THEN
	    ERR_EXIT(SS$_BADPARAM);

	END

	! If there is no file open, there must be a minimum fib.
	!
    ELSE
	BEGIN

	IF .FIBL LSS FIB$C_ACCDATA
	THEN
	    ERR_EXIT(SS$_INSFARG);

	END;

    RETURN LOCAL_FIB;

    END;						! end of routine get_fib

END

ELUDOM
