
MODULE ACCESS (LANGUAGE (BLISS32) ,
		IDENT = 'V03-000'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  MTAACP
!
! ABSTRACT:
!	This module performs the access function for mtaacp.
!
! ENVIRONMENT:
!
!	Starlet operating system, including privileged system services
!	and internal exec routines.
!
!--

!
!
! AUTHOR:  D. H. Gillespie,	 CREATION DATE: 13-MAY-77 16:20
!
! MODIFIED BY:
!
!	V02-005 DMW00050	David Michael Walp	10-Nov-1981
!		Return "NO SUCH FILE" error for when a "NO MORE FILES" error
!		is returned and no files have been found. 
!		
!	V02-004	REFORMAT	Maria del C. Nasr	30-Jun-1980
!
!	V02-003	SPR27361	Maria del C. Nasr	10-Jun-1980
!		Fix design problem in which the IO_PACKET was being returned
!		before IO was really completed. Now,a file will not be accessed
!		until the tape mark is successfully skipped.  Also, the	user
!		labels code was eliminated, since it was never used.
!
!	A0002	MCN0001		Maria del C. Nasr	11-Sep-79   17:02
!		Added argument to CHECK_FILE_ACC call to fix bug in
!		"create if" function.
!
!**

LIBRARY 'SYS$LIBRARY:LIB.L32';

REQUIRE 'SRC$:MTADEF.B32';

FORWARD ROUTINE
    MTA_ACCESS	: NOPRES NOVALUE,	! main  control for access function
    CHECK_FIND	: COMMON_CALL,			! conditional directory search
    HANDLER;			! conditional handler to catch error exit


GLOBAL ROUTINE MTA_ACCESS : NOPRES NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!	This is the main processing routine for mtaacp access function
!
! CALLING SEQUENCE:
!	MTA_ACCESS()
!
! INPUT PARAMETERS:
!	None
!
! IMPLICIT INPUTS:
!	CURRENT_UCB - address of current ucb
!	CURRENT_WCB - address of current wcb
!	CURRENT_VCB - address of current vcb
!	IO_PACKET   - address of current io request packet
!
! OUTPUT PARAMETERS:
!	None
!
! IMPLICIT OUTPUTS:
!	None
!
! ROUTINE VALUE:
!	None
!
! SIDE EFFECTS:
!	Access request processed
! USER ERRORS
!	SS$_FILALRACC - file already accessed
!	SS$_BADPARAM - bad input parameters
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_REG;

    LOCAL
	FUNCTION	: BLOCK [1],			! function and qualifiers
	PACKET	: REF BBLOCK,			! address of io packet

	! address of buffer descriptors
	!
	ABD	: REF BBLOCKVECTOR [, ABD$C_LENGTH],
	FIB	: REF BBLOCK;		! address of file information block

    EXTERNAL
	CURRENT_UCB	: REF BBLOCK,		! address of current ucb
	CURRENT_WCB	: REF BBLOCK,	! address of window control block
	IO_PACKET	: REF BBLOCK,			! address of io request packet
	USER_STATUS	: VECTOR;			! status to return to user

    EXTERNAL ROUTINE

	! Make data base changes nec for access
	!
	ACCESS_FILE	: COMMON_CALL,
	ACCESS_NEW_FILE	: COMMON_CALL,		! access newly created file
	
	! Check volume protection on each file access
	!
	CHECK_ACCESS	: COMMON_CALL,
	CHECK_FILE_ACC	: COMMON_CALL,		! check access to the file
	CLOSE_FILE	: L$CLOSE_FILE,		! close out file
	GET_FIB	: COMMON_CALL,			! get file information block
	MTA_CREATE,				! Main control for create function
	POSITION_BY_FID	: COMMON_CALL,		! position to file by fid
	READ_ATTRIBUTE	: COMMON_CALL,		! read file attributes
	SPACE_TM	: COMMON_CALL NOVALUE,	! space tape mark
	START_VIO	: COMMON_CALL;		! start up virtual io

    ! Setup pointers
    !
    PACKET = .IO_PACKET;			! address of io packet

    ! Address of buffer descriptors
    !
    ABD = .BBLOCK[.PACKET[IRP$L_SVAPTE], AIB$L_DESCRIPT];
    FIB = GET_FIB(.ABD);			! get file information block

    ! Get the function to be performed
    !
    FUNCTION = .PACKET[IRP$W_FUNC];

    ! If anyone has a file accessed then another file can not be access nor can
    ! the tape be searched
    !

    IF .CURRENT_WCB NEQ 0
	AND 
	(.FUNCTION[IO$V_ACCESS]
	OR
	.FIB[FIB$W_DID_NUM] NEQ 0)
    THEN
	ERR_EXIT(SS$_FILALRACC);

    IF .FIB[FIB$V_TRUNC]
	OR
	.FUNCTION[IO$V_DELETE]
    THEN
	ERR_EXIT(SS$_BADPARAM);

    ! It is possible that a create was issued without an access in which case
    ! there is a partial file on this tape.  if the access is to a different
    ! file then close out the partial file before preceding
    !

    IF .CURRENT_VCB[VCB$V_PARTFILE]		! if there is a partial file
    THEN
	BEGIN

	! Is this a find or a request for a different file
	!

	IF .FIB[FIB$W_DID_NUM] NEQ 0
	    OR
	    .(FIB[FIB$W_FID])<0, 32> NEQU .CURRENT_VCB[VCB$L_CUR_FID]
	THEN
	    CLOSE_FILE()		! close partial file before preceding
	ELSE
	    BEGIN

	    ! if any attributes requested,
	    !

	    IF .PACKET[IRP$W_BCNT] GTR ABD$C_ATTRIB
	    THEN
		READ_ATTRIBUTE(.ABD);		! then read them

	    IF .FUNCTION[IO$V_ACCESS]
	    THEN
		BEGIN

		IF NOT .FIB[FIB$V_WRITE]
		THEN
		    ERR_EXIT(SS$_BADPARAM);	! must write new file

		ACCESS_NEW_FILE(.FIB, .PACKET, .ABD);	! access partial file
		END;

	    RETURN;

	    END;

	END;

    ! If file is accessed, the only function that can be performed is read
    ! attributes
    !

    IF .CURRENT_WCB NEQ 0
    THEN
	BEGIN

	IF .PACKET[IRP$W_BCNT] GTR ABD$C_ATTRIB
	THEN
	    READ_ATTRIBUTE(.ABD);

	RETURN;

	END;

    ! If directory id given, find file by file name string
    !

    IF .FIB[FIB$W_DID_NUM] NEQ 0
    THEN

	IF NOT CHECK_FIND()
	THEN
	    BEGIN

	    IF NOT .FUNCTION[IO$V_CREATE]
	    THEN
		ERR_EXIT(SS$_NOSUCHFILE);

	    USER_STATUS[0] = SS$_CREATED;
	    RETURN MTA_CREATE();		! execute create function

	    END;

    ! position volume set by fid
    !
    POSITION_BY_FID(.(FIB[FIB$W_FID])<0, 32>, .FIB[FIB$W_FID_RVN]);

    IF .PACKET[IRP$W_BCNT] GTR ABD$C_ATTRIB
    THEN
	READ_ATTRIBUTE(.ABD);

    ! if access requested
    !

    IF .FUNCTION[IO$V_ACCESS]
    THEN
	BEGIN
	CHECK_ACCESS(.FIB[FIB$V_WRITE]);	! check volume access
	CHECK_FILE_ACC(1);		! check access to file, (1)=mta_access

	IF .CURRENT_VCB[VCB$B_TM] EQLU 0
	THEN
	    SPACE_TM(1);			! position to data

	KERNEL_CALL(ACCESS_FILE, .FIB[FIB$L_ACCTL], .PACKET[IRP$L_PID], 1,
	    .FIB[FIB$V_WRITE], .ABD);
	KERNEL_CALL(START_VIO);			! start virtual io
	RETURN;

	END;

    END;


ROUTINE CHECK_FIND : COMMON_CALL =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine calls the directory search and intercepts any error
!	exits to handle the create if non-existent function. If the search
!	is successful, the routine returns success; if the search fails with
!	no such file and the create subfunction bit is set, it returns failure;
!	all other errors are resignaled.
!
!
! CALLING SEQUENCE:
!	CHECK_FIND ()
!
! INPUT PARAMETERS:
!	None
!
! IMPLICIT INPUTS:
!	None
!
! OUTPUT PARAMETERS:
!	None
!
! IMPLICIT OUTPUTS:
!	None
!
! ROUTINE VALUE:
!	1 if find is successful
!	0 if file is to be created
!
! SIDE EFFECTS:
!	None
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_REG;

    BUILTIN
	FP;

    EXTERNAL ROUTINE
	FIND_FILE	: COMMON_CALL;		! find file in directory

    ! Establish the condition handler and call FIND. If we hear from it we
    ! return true. Any signals cause either unwind or resignal.
    !
    .FP = HANDLER;
    FIND_FILE();
    RETURN 1;

    END;					! end of routine CHECK_FIND

ROUTINE HANDLER (SIGNAL, MECHANISM) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine is the condition handler for the conditional find call.
!	It intercepts the error exit from FIND and unwinds to CHECK_FIND's
!	caller when appropriate.
!
!
! CALLING SEQUENCE:
!	HANDLER (ARG1, ARG2)
!
! INPUT PARAMETERS:
!	ARG1: address of signal array
!	ARG2: address of mechanism array
!
! IMPLICIT INPUTS:
!	None
!
! OUTPUT PARAMETERS:
!	None
!
! IMPLICIT OUTPUTS:
!	None
!
! ROUTINE VALUE:
!	SS$_RESIGNAL or none if unwind
!
! SIDE EFFECTS:
!	None
!
!--

    BEGIN

    MAP
	SIGNAL		: REF BBLOCK,			! signal arg array
	MECHANISM	: REF BBLOCK;			! mechanism arg array

    EXTERNAL ROUTINE
	SYS$UNWIND	: ADDRESSING_MODE (ABSOLUTE);	! system unwind service

    EXTERNAL
	LOCAL_FIB	: BBLOCK;			! copy of user's fib

    ! If the condition is change mode to user (error exit) and the status is
    ! no such file, cause an unwind to return 0 to the access main line.
    ! Otherwise, just resignal the condition.
    !

    IF .SIGNAL[CHF$L_SIG_NAME] EQL SS$_CMODUSER
	AND
	.SIGNAL[CHF$L_SIG_ARG1] EQL SS$_NOSUCHFILE
    THEN
	BEGIN

	IF .LOCAL_FIB[FIB$V_WILD]
	THEN
	    BEGIN
	    IF .LOCAL_FIB[FIB$L_WCC] NEQ 0
	    THEN
		BEGIN
		SIGNAL[CHF$L_SIG_ARG1] = SS$_NOMOREFILES;

		! clear context if at end of search
		!
		LOCAL_FIB[FIB$L_WCC] = 0;
		END;
	    END
	ELSE
	    BEGIN

	    ! clear context if at end of search
	    !
	    LOCAL_FIB[FIB$L_WCC] = 0;

	    MECHANISM[CHF$L_MCH_SAVR0] = 0;
	    SYS$UNWIND(0, 0);
	    END;

	END;

    RETURN SS$_RESIGNAL;		! status is irrelevant if unwinding

    END;					! end of routine HANDLER
END

ELUDOM
