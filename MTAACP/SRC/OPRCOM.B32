
MODULE OPRCOM (LANGUAGE (BLISS32) ,
		IDENT = 'V03-000'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  MTAACP
!
! ABSTRACT:
!	This module communicates with the operator
!
!
! ENVIRONMENT:
!
!	VMS operating system, including privileged system services
!	and internal exec routines.
!
!--

!
!
! AUTHOR:  D. H. GILLESPIE,	 CREATION DATE:  24-AUG-1977
!
! MODIFIED BY:
!
!	V03-006 DMW00078	David Michael Walp	 8-Feb-1982
!		Fixed pushing and poping of Username and Account CTL
!		fields around opreator request.
!
!	V03-005 DMW00021	David Michael Walp	26-May-1981
!		Move GOLBAL LITERAL WORK_AREA_SZ to MTADEF.
!
!	V02-004	REFORMAT	Maria del C. Nasr	30-Jun-1980
!
!**

LIBRARY 'SYS$LIBRARY:LIB.L32';

REQUIRE 'SRC$:MTADEF.B32';

REQUIRE 'LIBD$:[VMSLIB.OBJ]MOUNTMSG.B32';

FORWARD ROUTINE
    CANCEL_OP_REPLY	: COMMON_CALL NOVALUE,	! cancel reply from operator
    FILL_PROC	: COMMON_CALL NOVALUE,
    PRINT_NOT_LABEL	: NOVALUE JSB,		! print not correct label
    PRINT_OPR_MSG	: L$PRINT_OPR_MSG,	! print operator message
    SEND_MSG	: COMMON_CALL;			! send msg to tape operator

GLOBAL
    WORK_AREA	: VECTOR [WORK_AREA_SZ, BYTE];

EXTERNAL
    CTL$T_USERNAME	: ADDRESSING_MODE (ABSOLUTE),
    CTL$T_ACCOUNT	: ADDRESSING_MODE (ABSOLUTE),
    CURRENT_UCB	: REF BBLOCK,			! address of current unit control block
    MAIL_CHANNEL;				! channel for reply mailbox

! SETUP MESSAGE DESCRIPTOR AND BUFFER IN WORK AREA

BIND
    DESCR = WORK_AREA	: VECTOR [2],
    MSG = WORK_AREA + 8	: BBLOCK;


ROUTINE SEND_MSG (MB_CHANNEL) : COMMON_CALL =

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine formats and sends a message to the tape operator
!
! CALLING SEQUENCE:
!	SEND_MSG()
!
! INPUT PARAMETERS:
!	ARG1 - mailbox channel number
!
! IMPLICIT INPUTS:
!	CURRENT_VCB - address of current volume control block
!	DESCR[0] - length of text to be sent
!	MSG[OPC$L_MS_TEXT] - text to be sent
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	message sent
!
! ROUTINE VALUE:
!	SS$_DEVOFFLIN - no operator
!	SS$_MBTOOSML  - mailbox too small for message
!
! SIDE EFFECTS:
!	NONE
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_REG;

    EXTERNAL
	ACP_USERNAME : VECTOR [ , BYTE ],
	ACP_ACCOUNT  : VECTOR [ , BYTE ];

    BIND
	SECONDS = UPLIT (-10000000, -1);

    LOCAL
	VVP    : REF BBLOCK,
	STATUS;					! status of mailbox write

    ! format message header
    !
    MSG[OPC$B_MS_TARGET] = OPR$M_TAPES;
    MSG[OPC$L_MS_RPLYID] = .CURRENT_VCB;	! id if reply
    DESCR[0] = .DESCR[0] + $BYTEOFFSET(OPC$L_MS_TEXT);
    DESCR[1] = MSG;
    VVP	= .CURRENT_VCB [ VCB$L_VPFL ];

    INCR J FROM 0 TO 119 DO 			! wait two minutes
	BEGIN
	
	! make it look like the user is making the opcom request
	!
	KERNEL_CALL ( FILL_PROC, VVP[VVP$T_USERNAME], VVP[VVP$T_ACCOUNT] );

	STATUS = $SNDOPR ( MSGBUF = DESCR, CHAN = .MB_CHANNEL );

	KERNEL_CALL ( FILL_PROC, ACP_USERNAME, ACP_ACCOUNT );

	IF .STATUS
	    OR
	    (.STATUS NEQ SS$_INSFMEM
	    AND
	    .STATUS NEQ SS$_MBFULL)
	THEN
	    EXITLOOP;				! if temporary problem, then repeat

	IF $SETIMR(DAYTIM = SECONDS, EFN = TIMEFN)
	THEN
	    $WAITFR(EFN = TIMEFN);

	END;

    RETURN .STATUS;

    END;					! end of routine


GLOBAL ROUTINE PRINT_NOT_LABEL (MVL_ENTRY) : JSB NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine prints at the tape operator's terminal the message
!	'vol on mtax: not xxxx'
!
! CALLING SEQUENCE:
!	PRINT_NOT_LABEL(ARG1)
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	CURRENT_UCB - address of current unit control block
!	CURRENT_VCB - address of current volume control block
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	Message printed at tape operator's terminal unless
!	there is no operator or the mailbox is too small
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_REG;

    LOCAL
	LABEL_ADDR	: REF VECTOR [, BYTE],	! address of label
	LABEL_SZ;

    MAP
	MVL_ENTRY	: REF BBLOCK;		! address of volume entry in mvl

    LABEL_ADDR = MVL_ENTRY[MVL$T_VOLLBL];
    LABEL_SZ = 0;

    ! flush out trailing blanks
    !

    INCR I FROM 0 TO MVL$S_VOLLBL - 1 DO
	BEGIN

	IF .LABEL_ADDR[.I] EQL ' '
	THEN
	    EXITLOOP;

	LABEL_SZ = .LABEL_SZ + 1;
	END;

    PRINT_OPR_MSG(MOUN$_NOTLABEL, 0, .LABEL_SZ, .LABEL_ADDR,
	BBLOCK[.CURRENT_UCB[UCB$L_DDB], DDB$T_NAME], .CURRENT_UCB[UCB$W_UNIT]);
    END;					! end of routine


GLOBAL ROUTINE CANCEL_OP_REPLY : COMMON_CALL NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine cancels a request sent to the operator
!
! CALLING SEQUENCE:
!	CANCEL_OP_REPLY()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	CURRENT_VCB - address of current volume control block
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
! USER ERRORS:
!	NONE
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_REG;

    MSG[OPC$B_MS_TYPE] = OPC$_RQ_CANCEL;
    DESCR[0] = 0;				! no message text
    RETURN SEND_MSG(.MAIL_CHANNEL);

    END;


GLOBAL ROUTINE PRINT_OPR_MSG (MSGNO, CHANNEL, ARGLIST) : L$PRINT_OPR_MSG =

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine gets a system message, formats the messages and
!	prints it.
!
! CALLING SEQUENCE:
!	PRINT_OPR_MSG(ARG1,ARG2,ARG3)
!
! INPUT PARAMETERS:
!	ARG1 - system message number
!	ARG2 - channel number for reply if one is wanted
!	ARG3 - arguments for inclusion in message
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	status code from send to operator
!
! SIDE EFFECTS:
!	DATA is used as a work area(also used by RDATTR)
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_REG;

    EXTERNAL ROUTINE
	SYS$FAOL	: ADDRESSING_MODE (ABSOLUTE),
	SYS$GETMSG	: ADDRESSING_MODE (ABSOLUTE);

    EXTERNAL
	DATA;

    LOCAL
	DESCR_FAOSTR	: VECTOR [2];

    DESCR_FAOSTR[0] = 256;
    DESCR_FAOSTR[1] = DATA;
    SYS$GETMSG(.MSGNO, DESCR_FAOSTR, DESCR_FAOSTR, 1, 0);
    DESCR[0] = WORK_AREA_SZ - 8 - $BYTEOFFSET(OPC$L_MS_TEXT);
    DESCR[1] = MSG[OPC$L_MS_TEXT];
    SYS$FAOL(DESCR_FAOSTR, DESCR, DESCR, ARGLIST);
    MSG[OPC$B_MS_TYPE] = OPC$_RQ_RQST;
    (

    LOCAL
	STATUS;

    STATUS = SEND_MSG(.CHANNEL);

    IF NOT .STATUS
    THEN
	RETURN .STATUS);

    RETURN 1;

    END;					! end of routine PRINT_OPR_MSG


ROUTINE FILL_PROC ( USERNAME, ACCOUNT ) : COMMON_CALL NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine fills in the username and account in P1 space.  So
!	Opcom messages look like they are coming from the user rather then
!	ACP
!
! CALLING SEQUENCE:
!	FILE_PROC ( AGR1, ARG2 ) in kernel mode
!
! INPUT PARAMETERS:
!	ARG1 - address of username string
!	ARG2 - address of account name string
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
!--

    BEGIN

    MAP
	USERNAME : REF VECTOR [ , BYTE ],
	ACCOUNT  : REF VECTOR [ , BYTE ];

    CH$MOVE ( VVP$S_USERNAME, .USERNAME, CTL$T_USERNAME);
    CH$MOVE ( VVP$S_ACCOUNT,  .ACCOUNT,  CTL$T_ACCOUNT);
    END;
END

ELUDOM
