MODULE PARSE ( LANGUAGE ( BLISS32 ),
		IDENT = 'V03-000'
		 ) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  MTAACP
!
! ABSTRACT:
!	This module parses the file identification field in the HDR1 or file
!	 name string and generates and returns resultant file spec string.
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines.
!
!--

!
!
! AUTHOR:  David Michael Walp,	 CREATION DATE:  17-NOV-1981
!
! MODIFIED BY:
!
!	V03-002	DMW00072	David Michael Walp	28-Jan-1981
!		Fix wildcard characters in quoted string problem
!
!	V03-001	DMW00067	David Michael Walp	11-Jan-1981
!		Accept ANSI name in quotes thru file name parameters
!
!**

LIBRARY 'SYS$LIBRARY:LIB.L32';

REQUIRE 'SRC$:MTADEF.B32';

FORWARD ROUTINE
    CALC_VERSION	    : NOVALUE,	    ! calculate VMS version from ANSI
    PARSE_HDR1_FID,			    ! parse the file id fields in HDR1
    PARSE_NAME_TYPE,			    ! parse a filespec into name + type
    PARSE_PATTERN_SPEC	    : COMMON_CALL,  ! parse a input wildcard file spec
    PARSE_QUOTED_NAME	    : COMMON_CALL NOVALUE, ! parse a quoted 17 ANSI "a"
					    !	       character file name
    RESULTANT_STRING	    : COMMON_CALL NOVALUE, ! prepare and return the
					    !	       resultant string name
    RETURN_RESULTANT_SPEC,		    ! write back file name information
    STRIP_VERSION	    : COMMON_CALL;  ! strips the version from file spec

!++
!
! UPLIT was used instead of CH$TRANSTABLE here, the code produced is the
!  same (ie the constant string generated).  UPLIT was used because
!  CH$TRANSTABLE generates a warning error because more then a single
!  character at a time is specified in the %ASCII. ( BLISS KLUDGE )
!
!--

GLOBAL BIND

    ! This table will upcase a..z and return '@' for any non ANSI
    !  'a' characters.  Bad characters are thus flaged.
    !
    ANSI_A_BAD   = UPLIT BYTE ( %ASCII '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@',
				%ASCII ' !"@@%&''()*+,-./0123456789:;<=>?',
				%ASCII '@ABCDEFGHIJKLMNOPQRSTUVWXYZ@@@@@',
				%ASCII '@ABCDEFGHIJKLMNOPQRSTUVWXYZ@@@@@',
				%ASCII '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@',
				%ASCII '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@',
				%ASCII '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@',
				%ASCII '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@' ),
				
    ! This table will upcase a..z and return space for any non ANSI
    !  'a' characters.  Thus bad characters are converted to good characters.
    !
    ANSI_A_GOOD  = UPLIT BYTE ( %ASCII '                                ',
				%ASCII ' !"  %&''()*+,-./0123456789:;<=>?',
				%ASCII ' ABCDEFGHIJKLMNOPQRSTUVWXYZ     ',
				%ASCII ' ABCDEFGHIJKLMNOPQRSTUVWXYZ     ',
				%ASCII '                                ',
				%ASCII '                                ',
				%ASCII '                                ',
				%ASCII '                                ' ),

    ! point to a '@'
    !
    ESC_CHAR = ANSI_A_BAD;
				
BIND

    ! This table will upcase a..z and return '@' for any non-VMS character
    !  including wild cards
    !
    VMS_NO_WILD  = UPLIT BYTE ( %ASCII '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@',
				%ASCII '@@@@@@@@@@@@@@@@0123456789@@@@@@',
				%ASCII '@ABCDEFGHIJKLMNOPQRSTUVWXYZ@@@@@',
				%ASCII '@ABCDEFGHIJKLMNOPQRSTUVWXYZ@@@@@',
				%ASCII '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@',
				%ASCII '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@',
				%ASCII '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@',
				%ASCII '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@' ),
				

    ! This table will upcase a..z and return '@' for any non-VMS character
    !  wild cards ( %, * ) are valid characters in this table
    !
    VMS_WILD	 = UPLIT BYTE ( %ASCII '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@',
				%ASCII '@@@@@%@@@@*@@@@@0123456789@@@@@@',
				%ASCII '@ABCDEFGHIJKLMNOPQRSTUVWXYZ@@@@@',
				%ASCII '@ABCDEFGHIJKLMNOPQRSTUVWXYZ@@@@@',
				%ASCII '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@',
				%ASCII '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@',
				%ASCII '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@',
				%ASCII '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@' );
				

GLOBAL ROUTINE PARSE_NAME_TYPE ( WILD_CARDS,
				 SPEC_LEN,
				 SPEC_PTR,
				 OUT_DESC ) =

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine parses a file specification string into a name and type
!	fields
!
! CALLING SEQUENCE:
!	error = PARSE_NAME_TYPE ( ARG1, ARG2, ARG3, ARG4 )
!
! INPUT PARAMETERS:
!	ARG1 - flags for "if wild cards are valid"
!	ARG2 - the length of the file specification
!	ARG3 - the address of the file specification
!
! IMPLICIT INPUTS:
!	none
!
! OUTPUT PARAMETERS:
!	ARG4 - pointer to the output buffer - size is updated
!		  ASSUMED THAT OUTPUT BUFFER >= 13 BYTES
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	error code - SS$_NORMAL
!		   - SS$_BADFILENAME
!
! SIDE EFFECTS:
!	none
!
!--

    BEGIN

    MAP
	WILD_CARDS  : BITVECTOR [ 1 ],
	SPEC_LEN    : LONG,
	SPEC_PTR    : REF VECTOR [  , BYTE ],
	OUT_DESC    : REF VECTOR [ 2, LONG ];

    EXTERNAL
	LOCAL_FIB   : BBLOCK;

    LITERAL
	MAX_NAME_FIELD_LEN = 9,
	MAX_TYPE_FIELD_LEN = 3;

    LOCAL
	IN_INDEX    : LONG,			! index into input file spec
	OUT_INDEX   : LONG,			! index into output file spec
	REM_LEN	    : LONG,			! size minus type field
	TABLE	    : REF VECTOR [ 128, BYTE ], ! ptr to VMS file spec chars
	TYPE_LEN    : LONG;			! size of type field
    BIND
	OUT_BUF	= OUT_DESC [ 1 ] : REF VECTOR [ , BYTE ];

    ! set up which table is to be use for translation
    !
    TABLE = ( IF .WILD_CARDS [ 0 ] THEN VMS_WILD ELSE VMS_NO_WILD );

    !++
    !
    ! PARSE the name field
    !
    !--
    ! find the dot in the spec ( IN_INDEX points to it )
    ! point to the end of the spec if not found
    ! calculate the size of the name field
    !
    IN_INDEX = CH$FIND_CH ( .SPEC_LEN, SPEC_PTR [ 0 ], '.' );
    IN_INDEX = ( IF CH$FAIL ( .IN_INDEX )
		 THEN .SPEC_LEN
		 ELSE .IN_INDEX - SPEC_PTR [ 0 ] );

    ! test if the name field is too long
    !
    IF ( .IN_INDEX GTR MAX_NAME_FIELD_LEN ) THEN RETURN SS$_BADFILENAME;
	
    ! move string into the output buffer and
    ! test for invalid characters in the name field
    !
    IF 0 NEQ MOVTUC ( IN_INDEX, SPEC_PTR [ 0 ], ESC_CHAR, .TABLE,
		      IN_INDEX, OUT_BUF  [ 0 ] )
    THEN RETURN SS$_BADFILENAME;

    ! if all wild name flag is set stuff "*" into output buffer
    ! adjust output index
    !
    IF .WILD_CARDS [ 0 ] AND .LOCAL_FIB [ FIB$V_ALLNAM ]
    THEN
	BEGIN
	OUT_BUF [ 0 ] = '*';
	OUT_INDEX     = 1;
	END
    ELSE OUT_INDEX = .IN_INDEX;

    ! stuff the dot into the output buffer
    !
    OUT_BUF [ .OUT_INDEX ] = '.'; 

    !++
    !
    ! PARSE the type field
    !
    !--
    ! OUT_INDEX now points to the next avaliable output character
    ! IN_INDEX  now points to the start of type field
    !
    OUT_INDEX = .OUT_INDEX + 1;
    IN_INDEX  = .IN_INDEX  + 1;

    ! find the end of the type field
    !
    REM_LEN  = .SPEC_LEN - .IN_INDEX;
    TYPE_LEN = CH$FIND_CH ( .REM_LEN, SPEC_PTR [ .IN_INDEX ], ' ' );
    TYPE_LEN = ( IF CH$FAIL ( .TYPE_LEN )
		 THEN .REM_LEN
		 ELSE .TYPE_LEN - SPEC_PTR [ .IN_INDEX ] );

    ! test if the type field is too long
    !
    IF ( .TYPE_LEN GTR MAX_TYPE_FIELD_LEN ) THEN RETURN SS$_BADFILENAME;
	
    ! test if all trailing characters are spaces
    !
    REM_LEN  = .REM_LEN - .TYPE_LEN;
    IF NOT CH$FAIL ( 
	  CH$FIND_NOT_CH ( .REM_LEN, SPEC_PTR [ .IN_INDEX + .TYPE_LEN ], ' ' ))
    THEN RETURN SS$_BADFILENAME;

    ! move string into the output buffer
    ! test for invalid characters in the type field 
    !
    REM_LEN = .OUT_DESC [ 0 ] - .OUT_INDEX;
    IF 0 NEQ MOVTUC ( TYPE_LEN, SPEC_PTR [ .IN_INDEX  ], ESC_CHAR, .TABLE,
		      REM_LEN,  OUT_BUF  [ .OUT_INDEX ] )
    THEN RETURN SS$_BADFILENAME;

    ! if all wild type flag is set stuff "*" into output buffer
    ! adjust output length
    !
    IF .WILD_CARDS [ 0 ] AND .LOCAL_FIB [ FIB$V_ALLTYP ]
    THEN
	BEGIN
	OUT_BUF [ .OUT_INDEX ] = '*';
	OUT_DESC [ 0 ] = .OUT_INDEX + 1;
	END
    ELSE OUT_DESC [ 0 ] = .OUT_INDEX + .TYPE_LEN;

    RETURN SS$_NORMAL;
    END;			    ! end of routine PARSE_NAME_TYPE

GLOBAL ROUTINE PARSE_QUOTED_NAME ( SPEC_LEN,
				   SPEC_PTR,
				   OUT_DESC ) : COMMON_CALL NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!	Parses a quoted name string.  It is ASSUMED that the string has had
!	the outer quotes stripped away ( STRIP_VERSION does this ).  This
!	routine will check all the characters in the string are valid ANSI "a",
!       will compress double quotes to single quotes and check that the final
!	string is no larger then 17 characters.  It will error exit if
!	something is found to be incorrect.
!
! CALLING SEQUENCE:
!	PARSE_QUOTED_NAME ( ARG1, ARG2, ARG3 )
!
! INPUT PARAMETERS:
!	ARG1 - The size of the input string
!	ARG2 - The address of the input string
!
! IMPLICIT INPUTS:
!	none
!
! OUTPUT PARAMETERS:
!	ARG3 - The address of a descriptor pointing to the output buffer.  The
!		 size field is updated.	 ASSUMED OUTPUT BUFFER SIZE >= 17 BYTES
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	none
!
! SIDE EFFECTS:
!	none
!
!--

    BEGIN

    EXTERNAL REGISTER				! so we can call ERR_EXIT
	COMMON_REG;

    MAP
	SPEC_LEN    : LONG,
	SPEC_PTR    : REF VECTOR [  , BYTE ],
	OUT_DESC    : REF VECTOR [ 2, LONG ];

    LOCAL
	IN_INDEX    : LONG,		    ! index into the input string
	MOVE_SIZE   : LONG,	    	    ! number of characters to be moved
	QUOTE_CHAR  : REF VECTOR [ , BYTE ];! location of a quota character
	    
    BIND
	OUT_INDEX   = OUT_DESC [ 0 ],
	OUT_BUF	    = OUT_DESC [ 1 ] : REF VECTOR [ , BYTE ];

    ! initialize the indices
    !
    IN_INDEX  = 0;
    OUT_INDEX = 0;		
	    
    ! loop for each string ending with a quote
    !
    WHILE NOT CH$FAIL ( 
	     QUOTE_CHAR = CH$FIND_CH ( .SPEC_LEN, SPEC_PTR [ .IN_INDEX ], '"' )
								) DO
	BEGIN

	! calculate the number of characters to be moved
	! and test for output buffer overflow
	!
	MOVE_SIZE = ( .QUOTE_CHAR - SPEC_PTR [ .IN_INDEX ] ) + 1;
	IF ( .MOVE_SIZE + .OUT_INDEX ) GTR 17
	THEN ERR_EXIT ( SS$_BADFILENAME );

	! adjust the number of characters remaining
	! check that the next character is there and is a quote
	!
	SPEC_LEN  = .SPEC_LEN - ( .MOVE_SIZE + 1 );
	IF ( .SPEC_LEN LSS 0 ) OR ( .QUOTE_CHAR [ 1 ] NEQ '"' )
	THEN ERR_EXIT ( SS$_BADFILENAME );

	! move and test for invalid the characters   Including the quote
	! character in the move
	!
	IF 0 NEQ MOVTUC ( MOVE_SIZE, SPEC_PTR [ .IN_INDEX  ], ESC_CHAR,
	      ANSI_A_BAD, MOVE_SIZE, OUT_BUF  [ .OUT_INDEX ] )
	THEN ERR_EXIT ( SS$_BADFILENAME );

	! adjust the indices
	!
	IN_INDEX  = .IN_INDEX  + .MOVE_SIZE + 1;
	OUT_INDEX = .OUT_INDEX + .MOVE_SIZE;
	END;

    ! test for output buffer overflow
    !
    IF ( .SPEC_LEN + .OUT_INDEX ) GTR 17
    THEN ERR_EXIT ( SS$_BADFILENAME );

    ! move and check for invalid character
    !
    IF 0 NEQ MOVTUC ( SPEC_LEN, SPEC_PTR [ .IN_INDEX  ], ESC_CHAR, ANSI_A_BAD,
		      SPEC_LEN, OUT_BUF  [ .OUT_INDEX ] )
    THEN ERR_EXIT ( SS$_BADFILENAME );
    OUT_INDEX = .OUT_INDEX + .SPEC_LEN;

    END;			    ! end of routine PARSE_QUOTED_NAME

GLOBAL ROUTINE STRIP_VERSION ( FILE_SPEC_LEN,
			       FILE_SPEC_PTR,
			       WILD_VERSION,
			       QUOTED_NAME
			     ) : COMMON_CALL =

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine strips the version number from a ASCII VMS file
!	 specification, and if the file spec contains a quoted name the outer
!	 quotes are stripped by adjusting the pointer and size parameters and
!	 a check is make for a null type field.
!
! CALLING SEQUENCE:
!	version_number = STRIP_VERSION ( ARG1, ARG2, ARG3, ARG4 )
!
! INPUT PARAMETERS:
!	ARG1 - the length of the file specification
!	ARG2 - the address of the address of the file specification buffer
!	ARG3 - flag set if wild card version is allowed
!
! IMPLICIT INPUTS:
!	none
!
! OUTPUT PARAMETERS:
!	ARG1 - the length of the file specification minus the version number
!		and it delimiter
!	ARG2 - the address of the file specification
!	ARG4 - A flag set if a quoted name was found
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	the version number
!
! SIDE EFFECTS:
!	none
!
!--

    BEGIN

    EXTERNAL ROUTINE				! ASCII decimal to binary
	LIB$CVT_DTB	: ADDRESSING_MODE ( ABSOLUTE );

    EXTERNAL REGISTER				! so we can call ERR_EXIT
	COMMON_REG;

    MAP
	FILE_SPEC_LEN	: REF VECTOR [ 1, LONG ],! the size of the file spec
	FILE_SPEC_PTR	: REF VECTOR [ 1, LONG ],! ptr to the file spec ptr
	WILD_VERSION	: BITVECTOR  [ 1 ],	! wild version allowed flag
	QUOTED_NAME	: REF BITVECTOR  [ 1 ];	! quoted name, return flag

    BIND
	FILE_SPEC_BUF	= FILE_SPEC_PTR [ 0 ] : REF VECTOR [ , BYTE ];
						! point to the file spec buffer

    LOCAL
	QUOTED_NAME_LEN : LONG,			! length of the quoted string
	QUOTED_NAME_PTR : LONG,			! address of the quoted string
	VERSION		: LONG,			! the version number
	VERSION_PTR	: REF VECTOR [ , BYTE ],! ptr to the ASCII version
	VERSION_LEN	: LONG;			! the size of ASCII version


    ! test for the quoted string in the name field
    !
    QUOTED_NAME [ 0 ] = FALSE;
    IF ( .FILE_SPEC_LEN [ 0 ] GEQ 2 ) AND ( .FILE_SPEC_BUF [ 0 ] EQL '"' )
    THEN
	BEGIN
	LABEL FIND_END_QUOTE;

	FIND_END_QUOTE:
	    BEGIN

	    ! Loop from the end of the string forward until a '"' is found
	    ! Note: if the last character is " the name is invalid because
	    !	    at least a version delimitor is needed
	    !
	    DECR I FROM ( .FILE_SPEC_LEN [ 0 ] - 2 ) TO 1 DO
		IF .FILE_SPEC_BUF [ .I ] EQL '"'
		THEN
		    BEGIN

		    ! found a quoted string save the info and set FILE_SPEC_xxx
		    !  to point to the rest of the string
		    !
		    QUOTED_NAME [ 0 ]   = TRUE;
		    QUOTED_NAME_PTR	= FILE_SPEC_BUF [ 1 ];
		    QUOTED_NAME_LEN	= .I - 1;
		    FILE_SPEC_PTR [ 0 ] = FILE_SPEC_BUF [ .I + 1 ];
		    FILE_SPEC_LEN [ 0 ] = .FILE_SPEC_LEN [ 0 ] - ( .I + 1 );
		    LEAVE FIND_END_QUOTE;
		    END;

	    ! Never found the end quote so err_exit
	    !
	    ERR_EXIT ( SS$_BADFILENAME );
	    END;

	! test for a null type field which is:
	!   ;nnnnn
	!   .;nnnnn	    where nnnnn is zero or more digits
	!   ..nnnnn
	!
	IF  ( .FILE_SPEC_LEN [ 0 ] GEQU 1 )
	AND ( .FILE_SPEC_BUF [ 0 ] EQL ';')
	THEN VERSION_PTR = FILE_SPEC_BUF [ 0 ]

	ELSE IF ( .FILE_SPEC_LEN [ 0 ] GEQU 2 )
	    AND ( .FILE_SPEC_BUF [ 0 ] EQL '.' )
	    AND (    ( .FILE_SPEC_BUF [ 1 ] EQL '.')
		  OR ( .FILE_SPEC_BUF [ 1 ] EQL ';'))
	    THEN VERSION_PTR = FILE_SPEC_BUF [ 1 ]
	    ELSE ERR_EXIT ( SS$_BADFILENAME );
	END

    ELSE
	BEGIN

	! We have a normal VMS file specification
	! check for ";version number"
	!
	VERSION_PTR = CH$FIND_CH ( .FILE_SPEC_LEN [ 0 ],
				   .FILE_SPEC_PTR [ 0 ],
				   ';' );
	IF CH$FAIL ( .VERSION_PTR ) 
	THEN
	    BEGIN

	    ! now look for "..version number"
	    !
	    VERSION_PTR = CH$FIND_CH ( .FILE_SPEC_LEN [ 0 ], 
				       .FILE_SPEC_PTR [ 0 ],
				       '.' );
	    IF CH$FAIL ( .VERSION_PTR ) THEN ERR_EXIT ( SS$_BADFILENAME );

	    ! move pass the delimitor and look for the second dot
	    !
	    VERSION_PTR = .VERSION_PTR + 1;
	    VERSION_LEN = .FILE_SPEC_LEN [ 0 ] -
				       ( .VERSION_PTR - .FILE_SPEC_PTR [ 0 ] );
	    VERSION_PTR = CH$FIND_CH ( .VERSION_LEN, .VERSION_PTR, '.' );
	    IF CH$FAIL ( .VERSION_PTR ) THEN ERR_EXIT ( SS$_BADFILEVER );
	    END;
	END;

    ! move pass the delimitor and to the ASCII decimal number
    !
    VERSION_PTR = .VERSION_PTR + 1;

    ! ASCII to binary translation, if wildcards are allowed turn "*" into 0
    ! Note: a version number size of zero is valid and will be returned as zero
    ! Note: the version number size will never be less than zero
    !
    VERSION_LEN = .FILE_SPEC_LEN [ 0 ] - 
				       ( .VERSION_PTR - .FILE_SPEC_PTR [ 0 ] );
    IF NOT LIB$CVT_DTB ( .VERSION_LEN, .VERSION_PTR, VERSION ) 
    THEN IF  .WILD_VERSION [ 0 ] 
	 AND ( .VERSION_LEN EQL 1 )
	 AND ( .VERSION_PTR [ 0 ] EQL '*' )
	 THEN VERSION = 0
	 ELSE ERR_EXIT ( SS$_BADFILEVER );

    ! adjust the pointer and size fields of the name and type field
    !
    IF .QUOTED_NAME [ 0 ]
    THEN
	BEGIN

	!  a quoted name return saved size and pointer
	!
	FILE_SPEC_LEN [ 0 ] = .QUOTED_NAME_LEN;
	FILE_SPEC_PTR [ 0 ] = .QUOTED_NAME_PTR;
	END

    ELSE
	! return the size of the file name and type minus the version number
	! and its delimitor
	!
	FILE_SPEC_LEN [ 0 ] = .FILE_SPEC_LEN [ 0 ] - ( .VERSION_LEN + 1 );

    ! return the version number
    !
    RETURN .VERSION;
    END;			    ! end of routine STRIP_VERSION

GLOBAL ROUTINE CALC_VERSION ( VERSION ) : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine calculates version number from generation and generation
!	 version.
!
! CALLING SEQUENCE:
!	CALC_VERSION ( ARG1 )
!
! INPUT PARAMETERS:
!	None
!
! IMPLICIT INPUTS:
!	HDR1 - address of hdr1 label for current file
!
! OUTPUT PARAMETERS:
!	ARG1 - address of two bytes to receive binary version number
!
! IMPLICIT OUTPUTS:
!	None
!
! ROUTINE VALUE:
!	None
!
! SIDE EFFECTS:
!	ARG1 receives binary version number
!
!--

    BEGIN

    EXTERNAL
	HDR1	: REF BBLOCK;			! addr of HDR1 ( EOF1 ) label

    EXTERNAL ROUTINE
	LIB$CVT_DTB : ADDRESSING_MODE ( ABSOLUTE ); ! convert decimal to binary

    MAP
	VERSION : REF BBLOCK [ 2 ];		! a pointer to a word

    MACRO REF_WORD  = 0, 0, 16, 0 %;		! ref to the 1st word
    MACRO REF_15BIT = 0, 0, 15, 0 %;		! ref to the 1st fifteen bits

    LOCAL
	GEN_NUM : LONG,				! binary generation number
	GEN_VER : LONG;				! binary generation version

    ! clear version #
    !
    VERSION [ REF_WORD ] = 0;

    ! binary version # = (generation number - 1) * 100 + generation version + 1
    ! convert generation number to binary
    !
    IF LIB$CVT_DTB ( HD1$S_GENNO, HDR1[ HD1$T_GENNO ], GEN_NUM )
    THEN

	! convert gen version number to binary
	!
	IF LIB$CVT_DTB ( HD1$S_GENVER, HDR1 [ HD1$T_GENVER ], GEN_VER )
	THEN

	    ! NOTE: The HIGH BIT in the VERSION NUMBER is always ZERO
	    !
	    VERSION [ REF_15BIT ] = ( .GEN_NUM - 1 ) * 100 + .GEN_VER + 1;

    END;					! end of routine CALC_VERSION

GLOBAL ROUTINE PARSE_HDR1_FID ( FILE_SPEC_DESC,
				FILE_VERSION	) =

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine parses the File Identifier Field in HDR1 and calculates
!	the version number from the generation fields
!
! CALLING SEQUENCE:
!	vms_spec = PARSE_HDR1_FID ( ARG1, ARG2 )
!
! INPUT PARAMETERS:
!	ARG1 - descriptor to file specification output buffer
!		ASSUMED OUTPUT BUFFER SIZE >= 17 BYTES
!	ARG2 - pointer to a word to hold the version number
!
! IMPLICIT INPUTS:
!	HDR1 label
!
! OUTPUT PARAMETERS:
!	ARG1 - descriptor to file specification output buffer
!	ARG2 - pointer to a word to hold the version number
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	TRUE  - if the spec in HDR1 is a "VMS type specification"
!	FALSE - otherwise
!
! SIDE EFFECTS:
!	none
!
!--
    BEGIN

    EXTERNAL
	HDR1	: REF BBLOCK;			! addr of HDR1 ( EOF1 ) label

    MAP
	FILE_SPEC_DESC	: REF VECTOR [ 2, LONG ],
	FILE_VERSION	: REF VECTOR [ 1, WORD ];

    ! calculate the version number
    !
    CALC_VERSION ( .FILE_VERSION );
    
    ! Parse the file id field in the HDR1
    !
    IF NOT PARSE_NAME_TYPE ( FALSE, ! do not allow wild cards
			     HD1$S_FILEID,
			     HDR1 [ HD1$T_FILEID ],
			     .FILE_SPEC_DESC )
    THEN

	! if the parse failed then it is a ANSI name which does not conform to
	!  VMS file spec standards so... move the field from the header to the
	!  output buffer
	!
	BEGIN
	CH$TRANSLATE ( ANSI_A_GOOD, HD1$S_FILEID, HDR1 [ HD1$T_FILEID ], ' ',
				.FILE_SPEC_DESC [ 0 ], .FILE_SPEC_DESC [ 1 ] );
	FILE_SPEC_DESC [ 0 ] = HD1$S_FILEID;
	RETURN FALSE;
	END

    ELSE RETURN TRUE;

    END;				! end of routine PARSE_HDR1_FID

GLOBAL ROUTINE PARSE_PATTERN_SPEC ( FILE_SPEC_DESC,
				    FILE_VERSION
				  ) : COMMON_CALL =

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine parses a string given to the ACP by the user which is
!	 used as a pattern string matching string by the find operation
!
! CALLING SEQUENCE:
!	vms_spec = PARSE_PATTERN_SPEC ( ARG1, ARG2 )
!
! INPUT PARAMETERS:
!	ARG1 - descriptor to file specification output buffer
!		ASSUMED OUTPUT BUFFER SIZE >= 17 BYTES
!	ARG2 - pointer to a word to hold the version number
!
! IMPLICIT INPUTS:
!	IO_PACKET
!
! OUTPUT PARAMETERS:
!	ARG1 - descriptor to file specification output buffer
!	ARG2 - pointer to a word to hold the version number
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	Bit 0 set - if the spec is wild for quoted name. ie "*.*" or "*."
!	Bit 1 set - if it was a VMS spec
!
! SIDE EFFECTS:
!	none
!
!--
    BEGIN

    EXTERNAL REGISTER				! so we can call ERR_EXIT
	COMMON_REG;

    EXTERNAL
	IO_PACKET	: REF BBLOCK;

    MAP
	FILE_SPEC_DESC	: REF VECTOR [ 2, LONG ],
	FILE_VERSION	: REF VECTOR [ 1, WORD ];

    LITERAL
	WILD_QUOTED	= %B'01',
	IS_VMS_SPEC	= %B'10';

    LOCAL
	ABD		: REF BBLOCKVECTOR [ , ABD$C_LENGTH ],
					! ACP buffer descriptors
	ASCII_NAME_SPEC : BITVECTOR [ 1 ] PRESET ( [ 0 ] = FALSE ),
			  	      	! flag set if using ASCNAME attribute
	ATTR_PTR	: LONG,		! pointer into the ACP buffer descr
	ATTR_LENGTH	: LONG,		! length of the attribute
	INPUT_ADDR	: LONG,		! address of input file name string
	INPUT_LENGTH	: LONG,		! length of input file name string
	QUOTED_NAME	: BITVECTOR [ 1 ];! flag set if the file spec is in "s

    ABD = .BBLOCK [ .IO_PACKET [ IRP$L_SVAPTE ], AIB$L_DESCRIPT ];

    ! scan to see if the find should be done by the ASCII name attribute
    !
    DECRU I FROM ( .IO_PACKET[IRP$W_BCNT] - 1 ) TO ABD$C_ATTRIB DO
	BEGIN

	! find the attribute code and see if it matches ASCII name
	!
	ATTR_PTR = .ABD [ .I, ABD$W_TEXT ] + ABD [ .I, ABD$W_TEXT ];
	IF .(.ATTR_PTR)<0, 8> EQL ATR$C_ASCNAME
	THEN
	    BEGIN

	    ! set up the size of the attribute
	    !
	    ATTR_LENGTH = .ABD[.I, ABD$W_COUNT];

	    ! check length of file name
	    !
	    IF .ATTR_LENGTH LEQ HD1$S_FILEID
	    THEN
		BEGIN

		! set up the pointer to the attribute text
		!
		ATTR_PTR = .ATTR_PTR + 1;

		! translate into upper case and check for invalid characters
		!
		IF 0 EQL MOVTUC( ATTR_LENGTH, .ATTR_PTR, ESC_CHAR, ANSI_A_BAD,
				 FILE_SPEC_DESC [ 0 ], .FILE_SPEC_DESC [ 1 ] )
		THEN
		    BEGIN

		    ! we have a valid ANSI file spec to the find operation on
		    !
		    ASCII_NAME_SPEC [ 0 ] = TRUE;
		    FILE_SPEC_DESC [ 0 ] = .ATTR_LENGTH;
		    EXITLOOP;
		    END;

		END;

	    END;

	END;

    ! pick up the name pattern string from the name attribute
    !
    INPUT_LENGTH = .ABD [ ABD$C_NAME, ABD$W_COUNT ];
    INPUT_ADDR	 = .ABD [ ABD$C_NAME, ABD$W_TEXT ] 
		  + ABD [ ABD$C_NAME, ABD$W_TEXT ] + 1;

    ! strip the version number
    !
    FILE_VERSION [ 0 ] = STRIP_VERSION ( INPUT_LENGTH,
					 INPUT_ADDR,
					 TRUE,  ! allow wild cards
					 QUOTED_NAME
				       );
    
    ! parse the filename if not from ASCNAME
    !
    IF NOT .ASCII_NAME_SPEC [ 0 ]
    THEN
	BEGIN

	! call the correct parse routine
	!
	IF NOT .QUOTED_NAME [ 0 ]
	THEN
	    BEGIN

	    BIND
		STAR_DOT_STAR = UPLIT ( '*.*' ),
		STAR_DOT      = STAR_DOT_STAR;

	    ! parse the filename into name and type
	    !
	    IF NOT PARSE_NAME_TYPE ( TRUE, ! allow wild cards
				    .INPUT_LENGTH,
				    .INPUT_ADDR,
				    .FILE_SPEC_DESC )
	    THEN ERR_EXIT ( SS$_BADFILENAME );

	    ! test if "*.*" or "*." ( match all non-VMS file specs on tape )
	    !
	    IF CH$EQL ( 3,		       STAR_DOT_STAR,
			.FILE_SPEC_DESC [ 0 ], .FILE_SPEC_DESC [ 1 ], 0 )
	    THEN RETURN IS_VMS_SPEC OR WILD_QUOTED
	    ELSE
		BEGIN
		IF CH$EQL ( 2,			   STAR_DOT,
			    .FILE_SPEC_DESC [ 0 ], .FILE_SPEC_DESC [ 1 ], 0 )
		THEN RETURN IS_VMS_SPEC OR WILD_QUOTED
		ELSE RETURN IS_VMS_SPEC
		END;
	    END

	ELSE
	    BEGIN

	    ! Parse the quoted name string
	    !
	    PARSE_QUOTED_NAME ( .INPUT_LENGTH,
				.INPUT_ADDR,
				.FILE_SPEC_DESC );
	    RETURN FALSE;
	    END;
	END

    ELSE RETURN FALSE;

    END;				! end of routine PARSE_PATTERN_SPEC

GLOBAL ROUTINE RESULTANT_STRING ( VMS_NAME,
				  FILE_SPEC_LEN,
				  FILE_SPEC_PTR,
				  VERSION	 ) : COMMON_CALL NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine prepares and returns the resultant string name
!
! CALLING SEQUENCE:
!	RESULTANT_STRING ( ARG1, ARG2, ARG3, ARG4 )
!
! INPUT PARAMETERS:
!	ARG1 - flag ( set if a VMS file spec )
!	ARG2 - length of file specifiation ( name dot type )
!	ARG3 - pointer to file specification ( name dot type )
!	ARG4 - the file version number
!
! IMPLICIT INPUTS:
!	none
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	none
!
! SIDE EFFECTS:
!	resulant string is returned to the user
!
!--
    BEGIN

    EXTERNAL REGISTER COMMON_REG;		! so we can call ERR_EXIT

    EXTERNAL WORK_AREA;				! general use scratch area

    EXTERNAL ROUTINE
	SYS$FAO		: ADDRESSING_MODE ( ABSOLUTE ); ! format the string

    ! map the input agruments into data structures
    !
    MAP
	VMS_NAME	: BITVECTOR [ 1 ],
	FILE_SPEC_LEN	: LONG,
	FILE_SPEC_PTR	: REF VECTOR [ , BYTE ],
	VERSION		: LONG;

    LITERAL
	RESULTANT_MAX_LEN = 42;			! max size of resultant name

    LOCAL
	OUT_INDEX	: LONG,			! index into output buffer
	RESULTANT_DESC  : VECTOR [ 2, LONG ];	! descriptor for resultant name

    BIND 
	RESULTANT_NAME  = WORK_AREA : VECTOR [ RESULTANT_MAX_LEN, BYTE ],
	FAO_VERSION	= DESCRIPTOR ( ';!SW' ),
	STRIP_SIZE	= OUT_INDEX;		! redefine register


    ! string any trailing spaces from the file specification
    !
    STRIP_SIZE = 0;
    DECR I FROM ( .FILE_SPEC_LEN - 1 ) TO 0 DO
	IF .FILE_SPEC_PTR [ .I ] NEQ ' '
	THEN
	    BEGIN
	    STRIP_SIZE = .I + 1;
	    EXITLOOP;
	    END;
    FILE_SPEC_LEN = .STRIP_SIZE;

    ! move the ( name and type ) or ANSI file id into the output buffer
    !
    IF .VMS_NAME [ 0 ]
    THEN
	BEGIN

	! just move the fields if a VMS spec
	!
	CH$MOVE ( .FILE_SPEC_LEN, .FILE_SPEC_PTR, RESULTANT_NAME );
	OUT_INDEX = .FILE_SPEC_LEN;
	END

    ELSE
	BEGIN

	! ANSI spec is placed in quotes and all quotes goto double quotes
	!
	LOCAL
	    IN_INDEX	: LONG,	! index into the input string
	    MOVE_SIZE	: LONG, ! the number of characters to be moved
	    QUOTE_CHAR	: LONG;	! location of a quota character
	    
	! stuff initial quote into output buffer
	!
	RESULTANT_NAME [ 0 ] = '"';

	! initialize the indices
	!
	IN_INDEX  = 0;
	OUT_INDEX = 1;		
	    
	! loop for each string ending with a quote
	!
	WHILE NOT CH$FAIL ( 
		QUOTE_CHAR = CH$FIND_CH ( .FILE_SPEC_LEN,
					  FILE_SPEC_PTR [ .IN_INDEX ],
					  '"' )
								) DO
	    BEGIN

	    ! calculate the number of characters to be moved
	    ! and move the characters including the quote character
	    !
	    MOVE_SIZE = ( .QUOTE_CHAR - FILE_SPEC_PTR [ .IN_INDEX ] ) + 1;
	    CH$MOVE ( .MOVE_SIZE,
		      FILE_SPEC_PTR  [ .IN_INDEX ],
		      RESULTANT_NAME [ .OUT_INDEX ] );

	    ! adjust the indices, and the number of characters remaining
	    !
	    IN_INDEX	  = .IN_INDEX	   + .MOVE_SIZE;
	    OUT_INDEX	  = .OUT_INDEX     + .MOVE_SIZE;
	    FILE_SPEC_LEN = .FILE_SPEC_LEN - .MOVE_SIZE;

	    ! stuff extra quote characters, bump index
	    !
	    RESULTANT_NAME [ .OUT_INDEX ]     = '"';
	    OUT_INDEX = .OUT_INDEX + 1;
	    END;

	! move the remaining character into the output buffer
	!
	CH$MOVE ( .FILE_SPEC_LEN,
		  FILE_SPEC_PTR  [ .IN_INDEX ],
		  RESULTANT_NAME [ .OUT_INDEX ] );
	OUT_INDEX = .OUT_INDEX + .FILE_SPEC_LEN;

	! stuff final quote characters and null type, bump index
	!
	RESULTANT_NAME [ .OUT_INDEX ]     = '"';
	RESULTANT_NAME [ .OUT_INDEX + 1 ] = '.';
	OUT_INDEX = .OUT_INDEX + 2;
	END;

    ! adjust the descriptor to point to the remaining of the output buffer
    ! and FAO the version number into the output buffer
    !
    RESULTANT_DESC [ 0 ] = RESULTANT_MAX_LEN - .OUT_INDEX;
    RESULTANT_DESC [ 1 ] = RESULTANT_NAME [ .OUT_INDEX ];
    SYS$FAO ( FAO_VERSION, RESULTANT_DESC, RESULTANT_DESC, .VERSION );

    ! point the descriptor to the entire file spec in the output buffer
    !
    RESULTANT_DESC [ 0 ] = .RESULTANT_DESC [ 0 ] + .OUT_INDEX;
    RESULTANT_DESC [ 1 ] = RESULTANT_NAME;

    ! return the output buffer to the user
    !
    IF NOT KERNEL_CALL ( RETURN_RESULTANT_SPEC, RESULTANT_DESC )
    THEN ERR_EXIT ( );

    END;				! end of routine RESULTANT_STRING 

ROUTINE RETURN_RESULTANT_SPEC ( FILE_NAME_DESC ) =

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine enables the write-back of the result file name string.
!
! CALLING SEQUENCE:
!	RETURN_RESULTANT_SPEC ( ARG1 )
!	must be called in kernel access mode
!
! INPUT PARAMETERS:
!	ARG1 - address of file name string descriptor
!
! IMPLICIT INPUTS:
!	IO_PACKET - address of current request packet
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	0 - failure
!	1 - success
!
! SIDE EFFECTS:
!	enables write back
!
! USER ERRORS:
!	SS$_RESULTOVF - file name string overflows buffer
!--

    BEGIN

    LOCAL
	SIZE,					! size of write back data
	ABD	: REF BBLOCKVECTOR [ , ABD$C_LENGTH ];! addr of buffer descr

    MAP	FILE_NAME_DESC	: REF VECTOR [ 2, LONG ];! descr of file name string

    EXTERNAL
	IO_PACKET	: REF BBLOCK;		! address of current IRP

    ! get buffer descriptor address address of buffer descriptors
    !
    ABD = .BBLOCK [ .IO_PACKET [ IRP$L_SVAPTE ], AIB$L_DESCRIPT ];

    ! return length of result string
    !
    SIZE = .FILE_NAME_DESC [ 0 ];

    IF .ABD [ ABD$C_RESL, ABD$W_COUNT ] GEQU 2
    THEN
	( .ABD [ ABD$C_RESL, ABD$W_TEXT ] + 
	   ABD [ ABD$C_RESL, ABD$W_TEXT ] + 1 ) < 0, 16 > = .SIZE < 0, 16 >;


    IF .ABD [ ABD$C_RES, ABD$W_COUNT ] NEQ 0
    THEN
	BEGIN

	! if result string overflows buffer, return error
	!
	IF .SIZE GTRU .ABD [ ABD$C_RES, ABD$W_COUNT ]
	THEN
	    BEGIN
	    ERROR ( SS$_RESULTOVF );
	    RETURN 0;
	    END

	ELSE
	    CH$COPY ( .SIZE, .FILE_NAME_DESC [ 1 ], 0,
			  .ABD [ ABD$C_RES, ABD$W_COUNT ],
			( .ABD [ ABD$C_RES, ABD$W_TEXT ] +
			   ABD [ ABD$C_RES, ABD$W_TEXT ] + 1 ));
	END;

    RETURN 1;

    END;				! end of routine RETURN_RESULTANT_SPEC


END

ELUDOM
