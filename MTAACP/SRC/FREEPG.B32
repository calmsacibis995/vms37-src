
MODULE FREEPG (LANGUAGE (BLISS32) ,
		IDENT = 'V03-000'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  MTAACP
!
! ABSTRACT:
!	This module handles the requesting and returning of virtual pages.
!
! ENVIRONMENT:
!
!	Starlet operating system, including privileged system services
!	and internal exec routines.
!
!--

!
!
! AUTHOR:  D. H. GILLESPIE,	 CREATION DATE:  9-JUN-77
!
! MODIFIED BY:
!
!	V02-004 DMW00023	David Michael Walp	17-Jul-1981
!		Included change shipped with 2.4 plus improvements.  Added
!		additional comments through out the module.
!
!	V02-002	REFORMAT	Maria del C. Nasr	30-Jun-1980
!
!**

LIBRARY 'SYS$LIBRARY:LIB.L32';

REQUIRE 'SRC$:MTADEF.B32';


GLOBAL ROUTINE GET_FREE_PAGE (PAGES, ADDR) : COMMON_CALL NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine gets the requested number of contiguous pages from
!	the free page list.  If none are available, it expands virtual memory.
!
! CALLING SEQUENCE:
!	GET_FREE_PAGE(ARG1,ARG2)
!
! INPUT PARAMETERS:
!	ARG1 - number of pages
!	ARG2 - address of long word in which to return address of free page
!
! IMPLICIT INPUTS:
!	FREE_PAGE_HEAD	- head of free_page list
!	LAST_PAGE 	- last page of virtual memory
!
! OUTPUT PARAMETERS:
!	ARG2 - address of long word in which to return address of free page
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	none
!
! SIDE EFFECTS:
!	none
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_REG;

    EXTERNAL
	FREE_PAGE_HEAD	: REF BBLOCK,		! free page list head
	LAST_PAGE;				! address of last page

    EXTERNAL ROUTINE
	SYS$EXPREG : ADDRESSING_MODE (ABSOLUTE); ! expand region

    LOCAL
	SIZE,					! number of bytes requested
	FPAGE	: VECTOR [2],			! page references
	TOOBIG	: REF BBLOCK;			! address of space which is
						!  bigger than need be

    BIND
	FREEPAGE = FPAGE	: REF BBLOCK,
	ENDADDR = FPAGE[1];


    TOOBIG = 0;					! initialize
    SIZE = 512*.PAGES;				! number of bytes requested
    FREEPAGE = .FREE_PAGE_HEAD;			! pickup first free page

    ! Look down the freepage list for a region of the correct or larger size.
    ! If we find a region of the correct size return it.  Remember the first
    ! chuck which is too big, it will be cut down if we do not find a page of
    ! the correct size
    !
    WHILE .FREEPAGE NEQA FREE_PAGE_HEAD DO
	BEGIN

	IF .SIZE EQLU .FREEPAGE[FVP$W_SIZE]
	THEN

	    ! we found a section of the correct size, remove it from the list
	    ! and return it
	    BEGIN
	    REMQUE(.FREEPAGE, .ADDR);
	    RETURN;
	    END;

	IF .SIZE LSSU .FREEPAGE[FVP$W_SIZE]
	THEN

	    ! this space is too big.  so if we do not already have a chuck to
	    ! cut up if needed, then remember this one
	    ! 
	    IF .TOOBIG EQLA 0 THEN TOOBIG = .FREEPAGE;

	FREEPAGE = .FREEPAGE[FVP$L_FORWARD];
	END;

    IF .TOOBIG NEQ 0
    THEN

        ! if there is entry that is too big, leave it in the free page list but
        ! make it smaller and use the end of the block to satisfy the request
        !
	BEGIN
	TOOBIG[FVP$W_SIZE] = .TOOBIG[FVP$W_SIZE] - .SIZE;
	FREEPAGE = .TOOBIG + .TOOBIG[FVP$W_SIZE];
	END
	
    ELSE

	! otherwise expand the region and update last page pointer
	!
	BEGIN
	IF NOT SYS$EXPREG(.PAGES, FREEPAGE, EXEC_MODE, 0)
	THEN
	    ERR_EXIT(SS$_ACPVAFUL);
	LAST_PAGE = .ENDADDR;
	END;

    .ADDR = .FREEPAGE;
    FREEPAGE[FVP$W_SIZE] = .SIZE;
    END;					! end of routine


GLOBAL ROUTINE RET_FREE_PAGE (ADDR,CONTRACT) : COMMON_CALL NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine returns a block of contiguous pages to the free page list.
!	If specified  and the page is the last page of virtual memory, then the
!	program section is contracted.  Space is put back so that the highest
!	address	is at the tail of the queue.  Contiguous memory is represented
!	by one free page block.
!
! CALLING SEQUENCE:
!	RET_FREE_PAGE(ARG1,ARG2)
!
! INPUT PARAMETERS:
!	ARG1 - address of block to return
!	ARG2 - TRUE or FALSE value, signaling if we should try to contract P0
!
! IMPLICIT INPUTS:
!	The size of the block to be returned is contained in the block
!	structure.
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	if virtual memory is contracted, last_page is updated
!
! ROUTINE VALUE:
!	none
!
! SIDE EFFECTS:
!	none
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_REG;

    EXTERNAL
	FREE_PAGE_HEAD	: REF BBLOCK,	! addr of free page list head
	LAST_PAGE;			! addr of last page of virtual memory

    EXTERNAL ROUTINE
	SYS$CNTREG	: ADDRESSING_MODE (ABSOLUTE);

    MAP
	ADDR		: REF BBLOCK;	! address of virtual memory to return

    LOCAL
	FREEPAGE	: REF BBLOCK,	! address of free block
	NEXTPAGE	: REF BBLOCK,	! address of next page
	ENDFREE		: REF BBLOCK;	! address of the last free page block

    ! make this block a free block
    !
    ADDR[FVP$B_TYPE] = FVP_TYPE;

    ! Search backwards through freepage queue.  Insert this page so that the
    ! highest address is at the end of the queue and all others are sorted.
    !
    FREEPAGE = .(FREE_PAGE_HEAD + 4);

    WHILE .FREEPAGE NEQA FREE_PAGE_HEAD DO
	BEGIN
	IF .ADDR GTRA .FREEPAGE THEN EXITLOOP;
	FREEPAGE = .FREEPAGE[FVP$L_BACKWARD];
	END;					! end of while

    ! the previous entry has been found or may have either no entries in queue
    ! or this is the lowest address
    !
    NEXTPAGE = .FREEPAGE;			! previous or head of list

    ! if not head of list calculate next entry addr
    !
    IF .NEXTPAGE NEQA FREE_PAGE_HEAD
    THEN NEXTPAGE = .FREEPAGE[FVP$W_SIZE] + .NEXTPAGE;


    ! if region being returned is contiguous after a currect entry in the list 
    !
    IF .NEXTPAGE EQLA .ADDR
    THEN

	! append the new region to the old entry
	!
	FREEPAGE[FVP$W_SIZE] = .FREEPAGE[FVP$W_SIZE] + .ADDR[FVP$W_SIZE]

    ELSE
    
	! if not contiguous put in queue and adjust FREEPAGE pointer
	!
	BEGIN
	INSQUE(.ADDR, .FREEPAGE);
	FREEPAGE = .ADDR;
	END;

    !
    ! now if entry contiguous with following one, merge them
    !

    NEXTPAGE = .FREEPAGE + .FREEPAGE[FVP$W_SIZE];

    ! is it contiguous with next entry?
    !
    IF .NEXTPAGE EQLA .FREEPAGE[FVP$L_FORWARD]
    THEN
	BEGIN

	! remove next entry from queue
	!
	REMQUE(.FREEPAGE[FVP$L_FORWARD], NEXTPAGE);

	! inc size of current entry
	!
	FREEPAGE[FVP$W_SIZE] = .FREEPAGE[FVP$W_SIZE] + .NEXTPAGE[FVP$W_SIZE];
	END;

    !  Should we try to contract the P0 virtual address space of the ACP
    !
    IF .CONTRACT
    THEN
	BEGIN

	! get highest free area start address 
        !
        ENDFREE = .(FREE_PAGE_HEAD + 4);
        NEXTPAGE = .ENDFREE + .ENDFREE[FVP$W_SIZE] - 1;

	IF .NEXTPAGE EQLA .LAST_PAGE
	THEN
	    BEGIN

	    ! update last_page and remove last entry from queue
	    !
	    LAST_PAGE = .ENDFREE - 1;
	    REMQUE(.ENDFREE, ENDFREE);

	    ! give back the space
	    !
	    NEXTPAGE = .ENDFREE[FVP$W_SIZE]/512;
	    IF NOT SYS$CNTREG(.NEXTPAGE, 0, EXEC_MODE, 0)
	    THEN
		BUG_CHECK(ACPVAFAIL);
	    END

	ELSE

!**********
!
! when making changes try to keep the following two CH$FILLs next to each other
! because BLISS will only generate the code once and branch to it from 2 places
!
!**********

	    ! The area return was not on the end on of the Virtual Address
	    ! Space in P0.  So zero out the newly return pages, plus all
	    ! pointer, size and type fields of the free pages that where
	    ! appended (beacuse they were contiguous).
	    !
	    CH$FILL ( 0, .FREEPAGE[FVP$W_SIZE] - 12, .FREEPAGE + 12 );

	END
    ELSE

	! We are not going to try to contract the P0 space.  So clean up the
	! pages returned.  This will zero out the newly return pages, plus all
	! pointer, size and type fields of other free pages that were appended.
	!
	CH$FILL ( 0, .FREEPAGE[FVP$W_SIZE] - 12, .FREEPAGE + 12 );

    END;					! end of routine

END

ELUDOM
