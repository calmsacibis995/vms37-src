	.TITLE	MATCHNAME	Match General Wild Card Filename Specification
	.IDENT 	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************

;++
;
; FACILITY:  Mtaacp
;
; ABSTRACT:
;
;	This routine performs the general embedded wild card matching
;	algorithm.
;
; ENVIRONMENT:
;
;	VAX/VMS Operating System
;
;--
;
;
; AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  10-Aug-1979  11:36
;
; MODIFIED BY:
;
;	V02-002	DMW0005		David Michael Walp	13-JAN-1981
;		This was taken from the Files-11 Structure Level 2 ACP. No code
;		was changed at this time, only comments.
;
;**

;++
;
; Functional Description:
;
;	This routine performs the general embedded wild card matching
;	algorithm.
;
; Calling Sequence:
;	JSB
;
; Input Parameters:
;	R2 = length of candidate string
;	R3 = address of candidate string
;	R4 = length of pattern string
;	R5 = address of pattern string
;
; Implicit Inputs:
;	none
;
; Output Parameters:
;	none
;
; Implicit Outputs:
;	none
;
; Routines Called:
;	none
;
; Routine Value:
;	1 if the strings match
;	0 if not
;
; Side Effects:
;	R1-R5 destroyed
;
;--

	.PSECT	$CODE$,NOWRT,EXE,WORD

FMG$MATCH_NAME::
	PUSHR	#^M<R6,R7,R8,R9>	; Save registers 
	MOVL	#1,R0			; Assume success
	CLRL	R6			; Clear saved string count
	BRB	60$			; Dive into the loop

10$:	MOVZBL	(R5)+,R1		; Get next character in pattern string
	CMPB	R1,#^A'*'		; Check for wild string
	BEQL	80$			; Branch if so
20$:	SOBGEQ	R2,50$			; Count an input char, br if not done
30$:	CLRL	R0			; Out of input chars - match fails
40$:	POPR	#^M<R6,R7,R8,R9>	; Restore registers 
	RSB				;

50$:	CMPB	R1,(R3)+		; Check target against input
	BEQL	60$			; Branch if match
	CMPB	R1,#^A'%'		; Check if single wildcard match
	BNEQ	70$			; Branch if no match
60$:	SOBGEQ	R4,10$			; Pattern string exhausted?
	TSTL	R2			; Input string exhausted?
	BEQL	40$			; Branch if yes - success
;
; We have detected a mismatch, or we are out of pattern string while there
; is input left. Back up to the last '*', advance a character of the input,
; and try again.
;
70$:	DECL	R6			; Count a character from saved input
	BLSS	30$			; Branch if no saved input
	INCL	R7			; Set to try next input character
	MOVQ	R6,R2			; Restore pointers to backup point
	MOVQ	R8,R4			; to retry matching with next char
	BRB	60$
;
; We have encountered a * in the pattern string. Save the string pointers
; for backup and retry.
;
80$:	TSTL	R4			; Pattern string null after "*"?
	BEQL	40$			; "*" at end of pattern matches all.
	MOVQ	R2,R6			; Save current string pointers
	MOVQ	R4,R8			; of both strings for backup
	BRB	60$			; and continue testing



	.END

