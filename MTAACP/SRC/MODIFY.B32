
MODULE MODIFY (LANGUAGE (BLISS32) ,
		IDENT = 'V03-000'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  MTAACP
!
! ABSTRACT:
!	This module executes the modify function.
!	( This module has never been implemented because of design problems
!	which caused race conditions in the execution.  Maria Nasr)
!
! ENVIRONMENT:
!
!	VMS operating system, including privileged system services
!	and internal exec routines.
!
!--

!
!
! AUTHOR:  D. H. GILLESPIE,	 CREATION DATE:  18-JUL-77
!
! MODIFIED BY:
!
!	V02-005 DMW00044	David Michael Walp	28-Oct-1981
!		Commented out all code but error checking for bad attributes
!
!	V02-004	REFORMAT	Maria del C. Nasr	30-Jun-1980
!
!
!**

LIBRARY 'SYS$LIBRARY:LIB.L32';

REQUIRE 'SRC$:MTADEF.B32';

FORWARD ROUTINE
    MTA_MODIFY	: NOPRES NOVALUE;    ! main control for modify acp function

EXTERNAL
    IO_PACKET	: REF BBLOCK;		! address of current IO request packet

GLOBAL ROUTINE MTA_MODIFY : NOPRES NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!	this routine executes the modify function
!
! CALLING SEQUENCE:
!	MTA_MODIFY()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	IO_PACKET - address of current io request packet
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	this routine only handles user labels and end user label processing with
!	next ast
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_REG;

    LOCAL
	ABD	: REF BBLOCKVECTOR [, ABD$C_LENGTH],	! addr of descr vector
	CODE,					! attribute code
	P,					! pointer to attribute
	PACKET	: REF BBLOCK;			! io packet address

    PACKET = .IO_PACKET;
    ABD	   = .BBLOCK[.PACKET[IRP$L_SVAPTE], AIB$L_DESCRIPT];

    INCRU I FROM ABD$C_ATTRIB TO .PACKET[IRP$W_BCNT] - 1 DO
	BEGIN
	P    = .ABD[.I, ABD$W_TEXT] + ABD[.I, ABD$W_TEXT];
	CODE = .(.P)<0, 8>;

	! check if code is in range
	!
	IF .CODE GTRU ATR$C_MAX_CODE THEN ERR_EXIT(SS$_BADATTRIB);

	! only attributes that can be modified are user labels and end user
	!  labels and they are not supported
	! all other attributes are droped on the floor for device independent
	!  sake
	!
	IF (.CODE EQL ATR$C_USERLABEL) OR (.CODE EQL ATR$C_ENDLBLAST)
	THEN ERR_EXIT(SS$_BADATTRIB);

	END;

    END;					! end of routine


!ROUTINE TURN_OFF_WRITE : COMMON_CALL NOVALUE =
!
!++
!
! FUNCTIONAL DESCRIPTION:
!	this routine notes that exclusive writing is no longer taking place
!
! CALLING SEQUENCE:
!	TURN_OFF_WRITE(), KERNEL MODE
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	the window no longer maps virtual i/o
!
! USER ERRORS:
!	NONE
!
!--
!
!    BEGIN
!
!    EXTERNAL REGISTER
!	COMMON_REG;
!
!    CURRENT_WCB[WCB$V_READ] = 1;		! writing and reading
!    END;

!ROUTINE UPDATE_MUSTCLOS : COMMON_CALL NOVALUE =
!
!++
!
! FUNCTIONAL DESCRIPTION:
!	this routine notes that the file must be close and inhibits any
!	more virtual reads or writes
!
! CALLING SEQUENCE:
!	UPDATE_MUSTCLOS(), KERNEL MODE
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	CURRENT_WCB	- address of current window control block
!	CURRENT_VCB	- address of current volume control block
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
! USER ERRORS:
!	NONE
!
!--
!
!    BEGIN
!
!    EXTERNAL REGISTER
!	COMMON_REG;
!
!    CURRENT_WCB[WCB$W_NMAP] = 0;
!    CURRENT_VCB[VCB$V_MUSTCLOSE] = 1;
!    END;

!ROUTINE INS_USRLBL_ID (ADDR) : COMMON_CALL NOVALUE =
!
!++
!
! FUNCTIONAL DESCRIPTION:
!	this routine inserts the user label id into the user label
!
! CALLING SEQUENCE:
!	INS_USRLBL_ID(ARG1), CALLED IN KERNEL MODE
!
! INPUT PARAMETERS:
!	ARG1 - address of user label
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	first three characters of user label either 'uhl' or 'utl'
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
! USER ERRORS:
!	NONE
!
!--
!
!    BEGIN
!
!    EXTERNAL REGISTER
!	COMMON_REG;
!
!    IF .CURRENT_VCB[VCB$B_TM] EQL 0
!    THEN
!	(.ADDR)<0, 24> = 'UHL'
!    ELSE
!	(.ADDR)<0, 24> = 'UTL';
!
!    END;					! end of routine
END

!	IF .COUNT GTRU 80 OR .COUNT LSS 18 THEN ERR_EXIT(SS$_BADATTRIB);
!	IF .CURRENT_WCB EQL 0 THEN ERR_EXIT(SS$_ILLUSRLBLWT);
!	IF .CURRENT_WCB[WCB$V_READ] THEN ERR_EXIT(SS$_ILLUSRLBLWT);
!	IF .CURRENT_VCB[VCB$B_TM] EQL 1 THEN
! WHEN REQUEST TO WRITE USER LABEL IS RECEIVED WHEN IN THE DATA AREA
! THEN A FORCED CLOSE TAKES PLACE
!	    BEGIN
!	    KERNEL_CALL(UPDATE_MUSTCLOS);
!	    WRITE_TRAILERS('F');
!	    END;
!	IF NOT .CURRENT_VCB[VCB$V_WAIUSRLBL]
!	AND NOT (.HDR1[EO1$L_EO1LID] EQL 'EOF1'
!	    AND .CURRENT_VCB[VCB$B_TM] EQL 2) THEN ERR_EXIT (SS$_ILLUSRLBLWT);
!	KERNEL_CALL(INS_USRLBL_ID,.P);
!	WRITE_BLOCK(.P,.COUNT);		!WRITE USER LABEL

!	IF .COUNT NEQ 4 THEN ERR_EXIT(SS$_BADATTRIB);
!	IF .CURRENT_WCB EQL 0 THEN ERR_EXIT(SS$_ILLUSRLBLWT);
!	IF .CURRENT_WCB[WCB$V_READ] THEN ERR_EXIT(SS$_ILLUSRLBLWT);
!	IF NOT .CURRENT_VCB[VCB$V_WAIUSRLBL]
!	AND NOT .CURRENT_VCB[VCB$V_MUSTCLOSE] THEN ERR_EXIT(SS$_ILLUSRLBLWT);
!	AST_BLOCK = .(.P);
!	BEGIN
!	BUILTIN PROBER;
!	MODE = 0;
!	LENGTH = 4;
!	IF .AST_BLOCK NEQ 0 
!	AND (NOT PROBER(MODE,LENGTH,.AST_BLOCK)
!	OR .AST_BLOCK[ACB$B_TYPE] NEQ DYN$C_ACB)
!	THEN ERR_EXIT(SS$_ILLLBLAST);
!	END;
!	IF .CURRENT_VCB[VCB$V_MUSTCLOSE] THEN
!	    BEGIN
!	    CLOSE_FILE();
!	    KERNEL_CALL(TURN_OFF_WRITE);
!	    END;
!	KERNEL_CALL(COMPLETE_USRLBL,.AST_BLOCK,.I,.ABD);
!
! IF UNBLOCK NECESSARY DO IT NOW
!	IF .CURRENT_VCB[VCB$V_WAIUSRLBL] THEN UNBLOCK(.CURRENT_VCB);


ELUDOM
