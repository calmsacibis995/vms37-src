
MODULE FRMOD1 (LANGUAGE (BLISS32) ,
		IDENT = 'V03-000'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  MTAACP
!
! ABSTRACT:
!
!	This module formats a files-11 structure level 1
!	file header
!
! ENVIRONMENT:
!
!	Starlet operating system, including privileged system services
!	and internal exec routines.
!
!--

!
!
! AUTHOR:  D. H. GILLESPIE,	 CREATION DATE:  19-MAY-1977  17:06
!
! MODIFIED BY:
!
!	V02-010 DMW00057	David Michael Walp	 7-Dec-1981
!		Changed CALC_VERSION to non-COMMON_CALL
!
!	V02-009 DMW00056	David Michael Walp	30-Nov-1981
!		Added file name parsing routines.  Part of ANSI "a"
!		file name support
!
!	V02-008 DMW00037	David Michael Walp	29-Sep-1981
!		Format the ODS1 header correctly
!
!	V02-007	REFORMAT	Maria del C. Nasr	30-Jun-1980
!
!	A0006	MCN0003		Maria del C. Nasr	16-Oct-1979   14:06
!		Add HDR3 processing
!
!	A0005	MCN0004		Maria del C. Nasr	15-Oct-1979   15:25
!		Changed to use new file header structure name
!
!**

LIBRARY 'SYS$LIBRARY:LIB.L32';

REQUIRE 'SRC$:MTADEF.B32';

LINKAGE
    JSB_CHAR 	= JSB () : GLOBAL ( CHAR_COUNT = 1, STRING_PTR = 2);

EXTERNAL ROUTINE
    LIB$CVT_DTB	: ADDRESSING_MODE (ABSOLUTE);	! decimal to binary

FORWARD ROUTINE
    FORMAT_DATEOD1	: NOVALUE,		! formats date for ODS1
    FORMAT_F11HOD1	: COMMON_CALL NOVALUE,  ! format Files-11 ODS1 Header
    FORMAT_FID		: NOVALUE,		! format File Id
    GETCHAR		: JSB_CHAR;		! get char from input string

EXTERNAL
    HDR1		: REF BBLOCK;		! address of HDR1(EOF1) label

MACRO PARSE_TO_RAD50_FILE_ID =

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine parses the file identifier field in HDR1, trailing blanks
!	are stripped from type and name fields, translate to RAD50 and
!	calculate version number.
!
! CALLING SEQUENCE:
!	PARSE_TO_RAD50_FILE_ID
!
! INPUT PARAMETERS:
!	none
!
! IMPLICIT INPUTS:
!	none
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	none
!
!--

    BEGIN

    ! address of the name block in the FILE header
    !
    BIND
	NAM_BLK = HEADER[ FH1$C_LENGTH + FI1$W_FILENAME ] : VECTOR [ , WORD ];

    EXTERNAL ROUTINE
	CALC_VERSION;				! get the version number

    LOCAL
	TYPE_PTR: REF VECTOR [ , BYTE ];	! addr of file type field

    GLOBAL REGISTER
	CHAR_COUNT = 1  : LONG,			! number of characters left
	STRING_PTR = 2	: REF VECTOR [ , BYTE ];! string pointer

    LITERAL
	MAX_NAME_LEN   = 9,			! maximum file name length
	MAX_TYPE_LEN   = 3,			! maximum file type length
	NAM_TYPE_FIELD = 3,			! file type offset in name BLK
	NAM_VER_FIELD  = 4;			! file ver offset in name BLK


    !++
    ! 
    !  PARSE and TRANSLATE to RAD50 THE FILE NAME FILE FIELD
    !
    !--

    ! setup address of the file id in HDR1
    !
    STRING_PTR  = HDR1 [ HD1$T_FILEID ];

    ! scan up to 9 characters or until a period is found
    !
    CHAR_COUNT = CH$FIND_CH ( MAX_NAME_LEN, .STRING_PTR, '.' );
    CHAR_COUNT = ( IF CH$FAIL ( .CHAR_COUNT )
		   THEN MAX_NAME_LEN
		   ELSE .CHAR_COUNT - .STRING_PTR );

    ! save the pointer to the start of the file type field
    !
    TYPE_PTR = STRING_PTR [ .CHAR_COUNT ];

    ! strip off trailing blanks
    !
    DECR I FROM (.CHAR_COUNT - 1) TO 0 DO
	IF .STRING_PTR[.I] NEQ ' '
	THEN EXITLOOP
	ELSE CHAR_COUNT = .CHAR_COUNT - 1;

    ! convert file name to rad50
    !
    INCRU I FROM 0 TO 2 DO
	DECRU J FROM 3 TO 1 DO NAM_BLK[.I] = .NAM_BLK[.I]*40 + GETCHAR();


    !++
    ! 
    !  PARSE and TRANSLATE to RAD50 THE FILE NAME TYPE FIELD
    !
    !--

    ! pickup the saved address of file type string
    !
    STRING_PTR = .TYPE_PTR;

    ! if we are at a "." use it as a delimitor
    !
    IF .STRING_PTR[0] EQLU '.' THEN STRING_PTR = .STRING_PTR + 1;

    ! strip trailing spaces
    !
    CHAR_COUNT = MAX_TYPE_LEN;
    DECR I FROM 2 TO 0 DO
	IF .STRING_PTR [.I] NEQ ' '
	THEN EXITLOOP
	ELSE CHAR_COUNT = .CHAR_COUNT - 1;

    ! convert the file type to RAD50
    !
    DECRU I FROM 3 TO 1 DO
	NAM_BLK[NAM_TYPE_FIELD] = .NAM_BLK[NAM_TYPE_FIELD]*40 + GETCHAR();


    !++
    !
    ! convert generation number and generation version number to binary
    ! file version number
    !
    !--

    CALC_VERSION ( NAM_BLK [ NAM_VER_FIELD ] )

    END;
    %;

ROUTINE GETCHAR : JSB_CHAR =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine returns the rad-50 code of the next character in the
!	input string if it is in the rad-50 set. If end of string has been
!	reached, it returns zero.  If it is a non-rad50 char, then it is
!	mapped to z.  It uppercase letters.
!
! CALLING SEQUENCE:
!	GETCHAR ()
!
! INPUT PARAMETERS:
!	none
!
! IMPLICIT INPUTS:
!	STRING_PTR - string pointer
!	CHAR_COUNT - count of the number of characters
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	STRING_PTR - string pointer
!	CHAR_COUNT - count of the number of characters
!
! ROUTINE VALUE:
!	character code
!
! SIDE EFFECTS:
!	Count decremented and stringp advanced.
!
!--

    BEGIN

    EXTERNAL REGISTER
	CHAR_COUNT = 1  : LONG,			! number of characters left
	STRING_PTR = 2	: REF VECTOR [, BYTE];	! pointer into the string

    LITERAL
	RAD50_Z = ('Z' - 'A') + 1;

    LOCAL
	CHAR;					! character in process

    ! If the string is empty return 0 as the character
    !
    IF .CHAR_COUNT LEQ 0 THEN RETURN 0;

    ! Get the next character from the string 
    !
    CHAR = .STRING_PTR[0];

    ! advance to next character
    !
    CHAR_COUNT = .CHAR_COUNT - 1;
    STRING_PTR = .STRING_PTR + 1;

    RETURN SELECTONE .CHAR OF
	    SET
		['A' TO 'Z'] : (.CHAR - 'A') + 1;
		['a' TO 'z'] : (.CHAR - 'a') + 1;
		['0' TO '9'] : (.CHAR - '0') + 30;
		[OTHERWISE]  : RAD50_Z;
	    TES;
    END;					! end of routine getchar

GLOBAL ROUTINE FORMAT_F11HOD1 (HEADER) : COMMON_CALL NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!	this routine formats a file header for files-11 on-disk structure 1
!
! CALLING SEQUENCE:
!	FORMAT_F11HOD1(ARG1)
!
! INPUT PARAMETERS:
!	ARG1 - address of buffer
!
! IMPLICIT INPUTS:
!	CURRENT_VCB - address of current vcb
!	tape header labels read in or defaulted
!
! OUTPUT PARAMETERS:
!	ARG1 - address of buffer
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	none
!
! SIDE EFFECTS:
!	header receives 512 characters of files-11 ODS-1 file header
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_REG;

    EXTERNAL ROUTINE
	LIB$CVT_HTB	: ADDRESSING_MODE (ABSOLUTE);	! hexadecimal to binary

    MAP	HEADER		: REF BBLOCK;		! addr of output buffer

    EXTERNAL
	LOCAL_FIB	: BBLOCK,
	CURRENT_UCB	: REF BBLOCK,		! addr of current UCB
	HDR2		: REF BBLOCK,		! addr of HDR2(EOF2) label
	HDR3		: REF BBLOCK;		! addr of HDR3(EOF3) label

    BIND
	RECTYPE_ANSI   = UPLIT BYTE('UFDVS')	    : VECTOR [, BYTE],
	RECTYPE_FILE11 = UPLIT BYTE(0, 1, 2, 3, 0)  : VECTOR [, BYTE],
	RECATTR_ASCI   = UPLIT BYTE('MA ')	    : VECTOR [, BYTE],
	RECATTR_FILE11 = UPLIT BYTE(0, 1, 2)	    : VECTOR [, BYTE],

	! pointer into the record attributes in the header part
	!
	RECATTR	       = HEADER[FH1$W_RECATTR]	    : BBLOCK;

    LITERAL
	RECTYPE_LEN = 5,
	RECATTR_LEN = 3;


    ! zero in the header
    !
    CH$FILL(0, 512, .HEADER);

    ! fill in offset to ID and MAP areas
    !
    HEADER[FH1$B_IDOFFSET] = FH1$C_LENGTH/2;
    HEADER[FH1$B_MPOFFSET] = (FH1$C_LENGTH + FI1$C_LENGTH +
				FI1$S_MTHDR1 + FI1$S_MTHDR2 + FI1$S_MTHDR3)/2;


    !++
    !
    ! FILL IN THE FILE HEADER AREA OF THE HEADER
    !
    !--

    ! structure level  ( known constant )
    !
    HEADER[FH1$W_STRUCLEV] = FH1$C_LEVEL1;

    ! fill in the File ID (FID)
    !
    FORMAT_FID(HEADER[FH1$W_FID_NUM]);

    ! format fileowner from UCB
    !
    (HEADER[FH1$W_FILEOWNER])<0,8> = .CURRENT_UCB[UCB$L_OWNUIC];
    (HEADER[FH1$W_FILEOWNER])<8,8> = .(CURRENT_UCB[UCB$L_OWNUIC])<16,8>;

    ! protection from UCB
    !
    HEADER[FH1$W_FILEPROT] = .CURRENT_UCB[UCB$W_VPROT];

    !++
    !
    !  Fill in the Record Attributes in the Header Id Area
    !
    !  1st  Fill in the stuff from the ANSI field
    !  2nd  Get the RMS stuff in HDR2 or HDR3
    !
    !--

    ! fill in the type of record ( variable, fixed, undefined, spaned )
    ! assume undefined
    !
    RECATTR[FAT$B_RTYPE] = 0; 
    DECR I FROM RECTYPE_LEN - 1 TO 0 DO
	IF .RECTYPE_ANSI[.I] EQL .HDR2[HD2$B_RECFORMAT]
	THEN
	    BEGIN
	    RECATTR[FAT$B_RTYPE] = .RECTYPE_FILE11[.I];
	    EXITLOOP;
	    END;

    ! fill in form control ( Fortran, Form control in record, implied <CRLF> )
    ! assume implied <CRLF>
    !
    RECATTR[FAT$B_RATTRIB] = 2;
    DECR I FROM RECATTR_LEN - 1 TO 0 DO
	IF .RECATTR_ASCI[.I] EQL .HDR2[HD2$B_FORMCNTRL]
	THEN
	    BEGIN
	    RECATTR[FAT$B_RATTRIB] = .RECATTR_FILE11[.I];
	    EXITLOOP;
	    END;

    ! fill in the record size and max size
    !
    BEGIN
    LOCAL VALUE;

    LIB$CVT_DTB(HD2$S_RECLEN, HDR2[HD2$T_RECLEN], VALUE);

    ! if variable length records subtract overhead
    !
    IF .HDR2[HD2$B_RECFORMAT] EQL 'D' THEN VALUE = .VALUE - 4;

    RECATTR[FAT$W_RSIZE]  = .VALUE<0, 16>;
    RECATTR[FAT$W_MAXREC] = .VALUE<0, 16>
    END;

    ! if the file was created on a VMS system fill in RMS attributes
    !
    IF .CURRENT_VCB[VCB$V_STARFILE]
    THEN
	IF .(HDR2[HD2$T_RECATR1])<0,8> NEQ ' '

	! old tape, attributes are in HDR2
	!
	THEN
	    BEGIN
	    CH$MOVE(HD2$S_RECATR1, HDR2[HD2$T_RECATR1], RECATTR);
	    CH$MOVE(HD2$S_RECATR2, HDR2[HD2$T_RECATR2],	RECATTR+HD2$S_RECATR1);
	    END

	! get attributes from HDR3, converting to binary
	!
	ELSE
	    IF .HDR3[HD3$L_HD3LID] EQL 'HDR3'
		THEN INCR I FROM 0 TO 28 BY 4 DO
		    LIB$CVT_HTB(8, HDR3[HD3$T_RECATR] + (.I*2), RECATTR + .I);


    ! records do not span block boundaries if the user requests the original
    ! attributes of the file, don't set span
    !
    IF NOT .LOCAL_FIB[FIB$V_PRSRV_ATR]
    THEN RECATTR[FAT$B_RATTRIB] = .RECATTR[FAT$B_RATTRIB] OR FAT$M_NOSPAN;


    !++
    !
    ! FILL IN THE FILE ID AREA OF THE HEADER
    !
    !--

    ! fill in the file name, type and version 
    !
    PARSE_TO_RAD50_FILE_ID;

    ! fill the creation and expiration dates
    !
    FORMAT_DATEOD1(HDR1[HD1$T_CREATEDT],HEADER[FH1$C_LENGTH+FI1$T_CREDATE],1);
    FORMAT_DATEOD1(HDR1[HD1$T_EXPIREDT],HEADER[FH1$C_LENGTH+FI1$T_EXPDATE],0);

    ! move the tape file header labels into the ident area of the ODS1 header
    !
    CH$MOVE( FI1$S_MTHDR1 + FI1$S_MTHDR2 + FI1$S_MTHDR3,
	     .HDR1, HEADER[FH1$C_LENGTH + FI1$T_MTHDR1]);


    !++
    !
    ! CREATE A DUMMY MAP AREA FOR THE ODS1 HEADER
    !
    !--
    BEGIN

    LOCAL MAP_AREA : REF BBLOCK;

    MAP_AREA = .HEADER + (.HEADER [ FH1$B_MPOFFSET ] * 2 );
    MAP_AREA[FM1$B_COUNTSIZE] = 1;
    MAP_AREA[FM1$B_LBNSIZE]   = 3;
    MAP_AREA[FM1$B_AVAIL]     =	
	(HEADER[FH1$W_CHECKSUM] - .MAP_AREA - FM1$C_LENGTH ) / 2;

    END;


    !++
    !
    ! CALCULATE THE CHECKSUM
    !
    !--
    BEGIN
    BIND
	! reference the dummy ODS1 header as word
	!
	VHEADER = HEADER : REF VECTOR [, WORD];

    ! now calculate checksum
    !
    DECR I FROM 254 TO 0 DO
	HEADER[FH1$W_CHECKSUM] = .HEADER[FH1$W_CHECKSUM] + .VHEADER[.I]
    END;

    END;					! end of routine

ROUTINE FORMAT_DATEOD1 (INPDT, OUTPTR, TIME_REQUESTED) : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine formats an on-disk structure one date from a
!	julian date on mag tape.
!
! CALLING SEQUENCE:
!	FORMAT_DATEOD1(ARG1,ARG2,ARG3)
!
! INPUT PARAMETERS:
!	ARG1 - address of input julian date
!	ARG2 - address of output buffer
!	ARG3 - 0 if time is not requested, 1 if time is requested
!
! IMPLICIT INPUTS:
!	none
!
! OUTPUT PARAMETERS:
!	ARG2 - address of output buffer
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	none
!
! SIDE EFFECTS:
!	date attribute written to output buffer (ddmmmyy)
!	if time wanted, followed by (000000)
!
!--

    BEGIN

    LOCAL
	DATA	: BLOCK [ BYTE, 12 ],	! work area in which date is formatted
	PTR,				! pointer to output buffer
	INPTR,				! pointer to input buffer
	CHAR;				! char from input string

    EXTERNAL ROUTINE
	CONVDATE_J2R;			! convert ANSI Julian date to VMS date

    ! convert julian date in hdr1 to ddmmmyy and if time is requested, return
    !  zeros
    ! assume output buffer initialized to zero
    !
    IF NOT CONVDATE_J2R(DATA, .INPDT) THEN RETURN;

    (.OUTPTR)<0, 16> = .(DATA)<0, 16>;
    (.OUTPTR + 2)<0, 24> = .(DATA + 3)<0, 24>;
    (.OUTPTR + 5)<0, 16> = .(DATA + 9)<0, 16>;

    IF .TIME_REQUESTED THEN CH$FILL('0', 6, (.OUTPTR + 7));

    END;					! end of routine


GLOBAL ROUTINE FORMAT_FID (BUFFER) : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine formats the binary file id.
!
! CALLING SEQUENCE:
!	FORMAT_FID(ARG1)
!
! INPUT PARAMETERS:
!	ARG1 - address of buffer to receive 4 byte binary file id
!
! IMPLICIT INPUTS:
!	HDR1 in label area
!
! OUTPUT PARAMETERS:
!	ARG1 - address of buffer to received binary file id
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	none
!
! SIDE EFFECTS:
!	buffer receives binary file id
!	1 word file number (HDR1 section number)
!	1 word file sequence number (HDR1 sequence number)
!
!--

    BEGIN

    LOCAL
	RESULT;					! long word work area for conversions

    ! convert file number first
    !
    IF NOT LIB$CVT_DTB(HD1$S_FILESEQNO, HDR1[HD1$T_FILESEQNO], RESULT)
    THEN
	RESULT = 0;

    ! store file number
    !
    (.BUFFER)<0, 16> = .RESULT<0, 16>;

    ! convert file sequence number
    !
    IF NOT LIB$CVT_DTB(HD1$S_FILESECNO, HDR1[HD1$T_FILESECNO], RESULT)
    THEN
	RESULT = 0;

    ! store file sequence number
    !
    (.BUFFER)<16, 16> = .RESULT<0, 16>;
    END;					! end of routine

END

ELUDOM
