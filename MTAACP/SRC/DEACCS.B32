
MODULE DEACCS (LANGUAGE (BLISS32) ,
		IDENT = 'V03-000'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  MTAACP
!
! ABSTRACT:
!	this modules executes the deaccess function
!
!
! ENVIRONMENT:
!
!	starlet operating system, including privileged system services
!	and internal exec routines.
!
!--

!
!
! AUTHOR:  D. H. GILLESPIE,	 CREATION DATE:  18-JUL-1977
!
! MODIFIED BY:
!
!	V02-008	REFORMAT	Maria del C. Nasr	30-Jun-1980
!
!	A0007	SPR27676	Maria del C. Nasr	14-Dec-1979   16:20
!		Update transaction count in VCB for each file access and
!		deaccess.
!
!	A0006			R. I. Hustvedt,		16-Oct-1979 12:30
! 	 	Move FILCNT from PCB to JIB
!**

LIBRARY 'SYS$LIBRARY:LIB.L32';

REQUIRE 'SRC$:MTADEF.B32';

FORWARD ROUTINE
    DO_DEACCESS		: COMMON_CALL NOVALUE,		! kernel mode deaccess
    MTA_DEACCESS	: NOPRES NOVALUE,		! main deaccess function
    ZERO_CHANNEL	: COMMON_CALL NOVALUE;		! zeros user's window pter

EXTERNAL ROUTINE
    CLOSE_FILE		: L$CLOSE_FILE,			! close file accessed for write
    DEALLOCATE,						! return space to system pool
    GET_FIB		: COMMON_CALL,			! get file information block
    REWIND_VOL_SET	: COMMON_CALL;			! rewind volume set

EXTERNAL
    CURRENT_WCB		: REF BBLOCK,			! address of current window control block
    IO_PACKET		: REF BBLOCK,			! address of current io request packet

    ! system pcb vector
    !
    SCH$GL_PCBVEC	: REF VECTOR ADDRESSING_MODE (ABSOLUTE),
    USER_STATUS		: VECTOR [2];


GLOBAL ROUTINE MTA_DEACCESS : NOPRES NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!	this routine executes the deaccess function
!
! CALLING SEQUENCE:
!	mta_deaccess()
!
! INPUT PARAMETERS:
!	none
!
! IMPLICIT INPUTS:
!	io_packet - address of user's io request packet
!	current_vcb - address of current volume control block
!	current_wcb - address of current window
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	user's window pter zeroed
!	window returned to system space and disconnected from volume control block
!
! ROUTINE VALUE:
!	none
!
! SIDE EFFECTS:
!	none
!
! USER ERRORS:
!	ss$_badparam - irrelevant fib data
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_REG;

    LOCAL
	ABD	: REF BBLOCKVECTOR [, ABD$K_LENGTH],	! buffer descriptors
	FIB	: REF BBLOCK,				! user's fib

	! write indicator taken from window control block
	!
	WRITE_IND	: BITVECTOR [8];

    ABD = .BBLOCK[.IO_PACKET[IRP$L_SVAPTE], AIB$L_DESCRIPT];
    FIB = GET_FIB(.ABD);
    WRITE_IND = NOT .CURRENT_WCB[WCB$V_READ]
	    AND
	    NOT .CURRENT_VCB[VCB$V_NOWRITE];

    ! deaccess file by returning window to non_paged system space and dis
    ! connecting it from the volume control block
    !
    KERNEL_CALL(DO_DEACCESS);

    ! now check if trailers should be written
    !

    IF .WRITE_IND
    THEN
	CLOSE_FILE();

    ! now if rewind specified on deaccess, rewind volume set
    !

    IF .FIB[FIB$V_REWIND]
    THEN
	REWIND_VOL_SET();

    ! report any block count difference, user_status[1] = difference where neg
    ! number means read more than should have.
    !

    IF NOT .WRITE_IND
	AND
	.BBLOCK[.CURRENT_VCB[VCB$L_VPFL], VVP$L_BLOCKDIF] NEQ 0
    THEN
	BEGIN
	USER_STATUS[1] = .BBLOCK[.CURRENT_VCB[VCB$L_VPFL], VVP$L_BLOCKDIF];
	BBLOCK[.CURRENT_VCB[VCB$L_VPFL], VVP$L_BLOCKDIF] = 0;
	ERR_EXIT(SS$_BLOCKCNTERR);
	END;

    END;					! end of routine


ROUTINE DO_DEACCESS : COMMON_CALL NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!	this routine does the deaccess cleanup to the system data base
!
! CALLING SEQUENCE:
!	do_deaccess(), called in kernel mode
!
! INPUT PARAMETERS:
!	none
!
! IMPLICIT INPUTS:
!	current_vcb - address of current volume control block
!	current_wcb - address of current window control block
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	none
!
! SIDE EFFECTS:
!	none
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_REG;

    LOCAL
	AST_BLOCK,		! address of ast control block supplied by user
	PCB	: REF BBLOCK;	! address of user's process control block

    ! if user ast control block was supplied for user label processing but not
    ! used then return it to the system pool and credit the user's ast quota.
    ! get saved address of ast block
    !
    AST_BLOCK = .CURRENT_VCB[VCB$L_USRLBLAST];

    IF .AST_BLOCK NEQ 0
    THEN
	BEGIN
	DEALLOCATE(.AST_BLOCK);			! return to system pool
	CURRENT_VCB[VCB$L_USRLBLAST] = 0;	! note this fact in vcb

	! get user's pcb address
	!
	PCB = .SCH$GL_PCBVEC[.(IO_PACKET[IRP$L_PID])<0, 16>];

	! credit user's ast quota
	!
	PCB[PCB$W_ASTCNT] = .PCB[PCB$W_ASTCNT] + 1;
	END;

    ZERO_CHANNEL(.IO_PACKET);		! return zeroed window pter to user
    DEALLOCATE(.CURRENT_WCB);		! return window space
    CURRENT_WCB = 0;			! no longer an outstanding access
    CURRENT_VCB[VCB$L_WCB] = 0;		! update vcb to reflect deaccess
    CURRENT_VCB[VCB$V_CANCELIO] = 0;	! cancel no longer applies
    CURRENT_VCB[VCB$V_NOWRITE] = 0;	! turn of no write indicator

    ! decrement transaction count
    !
    CURRENT_VCB[VCB$W_TRANS] = .CURRENT_VCB[VCB$W_TRANS] - 1;
    END;					! end of routine


GLOBAL ROUTINE ZERO_CHANNEL (PACKET) : COMMON_CALL NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine zeroes out the window pointer being returned to
!	the user for his channel control block. It also credits one to the
!	user's open file quota.
!	This routine must be executed in kernel mode.
!
! CALLING SEQUENCE:
!	zero_channel ()
!
! INPUT PARAMETERS:
!	none
!
! IMPLICIT INPUTS:
!	io_packet: i/o packet of request
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	none
!
! SIDE EFFECTS:
!	channel window pointer cleared, file quota bumped
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_REG;

    MAP
	PACKET	: REF BBLOCK;

    LOCAL
	ABD	: REF BBLOCKVECTOR [, ABD$C_LENGTH],	! buffer descriptors
	JIB	: REF BBLOCK,				! Job information block
	PCB	: REF BBLOCK;				! address of user process control block

    ABD = .BBLOCK[.PACKET[IRP$L_SVAPTE], AIB$L_DESCRIPT];
    ABD[ABD$C_WINDOW, ABD$W_COUNT] = 4;
    .ABD[ABD$C_WINDOW, ABD$W_TEXT] + ABD[ABD$C_WINDOW, ABD$W_TEXT] + 1 = 0;
    PCB = .SCH$GL_PCBVEC[.(PACKET[IRP$L_PID])<0, 16>];
    JIB = .PCB[PCB$L_JIB];
    JIB[JIB$W_FILCNT] = .JIB[JIB$W_FILCNT] + 1;
    END;					! end of routine ZERO_CHANNEL

END

ELUDOM
