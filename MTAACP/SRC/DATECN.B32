
MODULE DATECN ( LANGUAGE ( BLISS32 ) ,
		IDENT = 'V03-000'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  MTAACP
!
! ABSTRACT:
!	CONVDATE_R2J converts dates from DD-MMM-YY format to (blank)YYDDD
!	CONVDATE_J2R converts dates from (blank)YYDDD to DD-MMM-YY
!
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines.
!
!--

!
!
! AUTHOR:  D. H. GILLESPIE,	 CREATION DATE:  31-MAY-77   9:00
!
! MODIFIED BY:
!
!	V02-005 DMW00055	David Michael Walp	30-Nov-1981
!		Fixed problem of 366 days in a none leap year when converting
!		from Julian to VMS
!
!	V02-004 DMW00039	David Michael Walp	 2-Oct-1981
!		Handle Julian Date " 00000" and Regular Dates less than 1900
!
!	V02-003	REFORMAT	Maria del C. Nasr	30-Jun-1980
!
!	A0002	MCN0012		Maria del C. Nasr	15-Feb-1980   3:20
!		Check for date out of range when converting to either Julian
!		format or regular date
!
!**

LIBRARY 'SYS$LIBRARY:LIB.L32';

REQUIRE 'SRC$:MTADEF.B32';

FORWARD ROUTINE
    CONVDATE_R2J,				! regular to julian
    CONVDATE_J2R;				! julian to regular

EXTERNAL ROUTINE
    LIB$CVT_DTB	: ADDRESSING_MODE ( ABSOLUTE ),	! convert decimal to binary
    SYS$FAO	: ADDRESSING_MODE ( ABSOLUTE );	! formatted ascii output

GLOBAL BIND
    ZERO_JDATE  = UPLIT ( ' 00000' );

BIND
    DAYTBL = UPLIT WORD ( 0,31,59,90,120,151,181,212,243,273,304,334,365 )
				    : VECTOR [,WORD],
    MONTBL = UPLIT BYTE ( 'JAN FEB MAR APR MAY JUN JUL AUG SEP OCT NOV DEC ' )
				    : VECTOR [CH$ALLOCATION(48)];

GLOBAL ROUTINE CONVDATE_R2J  ( REGDATE, ANSIJDATE ) =

!++
!
! FUNCTIONAL DESCRIPTION:
!	convert from DD-MMM-YYYY to (blank)YYDDD
!
!
! CALLING SEQUENCE:
!	CONVDATE_R2J ( ARG1, ARG2 )
!
! INPUT PARAMETERS:
!	ARG1 address of input string DD-MMM-YYYY
!	ARG2 address of output string (blank)YYDDD
!
! IMPLICIT INPUTS:
!	none
!
! OUTPUT PARAMETERS:
!	output string pointed to by ARG2
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	1 if successful
!	0 systax error
!
! SIDE EFFECTS:
!	none
!
!--

    BEGIN

    LOCAL
	CONVOUTPUT	: VECTOR [2],		! output descriptor
	MONTH,					! index into month table
	DAYS,					! number of days
	REGADR,					! char ptr to reg date string
	YEAR,					! number of year
	LPYEAR;					! leap year

    BIND
	BASE_YEAR   = UPLIT BYTE ( '19' ),
	ZERO_YEAR   = UPLIT BYTE ( '0000' ),
	CONVCONTROL = DESCRIPTOR ( ' !AD!3ZL' ),
	BYEAR	    = YEAR			: BLOCK [1];

    ! setup addr pointer and convert DD to binary # of days
    !
    IF .(.REGDATE)<0,8> EQL ' ' 
    THEN
	BEGIN
	REGADR = .REGDATE + 1;
	IF NOT LIB$CVT_DTB ( 1, .REGADR, DAYS ) THEN RETURN 0;
	END
    ELSE
	IF NOT LIB$CVT_DTB ( 2, .REGDATE, DAYS ) THEN RETURN 0;

    ! point into date to MMM
    !
    REGADR = .REGDATE + 3;

    ! lookup MMM in table to discover # of days in year preceding current month
    !
    MONTH = 0;
    WHILE 1
    DO
	BEGIN
	IF CH$EQL ( 3, .REGADR, 3, MONTBL[.MONTH], 0 ) THEN EXITLOOP;
	MONTH = .MONTH + 1;
	IF .MONTH GEQU 12 THEN RETURN 0;
	END;

    ! convert year
    !
    REGADR = .REGDATE + 7;
    IF NOT LIB$CVT_DTB ( 4, .REGADR, YEAR ) THEN RETURN 0;

    ! determine if year is leap year
    !
    LPYEAR = 0;
    IF .BYEAR [ 0, 0, 2, 0 ] EQLU 0 THEN LPYEAR = 1;

    ! decide if legal day in month
    !
    IF  ( .DAYS GTRU ( .DAYTBL[.MONTH + 1] - .DAYTBL[.MONTH] ))
    AND ( NOT  ( .LPYEAR AND ( .MONTH EQLU 1 ) AND ( .DAYS EQLU 29 )))
	THEN RETURN 0;

    ! calulate the days into the year
    !
    DAYS = .DAYS + .DAYTBL[.MONTH];
    IF .MONTH GTRU 1 THEN DAYS = .DAYS + .LPYEAR;

    ! if the year is less than 1900, then julian date must be zero
    !
    IF CH$LSS ( 2, .REGADR, 2, BASE_YEAR )
    THEN
	BEGIN
	CH$MOVE ( 4, ZERO_YEAR, .REGADR );
	DAYS = 0;
	END;

    ! setup output string addr and length
    !
    CONVOUTPUT[0] = 6;
    CONVOUTPUT[1] = .ANSIJDATE;

    ! setup yy char ptr
    !
    REGADR = .REGDATE + 9;

    ! format output string
    !
    SYS$FAO ( CONVCONTROL, 0, CONVOUTPUT, 2, .REGADR, .DAYS );
    RETURN 1;

    END;					! end routine

GLOBAL ROUTINE CONVDATE_J2R ( DATEREG, DATEANSIJ ) =

!++
!
! FUNCTIONAL DESCRIPTION:
!	convert from (blank)YYDDD to DD-MMM-YYYY
!
! CALLING SEQUENCE:
!	CONVDATE_J2R(ARG1,ARG2)
!
! INPUT PARAMETERS:
!	ARG1 addr of output string DD-MMM-YYYY( 11 char )
!	ARG2 addr of input string (blank)YYDDD
!
! IMPLICIT INPUTS:
!	none
!
! OUTPUT PARAMETERS:
!	output string pointed to by ARG1
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	2 if date of " 00000"
!	1 if normal date
!	0 if an invalid date
!
! SIDE EFFECTS:
!	none
!
!--

    BEGIN

    LOCAL
	CONVOUTPUT	: VECTOR [2],
	MONTH,					! index into month table /3
	DAYS,					! # of days in month
	YEAR,					! # of years
	JULADR,					! addr of JULIAN char
	LPYEAR,					! 1 if leap year
	FEB29;					! 1 if FEB 29th

    BIND
	CONVCONTROL = DESCRIPTOR ( '!2ZL-!AD-!4ZL' ),
	BYEAR	    = YEAR			    : BLOCK [1];

    ! if ANSI Julian date is zero, return with 2
    !
    IF CH$EQL ( 6, .DATEANSIJ, 6, ZERO_JDATE ) THEN RETURN 2;

    ! setup pointer to DDD in Julian input string
    !
    JULADR = CH$PLUS ( .DATEANSIJ, 3 );

    ! convert to binary date
    !
    IF NOT LIB$CVT_DTB ( 3, .JULADR, DAYS ) THEN RETURN 0;

    ! backup pointer to yy and convert to binary and add century
    !
    JULADR = CH$PLUS ( .JULADR, -2 );
    IF NOT LIB$CVT_DTB ( 2, .JULADR, YEAR ) THEN RETURN 0;
    YEAR = .YEAR + 1900;

    ! adjust days for leap year
    ! and make 366 of a non-leap year into a valid date
    !
    LPYEAR = ( .BYEAR [ 0, 0, 2, 0 ] EQLU 0 );
    FEB29  = ( .DAYS EQLU 60 ) AND .LPYEAR;
    IF .LPYEAR
    THEN BEGIN
	 IF .DAYS GTRU 59 THEN DAYS = .DAYS - 1;
	 END
    ELSE IF .DAYS EQL 366
	 THEN
	     BEGIN
	     YEAR = .YEAR + 1;
	     DAYS = 1;
	     END;

    ! know days in year and if year is leap year, now is this a legal date
    !
    IF ( .DAYS EQLU 0 )	OR ( .DAYS GTRU 365 ) THEN RETURN 0;

    ! find month
    !
    MONTH = 1;
    WHILE 1
    DO
	BEGIN
	IF ( .DAYS LEQU .DAYTBL[.MONTH] ) THEN EXITLOOP;
	MONTH = .MONTH + 1;
	IF .MONTH GEQU 13 THEN RETURN 0;
	END;

    ! get date in month
    !
    MONTH = .MONTH - 1;
    DAYS  = .DAYS - .DAYTBL[.MONTH] + .FEB29;

    ! setup and format output string
    !
    CONVOUTPUT[0] = 11;
    CONVOUTPUT[1] = .DATEREG;
    SYS$FAO ( CONVCONTROL, 0, CONVOUTPUT, .DAYS, 3, MONTBL[.MONTH], .YEAR );
    RETURN 1;

    END;					! routine

END						! end module

ELUDOM

