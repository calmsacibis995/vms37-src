
MODULE CHKACC (LANGUAGE (BLISS32) ,
		IDENT = 'V03-000'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  MTAACP
!
! ABSTRACT:
!	This routine checks that the access requested is allowed on the
!	volume set.
!
! ENVIRONMENT:
!
!	Starlet operating system, including privileged system services
!	and internal exec routines.
!
!--

!
!
! AUTHOR:  D. H. Gillespie,	 CREATION DATE:	17-MAY-77  09:30
!
! MODIFIED BY:
!
!	V02-007	DMW00032	David Micahel Walp	18-Aug-1981
!		Looked at MVL Override Bit when override option is used
!
!	V02-006	REFORMAT	Maria del C. Nasr	30-Jun-1980
!
!	A0005	MCN0003		Maria del C. Nasr	15-Oct-1979   9:29
!		Add HDR3 processing
!
!	A0004	MCN0001		Maria del C. Nasr	13-Sep-79   11:05
!		Corrected bug in "create if" function
!
!**

LIBRARY 'SYS$LIBRARY:LIB.L32';

REQUIRE 'SRC$:MTADEF.B32';

FORWARD ROUTINE
    CHECK_ACCESS	: COMMON_CALL NOVALUE,		! check access
    CHECK_FILE_ACC	: COMMON_CALL NOVALUE,	! check access to file
    RECALC_ST_REC	: COMMON_CALL NOVALUE;	! recalculate start record


GLOBAL ROUTINE CHECK_ACCESS (ACCESS_TYPE) : COMMON_CALL NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine checks that the access requested is allowed on the
!	volume set.
!
! CALLING SEQUENCE:
!	CHECK_ACCESS(ARG1)
!
! INPUT PARAMETERS:
!	ARG1 - access requested (0=read,1=write)
!
! IMPLICIT INPUTS:
!	IO_PACKET	- address of current i/o packet
!	CURRENT_UCB	- address of current ucb
!
! OUTPUT PARAMETERS:
!	None
!
! IMPLICIT OUTPUTS:
!	None
!
! ROUTINE VALUE:
!	None
!
! SIDE EFFECTS:
!	None
! USER ERROR:
!	SS$_WRITLCK - software write lock
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_REG;

    LINKAGE
	CHECK_PROT 	= JSB (REGISTER = 0, REGISTER = 1, REGISTER = 2) : NOTUSED
	(3, 4, 5, 6, 7, 8, 9, 10, 11);

    EXTERNAL ROUTINE
	EXE$CHKWRTACCES	: ADDRESSING_MODE (ABSOLUTE) CHECK_PROT,
	EXE$CHKRDACCES	: ADDRESSING_MODE (ABSOLUTE) CHECK_PROT;

    EXTERNAL
	CURRENT_UCB	: REF BBLOCK,		! address of current ucb
	IO_PACKET	: REF BBLOCK,		! address of current io request packet
	USER_STATUS	: WORD;		! address of status to return to user

    LOCAL
	STATUS;					! io status

    ! If file is software write locked and the user requests write privileges,
    ! deny privilege
    !

    IF .ACCESS_TYPE
	AND
	.BBLOCK[CURRENT_UCB[UCB$L_DEVCHAR], DEV$V_SWL]
    THEN
	ERR_EXIT(SS$_WRITLCK);

    ! Check acess to volume
    !

    IF .ACCESS_TYPE
    THEN
	STATUS = EXE$CHKWRTACCES(.IO_PACKET[IRP$L_ARB],
	    .CURRENT_UCB[UCB$W_VPROT], .CURRENT_UCB[UCB$L_OWNUIC])
    ELSE
	STATUS = EXE$CHKRDACCES(.IO_PACKET[IRP$L_ARB],
	    .CURRENT_UCB[UCB$W_VPROT], .CURRENT_UCB[UCB$L_OWNUIC]);

    IF NOT .STATUS
    THEN
	BEGIN
	USER_STATUS = .STATUS<0, 16>;
	ERR_EXIT();
	END;

    END;					! end of routine


GLOBAL ROUTINE CHECK_FILE_ACC (ACCESS_CALL) : COMMON_CALL NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine checks access to the file.  If accessibility code is
!	not blank and not overridden then access is denied.  If writing to the file the file
!	must be expired.
!
! CALLING SEQUENCE:
!	CHECK_FILE_ACC(ARG1)
!
! INPUT PARAMETERS:
!	0 - If being called from MTA_CREATE
!	1 - If called from MTA_ACCESS
!
! IMPLICIT INPUTS:
!	LOCAL_FIB - copy of user's file information block
!	CURRENT_VCB - address of current control block
!
! OUTPUT PARAMETERS:
!	None
!
! IMPLICIT OUTPUTS:
!	None
!
! ROUTINE VALUE:
!	None
!
! SIDE EFFECTS:
!	if append, tape is positioned to end of data
!
! USER ERROR:
!	SS$_FILACCERR - file access byte non-blank
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_REG;

    EXTERNAL ROUTINE
	EXPIRED		: COMMON_CALL,		! check that file has expired
	LIB$CVT_DTB	: ADDRESSING_MODE (ABSOLUTE),
						! convert decimal to binary
	SPACE_EOF	: COMMON_CALL,		! space to trailers
	SPACE_TM	: COMMON_CALL,		! space given number of
						!   tape marks
	READ_BLOCK	: COMMON_CALL;		! read on mag tape data block

    LOCAL
	BLOCK_COUNT,				! block count of file to
						!  appended to
	FIB		: REF BBLOCK,		! address of local fib
	LABELADDR	: REF BBLOCK,		! address of label
	TM,					! number of tm's
	MVL_ENTRY	: REF BBLOCKVECTOR [,MVL$K_LENGTH];
						! pointer to the MVL_ENTRY

    EXTERNAL
	HDR1		: REF BBLOCK,		! address of HDR1(EOF1) label
	IO_PACKET	: REF BBLOCK,		! address of current IRP
	LOCAL_FIB	: BBLOCK;		! copy of user's fib

    ! setup pointer to fib
    !
    FIB = LOCAL_FIB;

    ! get a handle on the MVL entry
    !
    MVL_ENTRY = (.CURRENT_VCB [ VCB$L_MVL ]) +  MVL$K_FIXLEN;

    ! first check to see if accessibility = blank
    !

    IF	   .HDR1[HD1$B_FILACCESS] NEQ %C' '
       AND
	   ( NOT (     .CURRENT_VCB[VCB$V_OVRACC]
		   AND .MVL_ENTRY[ (.CURRENT_VCB[VCB$W_RVN]), MVL$V_OVERIDE ]))
    THEN
	ERR_EXIT(SS$_FILACCERR);

    ! now treat append case uniquely
    !
    IF ( NOT .FIB[FIB$V_UPDATE])
	AND
	.FIB[FIB$V_WRITE]
	AND
	(.ACCESS_CALL)
    THEN
	BEGIN					! append case
	SPACE_EOF();				! left at absolute end of file

	IF NOT LIB$CVT_DTB(EO1$S_BLOCKCNT, HDR1[EO1$T_BLOCKCNT], BLOCK_COUNT)
	THEN
	    ERR_EXIT(SS$_BLOCKCNTERR);

	! read header of next file
	!
	LABELADDR = .HDR1 + 240;		! read into scratch area

	IF NOT READ_BLOCK(.LABELADDR, 80)
	THEN
	    BEGIN				! at logical end of volume set
	    SPACE_TM(-3);	! double tape mark is logical end of tape
	    KERNEL_CALL(RECALC_ST_REC, .BLOCK_COUNT);
	    RETURN;

	    END;

	IF .LABELADDR[HD1$L_HD1LID] NEQ 'HDR1'
	THEN
	    ERR_EXIT(SS$_TAPEPOSLOST);

	IF NOT EXPIRED(LABELADDR[HD1$T_EXPIREDT])
	THEN
	    ERR_EXIT(SS$_FILNOTEXP);		! going to overlay file

	SPACE_TM(-2);
	KERNEL_CALL(RECALC_ST_REC, .BLOCK_COUNT);
	RETURN;

	END;					! end of append case

    ! if about to write current file check expiration
    !

    IF .FIB[FIB$V_WRITE]
    THEN

	IF NOT EXPIRED(HDR1[HD1$T_EXPIREDT])
	THEN
	    ERR_EXIT(SS$_FILNOTEXP);

    END;					! end of routine


ROUTINE RECALC_ST_REC (BLOCK_COUNT) : COMMON_CALL NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine updates the start record count to include those
!	records in the file that were previously written.
!
! CALLING SEQUENCE:
!	RECALC_ST_REC(ARG1), called in kernel mode
!
! INPUT PARAMETERS:
!	ARG1 - number of blocks previously written
!
! IMPLICIT INPUTS:
!	CURRENT_VCB - address of current volume control block
!
! OUTPUT PARAMETERS:
!	None
!
! IMPLICIT OUTPUTS:
!	Start record number updated to reflect previously written records
!
! ROUTINE VALUE:
!	None
!
! SIDE EFFECTS:
!	None
!
! USER ERRORS:
!	None
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_REG;

    CURRENT_VCB[VCB$L_ST_RECORD] = .CURRENT_VCB[VCB$L_ST_RECORD] -
    .BLOCK_COUNT;
    END;					! end of routine
END

ELUDOM
