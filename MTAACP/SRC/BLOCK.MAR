	.TITLE	BLOCK
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
;
; Facility:	magnetic tape acp
;
; Abstract:
;	this module handles the blocking and unblocking of the process
;
;
; Environment:
;	starlet operating system, including privileged system services
;	and internal exec routines.
;
;
; Author:  DEBORAH H. GILLESPIE,   Creation Date:	05-JUL-1977
;
; Modified By:
;
;	V02-005 DMW00025	David Michael Walp	20-Jul-1981
;		Changed free page handling to not contract P0 region
;		
;	V02-004 DMW00010	David Michael Walp	14-Mar-1981
;		Changed calculation of CCB address using GET_CCB
;
;	V02-003	KDM0037		Kathleen D. Morse	12-Feb-1981
;		Change non-kernel mode references to SCH$GL_CURPCB
;		to use CTL$GL_PCB instead.
;
;	V02-002	REFORMAT	D M WALP	25-JUL-1980
;
; RevisioN History:
;
;	 D. H. GILLESPIE, VERSION a0001, 12-MAY-1978
; 	a0001 - change current_vcb to register
;--

;
; Include Files:
;	.include mtadef.mar
;

;
; Macros:
;

	$PCBDEF

;

;
;
; Equated Symbols:
;
;

	ASTEXIT	= 0			; ast exit change mode code
	EXEC_MODE	= 1		; exec mode

;
; displacements of interesting variables on stack
;

	PREVFP	= 12			; location on stack of saved 
					; fp of caller

;
; parameters for kernel_block
;

	REASON	= 4			; mask in status to set indicating 
					; reason for block
	PAGE	= 8			; first argument is page address

	$VCBDEF				; define volume control block
	$VVPDEF				; define volume virtual page

;
; Own Storage:
;



;++
; 
; BLOCK - this routine handles the blocking of current request
;
; Calling sequence:
;	call	arglist,block
;
; Input Parameters:
;	reason(ap) - mask of status bit to be set indicating reason for block
;
; Implicit Inputs:
;	the exec stack
;
; Output Parameters:
;	none
;
; Implicit Outputs:
;	virtual page(s) containing stack and impure area
;
; Routine Value:
;	none
;
; Side Effects:
; 	the request's exec stack and impure area are saved
;--


	.PSECT	$CODE$,NOWRT,LONG

BLOCK::
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>; save registers

;
; block current process
;

10$:	MOVL	PREVFP(FP),R0		; get previous frame pter
	CMPL	#EXCEPT_HNDLR,(R0)	; does it contain the exception handler
	BEQLU	20$			; yes,leave fp at frame before this one
	MOVL	R0,FP			; try next one
	BRB	10$			; check it
20$:	SUBL3	SP,R0,R6		; calc # of bytes of stack to save
	ADDL3	#IMPURE_SIZE+2+VVP$K_LENGTH,-
		R6,R7			; save impure area, length and 
					; include fixed area of virtual blocks
	CLRL	R8			; r7-r8 quotient
	EDIV	#512,R7,R0,R1		; calc # of virtual pages needed
	TSTL	R1			; is another page needed
	BEQLU	50$			; no
	INCL	R0			; yes, inc # of pages needed
50$:	PUSHAL	-(SP)			; allocate space to store address of
					; free page  and push that addr
	PUSHL	R0			; # of pages needed
	CALLS	#2,GET_FREE_PAGE	; get virtual page(s)
	POPR	#^M<R3>			; get free page address off stack
	MOVB	#VVP_TYPE,VVP$B_TYPE(R3); set block type to virtual page

;
; change to kernel mode to insert in volume virtual page queue
;

	PUSHL	R3			; address of page
	PUSHL	REASON(AP)		; reason for block
	PUSHL	#2			; one argument
	PUSHL	SP			; address of argument list
	PUSHAB	KERNEL_BLOCK
	CALLS	#5,@#SYS$CMKRNL
	MOVC	#IMPURE_SIZE,USER_STATUS,-
		VVP$K_LENGTH(R3)	; move impure area to virtual page
	MOVW	R6,(R3)+		; amount of stack
	MOVC	R6,(SP),(R3)		; move stack
	CLRL	IO_PACKET		; prevent completion of io
	RET				; return to control with all 
					; register clobbered


;++
;
; UNBLOCK - this routine locates the stack and impure area for the blocked 
;	    process.  it restores the impure area, locates the exception
;	    handler on the stack and overlays the stack beginning just
;	    following the exception handler frame. it returns the virtual 
;	    address space to the free page list.  it then returns to where 
;	    the blocked process left off.
;
; Calling sequence:
;	call	unblock
;
; Input Parameters:
;	none
;
; Implicit Inputs:
;	the exec stack, current_vcb(in r11) and its associated virtual pages
;
; Output Parameters:
;	none
;
; Implicit Outputs:
;	virutal page(s) containing saved data are returned to the free pages
;	list stack is restored.  the exec stack is restored to state before 
;	process was blocked.  if an ast triggered the unblocking of the proces,
;	an exit ast is done.
;--

;
; Routine Value:
;	none
;
; Side Effects:
;

	.PSECT	$CODE$,NOWRT,LONG

	.EXTRN	GET_CCB

UNBLOCK::
	.WORD	^M<>			; don't save registers

	MOVL	VCB$L_VPBL(R11),R6	; pickup tail of virtual page list, 
					; contains saved process status
	MOVC3	#IMPURE_SIZE,-
		VVP$K_LENGTH(R6),-
		USER_STATUS		; restore impure area first

;
; locate exception handler on stack
;

10$:	MOVL	PREVFP(FP),FP		; pickup previous fp
	CMPL	#EXCEPT_HNDLR,(FP)	; is this the exception frame?
	BNEQU	10$			; not found yet

;
; found exception handler on stack
;

	MOVZWL	(R1),R0			; convert word length to long length
	SUBL2	R0,FP			; restore stack pointer by subtracting
					; length from exception frame address
	MOVL	FP,SP			; reset stack pointer
	MOVC3	(R1)+,(R1),(FP)		; restore stack

;
; now give back the pages used to store the stack
;

	CLRL	-(SP)			; no parameters
	PUSHL	SP			; address of argument list
	PUSHAB	KERNEL_UNBLOCK		; address of subroutine to execute in 
					; kernel mode
	CALLS	#3,@#SYS$CMKRNL		; change mode to kernel so can write 
					; to sys space
	CLRL	-(SP)			; do not contract the MTAACP space
	PUSHL	R6			; addr of page
	CALLS	#2,RET_FREE_PAGE	; return pages

;
; if there is an active ast for exec mode, exit from it
;

	MOVL	G^CTL$GL_PCB,R1		; address of pcb for this process
	BBC	#EXEC_MODE,PCB$B_ASTACT(R1),20$
	$SETAST_S	#0		; disable ast delivery
	CHMK	S^#ASTEXIT		; return from ast

20$:	RET				; return to where process blocked


;++
;
; KERNEL_BLOCK
;	this routine inserts a virtual page into to volume's virtual
;	page queue in the volume control block and set the reason for the block
;
; Calling sequence:
;	callg	arglist,kernel_block
;	called in kernel mode
;
; Input Parameters:
;	reason(ap)	- mask in status to set indicating reason for block
;	page(ap)	- address of page to insert at tail of the virtual page
;			   queue
;
; Implicit Inputs:
;	current-vcb - address of current volume control block
;
; Output Parameters:
;	none
;
; Implicit Outputs:
;	insert complete
;
; Routine Value:
;	none
;
; Side Effects:
;	none
;
;--

KERNEL_BLOCK:
	.WORD	^M<>			; save register one
	BISB2	REASON(AP),VCB$B_STATUS(R11); set reason for block
	INSQUE	@PAGE(AP),@VCB$L_VPBL(R11); insert in queue
	RET


;++
;
; KERNEL_UNBLOCK
;	this routine removes the tail of the virtual page queue in the
;	volume control block and the volume set reasons for waiting are cleared
;	it also requests any stalled i/o
;
; Calling sequence:
;	callg	kernel_unblock
;	called in kernel mode
;
; Input Parameters:
;	r11 - address of volume control block
;
; Implicit Inputs:
;	none
;
; Output Parameters:
;	none
;
; Implicit Outputs:
;	one item removed from tail of  virtual page queue
;	reason's for blocking process are cleared
;
; Routine Value:
;	none
;
; Side Effects:
;	none
;
;--

KERNEL_UNBLOCK:
	.WORD	^M<R7,R8>		; save one register
1$:	MOVL	VCB$L_VPFL(R11),R8	; get addr of virtual page for this vol
	REMQUE	@VVP$L_STALLIOBL(R8),R8	; pickup packet at end of stalled 
					; i/o queue
	BVS	2$			; packet not found

;
; requeue all stalled i/o
;

	INSQUE	(R8),@QUEUE_HEAD
	BRB	1$
2$:	BICB2	#<VCB$M_WAIREWIND + VCB$M_WAIMOUVOL + VCB$M_WAIUSRLBL>,-
	VCB$B_STATUS(R11)		; reason for blocking
	REMQUE	@VCB$L_VPBL(R11),R8	; remove one entry

;
; assign channel
;

	PUSHL	IO_CHANNEL		; calc addr of channel control block
	CALLS	#1,GET_CCB		; via GET_CCB in kernel mode
	MOVL	CURRENT_UCB,(R0)	; stuff channel with current ucb

	RET

	.END
