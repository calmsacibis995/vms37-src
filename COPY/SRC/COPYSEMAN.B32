MODULE copyseman (	! Semantics of input/output spec combinations for COPY command
                    LANGUAGE (BLISS32),
                    IDENT = 'V03-001'
                    ) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY:	COPY Command
!
! ABSTRACT:
!
!	This module contains a decision table that lists combinations of valid
!	and invalid specifications to the COPY command, and associated semantic
!	actions. Also contained is a routine that sets bits in the COPY status
!	words and and values in RMS data blocks that cause these semantic actions to occur.
!
! ENVIRONMENT:
!
!	VAX/VMS operating system, unprivileged user mode utility,
!	operates at non-AST level.
!
!--
!++
!
! AUTHOR:	Carol Peters,	CREATION DATE:	19 April 1978 19:31
!
! REVISION HISTORY:
!
!	V03-001 TSK0001		Tamar Krichevsky	16-Mar-82
!		Explicit input version numbers should be preserved if the 
!		output file specification is wild.
!
!	V02-003	WMC0003		Wayne Cardoza	3-Nov-1981
!		Always maximize version number when concatenating files unless
!		an explicit output version was specified.
!
!	V02-002	WMC0002		Wayne Cardoza	2-Nov-1981
!		Explicit input versions should preserve version numbers if
!		no output file spec is specified.
!--

!
! Table of Contents
!
FORWARD ROUTINE
    copy$semantics;					! Determines the semantics of a COPY command

!
! Include files
!

LIBRARY 'SYS$LIBRARY:STARLET.L32';			! Common VAX/VMS definitions

REQUIRE 'SRC$:COPY.REQ';				! Local definitions for COPY utility

REQUIRE 'SRC$:COPYMSG.REQ';				! Definition of macros to SIGNAL a message

!
! Global variables
!

!
! Own variables
!

!
! Macros
!
MACRO
    or_op (x) [] =					! OR operator to be used in iterative macro.
        OR %,

    stored_mask (x) [] =				! Makes a mask of named bit numbers.
        1 ^ (x) or_op (%REMAINING) stored_mask (%REMAINING) %;

!
! Equated symbols
!
LITERAL
    mask_value		= 0,				! Mask value in decision table entry.
    action_value	= 1,				! Action label in decision table entry
    next_entry		= 2,				! Next entry in decision table

    mul_quiet_slip	= 0,				! Create multiple files, match versions, slip quietly
    multiple_slip	= 1,				! Create multiple files, match versions, report slips
    multiple_max	= 2,				! Create multiple files, maximize version numbers
    max_or_new		= 3,				! Maximize or use new version number
    concat_slip		= 4,				! Concatenate input files, slip version numbers
    error_spec		= 5,				! Error in combination of input and output specs
    no_action		= 6;				! No action to take

!
! External variables
!
EXTERNAL ROUTINE
    copy$inopn_err;					! Reports an error resulting from an OPEN of an input file.

!
! The decision table below, DECISION_TABLE, is made up of two WORD entries, of
! which the first word is a mask of bit settings, and the second is a case label
! associated with the mask.
!
!  Bit  0              16             31
!	-------------------------------
!	|              |              |
!	|     mask     |    action    |
!	|              |              |
!	-------------------------------
!

BIND
    decision_table	= UPLIT WORD
        (

!
! Rule 1:
!	Explicit wildcard output fields specified with the /CONCATENATE qualifier is an error.
!
          stored_mask (wild_input_bit, wild_output_bit, concat_qual_bit), error_spec

!
! Rule 2:
!	Specification of the /CONCATENATE qualifier with an output specification that contains no
!	explicit name, type, and version number fields is an error.
!
        , stored_mask (concat_qual_bit, no_out_spec_bit), error_spec

!
! Rule 3:
!	A wildcard input version number specified with an output specification that contains no
!	explicit name, type, and version number fields causes output files to be created whose
!	version numbers may be lower than those of existing files.
!
        , stored_mask (wild_in_ver_bit, no_out_spec_bit), mul_quiet_slip

!
! Rule 4:
!	Specification of both input wildcard version number and output wildcard version number
!	quietly allows output files to be created whose version numbers are lower than those of
!	existing files. Input version numbers are matched if possible. Overwrites usually fail.
!
        , stored_mask (wild_in_ver_bit, wil_out_ver_bit), mul_quiet_slip

!
! Rule 5:
!	A wildcard output version number produces matching version numbers and warnings
!	if an attempt is made to create an output file whose version number is lower
!	than that of an existing file.
!
        , stored_mask (wil_out_ver_bit), multiple_slip

!
! Rule 6:
!	A wildcard input version number specified with wildcard output fields (but not wildcard
!	output version number field) causes a warning to be reported if an attempt is made to
!	create an output file with a version number lower than that of an existing file.
!
        , stored_mask (wild_in_ver_bit, wild_output_bit), multiple_slip

!
! Rule 7:
!	Wildcard output fields and explicit wildcard version number field causes multiple
!	files to be created, and a warning to be reported if an attempt is made to create
!	an output file with a version number lower than that of an existing file.
!
	, stored_mask (wild_output_bit, exp_out_ver_bit), multiple_slip
!
!Rule 7a:
!	Explicit input versions and no output spec should cause multiple files
!	to be created with a warning to be reported if an attempt is made to create
!	an output file with a version number lower than that of an existing file.
!
	, stored_mask (exp_in_ver_bit, no_out_spec_bit), multiple_slip

!
!Rule 7b:
!	Explicit input versions and wild output spec should cause multiple files
!	to be created with a warning to be reported if an attempt is made to create
!	an output file with a version number lower than that of an existing file.
!
	, stored_mask (exp_in_ver_bit, wild_output_bit), multiple_slip

!
! Rule 8:
!	Wildcard output fields (but not wildcard output version number field) causes a warning
!	to be reported if an attempt is made to create an output file with a version number
!	lower than that of an existing file. Output version numbers are maximized.
!
        , stored_mask (wild_output_bit), multiple_max

!
! Rule 9:
!	Absence of output file name, type, and version number specification always cause
!	no concatenation and maximized version numbers.
!
        , stored_mask (no_out_spec_bit), multiple_max

!
! Rule 10:
!	An explicit output version number creates a concatenated output file whose version number
!	may be lower than that of an existing file.
!
        , stored_mask (exp_out_ver_bit), concat_slip

!
! Rule 11:
!	An explicit input version number specified with no explicit output version number (wildcard
!	or otherwise) creates a concatenated output file with a maximized or new version number if
!	there are multiple input files. Preserve version number for a single input file.
!
        , stored_mask (exp_in_ver_bit, mul_input_bit), max_or_new
        , stored_mask (wild_input_bit), max_or_new
        , 0, no_action
        );

GLOBAL ROUTINE copy$semantics (status, input_fab, output_fab) =
							! Chooses semantics for COPY command

!++
! Functional description:
!
!	This routine consults a decision table (DECISION_TABLE) to decide
!	the appropriate semantics for a given input/output specification pair.
!
!	The status passed as an input parameter is compared with various mask
!	settings in the decision table. If an item in the decision table matches
!	the status, then an associated action is taken.
!
!	Actions set or turn off status bits, and/or write values to fields in
!	the output FAB, NAM, and XAB blocks.
!
! Calling sequence:
!
!	copy$semantics (status.ra, input_fab.ra, output_fab.ra)
!
! Input parameters
!
!	status		- address of a status word
!	input_fab	- address of the FAB associated with the current input file
!	output_fab	- address of the FAB associated with the current output file
!
! Implicit inputs
!
!	The NAM and XAB blocks associated with the input and output FABs.
!
! Output parameters
!
!	none
!
! Implicit outputs
!
!	Bits that may be written in the status word include the following:
!
!	Fields in the NAM blocks that may be written include the following:
!
!	Fields in the XAB blocks that may be written include the following:
!
! Routine value
!
!	OK		- success
!	ERROR		- error in combination of input and output specifications
!
! Side effects
!
!	none
!
!--

    BEGIN

    MAP
        status		: REF VECTOR [, WORD],		! Pointer to the status word
        input_fab	: REF BLOCK [, BYTE],		! Input FAB block
        output_fab	: REF BLOCK [, BYTE];		! Output FAB block

    LOCAL
        decis_tbl_ptr	: REF VECTOR [, WORD];		! Pointer to current entry in DECISION_TABLE.

!
! Set up a pointer to the first entry in the decision table.
!

    decis_tbl_ptr = decision_table;			! The address of the table addresses the first entry.

!
! Start out without maximized file versions.
!

	output_fab [fab$v_mxv] = FALSE;

!
! Iteratively move through the decision table. For each entry, see if all the bits set
! in the mask are also set in the status word. If they are, exit from the
! loop with the decision table pointer pointing to that entry.
!
! If no masks match the status word, return from this routine with an error status code.
!

    WHILE 1 DO						! Loop once for each entry in the decision table.
        BEGIN
        IF (.status [0] AND .decis_tbl_ptr [mask_value])!    If the bits in the mask are also set in
                EQL .decis_tbl_ptr [mask_value]		!        the status word,
        THEN
            EXITLOOP					!        then exit from this comparing loop.
        ELSE
            decis_tbl_ptr = decis_tbl_ptr [next_entry];	!    Otherwise, move to the next table entry.
        IF .decis_tbl_ptr [mask_value] EQL 0		!    If this entry is null,
        THEN
            EXITLOOP;					!        then perform associated null action.
        END;						!    Else go through the loop again.

!
! Now take the action associated with the matched mask value.
!

    CASE .decis_tbl_ptr [action_value]			! This case statement performs the appropriate
            FROM mul_quiet_slip TO no_action OF		!    action routine.

        SET

        [mul_quiet_slip]:				! Multiple output files, slip version numbers silently
            BEGIN
            multiple_output = TRUE;			!    Set the flag indicating multiple output
            quiet_slip = TRUE;				!    and slip versions without reporting them.
            END;					!    files are to be created.


        [multiple_slip]:				! Multiple output files, slip version numbers and report
            BEGIN
            multiple_output = TRUE;			!    Set the flag indicating multiple output.
            END;


        [multiple_max]:					! Multiple output files, maximize version numbers.
            BEGIN
            multiple_output = TRUE;			!    Set the flag indicating that multiple output
							!    files are to be created.
            output_fab [fab$v_mxv] = TRUE;		!    Set a bit in the output FAB that causes version
							!    numbers to be maximized.
            END;


        [max_or_new]:					! Concatenate and maximize
            BEGIN
            concat_follows = TRUE;			!    Set flag saying that concatenating files.
            output_fab [fab$v_mxv] = TRUE;		!    Set a bit in the output FAB that causes version
							!    numbers to be maximized.
            END;


        [concat_slip]:					! Concatenate and slip version numbers.
            BEGIN
            concat_follows = TRUE;			!    Set flag saying that concatenating files.
            END;


        [error_spec]:					! Error in spec combination.
            BEGIN
            put_message (msg$_wildconcat, 99);		! Report fatal error.
            RETURN error;				!    Return an error code.
            END;


        [no_action]:					! No action to take.
            BEGIN
            concat_follows = TRUE;			!    Set flag saying that concatenating files.
            END;

        TES;

!
! Some special case to handle the /NOCONCATENATE qualifer when it is explicitly specified.
!

    IF .noconcat_qual					! If the /NOCONCATENATE qualifier was explicitly
    THEN						! specified,
        BEGIN
        multiple_output = TRUE;				!    then note that multiple files are to be produced
        concat_follows = FALSE;				!    and turn off concatenation.
        END;

!
! Test for more error conditions. Files with relative, indexed, and hashed organizations
! cannot be concatenated with other files.
!

    IF NOT .multiple_output				! If multiple output files are not being created,
    THEN						!    then concatenation or single file COPY is occurring.
        BEGIN
        IF .outfile_open OR				!    If an output file is open, we must be appending to it;
            .multiple_input OR				!    if more than one input file is specified, COPY
							!        tries to append.
            .wild_input OR				!    again, multiple input files;
            .append_command				!    the APPEND command always concatenates.
        THEN						! This sort of COPY is only allowed if file
            BEGIN					!    organization is a simple one.
            IF .input_fab [fab$b_org] EQL fab$c_rel	! If the file has relative organization,
            THEN
                BEGIN
                input_fab [fab$l_sts] =			!    Report an error by loading a special
                    copy$msg_number (			!    error code into the RMS status field of
                                        msg$_relconcat);! the input FAB.
                input_fab [fab$l_stv] = 0;		! Clear the secondard RMS status value.
                copy$inopn_err (			! Call the open error action routine
                                .input_fab);		!    with the address of the input FAB block.
                wildcard_active = FALSE;		! Turn off the WILDCARD_ACTIVE flag.
                RETURN no_file;				! Return an error message to the caller.
                END;

            IF .input_fab [fab$b_org] EQL fab$c_idx	! If this is an indexed file organization,
            THEN
                BEGIN					!    construct a similar error.
                input_fab [fab$l_sts] =
                    copy$msg_number (
                                        msg$_idxconcat);
                input_fab [fab$l_stv] = 0;
                copy$inopn_err (
                                .input_fab);
                wildcard_active = FALSE;
                RETURN no_file;
                END;

            IF .input_fab [fab$b_org] EQL fab$c_hsh	! If this is a hashed file organization,
            THEN
                BEGIN					!    construct a similar error.
                input_fab [fab$l_sts] =
                    copy$msg_number (
                                        msg$_hashconcat);
                input_fab [fab$l_stv] = 0;
                copy$inopn_err (
                                .input_fab);
                wildcard_active = FALSE;
                RETURN no_file;
                END;

            END;

        END;

!
! Return with success status code.
!

    RETURN ok;						! Return successfully.

    END;

END
ELUDOM
