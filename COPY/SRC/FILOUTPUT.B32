MODULE filoutput (  ! Declarations of output file RMS blocks for file handling utilities
                    LANGUAGE (BLISS32),
                    IDENT = 'V03-000'
                    ) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY:	File Handling Utilities
!
! ABSTRACT:
!
!	This module contains declarations of the RMS data storage areas needed
!	for handling output file specifications.
!
! ENVIRONMENT:
!
!	VAX/VMS operating system, unprivileged user mode utility,
!	operates at non-AST level.
!
!--
!++
!
! AUTHOR:	Carol Peters,	CREATION DATE:	25 April 1978 09:23
!
! REVISION HISTORY:
!
!--

!
! Include files
!

LIBRARY 'SYS$LIBRARY:STARLET.L32';			! System definitions

!
! External declarations
!

EXTERNAL
    infile_nam_blk	: BLOCK [, BYTE];		! Related input file NAM block

!
! Global variables
!

GLOBAL
    outfile_fab		: $FAB_DECL,			! Space for the output file FAB, which
							!    is filled in at execution time

    outfile_rab		: $RAB_DECL,			! Space for the output file RAB, which
							!    is filled in at execution time

    outfile_name	: VECTOR [nam$c_maxrss, BYTE],	! output file name after open

    outfile_xname	: VECTOR [nam$c_maxrss, BYTE],	! output file name before open

    outfile_nam_blk	: $NAM (			! output file name block:
                                RSA = outfile_name,	!    Address and length of the output
                                RSS = nam$c_maxrss,	!       file name after open
                                ESA = outfile_xname,	!    Address and length of the output
                                ESS = nam$c_maxrss,	!       file name before open
                                RLF = infile_nam_blk),	!    Related input file

							! output file XAB chain:
    outfile_xabrdt	: $XABRDT (),			!    Revision date and time XAB

    outfile_xabpro	: $XABPRO (			!    Protection XAB
                                    NXT = outfile_xabrdt),

    outfile_xabdat	: $XABDAT (			!    Date/time XAB
                                    NXT = outfile_xabpro),

    outfile_xaball	: $XABALL (			!    Allocation XAB
                                    NXT = outfile_xabdat),

    outfile_xabfhc	: $XABFHC (			!    File header characteristics XAB
                                    NXT = outfile_xaball),

    out_name_desc	:  VECTOR [2]			! output file name descriptor
                           INITIAL (0, outfile_name);

END
ELUDOM
