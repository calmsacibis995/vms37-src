MODULE copycli (   ! Declarations of CLI data structures for the COPY command
                    LANGUAGE (BLISS32),
                    IDENT = 'V03-000'
                    ) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY:	File Handling Utilities
!
! ABSTRACT:
!
!	This module contains declarations of the RMS data storage areas needed
!	for handling input file specifications.
!
! ENVIRONMENT:
!
!	VAX/VMS operating system, unprivileged user mode utility,
!	operates at non-AST level.
!
!--
!++
!
! AUTHOR:	Carol Peters,	CREATION DATE:	28 April 1978 07:36
!
! REVISION HISTORY:
!
!	003	TMH0003		T. Halvorsen	17-Nov-1979
!		Add cleanup2_desc for output parameter cleanup call.
!
!	002	TMH0002		T. Halvorsen	25-Jul-1979
!		Add relative volume placement control
!--

!
! Table of contents
!

FORWARD ROUTINE
    get_cmd_qual	: NOVALUE,			! Retrieve command level qualifiers from CLI
    cli_error		: NOVALUE,			! CLI error routine
    align_parse		: NOVALUE,			! Parse routine for /ALIGNMENT qualifier
    numeric_parse	: NOVALUE,			! Parse routine for qualifier numeric value
    protect_parse	: NOVALUE;			! Parse routine for /PROTECTION qualifier

!
! Include files
!

LIBRARY 'SYS$LIBRARY:STARLET.L32';			! Common system definitions

LIBRARY 'SYS$LIBRARY:CLIMAC.L32';			! CLI definitions

REQUIRE 'SRC$:COPY.REQ';				! Definitions for the COPY utility

REQUIRE 'SRC$:COPYMSG.REQ';				! Put message macros

!
! External declarations
!

EXTERNAL

!
! RMS definition
!

    infile_xaball	: BLOCK [, BYTE],		! XABALL block associated with input file

!
! Parsing keyword tables
!

    copy$align_keys,					! Alignment keyword table
    copy$prot_keys,					! Protection keyword table
    copy$prot_value;					! Protection keyword value table

EXTERNAL ROUTINE
    lib$lookup_key;					! Library keyword lookup routine

!
! Global variables
!

GLOBAL

!
! The following variables hold qualifier and option values gathered during the CLI processing.
!

    align_type		: BYTE,				! Output file alignment type
    align_option	: BYTE,				! Output file alignment type
    align_location,					! Output file location value
    alloc_value,					! Binary allocation value
    extension_value,					! Binary extension value
    file_max_value,					! Binary file maximum value
    protect_and		: WORD INITIAL (-1),		! Protection value AND mask
    protect_or		: WORD INITIAL (0),		! Protection value OR mask
    volume_value	: WORD INITIAL (0),		! Relative volume number


!
! CLI Control blocks and work areas used by both the COPY and the APPEND commands.
!

    initial_desc:					! CLI initialization descriptor:
		$CLIREQDESC (rqtype = initprs,		!    Initialization indicator
			     rqflgs = absadr,		!    Absolute address indicator
			     erract = cli_error),	!    Address of error action routine

    cmd_name_desc:					! Command line request descriptor:
		$CLIREQDESC (rqtype = getcmd,		!    Command-line (i.e., name) indicator
			     rqflgs = absadr,		!    Absolute address indicator
			     erract = cli_error),	!    Address of error action routine

    cmd_desc:						! Command qualifiers request descriptor:
		$CLIREQDESC (rqtype = getqual,		!    Command-level qualifiers request
			     rqflgs = absadr,		!    Absolute address indicator
			     erract = cli_error,	!    Address of error action routine
			     qualst = 0),		!    Address of qualifier descriptors
							!    supplied at execution time.

    infile_desc:					! Input file request descriptor:
		$CLIREQDESC (rqtype = input1,		!    Primary input indicator
			     rqflgs = absadr,		!    Absolute address indicator
			     erract = cli_error,	!    Address of error action routine
			     qualst = 0),		!    Address of qualifier descriptors
							!    supplied at execution time.

    outfile_desc:  					! Output file request descriptor:
		$CLIREQDESC (rqtype = output1,		!    Primary output indicator
			     rqflgs = absadr,		!    Absolute address indicator
			     erract = cli_error,	!    Address of error action routine
			     qualst = 0),		!    Address of qualifier descriptors
							!    supplied at execution time.

    cleanup_desc:					! Parameter "cleanup" request descriptor:
		$CLIREQDESC (rqtype = endprm1,		!    Parameter cleanup indicator
			     rqflgs = absadr,		!    Absolute address indicator
			     erract = cli_error),	!    CLI error action routine

    cleanup2_desc:
		$CLIREQDESC (rqtype = endprm2,		! Output parameter "cleanup" requrest
			     rqflgs = absadr,
			     erract = cli_error),

    numb_parse_desc:					! Decimal value parse request descriptor:
		$CLIREQDESC (rqtype = numerval,		!    Numeric value parse indicator
			     rqflgs = <absadr>,		!    Single value and absolute address indicators
			     erract = cli_error),	!    Address of error action routine

    str_parse_desc:					! ASCII string value parse request descriptor:
		$CLIREQDESC (rqtype = asciival,		!    ASCII string value parse indicator
			     rqflgs = absadr,		!    Absolute address indicator
			     erract = cli_error),	!    Address of error action routine

    cli_work_area:  VECTOR [cli$c_workarea, BYTE];	! CLI work area

!
! COPY-specific Command Language Interpreter control Blocks
!

    $CLIQUALCODES (copy,				! Define the COPY qualifier codes
                    alignment,
                    allocation,
                    concatenate,
                    contiguous,
                    extension,
                    file_maximum,
                    log,
                    overlay,
                    protection,
                    read_check,
                    replace,
                    truncate,
		    volume,
                    write_check);

!
! Command Qualifier Descriptors
!

GLOBAL
    copy_conc_qual:					! concatenate qualifier
		$CLIQUALDESC (qdcode = concatenate,
			      setlst = concatenate_bit),

    copy_log_qual:					!    log qualifier
		$CLIQUALDESC (qdcode = log,
			      setlst = log_msg_bit),

    copy_qual_end:					! End of command qualifier descriptors
		$CLIQUALEND,

!
! Input file Qualifier Descriptors
!

    copy_iread_qual:					! read_check qualifier
		$CLIQUALDESC (qdcode = read_check,
			      setlst = iread_check_bit),

    copy_iqual_end:					! End of input file qualifier descriptors
		$CLIQUALEND,

!
! Output file qualifier descriptors
!

    copy_alig_qual:					! alignment qualifier
		$CLIQUALDESC (qdcode = alignment,
			      truact = align_parse,		!    Address of value parse routine
			      setlst = alignment_bit),

    copy_allo_qual:					! allocation qualifier
		$CLIQUALDESC (qdcode = allocation,
			      truact = numeric_parse,		!    Address of value parse routine
			      usrval = alloc_value,		!    Address of allocation value deposit area
			      setlst = allocation_bit),

    copy_cont_qual:					! contiguous qualifier
		$CLIQUALDESC (qdcode = contiguous,
			      setlst = contiguous_bit),

    copy_exte_qual:					! extension qualifier
		$CLIQUALDESC (qdcode = extension,
			      truact = numeric_parse,		!    Address of value parse routine
			      usrval = extension_value,	!    Address of extension value deposit area
			      setlst = extension_bit),

    copy_file_qual:					! file_maximum qualifier
		$CLIQUALDESC (qdcode = file_maximum,
			      truact = numeric_parse,		!    Address of value parse routine
			      usrval = file_max_value,	!    Address of file maximum value deposit area
			      setlst = file_max_bit),

    copy_over_qual:					! overlay qualifier
		$CLIQUALDESC (qdcode = overlay,
			      setlst = overlay_bit),

    copy_prot_qual:					! protection qualifier
		$CLIQUALDESC (qdcode = protection,
			      truact = protect_parse,		!    Address of value parse routine
			      setlst = protection_bit),

    copy_oread_qual:					! read_check qualifier
		$CLIQUALDESC (qdcode = read_check,
			      setlst = oread_check_bit),

    copy_repl_qual:					! replace qualifier
		$CLIQUALDESC (qdcode = replace,
			      setlst = replace_bit),

    copy_trun_qual:					! truncate files at EOF mark
		$CLIQUALDESC (qdcode = truncate,
			      setlst = truncate_bit),

    copy_volu_qual:					! volume qualifier
		$CLIQUALDESC (qdcode = volume,
			      truact = numeric_parse,
			      usrval = volume_value,
			      setlst = volume_bit),

    copy_writ_qual:					! write_check qualifier
		$CLIQUALDESC (qdcode = write_check,
			      setlst = write_check_bit),

    copy_oqual_end:					! End of output file qualifier descriptors
		$CLIQUALEND;

!
! APPEND-specific Command Language Interpreter control Blocks
!

    $CLIQUALCODES (append,				! Define the append qualifier codes
			alignment,
			allocation,
			contiguous,
			extension,
			file_maximum,
			log,
			new_,
			protection,
			read_check,
			write_check);

!
! Command Qualifier Descriptors
!

							! append command qualifier descriptors:
GLOBAL
    appe_log_qual:					!    log qualifier
		$CLIQUALDESC (qdcode = log,
			      setlst = log_msg_bit),

    appe_qual_end:					! End of command qualifier descriptors
		$CLIQUALEND,

!
! Input file Qualifier Descriptors
!

    appe_iread_qual:					! read_check qualifier
		$CLIQUALDESC (qdcode = read_check,
			      setlst = iread_check_bit),

    appe_iqual_end:					! End of input file qualifier descriptors
		$CLIQUALEND,

!
! Output file Qualifier Descriptors
!

    appe_alig_qual:					! alignment qualifier
		$CLIQUALDESC (qdcode = alignment,
			      truact = align_parse,	!    Address of value parse routine
			      setlst = <alignment_bit, new_bit>),

    appe_allo_qual:					! allocation qualifier
		$CLIQUALDESC (qdcode = allocation,
			      truact = numeric_parse,	!    Address of value parse routine
			      usrval = alloc_value,		!    Address of allocation value deposit area
			      setlst = <allocation_bit, new_bit>),

    appe_cont_qual:					! contiguous qualifier
		$CLIQUALDESC (qdcode = contiguous,
			      setlst = contiguous_bit),

    appe_exte_qual:					! extension qualifier
		$CLIQUALDESC (qdcode = extension,
			      truact = numeric_parse,	!    Address of value parse routine
			      usrval = extension_value,	!    Address of extension value deposit area
			      setlst = <extension_bit, new_bit>),

    appe_file_qual:					! file_maximum qualifier
		$CLIQUALDESC (qdcode = file_maximum,
			      truact = numeric_parse,	!    Address of value parse routine
			      usrval = file_max_value,	!    Address of file maximum value deposit area
			      setlst = <file_max_bit, new_bit>),

    appe_new_qual:					! new qualifier
		$CLIQUALDESC (qdcode = new_,
			      setlst = new_bit),

    appe_prot_qual:					! protection qualifier
		$CLIQUALDESC (qdcode = protection,
			      truact = protect_parse,		!    Address of value parse routine
			      setlst = protection_bit),

    appe_oread_qual:					! read_check qualifier
		$CLIQUALDESC (qdcode = read_check,
			      setlst = oread_check_bit),

    appe_writ_qual:					! write_check qualifier
		$CLIQUALDESC (qdcode = write_check,
			      setlst = write_check_bit),

    appe_oqual_end:					! End of output file qualifier descriptors
		$CLIQUALEND;

GLOBAL ROUTINE GET_CMD_QUAL :  NOVALUE =		! Retrieve command-level qualifiers from the CLI

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine completes all CLI request descriptors and then
!	obtains the command-level qualifiers (i.e., options) from the
!	Command Language Interpreter.
!
! FORMAL PARAMETERS:
!
!	None
!
! IMPLICIT INPUTS:
!
!	CMD_NAME_DESC - Command name request descriptor
!
!	The starting address of the CLI qualifier lists for command, input parameter,
!	and output parameter qualifiers. These are:
!
!		copy_conc_qual	- COPY command qualifier list head
!		copy_iread_qual	- COPY input parameter qualifier list head
!		copy_alig_qual	- COPY output parameter qualifier list head
!		appe_log_qual	- APPEND command qualifier list head
!		appe_iread_qual	- APPEND input parameter qualifier list head
!		appe_alig_qual	- APPEND output parameter qualifier list head
!
! IMPLICIT OUTPUTS:
!
!	COPY$CLI_STATUS - Relevant command and qualifier indicators set
!	COPY$SEM_STATUS	- APPEND_COMMAND bit set if this is an APPEND command
!			- CONCAT_QUAL bit set if the /CONCATENATE qualifier was explicitly given
!			- NOCONCAT_QUAL bit set if the /NOCONCATENATE qualifier was explicitly given
!	CMD_DESC - Qualifier list address set
!	INFILE_DESC - Qualifier list address set
!	OUTFILE_DESC - Qualifier list address set
!
! ROUTINE VALUE:
!
!	None
!
! SIDE EFFECTS:
!
!	None
!
!--

    BEGIN

!
! Determine whether this is a COPY command or an APPEND command.
!

    CALL_CLI(						! Call the CLI with the following arguments:
		CMD_NAME_DESC,				!    Command line request descriptor address
		CLI_WORK_AREA,				!    CLI work area address
		COPY$CLI_STATUS );			!    COPY status bit vector address

    IF .CMD_NAME_DESC[CLI$B_RQSTAT] EQL CLI$K_VERB_COPY	! If this is a COPY command,
    THEN						! setup the addresses of the COPY qualifier
	BEGIN						! descriptor lists in the following CLI control blocks:
	CMD_DESC[CLI$A_QUALST] = COPY_CONC_QUAL;	!    Command qualifier request descriptor
	INFILE_DESC[CLI$A_QUALST] = COPY_IREAD_QUAL;	!    Input file request descriptor
	OUTFILE_DESC[CLI$A_QUALST] = COPY_ALIG_QUAL;	!    Output file request descriptor
	END
    ELSE
	BEGIN						! Otherwise,
	APPEND_COMMAND = YES;				! indicate that this is an APPEND command
							! and setup the address of the APPEND qualifier
							! descriptor lists in the following CLI control blocks:
	CMD_DESC[CLI$A_QUALST] = APPE_LOG_QUAL;		!    Command qualifier request descriptor
	INFILE_DESC[CLI$A_QUALST] = APPE_IREAD_QUAL;	!    Input file request descriptor
	OUTFILE_DESC[CLI$A_QUALST] = APPE_ALIG_QUAL;	!    Output file request descriptor
	END;

!
! Get the command-level qualifiers from the Command Language Interpreter.
!

    CALL_CLI(						! Call the CLI with the following arguments:
		CMD_DESC,				!    Command qualifiers request descriptor address
		CLI_WORK_AREA,				!    CLI work area address
		COPY$CLI_STATUS );			!    COPY status bit vector address

!
! See whether the user explicitly specified /CONCATENATE or /NOCONCATENATE.
!

    IF .copy$cli_status [concatenate_bit]		! If concatenation is to occur,
    THEN
        BEGIN						!    then test whether the explicit qualifier --
        IF explic_cop_qual [conc]			!    /CONCATENATE -- was given.
        THEN
            concat_qual = TRUE;				!    Set CONCAT_QUAL in COPY$SEM_STATUS is qualifier present.
        END
    ELSE						! Otherwise, test to see whether the explicit
        BEGIN						!    negative qualifier -- /NOCONCATENATE --
        IF explic_cop_qual [conc]			!    was given, set NOCONCAT_QUAL in
        THEN						!    COPY$SEM_STATUS.
            noconcat_qual = TRUE;
        END;

    END;

ROUTINE CLI_ERROR (					! CLI error action routine
		CB_ADDRESS,				! Address of associated CLI control block
		ERROR_NUMBER )				! CLI error number
		: NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This CLI error action routine sends a CLI error message to the user.
!
! FORMAL PARAMETERS:
!
!	CB_ADDRESS.ra.v - Address of the associated CLI control block
!	ERROR_NUMBER.rlu.v - CLI error number
!
! IMPLICIT INPUTS:
!
!	None
!
! IMPLICIT OUTPUTS:
!
!	None
!
! ROUTINE VALUE:
!
!	None
!
! SIDE EFFECTS:
!
!	None
!
!--

    BEGIN

    BIND
	CONTROL_BLOCK = .CB_ADDRESS :  BLOCK[,BYTE];	! Define the format of the input argument

!
! Call FAO to format the error message in the message buffer.
!

    PUT_MESSAGE( MSG$_SYNTAX,				! Signal "syntax error" with the following arguments:
		1,					!    Number of message arguments
		CONTROL_BLOCK[CLI$Q_RQDESC],		!    Address of current element descriptor
		.ERROR_NUMBER );			!    CLI error number (secondary message)

!
! Return to the caller.
!

    RETURN;						! Return to the caller.

    END;

ROUTINE ALIGN_PARSE (					! ALIGNMENT qualifier value parse routine
			QUAL_DESC_ADDR )		! Address of associated qualifier descriptor
			: NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine parses a ALIGNMENT qualifier value.
!
! FORMAL PARAMETERS:
!
!	QUAL_DESC_ADDR.r.r - Address of the qualifier descriptor containing
!			     the value(s) to be parsed
!
! IMPLICIT INPUTS:
!
!	STR_PARSE_DESC - CLI string parsing descriptor
!	INFILE_XABALL - Input file allocation XAB
!
! IMPLICIT OUTPUTS:
!
!	ALIGN_TYPE - XAB$B_ALN code
!	ALIGN_OPTION - XAB$B_AOP "and" mask
!	ALIGN_LOCATION - actual cylinder or logical location value
!
! ROUTINE VALUE:
!
!	None
!
! SIDE EFFECTS:
!
!	None
!
!--

    BEGIN

    BIND
	QUAL_DESC = .QUAL_DESC_ADDR :  BLOCK[,BYTE];	! Redefine the input argument

    LOCAL
	STATUS,						! Keyword lookup completion code

	QUAL_VALUE_DESC :  VECTOR[2],			! Qualifier value descriptor before parsing

	KEY_VALUES :  VECTOR[4,BYTE];			! 4-byte value returned from keyword lookup

    MACRO						! Redefine the keyword value bytes:
	KEY_TYPE = KEY_VALUES[0] %,			!    XAB$B_ALN code value
	KEY_OPTION = KEY_VALUES[1] %,			!    XAB$B_AOP "and" mask
	KEY_VALUE_OK = KEY_VALUES[2] %,			!    keyword value permitted indicator
	KEY_VALUE_REQ = KEY_VALUES[3] %;		!    keyword value required indicator

!
! Initialize the ALIGNMENT qualifier temporary values.
!

    ALIGN_TYPE = 0;					! Initially, assume no alignment.

    ALIGN_OPTION = .INFILE_XABALL[XAB$B_AOP] OR		! Use the existing alignment options
				XAB$M_HRD;		! but assume forced alignment.

    ALIGN_LOCATION = -1;				! Setup for "any cylinder" alignment.

    QUAL_VALUE_DESC[0] = .QUAL_DESC[CLI$W_QDVALSIZ];	! Save the length and address of the
    QUAL_VALUE_DESC[1] = .QUAL_DESC[CLI$A_QDVALADR];	! qualifier value string before parsing.

!
! Get a qualifier keyword string from the CLI.
!

    STR_PARSE_DESC[CLI$V_MOREVALS] = YES;		! Set bit to begin following loop.

    WHILE .STR_PARSE_DESC[CLI$V_MOREVALS] DO		! Repeat the remainder of this routine 
	BEGIN						! for each qualifier keyword/value pair.

	CALL_CLI(					! Call the CLI with the following arguments:
		STR_PARSE_DESC,				!    String parse request descriptor address
		CLI_WORK_AREA,				!    CLI work area address
		QUAL_DESC );				!    Qualifier descriptor address

!
! Verify that a valid keyword was specified.
!

	STATUS = LIB$LOOKUP_KEY(			! Call the keyword lookup routine with the following args:
			STR_PARSE_DESC[CLI$Q_RQDESC],	!    Address of keyword descriptor
			COPY$ALIGN_KEYS,		!    Address of keyword table
			KEY_VALUES );			!    Address of keyword value deposit area

	IF .STATUS					! If a keyword match was found
	THEN						!
	    BEGIN					!
	    IF .KEY_TYPE NEQ 0				! save the keyword type (if any)
	    THEN					!
		ALIGN_TYPE = .KEY_TYPE;			!
	    ALIGN_OPTION = .ALIGN_OPTION AND		! and update the XAB option mask.
				.KEY_OPTION;

!
! Parse a keyword value.
!

	    IF .STR_PARSE_DESC[CLI$V_KEYVALU]		! If a value follows the keyword,
	    THEN					!
		IF .KEY_VALUE_OK			! make sure that a value is permitted.
		THEN					!
		    BEGIN				! If a value exists and is permitted,
		    CALL_CLI(				! call the CLI with the following arguments:
			    NUMB_PARSE_DESC,		!    numeric parse request descriptor address
			    CLI_WORK_AREA,		!    CLI work area address
			    QUAL_DESC );		!    qualifier descriptor address
							!
		    ALIGN_LOCATION =			! and then save the converted location value.
			.NUMB_PARSE_DESC[CLI$L_RQVALU];	!
							!
		    END
		ELSE					! If a value was specified and no value is permitted,
		    BEGIN				!
		    PUT_MESSAGE(		    	! signal the following error information:
			MSG$_SYNTAX,			!    "syntax error" message id
			1,				!    Number of FAO arguments
			QUAL_VALUE_DESC,		!    Address of qualifier value descriptor
			COPY$MSG_NUMBER(MSG$_BADDELIM),	!    "invalid delimiter" message id
			1,				!    Number of associated FAO arguments
			STR_PARSE_DESC[CLI$Q_RQDESC] );	!    Address of keyword value descriptor
			    				!
		    RETURN;			    	! and then return to the caller.
		    END

!
! Check for a missing keyword value.
!

	    ELSE					! If no keyword value was specified
		IF .KEY_VALUE_REQ			! and a value is required,
		THEN					!
		    BEGIN				!
		    PUT_MESSAGE(		    	! signal the following error information:
		    	MSG$_SYNTAX,		    	!    "syntax error" message id
		    	1,		    		!    Number of FAO arguments
		    	QUAL_VALUE_DESC,		!    Address of qualifier value descriptor
		    	COPY$MSG_NUMBER(MSG$_NOVALUE),	!    "keyword value required" message id
		    	1,		    		!    Number of associated FAO arguments
		    	STR_PARSE_DESC[CLI$Q_RQDESC] );	!    Address of keyword descriptor
		    		    		    	!
		    RETURN;				! and then return to the caller.
		    END;
	    END						! End of valid keyword processing.

!
! Process a keyword lookup error.
!

	ELSE						! If there was a keyword error,
	    BEGIN					!
	    PUT_MESSAGE(				! signal the following error information:
		    MSG$_SYNTAX,			!	"syntax error" message id
		    1,					!	Number of FAO arguments
		    QUAL_VALUE_DESC,			!	Address of qualifier value descriptor
		    .STATUS,				!	Keyword lookup error number
		    1,					!	Number of associated FAO arguments
		    STR_PARSE_DESC[CLI$Q_RQDESC] );	!	Address of keyword descriptor
							    !
	    RETURN;					! and then return to the caller.
	    END;

	END;						! End of the keyword processing loop.

!
! Return to the caller.
!

    RETURN;

    END;

ROUTINE NUMERIC_PARSE (					! Numeric qualifier value parse routine
		QUAL_DESC_ADDR )			! Address of associated qualifier descriptor
		: NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine is called by the CLI for each qualifier which has a decimal value.
!	The CLI is called to validate and convert this numeric value to binary.
!
! FORMAL PARAMETERS:
!
!	QUAL_DESC_ADDR.r.r - Address of the qualifier descriptor containing 
!			     the value to be converted.
!
! IMPLICIT INPUTS:
!
!	NUMB_PARSE_DESC - CLI value parsing request descriptor
!
! IMPLICIT OUTPUTS:
!
!	The converted numeric value is placed at the location specified
!	by the CLI$L_USRVAL field of the qualifier descriptor.
!
! ROUTINE VALUE:
!
!	None
!
! SIDE EFFECTS:
!
!	None
!
!--

    BEGIN

    BIND
	QUAL_DESC = .QUAL_DESC_ADDR : BLOCK[,BYTE];	! Redefine the input argument.

    CALL_CLI(						! Call the CLI with the following arguments:
		NUMB_PARSE_DESC,			!    Value parse request descriptor address
		CLI_WORK_AREA,				!    CLI work area address
		QUAL_DESC );				!    Qualifier descriptor address

    .QUAL_DESC[CLI$L_USRVAL] =				! Save the converted value.
		.NUMB_PARSE_DESC[CLI$L_RQVALU];		!

    RETURN;						! Return to the caller (CLI).

    END;

ROUTINE PROTECT_PARSE (					! PROTECTION qualifier value parse routine
			QUAL_DESC_ADDR )		! Address of associated qualifier descriptor
			: NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine parses a PROTECTION qualifier value.
!
!	***** Modification, June 15, 1978
!
!		If a protection keyword, such as W for world, does not have an accompanying
!		specified value, then the value defaults to no access.
!	***** C. Peters
!
! FORMAL PARAMETERS:
!
!	QUAL_DESC_ADDR.r.r - Address of the qualifier descriptor containing
!			     the value(s) to be parsed
!
! IMPLICIT INPUTS:
!
!	STR_PARSE_DESC - CLI string parsing descriptor
!
! IMPLICIT OUTPUTS:
!
!	COPY$CLI_STATUS[PROTECT_VAL_BIT] - Protection value indicator set
!	PROTECT_AND - Protection value AND mask
!	PROTECT_OR - Protection value OR mask
!
! ROUTINE VALUE:
!
!	None
!
! SIDE EFFECTS:
!
!	None
!
!--

    BEGIN

    BIND
	QUAL_DESC = .QUAL_DESC_ADDR :  BLOCK[,BYTE];	! Redefine the input argument

    MAP
	PROTECT_AND :  BLOCK[2,BYTE],			! Redefine the protection value
	PROTECT_OR :  BLOCK[2,BYTE];			! AND and OR masks.

    LOCAL
	STATUS,						! Keyword lookup completion code

	QUAL_VALUE_DESC :  VECTOR[2],			! Qualifier value descriptor before parsing

	KEY_DISP,					! Displacement of keyword nibble in XAB$W_PRO
	BIT_DISP,					! Displacement of mask bit within keyword nibble

	CHAR_DESC :  VECTOR[2];				! String descriptor for error message

    MACRO
	PROTECT_MASK(DISP,SIZE) =			! XAB$W_PRO bit and mask definitions macros
		MASK_DEF(XAB$W_PRO,DISP,SIZE) %,
	MASK_DEF(L,B,S,X,DISP,SIZE) =
		0, B+DISP, SIZE, X %;

!
! Check to see if any explicit protection specification was provided.
!

    IF .QUAL_DESC[CLI$W_QDVALSIZ] EQL 0			! If no protection info was provided,
    THEN						!
	BEGIN						!
	COPY$CLI_STATUS[PROTECT_VAL_BIT] = NO;		! indicate there was no protection value
	RETURN;						! and then return to the caller.
	END
    ELSE
	COPY$CLI_STATUS[PROTECT_VAL_BIT] = YES;		! Otherwise, turn the protection value indicator on.

    QUAL_VALUE_DESC[0] = .QUAL_DESC[CLI$W_QDVALSIZ];	! Save the length and address of the
    QUAL_VALUE_DESC[1] = .QUAL_DESC[CLI$A_QDVALADR];	! qualifier value string before parsing.

!
! Get a qualifier keyword string from the CLI.
!

    STR_PARSE_DESC[CLI$V_MOREVALS] = YES;		! Set bit to begin following loop.

    WHILE .STR_PARSE_DESC[CLI$V_MOREVALS] DO		! Repeat the remainder of this routine 
	BEGIN						! for each qualifier keyword/value pair.

	CALL_CLI(					! Call the CLI with the following arguments:
		STR_PARSE_DESC,				!    String parse request descriptor address
		CLI_WORK_AREA,				!    CLI work area address
		QUAL_DESC );				!    Qualifier descriptor address

!
! Verify that a valid keyword was specified and that it is followed by a value.
!

	STATUS = LIB$LOOKUP_KEY(			! Call the keyword lookup routine with the following args:
			STR_PARSE_DESC[CLI$Q_RQDESC],	!    Address of keyword descriptor
			COPY$PROT_KEYS,			!    Address of keyword table
			KEY_DISP );			!    Address of keyword value deposit area

	IF NOT .STATUS					! If a keyword match was not found
	THEN						!
            BEGIN					!
	    PUT_MESSAGE(				! signal the following error information:
			MSG$_SYNTAX,			!    "syntax error" message id
			1,				!    Number of FAO arguments
			QUAL_VALUE_DESC,		!    Address of qualifier value descriptor
			.STATUS,			!    Keyword lookup error number
			1,				!    Number of associated FAO arguments
			STR_PARSE_DESC[CLI$Q_RQDESC] );	!    Address of keyword descriptor
							!
	    RETURN;					! and then return to the caller.
	    END;

!
! Initialize protection bits for this keyword.
!

	PROTECT_AND[PROTECT_MASK(.KEY_DISP,4)] = 0;	! Setup the protection attributes AND mask to
							! zero the nibble corresponding to the keyword.

	PROTECT_OR[PROTECT_MASK(.KEY_DISP,4)] = -1;	! Initialize the protection attributes OR mask to
							! deny all privileges corresponding to the keyword.

!
! If a value follows, then parse the value following a valid keyword.
!

        IF .STR_PARSE_DESC[CLI$V_KEYVALU]		! If a value was specified,
        THEN						!
            BEGIN					!    then parse it.
            CALL_CLI(					! Call the CLI with the following arguments:
                    STR_PARSE_DESC,			!    String parse request descriptor address
                    CLI_WORK_AREA,			!    CLI work area address
                    QUAL_DESC );			!    Qualifier descriptor address

            CHAR_DESC[0] = 1;				! Setup the length of a single character.

            INCR INDEX FROM 0 TO .STR_PARSE_DESC[CLI$W_RQSIZE]-1 DO
                BEGIN					! Process the keyword value a character at a time.

                CHAR_DESC[1] = .STR_PARSE_DESC[CLI$A_RQADDR] + .INDEX;

                STATUS = LIB$LOOKUP_KEY(		! Call the keyword lookup routine with the following args:
                                CHAR_DESC,		!    Address of the character descriptor
                                COPY$PROT_VALUE,	!    Address of the keyword table
                                BIT_DISP );		!    Address of the keyword value deposit area

                IF NOT .STATUS				! If no character match was found,
                THEN					!
                    BEGIN				!
                    PUT_MESSAGE(			! signal the following error information:
                            MSG$_SYNTAX,		!    "syntax error" message id
                            1,				!    Number of FAO arguments
                            QUAL_VALUE_DESC,		!    Address of qualifier value descriptor
                            .STATUS,			!    Keyword lookup error number
                            1,				!    Number of associated FAO arguments
                            STR_PARSE_DESC[CLI$Q_RQDESC] );	!    Address of keyword descriptor
							!
                    RETURN;				! and then return to the caller.
                    END;

                PROTECT_OR[PROTECT_MASK(		! Turn off the mask bit which corresponds to the
			.KEY_DISP+.BIT_DISP,1)] = NO;	! keyword and protection attribute specified.

                END;					! End of single character value loop.

!
! Make sure that the delimiter following the keyword value is correct.
!

            IF .STR_PARSE_DESC[CLI$V_KEYVALU]		! If a "value" delimiter follows this value,
            THEN					!
                BEGIN					!
                PUT_MESSAGE(				! signal the following error information:
                            MSG$_SYNTAX,		!    "syntax error" message id
                            1,				!    Number of FAO arguments
                            QUAL_VALUE_DESC,		!    Address of qualifier value descriptor
                            COPY$MSG_NUMBER(MSG$_BADDELIM),	!    "invalid delimiter" message id
                            1,				!    Number of associated FAO arguments
                            STR_PARSE_DESC[CLI$Q_RQDESC] );	!    Address of keyword value descriptor
							!
                RETURN;					! and then return to the caller.
                END;

            END;					! End of protection value processing.

	END;						! End of keyword processing loop.

!
! Return to the caller.
!

    RETURN;						! Return to the caller.

    END;

END
ELUDOM
