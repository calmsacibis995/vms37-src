	IDENT	0002,DMPID2,<DUMP ODS2 ID AREA>
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;
; PAUL J KOBAR	10-AUG-78
;
; MODIFIED BY:
;
;	0002	ACG0153		Andrew C. Goldstein,	29-Feb-1980  20:18
;		Fix uses of MOVB to register
;
;+
; DMPID2
;
; FORMAT AND PRINT THE INFORMATION FROM THE IDENTIFICATION AREA
;
; INPUT
;	R2 = ARGBLK ADDRESS
;	R5 = HEADER BLOCK BUFFER ADDRESS
;
;-

;
;	DEFINE TEXT FORMATS FOR $EDMSG (IN EDPUT)
;
	.NLIST	BEX
;
; DEFINE ODS2 HEADER OFFSETS
;
	.MCALL	FHDL2$
;
	FHDL2$
;
	PURE.D

;
;	DEFINE IDENTIFICATION AREA LABEL TEXT
;
ID0:	.ASCII /IDENTIFICATION AREA%N/
ID1:	.ASCII /	I.FNAM		%20A%N/
ID2:	.ASCII /	I.RVNO		%M%N/
	.ASCIZ //
ID3:	.ASCII /	I.CRDT		%VA%N/
ID4:	.ASCII /	I.RVDT		%VA%N/
ID5:	.ASCII /	I.EXDT		%VA%N/
ID6:	.ASCII /	I.BKDT		%VA%N/
	.ASCIZ //
ID7:	.ASCII /	I.ULAB		%P %P %P %P %P %P %P %P%N/
	.ASCIZ //
ID8:	.ASCII /			%P %P %P %P %P %P %P %P%N/
	.ASCII /			%P %P %P %P %P %P %P %P%N/
	.ASCIZ //


	.EVEN

;
	PURE.I

DMPID2::
;
;IDENTIFICATION AREA
;	R4=ADDRESS OF ID AREA IN BLOCK BUFFER
;
;FORMAT NEXT RECORD
;	I.FNAM,I.RVNO
;
	MOV	#ID0,R1
	CLR	R4
	BISB	H.IDOF(R5),R4	;ADJUST TO ID AREA
	ASL	R4
	ADD	R5,R4
	MOV	ARGBLK,R2
	MOV	R4,(R2)
	ADD	#I.FNAM,(R2)+
	MOV	I.RVNO(R4),(R2)+
	MOV	ARGBLK,R2
	CALL	EDPUT

;
;FORMAT NEXT RECORD
;	I.CRDT,I.RVDT,I.EXDT,I.BKDT
;

	MOV	ARGBLK,R3	; SET ARGUMENT BLOCK POINTER
	CLR	R2		; NO OPTIONS TO CDTTA
	MOV	R3,R0
	ADD	#16.,R0		; R0 8 WORDS PAST R3
;
	MOV	R0,(R3)		; SET STRING COUNT
	MOV	R0,2(R3)	; AND ADDRESS
	MOV	R4,R1		; GET ADDRESS OF
	ADD	#I.CRDT,R1	; CREATION DATE AND TIME
	CALL	CDTTA		; CONVERT TO ASCII
	COM	(R3)		; NOW FINISH SETTING
	ADD	R0,(R3)		; STRING SIZE
;
	MOV	R0,4(R3)	; SET STRING COUNT
	MOV	R0,6(R3)	; AND ADDRESS
	MOV	R4,R1		; GET ADDRESS OF
	ADD	#I.RVDT,R1	; REVISION DATE AND TIME
	CALL	CDTTA		; CONVERT TO ASCII
	COM	4(R3)		; NOW FINISH SETTING
	ADD	R0,4(R3)	; STRING SIZE
;
	MOV	R0,10(R3)	; SET STRING COUNT
	MOV	R0,12(R3)	; AND ADDRESS
	MOV	R4,R1		; GET ADDRESS OF
	ADD	#I.EXDT,R1	; EXPIRATION DATE AND TIME
	CALL	CDTTA		; CONVERT TO ASCII
	COM	10(R3)		; NOW FINISH SETTING
	ADD	R0,10(R3)	; STRING SIZE
;
	MOV	R0,14(R3)	; SET STRING COUNT
	MOV	R0,16(R3)	; AND ADDRESS
	MOV	R4,R1		; GET ADDRESS OF
	ADD	#I.BKDT,R1	; LAST BACKUP DATE AND TIME
	CALL	CDTTA		; CONVERT TO ASCII
	COM	14(R3)		; NOW FINISH SETTING
	ADD	R0,14(R3)	; STRING SIZE
;
	MOV	#ID3,R1		; SET FORMAT ADDRESS
	MOV	ARGBLK,R2
	CALL	EDPUT
;
;FORMAT NEXT RECORD
;	I.ULAB
;
	MOV	ARGBLK,R2
	MOV	R4,R3
	ADD	#I.ULAB,R3
	MOV	#8.,R1
50$:	MOV	(R3)+,(R2)+
	SOB	R1,50$
	MOV	#ID7,R1
	MOV	ARGBLK,R2
	CALL	EDPUT
;
	MOV	ARGBLK,R2
	MOV	R4,R3
	ADD	#I.ULAB+16.,R3
	MOV	#16.,R1
60$:	MOV	(R3)+,(R2)+
	SOB	R1,60$
	MOV	#ID8,R1
	MOV	ARGBLK,R2
	CALL	EDPUT
;
	MOV	ARGBLK,R2
	MOV	R4,R3
	ADD	#I.ULAB+48.,R3
	MOV	#16.,R1
70$:	MOV	(R3)+,(R2)+
	SOB	R1,70$
	MOV	#ID8,R1
	MOV	ARGBLK,R2
	CALL	EDPUT

	RETURN

	.SBTTL	CDTTA
;
; SUBOUTINE TO CONVERT 64-BIT BINARY DATE/TIME TO ASCII
;
; INPUTS:
;
;	R0 = ADDRESS TO STORE ASCII STRING
;	R1 = ADDRESS OF 64 BIT DATE/TIME
;	R2 = OPTION FLAGS
;
; OUTPUTS:
;
;	R0 = ADDRESS OF BYTE FOLLOWING OUTPUT STRING
;
;
CDTTA:
	TST	(R1)		; IS BINARY VALUE 0?
	BNE	10$		; NO IF NE
	TST	2(R1)
	BNE	10$
	TST	4(R1)
	BNE	10$
	TST	6(R1)
	BNE	10$
	MOVB	#' ,(R0)+	; YES: RETURN WILL NULL STRING
	BR	20$
10$:
	CALL	$CDTTA		; CONVERT BINARY TO ASCII
	INC	R0		; POINT R0 PAST OUTPUT STRING
20$:
	RETURN
;
	.END
