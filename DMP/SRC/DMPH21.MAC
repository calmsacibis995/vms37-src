	IDENT	0002,DMPH21,<DUMP ODS2 HEADER AREA,PART 1>
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;
; PAUL J KOBAR	10-AUG-78
;
; MODIFIED BY:
;
;	0002	ACG0207		Andrew C. Goldstein,	22-May-1981  18:13
;		Fix output record length problems
;
;**
;
;+
; DMPH21
;
; THIS ROUTINE FORMATS AND PRINTS OUT RECORDS CONTAINING
; HEADER AREA INFORMATION.
;
; INPUT
;	R2  = ARGBLK ADDRESS
;	R5 = HEADER BLOCK BUFFER ADDRESS
;
; OUTPUT
;	RECORDS TO OUTPUT FILE
;
;
	.NLIST	BEX
;
; DEFINE ODS2 HEADER OFFSETS
;
	.MCALL	FHDL2$
;
	FHDL2$
;
	PURE.D
;
;	DEFINE HEADER AREA LABEL TEXT
;
HDR0:	.ASCII /HEADER AREA%N/
HDR1:	.ASCII /	H.IDOF  	%B%N/
HDR2:	.ASCII /	H.MPOF		%B%N/
HDR21:	.ASCII /	H.ACOF		%B%N/
HDR22:	.ASCII /	H.RSOF		%B%N/
HDR23:	.ASCII /	H.FSEG		%O%N/
	.ASCIZ //
HDR31:	.ASCII /	H.FNUM,%N/
HDR32:	.ASCII /	H.FSEQ,%N/
HDR33:	.ASCII /	H.FRVN		(%O,%O,%O)%N/
HDR34:	.ASCII /	H.EFNU,%N/
HDR35:	.ASCII /	H.EFSQ,%N/
HDR36:	.ASCII /	H.ERVN		(%O,%O,%O)%N/
HDR4:	.ASCII /	H.FLEV		%O%N/
HDR5:	.ASCII /	H.FOWN		[%B,%B]%N/
	.ASCIZ //
HDR6:	.ASCII /	H.FPRO		[%VA]%N/
HDR61:	.ASCII /	H.RPRO		[%VA]%N/
	.ASCIZ //
HDR7:	.ASCII /	H.PRIV		%B%N/
HDR71:	.ASCII /	H.UCHA		%B = %VA%N/
HDR72:	.ASCII /	H.SCHA		%B = %VA%N/
	.ASCIZ //
HDR8:	.ASCII	/	H.BFNU,%N/
HDR81:	.ASCII	/	H.BFSQ,%N/
HDR82:	.ASCII	/	H.BRVN		(%O,%O,%O)%N/
HDR83:	.ASCII	/	H.SEMK		%P%N/
	.ASCIZ	//

;
;	BIT DEFINTIONS
;
	.EVEN
UCBITS:	BITS	UC.,<CON,DLK,CNB,WCK,RCK,WBK,NBK>
;
	.EVEN
SCBITS:	BITS	SC.,<MDL,BAD,DIR,SPL>
;
	PURE.I
;
;HEADER AREA
;
DMPH21::
;
;FORMAT A RECORD
;	H.IDOF,H.MPOF,H.ACOF,H.RSOF,H.FSEG,H.FNUM,H.FSEQ
;		H.EFNU,H.EFSQ,H.ERVN,H.LEV,H.OWN
;
	MOV	#HDR0,R1	;SET FORMAT SOURCE
	MOV	ARGBLK,R2	;
	MOV	R5,(R2)		;MOVE H.IDOF
	ADD	#H.IDOF,(R2)+
	MOV	R5,(R2)
	ADD	#H.MPOF,(R2)+
	MOV	R5,(R2)		;MOVE H.ACOF
	ADD	#H.ACOF,(R2)+
	MOV	R5,(R2)		;MOVE H.RSOF
	ADD	#H.RSOF,(R2)+
	MOV	H.FSEG(R5),(R2)+	;EXTENSION SEGMENT NUMBER
	MOV	ARGBLK,R2
	CALL 	EDPUT

	MOV	#HDR31,R1	;SET FORMAT SOURCE
	MOV	H.FNUM(R5),(R2)+	;FILE NUMBER
	MOV	H.FSEQ(R5),(R2)+	;FILE SEQUENCE
	MOV	H.FRVN(R5),(R2)+	;RELATIVE VOLUME NUMBER
	MOV	H.EFNU(R5),(R2)+	;EXTENSION FILE NUMBER
	MOV	H.EFSQ(R5),(R2)+	;EXTENSION FILE SEQUENCE NUMBER
	MOV	H.ERVN(R5),(R2)+	;EXTENSION RELATIVE VOLUME NUMBER
	MOV	H.FLEV(R5),(R2)+		;LEVEL
	MOV	R5,(R2)		;GROUP NUM
	ADD	#H.PROJ,(R2)+
	MOV	R5,(R2)		;MEMBER NUM
	ADD	#H.PROG,(R2)+
	MOV	ARGBLK,R2
	CALL 	EDPUT
;
;FORMAT NEXT RECORD
;	H.FPRO,H.RPRO
;
;
	MOV	R2,R0
	ADD	#8.,R0		;R0 IS 4 WORDS PAST R2
	MOV	R0,(R2)		;TO BE STRING COUNT
	MOV	R0,2(R2)	;STRING ADDR
	MOV	H.FPRO(R5),R4	;PROTECTION WORD
	CALL	FILPRO
	COM	(R2)
	ADD	R0,(R2)		;BYTE COUNT IN ARGBLK
	MOV	R0,4(R2)	;TO BE STRING COUNT
	MOV	R0,6(R2)	;STRING ADDR
	MOV	H.RPRO(R5),R4	;RECORD PROTECTION WORD
	CALL	FILPRO
	COM	4(R2)
	ADD	R0,4(R2)	;BYTE COUNT IN ARGBLK
	MOV	#HDR6,R1	;FORMAT ADDRESS
	CALL	EDPUT
;
; FORMAT NEXT RECORD
;	H.PRIV,H.UCHA,H.SCHA
;
	MOV	R2,R0
	ADD	#16.,R0		;R0 IS 8 WORDS PAST R0
	MOV	R5,(R2)		;ACCESSOR PRIVILEGE LEVEL
	ADD	#H.PRIV,(R2)
UC0:	MOV	R5,2(R2)	;USER CHAR'TCS
	ADD	#H.UCHA,2(R2)	;H.UCHA BYTE ADDR IN ARGBLK
	MOV	R0,6(R2)	;SET STRING ADDRESS
	MOV	#UCBITS,R1	;ADDRESS OF BIT DESCRIPTOR TABLE
	CLR	R3		;GET FLAG BYTE
	BISB	H.UCHA(R5),R3	;INTO WORD
	CALL	BITDES		;FORM BIT DESCRIPTION STRING
	MOV	R1,4(R2)	;SET STRING LENGTH

SC0:	MOV	R5,10(R2)	;SYSTEM	CHAR'TCS
	ADD	#H.SCHA,10(R2)	;H.SCHA BYTE ADDR IN ARGBLK
	MOV	R0,14(R2)	;SET STRING ADDRESS
	MOV	#SCBITS,R1	;ADDRESS OF BIT DESCRIPTOR TABLE
	CLR	R3		;GET FLAG BYTE
	BISB	H.SCHA(R5),R3	;INTO WORD
	CALL	BITDES		;FORM BIT DESCRIPTION STRING
	MOV	R1,12(R2)	;SET STRING LENGTH
SCEND:
	MOV	#HDR7,R1	;SET FORMAT ADDRESS
	CALL	EDPUT
;
; FORMAT NEXT RECORD
;	H.BFNU,H.BFSQ,H.BRVN,H.SEMK
;
	MOV	#HDR8,R1	;SET FORMAT ADDRESS
	MOV	ARGBLK,R2	;AND ARGUMENT BLOCK POINTER
	MOV	R2,R0		;SET WORK POINTER
	MOV	H.BFNU(R5),(R0)+	;BACK LINK POINTER - FILE NUMBER
	MOV	H.BFSQ(R5),(R0)+	;BACK LINK SEQUENCE NUMBER
	MOV	H.BRVN(R5),(R0)+	;BACK LINK RVN
	MOV	H.SEMK(R5),(R0)+	;SECURITY MASK
	CALL	EDPUT
	RETURN

	.SBTTL	FILPRO
;
; SUBROUTINE TO DESCRIBE PROTECTION WORD
;
; INPUTS:
;
;	R0 = ADDRESS TO PUT OUTPUT STRING
;	R4 = PROTECTION WORD
;
; OUTPUTS:
;
;	R0 = ADDRESS OF BYTE FOLLOWING OUTPUT STRING
;	R3 = ZEROED
;
;
FILPRO:
	MOV	#4,R3		;SET LOOP COUNT
10$:	BIT	#FP.RDV,R4	;READ?
	BNE	20$
	MOVB	#'R,(R0)+
20$:	BIT	#FP.WRV,R4	;WRITE?
	BNE	30$
	MOVB	#'W,(R0)+
30$:	BIT	#FP.EXT,R4	;EXTEND?
	BNE	40$
	MOVB	#'E,(R0)+
40$:	BIT	#FP.DEL,R4	;DELETE?
	BNE	50$
	MOVB	#'D,(R0)+
50$:	MOVB	#',,(R0)+	;SEPARATOR
	.REPT	4
	ASR	R4		;SHIFT RIGHT 4
	.ENDR
	SOB	R3,10$
	RETURN
	.END
