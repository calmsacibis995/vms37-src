	IDTITL	0007,DMP,<FILE DUMP UTILITY>
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
; PETER H. LIPMAN 30-MARCH-73

;
; MODIFIED BY:
;
;	0007	ACG0153		Andrew C. Goldstein,	29-Feb-1980  21:17
;		Fix header dump for multi-header files
;
;	ALTERED 23-JUL-74 R. HEINEN
;	ALTERED 10-MAR-76 H.B. BOSWELL  ADD RAD50 MODE DUMP  HBB1
; ALTERED 4/1/76 R.HEINEN ADD HEX  DUMP SWITCH /HX/LW/WD
; ALTERED 4/10/76 R. HEINEN ADD RECODE DMP MODE /RC
;
;	C.A.DELIA	26-APR-77
;
;		CD037 -- FIX BUG IN GPRT$S CALL
;
;	G.RITTENBURG 	25-7-77
;
;		GR01 -- DENSITY SWITCH ADDED
;
;	G.RITTENBURG	16-SEPT-77
;
;		GR02 -- EXIT WITH STATUS ADDED
;
;	G.RITTENBURG	23-SEP-77
;
;		GR03 -- DETACH DEVICE ATTACHED IN DMPSTP
;
;	P. WHITE	27-SEP-77
;
;		PW040 -- CONDITIONALISE FOR -M,-D AND IAS
;
;	J. MATTHEWS	1-JUN-78
;
;		JM012 -- CONDITIONALIZED FOR NO SPOOLING DEFAULT FOR IAS.
;
; GR004---G.RITTENBURG 22-JUN-1978
; REWIND SWITCH ADDED
;
;
; PAUL KOBAR	10-AUG-78
;	PJK001 -- ADDED CODE TO PROCESS /HD VALUES AND /HF SWITCH
;
; **GR05---G.RITTENBURG 2-NOV-1978
; CORRECTION FOR PIPUTL.  $DFNAM DEFINED
;
	.MCALL	GTSK$S,GPRT$S

	.SBTTL	READ/WRITE STORAGE
;
	IMPURE
;
DMPCTL::	.BLKW	1
DMPCT2::	.BLKW	1
RECNUM::	.BLKW	2		; RECORD NUMBER
BASBLK::	.WORD	0,0	; DOUBLE WORD BLOCK NUMBER FOR READ AND QIO
BLKNUM::	.WORD	0,0	; DOUBLE WORD BLOCK NUMBER FOR ARITH
FBLOCK::	.BLKW	1		;STARTING BLOCK NUMBER TO DUMP
LBLOCK::	.BLKW	1		;LAST BLOCK NUMBER TO DUMP
BYTNUM::	.BLKW	1		;CURRENT LINE NUMBER
DENSTY::	.BLKW	1	;SPECIFIED DENSITY
HDRTYP::	.ASCII	/F /		;HEADER TPYE(DEFAULT=F)
;
STBLK::	.BLKB	S.STBK		;STATISTICS BLOCK
IOSTBK::	.BLKW	2		;I/O STATUS BLOCK FOR INPUT FILE
.WORDS::	.BLKW	1		; NUMBER OF WORDS IN INPUT BUFFER
.BYTES::	.BLKW	1		; NUMBER OF BYTES IN INPUT BUFFER
.EXSTS::	.WORD	-1	; MAX. ERROR STATUS SO FAR
; -1=NO ERRORS: 0=WARNING:2=FATAL:4=SEVERE ERRORS FOUND
;
;
OUTREC::	.BLKB	132.
	OURCSZ==.-OUTREC
;
HEADER::	.BYTE	FF,CR,LF,CR,LF
HEAD1::	.BLKB	MAXHED
	.EVEN
HEADSZ::	.BLKW	1
SAVSP::	.BLKW	1
;
;
	FSRSZ$	2,,IMPURE

FDBOUT::	FDBDF$
	FDAT$A	R.VAR
	FDRC$A	FD.PLC,OUTREC,OURCSZ
	FDOP$A	OUTLUN,OFNPT,OUDFLT
FDBIN::	FDBDF$
	FDOP$A	INLUN,IFNPT,INDFLT

GCMLCB::GCMLB$	3,DMP
CSIBLK::.BLKB	C.SIZE
;
IFNPT::	.BLKB	S.FIDS+S.APPD
	INSPEC==IFNPT+N.SPEC
OFNPT::	.BLKB	S.FIDS+S.APPD
	OUSPEC==OFNPT+N.SPEC
;
; EXTRA DPB PARAMETERS FOR CALLING .XQIO
RATTBK::	.WORD	FDBIN+F.FNB+N.FID,ATTCTL,0,0,0,0;FOR READING ATTRIBUTES
RATTEX::	.WORD	EXFID,RHDCTL,0,0,0,0	;FOR MULTIPLE HEADERS
RHDR::		.WORD	FDBIN+F.FNB+N.FID,RHDCTL,0,0,0,0;FOR READING HEADR
READLB::	.WORD	INBUF,512.,0,0,0,0 ;FOR READ LOGICAL BLOCK
	BYTCNT==READLB+2
	LBN==READLB+6.
;
MOPRM::	.BLKW	64.
EXFID::	.BLKW	3	;FOR EXTENSION FID
ATTCTL:	.BYTE	-9.,10.
	.WORD	STBLK
	.BYTE	-5,10.
	.WORD	INBUF+AB.NAM
	.BYTE	-4,32.
	.WORD	INBUF+AB.UAT
	.BYTE	-1,5
	.WORD	INBUF+AB.PC
	.BYTE	-13.,35.
	.WORD	INBUF+AB.REV
	.WORD	0
RHDCTL:	.BYTE	-10.,0
	.WORD	INBUF
	.WORD	0
CONTIG::	.ASCII	/  C/
	.EVEN
$DFNAM::	.RAD50	/DMP/

	.SBTTL	READ ONLY TABLES
;
	PURE.D
;
CSISWT::CSI$SW	BL,BLBIT,DMPCTL,SET,,BLKVAL
	CSI$SW	HD,HDBIT,DMPCTL,SET,,HDRVAL
	CSI$SW	ID,IDBIT,DMPCTL,SET,,0
	CSI$SW	MD,MDBIT,DMPCTL,SET,,MEMVAL
	CSI$SW	FI,FIDBIT,DMPCTL,SET,,FIDVAL
	CSI$SW	AS,ASCBIT!BYTBIT,DMPCTL,SET,,0
	CSI$SW	BY,BYTBIT,DMPCTL,SET,,0
	CSI$SW	BA,BABIT,DMPCTL,SET,,BASVAL
	CSI$SW	LB,LBBIT,DMPCTL,SET,,0
	CSI$SW	R5,R50BIT,DMPCTL,SET,,0		;***HBB1
	CSI$SW	HX,HEXBIT,DMPCTL,SET,,0		;****RJH
	CSI$SW	LW,LNGBIT!HEXBIT,DMPCTL,SET,,0	;***RJH
	CSI$SW	WD,WRDBIT!HEXBIT,DMPCTL,SET,,0	;***RJH
	CSI$SW	DC,DECBIT,DMPCTL,SET,,0		;***RJH
	CSI$SW	RC,RECBIT,DMPCTL,SET,,0		;***RJH
	CSI$SW	SP,SPLBIT,DMPCT2,CLEAR,NEG,0	;***RJH
	CSI$SW	DENS,PEBIT,DMPCT2,SET,,DENVAL,EXACT
	CSI$SW	RW,RWBIT,DMPCT2,SET,NEG,0
	CSI$SW	HF,HFBIT,DMPCT2,SET,,0
;
	CSI$ND
BLKVAL::	CSI$SV	NUMERIC,FBLOCK,2
	CSI$SV	NUMERIC,LBLOCK,2
	CSI$ND
HDRVAL::CSI$SV	ASCII,HDRTYP,1
	CSI$ND
MEMVAL::	CSI$SV	NUMERIC,BYTNUM,2
	CSI$ND
;
FIDVAL::	CSI$SV	NUMERIC,FILID,2 ;FILE ID VALUE BLOCK
	CSI$SV	NUMERIC,FILID+2,2
	CSI$SV	NUMERIC,FILID+4,2
	CSI$ND
;
BASVAL::	CSI$SV	NUMERIC,BASBLK,2 ; BASE BLOCK NUMBER
	CSI$SV	NUMERIC,BASBLK+2,2
	CSI$ND
;
DENVAL::	CSI$SV	DECIMAL,DENSTY,2	;DENSITY VALUE
	CSI$ND
;
ST08::	.WORD	4		;800 BPI
ST16::	.WORD	4004		;1600BPI

INDFLT::	NMBLK$	,,,SY,0
OUDFLT::	NMBLK$	FILDMP,DMP,,SY,0
.ABORT::.WORD	RSTART
;
SVTTAB::.WORD	0,0,0,0,0,0
	.WORD	.ERTRP
	.WORD	0

	.SBTTL	PROGRAM INITIALIZATION AND COMMAND RECEIVER
;
	PURE.I
;
START:	MOV	SP,SAVSP	
	CALL	$MESSAG		; LOAD MESSAGE OVERLAY
	MOV	#INBUF,R0	; ADDRESS INBUF
;
	.IF NDF	I$$AS
;
	.IFT
;
	GPRT$S	,R0		;GET PARTITION PARAMETERS
	MOV	$DSW,R2		; GET VIRTUAL ADDRESS OF TASK
;
	.IFTF
;
	GTSK$S	R0		; FIND TASK SIZE
	MOV	G.TSTS(R0),R1	; GET NUMBER OF BYTES IN TASK
;
	.IFT
;
	ADD	R2,R1		; ADD VIRTUAL ADDRESS TO SIZE
;
	.ENDC
;
	SUB	R0,R1		; COMPUTE BYTES IN INBUF
	CLC			; RESET C-BIT
	MOV	R1,.BYTES	; SAVE NUMBER OF BYTES IN INBUF
	ROR	R1		; CONVERT TO WORDS
	MOV	R1,.WORDS	; AND SAVE AWAY AS WORDS
	SVTK$S	#SVTTAB,#10	; SET SST VECTOR FOR ERRTRP
	FINIT$			;INITIALIZE FCS
	BCC	AGAIN
	ERROUT	ER01		;NOT ENOUGH STACK SPACE
	MOV	#4,.EXSTS	;SEVERE ERROR
	JMP	EXIT

RSTART::	CLOSE$	#FDBIN
	MOV	#FDBOUT,R0		; ADDRESS OUTPUT FDB
	PUT$	,#EOF1MG+15.,#2		; OUTPUT TERMINATING CR-LF
	BIT	#SPLBIT,DMPCT2		; SPOOL OUTPUT FILE?
	BNE	10$			; IF NE THEN NO
	CALL	.PRINT			; SPOOL OUTPUT FILE
	BR	AGAIN			; AND CONTINUE
10$:	CLOSE$	R0			; CLOSE OUTPUT FILE
	MOV	#IO.DET,R1	;SET QIO FUNCTION
	CLR	R2		;NO EXTRA PARAMETERS
	CALL	.XQIO		;DETACH DEVICE
AGAIN::	MOV	SAVSP,SP
	CLR	DMPCTL		;INIT DEFAULT DUMP PARAMETERS
	.IF DF I$$AS
	MOV	#SPLBIT,DMPCT2		; CLEAR DENSITY BIT BUT LEAVE NO
					; SPOOLING DEFAULT.
	.IFF
	CLR	DMPCT2		;RESET SPOOL AND DENSITY SWITCHES
	.ENDC
	MOV	#1,FBLOCK	;DUMP FROM VIRTUAL BLOCK 1
	MOV	#-1,LBLOCK	;ALL BLOCKS OF FILE
	MOV	BASBLK,BLKNUM	; SET UP BASE BLOCK NUMBERS
	MOV	BASBLK+2,BLKNUM+2
	CLR	BYTNUM
	CALL	GETCML		;GET NEXT COMMAND LINE
	BCS	EXIT
	JMP	CHECK
;
;
RODUMP::JMP	DUMP		; VECTOR TO DUMP
;
ROHEAD::CALL	DMPBLK		; DUMP THE FILE HEADER
	MOV	(SP)+,DMPCTL
	MOV	(SP)+,BYTNUM
RTEST::	TST	FBLOCK		;IF BLOCK 0 SPECIFIED
	BEQ	RSTART
RNXTB:: JMP	NXTBLK
RDMPHD::CALL	DMPHDR
	JMP	RTEST
RDMPH2::CALL	DMPHR2		;DUMP FILE-11 ODS2 HEADER
	JMP	RTEST

; EDIT AND PUT STRING TO OUTPUT FILE
; INPUTS:
;	R1=FORMAT STRING
;	R2=PARAMETER BLOCK ADDRESS
; OUTPUTS:
;	C=0 IF SUCCESSFUL, C=1 IF ERROR FROM PUT
;	R0,R1 ALTERED
;	R2-R5 PRESERVED
EDPUT::	MOV	FDBOUT+F.NRBD+2,R0
	MOV	R2,-(SP)
	CALL	$EDMSG
	PUT$	#FDBOUT,,R1,WRTERR
	MOV	(SP)+,R2
	RETURN
;
;
;
;	EXIT FROM DUMP
EXIT::	MOV	.EXSTS,R0	;R0 IS ERROR STATUS
	BPL	X1	;BRANCH IF POS.
	MOV	#EX$SUC,R0  ; SET SUCCESS
X1:	JMP	$EXST  ; EXIT
;
	.END	START

