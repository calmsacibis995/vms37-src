	.TITLE	$DIVQ - QUAD DIVIDE ROUTINE

	.IDENT	/V03000/
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
; ANDREW C. GOLDSTEIN  17-NOV-76  10:47


;+
;
; *** - $DIVQ	QUAD DIVIDE ROUTINE
;
; THIS ROUTINE DOES A 64 BIT UNSIGNED DIVIDE OPERATION. DIVIDE
; BY ZERO IS NOT CHECKED. ALL NUMBERS ARE STORED WITH INCREASING
; SIGNIFICANCE IN INCREASING ADDRESSED BYTES.
;
; INPUTS:
;
;	R0 = ADDRESS OF DIVISOR
;	R1 = ADDRESS OF DIVIDEND
;	R2 = ADDRESS OF QUOTIENT
;	R3 = ADDRESS OF REMAINDER
;
; OUTPUTS:
;
;	QUOTIENT AND REMAINDER RETURNED IN SPECIFIED ADDRESSES
;
;-

$DIVQ::
	CALL	$SAVAL
	MOV	#65.,-(SP)	; SET UP LOOP COUNT
	MOV	R2,R5		; POINT TO QUOTIENT AREA
	MOV	(R1)+,(R5)+	; COPY DIVIDEND INTO QUOTIENT AREA
	MOV	(R1)+,(R5)+
	MOV	(R1)+,(R5)+
	MOV	(R1)+,(R5)+
	MOV	R3,R4		; COPY REMAINDER POINTER
	CLR	(R4)+		; CLEAR OUT REMAINDER AREA
	CLR	(R4)+
	CLR	(R4)+
	CLR	(R4)+		; R4 POINTS TO END OF REMAINDER

10$:	MOV	R3,R4
	ROL	(R4)+		; SHIFT IN NEXT BIT OF DIVIDEND
	ROL	(R4)+
	ROL	(R4)+
	ROL	(R4)+
	MOV	R0,R1
	ADD	#8.,R1		; POINT TO HIGH ORDER OF DIVISOR
	MOV	R4,R5		; AND OF REMAINDER AREA
	CMP	-(R1),-(R5)	; SEE IF DIVISOR IS GREATER THAN
	BNE	20$		; CURRENT REMAINDER VALUE
	CMP	-(R1),-(R5)
	BNE	20$
	CMP	-(R1),-(R5)
	BNE	20$
	CMP	-(R1),-(R5)
20$:	BHI	30$		; BRANCH IF YES - NO SUBTRACT - C IS CLEAR
	MOV	R0,R1		; POINT TO START OF DIVISOR
	MOV	R3,R4		; AND START OF REMAINDER
	SUB	(R1)+,(R4)+	; SUBTRACT DIVISOR FROM REMAINDER
	SBC	(R4)+
	SBC	(R4)+
	SBC	(R4)
	CMP	-(R4),-(R4)
	SUB	(R1)+,(R4)+
	SBC	(R4)
	SBC	2(R4)
	SUB	(R1)+,(R4)+
	SBC	(R4)
	SUB	(R1)+,(R4)+
	SEC			; SET BIT TO SHIFT INTO QUOTIENT

30$:	MOV	R2,R5		; POINT TO QUOTIENT
	ROL	(R5)+		; SHIFT NEW BIT IN FROM RIGHT
	ROL	(R5)+
	ROL	(R5)+
	ROL	(R5)+		; C = NEXT BIT OF DIVIDEND
	DEC	(SP)		; COUNT ITERATIONS
	BNE	10$		; AND LOOP

	TST	(SP)+		; CLEAN THE STACK
	RETURN



	.END
