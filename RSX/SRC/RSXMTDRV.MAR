	.TITLE	RSXMTDRV - VAX/VMS RSX11M AME MAGTAPE DRIVER
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************

;++
; FACILITY:
;
;	VAX/VMS RSX11M AME
;
; ABSTRACT:
;
;	MAGTAPE DRIVER
;
; AUTHOR: R.HEINEN 4-NOV-76
;
; MODIFIED BY:
;
; 101	T. Halvorsen	12-Apr-1979
;	Fix INHRETRY code in magtape RVB processing.
;--
;
; EXTERNAL SYMBOLS
;
	$RSXDEF			; DEFINE RSX SYMBOLS
	DRERR$			; DEFINE RSX11M DIRECTIVE STATUS CODES
	SPCIO$			; DEFINE RSX11M SPECIAL I/O CODES
	FILIO$			; DEFINE RSX11M FILE I/O CODES
	$MTDEF			; DEFINE MAGTAPE CHARACTERISTICS
;
; LOCAL SYMBOLS
;
I_CHARACTER	=I_SCRATCH+<4*12>+4

	.SBTTL	RSX$MT_DRV - RSX11M AME MAGTAPE DRIVER
;++
	.PSECT	RSXCODE,NOWRT,SHR,PIC
; RSX$MT_DRV - RSX11M AME MAGTAPE DRIVER
;
; FUNCTIONAL DESCRIPTION:
;
; THIS ROUTINE PROCESSES I/O DIRECTED TO MAGTAPES.
;
; INPUTS:
;
;	R2 = ADDRESS OF THE QIO CONTEXT
;	R3 = MAJOR FUNCTION CODE
;	R5 = ADDRESS OF THE DPB AREA
;	R6 = ADDRESS OF THE IMAGE STACK
;	R7 = ENTIRE FUNCTION CODE
;	R8 = ADDRESS OF THE LUT
;	R10 = ADDRESS OF THE IMAGE IMPURE AREA
;	R11 = ADDRESS OF THE IMAGE
;
; OUTPUTS:
;
;	R2,R6,R8,R10,R11 ARE PRESERVED.
;--
RSX$MT_DRV::				; MAGTAPE DRIVER
	CASE	R3,<-			;
		RSX$IOKILL,-		; I/O KILL
		MT_WLB,-		; WRITE LOGICAL BLOCK
		MT_RLB,-		; READ LOGICAL BLOCK
		RSX$DLVRQIOAST,-	; ATTACH DEVICE
		RSX$DLVRQIOAST,-	; DETACH DEVICE
		MT_SET,-		; FUNCTION CODE 5
		MT_EOF,-		; FUNCTION CODE 6
		RSX$IEIFC,-		; ILLEGAL
		RSX$IEIFC,-		; ILLEGAL
		RSX$FILEIO,-		; FUNCTION CODE 9
		RSX$IEIFC,-		; ILLEGAL
		RSX$FILEIO,-		; ACP FUNCTIONS
		RSX$FILEIO,-		; ACP FUNCTIONS
		RSX$FILEIO,-		; ACP FUNCTIONS
		RSX$FILEIO,-		; ACP FUNCTIONS
		RSX$FILEIO,-		; ACP FUNCTIONS
		RSX$FILEIO,-		; ACP FUNCTIONS
		MT_RVB,-		; READ VIRTUAL BLOCK
		MT_WVB,-		; WRITE VIRTUAL BLOCK
		RSX$FILEIO,-		; ACP FUNCTIONS
		RSX$FILEIO,-		; ACP FUNCTIONS
		RSX$FILEIO,-		; ACP FUNCTIONS
		RSX$FILEIO,-		; ACP FUNCTIONS
		RSX$FILEIO,-		; ACP FUNCTIONS
		RSX$FILEIO,-		; ACP FUNCTIONS
		>
	BRW	RSX$IEIFC		; ERROR EXIT

	.SBTTL	MT_RVB AND MT_RLB FUNCTIONS
	.ENABL	LSB
;
; READ VIRTUAL BLOCK
;
MT_RVB:					; READ VIRTUAL BLOCK
	MOVZWL	#IO$_READVBLK,I_SCRATCH+12(R10); SET UP FUNCTION CODE
	BRB	30$			; CONTINUE IN COMMON
;
; READ LOGICAL BLOCK
;
MT_RLB:					; READ VIRTUAL BLOCK
	MOVZWL	#IO$_READLBLK,I_SCRATCH+12(R10); SET UP FUNCTION CODE
	CMPB	R7,#<IO.RLV&^X0FF>	; READ LOGICAL REVERSE?
	BNEQ	10$			; IF NEQ THEN NO
	MOVZWL	#IO$_READLBLK!IO$M_REVERSE,I_SCRATCH+12(R10); SET UP REVERSE READ
; NOTE - IQ.X IS UNDOCUMENTED BUT USED IN A FEW RSX UTILITIES (PIP?)
10$:	BITW	#IQ.X,R7		; INHIBIT ERROR RETRY?
	BEQL	30$			; IF EQL THEN NO
	BISW	#IO$M_INHRETRY,I_SCRATCH+12(R10) ; INHIBIT RETRY
30$:	BRW	RSX$ISSUQIO		; PERFORM FUNCTION
	.DSABL	LSB

	.SBTTL	MT_WVB AND MT_WLB FUNCTIONS
;
; WRITE VIRTUAL BLOCK
;
MT_WVB:					; WRITE VIRTUAL BLOCK
	MOVZWL	#IO$_WRITEVBLK,I_SCRATCH+12(R10); SET FUNCTION CODE
	BRW	RSX$ISSUQIO		; PERFORM FUNCTION
;
; WRITE LOGICAL BLOCK
;
MT_WLB:					; WRITE LOGICAL BLOCK
	MOVZWL	#IO$_WRITELBLK,I_SCRATCH+12(R10); SET FUNCTION CODE
; NOTE - IQ.X IS UNDOCUMENTED BUT USED IN A FEW RSX UTILITIES (PIP?)
	BITW	#IQ.X,R7		; INHIBIT ERROR RETRY?
	BEQL	10$			; IF EQL THEN NO
	BISW	#IO$M_INHRETRY,I_SCRATCH+12(R10); SET TO INHIBIT
10$:	BRW	RSX$ISSUQIO		;

	.SBTTL MT_SET FUNCTIONS
 
	.ENABL	LSB
;
; MAGTAPE SET FUNCTIONS
;
MT_SET:					; SET MODE FUNCTIONS
	EXTZV	#4,#3,R7,R0		; GET SUBFUNCTION BITS
	CASE	R0,TYPE=B,<-		;
		MT_REWIND,-		; REWIND
		MT_SPACEB,-		; SPACE BLOCK
		MT_SPACEF,-		; SPACE FILE
		PACK_ACK,-		; SPECIAL VAX/VMS FUNCTION
		MT_SETCHAR,-		; SET CHARACTERISTICS
		MT_SENSE,-		; SENSE CHARACTERISTICS
		MT_REWINDU,-		; REWIND AND UNLOAD
		MT_SETCHAR,-		; SET CHARACTERISTICS
		>
	BRW	RSX$IEIFC		; ILLEGAL FUNCTION
;
; DO A PACK ACK ON A TAPE
;
PACK_ACK:				;
	MOVZWL	#IO$_PACKACK,R0		;
	BRB	100$			;
;
; SPACE BLOCKS
;
MT_SPACEB:	MOVZWL	#IO$_SKIPRECORD,R0; 
	BRB	100$			;
;
; SPACE FILE
;
MT_SPACEF:	MOVZWL	#IO$_SKIPFILE,R0;
	BRB	100$			;
;
; REWIND AND UNLOAD
;
MT_REWINDU:	MOVZWL	#IO$_REWINDOFF,R0; SET FUNCTION
	BRB	100$
;
; REWIND
;
MT_REWIND:	MOVZWL	#IO$_REWIND,R0	;
100$:					;
	MOVL	R0,I_SCRATCH+12(R10)	; SET FUNCTION CODE
	BRW	RSX$ISSUQIO		; DO THE OPERATION
	.DSABL	LSB
;
; SET MT CHARACTERISTICS
;
MT_SETCHAR:				; SET CHARACTERISTICS
	MOVAB	I_SCRATCH+I_CHARACTER+8(R10),I_SCRATCH+I_CHARACTER+4(R10);
	MOVZBL	#12,I_SCRATCH+I_CHARACTER(R10)	;
	$GETCHN_S	LUT_CHAN(R8),,I_SCRATCH+I_CHARACTER(R10)
	BICB	#MT$M_PARITY,I_SCRATCH+I_CHARACTER+8+8(R10); ASSUME NO PARITY
	BBC	#3,(R5),10$		; PARITY?
	BISB	#MT$M_PARITY,I_SCRATCH+I_CHARACTER+8+8(R10)
10$:	CLRL	R0
	BBC	#11,(R5),20$		; DENSITY
	MOVZBL	#MT$K_PE_1600,R0	; SET 160 BPI
20$:	INSV	R0,#MT$V_DENSITY,#MT$S_DENSITY,I_SCRATCH+I_CHARACTER+8+8(R10)
	MOVZWL	#IO$_SETMODE,I_SCRATCH+12(R10); SET FUNCTION
	MOVAB	I_SCRATCH+I_CHARACTER+8+4(R10),I_SCRATCH+28(R10);
	MOVZBL	#8,I_SCRATCH+32(R10)	;
	CLRQ	I_SCRATCH+36(R10)	;
	BRW	RSX$ISSUQIO		; PERFORM THE FUNCTION
;
; MT SENSE CHARACTERISTICS
;
MT_SENSE:				; SENSE MT STATUS
	$QIOW_S	#15,LUT_CHAN(R8),#IO$_SENSEMODE,I_SCRATCH+I_CHARACTER+4(R10)
	BLBC	R0,50$			; BR IF FAILURE
	MOVQ	I_SCRATCH+I_CHARACTER+4(R10),R0; GET IOSB
	CMPW	#SS$_ENDOFTAPE,R0	; END OF TAPE SPECIAL CASE?
	BNEQ	5$			; IF NEQ THEN NO
	MOVL	#1,R0			; SET SUCCESS
5$:	BLBC	R0,50$			; IF LOW CLEAR THEN FAILURE
	MOVZWL	R0,R0			; CLEAR UPPER ACCUM AND SAVE STATUS
	BBC	#MT$V_BOT,R1,10$	; BOT?
	BBSS	#13+16,R0,10$		; IF YES THEN SET
10$:	BBC	#MT$V_EOF,R1,30$	; EOF?
	BBSS	#5+16,R0,30$		; IF YES THEN SET
30$:	BBC	#MT$V_EOT,R1,40$	; EOT?
	BBSS	#4+16,R0,40$		; IF YES THEN SET
40$:	BBC	#MT$V_HWL,R1,50$	; HWL?
	BBSS	#10+16,R0,50$		; IF YES THEN SET
50$:	CMPZV	#MT$V_DENSITY,#MT$S_DENSITY,R1,#MT$K_PE_1600
	BNEQ	55$			; IF NEQ THEN NOT 1600 BPI
	BBSS	#11+16,R0,55$		; SET 1600 BPI
55$:	CLRL	R1
	BLBS	R0,60$			; IF LOW SET THEN SUCCESS
	BBSS	#8+16,R0,60$		; SET SELECT ERROR
60$:	MOVW	#1,R0			;
	BRW	RSX$DLVRQIOAST		; POST THE STATUS

	.SBTTL MT_EOF FUNCTION
;
; WRITE EOF
;
MT_EOF:	MOVZWL	#IO$_WRITEOF,I_SCRATCH+12(R10); SET UP FUNCTION
	BRW	RSX$ISSUQIO		; DO THE OPERATION
	.END
