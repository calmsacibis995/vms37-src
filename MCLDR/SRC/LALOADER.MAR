	.TITLE	LALOADER
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY:	LPA-11 UTILITY PROGRAMS
;
; ABSTRACT:
;	THIS PROGRAM IS THE LPA-11 MICROCODE LOADER.  IT LOADS MICROCODE
;	WHEN REQUESTED BY A MAILBOX REQUEST AND RELOADS MICROCODE AFTER
;	A POWER RECOVERY.
;
; ENVIRONMENT:	USER MODE
;
; AUTHOR:  STEVE BECKHARDT,	CREATION DATE:  4-OCT-78
;
; MODIFIED BY:
;
;	V02-003	SRB0003		Steve Beckhardt		3-Sep-1980
;		Changed microcode version number in mode word of initialize
;		command from 4 to 5.
;
;--

	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;
	$DIBDEF			; DIB OFFSETS
	$LADEF			; LPA-11 DEFINITIONS

;
; MACROS:
;

;
; EQUATED SYMBOLS:
;

CLKMODE = 1			; SET CLOCK MODE WORD
CLKSTATUS = ^X141		; SET CLOCK STATUS WORD
DEFCLKRATE = 1			; DEFAULT CLOCK RATE (1 MHZ)
DEFPRESET = -100		; DEFAULT CLOCK PRESET

DEVNFND = ^O326			; DEVICE NOT FOUND ERROR (INITIALIZE QIO)

PROTMASK = ^X1100		; MAILBOX PROTECTION MASK

MINMSGSIZ = 8			; MINIMUM MESSAGE SIZE

; OFFSETS INTO MAILBOX

MBX$L_TYPE = 0			; MESSAGE TYPE
MBX$B_CTRLR = 4			; CONTROLLER LETTER
MBX$B_MCTYPE = 5		; MICROCODE TYPE
MBX$W_RMBUNIT = 6		; RETURN MAILBOX UNIT NUMBER

;
; OWN STORAGE:
;

	.PSECT	_LPA$DATA,LONG

CNTRLR_TBL:			; CONTROLLER TABLE
	.LONG	0

LAIOSB:	.BLKQ	1		; LPA-11 I/O STATUS BLOCK

PMBIOSB:
	.BLKQ	1		; PERM. MAILBOX I/O STATUS BLOCK

PMBCHAN:			; PERMANENT MAILBOX CHANNEL
	.WORD	0
RMBCHAN:			; REPLY MAILBOX CHANNEL
	.WORD	0
LACHAN:				; LPA-11 CHANNEL
	.WORD	0

INITTBL:			; TABLE FOR INITIALIZE QIO
	.WORD	^X0500		; MODE WORD (INCLUDES UCODE VERSION NUMBER)
	.BLKW	10		; SPACE FOR TEN DEVICE ADDRESSES
DMDT:	.BLKB	256		; DEDICATED MODE DISPATCH TABLE

CHANBFR:			; BUFFER FOR CHANNEL CHARACTERISTICS
	.BLKB	DIB$L_DEVDEPEND+4
CHANBFRSIZ = .-CHANBFR

MBXBFR:	.BLKB	32		; MAILBOX BUFFER

LANAME:	.ASCII	'LA'		; LPA-11 DEVICE NAME
LACTRLR:
	.ASCII	' '		; SPACE FOR CONTROLLER LETTER
	.ASCII	'0'		; UNIT ZERO
LANAMESIZ = .-LANAME

	.PAGE
	.PSECT	_LPA$CODE,NOWRT,LONG

PMBNAMDSC:			; PERMANENT MAILBOX NAME DESCRIPTOR
	.LONG	PMBNAMSIZ
	.LONG	PMBNAM

LANAMEDSC:			; LPA-11 DEVICE NAME DESCRIPTOR
	.LONG	LANAMESIZ
	.LONG	LANAME

CHANBFRDSC:			; CHANNEL CHARACTERISTICS BUFFER DESCRIPTOR
	.LONG	CHANBFRSIZ
	.LONG	CHANBFR


DEVTBL:				; TABLE OF DEVICE ADDRESS FOR INITIALIZE QIO
	.WORD	^O170404	; CLOCK A
	.WORD	^O170432	; CLOCK B
	.WORD	^O170400	; A/D #1
	.WORD	^O170440	; A/D #2
	.WORD	^O170420	; D/A
	.WORD	^O167770	; DIGITAL I/O #1
	.WORD	^O167760	; DIGITAL I/O #2
	.WORD	^O167750	; DIGITAL I/O #3
	.WORD	^O167740	; DIGITAL I/O #4
	.WORD	^O167730	; DIGITAL I/O #5

PMBNAM:	.ASCII	'LPA$LOADER'	; PERMANENT MAILBOX NAME
PMBNAMSIZ = .-PMBNAM

	.SBTTL	MAIN PROGRAM
;++
; FUNCTIONAL DESCRIPTION:
;
;	THIS IS THE MAIN PROGRAM FOR THE LPA-11 MICROCODE LOADER.
;	IT PERFORMS SOME INITIALIZATION, SPECIFIES A POWER RECOVERY AST,
;	CREATES A MAILBOX, SPECIFIES A MAILBOX AST, AND THEN HIBERNATES.
;	ALL SUBSEQUENT PROCESSING IS PERFORMED IN ONE OF THE TWO AST ROUTINES.
;
; CALLING SEQUENCE:
;
;	ENTERED WHEN PROGRAM IS STARTED
;
; INPUT PARAMETERS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	NONE
;
;--

	.ENTRY	START,^M<R2,R3,R4,R5>

	; PERFORM INITIALIZATION
	CLRL	CNTRLR_TBL		; CLEAR CONTROLLER TABLE
	MOVC3	#256,LPA$$DMDT,DMDT	; COPY DED. MODE DISPATCH TABLE

	$SETSFM_S	#1		; SET SYS. SERVICE FAILURE EXCP.

	$SETPRA_S	PWRRECAST	; SET POWER RECOVERY AST

	; CREATE A PERMANENT MAILBOX AND MARK IT FOR DELETION TO CLEANUP
	; IF THIS PROCESS EXITS
	$CREMBX_S	PRMFLG = #1,-		; PERMANENT
			CHAN = PMBCHAN,-	; CHANNEL
			MAXMSG = #32,-		; MAXIMUM MESSAGE SIZE
			BUFQUO = #64,-		; BUFFER QUOTA
			PROMSK = #PROTMASK,-	; PROTECTION MASK
			LOGNAM = PMBNAMDSC	; LOGICAL NAME

	$DELMBX_S	PMBCHAN

	; SET UP MAILBOX AST
	$QIOW_S		FUNC = #IO$_SETMODE!IO$M_WRTATTN,-	; FUNCTION
			CHAN = PMBCHAN,-	; CHANNEL
			P1 = PMBAST		; MAILBOX AST ADDRESS

	; NOW HIBERNATE
	$HIBER_S

	.SBTTL	PMBAST - MAILBOX AST ROUTINE
;++
; FUNCTIONAL DESCRIPTION:
;
;	THIS ROUTINE IS THE MAILBOX AST ROUTINE.  WAKING UP HERE MEANS
;	A PROCESS HAS SENT US A MAILBOX REQUEST TO LOAD SOME MICROCODE.
;	THE GENERAL FLOW IS TO READ THE MAILBOX, LOAD THE MICROCODE,
;	AND OPTIONALLY SEND STATUS BACK.
;
; CALLING SEQUENCE:
;
;	CALLS/G FROM AST DISPATCHER WHEN A MAILBOX WRITE OCCURS
;
; INPUT PARAMETERS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	NONE
;
;--

	.ENTRY	PMBAST,	^M<R2,R3,R4,R5>

10$:	; ENABLE SYSTEM SERVICE FAILURE EXCEPTIONS
	$SETSFM_S	#1

15$:	; READ MAILBOX
	$QIOW_S		FUNC = #IO$_READVBLK!IO$M_NOW,-	; FUNCTION
			CHAN = PMBCHAN,-	; CHANNEL
			IOSB = PMBIOSB,-	; I/O STATUS BLOCK
			P1 = MBXBFR,-		; BUFFER ADDRESS
			P2 = #32		; BUFFER SIZE

	CMPW	PMBIOSB,S^#SS$_NORMAL	; WAS THERE A MESSAGE THERE?
	BEQL	20$			; YES

	; MAILBOX IS EMPTY - REENABLE MAILBOX ASTS AND HIBERNATE AGAIN
	$QIOW_S		FUNC = #IO$_SETMODE!IO$M_WRTATTN,-	; FUNCTION
			CHAN = PMBCHAN,-	; CHANNEL
			P1 = PMBAST		; MAILBOX AST ADDRESS

	RET

20$:	; HAVE A MESSAGE - MAKE SURE IT'S AT LEAST MINIMUM SIZE
	CMPW	PMBIOSB+2,#MINMSGSIZ
	BLSSU	15$			; TOO SMALL -IGNORE

	; MESSAGE SIZE IS OK - GET LPA CONTROLLER LETTER
	MOVZBL	MBXBFR+MBX$B_CTRLR,R2	; GET CONTROLLER LETTER
	MOVB	R2,LACTRLR		; STORE IN LANAME
	DECL	R2			; CONVERT TO BIT NUMBER
	BICB	#^XE0,R2		; FROM 0 TO 31

	; DISABLE SYSTEM SERVICE FAILURE EXCEPTIONS
	$SETSFM_S

	; ASSIGN A CHANNEL TO SPECIFIED LPA-11
	$ASSIGN_S	DEVNAM = LANAMEDSC,-	; DEVICE NAME
			CHAN = LACHAN		; CHANNEL
	BLBC	R0,50$			; ERROR

	; GET MICROCODE TYPE AND LOAD MICROCODE
	MOVZBL	MBXBFR+MBX$B_MCTYPE,R4	; MICROCODE TYPE
	BSBW	LOADMC			; LOAD IT
	BLBC	R0,40$			; ERROR

	; SET APPROPRIATE BIT IN CONTROLLER TABLE
	BBSS	R2,CNTRLR_TBL,30$

30$:	; START CLOCK AT A DEFAULT RATE
	MOVZBL	#DEFCLKRATE,R4		; DEFAULT CLOCK RATE
	MOVZWL	#DEFPRESET,R5		; DEFAULT PRESET
	BSBW	SETCLOCK		; SET CLOCK

40$:	; DEASSIGN CHANNEL TO LPA
	MOVQ	R0,-(SP)		; SAVE STATUS IN R0, R1
	$DASSGN_S	LACHAN
	MOVQ	(SP)+,R0		; RESTORE STATUS

50$:	; OPTIONALLY SEND STATUS IN R0 AND R1 BACK TO REQUESTOR
	MOVZWL	MBXBFR+MBX$W_RMBUNIT,R3	; GET UNIT # OF RETURN MAILBOX
	BEQL	60$			; NO RETURN MAILBOX

	MOVQ	R0,MBXBFR		; STORE STATUS IN BUFFER

	BSBW	ASSIGNRMB		; ASSIGN A CHANNEL TO RETURN MAILBOX
	BLBC	R0,60$			; CAN'T ASSIGN CHANNEL

	; SEND REPLY
	$QIOW_S		FUNC = #IO$_WRITEVBLK!IO$M_NOW,-	; FUNCTION
			CHAN = RMBCHAN,-	; CHANNEL
			P1 = MBXBFR,-		; BUFFER ADDRESS
			P2 = #8			; SIZE OF MESSAGE

	$DASSGN_S	RMBCHAN		; DEASSIGN CHANNEL TO RETURN MAILBOX
60$:	BRW	10$			; DO NEXT REQUEST

	.SBTTL	PWRRECAST - POWER RECOVERY AST ROUTINE
;++
; FUNCTIONAL DESCRIPTION:
;
;	THIS ROUTINE IS THE POWER RECOVERY AST ROUTINE.  FOR EACH LPA-11
;	CONTROLLER THAT HAS BEEN LOADED BY THIS LOADER (SAVED IN CNTRLR_TBL),
;	THIS ROUTINE GETS THE DEVICE CHARACTERISTICS, LOADS THE SAME MICROCODE
;	AS WAS LAST LOADED, AND SETS THE CLOCK TO THE LAST CLOCK RATE SET.
;
; CALLING SEQUENCE:
;
;	CALLS/G FROM AST DISPATCHER WHEN POWER RECOVERY OCCURS
;
; INPUT PARAMETERS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	NONE
;--

	.ENTRY	PWRRECAST, ^M<R2,R3,R4,R5>

	; REENABLE POWER RECOVERY ASTS
	$SETPRA_S	PWRRECAST

	; DISABLE SYSTEM SERVICE FAILURE EXCEPTIONS
	$SETSFM_S

	CLRL	R2			; LOOP COUNTER

10$:	; WAS NEXT CONTROLLER LOADED?
	BBC	R2,CNTRLR_TBL,80$	; BR. IF NO

	; YES, CONVERT NUMBER TO CONTROLLER LETTER
	BISB3	#^X40,R2,R3		; OR IN ^X40
	INCL	R3			; ADD 1

	MOVB	R3,LACTRLR		; MOVE CONTROLLER LETTER INTO LANAME

	; ASSIGN A CHANNEL TO LPA-11
	$ASSIGN_S	DEVNAM = LANAMEDSC,-	; DEVICE NAME
			CHAN = LACHAN		; CHANNEL
	BLBC	R0,80$			; UNABLE TO ASSIGN A CHANNEL

	; GET CHANNEL INFO.
	$GETCHN_S	PRIBUF = CHANBFRDSC,-	; BUFFER
			CHAN = LACHAN		; CHANNEL
	BLBC	R0,70$			; ERROR

	MOVL	CHANBFR+DIB$L_DEVDEPEND,R3	; GET DEV. DEP. CHARACTERISTICS

	; LOAD MICROCODE
	EXTZV	#LA$V_MCTYPE,#LA$S_MCTYPE,R3,R4	; GET MICROCODE TYPE IN R4
	BSBW	LOADMC
	BLBC	R0,70$			; ERROR

	; SET CLOCK RATE
	EXTZV	#LA$V_RATE,#LA$S_RATE,R3,R4	; GET CLOCK RATE
	EXTV	#LA$V_PRESET,#LA$S_PRESET,R3,R5	; GET CLOCK PRESET
	BSBW	SETCLOCK		; SET CLOCK RATE
	BLBC	R0,70$			; ERROR

70$:	$DASSGN_S	LACHAN		; DEASSIGN CHANNEL

80$:	AOBLSS	#32,R2,10$		; REPEAT FOR 32 CONTROLLERS

	; REENABLE SYSTEM SERVICE FAILURE EXCEPTIONS
	$SETSFM_S	#1

	RET

	.SBTTL	LOADMC - ROUTINE TO LOAD MICROCODE
;++
; FUNCTIONAL DESCRIPTION:
;
;	THIS ROUTINE IS THE ACTUAL MICROCODE LOADER.  IT DOES THE FOLLOWING:
;		1)  LOADS THE SPECIFIED MICROCODE
;		2)  STARTS THE MICROPROCESSOR
;		3)  INITIALIZES THE LPA-11.  THE INITIALIZE IS REPEATED
;		    UNTIL THE CORRECT DEVICE CONFIGURATION ON THE LPA'S
;		    BUS IS FOUND.
;
; CALLING SEQUENCE:
;
;	BSBW/B
;
; INPUT PARAMETERS:
;
;	R4	CONTAINS MICROCODE TYPE TO LOAD:
;		1 = MULTIREQUEST MODE
;		2 = DEDICATED A/D MODE
;		3 = DEDICATED D/A MODE
;
; IMPLICIT INPUTS:
;
;	LACHAN	CONTAINS CHANNEL NUMBER OF LPA-11
;
; OUTPUT PARAMETERS:
;
;	R0	CONTAINS COMPLETION CODE
;	R1	CONTAINS SECOND LONGWORD OF I/O STATUS BLOCK ON I/O ERRORS
;
; COMPLETION CODES:
;
;	VARIOUS SYSTEM STATUS RETURNS
;	SS$_BADPARAM IS RETURNED IF R4 DOES NOT CONTAIN A 1,2, OR 3
;--

LOADMC:
	PUSHR	#^M<R2,R3,R4,R5>

	; SEE WHICH TYPE OF MICROCODE IS SPECIFIED IN R4
	MOVAW	LPA$$MRMCODE,R0		; ASSUME MULTIREQUEST MODE
	CMPL	R4,#1			; IS IT?
	BEQL	10$			; YES

	MOVAW	LPA$$ADMCODE,R0		; ASSUME DED. A/D MODE
	CMPL	R4,#2			; IS IT?
	BEQL	10$			; YES

	MOVAW	LPA$$DAMCODE,R0		; ASSUME DED. D/A MODE
	CMPL	R4,#3			; IS IT?
	BEQL	10$			; YES

	; ERROR - BAD VALUE
	MOVZWL	#SS$_BADPARAM,R0	; RETURN STATUS
	BRB	15$

10$:	; R0 POINTS TO MICROCODE IMAGE TO LOAD - DO IT!
	$QIOW_S		FUNC = #IO$_LOADMCODE,-	; FUNCTION
			CHAN = LACHAN,-		; CHANNEL
			IOSB = LAIOSB,-		; I/O STATUS BLOCK
			P1 = (R0),-		; ADDRESS OF MICROCODE
			P2 = #2048,-		; SIZE OF MICROCODE IMAGE
			P3 = #0			; STARTING MICRO PC 
	BLBC	R0,15$			; ERROR
	BLBC	LAIOSB,17$		; ERROR

	; NOW START MICROPROCESSOR
	$QIOW_S		FUNC = #IO$_STARTMPROC,-	; FUNCTION
			CHAN = LACHAN,-			; CHANNEL
			IOSB = LAIOSB			; I/O STATUS BLOCK
15$:	BLBC	R0,70$			; ERROR
17$:	BLBC	LAIOSB,60$		; ERROR

	; NOW INITIALIZE IT
	MOVC3	#20,DEVTBL,INITTBL+2	; START WITH ALL 10 DEVICE ADDRESSES

20$:	$QIOW_S		FUNC = #IO$_INITIALIZE,-	; FUNCTION
			CHAN = LACHAN,-			; CHANNEL
			IOSB = LAIOSB,-			; I/O STATUS BLOCK
			P1 = INITTBL,-			; ADDRESS OF INIT. TABLE
			P2 = #278			; SIZE OF TABLE
	BLBC	R0,70$			; ERROR
	BLBS	LAIOSB,60$		; SUCCESS!

	; INITIALIZE FAILED - IS IT BECAUSE OF A BAD DEVICE ADDRESS?
	CMPB	LAIOSB+5,#DEVNFND	; IS IT DEVICE NOT FOUND?
	BNEQ	60$			; NO, ERROR

	; HAVE A DEVICE NOT FOUND ERROR - FIND CORRESPONDING ENTRY IN
	; DEVICE TABLE AND SET IT EQUAL TO -1
	CLRL	R2			; LOOP COUNTER
30$:	CMPW	LAIOSB+6,INITTBL+2[R2]	; MATCH?
	BNEQ	40$			; NO
	MNEGW	#1,INITTBL+2[R2]	; YES - SET TO -1
	BRB	20$			; RETRY INITIALIZE
40$:	AOBLSS	#10,R2,30$		; TRY NEXT ENTRY

60$:	; PICK UP I/O STATUS BLOCK BEFORE RETURNING
	MOVQ	LAIOSB,R0

70$:	; HAVE STATUS IN R0 (AND MAYBE R1 TOO)
	POPR	#^M<R2,R3,R4,R5>
	RSB

	.SBTTL	SETCLOCK - ROUTINE TO SET LPA-11 CLOCK
;++
; FUNCTIONAL DESCRIPTION:
;
;	THIS ROUTINE SETS THE LPA-11 CLOCK TO THE SPECIFIED RATE AND PRESET.
;
; CALLING SEQUENCE:
;
;	BSBW/B
;
; INPUT PARAMETERS:
;
;	R4	CONTAINS CLOCK RATE IN LOW 3 BITS
;	R5	CONTAINS CLOCK PRESET
;
; IMPLICIT INPUTS:
;
;	LACHAN	CONTAINS CHANNEL NUMBER OF LPA-11
;
; OUTPUT PARAMETERS:
;
;	R0	CONTAINS COMPLETION CODE
;	R1	CONTAINS SECOND LONGWORD OF I/O STATUS BLOCK ON I/O ERRORS
;
; COMPLETION CODES:
;
;	VARIOUS SYSTEM STATUS RETURNS
;
;--

SETCLOCK:
	MOVZWL	#CLKSTATUS,R0		; CLOCK STATUS
	INSV	R4,#1,#3,R0		; INSERT CLOCK RATE

	; DO IT!
	$QIOW_S		FUNC = #IO$_SETCLOCK,-	; FUNCTION
			CHAN = LACHAN,-		; CHANNEL
			IOSB = LAIOSB,-		; I/O STATUS BLOCK
			P2 = #CLKMODE,-		; MODE WORD
			P3 = R0,-		; CLOCK STATUS
			P4 = R5			; CLOCK PRESET
	BLBC	R0,50$			; ERROR

	MOVQ	LAIOSB,R0		; PICK UP I/O STATUS BLOCK

50$:	RSB

	.SBTTL	ASSIGNRMB - ASSIGN A CHANNEL TO RETURN MAILBOX
;++
; FUNCTIONAL DESCRIPTION:
;
;	THIS ROUTINE ASSIGNS A CHANNEL TO THE RETURN MAILBOX.
;	IT ASSIGNS A CHANNEL TO THE NAME MBn WHERE N IS AN INPUT ARGUMENT.
;
; CALLING SEQUENCE:
;
;	BSBW/B
;
; INPUT PARAMETERS:
;
;	R3	CONTAINS THE MAILBOX NUMBER TO ASSIGN A CHANNEL TO
;
; OUTPUT PARAMETERS:
;
;	R0	CONTAINS A COMPLETION CODE
;
; IMPLICIT OUTPUTS:
;
;	RMBCHAN		RECEIVES THE CHANNEL NUMBER OF THE CHANNEL ASSIGNED
;
; COMPLETION CODES:
;
;	THE SAME ONES THAT ARE SUPPLIED BY THE $ASSIGN SYSTEM SERVICE
;
;--

ASSIGNRMB:
	PUSHR	#^M<R2,R3,R4,R5>	; SAVE SOME REGISTERS

	MOVL	SP,R5			; SAVE STACK POINTER

	; CONVERT NUMBER TO ASCII STRING ON STACK

10$:	; CONVERT NEXT DIGIT
	CLRL	R4			; HIGH BITS OF DIVIDEND
	EDIV	#10,R3,R3,R4		; QUO.-> R3   REM. -> R4
	BISB3	#^X30,R4,-(SP)		; CONVERT TO ASCII AND PUSH ON STACK
	TSTL	R3			; REPEAT?
	BNEQ	10$			; BR. IF YES

	; NOW PUSH 'MB' ONTO STACK
	MOVW	#^A'MB',-(SP)

	; NOW BUILD A STRING DESCRIPTOR ON STACK
	SUBL3	SP,R5,R3		; OVERALL LENGTH OF STRING
	PUSHAB	(SP)			; PUSH ADDRESS OF STRING
	PUSHL	R3			; PUSH LENGTH
	MOVL	SP,R4			; R4 POINTS TO STRING DESCRIPTOR

	; NOW ASSIGN THE CHANNEL
	$ASSIGN_S	DEVNAM = (R4),-		; DEVICE NAME
			CHAN = RMBCHAN		; CHANNEL

	MOVL	R5,SP			; RESTORE STACK POINTER
	POPR	#^M<R2,R3,R4,R5>	; RESTORE REGISTERS
	RSB				; RETURN CODE IN R0 FROM $ASSIGN



	.END	START





	.END
