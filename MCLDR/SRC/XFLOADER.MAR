	.TITLE	XFLOADER
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY:	DR32 UTILITY PROGRAMS
;
; ABSTRACT:
;	THIS PROGRAM IS THE DR32 MICROCODE LOADER.
;
; ENVIRONMENT:	USER MODE
;
; AUTHOR:  STEVE BECKHARDT,	CREATION DATE:  6-APR-1979
;
; MODIFIED BY:
;
;	V02-003	KTA0014		Kerbey T. Altmann		15-Apr-1981
;		Changed some code to accommodate changed IOC$FFCHAN.
;
;	V02-003	SRB0006		Steve Beckhardt		23-Sep-1980
;		Modified the microcode loader to support the DR750.
;
;--

	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;

;
; MACROS:
;

	$CCBDEF			; Define CCB offsets
	$CLIDEF			; Define CLI values
	$CLIMSGDEF		; Define CLI message values
	$DCDEF			; Define device classes and types
	$DIBDEF			; Define device info. block offsets
	$UCBDEF			; Define UCB offsets

;
; EQUATED SYMBOLS:
;

WCSSIZE = 1024			; NUMBER OF WCS WORDS

WCS_PADL_780 = ^X200003FF	; WCS WORD TO USE FOR PADDING ON DR780
WCS_PADH_780 = 00

WCS_PADL_750 = 00000000		; WCS WORD TO USE FOR PADDING ON DR750
WCS_PADH_750 = 01

;
; OWN STORAGE:
;

	.PSECT	XFDATA,LONG


WCSFAB:	$FAB	DNM = <.ULD>,-		; FAB for reading in WCS
		FAC = GET,-
		FOP = SQO

WCSRAB:	$RAB	FAB = WCSFAB,-		; RAB for reading in WCS
		RAC = SEQ,-
		UBF = WCSLINE,-
		USZ = 133

ERRFAB:	$FAB	FAC = PUT,-		; FAB for writing error messages
		FNM = <SYS$ERROR>,-
		FOP = <CIF,SQO>,-
		MRS = 133,-
		ORG = SEQ,-
		RAT = CR,-
		RFM = VAR

ERRRAB:	$RAB	FAB = ERRFAB,-		; RAB for writing error messages
		RAC = SEQ,-
		ROP = EOF


XFIOSB:	.BLKQ	1			; I/O status block

DEVBUF:	.BLKB	DIB$K_LENGTH		; Buffer for device characteristics
DEVBUFSIZ = .-DEVBUF

XFCHAN:	.BLKW	1			; Holds channel number

GETCMD:	$CLIREQDESC	RQTYPE = CLI$K_GETCMD	; Get command CLI request block

WCS_PADL:				; WCS word to use in padding
	.BLKL	1
WCS_PADH:
	.BLKB	1

HIBERFLAG:				; Hibernated flag
	.BYTE	0

WCSLINE:				; Buffer to hold WCS line.  Also used
	.BLKB	134			; to hold message returned by $GETMSG.
WCSLINESIZ = .-WCSLINE

WCSBFR:	.REPT	WCSSIZE			; Buffer to hold actual WCS image
	.BLKB	5			; 1 WCS word = 5 bytes
	.ENDR
WCSBFRSIZ = .-WCSBFR

XFNAME:	.ASCII	'XF'			; Device name
XFCTRLR:
	.ASCII	' '			; Space for controller designator
	.ASCII	'0'			; Unit number
XFNAMESIZ = .-XFNAME

WCSFILNAM:
	.ASCII	'XF'			; WCS file name
WCS_FNM_CTRLR:
	.ASCII	' '			; Space for controller designator
	.ASCII	'$WCS'			; Rest of name
WCSFILNAMSIZ = .-WCSFILNAM

WCSDFLTNAM:				; Default WCS file name
	.ASCII	'SYS$SYSTEM:XF'
CPUNUM:	.ASCII	'780'			;  CPU number
	.ASCII	'.ULD'
WCSDFLTNAMSIZ = .-WCSDFLTNAM
NUMDRS:	.BLKB	1			; Number of DR32s loaded

	.SBTTL	Read only data

	.PSECT	XFCODE,LONG,NOWRT

XFNAMEDSC:				; XF Name descriptor
	.LONG	XFNAMESIZ
	.LONG	XFNAME

FMTERRDSC:				; Format error descriptor
	.LONG	FMTERRSIZ
	.LONG	FMTERR

NODRSERRDSC:				; No DR32s error descriptor
	.LONG	NODRSERRSIZ
	.LONG	NODRSERR

WCSLINEDSC:				; WCS line descriptor
	.LONG	WCSLINESIZ
	.LONG	WCSLINE

DEVBUFDSC:				; Device char. buffer descriptor
	.LONG	DEVBUFSIZ
	.LONG	DEVBUF

FMTERR:	.ASCII	'Incorrect format in WCS file.'
FMTERRSIZ = .-FMTERR

NODRSERR:
	.ASCII	'No DR32s loaded.'
NODRSERRSIZ = .-NODRSERR

HEXDIGITBL:				; Hexadecimal digit table 
	.ASCII	'FEDCBA9876543210'


	.DEFAULT	DISPLACEMENT,WORD

	.SBTTL	XFLOADER - MAIN PROGRAM
;++
; FUNCTIONAL DESCRIPTION:
;
;	THIS IS THE MAIN ENTRY POINT FOR XFLOADER.  IT TRIES TO LOAD 
;	MICROCODE INTO EACH POSSIBLE DR32 (UP TO 16).
;	AFTER LOADING ALL THE DR32s, THIS ROUTINE DETERMINES IF IT
;	WAS CALLED BY PROCSTRT.  IF SO, IT WAS RUN WITH A RUN/UIC=[uic]
;	COMMAND AS A SEPARATE PROCESS AND SHOULD HIBERNATE.  OTHERWISE,
;	IT WAS RUN WITH AN ORDINARY RUN COMMAND AND SHOULD RETURN.
;
; CALLING SEQUENCE:
;
;	CALL	XFLOADER
;
; INPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	NONE
;
; SIDE EFFECTS:
;
;	NONE
;
;--

	.ENTRY	XFLOADER,^M<R4,R5,R6>

	$SETPRA_S	XFLOADER	; Specify power recovery AST

	CLRB	NUMDRS			; Clear number of DR32s loaded

	MOVZBL	#^A/A/,R5		; First controller letter
	MOVL	#16,R6			; Number of controllers

10$:	; Try to load microcode into next DR32

	BSBB	LOAD_WCS
	BLBC	R0,80$			; If LBC, exit
	INCL	R5			; Next controller letter
	SOBGTR	R6,10$			; Do next one

	TSTB	NUMDRS			; Test number of DR32s loaded
	BNEQ	40$			; There is at least one
	CLRL	R0			; No DR32s - Give error message
	MOVAQ	NODRSERRDSC,R1
	BSBW	OUTPUT_ERRMSG
	BRB	80$			; Exit

40$:	; Determine if we were called from PROCSTRT (as a process
	; without a CLI) or from a CLI or as a power recovery AST.
	; If the first case, then hibernate waiting for a power recovery
	; AST.  Otherwise, return.

	TSTB	HIBERFLAG		; Have we hibernated before?
	BNEQ	80$			; Yes, this must be an AST - return
	CMPL	(AP),#6			; Were we called with 6 arguments?
	BNEQ	80$			; No, return
	TSTL	CLI$A_UTILSERV(AP)	; Is there a CLI callback routine?
	BEQL	80$			; No, return
	PUSHAB	GETCMD			; Push address of CLI request block
	CALLS	#1,@CLI$A_UTILSERV(AP)	; Call CLI callback routine
	CMPL	R0,#CLI$_INVREQTYP	; Is it invalid request type?
	BNEQ	80$			; No, we were called from a CLI
	INCB	HIBERFLAG		; Yes, we were called from PROCSTRT,
	$HIBER_S			; set flag and hibernate

80$:	MOVZWL	S^#SS$_NORMAL,R0
	RET				; and exit

	.SBTTL	LOAD_WCS - Load Microcode on a specified DR32
;++
; FUNCTIONAL DESCRIPTION:
;
;	This routine loads microcode into a specified DR32.  It assigns
;	a channel to the DR, opens the microcode file, and loads
;	the DR.
;
; CALLING SEQUENCE:
;
;	BSBW	LOAD_WCS
;
; INPUT PARAMETERS:
;
;	R5	Controller letter
;
; IMPLICIT INPUTS:
;
;	None
;
; OUTPUT PARAMETERS:
;
;	R0	0 = Exit
;		1 = Continue
;
; IMPLICIT OUTPUTS:
;
;	NUMDRS is incremented if microcode is loaded successfully
;
; COMPLETION CODES:
;
;	None
;
; SIDE EFFECTS:
;
;	Errors are written to the file SYS$ERROR
;--

LOAD_WCS:
	MOVB	R5,WCS_FNM_CTRLR	; Store controller letter in WCS
					; file name
	MOVB	R5,XFCTRLR		; Store controller letter in DR name

	; Assign a channel to the DR.  This is done with an internal
	; procedure instead of $ASSIGN_S so that we can assign a channel
	; even if another process has a channel assigned or if the DR
	; is allocated.

	PUSHAW	XFCHAN			; Address of channel number
	PUSHAQ	XFNAMEDSC		; Address of device name desc.
	PUSHL	#2			; Number of arguments
	MOVL	SP,R0			; Pointer to argument list
	$CMKRNL_S	ASSIGN,(R0)	; Assign the channel
	ADDL	#12,SP			; Adjust stack
	BLBS	R0,10$			; Successful assignment
	CMPW	R0,#SS$_NOSUCHDEV	; No such device error?
	BNEQ	5$			; No, error
	MOVL	#1,R0			; Yes, continue
	RSB

5$:	BSBW	OUTPUT_ERRMSG		; Give error message
	CLRL	R0			; Exit
	RSB

10$:	; Open WCS file by opening a file whose logical name is
	; XFc$WCS where 'c' is the controller letter.

	MOVAB	WCSFILNAM,WCSFAB+FAB$L_FNA	; Store file name
	MOVB	#WCSFILNAMSIZ,WCSFAB+FAB$B_FNS	; Store file name size
	$OPEN	FAB = WCSFAB
	BLBS	R0,20$			; Success

	; That didn't work so open a default WCS file.
	; However, the default file name (as well as the WCS padding word)
	; is dependent on what type of DR32 we have.  Currently, the
	; DR780 and DR750 are supported.

	MOVB	#^A'8',CPUNUM+1		; Assume DR780 - set number in default
	MOVL	#WCS_PADL_780,WCS_PADL	; file name and also set WCS padding word
	MOVB	#WCS_PADH_780,WCS_PADH
	$GETCHN_S	PRIBUF = DEVBUFDSC,-	; Get device info
			CHAN   = XFCHAN
	BLBC	R0,15$			; Error
	CMPB	#DT$_DR780,-		; Check device type to see if we have
		DIB$B_DEVTYPE+DEVBUF	; A DR780
	BEQL	12$			; We have a DR780
	MOVB	#^A'5',CPUNUM+1		; We have a DR750 - set number in default
	MOVL	#WCS_PADL_750,WCS_PADL	; file name and also set WCS padding word
	MOVB	#WCS_PADH_750,WCS_PADH
12$:
	MOVAB	WCSDFLTNAM,WCSFAB+FAB$L_FNA	; Store default file name
	MOVB	#WCSDFLTNAMSIZ,WCSFAB+FAB$B_FNS	; Store default file name size
	$OPEN	FAB = WCSFAB
	BLBS	R0,20$			; Opened successfully
15$:
	BSBW	OUTPUT_ERRMSG		; Error - output error message
	BRB	70$			; Deassign channel

20$:	$CONNECT 	RAB = WCSRAB
	BLBC	R0,50$			; Error

	; Now read in (and format) WCS

	CALLS	#0,READ_WCS
	BLBC	R0,50$			; Error

	; Issue QIO to actually load the microcode

	$QIOW_S		FUNC = #IO$_LOADMCODE,-
			CHAN = XFCHAN,-
			IOSB = XFIOSB,-
			P1 = WCSBFR,-
			P2 = #WCSBFRSIZ
	BLBC	R0,50$			; Error
	MOVZWL	XFIOSB,R0		; Get I/O status block
	BLBC	R0,50$			; Error
	INCB	NUMDRS			; Increment # of DRs loaded
	BRB	60$

50$:	BSBB	OUTPUT_ERRMSG		; Output error message

60$:	$CLOSE	FAB = WCSFAB		; Close file
70$:	$DASSGN_S	XFCHAN		; Deassign channel

	MOVL	#1,R0			; Continue
	RSB

	.SBTTL	OUTPUT_ERRMSG - Output error message
;++
; FUNCTIONAL DESCRIPTION:
;
;	This routine outputs error messages to SYS$ERROR.
;
; CALLING SEQUENCE:
;
;	BSBW	OUTPUT_ERRMSG
;
; INPUT PARAMETERS:
;
;	R0	0 or VMS completion code
;
;	R1	If R0 = 0, then R1 contains address of error message descriptor
;
; IMPLICIT INPUTS:
;
;	None
;
; OUTPUT PARAMETERS:
;
;	None
;
; IMPLICIT OUTPUTS:
;
;	None
;
; COMPLETION CODES:
;
;	None
;
; SIDE EFFECTS:
;
;	R2 is not preserved
;--

OUTPUT_ERRMSG:
	MOVAB	ERRRAB,R2		; Put address of RAB in R2
	TSTL	R0			; Have VMS completion status?
	BNEQ	10$			; Yes
	MOVW	(R1),RAB$W_RSZ(R2)	; No, move size of message into RAB
	MOVL	4(R1),RAB$L_RBF(R2)	; Move address of message into RAB
	BRB	20$

10$:	; Have VMS completion status in R0.  Get corresponding message.

	$GETMSG_S	MSGID = R0,-
			MSGLEN = RAB$W_RSZ(R2),-
			BUFADR = WCSLINEDSC
	MOVAB	WCSLINE,RAB$L_RBF(R2)	; Store address of buffer in RAB

20$:	; Create output file or just open it if it already exists.  Then
	; output message and close file.

	$CREATE		FAB = ERRFAB
	BLBC	R0,60$			; Error

	$CONNECT	RAB = (R2)

	$PUT		RAB = (R2)

	$CLOSE		FAB = ERRFAB

60$:	RSB

	.SBTTL	ASSIGN - Assign a channel
;++
; FUNCTIONAL DESCRIPTION:
;
;	This routine assigns a channel to a device.  It is functionally
;	a subset of the $ASSIGN system service.  It is used here
;	instead of the $ASSIGN system service for the following
;	reason:  The DR32 is a non-shareable device.  Therefore, if
;	a process is using a DR32 and a power failure occurs, a normal
;	$ASSIGN would fail since another process would have a channel
;	assigned.  In other words, we would be unable to reload microcode
;	on DR32s that were in use at the time of a power failure.
;	This ASSIGN, on the other hand, will work.  Note that if we 
;	try to load microcode on a DR32 in the middle of a data
;	transfer, the load microcode will fail and the data transfer
;	will continue.
;
; CALLING SEQUENCE:
;
;	CALLS/G	ASSIGN	(in KERNEL mode)
;
; INPUT PARAMETERS:
;
;	4(AP)	Address of device name string descriptor
;	8(AP)	Address to store assigned channel number
;
; IMPLICIT INPUTS:
;
;	None
;
; OUTPUT PARAMETERS:
;
;	R0	Completion code
;
; IMPLICIT OUTPUTS:
;
;	None
;
; COMPLETION CODES:
;
;	SS$_IVDEVNAM	Invalid device name
;	SS$_NOIOCHAN	No I/O channel is available for assignment
;	SS$_NOSUCHDEV	No such device on this system
;
; SIDE EFFECTS:
;
;	None
;--

	.ENTRY	ASSIGN,^M<R4,R7,R8>

	MOVL	G^SCH$GL_CURPCB,R4	; Get current PCB

	JSB	G^IOC$FFCHAN		; Find free I/O channel
	BLBS	R0,10$			; Have one
	RET				; No free I/O channel

10$:	MOVQ	R1,R7			; Save channel index and CCB address
	JSB	G^SCH$IOLOCKW		; Lock I/O database for write access
	MOVL	4(AP),R1		; Get address of device name desc.
	JSB	G^IOC$SEARCHDEV		; Search for device
	BLBC	R0,20$			; Didn't find it

	; Do the assignment

	MOVL	R1,CCB$L_UCB(R8)	; Store UCB address in CCB
	INCW	UCB$W_REFC(R1)		; Incr. UCB reference count
	MOVB	#4,CCB$B_AMOD(R8)	; Store access mode
	MOVW	R7,@8(AP)		; Store assigned channel number
	MOVZWL	#SS$_NORMAL,R0		; Success status

20$:	JMP	G^IOC$UNLOCK		; Unlock I/O data base and return

	.SBTTL	READ_WCS - Read in and Format WCS
;++
; FUNCTIONAL DESCRIPTION:
;
;	This routine reads in and formats the WCS.  The input line
;	is in the format produced by MICRO2:
;
;		[addr]=value
;
;	E.g.	[21D]=30FF12AB00	(Note 40 bit WCS word)
;
; CALLING SEQUENCE:
;
;	CALLS/G	READ_WCS
;
; INPUT PARAMETERS:
;
;	None
;
; IMPLICIT INPUTS:
;
;	The WCS is stored in WCSBFR
;
; OUTPUT PARAMETERS:
;
;	R0	Completion code or 0.  If 0 then R1 contains descriptor
;		to error message
;
; IMPLICIT OUTPUTS:
;
;	None
;
; COMPLETION CODES:
;
;	The ones returned by $GET
;
; SIDE EFFECTS:
;
;	None
;--

READ_WCS:
	.WORD	^M<R2,R3,R4,R5,R6,R7>

	MOVAB	WCSBFR,R2		; Address of WCS buffer
	CLRL	R3			; WCS word #

10$:	; Get next line from WCS file

	$GET	RAB = WCSRAB
	CMPL	R0,#RMS$_EOF		; End of file?
	BEQL	70$			; Yes
	BLBC	R0,80$			; No, other error

	; Get size of line read, zero byte after end of line.

	MOVZWL	WCSRAB+RAB$W_RSZ,R5	; Get size of line read
	MOVAB	WCSLINE,R4		; Get address of line
	CLRB	(R4)[R5]		; Zero byte at end

	; If first character on line is ';' then ignore this line.

	CMPB	(R4),#^A/;/		; Is it ';'?
	BEQL	10$			; Yes, get next line

	; If first character on line is not '[' then there is no more
	; WCS in file.

	CMPB	(R4)+,#^A/[/		; Compare it
	BNEQ	70$			; It's not '['
	BSBB	CVTADDR			; It is.  Convert address (in R5)
	CMPL	R5,R3			; Compare this address with last+1
	BEQL	30$			; Have sequential addresses
	BLSS	ERROR			; Addresses went backwards
	BSBB	FILL			; Have a hole - fill it

30$:	; Convert the data in two parts:  first 1 byte and then 4 bytes.

	MOVL	#2,R7			; Number of digits to convert
	BSBB	CVTDATA			; Convert data - returns in R5
	MOVL	R5,R6			; Save
	MOVL	#8,R7			; Number of digits to convert
	BSBB	CVTDATA			; Returns data in R5
	MOVL	R5,(R2)+		; Store data in buffer
	MOVB	R6,(R2)+		; Rest of WCS word
	INCL	R3			; Inc. WCS word counter
	BRB	10$			; Repeat

70$:	; No more data in file
	TSTL	R3			; Make sure we got at least 1 word
	BEQL	ERROR			; We didn't
	MOVZWL	#WCSSIZE,R5		; Number of words of WCS required
	CMPL	R5,R3			; Have enough?
	BEQL	75$			; Yes
	BSBB	FILL			; No, fill buffer to end

75$:	MOVL	S^#SS$_NORMAL,R0	; Success

80$:	RET



ERROR:	; Come here for errors involving format of WCS file.

	MOVAQ	FMTERRDSC,R1		; Get address of error msg. descriptor
	CLRL	R0			; Indicates descriptor is in R1
	RET

	.SBTTL	CVTADDR - Convert WCS address
;++
; FUNCTIONAL DESCRIPTION:
;
;	This routine converts the WCS address to binary.  This routine
;	converts until a non-hex digit is found.  At that point,
;	the next two characters must be ']='.  If they're not, then it's
;	a WCS format error.
;
; CALLING SEQUENCE:
;
;	BSBW	CVTADDRE
;
; INPUT PARAMETERS:
;
;	R4	Address of first byte of WCS address to convert
;
; IMPLICIT INPUTS:
;
;	None
;
; OUTPUT PARAMETERS:
;
;	R5	WCS Address
;
; IMPLICIT OUTPUTS:
;
;	None
;
; COMPLETION CODES:
;
;	None
;
; SIDE EFFECTS:
;
;	Errors are handled by branching to ERROR
;--

CVTADDR:
	CLRL	R5			; Will contain address
10$:	LOCC	(R4)+,#16,HEXDIGITBL	; Locate char. in hex digit table
	BEQL	20$			; Not a hex digit
	DECL	R0			; Subtract one to get true value
	ASHL	#4,R5,R5		; Multiply address so far by 16
	ADDL	R0,R5			; Add next digit
	BRB	10$			; Repeat

20$:	; Have a non-hex digit.  Make sure it and  next char. are ']='.

	DECL	R4			; Back up 1 byte
	CMPW	(R4)+,#^A/]=/		; Right characters?
	BNEQ	ERROR			; No

	; Make sure address is within size of WCS.

	CMPL	R5,#WCSSIZE
	BGEQ	ERROR			; Too large
	RSB

	.SBTTL	CVTDATA - Convert WCS Data
;++
; FUNCTIONAL DESCRIPTION:
;
;	This routine converts a specified number of hexadecimal bytes
;	to binary.
;
; CALLING SEQUENCE:
;
;	BSBW	CVTDATA
;
; INPUT PARAMETERS:
;
;	R4	Address of string to convert
;	R7	Number of bytes to convert
;
; IMPLICIT INPUTS:
;
;	None
;
; OUTPUT PARAMETERS:
;
;	R5	Converted WCS data
;
; IMPLICIT OUTPUTS:
;
;	None
;
; COMPLETION CODES:
;
;	None
;
; SIDE EFFECTS:
;
;	Errors are handled by branching to ERROR.
;--

CVTDATA:
	CLRL	R5			; Will hold result
10$:	LOCC	(R4)+,#16,HEXDIGITBL	; Locate char. in hex digit table
	BEQL	ERROR			; Not a hex digit.
	DECL	R0			; Subtract one to get true value
	ASHL	#4,R5,R5		; Multiply number so far by 16
	ADDL	R0,R5			; Add in nect character
	SOBGTR	R7,10$			; Repeat
	RSB

	.SBTTL	FILL - Fill Holes in Buffer
;++
; FUNCTIONAL DESCRIPTION:
;
;	This routine is called to fill holes in the WCS image with
;	a default WCS word.  This is necessary because the addresses
;	in the WCS file are not necessarily sequential.
;
; CALLING SEQUENCE:
;
;	BSBW	FILL
;
; INPUT ARGUMENTS:
;
;	R2	Address of next location in WCS buffer
;	R3	Current WCS address
;	R5	WCS address to fill to
;
; IMPLICIT INPUTS:
;
;	None
;
; OUTPUT ARGUMENTS:
;
;	None
;
; IMPLICIT OUTPUTS:
;
;	None
;
; COMPLETION CODES:
;
;	None
;
; SIDE EFFECTS:
;
;	None
;--

FILL:	MOVL	WCS_PADL,(R2)+		; Store low 4 bytes
	MOVB	WCS_PADH,(R2)+		; Store high byte
	AOBLSS	R5,R3,FILL		; Repeat
	RSB



	.END	XFLOADER
