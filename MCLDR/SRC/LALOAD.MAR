	.TITLE	LALOAD
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY:	LPA-11 UTILITY PROGRAMS
;
; ABSTRACT:
;	THIS PROGRAM PROVIDES AN OPERATOR INTERFACE TO LOAD LPA-11
;	MICROCODE.  THIS PROGRAM, READS OPERATOR COMMANDS AND SENDS
;	LOAD REQUESTS TO THE LPA-11 LOADER PROCESS.
;
; ENVIRONMENT:	USER MODE
;
; AUTHOR:  STEVE BECKHARDT,	CREATION DATE:  9-OCT-78
;
; MODIFIED BY:
;
;	, : VERSION
; 01	- 
;--

	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;

;
; MACROS:
;

;
; EQUATED SYMBOLS:
;
LOWER_A = ^X61			; LOWERCASE A

LOWER_Z = ^X7A			; LOWERCASE Z

;
; OWN STORAGE:
;

	.PSECT	LPADATA,LONG

INFAB:	$FAB	FAC = GET,-
		FNM = <SYS$INPUT>,-
		RAT = CR

OUTFAB:	$FAB	FAC = PUT,-
		FNM = <SYS$OUTPUT>,-
		RAT = CR

INRAB:	$RAB	FAB = INFAB,-
		PBF = PROMPT,-
		PSZ = PROMPTSZ,-
		ROP = <CCO,PMT>,-
		UBF = BUFFER,-
		USZ = 132

OUTRAB:	$RAB	FAB = OUTFAB


DEVDESC:			; DEVICE DESCRIPTOR
	.BLKQ	1

DEVCHAN:			; DEVICE CHANNEL
	.BLKW	1

BUFFER:	.BLKB	256		; BUFFER FOR INPUT AND OUTPUT
	.PAGE
	.PSECT	LPACODE,NOWRT,LONG

BUFFERDSC:			; BUFFER DESCRIPTOR
	.LONG	256
	.LONG	BUFFER

DEFDEVDESC:			; DEFAULT DEVICE NAME DESCRIPTOR
	.LONG	DEFDEVSZ
	.LONG	DEFDEV

SWTBL:	.LONG	MRSWSIZ	; SWITCH TABLE
	.LONG	MRSW
	.LONG	ADSWSIZ
	.LONG	ADSW
	.LONG	DASWSIZ
	.LONG	DASW

DEFDEV:	.ASCII	'LAA0'		; DEFAULT DEVICE NAME
DEFDEVSZ = .-DEFDEV

PROMPT:	.ASCII	'LALOAD>'	; PROMPT STRING
PROMPTSZ = .-PROMPT

INVSWMSG:			; INVALID SWITCH MESSAGE
	.ASCII	'Invalid switch'
INVSWMSGSZ = .-INVSWMSG

MRSW:	.ASCII	'MULTI_REQUEST'	; SWITCH NAMES
MRSWSIZ = .-MRSW

ADSW:	.ASCII	'ANALOG_DIGITAL'
ADSWSIZ = .-ADSW

DASW:	.ASCII	'DIGITAL_ANALOG'
DASWSIZ = .-DASW

TRMS:	.ASCII	': /'		; TERMINATORS TABLE
NTRMS = .-TRMS

	.SBTTL	MAIN PROGRAM
;++
; FUNCTIONAL DESCRIPTION:
;
;	THIS IS THE MAIN PROGRAM FOR THIS PROCESS.  IT PROMPTS FOR
;	INPUT, READS THE INPUT, PARSES IT, AND THEN CALLS THE ROUTINE
;	WHICH SENDS THE LOAD REQUEST OVER A MAILBOX.
;
; CALLING SEQUENCE:
;
;	ENTERED WHEN PROGRAM IS STARTED
;
; INPUT PARAMETERS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	NONE
;
;--

	.ENTRY	START, ^M<R2,R3,R4,R5,R6,R7,R8>

	; OPEN INPUT AND OUTPUT FILES AND CONNECT RABS
	$OPEN		FAB = INFAB
	BLBC	R0,13$
	$OPEN		FAB = OUTFAB
	BLBC	R0,13$
	$CONNECT	RAB = INRAB
	BLBC	R0,13$
	$CONNECT	RAB = OUTRAB
	BLBC	R0,13$

10$:	; GET AN INPUT LINE
	$GET	RAB = INRAB
	CMPL 	R0,#RMS$_EOF		; END OF FILE?
	BEQL	14$			; YES
	BLBS	R0,15$			; SUCCESS

13$:	BRW	100$			; ERROR
14$:	BRW	98$			; EXIT NORMALLY

15$:	; GET SIZE OF INPUT LINE
	MOVW	INRAB+RAB$W_RSZ,R0
	BEQL	10$			; EMPTY LINE - REPROMPT

	; SKIP LEADING BLANKS
	SKPC	#^A' ',R0,BUFFER
	BEQL	10$			; EMPTY LINE - REPROMPT
	MOVQ	R0,R2			; MOVE SIZE AND ADDRESS TO R2,R3
	MOVQ	R0,R4			; AND ALSO TO R4,R5
	BSBW	CVTUPC			; CONVERT LINE TO UPPER CASE

20$:	; NOW LOOP LOOKING FOR END OF NAME
	LOCC	(R3),#NTRMS,TRMS	; LOOK FOR A TERMINATOR
	BNEQ	30$			; FOUND ONE
	INCL	R3			; BUMP CHAR. POINTER
	SOBGTR	R2,20$			; TRY NEXT CHAR.

30$:	; HAVE A TERMINATOR OR REACHED END OF LINE
	SUBL	R2,R4			; R4 CONTAINS LENGTH OF NAME

	; LOOK FOR SWITCH
	CLRL	R8			; INIT. FOR SEARCH THRU SWITCH TABLE
					; AND ALSO AS DEFAULT
	LOCC	#^A'/',R2,(R3)
	BEQL	60$			; NO SWITCH - USE DEFAULT

	; HAVE SLASH.  R0,R1 CONTAIN REMAINING STRING DESC.
	INCL	R1			; MOVE PAST SLASH
	DECL	R0			; DEC. COUNT
	BEQL	55$			; ERROR - INVALID SWITCH
	MOVQ	R0,R6			; COPY DESC. INTO R6,R7
	LOCC	#^A' ',R0,(R1)		; LOCATE END OF SWITCH
	SUBL	R0,R6			; CALCULATE LENGTH OF SWITCH

50$:	; COMPARE AGAINST NEXT ENTRY IN SWITCH TABLE
	MOVQ	SWTBL[R8],R2		; GET LEN. AND ADDR. OF SWITCH IN R2,R3
	CMPC5	R6,(R7),#0,R2,(R3)
	TSTL	R0			; IF R0 = 0, THEN SUBSTRING MATCH
	BEQL	60$
	AOBLSS	#3,R8,50$

55$:	; ERROR - INVALID SWITCH
	MOVAB	INVSWMSG,OUTRAB+RAB$L_RBF	; ADDRESS OF MESSAGE
	MOVW	#INVSWMSGSZ,OUTRAB+RAB$W_RSZ	; SIZE OF MESSAGE
	BRB	90$			; OUTPUT MESSAGE

60$:	; HAVE NAME DESCRIPTOR IN R4,R5; SWITCH VALUE IN R8
	MOVAQ	DEVDESC,R1		; GET ADDRESS OF DEVICE DESCRIPTOR
	MOVQ	R4,(R1)			; COPY INFO. INTO DEVICE DESC.
	TSTL	R4			; IS LENGTH NON-ZERO?
	BNEQ	70$			; YES
	MOVAQ	DEFDEVDESC,R1		; NO, USE DEFAULT DESCRIPTOR

70$:	; ASSIGN A CHANNEL TO DEVICE
	$ASSIGN_S	DEVNAM = (R1),-	; DEVICE NAME
			CHAN = DEVCHAN	; CHANNEL
	BLBC	R0,80$			; ERROR

	; NOW SEND A REQUEST TO LOADER
	ADDL3	#1,R8,-(SP)		; PUSH MICROCODE TYPE
	PUSHAW	DEVCHAN			; PUSH CHANNEL ADDRESS
	CALLS	#2,LPA$$SNDLDRQ		; SEND LOAD REQUEST (& DEASSIGN CHANNEL)
	BLBS	R0,95$			; SUCCESS, REPROMPT

80$:	; USER ERROR IN R0 - GET MESSAGE
	$GETMSG_S	MSGID = R0,-			; MESSAGE ID
			MSGLEN = OUTRAB+RAB$W_RSZ,-	; PLACE TO STORE MSG LEN
			BUFADR = BUFFERDSC		; BUFFER DESCR.
	MOVAB	BUFFER,OUTRAB+RAB$L_RBF	; STORE BUFFER ADDRESS IN RAB

90$:	; OUTPUT ERROR MESSAGE
	$PUT	RAB = OUTRAB
	BLBC	R0,100$			; ERROR
95$:	BRW	10$			; SUCCESS - REPROMPT

98$:	; EXIT WITH SUCCESS
	MOVZWL	S^#SS$_NORMAL,R0

100$:	RET

	.SBTTL	CVTUPC - CONVERT LINE TO UPPER CASE
;++
;FUNCTIONAL DESCRIPTION:
;
;	THIS ROUTINE CONVERTS THE INPUT LINE TO UPPER CASE
;
; CALLING SEQUENCE:
;
;	BSBW
;
; INPUT PARAMETERS:
;
;	R0	CONTAINS SIZE OF LINE
;	R1	CONTAINS ADDRESS OF LINE
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; SIDE EFFECTS:
;
;	R0,R1 ARE NOT PRESERVED
;--

CVTUPC:	CMPB	(R1),#LOWER_A		; IS IT BEFORE LOWERCASE A?
	BLSSU	20$			; YES
	CMPB	(R1),#LOWER_Z		; IS IS AFTER LOWERCASE Z?
	BGTRU	20$			; YES
	BICB	#^X20,(R1)		; CLEAR LOWERCASE BIT
20$:	INCL	R1			; MOVE TO NEXT CHARACTER
	SOBGTR	R0,CVTUPC		; REPEAT
	RSB



	.END	START
