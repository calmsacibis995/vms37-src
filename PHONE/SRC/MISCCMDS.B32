%title 'MISCCMDS - Miscellaneous Phone Commands'
	module misccmds (
			ident='V03-003') = begin

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! Facility:	VAX/VMS Telephone Facility, Miscellaneous Phone Commands
!
! Abstract:	This module handles the following user commands:
!			EXIT		Exit the facility.
!			HELP		Provide help information.
!			DIRECTORY	Provide a list of people to call.
!			MAIL		Send phone message to someone.
!
!
! Environment:
!
! Author: Paul C. Anagnostopoulos, Creation Date: 20 November 1980
!
! Modified By:
!
!	V03-003	BLS0169		Benn Schreiber		12-Apr-1982
!		Fix error handling from lib$spawn call
!
!	V03-002	PCA0043		Paul Anagnostopoulos	26-Mar-1982
!		Remove DIRECTORY feature that shows if user is running
!		PHONE.  This required inswap of every process.
!
!	V03-001	PCA0042		Paul Anagnostopoulos	26-Mar-1982
!		Use LIB$SPAWN to fire up MAIL subprocess.
!--

%sbttl 'Module Declarations'
!
! Libraries and Requires:
!

library 'sys$library:starlet.l32';
library 'sys$library:tpamac.l32';
require 'phonereq';

!
! Table of Contents:
!

forward routine
	phn$exit_cmd: novalue,
	phn$exit_handler: novalue,
	phn$help_cmd: novalue,
	phn$help2: novalue,
	phn$directory_cmd: novalue,
	phn$directory2: novalue,
	phn$directory_line,
	phn$mail_cmd: novalue;

!
! External References:
!

external routine
	lbr$close: addressing_mode(general),
	lbr$get_help: addressing_mode(general),
	lbr$ini_control: addressing_mode(general),
	lbr$open: addressing_mode(general),
	lib$spawn: addressing_mode(general),
	lib$tparse: addressing_mode(general),
	phn$break_link,
	phn$term_characteristic,
	phn$estab_link,
	phn$inform,
	phn$kill_ctl,
	phn$make_ctl,
	phn$make_tsb,
	phn$prepare_users_target,
	phn$queue_smb,
	phn$read_slave,
	phn$scroll_line,
	phn$scroll_prep,
	phn$send_smb,
	scr$erase_page: addressing_mode(general);

external literal
	lib$_syntaxerr;

!
! Own Variables:
!
! The following is the head of the help save queue.  It is used by
! PHN$HELP_CMD and PHN$HELP2.

own
	help_save_head: vector[2,long]
			initial(rep 2 of (help_save_head));


%sbttl 'PHN$EXIT_CMD - Handle EXIT Command'
!++
! Functional Description:
!	This routine handles the EXIT command, which is used to exit
!	the facility.
!
! Formal Parameters:
!	none
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	none
!
! Side Effects:
!
!--


global routine phn$exit_cmd: novalue = begin


$exit(code=ss$_normal);

end;

%sbttl 'PHN$EXIT_HANDLER - Exit the Facility'
!++
! Functional Description:
!	This routine is the exit handler established by the initialization
!	routine.  It is called whenever the user exits, be it by the EXIT
!	command, CTRL/C, or CTRL/Y.  We have to hang up the phone, so
!	everyone we're talking to knows what's happening.
!
! Formal Parameters:
!	none
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	none
!
! Side Effects:
!
!--


global routine phn$exit_handler: novalue = begin

local
	p: ref pub, p2: ref pub;


! We begin by scanning the entire PUB chain (except our own) and hanging
! up on everyone.

p = ..phn$gq_pubhead[0];
until .p eqla phn$gq_pubhead do (
	p2 = .p[pub_l_flink];

	phn$break_link(.p,smb__hungup);

	p = .p2;
);

! Finally, we clear the screen so the user can start fresh in DCL.

scr$erase_page(1,1);
return;

end;

%sbttl 'PHN$HELP_CMD - Handle HELP Command'
!++
! Functional Description:
!	This routine handles the HELP command.  We get all the information
!	lines from the help library and store them in memory.  Then we
!	queue a steering message that will make us display the first
!	line.  Each line displayed then queues a message for the next
!	line.
!
! Formal Parameters:
!	parameters	Address of descriptor of the rest of the help
!			command as entered by the user.
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	none
!
! Side Effects:
!
!--


global routine phn$help_cmd(parameters): novalue = begin

bind
	parameters_dsc = .parameters: descriptor;

own
	topic_dsc: descriptor,
	subtopic_dsc: descriptor,
	tparse_block: block[tpa$k_length0,byte]
			initial(tpa$k_count0,
				tpa$m_abbrev);

own
	library_index: long,
	library_nam: $nam();

local
	status: long;

! The following is the parsing table used to parse the help parameters.
! We accept all of the standard VMS help parameter formats.

$init_state(help_state,help_key);

$state	(,
		(tpa$_eos,tpa$_exit),
		((topic),,,,topic_dsc)
	);
$state	(,
		(tpa$_eos,tpa$_exit),
		((topic),tpa$_exit,,,subtopic_dsc)
	);

$state	(topic,
		('/'),
		(tpa$_lambda)
	);
$state	(,
		('*'),
		(tpa$_symbol)
	);
$state	(,
		('.'),
		(tpa$_lambda,tpa$_exit)
	);
$state	(,
		('.')
	);
$state	(,
		('.',tpa$_exit)
	);

! This little routine is called by the librarian for each line it extracts
! from the help library.  We make a queue of these lines, using CTL buffers,
! so that we can display them later.

routine help_save(line) = begin

local
	c: ref ctl;

phn$make_ctl(.line,c);

insque(.c,.help_save_head[1]);
return ss$_normal;

end;

! We begin by parsing the help parameters.  If we get an error, just
! tell the user and quit.

ch$move(8,.parameters,tparse_block[tpa$l_stringcnt]);
ch$fill(0,8,topic_dsc);
ch$fill(0,8,subtopic_dsc);
status = lib$tparse(tparse_block,help_state,help_key);
if .status eqlu lib$_syntaxerr then (
	phn$inform(phn$_badhelp);
	return;
);
check (.status);

! Now we initialize the librarian control and open the help library.

status = lbr$ini_control(library_index,%ref(lbr$c_read),%ref(lbr$c_typ_hlp),library_nam);
check (.status);
status = lbr$open(library_index,describe('PHONEHELP'),0,describe('SYS$HELP:.HLB'));
if not .status then (
	phn$inform(phn$_helpmissing);
	return;
);

! Now we read in the help information requested by the user.  For each
! line, help_save will be called to save it in memory.

status = lbr$get_help(library_index,0,help_save,0,topic_dsc,subtopic_dsc);
check (.status);
status = lbr$close(library_index);
check (.status);

! Now tell the user how to cancel the help information.

phn$inform(phn$_helpcan);

! Set the "scrolling in progress" and "must prepare for scrolling" flags
! so the steering message routine will know what's happening.

phn$gv_scroller = phn$gv_scrollprep = true;

! Finally, queue a steering message to display the first help line.

phn$queue_smb(smb__help2);
return;

end;

%sbttl 'PHN$HELP2 - Display a Help Line'
!++
! Functional Description:
!	This steering message routine is called to display the next
!	help line from the help queue.  We do each line with a steering
!	message so that other things can happen in between each line.
!
! Formal Parameters:
!	none
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	none
!
! Side Effects:
!
!--


global routine phn$help2: novalue = begin

local
	c: ref ctl;


! First we check to see if the help command has been cancelled.  If so
! we remove all remaining help lines from the help queue and throw 
! them away.

if not .phn$gv_scroller then (
	while not remque(.help_save_head[0],c) do
		phn$kill_ctl(.c);
	return;
);

! If this is the first help line displayed, we need to prepare the
! screen by clearing most of it.

if .phn$gv_scrollprep then (
	phn$scroll_prep();
	phn$gv_scrollprep = false;
);

! Now we remove the next help line from the queue and display it on the
! screen.  If there are more lines, we need to queue another steering message.

if remque(.help_save_head[0],c) eqlu 0 then
	phn$queue_smb(smb__help2);
phn$scroll_line(c[ctl_q_line]);
phn$kill_ctl(.c);

return;

end;

%sbttl 'PHN$DIRECTORY_CMD - Provide a List of Users'
!++
! Functional Description:
!	This routine handles the DIRECTORY command, which provides a list of
!	users that we could call, not unlike the phone book.
!
! Formal Parameters:
!	node		Address of descriptor of the node we want to list.
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	none
!
! Side Effects:
!
!--


global routine phn$directory_cmd(node): novalue = begin

bind
	node_dsc = .node: descriptor;

local
	status: long,
	node_tsb: tsb;
local
	local_described_buffer(prepared_node,nam$c_maxrss);


! We begin by preparing the node name specified by the user.  This gets
! it ready for use in generating the directory.

phn$prepare_users_target(node_dsc,true,prepared_node);

! Now we make a TSB in order to parse the node name.  If we get a syntax
! error, or if the user included a user name with the node name, we
! tell the user and quit.

status = phn$make_tsb(prepared_node,node_tsb);
if .status nequ phn$_ok then (
	phn$inform(.status);
	return;
);
if .node_tsb[tsb_v_user] then (
	phn$inform(phn$_onlynode);
	return;
);

! Now we have to set up so that we can display the first directory line.
! This is dependent upon whether it's a local or remote directory.

begin
local
	local_described_buffer(pub_address,4);

if not .node_tsb[tsb_v_remote] then

	! It's a local directory.  Queue a steering message to do the first
	! line.  We pass a pub address of zero, meaning "local directory".

	.pub_address[ptr] = 0
else (

	! It's a remote directory.  Queue a steering message to do the first
	! line, containing the address of a temporary PUB describing the node.

	status = phn$estab_link(prepared_node,.pub_address[ptr]);
	if .status nequ phn$_ok then (
		phn$inform(.status);
		return;
	);
);
phn$queue_smb(smb__directory2,pub_address);
end;
	


! Ok, we're pretty much done.  We need to tell the user how to cancel
! the directory.  We also need to set the "scrolling in progress" and
! "must prepare scrolling" flags so the steering routine will know what's up.

phn$inform(phn$_dircan);

phn$gv_scroller = phn$gv_scrollprep = true;

return;

end;

%sbttl 'PHN$DIRECTORY2 - Display Directory Line'
!++
! Functional Description:
!	This steering message routine is called to display the next line
!	of directory information.  This is done one at a time with steering
!	messages so that other things can happen in between.
!
! Formal Parameters:
!	pub_address	If it's a local directory, this is zero.  If it's 
!			remote, it's the address of a PUB describing the node.
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	none
!
! Side Effects:
!
!--


global routine phn$directory2(pub_address): novalue = begin

bind
	pub_address_dsc = .pub_address: descriptor,
	np = .pub_address_dsc[ptr]: ref pub;

own
	wild_pid: long,
	person_count: long;

local
	status: long,
	decnet_iosb: block[8,byte];
local
	local_described_buffer(display_line,79);


! First we check to see if the directory has been cancelled.  If so, quit.
! If it's a remote directory, though, make sure we break the link.

if not .phn$gv_scroller then (
	if .np neqa 0 then
		phn$break_link(.np,smb__slave_done);
	return;
);

! If this is the first line of the directory, we need to prepare the screen
! by clearing most of it and displaying some headings.  Zero person count.

if .phn$gv_scrollprep then (
	phn$scroll_prep(describe(
	    'Process Name    User Name       Terminal        Phone Status'));
	wild_pid = -1;
	person_count = 0;
	phn$gv_scrollprep = false;
);

! Now we split up depending on whether it's a local or remote directory.

if .np eqla 0 then (

	! It's a local directory.  Get the next directory line, if it exists.

	status = phn$directory_line(wild_pid,display_line);
	status = .status eqlu phn$_ok;
) else (

	! It's a remote directory.  Send a steering message to the network
	! slave asking it for a line.  Get the line.  If its length is zero,
	! we're done with the directory.

	phn$send_smb(.np,smb__directory2);
	status = phn$read_slave(.np[pub_w_channel],display_line,false);
	status = .status eqlu phn$_ok and .display_line[len] gtru 0;
	if not .status then
		phn$break_link(.np,smb__slave_done);
);

! Let's see what happened with that directory line.

if .status then (

	! We got one.  Scroll it onto the screen and queue a steering message
	! so we'll be recalled to do the next line.

	phn$scroll_line(display_line);
	inc (person_count);
	phn$queue_smb(smb__directory2,pub_address_dsc);

) else (

	! There wasn't another line.  Tell the user how many people were
	! listed and quit.

	phn$scroll_line(describe(''));
	display_line[len] = 79;
	status = $fao(describe('!UL person!%S listed.'),
		      display_line,
		      display_line,
		      .person_count);
	check (.status);
	phn$scroll_line(display_line);
);

return;

end;

%sbttl 'PHN$DIRECTORY_LINE - Build a Directory Line'
!++
! Functional Description:
!	This routine is called to build a directory line for displaying.
!	It uses the wild PID to obtain the next available process, and
!	then obtains information from the process for the line.
!
! Formal Parameters:
!	wild_pid	Address of a longword wild PID.  Must be initialized
!			to -1 at the beginning.
!	line_buf	Address of a descriptor of a display line buffer.
!			We fill in the length.
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	phn$_noproc	No more processes to display.
!
! Side Effects:
!
!--


global routine phn$directory_line(wild_pid,line_buf) = begin

own
	own_described_buffer(process_name,16),
	own_described_buffer(user_name,12),
	own_described_buffer(terminal_number,7),
	parent_pid: long;

bind
	get_info = uplit(word(16),word(jpi$_prcnam),
			 long(process_name+8),
			 long(process_name),
			 word(12),word(jpi$_username),
			 long(user_name+8),
			 long(user_name),
			 word(7),word(jpi$_terminal),
			 long(terminal_number+8),
			 long(terminal_number),
			 word(4),word(jpi$_owner),
			 long(parent_pid),
			 long(0),
			 long(0));

local
	status: long,
	terminal_ptr: ref descriptor,
	phone_status_ptr: ref descriptor;


! We obtain information about the next process using the wildcard $GETJPI
! facility.  If we get a bad status, or if the process does not own a terminal
! (isn't interactive), then just try the next one.  Also, we don't display
! subprocesses.

do (
	status = $getjpi(efn=phn$k_getjpiefn,
			 pidadr=.wild_pid,
			 itmlst=get_info);
	if .status eqlu ss$_nomoreproc then
		return phn$_noproc;

) until (.status eqlu ss$_normal) and (.terminal_number[len] nequ 0) and (.parent_pid eqlu 0);

$waitfr(efn=phn$k_getjpiefn);

! OK, now we split up depending upon whether the process' terminal can
! be used as a telephone.

if phn$term_characteristic(terminal_number,tt$m_scope) then (

	! This process has a nice terminal.  We will display its number.

	terminal_ptr = terminal_number;

	! The phone status is determined by whether or not the person
	! has set /NOBROADCAST to unplug the phone.

	phone_status_ptr =	(if phn$term_characteristic(terminal_number,tt$m_nobrdcst) then
					describe('/nobroadcast')
				else
					describe('available'));

) else (

	! As it turns out, the guy's terminal is useless.  Set up to
	! display that.

	terminal_ptr = describe('unusable');
	phone_status_ptr = describe('---');
);

! Now we use $FAO to build the directory line to be displayed.  It contains
! the process name, user name, terminal info, and phone status info.
! Display the line.

status = $fao(describe('!16<!AF!>!16<!AS!>!16<!AS!>!AS'),
	      .line_buf,
	      .line_buf,
	      .process_name[len],
	      .process_name[ptr],
	      user_name,
	      .terminal_ptr,
	      .phone_status_ptr);
check (.status);

return phn$_ok;

end;

%sbttl 'PHN$MAIL_CMD - Handle MAIL Command'
!++
! Functional Description:
!	This routine handles the MAIL command, which is used to send
!	a short phone message to another user.  We will spawn a subprocess
!	to send the message with the MAIL utility.
!
! Formal Parameters:
!	parameters	The rest of the command line as entered by the user.
!			It is assumed to be in the following form:
!				addressee "message["]
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	none
!
! Side Effects:
!
!--


global routine phn$mail_cmd(parameters): novalue = begin

bind
	parameters_dsc = .parameters: descriptor;

local
	status_1 : block[4,byte],
	status_2 : block[4,byte],
	char_ptr: long,
	message_dsc: descriptor;


! We begin by rebuilding the parameters descriptor so it describes only
! the addressee.  Then we build a new descriptor, message_dsc, to describe
! the phone message text.

char_ptr = ch$find_ch(.parameters_dsc[len],.parameters_dsc[ptr],'"');
if .char_ptr eqla 0 then (
	phn$inform(phn$_badmailcmd);
	return;
);
message_dsc[len] = .parameters_dsc[len] - (.char_ptr - .parameters_dsc[ptr]);
parameters_dsc[len] = .char_ptr - .parameters_dsc[ptr];
if .parameters_dsc[len] eqlu 0 then (
	phn$inform(phn$_badmailcmd);
	return;
);

message_dsc[ptr] = .char_ptr + 1;
char_ptr = ch$find_ch(.message_dsc[len]-1,.message_dsc[ptr],'"');
message_dsc[len] = (if .char_ptr eqla 0 then .message_dsc[len] - 1
					else .char_ptr - .message_dsc[ptr]);

! Put out a prompt so the user knows it's gonna take a while to send
! this bloody message.

phn$inform(phn$_sendingmail);

! Now we can create a subprocess to mail the message to the addressee.
! This is done using LIB$SPAWN.

begin
local
	local_described_buffer(command_buf,128);

ch$copy(30,uplit byte('MAIL/SUBJECT="PHONE Message:  '),
	.message_dsc[len],.message_dsc[ptr],
	6,uplit byte('" NL: '),
	.parameters_dsc[len],.parameters_dsc[ptr],
		' ',.command_buf[len],.command_buf[ptr]);
status_2 = lib$spawn(command_buf,0,0,%ref(%b'010'),0,0,status_1);
end;
		
! If we encountered a problem, tell the user about it.  Otherwise just
! clear away the prompt.

phn$inform((if not .status_2			!Report lib$spawn error
		    and not .status_2[sts$v_inhib_msg]
		then .status_2
		else if not .status_1		!or error from mail
			and not .status_1[sts$v_inhib_msg] ! unless inhibited
		    then .status_1
		    else 0));

return;

end;

end eludom
