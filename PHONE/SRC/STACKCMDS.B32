%title 'STACKCMDS - Stacking Commands'
	module stackcmds (
			ident='V03-001') = begin

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! Facility:	VAX/VMS Telephone Facility, Stacking Commands
!
! Abstract:	This module handles the following PHONE commands:
!			HOLD	Put people on hold.
!			UNHOLD	Take people off of hold.
!
!
! Environment:
!
! Author: Paul C. Anagnostopoulos, Creation Date: 11 November 1980
!
! Modified By:
!
!	V03-001	PCA0047		Paul Anagnostopoulos	26-Mar-1982
!		Minor changes to convert from process name to user name.
!--

%sbttl 'Module Declarations'
!
! Libraries and Requires:
!

library 'sys$library:starlet.l32';
require 'phonereq';

!
! Table of Contents:
!

forward routine
	phn$hold_cmd: novalue,
	phn$held: novalue,
	phn$unhold_cmd: novalue,
	phn$unheld: novalue;

!
! External References:
!

external routine
	phn$break_link,
	phn$cmp_target,
	phn$conversing,
	phn$fresh_hold,
	phn$fresh_screen,
	phn$inform,
	phn$make_tsb,
	phn$send_smb;

!
! Own Variables:
!

%sbttl 'PHN$HOLD_CMD - Handle HOLD Command'
!++
! Functional Description:
!	This routine handles the HOLD command.  This command is used to
!	put all of the people currently engaged in conversation on hold.
!
! Formal Parameters:
!	none
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	none
!
! Side Effects:
!
!--


global routine phn$hold_cmd: novalue = begin

local
	p: ref pub;


! First we check to see if we're talking to someone.  If not, that's an error.

if not phn$conversing() then (
	phn$inform(phn$_notconv);
	return;
);

! How we scan the PUB chain and adjust the hold status of each person.
! There are two cases:
!	1.	The person is already on hold.  We decrement their hold depth
!		so that they are on a deeper hold.
!	2.	We are talking to the person or they have us on hold.
!		Now they are on hold, and we have to send them a message to
!		that effect.  Also update the viewport flags.

p = ..phn$gq_pubhead[0];
until .p eqla phn$gq_pubhead do (
	if not .p[pub_v_temporary] then
		if dec (p[pub_w_depth]) eql -1 then (
			phn$send_smb(.p,smb__held);
			p[pub_v_uhaveheld] = true;
			phn$fresh_hold(.p);
		);
	p = .p[pub_l_flink];
);

return;

end;

%sbttl 'PHN$HELD - Handle Held Steering Message'
!++
! Functional Description:
!	This steering message routine handles the held message, which someone
!	sends us when they put us on hold.  We have to record the fact
!	that we are on hold.
!
! Formal Parameters:
!	from_msg	The address of a descriptor of the node/user name
!			spec of the person putting us on hold.  It is
!			followed by an eofrom character.
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	none
!
! Side Effects:
!
!--


global routine phn$held(from_msg): novalue = begin

bind
	from_msg_dsc = .from_msg: descriptor;

local
	status: long,
	from_tsb: tsb,
	p: ref pub;


! We begin by adjusting the message descriptor to exclude the eofrom character
! and making a TSB to parse the person's spec.

dec (from_msg_dsc[len]);
status = phn$make_tsb(from_msg_dsc,from_tsb);
check (.status);

! Now we scan the PUB chain, looking for the PUB representing this person.
! If we find one, we set the "they have us held" flag.

p = ..phn$gq_pubhead[0];
until .p eqla phn$gq_pubhead do (
	if (not .p[pub_v_temporary]) and
	   (not .p[pub_v_hasuheld])	 then

		if phn$cmp_target(p[pub_b_tsb],from_tsb) then (
			p[pub_v_hasuheld] = true;
			phn$fresh_hold(.p);
		);

	p = .p[pub_l_flink];
);

return;

end;

%sbttl 'PHN$UNHOLD_CMD - Handle UNHOLD Command'
!++
! Functional Description:
!	This routine handles the UNHOLD command, which is used to bring
!	people off of hold.  THe hold stack is effectively popped, bringing
!	the last group of held people back to life.  People currently in
!	the conversation are hung up on.
!
! Formal Parameters:
!	none
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	none
!
! Side Effects:
!
!--


global routine phn$unhold_cmd: novalue = begin

local
	unholdable: byte,
	p: ref pub, p2: ref pub;


! We want to make sure that there is at least one person on hold.
! Otherwise the command should be ignored.  Just scan the PUB chain
! looking for someone on hold.

unholdable = false;
p = ..phn$gq_pubhead[0];
until .p eqla phn$gq_pubhead do (
	if not .p[pub_v_temporary] and .p[pub_v_uhaveheld] then (
		unholdable = true;
		exitloop;
	);

	p = .p[pub_l_flink];
);

! If no one was on hold, tell the user and forget it.

if not .unholdable then (
	phn$inform(phn$_noholds);
	return;
);

! Now we scan the PUB chain and act on each PUB.  There are three cases:
!	1.	The person is down two or more hold levels.  The person
!		remains on hold, but at a shallower depth.
!	2.	The person is down one hold level.  They are brought off of
!		hold status.
!	3.	The person is currently being talked to.  They are hung up on.

p = ..phn$gq_pubhead[0];
until .p eqla phn$gq_pubhead do (
	p2 = .p[pub_l_flink];		! In case we delete PUB.

	if not .p[pub_v_temporary] then
		selectone inc (p[pub_w_depth]) of set
		[0]:		(phn$send_smb(.p,smb__unheld);
				p[pub_v_uhaveheld] = false;);

		[1]:		phn$break_link(.p,smb__hungup);
		tes;

	p = .p2;
);

! We have to recalculate the viewports and refresh the screen.

phn$fresh_screen(false);

return;

end;

%sbttl 'PHN$UNHELD - Handle Unheld Message'
!++
! Functional Description:
!	This steering message routine handles the unheld message, which is sent
!	to us when someone brings us off hold.  We have to clear the flag
!	that says we are held.
!
! Formal Parameters:
!	from_msg		Address of descriptor of string containing
!				the node/user name of the sender.  It is
!				followed by an eofrom character.
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	none
!
! Side Effects:
!
!--


global routine phn$unheld(from_msg): novalue = begin

bind
	from_msg_dsc = .from_msg: descriptor;

local
	status: long,
	from_tsb: tsb,
	p: ref pub;


! We begin by adjusting the message descriptor to exclude the eofrom character
! and making a TSB to parse the person's spec.

dec (from_msg_dsc[len]);
status = phn$make_tsb(from_msg_dsc,from_tsb);
check (.status);

! Now we scan the PUB chain, looking for the PUB representing this person.
! If we find one, we clear the "they have us held" flag.

p = ..phn$gq_pubhead[0];
until .p eqla phn$gq_pubhead do (
	if (not .p[pub_v_temporary]) and
	       .p[pub_v_hasuheld]	then

		if phn$cmp_target(p[pub_b_tsb],from_tsb) then (
			p[pub_v_hasuheld] = false;
			phn$fresh_hold(.p);
		);
	p = .p[pub_l_flink];
);

return;

end;

end eludom
