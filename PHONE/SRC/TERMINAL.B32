%title 'TERMINAL - Terminal Handling Routines'
	module terminal (
			ident='V03-001') = begin

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! Facility:	VAX/VMS Telephone Facility, Terminal Handling Routines
!
! Abstract:	This module provides all of the routines necessary to 
!		handle the user's terminal.  This includes both the
!		keystroke handling routines and the screen formatting
!		functions.
!
!
! Environment:	We do not check the status returns from RTL screen package
!		routines.  This saves code and time.
!
! Author: Paul C. Anagnostopoulos, Creation Date: 24 November 1980
!
! Modified By:
!
!	V03-001	PCA0048		Paul Anagnostopoulos	26-Mar-1982
!		Minor changes to convert from process name to user name.
!--

%sbttl 'Module Declarations'
!
! Libraries and Requires:
!

library 'sys$library:starlet.l32';
require 'phonereq';

!
! Table of Contents:
!

forward routine
	phn$init_term,
	phn$term_characteristic,
	phn$kbd_enable: novalue,
	phn$kbd_get: novalue,
	phn$fresh_screen,
	phn$inform: novalue,
	phn$review,
	phn$fresh_view: novalue,
	phn$fresh_hold: novalue,
	phn$show_text: novalue,
	phn$scroll_prep: novalue,
	phn$scroll_line: novalue;

!
! Macro Definitions:
!
!
! This macro is used in PHN$SHOW_TEXT to add a new CTL to a PUB.

macro add_new_ctl(text) =
(	phn$make_ctl(text,c);
	insque(.c,dp[pub_q_ctlhead0]);
	inc (dp[pub_l_ctlcount]);
	latest_line_dsc = c[ctl_q_line];
)
%;

!
! External References:
!

external routine
	phn$make_ctl,
	phn$queue_smb,
	scr$erase_line: addressing_mode(general),
	scr$erase_page: addressing_mode(general),
	scr$put_buffer: addressing_mode(general),
	scr$put_line:   addressing_mode(general),
	scr$put_screen: addressing_mode(general),
	scr$set_buffer: addressing_mode(general),
	scr$set_cursor: addressing_mode(general),
	scr$set_scroll:	addressing_mode(general);

!
! Own Variables:
!

! The following variable contains the terminal channel number for obtaining
! keystrokes:

own
	terminal_channel: word;

! The following variable is the current position on the command line.

own
	command_line_pos: long;

! We need a line of dashes.  No point in wasting space with lots of them.

bind
	dashes = describe('-------------------------------------------------------------------------------');

%sbttl 'PHN$INIT_TERM - Initialize Users Terminal'
!++
! Functional Description:
!	This routine is called at initialization to prepare the user's
!	terminal.  This includes checking for valid terminal type, channel
!	assignment, and initial formatting of the screen.
!
! Formal Parameters:
!	none
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	phn$_badterm	Cannot use this type of terminal as a phone.
!
! Side Effects:
!
!--


global routine phn$init_term = begin

local
	status: long;
local
	local_described_buffer(terminal_number,64);


! We begin by determining the user's SYS$INPUT device.  We will need to
! read keystrokes from it.  Make sure it's a device we can use.

status = $trnlog(lognam=describe('SYS$INPUT'),
		 rsllen=terminal_number,
		 rslbuf=terminal_number);
check (.status);
if ch$rchar(.terminal_number[ptr]) eqlu escape then (
	terminal_number[len] = .terminal_number[len] - 4;
	terminal_number[ptr] = .terminal_number[ptr] + 4;
);
if not phn$term_characteristic(terminal_number,tt$m_scope) then
	return phn$_badterm;

! Now we can assign to the user's terminal.  This channel will be used
! for reading keystrokes, but not for output.

status = $assign(devnam=terminal_number,
		 chan=terminal_channel);
check (.status);

! Now we have to clear the half-duplex bit in the terminal characteristics.
! This is because we have to share the terminal with the RTL screen package.

begin
local
	terminal_chars: block[8,byte];
bind
	device_info = terminal_chars[4,0,32,0]: block[4,byte];

status = $qiow(chan=.terminal_channel,
	       func=io$_sensemode,
	       p1=terminal_chars);
check (.status);
device_info[tt$v_halfdup] = false;
status = $qiow(chan=.terminal_channel,
	       func=io$_setmode,
	       p1=terminal_chars);
check (.status);
end;

! Put up the initial screen layout.

phn$fresh_screen(true);

! Finally, we enable the keyboard so the user can enter a command.

phn$kbd_enable();
return phn$_ok;

end;

%sbttl 'PHN$TERM_CHARACTERISTIC - Get a Terminal Characteristic'
!++
! Functional Description:
!	This routine is called to get one of the characteristic bits
!	for the specified terminal.  These bits specify various features
!	of the terminal.
!
! Formal Parameters:
!	terminal_number		Address of descriptor of terminal number.
!	mask			Mask for characteristic bit.
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	True if characteristic bit is set, false if clear.
!
! Side Effects:
!
!--


global routine phn$term_characteristic(terminal_number,mask) = begin

local
	status: long;
local
	local_described_buffer(dib_buffer,12);


! First we obtain the device information in a buffer long enough to contain
! the device dependent characteristics.

status = $getdev(devnam=.terminal_number,
		 pribuf=dib_buffer);
if .status nequ ss$_nonlocal then
	check (.status);

! Now we can check the requested bit and return true or false.

begin
bind
	dib = .dib_buffer[ptr]: block[,byte];

return (.dib[dib$l_devdepend] and .mask) nequ 0;

end;
end;

%sbttl 'PHN$KBD_ENABLE - Enable Keyboard for Input'
!++
! Functional Description:
!	This routine is called to enable the keyboard to interrupt
!	us with input.  We use an AST to inform us of pending input.
!	The AST routine sets up to read the input.
!
! Formal Parameters:
!	none
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	none
!
! Side Effects:
!
!--


global routine phn$kbd_enable: novalue = begin

own
	terminal_iosb: block[8,byte],
	own_described_buffer(single_key,1);

local
	status;


! The AST routine reads the pending keystroke and passes it along to a
! steering message routine.  The steering routine then flushes all
! outstanding keystrokes at the time it is called,  thus causing us to
! "batch" the keystrokes.  It is hoped that the delay caused by this scheme
! will be proportional to the system load.

routine kbd_ast: novalue = begin

check (.terminal_iosb[0,0,16,0]);

phn$queue_smb(smb__kbd_get,single_key);
return;

end;

! To enable the keyboard, we do a read for a single keystroke, with AST
! to be delivered when it comes in.  Note that we specify no terminators.

status = $qio(efn=phn$k_kbdefn,
	      chan=.terminal_channel,
	      func=io$_readvblk + io$m_noecho + io$m_nofiltr,
	      iosb=terminal_iosb,
	      astadr=kbd_ast,
	      p1=single_key+8,
	      p2=1,
	      p3=uplit long(0,0));
check (.status);

return;

end;

%sbttl 'PHN$KBD_GET - Get All Outstanding Keystrokes'
!++
! Functional Description:
!	This steering message routine is invoked when the user has typed
!	a key at the terminal.  It collects any additional keystrokes
!	from the typeahead buffer and queues them in a batch to the
!	input interpreter.
!
! Formal Parameters:
!	single_key	The address of a descriptor of the single keystroke
!			that started this mess.
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	none
!
! Side Effects:
!
!--


global routine phn$kbd_get(single_key): novalue = begin

bind
	single_key_dsc = .single_key: descriptor;

local
	status: long,
	terminal_iosb: block[8,byte];
local
	local_described_buffer(input,80);


! We begin by moving the single key that was passed to us into our input
! buffer.

ch$move(1,.single_key_dsc[ptr],.input[ptr]);

! Now we can flush the typeahead buffer and add it to our input buffer,
! forming a batch of characters.  NOTE that we specify no terminators.

status = $qiow(efn=phn$k_kbdefn,
	       chan=.terminal_channel,
	       func=io$_readvblk + io$m_noecho + io$m_nofiltr + io$m_timed,
	       iosb=terminal_iosb,
	       p1=.input[ptr]+1,
	       p2=79,
	       p3=0,
	       p4=uplit long(0,0));
check (.status);
if .terminal_iosb[0,0,16,0] nequ ss$_timeout then
	check (.terminal_iosb[0,0,16,0]);

! Fill in the character count in the input buffer and queue a steering
! message to route the input.

input[len] = 1 + .terminal_iosb[2,0,16,0];
phn$queue_smb(smb__kbd_route,input);

! Re-enable the keyboard for further input.

phn$kbd_enable();
return;

end;

%sbttl 'PHN$FRESH_SCREEN - Refresh the Screen'
!++
! Functional Description:
!	This routine is called to refresh part or all of the screen, as
!	specified by the parameter.
!
! Formal Parameters:
!	top_too		If false, we refresh the viewports.  If true, we
!			also refresh the top four lines.
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	phn$_noports	Too many viewports required for active people.
!
! Side Effects:
!
!--


global routine phn$fresh_screen(top_too) = begin

local
	status: long,
	p: ref pub;


! If a scrolling-type command is in progress (e.g., HELP), then we can't
! refresh or we'll clobber whatever is being scrolled.

if .phn$gv_scroller then
	return phn$_ok;

! We begin by recalculating the viewport parameters to assign all active
! participants a viewport.  If this cannot be done, we return an error
! status without touching the screen.

status = phn$review();
if .status nequ phn$_ok then
	return .status;

! If we are to refresh the top four lines of the screen, then do it.
! This includes a heading, today's date, the switch hook character on the
! command line, and a line of dashes.

if .top_too then (
	scr$erase_page(1,1);

	scr$put_screen(describe(' VAX/VMS Phone Facility '),1,28,%b'0010');

	begin
	local
		local_described_buffer(todays_date,11);

	$asctim(timbuf=todays_date);
	scr$put_screen(todays_date,1,69);
	end;

	scr$put_screen(phn$gq_switch_hook,2,1);
	command_line_pos = 2;

	scr$put_screen(dashes,4,1);
);

! Now we can display the viewports.  We scan the PUB chain and find each
! PUB that has a viewport assigned.  These viewports are displayed.

scr$erase_page(5,1);

p = .phn$gq_pubhead[0];
until .p eqla phn$gq_pubhead do (
	if .p[pub_w_viewsize] nequ 0 then
		phn$fresh_view(.p,true,true);

	p = .p[pub_l_flink];
);

return phn$_ok;

end;

%sbttl 'PHN$INFORM - Display Message to User'
!++
! Functional Description:
!	This routine is called to display a message to the user.  All messages
!	are defined in the message file and referenced by status codes.
!	$FAO arguments can also be passed, and they will be filled into
!	the message text.
!
! Formal Parameters:
!	status_code	The message status code.  Zero means to clear the line.
!	fao1...		Zero or more $FAO arguments to be filled in.
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	none
!
! Side Effects:
!
!--


global routine phn$inform(status_code,fao1): novalue = begin

local
	status: long,
	byte_array: vector[4,byte],
	msg_text_ptr: ref descriptor;

builtin
	actualcount,
	nullparameter;


! If a scrolling-type command (e.g., HELP) is in progress, we can't display
! the message.  However, we will ring the bell to tell the user something's up.

if .phn$gv_scroller then (
	scr$put_screen(describe(%char(bell)));
	return;
);

! Now, if we are only to clear the message line, do it.

if nullparameter(1) then (
	scr$erase_line(3,1);
	return;
);

! Now we can obtain the message text and fill in the $FAO arguments.  If
! the message was not defined with enough $FAO codes, we don't fill anything
! into it.

begin
local
	local_described_buffer(msg_buf,79);

status = $getmsg(msgid=.status_code,
		 msglen=msg_buf,
		 bufadr=msg_buf,
		 flags=%b'0001',
		 outadr=byte_array);
check (.status);
msg_text_ptr = msg_buf;

begin
local
	local_described_buffer(fao_buf,79);

if actualcount() gtr .byte_array[1] then (
	status = $faol(ctrstr=msg_buf,
		       outlen=fao_buf,
		       outbuf=fao_buf,
		       prmlst=fao1);
	check (.status);
	msg_text_ptr = fao_buf;
);

! Now we can clear the message line and display the message text.

scr$erase_line(3,1);
scr$put_screen(.msg_text_ptr);
end;
end;

! Set the flag that says there's a message on the message line.

phn$gv_message = true;

return;
	
end;

%sbttl 'PHN$REVIEW - Recalculate Viewport Parameters'
!++
! Functional Description:
!	This routine is called to recalculate the viewport parameters
!	in each of the existing PUBs.
!
! Formal Parameters:
!	none
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	phn$_noports	There is not enought room on the screen for all
!			required viewports.
!
! Side Effects:
!
!--


global routine phn$review = begin

local
	active_count: long, held_count: long,
	viewport_size: long, viewport_line: long,
	p: ref pub;

literal
	max_viewports = 20/pub_k_minlines;


! First we have to scan all the PUBs and make two counts:  the number of
! PUBs we don't have on hold and the number we do have on hold.

active_count = held_count = 0;
p = .phn$gq_pubhead[0];
while .p neqa phn$gq_pubhead do (
	if not .p[pub_v_temporary] then
		if .p[pub_v_uhaveheld] then
			inc (held_count)
		else
			inc (active_count);

	p = .p[pub_l_flink];
);

! We need a viewport for at least all the active units.  Make sure the
! required viewports won't be too small.

if .active_count gtr max_viewports then
	return phn$_noports;

! Although we need a viewport for all the active units, we may also be
! able to accomodate some of the held units.  Calculate how many of them
! we can accomodate.

held_count = min(.held_count,
		 max_viewports - .active_count);

! Now we know how many viewports we will assign.  Calculate how many lines
! in each viewport, but make sure it's not above the limit set by the user.

viewport_size = minu(20/(.active_count+.held_count),
		     .phn$gl_viewport_size);

! Now we can make another pass through the PUBs and assign viewport
! parameters to all active PUBs and however many held PUBs we can
! accomodate.

viewport_line = 5;
p = .phn$gq_pubhead[0];
until .p eqla phn$gq_pubhead do (
	if not .p[pub_v_temporary] then

		if .p[pub_v_uhaveheld] and
		   (dec (held_count) lss 0) then

			p[pub_w_viewsize] = p[pub_w_viewline] = 0
		else (
			p[pub_w_viewsize] = .viewport_size;
			p[pub_w_viewline] = .viewport_line;
			viewport_line = .viewport_line + .viewport_size;
		);

	p = .p[pub_l_flink];
);

return phn$_ok;

end;

%sbttl 'PHN$VIEW_GOODIES - Calculate Viewport Information'
!++
! Functional Description:
!	This routine is called to calculate various information about a
!	viewport.  The information that it returns is determined by the
!	parameters.
!
! Formal Parameters:
!	goodies_pub	The address of the PUB describing the viewport.
!
!	cursor_pos	The address of a vector of 2 longwords.  We return
!			the line and column numbers specifying the current
!			position of the cursor.
!
!	line_numbers	The address of a longword vector.  We return the line
!			numbers of the text lines in the viewport.  The zeroth
!			entry contains the line with the latest CTL.
!
!	text_dscs	The address of a longword vector.  We return the
!			address of the descriptor of the text to go on the line
!			specified in the corresponding line_numbers entry.
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	none
!
! Side Effects:
!
!--


global routine phn$view_goodies(goodies_pub,cursor_pos,line_numbers,text_dscs):
							novalue = begin

bind
	gp = .goodies_pub: pub;

bind
	latest_ctl = .gp[pub_q_ctlhead0]: ctl,
	latest_text_dsc = latest_ctl[ctl_q_line]: descriptor;

local
	latest_line: long,
	text_count: long,
	c: ref ctl;

builtin
	nullparameter;


! First let's get some terminology straight:
!
!	oldest CTL	The CTL at the end of the CTL list.  It is the CTL
!			representing the oldest line of the conversation.
!
!	latest CTL	The CTL at the front of the CTL list.  It represents
!			the current line of the conversation.
!
!	top CTL		The CTL representing the line that would be at the
!			top of the viewport if the viewport were infinitely
!			large.  Usually the oldest CTL, but not if the user
!			has typed a CTRL/L.

! We begin by calculating the line on which the latest CTL text should be
! placed.  There are two algorithms.

if .phn$gb_scroll then

	! If we are scrolling, then the latest CTL goes on the bottom line
	! of the viewport, unless we are not very many CTLs from the top.

	latest_line = .gp[pub_w_viewline] + 1 +
		      minu(.gp[pub_w_viewsize] - 3,
			   .gp[pub_l_ctlcount] - .gp[pub_l_topctl])

else

	! If we are wrapping, then the latest CTL goes on a line determined
	! by the number of lines from the top MOD the size of the viewport.

	latest_line = .gp[pub_w_viewline] + 1 +
		      (.gp[pub_l_ctlcount] - .gp[pub_l_topctl]) mod
			      (.gp[pub_w_viewsize] - 2);

! Now if the caller wants to know the current position, fill it in.

if not nullparameter(2) then (
	bind
		cursor_pos_array = .cursor_pos: vector[2,long];

	cursor_pos_array[0] = .latest_line;
	cursor_pos_array[1] = .latest_text_dsc[len] + 1;
);

! Now if the caller only wanted to know the current position, we're done.

if nullparameter(3) or nullparameter(4) then
	return;

! We are to fill in the line number and text descriptor arrays.
! Now we calculate how many text lines we will display in the viewport.
! This is equal to the number of text lines in the viewport, unless we
! are fewer than that from the top.

text_count = minu(.gp[pub_l_ctlcount] - .gp[pub_l_topctl] + 1,
		  .gp[pub_w_viewsize] - 2);

! Now we will fill in as many array entries as there are lines in the
! viewport.  Each line number entry gets the corresponding viewport line
! number.  Each text descriptor either gets the address of a descriptor
! from a CTL, or the address of a null descriptor if the line is to be
! blanked.

begin
bind
	line_numbers_array = .line_numbers: vector[pub_k_maxlines-2,long],
	text_dscs_array = .text_dscs: vector[pub_k_maxlines-2,long];

c = latest_ctl;
incru i from 0 to .gp[pub_w_viewsize]-2-1 do (
	line_numbers_array[.i] = .latest_line;
	dec (latest_line);
	if .latest_line lequ .gp[pub_w_viewline] then
		latest_line = .gp[pub_w_viewline] + .gp[pub_w_viewsize]  - 2;

	if dec (text_count) geq 0 then (
		text_dscs_array[.i] = c[ctl_q_line];
		c = .c[ctl_l_flink];
	) else
		text_dscs_array[.i] = describe('');
);
end;

return;		
	
end;

%sbttl 'PHN$FRESH_VIEW - Refresh a Viewport'
!++
! Functional Description:
!	This routine is called to refresh a specific viewport on the screen.
!
! Formal Parameters:
!	fresh_pub	Address of PUB representing viewport to be refreshed.
!	viewport_clear	True if viewport is known to be erased upon call;
!			false otherwise.  This is used for optimization.
!	top_bottom_too	True if entire viewport is to be refreshed; false if
!			only the text lines.
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	none
!
! Side Effects:
!
!--


global routine phn$fresh_view(fresh_pub,viewport_clear,top_bottom_too): novalue = begin

bind
	fp = .fresh_pub: pub,
	fresh_tsb = fp[pub_b_tsb]: tsb;

local
	cursor_pos: vector[2,long],
	line_numbers: vector[pub_k_maxlines-2,long],
	text_dscs:    vector[pub_k_maxlines-2,long],
	c: ref ctl;


! If a scrolling-type command (e.g., HELP) is in progress, we can't refresh
! the viewport.

if .phn$gv_scroller then
	return;

! If we are to refresh the entire viewport, then we have to clear the first
! line and center the user name on it, display the hold indicators, and
! throw up a lines of dashes at the bottom.

if .top_bottom_too then (
	begin
	bind
		spec_dsc = fresh_tsb[tsb_q_tkndsc,0]: descriptor;

	if not .viewport_clear then
		scr$erase_line(.fp[pub_w_viewline],1);
	scr$put_screen(spec_dsc,.fp[pub_w_viewline],(81-.spec_dsc[len])/2,%b'0001');
	end;

	phn$fresh_hold(fp);

	scr$put_screen(dashes,.fp[pub_w_viewline]+.fp[pub_w_viewsize]-1,1);
);

! Now we want to refresh the text lines themselves.  We call a routine
! to tell us which lines and what text goes on them.

phn$view_goodies(fp,cursor_pos,line_numbers,text_dscs);

! Now we loop through the arrays, acting on each active entry.  The
! line number array tells us which viewport line the text goes on.  The
! text descriptor array tells us what text to put there.

incru i from 0 to .fp[pub_w_viewsize]-2-1 do (
	bind
		line_dsc = .text_dscs[.i]: descriptor;

	if not .viewport_clear or .line_dsc[len] nequ 0 then (
		scr$erase_line(.line_numbers[.i],1);
		scr$put_screen(line_dsc);
	);
);

! Finally, position the cursor at it's current point in the viewport.

scr$set_cursor(.cursor_pos[0],.cursor_pos[1]);

return;

end;

%sbttl 'PHN$FRESH_HOLD - Display Hold Indicators'
!++
! Functional Description:
!	This routine is called to display the hold indicators on the first
!	line of a viewport.  One indicator says whether or not we have the
!	person on hold, the other says whether or not they have us on hold.
!
! Formal Parameters:
!	fresh_pub	The address of the PUB representing the viewport.
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	none
!
! Side Effects:
!
!--


global routine phn$fresh_hold(fresh_pub): novalue = begin

bind
	fp = .fresh_pub: pub;


! If a scrolling-type command (e.g., HELP) is in progress, we can't display
! the indicators.

if .phn$gv_scroller then
	return;

! Display an indicator to say if we have them on hold.

scr$put_screen(if .fp[pub_v_uhaveheld] then describe('(YOU HAVE HELD)')
				       else describe('               '),
	       .fp[pub_w_viewline],1);

! Display an indicator to say if they have us on hold.

if .fp[pub_v_hasuheld] then
	scr$put_screen(describe('(HAS YOU HELD)'),.fp[pub_w_viewline],66)
else
	scr$erase_line(.fp[pub_w_viewline],66);

return;

end;

%sbttl 'PHN$SHOW_TEXT - Display Text on Screen'
!++
! Functional Description:
!	This routine is called to display text on the screen.  It can be
!	passed the address of a PUB describing the viewport in which the
!	text is to be displayed.  It can also be passed an address of zero,
!	in which case the text is displayed on the command line.
!
! Formal Parameters:
!	display_pub	The address of the PUB describing the viewport to
!			contain the text (viewport parameters are assumed to
!			be filled in).  An address of zero means the text
!			goes on the command line.
!	text		Address of the descriptor of the text.
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	none
!
! Side Effects:
!
!--


global routine phn$show_text(display_pub,text): novalue = begin

bind
	dp = .display_pub: pub;

local
	text_dsc: descriptor,
	char: byte,
	c: ref ctl,
	latest_line_dsc: ref descriptor,
	cursor_pos: vector[2,long],
	word_wrap: byte;

builtin
	nullparameter;

! This routine is called from the screen update logic.  It determines the
! length of the last word in the text and returns that length.  This
! information is needed when we are to word-wrap or delete the last word
! on the line.

routine last_word(text) = begin

bind
	text_dsc = .text: descriptor,
	text_string = .text_dsc[ptr]: vector[,byte];

local
	i: long;


! First we scan backwards for the last non-blank in the text.  This marks
! the end of the last word.

i = (
	decr i from .text_dsc[len]-1 to -1 do (
	if .i eql -1 then exitloop .i;
	if .text_string[.i] nequ ' ' then exitloop .i;
	)
);

! Now we scan backwards for the preceeding blank in the text.  This marks
! the beginning of the last word.

i = (
	decr i from .i to -1 do (
	if .i eql -1 then exitloop .i;
	if .text_string[.i] eqlu ' ' then exitloop .i;
	)
);

! Return the length of the last word.

return .text_dsc[len] - .i - 1;
end;


local
	local_described_buffer(screen_buf,1024);

! We initialize by copying the descriptor of the text because we are going
! go clobber it.

ch$move(8,.text,text_dsc);

! Now we see if we are to display text on the command line.  If so, we
! process each text character and handle it appropriately.

if nullparameter(1) then (

	while dec (text_dsc[len]) geq 0 do (

		char = ch$rchar_a(text_dsc[ptr]);

		selectoneu .char of set
		[%x'20' to %x'7e']:

				! We have a normal character.  Place it on the
				! command line and advance the cursor position.

				(local
					char_dsc: descriptor;

				char_dsc[0,0,32,0] = 1;		!!! TEMP !!!
				char_dsc[ptr] = char;
				scr$put_screen(char_dsc,2,.command_line_pos);
				command_line_pos = minu(.command_line_pos+1,79););

		[delete]:	! We have a delete.  Decrement the cursor
				! position and clear away the character.

				(command_line_pos = maxu(.command_line_pos-1,2);
				scr$erase_line(2,.command_line_pos););


		[ctrl_u]:	! We have a CTRL/U.  Reset the cursor to column
				! 2 and clear the line.

				(command_line_pos = 2;
				scr$erase_line(2,2););


		[ctrl_w]:	! CTRL/W causes us to redraw the entire screen.

				phn$fresh_screen(true);
		tes;

	);

	return;
);

! Oh my God!  We have to display text in a participant's viewport.  This
! is a very complex process, so I will try to comment well.
!
! latest_line_dsc will point to the line text descriptor in the latest CTL.
! It will always be updated so that is the case.

c = .dp[pub_q_ctlhead0];
latest_line_dsc = c[ctl_q_line];

! It is not always the case that we can update the screen in this routine.
! If a scrolling-type command is in progress, we can't.  If we can, though,
! let's allocate a buffer for the screen package and position the cursor
! at the current point.  From now on, we will assume that the cursor is
! dynamically updated.

if not .phn$gv_scroller then (
	scr$set_buffer(screen_buf);
	phn$view_goodies(dp,cursor_pos);
	scr$set_cursor(.cursor_pos[0],.cursor_pos[1]);
);

! Now we will look at the text character by character and update the CTL
! buffers to reflect the new conversation.  We always keep the CTL buffers
! up-to-date so that if we ever have to refresh the screen (e.g., after
! someone hangs up the phone), we can do it directly from the buffers.
! We won't indent this loop because it is so big.

while dec (text_dsc[len]) geq 0 do (

char = ch$rchar_a(text_dsc[ptr]);

selectoneu .char of set
[%x'20' to %x'7e']:

		! We have a normal text character.  What we do depends upon
		! whether it fits on the current line or not.

		(word_wrap = .latest_line_dsc[len] gequ 79;
		if .word_wrap then (

			! We can't fit it on this line.  Find the last word on
			! the line if there is one and remove it from the line.
			! Save resulting cursor position for later use.  Make
			! a new CTL with wrapped word.

			local
				word_dsc: descriptor;

			word_dsc[0,0,32,0] = last_word(.latest_line_dsc);	!!! TEMP !!!
			if .word_dsc[len] gequ 79 then
				word_dsc[len] = 0;
			latest_line_dsc[len] = .latest_line_dsc[len] - .word_dsc[len];
			phn$view_goodies(dp,cursor_pos);
			word_dsc[ptr] = .latest_line_dsc[ptr] + .latest_line_dsc[len];
			add_new_ctl(word_dsc);
		);

		! Now we can put the new character at the end of the (possibly
		! new) current line.

		ch$wchar(.char,.latest_line_dsc[ptr]+.latest_line_dsc[len]);
		inc (latest_line_dsc[len]););


[ret]:		! We have a carriage return.  Remember the current cursor
		! position for later.  Add a new CTL with no text.

		(phn$view_goodies(dp,cursor_pos);
		add_new_ctl(0););


[tab]:		! We have a tab character.  If we are not too far along on the
		! line, we can honor it.  Compute the number of columns to the
		! next tab stop and add that many blanks to the line.

		if .latest_line_dsc[len]+1 lequ 72 then (
			local
				count: long;

			count = 8 - (.latest_line_dsc[len] mod 8);
			ch$fill(' ',.count,.latest_line_dsc[ptr]+.latest_line_dsc[len]);
			latest_line_dsc[len] = .latest_line_dsc[len] + .count;
		);


[delete]:	! We have a delete character.  Just decrement the line length.

		latest_line_dsc[len] = max(.latest_line_dsc[len]-1,0);


[linefeed]:	! We have a line feed character, which means we are to delete
		! the last word on the line.  Just reduce the line length by
		! the length of the word.

		latest_line_dsc[len] = .latest_line_dsc[len] - last_word(.latest_line_dsc);


[ctrl_u]:	! CTRL/U is used to clear the entire line.

		latest_line_dsc[len] = 0;


[formfeed]:	! We have a CTRL/L.  Add a new CTL with no text, and remember
		! it as the new top of the viewport.

		(add_new_ctl(0);
		dp[pub_l_topctl] = .dp[pub_l_ctlcount];);

tes;

! Well, we have updated the CTL buffers.  Now, if we are allowed to, we
! should update the screen.  This update logic is based on the fact that
! the CTL buffers are already updated.  Each bit of logic also assumes that
! the cursor is positioned correctly, which is why we positioned it in
! the initialization code.

if not .phn$gv_scroller then

selectoneu .char of set
[%x'20' to %x'7e']:

		! We have a normal character.  What we do depends upon whether
		! we word-wrapped or not.

		if .word_wrap then (

			! We word-wrapped.  Clear the word from the end of the
			! line.

			scr$erase_line(.cursor_pos[0],.cursor_pos[1]);

			! Now we have to place the wrapped word on the next
			! line.  If we are scrolling and are at the bottom
			! of the viewport, then scroll.  Otherwise position
			! on the next line and display the word.

			if .phn$gb_scroll and
			   (.cursor_pos[0] gequ .dp[pub_w_viewline]+.dp[pub_w_viewsize]-2) then
				phn$fresh_view(dp,false,false)
			else (
				phn$view_goodies(dp,cursor_pos);
				scr$put_screen(.latest_line_dsc,.cursor_pos[0],1);
				scr$erase_line();
			);
		) else (

			! We did not word-wrap, so we can just display the 
			! character.

			local
				char_dsc: descriptor;

			char_dsc[0,0,32,0] = 1;			!!! TEMP !!!
			char_dsc[ptr] = char;
			scr$put_screen(char_dsc);
		);


[ret]:
		! We have a carriage return.  If we are scrolling and are at
		! the bottom of the viewport, then scroll.  Otherwise position
		! at the new line.

		if .phn$gb_scroll and
		   (.cursor_pos[0] gequ .dp[pub_w_viewline]+.dp[pub_w_viewsize]-2) then
			phn$fresh_view(dp,false,false)
		else (
			phn$view_goodies(dp,cursor_pos);
			scr$erase_line(.cursor_pos[0],1);
		);


[tab]:		! If we are not too far along on the line, we can tab.

		if .latest_line_dsc[len]+1 lequ 73 then
			scr$put_screen(describe(%char(tab)));


[delete,
 linefeed,
 ctrl_u]:	! We have a character that deleted some text.  Position to
		! the new cursor point and erase the rest of the line.

		(phn$view_goodies(dp,cursor_pos);
		scr$erase_line(.cursor_pos[0],.cursor_pos[1]););


[formfeed]:	! We are clearing the viewport.  Just refresh all text lines.

		phn$fresh_view(dp,false,false);

tes;

! The bell character (CTRL/G) is a very special case.  First of all,
! we don't save it in the CTL buffer, because then it will beep every
! time the viewport is scrolled.  Secondly, we always want to display it,
! even if a scrolling command is in progress.

if .char eqlu bell then
	scr$put_screen(describe(%char(bell)));

! All done processing a character.  Continue until all text is done.

);


! Now we can put the buffer to the screen, if allowable.

if not .phn$gv_scroller then
	scr$put_buffer();

return;

end;

%sbttl 'PHN$SCROLL_PREP - Prepare to Scroll Information'
!++
! Functional Description:
!	This routine is called when a command wants to begin scrolling
!	information onto the screen.  A command like HELP scrolls info
!	into the screen beginning at line 5 and lasting for one or more
!	lines.
!
! Formal Parameters:
!	heading		Address of descriptor of heading line to be
!			placed on line 5.  Optional.
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	none
!
! Side Effects:
!
!--


global routine phn$scroll_prep(heading): novalue = begin

builtin
	nullparameter;


! Erase the screen beginning at line 5.

scr$erase_page(5,1);

! If we are to display a heading, do so.  Position cursor at line 7.

if not nullparameter(1) then
	scr$put_line(.heading,2);

! If this is a VT100, it will look a lot sexier if we don't scroll off
! the top of the screen.

scr$set_scroll((if nullparameter(1) then 5 else 7), 24);

return;

end;

%sbttl 'PHN$SCROLL_LINE - Scroll Line Onto Screen'
!++
! Functional Description:
!	This routine is called to scroll a line of information (e.g., HELP)
!	onto what is normally the viewport area of the screen.  The area
!	must have been previously prepared by PHN$SCROLL_PREP.
!
! Formal Parameters:
!	line		Address of descriptor of line to be scrolled.
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	none
!
! Side Effects:
!
!--


global routine phn$scroll_line(line): novalue = begin


! Just display it with a carriage return/line feed.

scr$put_line(.line,1);

return;

end;

end eludom
