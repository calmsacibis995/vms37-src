MODULE MSGSUBS( %TITLE 'MAIL MESSAGE SUBROUTINES'
		IDENT = 'V03-000' ) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	VAX/VMS MAIL UTILITY
!
! ABSTRACT:	Subroutines to read and write message files.
!
! ENVIRONMENT:	NATIVE/USER MODE
!
! AUTHOR: Len Kawell, CREATION DATE: 07-NOV-1979
!
! MODIFIED BY:
!
!	V03-002	PCA002		Paul Anagnostopoulos	11-Feb-1982
!		Mail complains if the owner UIC of a mail file does not
!		agree with the UIC in the user's UAF entry.  This code
!		had a day one bug which was fixed.
!
!	V03-001 PCA001		Paul Anagnostopoulos	11-Jan-1982
!		Zero the allocation quantity in the FAB before creating
!		a message file for the FILE or SEND commands.  This
!		prevents inheritence of some random quantity.
!
!	V02-003	LMK0002		Len Kawell		23-Feb-1981
!		Strip superflous CR/LF on end of records before storing in
!		mail file.  Also, allow owner delete access to FILE'd mail
!		files.
!
!	V02-001	LMK0001		Len Kawell		25-Jun-1980
!		Fixed problem of truncated message file if close routine
!		is interrupted by CTRL/Y.  Also added a modified flag
!		to help try and avoid the above problem altogether by
!		not writing the file unless really necessary.
!--

!
! TABLE OF CONTENTS:
!
FORWARD ROUTINE
	MAIL$CLOSE_FILE: NOVALUE,		! Close current message file
	MAIL$REWIND_MSG,			! Rewind current message
	OPEN_NEWFILE,				! Open new messages file
	OPEN_FILE;				! Open message file
!
! INCLUDE FILES:
!
	LIBRARY 'SYS$LIBRARY:STARLET.L32';
	REQUIRE 'SRC$:MAILREQ.REQ';
	REQUIRE 'SRC$:MAILMSG.B32';
!
! MACROS:
!
MACRO
	RECSIZ(RECPTR) =			! Get message record size
		(RECPTR)<0,RECSIZ_SIZ * 8>%;

MACRO	MSGDELIM(RECPTR) =			! Check for message delimiter
		((.RECSIZ(RECPTR) EQL 1)
		AND (CH$RCHAR(RECPTR + RECSIZ_SIZ) EQL FF)
		AND (.RECSIZ(RECPTR + RECSIZ_SIZ + 1) GTRU %CHARCOUNT('From'))
		AND (.(RECPTR + 2*RECSIZ_SIZ + 1) EQL 'From'))%;

MACRO	NEWMSGFLAG(MSGPTR) =			! Get new message flag address
		(LOCAL	PTR;
		PTR = MSGPTR + RECSIZ_SIZ + .RECSIZ(MSGPTR); ! Skip delimiter
		.PTR + RECSIZ_SIZ + .RECSIZ(.PTR) - 1)%; ! Addr of last char

!
! EQUATED SYMBOLS:
!
LITERAL
	FROM_SIZ	= %CHARCOUNT('From: '),	! Size of from delimiter
	MAXRECSIZ	= 255,			! Maximum message record size
	RECSIZ_SIZ	= 1,			! Message buffer record size
	SUBJ_SIZ	= %CHARCOUNT('Subj: ');	! Size of subject delimiter

LITERAL
	PRO_SYS		= $BITPOSITION(XAB$V_SYS),
	PRO_OWN		= $BITPOSITION(XAB$V_OWN),
	PRO_GRP		= $BITPOSITION(XAB$V_GRP),
	PRO_WLD		= $BITPOSITION(XAB$V_WLD),
	
	FILE_PRO	= 			! Filing file protection
(				  XAB$M_NOEXE		    ) ^ PRO_SYS OR
(				  XAB$M_NOEXE		    ) ^ PRO_OWN OR
(XAB$M_NOREAD OR XAB$M_NOWRITE OR XAB$M_NOEXE OR XAB$M_NODEL) ^ PRO_GRP OR
(XAB$M_NOREAD OR XAB$M_NOWRITE OR XAB$M_NOEXE OR XAB$M_NODEL) ^ PRO_WLD,

	SND_PRO		= 			! Send file protection
(				  XAB$M_NOEXE		    ) ^ PRO_SYS OR
(				  XAB$M_NOEXE OR XAB$M_NODEL) ^ PRO_OWN OR
(XAB$M_NOREAD OR XAB$M_NOWRITE OR XAB$M_NOEXE OR XAB$M_NODEL) ^ PRO_GRP OR
(XAB$M_NOREAD OR XAB$M_NOWRITE OR XAB$M_NOEXE OR XAB$M_NODEL) ^ PRO_WLD;


MACRO
	DEFFILENAM	= 'MAIL'%,		! Default message file name
	DEFFILETYP	= '.MAI'%;		! Default message file type
!
! EXTERNAL REFERENCES:
!
EXTERNAL
	MAIL$Q_SUBJ:	BLOCK[,BYTE],		! Message Subj: descriptor
	MAIL$Q_TO:	BLOCK[,BYTE],		! Message To: descriptor
	MAIL$Q_USERNAME:BLOCK[,BYTE],		! User's name descriptor
	MAIL$T_USERDEF;				! User's default file spec

EXTERNAL ROUTINE
	MAIL$CLRNEW_USER,			! Clear user's new mail flag
	LIB$FREE_VM: ADDRESSING_MODE(GENERAL),	! Free virtual memory
	LIB$GET_VM: ADDRESSING_MODE(GENERAL),	! Get virtual memory
	OTS$SCOPY_R_DX: ADDRESSING_MODE(GENERAL);! String copy
!
! OWN STORAGE:
!
OWN
	SYSPRV:	BLOCK[8,BYTE]			! SYSPRV privilege mask
		PRESET([PRV$V_SYSPRV] = 1),
	EXITSTATUS:	LONG,			! Exit status
	EXITBLOCK:	VECTOR[4]		! Exit handler control block
			INITIAL(0,		!  Forward link
				MAIL$CLOSE_FILE,!  Routine address
				1,		!  Argument count
				EXITSTATUS),	!  Location to receive status
	MODIFIED:	LONG;			! Buffer modified flag

!
! Current message file being read RMS blocks
!
OWN
	RD_ESNAM_BUF:	VECTOR[NAM$C_MAXRSS,BYTE],! Expanded name string buffer
	RD_ESNAM_DESC:	BLOCK[8,BYTE]		! Expanded name string desc
			PRESET([DSC$A_POINTER] = RD_ESNAM_BUF),
	RD_NAM:					! Name block
		$NAM(	ESA=RD_ESNAM_BUF,	!  Expanded name string buf adr
			ESS=NAM$C_MAXRSS),	!  Expanded name string buf siz
	RD_FAB:					! File access block
		$FAB(	FAC=<GET,PUT,TRN>,	!  File access types
			FOP=<TEF,		!  Truncate at end-of-file
			     SQO>,		!  Sequential access only
			NAM=RD_NAM),		!  Nam block address
	RD_RAB:					! Record access block
		$RAB(	FAB=RD_FAB,		!  Fab address
			MBC=12,			!  Multi-block count
			RAC=SEQ,		!  Sequential access
			ROP=<RAH,WBH,		!  Read-ahead, Write-behind
			     TPT>,		!  Truncate after $PUT
			USZ=MAIL$K_INBUFFSZ);	!  Record buffer size
!
! Current message buffer parameters
!
OWN
	MSG_BUF_ASIZ:	LONG,			! Message buffer size allocated
	MSG_BUF_ADR:	LONG,			! Message buffer address
	MSG_BUF_SIZ:	LONG,			! Message buffer size
	MSG_FILE:	VECTOR[32,BYTE],	! Message file name
	MSG_ADR:	LONG;			! Message address
GLOBAL 
	MAIL$Q_MSG_FILE:BLOCK[8,BYTE]		! Message file name desc
			PRESET([DSC$A_POINTER] = MSG_FILE),
	MAIL$L_MSG_STS:	LONG			! Message status
			INITIAL(MAIL$_NOTREADIN),
	MAIL$L_MSG_NUM:	LONG,			! Message number
	MAIL$W_MSG_RSIZ:WORD,			! Message record size
	MAIL$L_MSG_RADR:LONG;			! Message record address
!
! Send/File message RMS blocks
!
OWN
	SND_ESNAM_BUF:	VECTOR[NAM$C_MAXRSS,BYTE],! Expanded name string buffer
	SND_ESNAM_DESC:	BLOCK[8,BYTE]		! Expanded name string desc
			PRESET([DSC$A_POINTER] = SND_ESNAM_BUF),
	SND_NAM:				! Name block
		$NAM(	ESA=SND_ESNAM_BUF,	!  Expanded name string buf adr
			ESS=NAM$C_MAXRSS),	!  Expanded name string buf siz
	SND_XABPRO:				! Protection attribute block
		$XABPRO(),			!
	SND_FAB:				! File access block
		$FAB(	FAC=<GET,PUT,TRN>,	!  File access types
			MRS=MAXRECSIZ,		!  Maximum record size
			NAM=SND_NAM,		!  NAM block address
			RAT=CR,			!  CR/LF record attributes
			RFM=VAR,		!  Variable length records
			XAB=SND_XABPRO),	!  XAB block address
	SND_RAB:				! Record access block
		$RAB(	FAB=SND_FAB,		!  FAB address
			ROP=<EOF>);		!  Position to end-of-file
GLOBAL BIND
	MAIL$Q_MSGTYPE = DESCRIPTOR(DEFFILETYP),! Default mail message filetype
	MAIL$Q_MSGNAME = DESCRIPTOR(DEFFILENAM):! Default mail message filename
			 BLOCK[,BYTE];

GLOBAL ROUTINE MAIL$FIND_MSG(NAMSIZ,NAMADR,MSGNUM) =
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine finds the specified message and sets the current message
!	pointers to describe it.
!
! INPUTS:
!
!	NAMSIZ = Size of message file name.
!	       = Zero if current message file is desired.
!	NAMADR = Address of message file name.
!	       = Zero if current message file is desired.
!	MSGNUM = Relative message number desired.
!	       = Zero if next message is desired.
!
! OUTPUTS:
!
!	MAIL$L_MSG_NUM = Current message number.
!	MAIL$L_MSG_ADR = Address of first record in message.
!	MAIL$L_MSG_STS = Status of current message.
!
!	All failures are signalled as well as returned.
!--
BEGIN
LOCAL
	SRCH_MSGNUM,				! Messge number to search for
	POINTER;				! Message buffer pointer
!
! If specified message number is zero, then searching for next message,
! else, searching for specified message number.
!
SRCH_MSGNUM = (IF .MSGNUM EQL 0 THEN (.MAIL$L_MSG_NUM + 1) ELSE .MSGNUM);
!
! If a file name was specified open the specified file.
!
IF (.NAMSIZ NEQ 0)				! If filename specified
OR .MAIL$L_MSG_STS EQL MAIL$_NOTREADIN		! or no file is open
THEN	BEGIN
	IF .NAMSIZ NEQ 0			! If filename specified
	THEN
		IF_ERR(	OPEN_FILE(.NAMSIZ,	! Open specified file
				  .NAMADR);,
			RETURN .STATUS)
	ELSE					! Else, open default file
		IF_ERR( OPEN_FILE(.MAIL$Q_MSGNAME[DSC$W_LENGTH],
				  .MAIL$Q_MSGNAME[DSC$A_POINTER]);,
			RETURN .STATUS);
	IF .MSGNUM EQL 0 			! If no message specified
	THEN	BEGIN
		MAIL$L_MSG_STS = STS$K_SUCCESS;	! Set success
		MAIL$REWIND_MSG();		! Set current message position
		RETURN STS$K_SUCCESS		! Return
		END;
	END;
!
! Check that a message file is open and there are messages in the file.
!
IF .MSG_BUF_ADR EQL 0
THEN
	(SIGNAL (MAIL$_NOTREADIN); RETURN MAIL$_NOTREADIN);
IF .MSG_BUF_SIZ EQL 0
THEN
	(SIGNAL (MAIL$_NOMOREMSG); RETURN MAIL$_NOMOREMSG);
!
! If the specified message number is less than the current message number
! or there is no current message, then set the message file pointers to 
! the beginning of the buffer, so the message search will start over again.
!
IF (.SRCH_MSGNUM LSSU .MAIL$L_MSG_NUM)		! If number less than current
OR (.MSG_ADR EQL 0)				! or, no current message
THEN	BEGIN
	MAIL$L_MSG_NUM = 1;			! Re-init current number
	MSG_ADR = .MSG_BUF_ADR;			! Re-init current pointer
	END;
!
! Search through the messages until the relative message number equals
! the specified message number or the end of the buffer is reached.
!
POINTER = .MSG_ADR;				! Start at current message
UNTIL (.MAIL$L_MSG_NUM GEQU .SRCH_MSGNUM)
OR    ((POINTER = .POINTER + .RECSIZ(.POINTER) + RECSIZ_SIZ)
       GEQU (.MSG_BUF_ADR + .MSG_BUF_SIZ))
DO	BEGIN
	IF MSGDELIM(.POINTER)			! If message delimiter
	THEN	BEGIN				! then, found new message
		MSG_ADR = .POINTER;	
		MAIL$L_MSG_NUM = .MAIL$L_MSG_NUM + 1;
		END;
	END;
!
! Set the current reccord context to the first text record in the message.
!
MAIL$L_MSG_RADR = .MSG_ADR + 2*RECSIZ_SIZ + .RECSIZ(.MSG_ADR); ! Skip delimiter
MAIL$W_MSG_RSIZ = .RECSIZ(.MAIL$L_MSG_RADR - RECSIZ_SIZ);
!
! If the next message was requested and no more were found, return "no more".
!
IF (.MSGNUM EQL 0) AND (.MAIL$L_MSG_NUM LSSU .SRCH_MSGNUM)
THEN
	MAIL$L_MSG_STS = MAIL$_NOMOREMSG
ELSE
	MAIL$L_MSG_STS = STS$K_SUCCESS;
RETURN .MAIL$L_MSG_STS
END;


GLOBAL ROUTINE MAIL$GET_MSG =
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine finds the next record in the current message and sets
!	the size and address parameters to describe it.
!
! INPUTS:
!
!	MAIL$W_MSG_RSIZ = Current message record size.
!	MAIL$L_MSG_RADR = Current message record address.
!
! OUTPUTS:
!
!	MAIL$W_MSG_RSIZ = Next message record size.
!	MAIL$L_MSG_RADR = Next message record address.
!	MAIL$L_MSG_STS = STS$K_SUCCESS if another record exists.
!		       = Zero if no more records in message.
!--
BEGIN
!
! Set pointer and size to next record, unless next record is past
! the end of the buffer or is another message delimiter.
!
MAIL$L_MSG_RADR = .MAIL$L_MSG_RADR + .MAIL$W_MSG_RSIZ + RECSIZ_SIZ;
IF .MAIL$L_MSG_RADR GTRU (.MSG_BUF_ADR + .MSG_BUF_SIZ)
OR MSGDELIM(.MAIL$L_MSG_RADR - RECSIZ_SIZ)
THEN
	MAIL$L_MSG_STS = 0
ELSE	BEGIN
	MAIL$W_MSG_RSIZ = .RECSIZ(.MAIL$L_MSG_RADR - RECSIZ_SIZ);
	MAIL$L_MSG_STS = STS$K_SUCCESS;
	END;
RETURN .MAIL$L_MSG_STS
END;


GLOBAL ROUTINE MAIL$REWIND_MSG =
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine "rewinds" the current message by resetting the current
!	record pointers to the first text record in the message.
!
! INPUTS:
!
!	MSG_ADR = Address of first record in current message.
!
! OUTPUTS:
!
!	MAIL$W_MSG_RSIZ = Size of first text record in current message.
!	MAIL$L_MSG_RADR = Address of first text record in current message.
!--
BEGIN
IF (NOT .MAIL$L_MSG_STS AND .MAIL$L_MSG_STS NEQ 0)
OR .MSG_ADR EQL 0
THEN
	RETURN MAIL$_NOTREADIN;
MAIL$L_MSG_RADR = .MSG_ADR + 2*RECSIZ_SIZ + .RECSIZ(.MSG_ADR); ! Skip delimiter
MAIL$W_MSG_RSIZ = .RECSIZ(.MAIL$L_MSG_RADR - RECSIZ_SIZ);
MAIL$L_MSG_STS = STS$K_SUCCESS;
RETURN STS$K_SUCCESS;
END;


GLOBAL ROUTINE MAIL$INFO_MSG(SENDER,SUBJ,DATE) =
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine is called to get the sender, date/time, and subject
!	of the current message.
!
! INPUTS:
!
!	SENDER = Address of descriptor of buffer to receive message sender.
!	SUBJ = Address of descriptor of buffer to receive message subject.
!	DATE = Optional address of descriptor of buffer to receive date/time
!		of message.
!
! OUTPUTS:
!
!	Message info copied to buffers.
!--
BEGIN
BUILTIN
	ACTUALCOUNT;					! Argument count
LOCAL
	POINTER;					! String pointer

IF_ERR(	MAIL$REWIND_MSG();,				! Rewind the message
	RETURN .STATUS);
!
! Get the sender of the current message
!
IF .MAIL$W_MSG_RSIZ GTRU FROM_SIZ
THEN
	POINTER = CH$FIND_CH(.MAIL$W_MSG_RSIZ - FROM_SIZ,  ! Find end of name
			     .MAIL$L_MSG_RADR + FROM_SIZ,
			     ' ');
	IF NOT CH$FAIL(.POINTER)
	THEN
		OTS$SCOPY_R_DX(	.POINTER - (.MAIL$L_MSG_RADR + FROM_SIZ),
				.MAIL$L_MSG_RADR + FROM_SIZ,
				.SENDER)
	ELSE
		OTS$SCOPY_R_DX(	0,0,.SENDER);
!
! Get date of current message
!
IF ACTUALCOUNT() GTR 2					! If date requested
THEN	BEGIN
	POINTER = CH$FIND_CH(	.MAIL$W_MSG_RSIZ,	! Find date
		     		.MAIL$L_MSG_RADR,
			     	'-') - 2;
	IF NOT CH$FAIL(.POINTER)
	THEN
		OTS$SCOPY_R_DX(	.POINTER - .MAIL$L_MSG_RADR,
				.POINTER,
				.DATE)
	ELSE
		OTS$SCOPY_R_DX(	0,0,.DATE);
	END;
!
! Get subject, if there is one, of the current message
!
IF MAIL$GET_MSG() AND MAIL$GET_MSG()
THEN
	IF .MAIL$W_MSG_RSIZ GTRU SUBJ_SIZ
	AND .(.MAIL$L_MSG_RADR) EQL 'Subj'
	THEN
		OTS$SCOPY_R_DX(	.MAIL$W_MSG_RSIZ - FROM_SIZ,
				.MAIL$L_MSG_RADR + FROM_SIZ,
				.SUBJ)
	ELSE
		OTS$SCOPY_R_DX(	0,0,.SUBJ);
RETURN STS$K_SUCCESS
END;


GLOBAL ROUTINE MAIL$NEW_MSG =
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine is called to test if the current message is a "new"
!	(previously unread) message.  If it is, the new flag in the message
!	is cleared.
!
! INPUTS:
!
!	MSG_ADR = Address of first record in current message.
!
! OUTPUTS:
!
!	STS$K_SUCCESS if message is new.
!	STS$K_ERROR if message is not new.
!--
BEGIN
LOCAL
	PTR;						! Buffer pointer

IF CH$RCHAR(PTR = NEWMSGFLAG(.MSG_ADR)) EQL '*'		! If "new" flag
THEN	BEGIN
	CH$WCHAR(' ',.PTR);				! Clear text flag
	MODIFIED = 1;					! Set modified flag
	STS$K_SUCCESS					! Return "new"
	END
ELSE
	STS$K_ERROR					! Return not "new"
END;


GLOBAL ROUTINE MAIL$DELETE_MSG =
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine is called to delete the current message from the message
!	buffer and, ultimately, from the message file.
!
! INPUTS:
!
!	MSG_ADR = Address of first record in current message.
!
! OUTPUTS:
!
!	Current message removed from the message buffer.
!--
BEGIN
LOCAL
	TEXT_LEFT,				! Size of text left
	FROM_PTR,				! Move from text pointer
	TO_PTR,					! Move to text pointer
	MOVE_SIZ;				! Size of text moving

IF_ERR(MAIL$REWIND_MSG();,RETURN .STATUS);	! Rewind the message
MODIFIED = 1;					! Set modified flag
WHILE MAIL$GET_MSG() DO 1;			! Find end of message

TEXT_LEFT = (.MSG_BUF_ADR + .MSG_BUF_SIZ) - 	! Compute text left after msg
		(.MAIL$L_MSG_RADR - RECSIZ_SIZ);
FROM_PTR = .MAIL$L_MSG_RADR - RECSIZ_SIZ;	! Get address to move from
TO_PTR = .MSG_ADR;				! Get address to move to
DO	BEGIN
	MOVE_SIZ = MIN(.TEXT_LEFT,65535);	! Compute max that can be moved
	CH$MOVE(.MOVE_SIZ,.FROM_PTR,.TO_PTR);	! Move text
	TO_PTR = .TO_PTR + .MOVE_SIZ;		! Compute new to pointer
	FROM_PTR = .FROM_PTR + .MOVE_SIZ;	! Compute new from pointer
	TEXT_LEFT = .TEXT_LEFT - .MOVE_SIZ;	! Compute amount left now
	END
UNTIL .TEXT_LEFT EQL 0;				! Continue until all moved

MSG_BUF_SIZ = .MSG_BUF_SIZ - 			! Compute new size of text
		((.MAIL$L_MSG_RADR - RECSIZ_SIZ) - .MSG_ADR);
IF .MSG_ADR LSSU (.MSG_BUF_ADR + .MSG_BUF_SIZ)	! If not past end of buffer
THEN
	MAIL$REWIND_MSG()			! Rewind new current message
ELSE
	MSG_ADR = MAIL$L_MSG_STS = 0;		! Else, end of file
RETURN STS$K_SUCCESS
END;


GLOBAL ROUTINE MAIL$FILE_MSG(NAMSIZ,NAMADR)  =
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine is called to copy the current message to another
!	message file.
!
! INPUTS:
!
!	NAMSIZ = Size of specified message file name.
!	NAMADR = Address of specified message file name.
!
!	MSG_ADR = Address of current message.
!
! OUTPUTS:
!
!	Message copied to the specified file.
!
!	All failures are signalled as well as returned.
!--
BEGIN
LOCAL
	STATUS;						! Routine status
!
! Rewind the current message
!
IF (NOT .MAIL$L_MSG_STS AND .MAIL$L_MSG_STS NEQ 0)
OR .MSG_ADR EQL 0
THEN
	(SIGNAL(MAIL$_NOTREADIN); RETURN MAIL$_NOTREADIN);
MAIL$L_MSG_RADR = .MSG_ADR + RECSIZ_SIZ;
MAIL$W_MSG_RSIZ = .RECSIZ(.MSG_ADR);
!
! Set the file name and default file name
!
SND_FAB[FAB$B_FNS] = .NAMSIZ;
SND_FAB[FAB$L_FNA] = .NAMADR;
SND_FAB[FAB$B_DNS] = .MAIL$T_USERDEF<CS_COUNT>;
SND_FAB[FAB$L_DNA] = MAIL$T_USERDEF<CS_STRING>;
SND_XABPRO[XAB$L_UIC] = 0;			! Use process's UIC
SND_XABPRO[XAB$W_PRO] = FILE_PRO;		! Set file protection
!
! Open (or create if it doesn't exist) the message file.
! Clear allocation quantity from previous use of the FAB.
!
SND_FAB[FAB$V_CIF] = 1;
SND_FAB[FAB$L_ALQ] = 0;
STATUS = $CREATE(FAB = SND_FAB);
SND_ESNAM_DESC[DSC$W_LENGTH] = .SND_NAM[NAM$B_ESL];
IF NOT .STATUS
THEN	BEGIN
	SIGNAL( SHR$_OPENOUT OR MAIL$V_FACILITY,
		1,SND_ESNAM_DESC,
		.STATUS,SND_FAB[FAB$L_STV]);
	RETURN .STATUS;
	END;
IF .STATUS EQL RMS$_CREATED
THEN SIGNAL( SHR$_CREATED OR MAIL$V_FACILITY OR STS$K_INFO,
	     1,SND_ESNAM_DESC);
$CONNECT(RAB = SND_RAB);
!
! Copy the message records to the file
!
DO	BEGIN
	SND_RAB[RAB$W_RSZ] = .MAIL$W_MSG_RSIZ;
	SND_RAB[RAB$L_RBF] = .MAIL$L_MSG_RADR;
	STATUS = $PUT(RAB = SND_RAB);
	END
WHILE MAIL$GET_MSG() AND .STATUS;
IF NOT .STATUS
THEN
	SIGNAL(	SHR$_WRITEERR OR MAIL$V_FACILITY,
		1,SND_ESNAM_DESC,
		.STATUS,SND_RAB[RAB$L_STV]);
$CLOSE(FAB = SND_FAB);					! Close the file
RETURN .STATUS
END;


GLOBAL ROUTINE MAIL$SEND_MSG(DEVSIZ,DEVADR,DIRSIZ,DIRADR,UIC,RAB) =
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine is called to send a message to another user.  It opens
!	the user's new mail message file and copies the new message to the
!	file.  Since there is no file sharing, if the new mail message file
!	cannot be opened because it is already in use, another file will be
!	created.  The files will all be concatenated into one file when read.
!
! INPUTS:
!
!	DEVSIZ = Size of addressee's default device name.
!	DEVADR = Address of addressee's default device name.
!	DIRSIZ = Size of addressee's default directory name.
!	DIRADR = Address of addressee's default directory name.
!	UIC = UIC of addressee.
!	RAB = Address of connected RAB for message to be sent.
!
! OUTPUTS:
!
!	All failures are signalled as well as returned.
!--
BEGIN
MAP
	RAB : REF BLOCK[,BYTE];				! RAB block
LOCAL
	STATUS,						! Routine status
	DEF_BUFF: VECTOR[NAM$C_MAXRSS,BYTE],		! Default name buffer
	REC_BUFF: VECTOR[MAIL$K_INBUFFSZ,BYTE],		! Record buffer
	REC_SIZ,					! Record size
	DESC:	  BLOCK[8,BYTE];			! String descriptor

!
! Create and set the file name and file owner
!
CH$COPY(.DEVSIZ,.DEVADR,				! Concatenate device,
	.DIRSIZ,.DIRADR,				! directory names,
	%CHARCOUNT(DEFFILENAM,DEFFILETYP),		! and filename & type
	UPLIT BYTE(DEFFILENAM,DEFFILETYP),
	0,NAM$C_MAXRSS,DEF_BUFF);
SND_FAB[FAB$B_FNS] = .DEVSIZ + .DIRSIZ + %CHARCOUNT(DEFFILENAM,DEFFILETYP);
SND_FAB[FAB$L_FNA] = DEF_BUFF;
SND_FAB[FAB$B_DNS] = SND_FAB[FAB$L_DNA] = 0;		! No default file name
SND_XABPRO[XAB$L_UIC] = .UIC;				! Set owner UIC
SND_XABPRO[XAB$W_PRO] = SND_PRO;			! Set protection
!
! Open/create the addressee's mail file
! Clear the allocation quantity from previous use of FAB.
!
$SETPRV(ENBFLG=1,PRVADR=SYSPRV);			! Enable system UIC
SND_FAB[FAB$V_CIF] = 1;					! Create if nonexistant
SND_FAB[FAB$L_ALQ] = 0;
STATUS = $CREATE(FAB = SND_FAB);
IF .STATUS EQL RMS$_FLK					! If file locked,
THEN	BEGIN
	SND_FAB[FAB$V_CIF] = 0;				! unconditionaly create
	STATUS = $CREATE(FAB = SND_FAB);
	END;

SND_ESNAM_DESC[DSC$W_LENGTH] = .SND_NAM[NAM$B_ESL];	! Set expanded name
IF .SND_XABPRO[XAB$L_UIC] NEQ .UIC			! Make sure file owner
THEN	STATUS = RMS$_PRV;				! is really correct

IF NOT .STATUS						! Check OPEN/CREATE
THEN	BEGIN
	SIGNAL(	SHR$_OPENOUT OR MAIL$V_FACILITY,
		1,SND_ESNAM_DESC,
		.STATUS,.SND_FAB[FAB$L_STV]);
	RETURN .STATUS;
	END;
$CONNECT(RAB = SND_RAB);
!
! Create the message delimiter
!
SND_RAB[RAB$W_RSZ] = 1;
SND_RAB[RAB$L_RBF] = UPLIT(%CHAR(FF));
$PUT(RAB = SND_RAB);
!
! Create the message header
!
DESC[DSC$W_LENGTH] = MAIL$K_INBUFFSZ;
DESC[DSC$A_POINTER] = REC_BUFF;
SND_RAB[RAB$L_RBF] = REC_BUFF;
$FAO(	DESCRIPTOR('From:!_!AS   !17%D *'),		! Format To: line
	REC_SIZ,
	DESC,
	MAIL$Q_USERNAME,
	0);
SND_RAB[RAB$W_RSZ] = .REC_SIZ;
$PUT(RAB = SND_RAB);					! Put From: line

$FAO(	DESCRIPTOR('To:!_!AS'),				! Format To: line
	REC_SIZ,
	DESC,
	MAIL$Q_TO);
SND_RAB[RAB$W_RSZ] = .REC_SIZ;
$PUT(RAB = SND_RAB);					! Put To: line

IF .MAIL$Q_SUBJ[DSC$W_LENGTH] NEQ 0			! If subject specified
THEN	BEGIN
	$FAO(	DESCRIPTOR('Subj:!_!AS'),		! Format subject line
		REC_SIZ,
		DESC,
		MAIL$Q_SUBJ);
	SND_RAB[RAB$W_RSZ] = .REC_SIZ;
	$PUT(RAB = SND_RAB);				! Put subject line
	END;

SND_RAB[RAB$W_RSZ] = 0;					! Put a blank line
$PUT(RAB = SND_RAB);
!
! Copy the message text to the file
!
$REWIND(RAB = .RAB);
WHILE STATUS = $GET(RAB = .RAB)
DO	BEGIN
	SND_RAB[RAB$W_RSZ] = .RAB[RAB$W_RSZ];
	SND_RAB[RAB$L_RBF] = .RAB[RAB$L_RBF];
	!
	! If record is terminated with a CR/LF, strip it.  This type of
	! record is produced by DEC Standard Runoff.
	!
	IF .RAB[RAB$W_RSZ] GEQU 2
	AND .(.RAB[RAB$L_RBF] + .RAB[RAB$W_RSZ] - 2)<0,16> EQLU (CR OR LF^8)
	THEN SND_RAB[RAB$W_RSZ] = .RAB[RAB$W_RSZ] - 2;

	STATUS = $PUT(RAB = SND_RAB);
	IF NOT .STATUS THEN EXITLOOP;
	END;
IF .STATUS NEQ RMS$_EOF
THEN	SIGNAL(SHR$_WRITEERR OR MAIL$V_FACILITY,
		1,SND_ESNAM_DESC,
		.STATUS,.SND_RAB[RAB$L_STV])
ELSE
	STATUS = STS$K_SUCCESS;
$CLOSE(FAB = SND_FAB);
$SETPRV(ENBFLG=0,PRVADR=SYSPRV);			! Disable system UIC
RETURN .STATUS
END;


GLOBAL ROUTINE MAIL$CLOSE_FILE : NOVALUE =
!++
!  FUNCTIONAL DESCRIPTION:
!
!	This routine closes the current message file.  If any messages were
!	deleted, all the un-deleted messages are first copied, contiguously,
!	to the message file, thus truncating the file.  The message buffer
!	is then deallocated.
!
! INPUTS:
!
!	MSG_BUF_ASIZ = Size of allocated message buffer.
!	MSG_BUF_ADR = Starting address of message buffer.
!	MSG_BUF_SIZ = Size of messages in message buffer.
!
! OUTPUTS:
!
!	Messages copied to message file, message file truncated and closed,
!	message buffer deallocated, message file context initialized.
!
!	All failures are signalled.
!--
BEGIN
LOCAL
	PTR,					! Message buffer pointer
	SIZ,					! Message buffer size
	STATUS;					! Routine status
!
! If no file open, just return
!
IF .RD_FAB[FAB$W_IFI] EQL 0 THEN RETURN;
!
! If there are messages left, rewind the message file and copy the
! messages to it.  If none left, mark the file for deletion.
!
IF .MODIFIED THEN
IF .MSG_BUF_SIZ NEQ 0					! If text left
THEN	BEGIN
	$DCLEXH(DESBLK = EXITBLOCK);			! Re-declare if interrupted
	$WAIT(RAB = RD_RAB);				! Wait for all quiet
	STATUS = $REWIND(RAB = RD_RAB);
	PTR = .MSG_BUF_ADR;
	SIZ = .MSG_BUF_SIZ;
	WHILE .SIZ GTR 0 AND .STATUS
	DO	BEGIN
		RD_RAB[RAB$L_RBF] = .PTR + RECSIZ_SIZ;
		RD_RAB[RAB$W_RSZ] = .RECSIZ(.PTR);
		SIZ = .SIZ - .RECSIZ(.PTR)- RECSIZ_SIZ;
		PTR = .PTR + .RECSIZ(.PTR)+ RECSIZ_SIZ;
		STATUS = $PUT(RAB = RD_RAB);
		END;
	IF NOT .STATUS
	THEN
		SIGNAL(	SHR$_WRITEERR OR MAIL$V_FACILITY,
			1,RD_ESNAM_DESC,
			.STATUS,.RD_FAB[FAB$L_STV]);
	END
ELSE
	RD_FAB[FAB$V_DLT] = 1;				! Set to delete
!
! Close the message file and deallocate the message buffer
!
$SETPRV(ENBFLG=1,PRVADR=SYSPRV);			! Enable system UIC
IF_ERR($CLOSE(FAB = RD_FAB);,				! Close the file
	SIGNAL (.STATUS));				! possibly deleting it
$SETPRV(ENBFLG=0,PRVADR=SYSPRV);			! Disable system UIC
RD_FAB[FAB$V_DLT] = 0;					! Clear delete flag
$CANEXH(DESBLK = EXITBLOCK);				! Cancel exit handler
LIB$FREE_VM(MSG_BUF_ASIZ,MSG_BUF_ADR);			! Deallocate buffer
!
! Re-initialize all the message file context
!
MODIFIED = 0;
MSG_BUF_ASIZ = 0;
MSG_BUF_SIZ = 0;
MSG_BUF_ADR = 0;
MSG_ADR = 0;
MAIL$L_MSG_NUM = 0;
MAIL$W_MSG_RSIZ = 0;
MAIL$L_MSG_RADR = 0;
MAIL$L_MSG_STS = MAIL$_NOTREADIN;
END;

ROUTINE OPEN_FILE(NAMSIZ,NAMADR) =
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine opens the named message file and reads it into the
!	message buffer.
!
! INPUTS:
!
!	NAMSIZ = Size of specified file name.
!	NAMADR = Address of specified file name.
!	MAIL$T_USERDEF = User's default file name string.
!
! OUTPUTS:
!
!	MSG_BUF_ASIZ = Size of allocated message buffer.
!	MSG_BUF_SIZ = Size of text in message buffer.
!	MSG_BUF_ADR = Address of text in message buffer.
!	MSG_ADR = Address of first new message in buffer.
!	MSG_FILE = Message file name.
!	MAIL$Q_MSG_FILE = Message file name desc.
!	MAIL$L_MSG_NUM = Current message number.
!
!	All failures are signalled as well as returned.
!--
BEGIN
LOCAL
	PREV_REC,				! Previous record address
	SPACE_LEFT,				! Space left in buffer
	STATUS;					! Routine status
!
! Close any currently open file and zero all context.
!
MAIL$CLOSE_FILE();
!
! Set the file name and default file name
!
RD_FAB[FAB$B_FNS] = .NAMSIZ;
RD_FAB[FAB$L_FNA] = .NAMADR;
RD_FAB[FAB$B_DNS] = .MAIL$T_USERDEF<CS_COUNT>;
RD_FAB[FAB$L_DNA] = MAIL$T_USERDEF<CS_STRING>;
CH$MOVE(MIN(.NAMSIZ,32),.NAMADR,MSG_FILE);		! Save file name
MAIL$Q_MSG_FILE[DSC$W_LENGTH] = MIN(.NAMSIZ,32);	! and its size
!
! Open the file.  If the new message file is specified, call the routine
! to concatenate all the new messages together.  Else, just open.
!
IF CH$EQL(.NAMSIZ,.NAMADR,
	  .MAIL$Q_MSGNAME[DSC$W_LENGTH],.MAIL$Q_MSGNAME[DSC$A_POINTER],0)
THEN	BEGIN
	STATUS = OPEN_NEWFILE();
	IF .STATUS EQL RMS$_FNF				! If file not found
	THEN	BEGIN
		MAIL$CLRNEW_USER(MAIL$Q_USERNAME);	! Be sure new count 0
		SIGNAL(MAIL$_NOMSGS); 			! Signal no messages
		RETURN MAIL$_NOMSGS 			! Return
		END;
	END
ELSE
	BEGIN
	STATUS = $OPEN(FAB = RD_FAB);
	$CONNECT(RAB = RD_RAB);
	END;
RD_ESNAM_DESC[DSC$W_LENGTH] = .RD_NAM[NAM$B_ESL];
IF NOT .STATUS
THEN	BEGIN
	SIGNAL(	SHR$_OPENIN OR MAIL$V_FACILITY,
		1,RD_ESNAM_DESC,
		.STATUS,.RD_FAB[FAB$L_STV]);
	RETURN .STATUS;
	END;
!
! Allocate a buffer to read-in the message text
!
IF .RD_FAB[FAB$L_ALQ] EQL 0 				! Return if file empty
THEN
	(SIGNAL(MAIL$_NOMSGS); RETURN MAIL$_NOMSGS);
MSG_BUF_ASIZ = .RD_FAB[FAB$L_ALQ] * 512;		! Compute size in bytes
IF_ERR(	LIB$GET_VM(MSG_BUF_ASIZ,MSG_BUF_ADR);,
	SIGNAL(.STATUS);
	$CLOSE(FAB = RD_FAB);
	RETURN .STATUS);
!
! Read all the text records from the file into the message buffer
!
SPACE_LEFT = .MSG_BUF_ASIZ;
PREV_REC = .MSG_BUF_ADR; .PREV_REC = 0;
RD_RAB[RAB$L_UBF] = .MSG_BUF_ADR + RECSIZ_SIZ;
RD_RAB[RAB$W_USZ] = MIN(.SPACE_LEFT - RECSIZ_SIZ,MAXRECSIZ);
WHILE (STATUS = $GET(RAB = RD_RAB))
AND   (.SPACE_LEFT GTR 0)
DO 	BEGIN
	RECSIZ(.RD_RAB[RAB$L_UBF] - RECSIZ_SIZ) = .RD_RAB[RAB$W_RSZ];
	!
	! If first new message, save address of message
	!
	IF MSGDELIM(.PREV_REC)
	THEN
		IF .MSG_ADR EQL 0
		THEN	BEGIN
			MAIL$L_MSG_NUM = .MAIL$L_MSG_NUM + 1;
			IF CH$RCHAR(NEWMSGFLAG(.PREV_REC)) EQL '*'
			THEN
				MSG_ADR = .PREV_REC;
			END;
	PREV_REC = .RD_RAB[RAB$L_RBF] - RECSIZ_SIZ;
	!
	! Compute space left and address for next record
	!
	SPACE_LEFT = .SPACE_LEFT - .RD_RAB[RAB$W_RSZ] - RECSIZ_SIZ;
	MSG_BUF_SIZ = .MSG_BUF_SIZ + .RD_RAB[RAB$W_RSZ] + RECSIZ_SIZ;
	RD_RAB[RAB$L_UBF] = .RD_RAB[RAB$L_UBF] + 
			    .RD_RAB[RAB$W_RSZ] + RECSIZ_SIZ;
	RD_RAB[RAB$W_USZ] = MIN(.SPACE_LEFT - RECSIZ_SIZ,MAXRECSIZ);
	END;
IF .STATUS NEQ RMS$_EOF
THEN	BEGIN
	SIGNAL(	SHR$_READERR OR MAIL$V_FACILITY,
		1,RD_ESNAM_DESC,
		.STATUS,.RD_RAB[RAB$L_STV]);
	MAIL$CLOSE_FILE();
	RETURN .STATUS;
	END;
!
! If no new messages found, set current message to first message.  Also, if
! this is the new message file, clear the user's new message flag.
!
IF .MSG_ADR EQL 0					! If no new messages,
THEN	BEGIN
	MSG_ADR = .MSG_BUF_ADR;				! Position to first one
	MAIL$L_MSG_NUM = 1;
	IF CH$EQL(.NAMSIZ,.NAMADR,			! If new message file
		  .MAIL$Q_MSGNAME[DSC$W_LENGTH],
		  .MAIL$Q_MSGNAME[DSC$A_POINTER],0)
	THEN
		MAIL$CLRNEW_USER(MAIL$Q_USERNAME);	! Clear user's new count
	END;
RETURN STS$K_SUCCESS
END;


ROUTINE OPEN_NEWFILE =
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine is called to open the new mail message file by first
!	concatenating all the new mail message files into one file.  This
!	is because there is no file sharing, and if the new mail message
!	file is in use, the mail that is being sent must be put in a different
!	file.  This routine copies all the extra files into one file.
!
! INPUTS:
!
!	RD_FAB[FAB$B_DNS] and RD_FAB[FAB$L_DNA] set to user's default
!	directory specification.
!
! OUTPUTS:
!
!	RD_FAB is open and RD_RAB is connected to the file.
!--
BEGIN
LITERAL
	FIDS = 64;					! Allow 64 file ID's
STRUCTURE
	FIDVECTOR[FIDNUM,FIDFIELD;N] =			! FID vector
		[N*6] (FIDVECTOR+((FIDNUM-1)*6)+(FIDFIELD*2)) <0,16,0>;
LOCAL
	STATUS,						! Routine status
	FID:		FIDVECTOR[FIDS],		! Message file ID's
	CUR_FID:	LONG,				! Current ID
	FAB:		BLOCK[FAB$C_BLN,BYTE],		! Temporary FAB
	RAB:		BLOCK[RAB$C_BLN,BYTE],		! Temporary RAB
	BUFF:		BLOCK[MAIL$K_INBUFFSZ,BYTE];	! Temporary I/O buffer
!
! Find all the newmail message files.
!
CUR_FID = 0;						! Init file ID index
RD_FAB[FAB$B_FNS] = %CHARCOUNT(DEFFILENAM,DEFFILETYP,';*');
RD_FAB[FAB$L_FNA] = UPLIT BYTE(DEFFILENAM,DEFFILETYP,';*');
IF_ERR(	$PARSE(FAB = RD_FAB);,RETURN .STATUS);	! Parse the file name
!
! Search for all the files and save the file IDs
!
WHILE (STATUS = $SEARCH(FAB = RD_FAB)) AND (.CUR_FID LSS FIDS)
DO	BEGIN
	CUR_FID = .CUR_FID + 1;
	FID[.CUR_FID,0] = .RD_NAM[NAM$W_FID_NUM];
	FID[.CUR_FID,1] = .RD_NAM[NAM$W_FID_SEQ];
	FID[.CUR_FID,2] = .RD_NAM[NAM$W_FID_RVN];
	END;
IF NOT .STATUS AND (.STATUS NEQ RMS$_NMF) THEN RETURN .STATUS;
!
! Open the oldest file (the last one found).
!
RD_NAM[NAM$W_FID_NUM] = .FID[.CUR_FID,0]; 		! Set file ID
RD_NAM[NAM$W_FID_SEQ] = .FID[.CUR_FID,1];
RD_NAM[NAM$W_FID_RVN] = .FID[.CUR_FID,2];
RD_FAB[FAB$V_NAM] =  1;					! Open by file ID
STATUS = $OPEN(FAB = RD_FAB);				! Open file
RD_FAB[FAB$V_NAM] = 0;					! Clear open by file ID
IF NOT .STATUS THEN RETURN .STATUS;			! Check open status
CUR_FID = .CUR_FID - 1;					! Decrement file ID count
RD_RAB[RAB$V_EOF] = 1;					! Set to end-of-file
$CONNECT(RAB = RD_RAB);					! Connect stream
RD_RAB[RAB$V_EOF] = 0;					! Clear EOF flag

!
! If there are any more files, open them and append their contents to the
! end of the last file.
!
IF .CUR_FID GTR 0
THEN	BEGIN
	$FAB_INIT(	FAB=FAB,			! Create a FAB
			FAC=GET,			!  GET access only
			FOP=<SQO,			!  Sequential only
			     NAM>,			!  Open by NAM block
			NAM=RD_NAM);			!  NAM block addr
	$RAB_INIT(	RAB=RAB,			! Create a RAB
			FAB=FAB,			!  FAB address
			ROP=<RAH,			!  Read-ahead
			     LOC>,			!  Locate mode
			UBF=BUFF,			!  Record buffer addr
			USZ=MAIL$K_INBUFFSZ);		!  Record buffer size
	!
	! Open the next file
	!
	DO	BEGIN
		RD_NAM[NAM$W_FID_NUM] = .FID[.CUR_FID,0]; ! Set file ID
		RD_NAM[NAM$W_FID_SEQ] = .FID[.CUR_FID,1];
		RD_NAM[NAM$W_FID_RVN] = .FID[.CUR_FID,2];
		IF_ERR($OPEN(FAB = FAB);,$CLOSE(FAB = RD_FAB); RETURN .STATUS);
		$CONNECT(RAB = RAB);
		RD_FAB[FAB$L_ALQ] = .FAB[FAB$L_ALQ] +	! Add file's size
					.RD_FAB[FAB$L_ALQ];
		!
		! Append all the records to the end of the file
		!
		WHILE STATUS = $GET(RAB = RAB)
		DO	BEGIN
			RD_RAB[RAB$W_RSZ] = .RAB[RAB$W_RSZ];
			RD_RAB[RAB$L_RBF] = .RAB[RAB$L_RBF];
			STATUS = $PUT(RAB = RD_RAB);
			IF NOT .STATUS THEN EXITLOOP;
			END;

		IF .STATUS NEQ RMS$_EOF			! Check for failure
		THEN ($CLOSE(FAB = FAB); $CLOSE(FAB = RD_FAB) ;RETURN .STATUS);
		$FLUSH(RAB = RD_RAB);			! Force disk update
		FAB[FAB$V_DLT] = 1;			! Delete other file
		$SETPRV(ENBFLG=1,PRVADR=SYSPRV);	! Enable system UIC
		$CLOSE(FAB = FAB);			! Close and delete
		$SETPRV(ENBFLG=0,PRVADR=SYSPRV);	! Disable system UIC
		FAB[FAB$V_DLT] = 0;
		END
	WHILE (CUR_FID = .CUR_FID - 1) GTR 0;		! Open all files
	END;
$REWIND(RAB = RD_RAB);					! Rewind message file
RETURN STS$K_SUCCESS
END;


END
ELUDOM
