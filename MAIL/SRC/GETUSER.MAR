	.TITLE	GETUSER		GET USER AUTHORIZATION INFO
	.IDENT	'V03-000'
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY:	VAX/VMS MAIL UTILITY
;
; ABSTRACT:	GET USER AUTHORIZATION INFO
;
;
; ENVIRONMENT:	NATIVE/USER MODE 
;
; AUTHOR:	LEN KAWELL, CREATION DATE: 23-AUG-78
;
; MODIFICATION HISTORY:
;
;	V03-001	PCA001		Paul Anagnostopoulos	18-Jan-1982
;		Add some general addressing.
;--
	.PAGE
	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;

;
; MACROS:
;

;
; EQUATED SYMBOLS:
;
	$PRVDEF				;PROCESS PRIVILEGE DEFINITIONS
	$UAFDEF	GLOBAL			;USER AUTHORIZATION FILE DEFINTITIONS
UAF$S_USERNAME	== 12			;USER NAME SIZE
	$SHRDEF				;SHARED MESSAGE DEFINTIONS
	$STSDEF				;STATUS MESSAGE DEFINITIONS

USERNAME	= 4			;USER NAME ARGUMENT OFFSET
REC_ADDR	= 8			;RECORD ADDRESS ARGUMENT OFFSET

RETRY_RLK 	= 2			;NUMBER OF RETRIES IF RECORD IS LOCKED
SLEEP_RLK	= 75			;MSEC TO SLEEP BEFORE RETRYING A $GET

;
; OWN STORAGE:
;
	.PSECT	$OWN$,LONG,RD,WRT,NOEXE

	.ALIGN	LONG

UAF_FAB:				;USER AUTHORIZATION FILE FAB
	$FAB-
	DNM=<SYS$SYSTEM:.DAT>,-		; DEFAULT NAME
	FNM=<SYSUAF>,-			; FILE NAME (SEPARATED FOR: $ DEFINE SYSUAF XXX)
	FAC=<GET,UPD>,-			; GET AND UPDATE ACCESS
	SHR=<PUT,GET,DEL,UPD>		; SHARED ACCESS

UAF_RAB:				;USER AUTHORIZATION FILE RAB
	$RAB-
	FAB=UAF_FAB,-			; ADDR OF FAB
	KBF=NAME_BUFF,-			; KEY BUFFER
	KSZ=UAF$S_USERNAME,-		; KEY SIZE
	RAC=KEY,-			; RECORD ACCESS BY KEY
	ROP=RLK,-			; READ OF LOCKED RECORD ALLOWED
	USZ=UAF$C_LENGTH,-		; BUFFER SIZE
	UBF=MAIL$T_UAF_BUFF		; BUFFER ADDRESS

MAIL$T_UAF_BUFF::			;USER AUTHORIZATION FILE BUFFER
	.BLKB	UAF$C_LENGTH

NAME_BUFF:				;USER NAME BUFFER
	.BLKB	UAF$S_USERNAME

	.PSECT	$PLIT$,LONG,RD,NOWRT,NOEXE

WAKEDELTA:				;LOCKED RECORD RETRY HIBERNATE TIME
	.LONG	-10*1000*SLEEP_RLK,-1

SYSPRV:					;SYSTEM UIC PRIVILEGE MASK
	.LONG	1@PRV$V_SYSPRV,0

	.PSECT	$CODE$,LONG,RD,NOWRT,EXE

	.PAGE
	.SBTTL	MAIL$OPEN_UAF
;++
; FUNCTIONAL DESCRIPTION:
;
;	OPEN SYSTEM USER AUTHORIZATION FILE
;
; CALLING SEQUENCE:
;	CALL MAIL$OPEN_UAF
;
; INPUT PARAMETERS:
;	NONE
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	R0 = SUCCESS OR FAILURE
;
; SIDE EFFECTS:
;	FAILURES SIGNALLED.
;
;--
	.ENTRY	MAIL$OPEN_UAF,0		;OPEN USER AUTHORIZATION FILE
	$SETPRV_S ENBFLG=#1,PRVADR=SYSPRV ;ENABLE SYSTEM UIC PRIVILEGE
	$OPEN	UAF_FAB			;OPEN AUTHORIZATION FILE
	PUSHL	R0			;SAVE STATUS
	$SETPRV_S ENBFLG=#0,PRVADR=SYSPRV ;DISABLE SYSTEM UIC PRIVILEGE
	POPL	R0			;RESTORE STATUS
	BLBC	R0,10$			;BR IF ERROR
	$CONNECT UAF_RAB		;CONNECT THE RAB
	BLBS	R0,20$			;BR IF SUCCESS
10$:
	PUSHL	FAB$L_STV+UAF_FAB	;SET RMS STATUS VALUE
	PUSHL	R0			;SET RMS STATUS
	PUSHL	#0			;SET FAO COUNT
	PUSHL	#MAIL$_UAFOPNERR	;SET ERROR STATUS
	CALLS	#4,G^LIB$SIGNAL		;SIGNAL THE ERROR
	BISL	#STS$M_INHIB_MSG,R0	;INHIBIT FURTHER MESSAGES
20$:
	RET

	.PAGE
	.SBTTL	MAIL$GET_USER
;++
; FUNCTIONAL DESCRIPTION:
;
;	GET AND (IF MAIL$GETLK_USER) LOCK USER ATHORIZATION RECORD.
;
; CALLING SEQUENCE:
;	CALL MAIL$GET_USER(USERNAME)
;	CALL MAIL$GETLK_USER(USERNAME)
;
; INPUT PARAMETERS:
;	USERNAME = ADDR OF USERNAME DESC
;
; IMPLICIT INPUTS:
;	UAF_FAB IS OPEN AND UAF_RAB IS CONNECTED TO IT.
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	MAIL$T_UAF_BUFF = USER AUTHORIZATION RECORD.
;
; COMPLETION CODES:
;	R0 = SUCCESS OR FAILURE.
;
; SIDE EFFECTS:
;	FAILURES SIGNALLED.
;
;--
	.ENTRY	MAIL$GET_USER,-		;GET USER AUTHORIZATION RECORD
		^M<R2,R3,R4,R5>		;
	BISL	#RAB$M_NLK,RAB$L_ROP+UAF_RAB ;SET NO-LOCK FLAG
	BRB	GET_IT			;

	.ENTRY	MAIL$GETLK_USER,-	;GET AND LOCK USER AUTHORIZATION RECORD
		^M<R2,R3,R4,R5>		;
	BICL	#RAB$M_NLK,RAB$L_ROP+UAF_RAB ;CLEAR NO-LOCK FLAG
;
; GET THE RECORD
;
GET_IT:					;
	MOVL	USERNAME(AP),R4		;GET ADDR OF USERNAME DESC
	MOVC5	(R4),@4(R4),#^A" ",#UAF$S_USERNAME,NAME_BUFF ;BLANK FILL NAME
	MOVL	#RETRY_RLK,R3		;INIT RETRY COUNTER
	BRB	20$			;SKIP WAIT THE FIRST TIME
10$:	$SCHDWK_S DAYTIM=WAKEDELTA	;SCHEDULE A WAKEUP REQUEST
	BLBC	R0,20$			;BR IF FAILURE
	$HIBER_S			;HIBERNATE FOR A WHILE
20$:	$GET	UAF_RAB			;GET THE USER'S RECORD
	BLBS	R0,30$			;BR IF SUCCESS
	CMPL	R0,#RMS$_RLK		;RECORD LOCK ERROR?
	BNEQ	GET_ERR			;BR IF NOT
	SOBGEQ	R3,10$			;TRY AGAIN IF IT WAS
	BRB	GET_ERR			;
30$:
	RET
;
; ERROR GETTING RECORD
;
GET_ERR:				;ERROR READING UAF
	CMPL	#RMS$_RNF,R0		;RECORD NOT FOUND?
	BNEQ	10$			;IF NEQ NO - SOME OTHER ERROR
	PUSHAQ	@USERNAME(AP)		;SET ADDR OF USERNAME DESC
	PUSHL	#1			;SET NUMBER OF FAO ARGUMENTS
	PUSHL	#MAIL$_NOSUCHUSR	;SET ERROR STATUS
	CALLS	#3,G^LIB$SIGNAL		;SIGNAL THE ERROR
	RET
10$:
	PUSHL	RAB$L_STV+UAF_RAB	;SET RMS STATUS VALUE
	PUSHL	R0			;SET RMS STATUS
	PUSHL	#0			;SET FAO COUNT
	PUSHL	#MAIL$_UAFGETERR	;SET ERROR STATUS
	CALLS	#3,G^LIB$SIGNAL		;SIGNAL THE ERROR
	RET

	.PAGE
	.SBTTL	MAIL$UPDATE_USER
;++
; FUNCTIONAL DESCRIPTION:
;
;	UPDATE USER ATHORIZATION RECORD
;
; CALLING SEQUENCE:
;	CALL MAIL$UPDATE_USER()
;
; INPUT PARAMETERS:
;	NONE
;
; IMPLICIT INPUTS:
;	UAF_FAB IS OPEN AND UAF_RAB IS CONNECTED TO IT.
;	UAF_RAB(RAB$W_RFA) = RECORD ADDRESS TO BE UPDATED.
;	MAIL$T_UAF_BUFF = RECORD TO BE UPDATED.
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	R0 = SUCCESS OR FAILURE.
;
; SIDE EFFECTS:
;	FAILURES SIGNALLED.
;
;--
	.ENTRY	MAIL$UPDATE_USER,0	;UPDATE USER AUTHORIZATION RECORD
	$UPDATE	UAF_RAB			;UPDATE USER AUTHORIZATION RECORD
	BLBS	R0,10$			;BR IF SUCCESS
	PUSHL	RAB$L_STV+UAF_RAB	;SET RMS STATUS VALUE
	PUSHL	R0			;SET RMS STATUS
	CALLS	#2,G^LIB$SIGNAL		;SIGNAL THE FAILURE
10$:
	RET				;RETURN

	.PAGE
	.SBTTL	MAIL$DECNEW_USER
;++
; FUNCTIONAL DESCRIPTION:
;
;	THIS ROUTINE IS CALLED TO DECREMENT THE USER'S NEW MESSAGE
;	COUNT.
;
; INPUTS:
;
;	USERNAME = ADDRESS OF USER NAME DESCRIPTOR.
;
; OUTPUTS:
;
;	UAF$W_MAIL = UAF$W_MAIL - 1
;--
	.ENTRY	MAIL$DECNEW_USER,0
	CALLG	(AP),MAIL$GETLK_USER	;GET AND LOCK USER'S RECORD
	BLBC	R0,20$			;
	MOVAB	MAIL$T_UAF_BUFF,R1	;GET ADDRESS OF UAF RECORD
	TSTW	UAF$W_MAIL(R1)		;ALREADY ZERO?
	BEQL	10$			;IF EQL YES
	DECW	UAF$W_MAIL(R1)		;ELSE, DECREMENT COUNT
10$:	CALLS	#0,MAIL$UPDATE_USER	;UPDATE USER'S RECORD
20$:	RET

	.PAGE
	.SBTTL	MAIL$CLRNEW_USER
;++
; FUNCTIONAL DESCRIPTION:
;
;	THIS ROUTINE IS CALLED TO CLEAR THE USER'S NEW MESSAGE
;	COUNT.
;
; INPUTS:
;
;	USERNAME = ADDRESS OF USER NAME DESCRIPTOR.
;
; OUTPUTS:
;
;	UAF$W_MAIL = Zero.
;--
	.ENTRY	MAIL$CLRNEW_USER,0
	CALLG	(AP),MAIL$GETLK_USER	;GET AND LOCK USER'S RECORD
	BLBC	R0,10$			;
	MOVAB	MAIL$T_UAF_BUFF,R1	;GET ADDRESS OF UAF RECORD
	CLRW	UAF$W_MAIL(R1)		;ZERO IT
	CALLS	#0,MAIL$UPDATE_USER	;UPDATE USER'S RECORD
10$:	RET

	.END
