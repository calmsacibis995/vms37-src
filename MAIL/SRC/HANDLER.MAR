	.TITLE	HANDLER	- CONDITION HANDLER
	.IDENT	'V03-000'
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY:	VAX/VMS MAIL UTILITY
;
; ABSTRACT:	CONDITION HANDLER
;
;
; ENVIRONMENT:	NATIVE/USER MODE 
;
; AUTHOR:	LEN KAWELL, CREATION DATE: 2-FEB-79
;
; MODIFICATION HISTORY:
;
;	V03-001 PCA001		Paul Anagnostopoulos	18-Jan-1982
;		Add some general addressing.
;
;	V02-002	PCG001		Peter George		11-FEB-1981
;		Remove global attribute from $MAILMSGDEF
;		since MAILMSGS is now included in MAIL.OLB.
;
;--
	.PAGE
	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;

;
; EQUATED SYMBOLS:
;
	$CHFDEF				;CONDITION HANDLER DEFINITIONS
	$MAILMSGDEF			;MAIL MESSAGE DEFINITIONS
	$SHRDEF		GLOBAL		;SHARED MESSAGE DEFINITIONS
	$STSDEF				;STATUS CODE DEFINTIONS

;
; LOCAL MACROS:
;

;
; OWN STORAGE:
;

	.PSECT	$CODE$,NOWRT,EXE

	.PAGE
	.SBTTL	CONDITION HANDLER
;++
; FUNCTIONAL DESCRIPTION:
;
;	OUTPUTS ERROR MESSAGE USING SYS$PUTMSG
;
; CALLING SEQUENCE:
;	CALLED BY AN EXCEPTION OR LIB$SIGNAL
;
; INPUT PARAMETERS:
;	STANDARD CONDITION HANDLER ARGUMENTS
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	ERROR MESSAGE OUTPUT
;
;--
	.ENTRY	MAIL$HANDLE,-		;CONDITION HANDLER
		^M<R2,R3,R4,R5>		;(ENTRY MASK)
	MOVL	CHF$L_SIGARGLST(AP),R2	;GET ADDR OF CONDITION ARRAY
;
; IF NETWORK JOB, SEND SIGNALLED STATUS VALUE TO OUR MASTER
;
	BLBC	MAIL$B_NET_JOB,PUT_MESSAGE ;BR IF NOT NETWORK JOB
	PUSHAL	CHF$L_SIG_NAME(R2)	;CREATE STATUS VALUE DESC
	PUSHL	#4			;
	PUSHAL	(SP)			;SEND THE STATUS VALUE
	CALLS	#1,MAIL$PUT_OUTPUT	;TO MASTER MAIL JOB
	BLBS	R0,10$			;BR IF SUCCESS
	BRW	EXIT			;ELSE - EXIT WITH FAILURE STATUS
10$:
	BLBC	CHF$L_SIG_NAME(R2),PUT_MESSAGE ;IF ERROR, OUTPUT ERROR MESSAGE
	BRW	CONTINUE		;ELSE - JUST CONTINUE
;
; OUTPUT THE ERROR MESSAGE
;
PUT_MESSAGE:				;
	SUBW	#2,CHF$L_SIG_ARGS(R2)	;DON'T PASS PC & PSL
	$PUTMSG_S MSGVEC=(R2),-		;OUTPUT THE MESSAGE(S)
		  ACTRTN=ACTION_ROUTINE	;
	BLBC	R0,EXIT			;BR IF FAILURE
;
; IF NETWORK JOB, SEND END OF MESSAGES FLAG
;
END_OF_MESS:				;SEND END OF MESSAGES FLAG
	BLBC	MAIL$B_NET_JOB,CONTINUE	;BR IF NOT A NETWORK JOB
	PUSHL	#0			;END OF MESSAGES FLAG
	PUSHL	SP			;CREATE FLAG DESC
	PUSHL	#1			;
	PUSHAQ	(SP)			;SEND THE FLAG
	CALLS	#1,MAIL$PUT_OUTPUT	;TO MASTER MAIL JOB
;
; CONTINUE IF CONDITION WASN'T SEVERE ERROR
;
CONTINUE:				;CONTINUE IF POSSIBLE
	MOVL	CHF$L_SIGARGLST(AP),R2	;GET ADDR OF CONDITION ARRAY AGAIN
	BISL3	#STS$M_INHIB_MSG,-	;GET STATUS AND INHIBIT MESSAGE
		CHF$L_SIG_NAME(R2),R0	;
	CMPZV	#STS$V_SEVERITY,-	;WAS THIS A SEVERE ERROR?
		#STS$S_SEVERITY,R0,#STS$K_SEVERE
	BEQLU	EXIT			;IF SO - EXIT
	MOVZWL	#SS$_CONTINUE,R0	;SET STATUS
	RET

;
; EXIT WITH STATUS
;
EXIT:					;EXIT IMAGE
	$EXIT_S R0			;

	.PAGE
;++
; ACTION_ROUTINE - SYS$PUTMSG ACTION ROUTINE
;
; 	THIS ROUTINE IS CALLED TO PUT AN ERROR MESSAGE TO SYS$OUTPUT.
;	USING THIS ROUTINE FORCES ALL OUTPUT THROUGH MAIL$PUT_OUTPUT.
;
; INPUTS:
;
;	4(AP) = ADDRESS OF MESSAGE DESCRIPTOR
;
; OUTPUTS;
;
;	MESSAGE OUTPUT TO OUTPUT FILE.
;
;--
ACTION_ROUTINE:				;SYS$PUTMSG ACTION ROUTINE
	.WORD	0			;(ENTRY MASK)
	CALLG	(AP),MAIL$PUT_OUTPUT	;
	BLBC	R0,EXIT			;BR IF FAILURE
	BLBC	MAIL$B_NET_JOB,10$	;BR IF NOT A NETWORK JOB
	CALLG	(AP),G^LIB$PUT_OUTPUT	;PUT MESSAGE IN LOG FILE TOO
10$:
	CLRL	R0			;DON'T OUTPUT ANYTHING 
	RET				;

	.END
