	.TITLE	ADDRLIST	ADDRESSEE LIST ROUTINES
	.IDENT	'V03-000'
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY:	VAX/VMS MAIL UTILITY
;
; ABSTRACT:	ADDRESSEE LIST ROUTINES
;
;
; ENVIRONMENT:	NATIVE/USER MODE 
;
; AUTHOR:	LEN KAWELL, CREATION DATE: 22-NOV-78
;
; MODIFICATION HISTORY:
;
;	V02-004	LMK0003		LEN KAWELL		23-OCT-1980
;		Add check for "_" to turn off logical name translation.
;
;	V02-003	LMK0002		LEN KAWELL		17-JUN-1980
;		Add an error handler to display the addressee that was
;		being sent to when an error occured.
;
;	V02-002	LMK0001		LEN KAWELL		25-MAR-1980
;		FIX MAIL$INI_ADDR LOOP.
;--
	.PAGE
	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;

;
; MACROS:
;

;
; EQUATED SYMBOLS:
;

ADDR		= 4			;ADDRESSEE NAME DESC ADDR ARG
FAB		= 4			;MESSAGE FILE FAB ADDR ARG
RAB		= 8			;MESSAGE FILE RAB ADDR ARG

COMMA		= 44			;ASCII COMMA
MAIL$K_INBUFFSZ	= 255			;INPUT BUFFER SIZE

	$CHFDEF				;CONDITION HANDLER DEFINITIONS
	$FABDEF				;FILE ACCESS BLOCK DEFINITIONS
	$RABDEF				;RECORD ACCESS BLOCK DEFINITIONS
	$STSDEF				;STATUS CODE DEFINITIONS
	$TPADEF				;TPARSE DEFINITIONS

	$DEFINI	ADR			;ADRESSEE LIST ENTRIES
ADR_L_FLINK:	.BLKL	1		;FORWARD LINK TO NEXT ENTRY
ADR_L_BLINK:	.BLKL	1		;BACKWARD LINK TO PREVIOUS ENTRY
ADR_L_SIZE:	.BLKL	1		;SIZE OF ENTRY
ADR_W_PRIFI:	.BLKW	1		;PRINTER RMS INTERNAL FILE ID
					; 0 = LOCAL (NON-NETWORK) USER
ADR_L_LLNK:	.BLKL	1		;LOGICAL LINK ENTRY ADDRESS
					; 0 = LOCAL (NON-NETWORK) USER
ADR_T_NAME:				;USER NAME STRING (COUNTED)
ADR_K_LENGTH:				; LENGTH OF STRUCTURE LESS NAME
	$DEFEND	ADR

;
; OWN STORAGE:
;
	.PSECT	$OWN$,LONG,RD,WRT,NOEXE

ADDR_LIST:				;ADDRESSEE LISTHEAD
	.LONG	ADDR_LIST,ADDR_LIST
LOGNAME:				;LOGICAL NAME STRING DESC
	.BLKL	2
LOGICAL_LINK:				;LOGICAL LINK LIST ENTRY ADDRESS
	.BLKL	1

	.PSECT	$PLIT$,LONG,RD,NOWRT,NOEXE

DIST_TYPE:				;DISTRIBUTION LIST FILE TYPE
	.ASCII	/.DIS/
DIST_TYPE_SIZ = .-DIST_TYPE

	.PSECT	$CODE$,LONG,RD,NOWRT,EXE
	.DEFAULT DISPLACEMENT,WORD

	.PAGE
	.SBTTL	ADD ADDRESSEE TO ADDRESSEE LIST
;++
; FUNCTIONAL DESCRIPTION:
;
;	PARSE ADDRESSEE NAMES AND ADD TO ADDRESSEE LIST.
;
; CALLING SEQUENCE:
;	CALL MAIL$ADD_ADDR(ADDR)
;
; INPUT PARAMETERS:
;	ADDR(AP) = ADDRESSEE NAME(S) DESC
;
; IMPLICIT INPUTS:
;	ADDR_LIST = ADDRESSEE LIST LISTHEAD.
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	ADDRESSEE LIST ENTRIES CREATED FOR ADDRESSEE(S) AND ENTERED
;	INTO ADDRESSEE LIST.  IF AN ADDRESSEE IS LOCATED ON A REMOTE
;	SYSTEM, A LOGICAL LINK AND LOGICAL LINK LIST ENTRY ARE ALSO
;	CREATED.
;
; COMPLETION CODES:
;	R0 = SUCCESS IF ALL ADDRESSEES FOUND SUCCESSFULLY,
;	   = WARNING IF AT LEAST ONE ADDRESSEE FOUND SUCCESSFULLY,
;	   = ERROR IF NO ADDRESSEES FOUND OR SYNTAX ERROR IN LIST.
;
; SIDE EFFECTS:
;	IF FAILURE, ERROR IS SIGNALED.
;
;--
	.ENTRY	MAIL$ADD_ADDR,-		;ADD ADDRESSEE TO LIST
		^M<R2>			;(ENTRY MASK)
	MOVAB	-<TPA$K_LENGTH0>(SP),SP ;CREATE TPARSE PARAMETER BLOCK
	MOVL	SP,R2			;GET ADDR OF IT
	MOVL	#TPA$K_COUNT0,(R2)	;SET PARAMETER COUNT
	MOVL	#1,TPA$L_PARAM(R2)	;USE PARAMETER FOR STATUS - ASSUME SUCCESS
	MOVL	ADDR(AP),R0		;GET ADDRESSEE DESC ADDR
	MOVZWL	(R0),TPA$L_STRINGCNT(R2) ;SET SIZE OF ADDRESSEE
	MOVL	4(R0),TPA$L_STRINGPTR(R2) ;SET ADDR OF ADDRESSEE
	PUSHAL	ADDR_KEY		;SET KEYWORD TABLE ADDRESS
	PUSHAL	ADDR_STATE		;SET STATE TABLE ADDRESS
	PUSHAL	(R2)			;SET PARAMETER BLOCK ADDRESS
	CALLS	#3,G^LIB$TPARSE		;PARSE ADDRESSEE NAME
	BLBS	R0,10$			;BR IF SUCCESS
	PUSHAL	TPA$L_TOKENCNT(R2)	;SET ADDR OF TOKEN DESCRIPTOR
	PUSHL	#1			;ONE FAO ARGUMENT
	PUSHL	#SHR$_SYNTAX ! -	;SET SYNTAX ERROR MESSAGE
		<MAIL$_FACILITY @ STS$V_FAC_NO> ! STS$K_ERROR
	CALLS	#3,G^LIB$SIGNAL		;SIGNAL THE ERROR
	RET				;RETURN
10$:
	BLBS	TPA$L_PARAM(R2),20$	;BR IF COMPLETE SUCCESS
	MOVL	#STS$K_WARNING,R0	;ASSUME AT LEAST PARTIAL SUCCESS
	CMPL	ADDR_LIST,#ADDR_LIST	;ANY ADDRESSEES ENTERED IN LIST?
	BNEQ	20$			;BR IF YES
	MOVL	#STS$K_ERROR,R0		;ELSE - ERROR
20$:
	RET				;RETURN
	.PAGE
	.SBTTL	ADDRESSEE PARSING STATE TABLE
;++
;
; PARSE "TO:" LIST AND FILL IN LINK AND ADDRESSEE TABLES
;
;	PARSES LISTS WITH THE FOLLOWING FORMAT:
;
;		ADDRESSEE,ADDRESSEE,...,ADDRESSEE
;
;	WHERE "ADDRESSEE" HAS THE FOLLOWING FORMAT:
;
;		[NODE1::][NODE2::]...[NODEN::]USERNAME
;
;	WHERE USERNAME CAN ALSO BE A UIC/PPN FOR RSX/RSTS SYSTEMS.
;
;	LIST CAN ALSO HAVE A "@FILESPEC" AS LAST TOKEN, WHERE
;	THE FILE CONTAINS A LIST OF ADDRESSEES.
;
;--
	$INIT_STATE ADDR_STATE,ADDR_KEY
	$STATE	NEXT_ADDR
	$TRAN	TPA$_EOS,TPA$_EXIT
	$TRAN	'!',TPA$_EXIT
	$TRAN	COMMA,NEXT_ADDR
	$TRAN	'+',NEXT_ADDR
	$TRAN	'@',DIST_PARSE
	$TRAN	'"',QDIST_PARSE
	$TRAN	!NODE1_SPEC
	$TRAN	TPA$_SYMBOL,,,,LOGNAME

	$STATE
	$TRAN	!SCAN_ADDR,NEXT_ADDR,ENTER_ADDR
	$STATE	SCAN_ADDR
	$TRAN	!NODE_SPEC,SCAN_ADDR
	$TRAN	!USER_SPEC,TPA$_EXIT
	$TRAN	TPA$_LAMBDA,TPA$_EXIT
;
; DISTRIBUTION LIST PARSING
;
	$STATE	DIST_PARSE
	$TRAN	!FILE_SPEC,TPA$_EXIT,GET_DIST_LIST
	$STATE	FILE_SPEC
	$TRAN	TPA$_EOS,TPA$_EXIT
	$TRAN	TPA$_ANY,FILE_SPEC
;
; QUOTED DISTRIBUTION LIST PARSING
;
	$STATE	QDIST_PARSE
	$TRAN	'@'
	$STATE
	$TRAN	!QFILE_SPEC,TPA$_EXIT,GET_DIST_LIST
	$STATE	QFILE_SPEC
	$TRAN	!NOT_QEOS,QFILE_SPEC
	$TRAN	TPA$_LAMBDA,TPA$_EXIT
	$STATE	NOT_QEOS
	$TRAN	'"'
	$TRAN	TPA$_ANY,TPA$_EXIT
	$STATE
	$TRAN	TPA$_EOS,TPA$_FAIL
	$TRAN	TPA$_ANY,TPA$_EXIT
;
; NODE SPECIFICATION SUB-EXPRESSION PARSING
;
	$STATE	NODE1_SPEC			;FIRST NODENAME PARSING
	$TRAN	TPA$_SYMBOL,NODE_SPECC,,,LOGNAME
	$STATE	NODE_SPEC			;NODENAME PARSING
	$TRAN	TPA$_SYMBOL
	$STATE	NODE_SPECC			;NODENAME CONTINUATION PARSING
	$TRAN	!ACCESS_LIST
	$TRAN	TPA$_LAMBDA
	$STATE
	$TRAN	':'
	$STATE
	$TRAN	':',TPA$_EXIT

	$STATE	ACCESS_LIST			;DECNET ACCESS LIST PARSING
	$TRAN	'"'
	$STATE	ACCESS_SCAN
	$TRAN	'"',TPA$_EXIT
	$TRAN	TPA$_ANY,ACCESS_SCAN
;
; USERNAME/PPN SPECIFICATION SUB-EXPRESSION PARSING
;
	$STATE	USER_SPEC			;USERNAME SPEC PARSING
	$TRAN	TPA$_SYMBOL,TPA$_EXIT
	$TRAN	'['
	$TRAN	'('
	$TRAN	'"',QUSER_SPEC
	$STATE					;UIC/PPN USERSNAME SPEC PARSING
	$TRAN	TPA$_DECIMAL
	$STATE
	$TRAN	COMMA
	$STATE
	$TRAN	TPA$_DECIMAL
	$STATE
	$TRAN	']',TPA$_EXIT
	$TRAN	')',TPA$_EXIT

	$STATE	QUSER_SPEC			;QUOTED USERNAME SPEC PARSING
	$TRAN	'"',TPA$_EXIT
	$TRAN	TPA$_ANY,QUSER_SPEC

	$END_STATE

	.PSECT	$CODE$,LONG,RD,NOWRT,EXE


	.PAGE
	.SBTTL	ENTER_ADDR - ENTER ADDRESSEE IN ADDRESSEE LIST
;++
;
; ENTER_ADDR - ENTER ADDRESSEE IN ADDRESSEE LIST
;
; THIS ACTION ROUTINE IS CALLED TO ENTER AN ADDRESSEE IN THE ADDRESSEE
; LIST.  FIRST, AN ATTEMPT IS MADE TO TRANSLATE THE FIRST SYMBOL IN THE
; ADDRESSEE NAME.  FOR A REMOTE ADDRESSEE THE FIRST SYMBOL IS A NODE NAME,
; OTHERWISE, IT'S JUST A LOGICAL NAME OR A USERNAME.
;
; IF THE SYMBOL TRANSLATES, THE TRANSLATION IS PREFIXED TO THE REST OF THE
; ADDRESSEE STRING (IF ANY) AND THE PARSER IS RECURSIVELY CALLED TO PARSE THE
; NEW ADDRESSEE SPEC AND ENTER THE RESULT IN THE ADDRESSEE LIST.
;
; IF THE SYMBOL DOESN'T TRANSLATE, AND IT WAS A NODE NAME, A LOGICAL LINK
; IS CREATED TO A SLAVE MAIL JOB AND THE REST OF THE ADDRESSEE IS PASSED
; TO THE SLAVE MAIL JOB FOR VERIFICATION.  IF THE SYMBOL ISN'T A NODE NAME,
; IT MUST BE A USER NAME, AND IT'S VERIFIED BY LOOKING FOR A CORRESPONDING
; AUTHORIZATION FILE RECORD.
;
; THE ADDRESSEE IS THEN ENTERED INTO THE ADDRESSEE LIST FOR LATTER USE
; WHEN THE MAIL IS ACTUALLY TO BE SENT.
;
; INPUTS:
;
;	LOGNAME = NODENAME/USERNAME LOGICAL NAME DESCRIPTOR
;
;	IF LOGNAME IS A NODE NAME:
;
;		TPA$L_TOKENCNT(AP) = SIZE OF ADDRESSEE NAME
;		TPA$L_TOKENPTR(AP) = ADDR OF ADDRESSEE NAME
;
; OUTPUTS:
;
;	ADDRESSEE LIST ENTRY CREATED AND ENTERED INTO ADDRESSEE LIST.
;--
ENTER_ADDR:				;ENTER  ADDRESSEE IN LIST
	.WORD	^M<R2,R3,R4,R5>		;(ENTRY MASK)
	MOVAQ	W^LOGNAME,R2		;GET ADDR OF LOGICAL NAME DESC
	CMPB	@4(R2),#^A'_'		;IS IT PREFIXED WITH UNDERSCORE?
	BNEQ	5$			;BR IF NOT
	DECW	(R2)			;REMOVE UNDERSCORE FROM COUNT
	INCL	4(R2)			;AND FROM ADDRESS OF LOGICAL NAME
	BRW	CHECK_ADDR		;SKIP TRANSLATION
;
; SEE IF NODENAME/USERNAME TRANSLATES AS A LOGICAL NAME. IF IT IS, USE 
; TRANSLATION AND RECURSIVELY CALL ADD_ADDR.
;
5$:	MOVAB	-63(SP),SP		;CREATE TRANSLATION BUFFER
	PUSHL	SP			;CREATE BUFFER DESCRIPTOR
	PUSHL	#63			;...
	MOVL	SP,R2			;GET ADDRESS OF DESC
	$TRNLOG_S LOGNAM=LOGNAME,-	;ATTEMPT TO TRANSLATE LOGICAL NAME
		  RSLLEN=(R2),RSLBUF=(R2)
	BLBC	R0,CHECK_ADDR		;BR IF FAILURE
	CMPW	R0,#SS$_NOTRAN		;DOES NAME TRANSLATE?
	BEQL	CHECK_ADDR		;BR IF NOT
	ADDL3	(R2),TPA$L_TOKENCNT(AP),R0 ;COMPUTE SIZE OF NEW ADDRESSEE
	SUBL	R0,SP			;CREATE NEW ADDRESSEE BUFFER
	PUSHL	SP			;CREATE BUFFER DESCRIPTOR
	PUSHL	R0			;...
	MOVC	(R2),@4(R2),8(SP)	;MOVE TRANSLATION TO BUFFER
	MOVC	TPA$L_TOKENCNT(AP),-	;MOVE REST OF OLD ADDRESSEE TO BUFFER
		@TPA$L_TOKENPTR(AP),(R3)
	PUSHL	SP			;SET ADDRESS OF ADDRESSEE DESC
	CALLS	#1,MAIL$ADD_ADDR	;ADD NEW ADDRESSEE TO LIST
	BLBS	R0,10$			;BR IF SUCCESS
	MOVL	R0,TPA$L_PARAM(AP)	;SAVE STATUS
	MOVL	#1,R0			;ALWAYS SET SUCCESS
10$:	RET				;
;
; CHECK IF ADDRESSEE EXISTS
;
CHECK_ADDR:				;
	TSTW	TPA$L_TOKENCNT(AP)	;WAS THERE MORE TO ADDRESSEE THAN NAME?
	BEQL	10$			;IF EQL NO, JUST USERNAME
	PUSHAQ	LOGNAME			;SET ADDRESS OF NODENAME DESCRIPTOR
	PUSHAL	LOGICAL_LINK		;SET ADDRESS OF RETURN ADDRESS BUFFER
	CALLS	#2,MAIL$CREATELINK	;CREATE A LOGICAL LINK TO THE NODE
	BLBC	R0,20$			;BR IF FAILURE
	PUSHAQ	TPA$L_TOKENCNT(AP)	;SET ADDRESS OF ADDRESSEE DESC
	PUSHL	LOGICAL_LINK		;SET ADDRESS OF LOGICAL LINK ENTRY
	BEQL	25$			;BR IF NONE - ERROR ON FIRST LINK CREATION
	CALLS	#2,MAIL$NET_ADDR	;CHECK IF ADDRESSEE EXISTS
	BLBS	R0,CREATE_ADDR		;BR IF SUCCESS
	BRB	20$			;
10$:
	MOVQ	LOGNAME,TPA$L_TOKENCNT(AP) ;MOVE USERNAME DESC TO COMMON DESC
	CLRL	LOGICAL_LINK		;LOCAL ADDRESSEE
	PUSHAQ	LOGNAME			;SET ADDRESS OF USERNAME DESC
	CALLS	#1,MAIL$GET_USER	;CHECK IF USER EXISTS
	BLBS	R0,CREATE_ADDR		;BR IF SUCCESS
20$:
	MOVL	R0,TPA$L_PARAM(AP)	;SAVE FAILURE STATUS
25$:	MOVL	#1,R0			;SET SUCCESS TO CONTINUE PARSE
	RET				;
;
; CREATE ADDRESSEE LIST ENTRY FOR ADDRESSEE
;
CREATE_ADDR:				;CREATE ADDRESSEE LIST ENTRY
	ADDL3	#ADR_K_LENGTH,-		;COMPUTE SIZE OF ENTRY TO ALLOCATE
		TPA$L_TOKENCNT(AP),-(SP)
	INCL	(SP)			;PLUS ONE FOR ADDRESSEE NAME COUNT
	PUSHAL	-(SP)			;CREATE RETURN ADDR BUFFER
	PUSHAL	8(SP)			;SET ADDR OF SIZE
	CALLS	#2,G^LIB$GET_VM		;ALLOCATE LIST ENTRY
	BLBC	R0,10$			;BR IF FAILURE
	MOVL	(SP)+,R2		;GET ADDR OF NEW ENTRY
	MOVL	(SP)+,ADR_L_SIZE(R2)	;SAVE SIZE OF ENTRY
	INSQUE	(R2),@ADDR_LIST+4	;INSERT AT END OF ADDRESSEE LIST
	MOVL	LOGICAL_LINK,-		;SET ADDR OF LOGICAL LINK ENTRY
		ADR_L_LLNK(R2)		;
	MOVB	TPA$L_TOKENCNT(AP),-	;SET ADDRESSEE NAME SIZE
		ADR_T_NAME(R2)		;
	MOVC	TPA$L_TOKENCNT(AP),-	;SET ADDRESSEE NAME
		@TPA$L_TOKENPTR(AP),ADR_T_NAME+1(R2)
	MOVL	#1,R0			;SET SUCCESS
	RET				;
10$:
	PUSHL	R0			;SET FAILURE STATUS
	CALLS	#1,G^LIB$SIGNAL		;SIGNAL THE FAILURE
	MOVL	R0,TPA$L_PARAM(AP)	;SAVE STATUS
	MOVL	#1,R0			;SET SUCCESS TO CONTINUE PARSE
	RET				;

	.PAGE
	.SBTTL	GET_DIST_LIST - GET DISTRIBUTION LIST
;++
;
; GET_DIST_LIST - GET DISTRIBUTION LIST ACTION ROUTINE
;
; THIS ACTION ROUTINE IS CALLED TO OPEN AND READ A DISTRIBUTION LIST FILE.
;
; INPUTS:
;
;	TPA$L_TOKENCNT(AP) = SIZE OF FILE SPECIFICATION.
;	TPA$L_TOKENPTR(AP) = ADDR OF FILE SPECIFICATION.
;
; OUTPUTS:
;
;	EACH ADDRESSEE IS READ FROM THE DISTRIBUTION LIST FILE AND 
;	ADDED TO THE ADDRESSEE LIST BY RECURSIVELY CALLING ADD_ADDR.
;--
GET_DIST_LIST:				;GET DISTRIBUTION LIST
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11> ;(ENTRY MASK)
;
; CREATE A FAB AND A RAB
;
	MOVAB	-FAB$K_BLN(SP),R6	;ALLOCATE FAB
	MOVAB	-RAB$K_BLN(R6),R7	;ALLOCATE RAB
	MOVL	R7,SP			;ALLOCATE THE SPACE
	MOVC5	#0,(SP),#0,#FAB$K_BLN+RAB$K_BLN,(SP) ;ZERO FAB AND RAB
	ASSUME	FAB$B_BLN EQ FAB$B_BID+1
	MOVW	#FAB$K_BLN@8!FAB$C_BID,- ;SET BLOCK LENGTH AND ID FIELDS
		FAB$B_BID(R6)
	BISB	#FAB$M_GET,FAB$B_FAC(R6);GET ACCESS ONLY
	ASSUME	RAB$B_BLN EQ RAB$B_BID+1
	MOVW	#RAB$K_BLN@8!RAB$C_BID,- ;SET BLOCK LENGTH AND ID FIELDS
		RAB$B_BID(R7)
	ASSUME	RAB$C_SEQ EQ 0
	MOVL	R6,RAB$L_FAB(R7)	;SET FAB ADDRESS
	MOVAB	-MAIL$K_INBUFFSZ(SP),SP	;ALLOCATE USER BUFFER
	MOVW	#MAIL$K_INBUFFSZ,RAB$W_USZ(R7) ;SET USER BUFFER SIZE
	MOVL	SP,RAB$L_UBF(R7)	;SET USER BUFFER ADDRESS
;
; OPEN THE DISTRIBUTION LIST FILE
;
	MOVB	TPA$L_TOKENCNT(AP),FAB$B_FNS(R6) ;SET FILE NAME SIZE
	MOVL	TPA$L_TOKENPTR(AP),FAB$L_FNA(R6) ;SET FILE NAME ADDRESS
	MOVAB	DIST_TYPE,FAB$L_DNA(R6)	;SET DEFAULT FILE NAME ADDRESS
	MOVB	#DIST_TYPE_SIZ,FAB$B_DNS(R6) ;SET DEFAULT FILE NAME SIZE
	$OPEN	(R6)			;OPEN THE FILE
	BLBC	R0,DIST_OPEN_ERROR	;BR IF FAILURE
	$CONNECT (R7)			;CONNECT THE RAB
	BLBC	R0,DIST_OPEN_ERROR	;BR IF FAILURE
;
; READ ALL THE ADDRESSEES AND ADD THEM TO THE ADDRESSEE LIST
;
	CLRQ	-(SP)			;CREATE ADDRESSEE DESC BUFFER
DIST_LOOP:
	$GET	(R7)			;GET A RECORD
	BLBC	R0,DIST_READ_ERROR	;BR IF EOF OR ERROR
	CMPB	#^A"!",@RAB$L_RBF(R7)	;IS RECORD A COMMENT?
	BEQLU	DIST_LOOP		;BR IF YES - IGNORE IT
	MOVW	RAB$W_RSZ(R7),(SP)	;SET RECORD SIZE IN DESCRIPTOR
	MOVL	RAB$L_RBF(R7),4(SP)	;SET RECORD ADDRESS IN DESCRIPTOR
	PUSHL	SP			;SET ADDRESS OF DESCRIPTOR
	CALLS	#1,MAIL$UPCASE		;CONVERT RECORD TO UPPER CASE
	PUSHL	SP			;SET ADDRESS OF DESCRIPTOR
	CALLS	#1,MAIL$ADD_ADDR	;ADD THE ADDRESSEE TO THE LIST
	BLBS	R0,DIST_LOOP		;BR IF SUCCESS
	MOVL	R0,TPA$L_PARAM(AP)	;SAVE FAILURE STATUS
	BRB	DIST_LOOP		;
;
; ERROR ACCESSING THE FILE
;
DIST_READ_ERROR:			;
	CMPL	R0,#RMS$_EOF		;WAS IT JUST END-OF-FILE?
	BEQL	DIST_DONE		;BF IF YES - ALL DONE
	MOVL	#SHR$_READERR!-		;SET FAILURE MESSAGE ID
		<MAIL$_FACILITY @ STS$V_FAC_NO>,R1
	PUSHL	RAB$L_STV(R7)		;SET STATUS VALUE
	BRB	DIST_ERROR		;
DIST_OPEN_ERROR:			;
	MOVL	#SHR$_OPENIN!-		;SET FAILURE MESSAGE ID
		<MAIL$_FACILITY @ STS$V_FAC_NO>,R1
	PUSHL	FAB$L_STV(R6)		;SET STATUS VALUE
DIST_ERROR:				;
	PUSHL	R0			;SET STATUS
	PUSHAQ	TPA$L_TOKENCNT(AP)	;SET ADDRESS OF FILE NAME DESC
	PUSHL	#1			;SET FAO ARGUMENT COUNT
	PUSHL	R1			;SET FAILURE MESSAGE ID
	CALLS	#4,G^LIB$SIGNAL		;SIGNAL THE FAILURE
	MOVL	R0,TPA$L_PARAM(AP)	;SAVE STATUS
DIST_DONE:				;
	$CLOSE	(R6)			;CLOSE THE FILE
	MOVL	#1,R0			;SET SUCCESS FOR PARSER
	RET

	.PAGE
	.SBTTL	INITIALIZE ADDRESSEE LIST
;++
; FUNCTIONAL DESCRIPTION:
;
;	INITIALIZE ADDRESSEE LIST BY REMOVING ANY OLD ENTRIES FROM
;	THE LIST.
;
; CALLING SEQUENCE:
;	CALL MAIL$INI_ADDR()
;
; INPUT PARAMETERS:
;	NONE
;
; IMPLICIT INPUTS:
;	ADDR_LIST = ADDRESSEE LISTHEAD.
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	ADDRESSEE AND LOGICAL LINK LIST ENTRIES REMOVED
;	AND DEALLOCATED.
;
;--
	.ENTRY	MAIL$INI_ADDR,-		;INITIALIZE ADDRESSEE LIST
		^M<R2,R3>		;(ENTRY MASK)
	CALLS	#0,MAIL$DELETELINK	;DELETE ALL LOGICAL LINKS
	MOVAL	ADDR_LIST,R3		;GET ADDRESS OF ADDRESSEE LIST
10$:	REMQUE	@(R3),R2		;GET NEXT ENTRY
	BVS	20$			;BR IF NONE
	BSBB	DEALLOC_ENTRY		;DEALLOCATE THE ENTRY
	BRB	10$			;
20$:	RET
;
; DEALLOCATE AN ADDRESSEE LIST ENTRY
;
DEALLOC_ENTRY:
	PUSHL	R2			;SET ADDR OF ENTRY
	PUSHAL	(SP)			;SET ADDR OF ADDR OF ENTRY
	PUSHAL	ADR_L_SIZE(R2)		;SET ADDR OF SIZE OF ENTRY
	CALLS	#3,G^LIB$FREE_VM	;DEALLOCATE ENTRY
	RSB				;

	.PAGE
	.SBTTL	SEND MAIL TO ALL ADDRESSEES IN LIST
;++
; FUNCTIONAL DESCRIPTION:
;
;	SEND MAIL TO ADDRESSEES IN ADDRESSEE LIST.
;
; CALLING SEQUENCE:
;	CALL MAIL$SEND_ADDR(FAB,RAB)
;
; INPUT PARAMETERS:
;	FAB = ADDRESS OF FAB OF OPEN FILE TO BE SENT
;	RAB = ADDRESS OF RAB OF OPEN FILE TO BE SENT
;
; IMPLICIT INPUTS:
;	ADDR_LIST = ADDRESSEE LISTHEAD.
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	IF FAILURE, ERROR IS SIGNALED.
;
;--
	.ENTRY	MAIL$SEND_ADDR,-	;SEND MAIL TO ALL ADDRESSEES
		^M<R2,R3,R4>		;(ENTRY MASK)
	MOVAB	SEND_ERROR,(FP)		;SET ADDR OF HANDLER
	MOVAQ	-(SP),R3		;CREATE ADDRESSEE DESC BUFFER
SEND_LOOP:				;SEND LOOP
	REMQUE	@ADDR_LIST,R2		;GET NEXT ENTRY
	BVC	10$			;BR IF ENTRY
	BRW	SEND_DONE		;ELSE, ALL DONE
10$:
	MOVZBL	ADR_T_NAME(R2),(R3)	;SET SIZE OF ADDRESSEE NAME
	MOVAB	ADR_T_NAME+1(R2),4(R3)	;SET ADDRESS OF ADDRESSEE NAME
	$REWIND @RAB(AP)		;REWIND THE MESSAGE FILE
	MOVL	ADR_L_LLNK(R2),R0	;GET ADDR OF LOGICAL LINK ENTRY
	BEQL	20$			;BR IF NONE - LOCAL ADDRESSEE
;
; SEND TO A NETWORK ADDRESSEE
;
	PUSHL	RAB(AP)			;SET ADDR OF MESSAGE FILE RAB
	PUSHL	R3			;SET ADDR OF ADDRESSEE DESC
	PUSHL	R0			;SET ADDR OF LOGICAL LINK ENTRY
	CALLS	#3,MAIL$NET_SEND	;SEND MAIL TO REMOTE USER
	BLBC	R0,40$			;BR IF FAILURE - ALREADY SIGNALLED
	BLBS	MAIL$B_NET_JOB,30$	;BR IF NETWORK JOB - SIGNAL SUCCESS
	BRB	40$			;
;
; SEND TO A LOCAL USER
;
20$:
	PUSHL	R3			;SET ADDR OF ADDRESSEE DESC
	CALLS	#1,MAIL$GET_USER	;GET THE ADDRESSEE'S UAF RECORD
	BLBC	R0,40$			;BR IF FAILURE
	PUSHL	RAB(AP)			;SET ADDR OF MESSAGE FILE RAB
	MOVAB	MAIL$T_UAF_BUFF,R4	;GET ADDRESS OF UAF RECORD BUFFER
	PUSHL	UAF$L_UIC(R4)		;SET UIC
	PUSHAB	UAF$T_DEFDIR+1(R4)	;SET ADDR OF DEFAULT DIRECTORY
	MOVZBL	UAF$T_DEFDIR(R4),-(SP)	;SET SIZE OF DEFAULT DIRECTORY
	PUSHAB	UAF$T_DEFDEV+1(R4)	;SET ADDR OF DEFAULT DEVICE
	MOVZBL	UAF$T_DEFDEV(R4),-(SP)	;SET SIZE OF DEFAULT DEVICE
	CALLS	#6,MAIL$SEND_MSG	;SEND MESSAGE TO LOCAL USER
	BLBC	R0,40$			;BR IF FAILURE - ALREADY SIGNALLED
	PUSHL	R3			;SET ADDR OF ADDRESSEE DESC
	CALLS	#0,MAIL$GETLK_USER	;GET AND LOCK ADDRESSEE'S UAF RECORD
	BLBC	R0,40$			;BR IF FAILURE
	INCW	UAF$W_MAIL(R4)		;INCREMENT NEW MESSAGE COUNT
	CALLS	#0,MAIL$UPDATE_USER	;UPDATE UAF RECORD
	CALLS	#1,MAIL$NOTIFY		;NOTIFY ADDRESSE IF LOGGED ON
	BLBC	MAIL$B_NET_JOB,40$	;BR IF NOT NETWORK JOB
;
; SIGNAL SUCCES AND DEALLOCATE THE ENTRY
;
30$:
	PUSHL	#1			;SET SUCCESS
	CALLS	#1,G^LIB$SIGNAL		;SIGNAL THE SUCCESS
40$:
	BSBW	DEALLOC_ENTRY		;DEALLOCATE THE ENTRY
	BRW	SEND_LOOP		;

SEND_DONE:
	CALLS	#0,MAIL$DELETELINK	;DELETE ALL LOGICAL LINKS
	RET				;

;++
; SEND_ERROR - SEND ERROR HANDLER
;
;	IF THIS ISN'T A NETWORK JOB, SIGNAL THE NAME OF THE USER THAT
;	INCURRED THE ERROR.  FOR NETWORK JOBS, IT WILL BE SIGNALLED BY
;	THE MASTER JOB, TO AVOID SIGNALLING TWICE FOR THE SAME ADDRESSEE.
;
; INPUTS:
;	@CHF$L_MCH_FRAME-8 = ADDRESS OF USER NAME
;
; OUTPUTS:
;	R0 = SS$_RESIGNAL
;--
SEND_ERROR:				;
	.WORD	0
	BLBS	MAIL$B_NET_JOB,10$	;BR IF NETWORK JOB
	MOVL	CHF$L_MCHARGLST(AP),R0	;GET ADDRESS OF MECHANISM ARRAY
	MOVL	CHF$L_MCH_FRAME(R0),R0	;GET ADDRESS OF ESTABLISHER FRAME
	PUSHAL	-8(R0)			;SET ADDRESS OF ADDRESSEE NAME DESC
	PUSHL	#1			;SET ARGUMENT COUNT
	PUSHL	#MAIL$_SENDERR		;
	CALLS	#3,G^LIB$SIGNAL
10$:
	MOVZWL	#SS$_RESIGNAL,R0	;
	RET

	.END
