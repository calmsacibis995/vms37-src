	.TITLE	IOSUBS - INPUT/OUTPUT SUBROUTINES
	.IDENT	'V03-000'
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY:	VAX/VMS MAIL UTILITY
;
; ABSTRACT:	INPUT AND OUTPUT SUBROUTINES.
;
; ENVIRONMENT:	NATIVE/USER MODE 
;
; AUTHOR:	LEN KAWELL, CREATION DATE: 2-FEB-79
;
; MODIFICATION HISTORY:
;
;	V03-001	PCA001		Paul Anagnostopoulos	19-Jan-1982
;		Fix MAIL$GET_INPUT so it treats input truncation as success.
;--
	.PAGE
	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;

;
; EQUATED SYMBOLS:
;
BUFF_DESC	= 4			;BUFFER DESCRIPTOR ARGUMENT
FAOARG1		= 8			;FIRST FAO ARGUMENT ARGUMENT

MAIL$K_INBUFFSZ	= 255			;INPUT BUFFER SIZE

;
; LOCAL MACROS:
;

;
; OWN STORAGE:
;

	.PSECT	$OWN$,LONG,RD,WRT,NOEXE

LINK_CHAN:				;LOGICAL LINK CHANNEL NUMBER
	.WORD	0


	.PSECT	$PLIT$,LONG,RD,NOWRT,NOEXE

LINK_NAME:				;LOGICAL LINK NAME
	.ASCID	/SYS$NET/

	.PSECT	$CODE$,LONG,RD,NOWRT,EXE

	.PAGE
	.SBTTL	MAIL$GET_INPUT - GET INPUT FROM INPUT DEVICE
;++
; FUNCTIONAL DESCRIPTION:
;
;	IF THIS IS NOT A NETWORK JOB, THEN LIB$GET_INPUT IS JUST
;	CALLED TO GET A RECORD FROM SYS$INPUT.  IF THIS IS A NETWORK
;	JOB A RECORD IS READ FROM THE LOGICAL LINK CHANNEL.
;
; CALLING SEQUENCE:
;	CALL MAIL$GET_INPUT(BUFF_DESC,PROMPT_DESC)
;
; INPUT PARAMETERS:
;	BUFF_DESC(AP) = ADDR OF BUFFER DESCRIPTOR
;	PROMPT_DESC(AP) = ADDR OF PROMPT DESCRIPTOR
;
; IMPLICIT INPUTS:
;	MAIL$B_NET_JOB = 1 IF THIS IS A NETWORK JOB.
;	LINK_CHAN = CHANNEL NUMBER OF LOGICAL LINK.
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	R0 = STATUS OF I/O.
;
; SIDE EFFECTS:
;	PROMPT DISPLAYED AND INPUT OBTAINED FROM INPUT DEVICE.
;
;--
	.ENTRY	MAIL$GET_INPUT,-	;PROMPT AND GET INPUT
		^M<R2,R3>		;(ENTRY MASK)
	BLBS	MAIL$B_NET_JOB,10$	;BR IF NETWORK JOB
	CALLG	(AP),G^LIB$GET_INPUT	;GET INPUT FROM SYS$INPUT
	CMPL	R0,#RMS$_TNS		;IF THE USER TYPES FOREVER,
	BNEQU	5$			;JUST USE THE TRUNCATED STRING.
	MOVL	#SS$_NORMAL,R0
5$:
	RET				;

10$:
	TSTW	LINK_CHAN		;CHANNEL ASSIGNED YET?
	BNEQ	20$			;BR IF YES
	$ASSIGN_S DEVNAM=LINK_NAME,-	;ASSIGN THE CHANNEL
		  CHAN=LINK_CHAN	;
	BLBC	R0,GET_EXIT		;BR IF FAILURE
20$:
	MOVAQ	-(SP),R2		;CREATE IOSB
	MOVAB	-MAIL$K_INBUFFSZ(SP),SP	;CREATE I/O BUFFER
	MOVL	SP,R3			;GET ADDR OF BUFFER
	$INPUT	CHAN=LINK_CHAN,-	;GET A RECORD FROM MASTER JOB
		BUFFER=(R3),-		;
		LENGTH=#MAIL$K_INBUFFSZ,-
		IOSB=(R2)		;
	BLBC	R0,GET_EXIT		;BR IF FAILURE
	MOVZWL	(R2),R0			;GET I/O STATUS
	BLBC	R0,GET_EXIT		;BR IF FAILURE
	PUSHL	BUFF_DESC(AP)		;SET ADDR OF USER BUFFER DESC
	PUSHL	R3			;SET ADDR OF INPUT BUFFER
	PUSHAW	2(R2)			;SET ADDR OF SIZE
	CALLS	#3,G^LIB$SCOPY_R_DX	;COPY TO USER BUFFER
GET_EXIT:
	RET				;RETURN
	.PAGE
	.SBTTL	MAIL$PUT_OUTPUT - PUT MESSAGE TO OUTPUT DEVICE
;++
; FUNCTIONAL DESCRIPTION:
;
;	IF THIS IS NOT A NETWORK JOB, THEN LIB$PUT_OUTPUT IS JUST
;	CALLED TO PUT A RECORD TO SYS$OUTPUT.  IF THIS IS A NETWORK
;	JOB THE RECORD IS WRITTEN TO THE LOGICAL LINK CHANNEL.
;
; CALLING SEQUENCE:
;	CALL MAIL$PUT_OUTPUT(BUFF_DESC[,FAOARG1][,FAOARG2]...[,FAOARGN]))
;
; INPUT PARAMETERS:
;	BUFF_DESC(AP) = ADDR OF BUFFER DESCRIPTOR
;	FAOARG1(AP) - FAOARGN(AP) = FAO ARGUMENTS
;
; IMPLICIT INPUTS:
;	MAIL$B_NET_JOB = 1 IF THIS IS A NETWORK JOB.
;	LINK_CHAN = CHANNEL NUMBER OF LOGICAL LINK.
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	R0 = STATUS OF I/O.
;
; SIDE EFFECTS:
;	BUFFER OUTPUT TO OUTPUT DEVICE.
;
;--
	.ENTRY	MAIL$PUT_OUTPUT,-	;PUT OUTPUT
		^M<R2,R3>		;(ENTRY MASK)
	MOVL	BUFF_DESC(AP),R3	;GET ADDR OF BUFFER DESC
	CMPB	(AP),#1			;ARE THERE ANY FAO ARGUMENTS?
	BEQL	5$			;BR IF NOT
	MOVAQ	-(SP),R3		;CREATE FORMAT BUFFER DESC
	MOVAB	-MAIL$K_INBUFFSZ(SP),SP	;CREATE FORMAT BUFFER STORAGE
	MOVZWL	#MAIL$K_INBUFFSZ,(R3)	;SET SIZE OF BUFFER IN DESC
	MOVL	SP,4(R3)		;SET ADDR OF BUFFER IN DESC
	PUSHAL	FAOARG1(AP)		;SET ADDR OF FAO ARGUMENTS
	PUSHL	R3			;SET ADDR OF OUTPUT BUFFER
	PUSHL	R3			;SET ADDR TO RECEIVE LENGTH
	PUSHL	BUFF_DESC(AP)		;SET ADDR OF CONTROL STRING
	CALLS	#4,G^SYS$FAOL		;FORMAT THE OUTPUT
5$:
	BLBS	MAIL$B_NET_JOB,10$	;BR IF NETWORK JOB
	PUSHL	R3			;SET ADDR OF BUFFER DESC
	CALLS	#1,G^LIB$PUT_OUTPUT	;OUTPUT TO SYS$OUTPUT
	RET				;
10$:
	TSTW	LINK_CHAN		;CHANNEL ASSIGNED YET?
	BNEQ	20$			;BR IF YES
	$ASSIGN_S DEVNAM=LINK_NAME,-	;ASSIGN THE CHANNEL
		  CHAN=LINK_CHAN	;
	BLBC	R0,PUT_EXIT		;BR IF FAILURE
20$:
	MOVAQ	-(SP),R2		;CREATE IOSB
	$OUTPUT	CHAN=LINK_CHAN,-	;SEND A RECORD TO MASTER JOB
		BUFFER=@4(R3),-		;
		LENGTH=(R3),-		;
		IOSB=(R2)		;
	BLBC	R0,PUT_EXIT		;BR IF FAILURE
	MOVZWL	(R2),R0			;GET I/O STATUS
PUT_EXIT:
	RET				;RETURN

	.PAGE
	.SBTTL	MAIL$CONFIRM - PROMPT FOR CONFIRMATION
;++
; FUNCTIONAL DESCRIPTION:
;
;	 IF THIS IS NOT A NETWORK JOB, THEN PROMPT FOR A YES OR NO
;	RESPONSE AND CHECK IF YES OR NO.
;
; CALLING SEQUENCE:
;	CALL MAIL$CONFIRM(BUFF_DESC,PROMPT_DESC)
;
; INPUT PARAMETERS:
;	BUFF_DESC(AP) = ADDR OF BUFFER DESCRIPTOR
;	PROMPT_DESC(AP) = ADDR OF PROMPT DESCRIPTOR
;
; IMPLICIT INPUTS:
;	MAIL$B_NET_JOB = 1 IF THIS IS A NETWORK JOB.
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	R0 = SUCCESS IF RESPONSE WAS A "Y",
;	   = ERROR IF NO RESPONSE, RESPONSE WAS NOT A "Y", OR JOB IS
;	     A NETWORK JOB.
;
; SIDE EFFECTS:
;	PROMPT DISPLAYED AND INPUT OBTAINED FROM INPUT DEVICE.
;
;--
	.ENTRY	MAIL$CONFIRM,-		;PROMPT AND GET RESPONSE
		^M<R2>			;(ENTRY MASK)
	BLBS	MAIL$B_NET_JOB,20$	;BR IF NETWORK JOB
	CALLG	(AP),G^LIB$GET_INPUT	;GET INPUT FROM SYS$INPUT
	MOVL	BUFF_DESC(AP),R2	;GET ADDRESS OF BUFFER DESC
	TSTW	(R2)			;NO RESPONSE?
	BEQL	20$			;BR IF YES - NO RESPONSE = "NO"
	CMPB	#^A"Y",@4(R2)		;WAS RESPONSE "YES"?
	BEQL	10$			;BR IF YES
	CMPB	#^A"y",@4(R2)		;WAS RESPONSE "yes"?
	BNEQ	20$			;BR IF NO
10$:
	MOVL	#1,R0			;SET "YES" RESPONSE
	RET				;
20$:
	CLRL	R0			;SET "NO" RESPONSE
	RET				;

	.PAGE
	.SBTTL	MAIL$UPCASE - CONVERT A STRING TO UPPERCASE
;++
;
; FUNCTIONAL DESCRIPTION:
;
;	THIS ROUTINE IS CALLED TO CONVERT A STRING TO UPPER CASE CHARACTERS.
;
; INPUTS:
;
;	BUFF_DESC = ADDRESS OF STRING DESCRIPTOR.
;
; OUTPUTS:
;
;	STRING CONVERTED TO UPPERCASE.
;--
	.ENTRY	MAIL$UPCASE,-			;CONVERT TO UPPER CASE
		^M<R2>				;(ENTRY MASK)
	MOVL	BUFF_DESC(AP),R0		;GET ADDRESS OF DESCRIPTOR
	MOVZWL	(R0),R1				;GET SIZE OF STRING
	BEQL	30$				;EXIT IF ZERO
	MOVL	4(R0),R0			;GET ADDRESS OF STRING
10$:	MOVB	(R0)+,R2			;GET NEXT CHARACTER
	CMPB	R2,#^A"a"			;LOWER CASE LETTER?
	BLSSU	20$				;IF LSSU NO
	CMPB	R2,#^A"z"			;LOWER CASE LETTER?
	BGTRU	20$				;IF GTRU NO
	SUBB3	#32,R2,-1(R0)			;CONVERT TO UPPERCASE LETTER
20$:	SOBGTR	R1,10$				;DECREMENT COUNT AND LOOP
30$:	RET					;

	.END
