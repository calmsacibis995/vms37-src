MODULE PRINT( %TITLE 'QUEUE MAIL MESSAGE FOR PRINTING'
		IDENT = 'V03-000' ) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	VAX/VMS MAIL UTILITY
!
! ABSTRACT:	QUEUE THE CURRENT MESSAGE FOR PRINTING
!
! ENVIRONMENT:	NATIVE/USER MODE
!
! AUTHOR: LEN KAWELL, CREATION DATE: 10-JUN-1979
!
! MODIFIED BY:
!
!	V02-002	GWF0049		Gary Fowler		28-May-1981
!		Add file size in message sent to job controller.
!
!	V02-001	LMK0001		Len Kawell		25-Feb-1981
!		Add translation of SYS$PRINT.
!--

!
! TABLE OF CONTENTS:
!
FORWARD ROUTINE
	MAIL$PRINT: NOVALUE,				! Print message
	CLOSE_JOB : NOVALUE,				! Close current job
	SNDSMB;						! Send message to 
							! symbiont manager
!
! INCLUDE FILES:
!
	LIBRARY 'SYS$LIBRARY:STARLET.L32';
	REQUIRE 'SRC$:MAILREQ.REQ';
	REQUIRE 'SRC$:MAILMSG.B32';
!
! MACROS:
!
MACRO						! CREATE request message
	REQTYPE		= 0,0,16,0%,		! Request type
	REQQUEUE	= 2,0,0,0%,		! Queue name
	REQCREEND	= 18,0,8,0%;		! End of CREATE request
LITERAL
	REQQUEUE_SIZ	= 15;			! Queue name size

MACRO						! ADD request message
	REQDEVNAM 	= 2,0,0,0%,		! Device name
	REQFILEID	= 18,0,0,0%,		! File ID
	REQDIRID	= 24,0,0,0%,		! Directory ID
	REQFILENAM	= 30,0,0,0%,		! File name
	REQOPTIONS	= 50,0,8,0%,		! Options
	REQFILOPT	= 51,0,8,0%,		! File size option
	REQFILSIZ	= 52,0,32,0%,		! File size
	REQADDEND	= 56,0,8,0%;		! End of ADD request
LITERAL	REQLENGTH	= 56;			! Size of request message

!
! EQUATED SYMBOLS:
!

!
! OWN STORAGE:
!
OWN
	REQ:		BLOCK[REQLENGTH,BYTE]	! Request message messag buffer
			INITIAL(REP $BYTEOFFSET(REQFILENAM) OF BYTE(0),
				BYTE(%CHARCOUNT('MAIL.LIS'),'MAIL.LIS')),
	REQDESC:	BLOCK[8,BYTE]		! Request buffer descriptor
			INITIAL(REQLENGTH,REQ);

OWN
	CURQUEUE:	BLOCK[REQQUEUE_SIZ+1,BYTE], ! Current queue name
	CURJOBID:	WORD,			! Current job ID
	MBXCHAN:	WORD,			! Mailbox channel number
	MBXIOSB:	VECTOR[4,WORD],		! Mailbox I/O status block
	MBXBUF:		BLOCK[8,BYTE],		! Mailbox I/O buffer
	EXITSTATUS:	LONG,			! Exit status
	EXITBLOCK:	VECTOR[4]		! Exit handler control block
			INITIAL(0,		!  Forward link
				CLOSE_JOB,	!  Routine address
				1,		!  Argument count
				EXITSTATUS),	!  Location to receive status
	EXITDECLARED:	LONG;			! Exit handler declared flag
!
! EXTERNAL REFERENCES:
!
EXTERNAL
	MAIL$W_MSG_RSIZ,			! Current message record size
	MAIL$L_MSG_RADR;			! Current message record addr

EXTERNAL ROUTINE
	MAIL$GET_MSG,				! Get message text
	MAIL$PUT_OUTPUT;			! Put to SYS$OUTPUT


GLOBAL ROUTINE MAIL$PRINT(QUEUE) : NOVALUE =
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine is called to queue a copy of the current message
!	for printing.  The first time it is called, a job is
!	created and the message is copied to a file that is added to the
!	job.  Each time it is called, and the queue name is the same as
!	the last time, the current file will be added to the open job.
!	If this routin is called with a different queue name, the previous
!	job is closed, releasing it for printing, and a new job is opened.
!
!	If no queue name is specified, the queue specified in the previous
!	call is assumed.  If no queue name is specified the first call,
!	SYS$PRINT is assumed.
!
!	An exit handler is declared on the first call to close the open
!	job should this routine never be called with a different queue name.
!
! INPUTS:
!
!	QUEUE = Address of specified queue name descriptor.
!
! OUTPUTS:
!
!	Temporary file created, message copied to it, print job created
!	for specified queue, and temporary file added to job.
!--
BEGIN
MAP
	QUEUE: 		REF BLOCK[,BYTE];		! Queue name descriptor
LOCAL
	STATUS,						! Routine status
	QTRN_DESC:	BLOCK[8,BYTE],			! Queue name desc
	TMP_FAB:	$FAB_DECL,			! Temp file FAB
	TMP_RAB:	$RAB_DECL,			! Temp file RAB
	TMP_NAM:	$NAM_DECL,			! Temp file NAM block
	TMP_FHC:	$XABFHC_DECL,			! Temp file XAB
	TMP_ESNAM:	BLOCK[NAM$C_MAXRSS,BYTE],	! Temp file name buffer
	TMP_ESNAM_DESC:	BLOCK[8,BYTE],			! Temp file name desc
	BUFF:		BLOCK[MAIL$K_INBUFFSZ,BYTE];	! Temp file I/O buffer
!
! If there is no job currently open, or if a queue name is specified, and 
! it isn't the same as the current job's close the open job, and open 
! a new print job.
!
IF .CURQUEUE<CS_COUNT> EQL 0
OR (.QUEUE[DSC$W_LENGTH] NEQ 0
    AND CH$NEQ(.QUEUE[DSC$W_LENGTH],.QUEUE[DSC$A_POINTER],
	  .CURQUEUE<CS_COUNT>,CURQUEUE<CS_STRING>,0))
THEN	BEGIN
	CLOSE_JOB();					! Close any open job
	REQ[REQTYPE] = SMR$K_CREJOB;			! Set request type
	!
	! Translate either supplied queue name or SYS$PRINT, if none supplied
	!
	QTRN_DESC[DSC$W_LENGTH] = REQQUEUE_SIZ;
	QTRN_DESC[DSC$A_POINTER] = (REQ[REQQUEUE])<CS_STRING>;
	$TRNLOG(LOGNAM = (IF .QUEUE[DSC$W_LENGTH] NEQ 0
			  THEN
				.QUEUE
			  ELSE
				DESCRIPTOR('SYS$PRINT')),
		RSLLEN = QTRN_DESC,
		RSLBUF = QTRN_DESC);
	(REQ[REQQUEUE])<CS_COUNT> = .QTRN_DESC[DSC$W_LENGTH];
	CH$MOVE(%ALLOCATION(CURQUEUE),REQ[REQQUEUE],CURQUEUE);! Save queue name

	REQ[REQCREEND] = 0;				! Mark end of job
	IF SNDSMB()					! Create job
	THEN	
		CURJOBID = .MBXBUF[0,16,16,0]		! Save job ID
	ELSE	BEGIN
		CURQUEUE<CS_COUNT> = 0;			! No curren queue
		RETURN;
		END;
	END;
!
! Create a temporary file
!
$XABFHC_INIT(XAB=TMP_FHC);				! Init XAB
$FAB_INIT(	FAB = TMP_FAB,				! Create a FAB
		FNA = (REQ[REQFILENAM])<CS_STRING>,	!  File name address
		FNS = .(REQ[REQFILENAM])<CS_COUNT>,	!  File name size
		FOP = TMP,				!  Temporary file
		NAM = TMP_NAM,				!  Name block address
		XAB = TMP_FHC,				!  XAB block
		RAT = CR);				!  CR/LF records
$RAB_INIT(	RAB = TMP_RAB,				! Create a RAB
		FAB = TMP_FAB,				!  FAB address
		UBF = BUFF,				!  Record buffer addr
		USZ = MAIL$K_INBUFFSZ);			!  Record buffer size
$NAM_INIT(	NAM = TMP_NAM,				! Name block
		ESA = TMP_ESNAM,			!  Name buffer address
		ESS = NAM$C_MAXRSS);			!  Name buffer size

STATUS = $CREATE(FAB = TMP_FAB);			! Create the file
TMP_ESNAM_DESC[DSC$W_LENGTH] = .TMP_NAM[NAM$B_ESL];	! Set filename size
TMP_ESNAM_DESC[DSC$A_POINTER] = TMP_ESNAM;		! and address
IF NOT .STATUS
THEN	BEGIN
	SIGNAL(	SHR$_OPENIN OR MAIL$V_FACILITY,
		1,TMP_ESNAM_DESC,
		.STATUS,.TMP_FAB[FAB$L_STV]);
	RETURN;
	END;
!
! Copy the message to the file
!
$CONNECT(RAB = TMP_RAB);
DO	BEGIN
	TMP_RAB[RAB$W_RSZ] = .MAIL$W_MSG_RSIZ;		! Set record size
	TMP_RAB[RAB$L_RBF] = .MAIL$L_MSG_RADR;		! Set record address
	STATUS = $PUT(RAB = TMP_RAB);			! Put record in file
	END
WHILE MAIL$GET_MSG() AND .STATUS;
IF NOT .STATUS						! If failure
THEN	BEGIN
	SIGNAL(.STATUS);				! Signal the failure
	TMP_FAB[FAB$V_DLT] = 1; $CLOSE(FAB = TMP_FAB);	! Delete file
	RETURN;
	END;
$FLUSH(RAB = TMP_RAB);					! Force update
$DISPLAY(FAB = TMP_FAB);				! update XAB
$CLOSE(FAB = TMP_FAB);					! Close the file
!
! Add the file to the print job
!
REQ[REQTYPE] = SMR$K_ADDFIL;				! Set request type
CH$MOVE(NAM$S_DVI,TMP_NAM[NAM$T_DVI],REQ[REQDEVNAM]);	! Set device name
CH$MOVE(NAM$S_FID,TMP_NAM[NAM$W_FID],REQ[REQFILEID]);	! Set file ID
CH$MOVE(NAM$S_DID,TMP_NAM[NAM$W_DID],REQ[REQDIRID]);	! Set directory ID
REQ[REQFILOPT] = SMO$K_FILESIZ;				! Set option byte
REQ[REQFILSIZ] = .TMP_FHC[XAB$L_EBK];			! Get file size
IF .REQ[REQFILSIZ] NEQ 0				! Adjust file size
AND .TMP_FHC[XAB$W_FFB] EQL 0				! according to value
THEN REQ[REQFILSIZ] = .REQ[REQFILSIZ] - 1;		! in first free byte
REQ[REQOPTIONS] = SMO$K_DELETE;				! Set to delete file
IF SNDSMB()						! Add file to job
THEN
	IF NOT .EXITDECLARED				! If no exit handler
	THEN	BEGIN
		EXITDECLARED = $DCLEXH(DESBLK=EXITBLOCK);! Declare exit handler
		IF NOT .EXITDECLARED
		THEN
			SIGNAL(.EXITDECLARED);
		END;
END;


ROUTINE CLOSE_JOB : NOVALUE =
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine is called to close any currently open print job,
!	releasing it for printing.
!
!	It is also called as an exit handler at image run down.
!
! INPUTS:
!
!	CURQUEUE = Current queue name.
!		 = zero if none.
!	REQDESC = Request message descriptor.
!	MBXCHAN = Channel number of mailbox.
!
! OUTPUTS:
!
!	CURQUEUE = zero.
!
!	If a print job is open, it is closed.
!--
BEGIN
IF .CURQUEUE<CS_COUNT> NEQ 0
THEN	BEGIN
	REQ[REQTYPE] = SMR$K_CLSJOB;			! Set request type
	REQ[REQCREEND] = 0;				! Set end of message
	IF SNDSMB()
	THEN
		MAIL$PUT_OUTPUT(DESCRIPTOR('  Job !UW entered on queue !AC'),
				.CURJOBID,
				CURQUEUE);
	CURQUEUE<CS_COUNT> = 0;				! No current job
	END;
END;


ROUTINE SNDSMB =
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine is called to send the request message to the symbiont
!	manager and wait for its reply.
!
! INPUTS:
!
!	REQDESC = Request message descriptor.
!	MBXCHAN = Channel number of mailbox (if created).
!
! OUTPUTS:
!
!	Request is sent to symbiont manager and its reply is read from
!	the mailbox.
!
!	All failures are signalled as well as returned.
!--
BEGIN
MACRO
	CHECK(EXP) =					! Check return status
		BEGIN
		LOCAL STATUS;
		STATUS = EXP;
		IF NOT .STATUS
		THEN	(SIGNAL(MAIL$_CREPRIJOB,1,CURQUEUE,.STATUS);
			RETURN .STATUS);
		END;%;
IF .MBXCHAN EQL 0					! If no mailbox yet,
THEN
	CHECK(	$CREMBX(CHAN=MBXCHAN,			! create the mailbox
			MAXMSG=32,
			BUFQUO=64));
CHECK($SNDSMB(	MSGBUF=REQDESC,				! Send the message
		CHAN=.MBXCHAN));
CHECK($QIOW(	CHAN=.MBXCHAN,				! Get reply
		IOSB=MBXIOSB,
		FUNC=IO$_READLBLK,
		P1=MBXBUF,
		P2=%ALLOCATION(MBXBUF)));
CHECK(.MBXIOSB[0]);					! Check read status
CHECK(.MBXBUF[0,32,32,0]);				! Check reply
RETURN STS$K_SUCCESS
END;


END
ELUDOM
