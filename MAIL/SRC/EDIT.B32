MODULE EDIT( %TITLE 'EDIT OR ENTER A MESSAGE'
		IDENT = 'V03-000' ) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	VAX/VMS MAIL UTILITY
!
! ABSTRACT:	Edit or just enter a mail message.
!
! ENVIRONMENT:	NATIVE/USER MODE
!
! AUTHOR: LEN 	KAWELL, CREATION DATE: 25-NOV-1979
!
! MODIFIED BY:
!
!	V03-003	PCA002		Paul Anagnostopoulos	19-Jan-1982
!		Fix descriptors whose class and type were uninitialized.
!
!	V03-002 PCA001		Paul Anagnostopoulos	11-Jan-1982
!		Use LIB$SPAWN instead of LIB$EXECUTE_CLI.
!
!	V03-001	LMK0003		Len Kawell		02-Sep-1981
!		Fix problem with input buffer overflow.
!
!	V02-003	LMK0002		Len Kawell		28-Mar-1981
!		Change error when $CREPRC fails and add CTRL/C.
!
!	V02-002 LMK0001		Len Kawell		16-JAN-1981
!		Change $ STOP 'F$PROCESS()' to $ STOP/ID=0 because a problem
!		in $DELPRC requires GROUP privilege for the former.  Also
!		check for failure from LIB$EXECUTE_CLI and signal the error.
!--

!
! TABLE OF CONTENTS:
!

!
! INCLUDE FILES:
!
	LIBRARY 'SYS$LIBRARY:STARLET.L32';
	REQUIRE 'SRC$:MAILREQ.REQ';
	REQUIRE	'SRC$:MAILMSG.B32';
!
! MACROS:
!

!
! EQUATED SYMBOLS:
!

!
! OWN STORAGE:
!

!
! EXTERNAL REFERENCES:
!

EXTERNAL
	MAIL$Q_INPTRAN:	BLOCK[,BYTE],		! SYS$INPUT translation
	MAIL$G_INPCHAR:	BLOCK[,BYTE];		! SYS$INPUT characteristics

EXTERNAL ROUTINE
	LIB$SPAWN: ADDRESSING_MODE(GENERAL),	! Spawn a subprocess
	MAIL$GET_INPUT,				! Get from SYS$INPUT
	MAIL$PUT_OUTPUT;

GLOBAL ROUTINE MAIL$EDIT(IN_NAME,OUT_NAME) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine is called to enter and edit a mail message.
!
! INPUTS:
!
!	IN_NAME = Address of input file name descriptor.
!	OUT_NAME = Address of output file name descriptor.
!
! OUTPUTS:
!
!	Message copied to file OUT_NAME.
!
!--
BEGIN
MAP
	IN_NAME: REF BLOCK[,BYTE],			! Input file desc
	OUT_NAME: REF BLOCK[,BYTE];			! Output file desc
LOCAL
	STATUS,						! Routine status
	EDITNAM_BUF:	BLOCK[64,BYTE],			! Edit logicalname buf
	EDITNAM_DESC:	BLOCK[8,BYTE],			! Edit logicalname desc
	EDITCMD_BUF: 	BLOCK[255,BYTE],		! Edit command buffer
	EDITCMD_DESC: 	BLOCK[8,BYTE];			! Edit command desc

!
! Translate logical name MAIL$EDIT to see if there is a specific edit
! command file to be used.  If not, SYS$SYSTEM:MAILEDIT.COM will be used.
!
EDITNAM_DESC[0,0,32,0] = 64;
EDITNAM_DESC[DSC$A_POINTER] = EDITNAM_BUF;
STATUS = $TRNLOG(LOGNAM = DESCRIPTOR('MAIL$EDIT'),
		 RSLLEN = EDITNAM_DESC[DSC$W_LENGTH],
		 RSLBUF = EDITNAM_DESC);
!
! Create and execute the command procedure execution command.
!
EDITCMD_DESC[0,0,32,0] = 255;
EDITCMD_DESC[DSC$A_POINTER] = EDITCMD_BUF;
$FAO(	DESCRIPTOR('$ @!AS "!AS" "!AS"'),
	EDITCMD_DESC[DSC$W_LENGTH],
	EDITCMD_DESC,
	(IF .STATUS EQL SS$_NORMAL
		THEN EDITNAM_DESC 
		ELSE DESCRIPTOR('SYS$SYSTEM:MAILEDIT.COM')),
	.IN_NAME,
	.OUT_NAME);
IF_ERR(LIB$SPAWN(EDITCMD_DESC);,
	SIGNAL(MAIL$_EDITPROC,0,.STATUS));
RETURN STS$K_SUCCESS
END;


GLOBAL ROUTINE MAIL$ENTER(OUT_RAB) =
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine is called to enter a mail message.
!
! INPUTS:
!
!	OUT_RAB = Address of a RAB connected to an open output file.
!
! OUTPUTS:
!
!	SYS$INPUT copied to file OUT_RAB.
!--
BEGIN
MAP
	OUT_RAB: REF BLOCK[,BYTE];			! Output file RAB
LOCAL
	CTRLC:	LONG,					! CTRL/C pressed flag
	TTCHAN: WORD,					! Terminal channel
	DESC: BLOCK[8,BYTE],				! String desc
	STATUS;						! Routine status
!
! CTRL/C AST routine
!
ROUTINE CTRLCAST(FLAG) : NOVALUE = .FLAG = 1;		

!
! If device is a terminal, enable CTRL/C AST and issue prompt.
!
CTRLC = 0;
IF .MAIL$G_INPCHAR[DIB$B_DEVCLASS] EQL DC$_TERM
THEN	BEGIN
	IF $ASSIGN(CHAN=TTCHAN,DEVNAM=MAIL$Q_INPTRAN)
	THEN
		$QIOW(CHAN=.TTCHAN,FUNC=IO$_SETMODE OR IO$M_CTRLCAST,
			P1=CTRLCAST,P2=CTRLC);
	MAIL$PUT_OUTPUT(DESCRIPTOR(
'Enter your message below. Press CTRL/Z when complete, CTRL/C to quit:'));
	END;
!
! Read from input and copy to output file
!
DESC[DSC$W_LENGTH] = 0;
DESC[DSC$B_CLASS] = DSC$K_CLASS_D;
DESC[DSC$B_DTYPE] = 0;
DESC[DSC$A_POINTER] = 0;
STATUS = STS$K_SUCCESS;

WHILE MAIL$GET_INPUT(DESC)
DO
	BEGIN
	OUT_RAB[RAB$W_RSZ] = .DESC[DSC$W_LENGTH];
	OUT_RAB[RAB$L_RBF] = .DESC[DSC$A_POINTER];
	STATUS = $PUT(RAB = .OUT_RAB);
	IF NOT .STATUS OR .CTRLC THEN EXITLOOP;
	END;

$DASSGN(CHAN=.TTCHAN);
IF (NOT .STATUS) AND (.STATUS NEQ RMS$_EOF)
THEN
	SIGNAL(.STATUS);
IF .CTRLC
THEN
	RETURN MAIL$_SENDABORT
ELSE
	RETURN .STATUS

END;

END
ELUDOM
