MODULE RANGE(IDENT='V03-000') =
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY: EDT Version 2
!
! FUNCTIONAL DESCRIPTION:
!
!	This module contains routines which deal with the handling of
!	line ranges.  The line commands generally operate by first
!	positioning the beginning of a range, then looping while calling
!	for the next line in the range.  This module provides the
!	routines for positioning and returning the next line.
!
! ENVIRONMENT: User mode, sharable
!
! AUTHOR: Bob Kushlis, CREATION DATE: 3-Feb-1978
!
! MODIFIED BY:
!
!
! 2.02	- Picked up modification to ALL from V3 sources.
!	   JBS 02-Nov-1981
!--
BEGIN


LIBRARY	'EDT';

PSECTS


EXTERNAL
    R_MORE,			! Used by RAN_NEXT to indicate more lines.
    R_FIRST,			! Indicates first line in a range.
    R_NLINES,			! Count of number of lines in a range.
    R_END_LINE : LN_BLOCK,	! The line number at which this range ends
    R_CUR_RANGE : REF NODE_BLOCK,! The current range node
    R_ORIG_POS : POS_BLOCK,	! To save the position at start of command.
    R_SAVE_POS : POS_BLOCK;	! To save the beginning of range

EXTERNAL
    C_SBUF,			! Select buffer
    C_SELP,			! Select position
    C_SELL,			! Select line
    L_BUF,			! Line buffer
    E_LAST_TBCB,                ! The previous TBCB for LAST range.
    E_TBCB : REF TBCB_BLOCK,	! The current text buffer
    E_CC : VOLATILE,		! Control C trap.
    W_LINE : REF LIN_BLOCK,	! The current line pointer.
    U_SRCHSTR,			! The search string.
    U_SLEN,			! Length of search string.
    U_STR_COMP;			! Address of string compare routine.

EXTERNAL ROUTINE
    EXT_DECS
    SYS_GET_MEM,
    BUG_CHECK,
    F_PUT_MESS,
    IO_WT,
    U_CVTCASE,
    U_FIND_STRING,
    WF_BOTTOM,
    WF_COMP_LNO,
    WF_EOB,
    WF_R_FORWARD,
    WF_R_BACKWRD,
    WF_R_CURRENT,
    WF_TOP,
    WF_OPEN_BUFFER,
    WF_LOCATE_LINE,
    U_F_BUFFER,
    U_S_STRING;

FORWARD ROUTINE
    RAN_POS,
    RAN_REPOS : NOVALUE;

ROUTINE RPOS(RANGE) =
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine positions to the first line of a range.
!	
!
! FORMAL PARAMETERS:
!
!	RANGE	-	The range node.
!
! IMPLICIT INPUTS:
!
!	E_TBCB	- 	Pointer to current text buffer control block
!
! IMPLICIT OUTPUTS:
!
!	none
!
! COMPLETION CODES:
!
!	none
!
! SIDE EFFECTS:
!
!	Current text buffer is re-positioned
!
!--

BEGIN
MAP RANGE : REF NODE_BLOCK;
!
! Make sure the parameter is a range node.
!
IF .RANGE[NODE_TYPE] NEQ RANGE_NODE THEN BUG_CHECK(NOT_RAN);
!
! Initialize for first line of range.
!
R_MORE = 1;
R_FIRST = 1;
R_NLINES = 0;
!
! Case on range type.
!
CASE .RANGE[RAN_TYPE] FROM 0 TO NUM_RAN OF
SET
!
! If range is '.' or REST, the original position is the first line.
!
[RAN_DOT,RAN_NULL,RAN_REST]:   ! Use the current position
    BEGIN
    CH$MOVE(POS_SIZE,R_ORIG_POS,.E_TBCB);
    WF_R_CURRENT();
    END;
!
! Line number range.  Find the line.
!
[RAN_NUMBER]:
    BEGIN
    R_MORE = WF_LOCATE_LINE(RANGE[RAN_VAL]);
    END;
!
! Range is BEFORE.  Try going back a line to find out if there are any,
! then save that number as the last line number in the range.
!
[RAN_BEFORE]:
    BEGIN
    R_MORE = WF_R_BACKWRD();
    MOVELINE(W_LINE[LIN_NUM],R_END_LINE);
    WF_TOP();
    END;
!
! Range is WHOLE or BEGIN.  Position to the first line in the buffer.
!
[RAN_WHOLE,RAN_BEGIN]:
    WF_TOP();
!
! Range is SELECT.  Check to see if there is a select range in effect.
! If it not in the current buffer, then switch to the buffer which has
! the select.  Then position to the first line of the select range.
!
[RAN_SELECT]:
    BEGIN
    IF .C_SBUF EQL 0 THEN
	BEGIN
	F_PUT_MESS(ERR_NOSELRAN);
	R_MORE = 0;
	END
    ELSE
	BEGIN
	IF .C_SBUF NEQ .E_TBCB THEN
	    BEGIN
	    E_LAST_TBCB = .E_TBCB;
	    E_TBCB = .C_SBUF;
	    WF_R_CURRENT();
	    END;
	SUBLINE(E_TBCB[TBCB_CUR_LIN],C_SELL,RANGE[RAN_VAL]);
	IF .RANGE[RAN_VAL] LSS 0 THEN
	    BEGIN
	    RANGE[RAN_VAL] = -.RANGE[RAN_VAL];
	    DECR I FROM .RANGE[RAN_VAL]-1 TO 0 DO WF_R_BACKWRD();
	    END;
	IF CH$PTR_NEQ(.C_SELP,CH$PTR(L_BUF)) THEN
	    RANGE[RAN_VAL] = .RANGE[RAN_VAL] + 1;
	C_SBUF = 0;
	END;
    END;
!
! Range is END.  Position to the end of the buffer.
!
[RAN_END]: 
    BEGIN
    WF_BOTTOM();
    R_MORE = 0;
    END;
!
! Range is ORIGINAL.  Look forward from the current line for a line
! whose original number matches.
!
[RAN_ORIG]:
    BEGIN
    CH$MOVE(POS_SIZE,.E_TBCB,R_SAVE_POS);
    WHILE WF_COMP_LNO(W_LINE[LIN_ORIG_NUM],RANGE[RAN_VAL]) NEQ 0 DO
	IF NOT WF_R_FORWARD() THEN
	    BEGIN
	    R_MORE = 0;
	    RAN_REPOS();
	    F_PUT_MESS(ERR_NOSUCHLIN);
	    RETURN 0;
	    END;
    END;
!
! Range is MINUS.  Make a recursive call to position to the range then
! move back the specified number of lines.
!
[RAN_MINUS]:
    BEGIN
    IF RPOS(.RANGE[SUB_RANGE]) THEN
	BEGIN
	R_MORE = 1;
	INCR I FROM 1 TO .RANGE[RAN_VAL]
	DO IF NOT WF_R_BACKWRD() THEN
	    BEGIN
	    R_MORE = 0;
	    EXITLOOP;
	    END
	END
    ELSE
	R_MORE = 0;
    END;
!
! Range is Plus. Make a recursive call to position to the range then
! move forward the specified number of lines.
!
[RAN_PLUS]:
    BEGIN
    IF RPOS(.RANGE[SUB_RANGE]) THEN
	BEGIN
	R_MORE = 1;
	INCR I FROM 1 TO .RANGE[RAN_VAL]
	DO IF NOT WF_R_FORWARD() THEN
	    BEGIN
	    R_MORE = 0;
	    EXITLOOP;
	    END
	END
    ELSE
	R_MORE = 0;
    END;
!
! Range is FOR or #.  Just position to the original range.
!	    
[RAN_FOR]:
    R_MORE = RPOS(.RANGE[SUB_RANGE]);
!
! Range is a search string.  Save the current position, search for the
! string in the specified direction.  If the string is not found, then
! reposition and return failure.
!
[RAN_STR,RAN_MINSTR]:
BEGIN
CH$MOVE(POS_SIZE,.E_TBCB,R_SAVE_POS);
    IF NOT U_FIND_STRING(.RANGE[STR_PNT],
	    .RANGE[RAN_VAL],.RANGE[RAN_TYPE] EQL RAN_STR) THEN
	BEGIN
	IF .E_CC EQL 0 THEN F_PUT_MESS(ERR_STRNOTFND);
	R_MORE = 0;
	RAN_REPOS();
	RETURN 0
	END;
	END;
!
! Range is THRU or : .  Position to the first range, then find the line
! number of the end of the range.  Special case when the end range is a
! line number or END.  Otherwise, save the current position and position to
! the end to get the end range.
!
[RAN_THRU]:
    BEGIN
    LOCAL R_SAVE_POS : POS_BLOCK;
    BIND END_RANGE = .RANGE[RANGE2] : NODE_BLOCK;
    BIND START_RANGE = .RANGE[RANGE1] : NODE_BLOCK;
    RPOS(START_RANGE);
    IF .END_RANGE[RAN_TYPE] EQL RAN_NUMBER THEN
	CH$MOVE(LN_SIZE,END_RANGE[RAN_VAL],R_END_LINE)
    ELSE IF .END_RANGE[RAN_TYPE] EQL RAN_END THEN
	RANGE[RAN_TYPE] = RAN_REST
    ELSE
	BEGIN
	CH$MOVE(POS_SIZE,.E_TBCB,R_SAVE_POS);
	RPOS(END_RANGE);
	MOVELINE(W_LINE[LIN_NUM],R_END_LINE);
	CH$MOVE(POS_SIZE,R_SAVE_POS,.E_TBCB);
	WF_R_CURRENT();
	END;
    R_MORE = 1;
    END;
!+
! Range is ALL range.  Look at the range to which ALL applies.  If it is
! null, assume WHOLE.  Position to that range, then set up the ALL string
! as the current search string.  Note that R_CUR_RANGE will be not
! that ALL range but its subordinate.  PREV_RANGE will point back to the
! ALL range.
!-

	[RAN_ALL] :
	    BEGIN

	    LOCAL
		SUB_RAN : REF NODE_BLOCK;

	    SUB_RAN = .RANGE [NEXT_RANGE];

	    IF (.SUB_RAN [RAN_TYPE] EQL RAN_NULL) THEN SUB_RAN [RAN_TYPE] = RAN_WHOLE;

	    IF ( NOT RAN_POS (.RANGE [NEXT_RANGE])) THEN RETURN (0);

	    U_S_STRING (.RANGE [STR_PNT], .RANGE [RAN_VAL]);
	    RETURN (1);
	    END;
!
! The range contains a buffer specification.  Switch to the new buffer, then
! position to the range within the buffer.  If the range within the buffer
! was null, assume WHOLE.
!
[RAN_BUFFER]:
    BEGIN
    LOCAL
	SUB_RANGE : REF NODE_BLOCK;
    IF U_F_BUFFER(.RANGE[BUF_NAME],.RANGE[BUF_LEN]) THEN
	BEGIN
	SUB_RANGE = .RANGE[RANGE1];
	CH$MOVE(POS_SIZE,.E_TBCB,R_ORIG_POS);
	WF_TOP();
	IF .SUB_RANGE[RAN_TYPE] EQL RAN_NULL THEN
	    SUB_RANGE[RAN_TYPE] = RAN_WHOLE;
	RETURN RPOS(.SUB_RANGE)
	END
    ELSE
	BEGIN
	F_PUT_MESS(ERR_INSMEM);
	RETURN 0;
	END
    END;
!
! Range is LAST.  Switch back to the buffer pointed to by E__LAST__BUF
! at it's current position.
!
[RAN_LAST]:
    BEGIN
    LOCAL
	TEMP;
    TEMP = .E_TBCB;
    E_TBCB = .E_LAST_TBCB;
    E_LAST_TBCB = .TEMP;
    WF_R_CURRENT();
    END;
[INRANGE,OUTRANGE]:
    BUG_CHECK(BAD_RAN);
TES;
!
! Save the range node and the current position.
!
R_CUR_RANGE = .RANGE;
CH$MOVE(POS_SIZE,.E_TBCB,R_SAVE_POS);
RETURN 1
END;

!+
! This routine is the external interface to position to the first line of
! a range and set up for range processing.  This routine merely saves the
! current position (for use by '.' ranges) and calls the RPOS routine.
!_

GLOBAL ROUTINE RAN_POS(RANGE) =
BEGIN
CH$MOVE(POS_SIZE,.E_TBCB,R_ORIG_POS);
RPOS(.RANGE)
END;



!+
! This routine moves to the next line in a contigous range.  The DELETED
! parameter is a flag indicating that the last line of the range was deleted
! which means we are already postioned to the next line.  If the R_FIRST
! flag is on, then we are getting the first line of the range so again we
! don't have to read, but in this case, the flag is turned off.
!-

ROUTINE NEXT_LINE(DELETED) : NOVALUE =
IF NOT .DELETED THEN
    IF NOT .R_FIRST THEN
	WF_R_FORWARD()
    ELSE
	R_FIRST = 0;


GLOBAL ROUTINE RAN_NEXT(DELETED) =
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine returns the next line in a range.  The position
!	routine must have been called first if this routine is to
!	work properly.
!
! FORMAL PARAMETERS:
!
!	DELETED		- Indicate whether the last line was deleted.
!
! IMPLICIT INPUTS:
!
!	The range descriptor
!
! IMPLICIT OUTPUTS:
!
!	none
!
! COMPLETION CODES:
!
!	0	-	No more lines exist in this range
!	1	-	A line was sucessfully located
!	
!
! SIDE EFFECTS:
!
!	The current text buffer is re-positioned.
!
!--
BEGIN
LABEL LOOP;
LOCAL
    DEL_FLAG;
!
! Get a local copy of the delete flag, since if this is an ALL range,
! we will loop, and the delete flag will be turned off after the first
! time though.
!
DEL_FLAG = .DELETED;
!
! Loop until we find a line which contains the ALL string.  If no all
! string, we will get out the first time through.
!
LOOP: BEGIN
WHILE 1 DO
    BEGIN
    !
    ! If we are at the end of the buffer, or the R_MORE flag is zero,
    ! then there are no more lines.  Exit with a 0.
    !
    IF .R_MORE EQL 0 OR WF_EOB() THEN
        RETURN 0;
    !
    ! Check for control/c in which case we want to stop processing now.
    !
    IF .E_CC NEQ 0 THEN RETURN 0;
    !
    ! Case on the range type.
    !
    CASE .R_CUR_RANGE[RAN_TYPE] FROM RAN_NULL TO NUM_RAN OF
    SET
    !
    ! For all the single line ranges, if R_FIRST is on, then return
    ! success and turn it off.  If it is not then check to see if it
    ! was part of and AND list, if so, position to the next line in
    ! the list.
    !
    [RAN_NUMBER,RAN_DOT,RAN_STR,RAN_BEGIN,RAN_LAST,RAN_END,RAN_MINUS,
     RAN_PLUS,RAN_NULL,RAN_MINSTR,RAN_ORIG]:
        IF .R_FIRST THEN
            R_FIRST = 0
        ELSE
            IF .R_CUR_RANGE[NEXT_RANGE] EQL 0 THEN
                RETURN 0
            ELSE
                IF RAN_POS(.R_CUR_RANGE[NEXT_RANGE]) THEN 
                    R_FIRST = 0
                ELSE 
                    RETURN 0;
    !
    ! For WHOLE or REST, just move to the next line.
    !
    [RAN_WHOLE,RAN_REST]:
	NEXT_LINE(.DEL_FLAG);
    !
    ! For FOR and SELECT, the range block contains the number of lines
    ! to include.  Count it down, returning failure if it becomes negative.
    !
    [RAN_FOR,RAN_SELECT]:
	BEGIN
	R_CUR_RANGE[RAN_VAL] = .R_CUR_RANGE[RAN_VAL]-1;
	IF .R_CUR_RANGE[RAN_VAL] LSS 0 THEN
	    RETURN 0
	ELSE
	    NEXT_LINE(.DEL_FLAG);
	END;
    !
    ! The THRU and BEFORE ranges have saved away the last line to be
    ! included.  Move to the next line in the range, then compare it
    ! to the last line number.  If it is greater, return failure.
    !
    [RAN_THRU,RAN_BEFORE]:
	BEGIN
	NEXT_LINE(.DEL_FLAG);
	IF WF_COMP_LNO(W_LINE[LIN_NUM],R_END_LINE) GTR 0 THEN
	    RETURN 0;
	END;
    [INRANGE]: ; ! some ranges (such as ALL) can never get here.
    TES;

!+
! If there was an ALL, insure that the string exists in the line.
! If it does not, continue through the loop again looking either
! for one that does contain the string or the end of the range.
!-
	BEGIN

	BIND
	    ALL_RAN = .R_CUR_RANGE [PREV_RANGE] : NODE_BLOCK;

	LOCAL
	    CH_POINT;

	IF (ALL_RAN EQLA 0) THEN LEAVE LOOP;

	IF (.ALL_RAN [RAN_TYPE] NEQ RAN_ALL) THEN LEAVE LOOP;

	CH_POINT = CH$PTR (W_LINE [LIN_TEXT]);

        DECR I FROM .W_LINE [LIN_LENGTH] - .U_SLEN TO 0 DO

            IF (.U_STR_COMP)(.CH_POINT,.ALL_RAN[STR_PNT],.ALL_RAN[RAN_VAL]) THEN
                LEAVE LOOP
            ELSE
                CH_POINT = CH$PLUS(.CH_POINT,1);
	DEL_FLAG = 0;
	END;
	END;

    END;
!+
! Count one more line found in the range.
!-
R_NLINES = .R_NLINES + 1;
RETURN 1
END;

!+
! This litte routine returns the number of lines processed in a range.
!-

GLOBAL ROUTINE RAN_NLINES = .R_NLINES;


!+
! This little routine positions back to the first line in a range, which
! was saved by the RPOS routine.
!-

GLOBAL ROUTINE RAN_REPOS : NOVALUE =
BEGIN
    CH$MOVE(POS_SIZE,R_SAVE_POS,.E_TBCB);
    WF_R_CURRENT()
END;
END
ELUDOM
