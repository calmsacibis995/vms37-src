MODULE PARSER(IDENT='V03-000') =
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY: EDT
!
! FUNCTIONAL DESCRIPTION:
!
!	This module is the parser for the edt command language.  Included
!	are the parse tables and the parse driver.  The semantic routines
!	are also contained in this module.
!
! ENVIRONMENT: User mode, sharable
!
! AUTHOR: Bob Kushlis, CREATION DATE: 12-DEC-1978
!
! MODIFIED BY:
!
! Bob Kushlis, 10-JUL-1979
!	Convert file-spec's to upper case.
!
! Bob Kushlis, 14-JUL-1979
!	Add code for set scroll (SET_ARG1)
!
! Bob Kushlis, 17-JUL-1979
!	Change line prompt to '<CR><LF>*'
!
! Bob Kushlis, 23-MAY-1980
!	Fix APPEND_NUM to up case the alphabetics.
!
! T. Mitchell, 15-JUL-1980, 06
!	Semantic routines added to allow additional key definitions.
!
! Dan Szymanski, 14-NOV-80, 07
!	Unrecognized command diagnostic given in P_COM for input which
!	is not a macro and for which parse fails.
!
! J. Sauter, 13-Nov-1981, 08
!	Implement PREV_RANGE, so ALL can work.
!--
BEGIN

LIBRARY 'EDT';

PSECTS

FORWARD ROUTINE
    GET_CHAR:	NOVALUE,		! Get the next character from the input line
    IS_TOKEN,				! Try to match the current token
    GET_TOKEN:	NOVALUE,		! Get the next token
    PR_DRV,				! Parse table driver
    MACRO_CALL,				! Test if the current token is a macro name
    P_COM,				! Parse a single command
    PUSH,				! Create a semantic node
    NUM_RANGE,				! Create a range node
    APPEND_NUM,				! Append a string of letters and digits to the current token
    SEM_ROUTINES;			! Semantic routines referenced in the parser tables

EXTERNAL ROUTINE
    EXT_DECS
    F_CHAR,
    F_PUT,
    F_LITERAL,
    IO_WT,
    U_DIGIT,
    U_LETDIG,
    U_CVTCASE,
    SY_GET_MESS,
    WF_COMP_LNO;

! PARSER OP-CODE DEFINITIONS
!
! The following are the op-codes accepted by the parser driver.

LITERAL	
	OPC_ABORT	=	0,	! Abort the parse
	OPC_ACTION	=	1,	! Perform action routine
	OPC_CALL	=	2,	! Call sub-table
	OPC_RETURN	=	3,	! End of table or sub-table (return)
	OPC_GOTO	=	4,	! Unconditional goto
	OPC_OPTION	=	5,	! Optional phrase check
	OPC_REQUIRE	=	6,	! Require a specific token
	OPC_SELECT	=	7,	! select one of several options

	OP_ABORT	=	0,	! now the bit values
	OP_ACTION	=	32,
	OP_CALL		= 	64,
	OP_RETURN	=	96,
	OP_GOTO		=	128,
	OP_OPTION	=	160,
	OP_REQUIRE	=	192,
	OP_SELECT	=	224;

MACRO	MIN_LENGTH = 0,0,3,0 %;
MACRO	MAX_LENGTH = 0,4,4,0 %;
MACRO   OPT_PERCENT = 0,3,1,0 %;
MACRO	SYMBOL = 1,0,0,0 %;

BIND
    KEY_BASE = UPLIT (0,257,279,301,0) : VECTOR,
    GOLD_KEY_BASE = UPLIT (328,279,328,328) : VECTOR;

!    PREC = UPLIT BYTE(
!        0, ! no operator
!        5, ! +
!        5, ! -
!        6, ! *
!        6, ! /
!        2, ! and
!        1, ! or
!        3, ! <
!        3, ! <=
!        3, ! =
!        3, ! <>
!        3, ! >=
!        3, ! >
!        3, ! <>
!        4  ! &
!        ) : vector[14,byte];

REQUIRE 'PARSTA';

LITERAL
    NUM_NODES = 20;			! Number of nodes in semantic stack

! Parser own data

EXTERNAL
    P_TAB_POINTER,			! pointer into the parse table
    P_CHAR,				! the currently being processed character
    P_RANGE : REF NODE_BLOCK,		! the current range node
    P_THRURANGE : REF NODE_BLOCK,	! The currently being built thru type range
    P_PERCENT,                    	! Did the keyword contain a percent?
    P_ERROR_NUM,			! Error number of parsing error.
    P_CLASS,				! class of current token
    P_SP,
    P_BUFFER_RANGE : REF NODE_BLOCK,
    P_AND_LIST_HEAD : REF NODE_BLOCK,
!    P_LEFT_OP : REF NODE_BLOCK,
!    P_CUR_OP : REF NODE_BLOCK,
!    P_OPERAND_STACK : VECTOR[NUM_NODES],
!    P_OPERAND_POINT,
!    P_OPERATOR_STACK : VECTOR[NUM_NODES],
!    P_OPERATOR_POINT,
!    P_OPERATOR_BOTTOM,
    P_CUR_COM : REF NODE_BLOCK,
    P_T_ADDR,				! start of the current token
    P_T_LEN,				! length of current token
    P_L_ADDR,				! Previous token address
    P_L_LEN,				! Previous token length
    P_NUM_VAL : LIN_BLOCK,		! the value of a numeric literal
    P_STACK : BLOCKVECTOR[NUM_NODES,NODE_SIZE,BYTE] FIELD(NODE_FIELDS);

!
! External data references.
!
EXTERNAL
    C_BUF,			! Command line buffer.
    C_POINT,			! Pointer into command buffer.
    C_END,			! Pointer to end of current command.
    C_LEN,			! Length of command.
    E_I_SOURCE,			! input source
    E_VERIFY,			! verify switch
    E_MODE,			! current editing mode.
    E_MAC_LIST;			! List of macro definitions.


LITERAL
    HELL_FREEZES=	0,	! so an until will be forever
    TAB		=	9;	! the tab character

LITERAL				! token classes
    CL_NAME	=	0,	! name class
    CL_NUMBER	=	1,	! the number class
    CL_SPECIAL	=	2,	! the special character class
    CL_STRING	=	3;	! The qouted string class


EXTERNAL
    LNO_ZERO : LN_BLOCK,
    LNO_0 : LNOVECTOR[9];

!+
! GET_CHAR
!
! Get the next character from the input line.  If we are pointing at the
! end of the record, return a '!', otherwise, get the character pointed
! to by C_POINT and bump C_POINT.  The character is placed in the global
! P_CHAR and lower case alphabetics are converted to upper case.
!-

ROUTINE GET_CHAR : NOVALUE =
    BEGIN
    IF CH$PTR_GTR(.C_POINT,.C_END) THEN
	P_CHAR = %C'!'
    ELSE
	BEGIN
	P_CHAR = CH$RCHAR_A(C_POINT);
	IF .P_CHAR GEQU %C'a' AND
	   .P_CHAR LEQU %C'z' THEN
	    P_CHAR = .P_CHAR - %C'a' + %C'A';
	END;
    END;	

!+
! IS_TOKEN
!
! This routine compares the current token as described by P_CLASS,
! P_T_ADDR and P_T_LEN to the token specified by the input parameter.
!
! When P_CLASS is CL_NUM or CL_STRING the token will match only T_NUM
! and T_STR respectively.  Otherwise, compare the token to the token_table
! entry specified by TOK_NUM.  P_PERCENT will be on if the token started
! with a '%' and in that case, check the bit to see if an optional percent
! is allowed.
!-

ROUTINE IS_TOKEN(TOK_NUM) =
    BEGIN
    LOCAL
	TOK;	! Index into the token table of the token we are looking for
    !
    ! Case on the token class.
    !
    CASE .P_CLASS FROM CL_NAME TO CL_STRING OF
	SET

	[CL_NUMBER]: RETURN .TOK_NUM EQL T_NUM;

	[CL_STRING]: RETURN .TOK_NUM EQL T_STR;

	[CL_NAME,CL_SPECIAL]:
	    BEGIN
	    !
	    ! Get index of the token.
	    !
	    TOK = .TOK_INDX[.TOK_NUM-1];
	    BEGIN
	    !
	    ! Bind the token descriptor.
	    !
	    BIND TOKEN = TOKEN_TABLE[.TOK] : BLOCK[2,BYTE];
	    !
	    ! Check for optional PERCENT.
	    !
	    IF .P_PERCENT AND NOT .TOKEN[OPT_PERCENT] THEN RETURN 0;
	    !
	    ! Compare the token.
	    !
	    IF .P_T_LEN GEQ .TOKEN[MIN_LENGTH] AND
	       .P_T_LEN LEQ .TOKEN[MAX_LENGTH] THEN
		IF CH$EQL(.P_T_LEN,.P_T_ADDR,
		    .P_T_LEN,TOKEN[SYMBOL])
		THEN
		    RETURN 1
		ELSE
		    RETURN 0
	    ELSE
		RETURN 0;
	    END
	END
	TES
    END;

!+
!
! This routine isolates the next token in the command line, setting
! the variables P_CLASS, P_T_ADDR and P_LEN.  P_CHAR contains the first
! character following the last token, so while it is blank, we keep getting
! the next character.  The previous token address and length are stored
! in P_L_ADDR and P_L_LEN.  If the token is numeric then P_NUM_VAL will
! get the numeric value of the token.
!
!-

GLOBAL ROUTINE GET_TOKEN : NOVALUE =
    BEGIN
    !
    ! Save off the address and length of the last token.
    !
    P_L_ADDR = .P_T_ADDR;
    P_L_LEN = .P_T_LEN;
    ! 
    ! First scan until the first non-blank character.
    !
    UNTIL .P_CHAR NEQ %C' ' AND .P_CHAR NEQ TAB DO GET_CHAR();

    P_T_ADDR = .C_POINT-1;
    P_CLASS = CL_SPECIAL;
    P_PERCENT = 0;
    SELECTONE .P_CHAR OF
        SET

	[%C'0' TO %C'9']:
	    BEGIN
            LOCAL
                DIGIT : LN_BLOCK;
	    P_CLASS = CL_NUMBER;
	    MOVELINE(LNO_ZERO,P_NUM_VAL);
	    DO 
		BEGIN
                MULTLINE(LNO_0[1],P_NUM_VAL,P_NUM_VAL);
                BUILDLINE(.P_CHAR-%C'0',DIGIT);
                ADDLINE(DIGIT,P_NUM_VAL,P_NUM_VAL);
		GET_CHAR();
		END
	    UNTIL NOT U_DIGIT(P_CHAR);
	    END;

	[%C'A' TO %C'Z', %C'%']:
	    BEGIN
	    P_CLASS = CL_NAME;
	    IF .P_CHAR EQL %C'%' THEN
		BEGIN
		P_PERCENT = 1;
		P_T_ADDR = .C_POINT;
		GET_CHAR();
		END;
	    DO BEGIN CH$WCHAR(.P_CHAR,CH$PLUS(.C_POINT,-1)); GET_CHAR() END
	    UNTIL (.P_CHAR LSS %C'A' OR
		  .P_CHAR GTR %C'Z') AND
		  .P_CHAR NEQ %C'_'
	    END;

	[%C':']:
	    BEGIN
	    GET_CHAR();
	    IF .P_CHAR EQL %C'=' THEN
		GET_CHAR();
	    END;

	[%C'''',%C'"']: ! Start of a quoted string
	    BEGIN
	    LOCAL QUOTE;
	    P_CLASS = CL_STRING;
            QUOTE = CH$RCHAR(.P_T_ADDR);

	    WHILE CH$PTR_NEQ(.C_POINT,.C_END) DO
		BEGIN
		IF CH$RCHAR(.C_POINT) EQL .QUOTE THEN
		    BEGIN
		    IF CH$RCHAR(CH$PTR(.C_POINT,1)) NEQ .QUOTE THEN EXITLOOP;
		    CH$MOVE(CH$DIFF(.C_END,.C_POINT),
			    CH$PTR(.C_POINT,1),
			    .C_POINT);
		    END;
		C_POINT = CH$PLUS(.C_POINT,1);
		END;

	    P_T_LEN = CH$DIFF(.C_POINT,.P_T_ADDR)-1;
	    GET_CHAR(); GET_CHAR();
	    RETURN;
	    END;

	[%C'!']: ;

        [OTHERWISE]:
	    GET_CHAR()

	TES;
    P_T_LEN = .C_POINT-.P_T_ADDR-1;
    END;

!+
! PR_DRV
!
! This is the parse table driver routine.  TAB_INDEX indexes a byte in 
! the parse table at which the parse starts.  
!
! This routine loops, fetching the next operator and execting until
! either a RETURN or ABORT command is executed, or a semantic routine
! returns failure.
!
! The value of the routine is 1 for success and zero for failure.
!-

GLOBAL ROUTINE PR_DRV(TAB_INDEX) =
    BEGIN
    LOCAL
    	OP_CODE,		! The parse table op-code
        OPERAND,		! The parse table operand
	SEM_ROUT,		! Number of semantic routine for select
	RETURN_ADDR;		! The address to return to after a call
	
    P_TAB_POINTER = PARSE_TABLE[.TAB_INDEX];
    DO BEGIN
	!
	! Fetch the op_code and the operand from the table and bump
	! past them.
	!
	OP_CODE = .(.P_TAB_POINTER)<5,3>;
	OPERAND = .(.P_TAB_POINTER)<0,5>;
        P_TAB_POINTER = .P_TAB_POINTER + 1;
	IF .OPERAND EQL 0 THEN
	    !
	    ! Here if operand is 0.  This means it is a long-form operand.
	    !
	    BEGIN
	    OPERAND = .(.P_TAB_POINTER)<0,8>;
	    P_TAB_POINTER = .P_TAB_POINTER + 1;
	    END;
	!
	! And now, lets case on the operand.
	!
	CASE .OP_CODE FROM OPC_ABORT TO OPC_SELECT OF
	    SET

	    [OPC_ABORT]: ! This one is easy enough
		RETURN 0;

	    [OPC_ACTION]:	! Perform the specified action routine.
		IF NOT SEM_ROUTINES(.OPERAND,P_TAB_POINTER) THEN 
		    RETURN 0;

	    [OPC_CALL]:	! Call, save current pointer and call yourself.
		BEGIN
		RETURN_ADDR = .P_TAB_POINTER;
		IF PR_DRV(.LAB_TAB[.OPERAND-1]) THEN
		    P_TAB_POINTER = .RETURN_ADDR
		ELSE
		    RETURN 0;
		END;

	    [OPC_GOTO]:	! Just get the new table address and continue.
		P_TAB_POINTER = PARSE_TABLE[.LAB_TAB[.OPERAND-1]];

	    [OPC_OPTION]:	! Skip if the current token is not the optional one.
		IF IS_TOKEN(.OPERAND) THEN
		    BEGIN
		    GET_TOKEN();
		    P_TAB_POINTER = .P_TAB_POINTER + 1;
		    END
		ELSE
		    P_TAB_POINTER = 
			PARSE_TABLE[.LAB_TAB[.(.P_TAB_POINTER)<0,8>-1]];
	
	    [OPC_REQUIRE]:	! Abort if the current token is not the required one.
		IF IS_TOKEN(.OPERAND) THEN
		    GET_TOKEN()
		ELSE
		    RETURN 0;

	    [OPC_SELECT]:	! Loop through the possible tokens, looking for it.
		BEGIN
		LOCAL
		    SELECTED;

		SEM_ROUT = .(.P_TAB_POINTER)<0,8>;
		P_TAB_POINTER = .P_TAB_POINTER + 1;
		SELECTED = 0;
		INCR I FROM 1 TO .OPERAND DO
		    BEGIN
		    IF IS_TOKEN(.(.P_TAB_POINTER)<0,8>) THEN
			BEGIN
			P_TAB_POINTER = PARSE_TABLE[
			    .LAB_TAB[.(.P_TAB_POINTER+1)<0,8>-1]];
			SELECTED = .I;
			EXITLOOP;
			END;
		    P_TAB_POINTER = .P_TAB_POINTER + 2;
		    END;
		IF NOT SEM_ROUTINES(.SEM_ROUT,.SELECTED) THEN
		    RETURN 0;
		IF .SELECTED NEQ 0 THEN GET_TOKEN();
		END;

	    [OPC_RETURN]:	! And another easy one.
		RETURN 1;
	    TES;
    END
    UNTIL HELL_FREEZES
END;

!+
! This routine checks to see if the current token is the name of a macro,
! and returns 1 it is, 0 if not.  A list of macro description records is
! scanned and the current token is compared against each of them.
!-

ROUTINE MACRO_CALL =
    BEGIN
    LOCAL
	C,
	LEN,
	MAC : REF MAC_BLOCK,
	BUF : REF TBCB_BLOCK;

    IF .P_CLASS EQL CL_NAME THEN
	BEGIN
	LEN = .P_T_LEN;
	C = CH$PTR(.P_T_ADDR,.P_T_LEN);
	WHILE U_DIGIT(.C) DO
	    BEGIN
	    C = CH$PLUS(.C,1);
	    LEN = .LEN+1;
	    END;
	MAC = .E_MAC_LIST;
	WHILE .MAC NEQ 0 DO
	    BEGIN
	    BUF = .MAC[MAC_BUF];
	    IF CH$EQL(.LEN,.P_T_ADDR,.BUF[TBCB_NAME_LEN],BUF[TBCB_NAME]) THEN
		BEGIN
		SEM_ROUTINES(INI_COM,COM_MAC_CALL);
		P_CUR_COM[RANGE1] = .MAC[MAC_BUF];
		C_POINT = .C;
		GET_CHAR();
		GET_TOKEN();
		RETURN 1;
		END;
	    MAC = .MAC[MAC_NEXT];
	    END;
	END;

    RETURN 0;
    END;

!+
! P_COM
! 
! This routine is called to parse a single command on the current command
! line.  C_POINT points to the first character of the command.  If the
! parse is successful, a 1 is returned and the parsing stack contains a
! description of the command.  C_POINT is left pointing at the ';' or
! '!' which are the only valid terminators of commands.  If an error
! occurs, a 0 is returned, and C_POINT is forced to point to the '!' at
! the end of the current command line, to prevent the rest of the commands
! from begin executed.
!-

GLOBAL ROUTINE P_COM =
    BEGIN
    !
    ! Initialize the command node pointer and the parsing stack pointer.
    !
    P_CUR_COM = 0;
    P_SP = -1;
    !OPERAND_POINT = -1;
    !OPERATOR_POINT = -1;
    !OPERATOR_BOTTOM = -1;
    P_T_ADDR = .C_POINT;
    GET_CHAR();
    GET_TOKEN();
    P_ERROR_NUM = 0;
    IF MACRO_CALL() OR PR_DRV(0) THEN
	BEGIN
	C_POINT = .P_T_ADDR;
	IF CH$RCHAR(.C_POINT) EQL %C';' THEN
	    BEGIN
	    C_POINT = CH$PLUS(.C_POINT,1);
	    RETURN 1;
	    END
	ELSE
	    IF CH$RCHAR(.C_POINT) EQL %C'!' THEN
		RETURN 1
	    ELSE
		P_ERROR_NUM = ERR_UNXCHRAFT;
	END
    ELSE
	! If neither call was successful, but no error number assigned,
	! give the unrecognized command diagnostic.
	!
	IF .P_ERROR_NUM EQL 0 THEN P_ERROR_NUM = ERR_UNRCOM;

    IF .E_I_SOURCE NEQ INP_TERM AND
       .E_VERIFY EQL 0 THEN
	BEGIN
	F_CHAR(' ');
	F_LITERAL(C_BUF,.C_LEN);
	F_PUT();
	END;

    DECR I FROM CH$DIFF(.P_T_ADDR,C_BUF) TO 0 DO F_CHAR(' ');
    F_CHAR('^');
    F_PUT();

    SY_GET_MESS(.P_ERROR_NUM);
    F_PUT();
    C_POINT = .C_END;
    CH$WCHAR('!',.C_END); 
    RETURN 0;
    END;

!+
! Create a semantic node of the specified type and subtype.  If the
! stack overflows, return a 0 otherwise, return the address of the new
! node.
!-

ROUTINE PUSH(NT,TYP) =
    BEGIN
    LOCAL
	NODE : REF NODE_BLOCK;

    P_SP = .P_SP + 1;
    IF .P_SP GTRU NUM_NODES THEN
	BEGIN
	P_ERROR_NUM = ERR_PARSTKOVF;
	RETURN 0;
	END;

    NODE =  P_STACK[.P_SP,NODE_TYPE];
    CH$FILL(0,NODE_SIZE,.NODE);
    NODE[NODE_TYPE] = .NT;
    NODE[COM_NUM] = .TYP;
    RETURN .NODE;
    END;    

!+
! Create a range node of the type which has one numeric value.
!-

ROUTINE NUM_RANGE(RANTYP) =
    BEGIN
    LOCAL
    	NEWRANGE : REF NODE_BLOCK;
    IF (NEWRANGE = PUSH()) EQL 0 THEN RETURN 0;
    CH$MOVE(NODE_SIZE,.P_RANGE,.NEWRANGE);
    P_RANGE[SUB_RANGE] = .NEWRANGE;
    P_RANGE[RAN_TYPE] = .RANTYP;
    P_RANGE[RAN_VAL] = 1
    END;

!+
! Append a string of digits and letters to the current token.  Normally,
! CL_NAME type tokens are terminated by a digit.  In some cases we want
! to allow digits in the token.  This routine expands the length of the
! current token to include all digits and letters which immediately follow.
!-

ROUTINE APPEND_NUM =
    BEGIN
    IF .P_CLASS NEQ CL_NAME THEN RETURN 0;
    WHILE U_LETDIG(P_CHAR) DO
	BEGIN
	GET_CHAR();
	CH$WCHAR(.P_CHAR,CH$PLUS(.C_POINT,-1));
	P_T_LEN = .P_T_LEN + 1;
	END;
    RETURN 1;
    END;

!ROUTINE REDUCE(P) =
!BEGIN
!WHILE .OPERATOR_POINT GEQ 0 AND
!      .OPERATOR_STACK[.OPERATOR_POINT] NEQ 0 AND
!      .PREC[.OPERATOR_STACK[.OPERATOR_POINT]] GEQ .P DO
!    BEGIN
!    IF (CUR_OP = 
!        PUSH(OP_NODE,.OPERATOR_STACK[.OPERATOR_POINT]+OP_ADD-1)) NEQ 0 THEN
!        BEGIN
!        OPERATOR_POINT = .OPERATOR_POINT-1;
!        CUR_OP[RIGHT_OP] = .OPERAND_STACK[.OPERAND_POINT];
!        OPERAND_POINT = .OPERAND_POINT - 1;
!        CUR_OP[LEFT_OP] = .OPERAND_STACK[.OPERAND_POINT];
!        OPERAND_STACK[.OPERAND_POINT] = .CUR_OP;
!        END
!    ELSE
!        RETURN 0
!    END;
!RETURN 1
!END;
!
!ROUTINE PUSH_OPERATOR(O) =
!BEGIN
!OPERATOR_POINT = .OPERATOR_POINT+1;
!IF .OPERATOR_POINT GEQ NUM_NODES THEN
!    BEGIN
!    P_ERROR_NUM = ERR_PARSTKOVF;
!    RETURN 0;
!    END;
!OPERATOR_STACK[.OPERATOR_POINT] = .O;
!RETURN 1
!END;
!
!ROUTINE PUSH_OPERAND =
!BEGIN
!OPERAND_POINT = .OPERAND_POINT+1;
!IF .OPERAND_POINT GEQ NUM_NODES THEN
!    BEGIN
!    P_ERROR_NUM = ERR_PARSTKOVF;
!    RETURN 0;
!    END;
!OPERAND_STACK[.OPERAND_POINT] = .CUR_OP;
!RETURN 1;
!END;
!
!ROUTINE POP_OPERAND =
!BEGIN
!OPERAND_POINT = .OPERAND_POINT - 1;
!RETURN .OPERAND_STACK[.OPERAND_POINT+1]
!END;

!+
! The semantic actions for the parser.  Which specifies which of the 
! actions to perform.  Operand is the index of the token which matched
! if the semantic routine was called as a result of a select operator.
!-

ROUTINE SEM_ROUTINES(WHICH,OPERAND) =
    BEGIN
    CASE .WHICH FROM 1 TO NUM_SEM OF
	SET

	[INI_COM]: ! Initialize for a command
	    BEGIN
	    IF .P_CUR_COM NEQ 0 THEN
	    P_CUR_COM[NEXT_COM] = .P_SP;
	    P_CUR_COM = PUSH(COM_NODE,.OPERAND);
	    END;

	[INIRAN]: ! Initialize for a range
	    BEGIN
	    IF (P_RANGE = PUSH(RANGE_NODE,.OPERAND)) EQL 0 THEN RETURN 0;
	    IF .P_CLASS EQL CL_NUMBER THEN
		P_RANGE[RAN_VAL] = .P_NUM_VAL;
	    END;

	[START_RANGE]:
	    BEGIN
	    IF .OPERAND NEQ 0 THEN
		SEM_ROUTINES(INIRAN,.OPERAND+NUM_SLR);
	    END;

	[BUF_RAN]:
	    BEGIN
	    P_ERROR_NUM = ERR_INVBUFNAM;
	    IF NOT APPEND_NUM() THEN RETURN 0;
	    SEM_ROUTINES(INIRAN,RAN_BUFFER);
	    P_RANGE[BUF_NAME] = .P_T_ADDR;
	    P_RANGE[BUF_LEN] = .P_T_LEN;
	    P_BUFFER_RANGE = .P_RANGE;
	    GET_TOKEN();
	    END;

	[APP_NUM]: ! Append numerics to a name.
	    APPEND_NUM();

	[BUF_RAN2]:
	    BEGIN
	    P_BUFFER_RANGE[RANGE1] = .P_RANGE;
	    P_RANGE = .P_BUFFER_RANGE;
	    END;

	[GETSTR]:
	    BEGIN
	    P_RANGE[RAN_VAL] = .P_L_LEN;
	    P_RANGE[STR_PNT] = .P_L_ADDR+1;
	    IF .P_RANGE[RAN_TYPE] EQL RAN_MINUS THEN
		P_RANGE[RAN_TYPE] = RAN_MINSTR;
	    END;

	[ALLRAN]:
	    BEGIN
	    LOCAL
		SUB_RAN : REF NODE_BLOCK;
	    SUB_RAN = .P_RANGE;
	    IF NOT SEM_ROUTINES(INIRAN,RAN_ALL) THEN RETURN 0;
	    P_RANGE[NEXT_RANGE] = .SUB_RAN;
	    SUB_RAN[PREV_RANGE] = .P_RANGE;
	    IF .P_CLASS NEQ CL_STRING THEN
		BEGIN
		P_ERROR_NUM = ERR_QUOSTRREQ;
		RETURN 0;
		END;
	    P_RANGE[RAN_VAL] = .P_T_LEN;
	    P_RANGE[STR_PNT] = .P_T_ADDR+1;
	    GET_TOKEN();
	    END;

	[RAN1]:
    	    P_CUR_COM[RANGE1] = .P_RANGE;

	[RAN2]:
    	    P_CUR_COM[RANGE2] = .P_RANGE;

	[PLUSRAN]:
    	    NUM_RANGE(RAN_PLUS);

	[MINUSRAN]:
    	    NUM_RANGE(RAN_MINUS);

	[FORRAN]:
    	    NUM_RANGE(RAN_FOR);
	
	[RANNUM]: ! The numeric argument for the above ranges
	    P_RANGE[RAN_VAL] = .P_NUM_VAL;

	[LINE_NUM_RANGE]: ! Numeric range value
	    MOVELINE(P_NUM_VAL,P_RANGE[RAN_VAL]);

	[LINE_NUM]: ! the line number
	    BEGIN
	    LOCAL
		MULTIPLIER,
		DIGIT : LN_BLOCK;
	    MULTLINE(LNO_0[5],P_NUM_VAL,P_NUM_VAL);
	    IF CH$RCHAR(.P_T_ADDR) EQL %C'.' THEN
		BEGIN
		MULTIPLIER = 4;
		WHILE U_DIGIT(P_CHAR) DO
		    BEGIN
		    BUILDLINE(.P_CHAR-%C'0',DIGIT);
		    IF .MULTIPLIER GEQ 0 THEN
			BEGIN
			MULTLINE(LNO_0[.MULTIPLIER],DIGIT,DIGIT);
			ADDLINE(DIGIT,P_NUM_VAL,P_NUM_VAL);
			END;
		    GET_CHAR();
		    MULTIPLIER = .MULTIPLIER - 1;
		    END;
		GET_TOKEN();
		END;
	    END;

	[BIN_RANGE]:
	    BEGIN
	    IF (P_THRURANGE = PUSH(RANGE_NODE,0)) EQL 0 THEN RETURN 0;
	    P_THRURANGE[RANGE1] = .P_RANGE;
	    END;

	[THRU_RAN]:
	    BEGIN
	    P_THRURANGE[RAN_TYPE] = RAN_THRU;
	    P_THRURANGE[RANGE2] = .P_RANGE;
	    P_RANGE = .P_THRURANGE;
	    END;

	[AND_HEAD]:
	    P_AND_LIST_HEAD = .P_RANGE;
    
	[AND_NEXT]:
	    BEGIN
	    LOCAL
		RANGE : REF NODE_BLOCK;
	    RANGE = .P_AND_LIST_HEAD;
	    WHILE .RANGE[NEXT_RANGE] NEQ 0 DO RANGE = .RANGE[NEXT_RANGE];
	    RANGE[NEXT_RANGE] = .P_RANGE;
	    P_RANGE[PREV_RANGE] = .RANGE;
	    P_RANGE = .P_AND_LIST_HEAD;
	    END;

	[WHICHSUBS]:
    	    IF .OPERAND EQL 1 THEN P_CUR_COM[COM_NUM] = COM_SUBS_NEXT;

	[STRINGS]: ! Get the search and replace strings for substitute
	    BEGIN
	    LOCAL
		STRNODE : REF NODE_BLOCK,
		CURSOR,
		QUOTE;
	    IF (STRNODE = PUSH(STR_NODE,0)) EQL 0 THEN RETURN 0;
	    P_CUR_COM[STR_PNT] = .STRNODE;
	    IF U_LETDIG(.P_T_ADDR) THEN
		BEGIN
		P_ERROR_NUM = ERR_NONALPHANUM;
		RETURN 0;
		END;
	    QUOTE = CH$RCHAR(.P_T_ADDR);
	    CURSOR = CH$PLUS(.P_T_ADDR,1);
	    STRNODE[SRCHADDR] = .CURSOR;
	    UNTIL CH$RCHAR(.CURSOR) EQL .QUOTE OR
		.CURSOR GEQU .C_END DO
		CURSOR = CH$PLUS(.CURSOR,1);
	    STRNODE[SRCHLEN] = .CURSOR - .P_T_ADDR -1;
	    CURSOR = CH$PLUS(.CURSOR,1);
	    STRNODE[REPADDR] = .CURSOR;
	    UNTIL CH$RCHAR(.CURSOR) EQL .QUOTE OR
		  .CURSOR GEQU .C_END
	    DO CURSOR = CH$PLUS(.CURSOR,1);
	    STRNODE[REPLEN] = .CURSOR - .STRNODE[REPADDR];
	    C_POINT = CH$PLUS(.CURSOR,1);
	    GET_CHAR(); GET_TOKEN();
	    IF .STRNODE[REPLEN] EQL 0 AND
	       .STRNODE[SRCHLEN] EQL 0 THEN
		BEGIN
		P_ERROR_NUM = ERR_SUBSTRNULL;
		RETURN 0;
		END;
	    END;

	[FILSPC]:
	    BEGIN
	    LOCAL
		QUOTE;
	    P_CUR_COM[FILSPEC] = .P_T_ADDR;
	    C_POINT = .P_T_ADDR;
	    GET_CHAR();
	    QUOTE = 0;
	    IF .P_CHAR NEQ %C';' THEN
		WHILE (.P_CHAR NEQ %C' ' AND
		       .P_CHAR NEQ %C'!' AND
		       .P_CHAR NEQ %C'/') OR
		       .QUOTE NEQ 0 DO 
		    BEGIN
		    IF .P_CHAR EQL %C'"' THEN
			QUOTE = NOT .QUOTE;
		    GET_CHAR();
		    END;
	    P_CUR_COM[FSPCLEN] = .C_POINT - .P_CUR_COM[FILSPEC] -1;
	    U_CVTCASE(.P_CUR_COM[FILSPEC],.P_CUR_COM[FSPCLEN]);
	    GET_TOKEN();
	    END;

	[HELPSTR]:
	    BEGIN
	    P_CUR_COM[FILSPEC] = .P_T_ADDR;
	    C_POINT = .P_T_ADDR;
	    GET_CHAR();
	    WHILE .P_CHAR NEQ %C'!' AND
		  .P_CHAR NEQ %C';' DO GET_CHAR();
	    P_CUR_COM[FSPCLEN] = .C_POINT - .P_CUR_COM[FILSPEC] -1;
	    GET_TOKEN();
	    END;

	[CHKALPHA]: 
	    IF .P_CLASS EQL CL_NAME AND
	       NOT .P_PERCENT THEN
		BEGIN
		P_ERROR_NUM = ERR_UNRCOM;
		RETURN 0
		END;

	[A_SWITCH]:
	    BEGIN
	    LOCAL
		SWITCH_NODE : REF NODE_BLOCK;
	    IF .P_CUR_COM[SWITS] EQL 0 THEN
		BEGIN
		IF (SWITCH_NODE = PUSH(SW_NODE,0)) EQL 0 THEN RETURN 0;
		P_CUR_COM[SWITS] = .SWITCH_NODE;
		END
	    ELSE
		SWITCH_NODE = .P_CUR_COM[SWITS];
	    IF (.SWITCH_NODE[SW_BITS] AND 1 ^ .OPERAND) NEQ 0 THEN
		RETURN 0;
	    SWITCH_NODE[SW_BITS] = .SWITCH_NODE[SW_BITS] OR 1 ^ .OPERAND;
	    END;

	[SWITCH_1]:
	    BEGIN
	    BIND
    		SWITCH = .P_CUR_COM[SWITS] : NODE_BLOCK;
	    MOVELINE(P_NUM_VAL,SWITCH[SW_VAL1]);
	    SWITCH[SEQ_VAL] = 1;
	    END;

	[SWITCH_2]:
	    BEGIN
	    BIND
    		SWITCH = .P_CUR_COM[SWITS] : NODE_BLOCK;
	    MOVELINE(P_NUM_VAL,SWITCH[SW_VAL2]);
	    END;

	[SETTYPE]:
    	    P_CUR_COM[SET_TYPE] = .OPERAND;

	[SETVAL]:
    	    P_CUR_COM[SET_VAL] = .OPERAND;

	[SET_ARG]:
    	    P_CUR_COM[SET_VAL] = .P_NUM_VAL;

	[SET_ARG1]:
    	    P_CUR_COM[SET_VAL1] = .P_NUM_VAL;

	[DEF_KEY]:
    	    P_CUR_COM[KEY_VAL] = .KEY_BASE[.OPERAND];

	[KEY_NUM]:
    	    P_CUR_COM[KEY_VAL] = .P_CUR_COM[KEY_VAL] + .P_NUM_VAL;

	[DEF_GOLD_KEY]:
    	    P_CUR_COM[KEY_VAL] = .GOLD_KEY_BASE[.OPERAND];

	[DEF_GOLD_DEL]:
    	    P_CUR_COM[KEY_VAL] = 127 + .P_CUR_COM[KEY_VAL];

	[DEF_DELETE]:
    	    P_CUR_COM[KEY_VAL] = 256 ;

	[DEF_CHAR]:
	    BEGIN
	    P_ERROR_NUM = ERR_KEYNOTDEF;
	    RETURN 0;
	    END;
    
	[DEF_GOLD_CHAR]:
	    BEGIN
	    IF .P_T_LEN NEQ 1
	    THEN
		BEGIN
		P_ERROR_NUM = ERR_KEYNOTDEF;
		RETURN 0;
		END;
	    P_CUR_COM[KEY_VAL] = CH$RCHAR(.P_T_ADDR) + .P_CUR_COM[KEY_VAL];
	    GET_TOKEN();
	    END;

	[DEF_GOLD_CONT]:
	    BEGIN
	    IF .P_T_LEN NEQ 1 OR
	       CH$RCHAR(.P_T_ADDR) LEQ %C'@' OR
	       CH$RCHAR(.P_T_ADDR) GTR %C'Z' THEN
		    BEGIN
		    P_ERROR_NUM = ERR_KEYNOTDEF;
		    RETURN 0;
		    END;
	    P_CUR_COM[KEY_VAL] = CH$RCHAR(.P_T_ADDR) - %C'@' + .P_CUR_COM[KEY_VAL];
	    GET_TOKEN();
	    END;

	[CONT_CHAR]:
	    BEGIN
	    IF .P_T_LEN NEQ 1 OR
	       CH$RCHAR(.P_T_ADDR) LEQ %C'@' OR
	       CH$RCHAR(.P_T_ADDR) GTR %C'Z' THEN
		    BEGIN
		    P_ERROR_NUM = ERR_KEYNOTDEF;
		    RETURN 0;
		    END;
	    P_CUR_COM[KEY_VAL] = CH$RCHAR(.P_T_ADDR) - %C'@' + .P_CUR_COM[KEY_VAL];
	    GET_TOKEN();
	    END;

	[AS_STRING]:
	    BEGIN
	    P_CUR_COM[AS_STR] = .P_L_ADDR + 1;
	    P_CUR_COM[AS_LEN] = .P_L_LEN;
	    END;

	[INIT_SEQ]:
	    BEGIN
	    BIND
    		SWIT = .P_CUR_COM[SWITS] : NODE_BLOCK;
	    MOVELINE(LNO_0[5],SWIT[SW_VAL1]);
	    MOVELINE(LNO_0[5],SWIT[SW_VAL2]);
	    SWIT[SEQ_VAL] = 0;
	    END;

	[DEF_MAC]:
	    BEGIN
	    P_CUR_COM[RANGE1] = .P_RANGE;
	    P_CUR_COM[COM_NUM] = COM_DEF_MAC;
	    END;

	[TABCOUNT]:
	    BEGIN
	    LOCAL
		NEG;
	    NEG = 0;
	    IF CH$RCHAR(.P_T_ADDR) EQL %C'-' THEN 
		BEGIN
		NEG = .NEG+1;
		GET_TOKEN();
		END;
	    IF .P_CLASS NEQ CL_NUMBER THEN
		BEGIN
		P_ERROR_NUM = ERR_NUMVALREQ;
		RETURN 0;
		END;
	    IF .NEG THEN P_NUM_VAL = -.P_NUM_VAL;
	    P_CUR_COM[TAB_COUNT] = .P_NUM_VAL;
	    GET_TOKEN();
	    END;
	
    !    [P_STRING]:
    !	BEGIN
    !        IF (CUR_OP = PUSH(OP_NODE,OP_STRING)) EQL 0 THEN RETURN 0;
    !	CUR_OP[OP_LEN] = .P_L_LEN;
    !	CUR_OP[OP_ADDR] = .P_L_ADDR+1;
    !	END;
    !
    !    [P_NUM]:
    !	BEGIN
    !        IF (CUR_OP = PUSH(OP_NODE,OP_NUM)) EQL 0 THEN RETURN 0;
    !        CUR_OP[OP_VAL] = .P_NUM_VAL;
    !        END;
    !
    !    [P_POS]:
    !        IF (CUR_OP = PUSH(OP_NODE,OP_POS)) EQL 0 THEN RETURN 0;
    !
    !    [VAR_REF]:
    !	BEGIN
    !	IF (CUR_OP = PUSH(OP_NODE,OP_VAR)) EQL 0 THEN RETURN 0;
    !        CUR_OP[OP_LEN] = .P_T_LEN;
    !        CUR_OP[OP_ADDR] = .P_T_ADDR;
    !        GET_TOKEN();
    !        END;
    !
    !    [VAR_DOT]:
    !        CUR_OP = PUSH(OP_NODE,OP_DOT);
    !
    !    [COM_EXP]:
    !        P_CUR_COM[COM_EXPR] = POP_OPERAND();
    !
    !    [COM_VAR]:
    !	P_CUR_COM[COM_VARBL] = .CUR_OP;
    !
    !    [OPERATOR]:
    !	BEGIN
    !        IF NOT PUSH_OPERAND() THEN RETURN 0;
    !        IF REDUCE(.PREC[.OPERAND]) EQL 0 THEN RETURN 0;
    !        IF .OPERAND NEQ 0 THEN RETURN PUSH_OPERATOR(.OPERAND);
    !        END;
    !
    !    [UNARY1]:
    !        IF .OPERAND NEQ 0 THEN RETURN PUSH_OPERATOR(.OPERAND+OP_NEG-1);
    !
    !    [UNARY2]:
    !        BEGIN
    !        PUSH_OPERAND();
    !        IF (CUR_OP = PUSH(OP_NODE,.OPERATOR_STACK[.OPERATOR_POINT])) EQL 0 THEN RETURN 0;
    !        OPERATOR_POINT = .OPERATOR_POINT - 1;
    !        CUR_OP[OP_RIGHTOP] = POP_OPERAND();
    !        END;
    !        
    !    [START_PAREN]:
    !        RETURN PUSH_OPERATOR(0);
    !
    !    [END_PAREN]:
    !        BEGIN
    !        OPERATOR_POINT = .OPERATOR_POINT - 1;
    !        CUR_OP = POP_OPERAND();
    !        END;
    !
    !    [SUBSTRING]:
    !        BEGIN
    !        LOCAL
    !            BASE_OP;
    !        BASE_OP = .CUR_OP;
    !        CUR_OP = PUSH(OP_NODE,OP_SUBSTR);
    !        CUR_OP[SUB_BASE] = .BASE_OP;
    !        RETURN PUSH_OPERAND() AND PUSH_OPERATOR();
    !        END;
    !
    !    [SUBSTRING1]:
    !        BEGIN
    !        LOCAL
    !            START;
    !        START = POP_OPERAND();
    !        CUR_OP = POP_OPERAND();
    !        CUR_OP[SUB_START] = .START;
    !        CUR_OP[SUB_LENGTH] = 0;
    !        OPERATOR_POINT = .OPERATOR_POINT -1;
    !        END;
    !
    !    [SUBSTRING2]:
    !        RETURN PUSH_OPERAND() AND PUSH_OPERATOR(0);
    !
    !    [SUBSTRING3]:
    !        BEGIN
    !        LOCAL
    !            LENGTH;
    !        LENGTH = POP_OPERAND();
    !        CUR_OP = POP_OPERAND();
    !        CUR_OP[SUB_LENGTH] = .LENGTH;
    !        OPERATOR_POINT = .OPERATOR_POINT - 1;
    !        END;
    !
    !    [FINDOP]:
    !        BEGIN
    !        OPERATOR_POINT = .OPERATOR_POINT-1;
    !        IF (CUR_OP = PUSH(OP_NODE,OP_FIND)) EQL 0 THEN RETURN 0;
    !        CUR_OP[RANGE1] = .P_RANGE;
    !        END;

	[BAD_PARAM]:
    	    P_ERROR_NUM = ERR_INVPARFOR;

	[BAD_VALUE]:
    	    P_ERROR_NUM = ERR_INVVALSET;

	[REQ_NUM]:
    	    P_ERROR_NUM = ERR_NUMVALREQ;

	[REQ_STRING]:
    	    P_ERROR_NUM = ERR_QUOSTRREQ;

	[BAD_RANGE]:
    	    P_ERROR_NUM = ERR_ERRRANSPC;

	[BAD_OPTION]:
    	    P_ERROR_NUM = ERR_ERRCOMOPT;

	[UNREC_OPTION]:
    	    P_ERROR_NUM = ERR_UNRCOMOPT;

	[REQ_COLON]:
    	    P_ERROR_NUM = ERR_COLONREQ;

    !    [VAR_ERROR]: P_ERROR_NUM = ERR_VARREQ;

	[MACORKEY]:
    	    P_ERROR_NUM = ERR_MACKEYREQ;

	[ENTITY_ERR]:
    	    P_ERROR_NUM = ERR_ENTMUSTBE;

	[REQ_AS]:
    	    P_ERROR_NUM = ERR_ASREQ;

	[NO_ACTION]: ;

	TES;
    RETURN 1;
END;

END
ELUDOM
