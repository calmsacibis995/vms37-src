MODULE UTIL(IDENT='V03-000') =
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY: EDT Version 2
!
! FUNCTIONAL DESCRIPTION:
!
! 	This module contains utility routine to:
!
!		Maintain the search and substitute buffers.
!
!		Check characters for letter and digits.
!
!		Create or find text buffers.
!
!		Convert strings to upper case.
!	
!
! ENVIRONMENT: User mode, sharable
!
! AUTHOR: Bob Kushlis, CREATION DATE: 7-Feb-1978
!
! MODIFIED BY:
!
! 2.02	Use the current string length when avoiding searching
!	off the end of the line.  Otherwise, a 0-length
!	search string (which means use the previous string)
!	will search off the end of the line.  JBS 15-Dec-1981
!
!--
BEGIN

LIBRARY 'EDT';

PSECTS


FORWARD ROUTINE
    U_CASE_COMP;

EXTERNAL ROUTINE
    SYS_GET_MEM,
    WF_OPEN_BUFFER,
    WF_R_FORWARD,
    WF_R_BACKWRD;

EXTERNAL
    E_TBCB 	: REF TBCB_BLOCK,		! Pointer to current buffer TBCB
    E_LAST_TBCB : REF TBCB_BLOCK,		! Pointer to previos buffer TBCB
    E_CC	: VOLATILE,			! CTRL/C flag.
    W_LINE	: REF LIN_BLOCK,		! Pointer to the current line
    E_BUF_LIST,					! Pointer to first buffer in line.
    E_EXACT;					! Exact search flag.

EXTERNAL
    U_SRCHSTR : BLOCK[CH$ALLOCATION(64)],	! Last search string.
    U_SLEN,					! Length of above.
    U_STR_COMP,					! Addr of string comp routine
    U_SUBSTR : BLOCK[CH$ALLOCATION(64)],	! Last substitute string.
    U_SUBLEN;					! Length of above.

!+
! This routine converts a character string to upper case in place.
!
! STRING	Pointer to the string.
!
! LEN		Length of the string.
!-

GLOBAL ROUTINE U_CVTCASE(STRING,LEN) : NOVALUE =
BEGIN
LOCAL
    C,
    P;
P = .STRING;
INCR I FROM 1 TO .LEN DO
    BEGIN
    C = CH$RCHAR(.P);
    IF .C GEQ 'a' AND .C LEQ 'z' THEN
	CH$WCHAR(.C-'a'+'A',.P);
    P = CH$PLUS(.P,1)
    END
END;

!+
! This routine compares two strings for equality without regard to differences
! in case.  It is assumed that the OBJECT string has been previously converted
! to upper case.
!
! SOURCE	Pointer to source string.
!
! OBJECT	Pointer to object string.
!
! OBJ_LEN	length of both strings.
!
! Returns one if the strings match, zero otherwise.
!-

GLOBAL ROUTINE U_CASE_COMP(SOURCE,OBJECT,OBJ_LEN) =
BEGIN
LOCAL 
    S,		! Pointer to source string.	
    O,		! Pointer to object string.
    SC;		! Character from source stirng converted to upper case.
!
! Get local pointers to the two strings.
!
O = .OBJECT;
S = .SOURCE;
!
! Now loop OBJ_LEN times, comparing a character.
!
INCR I FROM 0 TO .OBJ_LEN-1 DO
    BEGIN
    SC = CH$RCHAR_A(S);
    !
    ! convert to upper case if lower case alphabetic.
    !
    IF .SC GEQ 'a' AND .SC LEQ 'z' THEN
	SC = .SC - 'a' + 'A';
    IF .SC NEQ CH$RCHAR_A(O) THEN
	RETURN 0
    END;
RETURN 1
END;

!+
! This routine compares two strings for an exact case match.
!
! SOURCE	Pointer to the source string.
!
! OBJECT	Pointer to the object string.
!
! OBJ_LEN	Length of both strings.
!
! Returns one is the strings match, zero if not.
!-

GLOBAL ROUTINE U_EXACT_COMP(SOURCE,OBJECT,OBJ_LEN) =
CH$EQL(.OBJ_LEN,.SOURCE,.OBJ_LEN,.OBJECT);

!+
! This routine sets up the search current search string.  If the parameter
! is zero in length, the current search string is kept.
!
! STRING 	Pointer to the new search string.
!
! LEN		Length of the new search string.
!-

GLOBAL ROUTINE U_S_STRING(STRING,LEN) : NOVALUE =
IF .LEN NEQ 0 THEN
    BEGIN
    !
    ! Truncate the string to 64 characters at most.
    !
    IF .LEN GTR 64 THEN LEN = 64;
    IF NOT .E_EXACT THEN
	U_CVTCASE(.STRING,.LEN);
    CH$MOVE(.LEN,.STRING,U_SRCHSTR);
    U_SLEN = .LEN;
    END;

!+
! Line mode string search routine.  Set-up the string which is passed in
! as the current search string, then work our way through the buffer in
! the specified direction looking for the string.  If the string is found
! the buffer position is left at the string, otherwise it will be at the
! beginning or end depeneding on the direction.
!
! STRING	Pointer to the search string.
!
! LEN		Length of the search string.
!
! DIR		Direction of search, 0 = backward, 1 = forward.
!
! Returns one is the string is found, zero otherwise.
!-

GLOBAL ROUTINE U_FIND_STRING(STRING,LEN,DIR) =
BEGIN
LOCAL 
    SC,
    SOURCE;
!
! Set up the new search string.
!
U_S_STRING(.STRING,.LEN);
WHILE 1 DO
    BEGIN
    !
    ! Check for CTRL/C abort.
    !
    IF .E_CC NEQ 0 THEN RETURN 0;    
    !
    ! If seaching backward, then go back a line.
    !
    IF NOT .DIR THEN
	IF NOT WF_R_BACKWRD() THEN
	    RETURN 0;
    !
    ! Get a pointer to the line.
    !
    SOURCE = W_LINE[LIN_TEXT];
    !
    ! compare at each character in the line.
    !
    INCR I FROM .E_TBCB[TBCB_CHAR_POS] TO .W_LINE[LIN_LENGTH]-.U_SLEN DO
	IF (.U_STR_COMP)(CH$PTR(.SOURCE,.I),U_SRCHSTR,.U_SLEN) THEN
	    BEGIN
	    E_TBCB[TBCB_CHAR_POS] = .I+.U_SLEN;
	    RETURN 1
	    END;
    !
    ! If the direction is forward, then move forward a line.
    !
    IF .DIR THEN
	IF NOT WF_R_FORWARD() THEN
	    RETURN 0
    END
END;

!+
! Set-up the the search and substitute strings.
!
! SEARCH	Pointer to the new search string
!
! SLEN		Length of the search string.
!
! SUBSTR	Pointer to the new substitute string.
!
! SUBLEN	Length of substitute string.
!-

GLOBAL ROUTINE U_S_SUBS(SEARCH,SLEN,SUBSTR,SUBLEN) : NOVALUE =
BEGIN
U_S_STRING(.SEARCH,.SLEN);
IF .SUBLEN GTR 64 THEN SUBLEN = 64;
CH$MOVE(.SUBLEN,.SUBSTR,U_SUBSTR);
U_SUBLEN = .SUBLEN;
END;

!+
! This routine tests a character to determine whether it is alphabetic.
!
! C_POINT	A pointer to the character to test.
!
! Returns one if the character is alphabetic, zero otherwise.
!-
 
GLOBAL ROUTINE U_LETTER(C_POINT) =
CH$RCHAR(.C_POINT) GEQU 'A' AND
CH$RCHAR(.C_POINT) LEQU 'Z' OR
CH$RCHAR(.C_POINT) GEQU 'a' AND
CH$RCHAR(.C_POINT) LEQU 'z';

!+
! This routine tests a character to determine whether it is numeric.
!
! C_POINT	A pointer to the character to test.
!
! Returns one if the character is numeric, zero otherwise.
!-

GLOBAL ROUTINE U_DIGIT(C_POINT) =
CH$RCHAR(.C_POINT) GEQ '0' AND
CH$RCHAR(.C_POINT) LEQ '9';

!+
! This routine tests a character to determine whether it is alphabetic or
! numeric.
!
! C_POINT	A pointer to the character to test.
!
! Returns one if the character is alphabetic or numeric, zero otherwise.
!-

GLOBAL ROUTINE U_LETDIG(C_POINT) =
U_LETTER(.C_POINT) OR
U_DIGIT(.C_POINT);

!+
! This routine searches for a buffer with a specified name.  If the buffer
! if found, then the address of the TBCB is returned.  If the buffer is not 
! found, then a buffer by that name is created.
!
! NAME		Pointer to a string containing the name of the buffer.
!
! LEN		Length of the name string.
!
! BUF_ADDR	Address of a (long)word to receive the TBCB address.
!
! NEW		Address of a flag to be set if the buffer was newly created.
!
! Returns zero if an attempt to create a new buffer failed, one otherwise.
!-

GLOBAL ROUTINE U_G_BUFFER(NAME,LEN,BUF_ADDR,NEW) =
BEGIN
LOCAL
    NEW_BUF : REF TBCB_BLOCK;
!
! Start with the head of the text buffer list.
!
NEW_BUF = .E_BUF_LIST;
!
! Now link our way through the list until we either find a matching
! name or hit the end of the list.
!
WHILE .NEW_BUF NEQ 0 DO
    IF CH$EQL(.LEN,.NAME,.NEW_BUF[TBCB_NAME_LEN],NEW_BUF[TBCB_NAME]) THEN
        EXITLOOP
    ELSE
        NEW_BUF = .NEW_BUF[TBCB_NEXT_BUF];

IF .NEW_BUF EQL 0 THEN
    !
    ! Well, we didn't find it.  Better create a new one.
    !
    BEGIN
    IF NOT SYS_GET_MEM(%REF(TBCB_SIZE+.LEN),NEW_BUF) THEN RETURN 0;
    NEW_BUF[TBCB_NAME_LEN] = .LEN;
    !
    ! move the name into the newly created text buffer.
    !
    CH$MOVE(.LEN,.NAME,NEW_BUF[TBCB_NAME]);
    !
    ! And append it to the front of the buffer list.
    !
    NEW_BUF[TBCB_NEXT_BUF] = .E_BUF_LIST;
    E_BUF_LIST = .BUF_ADDR  = .NEW_BUF;
    .NEW = 1;
    END
ELSE
    .NEW = 0;
.BUF_ADDR = .NEW_BUF;
RETURN 1
END;

!+
! This routine searches for a buffer with a specified name and positions
! into it.  If  a buffer by that name does not exist, then it is created.
! The global variable E_LAST_BUF is set to point to the TBCB of the buffer
! we were originally positioned in.
!
! NAME	Pointer to a string containing the name of the buffer.
!
! LEN	Length of the name string.
!
! Returns 1 if the buffer was found or created, 0 if an attempt to create a
! new buffer failed.
!-

GLOBAL ROUTINE U_F_BUFFER(NAME,LEN) =
BEGIN
LOCAL
    BUF_ADDR,
    NEW;
!
! Look for the buffer.
!
IF U_G_BUFFER(.NAME,.LEN,BUF_ADDR,NEW) THEN
    BEGIN
    !
    ! Position to the new buffer.
    !
    E_LAST_TBCB = .E_TBCB;
    E_TBCB = .BUF_ADDR;
    !
    ! If the buffer was new, then open it up.
    !
    IF .NEW NEQ 0 THEN
        WF_OPEN_BUFFER();
    RETURN 1;
    END
ELSE
    RETURN 0
END;
END
ELUDOM
