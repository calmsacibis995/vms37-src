!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!+
! DEFINITION DEFINITIONS
! ~~~~~~~~~~~~~~~~~~~~~~
!
! The following definitions are used to facilitate further definitions.
!-

!+
! Field definition macros.  This set of macros allows for definitions
! of the fields of data structures, letting the compiler compute the
! the offsets.
!-

COMPILETIME FIELD_OFFSET = 0;

MACRO START_FIELDS(FIELD_NAME) =
  FIELD FIELD_NAME =
  SET
  %ASSIGN(FIELD_OFFSET,0) %;

MACRO A_FIELD(FIELD_NAME1,LENGTH) =
  FIELD_NAME1 = [FIELD_OFFSET/8,FIELD_OFFSET MOD 8,LENGTH,0]
  %ASSIGN(FIELD_OFFSET,FIELD_OFFSET+LENGTH) %;

MACRO END_FIELDS = TES;%;

MACRO STRUC_SIZE(SIZE) = LITERAL SIZE = (FIELD_OFFSET+7)/8; %;


!+
! IMPLEMENTATION PARAMETERS.
!
! The following definitions are parameters used in the work-file system
! which may require re-definition for different implementations.
!-


%IF %BLISS(BLISS32) %THEN
LITERAL
  WF_BLN_LEN		= 16,	! Bit length of a work-file block number.
  LINE_NUM_LEN		= 32;	! Bit length of a line number.


%ELSE %IF %BLISS(BLISS16) %THEN
LITERAL
    WF_BLN_LEN		= 16,
    LINE_NUM_LEN	= 16;

%FI %FI

!+
! This macro sets the psect declarations and the addressing modes
! for BLISS32, for BLISS16 it is null.
!-

%IF %BLISS(BLISS32) %THEN
    MACRO
        PSECTS =
            PSECT
                CODE  = $CODE,
                PLIT  = $CODE,
                OWN   = $DATA,
                GLOBAL= $DATA;%;
%ELSE
    MACRO
        PSECTS = 
	    PSECT
		CODE  = $CODE(EXECUTE,NOWRITE,LOCAL,CONCATENATE),
		PLIT  = $PLIT(NOEXECUTE,NOWRITE,LOCAL,CONCATENATE),
		OWN   = $DATA(NOEXECUTE,WRITE,LOCAL,CONCATENATE),
		GLOBAL= $GLOB(NOEXECUTE,WRITE,LOCAL,CONCATENATE);%;
%FI


!+
! TBCB DEFINITION
! ~~~~~~~~~~~~~~~
!
! 	The edt work file can contain multiple, independent data sets
! referred to as Text Buffers.  A text buffer corresponds to the construct
! of the same name found in edt user documentation, it is a seqential file
! of variable length records.  The records are grouped together into blocks
! of 512 characters.  The records in a block are sequentially ordered, 
! though the blocks themselves are not.  Each block contains a two-byte
! link to the previous and following blocks.  In addition to the lines in
! the work-file, an input file may be associated with a text buffer.  In this
! case the input file is logically placed at the end of the text buffer.
! The Text buffer is accessed via a control block called the Text Buffer
! Control Block, or TBCB.
!-

START_FIELDS(TBCB_FIELDS)
  A_FIELD(TBCB_LINE_ADDR,%BPADDR),	! Pointer to current line.
  A_FIELD(TBCB_CUR_BUKT,WF_BLN_LEN),	! Current bucket number.
  A_FIELD(TBCB_CUR_LIN,LINE_NUM_LEN),	! Current line number.
  %IF %BLISS(BLISS16) %THEN
    A_FIELD(TBCB_CUR_LINH,16), %FI
  A_FIELD(TBCB_CHAR_POS,WF_BLN_LEN),	 ! The character position within the line
  A_FIELD(TBCB_FIRST_BUKT,WF_BLN_LEN),	! First bucket number.
  A_FIELD(TBCB_LAST_BUKT,WF_BLN_LEN),	! Last bucket number.
  A_FIELD(TBCB_INPUT_LINE,LINE_NUM_LEN),! Number of last input line.
  %IF %BLISS(BLISS16) %THEN
    A_FIELD(TBCB_INPUT_LINH,LINE_NUM_LEN), %FI
  A_FIELD(TBCB_LINE_COUNT,%BPVAL),	! Count of lines in buffer.
  %IF %BLISS(BLISS16) %THEN
    A_FIELD(TBCB_LC_H,%BPVAL), %FI
  A_FIELD(TBCB_CHAR_COUNT,%BPVAL),	! Count of chars in buffer.
  A_FIELD(TBCB_INPUT_RAB,%BPADDR),	! Pointer to input RAB.
  A_FIELD(TBCB_NEXT_BUF,%BPADDR),	! Pointer to next text buffer.
  A_FIELD(TBCB_NAME_LEN,8),		! Length of buffer name.
  A_FIELD(TBCB_NAME,0)			! Name of buffer

END_FIELDS

STRUC_SIZE(TBCB_SIZE)			! Define size of TBCB.

MACRO TBCB_BLOCK = BLOCK[TBCB_SIZE,BYTE] FIELD(TBCB_FIELDS)% ;

!+
! The pos block is the portion of the TBCB which contains information needed
! to locate the current line.  This block must be identical to the first
! part of the TBCB or everything will fail.
!-

START_FIELDS(POS_FIELDS)
  A_FIELD(POS_LINE_ADDR,%BPADDR),	! Pointer to current line.
  A_FIELD(POS_CUR_BUKT,WF_BLN_LEN),	! Current bucket number.
  A_FIELD(POS_CUR_LIN,LINE_NUM_LEN), ! Current line number.
  %IF %BLISS(BLISS16) %THEN
    A_FIELD(POS_CUR_LINH,LINE_NUM_LEN), %FI
  A_FIELD(POS_CHAR_POS,WF_BLN_LEN)
END_FIELDS

STRUC_SIZE(POS_SIZE)			! Define size of position information

MACRO POS_BLOCK = BLOCK[POS_SIZE,BYTE] FIELD(POS_FIELDS)%;


!+
! TEXT LINE DEFINITIONS
!
! A line number contains an integer part and a fractional part.
!-

START_FIELDS(LIN_FIELDS)
  A_FIELD(LIN_LENGTH,8),		! Length of line
  A_FIELD(LIN_NUM,LINE_NUM_LEN),	! The line number
  %IF %BLISS(BLISS16) %THEN
    A_FIELD(LIN_NUMH,LINE_NUM_LEN), %FI
  A_FIELD(LIN_ORIG_NUM,LINE_NUM_LEN),	! Original line number
  %IF %BLISS(BLISS16) %THEN
    A_FIELD(LIN_ORIG_NUMH,LINE_NUM_LEN), %FI
  A_FIELD(LIN_TEXT,0)			! The actual text
END_FIELDS

STRUC_SIZE(LIN_FIXED_SIZE)

MACRO LIN_BLOCK = BLOCK[LIN_FIXED_SIZE,BYTE] FIELD(LIN_FIELDS)%;


!+
! WORK-FILE BUCKET DEFINITIONS
! ~~~~~~~~~~~~~~~~~~~~~~~~~~~
!
! The work file is orgainized into blocks of WF_BLOCK_SIZE characters.
! Each Text Buffer in the work file consists of a linked list of blocks.
!-

LITERAL WF_BUKT_SIZE = 512;		! Size of a work-file block

START_FIELDS(WFB_FIELDS)
  A_FIELD(WFB_PREV_BUKT,WF_BLN_LEN),	! Number of previous bucket
  A_FIELD(WFB_NEXT_BUKT,WF_BLN_LEN),	! Number of next bucket
  A_FIELD(WFB_END,%BPVAL),		! Offset to last record in block
  A_FIELD(WFB_RECORDS,0)		! Address of first record in block
END_FIELDS

STRUC_SIZE(WFB_FIXED_SIZE)


!+
! LINE NUMBER BLOCK DEFINITIONS
!
! The line number is defined as a block, so it can be handled as
! two 16-bit words.
!-

FIELD LN_FIELDS =
    SET
    LN_LO = [0,0,16,0],
    LN_HI = [2,0,16,0]
    TES;

MACRO LN_BLOCK = BLOCK[4,BYTE] FIELD(LN_FIELDS) %;

LITERAL LN_SIZE = 4;

STRUCTURE
    LNOVECTOR[I;N] = [N*LN_SIZE] (LNOVECTOR+I*LN_SIZE);


!+
! Semantic node definitions.
!
! The following defines the structures created by the EDT
! command parser semantic routines.  These structures form
! a tree-like representation of the command.
!
! The fields which are grouped together are re-definitions of the
! same slot for use in different types of nodes.
!-

FIELD NODE_FIELDS =
    SET
    NODE_TYPE 	= [0,0,8,0],			! Identifies the type of node

    COM_NUM	= [1,0,8,0],			! Identifies the command
    RAN_TYPE    = [1,0,8,0],			! Identifier type of range
    OP_TYPE	= [1,0,8,0],			! Identifies type of operand
    SEQ_VAL	= [1,0,8,0],			! Did the seq switch have value.

    RANGE1	= [%UPVAL,0,%BPVAL,0],		! First range specifier
    RAN_VAL	= [%UPVAL,0,%BPVAL,0],		! Value for range specifier
    SW_BITS	= [%UPVAL,0,%BPVAL,0],          ! Bits for each possible switch
    SRCHADDR	= [%UPVAL,0,%BPVAL,0],		! Address of search string
    SET_TYPE	= [%UPVAL,0,%BPVAL,0],		! Which type of set command
    LEFT_OP     = [%UPVAL,0,%BPVAL,0],		! Left operand for binary ops
    OP_LEN	= [%UPVAL,0,%BPVAL,0],		! operand length for op nodes.
    OP_VAL	= [%UPVAL,0,%BPVAL,0],		! Operand value for numerics.
    COM_EXPR	= [%UPVAL,0,%BPVAL,0],		! Expression pointer for LET
    OP_LEFTOP	= [%UPVAL,0,%BPVAL,0],		! Left operand for operators.
    SUB_BASE	= [%UPVAL,0,%BPVAL,0],		! Substring base string.

    RANGE2	= [%UPVAL*2,0,%BPVAL,0],	! Second range specifier
    SUB_RANGE	= [%UPVAL*2,0,%BPVAL,0],	! Pointer to range for ranges
    STR_PNT	= [%UPVAL*2,0,%BPVAL,0],	! Pointer to a search string
    SRCHLEN	= [%UPVAL*2,0,%BPVAL,0],	! Search string length
    FILSPEC	= [%UPVAL*2,0,%BPVAL,0],	! File specification address
    SW_VAL1	= [%UPVAL*2,0,%BPVAL,0],	! First value for switches
    AS_STR	= [%UPVAL*2,0,%BPVAL,0],	! Addr of string for AS
    RIGHT_OP	= [%UPVAL*2,0,%BPVAL,0],	! Right operand for binary ops.
    BUF_NAME    = [%UPVAL*2,0,%BPVAL,0],        ! Address of buffer name
    OP_ADDR	= [%UPVAL*2,0,%BPVAL,0],	! Operand address for op nodes.
    COM_VARBL	= [%UPVAL*2,0,%BPVAL,0],	! Variable pointer for LET
    OP_RIGHTOP	= [%UPVAL*2,0,%BPVAL,0],	! Right operand for operators.
    SUB_START	= [%UPVAL*2,0,%BPVAL,0],	! Substring start pos.
    TAB_COUNT	= [%UPVAL*2,0,%BPVAL,0],	! Count for tabs adjust.

    SET_VAL1	= [%UPVAL*3,0,%BPVAL,0],	! Value for set command
    REPADDR	= [%UPVAL*3,0,%BPVAL,0],	! Replace string address
    FSPCLEN	= [%UPVAL*3,0,%BPVAL,0],	! File spec length
    AS_LEN	= [%UPVAL*3,0,%BPVAL,0],	! Length of string for AS
    BUF_LEN     = [%UPVAL*3,0,%BPVAL,0],        ! length of buffer name
    SUB_LENGTH	= [%UPVAL*3,0,%BPVAL,0],	! Substring length.

    NEXT_COM	= [%UPVAL*4,0,%BPVAL,0],	! Pointer to next command
    NEXT_RANGE  = [%UPVAL*4,0,%BPVAL,0],        ! Pointer to next range
    REPLEN	= [%UPVAL*4,0,%BPVAL,0],	! Replace string length
    SW_VAL2	= [%UPVAL*4,0,%BPVAL,0],	! Second option switch value
    SET_VAL	= [%UPVAL*4,0,%BPVAL,0],
    KEY_VAL     = [%UPVAL*4,0,%BPVAL,0],	! Number of key for def key

    PREV_RANGE	= [%UPVAL*5,0,%BPVAL,0],	! Pointer to previous range (reverse of NEXT_RANGE)
    SWITS	= [%UPVAL*5,0,%BPVAL,0]		! Switch block pointer
    TES;

LITERAL
    NODE_SIZE	= 6*%UPVAL;			! Size of semantic node

LITERAL	! Node type equates

    COM_NODE	= 1,				! Command node
    RANGE_NODE	= 2,				! Range node
    STR_NODE	= 3,				! Substitute strings
    SW_NODE	= 4,				! Option switch value
    OP_NODE	= 5;				! Expression operand

MACRO NODE_BLOCK = BLOCK[NODE_SIZE,BYTE] FIELD(NODE_FIELDS) %;


!+
! COMMAND NUMBER DEFINITIONS
!
! The following values are used in a command type node to speicify which
! command it is.
!-

LITERAL
    COM_NULL	= 0,
    COM_CHANGE	= 1,
    COM_COPY	= 2,
    COM_DEFINE  = 3,
    COM_DELETE  = 4,
    COM_EXIT	= 5,
    COM_FIND	= 6,
    COM_INCLUDE = 7,
    COM_INSERT  = 8,
    COM_MOVE	= 9,
    COM_PRINT   = 10,
    COM_QUIT    = 11,
    COM_REPLACE = 12,
    COM_RESEQ   = 13,
    COM_SET     = 14,
    COM_SHOW    = 15,
    COM_SUBS    = 16,
    COM_TYPE    = 17,
    COM_WRITE   = 18,
    COM_SUBS_NEXT=19,
    COM_HELP	= 20,
    COM_CLEAR	= 21,
    COM_TADJ	= 22,
    COM_FILL	= 23,
    COM_DEF_MAC	= 24,
    COM_MAC_CALL= 25,
!   COM_VERIFY	= ?,
    LAST_COM	= 25;


!+
! RANGE TYPE DEFINITIONS
!
! The following constants are used in range nodes to specify the type of
! range.
!-

LITERAL
    RAN_NULL	= 0,
    RAN_NUMBER	= 1,
    RAN_DOT	= 2,
    RAN_STR	= 3,
    RAN_BEGIN	= 4,
    RAN_END	= 5,
    RAN_ORIG	= 6,
    RAN_PATTERN = 7,
    RAN_LAST	= 8,
    RAN_BEFORE	= 9,
    RAN_REST	= 10,
    RAN_WHOLE	= 11,
    RAN_SELECT	= 12,
    RAN_BUFFER	= 13,
    RAN_PLUS	= 14,
    RAN_MINUS	= 15,
    RAN_FOR	= 16,
    RAN_THRU	= 17,
    RAN_MINSTR	= 18,
    RAN_ALL     = 19,
    RAN_AND	= 20,
    NUM_RAN	= 20,   ! Total number of ranges
    NUM_SLR     = 7;    ! number of single line ranges

!
! Operand types for operand nodes.
!
LITERAL
    OP_STRING	= 0,	! Operand is a quoted string
    OP_NUM	= 1,	! Operand is a number
    OP_VAR	= 2,	! Operand is a variable
    OP_DOT	= 3,	! Operand is the dot pseudo variable
    OP_ADD	= 4,	! Operand is an addition operator
    OP_SUB	= 5,	! Operand is a subtractions operator
    OP_MULT	= 6,	! Operand is a multiplication operator
    OP_DIV	= 7,	! Operand is a division operator
    OP_AND	= 8,	! logical and
    OP_OR	= 9,	! logical or
    OP_LSS	= 10,	! compare for less
    OP_LEQ	= 11,	! compare for less or equal
    OP_EQL	= 12,	! Compare for equality
    OP_GEQ	= 13,	! compare for greater or equal
    OP_GTR	= 14,	! compare for greater
    OP_NEQ	= 15,	! compare for not equal
    OP_AMP	= 16,	! concatenation
    OP_SUBSTR	= 17,	! substringing
    OP_NEG	= 18,	! negation
    OP_NOT	= 19,	! logical not
    OP_LENGTH	= 20,	! length of
    OP_COL	= 21,	! current column
    OP_FIND	= 22,
    OP_POS	= 23,	! current position
    OP_LAST_OP	= 23;	! last operand type


!+
! BUGCHECK CODES
!-

LITERAL
    NOT_COM	= 1,		! Command node is not a command node
    BAD_COM	= 2,		! command type field of commmand node invalid
    NOT_RAN	= 3,		! range node is not a range node
    BAD_RAN	= 4;		! range type is not valid


!+
! LINE NUMBER HANDLING MACROS
!
! These macros are used for arithmetic involving line numbers, so it can
! be transportable across systems with various word lengths.  At least 32
! bits of precision are required for line numbers.  Line numbers are stored
! as an integer with a scale of -5, i.e. the true value * 10**5, so we can
! have 5 decimal positions in the line number.
!-

%IF %BLISS(BLISS32) %THEN

MACRO
    EXT_DECS = %,
    ADDLINE(S1,S2,DEST) = DEST = .S1 + .S2 %,
    SUBLINE(S1,S2,DEST) = DEST = .S2 - .S1 %,
    MULTLINE(S1,S2,DEST) = DEST = .S1 * .S2 %,
    DIVLINE(S1,S2,DEST) =
	BEGIN
	LOCAL Q : VECTOR[2];
	BUILTIN EDIV;
	Q[0] = .S2; Q[1] = 0;
	EDIV(S1,Q,DEST,Q[0]);
	END %,
    MODLINE(S1,S2,DEST) = 
        BEGIN
        LOCAL Q : VECTOR[2];
        BUILTIN EDIV;
        Q[0] = .S2;
        Q[1] = 0;
        EDIV(S1,Q,Q[0],DEST);
        END %,
    MOVELINE(S,D) = D = .S %,
    BUILDLINE(S,D) = D = S %;

%ELSE %IF %BLISS(BLISS16) %THEN

MACRO EXT_DECS =
    A32_ADD,
    A32_SUB,
    A32_MUL,
    A32_DIV,
    A32_MOD, %;

MACRO
    ADDLINE(S1,S2,D1) = A32_ADD(S1,S2,D1)%,
    SUBLINE(S3,S4,D2) = A32_SUB(S3,S4,D2)%,
    MULTLINE(S5,S6,D3) = A32_MUL(S5,S6,D3)%,
    DIVLINE(S7,S8,D4) = A32_DIV(S7,S8,D4)%,
    MODLINE(S9,S10,D5) = A32_MOD(S9,S10,D5)%,
    MOVELINE(S11,D6) = (CH$MOVE(4,S11,D6))%,
    BUILDLINE(S12,D7) = (D7 = S12; (D7+2) = 0)%;

%FI %FI

!+
! OPTION SWITCH BIT DEFINITIONS
!-

LITERAL
    OPT_QUERY	=   2,
    OPT_BRIEF	=   4,
    OPT_NOTYP	=   8,
    OPT_SEQ	=  16,
    OPT_DUPL	=  32,
    OPT_SAVE	=  64,
    OPT_STAY	= 128;

MACRO
    OPB_QUERY	= 1,1 %,
    OPB_BRIEF	= 2,1 %,
    OPB_NOTYP	= 3,1 %,
    OPB_SEQ	= 4,1 %,
    OPB_DUPL	= 5,1 %,
    OPB_SAVE	= 6,1 %,
    OPB_STAY	= 7,1 %;

! Input source definitions.
!
! These constants define the source command line input.
!
LITERAL
    INP_TERM 	= 0,
    INP_MACRO	= 1,
    INP_FILE	= 2;

! Terminal type definitions.
!
! These literals define the type of terminal we are running on.
!
LITERAL
    TERM_UNKNOWN= 0,
    TERM_VT52	= 1,
    TERM_VT100  = 2,
    TERM_HCPY	= 3,
    TERM_VT10052= 4;

!
! Editor mode definitions.
!
LITERAL
    CHANGE_MODE 	= 0,
    LINE_MODE		= 1;

!
! Macro descriptor block definitions.
!
! The macro descriptor block is used build a chain of all
! macro definitions available.
!
START_FIELDS(MAC_FIELDS)
   A_FIELD(MAC_BUF,%BPADDR),
   A_FIELD(MAC_NEXT,%BPADDR)
END_FIELDS

STRUC_SIZE(MAC_SIZE)

MACRO MAC_BLOCK = BLOCK[MAC_SIZE,BYTE] FIELD(MAC_FIELDS) %;

!
! Variable descriptor block definitions.
!
START_FIELDS(VAR_FIELDS)
    A_FIELD(VAR_NEXT,%BPADDR),
    A_FIELD(VAR_LEN,8),
    A_FIELD(VAR_TYPE,8),
    A_FIELD(VAR_VAL,%BPVAL),
    A_FIELD(VAR_NAME_LEN,8),
    A_FIELD(VAR_NAME,0)
END_FIELDS

STRUC_SIZE(VAR_FIXED_SIZE)

MACRO VAR_BLOCK = BLOCK[VAR_FIXED_SIZE,BYTE] FIELD(VAR_FIELDS) %;
!
! Variable/expression type codes.
!
LITERAL
    TYP_STRING = 0,
    TYP_NUMERIC =1,
    TYP_PATTERN	=2;

LITERAL
    LOOP_MAX 	= 4;

!+
! Definition of the screen information vector.
!
! This vector has an entry for each line which is represented on the screen.
!
! Each line may occupy one or more screen lines.  Other information included
! is the beginning and ending character position of the portion of the line
! which has changed since the last update.
!
! At any given time, only lines 0 through C_LOS-1 are in use.
!-

START_FIELDS(SI_FIELDS)
    A_FIELD(SI_SCREEN_LINE,8), 		! Starting line number on screen.
    A_FIELD(SI_UPD_FROM,8),		! Position to update from.
    A_FIELD(SI_UPD_TO,8),		! Position to update to.
    A_FIELD(SI_NUM_LINES,8)		! No. of screen lines occupied.
END_FIELDS

STRUC_SIZE(SI_SIZE);

MACRO
    SCREEN_VEC = BLOCKVECTOR[24,SI_SIZE,BYTE] FIELD(SI_FIELDS) %;

!
! Define a add-on to the error message number for facility code on
! vax, and a multiplier to skip the severity bits.
!
%IF %BLISS(BLISS32) %THEN
    LITERAL
	W_BASE = 65536*133 + 32768,
	F_BASE = 65536*133 + 32768 + 4,
	E_INC  = 8;
%ELSE
    LITERAL
	W_BASE = 0,
	F_BASE = 0,
	E_INC  = 1;
%FI
!
! Error messages
!
LITERAL
	ERR_ERRINCOM 	= W_BASE+E_INC*1,	! MSG <Error in command>
	ERR_UNRCOM	= W_BASE+E_INC*2,	! MSG <Unrecognized command>
	ERR_INVPARFOR	= W_BASE+E_INC*3,	! MSG <Invalid parameter for SET or SHOW>
	ERR_INVVALSET	= W_BASE+E_INC*4,	! MSG <Invalid value in SET command>
	ERR_NUMVALREQ	= W_BASE+E_INC*5,	! MSG <Numeric value required>
	ERR_QUOSTRREQ	= W_BASE+E_INC*6,	! MSG <Quoted string required>
	ERR_ERRRANSPC	= W_BASE+E_INC*7,	! MSG <Error in range specification>
	ERR_ERRCOMOPT	= W_BASE+E_INC*8,	! MSG <Error in command option>
	ERR_UNRCOMOPT	= W_BASE+E_INC*9,	! MSG <Unrecognized command option>
	ERR_COLONREQ	= W_BASE+E_INC*10,	! MSG <':' required>
	ERR_UNXCHRAFT	= W_BASE+E_INC*11,	! MSG <Unexpected characters after end of command>
	ERR_ASREQ	= W_BASE+E_INC*12,	! MSG <'AS' required>
	ERR_MACKEYREQ	= W_BASE+E_INC*13,	! MSG <MACRO or KEY required>
	ERR_PARSTKOVF	= W_BASE+E_INC*14,	! MSG <Parsing stack overflow>
	ERR_ENTMUSTBE	= W_BASE+E_INC*15,	! MSG <Entity must be WORD, SENTENCE, PAGE, or PARAGRAPH>
	ERR_NONALPHANUM	= W_BASE+E_INC*16,	! MSG <String delimiter must be non-alphanumeric>
	ERR_SUBSTRNULL	= W_BASE+E_INC*17,	! MSG <Search string may not be null>
!
! Other error messages.
!

	ERR_ABOBYCC	= W_BASE+E_INC*100,	! MSG <Aborted by CTRL/C>
	ERR_FORHLPANO	= W_BASE+E_INC*101,	! MSG <For help on another keypad key, press the key>
	ERR_TOEXITHLP	= W_BASE+E_INC*102,	! MSG <To exit from HELP, type a space>
	ERR_TORETKEY	= W_BASE+E_INC*103,	! MSG <To return to the keypad diagram, press the return key>
	ERR_ATTPASCUR	= W_BASE+E_INC*104,	! MSG <Attempt to PASTE current buffer>
	ERR_ATTCUTAPP	= W_BASE+E_INC*105,	! MSG <Attempt to CUT or APPEND to current buffer>
	ERR_NOSELRAN	= W_BASE+E_INC*106,	! MSG <No select range active>
	ERR_PARENMIS	= W_BASE+E_INC*107,	! MSG <Parenthesis mismatch>
	ERR_INVBUFNAM	= W_BASE+E_INC*108,	! MSG <Invalid buffer name>
	ERR_INSMEM	= W_BASE+E_INC*109,	! MSG <Insufficient memory>
	ERR_INVENT	= W_BASE+E_INC*110,	! MSG <Invalid entity>
	ERR_INVSUBCOM	= W_BASE+E_INC*111,	! MSG <Invalid subcommand>
	ERR_CHGMODTER	= W_BASE+E_INC*112,	! MSG <Change mode may be entered only from the terminal>
	ERR_NOJNLFIL	= W_BASE+E_INC*113,	! MSG <Journal file could not be opened>
	ERR_INPFILOPN	= W_BASE+E_INC*114,	! MSG <Input file could not be opened>
	ERR_OUTFILCRE	= W_BASE+E_INC*115,	! MSG <Output file could not be created>
	ERR_COMFILNOP	= W_BASE+E_INC*116,	! MSG <Command file could not be opened>
	ERR_COMFILNEX	= W_BASE+E_INC*117,	! MSG <Command file does not exist>
	ERR_FILNAM	= W_BASE+E_INC*118,	! MSG <File name:>
	ERR_INPFILNEX	= W_BASE+E_INC*119,	! MSG <Input file does not exist>
	ERR_PLSANSYNQ	= W_BASE+E_INC*120,	! MSG <Please answer Y(es), N(o), Q(uit), or A(ll)>
	ERR_LINEXC255	= W_BASE+E_INC*121,	! MSG <Line exceeded 255 characters, truncated>
	ERR_KEYNOTDEF	= W_BASE+E_INC*122,	! MSG <That key is not definable>
	ERR_NODEFN	= W_BASE+E_INC*123,	! MSG <No definition>
	ERR_RANNONCON	= W_BASE+E_INC*124,	! MSG <Range for RESEQUENCE must be contiguous>
	ERR_DSTMOVCOP	= W_BASE+E_INC*125,	! MSG <Destination for MOVE or COPY not found>
	ERR_RANSPCSEQ	= W_BASE+E_INC*126,	! MSG <Range specified by /SEQUENCE would cause duplicate or non-sequential numbers>
	ERR_INVOPTCOM	= W_BASE+E_INC*127,	! MSG <Invalid option for that command>
	ERR_INPRECLGE	= W_BASE+E_INC*128,	! MSG <Input record too large, truncated to 255 characters>
	ERR_PRSKEYDEF	= W_BASE+E_INC*129,	! MSG <Press the key you wish to define>
	ERR_NOWENTDEF	= W_BASE+E_INC*130,	! MSG <Now enter the definition terminated by ENTER>
	ERR_NOSUCHLIN	= W_BASE+E_INC*131,	! MSG <No such line>
	ERR_STRNOTFND	= W_BASE+E_INC*132,	! MSG <String was not found>
	ERR_TOPOFBUF	= W_BASE+E_INC*133,	! MSG <Backup past top of buffer>
	ERR_BOTOFBUF	= W_BASE+E_INC*134,	! MSG <Advance past bottom of buffer>
	ERR_CLDNOTALN	= W_BASE+E_INC*135,	! MSG <Could not align tab with cursor>
	ERR_CONCHKFLD	= W_BASE+E_INC*136,	! MSG <Consistency check failed, please check your file>
	ERR_NOOUTFIL	= W_BASE+E_INC*137,	! MSG <No output file name>
	ERR_NOFILSPC	= W_BASE+E_INC*138,	! MSG <File specfication required>
	ERR_COMBUFEXH	= W_BASE+E_INC*139,	! MSG <Command buffer exhausted>
	ERR_NOHLPAVL	= W_BASE+E_INC*140,	! MSG <Help file could not be opened>
	ERR_ERRINPFIL	= W_BASE+E_INC*141,	! MSG <Error reading input file>
  	ERR_ERROUTFIL	= W_BASE+E_INC*142,	! MSG <Error writing output file>
        ERR_RECTOOBIG   = W_BASE+E_INC*143,     ! MSG <Record too big, truncatedd to 255 characters>
	ERR_SELALRACT	= W_BASE+E_INC*144,	! MSG <Select is already actiive>
	ERR_EXDISKQUOTA	= W_BASE+E_INC*145,	! MSG <Disk quota exceeded, using overdraft>
	ERR_BADFILATR	= W_BASE+E_INC*146,	! MSG <File attributes error>
	
	ERR_WRKFILOVF	= F_BASE+E_INC*200,	! MSG <Work file overflow>
	ERR_IOERRWRK	= F_BASE+E_INC*201,	! MSG <I/O error on work file>
	ERR_EDITORABO	= F_BASE+E_INC*202;	! MSG <Editor aborted>

! Definition of the screen update list format.
!
! As change mode commands are executed, items are added to this list
! to keep track of what has changed on the screen.  When the screen
! is to be updated, the list is sorted, optimized and the screen update
! is performed.
!-

START_FIELDS(UP_FIELDS)
    A_FIELD(UP_LINE_NUM,8),	! The relative line number.
    A_FIELD(UP_CHAR_POS,8),	! The relative character position.
    A_FIELD(UP_COUNT,8),	! Number of updates
    A_FIELD(UP_TYPE,8)		! Type of update
END_FIELDS

STRUC_SIZE(UP_SIZE)

!
! Update type codes
!
LITERAL
    UP_INS_LINE	= 0,
    UP_DEL_LINE	= 1,
    UP_INS_CHAR	= 2,
    UP_DEL_CHAR	= 3,
    UP_MOD_CHAR	= 4,
    UP_LIST_SIZE= 10;

MACRO UP_VECTOR = BLOCKVECTOR[UP_LIST_SIZE,UP_SIZE,BYTE] FIELD(UP_FIELDS) %;

!+
! This hack added to get around problem in CH$DIFF in BLISS16.
!
!-

%IF %BLISS(BLISS16) OR %BLISS(BLISS32) %THEN
    MACRO 
	CH$PTR_GTR(P1,P2) = (P1) GTRA (P2) %,
	CH$PTR_GEQ(P1,P2) = (P1) GEQA (P2) %,
	CH$PTR_EQL(P1,P2) = (P1) EQLA (P2) %,
	CH$PTR_LEQ(P1,P2) = (P1) LEQA (P2) %,
	CH$PTR_LSS(P1,P2) = (P1) LSSA (P2) %,
	CH$PTR_NEQ(P1,P2) = (P1) NEQA (P2) %;
%ELSE
    MACRO
	CH$PTR_GTR(P1,P2) = CH$DIFF(P1,P2) GTR 0 %,
	CH$PTR_GEQ(P1,P2) = CH$DIFF(P1,P2) GEQ 0 %,
	CH$PTR_EQL(P1,P2) = CH$DIFF(P1,P2) EQL 0 %,
	CH$PTR_LEQ(P1,P2) = CH$DIFF(P1,P2) LEQ 0 %,
	CH$PTR_LSS(P1,P2) = CH$DIFF(P1,P2) LSS 0 %,
	CH$PTR_NEQ(P1,P2) = CH$DIFF(P1,P2) NEQ 0 %;
%FI
