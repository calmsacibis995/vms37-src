MODULE KEYTRAN(IDENT='V03-000') =
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY: EDT version 2
!
! FUNCTIONAL DESCRIPTION:
!
!	This module handles the translation of keypad keys into change mode
!	command strings.
!
! ENVIRONMENT: user mode, sharable
!
! AUTHOR: Bob Kushlis, CREATION DATE:  7-APR-1979
!
! MODIFIED BY:
!
! Bob Kushlis, 28-JUN-1979
!    Set vt52 keypad def's whenever entering change mode on a vt52 in case
!    the terminal type has been changed to 52 since startup.
!
! Bob Kushlis, 28-JUN-1979
!    Implement the change case key.
!
! Bob Kushlis, 28-JUN-1979
!    Fix K_VT52 so it does not clobber the first entry of the vt52 keypad
!    translation table.
!
! Bob Kushlis, 28-JUN-1979
!    Fix define key to verify the key which is being defined.
!
! Bob Kushlis, 29-JUN-1979
!    Fix so vt52 does not lose keypad def's.
!
! Bob Kushlis, 28-JUN-1979
!    Implement prompting on command and find keys.
!
! Bob Kushlis, 2-JUL-1979
!    Make prompts part of the call to TI_line.
!
! Bob Kushlis, 3-JUL-1979
!    Turn keypad mode on immediately after Change command.
!
! Bob Kushlis, 5-JUL-1979
!    Change all cut and append def's to include the SR range.
!
! Bob Kushlis, 6-JUL-1979
!    Do not translate the key terminating an input unless it is
!    advance or backup.
!
! Bob Kushlis, 16-JUL-1979
!    Modifications for delaying updates when type-ahead.
!
! Bob Kushlis, 18-JUL=1979
!    Turn off auto-repeat after 1'st char received on VT-100's until
!    the update is complete.
!
! Bob Kushlis, 27-JUL-1979
!    Fix RESET to delete the select range.
!
! Bob Kushlis, 28-JUL-1979
!    Change define key to allow use of keypad keys.
!
! Bob Kushlis, 28-JUL-1978
!    Set the echoed flag whenever a prompt is output.
!
! Bob Kushlis, 3-AUG-1979
!    Fix define key when delete is first character.
!
! Bob Kushlis, 5-AUG-1979
!    Call the C_E_INPUT routine when positioned at end of line
!    for optimized terminal handling.
!
! Bob Kushlis, 5-AUG-1979
!    Add the SHR and SHL key definitions.
!    Erase the message line after define key.
!
! Bob Kushlis, 11-AUG-1979
!    Remove all own data.
!
! Bob Kushlis, 25-AUG-1979
!    Position cursor correctly after define key.
!    Make SHIFT letter equivalent to CTRL/letter.
!
! Bob Kushlis, 8-SEP-1979
!    Remove the change mode control routine
!    since it never really belonged here.
!
! Dan Szymanski, 22-JUL-80,  20
!    Changes needed for new TRAN_TAB definition and expanded key
!    definition added.
!
! Dan Szymanski, 28-JUL-80,  21
!    DEFINE_KEY modified so that the defining string can be terminated
!    by a carriage return as well as ENTER.
!--

BEGIN

LIBRARY 'EDT';

PSECTS

FORWARD ROUTINE
    K_TRAN_CHAR:	NOVALUE,		! Read an escape sequence
    PUT_COM_CHAR:	NOVALUE,		! Put a character in the command buffer
    IMMEDIATE_INPUT,				! Auxiliary call to TI_LINE
    COM_STRING,					! Build the command buffer
    KEY_CHAR,					! Get the next command character
    DEFINE_KEY:		NOVALUE,		! Process the DEFK command
    KEY_COM:		NOVALUE;		! Get a keypad command

!
! Define some constants for various characters.
!

LITERAL
    TAB 	= 9,
    LF 		= 10,
    CR 		= 13,
    DEL 	= 127,
    CNTRL_Z 	= 26,
    ESC 	= 27,
    CTRL_K	= 'K'-'@',
    CTRL_U	= 'U'-'@',
    ACCENT	= 96,
    GRAVE	= 126,
    COMMAND_LINE= 23;

EXTERNAL ROUTINE
    SC_CURSOR,
    SC_NOREV,
    C_CURSOR,
    C_CHECK_CC,
    SC_ZAP_SINFO,
    F_WRITE,
    F_PUT,
    F_LITERAL,
    IO_WTU,
    IO_WT,
    IO_TRY,
    C_MESSAGE,
    C_E_MESSAGE,
    SYS_GET_MEM,
    TI_AUTO,
    TI_CHAR,
    TI_ECHO,
    TI_START_ECHO,
    TI_DELETE,
    TI_SAVE,
    TI_CLEAR_AUDIT,
    U_DIGIT,
    U_LETTER,
    E_BAD_KEY,
    E_K_DEF,
    E_K_CLR,
    TI_LINE;

EXTERNAL
    TI_E_POS,				! The position on the echo line.
    E_KEYPAD,				! Keypad mode flag
    E_T_TYPE,				! terminal type
    E_TBCB,				! Pointer to current text buffer TBCB
    TI_E_FLAG,				! Was a character echoed?
    C_SELP,				! Current select position
    C_SBUF,				! Buffer in which the mark resides
    C_BUF,				! Command buffer
    C_POINT,				! Pointer to next char in command buffer
    C_END,				! Pointer to end of info in command buffer
    C_CLIN,				! Line on which the cursor is positioned
    C_CCOL,				! Column on which the cursor is positioned.
    K_REPT;				! Is auto_repeat on?

!
! Define the special keypad keys.
!
! These are the numeric values used for the definable keys.
!
LITERAL
    K_0		= 257,
    K_1		= 258,
    K_2		= 259,
    K_3		= 260,
    K_4		= 261,
    K_5		= 262,
    K_6		= 263,
    K_7		= 264,
    K_8		= 265,
    K_9		= 266,
    K_PF1	= 267,
    K_PF2	= 268,
    K_UP	= 269,
    K_DOWN	= 270,
    K_RIGHT	= 271,
    K_LEFT      = 272,
    K_DOT    	= 273,
    K_PF4	= 274,
    K_MINUS	= 275,
    K_COMMA	= 276,
    K_SHFT	= 277,
    K_ENTER	= 278,
    K_SHFT_0	= 279,
    K_SHFT_1	= 280,
    K_SHFT_2	= 281,
    K_SHFT_3    = 282,
    K_SHFT_4    = 283,
    K_SHFT_5    = 284,
    K_SHFT_6    = 285,
    K_SHFT_7	= 286,
    K_SHFT_8	= 287,
    K_SHFT_9	= 288,
    K_SHFT_PF2	= 289,
    K_SHFT_PF3	= 290,
    K_SHFT_UP	= 291,
    K_SHFT_DOWN	= 292,
    K_SHFT_LEFT	= 293,
    K_SHFT_RIGHT= 294,
    K_SHFT_DOT	= 295,
    K_SHFT_PF4	= 296,
    K_SHFT_MINUS= 297,
    K_SHFT_COMMA= 298,
    K_SHFT_SHFT = 299,
    K_SHFT_ENTER= 300;
!
! The following table is searched to find the meaning of
! any keypad key.  The ordinal position in the table 
! corresponds to the previous definition.
!

BIND KEY_PAD = UPLIT BYTE
	('pqrstuvwxyQRABCDnSmlPM') : VECTOR[22,BYTE];

!
! This table is a list of pointers to the translation of the keypad characters
! The thing which is pointed to contains the length of the translated string
! in the first byte, followed by the string of characters the key is defined
! as
!
EXTERNAL
    TRAN_TAB : VECTOR;		! The key translation pointer vector.

!+
! This routine is called when an escape character has been seen, the escape
! sequence is read up to the terminator, and, if it is a sequence generated
! by a keypad key, the numeric value for that key is returned, otherwise,
! the terminator character is returned.
!
! C	The address of a (long)word to receive the character.
!-

GLOBAL ROUTINE K_TRAN_CHAR(C) : NOVALUE =
    BEGIN
    !
    ! Keep reading characters as long as they are intermediate characters of
    ! VT52 or VT100 keypad sequences.
    !
    DO TI_CHAR(.C)
    UNTIL ..C NEQ %C'?' AND 
	  ..C NEQ %C'O' AND
	  ..C NEQ %C'[';
    !
    ! Now, search our table of keypad sequence terminators.
    !
    INCR I FROM 0 TO 21 DO
	IF ..C EQL .KEY_PAD[.I] THEN
	    BEGIN
	    !
	    ! The terminator was found, return it's equivalent.
	    !
	    .C = 257+.I;
	    EXITLOOP;
	    END;
    END;

!+
! This routine places a character in the command buffer at C_POINT and
! advances C_POINT.
!
! C		The character to append to the command buffer.
!
! FORCED_ECHO	If 1, then echo the character.
!-

ROUTINE PUT_COM_CHAR(C,FORCE_ECHO) : NOVALUE =
    BEGIN
    !
    ! Check to make sure there is room, if not then put out a message and
    ! flush the entire buffer.
    !
    IF CH$PTR_EQL(.C_POINT,.C_END) THEN
	BEGIN
	C_MESSAGE(ERR_COMBUFEXH);
	C_POINT = CH$PTR(C_BUF);
	END
    ELSE
	BEGIN
	!
	! Echo the character if necessary then move it to the buffer.
	!
	IF .FORCE_ECHO THEN TI_ECHO(.C);
	CH$WCHAR_A(.C,C_POINT);
	END;
    END;

!+
! This routine adds a couple of parameters then calls TI_LINE.
!-

ROUTINE IMMEDIATE_INPUT(C,TERM) =
    BEGIN
    RETURN TI_LINE(.C,.C_POINT,C_POINT,.TERM)
    END;

!+
! This routine processes the translation string of a key placing the
! characters in the buffer.  If a '?' is seen, and the EXPAND parameter
! is 1, then the user is prompted for input which replaces the '?' and
! the prompt string in the buffer.
!
! K		The number of the key to translate.
!
! EXPAND	Flag indicating ? should be expanded.
!
! ECHO		Flag indicating that the characters should be echoed.
!-

ROUTINE COM_STRING(K,EXPAND,ECHO) =
    BEGIN
    EXTERNAL
	T_BACK,T_ADV,T_RESET;
    LOCAL
	C,
	TERM,
	TRAN_POINT,
	TRAN_END;
    !
    ! Check for a key that is null.
    !
    IF .TRAN_TAB[.K-256] EQL 0 
    THEN 
	BEGIN
	C_END = CH$PTR(.C_POINT);
	RETURN 1;
	END;
    !
    ! Get a pointer to the translation string.
    !
    TRAN_POINT = CH$PTR(.TRAN_TAB[.K-256]);
    !
    ! Look for the string RESET, which is handled specially.
    !
    IF CH$RCHAR(.TRAN_POINT) EQL 5 AND
       CH$EQL(6,.TRAN_POINT,6,T_RESET) THEN
	BEGIN
	!
	! Reset was seen.  Flush the buffer, and undo the select range.
	!
	C_POINT = CH$PTR(C_BUF);
	C_END = CH$PTR(C_BUF);
	TI_START_ECHO();
	IF .C_SBUF EQL .E_TBCB AND
	   .E_T_TYPE EQL TERM_VT100 THEN
	    SC_ZAP_SINFO(0,23);
	C_SBUF = 0;
	RETURN 1;
	END;
    !
    ! Get a pointer to the end of the translation string.
    !
    TRAN_END = CH$PTR(.TRAN_POINT,CH$RCHAR_A(TRAN_POINT));
    TERM = 0;
    !
    ! Loop through the string.
    !
    WHILE CH$PTR_LSS(.TRAN_POINT,.TRAN_END) DO
	IF CH$RCHAR(.TRAN_POINT) EQL %C'?' AND .EXPAND THEN
	    !
	    ! Character is ? and expand is on.
	    !
	    BEGIN
	    LOCAL
		P_ADDR,	! Address of prompt.
		P_LEN;	! Length of prompt.
	    TRAN_POINT = CH$PLUS(.TRAN_POINT,1);
	    !
	    ! Look for a second ?, in which case it is literal.
	    !
	    IF CH$RCHAR(.TRAN_POINT) EQL %C'?' THEN
		PUT_COM_CHAR(CH$RCHAR_A(TRAN_POINT),.ECHO)
	    ELSE
		!
		! Expand the ?.
		!
		BEGIN
		P_LEN = 0;
		!
		! Look for a quote mark following to start the prompt.	
		!
		IF CH$RCHAR(.TRAN_POINT) EQL %C'''' THEN
		    BEGIN
		    !
		    ! Get the entire prompt string.
		    !
		    TRAN_POINT = CH$PLUS(.TRAN_POINT,1);
		    P_ADDR = .TRAN_POINT;
		    WHILE CH$PTR_GTR(.TRAN_END,.TRAN_POINT) AND
			  CH$RCHAR_A(TRAN_POINT) NEQ %C'''' DO
			P_LEN = .P_LEN + 1;
		    END;
		!
		! Position the cursor and put out the prompt.
		!
		SC_CURSOR(COMMAND_LINE,.TI_E_POS);
		F_LITERAL(.P_ADDR,.P_LEN);
		TI_AUTO();
		F_PUT();
		TI_E_POS = .TI_E_POS + .P_LEN;
		TI_E_FLAG = 1;
		!
		! Now, read up to then next escape character.
		!
		TI_CHAR(C);
		IF IMMEDIATE_INPUT(.C,ESC) THEN
		    BEGIN
		    !
		    ! Gobble up the rest of the terminating escape sequence.
		    !
		    K_TRAN_CHAR(C);
		    TERM = .C;
		    END
		ELSE
		    !
		    ! Command was canceled, flush the buffer and return 0.
		    !
		    BEGIN
		    C_POINT = CH$PTR(C_BUF);
		    C_CURSOR(.C_CLIN,.C_CCOL);
		    RETURN 0;
		    END
		END
	    END
	ELSE
	    PUT_COM_CHAR(CH$RCHAR_A(TRAN_POINT),.ECHO);
    !
    ! If the translation ended with a period, then remove it from the
    ! buffer and return a one, otherwise, return a 0.
    !
    IF CH$RCHAR(CH$PTR(.C_POINT,-1)) EQL %C'.' THEN
	BEGIN
	C_POINT = CH$PTR(.C_POINT,-1);
	IF .ECHO THEN TI_DELETE(CH$RCHAR(.C_POINT));
	!
	! If the terminator of input was advance or backup, then throw
	! it into the buffer so we can implement the KED feature of
	! hitting advance or backup after a search string.
	!
	IF .TERM GTRU 256 THEN
	    IF .TRAN_TAB[.TERM-256] NEQ 0 THEN
		BEGIN
		LOCAL
		    STPTR,
		    STLEN;
		STPTR = CH$PTR(.TRAN_TAB[.TERM-256]);
		STLEN = CH$RCHAR(.STPTR);
		IF .STLEN GEQ 4 THEN
		    IF CH$EQL(4, CH$PLUS(T_BACK,1), 4, CH$PLUS(.STPTR,1)) THEN
			RETURN COM_STRING(.TERM, 0, .ECHO);
		IF .STLEN GEQ 3 THEN
		    IF CH$EQL(3, CH$PLUS(T_ADV,1), 3, CH$PLUS(.STPTR,1)) THEN
			RETURN COM_STRING(.TERM, 0, .ECHO);
		END;
	C_END = CH$PTR(.C_POINT);
	RETURN 1;
	END;
    RETURN 0;
    END;

!+
! Get the next command character.  Keypad keys are converted to their
! numberic equivalent and the functions of GOLD are handled here.
!
! C	The address of a (long)word to receive the character.
!-

ROUTINE KEY_CHAR(C) =
    BEGIN
    LOCAL
	SAVE_POINT,			! Starting C_POINT.
	MY_C;
    SAVE_POINT = .C_POINT;
    !
    ! Get a character.
    !
    TI_CHAR(MY_C);
    !
    ! If the character is escape, then look for a keypad escape sequence.
    !
    IF .MY_C EQL ESC THEN
	BEGIN
	!
	! Translate keypad character.
	!
	K_TRAN_CHAR(MY_C);
	!
	! If the key is shift, (gold) handle it here.
	!
	WHILE .MY_C EQL K_SHFT DO
	    BEGIN
	    !
	    ! Look at the next character.  It should be either a digit, a sign
	    ! or a letter.
	    !
	    TI_CHAR(MY_C);
	    IF U_DIGIT(MY_C) OR .MY_C EQL %C'-' THEN
		BEGIN
		!
		! Start of a repeat count.  If this was not the first key pressed
		! then re-start the count by clearing the buffer back to the
		! point where we started.
		!
		IF CH$PTR_NEQ(.C_POINT,.SAVE_POINT) THEN
		    BEGIN
		    C_POINT = .SAVE_POINT;
		    TI_START_ECHO();
		    END;
		!
		! Now continue reading and echoing characters until a non-digit is found.
		!
		DO  BEGIN
		    TI_ECHO(.MY_C);
		    PUT_COM_CHAR(.MY_C,0);
		    TI_CHAR(MY_C);
		    !
		    ! Look for delete and CTRL/U
		    !
		    WHILE .MY_C EQL DEL DO
			BEGIN
			IF CH$PTR_NEQ(.C_POINT,.SAVE_POINT) THEN
			    BEGIN
			    C_POINT = CH$PLUS(.C_POINT,-1);
			    TI_DELETE(CH$RCHAR(.C_POINT));
			    END;
			TI_CHAR(MY_C);
			END;
		    IF .MY_C EQL CTRL_U THEN
			BEGIN
			TI_START_ECHO();
			C_END = C_BUF;
			RETURN 0;
			END;
		    END
		UNTIL NOT U_DIGIT(MY_C);
		!
		! If the repeat sequence was ended by an escape, then
		! get the escape sequence.
		!
		IF .MY_C EQL ESC THEN K_TRAN_CHAR(MY_C);
		END
	    ELSE IF .MY_C EQL ESC THEN
		!
		! Here if we had gold followed by an escape.  Translate the
		! escape sequence and use the golded function of the key.
		!
		BEGIN
		K_TRAN_CHAR(MY_C);
		IF .MY_C NEQ K_SHFT THEN MY_C = .MY_C + 22;
		END
	    ELSE 
		BEGIN
		!
		! Here if we had gold character.
		!
		IF .MY_C GEQ %C'a' AND .MY_C LEQ %C'z'
		THEN 
		    MY_C = .MY_C - 32;
		MY_C = .MY_C + 328;
		END;
	    END;
	END;
%(  !
    ! Handle the case of translating the accent and grave characters.
    !
    IF .MY_C EQL ACCENT THEN MY_C = 456;
    IF .MY_C EQL GRAVE THEN MY_C = 457;
)%
    .C = .MY_C;
    RETURN 1;
    END;

!+
! This routine is called when the change mode command DEFK is processed
! to process the interactive define key command.  The user is prompted
! for the key to be defined and the defining string.
!-

GLOBAL ROUTINE DEFINE_KEY : NOVALUE =
    BEGIN
    LOCAL
	KEY_ADDR,
	KEY,
	CON_U,
	C;
    !
    ! Set up the buffer for the definition to go into 
    !
    C_POINT = CH$PTR(C_BUF);
    C_END = CH$PTR(C_BUF,256);
    !
    ! Prompt for the key.
    !
    C_MESSAGE(ERR_PRSKEYDEF);
    KEY_CHAR(KEY);
    !
    ! Check for the validity of the key.
    !
    IF .KEY LSS ESC THEN KEY = .KEY + 301;
    IF E_BAD_KEY(.KEY) THEN
	BEGIN
	!
	! Bad key.  Put out a message and return.
	!
	C_MESSAGE(ERR_KEYNOTDEF);
	C_END = CH$PTR(C_BUF);
	RETURN;
	END;
    !
    ! Now prompt for the definition.
    !
    C_MESSAGE(ERR_NOWENTDEF);
    TI_START_ECHO();
    !
    ! Loop, reading characters until we see the enter key.  Keypad keys
    ! and gold/letter are translated, delete and CTRL/U have the usual
    ! meanings and all other characters are inserted directly.
    !
    CON_U = 0;			! Note whether CONTROL U entered
    WHILE 1 DO
	BEGIN
	KEY_CHAR(C);
	IF C_CHECK_CC() THEN 
	    BEGIN
	    C_END = C_BUF;
	    RETURN;
	    END;
	SELECTONE .C OF
	    SET

	    [K_ENTER, CR]: 
		EXITLOOP;

	    [257 TO 457]:
		BEGIN
		!
		! Keypad or gold key, place the translation in the buffer.
		!
		COM_STRING(.C,0,1);
		C_END = CH$PTR(C_BUF,256);
		END;
    
	    [DEL]:
		BEGIN
		!
		! Delete key.  Delete the previous character unless we are at
		! the beginning.
		!
		IF CH$PTR_GTR(.C_POINT,C_BUF) THEN
		    BEGIN
		    C_POINT = CH$PLUS(.C_POINT,-1);
		    TI_DELETE(CH$RCHAR(.C_POINT));
		    END;
		END;

	    [CTRL_U]:
		BEGIN
		!
		! CTRL/U abort the define key command.
		!
		CON_U = 1;
		C_POINT = CH$PTR(C_BUF);
		EXITLOOP;
		END;

	    [OTHERWISE]:
		PUT_COM_CHAR(.C,1);

	    TES;

	TI_AUTO();
	END;
    !
    ! Now define the key.
    !
    IF CH$PTR_NEQ(.C_POINT,C_BUF) 
    THEN
	BEGIN
	IF NOT E_K_DEF(.KEY,C_BUF,CH$DIFF(.C_POINT,C_BUF))
	THEN
	    C_MESSAGE(ERR_INSMEM);
	END
    ELSE
	BEGIN
	!
	! Clear the definition of a key defined as the null string,
	! but ignore if definition was terminated by CTRL/U.
	!
	IF .CON_U NEQ 1
	THEN
	    E_K_CLR(.KEY);
	END;
    !
    ! Reset buffer pointer, erase the command line and reposition the cursor
    ! before continuing.
    !
    C_POINT = C_BUF;
    C_END = C_BUF;
    TI_START_ECHO();
    C_E_MESSAGE();
    C_CURSOR(.C_CLIN,.C_CCOL);
    SC_NOREV();
    END;

!+
! Get a keypad command.  Characters are read and translated until a complete
! command is seen.  The characters are handled as follows:
!
!	Keypad and control characters are translated, and if they end in a '.' then the
!	command is complete
!
!	Other characters are treated as insertions and always complete.
!-

GLOBAL ROUTINE KEY_COM : NOVALUE =
    BEGIN
    LOCAL
	C;
    !
    ! Loop until command is complete.
    !
    WHILE 1 DO
	BEGIN
	!
	! Get the next command character, if command was aborted, return.
	!
	IF KEY_CHAR(C) EQL 0 THEN RETURN;
	!
	! Check for control C and abort the command.
	!
	IF C_CHECK_CC() THEN
	    BEGIN
	    C_END = C_BUF;
	    RETURN;
	    END;
	!
	! Erase the message line.
	!
	C_E_MESSAGE();
	SELECTONEU .C OF
	    SET

	    [0 TO 26]:	! Control character.  If in keypad mode, translate it.
		IF .E_KEYPAD THEN
		    IF COM_STRING(.C+301,1,0) THEN RETURN;

	    [DEL]:	! Delete character, always translate.
		BEGIN
		COM_STRING(256,1,0);
		RETURN;
		END;

	    [257 TO 455]:! Kepad character, always translate.
		IF COM_STRING(.C,1,0) THEN RETURN;

%(
	    [456 TO 457] : ! only translate in keypad mode
		IF .E_KEYPAD THEN
		    IF COM_STRING(.C,1,0) THEN RETURN;
)%

	    [OTHERWISE]: ! Insertion character, make the command Ic^Z.
		IF .E_KEYPAD THEN
		    BEGIN
		    PUT_COM_CHAR('I',0);
		    PUT_COM_CHAR(.C,0);
		    PUT_COM_CHAR(CNTRL_Z,0);
		    C_END = .C_POINT;
		    RETURN;
		    END
		ELSE
		    !
		    ! If in nokeypad mode, copy characters into the buffer.
		    !
		    BEGIN
		    IMMEDIATE_INPUT(.C,CR);
		    C_END = .C_POINT;
		    RETURN;
		    END;

	    TES;
	END;
    END;


END
ELUDOM
