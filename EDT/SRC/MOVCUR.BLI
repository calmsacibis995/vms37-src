MODULE MOVCUR(IDENT='V03-000') =
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY: EDT version 2
!
! FUNCTIONAL DESCRIPTION:
!
!	This module contains routines which move the logical cursor during
!	change mode.  The current line is kept in the buffer L_BUF and
!	L_POINT is the cursor: a pointer into the buffer.  This module
!	has routines to move the cursor left and right one character, up
!	or down a line, and to the top or bottom of the buffer.  Also contained
!	in this module are routines to fetch the current line into the buffer
!	and to replace it it the work file.
!
! ENVIRONMENT: User mode, sharable.
!
! AUTHOR: Bob Kushlis, CREATION DATE:  9-SEP-1979
!
! MODIFIED BY:
!
!--

BEGIN

LIBRARY 'EDT';

PSECTS


EXTERNAL
    C_CHG,				! Indicates current line has changed.
    C_LNO,				! current line number
    C_SELL,				! Relative line number of select.

    E_TBCB : REF TBCB_BLOCK,		! Current text buffer

    L_BUF,				! Current line buffer.
    L_POINT,				! Current character pointer.
    L_END,				! End of current line pointer.
    L_LEN,				! Length of current line.
    W_LINE	: REF LIN_BLOCK;	! Current line pointer.

EXTERNAL ROUTINE
    WF_R_FORWARD,
    WF_R_BACKWRD,
    WF_R_CURRENT,
    WF_REPLACE_LINE,
    WF_EOB,
    WF_TOP,
    WF_BOTTOM;

LITERAL
    CR = 13;

!+
! This routine fectches the current line from the work file into the current
! line buffer.  The pointer L_POINT is updated to point to the cursor position
! and L_END and L_LEN are intitialized.  A carriage return character is placed
! after the last character in the buffer to facilitate search operations.
!-

GLOBAL ROUTINE MC_GET_LINE : NOVALUE =
BEGIN
!
! Make sure the current line is accessable.
!
WF_R_CURRENT();
!
! Check for end of buffer.
!
IF WF_EOB() THEN
    L_LEN = 0
ELSE
    BEGIN
    !
    ! Get the length and move that many characters.
    !
    L_LEN = .W_LINE[LIN_LENGTH];
    CH$MOVE(.L_LEN,W_LINE[LIN_TEXT],L_BUF);
    END;
!
! Set up the end of line pointer.
!
L_END = CH$PTR(L_BUF,.L_LEN);
!
! Place a CR at the end of the line.
!
CH$WCHAR(CR,.L_END);
!
! Set up the cursor pointer to point to the current character.
!
L_POINT = CH$PTR(L_BUF,.E_TBCB[TBCB_CHAR_POS]);
!
! And mark the current line as unchanged.
!
C_CHG = 0;
END;

!+
! This routine replaces the current line in the work file if it has changed.
!-

GLOBAL ROUTINE MC_CHANGE : NOVALUE =
!
! Check the change flag.
!
IF .C_CHG NEQ 0 THEN
    BEGIN
    !
    ! Line has changed, replace it unless it is EOB.
    !
    IF NOT WF_EOB() THEN
        WF_REPLACE_LINE(L_BUF,.L_LEN);
    !
    ! And turn the change flag off
    C_CHG = 0;
    END;

!+
! This routine moves the cursor up to the first character of the preceding
! line.  If the current line is the first line in the buffer, it fails.
!-

GLOBAL ROUTINE MC_UP =
BEGIN
!
! Replace the current line in the work file if it has changed.
!
MC_CHANGE();
!
! Attempt to go back one line.
!
IF WF_R_BACKWRD() THEN
    BEGIN
    !
    ! It succeeded, update the line number, get the new line and return success.
    !
    C_LNO = .C_LNO - 1;
    MC_GET_LINE();
    RETURN 1
    END
ELSE
    !
    ! No line above, return failure.
    !
    RETURN 0
END;

!+
! This routine moves to the first character of the following line.  If the
! current line is EOB then it fails.
!-

GLOBAL ROUTINE MC_DOWN =
BEGIN
!
! Replace the current line in the work file if it has changed.
!
MC_CHANGE();
!
! If on EOB, then return failure.
!
IF WF_EOB() THEN RETURN 0;
!
! Move to the next line, increase the line number, fetch the line into
! the buffer and return success.
!
WF_R_FORWARD();
C_LNO = .C_LNO + 1;
MC_GET_LINE();
RETURN 1;
END;

!+
! This routine moves the cursor one character to the left.  If the cursor
! is on the first character of the line, we move to the previous line
! (positioning on the line terminator).
!-

GLOBAL ROUTINE MC_LEFT =
BEGIN
!
! Check to see if we are on the first character.
!
IF CH$PTR_EQL(.L_POINT,CH$PTR(L_BUF)) THEN
    BEGIN
    !
    ! On the first character.  Try to go up a line and position to the line
    ! terminator.  If the move up fails, return failure.
    !
    IF MC_UP() EQL 0 THEN RETURN 0;
    L_POINT = .L_END;
    END
ELSE
    !
    ! Not on the first character, simply move back on character and return
    ! success.
    !
    L_POINT = CH$PLUS(.L_POINT,-1);
RETURN 1
END;

!+
! This routine moves the cursor one character to the right.  If the cursor
! is positioned on the line terminator of the current line, it will move
! down to the first character of the next line.
!-

GLOBAL ROUTINE MC_RIGHT =
BEGIN
!
! Check for cursor at the line terminator.
!
IF CH$PTR_EQL(.L_POINT,.L_END) THEN
    !
    ! Cursor is on the line terminator, do an MC_DOWN.
    !
    RETURN MC_DOWN();
!
! Cursor is not at the line terminator, move right one character.
!
L_POINT = CH$PLUS(.L_POINT,1);
RETURN 1
END;

!+
! This routine moves the cursor to the top of the current buffer.
!-

GLOBAL ROUTINE MC_TOP : NOVALUE =
BEGIN
!
! Fix the line number.
!
C_LNO = .C_LNO - .E_TBCB[TBCB_CUR_LIN];
!
! Go to the top and get the new line.
!
WF_TOP();
MC_GET_LINE();
END;


!+
! This routine moves the cursor to the bottom of the buffer.
!-

GLOBAL ROUTINE MC_BOTTOM : NOVALUE =
BEGIN
!
! Make the line number point to the top line.
!
C_LNO = .C_LNO - .E_TBCB[TBCB_CUR_LIN];
!
! Go to the bottom lin.
!
WF_BOTTOM();
!
! Make the line number point to this line.
!
C_LNO = .C_LNO + .E_TBCB[TBCB_CUR_LIN];
!
! And fetch the line from the work file.
!
MC_GET_LINE();
END;

END
ELUDOM
