MODULE FORMAT(IDENT='V03-000') =
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY: EDT Version 2
!
! FUNCTIONAL DESCRIPTION:
!
!	This module contains a set of routines for doing formated io
!	for use in dumps, error messages, and printing of text lines.
!	
!
! ENVIRONMENT: User mode, sharable
!
! AUTHOR: Bob Kushlis, CREATION DATE: Mar 18,1979
!
! MODIFIED BY:
!
! Bob Kushlis, 14-JUL-1979
!	Add the F_CRLF routine.
!
! Bob Kushlis, 3-AUG-1979
!	Modify F_CRLF to do a put operation if we are in line mode,
!	i.e. if the WRITE_ROUTINE is IO_WT.
!--

BEGIN

LIBRARY 'EDT';

PSECTS


EXTERNAL ROUTINE
    EXT_DECS
    IO_WT,
    SY_GET_MESS;

EXTERNAL
    F_BUF : BLOCK[CH$ALLOCATION(136)],	! The formatted output buffer
    F_CUR,				! Pointer to next character in above
    F_LINE_POS,				! The current column number
    F_W_ROUTINE;			! Routine to call to write the buffer

BIND
    END_BUF = CH$PTR(F_BUF,136),	! Pointer to end of format buffer
    CONTROL_CHARS = UPLIT('LFVTFFCR');	! Mnemonics for special characters

FORWARD ROUTINE
    F_PUT,
    F_STRING : NOVALUE;

EXTERNAL
    E_T_WIDTH,				! Terminal width
    E_EIGHT,				! Is terminal in eight-bit mode?
    LNO_1,				
    LNO_9;

FORWARD ROUTINE
    F_CHAR : NOVALUE;

LITERAL
    TAB 	= 9,
    LF 		= 10,
    CR 		= 13,
    ESC		= 27,
    DEL		= 127;

!+
! This routine computes the number of character positions a character would
! take to display at a specified column.
!
! C		The character to be displayed.
!
! COLUMN	The starting column.  (0 is the first column on a line)
!
! Returns the number of chraracter positions the character would occupy.
!-

GLOBAL ROUTINE F_COL_INC(C,COLUMN) =
SELECTONE .C AND 127 OF
    SET
    [ESC,DEL]: 5;
    [0 TO 8, 14 TO 31]: 2;
    [TAB]: 8 - .COLUMN MOD 8;
    [LF TO CR]: 4;
    [OTHERWISE]: 1
    TES;

!+
! This routine sets the current column number to a specified value.
!
! COLUMN	The column in which we are positioned.
!-

GLOBAL ROUTINE F_SET_COL(COLUMN) =
F_LINE_POS = .COLUMN;

!+
! Place a string of characters in the format buffer by repeated calls
! to F_CHAR.
!
! S	Pointer to the string.
!
! N	Number of characters.
!-

GLOBAL ROUTINE F_STRING(S,N) : NOVALUE =
INCR I FROM 1 TO .N DO
    F_CHAR(CH$RCHAR_A(S));

!+
! Place a character in the output buffer.  If the pointer is at the
! end of the buffer then write out the line and start over again.
!
! C	The character to put out.
!-

ROUTINE PUT_CHAR(C) : NOVALUE =
BEGIN
    LOCAL SAVE_POS;
!
! Check for end of buffer.
!
IF CH$PTR_EQL(END_BUF,.F_CUR) THEN 
    BEGIN
    SAVE_POS = .F_LINE_POS;
    F_PUT();
    F_LINE_POS = .SAVE_POS;
    END;
CH$WCHAR_A(.C,F_CUR);
END;


!+
! This routine moves a string to the output buffer without any conversion.
! 
! C_POINT	Pointer to the string.
!
! LEN		Length of the string.
!-

GLOBAL ROUTINE F_LITERAL(C_POINT,LEN) =
INCR I FROM 1 TO .LEN DO PUT_CHAR(CH$RCHAR_A(C_POINT));

!+
! Place a character in the format buffer.  If the character would cause
! the buffer to overflow, or a line to be longer than the terminal width
! then write the buffer first.  Control chraracters are printed out either
! with a special mnemonic like <CR> or as ^letter.  Tabs are expaned into
! the correct number of spaced.
!-

GLOBAL ROUTINE F_CHAR(FC) : NOVALUE =
BEGIN
LOCAL
    C,
    ORIG_POS;
C = .FC;
!
! If the terminal is not in eight-bit mode, then mask off the eight bit.
!
IF .E_EIGHT EQL 0 THEN C = .C AND 127;
!
! Remember the original column number for use by tabs.
!
ORIG_POS = .F_LINE_POS;
!
! Bump the column number by the amount occupied by this character.
!
F_LINE_POS = .F_LINE_POS + F_COL_INC(.C,.F_LINE_POS);
!
! If this would exceed the terminal width, then put out the line first.
!
IF .F_LINE_POS GTR .E_T_WIDTH THEN
    BEGIN
    F_PUT();
    F_LINE_POS = .F_LINE_POS + F_COL_INC(.C,.F_LINE_POS);
    END;
!
! Handle the character
!
SELECTONE .C OF
SET
[10 TO 13]:	! <CR> <LF> <VT> <FF>
    BEGIN
    LOCAL
        SYMBOL;
    SYMBOL = CH$PTR(CONTROL_CHARS,(.C-10)*2);
    PUT_CHAR('<');
    F_LITERAL(.SYMBOL,2);
    PUT_CHAR('>');
    END;
    
[27]:	! <ESC>
   F_LITERAL(UPLIT BYTE('<ESC>'),5);

[TAB]:
   INCR I FROM 1 TO 8 - .ORIG_POS MOD 8 DO PUT_CHAR(' ');

[0 TO 31]:	! Other control characters.
    BEGIN
    PUT_CHAR('^');
    PUT_CHAR(.C+'@');
    END;

[127]: ! <DEL>
    F_LITERAL(UPLIT BYTE('<DEL>'),5);

[OTHERWISE]:
    PUT_CHAR(.C);
TES;
END;

!+
! Write out the contents of the format buffer by calling the format
! write routine and reset the buffer pointer and column number.
!-

GLOBAL ROUTINE F_PUT =
BEGIN
LOCAL
    RETVAL;
RETVAL = (.F_W_ROUTINE)(F_BUF,CH$DIFF(.F_CUR,F_BUF));
F_CUR = F_BUF;
F_LINE_POS = 0;
RETURN .RETVAL;
END;

!+
! Set up the address of the format write routine.
!
! R	The address of the routine to call to write the format buffer.
!-

GLOBAL ROUTINE F_WRITE(R) =
F_W_ROUTINE = .R;


!+
! Output a CRLF.  If we are in line mode, the format write routine will
! be IO_WT and we can just do and F_PUT, otherwise, actually put the
! CRLF in the buffer.  In either case the column number is reset.
!-

GLOBAL ROUTINE F_CRLF : NOVALUE =
BEGIN
IF .F_W_ROUTINE EQL IO_WT THEN
    F_PUT()
ELSE
    BEGIN
    PUT_CHAR(CR);
    PUT_CHAR(LF);
    F_LINE_POS = 0;
    END;
END;

!+
! Convert a decimal number to displayable ascii in the format buffer.
! The number is written with a leading minus and leading zeros suppressed.
!
! N	The number to write out.
!-

GLOBAL ROUTINE F_DEC(N) : NOVALUE =
BEGIN
LOCAL
    DIVISOR;
!
! See if we should put out a minus.
!
IF .N LSS 0 THEN
    BEGIN
    F_CHAR('-');
    N = -.N;
    END;
!
! Size of number is system dependent.
!
%IF %BLISS(BLISS32) %THEN
    DIVISOR = 1000000000;
%ELSE %IF %BLISS(BLISS16) %THEN
    DIVISOR = 10000;
%FI %FI

!
! Skip leading zeros.
!
WHILE .N / .DIVISOR EQL 0 AND .DIVISOR GTR 1 DO
    DIVISOR = .DIVISOR / 10;
!
! And put out the digits from left to rigth.
!
DO  BEGIN
    F_CHAR(.N/.DIVISOR MOD 10 + '0');
    DIVISOR = .DIVISOR / 10;
    END
UNTIL .DIVISOR EQL 0;
END;

!+
! Routine to get text of a message and write it out.
!
! MESS_NUM	The number of the error message to write. 
!-
GLOBAL ROUTINE F_PUT_MESS(MESS_NUM) : NOVALUE =
BEGIN
SY_GET_MESS(.MESS_NUM);
F_PUT();
END;

END
ELUDOM
