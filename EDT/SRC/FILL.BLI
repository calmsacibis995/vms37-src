MODULE FILL(IDENT='V03-000') =
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY: EDT Version 2.
!
! FUNCTIONAL DESCRIPTION:
!
!	This module implements the fill command for line mode
!	or change mode.
!
! ENVIRONMENT: user mode.
!
! AUTHOR: Bob Kushlis, CREATION DATE: 11-OCT-1979
!
! MODIFIED BY:
!
!
!--

BEGIN

LIBRARY 'EDT';

PSECTS

EXTERNAL ROUTINE
    F_COL_INC,
    WF_DELETE_LINE,
    WF_INSERT_LINE,
    WF_START_INSERT,
    WF_END_INSERT,
    WF_R_FORWARD;

EXTERNAL
    E_WRAP,
    E_T_WIDTH,
    L_BUF,
    L_LEN,
    W_LINE : REF LIN_BLOCK;

LITERAL
    TAB = 9;

GLOBAL ROUTINE FLL_FILL(NLINES) =
BEGIN
LABEL
    PUTLINE;

LOCAL
    MARGIN,	! The column number of the right margin.
    COL,	! Current column of filled line buffer.
    I,		! Index into the input line.
    LC,		! Count of lines processed.
    LP,		! Pointer into filled line buffer.
    SP,		! Pointer used when scanning back for spaces.
    REM,	! No of characters remaining after fill line.
    LEN,	! Length of input line.
    NL;		! No of new lines created.

!
! Determine the margin.
!
IF .E_WRAP NEQ 256 THEN
    MARGIN = .E_WRAP
ELSE
    MARGIN = .E_T_WIDTH-1;
!
! Set the filled line buffer to empty,
! The column number to 0,
! And the count of lines processed to 0.
!
LP = CH$PTR(L_BUF);
LC = 0;
COL = 0;
I = .W_LINE[LIN_LENGTH];
NL = 0;
!
! Loop until NLINES have been processed.
!
INCR J FROM 1 TO .NLINES DO
    BEGIN
    !
    ! Strip trailing blanks and tabs
    !
    LEN = .W_LINE[LIN_LENGTH];
    SP = CH$PTR(W_LINE[LIN_TEXT],.LEN);
    WHILE CH$PTR_GTR(.SP,W_LINE[LIN_TEXT]) DO
        BEGIN
        SP = CH$PLUS(.SP,-1);
	IF CH$RCHAR(.SP) NEQ ' ' AND
	   CH$RCHAR(.SP) NEQ TAB THEN EXITLOOP;
        LEN = .LEN - 1;
	END;
    
    IF .LEN NEQ 0 THEN
        BEGIN
	INCR I FROM 0 TO .LEN DO
	    BEGIN
	    IF .I EQL .LEN THEN
		CH$WCHAR(%C' ',.LP)
	    ELSE
		CH$WCHAR(CH$RCHAR(CH$PTR(W_LINE[LIN_TEXT],.I)),.LP);
	    COL = .COL + F_COL_INC(CH$RCHAR_A(LP),.COL);
	    IF .COL GTR .MARGIN THEN
		PUTLINE: BEGIN
		!
		! Back up to a space.
		!
		SP = CH$PLUS(.LP,-1);
		WHILE CH$RCHAR(.SP) NEQ ' ' DO
		    IF CH$PTR_EQL(.SP,CH$PTR(L_BUF)) THEN
			LEAVE PUTLINE
		    ELSE
			SP = CH$PLUS(.SP,-1);
		!
		! Insert the new line.
		!
		WF_START_INSERT();
		WF_INSERT_LINE(CH$PTR(L_BUF),CH$DIFF(.SP,CH$PTR(L_BUF)));
		WF_END_INSERT();
		NL = .NL + 1;
		!
		! And move the remaining characters to the beginning
		! of the buffer.
		!
		SP = CH$PLUS(.SP,1);
		CH$MOVE(CH$DIFF(.LP,.SP),.SP,CH$PTR(L_BUF));
		COL = 0;
		REM = CH$DIFF(.LP,.SP);
		LP = CH$PTR(L_BUF);
		DECR I FROM .REM-1 TO 0 DO
		    COL = .COL + F_COL_INC(CH$RCHAR_A(LP),.COL);
		END;
	    END;    
	WF_DELETE_LINE();
	END
    ELSE
	!
	! Line was blank, break the fill at this point by inserting
	! whatever remains from the previous line.
	!
	BEGIN
	!
	! Insert the remainder of new line.
	!
	IF CH$PTR_NEQ(.LP,CH$PTR(L_BUF)) THEN
	    BEGIN
	    WF_START_INSERT();
	    WF_INSERT_LINE(L_BUF,CH$DIFF(.LP,CH$PTR(L_BUF)));
	    WF_END_INSERT();
	    NL = .NL + 1;
	    LP = CH$PTR(L_BUF);
	    COL = 0;
	    END;
        WF_R_FORWARD();
    	NL = .NL + 1;
	END
    END;
IF CH$PTR_NEQ(.LP,CH$PTR(L_BUF)) THEN
    BEGIN
    WF_START_INSERT();
    WF_INSERT_LINE(L_BUF,CH$DIFF(.LP,CH$PTR(L_BUF)));
    WF_END_INSERT();
    NL = .NL + 1;
    END;
RETURN .NL
END;
END
ELUDOM
