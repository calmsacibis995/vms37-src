MODULE EDTDATA(IDENT='V03-000') =
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY: EDT version 2
!
! FUNCTIONAL DESCRIPTION:
!
!	This module contains common data definitions used throughout
!	the editor.
!
! ENVIRONMENT: edt enviroroment
!
! AUTHOR: Bob Kushlis, CREATION DATE:  6-AUG-1979
!
! MODIFIED BY:
!
! Dan Szymanski,  21-JUL-80,  01
!
!	As part of the expanded key definition facilities, the default
!	definitions for VT52 and VT100 keypads have been moved to KEYPAD.
!	The table TRAN_TAB now contains (relative) pointers to the strings
!	of nokeypad commands defining the keys.  The variable C_TRAN was
!	added to indicate the initialization of the translation table.
!
! J. Sauter, 02-Nov-1981, 02
!
!	Remove R_ALL_RANGE.
!--

BEGIN
LIBRARY 'EDT';

PSECTS

EXTERNAL ROUTINE
    IO_WT,
    U_CASE_COMP;

GLOBAL
    C_BUF:	 BLOCK[CH$ALLOCATION(256)],	! Command line buffer
    C_POINT,					! Pointer into command buffer
    C_END,					! Pointer to end of command
    C_LEN,					! Length of command buffer

    L_BUF:	 BLOCK[CH$ALLOCATION(256)],	! Current line buffer
    L_POINT,					! Pointer to char in current line
    L_END,					! Pointer to end of line
    L_LEN,					! Length of current line


    D_LAST_ITEM;

BIND
    COM_NAME = UPLIT(%STRING('EDTINI')),
    ENT_WORD = UPLIT BYTE(6,' ',9,10,11,12,13),
    ENT_SENT = UPLIT BYTE(3,'.','!','?'),
    ENT_SECT = UPLIT BYTE(2,13,13),
    ENT_PAGE = UPLIT BYTE(1,12);
    
GLOBAL
    E_MODE:     INITIAL(LINE_MODE),	! Current editting mode
    E_DEF_MODE: INITIAL(LINE_MODE),	! The mode to enter after startup.
    E_SAVE_COUNT: INITIAL(3),		! Flush count for audit trail.
    E_EXITED:	INITIAL(0),		! Set to indicate the editor has exited
    E_I_NAME,				! Pointer to input file name
    E_I_LEN:	INITIAL(0),		! Length of input file name
    E_O_NAME,				! Pointer to output file name
    E_O_LEN:	INITIAL(0),		! Length of output file name
    E_C_NAME:	INITIAL(COM_NAME),	! Pointer to command file name
    E_C_LEN:	INITIAL(6),		! Length of command file name
    E_COMMAND:	INITIAL(1),		! Command option
    E_J_NAME,				! Journal file name
    E_J_LEN:	INITIAL(0),		! Journal file name length
    E_JOURNAL:	INITIAL(1),		! Journal option.
    E_NUMBERS:	INITIAL(1),		! Line numbers enabled flag
    E_CASEFLAG:	INITIAL(0),		! Flag case (upper, lower none)
    E_EXACT:	INITIAL(0),		! Exact matches required?
    E_SBEGIN:	INITIAL(1),		! End searches at beginning?
    E_SBOUND:	INITIAL(0),		! Search bounded?
    E_QUIET:	INITIAL(0),		! Quiet mode
    E_EIGHT:	INITIAL(0),		! Eightbit mode
    E_VERIFY:	INITIAL(0),		! Do we verify command files?
    E_TRUNC:	INITIAL(1),		! Truncate or wrap long lines?
    E_AUD_IFI,
    E_TERM,				! Are we coming from a terminal?
    E_ABUF,				! Alternate buffer for copy etc.
    E_CC:	INITIAL(0),		! Set when contorl c is typed.
    E_T_TYPE,				! Terminal type.
    E_T_WIDTH:	INITIAL(80),		! Width of terminal line
    E_TBCB:	REF TBCB_BLOCK,		! The current text buffer control block
    E_LAST_TBCB,                	! Previous tbcb address.
    E_MACRO,				! Pointer to current macro tbcb
    E_PASTE_TBCB: REF TBCB_BLOCK,	! The paste text buffer control block
    E_BUF_LIST:	INITIAL(0),		! List of active text buffers.
    E_MAC_LIST:	INITIAL(0),		! List of macro descriptors.
!   E_VAR_LIST:	INITIAL(0),		! List of variables.
    E_KEYPAD:	INITIAL(1),		! Use the keypad?
    E_WRAP:	INITIAL(256),		! word wrap?
    E_S_TOP:	INITIAL(7),		! top limit of cursor before scrolling
    E_S_BOT:	INITIAL(14),		! bottom limit of cursor before scrolling
    E_SLIN:	INITIAL(22),		! number of screen lines to use
    E_ENT:	VECTOR[4]		! Pointers to user defined entities.
        INITIAL(ENT_WORD,ENT_SENT,ENT_SECT,ENT_PAGE),
    E_TAB,				! Structured tab size.
    E_TLEV,				! Structured tab level.
    E_TADJ,				! Tabs adjust level.
    E_I_SOURCE,				! Source of command input.
    E_SCRCHG,				! for EXT mark screen as changed.
    E_TXT:	INITIAL(0),		! command put text on screen.
    E_INP_COUNT:INITIAL(0),		! count since last flush.
    E_RECOVER:	INITIAL(0);		! Are we in recovery mode.

! Change mode data declarations.

LITERAL
    NO_SELECT = -1;

GLOBAL
    C_COL,
    C_UPF,				! THESE SHOULD BE DELETED

    C_SHFT:	INITIAL(0),		! The number of columns shifted.
    C_CHG:	INITIAL(0),		! Indicates current line has changed.
    C_ACOL,				! The column we should be on.
    
    C_DIR,				! The current direction.

    C_BW,				! Character position of start of word.
    C_EW,				! Character position of end of word.
    C_WLEN,				! Length of current word.


    C_DLBUF:	BLOCK			! Deleted line buffer.
	[CH$ALLOCATION(257)],
    C_DLLEN,				! Length of deleted line.
    C_DWBUF:	BLOCK			! Deleted word buffer.
	[CH$ALLOCATION(81)],
    C_DWLEN,				! Length of deleted word.
    C_DCBUF:	BLOCK			! Deleted character buffer.
        [CH$ALLOCATION(2)],

    C_SELL:	LN_BLOCK,		! Relative line number of select.
    C_SBUF,				! select buffer.
    C_MFLG:	INITIAL(0),		! Indicates a message has been disp.
    C_DMODE: 	INITIAL(1),		! The directional mode:
					! -1 for backup, 1 for advance.
    C_LNO,				! current line number.
    C_CCOL,				! current column
    C_CLIN,				! cursor line number
    C_CPOS,				! char position of cursor.
    C_LOS,				! no of lines on the screen
    C_CURL: 	LN_BLOCK,		! relative line number of cursor line.
    P_LNO:	INITIAL(999),		! Previous line number.
    P_COL,				! Previous column number.
    C_EXIT,
    C_REV,				! reverse video on?
    C_VERT,				! was last entity VERT?
    C_TOP:	LN_BLOCK,		! Line number of enforced top line.
    C_PBUF,				! Buffer for cut paste append
    C_PSTC,				! No. of characters pasted.

    C_SADR,				! search string address.
    C_SLEN,				! search string length
    C_RADR,				! replace string address
    C_RLEN,				! replace string length

    C_ERR,				! error message number.

    C_SELP:	INITIAL(NO_SELECT),	! select position.
    C_SINFO: 	SCREEN_VEC,		! screen info vector.

    C_TRAN:	INITIAL (0);		! True if translation table has been initialized

!
! This is the translation table used by KEYTRAN to translate
! the keys into change mode commands.  Each entry in the table is
! a pointer to a counted ASCII string which is the definition of the
! corresponding key.
!
GLOBAL
    TRAN_TAB:	  VECTOR[202] INITIAL (REP 202 OF (0)),
    MAX_DEF_KEYS: INITIAL (202),
    MAX_KEY_DEF:  INITIAL(201);

GLOBAL
    K_REPT : INITIAL(0),	! auto repeat indicator.
    K_RAH : INITIAL(0),		! read ahead flag,
    K_RAC;			! character which was read ahead.

! Global data used by EDTWF
GLOBAL
    W_AVAIL : INITIAL(0),
    W_CUR_BUKT : INITIAL(0),
    W_GREATEST_BUKT : INITIAL(1),
    W_MODIFIED : INITIAL(0),
    W_NEXT_NUM : LN_BLOCK,	! Line number following an insert
    W_START_NUM : LN_BLOCK,	! Line number of line preceding an insert
    W_I_COUNT : LN_BLOCK,	! The count of inserted lines
    W_I_BUKT,			! The bucket number at start of insert
    W_I_ADDR,	 		! The line address at start of insert
    W_LINE : REF LIN_BLOCK,
    W_BUKT : REF BLOCK[WF_BUKT_SIZE,BYTE] FIELD(WFB_FIELDS);

! Data used by FORMAT

GLOBAL
    F_BUF : BLOCK[CH$ALLOCATION(136)],
    F_CUR : INITIAL(F_BUF),
    F_LINE_POS : INITIAL(0),
    F_W_ROUTINE : INITIAL(IO_WT);

! Data used by EXEC

GLOBAL
    X_LINE_NUM : VECTOR[12,BYTE] INITIAL('     .      '),
    X_SUBS_COUNT,
    X_QUERY_QUIT,
    X_S_BITS,
    X_S_BLOCK : REF NODE_BLOCK,
    X_CUR_COM : REF NODE_BLOCK;

! Data used by line mode parser

LITERAL
    NUM_NODES = 15;
GLOBAL
    P_ABORT : INITIAL(0),		! flag indicating to abort parse
    P_TAB_POINTER,			! pointer into the parse table
    P_CHAR,				! the currently being processed character
    P_RANGE : REF NODE_BLOCK,	! the current range node
    P_THRURANGE : REF NODE_BLOCK,	! The currently being built thru type range
    P_PERCENT,                    	! Did the keyword contain a percent?
    P_ERROR_NUM,			! Error number of parsing error.
    P_CLASS,				! class of current token
    P_SP,
    P_BUFFER_RANGE : REF NODE_BLOCK,
    P_AND_LIST_HEAD : REF NODE_BLOCK,
    P_T_ADDR: INITIAL(C_BUF),		! start of the current token
    P_T_LEN,				! length of current token
    P_L_ADDR,				! Previous token address
    P_L_LEN,				! Previous token length
    P_CUR_COM,
    P_NUM_VAL : LIN_BLOCK,		! the value of a numeric literal
    P_STACK : BLOCKVECTOR[NUM_NODES,NODE_SIZE,BYTE] FIELD(NODE_FIELDS);

! Data used by RANGE

GLOBAL
    R_MORE,			! Used by RAN_NEXT to indicate more lines.
    R_FIRST,			! Indicates first line in a range.
    R_NLINES,			! Count of number of lines in a range.
    R_END_LINE : LN_BLOCK,	! The line number at which this range ends
    R_CUR_RANGE : REF NODE_BLOCK,! The current range node
    R_ORIG_POS : POS_BLOCK,	! To save the position at start of command.
    R_SAVE_POS : POS_BLOCK;	! To save the beginning of range

! Data used by TINPUT

GLOBAL
    TI_E_FLAG,
    TI_E_POS,
    TI_BUF_POS : INITIAL(0),
    TI_CBUF : BLOCK[CH$ALLOCATION(16)],
    TI_LPOINT : INITIAL(0),
    TI_LLEN,
    TI_LEND,
    TI_REC_BUF : BLOCK[CH$ALLOCATION(255)];

! Data used by UTIL

GLOBAL
    U_SRCHSTR : BLOCK[CH$ALLOCATION(64)],	! Last search string.
    U_SLEN : INITIAL(0),			! Length of above.
    U_STR_COMP : INITIAL(U_CASE_COMP),		! Addr of string comp routine
    U_SUBSTR : BLOCK[CH$ALLOCATION(64)],	! Last substitute string.
    U_SUBLEN : INITIAL(0);			! Length of above.

END
ELUDOM
