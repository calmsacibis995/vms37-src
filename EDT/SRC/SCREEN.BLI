MODULE SCREEN(IDENT='V03-000') =
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY: EDT version 2
!
! FUNCTIONAL DESCRIPTION:
!
!	This module contains all the routines required to execute
!	change mode subcommand strings, and to maintain the display
!	of text on the terminal.
!
! ENVIRONMENT: User mode, sharable.
!
! AUTHOR: Bob Kushlis, CREATION DATE:  8-SEP-1979
!
! MODIFIED BY:
!
! Bob Kushlis, 23-MAY-1980
!
!	Fix SC_INSERT.
!
! 2-002	- Fix a bug in SC_DELETE that caused the keypad translation
!	   data base to be clobbered if a lot of lines were deleted
!	   in a single keystroke.  JBS 10-Aug-1981
! 
!--

BEGIN

LIBRARY 'EDT';

PSECTS


LITERAL
    NO_REFRESH	=	100,
    MESSAGE_LINE=	22,
    COMMAND_LINE=	23,
    SCREEN_SIZE	=	21,
    TAB		=	9,
    SO		= 	14,
    SI		=	15,
    LF		=	10,
    CR		=	13,
    CNTRL_Z	=	26,
    DEL		=	127,
    ESC		=	27;

EXTERNAL
    C_SHFT,				! The number of columns shifted.
    C_CHG,				! Indicates current line has changed.
    C_ACOL,				! The column we should be on.

    C_DIR,				! The current direction.
    C_DMODE,				! The directional mode.

    C_SELL : LN_BLOCK,			! Relative line number of select.
    C_MFLG,				! Indicates a message has been disp.
					! -1 for backup, 1 for advance.
    C_LNO,				! current line number.
    C_CLIN,				! current cursor line
    C_CCOL,				! current cursor column
    C_CPOS,				! character position of cursor.
    C_CURL : LN_BLOCK,			! relative line number of cursor line.
    C_LOS,				! lines on screen.
    P_LNO,				! Previous line number.
    P_COL,				! Previous column number.
    C_EXIT,				! Change mode has been exited.
    C_SELP,				! select position.
    C_SBUF,				! select buffer.
!    C_UPD   : UP_VECTOR,		! the screen update list
!    C_NUP,				! index of next update record
    C_TOP : LN_BLOCK,			! Line number of enforced top line.
    C_REV,				! is reverse video on?
    C_SINFO : SCREEN_VEC;		! The screen info vector.

BIND
    ERS_S_52 = UPLIT(%STRING(%CHAR(ESC),'J')),
    ERS_S_100 = UPLIT(%STRING(%CHAR(ESC),'[J')),
    ERS_L_52 = UPLIT(%STRING(%CHAR(ESC),'K')),
    ERS_L_100 = UPLIT(%STRING(%CHAR(ESC),'[K')),
    NO_SCROLL = UPLIT(%STRING(%CHAR(ESC),'[;24r')),
    ESC_BRACKET = UPLIT(%STRING(%CHAR(ESC),'[')),
    KEYPAD_MODE = UPLIT(%STRING(%CHAR(ESC),'=')),
    VT100_MODES = UPLIT(%STRING(
    	%CHAR(ESC),'<',		! ansi mode
    	%CHAR(ESC),'[?6l',	! origin mode off
	%CHAR(ESC),'[?7l',	! auto wrap off
	%CHAR(ESC),'[m',	! no video attributes
	%CHAR(ESC),')0')),	! select special graphics for G1

    S_UP_52 = UPLIT(%STRING(%CHAR(ESC),'Y',%CHAR(55),%CHAR(32),%CHAR(LF))),
    NOKEYPAD_MODE = UPLIT(%STRING(%CHAR(ESC),'>')),
    CRLF = UPLIT BYTE(CR,LF),
    REV_VIDEO = UPLIT(%STRING(%CHAR(ESC),'[7m')),
    NORM_VIDEO = UPLIT(%STRING(%CHAR(ESC),'[m'));

EXTERNAL
    C_BUF,				! Command string buffer.
    C_POINT,				! Command string pointer.
    C_END,				! End of command pointer.
    K_REPT,				! Auto repeat flag.
    L_BUF,				! Current line buffer.
    L_POINT,				! Current character pointer.
    L_END,				! End of current line pointer.
    L_LEN,				! Length of current line.
    LNO_BIG,				! Largest line number.
    E_PASTE_TBCB: REF TBCB_BLOCK,	! The paste buffer tbcb.
    E_TBCB	: REF TBCB_BLOCK,	! The current buffer tbcb.
    E_T_WIDTH,				! Width of terminal line.
    E_T_TYPE,				! Terminal type.
    E_EXITED,				! Exit from edt.
    E_TRUNC,				! Truncate or wrap long lines.
    E_WRAP,				! Word wrap.
    E_S_TOP,				! Top line for scrolling up
    E_S_BOT,				! Bottom line for scrolling down
    E_SLIN,				! No of lines on screen
    E_KEYPAD,				! Keypad activated?
    U_STR_COMP,				! Address of current compare routine.
    U_SLEN,				! Length of current search string.
    U_SRCHSTR,				! Current search string.
    U_SUBSTR,				! Current substitute string.
    U_SUBLEN,				! Length of subs string.
    F_BUF,				! Format buffer.
    F_CUR,				! Pointer into format buffer.
    W_LINE	: REF LIN_BLOCK;	! Current line pointer.

EXTERNAL ROUTINE
    EXT_DECS
    U_S_STRING,
    U_S_SUBS,
    U_DIGIT,
    F_CHAR,
    F_PUT,
    F_WRITE,
    F_CRLF,
    F_COL_INC,
    F_LITERAL,
    F_SET_COL,
    F_DEC,
    F_STRING,
    IO_WTU,
    IO_GC,
    IO_REC,
    IO_TAS,
    IO_TAE,
    MC_CHANGE,
    MC_UP,
    MC_DOWN,
    MC_LEFT,
    MC_RIGHT,
    TI_AUTO,
    TI_LINE,
    TI_CHAR,
    TI_CLEAR_AUDIT,
    E_PUT_AUDIT,
    H_CHANGE,
    K_TRAN_CHAR,
    SYS_EWORK,
    WF_COMP_LNO,
    WF_DELETE_LINE,
    WF_R_FORWARD,
    WF_R_BACKWRD,
    WF_R_CURRENT,
    WF_TOP,
    WF_EOB,
    WF_REPLACE_LINE,
    WF_START_INSERT,
    WF_INSERT_LINE,
    WF_END_INSERT,
    WF_BOTTOM,
    U_G_BUFFER,
    U_CVTCASE,
    U_LETTER,
    U_LETDIG;

MACRO
    ALL = 0,0,0,0 %;

!+
! SC_FCURSOR
!
! This routine forces a cursor position sequence to the specified line
! and position to be placed in the formatted output buffer.
!
! The new line and position are saved in P_LNO and P_POS for use by future
! positions.
!-

GLOBAL ROUTINE SC_FCURSOR(LINE,POS) : NOVALUE =
BEGIN
IF .E_T_TYPE EQL TERM_VT52 THEN
    BEGIN
    F_LITERAL(UPLIT(%STRING(%CHAR(ESC),'Y')),2);
    F_CHAR(.LINE+32);
    F_CHAR(.POS+32);
    END
ELSE IF .E_T_TYPE EQL TERM_VT100 THEN
    BEGIN
    F_LITERAL(ESC_BRACKET,2);
    IF .LINE NEQ 0 THEN F_DEC(.LINE+1);
    F_CHAR(';');
    IF .POS NEQ 0 THEN F_DEC(.POS+1);
    F_CHAR('H');
    END;
P_LNO = .LINE;
P_COL = .POS;
END;

!-
! SC_CURSOR
!
! This routine puts out a cursor position sequence to LINE,POS unless the
! cursor is already positioned there as indicated by P_LNO,P_POS.
!+

GLOBAL ROUTINE SC_CURSOR(LINE,POS) : NOVALUE =
BEGIN
IF .LINE EQL .P_LNO AND .POS EQL .P_COL THEN RETURN;
IF .POS GEQ .E_T_WIDTH THEN
    POS = .E_T_WIDTH -1;
SC_FCURSOR(.LINE,.POS);
END;

!+
! This routine outputs a cursor position sequence.
!-

GLOBAL ROUTINE C_CURSOR(LINE,POS) : NOVALUE =
BEGIN
IF .LINE EQL .P_LNO AND .POS EQL .P_COL THEN RETURN;
SC_CURSOR(.LINE,.POS);
F_PUT();
END;

!+
! This routine puts out the character which indicates a wrapped or truncated
! line.
!-

GLOBAL ROUTINE SC_BLOB : NOVALUE =
BEGIN
IF .E_T_TYPE EQL TERM_VT52 THEN
    F_LITERAL(UPLIT(%STRING(%CHAR(ESC),'Fa',%CHAR(ESC),'G')),5)
ELSE
    F_LITERAL(UPLIT(%STRING(%CHAR(SO),'`',%CHAR(SI))),3);
END;

GLOBAL ROUTINE SC_E_SCREEN : NOVALUE =
BEGIN
IF .E_T_TYPE EQL TERM_VT52 THEN
    F_LITERAL(ERS_S_52,2)
ELSE IF .E_T_TYPE EQL TERM_VT100 THEN
    F_LITERAL(ERS_S_100,3);
F_PUT();
END;
    
GLOBAL ROUTINE SC_E_LINE : NOVALUE =
BEGIN
IF .E_T_TYPE EQL TERM_VT52 THEN
    F_LITERAL(ERS_L_52,2)
ELSE IF .E_T_TYPE EQL TERM_VT100 THEN
    F_LITERAL(ERS_L_100,3);
END;

!+
! This routine puts the escape sequence to change the scrolling region
! into the format buffer.  T and B define the top and bottom line of the
! desired scrolling region.
!-

ROUTINE SC_REGION(T,B) : NOVALUE =
BEGIN
F_LITERAL(ESC_BRACKET,2);
IF .T NEQ 0 THEN F_DEC(.T+1);
F_CHAR(';');
F_DEC(.B);
F_CHAR('r');
END;

!+
! This routine does whatever is necessary for the given terminal
! when a line is scrolled onto the bottom of the screen.
!-

ROUTINE SCROLL_UP : NOVALUE =
IF .E_T_TYPE EQL TERM_VT52 THEN
    BEGIN
    !
    ! Position to line 24 and output a line feed, and reposition to the
    ! last line used for text.
    !
    SC_CURSOR(23,0);
    F_LITERAL(S_UP_52,5);
    P_LNO = 23;
    SC_CURSOR(.E_SLIN-1,0);
    END
ELSE
    BEGIN
    !
    ! Simply position to the last line in the scrollin region and output
    ! a line feed.
    !
    SC_CURSOR(.E_SLIN-1,0);
    F_LITERAL(%REF(LF),1);
    END;

!+
! This routine advances the column number COL_NUM by the number of
! positions used by CHAR.  If we are in notrunctate mode and we exceed the
! line width, then set the line will wrap making the new column number 
! 2 + the number of positions used by CHAR.  In that case return a one
! to indicate wrapping otherwise return a 0.
!-

ROUTINE ADVANCE_COL(COL_NUM,CHAR) =
BEGIN
.COL_NUM = ..COL_NUM + F_COL_INC(.CHAR,..COL_NUM);
IF ..COL_NUM GEQ .E_T_WIDTH AND
   .E_TRUNC EQL 0 THEN
    BEGIN
    .COL_NUM = 2 + F_COL_INC(.CHAR,2);
    F_SET_COL(..COL_NUM);
    RETURN 1;
    END;
RETURN 0
END;

!+
! This routine computes a new column position for vertical moves.  When
! any command other than a vertical arrow which moves the cursor is executed
! this procedure is called to get the new column position for vertical moves.
! The column position is kept in C_ACOL.
!-

GLOBAL ROUTINE SC_NCOL : NOVALUE =
BEGIN
LOCAL
    COL_INC,
    COL_POINT;
COL_POINT = L_BUF;
C_CCOL = 0;
C_ACOL = 0;
C_CLIN = .C_LNO;
IF .C_CLIN LSSU .C_LOS THEN C_CLIN = .C_SINFO[.C_CLIN,SI_SCREEN_LINE];
WHILE CH$PTR_NEQ(.COL_POINT,.L_POINT) DO
    IF ADVANCE_COL(C_CCOL,CH$RCHAR_A(COL_POINT)) THEN
        BEGIN
        C_ACOL = .C_ACOL + .E_T_WIDTH;
        C_CLIN = .C_CLIN + 1;
        END;
C_ACOL = .C_ACOL + .C_CCOL;
END;

!+
! Match column.  This routine is called when a vertical arrow has been
! used to move the cursor.  We have already moved to the new line, now
! we will try to match the column we were previously in.  The column we
! are trying to hit is C_ACOL.  We start at the beginning of the line
! and keep moving forward by a character until the next character would
! cause the column to exceed C_ACOL.
!-

GLOBAL ROUTINE SC_MCOL : NOVALUE =
BEGIN
LOCAL
    M_COL,
    NEXT_COL;
L_POINT = CH$PTR(L_BUF);
C_CCOL = 0;
M_COL = 0;
NEXT_COL = 0;
C_CLIN = .C_LNO;
IF .C_CLIN LSSU .C_LOS THEN C_CLIN = .C_SINFO[.C_CLIN,SI_SCREEN_LINE];
WHILE CH$PTR_NEQ(.L_END,.L_POINT) DO
    BEGIN
    IF ADVANCE_COL(NEXT_COL,CH$RCHAR(.L_POINT)) THEN
        BEGIN
        M_COL = .M_COL + .E_T_WIDTH;
        C_CCOL = 2;
        C_CLIN = .C_CLIN + 1;
        END;
    IF .NEXT_COL + .M_COL  GTR .C_ACOL THEN EXITLOOP;
    L_POINT = CH$PLUS(.L_POINT,1);
    C_CCOL = .NEXT_COL;
    END;
END;

!+
! Moves to a specified line.  N is the value of C_LNO which we want
! to move to.  Just keep going backward or forward until they match.
!-

ROUTINE MOVE_TO(N) : NOVALUE =
BEGIN
WHILE .C_LNO GTR .N DO (WF_R_BACKWRD(); C_LNO = .C_LNO-1);
WHILE .C_LNO LSS .N DO (WF_R_FORWARD(); C_LNO = .C_LNO+1);
END;

!+
! This routine computes the number of lines that the current line
! will take to display on the screen.  If we are in TRUNCATE mode, this
! is always 1, otherwise, if the line was already on the screen and
! has not changed, then return the old value from the screen info table.
! If all else fails, compute the length by going through the line 1 character
! at a time.
!-

ROUTINE LINE_SIZE =
BEGIN
LOCAL
     NLINES,
     COL,
     CP,
     EL;
IF .E_TRUNC THEN RETURN 1;
IF .C_LNO LEQU .C_LOS AND
   .C_SINFO[.C_LNO,SI_UPD_TO] LSSU .C_SINFO[.C_LNO,SI_UPD_FROM] THEN
    RETURN .C_SINFO[.C_LNO,SI_NUM_LINES];
COL = 0;
NLINES = 1;
CP = CH$PTR(W_LINE[LIN_TEXT]);
EL = CH$PLUS(.CP,.W_LINE[LIN_LENGTH]);
WHILE CH$PTR_NEQ(.EL,.CP) DO
    IF ADVANCE_COL(COL,CH$RCHAR_A(CP)) THEN
       NLINES = .NLINES+1;
RETURN .NLINES
END;

!+
! This routine clears the screen info vector, indicating that all lines
! must be completely updated.
!-

GLOBAL ROUTINE SC_ZAP_SINFO(S,F) : NOVALUE =
INCR I FROM .S TO MIN(.F,23) DO
    BEGIN
    C_SINFO[.I,SI_SCREEN_LINE] = 0;
    C_SINFO[.I,SI_UPD_FROM] = 0;
    C_SINFO[.I,SI_UPD_TO] = 255;
    C_SINFO[.I,SI_NUM_LINES] = 1;
    END;

!+
! This routine compares the current position in the buffer to the 
! select positions and returns -1, 0 or 1 depending on their relation.
!-

ROUTINE REL_POS(CP,TESTL,TESTP) =
BEGIN
LOCAL
    COMP;
COMP = WF_COMP_LNO(E_TBCB[TBCB_CUR_LIN],.TESTL);
IF .COMP EQL 0 THEN
    IF CH$PTR_LSS(.CP,.TESTP) THEN RETURN -1 ELSE RETURN 1
ELSE
    RETURN .COMP
END;

!+
! This routine makes sure the screen is in reverse video mode.  Check
! the flag, and if it is not, output the sequence to set reverse video
! and set the reverse flag.
!-

GLOBAL ROUTINE SC_REV : NOVALUE =
IF .E_T_TYPE EQL TERM_VT100 THEN
    IF .C_REV EQL 0 THEN
        BEGIN
        F_LITERAL(REV_VIDEO,4);
        C_REV = .C_REV + 1;
        END;

!+
! This routine is much like the above routine, but puts the screen in
! normal mode.
!-

GLOBAL ROUTINE SC_NOREV : NOVALUE =
IF .C_REV NEQ 0 THEN
    BEGIN
    F_LITERAL(NORM_VIDEO,3);
    C_REV = 0;
    END;

!+
! This routine checks to see if we are inside the select range, and forces
! the screen into either reverse or normal video based on the result.
!-

ROUTINE CHECK_REVERSE(CP) : NOVALUE =
BEGIN
LOCAL
    CPOINT;
CPOINT = CH$PTR(L_BUF,.CP);
IF .E_T_TYPE EQL TERM_VT100 THEN
    IF REL_POS(.CPOINT,C_CURL,.C_CPOS) NEQ
       REL_POS(.CPOINT,C_SELL,.C_SELP) THEN
        SC_REV()
    ELSE
        SC_NOREV();
END;

!+
! This is the big one.  This routine refreshes a single line on the screen.
!
! This routine worries about such things as line wrapping, reverse video,
! notices that the size of a line has changed, shifed windows etc.
!-

GLOBAL ROUTINE SC_RLIN(NUM,SCREEN,ADJUST) : NOVALUE =
BEGIN
LOCAL
    FINISH,
    COLUMN,
    LAST_COLUMN,
    NUM_LINES,
    END_LINE,
    CHAR_POINT;
!
! Initialize number of screen lines used.
!
NUM_LINES = 0;
!
! Initialize pointer into the line.
!
COLUMN = 0;
!
! Check for EOB
!
IF WF_EOB() THEN
    BEGIN
    CHAR_POINT = UPLIT(%STRING('[EOB]'));
    FINISH = CH$PLUS(.CHAR_POINT,5);
    END
ELSE
    BEGIN
    !
    ! Not EOB.  Position to the first character to be updated in the line,
    ! keeping track of the screen column which it will occupy.
    !
    CHAR_POINT = CH$PTR(W_LINE[LIN_TEXT]);
    END_LINE = CH$PLUS(.CHAR_POINT,.W_LINE[LIN_LENGTH]);
    FINISH = CH$PLUS(.CHAR_POINT,.C_SINFO[.NUM,SI_UPD_TO]+1);
    IF CH$PTR_GTR(.FINISH,.END_LINE) THEN 
        FINISH = .END_LINE;
    !
    ! Compute column number at which update starts.
    !
    DECR I FROM .C_SINFO[.NUM,SI_UPD_FROM]-1 TO 0 DO
        IF ADVANCE_COL(COLUMN,CH$RCHAR_A(CHAR_POINT)) THEN
            BEGIN
            NUM_LINES = .NUM_LINES+1;
            C_CLIN = .C_CLIN + 1;
            END;
    !
    ! Skip any characters shifted off the to the right.
    !
    IF .E_TRUNC NEQ 0 THEN
        BEGIN
        WHILE .COLUMN LSS .C_SHFT AND CH$PTR_LSS(.CHAR_POINT,.FINISH) DO
            COLUMN = .COLUMN + F_COL_INC(CH$RCHAR_A(CHAR_POINT),.COLUMN);
        COLUMN = MAX(0,.COLUMN - .C_SHFT);
        IF .COLUMN GEQ .E_T_WIDTH THEN
	    BEGIN
	    C_CLIN = .C_CLIN+1;
	    RETURN;
	    END;
        END;
    END;
!
! Position to the first column to update.
!
IF .C_CLIN + ..ADJUST GEQ .E_SLIN THEN
    BEGIN
    .ADJUST = ..ADJUST - 1;
    SCROLL_UP()
    END
ELSE
    SC_CURSOR(.C_CLIN+..ADJUST,.COLUMN);
!
! Put the characters into the format buffer.
!
F_SET_COL(.COLUMN);	! tell format routines our column number.
WHILE 1 DO
    BEGIN
    IF CH$PTR_GEQ(.CHAR_POINT,.FINISH) THEN EXITLOOP;
    LAST_COLUMN = .COLUMN;
    IF ADVANCE_COL(COLUMN,CH$RCHAR(.CHAR_POINT)) THEN
	BEGIN
	NUM_LINES = .NUM_LINES + 1;
	C_CLIN = .C_CLIN + 1;
	IF .C_CLIN GEQ .E_SLIN THEN EXITLOOP;
	!
	! Throw in an erase to end of line sequence.
	!
	SC_E_LINE();
	IF .C_CLIN+..ADJUST GEQ .E_SLIN THEN 
	    BEGIN
	    F_LITERAL(%REF(CR),1);
	    P_COL = 0;
	    SCROLL_UP();
	    .ADJUST = ..ADJUST - 1;
	    END
	ELSE
	    F_CRLF();
	SC_BLOB();
	F_CHAR(' ');
	F_SET_COL(2);
	END;
    IF .E_TRUNC NEQ 0 AND .COLUMN GEQ .E_T_WIDTH THEN EXITLOOP;
    IF .C_SBUF EQL .E_TBCB THEN 
	CHECK_REVERSE(CH$DIFF(.CHAR_POINT,CH$PTR(W_LINE[LIN_TEXT])));
    F_CHAR(CH$RCHAR_A(CHAR_POINT));
    END;
!
! Throw in an erase to end of line sequence.
!
IF CH$PTR_EQL(.CHAR_POINT,.END_LINE) THEN 
    BEGIN
    SC_E_LINE();
    !
    ! And reset the size of the line.
    !
    IF .C_SINFO[.NUM,SI_NUM_LINES] NEQ .NUM_LINES+1 THEN
	BEGIN
	C_SINFO[.NUM,SI_NUM_LINES] = .NUM_LINES+1;
	SC_ZAP_SINFO(.NUM+1,23);
	END;
    END
ELSE
    C_CLIN = .C_CLIN + .C_SINFO[.NUM,SI_NUM_LINES] -1;
!
! Mark line as refreshed.
!
C_SINFO[.NUM,SI_UPD_TO] = 0;
C_SINFO[.NUM,SI_UPD_FROM] = 255;
!
! If the line exceeds the terminal width, put out a diamond.
!
IF CH$PTR_NEQ(.CHAR_POINT,.FINISH) THEN
    BEGIN
    INCR I FROM .LAST_COLUMN TO .E_T_WIDTH-1 DO F_CHAR(' ');
    SC_BLOB();
    IF .E_TRUNC EQL 0 THEN
        BEGIN
        C_SINFO[.NUM,SI_UPD_FROM] = CH$DIFF(.CHAR_POINT,CH$PTR(W_LINE[LIN_TEXT]));
        C_SINFO[.NUM,SI_UPD_TO] = 255;
        END;
    END;
IF WF_EOB() THEN SC_E_SCREEN();
!
! If we are doing the entire screen, add a CRLF.
!
C_CLIN = .C_CLIN +1;
IF .SCREEN THEN 
    IF .C_CLIN+..ADJUST LSS .E_SLIN THEN
        F_CRLF();
!
! And remeber what we did to the cursor.
!
P_LNO = .P_LNO + .NUM_LINES;
IF .SCREEN THEN
    BEGIN
    P_LNO = .P_LNO + 1;
    P_COL = 0
    END
ELSE
    P_COL = .COLUMN;
END;

!+
! This routine refereshes the entire screen.  It makes a pass through the
! screen information table, and if a line needs updating, calls SC_RLIN
! to do the dirty work.  If the line does not need updating, it simply
! bumps C_LIN by the number of screen lines occupied by this line.
!-

GLOBAL ROUTINE SC_RSCR(ADJUST,FULL) : NOVALUE =
BEGIN
!
! Refresh the screen.
!
C_CLIN = 0;
WHILE 1 DO
    BEGIN
    C_SINFO[.C_LNO,SI_SCREEN_LINE] = .C_CLIN;
    IF .C_SINFO[.C_LNO,SI_UPD_TO] GEQU .C_SINFO[.C_LNO,SI_UPD_FROM] THEN
        SC_RLIN(.C_LNO,.FULL,.ADJUST)
    ELSE
        C_CLIN = .C_CLIN + .C_SINFO[.C_LNO,SI_NUM_LINES];
    IF WF_EOB() THEN EXITLOOP;
    IF .C_CLIN GEQ .E_SLIN THEN EXITLOOP;
    WF_R_FORWARD();
    C_LNO = .C_LNO+1;
    END;
C_LOS = .C_LNO;
END;

!+
! This routine computes the current cursor position returning the line
! and column numbers in the ref parameters LIN and COL.
!-

GLOBAL ROUTINE SC_COMP_CURSOR(LIN,COL) : NOVALUE =
BEGIN
LOCAL
    CP;
.LIN = 0;
.COL = 0;
CP = CH$PTR(L_BUF);
WHILE CH$PTR_NEQ(.CP,.L_POINT) DO
    IF ADVANCE_COL(.COL,CH$RCHAR_A(CP)) THEN
        IF .E_TRUNC EQL 0 THEN
            .LIN = ..LIN+1;
IF .E_TRUNC EQL 0 THEN
    BEGIN
    IF CH$PTR_NEQ(.L_POINT,.L_END) AND 
       ..COL + F_COL_INC(CH$RCHAR(.CP),..COL) GEQ .E_T_WIDTH THEN
        BEGIN
        .LIN = ..LIN + 1;
        .COL = 2;
        END
    END
ELSE
    BEGIN
    .COL = MAX(0,..COL-.C_SHFT);
    IF ..COL GEQ .E_T_WIDTH THEN .COL = .E_T_WIDTH - 1;
    END;
END;

!+
! This routine computes the number of lines which are available below
! the cursor line.  Acutually we are interested only if that number is
! less than E_SLIN the number of lines on the screen.
! If it is, the screen updater will try to put the EOB line on
! the bottom of the screen.
!-

ROUTINE LINES_BELOW =
BEGIN
LOCAL
    SAVE_LNO,
    LINES : LN_BLOCK;
!
! First check to see how many lines there are below the current line
! if this is enough, we can get out quick.
!
SUBLINE(E_TBCB[TBCB_CUR_LIN],E_TBCB[TBCB_LINE_COUNT],LINES);
IF .LINES LSSU .E_SLIN THEN 
    BEGIN
    SAVE_LNO = .C_LNO;
    LINES = 0;
    WHILE .LINES LSS .E_SLIN AND NOT WF_EOB() DO
        BEGIN
        WF_R_FORWARD();
        C_LNO = .C_LNO+1;
        LINES = .LINES + LINE_SIZE();
        END;
    MOVE_TO(.SAVE_LNO);
    END;
RETURN .LINES
END;

!+
! This routine is called to do a screen update.  Most of the work done
! by this routine involves deciding on whether or not scrolling should
! be done.  Basically, it figures out which line should be on the top
! of the screen, then determines how far away from the current line it
! has moved.  The actual update is handled by the SC_RLIN routine.
!-

GLOBAL ROUTINE SC_UPDATE : NOVALUE =
BEGIN
LOCAL
    CURSOR_POS,			! Column position of cursor
    CURSOR_LINE,		! Number of screen lines before cursor.
    NEW_TOP,			! The number of the new top of screen
    ORIG_LNO,			! Value of C_LNO on entry.
    BELOW,			! No. of screen lines below cursor line.
    FULL,			! Is this a full screen update?
    ADJUST;			! When scrolling up, no. of lines.
!
! Make sure we are in normal video if no select range.
!
IF .C_SBUF NEQ .E_TBCB THEN SC_NOREV();
!
! Remeber the original charcter position and relative line number.
!
C_CPOS = .L_POINT;
MOVELINE(E_TBCB[TBCB_CUR_LIN],C_CURL);
ORIG_LNO = .C_LNO;
ADJUST = 0;
MC_CHANGE();
!
! Compute the cursor position relative the the current line.
!
SC_COMP_CURSOR(CURSOR_LINE,CURSOR_POS);
!
! Compute the new top of screen line.
!
! This is done as follows:
!
!	1.  If there is an enforced top line, and that line would
!           leave the cursor on the screen, use it.
!
!	2.  If the current top of screen line would leave the
!	    cursor within the allowed region, do not change it.
!
!	3.  Make it the last line up from the current line which
!	    would put the cursor in the correct region.
!
!	4.  If the screen is not filled (due to EOB) then try move
!	    up to get the maximum info on the screen.
!
BELOW = LINES_BELOW() + LINE_SIZE() - .CURSOR_LINE-1;
!
! First scan up from the current line until we get the cursor in the
! proper region, giving precedence to the current top line.
!
WHILE .CURSOR_LINE LSS .E_SLIN DO
    BEGIN
    IF .CURSOR_LINE + .BELOW GEQ .E_SLIN AND
       (WF_COMP_LNO(E_TBCB[TBCB_CUR_LIN],C_TOP) EQL 0 OR
       .C_LNO LEQ 0 AND .CURSOR_LINE GEQ .E_S_TOP) THEN EXITLOOP;
    IF WF_R_BACKWRD() THEN C_LNO = .C_LNO-1 ELSE EXITLOOP;
    CURSOR_LINE = .CURSOR_LINE + LINE_SIZE();
    END;
!
! Now, if we have overshot, try lopping off some lines from the top.
!
WHILE .CURSOR_LINE GTR .E_S_BOT AND 
      .CURSOR_LINE + .BELOW GEQ .E_SLIN DO
    BEGIN
    IF .C_LNO EQL .ORIG_LNO THEN EXITLOOP;
    CURSOR_LINE = .CURSOR_LINE - LINE_SIZE();
    WF_R_FORWARD();
    C_LNO = .C_LNO+1;
    END;
NEW_TOP = .C_LNO;
!
! If the top line is no longer the enforced top line, then
! turn off the enforced top.
!
IF WF_COMP_LNO(E_TBCB[TBCB_CUR_LIN],C_TOP) NEQ 0 THEN
    MOVELINE(LNO_BIG,C_TOP);
!
! If current line is larger than entire screen window then
! set cursor postion at lower right corner.
!
IF .CURSOR_LINE GEQ .E_SLIN THEN
    BEGIN
    CURSOR_LINE = .E_SLIN-1;
    CURSOR_POS = .E_T_WIDTH-1;
    END;
!
! Now, scroll the update information based on the new top
!
FULL = 0;
IF .C_LNO  GTR .E_SLIN OR
   -.C_LNO GTR .E_SLIN THEN
    BEGIN
    SC_ZAP_SINFO(0,23);
    FULL = .FULL+1;
    END
ELSE
    IF .C_LNO GTR 0 THEN
        BEGIN
        INCR I FROM 0 TO .C_LOS-.C_LNO DO
            CH$MOVE(SI_SIZE,C_SINFO[.I+.C_LNO,ALL],C_SINFO[.I,ALL]);
        SC_ZAP_SINFO(MAX(.C_LOS-.C_LNO+1,0),23);
        ADJUST = .C_SINFO[0,SI_SCREEN_LINE];
        END
    ELSE IF .C_LNO LSS 0 THEN
        BEGIN
        MOVE_TO(0);
        DECR I FROM -1 TO .NEW_TOP DO
            BEGIN
            WF_R_BACKWRD();
            C_LNO = .C_LNO-1;
            SC_CURSOR(0,0);
            DECR I FROM LINE_SIZE()-1 TO 0 DO
                BEGIN
                F_LITERAL(%REF(ESC),1);
                IF .E_T_TYPE EQL TERM_VT52 THEN
                    F_CHAR('I')
                ELSE
                    F_CHAR('M');
                END;
            DECR I FROM .C_LOS-1 TO 0 DO
                CH$MOVE(SI_SIZE,C_SINFO[.I,ALL],C_SINFO[.I+1,ALL]);
            SC_ZAP_SINFO(0,0);
            C_CLIN = 0;
            C_SINFO[0,SI_NUM_LINES] = LINE_SIZE();
            SC_RLIN(0,0,ADJUST);
            IF .E_T_TYPE EQL TERM_VT52 THEN
                BEGIN
                SC_CURSOR(.E_SLIN,0);
                SC_E_SCREEN();
                END;
            END;
        END;
C_LNO = .C_LNO - .NEW_TOP;
MOVE_TO(0);
SC_RSCR(ADJUST,.FULL);
INCR I FROM 1 TO .ADJUST DO SCROLL_UP();
MOVE_TO(.ORIG_LNO - .NEW_TOP);
SC_CURSOR(.CURSOR_LINE,.CURSOR_POS);
C_CLIN = .CURSOR_LINE;
C_CCOL = .CURSOR_POS;
TI_AUTO();
F_PUT();
L_POINT = .C_CPOS;
END;

!+
! Undo the scolling region for VT100's.
!-

GLOBAL ROUTINE SC_NOSCR : NOVALUE =
IF .E_T_TYPE EQL TERM_VT100 THEN
    F_LITERAL(NO_SCROLL,6);

!+
! Set the scrolling region for VT100's according to the number of lines
! which will be used for text.
!-

GLOBAL ROUTINE SC_SCRREG : NOVALUE =
IF .E_T_TYPE EQL TERM_VT100 THEN
    SC_REGION(0,.E_SLIN);

!+
! Initialize for screen mode.  The scrolling region is set up for VT100's
! keypad mode is set, the screen is erased, and the screen info vector is
! zapped.
!-

GLOBAL ROUTINE SC_INIT : NOVALUE =
BEGIN
P_LNO = 999; ! to force a cursor position.
IF .E_KEYPAD NEQ 0 THEN
    F_LITERAL(KEYPAD_MODE,2);
IF .E_T_TYPE EQL TERM_VT100 THEN
    F_LITERAL(VT100_MODES,18);
SC_SCRREG();
SC_CURSOR(0,0);
SC_E_SCREEN();
F_PUT();
SC_ZAP_SINFO(0,23);
C_LOS = 1;
C_REV = 0;
!
! Inform the terminal I/O routines we are entering screen mode.
!
IO_TAS();
END;

!+
! This routine resets all the funny things we did to the terminal when
! entering screen mode.
!-

GLOBAL ROUTINE SC_RESET : NOVALUE =
BEGIN
IF .E_KEYPAD THEN
    F_LITERAL(NOKEYPAD_MODE,2);
SC_NOSCR();
SC_NOREV();
TI_AUTO();
!
! Put cursor at bottom of screen.
!
SC_FCURSOR(23,0);
F_LITERAL(UPLIT(%STRING(%CHAR(LF))),1);
F_PUT();
!
! Inform terminal I/O routines that we are leaving screen mode.
!
IO_TAE();
END;

!+
! A line has been inserted, update screen info vector to insert an entry
! for the new line, indicating that it's display length was zero.
!-

GLOBAL ROUTINE SC_INSERT : NOVALUE =
BEGIN
LOCAL
    SLINE,
    SIZE;
IF .E_T_TYPE EQL TERM_VT100 AND
   .C_LNO GTR 0 AND
   .C_LNO LSS .C_LOS-1 AND
   .E_TRUNC NEQ 0 THEN
    BEGIN
    SYS_EWORK();
    P_LNO = 99;
    SLINE = .C_SINFO[.C_LNO,SI_SCREEN_LINE];
    IF .SLINE GEQ .E_S_BOT THEN
	BEGIN
	SC_REGION(0,.SLINE);
	SC_CURSOR(.SLINE-1,0);
	F_LITERAL(UPLIT(%STRING(%CHAR(LF))),1);
        INCR I FROM 0 TO .C_LNO-1 DO
	    BEGIN
	    CH$MOVE(SI_SIZE,C_SINFO[.I+1,ALL],C_SINFO[.I,ALL]);
	    C_SINFO[.I,SI_SCREEN_LINE] = .C_SINFO[.I,SI_SCREEN_LINE] - 1;
	    END;
        C_LNO = .C_LNO - 1;
	END
    ELSE
	BEGIN
	SC_REGION(.SLINE,.E_SLIN);
	SC_CURSOR(.SLINE,0);
	F_LITERAL(UPLIT(%STRING(%CHAR(ESC),'M')),2);
	DECR I FROM .C_LOS-1 TO .C_LNO DO
	    BEGIN
	    CH$MOVE(SI_SIZE,C_SINFO[.I,ALL],C_SINFO[.I+1,ALL]);
	    C_SINFO[.I+1,SI_SCREEN_LINE] = .C_SINFO[.I+1,SI_SCREEN_LINE] + 1;
	    END;
	C_SINFO[.C_LNO,SI_NUM_LINES] = 1;
	IF .C_LOS LSS .E_SLIN THEN C_LOS = .C_LOS + 1;
	END;
    C_SINFO[.C_LNO,SI_UPD_FROM] = 0;
    C_SINFO[.C_LNO,SI_UPD_TO] = 255;
    SC_SCRREG();    
    F_PUT();
    P_LNO = 0;
    END
ELSE
    IF .C_LNO GEQ 0 THEN SC_ZAP_SINFO(.C_LNO,23);
END;

!+
! This routine is called when a line terminator has been deleted.  If
! we are a VT100 try to do a partial scroll of the screen to close up
! the gap.
!-

GLOBAL ROUTINE SC_DELETE(LINES) : NOVALUE =
BEGIN
LOCAL
    SCR_LINE;
IF .C_LNO LSS 0 THEN
    BEGIN
    C_LNO = .C_LNO+.LINES;
    IF .E_TBCB[TBCB_CUR_LIN] GTRU .C_LNO THEN
	SC_ZAP_SINFO(0,MIN(.C_LNO,23))
    ELSE
	SC_ZAP_SINFO(0,23);
    RETURN;
    END    
ELSE IF .C_LNO GTR .C_LOS THEN
    RETURN;
SCR_LINE = .C_SINFO[.C_LNO,SI_SCREEN_LINE];
IF .E_T_TYPE EQL TERM_VT100 AND
   .C_LNO + .LINES LSS .C_LOS AND
   .E_TRUNC NEQ 0 THEN
    BEGIN
    SYS_EWORK();
    SC_REGION(.SCR_LINE,.E_SLIN);
    P_LNO = 99;
    SC_CURSOR(.E_SLIN-1,0);
    INCR I FROM 1 TO .LINES DO
	BEGIN
        F_LITERAL(UPLIT(%CHAR(LF)),1);
	INCR I FROM .C_LNO TO .C_LOS-1 DO
	    BEGIN
	    CH$MOVE(SI_SIZE,C_SINFO[.I+1,ALL],C_SINFO[.I,ALL]);
	    C_SINFO[.I,SI_SCREEN_LINE] = .C_SINFO[.I,SI_SCREEN_LINE]-1;
	    END;
	C_LOS = .C_LOS - 1;
	SC_ZAP_SINFO(MAX(.C_LOS,0),23);
	END;
    SC_SCRREG();
    F_PUT();
    END
ELSE
    SC_ZAP_SINFO(MAX(.C_LNO,0),23);
END;
END
ELUDOM
