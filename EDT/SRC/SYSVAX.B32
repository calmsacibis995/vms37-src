MODULE SYSVAX(IDENT='02.02') =
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY: EDT version 2
!
! FUNCTIONAL DESCRIPTION:
!
!	This module contains system specific code for the VAX VMS
!	environmen
!
! ENVIRONMENT: User mode, sharable
!
! AUTHOR: Bob Kushlis, CREATION DATE: 22-MAR-1979
!
! MODIFIED BY:
!
! Bob Kushlis, 10-JUL-1979
!	Convert the case of the file names.
! John Sauter, 15-Mar-1982, 02.02
!	Add a flag to allow the timer to die when it is not wanted.
!--

BEGIN

LIBRARY	'SYS$LIBRARY:CLIMAC';
LIBRARY 'SYS$LIBRARY:STARLET';
LIBRARY 'EDT';

PSECTS


EXTERNAL
    E_I_NAME,
    E_I_LEN,
    E_O_NAME,
    E_O_LEN,
    E_C_NAME,
    E_C_LEN,
    E_RECOVER;

OWN
    COMLINE,			! Address of command line
    COMLEN,			! Length of command line
    COMBUF : VECTOR[80,BYTE];	! Command buffer

EXTERNAL ROUTINE
    C_MESSAGE,
    F_LITERAL,
    IO_WT,
    IO_WTU,
    IO_COM,
    TI_START_ECHO,
    TI_E_STRING,
    TI_ECHO,
    U_CVTCASE,
    SYS$CLI : ADDRESSING_MODE(GENERAL),
    LIB$GET_VM : ADDRESSING_MODE(GENERAL);

BUILTIN
    AP;

ROUTINE SKIP_BLANKS : NOVALUE =
WHILE .COMLEN GTR 0 AND CH$RCHAR(.COMLINE) EQL ' '
DO
    BEGIN
    COMLEN = .COMLEN-1;
    COMLINE = CH$PLUS(.COMLINE,1);
    END;


ROUTINE GET_FILE_NAME(NAME,LEN) : NOVALUE =
BEGIN
COMLINE = CH$PLUS(.COMLINE,1);
COMLEN = .COMLEN-1;
.NAME = .COMLINE;
WHILE .COMLEN GTR 0 AND 
      CH$RCHAR(.COMLINE) NEQ ' ' AND
      CH$RCHAR(.COMLINE) NEQ '/' DO
    BEGIN
    COMLINE = CH$PLUS(.COMLINE,1);
    COMLEN = .COMLEN-1;
    END;
.LEN = .COMLINE - ..NAME;
END;

ROUTINE GET_OPTION : NOVALUE =
BEGIN
LOCAL
    SWSTART,
    SWLEN;
COMLINE = CH$PLUS(.COMLINE,1);
COMLEN = .COMLEN - 1;
SWSTART = .COMLINE;
!
! Scan up to an option delimiter.
!
WHILE .COMLEN GTR 0 AND 
      CH$RCHAR(.COMLINE) NEQ '=' AND
      CH$RCHAR(.COMLINE) NEQ '/' AND
      CH$RCHAR(.COMLINE) NEQ ':' AND
      CH$RCHAR(.COMLINE) NEQ ' ' DO
    BEGIN
    COMLEN = .COMLEN -1;
    COMLINE = CH$PLUS(.COMLINE,1);
    END;
!
! See if switch was /OUTPUT
!
SWLEN = .COMLINE - .SWSTART;
IF .SWLEN GTR 0 AND .SWLEN LSS 7 AND
    CH$EQL(.SWLEN,.SWSTART,.SWLEN,UPLIT BYTE('OUTPUT'),' ') THEN
    GET_FILE_NAME(E_O_NAME,E_O_LEN)
!
! Maybe it's /COMMAND?
!
ELSE IF .SWLEN GTR 0 AND .SWLEN LSS 8 AND
    CH$EQL(.SWLEN,.SWSTART,.SWLEN,UPLIT BYTE('COMMAND'),' ') THEN
    GET_FILE_NAME(E_C_NAME,E_C_LEN)
!
! Or how about /RECOVER?
!
ELSE IF .SWLEN GTR 0 AND .SWLEN LSS 8 AND
    CH$EQL(.SWLEN,.SWSTART,.SWLEN,UPLIT BYTE('RECOVER'),' ') THEN
    E_RECOVER = 1
ELSE
    IO_WT(UPLIT(BYTE('Invalid switch specified')),24);
SKIP_BLANKS();
END;

GLOBAL ROUTINE SY_GET_COMMAND : NOVALUE =
BEGIN

OWN CLIGETCMD : $CLIREQDESC(RQTYPE=GETCMD);
!
! Call the CLI to get the command line descriptor
!
SYS$CLI(CLIGETCMD);
!
! Copy the descriptor
!
COMLINE = .CLIGETCMD[CLI$L_RQVALU];
COMLEN = .CLIGETCMD[CLI$W_RQSIZE];
!
! Skip past the program name to the first blank
!
WHILE .COMLEN GTR 0 AND CH$RCHAR(.COMLINE) NEQ ' '
DO
    BEGIN
    COMLEN = .COMLEN-1;
    COMLINE = CH$PLUS(.COMLINE,1);
    END;
!
! Now skip past the blanks
!
!
SKIP_BLANKS();
! Is there anything left on the command line?
!
IF .COMLEN EQL 0 THEN
    !
    ! No, we'd better read a command line from the terminal
    !
    BEGIN
    COMLEN = 80;
    IO_COM(UPLIT(BYTE('$_File: ')),8,COMBUF,COMLEN);
    U_CVTCASE(COMBUF,.COMLEN);
    COMLINE = COMBUF;
    SKIP_BLANKS()
    END;
!
! Now, look for the input file spec
!
IF .COMLEN EQL 0 THEN
    !
    ! No file specs
    !
    E_I_LEN = 0
ELSE
    !
    ! Get the input file spec
    !
    BEGIN
    E_I_NAME = .COMLINE;
    WHILE .COMLEN GTR 0 AND
	CH$RCHAR(.COMLINE) NEQ ' ' AND
	CH$RCHAR(.COMLINE) NEQ '/'
    DO
	BEGIN
	COMLINE = CH$PLUS(.COMLINE,1);
	COMLEN = .COMLEN-1;
	END;
    E_I_LEN = .COMLINE - .E_I_NAME;
    END;
!
! Default the output file to same as the input file
!
E_O_NAME = .E_I_NAME;
E_O_LEN = .E_I_LEN;
!
! Process any command options.
!
WHILE .COMLEN NEQ 0 AND CH$RCHAR(.COMLINE) EQL '/' DO GET_OPTION();
!
! This should be the end of the line.
!
SKIP_BLANKS();
IF .COMLEN NEQ 0 THEN
    IO_WT(UPLIT(BYTE('Bad command line syntax')),23);
END;

! Define the powers of ten as longword constants, these are used both
! by name, and as a vector having the powers from 0 to 9.

GLOBAL
    LNO_ZERO	: INITIAL(0),

    LNO_BIG	: INITIAL(4294967295),
    LNO_0	: INITIAL(1),
    LNO_1	: INITIAL(10),
    LNO_2	: INITIAL(100),
    LNO_3	: INITIAL(1000),
    LNO_4	: INITIAL(10000),
    LNO_5	: INITIAL(100000),
    LNO_6	: INITIAL(1000000),
    LNO_7	: INITIAL(10000000),
    LNO_8	: INITIAL(100000000),
    LNO_9	: INITIAL(1000000000);

EXTERNAL ROUTINE
    SYS$EXIT : ADDRESSING_MODE(GENERAL);

OWN
    MESSAGE : VECTOR[12,BYTE] INITIAL(BYTE('Bug check   '));

GLOBAL ROUTINE BUG_CHECK(CHECK_NUM) =
BEGIN
   MESSAGE[10] = .CHECK_NUM / 10 MOD 10 + '0';
   MESSAGE[11] = .CHECK_NUM MOD 10 + '0';
   IO_WT(MESSAGE,12);
   SYS$EXIT(1)
END;

GLOBAL ROUTINE SY_EXIT(STATUS) =
SYS$EXIT(.STATUS);

!+
! Define the rabs to be used by EDT
!-

GLOBAL
    SY_PRIMARY_RAB : $RAB_DECL,
    SY_AUDIT_RAB : $RAB_DECL,
    SY_COM_RAB : $RAB_DECL,
    SY_ALT_RAB : $RAB_DECL;

!
! define the name and length of the help file spec.
!

GLOBAL BIND
    SY_H_NAME = UPLIT BYTE('SYS$HELP:EDTHELP.HLP');

GLOBAL LITERAL
    SY_H_LEN = 20;

GLOBAL ROUTINE SY_DATE(LEN,BUFFER) : NOVALUE =
BEGIN
EXTERNAL ROUTINE
    SYS$ASCTIM : ADDRESSING_MODE(GENERAL);
SYS$ASCTIM(0,LEN,0,0);
END;

GLOBAL ROUTINE SYS_GET_MEM(SIZE,ADDRESS) : NOVALUE =
LIB$GET_VM(.SIZE,.ADDRESS);

OWN
    DEL_TIME : VECTOR[2] INITIAL(-5000000,-1),
    TIMER_RUNNING : INITIAL (0),
    WORKCOUNT;

BIND
    WORKING = UPLIT BYTE('			Working');

ROUTINE WORKAST : NOVALUE =
BEGIN
IF (.TIMER_RUNNING) THEN BEGIN
WORKCOUNT = .WORKCOUNT + 1;
IF .WORKCOUNT THEN
    BEGIN
    TI_START_ECHO();
    TI_E_STRING(WORKING,10);
    END
ELSE
    TI_START_ECHO();
$SETIMR(DAYTIM=DEL_TIME,ASTADR=WORKAST);
END; END;

GLOBAL ROUTINE SYS_WORK : NOVALUE =
BEGIN TIMER_RUNNING = 1; WORKCOUNT = 0;
$SETIMR(DAYTIM=DEL_TIME,ASTADR=WORKAST);
END;

GLOBAL ROUTINE SYS_EWORK : NOVALUE =
BEGIN TIMER_RUNNING = 0; 
$CANTIM(); END;

GLOBAL ROUTINE SY_GET_MESS(MESS_NUM) : NOVALUE =
BEGIN
LOCAL
    MSGBUF : BLOCK[CH$ALLOCATION(80)],
    MSGDESC : VECTOR[2],
    MSGLEN;

MSGDESC[0] = 80;
MSGDESC[1] = MSGBUF;
$GETMSG(MSGID=.MESS_NUM,MSGLEN=MSGLEN,BUFADR=MSGDESC,FLAGS=1);
F_LITERAL(MSGBUF,.MSGLEN<0,16>);
END;
END
ELUDOM
