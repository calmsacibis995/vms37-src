MODULE EDTCTRL(IDENT='02.11',MAIN=EDT) =
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY: EDT Version 2
!
! FUNCTIONAL DESCRIPTION:
!
!	This module is the main controller for the EDT text editor.
!	The entry point to EDT is contained in this module.  On entry,
!	Initialization processing is called, then the command file, if
!	any is executed.  When it has finished, either line or change
!	mode processing is initiated.  All communication between the
!	two modes must go through this module.
!	
!
! ENVIRONMENT: Who knows?
!
! AUTHOR: Bob Kushlis, CREATION DATE:  6-AUG-1979
!
! MODIFIED BY:
!
! T. Mitchell,  21-JUL-80,  01
!	Keypad translation table initialization added to EXEC_COMMANDS;
!	special case test forbidding definition of CONTROL K removed
!	from E_BAD_KEY.
!
! D. Szymanski,  27-AUG-80, 02
!	Version number changed to V2.00-2.
!
! D. Szymanski, 27-OCT-80, 03
!	Version number changed to V2.00-3.
!
! D. Szymanski, 09-DEC-80, 04
!	Version number changed to V2.00-4.
!
! J. Sauter, 08-Jun-1981, 05
!	Version number changed to V2.00-5, PSECT restored for PDP-11.
!
! J. Sauter, 10-Aug-1981, 06
!	Version number changed to V2.00-6.
!
! J. Sauter, 29-Sep-1981, 07
!	Version number changed to V2.00-7.
!
! J. Sauter, 02-Nov-1981, 08
!	Version number changed to V2.00-8.
!
! J. Sauter, 15-Dec-1981, 09
!	Version number changed to V2.00-9.
!
! J.Sauter, 29-Dec-1981, 10
!	Version number changed to V2.00-10.
!
! J.Sauter, 15-Mar-1982, 11
!	Version number changed to V2.00-11.
!--

BEGIN

! Require files

LIBRARY 'EDT';

! Disable to PSECT declaration if this is BLISS16 because
! it defines the start address in a non existant PSECT if we do.

!%IF %BLISS(BLISS32) %THEN PSECTS %FI
PSECTS

FORWARD ROUTINE
    EXEC_COMMANDS:	NOVALUE,
    E_S_AUDIT:		NOVALUE,
    EDT:		NOVALUE,
    E_PUT_AUDIT:	NOVALUE,
    E_BAD_KEY,
    E_K_CLR,
    E_K_DEF,
    HLP_COM:		NOVALUE,
    H_CHANGE:		NOVALUE,
    E_M_CALL:		NOVALUE,
    E_EXT:		NOVALUE,
    E_MESSAGE,
    X_NO_OPEN:		NOVALUE;

EXTERNAL ROUTINE
    IF_INIT,
    IF_FINAL,
    C_MODE,
    C_BEEP,
    F_PUT_MESS,
    SY_GET_MESS,
    F_PUT,
    X_COM,
    X_PRINT,
    IO_OWF,
    IO_COM,
    IO_WT,
    IO_OO,
    IO_OOD,
    IO_OA,
    IO_CLO,
    IO_OI,
    IO_OID,
    IO_OT,
    IO_GAT,
    IO_AUDIT,
    IO_PUT,
    IO_FLU,
    IO_ERR,
    IO_NAM,
    INP_GET_LINE,
    P_COM,
    SY_GET_COMMAND,
    SY_EXIT,
    SYS_GET_MEM,
    U_LETDIG,
    H_LINE,
    WF_TOP,
    WF_R_CURRENT,
    C_DEFKEYS:		NOVALUE,
    WF_OPEN_BUFFER;

EXTERNAL
    E_T_TYPE,			! Type of terminal
    C_TRAN,			! Translate table init flag
    C_BUF,			! Command line buffer
    C_POINT,			! Pointer into command line buffer
    C_END,			! End of current command
    C_LEN,			! Length of current command
    C_EXIT,
    E_C_NAME,			! Command file name
    E_C_LEN,			! Command file name length
    E_COMMAND,			! Command file indicator
    E_J_NAME,			! Name of journal file
    E_J_LEN,			! length of journal file name
    E_JOURNAL,			! journal indicator
    E_MODE,			! Current editing mode
    E_DEF_MODE,			! Default editing mode
    E_O_NAME,			! Output file name
    E_O_LEN,			! Output file name length
    E_RECOVER,			! Are we in recovery mode?
    E_EXITED,			! Did we exit with the last command?
    E_AUD_IFI,			! The IFI for the audit trail file
    E_SAVE_COUNT,		! No of records to batch before flushing
    E_MACRO,			! Current macro buffer pointer
    E_TBCB,			! Current tbcb
    E_CC,			! Control C trap
    E_TXT,			! Text was written to screen
    E_SCRCHG,			! screen changed
    E_INP_COUNT,		! Count of records since last flush
    IO_STS,			! Status of I/O operation
    SY_PRIMARY_RAB,		! Primary input file rab
    SY_AUDIT_RAB,		! Audit trail file rab
    SY_COM_RAB,			! Command file rab
    E_I_SOURCE,			! Source of input commands
    IO_WF_RAB,			! Work file rab
    TRAN_TAB:	VECTOR,		! The keypad translation table
    VT52_TAB:	VECTOR,		! default keys for vt52
    VT100_TAB:	VECTOR,		! default keys for vt100
!   X_LOOP,			! Loop nesting level
    P_STACK;			! Parser semantic stack

EXTERNAL LITERAL
    IO_FNF;

BIND 
    PROMPT = UPLIT BYTE(13,10,'*');

GLOBAL BIND
    E_VERSION = UPLIT BYTE('V2.00-11  ');

%IF %BLISS(BLISS32) %THEN

    BIND 
        AUDIT_NAME = UPLIT(%STRING('.JOU')),
        COM_DEF = UPLIT(%STRING('.EDT'));
        
    LITERAL 
        AUDIT_NAME_LEN = 4,
        DEF_LEN = 4;

%ELSE %IF %BLISS(BLISS16) %THEN

    BIND 
        AUDIT_NAME = UPLIT(%STRING('.JOU')),
        COM_DEF = UPLIT(%STRING('SY:.EDT'));

    LITERAL 
        AUDIT_NAME_LEN = 4,
        DEF_LEN = 7;

    EXTERNAL ROUTINE  ! The overlay load routines.
        L_CHANGE,
        L_LINE;
%FI %FI

GLOBAL ROUTINE EXEC_COMMANDS(SOURCE) : NOVALUE =
    BEGIN
    LABEL
	COM_LOOP;
    LOCAL
	TBLLEN,
	SAVE_SOURCE,
	SAVE_RECOVER;

    TBLLEN = 202;
    SAVE_SOURCE = .E_I_SOURCE;
    E_I_SOURCE = .SOURCE;
    SAVE_RECOVER = .E_RECOVER;
    C_POINT = C_BUF;
    CH$WCHAR('!',C_BUF);
    COM_LOOP: BEGIN
    WHILE NOT .E_EXITED AND .E_RECOVER EQL .SAVE_RECOVER DO
	IF .E_MODE EQL CHANGE_MODE THEN
	    !
	    ! We are in change mode, go into the change mode processor.
	    !
	    BEGIN
	    %IF %BLISS(BLISS16) %THEN
		L_CHANGE();	! Make sure change mode is in memory.
	    %FI
    	    !
    	    ! Init the keypad translation table if necessary.
    	    !
	    IF NOT .C_TRAN
	    THEN
    		SELECTONE .E_T_TYPE OF
    		    SET
    		    [TERM_VT52]:  C_DEFKEYS(VT52_TAB, TBLLEN, 1);
    		    [TERM_VT100]: C_DEFKEYS(VT100_TAB, TBLLEN, 1);
    		    TES;
	    C_MODE();
	    E_MODE = LINE_MODE;
	    END
	ELSE
	    BEGIN
	    %IF %BLISS(BLISS16) %THEN
		L_LINE();	! Make sure line mode is in memory.
	    %FI
	    !
	    ! See if we must read a line.
	    !
	    IF CH$RCHAR(.C_POINT) EQL %C'!' THEN
		BEGIN
		LOCAL
		    EOF_COUNT;
		EOF_COUNT = 0;
		WHILE INP_GET_LINE(PROMPT,3) NEQ 0 DO
		    IF (EOF_COUNT = .EOF_COUNT + 1) EQL 3 THEN
			LEAVE COM_LOOP;
		END;
	    !
	    ! Parse and execute the command. (Unless it is a comment)
	    !
	    IF .C_LEN EQL 0 OR CH$RCHAR(C_BUF) NEQ %C'!' THEN
		IF P_COM() THEN X_COM(P_STACK) ELSE E_TXT = .E_TXT + 1;
	    !
	    ! Check for Control-C trap.
	    !
	    IF .E_CC NEQ 0 THEN
		BEGIN
		E_CC = 0;
		IF .E_I_SOURCE NEQ INP_TERM THEN EXITLOOP;
		END;
	    END;
        END; ! com_loop
    E_I_SOURCE = .SAVE_SOURCE;
    END;

GLOBAL ROUTINE E_S_AUDIT : NOVALUE =
    BEGIN
    IO_CLO(.E_AUD_IFI,SY_COM_RAB);
    IF .E_JOURNAL EQL 1 THEN
	E_AUD_IFI = IO_OA(SY_AUDIT_RAB,AUDIT_NAME,AUDIT_NAME_LEN,
	    .E_O_NAME,.E_O_LEN)
    ELSE IF .E_JOURNAL EQL 2 THEN
	E_AUD_IFI = IO_OA(SY_AUDIT_RAB,.E_J_NAME,.E_J_LEN,
	    AUDIT_NAME,AUDIT_NAME_LEN);
    E_RECOVER = 0;
    END;

GLOBAL ROUTINE EDT : NOVALUE =
    BEGIN
    LOCAL
	IFI;
    E_EXITED = 0;
    !
    ! Do the initial processing.
    !
    IF_INIT();
    !
    ! Try and open the command file.
    !
    IF .E_COMMAND NEQ 0 THEN
	BEGIN
	IFI = IO_OID(SY_COM_RAB,.E_C_NAME,.E_C_LEN,COM_DEF,DEF_LEN);
	IF .IFI NEQ 0 THEN
	    BEGIN
	    EXEC_COMMANDS(INP_FILE);
	    IO_CLO(.IFI,SY_COM_RAB);
	    END
	ELSE
	    IF .E_COMMAND NEQ 1 THEN
		BEGIN
		X_NO_OPEN(IF .IO_STS EQL IO_FNF THEN ERR_COMFILNEX ELSE ERR_COMFILNOP);
		SY_EXIT(ERR_EDITORABO);
		END;
	END;
    !
    ! Use the default mode setting.
    !
    E_MODE = .E_DEF_MODE;
    !
    ! If recover was specified, execute the recovery file.
    !
    IF .E_RECOVER THEN
	BEGIN
	IF .E_JOURNAL EQL 2 THEN
	    E_AUD_IFI = IO_OID(SY_COM_RAB,.E_J_NAME,.E_J_LEN,AUDIT_NAME,AUDIT_NAME_LEN)
	ELSE
	    E_AUD_IFI = IO_OID(SY_COM_RAB,AUDIT_NAME,AUDIT_NAME_LEN,.E_O_NAME,.E_O_LEN);
	IF .E_AUD_IFI NEQ 0 THEN
	    BEGIN
	    EXEC_COMMANDS(INP_FILE);
	    IF .E_RECOVER THEN E_S_AUDIT();
	    END
	ELSE
	    BEGIN
	    X_NO_OPEN(ERR_NOJNLFIL);
	    SY_EXIT(ERR_EDITORABO);
	    END;
	END
    ELSE
	!
	! Open the audit trail file.
	!
	IF .E_JOURNAL EQL 1 THEN
	    E_AUD_IFI = IO_OOD(SY_AUDIT_RAB,AUDIT_NAME,AUDIT_NAME_LEN,
		    .E_O_NAME,.E_O_LEN,0)
	ELSE IF .E_JOURNAL EQL 2 THEN
	    E_AUD_IFI = IO_OOD(SY_AUDIT_RAB,.E_J_NAME,.E_J_LEN,
		    AUDIT_NAME,AUDIT_NAME_LEN,0);
    !
    ! Make sure the audit file was opened.
    !
    IF .E_AUD_IFI EQL 0 AND .E_JOURNAL NEQ 0 THEN
	BEGIN
	X_NO_OPEN(ERR_NOJNLFIL);
	SY_EXIT(ERR_EDITORABO);
	END
    ELSE
	IO_AUDIT();
    !
    ! If we are in line mode, then print the current line.
    !
    IF .E_DEF_MODE EQL LINE_MODE THEN 
	BEGIN
	%IF %BLISS(BLISS16) %THEN L_LINE(); %FI
	X_PRINT();
	END;
    !
    ! And execute the main stream of commands.
    !
    EXEC_COMMANDS(INP_TERM);
    !
    ! Do the finalization processing.
    !
    IF_FINAL();
    END;

GLOBAL ROUTINE E_PUT_AUDIT(LINE,LEN) : NOVALUE =
    BEGIN
    IF .E_JOURNAL EQL 0 THEN RETURN;
    IO_PUT(SY_AUDIT_RAB,.LINE,.LEN);
    IF .E_INP_COUNT EQL .E_SAVE_COUNT THEN
	BEGIN
	IO_FLU(SY_AUDIT_RAB);
	E_INP_COUNT = 0;
	END;
    E_INP_COUNT = .E_INP_COUNT + 1
    END;

GLOBAL ROUTINE E_BAD_KEY(KEY) =
    BEGIN
    .KEY LSSU 256 OR .KEY GTRU 457
    END;


GLOBAL ROUTINE E_K_CLR(KEY) =
    BEGIN
    LOCAL
	LEN;
    IF E_BAD_KEY(.KEY) 
    THEN
	RETURN 0;
    TRAN_TAB[.KEY-256] = 0 ;
    RETURN 1;
    END;
    


GLOBAL ROUTINE E_K_DEF(KEY,STRING,LEN) =
    BEGIN
    LOCAL
	KEY_ADDR,
	KEY_LEN;
    IF E_BAD_KEY(.KEY) THEN
	RETURN 0;
    IF NOT E_K_CLR(.KEY) THEN
	RETURN 0;
    KEY_LEN = .LEN + 1;
    IF NOT SYS_GET_MEM(KEY_LEN,KEY_ADDR) THEN RETURN 0;
    CH$MOVE(.LEN,.STRING,CH$PTR(.KEY_ADDR,1));
    CH$WCHAR(.LEN,.KEY_ADDR);
    TRAN_TAB[.KEY-256] = .KEY_ADDR;
    RETURN 1
    END;

!
! These routines link to the help routine from the line and change mode
! overlay segents.
!
GLOBAL ROUTINE HLP_COM(S,L,A) : NOVALUE =
    BEGIN
    H_LINE(.S,.L,.A); 		! Call the help processor.
    %IF %BLISS(BLISS16) %THEN
	L_LINE();	  	! Force load the line mode processor.
    %FI
    END;


GLOBAL ROUTINE H_CHANGE(S,L,A) : NOVALUE =
    BEGIN
    H_LINE(.S,.L,.A); 		! Call the help processor.
    %IF %BLISS(BLISS16) %THEN
	L_CHANGE(); 		! Force a load of the change mode overlay.
    %FI
    END;

GLOBAL ROUTINE E_M_CALL(MAC) : NOVALUE =
    BEGIN
    LOCAL
	SAVE_LOOP,
	SAVE_TBCB,
	SAVE_MACRO;
    SAVE_TBCB = .E_TBCB;
    E_TBCB = .MAC;
    WF_TOP();
    E_TBCB = .SAVE_TBCB;
    WF_R_CURRENT();
    SAVE_MACRO = .E_MACRO;
    E_MACRO = .MAC;
    !SAVE_LOOP = .X_LOOP;
    EXEC_COMMANDS(INP_MACRO);
    %IF %BLISS(BLISS16) %THEN L_LINE(); %FI
    E_MACRO = .SAVE_MACRO;
    !X_LOOP = .SAVE_LOOP;
    END;

GLOBAL ROUTINE E_EXT : NOVALUE =
    BEGIN
    LOCAL
	LEN;
    CH$WCHAR('!',.C_END);
    E_TXT = E_SCRCHG = 0;

    %IF %BLISS(BLISS16) %THEN L_LINE(); %FI

    E_MODE = LINE_MODE;
    DO IF P_COM() THEN
	   X_COM(P_STACK)
       ELSE
	   E_TXT = .E_TXT + 1
    UNTIL CH$RCHAR(.C_POINT) EQL %C'!' OR .E_MODE EQL CHANGE_MODE;

    IF .E_TXT NEQ 0 THEN
	BEGIN
	IF .E_RECOVER EQL 0 THEN
	    IO_COM(UPLIT(%STRING(%CHAR(13,10),'Press return to continue ')),27,
		   C_BUF,LEN,255);
	E_SCRCHG = .E_SCRCHG+1;
	END;
    IF .E_EXITED NEQ 0 THEN C_EXIT = 1;

    %IF %BLISS(BLISS16) %THEN L_CHANGE(); %FI
    E_MODE = CHANGE_MODE;
    END;

GLOBAL ROUTINE E_MESSAGE(MESS_NUM) =
    BEGIN
    IF .E_MODE EQL CHANGE_MODE THEN
	C_BEEP(.MESS_NUM)
    ELSE
	F_PUT_MESS(.MESS_NUM)
    END;

GLOBAL ROUTINE X_NO_OPEN(MESS) : NOVALUE =
    BEGIN
    F_PUT_MESS(.MESS);
    SY_GET_MESS(ERR_FILNAM);
    IO_NAM();
    F_PUT();
    IO_ERR();
    E_TXT = 1;
    END;


END
ELUDOM
