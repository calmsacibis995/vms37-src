	.TITLE	INITADP
	.IDENT	'V03-000'
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
; Facility: System bootstrapping and initialization
;
; Abstract: This module contains initialization routines that are loaded
;	     during system initialization (rather than linked into the system).
;
; Environment: Mode = KERNEL, Executing on INTERRUPT stack, IPL=31
;
; Author:  Trudy C. Matthews		Creation date: 22-Jan-1981
;
; Modification history:
;
;	V02-014	KTA0084		Kerbey T. Altmann	22-Feb-1982
;		Finish up CI support.
;
;	V02-013	KTA0070		Kerbey T. Altmann	27-Jan-1982
;		Refine KTA0055 for timing glitch.
;
;	V02-012	KTA0055		Kerbey T. Altmann	28-Dec-1981
;		Add support for UNIBUS memory on any UBA.
;
;	V02-011	BLS0118		Benn Schreiber		07-Dec-1981
;		Correct call to INI$MPMADP.  Point MMG$GL_SBICONF and
;		EXE$GL_CONFREG at SBICONF and CONFREG so that INI$MPMADP
;		can find them.
;
;	V02-010	KTA0050		Kerbey T. Altmann	01-Dec-1981
;		Remove routine INI$MPMADP to SYSLOA780 since it is
;		called from SYSGEN also.
;
;	V02-009	RLR0003		Robert L. Rappaport	30-Nov-1981
;		Added an ASSUME statement that will cause an assembly
;		error if the length of a UBA ADaPter block is not a
;		multiple of 4, so that the 780 interrupt vectors are
;		always located on a longword boundary.
;
;	V02-008	RLR0002		Robert L. Rappaport	12-Nov-1981
;		Eliminate reference to old ADP$W_MRBITMAP and code to
;		initialize it.
;
;	V02-007	RLR0001		Robert L. Rappaport	30-Oct-1981
;		Initialize new fields in ADP (during INI$UBADP) having
;		to do with new UBA map register allocation scheme.
;
;	V02-006	TCM0004		Trudy C. Matthews	6-Aug-1981
;		Change fixed memory type for 11/730 from 16K non-interleaved
;		to 64K non-interleaved.
;
;	V02-005	TCM0003		Trudy C. Matthews	29-Jul-1981
;		Change all "7ZZ"s to "730"s.
;
;	V02-004	TCM0002		Trudy C. Matthews	27-Jul-1981
;		Remember to use "G^" when referencing global symbol in
;		multi-port memory ADP initialization routine.
;
;	V02-003	TCM0001		Trudy C. Matthews	6-Jul-1981
;		Add adapter type codes for new 11/780 memory controller.
;
;	V02-002	KTA0024		Kerbey T. Altmann	20-Jun-1981
;		Add the beginnings of support for the CI780 port.
;
;	V02-001	CAS0016		C. A. Samuelson		20-Apr-1981
;		Add comment connecting 11/780 UBA interrupt dispatch
;		code to code in Machine Check 780.
;
;--

;
; MACRO LIBRARY CALLS
;
	$ADPDEF				; Define ADP offsets.
	$CRBDEF				; Define CRB offsets.
	$DYNDEF				; Define data structure type codes.
	$IDBDEF				; Define interrupt dispatcher offsets.
	$IO750DEF			; Define 11/750 I/O space.
	$IO780DEF			; Define 11/780 I/O space.
	$IO730DEF			; Define 11/730 I/O space.
	$MCHKDEF			; Define machine check masks.
	$MPMDEF				; Define multi-port memory.
	$NDTDEF				; Define nexus device types.
	$PRDEF				; Define IPR numbers.
	$PTEDEF				; Define Page Table Entry bits.
	$RPBDEF				; Define Restart Parameter Block fields.
	$UBADEF				; Define UBA register offsets.
	$UBIDEF				; Define UNIBUS interconnect
					;  register offsets.
	$VADEF				; Define virtual address fields.
	$VECDEF				; Define vec offsets.

	.SBTTL	Macros to describe nexus configurations
;
;	The macros FLOAT_NEXUS and FIXED_NEXUS add one or more entries to a
;	nexus descriptor table.  Each entry is of the form:
;		+-------------------------------+
;		|   PFN of nexus I/O space	|
;		+-----------------------+-------+
;					| type	|
;					+-------+
;	type = 0 -> floating nexus
;	type = non-zero -> fixed nexus; type = fixed adapter type
;
; Macro FLOAT_NEXUS.
; INPUTS:
;	PHYSADR -- physical address of 1 or more contiguous floating nexus
;		   slots
;	NUMNEX -- number of contiguous floating nexuses, default = 1
;	PERNEX -- amount of address space per nexus (does not have to be
;		  specified if NUMNEX = 1)
;
	.MACRO	FLOAT_NEXUS	PHYSADR,NUMNEX=1,PERNEX=0
	PA = PHYSADR
	.REPEAT	NUMNEX		; For each nexus...
	.LONG	<PA/^X200>	; Store PFN.
	.BYTE	0		; Store floating nexus type.
	PA = PA + PERNEX	; Increment to physical address of next nexus.
	.ENDR
	.ENDM	FLOAT_NEXUS

;
; Macro FIXED_NEXUS.
;
; INPUTS:
;	PHYSADR - physical address of 1 or more contiguous fixed nexus slots
;	PERNEX - amount of address space per nexus
;	NEXUSTYPES - a list of fixed nexus types, enclosed in <>
;
	.MACRO	FIXED_NEXUS	PHYSADR,PERNEX=0,NEXUSTYPES
	PA = PHYSADR
	.IRP	TYPECODE,NEXUSTYPES	; For each fixed nexus type...
	.LONG	<PA/^X200>		; Store PFN.
	.BYTE	TYPECODE		; Store fixed nexus type.
	PA = PA + PERNEX		; Increment to address of next nexus.
	.ENDR
	.ENDM	FIXED_NEXUS

;
; Macro END_NEXUSDESC.
;
	.MACRO	END_NEXUSDESC
	.LONG	0			; PFN=0 -> end of nexus descriptors.
	.ENDM	END_NEXUSDESC

	.SBTTL	ADAPDESC - macro to describe adapters
;++
; Macro ADAPDESC.
;	Create NUM_PAGES, INIT_ROUTINES, and ADAPTERS arrays.
; INPUTS:
;	ADPTYPES - List of specific nexus device (adapter) types that conform
;		   to the general type described by the remainder of the input
;		   arguments.
;	NUMPAGES - The number of pages required for the adapter's register
;		   space.
;	INITRTN - The name of an adapter-specific initialization routine.
;
; Note: Each invocation of this macro corresponds to 1 "general" adapter type.
;	Each element in an ADPTYPES list corresponds to 1 "specific" type.
;--
	.MACRO	ADAPDESC	ADPTYPES,NUMPAGES,INITRTN
	.SAVE

	.PSECT	INIT$DATA2		; Add an entry to the NUM_PAGES array.
	ASSUME	. EQ <GENERAL_TYPE*2>	; One word for each general adp type.
	.WORD	NUMPAGES		; Store number of pages to be mapped.

	.PSECT	INIT$DATA3		; Add entry to the INIT_ROUTINES array.
	ASSUME	. EQ <GENERAL_TYPE*4>	; One longword for each general type.
	.IF NOT_BLANK INITRTN		; If ADP init routine is specified...
	.LONG	<INITRTN-.>		; Add self-relative pointer to routine.
	.IF_FALSE			; Else...
	.LONG	0			; Add a 0 entry to INIT_ROUTINES.
	.ENDC
;
; Create two byte arrays that allow a set of specific type codes to be mapped
; onto one general type code.  The general type can then be used to index into
; the NUM_PAGES and INIT_ROUTINES arrays.
; ******* Psects INIT$DATA0 and INIT$DATA1 must be contiguous **********
;
	.IRP	ADPTYPE,ADPTYPES	; Repeat for each unique adp type...

	.PSECT	INIT$DATA0
	ASSUME	. EQ <SPECIFIC_TYPE*1>	; One byte for each specific adp type.
	.BYTE	ADPTYPE			; Add an entry to ADAPTERS array.

	.PSECT	INIT$DATA1
	ASSUME	. EQ <SPECIFIC_TYPE*1>	; One byte for each specific adp type.
	.BYTE	GENERAL_TYPE		; Add to the array of general types.

SPECIFIC_TYPE = SPECIFIC_TYPE +1
	.ENDR

GENERAL_TYPE = GENERAL_TYPE + 1
ADPTYPCNT = SPECIFIC_TYPE
	.RESTORE
	.ENDM	ADAPDESC

	.SBTTL	Adapter-specific data structures
;
; Put a symbol for arrays built by macros in the correct psects.
;
	.PSECT	INIT$DATA0	RD,WRT,NOEXE
ADAPTERS:				; Build adapter type code arrays here.

	.PSECT	INIT$DATA2	RD,WRT,NOEXE
NUM_PAGES:				; Build "number of pages to map" array.

	.PSECT	INIT$DATA3	RD,WRT,NOEXE
INIT_ROUTINES:				; Build "address of init routine" array.

;
; To add a new adapter type:
;	1) Add a new ADAPDESC macro invocation to the end of this list.
;
	.PSECT	INIT$DATA	RD,WRT,NOEXE

SPECIFIC_TYPE = 0
GENERAL_TYPE = 0

	ADAPDESC -		; Memory. ** MUST BE 1ST IN DESCRIPTOR LIST **
	ADPTYPES=<NDT$_MEM4NI,NDT$_MEM4I,NDT$_MEM16NI,NDT$_MEM16I, -
		NDT$_MEM64NIL,NDT$_MEM64EIL,NDT$_MEM64NIU,NDT$_MEM64EIU, -
		NDT$_MEM64I> -
		NUMPAGES=1

	ADAPDESC -		; MASSbus.
		ADPTYPES=NDT$_MB, -
		NUMPAGES=8, -
		INITRTN=INI$MBADP

	ADAPDESC -		; UNIbus.
		ADPTYPES=<NDT$_UB0,NDT$_UB1,NDT$_UB2,NDT$_UB3>, -
		NUMPAGES=8, -
		INITRTN=INI$UBSPACE

	ADAPDESC -		; Multi-port memory.
		ADPTYPES=<NDT$_MPM0,NDT$_MPM1,NDT$_MPM2,NDT$_MPM3>, -
		NUMPAGES=1, -
		INITRTN=INI_MPMADP

	ADAPDESC -		; DR32.
		ADPTYPES=NDT$_DR32, -
		NUMPAGES=4, -
		INITRTN=INI$DRADP

	ADAPDESC -		; CI780
		ADPTYPES=NDT$_CI, -
		NUMPAGES=8, -
		INITRTN=INI$CIADP

;
; TABLES OF ADAPTER-DEPENDENT INFORMATION
;
; THE TABLE OFFSETS ARE:
;
	$DEFINI	ADPTAB

ADPTAB_CRBTEMP:	.BLKL	1		; ADDR OF CRB TEMPLATE
ADPTAB_IDBUNITS:.BLKB	1		; # UNITS TO SET IN IDB
ADPTAB_ADPLEN:	.BLKW	1		; LENGTH OF ADP
ADPTAB_ATYPE:	.BLKW	1		; ADP TYPE

	$DEFEND	ADPTAB

;
; TABLES THEMSELVES:
;

MBATAB:					; TABLE OF MBA CONSTANTS
	.LONG	<MBA_CRB-.>		; MBA CRB TEMPLATE
	.BYTE	8			; # UNITS IN MBA IDB
	.WORD	ADP$C_MBAADPLEN		; # BYTES IN MBA ADP
	.WORD	AT$_MBA			; MBA ADAPTER TYPE

DRTAB:					; TABLE OF DR32 CONSTANTS
	.LONG	<DR_CRB-.>		; DR32 CRB TEMPLATE
	.BYTE	1			; # UNITS IN DR IDB
	.WORD	ADP$C_DRADPLEN		; # BYTES IN DR ADP
	.WORD	AT$_DR			; DR ADAPTER TYPE

CITAB:					; TABLE OF CI CONSTANTS
	.LONG	<CI_CRB-.>		; CI CRB TEMPLATE
	.BYTE	1			; # UNITS IN CI IDB
	.WORD	ADP$C_CIADPLEN		; # BYTES IN CI ADP
	.WORD	AT$_CI			; CI ADAPTER TYPE

;
; TEMPLATE TO FILL IN CRB FROM OFFSETS CRB$L_INTD TO <CRB$L_INTD
; +VEC$L_INITIAL>, INCLUSIVE.  THERE ARE SEPARATE TEMPLATES FOR THE MBA
; AND DR32 ADAPTERS.
;

MBA_CRB:				; MBA CRB TEMPLATE
	PUSHR	#^M<R2,R3,R4,R5>	; CRB$L_INTD
	JSB	@#MBA$INT 		;
	.LONG	0			; CRB$L_INTD+VEC$L_IDB
	.LONG	MBA$INITIAL 		; CRB$L_INTD+VEC$L_INITIAL
TEMPLATE_SIZE=.-MBA_CRB			; TEMPLATE SIZE

DR_CRB:					; DR32 CRB TEMPLATE
	PUSHR	#^M<R2,R3,R4,R5>	; CRB$L_INTD
	JSB	@#DR$INT 		;
	.LONG	0			; CRB$L_INTD+VEC$L_INTD
	.LONG	DR$INITIAL 		; CRB$L_INTD+VEC$L_INITIAL

CI_CRB:					; CI CRB TEMPLATE
	PUSHR	#^M<R2,R3,R4,R5>	; CRB$L_INTD
	JSB	@#CI$INT		;
	.LONG	0			; CRB$L_INTD+VEC$L_INTD
	.LONG	CI$INITIAL		; CRB$L_INTD+VEC$L_INITIAL

	.SBTTL	CPU-specific data structures
;
; To add a new CPU type:
;	1) Create a new nexus descriptor table, using FLOAT_NEXUS and
;	   FIXED_NEXUS macros.  Put an END_NEXUSDESC macro at the end.
;	2) Add another self-relative address field to CPU_NEXUSTABLE,
;	   pointing to newly created nexus descriptor table.
;
CPU_NEXUSTABLE:
	.LONG	NEXUSDESC_780 - .
	.LONG	NEXUSDESC_750 - .
	.LONG	NEXUSDESC_730 - .

;
; Describe all possible nexuses on an 11/780.
;
NEXUSDESC_780:
	FLOAT_NEXUS -
		PHYSADR=IO780$AL_IOBASE, -
		NUMNEX=IO780$AL_NNEX, -
		PERNEX=IO780$AL_PERNEX
	END_NEXUSDESC

;
; Describe all possible nexuses on an 11/750 (the first 10 have fixed adapter
; assignments).
;
NEXUSDESC_750:
	FIXED_NEXUS -
		PHYSADR=IO750$AL_IOBASE, -
		PERNEX=IO750$AL_PERNEX, -
		NEXUSTYPES=<NDT$_MEM16NI, -
			    NDT$_MPM0, -
			    NDT$_MPM1, -
			    NDT$_MPM2, -
			    NDT$_MB, -
			    NDT$_MB, -
			    NDT$_MB, -
			    NDT$_MB, -
			    NDT$_UB0, -
			    NDT$_UB1>
	FLOAT_NEXUS -
		PHYSADR=IO750$AL_IOBASE+<10*IO750$AL_PERNEX>, -
		NUMNEX=6, -
		PERNEX=IO750$AL_PERNEX
	END_NEXUSDESC

;
; Describe all nexuses on an 11/730 processor.
;
NEXUSDESC_730:
	FIXED_NEXUS -
		PHYSADR=IO730$AL_IOBASE, -
		NEXUSTYPES=NDT$_MEM64NIL
	FLOAT_NEXUS -
		PHYSADR=IO730$AL_IOBASE+<1*IO730$AL_PERNEX>, -
		NUMNEX=15, -
		PERNEX=IO730$AL_PERNEX
	END_NEXUSDESC
;
; CPU DEPENDENT DATA
;
CPU_ADPSIZE:				; # BYTES TO ALLOCATE FOR ADP:
	.WORD	ADP$C_UBAADPLEN+UBINTSZ+<NUMUBAVEC*4>
					;  11/780 REQUIRES ADP+UBA INT
					;  SERVICE+UB DEV VECTORS
	.WORD	ADP$C_UBAADPLEN		;  11/750 REQUIRES ADP ONLY
	.WORD	ADP$C_UBAADPLEN		;  11/730 REQUIRES ADP ONLY
					;  (NEXT CPU, TYPE=4)
;
; Nexus "descriptor" arrays -- these arrays hold the nexus-device type and
; virtual address of every adapter on the system.  The arrays, CONFREG and
; SBICONF, are allocated enough space to hold the maximum number of adapters
; that can be attached to any CPU.  When the code discovers how many adapters
; actually exist on the system, it will allocate space from non-paged pool
; and move a permanent copy of these arrays into that space.
;
MAXNEXUS = 16
CONFREG:				; Byte array of nexus-device type codes..
	.BLKB	MAXNEXUS
SBICONF:
	.BLKL	MAXNEXUS		; Longword array of VAs of adapter space.

	.SBTTL	Message strings

CR = 13
LF = 10
NOSPT:
	.ASCIZ	<CR><LF>/%EXECINIT-F-Insufficient SPT entries/<CR><LF>
BADUMR:
	.ASCIZ	<CR><LF>/%EXECINIT-F-UNIBUS memory does not start at 0/<CR><LF>

	.SBTTL	INI$IOMAP, Initialize and map nexuses
;++
; FUNCTIONAL DESCRIPTION:
;	This routine is executed only once, during system initialization.
;	It loops through all nexuses on the system, testing for
;	adapters.  When it finds an adapter, it maps its I/O space and
;	initializes it.
;
; INPUTS:
;	NONE
;
; OUTPUTS:
;	The arrays CONFREG (a byte array of nexus-device type codes, defined
;	by NDT$_ symbols) and SBICONF (a longword array of virtual addresses
;	that map adapter space) are initialized.  Pointers to these arrays are
;	stored in EXE$GL_CONFREG and MMG$GL_SBICONF.  The number of entries
;	in these two parallel arrays is stored in EXE$GL_NUMNEXUS.
;
;	Several locations in the RPB that describe the boot device are init'ed:
;	RPB$L_BOOTR1	- holds index into CONFREG and SBICONF for the boot
;			  adapter
;	RPB$L_ADPVIR	- holds VA of boot device adapter's register space
;	RPB$L_CSRVIR	- holds VA of boot device's register space
;--
	.PSECT	INIT$CODE	RD,NOWRT,EXE,QUAD
INI$IOMAP::
	PUSHR	#^M<R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10>
;
; Initialize mapping registers.
;
	MOVL	G^BOO$GL_SPTFREL,R2	; Get next available VPN.
	MOVL	G^MMG$GL_SPTBASE,R3	; Get base of System Page Table.
	MOVAL	(R3)[R2],R3		; Compute SVASPT.
	ASHL	#9,R2,R2		; Convert VPN to VA.
	BISL	#VA$M_SYSTEM,R2		; Set system bit.
;
; Get CPU-specific nexus descriptors.
;
	MOVZBL	G^EXE$GB_CPUTYPE,R0	; Get CPU type.
	MOVAL	W^CPU_NEXUSTABLE-4[R0],-; Address of self-relative pointer to
		R6			; nexus descriptor table.
	ADDL	(R6),R6			; Get address of table.

	CLRL	R4			; Init index into CONFREG and SBICONF.
	MOVL	G^EXE$GL_RPB,R9		; Get address of Restart Parameter Block.
	ASHL	#-9,RPB$L_ADPPHY(R9),R10; Get PFN of boot adapter space.
;
; Main loop.  Map and initialize all adapters on system.
;
; Register used in main loop:
;	R2/ VA of current adapter's I/O space
;	R3/ VA of system PTE used to map current adapter's I/O space
;	R4/ index into CONFREG and SBICONF
;	R5/ general adapter type; index into NUM_PAGES and INIT_ROUTINES
;	R6/ pointer into nexus descriptor table
;	R7/ nexus-device type (either fixed or from adapter config register)
;	R8/ PFN of current nexus I/O space
;	R9/ address of Restart Parameter Block
;	R10/PFN of boot adapter space
;
	MOVAL	W^SBICONF,@#MMG$GL_SBICONF ; Point to local copy for init routines
	MOVAL	W^CONFREG,@#EXE$GL_CONFREG ; ...
NXT_NEXUS:				; For each nexus...
	MOVL	(R6)+,R8		; Get PFN of nexus.
	BNEQ	TEST_NEXUS		; If PFN non-zero, go test the slot.
	BRW	CREATE_ARRAYS		; If 0, we've found all nexuses.
;
; Read configuration register to determine if anything is present at this
; nexus.
;
TEST_NEXUS:
	BISL3	#PTE$M_VALID!PTE$C_KW,-	; Temporarily associate VA in R2 with
		R8,(R3)			; PFN in R8 via SPTE in R3.
	$PRTCTINI B^10$, -		; Protect following code from non-
		#<MCHK$M_NEXM!MCHK$M_LOG>; existent memory machine checks.
	MOVL	(R2),R1			; Read adapter configuration register.
	$PRTCTEND 10$			; End of protected code.
	BLBS	R0,GET_TYPE		; Branch if no machine check occurred.
;
; No adapter present at this nexus.
;
	CLRB	W^CONFREG[R4]		; Store "unknown" type in CONFREG.
	CLRL	R5			; Use general memory type to map
					; one page of I/O space.
	INCL	R6			; Step past type code in nexus table.
	BRB	MAP_NEXUS		; Go map I/O space for this nexus.
;
; Execution continues here if adapter was present.
;
GET_TYPE:
	MOVZBL	(R6)+,R7		; Get nexus-device type from nexus table.
	BNEQ	GET_GEN_TYPE		; Branch if fixed slot.
	MOVZBL	R1,R7			; Floating slot.  Use type from
					; configuration register.
;
; Translate specific nexus device type code into general adapter type code.
;
GET_GEN_TYPE:
	MOVB	R7,W^CONFREG[R4]	; Save nexus-device type in CONFREG.
	LOCC	R7,#ADPTYPCNT,W^ADAPTERS; Find type in specific-type array.
					; R1 <- addr of type code (if found).
	BEQL	UNKNOWN_NEXUS		; Unrecognized type code.
	MOVZBL	ADPTYPCNT(R1),R5	; Use offset from specific-type array 
					; to get general type.

;
; Store boot parameters.
;
	CMPL	R8,R10			; Does PFN match boot adapter's PFN?
	BNEQ	MAP_NEXUS		; No; continue.
	MOVL	R2,RPB$L_ADPVIR(R9)	; Store VA of boot adapter space.
	MOVL	R4,RPB$L_BOOTR1(R9)	; Store boot adapter nexus number.
	EXTZV	#0,#13, -		; Get offset into UNIBUS I/O page.
		RPB$L_CSRPHY(R9),R1	; 
	MOVAB	<8*512>(R2)[R1], -	; Set VA of UNIBUS registers.
		RPB$L_CSRVIR(R9)	;


;
; R5/ general adapter type; index into "general" adapter arrays.
; For each adapter -
;	Map the # of pages specified in ADAPDESC macro
;	JSB to initialization routine specified in ADAPDESC macro
;
MAP_NEXUS:
	MOVL	R2,W^SBICONF[R4]	; Save VA of adapter space in SBICONF.
	MOVZWL	W^NUM_PAGES[R5],R1	; Get number of pages to map.
	BSBB	MAP_PAGES		; Map the I/O pages.
	MOVAL	W^INIT_ROUTINES[R5],R1	; Get address of initialization routine.
	TSTL	(R1)			; Initialization routine specified?
	BEQL	END_NEXUS		; Branch if none.
	JSB	@(R1)[R1]		; Call initialization routine.
END_NEXUS:
	INCL	R4			; Increment CONFREG and SBICONF index.
	BRW	NXT_NEXUS		; Go do next nexus.


;
; Unrecognized adapter type code.  Do not map any pages for this nexus.  Just
; clear the translation buffer of any temporary mapping set up for this nexus,
; and go to the next nexus.
;
UNKNOWN_NEXUS:
	INVALID	R2
	BRB	END_NEXUS

;
; Allocate the correct amount of space from non-paged pool and copy the
; CONFREG and SBICONF arrays into it.
;
CREATE_ARRAYS:
	MOVL	R4,G^EXE$GL_NUMNEXUS	; Store number of nexuses on system.
	MOVAL	12(R4)[R4],R1		; Allocate n bytes for CONFREG plus
					; 4n bytes for SBICONF + header
	JSB	G^INI$ALONONPAGED	; Get pool for CONFREG and SBICONF.
	CLRQ	(R2)+			; Clear out unused
	MOVW	R1,(R2)+		; Set in size
	MOVW	#<DYN$C_CONF@8>!DYN$C_INIT,(R2)+ ; Set type and subtype
	MOVAB	(R2),G^EXE$GL_CONFREG	; Store address of system CONFREG.
	MOVAB	(R2)[R4],G^MMG$GL_SBICONF ; Store address of system SBICONF.
	PUSHR	#^M<R2,R4>		; Save pool address and nexus count.
	MOVC3	R4,W^CONFREG,(R2)	; Copy CONFREG to pool.
	POPR	#^M<R2,R4>		; Retrieve pool address and nexus count.
	MULL3	#4,R4,R1		; Number of bytes in SBICONF.
	MOVC3	R1,W^SBICONF,(R2)[R4]	; Copy SBICONF to pool.

	POPR	#^M<R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10>
	RSB

	.SBTTL	MAP_PAGES
;++
; INPUTS:
;	R1/ Number of pages to map.
;	R2/ VA of page to map.
;	R3/ VA of system page table entry to be used.
;	R8/ PFN of page(s) to map.
;
; OUTPUTS:
;
;--
MAP_PAGES::
	BISL3	#<PTE$M_VALID!PTE$C_KW>,R8,(R3)+
					; Map a page.
	INCL	R8			; Next PFN.
	MOVAB	512(R2),R2		; Next VA.
	INCL	G^BOO$GL_SPTFREL	; Next free entry.
	CMPL	G^BOO$GL_SPTFREH, -	; Check for no more system page
		G^BOO$GL_SPTFREL	; table entries.
	BLEQ	ERROR_HALT		; Branch if out of SPTEs.
	SOBGTR	R1,MAP_PAGES		; Map another page.
	RSB				; All done.

ERROR_HALT:
	MOVAB	W^NOSPT,R1		; Set error message.
ERROR_HALT_1:
	CLRL	R11			; Indicate console terminal.
	JSB	G^EXE$OUTZSTRING 	; Output error message.
	HALT				; ***** FATAL ERROR *******

	.SBTTL	INI$UBSPACE
;++
;	Map UNIBUS space; initialize UNIBUS ADP.
;
; INPUTS:
;	R2 - VA of next free system page
;	R3 - VA of system page table entry to be used to map VA in R2
;	R4 - nexus identification number of this adapter
;
; OUTPUTS:
;	UNIBUS space is mapped.
;	INI$UBADP is called to build an ADP block and initialize UNIBUS
;	adapter hardware.
;
;--
INI$UBSPACE:
	EXTZV	#0,#2,W^CONFREG[R4],R8	; Get UBA number.
	ASHL	#9,R8,R8		; Position UB number.
	ASSUME	IO730$AL_UB0SP EQ IO750$AL_UB0SP
	CPUDISP	<MAP_UBIO_780, -	; Dispatch on CPU type.
		MAP_UBIO_750, -
		MAP_UBIO_730>
MAP_UBIO_780:
	ADDL	#<IO780$AL_UB0SP+^O760000/^X200>,R8
					; Get PFN of Ub I/O page.
	BRB	MAP_UBIO_END		; Join common code.
MAP_UBIO_750:
MAP_UBIO_730:
	SUBL3	R8,#<IO750$AL_UB0SP+^O760000/^X200>,R8
					; Get PFN of UB I/O page.
MAP_UBIO_END:				; End of CPU-specific code.
	MOVL	#16,R1			; Number of pages to map for UB space.
	BSBW	MAP_PAGES		; Map I/O pages.
;
; Call adapter initialization routine.
;
;	BSBW	INI$UBADP		; Init ADP block.
;	RSB

	.SBTTL	INI$UBADP - BUILD ADP AND INITIALIZE UBA
;+
; INI$UBADP ALLOCATES AND FILLS IN AN ADAPTER CONTROL BLOCK, INTERRUPT
; DISPATCHER AND CONNECTS THEM TO THE PROPER SCB VECTORS.  A CALL IS
; THEN MADE TO UBA$INITIAL TO INITIALIZE THE ADAPTER HARDWARE.
;
; INPUT:
;	R2 - VA of 1st page after UNIBUS space
;	R3 - VA of SPTE mapping (R2)
;	R4 - nexus identification number of this adapter
;	R8 - PFN of 1st page after UNIBUS space
;-
	NUMUBAVEC = 128			; ALLOW FOR 128 UNIBUS VECTORS

INI$UBADP::				;
	PUSHR	#^M<R0,R1,R2,R3,R4,R5,R6,R7,R8>	; SAVE R0-R8
;
; Allocate and initialize Adapter Control Block (ADP).
;
	MOVZBL	G^EXE$GB_CPUTYPE,R7	; GET CPU TYPE
	MOVZWL	W^CPU_ADPSIZE-2[R7],R1	; GET # BYTES TO ALLOCATE
					;  FOR ADP AND RELATED DATA
	JSB	G^INI$ALONONPAGED	; ALLOCATE SPACE FOR ADP
	MOVW	R1,ADP$W_SIZE(R2)	; SET SIZE INTO ADP BLOCK
	MOVB	#DYN$C_ADP, -		; AND SET TYPE OF BLOCK
		ADP$B_TYPE(R2)
	MOVW	#AT$_UBA, -		; SET TYPE OF ADAPTER
		ADP$W_ADPTYPE(R2)
	MOVL	W^SBICONF[R4], -	; SET VA OF CONFIGURATION REG
		ADP$L_CSR(R2)
	MOVW	R4,ADP$W_TR(R2)		; SET TR NUMBER FOR ADAPTER
	MOVAL	ADP$L_DPQFL(R2),R0	; ADDRESS OF DATA PATH WAIT QUEUE
	MOVL	R0,(R0)			; INIT QUEUE HEADER
	MOVL	R0,4(R0)		;
	MOVAL	ADP$L_MRQFL(R2),R0	; ADDRESS OF MAP WAIT QUEUE
	MOVL	R0,(R0)			; INIT QUEUE HEADER
	MOVL	R0,4(R0)		;
	CLRL	ADP$L_LINK(R2)		; ZAP ADAPTER CHAIN LINK
	BSBW	ADPLINK			; LINK ADP TO END OF LIST
;
; Initialize adapter interrupt vectors in System Control Block.
;
	MOVL	G^EXE$GL_SCB,R8		; GET SCB ADDRESS
	CPUDISP	<UBADP_780,-		; *DISPATCH ON CPU TYPE*
		UBADP_750,-		;
		UBADP_730>		;

UBADP_780:				; FOR VAX 11/780:

; Following ASSUME breaks if the ADP length is not a multiple of 4, thereby
;	causing the vectors to NOT be long word aligned.

	ASSUME	ADP$C_UBAADPLEN/4*4	EQ	ADP$C_UBAADPLEN

	MOVAB	ADP$C_UBAADPLEN+UBINTSZ(R2),R3	; LOCATE VECTORS
	MOVL	R3,ADP$L_VECTOR(R2)	; AND RECORD IN ADP
	MOVW	#^XFFFE,ADP$W_DPBITMAP(R2) ; MARK DATAPATHS 1-15 AVAILABLE
	MOVAB	-UBINTSZ(R3),R3		; BASE OF INTERRUPT CODE
	PUSHR	#^M<R0,R1,R2,R3,R4,R5>	; SAVE MOVC REGISTERS
	MOVC3	#UBINTSZ,W^UBAINTBASE,(R3)	; COPY INTERRUPT CODE
	POPR	#^M<R0,R1,R2,R3,R4,R5>	; RESTORE MOVC REGISTERS
	EXTZV	#0,#4,R4,R4		; Use low 4 bits of nexus number.
	MOVAL	^X100(R8)[R4],R0	; COMPUTE 1ST VECTOR ADDRESS
	MOVAB	UBAINT4+1(R3),(R0)	; STORE VECTOR FOR BR4
	MOVAB	UBAINT5+1(R3),64(R0)	; STORE VECTOR FOR BR5
	MOVAB	UBAINT6+1(R3),128(R0)	; STORE VECTOR FOR BR6
	MOVAB	UBAINT7+1(R3),192(R0)	; STORE VECTOR FOR BR7
	MOVL	ADP$L_CSR(R2),R0	; GET UBACSR ADDRESS
	ADDL	R0,UBAINT4REL(R3)	; ADD CSR VA
	ADDL	R0,UBAINT5REL(R3)	; TO EACH OF THE
	ADDL	R0,UBAINT6REL(R3)	; BICL INSTRUCTIONS
	ADDL	R0,UBAINT7REL(R3)	; IN THE INTERRUPT DISPATCHERS
	MOVL	R2,UBAINTADP(R3)	;SET ADDRESS OF ADAPTOR CONTROL BLOCK
	MOVAB	UBAINT4+1(R3),ADP$L_UBASCB(R2) ; SAVE 4 SCB VECTOR CONTENTS
	MOVAB	UBAINT5+1(R3),ADP$L_UBASCB+4(R2) ; DITO
	MOVAB	UBAINT6+1(R3),ADP$L_UBASCB+8(R2) ; DITO
	MOVAB	UBAINT7+1(R3),ADP$L_UBASCB+12(R2) ;DITO
	MOVL	R2,R4			; COPY ADP ADDRESS
	MOVL	ADP$L_CSR(R2),R2	; VIRTUAL ADDRESS OF ADAPTER
	MOVL	#^X7C000000,UBA$L_CR(R2); DISABLE ALL UMR'S
	JSB	G^MMG$SVAPTECHK		; ADDRESS OF SPTE THAT MAPS ADAPTER
	MOVL	(R3),ADP$L_UBASPTE(R4)	; SAVE CONTENTS OF SPTE MAPPING ADAPTER
	MOVL	<8*4>(R3), -		; CONTENTS OF SPTE MAPPING I/O SPACE
		ADP$L_UBASPTE+4(R4)
	MOVL	R4,R2			; COPY ADP ADDRESS BACK TO R2
	MOVAL	@#UBA$UNEXINT,R3	;GET ADDR OF UNEXP INT SERVICE
	MOVAL	@#UBA$INT0,R4		;GET ADDR OF SPECIAL VECTOR 0 ROUTINE
	BRB	UBADP_INITVEC		; JOIN COMMON UB VECTOR INIT
					;
UBADP_730:				; 730 MIMICS THE 750
UBADP_750:				; REMAINING ADP INIT FOR 11/750:
	MOVAL	^X200(R8),-		; ASSUME UB0
		ADP$L_VECTOR(R2)	;  VECTOR SPACE
	CMPB	W^CONFREG[R4],#NDT$_UB0	; IS DEVICE TYPE = UB0?
	BEQL	10$			; BRANCH IF SO
	ADDL	#^X200,ADP$L_VECTOR(R2)	; ELSE STEP TO UB1 VECTOR SPACE
10$:	MOVW	#^XE,ADP$W_DPBITMAP(R2)	; MARK DATAPATHS 1-3 AVAILABLE
	MOVL	ADP$L_CSR(R2),R3	; VIRTUAL ADDRESS OF ADAPTER
	MOVAB	UBA$L_MAP(R3),R3	; POINT TO MAPPING REGISTERS
	MOVZWL	#496,R4			; NUMBER OF UMR TO DISABLE
20$:	CLRL	(R3)+			; DISABLE A UNIBUS MAP REGISTER
	SOBGTR	R4,20$			; LOOP THRU THEM ALL
	MOVAL	@#UBA$UNEXINT+1,R3	; GET ADDR OF UNEXP INT SERVICE
					;  (+1 MEANS HANDLE ON INT STACK)
	MOVAL	@#UBA$INT0+1,R4		; SPECIAL CASE TO COUNT PASSIVE RELEASE
					;
					; *END OF CPU-DEPENDENT CODE*
					;
UBADP_INITVEC:				; INIT UB VECTORS TO UNEXPECTED
					;  INTERRUPT SERVICE
	MOVL	ADP$L_VECTOR(R2),R0	; GET ADDRESS OF VECTORS
	MOVL	R4,(R0)+		; SPECIAL CASE FOR VECTOR 0
	MOVL	#<NUMUBAVEC-1>,R1	; REST OF VECTORS
10$:	MOVL	R3,(R0)+		; FILL VECTOR WITH UNEXP INT
	SOBGTR	R1,10$			; FILL ALL VECTORS
;
; Now check for any UNIBUS memory that may be on the adapter. First we must
; disable all the UNIBUS Map Registers so that there is no conflict in
; which memory will respond.  Then we check all 248Kb of potential memory in
; 8Kb chunks, since each disable bit on the 780 UBA represents 16 UMR's or
; 8Kb of memory.  The number of registers is stored in the ADP and the 
; corresponding number withdrawn from the UMR map in the ADP.
;
	MOVL	ADP$L_CSR(R2),R6	; Pick up adpater pointer
	CLRL	R1			; Zero out number of UMR to disable
	SUBL3	#512,8(SP),R7		; R7 = VA of last page of UNIBUS
	SUBL3	#4,12(SP),R8		; R8 = VA of SPTE mapping (R7)
	SUBL3	#512,32(SP),R4		; R4 = PFN of first page of UNIBUS
	PUSHL	(R8)			; Save contents of SPTE
	MOVL	R4,R3			; Copy starting PFN
	MOVL	#31,R5			; 31 8Kb chunks to test
15$:	INVALID	R7			; Invalidate TB
	BISL3	#<PTE$M_VALID!PTE$C_KW>,-
		 R4,(R8)		; Map each page of UNIBUS
	MOVL	R7,R0			; Address to check
	JSB	G^EXE$TEST_CSR		; Validate it
	BLBC	R0,30$			; Not there
	CMPL	R3,R4			; First time in?
	BEQL	20$			; Yes, skip next test
	TSTL	R1			; Any registers already?
	BEQL	40$			; No, memory not start at 0
20$:	MOVAB	16(R1),R1		; Yes, up the count
30$:	MOVAB	16(R4),R4		; Map Next 8Kb (16*512)
	SOBGTR	R5,15$			; Loop until done
	POPL	(R8)			; Restore old contents of SPTE
	INVALID	R7			; Invalidate TB
	MOVW	R1,ADP$W_UMR_DIS(R2)	; Record number disabled
;
; Initialize fields for new UBA map register allocation.  Make it appear
;	that we have one contiguous array of 496 available map registers.
;	To do this we set ADP$L_MRACTMDRS to one (the number of active
;	map register descriptors for distinct contiguous areas),
;	ADP$W_MRNREGARY(0) to 496 (i.e the number of registers in this
;	contiguous range) and ADP$FREGARY(0) to 0 (i.e. the first register
;	in the range is register 0).
;
	MOVL	#1,ADP$L_MRACTMDRS(R2)	; 1 active map descriptor
	SUBW3	R1,#496,ADP$W_MRNREGARY(R2);  for a range of 496 registers
	MOVW	R1,ADP$W_MRFREGARY(R2)	;  starting at register zero.
	MNEGW	#1,ADP$W_MRNFENCE(R2)	; Also init "fences" which preceed
	MNEGW	#1,ADP$W_MRFFENCE(R2)	;  the two descriptor arrays.
;
; Initialize adapter hardware.
;
	MOVL	ADP$L_CSR(R2),R4	; Get CSR address to init
	JSB	G^UBA$INITIAL 		; And initialize adapter
	POPR	#^M<R0,R1,R2,R3,R4,R5,R6,R7,R8> ; Restore registers
	RSB				; Return
;
; Error if UNIBUS memory not start at location 0
;
40$:	MOVAB	BADUMR,R1		; Set error message
	BRW	ERROR_HALT_1		; Put it out

;
; UBA INTERRUPT SERVICE ROUTINES.  ONE COPY OF THESE ROUTINES IS
; MOVED INTO NONPAGED POOL AND RELOCATED FOR EACH UBA.
;
; **** NOTE ****  THE CODING SEQUENCE FOR DISPATCHING ON UBA INTTERUPTS
; IS ASSUMED IN THE MODULE MCHECK780.MAR.  THE ASSUMPTIONS ARE MADE SO
; THE MACHINE CHECK HANDLER CAN IDENTIFY A CPU TIMEOUT WHEN THE
; BICL3 INSTRUCTION IS READING THE  UBA'S BRRVR REGISTER.
; THE ASSUMPTIONS MADE ARE THAT THE VALUE OF THE VIRTUAL ADDRESS OF THE BRRVR
; REGISTER IS AT AN OFFSET OF 10 BYTES PAST THE INTERRUPT VECTOR ENTRY POINT
; AND THAT R4 AND R5 ARE SAVED ON THE STACK AT THAT POINT.
;

	.ENABL	LSB
	.ALIGN	QUAD
UBAINTBASE:				; BASE OF UBA INTERRUPT DISPATCHERS
UBAINT4=.-UBAINTBASE			; UBA 0 INTERRUPT DISPATCH LEVEL 4
	MOVQ	R4,-(SP)		; SAVE REGISTERS
	BICL3	#^X7FFFFE03,@#UBA$L_BRRVR,R4 ; READ VECTOR  REGISTER AND CLEAR BITS
UBAINT4REL=.-UBAINTBASE-5		; OFFSET TO ADD UBACSR VALUE
	MOVQ	R2,-(SP)		; SAVE REGISTERS
	MOVAB	B^VECTAB[R4],R5		; GET ADDRESS OF INTERRUPT VECTOR
	BGEQ	10$			; IF GEQ UBA INTERRUPTS
	MOVQ	R0,-(SP)		; SAVE REGISTERS
	JMP	@(R5)+			; DISPATCH INTERRUPT
	.ALIGN	QUAD
UBAINT5=.-UBAINTBASE			; UBA 0 INTERRUPT DISPATCH LEVEL 5
	MOVQ	R4,-(SP)		; SAVE REGISTERS
	BICL3	#^X7FFFFE03,@#UBA$L_BRRVR+4,R4 ; READ VECTOR REGISTER AND CLEAR BITS
UBAINT5REL=.-UBAINTBASE-5		; OFFSET TO ADD UBACSR VALUE
	MOVQ	R2,-(SP)		; SAVE REGISTERS
	MOVAB	B^VECTAB[R4],R5		; GET ADDRESS OF INTERRUPT VECTOR
	BGEQ	10$			; IF GEQ UBA INTERRUPTS
	MOVQ	R0,-(SP)		; SAVE REGISTERS
	JMP	@(R5)+			; DISPATCH INTERRUPT
	.ALIGN	QUAD
UBAINT6=.-UBAINTBASE			; UBA 0 INTERRUPT DISPATCH LEVEL 6
	MOVQ	R4,-(SP)		; SAVE REGISTERS
	BICL3	#^X7FFFFE03,@#UBA$L_BRRVR+8,R4 ; READ VECTOR REGISTER AND CLEAR BITS
UBAINT6REL=.-UBAINTBASE-5		; OFFSET TO ADD UBACSR VALUE
	MOVQ	R2,-(SP)		; SAVE REGISTERS
	MOVAB	B^VECTAB[R4],R5		; GET ADDRESS OF INTERRUPT VECTOR
	BGEQ	10$			; IF GEQ UBA INTERRUPTS
	MOVQ	R0,-(SP)		; SAVE REGISTERS
	JMP	@(R5)+			; DISPATCH INTERRUPT
	.ALIGN	QUAD
UBAINT7=.-UBAINTBASE			; UBA 0 INTERRUPT DISPATCH LEVEL 7
	MOVQ	R4,-(SP)		; SAVE REGISTERS
	BICL3	#^X7FFFFE03,@#UBA$L_BRRVR+12,R4 ; READ VECTOR AND CLEAR BITS
UBAINT7REL=.-UBAINTBASE-5		; OFFSET TO ADD UBACSR VALUE
	MOVQ	R2,-(SP)		; SAVE REGISTERS
	MOVAB	B^VECTAB[R4],R5		; GET ADDRESS OF INTERRUPT VECTOR
	BGEQ	10$			; IF GEQ UBA INTERRUPTS
	MOVQ	R0,-(SP)		; SAVE REGISTERS
	JMP	@(R5)+			; DISPATCH INTERRUPT
10$:	BBCC	#31,R4,20$		;CLEAR ADAPTER ERROR INTERRUPT FLAG (MSB)
20$:	MOVAB	B^VECTAB[R4],R5		;GET ADDRESS OF INTERRUPT VECTOR
	MOVL	I^#0,R4			;GET ADDRESS OF ADAPTOR CONTROL BLOCK
UBAINTADP=.-UBAINTBASE-5		;OFFSET TO START OF LOADED CODE
	JMP	@#EXE$DW780_INT		;ERROR ROUTINE IN MCHECK780
	.DSABL	LSB

	.ALIGN	LONG			; LONGWORD ALIGN VECTORS
VECTAB:					; END OF INTERRUPT CODE, START OF VECTORS
UBINTSZ=.-UBAINTBASE			; SIZE OF UBA INTERRUPT CODE

	.SBTTL	INI_MPMADP - STUB ROUTINE TO CALL INI$MPMADP

;+
; THIS ROUTINE EXISTS TO GET TO SYSLOA FROM INILOA.
;-

INI_MPMADP:
	JMP	@#INI$MPMADP		; TRANSFER TO SYSLOA VECTOR
					; WHICH WILL JMP INTO SYSLOA

	.SBTTL	INI$MBADP - BUILD ADP AND INITIALIZE MBA
	.SBTTL	INI$DRADP - BUILD ADP AND INITIALIZE DR32
	.SBTTL	INI$CIADP - BUILD ADP AND INITIALIZE CI
;+
; INI$MBADP IS CALLED AFTER MAPPING THE REGISTERS FOR A MASSBUS ADAPTER.
; AN ADAPTER CONTROL BLOCK IS ALLOCATED AND FILLED.  A CRB AND IDB ARE
; ALSO ALLOCATED AND INITIALIZED. THE ADAPTER HARDWARE IS THEN INITIALIZED
; BY CALLING MBA$INITIAL.
;
; INI$DRADP IS CALLED AFTER MAPPING THE REGISTERS FOR THE DR32
; ADAPTER.  THE ADAPTER CONTROL BLOCK, CRB, AND IDB ARE ALLOCATED
; AND INITIALIZED.  THE ADAPTER HARDWARE IS THEN INITIALIZED BY
; CALLING DR$INITIAL.
;
; INI$MBADP AND INI$DRADP SHARE COMMON CODE AFTER THE TABLE OF ADAPTER
; SPECIFIC CONSTANTS IS SELECTED AND STORED IN R8.
;
; INPUT:
;	R4 - nexus identification number of this adapter
;
; OUTPUTS:
;	ALL REGISTERS PRESERVED
;-

	.ENABL	LSB

INI$DRADP::				; INITIALIZE DR32 DATA STRUCTURES
	PUSHR	#^M<R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10> ; SAVE REGISTERS
	MOVAL	W^DRTAB,R8		; GET DR32 TABLE OF CONSTANTS
	BRB	10$			; JOIN COMMON CODE
INI$CIADP::				; INITIALIZE CI DATA STRUCTURES
	PUSHR	#^M<R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10> ; SAVE REGISTERS
	MOVAL	W^CITAB,R8		; GET CI TABLE OF CONSTANTS
	BRB	10$			; JOIN COMMON CODE
INI$MBADP::				; INIT MBA DATA STRUCTURES
	PUSHR	#^M<R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10> ;
	MOVAL	W^MBATAB,R8		; GET MBA TABLE OF CONSTANTS
10$:					;
;
; Allocate and initialize Channel Request Block.
;
	MOVZWL	#CRB$C_LENGTH,R1	; SET SIZE OF CRB
	JSB	G^INI$ALONONPAGED	; ALLOCATE SPACE FOR CRB
	PUSHR	#^M<R0,R1,R2,R3,R4,R5>	; SAVE MOVC REGISTERS
	MOVC3	#TEMPLATE_SIZE,-	; FILL WITH TEMPLATE
		@ADPTAB_CRBTEMP(R8)[R8], -
		CRB$L_INTD(R2)
	POPR	#^M<R0,R1,R2,R3,R4,R5>	; RESTORE MOVC REGISTERS
	MOVW	R1,CRB$W_SIZE(R2)	; SET CORRECT SIZE
	MOVB	#DYN$C_CRB,CRB$B_TYPE(R2) ; SET CORRECT TYPE
	MOVAL	CRB$L_WQFL(R2),CRB$L_WQFL(R2)	; INITIALIZE WAIT QUEUE HEADER
	MOVAL	CRB$L_WQFL(R2),CRB$L_WQBL(R2)	; FLINK AND BLINK
	MOVL	R2,R10			; SAVE CRB ADDRESS
;
; Allocate and initialize Interrupt Dispatch Block.
;
	MOVZBL	ADPTAB_IDBUNITS(R8),R1	; GET # OF IDB UNITS
	MOVAL	@#IDB$C_LENGTH[R1],R1	; GET TOTAL SIZE OF IDB
	JSB	G^INI$ALONONPAGED	; ALLOCATE IDB
	MOVW	R1,IDB$W_SIZE(R2)	; SET STRUCTURE SIZE
	MOVB	#DYN$C_IDB, -		; AND TYPE CODE
		IDB$B_TYPE(R2)
	MOVZBW	ADPTAB_IDBUNITS(R8),-	; SET COUNT OF UNITS
		IDB$W_UNITS(R2)
	MOVL	W^SBICONF[R4], -	; SET CSR ADDRESS TO
		IDB$L_CSR(R2)		;  START OF ADAPTER REG SPACE
	MOVL	R2, -			; SET ADDRESS OF IDB INTO CRB
		CRB$L_INTD+VEC$L_IDB(R10)
	MOVL 	R2,R9			; SAVE ADDRESS OF IDB
;
; Allocate and initialize Adapter Control Block (ADP).
;
	MOVZWL	ADPTAB_ADPLEN(R8),R1	; GET SIZE OF ADAPTER
	JSB	G^INI$ALONONPAGED	; ALLOCATE ADP FOR MASSBUS ADAPTER
	MOVW	R1,ADP$W_SIZE(R2)	; SET SIZE OF STRUCTURE
	MOVB	#DYN$C_ADP,ADP$B_TYPE(R2); AND TYPE CODE
	MOVL	IDB$L_CSR(R9),ADP$L_CSR(R2); SET ADDRESS OF CONFIGURATION REGISTER
	MOVW	R4,ADP$W_TR(R2)		; SET TR/SLOT-16 NUMBER OF ADAPTER
	MOVW	ADPTAB_ATYPE(R8),-	; SET THE ADAPTER TYPE
		ADP$W_ADPTYPE(R2)
	MOVL	R10,ADP$L_CRB(R2)	; POINT ADP TO CRB
;	CMPW	ADP$W_ADPTYPE(R2),#AT$_CI ; CI?
;	BEQL	20$			; YES, DO NOT CONNECT UP VECTORS
;
; Initialize adapter interrupt vectors in System Control Block.
;
	MOVL	G^EXE$GL_SCB,R0		; GET ADDRESS OF SCB
	EXTZV	#0,#4,R4,R4		; Use low 4 bits of nexus number.
	MOVAL	^X100(R0)[R4],R0	; COMPUTE ADDR OF 1ST VECTOR
	MOVAL	CRB$L_INTD+1(R10),(R0)	; CONNECT VECTOR TO CRB CODE
	MOVAL	CRB$L_INTD+1(R10),64(R0); SAME FOR
	MOVAL	CRB$L_INTD+1(R10),128(R0); ALL FOUR
	MOVAL	CRB$L_INTD+1(R10),192(R0); VECTORS
;
; Continue with ADP initialization.
;
20$:	MOVAL	CRB$L_INTD+1(R10), -	; SAVE SCB VECTOR CONTENTS IN ADP
		ADP$L_MBASCB(R2)
	PUSHR	#^M<R2,R3>		; SAVE SOME REGISTERS
	MOVL	R2,R5			; COPY ADP ADDRESS
	MOVL	ADP$L_CSR(R2),R2	; VIRTUAL ADDRESS OF ADAPTER
	JSB	G^MMG$SVAPTECHK		; ADDRESS OF SPTE THAT MAPS ADAPTER
	MOVL	(R3),ADP$L_MBASPTE(R5)	; SAVE CONTENTS OF SPTE
	POPR	#^M<R2,R3>		; RESTORE REGISTERS
	MOVL	R2,CRB$L_INTD+VEC$L_ADP(R10)	; SET CRB POINTER TO ADP
	MOVL	R2,IDB$L_ADP(R9)	; AND INTO IDB
	BSBW	ADPLINK			; LINK ADP TO END OF CHAIN
;
; Initialize adapter hardware.
;
	MOVL	R9,R5			; ADDRESS OF IDB
	MOVL	IDB$L_CSR(R5),R4	; ADDRESS OF CONFIGURATION REGISTER 0
	JSB	@CRB$L_INTD+VEC$L_INITIAL(R10) ; INIT ADAPTER
	POPR	#^M<R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10>; RESTORE ALL REGISTERS
	RSB				; RETURN

	.DSABL	LSB

	.SBTTL	ADPLINK - LINK ADAPTER CONTROL BLOCK INTO ADP LIST
;+
; ADPLINK LINKS THE ADAPTER CONTROL BLOCK  TO THE END OF THE ADP LIST
;
; INPUT:
;	R2 - ADDRESS OF NEW ADP
; OUTPUTS:
;	ADP IS LINK TO THE END OF THE ADPLIST LOCATED BY IOC$GL_ADPLIST.
;	R0,R1 destroyed.
;-
ADPLINK:				;
	MOVAB	G^<IOC$GL_ADPLIST-ADP$L_LINK>,R0
					; START OF LIST
10$:	MOVL	ADP$L_LINK(R0),R1	; FLINK TO FIRST ENTRY
	BEQL	20$			; AT END
	MOVL	R1,R0			; TRY AGAIN
	BRB	10$			;
20$:	MOVL	R2,ADP$L_LINK(R0)	; CHAIN NEW ADP TO END OF LIST
	RSB				; AND RETURN

	.END
