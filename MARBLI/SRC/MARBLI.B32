MODULE MARBLI(IDENT='V03-000',MAIN=CONVERT %TITLE'MARS to BLISS Macro Converter')=
BEGIN

!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! ABSTRACT:
!	The routines in this module, along with XPORT
!	convert a specifically formatted MARS macro file into a
!	BLISS macro file.
!
!	The logic in this module is somewhat ad hoc and
!	any perturbation of the format of the MARS file may result
!	in these routines not working.
!
! AUTHOR:
!	P.C. Marks, CREATION DATE: 3 FEB 77
! MODIFIED:
!	V02-003		BLS0073		Benn Schreiber		26-Aug-1981
!		Disable per-macro output
!
!	V02-002		APL0001		Al Lehotsky		4-Jun-1981
!		Change for 31-character names which was missed earlier.
!
!	V02-001		BLS0055		Benn Schreiber		3-Jun-1981
!		Use BLISS linkage and GENERAL addressing mode
!
!	A.P. Lehotsky	31-Oct-79	Transport to VAX. Suppress "()" in
!					macros without arguments, e.g. $HIBER
!
!--


FORWARD ROUTINE
    CONVERT,				! Main routine
    CONVMACRO:		NOVALUE,	! Convert a .MACRO definition
    OUTLIST,				! Output a parameter list
    CONVARGLIST:	NOVALUE;	! Convert argument list of a .MACRO

MACRO
    VERSTR=	'MARBLI  V1-4' %;
LIBRARY	'SYS$LIBRARY:XPORT';

LITERAL
	MAX_NO_ARGS=	63,		! Max number of macro arguments
	MAX_ARG_LIST=	65*MAX_NO_ARGS,	! Max characters in formal arg list
	MAX_REC_SIZE=	130;		! Max input and output record length

MACRO
	REPEAT=
	    WHILE 1 DO %,

	! Construct length and pointer parameters
	!
	CH$LEN_PTR[]=
	    %CHARCOUNT(%REMAINING), CH$PTR(UPLIT(%REMAINING)) %,


	! Return the index of string S in context C
	!
	CH$INDEX(CL,C,S) = 
	    CH$FIND_SUB(CL, C, %CHARCOUNT(S), CH$PTR(UPLIT(S))) %,

	! Return the size of the zero-truncated output buffer
	!
	TRUNCATED_OUTPUT =
		CH$DIFF(CH$FIND_CH( MAX_REC_SIZE+1, CH$PTR(OUTPUT_RECORD),0),
			CH$PTR(OUTPUT_RECORD)) %;


OWN
    !+
    ! Declarations for processing a text line for macro declaration and
    ! the associated argument list.
    !-
    INPUT_RECORD:	VECTOR[CH$ALLOCATION(MAX_REC_SIZE)],
    INPUT_PTR,
    INPUT_LENGTH,

			! Guarantee at least 1 zero byte at end of output
			!  record s.t. TRUNCATED_OUTPUT macro cannot fail.
			!
    OUTPUT_RECORD:	VECTOR[CH$ALLOCATION(MAX_REC_SIZE+1)],
    OUTPUT_PTR,

    ARG_PTR,
    ARG_LENGTH,
    ARG_LIST:	VECTOR[CH$ALLOCATION(MAX_ARG_LIST)],

    CALL_PTR,
    CALL_LENGTH,
    CALL_LIST:	VECTOR[CH$ALLOCATION(MAX_ARG_LIST)],

    VAR_ARGS;

OWN
    !+
    ! I/O related declarations.
    !-

    TERMINAL:	$XPO_IOB(),
    INPUT:	$XPO_IOB(),
    OUTPUT:	$XPO_IOB();

ROUTINE CONVERT =
!++
! FUNCTIONAL DESCRIPTION:
!	This is the main routine of this module.
!	The chief function is to examine an input line and determine
!	whether it should be ignored or processed by other routines.
!
! IMPLICIT INPUTS:
!
!	OWN storage
!
! IMPLICIT OUTPUTS:
!
!	OWN storage
!
! ROUTINE VALUE:
!
!	Success or an XPORT completion code
!--
    BEGIN
    LOCAL
        PRINT_COMMENTS;	! Flag to pass comments and blank lines to output

    $XPO_IOB_INIT(IOB=TERMINAL);
    $XPO_IOB_INIT(IOB=INPUT);
    $XPO_IOB_INIT(IOB=OUTPUT);

    $XPO_OPEN( IOB=TERMINAL, FILE_SPEC=$XPO_INPUT);
!    $XPO_PUT( IOB=TERMINAL,
!	STRING=(%STRING('System-Service Macro Translator ',%EXPAND VERSTR)) );
 
    REPEAT
	BEGIN
	IF NOT $XPO_GET(IOB=TERMINAL, PROMPT=('Input file (STARLET.MAR): ') )
	THEN
	    RETURN XPO$_NORMAL;

	IF $XPO_OPEN(IOB=INPUT,
		FILE_SPEC=TERMINAL[IOB$T_STRING],	! User supplied name
		DEFAULT=('STARLET.MAR'),		! The standard input
		FAILURE=XPO$IO_FAILURE)
	THEN
	    EXITLOOP					! Got good input.
	END;

    IF NOT $XPO_GET(IOB=TERMINAL, PROMPT=('Output file (*.B32): ') )
    THEN
	RETURN XPO$_NORMAL;

    $XPO_OPEN(IOB=OUTPUT,
		FILE_SPEC=TERMINAL[IOB$T_STRING],
		DEFAULT=('*.B32'),
		RELATED=INPUT[IOB$T_RESULTANT],
		OPTION=OUTPUT);

    $XPO_PUT(IOB=OUTPUT,
	STRING=(%STRING('! Translated from MACRO-32 by ',%EXPAND VERSTR)) );
    ! Set CSP pointer for the output record.
    !
    OUTPUT_PTR = CH$PTR(OUTPUT_RECORD);
    PRINT_COMMENTS = 0;


    ! Main loop:
    !	Exit from this loop when an end of file is read
    !	or an I/O error has occurred.
    !
    WHILE $XPO_GET(IOB=INPUT) DO
        BEGIN
	INPUT_LENGTH = .INPUT[IOB$H_STRING];
	INPUT_PTR = .INPUT[IOB$A_STRING];

        IF .INPUT_LENGTH LSS 0 THEN EXITLOOP;

        IF .INPUT_LENGTH EQL 0
        THEN
	    BEGIN
	    IF .PRINT_COMMENTS THEN $XPO_PUT(IOB=OUTPUT, STRING=('') )
	    END
        ELSE
	    BEGIN
	    CH$COPY(.INPUT_LENGTH, .INPUT_PTR, 0, MAX_REC_SIZE, .OUTPUT_PTR);

	    INPUT_LENGTH = TRUNCATED_OUTPUT;

	    IF CH$RCHAR(.OUTPUT_PTR) EQL %C';'
	    THEN
	        BEGIN
	        !
	        ! Comment line
	        !	Note comments are printed only after line ";*" is read
	        !
	        CH$WCHAR(%C'!', .OUTPUT_PTR);
	        IF .PRINT_COMMENTS
		THEN
		    $XPO_PUT(IOB=OUTPUT, STRING=(.INPUT_LENGTH, .OUTPUT_PTR));

		IF CH$RCHAR(CH$PLUS(.OUTPUT_PTR, 1)) EQL %C'*'
		THEN
		    PRINT_COMMENTS = 1
	        END

	    ELSE IF (CH$INDEX(.INPUT_LENGTH, .OUTPUT_PTR, '.MACRO')) NEQ 0
	    THEN
	        IF (CH$INDEX(.INPUT_LENGTH, .OUTPUT_PTR, '_S')) NEQ 0
	        THEN
		    !
		    ! Macro in "_S" form:  Output it
		    !
		    CONVMACRO()
	    END
        END;


    $XPO_CLOSE(IOB=INPUT);
    $XPO_CLOSE(IOB=OUTPUT);

!    $XPO_PUT( IOB=TERMINAL, STRING=('End MARBLI') );
    $XPO_CLOSE( IOB=TERMINAL );

    XPO$_NORMAL
    END;

ROUTINE CONVMACRO: NOVALUE=

!++
! FUNCTIONAL DESCRIPTION:
!	 This routine reads and processes a MARS system macro
!	 It calls the routine CONVARGLIST to convert the argument list
!	 of the macro definition.
!
! PARAMETERS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
!--

    BEGIN
    LOCAL
	PTR,			! Temp CH$ pointer for copying arglists
	TEMP_PTR1,
	TEMP_PTR2,
	TEMPSTRING:	VECTOR[CH$ALLOCATION(80)],
	MACRO_PTR,
	MACRO_LENGTH,
	MACRO_NAME:	VECTOR[CH$ALLOCATION(31)];


    MACRO_PTR = CH$PTR(MACRO_NAME);


    ! Search for the "$" which begins the macro name and
    ! the "_" which ends it, and initialize MACRO_NAME and MACRO_LENGTH
    !
    TEMP_PTR1 = CH$FIND_CH(MAX_REC_SIZE, .OUTPUT_PTR, %C'$');
    TEMP_PTR2 = CH$FIND_CH(MAX_REC_SIZE, .OUTPUT_PTR, %C'_');
    MACRO_LENGTH = CH$DIFF(.TEMP_PTR2, .TEMP_PTR1);
    CH$MOVE(.MACRO_LENGTH, .TEMP_PTR1, .MACRO_PTR);


    ! Inform user of progress
    !
!    CH$COPY(CH$LEN_PTR('Macro:	'),
!	    .MACRO_LENGTH, .MACRO_PTR,
!	    0,
!	    80, CH$PTR(TEMPSTRING) );

!    $XPO_PUT( IOB=TERMINAL, STRING=(80, CH$PTR(TEMPSTRING) ) );


    ! Gather the argument list
    !
    CONVARGLIST(.TEMP_PTR2);


    ! Put out one of the lines
    !	"KEYWORDMACRO $name(formal=default,...)="
    ! or
    !	"MACRO $name[]="	if VAR_ARGS is true
    !
    IF .VAR_ARGS
    THEN
	CH$COPY(
	    CH$LEN_PTR('MACRO '),
	    .MACRO_LENGTH,
	    .MACRO_PTR,
	    CH$LEN_PTR('[]='),
	    0,
	    MAX_REC_SIZE,
	    .OUTPUT_PTR)
    ELSE
	BEGIN
	LOCAL
	    PTR;

	PTR = CH$MOVE(CH$LEN_PTR('KEYWORDMACRO '), .OUTPUT_PTR);
	PTR = CH$MOVE(.MACRO_LENGTH, .MACRO_PTR, .PTR);

        IF .ARG_LENGTH GTR 0		! If there are formal parameters, then
        THEN				!  put out the argument list.
	    BEGIN
	    PTR = CH$MOVE( CH$LEN_PTR('('), .PTR );
	    PTR = OUTLIST( .PTR, .ARG_LENGTH, .ARG_PTR);
	    PTR = CH$MOVE( CH$LEN_PTR(')='), .PTR)
	    END
	ELSE
	    CH$WCHAR_A(%C'=', PTR);	! There were no formal parameters

	CH$WCHAR(0, .PTR)		! Mark end of string
	END;


    $XPO_PUT(IOB=OUTPUT,
	    STRING=(TRUNCATED_OUTPUT, .OUTPUT_PTR) );


    ! Put out the line "   ("
    !
    $XPO_PUT(IOB=OUTPUT, STRING=('    (') );


    ! Put out the line "    EXTERNAL ROUTINE SYS$name: BLISS ADDRESSING_MODE(GENERAL);"
    !
    CH$COPY(
	    CH$LEN_PTR('    EXTERNAL ROUTINE SYS'),
	    .MACRO_LENGTH,
	    .MACRO_PTR,
	    CH$LEN_PTR(': BLISS ADDRESSING_MODE(GENERAL);'),
	    0,
	    MAX_REC_SIZE,
	    .OUTPUT_PTR);
    $XPO_PUT(IOB=OUTPUT, STRING=(TRUNCATED_OUTPUT, .OUTPUT_PTR) );


    ! Put out the line "    SYS$name(formal,...)"
    !
    PTR = CH$COPY(
	    CH$LEN_PTR('    SYS'),
	    .MACRO_LENGTH,
	    .MACRO_PTR,
	    CH$LEN_PTR('('),
	    0,
	    .MACRO_LENGTH + 8,		! Exact copying
	    .OUTPUT_PTR);

    PTR = OUTLIST( .PTR, .CALL_LENGTH, .CALL_PTR);
    PTR = CH$MOVE( CH$LEN_PTR( ')', %CHAR(0) ), .PTR );


    $XPO_PUT( IOB=OUTPUT, STRING=(TRUNCATED_OUTPUT, .OUTPUT_PTR) );	


    ! Close up the macro declaration
    !
    $XPO_PUT(IOB=OUTPUT, STRING=('    ) %;') )
    END;

ROUTINE OUTLIST(BUFPTR, LEN, LPTR)=
!+
! FUNCTION
!	Dump an argument list buffer (which may span several source
!	records..) to the output file.  Continuation lines are flagged
!	by an ASCII NUL (0) byte.
! INPUTS
!	BUFPTR	- byte-pointer into the OUTPUT_RECORD containing prefix
!		  information for the first record written.
!
!	LEN	- Length of the argument-list string.
!
!	LPTR	- Pointer to the argument-list string.
! OUTPUT
!	Updated "BUFPTR"
!-
    BEGIN
    LOCAL
	IPTR,		! Input string pointer (arg-list)
	OPTR,		! Copy of BUFPTR...
	CHAR;		! Character temporary

    IPTR = .LPTR;
    OPTR = .BUFPTR;

    DECR I FROM .LEN-1 TO 0 DO
	BEGIN
	CHAR = CH$RCHAR_A( IPTR );	! Get next character and copy to
	CH$WCHAR_A( .CHAR, OPTR );	!  output string

	IF .CHAR EQL 0
	THEN
	    BEGIN
	    $XPO_PUT( IOB=OUTPUT,
		    STRING=( TRUNCATED_OUTPUT, .OUTPUT_PTR)
		    );
	    OPTR = .OUTPUT_PTR;			! Restore buffer ptr.
	    CH$WCHAR_A( %CHAR(9), OPTR )	!  and TAB from left-margin
	    END
	END;

    .OPTR
    END;

ROUTINE CONVARGLIST(TEMP_PTR): NOVALUE=

!++
! FUNCTIONAL DESCRIPTION:
!	This routine gathers the argument list of a macro definition.
!	It processes continuation lines.  It eliminates unnecessary 
!	characters and places the arguments with default values in ARG_LIST
!	and a list of the formal names in CALL_LIST
!
! PARAMETERS:
!	
!	TEMP_PTR	=  The value of a CH pointer in the macro 
!			   definition line.
!
! IMPLICIT OUTPUTS:
!	ARG_LIST	=  String of formal arguments with default values
!	ARG_PTR		=  String pointer to ARG_LIST
!	ARG_LENGTH	=  Length of string in ARG_LIST
!	CALL_LIST	=  String of formal arguments
!	CALL_PTR	=  String pointer to CALL_LIST
!	CALL_LENGTH	=  Length of string in CALL_LIST
!	VAR_ARGS	=  True if the last formal argument was END_VARNUM_ARGS
!
! ROUTINE VALUE:
!	NONE
!
!--

    BEGIN
    LOCAL
	LIST_PTR,	! Input character string pointer
	CHAR,		! Character from string
	STATE,		! State of parse
			!	0 = No argument seen yet
			!	1 = Scanning formal name
			!	2 = Scanning default value
	BEGIN_ARG;	! Character string pointer to beginning of argument

    MACRO
	TRY_ADD_DEFAULT=
	    IF .STATE EQL 1 THEN (CH$WCHAR_A(%C'=', ARG_PTR);  CH$WCHAR_A(%C'0', ARG_PTR)) %;



    ! Initialize
    !
    ARG_PTR = CH$PTR(ARG_LIST);
    CH$FILL(0, MAX_ARG_LIST, .ARG_PTR);
    CALL_PTR = CH$PTR(CALL_LIST);
    CH$FILL(0, MAX_ARG_LIST, .CALL_PTR);
    LIST_PTR = CH$PLUS(.TEMP_PTR, 3);
    VAR_ARGS = 0;
    STATE = 0;



    ! Scan the argument list
    ! Exit when an end of line (not preceded by line continuation mark) is read
    !
    REPEAT
	BEGIN
	CHAR = CH$RCHAR_A(LIST_PTR);
	SELECTONE .CHAR OF
	    SET

	    [0]:
		BEGIN
		!
		! End of list
		!	Add a default value to the last argument if it did not
		!	have one.
		!	Set VAR_ARGS if the name of the last argument is
		!	END_VARNUM_ARGS
		!
		TRY_ADD_DEFAULT;
		IF .STATE GEQ 1
		THEN
		    IF
			CH$EQL(
			    CH$DIFF(.CALL_PTR, .BEGIN_ARG),
			    .BEGIN_ARG,
			    CH$LEN_PTR('END_VARNUM_ARGS'),
			    0)
		    THEN
			VAR_ARGS = 1;

		EXITLOOP
		END;

	    [%C'A' TO %C'Z',  %C'0' TO %C'9',  %C'_',  %C'$']:
		BEGIN
		!
		! Symbol constituent
		!	If STATE is zero, it is the first character of a formal name
		!	STATE distinguishes scanning formal name from scanning default value
		!
		IF .STATE EQL 0
		THEN
		    BEGIN
		    STATE = 1;
		    BEGIN_ARG = .CALL_PTR
		    END;

		IF .STATE EQL 1 THEN CH$WCHAR_A(.CHAR, CALL_PTR);
		CH$WCHAR_A(.CHAR, ARG_PTR)
		END;

	    [%C'=']:
		BEGIN
		!
		! Beginning of default value
		!	Set STATE to indicate scanning default and collect character
		!
		STATE = 2;
		CH$WCHAR_A(.CHAR, ARG_PTR)
		END;

	    [%C',']:
		BEGIN
		!
		! End of argument
		!	Add a default value to the argument if it did not have one
		!	Collect the character
		!	Reset STATE to indicate not within an argument
		!
		TRY_ADD_DEFAULT;
		CH$WCHAR_A(.CHAR, CALL_PTR);
		CH$WCHAR_A(.CHAR, ARG_PTR);
		STATE = 0
		END;

	    [%C'-']:
		BEGIN
		!
		! Line continuation indicator
		!	Get a new line and reset LIST_PTR
		!
		CH$WCHAR_A( 0, CALL_PTR );
		CH$WCHAR_A( 0, ARG_PTR );

		$XPO_GET(IOB=INPUT);
		INPUT_LENGTH = .INPUT[IOB$H_STRING];
		INPUT_PTR = .INPUT[IOB$A_STRING];
		CH$COPY(.INPUT_LENGTH, .INPUT_PTR,
			 0,
			MAX_REC_SIZE, .OUTPUT_PTR);
		LIST_PTR = .OUTPUT_PTR
		END;

	    [%C';']:
		!
		! MACRO comment character
		!	The remainder of the line is "ignorable"
		!
		EXITLOOP
	    TES
	END;


    ! Set up implicit outputs as noted
    ! If variable number of arguments, then replace CALL_LIST by "%REMAINING"
    !	since this is the call argument
    !
    ARG_LENGTH = CH$DIFF(.ARG_PTR, CH$PTR(ARG_LIST));
    ARG_PTR = CH$PTR(ARG_LIST);

    IF .VAR_ARGS
    THEN
	BEGIN
	CH$COPY(
	    CH$LEN_PTR('%REMAINING'),
	    0,
	    MAX_ARG_LIST,
	    CH$PTR(CALL_LIST));
	CALL_LENGTH = %CHARCOUNT('%REMAINING');
	END
    ELSE
	CALL_LENGTH = CH$DIFF(.CALL_PTR, CH$PTR(CALL_LIST));

    CALL_PTR = CH$PTR(CALL_LIST)
    END;

END				! End of module MARBLI
ELUDOM
