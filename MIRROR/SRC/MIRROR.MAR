	.TITLE	MIRROR -	DECNET-VAX LOOPBACK MIRROR
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
; FACILITY:	NETWORK MANAGEMENT LISTENER
;
; ABSTRACT:	This single module is the LOOPBACK MIRROR. It is the
;		only network management function specified for the
;		application layer of the Digital Network Architecture.
;		Its purpose is to test logical links either between nodes
;		or within a single node.
;
;
; ENVIRONMENT:
;	MODE = USER
;
; AUTHOR:	KARL MALIK, CREATION DATE: 15-APR-1980
;
; MODIFIED BY:
;
;	V03-001	MSH0001		Maryann S. Hinden		19-NOV-1981
;		Add global references to library calls.
;
;--

	.PAGE
	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;
;	NONE
;
; MACROS:
;
;	NONE

;
; EQUATED SYMBOLS:
;
;
; OWN STORAGE:
;
	.PSECT	MIRROR$DATA	SHR,NOEXE,RD,WRT,BYTE

LOGNAME:.ASCID	/SYS$NET/		; Logical name & descriptor
LOGNAM2:.ASCID	/MIRROR$SIZE/		; Logical name & descriptor
LOG2DESC:
	.LONG	100
	.LONG	LOG2BUF
LOG2BUF:.BLKB	100
DEVDESC:.ASCID	/_NET:/			; Pseudo-device & descriptor
DEV_CHAN:
	.BLKW	1			; Word to receive device channel #
IOSB:	.BLKQ	1			; I/O status block

NCBDESC:.LONG	63			; NCB descriptor
	.LONG	NCB
NCB:	.BLKB	63			; Network connect block

BASEADR:.BLKL	1			; Adr of buffer if MIRROR$SIZE used
BUFFER:.BLKB	4096+1			; Buffer
MAX_DATA=<.-BUFFER>-1			; Max size of data receivable (not
					; Counting function code)
DATA_SIZE:				; Current size of buffer
	.LONG	MAX_DATA+1		;
RECV_SIZE:
	.BLKL	1			; # of bytes received

	.PAGE
;++
; FUNCTIONAL DESCRIPTION:
;
;
;	When the LOOPBACK MIRROR accepts a connect, it returns its
;	maximum data size minus 1 in the accept data. This is the amount
;	of data it can handle, not counting the function code.
;
;	(It is possible to specify the maximum data size by defining 
;	the logical name 'MIRROR$SIZE' in SYS$SYSTEM:MIRROR.COM. If 
;	'MIRROR$SIZE' is not defined ( or is equal to zero ) then the 
;	default	value of 4096 is used.
;
;	When a Logical Loopback message is received, it is changed
;	into the appropriate response message and returned to the user.
;	The Loopback Mirror continues to repeat all traffic offered.
;	The initiator of the link disconnects it.
;
; CALLING SEQUENCE:
;
;	CONNECTED TO BY NETWORK MANAGEMENT LISTENER
;
; INPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT INPUTS:
;
;	LOGICAL NAME 'SYS$NET'
;	LOGICAL NAME 'MIRROR$SIZE' (OPTIONAL)
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	SUCCESS -> SENDS 1 AS THE FIRST BYTE OF THE LOGICAL LOOPBACK
;		   RESPONSE MESSAGE.
;
;	FAILURE -> SENDS -1 (REMAINDER OF LOGICAL LOOPBACK MESSAGE IS
;		   DISCARDED).
;
;
; SIDE EFFECTS:
;
;	NONE
;
;--
	.SBTTL	MAIN
	.PSECT	MIRROR$CODE	NOSHR,EXE,RD,NOWRT,BYTE

	.ENTRY	MIRROR,^M<>		; Entry point from exec
	.ENABL	LSB			; Enable local symbol block
;
; ASSIGN A CHANNEL TO _NET: .
;
	$ASSIGN_S -
		DEVNAM=W^DEVDESC,-	; Adr of pseudo device descriptor
		CHAN=W^DEV_CHAN		; Adr of word to store channel #

	BLBS	R0,10$			; Branch on success
	BRW	EXIT			; Branch (failure)
;
; TRANSLATE THE LOGICAL NAME SYS$NET TO OBTAIN THE CONNECTION INFORMATION
; CONTAINED IN THE NCB.
;
10$:	$TRNLOG_S -			; Translate SYS$NET
		LOGNAM=W^LOGNAME,-	; Descriptor for SYS$NET
		RSLLEN=W^NCBDESC,-	; Substitute new length
		RSLBUF=W^NCBDESC	; Address of modified NCB descriptor
	BLBS	R0,30$			; Branch on success
20$:	BRW	EXIT			; Branch (failure)
30$:	CMPW	#SS$_NOTRAN,R0		; Did we translate?
	BEQL	20$			; No translation for SYS$NET, just quit

;
; TRANSLATE THE LOGICAL NAME MIRROR$SIZE AND CONVERT IT TO A HEX VALUE. IF
; NO TRANSLATION (OR VALUE IS TOO BIG OR SMALL) THEN USE 4096 DEFAULT.
;
	$TRNLOG_S -			; Translate MIRROR$SIZE
		LOGNAM=W^LOGNAM2,-	; Descriptor for MIRROR$SIZE
		RSLLEN=W^LOG2DESC,-
		RSLBUF=W^LOG2DESC
	BLBS	R0,40$			; Branch on success
	BRW	EXIT			; Branch (failure)
40$:	MOVAL	W^BUFFER,R5		; Set up to use default buffer
	CMPW	#SS$_NOTRAN,R0		; Did we translate?
	BEQL	W^DEFAULT		; No translation, branch and use default

	PUSHAL	W^DATA_SIZE		; Adr to receive hex output
	PUSHAQ	W^LOG2DESC		; Adr of ascii descriptor
	CALLS	#2,G^FOR$CNV_IN_I	; Convert ascii to hex
	BLBS	R0,50$			; Branch on success
	BRW	EXIT			; Branch (failure)

;
; MAKE SURE THAT THE VALUE IS WITHIN ACCEPTABLE LIMITS.
;
50$:	TSTL	W^DATA_SIZE		; Is it 0?
	BEQL	W^DEFAULT		; Branch if entered value is 0
	INCL	W^DATA_SIZE		; Leave room for function code
	PUSHAL	W^BASEADR		; Adr to put starting adr of buffer
	PUSHAL	W^DATA_SIZE		; # of bytes to allocate
	CALLS	#2,G^LIB$GET_VM		; Allocate the new buffer
	BLBC	R0,W^DEFAULT		; Use the default if LIB$GET_VM failed
	MOVL	W^BASEADR,R5		; Set up to use new buffer
	BRB	55$			; OK, entered value is acceptable

DEFAULT:
	MOVZWL	#MAX_DATA,W^DATA_SIZE	; Use 4096 default value
55$:	INCL	W^DATA_SIZE		; Leave room for function code

;
; LOCATE THE OPTIONAL DATA IN THE NCB (IF PRESENT) AND REPLACE IT
; WITH THE MAXIMUM DATA SIZE.
;
60$:	LOCC	#^A\/\,W^NCBDESC,W^NCB	; Locate the slash
	BNEQ	70$			; Branch if successful
	MOVZWL	S^#SS$_ABORT,R0		; Set up error code (LOCC zeroed R0)
	BRW	EXIT			; Branch (failure)
70$:	TSTW	(R1)+			; Skip over word
	TSTB	(R1)+			; Skip one more byte
	MOVB	#2,(R1)+		; Alter count field
	MOVW	W^DATA_SIZE,(R1)	; Substitute maximum data size
	DECW	(R1)+			; Leave room for function code
	MOVB	#^A/"/,(R1)		; Add new termination character
;
; ACCEPT THE CONNECTION REQUEST FROM NETWORK MANAGEMENT LISTENER.
;
	$QIOW_S -			; Issue connect confirm request
		EFN=#1,-		; Use local event flag #1
		CHAN=W^DEV_CHAN,-	; Use the assigned channel
		FUNC=S^#IO$_ACCESS,-	; Accept the link
		IOSB=W^IOSB,-		; Address of I/O status block
		P2=#NCBDESC		; Address of NCB descriptor
	BLBS	R0,80$			; Branch on success
	BRW	EXIT			; Branch (failure)
80$:	MOVZWL	W^IOSB,R0		; Get I/O completion status
	BLBS	R0,W^LOOP		; Branch on success
	BRW	EXIT			; Branch (failure)
;
; RECEIVE A MESSAGE FROM NML.
;
LOOP:	$QIOW_S -			; Issue receive request
		EFN=#1,-		; Use local event flag #1
		CHAN=W^DEV_CHAN,-	; Use assigned channel
		FUNC=S^#IO$_READVBLK,-	; Read virtual block
		IOSB=W^IOSB,-		; Address of I/O status block
		P1=(R5),-		; Address of input buffer
		P2=W^DATA_SIZE		; Length of input buffer
	CMPW	#SS$_DATAOVERUN,W^IOSB	; Too much data?
	BEQL	90$			; Branch if too much data
	CMPW	#SS$_LINKABORT,W^IOSB	; Did partner issue disconnect abort?
	BEQL	W^DISC			; Branch if disconnect abort
	CMPW	#SS$_LINKDISCON,W^IOSB	; Did partner issue sync disconnect?
	BEQL	W^DISC			; Branch if sync disconnect
	CMPW	#SS$_ABORT,W^IOSB	; Was the link aborted (old code)?
	BEQL	W^DISC			; Branch if link aborted
	BLBC	R0,W^EXIT		; Branch on failure
	MOVZWL	W^IOSB,R0		; Get I/O completion status
	BLBC	R0,W^EXIT		; Branch on failure
;
; MAKE SURE THAT THE FUNCTION CODE IS ZERO.
;
	TSTB	(R5)			; Is function code correct?
	BEQL	100$			; Branch if zero (valid)
90$:	MOVB	#-1,(R5)		; Set up failure return code
	MOVZBW	#1,W^IOSB+2		; Set up new length
	BRB	REFLECT			; Branch and continue
100$:	MOVB	#1,(R5)			; Set up success return code
;
; REFLECT THE MESSAGE BACK TO NML.
;
REFLECT:
	MOVW	W^IOSB+2,W^RECV_SIZE	; Get length of message to reflect
	$QIOW_S -			; Issue transmit request
		EFN=#1,-		; Use local event flag #1
		CHAN=W^DEV_CHAN,-	; Use assigned channel
		FUNC=#IO$_WRITEVBLK,-	; Write virtual block
		IOSB=W^IOSB,-		; Address of I/O status block
		P1=(R5),-		; Address of output buffer
		P2=W^RECV_SIZE		; Length of output buffer
	BLBC	R0,EXIT			; Branch on failure
	MOVZWL	W^IOSB,R0		; Get I/O completion status
	BLBC	R0,EXIT			; Branch on failure
	BRW	LOOP			; Reissue receive request
;
; EXIT WITH STATUS (IN R0).
;
DISC:	MOVZWL	S^#SS$_NORMAL,R0	; Set up success status code
EXIT:	$EXIT_S	R0			; Exit with status to be displayed
					; on exit
	.DSABL	LSB			; Disable local symbol block
	.END	MIRROR			; Image transfer address
