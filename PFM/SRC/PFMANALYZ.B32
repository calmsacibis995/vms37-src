MODULE pfm_analyz (			! Analyze Page fault monitor output
		LANGUAGE (BLISS32),
		MAIN = pfm$analyze,
		IDENT = 'V03-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  Page fault monitor analyzer
!
! ABSTRACT:
!
!	The VAX/VMS page fault monitor produces a file of pc/virtual addresses
!	for pagefaults for a given process.  This program provides a printed
!	output of the data.
!
! ENVIRONMENT:
!
!	VAX native, user mode.
!
!--
!
!
! AUTHOR:  Benn Schreiber
!
! CREATION DATE: 29-Nov-1979
!
! MODIFIED BY:
!
!--

LIBRARY
	'SYS$LIBRARY:STARLET.L32';	! System macros
REQUIRE
	'LIB$:PFM.B32';			! Data structures
!
! Define VMS block structures
!
STRUCTURE
	BBLOCK [O, P, S, E; N] =
		[N]
		(BBLOCK + O) <P, S, E>;
!
! Useful macros
!
MACRO
!
! Macro to generate a pointer to a counted string
!
    CSTRING (STRING) = UPLIT BYTE (%CHARCOUNT (STRING), STRING)%,
!
! Macro to describe a string
!
    STRINGDESC (STRING) = %CHARCOUNT (STRING), UPLIT (%ASCII STRING)%,
!
! Macro to generate a quadword string descriptor
!
    DESCRIPTOR (STRING) = BBLOCK [DSC$C_S_BLN] INITIAL (STRINGDESC (STRING))%,
!
! Macro to generate a counted string
!
    COUNTEDSTRING (STRING) = BYTE (%CHARCOUNT (STRING), %ASCII STRING )%,
!
! Macro to execute a given sequence of commands and return if any error
!
    perform (command, errorcode) =
	BEGIN
	LOCAL
	    status;
	status = command;
	IF NOT .status			! If error detected,
	THEN
	    %IF %LENGTH GTR 1		! If errorcode arg is present
		%THEN
		    %IF (errorcode AND sts$m_severity) EQL sts$k_error		!If an error or severe, then return
			OR (errorcode AND sts$m_severity) EQL sts$k_severe
			%THEN BEGIN
			    SIGNAL (errorcode, %REMAINING, .status);
			    RETURN errorcode;
			    END;
		        %ELSE SIGNAL (errorcode, %REMAINING, .status);		!otherwise, signal and continue
			%FI
		%ELSE
		    RETURN .status;		! then return with error
	    %FI
	END%,
!
! Macro to execute a command which may have and RMS error return
! involving both a status and STV value
!
    rms_perform (command, errorcode, rms_stv) =
	BEGIN
	LOCAL
	    status;
	status = command;
	IF NOT .status			! If error detected,
	THEN
	    %IF %LENGTH GTR 1		! If errorcode arg is present
		%THEN
		    %IF (errorcode AND sts$m_severity) EQL sts$k_error		!If error or severe, signal and return
			OR (errorcode AND sts$m_severity) EQL sts$k_severe
			%THEN BEGIN
			    SIGNAL (errorcode, %REMAINING, .status);
			    RETURN errorcode;
			    END;
		        %ELSE SIGNAL (errorcode, %REMAINING, .status);		!otherwise just signal
			%FI
		%ELSE
		    RETURN .status;		! then return with error
	    %FI
	END%;

!
! $SHR_MESSAGES - a macro which defines facility-specific message codes
!	which are based on the system-wide shared message codes.
!
!	$SHR_MESSAGES ( name, code, (msg,severity), ... )
!
!	where:
!	    "name" is the name of the facility (e.g., LIBRAR)
!	    "code" is the corresponding facility code (e.g., 134)
!	    "msg" is the name of the shared message (e.g., BEGIN)
!	    "severity" is the desired message severity (either STS$K_severity
!					or severity)
!

MACRO
    $SHR_MESSAGES ( FACILITY_NAME, FACILITY_CODE ) =
	LITERAL
	SHR$MSG_IDS ( FACILITY_NAME, FACILITY_CODE, %REMAINING ); %,

    SHR$MSG_IDS ( FACILITY_NAME, FACILITY_CODE) [ VALUE ] =
	SHR$MSG_CALC ( FACILITY_NAME, FACILITY_CODE, %REMOVE (VALUE) ) %,

    SHR$MSG_CALC ( FACILITY_NAME, FACILITY_CODE, MSG_ID, SEVERITY ) =
	%NAME (FACILITY_NAME,'$_',MSG_ID) = %NAME ('SHR$_',MSG_ID) + 
			FACILITY_CODE*65536 +
	    		%IF %DECLARED (%NAME ('STS$K_',SEVERITY))
				%THEN %NAME ('STS$K_',SEVERITY)
				%ELSE SEVERITY %FI %;

LITERAL
    pfm$c_lisreclng = 132,				!Width of listing file
    pfm$c_pagesize = 512,				!Size of a page
    true = 1,
    false = 0;

LINKAGE
    JSB_3 = JSB (REGISTER = 0, REGISTER = 1, REGISTER = 2);

EXTERNAL ROUTINE
    lib$get_vm : ADDRESSING_MODE (GENERAL),		!Allocate virtual memory
    sys$fao : ADDRESSING_MODE (GENERAL),		!Formatted ASCII output
    sort_hash_table,					!Sort the hash table
    add_cache : JSB_3,					!Add address to cache
    lookup_cache : JSB_3;				!Lookup address in cache

GLOBAL
    pfm$al_cachepct,					!Pointer to PC cache table
    pfm$al_cachevat;					!Pointer to VA cache table

FORWARD ROUTINE
    get_zmem,						!Get zeroed memory
    put_line,						!Output a line
    print_data;						!Print the data

OWN
    hdr_by_pc : descriptor ('!10<PC!>!13<Page faults!>Addresses...'),
    hdr_by_va : descriptor ('!17<Virtual address!>!13<Page faults!>PCs...'),
    format_by_pc : descriptor ('!8XL!2* !11UL!2* '),
    format_by_va : descriptor ('!15XL!2* !11UL!2* '),
    format_addr : descriptor ('!9XL'),

    outputfab : $FAB (FAC = PUT,			!FAB for output file
			FNM = 'PFMLIST',
			DNM = 'SYS$DISK:.LIS',
			MRS = pfm$c_lisreclng,
			RAT = CR
			),
    outputrab : $RAB (RAC = SEQ,			!RAB for output file
			FAB = outputfab
			);

GLOBAL ROUTINE pfm$analyze =
BEGIN

!++
!	This program reads the output from the page fault monitor
!	and provides a printed output of the results.
!
! Inputs:
!
!	NONE
!
! Outputs:
!
!	Results are printed in the listing file, pfmanalyz.lis
!
!--

LOCAL
    pfmfab : BBLOCK [fab$c_bln],
    pfmrab : BBLOCK [rab$c_bln],
    status,
    cachentry : REF BBLOCK,
    hitentry : REF BBLOCK,
    lastentry : REF BBLOCK,
    valisthead,
    pclisthead,
    pfminbuf : BBLOCK [512];


$FAB_INIT (FAB = pfmfab,
	   FAC = GET,
	   FNM = 'PFM',
	   DNM = 'SYS$DISK:.DAT',
	   MRS = 512,
	   RFM = FIX
	);

$RAB_INIT (RAB = pfmrab,
	   UBF = pfminbuf,
	   USZ = 512,
	   FAB = pfmfab
	);

perform ($OPEN (FAB = pfmfab));					!Open the file
perform ($CONNECT (RAB = pfmrab));				!And connect for I/O
get_zmem (pfm$c_pagesize, pfm$al_cachepct);			!Allocate cache tables
get_zmem (pfm$c_pagesize, pfm$al_cachevat);
!
! Read the file until the end, and categorize the information
!
WHILE (status = $GET (RAB = pfmrab)) NEQ rms$_eof
DO BEGIN
    INCRU i FROM 0 TO 63
    DO BEGIN
	BIND
	    entry = .pfmrab [rab$l_rbf] + .i*8 : VECTOR [,LONG];

	IF .entry [0] EQL 0					!If pc is zero
	THEN EXITLOOP						! then end-of-record, get next
	ELSE BEGIN
	    add_cache (.entry [0], cachentry, .pfm$al_cachepct);
!
! Add the virtual address to the hit list for this pc
!
	    get_zmem (cache$c_length, hitentry);
	    lastentry = .cachentry [cache$l_lastent];
	    IF .lastentry EQL 0					!If first hit this pc
		THEN lastentry = cachentry [cache$l_hitlist];	! then fix pointer
	    lastentry [cache$l_link] = .hitentry;		!Link into hit list
	    cachentry [cache$l_lastent] = .hitentry;		! and make it new last entry
	    hitentry [cache$l_data1] = .entry [1];		!Set the virtual address into hit entry

!	    add_cache (.entry [1], cachentry, .pfm$al_cachevat);
!
! Add the pc to the hit list for this virtual address
!
!	    get_zmem (cache$c_length, hitentry);
!	    lastentry = .cachentry [cache$l_lastent];
!	    IF .lastentry EQL 0					!If first hit this pc
!		THEN lastentry = cachentry [cache$l_hitlist];	! then fix pointer
!	    lastentry [cache$l_link] = .hitentry;		!Link into hit list
!	    cachentry [cache$l_lastent] = .hitentry;		! and make it new last entry
!	    hitentry [cache$l_data1] = .entry [0];		!Set the pc into hit entry
	    END;
	END;
    END;
!
! Sort the hash tables
!
sort_hash_table (.pfm$al_cachepct, pclisthead);
!sort_hash_table (.pfm$al_cachevat, valisthead);
!
! Open the listing file
!
perform ($CREATE (FAB = outputfab));				!Create the output file
perform ($CONNECT (RAB = outputrab));				! and connect for I/O
!
! print the goodies
!
print_data (.pclisthead, hdr_by_pc, format_by_pc, 23);
!print_data (.valisthead, hdr_by_va, format_by_va, 30);

perform ($DISCONNECT (RAB = outputrab));
perform ($CLOSE (FAB = outputfab));
perform ($DISCONNECT (RAB = pfmrab));
perform ($CLOSE (FAB = pfmfab));

RETURN true;

END;

ROUTINE get_zmem (bytes, address) =
BEGIN

!++
!	Allocate virtual memory and zero it
!
!--

lib$get_vm (bytes, .address);
CH$FILL (0, .bytes, ..address);
RETURN true
END;

ROUTINE print_data (listhead, headerfaodesc, linefaodesc, firstpartspaces) =
BEGIN

!++
!	Print the info contained in the list
!
!--

LOCAL
    outdesc : BBLOCK [dsc$c_s_bln],
    entry : REF BBLOCK,
    hitptr : REF BBLOCK,
    outlen : WORD,
    bufdesc : BBLOCK [dsc$c_s_bln],
    outbuf : BBLOCK [pfm$c_lisreclng];

!
! Initialize the string descriptors
!
outdesc [dsc$a_pointer] = outbuf;
bufdesc [dsc$a_pointer] = outbuf;
bufdesc [dsc$w_length] = pfm$c_lisreclng;
!
! Output the header
!
SYS$FAO (.headerfaodesc, outlen, bufdesc);
outdesc [dsc$w_length] = .outlen;
put_line (outdesc);

entry = listhead;
!
! Go through the list and output the information
!
WHILE (entry = .entry [cache$l_link]) NEQ 0
DO BEGIN
    bufdesc [dsc$w_length] = pfm$c_lisreclng;
    bufdesc [dsc$a_pointer] = outbuf;
    SYS$FAO (.linefaodesc, outlen, bufdesc, .entry [cache$l_data1],
			.entry [cache$l_count]);
    bufdesc [dsc$w_length] = .bufdesc [dsc$w_length] - .outlen;	!Adjust descriptor
    bufdesc [dsc$a_pointer] = .bufdesc [dsc$a_pointer] + .outlen;
    hitptr = .entry [cache$l_lastent];
    hitptr [cache$l_link] = 0;
!
! Format the hit list for this entry
!
    hitptr = .entry [cache$l_hitlist];
    WHILE .hitptr NEQ 0
    DO BEGIN
	IF (.bufdesc [dsc$w_length] - 9) LSS 0		!Check for room this line
	THEN BEGIN
	    outdesc [dsc$w_length] = pfm$c_lisreclng - .bufdesc [dsc$w_length];
	    put_line (outdesc);				!Write line if no room
	    bufdesc [dsc$w_length] = pfm$c_lisreclng - .firstpartspaces;
	    bufdesc [dsc$a_pointer] = outbuf + .firstpartspaces;
	    END;
	SYS$FAO (format_addr, outlen, bufdesc, .hitptr [cache$l_data1]);	!Format the address
	bufdesc [dsc$w_length] = .bufdesc [dsc$w_length] - .outlen;
	bufdesc [dsc$a_pointer] = .bufdesc [dsc$a_pointer] + .outlen;
	hitptr = .hitptr [cache$l_link];		!Link to next in hit list
	END;
    IF .bufdesc [dsc$w_length] NEQ pfm$c_lisreclng
	THEN BEGIN
	    outdesc [dsc$w_length] = pfm$c_lisreclng - .bufdesc [dsc$w_length];
	    put_line (outdesc);
	    END;
    END;

RETURN true

END;

ROUTINE put_line (linedesc) =
BEGIN

!++
!	This routine outputs a line to the listing file
!
!--

MAP
    linedesc : REF BBLOCK;

outputrab [rab$w_rsz] = .linedesc [dsc$w_length];
outputrab [rab$l_rbf] = .linedesc [dsc$a_pointer];
$PUT (RAB = outputrab);
CH$FILL (%ASCII ' ', pfm$c_lisreclng, .linedesc [dsc$a_pointer]);

RETURN true
END;
END
ELUDOM
