	.title	cache	Cache data in hash table
	.ident	'V03-000'
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
;   FACILITY
;
;	Page fault monitor output analyzer
;
;   ABSTRACT
;
;	Routines to manipulate the data cache
;	in dynamic memory.
;
;   ENVIRONMENT
;
;	Native mode, user mode
;
;   AUTHOR
;
;	Tim Halvorsen, Benn Schreiber, July 1979
;
;   MODIFIED BY
;
;--

	.sbttl	Declarations
;
;	Symbol defintions
;

	$cachedef		; Cache definitions

	.psect	$code$,exe,nowrt

	.default displacement,word

	.sbttl	add_cache, Add cache entry given data item
;---
;
;	Add a cache entry to the cache and return
;	the address to the caller.
;
; Inputs:
;
;	R0 = data value
;	R1 = Address of longword to receive cache entry address
;	R2 = Address of cache table
;
; Outputs:
;
;	None
;---

add_cache::
	pushr	#^M<r2, r3, r4, r5>	; save registers
	bsbb	find_entry		; look it up
	blbc	r0,40$			; branch if not found, go insert
	incl	cache$l_count(r1)
	movl	r1,(r5)
	popr	#^m<r2, r3, r4, r5>
	rsb
;
; add to cache
;
40$:	movl	#cache$c_length,r0	; length of block
	bsbb	allocate		; allocate it
	movl	r1,(r5)			; return address to caller
	movl	cache$l_link(r2),cache$l_link(r1) ; and link into hash list
	movl	r1,cache$l_link(r2)
	movl	r4,cache$l_data1(r1)	; set data into cache entry
	movl	#1,r0			; return success
	movl	r0,cache$l_count(r1)	; count one hit
	popr	#^m<r2, r3, r4, r5>
	rsb

;++
;
;	Routine to look up item in the cache table
;
; Inputs:
;
;
; Outputs:
;
;	r0	0 not found
;		1 found
;	r1	pointer to entry (if found)
;	r2	pointer to previous entry
;
;--
find_entry:
	movq	r0,r4			; put vbn in r4, return addr in r5
	subl3	#1,r4,r0		; hash function is data-1
	bicl2	#^C<^X7F>,r0		; trim to table maximum
	moval	(r2)[r0],r2		; get address of previous
	movl	(r2),r1			; point to hash entry list
10$:	beql	30$			; if eql not in list
	cmpl	r4,cache$l_data1(r1)	; is this the entry?
	beql	20$			; if eql yes
	blssu	30$			; if lssu no, and not in list
	movl	r1,r2			; bring up the rear
	movl	cache$l_link(r1),r1	; and link to next
	brb	10$
20$:	movl	#1,r0
	rsb
30$:	clrl	r0
	rsb

	.sbttl	allocate, allocate dynamic memory
;---
;
;	allocate
;
;	this routine allocates dynamic memory by expanding the
;	region if necessary to obtain the requested amount of
;	memory.
;
; inputs:
;
;	r0 = size of block to allocate
;
; outputs:
;
;	r1 = address of allocated block
;
;---

allocate:
	pushl	r0			; Stack size of block to allocate
	pushal	-(sp)			; Stack address of location to receive address
	pushal	8(sp)			; Stack address containing size of block
	calls	#2,g^lib$get_vm		; Allocate virtual memory
	popl	r1			; get address of block
	pushr	#^m<r0,r1,r2,r3,r4,r5>	; save register over movc
	movc5	#0,(sp),#0,#cache$c_length,(r1) ; zero the block
	popr	#^m<r0,r1,r2,r3,r4,r5>	; restore registers
	tstl	(sp)+			; clear size from stack
	rsb

	.sbttl	lookup_cache, Lookup a given datum in the cache
;---
;
;	Lookup a specified datum in the cache
;	and return the address of the cache entry.
;
;   INPUTS:
;
;	R0 = datum to lookup
;	R1 = Address of longword to receive cache entry address
;	R2 = Address of cache table
;
;   OUTPUTS:
;
;	r0 = True if symbol found
;---

lookup_cache::
	pushr	#^m<r2, r3, r4, r5>
	bsbb	find_entry		; look it up
	movl	r1,(r5)			; return address
	popr	#^m<r2, r3, r4, r5>
	rsb


	.sbttl	sort_hash_table	sort the hash table into a list

;++
;
; Inputs:
;
;	4(ap)	Address of the cache table
;	8(ap)	Address to store listhead into
;
; Outputs:
;
;--

	.entry	sort_hash_table,^m<r2, r3, r4, r5>

;
; First remove all empty sub-list listheads from the table
;
	movzwl	#<512/4>,r2			;set length of table
	movl	4(ap),r3			;copy table address
	movl	r3,r5				;and again
10$:	tstl	(r3)+				;list head empty?
	beql	20$				;skip if eql
	movl	-4(r3),(r5)+			;no--move the entry
20$:	sobgtr	r2,10$				;loop for whole table
	clrl	@8(ap)				;assume no entries
	subl3	4(ap),r5,r0			;any entries?
	bneq	sort_list_heads			;if neq yes--continue
	ret					;no--all done
;
; now sort the sublists so that the first symbol in each sublist
; is less than the first symbol of the succeeding sublist
;
sort_list_heads:
	movl	4(ap),r3			;copy table address
10$:	movl	(r3)+,r0			;get address of next symbol
	cmpl	r3,r5				;any more listheads?
	beql	merge				;if eql no--go merge
	movl	(r3),r2				;get address of next
	cmpl	cache$l_data1(r0),cache$l_data1(r2) ;compare entries
	blssu	10$				;branch if order correct
	movl	r0,(r3)				;invert listhead entries
	movl	r2,-(r3)			;...
	cmpl	r3,4(ap)			;at front of listhead table?
	beql	10$				;if eql yes
	tstl	-(r3)				;no--backup one entry
	brb	10$
;
; now merge the sublists into one sorted list
;
merge:
	movl	8(ap),r4			;point to the listhead
	movl	4(ap),r3			;get table address
10$:	movl	(r3)+,r2			;get next entry
	beql	50$				;branch if no more
	movl	r2,(r4)				;link into list
	movl	r2,r4				;make new entry the last in list
	movl	(r2),-(r3)			;remove from list
	bneq	25$				;branch if more this sublist
	tstl	(r3)+				;no more--advance listhead pointer
20$:	cmpl	r3,r5				;any more sublists?
	beql	60$				;if eql no
25$:	movq	r3,-(sp)			;save merge parameters
30$:	movl	(r3)+,r4			;get address of first sublist entry
	cmpl	r3,r5				;any more sublists?
	beql	40$				;if eql no
	movl	(r3),r0				;yes--get it
	cmpl	cache$l_data1(r4),cache$l_data1(r0) ;order correct?
	blssu	40$				;if lssu ok
	movl	r4,(r3)				;no--swap order
	movl	r0,-4(r3)			;...
	brb	30$				;continue
40$:	movq	(sp)+,r3			;restore merge parameters
	brb	10$				;continue
50$:	cmpl	r3,r5				;at end yet?
	bneq	10$				;branch if not
60$:	clrl	(r4)				;clear link pointer in last
	ret					;all done

	.END
