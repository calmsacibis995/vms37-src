
	.TITLE	PFMFILWRT - PROCESS TO OUTPUT BUFFERS FOR PAGE FAULT MONITOR
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************

;++
; FACILITY: Performance Measurement
;
; ABSTRACT:
;
;	Process code to output buffers to disk for the Page Fault Monitor.
;	This process simply hibernates until awakened by code called
;	by PAGEFAULT.  It attempts to dequeue buffers and output them
;	to disk, then hibernates again.
;
; ENVIRONMENT: Kernel Mode
;
; AUTHOR:  Henry M. Levy , CREATION DATE: 20-July-1977
;
; MODIFIED BY:
;
;	V01.01		Benn Schreiber		29-Nov-1979
;
;--

	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;

;
; MACROS:
;

	$IPLDEF					; define processor priorities
	$PCBDEF					; define process control block
	$PMBDEF					; define monitor data base offsets
	$PRDEF					; define processor registers

;
; EQUATED SYMBOLS:
;

;
; OWN STORAGE:
;

;
; RMS data structures 
;

BUFFER:	.BLKB	512		; local buffer
PFMFAB:	$FAB	FAC=PUT,-
		FNA=PFMFILE,-
		FNS=PFMFILSIZ,-
		MRS=512,-
		ORG=SEQ,-
		RFM=FIX,-
		DEQ=10

PFMRAB:	$RAB	RAC=SEQ,-
		RBF=BUFFER,-
		RSZ=512,-
		FAB=PFMFAB
PFMFILE:	.ASCII/PFM.DAT/
PFMFILSIZ=.-PFMFILE
XITBLK:				; exit control block
	.LONG	0		; forward link
	.LONG	EXIT		; handler address
	.LONG	1		; number of arguments
	.LONG	XITREA		; address of exit reason
XITREA:	.LONG	0		; to store exit reason


;***** DEBUG

DBGCHN:	.LONG	0
DBGDSC:	.LONG	6
	.LONG	10$
10$:	.ASCII	/PFMCHN/
HIBMSG:	.ASCII	/HIBER/
WAKMSG:	.ASCII	/AWAKE/
PUTMSG:	.ASCII	/PUT  /
BADMSG:	.ASCII	/BAD  /
XITMSG:	.ASCII	/EXIT /

	.SBTTL	PFMFILWRT - initialization code

;++
;
; FUNCTIONAL DESCRIPTION:
;
;	Process code to create and maniuplate the data file for the
;	page fault monitor.  A file is created and opened for output.
;	The process then hibernates until awakened by the monitor.
;	It then attempts to dequeue a buffer and output it to disk.
;
; CALLING SEQUENCE:
;
;	CALLS/CALLG
;
; INPUT PARAMETERS:
;
;	none
;
; IMPLICIT INPUTS:
;
;	PFM$GL_PMBLST - array of page fault monitor control block
;			addresses indexed by process index
;	SCH$AL_CURPCB - location containing current PCB address
;
; OUTPUT PARAMETERS:
;
;	none
;
; IMPLICIT OUTPUTS:
;
;	none
;
; ROUTINE VALUE:
;
;	none
;
; SIDE EFFECTS:
;
;	none
;--

PFMFILWRT::
	.WORD	0			; register save mask

;
; Create and open the file
;

	$ASSIGN_S CHAN=DBGCHN,DEVNAM=DBGDSC	;***TEMP
	$DCLEXH_S DESBLK=XITBLK		; declare exit handler
	$CREATE	FAB=PFMFAB		; create the output file
	BLBC	R0,10$			; check error status
	$CONNECT RAB=PFMRAB		; now connect RAB to opened FAB
;	BLBS	R0,20$			; continue on normal 
	BLBS	R0,XX$
10$:	$EXIT_S	CODE=R0			; error on file creation

;
; Hibernate until awakened
;

XX$:
20$:	$OUTPUT	CHAN=DBGCHN,LENGTH=#5,BUFFER=HIBMSG
	$HIBER_S			; hibernate
	$OUTPUT CHAN=DBGCHN,LENGTH=#5,BUFFER=WAKMSG
	$SETAST_S ENBFLG=#0		; turn off (exit) ast
	BSBB	CLRQUE			; run through queue, output each buffer
	$SETAST_S ENBFLG=#1		; allow asts again
;	BRB	20$			; hibernate when none left
	BRB	XX$

;
; Routine to output buffers.  When a buffer is located, its contents
; is copied to local storage so the buffer may be released.  The local
; buffer is output to the file.
;

CLRQUE:
10$:	$CMKRNL_S GETNXT		; change to kernel to get next buffer
	BLBC	R0,20$			; leave if none left
	$PUT	RAB=PFMRAB		; output buffer
	BLBC	R0,PUTERR		; branch on error
	$OUTPUT	CHAN=DBGCHN,LENGTH=#5,BUFFER=PUTMSG
	CLRL	R0			; clear buffer index
15$:	TSTL	BUFFER[R0]		; test for zero entry in buffer ...
	BEQL	DONE			; ... and exit if found
	ACBL	#126,#2,R0,15$		; test every other entry
	BRB	10$			; look for more buffers to process
20$:	RSB				; return if no more buffers

;
; If an error on $PUT occurs, the queue is purged of buffers and
; the process exits.
;

PUTERR:
	$OUTPUT	CHAN=DBGCHN,LENGTH=#5,BUFFER=BADMSG
	PUSHL	R0			; save status
10$:	$CMKRNL_S GETNXT		; get next buffer and return
	BLBS	R0,10$			; continue until queue empty
20$:	POPL	R5			; restore status
	BRB	LEAVE			; go close file and exit

;
; Termination code.  All buffers are output and returned to the pool if
; needed, and the file is closed.
; 

DONE:
	MOVZWL	#SS$_NORMAL,R5		; termination code
LEAVE:	$SETAST_S ENBFLG=#1		; make sure asts enabled
	$EXIT_S	CODE=R5			; exit process

;
; Exit handler
;

EXIT:
	.WORD	^M<R6,R7>
	$OUTPUT	CHAN=DBGCHN,LENGTH=#5,BUFFER=XITMSG
	BSBW	CLRQUE			; empty queue if any left
	$DISCONNECT RAB=PFMRAB		; clean up RAB
	$CLOSE	FAB=PFMFAB		; close output file
	RET				; return

;
; Kernel mode routine to get next buffer, copy it to local storage,
; and return to monitor buffer.
;

GETNXT:
	.WORD	^M<R2,R3,R4,R5,R6,R7>	; entry mask
	MOVL	SCH$GL_CURPCB,R0	; get our pcb address
	MOVZWL	PCB$L_OWNER(R0),R0	; get creator process PID
	MOVL	@PFM$GL_PMBLST[R0],R7	; get PMB block address
	BEQL	10$			; error if none there
	SETIPL	W^IPLASTDEL		; lock while handling buffer
	REMQUE	@PMB$Q_SBPHDR(R7),R6	; get next buffer
	BVS	10$			; exit if none there
	MOVC3	#512,12(R6),BUFFER	; copy to local storage
	INSQUE	(R6),PMB$Q_HDR(R7)	; return to monitor
	SETIPL	#0			; back to level 0
	MOVZBL	#1,R0			; note success
	RET
10$:
	SETIPL	#0			; back to level 0
	CLRL	R0			; none found
	RET
IPLASTDEL:
	.LONG	IPL$_ASTDEL

	.END PFMFILWRT
