MODULE create ( IDENT = 'V03-000',
    		ADDRESSING_MODE(EXTERNAL=GENERAL),
		MAIN = create) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY:  CREATE Command
!
! ABSTRACT:
!
!	This utility creates files and directories.
!
! ENVIRONMENT:
!
!	VAX/VMS operating system. unprivileged user mode,
!
! AUTHOR:  Greg Robert, Nov 1979
!
! Modified by:
!
!	V02-007	MLJ0066		Martin L. Jack,	29-Dec-1981  14:52
!		Integrate new LIB$CREATE_DIR.  Modify so that unspecified
!		access categories default as they would for an omitted
!		/PROTECTION qualifier rather than to full access, both for
!		CREATE and CREATE/DIRECTORY.  Add /OWNER=PARENT to propagate
!		parent directory ownership.
!
!	V206	GRR2006		Gregory R. Robert	17-Nov-1981
!		Parse directory filespec before calling LIB$CREATE_DIR.
!		Moved directory and file create initialization logic
!		to independent subroutines: CREATE_DIR, CREATE_FILE.
!		Changed related file from resultant to expanded string.
!
!	V205	GRR2005		Gregory R. Robert	16-Nov-1981
!		Return "Directory not created" error if failure.
!
!	V204	GRR2004		G. R. ROBERT		12-JUN-1981
!		Changed some RMS calls to names the proper error
!		routine (RAB_ERROR instead of FAB_ERROR).  Permanently
!		included the CREATEDEF.REQ file to clean up the master disk.
!
!	V203	GRR0002		G. R. ROBERT		27-JAN-1980
!		Added 'stickiness' to file name parsing.
!		Made default version number propagate from parent
!		on CREATE/DIR with no explicit /VERSION_LIMIT.
!
!	V202	JAK0001		J. A. KRYCKA		23-JAN-1980
!		Set FAB$V_SQO in output FAB to improve efficiency over the
!		network.
!
!	V201	GRR0001		G. R. ROBERT		15-JAN-1980
!		CLEARED XAB ADDRESS IN OUTPUT_FAB DURING FILE CLOSES TO
!		ALLOW CREATION OF FILES WITH ANOTHER UIC ON ODS-1 STRUCTURES
!
!--

!
! Include files
!

LIBRARY 'SYS$LIBRARY:STARLET.L32';	! VAX/VMS common definitions

LIBRARY	'SYS$LIBRARY:CLIMAC.L32';	! CLI macros

LIBRARY 'SYS$LIBRARY:TPAMAC.L32';	! TPARSE macros

!
! Common program definitions
!

!
!	DEFINE VMS BLOCK STRUCTURES
!

STRUCTURE
	BBLOCK [O, P, S, E; N] =
		[N]
		(BBLOCK+O)<P,S,E>;

MACRO
!
!	Macro to signal a condition to the handler
!

    write_message(msg) =
	SIGNAL(msg			! Pass the message code
	%IF %LENGTH GTR 1		! and if more than 1 arg
	    %THEN ,%REMAINING %FI) %,	! then the rest too

!
! $SHR_MESSAGES - a macro which defines facility-specific message codes
!	which are based on the system-wide shared message codes.
!
!	$SHR_MESSAGES( name, code, (msg,severity), ... )
!
!	where:
!	    "name" is the name of the facility (e.g., COPY)
!	    "code" is the corresponding facility code (e.g., 103)
!	    "msg" is the name of the shared message (e.g., BEGIN)
!	    "severity" is the desired message severity (e.g., 1, 0, 2)
!

    $SHR_MESSAGES( FACILITY_NAME, FACILITY_CODE ) =
	LITERAL
	SHR$MSG_IDS( FACILITY_NAME, FACILITY_CODE, %REMAINING ); %,

    SHR$MSG_IDS( FACILITY_NAME, FACILITY_CODE) [ VALUE ] =
	SHR$MSG_CALC( FACILITY_NAME, FACILITY_CODE, %REMOVE(VALUE) ) %,

    SHR$MSG_CALC( FACILITY_NAME, FACILITY_CODE, MSG_ID, SEVERITY ) =
	%NAME(FACILITY_NAME,'$_',MSG_ID) = %NAME('SHR$_',MSG_ID) + FACILITY_CODE*65536 +
	    %IF %DECLARED(%NAME('STS$K_',SEVERITY))
		%THEN %NAME('STS$K_',SEVERITY)
		%ELSE SEVERITY %FI %;

!
!	Define message codes.
!

$shr_messages(msg,145,
!	Note: CLI$_CONFQUAL used for conflicting qualifiers
!
	(openin,error),		! Unable to open or connect to
				!  SYS$INPUT
	(readerr,error),	! error while reading SYS$INPUT
	(closein,error),	! Unable to close SYS$INPUT
	(openout,error),	! Unable to create or connect to
				!  user named output file
	(writeerr,error),	! error while writing output file
	(closeout,error),	! Unable to close output file
	(created,info),		! File or directory created
	(exists,info),		! File or directory already exists
	(syntax,severe),	! Parse failure
	(dirnotcre,error),	! Directory not created
	);

!
!	EQUATED SYMBOLS
!

LITERAL
    TRUE	= 1,			! BOOLEAN TRUE
    FALSE	= 0,			! BOOLEAN FALSE
    OK		= 1,			! SUCCESS RETURN CODE
    ERROR	= 2;			! ERROR RETURN CODE



!
!	Define CLI qualifier bit flag numbers (see create$flags)
!

LITERAL
    $EQULST (QUAL_,,0,1,
	(directory,),		! /DIRECTORY
	(owner_uic,),		! /OWNER_UIC
	(protection,),		! /PROTECTION
	(version_limit,),	! /VERSION_LIMIT
	(volume,),		! /VOLUME
	(log,),			! /LOG
	(file,));		! Cleared if /DIRECTORY


!
! Table of contents
!

FORWARD ROUTINE
    create,				! Main create routine
    get_output_file,			! Get next output file
    create_dir,				! Create directory initialization
    create_file,			! Create file initialization
    copy_in_out,			! Copy SYS$INPUT to output file
    log_results,			! Inform user of results
    get_createqls,			! Get command qualifiers
    owner_uic_parse,			! Parse /OWNER_UIC value
    protection_parse,			! Parse /PROTECTION value
    version_limit_parse,		! Parse /VERSION_LIMIT value
    volume_parse,			! Parse /VOLUME value
    handler,				! Condition handler
    fab_error,				! FAB error handler
    rab_error,				! RAB error handler
    create_error,			! LIB$CREATE_DIR error handler
    vm_error,				! LIB$(GET or FREE)_VM err hdlr
    cli_error;				! Handler for CLI errors


!
! External routines
!

EXTERNAL ROUTINE
    lib$tparse,				! Parses qualifier values
    lib$get_vm,				! Gets virtual memory
    lib$free_vm,			! Release virtual memory
    lib$create_dir,			! Creates directory entries
    sys$setdfprot;			! Read/set default file protection


!
! Storage definitions
!

OWN
    create$cli_util,			! Address of CLI service rout.
    create$flags	: BITVECTOR[32]	! General DCL flagword
	INITIAL(0),			! Initially none present
    qualifier$flags	: BITVECTOR[32] ! Qualifier presence bitmap
	INITIAL(0),			! Initially clear
    create$cli_work:
	VECTOR [cli$c_workarea,BYTE],	! CLI work area
    create$owner_uic	: INITIAL (0),	! Contains /OWNER_UIC value
    group		: INITIAL (0),	! Contains group of UIC
    member		: INITIAL (0),	! Contains member of UIC
    create$protection	: VECTOR[2,WORD]
			  INITIAL (0),	! Contains /PROTECTION value
    protection		: INITIAL (0),	! Protection value from TPARSE
    create$version_limit: INITIAL (0),	! Contains /VERSION_LIMIT value
    create$volume	: INITIAL (0),	! Contains /VOLUME value

    tparse_block	: BBLOCK [tpa$k_length0]	! TPARSE
			  INITIAL (tpa$k_count0,	!  parameter
					tpa$m_blanks OR !  block
					tpa$m_abbrev),

    worst_error: BBLOCK[4]		! Worst error encountered
		INITIAL(ss$_normal);	! Initially normal status

!
! Define RMS blocks
!

OWN

    input_nam_result:			! Resultant input name
		VECTOR [nam$c_maxrss,BYTE],

    input_nam_expanded:			! Expanded input name
		VECTOR [nam$c_maxrss,BYTE],

    input_nam:	$NAM(			! File name block
	ESA = input_nam_expanded,	! File name before open
	ESS = nam$c_maxrss,
	RSA = input_nam_result,		! File name after open
	RSS = nam$c_maxrss),

    input_fab:	$FAB(			! FAB for input
	CTX = msg$_openin,		! Initialize error message
	NAM = input_nam,		! Address of name block
	FNM = 'SYS$INPUT',		! File name
	FAC = GET),			! Open for input

    input_rab: $RAB(			! RAB for input
	CTX = msg$_readerr,		! Specify error message
	FAB = input_fab),

    output_nam_result:			! Resultant output name
		VECTOR [nam$c_maxrss,BYTE],

    output_nam_expanded:		! Expanded output name
		VECTOR [nam$c_maxrss,BYTE],

    output_rlf:	$NAM(			! Related file name block
	RSA = output_nam_expanded,	! File name of last parse
	RSS = nam$c_maxrss),

    output_nam:	$NAM(			! File name block
	RLF = output_rlf,		! Related file name block
	ESA = output_nam_expanded,	! File name before open
	ESS = nam$c_maxrss,
	RSA = output_nam_result,	! File name after open
	RSS = nam$c_maxrss),

    output_xabpro: $XABPRO(		! XAB for protection and uic
			),		! No preinitialized info

    output_xaball: $XABALL(		! XAB for volume specification
	ALN = LBN,			! Allocate by logical block #
	AOP = HRD,			! Report allocation errors
	NXT = output_xabpro),		! Chain to next XAB

    output_fab:	$FAB(			! FAB for output
	CTX = msg$_openout,		! Initialize error message
	FOP = SQO,			! Sequential access only
	NAM = output_nam,		! Address of name block
	RAT = CR),			! Define file as line oriented

    output_rab: $RAB(			! RAB for output
	CTX = msg$_writeerr,		! Specify error message
	FAB = output_fab);

!
!	Define CLI qualifier flags (see qualifier$flags)
!

$CLIQUALCODES (create,
		directory,
		owner_uic,
		protection,
		version_limit,
		volume,
		log);

!
! Command qualifier descriptor list
!

OWN

    directory_desc:
	$CLIQUALDESC(QDCODE = directory,
		     CLRLST = qual_file,
		     SETLST = qual_directory),

    owner_uic_desc:
	$CLIQUALDESC(QDCODE = owner_uic,
		     SETLST = qual_owner_uic,
		     TRUACT = owner_uic_parse),


    protection_desc:
	$CLIQUALDESC(QDCODE = protection,
		     SETLST = qual_protection,
		     TRUACT = protection_parse),

    version_limit_desc:
	$CLIQUALDESC(QDCODE = version_limit,
		     SETLST = qual_version_limit,
		     TSTLST = qual_file,
		     TRUACT = version_limit_parse),

    volume_desc:
	$CLIQUALDESC(QDCODE = volume,
		     SETLST = qual_volume,
		     TRUACT = volume_parse),

    log_desc:
	$CLIQUALDESC(QDCODE = log,
		     SETLST = qual_log),

    end_qual_desc:
	$CLIQUALEND;

!
! CLI control blocks and work areas
!


OWN
    initial_desc:			! CLI initialization descriptor
	$CLIREQDESC(RQTYPE = initprs,
		    RQFLGS = absadr,
		    ERRACT = cli_error),

    qual_desc:				! Parse all command qualifiers
	$CLIREQDESC(RQTYPE = getqual,
		    RQFLGS = absadr,
		    ERRACT = cli_error,
		    QUALST = directory_desc),

    output_desc:			! Get primary output file
	$CLIREQDESC(RQTYPE = input1,
		    RQFLGS = absadr,
		    ERRACT = cli_error),

    cleanup_desc:			! CLI cleanup request
	$CLIREQDESC(RQTYPE = endprm1,
		    RQFLGS = absadr,
		    ERRACT = cli_error),

    number_desc:
	$CLIREQDESC(RQTYPE = numerval,	! Get numeric value
		    RQFLGS = absadr,
		    ERRACT = cli_error);

!
! Parse protection "(SYSTEM:RWED,OWNER:RWED,GROUP:RWED,WORLD:RWED)"
!

$INIT_STATE (PROTECTION_STB, PROTECTION_KTB);

$STATE	(NEXTPRO,
	('SYSTEM', SYPR,, %X'000F0000', PROTECTION),
	('OWNER',  OWPR,, %X'00F00000', PROTECTION),
	('GROUP',  GRPR,, %X'0F000000', PROTECTION),
	('WORLD',  WOPR,, %X'F0000000', PROTECTION)
	);

$STATE	(SYPR,
	(':'),
	('='),
	(TPA$_LAMBDA, ENDPRO)
	);

$STATE	(SYPR0,
	('R', SYPR0,, %X'0001', PROTECTION),
	('W', SYPR0,, %X'0002', PROTECTION),
	('E', SYPR0,, %X'0004', PROTECTION),
	('P', SYPR0,, %X'0004', PROTECTION),
	('D', SYPR0,, %X'0008', PROTECTION),
	('L', SYPR0,, %X'0008', PROTECTION),
	(TPA$_LAMBDA, ENDPRO)
	);

$STATE	(OWPR,
	(':'),
	('='),
	(TPA$_LAMBDA, ENDPRO)
	);

$STATE	(OWPR0,
	('R', OWPR0,, %X'0010', PROTECTION),
	('W', OWPR0,, %X'0020', PROTECTION),
	('E', OWPR0,, %X'0040', PROTECTION),
	('P', OWPR0,, %X'0040', PROTECTION),
	('D', OWPR0,, %X'0080', PROTECTION),
	('L', OWPR0,, %X'0080', PROTECTION),
	(TPA$_LAMBDA, ENDPRO)
	);

$STATE	(GRPR,
	(':'),
	('='),
	(TPA$_LAMBDA, ENDPRO)
	);

$STATE	(GRPR0,
	('R', GRPR0,, %X'0100', PROTECTION),
	('W', GRPR0,, %X'0200', PROTECTION),
	('E', GRPR0,, %X'0400', PROTECTION),
	('P', GRPR0,, %X'0400', PROTECTION),
	('D', GRPR0,, %X'0800', PROTECTION),
	('L', GRPR0,, %X'0800', PROTECTION),
	(TPA$_LAMBDA, ENDPRO)
	);

$STATE	(WOPR,
	(':'),
	('='),
	(TPA$_LAMBDA, ENDPRO)
	);

$STATE	(WOPR0,
	('R', WOPR0,, %X'1000', PROTECTION),
	('W', WOPR0,, %X'2000', PROTECTION),
	('E', WOPR0,, %X'4000', PROTECTION),
	('P', WOPR0,, %X'4000', PROTECTION),
	('D', WOPR0,, %X'8000', PROTECTION),
	('L', WOPR0,, %X'8000', PROTECTION),
	(TPA$_LAMBDA, ENDPRO)
	);

$STATE	(ENDPRO,
	(',', NEXTPRO),
	(TPA$_EOS, TPA$_EXIT)
	);

!
! Parse UIC string and store binary value.
!

$INIT_STATE (OWNER_UIC_STB, OWNER_UIC_KTB);

$STATE	(,
	('PARENT',end_owner_uic),
	('['),
	('<')
	);

$STATE	(,
	(TPA$_OCTAL,,,,group)
	);

$STATE	(,
	(',')
	);

$STATE	(,
	(TPA$_OCTAL,,,,member)
	);

$STATE	(,
	(']'),
	('>')
	);

$STATE	(end_owner_uic,
	(TPA$_EOS, TPA$_EXIT)
	);

ROUTINE create =			! CREATE Main routine

!++
! Functional description
!
!	This is the main control routine for the create command.
!	It is called from the command language interpreter to 
!	create files and directories.
!
! Calling sequence
!
!	create() from the Command Language Interpreter
!
! Input parameters
!
!	AP = Address of argument list passed from CLI
!
! Output parameters
!
!	None
!
! Routine value
!
!	Worst error encountered during processing or SS$_NORMAL.
!
!----

BEGIN

LOCAL
    status;				! Status return

BUILTIN
    AP,					! Define register AP
    FP;					! Define register FP

BIND cli_params = AP: REF BBLOCK;	! Define parameter block

!
!	Declare signal handler in order to record the most severe
!	error message issued, to be returned on exit of image.
!

.fp = handler;				! Set condition handler


!
!	Save the address of the CLI call-back service routine
!

create$cli_util = .cli_params[cli$a_utilserv];


!
!	Initilize qualifier flag word to indicate this is a "file"
!	creation.  If /DIRECTORY is present, this bit will be cleared
!

qualifier$flags[qual_file] = TRUE;

!
!	Parse command qualifiers
!

get_createqls();				! Get command qualifiers


!
!	Initialize for file processing loop
!

output_desc[cli$v_concatinp] = true;		! Initialize get_file routine


!
! Begin the main loop of the program. Process each file in the input list
!

WHILE get_output_file () DO			! For each output file
    BEGIN
    IF .qualifier$flags[qual_directory]		! If /DIRECTORY specified
	THEN status = create_dir ()		!    then create a directory
	ELSE status = create_file ();		!    else create a file.

    !
    ! Now call the logging subroutine if requested by the user
    ! and the action was successful
    !

    IF ((.qualifier$flags[qual_log]) AND	! If logging requested
	(.status))				!    and status is ok
	THEN log_results (output_fab);		!    then call the logger.
    END;					! Loop until WHILE is false

RETURN .worst_error;			! Exit with worst error encountered
END;

ROUTINE create_dir =

!----
! Functional Description
!
!	Parse the file name and invoke the directory creation subroutine.
!
! Input Parameters
!
!	none
!
! Output Parameters
!
!	Results of action returned (already signaled).
!
!
!----

BEGIN

LOCAL
	p_owner_uic,			! Parameters to LIB$CREATE_DIR
	p_prot_enable,
	p_prot_value,
	p_max_versions,
	p_rvn,
	status,				! Catch all status return
	desc: VECTOR [2];		! Temporary work descriptor


!
! Parse the file name.  This is done to remove and passwords from
! the file name in case it is used in an error or logging message.
!

$PARSE (FAB=output_fab);	! Do RMS PARSE


!
! RMS parse's fail if the directory does not exists -- so instead
! of checking returned status look for an expanded name string.
! If name was so bad that no expansion resulted then inform the user.
!

IF .output_nam [nam$b_esl] EQL 0	! If no expanded name was obtained
THEN BEGIN
	fab_error (output_fab);		!    then report the error
	return (false);			!    and exit with status
     END;


!
! The parse results in a trailing ".;" which must be stripped
! off before calling LIB$CREATE_DIR.  But if the user supplied a
! filename, extension, or version then pass it on -- it will trigger
! an error when the directory create is attempted.
!

IF .output_nam [nam$b_name] NEQU 0	! If user supplied a filename
OR .output_nam [nam$b_type] GTRU 1	!    or a type
OR .output_nam [nam$b_ver] GTRU 1	!    or a version
THEN 0					! then just continue
ELSE					! else strip off trailin g".;"
   output_nam [nam$b_esl] = .output_nam [nam$b_esl] - 2;


!
! Create a temporary descriptor of the expanded name.
!

desc[0] =.output_nam[nam$b_esl];	! Create descriptor of parsed name
desc[1] =.output_nam[nam$l_esa];	!  using length and address from $NAM



!
! Invoke library create directory routine passing user supplied parameters.
!

p_owner_uic = p_prot_enable = p_prot_value = p_max_versions = p_rvn = 0;

IF .qualifier$flags[qual_owner_uic]
THEN
    p_owner_uic = create$owner_uic;

IF .qualifier$flags[qual_protection]
THEN
    BEGIN
    p_prot_enable = create$protection[1];
    p_prot_value = create$protection[0];
    END;

IF .qualifier$flags[qual_version_limit]
THEN
    p_max_versions = create$version_limit;

IF .qualifier$flags[qual_volume]
THEN
    p_rvn = create$volume;

status = lib$create_dir (		! Call library create/dir routine
	desc,				!  -directory name
	.p_owner_uic,			!  -owner UIC
	.p_prot_enable, .p_prot_value,	!  -directory protection
	.p_max_versions,		!  -default version limit
	.p_rvn);			!  -volume


!
! If an error occured during the create then signal it to the user
!
	
IF NOT .status THEN create_error (desc, .status);



!
! Lib$create_dir returns SS$_NORMAL if no creation was required and
! SS$_CREATED if a directory was actually created.  For the CREATE
! command an informational message will be issued if no directory was
! created and logging will be suppressed.
!

IF .status EQL SS$_NORMAL	! If no directories created
THEN BEGIN
	write_message(msg$_exists,	! Inform the user
		1,			!  -one FAO
		desc);			!  -directory name
	return false;			! Suppress logging
     END;

RETURN .status;

END;

ROUTINE create_file =

!----
! Functional Description
!
!	Create the output file and invoke the copy subroutine.
!
! Input Parameters
!
!	none
!
! Output Parameters
!
!	Results of the operation are returned (already signaled).
!
!
!----

BEGIN

LOCAL
	default_prot:	WORD,		! Process default file protection
	status;				! Catch all status return


output_fab[fab$l_ctx] = msg$_openout;	! Reinitialize error message

!
! Load the XAB with any user specified values for file ownership
! ([group,member]) or protection (System,Group,Owner,World: R W E D),
! or volume (relative volume number).
!

output_xabpro[xab$w_grp] = .group; 		! Load group
output_xabpro[xab$w_mbm] = .member;		! Load member

sys$setdfprot(0, default_prot);			! Read default protection
output_xabpro[xab$w_pro] =
    (.default_prot AND NOT .create$protection[1]) OR
    (.create$protection[0] AND .create$protection[1]);	! Load prot.

output_xaball[xab$w_vol] = .create$volume;	! Load volume

output_fab[fab$l_xab]	 = output_xaball;	! Link FAB to XAB



!
! Create the output file
!

status = $CREATE (				! Use RMS create facility
		FAB=output_fab,			! User file specification
		ERR=fab_error);			! Error handler


!
! Now call copy_in_out to copy SYS$INPUT to the user specified output file.
!

IF .status					! If create worked call copy
THEN status = copy_in_out ();			!


RETURN .status;

END;

ROUTINE get_output_file =

!----
! Functional Description
!
!	Obtain the next file specification from the output file
!	list and perform the initial parsing to ensure legality.
!
! Input Parameters
!
!	create$cli_util = Address of CLI call-back routine
!
! Output Parameters
!
!	TRUE returned if file name was produced
!	FALSE returned if command line exhausted
!
!	output_fab = FAB initialized for current file name
!	output_nam = NAM block associated with FAB
!
!----

BEGIN

!
!	If the output file list is depleted, then call back
!	CLI to perform cleanups and exit without filename.
!

IF NOT .output_desc[cli$v_concatinp]
THEN
    BEGIN
    (.create$cli_util)(cleanup_desc,
		    create$cli_work,
		    create$flags);
    RETURN false;
    END;

!
!	Get the next output file from CLI
!

(.create$cli_util)(output_desc,
		create$cli_work,
		create$flags);

!
!	Initialize the FAB for initial parsing
!

output_rlf[nam$b_rsl] = .output_nam[nam$b_esl];
output_fab[fab$l_fna] = .output_desc[cli$a_rqaddr];
output_fab[fab$b_fns] = .output_desc[cli$w_rqsize];

RETURN true;

END;

ROUTINE copy_in_out: =

!----
!
! Functional description
!
!	This routine is called from the main loop to copy from
!	from SYS$INPUT to the created file
!
!
! Input parameters
!
!	None
!
! Output parameters
!
!	First error encountered, or success is RETURNed
!
!----

BEGIN

LOCAL
    bytes_needed,			! Buffer size needed
    status;				! Status return value

IF NOT (status =
$CONNECT (RAB=output_rab,ERR=rab_error)	!Connect to output file
) THEN return (.status);

input_fab[fab$l_ctx] = msg$_openin;	! Assign the error message

IF NOT (status =
$OPEN (FAB=input_fab,ERR=fab_error)	! Open SYS$INPUT
) THEN return (.status);

!
! Use the maximum record size (MRS) returned by the $OPEN to
! request a buffer from virtual memory and store the returned
! memory address directly in the input RAB.  If MRS = 0 (signifying
! an undefined record size) then use 512 per T. Halvorsen.
!

bytes_needed =				! Define the byte count
	(IF NOT				! (IF valid MRS was returned
		(.input_fab[fab$w_mrs] EQL 0)
	THEN .input_fab[fab$w_mrs]	!   then use it
	ELSE 512);			! Else use the default


!
! Now request 'bytes_needed' bytes from VMS.  Have VMS store the
! address of the granted memory directly in the 'user buffer'
! address field of the RAB
!

IF NOT
	(status = lib$get_vm (		! Request virtual memory of
		bytes_needed,		!  -this many bytes
		input_rab[rab$l_ubf]))	!  -beginning at this address
THEN
		BEGIN			! If allocation fails
		vm_error(.status);	!  signal the user
		return (.status);	! Return if not fatal
		END;

!
! Now define the size of the user buffer (usz) equal to
! bytes_needed
!

input_rab[rab$w_usz] = .bytes_needed;	! usz <-- bytes_needed

!
! Now that the necessary buffer space is available CONNECT to the
! input file
!

IF NOT (status =
$CONNECT (RAB=input_rab,ERR=rab_error)	! Connect to SYS$INPUT
) THEN return (.status);

!
! This is the main copy loop.  As long as $GET is successful (that
! is we read a record) issue $PUT's.  Use the buffer address and
! record size returned by the RMS GET call to fill in the buffer
! address and size fields of the RAB used for the $PUT.
!

WHILE status =
	$GET (RAB=input_rab,ERR=rab_error)	     ! Read a record
   DO BEGIN
      output_rab[rab$l_rbf] = .input_rab[rab$l_rbf]; ! Map input buffer
      output_rab[rab$w_rsz] = .input_rab[rab$w_rsz]; ! Map input size
      $PUT (RAB=output_rab,ERR=rab_error);	     ! Write a record
      END;

IF NOT (.status EQL rms$_eof)		! If any status other than
THEN	return (.status);		!  expected eof, return it

!
! The file is now copied.  Assign the appropriate error messages
! (which are passed to the error routines via the 'user context'
! field (CTX) of the FAB) and $CLOSE both files.
!

input_fab[fab$l_ctx] = msg$_closein;	! Assign the error message
output_fab[fab$l_ctx] = msg$_closeout;	! Assign the error message

IF NOT (status =
$CLOSE (FAB=input_fab,ERR=fab_error)	! Close SYS$INPUT
) THEN return (.status);

!
! NOTE: If a file is created with different UIC via the /OWNER qualifier
! and it is on an ODS-1 structure, then you cannot change the file's
! attributes if an "owner" protection violation would occur.  In other
! words, as soon as you "$CREATE" it, you relinquish control to it.
! Therefore we disable XAB processing since it may call for illegal
! protection changes or some other illegal activity
!

output_fab[fab$l_xab] = 0;		! Delink attribute blocks

IF NOT (status =
$CLOSE (FAB=output_fab,ERR=fab_error)	! Close output file
) THEN return (.status);

!
! Now release the virtual memory acquired above
!

IF NOT
	(status = lib$free_vm (		! Release virtual memory of
		bytes_needed,		!  -this many bytes
		input_rab[rab$l_ubf]))	!  -beginning at this address
THEN
		BEGIN			! If deallocation failed
		vm_error(.status);	!  signal the user
		return (.status);	!  return if not fatal
		END;

return (true);

END;

ROUTINE log_results (fab): =

!----
!
! Functional description
!
!	This routine is called from the main loop whenever
!	logging is requested
!
! Input parameters
!
!	fab = Address of block describing the file
!	fab$l_nam = pointer to name block
!
! Output parameters
!
!	First error encountered, or TRUE is RETURNed
!
!----

BEGIN

MAP fab: REF BBLOCK;			! Define fab block format
BIND nam = .fab[fab$l_nam]: BBLOCK;	! Define name block

LOCAL desc: VECTOR[2];			! Temporary string descriptor

IF .nam[nam$b_rsl] NEQ 0		! IF result string nonblank,
THEN BEGIN
    desc[0] = .nam[nam$b_rsl];		! then display it
    desc[1] = .nam[nam$l_rsa];
    END
ELSE IF .nam[nam$b_esl] NEQ 0		! Or if expanded name nonblank
THEN BEGIN
    desc[0] = .nam[nam$b_esl];		! then display it
    desc[1] = .nam[nam$l_esa];
    END
ELSE BEGIN
    desc[0] = .fab[fab$b_fns];		! Otherwise, use original
    desc[1] = .fab[fab$l_fna];		! name string in FAB
    END;

write_message(msg$_created,1,DESC);	! Output an informational msg

RETURN (true);

END;

ROUTINE get_createqls: =

!----
!
! Functional description
!
!	This routine calls CLI to obtain the command line and
!	then all command qualifiers.
!
! Input parameters
!
!	None
!
! Output parameters
!
!	qualifier$flags	= Bitmap marking which qualifiers are present
!	First error encountered, or TRUE is RETURNed
!
!----

BEGIN

!
!	Initialize CLI for result parsing
!

(.create$cli_util)(initial_desc,	! Request result parsing
	create$cli_work,
	qualifier$flags);

!
!	Parse the command qualifiers
!

(.create$cli_util)(qual_desc,		! Parse command qualifiers
	 create$cli_work,		! with a work area, and
	 qualifier$flags);		! the address of a bitmap

return (true);

END;

ROUTINE owner_uic_parse (qual_desc_block): =

!----
!
! Functional description
!
!	This routine is called from CLI to parse the value
!	associated with the /OWNER_UIC qualifier.
!
! Input parameters
!
!	qual_desc_block = Address of CLI request block
!
! Output parameters
!
!	create$_owner_uic = Value if /OWNER_UIC specified
!	First error encountered, or TRUE is RETURNed
!
!----

BEGIN

LOCAL
    status;

MAP qual_desc_block: REF BBLOCK;	! Define block format

BIND
    uicvec = create$owner_uic : VECTOR [2,WORD];

!
! Move the descriptor returned by CLI into the TPARSE parameter block
!

tparse_block[tpa$l_stringcnt] = .qual_desc_block[cli$w_qdvalsiz];
tparse_block[tpa$l_stringptr] = .qual_desc_block[cli$a_qdvaladr];

!
! Now call TPARSE using the appropriate STATE and KEYWORD tables.
! If successful TPARSE will load storage as follows:
!
!	group <-- group id portion of UIC
!	member <-- member id portion of UIC
!

IF NOT
	(status = lib$tparse	(		! Call TPARSE with
			tparse_block,		!  -parameter block
			owner_uic_stb,		!  -state table
			owner_uic_ktb))		!  -keyword table

   THEN	BEGIN					! If TPARSE fails
		write_message (			! Inform the user
		msg$_syntax,			!  -of SYNTAX error
		1,				!  -one FAO arguement
		qual_desc_block[cli$q_qdvaldesc],! -UIC string
		.status);			!  -plus original error
		return (.status);		! Only if non-fatal
	END;


!
! Now merge the group and member into a single longword
!

uicvec[0] = .member;				! Merge member
uicvec[1] = .group;				! Merge group

return (true);

END;

ROUTINE protection_parse (qual_desc_block): =

!----
!
! Functional description
!
!	This routine is called from CLI to parse the value
!	associated with the /PROTECTION qualifier.
!
! Input parameters
!
!	qual_desc_block = Address of CLI request block
!
! Output parameters
!
!	create$_protection = Value if /PROTECTION specified
!	First error encounted, or TRUE is RETURNed
!
!----

BEGIN

LOCAL
    status;

BIND
provec = protection : VECTOR [2,WORD];

MAP qual_desc_block: REF BBLOCK;	! Define block format

!
! Move the descriptor returned by CLI into the TPARSE parameter block
!

tparse_block[tpa$l_stringcnt] = .qual_desc_block[cli$w_qdvalsiz];
tparse_block[tpa$l_stringptr] = .qual_desc_block[cli$a_qdvaladr];

!
! Now call TPARSE using the appropriate STATE and KEYWORD tables.
! If successful TPARSE will load storage as follows:
!
!	protection[low__word] <__ protection value
!	protection[high_word] <-- group mask
!

IF NOT
	(status = lib$tparse	(		! Call TPARSE with
			tparse_block,		!  -parameter block
			protection_stb,		!  -state table
			protection_ktb))	!  -keyword table

   THEN	BEGIN					! If TPARSE fails
		write_message (			! Inform the user
		msg$_syntax,			!  -of SYNTAX error
		1,				!  -one FAO arguement
		qual_desc_block[cli$q_qdvaldesc],! -/PROT string
		.status);			!  -plus original error
		return (.status);		! Only if non-fatal
	END;

!
! Now load the low order word of PROTECTION into create$protection.  This word
! must be complemented because TPARSE has reversed the bits.  The high order
! word is a mask indicating which groups were specified (system, group, owner,
! or world).

create$protection[0] = NOT .provec[0];
create$protection[1] = .provec[1];

return (true);

END;

ROUTINE version_limit_parse (qual_desc_block): =

!----
!
! Functional description
!
!	This routine is called from CLI to parse the value
!	associated with the /VERSION_LIMIT qualifier.
!
! Input parameters
!
!	qual_desc_block = Address of CLI request block
!
! Output parameters
!
!	create$_version_limit = Value if /VERSION_LIMIT specified
!	First error encountered, or TRUE is RETURNed
!
!----

BEGIN

MAP qual_desc_block: REF BBLOCK;	! Define block format

(.create$cli_util)(number_desc,		! Get value from CLI
	 create$cli_work,
	 .qual_desc_block);		! using original request block

create$version_limit = .number_desc[cli$l_rqvalu];	! Store result

return (true);

END;

ROUTINE volume_parse (qual_desc_block): =

!----
!
! Functional description
!
!	This routine is called from CLI to parse the value
!	associated with the /VOLUME qualifier.
!
! Input parameters
!
!	qual_desc_block = Address of CLI request block
!
! Output parameters
!
!	create$_volume = Value if /VOLUME specified
!	First error encountered, or TRUE is RETURNed
!
!----

BEGIN

MAP qual_desc_block: REF BBLOCK;	! Define block format

(.create$cli_util)(number_desc,		! Get value from CLI
	 create$cli_work,
	 .qual_desc_block);		! using original request block

create$volume = .number_desc[cli$l_rqvalu];	! Store result


return (true);

END;

ROUTINE handler (signal_args, mechanism_args) =

!---
!
!	This condition handler gets control on any signalled
!	condition in order to save the highest severity error
!	to be returned by exit from the image.
!
! Inputs:
!
!	signal_args = Address of signal argument list
!	mechanism_args = Address of mechanism argument list
!
! Outputs:
!
!	worst_error is updated with highest severity error.
!
!---

BEGIN

MAP
    signal_args: REF BBLOCK,			! Adr of signal arg list
    mechanism_args: REF BBLOCK;			! Adr of mech. arg list

LOCAL
    code: BBLOCK [LONG];			! Condition code (longword)

code = .signal_args [chf$l_sig_name];		! Get condition code

IF .code [sts$v_severity] GTR .worst_error [sts$v_severity]
THEN
    worst_error = .code OR sts$m_inhib_msg;	! Set new worst error

ss$_resignal					! Continue signalling

END;

ROUTINE fab_error (fab): =

!----
!
! Functional description
!
!	This routine is called from RMS whenever an error
!	occurs during an RMS file function call.
!
! Input parameters
!
!	fab = Address of block used in the RMS call.
!	fab$l_nam = pointer to name block
!	fab$l_ctx = error message to be used
!
! Output parameters
!
!	Expanded error messages to user
!	FAB status is RETURNed
!
!----

BEGIN

MAP fab: REF BBLOCK;			! Define fab block format
BIND nam = .fab[fab$l_nam]: BBLOCK;	! Define name block

LOCAL desc: VECTOR[2];			! Temporary string descriptor

IF .nam[nam$b_rsl] NEQ 0		! IF result string nonblank,
THEN BEGIN
    desc[0] = .nam[nam$b_rsl];		! then display it
    desc[1] = .nam[nam$l_rsa];
    END
ELSE IF .nam[nam$b_esl] NEQ 0		! Or if expanded name nonblank
THEN BEGIN
    desc[0] = .nam[nam$b_esl];		! then display it
    desc[1] = .nam[nam$l_esa];
    END
ELSE BEGIN
    desc[0] = .fab[fab$b_fns];		! Otherwise, use original
    desc[1] = .fab[fab$l_fna];		! name string in FAB
    END;

write_message(.fab[fab$l_ctx],1,DESC,	! Output an error message
		.fab[fab$l_sts],	! with fab error code
		.fab[fab$l_stv]);	! and secondary code

RETURN (.fab[fab$l_sts]);

END;

ROUTINE rab_error (rab): =

!----
!
! Functional description
!
!	This routine is called from RMS whenever an error
!	occurs during an RMS record function call.
!
! Input parameters
!
!	rab = Address of block used in the RMS call.
!	rab$l_ctx = error message to be used
!	rab$l_fab = pointer to fab block
!	fab$l_nam = pointer to name block
!
! Output parameters
!
!	Expanded error message to user
!	RAB status is RETURNed
!
!----

BEGIN

MAP rab: REF BBLOCK;			! Define RMS block format
BIND
fab = .rab[rab$l_fab] : BBLOCK,	! Define fab
nam = .fab[fab$l_nam] : BBLOCK;	! Define nam

LOCAL desc: VECTOR[2];			! Temporary string descriptor

IF ((.rab [rab$l_sts] EQL rms$_eof)	! If error is end of file
   AND 					! and
   (.rab[rab$l_ctx] EQL msg$_readerr))	! this was a read call
THEN					! then
    RETURN (.rab[rab$l_sts]);		! don't bother to report it

IF .nam[nam$b_rsl] NEQ 0		! IF result string nonblank,
THEN BEGIN
    desc[0] = .nam[nam$b_rsl];		! then display it
    desc[1] = .nam[nam$l_rsa];
    END
ELSE IF .nam[nam$b_esl] NEQ 0		! Or if expanded name nonblank
THEN BEGIN
    desc[0] = .nam[nam$b_esl];		! then display it
    desc[1] = .nam[nam$l_esa];
    END
ELSE BEGIN
    desc[0] = .fab[fab$b_fns];		! Otherwise, use original
    desc[1] = .fab[fab$l_fna];		! name string in FAB
    END;

write_message(.rab[rab$l_ctx],1,DESC,	! Output an error message
		.rab[rab$l_sts],	! with RMS error code
		.rab[rab$l_stv]);	! and secondary code

RETURN (.rab[rab$l_sts]);

END;

ROUTINE create_error (string_desc,status): =

!----
!
! Functional description
!
!	This routine is called when an error is returned
!	by LIB$CREATE_DIR.
!
! Input parameters
!
!	string_desc = address of a string descriptor for the name
!	  of the directory being processed
!	status = error status passed by caller
!
! Output parameters
!
!	Expanded error message to user
!	Input status is RETURNed
!
!----

BEGIN

MAP string_desc: REF BBLOCK;

!
!	Output error message 
!

write_message(msg$_dirnotcre,1,.string_desc,.status);

RETURN (.status);

END;

ROUTINE vm_error (status): =

!----
!
! Functional description
!
!	This routine is called when an error is returned 
!	by LIB$GET_VM or LIB$FREE_VM
!
! Input parameters
!
!	status = error status passed by caller
!
! Output parameters
!
!	Expanded error message to user
!	Input status is RETURNed
!
!----

BEGIN




!
!	Output error message
!

write_message(.status);

RETURN (.status);

END;

ROUTINE cli_error (cli_block,error): =

!----
!
! Functional description
!
!	This routine is called as an error handler for
!	CLI errors.
!
! Input parameters
!
!	cli_block = Address of CLI request block
!	error = CLI error message
!
! Output parameters
!
!	Expanded error message to user
!	CLI error is RETURNed
!
!----

BEGIN

MAP cli_block: REF BBLOCK;		! Define CLI request block

signal_stop(.error);

RETURN (.error);

END;

END
ELUDOM
