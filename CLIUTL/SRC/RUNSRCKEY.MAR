	.TITLE	RUNSRCKEY- SEARCH FOR KEYWORD MATCH
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY: RUN-DETACHED CLI UTILITY
;
; ABSTRACT:
;
; THIS MODULE PERFORMS A KEYWORD SEARCH AND SETS OR CLEARS THE APPROPRIATE
; BITS IN A MASK WORD IF THE KEYWORD IS FOUND.
;
;
; ENVIRONMENT: USER MODE
;
; AUTHOR: C. A. MONIA	, CREATION DATE:12-AUG-1977
;
; MODIFIED BY:
;
;	, : VERSION 00
;--

	.SBTTL	DECLARATIONS

;
; MACROS
;
; DEFINE DATA STRUCTURE
;
 
	.MACRO	$DSECT
	.PSECT	$ABS$,ABS
	.ENDM
;
; EQUATED SYMBOLS:
;
; KEYWORD ENTRY OFFSETS
;
 
	$DSECT
$$$=.
 
COUNT:	.BLKL	1			; STRING COUNT
ADDR:	.BLKL	1			; STRING ADDRESS
MASK:	.BLKQ	1			; MASK
COND:	.BLKL	1			; CONDITION IF TRUE (0 = SET BITS, 1=CLEAR)
KEYLEN:	.BLKL	0			; LENGTH OF KEYWORD ENTRY
 
;
; DEFINE ARGUMENT LIST OFFSETS
;
 
.=$$$
 
	.BLKL	1			; LENGTH OF ARGUMENT LIST
KEYLIST:.BLKL	1			; ADDRESS OF KEYWORD LIST
STRNG:	.BLKL	1			; ADDRESS OF STRING DESCRIPTOR
OUMASK:	.BLKL	1			; ADDRESS OF QUADWORD MASK
 
.=$$$
;+
; RUN_SRCKEY - SEARCH KEYWORD LIST FOR MATCH
;
; THIS PROCEDURE IS CALLED TO SEARCH A TABLE OF KEYWORDS FOR ONE AND ONLY
; ONE MATCH. IT RETURNS INFORMATION INDICATING SUCCESS OR FAILURE , THE VAL-
; UE OF AN ASSOCIATED BIT MASK (IF THE SEARCH SUCCEEDED) AND THE NUMBER OF
; MATCHING KEYWORD STRINGS FOUND.
;
; THE PROCEDURE WILL SEARCH FOR A UNIQUE KEYWORD HAVING A SUBSTRING THAT MATCH-
; ES THE INPUT STRING.
;
;
; INPUTS:
;
;	AP POINTS TO AN ARGUMENT LIST IN THE FOLLOWING FORMAT:
;
;		.LONG	3		; COUNT
;		.LONG	KEYLIST		; ADDRESS OF KEYWORD LIST
;		.LONG	STRNG		; ADDRESS OF CANDIDATE STRING DESCRIPTOR
;		.LONG	MASK		; ADDRESS OF QUADWORD MASK
;
;	EACH ENTRY IN THE LIST IS IN THE FOLLOWING FORMAT:
;
;		.LONG	COUNT		; STRING COUNT
;		.LONG	ADDR		; STRING ADDRESS
;		.QUAD	MASK		; MASK TO BE SET
;		.LONG	COND		; STATE IF CONDITION IS TRUE (0=SET,-1=CLEAR)
;
;	A QUADWORD OF ZERO TERMINATES THE LIST.
;
;	THE PREFIX 'NO' PRECEDING A STRING IS USED TO  SPECIFY NEGATION OF
;	THE KEYWORD.
;
; OUTPUTS:
;
;	R0 LBS = SUCCESS, A SINGLE MATCHING VALUE WAS FOUND
;
;	R1 = 1
;	THE BITS SPECIFIED IN THE KEYWORD TABLE ARE SET (OR CLEARED) IN THE
;	MASK WORD.
;
; 	R0 LBC = FAILURE
;
;	R1 = 0, NO MATCHING KEYWORD FOUND
;	R1 > 1, MORE THAN ONE MATCHING KEYWORD FOUND
;-
 
	.PSECT	RUNSRCKEY,RD,BYTE
 
RUN_SRCKEY::				;
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8> ; SAVE R2 - R8
	CLRL	R4			; RESET MATCH COUNT
	MOVL	KEYLIST(AP),R6		; GET ADDRESS OF KEYWORD LIST
	MOVL	OUMASK(AP),R8		; GET ADDRESS OF QUADWORD MASK
10$:					;
	MOVQ	@STRNG(AP),R0		; GET ADDRESS OF CANDIDATE STRING DESCR.
	MOVQ	(R6),R2			; GET ADDRESS OF STRING TO TEST
	BEQL	40$			; IF EQL AT END OF LIST
	CLRL	R7			; ASSUME KEYWORD NOT NEGATED
	CMPW	R0,#2			; TEST LENGTH FOR POSSIBLE NEGATION
	BLEQU	20$			; IF LEQU NO ROOM FOR NEGATION
	CMPW	(R1),#^A/NO/		; TEST FOR NEGATION
	BNEQ	20$			; IF NEQ NO NEGATION
	DECL	R7			; COMPLEMENT MASK
	ADDL	#2,R1			; STEP PAST NEGATE
	SUBL	#2,R0			; ...
20$:					;
	CMPW	R2,R0			; FIND SUBSTRING
	BLSSU	30$			; IF LSSU CANDIDATE LONGER, SKIP TO NEXT
	CMPC3	R0,(R1),(R3)		; SEE IF THERE IS A MATCH
	BNEQ	30$			; IF NEQ, NO MATCH
	MOVL	R6,R5			; SAVE ADDRESS OF KEY TABLE ENTRY
	INCL	R4			; INCREMENT MATCH COUNT
30$:					;
	ADDL	#KEYLEN,R6		; POINT TO NEXT TABLE ENTRY
	BRB	10$			; GO AGAIN
40$:					;
	CLRL	R0			; ASSUME INVALID KEYWORD
	MOVL	R4,R1			; COPY MATCH COUNT
	CMPL	R1,#1			; FIND UNIQUE ENTRY?
	BNEQ	50$			; IF NEQL NO
	INCL	R0			; SET SUCCESS
	BISL	MASK(R5),(R8)+		; ASSUME MASK IS TRUE IF SET
	BISL	MASK+4(R5),(R8)		; ....
	XORL	COND(R5),R7		; SET STATE
	BEQL	50$			; IF EQL MASK SET
	BICL	MASK+4(R5),(R8)		; ELSE CLEAR MASK
	BICL	MASK(R5),-(R8)		; ...
50$:					;
	RET				;
 
	.END
