	.TITLE	SHOW$DEVI_UTL	- SHOW DEVICES: UTILITY FUNCTIONS
	.IDENT	'V03-001'
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;

;++
;  FACILITY :	DCL SHOW COMMAND
;
; ABSTRACT:	SHOW DEVICES  COMMAND OPTION.
;		This module implements the DCL SHOW DEVICES command.
;		Information retrieved from the system's device data base
;		is printed on SYS$OUTPUT:, selected according to qualifiers
;		specified in the command line.
;
;
; ENVIRONMENT:
;
;	RUNS IN USER MODE BUT REQUIRES PRIVILEGE TO CHANGE MODE TO KERNEL
;
;
; AUTHOR: 	B. U. WALTHER,	CREATION DATE: 17-OCT-1977
;
; MODIFIED BY:
;
;	V03-001	GAS0055	Gerry Smith	15-Mar-1982
;		Add check to UCB scan, to check for the situation in
;		which a DDB exists, with no UCB's attached.
;
;	V02-009	GAS0048	Gerry Smith	15-Feb-1982
;		Change the caching check to check to see if the ACP is
;		an ODS2 ACP.  If not, skip caching.
;
;	V02-008	GAS0044	Gerry Smith	8-Feb-1982
;		If device is a terminal or network device, skip the
;		caching.
;
;	V02-007 GAS0042	Gerry Smith	4-Feb-1982
;		Add caching parameters for SHOW DEVICE/FULL.
;
;	V02-006	GWF0009	Gary W. Fowler	8-Dec-1980
;		Increase SCRATCH_PAGES to 128 from 32 to increase
;		scratch space.
;
;	V02-005	GWF0005	Gary W. Fowler	1-Dec-1980
;		Added 6250 bpi as valid density for mag tapes.
;
;	V02-004	SGD			27-MAR-1980	12:00
;		Ignore VCB of device if not mounted.
;
;	V03	GWF0001 Gary Fowler	18-Dec-1979	13:39
;		Fix output of SHOW DEV/MOUNTED for NET and RT devices.
;
;	V02	SGD0036	S.G.D.		30-Oct-1979	16:10
;		Fix output for NET and RT devices.
;
;--


	.SBTTL	DECLARATIONS

;
; INCLUDE FILES:
;

	$DDBDEF				; DEVICE DATA BLOCK DEFINITIONS
	$UCBDEF				; UNIT CONTROL BLOCK DEFINITIONS
	$DEVDEF				; DEVICE CHARACTERISTICS BITS
	$VCBDEF				; VOLUME CONTROL BLOCK DEFINITIONS
	$AQBDEF				; ACP QUEUE HEADER
	$PCBDEF				; PROCESS CONTROL BLOCK
	$PRDEF				;
	$SHRDEF				; define shared messages
	$STSDEF				; define status codes
	$MVLDEF				; mounted volume list
	$RVTDEF				; relative volume list
	$MTDEF				; magtape characteristics
	$VCADEF				; cache block offsets

;
; MACROS:
;
;+
; The $SHR_MESSAGES macro defines facility-specific message codes
;	which are based on the system-wide shared message codes.
;
;	$SHR_MESSAGES	name, code, <<msg,severity>, ... >
;
;	where:
;	    "name" is the name of the facility (e.g., COPY)
;	    "code" is the corresponding facility code (e.g., 103)
;	    "msg" is the name of the shared message (e.g., BEGIN)
;	    "severity" is the desired message severity (e.g., 1, 0, 2, 4)
;
;-
	.MACRO	$SHR_MESSAGES	NAME,CODE,MSGCODES
;
	.IF	NDF,SHR$K_SHRDEF  ; issue $SHRDEF if not done yet
		SHR$K_SHRDEF = 1 ; define symbol to indic $SHRDEF done
		$SHRDEF		 ; define shared message codes
	.ENDC
	.IRP	MSGPAIR, <'MSGCODES>
		$SHRMSG_COD 'NAME', 'CODE', MSGPAIR
	.ENDR
	.ENDM
	.MACRO	$SHRMSG_COD NAME, CODE, MSG, SEVERITY
;
	.IF	IDN,SEVERITY,WARNING    ; if WARNING, set 0 sev
	  'NAME'$_'MSG' = 0	        ; set 0 sev (WARNING)
	.IFF
	  .IF	IDN,SEVERITY,SUCCESS    ; if SUCCESS, set 1 sev
	    'NAME'$_'MSG' = 1	        ; set 1 sev (SUCCESS)
	  .IFF
	    .IF	IDN,SEVERITY,ERROR      ; if ERROR, set 2 sev
	      'NAME'$_'MSG' = 2	        ; set 2 sev (ERROR)
	    .IFF
	      .IF IDN,SEVERITY,INFO     ; if INFO, set 3 sev
	        'NAME'$_'MSG' = 3       ; set 3 sev (INFO)
	      .IFF
	        .IF IDN,SEVERITY,SEVERE ; if SEVERE, set 4 sev
	          'NAME'$_'MSG' = 4     ; set 4 sev (SEVERE)
	        .IFF
	          'NAME'$_'MSG' = 'SEVERITY ; set specified sev
	        .ENDC
	      .ENDC
	    .ENDC
	  .ENDC
	.ENDC
	 'NAME'$_'MSG' = 'NAME'$_'MSG'+SHR$_'MSG'+<'CODE'@16>
	.ENDM


;
; EXPBITS : 	EXPAND BITS
;	This macro produces in_line code to fill a table of longwords
;	according to a bit list.
;	An entry is copied from a text table for each bit set in the bit list.
;	Before testing, a mask containing the relevant bits is applied to the
;	bit list.
;
; COMPLETION CODES :
;
;	R0:	1	SUCCESS
;		0	OUTPUT BUFFER OVERFLOW
;	R1:	LENGTH IN longwords OF RESULTANT STRING
;
; REGISTER DESTROYED:
;
;	R0,R1,R2,R3,R4
;
	.MACRO	EXPBITS		BITLIS,-	; ADDRESS  OF BITLIST LONGWORD
				MASK,-		; MASK CONTAINING THE RELEVANT BITS (LITERAL)
				TEXT,-		; ADDRESS OF TEXT TABLE
				BUFF_ADDR,-	; ADDRESS OF RESULTANT BUFFER
				MAX_BITS,-	; MAXIMUM NUMBER OF BITS TO TEST
				?L1,?L2		; CREATED LABELS
	MOVL	#1,R0			; ASSUME SUCCESS
	MOVL	BITLIS,R2		; TEMPORARY STORAGE
	BICL	#^C<MASK>,R2		; 'AND' BITLIST WITH MASK
	CLRL	R3			; CURRENT BIT POSITION
	CLRL	R1			; INDEX INTO OUTPUT_BUFFER
L1:
	SUBL3	R3,#31,R4		; COMPUTE LENGTH OF FIELD TO TEST
	FFS	R3,R4,R2,R3		; FIND NEXT BIT SET IN FIELD
	BEQLU	L2			; NO MORE BITS SET
	MOVL	TEXT[R3],BUFF_ADDR[R1]	; TRANSFER TEXT
	INCL	R3			; STARTING POSITION FOR NEXT TEST
	AOBLEQ	#MAX_BITS,R1,L1		; CONTINUE IF BUFFER DOES NOT OVERFLOW
	CLRL	R0			; SIGNAL BUFFER OVERFLOW
L2:
	.ENDM	EXPBITS

;
; EQUATED SYMBOLS:
;

	_VIELD	DEVI,0,<-			; DEFINE LOCAL FLAGS
			<FIRSTL,,M>,-		; FLAG FOR FIRST LINE PRINTED
			>

	$SHR_MESSAGES	SHOW,120,<-	; define shared messages
		<BADLOGIC,ERROR>,-	;
			>

USER_MODE	= 3		; DEFINE USER ACCESS MODE
PROGRAM_REGION	= 0		; DEFINE PROGRAM REGION
SCRATCH_PAGES	= 128		; NUMBER OF PAGES NEEDED TO EXPAND VIRTUAL SPACE
MAX_DDBS_DONE	= 64		; DEFINE SIZE OF 'DDBS_DONE' TABLE
VOLNAME_LENGTH = 12		; LENGTH OF A FILES-11 VOLUME LABEL
FULL_MAX_DEVCH = 10		; maximum number of simulataneously
				; displayed device characteristics
				; WARNING : format in SHOW$MSG_TXT has to correspond
BRIE_MAX_DEVCH = 4		; for the /FULL and /BRIEF options respectively
FULL_MSK_DEVCH = -		; list of device characteristics displayed in /FULL
<DEV$M_SPL!DEV$M_DMT!DEV$M_GEN!DEV$M_MNT!DEV$M_ALL!DEV$M_FOR!DEV$M_SWL!DEV$M_ELG>
BRIE_MSK_DEVCH = -		; list of device characteristics displayed in /BRIEF
	<DEV$M_SPL!DEV$M_ALL!DEV$M_MNT!DEV$M_FOR!DEV$M_DMT>
PCB$S_LNAME	= 16		; ******* TEMPORARY
MVL$S_VOLLBL	=6		; ******* TEMPORARY

;
; Define structure on scratch area.
;
;	This structure defines storage needed to copy information relative
;	to one physical device from the system's I/O data base.
;	The same structure is used as an FAO parameter list when processing
;	both the /BRIEF or /FULL printing options.
;

	$DEFINI	FORM
$DEF	FORM_A_DEVINFO		; START OF LIST FOR PHYSICAL DEVICE INFORMATION
$DEF	FORM_A_DEVNAM
	.BLKL	1		; POINTER TO DEVICE NAME	(B/F)
				; (filled in at formatting time)

;
; device unit information (UCB)
;

$DEF	FORM_W_UNIT
	.BLKL	1		; PHYSICAL UNIT	(B/F)
$DEF	FORM_A_BLANKS
	.BLKL	1		; POINTER TO BLANK STRING FOR FORMATTING
$DEF	FORM_A_DATE
	.BLKL	1		; SYSTEM DATE AND TIME	(F/B)
$DEF	FORM_W_STS
	.BLKL	1		; DEVICE STATUS		(B/F)
				; (LATER POINTER TO TEXT STRING)
$DEF	FORM_A_DEVCHLIS
	.BLKL	1		; POINTER TO DEVICE CHARACTERISTICS TEXT	(B/F)
				; (OR FAO COUNT FOR /F)
	.BLKL	FULL_MAX_DEVCH	; SPACE TO POINT TO TEXT STRINGS
	.BLKL	1		; SPACE FOR FAO COUNT TO SKIP
$DEF	FORM_W_ERRCNT
	.BLKL	1		; ERROR COUNT	(B/F)
$DEF	FORM_L_PID
	.BLKL	1		; OWNER PROCESS ID	(F)
$DEF	FORM_L_OPCNT
	.BLKL	1		; COUNT OF OPERATIONS COMPLETED	(F)
$DEF	FORM_L_LNAME
	.BLKL	1		; pointer to owner process name
$DEF	FORM_W_REFC
	.BLKL	1		; REFERENCE COUNT OF PROCESSES (F)
$DEF	FORM_W_DEVBUFSZ
	.BLKL	1		; DEFAULT DEVICE BUFFER SIZE (F)

;
; device dependant information
;

$DEF	FORM_L_DEVDEPEN		; device dependant characteristics (F)
	.BLKL	1		; (density for magtapes)

;
; volume information	(VCB)
;

$DEF	FORM_A_VOLINF1		; START OF VOLUME INFORMATION (PART 1)
$DEF	FORM_Q_VOLNAME
	.BLKQ	1		; ( DESCRIPTOR OF VOLUME LABEL)
$DEF	FORM_L_FREE
	.BLKL	1		; FREE BLOCKS 	(F/B)
$DEF	FORM_W_RECORDSZ	
	.BLKL	1		; record size for magtape
$DEF	FORM_W_GRP
	.BLKL	1		; GROUP NUMBER OF OWNER UIC	(F)
$DEF	FORM_W_MEM
	.BLKL	1		; MEMBER NUMBER OF OWNER UIC 	(F)
$DEF	FORM_W_TRANS
	.BLKL	1		; TRANSACTION COUNT (F/B)
$DEF	FORM_W_VPROT
	.BLKL	1		; VOLUME PROTECTION (F)
$DEF	FORM_W_MCOUNT
	.BLKL	1		; MOUNT COUNT (F/B)
$DEF	FORM_A_VOLINF2		; START OF VOLUME INFO (PART 2)
$DEF	FORM_B_STATUS
	.BLKL	1		; VOLUME STATUS 	(F)
				; (LATER POINTER TO STRING /GROUP, /SYSTEM)
$DEF	FORM_W_RVN
	.BLKL	1		; RELATIVE VOLUME NUMBER (F)
$DEF	FORM_L_ACPNAME
	.BLKL	1		; poiner to ACP process name	(F)
$DEF	FORM_W_CLUSTER
	.BLKL	1		; VOLUME CLUSTER SIZE	(F)
$DEF	FORM_W_QUOSIZE
	.BLKL	1		; DISK QUOTA CACHE SIZE (F)
$DEF	FORM_L_MAXFILES
	.BLKL	1		; MAX NUMBER OF FILES ALLOWED ON VOLUME (F)
$DEF	FORM_W_FIDSIZE
	.BLKL	1		; FILE ID CACHE SIZE (F)
$DEF	FORM_W_EXTSIZE
	.BLKL	1		; EXTENT CACHE SIZE

;
; string storage for device and volume information
;

$DEF	FORM_L_DEVCHAR
	.BLKL	1		; device characteristics longword
$DEF	FORM_T_VOLNAME
	.BLKB	VOLNAME_LENGTH	; VOLUME LABEL
$DEF	FORM_T_ACPNAME
	.BLKB	PCB$S_LNAME	; VOLUME ACP PROCESS NAME
$DEF	FORM_T_LNAME
	.BLKB	PCB$S_LNAME	; space for owner process name
$DEF	FORM_K_LENGTH		; DEFINE LENGTH OF STRUCTURE

	$DEFEND	FORM
;
; OWN STORAGE
;

	.PSECT	SHOW$RWDATA	LONG,RD,WRT,NOEXE

DEVI_T_DEVNAM:
	.BLKB	16		; SPACE FOR DEVICE NAME
DEVI_T_BLANKS:
	.ASCIC	/          /	; blank string (10chr) for formatting
DEVI_T_DEVCHAR:
	.BLKL	BRIE_MAX_DEVCH	; TEXT BUFFER FOR BRIEF DEVICE CHARACTERISTICS
DEVI_Q_SCRATCH:
	.BLKQ	1		; scratch area descriptor
DEVI_L_SCRLIM:
	.BLKL	1		; scratch area limit
DEVI_L_FLAGS:
	.LONG	0		; LOCAL FLAGS
DEVI_DDBS_DONE:
	.REPT	MAX_DDBS_DONE	; LIST OF DDB ADDRESSES ALREADY PROCESSED
	.LONG	0
	.ENDR

;
; TEXT
;

	.PSECT	SHOW$MSG_TEXT	BYTE,RD,NOWRT,NOEXE

BRIE_DEVCH_TXT:
	.BLKL	32		; ABBREVIATED DEVICE CHARACTERISTICS
				; ( 3 LETTER CODE + blank)
FULL_DEVCH_TXT:
	.BLKL	32		; FULL DEVICE CHARACTERISTICS 
				; ( POINTER TO COUNTED ASCII STRING)
$$$=.
	.IRP	XXX,<-
		spl,-		; DEVICE BEEING SPOOLED
		mbx,-		; DEVICE IS A MAILBOX
		shr,-		; DEVICE SHAREABLE
		gen,-		; DEVICE IS A GENERIC DEVICE
		avl,-		; DEVICE IS AVAILABLE
		mnt,-		; DEVICE IS MOUNTED
		dmt,-		; DEVICE IS MARKED FOR DISMOUNT
		all,-		; DEVICE IS ALLOCATED
		for,-		; DEVICE IS MOUNTED FOREIGN
		swl,-		; DEVICE IS SOFTWARE WRITE LOCKED
		elg,-		; DEVICE HAS ERROR LOGGING ENABLED
		>
.=BRIE_DEVCH_TXT+<4*DEV$V_'XXX>
	.ASCII	/XXX /		; ABBREVIATED 4 CHARACTER CODE
.=FULL_DEVCH_TXT+<4*DEV$V_'XXX>
	.LONG	DEVCH_T_'XXX	; POINTER TO COUNTED ASCII STRING
	.ENDR
.=$$$				; RESTORE LOCATION COUNTER
DEVCH_T_SPL:
	.ASCIC	/	Spooled/<13><10>
DEVCH_T_MBX:
	.ASCIC	/	Mailbox/<13><10>
DEVCH_T_SHR:
	.ASCIC	/	Shareable/<13><10>
DEVCH_T_GEN:
	.ASCIC	/	Generic/<13><10>
DEVCH_T_AVL:
	.ASCIC	/	Available/<13><10>
DEVCH_T_MNT:
	.ASCIC	/	Mounted/<13><10>
DEVCH_T_DMT:
	.ASCIC	/	Marked for Dismount/<13><10>
DEVCH_T_ALL:
	.ASCIC	/	Allocated/<13><10>
DEVCH_T_FOR:
	.ASCIC	/	Foreign/<13><10>
DEVCH_T_SWL:
	.ASCIC	/	Software Write Locked/<13><10>
DEVCH_T_ELG:
	.ASCIC	/	Error Logging Enabled/<13><10>
DEVI_T_ONLINE:
	.ASCIC	/on line /		; TEXT FOR ON LINE
DEVI_T_OFFLINE:
	.ASCIC	/off line/		; TEXT FOR OFF LINE
DEVI_T_SYSTEM:
	.ASCIC	&/System&	; TEXT FOR VOLUME STATUS
DEVI_T_GROUP:
	.ASCIC	&/Group&	;
DEVI_T_NULL_STR:
	.LONG	0			; NULL STRING
DEVI_T_CRLF:
	.ASCIC	<13><10>/           /		; CARRIAGE RETURN STRING

	.SBTTL	SHOW$DEVI_UTL	- SHOW DEVICES: MAIN ROUTINE BODY

;++
; FUNCTIONAL DESCRIPTION:
;
;	This routine represents the main control flow of the
;	the SHOW DEVICES command after all calls to the CLI have been
;	processed.
;
;	Successively calls:
;		DEVI_COPY_NEXT  to copy next relevant DDB into scratch area
;		DEVI_FORMAT	to format and print above information
;
;	If an explicit device name was given, data from the first applicable 
;	DDB only is printed. This algorithm was adopted to comply with the
;	algorithm used by IOC$SEARCHDEV. It assumes implicit ordering in the
;	DDB chain. (i.e most used DDB's come first in the chain)

;
;
; CALLING SEQUENCE:
;
;	CALLS	or 	CALLG
;
; INPUT PARAMETERS:
;
;	4(AP) = address of descriptor to the input parameter (if any)
;		given in the command line
;
; IMPLICIT INPUTS:
;
;	Results from qualifier parsing and input parameter parsing
;	are passed to this routine in the following global locations:
;		DEVI$L_BITLIS	= bit list resulting from CLI parsing
;		DEVI$L_CH_MSK	= masks governing search of I /O data base
;		DEVI$L_CH_CRIT	   according to device characteristics
;				  ( set up by qualifier true action routines)
;		DEVI$Q_DEVNAM	= descriptor to generic device name and
;		DEVI$W_UNIT	  physical unit number.  ( set up by
;				  action routine for input parameter present)
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	R0 =	SS$_NORMAL  : success
;		SS$_NOSUCHDEV	: no such device(s) were found
;		anything else  : error code as returned by system service
;
; SIDE EFFECTS:
;
;	NONE
;
;--

	.PSECT	SHOW$CODE	BYTE,RD,NOWRT,EXE

	.ENTRY	SHOW$DEVI_UTL,^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>

;
; initialize
;

	BISL	#DEVI_M_FIRSTL,W^DEVI_L_FLAGS	
					; SET FLAG FOR NOTHING PRINTED YET

;
; allocate scratch space to copy I /O data base
;

	$EXPREG_S	-		; ALLOCATE SPACE TO COPY I /O DATA BASE
		PAGCNT=#SCRATCH_PAGES, -	; HOW MANY PAGES
		RETADR=W^DEVI_Q_SCRATCH, -	; QUADWORD TO RETURN LIMIT OF NEW VIRTUAL SPACE
		ACMODE=#USER_MODE, -		; ACCESS MODE
		REGION=#PROGRAM_REGION		; EXPAND PROGRAM REGION
	BLBC	R0,90$			; branch on error

;
; scan device data base for all devices
;

10$:
			; ***** ( THIS WILL HAVE TO BE A CHMK)
	$CMKRNL_S	W^DEVI_COPY_NEXT	; copy next DDB interlocked
	BLBC	R0,20$			; NO MORE
	CALLS	#0,W^DEVI_FORMAT		; FORMAT AND PRINT INFORMATION
	BRB	10$

;
; no more data. test if anything printed
;

20$:
	CMPL	R0,#SS$_NOSUCHDEV	; is it a known return code ?
	BNEQU	90$			; branch if unkwown
	BBS	#DEVI_V_FIRSTL,W^DEVI_L_FLAGS,70$
					; if nothing printed, go issue message
	MOVL	#SS$_NORMAL,R0		; signal success
	BRB	90$			; and return
70$:
	PUSHL	#SHOW$_NOSUCHDEV	; MESSAGE CODE FOR 'NO SUCH DEVICE'
	PUSHL	4(AP)			; DEVICE NAME IF ANY
	CALLS 	#2,W^SHOW$PRINT_MSG	; ISSUE MESSAGE
	BISL	#STS$M_INHIB_MSG,R0	; inhibit furhter message output

;
; exit
;

90$:
	RET				; AND RETURN

	.SBTTL	DEVI_COPY_NEXT	- COPY DEVICE DATA BASE

;++
; FUNCTIONAL DESCRIPTION:
;
;	This routine is called via the 'Change mode to Kernel' system service.
;
;	After requesting a read lock on the I/o data base, it copies
;	a subset of the latter to a previously allocated scratch area,
;	(using a predefined structure), then releases the lock before returning.
;
;	Each successfully comleted call will result in a copy of relevant
;	information from one  DDB and associated tables (UCB's, VCB's, etc...)
;
;	Scanning algorithm:
;
;	A table of addresses of DDB's already processed is maintained.
;	(DEVI_DDBS_DONE).
;	At each call the chain of DDB's is scanned until a DDB is found
;	that has not been processed, and that satisfies to the following criteria:
;
;	If the whole data base is beeing scanned ( no device name specified)
;	apply a rough screening on device characteristics (e.g. mailboxes).
;
;	If a device name was specified as an input parameter,
;	match the device name in the DDB against the one supplied in the
;	command line, comparing strings up to the length of the given device
;	name.
;
; CALLING SEQUENCE:
;
;		CALLS	#0,DEVI_COPY_NEXT
;	This routine is called via the 'Change mode to Kernel' System service
;
; INPUT PARAMETERS:
;
;	DEVI_Q_SCRATCH =  pointers to start and end of scratch area
;	DEVI$Q_DEVNAM  =  device name descriptor,if any
;	DEVI$L_UNIT    =  device unit, if any. (-1 means no unit specified)
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	DEVI_L_SCRLIM = pointer to end of copied area
;		( beginning is pointed to by contents of DEVI_Q_SCRATCH)
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	R0:	SS$_NORMAL	= success, some data was copied
;		SS$_NOSUCHDEV	= no data was copied
;		SHOW$_BADLOGIC = scratch area overflow
;
;
; SIDE EFFECTS:
;
;	NONE
;
; REGISTER USAGE:
;
;	R0 - R3	= SCRATCH
;	R4	= DESCRIPTOR TO GIVEN DEVICE NAME
;		= ALSO : ADDRESS OF CURRENT PCB
;	R6	= CURRENT POINTER TO SCRATCH AREA
;	R7 	= UPDATED POINTER TO SCRATCH AREA
;	R8	= LIMIT OF SCRATCH AREA
;	R9	= POINTER TO CURRENT VCB
;	R10	= POINTER TO CURRENT UCB
;	R11	= POINTER TO CURRENT DDB
;
;--

	.PSECT	SHOW$CODE	BYTE,RD,NOWRT,EXE

DEVI_COPY_NEXT:
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>

;
; lock I/O data base for read
;

	MOVL	L^SCH$GL_CURPCB,R4	; ADDRESS OF CURRENT PROCESS CONTROL BLOCK
;%%%
	JSB	L^SCH$IOLOCKR		; Lock i/o data base for read

;
; initialize 
;

	MOVZWL	W^DEVI$Q_DEVNAM,R4	; descriptor to input parameter
	MOVL	W^DEVI$Q_DEVNAM+4,R5	; ( in case needed)
	MOVAL	L^IOC$GL_DEVLIST-DDB$L_LINK,R11
					; ADDRESS OF ADDRESS OF FIRST DDB

;
; process one DDB
;

10$:
	MOVL	DDB$L_LINK(R11),R11	; GET NEXT DDB
	BNEQU	12$			;
	BRW	80$			; branch if no more
12$:
	BSBW	CHECK_DDB_DONE		; CHECK WHETHER THIS DDB ALREADY PROCESSED
	BLBC	R0,10$			; BRANCH IF PROCESSED
	BBS	#DEVI$V_DEVN,DEVI$L_BITLIS,30$
					; BRANCH IF INPUT PARAMETER PRESENT

;
; if no input specified, examine device characteristics
;

20$:
	MOVL	DDB$L_UCB(R11),R10	; GET FIRST UCB ADDRESS
	BEQL	10$			; SKIP IF NO UCB'S
	BBS	#DEV$V_MBX,UCB$L_DEVCHAR(R10),10$
					; skip entire DDB if mailbox
	BRB	40$			; GO COPY INFORMATION

;
; if device name specified, test for match
;

30$:
	MOVAL	DDB$T_NAME(R11),R0	; address of device name
	CMPB	(R0)+,R4		; LENGTH LONGER THAN SPECIFIED ?
	BLSSU	10$			; BRANCH IF TOO SHORT
	CMPC3	R4,(R0),(R5)		; COMPARE DEVICE NAMES
	BNEQU	10$			; BRANCH IF NO MATCH

;
; copy information
;

40$:
	MOVB	DDB$T_NAME(R11),R0	; length of device name
	INCL	R0			; ADD ONE FOR COUNTED STRING
	MOVC3	R0,DDB$T_NAME(R11),W^DEVI_T_DEVNAM
					; COPY device name
	MOVL	W^DEVI_Q_SCRATCH,R7	; POINTER TO SCRATCH AREA
	MOVL	W^DEVI_Q_SCRATCH+4,R8	; LIMIT OF SCRATCH AREA
	MOVAL	DDB$L_UCB-UCB$L_LINK(R11),R10
					; GET ADDRESS OF ADDRESS OF FIRST UCB
50$:
	MOVL	UCB$L_LINK(R10),R10	; GET NEXT UCB
	BEQLU	60$			; BRANCH IF NO MORE
	MOVL	R7,R6			; SAVE POINTER TO COPIED AREA
	ADDL3	#FORM_K_LENGTH,R6,R7	; UPDATE POINTER TO COPIED AREA
	CMPL	R7,R8			; CHECK FOR OVERFLOW OF SCRATCH AREA
	BGTRU	70$			; BRANCH IF OVERFLOW
	PUSHR	#^M<R4,R5>		; SAVE REGS.
	MOVC5	#0,(R7),#0,#FORM_K_LENGTH,(R6)	; ZERO BLOCK
	POPR	#^M<R4,R5>		; RESTORE REGS.
	BSBW	COPY_UCB		; GO COPY UCB
	MOVL	UCB$L_VCB(R10),R9	; GET ASSOCIATED VCB ADDRESS
	BEQLU	50$			; BRANCH IF NONE
	BBC	#DEV$V_MNT,UCB$L_DEVCHAR(R10),50$ ; If BC device is not mounted
	BBS	#DEV$V_SPL,UCB$L_DEVCHAR(R10),50$ ; SKIP IF SPOOLED
	BSBW	COPY_VCB		; COPY VCB INFORMATION
	BRB	50$			; GO FOR NEXT UCB

;
; exits
;

60$:
	MOVL	#SS$_NORMAL,R0		; INDICATE SUCCESS 
	BRB	90$			; GO UNLOCK
70$:
	MOVL	R8,R7			; SIGNAL OVERFLOW
	MOVL	#SHOW$_BADLOGIC,R0	; return code
	BRB	90$			; AND GO UNLOCK
80$:
	MOVL	#SS$_NOSUCHDEV,R0	; indicate no data copied
					; (nothing copied)


;
; unlock i/o data base
;

90$:
	MOVL	R7,DEVI_L_SCRLIM	; save limit of copied area
	PUSHR	#^M<R0>			; save return code
	MOVL	L^SCH$GL_CURPCB,R4	; ADDRESS OF CURRENT PCB
;%%%
	JSB	L^SCH$IOUNLOCK		; unlock i/o data base
;%%%
	SETIPL	#0			; drop IPL 
	POPR	#^M<R0>			; restore status code
	RET				; and return

;
; subroutine to check the 'DDB's done' table
;
;	return codes 	R0=0 : DDB already processed
;			R0=1 : DDB ready to process
;

CHECK_DDB_DONE:
	MOVZBL	#MAX_DDBS_DONE,R2	; LENGTH OF DDB'S DONE TABLE
	CLRL	R1			; POINTER TO DDB'S DONE TABLE
	CLRL	R0			; assume failure
10$:	TSTL	W^DEVI_DDBS_DONE[R1]	; LAST ENTRY SCANNED ?
	BEQLU	20$			; branch if yes
	CMPL	R11,W^DEVI_DDBS_DONE[R1]; DOES THIS ENTRY MATCH ?
	BEQLU	30$			; if YES, RETURN
	AOBLEQ	R2,R1,10$		; SEARCH NEXT TABLE ENTRY
	RSB				; overflow = failure
20$:
	MOVL	R11,W^DEVI_DDBS_DONE[R1]; RECORD DDB ADDRESS
	INCL	R0			; success
30$:
	RSB				; AND RETURN 

;
; subroutine to copy UCB information
;

COPY_UCB:
	PUSHR	#^M<R4,R5>		; SAVE REGISTERS
	MOVW	UCB$W_VPROT(R10),FORM_W_VPROT(R6)
					; VOLUME PROTECTIOM
	MOVW	UCB$L_OWNUIC(R10),FORM_W_MEM(R6)
	MOVW	UCB$L_OWNUIC+2(R10),FORM_W_GRP(R6)
					; OWNER UIC
	CLRB	FORM_T_LNAME(R6)	; assume no owner process
	MOVL	UCB$L_PID(R10),FORM_L_PID(R6)
					; OWNER PROCESS ID
	BEQLU	10$			; branch if no owner process
	MOVZWL	FORM_L_PID(R6),R0
					; get lower part of pid
	MOVL	@SCH$GL_PCBVEC[R0],R1		; get address of PCB
	PUSHR	#^M<R0,R1>		; save pid for later check
	MOVC3	#PCB$S_LNAME,PCB$T_LNAME(R1),FORM_T_LNAME(R6)
					; copy process name
	POPR	#^M<R0,R1>		; restore registers
	CMPW	R0,PCB$L_PID(R1)	; still the same pid ?
	BEQLU	10$			; branch if valid pid
	CLRB	FORM_T_LNAME(R6)	; clear process name
10$:
	MOVL	UCB$L_DEVCHAR(R10),FORM_L_DEVCHAR(R6)
					; DEVICE CHARACTERISTICS
	MOVW	UCB$W_UNIT(R10),FORM_W_UNIT(R6)
					; PHYSICAL UNIT NUMBER
	MOVW	UCB$W_DEVBUFSIZ(R10),FORM_W_DEVBUFSZ(R6)
					; DEFAULT BUFFER SIZE
	MOVW	UCB$W_REFC(R10),FORM_W_REFC(R6)
					; REFERENCE COUNT OF PROCESSES
	MOVW	UCB$W_STS(R10),FORM_W_STS(R6)
					; DEVICE STATUS
	MOVL	UCB$L_OPCNT(R10),FORM_L_OPCNT(R6)
					; COUNT OF OPERATIONS COMPLETED
	MOVW	UCB$W_ERRCNT(R10),FORM_W_ERRCNT(R6)
					; ERROR COUNT
	MOVL	UCB$L_DEVDEPEND(R10),FORM_L_DEVDEPEN(R6)
					; DEVICE DEPENDANT CHARACTERISTICS
					; (CONTAINS DENSITY FOR MAGTAPE)
	POPR	#^M<R4,R5>		; RESTORE REGISTERS
	RSB				; all done

;
; subroutine to copy VCB information
;

COPY_VCB:

	CLRL	FORM_W_FIDSIZE(R6)	; preset to show no caching
	CLRL	FORM_W_EXTSIZE(R6)
	CLRL	FORM_W_QUOSIZE(R6)

	BITL	#<DEV$M_NET!DEV$M_TRM>,- ; NET or terminal device?
		UCB$L_DEVCHAR(R10)	;
	BEQL	1$			; If EQL no
	BRW	9$			; Just output the ACP name
1$:
	MOVB	VCB$B_STATUS(R9),FORM_B_STATUS(R6)
					; VOLUME STATUS
	MOVW	VCB$W_TRANS(R9),FORM_W_TRANS(R6)
					; VOLUME TRANSACTION COUNT
	MOVW	VCB$W_RVN(R9),FORM_W_RVN(R6)
					; RELATIVE VOLUME NUMBER
	MOVC3	#VOLNAME_LENGTH,VCB$T_VOLNAME(R9),FORM_T_VOLNAME(R6)
					; VOLUME LABEL
	CLRL	FORM_W_RECORDSZ(R6)	; ASSUME NOT MAGTAPE

;
; Retrieve device dependant information for magtape
;

	BBC	#DEV$V_SQD,UCB$L_DEVCHAR(R10),8$
					; skip if not magtape
	CLRW	FORM_W_RVN(R6)
	MOVW	VCB$W_RECORDSZ(R9),FORM_W_RECORDSZ(R6)
	BBS	#DEV$V_FOR,UCB$L_DEVCHAR(R10),8$
					; skip if foreign
					; record size
	MOVL	VCB$L_RVT(R9),R0	; get RVT address
	CLRL	R1			; clear index
2$:	CMPL	RVT$L_UCBLST(R0)[R1],R10 ; compare UCBs
	BEQLU	3$			; branch if match found
	INCL	R1			; increment index
	CMPB	RVT$B_NVOLS(R0),R1	; check end of list
	BNEQU	2$			; branch if not end
	BRB	8$			; branch if end
3$:	MOVL	VCB$L_MVL(R9),R3	; address of MVL
	ADDL3	#MVL$K_FIXLEN,R3,R0	; set pointer to label entries
	CLRL	R2			; clear index
4$:	CMPB	MVL$B_RVN(R0),R1	; is it same RVN ?
	BNEQU	5$			; branch if not the same
	BLBC	MVL$B_STATUS(R0),5$	; has this volume been mounted and verified ?
	INCL	R2			; relative numbers start at 1
	MOVW	R2,FORM_W_RVN(R6)
	MOVC3	#MVL$S_VOLLBL,MVL$T_VOLLBL(R0),FORM_T_VOLNAME(R6)
					; move label to list
	BRB	8$
5$:	INCL	R2			; increment index
	ADDL2	#MVL$K_LENGTH,R0
	CMPB	R2,MVL$B_NVOLS(R3)	; end ?
	BNEQU	4$			; branch if not ???
	MOVC5	#0,(SP),#32,#6,FORM_T_VOLNAME(R6)
					; blank out label field 
8$:

; end of magtape device dependant code

	MOVW	VCB$W_CLUSTER(R9),FORM_W_CLUSTER(R6)
					; CLUSTER FACTOR
	MOVL	VCB$L_FREE(R9),FORM_L_FREE(R6)
					; FREE BLOCKS
	MOVL	VCB$L_MAXFILES(R9),FORM_L_MAXFILES(R6)
					; MAX. NUMBER OF FILES ALLOWED
	MOVW	VCB$W_MCOUNT(R9),FORM_W_MCOUNT(R6)
					; MOUNT COUNT
9$:
	MOVL	VCB$L_AQB(R9),R0	; GET AQB ADDRESS
	BEQLU	30$			; branch if no AQB (foreign)
	CLRB	FORM_T_ACPNAME(R6)	; assume no ACP
	MOVZWL	AQB$L_ACPPID(R0),R0	; GET LOWER HALF OF ACP PROCESS ID
	BEQLU	30$			; one never knows !
	MOVL	@SCH$GL_PCBVEC[R0],R1		; get pointer to PCB
	PUSHR	#^M<R0,R1>		; save for later check
	MOVC3	#PCB$S_LNAME,PCB$T_LNAME(R1),FORM_T_ACPNAME(R6)
					; COPY ACP PROCESS NAME
	POPR	#^M<R0,R1>		; restore registers
	CMPW	R0,PCB$L_PID(R1)	; still the same pid ?
	BEQLU	10$			; branch if valid pid
	CLRB	FORM_T_ACPNAME(R6)	; clear process name
	BRB	30$			; and don't bother to check caching
10$:
	MOVL	VCB$L_AQB(R9),R1	; Get address of AQB
	BEQL	30$			; Skip if no AQB
	CMPB	AQB$B_ACPTYPE(R1),#AQB$K_F11V2		; Is this ODS2?
	BNEQ	30$			; If NEQ, no caching

	MOVL	VCB$L_CACHE(R9),R1	; get address of cache block
	BEQL	20$			; if zero, no fid or extent caching
	MOVL	VCA$L_FIDCACHE(R1),R2	; get address of File ID cache
	BEQL	15$			; check just in case
	MOVZWL	VCA$W_FIDSIZE(R2),FORM_W_FIDSIZE(R6)	; get fid cache size
15$:	MOVL	VCA$L_EXTCACHE(R1),R2	; get address of extent cache
	BEQL	20$			; check just in case
	MOVZWL	VCA$W_EXTSIZE(R2),FORM_W_EXTSIZE(R6)	; get extent cache size
20$:	MOVZWL	VCB$W_QUOSIZE(R9),FORM_W_QUOSIZE(R6)	; get quota cache size
30$:
	RSB				; done

	.SBTTL	DEVI_FORMAT	- FORMAT AND PRINT DEVICE DATA

;++
; FUNCTIONAL DESCRIPTION:
;
; 	Controls formatting and printing of device information previously
;	copied into a scratch area, selecting information according to
;	the /BRIEF or /FULL command qualifier specified.
;
;	As only minimal filtering has been done during the copy of information
;	this routine has to perform any additional checks desired, such as
;	device characteristics and, if a device name has been specified by the
;	user, the physical unit number also needs to be verified here.
;
; CALLING SEQUENCE:
;
;		CALLS	#0,DEVI_FORMAT
;
; INPUT PARAMETERS:
;
;	DEVI_Q_SCRATCH	= pointer to start of copied area
;	DEVI_L_SCRLIM	= limit of copied area
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	If anything is printed, flag DEVI_V_FIRSTL is cleared.
;
;	This flag is checked at the completion of the utility, in order
;	to issue an error message when appropriate.
;
; SIDE EFFECTS:
;
;	NONE
; REGISTER USAGE:
;
;	R0-R5	= scratch
; 	R7	= limit of scratch area
;	R6	= updated pointer to scratch area
;	R11	= current pointer to scratch area
;
;
;--

	.PSECT	SHOW$CODE	BYTE,RD,NOWRT,EXE

DEVI_FORMAT:
	.WORD	^M<R6,R7,R8,R9,R10,R11>

;
; initialize
;

	MOVL	W^DEVI_Q_SCRATCH,R6	; pointer to scratch area
	MOVL	W^DEVI_L_SCRLIM,R7	; limit of copied information
	MOVL	#SS$_NORMAL,R0		; assume success

;
; process one UCB
;

10$:
	MOVL	R6,R11			; save pointer to scratch area
	ADDL2	#FORM_K_LENGTH,R6	; check for overflow
	CMPL	R6,R7			; complete block left ?
	BLEQU	12$			; BRANCH IF MORE
	BRW	90$			; GO EXIT
12$:

;
; do we want to print this device ?
;

	BBC	#DEVI$V_DEVN,W^DEVI$L_BITLIS,15$
					; BRANCH IF NO SINGLE DEVICE
	TSTW	W^DEVI$W_UNIT		; UNIT NUMBER SPECIFIED ?
	BLSS	15$			; BRANCH IF NO UNIT SPECIFIED
	CMPW	FORM_W_UNIT(R11),W^DEVI$W_UNIT
					; UNIT NUMBERS MATCH ?
	BNEQU	10$			; IF NO, GET NEXT DEVICE INFO
15$:
	BICL3	W^DEVI$L_CH_MSK,FORM_L_DEVCHAR(R11),R5
					; MASK OFF RELEVANT DEVICE CHARACTERISTICS
	CMPL	R5,W^DEVI$L_CH_CRIT	; DO CHARACTERISTICS MATCH ?
	BNEQU	10$			; IF NO, GET NEXT DEVICE

;
; insert constants common to /BRIEF and /FULL  options
;


;
; get device name and blanks to skip
;

	MOVAL	W^DEVI_T_DEVNAM,FORM_A_DEVNAM(R11)
					; POINTER TO DEVICE NAME
	MOVZBL	W^DEVI_T_DEVNAM,R0	; GET LENGTH OF DEVICE NAME
	MOVZWL	FORM_W_UNIT(R11),R1	; GET UNIT NUMBER
151$:
	INCL	R0			; COUNT NUMBER OF DIGITS
	DIVL	#10,R1			; IN UNIT NUMBER
	BNEQU	151$			;
	MOVAL	W^DEVI_T_CRLF,FORM_A_BLANKS(R11)
					; ASSUME DEV NAME TOO LONG
	SUBL3	R0,#8,R0		; CALCULATE NUMBER OF BLANKS TO SKIP
	BLEQU	16$			; SKIP IF NAME TOO LONG
	MOVB	R0,W^DEVI_T_BLANKS	; INSERT NUMBER OF BLANKS TO SKIP
	MOVAL	W^DEVI_T_BLANKS,FORM_A_BLANKS(R11)
					; POINTER TO BLANK STRING
16$:

;
;
	CLRL	FORM_A_DATE(R11)	; USE SYSTEM DATE AND TIME
	LOCC	#0,#VOLNAME_LENGTH,FORM_T_VOLNAME(R11)
					; find start of fill
	SUBL3	R0,#VOLNAME_LENGTH,FORM_Q_VOLNAME(R11)
					; store length of volume name
	MOVAL	FORM_T_VOLNAME(R11),FORM_Q_VOLNAME+4(R11)
					; BUILD DESCRIPTOR TO VOLUME LABEL
	MOVL	FORM_W_STS(R11),R0	; DEVICE STATUS
	MOVAL	W^DEVI_T_ONLINE,FORM_W_STS(R11)
					; POINT TO 'ON LINE' TEXT
	BBS	#UCB$V_ONLINE,R0,17$	; TEST ON LINE BIT
	MOVAL	W^DEVI_T_OFFLINE,FORM_W_STS(R11)
					; DEVICE IS NOT ON LINE
17$:
	BBC	#DEVI$V_FULL,W^DEVI$L_BITLIS,18$
	BRW	50$		; BRANCH IF FULL LISTING REQUESTED
18$:

;
; process /BRIEF listing option
;

	BBC	#DEVI_V_FIRSTL,W^DEVI_L_FLAGS,20$
					; ANYTHING PRINTED YET ?
	BICL	#DEVI_M_FIRSTL,W^DEVI_L_FLAGS
					; CLEAR FLAG FOR NOTHING PRINTED
	PUSHL	#SHOW$_DEVBRITTL	; MESSAGE ID FOR TITLE
	PUSHAL	FORM_A_DATE(R11)		; PARAMETER LIST
	CALLS	#2,W^SHOW$PRINT_MSG	; PRINT TITLE
20$:
	EXPBITS	-			; BUILD DEVICE CHARACTERISTICS TEXT
		FORM_L_DEVCHAR(R11),-	; SOURCE BIT LIST
		BRIE_MSK_DEVCH,-	; MASK OFF RELEVANT BITS
		W^BRIE_DEVCH_TXT,-	; START OF TEXT TABLE
		W^DEVI_T_DEVCHAR,-	; TARGET TEXT BUFFER
		BRIE_MAX_DEVCH		; MAX. NUMBER OF DEVICE CHARACTERISTICS
	ASHL	#2,R1,FORM_A_DEVCHLIS(R11)
	MOVAL	W^DEVI_T_DEVCHAR,FORM_A_DEVCHLIS+4(R11)
					; BUILD DESCRIPTOR TO RESULTANT TEXT BUFFER
	BBC	#DEV$V_MNT,FORM_L_DEVCHAR(R11),30$
					; IF MNT CLEAR, NO VOLUME INFORMATION
	BBC	#DEV$V_SQD,FORM_L_DEVCHAR(R11),25$
					; BRANCH IF NOT MAGTAPE
	PUSHL	#SHOW$_DEVBRITAP	; MESSAGE ID FOR MAGTAPE VOLUME INFO
	BRB	40$			;
25$:
	PUSHL	#SHOW$_DEVBRIVOL	; MESSAGE IDENTIFIER FOR VOLUME INFO
	BRB	40$			; GO PRINT
30$:
	PUSHL	#SHOW$_DEVBRINOV	; MESSAGE ID WITHOUT VOLUME INFO
40$:
	PUSHAL	FORM_A_DEVINFO(R11)	; POINTER TO PARAMETER LIST
	CALLS 	#2,W^SHOW$PRINT_MSG	; PRINT LINE
	BRW	10$			; AND GO GET NEXT DEVICE

;
; process /FULL listing option
;

50$:
	BICL	#DEVI_M_FIRSTL,W^DEVI_L_FLAGS
					; CLEAR FLAG FOR NOTHING PRINTED
	EXPBITS	-			; BUILD LIST OF POINTERS TO DEVICE CHAR. TEXT
		FORM_L_DEVCHAR(R11),-	; SOURCE BIT LIST
		FULL_MSK_DEVCH,-	; mask off relevant bits
		W^FULL_DEVCH_TXT,-	; ADDRESS OF TEXT POINTER ARRAY
		FORM_A_DEVCHLIS+4(R11),-; TARGET ARRAY
		FULL_MAX_DEVCH		; MAXIMUM NUMBER OF DEVICE CHAR. TO LIST
	MOVL	R1,FORM_A_DEVCHLIS(R11)	; STORE NUMBER OF FAO PARAMETERS TO PRINT
	SUBL3	R1,#FULL_MAX_DEVCH,FORM_A_DEVCHLIS+4(R11)[R1]
					; STORE NUMBER OF FAO PARAMETERS TO SKIP
	MOVAL	FORM_T_LNAME(R11),FORM_L_LNAME(R11)
					; insert pointer to process name
	PUSHL	#SHOW$_DEVFULNOV	; MESSAGE ID FOR DEVICE INFO
	PUSHAL	FORM_A_DEVINFO(R11)	; PARAMETER LIST FOR DEVICE INFORMATION
	CALLS 	#2,W^SHOW$PRINT_MSG	; GO PRINT INFO

;
; SPECIAL CASE : MAGTAPE
;

	BBC	#DEV$V_SQD,FORM_L_DEVCHAR(R11),51$
					; branch if not  magtape
	EXTZV	#MT$V_DENSITY,#MT$S_DENSITY,FORM_L_DEVDEPEN(R11),R0
					; extract density field from device dependant word
	CLRL	FORM_L_DEVDEPEN(R11)	; clear density
	CMPL	R0,#MT$K_NRZI_800	; is it 800 bpi ?
	BNEQU 	501$			; no
	MOVL	#800,FORM_L_DEVDEPEN(R11) ; insert 800
	BRB	505$			; and go print device dependant info
501$:
	CMPL	R0,#MT$K_PE_1600	; is it 1600 bpi
	BNEQU	503$			; br if not
	MOVL	#1600,FORM_L_DEVDEPEN(R11) ; insert 1600
	BRB	505$			; and go print device info
503$:	CMPL	R0,#MT$K_GCR_6250	; is it 6250 bpi ?
	BNEQU	51$			; br if not - no valid density info
	MOVL	#6250,FORM_L_DEVDEPEN(R11) ; insert 6250 bpi
505$:
	PUSHL	#SHOW$_DEVDEPTAP	; code for device dependant info
	PUSHAL	FORM_L_DEVDEPEN(R11)	; point to density
	CALLS	#2,W^SHOW$PRINT_MSG	; and print information

;
; PROCESS VOLUME INFORMATION, IF ANY
;

51$:
	BBS	#DEV$V_MNT,FORM_L_DEVCHAR(R11),52$
					; BRANCH IF VOLUME INFORMATION PRESENT
	BRW	10$			; go process next device
52$:
	MOVAL	FORM_T_ACPNAME(R11),FORM_L_ACPNAME(R11)
					; insert pointer to ACP process name
	MOVB	FORM_B_STATUS(R11),R0	; SAVE VOLUME STATUS
	MOVAL	W^DEVI_T_NULL_STR,FORM_B_STATUS(R11)
					; assume no bits set
	BBC	#VCB$V_SYSTEM,R0,55$	; TEST FOR MOUNTED/SYSTEM
	MOVAL	W^DEVI_T_SYSTEM,FORM_B_STATUS(R11)
					; device is mounted /SYSTEM
	BRB	60$
55$:
	BBC	#VCB$V_GROUP,R0,60$	; TEST FOR MOUNTED/GROUP
	MOVAL	W^DEVI_T_GROUP,FORM_B_STATUS(R11)
					; device is mounted /GROUP
60$:
	BBS	#DEV$V_SQD,FORM_L_DEVCHAR(R11),70$
						; BRANCH IF MAGTAPE
	PUSHL	#SHOW$_DEVFULVO1	; MESSAGE ID FOR VOLUME INFORMATION
	PUSHAL	FORM_A_VOLINF1(R11)	; PARAMETER LIST FOR VOLUME INFORMATION
	CALLS	#2,W^SHOW$PRINT_MSG	; AND PRINT IT
	PUSHL	#SHOW$_DEVFULVO2	; IN 2 PARTS BECAUSE OF MARS LIMITATIONS
	PUSHAL	FORM_A_VOLINF2(R11)	;
	CALLS 	#2,W^SHOW$PRINT_MSG	;
	BRW	10$			; GOT FOR NEXT DEVICE
70$:
	PUSHL	#SHOW$_DEVFULTAP	; FULL VOLUME INFO FOR MAGTAPE
	PUSHAL	FORM_A_VOLINF1(R11)	; PARAMETER LIST FOR VOLUME INFO
	CALLS	#2,W^SHOW$PRINT_MSG	; AND GO PRINT MESSAGE
	BRW	10$			; TRY NEXT DEVICE

;
; exit
;

90$:
	MOVL	#SS$_NORMAL,R0		; indicate success
	RET
	.END
