MODULE	RSXRT (
	IDENT = 'V03-000',
	ADDRESSING_MODE(EXTERNAL=GENERAL)
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  REMOTE TERMINAL SUPPORT
!
! ABSTRACT:
!	THIS PROGRAM SUPPORTS THE RSX-11M REMOTE TERMINAL PROTOCOL.
!
!
! ENVIRONMENT:
!
!	VAX/VMS Operating System
!
!--
!
!
! AUTHOR:  W M CARDOZA,	 CREATION DATE:  2-JAN-80
!
! MODIFIED BY:
!
!	V03-005	WMC0034		Wayne Cardoza		14-Jan-1981
!		Add flag to indicate legitimate $WAKE.
!		Support for get terminal characteristics.
!
!	V03-004	SHZ0001		Stephen H. Zalewski,	20-Nov-1981  11:54
!		Added ADDRESSING_MODE(EXTERNAL=GENERAL) to module header
!
!	V03-003	WMC0003		Wayne M. Cardoza	13-Aug-1981
!		exit with message on ^Y
!
!	V03-002 WMC0002		Wayne M. Cardoza,	01-June-1981
!		don't call MAPMODIFIER on writes
!
!	V03-001	WMC0001		Wayne M. Cardoza,	23-June-1980
!		better error checking for link errors,
!		fix double echo of escape characters
!
!**
LIBRARY 'SYS$LIBRARY:LIB';
LIBRARY 'SYS$LIBRARY:CLIMAC';
!
!
!
FORWARD ROUTINE
	GETTERMCHAR: NOVALUE,
	GETBUF,
	FREEBUF,
	INDREAD,
	LINKRECV: NOVALUE,
	WRITE: NOVALUE,
	TERMMBXMSG: NOVALUE,
	READ: NOVALUE,
	CNTRLCAST: NOVALUE,
	CNTRLYAST: NOVALUE,
	READSINGLE: NOVALUE,
	ATTACH: NOVALUE,
	RSXRT: NOVALUE,
	LINKMBXMSG: NOVALUE,
	BROADCAST: NOVALUE,
	READPROMPT: NOVALUE,
	QIODONE: NOVALUE,
	CANCEL: NOVALUE,
	TERMINATOR,
	UNSUPPORTED: NOVALUE,
	MAPMODIFIER,
	LINKWRTDONE: NOVALUE,
	NEXTIO: NOVALUE,
	UNSDATENBL: NOVALUE,
	ONECHAR: NOVALUE;
!
!
MACRO
	RTP_BUF = BLOCK[32] FIELD(RTP_FIELDS) %,
	QUIT = 	BEGIN
		$SETAST	(ENBFLG = 0);	! STOP EVERYTHING
		WAKEFLAG = 1;
		$WAKE();		! WAKE UP BASE LEVEL
		RETURN;
		END %,
	QUIT_ON_ERROR = IF (.RETSTATUS AND 1) EQL 0  THEN
		QUIT %;
!
! EQUATED SYMBOLS:
!
LITERAL
	! FUNCTION CODES
	RF_NOP = 0,		! NOP
	RF_SSD = 1,		! CONFIGURATION
	RF_DIS = 2,		! DISCONNECT
	RF_WTD = 3,		! WRITE DATA
	RF_RDD = 4,		! READ DATA
	RF_WRD = 5,		! READ WITH PROMPT
	RF_UNS = 6,		! UNSOLICITED INPUT DISABLE/ENABLE
	RF_RSC = 7,		! READ SINGLE CHARACTERS
	RF_KIL = 8,		! CANCEL I/O
	RF_ATT = 9,		! ATTACH
	RF_GTC = 10,		! GET TERMINAL CHARACTERISTICS
	RF_STC = 11,		! SET TERMINAL CHARACTERISTICS
	RF_ECR = 12,		! EXCEPTION CONDITION
	! MODIFIERS
	RM_WBN = 1,		! WRITE BINARY
	RM_WBT = 2,		! BROADCAST
	RM_RBN = 4,		! READ BINARY
	RM_RTC = 8,		! READ TERMINATES ON CONTROL CHARACTERS
	RM_RNE = 16,		! READ NO ECHO
	RM_RTO = 32,		! RESET TIME OUT ON EACH CHARACTER
	RM_DET = 128,		! DETACH TERMINAL
	RM_NWC = 128,		! NO WRITE COMPLETE STATUS
	RM_TUI = 128,		! TERMINATE UNSOLICITED INPUT
	RM_TSC = 128,		! TERMINATE SINGLE CHARACTER INPUT
	! FLAGS
	RM_PRI = 2,		! PROCESS REQUEST IMMEDIATELY
	RM_CAO = 4,		! CANCEL ABORT OUTPUT
	! STATUS CODES
	RS_SFC = 0,		! SUCCESS
	RS_FPE = 1,		! FUNCTION PROCESSING ERROR
	RS_UFC = 2,		! UNSUPPORTED FUNCTION
	RS_IPF = 3,		! ILLEGAL PROTOCOL FUNCTION
	RS_IPD = 4,		! ILLEGAL PROTOCOL DATA
	RS_ICF = 5,		! ILLEGAL CHARACTERISTICS FUNCTION
	! TERMINAL CHARACTERISTIC CODES
	RC_HHT = 18,		! HARDWARE TABS
	RC_NEC = 19,		! NO ECHO
	RC_TTP = 22,		! TERMINAL TYPE
	RC_SCP = 23,		! CRT
	RC_BIN = 24,		! BINARY MODE
	RC_TPL = 28,		! PAGE LENGTH
	RC_MAX = 28,		! ********* KEEP THIS THE MAXIMUM *********
	! EXCEPTION CONDITION CODES
	RE_SAR = 0;		! SYSTEM ATTENTION REQUEST
FIELD
	RTP_FIELDS =		! REMOTE TERMINAL PROTOCOL
		SET
		RTP_LNK = [0,0,32,0],	! QUEUE LINK WORDS
		RTP_LN2 = [1,0,32,0],
		RTP_IOS = [2,0,16,0],	! IOSB
		RTP_IOC = [2,16,16,0],	! I/O COUNT
		RTP_IO2 = [3,0,32,0],
		RTP_FNC = [4,0,8,0],	! FUNCTION CODE
		RTP_MOD = [4,8,8,0],	! FUNCTION MODIFIER BITS
		RTP_FLG = [4,16,8,0],	! FUNCTION FLAGS
		RTP_STS = [4,24,8,0],	! RETURN STATUS
		RTP_IDN = [5,0,8,0],	! IDENTIFIER
		RTP_RSV = [5,8,8,0],	! RESERVED, MBZ
		RTP_RCT = [5,16,16,0],	! RECEIVE BYTE COUNT
		RTP_TCT = [6,0,16,0],	! TRANSMIT BYTE COUNT
		RTP_DAT = [6,16,32,0]	! DATA
		TES;
!
!
!
OWN
	NAMEIOSB:	VECTOR[4,WORD],
	VMSCONFIG:	INITIAL(PLIT BYTE(RF_SSD,1,0,0,	! CONFIGURATION MSG
				WORD(4,2),		! PROTOCOL SUPPORTED
				WORD(128),		! BUFFER SIZE
				2,1,			! LINE-FEED PREFIXING
				3,1,			! SINGLE CHAR INPUT
				5,1,			! BROADCAST
				7,1,			! CASE CONVERSION
				8,1,			! NO ECHO
				9,1,			! READ TERMINATORS
				10,1,			! CRT'S
				11,1,			! ^R
				12,1,			! READ/WRITE BINARY
				13,1,			! UNSOLICITED INPUT
				127,1,			! VERSION 1 OF PROTOCOL
				0,0)),
	TERMMBXDATA:	VECTOR[4,WORD],
	UNSOLENBLFLG:	REF RTP_BUF INITIAL(0),
	ATTACHFLAG:	BYTE INITIAL(0),
	SINGLEINPROG:	BYTE INITIAL(0),
	UNSOLPEND:	BYTE INITIAL(0),
	READINPROG:	BYTE INITIAL(0),
	SINGLEFLAG:	REF RTP_BUF INITIAL(0),
	CURRENTIO:	REF RTP_BUF INITIAL(0),
	INDDATA:	REF RTP_BUF INITIAL(0),
	IOQUEUE:	VECTOR[2] INITIAL(IOQUEUE,IOQUEUE),
	BUFQUEUE:	VECTOR[2] INITIAL(BUFQUEUE,BUFQUEUE),
	CNTRLCMSG:	VECTOR[4,BYTE] INITIAL(BYTE(RF_ECR,0,0,RE_SAR)),
	LINKMAIL:	VECTOR[40,BYTE],
	STERMMASK:	VECTOR[4] INITIAL(%X'FFFFFFFF',0,0,%X'E0000000'),
	STERMDESC:	VECTOR[2] INITIAL(16,STERMMASK),
	NTERMMASK:	INITIAL(%X'0C002000'),
	NTERMDESC:	VECTOR[2] INITIAL(4,NTERMMASK),
	REQ_DSCNTRLY:	$CLIREQDESC (RQTYPE=CLISERV, BITNUM=8);
!
! THIS TELLS REMOTE TERMINAL MAIN PROGRAM WHAT PROTOCOL WE SUPPORT
!
PSECT OWN = PROTOTBL (ALIGN(0));
OWN
	PROTOMASK:	WORD INITIAL(2),		! RSX-11
	RSXADDR:	ALIGN(0) INITIAL(RSXRT);
!
! EXTERNAL REFERENCES:
!
EXTERNAL ROUTINE
	SYS$CLI : ADDRESSING_MODE(LONG_RELATIVE),
	LIB$GET_VM;
BUILTIN
	INSQUE,
	REMQUE;
EXTERNAL
	TTYDESC,
	REM$_NETDIS,
	RDWRTCHAN: WORD,
	CNTRLCHAN: WORD,
	TERMMBXCHAN: WORD,
	MAILCHAN: WORD,
	LINKCHAN: WORD,
	SYSINRAB: $RAB_DECL,
	SYSINFAB: $FAB_DECL,
	INDFLAG: BYTE,
	WAKEFLAG: BYTE,
	RETSTATUS;

ROUTINE RSXRT: NOVALUE =
!++
!
! Functional Description:
!	Performs initialization functions for RSX remote terminals.
!
!
! Calling Sequence:
!	standard
!
! Input Parameters:
!	none
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routines Called:
!	GETBUF
!
! Routine Value:
!	none
!
! Signals:
!	none
!
! Side Effects:
!	A configuration message is transmitted.
!	A prompt is displayed on the screen.
!	Reads are initiated on the terminal mailbox and on the link.
!
!--
	BEGIN
	LOCAL
		BUFFER: REF RTP_BUF;
	RETSTATUS =
	$QIOW	(CHAN = .LINKCHAN,	! SEND CONFIGURATION MESSAGE
		 FUNC = IO$_WRITEVBLK,
		 P1 = .VMSCONFIG,
		 P2 = 4 * .(.VMSCONFIG-4));
	QUIT_ON_ERROR;
	RETSTATUS =
	$QIOW	(CHAN = .RDWRTCHAN,	! ENABLE UNSOLICITED INPUT
		 FUNC = IO$_WRITEVBLK+IO$M_ENABLMBX);
	QUIT_ON_ERROR;
	RETSTATUS =
	$QIO	(CHAN = .TERMMBXCHAN,	! UNSOLICITED DATA MBX READ
		 FUNC = IO$_READVBLK,
		 ASTADR = TERMMBXMSG,
		 P1 = TERMMBXDATA,
		 P2 = 8);
	QUIT_ON_ERROR;
	RETSTATUS =
	$QIO	(CHAN = .MAILCHAN,	! LINK MAILBOX READ
		 FUNC = IO$_READVBLK,
		 ASTADR = LINKMBXMSG,
		 P1 = LINKMAIL,
		 P2 = 40);
	QUIT_ON_ERROR;
	RETSTATUS =
	$QIO	(CHAN = .CNTRLCHAN,	! HANDLE CONTROL-C
		 FUNC = IO$_SETMODE+IO$M_CTRLCAST,
		 P1 = CNTRLCAST);
	QUIT_ON_ERROR;
	RETSTATUS =
	$QIO	(CHAN = .CNTRLCHAN,	! HANDLE CONTROL-Y
		 FUNC = IO$_SETMODE+IO$M_CTRLYAST,
		 P1 = CNTRLYAST);
	QUIT_ON_ERROR;
	SYS$CLI(REQ_DSCNTRLY,0,0);	! DISABLE CLI ^Y
	RETSTATUS =
	$QIOW	(CHAN = .RDWRTCHAN,	! GIVE AN RSX PROMPT
		 FUNC = IO$_WRITEVBLK,
		 P1 = UPLIT BYTE('>'),
		 P2 = 1);
	QUIT_ON_ERROR;
	IF .INDFLAG NEQ 0  THEN
		BEGIN			! THERE IS AN INDIRECT FILE
		INDDATA = GETBUF();	! GET BUFFER FOR FILE READ
		SYSINRAB[RAB$L_UBF] = INDDATA[RTP_DAT];	! BUFFER ADDRESS
		SYSINRAB[RAB$W_USZ] = 100;	! ALLOW 100 CHARACTERS
		INDREAD();		! READ IT
		END;
	BUFFER = GETBUF();		! REQUEST A BUFFER
	RETSTATUS =
	$QIO	(CHAN = .LINKCHAN,	! WAIT FOR SOMETHING ON LINK
		 FUNC = IO$_READVBLK,
		 IOSB = BUFFER[RTP_IOS],
		 ASTADR = LINKRECV,
		 ASTPRM = .BUFFER,
		 P1 = BUFFER[RTP_FNC],
		 P2 = 128);
	QUIT_ON_ERROR;
	END;

ROUTINE GETBUF =
!++
!
! Functional Description:
!	Allocate a buffer.
!
!
! Calling Sequence:
!	standard
!
! Input Parameters:
!	none
!
! Implicit Inputs:
!	BUFQUEUE
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routines Called:
!	LIB$GET_VM
!
! Routine Value:
!	buffer address
!
! Signals:
!	none
!
! Side Effects:
!	none
!
!--
	BEGIN
	LOCAL
		BUFADR:;
	IF REMQUE(.BUFQUEUE,BUFADR) EQL 3  THEN		! WAS QUEUE EMPTY?
		LIB$GET_VM(UPLIT(128+16),BUFADR);	! GET A BUFFER
	RETURN .BUFADR;
	END;


ROUTINE FREEBUF(BUF) =
!++
!
! Functional Description:
!	Release a buffer.
!
!
! Calling Sequence:
!	standard
!
! Input Parameters:
!	BUF = buffer address
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	BUFQUEUE
!
! Routines Called:
!	none
!
! Routine Value:
!	none
!
! Signals:
!	none
!
! Side Effects:
!	none
!
!--
	BEGIN
	INSQUE(.BUF,BUFQUEUE)
	END;

ROUTINE LINKRECV(BUFFER): NOVALUE =
!++
!
! Functional Description:
!	Receive a message on the link and call the correct service routine.
!
!
! Calling Sequence:
!	standard
!
! Input Parameters:
!	BUFFER = input buffer address
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	RETSTATUS
!
! Routines Called:
!	WRITE
!	READ
!	READPROMPT
!	UNSDATENBL
!	CANCEL
!	READSINGLE
!	ATTACH
!	UNSUPPORTED
!	GETBUF
!	GETTERMCHAR
!
! Routine Value:
!	none
!
! Signals:
!	none
!
! Side Effects:
!	A new read to the link is initiated.
!	If there is an error on the read, a $WAKE is issued to force the 
!	program to exit.
!
!--
	BEGIN
	LOCAL
		NEWBUF:	REF RTP_BUF;
	MAP BUFFER: REF RTP_BUF;
	RETSTATUS = .BUFFER[RTP_IOS];
	IF .RETSTATUS EQL SS$_ABORT  THEN
		RETURN;			! Link gone - mailbox message will tell why
	QUIT_ON_ERROR;
	CASE .BUFFER[RTP_FNC] FROM 0 TO 12 OF
		SET
		[RF_WTD]:	WRITE(.BUFFER);
		[RF_RDD]:	READ(.BUFFER);
		[RF_WRD]:	READPROMPT(.BUFFER);
		[RF_UNS]:	UNSDATENBL(.BUFFER);
		[RF_KIL]:	CANCEL(.BUFFER);
		[RF_RSC]:	READSINGLE(.BUFFER);
		[RF_ATT]:	ATTACH(.BUFFER);
		[RF_GTC]:	GETTERMCHAR(.BUFFER);
		[INRANGE]:	UNSUPPORTED(.BUFFER);
		[OUTRANGE]:	UNSUPPORTED(.BUFFER);
		TES;
	NEWBUF = GETBUF();	! GET ANOTHER BUFFER
	RETSTATUS =
	$QIO	(CHAN = .LINKCHAN,	! READ LINK AGAIN
		 FUNC = IO$_READVBLK,
		 IOSB = NEWBUF[RTP_IOS],
		 ASTADR = LINKRECV,
		 ASTPRM = .NEWBUF,	
		 P1 = NEWBUF[RTP_FNC],
		 P2 = 128);
	IF .RETSTATUS EQL SS$_ABORT  THEN
		RETURN;			! Link gone - mailbox msg will tell why
	QUIT_ON_ERROR;
	END;

ROUTINE WRITE(BUFFER): NOVALUE =
!++
!
! Functional Description:
!	Perform a write QIO function to the terminal.
!
! Calling Sequence:
!	standard
!
! Input Parameters:
!	BUFFER = address of buffer from link
!
! Implicit Inputs:
!	CURRENTIO	
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	IOQUEUE
!
! Routines Called:
!	BROADCAST
!
! Routine Value:
!	none
!
! Signals:
!	none
!
! Side Effects:
!	An I/O may be queued for later action
!
!--
	BEGIN
	MAP BUFFER: REF RTP_BUF;
	IF (.BUFFER[RTP_MOD] AND RM_WBT) NEQ 0  THEN
		BROADCAST(.BUFFER)	! IT IS A BROADCAST WRITE
	ELSE
		BEGIN
		IF .CURRENTIO EQL 0 THEN
		  BEGIN
		  RETSTATUS =
		  $QIO	(CHAN = .RDWRTCHAN,	! WRITE TO THE TERMINAL
			 FUNC = IO$_WRITEVBLK,
			 IOSB = BUFFER[RTP_IOS],
			 ASTADR = QIODONE,
			 ASTPRM = .BUFFER,
			 P1 = BUFFER[RTP_DAT],
			 P2 = .BUFFER[RTP_TCT]);
		  QUIT_ON_ERROR;
		  CURRENTIO = .BUFFER;
		  END
		ELSE
		  INSQUE(.BUFFER,.IOQUEUE[1]);	! QUEUE IT FOR LATER
		END;
	END;

ROUTINE READ(BUFFER): NOVALUE =
!++
!
! Functional Description:
!	Perform a read QIO function to the terminal.
!
! Calling Sequence:
!	standard
!
! Input Parameters:
!	BUFFER = address of the link buffer
!
! Implicit Inputs:
!	CURRENTIO
!	INDDATA
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	IOQUEUE
!	CURRENTIO
!	READINPROG
!	UNSOLPEND
! Routines Called:
!	INDREAD
!	QIODONE
!
! Routine Value:
!	none
!
! Signals:
!	none
!
! Side Effects:
!	An I/O may be queued for later action.
!
!--
	BEGIN
	MAP BUFFER: REF RTP_BUF;
	LOCAL
		FUNCTION;
	IF .INDDATA NEQ 0  THEN
		BEGIN		! WE ALREADY HAVE INDIRECT COMMAND DATA
		BUFFER[RTP_IOS] = .INDDATA[RTP_IOS];	! COPY THE IOSB
		BUFFER[RTP_IOC] = .INDDATA[RTP_IOC];
		CH$MOVE(.INDDATA[RTP_IOC]+1,INDDATA[RTP_DAT],	! COPY THE DATA
			BUFFER[RTP_DAT]);
		INDREAD();				! LOOK FOR MORE DATA
		QIODONE(.BUFFER);			! PASS THIS DATA ON
		RETURN;
		END;
	IF .CURRENTIO EQL 0 THEN
		BEGIN
		IF (.BUFFER[RTP_MOD] AND RM_RBN) NEQ 0  THEN
			FUNCTION = IO$_READPBLK		! BINARY
		ELSE
			FUNCTION = IO$_READVBLK;	! NORMAL
		RETSTATUS =
		$QIO	(CHAN = .RDWRTCHAN,	! READ FROM THE TERMINAL
			 FUNC = .FUNCTION+MAPMODIFIER(.BUFFER[RTP_MOD]),
			 IOSB = BUFFER[RTP_IOS],
			 ASTADR = QIODONE,
			 ASTPRM = .BUFFER,
			 P1 = BUFFER[RTP_DAT],
			 P2 = .BUFFER[RTP_RCT],
			 P4 = TERMINATOR(.BUFFER[RTP_MOD]));
		QUIT_ON_ERROR;
		CURRENTIO = .BUFFER;
		UNSOLPEND = 0;		! NO MORE DATA PENDING
		READINPROG = 1;
		END
	ELSE
		INSQUE(.BUFFER,.IOQUEUE[1]);	! QUEUE IT FOR LATER
	END;

ROUTINE READPROMPT(BUFFER): NOVALUE =
!++
!
! Functional Description:
!	Perform a readprompt QIO function to the terminal.
!
! Calling Sequence:
!	standard
!
! Input Parameters:
!	BUFFER = address of the link buffer
!
! Implicit Inputs:
!	CURRENTIO
!	INDDATA
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	CURRENTIO
!	UNSOLPEND
!	READINPROG
!	IOQUEUE
!
! Routines Called:
!	READ
!
! Routine Value:
!	none
!
! Signals:
!	none
!
! Side Effects:
!	An I/O may be queued for later action.
!
!--
	BEGIN
	MAP BUFFER: REF RTP_BUF;
	LOCAL
		FUNCTION;
	IF .INDDATA NEQ 0  THEN
		BEGIN			! WE HAVE INDIRECT COMMAND FILE DATA
		READ (.BUFFER);		! GET THE DATA
		RETURN;
		END;
	IF .CURRENTIO EQL 0  THEN
		BEGIN
		IF (.BUFFER[RTP_MOD] AND RM_RBN) NEQ 0  THEN
			FUNCTION = IO$_TTYREADPALL	! BINARY
		ELSE
			FUNCTION = IO$_READPROMPT;	! NORMAL
		RETSTATUS =
		$QIO	(CHAN = .RDWRTCHAN,	! READPROMPT TO THE TERMINAL
			 FUNC = .FUNCTION+MAPMODIFIER(.BUFFER[RTP_MOD]),
			 IOSB = BUFFER[RTP_IOS],
			 ASTADR = QIODONE,
			 ASTPRM = .BUFFER,
			 P1 = BUFFER[RTP_DAT],
			 P2 = .BUFFER[RTP_RCT],
			 P4 = TERMINATOR(.BUFFER[RTP_MOD]),
			 P5 = BUFFER[RTP_DAT],
			 P6 = .BUFFER[RTP_TCT]);
		QUIT_ON_ERROR;
		CURRENTIO = .BUFFER;
		UNSOLPEND = 0;		! NO MORE DATA PENDING
		READINPROG = 1;
		END
	ELSE
		INSQUE(.BUFFER,.IOQUEUE[1]);	! QUEUE IT FOR LATER
	END;

ROUTINE QIODONE(BUFFER): NOVALUE =
!++
!
! Functional Description:
!	Send a message on the link when a terminal QIO completes.
!	Interpret the "EXIT RMT" command to exit this program.
!
! Calling Sequence:
!	standard
!
! Input Parameters:
!	BUFFER = address of the link buffer.
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	READINPROG
!	CURRENTIO
!	RETSTATUS
!
! Routines Called:
!	NEXTIO
!	FREEBUF
!
! Routine Value:
!	none
!
! Signals:
!	none
!
! Side Effects:
!	If there is an error on the write to the link, a $WAKE will be issued
!	to cause this program to abort.
!
!--
	BEGIN
	MAP BUFFER: REF RTP_BUF;
	LOCAL
		COUNT: ;
	IF .BUFFER[RTP_IOS] AND 1  THEN
		BUFFER[RTP_STS] = RS_SFC	! GOOD STATUS
	ELSE
		BUFFER[RTP_STS] = RS_FPE;	! ERROR
	BUFFER[RTP_FLG] = 0;
	BUFFER[RTP_TCT] = 0;
	COUNT = 10;				! MINIMUM MESSAGE LENGTH
	IF .BUFFER[RTP_FNC] NEQ RF_WTD  THEN
		BEGIN		! IT WAS A READ
		COUNT = .COUNT + .BUFFER[RTP_IOC];	! ADD THE DATA
		IF (.BUFFER[RTP_MOD] AND (RM_RTC+RM_RNE)) EQL 0  THEN
			BEGIN		! CHECK FOR A CARRIAGE RETURN
			IF .(.BUFFER+.COUNT+16)<0,8> EQL 13  THEN
				$QIOW	(CHAN = .RDWRTCHAN,	! ECHO CAR-RET
					 FUNC = IO$_WRITEVBLK,
					 P1 = UPLIT(13),
					 P2 = 1);
			END;
		IF .BUFFER[RTP_IOC] EQL 8  THEN		! COULD BE AN EXIT
			BEGIN
			IF CH$EQL(8,BUFFER[RTP_DAT],8,UPLIT('EXIT RMT'))  THEN
				QUIT;		! GET OUT
			IF CH$EQL(8,BUFFER[RTP_DAT],8,UPLIT('exit rmt'))  THEN
				QUIT;		! GET OUT
			END;
		IF .BUFFER[RTP_RCT] NEQ .BUFFER[RTP_IOC]  THEN
			COUNT = .COUNT + 1		! ADD TERMINATOR
		ELSE
			IF .COUNT NEQ 128  THEN
				BEGIN	! THIS IS A KLUGE FOR RSX
				COUNT = .COUNT+1;
				(.BUFFER+15+.COUNT)<0,8> = 0;	! ADD A NULL
				END;
		BUFFER[RTP_RCT] = .BUFFER[RTP_IOC];	! COUNT
		READINPROG = 0;	! DONE
		END;
	IF ((.BUFFER[RTP_MOD] AND RM_WBT) EQL 0)  AND
		(.BUFFER[RTP_FNC] NEQ RF_RSC)  THEN
		CURRENTIO = 0;		! CURRENT I/O HAS COMPLETED
	IF ((.BUFFER[RTP_FNC] EQL RF_WTD) AND 
			((.BUFFER[RTP_MOD] AND RM_NWC) NEQ 0))
			 OR (.BUFFER[RTP_IOS] EQL SS$_ABORT)  THEN
		FREEBUF(.BUFFER)
	ELSE
		BEGIN
		RETSTATUS =
		$QIO	(CHAN = .LINKCHAN,	! WRITE TO LINK
			 FUNC = IO$_WRITEVBLK,
			 IOSB = BUFFER[RTP_IOS],
			 ASTADR = LINKWRTDONE,
			 ASTPRM = .BUFFER,	
			 P1 = BUFFER[RTP_FNC],
			 P2 = .COUNT);
		IF .RETSTATUS EQL SS$_ABORT  THEN
			RETURN;		! Link gone - mailbox msg will tell why
		QUIT_ON_ERROR;
		END;
		NEXTIO();		! CHECK FOR A PENDING I/O
	END;


ROUTINE LINKWRTDONE(BUFFER): NOVALUE =
!++
!
! Functional Description:
!	Free the link buffer when a write to the link completes
!
! Calling Sequence:
!	standard
!
! Input Parameters:
!	BUFFER = address of the link buffer.
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!	RETSTATUS
!
! Implicit Outputs:
!	none
!
! Routines Called:
!	FREEBUF
!
! Routine Value:
!	none
!
! Signals:
!	none
!
! Side Effects:
!	If there was an error on the write to the link, a $WAKE is issued to 
!	cause the program to abort.
!
!--
	BEGIN
	MAP BUFFER: REF RTP_BUF;
	RETSTATUS = .BUFFER[RTP_IOS];
	IF .RETSTATUS EQL SS$_ABORT  THEN
		RETURN;		! Link gone - mailbox msg will tell why
	QUIT_ON_ERROR;
	FREEBUF(.BUFFER);	! WE NO LONGER NEED THE BUFFER
	END;

ROUTINE UNSDATENBL(BUFFER): NOVALUE =
!++
!
! Functional Description:
!	Enable or disable unsolicited data to the RSX system.
!
! Calling Sequence:
!	standard
!
! Input Parameters:
!	BUFFER = address of the link buffer
!
! Implicit Inputs:
!	UNSOLPEND
!	INDDATA
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	UNSOLENBLFLG
!
! Routines Called:
!	TERMMBXMSG
!	FREEBUF
!	READ
!
! Routine Value:
!	none
!
! Signals:
!	none
!
! Side Effects:
!	If unsolicited input is enabled, any pending data is read.
!
!--
	BEGIN
	MAP BUFFER: REF RTP_BUF;
	LOCAL
		NEWBUF: REF VECTOR;
	IF .BUFFER[RTP_FLG] NEQ RM_TUI  THEN
		BEGIN
		IF .INDDATA NEQ 0  THEN
			BEGIN			! THERE IS INDIRECT FILE DATA
			NEWBUF = GETBUF();	! GET A SUBSTITUTE BUFFER
			CH$MOVE(40,.BUFFER,.NEWBUF); ! COPY HEADER + SOME
			READ (.NEWBUF);		! GET IT
			END;
		UNSOLENBLFLG = .BUFFER;		! ENABLE
		IF .UNSOLPEND NEQ 0  THEN
			TERMMBXMSG();		! DATA ALREADY PENDING
		END
	ELSE
		BEGIN				! DISABLE
		FREEBUF(.BUFFER);		! NO LONGER NEED BUFFER
		IF .UNSOLENBLFLG NEQ 0 THEN
			BEGIN
			FREEBUF(.UNSOLENBLFLG);	! UNSOL DATA BUFFER
			UNSOLENBLFLG = 0;
			END;
		END;
	END;

ROUTINE TERMMBXMSG: NOVALUE =
!++
!
! Functional Description:
!	Handle messages from the terminal mailbox indicating unsolicited data
!	or hangup.
!
! Calling Sequence:
!	standard
!
! Input Parameters:
!	none
!
! Implicit Inputs:
!	READINPROG
!	UNSOLENBLFLG
!	ATTACHFLAG
!	SINGLEFLAG
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	UNSOLENBLFLG
!	SINGLEINPROG
!	UNSOLPEND
!
! Routines Called:
!	GETBUF
!
! Routine Value:
!	none
!
! Signals:
!	none
!
! Side Effects:
!	In the case of unsolicited input, a read to the terminal is initiated 
!	if either unsolicited input or single character mode is enabled.  A
!	new read to the terminal mailbox is also initiated.
!	In the case of a hangup, a $WAKE is issued to cause the program to 
!	abort.
!
!--
	BEGIN
	MAP UNSOLENBLFLG: REF VECTOR;
	LOCAL
		NEWBUF: REF VECTOR;
	IF .TERMMBXDATA[0] EQL MSG$_TRMUNSOLIC  THEN
	   BEGIN
	   IF .READINPROG EQL 0  THEN
		BEGIN
		IF (.UNSOLENBLFLG NEQ 0)  AND
				((.ATTACHFLAG OR .SINGLEFLAG) EQL 0)  THEN
			BEGIN
			READ(.UNSOLENBLFLG);	! READ IT
			NEWBUF = GETBUF();	! GET ANOTHER BUFFER
			NEWBUF[4] = .UNSOLENBLFLG[4];
			NEWBUF[5] = .UNSOLENBLFLG[5];
			UNSOLENBLFLG = .NEWBUF;
			END
		ELSE IF .SINGLEFLAG NEQ 0  THEN
			BEGIN		! READ A SINGLE CHARACTER
			RETSTATUS =
			$QIO	(CHAN = .RDWRTCHAN,
				 FUNC = IO$_READVBLK+IO$M_BINARY+
					MAPMODIFIER(.SINGLEFLAG[RTP_MOD]),
				 IOSB = SINGLEFLAG[RTP_IOS],
			 	 ASTADR = ONECHAR,
				 ASTPRM = .SINGLEFLAG,
				 P1 = SINGLEFLAG[RTP_DAT],
				 P2 = 1);
			QUIT_ON_ERROR;
			SINGLEINPROG = 1;
			UNSOLPEND = 0;		! NO MORE DATA PENDING
			END
		ELSE
			UNSOLPEND = 1;		! UNSOLICITED DATA PENDING
		END;
		RETSTATUS =
	   $QIO	(CHAN = .TERMMBXCHAN,	! DO IT AGAIN
		 FUNC = IO$_READVBLK,
		 ASTADR = TERMMBXMSG,
		 P1 = TERMMBXDATA,
		 P2 = 8);
	   QUIT_ON_ERROR;
	   END
	ELSE
		QUIT	! HANGUP - SO QUIT
	END;

ROUTINE BROADCAST(BUFFER): NOVALUE =
!++
!
! Functional Description:
!	Issue a broadcast function to the terminal.
!
! Calling Sequence:
!	standard
!
! Input Parameters:
!	BUFFER = address of the link buffer
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routines Called:
!	QIODONE
!
! Routine Value:
!	none
!
! Signals:
!	none
!
! Side Effects:
!	none
!
!--
	BEGIN
	MAP BUFFER: REF RTP_BUF;
	LOCAL
		BRDCSTDESC:	VECTOR[2];
	BRDCSTDESC[0] = .BUFFER[RTP_TCT];	! COUNT
	BRDCSTDESC[1] = BUFFER[RTP_DAT];	! DATA ADDRESS
	BUFFER[RTP_IOS] = $BRDCST (MSGBUF = BRDCSTDESC,	! BROADCAST IT
			 	   DEVNAM = TTYDESC);
	QIODONE(.BUFFER);		! CLEAN UP
	END;


ROUTINE CNTRLCAST: NOVALUE =
!++
!
! Functional Description:
!	Handle the AST indicating that a control-C was typed on the terminal.
!
! Calling Sequence:
!	standard
!
! Input Parameters:
!	none
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routines Called:
!	none
!
! Routine Value:
!	none
!
! Signals:
!	none
!
! Side Effects:
!	A message is sent to the host and the control-C AST is enabled.  An 
!	error will cause a $WAKE to be issued to abort the program.
!
!--
	BEGIN
	RETSTATUS =
	$QIO	(CHAN = .LINKCHAN,	! TELL HOST
		 FUNC = IO$_WRITEVBLK,
		 P1 = CNTRLCMSG,
		 P2 = 4);
	QUIT_ON_ERROR;
	RETSTATUS =
	$QIO	(CHAN = .CNTRLCHAN,	! REENABLE IT
		 FUNC = IO$_SETMODE+IO$M_CTRLCAST,
		 P1 = CNTRLCAST);
	QUIT_ON_ERROR;
	END;

ROUTINE CNTRLYAST: NOVALUE =
!++
!
! Functional Description:
!	Handle the AST indicating that a control-Y was typed on the terminal.
!
! Calling Sequence:
!	standard
!
! Input Parameters:
!	none
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routines Called:
!	none
!
! Routine Value:
!	none
!
! Signals:
!	none
!
! Side Effects:
!	A $WAKE will be issued to abort the program.
!
!--
	BEGIN
	QUIT;
	END;


ROUTINE CANCEL(BUFFER): NOVALUE =
!++
!
! Functional Description:
!	Cancel I/O's as requested by RSX.
!
! Calling Sequence:
!	standard
!
! Input Parameters:
!	BUFFER = address of the link buffere
!
! Implicit Inputs:
!	IOQUEUE
!	CURRENTIO
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routines Called:
!	FREEBUF
!
! Routine Value:
!	none
!
! Signals:
!	none
!
! Side Effects:
!	A completion message is sent to the host.
!
!--
	BEGIN
	MAP BUFFER: REF RTP_BUF;
	LOCAL
		IOBUF: REF RTP_BUF;
	IF .BUFFER[RTP_IDN] EQL -1  THEN
		BEGIN		! KILL ALL I/O
		$CANCEL	(CHAN = .RDWRTCHAN);	! CANCEL CURRENT I/O
		WHILE .IOQUEUE[0] NEQ IOQUEUE DO
			BEGIN
			REMQUE(.IOQUEUE,IOBUF);	! GET NEXT I/O
			FREEBUF(.IOBUF);
			END;
		END
	ELSE
		BEGIN		! KILL ONLY ONE I/O
		IF .CURRENTIO[RTP_IDN] EQL .BUFFER[RTP_IDN]  THEN
			BEGIN
			CURRENTIO = 0;
			$CANCEL	(CHAN = .RDWRTCHAN);
			END
		ELSE
			BEGIN
			WHILE .IOQUEUE NEQ IOQUEUE DO
				BEGIN
				IOBUF = .IOQUEUE;
				IF .IOBUF[RTP_IDN] EQL .BUFFER[RTP_IDN]  THEN
					BEGIN
					REMQUE(.IOBUF,IOBUF);
					FREEBUF(.IOBUF);
					END;
				END;
			END;
		END;
	BUFFER[RTP_FLG] = 0;
	$QIO	(CHAN = .LINKCHAN,	! WRITE TO LINK
		 FUNC = IO$_WRITEVBLK,
		 IOSB = BUFFER[RTP_IOS],
		 ASTADR = LINKWRTDONE,
		 ASTPRM = .BUFFER,	
		 P1 = BUFFER[RTP_FNC],
		 P2 = 5);
	END;

ROUTINE MAPMODIFIER(RSXMOD) =
!++
!
! Functional Description:
!	Convert RSX function code modifiers to VMS format.
!
! Calling Sequence:
!	standard
!
! Input Parameters:
!	RSXMOD = RSX modifiers
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routines Called:
!	none
!
! Routine Value:
!	VMS function code modifier
!
! Signals:
!	none
!
! Side Effects:
!	none
!
!--
	BEGIN
	LOCAL
		VMSMOD: ;
	VMSMOD = IO$M_TRMNOECHO;
	IF (.RSXMOD AND RM_RNE) NEQ 0  THEN
		VMSMOD = .VMSMOD+IO$M_NOECHO;
	RETURN(.VMSMOD);
	END;

ROUTINE ATTACH(BUFFER): NOVALUE =
!++
!
! Functional Description:
!	Handle the RSX attach and detach functions.
!
! Calling Sequence:
!	standard
!
! Input Parameters:
!	BUFFER = address of the link buffer
!
! Implicit Inputs:
!	CURRENTIO
!	UNSOLPEND
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	ATTACHFLAG
!
! Routines Called:
!	TERMMBXMSG
!	FREEBUF
!	NEXTIO
!
! Routine Value:
!	none
!
! Signals:
!	none
!
! Side Effects:
!	The request may be queued for later action.
!	If the detach reenables unsolicited input, pending data may be read.
!
!--
	BEGIN
	MAP BUFFER: REF RTP_BUF;
	IF .CURRENTIO EQL 0  THEN
		BEGIN
		IF .BUFFER[RTP_MOD] NEQ RM_DET  THEN
			ATTACHFLAG = 1
		ELSE
			BEGIN
			ATTACHFLAG = 0;
			IF (.UNSOLPEND NEQ 0)  OR  (.INDDATA NEQ 0)  THEN
				BEGIN			! DATA ALREADY PENDING
				TERMMBXDATA[0] = MSG$_TRMUNSOLIC;
				TERMMBXMSG();
				END;
			END;
		FREEBUF(.BUFFER);
		NEXTIO();		! CHECK FOR A PENDING I/O
		END
	ELSE
		INSQUE(.BUFFER,.IOQUEUE[1]);	! QUEUE IT FOR LATER
	END;


ROUTINE READSINGLE(BUFFER): NOVALUE =
!++
!
! Functional Description:
!	Enable and disable RSX single character mode.
!
! Calling Sequence:
!	standard
!
! Input Parameters:
!	BUFFER = address of the link buffer
!
! Implicit Inputs:
!	CURRENTIO
!	UNSOLPEND
!	SINGLEINPROG
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	SINGLEFLAG
!	UNSOLPEND
!
! Routines Called:
!	TERMMBXMSG
!	FREEBUF
!
! Routine Value:
!	none
!
! Signals:
!	none
!
! Side Effects:
!	The request may be queued for later action.
!	If data is pending when the mode is enabled, it is read.
!
!--
	BEGIN
	MAP BUFFER: REF RTP_BUF;
	IF .CURRENTIO EQL 0  THEN
		BEGIN
		IF (.BUFFER[RTP_MOD] AND RM_TSC) EQL 0  THEN
			BEGIN
			SINGLEFLAG = .BUFFER;	! ENABLE SINGLE CHARACTERS
			IF .UNSOLPEND NEQ 0  THEN
				TERMMBXMSG();		! DATA ALREADY PENDING
			UNSOLPEND = 0;
			END
		ELSE
			BEGIN		! DISABLE SINGLE CHARACTER MODE
			FREEBUF(.BUFFER);	! OF NO USE
			IF .SINGLEINPROG EQL 0  THEN
				FREEBUF(.SINGLEFLAG);	! NOT CURRENTLY IN USE
			SINGLEFLAG = 0;
			END;
		NEXTIO();		! IS ANYTHING ELSE QUEUED
		END
	ELSE
		INSQUE(.BUFFER,.IOQUEUE[1]);	! QUEUE IT FOR LATER
	END;


ROUTINE ONECHAR(BUFFER): NOVALUE =
!++
!
! Functional Description:
!	Handle the completion of a single character mode read.
!
! Calling Sequence:
!	standard
!
! Input Parameters:
!	BUFFER = address of the link buffer
!
! Implicit Inputs:
!	SINGLEFLAG
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	SINGLEINPROG
!
! Routines Called:
!	QIODONE
!	FREEBUF
!
! Routine Value:
!	none
!
! Signals:
!	none
!
! Side Effects:
!	none
!
!--
	BEGIN
	LOCAL
		NEWBUF: REF VECTOR;
	MAP BUFFER: REF VECTOR;
	SINGLEINPROG = 0;
	NEWBUF = GETBUF();	! GET A NEW BUFFER
	NEWBUF[4] = .BUFFER[4];
	NEWBUF[5] = .BUFFER[5];
	NEWBUF[6] = .BUFFER[6];
	QIODONE(.NEWBUF);
	IF .SINGLEFLAG EQL 0  THEN
		FREEBUF(.BUFFER);	! SINGLE CHAR MODE WAS DISABLED
	END;

ROUTINE TERMINATOR(RSXMOD) =
!++
!
! Functional Description:
!	Provide the correct terminator mask for an RSX read operation.
!
! Calling Sequence:
!	standard
!
! Input Parameters:
!	RSXMOD = RSX function modifiers
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routines Called:
!	none
!
! Routine Value:
!	address of the descriptor for the terminator mask
!
! Signals:
!	none
!
! Side Effects:
!	none
!
!--
	BEGIN
	IF (.RSXMOD AND RM_RTC) NEQ 0  THEN
		RETURN(STERMDESC)	! TERMINATE ON CONTROL CHARACTERS
	ELSE
		RETURN(NTERMDESC);	! NORMAL TERMINATORS
	END;

ROUTINE UNSUPPORTED(BUFFER): NOVALUE =
!++
!
! Functional Description:
!	Return an error message to the host for unsupported functions.
!
! Calling Sequence:
!	standard
!
! Input Parameters:
!	BUFFER = address of the link buffer
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	RETSTATUS
!
! Routines Called:
!	none
!
! Routine Value:
!	none
!
! Signals:
!	none
!
! Side Effects:
!	If there is an error on the write to the link, a $WAKE is issued to 
!	abort the program.
!
!--
	BEGIN
	MAP BUFFER: REF RTP_BUF;
	RETSTATUS =
	$QIO	(CHAN = .LINKCHAN,	! WRITE TO LINK
		 FUNC = IO$_WRITEVBLK,
		 IOSB = BUFFER[RTP_IOS],
		 ASTADR = LINKWRTDONE,
		 ASTPRM = .BUFFER,	
		 P1 = BUFFER[RTP_FNC],
		 P2 = 128);
	IF .RETSTATUS EQL SS$_ABORT  THEN
		RETURN;			! Link gone - mailbox msg will tell why
	QUIT_ON_ERROR;
	END;

ROUTINE NEXTIO: NOVALUE =
!++
!
! Functional Description:
!	Perform the next I/O on the queue.
!
! Calling Sequence:
!	standard
!
! Input Parameters:
!	none
!
! Implicit Inputs:
!	IOQUEUE
!	CURRENTIO
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routines Called:
!	WRITE
!	READ
!	READPROMPT
!	ATTACH
!	READSINGLE
!	FREEBUF
!
! Routine Value:
!	none
!
! Signals:
!	none
!
! Side Effects:
!	none
!
!--
	BEGIN
	LOCAL
		NEWIO: REF RTP_BUF;
	IF (.IOQUEUE[0] NEQ IOQUEUE) AND (.CURRENTIO EQL 0)  THEN
		BEGIN		! TAKE AN I/O OFF THE QUEUE
		REMQUE(.IOQUEUE,NEWIO);
		CASE .NEWIO[RTP_FNC] FROM 3 TO 9 OF
			SET
			[RF_WTD]:	WRITE(.NEWIO);
			[RF_RDD]:	READ(.NEWIO);
			[RF_WRD]:	READPROMPT(.NEWIO);
			[RF_ATT]:	ATTACH(.NEWIO);
			[RF_RSC]:	READSINGLE(.NEWIO);
			[INRANGE]:	FREEBUF(.NEWIO);
			TES;
		END;
	END;


ROUTINE LINKMBXMSG: NOVALUE =
!++
!
! Functional Description:
!	Handle messages received on the link mailbox.
!
! Calling Sequence:
!	standard
!
! Input Parameters:
!	none
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	RETSTATUS
!
! Routines Called:
!	none
!
! Routine Value:
!	none
!
! Signals:
!	none
!
! Side Effects:
!	A new read on the link mailbox may be initiated.
!	A $WAKE may be issued to abort the program in case of a link error.
!
!--
	BEGIN
	IF (.LINKMAIL[0] EQL MSG$_DISCON)  OR  (.LINKMAIL[0] EQL MSG$_ABORT)  THEN
		BEGIN		! TIME TO QUIT
		$PUTMSG (MSGVEC = UPLIT(2,REM$_NETDIS,0));
		QUIT;
		END

	ELSE
		BEGIN		! IGNORE IT
		RETSTATUS =
		$QIO	(CHAN = .MAILCHAN,	! LINK MAILBOX READ
			 FUNC = IO$_READVBLK,
			 ASTADR = LINKMBXMSG,
			 P1 = LINKMAIL,
			 P2 = 40);
		QUIT_ON_ERROR;
		END;
	END;

ROUTINE INDREAD =
!++
!
! Functional Description:
!	Read a record from an indirect command file.
!
!
! Calling Sequence:
!	standard
!
! Input Parameters:
!	none
!
! Implicit inputs
!	INDDATA
!	INDFLAG
!	SYSINRAB
!	SYSINFAB
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	SYSINRAB
!
! Routines Called:
!	$GET
!	$CLOSE
!	FREEBUF
!
! Routine Value:
!	Status of the $GET
!
! Signals:
!	none
!
! Side Effects:
!	If an EOF is read, the indirect command file is closed.
!
!--
	BEGIN
	RETSTATUS =
	$GET (RAB = SYSINRAB);		! READ A RECORD
	IF .RETSTATUS EQL RMS$_EOF  THEN
		BEGIN			! END OF FILE
		$CLOSE (FAB = SYSINFAB);	! CLOSE THE COMMAND FILE
		FREEBUF(.INDDATA);		! GET RID OF THE BUFFER
		INDDATA = 0;			! NO MORE DATA
		INDFLAG = 0;			! NO MORE FILE
		END
	ELSE
		BEGIN
		IF (.RETSTATUS AND 1) EQL 0  THEN  RETURN .RETSTATUS;	! ERROR
		(.INDDATA+26+.SYSINRAB[RAB$W_RSZ])<0,8> = %X'0D';	! ADD TERMINATOR
		INDDATA[RTP_IOC] = .SYSINRAB[RAB$W_RSZ];	! RECORD SIZE
		INDDATA[RTP_IOS] = .RETSTATUS;			! STATUS FROM THE $GET
		END;
	RETURN .RETSTATUS;
	END;

ROUTINE GETTERMCHAR(BUFFER): NOVALUE =
!++
!
! Functional Description:
!	Return the terminal characteristics
!
! Calling Sequence:
!	standard
!
! Input Parameters:
!	BUFFER = address of buffer from link
!
! Implicit Inputs:
!	none	
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routines Called:
!	none
!
! Routine Value:
!	none
!
! Signals:
!	none
!
! Side Effects:
!	none
!
!--
	BEGIN
	LOCAL
		CHARPTR : REF VECTOR[,BYTE],
		CHARBUF : VECTOR[3];
	MAP
		BUFFER : REF RTP_BUF;
	BIND
		TERMTYPE = CHARBUF+1 : BYTE,
		TERMWIDTH = CHARBUF+2 : WORD,
		TERMCHAR = CHARBUF[1] : BLOCK[,BYTE],
		TERMLENGTH = CHARBUF[1]+3 : BYTE,
		TERMCHAR2 = CHARBUF[3] : BLOCK[,BYTE];

	RETSTATUS =
	$QIOW	(CHAN = .CNTRLCHAN,
		 FUNC = IO$_SENSEMODE,
		 P1 = CHARBUF,
		 P2 = 12);
	QUIT_ON_ERROR;
	CHARPTR = BUFFER[RTP_DAT];	! POINT TO THE CHARACTERISTICS LIST
	UNTIL .CHARPTR[0] EQL 0
		DO
		BEGIN
		CASE .CHARPTR[0] FROM 0 TO RC_MAX OF
			SET
			[RC_HHT]:
				CHARPTR[1] = .TERMCHAR[TT$V_MECHTAB];
			[RC_NEC]:
				CHARPTR[1] = .TERMCHAR[TT$V_NOECHO];
			[RC_TTP]:
				SELECTONE .TERMTYPE OF
					SET
					[DT$_VT100]:
						CHARPTR[1] = 13;
					[DT$_VT52]:
						CHARPTR[1] = 9;
					[OTHERWISE]: ;
					TES;
			[RC_SCP]:
				CHARPTR[1] = .TERMCHAR[TT$V_SCOPE];
			[RC_BIN]:
				CHARPTR[1] = .TERMCHAR[TT$V_PASSALL];
			[RC_TPL]:
				CHARPTR[1] = .TERMLENGTH;
			[INRANGE]: ;
			[OUTRANGE]: ;
			TES;
		CHARPTR = .CHARPTR + 2;
		END;
	BUFFER[RTP_STS] = RS_SFC;		! GOOD STATUS
	RETSTATUS =
	$QIO	(CHAN = .LINKCHAN,		! WRITE TO LINK
		 FUNC = IO$_WRITEVBLK,
		 IOSB = BUFFER[RTP_IOS],
		 ASTADR = LINKWRTDONE,
		 ASTPRM = .BUFFER,
		 P1 = BUFFER[RTP_FNC],
		 P2 = (.CHARPTR + 2 - BUFFER[RTP_FNC]));
	IF .RETSTATUS EQL SS$_ABORT  THEN
		RETURN;				! LINK GONE - MAILBOX MESSAGE WILL TELL WHY
	QUIT_ON_ERROR;
	END;	


	END
	ELUDOM
