	.TITLE	SHOW$LOGICAL
	.IDENT	'V03-001'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY:	DCL SHOW COMMAND
;
; ABSTRACT:
;
;	This module implements the options of the SHOW LOGICAL DCL command
;	that need to be implemented in the SHOW image.
;
; ENVIRONMENT:
;
;	Runs in user mode but needs privilege to change mode to Kernel
;
; AUTHOR : BEATRICE U. WALTHER,  CREATION DATE: 27-nov-1977
;
; MODIFIED BY:
;
;	V03-001	GAS45129	Gerry Smith		 6-Apr-1982
;		Fix bug that caused ACCVIO when an equivalence name
;		starts with <ESC> and is less than 4 characters in length.
;
;	V02-012	KTA0085		Kerbey T. Altmann	22-Feb-1982
;		Fix bug that prevented table sizes < 4 from being
;		displayed.
;
;	V02-011	BLS0142		Benn Schreiber		 4-Feb-1982
;		Correct PPF logicals handling
;
;	V010	TMH0010		Tim Halvorsen		04-Feb-1982
;		Remove reference to CLI$K_ symbols at assembly time.
;
;	V02-009	BLS0140		Benn Schreiber		28-Jan-1982
;		Sort logical names before displaying.
;
;	V02-008	BLS0128		Benn Schreiber		1-Jan-1982
;		Add wildcarding
;
;	V02-007	LJK0099		Lawrence J. Kenah	8-Dec-1981
;		Fix broken word displacements. 
;
;	V02-006	KTA0045		Kerbey T. Altmann	16-Nov-1981
;		Fix problem with group logical names.
;
;	V02-005	GWF0109		Gary W. Fowler		29-Sep-1981
;		Fix problem of not creating a big enough scratch area to
;		hold logical name table.
;
;	V02-004 KTA0026		Kerbey T. Altmann	24-Jul-1981
;		Change access of LOG$AL_LOGTBL for indirection.
;
;	V02-003	KTA0023		Kerbey T. Altmann	18-Jun-1981
;		Change logic for scanning system/group table to
;		conform to new hash table usage.
;
;	V02-002	GWF0001		Gary W. Fowler		11-Sep-1980
;		Double size of buffer used to copy name table into
;--


	.SBTTL	DECLARATIONS

;
; Include files:
;

	$CLIDEF				; Command language interface definitions
	$PCBDEF				; process control block definitions
	$LOGDEF				; logical name block
	$PRDEF				; process registers definitions
	$SHRDEF				; define shared messages
	$STSDEF				; error code definitions

;
; Macros:
;
;+
; The $SHR_MESSAGES macro defines facility-specific message codes
;	which are based on the system-wide shared message codes.
;
;	$SHR_MESSAGES	name, code, <<msg,severity>, ... >
;
;	where:
;	    "name" is the name of the facility (e.g., COPY)
;	    "code" is the corresponding facility code (e.g., 103)
;	    "msg" is the name of the shared message (e.g., BEGIN)
;	    "severity" is the desired message severity (e.g., 1, 0, 2, 4)
;
;-
	.MACRO	$SHR_MESSAGES	NAME,CODE,MSGCODES
;
	.IF	NDF,SHR$K_SHRDEF  ; issue $SHRDEF if not done yet
		SHR$K_SHRDEF = 1 ; define symbol to indic $SHRDEF done
		$SHRDEF		 ; define shared message codes
	.ENDC
	.IRP	MSGPAIR, <'MSGCODES>
		$SHRMSG_COD 'NAME', 'CODE', MSGPAIR
	.ENDR
	.ENDM
	.MACRO	$SHRMSG_COD NAME, CODE, MSG, SEVERITY
;
	.IF	IDN,SEVERITY,WARNING    ; if WARNING, set 0 sev
	  'NAME'$_'MSG' = 0	        ; set 0 sev (WARNING)
	.IFF
	  .IF	IDN,SEVERITY,SUCCESS    ; if SUCCESS, set 1 sev
	    'NAME'$_'MSG' = 1	        ; set 1 sev (SUCCESS)
	  .IFF
	    .IF	IDN,SEVERITY,ERROR      ; if ERROR, set 2 sev
	      'NAME'$_'MSG' = 2	        ; set 2 sev (ERROR)
	    .IFF
	      .IF IDN,SEVERITY,INFO     ; if INFO, set 3 sev
	        'NAME'$_'MSG' = 3       ; set 3 sev (INFO)
	      .IFF
	        .IF IDN,SEVERITY,SEVERE ; if SEVERE, set 4 sev
	          'NAME'$_'MSG' = 4     ; set 4 sev (SEVERE)
	        .IFF
	          'NAME'$_'MSG' = 'SEVERITY ; set specified sev
	        .ENDC
	      .ENDC
	    .ENDC
	  .ENDC
	.ENDC
	 'NAME'$_'MSG' = 'NAME'$_'MSG'+SHR$_'MSG'+<'CODE'@16>
	.ENDM


;
; Equated symbols:
;

	_VIELD	LOGI,0,<-		; define Bitmasks
			<SYST,,M>,-	; /SYSTEM qualifier	*** Warning:
			<GROU,,M>,-	; /GROUP qualifier	*** Bit positions
			<PROC,,M>,-	; ( /PROCESS)		*** relevant
			<ALL,,M>,-	; /ALL qualifier
			<LOGN,,M>,-	; input parameter present
			>

	$SHR_MESSAGES	SHOW,120,<-	; define shared messages
		<INSVIRMEM,ERROR>,-	; Insufficient virtual memory
			>

MAX_TRAN_LEVELS=10			; maximum number of recursions 
USER_MODE=3
PROGRAM_REGION=0

;
; Own storage:
;

	.PSECT	SHOW$RWDATA	LONG,RD,WRT,NOEXE

;
; define CLI call back structures
;

LOGI_A_GETQUAL:
	$CLIREQDESC	-		; CLI request descriptor block 
		RQTYPE=CLI$K_GETQUAL,-	; to get qualifiers
		QUALST=LOGI_A_QUALST	; pointer to qualifier list
LOGI_A_QUALST:				; qualifier list
	$CLIQUALDEF	-
		QDCODE=CLI$K_SHLG_SYST,-; /SYSTEM
		SETLST=LOGI_V_SYST	;
	$CLIQUALDEF	-
		QDCODE=CLI$K_SHLG_GROU,-; /GROUP
		SETLST=LOGI_V_GROU	;
	$CLIQUALDEF	-		;
		QDCODE=CLI$K_SHLG_PROC,-; /PROCESS
		SETLST=LOGI_V_PROC	;
	$CLIQUALDEF	-
		QDCODE=CLI$K_SHLG_ALL,-	; /ALL
		SETLST=LOGI_V_ALL	;
	$CLIQUALDEF	END_LIST
LOGI_A_GETINP:
	$CLIREQDESC	-		; CLI request descriptor block
		RQTYPE=CLI$K_INPUT1,-	; get input parameter
		BITNUM=LOGI_V_LOGN,-	; bit to set if present
		PRSACT=LOGI_LOGN_PRES	; routine to call if present

	.ALIGN	LONG

LOGI_L_FLAGS:
	.LONG	0			; Internal SHOW LOGICAL flags
	LOGI_V_WILDLOG = 0		;  Bit 0 - wild card in logical name
	LOGI_V_HAVE1 = 1		;  Bit 1 - found at least one name

LOGI_L_BITLS:
	.LONG	0			; CLI BIT LIST
LOGI_Q_SCRATCH:
	.BLKQ	1			; scratch area delimiters
;*** DO NOT SEPARATE LOGI_Q_LOGNAM AND LOGI_Q_EQUNAM AND LOGI_TRANS_LST
LOGI_LOGNAM_LST:
LOGI_Q_LOGNAM:
	.BLKL	2			; descriptor for logical name
LOGI_Q_EQUNAM:
	.BLKL	2			; descriptor for equivalent name
LOGI_TRANS_LST:
	.BLKL	1			; pointer to table name

LOGI_T_LOGNAM:
	.BLKB	LOG$C_NAMLENGTH		; buffer for logical name
LOGI_T_EQUNAM:
	.BLKB	LOG$C_NAMLENGTH		; buffer for equivalent name
LOGI_L_TABLE:
	.BLKL	1			; resultant table
LOGI_L_NAMCNT:
	.BLKL	1			; number of logical names found
LOGI_L_MAXNAM:
	.BLKL	1			; maximum number of names found
LOGI_L_NAMTAB:
	.BLKL	1			; address of name address table

;
; Text
;

	.PSECT	SHOW$MSG_TEXT	BYTE,RD,NOWRT,NOEXE

LOGI_L_TABNAM:
	.LONG	LOGI_T_SYSTEM
	.LONG	LOGI_T_GROUP
	.LONG	LOGI_T_PROCESS
LOGI_T_SYSTEM:
	.ASCIC	/system/
LOGI_T_GROUP:
	.ASCIC	/group/
LOGI_T_PROCESS:
	.ASCIC	/process/


	.SBTTL	SHOW$LOGI_CLI	- SHOW LOGICAL CLI interface

;++
; FUNCTIONAL DESCRIPTION:
;
;	CLI interface and main control flow of SHOW LOGICAL command.
;
;
; CALLING SEQUENCE:
;
;	CALLS
;
; INPUT PARAMETERS:
;
;	CLI$A_UTILSERV(AP) = address of CLI utility service routine

;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	R0 =	SS$_NORMAL  
;		SS$_NOTRAN  : no tranlation found for logical name
;		SHOW$_INSVIRMEM : scratch area overflow
;		anythin else : error code returned
;
; SIDE EFFECTS:
;
;	NONE
;
; REGISTER USAGE:
;
;
;--

	.PSECT	SHOW$CODE	BYTE,RD,NOWRT,EXE
	.ENTRY	SHOW$LOGI_CLI,^M<R2,R3,R4>

;
; Initialize
;

	MOVL	S^#SS$_NORMAL,W^SHOW$L_STATUS
					; assume success

;
; Parse qualifiers
;

	PUSHAB	W^LOGI_L_BITLS		; bitlist
	PUSHAB	W^SHOW$A_CLIWORK	; CLI work area
	PUSHAB	W^LOGI_A_GETQUAL	; request get qualifiers
	CALLS	#3,@CLI$A_UTILSERV(AP)	; call CLI utitlity address
	EXTZV	#0,#3,W^LOGI_L_BITLS,R1	; test /PROCESS, /GROUP and /SYSTEM
	BNEQU	10$			; branch if any one set
	BISL	#7,W^LOGI_L_BITLS	; if they are all clear, set them all

;
; get input parameter
;

10$:
	CLRL	LOGI_L_FLAGS		; Clear internal flags
	PUSHAB	W^LOGI_L_BITLS		; bitlist
	PUSHAB	W^SHOW$A_CLIWORK	; CLI work area
	PUSHAB	W^LOGI_A_GETINP		; get input paramter
	CALLS	#3,@CLI$A_UTILSERV(AP)	; call CLI
	MOVL	W^SHOW$L_STATUS,R0	; load status code set by action routine
	BBS	#LOGI_V_WILDLOG,W^LOGI_L_FLAGS,12$ ; Branch if wild card name specified
	BBC	#LOGI_V_LOGN,W^LOGI_L_BITLS,12$	; all done if parameter was present
	BRW	90$
;
; /ALL qualifier or no parameter present
;
12$:
	ADDL3	#511,G^SGN$GL_PAGEDYN,R1 ; get size of paged pool in bytes
	DIVL2	#512,R1			; convert to no. of pages
	MOVL	#CTL$C_PRCALLSIZ,R0	; get size of process allocation region
	CMPL	R0,R1			; compare sizes
	BGTR	15$			; use the largest value as input to
	MOVL	R1,R0			; expand region
15$:	MULL3	R0,#512,-(SP)		; figure number of bytes needed
	MOVAL	W^LOGI_Q_SCRATCH,R2	; get address of scratch buffer
	PUSHAL	(R2)			; stack address to return buffer addr
	ADDL3	(SP),4(SP),4(R2)	; figure end of scratch buffer
	DECL	4(R2)			;
	PUSHAL	4(SP)			; stack address of number of bytes
	CALLS	#2,G^LIB$GET_VM		; allocate scratch buffer
	BLBC	R0,90$			; Branch if error
	ADDL2	(R2)+,(R2)		; compute end of buffer

	MOVZBL	#LOG$C_PROCESS,W^LOGI_L_TABLE
					; assume codes are contiguous
20$:
	BBC	W^LOGI_L_TABLE,W^LOGI_L_BITLS,30$
					; is corresponding qualifier present
	CLRL	W^LOGI_L_NAMCNT		; clear count of names found
	$CMKRNL_S	W^LOGI_COPY	; copy logical name table
	BLBC	R0,90$			; branch if error
	CALLS	#0,W^LOGI_PRINT		; format and print info
30$:
	SOBGEQ	W^LOGI_L_TABLE,20$
					; repeat for all tables
;
; if there was a wild card, make sure we found at least
; one logical name
;
	BBC	#LOGI_V_WILDLOG,W^LOGI_L_FLAGS,90$ ; skip if no wild chars
	BBS	#LOGI_V_HAVE1,W^LOGI_L_FLAGS,90$ ; skip if we found one somewhere
	PUSHL	#SHOW$_NOTRAN		; message code for no translation
	PUSHAL	W^LOGI_A_GETINP+CLI$Q_RQDESC ; address of logical name
	CALLS	#2,W^SHOW$PRINT_MSG	; print message
;
; exit
;
90$:
	MOVL	R0,W^SHOW$L_STATUS	; save status
	RET				; and return


	.SBTTL	LOGI_LOGN_PRES	- action routine for input parameter present
;++
; FUNCTIONAL DESCRIPTION:
;
;	Action routine called by the CLI if an input parameter is found present.
;
;
; CALLING SEQUENCE:
;
;	CALLS
;
; INPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT INPUTS:
;
;	Input parameter descriptor  : CLI$Q_RQDESC+LOGI_A_GETIN
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	R0 =	SS$_NORMAL  : success
;		SS$_NOTRAN  : no translation for logical name
;		anything else : error code returned by system service
;
; SIDE EFFECTS:
;
;	NONE
;
; REGISTER USAGE:
;
;	R6 = logical name table code
;	R9 = search mask
;	R10= counter for number of recursions
;	R11= scratch
;
;
;--

	.PSECT	SHOW$CODE	BYTE,RD,NOWRT,EXE

LOGI_LOGN_PRES::
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>

;
; See if wild card characters present.  If so, simply set flag and
; return for kernel mode routine to use parameter as match
;
	MOVAB	W^LOGI_A_GETINP,R4	; address of parameter descriptor block
	LOCC	#^A/*/,CLI$W_RQSIZE(R4),@CLI$A_RQADDR(R4) ; See if "*"
	BNEQ	3$			; Branch if found
	LOCC	#^A/%/,CLI$W_RQSIZE(R4),@CLI$A_RQADDR(R4) ; See if "%"
	BEQL	5$			; Branch if not there
3$:	BRW	100$			; exit
;
; translate logical name
;
5$:	EXTZV	#0,#3,W^LOGI_L_BITLS,R9	; build search mask
	MCOML	R9,R9			; for logical name translation
	MOVAL	W^LOGI_A_GETINP,R2	; address of parameter descriptor block
	MOVZWL	W^CLI$W_RQSIZE(R2),R1	; get length of logical name
	MOVAL	W^LOGI_Q_LOGNAM,R7	; point to descriptor
	MOVZWL	R1,(R7)			; build descriptor to logical name
	MOVAL	W^LOGI_T_LOGNAM,4(R7)
	MOVC3	R1,@CLI$Q_RQDESC+4(R2),@4(R7)
					; copy logical name
	MOVAL	W^LOGI_Q_EQUNAM,R8	; point to equivalence descriptor
	MOVZWL	#LOG$C_NAMLENGTH,(R8)	; create a descriptor
	MOVAL	W^LOGI_T_EQUNAM,4(R8)
	CLRL	R10			; indicate nothing translated yet

10$:
	$TRNLOG_S	-		; translate logical name
		LOGNAM=(R7),-		; descriptor to logical name
		RSLBUF=(R8),-		; resulting buffer descriptor
		RSLLEN=(R8),-		; resulting length
		TABLE=W^LOGI_L_TABLE,-	; resultant table
		DSBMSK=R9		; search mask
	BLBS	R0,12$			; branch if error
	BRW	90$			;
12$:
	CMPL	R0,#SS$_NOTRAN		; was equivalent name found ?
	BNEQU	20$			; branch if found
	TSTL	R10			; anything translated yet ?
	BEQLU	80$			; branch if nothing yet
	BRW	90$			; else exit

15$:	BRB	10$			; so aobleq will reach

;
; construct strings and print them
;

20$:
	CMPB	@4(R8),#27		; 1ST char. of equiv. string an escape ?
	BNEQU	30$			; branch if no
	SUBW2	#4,(R8)			; adjust resultant length
	BGEQ	25$			; branch if more than 4 characters
	ADDW2	#4,(R8)			; else don't adjust length
	BRB	30$
25$:
	ADDL2	#4,4(R8)		; adjust pointer
30$:
	MOVZBL	W^LOGI_L_TABLE,R3	; retrieve logical name table code
	MOVL	G^LOGI_L_TABNAM[R3],W^LOGI_TRANS_LST
					; insert poiner to proper string
	PUSHL	#SHOW$_TRNLOG		; message code
	PUSHAL	W^LOGI_LOGNAM_LST	; parameter list
	CALLS	#2,W^SHOW$PRINT_MSG	; print logical name, equivalent and table
	MOVZWL	(R8),R11		; get length of resultant string
	MOVW	R11,(R7)		; feed back as input string
	MOVW	#LOG$C_NAMLENGTH,(R8)	; restore original length
	MOVC3	R11,@4(R8),@4(R7)	; copy string
	DECL	R11			; test for ending colon
	MOVL	4(R7),R2		; point to string
	ADDL2	R11,R2			; point to last character in input string
	CMPB	(R2),#^A/:/		; is it a colon ?
	BNEQU	40$			; branch if not a colon
	MOVW	R11,(R7)		; make string one character shorter
40$:
	AOBLEQ	#MAX_TRAN_LEVELS,R10,15$ ; try again unless limit on recursion reached

;
; exits
;

80$:
	PUSHL	#SHOW$_NOTRAN		; message code for no translation
	PUSHAL	W^CLI$Q_RQDESC+LOGI_A_GETINP
					; input parameter
	CALLS	#2,W^SHOW$PRINT_MSG	; print message
	BISL	#STS$M_INHIB_MSG,R0	; inhibit furhter message output
90$:
	MOVL	R0,W^SHOW$L_STATUS	; Save status
	RET

100$:	BBSS	#LOGI_V_WILDLOG,W^LOGI_L_FLAGS,110$ ; Flag wild character
110$:	MOVL	#1,R0			; Set success
	BRB	90$			; and return

	.SBTTL	LOGI_COPY	- copy logical name table
;++
; FUNCTIONAL DESCRIPTION:
;
;	Copies the relevant name table into a scratch area for later formatting
;	and printing
;
;
; CALLING SEQUENCE:
;
;	CALLS
;
; INPUT PARAMETERS:
;
;	none
;
; IMPLICIT INPUTS:
;
;	LOGI_L_TABLE : code for logical name table beeing processed
;	LOGI_W_GROUP : current process's group number
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	R0	= SS$_NORMAL	if no error encountered
;		  SHOW$_INSVIRMEM : scratch area overflow
;
; SIDE EFFECTS:
;
;	NONE
;
; REGISTER USAGE:
;
;	R3 =	code for logical name table
;	R6=	current pointer to scratch area
; 	R7=	updated pointer to scratch area
;	R8= 	limit pointer of scratch area
;	R9 =	Head of logical name queue
;	R11=	Pointer to current logical name block
;	R10= 	counter
;
;--

	.PSECT	SHOW$CODE	BYTE,RD,NOWRT,EXE
LOGI_COPY:
	.WORD	^M<R6,R7,R8,R9,R10,R11>

;
; lock relevant name table for read ( name table code in R3)
;

	MOVL	W^LOGI_Q_SCRATCH,R7	; start of scratch area
	MOVL	W^LOGI_Q_SCRATCH+4,R8	; limit to scratch area
	MOVZBL	W^LOGI_L_TABLE,R3	; code for logical name table
	MOVL	@#CTL$GL_PCB,R4		; address of current PCB
	PUSHR	#^M<R3,R4>		; save registers for unlock
	MNEGL	#1,-(SP)		; signal don't check for group
	CMPB	R3,#LOG$C_GROUP		; are we processing /GROUP ?
	BNEQU	10$			; branch if no
	MOVZWL	PCB$W_GRP(R4),(SP)	; save current process's group
10$:	MOVL	G^LOG$AL_LOGTBL[R3],R11	; get sytem or group l.n. queue head
	MOVL	G^LOG$GL_HTBLSIZ[R3],R10; pick up number of entries
	MOVL	(R11), R11		; pick up actual address
	MOVL	R11,R9			; remember the value
	CMPB	R3,#LOG$C_PROCESS	; is it the process name table ?
	BEQL	15$			; yes, skip the locking
	JSB	G^LOG$LOCKR		; request lock
15$:	MULL	#4,R10			; get the hash table size
	ADDL3	R11,R10,-(SP)		; set upper address limit

;
; scan logical name table
;

20$:	CMPL	R9,(SP)			; at end of table?
	BGEQU	90$			; yes, quit now
	MOVL	(R9)+,R11		; no, get next entry in hash table
	BEQL	20$			; none, check next one
30$:	TSTL	4(SP)			; processing /GROUP ?
	BLSS	40$			; branch if not /GROUP
	CMPW	4(SP),LOG$W_GROUP(R11)	; compare with group of creator
	BNEQU	60$			; branch  if no match

;
; copy logical name and equivalent name
;

40$:
	BBC	#LOGI_V_WILDLOG,W^LOGI_L_FLAGS,45$ ; Branch if no wild char in param
	MOVZBL	LOG$T_NAME(R11),R2	; Set up args for matchname
	MOVAL	LOG$T_NAME+1(R11),R3	;
	MOVAL	W^LOGI_A_GETINP,R5	; Point to input block
	MOVZWL	CLI$W_RQSIZE(R5),R4	; Get length of parameter
	MOVL	CLI$A_RQADDR(R5),R5	; and address
	JSB	G^FMG$MATCH_NAME	; See if a match
	BLBC	R0,60$			; If not, skip this logical name
45$:	MOVL	#2,R10			; counter
	MOVAL	LOG$T_NAME(R11),R1	; address of 1st counted string
50$:	MOVZBL	(R1),R0			; length of counted string
	INCL	R0			; add one for count
	MOVL	R7,R6			; sabe pointer to scratch area
	ADDL	R0,R7			; update pointer to scratch
	CMPL	R7,R8			; test for overflow
	BGEQU	80$			; branch if overflow
	MOVC3	R0,(R1),(R6)		; copy one counted string
	SOBGTR	R10,50$			; do it twice
	INCL	W^LOGI_L_NAMCNT		; count another name found
60$:	MOVL	LOG$L_LTFL(R11),R11	; next logical name block
	BEQL	20$			; branch if no more
	BRB	30$			; and go again

;
; exits
;

80$:	MOVL	#SHOW$_INSVIRMEM,R0	; scratch area overflow
	BRB	98$			; and return

90$:	CLRL	(R7)			; end by null string (just in case)
	MOVL	S^#SS$_NORMAL,R0	; normal status
98$:	ADDL2	#8,SP			; clean stack
	POPR	#^M<R3,R4>		; restore save registers
	CMPB	R3,#LOG$C_PROCESS	; was it the process logical name table
	BEQLU	99$			; skip unlocking if process
	PUSHL	R0			; save return code
;%%%
	JSB	G^LOG$UNLOCK		; unlock logical name table
;%%%
	SETIPL	#0			; drop IPL
	POPL	R0			; restore return code
99$:	RET				; and return


	.SBTTL	LOGI_PRINT	- Format and print list of logical names
;++
; FUNCTIONAL DESCRIPTION:
;
;	This routine formats and prints the list of logical names and
;	their equivalent previously copied into a scratch area.
;
;
; CALLING SEQUENCE:
;
;	CALLS
;
; INPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT INPUTS:
;
;	LOGI_L_TABLE	= code indicating logical name table beeing processed
;	LOGI_SCRATCH	= Pointer to scratch area. 
;			( end signaled by zero length counted string)
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	R0	= SS$_NORMAL
;
; SIDE EFFECTS:
;
;	NONE
;
;--

	.PSECT	SHOW$CODE	BYTE,RD,NOWRT,EXE

LOGI_PRINT:
	.WORD	^M<R3,R4,R5,R6,R7,R8,R9,R10,R11>

;
; get a buffer for sorting
;
	CLRL	R0			; assume no entries
	MOVZBL	W^LOGI_L_TABLE,R6	; get code for logical name table
	MOVAL	W^LOGI_L_MAXNAM,R5	; point to max number of entries
	MOVL	W^LOGI_L_NAMCNT,R3	; get number of entries
	BNEQ	5$			; branch if some entries
	BRW	100$
4$:	BRW	130$			; branch aid
5$:	MOVAL	W^LOGI_L_NAMTAB,R7	; point to table pointer cell
	TSTL	(R7)			; any table allocated?
	BEQL	10$			; if eql no
	CMPL	R3,(R5)			; yes, is it big enough?
	BLEQU	20$			; if leq yes
	MULL3	(R5),#4,-(SP) 		; compute length of old buffer
	PUSHAL	(R7)
	PUSHAL	4(SP)
	CALLS	#2,G^LIB$FREE_VM	; deallocate old buffer
10$:	MULL3	R3,#4,-(SP) 		; compute size of new buffer
	PUSHAL	(R7)
	PUSHAL	4(SP)
	CALLS	#2,G^LIB$GET_VM		; allocate buffer
	BLBC	R0,4$			; branch if error
	MOVL	R3,(R5)			; set length of buffer
20$:	MOVL	(R7),R7			; point to the buffer
;
; loop through the scratch buffer, and get the log name addrs into
; namtab
;
	MOVL	W^LOGI_Q_SCRATCH,R11	; get scratch area pointer
30$:	MOVZBL	(R11),R10		; size of counted string
	BEQLU	50$			; branch if null
	MOVL	R11,(R7)+		; store address in namtab
	MOVAB	1(R11)[R10],R11		; point to equivalence name
	MOVZBL	(R11),R10		; get length of equiv name
	CMPB	1(R11),#27		; 1st character escape ?
	BNEQU	40$			; branch if no
	SUBL3	#4,R10,R0		; adjust length
	BLSS	40$			; if less than 4 characters, don't adjust
	MOVB	R0,(R11)		; store adjusted length
	MOVC3	R0,5(R11),1(R11)	; move name up
40$:	MOVAB	1(R11)[R10],R11		; skip to next name
	BRB	30$			; go for next name
;
; sort the logical names
;
50$:	PUSHL	W^LOGI_L_NAMTAB		; stack table address
	PUSHL	W^LOGI_L_NAMCNT		; stack number of names
	CALLS	#2,W^SORT_LIST		; 
;
; print title
;
	MOVL	L^LOGI_L_TABNAM[R6],W^LOGI_TRANS_LST ; in case wild char
	MOVL	#1,R9			; Assume wild char
	BBS	#LOGI_V_WILDLOG,W^LOGI_L_FLAGS,60$ ; skip title if wild char
	CLRL	R9
	PUSHL	#SHOW$_LOGTTL		; message code
	PUSHAL	G^LOGI_L_TABNAM[R6]	; text string for name table
	CALLS	#2,W^SHOW$PRINT_MSG	; print title
60$:	MOVL	W^LOGI_L_NAMTAB,R4	; point to namtab buffer
	MOVL	W^LOGI_L_NAMCNT,R5	; get count of entries
	MOVAL	W^LOGI_Q_LOGNAM,R7	; get address of descriptors
	MOVAL	W^LOGI_LOGNAM_LST,R8	; point to parameter list
70$:	MOVL	(R4)+,R10		; get address of next name
	MOVL	R7,R3			; temp pointer into descriptors
;
; format and print logical name and equivalence
;
	MOVL	S^#SS$_NORMAL,R0	; signal success
	BLBS	R9,90$			; branch if wild
	MOVZBL	(R10)+,R1		; get length of name
	MOVL	R1,(R8)			; store the length
	MOVAB	(R10),4(R8)		; store logical name address
	ADDL2	R1,R10			; point to equivalence name
	MOVZBL	(R10)+,8(R8)		; store the length
	MOVAB	(R10),12(R8)		; store equivalence name address
	PUSHL	#SHOW$_LOGTRAN		; message code
	PUSHAL	W^LOGI_LOGNAM_LST	; parameter list
80$:	CALLS 	#2,W^SHOW$PRINT_MSG	; issue message
	SOBGTR	R5,70$			; loop for all names
	BRB	100$			; all done
;
; logical name had wild cards...print differently
;
90$:	MOVZBL	(R10)+,(R3)+		; store length in descriptor
	MOVAB	(R10),(R3)+		; store string address
	ADDL2	-8(R3),R10		; point to equivalence name
	MOVZBL	(R10)+,(R3)+		; store length of equivalence name
	MOVAB	(R10),(R3)		; and it's address
	PUSHL	#SHOW$_TRNLOG		; stack message code
	PUSHAL	W^LOGI_LOGNAM_LST	; and parameter list
	BBCS	#LOGI_V_HAVE1,W^LOGI_L_FLAGS,80$ ; flag we found 1 name
	BRB	80$
;
; exit
;

100$:
	BLBS	R0,120$			; all done if anything printed
	BBS	#LOGI_V_WILDLOG,W^LOGI_L_FLAGS,110$ ; Branch if wild
	PUSHL	#SHOW$_LOGEMPTY		; mmessage id
	PUSHAL	G^LOGI_L_TABNAM[R6]	; pointer to text 
	CALLS	#2,W^SHOW$PRINT_MSG	; issue message
110$:	MOVL	S^#SS$_NORMAL,R0	; make everything OK
120$:
	RET				; return
130$:	MOVL	#SHOW$_INSVIRMEM,R0	; return not enough memory
	MOVL	R0,SHOW$L_STATUS	; save status
	RET


steps:	.long	1, 4, 13, 40, 121, 364, 1093, 3280, 9841, 32767	;Steps for shellsort
    numsteps = .-steps/4

;++
;
; Inputs:
;
;	4(ap)	number of entries in list
;	8(ap)	Address of list of addresses
;
; Outputs:
;
;	the list is sorted
;--

sort_list:
	.word	^m<r2, r3, r4, r5, r6, r7, r8, r9, r10>

;
; determine highest step to use
;
	clrl	r10			;index starts at 0
	movl	4(ap),r0		;get number of keys
10$:	cmpl	w^steps+8[r10],r0	;this step high enough?
	bgeq	20$			;if geq yes
	acbl	#<numsteps-3>,#1,r10,10$;no--look through all - 3
	movl	#<numsteps-3>,r10	;lots of symbols--use all steps
20$:	subl3	#4,8(ap),-(sp)		;set table address-4 on stack
	pushl	r0			;set # of entries on stack
	cmpl	(sp),#1			;If there are not at least two entries
	blequ	sort_exit		; then quit now
;
; now do the shell sort on the list.  The shell sort is described in
; Knuth Vol. 3 and is also referred to as the Diminishing Increment Sort.
;
shell_sort:
10$:	movl	w^steps[r10],r9		;get step value for this "t"
	movab	1(r9),r8		;set up loop for step+1 to index
20$:	movl	@4(sp)[r8],r6		;get address of key block for j'th key
	subl3	r9,r8,r7		;i=j-h
30$:	movl	@4(sp)[r7],r4		;get address of key block for i'th key
40$:	movzbl	(r6),r0			;get lengths of strings
	movzbl	(r4),r1
	cmpc5	r0,1(r6),#0,r1,1(r4)	;compare strings
	blssu	60$
50$:	addl3	r7,r9,r0		;compute i+h
	movl	r6,@4(sp)[r0]		;ids(i+h) = val
	brb	70$
60$:	addl3	r7,r9,r0		;ids(i+h) = ids(i)
	movl	r4,@4(sp)[r0]
	subl2	r9,r7			;i=i-h
	bgtr	30$
	brb	50$			;go set ids(i+h)=val
70$:	acbl	(sp),#1,r8,20$		;loop for all entries in table
80$:	sobgeq	r10,10$			;loop for all steps
sort_exit:
	ret

	.END
