	.TITLE	SETWRKSET - SET WORKING SET PARAMETERS
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY:	PRIVILEGED IMAGE
;
; ABSTRACT:
;
;	THIS IMAGE IMPLEMENTS THE SET WORKING SET PARAMETERS
; COMMAND
;
; ENVIRONMENT:
;
;	THIS IMAGE RUNS IN USER MODE BUT REQUIRES THE PRIVILEGE TO
; CHANGE MODE TO KERNEL IN ORDER TO ALTER THE WORKING SET PARAMETERS.
;
; AUTHOR: PETER H. LIPMAN, CREATION DATE: 19-MAY-77
;
; MODIFIED BY:
;	BEATRICE WALTHER 	17-dec-1977
;
;	V02-003	HRJ0020		Herb Jacobs		2-Jun-1981
;		Added support for /EXTENT and /[NO]ADJUST.
;
;--

	.SBTTL	DECLARATIONS
	.DEFAULT DISPLACEMENT,WORD
;
; INCLUDE FILES:
;
	$CLIDEF				;CLI DEFINITIONS
	$PHDDEF				;PROCESS HEADER DEFINITIONS
;
; MACROS:
;
;
	.MACRO	CALLBAK A1,A2
	.IF NB	A2
	PUSHAB	A2
	.IFF
	PUSHAB	W^WORK_L_BITLIS		; address of bit list (in case needed)
	.ENDC
	PUSHAB	W^SET$A_CLIWORK		; CLI common work area
	PUSHAB	A1
	CALLS	#3,@CLI$A_UTILSERV(AP)	; request the service of the CLI
	.ENDM

	.MACRO	MIN	A1,A2,?L1
	CMPW	A1,A2
	BGEQU	L1
	MOVW	A1,A2
	MOVW	#1,ADJUST_FLAG
L1:
	.ENDM	MIN

	.MACRO	MAX	A1,A2,?L1
	CMPW	A1,A2
	BLEQU	L1
	MOVW	A1,A2
	MOVW	#1,ADJUST_FLAG
L1:
	.ENDM	MAX

;
; EQUATED SYMBOLS:
;
;
; OWN STORAGE:
;
	.PSECT	SET$RWDATA	LONG,RD,WRT,NOEXE

ARGLIST:
	.LONG	4			;ARGUMENT LIST FOR SETLIM
LIMIT:
	.LONG	0			; working set limit
QUOTA:
	.LONG	0			; working set quota
EXTENT:
	.LONG	0			; working set extent
AUTOADJUST:
; bit 0 is value to set it to
; bit 1 is indication it should be set
	.LONG	0			; automatic working set adjustment
;
; DEFINE THE CALL BACK DATA STRUCTURES
;
NUMVAL:
	$CLIREQDESC	-		;
		RQTYPE=CLI$K_NUMERVAL	;CONVERT A NUMBER
INPDESC:
	$CLIREQDESC	-
		RQTYPE=CLI$K_GETQUAL,-	;GET QUALIFIERS
		QUALST=INPQUAL		;QUALIFIER LIST
INPQUAL:
	$CLIQUALDEF	-
		QDCODE=CLI$K_STWR_LIMI,- ; /LIMIT
		TRUACT=DOLIMIT
	$CLIQUALDEF	-
		QDCODE=CLI$K_STWR_QUOT,- ; /QUOTA
		TRUACT=DOQUOTA
	$CLIQUALDEF	-
		QDCODE=CLI$K_STWR_EXTE,- ; /EXTENT
		TRUACT=DOEXTENT
	$CLIQUALDEF	-
		QDCODE=CLI$K_STWR_ADJU,- ; /[NO]ADJUST
		QDFLGS=CLI$V_QDEXPA,-
		TRUACT=ADJUST,-
		FLSACT=NOADJUST

	$CLIQUALDEF	END_LIST	;END OF QUALIFIER LIST
WORK_L_BITLIS:
	.BLKL	1			; BIT LIST
ADJUST_FLAG:
	.WORD	0			; ADJUST VALUE FLAG

	M_EXTENT = 1			;BITS USED IN EXPLICIT QUAL
	V_EXTENT = 0
	M_QUOTA  = 2
	V_QUOTA  = 1
	M_LIMIT  = 4
	V_LIMIT  = 2

EXPLICITQUALS:
	.WORD	0			;FLAGS INDICATING QUALIFIER GIVEN

	.SBTTL	SET WORKING SET PARAMETERS
;++
; FUNCTIONAL DESCRIPTION:
;
;
; CALLING SEQUENCE:
;
;	NONE
;
; INPUT PARAMETERS:
;
;	CLI$A_UTILSERV(AP)	=	CALL BACK ADDRESS FOR RESULT PARSER
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	NONE
;
; SIDE EFFECTS:
;
;	NONE
;
;--

	.PSECT	SET$CODE BYTE,RD,NOWRT,EXE


SET$WORKING_S::

	.WORD	^M<R2,R3,R4,R5>		; ENTRY MASK

;
; Parse qualifiers and return associated values
;
; Action routines check values for minimum ( sysgen value) and
; maximum (maximum authorized quota or extent)
;

	CALLBAK	<INPDESC>
	MOVL	SET$L_STATUS,R0		; get status from action routines
	BLBS	R0,5$			; branch if no error
	BRW	100$			; branch if value error
;
; perform additional checking on returned values.
;
5$:	MOVZBL	EXPLICITQUALS,R4	; fetch qualifier flags for reference
	MOVL	@#CTL$GL_PHD,R5		; get mapped PHD address
	BBS	#V_EXTENT,R4,10$	; branch if /extent explicit
	SUBW3	PHD$W_WSLIST(R5),PHD$W_WSEXTENT(R5),EXTENT
	INCW	EXTENT			; set default extent value
10$:	BBS	#V_QUOTA,R4,20$		; branch if /quota explicit
	SUBW3	PHD$W_WSLIST(R5),PHD$W_WSQUOTA(R5),QUOTA
	INCW	QUOTA			; set default extent value
20$:	BBS	#V_LIMIT,R4,30$		; branch if /limit explicit
	SUBW3	PHD$W_WSLIST(R5),PHD$W_DFWSCNT(R5),LIMIT
	INCW	LIMIT			; set default extent value
30$:	MOVL	#SS$_NORMAL,R0		; assume success
	BSBB	40$			; dispatch
	BRW	90$			; set the values

40$:	CASE	R4,<-			; dispatch on combination of qualifiers
		55$,-			; none
		50$,-			; /extent
		60$,-			; /quota
		50$,-			; /extent /quota
		70$,-			; /limit
		80$,-			; /limit /extent
		60$,-			; /limit /quota
		50$  >			; /limit /quota /extent

;
; /extent= value, /quota= min(extent, quota), /limit= min(quota, limit)
;
50$:	min	extent,quota		; set quota
	min	quota,limit		; set limit
55$:	rsb
;
; /quota= value, /extent= max(extent, quota), /limit= min(limit, quota)
;
60$:	max	quota,extent		; set extent
	min	quota,limit		; set limit
	rsb
;
; /limit= value, /extent= max(limit, extent), /quota= max(limit, quota)
;
70$:	max	limit,extent		; set extent
	max	limit,quota		; set quota
	rsb
;
; /extent= value, /limit= min(value, extent),
; /quota= min(extent, max(limit, quota))
;
80$:	min	extent,limit		; set limit
	max	limit,quota		; set low quota
	min	extent,quota		; set high quota
	rsb
;
; store final values
;
90$:
	$CMKRNL_S B^SETLIM,ARGLIST
	BLBC	R0,100$			; branch on error

;
; issue message if any adjustment had to be made on the user specified values.
;

	BLBC	ADJUST_FLAG,100$	; branch if no adjustment
	PUSHL	#SET$_WORKSET		;MESSAGE CODE
	PUSHAL	LIMIT			;POINT TO PARAMETER LIST
	CALLS	#2,SHOW$PRINT_MSG	;ISSUE MESSAGE
100$:
	MOVL	R0,SET$L_STATUS		; save status
	RET				;AND EXIT WHEN SETLIM RETURNS

	.SBTTL	SETLIM - SET LIMITS IN WORKING SET DATA BASE
;++
; FUNCTIONAL DESCRIPTION:
;
;	THIS ROUTINE STORES THE VALUES FROM THE ARGUMENT LIST
; INTO THE WORKING SET DATA BASE.  IT RUNS IN KERNEL MODE.
;
; CALLING SEQUENCE:
;
;	CALLG	ARGLIST,SETLIM
;
; INPUT PARAMETERS:
;
;	4(AP)  = NEW DEFAULT WORKING SET COUNT
;	8(AP)  = NEW WORKING SET QUOTA
;	12(AP) = NEW WORKING SET EXTENT
;	IT IS ASSUMED THAT THE ABOVE VALUES HAVE BEEN VALIDATED
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	R0 = SS$_NORMAL
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	SS$_NORMAL
;
; SIDE EFFECTS:
;
;	NONE
;
;--
SETLIM:	.WORD	0
	MOVL	@#CTL$GL_PHD,R1		;PROCESS HEADER ADDRESS
	SUBW3	#1,PHD$W_WSLIST(R1),R0	;BIAS TO FORM WORKING SET INDEX
					;FROM THE SPECIFIED VALUES
	ADDW3	4(AP),R0,PHD$W_DFWSCNT(R1) ;SET DEFAULT WORKING SET COUNT
	ADDW3	8(AP),R0,PHD$W_WSQUOTA(R1) ;SET WORKING SET QUOTA
	ADDW3	12(AP),R0,PHD$W_WSEXTENT(R1) ;SET WORKING SET EXTENT
	BBC	#1,16(AP),10$		;BRANCH IF /ADJUST NOT USED
	MOVL	L^SCH$GL_CURPCB,R1	;GET PCB ADDRESS
	INSV	16(AP),#PCB$V_DISAWS,#1,PCB$L_STS(R1) ;SET DISABLE/ENABLE BIT
10$:	MOVZWL	#SS$_NORMAL,R0		;SUCCESS INDICATION
	RET

	.SBTTL	ACTION ROUTINES FOR QUALIFIERS
;++
; FUNCTIONAL DESCRIPTION:
;
;	THESE ROUTINES ARE CALLED BY THE RESULT PARSER WHEN
; THE APPROPRIATE QUALIFIERS ARE FOUND.
;
; CALLING SEQUENCE:
;
;	CALLG	ARGLIST,LIMIT
;	CALLG	ARGLIST,QUOTA
;
; INPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	VALUE RETURNED IN LIMIT, QUOTA, EXTENT AS APPROPRIATE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	NONE
;
; SIDE EFFECTS:
;
;	NONE
;
;--

	.ENABLE	LSB

DOEXTENT:
	.WORD	^M<R2,R3,R4,R5>
	MOVAL	EXTENT,R3		;ADDRESS TO STORE VALUE
	MOVZBL	#PHD$W_WSAUTHEXT/2,R4	; set up to get authorized extent
	BISB	#M_EXTENT,EXPLICITQUALS	; indicate /extent given
	BRB	20$

DOLIMIT:
	.WORD	^M<R2,R3,R4,R5>
	MOVAL	LIMIT,R3		;ADDRESS TO STORE VALUE
	BISB	#M_LIMIT,EXPLICITQUALS	; indicate /extent given
	BRB	10$

DOQUOTA:
	.WORD	^M<R2,R3,R4,R5>
	MOVAL	QUOTA,R3		;ADDRESS TO STORE VALUE
	BISB	#M_QUOTA,EXPLICITQUALS	; indicate /extent given
10$:	MOVZBL	#PHD$W_WSAUTH/2,R4	; set up to get authorized extent
20$:	MOVL	@#CTL$GL_PHD,R5		; get mapped PHD address
	SUBW3	PHD$W_WSLIST(R5),(R5)[R4],R4 ; get authorized value - list
	INCW	R4			; make into count
	MOVL	4(AP),R2		;GET QUALIFER DESCRIPTOR
	TSTW	CLI$W_QDVALSIZ(R2)	;ANY VALUE STRING PRESENT?
	BEQL	40$			;BRANCH IF NONE GIVEN
	CALLBAK	<NUMVAL>,(R2)		;CONVERT VALUE TO BINARY
	BLBS	R0,30$			;BRANCH IF OK
	MOVL	R0,SET$L_STATUS		;SET ERROR STATUS
	BRB	40$			;NOT NUMERIC
30$:	MOVL	CLI$L_RQVALU+NUMVAL,R2	; get value returned
;
; validate value for minimum
;
	SUBW3	PHD$W_WSLIST(R5),PHD$W_WSLOCK(R5),R1
					; account for locked pages
	ADDW2	#SGN$C_MINWSCNT+1,R1	; add minimum for non locked portion
	MAX	R1,R2			; set r2 to max of minwset and value
	MIN	R4,R2			; set r2 to min of authorized and value
	MOVW	R2,(R3)
40$:	RET				;BACK TO RESULT PARSER

	.DISABLE LSB

	.ENABLE	LSB
ADJUST:
	.WORD	0
	CLRL	R0			; indicate enable should be set
	BRB	10$			; common exit
NOADJUST:
	.WORD	0
	MOVL	#1,R0			; indicate disable should be set
10$:	BISB3	#2,R0,W^AUTOADJUST	; indicate qualifier explict with value
	RET

	.DISABLE LSB

	.END
