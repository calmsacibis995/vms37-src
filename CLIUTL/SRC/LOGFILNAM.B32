MODULE LOGFILNAM(%TITLE	'Derive log file specification'
		IDENT = 'V03-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:
!	CLI Utilities
!
! ABSTRACT:
!	This module contains the routine that derives the log file
!	specification from the /LOG and /NAME qualifiers.
!
! ENVIRONMENT:
!	VAX/VMS user mode.
!--
!
! AUTHOR: M. Jack, CREATION DATE: 18-Jan-1982
!
! MODIFIED BY:
!
!**

LIBRARY 'SYS$LIBRARY:STARLET';


FORWARD ROUTINE
	LOG_FILE_NAME;			! Derive log file specification


PSECT PLIT=$CODE$;

GLOBAL ROUTINE LOG_FILE_NAME(LOG_QUAL,NAME_QUAL,SMB_MESSAGE)=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine derives the log file specification.
!
! INPUT PARAMETERS:
!
!	LOG_QUAL	- Address of a descriptor for the /LOG qualifier value.
!
!	NAME_QUAL	- Address of a descriptor for the /NAME qualifier
!			  value.
!
!	SMB_MESSAGE	- Address of a pointer to the free space in the $SNDSMB
!			  message.  If a SMO$K_LOGFNAM item is generated, it is
!			  placed in this area and the pointer updated.
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	Completion status.
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN
MAP
	LOG_QUAL:	REF BLOCK[,BYTE],		! /LOG value
	NAME_QUAL:	REF BLOCK[,BYTE];		! /NAME value
EXTERNAL ROUTINE
	LIB$EXTRACT_CONCEALED: ADDRESSING_MODE(GENERAL);
LOCAL
	FAB:		$FAB_DECL,			! FAB for $PARSE
	NAM:		$NAM_DECL,			! NAM for $PARSE
	ESA:		VECTOR[NAM$C_MAXRSS,BYTE],	! Expanded string
	BUF:		VECTOR[NAM$C_MAXRSS,BYTE],	! Log file spec buffer
	DEV:		VECTOR[16,BYTE],		! Device buffer
	DIR:		VECTOR[9,BYTE],			! Directory buffer
	INP_DESC:	BLOCK[DSC$K_S_BLN,BYTE],	! Descriptors ...
	DEV_DESC:	BLOCK[DSC$K_S_BLN,BYTE],	!
	DIR_DESC:	BLOCK[DSC$K_S_BLN,BYTE],	!
	BUF_DESC:	VECTOR[2],			!
	SMB:		REF VECTOR[,BYTE];		! Addr of $SNDSMB area


! Initialize RMS structures required to do a $PARSE.
!
$FAB_INIT(FAB=FAB,
    DNA=UPLIT BYTE('SYS$LOGIN:.LOG'),
    DNS=%CHARCOUNT('SYS$LOGIN:.LOG'),
    NAM=NAM);
$NAM_INIT(NAM=NAM,
    ESA=ESA,
    ESS=NAM$C_MAXRSS);


! Establish the primary file name.  If the /LOG qualifier was used, it comes
! from that; otherwise, if the /NAME qualifier was used, it comes from that.
! If neither was used, do nothing, and let defaulting to the command file name
! happen.
!
IF .LOG_QUAL[DSC$W_LENGTH] NEQ 0
THEN
    BEGIN
    FAB[FAB$B_FNS] = .LOG_QUAL[DSC$W_LENGTH];
    FAB[FAB$L_FNA] = .LOG_QUAL[DSC$A_POINTER];
    END
ELSE
    IF .NAME_QUAL[DSC$W_LENGTH] NEQ 0
    THEN
	BEGIN
	FAB[FAB$B_FNS] = .NAME_QUAL[DSC$W_LENGTH];
	FAB[FAB$L_FNA] = .NAME_QUAL[DSC$A_POINTER];
	END
    ELSE
	RETURN SS$_NORMAL;


! Execute a $PARSE.  Ensure that the device is a disk.
!
$PARSE(FAB=FAB);
IF NOT .FAB[FAB$L_STS] THEN RETURN .FAB[FAB$L_STS];
IF NOT .BLOCK[FAB[FAB$L_DEV], DEV$V_RND; ,BYTE] THEN RETURN RMS$_DEV;


! Set up for and call LIB$EXTRACT_CONCEALED.
!
INP_DESC[DSC$W_LENGTH] = .NAM[NAM$B_ESL];
INP_DESC[DSC$B_CLASS] = DSC$K_CLASS_S;
INP_DESC[DSC$B_DTYPE] = DSC$K_DTYPE_T;
INP_DESC[DSC$A_POINTER] = .NAM[NAM$L_ESA];
DEV_DESC[DSC$W_LENGTH] = 16;
DEV_DESC[DSC$B_CLASS] = DSC$K_CLASS_S;
DEV_DESC[DSC$B_DTYPE] = DSC$K_DTYPE_T;
DEV_DESC[DSC$A_POINTER] = DEV;
DIR_DESC[DSC$W_LENGTH] = 9;
DIR_DESC[DSC$B_CLASS] = DSC$K_CLASS_S;
DIR_DESC[DSC$B_DTYPE] = DSC$K_DTYPE_T;
DIR_DESC[DSC$A_POINTER] = DIR;
BUF_DESC[0] = NAM$C_MAXRSS;
BUF_DESC[1] = BUF;
IF NOT LIB$EXTRACT_CONCEALED(
    INP_DESC,
    DEV_DESC, DIR_DESC, DEV_DESC, DIR_DESC)
THEN
    BEGIN

    ! Reconstruct the expanded string using the physical device name to avoid
    ! dependence on logical names.
    !
    $FAO(
	$DESCRIPTOR('!AC:!AD'),
	BUF_DESC, BUF_DESC,
	NAM[NAM$T_DVI],
	.NAM[NAM$L_ESA] + .NAM[NAM$B_ESL] - .NAM[NAM$L_DIR],
	.NAM[NAM$L_DIR]);
    END
ELSE
    IF .DIR_DESC[DSC$W_LENGTH] EQL 0
    THEN
	BEGIN

	! Reconstruct the expanded string using the physical device name
	! hidden under the concealed device name.
	!
	$FAO(
	    $DESCRIPTOR('!AS!AD'),
	    BUF_DESC, BUF_DESC,
	    DEV_DESC,
	    .NAM[NAM$L_ESA] + .NAM[NAM$B_ESL] - .NAM[NAM$L_DIR],
	    .NAM[NAM$L_DIR]);
	END
    ELSE
	BEGIN

	! Reconstruct the expanded string using the physical device name
	! and root directory hidden under the concealed device name.
	!
	$FAO(
	    $DESCRIPTOR('!AS!AD!AS.!AD'),
	    BUF_DESC, BUF_DESC,
	    DEV_DESC,
	    1, .NAM[NAM$L_DIR],
	    DIR_DESC,
	    .NAM[NAM$L_ESA] + .NAM[NAM$B_ESL] - .NAM[NAM$L_DIR] - 1,
	    .NAM[NAM$L_DIR] + 1);
	END;


! The reconstructed expanded string using only physical device names is now
! returned as the log file specification.
!
SMB = ..SMB_MESSAGE;
SMB[0] = SMO$K_LOGFNAM;		SMB = .SMB + 1;
SMB[0] = .BUF_DESC[0];		SMB = .SMB + 1;
.SMB_MESSAGE = CH$MOVE(.BUF_DESC[0], BUF, .SMB);
SS$_NORMAL
END;

END
ELUDOM
