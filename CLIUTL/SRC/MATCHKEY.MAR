	.TITLE	MATCHKEY - MATCH A STRING AGAINST A KEY
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY:	GENERAL PURPOSE UTILITY SUBROUTINE
;
; ABSTRACT:	MATCH A STRING AGAINST A TABLE OF KEYS
;
;
; ENVIRONMENT:	USER MODE/NON-PRIVILEGED CODE
;
; AUTHOR:	W.H.BROWN, CREATION DATE:3-JUN-1977
;
; MODIFIED BY:
;
;	, : VERSION
; 01	- 
;--

	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;
;
; MACROS:
;
;
; EQUATED SYMBOLS:
;
	TABLE	= 4			; ADDRESS OF KEYWORDS
	DESCP	= 8			; ADDRESS OF DESCRIPTOR FOR STRING
	ADDR	= 12			; ADDRESS TO STORE RESULT
;
; OWN STORAGE:
;
;	NONE

	.SBTTL	MATCH KEY
;++
; FUNCTIONAL DESCRIPTION:
;
;	THIS ROUTINE ACCEPTS A LIST OF COUNTED STRINGS
;	AND A DESCRIPTOR FOR A VARAIABLE LENTHG STRING.
;	AN ATTEMPT IS MADE TO FIND A STRING IN THE LIST
;	THAT MATCHES THE VARIABLE STRING CHECKING THE
;	LENGTH OF THE SHORTER STRING.  IF A MATCH IS NOT FOUND,
;	A ZERO IS RETURNED. IF MORE THAN 1 VALUE MATCHES, THE
;	INDEX TO THE FIRST MATCH IS RETURNED A NEGATIVE NUMBER.
;	OTHERWISE THE INDEX IN THE TABLE OF STRINGS IS RETURNED,
;	AS A VALUE STARTING WITH 1.
;
; CALLING SEQUENCE:
;
;	CALLS	#2,LIB$MATCHKEY		; RETURN INDEX IN R1
;
; INPUT PARAMETERS:
;
;	THE ADDRESS OF THE LIST OF COUNTED STRINGS FOLLOWED BY A 0 BYTE
;	THE ADDRESS OF A QUADWORD DESCRIPTOR DESCRIBING THE STRING TO MATCH
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	R0 IS RETURNED AS THE INDEX TO THE MATCH
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	A ZERO INDICATES NO MATCH, A MINUS NUMBER IS MORE THAN 1 MATCH
;
; SIDE EFFECTS:
;
;	NONE
;
;--
	.PSECT	LIB_CODE	EXE,RD,NOWRT
 
LIB$MATCHKEY::				; MATCH KEYWORD
	.WORD	^M<R2,R3,R4,R5,R6>	; REGISTERS TO SAVE
	MOVQ	@DESCP(AP),R4		; GET DESCRIPTOR FOR THE STRING
	MOVL	TABLE(AP),R6		; THE INPUT STRINGS
	BSBB	100$			; TRY FOR FIRST MATCH
	PUSHL	R0			; SAVE THE INDEX
	BEQL	10$			; BR IF NO MATCH
	BSBB	100$			; TRY FOR AMBIGUOUS MATCH
	BEQL	10$			; NOT AMBIGUOUS
	MNEGL	(SP)+,-(SP)		; CHANGE TO NEGATIVE
10$:	POPR	#^M<R0>			; GET INDEX
	RET				; 
 
100$:	PUSHL	#1			; GET A INITIAL VALUE
110$:	MOVZBL	(R6)+,R0		; GET THE LENGTH
	BEQL	130$			; BR IF END OF STRING
	MOVL	R6,R1			; SET ADDRESS
	ADDL	R0,R6			; POINT AT NEXT
	CMPL	R0,R4			; SEE WHICH IS BIGGER
	BLEQ	120$			; BR IF TARGET IS SHORTER
	MOVL	R4,R0			; SET INPUT LENGTH
120$:	CMPC3	R0,(R1),(R5)		; CHECK FOR MATCH
	BEQL	140$			; BR IF FOUND A MATCH
	INCL	(SP)			; COUNT THE ITERATIONS
	BRB	110$			; TRY AGAIN
130$:	CLRL	(SP)			; SET ZERO INDEX
140$:	POPL	R0			; GET THE VALUE
	RSB				; RETURN WITH CONDITION CODE SET
 
	.END
