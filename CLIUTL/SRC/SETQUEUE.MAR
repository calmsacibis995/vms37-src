	.TITLE	SET$QUEUE
	.IDENT	'V03-001'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY:	DCL SET Command
;
; ABSTRACT:
;	This module implements the SET QUEUE Command
;
;
; ENVIRONMENT:
;
;	Runs in user mode
;
; AUTHOR : BEATRICE U. WALTHER,  CREATION DATE: 24-JAN-1978
;
; MODIFIED BY:
;
;	V03-001	MLJ0086		Martin L. Jack,	4-Apr-1982  1:50
;		Disallow /JOB=0.
;
;	V008	TMH0008		Tim Halvorsen		04-Feb-1982
;		Remove reference to CLI$K_ symbols at assembly time.
;
;	V02-007	MLJ35403	Martin L. Jack,	24-Jan-1982  2:08
;		Incorporate standard translation of queue names.
;
;	V02-006	GWF0126		Gary W. Fowler		13-Nov-1981
;		Add logical name translation of input queue names
;
;	V02-005	GWF0124		Gary W. Fowler		11-Nov-1981
;		Add support for WS extent.
;
;	V02-004	GWF0082		Gary W. Fowler		20-Jul-1981
;		Change maximum length of job name to 9 characters.
;
;	V02-003	GWF0065		Gary W. Fowler		22-Jun-1981
;		Add routine to process /REQUEUE qualifier
;
;	V02-002	GWF0001		Gary W. Fowler		15-Jan-1980
;		Add action routines for /CPUTIME, /WSQUOTA, /WSDEFAULT, and
;		/CHARACTERISTICS qualifiers.
;
;	V02-001	- 
;--



	.SBTTL	DECLARATIONS

;
; Include files:
;

	$SMRDEF			; symbiont manager definitions
	$MSGDEF			; message definitions
	$SHRDEF			; shared message definitions
	$STSDEF			; status code definitions
	$JBCMSGDEF		; define job controller return codes

;
; Macros:
;

; *********** temporary
;+
; The $SHR_MESSAGES macro defines facility-specific message codes
;	which are based on the system-wide shared message codes.
;
;	$SHR_MESSAGES	name, code, <<msg,severity>, ... >
;
;	where:
;	    "name" is the name of the facility (e.g., COPY)
;	    "code" is the corresponding facility code (e.g., 103)
;	    "msg" is the name of the shared message (e.g., BEGIN)
;	    "severity" is the desired message severity (e.g., 1, 0, 2, 4)
;
;-
	.MACRO	$SHR_MESSAGES	NAME,CODE,MSGCODES
;
	.IF	NDF,SHR$K_SHRDEF  ; issue $SHRDEF if not done yet
		SHR$K_SHRDEF = 1 ; define symbol to indic $SHRDEF done
		$SHRDEF		 ; define shared message codes
	.ENDC
	.IRP	MSGPAIR, <'MSGCODES>
		$SHRMSG_COD 'NAME', 'CODE', MSGPAIR
	.ENDR
	.ENDM
	.MACRO	$SHRMSG_COD NAME, CODE, MSG, SEVERITY
;
	.IF	IDN,SEVERITY,WARNING    ; if WARNING, set 0 sev
	  'NAME'$_'MSG' = 0	        ; set 0 sev (WARNING)
	.IFF
	  .IF	IDN,SEVERITY,SUCCESS    ; if SUCCESS, set 1 sev
	    'NAME'$_'MSG' = 1	        ; set 1 sev (SUCCESS)
	  .IFF
	    .IF	IDN,SEVERITY,ERROR      ; if ERROR, set 2 sev
	      'NAME'$_'MSG' = 2	        ; set 2 sev (ERROR)
	    .IFF
	      .IF IDN,SEVERITY,INFO     ; if INFO, set 3 sev
	        'NAME'$_'MSG' = 3       ; set 3 sev (INFO)
	      .IFF
	        .IF IDN,SEVERITY,SEVERE ; if SEVERE, set 4 sev
	          'NAME'$_'MSG' = 4     ; set 4 sev (SEVERE)
	        .IFF
	          'NAME'$_'MSG' = 'SEVERITY ; set specified sev
	        .ENDC
	      .ENDC
	    .ENDC
	  .ENDC
	.ENDC
	 'NAME'$_'MSG' = 'NAME'$_'MSG'+SHR$_'MSG'+<'CODE'@16>
	.ENDM

;%%%	.MACRO	$PUTMSG_S	ARGS
;%%%	$SIGNAL_S	<ARGS>
;%%%	.ENDM

	.MACRO	$SNDSMB_S	A,B
	PUSHL	B
	PUSHAL	A
	CALLS	#2,SYS$SNDSMB
	.ENDM

;
; Equated symbols:
;

	_VIELD	QUEU,0,<-		; define qualifier bit list
		<QNAM,,M>,-		; queue name present
		<AFTE,,M>,-		; /AFTER
		<JOB_,,M>,-		; /JOB_COUNT
		<ENTR,,M>,-		; /ENTRY
		<FORM,,M>,-		; /FORMS
		<HOLD,,M>,-		; /HOLD
		<LOWE,,M>,-		; /LOWER
		<NAME,,M>,-		; /NAME
		<PRIO,,M>,-		; /PRIORITY
		<RELE,,M>,-		; /RELEASE
		<WSQU,,M>,-		; /WSQUOTA
		<WSDE,,M>,-		; /WSDEFAULT
		<DQCH,,M>,-		; /CHARACTERISTICS
		<CPUT,,M>,-		; /CPUTIME
		<REQU,,M>,-		; /REQUEUE
		<WSEX,,M>,-		; /WSEXTENT
		>

	$SHR_MESSAGES	-		; define shared messages
		SET,119,<-
		<BADCOPIES,ERROR>,-
		<BADFORM,ERROR>,-
		<BADJOBID,ERROR>,-
		<BADJOBNAME,ERROR>,-
		<BADPRTY,ERROR>,-
		<BADQNAME,ERROR>,-
		<BADTIME,ERROR>,-
		<NOQUEUE,ERROR>,-
		<TEXT,ERROR>,-
		<NOJOBID,ERROR>,-
		<NOJOBNAME,ERROR>,-
		<BADVALUE,ERROR>,-
		<NODESTQUE,ERROR>,-
		<ILLDESQUE,ERROR>,-
		>


QUAD=8					; QUAD word
MAX_JOBNAME_LEN=9+1			; maximum length of a job name
MAX_QNAM_LEN=16			; maximum lenth of a queue name
ONEBYTE=255				; max value of a byte

;
; Own storage:
;

	.PSECT	SET$RWDATA	LONG,RD,WRT,NOEXE

;
; define CLI call back structures
;

QUEU_A_GETQUAL:
	$CLIREQDESC	-		; request descriptor
		RQTYPE=CLI$K_GETQUAL,-	; to get qualifiers
		QUALST=QUEU_A_QUALST	; pointer to qualifier list
QUEU_A_GETPARAM:
	$CLIREQDESC	-		;
		RQTYPE=CLI$K_INPUT1,-	; get parameter
		BITNUM=QUEU_V_QNAM,-	;
		PRSACT=QUEU_QNAM_PRES	;
QUEU_A_NUMERVAL:
	$CLIREQDESC	-		; request descriptor
		RQTYPE=CLI$K_NUMERVAL	; to convert a value
QUEU_A_ASCIIVAL:
	$CLIREQDESC	-		; request descriptor
		RQTYPE=CLI$K_ASCIIVAL	; to convert to ascii
QUEU_A_QUALST:			; qualifier list
	$CLIQUALDEF	-		;
		QDCODE=CLI$K_STQE_AFTE,-; /AFTER
		SETLST=QUEU_V_AFTE,-	;
		TRUACT=QUEU_AFTE_TRUE	;
	$CLIQUALDEF	-		;
		QDCODE=CLI$K_STQE_JOB_,-; /JOB_COUNT
		SETLST=QUEU_V_JOB_,-	;
		TRUACT=QUEU_JOB__TRUE	;
	$CLIQUALDEF	-		;
		QDCODE=CLI$K_STQE_ENTR,-; /ENTRY
		SETLST=QUEU_V_ENTR,-	;
		TRUACT=QUEU_ENTR_TRUE	;
	$CLIQUALDEF	-		;
		QDCODE=CLI$K_STQE_FORM,-; /FORMS
		SETLST=QUEU_V_FORM,-	;
		TRUACT=QUEU_FORM_TRUE	;
	$CLIQUALDEF	-		;
		QDCODE=CLI$K_STQE_HOLD,-; /HOLD
		SETLST=QUEU_V_HOLD,-	;
		TRUACT=QUEU_HOLD_TRUE	;
	$CLIQUALDEF	-		;
		QDCODE=CLI$K_STQE_LOWE,-; /LOWER
		SETLST=QUEU_V_LOWE,-	;
		QDFLGS=CLI$V_QDEXPA,-	; require explicit specification
		TRUACT=QUEU_LOWE_TRUE,-	;
		FLSACT=QUEU_LOWE_FALS	;
	$CLIQUALDEF	-		;
		QDCODE=CLI$K_STQE_NAME,-; /NAME
		SETLST=QUEU_V_NAME,-	;
		TRUACT=QUEU_NAME_TRUE	;
	$CLIQUALDEF	-		;
		QDCODE=CLI$K_STQE_PRIO,-; /PRIORITY
		SETLST=QUEU_V_PRIO,-	;
		TRUACT=QUEU_PRIO_TRUE	;
	$CLIQUALDEF	-		;
		QDCODE=CLI$K_STQE_RELE,-; /RELEASE
		SETLST=QUEU_V_RELE	;
	$CLIQUALDEF	-		;
		QDCODE=CLI$K_STQE_WSQU,-; /WSQUOTA
		SETLST=QUEU_V_WSQU,-	;
		TRUACT=QUEU_WSQT_TRUE	;
	$CLIQUALDEF	-		;
		QDCODE=CLI$K_STQE_WSDE,-; /WSDEFAULT
		SETLST=QUEU_V_WSDE,-	;
		TRUACT=QUEU_WSDF_TRUE	;
	$CLIQUALDEF	-		;
		QDCODE=CLI$K_STQE_CHAR,-; /CHARACTERISTICS
		SETLST=QUEU_V_DQCH,-	;
		TRUACT=QUEU_DQCH_TRUE	;
	$CLIQUALDEF	-		;
		QDCODE=CLI$K_STQE_CPUT,-; /CPUTIME
		SETLST=QUEU_V_CPUT,-	;
		TRUACT=QUEU_CPUT_TRUE	;
	$CLIQUALDEF	-
		QDCODE=CLI$K_STQE_REQU,-; /REQUEUE
		SETLST=QUEU_V_REQU,-
		TRUACT=QUEU_REQU_TRUE
	$CLIQUALDEF	-		;
		QDCODE=CLI$K_STQE_WSEX,-; /WSEXTENT
		SETLST=QUEU_V_WSEX,-	;
		TRUACT=QUEU_WSEX_TRUE	;
	$CLIQUALDEF	END_LIST	; end of qualifier list

;
; read write storage
;

QUEU_L_BITLIS:
	.BLKL	1			; qualifier bit list longword
QUEU_W_MBXCHAN:
	.BLKL	1			; mailbox channel word
QUEU_Q_VALDESC:
	.BLKQ	1			; save area for qualifier value descriptor
QUE_Q_DESQDESC:				; save area for destination queue
	.BLKQ	1
QUEU_Q_IOSB:
	.BLKQ	1			; status code for $QIO
QUEU_Q_QUEDES:
	.BLKQ	1			; descriptor for queue name

QUEU_Q_BUFDESC:
	.LONG	QUEU_K_BUFLEN		; descriptor to symbiont manager
	.LONG	QUEU_A_BUFFER		; request buffer
QUEU_A_BUFFER:				; allocate request buffer
	.WORD	SMR$K_ALTER		; default = ALTER request
QUEU_T_QUEUENAM:
	.BLKB	MAX_QNAM_LEN		; allocate fixed length
QUEU_W_JOBID:
	.BLKW	1			; space for JOBID
QUEU_K_BUFLEN=.-QUEU_A_BUFFER		; set initial length of request buffer
					; allocate space for options
	.BLKB	1+1			; SMO$K_FORMTYP
	.BLKB	1			; SMO$K_HOLD
	.BLKB	1+1			; SMO$K_JOBCOPY
	.BLKB	1+1			; SMO$K_JOBPRI
	.BLKB	1			; SMO$K_LOWER
	.BLKB	1			; SMO$K_NOLOWER
	.BLKB	1+QUAD			; SMO$K_RLSTIM
	.BLKB	1+MAX_JOBNAME_LEN	; SMO$K_JOBNAME
	.BLKB	1+4			; SMO$K_CPULIM
	.BLKB	1+2			; SMO$K_WSQUOTA
	.BLKB	1+2			; SMO$K_WSDEFLT
	.BLKB	1+16			; SMO$K_DQCHAR
	.BLKB	1+16			; SMO$K_DESTQUE
	.BLKB	1			; zero byte


	.SBTTL	SET$QUEUE
;++
; FUNCTIONAL DESCRIPTION:
;
;	This routine represents the main loop of the SET QUEUE command
;	As the command line is parsed by successive calls to the CLI,
;	the action routines for parameter and qualifiers construct a
;	buffer to be sent to the symbiont manager.
;	The symbiont manager's response is then read from a temporary 
;	mailbox to check successful completion of the action requested.
;
;
; CALLING SEQUENCE:
;
;	CALLS
;
; INPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	R0 =	SS$_NORMAL
;		any error code returned by system services called
;		response from symbiont manager
;
; SIDE EFFECTS:
;
;	NONE
;
;--

	.PSECT	SET$CODE	BYTE,RD,NOWRT,EXE
DEFQUE:	.ASCII	/SYS$PRINT/		; default queue name
DEFQLN=	.-DEFQUE


SET$QUEUE::
	.WORD	0


;
; Establish default queue name
;

	MOVL	#DEFQLN,W^QUEU_Q_QUEDES
	MOVAB	DEFQUE,W^QUEU_Q_QUEDES+4

;
; call CLI for parameter and qualifiers
;

	PUSHAB	W^QUEU_L_BITLIS		; bit list word
	PUSHAB	W^SET$A_CLIWORK		; address of CLI work area
	PUSHAB	W^QUEU_A_GETPARAM	; get parameter
	CALLS	#3,@CLI$A_UTILSERV(AP)	; call CLI
	MOVL	W^SET$L_STATUS,R0	; load status code
	BLBC	R0,99$			; branch on error

	PUSHAB	W^QUEU_L_BITLIS		; bit list word
	PUSHAB	W^SET$A_CLIWORK		; address of CLI work area
	PUSHAB	W^QUEU_A_GETQUAL	; get qualifiers
	CALLS	#3,@CLI$A_UTILSERV(AP)	; call CLI
	MOVL	W^SET$L_STATUS,R0	; load status code
	BLBC	R0,99$			; branch on error


;
; check for any conflicts
;

	BBS	#QUEU_V_ENTR,W^QUEU_L_BITLIS,10$
					; branch if option specified
	PUSHL	#SET$_JOBIDREQ		; message code
	PUSHL	#0			; no parameter list
	CALLS	#2,W^SHOW$PRINT_MSG	; issue message
	BRB	99$			; exit

;
; create a temporary mailbox for symbiont manager response
;

10$:
	$CREMBX_S	CHAN=W^QUEU_W_MBXCHAN
	BLBC	R0,99$			; exit on error

;
; send an ALTER request to the symbiont manager
;

20$:
	CMPL	#QUEU_K_BUFLEN,W^QUEU_Q_BUFDESC
					; has any option been specified
	BEQLU	30$			; branch if no option specified
	BSBW	SEND_SYMBIONT		; send message to symbiont manager
	BLBC	R0,90$			; exit on error

;
; send RELEASE request to symbiont manager if necessary
;
30$:
	BBC	#QUEU_V_RELE,W^QUEU_L_BITLIS,90$
					; exit if release option not specified
	MOVW	#SMR$K_RELEASE,W^QUEU_A_BUFFER
					; set up RELEASE request
	MOVW	#QUEU_K_BUFLEN,W^QUEU_Q_BUFDESC
					; clear all option data
	BSBW	SEND_SYMBIONT		; and send message

;
; exits
;

90$:
	PUSHR	#^M<R0>			; save status code
	$DASSGN_S	CHAN=W^QUEU_W_MBXCHAN
					; deassign temporary mailbox
	POPR	#^M<R0>			; restore status code

;
99$:
	MOVL	R0,W^SET$L_STATUS	; store return code
	RET				; and exit


;
; SEND_SYMBIONT	-	subroutine to send a message to the symbiont manager
;			and interpret the response
;
;	input:	QUEU_Q_BUFDESC  describes the message buffer ready to b e sent
;
;	output:	R0 = 1 : success
;		     0 : failure
;

SEND_SYMBIONT:
;
; translate queue name
;

	PUSHAB	QUEU_T_QUEUENAM		; point to output area
	PUSHAQ	QUEU_Q_QUEDES		; point to queue name descriptor
	CALLS	#2,G^TRAN_QUEUE		; translate queue name
	BLBS	R0,5$			; br if successful
	MOVQ	QUEU_Q_QUEDES,QUEU_Q_VALDESC
	MOVL	#SET$_BADQNAME,R0	; error code
	BRW	SIGNAL_ERROR		; branch to common error exit

;
; send message to symbiont manager
;

5$:	$SNDSMB_S	W^QUEU_Q_BUFDESC,W^QUEU_W_MBXCHAN
					; send message to symbiont manager
	BLBS	R0,10$			; branch on success
	RSB				; return

;
; read symbiont manager's response from mailbox
;

10$:
	$QIOW_S		#0,W^QUEU_W_MBXCHAN,#IO$_READVBLK,-
			W^QUEU_Q_IOSB,,,@W^SHOW$GQ_OUT_DSC+4,W^SHOW$GQ_OUT_DSC
					; read symbiont manager response
	BLBC	R0,20$			; exit on error
	MOVZWL	W^QUEU_Q_IOSB,R0	; load status of QIO request
	BLBC	R0,20$			; exit on error
	MOVL	W^SHOW$GQ_OUT_DSC+4,R1	; point to buffer just read
	MOVL	4(R1),R0		; read potential symbiont manager's response
	CMPW	(R1),#MSG$_SMBRSP	; is it really a symbiont manager's response ?
	BEQLU	30$			; branch if from symbiont manager
	PUSHL	#SET$_MSGNOTSYM		; message was not from symbiont manager
	PUSHL	#0			; empty parameter list
	CALLS	#2,W^SHOW$PRINT_MSG
	BRB	30$	; ****** UNTIL SYMBIONT MANAGER FIXED !!
20$:
	RSB				; return

;
; treat error returns from symbiont manager
;

30$:
	BLBC	R0,35$			; branch on error
	RSB				; return
35$:
	PUSHR	#^M<R0>			; save status code
	BICL3	#7,R0,R1		; clear error severity
	CMPL	R1,#JBC$_NOSUCHJOB&^C7	; test for job not found
	BNEQU	40$			; branch if not this one
	PUSHAL	W^QUEU_T_QUEUENAM+1	; on stack
	MOVZBL	W^QUEU_T_QUEUENAM,-(SP)	; build descriptor of queue name
	PUSHAL	(SP)			; push descriptor
	MOVZWL	QUEU_W_JOBID,-(SP)	; job id
	PUSHL	#2			; number of arguments
	PUSHL	#SET$_NOJOBID		; shared message id
	CALLS	#4,LIB$SIGNAL		; go issue message
	ADDL2	#2*4,SP			; clean stack
	BRB	80$			; 
40$:
	CMPL	R1,#JBC$_NOSUCHQUE&^C7	; test for nonexistant queue
	BNEQU	50$			; branch if not this error
	PUSHAL	W^QUEU_T_QUEUENAM+1	; on stack
	MOVZBL	W^QUEU_T_QUEUENAM,-(SP)	; build descriptor of queue name
	PUSHAL	(SP)			; push descriptor
	PUSHL	#1			; number of arguments
	PUSHL	#SET$_NOQUEUE		; message id
	CALLS	#3,LIB$SIGNAL		; issue message
	ADDL2	#2*4,SP			; clean stack
	BRB	80$
50$:
	CMPL	R1,#JBC$_NODESTQUE&^C7	; non-existant destination queue?
	BNEQU	51$			; if neq - then no
	MOVL	#SET$_NODESTQUE,R0	; error code to R0
	BRB	55$			; join common code
51$:	CMPL	R1,#JBC$_ILLDESQUE&^C7	; illegal queue name?
	BNEQU	60$			; if NEQ - then no
	MOVL	#SET$_ILLDESQUE,R0	; error code to R0
55$:	MOVL	QUE_Q_DESQDESC+4,-(SP)	; push addr of queue name
	MOVZBL	QUE_Q_DESQDESC,-(SP)	; push length of queue name
	PUSHAL	(SP)			; push addr of descriptor
	PUSHL	#1			; no. of FAO args.
	PUSHL	R0			; error code
	CALLS	#3,LIB$SIGNAL		; signal the error
	ADDL	#8,SP			; clean stack
	BRB	80$			; go exit

60$:	PUSHL	#0			; no arguments
	PUSHL	R0			; code
	CALLS	#2,LIB$SIGNAL		; signal error
80$:
	POPR	#^M<R0>			; restore status code
	BISL	#STS$M_INHIB_MSG,R0	; inhibit further message output
90$:
	RSB				; and return from subroutine


	.SBTTL	 CLI action routines
;++
; FUNCTIONAL DESCRIPTION:
;
;	This section groups all CLI parameter and qualifier action
;	routine :
;	The latter perform the following tasks:
;
;	1) any necessary checks are performed on the qualifier value
;
;	2) the symbiont manager option corresponding to the qualifier
;	is appended to the request buffer.
;
;	After all qualifiers have been parsed, the request buffer is
;	ready to be sent.
;
;
; CALLING SEQUENCE:
;
;	CALLS
;
; INPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	SET$L_STATUS is set by any action routine encountering an error.
;
;	As it is initialized to a success code, and as action routines 
;	do not store in it on success, it serves to signal that at
;	least one error has been encountered by an action routine.
;
; SIDE EFFECTS:
;
;	NONE
;
;--

	.PSECT	SET$CODE	BYTE,RD,NOWRT,EXE


;
; QUEU_AFTE_TRUE	-  action routine for /AFTER qualifier
;

QUEU_AFTE_TRUE:
	.WORD	^M<R2>
	MOVL	4(AP),R1		; address of qualifier descriptor block
	MOVQ	CLI$Q_QDVALDESC(R1),W^QUEU_Q_VALDESC
					; save key word value descriptor
	CLRQ	-(SP)			; make room for quadword
	PUSHAQ	(SP)			; address of resulting quadword
	PUSHAQ	CLI$Q_QDVALDESC(R1)	; address of value string descriptor
	CALLS	#2,LIB$CVT_TIME	; convert ascii time to quadword
	BLBC	R0,10$			; exit on error
	MOVZBL	#SMO$K_RLSTIM,R0	; symbiont manager option code
	BSBW	W^INSERT_NOVALOPT	; insert option code
	MOVQ	(SP)+,(R2)+		; insert quadword 
	ADDL2	#QUAD,W^QUEU_Q_BUFDESC	; update request buffer descriptor
	RET				; sucess
10$:
	MOVL	#SET$_BADTIME,R0		; error code
	BRW	SIGNAL_ERROR		; branch to common error exit

;
; QUEU_JOB__TRUE	-  action routine for /JOB_COUNT qualifier
;

QUEU_JOB__TRUE:
	.WORD	^M<R2>
	BSBW	CONVERT_VALUE		; convert value
	BLBC	R0,10$			; exit on error
	TSTL	R1			; zero value?
	BEQL	10$			; br if yes
	BSBW	CHECK_BYTE		; check range
	BLBC	R0,10$			; exit if out of range
	MOVZBL	#SMO$K_JOBCOPY,R0	; symbiont manager option code
	BSBW	INSERT_BYTOPT		; insert option
	RET				; success
10$:
	MOVL	#SET$_BADCOPIES,R0	; error code
	BRW	SIGNAL_ERROR		; branch to common error exit

;
; QUEU_ENTR_TRUE	-  action routine for /ENTRY qualifier
;

QUEU_ENTR_TRUE:
	.WORD	^M<R2>
	BSBW	CONVERT_VALUE		; convert value
	BLBC	R0,10$			; exit on error
	MOVW	R1,W^QUEU_W_JOBID	; store job id
	RET				; success
10$:
	MOVL	#SET$_BADJOBID,R0	; error code
	BRW	SIGNAL_ERROR		; branch to common error exit

;
; QUEU_FORM_TRUE	-  action routine for /FORMS qualifier
;

QUEU_FORM_TRUE:
	.WORD	^M<R2>
	MOVL	4(AP),R1		; address of qualifier descriptor block
	MOVQ	CLI$Q_QDVALDESC(R1),W^QUEU_Q_VALDESC
					; save key word value descriptor
	PUSHAQ	CLI$Q_QDVALDESC(R1)	; address of value descriptor 
	CALLS	#1,LIB$CNVCLIFORMS	; request conversion
	BLBC	R0,10$			; branch on error
	MOVZWL	#SMO$K_FORMTYPE,R0	; symbiont manager option code
	BSBW	INSERT_BYTOPT		; insert option
	RET				; success
10$:
	MOVL	#SET$_BADFORM,R0	; error code
	BRW	SIGNAL_ERROR		; branch to common error exit

;
; QUEU_HOLD_TRUE	-  action routine for /HOLD qualifier
;

QUEU_HOLD_TRUE:
	.WORD	^M<R2>
	MOVZBL	#SMO$K_HOLD,R0		; symbiont manager option code
	BSBW	INSERT_NOVALOPT		; insert option
	RET				; return


;
; QUEU_LOWE_TRUE	-  action routine for /LOWER qualifier
;

QUEU_LOWE_TRUE:
	.WORD	^M<R2>
	MOVZBL	#SMO$K_LOWER,R0		; symbiont manager option code
	BSBW	INSERT_NOVALOPT		; insert option
	RET				; return

;
; QUEU_LOWE_FALS	-  action routine for /NOLOWER qualifier
;

QUEU_LOWE_FALS:
	.WORD	^M<R2>
	MOVZBL	#SMO$K_NOLOWER,R0	; symbiont manager option code
	BSBW	INSERT_NOVALOPT		; insert option
	RET				; return

;
; QUEU_NAME_TRUE	-  action routine for /NAME qualifier
;

QUEU_NAME_TRUE:
	.WORD	^M<R2,R3,R4,R5,R6>
	MOVL	4(AP),R3		; address of qualifier descriptor block
	MOVQ	CLI$Q_QDVALDESC(R3),W^QUEU_Q_VALDESC
					; save descriptor for possible error message
	MOVZWL	CLI$W_QDVALSIZ(R3),R6	; get length of value string
	BEQLU	10$			; exit if null string
	CMPL	R6,#MAX_JOBNAME_LEN-1	; test for maximum length
					; ( including one byte for count)
	BGTRU	10$			; branch on too big
	MOVZBL	#SMO$K_JOBNAME,R0	; symbiont manager option code
	BSBW	INSERT_NOVALOPT		; insert option code
	MOVB	R6,(R2)+		; insert length
	MOVC3	R6,@CLI$Q_QDVALDESC+4(R3),(R2)
					; copy job name
	INCL	R6			; add one for counted string
	ADDL2	R6,W^QUEU_Q_BUFDESC	; update buffer descriptor
	RET				; success
10$:
	MOVL	#SET$_BADJOBNAME,R0	; error code
	BRW	SIGNAL_ERROR		; branch to common error exit

;
; QUEU_PRIO_TRUE	-  action routine for /PRIORITY qualifier
;

QUEU_PRIO_TRUE:
	.WORD	^M<R2>
	BSBW	CONVERT_VALUE		; convert value
	BLBC	R0,10$			; exit on error
	CLRL	R0			; assume failure
	TSTL	R1			; check for negative
	BLSS	10$			; branch if negative
	CMPL	R1,#31			; check maximum
	BGEQ	10$			; branch if greater
	MOVZBL	#SMO$K_JOBPRI,R0	; symbiont manager option code
	BSBW	INSERT_BYTOPT		; insert option
	RET				; success
10$:
	MOVL	#SET$_BADPRTY,R0		; error code
	BRW	SIGNAL_ERROR		; branch to common error exit

;
; QUEU_QNAM_PRES 	-	Action routine if a queue name is present
;

QUEU_QNAM_PRES:
	.WORD	^M<>
	MOVL	4(AP),R0		; address of parameter descriptor block
	MOVQ	CLI$Q_RQDESC(R0),W^QUEU_Q_QUEDES
					; save descriptor
	RET				; success

;
; QUEU_CPUT_TRUE	- action routine for /CPUTIME qualifier
;

QUEU_CPUT_TRUE:
	.WORD	^M<R2,R4,R5>		; entry mask
	MOVL	4(AP),R1		; address qualifier decriptor block
	MOVQ	CLI$Q_QDVALDESC(R1),R4	; get key word value descriptor
	MOVQ	R4,W^QUEU_Q_VALDESC	; save for error processing
	CMPL	#^A/NONE/,(R5)		; check if "NONE"
	BEQL	30$			; if .eq. the yes -negate qualifer
	CMPL	#^A/INFI/,(R5)		; check if "INFINITE"
	BNEQU	15$			; if .neq. then no
	CLRL	R4			; set time limit infinite
	BRB	20$			; br to move to message
15$:	CLRQ	-(SP)			; make quad word buffer for time
	PUSHAQ	(SP)			; addr. of buffer
	PUSHAQ	CLI$Q_QDVALDESC(R1)	; addr. of string descriptor
	CALLS	#2,LIB$CVT_DTIME	; ascii time to binary
	BLBC	R0,40$			; if low clear then error
	EDIV	#-20*10*1000,(SP),R4,R5	; convert to long word
	BVS	40$			; if overflow set then wont fit
	ASHL	#1,R4,R4		; make unsigned value
	TSTL	R5			; any remainder from division
	BEQL	20$			; if equal then none
	INCL	R4			; increment time
20$:	MOVZBL	#SMO$K_CPULIM,R0	; option code
	BSBW	W^INSERT_NOVALOPT	; place option code in message
	MOVL	R4,(R2)+		; move cpu time limit to message
	ADDL2	#4,W^QUEU_Q_BUFDESC	; update pointer into message
	RET				; return

30$:	MOVZBL	#SMO$K_NOCPULM,R0	; option code to R0
	BSBW	W^INSERT_NOVALOPT	; move option code to message
	RET				; return

40$:	MOVL	#SET$_BADTIME,R0	; set error code
	BRW	SIGNAL_ERROR		; signal the error
;
; action routines for ws quota and ws default
;
QUEU_WSQT_TRUE:
	.WORD	^M<R2,R4,R5>		; entry mask
	BSBB	COMMON			; join common processing
	.BYTE	SMO$K_WSQUOTA		; option code

QUEU_WSDF_TRUE:
	.WORD	^M<R2,R4,R5>		; entry mask
	BSBB	COMMON			; join common processing
	.BYTE	SMO$K_WSDEFLT		; option code

QUEU_WSEX_TRUE:
	.WORD	^M<R2,R4,R5>		; entry mask
	BSBB	COMMON			; join common processing
	.BYTE	SMO$K_WSEXTNT		; option code

COMMON:	MOVL	4(AP),R0		; get qualifier desc. block
	MOVQ	CLI$Q_QDVALDESC(R0),R4	; get string descriptor
	CMPL	#^A/NONE/,(R5)		; check if "NONE"
	BEQL	15$			; if equal then it is
	BSBW	CONVERT_VALUE		; convert to binary
	BLBC	R0,35$			; if low clear then error converting
	TSTL	R1			; test value
	BEQL	15$			; if 0 then negate qualifer
	BITL	#^X0FFFF0000,R1		; in range ?
	BNEQU	35$			; if not equal then no
	MOVZBL	@(SP)+,R0		; option code to R0
	BSBW	INSERT_NOVALOPT		; put option code in message
	MOVW	R1,(R2)+		; put value in message
	ADDL	#2,W^QUEU_Q_BUFDESC	; update pointer into message
	RET				; return

15$:	MOVZBL	@(SP)+,R1		; get option code
	MOVZBL	#SMO$K_NOWSQUO,R0	; assume no WS quota
	CMPB	R1,#SMO$K_WSQUOTA	; check assumption
	BEQL	25$			; if .EQ. then assume OK
	MOVZBL	#SMO$K_NOWSDFT,R0	; assume no WS default
	CMPB	R1,#SMO$K_WSDEFLT	; check assumption
	BEQL	25$			; if .EQ. then assume OK
	MOVZBL	#SMO$K_NOWSEXTNT,R0	; all that's left is no WS extent

25$:	BSBW	INSERT_NOVALOPT		; put option code in message
	RET

35$:	MOVL	#SET$_BADVALUE,R0	; set error code
	BRW	SIGNAL_ERROR		; signal the error

;
;
;
QUEU_DQCH_TRUE:
	.WORD	^M<R2,R4>		; entry mask
	MOVL	4(AP),R2		; get qualifier descriptor addr.
	MOVAB	QUEU_A_ASCIIVAL,R4	; get value convert descriptor
	CLRQ	-(SP)
	CLRQ	-(SP)			; init characteristics
5$:	PUSHAB	(R2)			; addr. of qualifier descriptor
	PUSHAL	W^SET$A_CLIWORK		; addr. of CLI work area
	PUSHAL	(R4)			; addr. of request descriptor
	CALLS	#3,@CLI$A_UTILSERV(AP)	; call CLI
	BLBC	R0,10$			; if low clear - then error
	PUSHAQ	CLI$Q_RQDESC(R4)	; set addr. of string descriptor
	CALLS	#1,LIB$CNVCLIQCHAR	; convert characteristic to binary
	BLBS	R0,15$			; if low set - then success
10$:	MOVQ	CLI$Q_RQDESC(R4),W^QUEU_Q_VALDESC
					; save descriptor for error
	MOVL	#SET$_BADVALUE,R0	; set error type
	BRW	SIGNAL_ERROR		; signal the error

15$:	BBSS	R1,(SP),20$		; set proper bit
20$:	BBS	#CLI$V_MOREVALS,CLI$B_RQSTAT(R4),5$
					; if bit set - then more to proccess
	MOVZBL	#SMO$K_DQCHAR,R0	; set option code
	BSBW	W^INSERT_NOVALOPT	; put option code in message
	MOVQ	(SP)+,(R2)+		; set characteristics in message
	MOVQ	(SP)+,(R2)+
	ADDL	S^#16,W^QUEU_Q_BUFDESC	; update pointer in message
	RET
;
;
;
QUEU_REQU_TRUE:
	.WORD	^M<R2>
	MOVZBL	#SMO$K_DESTQUE,R0	; option code to R0
	BSBW	INSERT_NOVALOPT		; put in message buffer
	MOVL	4(AP),R0		; get request descriptor
	MOVQ	CLI$Q_QDVALDESC(R0),-
		W^QUEU_Q_VALDESC	; save descriptor to value string
	PUSHAB	(R2)			; point to output area
	PUSHAQ	CLI$Q_QDVALDESC(R0)	; point to input descriptor
	CALLS	#2,G^TRAN_QUEUE		; translate queue name
	BLBC	R0,40$			; br if failed
	MOVZBL	(R2)+,R1		; get length of queue name in message
	MOVQ	R1,W^QUE_Q_DESQDESC	; get descriptor for translated name
	INCL	R1			; increment for count byte
	ADDL2	R1,W^QUEU_Q_BUFDESC	; update buffer descriptor
	MOVZBL	#1,R0			; set success
	RET

40$:	MOVL	#SET$_ILLDESQUE,R0	; set error code
	BRW	SIGNAL_ERROR		; common error processing

;
; common error exit for all action routines
;
;	input:	4(AP) = address of qualifier descriptor block
;		 R0   = error code
;

SIGNAL_ERROR:
	MOVL	4(AP),R1		; get address of qualifier descriptor block
;%%%	$PUTMSG_S	-		; issue error message
;%%%		<R0,#1,CLI$Q_QDVALDESC(R1)>
	PUSHAQ	W^QUEU_Q_VALDESC	; saved descriptor to value string
	PUSHL	#1			; number of arguments
	PUSHL	R0			; code
	CALLS	#3,LIB$SIGNAL		; signal error condition
					; give value descriptor as argument
	BISL	#STS$M_INHIB_MSG,R0	; inhibit further message output
	MOVL	R0,W^SET$L_STATUS	; record error code for later test
	RET				; return from action routine

;
; CONVERT_VALUE	- subroutine to convert a qualifier value
;
;	input	= 4(AP)	: address of qualifier descriptor block
;
;	output	= R1	: converted value (if success)
;		  R0	: 1 = success
;			  0 = failure
;
;	scratch	= R2
;

CONVERT_VALUE:
	MOVL	4(AP),R2		; get address of qualifier descriptor block
	CLRQ	R0			; assume failure
	TSTW	CLI$W_QDVALSIZ(R2)	; is value present ?
	BEQLU	10$			; branch if no value
	MOVQ	CLI$Q_QDVALDESC(R2),W^QUEU_Q_VALDESC
					; save descriptor to value beeing parsed
	PUSHAL	(R2)			; address of qualifier descriptor block
	PUSHAL	W^SET$A_CLIWORK		; CLI work space
	PUSHAL	W^QUEU_A_NUMERVAL	; request numeric conversion
	CALLS	#3,@CLI$A_UTILSERV(AP)	; call CLI
	BLBC	R0,10$			; branch on error
	MOVL	W^CLI$L_RQVALU+QUEU_A_NUMERVAL,R1
					; return value
10$:
	RSB				; and exit

;
; CHECK_BYTE	- subroutine to check range of one byte
;
;	input:	R1 = value to test
;
;	output:	R0 = 1 : success
;		     0 : failure
;

CHECK_BYTE:
	CLRL	R0			; assume failure
	TSTL	R1			; check for negative
	BLSS	10$			; branch if negative
	CMPL	R1,#ONEBYTE		; test maximum
	BGTRU	10$			; branch on greater
	INCL	R0			; signal success
10$:
	RSB

;
; INSERT_BYTOPT	-	subroutine to insert a symbiont manager option
;			requiring a byte as data into the symbiont manager
;			request buffer
;
;	input:	R0 = option code
;		R1 = value
;
;	output: R2 = points to end of symbiont manager descriptor buffer
;

INSERT_BYTOPT:
	ADDL3	W^QUEU_Q_BUFDESC,W^QUEU_Q_BUFDESC+4,R2
					; compute start of free space
	MOVB	R0,(R2)+		; insert option
	MOVB	R1,(R2)+		; insert byte data
	ADDL2	#2,W^QUEU_Q_BUFDESC	; update request buffer descriptor
	RSB

;
; INSERT_NOVALOPT	-	subroutine to insert an option whitout
;				a value into the symbiont manager request
;				buffer
;
;	input:	R0 = option code
;
;	output: R2 = points to end of symbiont manager request buffer
;

INSERT_NOVALOPT:
	ADDL3	W^QUEU_Q_BUFDESC,W^QUEU_Q_BUFDESC+4,R2
					; compute start of free space
	MOVB	R0,(R2)+		; insert option code
	INCL	W^QUEU_Q_BUFDESC		; update request buffer descriptor
	RSB


	.END
