	.TITLE	SETPROCES - SET PROCESS PARAMETERS
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY:	CLI UTILITY "SET"
;
; ABSTRACT:	SET A PROCESS'S RUNTIME PARAMETERS
;
; AUTHOR:	LEN KAWELL 12-MAY-1978
;
; MODIFIED BY:
;
;	V005	TMH0005		Tim Halvorsen		04-Feb-1982
;		Remove reference to CLI$K_ symbols at assembly time.
;
;	V004	MIR0045		Michael I. Rosenblum	29-Oct-1981
;		Change to the $SETPRV system service makes V001
;		unnecessary.
;
;	V003	MIR0028		Michael I. Rosenblum	27-Aug-1981
;		Add SET PROCESS/SUSPEND and /RESUME.
;		Added code to SET PROCESS/PRIV to handle a system
;		service fix in SETPRV.
;
;	V002	TMH0002		Tim Halvorsen	28-Mar-1981
;		Add SET PROCESS/NAME=prcnam
;
;	V001	TMH0001		Tim Halvorsen	04-Mar-1981
;		Report error if unable to set the specified privileges.
;--
;
; LOCAL MACROS
;
	.MACRO	CALLBAK	P1,P2
	.IF B <P2>
	PUSHAB	W^BITS			; ADDRESS OF BIT MASK
	.IFF
	PUSHAB	P2			; ADDRESS OF THIRD ARGUEMENT
	.ENDC
	PUSHAB	W^SET$A_CLIWORK	; COMMON WORK AREA
	PUSHAB	P1			; THE REQUEST DESCRIPTOR
	CALLS	#3,@CLI$A_UTILSERV(AP)	; REQUEST THE SERVICE OF THE CLI
	.ENDM				;
 
;
; EXTERNAL SYMBOLS
;
	$CLIMSGDEF			; DEFINE CLI MESSAGES
	$PRVDEF				; define all the priv bits
;
; LOCAL SYMBOLS
;
	_VIELD	Q,0,<-			; CLI CALL BACK BIT FLAGS
		IDEN,-			; IDENT QUALIFIER
		>
;
; LOCAL STORAGE
;
	.PSECT	SET$RWDATA,NOEXE,LONG
 
SETPRI:					; SET PRIORITY ARG LIST
	$SETPRI	0,0,0,0

BITS:	.LONG	0			; BIT ARRAY FOR CLI CALL BACK

PROC_L_PID:
	.LONG	0			; PROCESS ID
OURPROC_L_PID:
	.LONG	0			; OUR PROCESSES PID

PRIV:	.BLKQ	1			; PROCESS TEMP PRIVILEGES

SAVPRIV:.BLKQ	1			; A COPY OF THE STARTING PROCESS PRIVS

JPI_A_GETPID:
	.WORD	4			;THE GET PID GETJPI BLOCK
	.WORD	JPI$_PID
	.LONG	PROC_L_PID
	.LONG	0
	.LONG	0



STRING_VAL:				; CLI REQUEST FOR STRING VALUE
	$CLIREQDESC	RQTYPE=CLI$K_ASCIIVAL
NUM_VAL:				; CLI REQUEST FOR NUMERIC VALUE
	$CLIREQDESC	RQTYPE=CLI$K_NUMERVAL

PROC_NAME:				; CLI REQUEST FOR PROCESS NAME
	$CLIREQDESC	RQTYPE=CLI$K_INPUT1

QUAL_REQ:				; CLI REQUEST FOR QUALIFIERS
	$CLIREQDESC	RQTYPE=CLI$K_GETQUAL,QUALST=QUALS

QUALS:

IDEN_Q:	$CLIQUALDESC	QDCODE=CLI$K_STPC_IDEN,-
			QDFLGS=<CLI$V_QDEXPA>,SETLST=Q_V_IDEN
PRIO_Q:	$CLIQUALDESC	QDCODE=CLI$K_STPC_PRIO,TRUACT=PRIORITY,-
			QDFLGS=<CLI$V_QDEXPA>
PRIV_Q:	$CLIQUALDESC	QDCODE=CLI$K_STPC_PRIV,TRUACT=PRIVILEGE,-
			QDFLGS=<CLI$V_QDEXPA>

	$CLIQUALDESC	QDCODE=CLI$K_STPC_RESO,TRUACT=RES_WAIT,FLSACT=NORES_WAIT,-
			QDFLGS=<CLI$V_QDEXPA>
	$CLIQUALDESC	QDCODE=CLI$K_STPC_SWAP,TRUACT=SWAP,FLSACT=NOSWAP,-
			QDFLGS=<CLI$V_QDEXPA>
	$CLIQUALDESC	QDCODE=CLI$K_STPC_NAME,TRUACT=SETPRN,-
			QDFLGS=<CLI$V_QDEXPA>
	$CLIQUALDESC	QDCODE=CLI$K_STPC_SUSP,TRUACT=SUSPND,FLSACT=RESUME,-
			QDFLGS=<CLI$V_QDEXPA>
	$CLIQUALDESC	QDCODE=CLI$K_STPC_RESU,TRUACT=RESUME,-
			QDFLGS=<CLI$V_QDEXPA>
	$CLIQUALDESC	END_LIST

	.PSECT	SET$CODE,NOWRT
;++
; SET$PROCESS - SET PROCESS PARAMETERS
;
; FUNCTIONAL DESCRIPTION:
;
; THIS ROUTINE SETS A PROCESS'S:
;
;	PRIORITY
;	PRIVILEGES
;	RESOURCE WAIT MODE
;	SWAP MODE
;	NAME
;	SUSPEND
;
; IT IS ENTERED AS A RESULT OF A DISPATCH FROM THE SET COMMAND PROCESSOR
;
; INPUTS:
;
;	THE CLI DATA BASE IS SET UP. 
;
; OUTPUTS:
;
;	SET$L_STATUS = STATUS OF THE OPERATION
;--
SET$PROCESS::				; SET A PROCESS'S PARAMETERS
	.WORD	0
	MOVZWL	#SS$_NORMAL,W^SET$L_STATUS; ASSUME SUCCESS
	CALLBAK	W^PROC_NAME		; CALL CLI FOR PROCESS NAME
	CALLBAK	W^QUAL_REQ		; CALL CLI FOR QUALIFIERS
	BLBS	R0,10$			; IF LOW SET SUCCESS
	MOVL	R0,W^SET$L_STATUS	; SET STATUS
10$:
	RET				; RETURN

	.SBTTL	SET PROCESS PRIORITY
;++
; PRIORITY - SET PROCESS PRIORITY
;
; FUNCTIONAL DESCRIPTION:
;
; THIS ACTION ROUTINE CALLS THE SYSTEM SERVICE SYS$SETPRI TO SET
; THE PRIORITY OF A PROCESS.
;
;
; INPUTS:
;
;	IF SPECIFIED, THE PROCESS NAME DESCRIPTOR IS IN PROC_NAME
;
; OUTPUTS:
;
;	SET$L_STATUS = STATUS OF THE OPERATION
;--
PRIORITY:
	.WORD	0
	CALLBAK	W^NUM_VAL,W^PRIO_Q	; GET THE PRIORITY VALUE
	BLBC	R0,60$			;
	MOVL	W^CLI$L_RQVALU+NUM_VAL,- ; SET PRIORITY VALUE
		W^SETPRI$_PRI+SETPRI
	CMPL	W^SETPRI$_PRI+SETPRI, #31 ; Out of valid range 0-31?
	BLEQU	40$			; Invalid if neg or GTR 31
30$:	MOVL	#CLI$_IVVALU, R0	; Invalid priority value
	BRB	60$			; Return with error status
40$:	BSBW	GETPROCID		;GET THE PROCESS PID
	BLBC	R0,60$			;
	MOVAL	W^PROC_L_PID,W^SETPRI$_PIDADR+SETPRI ; SET ADDRESS OF PID
50$:	$SETPRI_G W^SETPRI		; SET THE PRIORITY
60$:	MOVL	R0,W^SET$L_STATUS	; SET STATUS
	RET

	.SBTTL	ENABLE/DISABLE SWAP MODE
;++
; SWAP - ENABLE PROCESS SWAP MODE
; NOSWAP - DISABLE PROCESS SWAP MODE
;
; FUNCTIONAL DESCRIPTION:
;
; THIS ACTION ROUTINE CALLS THE SYSTEM SERVICE SYS$SETSWM TO SET
; THE PROCESS SWAP MODE.
;
;
; INPUTS:
;
;	THE CLI DATA BASE IS SET UP.
;
; OUTPUTS:
;
;	SET$L_STATUS = STATUS OF THE OPERATION
;--
	.ENABL	LSB

SWAP:	.WORD	0
	CLRL	R0			; SET FLAG TO ENABLE SWAPPING
	BRB	10$

NOSWAP:	.WORD	0
	MOVL	#1,R0			; SET FLAG TO DISABLE SWAPPING
10$:	BSBB	CHECK_PROC		; CHECK THAT PROCESS NOT SPECIFIED
	$SETSWM_S R0			; SET SWAP FLAG
	MOVL	R0,W^SET$L_STATUS	; SET STATUS
	RET
	.DSABL	LSB

;++
; CHECK_PROC -	LOCAL ROUTINE TO CHECK THAT A PROCESS NAME OR ID WERE
;		NOT SPECIFIED
;--
CHECK_PROC:
	TSTW	W^CLI$W_RQSIZE+PROC_NAME ; PROCESS NAME SPECIFIED?
	BEQL	10$			; IF EQL NO
	MOVL	#CLI$_NOLIST,W^SET$L_STATUS ; SET NO PARAMETER ERROR
	RET				; EXIT
10$:	BBC	#Q_V_IDEN,W^BITS,20$	; IF CLEAR NO ID SPECIFIED
	MOVL	#CLI$_CONFQUAL,W^SET$L_STATUS ;SET CONFLICTING QUALIFIERS
	RET
20$:
	RSB				; RETURN

	.SBTTL	ENABLE/DISABLE RESOURCE WAIT MODE
;++
; RES_WAIT - ENABLE PROCESS RESOURCE WAIT MODE
; NORES_WAIT - DISABLE PROCESS RESOURCE WAIT MODE
;
; FUNCTIONAL DESCRIPTION:
;
; THIS ACTION ROUTINE CALLS THE SYSTEM SERVICE SYS$SETRWM TO SET
; THE PROCESS RESOURCE WAIT MODE.
;
;
; INPUTS:
;
;	THE CLI DATA BASE IS SET UP. 
;
; OUTPUTS:
;
;	SET$L_STATUS = STATUS OF THE OPERATION
;--
	.ENABL	LSB

RES_WAIT:
	.WORD	0
	CLRL	R0			; SET FLAG TO ENABLE WAITING
	BRB	10$

NORES_WAIT:
	.WORD	0
	MOVL	#1,R0			; SET FLAG TO DISABLE WAITING
10$:	BSBB	CHECK_PROC		; CHECK THAT PROCESS NOT SPECIFIED
	$SETRWM_S R0			; SET RESOURCE WAIT FLAG
	RET
	.DSABL	LSB

	.SBTTL	SET PROCESS PRIVILEGES
;++
; PRIVILEGE - SET PROCESS PRIVILEGES
;
; FUNCTIONAL DESCRIPTION:
;
; THIS ACTION ROUTINE SETS THE SPECIFIED PRIVILEGES IN PCB$Q_PROCPRIV.
;
;
; INPUTS:
;
;	ONLY THE CURRENT PROCESS'S PRIVILEGES MAY BE ALTERED.
;
; OUTPUTS:
;
;	SET$L_STATUS = STATUS OF THE OPERATION
;--
PRIVILEGE:
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8>
	BSBW	CHECK_PROC		; CHECK THAT PROCESS NOT SPECIFIED
	$SETPRV_S PRVPRV=W^PRIV,-	; GET CURRENT PERMANENT PRIVILEGES
		  PRMFLG=#1		;
	MOVQ	W^PRIV,W^SAVPRIV	;SAVE THE CURRENT PRIVS
10$:	CALLBAK	W^STRING_VAL,W^PRIV_Q	; GET PRIVILEGE NAME
	PUSHAQ	W^PRIV			; SET ADDRESS OF PRIVILEGE MASK
	PUSHAQ	W^CLI$Q_RQDESC+STRING_VAL ; SET ADDRESS OF KEYWORD DESC
	CALLS	#2,PRV$SETPRIV		; ENABLE/DISABLE SPECIFIED PRIVILEGE
	BLBC	R0,50$			; IF LBC, ERROR
	BBS	#CLI$V_MOREVALS,-	; IF SET, MORE VALUES
		W^CLI$B_RQSTAT+STRING_VAL,10$
	MNEGL	#1,-(SP)		; CREATE PRIVILEGE MASK WITH ALL
	MNEGL	#1,-(SP)		; CREATE PRIVILEGE MASK WITH ALL
	MOVL	SP,R2			; GET ADDRESS OF IT
	$SETPRV_S PRVADR=(R2),-		; DISABLE ALL PRIVILEGES
		  PRMFLG=#1,-		;
		  ENBFLG=#0		;
	$SETPRV_S PRVADR=W^PRIV,-	; ENABLE NEW PRIVILEGES
		  PRMFLG=#1,-		;
		  ENBFLG=#1		;
	CMPL	R0,#SS$_NOTALLPRIV	; DID THIS WORK THE FIRST TIME
	BNEQ	30$			; YES THEN CHECK IT
	$SETPRV_S PRVADR=W^PRIV,-	;NO THEN GIVE HIM ANOTHER CHANCE
		  PRMFLG=#1,-		;BECAUSE HE MAY HAVE SET SETPRIV
		  ENBFLG=#1		;THE FIRST TIME THROUGH
30$:	CMPL	R0,#SS$_NOTALLPRIV	;IF WE DIDN'T GET EVERYTHING
	BNEQ	90$			; THEN
	BBSC	#0,R0,90$		;MAKE THIS A REAL ERROR MESSAGE
	BRB	90$
	
50$:	CMPL	#PRV$_NOTUNQ,R0		; AMBIGUOUS KEYWORD?
	BNEQ	60$			; IF NEQ NO
	MOVL	#CLI$_ABKEYW,R0		; SET CLI ERROR STATUS
	BRB	90$			;
60$:	MOVL	#CLI$_IVKEYW,R0		; SET CLI ERROR STATUS
90$:	MOVL	R0,W^SET$L_STATUS	; SET RETURN STATUS
	RET

	.SBTTL	SET PROCESS NAME
;++
; SETPRN - SET PROCESS NAME
;
; FUNCTIONAL DESCRIPTION:
;
; THIS ACTION ROUTINE SETS THE SPECIFIED PROCESS NAME.
; ONLY THE CURRENT PROCESS'S NAME MAY BE ALTERED.
;
; INPUTS:
;
;	4(AP) = ADDRESS OF QUALIFIER DESCRIPTOR BLOCK
;
; OUTPUTS:
;
;	SET$L_STATUS = STATUS OF THE OPERATION
;--
SETPRN:
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8>

	BSBW	CHECK_PROC		; CHECK THAT PROCESS NOT SPECIFIED
	MOVL	4(AP),R0		; GET ADDRESS OF QUALDESC BLOCK
	$SETPRN_S PRCNAM=CLI$Q_QDVALDESC(R0) ; SET PROCESS NAME
	MOVL	R0,SET$L_STATUS		; SET FINAL STATUS
	RET

	.SBTTL	SUSPEND/RESUME processes
;
; Description:
;
;	suspends or resumes a suspended process.
;
;
.ENTRY	SUSPND,0
	BSBW	GETPROCID		;GET THE PROCESS WE ARE WORKING ON
	BLBC	R0,90$			;PROBLEMS ERROR OUT
	CMPL	W^OURPROC_L_PID,W^PROC_L_PID; IS THIS OUR PROCESS?
	BNEQ	80$			;NO THEN SUSPEND THE PROCESS
	MOVL	#SS$_ILLSELF,R0		;DON'T ALLOW HIMSELF
	BRB	90$			;...
80$:	$SUSPND_S -
		PIDADR=W^PROC_L_PID	;GIVE IT A PID TO PROCESS
90$:
	MOVL	R0,W^SET$L_STATUS	;AND RETURN THE STATUS
	RET				;NOW RETURN

;
; Resumes a process
;
.ENTRY	RESUME,0
	BSBW	GETPROCID		;GET THE PROCESS WE ARE WORKING ON
	BLBC	R0,90$			;PROBLEMS ERROR OUT
	$RESUME_S -
		PIDADR=W^PROC_L_PID	;GIVE IT A PID TO PROCESS
90$:
	MOVL	R0,W^SET$L_STATUS	;AND RETURN THE STATUS
	RET				;NOW RETURN

	.SBTTL	GETPROCID - WILL GET THE PROCESS ID
;
; Returns the process id of the process that was specified by the call
; to this program.
;
GETPROCID::
	$GETJPI_S ITMLST=W^JPI_A_GETPID	;GET THE INFO ON US FIRST
	MOVL	W^PROC_L_PID,W^OURPROC_L_PID; KEEP THIS PROCESS ID FOR COMPARISON
	TSTW	W^CLI$W_RQSIZE+PROC_NAME; DID WE HAVE A PROCESS NAME
	BEQL	50$			;NO THEN TRY A PROCESS ID
	$GETJPI_S PRCNAM=CLI$Q_RQDESC+PROC_NAME,ITMLST=W^JPI_A_GETPID
40$:	RSB				;IF OK THEN RETURN WITH THE PID IN HAND

50$:	BBC	#Q_V_IDEN,W^BITS,40$	;RETURN WITH OUR PID IF NO IDENT
	PUSHAL	W^PROC_L_PID		;WHERE TO PUT THE NUMBER
	PUSHAQ	W^CLI$Q_QDVALDESC+IDEN_Q;GET THE PROCESS NUMBER
	CALLS	#2,LIB$CVT_HEXBIN	;AND CONVERT IT TO BINARY
	RSB
	.END
