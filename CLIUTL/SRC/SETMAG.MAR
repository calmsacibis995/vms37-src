	.TITLE	SETMAGTAPE - SET CHARACTERISTICS OF A MAGTAPE
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY:	CLI UTILITY "SET"
;
; ABSTRACT: 	SET THE CHARACTERISTICS OF A MAGTAPE
;
; AUTHOR:	LEN KAWELL 15-MAY-1978
;
; MODIFIED BY:
;
;	V004	TMH0004		Tim Halvorsen		04-Feb-1982
;		Remove reference to CLI$K_ symbols at assembly time.
;
;	V02-003	RLRLGSFT	Robert L. Rappaport	29-Dec-1981
;		Add support for SET MAGTAPE/LOGSOFT command which allows
;		user to set TU78 driver to log soft errors.
;--
;
; LOCAL MACROS
;
	.MACRO	CALLBAK	P1,P2
	.IF B <P2>
	PUSHAB	W^BITS			; ADDRESS OF BIT MASK
	.IFF
	PUSHAB	P2			; ADDRESS OF THIRD ARGUEMENT
	.ENDC
	PUSHAB	W^SET$A_CLIWORK	; COMMON WORK AREA
	PUSHAB	P1			; THE REQUEST DESCRIPTOR
	CALLS	#3,@CLI$A_UTILSERV(AP)	; REQUEST THE SERVICE OF THE CLI
	.ENDM				;
 
;
; EXTERNAL SYMBOLS
;
	$CLIMSGDEF			; CLI MESSAGE DEFINITIONS
	$DEVDEF				; DEFINE DEVICE CHARACTERISTICS
	$MTDEF				; MAGTAPE CHARACTERISTICS
	$DCDEF				; DEVICE CLASS DEFINITIONS
;
; LOCAL STORAGE
;
	.PSECT	SET$RWDATA,NOEXE,LONG
 
BITS:		.LONG	0		; STORAGE FOR CLI CALL BACK
IOSTATUS:	.LONG	0,0		; IOSB FOR GET CHARACTERISTICS
GET_CHAN_INFO:	.LONG	12
		.LONG	DEV_CHAR
DEV_CHAR:
		.LONG	0
CHAN_INFO:
CLASS:		.BLKB	1
MT_TYPE:	.BLKB	1
BUFF:		.BLKW	1
MT_CHAR:	.BLKB	4

QIO:					; QIO PARAMETER BLOCK
	$QIOW	IOSB=IOSTATUS,P1=CHAN_INFO,P2=8

MT_NAME:				; CLI REQUEST FOR DEVICE NAME
	$CLIREQDESC	RQTYPE=CLI$K_INPUT1	
CHAR_QUAL:
	$CLIREQDESC	RQTYPE=CLI$K_GETQUAL,QUALST=QUALS
QUALS:
DEN_Q:	$CLIQUALDESC	QDCODE=CLI$K_STMT_DENS,TRUACT=DENSITY,-
			QDFLGS=<CLI$V_QDEXPA>
	$CLIQUALDESC	QDCODE=CLI$K_STMT_REWI,TRUACT=REWIND,-
			QDFLGS=<CLI$V_QDEXPA>
	$CLIQUALDESC	QDCODE=CLI$K_STMT_UNLO,TRUACT=UNLOAD,-
			QDFLGS=<CLI$V_QDEXPA>
	$CLIQUALDESC	QDCODE=CLI$K_STMT_LOGS,TRUACT=LOGSOFT,-
			FLSACT=NOLOGSOFT,QDFLGS=<CLI$V_QDEXPA>
	$CLIQUALDESC	END_LIST

NUM_VAL:				; CLI REQUEST FOR NUMERIC VALUE
	$CLIREQDESC	RQTYPE=CLI$K_NUMERVAL

	.PAGE
	.PSECT	SET$CODE,NOWRT
;++
; SET$MAGTAPE - SET FOREIGN MAGTAPE CHARACTERISTICS
;
; FUNCTIONAL DESCRIPTION:
;
; THIS ROUTINE SETS THE CHARACTERISTICS OF A SPECIFIED MAGTAPE.
; IT IS ENTERED AS A RESULT OF A DISPATCH FROM THE SET COMMAND PROCESSOR
;
; INPUTS:
;
;	THE CLI DATA BASE IS SET UP. 
;
; OUTPUTS:
;
;	SET$L_STATUS = STATUS OF THE OPERATION
;--
SET$MAGTAPE::				; SET MAGTAPE COMMAND
	.WORD	^M<R2>
	MOVAB	W^MT_NAME,R2		; ADDRESS QUAL DESC
	CALLBAK	(R2)			; CALL CLI FOR DEVICE NAME
	MOVAB	CLI$Q_RQDESC(R2),R2	; ADDRESS NAME DESC
20$:	$ASSIGN_S (R2),W^QIOW$_CHAN+QIO	; ASSIGN CHANNEL TO DEVICE
	BLBC	R0,ERROR		; IF LOW CLEAR THEN ERROR AND EXIT
	$GETCHN_S W^QIOW$_CHAN+QIO,,W^GET_CHAN_INFO
	BLBC	R0,ERROR		; IF LOW CLEAR THEN ERROR
	CMPB	W^CLASS,#DC$_TAPE	; IS DEVICE A TAPE?
	BEQL	30$			; IF EQL YES
	MOVZWL	#SS$_IVDEVNAM,R0	; ELSE INVALID DEVICE ERROR
	BRB	ERROR			;

30$:	BBC	#DEV$V_MNT,W^DEV_CHAR,40$ ; IF CLEAR, NOT MOUNTED
	BBS	#DEV$V_FOR,W^DEV_CHAR,SET_CHAR ; IF SET MOUNTED FOREIGN
40$:	MOVL	#CLI$_DEVNOTFOR,R0	; ELSE NOT MOUNTED FOREIGN ERROR
;
; ERROR IN GETTING CHARACTERISTICS OR ASSIGNING CHANNEL
;
ERROR:	MOVL	R0,W^SET$L_STATUS	; SAVE FOR EXIT STATUS
	RET				; RETURN
;
; PROCESS QUALIFIERS
;
SET_CHAR:				; PROCESS QUALIFIERS
	MOVZWL	#SS$_NORMAL,W^SET$L_STATUS; ASSUME SUCCESS
	CALLBAK	W^CHAR_QUAL
	BLBC	W^SET$L_STATUS,100$	; IF LOW CLEAR - ERROR
	BLBC	R0,ERROR		;
	MOVZWL	W^IOSTATUS,W^SET$L_STATUS ; SAVE I/O STATUS
100$:	$DASSGN_S W^QIOW$_CHAN+QIO	; DEASSIGN THE CHANNEL
	RET				; RETURN
;
; ACTION ROUTINES
;

;
; ACTION ROUTINE TO SET DENSITY
;
DENSITY:
	.WORD	^M<R2>
	TSTW	W^CLI$W_QDVALSIZ+DEN_Q	; VALUE PRESENT?
	BEQL	30$			; IF EQL NO
	CALLBAK	W^NUM_VAL,W^DEN_Q	; GET THE VALUE
	BLBC	R0,20$			;
	MOVL	#CLI$_ILLVAL,R0		; ASSUME ILLEGAL VALUE
	MOVL	W^CLI$L_RQVALU+NUM_VAL,R2 ; GET THE DENSITY VALUE
	MOVL	#MT$K_PE_1600,R1	; ASSUME 1600 BPI
	CMPW	R2,#1600		; IS IT 1600 BPI?
	BEQL	10$			; IF EQL YES
	MOVL	#MT$K_NRZI_800,R1	; ASSUME 800 BPI
	CMPW	R2,#800			; IS IT 800 BPI?
	BEQL	10$			; IF EQUAL YES
	MOVL	#MT$K_GCR_6250,R1	; ASSUME 6250 BPI
	CMPW	R2,#6250		; IS IT ?
	BNEQ	20$			; BR TO ERROR IF NOT
10$:	INSV	R1,#MT$V_DENSITY,#MT$S_DENSITY,W^MT_CHAR ; SET CHARACTERISTICS
	MOVZWL	#IO$_SETMODE,W^QIOW$_FUNC+QIO ; SET FUNCTION CODE
	$QIOW_G	W^QIO			; SET MODE
20$:	MOVL	R0,W^SET$L_STATUS	; SET STATUS
30$:	RET

;
; ACTION ROUTINE TO REWIND MAGTAPE
;
REWIND:
	.WORD	0
	MOVZWL	#IO$_REWIND,W^QIOW$_FUNC+QIO ; SET FUNCTION CODE
	$QIOW_G	W^QIO			; ISSUE FUNCTION
	MOVL	R0,W^SET$L_STATUS	; SET STATUS
	RET


;
; ACTION ROUTINE TO UNLOAD MAGTAPE
;
UNLOAD:
	.WORD	0
	MOVZWL	#IO$_REWINDOFF,W^QIOW$_FUNC+QIO ; SET FUNCTION CODE
	$QIOW_G	W^QIO			; ISSUE FUNCTION
	MOVL	R0,W^SET$L_STATUS	; SET STATUS
	RET
	.PAGE
;
; ACTION ROUTINE TO SETUP FOR LOGGING SOFT ERRORS (MEANINGFUL FOR TU78 ONLY)
;

	.ENABLE	LSB
LOGSOFT:
	.WORD	0
	MOVZWL	#IO$_SENSEMODE,W^QIOW$_FUNC+QIO ; SET FUNCTION CODE
	$QIOW_G	W^QIO			; ISSUE FUNCTION
	BBS	#MT$V_LOGSOFT,-		; IF WE ARE ALREADY LOGGING SOFT ERRORS
		W^IOSTATUS+4,20$	;  THEN BRANCH AROUND TO RETURN
10$:
	BISL3	#MT$M_LOGSOFTOG,-	; ELSE SET TOGGLE SWITCH TO REVERSE
		W^IOSTATUS+4,W^MT_CHAR	;  POLARITY OF SOFT LOGGING FLAG
	MOVZWL	#IO$_SETMODE,W^QIOW$_FUNC+QIO ; SET FUNCTION CODE
	$QIOW_G	W^QIO			; ISSUE FUNCTION
20$:
	MOVL	R0,W^SET$L_STATUS	; SET STATUS
	RET

NOLOGSOFT:
	.WORD	0
	MOVZWL	#IO$_SENSEMODE,W^QIOW$_FUNC+QIO ; SET FUNCTION CODE
	$QIOW_G	W^QIO			; ISSUE FUNCTION
	BBC	#MT$V_LOGSOFT,-		; IF WE ARE ALREADY NOT LOGGING SOFT
		W^IOSTATUS+4,20$	;  ERRORS THEN BRANCH TO RETURN
	BRB	10$			; ELSE BRANCH TO TURN OFF LOGGING
	.DSABL	LSB
	.END
