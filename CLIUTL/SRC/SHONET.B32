MODULE show$network (IDENT = 'V03-000') =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY:  SHOW Command
!
! ABSTRACT:
!
!	This module processes the SHOW NETWORK command
!
! ENVIRONMENT:
!
!	VAX/VMS operating system. unprivileged user mode,
!
! AUTHOR:  Tim Halvorsen, August 1981
!
! Modified by:
!
!--

!
! Include files
!

LIBRARY 'SYS$LIBRARY:STARLET';		! VAX/VMS common definitions

LIBRARY 'SHRLIB$:NET';			! NETACP control QIO definitions

REQUIRE 'SYS$LIBRARY:UTILDEF';		! Common BLISS definitions

!
! Table of contents
!

FORWARD ROUTINE
    show$network,			! Process SHOW NETWORK
    write_line:		NOVALUE;	! Write line to output

!
! External storage
!

EXTERNAL
    show$l_status;			! Final status from SHOW command

EXTERNAL LITERAL
    show$_net_rmthd,			! Header line
    show$_net_path,			! Detail line
    show$_net_totnod,			! Total line
    show$_net_none;			! Network not up

!
! External routine
!

EXTERNAL ROUTINE
    show$print_msg;			! General SHOW FAO output routine

GLOBAL ROUTINE show$network =

!---
!
!	This routine processes the SHOW NETWORK command
!
! Inputs:
!
!	None
!
! Outputs:
!
!	Routine value = status code
!---

BEGIN

LOCAL
    nfb:	BBLOCK [nfb$c_length+10*4],	! Network function block
						! (room for 10 field requests)
    nfb_desc:	VECTOR [2],		! Descriptor of NFB
    iosb:	BBLOCK [8],		! I/O status block
    channel:	WORD,			! Channel to ACP
    node_count,				! Number of nodes displayed
    buffer:	VECTOR [64],		! Return buffer
    buffer_desc: VECTOR [2],		! Descriptor of above buffer
    keys:	BBLOCK [4+4+nfb$c_p2strtlng], ! Buffer for search/start keys
    key_desc:	VECTOR [2],		! Descriptor of above buffer
    ptr:	REF BBLOCK,		! Pointer into return buffer
    node_name:	VECTOR [2],		! Descriptor of node name
    line_name:	VECTOR [2],		! Descriptor of line name
    loop_name:	VECTOR [2],		! Descriptor of loop line name
    status;

nfb_desc [0] = nfb$c_length + 10*4;	! Construct descriptor of NFB
nfb_desc [1] = nfb;

buffer_desc [0] = 256;			! Construct descriptor of return buffer
buffer_desc [1] = buffer;

key_desc [0] = 4 + 4 + nfb$c_p2strtlng;	! Fixed size collate key, plus longword
key_desc [1] = keys;			! REA search value, and longword overhead

keys [0,0,32,0] = 0;			! Zero count of fields in P4 (unused)
keys [4,0,32,0] = true;			! REA search value = TRUE
keys [8,0,16,0] = 0;			! Start key = at beginning

status = $ASSIGN(CHAN=channel,		! Assign channel to NETACP
		DEVNAM=%ASCID '_NET0:');

IF NOT .status				! If error detected,
THEN
    BEGIN
    IF .status EQL ss$_nosuchdev	! If network not yet up,
    THEN
	write_line(show$_net_none)	! then tell user
    ELSE
	show$l_status = .status;	! Else, report the status
    RETURN true;
    END;

CH$FILL(0,nfb$c_length,nfb);		! Pre-zero NFB fields

nfb [nfb$b_fct] = nfb$c_fc_show;	! Request "show" function
nfb [nfb$b_database] = nfb$c_db_ndi;	! of node database
nfb [nfb$l_strt_key] = nfb$c_collate;	! Search entire database
nfb [nfb$l_srch_key] = nfb$c_ndi_rea;	! Only return reachable nodes

CH$MOVE(9*4, UPLIT LONG(		! Request the following fields:
		nfb$c_ndi_tad,		! Translated node address
		nfb$c_ndi_acl,		! Active links
		nfb$c_ndi_dco,		! Destination cost
		nfb$c_ndi_dho,		! Destination hops
		nfb$c_ndi_loo,		! True if loopback node
		nfb$c_ndi_nna,		! Node name
		nfb$c_ndi_dli,		! Destination line name
		nfb$c_ndi_nli,		! Loopback line name
		nfb$c_endoflist),
	nfb [nfb$l_fldid]);

node_count = 0;				! Initialize node count

WHILE true
DO
    BEGIN
    status = $QIOW(FUNC = IO$_ACPCONTROL,	! Issue control function
		CHAN = .channel,
		IOSB = iosb,
		P1 = nfb_desc,		! Address of NDB descriptor
		P2 = key_desc,		! Address of key buffer descriptor
		P4 = buffer_desc);	! Address of return buffer descriptor

    IF NOT .status			! If error detected,
	OR NOT (status = .iosb [0,0,16,0])
    THEN
	EXITLOOP;			! then stop looping

    IF .node_count EQL 0		! If first time through,
    THEN
	write_line(show$_net_rmthd);	! Print header line

    node_count = .node_count + 1;	! Increment # nodes reachable

    ptr = buffer [5];			! Point to word-counted node name

    node_name [0] = .ptr [0,0,16,0];	! Construct descriptor of node name
    node_name [1] = .ptr + 2;
    ptr = .ptr + 2 + .ptr [0,0,16,0];	! Skip by string in buffer

    line_name [0] = .ptr [0,0,16,0];	! Construct descriptor of line name
    line_name [1] = .ptr + 2;
    ptr = .ptr + 2 + .ptr [0,0,16,0];	! Skip by string in buffer

    loop_name [0] = .ptr [0,0,16,0];	! Construct descriptor of loop line
    loop_name [1] = .ptr + 2;

    write_line(show$_net_path,		! Output line
		.buffer [0],		! Node address
		node_name,		! Node name
		(IF .buffer [1] GEQ 0 THEN .buffer [1] ELSE 0), ! Active links
		.buffer [2],		! Destination cost
		.buffer [3],		! Destination hops
		(IF .buffer [4] THEN loop_name ELSE line_name)); ! Line name
    END;

IF .status EQL ss$_endoffile		! If normal termination,
THEN
    BEGIN
    IF .node_count GTR 1		! If more than local node found,
    THEN
	write_line(show$_net_totnod, .node_count);	! Write the total
    END
ELSE
    BEGIN
    IF .status EQL ss$_devnotmount	! If ACP not yet started,
    THEN
	write_line(show$_net_none)	! then indicate network not up
    ELSE
	show$l_status = .status;	! Else, report the status
    END;

$DASSGN(CHAN = .channel);		! Deassign the ACP channel

RETURN true;				! Return to CLI dispatcher

END;

ROUTINE write_line (message, args): NOVALUE =

!---
!
!	This routine accepts an identifier which points to an FAO
!	message string and a series of FAO arguments, and writes
!	the resulting line to the output stream.
!
! Inputs:
!
!	message = Message string identifier code
!	args = First FAO argument (any number of arguments may follow)
!
! Outputs:
!
!	None
!---

BEGIN

show$print_msg(args, .message);		! Use standard SHOW output routine

END;

END
ELUDOM
