MODULE TRANQUEUE(%TITLE	'Translate queue name'
		IDENT = 'V03-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:
!	CLI Utilities
!
! ABSTRACT:
!	This module contains a utility routine that performs the standard
!	translation for queue names.
!
! ENVIRONMENT:
!	VAX/VMS user mode.
!--
!
! AUTHOR: M. Jack, CREATION DATE: 11-Jan-1982
!
! MODIFIED BY:
!
!**

LIBRARY 'SYS$LIBRARY:LIB';


FORWARD ROUTINE
	TRAN_QUEUE;			! Translate queue name

GLOBAL ROUTINE TRAN_QUEUE(INPUT_DESC,OUTPUT_STRING)=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine performs the standard translation of queue names.
!
! INPUT PARAMETERS:
!
!	INPUT_DESC	- Address of a descriptor for the input string.  The
!			  class must be unspecified or fixed.
!
!	OUTPUT_STRING	- Pointer to a 16-byte area to receive the counted
!			  ASCII result, padded with binary zeros.  Typically
!			  this is an area in the $SNDSMB parameter.
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	SS$_NORMAL	Successful completion
!	SS$_IVLOGNAM	Input string longer than LOG$C_NAMLENGTH characters, or
!			resulting string longer than 15 characters
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN
MAP
	INPUT_DESC:	REF BLOCK[,BYTE],	! Input string
	OUTPUT_STRING:	REF VECTOR[,BYTE];	! Output buffer
LOCAL
	STATUS,					! Status return
	LOGNAM:		VECTOR[2],		! Descriptor for input string
	RSLBUF:		VECTOR[2],		! Descriptor for $TRNLOG result
	TRNLOG_BUFFER:	VECTOR[LOG$C_NAMLENGTH,BYTE]; ! $TRNLOG result buffer


! Pick up input string descriptor.
!
IF .INPUT_DESC[DSC$W_LENGTH] GTRU LOG$C_NAMLENGTH THEN RETURN SS$_IVLOGNAM;
LOGNAM[0] = .INPUT_DESC[DSC$W_LENGTH];
LOGNAM[1] = .INPUT_DESC[DSC$A_POINTER];
STATUS = SS$_NORMAL;


! Loop for 10 logical name translations.  The last iteration is only for
! upcasing and blank-compressing the tenth translation, if any.
!
DECR I FROM 10 TO 0 DO
    BEGIN
    LOCAL
	OUTPUT_CURSOR:	REF VECTOR[,BYTE];


    ! Upcase and remove spaces, tabs, and nulls from the string.
    !
    OUTPUT_CURSOR = TRNLOG_BUFFER;
    INCR N FROM 0 TO .LOGNAM[0]-1 DO
	BEGIN
	LOCAL
	    C:		BYTE;	

	C = .VECTOR[.LOGNAM[1], .N; ,BYTE];
	IF .C NEQ %C' ' AND .C NEQ %O'011' AND .C NEQ 0
	THEN
	    BEGIN
	    IF .C GEQU %C'a' AND .C LEQU %C'z' THEN C = .C - %C'a' + %C'A';
	    OUTPUT_CURSOR[0] = .C;
	    OUTPUT_CURSOR = .OUTPUT_CURSOR + 1;
	    END;
	END;


    ! Build a descriptor for the upcased and blank-compressed result and
    ! remove a trailing colon, if any.
    !
    LOGNAM[1] = TRNLOG_BUFFER;
    LOGNAM[0] = .OUTPUT_CURSOR - .LOGNAM[1];
    IF .LOGNAM[0] NEQ 0
    THEN
	IF .OUTPUT_CURSOR[-1] EQL %C':' THEN LOGNAM[0] = .LOGNAM[0] - 1;


    ! If this is the eleventh iteration or there was no translation on the
    ! previous iteration, we are done.
    !
    IF .I EQL 0 OR .STATUS<0,16> EQL SS$_NOTRAN THEN EXITLOOP;


    ! Attempt translation.
    !
    RSLBUF[0] = LOG$C_NAMLENGTH;
    RSLBUF[1] = TRNLOG_BUFFER;
    STATUS = $TRNLOG(LOGNAM=LOGNAM, RSLLEN=RSLBUF, RSLBUF=RSLBUF);
    IF NOT .STATUS THEN RETURN .STATUS;


    ! Establish the result as the new input.
    !
    LOGNAM[0] = .RSLBUF[0];
    LOGNAM[1] = .RSLBUF[1];
    END;


! Ensure that the result will fit and return it as a counted ASCII string,
! padded with binary zeros to a total of 16 bytes.
!
IF .RSLBUF[0] GTRU 15 THEN RETURN SS$_IVLOGNAM;
OUTPUT_STRING[0] = .RSLBUF[0];
CH$COPY(.RSLBUF[0], TRNLOG_BUFFER, 0, 15, OUTPUT_STRING[1]);
SS$_NORMAL
END;

END
ELUDOM
