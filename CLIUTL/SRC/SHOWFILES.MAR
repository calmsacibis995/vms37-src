	.title	show$files - list open files on a disk device
	.sbttl	copyright notice
	.ident	'V03-003'
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
	.page
	.sbttl	Program description
;++
;   Facility
;
;	Utility to list open files on a disk
;
;   Abstract
;
;	This program lists all open files on a disk device
;	in order to find out who is accessing the device.
;
;   Environment
;
;	Native mode, User mode
;
;   Author
;
;	Tim Halvorsen, Jan 1980
;
;   Modified by:
;
;	V03-003	GAS0073		Gerry Smith		13-Apr-1982
;		Make a check that the device is a disk.  This prevents
;		embarassing bugchecks when a SHOW DEV/FIL is performed
;		on a spooled device.
;
;	V03-002	GAS0066		Gerry Smith		30-Mar-1982
;		If no files are printed for a particular physical device,
;		simply return success, not "No such file", since there
;		is always at least one file (INDEXF.SYS), but the process
;		may not have requested it (/nosys) or not have the privilege
;		to see it.  This causes SHOW DEVICE/FILES to be consistent
;		with SHOW PROC/SUB and SHOW USERS with a nonexistent user.
;
;	V03-001	GAS0060		Gerry Smith		16-Mar-1982
;		If a file has read access for the world, but the
;		file is protected from access for some other means
;		(e.g. a protected directory), then return the appropriate
;		error message, rather than a null or partial directory
;		specification.  Also, remove privilege checks (for WORLD
;		and GROUP).
;
;	V02-013	GAS0037		Gerry Smith		28-Jan-1982
;		Add a check to see if the process has GROUP or WORLD 
;		privilege.  If not, turn off the privilege(s) for the
;		duration of the running of the image.
;
;	V02-012	LMP0006		L. Mark Pilant,		 7-Jan-1982  14:50
;		Modified the display to include information about the windows
;		associated with a file.  Also indicate whether the windows are
;		Cathedral or not.
;
;	V02-010 GAS0027		Gerry Smith	18-Dec-1981
;		Remove the owner UIC from the display.
;
;	V02-009	GAS0023		Gerry Smith	01-Dec-1981
;		If no device is present on the command line, assign
;		a channel to SYS$DISK:.  Change the output of system
;		files so that all system files are output with the same
;		format, rather than trying to distinguish between "installed"
;		files and other "system" files.
;
;	V02-008 GAS0006		Gerry Smith	26-AUG-1981
;		Use IOC$CVT_DEVNAM for single volumes, as well as
;		multi-volume sets.
;
;	V02-007 GAS0005		Gerry Smith	13-Aug-1981
;		For multi-volume sets, show which physical device a 
;		file is on.
;
;	V02-006 GAS0004		Gerry Smith	07-Aug-1981
;		Change sense of header flag bit so that it is clear when
;		when the header has been written.
;
;	V02-005	GAS0001		Gerry Smith	20-Jul-1981  13:25
;		Add display options.  Raise IPL to lock FCB's during scan.
;		Add this module to the SHOWDEVUTL module.
;
;	V004	TMH0004		Tim Halvorsen	30-Mar-1981
;		Mark installed files in listing rather than displaying
;		a strange pid with the reference count in the upper word.
;
;	V003	TMH0003		Tim Halvorsen	22-Jan-1981
;		Add check for partially dismounted volume sets.
;		Display any error messages in file specification slot.
;		Do not display extension header FCB's.
;
;	V002	TMH0002		Tim Halvorsen	05-Jan-1981
;		Make it work for multi-volume disks.
;
;	V001	TMH0001		Tim Halvorsen	30-Jun-1980
;		Add additional checks on VCB and FCB list.
;--

	.sbttl	declarations
;
;	symbol defintions
;
	$dscdef			; Descriptor definitions
	$jpidef			; GETJPI definitions
	$ddbdef			; device data block 
	$ucbdef			; unit control block
	$vcbdef			; Volume control block
	$rvtdef			; Relative volume table
	$fcbdef			; File control block
	$wcbdef			; Window control block
	$dyndef			; Type codes for VMS blocks
	$ssdef			; System error messages
	$ccbdef			; CCB definitions
	$ipldef			; IPL definitions
	$prvdef			; Privilege bit definitions
	$dcdef			; Device class definitions

	.page
	.sbttl	storage definitions
;
;	storage definitions
;

	.psect	show$rwdata,noexe,wrt
;**** the following block of code must be together:
fcb_length:
	.blkl	1			; Length of buffer in use

fcb_buffer:
	.blkl	1			; Address of the buffer

fcb_count:
	.blkl	1			; Number of FCB's to display

wcb_length:
	.blkl	1			; Length of the buffer in use

wcb_buffer:
	.blkl	1			; Address of the buffer
					; The 16 byte entry consists of the PID,
					; the number of window segments, the
					; total size of all the windows, and the
					; access status byte.

wcb_count:
	.blkl	1			; Number of WCB's to display

def_disk:				; Descriptor for default disk
	.ascid	/SYS$DISK:/
;****

procnambuf:
	.blkb	15			; Process name buffer
process_name:
	.long	0
	.address procnambuf

newbuflim:
	.long	0,0			; descriptor for locking dynamic buffers

null_wcblock:
	.long	0			; PID
	.long	0			; window count
	.long	0			; window size
	.long	0			; access flags

	.psect	show$rodata,noexe,nowrt

jpi_procnam:
	.word	15			; Length of output buffer
	.word	jpi$_prcnam		; Request type
	.address procnambuf		; Address of output buffer
	.address process_name		; Address to receive length
	.long	0
;**** buflim depends on having fcb_length, fcb_buffer, and def_disk all together
buflim:
	.address	fcb_length	; descriptor showing address range
	.address	def_disk	; for data that can't page

codelim:
	.address	count_fcbwcb	; descriptor showing address range
	.address	display_file	; for code that can't page

;
;	FAO control strings and the header for output
;
faowin:	.ascid	'!15AS !XL !8UL!AS !8UL  !AS'
faofil:	.ascid	'!15AS !XL  !AS'
cath:	.ascid	'C'
nocath:	.ascid	' '
disk:	.ascid	'!/	Files accessed on physical device !AS on !%D!/'
hedwin:	.ascid	'Process name      PID    Win Cnt   Win Size  File name'
hedfil:	.ascid	'Process name      PID     File name'

	.psect	show$code,exe,nowrt

	.sbttl	show$files -- entry point for this module
;---
;
;	This is the main routine of the program.  Based on the
;	options in the command line, subroutines are called to
;	display open files on a particular device.
;
; Inputs:
;
;	4(AP) = address of translated device descriptor
;
; Outputs:
;
;	The open files are printed on SYS$OUTPUT
;---

	.entry	show$files,^m<r2,r3,r4,r5>

	bitl	#devi$m_user-		; check to see if either option 
		!devi$m_syst, -		; was set.  If not, then set both
		devi$l_bitlis
	bneq	10$
	bisl	#devi$m_user-		; set both bits, saying we want
		!devi$m_syst, -		; both system and user files
		devi$l_bitlis

10$:	jsb	get_device		; assign a channel and put it in r3
					; note that r2-r5 are changed
	blbc	r0,15$			; branch on error
	$lkwset_s	inadr=buflim	; lock data buffer in working set
	blbc	r0,15$			; branch on error
	$lkwset_s	inadr=codelim	; lock code pages in working set
	blbs	r0,20$			; xfer if all ok
15$:	ret				; return with status
20$:	pushl	r3			; channel number on the stack
	pushl	#1
	pushl	sp
	pushab	w^count_fcbwcb
	calls	#2,g^sys$cmkrnl		; count the number of FCB's and WCB's
	addl2	#8,sp			; clean up the stack
	addl3	#10,fcb_count,r0	; set minimum
	divl3	#10,r0,r0		; 10% overdraft
	mull3	#11*fcb$c_length,r0,fcb_count	; amount needed
	addl3	#10,wcb_count,r0	; set minimum
	divl3	#10,r0,r0		; 10% overdraft
	mull3	#11*16,r0,wcb_count	; amount needed
	addl3	fcb_count,wcb_count,-(sp)	;calculate total needed
	movl	(sp),newbuflim+4	; save size foe later
	movl	sp,r0			; save address for later
	pushab	fcb_buffer		; get some memory
	pushl	r0
	calls	#2,g^lib$get_vm
	blbs	r0,30$			; xfer if all ok
	ret				; else return with status posted
30$:	tstl	(sp)+			; clean the stack
	movl	fcb_buffer,newbuflim	; set starting address to lock
	addl2	fcb_buffer,newbuflim+4	; set ending address to lock
	$lkwset_s	inadr=newbuflim	; lock new buffers into memory
	blbs	r0,40$			; xfer if all ok
	ret				; else exit stage right
40$:	addl3	fcb_count,fcb_buffer,wcb_buffer	; set address of WCB buffer area
	pushl	r3			; channel number on stack
	pushl	#1
	pushl	sp
	pushab	w^save_dev_info
	calls	#2,g^sys$cmkrnl		; Save device information
	addl	#8,sp			; Pop cmrknl arguments off stack
	blbc	r0,90$			; branch if error
	$ulwset_s	inadr=buflim	; unlock data pages
	blbc	r0,90$			; branch if error
	$ulwset_s	inadr=codelim	; unlock code pages
	blbc	r0,90$			; branch if error
	$ulwset_s	inadr=newbuflim	; unlock dynamic buffer area
	blbc	r0,90$			; xfer if in error
	pushl	r2			; Address of device descriptor
	calls	#1,display_info		; Display the saved info
90$:	ret

	.sbttl	get_device, get device spec and assign a channel
;---
;
;	This routine takes the device specification, if any, and assigns
;	a channel to it.
;
; Inputs:
;
;	4(ap) = address of device string descriptor
;
; Outputs:
;
;	r3 = channel number from assign
;
;	r4,r5 are destroyed
;
;---

get_device:

	movl	4(ap),r2		; get device string descriptor
    	bbs	#devi$v_devn, -		; if device present, branch
    		devi$l_bitlis,20$
	moval	def_disk,r2		; if no device present, use the
					; default device descriptor
	brb	80$			; and go assign the channel


20$:	movzbl	(r2),r0			; Get length of string
	movab	@4(r2)[r0],r4		; calculate address of
	decl	r4			; end of string
	cmpb	#^A':',(r4)+		; check to see if colon at end
	beql	80$			; branch if already there
	movb	#^A':',(r4)		; else put one there
	incl	(r2)			; and increment length of device
80$:	clrl	-(sp)			; make space on stack for channel
	movl	sp,r3			; and save its address
	$assign_s	devnam=(r2),-	; assign a channel to the device
			chan=(r3)
	popl	r3			; put channel number in r3
90$:   	rsb

	.sbttl	count_fcbwcb -- count the number of FCB's and WCB's

;---
;
;	This kernel mode routine counts the number of FCB's and WCB's
;	associated with a particular device or volume set.  This is necessary
;	to allow a variable number of files to be displayed.
;
; Inputs:
;
;	4(ap) = Channel number of the assigned device
;
; Outputs:
;
;	fcb_count = the number of FCB's actually active
;	wcb_count = the number of primary windows associated with the FCB's
;
;---

count_fcbwcb:
	.word	^m<r2,r3,r4,r5,r6,r7,r8,r9,r10,r11>

	clrl	fcb_count		; nothing so far
	clrl	wcb_count
	movzwl	4(ap),r0		; get the channel number
	jsb	g^ioc$verifychan	; verify the channel number
	blbc	r0,90$			; xfer if in error
	movl	ccb$l_ucb(r1),r1	; get the UCB address
	cmpb	ucb$b_devclass(r1),#dc$_disk	; is this a disk?
	bneq	80$			; exit if not
	setipl	#ipl$_synch		; lock the FCB's into place
;
; 	Search all the UCB's in the relative volume list
;
	movl	ucb$l_vcb(r1),r6	; get the address of the first VCB
	beql	80$			; error if none there
	movl	r1,r0			; put UCB address if useful place
	tstw	vcb$w_rvn(r6)		; is this part of a volume set?
	beql	50$			; xfer if not
	movl	vcb$l_rvt(r6),r9	; else get address of RVT
	beql	80$			; error if none
	cmpb	rvt$b_type(r9),#dyn$c_rvt	; right type of block?
	bneq	80$			; error if not
	movzbl	rvt$b_nvols(r9),r10	; get the number of volumes in the set
	movab	rvt$l_ucblst(r9),r9	; get address of the UCB list
10$:	movl	(r9)+,r6		; get the next UCB
	beql	20$			; skip if not mounted
	cmpb	ucb$b_type(r6),#dyn$c_ucb	;really a UCB?
	bneq	80$			; xfer if not
	movl	r6,r0			; else move UCB address into useful place
	movl	ucb$l_vcb(r6),r6	; get VCB address
	beql	80$			; xfer if none
	bsbb	100$			; go do the actual counting
20$:	sobgtr	r10,10$			; continue till all UCB's processed
	brb	70$			; go finish up

50$:	bsbb	100$			; go count for a single volume

70$:	movl	#1,r0			; set success
	brb	90$			; go return

80$:	movzwl	#ss$_notfiledev,r0	; set error status
90$:	setipl	#0			; lower IPL
	ret				; and return to caler
;
; count the FCB's and WCB's
;
100$:	movl	vcb$l_fcbfl(r6),r8	; get address of the first FCB
	bneq	110$			; xfer if initialized
	rsb				; else assume not initialized
;
110$:	cmpl	r8,r6			; all FCB's processed?
	beql	150$			; xfer if all processed
	tstw	fcb$w_acnt(r8)		; active?
	beql	140$			; xfer if inactive
	tstw	fcb$w_segn(r8)		; extension FCB?
	bneq	140$			; ignore if so
	incl	fcb_count		; else count one more
	movab	fcb$l_wlfl(r8),r0	; get WCB listhead
	movl	(r0),r1			; get address of the first WCB
	beql	140$			; xfer if none
115$:	cmpl	r1,r0			; more to do?
	beql	140$			; xfer if not
	bbc	#wcb$v_cathedral,wcb$b_access(r1),120$	; xfer if not Cathedral
	cmpl	wcb$l_stvbn(r1),#1	; else check for primary window
	bneq	130$			; xfer if not primary
120$:	incl	wcb_count		; else count window
130$:	movl	wcb$l_wlfl(r1),r1	; get address of the next window
	brb	115$			; go check for the end
140$:	movl	fcb$l_fcbfl(r8),r8	; get address of the next FCB
	brw	110$			; go check for the end
150$:	rsb				; return with updated counts

	.sbttl	save_dev_info -- save device information
;---
;
;	This kernel mode routine saves the FIB's corresponding to a
;	specified device in a dynamic buffer for later display.
;
; Inputs:
;
;	4(ap) = Channel number of assigned device 
;
; Outputs:
;
;	fcb_buffer is filled with FCB's for device
;	fcb_length = Length of fcb_buffer filled
;---

save_dev_info:
	.word	^m<r2,r3,r4,r5,r6,r7,r8,r9,r10,r11>

	movzwl	4(ap),r0		; get channel number
	jsb	g^ioc$verifychan	; verify the channel number
	blbc	r0,90$			; branch on error
	movl	ccb$l_ucb(r1),r1	; get UCB address
	cmpb	ucb$b_devclass(r1),#dc$_disk	; is this a disk?
	bneq	80$			; branch if not
	setipl	#ipl$_synch		; and lock FCB's in place
;
;	Search all UCB's in the relative volume list
;
	movl	ucb$l_vcb(r1),r6	; Address of first VCB
	beql	80$			; error if none
	movl	r1,r0			; Put UCB address in place
	tstw	vcb$w_rvn(r6)		; Is this a multiple disk volume?
	beql	50$			; branch if not
	movl	vcb$l_rvt(r6),r9	; Get address of RVT
	beql	80$			; error if none
	cmpb	rvt$b_type(r9),#dyn$c_rvt ; Is it really an RVT?
	bneq	80$			; Error if not
	movzbl	rvt$b_nvols(r9),r10	; Get number of volumes
	movab	rvt$l_ucblst(r9),r9	; Address of list of UCB addresses
10$:	movl	(r9)+,r6		; Get next UCB in list
	beql	20$			; Skip if this RVN is dismounted
	cmpb	ucb$b_type(r6),#dyn$c_ucb ; Is it really a UCB?
	bneq	80$			; Error if not
	movl	r6,r0			; save the UCB address
	movl	ucb$l_vcb(r6),r6	; Get address of VCB
	beql	80$			; Error if none
	bsbb	save_all_fcbs		; Save all FCB's for this volume
20$:	sobgtr	r10,10$			; Loop until we reach last volume
	brb	70$			; Exit with success

50$:	bsbb	save_all_fcbs		; Save all FCB's on single volume

70$:	movl	#1,r0			; success
	brb	90$

80$:	movzwl	#ss$_notfiledev,r0	; Not a disk device
90$:	setipl	#0			; lower IPL
	ret				; and exit

	.sbttl	save_all_fcbs	Save all FCB's for a volume
;---
;
;	Save all the FCB's for this device whose access count NE 0
;
; Inputs:
;
;	R6 = Address of VCB
;	R0 = Address of UCB
;
; Outputs:
;
;	fcb_length = Updated length of stuff stored in fcb_buffer
;
;	r0-r5, r7-r8 destroyed.
;---

save_all_fcbs:
	movl	fcb_length,r7		; Pickup length already stored
	movab	@fcb_buffer[r7],r3	; Address to store FCB's
	movl	vcb$l_fcbfl(r6),r8	; Address of first FCB
	bneq	10$			; if non-zero, VCB is initialized
	brw	120$			; else return now, not initialized
;
;	The first fcb entry for each disk is a dummy fcb, containing data
;	which will later be used to construct a device string.
;
10$:	movl	r0,r5			; put UCB address in place
	movzwl	#fcb$c_length-8,r0	; give length
	moval	8(r3),r1		; and address of output buffer
	movl	r1,4(r3)		; also put this into the descriptor
	jsb	ioc$cvt_devnam		; then call routine to return dev name
	movl	r1,(r3)			; put actual length in place
	addl2	#fcb$c_length,r7	; skip to next fcb cell
	movab	@fcb_buffer[r7],r3	; and recompute address to store FCB
;
20$:	cmpl	r8,r6			; end of list?
	bneq	30$			; xfer if more to come
	brw	120$			; else i'm dome with this volume
30$:	tstw	fcb$w_acnt(r8)		; Anybody accessing this file?
	bneq	40$			; xfer if not active
	brw	110$			; else go get the next one
40$:	tstw	fcb$w_segn(r8)		; Is this an extension header FCB?
	beql	45$			; skip if not
	brw	110$			; else ignore it
45$:	movc	#fcb$c_length,(r8),(r3)	; Add to accum. FCB list
	addl	#fcb$c_length,r7	; Increment length in buffer
	clrq	fcb$l_wlfl-fcb$c_length(r3) ; Preset WCB list to zero
	movab	fcb$l_wlfl(r8),r0	; Get address of WCB listhead
	movl	(r0),r1			; Get address of first WCB
	beql	110$			; branch if zero
50$:	cmpl	r1,r0			; Empty WCB list?
	beql	110$			; skip if so
	movl	wcb_length,r2		; else get current length of list
	movab	@wcb_buffer[r2],r4	; calculate actual buffer address
60$:	bbc	#wcb$v_cathedral,wcb$b_access(r1),70$	; xfer if not cathedral
	cmpl	wcb$l_stvbn(r1),#1	; else check for a primary window
	bneq	100$			; xfer if not primary
70$:	movl	wcb$l_pid(r1),(r4)	; else save PID
	movl	#1,4(r4)		; save the window count
	movzwl	wcb$w_size(r1),8(r4)	; save the window size
	movzbl	wcb$b_access(r1),12(r4)	; save access status
	movl	r1,r2			; copy address for later
80$:	movl	wcb$l_link(r2),r2	; get the address of the next segment
	beql	90$			; xfer if the last
	incl	4(r4)			; else count one more window segment
	movzwl	wcb$w_size(r2),r5	; get the size of the window
	addl2	r5,8(r4)		; total it up
	brb	80$			; go get the next segment (if any)
90$:	movab	fcb$l_wlbl-fcb$c_length(r3),r5	; set address of count
	incl	(r5)			; one more block
	cmpl	(r5),#1			; is it the first?
	bneq	95$			; xfer if not
	movl	r4,-4(r5)		; else save address of first block
95$:	addl2	#16,wcb_length		; advance to the next block
	cmpl	wcb_length,wcb_count	; too much?
	bgeq	120$			; xfer if so...finish up
100$:	movl	wcb$l_wlfl(r1),r1	; else get the next in line
	brb	50$			; go check for more
110$:	movl	fcb$l_fcbfl(r8),r8	; Skip to next FCB
	cmpl	r7,fcb_count		; reached the upper limit?
	bgeq	120$			; stop if so
	brw	20$
120$:	movl	r7,fcb_length		; Store length actually in buffer
	rsb

	.sbttl	display_info, Display all files from FCB list
;---
;
;	This routine displays a list of file specifications
;	given a list of FCB's
;
; Inputs:
;
;	fcb_buffer = Buffer holding FCB's for device
;	fcb_length = Number of bytes actually filled in fcb_buffer
;
; Outputs:
;
;	None
;---

display_info:
	.word	^m<r2,r6,r7>

	movl	fcb_buffer,r7		; Address of first FCB
	movl	fcb_length,r6		; Length of buffer left to process
	beql	80$			; Branch if none found
;
;	Check here to see if this "fcb" is actually a dummy, containing
;	the device descriptor and device string for the next unit.
;	In that case, the FCB forward pointer, instead of being a system
;	address (and therefore negative) will contain a small positive
;	number, which is the length of the device string.
;
5$:	tstl	(r7)			; check to see if system address
	blss	10$			; if negative, it's an FCB
6$:	movl	r7,r2			; use this descriptor for device name
	addl	#fcb$c_length,r7	; point to next FCB
	tstl	(r7)			; check to see if system address
	bgeq	6$			; if GEQ, then this is another
					; dummy fcb, so skip the present one
					; otherwise build disk header message
	subl	#128,sp			; allocate output storage
	pushl	sp			; build descriptor
	pushl	#128
	movl	sp,r3
	pushl	#0			; current date and time
	pushl	r2			; disk name descriptor
	$fao_s	disk,(r3),(r3)		; build the line
	pushl	r3			; output the line
	calls	#1,g^lib$put_output
	bisl2	#devi$m_file,devi$l_bitlis	; force a new header line
;
	subl	#fcb$c_length,r6	; adjust length of FCB buffer
	beql	80$			; if zero, finished
;
10$:	pushl	r7			; Address of local FCB
	pushl	r2			; Address of device descriptor
	calls	#2,display_file		; Display file information
	addl	#fcb$c_length,r7	; Skip to next FCB
	subl	#fcb$c_length,r6	; Decrement length left to do
	bneq	5$
80$:	movl	#1,r0
90$:	ret

	.sbttl	display_file, Display information on a single file
;---
;
;	This routine is called to display a single FCB
;
; Inputs:
;
;	4(ap) = Address of device name descriptor
;	8(ap) = Address of FCB in local memory
;
; Outputs:
;
;	None
;---

display_file:
	.word	^m<r2,r3,r4,r5,r7>

	jsb	get_filename		; get the filename
	blbs	r0,10$			; if success, continue
	brw	110$			; else exit
10$:	subl	#128,sp			; Allocate FAO buffer
	pushl	sp			; and descriptor of buffer
	pushl	#128
	movl	sp,r3			; r3 = Address of FAO buffer
	movq	fcb$l_wlfl(r7),r4	; r4 = address of WCB info blocks
					; r5 = number of WCB info blocks
	bneq	20$			; xfer if one there
	movab	null_wcblock,r4		; else set as a null block
	movl	#1,r5			; only one block
20$:	tstw	(r4)			; any PID obtained?
					; (installed files may set upper word
					; to shared WCB reference count)
	bneq	40$			; if so, then process normally

	bbs	#devi$v_syst, -		; check if system files wanted
		devi$l_bitlis,30$
	brw	100$			; branch if not wanted

30$:	clrl	process_name		; preset process name to null
	clrl	(r4)			; zero PID
	brb	60$			; and print it

					; handle normal files here
40$:	bbs	#devi$v_user, -		; check to see if user files wanted
		devi$l_bitlis,50$
	brw	100$			; branch if not
;
; 	Now to attempt a $GETJPI on the process which has the file open.
;	If the request fails, then the assumption is that the current
;	process did not have the right privilege (GROUP or WORLD) to
;	get information about the file's process -- and therefore should
;	not be allowed to see what files that process is accessing.
;
50$:	$getjpi_s pidadr=(r4),-		; Get process name
		itmlst=jpi_procnam
	blbs	r0,60$			; xfer if allowed
	brw	100$			; else skip this one
					; make output line for normal files
60$:	movw	#128,(r3)		; reset descriptor size
	pushl	r2			; set addr of file name descriptor
	movab	faofil,r1		; set control string address
	bbc	#devi$v_wind, -		; xfer if no window information
		devi$l_bitlis,75$
	movab	faowin,r1		; else set new control string
	pushl	8(r4)			; total size of windows
	pushab	nocath			; assume no cathedral windows
	bbc	#wcb$v_cathedral,12(r4),70$	; xfer if i got it right
	movab	cath,(sp)		; else set cathedral indicator
70$:	pushl	4(r4)			; total number of windows
75$:	pushl	(r4)			; PID of accesscor
	pushab	process_name		; address of the owner process name
	$fao_s	(r1),(r3),(r3)		; Generate output line
					; output the line
	bbcc	#devi$v_file, -		; branch if header already written
    		devi$l_bitlis,85$	; (notice re-use of devi$v_file)
	pushal	hedfil			; else output the header
	bbc	#devi$v_wind, -		; get correct header string
		devi$l_bitlis,80$
	moval	hedwin,(sp)
80$:	calls	#1,g^lib$put_output
85$:	pushl	r3			; Address of output line descriptor
	calls	#1,g^lib$put_output	; Output the expanded name string
100$:	addl2	#16,r4			; point to the next WCB block
	sobgtr	r5,105$			; skip if more
	brb	110$			; else go finish up
105$:	brw	20$			; go analyze this info block

110$:	movl	#1,r0
	ret

	.sbttl	get_filename, Get file name from FID
;---
;
;	This routine is called for each FCB, to extract the name of
;	the file.
;
; Inputs:
;
;	4(ap) = Address of device name descriptor
;	8(ap) = Address of FCB in local memory
;
; Outputs:
;
;	R0 = success/failure in finding file
;
;---

get_filename:
	popl	r5			; save return address
	movl	8(ap),r7		; get address of local FCB
	subl	#4,sp			; Allocate space for error return
	movl	sp,r3			; r3 = Address of error
	subl	#nam$c_maxrss,sp	; Allocate filespec buffer
	pushl	sp			; and descriptor of buffer
	movzwl	#nam$c_maxrss,-(sp)
	movl	sp,r2			; r2 = Address of filespec descriptor
	pushl	r3			; address for secondary error return
	pushl	#0			; don't know directory ID
	pushl	r2			; return length of filespec
	pushl	r2			; filespec descriptor
	pushab	fcb$w_fid(r7)		; Address of FID
	pushl	4(ap)			; Address of device name descriptor
	calls	#6,g^lib$fid_to_name	; Convert DID/FID to filespec
	blbc	r0,5$			; branch if in error
	movl	(r3),r0			; Check for secondary error
	blbc	r0,5$			; branch if secondary error
	pushr	#^m<r0,r1>		; save LOCC regs
	movq	(r2),r0			; get file name descriptor
	locc	#^a/:/,r0,(r1)		; get the end of the device name
	decl	r0			; one less byte
	incl	r1			; skip over colon
	movq	r0,(r2)			; save new descriptor
	popr	#^m<r0,r1>		; restore LOCC regs
	brb	20$			; go finish up
5$:	cmpw	r0,#ss$_nosuchfile	; check for "no such file"
	bneq	10$			; if not, process normally
	clrl	(r2)			; if no such file, leave name blank
	movzbl	#1,r0			; show success
	brb	20$			; and exit
10$:	movl	#nam$c_maxrss,(r2)	; Restore length of buffer
	$getmsg_s msgid=r0,msglen=(r2),bufadr=(r2),flags=#1 ; and get message
20$:	pushl	r5			; restore return address
	rsb				; and return

	.end
