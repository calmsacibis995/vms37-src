MODULE setact	(
		IDENT = 'V03-000',
    		ADDRESSING_MODE(EXTERNAL=GENERAL,
    				NONEXTERNAL=LONG_RELATIVE)
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	Set 
!
! ABSTRACT:
!
!	This module contains the action routines for SET FILE, SET DIRECTORY, 
!	and SET VOLUME.
!
! ENVIRONMENT:
!
!	Vax native, privileged user mode
!
!--
!
! AUTHOR:	Gerry Smith	 	CREATION DATE: 04-Aug-1981
!
! MODIFIED BY:
!
!	V03-005	GAS0047		Gerry Smith		15-Feb-1982
!		Only get the file name for SET FILE/ENTER=filename.
!		The $PARSE is moved to SETFILE, so that stickiness
!		can be applied with the input file.
!
!	V03-004	GAS0038		Gerry Smith		 2-Feb-1982
!		Add /GLOBAL_BUFFERS action routine for SET FILE.
!
!	V03-003	GAS0030		Gerry Smith		 1-Jan-1982
!		Add /RETENTION action routine, for SET VOLUME.
!
!	V03-002 GAS0026		Gerry Smith		18-Dec-1981
!		Use shared message file, and lower fatal messages to
!		simple error messages.
!
!	V03-001	GAS0021		Gerry Smith		30-Nov-1981
!		Allow zero values for group and member of UIC
!	
!**

LIBRARY	'SYS$LIBRARY:LIB';
LIBRARY 'SYS$LIBRARY:CLIMAC';
LIBRARY 'SYS$LIBRARY:TPAMAC';

STRUCTURE
    BBLOCK [O, P, S, E; N] =
    	[N]
    	(BBLOCK + O)<P,S,E>;

FORWARD ROUTINE
    					! Action routines for:
    acc_act,				! /ACCESSED		(VOLUME)
    back_act,				! /BACKUP		(FILE)
    noback_act,				! /NOBACKUP		(FILE)
    data_act,				! /DATA_CHECK		(VOLUME,FILE)
    enter_act,				! /ENTER		(FILE)
    erase_act,				! /ERASE_ON_DELETE	(FILE)
    noerase_act,			! /NOERASE_ON_DELETE	(FILE)
    exp_act,				! /EXPIRATION_DATE	(FILE)
    noexp_act,				! /NOEXPIRATION_DATE	(FILE)
    ext_act,				! /EXTENSION		(FILE,VOLUME)
    fprot_act,				! /FILE_PROTECTION	(VOLUME)
    gbuf_act,				! /GLOBAL_BUFFERS	(FILE)
    journal_act,			! /JOURNAL		(FILE)
    label_act,				! /LABEL		(VOLUME)
    owner_act,				! /OWNER_UIC		(ALL)
    retent_act,				! /RETENTION		(VOLUME)
    test_char,				! action routine used by retent_act
    user_act,				! /USER_NAME		(VOLUME)
    vprot_act,				! /PROTECTION		(VOLUME)
    vrsn_act,				! /VERSION_LIMIT	(DIRECTORY,FILE)
    window_act;				! /WINDOWS		(VOLUME)

EXTERNAL ROUTINE
    calculate_max,
    sys$fao,
    lib$tparse,
    lib$cvt_time,
    lib$cvt_dtime,
    lib$cvt_dtb;

!
! External data references
!
EXTERNAL
    rename_buf : VECTOR[nam$c_maxrss,BYTE],	! Name buffer for /ENTER
    file_name : VECTOR[2],			! File name descriptor
    file_rlf : BBLOCK[nam$c_bln],		! Related name block

    set$l_status,			! Status return for SET dispatcher
    set$a_cliwork;			! CLI work area in SET dispatcher

!
! Literal data definitions
!
LITERAL
    true = 1,
    false = 0;


!
! Define the qualifier flag bits used by all SET FILE/DIRECTORY/VOLUME
!
GLOBAL LITERAL
    $EQULST
	(QUAL_,,1,1,
	(access,),		! ACCESSED		(VOLUME)
	(backup,),		! BACKUP		(FILE)
	(nobackup,),		! NOBACKUP		(FILE)
	(confirm,),		! CONFIRM		(ALL)
	(data,),		! DATA_CHECK		(FILE, VOLUME)
	(enter,),		! ENTER			(FILE)
	(eof,),			! END_OF_FILE		(FILE)
	(erase,),		! ERASE_ON_DELETE	(FILE)
	(noerase,),		! NOERASE_ON_DELETE	(FILE)
	(expi,),		! EXPIRATION_DATE	(FILE)
	(exte,),		! EXTENSION		(FILE, VOLUME)
	(fprot,),		! FILE_PROTECTION	(VOLUME)
	(gbuf,),			! GLOBAL_BUFFERS	(FILE)
	(journal,),		! JOURNAL		(FILE)
	(label,),		! LABEL			(VOLUME)
	(log,),			! LOG			(ALL)
	(nodi,),		! NODIRECTORY		(FILE)
	(owner,),		! OWNER_UIC		(ALL)
    	(parent,),		! OWNER=PARENT		(FILE)
	(remove,),		! REMOVE		(FILE)
	(retent,),		! RETENTION		(VOLUME)
	(rprot,),		! RECORD_PROTECTION	(FILE, VOLUME)
	(trunc,),		! TRUNCATE		(FILE)
	(username,),		! USERNAME		(VOLUME)
	(vprot,),		! PROTECTION		(VOLUME)
	(vrsn,),		! VERSION_LIMIT		(FILE, DIRECTORY)
	(windows,));		! WINDOWS		(VOLUME)

!
! Define the DATA_CHECK option bits
!
GLOBAL LITERAL
    $EQULST
	(DATA_,,1,1,
	(read,),
	(noread,),
	(write,),
	(nowrite,));
!
! Define the JOURNAL option bits
!
GLOBAL LITERAL
    $EQULST
	(JRNL_,,1,1,
	(ai,),
	(noai,),
	(at,),
	(noat,),
	(bi,),
	(nobi,),
	(ru,),
	(noru,),
	(rum,),
	(norum,));
	


!
! Declare external references
!
EXTERNAL
    setfile$flags : BITVECTOR[32],		! Qualifier flags
    setfile$dflags : BITVECTOR[32],		! Data_check flag word
    setfile$jflags : BITVECTOR[32],		! Journal flag word
    acc_value,					! LRU value
    exp_value : BBLOCK[8],			! Expiration date
    exte_value,					! Extension quantity
    fprot_value,				! File_protection value
    gbuf_value,					! Global buffer count
    label_value : VECTOR[2],			! Volume label descriptor
    uic_value,					! Owner uic
    group,					! Group number
    member,					! Member number
    user_value : VECTOR[2],			! Username string descriptor
    retmin_value : VECTOR[2],			! Minimum retention time quadword
    retmax_value : VECTOR[2],			! Maximum retention time quadword
    vprot_value,				! Volume protection value
    vrsn_value,					! Version limit
    window_value;				! Window length


!
! Declare the error messages
!
EXTERNAL LITERAL
    set$_facility,			! SET facility code
    set$_operreq,			! OPER privilege required
    set$_writeerr;			! Error accessing file

!
! Define the TPARSE block
!
OWN
    tparse_block : BBLOCK[tpa$k_length0]	! TPARSE block
		   INITIAL(tpa$k_count0,
		    	   tpa$m_blanks OR
		    	   tpa$m_abbrev);


!
! TPARSE table for /DATA_CHECK options
!
$INIT_STATE (dc_state,dc_keys);

$STATE	(optstart,
	(tpa$_eos,tpa$_exit,,data_write,setfile$dflags),! default is WRITE
	(tpa$_lambda,getoption));			! fall thru to options

$STATE	(getoption,
	('READ',,,1^data_read,setfile$dflags),		! READ present
	('WRITE',,,1^data_write,setfile$dflags),	! WRITE present
	('NOREAD',,,1^data_noread,setfile$dflags),	! NOREAD present
	('NOWRITE',,,1^data_nowrite,setfile$dflags));	! NOWRITE present

$STATE	(,
	(tpa$_eos,tpa$_exit),				! either end of line
	(',',getoption));				! or get rid of the comma


!
! TPARSE table for /OWNER_UIC option
!
$INIT_STATE (owner_state,owner_keys);

$STATE	(ownerstart,
    	('PARENT',tpa$_exit,,1^qual_parent,setfile$flags),	! Check for PARENT
    	('['),					! Look for square bracket
    	('<'));					! Or a squiggle

$STATE	(,
    	(tpa$_octal,,,,group));			! Get group number

$STATE	(,
    	(','));					! Get rid of the comma

$STATE	(,
    	(tpa$_octal,,,,member));		! Get member number

$STATE	(,
	(']'),					! Get end bracket
	('>'));

$STATE	(,
	(tpa$_eos,tpa$_exit));			! Clean-up

!
! TPARSE table for /JOURNAL option
!
$INIT_STATE (journal_state, journal_keys);

$STATE	(getjopts,
	('AI',,,1^jrnl_ai,setfile$jflags),	! AI journaling
	('AT',,,1^jrnl_at,setfile$jflags),	! AT journaling
	('BI',,,1^jrnl_bi,setfile$jflags),	! BI journaling
	('NOAI',,,1^jrnl_noai,setfile$jflags),	! No AI journaling
	('NOAT',,,1^jrnl_noat,setfile$jflags),	! No AT journaling
	('NOBI',,,1^jrnl_nobi,setfile$jflags),	! No BI journaling
	('NORU',,,1^jrnl_noru,setfile$jflags),	! No RU journaling
	('NORUM',,,1^jrnl_norum,setfile$jflags),! No RUM journaling
	('RU',,,1^jrnl_ru,setfile$jflags),	! RU journaling
	('RUM',,,1^jrnl_rum,setfile$jflags));	! RUM journaling

$STATE	(,			
	(tpa$_eos,tpa$_exit),			! Either the end
	(',',getjopts));			! Or more to come

!
! TPARSE table for protection
!

$INIT_STATE (pro_state, pro_keys);

$STATE	(NEXTPRO,
	('SYSTEM', SYPR,, %X'000F0000', fprot_value),
	('OWNER',  OWPR,, %X'00F00000', fprot_value),
	('GROUP',  GRPR,, %X'0F000000', fprot_value),
	('WORLD',  WOPR,, %X'F0000000', fprot_value)
	);

$STATE	(SYPR,
	(':'),
	('='),
	(TPA$_LAMBDA, ENDPRO)
	);

$STATE	(SYPR0,
	('R', SYPR0,, %X'0001', fprot_value),
	('W', SYPR0,, %X'0002', fprot_value),
	('E', SYPR0,, %X'0004', fprot_value),
	('P', SYPR0,, %X'0004', fprot_value),
	('D', SYPR0,, %X'0008', fprot_value),
	('L', SYPR0,, %X'0008', fprot_value),
	(TPA$_LAMBDA, ENDPRO)
	);

$STATE	(OWPR,
	(':'),
	('='),
	(TPA$_LAMBDA, ENDPRO)
	);

$STATE	(OWPR0,
	('R', OWPR0,, %X'0010', fprot_value),
	('W', OWPR0,, %X'0020', fprot_value),
	('E', OWPR0,, %X'0040', fprot_value),
	('P', OWPR0,, %X'0040', fprot_value),
	('D', OWPR0,, %X'0080', fprot_value),
	('L', OWPR0,, %X'0080', fprot_value),
	(TPA$_LAMBDA, ENDPRO)
	);

$STATE	(GRPR,
	(':'),
	('='),
	(TPA$_LAMBDA, ENDPRO)
	);

$STATE	(GRPR0,
	('R', GRPR0,, %X'0100', fprot_value),
	('W', GRPR0,, %X'0200', fprot_value),
	('E', GRPR0,, %X'0400', fprot_value),
	('P', GRPR0,, %X'0400', fprot_value),
	('D', GRPR0,, %X'0800', fprot_value),
	('L', GRPR0,, %X'0800', fprot_value),
	(TPA$_LAMBDA, ENDPRO)
	);

$STATE	(WOPR,
	(':'),
	('='),
	(TPA$_LAMBDA, ENDPRO)
	);

$STATE	(WOPR0,
	('R', WOPR0,, %X'1000', fprot_value),
	('W', WOPR0,, %X'2000', fprot_value),
	('E', WOPR0,, %X'4000', fprot_value),
	('P', WOPR0,, %X'4000', fprot_value),
	('D', WOPR0,, %X'8000', fprot_value),
	('L', WOPR0,, %X'8000', fprot_value),
	(TPA$_LAMBDA, ENDPRO)
	);

$STATE	(ENDPRO,
	(',', NEXTPRO),
	(TPA$_EOS, TPA$_EXIT)
	);

!
! Tparse table for /RETENTION option
!
$INIT_STATE (ret_state, ret_keys)

$STATE	(retstart,
	((get_delta),,,,retmin_value));		! Get the first delta string

$STATE	(,
	(','),					! If a comma, get next string
	(tpa$_eos,tpa$_exit));			! Else exit

$STATE	(,
	((get_delta),,,,retmax_value));		! Get the next delta string

$STATE	(,
	(tpa$_eos,tpa$_exit));			! And exit

$STATE	(get_delta,
	(tpa$_any,get_delta,test_char),		! Get next character in delta string
	(tpa$_lambda,tpa$_exit));

GLOBAL ROUTINE acc_act (option_block, callback) =
!++
!
! This is the action routine for the /ACCESSED qualifier.  It first checks to 
! make sure that the process has OPER privilege.  If so, then the ACCESS value
! is obtained and bounds checking is performed on it.
!
!--
BEGIN

OWN privs : BBLOCK[8];		! Place to store the process privileges

LOCAL
    status,			! Status return
    desc : BBLOCK[dsc$c_s_bln];	! General descriptor

MAP option_block : REF BBLOCK;	! Define the CLI block

!
! Call $SETPRV to get the current privileges of the process.  If the process
! does not have OPER, then signal an error and stop.
!
IF NOT (status = $SETPRV(ENBFLG = 1,		! Enable
    			 PRVADR = 0,		! No new privileges
    			 PRMFLG = 1,		! Get current privileges
    			 PRVPRV = privs))
THEN SIGNAL_STOP(.status);

IF NOT .privs[prv$v_oper] THEN SIGNAL_STOP(set$_operreq);

!
! The process has the correct privilege, so go ahead and get the value
!

acc_value = 3;			! Set up the default

!
! If a value was specified, use it; otherwise, use the default.
!
IF .option_block[cli$w_qdvalsiz] EQL 0
THEN RETURN true;

!
! Convert the value
!
IF NOT (status = LIB$CVT_DTB(.option_block[cli$w_qdvalsiz],
			     .option_block[cli$a_qdvaladr],
			     acc_value))
THEN SIGNAL_STOP(set$_facility^16 + shr$_syntax + sts$k_error,	! Signal a syntax error
		 1,
		 option_block[cli$q_qdvaldesc],
		 .status)
ELSE
    BEGIN
    IF NOT (.acc_value GEQ 0		! Check that value is in range
		AND
	    .acc_value LEQ 255)
    THEN SIGNAL_STOP(set$_facility^16 + shr$_syntax + sts$k_error,	! If not, exit with an error.
		     1,
		     option_block[cli$q_qdvaldesc],
		     set$_facility^16 + shr$_valerr + sts$k_error);
    END;
RETURN true;
END;

GLOBAL ROUTINE back_act =
!++
!
! This is the action routine for the /BACKUP qualifier.  It simply
! sets the correct bit in the flags word.
!
!--
BEGIN
setfile$flags[qual_backup] = true;
RETURN true;
END;

GLOBAL ROUTINE noback_act =
!++
!
! This is the action routine for the /NOBACKUP qualifier.  It simply
! sets the correct bit in the flags word.
!
!--
BEGIN
setfile$flags[qual_nobackup] = true;
RETURN true;
END;

GLOBAL ROUTINE data_act (option_block,callback) =
!++
!
! This is the action routine for the /DATA_CHECK qualifier.  It checks to see
! if any options were set.  If not, it defaults to DATA_CHECK=WRITE.
!
!--
BEGIN

LOCAL
    status;

MAP
    option_block : REF BBLOCK;

IF .option_block[cli$w_qdvalsiz] EQL 0
THEN setfile$dflags[data_write] = true

ELSE
    BEGIN
    tparse_block[tpa$l_stringcnt] = .option_block[cli$w_qdvalsiz];
    tparse_block[tpa$l_stringptr] = .option_block[cli$a_qdvaladr];
    IF NOT (status = lib$tparse(tparse_block,
	    dc_state,dc_keys))
    THEN 
	BEGIN
	SIGNAL(	set$_facility^16 + shr$_syntax + sts$k_error,
		1,
		option_block[cli$q_qdvaldesc],
		.status);
	RETURN .status;
	END;
    END;
RETURN true;
END;

GLOBAL ROUTINE enter_act (option_block,callback) =
!++
!
! This is the action routine for the /ENTER qualifier.
! The new synonym is collected.
!
!--
BEGIN

MAP
    option_block : REF BBLOCK;


!
! Get the expanded file string
!

CH$MOVE(.option_block[cli$w_qdvalsiz],			! Move file string
	.option_block[cli$a_qdvaladr],
	rename_buf);

file_name[0] = .option_block[cli$w_qdvalsiz];		! Store length
file_name[1] = .option_block[cli$a_qdvaladr];		! and address

RETURN true;
END;

GLOBAL ROUTINE erase_act =
!++
!
! This is the action routine for the /ERASE qualifier.  It simply 
! sets the correct bit in the flags word.
!
!--
BEGIN
setfile$flags[qual_erase] = true;
RETURN true;
END;

GLOBAL ROUTINE noerase_act =
!++
!
! This is the action routine for the /NOERASE qualifier.  It simply 
! sets the correct bit in the flags word.
!
!--
BEGIN
setfile$flags[qual_noerase] = true;
RETURN true;
END;

GLOBAL ROUTINE exp_act (option_block,callback) =
!++
!
! This is the action routine for the /EXPIRATION qualifier.
! If no value is given, exit with a syntax error.
!
!--
BEGIN

LOCAL
    status,
    desc : BBLOCK[dsc$c_s_bln];

MAP 
    option_block : REF BBLOCK;		! Define the CLI options block
		    
!
! Get the date, signalling a syntax error if no good.
!

desc[dsc$w_length] = .option_block[cli$w_qdvalsiz];
desc[dsc$a_pointer] = .option_block[cli$a_qdvaladr];
IF NOT (status = LIB$CVT_TIME(desc,exp_value))
THEN 
    BEGIN
    SIGNAL_STOP(  set$_facility^16 + shr$_syntax + sts$k_error,
    		  1,
		  option_block[cli$q_qdvaldesc],
		  .status);
    RETURN .status;
    END
ELSE RETURN true;
END;

GLOBAL ROUTINE noexp_act =
!++
!
! This is the action routine for the /NOEXPIRATION_DATE qualifier.
! It supplies an expiration date of zero.
!
!--
BEGIN

CH$FILL(0,8,exp_value);			! Zero out the expiration date
setfile$flags[qual_expi] = true;	! Set the expiration flag on

RETURN true;
END;

GLOBAL ROUTINE ext_act (option_block,callback) =
!++
!
! This is the action routine for the /EXTENSION qualifier.  If no value is
! specified, the default value of 0 is used.
!
!--
BEGIN

LOCAL
    status,
    desc : BBLOCK[dsc$c_s_bln];

MAP 
    option_block : REF BBLOCK;		! Define the CLI options block

exte_value = 0;				! Set up default

!
! See if a value was specified.  If not, then use the default.
!
IF .option_block[cli$w_qdvalsiz] EQL 0
THEN RETURN true;

!
! If the value is there, convert it and return
!
IF NOT (status = LIB$CVT_DTB(.option_block[cli$w_qdvalsiz],
			     .option_block[cli$a_qdvaladr],
			     exte_value))
THEN 
    BEGIN
    SIGNAL_STOP(set$_facility^16 + shr$_syntax + sts$k_error,
		1,
		option_block[cli$q_qdvaldesc],
		.status);
    END
ELSE
    BEGIN
    IF NOT (.exte_value GEQ 0
    		AND
    	    .exte_value LEQ 65535)
    THEN SIGNAL_STOP(set$_facility^16 + shr$_syntax + sts$k_error,
		     1,
		     option_block[cli$q_qdvaldesc],
		     set$_facility^16 + shr$_valerr + sts$k_error);
    END;

RETURN true;
END;

GLOBAL ROUTINE fprot_act (option_block,callback) =
!++
!
! This is the action routine for the /FILE_PROTECTION qualifier of
! SET VOLUME.  The protection is parsed and stored away.  If the
! protection is not valid, a fatal error message is issued.
!
!--
BEGIN

LOCAL status;				! Status return

MAP option_block : REF BBLOCK;		! Define the option block

!
! Stuff the TPARSE block with the string
!
tparse_block[tpa$l_stringcnt] = .option_block[cli$w_qdvalsiz];
tparse_block[tpa$l_stringptr] = .option_block[cli$a_qdvaladr];

fprot_value = 0;			! Initialize file protection value

!
! Now to parse the protection given.  When finished, FPROT_VALUE will
! have the following values:
!
! FPROT_VALUE[low_word] = protection value
! FPROT_VALUE[high_word] = group mask i.e. SYSTEM, OWNER, GROUP, WORLD
!
IF NOT (status = LIB$TPARSE(tparse_block,
			    pro_state,
			    pro_keys))
THEN SIGNAL_STOP(set$_facility^16 + shr$_syntax + sts$k_error,
		 1,
		 option_block[cli$q_qdvaldesc],
		 .status);
RETURN true;
END;

GLOBAL ROUTINE gbuf_act (option_block,callback) =
!++
!
! This is the action routine for the GLOBAL_BUFFER qualifier.  The number of
! global buffers desired is collected.
!
!--
BEGIN

LOCAL
    status,
    desc : BBLOCK[dsc$c_s_bln];

MAP 
    option_block : REF BBLOCK;		! Define the CLI options block

!
! Convert the value given (in ASCII) to a numeric value.
!
IF NOT (status = LIB$CVT_DTB(.option_block[cli$w_qdvalsiz],
			     .option_block[cli$a_qdvaladr],
			     gbuf_value))
THEN 
    BEGIN
    SIGNAL_STOP(set$_facility^16 + shr$_syntax + sts$k_error,
		1,
		option_block[cli$q_qdvaldesc],
		.status);
    END
ELSE
    BEGIN
!
! If the value is not a word or less in length, signal an error.
!
    IF NOT (.gbuf_value GEQ 0 AND .gbuf_value LEQ 65535)
    THEN SIGNAL_STOP(set$_facility^16 + shr$_syntax + sts$k_error,
		     1,
		     option_block[cli$q_qdvaldesc],
		     set$_facility^16 + shr$_valerr + sts$k_error);
    END;

RETURN true;
END;

GLOBAL ROUTINE journal_act (option_block,callback) =
!++
!
! This is the action routine for the /JOURNAL qualifier.  Based on the
! journal types set, specific journaling bits are set.
!
!--
BEGIN

LOCAL
    status;

MAP
    option_block : REF BBLOCK;

!
! Use TPARSE to parse the journal list.
!

tparse_block[tpa$l_stringcnt] = .option_block[cli$w_qdvalsiz];
tparse_block[tpa$l_stringptr] = .option_block[cli$a_qdvaladr];

IF NOT (status = LIB$TPARSE(tparse_block, journal_state, journal_keys))
THEN SIGNAL_STOP(set$_facility^16 + shr$_syntax + sts$k_error,
		 1,
		 option_block[cli$q_qdvaldesc],
		 .status);
!
! If both RU and RUM were specified, then signal a syntax error.
!

IF (.setfile$jflags[jrnl_ru] AND .setfile$jflags[jrnl_rum])
THEN SIGNAL_STOP(set$_facility^16 + shr$_syntax + sts$k_error,
		 1,
		 option_block[cli$q_qdvaldesc],
		 set$_facility^16 + shr$_confqual + sts$k_error);

RETURN true;
END;

GLOBAL ROUTINE label_act (option_block, callback) =
!++
!
! This is the action routine for the LABEL qualifier of SET VOLUME.  It
! retrieves the value of the string, checks that it is no longer than
! twelve characters, and stores length and location in LABEL_VALUE.
!
!--
BEGIN

LOCAL status;				! Status return

MAP option_block : REF BBLOCK;		! Define the cli block

!
! Check that the string is no longer than twelve characters.
!
IF .option_block[cli$w_qdvalsiz] GTR 12
THEN SIGNAL_STOP(set$_facility^16 + shr$_syntax + sts$k_error,
		 1,
		 option_block[cli$q_qdvaldesc],
		 set$_facility^16 + shr$_valerr + sts$k_error);
!
! Store the location and length in LABEL_VALUE
!
label_value[0] = .option_block[cli$w_qdvalsiz];
label_value[1] = .option_block[cli$a_qdvaladr];

RETURN true;
END;

GLOBAL ROUTINE owner_act (option_block,callback) =
!++
!
! This is the action routine for the OWNER_UIC qualifier.  The input is
! parsed to obtain the group and member numbers of the UIC.
!
!--
BEGIN

LOCAL
    status;				! Status

MAP
    option_block : REF BBLOCK;

uic_value = 0;				! Set the UIC value to zero initially

!
! Check to see if UIC specified.  If not, use current process UIC.
!
IF .option_block[cli$w_qdvalsiz] EQL 0
THEN $GETJPI(ITMLST = UPLIT(WORD(4,jpi$_uic),
				 uic_value,
				 0,
				 0))
ELSE
    BEGIN
    tparse_block[tpa$l_stringcnt] = .option_block[cli$w_qdvalsiz];
    tparse_block[tpa$l_stringptr] = .option_block[cli$a_qdvaladr];
    IF NOT (status = lib$tparse(tparse_block,
				owner_state,
				owner_keys))
    THEN SIGNAL_STOP(set$_facility^16 + shr$_syntax + sts$k_error,
		     1,
		     option_block[cli$q_qdvaldesc]);
    IF NOT .setfile$flags[qual_parent]
    THEN
	BEGIN
	IF NOT ((.group LEQ %O'377' AND .group GEQ 0)
		    AND
		(.member LEQ %O'377' AND .member GEQ 0))
	THEN SIGNAL_STOP(set$_facility^16 + shr$_syntax + sts$k_error,
			 1,
			 option_block[cli$q_qdvaldesc],
		    	 set$_facility^16 + shr$_valerr + sts$k_error)
	ELSE uic_value = .group^16 + .member;
	END;
    END;

RETURN true;
END;

GLOBAL ROUTINE retent_act (option_block,callback) =
!++
!
! This is the action routine for the /RETENTION qualifier.
! The minimum retention value must be given.  If no maximum retention value is 
! specified, a value of twice the minimum (but no more than a week more than 
! the minimum) is used.
!
!--
BEGIN

LOCAL
    status,
    temp_desc : BBLOCK[dsc$c_s_bln];

MAP 
    option_block : REF BBLOCK;		! Define the CLI options block


!
! Parse the input, to obtain the minimum and maximum retention times.
!

CH$FILL(0, 8, retmin_value);		! Zero minimum value
CH$FILL(0, 8, retmax_value);		! Zero maximum value

tparse_block[tpa$l_stringcnt] = .option_block[cli$w_qdvalsiz];
tparse_block[tpa$l_stringptr] = .option_block[cli$a_qdvaladr];
IF NOT (status = lib$tparse(tparse_block, ret_state, ret_keys))
THEN
    BEGIN
    SIGNAL(set$_facility^16 + shr$_syntax + sts$k_error,
	   1,
	   option_block[cli$q_qdvaldesc]);
    RETURN false;			! If error in parse, return false
    END;

!
! If a minimum value was not supplied, signal an error
!

IF .retmin_value[0] EQL 0
THEN
    BEGIN
    SIGNAL(set$_facility^16 + shr$_syntax + sts$k_error,
    	   1,
    	   option_block[cli$q_qdvaldesc]);
    RETURN false;
    END;

!
! Convert the minimum retention value to 64-bit system delta time format
!
IF NOT (status = LIB$CVT_DTIME(retmin_value, temp_desc))
THEN
    BEGIN
    SIGNAL(set$_facility^16 + shr$_syntax + sts$k_error,
    	   1,
    	   retmin_value,
    	   .status);
    RETURN false;
    END
ELSE CH$MOVE(8, temp_desc, retmin_value);	! If no error, put 64-bit 
    						! delta time in place

!
! If a maximum value was supplied, then convert it in the same way.
!

IF .retmax_value[0] NEQ 0
THEN
    BEGIN
    IF NOT (status = LIB$CVT_DTIME(retmax_value, temp_desc))
    THEN
    	BEGIN
    	SIGNAL(set$_facility^16 + shr$_syntax + sts$k_error,
	       1,
	       retmax_value,
	       .status);
	RETURN .status;
	END
    ELSE CH$MOVE(8, temp_desc, retmax_value);
    END

!
! If no maximum value was supplied, then use twice the minimum value.  If this 
! value is greater than a week, use only a week.
!

ELSE calculate_max(retmin_value, retmax_value);

RETURN true;
END;

ROUTINE test_char =
!++
!
! This routine is used by TPARSE to process the /RETENTION values.
! 
! NOTE that this routine references the Argument Pointer (AP) directly,
! due to the fact that TPARSE does not follow the calling standard.
!
!--

BEGIN

BUILTIN AP;					! Declare the argument pointer

LOCAL
    ptr,
    char : BYTE;

ptr = .ap + $BYTEOFFSET(tpa$b_char);		! Look at the character just read
char = CH$RCHAR(.ptr);

IF .char EQL ','
THEN RETURN false				! If a comma, then end of string
ELSE RETURN true;				! Else continue processing

END;

GLOBAL ROUTINE user_act (option_block, callback) =
!++
!
! This is the action routine for the USER_NAME qualifier of SET VOLUME.  It
! retrieves the value of the string, checks that it is no longer than
! twelve characters, and stores a descriptor pointing to it.
!
!--
BEGIN

OWN user_label : VECTOR[12,BYTE];	! Place to put process username

LOCAL status;				! Status return

MAP option_block : REF BBLOCK;		! Define the cli block

!
! If no username was specified, use the current process username.
!
IF .option_block[cli$w_qdvalsiz] EQL 0
THEN
    BEGIN
    $GETJPI(ITMLST = UPLIT(WORD(4, jpi$_username),	! Get the username
    			   user_label,			! Store it here
    			   user_value[0],		! Store length here
    			   0));
    user_value[1] = user_label;
    END

ELSE
    BEGIN

!
! Check that the string is no longer than twelve characters.
!
    IF .option_block[cli$w_qdvalsiz] GTR 12
    THEN SIGNAL_STOP(set$_facility^16 + shr$_syntax + sts$k_error,
		     1,
		     option_block[cli$q_qdvaldesc],
		     set$_facility^16 + shr$_valerr + sts$k_error);
!
! Record the length and location in USER_VALUE.
!
    user_value[0] = .option_block[cli$w_qdvalsiz];
    user_value[1] = .option_block[cli$a_qdvaladr];
    END;

RETURN true;
END;

GLOBAL ROUTINE vprot_act (option_block, callback) = 
!++
!
! This is the action routine for the PROTECTION qualifier of SET VOLUME.
! The protection is parsed and stored.
!
!--
BEGIN

LOCAL
    status,			! Status return
    temp;			! Temporary place for FPROT_VALUE

MAP option_block : REF BBLOCK;	! Define CLI block

!
! Stuff the TPARSE block with the string
!
tparse_block[tpa$l_stringcnt] = .option_block[cli$w_qdvalsiz];
tparse_block[tpa$l_stringptr] = .option_block[cli$a_qdvaladr];

temp = .fprot_value;			! Save contents of FPROT
fprot_value = 0;			! Initialize file protection value

!
! Now to parse the protection given.  When finished, FPROT_VALUE will
! have the following values:
!
! FPROT_VALUE[low_word] = protection value
! FPROT_VALUE[high_word] = group mask i.e. SYSTEM, OWNER, GROUP, WORLD
!
IF NOT (status = LIB$TPARSE(tparse_block,
			    pro_state,
			    pro_keys))
THEN SIGNAL_STOP(set$_facility^16 + shr$_syntax + sts$k_error,
		 1,
		 option_block[cli$q_qdvaldesc],
		 .status);

vprot_value = .fprot_value;		! Store VPROT value
fprot_value = .temp;			! Restore FPROT value

RETURN true;
END;

GLOBAL ROUTINE vrsn_act (option_block,callback) =
!++
!
! This is the action routine for the VERSION_LIMIT qualifier.  The value of
! the version limit is collected.
!
!--
BEGIN

LOCAL
    status,
    desc : BBLOCK[dsc$c_s_bln];

MAP 
    option_block : REF BBLOCK;		! Define the CLI options block

vrsn_value = 32767;			! Preset to no limit

!
! See if a value was present.  If yes, use it.  Otherwise, use default
!
IF .option_block[cli$w_qdvalsiz] EQL 0 
THEN RETURN true;

IF NOT (status = LIB$CVT_DTB(.option_block[cli$w_qdvalsiz],
			     .option_block[cli$a_qdvaladr],
			     vrsn_value))
THEN 
    BEGIN
    SIGNAL_STOP(set$_facility^16 + shr$_syntax + sts$k_error,
		1,
		option_block[cli$q_qdvaldesc],
		.status);
    END
ELSE
    BEGIN
    IF NOT (.vrsn_value GEQ 0 AND .vrsn_value LEQ 65535)
    THEN SIGNAL_STOP(set$_facility^16 + shr$_syntax + sts$k_error,
		     1,
		     option_block[cli$q_qdvaldesc],
		     set$_facility^16 + shr$_valerr + sts$k_error);
    END;

RETURN true;
END;

GLOBAL ROUTINE window_act (option_block, callback) =
!++
!
! This is the action routine for the /WINDOWS qualifier.  It retrieves the 
! value and performs bounds checking on it.
!
!--
BEGIN

LOCAL
    status,			! Status return
    desc : BBLOCK[dsc$c_s_bln];	! General descriptor

MAP option_block : REF BBLOCK;	! Define the CLI block

window_value = 7;			! Set up the default

!
! If a value was specified, use it; otherwise, use the default.
!
IF .option_block[cli$w_qdvalsiz] EQL 0
THEN RETURN true;

!
! Convert the value
!
IF NOT (status = LIB$CVT_DTB(.option_block[cli$w_qdvalsiz],
			     .option_block[cli$a_qdvaladr],
			     window_value))
THEN SIGNAL_STOP(set$_facility^16 + shr$_syntax + sts$k_error,	! Signal a syntax error
		 1,
		 option_block[cli$q_qdvaldesc],
		 .status)
ELSE
    BEGIN
    IF NOT (.window_value GEQ 7		! Check that value is in range
		AND
	    .window_value LEQ 80)
    THEN SIGNAL_STOP(set$_facility^16 + shr$_syntax + sts$k_error,	! If not, exit with an error.
		     1,
		     option_block[cli$q_qdvaldesc],
		     set$_facility^16 + shr$_valerr + sts$k_error);
    END;
RETURN true;
END;

END
ELUDOM
