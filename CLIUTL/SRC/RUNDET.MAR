	.TITLE	RUNDET - CREATE A STARLET PROCESS
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY:	STARLET DCL CLI
;
; ABSTRACT:	CREATE AND EXECUTE A STARLET PROCESS
;
;
; ENVIRONMENT:	NATIVE MODE USER CODE
;
; AUTHOR:	C. A. MONIA, CREATION DATE: 08-AUG-77
;
; MODIFIED BY:
;
;	V003	TMH0003		Tim Halvorsen		04-Feb-1982
;		Remove reference to CLI$K_ symbols at assembly time.
;
;	V002	MSH0001		Maryann S. Hinden	09-Nov-1981
;		Add qualifiers /EXTENT and /ENQUEUE_LIMIT; also new
;		privilege SYSLCK
;
;	V001	TMH0001		Tim Halvorsen	08-Jun-1981
;		If /TIME_LIMIT is specified without any other quotas
;		on the command line, make sure the quota block is passed
;		to $CREPRC.  Previously, the quota block was only passed
;		when at least one of the longword quotas were specified.
;--

	.SBTTL	DECLARATIONS
;
; MACRO LIBRARY CALLS
;
 
	$CLIDEF				; DEFINE CLI RUN PARAMETERS
	$CLIMSGDEF			; DEFINE CLI STATUS CODES
	$JPIDEF				; DEFINE JOB/PROCESS ITEMS
	$PQLDEF				; DEFINE PROCESS QUOTAS
	$PRVDEF				; DEFINE PRIVILEGE FLAGS
	$SSDEF				; DEFINE SYSTEM STATUS CODES
	$STSDEF				; DEFINE RETURNED STATUS FORMAT
 
;
; MACROS:
;
 
	.MACRO	CALLBAK	A1,A2
$$$=2
	.IF NB	A2
	PUSHAB	W^A2
$$$=$$$+1
	.ENDC
	PUSHAB	CLIWORK
	PUSHAB	W^A1
	CALLS	#$$$,@CLI$A_UTILSERV(AP)
	.ENDM
 
;
; DEFINE CREATE-PROCESS STRING DESCRIPTOR
;
 
	.MACRO	DESCR	NAME
 
$$$D=.
RUN_Q_DESCR=.-$$$D
RUN_D_'NAME:.BLKQ	1
RUN_A_ARGPTR=.-$$$D
	.LONG	CREPRC+CREPRC$_'NAME
	.ENDM
 
;
; CALLBACK TO CONVERT A VALUE
;
 
	.MACRO	CONVERTVAL	VALDESC
	PUSHAB	@4(AP)
	PUSHAB	CLIWORK
	PUSHAB	VALDESC
	CALLS	#3,@CLI$A_UTILSERV(AP)
	.ENDM
 
;
; INSERT SEVERITY IN ERROR CODE
;
 
	.MACRO	INSEV	SEV,LOC
	INSV	#STS$K_'SEV,-	
		#STS$V_SEVERITY,-
		#STS$S_SEVERITY,-
		LOC		
	.ENDM
 
;
; DEFINE KEYWORD ARGUMENT VALUE
;
 
	.MACRO	KEY	KEYWD,FLAG,SENSE
	.SAVE
	.PSECT	KEYWRD,WRT,RD,BYTE
$B=.
	.ASCII	"KEYWD"
$E=.
	.PSECT	KEYDESC,RD,WRT,BYTE
	.IF DF	KEYLST
	.BLKQ	-1
	.IFF
KEYLST:
	.ENDC
	.IF IDN	<SAME>,<KEYWD>
SAMEKEY:
	.ENDC
$$$0=.
	.LONG	$E-$B
	.LONG	$B
$$$FL0=0
$$$FL1=0
	.IRP	X,FLAG
$$$POS=PRV$V_'X-32
	.IF GE	$$$POS
$$$FL1=$$$FL1!<1@$$$POS>
	.IFF
$$$FL0=$$$FL0!<1@PRV$V_'X>
	.ENDC
	.ENDM
FLAGS=.-$$$0
	.LONG	$$$FL0
	.LONG	$$$FL1
	.LONG	0
	.IF IDN <SENSE>,<CLEAR>
	.BLKL	-1
	.LONG	-1
	.ENDC
	.QUAD	0
	.RESTORE
	.ENDM
 
;
;
; ERROR MESSAGE CALL FOR SYNTAX ERRORS
;
 
	.MACRO	SYNTAXERR	CODE=R0,DESCR=0
	PUSHL	CODE
	PUSHAB	DESCR
	CALLS	#2,ERREXIT
	.ENDM
 
;
; DEFINE QUALIFIER DESCRIPTOR BLOCK
;
 
	.MACRO	DEFQUAL	QUAL,MASK,STATE
	.SAVE
	.PSECT	QUALS
	.IF NDF	RUNQUAL
RUNQUAL:
	.IFF
.=.-$$$END
	.ENDC
	.IF NB	MASK
	.IF NB	STATE
	$CLIQUALDESC	-
		QDCODE=CLI$K_RUN_'QUAL,-
		TRUACT=QUAL,-
		CLRLST=CREPRC_V_'MASK
	.IFF
	$CLIQUALDESC	-
		QDCODE=CLI$K_RUN_'QUAL,-
		TRUACT=QUAL,-
		SETLST=CREPRC_V_'MASK
	.ENDC
	.IFF
	$CLIQUALDESC	-
		QDCODE=CLI$K_RUN_'QUAL,-
		TRUACT=QUAL
	.ENDC
$$$0=.
	$CLIQUALDESC	END_LIST
$$$END=.-$$$0
	.RESTORE
	.ENDM
 
;
; GET QUOTA VALUE
;
 
	.MACRO	GETQUOTA	TAG,QUOTA,LABEL
	.SAVE
	.PSECT	QUOLST,RD,WRT,BYTE
	.IF NDF	QUOLST
QUOLST:	.BLKB	1
	.ENDC
	.BLKB	3
	.PSECT	QUOTBL,RD,WRT,BYTE
	.IF NDF	QUOTBL
QUOTBL:
NQUOTA=0
	.ENDC
$Q=.
	.BYTE	PQL$_'QUOTA
		.BLKB	1
		.BLKL	1
QTB_ENTRYSIZE=.-$Q
NQUOTA=NQUOTA+1
	.RESTORE
TAG:
	.WORD	^M<R1,R2>
	PUSHAB	$Q
	.IF NB	LABEL
	BRB	LABEL
	.ENDC
	.ENDM
 
;
; EQUATED SYMBOLS
;
; CREATE PROCESS STATUS FLAGS
;
 
	_VIELD	CREPRC,1,<-		; FLAGS SHIFTED ONE PLACE LEFT
		NOWAIT,-		; DISABLE RESOURCE WAIT MODE
		SERV,-			; ENABLE SERVICE FAILURE MODE
		NOSWAP,-		; DISABLE SWAPPING
		NOACNT,-		; DISABLE ACCOUNTING FOR PROCESS
		BATCH,-			; CREATE A BATCH PROCESS
		HIBER,-			; ACTIVATE PROCESS IN HIBERNATE STATE
		NOAUTH-			; DO NOT OPEN AUTHORIZATION FILE
		>			;
 
;
; DEFINE DEFAULT STATUS FLAGS
;
 
RUN_M_DFSTS=<1@CREPRC_V_NOACNT>!-			;
	    <1@CREPRC_V_NOAUTH>!-			;
	    <1@CREPRC_V_NOSWAP>!-			;
	    <1@CREPRC_V_NOWAIT>				;
 
;
; OWN STORAGE
;
 
	.PSECT	RWDATA	RD,WRT,BYTE
 
;
; DEFINE COMMAND LANGUAGE INTERPRETER DATA STRUCTURES
;
; ALLOCATE CLI WORK AREA
;
 
CLIWORK:.BLKB	CLI$K_WORKAREA		; RESULT PARSE WORK AREA
 
;
; REQUEST DESCRIPTOR FOR COMMAND LINE
;
 
CMLDSC:	$CLIREQDESC	-		; REQUEST DESCRIPTOR FOR COMMAND LINE
		RQTYPE=CLI$K_GETCMD	; GET ADDRESS AND LENGTH OF COMMAND
 
;
; REQUEST DESCRIPTOR TO INITIALIZE THE PARSE
;
 
INIPRS:	$CLIREQDESC	-		; REQUEST DESCRIPTOR FOR PARSE
		ERRACT=ERREXIT,-	; ERROR ACTION ROUTINE
		RQTYPE=CLI$K_INITPRS	; INITIALIZE THE PARSE
 
;
; REQUEST DESCRIPTOR FOR PARSE TERMINATION
;
 
PARSDON: $CLIREQDESC	-		; REQUEST DESCRIPTOR FOR PARSE DONE
		ERRACT=ERREXIT,-	; ERROR ACTION ROUTINE
		RQTYPE=CLI$K_ENDPRM1	; COMPLETED PARAMETER SET 1
 
;
; REQUEST DESCRIPTOR FOR ASCII CONVERSION
;
 
ASCVAL:	$CLIREQDESC	-		; REQUEST DESCRIPTOR FOR ASCII CONVERSION
		ERRACT=ERREXIT,-	; ERROR ACTION ROUTINE
		RQTYPE=CLI$K_ASCIIVAL	; ASCII CONVERSION
 
;
; REQUEST DESCRIPTOR FOR NUMERIC VALUE CONVERSION
;
 
NUMERCVAL:$CLIREQDESC	-		;
		ERRACT=ERREXIT,-	; ERROR ACTION ROUTINE
		RQTYPE=CLI$K_NUMERVAL	;
 
;
; REQUEST DESCRIPTOR FOR IMAGE FILE CONVERSION
;
 
FILDESC: $CLIREQDESC	-		; REQUEST DESCRIPTOR FOR EXECUTABLE IMAGE
		ERRACT=ERREXIT,-	; ERROR EXIT
		RQTYPE=CLI$K_INPUT1,-	; TYPE IS INPUT FILE 1
		RQFLGS=CLI$V_PARMREQ,-	; PARAMETER IS REQUIRED
		PRSACT=PARSFIL,-	; ACTION ROUTINE
		QUALST=RUNQUAL		; RUN COMMAND QUALIFIER LIST

	.SBTTL	KEYWORD LIST FOR PRIVILEGE QUALIFIER
 
;
; KEYWORD LIST FOR PRIVILEGE QUALIFIER
;
 
	KEY	^\ACNT\	,-		; MAY SUPPRESS ACCOUNTING MESSAGE
		NOACNT,CLEAR		;
	KEY	^\ALLPRIV\,<-		; ALL PRIVILEGES
		ALLSPOOL,-		; MAY ALLOCATE SPOOLED DEVICE
		BUGCHK,-		; MAY MAKE BUG CHECK ERROR LOG ENTRIES
		BYPASS,-		; BYPASSES UIC CHECKING
		CMEXEC,-		; MAY CHANGE MODE TO EXEC
		CMKRNL,-		; MAY CHANGE MODE TO KERNEL
		DETACH,-		; MAY CREATE DETACHED PROCESSES
		DIAGNOSE,-		; MAY DIAGNOSE DEVICES
		EXQUOTA,-		; MAY EXCEED QUOTAS
		GROUP,-			; MAY AFFECT OTHER PROCESSES IN SAME GROUP
		GRPNAM,-		; MAY INSERT IN GROUP LOGICAL NAME TABLE
		LOG_IO,-		; MAY PERFORM LOGICAL I/O
		MOUNT,-			; MAY EXECUTE MOUNT VOLUME QIO
		NETMBX,-		; MAY CREATE NETWORK DEVICE
		NOACNT,-		; MAY SUPPRESS ACCOUNTING MESSAGE
		OPER,-			; OPERATOR PRIVILEGE
		PFNMAP,-		; MAY MAP TO SPECIFIC PHYSICAL PAGES
		PHY_IO,-		; MAY PERFORM PHYSICAL I/O
		PRMCEB,-		; MAY CREATE PERMANENT COMMON EVENT FLAG CLUSTERS
		PRMGBL,-		; MAY CREATE PERMANENT GLOBAL SECTION
		PRMMBX,-		; MAY CREATE PERMANENT MAILBOX
		PSWAPM,-		; MAY CHANGE PROCESS SWAP MODE
		SETPRI,-		; MAY SET ANY PROCESS PRIORITY
		SETPRV,-		; MAY SET ANY PRIVILEGE BITS
		SHMEM,-			; MAY CREATE/DELETE OBJECTS IN SHARED MEMORY
		SYSGBL,-		; MAY CREATE SYSTEM-WIDE GLOBAL SECTION
		SYSLCK,-		; MAY CREATE SYSTEM-WIDE LOCKS
		SYSNAM,-		; MAY INSERT IN SYSTEM LOGICAL NAME TABLE
		SYSPRV,-		; MAY ACCESS OBJECTS VIA SYSTEM PROTECTION
		TMPMBX,-		; MAY CREATE TEMPORARY MAILBOX
		VOLPRO,-		; MAY OVERRIDE VOLUME PROTECTION
		WORLD-			; MAY AFFECT OTHER PROCESSES IN THE WORLD
		>			;
	KEY	^\ALLSPOOL\,-		; MAY ALLOCATE SPOOLED DEVICE
		ALLSPOOL,SET		;
	KEY	^\ALTPRI\,-		; MAY SET ANY PRIORITY VALUE
		SETPRI			;
	KEY	^\BUGCHK\,-		; MAY MAKE BUG CHECK ERROR LOG ENTRIES
		BUGCHK			;
	KEY	^\BYPASS\,-		; BYPASSES UIC CHECKING
		BYPASS			;
	KEY	^\CMEXEC\,-		; MAY CHANGE MODE TO EXECUTIVE
		CMEXEC			;
	KEY	^\CMKRNL\,-		; MAY CHANGE MODE TO KERNEL
		CMKRNL			;
	KEY	^\DETACH\,-		; MAY CREATE DETACHED PROCESSES
		DETACH			;
	KEY	^\DIAGNOSE\,-		; MAY DIAGNOSE DEVICES
		DIAGNOSE		;
	KEY	^\EXQUOTA\,-		; MAY EXCEED QUOTAS
		EXQUOTA			;
	KEY	^\GROUP\,-		; MAY AFFECT OTHER PROCESSES IN GROUP
		GROUP			;
	KEY	^\GRPNAM\,-		; INSERT IN GROUP LOGICAL NAME TABLE
		GRPNAM			;
	KEY	^\LOG_IO\,-		; MAY PERFORM LOGICAL I/O
		LOG_IO			;
	KEY	^\MOUNT\,-		; MAY EXECUTE MOUNT VOLUME QIO
		MOUNT			;
	KEY	^\NETMBX\,-		; MAY CREATE NETWORK DEVICE
		NETMBX			;
	KEY	^\OPER\,- 		; OPERATOR PRIVILEGES
		OPER			;
	KEY	^\PFNMAP\,-		; MAY MAP TO SPECIFIC PHYSICAL PAGES
		PFNMAP			;
	KEY	^\PHY_IO\,-		; MAY PERFORM PHYSICAL I/O
		PHY_IO			;
	KEY	^\PRMCEB\,-		; MAY CREATE PERMANENT COMMON 
		PRMCEB			; EVENT FLAG CLUSTER
	KEY	^\PRMGBL\,-		; MAY CREATE PERMANENT GLOBAL SECTION
		PRMGBL			;
	KEY	^\PRMMBX\,-		; MAY CREATE PERMANENT MAILBOX
		PRMMBX			;
	KEY	^\PSWAPM\,-		; MAY CHANGE PROCESS SWAP MODE
		PSWAPM			;
	KEY	^\SAME\,-		; PROCESS HAS SAME PRIVILEGES AS
		NOACNT			; ISSUING PROCESS
	KEY	^\SETPRV\,-		; MAY SET ANY PRIVILEGE BITS
		SETPRV			;
	KEY	^\SHMEM\,-		; MAY CREATE/DELETE OBJECTS IN SHARED MEMORY
		SHMEM			;
	KEY	^\SYSGBL\,-		; MAY CREATE SYSTEM-WIDE GLOBAL SECTION
		SYSGBL			;
	KEY	^\SYSLCK\,-		; MAY CREATE SYSTEM-WIDE LOCKS
		SYSLCK
	KEY	^\SYSNAM\,-		; MAY INSERT IN SYSTEM LOGICAL
		SYSNAM			; NAME TABLE
	KEY	^\SYSPRV\,-		; MAY ACCESS OBJECTS VIA SYSTEM PROTECTION
		SYSPRV			;
	KEY	^\TMPMBX\,-		; MAY CREATE TEMPORARY MAILBOX
		TMPMBX			;
	KEY	^\VOLPRO\,-		; MAY OVERRIDE VOLUME PROTECTION
		VOLPRO			;
	KEY	^\WORLD\,-		; MAY AFFECT OTHER PROCESSES
		WORLD			; IN THE WORLD
 
;
; ARGUMENT LIST FOR KEYWORD SEARCH
;
 
KEYARG:	$ARGLST	3,-			;
		KEYLST,-		; ADDRESS OF KEYWORD LIST
		ASCVAL+CLI$W_RQSIZE,-	; ADDRESS OF DESCRIPTOR
		RUN_Q_PRVFLAGS		; PRIVILEGE VECTOR

	.SBTTL	QUALIFIER LIST
 
;
; QUALIFIER LIST
;
 
	DEFQUAL	ACCO,NOACNT,CLEAR	; SUPPRESS ACCOUNTING MESSAGE QUALIFIER
	DEFQUAL	AST_			; AST LIMIT QUOTA QUALIFIER
	DEFQUAL	AUTH,NOAUTH,CLEAR	; DO NOT OPEN AUTHORIZATION FILE
	DEFQUAL	BUFF			; BUFFER SPACE QUOTA QUALIFIER
	DEFQUAL	DELA,HIBER		; DELAY QUALIFIER
	DEFQUAL ENQU			; ENQUEUE LIMIT QUOTA
	DEFQUAL	ERRO			; ERROR QUALIFIER
	DEFQUAL EXTE			; WORKING SET EXTENT QUOTA
	DEFQUAL	FILE			; OPEN FILE QUOTA QUALIFIER
	DEFQUAL	INPU			; INPUT QUALIFIER
	DEFQUAL	INTE,HIBER		; INTERVAL QUALIFIER
	DEFQUAL	IO_B			; BUFFERED I/O QUOTA QUALIFIER
	DEFQUAL	IO_D			; DIRECT I/O QUOTA QUALIFIER
	DEFQUAL	MAIL			; PROCESS TERMINATION MAILBOX
	DEFQUAL	MAXI			; MAXIMUM WORKING SET QUOTA
	DEFQUAL	OUTP			; OUTPUT QUALIFIER
	DEFQUAL	PAGE			; PAGE FILE QUOTA
	DEFQUAL	PRIO			; PRIORITY QUALIFIER
	DEFQUAL	PRIV			; PRIVILEGE QUALIFIER
	DEFQUAL	PROC			; PROCESS NAME QUALIFIER
	DEFQUAL	QUEU			; TIMER QUEUE ENTRY QUOTA
	DEFQUAL	RESO,NOWAIT,CLEAR	; RESOURCE WAIT QUALIFIER
	DEFQUAL	SCHE,HIBER		; SCHEDULE QUALIFIER
	DEFQUAL	SERV,SERV		; SERVICE_FAILURE QUALIFIER
	DEFQUAL	SUBP			; SUBPROCESS LIMIT
	DEFQUAL	SWAP,NOSWAP,CLEAR	; SWAP QUALIFIER
	DEFQUAL	TIME			; CPU TIME LIMIT QUOTA
	DEFQUAL	UIC			; UIC QUALIFIER
	DEFQUAL	WORK			; DEFAULT WORKING SET QUOTA QUALIFIER

	.SBTTL	CREATE-PROCESS ARGUMENTS
 
;
; ARGUMENT LIST FOR CREATE PROCESS
;
CREPRC::$CREPRC		-		;
	PIDADR=RUN_L_PID,-		; PROCESS I/D
	IMAGE=PARSOUTP,-		; ADDRESS OF FULLY QUALIFIED FILE NAME
;	INPUT=RUN_D_INPUT,-		; INPUT LOGICAL NAME DESCRIPTOR
;	OUTPUT=RUN_D_OUTPUT		; OUTPUT LOGICAL NAME DESCRIPTOR
;	ERROR=RUN_D_ERROR,-		; ERROR LOGICAL NAME DESCRIPTOR
	PRVADR=RUN_Q_PRVFLAGS,-		; PRIVILEGE VECTOR
;	QUOTA=PARSOUTBF,-		; QUOTA LIST
;	PRCNAM=RUN_D_PRCNAM,-		; PROCESS NAME DESCRIPTOR
	BASPRI=0,-			; BASE PRIORITY
	UIC=0,-				; UIC
	MBXUNT=0,-			; MAILBOX UNIT NUMBER
	STSFLG=0			; STATUS AND MODE FLAGS
;
; CREATE PROCESS ARGUMENTS
;
 
RUN_Q_PRVFLAGS:	.BLKQ	1		; PRIVILEGE VECTOR
RUN_L_STSFLG:	.BLKL	1		; TEMPORARY STORAGE FOR STATUS FLAGS
 
;
; STRING DESCRIPTORS
;
 
	DESCR	ERROR			; ERROR LOGICAL NAME
	DESCR	INPUT			; INPUT LOGICAL NAME
	DESCR	OUTPUT			; OUTPUT LOGICAL NAME
	DESCR	PRCNAM			; PROCESS NAME
 
;
; DEFINE ARGUMENT LIST FOR GET JOB/PROCESS PARAMETERS
;
 
GETJPI:					;
	.WORD	4,JPI$_PRIB		; GET BASE PRIORITY
	.LONG	CREPRC+CREPRC$_BASPRI	; STORAGE FOR BASE PRIORITY
	.LONG	0			; NO RETURN LENGTH WANTED
	.WORD	8,JPI$_PROCPRIV		; GET PROCESS LOGIN PRIVILEGES
	.LONG	SAMEKEY+FLAGS		; STORAGE FOR CURRENT PRIVILEGES
	.LONG	0			; NO RETURN LENGTH WANTED
	.LONG	0			; TERMINATE LIST

	.SBTTL	WAKE-PROCESS ARGUMENTS
 
;
; ARGUMENT LIST FOR SCHEDULE WAKE REQUEST
;
 
SCHDWK::$SCHDWK		-		;
	PIDADR=RUN_L_PID,-		; ADDRESS OF PROCESS I/D
	DAYTIM=RUN_Q_TIME,-		; TIME OF DAY
	REPTIM=RUN_Q_REPT		; REPETITION INTERVAL
 
;
; ARGUMENTS FOR SCHEDULE WAKE REQUEST
;
 
RUN_Q_REPT:.BLKQ	1		; REPETITION INTERVAL
RUN_Q_TIME:.BLKQ	1		; ABSOLUTE TIME

	.SBTTL	MESSAGE ARGUMENT LISTS
 
;
; PROCESS I/D MESSAGE ARGUMENT LIST
;
 
PIDMSG:	$ARGLST	3,-			;
		PROCID,-		; ADDRESS OF PROCESS I/D MESSAGE BLOCK
		0,-			; NO ACTION ROUTINE
		FACNAM			; ADDRESS OF FACILITY NAME 
 
;
; FACILITY NAME STRING
;
 
RUNSTR:	.ASCII	/RUN/			;
$$$L=.-RUNSTR				;
 
FACNAM:	.LONG	$$$L			; LENGTH OF NAME STRING
	.LONG	RUNSTR			; ADDRESS OF NAME STRING
 
;
; PROCESS IDENTIFICATION MESSAGE
;
 
PROCID:	.LONG	3,-			; ARGUMENT COUNT
		<^C<STS$M_SEVERITY>&CLI$_PROC_ID!STS$K_SUCCESS>,- ; REPORT PROCESS I/D
		1,-			; 1 FAO ARGUMENT
		0			; PROCESS I/D
RUN_L_PID=.-4				; REFERENCE LABEL FOR PROCESS I/D
 
;
; SYSTEM SERVICE ERROR MESSAGE ARGUMENT LIST
;
 
SRVMSG:	$PUTMSG	FACNAM=FACNAM,-	; FACILITY NAME
		MSGVEC=SRVERR	; MESSAGE VECTOR
 
;
; SYSTEM SERVICE ERROR ARGUMENT LIST
;
 
SRVERR:	.LONG	2			; LENGTH OF MESSAGE VECTOR
SRVCOD:	.LONG	0			; ERROR CODE
	.LONG	0			; NO FAO ARGUMENTS

	.SBTTL	ARGUMENTS FOR PARSING EXECUTABLE FILE NAME
 
;
; ARGUMENT LIST FOR PARSING THE EXECUTABLE FILE NAME
;
 
PARSARG:$ARGLST	3,-			;
		FILDESC+CLI$W_RQSIZE,-	; INPUT STRING DESCRIPTOR
		PARSOUTP,-		; ADDRESS OF OUTPUT DESCRIPTOR
		PARSDFNAM		; ADDRESS OF DEFAULT NAME STRING
 
;
; ARGUMENTS FOR PARSING THE EXECUTABLE FILE NAME
;
; DEFAULT NAME STRING
;
 
DFNAM:	.ASCII	/.EXE/			;
DFNAMSZ=.-DFNAM				; LENGTH OF STRING
 
;
; BUFFER FOR PARSED NAME STRING
;
 
PARSOUTBF:.BLKB	64			;
PARSBUFLGH=.-PARSOUTBF			;
 
;
; STRING DESCRIPTOR FOR DEFAULT NAME
;
 
PARSDFNAM:.LONG	DFNAMSZ			; LENGTH OF DEFAULT NAME STRING
	.LONG	DFNAM			; ADDRESS OF NAME STRING
 
;
; DESCRIPTOR FOR PARSED NAME STRING
;
 
PARSOUTP:.LONG	PARSBUFLGH		; LENGTH OF PARSED STRING
	.LONG	PARSOUTBF		; BUFFER TO RECEIVE PARSED STRING

	.SBTTL	UIC CONVERSION ARGUMENTS
 
;
; ARGUMENT LIST FOR UIC CONVERSION
;
 
UICARG:	$ARGLST	2,-			;
		ASCVAL+CLI$W_RQSIZE,-	; ADDRESS OF DESCRIPTOR
		CREPRC+CREPRC$_UIC	; ADDRESS TO RECEIVE CONVERTED UIC

	.SBTTL	RUN_DETACHED
;+
; RUN - EXTERNAL CLI COMMAND FILE TO CREATE A PROCESS
;
; THIS PROCEDURE IS CALLED BY THE COMMAND LANGUAGE INTERPRETER TO CREATE
; A PROCESS. IT IS INVOKED WHENEVER THE RUN COMMAND IS TYPED WITH ANY
; QUALIFIER.
;
; INPUTS:
;
;	****** INPUTS ******
;
; OUTPUTS:
;
;	****** OUTPUTS ******
;
;-
 
	.PSECT	RUN	LONG
 
RUN_DETACHED:				;
	.WORD	0			; NULL ENTRY MASK
	CALLG	(AP),RUN_PARSCMD	; PARSE THE COMMAND LINE
	BLBC	R0,RUN_ERR_UNEXP	; UNEXPECTED ERROR STATUS
	$CREPRC_G	CREPRC		; REQUEST PROCESS CREATION
	BLBC	R0,RUN_ERR_CREPRC	; ERROR IN CREATE-PROCESS
	$PUTMSG_G PIDMSG		; DISPLAY PROCESS I/D
	BBC	#CREPRC_V_HIBER-1,-	; TIME BASED SCHEDULING REQUESTED?
		CREPRC+CREPRC$_STSFLG,10$ ;
	$SCHDWK_G	SCHDWK		; YES, SCHEDULE PROCESS WAKEUP
	BLBC	R0,RUN_ERR_SCHDWK	; ERROR IN WAKE REQUEST
10$:					;
	RET				;

	.SBTTL	ERROR EXIT HANDLERS
 
;
; ERROR EXIT HANDLERS
;
; UNEXPECTED ERROR WHILE PARSING COMMAND LINE
;
 
	.ENABL	LSB
 
RUN_ERR_UNEXP:				;
	INSEV	SEVERE,R0		; SEVERE ERROR
	BRB	10$			;
 
;
; ERROR FROM CREATE-PROCESS SYSTEM SERVICE
;
 
RUN_ERR_CREPRC:				;
	INSEV	ERROR,R0		; SET SEVERITY LEVEL TO ERROR
	BRB	10$			;
 
 
;
; ERROR FROM SCHEDULE WAKEUP SYSTEM SERVICE
;
 
RUN_ERR_SCHDWK:				;
	INSEV	WARNING,R0		; SET SEVERITY TO WARNING
10$:					;
	MOVL	R0,SRVCOD		; SETUP SYSTEM SERVICE CODE
	$PUTMSG_G SRVMSG		; REPORT SYSTEM SERVICE ERROR
	BLBC	R0,20$			; IF LBC DISPLAY STATUS ON EXIT
	MOVL	SRVCOD,R0		; GET FINAL STATUS
	BBSS	#STS$V_INHIB_MSG,R0,20$	; INHIBIT CLI STATUS DISPLAY
20$:					;
	RET				;
 
	.DSABL	LSB

	.SBTTL	RUN_PARSCMD - PARSE THE COMMAND LINE
 
;
; ENTRY POINT TO PARSE THE COMMAND LINE
;
 
RUN_PARSCMD::				;
	.WORD	0			; NULL ENTRY MASK
	$GETJPI_S	ITMLST=GETJPI	; GET PROCESS INFORMATION FOR DEFAULTS
	BLBC	R0,10$			; IF LBC ERROR IN SYSTEM SERVICE
	BSBB	PARSCMD			; PARSE THE COMMAND LINE
	MOVZWL	#SS$_NORMAL,R0		; RETURN NORMAL STATUS
10$:					;
	RET				;

	.SBTTL	PARSCMD - SUBROUTINE TO PARSE COMMAND LINE
 
;
; PARSCMD - PARSE THE CLI INPUT
;
 
PARSCMD:				;
	MOVQ	SAMEKEY+FLAGS,RUN_Q_PRVFLAGS ; INITIALIZE PRIVILEGE FLAGS
	CLRL	CREPRC+CREPRC$_ERROR	; CLEAR ADDRESS OF ERROR NAME
	CLRL	CREPRC+CREPRC$_INPUT	; CLEAR ADDRESS OF INPUT NAME
	CLRL	CREPRC+CREPRC$_MBXUNT	; RESET MAILBOX UNIT NUMBER
	CLRL	CREPRC+CREPRC$_OUTPUT	; CLEAR ADDRESS OF OUTPUT NAME
	CLRL	CREPRC+CREPRC$_PRCNAM	; CLEAR ADDRESS OF PROCESS NAME
	CLRL	CREPRC+CREPRC$_QUOTA	; CLEAR ADDRESS OF QUOTA LIST
	CLRL	CREPRC+CREPRC$_STSFLG	; CLEAR STATUS FLAGS
	CLRL	CREPRC+CREPRC$_UIC	; CLEAR UIC
	MOVL	#RUN_M_DFSTS,RUN_L_STSFLG ; SET DEFAULT FLAGS
	CLRQ	RUN_Q_REPT		; CLEAR REPETITION INTERVAL
	MNEGL	#1,RUN_Q_TIME		; SET SMALLEST DELTA TIME
	MNEGL	#1,RUN_Q_TIME+4		; ...
 
;
; INITALIZE THE QUOTA TABLE
;
 
	MOVAB	QUOTBL,R1		; GET ADDRESS OF QUOTA TABLE
	MOVZBL	S^#NQUOTA,R2		; GET NUMBER OF QUOTA PARAMETERS
10$:					;
	MOVB	#PQL$_LISTEND,1(R1)	; SET NOT-SPECIFIED FLAG
	ADDL	S^#QTB_ENTRYSIZE,R1	; POINT TO NEXT ENTRY
	SOBGTR	R2,10$			; LOOP FOR EACH ENTRY
	CALLBAK	INIPRS,-		; INITIALIZE THE PARSE
		RUN_L_STSFLG		; ADDRESS OF BITMASK
	CALLBAK	CMLDSC,-		; LOCATE THE COMMAND LINE
		RUN_L_STSFLG		; ADDRESS OF BITMASK
	CALLBAK	FILDESC,-		; PARSE THE COMAND LINE
		RUN_L_STSFLG		; ADDRESS OF BITMASK
	CALLBAK	PARSDON,-		; TERMINATE THE PARSE
		RUN_L_STSFLG		; ADDRESS OF BITMASK
	EXTZV	#1,#31,RUN_L_STSFLG,CREPRC+CREPRC$_STSFLG ; SETUP STATUS
 
;
; BUILD QUOTA LIST
;
 
	MOVL	CREPRC+CREPRC$_QUOTA,R2	; GET ADDRESS OF QUOTA TABLE
	BEQL	40$			; IF EQL, NO QUOTAS SPECIFIED
	MOVAB	QUOTBL,R1		; GET ADDRESS OF QUOTA TABLE
	MOVZBL	S^#NQUOTA,R3		; GET NUMBER OF QUOTA QUALIFIERS
20$:					;
	CMPB	(R1),1(R1)		; QUOTA SPECIFIED?
	BNEQ	30$			; IF NEQ NO
	MOVB	(R1),(R2)+		; SET QUOTA TYPE
	MOVL	2(R1),(R2)+		; SET QUOTA VALUE
30$:					;
	ADDL	S^#QTB_ENTRYSIZE,R1	; POINT TO NEXT TABLE ENTRY
	SOBGTR	R3,20$			; LOOP
	MOVB	#PQL$_LISTEND,(R2)	; TERMINATE LIST
40$:					;
	RSB				;

	.SBTTL ACTION ROUTINE - PARSE EXECUTABLE FILE NAME
 
;
; PARSE EXECUTABLE FILE NAME STRING
;
 
PARSFIL:				;
	.WORD	0			;
	CALLG	PARSARG,RUN_PARSFIL	; PARSE FILE NAME
	BLBC	R0,10$			; IF LBC ERROR
	RET				;
10$:					;
	SYNTAXERR	R0,FILDESC	; REPORT BAD FILE NAME

	.SBTTL	ACTION ROUTINE - TERMINATION MAILBOX
 
;
; ACTION ROUTINE FOR TERMINATION MAILBOX UNIT NUMBER
;
 
MAIL:					;
	.WORD	^M<R1>			;
	CONVERTVAL	NUMERCVAL	; CONVERT MAILBOX UNIT NUMBER
	MOVL	NUMERCVAL+CLI$L_RQVALU,CREPRC+CREPRC$_MBXUNT ; RECORD MAILBOX NUMBER
	RET				;

	.SBTTL	ACTION ROUTINES - QUOTA PROCESSING
 
;
; ACTION ROUTINES FOR QUOTA PROCESSING
;
 
	.ENABL	LSB
 
 
	GETQUOTA	AST_,ASTLM,10$	; AST LIMIT QUOTA
	GETQUOTA	BUFF,BYTLM,10$	; BUFFER SPACE QUOTA
	GETQUOTA	ENQU,ENQLM,10$	; ENQUEUE LIMIT QUOTA
	GETQUOTA	EXTE,WSEXTENT,10$ ; WORKING SET EXTENT QUOTA
	GETQUOTA	FILE,FILLM,10$	; OPEN FILE QUOTA
	GETQUOTA	IO_B,BIOLM,10$	; BUFFERED I/O QUOTA
	GETQUOTA	IO_D,DIOLM,10$	; DIRECT I/O QUOTA
	GETQUOTA	MAXI,WSQUOTA,10$ ; MAXIMUM WORKING SET QUOTA
	GETQUOTA	PAGE,PGFLQUOTA,10$ ; PAGE FILE LIMIT
	GETQUOTA	QUEU,TQELM,10$	; TIMER QUEUE ELEMENT QUOTA
	GETQUOTA	SUBP,PRCLM,10$	; SUBPROCESS CREATION QUOTA
	GETQUOTA	TIME,CPULM,15$	; CPU LIMIT
	GETQUOTA	WORK,WSDEFAULT	; DEFAULT WORKING SET QUOTA
 
;
; PROCESS QUOTA QUALIFIER
;
 
10$:					;
	CONVERTVAL	NUMERCVAL	; CONVERT QUOTA VALUE
	MOVAB	QUOLST,CREPRC+CREPRC$_QUOTA ; POINT TO QUOTA LIST
	POPR	#^M<R1>			; GET TABLE ADDRESS
	MOVB	(R1)+,(R1)+		; SET QUOTA PRESENT FLAG
	MOVL	NUMERCVAL+CLI$L_RQVALU,(R1) ; STORE QUOTA
	RET				;

15$:					; Parse CPU Time Limit
	MOVAB	QUOLST,CREPRC+CREPRC$_QUOTA ; POINT TO QUOTA LIST
	PUSHAQ	-(SP)			; Scratch area for Delta Time
	CONVERTVAL	ASCVAL		; Get string from CLI
	PUSHAB	ASCVAL+CLI$W_RQSIZE
	CALLS	#2,LIB$CVT_DTIME	; Convert to Delta Time
	BLBC	R0,30$			; Check for syntax problem
	EDIV	#-200000,(SP)+,R0,R1	; Convert to CPU Time Limit
	BVS	40$			; Check for overflow
	TSTL	R1			; Round CPU Time Limit
	BEQL	20$
	MOVL	#1,R1
20$:	POPR	#^M<R2>			; Copy to PQL
	MOVB	(R2)+,(R2)+
	MOVAW	(R1)[R0],(R2)
	MOVL	#1,R0
	RET

30$:	SYNTAXERR	R0,ASCVAL	; Report returned error

40$:	SYNTAXERR #CLI$_ILLVAL,ASCVAL	; Value was too big
 
	.DSABL	LSB

	.SBTTL	ACTION ROUTINES - PROCESS AND LOGICAL NAMES
 
;
; SETUP STRING DESCRIPTOR FOR ERROR EQUIVALENCE NAME
;
 
	.ENABL	LSB
 
ERRO:					;
	.WORD	^M<R1,R2>		; ENTRY MASK
	MOVAB	W^RUN_D_ERROR,R0	; GET ADDRESS OF NAME DESCRIPTOR
	BRB	10$			;
 
;
; SETUP STRING DESCRIPTOR FOR INPUT LOGICAL NAME
;
 
INPU:					;
	.WORD	^M<R1,R2>		; ENTRY MASK
	MOVAB	W^RUN_D_INPUT,R0	; GET ADDRESS OF NAME DESCRIPTOR
	BRB	10$			;
 
;
; SETUP STRING DESCRIPTOR FOR OUTPUT LOGICAL NAME
;
 
OUTP:					;
	.WORD	^M<R1,R2>		; ENTRY MASK
	MOVAB	W^RUN_D_OUTPUT,R0	; GET ADDRESS OF NAME DESCRIPTOR
	BRB	10$			;
 
;
; SETUP STRING DESCRIPTOR NAME FOR PROCESS
;
 
PROC:					;
	.WORD	^M<R1,R2>		; ENTRY MASK
	MOVAB	W^RUN_D_PRCNAM,R0	; GET ADDRESS OF NAME DESCRIPTOR
10$:					;
	MOVL	R0,@RUN_A_ARGPTR(R0)	; SETUP DESCRIPTOR ADDRESS
	PUSHL	R0			; SAVE DESCRIPTOR ADDRESS
	CONVERTVAL	ASCVAL		; CONVERT AN ASCII STRING
	MOVQ	W^ASCVAL+CLI$W_RQSIZE,@(SP)+ ; SAVE STRING DESCRIPTOR
	RET				;
 
	.DSABL	LSB

	.SBTTL	ACTION ROUTINE - PROCESS PRIVILEGE QUALIFIER
 
;
; ACTION ROUTINE TO PROCESS PRIVILEGE QUALIFIER
;
 
PRIV:					;
	.WORD	^M<R1,R2>		; ENTRY MASK
5$:					;
	MOVL	4(AP),R2		; GET ADDRESS OF QUALIFIER DESCRIPTOR
	TSTW	CLI$Q_QDVALDESC(R2)	; ANY UNPROCESSED COMMANDS?
	BEQL	10$			; IF EQL NO
	CONVERTVAL	ASCVAL		; CONVERT ASCII VALUE
	CALLG	W^KEYARG,W^RUN_SRCKEY	; SEARCH FOR KEYWORD
	BLBS	R0,5$			; IF LBS GO AGAIN
	MOVL	#CLI$_INVKEY,R0		; ASSUME NON-EXISTENT KEYWORD
	TSTW	R1			; TEST SUPPLEMENTARY CODE
	BEQL	20$			; IF EQL, KEY NOT FOUND
	MOVL	#CLI$_ABKEYW,R0		; ASSUME AMBIGUOUS KEYWORD
	BRB	20$			; TAKE ERROR EXIT
10$:					;
	RET				;
20$:					;
	SYNTAXERR	R0,ASCVAL	; PASS CONTROL TO ERROR HANDLER

	.SBTTL	ACTION ROUTINE - PRIORITY QUALIFIER
 
;
; ACTION ROUTINE TO CONVERT PRIORITY TO BINARY
;
 
PRIO:					;
	.WORD	^M<R1,R2>		; ENTRY MASK
	CONVERTVAL	NUMERCVAL	; CONVERT NUMERIC VALUE
	MOVL	NUMERCVAL+CLI$L_RQVALU,- ; SETUP PRIORITY
		CREPRC+CREPRC$_BASPRI	;
10$:					;
	RET				;

	.SBTTL	DUMMY ACTION ROUTINES
 
;
; DUMMY ACTION ROUTINES FOR:
;
;		ACCOUNTING_MESSAGE
;		AUTHORIZE
;		RESOURCE_WAIT,
;		SERVICE_FAILURE,
;		SWAP_MODE
;
 
ACCO:					;
AUTH:					;
RESO:					;
SERV:					;
SWAP:					;
	.WORD	0			; DUMMY ENTRY MASK
	RET				;

	.SBTTL	ACTION ROUTINES - TIME-BASED QUALIFIERS
 
;
; ACTION ROUTINES FOR TIME-BASED SCHEDULE REQUESTS:
;
;	DELAY PROCESS INTIATION
;	ESTABLISH RESCHEDULE INTERVAL
;	SCHEDULE PROCESS WAKEUP
;
; INTERVAL - PERIODICALLY RESCHEDULE PROCESS EXECUTION
;
 
	.ENABL	LSB
 
INTE:					;
	.WORD	^M<R1,R2>		; ENTRY MASK
	PUSHAB	RUN_Q_REPT		; PUSH ADDRESS OF REPETITION RATE
	BRB	10$			;
 
;
; DELAY PROCESS EXECUTION
;
 
DELA:					;
	.WORD	^M<R1,R2>		; ENTRY MASK
	PUSHAB	RUN_Q_TIME		; PUSH ADDRESS OF TIME QUADWORD
10$:					;
	MOVAB	LIB$CVT_DTIME,R2	; SETUP ENTRY POINT ADDRESS
	BRB	20$			;
 
;
; SCHEDULE - SCHEDULE PROCESS WAKEUP
;
 
SCHE:					;
	.WORD	^M<R1,R2>		; ENTRY MASK
	PUSHAB	RUN_Q_TIME		; PUSH ADDRESS OF TIME QUADWORD
	MOVAB	LIB$CVT_TIME,R2		; GET ADDRESS OF ROUTINE
20$:					;
	CONVERTVAL	ASCVAL		; CONVERT TIME STRING
	PUSHAB	ASCVAL+CLI$W_RQSIZE	; PUSH ADDRESS OF STRING DESCRIPTOR
	CALLS	#2,(R2)			; CALL CONVERSION ROUTINE
	BLBC	R0,30$			; IF LBC EXIT
	RET				; RETURN TO CALLER
30$:					;
	SYNTAXERR	R0,ASCVAL	; REPORT ERROR
 
	.DSABL	LSB

	.SBTTL	ACTION ROUTINE - UIC QUALIFIER
 
;
; UIC QUALIFIER
;
 
UIC:					;
	.WORD	^M<R1,R2>		;
	CONVERTVAL	ASCVAL		; CONVERT ASCII STRING
	CALLG	W^UICARG,W^RUN_CVTUIC	; CONVERT UIC
	BLBC	R0,10$			; IF LBC ERROR
	RET				;
10$:					;
	SYNTAXERR	#CLI$_INVUIC,ASCVAL ; REPORT BAD UIC

	.SBTTL	ACTION ROUTINE ERROR EXIT HANDLERS
 
;
; ERROR EXIT HANDLER
;
; THIS PROCEDURE IS CALLED TO PRINT AN ERROR MESSAGE AND EXIT WHENEVER A
; SYNTAX ERROR IS DETECTED IN A RUN COMMAND
;
; CALLING SEQUENCE:
;
;	CALL ERREXIT (DESCRIPTOR,CODE)
;
; PARAMETER DESCRIPTIONS:
;
;	DESCRIPTOR=ADDRESS OF QUALIFIER DESCRIPTOR, CLI$W_RQSIZE IS THE
;	           OFFSET TO A QUAD-WORD STRING DESCRIPTOR FOR THE ERRONEOUS
;		   SUBSTRING.
;
;	CODE=CLI ERROR CODE
;
; IMPLICIT INPUTS:
;
;	CMLDSC - QUALIFIER DESCRIPTOR FOR COMMAND LINE
;
;	FACNAM - ADDRESS OF FACILITY NAME
;
 
	.ENABL	LSB
 
ERREXIT:				;
	.WORD	^M<R2>			;
	MOVL	8(AP),R2		; GET THE CODE
	INSEV	ERROR,R2		; SET SEVERITY TO ERROR
	PUSHL	R2			; PUSH THE CODE
	PUSHAB	CMLDSC			; PUSH ADDRESS OF COMMAND LINE DESCRIPTOR
	PUSHAB	@4(AP)			; PUSH ADDRESS OF ERROR SEGMENT
	PUSHAB	FACNAM			; PUSH ADDRESS OF FACILITY NAME
	CALLS	#4,LIB$PUTCLIMSG	; OUTPUT CLI MESSAGE
	BLBC	R0,10$			; IF LBC DISPLAY STATUS ON EXIT
ERREXIT1:				;
	MOVL	R2,R0			; GET THE STATUS
	BBSS	#STS$V_INHIB_MSG,R0,10$	; INHIBIT CLI STATUS DISPLAY
10$:					;
	INSEV	ERROR,R0		; FORCE ERROR SEVERITY
	$EXIT_S	R0			; EXIT WITH STATUS
 
	.END	RUN_DETACHED
