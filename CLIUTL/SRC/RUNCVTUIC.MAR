	.TITLE	RUNCVTUIC - CONVERT UIC TO BINARY
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************

;++
; FACILITY: RUN-DETACHED CLI UTILITY
;
; ABSTRACT:
;
; THIS MODULE CONVERTS A UIC TO BINARY GROUP AND MEMBER CODES.
;
; ENVIRONMENT: USER MODE
;
; AUTHOR: C. A. MONIA	, CREATION DATE: 15-AUG-1977
;
; MODIFIED BY:
;
;	, : VERSION 00
; 01	- 
;--
	.PAGE
	.SBTTL	DECLARATIONS
 
;
; MACROS:
;
; BUILD DISPATCH TABLE FOR CASE INSTRUCTION
;
 
	.MACRO	CASE,SRC,DISPLIST,TYPE=W,BASE=#0,NMODE=S^#,?START,?MAX
	CASE'TYPE	SRC,BASE,NMODE'<<MAX-START>/2>-1
START:
	.IRP	EP,<DISPLIST>
	.WORD	EP-START
	.ENDR
MAX:
	.ENDM
 
;
; DEFINE STATE TABLE ENTRY
;
 
	.MACRO	STATE	NAME
	.SAVE
	.PSECT	TRANTBL,RD,NOWRT
$$T=.
	.PSECT	STATETBL,RD,NOWRT
	.IF NB	<NAME>
NAME:
	.ENDC
$$S=.
	.WORD	$$T-TRSIZE
	.RESTORE
	.ENDM
 
;
; DEFINE TRANSITION TABLE ENTRY
;
 
	.MACRO	TRAN,TOKEN,ACTION,NEXTSTATE
	.SAVE
	.PSECT	TRANTBL,RD,NOWRT
	.IF B	TOKEN
	.BYTE	-1
	.RESTORE
	.MEXIT
	.IFF
	.BYTE	TOKEN
	.ENDC
	.IF NB	<ACTION>
	.WORD	ACTION
	.IFF
	.WORD	0
	.ENDC
	.IF NB	<NEXTSTATE>
	.IF IDN	$END,<NEXTSTATE>
	.WORD	0
	.IFF
	.WORD	NEXTSTATE
	.ENDC
	.IFF
	.WORD	$$S+2
	.ENDC
	.RESTORE
	.ENDM
 
;
; DEFINE DATA STRUCTURE
;
 
	.MACRO	$DSECT
	.PSECT	$ABS$,ABS
	.ENDM
 
;
; EQUATED SYMBOLS:
;
; DEFINE TOKEN VALUES
;
 
CHR$K_EOL=14				; END OF LINE
CHR$K_PERCE=13				; PERCENT SIGN
 
;
; DEFINE ARGUMENT LIST OFFSETS
;
 
	$DSECT
 
$$$=.
 
	.BLKL	1
STRNG:	.BLKL	1			; ADDRESS OF STRING DESCRIPTOR
VALUE:	.BLKL	1			; ADDRESS TO RECEIVE VALUE
 
;
; DEFINE TRANSITION TABLE OFFSETS
;
.=$$$
 
TOKEN:	.BLKB	1			; VALUE OF TOKEN
ACTION:	.BLKW	1			; ADDRESS OF ACTION ROUTINE
NEXTSTATE:.BLKW	1			; NEXT STATE
TRSIZE:					; SIZE OF TRANSITION TABLE ENTRY
 
;
; OWN STORAGE:
;
; STATE TABLE AND TRANSITION LIST FOR UIC STRING
;
 
	STATE	BEGIN			;
	TRAN	CHR$K_LBRAKT,LBRCKT	; LEFT BRACKET
	TRAN				;
	STATE	A1			;
	TRAN	CHR$K_ALPHA,ALPHAN,A1	; ALPHABETIC
	TRAN	CHR$K_NUMERIC,ALPHAN,A1	; NUMERIC
	TRAN	CHR$K_DOT,ALPHAN,A1	; DECIMAL POINT
	TRAN	CHR$K_PERCE,ALPHAN,A1	; PERCENT SIGN
	TRAN	CHR$K_COMMA,COMMA	; COMMA
	TRAN				;
	STATE	A2			;
	TRAN	CHR$K_ALPHA,ALPHAN,A2	; ALPHABETIC
	TRAN	CHR$K_NUMERIC,ALPHAN,A2	; NUMERIC
	TRAN	CHR$K_DOT,ALPHAN,A2	; DECIMAL POINT
	TRAN	CHR$K_PERCE,ALPHAN,A2	; PERCENT SIGN
	TRAN	CHR$K_RBRAKT		;
	TRAN				;
	STATE				;
	TRAN	CHR$K_EOL,,$END		; TERMINATE ON END OF LINE
	TRAN				;
 
	.PSECT	RUN_CVTUIC_DAT	RD,WRT,BYTE
 
GROUP:	.BLKL	2			; STRING DESCRIPTOR FOR GROUP
OWNER:	.BLKL	2			; STRING DESCRIPTOR FOR OWNER
STRNGAD:.BLKL	1			; ADDRESS OF CURRENT STRING DESCRIPTOR
UIC:	.BLKL	1			; UIC ADDRESS

;+
; RUN_CVTUIC - CONVERT UIC TO BINARY
;
; THIS PROCEDURE IS CALLED TO PARSE A UIC SPECIFICATION AND CONVERT THE
; GROUP AND OWNER STRINGS TO BINARY.
;
; INPUTS:
;
;	AP POINTS TO AN ARGUMENT LIST IN THE FOLLOWING FORMAT
;
;		.LONG	2			; COUNT
;		.LONG	STRNG			; ADDRESS OF UIC STRING DESCRIPTOR
;		.LONG	UIC			; ADDRESS OF LONGWORD TO RECEIVE UIC
;
; OUTPUTS:
;
;	R0 LBS = UIC SUCCESFULLY CONVERTED
;
;	R0 LBC = SYNTAX ERROR IN UIC SPECIFICATION
;
;-
 
	.PSECT	RUN_CVTUIC	NOWRT
 
RUN_CVTUIC::				;
	.WORD	^M<R1,R2,R3,R4,R5,R6,R7> ; SAVE R1 - R7
	CLRQ	W^GROUP			; RESET STRING DESCRIPTOR FOR GROUP
	CLRQ	W^OWNER			; RESET STRING DESCRIPTOR FOR OWNER
	MOVQ	@STRNG(AP),R5		; GET GET STRING DESCRIPTOR IN R5, R6
	MOVAB	W^BEGIN,R7		; POINT TO START OF STATETABLES
	BSBB	RUN_PARS		; PARSE STRING
	BLBC	R0,10$			; IF LBC SYNTAX ERROR
	MOVAB	W^OWNER,R1		; GET OWNER STRING ADDRESS
	CLRL	R5			; CLEAR WORD INDEX
	BSBB	20$			; CONVERT GROUP TO NUMERIC
	BLBC	R0,10$			; IF LBC ERROR
	MOVAB	W^GROUP,R1		; GET ADDRESS OF GROUP STRING
	INCL	R5			; INCREMENT WORD INDEX
	BSBB	20$			; CONVERT OWNER TO NUMERIC
10$:					;
	RET				;
 
;
; CONVERT GROUP OR OWNER TO BINARY
;
 
20$:					;
	MOVAB	W^UIC,-(SP)		; PUSH ADDRESS TO RECEIVE VALUE
	MOVL	(SP),R2			; COPY ADDRESS
	MOVL	R1,-(SP)		; PUSH ADDRESS OF STRING DESCRIPTOR
	CALLS	#2,LIB$CVT_OCTBIN	; CONVERT TO BINARY
	BLBC	R0,30$			; IF LBC ERROR
	CLRL	R0			; ASSUME VALUE TOO LARGE
	TSTW	2(R2)			; VALUE OK?
	BNEQ	30$			; IF NEQ NO
	MOVW	(R2),@VALUE(AP)[R5]	; RETURN VALUE
	INCL	R0			; SET SUCCESS
30$:					;
	RSB				;
	.PAGE
	.SBTTL	RUN_PARS - PARSE A STRING
 
;+
; RUN_PARS - PARSE A STRING
;
; THIS ROUTINE IS ENTERED VIA A BSB OR JSB TO PERFORM TABLE DRIVEN PARSING.
; IT REQUIRES A SET OF STATE AND CORRESPONDING TRANSITION TABLES THAT DEFINE
; THE SYNTAX OF THE STRING TO BE PARSED.
;
; THE SET OF TOKENS RECOGNIZED IS LIMITED TO THE FOLLOWING:
;
;	ALPHABETIC
;	NUMERIC
;	DOT (.)
;	SLASH (/)
;	SEMICOLON (;)
;	LEFT BRACKET ([)
;	RIGHT BRACKET (])
;	COLON (:)
;	BLANK
;	DOLLAR SIGN ($)
;	UNDERSCORE (_)
;	PERCENT (%)
;	END-OF-STRING
;
;
; INPUTS:
;
;	R5, R6 = STRING DESCRIPTOR
;	R7 = ADDRESS OF STATE TABLES
;
; OUTPUTS:
;
;	R0 LBS = STRING IS SYNTACTICALLY CORRECT
;
;	R0 LBC = SYNTAX ERROR
;
;		R5 = COUNT OF REMAINING UNPROCESSED CHARACTERS
;		R6 = ADDRESS OF CHARACTER IN ERROR
;
;-
 
RUN_PARS::				;
	INCW	R5			; BIAS STRING COUNT
	DECL	R6			; BIAS STRING POINTER
20$:					;
	MOVZWL	(R7),R7			; POINT TO TRANSITION TABLE FOR STATE
	MOVL	#CHR$K_EOL,R0		; ASSUME END OF STRING
	DECW	R5			; AT END?
	BEQL	30$			; IF EQL YES
	INCL	R6			; INCREMENT STRING POINTER
	MOVL	#CHR$K_PERCE,R0		; ASSUME PERCENT SIGN
	CMPB	(R6),#^A/%/		; PERCENT SIGN?
	BEQL	30$			; IF EQL YES
	BSBW	CHR$TSTCHR		; DETERMINE CHARACTER TYPE
30$:					;
	ADDW	#TRSIZE,R7		; POINT TO NEXT TABLE ENTRY
	TSTB	TOKEN(R7)		; AT END OF TRANSITION TABLE?
	BLSS	ILLCHR			; IF LSS YES, ILLEGAL
	CMPB	R0,TOKEN(R7)		; TEST INPUT
	BNEQ	30$			; IF NEQ, GO TO NEXT TRANSITION
	MOVZWL	ACTION(R7),R0		; GET ADDRESS OF ACTION ROUTINE
	BEQL	40$			; IF EQL NONE
	JSB	(R0)			; CALL ACTION ROUTINE
40$:					;
	MOVZWL	NEXTSTATE(R7),R7	; GET OFFSET TO NEXT STATE
	BNEQ	20$			; IF NEQ HAVE NEXT STATE
	MOVL	#1,R0			; SET SUCCESS
	BRB	EXIT			; EXIT
 
;
; ILLEGAL CHARACTER
;
 
ILLCHR:					;
	CLRL	R0			; SET FAILURE
EXIT:					;
	RSB				;
	.PAGE
	.SBTTL	UIC PARSE ACTION ROUTINES
 
;
; ACCUMULATE AN ALPHANUMERIC STRING
;
 
ALPHAN:					;
DOT:					;
	INCL	@W^STRNGAD		; INCREMENT STRING COUNT
	RSB				;
 
;
; COMMA
;
 
COMMA:					;
	MOVAB	W^OWNER,W^STRNGAD	; BEGIN OWNER STRING DESCRIPTOR
	MOVAB	1(R6),W^OWNER+4		; POINT TO START OF STRING
	RSB				; RETURN
 
;
; LEFT BRACKET
;
 
LBRCKT:					;
	MOVAB	W^GROUP,W^STRNGAD	; POINT TO GROUP STRING DESCRIPTOR
	MOVAB	1(R6),W^GROUP+4		; POINT TO START OF STRING
	RSB				;
 
	.END
