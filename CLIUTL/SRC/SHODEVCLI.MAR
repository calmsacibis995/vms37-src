	.TITLE	SHOW$DEVI_CLI	- SHOW DEVICES: CLI INTERFACE
	.IDENT	'V03-001'
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;

;++
;  FACILITY :	DCL SHOW COMMAND
;
; ABSTRACT:	SHOW DEVICES  COMMAND OPTION.
;		In this module, the calls to the CLI necessary to parse
;		the command line are performed.
;
;
; ENVIRONMENT:
;
;	RUNS IN USER MODE
;
;
; AUTHOR: 	B. U. WALTHER,	CREATION DATE: 17-OCT-1977
;
; MODIFIED BY:
;
;	V03-001	GAS0063		Gerry Smith		16-Mar-1982
;		Add further checks for conflicting qualifiers.
;
;	V008	TMH0008		Tim Halvorsen		04-Feb-1982
;		Remove reference to CLI$K_ symbols at assembly time.
;
;	V02-007	LMP0006		L. Mark Pilant,		11-Jan-1982  15:00
;		Add support for a /WINDOWS qualifier with the /FILES qualifier.
;
;	V02-006	GAS0023		Gerry Smith		30-Nov-1981
;		Remove GAS0022.  If /FILES and some other option are
;		both specified, exit with error "Conflicting qualifiers"
;
;	V02-005 GAS0022		Gerry Smith		30-Nov-1981
;		Change logic so that SHOW DEVICE/FILES can be invoked
;		as well as other options.
;
;	V02-004	PHL0016		Peter H. Lipman		14-Sep-1981
;		Show Device now translates device names up to 10 times
;		and correctly handles the new "__" hidden device prefix.
;		It also allows for process permanent files to have device
;		names that are themselves logical names.
;
;	V02-003	PHL0013		Peter H. Lipman		24-Aug-1981
;		Allow a device name to end with a ":" and ignore any
;		trailing characters.  This allows the device to be used
;		from a file specification without parsing it off.
;
;	V03-001	GAS0002		Gerry Smith	03-Aug-1981
;		Add SHOW DEVICE/FILES option.  Change parse of
;		device name so that logical names can end with colons.
;
;--


	.SBTTL	DECLARATIONS

;
; INCLUDE FILES:
;

	$CLIDEF				; COMMAND LANGUAGE INTERFACE DEFINITIONS
	$DEVDEF				; DEVICE CHARACTERISTICS
	$SHRDEF				; DEFINE SHARED MESSAGES
	$LOGDEF				; logical name definitions

;
; EQUATED SYMBOLS:
;

	$GBLINI	GLOBAL				; MAKE DEFINITIONS GLOBAL
	$VIELD	DEVI,0,<-			; DEFINE BITMASKS
			<DEVN,,M>, -		; DEVICE NAME PRESENT
			<ALLO,,M>, -		; ALLOCATED BIT
			<BRIE,,M>,-		; BRIEF BIT
			<FULL,,M>, -		; FULL BIT
			<MOUN,,M>, -		; MOUNT BIT
    			<FILE,,M>, -		; FILES BIT
    			<SYST,,M>, -		; SYSTEM BIT
    			<USER,,M>, -		; USERNAME BIT
			<WIND,,M>,-		; WINDOWS BIT
			>
DEVNAM_BUFF_LEN = 15				; MAXIMUM LENGTH OF GENERIC DEVICE NAME

SHOW$_CONFQUAL = <120@16> + SHR$_CONFQUAL + 2	; DEFINE SHOW$_CONFQUAL

;
; OWN STORAGE
;

	.PSECT	SHOW$RWDATA	LONG,RD,WRT,NOEXE

;
; DEFINE CLI CALL BACK STRUCTURES
;

SHOW_DEVI_GETQU:
	$CLIREQDESC	-			; CLI REQUEST DESCRIPTOR BLOCK
		RQTYPE=CLI$K_GETQUAL, -		; TO GET QUALIFIERS
		QUALST=SHOW_DEVI_QUALS 		; POINTER TO QUALIFIER LIST
SHOW_DEVI_QUALS:
	$CLIQUALDEF	-			;
		QDCODE=CLI$K_SHDV_ALLO, -	; SHOW DEVICES/ALLOCATED
		SETLST=DEVI$V_ALLO, -		; SET BIT
		TRUACT=DEVI_ALLO_PRES		; ACTION ROUTINE
	$CLIQUALDEF	-			;
		QDCODE=CLI$K_SHDV_MOUN, -	; SHOW DEVICES/MOUNTED
		SETLST=DEVI$V_MOUN,-		; SET LIST
		TRUACT=DEVI_MOUN_PRES		; ACTION ROUTINE
	$CLIQUALDEF	-
		QDCODE=CLI$K_SHDV_BRIE,-	; SHOW DEVICES/BRIEF
		SETLST=DEVI$V_BRIE		; SET LIST
	$CLIQUALDEF	-
		QDCODE=CLI$K_SHDV_FULL,	-	; SHOW DEVICES/FULL
		SETLST=DEVI$V_FULL		; SET LIST
    	$CLIQUALDEF	-
    		QDCODE=CLI$K_SHDV_FILE, -	; SHOW DEVICES/FILE
    		SETLST=DEVI$V_FILE		; SET LIST
    	$CLIQUALDEF	-
    		QDCODE=CLI$K_SHDV_SYST,	-	; SHOW DEVICES/FILE/SYSTEM
		TRUACT=DEVI_SYST_PRES, -
		FLSACT=DEVI_NOSY_PRES, -
    		QDFLGS=<CLI$V_QDEXPA>
	$CLIQUALDEF	-
		QDCODE=CLI$K_SHDV_WIND, -	; SHOW DEVICES/FILES/WINDOWS
		TRUACT=DEVI_WIND_PRES
	$CLIQUALDEF	END_LIST		; END OF QUALIFIER LIST
SHOW_DEVI_GETIN:
	$CLIREQDESC	-			;
		RQTYPE=CLI$K_INPUT1, -	 	; GET PARAMETER
		BITNUM=DEVI$V_DEVN,-		; BIT FOR PARAMETER PRESENT
		PRSACT=DEVI_DEVN_PRES		;
DEVNAM_BUFF:
	.BLKB	DEVNAM_BUFF_LEN			; BUFFER FOR PARSED DEVICE NAME
DEVI_Q_TRDEVN:				
	.LONG	0				; DESCRIPTOR TO TRANSLATED DEVICE NAME
	.LONG	DEVI_T_TRDEVN
DEVI_T_TRDEVN:
	.BLKB	LOG$C_NAMLENGTH			; BUFFER FOR TRANSLATED DEVICE NAME

;
; global storage
;
DEVI$L_BITLIS::
	.LONG	0				; BIT LIST FOR CLI
DEVI$L_CH_MSK::
	.LONG	^C<0>			; MASK FOR DEVICE CHARACTERISTICS
						; ( RELEVANT BITS ARE CLEARED)
DEVI$L_CH_CRIT::
	.LONG	0				; CRITERION FOR DEVICE CHARACTERISTICS 
						; ( I.E AFTER APPLYING ABOVE MASK, DEVICE CHARS MUST MATCH THIS WORD)
DEVI$Q_DEVNAM::
	.LONG	0				; QUADWORD DESCRIPTOR OF PARSED
	.LONG	DEVNAM_BUFF			; GENERIC DEVICE NAME
DEVI$W_UNIT::
	.BLKL	1				; DEVICE UNIT RESULTING FROM PARSE
						; (NOTE: THE ABOVE HAVE TO BE CONTIGUOUS)

	.SBTTL	SHOW$DEVI_CLI	- SHOW DEVICES: CLI INTERFACE
;++
; FUNCTIONAL DESCRIPTION:
;
;	This routine performs the necessary calls to the CLI to parse the
;	command line. True action routines are called for each of the
;	qualifiers found present.
;	The routine invoked if an input parameter is present parses the
;	latter as a physical device name and, after validation,
;	returns the parsed device name and unit in global locations.
;
; CALLING SEQUENCE:
;
;	CALLS	#2,SHOW$DEVICES
;
; INPUT PARAMETERS:
;
;	offset	CLI$A_UTILSERV	=	 address of the CLI utility service routine
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	R0	= status code
;
; SIDE EFFECTS:
;
;	NONE
;
;--

	.PSECT	SHOW$CODE	BYTE,RD,NOWRT,EXE
	.ENTRY	SHOW$DEVI_CLI,^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>
;
; request qualifiers from CLI
;
	PUSHAB	W^DEVI$L_BITLIS			; BIT LIST
	PUSHAB	W^SHOW$A_CLIWORK		; CLI WORK AREA
	PUSHAB	W^SHOW_DEVI_GETQU		; CLI REQUEST QUALIFIER PARSING
	CALLS	#3,@CLI$A_UTILSERV(AP)		; CALL CLI UTILITY SERVICE ROUTINE
;
; request input parameter (if any) from CLI
;
	MOVZWL	#SS$_NORMAL,SHOW$L_STATUS	; assume success
	PUSHAB	W^DEVI$L_BITLIS			; BIT LIST
	PUSHAB	W^SHOW$A_CLIWORK		; CLI WORK AREA
	PUSHAB	W^SHOW_DEVI_GETIN		; REQUEST INPUT PARAMETER (DEVICE NAME)
	CALLS 	#3,@CLI$A_UTILSERV(AP)		; CALL CLI 
	MOVL	W^SHOW$L_STATUS,R0		; load status set by action routine
	BLBC	R0,90$				; branch if error
;
; check to see if SHOW DEVICES/FILES was requested.
;
	PUSHAL	G^DEVI_Q_TRDEVN			; PUT DEVICE DESCRIPTOR ON STACK
	MOVL	#SHOW$_CONFQUAL,R0		; ASSUME CONFLICTING QUALIFIERS

    	BBC	#DEVI$V_FILE,W^DEVI$L_BITLIS,40$
;
; check to see if other options were set.  If so, issue an error message.
;
	BITL	#DEVI$M_ALLO!DEVI$M_FULL-	; CHECK FOR PRESENCE OF
		!DEVI$M_MOUN,DEVI$L_BITLIS	; OTHER OPTIONS
	BNEQ	90$				; IF PRESENT, EXIT WITH ERROR
	CALLS	#1,G^SHOW$FILES			; ELSE CALL FILES PART
	BRB	90$				; EXIT

;
; check to see if /files options were set.  If so, issue an error message.
;
40$:
	BITL	#DEVI$M_FILE!DEVI$M_SYST-	; CHECK FOR PRESENCE OF
		!DEVI$M_WIND!DEVI$M_USER,-	; OTHER OPTIONS
		DEVI$L_BITLIS
	BNEQ	90$				; IF PRESENT, EXIT WITH ERROR
	CALLS	#1,G^SHOW$DEVI_UTL		; ELSE CALL SHOW DEVICES

;
; Exit
;


90$:
	MOVL	R0,G^SHOW$L_STATUS		; save status
	RET					; AND RETURN

	.SBTTL	DEVI_ALLO_PRES	- ACTION ROUTINE FOR /ALLOCATE QUALIFIER

;++
; FUNCTIONAL DESCRIPTION:
;
;	Action routine for /ALLOCATE qualifier true.
;
;
; CALLING SEQUENCE:
;
;		CALLS	#3,DEVI_ALLO_PRES
;	( called by the CLI as a true action routine)
;
; INPUT PARAMETERS:
;
;	not used
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	modifies bitmasks governing the search algorithm according
;	 to device characteristics
;
; COMPLETION CODES:
;
;	NONE
;
; SIDE EFFECTS:
;
;	NONE
;
;--

	.PSECT	SHOW$CODE	BYTE,RD,NOWRT,EXE
DEVI_ALLO_PRES:
	.WORD	0
	BICL	#DEV$M_ALL,W^DEVI$L_CH_MSK		; ALLOCATED BIT IS RELEVANT
	BISL	#DEV$M_ALL,W^DEVI$L_CH_CRIT		; ALLOCATED BIT HAS TO BE SET
	RET

	.SBTTL	DEVI_MOUN_PRES	- ACTION ROUTINE FOR /MOUNTED QUALIFIER

;++
; FUNCTIONAL DESCRIPTION:
;
;	Action routine for /MOUNTED qualifier true.
;
;
; CALLING SEQUENCE:
;
;		CALLS 	#3,DEVI_MOUN_PRES
;	( called by the CLI as a true action routine)
;
; INPUT PARAMETERS:
;
;	not used
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	modifies bitmasks governing the search algorithm according
;	 to device characteristics
;
; COMPLETION CODES:
;
;	NONE
;
; SIDE EFFECTS:
;
;	NONE
;
;--

	.PSECT	SHOW$CODE	BYTE,RD,NOWRT,EXE
DEVI_MOUN_PRES:
	.WORD	0
	BICL	#DEV$M_MNT,W^DEVI$L_CH_MSK		; MOUNTED BIT IS RELEVANT
	BISL	#DEV$M_MNT,W^DEVI$L_CH_CRIT		; MOUNTED BIT HAS TO BE SET
	RET

	.sbttl	devi_syst_act	- action routines for /[NO]SYSTEM qualifier

;++
; FUNCTIONAL DESCRIPTION:
;
;	Action routines for /[NO]SYSTEM qualifiers
;
;
; CALLING SEQUENCE:
;
;		CALLS 	#3,DEVI_SYST_PRES  for /SYSTEM
;         or    CALLS   #3,DEVI_NOSY_PRES  for /NOSYSTEM
;
; INPUT PARAMETERS:
;
;	not used
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	modifies DEVI$L_BITLIS, to indicate which files to display
;
; COMPLETION CODES:
;
;	NONE
;
; SIDE EFFECTS:
;
;	NONE
;
;--

	.PSECT	SHOW$CODE	BYTE,RD,NOWRT,EXE
DEVI_SYST_PRES:
	.WORD	0
	BISL	#DEVI$M_SYST,DEVI$L_BITLIS	; SET SYSTEM BIT
	RET

DEVI_NOSY_PRES:
	.WORD	0
	BISL	#DEVI$M_USER,DEVI$L_BITLIS	; SET USER BIT
	RET

	.SBTTL	DEVI_WIND_PRES - /WINDOWS QUALIFIER SEEN

;++
; FUNCTIONAL DESCRIPTION:
;
;	Action routines for /WINDOWS qualifier
;
; CALLING SEQUENCE:
;
;		CALLS 	#3,DEVI_WIND_PRES  for /WINDOWS
;
; INPUT PARAMETERS:
;
;	not used
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	modifies DEVI$L_BITLIS, to indicate which files to display
;
; COMPLETION CODES:
;
;	NONE
;
; SIDE EFFECTS:
;
;	NONE
;
;--

	.PSECT	SHOW$CODE	BYTE,RD,NOWRT,EXE
DEVI_WIND_PRES:
	.WORD	0
	BISL2	#DEVI$M_FILE!DEVI$M_WIND,DEVI$L_BITLIS	; IN CASE /FILES NOT
					; GIVEN IN ADDITION TO /WINDOWS
	RET

	.SBTTL	DEVI_DEVN_PRES	-ACTION ROUTINE FOR INPUT PARAMETER PRESENT
;++
; FUNCTIONAL DESCRIPTION:
;
;	Action routine for input parameter present.
;
;	Parses the input parameter as a physical device name, i.e:
;		<alphabetic string> <digit string> < colon>
;		   (mandatory)	      ( optional)   ( optional)
;	If  valid, returns quadword descriptor of generic device name
;	and binary value of unit (-1 if no unit specified) in the following
;	global locations, respectively:
;		DEVI$Q_DEVNAM
;		DEVI$W_UNIT
;	A error message is issued if an invalid string is detected.
;
;
; CALLING SEQUENCE:
;
;	This routine is called by the CLI if an input parameter is found
;	present.
;
; INPUT PARAMETERS:
;
;	NOT USED
;
; IMPLICIT INPUTS:
;
;	COMMAND LINE
;
; OUTPUT PARAMETERS:
;
;	DEVI$Q_DEVNAM	= QUADWORD DESCRIPTOR OF GENERIC DEVICE NAME STRING
;	DEVI$W_UNIT	= BINARY UNIT NUMBER. ( =-1 MEANS NO UNIT SPECIFIED)
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	SHOW$L_STATUS	= SS$_NORMAL	: SUCCESSFUL PARSING OF DEVICE NAME
;			= SS$_IVDEVNAM	: INVALID DEVICE MAME
;
; SIDE EFFECTS:
;
;	NONE
;
;--

	.PSECT	SHOW$CODE	BYTE,RD,NOWRT,EXE

DEVI_DEVN_PRES:
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9>

;
; parse device name
;

	BSB	PARSE_DEVNAM			; PARSE DEVICE NAME
	BLBS	R0,90$				; BRANCH IF SUCCESS
	PUSHL	#SHOW$_IVDEVNAM			; MESSAGE CODE FOR 'INVALID DEVICE'
	PUSHAL	W^DEVI_Q_TRDEVN			; DESCRIPTOR TO TRANSLATED INPUT PARAMATER
	CALLS 	#2,W^SHOW$PRINT_MSG		; ISSUE MESSAGE
	BISL	#STS$M_INHIB_MSG,R0		; inhibit further message output
90$:
	MOVL	R0,W^SHOW$L_STATUS		; save status
	RET					; AND RETURN

;
; subroutine to parse device name
; R2-R9 are altered
;

PARSE_DEVNAM:

;
; TRANSLATE INPUT PARAMETER
;
	MOVL	#10,R6			; MAXIMUM NUMBER OF TRANSLATES
	MOVAB	W^SHOW_DEVI_GETIN+CLI$Q_RQDESC,R7 ; GET DESCRIPTOR ADDRESS
;
; R6 = ITERATION COUNTER
; R7 = DESCRIPTOR OF STRING TO BE TRANSLATED
;
1$:
	LOCC	#^A/:/,(R7),@4(R7)	; IGNORE ":" AND BEYOND
	SUBL	R0,(R7)			; ADJUST SIZE OF DEVICE NAME STRING
	MOVQ	(R7),-(SP)		; DESCRIPTOR FOR NAME TO TRANSLATE
	MOVAB	W^DEVI_Q_TRDEVN,R7	; DESCRIPTOR FOR TRANSLATED NAME
	MOVZBL	#LOG$C_NAMLENGTH,(R7)	; INSERT LENGTH OF BUFFER DESCRIPTOR
	MOVL	SP,R0			; ADDRESS OF INPUT NAME DESRIPTOR
	$TRNLOG_S	-			;
		LOGNAM=(R0),-		; INPUT DESCRIPTOR
		RSLBUF=(R7),-		; DESCRIPTOR TO TRANSLATED STRING
		RSLLEN=(R7)		; STORE RESULTANT LENGTH

	ADDL	#8,SP			; CLEAN OF INPUT NAME DESCRIPTOR
	BLBS	R0,5$			; CONTINUE ON SUCCESS
	RSB				; ELSE RETURN ERROR CODE

;
; NOTE THAT R0 MUST BE SAVED FOR THE NOTRAN TEST BELOW
;
5$:
	CMPB	W^DEVI_T_TRDEVN,#27	; CHECK FOR ESCAPE
	BNEQU	7$			; BRANCH IF NOT ESCAPE
	ADDL2	#4,4(R7)		; ADJUST POINTER
	SUBL2	#4,(R7)			; ADJUST LENGTH
	BLEQ	11$			; BRANCH IF BAD DEVICE
7$:
	MOVQ	(R7),R8			; R8 = SIZE, R9 = ADDRESS
	ADDL2	R9,R8			; R8 = LAST + 1 BYTE
	CMPB	(R9),#^A/_/		; 1ST CHARACTER UNDERSCORE ?
	BNEQU	8$			; NOT UNDERSCORE
	INCL	R9			; SKIP UNDERCORE
	CMPB	(R9),#^A/_/		; SECOND UNDERSCORE FOR HIDDEN DEVICE
	BNEQU	9$			; BRANCH IF ONLY ONE FOUND
	INCL	R9			; SKIP THE SECOND ONE TOO
	BRB	9$			;
8$:
	CMPW	R0,#SS$_NOTRAN		; IF LAST $TRNLOG DID NOT YIELD
	BEQL	9$			; A STATUS OF NOTRAN
	SOBGTR	R6,1$			; AND IF ITERATION COUNT HAS NOT RUN OUT
					; THEN TRY TO TRANSLATE THIS NAME
9$:
	MNEGL	#1,R6			; RESULTING UNIT NUMBER
	MOVL	R6,R4			; LENGTH OF STRING PARSED SO FAR

;
; check for alphabetic
;

10$:
	CMPL	R9,R8				; END OF INPUT PARAMETER ?
	BGEQU	75$				; BRANCH IF END OF INPUT
	MOVZBL	(R9)+,R7			; FETCH NEXT CHARACTER
	AOBLEQ	#DEVNAM_BUFF_LEN,R4,12$		; CHECK LENGTH OF RESULTANT STRING
11$:	BRB	70$				; BRANCH IF STRING TOO LONG
12$:
	CMPB	R7,#^A/A/			; UPPER CASE ALPHABETIC ?
	BLSSU	40$				; IF NO, MAYBE A DIGIT
	CMPB	R7,#^A/Z/				; UPPER CASE ?
	BLEQU	20$				; YES, GO TO STORE
	CMPB	R7,#^A/a/			; LOWER CASE ALPHABETIC ?
	BLSSU	70$				; IF NO, ERROR
	CMPB	R7,#^A/z/			; LOWER CASE ?
	BGTRU	70$				; IF NO, ERROR
20$:
	MOVB	R7,DEVNAM_BUFF(R4)		; STORE CHARACTER
	BRB	10$				; AND GO FETCH NEXT ONE

;
; check for digit
;

30$:
	CMPL	R9,R8				; END OF INPUT PARAMETER ?
	BEQLU	80$				; BRANCH IF END
	MOVZBL	(R9)+,R7			; FETCH NEXT CHARACTER
40$:
	CMPB	R7,#^A/0/			; IS IT A DIGIT ?
	BLSSU	70$				; IF NO, ERROR
	CMPB	R7,#^A/9/			; DIGIT ?
	BGTRU	50$				; IF NO, MAYBE A COLON
	SUBB2	#^A/0/,R7			; CONVERT TO BINARY
	TSTW	R6				; FIRST DIGIT ?
	BGEQ	42$				; BRANCH IF NO
	CLRL	R6				; INITIALIZE RESULTANT UNIT NUMBER
42$:
	MULW	#10,R6				; SCALE RESULT BY 10 DECIMAL
	BVS	70$				; IF OVERFLOW, ERROR
	ADDW2	R7,R6				; ADD NEW DIGIT
	BRB	30$				; FETCH NEXT DIGIT

;
; check for colon
;

50$:
	CMPB	R7,#^A/:/			; IS IT A COLON ?
	BEQLU	80$				; IF YES THEN DONE
						; IGNORE TRAILING FILE SPEC
						; ELSE DROP INTO ERROR EXIT

;
; invalid device name
;

70$:
	MOVZWL	#SS$_IVDEVNAM,R0		; INVALID DEVICE NAME
	RSB					; RETURN FROM SUBROUTINE

;
; store parsed values
;

75$:
	INCW	R4				; ADJUST DEVICE NAME LENGTH
80$:
	MOVW	R4,W^DEVI$Q_DEVNAM		; STORE LENGTH OF GENERIC NAME
	MOVW	R6,W^DEVI$W_UNIT		; STORE BINARY UNIT NUMBER
	MOVL	S^#SS$_NORMAL,R0		; INDICATE SUCCESS
	RSB					; RETURN FROM SUBROUTINE
	.END
