MODULE SETPASSWORD(IDENT = 'V03-000') =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	Set Password
!
! ABSTRACT:	Changes a users password in SYSUAF.DAT
!
! ENVIRONMENT:	DCL Set Utility
!
! AUTHOR:	Chris Hume, CREATION DATE: 14-Jun-1979
!
! MODIFIED BY:
!
!	V02-006	HRJ0031		Herb Jacobs		07-Nov-1981
!		Allow setting of null password.
!
!	V02-005	KDM0024		Kathleen D. Morse	02-Oct-1980
!		Change reference to CLIMSG.B32 from CLIMSG$: to LIB$:,
!		to work with new SHRLIB$: in system build procedures.
!
!--

FORWARD ROUTINE
    SET$PASSWORD,			! The module entry point
    REPLACE_PWD,			! Terminal dialogue
    GET_RECORD,				! User Input
    UPDATE_UAF;				! Update the UAF record

EXTERNAL ROUTINE
    LGI$HPWD;
EXTERNAL
    SET$L_STATUS;

LIBRARY
    'SYS$LIBRARY:LIB.L32';
REQUIRE
    'LIB$:CLIMSG.B32';

MACRO
    CSTRING[] = (UPLIT BYTE(%CHARCOUNT(%STRING(%REMAINING)),
		%STRING(%REMAINING)))%;
LITERAL
    ENCRYPT = UAF$C_Purdy,		! Encryption algorithm to use
    RETRY_VERIFY = 1,			! Locked record retry parameters
    RETRY_RLK = 2,
    SLEEP_RLK = 75,
    RECSIZ = 80,
    PWDMAX = 31,			! Maximum length for password string
    FALSE = 0,
    TRUE = 1;

OWN
    OLD_PASSWORD_BUF: VECTOR[RECSIZ,BYTE],
    NEW_PASSWORD_BUF: VECTOR[RECSIZ,BYTE],
    VFY_PASSWORD_BUF: VECTOR[RECSIZ,BYTE],
    OLD_PASSWORD_DSC: BLOCK[8,BYTE] INITIAL(0, OLD_PASSWORD_BUF),
    NEW_PASSWORD_DSC: BLOCK[8,BYTE] INITIAL(0, NEW_PASSWORD_BUF),
    UAFBUF: BLOCK[UAF$C_LENGTH,BYTE],
    INFAB: $FAB(
	FNM = 'SYS$INPUT',
	FAC = (GET)
	),
    INRAB: $RAB(
	ROP = (PMT,RNE),
	USZ = RECSIZ,
	FAB = INFAB
	),
    UAFFAB: $FAB(
	FAC = (GET,UPD),		! access types
	FNM = 'SYSUAF',			! user authorization file name
	DNM = 'SYS$SYSTEM:.DAT',
	SHR = (GET,PUT,DEL,UPD),
	ORG = IDX,
	RFM = VAR,
	MRS = UAF$C_LENGTH
	),
    UAFRAB: $RAB(
	RAC = KEY,
	ROP = RLK,			! allow others to read locked records
	KRF = 0,			! key of reference
	KBF = UAFBUF[UAF$T_USERNAME],
	KSZ = UAF$S_USERNAME,
	UBF = UAFBUF,
	USZ = UAF$C_LENGTH,
	FAB = UAFFAB
	);
BIND
    SYMBOL_STR = CSTRING('ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789$_'),

    Old_Word_String = CSTRING('Old password: '),
    New_Word_String = CSTRING(%CHAR(13),%CHAR(10),'New password: '),
    Verify_String = CSTRING(%CHAR(13),%CHAR(10),'Verification: ');

GLOBAL ROUTINE SET$PASSWORD =
BEGIN
$OPEN(FAB = INFAB);

!
! REPLACE_PWD fails if the old password is invalid or the user can't verify
! the new password.
!

SET$L_STATUS = REPLACE_PWD();
$CLOSE(FAB = INFAB);
.SET$L_STATUS
END;

ROUTINE REPLACE_PWD =
BEGIN
LOCAL
    COUNTER,
    SUCCESS;

!
! First get the old password for validation later.  This helps protect
! unattended terminals.
!

$CONNECT(RAB = INRAB);
INRAB[RAB$L_UBF] = OLD_PASSWORD_BUF;
IF NOT GET_RECORD( Old_Word_String )
THEN
    RETURN CLI$_PWDNOTVER;
OLD_PASSWORD_DSC[DSC$W_LENGTH] = .INRAB[RAB$W_RSZ];

!
! Obtain the new password.
!

INRAB[RAB$L_UBF] = NEW_PASSWORD_BUF;
IF NOT GET_RECORD( New_Word_String )
THEN
    RETURN CLI$_PWDNOTVER;

IF ((NEW_PASSWORD_DSC[DSC$W_LENGTH] = .INRAB[RAB$W_RSZ]) GTRU PWDMAX)
THEN
    RETURN CLI$_PWDSYNTAX;		! New password must have legal size.

!
! Check new password for illegal characters
!

INCR COUNTER TO .INRAB[RAB$W_RSZ]-1
DO
    IF CH$FAIL(CH$FIND_CH(.SYMBOL_STR<0,8>, SYMBOL_STR+1,
				.NEW_PASSWORD_BUF[.COUNTER]))
    THEN
	RETURN CLI$_PWDSYNTAX;

!
! Since all reads are done with echo disabled the new password is verified.
!

INRAB[RAB$L_UBF] = VFY_PASSWORD_BUF;
INCR COUNTER FROM 1 TO RETRY_VERIFY
DO
    BEGIN
    IF NOT GET_RECORD( Verify_String )
    THEN
	RETURN CLI$_PWDNOTVER;
    IF .INRAB[RAB$W_RSZ] NEQU .NEW_PASSWORD_DSC[DSC$W_LENGTH]
    THEN
	RETURN CLI$_PWDNOTVER;
    IF CH$NEQ(.INRAB[RAB$W_RSZ], NEW_PASSWORD_BUF,
			.INRAB[RAB$W_RSZ], VFY_PASSWORD_BUF, 0)
    THEN
	RETURN CLI$_PWDNOTVER;
    END;

!
! Now obtain our User Authorization File record to update the password.
!

IF NOT (SUCCESS = $OPEN(FAB = UAFFAB))
THEN
    RETURN .SUCCESS;
SUCCESS = UPDATE_UAF();
$CLOSE(FAB = UAFFAB);
.SUCCESS
END;

ROUTINE GET_RECORD( PROMPT_STRING_ADR ) =
BEGIN
BIND
    PROMPT_STRING = .PROMPT_STRING_ADR;
LOCAL
    COUNTER,
    SUCCESS;

!
! Set the specified prompt string and perform the $GET.
!

INRAB[RAB$L_PBF] = PROMPT_STRING+1;
INRAB[RAB$B_PSZ] = .PROMPT_STRING<0,8>;
SUCCESS = $GET(RAB = INRAB);

!
! The following upcasing code is required because the CVT record option
! is only supported by the Terminal Driver (not by RMS).
!

IF .INRAB[RAB$W_RSZ] NEQ 0
THEN
    BEGIN
    BIND
	RECBUF = .INRAB[RAB$L_RBF]: VECTOR[,BYTE];

    INCRU COUNTER TO .INRAB[RAB$W_RSZ]-1
    DO
	IF .RECBUF[.COUNTER] GEQU 'a' AND .RECBUF[.COUNTER] LEQU 'z'
	THEN
	    RECBUF[.COUNTER] = .RECBUF[.COUNTER] AND NOT %O'040';
    END;

.SUCCESS
END;

ROUTINE UPDATE_UAF =
BEGIN
OWN
    USERLEN: WORD,
    USERNAME_DSC: BLOCK[8,BYTE] INITIAL(UAF$S_USERNAME, UAFBUF[UAF$T_USERNAME]),
    ENCRYPT_BUF: VECTOR[UAF$S_PWD,BYTE],
    ENCRYPT_DSC: BLOCK[8,BYTE] INITIAL(UAF$S_PWD, ENCRYPT_BUF);
BIND
    USERNAME_ITEM = UPLIT LONG(WORD(UAF$S_USERNAME,JPI$_USERNAME),
			UAFBUF[UAF$T_USERNAME],USERLEN,0),
    WAKEDELTA = UPLIT LONG(-10*1000*SLEEP_RLK,-1);
LOCAL
    TIME_BUF: BLOCK[8,BYTE],
    COUNTER,
    SUCCESS;

IF NOT (SUCCESS = $CONNECT(RAB = UAFRAB))
THEN
    RETURN .SUCCESS;
$GETJPI(ITMLST = USERNAME_ITEM);
CH$COPY(.USERLEN,UAFBUF[UAF$T_USERNAME],' ',
			UAF$S_USERNAME,UAFBUF[UAF$T_USERNAME]);

!
! If the record is locked by another process pause briefly and try again.
!

COUNTER = RETRY_RLK;
WHILE ((SUCCESS = $GET(RAB = UAFRAB)) EQL RMS$_RLK)
			AND ((COUNTER = .COUNTER-1) GEQ 0)
DO
    IF $SCHDWK(DAYTIM = WAKEDELTA)
    THEN
	$HIBER;
IF NOT .SUCCESS
THEN
    RETURN .SUCCESS;

!
! Validate the old password and check that our password isn't locked.
!

LGI$HPWD(ENCRYPT_DSC, OLD_PASSWORD_DSC, .UAFBUF[UAF$B_ENCRYPT],
			.UAFBUF[UAF$W_SALT], USERNAME_DSC);

IF .OLD_PASSWORD_DSC[DSC$W_LENGTH] EQL 0
THEN
    CH$COPY(0,ENCRYPT_BUF,0,UAF$S_PWD,ENCRYPT_BUF);

IF CH$EQL(UAF$S_PWD, ENCRYPT_BUF, UAF$S_PWD, UAFBUF[UAF$Q_PWD], 0)
THEN
    IF .UAFBUF[UAF$V_LOCKPWD]
    THEN
	SUCCESS = CLI$_PWDLOCKED
    ELSE

!
! Set the new one.
!

	BEGIN
	$GETTIM(TIMADR = TIME_BUF);	! Obtain a 16 bit salt
	UAFBUF[UAF$W_SALT] = .TIME_BUF<3*8,16>;
	UAFBUF[UAF$B_ENCRYPT] = ENCRYPT;
	IF .INRAB[RAB$W_RSZ] NEQ 0
	THEN
	    BEGIN
	    LGI$HPWD(ENCRYPT_DSC, NEW_PASSWORD_DSC, .UAFBUF[UAF$B_ENCRYPT],
				.UAFBUF[UAF$W_SALT], USERNAME_DSC);
	    CH$COPY(UAF$S_PWD, ENCRYPT_BUF, 0,
				UAF$S_PWD, UAFBUF[UAF$Q_PWD]);
	    END
	ELSE
	    CH$COPY(0,ENCRYPT_BUF,0,UAF$S_PWD,UAFBUF[UAF$Q_PWD]);
	SUCCESS = $UPDATE(RAB = UAFRAB);
	END
ELSE
    SUCCESS = CLI$_PWDNOTVAL;
.SUCCESS
END;
END
ELUDOM
