	.TITLE	RUFVECTOR - Recovery Unit Facility System Service Vector
	.IDENT	'V03-000'
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;
; Facility:
;	Recovery Unit Management Facility
;++
; Abstract:
;	This module contains the Recovery Unit Management Facility (RUF)
;	system service library vectors.
;
;	These services represent the user-accesible
;	portion of the RUF. These services implement the RUF, with help
;	from the recoverable facilities (RMS,DBMS,TPSS,...) that have been
;	implemented to co-operate with RUF.
;
; Overview:
;	The following services are vectored thru this module:
;
;	    RUF$START(id)
;	    RUF$END()
;	    RUF$PH1_END()
;	    RUF$PH2_END()
;	    RUF$CANCEL()
;	    RUF$MARKPT(mkpt)
;	    RUF$RESET(mkpt)
;	    RUF$DCLRUH(addr,param)
;	    RUF$CANRUH(addr)
;	    RUF$REENTER()
;	    RUF$MODIFY(sts)
;	    RUF$RUNDOWN(rundown_args)
;--

	.SBTTL	Declarations and Equates
;
;	Include Files
;

;
;	Macro Definitions
;
;	DEFINE_SERVICE - A macro to make the appropriate entries in several
;			 different PSECTs required to define a KERNEL
;			 mode service.  These include the transfer vector,
;			 the case table for dispatching, and a table containing
;			 the number of required arguments.
;
;	DEFINE_SERVICE Name,Number_of_Arguments
;
	.MACRO	DEFINE_SERVICE,NAME,NARG
	.PSECT	RUF$TRANSFER_VECTOR, PAGE, NOWRT, EXE, PIC, SHR, GBL
	.ALIGN	QUAD			; Align entry points for speed and style
	.TRANSFER	RUF$'NAME	; Define name as universal symbol for entry
	.MASK	RUF$'NAME		; Use entry mask defined in main routine
	NAME = RUF$KCODE_BASE+KRNL_COUNTER	; Define service offset num
	CHMK	I^#NAME			; Change to kernel mode and execute
	RET				; Return
	KRNL_COUNTER=KRNL_COUNTER+1	; Advance counter

	.PSECT	RUF$KRNL_NARG, BYTE, NOWRT, NOEXE, PIC
	.BYTE	NARG			; Define number of required arguments

	.PSECT	RUF$KRNL_DISP1, BYTE, NOWRT, EXE, PIC
	.WORD	2+RUF$'NAME-KCASE_BASE	; Make entry in kernel mode CASE table

	.ENDM	DEFINE_SERVICE		;
;
;	Equated Symbols
;

	$PLVDEF				; Define PLV offsets and values
	$PSLDEF				; Processor Status definitions
	$RUCBDEF			; Recovery-unit control definitions
	$RUFDEF				; Recovery-unit facility definitions
	$RUFMSGDEF			; Recovery-unit facility error codes
	$RUHDEF				; Recovery-unit handler offsets
	$SFDEF				; Stack frame defintions
	$SSDEF				; System service error codes

;
;	Initialize counters for change mode dispatching codes
;
; The change mode argument definition is required to be immediate mode to
; guarantee that the size of the change mode instructions is four bytes.
; This satisfies an assumption that is
; made by the exec for services that have to wait and be retried.
; The PC for retrying
; the change mode instruction that invokes the service is assumed to be 4 bytes 
; less than that saved in the change mode exception frame.  Of course, the particular 
; service routine determines whether this is possible.
;
; The service counter starts at 1 since the 0th service is the re-enter service
; which has no vector, but is instead done with a naked CHMK so as to
; not generate an extra call frame for each mode.
;
RUF$KCODE_BASE=16400			; Base CHMK code value for these services
KRNL_COUNTER=01				; Kernel code counter

;
;	Own Storage
;
	.PSECT	RUF$KRNL_NARG, BYTE, NOWRT, NOEXE, PIC
KRNL_NARG:				; Base of byte table containing the
					;  number of required arguments.


	.SBTTL	Transfer Vector and Service Definitions
;++
;
;	Define all transfer vectors and services
;
;--
RE_ENTER = RUF$KCODE_BASE		; Re-enter is service code 0

	DEFINE_SERVICE	START,1

	DEFINE_SERVICE  PH1_END,0

	DEFINE_SERVICE	PH2_END,0

	DEFINE_SERVICE	CANCEL,0

	DEFINE_SERVICE	MARKPOINT,1

	DEFINE_SERVICE	RESET,1

	DEFINE_SERVICE	DCLRUH,3

	DEFINE_SERVICE	CANRUH,1

	DEFINE_SERVICE	MODIFY,1


; The RUF$END service is defined as consecutive PH1_END, PH2_END services
; Therefore it is specified by two naked change mode instructions for simplicity.
;
	.PSECT	RUF$TRANSFER_VECTOR, PAGE, NOWRT, EXE, PIC, SHR, GBL
	.ALIGN	QUAD			; Align entry points for speed and style

RUF$END::
	.WORD	^M<R2,R3,R4,R5,R6>
	CHMK	I^#PH1_END
	BLBC	R0,10$			; Don't try phase 2 if phase 1 failed
	CHMK	I^#PH2_END
10$:	RET


	.SBTTL	Change Mode Dispatcher Vector Block
;++
; This vector is used by the image activator to connect the privileged shareable
; image to the VMS change mode dispatcher.  The offsets in the vector are self-
; relative to enable the construction of position independent images.  The system
; version number will be used by the image activator to verify that this shareable
; image was linked with the symbol table for the current system.
;
;			Change Mode Vector Format		
;
;	   +------------------------------------------+
;	   !             Vector Type Code             !   PLV$L_TYPE
;	   !             (PLV$C_TYP_CMOD)             !
;	   +------------------------------------------+
;	   !          System Version Number           !   PLV$L_VERSION
;	   !             (SYS$K_VERSION)              !
;	   +------------------------------------------+
;	   !      Kernel Mode Dispatcher Offset       !   PLV$L_KERNEL
;	   !                                          !
;	   +------------------------------------------+
;	   !         Exec Mode Entry Offset           !   PLV$L_EXEC
;	   !                                          !
;	   +------------------------------------------+
;	   !       User Rundown Service Offset        !   PLV$L_USRUNDWN
;	   !                                          !
;	   +------------------------------------------+
;	   !                Reserved                  !
;	   !                                          !
;	   +------------------------------------------+
;	   !          RMS Dispatcher Offset           !   PLV$L_RMS  
;	   !                                          !
;	   +------------------------------------------+
;	   !             Address Check                !   PLV$L_CHECK
;	   !                                          !
;	   +------------------------------------------+
;
;
	.PSECT	RUF$PLV_BLOCK, PAGE, VEC, PIC, NOWRT, NOEXE

	.LONG	PLV$C_TYP_CMOD		; Set type of vector to change mode dispatcher
	.LONG	SYS$K_VERSION		; Identify system version 
	.LONG	KRNL_DISPATCH-.		; Offset to kernel mode dispatcher
	.LONG	EXEC_DISPATCH-.		; Offset to executive mode dispatcher (none)
	.LONG	RUF$RUNDOWN-.		; Offset to rundown procedure
	.LONG	0			; Reserved.
	.LONG	0			; No RMS dispatcher
	.LONG	0			; Address check - PIC image

	.SBTTL	Kernel Mode Dispatcher
;++
; Input Parameters:
;
;	(SP) - Return address if bad change mode value
;
;	 R0  - Change mode argument value.
;
;	 R2,R3,R5,R6  - Scratch. (Therefore R2-R6 must be specified in all
;		 register save masks for kernel routines.)
;
;	 R4  - Current PCB Address. (Therefore R4 must be specified in all
;		 register save masks for kernel routines.)
;
;	 AP  - Argument pointer existing when the change
;	       mode instruction was executed.
;
;	 FP  - Address of minimal call frame to exit
;	       the change mode dispatcher and return to
;	       the original mode.
;
; Output Parameters
;
;	R0   - Status code
;--
	.PSECT	RUF$KRNL_DISP0, BYTE, NOWRT, EXE, PIC

KACCVIO:				; Kernel access violation
	MOVZWL	#SS$_ACCVIO,R0		; Set access violation status code
	RET				;  and return
KINSFARG:				; Kernel insufficient arguments.
	MOVZWL	#SS$_INSFARG,R0		; Set status code and
	RET				;  return
ILL_RU_SRV:
	MOVL	#RUF$_INVRUSRV,R0	; No RU services from RU handler
	RET

EXEC_DISPATCH:				; No exec mode services
KNOTME:	RSB				; RSB to forward request

KRNL_DISPATCH::				; Entry to dispatcher
	MOVAB	W^-RUF$KCODE_BASE(R0),R1 ; Normalize dispatch code value
	BLSS	KNOTME			; Branch if code value too low
	BEQL	REENTER			; Quick exit for re-enter service
	CMPW	R1,#KRNL_COUNTER	; Check high limit
	BGEQU	KNOTME			; Branch if out of range
;
; The dispatch code has now been verified as being handled by this dispatcher,
; now the argument list will be probed and the required number of arguments
; verified.
;
	MOVPSL	R4			; Get caller's mode
	EXTZV	#PSL$V_PRVMOD,#PSL$S_PRVMOD,R4,R4
	MOVAL	W^RUF$RUCB,R2		; Get RUCB ptr
	BBS	#RUCB$V_INIT,-		; Already initialized?
		RUCB$B_CTRL(R2),10$ 
	PUSHL	R1			; Save change mode code
	BSBW	INIT_RUCB		; No, so set up RUCB
	MOVL	(SP)+,R1		; Restore change mode code
10$:	MOVW	R1,RUCB$W_SRVCODE(R2)	; Save the service code number
	MOVZBL	W^KRNL_NARG-1[R1],R0	; Get required argument count
	MOVAL	@#4[R0],R0		; Compute byte count including arg count
	IFNORD	R0,(AP),KACCVIO		; Branch if arglist not readable
	CMPB	(AP),W^<KRNL_NARG-1>[R1] ; Check for required number
	BLSSU	KINSFARG		;  of arguments

;
; Now set up the environment to perform the handler call loops for each mode.
;
	BBS	#RUCB$V_INHANDLER,-	; Did the user do a service from inside
		RUCB$B_CTRL(R2),-	;  a RU handler?
		ILL_RU_SRV
	CASEW	R1,-			; Case on change mode argument value
		#1,-			; Base value
		#<KRNL_COUNTER-1>	; Limit value (number of entries)
KCASE_BASE:				; Case table base address for DEFINE_SERVICE
;
;	Case table entries are made in the PSECT RUF$KRNL_DISP1 by
;	invocations of the DEFINE_SERVICE macro.  The three PSECTS, 
;	RUF$KRNL_DISP0,1,2 will be abutted in lexical order at link-time.
;
	.PSECT	RUF$KRNL_DISP2, BYTE, NOWRT, EXE, PIC
	RSB				; Return to reject out of
					; range value
	

	.SBTTL	Call RU Handlers Procedure
;++
; Input Parameters:
;
;	R2   - RUCB ptr
;	R4   - Caller's mode
;
; Output Parameters
;
;	None
;
; Notes
;	This procedure manipulates the kernel stack and is absolutely
;	dependent on the kernel stack frame for CHMK services not being
;	changed in structure.
;
;	The following structure for the kernel stack is assumed upon
;	entry to this procedure:
;
;	   +------------------------------------------+
;	   !             return addr to RU	      !   <= SP
;	   !                service		      !
;	   +------------------------------------------+
;	   !          Privileged Library addresses    !  
;	   ~					      ~
;	   !             (size is immaterial)	      !
;	   +------------------------------------------+------------
;	   !      Kernel Mode Dispatcher 	      !  <= FP  ^
;	   !      Stack Frame (cond. handler)         !		|
;	   +------------------------------------------+		|
;	   !      Kernel Mode Dispatcher 	      !		|
;	   !      Stack Frame (mask/PSW)              !		|
;	   +------------------------------------------+		|
;	   !      Kernel Mode Dispatcher 	      !	   EXE$C_CMSTKSZ
;	   !      Stack Frame (saved AP)              !		|
;	   +------------------------------------------+		|
;	   !      Kernel Mode Dispatcher 	      !		|
;	   !      Stack Frame (saved FP)              !		|
;	   +------------------------------------------+		|
;	   !      Kernel Mode Dispatcher 	      !		|
;	   !      Stack Frame (saved PC)              !      	V
;	   +------------------------------------------+------------     
;	   !          user's saved PC		      !
;	   !          from CHMK instruction           !
;	   +------------------------------------------+
;	   !          user's saved PSL		      !
;	   !          from CHMK instruction           !
;	   +------------------------------------------+
;
; Side Effects
;
;	All RU handlers are called for each mode.
;
;--

;
; Process RE-ENTER service
;
REENTER:
	MOVPSL	R4			; Get caller's mode
	EXTZV	#PSL$V_PRVMOD,#PSL$S_PRVMOD,R4,R4
	MOVL	@#CTL$GL_RUF,R2		; get RUCB ptr
	BEQL	10$			; not in RU
	BBC	#RUCB$V_INHANDLER,-	; Not inside a service?
		RUCB$B_CTRL(R2),10$ 
	MOVL	FP,SP			; Discard PLV return addrs
	BRB	LOOP_HANDLERS		; And go to do next mode

10$:	BRW	ILL_RU_SRV

;
; Main entry point for processing RU handlers
;
RUF$CALL_HANDLERS::
	MOVL	(SP)+,RUCB$L_SV_RSB(R2)	; Save return address of RU service
	MOVL	FP,SP			; Discard PLV return addrs
	MOVQ	EXE$C_CMSTKSZ(SP),-	; Save return PC/PSL from the CHMK
		RUCB$Q_SV_PCPSL(R2)
	BBSS	#RUCB$V_INHANDLER,-	; Flag in handler
		RUCB$B_CTRL(R2),10$	
10$:	INCL	R4			; Bias the mode

;
; Search each mode for RU handlers to call starting with the caller's mode.
;
; Alternate entry point used by the RU$REENTER service to do the next mode.
;    same calling sequence
;
LOOP_HANDLERS:
	DECL	R4			; Go to next inner mode
	BEQL	FIN_HANDLERS		; If kernel mode then all finished.
	MOVL	RUCB$L_RUH_EXEC-4(R2)[R4],R0 ; Get first handler in list
	BEQL	LOOP_HANDLERS		; None at this mode
	MOVL	SF$L_SAVE_FP(FP),FP	; Set FP to user's stack
	ADDL2	#<8+EXE$C_CMSTKSZ>,SP	; Clean up the kernel stack by
					;  deleting the stack frame
					;  and CHMK PC/PSL
	MULL2	#<1+<1@<PSL$V_CURMOD-PSL$V_PRVMOD>>>,R4	; Make CUR=PRV
	ASHL	#PSL$V_PRVMOD,R4,-(SP)	; Make a PSL
	BSBB	DO_REI			; Push a PC and go to destined mode

;
; Code loop to execute RU handlers at appropriate mode
;
	assume	RUF$L_MARKPT eq 16
	PUSHAL	RUCB$L_MARKPT(R2)	; Push address of markpoint
	assume	RUF$L_STATE eq 12
	PUSHAL	RUCB$L_HACTION(R2)	;  "      "    "  handler code
	assume	RUF$L_RUID eq 8
	PUSHAL	RUCB$T_RUID(R2)		;  "      "    "  RU id
	assume	RUF$L_PARAM eq 4
	PUSHL	#0			; Make space for user param
	PUSHL	#<RUF$C_ARGLEN/4-4>	; Push argcount

40$:	MOVL	SP,R1			; Address of arglist
	PUSHL	RUH$L_LINK(R0)		; Save link ptr to next
	MOVL	RUH$L_PARAM(R0),-	; Set user param
		RUF$L_PARAM(R1)
	CALLG	(R1),@RUH$L_ADDR(R0)	; Call the handler
	MOVL	(SP)+,R0		; Retrieve link
	BNEQ	40$			; Go on to next
	ADDL2	#RUF$C_ARGLEN,SP	; Discard arg list
	
	CHMK	I^#RE_ENTER		; Re-enter service to do next mode

;
; REI instruction to enter outer mode for RU handlers
;
DO_REI:	REI

;
; Now actually do the work demanded by the service; after all the handlers
; have been called and returned.
;
FIN_HANDLERS:
	MOVQ	RUCB$Q_SV_PCPSL(R2),-	; Restore original CHMK PC/PSL in
		EXE$C_CMSTKSZ(SP)	;  frame created by last Reenter service
	BBCC	#RUCB$V_INHANDLER,-	; Flag not in handler
		RUCB$B_CTRL(R2),10$
10$:	JMP	@RUCB$L_SV_RSB(R2)	; Resume actual service code


	.SBTTL	Initialize the RUCB and Handler lists
;++
; Input Parameters:
;
;	 R2  - RUCB pointer.
;
;	 R0,R1,R3  - Scratch.
;
; Output Parameters
;
;	None
;
;--

INIT_RUCB:
	MOVAL	W^<RUF$RUCB+RUCB$C_LENGTH>,R0 ; Get start addr of space
	MOVAL	W^RUF$DATA_END,R1	; Get end addr+1 of space
	SUBL2	R0,R1			; Compute size
	BSBB	ADD_CELLS		; Add cells to freelist
	MOVL	RUCB$L_FREESP(R2),R3	; Get a cell for RMS
	MOVL	RUH$L_LINK(R3),-	; Update the free list
		RUCB$L_FREESP(R2)
	MOVAL	W^RMS_RUH,RUH$L_ADDR(R3); Set address
	CLRL	RUH$L_PARAM(R3)		; No user param for RMS

	assume	RUH$L_LINK eq 0
	MOVL	RUCB$L_RUH_EXEC(R2),-	; Set link
		RUH$L_LINK(R3) 
	MOVL	R3,RUCB$L_RUH_EXEC(R2)	; Make it first exec handler
	BBSS	#RUCB$V_INIT,-		; Mark RUCB as initialized
		RUCB$B_CTRL(R2),20$
20$:	RSB

;
; Internal subroutine to add a contiguous block of memory to the RU handler
; freelist.
;
; Inputs:
;	R0 - Address of block
;	R1 - Size of block
;	R2 - RUCB address
;
; Outputs:
;	R0, R1 destroyed
;
ADD_CELLS:
	PUSHL	R3			; Save R3
	DIVL3	#RUH$C_SIZE,R1,R3	; Compute number of cells in block
	MOVAL 	-RUH$C_SIZE(R0),R1	; Get addr of -1th entry
10$:	ADDL2	#RUH$C_SIZE,R1		; Advance to next cell
	MOVAL	RUH$C_SIZE(R1),-	; Set link to next
		RUH$L_LINK(R1) 
	SOBGTR	R3,10$			; Loop
	MOVL	RUCB$L_FREESP(R2),-	; Store old link in last cell
		RUH$L_LINK(R1)
	MOVL	R0,RUCB$L_FREESP(R2)	; Add new cells
	MOVL	(SP)+,R3		; Restore R3
	RSB


	.SBTTL	RMS Recovery-Unit Handler
;++
; Input Parameters:
;
;	 AP  - Address of RU Handler argument list.
;
; Calling Sequence:
;	CALL	procedure
;
;--

RMS_RUH:
	.WORD	0
	RET

	.SBTTL	Recovery-Unit Rundown Procedure
;++
; Input Parameters:
;
;	 R4  - Current process PCB. (Therefore R4 must be specified in all
;		 register save masks for kernel routines.)
;
;	 R7  - Maximized access mode. (Therefore R7 must be specified in all
;		 register save masks for kernel routines.)
;
;	 AP  - Address of $RUNDWN argument list.
;
;	4(AP)- Access mode parameter to $RUNDWN.
;
; Calling Sequence:
;	JSB	procedure
;
;--

RUF$RUNDOWN::

	RSB

	.END
