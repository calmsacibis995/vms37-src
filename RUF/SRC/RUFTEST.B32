MODULE RUFTEST	(
		LANGUAGE (BLISS32),
		MAIN = RUF$TST,
		IDENT = 'V03-000'
		) =

BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
!
! FACILITY:	Recovery-Unit Management Facility (RUF)
!
! ABSTRACT:
!		Test program for the RUF privileged library.
!
! ENVIRONMENT:
!		VAX/VMS OPERATING SYSTEM
!
!--
!
! AUTHOR:
!		R. SCHAEFER	4-Mar-81	11:00
!
!
! REVISION HISTORY:
!

! Forward Routines
!
FORWARD ROUTINE
    RUF$TST,		! Main program
    ACT_START,		! Start up an RU
    ACT_END,		! End the RU
    ACT_PHASE1,		! Phase 1 complete an RU
    ACT_PHASE2,		! Phase 2 complete an RU
    ACT_JPI,		! Print out the $GETJPI RU info
    ACT_CANCEL,		! Abort an RU
    ACT_MARKPT,		! Declare a markpoint
    ACT_RESET,		! Reset to a markpoint
    ACT_DCLH,		! Declare a handler
    ACT_CANH,		! Cancel a handler
    ACT_DCLE,		! Declare an exec mode handler
    ACT_CANE,		! Cancel an exec mode handler
    ACT_MODIFY,		! Modify RU attributes
    RU_HANDLER,		! Sample RU handler
    EX_RU_HANDLER,	! Sample exec mode RU handler
    ACT_SET,		! Set/clear RUCB dump flag
    ACT_DUMP,		! Display info about an RU, the whole RUCB
    ACT_MESSAGE,	! Output an error message
    MAIN_HANDLER;	! Handle signals and exceptions

LIBRARY 'SYS$LIBRARY:LIB';
LIBRARY 'SYS$LIBRARY:TPAMAC';
REQUIRE 'LIB$:RUF.B32';
REQUIRE 'LIB$:RUFUSR.B32';

! Global ref to P1 space ptr
!
EXTERNAL
    CTL$GL_RUF:		ADDRESSING_MODE(ABSOLUTE);

! External Routines
!
EXTERNAL ROUTINE
    LIB$GET_INPUT:	ADDRESSING_MODE(GENERAL),
    LIB$GET_VM	:	ADDRESSING_MODE(GENERAL),
    LIB$TPARSE	:	ADDRESSING_MODE(GENERAL);

! External declarations of the RUF services
!
EXTERNAL ROUTINE
    RUF$START	:	ADDRESSING_MODE(GENERAL),
    RUF$END	:	ADDRESSING_MODE(GENERAL),
    RUF$PH1_END	:	ADDRESSING_MODE(GENERAL),
    RUF$PH2_END	:	ADDRESSING_MODE(GENERAL),
    RUF$CANCEL	:	ADDRESSING_MODE(GENERAL),
    RUF$MARKPOINT:	ADDRESSING_MODE(GENERAL),
    RUF$RESET	:	ADDRESSING_MODE(GENERAL),
    RUF$MODIFY	:	ADDRESSING_MODE(GENERAL),
    RUF$DCLRUH	:	ADDRESSING_MODE(GENERAL),
    RUF$CANRUH	:	ADDRESSING_MODE(GENERAL);

! Make a condition value for the test program
! These codes are warning codes using the RUF fac code (12),
! the facility-specfic bit and the customer-defined bit.
!
MACRO
    COND(ARG) =
	(12^$BITPOSITION(STS$V_FAC_NO) + STS$M_CUST_DEF + 
	 STS$M_FAC_SP + ARG^$BITPOSITION(STS$V_MSG_NO) + 2)%;

! Test program error codes
!
LITERAL
    RUF$_FAO_MAX = 5,		! Max FAO args from an error
    RUF$_CMD_ERR = COND(1),	! command error
    RUF$_QUAL_ERR= COND(2),	! command qualifier error
    RUF$_SYN_ERR = COND(3),	! syntax error
    RUF$_AMB_ERR = COND(4),	! ambiguous command 
    RUF$_AMBQ_ERR= COND(5);	! ambiguous qualifier

! OWN data
!
OWN
    RU_ID:	BLOCK[RUCB$S_RUID,BYTE],! RU id
    RUCP_FLAG:	BLOCK[1,LONG];		! Command flags

! RUCP_FLAG flag definitions
!
MACRO
	EXIT_CMD = 0,0,1,0%,		! Exit
	DUMP_RUCB= 0,1,1,0%;		! Dump out RUCB on each service

! Extract a specific bit from a field
!
MACRO
	BIT2 ( o,p,s,e) = 1^p%;

! Global data buffers
!
GLOBAL
    CMDBUF:	VECTOR[132,BYTE],	! Holds input
    CBUF_D:	VECTOR[2]	INITIAL (132,CMDBUF),
    PBUFF:	VECTOR[300,BYTE],
    PBDESC:	VECTOR[2]	INITIAL (300,PBUFF),

    ! FABs and RABs
    !

    ! Terminal output
    !
    TERMFAB:	$FAB(
		FAC = PUT,
		FNM = 'SYS$OUTPUT:',
		MRS = 132,
		RAT = CR,
		RFM = VAR),

    TERMRAB:	$RAB(
		FAB = TERMFAB);

!
! Some macros to simplify some of the message processing
!

! Output a string
!
MACRO	TYPE_OUTFILE (MSG) =
	TYPE_BUFF(%CHARCOUNT(MSG),UPLIT BYTE(%STRING(MSG))) %;

! Output macro
!
MACRO	TYPE_BUFF(LENGTH,ADDRESS)=
	(TERMRAB[RAB$W_RSZ] = LENGTH;
	 TERMRAB[RAB$L_RBF] = ADDRESS;
	$PUT (RAB = TERMRAB)) %;

! Output an FAO string with arguments
!
MACRO	TYPE_FAO(TEXT)[] =
	(LOCAL LENGTH	:	WORD;
	$FAO(UPLIT(%CHARCOUNT(TEXT),UPLIT(TEXT)),LENGTH,PBDESC,%REMAINING);
	TYPE_BUFF(.LENGTH,PBUFF)) %;

! Check for system services errors and report them
!
MACRO ERRCHK (SERVICE) =
	BEGIN
	LOCAL STATUS;
	STATUS = (SERVICE);
	IF NOT .STATUS
	THEN
	    SIGNAL(.STATUS)
	END %;

! ASCII text for each RU handler control function
!
BIND
	CTRL_TXT = UPLIT(
	    UPLIT BYTE (%ASCIC 'No-op'),	! no-op
	    UPLIT BYTE (%ASCIC 'Start'),	! RUF$C_START
	    UPLIT BYTE (%ASCIC 'Phase1'),	! RUF$C_PHASE1
	    UPLIT BYTE (%ASCIC 'Phase2'),	! RUF$C_PHASE2
	    UPLIT BYTE (%ASCIC 'Markpt'),	! RUF$C_MARKPOINT
	    UPLIT BYTE (%ASCIC 'Reset'),	! RUF$C_RESET
	    UPLIT BYTE (%ASCIC 'Cancel'),	! RUF$C_CANCEL
	    UPLIT BYTE (%ASCIC 'Cancel_E')	! RUF$C_CANCEL_END
	    ) : VECTOR[,LONG];

! Macro to declare argument list in TPARSE action routine.
!
MACRO
	TPARSE_ARGS =
		BUILTIN AP;
		BIND TPARSE_BLOCK = AP : REF BLOCK[,BYTE];
		%;

OWN
	TPARSE_BLOCK	: BLOCK [TPA$K_LENGTH0,BYTE]
			  INITIAL (TPA$K_COUNT0, TPA$M_ABBREV);

!
! Generate translation table to convert lower case to upper case.
!
MACRO
	UPCASE_ENTRY (DUMMY) [] =
		%IF ((%COUNT AND %X'7F') GEQU 'a') AND ((%COUNT AND %X'7F') LEQU 'z')
		%THEN (%COUNT AND %X'5F')
		%ELSE (%COUNT AND %X'7F')
		%FI
		%IF %COUNT LSSU 255
		%THEN , UPCASE_ENTRY (0)
		%FI
		%;

BIND
	UPCASE_TABLE	= UPLIT BYTE (UPCASE_ENTRY (0));

!
! TPARSE state table to parse commands.
!

$INIT_STATE (STATE_TABLE, KEY_TABLE);

!
! Initial state - acquire command.
!

$STATE	(START,
	('EXIT',	TPA$_EXIT, ,BIT2(EXIT_CMD),RUCP_FLAG),
	('START',	TPA$_EXIT,ACT_START),
	('END',		TPA$_EXIT,ACT_END),
	('PH1',		TPA$_EXIT,ACT_PHASE1),
	('PH2',		TPA$_EXIT,ACT_PHASE2),
	('CANCEL',	TPA$_EXIT,ACT_CANCEL),
	('MARKPT',	TPA$_EXIT,ACT_MARKPT),
	('RESET',	DO_RESET),
	('MODIFY',	DO_MODFY),
	('SHOW',	TPA$_EXIT,ACT_JPI),
	('SET',		DO_SET),
	('DUMP',	TPA$_EXIT,ACT_DUMP),
	('DCLH',	DO_DCLH),
	('CANH',	DO_CANH),
	('DCLE',	DO_DCLE),
	('CANE',	DO_CANE),
	('!',		TPA$_EXIT),
	(TPA$_SYMBOL,	TPA$_EXIT,ACT_MESSAGE, , ,RUF$_CMD_ERR),
	(TPA$_EOS,	TPA$_EXIT)
	);

!
! Process additional commands on line
!

$STATE	(MORE,
	(';',		START),
    	('!',		TPA$_EXIT),
	(TPA$_EOS,	TPA$_EXIT)
	);

!
! DCLH command
!

$STATE	(DO_DCLH,
	(TPA$_DECIMAL,	MORE, ACT_DCLH)
	);

!
! CANH command
!

$STATE	(DO_CANH,
	(TPA$_HEX,	MORE, ACT_CANH)
	);

!
! DCLE command
!

$STATE	(DO_DCLE,
	(TPA$_DECIMAL,	MORE, ACT_DCLE)
	);

!
! CANE command
!

$STATE	(DO_CANE,
	(TPA$_HEX,	MORE, ACT_CANE)
	);

!
! RESET command
!

$STATE	(DO_RESET,
	(TPA$_DECIMAL,	MORE, ACT_RESET)
	);

!
! MODIFY command
!
$STATE	(DO_MODFY,
	('SET',		TPA$_EXIT,ACT_MODIFY,,,1),
	('CLEAR',	TPA$_EXIT,ACT_MODIFY,,,0)
	);

!
! SET command
!
$STATE	(DO_SET,
	('DUMP',	TPA$_EXIT,ACT_SET,,,1),
	('NODUMP',	TPA$_EXIT,ACT_SET,,,0)
	);


GLOBAL ROUTINE RUF$TST=
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine is the main driver.
!
! CALLING SEQUENCE:
!	RUF$TST()
!
! INPUT PARAMETERS:
!	Standard main program
!
! IMPLICIT INPUTS:
!	None
!
! OUTPUT PARAMETERS:
!	All output appears at the physical device you're on.
!
! IMPLICIT OUTPUTS:
!	None
!
! ROUTINE VALUE:
!	None
!
! SIDE EFFECTS:
!	None
!
!--

    BEGIN

    LOCAL
	STATUS;

    ENABLE MAIN_HANDLER;

    ERRCHK($OPEN(FAB = TERMFAB));
    ERRCHK($CONNECT(RAB = TERMRAB));

    ! Now loop while user has requests
    !
    WHILE 1 DO
	BEGIN

	! Clear state
	!
	RUCP_FLAG = 0;
	CBUF_D[0] = 132;

	STATUS = LIB$GET_INPUT(CBUF_D, %ASCID 'RUFT>');

	IF .STATUS
	THEN
	    BEGIN

    	    LOCAL
    		P : REF VECTOR[,BYTE];		! Char ptr

	    ! Upcase the command for TPARSE's benefit
	    !
	    CH$TRANSLATE(UPCASE_TABLE, .CBUF_D[0], .CBUF_D[1],
			 ' ', .CBUF_D[0], .CBUF_D[1]);

    	    ! Remove trailing blanks
	    !
	    P = .CBUF_D[0] + .CBUF_D[1];
	    WHILE .P[-1] EQL ' ' DO
		P = .P-1;
	    CBUF_D[0] = .P - .CBUF_D[1];

	    ! Set up for TPARSE call
	    !
	    TPARSE_BLOCK[TPA$L_STRINGCNT] = .CBUF_D[0];
	    TPARSE_BLOCK[TPA$L_STRINGPTR] = .CBUF_D[1];

	    ! Parse and do the command
	    !
	    IF NOT LIB$TPARSE( TPARSE_BLOCK, STATE_TABLE, KEY_TABLE)
	    THEN
		SIGNAL(RUF$_SYN_ERR, CBUF_D);
	    END
	ELSE
	    BEGIN
	    IF .STATUS EQL RMS$_EOF
	    THEN
		RUCP_FLAG[EXIT_CMD] = 1
	    ELSE
		SIGNAL_STOP(.STATUS);
	    END;

	IF .RUCP_FLAG[EXIT_CMD]
	THEN
	    EXITLOOP;

	END;   

    $CLOSE (FAB = TERMFAB);

    RETURN 1

    END;

ROUTINE ACT_START =
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine starts a RU
!
! CALLING SEQUENCE:
!	ACT_START()
!
! INPUT PARAMETERS:
!	None
!
! IMPLICIT INPUTS:
!	None
!
! OUTPUT PARAMETERS:
!	None
!
! IMPLICIT OUTPUTS:
!	RU is started.
!
! ROUTINE VALUE:
!	None
!
! SIDE EFFECTS:
!	None
!
!--

    BEGIN

    ERRCHK( RUF$START(RU_ID));

    TYPE_FAO(' Started RU with id(time) = !UL',.RU_ID[RUCB$L_ID_TIME]);

    IF .RUCP_FLAG[DUMP_RUCB]
    THEN
	ACT_DUMP();

    RETURN 1
    END;

ROUTINE ACT_END =
!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine completes the RU.
!
! CALLING SEQUENCE:
!	ACT_END()
!
! INPUT PARAMETERS:
!	None
!
! IMPLICIT INPUTS:
!	None
!
! OUTPUT PARAMETERS:
!	None
!
! IMPLICIT OUTPUTS:
!	RUF marked to stop.
!
! ROUTINE VALUE:
!	None
!
! SIDE EFFECTS:
!	None
!
!--

    BEGIN

    ERRCHK(RUF$END());

    IF .RUCP_FLAG[DUMP_RUCB]
    THEN
	ACT_DUMP();


    RETURN 1
    END;

ROUTINE ACT_PHASE1 =
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine causes phase1 end
!
! CALLING SEQUENCE:
!	ACT_PHASE1()
!
! INPUT PARAMETERS:
!	None
!
! IMPLICIT INPUTS:
!	None
!
! OUTPUT PARAMETERS:
!	None
!
! IMPLICIT OUTPUTS:
!	None
!
! ROUTINE VALUE:
!	None
!
! SIDE EFFECTS:
!	None
!
!--

    BEGIN

    ERRCHK(RUF$PH1_END());

    IF .RUCP_FLAG[DUMP_RUCB]
    THEN
	ACT_DUMP();


    RETURN 1
    END;

ROUTINE ACT_PHASE2 =
!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine causes phase2 end
!
! CALLING SEQUENCE:
!	ACT_PHASE2()
!
! INPUT PARAMETERS:
!	None
!
! IMPLICIT INPUTS:
!	None
!
! OUTPUT PARAMETERS:
!	None
!
! IMPLICIT OUTPUTS:
!	None
!
! ROUTINE VALUE:
!	None
!
! SIDE EFFECTS:
!	None
!
!--

    BEGIN

    ERRCHK(RUF$PH2_END());

    IF .RUCP_FLAG[DUMP_RUCB]
    THEN
	ACT_DUMP();


    RETURN 1
    END;

ROUTINE ACT_CANCEL =
!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine cancels a RU
!
! CALLING SEQUENCE:
!	ACT_CANCEL()
!
! INPUT PARAMETERS:
!	None
!
! IMPLICIT INPUTS:
!	None
!
! OUTPUT PARAMETERS:
!	None
!
! IMPLICIT OUTPUTS:
!	None
!
! ROUTINE VALUE:
!	None
!
! SIDE EFFECTS:
!	None
!
!--

    BEGIN

    ERRCHK(RUF$CANCEL());

    IF .RUCP_FLAG[DUMP_RUCB]
    THEN
	ACT_DUMP();


    RETURN 1
    END;

ROUTINE ACT_MARKPT =
!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine declares a markpoint
!
! CALLING SEQUENCE:
!	ACT_MARKPT()
!
! INPUT PARAMETERS:
!	None
!
! IMPLICIT INPUTS:
!	RU_NAME  - Name of the recovery unit.
!
! OUTPUT PARAMETERS:
!	None
!
! IMPLICIT OUTPUTS:
!	Specified recovery unit is marked for abort.
!
! ROUTINE VALUE:
!	None
!
! SIDE EFFECTS:
!	None
!
!--

    BEGIN

    LOCAL
	MKPTID;

    ERRCHK(RUF$MARKPOINT(MKPTID));

    TYPE_FAO(' Markpoint ID = !UL', .MKPTID);

    IF .RUCP_FLAG[DUMP_RUCB]
    THEN
	ACT_DUMP();


    RETURN 1
    END;

ROUTINE ACT_RESET =
!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine resets a RU to a markpoint
!
! CALLING SEQUENCE:
!	ACT_RESET()
!
! INPUT PARAMETERS:
!	None
!
! IMPLICIT INPUTS:
!	None
!
! OUTPUT PARAMETERS:
!	None
!
! IMPLICIT OUTPUTS:
!	None
!
! ROUTINE VALUE:
!	None
!
! SIDE EFFECTS:
!	None
!
!--

    BEGIN

    TPARSE_ARGS;

    ERRCHK(RUF$RESET(TPARSE_BLOCK[TPA$L_NUMBER]));

    IF .RUCP_FLAG[DUMP_RUCB]
    THEN
	ACT_DUMP();


    RETURN 1
    END;

ROUTINE ACT_DCLH =
!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine declares a handler
!
! CALLING SEQUENCE:
!	ACT_DCLH()
!
! INPUT PARAMETERS:
!	None
!
! IMPLICIT INPUTS:
!	RU_NAME  - Name of the recovery unit.
!
! OUTPUT PARAMETERS:
!	None
!
! IMPLICIT OUTPUTS:
!	Specified recovery unit is marked for abort.
!
! ROUTINE VALUE:
!	None
!
! SIDE EFFECTS:
!	None
!
!--

    BEGIN

    LOCAL
	PARAM,
	H_ID;

    TPARSE_ARGS;

    PARAM = .TPARSE_BLOCK[TPA$L_NUMBER];

    ERRCHK(RUF$DCLRUH(RU_HANDLER,.PARAM, H_ID));

    TYPE_FAO(' Handler !UL has id = !XL', .PARAM, .H_ID);

    IF .RUCP_FLAG[DUMP_RUCB]
    THEN
	ACT_DUMP();


    RETURN 1
    END;

ROUTINE ACT_CANH =
!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine cancels a specified handler
!
! CALLING SEQUENCE:
!	ACT_CANH()
!
! INPUT PARAMETERS:
!	None
!
! IMPLICIT INPUTS:
!	RU_NAME  - Name of the recovery unit.
!
! OUTPUT PARAMETERS:
!	None
!
! IMPLICIT OUTPUTS:
!	Specified RU is forced to completion.
!
! ROUTINE VALUE:
!	None
!
! SIDE EFFECTS:
!	None
!
!--

    BEGIN

    TPARSE_ARGS;


    ERRCHK(RUF$CANRUH(TPARSE_BLOCK[TPA$L_NUMBER]));

    IF .RUCP_FLAG[DUMP_RUCB]
    THEN
	ACT_DUMP();


    RETURN 1
    END;

ROUTINE ACT_DCLE =
!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine declares an exec mode RU handler
!
! CALLING SEQUENCE:
!	ACT_DCLE()
!
! INPUT PARAMETERS:
!	None
!
! IMPLICIT INPUTS:
!	RU_NAME  - Name of the recovery unit.
!
! OUTPUT PARAMETERS:
!	None
!
! IMPLICIT OUTPUTS:
!	Exec mode RU handler is declared
!
! ROUTINE VALUE:
!	None
!
! SIDE EFFECTS:
!	None
!
!--

    BEGIN


    LOCAL
	ARGS:	VECTOR[3,LONG];		! Exec arglist

    TPARSE_ARGS;

    ! Exec mode routine to declare the handler
    !
    ROUTINE EX_DCLE(PARAM, H_ID) =
	BEGIN

	RETURN RUF$DCLRUH(EX_RU_HANDLER, .PARAM, H_ID);

	END;

    ARGS[0] = 2;
    ARGS[1] = .TPARSE_BLOCK[TPA$L_NUMBER];
    ARGS[2] = 0;

    ERRCHK(
	$CMEXEC(
	    ROUTIN = EX_DCLE,
	    ARGLST = ARGS));

    TYPE_FAO(' Handler !UL has id = !XL', .ARGS[1], .ARGS[2]);

    IF .RUCP_FLAG[DUMP_RUCB]
    THEN
	ACT_DUMP();


    RETURN 1
    END;

ROUTINE ACT_CANE =
!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine cancels an exec mode RU handler
!
! CALLING SEQUENCE:
!	ACT_CANE()
!
! INPUT PARAMETERS:
!	None
!
! IMPLICIT INPUTS:
!	RU_NAME  - Name of the recovery unit.
!
! OUTPUT PARAMETERS:
!	None
!
! IMPLICIT OUTPUTS:
!	Exec mode RU handler is canceled
!
! ROUTINE VALUE:
!	None
!
! SIDE EFFECTS:
!	None
!
!--

    BEGIN

    LOCAL
	ARGS:	VECTOR[2,LONG];		! Exec arglist

    TPARSE_ARGS;

    ! Exec mode routine to cancel the handler
    !
    ROUTINE EX_CANE(H_ID) =
	BEGIN

	RETURN RUF$CANRUH(.H_ID);

	END;

    ARGS[0] = 1;
    ARGS[1] = TPARSE_BLOCK[TPA$L_NUMBER];

    ERRCHK(
	$CMEXEC(
	    ROUTIN = EX_CANE,
	    ARGLST = ARGS));

    IF .RUCP_FLAG[DUMP_RUCB]
    THEN
	ACT_DUMP();


    RETURN 1
    END;

ROUTINE ACT_MODIFY =
!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine modifies the attributes of a RU 
!
! CALLING SEQUENCE:
!	ACT_MODIFY()
!
! INPUT PARAMETERS:
!	None
!
! IMPLICIT INPUTS:
!	RU_NAME  - Name of the recovery unit.
!
! OUTPUT PARAMETERS:
!	None
!
! IMPLICIT OUTPUTS:
!	RU attributes modified
!
! ROUTINE VALUE:
!	None
!
! SIDE EFFECTS:
!	None
!
!--

    BEGIN

    LOCAL
	ARGS:	VECTOR[2,LONG];		! Exec arglist

    TPARSE_ARGS;

    ! Exec mode routine to do the work
    !
    ROUTINE EX_MODIFY(PARAM) =
	BEGIN

	RETURN RUF$MODIFY(.PARAM);

	END;

    ARGS[0] = 1;
    ARGS[1] = .TPARSE_BLOCK[TPA$L_PARAM];

    ERRCHK(
	$CMEXEC(
	    ROUTIN = EX_MODIFY,
	    ARGLST = ARGS));

    IF .RUCP_FLAG[DUMP_RUCB]
    THEN
	ACT_DUMP();


    RETURN 1
    END;

ROUTINE ACT_JPI =
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine displays the current state of an RU, using $GETJPI.
!
! CALLING SEQUENCE:
!	ACT_JPI()
!
! INPUT PARAMETERS:
!	None
!
! IMPLICIT INPUTS:
!	RU_NAME  - Name of the recovery unit.
!
! OUTPUT PARAMETERS:
!	None
!
! IMPLICIT OUTPUTS:
!	Specified RU is displayed at the user's terminal.
!
! ROUTINE VALUE:
!	None
!
! SIDE EFFECTS:
!	None
!
!--

    BEGIN


    RETURN 1
    END;

ROUTINE ACT_SET =
!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine sets/clears the RUCB dump flag
!
! CALLING SEQUENCE:
!	ACT_SET()
!
! INPUT PARAMETERS:
!	None
!
! IMPLICIT INPUTS:
!	RU_NAME  - Name of the recovery unit.
!
! OUTPUT PARAMETERS:
!	None
!
! IMPLICIT OUTPUTS:
!	RUCP_FLAG[DUMP_RUCB]   set/cleared
!
! ROUTINE VALUE:
!	None
!
! SIDE EFFECTS:
!	None
!
!--

    BEGIN


    TPARSE_ARGS;

    RUCP_FLAG[DUMP_RUCB] = .TPARSE_BLOCK[TPA$L_PARAM];

    RETURN 1
    END;

ROUTINE ACT_DUMP =
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine outputs a formatted listing of all RU info
!	including the entire RUCB
!
! CALLING SEQUENCE:
!	ACT_DUMP()
!
! INPUT PARAMETERS:
!	None
!
! IMPLICIT INPUTS:
!	RUF state
!
! OUTPUT PARAMETERS:
!	None
!
! IMPLICIT OUTPUTS:
!	None
!
! ROUTINE VALUE:
!	None
!
! SIDE EFFECTS:
!	None
!
!--

    BEGIN

    ! ASCII text for RUCB attributes
    !
    BIND
	!  State code text
	!
	STATE_TXT = UPLIT(
	    UPLIT BYTE (%ASCIC 'No-op'),	! no-op
	    UPLIT BYTE (%ASCIC 'Active'),	! RUCB$C_ACTIVE
	    UPLIT BYTE (%ASCIC 'Ph1_init'),	! RUCB$C_PH1_INIT
	    UPLIT BYTE (%ASCIC 'Ph1_fin'),	! RUCB$C_PH1_FIN
	    UPLIT BYTE (%ASCIC 'Ph2_init'),	! RUCB$C_PH2_INIT
	    UPLIT BYTE (%ASCIC 'Ph2_fin'),	! RUCB$C_PH2_FIN
	    UPLIT BYTE (%ASCIC 'Cancel'),	! RUCB$C_CANCEL
	    UPLIT BYTE (%ASCIC 'Reset')		! RUCB$C_RESET
	    ) : VECTOR[,LONG],

	!  change mode service text
	!
	SRV_TXT = UPLIT(
	    UPLIT BYTE (%ASCIC 'Reenter'),	! reenter
	    UPLIT BYTE (%ASCIC 'Start'),	! RUF$START
	    UPLIT BYTE (%ASCIC 'Ph1_end'),	! RUF$PHASE1
	    UPLIT BYTE (%ASCIC 'Ph2_end'),	! RUF$PHASE2
	    UPLIT BYTE (%ASCIC 'Cancel'),	! RUF$CANCEL
	    UPLIT BYTE (%ASCIC 'Markpoint'),	! RUF$MARKPOINT
	    UPLIT BYTE (%ASCIC 'Reset'),	! RUF$RESET
	    UPLIT BYTE (%ASCIC 'Dcl_handler'),	! RUF$DCLRUH
	    UPLIT BYTE (%ASCIC 'Can_handler'),	! RUF$CANRUH
	    UPLIT BYTE (%ASCIC 'Modify')	! RUF$MODIFY
	    ) : VECTOR[,LONG],

	! Initialized text
	!
	INI_TXT = UPLIT(
	    UPLIT BYTE (%ASCIC '    '),		! no init
	    UPLIT BYTE (%ASCIC 'Init')		! init
	    ) : VECTOR[,LONG],

	! Autorecovery text
	!
	AUTREC_TXT = UPLIT(
	    UPLIT BYTE (%ASCIC '       '),	! auto rec
	    UPLIT BYTE (%ASCIC ' Noauto')	! no auto rec
	    ) : VECTOR[,LONG],

	! In handler text
	!
	INH_TXT = UPLIT(
	    UPLIT BYTE (%ASCIC '           '),	! not in handler
	    UPLIT BYTE (%ASCIC ' In handler')	! in handler
	    ) : VECTOR[,LONG];

    LOCAL
	SYS_ID	: REF VECTOR[,WORD],	! Structure for system id
	PCPSL	: REF VECTOR[,LONG],	! Structure for PC/PSL pair
	RUCB	: REF BLOCK[,BYTE];	! Ptr to RUCB

    RUCB = .CTL$GL_RUF;

    IF .RUCB EQL 0
    THEN
	BEGIN
	TYPE_OUTFILE(' RUCB is uninitialized.');
	RETURN 1;
	END;

    SYS_ID = RUCB[RUCB$B_ID_SYS];
    PCPSL  = RUCB[RUCB$Q_SV_PCPSL];

    TYPE_FAO('!/!/RUCB contents!/!_State: !AC!_!_Flags: !AC!AC!AC',
	.STATE_TXT[.RUCB[RUCB$B_STATE]], .INI_TXT[.RUCB[RUCB$V_INIT]],
	.AUTREC_TXT[.RUCB[RUCB$V_NOAUTOREC]],
	.INH_TXT[.RUCB[RUCB$V_INHANDLER]]);

    TYPE_FAO('!_RU id!_ Area: !XL   Sys: !XW!XW!XW (!AF)   Time: !XL',
	.RUCB[RUCB$L_ID_AREA], .SYS_ID[0], .SYS_ID[1], .SYS_ID[2],
	6, RUCB[RUCB$B_ID_SYS],
	.RUCB[RUCB$L_ID_TIME]);

    TYPE_FAO('!_Service code: !AC!_Markpoint: !UL!_Handler action: !AC',
	.SRV_TXT[.RUCB[RUCB$W_SRVCODE]], .RUCB[RUCB$L_MARKPT],
	.CTRL_TXT[.RUCB[RUCB$L_HACTION]]);

    TYPE_FAO('!_Free_list: !XL!_Exec: !XL!_Supv: !XL!_User: !XL',
	.RUCB[RUCB$L_FREESP], .RUCB[RUCB$L_RUH_EXEC],
	.RUCB[RUCB$L_RUH_SUPV], .RUCB[RUCB$L_RUH_USER]);

    TYPE_FAO('!_Saved handler info:!/!_!_PC: !XL!_PSL: !XL!_RSB: !XL',
	.PCPSL[0], .PCPSL[1], .RUCB[RUCB$L_SV_RSB]);

    RETURN 1
    END;


GLOBAL ROUTINE RU_HANDLER (
	user_param,
	id,
	code,
	mrkpt) =
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine is a prototype RU handler.
!
! CALLING SEQUENCE:
!	RU_HANDLER(user_param, ru_id, ru_ctrl, ru_mrkpt)
!
! INPUT PARAMETERS:
!	user_param - declaration number for this handler
!	ru_id	   - ptr to ru_id block
!	ru_ctrl	   - ru control byte code
!	ru_mrkpt   - ru markpoint value
!
! IMPLICIT INPUTS:
!	None
!
! OUTPUT PARAMETERS:
!	None
!
! IMPLICIT OUTPUTS:
!	None
!
! ROUTINE VALUE:
!	None
!
! SIDE EFFECTS:
!	None
!
!--

    BEGIN

    MAP
	id: 	ref vector[,long];

    TYPE_FAO(
	'!/Called handler !UL with id: !4(XL) !/!_control code: !AC, mrkpt: !UL',
	.user_param, .id[0], .id[1], .id[2], .id[3], .ctrl_txt[..code], ..mrkpt);

    IF .RUCP_FLAG[DUMP_RUCB]
    THEN
	ACT_DUMP();

    RETURN 1
    END;

GLOBAL ROUTINE EX_RU_HANDLER (
	user_param,
	id,
	code,
	mrkpt) =
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine is a prototype exec mode RU handler.
!
! CALLING SEQUENCE:
!	RU_HANDLER(user_param, ru_id, ru_ctrl, ru_mrkpt)
!
! INPUT PARAMETERS:
!	user_param - declaration number for this handler
!	ru_id	   - ptr to ru_id block
!	ru_ctrl	   - ru control byte code
!	ru_mrkpt   - ru markpoint value
!
! IMPLICIT INPUTS:
!	None
!
! OUTPUT PARAMETERS:
!	None
!
! IMPLICIT OUTPUTS:
!	None
!
! ROUTINE VALUE:
!	None
!
! SIDE EFFECTS:
!	None
!
!--

    BEGIN

    RETURN 1
    END;

GLOBAL ROUTINE ACT_MESSAGE =
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine outputs error messages.
!
! CALLING SEQUENCE:
!	ACT_MESSAGE()
!
! INPUT PARAMETERS:
!	None
!
! IMPLICIT INPUTS:
!	None
!
! OUTPUT PARAMETERS:
!	None
!
! IMPLICIT OUTPUTS:
!	None
!
! ROUTINE VALUE:
!	None
!
! SIDE EFFECTS:
!	None
!
!--

    BEGIN

    TPARSE_ARGS;

    LOCAL
	FLG : BLOCK[1,LONG];	! Local copy of TPARSE parameter

    FLG = .TPARSE_BLOCK[TPA$L_PARAM];

    IF .TPARSE_BLOCK[TPA$V_AMBIG]
    THEN
        BEGIN
    	IF .FLG EQL RUF$_CMD_ERR
    	THEN
    	    FLG = RUF$_AMB_ERR
    	ELSE IF .FLG EQL RUF$_QUAL_ERR
        THEN
    	    FLG = RUF$_AMBQ_ERR;
    	END;

    SIGNAL(.FLG, .TPARSE_BLOCK[TPA$L_TOKENCNT], .TPARSE_BLOCK[TPA$L_TOKENPTR]);

    RETURN 1
    END;

GLOBAL ROUTINE MAIN_HANDLER (SIGNAL, MECHANISM) =
!++
!
! FUNCTIONAL DESCRIPTION:
!	This is the main exception handler.
!	It accepts and processes signals and outputs error messages.
!
! CALLING SEQUENCE:
!	SIGNAL(args)
!
! INPUT PARAMETERS:
!	SIGNAL - Signal exception vector
!	MECHANISM - Mechanism exception vector
!
! IMPLICIT INPUTS:
!	None
!
! OUTPUT PARAMETERS:
!	None
!
! IMPLICIT OUTPUTS:
!	None
!
! ROUTINE VALUE:
!	None
!
! SIDE EFFECTS:
!	None
!
!--

    BEGIN

    MAP
	SIGNAL : REF BLOCK[,BYTE],	! Signal args
	MECHANISM : REF BLOCK[,BYTE];	! Mechanism args

    OWN
        MSGVEC : VECTOR[RUF$_FAO_MAX]		 ! $PUTMSG block
    	    INITIAL(
    		RUF$_FAO_MAX+2,	! # of args
    		0,			! filled-in status code
    		RUF$_FAO_MAX,		! # of FAO args
    		RUF$_FAO_MAX*0);			! filled-in FAO args

    LOCAL
	ERR_CODE: BLOCK[1,LONG];

    ERR_CODE = .SIGNAL[CHF$L_SIG_NAME];

    IF .ERR_CODE[STS$V_CUST_DEF]
    THEN
	BEGIN
        MSGVEC[1] = .ERR_CODE;
        CH$MOVE(RUF$_FAO_MAX*4, SIGNAL[CHF$L_SIG_ARG1], MSGVEC[3]);
        $PUTMSG(MSGVEC = MSGVEC);

	MECHANISM[CHF$L_MCH_SAVR0] = 1;
	$UNWIND(DEPADR = MECHANISM[CHF$L_MCH_DEPTH]);
	RETURN SS$_CONTINUE;
	END

    ELSE
	BEGIN
	RUCP_FLAG[EXIT_CMD] = 1;

	RETURN SS$_RESIGNAL;
	END;
    END;

END
ELUDOM
