	.TITLE	RUFSYSSRV - Recovery Unit Facility System Service Library
	.IDENT	'V03-000'
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;
; Facility:
;	Recovery Unit Management Facility
;++
; Abstract:
;	This module contains the Recovery Unit Management Facility (RUF)
;	system service library.  These services represent the user-accesible
;	portion of the RUF. These services implement the RUF, with help
;	from the recoverable facilities (RMS,DBMS,TPSS,...) that have been
;	implemented to co-operate with RUF.
;
; Overview:
;	The following services are implemented in this module:
;
;	    RUF$START(id)
;	    RUF$END()
;	    RUF$PH1_END()
;	    RUF$PH2_END()
;	    RUF$CANCEL()
;	    RUF$MARKPT(mkpt)
;	    RUF$RESET(mkpt)
;	    RUF$DCLRUH(addr,param)
;	    RUF$CANRUH(addr)
;	    RUF$REENTER()
;	    RUF$MODIFY(sts)
;--

	.SBTTL	Declarations and Equates
;
;	Include Files
;

;
;	Equated Symbols
;
	$PCBDEF				; Process Control Block definitions
	$PRDEF				; Processor Register definitions
	$PSLDEF				; Processor Status definitions
	$RUCBDEF			; Recovery-unit control definitions
	$RUFDEF				; Recovery-unit facility definitions
	$RUFMSGDEF			; Recovery-unit facility error codes
	$RUHDEF				; Recovery-unit handler offsets
	$SSDEF				; System service error codes

;
;	Psect Usage
;
	.PSECT	RUF$CODE, EXE, NOWRT, SHR, GBL, PIC, PAGE

	.SBTTL	Start Recovery-Unit System Service
;++
; Input Parameters:
;
;	 R0  - Normalized change mode argument value.
;
;	 R2  - RUCB pointer. (Therefore R2 must be specified in all
;		 register save masks for kernel routines.)
;
;	 R4  - Caller's access mode. (Therefore R4 must be specified in all
;		 register save masks for kernel routines.)
;
;	 R3-R6  - Scratch. (Therefore R3-R6 must be specified in all
;		 register save masks for kernel routines.)
;
;	 AP  - Argument pointer existing when the change
;	       mode instruction was executed.
;
;	 FP  - Address of minimal call frame to exit
;	       the change mode dispatcher and return to
;	       the original mode.
;
; Output Parameters
;
;	R0   - Status code
;--

	.ENTRY	RUF$START, ^M<R2,R3,R4,R5,R6>
	TSTL	@#CTL$GL_RUF		; Is an RU already alive?
	BNEQ	ILLRUSRV1		; No good.
;
; Compute the recovery-unit id
;
; Algorithm is as follows:
;	Get system time and utilize the most significant longword that
;	changes in 10ms.  This corresponds to bits 16-48 of the time value
;	and it wraps around in approx. 1/2 of time-of-year clock (~250 days).
;	This value corresponds to adding 1.8640 (base 16) to this clock
;	every 10 ms.
;
;	Get Process Index (low word of PID) to uniquely identify the RU
;	even within the 10ms. window of the hardware clock.
;	I.e.  We assume that no single process can start, end/abort a
;	recovery unit in less than 10ms.
;
;	Get node id from DECnet => use as system id
;	If no DECnet, then use processor SID register as system id.
;	If phase IV, get area id from DECnet and use as area id else 0.(NYI)
;

;
;	Compute time-of-day:
;
	SUBL2	#8,SP			; Make buffer for system time
	MOVL	SP,R3			;  and make ptr to buffer
	$GETTIM_S	TIMADR=(R3)	; Get time

	assume	RUCB$T_RUID eq 0
	MOVL	2(R3),RUCB$L_ID_TIME(R2); Get largest value that always changes
	ADDL2	#8,SP			; Discard time buffer

;
;	Get process index
;
	MOVL	@#CTL$GL_PCB,R0		; Get PCB ptr
	MOVW	PCB$L_PID(R0),-
		RUCB$W_ID_PIX(R2)	; Get index to uniquely identify RU

;
;	Compute the system id:
;
	BSBW	SYS_ID

;
;	Return RUid to user
;
	MOVL	4(AP),R1		; Get address to store ruid
	BEQL	10$			; Doesn't care about the id
	IFNOWRT	#RUCB$C_ID_LEN,(R1),40$,R4 ; Can we write the id?

	assume	RUCB$C_ID_LEN eq 16
	MOVQ	RUCB$T_RUID(R2),(R1)+	; Store id
	MOVQ	RUCB$T_RUID+8(R2),(R1)

10$:	MOVL	R2,@#CTL$GL_RUF		; Set RU alive
	MOVB	#RUCB$C_ACTIVE,-	; Mark RU operational
		RUCB$B_STATE(R2)
	MOVL	#RUF$C_START,-		; Start function
		RUCB$L_HACTION(R2)
	BSBW	RUF$CALL_HANDLERS	; Call the users' handlers

	MOVZWL	#SS$_NORMAL,R0		; Success
30$:	RET

40$:	BRW	ACC_VIO


	.SBTTL	Phase_1 Complete Recovery-Unit System Service
;++
; Input Parameters:
;
;	 R0  - Normalized change mode argument value.
;
;	 R2  - RUCB pointer. (Therefore R2 must be specified in all
;		 register save masks for kernel routines.)
;
;	 R4  - Caller's access mode. (Therefore R4 must be specified in all
;		 register save masks for kernel routines.)
;
;	 R3-R6  - Scratch. (Therefore R3-R6 must be specified in all
;		 register save masks for kernel routines.)
;
;	 AP  - Argument pointer existing when the change
;	       mode instruction was executed.
;
;	 FP  - Address of minimal call frame to exit
;	       the change mode dispatcher and return to
;	       the original mode.
;
; Output Parameters
;
;	R0   - Status code
;--

	.ENTRY	RUF$PH1_END, ^M<R2,R3,R4,R5,R6>
	TSTL	@#CTL$GL_RUF		; Is there an RU?
	BEQL	ILLRUSRV1		; Nope
	MOVB	#RUCB$C_PH1_INIT,-	; Starting phase 1
		RUCB$B_STATE(R2)
	MOVL	#RUF$C_PHASE1,-		; Phase 1 action code
		RUCB$L_HACTION(R2) 
	BSBW	RUF$CALL_HANDLERS	; Tell everyone it's phase 1

	BSBW	CALL_CJF		; Tell journaling it's phase 1

	MOVB	#RUCB$C_PH1_FIN,-	; Phase 1 complete
		RUCB$B_STATE(R2)
	MOVZWL	#SS$_NORMAL,R0		; Success
	RET

ILLRUSRV1:
	MOVL	#RUF$_INVRUSRV,R0	; Bad service synch
	RET


	.SBTTL	Phase_2 Complete Recovery-Unit System Service
;++
; Input Parameters:
;
;	 R0  - Normalized change mode argument value.
;
;	 R2  - RUCB pointer. (Therefore R2 must be specified in all
;		 register save masks for kernel routines.)
;
;	 R4  - Caller's access mode. (Therefore R4 must be specified in all
;		 register save masks for kernel routines.)
;
;	 R3-R6  - Scratch. (Therefore R3-R6 must be specified in all
;		 register save masks for kernel routines.)
;
;	 AP  - Argument pointer existing when the change
;	       mode instruction was executed.
;
;	 FP  - Address of minimal call frame to exit
;	       the change mode dispatcher and return to
;	       the original mode.
;
; Output Parameters
;
;	R0   - Status code
;--

	.ENTRY	RUF$PH2_END, ^M<R2,R3,R4,R5,R6>
	TSTL	@#CTL$GL_RUF		; Is there an RU active?
	BEQL	ILLRUSRV1		; Nope
	MOVB	#RUCB$C_PH2_INIT,-	; Starting phase 2
		RUCB$B_STATE(R2) 
	MOVL	#RUF$C_PHASE2,-		; Phase 2 action code
		RUCB$L_HACTION(R2)
	BSBW	RUF$CALL_HANDLERS	; Tell everyone it's phase 2

	BSBW	CALL_CJF		; Tell journaling it's phase 2

	MOVB	#RUCB$C_PH2_FIN,-	; Phase 2 complete
		RUCB$B_STATE(R2) 

;
;	Mark the RUCB with no active recovery-unit.
;	Zero the significant state variables in the RUCB
;
NO_RU_ACT:
	CLRL	@#CTL$GL_RUF		; No more RU active
	assume	RUCB$L_HACTION+4 eq RUCB$L_MARKPT
	CLRQ	RUCB$L_HACTION(R2)	; Zero handler code & markpt
	CLRW	RUCB$W_SRVCODE(R2)	;   "  service code
	CLRB	RUCB$B_STATE(R2)	;   "  current state
	BICB2	#^C<RUCB$M_INIT>,-	;   "  flags except init
		RUCB$B_CTRL(R2)
	assume	RUCB$T_RUID eq 0
	assume	RUCB$C_ID_LEN eq 16
	CLRQ	(R2)+			; Zero RU id
	CLRQ	(R2)

	MOVZWL	#SS$_NORMAL,R0		; Success
	RET

	.SBTTL	Cancel Recovery-Unit System Service
;++
; Input Parameters:
;
;	 R0  - Normalized change mode argument value.
;
;	 R2  - RUCB pointer. (Therefore R2 must be specified in all
;		 register save masks for kernel routines.)
;
;	 R4  - Caller's access mode. (Therefore R4 must be specified in all
;		 register save masks for kernel routines.)
;
;	 R3-R6  - Scratch. (Therefore R3-R6 must be specified in all
;		 register save masks for kernel routines.)
;
;	 AP  - Argument pointer existing when the change
;	       mode instruction was executed.
;
;	 FP  - Address of minimal call frame to exit
;	       the change mode dispatcher and return to
;	       the original mode.
;
; Output Parameters
;
;	R0   - Status code
;--

	.ENTRY	RUF$CANCEL, ^M<R2,R3,R4,R5,R6>
	TSTL	@#CTL$GL_RUF		; Is there an RU active?
	BEQL	ILLRUSRV1		; Nope

	MOVB	#RUCB$C_CANCEL,-	; Starting cancel
		RUCB$B_STATE(R2)
	MOVL	#RUF$C_CANCEL,-		; Cancel action code
		RUCB$L_HACTION(R2)
	BSBW	RUF$CALL_HANDLERS	; Tell everyone it's cancel

	BSBW	CALL_RCP		; Tell RCP it's cancel

	MOVL	#RUF$C_CANCEL_END,-	; Cancel complete action code
		RUCB$L_HACTION(R2)
	BSBW	RUF$CALL_HANDLERS	; Tell everyone

	BRB	NO_RU_ACT		; No RU active


	.SBTTL	Declare Markpoint Recovery-Unit System Service
;++
; Input Parameters:
;
;	 R0  - Normalized change mode argument value.
;
;	 R2  - RUCB pointer. (Therefore R2 must be specified in all
;		 register save masks for kernel routines.)
;
;	 R4  - Caller's access mode. (Therefore R4 must be specified in all
;		 register save masks for kernel routines.)
;
;	 R3-R6  - Scratch. (Therefore R3-R6 must be specified in all
;		 register save masks for kernel routines.)
;
;	 AP  - Argument pointer existing when the change
;	       mode instruction was executed.
;
;	 FP  - Address of minimal call frame to exit
;	       the change mode dispatcher and return to
;	       the original mode.
;
; Output Parameters
;
;	R0   - Status code
;--

	.ENTRY	RUF$MARKPOINT, ^M<R2,R3,R4,R5,R6>
	TSTL	@#CTL$GL_RUF		; Is there an RU active?
	BEQL	ILLRUSRV1		; Nope
	INCL	RUCB$L_MARKPT(R2)	; Next markpoint value
	MOVL	4(AP),R0		; Get addr to store mkpt
	BEQL	10$			; Doesn't care (!)
	IFNOWRT	#4,(R0),20$,R4		; Can we write the mkpt?
	MOVL	RUCB$L_MARKPT(R2),(R0)	; Store mkpt for user
10$:	MOVL	#RUF$C_MARKPOINT,-	; Markpoint action code
		RUCB$L_HACTION(R2)
	BSBW	RUF$CALL_HANDLERS	; Tell everyone

	BSBW	CALL_CJF		; Tell journaling

	MOVZWL	#SS$_NORMAL,R0		; Success
	RET

20$:	DECL	RUCB$L_MARKPT(R2)	; Reset markpoint value
	BRW	ACC_VIO


	.SBTTL	Reset to Markpoint Recovery-Unit System Service
;++
; Input Parameters:
;
;	 R0  - Normalized change mode argument value.
;
;	 R2  - RUCB pointer. (Therefore R2 must be specified in all
;		 register save masks for kernel routines.)
;
;	 R4  - Caller's access mode. (Therefore R4 must be specified in all
;		 register save masks for kernel routines.)
;
;	 R3-R6  - Scratch. (Therefore R3-R6 must be specified in all
;		 register save masks for kernel routines.)
;
;	 AP  - Argument pointer existing when the change
;	       mode instruction was executed.
;
;	 FP  - Address of minimal call frame to exit
;	       the change mode dispatcher and return to
;	       the original mode.
;
; Output Parameters
;
;	R0   - Status code
;--

	.ENTRY	RUF$RESET, ^M<R2,R3,R4,R5,R6>
	TSTL	@#CTL$GL_RUF		; Is there an RU active?
	BEQL	ILLRUSRV3		; Nope

	MOVL	4(AP),R0		; Get requested markpoint
	IFNORD	#4,(R0),10$,R4		; Can we read the markpt?
	CMPL	(R0),RUCB$L_MARKPT(R2)	; Is it a valid markpoint?
	BGEQU	20$			; No
	MOVL	(R0),RUCB$L_MARKPT(R2)	; Set new markpoint value
	MOVB	#RUCB$C_RESET,-		; Starting reset
		RUCB$B_STATE(R2) 
	MOVL	#RUF$C_RESET,-		; Reset action code
		RUCB$L_HACTION(R2)
	BSBW	RUF$CALL_HANDLERS	; Tell everyone

	BSBW	CALL_RCP		; Tell RCP it's reset

	MOVB	#RUCB$C_ACTIVE,-	; Reset complete
		RUCB$B_STATE(R2)
	MOVZWL	#SS$_NORMAL,R0		; Success
	RET

10$:	BRW	ACC_VIO

20$:	MOVL	#RUF$_INVRUMKPT,R0	; Signal illegal markpoint
	RET

ILLRUSRV3:				; Ill RU service
	BRW	ILLRUSRV1


	.SBTTL	Declare RU Handler Recovery-Unit System Service
;++
; Input Parameters:
;
;	 R0  - Normalized change mode argument value.
;
;	 R2  - RUCB pointer. (Therefore R2 must be specified in all
;		 register save masks for kernel routines.)
;
;	 R4  - Caller's access mode. (Therefore R4 must be specified in all
;		 register save masks for kernel routines.)
;
;	 R3-R6  - Scratch. (Therefore R3-R6 must be specified in all
;		 register save masks for kernel routines.)
;
;	 AP  - Argument pointer existing when the change
;	       mode instruction was executed.
;
;	 FP  - Address of minimal call frame to exit
;	       the change mode dispatcher and return to
;	       the original mode.
;
; Output Parameters
;
;	R0   - Status code
;--

	.ENTRY	RUF$DCLRUH, ^M<R2,R3,R4,R5,R6>
	MOVL	4(AP),R0		; Get handler addr
	BEQL	10$			; None is an error
	CMPL	#PSL$C_KERNEL,R4	; Handler request from kernel mode?
	BEQL	ILLRUSRV2		; Not permitted
	MOVAL	RUCB$L_RUH_EXEC-4(R2)[R4],R1 ; Get listhead for proper mode
	MOVL	RUCB$L_FREESP(R2),R3	; Get next free cell
	BEQL	20$			; No room at the inn
	MOVL	12(AP),R0		; Get addr to store handler ID
	BEQL	5$			; Doesn't care
	IFNOWRT	#4,(R0),ACC_VIO,R4	; Can we write the h_id?
	MOVL	R3,(R0)			; Store the addr of the cell
5$:	MOVL	RUH$L_LINK(R3),-	; Remove this cell from freelist
		RUCB$L_FREESP(R2)
	MOVL	RUH$L_LINK(R1),-	; Set link
		RUH$L_LINK(R3)	
	MOVQ	4(AP),RUH$L_ADDR(R3)	; Insert routine addr and param
	MOVL	R3,RUH$L_LINK(R1)	; Insert in list
	MOVZWL	#SS$_NORMAL,R0		; Success
	RET

10$:	MOVZWL	#SS$_NOHANDLER,R0	; No handler block
	RET

20$:	MOVL	#RUF$_NORUHMEM,R0	; No memory for handlers
	RET

ACC_VIO:
	MOVZWL	#SS$_ACCVIO,R0		; Access violation
	RET

ILLRUSRV2:				; Ill RU service
	BRW	ILLRUSRV1


	.SBTTL	Cancel RU Handler Recovery-Unit System Service
;++
; Input Parameters:
;
;	 R0  - Normalized change mode argument value.
;
;	 R2  - RUCB pointer. (Therefore R2 must be specified in all
;		 register save masks for kernel routines.)
;
;	 R4  - Caller's access mode. (Therefore R4 must be specified in all
;		 register save masks for kernel routines.)
;
;	 R3-R6  - Scratch. (Therefore R3-R6 must be specified in all
;		 register save masks for kernel routines.)
;
;	 AP  - Argument pointer existing when the change
;	       mode instruction was executed.
;
;	 FP  - Address of minimal call frame to exit
;	       the change mode dispatcher and return to
;	       the original mode.
;
; Output Parameters
;
;	R0   - Status code
;--

	.ENTRY	RUF$CANRUH, ^M<R2,R3,R4,R5,R6>
	MOVAL	RUCB$L_RUH_EXEC-4(R2)[R4],R1 ; Get listhead for proper mode
	MOVL	4(AP),R0		; Get handler
	BEQL	30$			; None means release all
	CMPL	#PSL$C_KERNEL,R4	; Handler request from kernel mode?
	BEQL	ILLRUSRV2		; Not permitted
	IFNORD	#4,(R0),20$,R4		; Can we read the id?

5$:	MOVL	RUH$L_LINK(R1),R3	; Advance to next
	BEQL	10$			; Not in the list
	CMPL	(R0),R3			; Is this the one?
	BEQL	6$			; We found it
	MOVL	R3,R1			; Advance the link
	BRB	5$			;  and go around again	

6$:	MOVAL	RUCB$L_FREESP(R2),R0	; Get freespace listhead
	BSBB	FREE_CELL		; Release this cell
7$:	MOVZWL	#SS$_NORMAL,R0		; Success
	RET

10$:	MOVZWL	#SS$_NOHANDLER,R0	; No handler block
	RET

20$:	BRW	ACC_VIO			; Access violation

30$:	MOVAL	RUCB$L_FREESP(R2),R0	; Get freespace listhead
31$:	MOVL	(R1),R3			; Get next cell
	BEQL	7$			; No more
	BSBB	FREE_CELL		; Release
	BRB	31$			;  and free remainder
;
; Internal subroutine to release an element
; Inputs:
;	R0 - Ptr to freespace listhead
;	R1 - Ptr to pred
;	R2 - RUCB ptr
;	R3 - Ptr to cell
; Outputs:
;	None
;
FREE_CELL:
	MOVL	RUH$L_LINK(R3),-	; Remove from list
		RUH$L_LINK(R1)
	CLRQ	RUH$L_ADDR(R3)		; Zero addr and param fields
	MOVL	RUH$L_LINK(R0),-	; Set link
		RUH$L_LINK(R3)
	MOVL	R3,RUH$L_LINK(R0)	; Insert in free list
	RSB

	.SBTTL	Modify RU Attributes Recovery-Unit System Service
;++
; Input Parameters:
;
;	 R0  - Normalized change mode argument value.
;
;	 R2  - RUCB pointer. (Therefore R2 must be specified in all
;		 register save masks for kernel routines.)
;
;	 R4  - Caller's access mode. (Therefore R4 must be specified in all
;		 register save masks for kernel routines.)
;
;	 R3-R6  - Scratch. (Therefore R3-R6 must be specified in all
;		 register save masks for kernel routines.)
;
;	 AP  - Argument pointer existing when the change
;	       mode instruction was executed.
;
;	 FP  - Address of minimal call frame to exit
;	       the change mode dispatcher and return to
;	       the original mode.
;
; Output Parameters
;
;	R0   - Status code
;
;--

	.ENTRY	RUF$MODIFY, ^M<R2,R3,R4,R5,R6>
	TSTL	@#CTL$GL_RUF		; Is there an RU active?
	BEQL	ILLRUSRV2		; Nope
	CMPB	#PSL$C_EXEC,R4		; Exec or kernel mode only
	BLSSU	ILLRUSRV2		; No permission
	INSV	4(AP),#RUCB$V_NOAUTOREC,- ; Set/clear the autorecovery flag
		#1,RUCB$B_CTRL(R2)	
	MOVZWL	#SS$_NORMAL,R0		; Success
	RET


	.SBTTL	SYS_ID	Compute the system identification
;++
; Input Parameters:
;
;	 R2  - RUCB pointer.
;
;	 R0-R1  - Scratch.
;
; Output Parameters
;
;	None;  R0, R1 destroyed
;
; Algorithm:
;
;	For now we try to translate "SYS$NODE" from the system logical name
;	table and extract the 1-6 char node name.
;	If there is a translation, the output is of the form: "_name::"
;	If that name does not translate, just use the processor SID register.
;
;	Eventually we will utilize the DECnet Phase IV, Sys Comm or 
;	other method to determine the system id.
;
;--
RES_NAM_LEN = 12			; Max is 9 -- _xxxxxx::
NODE_NAME:
	.ASCII	\SYS$NODE\
NODE_NAME_LEN = .-NODE_NAME

SYS_ID:
	PUSHL	R3			; Save a register
	SUBL2	#RES_NAM_LEN,SP		; Make a destination buffer
	PUSHAL	(SP)			; Make a descriptor for the buffer
	PUSHL	#RES_NAM_LEN
	MOVL	SP,R3			; Save a ptr to it
	PUSHAL	W^NODE_NAME		; Make a descriptor for "SYS$NODE"
	PUSHL	#NODE_NAME_LEN
	MOVL	SP,R0			; Save ptr to it
	PUSHL	#0			; A place for the length
	$TRNLOG_S	LOGNAM=(R0),-	; Translate the name
			RSLBUF=(R3),-
			RSLLEN=-4(R0),-
			DSBMSK=#6	; Only search the system table
	BLBC	R0,20$			; Give up on errors
	CMPL	R0,#SS$_NOTRAN		; Was there a translation?
	BEQL	20$			; nope
	MOVAL	RUCB$B_ID_SYS(R2),R0	; Ptr to RUCB storage cell for sys id
	SUBW3	#3,(SP),R1		; Get number of real chars in name
	BLEQ	20$			; No name?!
	MOVL	4(R3),R3		; Ptr to string
	INCL	R3			; Skip "_"
10$:	MOVB	(R3)+,(R0)+		; Copy a byte
	SOBGTR	R1,10$			; While they last
	BRB	30$			; Clean up the stack and return

20$:	MFPR	#PR$_SID,R0		; Get processor ID
	MOVL	R0,RUCB$B_ID_SYS(R2)	; Save as first 4 bytes of sysid

30$:	ADDL2	#<8*2+4+RES_NAM_LEN>,SP	; Discard 2 descriptors, length word,
					;  and the result buffer
	MOVL	(SP)+,R3		; Restore regs
	RSB

	.SBTTL	Interface to Common Journaling
;++
; Input Parameters:
;
;	 R0  - Normalized change mode argument value.
;
;	 R2  - RUCB pointer. (Therefore R2 must be specified in all
;		 register save masks for kernel routines.)
;
;	 R4  - Caller's access mode. (Therefore R4 must be specified in all
;		 register save masks for kernel routines.)
;
;	 R3-R6  - Scratch. (Therefore R3-R6 must be specified in all
;		 register save masks for kernel routines.)
;
;	 AP  - Argument pointer existing when the change
;	       mode instruction was executed.
;
;	 FP  - Address of minimal call frame to exit
;	       the change mode dispatcher and return to
;	       the original mode.
;
; Output Parameters
;
;	R0   - Status code
;
;--

CALL_CJF:
	RSB

	.SBTTL	Interface to the RCP
;++
; Input Parameters:
;
;	 R0  - Normalized change mode argument value.
;
;	 R2  - RUCB pointer. (Therefore R2 must be specified in all
;		 register save masks for kernel routines.)
;
;	 R4  - Caller's access mode. (Therefore R4 must be specified in all
;		 register save masks for kernel routines.)
;
;	 R3-R6  - Scratch. (Therefore R3-R6 must be specified in all
;		 register save masks for kernel routines.)
;
;	 AP  - Argument pointer existing when the change
;	       mode instruction was executed.
;
;	 FP  - Address of minimal call frame to exit
;	       the change mode dispatcher and return to
;	       the original mode.
;
; Output Parameters
;
;	R0   - Status code
;
;--

CALL_RCP:
	RSB

	.END
