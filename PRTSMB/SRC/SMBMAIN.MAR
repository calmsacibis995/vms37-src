	.TITLE	SMBMAIN - PRINT SYMBIONT MAIN ROUTINE
	.IDENT	'V03-001'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY:	VAX/VMS PRINT SYMBIONT
;
; ABSTRACT:	THIS MODULE CONTAINS THE MAINLINE CODE FOR THE PRINT
;		SYMBIONT.
;
;
; ENVIRONMENT:	NATIVE/USER MODE NON-PRIVILEGED CODE
;
; AUTHOR:	H.B.BOSWELL + LEN KAWELL, CREATION DATE:  22-APR-77
;
; MODIFIED BY:
;
;	V03-001	MLJ0082		Martin L. Jack,	15-Mar-1982  16:11
;		Add completion status for open failure.
;
;	V02-004	MLJ0068		Martin L. Jack,	14-Jan-1982  22:58
;		Move initialization of RAB$L_UBF to correct buffer corruption
;		on first line of file.
;
;	V02-003	GWF0140		Gary W. Fowler		01-Dec-1981
;		Add purge working set before hibernating.
;
;	V02-002	GWF0088		Gary W. Fowler		23-Jul-1981
;		Modify to use 2 user buffers
;
; 01	- 
;--
	.PAGE
	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;
;	[PRTSMB.SRC]SMBPRE.MAR

;
; MACROS:
;

;
; EQUATED SYMBOLS:
;
	$JBCMSGDEF			;JOB CONTROLLER MESSAGES
	$SHRDEF				;SHARED MESSAGES


;
; OWN STORAGE:
;

	IMPURE_DATA

SMB$G_DATA::
	.BLKB	SD_K_SIZE		;SYMBIONT DATA BASE
	.PAGE
	PURE_SECTION
SMB$L_ADDESC:				; DESCRIPTOR FOR PURGE WORKING SET
	.LONG	0
	.LONG	^X07FFFFFFF		; PURGE ENTIRE WORKING SET

	.SBTTL	PRINT SYMBIONT MAIN ROUTINE
;++
; FUNCTIONAL DESCRIPTION:
;
;	THIS IS THE SYMBIONT MAIN LOOP
;
;	SINCE THE PRINTER DRIVER IS DOUBLE BUFFERED, IT IS OPTIMAL
;	TO MAINTAIN TWO OUTSTANDING OUTPUT REQUESTS WHENEVER POSSIBLE.
;	FOR THIS REASON, THIS MAIN LOOP UTILIZES 2 I/O STATUS BLOCKS
;	AND 2 EVENT FLAGS. THE INDEX TO THE CURRENT EVENT FLAG AND
;	STATUS BLOCK IS ALWAYS R2.
;
; CALLING SEQUENCE:
;
;	ENTER DIRECTLY UPON COMPLETION OF THE INIT ROUTINE
;
; INPUT PARAMETERS:
;
;	R11 CONTAINS THE ADDRESS OF THE IMPURE DATA BLOCK
;
; IMPLICIT INPUTS:
;
;	AT WAKE, FILE TO BE PRINTED OPEN, PRINTER ASSIGNED - IN MBAST
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	FILE PRINTED
;	DONE MSG SENT TO MGR
;
; COMPLETION CODES:
;
;	NONE
;
; SIDE EFFECTS:
;
;	NONE
;
;--
 
 
	.ENABL	LSB
 
SMB$MAIN::				;MAIN LOOP
	$SETEF_S  #SMB$K_TOFEFN		;START WITH TOP OF FORM DONE
10$:
	$PURGWS_S	-		; PURGE WORKING SET
		INADR=SMB$L_ADDESC	; ADDRESS OF DESCRIPTOR

	$HIBER_S			;WAIT FOR SOMETHING TO DO
	BBCC	#SD_V_GOOD_WAKE,SD_B_GEN_FLAGS(R11),10$ ;BR IF SHOULDN'T BE AWAKE

;
; PRINT THE FLAG PAGE
;

	BBC	#PQR$V_FLAGPAG,-
		SD_T_MSGDATA+SIM$B_FLAGS(R11),30$ ;BR IF NO FLAG PAGE
	MOVB	#STATE$_FLAGPAGE,SD_B_STATE(R11) ;SET FLAG PAGE STATE
	BSBW	SMB$FLAGPAGE		;PRINT THE FLAG PAGE
	BLBS	R0,20$			;BR IF OK
	BRW	80$			;QUIT
20$:	BSBW	SMB$TOPOFORM		;PRINT THE FORM FEED

30$:
	BBC	#SD_V_OPENERR,SD_B_ERR_FLAGS(R11),35$ ;BR IF OPENED OK
	PUSHL	SD_G_FAB+FAB$L_STV(R11)	;RMS STATUS VALUE
	PUSHL	SD_G_FAB+FAB$L_STS(R11)	;RMS STATUS CODE
	PUSHAL	SD_Q_FILENAME(R11)	;ADDR OF FILE NAME DESCRIPTOR
	PUSHL	#1			;1 FAO ARG
	PUSHL	#<4@16>!SHR$_OPENIN!4	;CONDITION CODE
	CALLS	#5,W^LIB$SIGNAL		;SIGNAL THE ERROR
	BSBW	SMB$TOPOFORM		;PRINT FORM FEED
	BRW	90$			;EXIT

35$:
	MOVW	#1,SD_W_PAGE(R11)	;INIT PAGE NUMBER
	BBC	#PQR$V_PAGHDR,SD_T_MSGDATA+SIM$B_FLAGS(R11),40$ ;BR IF NO HEADERS
	BSBW	SMB$PAGEHDRNFF		;PRINT A HEADER / NO FORM FEED
40$:	SETBIT	SD_V_FLGPAGDONE,SD_B_GEN_FLAGS(R11) ;SET DONE WITH FLAG PAGE
	CLRBIT	SD_V_FFREQ,SD_B_GEN_FLAGS(R11) ;CLEAR FORM FEED REQUIRED

;
; CHECK IF INTERNAL CARRIAGE CONTROL
;

	BITB	#FAB$M_CR!FAB$M_FTN!FAB$M_PRN,-
			SD_G_FAB+FAB$B_RAT(R11) ;IS IT INTERNAL CAR CONT
	BNEQ	50$			;BR IF NO
	CLRL	SD_G_QIOBLK+QIO$_P4(R11);NO CARRIAGE CONTROL
	SETBIT	SD_V_INTRNLCC,SD_B_GEN_FLAGS(R11) ;SHOW INTERNAL CARRIAGE CONTROL

;
; CHECK IF 'CR-LF' CARRIAGE CONTROL
;

50$:
	BBC	#FAB$V_CR,SD_G_FAB+FAB$B_RAT(R11),60$ ;BR IF NOT 'CR-LF'
	MOVZBL	#^A\ \,SD_G_QIOBLK+QIO$_P4(R11) ;SET SINGLE SPACE CC

;
; INITIALIZE THE I/O STATUS
;
60$:
	$SETEF_S 	#SMB$K_LPEFN0	;INITIALLY SET THE EVENT FLAGS,
	$SETEF_S	#SMB$K_LPEFN1	;
	CLRQ	SD_Q_IOSB0(R11)		;CLEAR I/O STATUS
	CLRQ	SD_Q_IOSB1(R11)		;...
	CLRL	R2			;AND INITIALIZE THE I/O STATUS INDEX

;
; MAIN I/O LOOP
;
	MOVB	#STATE$_GET_PRIN,SD_B_STATE(R11) ;SET GET/PRINT STATE

70$:
	ADDL3	#SMB$K_LPEFN0,R2,R0	;GET EVENT FLAG NUMBER
	$WAITFR_S R0			;WAIT FOR THE I/O TO COMPLETE
	BBS	#SD_V_ABORT,SD_B_ERR_FLAGS(R11),80$ ;BR IF ABORTING
	MOVAQ	SD_Q_IOSB0(R11)[R2],R0	;GET THE IOSB ADDRESS
	TSTW	(R0)			;DID IT COMPLETE?
	BEQL	77$			;BR IF NO (OR 1ST I/O)
	BLBS	(R0),75$		;BR IF OK
	SETBIT	SD_V_PRINTERR,SD_B_ERR_FLAGS(R11) ;SET PRINT ERROR
	SIGNAL	JBC$_PRINTOUT,#0,(R0)	;SIGNAL THE ERROR
	BRB	80$			;QUIT

75$:	MOVZBL	4(R0),R1		;GET #LINES PRINTED
	ADDL	R1,SD_L_LINECNT(R11)	;ADD LINES PRINTED TO TOTAL
	BBS	#SD_V_FFREQ,SD_B_GEN_FLAGS(R11),77$ ;BR IF LAST I/O WAS A FF
	DECL	R1			;ALREADY ASSUMED ONE LINE
	ADDB	R1,SD_B_LTPCNT(R11)	;ADD TO LINES THIS PAGE COUNT
76$:	CMPB	SD_B_LTPCNT(R11),SD_B_PAGELEN(R11) ;# LINES GTR THAN PAGE SIZE?
	BLEQU	77$			;BR IF NO
	SUBB	SD_B_PAGELEN(R11),SD_B_LTPCNT(R11) ;NORMALIZE
	BRB	76$			;CHECK AGAIN
77$:	BITB	#SD_M_GETERR!SD_M_PRINTERR!SD_M_ABORT,- ;ANY ERRORS?
		SD_B_ERR_FLAGS(R11)
	BNEQ	80$			;BR IF YES

	CMPB	#STATE$_EOF_CLOS,SD_B_STATE(R11) ;ARE WE DONE?
	BEQL	80$			;BR IF YES
	CLRBIT	SD_V_FFREQ,SD_B_GEN_FLAGS(R11) ;CLEAR FF REQUIRED
	BSBW	SMB$GET			;GET AND PRINT THE NEXT LINE
	XORB	#1,R2			;TOGGLE I/O STATUS INDEX
	BRB	70$			;GET AND PRINT NEXT LINE

;
; FILE PRINTED, SET PAPER TO TOP OF PAGE, AND SEE IF ANY MORE COPIES
;

80$:	$SETIMR_S  #SMB$K_TOFEFN,B^85$	;SET TIMER IN CASE PRINTER IS BROKEN
	BSBW	SMB$TOPOFORM		;PUT PAPER AT TOP OF FORM
	$CANTIM_S			;CANCEL TOP OF FORM TIMER
	TSTB	SD_B_ERR_FLAGS(R11)	;ANY ERRORS
	BNEQ	90$			;BR IF ERRORS - CAN'T BE OPEN ERROR
	DECB	SD_T_MSGDATA+SIM$B_FILCOPY(R11) ;SUBT 1 FOR THIS COPY
	BLEQU	90$			;BR IF DONE - CAN'T BE ANY ERRORS
	$REWIND	SD_G_RAB(R11)		;REWIND THE FILE FOR NEXT COPY
	MOVB	#STATE$_OPEN,SD_B_STATE(R11) ;RESET STATE TO OPEN
	BRW	30$			;PRINT NEXT COPY
 
85$:	.LONG	<-1*50000000>,-1	;5 SECOND DELTA TIME

;
; FILE PRINTING DONE
;

90$:	$SETAST_S  #0			;DISABLE ASTS FOR SURE

	TSTW	SD_G_FAB+FAB$W_IFI(R11)	; HAS OPEN BEEN DONE?
	BEQL	120$			; BR IF NO
	CLRBIT	FAB$V_DLT,SD_G_FAB+FAB$L_FOP(R11) ;CLEAR THE DELETE BIT
	TSTW	SD_G_NAM+NAM$W_DID(R11)	;FILE HAVE A DIRECTORY?
	BEQL	112$			;IF NO-DELETE IF REQUESTED EVEN ON ERROR
	BBS	#SD_V_ABORT,SD_B_ERR_FLAGS(R11),115$ ;BR IF ABORTING
112$:	BBC	#PQR$V_DELETE,SD_T_MSGDATA+SIM$B_FLAGS(R11),115$ ;BR IF NO DELETE
	SETBIT	FAB$V_DLT,SD_G_FAB+FAB$L_FOP(R11) ; TELL RMS TO DELETE THE FILE
	BSBW	SMB$SETUIC		;SET UIC TO REQUESTOR'S
115$:	$CLOSE	SD_G_FAB(R11)		;CLOSE THE FILE
	CLRW	SD_G_RAB+RAB$W_ISI(R11)	; EFFECT A FAST DISCONNECT AFTER CLOSE
	BSBW	SMB$RSTUIC		;BE SURE WE'RE RUNNING AT RIGHT UIC

;
; SET ENDING STATUS
;

120$:	MOVZBL	#MOD$_INPERR,R3		;ASSUME INPUT ERROR
	BBS	#SD_V_GETERR,SD_B_ERR_FLAGS(R11),130$ ; Br if input error
	MOVZBL	#MOD$_OPNERR,R3		; Assume open error
	BBS	#SD_V_OPENERR,SD_B_ERR_FLAGS(R11),130$ 	; Br if open error
	MOVZBL	#MOD$_PRTERR,R3		;ASSUME PRINT ERROR
	BBS	#SD_V_PRINTERR,SD_B_ERR_FLAGS(R11),130$ ;BR IF PRINT ERROR
	MOVZBL	#MOD$_ABORT,R3		;ASSUME ABORT
	BBS	#SD_V_ABORT,SD_B_ERR_FLAGS(R11),130$ ;BR IF ABORT
	MOVZBL	#MOD$_SUCCESS,R3	;SET SUCCESS

;
; DO FINAL CLEAN UP
;

130$:
	CLRW	SD_B_ERR_FLAGS(R11)	;RESET BOTH GROUPS OF FLAGS
	TSTW	SD_Q_TOFIOSB(R11)	;DID TOF COMPLETE OR TIMEOUT?
	BNEQ	140$			;BR IF IO COMPLETED
	$CANCEL_S  SD_G_QIOBLK+QIO$_CHAN(R11) ;ABORT THE IO IF NOT DONE
140$:	$DASSGN_S  SD_G_QIOBLK+QIO$_CHAN(R11) ;DEASSIGN THE PRINTER

;
; SEND DONE MESSAGE TO MGR - R3 HAS STATUS
;


	ASSUME	STATE$_IDLE EQ 0

	CLRB	SD_B_STATE(R11)		;SET IDLE STATE
	BSBW	SMB$FILE_DONE		;SEND DONE MSG TO MGR
	$SETAST_S  #1			;ENABLE ASTS
	BRW	SMB$MAIN		;GO AGAIN

	.DSABL	LSB
	.END
