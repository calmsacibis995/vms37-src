
MODULE RM3CONN (LANGUAGE (BLISS32) ,
		IDENT = 'V03-002'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:	RMS32 INDEX SEQUENTIAL FILE ORGANIZATION
!
! ABSTRACT:
!                INDEXED SPECIFIC CODE FOR $CONNECT
!
!
! ENVIRONMENT:
!
!		VAX/VMS OPERATING SYSTEM
!
!--

!
! AUTHOR:	Wendy Koenig     CREATION DATE:        	6-APR-78  10:11
!
!
! MODIFIED BY:
!
!	V03-002 LJA0007		Laurie Anderson 	25-Mar-1982
!		Change KBUFSZ to reference a macro when computing buffer 
!		size and make IFB$B_KBUFSZ a word, now: IFB$W_KBUFSZ.
!
!	V03-001	KPL0002		P Lieberwirth		17-Mar-1982
!		Don't allow both PUT to EOF and Block IO to be specified.
!		Call RM$DISCOMMON on this error and errors allocating BDBs.
!		Add subtitle.
!
!	V02-020	KPL0001		P Lieberwirth		 5-Nov-1981
!		Add support for PUT to EOF.
!
!	V02-019	CDS0002		C Saether		29-Sep-1981
!		Always allocate 5 keybuffers for all plgs.
!
!	V02-018	PSK0002		Paulina S. Knibbe	08-Aug-1981
!		Remove support for truncated keys in INDEX on
!		prologue three files.
!
!	V02-017	CDS0001		C Saether		06-Aug-1981
!		Deallocate index descriptors if BRO create
!		and BIO connect.
!
!	V02-016	MCN0011		Maria del C. Nasr	19-Jun-1981
!		Add a fifth key buffer for prologue 3 files.
!
!	V02-015	PSK0001		Paulina S. Knibbe	12-Jun-1981
!		Allocate a 'split context' block whenever we do
!		a connect on a prologue three file.
!
!	V02-014	MCN0008		Maria del C. Nasr	15-May-1981
!		Add a fourth key buffer for prologue 3 files.
!
!	V02-013	MCN0007		Maria del C. Nasr	20-Apr-1981
!		Add code to allocate record output buffer for prologue 3
!		files.
!
!	V02-012 REFORMAT	Ken Henderson		29-Jul-1980
!		The code was reformatted.
!
! REVISION HISTORY:
!
!   Wendy Koenig, 	24-JUL-78  13:34
!   X0002 - allocate 3rd keybuffer to store primary key on put
!
!   Wendy Koenig, 	24-OCT-78  14:01
!   X0003 - make changes caused by sharing conventions
!
!   Wendy Koenig, 	25-OCT-78  13:05
!   X0004 - increment nrp_vbn in case it's bio
!
!   Wendy Koenig, 	3-NOV-78  8:48
!   X0005 - allocate update buffer for all keys,
!	 if bro turns to record i/o and put accessed, allocate the key desc
!
!   Wendy Koenig, 	6-NOV-78  13:05
!   X0006 - check for eof bit in rop, if found, give error
!
!   Wendy Koenig, 	13-NOV-78  13:28
!   X0007 - sharing implementation changes
!
!   Wendy Koenig, 	20-NOV-78  10:54
!   X0008 - allocate bcb's and other changes for sharing
!
!   Wendy Koenig, 	28-NOV-78  15:22
!   X0009 - bdballoc will now allocate the minimum # for isam, so don't call
! bdballoc_alt
!
!   Wendy Koenig, 	22-JAN-79  13:05
!   X0010 - allocate a lock bdb per stream, not per file ( needed for update
! RRV)
!
!   Christian Saether,	26-Oct-79  23:45
!   0011 - rm$bdballoc now allocates lock bdb and does block i/o right
!
!*****

LIBRARY 'RMSLIB:RMS';

REQUIRE 'RMSSRC:RMSIDXDEF';

!
! define default psects for code
!

PSECT
    CODE = F$RMSCONN3(PSECT_ATTR),
    PLIT = F$RMSCONN3(PSECT_ATTR);

!
! Linkages
!

LINKAGE
    L_BDBALLOC,
    L_CCLN1,
    L_CLOSE3,
    L_COMCLNUP,
    L_GETSPC1,
    L_GETS0SPC,
    L_KEY_DESC,
    L_RETSPC1,
    L_CONNECT3;

!
! Forward Routines
!
!
! External Routines

EXTERNAL ROUTINE
    RM$BDBALLOC	: RL$BDBALLOC,
    RM$CCLN1	: RL$CCLN1,
    RM$CLOSE3	: RL$CLOSE3,
    RM$DISCOMMON	: RL$COMCLNUP,
    RM$KEY_DESC	: RL$KEY_DESC,
    RM$RETSPC1	: RL$RETSPC1 NOVALUE,
    RM$GETSPC	: RL$GETSPC1,
    RM$GETS0SPC	: RL$GETS0SPC,
    RM$GETSPC1	: RL$GETSPC1;

!


%SBTTL 'RM$CONNECT3B'
GLOBAL ROUTINE RM$CONNECT3B : RL$CONNECT3 =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This module performs the following functions required for
!	connecting indexed files:
!	1 -- performs various validity checks
!	2 -- if connect for block i/o allocate a BDB and exit after
!	     first deallocating index descriptors if BRO create
!	3 -- allocate BDB's and buffer's depending on access mode
!	     -- if write accessed allocate a lock BDB
!	     -- and if shared, allocate a BCB
!	4 -- allocates key descriptors
!	5 -- allocate key buffers and an update buffer
!	     --	allocates 3 key buffers of keybufsize
!	     -- if prologue 3 file, allocate extra key buffer, keybuffer size
!	     -- if prologue 3 file, allocate split context block
!	6 -- allocate record output buffer for prologue 3 files
!	7 -- initialize various fields in the IRAB
!	8 -- allocate NRP cell and link it in
!
! CALLING SEQUENCE:
!	BSBW RM$CONNECT3B
!	Entered via case branch from RMS$CONNECT and BSBW from RM$CONNECT3;
!	returns to RM$CONNECT3 and then exits from RMS directly
!	(i.e  -	on success, it branches to RM$EXSUC
!	      - on error, it calls either RM$CCLN1 to deallocate the IRAB or
!		RM$COMCLNUP to deallocate the BDB's, buffer's, BCB's, and the
!		IRAB, and then branches to RM$EX_NOSTR)
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	R8 -- RAB address
!	R9 -- IRAB address
!	R10 -- IFAB address
!	R11 -- IMPURE AREA address
!	contents of RAB and IRAB
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	set various fields in IRAB and IFAB
!
! ROUTINE VALUE:
!	usual RMS status codes
!
! SIDE EFFECTS:
!	allocate BDB's and buffer's, key buffers and update buffer, record
!	output buffer for prologue 3 files, and cell for NRP list
! *****
!	If the file was originally accessed for bro and now for record i/o
!	the primary key index descriptor has not been allocated
!	so, we must go through the routine RM$KEY_DESC to allocate
!	after that initial pass, R7 is too valuable to use to store
!	the index descriptor, so we can cheat a little, knowing that
!	the IDX_PTR in the IFAB points to the idx desc. desired and go
!	through that
!
!--

    BEGIN

    ASSUME_C( %QUOTE SIFB$L_NRP_LIST, %QUOTE IFB$L_NRP_LIST);

    MACRO
	DEALLOC_KEYBUF =
	    BEGIN

	    SIZE = .IFAB[IFB$W_KBUFSZ]*5;

	    IF .SIZE LSS 12
	    THEN
		SIZE = 12;

	    RM$RETSPC1(KEYBUF_ADDR(1));
	    RM$DISCOMMON();
	    RETURN .STATUS;
	    END; %,

	DEALLOC_UPDBUF =
	    BEGIN
	    IF .IFAB[IFB$V_UPD]
	    THEN
		BEGIN
		SIZE = .IFAB[IFB$B_NUM_KEYS];

		IF .SIZE LSS 12
		THEN
		    SIZE = 12;

		RM$RETSPC1(.IRAB[IRB$L_UPDBUF]);
		END;
	    END; %,

	DEALLOC_RECBUF =
	    BEGIN
	    IF .IFAB[IFB$B_PLG_VER] EQLU PLG$C_VER_3
	    THEN
		BEGIN

		IF .IFAB[IFB$W_MRS] EQLU 0
		THEN
		    SIZE = .IDX_DFN[IDX$B_DATBKTSZ] * 512
		ELSE
		    SIZE = .IFAB[IFB$W_MRS] + IRC$C_KEYCMPOVH + IRC$C_DATCMPOVH;

		IF .SIZE LSS 12
		THEN
		    SIZE = 12;

		RM$RETSPC1(.IRAB[IRB$L_RECBUF]);
		END;
	    END; %;

    BUILTIN
	TESTBITSC;

    EXTERNAL REGISTER
	COMMON_RAB_STR;

    GLOBAL REGISTER
	R_IDX_DFN_STR;


    ! Support PUT to EOF by translating ROP bit into IRAB bit for use on first
    ! PUT.  Don't allow EOF and BIO to both be specified.
    !
    IF .RAB[ RAB$V_EOF ]
    THEN
	IF .RAB[ RAB$V_BIO ]
	THEN
	    BEGIN
	    RMSERR(ROP);
	    RETURN RM$DISCOMMON();
	    END
	ELSE
	    IRAB[ IRB$V_EOF ] = 1;


    ! in case we're in block i/o mode, have to do this -- same field as nrp_ptr
    !
    IRAB[IRB$L_NRP_VBN] = .IRAB[IRB$L_NRP_VBN] + 1;

    ! if $OPEN or $CREATE was done with bro specified, use the bio rop bit
    ! to determine whether to connect for block or record operations. note:
    ! any subsequent connects are necessarily of the same type.
    !
    BEGIN

    LOCAL
	KREF;

    ! this is a block to define kref locally
    !
    KREF = 0;

    IF TESTBITSC(IFAB[IFB$V_BRO])
    THEN
	BEGIN
	IF .RAB[RAB$V_BIO]
	THEN
	    BEGIN
	    RM$CLOSE3();
	    IFAB[IFB$V_BIO] = 1
	    END
	ELSE
	    IF .IFAB[IFB$V_WRTACC]
	    THEN
		KREF = .IFAB[IFB$B_NUM_KEYS] - 1
        END;

    IRAB[IRB$L_CURBDB] = 0;

    ! allocate all of the BDB's and buffer's and BCB's ( 1 BCB per BDB).
    ! RM$BDBALLOC handles all defaulting such that a minimum of 2 buffers
    ! are allocated plus a lock BDB (no buffer) if write accessed. For block
    ! i/o a BDB only (no buffer) is allocated. Exit after BDBALLOC if block
    ! i/o. Also, count all 'extra' buffers (number in excess of 2 buffers)
    !
    RETURN_ON_ERROR (RM$BDBALLOC(4, .IFAB[IFB$B_BKS]^9), RM$DISCOMMON());

    IF .IFAB[IFB$V_BIO]
    THEN
	RETURN RMSSUC();

    IF .IRAB[IRB$B_BCNT] GTR 2
    THEN
	IFAB[IFB$B_EXTRABUF] = .IFAB[IFB$B_EXTRABUF] + (.IRAB[IRB$B_BCNT] - 2);

    ! if kref neq 0 then we need to allocate some key descriptors
    !

    WHILE .KREF NEQ 0
    DO
	BEGIN
	RETURN_ON_ERROR (RM$KEY_DESC(.KREF),RM$DISCOMMON());
	KREF = .KREF - 1;
	END;

    END;					! {end of definition of kref }

    ! set up the key descriptor for the primary key
    !

    RETURN_ON_ERROR (RM$KEY_DESC(0),RM$DISCOMMON());

    ! The following code is made of the sections that allocate the remaining
    ! structures:
    !	- key buffers
    !	- update buffer, if update set
    !	- record buffer, if prologue 3 file
    !   - split context block, if prologue 3 file
    !	- nrp cell
    ! In each case, if it fails to allocate any of the structures, it
    ! deallocates any of those already allocated, and returns.

    ! allocate the keystring buffer (5 * kbufsz)
    !
    BEGIN

    GLOBAL REGISTER
	SIZE = 2,
	BLK = 1	: REF BBLOCK;

    SIZE = .IFAB[IFB$W_KBUFSZ]*5;

    IF .SIZE LSS 12
    THEN
	SIZE = 12;

    IF RM$GETSPC1()
    THEN
	IRAB[IRB$L_KEYBUF] = .BLK
    ELSE
	RETURN RM$DISCOMMON();

    END;				! end of key buffer allocation

    ! if update is set, then allocate an update buffer
    !

    IF .IFAB[IFB$V_UPD]
    THEN
	BEGIN

	GLOBAL REGISTER
	    SIZE = 2,
	    BLK = 1;

	LOCAL
	    STATUS;

	SIZE = .IFAB[IFB$B_NUM_KEYS];

	IF .SIZE LSS 12
	THEN
	    SIZE = 12;

	IF (STATUS = RM$GETSPC1())
	THEN
	    IRAB[IRB$L_UPDBUF] = .BLK
	ELSE
	    DEALLOC_KEYBUF;

	END;				! end of update buffer allocation

    ! Allocate record output buffer for unpacking of prologue 3 data records.
    !
    
    IF .IFAB[IFB$B_PLG_VER] EQLU PLG$C_VER_3
    THEN
	BEGIN

	GLOBAL REGISTER
	    SIZE = 2,
	    BLK = 1 : REF BBLOCK;

	LOCAL
	    STATUS;

	! determine number of bytes to allocate depending on maximum record
	! size
	!
	IF .IFAB[IFB$W_MRS] EQLU 0
	THEN
	    SIZE = .IDX_DFN[IDX$B_DATBKTSZ] * 512
	ELSE
	    SIZE = .IFAB[IFB$W_MRS] + IRC$C_KEYCMPOVH + IRC$C_DATCMPOVH;

	IF .SIZE LSS 12
	THEN
	    SIZE = 12;

	IF (STATUS = RM$GETSPC1())
	THEN
	    IRAB[IRB$L_RECBUF] = .BLK
	ELSE
	    ! deallocate update buffer, and key buffer
	    !
	    BEGIN
	    DEALLOC_UPDBUF;
	    DEALLOC_KEYBUF;
	    END;

	END;				! end of record buffer allocation

    ! Allocate NRP cell and link it in if we are shared.  Use RM$GETS0SPC to
    ! get the cell from the correct place, otherwise use RM$GETSPC.
    !
    BEGIN

    GLOBAL REGISTER
	SIZE = 2,
	BLK = 1;

    LOCAL
	STATUS,
	S_IFAB	: REF BBLOCK;

    SIZE = NRP$C_BLN;
    S_IFAB = .IFAB;

    IF .IFAB[IFB$L_FRB_PTR] NEQ 0
    THEN
	BEGIN
	S_IFAB = .BBLOCK[.IFAB[IFB$L_FRB_PTR], FRB$L_SIFAB_PTR];
	BLK = .S_IFAB;
	STATUS = RM$GETS0SPC();
	END
    ELSE
	BEGIN
	BLK = .S_IFAB;
	STATUS = RM$GETSPC();
	END;

    IF .STATUS
    THEN
	BEGIN

	IF .S_IFAB[IFB$L_NRP_LIST] EQL 0
	THEN
	    S_IFAB[IFB$L_NRP_LIST] = .BLK
	ELSE
	    BEGIN

	    LOCAL
		PTR	: REF BBLOCK;

	    PTR = .S_IFAB[IFB$L_NRP_LIST];

	    WHILE .PTR[NRP$L_LINK] NEQ 0
	    DO
		PTR = .PTR[NRP$L_LINK];

	    PTR[NRP$L_LINK] = .BLK;
	    END;

	IRAB[IRB$L_NRP_PTR] = .BLK;
	END
    ELSE

	! on error, have to return the key buffer and possible update buffer
	! and record buffer
	!
	BEGIN
	DEALLOC_RECBUF;
	DEALLOC_UPDBUF;
	DEALLOC_KEYBUF;
	END;

    END;					! { of allocate nrp cell }

    ! save key ref
    !
    IRAB[IRB$B_NRP_KREF] = .RAB[RAB$B_KRF];
    RETURN RMSSUC();

    END;					! { end of routine }

END

ELUDOM
