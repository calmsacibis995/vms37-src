
MODULE RM3OPEN (LANGUAGE (BLISS32) ,
		IDENT = 'V03-001'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:	RMS32 INDEX SEQUENTIAL FILE ORGANIZATION
!
! ABSTRACT:
!                organization independent code for indexed file open
!
!
! ENVIRONMENT:
!
!		VAX/VMS OPERATING SYSTEM
!
!--

!
! AUTHOR:	Wendy Koenig     CREATION DATE:        	24-MAR-78  13:20
!
!
! MODIFIED BY:
!
!	V03-001	TMK0001		Todd M. Katz		24-Mar-1982
!		Change all references from IFB$B_KBUFSZ to IFB$W_KBUFSZ.
!
!	V02-020	CDS0005		C D Saether		 5-Feb-1982
!		Back out V02-019.  GBC is now a record attribute.
!
!	V02-019	CDS0004		C D Saether		 3-Jan-1982
!		Return GBC field from prologue.
!
!	V02-018	CDS0003		C D Saether		 9-Aug-1981
!		Use alternate linkage declaration for RELEASE.
!
!	V02-017	CDS0002		C D Saether		16-Jul-1981
!		Remove check for ppf file.
!
!	V02-016	MCN0011		Maria del C. Nasr	05-Jun-1981
!		Make keybuffer size 2 bytes longer for compressed indexes,
!		and primary key.
!
!	V02-015	PSK0002		P S Knibbe		20-Apr-1981
!		Change some variable names
!
!	V02-014	PSK0001		P S Knibbe		17-Mar-1981
!		Change the prologue number check to allow prologue 3
!		Change check_two to make sure that at least two index records
!		can fit into an index bucket.
!
!	V02-013 REFORMAT	R A SCHAEFER		23-Jul-1980	14:09
!		Reformat the source
!
!	V02-012	CDS0001		C D SAETHER		13-MAR-1980
!		fix V011 fix to check bio in ifab, not fab
!
!   	V02-011 RAS0000		Ron Schaefer		27-NOV-79	09:30
!   		Allow BIO access to any device (i.e. magtape), do not read
!		prolog if so.
!
!    	V02-010 CDS0000		Chris Saether,		26-jun-79  17:55
!   		don't allocate stuff if UFO set
!
! REVISION HISTORY:
!
!   D. H. Gillespie, 	16-AUG-78  9:05
!   X0002 - set IFAB immediately before checking for errors
!
!   Wendy Koenig, 	30-AUG-78  9:57
!   X0003 - PUT CHECK IN TO MAKE SURE AT LEAST 2 RECORDS CAN FIT IN ALL INDEXES
!
!   Wendy Koenig, 	29-SEP-78  13:59
!   X0004 - DON'T MAKE SHARING CHECK BASED ON NUM_KEYS
!
!   Wendy Koenig, 	24-OCT-78  14:02
!   X0005 - MAKE CHANGES CAUSED BY SHARING CONVENTIONS
!
!   Wendy Koenig, 	25-OCT-78  10:11
!   X0006 - CLEAR THE IDX_PTR IN THE IFAB IMMEDIATELY !!!!!
!
!   Wendy Koenig, 	3-NOV-78  8:40
!   X0007 - DON'T ALLOC KEY DESC IF BRO, DON'T NEED UBUFSZ
!
!   Wendy Koenig, 	13-NOV-78  13:24
!   X0008 - SHARING IMPLEMENTATION CHANGES
!
!   Wendy Koenig, 	18-DEC-78  16:44
!   X0009 - THROW OUT AN INDEXED OPEN W/ PPF IN THE FOP
!
!****

LIBRARY 'RMSLIB:RMS';

REQUIRE 'RMSSRC:RMSIDXDEF';

! define default psects for code
!

PSECT
    CODE = F$OPEN3(PSECT_ATTR),
    PLIT = F$OPEN3(PSECT_ATTR);

! define linkages
!

LINKAGE
    L_CACHE,
    L_CHKSUM,
    L_CLOSE3,
    L_RELEASE_FAB,
    L_AL_KEY_DESC,
    RL$CHECK_TWO 	= JSB (REGISTER = 6) : GLOBAL (R_FAB,R_IFAB),
    L_OPEN3;

! forward routine
!

FORWARD ROUTINE
    RM$OPEN3B 		: RL$OPEN3,
    RM$CHECK_TWO	: RL$CHECK_TWO;

! external routines
!

EXTERNAL ROUTINE
    RM$CHKSUM		: RL$CHKSUM,
    RM$CACHE		: RL$CACHE,
    RM$CLOSE3		: RL$CLOSE3,
    RM$RELEASE		: RL$RELEASE_FAB,
    RM$AL_KEY_DESC	: RL$AL_KEY_DESC;


GLOBAL ROUTINE RM$OPEN3B : RL$OPEN3 =

!++
!
! FUNCTIONAL DESCRIPTION:
!		This routine performs the file open functions that are
!		specific to the indexed file organization, including:
!
!		1 -- reading in the prologue
!			  and setting up various fields in the FAB and IFAB
!		2 -- setting up the index descriptors
!			(linked off the IFAB) and counting the keys
!		3 -- determining the size of the  key buffers
!			and setting kbufsz (IFAB) appropriately
!
!
! CALLING SEQUENCE:
!	enters via case branch from RMS$OPEN and jsb from RM$OPEN3
!	returns via rsb to RM$COPRTN.
!
! INPUT PARAMETERS:
!	none
!
! IMPLICIT INPUTS:
!	R11	IMPURE AREA address
!	R9	IFAB address
!	R8	FAB address
!	the contents of the FAB
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	R10 is the address of the IFAB
!	various fields in the IFAB and FAB are initialized
!	index descriptors are allocated
!
! ROUTINE VALUE:
!	standard rms, in particular SUC,PLG,RPL,IFA,KSI
!
! SIDE EFFECTS:
!	may wait quite some time for prologue to become free initially.
!	allocates index descriptors
!	in the case of an error, no key descriptors are allocated
!	R1 - R5	 may be destroyed
!
!--

    BEGIN

    ! define common registers
    !

    EXTERNAL REGISTER
	COMMON_FAB_STR;

    GLOBAL REGISTER
	COMMON_IO_STR;

    !  define some symbols to make life easier
    !

    LITERAL
	SHR = FAB$M_SHRGET
	    OR
	    FAB$M_SHRPUT
	    OR
	    FAB$M_SHRDEL
	    OR
	    FAB$M_SHRUPD,
	WRITE = IFB$M_PUT
	    OR
	    IFB$M_DEL
	    OR
	    IFB$M_UPD;

    IFAB = .IFAB_FILE;

    ! have to zero this since it has a conflicting earlier use in the parse
    !
    IFAB[IFB$L_IDX_PTR] = 0;

    ! if UFO or BIO open then quit right here before descriptors get allocated
    !

    IF  .FAB[FAB$V_UFO]
	OR
	.IFAB[IFB$V_BIO]
    THEN
	RETURN RMSSUC(SUC);

    RETURN_ON_ERROR (CACHE(1, 512), STATUS = RMSERR(RPL));

    RETURN_ON_ERROR (RM$CHKSUM());

    ! we now have a good prologue in memory
    !
    IFAB[IFB$B_AVBN] = .BKT_ADDR[PLG$B_AVBN];
    IFAB[IFB$B_AMAX] = .BKT_ADDR[PLG$B_AMAX];
    IFAB[IFB$W_FFB] = 0;

    IF .BKT_ADDR[PLG$W_VER_NO] GTRU PLG$C_VER_3
    THEN
	BEGIN
	RM$RELEASE(0);
	RETURN RMSERR(PLV);
	END;

    IFAB[IFB$B_PLG_VER] = .BKT_ADDR[PLG$W_VER_NO];

    ! allocate and count index descriptors, determine size of key buffers
    !
    BEGIN

    LOCAL
	IDX_COMPR,
	KEYPTR	: REF BBLOCK;

    ! index descriptor for primary key the primary key obviously is the largest
    ! to date, so set kbufsz
    !
    IFAB[IFB$W_KBUFSZ] = .BKT_ADDR[KEY$B_KEYSZ];
    IDX_COMPR = 0;			! assume no compression

    ! always allocate the primary key, since even a get by secondary key needs
    ! it unless, the file is open for block and record i/o
    !

    IF NOT .IFAB[IFB$V_BRO]
    THEN

	RETURN_ON_ERROR ( BEGIN
			GLOBAL REGISTER
			    R_IDX_DFN_STR;
	    
			RM$AL_KEY_DESC(.BKT_ADDR)
			END,
			RM$RELEASE(0));

    IFAB[IFB$B_NUM_KEYS] = 1;
    KEYPTR = .BKT_ADDR;

    ! If the index or primary key is compressed, set flag.
    !

    IF .KEYPTR[KEY$V_IDX_COMPR]
      OR .KEYPTR[KEY$V_KEY_COMPR]
    THEN
	IDX_COMPR = 1;

    RETURN_ON_ERROR (RM$CHECK_TWO(), RM$CLOSE3());

    ! get index descriptors for all other keys, block by block
    !

    WHILE .KEYPTR[KEY$L_IDXFL] NEQ 0
    DO
	BEGIN

	! get vbn for next block, release current block and get next block
	!
	BEGIN

	LOCAL
	    VBN;

	VBN = .KEYPTR[KEY$L_IDXFL];

	RETURN_ON_ERROR (RM$RELEASE(0));

	RETURN_ON_ERROR (CACHE(.VBN, 512), STATUS = RMSERR(RPL));

	RETURN_ON_ERROR (RM$CHKSUM());

	END;

	KEYPTR = .BKT_ADDR;

	WHILE 1
	DO
	    BEGIN
	    IFAB[IFB$B_NUM_KEYS] = .IFAB[IFB$B_NUM_KEYS] + 1;

	    IF .KEYPTR[KEY$B_KEYSZ] GTRU .IFAB[IFB$W_KBUFSZ]
	    THEN
		IFAB[IFB$W_KBUFSZ] = .KEYPTR[KEY$B_KEYSZ];	! get largest

	    RETURN_ON_ERROR (RM$CHECK_TWO(), RM$CLOSE3());

	    ! if the file is opened for access or write access, allocate
	    ! the index descriptors now, however if it is opened only for get
	    ! access  do not allocate the index descriptors now -- it can be
	    ! done on an as-needed basis  don't allocate them now, if the file
	    ! is opened for block and record i/o
	    !

	    IF NOT .IFAB[IFB$V_BRO]
	    THEN

		IF (.IFAB[IFB$B_FAC]  AND  WRITE) NEQ 0
		THEN

		    RETURN_ON_ERROR (
			BEGIN
			GLOBAL REGISTER
			    R_IDX_DFN;
			RM$AL_KEY_DESC(.KEYPTR)
			END,
			RM$RELEASE(0));

	    IF .KEYPTR[KEY$V_IDX_COMPR]
	    THEN
		IDX_COMPR = 1;

	    IF .KEYPTR[KEY$W_NOFF] EQL 0
	    THEN
		EXITLOOP;

	    KEYPTR = .KEYPTR[KEY$W_NOFF] + .BKT_ADDR;
	    END;		! end of WHILE loop

	END;			! end of WHILE loop

    ! If any of the keys have the index compressed, then increase the buffer
    ! size by two bytes, to store the length and compression counts.
    !

    IF .IDX_COMPR
    THEN
	IFAB[IFB$W_KBUFSZ] = .IFAB[IFB$W_KBUFSZ] + 2;

    END;

    RETURN_ON_ERROR (RM$RELEASE(0));

    ! we need to zero the nrp_list field in the ifab which was used by the
    ! parse if we're sharing the actual pointer to the nrp_list will be in the
    ! s_ifab but this doesn't hurt. if we're not sharing we're the one and only
    ! opener
    !
    IFAB[IFB$L_NRP_LIST] = 0;
    RETURN RMSSUC();

    END;


ROUTINE RM$CHECK_TWO (KEYPTR) : RL$CHECK_TWO =

!++
!
! FUNCTIONAL DESCRIPTION:
!
! 	check to make sure that at least two records will fit in
!	each index. if not don't even let the user open the file
!	since it will only lead to trouble later
!	note: create does check this but rms-11 doesn't
!	if we release w/ a new rms-11 that does there would be no way of
!	creating such files and we could take the check out
!
! CALLING SEQUENCE:
!	BSBW CHECK_TWO (KEYPTR)
!
! INPUT PARAMETERS:
!
!	KEYPTR -- pointer to the on-disk key descriptor
!
! IMPLICIT INPUTS:
!	FAB -- so that in case of an error, the guilty key of reference
!		can be passed back in the stv
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	ksi if two keys will not fit in the index
!	rmssuc if they will
!
! SIDE EFFECTS:
!	none
!
!--

    BEGIN

    MAP
	KEYPTR	: REF BBLOCK;

    EXTERNAL REGISTER
	R_IFAB_STR,
	R_FAB_STR;

    ! make sure at least 2 keys will fit in the index level
    !

    LOCAL
	KEYSZ,		! Size of key
	BYTES;		! Number of bytes available in bucket

    BYTES = (.KEYPTR[KEY$B_IDXBKTSZ]*512) - BKT$C_OVERHDSZ - 1;
    KEYSZ = .KEYPTR[KEY$B_KEYSZ];

    IF .IFAB[IFB$B_PLG_VER] LSSU PLG$C_VER_3
    THEN
	BEGIN
	IF 2*(.KEYSZ + 2 + IRC$C_IDXPTRBAS + IRC$C_IDXOVHDSZ) GTRU .BYTES
	THEN
	    BEGIN
	    FAB[FAB$L_STV] = .KEYPTR[KEY$B_KEYREF];
	    RETURN RMSERR(KSI);
	    END;
	END
    ELSE
	BEGIN
	BYTES = .BYTES - 3;
	IF .KEYSZ LEQU KEY$C_MAX_INDEX
	THEN
	    BEGIN  ! fixed index record
	    IF 2 * (.KEYSZ + 4) GTRU .BYTES
	    THEN
		BEGIN
		FAB[FAB$L_STV] = .KEYPTR[KEY$B_KEYREF];
		RETURN RMSERR(KSI);
		END;
	    END
	ELSE
	    BEGIN  ! variable index records
	    IF 2 * (.KEYSZ + 4 + 2) GTRU .BYTES
	    THEN
		BEGIN
		FAB[FAB$L_STV] = .KEYPTR[KEY$B_KEYREF];
		RETURN RMSERR(KSI);
		END;
	    END;	    	
	END;
    RETURN RMSSUC();

    END;					! { end of check_two }
END

ELUDOM
