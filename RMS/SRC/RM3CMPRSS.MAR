	$BEGIN	RM3CMPRSS,0001,$$RMS3,<>,<PIC,NOWRT,QUAD>

;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
;
; Facility:	rms32 index sequential file organization
;
; Abstract:
;	this modules contains the routines to handle compressed buckets
;	and compressed records
;
; Environment:
;	vax/vms operating system
;	internal exec routines.
;
; Author:  P. S. Knibbe,	creation date:  24-Apr-1981
;
; Modified By:
;	V03-001 LJA0007		Laurie Anderson 	25-Mar-1982
;		Change KBUFSZ to reference a macro when computing buffer 
;		size and make IFB$B_KBUFSZ a word, now: IFB$W_KBUFSZ.
;
;	V02-020 TMK0001		Todd M. Katz		10-Feb-1982
;		Change 2 BLEQ to BLEQUs, 2 BLSS to BLSSUs, and 1 BGTR to
;		a BGTRU. All of these followed CMPB involving key size
;		quantitites. Thus, a key size quantity of hex 80 would
;		appear to be less than a quantity of 0 when if fact it is
;		much larger than it. This played havoc with searching a
;		bucket of compressed keys whose maximum size was greater
;		than 127 characters. Among the many problems was that
;		searches of index buckets were not terminating until the
;		entire index bucket was scanned at which time a status
;		of search key greater than all keys in bucket was returned 
;		even when this was not the case.
;
;	V02-019 KPL0001		Peter Lieberwirth	12-Jan-1982
;		Fix problem with calculating number of characters left
;		in search key on EQUAL match.  This broke DUPs and who
;		knows what else...
;
;	V02-018	PSK0017		Paulina S. Knibbe	18-Dec-1981
;		Generic searches quit too soon.
;
;	V02-017	PSK0016		Paulina S. Knibbe	08-Dec-1981
;		Fix same problem for non-generic searches
;
;	V02-016	PSK0015		Paulina S. Knibbe	07-Dec-1981
;		Don't search past equal matches in index buckets.
;		When doing a generic GT match past a deleted record,
;		return the proper status
;
;	V02-015	PSK0014		Paulina S. Knibbe	25-Nov-1981
;		Make sure we don't refer to (r6) when it might be
;		pointing past the end of the bucket.
;
;	V02-014	PSK0013		Paulina S. Knibbe	16-Nov-1981
;		Fix handling of LST_NCMP for index buckets.
;
;	V02-013	PSK0012		Paulina S. Knibbe	13-Oct-1981
;		If we are doing a position for insert, return a 
;		deleted record. Otherwise we end up in the wrong
;		position altogether. (Correction to psk0010)
;
;	V02-012	PSK0011		Paulina S. Knibbe	25-Sep-1981
;		Make generic search past a deleted equal record work.
;
;	V02-011 PSK0010		Paulina S. Knibbe	12-Sep-1981
;		Never return a deleted record. Always position to
;		the next one. (This simplifies life considerably
;		for rm3poskey).
;
;	V02-010 PSK0009		Paulina S. Knibbe	02-Sep-1981
;		Rework the RRV and deleted RRV checks.
;
;	V02-009	PSK0008		Paulina S. Knibbe	12_Aug-1981
;		Change check for deleted RRV to check for RRV
;
;	V02-008	PSK0007		Paulina S. Knibbe	30-Jul-1981
;		Remove support for truncated index keys.
;
;	V02-007	PSK0006		Paulina S. Knibbe	24-Jul-1981
;		Fix problem with deleted RRV's in primary data buckets.
;
;	V02-006	MCN0001		Maria del C. Nasr	16-Jul-1981
;		Fix RM$FRNT_CMPR to preserve register R10 (IFAB)
;		since RM$REC_OVHD needs it.
;
;	V02-005	PSK0005		Paulina S. Knibbe	10-Jul-1981
;		Change srch_cmpr to handle RRV's in data buckets
;
;	V02-004	PSK0004		Paulina S. Knibbe	08-Jun-1981
;		Add RM$FRNT_CMPR to figure out the number of
;		chars which can be front compressed.
;
;		In searching, keep track of the number of the character at
;		which the search key differs from the key in
;		the bucket.
;
;	V02-003	PSK0003		Paulina S. Knibbe	31-May-1981
;		Re-arrange the code to do special case checking up-front
;
;	V02-002	PSK0002		Paulina S. Knibbe	27-May-1981
;		Keep track of the last two records with a front
;		compression count of zero rather than just the last
;		one. This enable position for insert to work when
;		the record falls in front of a key with a zero 
;		compression count.
;
;	V02-001	PSK0001		Paulina S. Knibbe	14-May-1981
;		If we are originally positioned to the end of
;		the bucket, don't bother searching. This will allow
;		us to position past a bucket even when there are
;		duplicates.
;
;--

	.SBTTL	DECLARATIONS
;
; Include Files:
;

;
; Macros:
;

	$BKTDEF
	$IRBDEF
	$IFBDEF
	$IRCDEF
	$IDXDEF	

	.SBTTL	RM$SRCH_CMPR - Search compressed bucket
;+++
;
;   RM$SRCH_CMPR
;
;	This routine searches a bucket with compressed records for
;	a search key.
;
;   Calling Sequence
;
;	PUSHB	GOAL
;	BSBW	RM$SRCH_CMPR
;
;   Input Parameters
;
;	GOAL - if zero, return with any match you can find
;	       if one, search past any equal matches
;
;    Implicit Input
;
;	r5 - BKT addr
;	    BKT$W_FREESPACE	- Offset to freespace in bucket
;	    BKT$B_LEVEL		- Level of this bucket
;
;	r9 - IRAB address
;	    IRB$L_KEYBUFF	- Address of key buffers
;	    IRB$B_KEYSZ		- Length of this search key
;
;	r10 - IFAB address
;	    IFB$B_KEYBFSZ	- Length of key buffer
;
;    Output
;
;	R0:  -1, search key < record found
;	      0, search key = record found
;	      1, search key > all records (REC_ADDR points past last record)
;
;    Implicit Output
;
;	IRB$L_REC_COUNT - number of the record found
;	REC_ADDR	- address of record found
;	IRB$V_DUPS_SEEN	- set if we searched past duplicates
;	IRB$L_LST_REC	- address of last duplicate (if it exists)
;	IRB$L_LST_NCMP	- address of last key with no front compression
;
;    Side Effects
;
;	none
;
;---

RM$SRCH_CMPR::
	PUSHR	#^M<R1,R2,R3,R4,R7,R8,R11>

;
;   Check the boundary conditions on the bucket
;

	MOVL	#1,R0			; Assume GT search for now
	MOVZWL	BKT$W_FREESPACE(R5),R1	; 
	ADDL3	R1,R5,R8		; R8 <- EOB
	CMPL	R6,R8			; If REC_ADDR > = EOB
	BLSSU	10$			;  we are already positioned
					;  past this bucket
5$:	BRW	JUST_RET
10$:	ADDL3	#BKT$C_OVERHDSZ,R5,R6	; R6 <- beginning of bucket
	CLRL	IRB$L_REC_COUNT(R9)	; Initialize rec count to keep
					;  track of the record we will return
	MOVL	R6,IRB$L_LST_NCMP(R9)	; Save address of second to the 
					;  last key with no front end compression
	MOVL	R6,R7			; R7 <- last key with no front
					;  front end compression
	CMPL	R6,R8			; If bucket is empty
	BGEQU	5$			;  return with a GT match

;
;   We must actually do the search
;   First set up displacement info as if this was an INDEX or
;   SIDR bucket
;

	PUSHL	#2			; Displacement doesn't include two
					;  byte of overhead
	CLRL	-(SP)			; Displacement is at rec_addr
	PUSHL	#8			; Displacement is one byte long

;
;   Now get the others constants set up
;
					
	MOVZWL	IFB$W_KBUFSZ(R10),R0	; Get buffer size into a long word
	ADDL3	IRB$L_KEYBUF(R9),-	; R11 <- address of search key
		R0,R11

	BISB3	BKT$B_LEVEL(R5),-	; branch if not primary data bucket
		BKT$B_INDEXNO(R5),R0
	BNEQU	60$

;
;   We have a primary data bucket (sigh). Go back and fix up
;   the displacement infor
;

	MNEGL	#2,4(SP)		; Displacement is at rec_addr - 2
	MOVL	#IRC$C_VAROVHSZ3,-	; Additional overhead to get past
		8(SP)			;  record
	MOVL	#16,(SP)		; Displacement is two bytes
	ADDL	#IRC$C_VAROVHSZ3,R6	; Position to primary key

;
;   Actually compare search key with record
;

60$:	CLRL	R2			; R2 <- # of differing char
CMP_KEYS:
	CLRL	R1			; Make sure no garbage in high bytes
	SUBB3	R2,IRB$B_KEYSZ(R9),R1	; R1 <- search key size - front compression
	CMPB	R1,(R6)			; Use the lesser of search key len
					;  and record length
	BLEQU	10$
	MOVZBL	(R6),R1			; R1 <- number of chars to compare
10$:	CMPC3	R1,2(R6),(R2)[R11]	; FINALLY do the comparison
					;  R1 = # of chars to compare
					; 2(r6) = Addr of key in bucket
					;  R2 = displacement of first char
					;   (r2 = front compr = differ char)
					;  R11 = Addr of search key
	BGTRU	LESS_THAN		; Search key < record, exit
	BNEQU	20$
	BRW	EQUAL			; Search key = record, go do
20$:	MOVZBL	#1,R0			;  special boundary processing

;
;   Search key is > record. Go get next record
;

NEXT_REC:
	SUBL3	R11,R3,R2		; R2 <- # of differing char
10$:	INCL	IRB$L_REC_COUNT(R9)	; Keep track of which record we 
					;  are looking at
	EXTZV	#0,(SP),-		; R0 <- displacement to next record
		@4(SP)[R6],-(SP)
	ADDL	(SP)+,R6		; R6 <- addr of next record

	TSTB	BKT$B_LEVEL(R5)		; If this is a data bucket
	BGTRU	15$			;  check whether it is an RRV
	BBC	#IRC$V_RRV,(R6),-	;  If it is an RRV
		15$			;  return with GT status
	MOVZBL	#1,R0
	BRW	ADD_RET
15$:
	ADDL	8(SP),R6		; R6 <- addr of next key (magic)

	CMPL	R6,R8			; Past EOB
	BGEQU	GREATER_THAN		; Yes - search key > bucket

	TSTB	1(R6)			; Keep track of last record
	BNEQU	20$			;  w/zero front compression
	MOVL	R7,IRB$L_LST_NCMP(R9)	; Save addr of previous key with
					;  no front compression
	MOVL	R6,R7			; Save addr of this key
	TSTB	BKT$B_LEVEL(R5)		; If this is a data level bucket
	BNEQ	20$			;  we must correct for overhead
	SUBL2	#IRC$C_VAROVHSZ3,R7
20$:
	CMPB	1(R6),IRB$B_KEYSZ(R9)	; Is the front compression > key sz ?
	BLEQU	30$			; No, proceed normally
	TSTL	R0			; Yes, if previous was an equal match
	BEQL	EQUAL			;  then go process this key
	BRB	NEXT_REC		;  as another equal match
30$:
	MOVL	28(SP),R1		; R1 <= IDX_DFN address (r7)
	CMPB	1(R6),IDX$B_KEYSZ(R1)	; If this is a dup
	BNEQ	40$			;
	TSTL	R0			;  and it was an equal match
	BLSS	LESS_THAN		;  then process as an equal
	BGTR	NEXT_REC
	BRW	EQ_EXIT			; else return this record
40$:	CMPB	1(R6),R2		; Compress > differ char ?
	BGTRU	10$			; Yes, go get next record
	BLSSU	LESS_THAN		; If compress < differ char
					;  key < record
	BRW	CMP_KEYS		; Compress = differ char. Must
					;  go compare key and record

;
;   Search key > record
;

GREATER_THAN:
	MOVZBL	#1,R0
	BRB	RET

;
;   Search key < record
;

LESS_THAN:
	MNEGL	#1,R0

;
;   Restore registers and return
;

RET:	SUBL3	R11,R3,R1
	ADDB3	#1,R1,IRB$B_DIFF_CHAR(R9) ; Keep track of the differ char
					;  Make it be the true length
	CMPL	R6,R8			; If we are past EOB, don't
	BLSSU	3$			;  refer to anything at this address
	SUBL	#IRC$C_VAROVHSZ3,R6	;  correct for constant added earlier
	BRB	ADD_RET			;  and exit
3$:	BBC	#IRB$V_POSINSERT,-
		IRB$B_SRCHFLAGS(R9),5$	; If we are positioning for insert
	TSTB	1(R6)			;  and the current record has no 
	BEQLU	6$			;  front compression,
					;  then leave the lst_ncmp alone
5$:	MOVL	R7,IRB$L_LST_NCMP(R9)	; else update it to addr of this record
6$:	BISB3	BKT$B_LEVEL(R5),-	; If this is a primary data bucket,
		BKT$B_INDEXNO(R5),R1	;  then restore REC_ADDR to beginning
	BNEQU	10$			;  of record
	SUBL	#IRC$C_VAROVHSZ3,R6
	BBC	#IRC$V_DELETED,(R6),10$	; If this is a deleted record
	BBS	#IRB$V_POSINSERT,-	;  and we are not doing a 
		IRB$B_SRCHFLAGS(R9),10$	;  position for insert
	ADDL	#IRC$C_VAROVHSZ3,R6	;  then go get the next record
	BRW	NEXT_REC
10$:
ADD_RET:ADDL	#12,SP
JUST_RET:
	POPR	#^M<R1,R2,R3,R4,R7,R8,R11>
	RSB
	
;+++
;
;   Search key = record
;
;	    a) Search key is shorter than or equal to record
;		RETURN EQ (generic search)
;
;	    b) Search key is longer than record
;		Extend last character of record and compare w/search key
;
;---

EQUAL:	ADDB3	(R6),1(R6),R0		; R0 <- 'true' length of record's key
	CMPB	IRB$B_KEYSZ(R9),R0	; if search key len < = record's len
	BLEQU	EQ_EXIT			;  return EQ status

;
;   Search key > record's key. Logically extend the record's 
;   key (by its last char) and continue comparison
;

	SUBL3	R11,R3,R2		; R2 <- differ char
	CLRL	R3			; make sure no stray bytes
	SUBB3	R2,IRB$B_KEYSZ(R9),R3	; R3 <- # of chars left in search key
	MOVZBL	(R6),R1			; R1 <- displacement to last char
	INCL	R1			; 
	CMPC5	#1,(R1)[R6],-		; Compare the last char of primary key
		(R1)[R6],-		;  extended by itself
		R3,(R2)[R11]		; With the rest of the search key

	BGTRU	LESS_THAN		; If search key is less than primary key
					;  return
	BEQLU	EQ_EXIT			; If they are equal, return w/eq
	CLRL	R0
	BRW	NEXT_REC		; If search key is > primary key, 
					;  continue search

;
;   Have a real live equal match. If we were doing a GT search, go
;   get the next record.
;

EQ_EXIT:
	BISB3	BKT$B_LEVEL(R5),-	; If primary data bucket
		BKT$B_INDEXNO(R5),R0
	BNEQU	20$			;  then
	TSTB	44(SP)			; If we are supposed to search past
	BEQL	20$			;  dups, 
					;  then save the address of last equal match
	SUBL3	#IRC$C_VAROVHSZ3,-
		R6,IRB$L_LST_REC(R9)	; LST_REC <- addr of equal match
	BBS	#IRC$V_DELETED,-	; If this wasn't deleted,
		@IRB$L_LST_REC(R9),10$	;  set the dups_seen bit
	BISB2	#IRB$M_DUPS_SEEN,-
		IRB$B_SPL_BITS(R9)
	CLRL	R0
10$:	BRW	NEXT_REC		; Continue search
20$:	CLRL	R0			; Don't search past dups, just return
	BRW	RET			;  with status = eq

.SBTTL	RM$FRNT_CMPR - Compute the front compr count
;+++
;
;    RM$FRNT_CMPR 
;
;	This routine returns the number of characters which can be compressed
;	off of the front of the key in keybuff2 if it is inserted at REC_ADDR
;
;    INPUT
;
;	R6 - addres to insert new record
;	R8 - record to insert
;
;    IMPLICIT INPUT
;
;	R9 (IRAB)
;	    IRB$L_LST_NCMP - Address of last key not compressed
;
;	R5 (BUCKET)
;	    BKT$B_LEVEL    - Level of bucket
;	    BKT$B_INDEXNO  - Index number of bucket
;
;	R10(IFAB)
;	    for RM$REC_OVHD
;
;    OUTPUT
;
;	R0 <- number of chars which can be front compressed
;
;---

RM$FRNT_CMPR::
	PUSHR	#^M<R1,R2,R3,R4,R5,R6,R7,R9,R11,R12>

	CLRL	R0
	TSTB	(R8)			; See if we have a null key
	BNEQU	1$			; Yup, return
	BRW	100$	

1$:	ADDL3	#BKT$C_OVERHDSZ,R5,R1	; See if we are at beginning of BKT
	CMPL	R6,R1
	BLEQU	100$			; Yup, return

;
;   First set up some interesting variables
;

	MOVL	R6,R11			; Save insertion address
	MOVL	IRB$L_LST_NCMP(R9),R6	; R6 <- address of last key
					;  which wasn't front compressed
	CLRL	-(SP)			; Current guess of front compression

;
;   Get necessary information to step over this record
;

2$:	CLRL	R9			; # of bytes of overhead
	BISB3	BKT$B_LEVEL(R5),-	; Do we have a primary data bucket ?
		BKT$B_INDEXNO(R5),R0	;	
	BEQLU	4$			; Yes, continue
	MOVZBL	(R6),R12		; No, get size of key
	ADDL	#2,R12			; Include bytes of overhead
	BRB	5$			;  and go away for awhile

4$:	CLRL	R1			; Primary data - first get
	BSBW	RM$REC_OVHD		;  size of overhead and size of record
	MOVL	R0,R9			; R9 <- # of bytes of overhead
	MOVL	R1,R12			; R12 <- # of bytes in record
5$:	ADDL	R9,R6			; Position to key in bucket

;
;   Whenever front compression = current guess we must actually compare
;	two keys.
;   If front comp < current guess, there is a SERIOUS problem with the bucket
;   If front comp > current guess, we just need to get the next record
;

10$:	CMPB	(SP),1(R6)		; 
	BNEQ	50$			; If guest ~= front compr, go get next

;
;   Compare two keys. Since key to be inserted
;    is not compressed yet we know it must be equal or longer than the
;    key in the bucket. So...extend key in bucket by its last key 
;    during comparison
;

	MOVZBL	(R6),R1			; R1 <- length of key in bucket
	ADDL3	R1,R6,R0		; R0 <- addr of last char in key
	INCL	R0
	MOVZBL	IDX$B_KEYSZ(R7),R3	; R3 <- # of chars in key to be inserted
	SUBL2	(SP),R3
	ADDL3	(SP),R8,R4		; R4 <- address of ins key
	CMPC5	R1,2(R6),(R0),-		; Compare key in bucket
		R3,2(R4)		;  against key to be inserted

	SUBL3	R8,R3,(SP)		; Save front compression guess
	SUBL2	#2,(SP)			; Correct for overhead bytes

;
;   Get next record
;

50$:	ADDL	R12,R6			; R6 <- addr of next record
	CMPL	R6,R11			; past insertion point ?
	BLSSU	2$			; No, continue
	POPL	R0			; Yes, return front compr count
100$:	POPR	#^M<R1,R2,R3,R4,R5,R6,R7,R9,R11,R12>

	RSB
	.END
