	$BEGIN	NT0MISC,009,NF$NETWORK,<NETWORK MISC FUNCTIONS>


;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; Facility: RMS
;
; Abstract:
;
;	This module communicates with the file access listener at the remote
;	node to perform the rewind, truncate, flush, free, and release
;	functions.
;
; Environment: VAX/VMS, executive mode
;
; Author: James A. Krycka,	Creation Date:	12-JUL-1979
;
; Modified By:
;
;	V02-009	JAK0060		J A Krycka	01-JUL-1981
;		Add support for the $RELEASE function.
;
;	V02-008	JAK0060		J A Krycka	29-JUN-1981
;		Simulate the $REWIND function with $DISCONNECT and $CONNECT if
;		DAP file transfer mode has been selected. Up to now, $REWIND
;		worked only if record transfer mode was in effect.
;
;	V02-007	REFORMAT	J A Krycka	26-JUL-1980
;
;--

	.SBTTL	DECLARATIONS

;
; Include Files:
;

	$DAPPLGDEF			; Define DAP prologue symbols
	$DAPHDRDEF			; Define DAP message header
	$DAPATTDEF			; Define DAP Attributes message
	$DAPCTLDEF			; Define DAP Control message
	$IFBDEF				; Define IFAB symbols
	$NWADEF				; Define Network Work Area symbols
	$RABDEF				; Define Record Access Block symbols

;
; Macros:
;
;	None
;
; Equated Symbols:
;

	ASSUME	DAP$Q_DCODE_FLG EQ 0
	ASSUME	NWA$Q_FLG EQ 0

;
; Own Storage:
;
;	None
;

	.SBTTL	NT$REWIND - PERFORM NETWORK REWIND FUNCTION

;++
; NT$REWIND - engages in a DAP dialogue with the remote FAL to rewind the file.
;
; Calling Sequence:
;
;	BSBW	NT$REWIND
;
; Input Parameters:
;
;	R8	RAB address
;	R9	IRAB address
;	R10	IFAB address
;	R11	Impure Area address
;
; Implicit Inputs:
;
;	DAP$V_GEQ_V56
;	IFB$L_NWA_PTR
;	IFB$V_SQO
;	NWA$B_ORG
;	RAB$B_KRF
;
; Output Parameters:
;
;	R0	Status code (RMS)
;	R1-R5	Destroyed
;	R7	Destroyed
;	AP	Destroyed
;
; Implicit Outputs:
;
;	None
;
; Completion Codes:
;
;	Standard RMS completion codes
;
; Side Effects:
;
;	None
;
;--

NT$REWIND::				; Entry point
	$TSTPT	NTREWIND		;
	MOVL	IFB$L_NWA_PTR(R10),R7	; Get address of NWA (and DAP)
	BBC	#IFB$V_SQO,(R10),-	; Proceed normally if
		REW_SEND_CTL		;  record transfer mode selected
					;  else try to simulate the operation

;+
; The DAP specification does not permit the REWIND function to be requested
; when file transfer mode is enabled. However, $REWIND can be simulated with
; a $DISCONNECT followed by a $CONNECT for the record stream. Consequently, the
; DAP REWIND function will be simulated by this technique if file transfer mode
; has been selected.
;
; Note:	An RMS$_FTM error will be returned to the user if the remote FAL is
;	implemented to DAP before V5.6 (see NT$DISCONNECT).
;-

REW_SIMULATE:				;
	BBC	#DAP$V_GEQ_V56,(R7),-	; Reject rewind request unless
		ERRFTM			;  partner uses DAP since V5.6
	BSBW	NT$DISCONNECT		; Disconnect the record stream
	BLBC	R0,EXIT			; Branch on failure
	BSBW	NT$CONNECT		; Re-connect the record stream
	BRB	EXIT			; Report status on simulated rewind

;+
; Build and send DAP Control message to partner.
;-

REW_SEND_CTL:				;
	$SETBIT	#NWA$V_LAST_MSG,(R7)	; Declare this last message to block
	MOVL	#DAP$K_CTL_MSG,R0	; Get message type value
	BSBW	NT$BUILD_HEAD		; Construct message header
	MOVB	#DAP$K_REWIND,(R5)+	; Store CTLFUNC field
	CMPB	NWA$B_ORG(R7),#NWA$K_IDX; Branch if not IDX organization
	BNEQ	10$			;
	MOVB	#DAP$M_KRF,(R5)+	; Store CTLMENU field
	MOVB	RAB$B_KRF(R8),(R5)+	; Store KRF field
10$:	BSBW	NT$BUILD_TAIL		; Finish building message

;+
; Common code for $REWIND, $TRUNCATE, $FLUSH, $FREE, and $RELEASE.
;-

TRANSMIT_CTL:				;
	BSBW	NT$TRANSMIT		; Send Control message to FAL
	BLBC	R0,EXIT			; Branch on failure

;+
; Receive DAP Status message from partner.
;-

RECV_STS:				;
; *****	$SETBIT	#DAP$K_STS_MSG,DAP$L_MSG_MASK(R7); Implied for receive
	BSBW	NT$RECEIVE		; Obtain status of remote operation
EXIT:	RSB				; Exit with RMS code in R0
ERRFTM:	RMSERR	FTM			; Declare file transfer mode error
	RSB				; Exit with RMS code in R0

	.SBTTL	NT$TRUNCATE - PERFORM NETWORK TRUNCATE FUNCTION

;++
; NT$TRUNCATE - engages in a DAP dialogue with the remote FAL to truncate
;	a sequential file.
;
; Calling Sequence:
;
;	BSBW	NT$TRUNCATE
;
; Input Parameters:
;
;	R8	RAB address
;	R9	IRAB address
;	R10	IFAB address
;	R11	Impure Area address
;
; Implicit Inputs:
;
;	IFB$L_NWA_PTR
;	IFB$V_SQO
;	
; Output Parameters:
;
;	R0	Status code (RMS)
;	R1-R5	Destroyed
;	R7	Destroyed
;	AP	Destroyed
;
; Implicit Outputs:
;
;	None
;
; Completion Codes:
;
;	Standard RMS completion codes
;
; Side Effects:
;
;	None
;
;--

NT$TRUNCATE::				; Entry point
	$TSTPT	NTTRUNC			;
	BBS	#IFB$V_SQO,(R10),ERRFTM	; Network truncate function not allowed
					;  if file transfer mode selected
	MOVL	IFB$L_NWA_PTR(R10),R7	; Get address of NWA (and DAP)

;+
; Build and send DAP Control message to partner.
;-

TRUNC_SEND_CTL:				;
	$SETBIT	#NWA$V_LAST_MSG,(R7)	; Declare this last message to block
	MOVL	#DAP$K_CTL_MSG,R0	; Get message type value
	BSBW	NT$BUILD_HEAD		; Construct message header
	MOVB	#DAP$K_TRUNCATE,(R5)+	; Store CTLFUNC field
	BSBW	NT$BUILD_TAIL		; Finish building message
	BRB	TRANSMIT_CTL		; Join common code

	.SBTTL	NT$FLUSH - PERFORM NETWORK FLUSH FUNCTION

;++
; NT$FLUSH - guarantees that all internally buffered records are sent to the
;	remote node.
;
;	If in record transfer mode, NT$FLUSH engages in a DAP dialogue with the
;	remote FAL to write out modified I/O buffers and file attributes
;	associated with the file by invoking the DAP FLUSH function.
;
;	If in file transfer mode, NT$FLUSH transmits previously blocked DAP
;	messages waiting to be sent to the remote FAL. The DAP FLUSH function,
;	however, is not invoked at the remote node.
;
; Calling Sequence:
;
;	BSBW	NT$FLUSH
;
; Input Parameters:
;
;	R8	RAB address
;	R9	IRAB address
;	R10	IFAB address
;	R11	Impure Area address
;
; Implicit Inputs:
;
;	IFB$L_NWA_PTR
;	IFB$V_SQO
;
; Output Parameters:
;
;	R0	Status code (RMS)
;	R1-R5	Destroyed
;	R7	Destroyed
;	AP	Destroyed
;
; Implicit Outputs:
;
;	None
;
; Completion Codes:
;
;	Standard RMS completion codes
;
; Side Effects:
;
;	None
;
;--

NT$FLUSH::				; Entry point
	$TSTPT	NTFLUSH			;
	MOVL	IFB$L_NWA_PTR(R10),R7	; Get address of NWA (and DAP)
	BBC	#IFB$V_SQO,(R10),-	; Proceed normally if
		FLUSH_SEND_CTL		;  record transfer mode selected
					;  else simulate the operation

;+
; The DAP specification does not permit the FLUSH function to be requested
; when file transfer mode is enabled. However, DAP Data messages being blocked
; at this node for subsequent transmission to the remote node can be flushed
; (i.e., sent immediately) while in file transfer mode. Successful completion
; of this simulated (or partial) flush operation will guarantee that all user
; data has been sent to the remote FAL.
;-

FLUSH_SIMULATE:				;
	$SETBIT	#NWA$V_FLUSH_BUF,(R7)	; Send previously blocked DAP messages
	BSBW	NT$TRANSMIT		;  only--no Control message!
	RSB				; Exit with RMS code in R0

;+
; Build and send DAP Control message to partner.
;-

FLUSH_SEND_CTL:				;
	$SETBIT	#NWA$V_LAST_MSG,(R7)	; Declare this last message to block
	MOVL	#DAP$K_CTL_MSG,R0	; Get message type value
	BSBW	NT$BUILD_HEAD		; Construct message header
	MOVB	#DAP$K_FLUSH,(R5)+	; Store CTLFUNC field
	BSBW	NT$BUILD_TAIL		; Finish building message
	BRB	TRANSMIT_CTL		; Join common code

	.SBTTL	NT$FREE - PERFORM NETWORK FREE FUNCTION

;++
; NT$FREE - engages in a DAP dialogue with the remote FAL to unlock all records
;	that were previously locked for the record stream.
;
; Calling Sequence:
;
;	BSBW	NT$FREE
;
; Input Parameters:
;
;	R8	RAB address
;	R9	IRAB address
;	R10	IFAB address
;	R11	Impure Area address
;
; Implicit Inputs:
;
;	IFB$L_NWA_PTR
;	IFB$V_SQO
;
; Output Parameters:
;
;	R0	Status code (RMS)
;	R1-R5	Destroyed
;	R7	Destroyed
;	AP	Destroyed
;
; Implicit Outputs:
;
;	None
;
; Completion Codes:
;
;	Standard RMS completion codes
;
; Side Effects:
;
;	None
;
;--

NT$FREE::				; Entry point
	$TSTPT	NTFREE			;
	BBS	#IFB$V_SQO,(R10),ERRFTM	; Network free function not allowed
					;  if file transfer mode selected
	MOVL	IFB$L_NWA_PTR(R10),R7	; Get address of NWA (and DAP)

;+
; Build and send DAP Control message to partner.
;-

FREE_SEND_CTL:				;
	$SETBIT	#NWA$V_LAST_MSG,(R7)	; Declare this last message to block
	MOVL	#DAP$K_CTL_MSG,R0	; Get message type value
	BSBW	NT$BUILD_HEAD		; Construct message header
	MOVB	#DAP$K_FREE,(R5)+	; Store CTLFUNC field
	BSBW	NT$BUILD_TAIL		; Finish building message
	BRB	TRANSMIT_CTL		; Join common code

	.SBTTL	NT$RELEASE - PERFORM NETWORK RELEASE FUNCTION

;++
; NT$RELEASE - engages in a DAP dialogue with the remote FAL to unlock the
;	specified record.
;
; Calling Sequence:
;
;	BSBW	NT$RELEASE
;
; Input Parameters:
;
;	R8	RAB address
;	R9	IRAB address
;	R10	IFAB address
;	R11	Impure Area address
;
; Implicit Inputs:
;
;	IFB$L_NWA_PTR
;	IFB$V_SQO
;	RAB$W_RFA
;
; Output Parameters:
;
;	R0	Status code (RMS)
;	R1-R5	Destroyed
;	R7	Destroyed
;	AP	Destroyed
;
; Implicit Outputs:
;
;	None
;
; Completion Codes:
;
;	Standard RMS completion codes
;
; Side Effects:
;
;	None
;
;--

NT$RELEASE::				; Entry point
	$TSTPT	NTRELEASE		;
	BBS	#IFB$V_SQO,(R10),ERRFTM1; Network release function not allowed
					;  if file transfer mode selected

;+
; Build and send DAP Control message to partner.
;-

REL_SEND_CTL:				;
	MOVL	IFB$L_NWA_PTR(R10),R7	; Get address of NWA (and DAP)
	$SETBIT	#NWA$V_LAST_MSG,(R7)	; Declare this last message to block
	MOVL	#DAP$K_CTL_MSG,R0	; Get message type value
	BSBW	NT$BUILD_HEAD		; Construct message header
	MOVB	#DAP$K_RELEASE,(R5)+	; Store CTLFUNC field
	MOVB	#DAP$M_KEY,(R5)+	; Store CTLMENU field
	MOVB	#6,(R5)+		; Store RFA as an image field
	MOVL	RAB$L_RFA0(R8),(R5)+	; Copy 6-byte record file address
	MOVW	RAB$W_RFA4(R8),(R5)+	;  to DAP message
	BSBW	NT$BUILD_TAIL		; Finish building message
	BRW	TRANSMIT_CTL		; Join common code
ERRFTM1:BRW	ERRFTM			; Branch aid

	.END				; End of module
