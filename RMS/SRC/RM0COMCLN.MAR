	$BEGIN	RM0COMCLN,026,F$RMSCLOSE0,<COMMON CLEAN UP CONN-DISCONN>

;
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
; Facility: rms32
;
; Abstract:
;		this module provides four entry points to provide common
;		clean up on connect - disconnect.
;
; Environment:
;		star processor running starlet exec.
;
; Author: L F Laverdure,	 Creation Date: 31-MAR-1977
;
; Modified By:
;
;	V02-026	CDS0004		C Saether		 8-Feb-1982
;		Return 2 GBPB's and BLB's now that 2 are allocated.
;
;	V02-025	CDS0003		C Saether		21-Jan-1982
;		Return GBPB and BLB when irab used global buffers.
;
;	V02-024	CDS0002		C Saether		17-Sep-1981
;		Look for BLB w/o lock before returning it.
;
;	V02-023	CDS0001		C Saether		31-Aug-1981
;		Handle block i/o bdb deallocation.
;
;	V02-022	CDS0001		C Saether		29-Aug-1981
;		Changes to RM$COMCLNUP to handle BLB's and take
;		out code for BCB's.
;
;	V021	kpl0007		Peter Lieberwirth	20-Jul-1981
;		teach code that the list of RLBs now hangs off the IRB
;
;	V020	KPL0006		Peter Lieberwirth	16-Jul-1981
;		never try to return any rlbs from s0 space anymore
;		this should have been done in v019
;
;	V019	kpl00005	Peter Lieberwirth	19-Jan-1981
;		remove call to RM$GET_RLB_ADDR, because we can now
;		get rlb header address using one instruction.
;
;	V018	REFORMAT	D M WALP	24-JUL-1980
;
;	V017	CDS0050		C SAETHER	1-NOV-1979	3:00
;		clean up rm$discommon and rm$comclnup - lock bdb for
;		relative and isam files returned here now
;
;	V016	RAN0003		R A NEWELL	19-DEC-1978	20:15
;		file sharing enhancements.
;--
;


	.SBTTL	DECLARATIONS

;
; Include Files:
;

;
; Macros:
;

	$BLBDEF
	$FRBDEF				; file resource block definitions
	$GBPBDEF			; global buffer pointer block
	$SIFBDEF			; shared ifab definitions
	$IFBDEF
	$DEVDEF
	$IRBDEF
	$CSHDEF
	$RLSDEF
	$RLBDEF
	$FABDEF
	$RABDEF
	$PIODEF
	$IMPDEF
	$PSLDEF
	$RMSDEF

;
; Equated Symbols:
;

;
; Own Storage:
;


	.SBTTL	RM$DISCOMMON - COMMON CLEANUP ON CONNECT-DISCONNECTT ROUTINES

;++
; RM$DISCOMMON
;
;
;	RM$DISCOMMONSUC - sets r0 to rm$_suc and falls thru to rm$discommon
;	RM$DISCOMMON    - checks for network disconnect and falls thru to 
;			  rm$comclnup
;	RM$COMCLNUP     - return all bdb's and buffers for stream and fall thru
;			  to rm$ccln1 r0 already pushed onto stack
;	RM$CCLN1	- deallocate irab and zero isi and irab table entry
;
; Calling sequence:
;
;	bsbw	rm$discommonsuc 
;	bsbw	rm$discommon   
;	brw	rm$comclnup    
;	bsbw	rm$ccln1
;
; Input Parameters:
;
;	r11	impure area address
;	r10	ifab address
;	r9	irab address
;	r8	rab address
;	r0	status code (except for entry at rm$discommonsuc)
;
; Implicit Inputs:
;
;   for entry at rm$discommon:	irb$v_pap_conn
;   for entry at rm$comclnup:	irb$b_bcnt & bdb chain
;   for entry at rm$ccln1:	irb$l_irab_lnk
;
; Output Parameters:
;
;	r0	status code
;	r7	set from irb$b_mode
;	r9	zeroed
;	ap	set from irb$l_arglst
;	r1-r6	destroyed
;
; Implicit Outputs:
;
;	rab$w_isi zeroed
;	rab$l_stv possibly updated
;	irab, its bcb's, bdb's and related buffers deallocated
;
; Completion Codes:
;
;	standard rms. if an error occurs it will replace
;	the status code input in r0, otherwise the code input
;	in r0 will be used.
;
; Side Effects:
;
;	none
;--



;++
;
; entry point to set r0 = rm$_suc and fall thru into rm$discommon
;
;--

RM$DISCOMMONSUC::
	RMSSUC

;++
;
; entry point to check for network disconnect and fll thru into rm$comclnup
;
;--

RM$DISCOMMON::
	PUSHL	R0			; save status

;
;	check for process-permanent file cleanup
;

	BBC	#IRB$V_PPF_IMAGE,(R9),-
		1$			; branch if not indirect acc to ppf
	BRW	IND_FILE		; branch
1$:	BBC	#IFB$V_PPF_INPUT,(R10),-
		10$			; branch if not sys$input
	MOVW	#1+<^A/$/@8>,-
		@#PIO$GT_ENDSTR		; reset eod string to '$'
	BICB2	#1@PIO$V_EOD,-
		@#PIO$GW_STATUS		; and clear eod flag
10$:
	BBCC	#IRB$V_DAP_CONN,(R9),-
		BIOCHK			; not net then continue

;++
;
;  perform network disconnect function
;
;--

NTDISC:	$PSECT_BR	NF$NETWORK
	BBS	#IMP$V_IORUNDOWN,(R11),-
		10$			; branch if i/o rundown in progress
	BSBW	NT$DISCONNECT		; disconnect at remote node
	BLBS	R0,10$			; branch if successful
	MOVL	R0,(SP)			; save error code
10$:	BRW	BIOCHK			; rejoin mainline
	$PSECT_RESTORE

BIOCHK:
	BBS	#IFB$V_BIO,-
		IFB$B_FAC(R10),NOBUFF	; branch if block i/o
	TSTB	IFB$B_ORGCASE(R10)	; is this seq f.o. ?
	BEQL	RM$COMCLNUP		; if yes, no lock bdb to return
	BBS	#IFB$V_NORECLK,(R10),-
		RM$COMCLNUP		; branch if no locking
	BRB	RTNBLB			; return the lock blb.
NOBUFF:

;
; This is the return the block i/o bdb.  This will branch into cache
; and release to get rid of it.  Because the bdb was not counted as
; a buffer when allocated, the avlcl count is bumped so cache will
; just find it and take it.  Cache will also set the bdb$w_users count
; to 1 so that release is not upset for the relative and isam orgs.
; The only reason cache and release are used at all is because if
; someone is out there doing asynch multistreaming with block i/o,
; this should prevent us from returning a bdb in use, because cache
; will look for one with a users count of 0, and the block i/o code
; sets the users count to 1 when using it.
;

	INCW	IFB$W_AVLCL(R10)	; want to fake out cache so it
					; doesn't try to free one.
	BRB	BIO			; branch to return it.

;++
;
; entry point to return all blb's, bdb's and buffers for this stream.
; status already pushed onto stack.  this is error path from rm$bdballoc
; to return bdb's, blb's allocated before failure.  irab will also be
; deallocated before returning to user so no other structures can be present.
; this is strictly error path on connect operation.  lock blb will not have
; been allocated.
;
;--

RM$COMCLNUP::

;++
;
;	return bdb's used by this stream
;
;--

	DECB	IRB$B_BCNT(R9)		; decrement buffer count
	BLSS	CHKGBL			; branch if no more
BIO:	$CACHE	VBN=#0,SIZE=#0,-
		FLAGS=<NOREAD>		; get any BDB.
	BLBC	R0,RM$COMCLNUP		; failed so go around again
RTNBDB:	MOVL	#RLS$M_RETURN,R3	; set return flag
	BSBW	RM$RELEASE		; release bdb & buffer
	BLBS	R0,RTNBLB		; go check for blb release
	MOVL	R0,(SP)			; save error code

;++
;
; check for locking and return blb's if so.
;
;--

RTNBLB:
	BBS	#IFB$V_NORECLK, (R10), RM$COMCLNUP ; branch back if no locking.
	BSBB	RTNBLBS			; Return a BLB.
	BRB	RM$COMCLNUP		; Loop to get any more.
RTNBLBS:
	ASSUME	BLB$L_FLNK EQ 0
	ASSUME	BLB$L_BLNK EQ 4
	MOVAL	IFB$L_BLBFLNK(R10), R4	; get list head.
	MOVL	R4,R0			; save for end test.
10$:	MOVL	4(R4), R4		; get blb element.
	CMPL	R0, R4			; back at list head?
	BEQL	20$			; it's a bug if we are.
	TSTL	BLB$L_LOCK_ID(R4)	; is this one in use?
	BNEQ	10$			; NEQ it is, get another.
	BRW	RM$RETBLB		; and return it.
	RSB				; Return.
20$:
	RMSPBUG	FTL$_NOBLB
CHKGBL:
	BBC	#IFB$V_WRTACC, (R10), 10$ ; Branch if not write accessed.
	MOVL	IFB$L_FRB_PTR(R10), R0	; Get ptr to frb, if any.
	BEQL	10$			; EQL there is no frb.
	MOVL	FRB$L_SIFAB_PTR(R0), R0	; Get pointer to sifab.
	DECW	SIFB$W_WACC_BUF(R0)	; One less write stream using gbl buff.
10$:	BBC	#IRB$V_GBLBUFF, (R9), RTNRLB ; Branch if no gbpb, blb allocated.
	CLRL	-(SP)			; Init pass counter.
15$:	MOVAL	IFB$L_BDB_FLNK(R10), R4	; Get list head address.
	MOVL	R4, R0			; Save for end test.
	ASSUME	IFB$L_BDB_BLNK EQ <IFB$L_BDB_FLNK + 4>
	ASSUME	GBPB$L_BLINK EQ 4
20$:	MOVL	4(R4), R4		; Scan backwards.
	CMPL	R4, R0			; Back at head?
	BEQL	30$			; Continue if so.
	ASSUME	<GBPB$C_BID & 1> EQ 1
	BLBC	GBPB$B_BID(R4), 20$	; Keep looking if not GBPB.
	TSTW	GBPB$W_USERS(R4)	; Is use count zero?
	BNEQ	20$			; Keep looking if not.
	BSBW	RM$RETGBPB		; Return the GBPB.
	BSBB	RTNBLBS			; Return the BLB.
	BBCS	#0, (SP), 15$		; Branch if 1st pass.
30$:	ADDL2	#4, SP			; Remove pass counter.
;++
;
;  unlock all locked records for this stream and deallocate all unused rlb's
;
;--

RTNRLB:	BSBW	RM$UNLOCKALL
	ADDL3	#IRB$L_RLB_LNK,R9,R3	; get rlb list head addr in r3
	MOVL	R3,AP			; copy it
	ASSUME	RLB$L_LNK EQ 0
40$:	MOVL	(AP),R4			; get next rlb addr
	BEQL	60$			; branch if no more
	TSTW	RLB$W_OWNER(R4)		; in use?
	BNEQ	55$			; branch if yes
	MOVL	RLB$L_LNK(R4),(AP)	; remove rlb from chain
	MOVL	#RLB$C_BLN,R2		; set rlb length
	PUSHL	R3			; save space header addr
	BSBW	RM$RETSPC1		; deallocate rlb
	POPR	#^M<R3>			; restore space header addr
	BRB	40$			; go get next rlb
55$:	MOVL	R4,AP			; rlb in use - copy addr
	BRB	40$			; go get next rlb
60$:	BRB	RTNIRB


;++
;
;  this is a disconnect of an indirectly connected irab (i.e., for the image)
;
;  just zero isi and clear eof if unit record device
;
;--

IND_FILE:
	CLRW	RAB$W_ISI(R8)		; clear isi
	BBC	#DEV$V_REC,-
		IFB$L_PRIM_DEV(R10),EXIT; branch if not unit record device
	CSB	#IRB$V_EOF,(R9)		; reset eof flag
	BRB	EXIT


;++
;
; entry point for when no bdb's or buffers allocated.
; simply deallocate the irab and zeroes isi.
;
;--

RM$CCLN1::
	PUSHL	R0			; save error code
					; find this irab in irab chain

RTNIRB:	MOVL	R10,R3			; get ifab addr
	ASSUME	IRB$L_IRAB_LNK EQ IFB$L_IRAB_LNK
10$:	MOVL	IRB$L_IRAB_LNK(R3),R6	; get next irab
	CMPL	R6,R9			; is this the one?
	BEQL	20$			; branch if yes
	MOVL	R6,R3			; move ptr to other reg
	BRB	10$			; & keep searching

;
; got the irab  -  close up chain and deallocate the irab
;

20$:	MOVL	IRB$L_IRAB_LNK(R6),IRB$L_IRAB_LNK(R3)
	BSBW	RM$DEALLEFN		; deallocate event flag

;
;  restore the user's mode and arg list pointer from the irab before
;  deallocating it.
;

	MOVZBL	IRB$B_MODE(R9),R7
	MOVL	IRB$L_ASBADDR(R9),R4	; get asb/irab addr
	MOVL	IRB$L_ARGLST(R9),AP

;
; deallocate asb/irab
;

	MOVB	IRB$B_BLN(R9),9(R4)	; copy length in longwords
	MOVL	R10,R3			; get space header page
	BSBW	RM$RETBLK		; deallocate irab
	MOVL	IMP$L_IRABTBL(R11),R1	; get irab table addr
	BSBB	ZAPCOM			; zero isi & isi table entry
EXIT:	POPR	#^M<R0>			; restore status
	RSB				; & return


;++
;
; subroutine to clear the ifab or irab table
; entry for the ifab or irab whose address is in r9.
; also zeros the ifi or isi and r9
;
; inputs:
;	r11	impure area address
;	r9	ifab/irab address
;	r8	fab/rab address
;
; outputs:
;	ifab/irab table pointer zeroed.
;	ifab/irab address in r9 zeroed.
;	fab$w_ifi/rab$w_isi zeroed
;	r0-r2 destroyed
;
;--

RM$ZAPIFI::
	MOVAL	IMP$L_IFABTBL(R11),R1	; get ifab table addr
ZAPCOM:
	MOVAL	4(R1),R2		; leave r1 pointing to link
					; point r2 to 1st entry

	MOVZWL	IMP$W_ENTPERSEG(R11),R0	; # entries per table segment.
10$:	CMPL	(R2)+,R9		; is this desired entry?
	BEQL	20$			; branch if yes
	SOBGTR	R0,10$			; keep trying
	MOVL	(R1),R1			; next segment
	BRB	ZAPCOM

;
; this is the sought-for table entry  -  zero it
;

20$:	CLRL	-(R2)
	ASSUME	RAB$W_ISI EQ FAB$W_IFI
	CLRW	RAB$W_ISI(R8)		; zero isi (or ifi)
	DECW	IMP$W_NUM_IFABS(R11)	; decrement count of allocated ifabs
	CLRL	R9			; zero ifab or irab address
	RSB


;++
;
;  subroutine to deallocate any synchronous efn
;
;  inputs:
;	r11	impure area addr
;	r9	ifab or irab addr
;	irb$b_efn
;--

	ASSUME	IRB$B_EFN EQ IFB$B_EFN
RM$DEALLEFN::
	CMPB	IRB$B_EFN(R9),#IMP$C_SYNCEFN
	BEQL	10$
	CMPB	IRB$B_EFN(R9),#IMP$C_SYNCEFN+1
	BEQL	20$
	RSB

10$:	BICB2	#1@PIO$V_SYNC1,@#PIO$GW_STATUS; deallocate efn
	RSB
20$:	BICB2	#1@PIO$V_SYNC2,@#PIO$GW_STATUS; "
	RSB

	.END
