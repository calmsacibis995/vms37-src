;	$begin	rmsfilstr,v02-061
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;	internal rms file structure definitions
;
;	Modified By:
;
;	V02-061	CDS0001		C Saether		23-Dec-1981
;		Add default global buffer count field to prologue
;		vbn 1 for relative and isam files.
;
;	V02-060	KBT0001		Keith B Thompson	12-Nov-1981
;		Add ONC and CBT flags in the AOP area descriptor field
;		and correct the position of CTG.
;
;	V02-059	PSK0004		Paulina S. Knibbe	23-Oct-1981
;		Remove LCB_EXITS flag.
;
;	V02-058	MCN0007		Maria del C. Nasr	15-May-1981
;		Add compression constants.
;
;	V02-057	PSK0003		Paulina S. Knibbe	16-Apr-1981
;		Add KEY_COMPR and REC_COMPR bits to the KEY structure
;		Add constants for largest non-compressed data record,
;		primary key and index (SIDR key.
;
;	V02-056 PSK0002		Paulina S. Knibbe	19-Mar-1981
;		Add pointer size field to the BKT structure
;
;	V02-055 MCN0006		Maria del C. Nasr	16-Mar-1981
;		Modify the BKT, and IRC structures to increase record id
;		size to a word, and reflect other changes required for the
;		new ISAM structure.
;
;	V02-054	PSK0001		Paulina Knibbe	11-Mar-1981
;		Add definitions for per-segment datatypes to the KEY structure
;		Add another prologue version constant
;
;	V02-053 ras0053		Ron Schaefer	24-Nov-1980	14:48
;		merge RMSINT and RMSIDXSTR file structure definitions into
;		one file containing all on-disk structures and no in-memory
;		structures.
;
;	V02-052	REFORMAT	Keith B. Thompson	29-JUL-1980
;
;	V051	jak0045		J A Krycka	21-MAR-1980	15:00
;		remove IFB$V_DAP_FMODE.
;
;	V050	cds0075		C D Saether	21-JAN-1980	11:25
;		remove IFB$L_FWA_BDB, IFB$W_BKS_BYTES, IFB$W_BKS_RECS.
;
;	V049	ras0010		R A Schaefer	07-JAN-1980	16:45
;		re-arrange drc fields for valid did check.
;
;	V048	ras0009		R A Schaefer	20-DEC-1979	15:30
;		add FWA$T_RNM_FID to hold the saved fid from a rename
;		for checking bad rename directory operation.
;
;	V047	jak0029		J A Krycka	18-NOV-1979	11:00
;		add FWA$V_REMRESULT to denote that fal has returned resultant
;		string.
;
;	v046	tmh0003		Tim Halvorsen	02-NOV-1979
;		add FWA$L_DIRBDB to hold address of directory buffer bdb
;		add FWA$V_FILEFOUND bit to indicate that at least one file
;		has been found - used to return FNF vs. NMF.
;
;	V045	jak0025		J A Krycka	28-SEP-1979	17:00
;		add FWA$V_DEV_UNDER in conjunction with effort to
;		modify expanded and resultant name string processing to prefix
;		an underscore to node and device names that have been subject
;		to logical name translation.
;
;	V044			Tim Halvorsen	12-SEP-1979
;		add IFB$V_SEARCH bit to mark ifabs left during searches.
;
;	V043			Tim Halvorsen	11-SEP-1979
;		overlay the fib buffer with the node descriptors to reduce
;		the total space used by fwa.  increase the size of the file
;		name and type buffers due to the new maximum sizes which can
;		occur as a result of wild characters (i.e. *a*b*c*d*e etc).
;
;	V042	jak0023		J A Krycka	27-AUG-1979	18:00
;		move FWA$T_NODEBUF to NWA$T_NODEBUF and add FWA$Q_DIR1 thru
;		FWA$Q_DIR8 in conjunction with effort in RM0XPFN to allow
;		multiple node specs in a file specification.
;
;	v041	cds0022		C Saether	26-july-79	22:45
;		add IFB$V_SEQFIL to bookkeeping bits.
;
;	V040	cds0000		C Saether	16-JAN-1979	14:00
;		remove definition of lockabove from srchflags in irab
;		and add abovelckd to bookeeping bits
;
;	V039	wsk0000		W S Koenig	10-JAN-1979	1:25
;		fix problem w/ IDX_PTR overlapping w/ AS_DEV longwords
;
;	V038	jak0017		J A Krycka	28-DEC-1978	14:30
;		make IFB$L_NWA_PTR and IFB$L_FRB_PTR separate locations so that
;		networking and file sharing do not interfere with each other.
;
;	V037	ran0003		R A Newell	20-DEC-1978	17:35
;		file sharing and isam changes.
;
;	V036	jak0007		J A Krycka	17-DEC-1978	19:00
;		change values of FWA$C_MAXNODE and FWA$C_NODBUFSIZ.
;
;	V035	jak0006		J A Krycka	21-NOV-1978	16:40
;		add FWA$V_ACCSTR definition.
;
;	V034	ran0002		R A Newell	1-NOV-1978	09:49
;		RMS32 isam modifications.  additions of isam fields, take out
;		NWA, add PLG_VER, change ASB size, define PTR_VBN, update,
;		UPD_NRP, RFA_VBN, and RFA_ID fields.
;
;++

;
;	 prologue field definitions
;
;
;  common vbn1 format for indexed and relative files
;
;  (note: indexed file defintions not included at this time)
;
	$STRUCT PLG

	F ,B,11		; leave space for indexed file things
	F DBKTSIZ,B	; data bucket size
	F ,L		; filler
	F FLAGS,B	; flag bits
	  V <
	  NOEXTEND	; no extend allowed (rel)
	  >
	F ,B,85		; space filler
	F AVBN,B	; vbn of first area descriptor
	F AMAX,B	; maximum number of areas
	F DVBN,W	; first data bucket vbn
	F ,W		; spare
	F MRN,L		; maximum record number (rel)
	F EOF,L		; eof vbn (rel)
	F VER_NO,W	; version number
	  C VER_NO,1	; current prolog version number
	  C VER_IDX,2	; new plg for indexed files
	  C VER_3,3	; new plg for compression, space reclamation (plg 3)
	F GBC,W		; default global buffer count
	L BLN
	E

;
;
;  relative file deletion control byte bit definitions
;
	$STRUCT	DLC

	V <M
	,2		; (start with bit 2)
	DELETED		; record deleted
	REC		; record exists (but may have been deleted)
	>
	E

;
; index bucket definition
;
; this is the bucket format for RMS-11/RMS-32 index files.
;
	$STRUCT	BKT
	
	F CHECKCHAR,B		; bucket check character
	F AREANO,B		; area number form which bucket was allocated
	 S INDEXNO,0,B		; index to which this bucket belongs (plg 3)
	F ADRSAMPLE,W		; address sample - low 16 bits of first vbn in bucket
	F FREESPACE,W		; displacement in bucket of first free byte
	 S KEYFRESPC,0,W	; pointer to key's free space (plg 3)
	F NXTRECID,W		; next available word record id (plg 3)
	 S NXTRECID,0,B		; next available record id
	 S LSTRECID,1,B		; last id in range
	F NXTBKT		; vbn of next bucket
	F LEVEL,B		; bucket level number
	F BKTCB,B		; bucket control bits
	  V<M
	  LASTBKT		; last bucket in horizontal chain
	  ROOTBKT		; root bucket
	  LAST_CONT		; last continuation bucket
	  PTR_SZ,2		; size of vbn pointers in this bucket
	   >
	L OVERHDSZ		; length of bucket overhead
	F DUP_COUNT,L		; count of duplicates 
				; only if count_dup set in index descriptor
				; only for primary data level buckets
	C ENDOVHD,4		; end of bucket overhead
	C DATBKTOVH,2		; end of bucket overhead for data buckets
	C DUPBKTOVH,8		; additional end of data bucket overhead
				;  when duplicates are allowed (LCB pointer
				;  and dup count)
	E

;
; index record definition
; 
; this is the definition of RMS-11/RMS-32 index file record formats
;	

	$STRUCT	IRC

	F CONTROL,B		; record control byte
	  V<M
	  PTRSZ,2		; size of pointer
	  RECORDCB,6		; record control bits
	   >

;
; bits used for primary and secondary data levels
;
	  V<M
	  ,2			; skip size of pointer field
	  DELETED		; record is deleted
	  ,1
	  NOPTRSZ		; not pointer size
	  >

;
; fields used only in primary data level
;
	  V<M
	  ,3			; skip over first 3 bits
	  RRV			; rrv record
	  ,1			; skip 
	  DEL_COUNT		; count of deleted records
	  >

;
; fields used only in secondary data level
;
	  V<M
	  ,5			; skip 5 bits
	  KEYDELETE		; key deleted
	  >

;
; fields used only in index levels
;
	  V<M
	  ,2			; space over other fields
	  HIGH_KEY		; no key value is present
				; highest key value is implied
	  LAST_CONT		; last continuation bucket pointer is present
	  >

	M 1

; 
; index bucket record
;
	F BUCKETPTR,T,0		; bucket pointer (not referenced in the code,
				;  just present for consistency)
	C IDXPTRBAS,2		; used to determine size of pointer in index
	C IDXOVHDSZ,1		; includes record control byte
	
;
; data bucket record
;
	P 1
	F ID,B			; record id
	F RRV_ID,B		; rrv's id -- always in the same place

;
; prologue 3 data bucket record
;
	P 1
	F ID,W			; record id
	F RRV_ID,W		; rrv's id -- always in the same place
;
; constants
;
	C DATSZFLD,2		; size of size field in variable length records
	C DATPTRBAS,3		; used to determine size of RRV in data buckets,
				;  and dup count in SIDR's
	C DATOVHDSZ,2		; includes the record control byte, and the id
	C FIXOVHDSZ,7		; the record overhead for fixed record
	C VAROVHDSZ,9		; record overhead for variable records
;
; prologue 3 constants
;
	C DATPTRBS3,4		; used to determine size of RRV in data buckets
	C DATOVHSZ3,3		; record control byte, and id
	C FIXOVHSZ3,9		; record control byte, id, and rrv in fixed
				;  records
	C VAROVHSZ3,11		; record control byte, id, rrv, and size for
				;  variable length recs
	C KEYCMPOVH,2		; key compression overhead
	C DATCMPOVH,3		; data compression overhead
	E

	
;
; definitions for the key descriptors in the prologue
;
; these definitions are associated w/ the plg and area definitions
;
	$STRUCT KEY

	F IDXFL,L		; vbn for next key descriptor
	F NOFF,W		; offset to next key descriptor
	F IANUM,B		; index area number
	F LANUM,B		; level 1 area number
	F DANUM,B		; data area number
	F ROOTLEV,B		; root level
	F IDXBKTSZ,B		; index bucket size
	F DATBKTSZ,B		; data bucket size
	F ROOTVBN,L		; root bucket pointer
	F FLAGS,B		; flag bits
	  V <M
	  DUPKEYS		; duplicate key values allowed
	  CHGKEYS		; key value may change on $update operation
	  NULKEYS		; null key character enabled
	  IDX_COMPR		; index is compressed
	  INITIDX		; index must be initialized
	  COUNT_DUP		; maintain duplicate count
	    >

	  V<M			; primary key flags only
	  ,1			; space over dupkeys
	  NORFA			; no rfa fields in records (single key only)
	  PRG_D_RFA		; delete records and rrv's may be purged
				; from file (disables fast delete)
	  ,1
	  ,1
	  ,1
	  KEY_COMPR		; (PLG3) Primary key is compressed in data record
	  REC_COMPR		; (PLG3) Data record is compressed
	  >
	C MAX_DAT,10		; (PLG3) Maximum size of a non-compressed data 
				;  record
	C MAX_PRIMARY,6		; (PLG3) Maximum size of a non-compressed
				;  primary key
	C MAX_INDEX,6		; (PLG3) Maximum size of a non-compressed
				;  index and SIDR key
	F DATATYPE,B		; data type for key
	  C STRING,0		; string data type
	  C SGNWORD,1		; signed binary word
	  C UNSGNWORD,2		; unsigned binary word
	  C SGNLONG,3		; signed binary long word
	  C UNSGNLONG,4		; unsigned binary long word
	  C PACKED,5		; packed decimal
	  C MAX_DATA,5		; maximum data type value allowed
	F SEGMENTS,B		; number of segments in key
	F NULLCHAR,B		; "null" character
	F KEYSZ,B		; total key size
	F KEYREF,B		; key of reference
	F MINRECSZ,W		; minimum record length
	F IDXFILL,W		; index fill quantity
	F DATFILL,W		; data fill quantity
	F POSITION,W		; key seg position
	  S POSITION0,0,W	; another name for position 0
	F POSITION1,W		; position 1
	F POSITION2,W		; position 2
	F POSITION3,W		; position 3
	F POSITION4,W		; position 4
	F POSITION5,W
	F POSITION6,W
	F POSITION7,W
	F SIZE,B		; key segment size
	  S SIZE0,0,B		; another name for size
	F SIZE1,B		; size 1
	F SIZE2,B
	F SIZE3,B
	F SIZE4,B
	F SIZE5,B
	F SIZE6,B
	F SIZE7,B
	F KEYNAM,T,32		; key name
	F LDVBN,L		; first data bucket
	F TYPE,B		; key segment datatype (plg 3)
	  S TYPE0,0,B		; another name for first datatype (plg 3)
	F TYPE1,B		; (plg 3)
	F TYPE2,B		; (plg 3)
	F TYPE3,B		; (plg 3)
	F TYPE4,B		; (plg 3)
	F TYPE5,B		; (plg 3)
	F TYPE6,B		; (plg 3)
	F TYPE7,B		; (plg 3)
	L BLN			; length of key descriptor in the prologue (plg 3)
	C SPARE,6		; these are spare words in key block (plg 3)
	E

;
;
; definitions for the area descriptor in the prologue
;
;
	$STRUCT AREA
	F ,B			; spare
	F FLAGS,B		; not currently used
	F AREAID,B		; area id
	F ARBKTSZ,B		; bucket size for area
	F VOLUME,W		; relative volume number
	F ALN,B			; extend allocation alignment
	  C CYL,1		; cylinded alignment
	  C LBN,2		; logical block alignment
	  C VBN,3		; virtual block alignment
	  C RFI,4		; allocate close to related file by fid
	F AOP,B			; alignment options
	  V <M
	  HARD			; absolute alignment or nothing
	  ONC			; locate on cylinder
	  ,3
	  CBT			; contiguous best try
	  ,1
	  CTG			; contiguous
	    >
	F AVAIL,L		; available (returned) buckets
	F CVBN,L		; start vbn for current extent
	F CNBLK,L		; number of blocks in current extent
	F USED,L		; number of blocks used
	F NXTVBN,L		; next vbn to use
	F NXT,L			; start vbn for next extent
	F NXBLK,L		; number of blocks in next extent
	F DEQ,W			; default extend quantity
	F ,B,2			; spare
	F LOC,L			; start lbn on volume
	F RFI,W,3		; related file id
	F ,B,12			; spare
	F CHECK,W		; checksum
	L BLN			; length of area descriptor in the prologue
	E

