	$BEGIN	NT0NWASET,004,NF$NETWORK,<NWA SETUP AND RELEASE>


;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; Facility: RMS
;
; Abstract:
;
;	This module is responsible for the allocation, initialization, and
;	deallocation of the Network Work Area (NWA) control block.
;
; Environment: VAX/VMS, executive mode
;
; Author: James A. Krycka,	Creation Date:	13-JAN-1978
;
; Modified By:
;
;	V02-004	JAK0067		J A Krycka	26-OCT-1981
;		Initialize NWA$Q_FLG field.
;
;	V02-003	SPR37751	J A Krycka	10-JUN-1981
;		If a receive QIO is outstanding, process (stall on) the AST
;		before deallocating the NWA to avoid a BUGCHECK when the AST
;		is delivered.
;
;	V02-002	JAK0058		J A Krycka	22-MAY-1981
;		This module was created from code previously residing in
;		RM0XPFN and RMS0CLOSE.
;
;--

	.SBTTL	DECLARATIONS

;
; Include Files:
;

	$FWADEF				; Define File Work Area symbols
	$IFBDEF				; Define IFAB symbols
	$NWADEF				; Define Network Work Area symbols

;
; Macros:
;
;	None
;
; Equated Symbols:
;

	ASSUME	NWA$Q_FLG EQ 0

;
; Own Storage:
;
;	None
;

	.SBTTL	NT$NWA_INIT - ALLOCATE AND INITIALIZE NWA

;++
; NT$NWA_INIT - allocates space for a NWA control block and then initializes
;	selected fields in it and in the FWA.
;
; Calling Sequence:
;
;	BSBW	NT$NWA_INIT
;
; Input Parameters:
;
;	R8	FAB address
;	R9	IFAB address
;	R10	FWA address
;	R11	Impure Area address
;
; Implicit Inputs:
;
;	None
;
; Output Parameters:
;
;	R0	Status code (RMS)
;	R1	Destroyed
;	R2	NWA size in bytes (rounded to page boundary)
;	R3	NWA address
;
; Implicit Outputs:
;
;	FWA$Q_NODE
;	FWA$Q_QUOTED
;	IFB$L_NWA_PTR
;	NWA fields
;
; Completion Codes:
;
;	Standard RMS completion codes
;
; Side Effects:
;
;	Space is obtained from the RMS buffer manager.
;
;--

NT$NWA_INIT::				; Entry point

;
; Allocate space for the Network Work Area (NWA) control block and make IFAB
; point to it.
;

	MOVZWL	#NWA$C_BLN,R2		; Specify size of NWA in bytes
	BSBW	RM$GETPAG		; Allocate space (NOT ZEROED)
	BLBC	R0,EXIT			; Branch on failure
	MOVL	R3,IFB$L_NWA_PTR(R9)	; Store NWA address in IFAB

;
; Initialize selected fields in NWA.
;

	ASSUME	NWA$Q_XLTBUF2 EQ NWA$Q_XLTBUF1+8

	CLRQ	NWA$Q_FLG(R3)		; Initialize status flags
	MOVAQ	NWA$Q_XLTBUF1(R3),R1	; Initialize descriptors for use during
					;  logical node name translation
	MOVZBL	#NWA$C_XLTBUFSIZ,(R1)+	; Set-up 1st translation buffer
	MOVAB	NWA$T_XLTBUF1(R3),(R1)+	; "
	MOVZBL	#NWA$C_XLTBUFSIZ,(R1)+	; Set-up 2nd translation buffer
	MOVAB	NWA$T_XLTBUF2(R3),(R1)	; "
	MOVAB	NWA$T_ACSBUF(R3),-	; Initialize address for access
		NWA$Q_ACS+4(R3)		;  control string descriptor
	CLRL	NWA$L_XLTCNT(R3)	; Initialize node translation counter
	CLRL	NWA$L_XLTBUFFLG(R3)	; Initialize translation buffer flag
	MOVB	#^A\_\,NWA$B_UNDERLINE(R3); Initialize to ASCII code for '_'

;
; Initialize selected fields in FWA that refer to NWA.
;

	MOVAB	NWA$T_NODEBUF(R3),-	; Update node name descriptor
		FWA$Q_NODE+4(R10)	;  with buffer address
	MOVAB	NWA$T_QUOTEDBUF(R3),-	; Update quoted string descriptor
		FWA$Q_QUOTED+4(R10)	;  with buffer address
EXIT:	RSB				; Exit with RMS code in R0

	.SBTTL	NT$NWA_FREE - DEALLOCATE NWA

;++
; NT$NWA_FREE - deallocates the NWA control block after all receive QIO ASTs
;	have been processed.
;
; Calling Sequence:
;
;	BSBW	NT$NWA_FREE
;
; Input Parameters:
;
;	R8	FAB address
;	R9	IFAB address
;	R10	IFAB address
;	R11	Impure Area address
;
; Implicit Inputs:
;
;	IFB$L_NWA_PTR
;	NWA$V_RCVQIO
;	NWA$V_RCVAST
;
; Output Parameters:
;
;	R0-R5	Destroyed
;	AP	Destroyed
;
; Implicit Outputs:
;
;	NWA is deallocated
;
; Completion Codes:
;
;	None
;
; Side Effects:
;
;	Space is returned to the RMS buffer manager.
;
;--

NT$NWA_FREE::				; Entry point
	MOVL	IFB$L_NWA_PTR(R9),R4	; Get NWA address
	BEQL	20$			; Branch if none

;
; If a special receive AST is still pending, then stall on it (i.e., wait for it
; to complete) before deallocating the NWA. A special receive QIO is one posted
; by NT$TRANSMIT_PKT that references the NWA and uses NT$STALLAST instead of
; RM$STALLAST.
;

	BBC	#NWA$V_RCVQIO,(R4),10$	; Branch if special receive not posted
	BBS	#NWA$V_RCVAST,(R4),10$	; Branch if special received completed
	$SETBIT	#NWA$V_RCVSTALL,(R4)	; Set flag to resume thread after stall
	MOVL	R9,NWA$L_THREAD(R4)	; Save IFAB/IRAB address that we are
					;  stalling on for use by NT$STALLAST
					;  before it branches to RM$THREADGO
	JSB	RM$STALL		; Await completion of special receive
					; Note: R0 contains garbage on return

;
; Now it's safe to deallocate the NWA.
;

10$:	MOVZWL	#NWA$C_BLN,R5		; Get # bytes to return
	BSBW	RM$RETPAG		; Deallocate space used by NWA
20$:	RSB				; Exit with no status in R0

	.END				; End of module
