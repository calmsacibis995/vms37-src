
MODULE RM3MAKIDX (LANGUAGE (BLISS32) ,
		IDENT = 'V03-000'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:	RMS32 INDEX SEQUENTIAL FILE ORGANIZATION
!
! ABSTRACT:
!                This module makes an index given a key of reference
!
!
! ENVIRONMENT:
!
!		VAX/VMS OPERATING SYSTEM
!
!--

!
! AUTHOR:        D. H. Gillespie	     CREATION DATE:        	2-AUG-78  8:51
!
!
!
! MODIFIED BY:
!
!   V02-007	TMK0001		Todd M. Katz		01-Mar-1982
!		Add support for rear end truncation of keys in the index
!		of prolog 3 files with compressed indicies. The change
!		made is to RM$MAK_IDX_REC. The high key need only contain
!		one FF!
!
!   V02-006	PSK0003		Paulina S. Knibbe	09-Aug-1981
!		Make RM$MAK_IDX_REC into a global routine so NEW_ROOT
!		can call it.
!
!   V02-005	PSK0002		Paulina S. Knibbe	02-Aug-1981
!		Remove support for rear-end truncation of keys in index
!
!   V02-004	PSK0001		Paulina S. Knibbe	29-May-1981
!		Add support for making prologue three indexes
!
!   V02-003	REFORMAT	Paulina S. Knibbe	23-Jul-1980
!
! REVISION HISTORY:
!
!   Wendy Koenig, 	24-OCT-78  14:02
!   X0002 - MAKE CHANGES CAUSED BY SHARING CONVENTIONS
!
!*****

LIBRARY 'RMSLIB:RMS';

REQUIRE 'RMSSRC:RMSIDXDEF';

!
! define default psects for code
!

PSECT
    CODE = $L$PUT3(PSECT_ATTR),
    PLIT = L$PUT3(PSECT_ATTR);

! Linkages
!

LINKAGE
    L_ADD_TO_ARRAY,
    L_AL_FRMT_BKT,
    L_CACHE,
    L_CHKSUM,
    L_KEY_DESC,
    L_MAKE_HIGH_KY,
    L_MAKE_INDEX,
    L_MAK_IDX_REC,
    L_MAKSUM,
    L_RELEASE,
    L_VBN_SIZE;

LINKAGE
    RL$RELEASE_KD 	= JSB () : GLOBAL (COMMON_RABREG);

!
! Forward Routines
!

FORWARD ROUTINE
    RM$MAKE_HIGH_KY	: RL$MAKE_HIGH_KY NOVALUE,
    RELEASE_KEYDESC	: RL$RELEASE_KD NOVALUE,
    RM$MAKE_INDEX	: RL$MAKE_INDEX,
    RM$MAK_IDX_REC	: RL$MAK_IDX_REC NOVALUE;

!
! External Routines
!

EXTERNAL ROUTINE
    RM$AL_FRMT_BKT	: RL$AL_FRMT_BKT,
    RM$CACHE		: RL$CACHE,
    RM$CHKSUM		: RL$CHKSUM,
    RM$KEY_DESC		: RL$KEY_DESC,
    RM$MAKSUM		: RL$MAKSUM,
    RM$RELEASE		: RL$RELEASE,
    RM$VBN_SIZE		: RL$VBN_SIZE;


GLOBAL ROUTINE RM$MAKE_HIGH_KY : RL$MAKE_HIGH_KY NOVALUE =

!++
!
! RM$MAKE_HIGH_KY -
!	This routine formats a high key depending on the key type
!	at REC_ADDR and returns REC_ADDR beyond high key.
!
! CALLING SEQUENCE:
!	RM$MAKE_HIGH_KY()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	REC_ADDR	- record pointer
!	IDX_DFN		- address of index descriptor
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	REC_ADDR	- updated to point beyond  high key
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
!--

    BEGIN

    EXTERNAL REGISTER
	R_REC_ADDR,
	R_IDX_DFN_STR;

    ! If the data type is anything but packed decimal, set high key to 255.
    ! Then if type is signed binary , clear sign bit.
    !

    IF .IDX_DFN[IDX$B_DATATYPE] LSSU IDX$C_PACKED
    THEN
	BEGIN
	REC_ADDR = CH$FILL(%X'FF', .IDX_DFN[IDX$B_KEYSZ], .REC_ADDR);

	IF .IDX_DFN[IDX$B_DATATYPE] EQL IDX$C_SGNWORD
	    OR
	    .IDX_DFN[IDX$B_DATATYPE] EQL IDX$C_SGNLONG
	THEN
	    (.REC_ADDR - 1)<0, 8> = %X'7F';

	END
    ELSE

	! When the key is packed decimal, fill nibbles with '9's except for
	! size which if 'C'.
	!
	BEGIN
	REC_ADDR = CH$FILL(%X'99', .IDX_DFN[IDX$B_KEYSZ] - 1, .REC_ADDR);
	(.REC_ADDR)<0, 8> = %X'9C';
	REC_ADDR = .REC_ADDR + 1;
	END;

    END;


ROUTINE RELEASE_KEYDESC : RL$RELEASE_KD NOVALUE =

!++
!
! RELEASE_KEYDESC
!
!	This routine releases the locked key descriptor whose BDB is stored
!	in IRAB[IRB$L_LOCK_BDB].
!
! CALLING SEQUENCE:
!	RELEASE_KEYDESC()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	IRAB		- address of internal RAB structure
!	IRAB[IRB$L_LOCK_BDB] 	- BDB of key descriptor buffer
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	The lock on the key descriptor is released.
!	IRAB[IRB$L_LOCK_BDB] = 0
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_RAB_STR;

    GLOBAL REGISTER
	R_BDB_STR;

    BDB = .IRAB[IRB$L_LOCK_BDB];
    IRAB[IRB$L_LOCK_BDB] = 0;
    RM$RELEASE(0);
    END;


GLOBAL ROUTINE RM$MAKE_INDEX : RL$MAKE_INDEX =

!++
!
! RM$MAKE_INDEX - This routine builds an index for the given key of reference
!
! CALLING SEQUENCE:
!	RM$MAKE_INDEX()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	IDX_DFN		- address of in core key descriptor which needs an index
!	IRAB		- address of internal RAB
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	The index is made if necessary with disk and in_core key descriptors
!	being updated.  All IRAB BDB's are used but zeroed once  descriptors are
!	released.  IRAB[IRB$L_MIDX_TMPX] 's are used as scratch areas.
!
!
!--

    BEGIN

    MACRO
	LOWER_VBN = IRAB[IRB$L_MIDX_TMP1]%,
	LEVEL = IRAB[IRB$L_MIDX_TMP2]%;

    EXTERNAL REGISTER
	COMMON_RAB_STR,
	R_IDX_DFN_STR;

    ! There should be nothing locked when an index is made for the primary key.
    ! Only a record lock exists when the secondary index is made. Lock the disk
    ! key descriptor storing it's BDB in IRAB[IRB$L_LOCK_BDB]. Check that the
    ! index has not been made.  If it has, release lock and and return.
    ! In_core descriptor has been updated by read and lock. If the index has
    ! not been made, precede to build it.
    !
    IRAB[IRB$V_NEW_IDX] = 1;		! force new read of key descriptor

    ! lock descriptor so no one else can monkey
    !
    IRAB[IRB$B_CACHEFLGS] = CSH$M_LOCK;

    RETURN_ON_ERROR (RM$KEY_DESC(.IDX_DFN[IDX$B_KEYREF]));

    ! double check that no one else has made index.
    !
    BEGIN

    GLOBAL REGISTER
	R_BDB_STR;

    BDB = .IRAB[IRB$L_LOCK_BDB];

    IF NOT .IDX_DFN[IDX$V_INITIDX]
    THEN
	BEGIN
	RELEASE_KEYDESC();
	RETURN 1;

	END;

    BEGIN

    LOCAL
	DISP;

    DISP = .IDX_DFN[IDX$B_KEYREF];

    IF .DISP NEQ 0
    THEN
	DISP = ((.DISP - 1) MOD 5)*(KEY$C_BLN + KEY$C_SPARE);

    IRAB[IRB$L_MIDX_TMP3] = .BDB[BDB$L_ADDR] + .DISP;
    BDB[BDB$V_VAL] = 0;		! invalidate buffer so no need to back out
    END

    ! end global definition of COMMON_IO_STR and local def of DISP
    !
    END;

    ! It is necessary to build the index.  Start with the data level and work
    ! up to the root, taking care to have 2 levels of index if LANUN is not
    ! equal IANUM.
    !

    RETURN_ON_ERROR (RM$AL_FRMT_BKT(.IDX_DFN[IDX$B_DANUM],
	    .IDX_DFN[IDX$B_DATBKTSZ]*512),
	BEGIN
	(RELEASE_KEYDESC())
	END);

    ! Finish formatting data level bucket.
    !
    BEGIN

    LOCAL
	BDB	: REF BBLOCK,
	BUCKET	: REF BBLOCK,
	VBN;

    BDB = .IRAB[IRB$L_NXTBDB];			! BDB of data bucket
    BUCKET = .BDB[BDB$L_ADDR];			! address of data bucket
    VBN = .BDB[BDB$L_VBN];
    BUCKET[BKT$L_NXTBKT] = .VBN;		! forward link is self

    ! save first data bucket VBN in disk key descriptor
    !
    BBLOCK[.IRAB[IRB$L_MIDX_TMP3], KEY$L_LDVBN] = .VBN;
    BUCKET[BKT$B_LEVEL] = 0;
    BUCKET[BKT$B_BKTCB] = BKT$M_LASTBKT;

    ! data BDB saved for index formatting routines
    !
    IRAB[IRB$L_CURBDB] = .BDB;
    IRAB[IRB$L_NXTBDB] = 0
    END;			! end of local definition of BDB + BUCKET

    ! now make index levels
    !

    DECR I FROM 1 TO 0 DO
	BEGIN

	! Choose area to use.
	!
	BEGIN

	LOCAL
	    AREA_NO;

	IF .I EQL 0
	THEN
	    BEGIN

	    IF .IDX_DFN[IDX$B_LANUM] EQL 0
	    THEN
		EXITLOOP;	! There are not 2 levels of index if exitloop

	    AREA_NO = .IDX_DFN[IDX$B_IANUM];

	    IF .IDX_DFN[IDX$B_LANUM] EQL .AREA_NO<0, 8>
	    THEN
		EXITLOOP;

	    END
	ELSE
	    BEGIN
	    AREA_NO = .IDX_DFN[IDX$B_LANUM];

	    IF .AREA_NO EQL 0
	    THEN
		AREA_NO = .IDX_DFN[IDX$B_IANUM];

	    END;

	! Pickup information needed from lower level bucket before writing it
	! out.
	!
	BEGIN

	GLOBAL REGISTER
	    R_BDB_STR;

	BDB = .IRAB[IRB$L_CURBDB];
	IRAB[IRB$L_CURBDB] = 0;
	LOWER_VBN = .BDB[BDB$L_VBN];
	LEVEL = .BBLOCK[.BDB[BDB$L_ADDR], BKT$B_LEVEL] + 1;
	BDB[BDB$V_DRT] = 1;
	BDB[BDB$V_VAL] = 1;

	RETURN_ON_ERROR (RM$RELEASE(RLS$M_WRT_THRU),
	    BEGIN
	    RELEASE_KEYDESC()
	    END)

	END;				! end of global register definition

	! allocate and do basic formatting of one index bucket
	!

	RETURN_ON_ERROR (RM$AL_FRMT_BKT(.AREA_NO,.IDX_DFN[IDX$B_IDXBKTSZ]*512),
	    BEGIN
	    RELEASE_KEYDESC()
	    END)

	END;					! end of local area_no
	BEGIN

	LOCAL
	    BUCKET	: REF BBLOCK;

	BUCKET = .BBLOCK[.IRAB[IRB$L_NXTBDB], BDB$L_ADDR];
	BUCKET[BKT$L_NXTBKT] = .BBLOCK[.IRAB[IRB$L_NXTBDB], BDB$L_VBN];
	BUCKET[BKT$B_LEVEL] = .LEVEL;
	BUCKET[BKT$V_LASTBKT] = 1;

	! Switch IRAB BDB which describes new index bucket
	!
	IRAB[IRB$L_CURBDB] = .IRAB[IRB$L_NXTBDB];
	IRAB[IRB$L_NXTBDB] = 0;

	! Format an index entry
	!
	BEGIN

	GLOBAL REGISTER
	    R_REC_ADDR;

	REC_ADDR = .BUCKET + BKT$C_OVERHDSZ;
	RM$MAK_IDX_REC(.BUCKET);
	END;					! of bdb_str and rec_addr
	END;					! end local def of bucket
	END;					! end DECR I

    ! set root bucket indicator
    !
    BEGIN

    LOCAL
	BUCKET	: REF BBLOCK;

    BUCKET = .BBLOCK[.IRAB[IRB$L_CURBDB], BDB$L_ADDR];
    BUCKET[BKT$B_BKTCB] = .BUCKET[BKT$B_BKTCB] OR BKT$M_ROOTBKT
    END;

    ! save information about the root in the disk key descriptor and write out
    ! root
    !
    BEGIN

    GLOBAL REGISTER
	R_BDB_STR;

    LOCAL
	DISK_KEY_DESC	: REF BBLOCK;

    BDB = .IRAB[IRB$L_CURBDB];
    IRAB[IRB$L_CURBDB] = 0;
    BDB[BDB$V_DRT] = 1;
    BDB[BDB$V_VAL] = 1;
    DISK_KEY_DESC = .IRAB[IRB$L_MIDX_TMP3];
    DISK_KEY_DESC[KEY$L_ROOTVBN] = .BDB[BDB$L_VBN];
    DISK_KEY_DESC[KEY$B_ROOTLEV] = .BBLOCK[.BDB[BDB$L_ADDR], BKT$B_LEVEL];

    RETURN_ON_ERROR (RM$RELEASE(RLS$M_WRT_THRU),
	BEGIN
	RELEASE_KEYDESC()
	END);

    ! Now update key descriptor and write it out
    !
    DISK_KEY_DESC[KEY$B_FLAGS] = .DISK_KEY_DESC[KEY$B_FLAGS] AND NOT KEY$M_INITIDX;
    BDB = .IRAB[IRB$L_LOCK_BDB];
    IRAB[IRB$L_LOCK_BDB] = 0;
    RM$MAKSUM(.BDB[BDB$L_ADDR]);
    BDB[BDB$V_DRT] = 1;
    BDB[BDB$V_VAL] = 1;

    RETURN_ON_ERROR (RM$RELEASE(RLS$M_WRT_THRU));

    ! Now call read key descriptor inorder to update the in core descriptor
    ! and verify changes got to disk.
    !
    IRAB[IRB$V_NEW_IDX] = 1;

    RETURN_ON_ERROR (RM$KEY_DESC(.IDX_DFN[IDX$B_KEYREF]))

    END;				! end global register r_bdb_str
    RETURN 1;

    END;


GLOBAL ROUTINE RM$MAK_IDX_REC(BUCKET): RL$MAK_IDX_REC NOVALUE = 
!+++
!
!   RM$MAK_IDX_REC
!
!	This routine builds an index record for the high key value of 
!	any flavor index bucket.
!
!---
BEGIN

MAP
    BUCKET : REF BBLOCK;

MACRO
    KEY_LEN 	= 0,0,8,0 %,
    FRNT_CMPR	= 1,0,8,0 %;

GLOBAL REGISTER
    R_IFAB,
    R_IDX_DFN_STR,
    R_IRAB_STR;

EXTERNAL REGISTER
    R_REC_ADDR_STR;

LOCAL
    SIZE;

! First get the address for the record and the size for the VBN
!

SIZE = RM$VBN_SIZE (.IRAB [IRB$L_MIDX_TMP1]);

! Now set up the record depending on bucket flavor
!

CASE .IDX_DFN [IDX$B_IDXBKTYP] FROM IDX$C_V2_BKT TO IDX$C_NCMPIDX OF

    SET

    [IDX$C_V2_BKT]:
	
	! Prologue one or two index bucket
	!    ---------------------
	!    ! cntrl ! VBN ! key !
	!    ---------------------
	!
	BEGIN
	(.REC_ADDR)<0,8> = .SIZE - 2;
	(.REC_ADDR)<8,.SIZE*8> = .IRAB [IRB$L_MIDX_TMP1];
	REC_ADDR = .REC_ADDR + .SIZE + 1;
	RM$MAKE_HIGH_KY();
	END;

    [IDX$C_CMPIDX]:

	! Prologue three compressed index bucket
	!    ------------------------------
	!    ! len ! frnt compr cnt ! key !
	!    ------------------------------
	!
	BEGIN

	LOCAL
	    FIRST_VBN;

	! First build key portion
	!
	REC_ADDR [KEY_LEN] = 1;
	REC_ADDR [FRNT_CMPR] = 0;
	REC_ADDR = CH$FILL (%X'FF', 1, .REC_ADDR + 2);

	! Now build VBN portion
	!
	BUCKET [BKT$V_PTR_SZ] = .SIZE - 2;
	FIRST_VBN = .BUCKET + (.IDX_DFN [IDX$B_IDXBKTSZ] * 512) - 4;
	(.FIRST_VBN - .SIZE) <0,.SIZE^3> = .IRAB [IRB$L_MIDX_TMP1];

	! Insert the 'end of freespace' pointer
	!
	(.FIRST_VBN)<0,16> = .FIRST_VBN - .SIZE - .BUCKET - 1;
 	END;

    [IDX$C_NCMPIDX]:
	
	! Prologue three non-compressed index record
	!	-------
	!       ! key !
	!       -------
	!
	BEGIN
	LOCAL
	    FIRST_VBN;

	REC_ADDR = CH$FILL (%X'FF', .IDX_DFN [IDX$B_KEYSZ], CH$PTR (.REC_ADDR));

	! Now build VBN portion
	!
	BUCKET [BKT$V_PTR_SZ] = .SIZE - 2;
	FIRST_VBN = .BUCKET + (.IDX_DFN [IDX$B_IDXBKTSZ] * 512) - 4;
	(.FIRST_VBN - .SIZE) <0,.SIZE^3> = .IRAB [IRB$L_MIDX_TMP1];

	! Fill in the 'end of freespace' pointer
	!
	(.FIRST_VBN)<0,16> = .FIRST_VBN - .SIZE - .BUCKET - 1;
	END;

    TES;

! Now fill in the free space pointer
!
BUCKET [BKT$W_FREESPACE] = (.REC_ADDR - .BUCKET)<0,16>;
END;

END

ELUDOM
