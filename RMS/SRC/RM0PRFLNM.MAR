	$BEGIN	RM0PRFLNM,003,F$RMSOPEN0,<PROCESS FILE NAME>


;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; Facility: RMS32
;
; Abstract:
;		This routine performs RMS32 file name processing.
;
; Environment:
;		Star processor running Starlet exec.
;
; Author: L. F. Laverdure	 Creation Date: 4-JAN-1977
;
; Modified By:
;
;	V03-003	KEK0026		K. E. Kinnear		23-Mar-1982
;		More work like KEK0022 -- correctly allow foreign devices
;		to have ANSI-"a" names. Also add back in NFS to FOREIGN
; 		branch deleted by RAS0067.
;
;	V03-002	RAS0079		Ron Schaefer		17-Mar-1982
;		Add translation table mask support (FAB$B_DSBMSK).
;
;	V03-001	RAS0080		Ron Schaefer		17-Mar-1982
;		Correct stream format carriage control for indirect PPFs,
;		both terminals and files.
;
;	V02-044	RAS0067		Ron Schaefer		9-Feb-1982
;		Re-arrange execution paths so that FWA$T_SHRFILDEV
;		is filled in for all devices.  This field is used to
;		return a canonical device name in NAM$T_DVI.
;		
;	V02-043	KEK0022		K. E. Kinnear		2-Feb-1982
;		Open restrictions on quoted strings to all non-disk
;		(actually non-DIR) devices.
;
;	V02-042	KEK0018		K. E. Kinnear		18-Jan-1982
;		Modifications to allow ANSI-"a" filespecs only on
;		magtape devices.  Also, remove all references to
;		NAM$x_QUOTED and replace with NAM$x_NAME.
;
;	V02-041	RAS0060		Ron Schaefer		15-Jan-1982
;		Fix temp buffer usage for concealed devices;
;		force stream PPF terminals to have RAT=CR.
;
;	V02-040	RAS0058		Ron Schaefer		8-Jan-1982
;		Correct concealed device error path so as to return
;		$ASSIGN errors; and fix bad code saving FWA$T_SHRFILDEV.
;
;	V02-039	RAS0047		Ron Schaefer		18-Nov-1981
;		Fix the UIC form of directories under rooted directories,
;		in order to make the AME and compatibility mode work.
;
;	V02-038	KPL0002		Peter Lieberwirth	15-Nov-1981
;		Fix RAS0045 to not use FWA$T_XLTBUFF1 in RM$ASSIGN.
;		Use unnamed space at end of first page instead.
;		(Fix this better ASAP!)
;
;	V02-037	RAS0045		Ron Schaefer		11-Nov-1981
;		Complete KPL0001 by changing the reference from
;		FWA$T_WILD to FWA$T_SHRFILDEV.  Also fix bad register
;		reference.
;
;	V02-036	RAS0040		Ron Schaefer		16-Oct-1981
;		Implement rooted directories for concealed devices.
;		Restructure RM$ASSIGN to parse the translation of the
;		concealed device name, assign a channel to the concealed
;		device and set the internal MFD to the DID of the
;		root directory.
;
;	V02-035	KPL0001		P Lieberwirth		 7-Oct-1981
;		Save unit number and device name in FWA$T_WILD field for
;		later use in naming shared file.
;
;	V02-034	RAS0025		Ron Schaefer		18-Aug-1981
;		Allow $GET/$PUT for UDF seq org files, except as
;		indirect PPF.
;
;	V02-033	CDS0002		C. D. Saether		29-Dec-1980	15:12
;		Remove code for ACT error (not referenced).
;
;	V02-032	CDS0001		C. D. Saether		28-Aug-1980	16:00
;		Change branches in foreign processing so that ANSI mounted
;		mounted magtape opened with the NFS file option correctly
;		gets unit record characteristics.
;
;	V02-031	REFORMAT	K. E. Kinnear		31-Jul-1980	8:51
;
;	V01-030	KEK002		K. E. Kinnear		11-Mar-1980	17:40
;		Defeat open with wild cards in file name by brute force
;		string scan for * or % characters.
;
;	V01-029	JAK0020		J. A. Krycka		20-Nov-1979	15:00
;		Continuation of V028.
;
;	V01-028	JAK0025		J. A. Krycka		08-Oct-1979	15:30
;		Delete code to prefix device name with underscore before
;		calling $ASSIGN because RM$XPFN now prefixes an underscore.
;
;	V01-027	RAS0001		R. A. Schaefer		11-Sep-1979	11:20
;		Change channel assignment logic for virtual terminals.
;
;--


	.SBTTL	DECLARATIONS

;
; Include Files:
;

;
; Macros:
;

	$FABDEF
	$DEVDEF
	$DIBDEF
	$IFBDEF
	$IMPDEF
	$FWADEF
	$PSLDEF
	$ASSIGNDEF
	$NAMDEF
	$FIBDEF
	$RMSDEF

;
; Equated Symbols:
;

	FOP=FAB$L_FOP*8			; bit offset to fop

;
; Own Storage:
;


	.SBTTL	RM$PRFLNM - FILENAME PROCESSING ROUTINE

;++
; RM$PRFLNM -- Filename Processing Routine.
;
;  This routine first sets up various file access and sharing bits,
;  then allocates a buffer and bdb to use as a scratch work area for building
;  the expanded filename string and interfacing with f11acp, calls rm$xpfn 
;  to expand the filename string, assigns an i/o channel, and finally 
;  retrieves the device characteristics, filling in the associated
;  IFAB and FAB fields.
;
;  If the result of the file name expansion indicates that the file in
;  question is an indirectly accessed process permanent file, no i/o
;  channel need be assigned, as this has already been done.  Instead,
;  an ifi is constructed that points this fab at the associated process
;  permanent file.  This has the side effect of turning a $create call for
;  an indirectly accessed process permanent file into an $open.  This is
;  done by returning to the $OPEN code rather than the $CREATE code.
;
;  If an error occurs, cleanup may be required to
;  deallocate the bdb and buffer and deassign the channel.
;
; Calling Sequence:
;
;	BSBW	RM$PRFLNM
;
; Input Parameters:
;
;	R11	impure area address
;	R10	IFAB address
;	R9	IFAB address
;	R8	FAB address
;
; Implicit Inputs:
;
;	The contents of the various FAB and IFAB fields
;	(see functional spec for details), in particular,
;	the various file name specification fields.
;
; Output Parameters:
;
;	R10	FWA address
;	R0	status code
;	R1 thru R5 destroyed
;	none
;
; Implicit Outputs:
;
;	Various fab, fwa, and ifab fields are filled in (see
;	functional spec for details).
;	FWA$Q_FIB initialized.
;	FWA$T_DIB filled in.
;
; Completion Codes:
;
;	Standard rms, in particular, success, dev,
;	chn, and dme, in addition to the codes returned
;	by RM$XPFN.
;
; Side Effects:
;
;	See note above on change of $create into $open for indirect ppf.
;
;--


RM$PRFLNM::

;
;  Fill in fac IFAB field from fab handling defaults and setting summary
;  write access bit as required.
;

	MOVB	FAB$B_FAC(R8),IFB$B_FAC(R9)
	BEQL	SETGET			; branch if null

;
;  Entry point for RMS0CREATE (IFB$B_FAC already set)
;

RM$PRFLNMALT::
	BITB	#FAB$M_UPD!FAB$M_DEL!FAB$M_TRN,IFB$B_FAC(R9)
	BEQL	SETWRT			; branch if not upd, del, or trn
					; accessed, else imply get access.
SETGET:	BISB2	#FAB$M_GET,IFB$B_FAC(R9); default to get access
SETWRT:	BITB	#FAB$M_PUT!FAB$M_UPD!FAB$M_DEL!FAB$M_TRN,IFB$B_FAC(R9)
	BEQL	20$			; branch if none of the varieties
					; of write access is specified.
	SSB	#IFB$V_WRTACC,(R9)	; set summary bit
20$:

;
;  Go expand file name.
;

	BSBW	RM$XPFN			; get fully qualified file name
 30$:	BLBS	R0,35$
	RSB				; quit on error

;
; Check for residual wild characters in file name.
; If FWA$V_QUOTED, then skip check.  This can either be ANSI-"a" filespecs
; where FWA$Q_NAME really holds a quoted string, or it could be a network
; quoted string, where there is nothing in FWA$Q_NAME.
;

35$:	BBS	#FWA$V_QUOTED,(R10),50$	; don't check if quoted
	LOCC	#^A'*',FWA$Q_NAME(R10),@FWA$Q_NAME+4(R10); any *'s in name?
	BNEQ	40$			; if neq yes
	LOCC	#^A'%',FWA$Q_NAME(R10),@FWA$Q_NAME+4(R10); any %'s in name
	BEQL	50$			; if eql no
40$:	BRW	ERRFNM			; give file name error

;
;  Check for indirect open of process permanent file.
;

50$:	TSTB	FWA$B_ESCFLG(R10)	; did we get a ppf flag?
	BEQL	RM$ASSIGN		; branch if not
	BRW	INDPPF

;++
;
;  Translate the device specification.   If it translates, then
;  parse it for a concealed device specification of the form:
;
;		__devnam:    or
;		__devnam:[root_dir.]
;
;  Note the trailing ".]" or ".>" signature.
;  Return RMS$_DEV error if the translation is not one of these forms.
;
;--

RM$ASSIGN::
	BBC	#FWA$V_NODE,(R10),10$
	BRW	NTASGN			; branch if network request

	ASSUME	FWA$Q_DEVICE+8 EQ FWA$Q_DIR1
	ASSUME	FWA$Q_DIR1+8 EQ FWA$Q_DIR2

10$:	MOVAB	FWA$Q_DEVICE(R10),R1	; save DEVICE,DIR1 and DIR2 descriptors
	MOVQ	(R1)+,-(SP)		; save DEVICE
	MOVL	SP,R0			; Remember logical device descriptor
	MOVQ	(R1)+,-(SP)		; save DIR1
	MOVQ	(R1)+,-(SP)		; save DIR2
	CLRQ	-(R1)			; Set only 1 directory level
	MOVAL	FWA$T_ROOT_DIR+1(R10),-(R1) ; Directory buffer addr
	MOVL	#FWA$C_DIRBUFSIZ,-(R1)	; Directory buffer length
	MOVZBL	FAB$B_DSBMSK(R8),-(SP)	; Translation table mask
	PUSHAL	(R1)			; Addr of dir length word
	PUSHAL	(R1)			; Addr of dir buffer
	MOVAL	FWA$T_XLTBUFF3(R10),-(R1) ; Scratch device buffer addr
	MOVL	#FWA$C_MAXDEVICE,-(R1)	; Device buffer length
	PUSHAL	(R1)			; Addr of device length word
	PUSHAL	(R1)			; Addr of device buffer
	PUSHAL	(R0)			; Addr of logical device
	CALLS	#6,RM$KFI_PRS_DEV	; Parse the logical device
	BLBS	R0,20$			; Continue if succesful
	BRW	NO_CONCEAL		; Not a concealed device
20$:	BSBW	ASSIGN			; Assign a channel
	BLBC	R0,DEV_DONE		; Bad concealed device

;+
;  Now check for a root directory spec.   Call RM$SETDID to locate the
;  directory ID, updating the directory cache if necessary.
;  An optimization that could be made here is that if we are planning
;  to do a KFO open, avoid doing the SETDID lookup.
;  If XPFN added the default MFD string of 000000, quit with error as the
;  directory string is hopelessly ruined.
;-

	TSTW	FWA$Q_DIR1(R10)		; Do we have a root directory?
	BEQL	NO_DIR			; Nope
	BBS	#FWA$V_DFLT_MFD,(R10),-	; Did XPFN add "000000"?
		ERRMFD			; Fail if so
	ADDB3	#1,FWA$Q_DIR1(R10),-	; Set the size of the ASCIC dir string
		FWA$T_ROOT_DIR(R10)

	ASSUME	FWA$V_GRPMBR LE 31

	PUSHL	(R10)			; Save FWA state flags
	CSB	#FWA$V_GRPMBR,(R10)	; Clear the group/member flag
	BSBW	RM$SETDID_ALT		; Find the DID
	MOVL	(SP)+,(R10)		; Restore FWA flags
	BLBC	R0,FAIL			; Branch on failure
	MOVL	FWA$T_FIBBUF+FIB$W_DID_NUM(R10),- ; Save the DID
		FWA$T_MFD_FID(R10)		  ; 
	MOVW	FWA$T_FIBBUF+FIB$W_DID_RVN(R10),- 
		FWA$T_MFD_FID+4(R10)
	CLRL	FWA$T_FIBBUF+FIB$W_DID_NUM(R10)	; Zero the FIB buffer
	CLRW	FWA$T_FIBBUF+FIB$W_DID_RVN(R10) 
	SSB	#FWA$V_ROOT_DIR,(R10)	; Mark root directory present
NO_DIR:	MOVAL	@FAB$L_NAM(R8),R7	; Get NAM block addr
	BEQL	10$			; No NAM block
	BSBW	RM$CHKNAM		; Check if okay
	BLBC	R0,FAIL			; Quit on error
	SSB	#NAM$V_CNCL_DEV,-	; Set concealed device status bit
		NAM$L_FNB(R7)
	BBC	#FWA$V_ROOT_DIR,-
		(R10),10$		; Root directory?	
	SSB	#NAM$V_ROOT_DIR,-	; Set root directory status bit
		NAM$L_FNB(R7)
10$:	RMSSUC				; Set success
DEV_DONE:
	MOVAB	FWA$Q_DIR2+8(R10),R1	; Restore DEVICE,DIR1 and DIR2 desc.
	MOVQ	(SP)+,-(R1)		; restore DIR2
	MOVQ	(SP)+,-(R1)		; restore DIR1
	MOVQ	(SP)+,-(R1)		; restore DEVICE
	RSB				; and return

ERRMFD:	MOVAL	@FAB$L_NAM(R8),R7	; Get NAM block addr
	BEQL	FAIL			; No NAM block
	BSBW	RM$CHKNAM		; Check if okay
	BLBC	R0,FAIL			; Quit on error
	CLRB	NAM$B_ESL(R7)		; Remove the garbled ESA string

	ASSUME	NAM$B_NODE+1 EQ NAM$B_DEV
	ASSUME	NAM$B_DEV+1 EQ NAM$B_DIR
	ASSUME	NAM$B_DIR+1 EQ NAM$B_NAME
	ASSUME	NAM$B_NAME+1 EQ NAM$B_TYPE
	ASSUME	NAM$B_TYPE+1 EQ NAM$B_VER

	CMPB	NAM$B_BLN(R7),#NAM$C_BLN; Is this an extended NAM block?
	BLSSU	FAIL			; Branch if not
	CLRQ	NAM$B_NODE(R7)		; Initialize all filespec element
					;  length fields with a count of zero
FAIL:	RMSERR	DEV			; set error code
	BRB	DEV_DONE		; and return

NO_CONCEAL:
	MOVAB	FWA$Q_DIR2+8(R10),R1	; Restore DEVICE,DIR1 and DIR2 desc.
	MOVQ	(SP)+,-(R1)		; restore DIR2
	MOVQ	(SP)+,-(R1)		; restore DIR1
	MOVQ	(SP)+,-(R1)		; restore DEVICE and use just the
					; logical device


;++
;
;  Now assign a channel and get the associated device characteristics.
;
;  Assign in caller's mode if nfs or ufo set, else assign in exec mode.
;
;--

ASSIGN:

;
; Note:	Device name already has been prefixed with an underscore, so
;	assign system service will not attempt to translate it again.
;

	PUSHL	#0			; no mailbox

	ASSUME	ASSIGN$_MBXNAM EQ ASSIGN$_ACMODE+4

	PUSHL	#PSL$C_EXEC		; exec mode

	ASSUME	FAB$V_UFO GE 16
	ASSUME	FAB$V_NFS GE 16

	BITB	#<FAB$M_UFO!FAB$M_NFS>@-16,FAB$L_FOP+2(R8)
	BEQL	40$			; branch if neither ufo nor nfs set
	MOVZBL	IFB$B_MODE(R9),(SP)	; switch to caller's mode
	BBC	#FAB$V_ESC+FOP,(R8),40$	; branch if flag to change to user or
					; super mode not set.
	ASSUME	FAB$V_ESC EQ FAB$V_UFM+1; Take advantage of fact that
	ASSUME	PSL$C_USER EQ 3		;  esc is set and that in com-
	ASSUME	PSL$C_SUPER EQ 2	;  bination with ufm it forms
					;  the appropriate value for the
					;  mode.
	EXTZV	#FAB$V_UFM+FOP,#2,(R8),(SP); Replace mode param on stack
					   ;  with user or super.
	ASSUME	ASSIGN$_CHAN EQ ASSIGN$_ACMODE-4

40$:	PUSHAL	IFB$W_CHNL(R9)		; get channel # back here

	ASSUME	ASSIGN$_DEVNAM EQ ASSIGN$_CHAN-4

	PUSHAQ	FWA$Q_DEVICE(R10)	; device name descriptor

	ASSUME	ASSIGN$_NARGS EQ 4

	CALLS	#4,@#SYS$ASSIGN		; and do the assign
	BLBS	R0,50$
	BRW	ERRASGN

;
;  Assign succeeded  -  get and set device characteristics.
;

50$:	BSBB	GETDEV_CHAR
	BLBS	(R11),RM$SETFIB
	BRW	DIRECTPPF		; branch if process-perm file

;
; Set up fib descriptor.
;

RM$SETFIB::

	ASSUME	FIB$C_LENGTH EQ FWA$C_FIBLEN

	MOVL	#FIB$C_LENGTH,FWA$Q_FIB(R10); set length of fib
	MOVAB	FWA$T_FIBBUF(R10),FWA$Q_FIB+4(R10); set address of fib buffer
ERROR:	RSB

;++
;
;  Assign a channel to the network device and get and set its device
;  characteristics.
;
;--

NTASGN:	$PSECT_BR	NF$NETWORK
	BSBW	NT$ASSIGN		; assign a channel
	BLBC	R0,10$			; branch on error
	BSBW	GETDEV_CHAR		; get network device characteristics
	BRW	NT$MOD_DEV_CHAR		; modify device characteristics
					;  and return to caller
10$:	BRW	ERRASGN			; extended branch
	$PSECT_RESTORE


;
;  Subroutine to get and set device characteristics.
;

GETDEV_CHAR:

	ASSUME	FWA$T_XLTBUFF1 EQ FWA$T_ATR_LIST
	ASSUME	FWA$T_DIB EQ FWA$T_ATR_LIST+16

	MOVAL	@FWA$Q_XLTBUF1+4(R10),R2; get xlation scratch buff addr

;
; Use the scratch buffer to build $getchn parameters and buffer.
;

	MOVL	R2,R3			; save addr of prim. buff descriptor
	MOVZBL	#112,(R2)+		; build prim buff desc. (len)
	MOVAL	16(R3),(R2)+		; build primary buffer desc (adr)
					; (just past descriptor)
	MOVL	R2,R4			; save addr of secondary buff dsc

	ASSUME	IFB$W_ASDEVBSIZ EQ IFB$L_AS_DEV+6
	ASSUME	DIB$L_DEVCHAR EQ 0
	ASSUME	DIB$W_DEVBUFSIZ EQ 6

	MOVL	#8,(R2)+		; buffer len
	MOVAL	IFB$L_AS_DEV(R9),(R2)+	; buffer addr
	$GETCHN_S	-
		CHAN=IFB$W_CHNL(R9),PRILEN=(R3),PRIBUF=(R3),-
		SCDLEN=(R4),SCDBUF=(R4)


	.IF	NE $$RMSTEST&$$RMS_TBUGCHK

	BLBC	R0,ERRBUG

	.ENDC

;
; save unit number and device name as counted string in SHRFILDEV field for use
; in naming shared file and returning a canonical device name in NAM$T_DVI.
;

	PUSHR	#^M<R0,R1,R3>		; save work registers
	MOVAL	FWA$T_SHRFILDEV(R10),R1	; point to buffer with R1
	MOVZWL	DIB$W_DEVNAMOFF(R2),R3	; point R3 at device name counted string
	ADDL2	R2,R3
	MOVZBL	(R3)+,R0		; get count byte
	CMPL	#13,R0			; does it fit?
	BLSSU	ERRBUG			; nope, that's an error
	ADDB3	#2,R0,(R1)+		; add in two byte unit number
10$:	MOVB	(R3)+,(R1)+		; move in the device name string
	SOBGTR	R0,10$			; and loop until done
	MOVW	DIB$W_UNIT(R2),(R1)+	; move in unit number
	POPR	#^M<R0,R1,R3>		; restore work registers

;
;  Move primary characteristics (i.e., those for assigned device) to IFAB.
;

	MOVL	DIB$L_DEVCHAR(R2),IFB$L_PRIM_DEV(R9); characteristics bits
	MOVW	DIB$W_DEVBUFSIZ(R2),IFB$W_DEVBUFSIZ(R9); buffer size

;
; Deal with FOREIGN devices in a separate code section.  They all allow ANSI-"a"
; names, so don't worry about checking them.
;

	BBS	#DEV$V_FOR,IFB$L_PRIM_DEV(R9),FOREIGN ; branch if dev mntd foreign
	BBS	#FAB$V_NFS+FOP,(R8),FOREIGN ; branch if non-file-struct.
	BBS	#DEV$V_SQD,IFB$L_PRIM_DEV(R9),5$ ; branch if magtape
	BBC	#DEV$V_DIR,IFB$L_PRIM_DEV(R9),5$ ; branch if not dir device
;
; At this point we are sure that we are not using an ANSI magtape device.
; Check to see if we have an ANSI quoted string in the FWA, denoted by
; FWA$V_QUOTED set and FWA$V_NODE not set.
;

3$:	BBC	#FWA$V_QUOTED,(R10),5$		; quoted not set
	BBS	#FWA$V_NODE,(R10),5$		; networking, no problem
	BRW	ERRFNM				; error in file name

5$:	RSB				; exit


;
; User has requested non-file-structured operations (via the nfs fop bit)
; or device was mounted foreign.
;
; Clear the 'dir" and 'sdi' device characteristics (directory, single directory)
; and set the 'for' device characteristic (foreign) and set up various other
; file attributes.
;

FOREIGN:
	$PSECT_BR	L$RMS0
	BICB2	#DEV$M_DIR!DEV$M_SDI,IFB$L_PRIM_DEV(R9); say no directory
	SSB	#DEV$V_FOR,IFB$L_PRIM_DEV(R9); say foreign device
	BBC	#DEV$V_SQD,IFB$L_PRIM_DEV(R9),CHKRND; branch if not magtape
	MOVW	DIB$W_RECSIZ(R2),R1	; fixed recsize from mount
	BEQL	SETREC			; branch if not speced
	BBC	#IFB$V_CREATE,(R9),10$	; branch if doing open

;
;  This is create.  Only allow blocking if rfm=fix and mrs = recordsize.
;

	CMPB	FAB$B_RFM(R8),#FAB$C_FIX; rfm = fix?
	BNEQ	SETREC			; branch if not
	CMPW	FAB$W_MRS(R8),R1	; same size?
	BNEQ	SETREC			; branch if not
10$:	MOVW	R1,IFB$W_MRS(R9)	; set fixed rec size from
					; mount parameter.
	BICB2	#DEV$M_REC,IFB$L_PRIM_DEV(R9); clear 'unit rec' char.
	BRB	SETFIX			; go set fixed record length
CHKRND:	BBC	#DEV$V_RND,IFB$L_PRIM_DEV(R9),SETREC; branch if not disk
	MOVW	IFB$W_DEVBUFSIZ(R9),IFB$W_MRS(R9); say fixed 512 records
	MNEGL	#2,IFB$L_EBK(R9)	; say large eof blk
					; (RM1CREATE increments this)
	MNEGL	#1,IFB$L_HBK(R9)	; say large allocation
SETFIX:	MOVB	#FAB$C_FIX,IFB$B_RFMORG(R9); say fixed records len.
	MOVW	IFB$W_MRS(R9),IFB$W_LRL(R9); set fixed rec len.
	BRB	EXIT			; continue
SETREC:	BISB2	#DEV$M_REC,IFB$L_PRIM_DEV(R9); say mt is unit rec
EXIT:	BBS	#IFB$V_BIO,IFB$B_FAC(R9),10$; branch if block i/o
	SSB	#IFB$V_BRO,IFB$B_FAC(R9); allow block i/o functions
10$:	RSB
	$PSECT_RESTORE


;
;  Process-Permanent File  -  check device characteristcs for terminal
;  and if so reassign the channel in super mode.
;
;  Also reset device characteristics to indicate get/put access
;  via dev.
;

DIRECTPPF:
	$PSECT_BR	F$RMSOPEN0PPF
	BBC	#DEV$V_TRM,IFB$L_PRIM_DEV(R9),SETDEV

;
;  Process permanent file is a terminal  -  reassign channel in super mode
;  retain the exec mode channel until we have a super mode channel,
;  so that the virtual terminal ucb will not disappear.  This,
;  unfortunately, has the property that the user can get a spurious
;  no more channels error.
;

	MOVW	IFB$W_CHNL(R9),R2	; save exec channel number
	$ASSIGN_S	-
		FWA$Q_DEVICE(R10),IFB$W_CHNL(R9),-
		#PSL$C_SUPER
	MOVL	R0,R3			; preserve assign status code
	$DASSGN_S	R2		; return the exec mode channel
	BLBC	R3,ERRASGN1		; get out on error

;
; Assume no change in dev chars; hence no need to reprocess.
;
;  If FAB$V_GET not set in fac, clear DEV$V_IDV.
;  If FAB$V_PUT not set in fac, clear DEV$V_ODV.
;

SETDEV:	BBS	#FAB$V_GET,IFB$B_FAC(R9),10$; branch if 'get' on
	CSB	#DEV$V_IDV,IFB$L_AS_DEV(R9)

	ASSUME	FAB$V_PUT EQ 0

10$:	BLBS	IFB$B_FAC(R9),20$	; branch if 'put' on
	CSB	#DEV$V_ODV,IFB$L_AS_DEV(R9)
20$:	BRW	RM$SETFIB		; return to main line

;
;  Handle assign error.
;

ERRASGN1:
	BRW	ERRASGN			; extended branch
	$PSECT_RESTORE


;
;  Handle errors.
;

ERRASGN:
	$PSECT_BR	L$RMS0

;
;  Entry point from RMS$SEARCH.
;

RM$ERRASGN::

	RMSERR	CHN,R1			; unspecified chnl assgn failure
	BRW	RM$MAPERR		; map error and return to caller
	$PSECT_RESTORE

;
;  Error from get channel characteristics  -  should never occur.
;

ERRBUG:	RMSTBUG	FTL$_GTCHNFAIL


;
;  Handle indirect open of process permanent file.
;
;  Perform various checks to see if operation possible.
;
;  (Note: This routine has the side effect of turning a $CREATE
;	on an inidrect process permanent file into an $OPEN)
;

INDPPF:
	$PSECT_BR	F$RMSOPEN0IPPF
	$TSTPT	INDPPF

	ASSUME	FAB$V_UFO GE 16
	ASSUME	FAB$V_NFS GE 16

;
; Check for various invalid options.
;

	BITB	#<FAB$M_UFO!FAB$M_NFS>@-16,FAB$L_FOP+2(R8)
	BNEQ	ERRFOP			; branch if any specified
	TSTB	FWA$B_ESCTYP(R10)	; escape type 0?
	BNEQ	ERRLNE			; branch if not (not legal)
	CMPZV	#14,#2,FWA$W_ESCIFI(R10),#^B10; escape ifi indicate a ppf?
	BNEQ	ERRLNE			; branch if not

;
;  Get address of process permanent file IFAB and check it out.
;

	MOVL	R9,R7			; save ifab addr

	ASSUME	FAB$V_PPF_IND GE 8

	BISB2	#FAB$M_PPF_IND@-8,FWA$W_ESCIFI+1(R10); get non-privileged ppf ifi
	MOVZWL	FWA$W_ESCIFI(R10),R9	; and move it to r9
	MOVL	#IMP$L_IFABTBL/4,R0	; ifab table offset/4
	PUSHL	R11			; save impure area pointer
	BSBW	RM$GTIADR		; get ifab address
	POPR	#^M<R11>		; restore image i/o impure addr
	BEQL	ERRIFI			; branch if no ppf ifab


	.IF	NE $$RMSTEST&$$RMS_TBUGCHK

	CMPB	IFB$B_BID(R9),#IFB$C_BID; is it an ifab?
	BNEQ	ERRBG3			; really bad if not!

	.ENDC


;
;  Got ppf IFAB o.k.
;
;  Insure org is sequential and rfm is not UDF
;  (Note: User fac is ignored.  Each operation will be checked.)
;

	ASSUME	FAB$C_SEQ EQ 0

	TSTB	IFB$B_ORGCASE(R9)	; seq file org?
	BNEQ	ERRORG			; branch if not (not supported)

	ASSUME	FAB$C_UDF EQ 0

	TSTB	IFB$B_RFMORG(R9)	; undefined format?
	BEQL	ERRRFM			; branch if so (not supported)

;
;  Check for valid rat value: must be only one of cr, ftn, or prn.
;  If prn set in rat must also be set for real file.
;

;
; Isolate carriage control bits
;

	BICB3	#255 \ <FAB$M_CR!FAB$M_FTN!FAB$M_PRN>,FAB$B_RAT(R8),R1
	BEQL	10$			; branch if none specified
	BBC	#FAB$V_PRN,R1,5$	; branch if not prn
	BBC	#FAB$V_PRN,IFB$B_RAT(R9),ERRRAT; branch if ppf not prn
5$:
	ASSUME	FAB$V_FTN EQ FAB$V_CR-1
	ASSUME	FAB$V_CR EQ FAB$V_PRN-1

	FFS	#FAB$V_FTN,#3,R1,R0	; find first carriage ctl bit
	CSB	R0,R1			; turn it off
	TSTB	R1			; should be no others set
	BNEQ	ERRRAT			; branch if other(s) set

;
;  Check for ppf IFAB busy setting busy if not in use.
;

10$:	BBCS	#IFB$V_BUSY,(R9),IND_PPF_OK; branch if not busy


ERRFOP:	$PSECT_BR	L$RMS0
	RMSERR	FOP			; invalid fop bits for ppf
	RSB
	$PSECT_RESTORE


ERRFNM:	$PSECT_BR	L$RMS0
	RMSERR	FNM			; error in file name
	RSB
	$PSECT_RESTORE


ERRLNE:	$PSECT_BR	L$RMS0
	RMSERR	LNE			; invalid equivalence string
	RSB
	$PSECT_RESTORE


ERRBG3:	RMSTBUG	FTL$_BADIFAB		; invalid ifab


ERRIFI:	$PSECT_BR	L$RMS0
	RMSERR	IFI			; invalid equiv. string ifi
	BRB	RESTORE_IFAB
	$PSECT_RESTORE


ERRORG:	$PSECT_BR	L$RMS0
	RMSERR	ORG			; ppf not sequential org
	BRB	RESTORE_IFAB
	$PSECT_RESTORE


ERRRFM:	$PSECT_BR	L$RMS0
	RMSERR	RFM			; ppf UDF format
	BRB	RESTORE_IFAB
	$PSECT_RESTORE


ERRRAT:	$PSECT_BR	L$RMS0
	RMSERR	RAT			; bad rat value
RESTORE_IFAB:
	MOVL	R7,R9			; restore temp. ifab addr
	RSB				; go handle error
	$PSECT_RESTORE


ERRNAM:	$PSECT_BR	L$RMS0
	POPR	#^M<R1>			; get ppf ifab addr
	CSB	#IFB$V_BUSY,(R1)	; clear busy
	RSB				; go clean up
	$PSECT_RESTORE


;
;  The indirect open of the process permanent file is permissable.
;  switch to using the ppf IFAB for the remainder of this open.
;
;  Must perform the following:
;
;	1. Set ppf_image bit.
;	2. Copy caller's mode and arg list address to the ppf ifab.
;	   (Note: there will be no asb because no stall can have occurred.)
;	3. Return the temporary ifab including bdb and buffer.
;	4. Zero the ifi table entry to temporary ifab.
;	5. Move address of pio impure area to r11 and copy saved sp
;	   to pio impure area.
;

IND_PPF_OK:
	SSB	#IFB$V_PPF_IMAGE,(R9)	; indicate indirect processing
					;  of ppf
	MOVB	IFB$B_MODE(R7),IFB$B_MODE(R9); save caller's mode
	MOVL	IFB$L_ARGLST(R7),IFB$L_ARGLST(R9); and arg list addr
	PUSHL	R9			; save ppf ifab addr

;
;  Fill in name block, if any, with resultant string and dvi.
;

	MOVL	R7,R9			; restore temp ifab addr
	BSBW	RM$FILLNAM		; fill in nam blk if any
	BLBC	R0,ERRNAM		; branch on error
	MOVW	FWA$W_ESCIFI(R10),AP	; save ifi code
	BSBW	RM$RET1STBDB		; return bdb and i/o buff
	MOVQ	R9,R3			; ifab addr to r3,r4 for retblk
	BSBW	RM$RETBLK		; deallocate ifab
	MOVL	R9,R4			; ifab page addr
	BSBW	RM$RET1PAG		; return it
	BSBW	RM$ZAPIFI		; zero ifab table entry
	MOVL	(SP)+,R9		; restore ppf ifab addr
	MOVL	R9,R10			; copy to r10

;
; Copy saved sp value.
;

	MOVL	IMP$L_SAVED_SP(R11),@#PIO$GW_PIOIMPA+IMP$L_SAVED_SP
	MOVAW	@#PIO$GW_PIOIMPA,R11	; get pio impure area addr

;
;  Output the new ifi value and bls field to fab.
;

	MOVW	IFB$W_ASDEVBSIZ(R9),FAB$W_BLS(R8); default buffer size
	POPR	#^M<R0>			; pop return pc

;
;  If user specified stream format but RAT=0, force RAT=CR 
;  to get proper output.
;

	CMPB	FAB$B_RFM(R8),#FAB$C_STM ; user specified stream format?
	BLSSU	5$			; branch if not
	BITB	#<FAB$M_CR!FAB$M_CR!FAB$M_PRN>,-
		FAB$B_RAT(R8)		; user specified RAT?
	BNEQ	5$			; branch if so
	SSB	#FAB$V_CR,FAB$B_RAT(R8) ; force RAT=CR
5$:	INSV	FAB$B_RAT(R8),#FAB$V_PPF_RAT,#FAB$S_PPF_RAT,AP; save rat in ifi
	MOVW	AP,FAB$W_IFI(R8)	; construct non-priv. ifi
;
;  If this is a unit record device and the user has not specified
;  print file carriage control, return rfm=var and don't change the
;  user's rat field.
;

	ASSUME	DEV$V_REC EQ 0

	BLBS	IFB$L_PRIM_DEV(R9),20$	; branch if unit record
10$:	BRW	RM$COPRTN1		; go finish up open
20$:	BBS	#FAB$V_PRN+FAB$V_PPF_RAT,AP,10$; branch if user specifed
					; print file carriage ctl.
	MOVB	#FAB$C_VAR,FAB$B_RFM(R8); change rfm to var
	BRW	RM$COPRTN2		; finish up open without
					;  altering user's rat

	$PSECT_RESTORE


	.END
