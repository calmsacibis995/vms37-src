	$BEGIN	RM3FACE,001,$RMS$3,<INTERFACE BETWEEN BLISS AND MARS>,<NOWRT,PIC,LONG>

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
;
; Facility:	RMS32 INDEX SEQUENTIAL FILE ORGANIZATION
;
; Abstract:
;
;		This is a bunch of interface routines between
;		rms-32 written in mars and rms-32 isam in bliss.
;
; Environment:
;
;		VAX/VMS OPERATING SYSTEM
;
;
; Author: W. Koenig     creation date: 4-APR-1978
;
; MODIFIED BY:
;
;	V03-001 LJA0007		Laurie Anderson 	25-Mar-1982
;		Change KBUFSZ to reference a macro when computing buffer 
;		size and make IFB$B_KBUFSZ a word, now: IFB$W_KBUFSZ.
;
;	V02-013	CDS0004		C Saether		 9-Jan-1982
;		JSB to RM3CREATE.
;
;	V02-012	MCN0006		Maria del C. Nasr	23-Jul-1981
;		Increase size of record id in the NRP to a word.
;		Also add $FABDEF.
;
;	V02-011 PSK0002		P S Knibbe	12-Jan-1980
;		ifab is in r10 in rm$alloc3, not r9
;
;	V02-010	CDS0003		C D Saether	26-Aug-1980	17:05
;		fix v006 (reverse sense of test)
;
;	V02-009 PSK0001		P S Knibbe	26-Aug-1980	17:00
;		fix incorrect register designation in RM$ALLOC3
;
;	V02-008	REFORMAT	C D Saether	01-Aug-1980	17:20
;
;	V007	CDS0002		C D Saether	13-MAR-1980
;		change psect name to fix broken branch elsewhere
;
;	V006	RAS0002		R A Schaefer	27-NOV-1979	09:30
;		allow creation on any device (i.e. magtape) if bio access.
;
;	V005	WSK0001		W Koenig	13-FEB-1979	13:00
;		clear puts_last bit wherever it's supposed to be
;
;	V004	CDS0001		C Saether	11-FEB-1979	19:00
;		move record unlocking logic here from putupd and puterr
;
;	V003	WSK0001		W Koenig	5-FEB-1979
;	on error after conn, call rm$ex_nirab_shr instead of rm$ex_nostr
;
; Revision history:
;
;	d. h. gillespie (add create interface routine, cleanup error code in open)
;	w. koenig changed connect interface
;	w. koenig 25-OCT-1978 rewind must check for bio
;
;--

;
; Include Files:
;
;	[11,20]lib.mlb and [201,10]r.mlb
;
; Macros:
;

	$RMSDEF
	$DEVDEF
	$BDBDEF
	$RLSDEF
	$RABDEF
	$IRBDEF
	$IFBDEF
	$FIBDEF
	$NRPDEF
	$FABDEF

	.LIST	ME
	$AREADEF
	.NLIST	ME

;
; Equated Symbols:
;
;
; Own Storage:
;



;++
;
; RM$OPEN3 - interfaces between rms0open and rm3open
;
; Calling sequence:
;	entered via a case statement (branch) from rm$open
;
; Input Parameters:
;	none
;
; Implicit Inputs:
;	none
;
; Output Parameters:
;	none
;
; Implicit Outputs:
;	none
;
; Routine Value:
;	none
;
; Side Effects:
;	just passing through
;
;--

RM$OPEN3::
	BSBW	RM$OPEN3B
	BLBS	R0,10$
	PUSHL	R0
	BSBW	RM$CLOSE3
	POPL	R0
10$:	BRW	RM$COPRTN



;++
;
; RM$CONNECT3 - interfaces between rms0connect and rm3connect
;
; Calling sequence:
;	entered via a case statement (branch) from rms$connect
;
; Input Parameters:
;	none
;
; Implicit Inputs:
;	none
;
; Output Parameters:
;	none
;
; Implicit Outputs:
;	none
;
; Routine Value:
;	none
;
; Side Effects:
;	just passing through
;
;--

RM$CONNECT3::
	BSBW	RM$CONNECT3B
	BLBC	R0,1$
	BRW	RM$EXSUC		; exit w/ success
1$:	BRW	RM$EX_NIRAB_SHR		; exit on error



;++
;
; RM$DISCONNECT3 - interfaces between rms0disconnect and rm3disconnect
;
; Calling sequence:
;	entered via a case statement (branch) from rms$disconnect
;
; Input Parameters:
;	none
;
; Implicit Inputs:
;	none
;
; Output Parameters:
;	none
;
; Implicit Outputs:
;	none
;
; Routine Value:
;	none
;
; Side Effects:
;	just passing through
;
;--

RM$DISCONNECT3::
	BSBW	RM$DISCONNECT3B
	BRW	RM$DISCOMMON		; branch to common code to finish up



;++
;
; RM$GET3 - interface to RM$GET3B
; RM$FIND3 - interface to RM$GET3B for find operation
;
; Calling sequence:
;	entered via a case statement (branch) from rms$get (find)
;
; Input Parameters:
;	none
;
; Implicit Inputs:
;	none
;
; Output Parameters:
;	none
;
; Implicit Outputs:
;	none
;
; Routine Value:
;	none
;
; Side Effects:
;	just passing through
;
;--

RM$GET3::
	CLRW	RAB$W_RSZ(R8)		; init record size
RM$FIND3::
	BBSC	#IRB$V_PUTS_LAST,(R9),10$ ; clear the last operation
					; was a put sequential flag.
					; this should also be done for the
					; update,delete, and rewind operations
10$:	BSBW	RM$GET3B		; get/find the record
	BRW	RM$EXRMS		; and exit rms



;++
;
; RM$PUT3 - interfaces between rms0put and rm3put
;
; Calling sequence:
;	entered via a case statement (branch) from rms$put
;
; Input Parameters:
;	none
;
; Implicit Inputs:
;	none
;
; Output Parameters:
;	none
;
; Implicit Outputs:
;	none
;
; Routine Value:
;	none
;
; Side Effects:
;	just passing through
;
;--

RM$PUT3::
	BSBW	RM$PUT3B		; put the record
	PUSHL	R0			; save status
	MOVL	IRB$L_NRP_PTR(R9),R4	; pointer to nrp list in r4
	BLBC	R0,UNLOCK		; always unlock on errors
	BBS	#RAB$V_ULK,RAB$L_ROP(R8),PUF; don't unlock if manual unlock
UNLOCK:
	MOVL	NRP$L_RP_VBN(R4),R1	; get vbn
	BEQL	PUF1			; no current record, don't unlock
	MOVZWL	NRP$W_RP_ID(R4),R2	; set up id for unlock
	BSBW	RM$UNLOCK		; unlock the record (ignore errors,
					; record maybe not locked)
PUF:
	CLRL	NRP$L_RP_VBN(R4)	; zero current record always
PUF1:	CLRW	NRP$W_RP_ID(R4)
	POPR	#^M<R0>			; restore status
	BRW	RM$EXRMS		; and exit



;++
;
; RM$UPDATE3 - interfaces between rms0update and rm3update
;
; Calling sequence:
;	entered via a case statement (branch) from rms$update
;
; Input Parameters:
;	none
;
; Implicit Inputs:
;	none
;
; Output Parameters:
;	none
;
; Implicit Outputs:
;	none
;
; Routine Value:
;	none
;
; Side Effects:
;	just passing through
;
;--

RM$UPDATE3::
	BBSS	#IRB$V_UPDATE,(R9),1$	; set the update bit
1$:
	BBSC	#IRB$V_PUTS_LAST,(R9),10$ ; clear the last operation
					; was a put sequential flag.
10$:	BSBW	RM$UPDATE3B		; update the record
	PUSHL	R0			; save status
	MOVL	IRB$L_NRP_PTR(R9),R4	; nrp pointer into r4
	BBSC	#IRB$V_UNLOCK_RP,(R9),UNLOCK ; unlock record if necc
	BRW	PUF			; otherwise zero rp and exit


;++
;
; RM$CREATE3 - interfaces between rms0create and rm3create
;
; Calling sequence:
;	entered via a case statement (branch) from rm$create;
; Input Parameters:
;	none
;
; Implicit Inputs:
;	none
;
; Output Parameters:
;	none
;
; Implicit Outputs:
;	none
;
; Routine Value:
;	none
;
; Side Effects:
;	just passing through
;
;--

RM$CREATE3::

;
; do random device test here where the device characteristics bits can be defined
;

	BBS	#IFB$V_BIO,-
		IFB$B_FAC(R9),4$	; any device is ok for bio access
	BBC	#DEV$V_RND,-
		IFB$L_PRIM_DEV(R9),20$
4$:	CLRL	IFB$L_IDX_PTR(R9)	; clear pointer to index(may not be done yet)
	JSB	RM$CREATE3B
	BBC	#FAB$V_CIF,FAB$L_FOP(R8),5$
	CMPL	#1,R0			; cif and normal = open
	BEQL	30$
5$:	PUSHL	R0
	BLBS	R0,10$
	MOVL	R9,R10			; setup shared ifab for return of space in close
	BSBW	RM$CLOSE3		; give back key descriptors
10$:	BRW	RM$CREATEXIT1
20$:	RMSERR	DEV
	BRW	RM$CLSCU
30$:	BRW	RM$OPEN_CIF

;++
;
; RM$ALLOC3 - this routine is a bliss/mars interface.  called from rm3allbkt.
;
; Calling sequence:
;	rm$alloc3()
;
; Input Parameters:
;	r7 - address of area descriptor
;	r10 - address of internal fab
;
; Implicit Inputs:
;	none
;
; Output Parameters:
;	r1 - start vbn
;	r2 - vbn plus one of last vbn allocated
;
; Implicit Outputs:
;	none
;
; Routine Value:
;	none
;
; Side Effects:
;	none
;
;--

RM$ALLOC3::
	PUSHR	#^M<R3,R4,R5,R6>	; save registers that are clobbered by extend

;
; allocate a fib to do extend
;

	MOVL	#FIB$C_ALCDATA,R2	; size of fib
	BSBW	RM$GETSPC1		; get space for fib
	BLBC	R0,20$			; if error, get out

;
; if the deq(area_desc) is zero then default to the higher of rtde(ifab) and
; arbktsz(area_desc).  in any case, allocate an even number of buckets.
;

	MOVZBL	AREA$B_ARBKTSZ(R7),R0	; # of vbn's to a bucket
	MOVZWL	AREA$W_DEQ(R7),R2	; area's default extend quantity
	BNEQ	10$			; if it doesn't exists,
	MOVZWL	IFB$W_RTDEQ(R10),R2	; use default run time quantity instead
10$:	CMPL	R2,R0			; compare extend quantity to bucket size
	BGEQU	15$			; if less than one bucket
	MOVL	R0,R2			; use bucket size as extend quntity
15$:	CLRL	R3			; quotient is quad word
	EDIV	R0,R2,AP,R3		; check if extend quantity is even multiple of bucket size
	TSTL	R3			; if remainder is non_zero,
	BEQL	18$			; then not even multiple
	SUBL2	R3,R0			; calc number to add to reach even multiple
	ADDL2	R0,R2			; make extend quantity even multiple
18$:	MOVL	R2,FIB$L_EXSZ(R1)	; store quantity in fib
	MOVL	AREA$L_CVBN(R7),FIB$L_LOC_ADDR(R1) ; locate extend near last one
	BSBW	RM$EXTEND0_ALT		; do extend
	MOVL	R6,R2			; change output register
20$:	POPR	#^M<R3,R4,R5,R6>
	RSB




;++
;
; RM$ISUMO3 - interface xab_scan to the routine which processes the summary xab.
;
;--

RM$ISUMO3::
	MOVL	AP,R2			; save ap
	BSBW	RM$XSUMO3
ISUM10:	BLBS	R0,ISUM20
	MOVL	R3,FAB$L_STV(R8)
	TSTL	(SP)+
ISUM20:	MOVL	R2,AP			; restore ap
	RSB

;++
;
; RM$IKEYO3 - interface xab_scan to the routine which processes the key xab.
;--

RM$IKEYO3::
	MOVL	AP,R2			; save ap
	BSBW	RM$XKEYO3
	BRB	ISUM10

;++
;
; RM$IALLO3 - interface xab_scan to the routine which processes the
;	allocation xab's for index seq files.
;--

RM$IALLO3::
	MOVL	AP,R2			; save ap
	BSBW	RM$XALLO3
	BRB	ISUM10

;++
;
; RM$DELETE3 - this routine interfaces common delete
;	with delete for indexed file org
;
;--

RM$DELETE3::
	BBSC	#IRB$V_PUTS_LAST,(R9),10$ ; clear the last operation
					; was a put sequential flag.
10$:	BSBW	RM$DELETE3B
	MOVL	IRB$L_NRP_PTR(R9),R1
	CLRL	NRP$L_RP_VBN(R1)
	CLRW	NRP$W_RP_ID(R1)
	CLRL	RAB$W_RFA(R8)
	CLRW	RAB$W_RFA+4(R8)
	BRW	RM$EXRMS

;++
;
; RM$REWIND3 - isam rewind
;
;	this routine does the indexed specific code for a rewind
;		but it was just too small and much easier in mars
;		for it to go into another module
;--

RM$REWIND3::
	BBSC	#IRB$V_PUTS_LAST,(R9),5$ ; clear the last operation
					; was a put sequential flag.
5$:	BBC	#IFB$V_BIO,IFB$B_FAC(R10),10$ ; branch if not block i/o
	MOVL	#1,IRB$L_NRP_VBN(R9)
	RSB				; all done if block i/o
	ASSUME	NRP$W_ID EQ NRP$L_VBN+4
	ASSUME	NRP$W_RP_ID EQ NRP$L_RP_VBN+4
10$:	MOVL	IRB$L_NRP_PTR(R9),R0
	CLRQ	NRP$L_VBN(R0)
	CLRQ	NRP$L_RP_VBN(R0)
	MOVB	RAB$B_KRF(R8),IRB$B_NRP_KREF(R9)

;
; zero out keybuffers 1 and 2
;

	MOVZWL	IFB$W_KBUFSZ(R10),R0
	ASHL	#1,R0,R0
	MOVC5	#0,(SP),#0,R0,@IRB$L_KEYBUF(R9)
	RSB


;++
;
; RM$EXTEND3 - extend for isam files
;
; input:
;	r3	- address of fab/xab
;	r5 	- extend quantity
;	r6	- 0 if no xab otherwise xab address
; output:
;
;--

RM$EXTEND3::
	PUSHR	#^M<R3>			; push fab/xab addr since clobbered by rm$extend0
	CLRL	-(SP)			; area zero is default
	TSTL	R6			; is there an xab
	BEQL	10$			; if not use area default
	MOVL	XAB$B_AID(R3),(SP)	; pickup area out of xab

10$:	BSBW	RM$LOCK_AREA		; returns bdb=r4, area_desc=r7
	MOVL	(SP)+,FAB$L_STV(R8)	; save level for next error check
	BLBC	R0,50$			; if errors, get out
	MOVL	(SP),R3			; restore fab/xab address
	PUSHL	R4			; save bdb

	TSTL	AREA$L_NXT(R7)		; check if next extent is undefined
	BNEQ	30$			; if not, error
	CLRL	FAB$L_STV(R8)		; no stv value
	BSBW	RM$EXTEND0		; do extend, clobbers r4
	BLBC	R0,40$			; check for errors and get out
	MOVL	R6,IFB$L_EBK(R9)	; update eof
	BSBW	RM$UPD_SIFB_EOF		; update eof in s_ifab

	MOVL	4(SP),R3		; restore fab/xab address
	SUBL3	R1,R6,FAB$L_ALQ(R3)	; calc number of blocks in extent
	ADDL2	FAB$L_ALQ(R3),FAB$L_STV(R8) ; accumulate in fab
	MOVL	R1,AREA$L_NXT(R7)	; save start vbn
	MOVL	FAB$L_ALQ(R3),AREA$L_NXBLK(R7) ; remember # of blocks in extent

	POPL	R4			; restore bdb of area prologue vbn
	MOVL	BDB$L_ADDR(R4),R5	; pickup address of area descriptor
	BSBW	RM$MAKSUM		; calc check sum
	BISB2	#3,BDB$B_FLGS(R4)	; set valid and dirty
	MOVL	#RLS$M_WRT_THRU,R3	; write it out
	BSBW	RM$RELEASE
20$:	POPL	R3
	RSB
30$:	RMSERR	LEX			; set error code for next extend already exists
40$:	POPL	R4
	PUSHL	R0
	CLRL	R3			; just release
	BSBW	RM$RELEASE		; do it
	POPL	R0			; pickup saved error code
	BRB	20$
50$:	MOVL	(SP),FAB$L_STV(R8)	; stv value for error is fab/xab
	BRB	20$
	.END
