	$BEGIN	RMS0CLOSE,001,F$RMSCLOSE0,<DISPATCH FOR CLOSE OPERATION>


;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
; Facility: rms32
;
; Abstract:
;		this module is the highest level control routine
;		to perform the $close function.
;
; Environment:
;		star processor running starlet exec.
;
; Author: L F Laverdure,	 creation date: 1-MAR-1977
;
; Modified By:
;
;	V03-001	CDS0005		C Saether		 2-Apr-1982
;		Unconditionally clear FRB$V_KRNLMODE flag in FRB
;		after releasing sifab to account for it being set
;		now in rms0lstch.
;
;	V02-053	CDS0004		C Saether		11-Feb-1982
;		Decrement SIFB$W_GBREF count when global buffers
;		are unmapped.
;
;	V02-052	KPL0011		P Lieberwirth		20-Jan-1982
;		Remove fatal bugcheck that occurs on DEQ failure of
;		shared file lock.  On some error paths an SFSB may
;		have been allocated but no lock made.
;
;	V02-051	CDS0003		C Saether		18-Jan-1982
;		Return GBPB's and deallocate global section if any.
;
;	V02-050	JWH0001		Jeffrey W. Horn		 4-Jan-1982
;		Deallocate NWA before IFAB ASB, in case NT$NWA_FREE
;		stalls.  Also clear IFB$L_ASBADDR after deallocating
;		ASB.
;
;	V02-049	CDS0002		C D Saether		 4-Sep-1981
;		Always clear AVLCL before NORECLK test.
;
;	V02-048	CDS0001		C D Saether		20-Aug-1981
;		Reference BDB$W_USERS instead of BDB$B_USECNT.
;
;	V02-047	KPL0010		Peter Lieberwirth	 3-Aug-1981
;		Move RLBs to a list off the IRAB instead of the IFAB.
;		This makes multi-streaming code much easier.
;
;	V02-046	KPL0009		Peter Lieberwirth	29-Jul-1981
;		Rename entry point to $$ form so we can get here via
;		RMS0BRNCH.
;
;	V02-045	KPL0008		Peter Lieberwirth	14-Jul-1981
;		Fix a bug in v02-044 relating to deallocation of sfsb on UFO.
;
;	V02-044	KPL0007		Peter Lieberwirth	28-Apr-1981
;		Deallocate the SFSB, if it exists.
;
;	V02-043	JAK0058		J A Krycka	03-JUN-1981
;		Replace inline code with call to NT$NWA_FREE.
;
;	V02-042	REFORMAT	C Saether	30-Jul-1980	23:37
;
;	V041	CDS0061		C Saether	6-Dec-1979	16:00
;		rename rm$releasall_alt to rm$releasal_alt so name
;		is not over 15 characters and map isn't so long
;
;	V040	PSK0001		P Knibbe	21-Nov-1979	13:00
;		change close to only write tape marks if at end of tape
;
;	V039	CDS0051		C Saether	1-Nov-1979	3:50
;		add entry point to releasall, reflect change in retbcb
;
;	V038			Tim Halvorsen	12-Sep-1979
;		make a subroutine out of the cleanup code in rm$clscu
;
;	V037	RAN0011		R A Newell	 9-Mar-1979	12:00
;		fix return page logic for pages which have not been
;		returned normally in file sharing.
;
;	V036	RAN0007		R A Newell	12-Feb-1978	09:30
;		kernel mode ast handling modifications
;
;	V035	RAN0003		R A Newell	6-Oct-1978	13:25
;		file sharing code enhancements
;
;--

	.SBTTL	DECLARATIONS

;
; Macros:
;

	$CMKRNLDEF			; cmkrnl definitions
	$IPLDEF				; interrupt priority definitions
	$IODEF				; io definitions
	$PSLDEF				; psl definitions
	$SFDDEF				; shared file data definitions
	$SIFBDEF			; shared ifab definitions
	$BLBDEF				; bucket lock block defs
	$RLBDEF				; record lock block defintions
	$FRBDEF				; file resource block definitions
	$IFBDEF
	$IMPDEF
	$FABDEF
	$DEVDEF
	$FIBDEF
	$NRPDEF				; next record pointer definitions
	$NAMDEF
	$IRBDEF
	$RABDEF
	$BDBDEF
	$RLSDEF
	$SFSBDEF			; shared file synchronization block
	$ENQDEF				; enq service definitions
	$GBHDEF
	$GBPBDEF

;
; Equated Symbols:
;

	FOP=FAB$L_FOP*8
	BKP=IRB$L_BKPBITS*8

;
; Own Storage:
;

	MASK	= ^X1FF			; mask for getting to page boundary

;

	.SBTTL	RMS$$CLOSE - $CLOSE ROUTINE

;++
; RMS$$CLOSE - highest level file close routine
;
;  this routine performs the highest level $close processing.
;  its functions include:
;
;	1. common setup
;	2. check for all streams idle, exiting if not
;	3. force a disconnect for all streams
;	4. dispatch to organization-dependent code
;	5. if the dlt fop bit is set and neither spl nor scf is set,
;	   delete the file
;	6. return all bdb's and buffers
;	7. deaccess the file if accessed
;	8. return the asb and nwa (if any), the ifab, and all pages used for
;	   rms internal structures for this file
;	9. zero the ifab table pointer and fab$w_ifi
;	10. exit to the user, generating an ast if requested
;
;
; Calling sequence:
;
;	entered from exec as a result of user's calling sys$close
;	(e.g., by using the $close macro).
;
; Input Parameters:
;
;	ap	user's argument list addr
;
; Implicit Inputs:
;
;	the contents of the fab and possible related user interface
;	blocks.
;
; Output Parameters:
;
;	r0	status code
;	r1	destroyed
;
; Implicit Outputs:
;
;	the ifab and all related internal rms structures are vaporized.
;	fab$l_sts and fab$l_stv are output and fab$w_ifi is zeroed if the
;	close was successful.
;
;	a completion ast is queued if so specified by the user.
;
; Completion Codes:
;
;	standard rms (see functional spec for list).
;
; Side Effects:
;
;	none
;
;--

	$ENTRY	RMS$$CLOSE
	$TSTPT	CLOSE
	BSBW	RM$FSET			; do common setup
					; note: does not return on error
;++
;  force a disconnect on all streams
;

	PUSHL	#1			; status code to stack
	BRB	NXTIRAB			; go check if any irabs linked

;
;  do an effective bsb to the org-specific disconnect
;
;  note: this makes the fab look like a rab, but is of no consequence
;	since there are no rab inputs to the internal disconnect
;	and the only outputs are stv and isi (zeroed)
;

	ASSUME	RAB$L_STV EQ FAB$L_STV
	ASSUME	RAB$W_ISI EQ FAB$W_IFI
	ASSUME	RAB$C_BLN LE FAB$C_BLN	; (necessary for the re-probe on stall)

;
;  must clear the async operation bit to avoid arglist copy to asb, set busy,
;  and initialize ppf_image bit correctly
;--
;

NXTDISC:
	BICB	#<1@<IRB$V_ASYNC-BKP>>!<1@<IRB$V_PPF_IMAGE-BKP>>,IRB$L_BKPBITS(R9)
	SSB	#IRB$V_BUSY,(R9)	; say rab busy
	MOVB	R7,IRB$B_MODE(R9)	; set mode into irab
	BBC	#IFB$V_PPF_IMAGE,(R10),10$ ; branch unless indirect ppf
	SSB	#IRB$V_PPF_IMAGE,(R9)	; say irab accessed indirectly
10$:	PUSHR	#^M<R7,R9>		; save mode and irab addr
	PUSHAB	B^NXTRTN		; return pc to stack
	CASE	TYPE=B, SRC=IFB$B_ORGCASE(R10),-
	DISPLIST=<RM$DISCONNECT1,RM$DISCOMMONSUC,RM$DISCONNECT3>
	BRW	RM$DISCOMMONSUC		; handle unknown org (blk i/o)
NXTRTN:	POPR	#^M<R7,R9>		; restore mode and (deallocated irab addr
					; (link still valid)
	BBC	#IFB$V_PPF_IMAGE,(R10),10$ ; branch unless indirect ppf
	CSB	#IRB$V_BUSY,(R9)	; say irab not busy anymore
10$:	BLBS	R0,NXTIRAB		; branch if no error
	MOVL	R0,(SP)			; replace status code
NXTIRAB:
	ASSUME	IFB$L_IRAB_LNK EQ IRB$L_IRAB_LNK
	MOVL	IRB$L_IRAB_LNK(R9),R9	; get next irab

;
;*****
; note: the next irab link must still be good even though previous irab
;	is deallocated, since nothing else could have re-used the space.
;****
;

	BNEQ	NXTDISC			; loop if more irabs
	MOVL	R10,R9			; restore ifab address

;++
;
;  get or of fab options that are input to either open/create or close
;
;--

	BBS	#IFB$V_PPF_IMAGE,(R9),10$ ; branch if indirect ppf
	ASSUME	FAB$V_RWC+1 EQ FAB$V_DMO
	ASSUME	FAB$V_DMO+1 EQ FAB$V_SPL
	ASSUME	FAB$V_SPL+1 EQ FAB$V_SCF
	ASSUME	FAB$V_SCF+1 EQ FAB$V_DLT
	EXTZV	#FAB$V_RWC+FOP,#5,(R8),R1 ; get option bits from fab
	ASSUME	IFB$V_RWC+1 EQ IFB$V_DMO
	ASSUME	IFB$V_DMO+1 EQ IFB$V_SPL
	ASSUME	IFB$V_SPL+1 EQ IFB$V_SCF
	ASSUME	IFB$V_SCF+1 EQ IFB$V_DLT
	EXTZV	#IFB$V_RWC,#5,(R9),R0	; get saved ifab copies from $open
	BISB2	R1,R0			; or them together
	INSV	R0,#IFB$V_RWC,#5,(R9)	; and restore in ifab flags
10$:

;++
;
;  dispatch to organization-dependent close code
;
;  register state for dispatch:
;
;	r11	impure area address
;	r10	ifab address
;	r9	ifab address
;	r8	fab address
;	(sp)	return address
;	4(sp)	status code
;
;--

	PUSHAB	B^CLSDLT		; return pc to stack
	CASE	TYPE=B,SRC=IFB$B_ORGCASE(R9),-
	DISPLIST=<RM$NULL,RM$NULL,RM$CLOSE3> ; pick up correct routine
	TSTL	(SP)+			; remove return pc for other orgs


;++
;
;  return here from organization-dependent close routines
;
;--
;
; check for dlt fop bit set.
; if set and the spl and scf bits are clear, delete the file.
;
;--

CLSDLT:
	BBC	#IFB$V_DLT,(R9),CLSCU1	; branch if dlt not speced
	$PSECT_BR	F$RMSCLOSEOPTN

;
; if this is a network operation, do not process dlt option; it will be
; handled by network code during deaccess.
;

	BBS	#DEV$V_NET,IFB$L_PRIM_DEV(R9),CLSCU2 ; branch if network operation
	ASSUME	IFB$V_SCF EQ IFB$V_SPL+1
	CMPZV	#IFB$V_SPL,#2,(R9),#0	; spl and scf both 0?
	BNEQ	CLSCU2			; branch if not
	BBC	#DEV$V_RND,IFB$L_PRIM_DEV(R9),CLSCU2 ; ignore if not disk
	BBS	#DEV$V_FOR,IFB$L_PRIM_DEV(R9),CLSCU2 ; ignore if mntd foreign
	BBS	#IFB$V_PPF_IMAGE,(R9),CLSCU2 ; ignore if indirect ppf
	TSTL	FAB$L_NAM(R8)		; any nam blk?
	BEQL	BLDFIB			; branch if no namblk
	BSBB	CHKNAM			; check out namblk
	BLBC	R0,ERROR

;
;	build fib for delete
;

BLDFIB:	MOVL	#FIB$C_DIRDATA,R2	; size of fib
	BSBW	RM$GETSPC1		; allocate fib
	BLBC	R0,ERROR		; get out on error
	PUSHL	R1			; addr of fib
	PUSHL	#FIB$C_DIRDATA		; length
	TSTL	FAB$L_NAM(R8)		; is there a nam block?
	BEQL	DELETE			; branch if none
	BBS	#IFB$V_TMP,(R9),DELETE	; or if no directory entry
	SSB	#FIB$V_FINDFID,FIB$W_NMCTL(R1) ; indicate find via fid
					; (0 fid => current file)
	MOVW	NAM$W_DID(R7),FIB$W_DID(R1) ; set directory id
	MOVL	NAM$W_DID_SEQ(R7),FIB$W_DID_SEQ(R1) ;   "
DELETE:	MOVZWL	#<IO$_DELETE!IO$M_DELETE>,R0 ; set i/o func code
	BSBW	RM$FCPFNC_ALT1		; do the delete
	POPR	#^M<R2,R4>		; clean stack and get
					; fib len and addr
	BLBC	R0,ERRMKD		; branch on error
	BSBW	RM$RETSPC1		; return fib space
CLSCU2:	BRW	CLSCU1			; return to common close

	.SBTTL	RM$CLS_CHKNAM, CHECK NAM BLOCK VALIDITY

;++
; RM$CLS_CHKNAM - verify nam block
;
;	subroutine to verify nam blk
;		( note: this needs to be a subroutine because of the
;		way rm$chknamblk works, i.e. it pops a return pc and
;		returns to the previous caller)
;--

RM$CLS_CHKNAM::
CHKNAM:	MOVL	FAB$L_NAM(R8),R7	; get namblk addr
	BSBW	RM$CHKNAMBLK		; check goodness
					; note: returns to caller
					; if setdid in error
	MOVL	#1,R0			; show success
	RSB

;++
;
;  handle errors
;
;--

ERRMKD:	$PSECT_BR	L$RMS0		; delete failed
	RMSERR	MKD,(SP)		; replace error code
	MOVL	IFB$L_IOS(R9),FAB$L_STV(R8) ; return system error code
	BSBW	RM$RETSPC1		; return fib space
	BRW	CLSCU1			; finish close
	$PSECT_RESTORE

;
;  either bad nam blk or couldn't allocate fib
;

ERROR:	$PSECT_BR	L$RMS0
	POPR	#^M<R1>			; pop old status code
	BRW	RM$CLSCU		; go finish close
	$PSECT_RESTORE
	$PSECT_RESTORE
	.SBTTL	RM$CLSCU, CLEANUP IFAB AND EXIT RMS

;++
; RM$CLSCU - clean part of close operation for error paths
;
;  entry point to clean up on aborted $open or $create
;  or successful $erase,$parse or other control routine
;
;--

RM$CLSCU::
	PUSHL	R0			; save error code

;
;  close of indirectly opened process permanent file.
;  need merely zero the ifi field.
;

CLSCU1:	BBC	#IFB$V_PPF_IMAGE,(R9),20$ ; branch if not indirect ppf
	CLRW	FAB$W_IFI(R8)
	POPR	#^M<R0>			; restore status code
	BRW	RM$EXRMS		; all set

;
;	cleanup ifab and all associated structures
;

20$:	BSBB	RM$CLEANUP		; cleanup ifab and stuff
	BLBC	R0,30$			; branch if cleanup error
	POPL	R0
30$:	BRW	RM$EX_NOSTR		; and do structureless exit

	.SBTTL	RM$RETIFB, RETURN IFAB BUT LEAVE FILE OPEN

;++
; RM$RETIFB - evaporate internal structures but leave accessed
;
;  entry point to leave file open for user but remove all rms
;  knowledge of the file
;	r0 = status code
;--

RM$RETIFB::
	PUSHAB	B^5$			; return address from cleanup
	PUSHL	R0			; save status code
	BRW	RETIFB			; only return ifab, etc.
					; by jumping into cleanup
5$:	BRW	RM$EX_NOSTR		; exit from rms

	.SBTTL	RM$CLEANUP, CLEANUP IFAB AND ASSOCIATED STORAGE

;++
; RM$CLEANUP - deallocate internal structures
;
;	cleanup the ifab and its associated structures (bdb's, etc.)
;	if an access has been done, a deaccess is performed.  any
;	outstanding channels are deassigned.  the ifi entry in the
;	ifab table is deleted.
;
; inputs:
;
;	r9 = ifab address
;	r11 = impure area
;
; outputs:
;
;	r0 = status code
;	r7 = caller's access mode
;	ap = restored argument list pointer
;
;	(r7,ap are used as inputs to rm$ex_nostr)
;--
;

RM$CLEANUP::

;
;  preset status to be returned to caller
;

	PUSHL	#1			; preset status to return

;
;  return all buffers and bdb's
;

	BSBW	RM$RELEASALL

;
;  deaccess the file
;

DEACCESS:
	BBCC	#IFB$V_ACCESSED,(R9),10$ ; branch if file not accessed

;
; if this is a network operation, do not process scf and spl options by
; rm$close1; these will be handled by network code during deaccess.
;

	BBS	#DEV$V_NET,IFB$L_PRIM_DEV(R9),5$ ; branch if network operation
	ASSUME	FAB$C_SEQ EQ 0
	TSTB	IFB$B_ORGCASE(R9)	; sequential file org?
	BNEQ	5$			; branch if not
	BSBW	RM$CLOSE1		; check for spool or submit
	BRB	7$			; continue
5$:	BSBW	RM$DEACCESS		; do the deaccess
7$:	BLBS	R0,10$			; branch on success
	MOVL	R0,(SP)			; save error code

;
;

10$:	BBS	#DEV$V_SQD,IFB$L_PRIM_DEV(R9),CLSMAGTAP ; branch if magtape
	BBS	#DEV$V_MBX,IFB$L_PRIM_DEV(R9),CLSMLBX ; branch if mailbox
	BRB	DEASSIGN		; else go deassign chan

;
;   foreign magtape - write end of tape if ifb$v_eof is set
;			rewind if rwc (rewind on close) is set
;

CLSMAGTAP:
	BBC	#DEV$V_FOR,IFB$L_PRIM_DEV(R9),DEASSIGN ; branch if not foreign
	BSBW	RM$WTTAPMARK		; write tape marks
	BLBC	R0,DEASSIGN_ALT		; go away if error

	BBC	#IFB$V_RWC,(R9),DEASSIGN ; branch if no rewind
	PUSHR	#^M<R10>		; rewind wants ifab in r10
	MOVL	R9,R10			; r10 <- ifab
	BSBW	RM$REWIND_MT		; do rewind
	POPR	#^M<R10>		; restore r10
	BRB	DEASSIGN_ALT		; join mainstream

;
;   mail box - write end of file if write access was allowed
;

CLSMLBX:
	BBC	#IFB$V_WRTACC,(R9),DEASSIGN ; branch if no write
	BSBW	RM$WRITEOF		; write end of file

DEASSIGN_ALT:
	MOVL	R0,(SP)			; save status

;
;  deassign i/o channel
;

DEASSIGN:
	$DASSGN_S	IFB$W_CHNL(R9)

	BSBB	SFSB_FREE		; dequeue lock in SFSB and deallocate it


;
;  deacess for shared file
;

10$:	MOVL	IFB$L_FRB_PTR(R9),R1	; shared file? (yes if non-zero)
	BNEQ	RELBCB			; branch if shared file
	BRB	RETIFB			; continue


;++
;
; SFSB_FREE
;
; cleanup the SFSB, dequeuing the outstanding lock
;
;--

SFSB_FREE:				;
	MOVL	IFB$L_SFSB_PTR(R9),R4	; get address of SFSB
	BEQL	10$			; skip if none
					;
	$DEQ_S	LKID=SFSB$L_LOCK_ID(R4)	; dequeue the lock
					;
	BSBW	RM$RETBLK1		; deallocate the sfsb, address in r4
	CLRL	IFB$L_SFSB_PTR(R9)	; indicate that sfsb has evaporated
10$:	RSB				; return to caller


;
;  return the, ifab; also, the asb and nwa, if any
;

RETIFB:	BSBW	RM$DEALLEFN		; deallocate the efn for ifab
	MOVL	IFB$L_ARGLST(R9),AP	; restore arglist address
	MOVZBL	IFB$B_MODE(R9),R7	; and caller's mode
	.IF	NE $$RMSTEST&$$RMS_TBUGCHK
	BSBB	SFSB_FREE		; deallocate the sfsb
	BBC	#IFB$V_NWA,(R9),10$	; branch if nwa not present
	BSBW	NT$NWA_FREE		; deallocate nwa
10$:	MOVL	IFB$L_ASBADDR(R9),R4	; get asb addr
	BEQL	15$			; branch if none
	MOVL	R11,R3			; free space header
	BSBW	RM$RETBLK		; deallocate asb
	CLRL	IFB$L_ASBADDR(R9)	; clear pointer
15$:	MOVQ	R9,R3			; ifab addr to right regs for retblk
	BSBW	RM$RETBLK		; deallocate ifab
	.ENDC

;
;  return the pages used for all internal structures
;

	SUBL2	#8,R10			; get start of page addr
	MOVL	(R10),R4		; get 1st hole (there must be
					; at least 1 hole for ifab)
20$:	MOVL	(R4),R6			; get next free space hole
	.IF	NE $$RMSTEST&$$RMS_TBUGCHK
	CMPL	8(R4),#504		; all holes should now be equal
					;  to one page in length
					; (less list head if page 1)
	BLSSU	ERRBUG			; branch if not
	.ENDC
	BSBW	RM$RET1PAG		; return it
	MOVL	R6,R4			; get set to return next page
	CMPL	R6,R10			; all done?
	BNEQ	20$			; loop if not

;
;  zero ifi and ifab table pointer
;

	BSBW	RM$ZAPIFI		; zero ifi and ifab table entry
	POPL	R0			; return status to caller
	RSB				; return to caller


;++
;
;  deacess for shared file
;--

RELBCB:	$PSECT_BR	F$RMSCLOSE23
	MOVL	FRB$L_SIFAB_PTR(R1),R6	; get sifab address

;
;  free up frb by using sifab temporary frb to hold our place and take
;  the sfd.
;

	MOVL	FRB$L_PID(R1),SIFB$L_PID(R6) ; store owner pid
	MOVAL	SIFB$L_TEMP_FRB(R6),IFB$L_FRB_PTR(R9) ; set up addr of temp frb
	INSQUE	SIFB$L_TEMP_FRB(R6),(R1) ; insert temporary frb
	REMQUE	(R1),R3			; remove our frb
	SSB	#IFB$V_SIFB_OWND,(R9)	; indicate internal frb ownership
	BSBW	RM$TAKE_SFD1		; now take sfd
	BSBW	RM$RETURN_FRB		; return the frb
	BSBB	RM$DEACSHARED		; deaccess the shared ifab
	BSBW	RM$RLS_SFD		; release the sfd
	BRW	RETIFB			; that's all folks...continue

	.SBTTL	RM$DEACSHARED, DEACCESS SHARED IFAB

;++
; RM$DEACSHARED - deaccess shared file
;
;	this subroutine decrements the access counts in the shared ifab,
;	removes the sifab from the sfl chain, releases the sfd.
;
;	Calling sequence:
;
;		BSBW	RM$DEACSHARED     called from  RM$OPEN_SHARED
;
;	Input Parameters:
;
;		r6 - sifab address
;		r9 - ifab address
;
;	Side Effects:
;
;	the shared file will be closed and all related shared structures will
;	be deallocated from system space.
;
;--

RM$DEACSHARED::
	PUSHR	#^M<R6,R9>		; save r6 and r9
	PUSHL	#2			; number of parameters
	ASSUME	CMKRNL$_NARGS EQ 2
	ASSUME	CMKRNL$_ARGLST EQ 8
	$CMKRNL_S	DEACSHARED,(SP)	; go dec acc cnts & remove from list
	ADDL2	#12,SP			; adjust stack
	BLBS	R0,30$			; branch if file not accessed

;
;  can now release the shared ifab
;

	MOVAL	SIFB$L_TEMP_FRB(R6),R5	; get address of the temp frb
	MOVL	R6,R0			; sifab address
	BSBW	RM$RLS_SIFAB1		; release it
	CSB	#FRB$V_KRNLMODE,-	; always clear this as it is set when
		FRB$B_FLAGS(R5)		; called from last chance rundown.
	RSB				; return
30$:	MOVPSL	R4			; get psl
	EXTZV	#PSL$V_CURMOD,#2,R4,R7	; extract our current mode


;
;  now return any nrp's that are still around.
;

	MOVL	SIFB$L_NRP_LIST(R6),R4	; get first nrp address
	BEQL	80$			; branch if all done
75$:	IFNOWRT	#NRP$C_BLN,(R4),80$,R7	; probe the nrp
	PUSHL	NRP$L_LINK(R4)		; save ptr to next nrp
	MOVL	R6,R3			; set up addr to spc header
	MOVL	#NRP$C_BLN,R2		; set up length to return
	BSBW	RM$RETS0SPC		; return the nrp
	POPL	R4			; get next nrp addr
	BNEQ	75$			; go return it

;
;  all nrp's which existed have been returned.
;  we are now going to release the sifab itself.
;

80$:	SUBL3	#8,R6,R3		; get address of space header
	MOVL	R6,R4			; copy sifab address
	IFNOWRT	#SIFB$C_BLN,(R4),90$,R7	; probe the sifab
	PUSHL	R3			; save page address
	MOVL	#SIFB$C_BLN,R2		; set up sifab length to return
	BSBW	RM$RETS0SPC		; return the sifab
	POPL	R3			; restore page address
	CMPL	(R3),R6			; is the forward link correct?
	BNEQ	202$			; no, error
	CMPL	(R6),R3			; is forward link of hole correct?
	BNEQ	202$			; no, error
	CMPL	16(R3),#504		; is the hole the right size?
	BNEQ	202$			; branch if not equal


;++
;
;  sifab has been released.
;  return its page to the s0 free page list
;
;--

	MOVL	R3,R4			; copy addr to page to return
	SSB	#IMP$V_TEMP1,(R11)	; set s0 request flag
	BSBW	RM$RET1PAG		; return the page
	CSB	#IMP$V_TEMP1,(R11)	; clear s0 request flag
90$:	RSB				; return to caller

;
;  all space has not been returned correctly.
;  for release 1.5, as a temporary measure, the page will be returned
;  anyway, as the space will be freed in that manner.
;

202$:	SSB	#IMP$V_TEMP1,(R11)	; set s0 request flag
	MOVL	R3,R6			; save header addr
	MOVL	4(R3),R3		; get backward link
300$:	MOVL	4(R3),-(SP)		; push next backward link
301$:	XORL3	(SP),R3,R0		; determine if on same page
	BICL3	#MASK,(SP),R1		; get page addr of next hole
	BICL2	#MASK,R0		; finish same page determination
	BNEQ	204$			; branch if not on same page
	CMPL	R1,R6			; are we on first page?
	BEQL	204$			; branch if we are
	MOVL	(SP),R0			; otherwise, get next back link
	MOVL	4(R0),(SP)		; put next link on stack
	BRB	301$			; continue, until different page
204$:	BICL3	#MASK,R3,R4		; get page address
	PUSHR	#^M<R3,R4>		; save registers
	BSBW	RM$RET1PAG		; return it
	POPR	#^M<R3,R4>		; restore registers
205$:	CMPL	R4,R6			; are we at first page?
	BEQL	210$			; yes, all done
206$:	POPL	R3			; get next backward link
	BRB	300$			; continue returning pages
210$:	ADDL2	#4,SP			; adjust stack
	CSB	#IMP$V_TEMP1,(R11)	; clear s0 request flag
	RSB
	RMSTBUG	FTL$_SFDSPCERR		; system failure...space error


;++
;
;  this is being executed in kernel mode
;
;--
DEACSHARED:
	.WORD	^M<R2,R3,R4,R4,R5,R7,R8,R9>
	MOVL	4(AP),R6		; set up r6
	MOVL	8(AP),R9		; set up ifab
	SETIPL	#IPL$_ASTDEL		; disable kernel ast's
	CLRL	IFB$L_FRB_PTR(R9)	; clear ifb frb addr

;
;  decrement access counts
;

	BBC	#IFB$V_WRTACC,(R9),10$	; branch if not write access
	DECW	SIFB$W_WACC_CNT(R6)	; decrement write accessor count
10$:	TSTW	SIFB$W_ACC_CNT(R6)	; make sure not still zero
	BEQL	20$			; branch if it is
	DECW	SIFB$W_ACC_CNT(R6)	; decrement accessor count
	BEQL	20$			; branch if last accessor
	CLRL	R0			; clear status
	BRB	32$			;

;
;  remove the sifab from the sfl chain.
;

20$:	ADDL3	#SFD$L_SHRF_LNK,@#RMS$GL_SFDBASE,R5 ; get address of sfl head
	BRB	25$			; branch around next instruction
					; note: sifab will be in chain
					;   thus no need to check for
					;   end of chain
22$:	MOVAB	SIFB$L_SFL_LNK(R1),R5	; save address of previous link
25$:	MOVL	(R5),R1			; get address of the next sifab
	CMPL	R1,R6			; are we at current sifab?
	BNEQ	22$			; branch if we are not
	MOVL	SIFB$L_SFL_LNK(R1),(R5)	; set up new link
	MOVL	#1,R0			; set status
32$:	SETIPL	#0			; re-enable kernel ast's
	RET				; return
	$PSECT_RESTORE			;
	.SBTTL	RM$RELEASALL, RELEASE ALL BDB'S


;++
; RM$RELEASALL - release bdb's and buffers
; RM$RELEASAL_ALT - entry with status on stack
;
;  Subroutine to release all bdb's and their associated buffers.
;  Assumes dirty buffers will not be found.
;  Also return all BLB's.
;
;  inputs:
;	r11	impure area address
;	r9	ifab address
;	r8	fab address
;
;  outputs:
;	r0	status code
;	r10	ifab address
;	r1-r6	destroyed
;--
;
;  return all buffers and bdb's
;
;--

RM$RELEASALL::
	PUSHL	#1			; assume success
RM$RELEASAL_ALT::
					; entry with status on stack
	MOVL	R9,R10			; make sure r10 = ifab addr
	MOVAL	IFB$L_BDB_FLNK(R10),R6	; get bdb list head
10$:	MOVL	(R6),R4			; get 1st bdb in list
	CMPL	R4,R6			; back at list head?
	BEQL	30$			; branch if yes - all done
	BBS	#BDB$V_DRT, BDB$B_FLGS(R4), DRTBUG ; Don't expect to find dirt.
	TSTW	BDB$W_USERS(R4)		; use count nonzero?
	BNEQ	20$			; no, go release bdb
	INCW	BDB$W_USERS(R4)		; make it look accessed
20$:	BSBW	RM$RLNERR		; go release it and free buffer.
	ASSUME	BDB$B_BID EQ GBPB$B_BID
	ASSUME	<BDB$C_BID & 1> EQ 0
	ASSUME	<GBPB$C_BID & 1> EQ 1
	BLBS	BDB$B_BID(R4), 25$	; br if gbpb.
	BSBW	RM$RETBDB		; return the bdb
	BRB	10$			; keep going until all gone.
25$:	BSBW	RM$RETGBPB		; return gbpb.
	BRB	10$			; keep going
30$:
	ASSUME	IFB$W_AVGBPB EQ <IFB$W_AVLCL + 2>
	CLRL	IFB$W_AVLCL(R10)	; Note all buffers gone.
	BBS	#IFB$V_NORECLK, (R10), RA_EX ; All done if no locking.
	MOVAL	IFB$L_BLBFLNK(R10), R6	; Get list head for BLB's.
40$:	MOVL	(R6), R4		; Get next BLB.
	CMPL	R4, R6			; Back at list head?
	BEQL	CHKGBL			; All done then.
	TSTL	BLB$L_LOCK_ID(R4)	; This one still locked?
	BEQL	45$			; EQL no lock, so just return it.
	BSBW	RM$RLNER1		; Release the lock first.
	MOVL	IFB$L_BLBBLNK(R10), R4	; Recover BLB address.
45$:	BSBW	RM$RETBLB		; Return the BLB.
	BRB	40$			; Go get next one.
RA_EX:	POPR	#^M<R0>			; restore status
	RSB

;
;
;  attempted to return an ifab-related page having some
;  non-deallocated block(s) in it
;

ERRBUG:	RMSTBUG	FTL$_DEALLERR

;
;  A dirty buffer has been left behind by someone.
;

DRTBUG:	RMSTBUG	FTL$_RLSDRT

CHKGBL:
	MOVL	IFB$L_GBH_PTR(R10), R0	; Global buffers present?
	BEQL	RA_EX			; All done then.
	ADDL3	GBH$L_GS_SIZE(R0), R0, R1 ; End addr of sec + 1
	DECL	R1			; End addr of section.
	BSBB	RM$UNMAP_GBL		; Disassociate from section.
	MOVQ	R0, R4			; Start and end addr's of VA.
	BEQL	100$			; Don't return space if error.
	SUBL2	R4, R5			; Size - 1 into R5.
	INCL	R5			; Size into R5.
	BSBW	RM$RETPAG		; Return to free page list.
100$:
	MOVL	IFB$L_FRB_PTR(R10), R0	; Shared file?
	BEQL	RA_EX			; EQL then not, all done.
	MOVL	FRB$L_SIFAB_PTR(R0), R0	; Get sifab addr.
	DECW	SIFB$W_GBREF(R0)	; Note not referenced anymore.
	BRB	RA_EX			; All done.
;++
; RM$UNMAP_GBL
;
; This routine deletes and recreates the specified address range
; for the purpose of un-mapping from a global section that has been
; used for i/o buffers.
;
; Inputs:
;
; R0 - start address of range.
; R1 - end address of range.
;
; Outputs:
;
; R0 - start address of range.
; R1 - end address of range.
; R0, R1 zeroed if failure.
;
; Destroys R2.
;
;--
RM$UNMAP_GBL::
	MOVQ	R0, -(SP)		; Save range on stack.
	MOVL	SP, R2			; Remember that address.
	$DELTVA_S INADR=(R2),-		; Delete the VA.
		RETADR=(R2)
	BLBC	R0, 100$		; Branch on error.
	$CRETVA_S INADR=(R2),-		; Recreate the VA.
		RETADR=(R2)
	BLBC	R0, 90$			; Branch on error.
	MOVZBL	IMP$B_PROT(R11), R0	; Get protection for pages.
	$SETPRT_S INADR=(R2),-		; Set the protection on the pages.
		ACMODE=#PSL$C_EXEC,-
		PROT=R0
	BLBS	R0, 200$		; Branch if success.

90$:
	$DELTVA_S INADR=(R2)		; Delete it again on errors.
100$:	CLRQ	(SP)			; Note error.
200$:	MOVQ	(SP)+, R0		; Return address array.
	RSB				; And return.
	.END
