	$BEGIN	RM0FWASET,016,F$RMSOPEN0,<ALLOCATE AND INITIALIZE FWA>

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
; Facility: RMS32
;
; Abstract:
;	this module allocates and initializes a file work
;	area (fwa) page.
;
; Environment:
;		star processor running starlet exec.
;
; Author: L F Laverdure,	 creation date: 3-MAR-1977
;
; Modified By:
;
;	V02-016	CDS0001		C Saether		 9-Jan-1982
;		Actually ask for two pages of bytes worth.
;
;	V02-015	RAS0045		Ron Schaefer		11-Nov-1981
;		Change to 2-page FWA.
;
;	V02-014	RAS0044		Ron Schaefer		30-Oct-1981
;		Correct RAS0040 by using the correct register.
;
;	V02-013	RAS0040		Ron Schaefer		30-Oct-1981
;		Implement rooted directories for concealed devices;
;		set the mfd id to 4,4 in FWA$T_MFD_FID.
;
;	V02-012	REFORMAT	Keith B. Thompson	29-Jul-1980
;
;	V011	CDS0075		C D Saether	21-Jan-1980	11:30
;		storing of IFB$L_FWA_BDB removed (never referenced)
;
;	V010	CDS0047		C Saether	28-Oct-1979	15:40
;		call RM$ALDBUF with request for 512 bytes explicit as
;		aldbuf now stores requested size in bdb
;
;	V009	JAK0023		J A Krycka	27-Aug-1979	17:00
;		modify descriptor initialization in conjuction with effort
;		in RM0XPFN to allow multiple node specs in a file specification
;--
;


	.SBTTL	DECLARATIONS

;
; Include Files:
;

;
; Macros:
;

	$IFBDEF
	$FWADEF

;
; Equated Symbols:
;
	MFD_FILE_ID	= <4@16>+4	; master file directory file id

;
; Own Storage:
;


	.SBTTL	RM$FWASET - ALLOCATE AND INITIALIZE FWA ROUTINE

;++
;
;  RM$FWASET	-
;
; this routine calls rm$aldbuf to allocate a file work area
; (fwa) page and then intializes the various buffer
; descriptors.
;
;
; Calling sequence:
;
;	BSBW	RM$FWASET
;
; Input Parameters:
;
;	R11	impure area pointer
;	R9	ifab address
;
;
; Implicit Inputs:
;
;	none
;
; Output Parameters:
;
;	R10	fwa buffer address
;	R1-R5	destroyed
;	R0	status code
;
;
; Implicit Outputs:
;
;	BDB initialized and linked into ifab bdb list
;	fwa buffer descriptors initialized:
;
;		FWA$Q_XLTBUF1
;		FWA$Q_XLTBUF2
;		FWA$Q_NODE
;		FWA$Q_NODE1 and all sub nodes
;		FWA$Q_QUOTED
;		FWA$Q_DEVICE
;		FWA$Q_DIR1 and all sub directories
;		FWA$Q_NAME
;		FWA$Q_TYPE
;		FWA$Q_VERION
;
;	FWA$B_UNDERLINE initialized to the character '_'
;
; Completion Codes:
;
;	standard rms, in particular, suc or dme.
;
; Side Effects:
;
;	none
;--


RM$FWASET::

;
; Allocate a 2 page buffer and bdb to use for FWA.
; The buffer allocated should be rounded up to the next integral
; page size so that the open and create routine that use the buffer
; (for example, the relative bucket formatting routine) can use the
; entire buffer, as an integral number of pages will be allocated
; by ALDBUF anyway.
;

	MOVZWL	#<<FWA$C_BLN+511>&^C511>,R5 ; get 2 pages (or more)
	MOVL	R9,R10			; copy address of ifab
	BSBW	RM$ALDBUF		; allocate buffer

;
; returns BDB and buffer addresses
; in R4,R3 respectively
;

	BLBC	R0,FWAXIT		; get out on error
	MOVL	R3,R10			; save fwa buffer addr
	MOVC5	#0,(SP),#0,R2,(R3)	; zero the pages
	MOVAB	256(R10),R3		; bump fwa addr for short addressing

;
; initialize the various fwa buffer descriptors
; with the size and address of the related buffer
;
; first the scratch translation buffer descriptors
;

	MOVL	#FWA$C_XLTBUFSIZ,FWA$Q_XLTBUF1(R10)
	MOVL	#FWA$C_XLTBUFSIZ,FWA$Q_XLTBUF2(R10)
	MOVAB	FWA$T_XLTBUFF1-256(R3),FWA$Q_XLTBUF1+4(R10)
	MOVAB	FWA$T_XLTBUFF2(R10),FWA$Q_XLTBUF2+4(R10)

;
; now all the parsed filename element descriptors (address only)
;

	MOVL	R10,FWA$Q_NODE+4(R10)	; buffers for these descriptors
	MOVL	R10,FWA$Q_QUOTED+4(R10)	;  will be allocated out of the

;
;	MOVL	#FWA$C_MAXSUBNOD,R2		;  network work area (NWA)
;	MOVAQ	FWA$Q_NODE1+4(R10),R4		;  therefore, these addresses
;5$:	MOVL	R10,(R4)			;  will be respecified at
;	ADDL2	#8,R4				;  the time nwa is created
;	SOBGEQ	R2,5$				;  "
;

	MOVAB	FWA$T_DEVICEBUF-256(R3),FWA$Q_DEVICE+4(R10)
	MOVAB	FWA$T_DIR1BUF-256(R3),R5; get address of directory buffers
	MOVAB	FWA$Q_DIR1+4(R10),R4	; get address of dir. descriptors
	MOVL	#FWA$C_MAXSUBDIR,R2	; max. # of sub directories
10$:	MOVL	R5,(R4)			; store buffer address in descriptor
	ADDL2	#FWA$C_DIRBUFSIZ,R5	; address of next directory buffer
	ADDL2	#8,R4			; address of next descriptor
	SOBGEQ	R2,10$			; loop if more
	MOVAB	FWA$T_NAMEBUF-256(R3),FWA$Q_NAME+4-256(R3)
	MOVAB	FWA$T_TYPEBUF-256(R3),FWA$Q_TYPE+4-256(R3)
	MOVAB	FWA$T_VERBUF-256(R3),FWA$Q_VERSION+4-256(R3)

;
;  move an underscore character to FWA$B_UNDERLINE
;  and initialize the root directory file id to the MFD (4,4).
;

	MOVB	#^A/_/,FWA$B_UNDERLINE-256(R3)
	MOVL	#MFD_FILE_ID,FWA$T_MFD_FID-256(R3)
	RMSSUC
FWAXIT:	RSB
	.END
