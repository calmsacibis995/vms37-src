
MODULE RM3MISC (LANGUAGE (BLISS32) ,
		IDENT = 'V03-000'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:	RMS32 INDEX SEQUENTIAL FILE ORGANIZATION
!
! ABSTRACT:
!		MISCELLANEOUS ROUTINES
!
!
! ENVIRONMENT:
!
!		VAX/VMS OPERATING SYSTEM
!
!--

!
! AUTHOR:	Wendy Koenig     CREATION DATE:		27-APR-78  9:57
!
! MODIFIED BY:
!
!    V02-017	PSK0005		Paulina S. Knibbe	02-Sep-1981
!		Only add truncated character when the length of the
!		currently expanded key is less than the total length
!
!    V02-016	MCN0010		Maria del C. Nasr	04-Aug-1981
!		Modify RM$RECORD_KEY to do type conversion when extracting
!		key segments from an expanded prologue 3 data record.
!		Also, add RM$KEY_TYPE_CONV routine.
!
!    V02-015	PSK0005		Paulina S. Knibbe	30-Jul-1981
!		Remove support for truncated index keys from RM$RECORD_KEY
!
!    V02-014	PSK0004		Paulina S. Knibbe	15-Jun-1981
!		Change RM$RECORD_KEY to work for prologue three index
!		and SIDR records, too. 
!		Change RM$CNTRL_ADDR to work for prologue three index buckets
!
!    V02-013	MCN0009		Maria del C. Nasr	07-May-1981
!		Add support for front end compressed keys in RM$RECORD_KEY.
!
!    V02-012	MCN0008		Maria del C. Nasr	22-Apr-1981
!		Fix some bugs with prologue 3 changes.
!
!    V02-011	PSK0003		Paulina S. Knibbe	17-Apr-1981
!		Fix some problems w/RM$CNTRL_ADDR
!
!    V02-010	MCN0007		Maria del C. Nasr	13-Apr-1981
!		Add RM$CHECK_SEGMENT routine.
!
!    V02-009	PSK0002		Paulina S. Knibbe	08-Apr-1981
!		Add RM$CNTRL_ADDR to return the address of the control
!		byte for the current record in any data bucket
!
!    V02-008	MCN0006		Maria del C. Nasr	23-Mar-1981
!		Modify these routines to be able to process prologue 3
!		data level structure changes (base level 1).
!
!    V02-007	PSK0001		Paulina S. Knibbe	12-Mar-1981
!		Change the reference to segment length to a byte
!
!    V02-006	REFORMAT	Paulina S. Knibbe	23-Jul-1980
!
!
! REVISION HISTORY:
!
!   Christian Saether, 	28-SEP-78  8:52
!   X0002 - add RM$MOVE routine to avoid CH$MOVE problems
!
!   Christian Saether, 	9-OCT-78  11:09
!   X0003 - modify RECORD_KEY to use routine REC_OVHD
!
!   Christian Saether, 	10-OCT-78  10:14
!   X0004 - change RECORD_KEY to use REC_OVHD routine
!
!   Wendy Koenig, 	24-OCT-78  14:02
!   X0005 - MAKE CHANGES CAUSED BY SHARING CONVENTIONS
!
!*****

LIBRARY 'RMSLIB:RMS';

REQUIRE 'RMSSRC:RMSIDXDEF';

! define default psects for code
!

PSECT
    CODE = $$RMS3(PSECT_ATTR),
    PLIT = $$RMS3(PSECT_ATTR);

! Linkages
!

LINKAGE
    L_BUG3,
    L_CHECK_SEGMENT,
    L_CNTRL_ADDR,
    L_CONV_FROM_ASCII,
    L_CONV_TO_ASCII,
    L_KEY_TYPE_CONV,
    L_MOVE,
    L_REC_OVHD,
    L_RECORD_KEY,
    L_RECORD_VBN;

! Forward Routines
!

FORWARD ROUTINE
    RM$RECORD_KEY	: RL$RECORD_KEY,
    RM$RECORD_VBN	: RL$RECORD_VBN;


! External Routines
!

EXTERNAL ROUTINE
    RM$BUG3		: RL$BUG3,
    RM$CONV_FROM_ASCII	: RL$CONV_FROM_ASCII,
    RM$CONV_TO_ASCII	: RL$CONV_TO_ASCII,
    RM$REC_OVHD		: RL$REC_OVHD;


GLOBAL ROUTINE RM$RECORD_KEY (DST_PTR) : RL$RECORD_KEY =

!++
!
! RM$RECORD_KEY
!
!	This routine extracts the key field from a record
!	and places it in the buffer pointed to by DST_PTR.  If the key
!	was compressed, it expands it to its full length.
!
! CALLING SEQUENCE:
!	RM$RECORD_KEY()
!
! INPUT PARAMETERS:
!	DST_PTR --- ( R0 )
!
! IMPLICIT INPUTS:
!	AP - used to determine if record has overhead data, and if it is
!	     in compressed or expanded form
!		bit 0 : 0 - with overhead
!			1 - without overhead
!		bit 1 : 0 - compressed form (prologue 3 records only)
!			1 - expanded form
!
!	REC_ADDR - Address of record whose key we will extract
!	IRAB --- IRB$L_LST_NCMP
!	IFAB --- IFB$B_RFMORG for RM$REC_OVHD
!		 IFB$B_PLG_VER
!	IDX_DFN --- IDX$B_SEGMENTS
!		    IDX$W_POSITION
!		    IDX$W_SIZE
!		    IDX$V_KEY_COMPR
!		    IDX$B_KEYSZ
!		    IDX$B_KEYREF
!	BKT_ADDR -- BKT$B_LEVEL
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	pointer to next byte in buffer
!
! SIDE EFFECTS:
!	AP might equal zero on exit.
!
!--

    BEGIN

    BUILTIN
	AP;

    ! Define macros to identify compressed key overhead
    !
    MACRO
	KEY_LEN = 0,0,8,0 %,
	CMP_CNT = 1,0,8,0 %;

    EXTERNAL REGISTER
	R_IRAB_STR,
	R_IFAB_STR,
	R_IDX_DFN_STR,
	R_REC_ADDR_STR;

    LOCAL
	LENGTH,
	START_ADDR :	REF BBLOCK;

    BEGIN

    GLOBAL REGISTER
	R_REC_SIZE;

    REC_SIZE = 0;		! signal primary data record to REC_OVHD
    START_ADDR = .REC_ADDR;

    IF NOT .AP<0,1>
    THEN
	START_ADDR = .START_ADDR + RM$REC_OVHD();
    END;

    ! If it is an old file (less than prologue 3) simply extract each segment
    !

    IF .IFAB[IFB$B_PLG_VER] LSSU PLG$C_VER_3
    THEN
	BEGIN

	LOCAL
	    ADDR,
	    SEG_DATA_ADDR;

	! Extract each key segment from record to form complete key,
	! and move them to key buffer
	!
	SEG_DATA_ADDR = IDX_DFN[IDX$W_POSITION];
	AP = .IDX_DFN[IDX$B_SEGMENTS];

	DO
	    BEGIN
	    ADDR = .START_ADDR + .(.SEG_DATA_ADDR)<0, 16>;
	    SEG_DATA_ADDR = .SEG_DATA_ADDR + 2;
	    LENGTH = .(.SEG_DATA_ADDR)<0, 8>;
	    SEG_DATA_ADDR = .SEG_DATA_ADDR + 2;
	    DST_PTR = CH$MOVE(.LENGTH, .ADDR, .DST_PTR);
	    AP = .AP - 1;
	    END
	UNTIL .AP EQL 0;

	RETURN .DST_PTR;

	END;

    ! If we are here, we know we have a prologue 3 file.  Now determine if the
    ! record is in expanded form, or compressed.
    !
    ! If in expanded form, do type conversion as each segment is extracted.
    !

    IF .AP<1,1>
    THEN
	BEGIN

	LOCAL
	    ADDR,
	    TYPE,
	    SEG_DATA_ADDR;

	! Extract each key segment from record to form complete key,
	! and move them to key buffer
	!
	SEG_DATA_ADDR = IDX_DFN[IDX$W_POSITION];
	AP = .IDX_DFN[IDX$B_SEGMENTS];

	DO
	    BEGIN
	    ADDR = .START_ADDR + .(.SEG_DATA_ADDR)<0, 16>;
	    SEG_DATA_ADDR = .SEG_DATA_ADDR + 2;
	    LENGTH = .(.SEG_DATA_ADDR)<0, 8>;
	    SEG_DATA_ADDR = .SEG_DATA_ADDR + 1;
	    TYPE = .(.SEG_DATA_ADDR)<0, 8>;

	    IF .(.SEG_DATA_ADDR)<0,8> EQLU IDX$C_STRING
	    THEN
		DST_PTR = CH$MOVE(.LENGTH, .ADDR, .DST_PTR)
	    ELSE
		BEGIN
		RM$CONV_TO_ASCII( .DST_PTR, .ADDR, .LENGTH, .TYPE );
		DST_PTR = .DST_PTR + .LENGTH;
		END;

	    SEG_DATA_ADDR = .SEG_DATA_ADDR + 1;
	    AP = .AP - 1;
	    END

	UNTIL .AP EQL 0;
	END

    ELSE

	! Record is in compressed format:  extract the key as a whole doing
	! expansion if key is compressed too.  It can either be a data record,
	! a SIDR, or an index record.
	!
	BEGIN

	LOCAL
	    BUCKET	: REF BBLOCK,
	    PDATA;

	BUCKET = .BBLOCK [.IRAB [IRB$L_CURBDB], BDB$L_ADDR];
	PDATA = 0;

	IF .BUCKET [BKT$B_LEVEL] EQLU 0
		AND .IDX_DFN [IDX$B_KEYREF] EQLU 0
	THEN
	    PDATA = 1;

	! If the key has been compressed, add compressed and truncated
	! characters
	!
	IF (.PDATA AND .IDX_DFN[IDX$V_KEY_COMPR])
	    OR (NOT .PDATA AND .IDX_DFN[IDX$V_IDX_COMPR])
	THEN
	    BEGIN

	    LOCAL
		SAVE_REC_ADDR,
		SAVE_REC_SIZE,
		TRUN_CHAR;

	    ! Get the last record found with a zero front compressed key,
	    ! and set pointer to its key.
	    !
	    SAVE_REC_ADDR = .REC_ADDR;
	    REC_ADDR = .IRAB[IRB$L_LST_NCMP];

	    DST_PTR = .DST_PTR + .START_ADDR[CMP_CNT];

	    ! Scan bucket until wanted record is reached, moving compressed
	    ! characters found to the output buffer
	    !
	    WHILE .REC_ADDR LSSU .START_ADDR DO
	    BEGIN

		! Position to key
		! 
		IF .PDATA
		THEN

		    ! Primary data bucket
		    BEGIN
	            GLOBAL REGISTER
		    	R_REC_SIZE;

		    REC_SIZE = 0;
	    	    REC_ADDR = .REC_ADDR + RM$REC_OVHD();
	    	    SAVE_REC_SIZE = .REC_SIZE;			! CH$COPY blows R1
	    	    END
		ELSE

		    ! SIDR or index bucket
		    !
		    SAVE_REC_SIZE = .REC_ADDR [KEY_LEN] + 2;

		! If the compression count fo the search record is less than
		! that of the wanted record, then it has characters we want
		!
		IF .REC_ADDR[CMP_CNT] LSSU .START_ADDR[CMP_CNT]
		THEN
		    BEGIN

		    ! If the compression count is equal to zero, move all the
		    ! characters.  Otherwise, we had previously moved characters
		    ! that were incorrect, so back them out.
		    !
		    LENGTH = .START_ADDR[CMP_CNT] - .REC_ADDR[CMP_CNT];
		    DST_PTR = .DST_PTR - .LENGTH;

		    ! Move all of the front end compressed characters needed,
		    ! and complete with truncated character if necessary.
		    !
		    TRUN_CHAR = .REC_ADDR + .REC_ADDR[KEY_LEN] + 1;
		    DST_PTR = CH$COPY ( .REC_ADDR[KEY_LEN], .REC_ADDR + 2,
					..TRUN_CHAR,
					.LENGTH, .DST_PTR );
		    END;

		! Get next record in the bucket
		!
		REC_ADDR = .REC_ADDR + .SAVE_REC_SIZE;
	    END;					! end of WHILE loop

	    ! Complete key with rear end truncated character
	    !

	    LENGTH = .IDX_DFN[IDX$B_KEYSZ] - .START_ADDR[CMP_CNT];
	    TRUN_CHAR = .START_ADDR + .START_ADDR[KEY_LEN] + 1;

	    IF .LENGTH GTR 0
	    THEN
		DST_PTR = CH$COPY ( .START_ADDR[KEY_LEN], .START_ADDR + 2,
				..TRUN_CHAR,
				.LENGTH, .DST_PTR );

	    REC_ADDR = .SAVE_REC_ADDR;
	    END
	ELSE

	    ! Otherwise, move the key as a whole
	    !
	    DST_PTR = CH$MOVE( .IDX_DFN[IDX$B_KEYSZ], .START_ADDR, .DST_PTR);

	END;

    RETURN .DST_PTR;

    END;


GLOBAL ROUTINE RM$RECORD_VBN : RL$RECORD_VBN =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	extracts the variable length VBN from the given record
!
! CALLING SEQUENCE:
!	BSBW RM$RECORD_VBN()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	IFAB -- for prologue version
!	REC_ADDR -- address of the record
!	AP -- offset from the beginning of the record to the VBN
!		3 for DATA records
!		2 for SIDR records
!		1 for INDEX records
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!
!	the VBN of the given record
!
! SIDE EFFECTS:
!	NONE
!
!--

    BEGIN

    EXTERNAL REGISTER
	R_IFAB_STR,
	R_REC_ADDR_STR;

    BUILTIN
	AP;

    IF .IFAB[IFB$B_PLG_VER] EQLU 3
    THEN
	RETURN .(.REC_ADDR + .AP + 2)<0,8*(2 + .REC_ADDR[IRC$V_PTRSZ])>
    ELSE
	RETURN .(.REC_ADDR + .AP)<0,8*(2 + .REC_ADDR[IRC$V_PTRSZ])>;

    END;


GLOBAL ROUTINE RM$MOVE (LENGTH, FROM_ADDR, TO_ADDR) : RL$MOVE =

!++
!
! RM$MOVE
!
! do a CH$MOVE and return the address of the next byte beyond the
! block moved (same as value of CH$MOVE function)
!
! CALLING SEQUENCE:
!	RM$MOVE (LENGTH,FROM_ADDR,TO_ADDR)
!
! INPUT PARAMETERS:
!	LENGTH - length of block to be moved
!	FROM_ADDR - address to move from
!	TO_ADDR - address to move to
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	TO_ADDR plus LENGTH
!
! SIDE EFFECTS:
!	NONE
!
!--

    BEGIN
    RETURN CH$MOVE(.LENGTH, .FROM_ADDR, .TO_ADDR);

    END;


GLOBAL ROUTINE RM$CNTRL_ADDR: RL$CNTRL_ADDR =

!++
!
! RM$CNTRL_ADDR
!
!	This routine returns the address of the control byte for the current
!	record. 
!
! CALLING SEQUENCE:
!	
!	RM$CNTRL_ADDR()
!
! INPUT PARAMETERS:
!
!	none
!
! IMPLICIT INPUTS:
!
!	REC_ADDR
!	BKT_ADDR
!	IFAB [IFB$B_PLG_VER]
!	IDX_DFN [IDX$B_KEYREF]
!	IDX_DFN [IDX$B_IDXBKTSIZ]
!	IRAB [IRB$L_REC_COUNT]
!
! OUTPUT PARAMETERS:
!
!	none
!
! IMPLICIT OUTPUTS:
!
!	none
!
! ROUTINE VALUE:
!
!	Address of control byte
!
! SIDE EFFECTS:
!	none
!
!--
BEGIN

GLOBAL REGISTER
	R_IRAB_STR,
	R_IFAB_STR,
	R_IDX_DFN_STR,
	R_BKT_ADDR_STR,
	R_REC_ADDR_STR;

LOCAL
    CNTRL: REF BBLOCK;

MACRO
    FREESPC = 0,0,16,0 %;

! If this is a prologue two bucket or prologue three primary data bucket,
! then the control is stored with the key.
!

IF .IFAB [IFB$B_PLG_VER] LSS PLG$C_VER_3
    OR (.IDX_DFN [IDX$B_KEYREF] EQLU 0 AND .BKT_ADDR [BKT$B_LEVEL] EQLU 0 )
THEN
    RETURN .REC_ADDR;

BEGIN
    LOCAL SIZE;

IF .BKT_ADDR [BKT$B_LEVEL] EQLU 0
THEN
    SIZE = .IDX_DFN [IDX$B_DATBKTSZ]
ELSE
    SIZE = .IDX_DFN [IDX$B_IDXBKTSZ];

CNTRL = .BKT_ADDR + (.SIZE * 512) - BKT$C_ENDOVHD; 
END; ! Of local SIZE

! Check the back freespace pointer makes sense. (It is greater than the front
! pointer and not past the end of the bucket).
!

IF .CNTRL [FREESPC] LSSU .BKT_ADDR [BKT$W_FREESPACE]
	OR (.BKT_ADDR + .CNTRL [FREESPC]) GTRU .CNTRL
THEN
    RM$BUG3();

IF .BKT_ADDR [BKT$B_LEVEL] EQLU 0
THEN

    ! Prologue three SIDR bucket. Since the RRV list is stored at the end of 
    ! the bucket and each VBN is variable, we must search this list
    ! sequentially.
    !

    BEGIN
    ! If there is a duplicate pointer, position past it
    !

    IF .IDX_DFN [IDX$V_DUPKEYS]
    THEN
	CNTRL = .CNTRL - 4;

    DECR I FROM .IRAB [IRB$L_REC_COUNT] TO 0
    DO  BEGIN
	LOCAL 
	    SIZE: WORD;

	SIZE = .(.CNTRL-5);
	CNTRL = .CNTRL - .SIZE;
	END;
    END

ELSE

    ! Prologue three index bucket
    !
    BEGIN

    LOCAL
	VBN_SIZE;

    VBN_SIZE = (.BKT_ADDR [BKT$V_PTR_SZ]) + 2;
    CNTRL = .CNTRL - .VBN_SIZE;
    CNTRL = (.CNTRL - (.VBN_SIZE * .IRAB [IRB$L_REC_COUNT]));
    END;

RETURN .CNTRL;
END;


GLOBAL ROUTINE RM$CHECK_SEGMENT( START_BUF, CURR_BYTE, ADDR_LEN ) : RL$CHECK_SEGMENT =

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine determines if a given byte belongs to a segment
!	in the primary key.
!
! CALLING SEQUENCE:
!	RM$CHECK_SEGMENT(PAR1,PAR2,PAR3)
!
! INPUT PARAMETERS:
!	START_BUF - start address of input buffer if packing records
!		    or output buffer if unpacking
!	CURR_BYTE - address of current byte in buffer
!
! IMPLICIT INPUT:
!	IDX descriptor (R7)
!	
! OUTPUT PARAMETER:
!	If not key segment:
!		ADDR_LEN = address of next segment
!	If key segment:
!		ADDR_LEN = length of key segment
!
! ROUTINE VALUE:
!	0 - if not key segment
!	1 - if key segment
!
! SIDE EFFECTS:
!	Unknown
!
!--

    BEGIN

    EXTERNAL REGISTER
	R_IDX_DFN_STR;

    LOCAL
	X,
	SEG_ADDR,
	S_SEG_ADDR,
	SEG_LEN :	BYTE,
	SEG_DATA_ADDR;


    SEG_DATA_ADDR = IDX_DFN[IDX$W_POSITION];
    X = .IDX_DFN[IDX$B_SEGMENTS];

    ! Determine the highest possible segment
    !
    S_SEG_ADDR = .IDX_DFN[IDX$B_DATBKTSZ] * 512 + .START_BUF;

    WHILE .X NEQU 0
    DO
	BEGIN

	! Get segment address and length
	!
	SEG_ADDR = .(.SEG_DATA_ADDR)<0,16> + .START_BUF;
	SEG_DATA_ADDR = .SEG_DATA_ADDR + 2;
	SEG_LEN = .(.SEG_DATA_ADDR)<0,8>;
	SEG_DATA_ADDR = .SEG_DATA_ADDR + 2;
	X = .X - 1;

	IF .CURR_BYTE GEQU .SEG_ADDR
	THEN
	    BEGIN

	    ! If the byte belongs to the primary key, return length between
	    ! current byte and end of segment, and success.
	    !
	    IF .CURR_BYTE LSSU (.SEG_ADDR + .SEG_LEN)
	    THEN
		BEGIN
		ADDR_LEN = (.SEG_ADDR + .SEG_LEN) - .CURR_BYTE;
		RETURN 1
		END
	    END
	ELSE

	    ! If this segment is closer to current byte than previous segment
	    ! but not before, note address
	    !		
	    IF .SEG_ADDR LSSU .S_SEG_ADDR
	      AND (.CURR_BYTE LSSU .SEG_ADDR)
	    THEN
		S_SEG_ADDR = .SEG_ADDR;
	END;			! end of while loop

    ! Return address of closest segment to current byte
    !
    ADDR_LEN = .S_SEG_ADDR;
    RETURN 0;
    END;

GLOBAL ROUTINE RM$KEY_TYPE_CONV (INPUT_KEY, OUT_BUF, CONV_FLAG) :
	RL$KEY_TYPE_CONV NOVALUE =

!++
!
! RM$KEY_TYPE_CONV
!
! This routine determines the address of each key segment, and calls the
! appropiate conversion routine.  Assumes key buffers as input only.
!
! CALLING SEQUENCE:
!	RM$KEY_TYPE_CONV (INPUT_KEY, OUT_BUF, CONV_FLAG)
!
! INPUT PARAMETERS:
!	INPUT_KEY - address of key to be converted
!	OUT_BUF - destination buffer for converted key
!	CONV_FLAG - indicates what kind of conversion is to be done
!		0 - convert to ASCII
!		1 - convert from ASCII
!
! IMPLICIT INPUTS:
!	IDX_DFN - index descriptor of key to be converted
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	Output buffer contains converted key.
!
! ROUTINE VALUE:
!
! SIDE EFFECTS:
!	NONE
!
!--

    BEGIN

    EXTERNAL REGISTER
	R_IDX_DFN_STR;

    LOCAL
	SEG_INFO,
	NUM_SEG,
	LENGTH,
	TYPE;

    SEG_INFO = IDX_DFN[IDX$W_POSITION];
    NUM_SEG = .IDX_DFN[IDX$B_SEGMENTS];

    ! Loop for each key segment doing appropiate conversion
    !

    DO
	BEGIN

	SEG_INFO = .SEG_INFO + 2;
	LENGTH = .(.SEG_INFO)<0,8>;
	SEG_INFO = .SEG_INFO + 1;
	TYPE = .(.SEG_INFO)<0,8>;
	SEG_INFO = .SEG_INFO + 1;

	IF .CONV_FLAG
	THEN
	    RM$CONV_FROM_ASCII ( .TYPE, .LENGTH, .INPUT_KEY, .OUT_BUF )
	ELSE
	    RM$CONV_TO_ASCII ( .TYPE, .LENGTH, .INPUT_KEY, .OUT_BUF );

	OUT_BUF = .OUT_BUF + .LENGTH;
	INPUT_KEY = .INPUT_KEY + .LENGTH;
	NUM_SEG = .NUM_SEG - 1;
	END

    UNTIL .NUM_SEG EQL 0;

    END;

END
ELUDOM
