
MODULE RM3FNDRFA (LANGUAGE (BLISS32) ,
		IDENT = 'V03-000'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:	RMS32 INDEX SEQUENTIAL FILE ORGANIZATION
!
! ABSTRACT:
!                Search given bucket for record with given ID
!
!
! ENVIRONMENT:
!
!		VAX/VMS OPERATING SYSTEM
!
!--

!
! AUTHOR:        Christian Saether     CREATION DATE:        	24-APR-78  14:46
!
! MODIFIED BY:
!
!	V02-010	KPL0002		Peter Lieberwirth	10-Jan-1982
!		If file is PLG 3, and find_by_id fails, return DEL if
!		id is less than BKT next record id (instead of RNF).
!		This is because we're completely deleting RRVs in PLG
!		3 files.  (This should have been done some time ago.)
!
!	V02-009	KPL0001		Peter Lieberwirth	23-Nov-1981
!		If RFA points to an index bucket for a PLG 3 file, return
!		DEL and not RFA because more likely error is record deleted
!		and bucket then reclaimed.  (less likely error is RFA trashed
!		by user)
!
!	V02-008	PSK0002		Paulina S. Knibbe	20-Apr-1981
!		Change last 'record not compressed' info to keep track
!		of the address instead of the ID.
!
!	V02-007	PSK0001		Paulina S. Knibbe	15_Apr-1981
!		Make some changes to fix prologue one and two searches
!
!	V02-006	MCN0006		Maria del C. Nasr	16-Mar-1981
!		Increase size of record identifier to a word.
!		Modify RM$FIND_BY_ID to handle new data level structure
!		(base level 1).
!
!	V02-005	REFORMAT	K. E. Kinnear		23-Jul-1980	10:03
!
! REVISION HISTORY:
!
!	V01-004			C. D. Saether		16-Jan-1979	10:11
!		FIND_BY_ID no longer requires CURBDB as input (calls
!		REC_OVHD instead of GETNEXTREC).
!
!	V01-003			C. D. Saether		9-Jan-1979	11:59
!		NORLS_RNF must be cleard always (fix bug where it wasn't).
!
!	V01-002			W. Koenig		24-Oct-1978	14:01
!		Make changes caused by sharing conventions.
!
!*****

LIBRARY 'RMSLIB:RMS';

REQUIRE 'RMSSRC:RMSIDXDEF';

! Define default psects for code
!

PSECT
    CODE = $$RMS3(PSECT_ATTR),
    PLIT = $RMS3(PSECT_ATTR);

! Linkages
!

LINKAGE
    L_FIND_BY_RFA,
    L_FIND_BY_ID,
    L_GETBKT,
    L_REC_OVHD,
    L_RLSBKT;

! External Routines
!

EXTERNAL ROUTINE
    RM$GETBKT	: RL$GETBKT,
    RM$REC_OVHD	: RL$REC_OVHD,
    RM$RLSBKT	: RL$RLSBKT;


GLOBAL ROUTINE RM$FIND_BY_ID : RL$FIND_BY_ID =

!++
!
! FUNCTIONAL DESCRIPTION:
!
! Searches a bucket for a record with the given ID, returns REC_ADDR
!
! CALLING SEQUENCE:
!
!	RM$FIND_BY_ID()
!
! INPUT PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	AP - ID of record to find
!	BKT_ADDR - address of bucket to search in
!	IFAB - for prologue version
!	IDX_DFN - compression flags and key of reference
!
! OUTPUT PARAMETERS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	REC_ADDR - address of record found
!
! ROUTINE VALUE:
!
!	SUC if found, RNF or DEL otherwise
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    BUILTIN
	AP;

    EXTERNAL REGISTER
	R_BKT_ADDR_STR,
	R_REC_ADDR_STR,
	R_IDX_DFN_STR,
	R_IFAB_STR,
	R_IRAB_STR;

    GLOBAL REGISTER
	R_REC_SIZE;

    LOCAL
	EOB,				! local for end of bucket address
	SAVE_LEVEL;			! Save the level of the bucket. This
					!  is used and destroyed by RM$REC_OVHD

    MAP
	AP	: WORD;

    ! Calculate beginning and end of search addresses
    !
    REC_ADDR = .BKT_ADDR + BKT$C_OVERHDSZ;
    EOB = .BKT_ADDR + .BKT_ADDR[BKT$W_FREESPACE];

    ! Keep track of last key with no front compression in order to 
    ! optimize rebuilding the primary key when we find the right record
    !
    IRAB[IRB$L_LST_NCMP] = .REC_ADDR;

    ! Compute the level of the bucket. 
    !
    SAVE_LEVEL = 0;

    IF .IDX_DFN [IDX$B_KEYREF] NEQ 0
    THEN
	SAVE_LEVEL = .SAVE_LEVEL - 1;

    ! If not a prologue 3 file, process as before
    !

    IF .IFAB[IFB$B_PLG_VER] LSSU PLG$C_VER_3
    THEN

        ! Step thru the bucket until the record id is matched
        !
	WHILE .REC_ADDR LSSA .EOB
	DO

	    IF .REC_ADDR[IRC$B_ID] EQL .AP

	    THEN
		! This is it! We found the record. Return success.
		!
		RETURN RMSSUC(SUC)

	    ELSE
	 	! Haven't found it yet, keep looking.
		!
  		BEGIN
		REC_SIZE = .SAVE_LEVEL;
		REC_ADDR = .REC_ADDR + RM$REC_OVHD() + .REC_SIZE;
		END
    ELSE

	! Prologue version 3 file, loop until record found
	!

	WHILE .REC_ADDR LSSA .EOB
	DO

	    IF .REC_ADDR[IRC$W_ID] EQL .AP
	    THEN
		RETURN RMSSUC(SUC)		! We found the record

	    ELSE
		BEGIN

		LOCAL
		    REC_OVHD;

		REC_SIZE = .SAVE_LEVEL;
		REC_OVHD = RM$REC_OVHD();

		! If compressed primary key, save address of record with a zero
		! compression count
		!
		IF  .IDX_DFN[IDX$V_KEY_COMPR]
		  AND .(.REC_ADDR + .REC_OVHD + 1)<0,8> EQL 0
		THEN
		    IRAB[IRB$L_LST_NCMP] = .REC_ADDR;

		REC_ADDR = .REC_ADDR + .REC_OVHD + .REC_SIZE;
		END;


    ! Can't find this ID at all. Return record not found code.
    !
    IF .IFAB[IFB$B_PLG_VER] LSSU PLG$C_VER_3
    THEN

	! Prolog 1 or 2 file, return RNF.
	!
	RETURN RMSERR(RNF)
    ELSE

	! Prolog 3 file, return DEL if RRV has been deleted
	!
	IF .AP GEQU .BKT_ADDR[ BKT$W_NXTRECID ]
	THEN

	    ! id being searched for is not less than next record id,
	    ! so it can't correspond to a deleted RRV, this return RNF
	    !
	    RETURN RMSERR(RNF)
	ELSE

	    ! RRV has been deleted, therefore the record must have been deleted
	    !
	    RETURN RMSERR(DEL);

    END;


GLOBAL ROUTINE RM$FIND_BY_RFA (VBN) : RL$FIND_BY_RFA =

!++
!
! FUNCTIONAL DESCRIPTION:
!
! Get bucket, search for record with matching ID, and return
! address of record found
!
! CALLING SEQUENCE:
!
!	RM$FIND_BY_RFA (VBN)
!
! INPUT PARAMETERS:
!
!	VBN - VBN of bucket to search
!
! IMPLICIT INPUTS:
!
!	IDX_DFN - address of index descriptor
!	IRAB - address of internal RAB
!	IRAB [ NORLS_RNF ] - do release bucket on RNF error
!	IRAB [ CACHEFLAGS ] - passed through to GETBKT
!	AP - ID of record to search for
!
! OUTPUT PARAMETERS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	REC_ADDR - address of record with ID match
!	IRAB[IRB$L_CURBDB] = BDB of bucket searched if success
!			= 0 if any error
!	IRAB[ NORLS_RNF ] = 0 always
!
! ROUTINE VALUE:
!
!	SUC - if search successful
!	RNF - if no match
!	RFA - bad level (neq 0)
!	error codes passed back if GETBKT error
!
! SIDE EFFECTS:
!
!	Bucket searched is accessed if success,
!	released on any error unless NORLS_RNF is set,
!		then do not release on RNF error
!
!--

    BEGIN

    LOCAL
	ST;

    BUILTIN
	AP;

    EXTERNAL REGISTER
	R_REC_ADDR_STR,
	R_IDX_DFN_STR,
	COMMON_RAB_STR;

    GLOBAL REGISTER
	COMMON_IO_STR;

    LABEL
	BLOCK;

    REC_ADDR = .AP;				! save AP across IO

    ! Get access to bucket, save status, and check for success.
    !

    IF NOT (ST = RM$GETBKT(.VBN, .IDX_DFN[IDX$B_DATBKTSZ]*512))
    THEN
	BEGIN
	IRAB[IRB$L_CURBDB] = 0;
	IRAB[IRB$V_NORLS_RNF] = 0;
	RETURN .ST;

	END;

    IRAB[IRB$L_CURBDB] = .BDB;			! set up CURBDB

    ! Got the bucket. Now make sure we're at level 0.
    !
    AP = .REC_ADDR;				! restore AP

BLOCK :
    BEGIN

    IF .BKT_ADDR[BKT$B_LEVEL] NEQ 0
    THEN

	IF .IFAB[ IFB$B_PLG_VER ] LSSU PLG$C_VER_3
	THEN
	    BEGIN
	    ! PLG 2 file, return RFA error
	    !
	    ST = RMSERR(RFA);
	    LEAVE BLOCK;
	    END
	ELSE
	    BEGIN
	    ! PLG 3 file, more likely error is record deleted and then bucket
	    ! reclaimed
	    !
	    ST = RMSERR(DEL);
	    LEAVE BLOCK;
	    END;

    ! Bucket level OK. Now search for ID.
    !

    IF (ST = RM$FIND_BY_ID())
    THEN
	(IRAB[IRB$V_NORLS_RNF] = 0;
	RETURN .ST);

    IF .IRAB[IRB$V_NORLS_RNF]
    THEN
	(IRAB[IRB$V_NORLS_RNF] = 0;
	RETURN .ST);

    END;					! end of block BLOCK

    ! Common error code - zero current BDB and return error code.
    ! Clear NORLS_RNF flag always.
    !
    RM$RLSBKT(0);
    IRAB[IRB$L_CURBDB] = 0;
    IRAB[IRB$V_NORLS_RNF] = 0;
    RETURN .ST;

    END;

END

ELUDOM
