	$BEGIN	RM0RSET,017,$RMSZ,<SETUP FOR A RAB FUNCTION>,<NOWRT,QUAD>


;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; Facility: rms32
;
; Abstract:
;		routine to perform common setup for a rab function
;
; Environment:
;		star processor running starlet exec.
;
; Author: L F Laverdure,	 creation date: 5-JAN-1977
;
; Modified By:
;
;	V02-017	CDS0001		C Saether	10-Dec-1981
;		Rename psect.
;
;	V02-016	REFORMAT	P S Knibbe	23-Jul-1980
;
;	V015	RAN0003		L F Laverdure	10-OCT-1978	13:46
;		file sharing code enhancements
;
; 01	-
;--


	.SBTTL	DECLARATIONS

;
; Include Files:
;

;
; Macros:
;

	$IMPDEF
	$RABDEF
	$IRBDEF
	$IFBDEF
	$RMSDEF

;
; Equated Symbols:
;

;
; Own Storage:
;


	.SBTTL	RM$RSET - COMMON SETUP FOR RAB FUNCTION ROUTINE

;++
;
;  RM$RSET
;  RM$RSET_ALT
;
;      this routine performs common setup for a rab function call
;      including the following:
;
;	1. call rm$rabchk to check arglist, set base regs
;	2. check for valid isi and set irab and ifab addr
;	3. check for stream idle and set to busy
;	4. clear the sts and stv fields of the rab
;	5. set asy irab bit from rab
;	6. store the arglist addr and caller's mode in the irab
;	   and save sp entry value in imp$l_saved_sp
;	7. perform additional setups including checking fac for
;	   operation and clearing find_last flag
;
;
; Calling sequence:
;
;   called via the $rabset macro which expands into:
;
;	bsbw	rm$rset
;	.byte	function_code
;
;  alternate entry at rm$rset_alt to perform functions  4, 5, 6, & 7 only.
;  r7, r8, r9, r10, and r11 must be set as per output prior to call.
;
;
; Input Parameters:
;
;	sp	stack pointer
;	ap	argument list addr
;
; Implicit Inputs:
;
;	the in-line 1-byte function code.
;	the contents of the rab
;
; Output Parameters:
;
;	r11	impure area address
;	r10	ifab address
;	r9	irab address
;	r8	rab address
;	r7	caller's mode
;	r0 thru r5 destroyed
;
; Implicit Outputs:
;
;	imp$l_saved_sp is set to the value of sp+4
;	the sts and stv fields of the rab are zeroed
;
; Completion Codes:
;
;	none.  if an error is detected returns to user (not caller)
;	after appropriate cleanup.  the user receives a standard
;	rms error code, in particular, isi, act, and those returned by
;	rm$rabchk.
;
;	if all o.k., returns to caller after the 1-byte
;	in-line function code.
;
; Side Effects:
;
;	none
;
;--



;++
;
;  convert isi value to irab address (general case)
;  note: this is not the entry point to rm$rset!
;
;--

CVTISI:	MOVL	#IMP$L_IRABTBL/4,R0	; irab table offset/4
	BSBW	RM$GTIADR		; get irab addr
	BRB	CHKIRB			; continue

;++
;
;  entry point to rm$rset
;
;  validate rab and perform other basic setups
;
;--

RM$RSET::
	BSBB	RM$RABCHK		; valid rab? (exits if invalid)

;
;NOTE: SETS R11 TO IMPURE ADDR
;     r9 to isi
;     r8 to rab addr
;     r7 to caller's mode
;++
;
;  get the irab address and check for a valid irab
;
;--

	BEQL	CHKIRB			; branch if isi value bad
	CMPW	R9,#IMP$C_ENTPERSEG	; simple isi case (in 1st segment)?
	BGTRU	CVTISI			; branch if not
	MOVL	IMP$L_IRBTBLINK(R11)[R9],R9; get irab address
CHKIRB:	BNEQ	5$			; branch if irab allocated
	BRW	ERRISI			; error is irab not allocated

5$:	.IF	NE $$RMSTEST&$$RMS_TBUGCHK
	CMPB	IRB$B_BID(R9),#IRB$C_BID
	BEQL	10$			; branch if valid irab
	BRW	ERRBUG			; error...invalid irab
10$:	.ENDC

;++
;
;  set r10 = ifab address
;
;--

	MOVL	IRB$L_IFAB_LNK(R9),R10	; get ifab address

	.IF	NE $$RMSTEST&$$RMS_TBUGCHK
	CMPB	IFB$B_BID(R10),#IFB$C_BID; really an ifab?
	BNEQ	ERRBUG
	.ENDC

	BBS	#IFB$V_BUSY,(R10),ERRACT; branch if ifab busy


;++
;
;  set busy, checking if already active, and clear async and ppf_image flags
;
;--

	BBSS	#IRB$V_BUSY,(R9),ERRRSA	; set busy, branch if busy already

	IRB$M_PPF_IMAGE	= 1@<IRB$V_PPF_IMAGE-<IRB$L_BKPBITS*8>>
	IRB$M_ASYNC	= 1@<IRB$V_ASYNC-<IRB$L_BKPBITS*8>>

	BICB2	#IRB$M_PPF_IMAGE!IRB$M_ASYNC,IRB$L_BKPBITS(R9); clear flags
	BBS	#RAB$V_PPF_IND+<RAB$W_ISI*8>,(R8),CHKIND; branch if indirect ppf

;++
;
;  alternate entry from rms0conn here
;
;  clear rab$l_sts and rab$l_stv
;  set asynchronous flag if required and probe async arg list
;  store caller's mode and arglist addr in irab
;
;--

RM$RSET_ALT::
	ASSUME	RAB$L_STV EQ RAB$L_STS+4
	CLRQ	RAB$L_STS(R8)		; zero sts and stv in rab

;
;  perform asynchronous setup
;

	ASSUME	RAB$V_ASY EQ 0
	BLBC	RAB$L_ROP(R8),50$	; branch if sync
	ASSUME	IMP$W_RMSSTATUS EQ 0
	ASSUME	IMP$V_IIOS EQ 0
	BLBC	(R11),50$		; branch if this is a ppf forcing

;
; synchronous operation
;

	SSB	#IRB$V_ASYNC,(R9)	; flag async operation
	MOVZBL	(AP),R1			; pick up argument count
	ROTL	#2,R1,R1		; get length of args in bytes
	IFNORD	R1,4(AP),ERRIAL,R7	; branch if arglist not readable

;
;  store caller's mode and arglist addr in irab
;

50$:	MOVB	R7,IRB$B_MODE(R9)	; save caller's mode
	MOVL	AP,IRB$L_ARGLST(R9)	; save pointer to arglist

	.IF	NE $$RMSTEST&$$RMS_TBUGCHK
	MOVL	R8,IRB$L_LAST_RAB(R9)	; save addr this rab
	.ENDC


;++
;
;  pick up in-line byte specifying optional functions and checking
;
;--

	MOVZBL	@0(SP),R1		; get byte
	BEQL	SAVESP			; branch if nothing to do
	BBCC	#4,R1,60$		; branch if no need to clr find_last

;++
;
;  cflg (bit 4 set) - clear last-operation-was-a-find flag
;
;--

	CSB	#IRB$V_FIND_LAST,(R9)

;++
;
;  verify accessed for block i/o or not based on bio (bit 3) parameter
;
;--

60$:	BBSC	#3,R1,CHKBIO		; branch if a block i/o function
	BBS	#IFB$V_BIO,-		; branch if file accessed
		IFB$B_FAC(R10),-	;  for block i/o
		ERRIOP			;  (invalid operation)
	BBSC	#IRB$V_BIO_LAST,-	; this is not a block operation so
		(R9),CHKFAC		;  clear block i/o last

;++
;
;  check for appropriate access for function
;  (note: r1 now has bit offset to required fac access)
;
;--

CHKFAC:	BBS	#5,R1,SAVESP		; brnch if flag says any fac ok
	BBC	R1,IFB$B_FAC(R10),ERRFAC; branch if needed access not on

;++
;
;	see if frb allocated and if so, must take ownership of the shared file
;
;--

SAVESP:	ADDL3	#4,SP,IMP$L_SAVED_SP(R11); save stack entry value

;
; less return pc
;

	MOVL	IFB$L_FRB_PTR(R10),R5	; get frb
	BEQL	10$			; branch if no frb
	BSBW	RM$TAKE_PPQ		; get the frb via ppq
	BSBW	RM$TAKE_SIFAB		; get ownership of the sifab
10$:

;++
;
;  bump return pc past the in-line function byte and return
;
;--

	INCL	(SP)
	RSB

;++
;
;  this is an indirect operation on a ppf.  set ppf_image flag.
;
;--

CHKIND:	BBCS	#IRB$V_PPF_IMAGE,(R9),RM$RSET_ALT; say its indirect and branch


;++
;
;  error returns
;
;--

ERRISI:	$PSECT_BR	L$RMS0
	RMSERR	ISI			; invalid isi value
	BRB	ERROR
	$PSECT_RESTORE

;
;  internal rms problem  -  irab table pointed to an invalid irab
;			 or irab pointed to invalid ifab!
;

ERRBUG:	RMSTBUG	FTL$_BADIFAB

;

ERRACT:	$PSECT_BR	L$RMS0
	RMSERR	ACT			; stream already active
	BRB	ERROR
	$PSECT_RESTORE

;

ERRRSA:	$PSECT_BR	L$RMS0
	RMSERR	RSA			; record stream active
ERROR:	BRW	RM$EX_NOSTR
	$PSECT_RESTORE

;

ERRIAL:	$PSECT_BR	L$RMS0
	RMSERR	IAL			; unreadable arg list (async)
	BRB	ERROR1
	$PSECT_RESTORE

ERRIOP:	$PSECT_BR	L$RMS0

;++
;
;  entry point from rms$delete (attempted delete for seq. file org)
;
;--

RM$ERRIOP::
	RMSERR	IOP			; wrong type of access re. bio
	BRB	ERROR1
	$PSECT_RESTORE

;

ERRFAC:	$PSECT_BR	L$RMS0
RM$ERRFAC::
	RMSERR	FAC			; not accessed for function
ERROR1:	BRW	RM$EXRMS		; get out
	$PSECT_RESTORE


;++
;
;  file must be accessed to allow block i/o
;
;--

CHKBIO:	BBS	#IFB$V_BIO,IFB$B_FAC(R10),CHKFAC; branch if file accessed for bio
	BBC	#IFB$V_BRO,IFB$B_FAC(R10),ERRIOP; branch if also not block
						;  and record access
;++
;
;  file is accessed for mixed block and record i/o
;
;  set the block i/o last flag and also set the 'switched between block
;  and record i/o' flag if last operation was not a block i/o operation,
;  else clear flag
;
;--

	CSB	#IRB$V_BRO_SW,(R9)
	BBSS	#IRB$V_BIO_LAST,(R9),CHKFAC
	BBCS	#IRB$V_BRO_SW,(R9),CHKFAC; set bro_sw and branch


	.END
