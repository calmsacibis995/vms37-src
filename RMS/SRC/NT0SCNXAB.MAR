	$BEGIN	NT0SCNXAB,001,NF$NETWORK,<SCAN XAB CHAIN>


;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; Facility: RMS
;
; Abstract:
;
;	This module contains routines that scan:
;	(1) the user XAB chain and examine FAL's capabilities to determine
;	    which DAP Extended Attributes messages should be requested to be
;	    returned by the remote FAL.
;	(2) the user Name Block and examine FAL's capabilities to determine
;	    if a DAP (resultant) Name message should be requested to be
;	    returned by the remote FAL.
;
; Environment: VAX/VMS, executive mode
;
; Author: James A. Krycka,	Creation Date:	05-JUN-1979
;
; Modified By:
;
;	V03-001	KRM0043		K R Malik	 5-Apr-1982
;		Add NT$SCAN_KEYXAB and NT$SCAN_ALLXAB routines and rewrite
;		NT$SCAN_NAMBLK to probe $NAM block.
;
;	V02-009	JAK0063		J A Krycka	27-AUG-1981
;		Support the Revision Date and Time XAB.
;
;	V02-008	JAK0059		J A Krycka	16-JUN-1981
;		Recognize the extended length Date and Time XAB and the
;		extended length Key Definition XAB.
;
;	V02-007	REFORMAT	J A Krycka	26-JUL-1980
;
;--

	.SBTTL	DECLARATIONS

;
; Include Files:
;

	$DAPCNFDEF			; Define DAP Configuration message
	$DAPACCDEF			; Define DAP Access message
	$FABDEF				; Define File Access Block symbols
	$IFBDEF				; Define IFAB symbols
	$NAMDEF				; Define Name Block symbols
	$NWADEF				; Define Network Work Area symbols
	$XABDEF				; Define symbols common to all XABs
	$XABALLDEF			; Define Allocation XAB symbols
	$XABDATDEF			; Define Date and Time XAB symbols
	$XABFHCDEF			; Define File Header Char symbols
	$XABKEYDEF			; Define Key Definition XAB symbols
	$XABPRODEF			; Define Protection XAB symbols
	$XABRDTDEF			; Define Revision Date/Time XAB symbols
	$XABSUMDEF			; Define Summary XAB symobls
;	$XABTRMDEF			; Define Terminal XAB symbols

;
; Macros:
;
;	None
;
; Equated Symbols:
;

	ASSUME	NWA$Q_FLG EQ 0

;
; Own Storage:
;
;	None
;

	.SBTTL	NT$SCAN_XABCHN - SCAN XAB CHAIN

;++
; NT$SCAN_XABCHN - scans the user XAB chain and examines FAL's capabilities
;	to determine which DAP Attributes and Extended Attributes messages to
;	request the remote FAL to return. It also verifies that all Allocation
;	XABs found are chained sequentially and that all Key Definition XABs
;	found are chained sequentially (i.e., they form sub-chains).
;
;	The message request mask is returned in R2.
;
; Calling Sequence:
;
;	BSBW	NT$SCAN_XABCHN
;
; Input Parameters:
;
;	R6	Close operation flag
;	R7	NWA (=DAP) address
;	R8	FAB address
;	R9	IFAB address
;	R10	IFAB/FWA address
;	R11	Impure Area address
;
; Implicit Inputs:
;
;	User ALL, DAT, FHC, KEY, PRO, RDT, and SUM XABs
;	DAP$Q_SYSCAP bits KEYXAB, ALLXAB, SUMXAB, TIMXAB, PROXAB,
;			  CHGTIM, CHGPRO
;
; Output Parameters:
;
;	R0	Status code (RMS)
;	R1	Destroyed
;	R2	Message request mask
;	R3-R5	Destroyed
;
; Implicit Outputs:
;
;	NWA$B_ALLXABCNT
;	NWA$B_KEYXABCNT
;	NWA$L_ALLXABADR
;	NWA$L_DATXABADR
;	NWA$L_FHCXABADR
;	NWA$L_KEYXABADR
;	NWA$L_PROXABADR
;	NWA$L_RDTXABADR
;	NWA$L_SUMXABADR
;
; Completion Codes:
;
;	Standard RMS completion codes
;
; Side Effects:
;
;	User XABs are probed for writeability.
;
;--

NT$SCAN_XABCHN::			; Entry point
	$ZERO_FILL-			; Zero XAB scan results block
		DST=NWA$T_SCAN(R7)-	;  Address of block
		SIZE=#NWA$C_SCAN	;  Length of block
					; Zero R2 (request mask) as side effect
					;  of executing a MOVC5 instruction
	MOVL	FAB$L_XAB(R8),R3	; Get first XAB address in chain
	BRB	CHKXAB			;

;+
; Process next XAB in the chain.
;
; Note: The Terminal XAB is not supported; if found in the XAB chain it will be
;	ignored.
;-

	ASSUME	XAB$C_DAT EQ 18
	ASSUME	XAB$C_PRO EQ 19
	ASSUME	XAB$C_ALL EQ 20
	ASSUME	XAB$C_KEY EQ 21
	ASSUME	XAB$C_SUM EQ 22
	ASSUME	XAB$C_FHC EQ 29
	ASSUME	XAB$C_RDT EQ 30
;	ASSUME	XAB$C_TRM EQ 31		; Currently not implemented by RMS-32

NXTXAB:	MOVL	R3,R4			; Save address of current XAB in chain
	MOVL	XAB$L_NXT(R3),R3	; Get address of next XAB in chain
CHKXAB:	BEQL	EXIT			; Branch if none
	IFNORD	#XAB$L_NXT+4,(R3),-	; Probe for readability thru NXT field
		ERRXAB,IFB$B_MODE(R9)	;  of XAB and branch on failure
	PUSHAB	B^NXTXAB		; Push return address on stack
	$CASEB	SELECTOR=XAB$B_COD(R3)-	; Dispatch to routine to process:
		BASE=#XAB$C_DAT-	;
		DISPL=<-		;
		    DATE_TIME-		;  XABDAT
		    PROTECTION-		;  XABPRO
		    ALLOCATION-		;  XABALL
		    KEY_DEFINITION-	;  XABKEY
		    SUMMARY-		;  XABSUM
		    ERRCOD-		;  Invalid XAB type
		    ERRCOD-		;  Invalid XAB type
		    ERRCOD-		;  Invalid XAB type
		    ERRCOD-		;  Invalid XAB type
		    ERRCOD-		;  Invalid XAB type
		    ERRCOD-		;  Invalid XAB type
		    FILE_HEADER-	;  XABFHC
		    REV_DATE_TIME-	;  XABRDT
		>			;

;+
; Exit paths.
;-

EXIT:	RMSSUC				; Return success
	RSB				; Exit with RMS code in R0
ERRCOD:	POPR	#^M<R0>			; Discard return address
	RMSERR	COD			; Invalid XAB type code
	BRB	SETSTV			;
ERRIMX:	POPR	#^M<R0>			; Discard return address
	RMSERR	IMX			; Duplicate XAB or XABs are not dense
	BRB	SETSTV			;
ERRXAB2:POPR	#^M<R0,R1>		; Discard return addresses
ERRXAB:	RMSERR	XAB			; XAB too short or not accessible
SETSTV:	MOVL	R3,FAB$L_STV(R8)	; Return XAB address in STV field
	RSB				; Exit with RMS code in R0

;+
; This routine checks the control block for correct length and writeability.
;-

VALIDATE_XAB:				; Entry point
	MOVZBL	XAB$B_BLN(R3),R0	; Get stated length of block
	CMPL	R0,R1			; Compare against expected length
	BLSSU	ERRXAB2			; Branch if too small
	IFNOWRT	R0,(R3),ERRXAB2,-	; Probe for writeability and branch on
		IFB$B_MODE(R9)		;  failure
	RSB				; Exit

;+
; This routine handles the Date and Time XAB.
;-

DATE_TIME:				; Entry point
	MOVZBL	#XAB$C_DATLEN_V2,R1	; Get minimum (i.e., V2) length of XAB
	BSBB	VALIDATE_XAB		; Check length and accessibility
	TSTL	NWA$L_DATXABADR(R7)	; Declare error as this is a duplicate
	BNEQ	ERRIMX			;  XAB
	MOVL	R3,NWA$L_DATXABADR(R7)	; Save address of Date and Time XAB
	BBC	#DAP$V_TIMXAB,-		; Branch if Date and Time message is
		DAP$Q_SYSCAP(R7),10$	;  not supported by partner
	BLBS	R6,10$			; This XAB is not an input on close
	$SETBIT	#DAP$V_DSP_TIM,R2	; Update request mask
10$:	RSB				; Exit

;+
; This routine handles the Protection XAB.
;-

PROTECTION:				; Entry point
	MOVZBL	#XAB$C_PROLEN,R1	; Get length of XAB
	BSBB	VALIDATE_XAB		; Check length and accessibility
	TSTL	NWA$L_PROXABADR(R7)	; Declare error as this is a duplicate
	BNEQ	ERRIMX			;  XAB
	MOVL	R3,NWA$L_PROXABADR(R7)	; Save address of Protection XAB
	BBC	#DAP$V_PROXAB,-		; Branch if Protection message is
		DAP$Q_SYSCAP(R7),20$	;  not supported by partner
	BLBC	R6,10$			; An additional system capabilities
	BBC	#DAP$V_CHGPRO,-		;  check is required if this is a
		DAP$Q_SYSCAP(R7),20$	;  change operation
10$:	$SETBIT	#DAP$V_DSP_PRO,R2	; Update request mask
20$:	RSB				; Exit

;+
; This routine handles the Allocation XAB.
;-

ALLOCATION:				; Entry point
	MOVZBL	#XAB$C_ALLLEN,R1	; Get length of XAB
	BSBB	VALIDATE_XAB		; Check length and accessibility
	INCB	NWA$B_ALLXABCNT(R7)	; Increment XAB counter
	CMPB	NWA$B_ALLXABCNT(R7),#1	; Branch if this is first
	BEQL	10$			;  Allocation XAB in chain
	CMPB	XAB$B_COD(R4),#XAB$C_ALL; Check previous XAB in chain;
	BEQL	20$			;  it must also be an Allocation XAB
	BRB	ERRIMX			;  else this XAB is out of order
10$:	MOVL	R3,NWA$L_ALLXABADR(R7)	; Save address of first Allocation XAB
	BBC	#DAP$V_ALLXAB,-		; Branch if Allocation message is
		DAP$Q_SYSCAP(R7),20$	;  not supported by partner
	$SETBIT	#DAP$V_DSP_ALL,R2	; Update request mask
20$:	RSB				; Exit

;+
; This routine handles the Key Definition XAB.
;-

KEY_DEFINITION:				; Entry point
	MOVZBL	#XAB$C_KEYLEN_V2,R1	; Get minimum (i.e., V2) length of XAB
	BSBB	VALIDATE_XAB		; Check length and accessibility
	INCB	NWA$B_KEYXABCNT(R7)	; Increment XAB counter
	CMPB	NWA$B_KEYXABCNT(R7),#1	; Branch if this is first
	BEQL	10$			;  Key Definition XAB in chain
	CMPB	XAB$B_COD(R4),#XAB$C_KEY; Check previous XAB in chain;
	BEQL	20$			;  it must also be a Key Definition XAB
	BRB	ERRIMX1			;  else this XAB is out of order
10$:	MOVL	R3,NWA$L_KEYXABADR(R7)	; Save address of first Key Def XAB
	BBC	#DAP$V_KEYXAB,-		; Branch if Key Definition message is
		DAP$Q_SYSCAP(R7),20$	;  not supported by partner
	$SETBIT	#DAP$V_DSP_KEY,R2	; Update request mask
20$:	RSB				; Exit

;+
; This routine handles the Summary XAB.
;-

SUMMARY:				; Entry point
	MOVZBL	#XAB$C_SUMLEN,R1	; Get length of XAB
	BSBW	VALIDATE_XAB		; Check length and accessibility
	TSTL	NWA$L_SUMXABADR(R7)	; Declare error as this is a duplicate
	BNEQ	ERRIMX1			;  XAB
	MOVL	R3,NWA$L_SUMXABADR(R7)	; Save address of Summary XAB
	BBC	#DAP$V_SUMXAB,-		; Branch if Summary message is
		DAP$Q_SYSCAP(R7),10$	;  not supported by partner
	$SETBIT	#DAP$V_DSP_SUM,R2	; Update request mask
10$:	RSB				; Exit

;+
; This routine handles the File Header Characteristics XAB.
;
; Note: The File Header Characteristics XAB is supported in DAP through the
;	DAP Attributes message. Thus there is no system capabilities check
;	associated with it.
;-

FILE_HEADER:				; Entry point
	MOVZBL	#XAB$C_FHCLEN,R1	; Get length of XAB
	BSBW	VALIDATE_XAB		; Check length and accessibility
	TSTL	NWA$L_FHCXABADR(R7)	; Declare error as this is a duplicate
	BNEQ	ERRIMX1			;  XAB
	MOVL	R3,NWA$L_FHCXABADR(R7)	; Save address of File Header Char XAB
	$SETBIT	#DAP$V_DSP_ATT,R2	; Update request mask
	RSB				; Exit

;+
; Note:	Both the Date and Time XAB and the Revision Date and Time XAB are
;	supported in DAP through the DAP Date and Time message.
;-

REV_DATE_TIME:				; Entry point
	MOVZBL	#XAB$C_RDTLEN,R1	; Get length of XAB
	BSBW	VALIDATE_XAB		; Check length and accessibility
	TSTL	NWA$L_RDTXABADR(R7)	; Declare error as this is a duplicate
	BNEQ	ERRIMX1			;  XAB
	MOVL	R3,NWA$L_RDTXABADR(R7)	; Save address of Rev Date and Time XAB
	BBC	#DAP$V_TIMXAB,-		; Branch if Date and Time message
		DAP$Q_SYSCAP(R7),20$	;  not supported by partner
	BLBC	R6,10$			; An additional system capabilities
	BBC	#DAP$V_CHGTIM,-		;  check is required if this is a
		DAP$Q_SYSCAP(R7),20$	;  change operation
10$:	$SETBIT	#DAP$V_DSP_TIM,R2	; Update request mask
20$:	RSB				; Exit

ERRIMX1:BRW	ERRIMX			; Branch aid

	.SBTTL	NT$SCAN_KEYXAB - SCAN KEY DEFINITION XAB
	.SBTTL	NT$SCAN_ALLXAB - SCAN ALLOCATION DEFINITION XAB
;++
; NT$SCAN_KEYXAB - Scans specific KEY DEFINITION XAB without scanning the
;	entire XAB chain.
; NT$SCAN_ALLXAB - Scans specific ALLOCATION XAB without scanning the
;	entire XAB chain.
;
; Calling Sequence:
;
;	BSBW	NT$SCAN_KEYXAB
;	BSBW	NT$SCAN_ALLXAB
;
; Input Parameters:
;
;	R6	ALLOCATION XAB address /KEY DEFINITION XAB address
;	R7	NWA (=DAP) address
;	R8	FAB address
;	R9	IFAB address
;	R10	IFAB/FWA address
;	R11	Impure Area address
;
; Output Parameters:
;
;	R0	Status code (RMS)
;	R1	Destroyed
;	R3	Destroyed
;--

NT$SCAN_KEYXAB::			; Entry point
	MOVZBL	#XAB$C_KEYLEN_V2,R1	; Get minimum (i.e., V2) length of XAB
	BRB	COMMON_SCAN		; Join common code
NT$SCAN_ALLXAB::			; Entry point
	MOVZBL	#XAB$C_ALLLEN,R1	; Get minimum length in XAB
COMMON_SCAN:				; Common code
	MOVL	R6,R3			; Get address of XAB to probe
	IFNORD	#XAB$L_NXT+4,(R3),-	; Probe for readability thru NXT field
		10$,IFB$B_MODE(R9)	;  of XAB and branch on failure
	MOVZBL	XAB$B_BLN(R3),R0	; Get stated length of block
	CMPL	R0,R1			; Compare against expected length
	BLSSU	10$			; Branch if too small
	IFNOWRT	R0,(R3),10$,-		; Probe for writeability and branch on
		IFB$B_MODE(R9)		;  failure
	RMSSUC				; Return success
	RSB				; Exit
10$:	BRW	ERRXAB			; Failure

	.SBTTL	NT$SCAN_NAMBLK - SCAN NAM BLOCK

;++
; NT$SCAN_NAMBLK - scans the user Name Block and checks FAL's capabilities
;	to determine if a DAP (resultant) Name message should be requested
;	to be returned by the remote FAL.
;
;	An updated message request mask is returned in R2.
;
; Calling Sequence:
;
;	BSBW	NT$SCAN_NAMBLK
;
; Input Parameters:
;
;	R2	Message request mask
;	R7	NWA (=DAP) address
;	R8	FAB address
;	R9	IFAB address
;	R10	IFAB/FWA address
;	R11	Impure Area address
;
; Implicit Inputs:
;
;	User Name Block
;
; Output Parameters:
;
;	R0	Status code (RMS)
;	R1	Destroyed
;	R2	Updated message request mask
;
; Implicit Outputs:
;
;	None
;
; Completion Codes:
;
;	None
;
; Side Effects:
;
;	None
;
;--

NT$SCAN_NAMBLK::			; Entry point
	PUSHR	#^M<R6,R7>		; Save registers used
	MOVL	FAB$L_NAM(R8),R7	; Get $NAM block address
	BEQL	10$			; Branch if none
	BSBW	RM$CHKNAM		; Check $NAM block validity
	BEQL	10$			; On error then return
	TSTL	NAM$L_RSA(R7)		; Check for resultant string address
	BEQL	10$			; Branch if none
	POPR	#^M<R6,R7>		; Restore registers
	BBC	#DAP$V_NAMMSG,-		; Branch if partner does not support
		DAP$Q_SYSCAP(R7),20$	;  Name message
	$SETBIT	#DAP$V_DSP_NAM,R2	; Request Name message
	RSB				; Exit
10$:	POPR	#^M<R6,R7>		; Restore registers
20$:	RSB				; Exit

	.END				; End of module
