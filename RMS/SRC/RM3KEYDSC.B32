
MODULE RM3KEYDSC (LANGUAGE (BLISS32) ,
		IDENT = 'V03-000'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:	RMS32 INDEX SEQUENTIAL FILE ORGANIZATION
!
! ABSTRACT:
!                This module contains routines to allocate the key descriptors
!
!
! ENVIRONMENT:
!
!		VAX/VMS OPERATING SYSTEM
!
!--

!
! AUTHOR:	Wendy Koenig     CREATION DATE:        	27-MAR-78  9:28
!
! MODIFIED BY:
!
!   V02-011	PSK0003		Paulina S. Knibbe	17-Apr-1981
!		Change the logic to initialize the bktyp fields
!		because we are keeping track of compression status
!		in the prologue
!
!   V02-010	PSK0002		Paulina S. Knibbe	10-Apr-1981
!		Fill in the bktyp fields in the index descriptor when
!		it is allocated an initialized
!
!   V02-009	PSK0001		Paulina S. Knibbe	12-Mar-1981
!		Add datatype information to each segment in the
!		IDX structure
!
!   V02-008	KPL0001		Peter Lieberwirth	12-Mar-1981
!		Rename PSECT so branches to KEY_DESC won't break.
!
!   V02-007	REFORMAT	Paulina S. Knibbe	23-Jul-1980
!
!   V0006	RAS0013		R. A. Schaefer		22-Jan-1980	14:05
!		Change NID error to DME.
!
!
! REVISION HISTORY:
!
!   D. H. Gillespie, 	2-AUG-78  14:31
!   X0002 - add one long word to in core key descriptor containing area numbers
!
!   Wendy Koenig, 	3-AUG-78  12:38
!   X0003 - ACCESS KEY DESCRIPTORS DIRECTLY, RATHER THAN THRU VBN 1 LINKS
!
!   Wendy Koenig, 	24-OCT-78  14:02
!   X0004 - MAKE CHANGES CAUSED BY SHARING CONVENTIONS
!
!   Wendy Koenig, 	6-NOV-78  13:04
!   X0005 - MAKE PLG ERRORS INTO RPL
!
!****

LIBRARY 'RMSLIB:RMS';

REQUIRE 'RMSSRC:RMSIDXDEF';

!
! define default psects for code
!

PSECT
    CODE = $$RMSSKEYD(PSECT_ATTR),
    PLIT = $RMS3(PSECT_ATTR);

!
! define a local linkage
!

MACRO
    L_FILL_IN =
	RL$FILL_IN = JSB(REGISTER=6) : GLOBAL(R_IFAB,R_IDX_DFN) NOTUSED(8,9)
		NOPRESERVE(2,3,6)
%;

!
! define linkage
!

LINKAGE
    L_AL_KEY_DESC,
    L_CACHE,
    L_CHKSUM,
    L_FILL_IN,
    L_GETBLK,
    L_KEY_DESC,
    L_RELEASE;

!
! external routines
!

EXTERNAL ROUTINE
    RM$CACHE	: RL$CACHE,
    RM$CHKSUM	: RL$CHKSUM,
    RM$GETBLK	: RL$GETBLK,
    RM$RELEASE	: RL$RELEASE;

!
! forward routines
!

FORWARD ROUTINE
    RM$AL_KEY_DESC	: RL$AL_KEY_DESC,
    RM$FILL_IN		: RL$FILL_IN,
    RM$KEY_DESC		: RL$KEY_DESC;

!
! define some local macros
!

MACRO
    KEYOFFSET (SYMBOL, OFF) =
	$BYTEOFFSET(SYMBOL)+(OFF*($BYTESIZE(SYMBOL))),
	$BITPOSITION(SYMBOL),
	$FIELDWIDTH(SYMBOL),
	$EXTENSION(SYMBOL)
%,
    POSITIONMAC (OFF) =
	OFF,$BITPOSITION(IDX$W_POSITION),
	    $FIELDWIDTH(IDX$W_POSITION),$EXTENSION(IDX$W_POSITION)
%,
    SIZEMAC (OFF) =
	OFF+2,$BITPOSITION(IDX$B_SIZE),
	    $FIELDWIDTH(IDX$B_SIZE),$EXTENSION(IDX$B_SIZE)
%,
    TYPEMAC (OFF) =
	OFF+3,$BITPOSITION(IDX$B_TYPE),
	    $FIELDWIDTH(IDX$B_TYPE),$EXTENSION(IDX$B_TYPE)
%;


ROUTINE RM$FILL_IN (DESC) : RL$FILL_IN =

!++
!
! RL$FILL_IN
!
!
! CALLING SEQUENCE:
!	BSBW RM$FILL_IN (DESC)
!
! INPUT PARAMETERS:
!	DESC is the address of the key descriptor in prologue
!
! IMPLICIT INPUTS:
!	R7 -- INDEX DESCRIPTOR address
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	always RMSSUC
!
! SIDE EFFECTS:
!	fills in the index descriptor
!
!--

    BEGIN

    EXTERNAL REGISTER
	R_IFAB_STR,
	R_IDX_DFN_STR;

    MAP
	DESC	: REF BBLOCK;

    LITERAL
	BEGINNING_IDX = $BYTEOFFSET(IDX$B_IANUM),
	BEGINNING_KEY = $BYTEOFFSET(KEY$B_IANUM),
	POSOFFSET = $BYTEOFFSET(IDX$W_POSITION);

    DECR I FROM .DESC[KEY$B_SEGMENTS] - 1 TO 0 DO
	BEGIN

	!
	!
	IDX_DFN[POSITIONMAC(POSOFFSET + (4*.I))] = 
	    .DESC[KEYOFFSET( %QUOTE KEY$W_POSITION, .I)];
	IDX_DFN[SIZEMAC(POSOFFSET + (4*.I))] = 
	    .DESC[KEYOFFSET( %QUOTE KEY$B_SIZE, .I)];
	IDX_DFN[TYPEMAC(POSOFFSET + (4*.I))] =
	    KEY$C_STRING;
	END;

    IF .IFAB[IFB$B_PLG_VER] GTR PLG$C_VER_IDX
    THEN
	
	! Load up the datatype fields for each segment (potentially 
	!  different)
	!
	BEGIN
	DECR I FROM .DESC [KEY$B_SEGMENTS] - 1 TO 0 DO

	    IDX_DFN [TYPEMAC (POSOFFSET + (4*.I))] =
		.DESC [KEYOFFSET (%QUOTE KEY$B_TYPE, .I)];
	END
    ELSE

	! Fix up the first datatype to be correct (in case this 
	! wasn't a segmented key.
	!
	IDX_DFN [TYPEMAC (POSOFFSET)] = .DESC[KEY$B_DATATYPE];

    CH$MOVE(IDX$C_FIXED_BLN - BEGINNING_IDX, .DESC + BEGINNING_KEY,
	.IDX_DFN + BEGINNING_IDX);

    ! Fill in the bucket types for this index
    !

    IF .IFAB [IFB$B_PLG_VER] LSSU PLG$C_VER_3
    THEN
	BEGIN
	IDX_DFN [IDX$B_DATBKTYP] = IDX$C_V2_BKT;
	IDX_DFN [IDX$B_IDXBKTYP] = IDX$C_V2_BKT;
	END
    ELSE

	! First initialize the data bucket type (if 
	! this is the primary key index)
	!
	BEGIN

	IF .IDX_DFN [IDX$B_KEYREF] EQL 0
	THEN
	    
	    IF .IDX_DFN [IDX$V_REC_COMPR]
	    THEN

		IF .IDX_DFN [IDX$V_KEY_COMPR]
		THEN

		    ! Primary key is compressed, data is compressed
		    !
		    IDX_DFN [IDX$B_DATBKTYP] = IDX$C_CMPCMP

		ELSE

		    ! Primary key is not compressed, data is compressed
		    !
		    IDX_DFN [IDX$B_DATBKTYP] = IDX$C_NCMPCMP

	    ELSE

		IF .IDX_DFN [IDX$V_KEY_COMPR]
		THEN

		    ! Primary key is compressed, data is not compressed
		    !
		    IDX_DFN [IDX$B_DATBKTYP] = IDX$C_CMPNCMP

		ELSE

		    ! Primary key is not compressed, data is not compressed
		    !
		    IDX_DFN [IDX$B_DATBKTYP] = IDX$C_NCMPNCMP;

	! Now initialize the index bucket type
	!

	IF .IDX_DFN [IDX$V_IDX_COMPR]
	THEN
	    IDX_DFN [IDX$B_IDXBKTYP] = IDX$C_CMPIDX
	ELSE
	    IDX_DFN [IDX$B_IDXBKTYP] = IDX$C_NCMPIDX;

	END;

    RETURN RMSSUC();

    END;


GLOBAL ROUTINE RM$AL_KEY_DESC (DESC) : RL$AL_KEY_DESC =

!++
!
! RM$AL_KEY_DESC
!
!	 this routine allocates the in-memory index descriptor,
!		links it in, and fills it in
!
! CALLING SEQUENCE:
!	BSBW RM$AL_KEY_DESC
!
! INPUT PARAMETERS:
!	desc -- pointer to descriptor in prologue
!
! IMPLICIT INPUTS:
!	R10	IFAB address
!	R11	IMPURE AREA address
!
! OUTPUT PARAMETERS:
!
! IMPLICIT OUTPUTS:
!	the address of the index descriptor is returned in IDX_DFN
!
! ROUTINE VALUE:
!	standard rms, in particular SUC, DME
!
! SIDE EFFECTS:
!	the index descriptor is allocated, linked in, filled in
!
!--

    BEGIN

    ! define external registers
    !

    EXTERNAL REGISTER
	R_IDX_DFN_STR,
	R_IMPURE_STR,
	R_IFAB_STR;

    MAP
	DESC	: REF BBLOCK;		! desc points to a key descriptor

    ! if the key's datatype is illegal return an error
    !

    IF .DESC[KEY$B_DATATYPE] GTRU KEY$C_MAX_DATA
    THEN
	RETURN RMSERR(DTP);

    !
    !
    BEGIN

    GLOBAL REGISTER
	BLK = 1	: REF BBLOCK;

    !
    !
    BLK = .IFAB;

    ! size of index descriptor  = fixed portion in longwords + variable portion
    ! in longwords which is 1 longword per segment (i.e.  1 word per size and 1
    ! word per position)
    !

    IF NOT RM$GETBLK((IDX$C_FIXED_BLN)/4 + .DESC[KEY$B_SEGMENTS])
    THEN
	RETURN RMSERR(DME);

    IDX_DFN = .BLK;
    END;

    ! we now have an index descriptor in IDX_DFN, size has been filled in
    ! link it in
    !

    IF .IFAB[IFB$L_IDX_PTR] EQL 0
    THEN
	IFAB[IFB$L_IDX_PTR] = .IDX_DFN
    ELSE
	BEGIN

	LOCAL
	    PTR	: REF BBLOCK;

	PTR = .IFAB[IFB$L_IDX_PTR];

	WHILE .PTR[IDX$L_IDXFL] NEQ 0
	DO
	    PTR = .PTR[IDX$L_IDXFL];

	PTR[IDX$L_IDXFL] = .IDX_DFN;
	END;

    ! now fill it in
    !
    IDX_DFN[IDX$L_IDXFL] = 0;
    IDX_DFN[IDX$B_BID] = IDX$C_BID;
    RETURN RM$FILL_IN(.DESC);

    END;


GLOBAL ROUTINE RM$KEY_DESC (KEYREF) : RL$KEY_DESC =

!++
!
! RM$KEY_DESC
!
!given the key of reference, this routine returns the correct index descriptor address
!it searches the existing index descriptors for a match
!and, if it does not find it, allocates it
!EXCEPTION: if NEW_IDX is set in the irab, and if the index descriptor
!already exists, fill it in again ( but don't re-allocate it)
!
! CALLING SEQUENCE:
!	BSBW RM$KEY_DESC (KEYREF)
!
! INPUT PARAMETERS:
!	keyref is key of reference
!
! IMPLICIT INPUTS:
!	R8 -- RAB address
!	R9 -- IRAB address
!	R10 -- IFAB address
!	R11 -- IMPURE AREA address
!	NEW_IDX, CACHEFLGS in IRAB
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	IDX_DFN will contain the address of the index descriptor
!	NEW_IDX is cleared
!	CACHEFLGS is cleared
!	if cacheflgs was non-zero ( i.e. the block was locked),
!		lock_bdb contains the bdb associated w/ the block
!
! ROUTINE VALUE:
!	usual rms status codes, particularly SUC,KRF,RPL
!		and those returned by RM$AL_KEY_DESC
!
! SIDE EFFECTS:
!	allocates idx descriptor if it doesn't exist, fills it in & links it in
!	may lock up the block containing the key descriptor
!
!--

    BEGIN

    EXTERNAL REGISTER
	R_IDX_DFN_STR,
	COMMON_RAB_STR;

    GLOBAL REGISTER
	COMMON_IO_STR;

    MAP
	KEYREF	: BYTE;

    !
    !

    IF .KEYREF GEQU .IFAB[IFB$B_NUM_KEYS]
    THEN
	BEGIN
	IRAB[IRB$V_NEW_IDX] = 0;
	IRAB[IRB$B_CACHEFLGS] = 0;
	RETURN RMSERR(KRF)
	END;

    ! check first to see if the index descriptor is already allocated if it is,
    ! return its address in IDX_DFN else go make it
    !
    BEGIN

    LOCAL
	PTR	: REF BBLOCK;

    PTR = .IFAB[IFB$L_IDX_PTR];
    IDX_DFN = 0;

    WHILE .PTR NEQ 0
    DO
	BEGIN

	IF .PTR[IDX$B_KEYREF] EQL .KEYREF
	THEN
	    BEGIN
	    IDX_DFN = .PTR;

	    IF NOT .IRAB[IRB$V_NEW_IDX]
	    THEN
		BEGIN
		IRAB[IRB$B_CACHEFLGS] = 0;
		RETURN RMSSUC()
		END;

	    END;

	PTR = .PTR[IDX$L_IDXFL];
	END

    END;

    ! did not find it, have to make it ourselves IDX_DFN is now flag as to
    ! whether or not it exists, can clear NEW_IDX
    !
    IRAB[IRB$V_NEW_IDX] = 0;

    !
    !
    BEGIN

    LOCAL
	VBN,
	OFFSET;

    ! calculate the vbn and offset of the key descriptor desired for quick and
    ! dirty access
    !
    VBN = (.KEYREF + 4)/5 + 1;
    OFFSET = 0;

    IF .KEYREF NEQ 0
    THEN
	OFFSET = (.KEYREF - 1) MOD 5;

    OFFSET = .OFFSET*(KEY$C_BLN + KEY$C_SPARE);

    ! go get the block
    !

    RETURN_ON_ERROR (RM$CACHE(.VBN, 512, .IRAB[IRB$B_CACHEFLGS]),
	BEGIN
	IRAB[IRB$B_CACHEFLGS] = 0;
	STATUS = RMSERR(RPL)
	END);

    ! if the chksum is bad, release the block and return
    !

    RETURN_ON_ERROR (RM$CHKSUM(),
	BEGIN
	IRAB[IRB$B_CACHEFLGS] = 0;
	RM$RELEASE(0)
	END);

    BEGIN

    REGISTER
	KEYPTR = 6;

    KEYPTR = .BKT_ADDR + .OFFSET
    END;
    END;			! { end of block to define vbn and offset }

    ! take care of the key descriptor
    !
    BEGIN

    LOCAL
	STATUS;

    REGISTER
	KEYPTR = 6;

    IF .IDX_DFN NEQ 0
    THEN
	STATUS = RM$FILL_IN(.KEYPTR)
    ELSE
	STATUS = RM$AL_KEY_DESC(.KEYPTR);

    ! if the block wasn't locked, release it otherwise, it is up to the caller
    ! to release it  if this is the case, set up lock_bdb to point to it
    !
    !

    IF .IRAB[IRB$B_CACHEFLGS] EQL 0
    THEN
	RM$RELEASE(0)
    ELSE
	IRAB[IRB$L_LOCK_BDB] = .BDB;

    IRAB[IRB$B_CACHEFLGS] = 0;
    RETURN .STATUS;

    END					! { end of block to define status }
    END;

END

ELUDOM
