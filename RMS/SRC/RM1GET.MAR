	$BEGIN	RM1GET,022,$RMS1,<SEQUENTIAL SPECIFIC GET>,<NOWRT,QUAD>
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
; FACILITY: RMS32
;
; ABSTRACT:
;		This module provides sequential file organization-
;		specific processing for the $GET and $FIND functions.
;
; ENVIRONMENT:
;		STAR processor running STARLET EXEC.
;
; AUTHOR: L F Laverdure,	 CREATION DATE: 4-Feb-1977
;
; MODIFIED BY:
;
;	V02-022	RAS0063		Ron Schaefer		29-Jan-1982
;		Correct probes of user key and record buffers.
;
;	V02-021	JWH0001		Jeffrey W. Horn		31-DEC-1981
;		Fix broken branches.
;
;	V02-020	RAS0018		Ron Schaefer		7-Aug-1981
;		Fix broken branch caused by stream files.
;
;	V02-019	REFORMAT	Frederick E. Deen, Jr.	    28-Jul-1980
;		This code was reformatted to adhere to RMS standards
;
;	V018	CDS0001		C D Saether	11-Mar-1980
;		Fix divide by 0 caused by record size > blocksize and
;		no span attribute set (nonsense combination).  Don't
;		look at RAC in RAB to determine whether saved NRP context
;		on find is to be restored.
;
;	V017	JAK0001		J A Krycka	27-Aug-1978
;		Miscellaneous clean-up prior to DECNET V1.0 code freeze.
;		Add code to support network access by key.
;
;--
;


	.SBTTL	DECLARATIONS

;
; INCLUDE FILES:
;

;
; MACROS:
;

	$IRBDEF
	$IFBDEF
	$RABDEF
	$FABDEF
	$DEVDEF
	$RMSDEF

;
; EQUATED SYMBOLS:
;

	BKP=IRB$L_BKPBITS*8
	ROP=RAB$L_ROP*8			; bit offset to ROP

;
; OWN STORAGE:
;


	.SBTTL	RM$GET1/RM$FIND1 - SEQ. $GET & $FIND

;++
; RM$GET1/RM$FIND1 - Common sequential file organization for $GET and $FIND
;
; This module performs the following functions:
;
;	1. Common $GET/$FIND setup
;	2. For UNIT RECORD DEVICES calls RM$GET_UNIT_REC
;	   otherwise, performs additional setup and calls RM$GET_BLK_DEV
;	3. Set "LAST-OPERATION-WAS-A-FIND" and NRP context
;
;
; CALLING SEQUENCE:
;
;	Entered via CASE branch from RMS$GET
;	or RMS$FIND at RM$GET1 or RM$FIND1 respectively.
;
;	EXIT is to user via RM$EXRMS.
;
;
; INPUT PARAMETERS:
;
;	R11	IMPURE AREA address
;	R10	IFAB address
;	R9	IRAB address
;	R8	RAB address
;
;
; IMPLICIT INPUTS:
;
;	The contents of the RAB and RELATED IRAB and IFAB.
;	In particular, IRB$V_FIND must be set if doing $FIND, else clear.
;
; OUTPUT PARAMETERS:
;
;	R7 - R1		Destroyed
;	R0		STATUS
;
;
; IMPLICIT OUTPUTS:
;
;	Various fields of the RAB are filled in to reflect the status of
;	the operation (see functional spec for details).
;
;	The IRAB is similarly updated.
;
;
; COMPLETION CODES:
;
;	STANDARD RMS (see functional spec).
;
; SIDE EFFECTS:
;
;	None
;--


RM$GET1::
	$TSTPT	GET1
	CLRW	RAB$W_RSZ(R8)			; init the RSZ field

;
; Make user input valid checks
;

RM$FIND1::
	$TSTPT	FIND1
	CLRW	IRB$W_CSIZ(R9)			; clear current record size
						;  indicates no current record
;
; Check for UNIT RECORD DEVICE and if so dispatch to appropriate code
;

	ASSUME	DEV$V_REC EQ 0
	BLBS	IFB$L_PRIM_DEV(R10),GET_UR	; branch if UNIT RECORD

;
;  Files oriented device  -  dispatch on record access type
;

	CASE	TYPE=B, SRC=RAB$B_RAC(R8),-
	DISPLIST=<GETSEQ,GETKEY,GETRFA>
ERRRAC:	$PSECT_BR	L$RMS1
	RMSERR	RAC
	BRB	GETXIT_BR
	$PSECT_RESTORE

;++
;
;  GET for UNIT RECORD DEVICE
;
;--

	ASSUME	RAB$C_SEQ EQ 0
GET_UR:	BBS	#IFB$V_DAP,(R10),10$		; branch if network operation
	TSTB	RAB$B_RAC(R8)			; allow sequential access only
	BNEQ	ERRRAC				; branch on error
10$:	BSBW	RM$GET_UNIT_REC			; perform UNIT RECORD GET
	BRW	GETXIT				; and branch to GET EXIT


;
;	Handle	errors
;

ERRRFA:	BBS	#DEV$V_FOR,-			; allow LBN 0 for NFS operation
		IFB$L_PRIM_DEV(R10),RFAOFF
	$PSECT_BR	L$RMS1
	RMSERR	RFA
	BRB	GETXIT_BR
	$PSECT_RESTORE
ERRIOP:	$PSECT_BR	L$RMS1
	RMSERR	IOP
	BRB	GETXIT_BR
	$PSECT_RESTORE
ERRSQO:	BBC	#IFB$V_PPF_INPUT,(R10),10$	; branch if not 'INPUT'
	BBC	#IRB$V_PPF_IMAGE,(R9),TSTRFA	; continue if not image
10$:	$PSECT_BR	L$RMS1
	RMSERR	SQO				; not SEQ. operation
GETXIT_BR:
	BRW	GETXIT
	$PSECT_RESTORE


;
;  Keyed access type
;

GETKEY:	BSBW	RM$SEQKEY			; convert key to RFA
	BLBC	R0,GETXIT			; get out on error

;
;  GET by RFA
;

GETRFA:
	BBC	#IRB$V_FIND, (R9), 10$		; branch if doing $GET
	ASSUME	IRB$W_NRP_OFF EQ IRB$L_NRP_VBN+4
	MOVQ	IRB$L_NRP_VBN(R9), -(SP)	; save NRP context for random
						;  FIND keeping stack long aligned

;
;  Check for valid RFA value
;

10$:	BBC	#DEV$V_RND,-			; branch if no random access
		IFB$L_PRIM_DEV(R10),ERRIOP
	BBS	#IFB$V_SQO,(R10),ERRSQO		; branch if SQO specified
TSTRFA:	TSTL	RAB$W_RFA(R8)			; zero RFA?
	BEQL	ERRRFA				; branch if yes
RFAOFF:	CMPW	RAB$W_RFA+4(R8),-		; offset within a block?
		IFB$W_DEVBUFSIZ(R10)
	BGEQU	ERRRFA				; branch if not
	ASSUME	IRB$W_NRP_OFF EQ IRB$L_NRP_VBN+4
	MOVQ	RAB$W_RFA(R8),IRB$L_NRP_VBN(R9)	; copy RFA to NRP
	CLRW	IRB$L_NRP_OFF+2(R9)		; guarantee offset valid long word

;
;  Do final setups for random access GET.
;  Clear LAST FIND and EOF status bits.
;

	BICB2	#<1@<IRB$V_FIND_LAST-BKP>>!-
	<1@<IRB$V_EOF-BKP>>,IRB$L_BKPBITS(R9)

;
;  Determine number of blocks to read in based upon the longest record
;  in the file.
;

	ADDW3	IRB$W_NRP_OFF(R9),-		; compute total # bytes needed
		IFB$W_LRL(R10),R2
	CMPB	IFB$B_RFMORG(R10),#FAB$C_FIX	; fixed length records?
	BEQL	10$				; branch if yes
	ADDW2	#2,R2				; add in size field overhead
10$:	DECW	R2				; round down
	EXTZV	#9,#7,R2,R2			; get # blks - 1
	CMPB	R2,IRB$B_MBC(R9)		; < MBC?
	BGEQU	30$				; branch if not
	MOVL	#2,R3				; set flag for short read
	BSBW	RM$GETRANDOM			; go read and return the record
20$:	BBC	#IRB$V_FIND, (R9), GETXIT	; all done if this was a GET
	ASSUME	IRB$W_NRP_OFF EQ IRB$L_NRP_VBN+4
	MOVQ	(SP)+, IRB$L_NRP_VBN(R9)	; clean saved NRP info off STACK
	BRB	GETXIT				; all done
30$:
	BSBW	RM$GET_BLK_DEV			; GET the record
	BRB	20$				; return to mainline


;++
;
;  Sequential access $GET
;
;--

	.ALIGN	LONG
GETSEQ:
	BBS	#IRB$V_FIND,(R9),GETSQ1		; branch if doing $FIND
	BBS	#IRB$V_FIND_LAST,(R9),RESET_NRP	; branch if $FIND was last
GETSQ1:	BSBW	RM$GET_BLK_DEV			; go get the record

;++
;
; Exit GET function.  Set LAST-OPERATION-WAS-A-FIND status as required.
;
;--

GETXIT:	CSB	#IRB$V_FIND_LAST,(R9)		; clear LAST-OPERATION WAS A FIND
	BBSC	#IRB$V_FIND,(R9),FNDXIT		; branch if doing a FIND
CHKERR:	BLBC	R0,GETERR			; branch on error
EXIT:	BRW	RM$EXRMS			; R0 still has SUC/ERR code

;++
;
;  This is a $GET operation after a $FIND.  Reset NRP to RP.
;
;--

	ASSUME	IRB$W_RP_OFF EQ IRB$L_RP_VBN+4
	ASSUME	IRB$W_NRP_OFF EQ IRB$L_NRP_VBN+4
RESET_NRP:
	MOVQ	IRB$L_RP_VBN(R9),-		; reset NRP
		IRB$L_NRP_VBN(R9)
	BBCC	#IRB$V_EOF,(R9),GETSQ1		; make sure EOF flag off
	BRB	GETSQ1				; rejoin GET code


;++
;
;  Exiting from a $FIND.  Check for PROCESS-PERMANENT FILE special processing
;  and setting of the FIND_LAST flag.
;
;--

FNDXIT:	BLBC	R0,GETERR			; branch if operation failed
	BBSC	#IRB$V_PPF_EOF,(R9),PPF_EOF	; branch if SYS$INPUT EOF
	BBSC	#IRB$V_PPF_SKIP,(R9),PPF_SKIP	; or must skip record
	BBCS	#IRB$V_FIND_LAST,(R9),CHKERR	; set last opr. was a FIND
	BRB	CHKERR				; rejoin GET code


;++
;
;  IRB$V_PPF_SKIP was set (now clear).
;  This indicates that we have just skipped over a $DECK record on SYS$INPUT.
;
;  Restore IRB$V_FIND from IRB$V_PPF_FNDSV and redo the $FIND or $GET.
;
;--

PPF_SKIP:
	BBCC	#IRB$V_PPF_FNDSV,(R9),10$	; branch if not doing $FIND
	SSB	#IRB$V_FIND,(R9)		; set FIND bit
10$:	BRW	RM$FIND1			; redo $FIND or $GET

;++
;
;  IRB$V_PPF_EOF was set (now clear).
;  This indicates that either a $EOD or user-defined EOD-STRING was seen
;  and has been skipped.
;
;  Change status code to RMS$_EOF
;
;--

PPF_EOF:
	JMP	PPF_EOF1
	$NEWPSECT	L$RMS1GET
PPF_EOF1:
	RMSERR	EOF
	BRB	EXIT2
	$PSECT_RESTORE

;++
;
;  An error has occurred.
;
;  Unless error is 'RTB', zero current record size.
;
;--

GETERR:	JMP	GETERR1
	$NEWPSECT	L$RMS1GET
GETERR1:CMPW	R0,#RMS$_RTB&^XFFFF		; was error RTB?
	BEQL	EXIT1				; branch if yes
EXIT2:	CLRW	IRB$W_CSIZ(R9)			; invalidate current rec indicator
	BICL2	#<1@<IRB$V_PPF_EOF-BKP>>!-	;  clean up status
	<1@<IRB$V_PPF_SKIP-BKP>>!-
	<1@<IRB$V_PPF_FNDSV-BKP>>,-
	IRB$L_BKPBITS(R9)
EXIT1:	JMP	RM$EXRMS
	$PSECT_RESTORE

	.SBTTL	RM$SEQKEY - ROUTINE TO CONVERT REC NO. TO RFA FOR SEQ. ORG

;++
;  RM$SEQKEY - Convert rec nbr. to RFA for sequential organization
;
;	This routine converts a record number to an RFA for fixed length
;	records.
;
;  CALLING SEQUENCE:
;
;	BSBW	RM$SEQKEY
;
;  INPUT PARAMETERS:
;
;	R10	IFAB address
;	R9	IRAB address
;	R8	RAB address
;
;	RAB$L_KBF	Address of buffer having the relative record
;			number (RRN)
;	RAB$B_KSZ	Size of key (must be 4 - defaulted if 0)
;
;  IMPLICIT INPUTS:
;
;	IFB$V_BLK	Set if records cross block boundaries
;	IFB$W_MRS	Fixed record length
;
;  OUTPUT PARAMETERS:
;
;	RAB$W_RFA	Set to VBN and offset in block for record
;	R0		STATUS code
;	R1-R3		Destroyed
;
;  COMPLETION CODES:
;
;	Standard RMS, in particular, RAC, KBF, KSZ, KEY, IOP, or SUC.
;
;  SIDE EFFECTS:
;
;	None.
;
;--

	.PSECT	$RMS1KEY,GBL,NOWRT

RM$SEQKEY::
	CMPB	IFB$B_RFMORG(R10),#FAB$C_FIX	; must be fixed RFM
	BNEQ	ERRRAC1				; too bad if not
	TSTB	RAB$B_KSZ(R8)			; zero size = 4
	BEQL	10$				; default buffer size
	CMPB	RAB$B_KSZ(R8),#4		; if not default must be 4
	BNEQ	ERRKSZ

;
;  Pick up record number getting rid of bias (i.e., there is no record 0)
;

10$:	MOVAL	@RAB$L_KBF(R8),R0		; key buffer addr
	IFNORD	#4,(R0),-			; check access
		ERRKBF,IRB$B_MODE(R9)
	SUBL3	#1,(R0),R1			; RRN - 1
	BLSS	ERRKEY				; branch if bad

;
;  Get record length, rounding it up
;

	MOVZWL	IFB$W_MRS(R10),R0		; get fixed rec len
	INCL	R0				; round up
	BICL2	#1,R0				; "
	MOVZWL	#512,-(SP)			; useful constant to stack
	BBS	#FAB$V_BLK,-			; GET alternate calc. if
		IFB$B_RAT(R10),BLKSET		;  records don't cross block
						;  boundaries

;
;  Records cross block boundaries.
;  Compute byte address of record in file and convert to VBN and offset.
;

	EMUL	R0,R1,(SP),R2			; compute byte addr =
						;  (RRN - 1)*rounded-rec-len+512
	EDIV	(SP)+,R2,-			; compute VBN and offset
		RAB$W_RFA(R8),RAB$W_RFA+4(R8)	;  (byte-addr/512)
SUCRET:	RMSSUC					; show success
	RSB					; and return


;
;  Alternate calculation for records not allowed to cross block boundaries
;

BLKSET:	CLRL	R2				; zero extend RRN-1
	DIVL3	R0,(SP)+,R3			; get # RECS per block
						;  =512/ROUNDED-REC-LEN
	BEQL	ERRIOP_BR			; if zero, record size must be
						;  greater than 512 which
						;  doesn't make sense and we
						;  don't want to divide by
						;  zero, so get out
	EDIV	R3,R1,R1,R2			; compute VBN-1 (in R1)
						;  and REC # within BLK (in R2)
						;  =(RRN-1)/# RECS-PER-BLK
	ADDL3	#1,R1,RAB$W_RFA(R8)		; store VBN
	MULW3	R2,R0,RAB$W_RFA+4(R8)		; and offset (=REC # within BLK
						;  * ROUNDED-REC-LEN)
	BRB	SUCRET				; all set

;
;  Handle errors
;

ERRIOP_BR:
	BRW	ERRIOP				; extended BRANCH
ERRRAC1:
	$PSECT_BR	L$RMS1
	RMSERR	RAC				; not fixed length records
	RSB
	$PSECT_RESTORE


ERRKBF:	$PSECT_BR	L$RMS1
	RMSERR	KBF				; invalid KEY buffer addr
	RSB
	$PSECT_RESTORE



ERRKSZ:	$PSECT_BR	L$RMS1
	RMSERR	KSZ				; bad KEY size (not 0 or 4)
	RSB
	$PSECT_RESTORE



ERRKEY:	$PSECT_BR	L$RMS1
	BBC	#DEV$V_FOR,-			; definite error if not for.
		IFB$L_PRIM_DEV(R10),10$
	TSTL	(R0)				; attempt to read LBN 0?
	BNEQ	10$				; branch if not (error)
	CLRQ	RAB$W_RFA(R8)			; yes, zero LBN
	BRW	SUCRET				; continue
10$:
	RMSERR	KEY				; bad KEY value (not > 0)
	RSB
	$PSECT_RESTORE

	.END
