	$BEGIN	RM0CHKSUM,004,$RMS23,<PROLOG CHECKSUM ROUTINES>


;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
; Facility: rms32
;
; Abstract:
;
;	this module provides two routines to handle the checksum
;	word for file prologs.
;
; Environment:
;		star processor running starlet exec.
;
; Author: L F Laverdure,	 Creation Date: 10-OCT-1977
;
; Modified By:
;
;	V02-004	MCN0001		Maria del C. Nasr	10-Jun-1981
;		Change PSECT to fix broken branch to this routine.
;
;	V02-003 REFORMAT	D M WALP	24-JUL-1980
;
;--
;


	.SBTTL	DECLARATIONS

;
; Include Files:
;

;
; Macros:
;

	$RMSDEF

;
; Equated Symbols:
;

;
; Own Storage:
;


	.SBTTL	RM$CHKSUM - CALCULATE AND CHECK OR STORE CHECKSUM ROUTINES

;++
; RM$CHKSUM
;
;  entry at rm$chksum - calculate checksum and compare with stored
;                       checksum.
;  entry at rm$maksum - calculate checksum and store.
;
; Calling sequence:
;
;	bsbw	rm$chksum
;   or	bsbw	rm$maksum
;
; Input Parameters:
;
;	r5  =  buffer addr
;
; Implicit Inputs:
;
;	none
;
; Output Parameters:
;
;	r0	status code
;	r1,r2	destroyed
;
; Implicit Outputs:
;
;	none
;
; Completion Codes:
;
;	success=-1, failure=rm$_plg
;
; Side Effects:
;
;	none
;
;--



;++
; entry point to check the checksum
;--

RM$CHKSUM::
	BSBB	CALSUM			; calculate checksum
	CMPW	(R1),R2			; is stored checksum same
					; as calculated value?
	BNEQ	ERRPLG			; branch if not
	RSB				; return

;++
; entry point to store the checksum
;--

RM$MAKSUM::
	BSBB	CALSUM			; calculate sum
	MOVW	R2,(R1)			; store it
	RSB				; and return

;++
; calculate check sum routine
;
;	input:	r5 = buffer addr
;
;	output:	r0 = -1
;		r1 = addr of checksum word in buffer
;		r2 = calculate checksum value
;--


CALSUM:
	CLRL	R2			; init checksum
	MOVL	R5,R1			; copy buffer addr
	MOVZBL	#254.,R0		; # words to sum -1
10$:	ADDW2	(R1)+,R2		; sum it up
	SOBGEQ	R0,10$			; loop 255 times
	RSB

;++
; handle error
;--

ERRPLG:	$PSECT_BR	L$RMS0
	RMSERR	PLG			; declare error
	RSB
	.END
