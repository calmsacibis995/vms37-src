	$BEGIN	RM1CLOSE,008,F$RMSCLOSE1,<SEQUENTIAL-SPECIFIC CLOSE>


;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
; Facility: rms32
;
; Abstract:
;		this module performs the sequential file org. specific
;		close functions.  in particular, it handles the spool on
;		close and submit command file on close options.
;
; Environment:
;		star processor running starlet exec.
;
; Author: L F Laverdure,	 creation date: 25-APR-1978
;
; Modified By:
;
;	V02-008	JWH0001		Jeffrey W. Horn	01-Mar-1982
;		Fix spool on close so that a $SHOW QUEUE will show
;		correct file size instead of zero.
;
;	V02-007	REFORMAT	C Saether	30-Jul-1980	23:03
;
;--
;


	.SBTTL	DECLARATIONS

;
; Include Files:
;

;
; Macros:
;

	$IFBDEF
	$DEVDEF
	$FABDEF
	$NAMDEF
	$SMRDEF				; send message to symbiont mgr defs
	$SNDSMBDEF			; 		"

;
; Equated Symbols:
;

;
; Own Storage:
;

	$NEWPSECT	F$RMSCLOSEOPTN
SYSPRINT:
	.ASCII	/SYS$PRINT/
	SYSPRINT_LEN=.-SYSPRINT
SYSBATCH:
	.ASCII	/SYS$BATCH/
	SYSBATCH_LEN=.-SYSBATCH
	$PSECT_RESTORE

	.SBTTL	RM$CLOSE1 - SEQ. SPECIFIC $CLOSE ROUTINE

;++
; RM$CLOSE1 - sequential org specific close code
;
;  this routine performs the sequential file org. specific $close processing.
;  in particular, it checks the spl and scf options, and if set (either on
;  $open/$create or on $close), sends a message to the symbiont manager to
;  queue the file to the sys$print or sys$batch queues respectively.
;  if both spl and scf are set, scf takes precedence.  the dlt fop sub-option
;  is passed on to the symbiont manager.
;
;  this overall flow of the routine is as follows:
;
;	1. check that one of the options is wanted and that it is valid;
;	   if not merely deaccess the file and return.
;	2. check that a nam block has been supplied; fill in the dvi and fid
;	   fields from the channel and deaccess the file.
;	3. allocate a buffer on the stack to build the message for the symbiont
;	   manager.
;	4. fill in the queue name in the message from the logical name translation
;	   of "sys$print" or "sys$batch".
;	5. fill in the device id, file id, and directory id from the user-supplied
;	   nam blk.
;	6. file in the file name from the user-supplied resultant name string
;	   (optional).
;	7. fill in the delete option if required.
;	8. send the message to the symbiont manager with a function code of
;	   smr$k_enter.
;
;  no return mailbox is used to find out if all went o.k.
;
;
; Calling sequence:
;
;	PUSHAB	RETURN_ADDRESS
;	CASEB	SRC=IFB$B_ORGCASE(R9),DISPLIST=<RM$CLOSE1, ...>
;
; Input Parameters:
;
;	r10	ifab address
;	r9	ifab address
;	r8	fab address
;	4(sp)	status code
;
; Implicit Inputs:
;
;	the contents of the ifab (especially ifb$v_spc, scf, and dlt)
;	the contents of the nam block (dvi, fid, did, and rsa/rsl)
;
; Output Parameters:
;
;	r1-r7	destroyed
;	r0	status code
;
; Implicit Outputs:
;
;	fab$l_stv is set to subsidiary error code on an error.
;
; Completion Codes:
;
;	standard rms, in particular, spl.
;
; Side Effects:
;
;	none
;
;--

;++
;
;  check to see if anything to do
;
;--

RM$CLOSE1::
	ASSUME	IFB$V_SCF EQ IFB$V_SPL+1
	CMPZV	#IFB$V_SPL,#2,(R9),#0	; either spl or scf set?
	BNEQ	SPOOL			; branch if yes
	BRW	RM$DEACCESS		; go deaccess file and
					; return to main line code
;++
;
;  perform various validity checks to see if file can be spooled
;
;--
;

SPOOL:	$PSECT_BR	F$RMSCLOSEOPTN

;
; note: no need to check that
; ppf_image not set since can't
; get here if so
;

	BSBW	RM$CLS_CHKNAM		; check out requried nam block
	BLBC	R0,ERRNAM1		; error if none or if bad
					; (r7 = nam blk address)

;
;  fill in the dvi and fid fields of the nam block
;

	MOVAL	NAM$T_DVI(R7),R3	; address for dvi and fid
	BSBW	RM$GETDVIFID		; go fill in
	BSBW	RM$DEACCESS		; and now can deaccess the file
	BLBC	R0,ERR_R0		; branch on error
	BSBW	RM$CLS_CHKNAM		; go verify the nam blk again
	BLBC	R0,ERRNAM		; branch on error

;++
;
;  allocate symbiont message buffer on stack and fill it in
;
;--

	PUSHL	#0			; assume no delete option
	MOVAL	-<<<2+16+16+6+6+20+5+1>+3-4>&^XFC>(SP),SP ; allocate rest of buffer
	BBC	#IFB$V_DLT,(R9),10$	; branch if no delete sub-option
	MOVB	#SMO$K_DELETE,2+16+16+6+6+20+5(SP) ; set delete option
10$:
	ASSUME	NAM$T_DVI+16 EQ NAM$W_FID
	ASSUME	NAM$W_FID+6 EQ NAM$W_DID
	MOVC3	#<16+6+6>,NAM$T_DVI(R7),2+16(SP) ; copy dvi, fid, did


;
;  get file name, type and version from resultant name string, if any
;

	CLRB	(R3)			; assume no file name
	MOVL	NAM$L_RSA(R7),R4	; get resultant name string addr
	BEQL	50$			; branch if none
	MOVZBL	NAM$B_RSL(R7),R5	; get its length
	BEQL	50$			; branch if zero
	IFNORD	R5,(R4),ERRRST,IFB$B_MODE(R9) ; branch if rslt string not readable
	LOCC	#^A/]/,R5,(R4)		; locate end of directory spec
	BNEQ	40$			; branch if found
	LOCC	#^A/>/,R5,(R4)		; check alternate terminator
	BEQL	ERRRST			; branch if neither
40$:	DECL	R0			; adj remaining count ...
	INCL	R1			; ... skipping over right bracket
	CMPB	R0,#20			; name, type and version in range?
	BGEQU	ERRRST			; branch if not
	MOVB	R0,(R3)+		; store filename size
	MOVC3	R0,(R1),(R3)		; and copy filename

50$:

;++
;
;  now set the symbiont function code and translate the logical name
;  sys$print or sys$batch based upon whether scf is clear or set respectively
;
;--

	MOVW	#SMR$K_ENTER,(SP)	; specify 'enter' function
	CLRL	-(SP)			; receive equiv. string len here
	PUSHAB	4+2+1(SP)		; addr of equiv. string buffer
	PUSHL	#15			; equiv. string buffer len
	BBS	#IFB$V_SCF,(R9),BATCH	; branch if submit command file
	PUSHAB	SYSPRINT		; addr of "sys$print" ascii name
	BRB	TRNLOG			; continue with translation


;++
;
;  handle error conditions.
;
;  note: this code is placed here to allow short branches to it.  takes
;	 advantage of the break in control flow.
;
;--

ERRRST:	$PSECT_BR	L$RMS1		; handle bad resultant string
	MOVL	#RMS$_RST,R0		; stv error code to r0
CLNSTK:	MOVAL	<<<2+16+16+6+6+20+5+1>+3>&^XFC>(SP),SP ; clean stack
	BRB	SETSTV			; go set stv from error code
	$PSECT_RESTORE

;

ERRNAM1:
	$PSECT_BR	L$RMS1
	BSBW	RM$DEACCESS		; deaccess the file
	$PSECT_RESTORE			; and fall thru

;

ERRNAM:	$PSECT_BR	L$RMS1
	MOVL	#RMS$_NAM,R0		; bad nam blk
	$PSECT_RESTORE			; and fall thru

;

ERR_R0:	$PSECT_BR	L$RMS1		; handle log name error
					; r0 has error code, stack clean
SETSTV:	MOVL	R0,FAB$L_STV(R8)	; secondary status code to stv
					; and fall thru
	$PSECT_RESTORE

;

ERRSPL:	$PSECT_BR	L$RMS1		; handle validity check errors
	RMSERR	SPL,4(SP)		; store primary error code
	RSB				; and back to main-line close
	$PSECT_RESTORE

;

ERRTRN:	BRW	CLNSTK			; handle log name xlation error


;++
;
;  continue with logical name translation
;
;--

BATCH:	PUSHAB	SYSBATCH		; addr of sys$batch ascii string
TRNLOG:
	ASSUME	SYSPRINT_LEN EQ SYSBATCH_LEN
	PUSHL	#SYSBATCH_LEN		; size of logname to translate
	MOVL	SP,R2			; save base addr of logname and
					; equiv. string buffers
	$TRNLOG_S	LOGNAM=(R2),-
	RSLLEN=16(R2),-
	RSLBUF=8(R2)			; translate 'sys$print' or 'sys$batch'
	ADDL2	#16,SP			; 'pop' trnlog descriptors
	CVTLB	(SP)+,2(SP)		; copy equiv. string len
	BLBC	R0,ERRTRN		; branch on error

;++
;	Set file size into request from IFAB
;--

	MOVB	#SMO$K_FILESIZ,<2+16+16+6+6+20>(SP); file size option

;**
;	NOTE:	This code assumes RM$DEACCESS will swap the words of IFB$L_EBK
;	to FILES-11 format.
;**

	ROTL	#16,IFB$L_EBK(R9),R1	; swap words of FILES-11 EBK
	BEQL	60$			; don't decrement if zero
	TSTW	IFB$W_FFB(R9)		; don't decrement if not at
	BNEQ	60$			;    block boundry
	DECL	R1			; decrement block number
60$:	MOVL	R1,<<2+16+16+6+6+20>+1>(SP); store file size into request

;++
;
;  build message descriptor and send request to symbiont manager.
;
;--

	PUSHAB	(SP)			; buffer address
	MOVZBL	#2+16+16+6+6+20+5+1,-(SP)	; buffer len

	MSGBUF_OFFSET=<SNDSMB$_NARGS*4>-SNDSMB$_MSGBUF
	$SNDSMB_S	MSGBUF=MSGBUF_OFFSET(SP) ; send message to symbiont
	MOVAL	<8+<<2+16+16+6+6+20+5+1>+3>&^XFC>(SP),SP ; clean stack
	BLBC	R0,ERR_R0		; branch on error
	RSB				; return to main-line $close
	$PSECT_RESTORE


	.END
