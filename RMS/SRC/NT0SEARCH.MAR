	$BEGIN	NT0SEARCH,001,NF$NETWORK,<NETWORK SEARCH FILES>


;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; Facility: RMS
;
; Abstract:
;
;	This module communicates with the File Access Listener (FAL) at the
;	remote node to perform the search function.
;
; Environment: VAX/VMS, executive mode
;
; Author: James A. Krycka,	Creation Date:	10-SEP-1979
;
; Modified By:
;
;	V03-001	JAK0073		J A Krycka	05-APR-1982
;		Continuation of V02-013 to treat stream-embedded as stream-
;		implied.
;
;	V02-014	JAK0071		J A Krycka	07-FEB-1982
;		Return more specific message for unsupported error condition.
;
;	V02-013	JAK0068		J A Krycka	30-DEC-1981
;		Continuation of V02-012 to properly handle stream-implied and
;		stream-embedded files.
;
;	V02-012	JAK0066		J A Krycka	01-OCT-1981
;		Add support for stream format files.
;
;	V02-011	JAK0063		J A Krycka	25-AUG-1981
;		Update symbols to correspond to revised DAPDEF.MDL file.
;		Change module name from NT0SRCH to NT0SEARCH.
;
;	V02-010	JAK0051		J A Krycka	29-DEC-1980
;		Include RMS$_ACC/SS$_FILELOCKED reply from FAL in list of error
;		conditions on search that are converted to partial success.
;		Also, map the DAP$V_FLK file attribute returned by some non-VAX
;		FALs into partial success.
;
;	V02-009	JAK0050		J A Krycka	26-NOV-1980
;		Fix search error recovery logic to correctly handle the case
;		where FAL returns an error when a DAP Name message is expected.
;		(This occurs, for example, on a DIRECTORY operation when FAL
;		encounters a locked directory file while descending a level.)
;
;	V02-008	JAK0049		J A Krycka	17-OCT-1980
;		Track entry point name changes in NT0DAPIO.
;
;	V02-007	REFORMAT	J A Krycka	26-JUL-1980
;
;--

	.SBTTL	DECLARATIONS

;
; Include Files:
;

	$DAPPLGDEF			; Define DAP prologue symbols
	$DAPHDRDEF			; Define DAP message header
	$DAPCNFDEF			; Define DAP Configuration message
	$DAPATTDEF			; Define DAP Attributes message
	$DAPACCDEF			; Define DAP Access message
	$DAPCONDEF			; Define DAP Continue Transfer message
	$DAPNAMDEF			; Define DAP Name message
	$FABDEF				; Define File Access Block symbols
	$FWADEF				; Define File Work Area symbols
	$IFBDEF				; Define IFAB symbols
	$NWADEF				; Define Network Work Area symbols
	$RMSDEF				; Define RMS completion codes
	$SSDEF				; Define system service codes

;
; Macros:
;
;	None
;
; Equated Symbols:
;

	ASSUME	DAP$Q_DCODE_FLG EQ 0
	ASSUME	NWA$Q_FLG EQ 0

;
; Own Storage:
;
;	None
;

	.SBTTL	NT$SEARCH - PERFORM NETWORK SEARCH FUNCTION

;++
; NT$SEARCH  - engages in a DAP dialogue with the remote FAL to obtain a list
;	of directory entries that match a given (wildcard) file specification.
;
;	The first call to NT$SEARCH causes RMS to request that FAL perform the
;	DAP directory-list function and returns the resultant name string of
;	the first file that matches the expanded name string template.
;	Thereafter, each call to NT$SEARCH returns the resultant name string
;	of the next match until no more files are found or an error occurs.
;
;	Further, if the FAB$L_CTX field contains the string 'XABS', then the
;	FAB and certain XABs chained to it will be updated. This is done to
;	support the DIRECTORY utility which would otherwise have to open each
;	file to obtain it's attributes, causing a separate invocation of FAL
;	for each file!
;
; Calling Sequence:
;
;	BSBW	NT$SEARCH
;
; Input Parameters:
;
;	R0	First-time-thru flag in bit0 (0=no, 1=yes)
;	R8	FAB address
;	R9	IFAB address
;	R10	FWA address
;	R11	Impure Area address
;
; Implicit Inputs:
;
;	FAB$L_CTX
;	FWA fields
;	IFB$L_NWA_PTR
;	NWA$V_FTM_CONT
;	DAP$Q_SYSCAP
;	DAP$V_STM_ONLY
;
; Output Parameters:
;
;	R0	Status code (RMS)
;	R1-R7	Destroyed
;	AP	Destroyed
;
; Implicit Outputs:
;
;	FWA$Q_QUOTED
;	FWA$V_REMRESULT
;	NWA$V_FTM_CONT
;
; Completion Codes:
;
;	Standard RMS completion codes
;
; Side Effects:
;
;	None
;
;--

NT$SEARCH::				; Entry point
	$TSTPT	NTSEARCH		;
	MOVL	IFB$L_NWA_PTR(R9),R7	; Get address of NWA (and DAP)
	$CLRBIT	#FWA$V_REMRESULT,(R10)	; Say no resultant name string received
	BLBS	R0,SEND_CNF		; Perform set-up with FAL if this is
					;  the first call to $SEARCH
	BBCC	#NWA$V_FTM_CONT,(R7),-	; Branch if previous search call was a
		RECV_NAM		;  complete success and clear flag

;+
; Build and send DAP Continue Transfer message to partner to skip to next
; directory entry following receipt of a DAP (error) Status message. This code
; segment is entered iff the previous call to $SEARCH resulted in an error
; (except RMS$_NMF) or a partial success (i.e., the file name was returned
; without the requested file attributes because FAL was unable to open the
; file.)
;-

SEND_CON:				; (required to continue after error)
	$SETBIT	#NWA$V_LAST_MSG,(R7)	; Declare this last message to block
	MOVL	#DAP$K_CON_MSG,R0	; Get message type value
	BSBW	NT$BUILD_HEAD		; Construct message header
	MOVB	#DAP$K_SKIP_REC,(R5)+	; Store CONFUNC field
	BSBW	NT$BUILD_TAIL		; Finish building message
	BSBW	NT$TRANSMIT		; Send Continue Transfer message to FAL
	BLBC	R0,FAIL1		; Branch on failure
	BRB	RECV_NAM		; Continue now that DAP stream from FAL
					;  has been restarted

;+
; Exchange DAP Configuration messages with FAL.
;-

SEND_CNF:				; (required message on first pass)
	BSBW	NT$EXCH_CNF_ALT		; Exchange Configuration messages
	BLBC	R0,FAIL1		; Branch on failure
	BBS	#DAP$V_DIRECTORY,-	; Branch if remote FAL supports
		DAP$Q_SYSCAP(R7),-	;  directory-list function
		BUILD_MASK		;
	BSBW	NT$RMT_ACCFUNC		; Declare RMS$_SUPPORT error
FAIL1:	RSB				; Exit with RMS code in R0

;+
; Build display field request mask which will be used in the Access message
; to request that optional DAP messages be returned by FAL.
; For $SEARCH, these are the ATT, PRO, SUM, and TIM messages. (The Attributes
; message will supply information to update both the FAB and the FHCXAB.)
;
; Note:	The FAB and XABs are not documented as outputs from $SEARCH. This
;	information will be returned iff FAB$L_CTX contains the ASCII string
;	'XABS'. It is expected that only the DIRECTORY utility will request
;	this additional output to avoid opening each file to obtain its file
;	attributes, which would be very very costly in a network context.
;	Since network search is implemented using the DAP directory_list
;	function, XAB information can be requested on search, thus requiring
;	only one remote FAL to be active for network directory operations.
;
; Note:	Utilities like COPY that do a $PARSE, $SEARCH-$OPEN, $SEARCH-$OPEN, etc.
;	on wildcard operations, will invoke one FAL for all search requests and
;	an additional FAL for each file subsequently opened.
;-

BUILD_MASK:				; Build NWA$W_DISPLAY
	CLRL	R6			; Indicate this is not a close operation
	CMPL	FAB$L_CTX(R8),#^A\XABS\	; Ingore any XABs in chain unless
	BNEQ	10$			;  CTX field contains correct string
	BSBW	NT$SCAN_XABCHN		; Scan user XAB chain and check FAL's
					;  capabilities; request mask put in R2
	BLBC	R0,FAIL1		; Branch on failure to complete scan
	BICW2	#<<DAP$M_DSP_KEY>!-	; Ignore Key Definition and Allocation
		  <DAP$M_DSP_ALL>!-	;  XABs in chain
		0>,R2			;
	BISW2	#DAP$M_DSP_ATT,R2	; Request Attributes message to get
					;  information for FHCXAB and FAB
10$:	MOVW	R2,NWA$W_DISPLAY(R7)	; Save request mask

;+
; Build and send DAP Access message to partner.
; Note that the filespec used is the expanded name string generated from a
; previous call to $PARSE.
;-

SEND_ACC:				; (required message on first pass)
	$SETBIT	#NWA$V_LAST_MSG,(R7)	; Declare this last message to block
	MOVL	#DAP$K_ACC_MSG,R0	; Get message type value
	BSBW	NT$BUILD_HEAD		; Construct message header
	MOVB	#DAP$K_DIR_LIST,(R5)+	; Store ACCFUNC field
	MOVB	#DAP$M_NONFATAL,(R5)+	; Store ACCOPT field
	BSBW	NT$GET_FILESPEC		; Store FILESPEC field as a counted
					;  ASCII string
	MOVZWL	NWA$W_DISPLAY(R7),R1	; Get request mask
	BEQL	10$			; Branch if nothing set
	CLRW	(R5)+			; Store dummy FAC and SHR fields
	BSBW	NT$CVT_BN4_EXT		; Store DISPLAY as an extensible field
10$:	BSBW	NT$BUILD_TAIL		; Finish building message
	BSBW	NT$TRANSMIT		; Send Access message to FAL
	BLBC	R0,FAIL1		; Branch on failure

;+
; Receive next DAP Name message (or Access Complete message) from partner.
; One, two, or three Name messages may be received with the sequence terminated
; by a (file) Name message.
;
; In addition, receipt of an Access Complete message signals normal completion
; of the search (DAP directory-list) function and is mapped into RMS$_NMF.
;-

RECV_NAM:				; (required message sequence)
	BISL2	#<<1@DAP$K_NAM_MSG>!-	; Expect response of either Name
		  <1@DAP$K_CMP_MSG>!-	;  or Access Complete message
		0>,DAP$L_MSG_MASK(R7)	;
	BSBW	NT$RECEIVE		; Get reply from FAL
	BLBC	R0,10$			; Branch on failure
	CMPB	DAP$B_TYPE(R7),-	; Branch if Name message
		#DAP$K_NAM_MSG		;
	BEQL	MERGE_NAM		; It returns to RECV_NAM iff
					;  resultant name is still incomplete
	BRW	SEARCH_ENDED		; It must be Access Complete or
					;  incorrect (success) Status message
10$:	BRW	FAIL4			; Branch aid

;+
; A Name message has been received and decoded in the DAP control block.
; The new name string is merged into the existing (partial) resultant name
; string and control is returned to RECV_NAM unless the Name message contains a
; filename string which completes the resultant name string.
;-

MERGE_NAM:				;
	MOVQ	DAP$Q_NAMESPEC(R7),R0	; Copy name descriptor to <R0,R1>

	ASSUME	DAP$V_FILSPEC EQ 0
	ASSUME	DAP$V_FILSPEC+1 EQ DAP$V_FILNAME
	ASSUME	DAP$V_FILNAME+1 EQ DAP$V_DIRNAME
	ASSUME	DAP$V_DIRNAME+1 EQ DAP$V_VOLNAME
	ASSUME	DAP$V_VOLNAME+1	EQ DAP$V_DFTSPEC

	FFS	#0,#DAP$V_DFTSPEC+1,-	; Convert NAMETYPE field bit offset
		DAP$B_NAMETYPE(R7),R2	;  to a value
	$CASEB	SELECTOR=R2-		; Type of name string:
		DISPL=<-		;
		    10$-		;  FILSPEC -- error
		    FIL_NAM-		;  FILNAME
		    DIR_NAM-		;  DIRNAME
		    VOL_NAM-		;  VOLNAME
		    10$-		;  DFTSPEC -- error
		>			;
10$:	BRW	NT$BUG_NAMETYPE		; Declare RMS$_BUG_DAP error and
					;  exit with RMS code in R0

;+
; Process (volume) Name message.
;-

VOL_NAM:				; Save device (volume) Name string
	MOVL	R0,FWA$Q_QUOTED(R10)	; Update descriptor length
	MOVW	R0,NWA$W_DIR_OFF(R7)	; Update offset for directory string
	MOVC3	R0,(R1),-		; Copy volume name string to
		@FWA$Q_QUOTED+4(R10)	;  resultant name string buffer
	BRB	RECV_NAM		; Get next name string component

;+
; Process (directory) Name message.
;-

DIR_NAM:				; Save directory name string
	MOVZWL	NWA$W_DIR_OFF(R7),R4	; Get offset to use
	ADDL3	R0,R4,R5		; Compute new offset
	MOVL	R5,FWA$Q_QUOTED(R10)	; Update descriptor length
	MOVW	R5,NWA$W_FIL_OFF(R7)	; Update offset for file name string
	MOVC3	R0,(R1),-		; Append directory name to
		@FWA$Q_QUOTED+4(R10)[R4];  resultant name string buffer
	BRB	RECV_NAM		; Get next name string component

;+
; Process (file) Name message.
;-

FIL_NAM:				; Assemble resultant name string
	MOVZWL	NWA$W_FIL_OFF(R7),R4	; Get offset to use
	ADDL3	R0,R4,FWA$Q_QUOTED(R10)	; Update descriptor length
	MOVC3	R0,(R1),-		; Append file-type-version name to
		@FWA$Q_QUOTED+4(R10)[R4];  resultant name string buffer
	$SETBIT	#FWA$V_REMRESULT,(R10)	; Flag receipt of resultant string

;+
; Receive DAP Attributes message from partner and update the user FAB and
; FHCXAB.
;
; In addition, receipt of an Access Complete message signals normal completion
; of the search (DAP directory-list) function and is mapped into RMS$_NMF.
;
; Note:	The user XAB chain is scanned again to probe all user XABs to protect
;	RMS from a user who deletes the address space where an XAB was
;	previously found.
;-

RECV_ATT:				; (optional--must be requested)
	BBC	#DAP$V_DSP_ATT,-	; Branch if Attributes message
		NWA$W_DISPLAY(R7),-	;  was not requested
		SEARCH_SUCCESS		;  (if no ATT, then no EXT_ATT either)
	BISL2	#<<1@DAP$K_ATT_MSG>!-	; Expect response of either Attributes
		  <1@DAP$K_CMP_MSG>!-	;  or Access Complete message
		0>,DAP$L_MSG_MASK(R7)	;
	BSBW	NT$RECEIVE		; Get reply from FAL
	BLBC	R0,FAIL3		; Branch on failure
	CMPB	DAP$B_TYPE(R7),-	; Branch if not Attributes message
		#DAP$K_ATT_MSG		;
	BNEQ	SEARCH_ENDED		; It must be Access Complete or
					;  incorrect (success) Status message
	BBC	#DAP$V_FLK,DAP$L_FOP1(R7),10$
	$SETBIT	#NWA$V_FOP_FLK,(R7)	; Denote FOP FLK bit set
10$:	CLRL	R6			; Indicate this is not a close operation
	BSBW	NT$SCAN_XABCHN		; Scan user XAB list again
	BLBC	R0,FAIL2		; Branch on failure to scan XABs
	BSBW	MOD_RFM_RAT		; Check for undefined record format
	BSBW	UPDATE_FAB		; Update user FAB
	BSBW	NT$UPDATE_FHC		; Update user FHCXAB

;+
; Receive DAP Extended Attributes messages from partner and update the user
; DAT, PRO, and SUM XABs. These messages may be received in any order.
;
; In addition, receipt of an Access Complete message signals normal completion
; of the search (DAP directory-list) function and is mapped into RMS$_NMF.
;-

RECV_EXT_ATT:				; (optional--must be requested)
	MOVZWL	NWA$W_DISPLAY(R7),R1	; Get DAP message request mask
	CLRL	R2			; Clear valid messages to receive mask
	$MAPBIT DAP$V_DSP_PRO,DAP$K_PRO_MSG; Map request for Protection message
	$MAPBIT	DAP$V_DSP_SUM,DAP$K_SUM_MSG; Map request for Summary message
	$MAPBIT	DAP$V_DSP_TIM,DAP$K_TIM_MSG; Map request for Date and Time msg
	MOVL	R2,NWA$L_MSG_MASK(R7)	; Save valid message mask for use again
LOOP:	MOVL	NWA$L_MSG_MASK(R7),-	; Expect response of any of these DAP
		DAP$L_MSG_MASK(R7)	;  messages
	BEQL	SEARCH_SUCCESS		; Branch if no more to receive
	$SETBIT	#DAP$K_CMP_MSG,DAP$L_MSG_MASK(R7)
					; Access complete is also valid
	BSBW	NT$RECEIVE		; Get reply from FAL
	BLBC	R0,FAIL3		; Branch on failure
	CMPB	DAP$B_TYPE(R7),-	; Branch if Access Complete message
		#DAP$K_CMP_MSG		;
	BEQL	SEARCH_ENDED		;

	ASSUME	DAP$K_SUM_MSG EQ 12
	ASSUME	DAP$K_TIM_MSG EQ 13
	ASSUME	DAP$K_PRO_MSG EQ 14

10$:	PUSHAB	B^LOOP			; Push return address on stack
	$CASEB	SELECTOR=DAP$B_TYPE(R7)- ; Dispatch to process message:
		BASE=#DAP$K_SUM_MSG-	;
		DISPL=<-		;
		    NT$DECODE_SUM-	;  Summary message
		    NT$DECODE_TIM-	;  Date and Time message
		    NT$DECODE_PRO-	;  Protection message
		>			;

;+
; This call to $SEARCH has found no more files; the search sequence has
; terminated.
;-

SEARCH_ENDED:				;
	RMSERR	NMF			; Convert Access Complete message
					;  into no-more-files error code
FAIL2:	RSB				; Exit with RMS code in R0

;+
; This call to $SEARCH has found a match; a resultant name string has been
; returned and user control blocks have been updated per CTX field.
;-

SEARCH_SUCCESS:				;
	BBSC	#NWA$V_FOP_FLK,(R7),-	; Map FOP FLK bit returned by FAL into
		ERRACC			;  partial success (SS$_FILELOCKED)
	RMSSUC				; Return success
	RSB				; Exit with RMS code in R0

;+
; An error has occurred while trying to obtain the attributes of the file.
; Determine whether to return the error or whether to return success with an
; appropriate system service code in STV. The latter denotes partial success
; and that the search can be resumed. Note that the DIRECTORY utility examines
; the error code in the STV to decide whether to terminate the directory
; operation or to continue issuing $SEARCH calls (i.e., whether or not the
; error condition is fatal).
;-

FAIL3:	CMPW	R0,#<RMS$_FLK&^XFFFF>	; Map file locked error
	BEQL	ERRFLK			;
	CMPW	R0,#<RMS$_PRV&^XFFFF>	; Map privilege violation
	BEQL	ERRPRV			;
	CMPW	R0,#<RMS$_ACC&^XFFFF>	; Map file access error
	BEQL	ERRACC			;
	CMPW	R0,#<RMS$_ATR&^XFFFF>	; Map read attributes error
	BEQL	ERRATR			;
	CMPW	R0,#<RMS$_NET&^XFFFF>	; Check for general network error
	BNEQ	FAIL4			; Fatal error if no match
	CMPW	FAB$L_STV(R8),#^X40E7	; Map read attributes error
	BEQL	ERRATR			;
	CMPW	FAB$L_STV(R8),#^X40E9	; Map privilege violation
	BEQL	ERRPRV			;
	CMPW	FAB$L_STV(R8),#^X40EA	; Map no attributes for file error
	BNEQ	FAIL4			; Fatal error if no match
ERRATR:	MOVZWL	#SS$_FCPREADERR,R1	; Generate SS code for RMS$_ATR
	BRB	PARTIAL_SUCCESS		;
ERRFLK:	MOVZWL	#SS$_ACCONFLICT,R1	; Generate SS code for RMS$_FLK
	BRB	PARTIAL_SUCCESS		;
ERRACC:	MOVZWL	#SS$_FILELOCKED,R1	; Generate SS code for RMS$_ACC
	BRB	PARTIAL_SUCCESS		;
ERRPRV:	MOVZWL	#SS$_NOPRIV,R1		; Generate SS code for RMS$_PRV

;+
; Return partial success to the user on call to $SEARCH (i.e., STS = RMS$_SUC
; and STV = SS$_errorcode).
;-

	ASSUME	FAB$L_STS+4 EQ FAB$L_STV

PARTIAL_SUCCESS:			;
	RMSSUC				; Return success
	MOVQ	R0,FAB$L_STS(R8)	; Update FAB$L_STS and FAB$L_STV

;+
; If FAL returned an error via a DAP Status message, then set a flag to denote
; that the next call to $SEARCH must send a DAP Continue Transfer message to
; restart the DAP directory-list operation at the remote node!
;-

FAIL4:	CMPB	DAP$B_TYPE(R7),-	; Branch if reply from FAL was not a
		#DAP$K_STS_MSG		;  Status message
	BNEQ	10$			;
	$SETBIT	#NWA$V_FTM_CONT,(R7)	; Denote Continue Transfer msg required
10$:	RSB				; Exit with RMS code in R0

	.SBTTL	UPDATE_FAB

;++
; Update the user FAB from the the Attributes message.
;--

UPDATE_FAB:				; Entry point

;
; Process the DAP ORG, MRN, BLS, RFM, and RAT fields.
;

	MOVB	DAP$B_ORG(R7),FAB$B_ORG(R8)
	CMPB	DAP$B_ORG(R7),#DAP$K_SEQ; Branch if SEQ organization
	BEQL	10$			;
	CMPB	DAP$B_ORG(R7),#DAP$K_REL; Branch if not REL organization
	BNEQ	20$			;
	MOVL	DAP$L_MRN(R7),FAB$L_MRN(R8)
	BRB	20$			;
10$:	MOVW	DAP$W_BLS(R7),FAB$W_BLS(R8)
20$:	MOVB	DAP$B_RFM(R7),FAB$B_RFM(R8)
	BSBW	NT$MOD_RAT		; Modify RAT bits returned from FAL
					;  as required
	MOVB	DAP$B_RAT(R7),FAB$B_RAT(R8)

;
; Process the DAP MRS, ALQ, BKS, FSZ, and DEQ fields.
;

	MOVW	DAP$W_MRS(R7),FAB$W_MRS(R8)
	MOVL	DAP$L_ALQ1(R7),FAB$L_ALQ(R8)
	MOVB	DAP$B_BKS(R7),FAB$B_BKS(R8)
	MOVB	DAP$B_FSZ(R7),FAB$B_FSZ(R8)
	MOVW	DAP$W_DEQ1(R7),FAB$W_DEQ(R8)

;
; Process the DAP FOP field.
;

	MOVL	DAP$L_FOP1(R7),R1	; Get DAP FOP bits
	CLRL	R2			; Clear resultant FOP bits
	$MAPBIT	DAP$V_CTG,FAB$V_CTG	; Map CTG bit
	$MAPBIT	DAP$V_CBT,FAB$V_CBT	; Map CBT bit
	$MAPBIT	DAP$V_RCK,FAB$V_RCK	; Map RCK bit
	$MAPBIT	DAP$V_WCK,FAB$V_WCK	; Map WCK bit
	BICL2	#<<FAB$M_CTG>!-		; Clear FOP bits in user FAB
		  <FAB$M_CBT>!-		;  that may be updated
		  <FAB$M_RCK>!-		;
		  <FAB$M_WCK>!-		;
		0>,FAB$L_FOP(R8)	;
	BISL2	R2,FAB$L_FOP(R8)	; Update FOP field
	RSB				; Exit

;++
; Check for undefined record format returned from a 'stream-only' machine. If so,
; convert UDF to STM in the RFM field and return CR in the RAT field.
;--

MOD_RFM_RAT:				; Entry point
	BBC	#DAP$V_STM_ONLY,(R7),10$; Branch if not 'stream-only' machine
	CMPB	DAP$B_RFM(R7),#DAP$K_UDF; Since no Attributes message was sent
	BNEQ	10$			;  to remote to specify record format
	MOVB	#DAP$K_STM,DAP$B_RFM(R7);  (as done on open), convert UDF to STM
	MOVB	#DAP$M_CR,DAP$B_RAT(R7)	; Also declare implied carriage control
10$:	RSB				; Exit

	.END				; End of module
