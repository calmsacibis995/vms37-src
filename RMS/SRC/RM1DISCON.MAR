	$BEGIN	RM1DISCON,008,F$RMSCLOSE1,<DISCONNECT FOR SEQ. ORG.>

;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
; FACILITY: RMS32
;
; ABSTRACT:
;		Module to give back all storage associated with IRAB.
;
;
; ENVIRONMENT:
;		STAR processor running STARLET EXEC.
;
; AUTHOR: L F Laverdure,	 CREATION DATE: 31-Mar-1977
;
; MODIFIED BY:
;
;	V02-008	REFORMAT	Frederick E. Deen, Jr.	    25-Jul-1980
;		This code was reformatted to adhere to RMS standards
;
;	V007	PSK001		P S Knibbe	05-Dec-1979
;		On foreign magtapes the IRB$V_EOF bit is moved into
;		the IFB$V_EOF bit.
;
;--


	.SBTTL	DECLARATIONS

;
; INCLUDE FILES:
;

;
; MACROS:
;

	$IFBDEF
	$IRBDEF
	$DEVDEF

;
; EQUATED SYMBOLS:
;
;
; OWN STORAGE:
;


	.SBTTL	RM$DISCONNECT1 - SEQ. FILE ORG. SPECIFIC DISCONNECT CODE

;++
; RM$DISCONNECT1 - Sequential file organization specific DISCONNECT code
;
; 1.0 If not doing BLOCK I/O, call RM$WTLST1 to write out last
;     block with padding and extending as required.
; 2.0 If disk reset IFB$V_EOF.
; 2.5 If foreign magtape, move IRB$V_EOF bit to IFB$V_EOF bit
; 3.0 Jump to RM$DISCOMMON
;
; CALLING SEQUENCE:
;
;	BSBW	RM$DISCONNECT1
;
;	(entered at RM$DISCONNECT1 via case branch from
;	RM$DISCONNECT with return PC on STACK)
;
; INPUT PARAMETERS:
;
;	R11	IMPURE AREA address
;	R10	IFAB address
;	R9	IRAB address
;	R8	RAB address
;
; IMPLICIT INPUTS:
;
;	The contents of the various RMS internal structures
;
; OUTPUT PARAMETERS:
;
;	R0	STATUS CODE
;	R1-R7,AP destroyed
;
; IMPLICIT OUTPUTS:
;
;	IFB$V_EOF	cleared
;	The implicit outputs of RM$WTLST1
;
; COMPLETION CODES:
;
;	Standard RMS
;
; SIDE EFFECTS:
;
;	May be running at AST level.
;--


RM$DISCONNECT1::
	$TSTPT	DISCON1
	MOVL	#1,R0				; anticipate success
	BBS	#IRB$V_PPF_IMAGE,(R9),10$	; branch if indirect PPF
						;  to avoid write
	BBS	#IFB$V_BIO,IFB$B_FAC(R10),10$	; branch if BLOCK I/O
	BBS	#IRB$V_BIO_LAST,(R9),10$	; branch if last operation
						;  was a BLOCK I/O operation
						;  (mixed block and rec. ops)
	BSBW	RM$WTLST1			; write last block if needed
10$:	BBC	#DEV$V_RND,-			; branch if not disk
		IFB$L_PRIM_DEV(R10),15$
	CSB	#IFB$V_EOF,(R10)		; clear EOF flag
15$:	BBC	#DEV$V_SQD,-			; branch if not magtape
		IFB$L_PRIM_DEV(R10),20$
	BBC	#DEV$V_FOR,-			; branch if not foreign
		IFB$L_PRIM_DEV(R10),20$
	CSB	#IFB$V_EOF,(R10)		; assume it's not at EOF
	BBC	#IRB$V_EOF,(R9),20$		; that's right
	SSB	#IFB$V_EOF,(R10)		; nope - set IFAB bit
20$:	BSBW	RM$DISCOMMON			; go finish up
	BBC	#IFB$V_BIO,IFB$B_FAC(R10),30$	; branch if not BLOCK I/O

;
;  This connect was for BLOCK I/O.
;  Reset to BRO if also set.
;

	BBC	#IFB$V_BRO,IFB$B_FAC(R10),30$	; branch if BRO not also set
	BICB2	#IFB$M_BIO,IFB$B_FAC(R10)	; clear BIO
30$:	RSB					; return to caller
	.END
