	$BEGIN	RMS0ENTER,008,F$RMS0MISC,<ENTER FILE IN DIRECTORY>
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
; FACILITY: RMS32
;
; ABSTRACT:
;	This is the highest level routine to perform the $ENTER function
;
; ENVIRONMENT:
;	VAX/VMS
;
; AUTHOR:
;	Tim Halvorsen	Aug-1979
;
; MODIFIED BY:
;
;	V02-008	RAS0057		Ron Schaefer		22-Dec-1981
;		Probe the expanded string before use.
;
;	V007	JWH0001		Jeffrey W. Horn		16-Dec-1981
;		Make handling of non-directory and SDI devices consistant.
;
;	V006	TMH0006		Tim Halvorsen		07-Sep-1981
;		Use expanded name string to obtain device name rather
;		than DVI whenever possible, so that the logical device
;		name is used in the resultant name string rather than
;		the physical name.
;
;	V02-005	KEK0007		K. E. Kinnear		11-Aug-1981
;		Change IFB$L_AS_DEV to IFB$L_PRIM_DEV where necessary.
;
;	V02-004 MCN0001		Maria del C. Nasr	29-Jul-1981
;		Rename entry point to RMS$$ to support long branches.
;
;	V02-003	REFORMAT	Frederick E. Deen, Jr.	    29-Jul-1980
;		This code was reformatted to adhere to RMS standards
;
;	002	TMH0002		Tim Halvorsen	27-Feb-1980
;		Allow for result name string without a directory spec
;		in RECOVER_FWA.
;
;	001	TMH0001		Tim Halvorsen	05-Feb-1980
;		If NON-DIR or SDI device, setup null directory in RECOVER_FWA
;--
;


	.SBTTL	DEFINITIONS

;
;	SYMBOL DEFINITIONS
;

	$FABDEF				; FAB definitions
	$NAMDEF				; NAM definitions
	$IFBDEF				; IFAB definitions
	$FWADEF				; FWA definitions
	$FIBDEF				; FIB definitions
	$DEVDEF				; DEVICE characteristics

	.SBTTL	ENTER, ENTER FILE IN DIRECTORY

;---
;	
; RMS$$ENTER - Enter file name in directory
;
; INPUTS:
;
;	AP = address of user argument list
;	Expanded name string
;	DVI = DEVICE NAME
;	DID = DIRECTORY ID
;	FID = FILE ID to be entered into the directory
;
; OUTPUTS:
;
;	RESULT NAME STRING
;---

	$ENTRY	RMS$$ENTER

	BSBW	RM$FSETI			; create IFAB
						; R9 = IFAB; R8 = FAB
	MOVL	FAB$L_NAM(R8),R7		; get NAM address
	BSBW	RM$CHKNAM			; check NAM validity
	BLBC	R0,90$				; branch if error

;
;	Recover FWA context from EXPANDED NAME STRING
;

	BSBB	RM$RECOVER_FWA			; recover FWA context
	BLBC	R0,90$				; branch if error

;
;	Call ACP to enter the file name
;

	MOVL	#FIB$C_DIRDATA,FWA$Q_FIB(R10)	; setup FIB descriptor
	MOVAB	FWA$T_FIBBUF(R10),-
		FWA$Q_FIB+4(R10)
	MOVZWL	#FWA$C_NAMBUFSIZ+FWA$C_TYPBUFSIZ+FWA$C_VERBUFSIZ,-
		FWA$Q_NAME(R10)			; setup result descriptor
	CLRQ	-(SP)				; P5/P6 = 0
	PUSHAB	FWA$Q_NAME(R10)			; P4=addr. of rslt descriptor
	PUSHAB	IFB$L_RNS_LEN(R9)		; P3=longword for length
	PUSHAB	FWA$Q_RNS(R10)			; P2=file name string descript.
	MOVZWL	#IO$_CREATE,R0			; ACP function code
	BSBW	RM$FCPFNC			; call ACP and wait for reply
	BLBS	R0,40$				; branch if ok
	RMSERR	ENT,R1				; set default error
	BSBW	RM$MAPERR			; map STV status
	BRB	90$

;
;	Return the RESULT NAME STRING to the user buffer
;

40$:	BSBW	RM$COPY_RESULT			; copy RESULT NAME STRING
	BLBC	R0,90$				; branch if error

;
;	Return HIGHVER/LOWVER bits to caller in FNB
;

	ASSUME	FIB$V_HIGHVER EQ FIB$V_LOWVER+1
	EXTZV	#FIB$V_LOWVER,#2,-		; extract the 2 bits
		FWA$T_FIBBUF+FIB$W_NMCTL(R10),R0
	ASSUME	NAM$V_HIGHVER EQ NAM$V_LOWVER+1
	INSV	R0,#NAM$V_LOWVER,#2,-		; store into FNB
		NAM$L_FNB(R7)

	MOVL	#1,R0				; success
90$:	BRW	RM$CLSCU			; evaporate IFAB and cleanup

	.SBTTL	RM$RECOVER_FWA, RECOVER FWA FROM EXPANDED STRING

;---
;
; RM$RECOVER_FWA - This routine uses the EXPANDED NAME STRING in the NAM
;	           block to restore the state of the FWA so that ACP
;		   operations can be performed using the FWA.
;
;		   Note that it is assumed that this is not a network
;		   operation, since the context is always kept in RMS
;		   space for search sequences.
;
; INPUTS:
;
;	R9 = address of IFAB
;	NAM$L_ESA = address of EXPANDED STRING BUFFER
;	NAM$B_ESL = length of EXPANDED STRING
;	NAM$W_FID/DID = FID and DID of previous file
;	NAM$L_RSA = address of previous RESULT STRING
;	NAM$B_RSL = length of previous RESULT STRING
;	NAM$T_DVI = DEVICE NAME STRING
;
; OUTPUTS:
;
;	R10 = FWA address
;
;	FWA$Q_NODE is not altered.
;	FWA$Q_DEVICE = descriptor of device portion
;	FWA$Q_DIR1 = descriptor of entire directory specification
;			excluding the delimiters
;	FWA$B_DIRTERM = directory terminator
;	FWA$Q_RNS = descriptor of FILE NAME, TYPE and VERSION
;	FWA$B_DIRLEN = number of directory names present
;			(needed for RM$COPY_RESULT)
;	FWA$Q_NAME+4 = address of previous RESULT STRING
;	IFB$L_RNS_LEN = length of previous RESULT STRING
;	the FID and DID fields are copied into the FIB buffer
;	and a channel is assigned to the device.
;---

	.ENABL	LSB

RM$RECOVER_FWA::

;
;	Allocate FWA for FIB buffer
;

	BSBW	RM$FWASET			; allocate FWA
	BLBC	R0,90$				; branch if error

;
;	Get descriptor of expanded name string from NAM block and probe it
;

	MOVZBL	NAM$B_ESL(R7),R4		; get length of expanded string
	BEQL	ERRESL				; error if none
	MOVL	NAM$L_ESA(R7),R5		; get addr. of expanded string
	IFNORD	R4,(R5),ERRESA			; error if cannot read buffer

;
;	Copy device name to FWA.  If possible, get it from the expanded
;	name string rather than the DVI to preserve the logical device name.
;

	MOVAB	FWA$T_DEVICEBUF(R10),R3		; address of buffer
	LOCC	#^A':',R4,(R5)			; scan for end of device name
	BEQL	4$				; if not present, use DVI
	SUBL3	R0,R4,FWA$Q_DEVICE(R10)		; strip colon and stuff after it
	CMPB	FWA$Q_DEVICE(R10),#FWA$C_DEVBUFSIZ ; name too long?
	BGTRU	4$				; if too long, use DVI
	MOVC	FWA$Q_DEVICE(R10),(R5),(R3)	; copy to buffer
	BRB	5$
4$:	MOVZBL	NAM$T_DVI(R7),FWA$Q_DEVICE(R10)	; get length of name
	BEQL	ERRDVI				; error if null
	CMPB	FWA$Q_DEVICE(R10),-		; name too long?
		#FWA$C_DEVBUFSIZ
	BGTRU	ERRDVI				; error if too long
	MOVC	FWA$Q_DEVICE(R10),-		; copy to buffer
		NAM$T_DVI+1(R7),(R3)
5$:	SSB	#FWA$V_DEVICE,(R10)		; mark device name present
	BSBW	RM$ASSIGN			; assign channel to device
	BLBS	R0,10$				; branch if ok
90$:	RSB					; exit with error

ERRDVI:	RMSERR	DVI
	RSB
ERRESA:	RMSERR	ESA
	RSB
ERRESL:	RMSERR	ESL
	RSB

;
;	Move FID, DID and WCC to FIB buffer
;

10$:	ASSUME	FIB$W_DID EQ FIB$W_FID+6
	ASSUME	NAM$W_DID EQ NAM$W_FID+6
	MOVQ	NAM$W_FID(R7),FWA$T_FIBBUF+FIB$W_FID(R10)
	MOVL	NAM$W_FID+8(R7),FWA$T_FIBBUF+FIB$W_FID+8(R10)
	MOVL	NAM$L_WCC(R7),FWA$T_FIBBUF+FIB$L_WCC(R10)

;
;	Setup descriptor of FILE NAME to be sent to ACP
;

	MOVZBL	NAM$B_ESL(R7),R4		; get length of expanded string
	BEQL	ERRESL				; error if none
	MOVL	NAM$L_ESA(R7),R5		; get addr. of expanded string
	IFNORD	R4,(R5),ERRESA			; error if cannot read buffer
	LOCC	#^a'[',R4,(R5)			; find start of directory spec.
	BNEQ	20$				; branch if found
	LOCC	#^a'<',R4,(R5)			; alternate syntax
	BEQL	25$				; branch if not found
20$:	ADDB3	#2,(R1),FWA$B_DIRTERM(R10)	; save directory terminator
	MOVAB	-(R0),R2			; skip directory delimiter
	MOVAB	1(R1),R3			; and create descriptor of rest
	LOCC	FWA$B_DIRTERM(R10),R2,(R3)	; find end of directory spec.
	BEQL	ERRESA				; error if not found
	SUBL	R0,R2				; length of dir. w/o delim.
	INCL	R1				; skip directory terminator
	DECL	R0
	MOVQ	R0,FWA$Q_RNS(R10)		; set descriptor of file name
	CMPW	R2,#FWA$C_MAXDIRLEN		; directory too big?
	BGTRU	ERRESA				; error if too big
	BBC	#DEV$V_RND,IFB$L_PRIM_DEV(R9),25$ ; if non-directory device
	MOVL	R2,FWA$Q_DIR1(R10)		; save length of directory
	MOVC	R2,(R3),@FWA$Q_DIR1+4(R10)	; and save dir. in FWA
	SSB	#FWA$V_DIR,(R10)		; mark directory present
	MOVB	#1,FWA$B_DIRLEN(R10)		; indicate 1 dir. name present

;
;	Use the RESULT NAME STRING from the previous operation
;	as input to the ACP so that it can recover its position
;	within the directory.
;

25$:	CLRL	IFB$L_RNS_LEN(R9)		; preset length of prev. name
	MOVZBL	NAM$B_RSL(R7),R4		; get length of RESULT STRING
	BEQL	50$				; branch if none
	MOVL	NAM$L_RSA(R7),R5		; get address of RESULT STRING
	IFNORD	R4,(R5),ERRRSA			; error if cannot read buffer
	LOCC	#^a']',R4,(R5)			; find end of directory spec
	BNEQ	30$				; branch if found
	LOCC	#^a'>',R4,(R5)			; alternate syntax
	BNEQ	30$				; branch if found
	LOCC	#^a':',R4,(R5)			; find end of device name
	BEQL	ERRRSA				; error if no dev. or directory
30$:	DECL	R0				; skip dev/dir terminator
	INCL	R1
	MOVL	R0,IFB$L_RNS_LEN(R9)		; length of prev. RESULT NAME
	MOVC	R0,(R1),@FWA$Q_NAME+4(R10)	; copy previous RESULT NAME
50$:	MOVL	#1,R0				; success
	RSB

ERRRSA:	RMSERR	RST
	RSB

	.DSABL	LSB

	.END
