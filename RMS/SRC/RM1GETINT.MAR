	$BEGIN	RM1GETINT,050,$RMS1,<INTERNAL GET SEQUENTIAL>,<QUAD,NOWRT>

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
; Facility: rms32
;
; Abstract:
;		this module performs $get /$find record
;		processing for the sequential file organization.
;
;
; Environment:
;		star processor running starlet exec.
;
; Author:	L F Laverdure,	 creation date: 3-FEB-1977
;
; Modified By:
;
;	V02-050 JWH0001		Jeffrey W. Horn		31-Dec-1981
;		Fix broken CASE and yet another branch.
;
;	V02-049	KPL0001		Peter Lieberwirth	31-Dec-1981
;		Fix yet another broken branch.
;
;	V02-048	TMK0042		Todd M. Katz	26-Dec-1981
;		Fix yet another broken branch by changing a BRW GET_RETREC
;		TO A JMP.
;
;	V02-047	TMK0037		Todd M. Katz	24-Dec-1981
;		Fix another broken branch by moving UDFSIZ into the "middle"
;		of GET_ANSI_D.
;
;	V02-046	TMK0033		Todd M. Katz	22-Dec-1981
;		Fix a broken branch by changing a BRW GET00 to a JMP. Also,
;		fix another broken branch by moving the STMSIZ labeled code.
;
;	V02-045	RAS0026		Ron Schaefer	19-Aug-1981
;		Fix broken brances and compress PSECTs.
;
;	V02-044 RAS0025		Ron Schaefer	18-Aug-1981
;		Add $GET support for UDF files.
;
;	V02-043 RAS0023		Ron Schaefer	17-Aug-1981
;		Correct stream files and fixed files from ANSI tape.
;
;	V02-042	RAS0018		Ron Schaefer	7-Aug-1981
;		Fix more broken branches caused by stream files.
;
;	V02-041	RAS0018		Ron Schaefer	6-Aug-1981
;		Fix broken branches caused by stream files.
;
;	V02-040	RAS0016		Ron Schaefer	28-Jul-1981
;		Add stream file support
;
;	V02-039	RAS0017		Ron Schaefer	21-Jul-1981
;		Change $EOD processing for SYS$INPUT so that RM1INPUT_SCAN
;		no longer worry about fitting into the buffer.
;		This change is necessary to make stream files work later.
;
;	V02-038	KRM0020		K R Malik	 1-JUL-1981
;		Do not clear RFA on network operation.
;
;	V02-037	JAK0051		J A Krycka	23-DEC-1980
;		For task-to-task get operation, use the smaller of RAB$W_USZ
;		and IFB$W_DEVBUFSIZ to determine the number of bytes to request
;		in a receive QIO system service call.
;
;	V036	REFORMAT	Ken Henderson	30-JUL-1980	5:49
;		the code was reformatted
;
;	V035	JAK0045		J A Krycka	19-MAR-1980	15:00
;		fix bug in return of stv for network operation.
;
;	V034	PSK0017		P S Knibbe	14-MAR-1980	11:00
;		sequential get should only round up record size if the
;		device is not magtape (checking for ansii is wrong).
;
;	V033	JAK0041		J A Krycka	02-MAR-1980	14:00
;		issue new get after find if network operation, because
;		network find does not return a record.
;
;	V032	CDS0012		C D Saether	23-FEB-1980	21:53
;	use larger of terminal width and user buffer size for read
;	request to terminals.  move data if byte count non-zero.
;
;	V031	PSK0004		P S Knibbe	18-DEC-1979	10:00
;	if get from terminal has control-y or control-c alternate
;	success status, don't return the tns error
;
;	V030	PSK0002		P S Knibbe	26-NOV-1979	 6:00
;	terminal escape sequences are placed in the user buffer if
;	there is room for them.
;
;	V029	PSK0001		P S Knibbe	25-NOV-1979	12:00
;	a get on foreign magtape clears the irb$v_eof bit
;
;	V028	CDS0011		C D Saether	26-JUN-1979	17:20
;	fixes so mailboxes work correctly as sys$input
;
;--

	.SBTTL	DECLARATIONS

;
; Include Files:
;

;
; Macros:
;

	$RABDEF
	$FABDEF
	$IRBDEF
	$IFBDEF
	$DEVDEF
	$BDBDEF
	$PIODEF
	$RMSDEF
	$SSDEF

;
; Equated Symbols:
;

	ROP=RAB$L_ROP*8			; bit offset to rop
	LF=10				; line feed
	VT=11				; vertical tab
	FF=12				; form feed
	CR=13				; carriage return
	CTRLZ=26			; control z

;
;
; Own Storage:
;


	.SBTTL	RM1GETINT - INTERNAL GET/FIND SEQUENTIAL ALL DEVICES

;++
; RM$GET_UNIT_REC
; RM$GET_BLK_DEV
; RM$GETRANDOM
;
;	this module includes two routines to perform get/find
;	record processing for the sequential file organization.
;
; Calling sequence:
;
;	bsbw	rm$get_unit_rec	; for unit record device
;	bsbw	rm$get_blk_dev	; for block-oriented device
;
; Input Parameters:
;
;	r11	impure area addr
;	r10	ifab addr
;	r9	irab addr
;	r8	rab addr
;
; Implicit Inputs:
;
;	the contents of the various structures.
;
; Output Parameters:
;
;	r0	status code
;	r1-r7	destroyed
;
; Implicit Outputs:
;
;	the internal structures are updated to reflect the
;	results of the get or find. the rab fields
;	are updated to correspond to the found or gotten
;	record (see functional spec for list).
;
; Completion Codes:
;
;	standard rms.
;
; Side Effects:
;
;	none
;
;--


	.SBTTL	RM$GET_UNIT_REC - UNIT RECORD GET ROUTINE

;

RM$GET_UNIT_REC::
	MOVL	#1,R0			; get a correct status in r0
	MOVL	IRB$L_CURBDB(R9),R4	; get current bdb addr
	BEQL	NEXT			; branch if none exists
	BBC	#IFB$V_PPF_INPUT,(R10),10$; br if not 'sys$input'

;
; if this is the 'input' stream for this process, then retrec will perform
; end of deck checking.  it indicates that the current record is to be
; re-retrieved on the next get by resetting the nrp context from the rp
; context (makes much sense for disk files).  to detect that same condition
; here (mailboxes are reasonably used as sys$input), the nrp field is stuffed
; with a 1 before calling retrec.  the rp field is left clear.  therefore, if
; the nrp field is clear at this point, we are supposed to re-retrieve the
; same record as last time (i.e., get it out of the buffer).  note that the
; nrp field can be anything following connect if curbdb is zero so that this
; check is skipped the first time through after connect.
;

	TSTL	IRB$L_NRP(R9)		; re-retrieve this record?
	BEQL	MOVEDATA		; yep

;
; if last operation was a find and this is a get, then re-use the record
; in curbdb, otherwise skip it and get a new one
;

10$:	BBS	#IFB$V_DAP,(R10),NEXT	; network find does not return

;
;  any data, so get new record
;

	BBC	#IRB$V_FIND_LAST,(R9),NEXT; get another
	BBC	#IRB$V_FIND,(R9),MOVEDATA; this is a get, use rec found

;
; irb$v_eof is used to mark whether or not the device is a end of file.
; because foreign magtapes permit a user to read past the end of the file,
; they must clear this bit on a read.  foreign magtapes which were mounted
; with a record size specified do not go through this path.
;

NEXT:	BBC	#DEV$V_SQD,IFB$L_PRIM_DEV(R10),10$; branch if not magtape
	BBC	#DEV$V_FOR,IFB$L_PRIM_DEV(R10),10$; branch if not foreign
	CSB	#IRB$V_EOF,(R9)		; always clear eof on get

10$:	BBS	#IRB$V_EOF,(R9),GETEOF	; exit if at eof

;
; get next record
;

	MOVZWL	IFB$W_DEVBUFSIZ(R10),R2	; size of buffer
	BBC	#IFB$V_NSP,(R10),15$	; branch if not task-to-task operation
	CMPW	RAB$W_USZ(R8),R2	; use the smaller of user buffer size
	BGEQU	20$			;  and device width (which for
	MOVZWL	RAB$W_USZ(R8),R2	;  task-to-task communication is a
	BRB	20$			;  predefined data transfer size limit)
15$:	BBC	#DEV$V_TRM,-		; branch if not terminal
		IFB$L_PRIM_DEV(R10),20$	;
	CMPW	R2,RAB$W_USZ(R8)	; use the larger of user buffer size
	BGEQU	20$			;  and terminal width (as user request
	MOVZWL	RAB$W_USZ(R8),R2	;  may exceed one line of data)
20$:	CLRQ	IRB$L_IOS(R9)		; init io status block
	CLRL	R3			; read required
	BSBW	RM$SEQRD		; get the record

	ASSUME	<BDB$B_REL_VBN+1> EQ BDB$B_VAL_VBNS
	CLRW	BDB$B_REL_VBN(R4)	; clear both fields
	INCB	BDB$B_VAL_VBNS(R4)	; make this a one (was zero)

;
; so rm$input_scan works
;

	BLBC	R0, GET1_ERR		; further checks if error

;
;  if terminal device, make further checks.
;

CONT:	BBS	#DEV$V_TRM, IFB$L_PRIM_DEV(R10), TRM; branch if terminal

;
;  return the record
;

MOVEDATA:
	MOVL	IRB$L_IOS4(R9), RAB$L_STV(R8); return 2nd lngwrd iosb to user
ERR_CONT:
	MOVL	#1,IRB$L_NRP(R9)	; stuff with 1 (see note above)
	MOVL	BDB$L_ADDR(R4),R1	; set up r1, r6, r7 for retrec
	MOVZWL	BDB$W_NUMB(R4),R6
	ADDL3	R1,R6,R7
	BBS	#IFB$V_DAP, (R10), NTVFC; branch if network request
NET_CONT:
	PUSHL	R0			; save status
	BSBW	RETREC			; return the record
	BLBC	R0, RET_ERR		; branch on error
	POPL	R0			; restore status
	BBS	#DEV$V_TRM, IFB$L_PRIM_DEV(R10), TRM1; branch if terminal
ZERO_RFA1:
	BBS	#IFB$V_DAP,(R10),10$	; Branch if network request
	CLRQ	RAB$W_RFA(R8)		; zero rfa
10$:	RSB				; return to caller


;++
;
;  eof error
;
;--

RM$GET_EOF::
GETEOF:	$PSECT_BR	L$RMS1
	RMSERR	EOF

;
;  if device is a terminal reset eof flag so that eof error is given only once
;

	BBC	#DEV$V_TRM,IFB$L_PRIM_DEV(R10),10$; branch unless terminal
	CSB	#IRB$V_EOF,(R9)		; reset eof flag
	BRB	20$			; and branch to common exit

;
;  if this is sys$input (on other than a terminal) reset end of data scan string
;

10$:	BBC	#IFB$V_PPF_INPUT,(R10),20$	; branch if not sys$input
	BICB2	#1@PIO$V_EOD,@#PIO$GW_STATUS	; clear "$eod" flag
	MOVW	#1+<^A/$/ @ 8>,@#PIO$GT_ENDSTR	; reset eod string to single "$"
20$:	BRB	ZERO_RFA
	$PSECT_RESTORE

;++
;
;   if a sequential read returned a partial escape or a bad escape error
;   map to rms error.  this will be overridden by retrec errors (e.g., rtb).
;   in any case, continue to move any data returned (byte count in iosb).
;
;--

GET1_ERR:
	$PSECT_BR	L$RMS1

	CMPW	R0,#<RMS$_RER&^XFFFF>	; read error ?
	BEQLU	20$			; read error - check for specl

;
;  continue to return any data present.  this error will be preserved unless
;  retrec gets an error.
;

10$:	BRW	ERR_CONT		; no - continue
20$:
	CMPW	IRB$L_IOS(R9), #SS$_BADESCAPE; yes - bad escape sequence ?
	BNEQU	40$			; no - check next
	RMSERR	BES,R0			; yes - map error

;
;  continue to return any data present.  this error will be preserved unless
;  retrec gets an error.
;

30$:	BRW	CONT			; do rest of terminal things

40$:	CMPW	IRB$L_IOS(R9), #SS$_PARTESCAPE; is it partial escape sequence?
	BNEQU	10$			; no - continue
	RMSERR	PES,R0			; use rms error
	BRB	30$			; continue in-line code
	$PSECT_RESTORE


;
;  special checks for terminal devices after qio is done.  adjust
;  bdb$w_numb to include escape sequences and cause them to be returned.
;

TRM:	CMPW	IRB$L_IOS4+2(R9), #1	; 1 byte terminator?
	BEQL	10$			; if so don't copy it
	ADDW2	IRB$L_IOS4+2(R9), BDB$W_NUMB(R4); add in escape sequence
10$:	CMPB	IRB$L_IOS4(R9), #CTRLZ	; record terminate with ^z?
	BNEQ	MOVEDATA		; branch if not
	TSTW	IRB$W_IOS2(R9)		; test size returned
	BEQL	GETEOF			; make this eof if zero
	BBCS	#IRB$V_EOF,(R9), MOVEDATA; set eof flag
	BRB	MOVEDATA		; might not need this, worth 2

RET_ERR:
	ADDL2	#4, SP			; ignore previous error
	BRB	ZERO_RFA1		; and get out

TRM1:	BBS	#IRB$V_FIND, (R9), ZERO_RFA1; is this is find, leave now
	CMPW	IRB$L_IOS4+2(R9), #1	; 1 byte terminator?
	BEQL	ZERO_RFA1		; no sweat, all done
	BGTRU	10$			; branch if escape sequence
	CMPW	#1, IRB$L_IOS(R9)	; straight success so far?

;
; check in iosb so that a get
; following find that got
; cntrl^c or y alt succ does
; not get tns error.
;

	BNEQU	ZERO_RFA1		; no, then leave error as is
	RMSERR	TNS			; else say no terminator seen
10$:	SUBW2	IRB$L_IOS4+2(R9), RAB$W_RSZ(R8); adjust record size reported

;
; so that escape sequence is
; not included.
;

	BRB	ZERO_RFA1		; and out

;++
;
; network specific code to update rhb if record in vfc format
;
;--

NTVFC:	CMPB	IFB$B_RFMORG(R10),#FAB$C_VFC; vfc format?
	BNEQ	20$			; branch if not
	MOVZBL	IFB$B_FSZ(R10),R2	; pick up fixed header size
	ADDW2	R2,IRB$W_CSIZ(R9)	; adjust total record size
	SUBL2	R2,R6			; adjust remaining rec size
	BLSSU	ZERO_RFA1_BR		; branch if fsz > available data
	MOVL	RAB$L_RHB(R8),R3	; get user's header buffer
	BEQL	10$			; and branch if none

;
;  move vfc header to user
;

	BBS	#IRB$V_FIND,(R9),10$	; branch if this is a find
	BSBW	GTMVRC			; move just like record
	BLBC	R0,30$			; branch on error

;
;  skip over unwanted rhb
;

10$:	ADDL2	R2,R1			; bump source pointer
20$:	BRW	NET_CONT		; rejoin mainline
30$:	BRW	ERRRHB			; branch aid
ZERO_RFA1_BR:
	BRW	ZERO_RFA1		; branch aid

	.SBTTL	RM$GET_BLK_DEV - BLOCK DEVICE GET ROUTINE

;++
;
;  perform get from a block device.
;
;--

;++
;
;  make longer version of eof check.
;	(note: this label is not a global entry point)
;--

CHKEOF1:
	BSBW	RM$CHKEOF1		; set/clear eof bit
	BBC	#IRB$V_EOF,(R9),GETNRP	; branch if not eof
	BRB	GETEOF			; report error
	$QUAD_ALIGN	.+6		; align rm$get_blk_dev for performance

;++
;
;  get next block  (note: this label is not a global entry point)
;
;--

GET00:	BSBW	NXTBLK
	BLBC	R0,ZERO_RFA1_BR		; get out on error

;++
;
;  entry point to read a full buffer (i.e., mbc+1 blocks)
;
;--

RM$GET_BLK_DEV::
	CLRL	R3			; flag full read required

;++
;
;  entry point for random reads to transfer less than mbc+1 blocks
;	r3=short read flag (#2) and r2=# blocks to read minus 1
;
;--

RM$GETRANDOM::
	$TSTPT	GETBLKD
	CMPL	IRB$L_NRP_VBN(R9),IFB$L_EBK(R10); at or past eof block?
	BGEQU	CHKEOF1			; yes - make long check

;
;  must get the block specified by nrp
;

GETNRP:	BSBW	RM$GETBLKNRP		; get the block
ZERO_RFA_BR:
	BLBC	R0,ZERO_RFA1_BR		; get out on error
	ADDL2	IRB$L_NRP_OFF(R9),R1	; make offset into address
	MOVQ	IRB$L_NRP_VBN(R9),IRB$L_RP_VBN(R9); set rp from nrp


;++
;
;  determine record length based on record format
;
;--
;
;  if record format is fixed, there is no size field; if either var or vfc,
;  the total size field is, by definition (i.e., $put), contained in a single
;  block, thus it can be accessed without regard for crossing block boundaries.
;
;  the size field is in one of the following two formats:
;
;	binary  -  word-aligned signed 15-bit integer (size of data)
;		-  -1 = end of block
;		-  -n illegal
;
;	ansi d  -  byte-aligned 4 decimal ascii char count (size of data + 4)
;		-  "^" = end of block
;		-  all other chars illegal (rms$_ani)
;
;--

	CASE	TYPE=B,SRC=IFB$B_RFMORG(R10),-	; case on record format
		LIMIT=#FAB$C_UDF,-
		DISPLIST=<-
		UDFSIZ,-			; UDF
		FIXSIZ,-			; FIX
		VARSIZ,-			; VAR
		VARSIZ,-			; VFC
		STMSIZ,-			; STM11
		STMSIZ,-			; STMLF
		STMSIZ>				; STMCR

VARSIZ:	BBS	#IFB$V_ANSI_D,(R10),GET_ANSI_D; branch if ansi d

;
;  binary size field
;

GET_BIN_SIZ:
	MOVW	#2,IRB$W_CSIZ(R9)	; note overhead for size field
	CVTWL	(R1)+,R6		; get rec length
	BLSS	GET_CHKMINUS		; branch if negative

;++
;
;  if records are not allowed to cross block boundaries, see if it
;  does and is therefore illegal.
;
;--

CHKBLK:	BBC	#FAB$V_BLK,IFB$B_RAT(R10),GET_CHKVFC; branch if crossing blk o.k.
	BSBW	CROSSBLK		; does record cross?
	BLEQU	GET_CHKVFC		; branch if not
	CMPB	IFB$B_RFMORG(R10),#FAB$C_FIX; fixed length records?
	BNEQ	ERRIRC			; branch if not

;
;  fixed length record format, no crossing block boundaries allowed.
;  if size not larger than a block then go back and get next block.
;

	CMPW	R6,IFB$W_DEVBUFSIZ(R10)	; record len > 1 block?
	BLEQU	GET00			; branch if yes


;++
;
;  illegal record format
;
;--

ERRIRC:	$PSECT_BR	L$RMS1
	RMSERR	IRC
	MOVL	IRB$L_NRP_VBN(R9),RAB$L_STV(R8); indicate vbn having bad record
	BRW	ZERO_RFA
	$PSECT_RESTORE


;++
;
;  fixed size record  - pick up the record length
;  and check for a record of all "^" chars on magtape, which is ignored.
;
;--

FIXSIZ:	CVTWL	IFB$W_LRL(R10),R6	; get fixed rec length
	BLSS	ERRIRC			; handle unreasonable size error
	BBC	#IFB$V_ANSI_D,(R10),CHKBLK ; proceed if not tape
10$:	BSBW	CROSSBLK		; does next record cross block?
	BGTRU	CHKBLK			; proceed if so
	PUSHL	R1			; save buffer ptr
	SKPC	#^A\^\,R6,(R1)		; is record all "^" chars?
	BNEQ	20$			; no, so have valid record
	ADDL2	#4,SP			; discard old buffer ptr
	BRB	10$			; and try next record
20$:	MOVL	(SP)+,R1		; restore buffer ptr
	BRB	CHKBLK			; and continue

;++
;
;  check for size = -1 (end of block flag)
;
;--

GET_CHKMINUS:
	INCL	R6			; size = -1?
	BNEQ	ERRIRC			; handle error
	BRW	GET00			; branch if yes -
					; says get next block

;
;  stream format -- skip the trailing "^" chars in the block for 
;  magtape.
;
STMSIZ:	JMP	STMSZ1			;
	$NEWPSECT	L$RMS1STM	;
STMSZ1:	BBC	#IFB$V_ANSI_D,(R10),20$	; only check for ansi tape
	MOVL	#4,R2			; record count
10$:	CMPL	R1,R7			; end-of-block?
	BEQL	30$			; yes, go to next block
	CMPB	(R1)+,#^A\^\		; is char eql "^"?
	BEQL	30$			; yes, go to next block
	SOBGTR	R2,10$			; for entire record count
20$:	BRW	RM$GET_STM_FMT		; retrieve the record

30$:	JMP	GET00			; go to next block
	$PSECT_RESTORE

;
;  for UDF format, the users buffer size IS the record size.
;  however, we must perform our own logical end-of-file checking
;  and reduce the last record length accordingly.
;  Eof will be detected on the next $GET.
;

UDFSIZ:	JMP	UDFSIZ1
	$NEWPSECT	L$RMS1STM

UDFSIZ1:MOVZWL	RAB$W_USZ(R8),R6	; get requested size
	MOVZWL	IFB$W_DEVBUFSIZ(R10),R0	; get magic buffersize number
	SUBL3	IRB$L_NRP_VBN(R9),-
		IFB$L_EBK(R10),R2	; get # blks till EOF
	SUBW3	IRB$W_NRP_OFF(R9),-
		IFB$W_FFB(R10),R3	; and offset too
	BGEQ	20$			; negative means blk underflow
	DECL	R2			; reduce # blks
	ADDW2	R0,R3			; and add a blk
20$:	MOVL	R6,R4			; prepare for divide
	CLRL	R5			; convert size to blk,byte format
	EDIV	R0,R4,R4,R5		;  in R4/R5
	CMPL	R4,R2			; adequate # of blks avail?
	BGTRU	30$			; no room
	BLSSU	40$			; lots of room
	CMPW	R5,R3			; enough bytes maybe?
	BLSSU	40$			; yes
30$:	MULL3	R0,R2,R6		; use the remaining space up
	ADDW2	R3,R6			; for this record
40$:	JMP	GET_RETREC
	$PSECT_RESTORE



;++
;
;  this is a get of a variable (or vfc) ansi magtape record.
;
;  interpret the first four bytes of the record as the length in decimal ascii.
;
;--

GET_ANSI_D:
	$PSECT_BR	L$RMS1
	MOVW	#4,IRB$W_CSIZ(R9)	; note overhead
	MOVL	#4,R2			; pick up 4 bytes
	CLRL	R6			; build resultant rec. len. here
	CLRL	R0			; clear high order bits of r0
10$:	SUBB3	#^A/0/,(R1)+,R0		; pick up digit & remove bias
	BLSS	ERRANI			; branch if bad
	CMPB	R0,#9			; is it a digit?
	BGTRU	20$			; branch if not
	MULW2	#10,R6			; shift previous partial result
	ADDW2	R0,R6			; add in new digit
	SOBGTR	R2,10$			; continue if more digits
	SUBL2	#4,R6			; adjust for size field itself
	BLSS	15$			; bad size?
	BRW	CHKBLK			; continue if not
15$:	BRW	ERRIRC			; report bad record size

;
;  character was > 9.  check for '^' implying end of block.
;

20$:	CMPB	R0,#<^A/^/ - ^A/0/>	; was invalid character '^'?
	BNEQ	ERRANI			; branch if not
	BRW	GET00			; yes - go read next block

;
;  invalid ansi d format.
;

ERRANI:	RMSERR	ANI
	BRW	ZERO_RFA		; get out on error
	$PSECT_RESTORE


;++
;
;  if vfc, process fixed header
;
;--

	.ALIGN	QUAD
GET_CHKVFC:
	CMPB	IFB$B_RFMORG(R10),#FAB$C_VFC; vfc format?
	BNEQ	GET_RETREC		; branch if not
	MOVZBL	IFB$B_FSZ(R10),R2	; pick up fixed header size
	ADDW2	R2,IRB$W_CSIZ(R9)	; adjust total record size
	SUBL2	R2,R6			; adjust remaining rec size
	MOVL	RAB$L_RHB(R8),R3	; get user's header buffer
	BNEQ	20$			; and branch if there is one

;
;  skip over unwanted rhb
;

2$:	SUBL3	R1,R7,R0		; get # bytes left in buffer
	CMPL	R0,R2			; less than fsz?
	BGEQU	10$			; branch if not
	SUBL3	R0,R2,-(SP)		; get remaining count
	BSBW	NXTBLK			; get new buffer
	POPR	#^M<R2>			; restore remaining count
	BLBS	R0,10$			; get out on error
	BRW	ZERO_RFA

;
;(FSZ DEFINITELY IN THIS BLOCK)
;

10$:	ADDL2	R2,R1			; bump source pointer
	BRB	GET_RETREC		; rejoin var line

;
;  move vfc header to user
;

20$:	BBS	#IRB$V_FIND,(R9),2$	; branch if this is a find
	BSBW	GTMVRC			; move just like record
	BLBC	R0,ERRRHB		; get out on error


;++
;
;  now return record to user
;
;--

GET_RETREC:
	BSBB	RETREC			; return record to user
	BLBC	R0,CHKRTB		; get out on error

;
;  at this point get has been done for user.
;  now just round up nrp_off to a word boundary unless magtape
;

CHKANI:	BBS	#DEV$V_SQD,IFB$L_PRIM_DEV(R10),10$; branch if magtape

	ASSUME	FAB$C_UDF EQ 0

	TSTB	IFB$B_RFMORG(R10)	; UDF format?
	BEQL	10$			; no rounding needed
	INCL	R1			; word align next byte pointer
	BICB2	#1,R1			;  "
10$:

;
; stream format rejoins mail-line here
;

RM$GET_DONE::
	MOVL	IRB$L_CURBDB(R9),R4	; get current bdb address
	SUBL3	BDB$L_CURBUFADR(R4),R1,IRB$L_NRP_OFF(R9); make byte pointer relative
	CMPW	R1,R7			; check for at end of block
	BEQL	20$			; branch if yes
15$:	MOVQ	IRB$L_RP_VBN(R9),RAB$W_RFA(R8); set rfa
	RSB				; and return

;
;  at end of block  -  bump vbn and clear offset in block
;

20$:	INCL	IRB$L_NRP_VBN(R9)
	CLRW	IRB$W_NRP_OFF(R9)
	BRB	15$


;++
;
;  handle errors
;
;--
;
;  received error from retrec.
;  check for special error code of 10000(hex) on sys$input, indicating re-read
;  of buffer, else if error is rtb, continue anyway, else get out.
;
;--

CHKRTB:	$PSECT_BR	L$RMS1
	CMPW	R0,#RMS$_RTB&^XFFFF	; is this the rtb error?
	BNEQ	ZERO_RFA		; branch if not
	BRW	CHKANI			; branch if yes

;++
;
;  error exit for block device
;
;--

ZERO_RFA:
	CLRQ	RAB$W_RFA(R8)		; zero rfa
	RSB
	$PSECT_RESTORE

;++
;
;  handle invalid record header buffer
;
;--

ERRRHB:	$PSECT_BR	L$RMS1
	CMPW	R0,#RMS$_UBF&^XFFFF	; was error bad ubf?
	BNEQ	10$			; branch if not
	RMSERR	RHB			; switch error code to bad rhb
10$:	BRW	ZERO_RFA
	$PSECT_RESTORE

	.SBTTL	INTERNAL UTILITY ROUTINES
;++
; CHKEOD
; RETREC
; RETREC1
; SUCXIT
; UPDSRC
; MOVEMODE
; CHKUSZ
; SETRSZ
; ERRRTB
; CROSSBLK
; ERRUSZ
; ERRUBF
; ERRUBF1
; SKPREC
;
; retrec routine to return record data to user.
; handles crossing block boundaries and locate mode.
;
; Input Parameters:
;
;	r11	impure area addr
;	r10	ifab addr
;	r9	irab addr
;	r8	rab addr
;	r7	addr of end of buffer+1
;	r6	size of record in bytes
;	r1	addr of record in the buffer
;
; Implicit Inputs:
;
; the contents of the various structures.
;
; outputs:
;
;	r7	end addr of current i/o buffer+1 (updated)
;	r2-r6	destroyed
;	r1	pointer to next byte in block
;	r0	status code
;
; Implicit Outputs:
;
;	irb$l_curbdb	may be updated
;	irb$w_cursiz=irb$w_cursiz+record size
;	rab$l_rbf
;	rab$w_rsz
;	rab$l_stv	=total record size if rtb error
;	rab$l_ubf	record moved here if move mode
;
; completion code:
;--



;
;	standard rms.	upon an error irb$l_ios and irb$l_ios4
;	may have additional information.
;
; Side Effects:
;
;	may cause i/o if record crosses block boundary.
;
;--
;



;++
;
;  this is get from sys$input  -  make additional logical eof checks
;  (note: this is not the entry point to the retrec subroutine)
;
;--

CHKEOD:	BBC	#IRB$V_PPF_IMAGE,(R9),RETREC1; branch if not indirect
	BBS	#DEV$V_TRM,IFB$L_PRIM_DEV(R10),RETREC1; branch if terminal

	$PSECT_BR	L$RMS1GETPPF
;++
;
;  Fix up the buffer pointer so that the $EOD scan will complete
;  succesfully for the worst case record of 257 bytes in VFC format with
;  a 255 fixed portion.
;
;  This may involve re-positioning the buffer so that the current record is
;  in the first block.   We assume the RM$CONNECT1 has forced MBC>0 so that
;  at least 2 blocks are present in each buffer.
;
;  Check if entire record is contained in the buffer.
;  Note that the current record is not entirely contained within the buffer
;  can only happen with disk files.
;
;  This check assumes that mbc is non-zero for disk files where records cross
;  block boundaries.  in this case, bdb$b_val_vbns gives the number of valid
;  blocks in the buffer, and bdb$b_rel_vbn specifies which block within the
;  buffer is currently being processed, in the range of 0 to irb$b_mbc.
;
;  Calculate in r5 the total # of bytes remaining in this and any subsequent
;  blocks in the buffer.
;
;	note: if sys$input is from a disk file and records are allowed to
;	      cross block boundaries, irb$b_mbc must be greater than 0,
;	      otherwise the processing of a record crossing a block boundary
;	      will cause rms to loop.  it is assumed that rm$connect1 has
;	      forced mbc > 0.
;
;  If the record is not contained in the current buffer,
;  cause the buffer to be read again, but with the current block as the
;  first block in the buffer.  Since the buffer is a multiple block buffer,
;  the new read will cause the next part of the current record to be
;  resident also.
;
;  note:  worst case is a vfc record with a 255 byte fixed part, with the
;	  byte count coming as the last word of a block.  in this case
;	  and with a 2-block buffer, min. record size that can be processed
;	  is 257 bytes.
;--

	CMPL	R1,R7			; is this the end of the buffer?
	BNEQ	10$			; branch if not
	BSBW	RM$NEXT_BLK		; yes - go read another block
	BLBS	R0,10$			; get out on error
	RSB
10$:
	SUBL3	R1,R7,R5		; compute # bytes left this block
	MOVL	IRB$L_CURBDB(R9),R4	; get current bdb address
	MOVZBL	BDB$B_VAL_VBNS(R4),R0	; total # valid vbns in buffer
	SUBB2	BDB$B_REL_VBN(R4),R0	; # blocks to end of buffer
	DECL	R0			; adjust for current block
	MULW2	IFB$W_DEVBUFSIZ(R10),R0	; # bytes after current block
	ADDW2	R0,R5			; total # valid bytes left
	CMPW	R6,R5			; is entire record within buff?
	BGTRU	20$			; re-position if not
	BRW	SCNEOD			; branch if so
20$:	BSBW	RM$RELBLK1		; release buffer
	BLBC	R0,40$			; get out on error
	MOVQ	IRB$L_RP_VBN(R9),IRB$L_NRP_VBN(R9); re-read this record
	CMPW	R6,#257			; any worst case problems?
	BGTRU	30$			; branch if yes
	CLRL	IRB$L_CURBDB(R9)	; make sure this bdb not reused
	JMP	RM$GET_BLK_DEV		; start over, re-mapping the buffer

30$:	RMSERR	IRC			; illegal record encountered
40$:	RSB				; and return to caller
	$PSECT_RESTORE

SCNEOD:	BSBW	RM$INPUT_SCAN		; compare string for
					; match with eod string
					; or '$deck' or '$eod'

	BLBS	R0,RETREC1		; continue on success
	RSB

;++
;
;  entry point for retrec subroutine
;
;--

	.ALIGN	QUAD			; align for performance
RETREC:
	BBS	#IFB$V_PPF_INPUT,(R10),CHKEOD; branch if 'sys$input'
RETREC1:
	ADDW2	R6,IRB$W_CSIZ(R9)	; add into total record size
	BBC	#RAB$V_LOC+ROP,(R8),MOVEMODE; branch if move mode

;
; user wants locate mode
;	-allow only if record does not cross block boundary
;	and file is not update accessed
;	and not indirect access to ppf
;

	BBS	#IRB$V_PPF_IMAGE,(R9),MOVEMODE; force move on ind

;
; access of ppf
;

	BBS	#IFB$V_UPD,IFB$B_FAC(R10),MOVEMODE; if update access, move mode
	SUBL3	R1,R7,R0		; get end address of buffer
	CMPL	R6,R0			; past end of block?
	BGTRU	MOVEMODE		; if so, must move record

;
; o.k. for locate mode
;

	MOVW	R6,RAB$W_RSZ(R8)	; set record size
	MOVL	R1,RAB$L_RBF(R8)	; and record address
SUCXIT:	RMSSUC
UPDSRC:	ADDL2	R6,R1			; adjust r1 to point past

;
; record in buffer
;

	RSB


;++
;
; move mode  -  move record to user's buffer
;
;--

MOVEMODE:
	BBS	#IRB$V_FIND,(R9),SKPREC	; branch if find, skipping record
	MOVL	RAB$L_UBF(R8),R3	; get user buffer addr
	MOVZWL	RAB$W_USZ(R8),R4	; and length
	BEQL	ERRUSZ			; branch if zero
CHKUSZ:	MOVL	R6,R2			; copy record size
	CMPL	R4,R2			; user buffer long enough?
	BGEQU	SETRSZ			; branch if so

;
; user buffer not long enough
; readjust count to fill it and advise of difference
; (error status code generated later)

	MOVZWL	R2,RAB$L_STV(R8)	; indicate total record size
	MOVL	R4,R2			; just use user buffer size

;
; store the record's address and size and move the data
;

SETRSZ:	MOVW	R2,RAB$W_RSZ(R8)	; set rsz
	MOVL	R3,RAB$L_RBF(R8)	; set rbf from ubf addr
	SUBL2	R2,R6			; compute remaining byte count
10$:	BSBB	GTMVRC			; move the record
	BLBC	R0,100$			; get out on error
	TSTL	R6			; part of record yet to be moved?
	BNEQ	SKPREC			; branch if yes
100$:	RSB				; return to retrec caller


;++
; crossblk routine to check for record crossing block boundary
;
; inputs:
;
;	r7	end addr of block buffer (+1)
;	r6	size of record
;	r1	addr of record in buffer
;
; outputs:
;
;	r0	#bytes left in buffer
;
; condition codes:
;
;	set such that a bgtru branch will be taken
;	if the record crosses the block boundary.
;
;--

CROSSBLK:
	SUBL3	R1,R7,R0		; #bytes left=end-start
	CMPL	R6,R0			; rec len > # left?
					; sets condition codes
	RSB


;++
;
; user buffer errors
;
;--

ERRUSZ:	$PSECT_BR	L$RMS1
	RMSERR	USZ			; user buffer size = 0
	RSB
	$PSECT_RESTORE

;
;  user buffer not writeable from caller's mode.
;

ERRUBF:	POPR	#^M<R3,R4>		; clean up stack
ERRUBF1:
	$PSECT_BR	L$RMS1
	RMSERR	UBF			; no access to user buffer
	RSB
	$PSECT_RESTORE

;++
;
; must skip over that part of record not moved
; due to short user record buffer or doing find
;
;--

SKPREC:	BSBB	CROSSBLK		; does record cross block bound?
	BLEQU	60$			; branch if not
	SUBL2	R0,R6			; compute remaining recordsize
					; =old size - part in buffer
	BSBW	NXTBLK			; get another buffer full
	BLBS	R0,SKPREC		; and loop if no error
	RSB				; get out on error

;
; return record too big error
;

60$:	BBC	#IRB$V_FIND,(R9),70$	; branch if not doing find
	BRW	SUCXIT			; branch if find
70$:	$PSECT_BR	L$RMS1
	RMSERR	RTB
	BRW	UPDSRC			; rejoin main line
	$PSECT_RESTORE

	.SBTTL	GTMVRC - SUBROUTINE TO MOVE A RECORD

;++
; GTMVRC
; RM$NEXT_BLK
;
;	this subroutine moves a record from rms i/o buffer
;	to user's record buffer, crossing block boundaries
;	as needed.
;
; Calling sequence:
;
;	bsbw	gtmvrc
;
; Input Parameters:
;
;	r7	end addr of block buffer
;	r3	destination addr
;	r2	size of record in bytes
;	r1	source addr (in block buffer)
;
; Implicit Inputs:
;
;	none
;
; outputs:
;
;	r1		address of next record in block buffer
;	r0		status code
;	r2-r5,ap	destroyed
;
; Implicit Outputs:
;
; the next block will be in the i/o buffer if
; the record crossed the block boundary
;
; Side Effects:
;
;	may have switched to running at ast level.
;--

	.ALIGN	QUAD			; align for performance
GTMVRC:
	TSTL	R2			; get record size
	BEQL	25$			; branch on zero size
	SUBL3	R1,R7,R0		; get # bytes left in block
	BEQL	40$			; read another block if none left
	CMPL	R0,R2			; less than move count?
	BLSSU	10$			; branch if yes (use # left)
	MOVL	R2,R0			; no - use the move count
	BEQL	25$			; branch if zero length record
10$:	CMPW	R0,#512			; buffer require long probe?
	BGTRU	30$			; branch if yes
20$:	IFNOWRT	R0,(R3),ERRUBF1,IRB$B_MODE(R9); probe this part of buffer,

;
; branching if bad
;

	SUBL3	R0,R2,AP		; adjust remaining count
	MOVC3	R0,(R1),(R3)		; move the record
	MOVL	AP,R2			; any remaining bytes?
	BNEQ	40$			; branch if yes
25$:	RMSSUC
	RSB

;
;  long probe for devices with a default buffer size greater than 512
;

30$:	PUSHR	#^M<R0,R3>		; save byte count and address
	CVTWL	#-512,R4		; address computation constant
35$:	IFNOWRT	R0,(R3),ERRUBF,IRB$B_MODE(R9); branch if not writeable
	SUBL2	R4,R3			; get address next page
	MOVAW	(R0)[R4],R0		; adjust count (- 2 pages)
	BGTR	35$			; branch if more to probe
	SUBL2	R4,R0			; 'add' back in 1 page
	BGTR	35$			; branch if more to probe
	POPR	#^M<R0,R3>		; restore byte count and address
	BRB	20$			; rejoin main line

;++
;
;  move next part of record
;
;--

40$:	PUSHR	#^M<R2,R3>		; save remaining byte count

;
; and destination address
;

	BSBB	NXTBLK			; read next block
	POPR	#^M<R2,R3>		; restore remaining count and addr

	BLBS	R0,GTMVRC		; and go again
	RSB


;++
; nxtblk subroutine - change buffer/blocks
;
;
; inputs:
;	r11	impure area addr
;	r10	ifab addr
;	r9	irab addr
;	r8	rab addr
;
; Implicit Inputs:
;
;	irb$l_curbdb
;	irb$l_nrp_vbn
;	irb$v_find
;
; outputs:
;
; if last operation was a find,then:
;	r0	success code
;	irb$l_nrp_vbn = irb$l_nrp_vbn+1
;	irb$w_nrp_off = 0
;
; if last operation was not a find, then:
;
;	r7	end of buffer addr+1
;	r4	bdb addr of new block
;	r1	block buffer addr of new block
;	r0	status code
;	r2-r3	destroyed
;
;--

	.ALIGN	QUAD			; align for performance
NXTBLK:	BBS	#IFB$V_PPF_INPUT,(R10),NXTBLK1; branch if this is sys$input
	BBS	#IRB$V_FIND,(R9),NXTFND	; branch if find
RM$NEXT_BLK::
NXTBLK1:
	CLRL	R3			; flag read required
	BRW	RM$NXTBLK1		; go to next block routine

;
; this is a find call for disk so just bump nrp data and reset buffer pointer
;

NXTFND:	INCL	IRB$L_NRP_VBN (R9)
	CLRW	IRB$W_NRP_OFF(R9)
	MOVAL	-512(R7),R1		; reset start of buffer addr
SUCRET:	RMSSUC
	RSB


	.END
