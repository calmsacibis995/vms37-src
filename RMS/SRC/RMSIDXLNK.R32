!	[ 2 0 1 , 1 0 ] R M S I D X L N K . R 3 2
!
!	Define subroutine linkage
!
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:	RMS32 INDEX SEQUENTIAL FILE ORGANIZATION
!
! ABSTRACT:
!		This module defines all the routine linkage
!
!
! ENVIRONMENT:
!
!		VAX/VMS OPERATING SYSTEM
!
!--
!
! AUTHOR:  D. H. Gillespie     CREATION DATE:  17-MAR-1978  
!		 and W. Koenig
!
! MODIFIED BY:
!
!	V03-001	TMK0001		Todd M. Katz		16-Mar-1982
!		RM$INSERT_UDR has a parameter although the linkage 
!		currently doesn't reflect it. Change this.
!
!	V02-023	TMK0002		Todd M. Katz		01-Mar-1982
!		Add linkage for RM$COMPRESS_KEY.
!
!	V02-022	TMK0001		Todd M. Katz		04-Feb-1982
!		Add REC_SZ as and arguement to RM$BLD_IDX_REC.
!
!	V02-021	psk0004		P Knibbe		14-Dec-1981
!		Add BKT_ADDR to RECORD_SIZE linkage
!
!	V02-020	KPL0002		Peter Lieberwirth	 5-Nov-1981
!		Add linkage for RM$CONFIRM_EOF.
!
!	V02-019	KPL0001		Peter Lieberwirth	22-Oct-1981
!		Add linkages for RM$QUERY_HARD, and RM$UNLOCK_HARD.
!
!	V02-018	PSK0003		P Knibbe		10-Aug-1981
!		Add linkage for RM$MAK_IDX_REC, Add BKT_ADDR to
!		RM$BLD_IDX_REC.
!
!	V02-017	CDS0002		C Saether		10-Aug-1981
!		Further fix to V02-015.  Add alternate linkage
!		RELEASE_FAB for routines calling release on FAB calls.
!
!	V02-016	MCN0014		Maria del C. Nasr	24-Jul-1981
!		Add linkages for RM$CONV_TO_ASCII, RM$CONV_FROM_ASCII,
!		and RM$KEY_TYPE_CONV.  Change linkage to RM$PCKDEC_CHECK.
!		Eliminate IDX_DFN from RM$UNPACK_REC linkage, and
!		RM$CMP_NULL_REC linkage.
!
!	V02-015	CDS0001		C Saether		06-Aug-1981
!		RM$CLOSE3 only needs IFAB and IMPURE.  Modify getspc
!		and retspc linkages to reference impure pointer.
!
!	V02-014	MCN0013		Maria del C. Nasr	01-Jul-1981
!		Modify RM$EXPAND_KEYD, RM$SIG_CHARS, RM$RECOMPR_KEY,
!		and RM$UPDATE_SCAN linkages.
!
!	V02-013	PSK0004		Paulina S. Knibbe	28-Jun-1981
!		Preserve R1 in RM$RECORD_VBN
!
!	V02-012	MCN0012		Maria del C. Nasr	25-Jun-1981
!		Add linkage for RM$EXPAND_KEYD, and preserve some registers in
!		other routines.
!
!	V02-011	PSK0003		Paulina S. Knibbe	15-Jun-1981
!		Change linkage for RM$RECOMPR_KEY to save all registers used
!
!	V02-010	MCN0011		Maria del C. Nasr	05-Jun-1981
!		Add linkages for RM$EXPAND_KEY, RM$SIG_CHARS,
!		RM$MOVE_SIG_CNT, and RM$SPLIT_UDR_3
!
!	V02-009	MCN0010		Maria del C. Nasr	18-May-1981
!		Add linkages for RM$PACK_REC, RM$RECOMPR_KEY, and modify
!		linkages of RM$BLDUDR and RM$INSERT_REC
!
!	V02-008	PSK0002		Paulina S. Knibbe	13-May-1981
!		Add linkage for RM$SRCH_CMPR
!
!	V02-007 MCN0009		Maria del C. Nasr	07-May-1981
!		Include IRAB in linkage definition for RM$RECORD_KEY
!		and RM$UNPACK_REC, and RM$FIND_BY_ID
!
!	V02-006	MCN0007		Maria del C. Nasr	13-Apr-1981
!		Add linkage definitions for RM$CHECK_SEGMENT and
!		RM$UNPACK_REC
!
!	V02-005	PSK0001		Paulina S. Knibbe	08-Apr-1981
!		Add linkage for RM$CNTRL_ADDR
!
!	V02-004	MCN0006		Maria del C. Nasr	24-Mar-1981
!		Include IFAB in the linkage for RM$RECORD_VBN, and
!		RM$RECORD_SIZE.
!
!	V02-003	REFORMAT	Maria del C. Nasr	01-Aug-1980
!
!	V0002	PSK0005		P. S. KNIBBE		18-DEC-79	 2:30
!		Add linkage for a routine to check packed decimal strings
!
! REVISION HISTORY:
!
!	1-NOV-1979	ADD RM$DISCOMMON TO LINKAGE
!
!****************************************************************
!
!	This module defines all the routine linkage for RMS-32 index file
!	organization.
!
!	KEEP THESE DEFINITIONS IN ALPHABETICAL ORDER PLEASE
!
!	The following conventions will be used for linkage macros:
!
!		MACRO L_NAME =
!			RL$NAME = JSB( REGISTERS) : GLOBAL (REGISTER DEFINITIONS)
!		%;
!
!		The register definitions are macros of the forms
!			COMMON_FABREG, COMMON_RABREG, COMMON_IOREG, etc.
!			or R_REGNAME as described in RMSIDXMAC.R32
!

MACRO
	L_ADD_TO_ARRAY = 
		RL$ADD_TO_ARRAY = JSB() : GLOBAL (R_IRAB,R_IDX_DFN,R_REC_ADDR) %,

	L_AL_FRMT_BKT =
		RL$AL_FRMT_BKT = JSB() : GLOBAL(COMMON_RABREG,R_IDX_DFN)%,

	L_AL_KEY_DESC =
		RL$AL_KEY_DESC = JSB(REGISTER=6) : NOTUSED(8,9)
			 GLOBAL(R_IFAB,R_IDX_DFN,R_IMPURE)  %,

        L_ALBDB =
		RL$ALBDB = JSB() : GLOBAL(R_IMPURE,R_IFAB)  NOPRESERVE(2,3,4)
			NOTUSED(8,9) %,
	L_ALLOC3 = 
		RL$ALLOC3 = JSB () : GLOBAL(ENDVBNP1 = 2,STARTVBN = 1,
			AREA_DESC =7) %,

	L_ALLOC_BCB	=
		RL$ALLOC_BCB	= JSB(REGISTER = 5) : GLOBAL(R_IFAB,R_IMPURE)
			NOPRESERVE(2,3,4)%,
	L_ALLOC_BKT =
		RL$ALLOC_BKT = JSB() : GLOBAL (COMMON_RABREG,R_IDX_DFN) %,

        L_BDBALLOC =
		RL$BDBALLOC = JSB(REGISTER=4,REGISTER=5) :
		GLOBAL(COMMON_RABREG) 
		NOPRESERVE(2,3,4,5,6) %,

        L_BDBALLOC_ALT =
		RL$BDBALLOC_ALT = JSB(REGISTER=4,REGISTER=6,REGISTER=5) : 
		GLOBAL(COMMON_RABREG)
		NOPRESERVE(2,3,4,5,6) %,

	L_BKT_SPL =
		RL$BKT_SPL = JSB() :
		    GLOBAL (R_IFAB,R_IRAB,R_RAB,R_REC_ADDR,R_IDX_DFN) %,

	L_BKT_SORT =
		RL$BKT_SORT = JSB (REGISTER = 1) :
			GLOBAL (R_IDX_DFN,R_IFAB,R_IRAB) %,

	L_BLD_IDX_REC = 
		RL$BLD_IDX_REC = JSB(REGISTER=0) :
		GLOBAL (R_BKT_ADDR,R_IFAB,R_IRAB,R_IDX_DFN,R_REC_ADDR) %,

	L_BLD_NEW_SIDR = 
		RL$BLD_NEW_SIDR = JSB(REGISTER=0) :
		GLOBAL (R_IFAB,R_IRAB,R_IDX_DFN,R_REC_ADDR) %,

	L_BLDUDR =
		RL$BLDUDR = JSB(REGISTER=1) :
		GLOBAL(COMMON_IOREG,R_IFAB,R_IRAB,R_RAB,R_REC_ADDR,R_IDX_DFN) %,

	L_BUG3 =
		RL$BUG3 = JSB() %,
	L_CACHE =
		RL$CACHE = JSB(REGISTER=1,REGISTER=2,REGISTER=3) :
		GLOBAL(COMMON_IOREG)
		NOPRESERVE(1,2,3) NOTUSED(8,9,10,11) %,

        L_CCLN1 =
		RL$CCLN1 = JSB() : GLOBAL (COMMON_RABREG) %,

	L_CHECK_SEGMENT=
		RL$CHECK_SEGMENT = JSB(REGISTER=0, REGISTER=4, REGISTER=2) :
		GLOBAL(R_IDX_DFN)
		NOPRESERVE(2,4,5) PRESERVE(1) %,

	L_CHKSUM =
		RL$CHKSUM = JSB() : NOPRESERVE(1,2) NOTUSED(8,9,10,11) %,

	L_CLEAN_BDB =
		RL$CLEAN_BDB = JSB() : GLOBAL (COMMON_RABREG,R_BDB) PRESERVE(0) %,

	L_CLEAN_SIDR = 
		RL$CLEAN_SIDR = JSB() :
		GLOBAL (R_BDB,R_REC_ADDR,R_IDX_DFN,COMMON_RABREG)
		NOPRESERVE (2) PRESERVE (0) %,

	L_CLOSE3 =
		RL$CLOSE3 = JSB() : GLOBAL(R_IFAB,R_IMPURE) %,

	L_COMPRESS_KEY =
		RL$COMPRESS_KEY = JSB (REGISTER = 1, REGISTER = 3)
				: GLOBAL(R_IDX_DFN,R_IFAB,R_IRAB,R_REC_ADDR,R_BKT_ADDR) %,

	L_CONFIRM_EOF =
		RL$CONFIRM_EOF = JSB() :
		GLOBAL (COMMON_RABREG, R_REC_ADDR, R_IDX_DFN) %,

	L_CNTRL_ADDR =
		RL$CNTRL_ADDR = JSB() :
		GLOBAL (R_IRAB,R_IFAB,R_IDX_DFN,R_BKT_ADDR,R_REC_ADDR) %,

	L_CODE_VBN =
		 RL$CODE_VBN = JSB( REGISTER = 1) : GLOBAL (R_IRAB) % ,

        L_COMCLNUP =
		RL$COMCLNUP = JSB() : GLOBAL (COMMON_RABREG) PRESERVE(0) %,

	L_COMPARE_KEY	=
		RL$COMPARE_KEY	= JSB(REGISTER = 1, REGISTER = 3, REGISTER = 0)
		: GLOBAL(R_IDX_DFN) NOPRESERVE(0,1,3)%,

	L_COMPARE_REC =
		RL$COMPARE_REC = JSB (REGISTER=3,REGISTER=0,REGISTER=1):
		GLOBAL (R_IFAB,R_IRAB,R_IDX_DFN,R_REC_ADDR) %,

        L_CONNECT3 =
		RL$CONNECT3 = JSB() : GLOBAL(COMMON_RABREG) %,

	L_CONV_FROM_ASCII =
		RL$CONV_FROM_ASCII = JSB() %,

	L_CONV_TO_ASCII =
		RL$CONV_TO_ASCII = JSB() %,

	L_CREATE3B =
		RL$CREATE3B = JSB() : GLOBAL(COMMON_FABREG)
		NOPRESERVE(1,2,3,4,5,6,7)%,

	L_CREATECOM =
		RL$CREATECOM = JSB() : GLOBAL(COMMON_FABREG)%,

	L_CSEARCH_TREE	=
		RL$CSEARCH_TREE	= JSB() :
		GLOBAL(COMMON_RABREG,R_REC_ADDR,R_IDX_DFN)%,

	L_DEL_RRV = 
		RL$DEL_RRV = JSB() : GLOBAL (COMMON_IOREG,R_REC_ADDR,R_IDX_DFN,COMMON_RABREG) %,

	L_DELUDR_NRP =
		RL$DELUDR_NRP = JSB() : GLOBAL (COMMON_IOREG,R_REC_ADDR,R_IDX_DFN,COMMON_RABREG) %,

	L_DELETE3B	=
		RL$DELETE3B	= JSB() : GLOBAL(COMMON_RABREG)
		NOPRESERVE (2,3,4,5,6,7) %,

	L_DELETE_SIDR =
		RL$DELETE_SIDR = JSB() :
			GLOBAL (R_BDB,R_IDX_DFN,COMMON_RABREG) %,

	L_DELETE_UDR	=
		RL$DELETE_UDR	= JSB() : GLOBAL(R_REC_ADDR,R_BKT_ADDR,R_IDX_DFN,
			R_IFAB,R_IRAB)%,
	L_DISCOMMON	=
		RL$DISCOMMON	= JSB()	: GLOBAL (COMMON_RABREG) PRESERVE (0) %,

	L_DISCONNECT3 =
		RL$DISCONNECT3 = JSB() : GLOBAL(COMMON_RABREG)
			 NOPRESERVE(2,3,4,5,6,7) %,

	L_EXPAND_KEY =
		RL$EXPAND_KEY = JSB(REGISTER=0,REGISTER=1) %,

	L_EXPAND_KEYD =
		RL$EXPAND_KEYD = JSB(REGISTER=0,REGISTER=1) :
		GLOBAL(R_BKT_ADDR,R_IDX_DFN) %,

	L_EXTEND0	=
		RL$EXTEND0 = JSB(REGISTER = 5) : GLOBAL(COMMON_FABREG,STARTVBN = 1, ENDVBNP1 = 2,
			XAB = 6) NOPRESERVE(3,4,5)%,
	L_FIND_BY_ID =
		RL$FIND_BY_ID = JSB() :
		GLOBAL (R_BKT_ADDR,R_REC_ADDR,R_IDX_DFN,R_IFAB,R_IRAB) %,

	L_FIND_BY_RFA=
		RL$FIND_BY_RFA = JSB (REGISTER=1):
		GLOBAL (R_IDX_DFN,R_REC_ADDR,COMMON_RABREG) %,
	L_FIND_BY_RRV=
		RL$FIND_BY_RRV = JSB():
		GLOBAL (COMMON_RABREG,R_REC_ADDR) %,

	L_FOOLED_YUH =
		RL$FOOLED_YUH = JSB() : GLOBAL (R_IDX_DFN,R_IFAB,R_IRAB,R_RAB) %,

	L_GETBKT =
		RL$GETBKT = JSB(REGISTER=1,REGISTER=2) :
		GLOBAL(COMMON_IOREG,COMMON_RABREG,R_IDX_DFN) NOPRESERVE (2) %,

	L_GETBLK =
		RL$GETBLK = JSB(REGISTER=2) : GLOBAL(BLK=1,R_IMPURE)
		NOPRESERVE(2,3,4) NOTUSED(8,9,10) %,

	L_GETNEXT_REC =
		RL$GETNEXT_REC = JSB() :
		GLOBAL (R_IFAB,R_IRAB,R_IDX_DFN,R_REC_ADDR) %,

	L_GET3B =
		RL$GET3B = JSB() :
			GLOBAL(COMMON_RABREG) NOPRESERVE(2,3,4,5,6,7) %,

	L_GETS0SPC =
		RL$GETS0SPC = JSB() : GLOBAL(BLK=1,SIZE=2,R_IMPURE)
		NOPRESERVE(3,4) NOTUSED(8,9,10) %,

! note that GETSPC1 is the linkage for RM$GETSPC and RM$GETSPC1
!

        L_GETSPC1 =
		RL$GETSPC1 = JSB() : GLOBAL(BLK=1,SIZE=2,R_IMPURE)
		NOPRESERVE(3,4) NOTUSED(8,9,10) %,

	L_ID_AND_NRP =
		RL$ID_AND_NRP = JSB (REGISTER=8) :
			GLOBAL (R_IDX_DFN, R_IRAB, R_IFAB) %,

	L_INSERT_REC =
		RL$INSERT_REC = JSB() : GLOBAL(COMMON_IOREG,COMMON_RABREG,R_REC_ADDR,R_IDX_DFN) %,

	L_INSERT_UDR =
		RL$INSERT_UDR = JSB (REGISTER = 1) 
		: GLOBAL(COMMON_IOREG,COMMON_RABREG,R_REC_ADDR,R_IDX_DFN) %,

	L_INSS_OR_IDX = 
		RL$INSS_OR_IDX = JSB() : GLOBAL (COMMON_RABREG,R_BKT_ADDR,R_REC_ADDR,R_IDX_DFN)
		NOPRESERVE (2,3) %,

	L_INS_ALL_SIDR = 
		RL$INS_ALL_SIDR = JSB() :
		GLOBAL (COMMON_IOREG,R_REC_ADDR,R_IDX_DFN,COMMON_RABREG)
		NOPRESERVE (2,3) %,

	L_INS_REC = 
		RL$INS_REC = JSB (REGISTER=1,REGISTER=0) :
		GLOBAL (R_REC_ADDR,R_IDX_DFN,R_IRAB,R_IFAB) %,

	L_KEY_DESC =
		RL$KEY_DESC = JSB() :
			 GLOBAL(COMMON_RABREG,R_IDX_DFN) %,

	L_KEY_TYPE_CONV =
		RL$KEY_TYPE_CONV = JSB() :
			 GLOBAL(R_IDX_DFN) %,

	L_LOCK =
		RL$LOCK = JSB( REGISTER=1,REGISTER=2) : GLOBAL(COMMON_RABREG)
			NOPRESERVE(3) %,

	L_MAKE_HIGH_KY	=
		RL$MAKE_HIGH_KY	= JSB() : GLOBAL(R_IDX_DFN,R_REC_ADDR)%,

	L_MAKE_INDEX	=
		RL$MAKE_INDEX	= JSB() : GLOBAL(COMMON_RABREG,R_IDX_DFN)%,

	L_MAKSUM =
		RL$MAKSUM = JSB(REGISTER = 5) : NOPRESERVE(0,1,2) NOTUSED(3,4,6,7,8,9,10,11)%,

	L_MAK_IDX_REC	=
		RL$MAK_IDX_REC	= JSB(REGISTER=0) : GLOBAL(R_IDX_DFN,R_REC_ADDR,R_IRAB)%,

	L_MOVE =
		RL$MOVE = JSB(REGISTER=0) : PRESERVE (1) %,

	L_MOVE_IN_VBN =
		RL$MOVE_IN_VBN = JSB(REGISTER=2) : GLOBAL (R_REC_ADDR)
		NOPRESERVE (2) %,

	L_MOVE_SIG_CNT =
		RL$MOVE_SIG_CNT = JSB(REGISTER=0,REGISTER=1) :
		GLOBAL (R_IDX_DFN) %,

	L_NEW_ROOT = 
		RL$NEW_ROOT = JSB() : GLOBAL(COMMON_IOREG, R_IDX_DFN, R_REC_ADDR, R_IRAB, R_IFAB) %,

	L_NOREAD_LONG =
		RL$NOREAD_LONG = JSB %,

	L_NOWRT_LONG =
		RL$NOWRT_LONG = JSB %,

	L_NULLKEY =
	    RL$NULLKEY = JSB(REGISTER=1) : NOPRESERVE(3) %,

	L_OPEN3 =
		RL$OPEN3 = JSB() : GLOBAL(COMMON_FABREG)
			NOPRESERVE(1,2,3,4,5) %,

	L_PACK_REC =
		RL$PACK_REC = JSB() : 
			GLOBAL(R_BKT_ADDR,R_REC_ADDR,R_IDX_DFN,R_RAB,R_IRAB,R_IFAB)
			NOPRESERVE(2,3) %,

	L_PCKDEC_CHECK =
		RL$PCKDEC_CHECK = JSB() : GLOBAL (R_IDX_DFN,R_IFAB,R_IRAB) %,

	L_POS_KEY =
	    RL$POS_KEY = JSB() : GLOBAL(COMMON_RABREG,R_IDX_DFN,R_REC_ADDR)
			NOPRESERVE(2,3,4,5) %,

	L_POS_RFA =
	    RL$POS_RFA = JSB() : GLOBAL (COMMON_RABREG,R_IDX_DFN,R_REC_ADDR)
			NOPRESERVE (2,3,4,5) %,

	L_POS_SEQ =
	    RL$POS_SEQ = JSB() : GLOBAL(COMMON_RABREG,R_IDX_DFN,R_REC_ADDR)
			NOPRESERVE(2,3,4,5) %,

	L_PREUPD_NRP	=
	    RL$PREUPD_NRP	= JSB(REGISTER=6) :
			GLOBAL(R_IFAB,R_IRAB,R_IDX_DFN,R_BKT_ADDR)%,
	L_PUT3B =
	    RL$PUT3B = JSB() : GLOBAL(COMMON_RABREG) NOPRESERVE(2,3,4,5,6,7) %,

	L_PUT_UPD_CHKS =
		RL$PUT_UPD_CHKS = JSB() :
		GLOBAL (COMMON_RABREG,R_IDX_DFN) %,

	L_PUT_UPD_ERR =
		RL$PUT_UPD_ERR = JSB() :
		GLOBAL (R_BDB,COMMON_RABREG,R_IDX_DFN)   NOPRESERVE (2,3)
		PRESERVE (0) %,

	L_PUT_UPD_FIN =
		RL$PUT_UPD_FIN = JSB() :
		GLOBAL (COMMON_RABREG) %,

	L_PUT_UPD_SPL =
		RL$PUT_UPD_SPL = JSB() :
		GLOBAL (COMMON_IOREG,R_REC_ADDR,R_IDX_DFN,COMMON_RABREG)
		NOPRESERVE (2,3) %,

	L_QUERY_HARD =
		RL$QUERY_HARD = JSB( REGISTER=1,REGISTER=2) : GLOBAL(COMMON_RABREG)
			NOPRESERVE(3) %,

	L_QUERY_LCK =
		RL$QUERY_LCK = JSB( REGISTER=1,REGISTER=2) : GLOBAL(COMMON_RABREG)
			NOPRESERVE(3) %,

	L_REC_OVHD =
		RL$REC_OVHD = JSB() :
		GLOBAL (R_REC_SIZE,R_REC_ADDR,R_IDX_DFN,R_IFAB) %,

	L_RECOMPR_KEY =
		RL$RECOMPR_KEY = JSB(REGISTER=0,REGISTER=1): 
			GLOBAL(R_BKT_ADDR,R_IDX_DFN) %,

	L_RECORD_KEY =
		RL$RECORD_KEY = JSB( REGISTER = 0 ) :
		GLOBAL(R_REC_ADDR,R_IDX_DFN,R_IRAB,R_IFAB) PRESERVE(1) %,

	L_RECORD_SIZE = 
		RL$RECORD_SIZE = JSB() :
		GLOBAL (R_IRAB,R_IDX_DFN,R_REC_ADDR,R_IFAB,R_BKT_ADDR) %,

	L_RECORD_VBN =
		RL$RECORD_VBN = JSB() : GLOBAL(R_REC_ADDR,R_IFAB) PRESERVE(1) %,

	L_RELEASE =
		RL$RELEASE = JSB(REGISTER=3) :
		GLOBAL(R_BDB,R_IRAB,R_IFAB,R_IMPURE)
		NOPRESERVE(1,2)	NOTUSED(8)	%,

	L_RELEASE_FAB =
		RL$RELEASE_FAB = JSB(REGISTER=3) :
		GLOBAL(R_BDB,R_IFAB,R_IFAB_FILE,R_IMPURE)
		NOPRESERVE(1,2)	NOTUSED(8)	%,

	L_REPLACE = 
		RL$REPLACE = JSB() :
		GLOBAL (R_REC_ADDR,R_IDX_DFN,R_IFAB,R_RAB,R_IRAB,COMMON_IOREG) %,

	L_RETBLK =
		RL$RETBLK = JSB(REGISTER=3) : GLOBAL (PTR=4,R_IMPURE)
		NOPRESERVE(2,3,5) NOTUSED(8,9,10) %,

	L_RETS0SPC =
		RL$RETS0SPC = JSB(REGISTER=3,REGISTER=4) :
		GLOBAL(SIZE=2,R_IMPURE)
		NOPRESERVE(3,4,5) NOTUSED(8,9,10) %,

	L_RETSPC =
		RL$RETSPC = JSB(REGISTER=3,REGISTER=4) :
		GLOBAL(SIZE=2,R_IMPURE)
		NOPRESERVE(3,4,5) NOTUSED(8,9,10) %,

	L_RETSPC1 =
		RL$RETSPC1 = JSB(REGISTER=4) : GLOBAL(SIZE=2,R_IMPURE)
		 NOPRESERVE(3,4,5) NOTUSED(8,9,10) %,

	L_RLSBKT =
		RL$RLSBKT = JSB(REGISTER=0) : GLOBAL(R_BDB,COMMON_RABREG)
		PRESERVE (1) %,

	L_SIG_CHARS =
		RL$SIG_CHARS = JSB(REGISTER=0,REGISTER=1,REGISTER=2) :
			GLOBAL(R_IDX_DFN,R_IRAB) %,

	L_SRCH_CMPR =
		RL$SRCH_CMPR = JSB():
			GLOBAL (R_BKT_ADDR,R_REC_ADDR,R_IRAB,R_IFAB) %,

	L_SET_UPDATE =
		RL$SET_UPDATE = JSB (REGISTER = 5) :
			GLOBAL (R_IRAB,R_IFAB,R_REC_ADDR) NOPRESERVE(5) %,

	L_SRCH_BY_KEY	=
		RL$SRCH_BY_KEY	= JSB() :
		GLOBAL (R_BKT_ADDR,R_REC_ADDR,R_IDX_DFN,R_IRAB,R_IFAB) %,

	L_SEARCH_SIDR =
		RL$SEARCH_SIDR	= JSB() : GLOBAL(COMMON_RABREG,R_REC_ADDR,R_IDX_DFN)
		NOPRESERVE(0,1,2,3)%,

	L_SEARCH_TREE	=
		RL$SEARCH_TREE	= JSB() : 
		GLOBAL(COMMON_RABREG,COMMON_IOREG,R_REC_ADDR,R_IDX_DFN) %,

	L_SELECT_VBN =
		RL$SELECT_VBN = JSB (REGISTER = 1) : GLOBAL(R_IRAB) %,

	L_SPLIT_EM = 
		RL$SPLIT_EM = JSB() : GLOBAL (R_REC_ADDR, R_IDX_DFN, R_IRAB, R_IFAB) %,

	L_SPLIT_UDR =
		RL$SPLIT_UDR = JSB() :
		    GLOBAL(COMMON_IOREG,R_IFAB,R_IRAB,R_RAB,R_IDX_DFN,R_REC_ADDR) %,

	L_SPLIT_UDR_3 =
		RL$SPLIT_UDR_3 = JSB() :
		    GLOBAL(COMMON_IOREG,R_IFAB,R_IRAB,R_RAB,R_IDX_DFN,R_REC_ADDR) %,

	L_SQUISH_SIDR =
		RL$SQUISH_SIDR = JSB(REGISTER=2) :
		    	GLOBAL(R_BKT_ADDR,R_REC_ADDR,R_IDX_DFN,R_IRAB,R_IFAB) %,

	L_UNLOCK =
		RL$UNLOCK = JSB( REGISTER=1,REGISTER=2) : GLOBAL(COMMON_RABREG)
			NOPRESERVE(3) %,

	L_UNLOCK_HARD =
		RL$UNLOCK_HARD = JSB( REGISTER=1,REGISTER=2) : GLOBAL(COMMON_RABREG)
			NOPRESERVE(3) %,

	L_UNLOCKALL =
		RL$UNLOCKALL = JSB() : GLOBAL(COMMON_RABREG)
			NOPRESERVE(3) %,

	L_UNPACK_REC =
		RL$UNPACK_REC = JSB( REGISTER=0,REGISTER=1 ) : 
			GLOBAL(R_REC_ADDR,R_IRAB,R_IFAB)
			NOPRESERVE(2,3) %,

	L_UPD_SIFB_EOF	=
		RL$UPD_SIFB_EOF = JSB() : GLOBAL(R_IFAB)%,

	L_UPDATE_SCAN =
		RL$UPDATE_SCAN = JSB() :
		GLOBAL (R_REC_ADDR,R_IDX_DFN,COMMON_IOREG,COMMON_RABREG) %,

	L_UPDATE3B =
		RL$UPDATE3B = JSB() :
		GLOBAL (COMMON_RABREG,R_IDX_DFN,R_REC_ADDR)
		NOPRESERVE (2,3,4,5) %,

	L_UPDDELCOM =
		RL$UPDDELCOM = JSB() :
			GLOBAL (R_REC_ADDR,COMMON_RABREG) %,

	L_UPD_NRP =
		RL$UPD_NRP = JSB() : GLOBAL(R_IFAB,R_IRAB)%,

	L_UPD_PLG = 
		RL$UPD_PLG = JSB() : GLOBAL (COMMON_RABREG, R_IDX_DFN) %,

	L_UPDATE_RRV =
		RL$UPDATE_RRV = JSB() :
			GLOBAL(R_IFAB,R_IRAB,R_IDX_DFN,R_REC_ADDR) %,

	L_UPDATE_RRV_2 =
		RL$UPDATE_RRV_2 = JSB() :
			GLOBAL (COMMON_IOREG,COMMON_RABREG,R_IDX_DFN,R_REC_ADDR)  %,

	L_VBN_SIZE =
		RL$VBN_SIZE = JSB() : PRESERVE(1) %,

	L_XALLO3	=
		RL$XALLO3 = JSB(REGISTER = 3)  :  GLOBAL(COMMON_FABREG) %,

	L_XKEYO3	=
		RL$XKEYO3 = JSB(REGISTER = 3)  :  GLOBAL(R_IDX_DFN,COMMON_FABREG) %,

	L_XSUMO3	=
		RL$XSUMO3 = JSB(REGISTER = 3,REGISTER = 4) : GLOBAL(COMMON_FABREG)
			NOPRESERVE(4) %,

	L_ZERO_NRP	=
		RL$ZERO_NRP = JSB() : GLOBAL (R_IFAB,R_IRAB) %;
