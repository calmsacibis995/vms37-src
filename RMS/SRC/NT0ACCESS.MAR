	$BEGIN	NT0ACCESS,025,NF$NETWORK,<NETWORK ACCESS/DEACCESS>


;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; Facility: RMS
;
; Abstract:
;
;	This module performs network access/deaccess functions including
;	assigning a channel to the network device and altering the
;	characteristics of the network device as appropriate. The access
;	function creates a logical link between this process and either:
;	(1) the specified target task, or
;	(2) FAL (file access listener) for remote file access.
;
; Environment: VAX/VMS, executive mode
;
; Author: James A. Krycka,	Creation Date:	09-DEC-1977
;
; Modified By:
;
;	V02-025	JAK0068		J A Krycka	14-DEC-1981
;		Do not set the carriage control (CCL) device characteristics
;		bit for the 'task-to-task' device.
;
;	V02-024	JAK0054		J A Krycka	25-FEB-1981
;		Modify the rules for the return of true device characteristics
;		to the user in NT$RET_DEV_CHAR.
;
;	V02-023	JAK0054		J A Krycka	25-FEB-1981
;		Check for remote device being a mailbox as well as a terminal
;		in NT$MAP_DEV_CHAR.
;
;	V02-022	REFORMAT	J A Krycka	26-JUL-1980
;
;--

	.SBTTL	DECLARATIONS

;
; Include Files:
;

	$DAPPLGDEF			; Define DAP prologue symbols
	$DAPATTDEF			; Define DAP Attributes message
	$DEVDEF				; Define Device Characteristics
	$FABDEF				; Define File Access Block symbols
	$FWADEF				; Define File Work Area symbols
	$IFBDEF				; Define IFAB symbols
	$IODEF				; Define I/O function codes
	$NWADEF				; Define Network Work Area symbols
	$PSLDEF				; Define Process Status Longword symbols

;
; Macros:
;
;	None
;
; Equated Symbols:
;

	ASSUME	DAP$Q_DCODE_FLG EQ 0
	ASSUME	NWA$Q_FLG EQ 0

;
; Own Storage:
;
;	None
;

	.SBTTL	NT$ASSIGN - NETWORK ASSIGN CHANNEL

;++
; NT$ASSIGN - assigns a channel to the network device (i.e., _NET0:).
;
; Calling Sequence:
;
;	BSBW	NT$ASSIGN
;
; Input Parameters:
;
;	R8	FAB address
;	R9	IFAB address
;	R10	FWA address
;	R11	Impure Area address
;
; Implicit Inputs:
;
;	None
;
; Output Parameters:
;
;	R0	Status code (SS)
;	R1-R3	Destroyed
;
; Implicit Outputs:
;
;	IFB$W_CHNL
;	NWA$Q_NCB
;
; Completion Codes:
;
;	Standard system service status codes
;
; Side Effects:
;
;	None
;
;--

NT$ASSIGN::				; Entry point

;
; Setup device name descriptor and associated string for input to the
; Assign Channel system service.
;

	MOVL	IFB$L_NWA_PTR(R9),R1	; Get address of NWA
	MOVAQ	NWA$Q_NCB(R1),R2	; Get address of scratch descriptor
	MOVAB	NWA$T_NCBBUF(R1),R3	; Get address of scratch buffer
	MOVL	#6,(R2)			; Fill in string count
	MOVL	R3,4(R2)		; Fill in string address
	MOVQ	#^A\_NET0:  \,(R3)	; Store device name string

;
; Determine which mode to use in making the channel assignment.
;

	MOVL	#PSL$C_EXEC,R1		; Assume executive mode
	BBC	#FAB$V_UFO,-		; Branch if UFO clear
		FAB$L_FOP(R8),10$	;
	MOVZBL	IFB$B_MODE(R9),R1	; Switch to caller's mode
	BBC	#FAB$V_ESC,-		; Branch if ESC clear
		FAB$L_FOP(R8),10$	;
	MOVL	#PSL$C_SUPER,R1		; Assume supervisor mode
	BBC	#FAB$V_UFM,-		; Branch if UFM clear
		FAB$L_FOP(R8),10$	;
	MOVL	#PSL$C_USER,R1		; Make it user mode

;
; Create a control/information path to NETACP in preparation for
; non-transparent network I/O. Do not associate a mailbox with the channel,
; as secondary inbound connect initiates and interrupt messages are not
; suppported.
;

10$:	$ASSIGN_S-			; Assign the channel
		DEVNAM=(R2)-		;  Address of device name descriptor
		CHAN=IFB$W_CHNL(R9)-	;  Address to return channel #
		ACMODE=R1		;  Access mode
	RSB				; Exit with system service code in R0

	.SBTTL	NT$MOD_DEV_CHAR - MODIFY DEVICE CHARACTERISTICS

;++
; NT$MOD_DEV_CHAR - modifies the characteristics of the network device and
;	denotes whether network I/O will be performed at the DAP or NSP level.
;
; Calling Sequence:
;
;	BSBW	NT$MOD_DEV_CHAR
;
; Input Parameters:
;
;	R8	FAB address
;	R9	IFAB address
;	R10	FWA address
;	R11	Impure Area address
;
; Implicit Inputs:
;
;	FWA$B_SUBNODCNT
;	FWA$V_OBJTYPE
;
; Output Parameters:
;
;	None
;
; Implicit Outputs:
;
;	IFB$V_DAP
;	IFB$V_NSP
;	IFB$L_AS_DEV
;	IFB$L_PRIM_DEV
;	IFB$W_DEVBUFSIZ
;
; Completion Codes:
;
;	None
;
; Side Effects:
;
;	None
;
;--

NT$MOD_DEV_CHAR::			; Entry point

;
; Determine whether the network request is for file access via a remote FAL or
; for task-to-task communication.
;
; Note:	If more than one node spec string was specified (manual routing), then
;	treat this as a DAP level access so that RMS will connect to FAL at the
;	adjacent node (which is actually an intermediate node).
;

	TSTB	FWA$B_SUBNODCNT(R10)	; Branch if more than one node spec
	BNEQ	10$			;  was specified
	BBS	#FWA$V_OBJTYPE,(R10),20$; Branch if device name string is
					;  in NSP objtype type format

;
; Denote that network I/O thru RMS will be at the file access level using
; DAP to communicate with the remote FAL.
;

10$:	$SETBIT	#IFB$V_DAP,(R9)		; Set DAP flag
	MOVW	#512,IFB$W_DEVBUFSIZ(R9); Establish device buffer size
	BRB	30$			;

;
; Denote that network I/O thru RMS will be at the task-to-task level using
; NSP to communicate with the remote partner process.
;

20$:	$SETBIT	#IFB$V_NSP,(R9)		; Set NSP flag
	MOVW	#4096,IFB$W_DEVBUFSIZ(R9); Establish device buffer size

;
; Alter the device characteristics.
;

30$:	$SETBIT	#DEV$V_REC,IFB$L_PRIM_DEV(R9)
					; Say its a record oriented device
	$CLRBIT	#DEV$V_MBX,IFB$L_PRIM_DEV(R9)
					; Say its a not a mailbox-like device
	MOVL	IFB$L_PRIM_DEV(R9),-	; Copy device characteristics
		IFB$L_AS_DEV(R9)	;
	RSB				; Exit

	.SBTTL	NT$MAP_DEV_CHAR - MAP DEVICE CHARACTERISTICS

;++
; NT$MAP_DEV_CHAR - takes the device characteristics returned by FAL and maps
;	them into an RMS bit pattern, then saves them in NWA for use later.
;	If the remote device is a terminal or mailbox, this is noted also.
;
; Calling Sequence:
;
;	BSBW	NT$MAP_DEV_CHAR
;
; Input Parameters:
;
;	R7	NWA (=DAP) address
;	R8	FAB address
;	R9	IFAB address
;	R10	FWA address
;	R11	Impure Area address
;
; Implicit Inputs:
;
;	DAP$L_DEV
;	DAP$V_DEV
;
; Output Parameters:
;
;	R0-R2	Destroyed
;
; Implicit Outputs:
;
;	NWA$L_DEV
;	NWA$V_DEVCHAR
;	NWA$V_DEVMBX
;	NWA$V_DEVTRM
;
; Completion Codes:
;
;	None
;
; Side Effects:
;
;	None
;
;--

NT$MAP_DEV_CHAR::			; Entry point
	BBS	#DAP$V_DEV,-		; Branch if partner returned device
		DAP$L_ATTMENU(R7),10$	;  characteristics
	RSB				; Exit
10$:	$SETBIT	#NWA$V_DEVCHAR,(R7)	; Flag receipt of characteristics

;
; Map DAP bit definitions into RMS bit definitions for the field and store them
; in NWA for use later.
;

	MOVL	DAP$L_DEV(R7),R1	; Get DEV bits returned by FAL
	CLRL	R2			; Clear corresponding RMS bits
	$MAPBIT	DAP$V_DEVREC,DEV$V_REC	; Map REC bit
	$MAPBIT	DAP$V_DEVCCL,DEV$V_CCL	; Map CCL bit
	$MAPBIT	DAP$V_DEVTRM,DEV$V_TRM	; Map TRM bit
	$MAPBIT	DAP$V_DEVDIR,DEV$V_DIR	; Map DIR bit
	$MAPBIT	DAP$V_DEVSDI,DEV$V_SDI	; Map SDI bit
	$MAPBIT	DAP$V_DEVSQD,DEV$V_SQD	; Map SQD bit
	$MAPBIT	DAP$V_DEVSPL,DEV$V_SPL	; Map SPL bit
	$MAPBIT	DAP$V_DEVNET,DEV$V_NET	; Map NET bit
	$MAPBIT	DAP$V_DEVFOD,DEV$V_FOD	; Map FOD bit
	$MAPBIT	DAP$V_DEVSHR,DEV$V_SHR	; Map SHR bit
	$MAPBIT	DAP$V_DEVGEN,DEV$V_GEN	; Map GEN bit
	$MAPBIT	DAP$V_DEVAVL,DEV$V_AVL	; Map AVL bit
	$MAPBIT	DAP$V_DEVMNT,DEV$V_MNT	; Map MNT bit
	$MAPBIT	DAP$V_DEVMBX,DEV$V_MBX	; Map MBX bit
	$MAPBIT	DAP$V_DEVDMT,DEV$V_DMT	; Map DMT bit
	$MAPBIT	DAP$V_DEVELG,DEV$V_ELG	; Map ELG bit
	$MAPBIT	DAP$V_DEVALL,DEV$V_ALL	; Map ALL bit
	$MAPBIT	DAP$V_DEVFOR,DEV$V_FOR	; Map FOR bit
	$MAPBIT	DAP$V_DEVSWL,DEV$V_SWL	; Map SWL bit
	$MAPBIT	DAP$V_DEVIDV,DEV$V_IDV	; Map IDV bit
	$MAPBIT	DAP$V_DEVODV,DEV$V_ODV	; Map ODV bit
	$MAPBIT	DAP$V_DEVRND,DEV$V_RND	; Map RND bit
	$MAPBIT	DAP$V_DEVRTM,DEV$V_RTM	; Map RTM bit
	$MAPBIT	DAP$V_DEVRCK,DEV$V_RCK	; Map RCK bit
	$MAPBIT	DAP$V_DEVWCK,DEV$V_WCK	; Map WCK bit
	MOVL	R2,NWA$L_DEV(R7)	; Save characteristics for use later
	BBC	#DEV$V_TRM,R2,20$	; Branch if device is not a terminal
	$SETBIT	#NWA$V_DEVTRM,(R7)	; Flag remote device as a terminal
20$:	BBC	#DEV$V_MBX,R2,30$	; Branch if device is not a mailbox
	$SETBIT	#NWA$V_DEVMBX,(R7)	; Flag remote device as a mailbox
30$:	RSB				; Exit

	.SBTTL	NT$RET_DEV_CHAR - RETURN DEVICE CHARACTERISTICS

;++
; NT$RET_DEV_CHAR - returns the true device characteristic information to the
;	user's FAB iff (1) FAL returned device characteristics in the DAP
;	Attributes message, (2) FAL is implemented to DAP V5.6 or later, and
;	(3) the remote node is VAX/VMS or the file accessed is a relative or
;	indexed file.
;
;	This restriction is here to accomodate the VMS COPY utility which uses
;	the FAB$V_BRO and RAB$V_BIO options to defer the decision of whether
;	to use record I/O ($GET/$PUT) or block I/O ($READ/$WRITE) for sequential
;	files until $CONNECT time. COPY always uses block I/O to transfer
;	relative and indexed files.
;
;	COPY examines the device characteristics returned on $OPEN (and $CREATE)
;	in conjunction with other inputs to determine whether to use record
;	or block I/O. Since it does not know at open time if block I/O will be
;	used, it sets the FAB$V_BRO bit in FAB$B_FAC on $OPEN, and if block I/O
;	mode is chosen, it sets the RAB$V_BIO bit in RAB$L_ROP on $CONNECT to
;	specify block I/O mode.
;
;	Note that NT$GET_FAC_SHR and NT$ENCODE_ROP send the DAP$V_BRO and
;	DAP$V_ROPBIO bits, respectively, iff the remote node is running
;	DECnet-VAX V1.3 or later because currently non-VAX implementations of
;	DECnet do not understand these bits.
;
;	Note that the algorithm used to return device characteristics may become
;	less restrictive in the future, especially if COPY is modified to avoid
;	using the FAB$V_BRO and RAB$V_BIO options.
;
; Calling Sequence:
;
;	BSBW	NT$RET_DEV_CHAR
;
; Input Parameters:
;
;	R8	FAB address
;	R9	IFAB address
;	R10	FWA address
;	R11	Impure Area address
;
; Implicit Inputs:
;
;	DAP$V_GEQ_V56
;	DAP$V_VAXVMS
;	IFB$L_NWA_PTR
;	NWA$B_ORG
;	NWA$L_DEV
;	NWA$V_DEVCHAR
;
; Output Parameters:
;
;	R1	Destroyed
;
; Implicit Outputs:
;
;	FAB$L_DEV
;	FAB$L_SDC
;
; Completion Codes:
;
;	None
;
; Side Effects:
;
;	None
;
;--

NT$RET_DEV_CHAR::			; Entry point
	MOVL	IFB$L_NWA_PTR(R9),R1	; Get address of NWA (and DAP)
	BBC	#NWA$V_DEVCHAR,(R1),20$	; Branch if partner did not return
					;  device characteristic information
	BBC	#DAP$V_GEQ_V56,(R1),20$ ; Branch if partner uses DAP before V5.6
	BBS	#DAP$V_VAXVMS,(R1),10$	; Branch if partner is VAX/VMS
	CMPB	NWA$B_ORG(R1),#NWA$K_SEQ; Branch if SEQ organization
	BEQL	20$			;  else fall thru if REL or IDX
10$:	MOVL	NWA$L_DEV(R1),R1	; Get actual device characteristics
	$SETBIT	#DEV$V_NET,R1		; Declare this a remote network device
	MOVL	R1,FAB$L_DEV(R8)	; Update user DEV field in FAB
	MOVL	R1,FAB$L_SDC(R8)	; Update user SDC field in FAB
20$:	RSB				; Exit

	.SBTTL	NT$ACCESS - PERFORM NETACP ACCESS FUNCTION

;++
; NT$ACCESS - creates a logical link.
;
; Calling Sequence:
;
;	BSBW	NT$ACCESS
;
; Input Parameters:
;
;	R8	FAB address
;	R9	IFAB address
;	R10	FWA address
;	R11	Impure Area address
;
; Implicit Inputs:
;
;	IFB$V_DAP
;	IFB$W_CHNL
;	FWA$Q_NODE
;	FWA$V_NETSTR
;	NWA$Q_QUOTED
;
; Output Parameters:
;
;	R0	Status code (SS)
;	R1-R6	Destroyed
;	AP	Destroyed
;
; Implicit Outputs:
;
;	IFB$L_IOS
;	IFB$V_ACCESSED
;	NWA$Q_NCB
;
; Completion Codes:
;
;	Standard system service status codes
;
; Side Effects:
;
;	None
;
;--

NT$ACCESS::				; Entry point

;+
; Build a Network Connect Block (NCB) to be used as input for the NETACP
; access function.
;
; The NCB consists of a string with the following general syntax:
;
;	nodename"access_control_string"::"objecttype=taskid/netacp_string"
;
; Where:
;   (1)	the access control string in the node spec is present only if provided
;	by the user (directly or via logical name translation).
;   (2)	if the user is accessing a remote file, the quoted string is "FAL="
;	(to request the services of the remote file access listener).
;   (3)	if the user explicitly specifies an objecttype (i.e.,"TASK=..." form)
;	or has specified the logical name SYS$NET for the filespec string, the
;	quoted string used is the one supplied with the exception that the
;	/netacp_string component is truncated to the slash plus the next two
;	characters (to prevent sending of optional data on a connect initiate
;	and to prevent echoing of optional data on connect confirm).
;
; Obtain the node spec string.
;-

	MOVL	IFB$L_NWA_PTR(R9),R1	; Get address of NWA
	MOVAQ	NWA$Q_NCB(R1),R6	; Get address of scratch descriptor
	MOVAB	NWA$T_NCBBUF(R1),R3	; Get address of scratch buffer
	MOVL	R3,4(R6)		; Fill in descriptor address
	MOVC3	FWA$Q_NODE1(R10),-	; Copy primary (first) node spec string
		@FWA$Q_NODE1+4(R10),(R3);  to NCB including double colon

;
; Obtain the quoted string.
;
; Determine whether the network request is for file access via a remote FAL or
; for task-to-task communication.
;

	BBS	#IFB$V_DAP,(R9),10$	; Branch if file access request

;
; It is a task-to-task communication request.
;

	$TSTPT	NTACC_NSP		;
	MOVC3	FWA$Q_QUOTED(R10),-	; Append quoted string to NCB
		@FWA$Q_QUOTED+4(R10),(R3)
	BBC	#FWA$V_NETSTR,(R10),20$	; Branch if no /netacp_string component
	MOVL	IFB$L_NWA_PTR(R9),R0	; Get address of NWA
	MOVZBL	NWA$B_NETSTRSIZ(R0),R1	; Get length of /netacp_string"
	SUBL2	R1,R3			; Back-up pointer
	ADDL2	#3,R3			; Skip past slash plus first two
					;  bytes of netacp_string
	MOVB	#^A\"\,(R3)+		; Overlay next byte with closing quote
	BRB	20$			; We're finished building NCB

;
; It is a remote file acces request.
;

10$:	$TSTPT	NTACC_DAP		;
	MOVL	#^A\"FAL\,(R3)+		; Request object type FAL
	MOVW	#^A\="\,(R3)+		;

;
; Calculate the size of the NCB and store it in the NCB descriptor block.
;

20$:	SUBL3	4(R6),R3,(R6)		; Fill in descriptor size

;+
; Perform the NETACP access function. It will be either an NSP connect
; initiate or an NSP connect confirm function. Both use the same function and
; subfunction codes, but NETACP differentaites based on the context of the call.
;-

	BSBW	RM$SETEFN		; Request event flag number to use
	MOVL	(SP)+,R2		;  and store it
	MOVL	R6,R1			; Copy address of NCB descriptor
	POPR	#^M<R6>			; Save return PC
	$QIO_S-				; Issue connect initiate/confirm
		EFN=R2-			;  Event flag #
		CHAN=IFB$W_CHNL(R9)-	;  Channel #
		FUNC=#IO$_ACCESS!IO$M_ACCESS- ;  Function code
		IOSB=IFB$L_IOS(R9)-	;  I/O status block
		ASTADR=W^RM$STALLAST-	;  AST address
		ASTPRM=R9-		;  AST parameter
		P1=0-			;  Must be zero
		P2=R1			;  Address of NCB descriptor
	BLBC	R0,30$			; Branch on failure
	BSBW	RM$STALL		; Await completion
	BLBC	R0,30$			; Branch on failure

;
; State that ACP access function has been performed successfully. This will
; trigger the network deaccess code at close time.
;

	$SETBIT	#IFB$V_ACCESSED,(R9)	; File has been accessed
30$:	JMP	(R6)			; Return to caller

	.SBTTL	NT$DEACCESS - PERFORM NETACP DEACCESS FUNCTION

;++
; NT$DEACCESS - destroys a logical link.
;
; Calling Sequence:
;
;	BSBW	NT$DEACCESS
;
; Input Parameters:
;
;	R8	FAB address
;	R9	IFAB address
;	R10	FWA address
;	R11	Impure Area address
;
; Implicit Inputs:
;
;	IFB$W_CHNL
;
; Output Parameters:
;
;	R0	Status code (SS)
;	R1-R4	Destroyed
;	AP	Destroyed
;
; Implicit Outputs:
;
;	IFB$L_IOS
;
; Completion Codes:
;
;	Standard system service status codes
;
; Side Effects:
;
;	None
;
;--

NT$DEACCESS::				; Entry point
	$TSTPT	NTDEACCES		;
	POPR	#^M<R4>			; Save return PC
	BSBW	RM$SETEFN		; Request event flag number to use
	MOVL	(SP)+,R2		;  and store it
	$QIO_S-				; Issue synchronous disconnect
		EFN=R2-			;  Event flag #
		CHAN=IFB$W_CHNL(R9)-	;  Channel #
		FUNC=#IO$_DEACCESS!IO$M_SYNCH- ;  Function code
		IOSB=IFB$L_IOS(R9)-	;  I/O status block
		ASTADR=W^RM$STALLAST-	;  AST address
		ASTPRM=R9-		;  AST parameter
		P1=0-			;  Must be zero
		P2=#0			;  Specify no userdata to return
	BLBC	R0,10$			; Branch on failure
	BSBW	RM$STALL		; Await completion
10$:	JMP	(R4)			; Return to caller

	.END				; End of module
