MODULE RM3UPDDEL (LANGUAGE (BLISS32) ,
		IDENT = 'V03-000'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:	RMS32 INDEX SEQUENTIAL FILE ORGANIZATION
!
! ABSTRACT:
!	This module contains routines common to $UPDATE and $DELETE
!
!
!
! ENVIRONMENT:
!
!		VAX/VMS OPERATING SYSTEM
!
!--

!
! AUTHOR:        D. H. Gillespie	     CREATION DATE:	15-OCT-78  9:48
!
!
! MODIFIED BY:
!
!	V02-010	KPL0001		Peter Lieberwirth	22-Oct-1981
!		Call alternate locking entry routines RM$QUERY_HARD and
!		RM$UNLOCK_HARD to map a user held REA lock to RNL.  This
!		prohibits an update or delete from taking place on a record
!		locked via REA.  (Several processes can hold REA type locks
!		on a single record.)
!
!	V02-009	MCN0001		Maria del C. Nasr	27-Apr-1981
!		Change calling sequence of RM$FIND_BY_RRV.
!		Increase size of record identifier to a word in NRP.
!
!	V03-008	CDS0002		C D Saether		6-Feb-1981	23:45
!		Rename psect.
!
!	V02-007	CDS0001		C. D. Saether		28-Aug-1980	16:00
!		Always clear LOCK_BDB.
!
!	V02-006	REFORMAT	Keith B. Thompson	23-Jul-1980
!
! REVISION HISTORY:
!
!	Wendy Koenig, 	24-OCT-78  14:03
!	X0003 - make changes caused by sharing conventions
!
!	Christian Saether, 	27-OCT-78  9:28
!	X0004 - get bucket with lock before releasing record lock
!
!	Wendy Koenig, 	18-DEC-78  16:36
!	X0005 - don't unlock record if update
!
!*****

LIBRARY 'RMSLIB:RMS';

REQUIRE 'RMSSRC:RMSIDXDEF';

!
! define default psects for code
!

PSECT
    CODE = $$RMSDELETE3(PSECT_ATTR),
    PLIT = $$RMSDELETE3(PSECT_ATTR);

!
! Linkages
!

LINKAGE
    L_FIND_BY_RRV,
    L_CLEAN_BDB,
    L_QUERY_HARD,
    L_UNLOCK_HARD,
    L_UPDDELCOM;

!
! Forward Routines
!
!
!
! External Routines
!

EXTERNAL ROUTINE
    RM$FIND_BY_RRV	: RL$FIND_BY_RRV,
    RM$CLEAN_BDB	: RL$CLEAN_BDB NOVALUE,
    RM$QUERY_HARD	: RL$QUERY_HARD,
    RM$UNLOCK_HARD	: RL$UNLOCK_HARD;

!


GLOBAL ROUTINE RM$UPDDELCOM : RL$UPDDELCOM =

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine does common checks for $UPDATE and $DELETE
!
! CALLING SEQUENCE:
!	RM$UPDDELCOM()
!
! INPUT PARAMETERS:
!	none
!
! IMPLICIT INPUTS:
!	IRAB				- address of internal RAB
!		[IRB$L_NRP_PTR]		- address of next record pointer cell for this IRAB
!			[IRB$B_RP_VBN]	- VBN of current record(RRV)
!			[IRB$B_RP_ID]	- ID of current record(RRV)
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	IRAB[IRB$V_FIND_LAST]	- 0, last operation was not find
!	IRAB[IRB$V_PUTS_LAST]	- 0, last operation was not put
!
! ROUTINE VALUE:
!	CUR		- illegal or no current record
!	RNL		- current record not locked
!
! SIDE EFFECTS:
!	If record locking is unnecessary then record lock is not checked.
!	If automatic locking specified, then record is unlock in all cases(
!	error or success).  If not automatic locking then record is never unlocked.
!	if all goes successfully, the record and bucket are accessed
!	otherwise, the bucket has been released
!	if this is an update,a query lock is performed, & the rec is left locked
!
!--

    BEGIN

    EXTERNAL REGISTER
	R_REC_ADDR,
	COMMON_RAB_STR;

    ! Clear flags indicating that a find was the last operation done
    ! and init nxtbdb and lock_bdb fields.
    !
    IRAB[IRB$V_FIND_LAST] = 0;
    IRAB[IRB$V_PUTS_LAST] = 0;
    IRAB[IRB$L_NXTBDB] = 0;
    IRAB[IRB$L_LOCK_BDB] = 0;
    BEGIN

    LOCAL
	ID,					! ID of current record
	VBN,					! VBN of current record
	FLAGS;					! flag for FIND_BY_RRV

    ! Get current record pointer from NRP list  If zero, no current record
    ! established.
    !
    VBN = .BBLOCK[.IRAB[IRB$L_NRP_PTR], NRP$L_RP_VBN];

    IF .VBN EQL 0
    THEN
	RETURN RMSERR(CUR);

    ID = .BBLOCK[.IRAB[IRB$L_NRP_PTR], NRP$W_RP_ID];

    IF .ID EQL 0
    THEN
	RETURN RMSERR(CUR);

    ! if not called from UPDATE this is a delete and we must signal FIND_BY_RRV
    ! to lock the original bucket also if an RRV causes an indirection to be
    ! taken
    !

    IF NOT .IRAB[IRB$V_UPDATE]
    THEN
	FLAGS = 1		! set low bit
    ELSE
	FLAGS = 0;

    ! get the record with lock
    !
    IRAB[IRB$B_CACHEFLGS] = CSH$M_LOCK;

    RETURN_ON_ERROR (RM$FIND_BY_RRV(.VBN, .ID, .FLAGS));

    ! Now handle unlocking.  First check to see if it's necessary at all.
    ! It would not be necessary when the file is opened for exclusive access.
    ! Otherwise if automatic unlock requested, unlock record.  If not automatic
    ! unlock, check that current record is locked. if update, leave the record
    ! locked until we're all done
    !
    ! Call _HARD lock entry points to map REA held locks to a RNL status.  REA
    ! locked records are not protected from concurrent update or delete except
    ! by this mechanism.
    !

    IF NOT .IFAB[IFB$V_NORECLK]		! check if record locking is necessary
    THEN
	BEGIN

	! if automatic locking requested and this is a delete
	!

	IF .IRAB[IRB$V_UNLOCK_RP]
	    AND
	    NOT .IRAB[IRB$V_UPDATE]
	THEN
	    BEGIN
	    IRAB[IRB$V_UNLOCK_RP] = 0;
	    RETURN_ON_ERROR (RM$UNLOCK_HARD(.VBN, .ID),	! unlock it now
		BEGIN
		IRAB[IRB$V_UPDATE] = 0;
		BEGIN

		GLOBAL REGISTER
		    R_BDB_STR;

		RM$CLEAN_BDB()
		END;
		STATUS = RMSERR(RNL)
		END)
	    END
	ELSE

	    IF RM$QUERY_HARD(.VBN, .ID) NEQ RMSSUC(OK_ALK)
	    THEN
		BEGIN
		IRAB[IRB$V_UPDATE] = 0;
		BEGIN

		GLOBAL REGISTER
		    R_BDB_STR;

		RM$CLEAN_BDB()
		END;
		RETURN RMSERR(RNL)
		END;

	END
    END;
    RETURN 1;

    END;					! end of routine

END

ELUDOM
