	$BEGIN	RM2FMTBKT,007,F$RMSEXTEND2,<RELATIVE-SPECIFIC EXTEND>

;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
; FACILITY: RMS32
;
; ABSTRACT:
;	Routine to perform RELATIVE file organization specific
;	EXTEND processing, that is, the formating of the data buckets
;	by writing them with zeroes.
;
; ENVIRONMENT:
;		STAR processor running STARLET EXEC.
;
; AUTHOR: L F Laverdure,	 CREATION DATE: 1-Dec-1977
;
; MODIFIED BY:
;
;	V02-007	CDS0002		C Saether		 9-Jan-1982
;		Fix code that depends on exact page size buffer.
;
;	V02-006	CDS00001	C. Saether		28-Aug-1981
;		Don't actually lock EBK when doing formatting, only
;		get a buffer.
;
;	V02-005	PSK00001	Paulina S. Knibbe	24-Jul-1981
;		Fix some broken branches caused by integrating
;		Prologue three changes.
;
;	V02-004	REFORMAT	Frederick E. Deen, Jr.	    28-Jul-1980
;		This code was reformatted to adhere to RMS standards
;
;	V003	RAN0003	R A Newell	9-Nov-1978
;	File sharing code enhancements
; 
;--
;


	.SBTTL	DECLARATIONS

;
; INCLUDE FILES:
;

;
; MACROS:
;

	$BDBDEF
	$CSHDEF
	$IFBDEF
	$RMSDEF

;
; EQUATED SYMBOLS:
;

;
; OWN STORAGE:
;


	.SBTTL	RM$FMT_BKT2 - RELATIVE FILE BUCKET FORMAT ROUTINE

;++
; RM$FMT_BKT2 - Relative File bucket format routine
;
;  This module causes the blocks of a new extent of a RELATIVE file
;  to be written with zeroes.
;
; CALLING SEQUENCE:
;
;	BSBW	RM$FMT_BKT2
;
; INPUT PARAMETERS:
;
;	R11	IMPURE AREA address
;	R10	IFAB address
;	R9	IRAB/IFAB address
;	R8	RAB/FAB address
;	R6	END VBN of EXTENT +1
;	R1	First VBN of EXTENT
;
; IMPLICIT INPUTS:
;
;	It is assumed that the PROLOG is locked.
;	If IFB$L_EBK is less than R1, zeroing will start with VBN IFB$L_EBK.
;
; OUTPUT PARAMETERS:
;
;	R0		STATUS
;	R1-R5,AP	Destroyed
;
; IMPLICIT OUTPUTS:
;
;	None
;
; COMPLETION CODES:
;
;	Standard RMS.
;
; SIDE EFFECTS:
;
;	None
;
;--



;
;  Get a buffer to zero the EXTENT.
;  NOTE: By asking for a 1-byte buffer will get minimum of 1 block
;	 (will actually get an entire bucket).
;

RM$FMT_BKT2::
	BSBW	RM$SET_SIFB_ADR			; get either SIFAB or IFAB addr
	CMPL	IFB$L_EBK(AP),R1		; EOF < start of extent?
	BGEQU	5$				; branch if not
	MOVL	IFB$L_EBK(AP), R1		; yes - start zeroing with EBK
5$:	PUSHL	R1				; save starting VBN on stack.
	$CACHE	VBN=#0,SIZE=#1,-		; get a buffer for formatting.
		FLAGS=<LOCK,NOREAD>,ERR=ERREX
	POPL	BDB$L_VBN(R4)			; store start VBN in BDB
	MOVZWL	BDB$W_SIZE(R4),R0		; get buffer length
	BICW2	#^X1FF, R0			; only use full pages
	ROTL	#23,R0,-(SP)			; get # of blocks in buffer
	MOVW	R0,BDB$W_NUMB(R4)		; use entire buffer for zeroing
	PUSHL	R4				; save BDB address
	MOVC5	#0,(SP),#0,R0,(R5)		; zero the buffer
	POPR	#^M<R4,R5>			; restore BDB addr & # blocks

;
;  Loop writing a buffer-full of zeroes each time thru.
;

10$:	ADDL3	BDB$L_VBN(R4),R5,-(SP)		; compute END VBN + 1 of blocks
						;  to be zeroed this write
	CMPL	(SP),R6				; past end of extent?
	BLEQU	20$				; branch if not
	SUBL3	BDB$L_VBN(R4),R6,R0		; compute # blks for last xfer
	MULW3	R0,#512,BDB$W_NUMB(R4)		; and make into # bytes
20$:	BSBW	RM$SEQWTBD			; go write the blocks
	MOVL	(SP)+,BDB$L_VBN(R4)		; set start VBN for next xfer
	BLBC	R0,ERRXFR			; branch if write failed
	CMPL	BDB$L_VBN(R4),R6		; all done?
	BLSSU	10$				; branch if not

;
;  All set, release the buffer and return to caller.
;

RLS:	CLRL	BDB$L_VBN(R4)			; Zero VBN field again.
	BSBW	RM$RLNERR			; Release buffer.
	RSB					; Return.

ERREX:	ADDL2	#4,SP				; Clean start VBN off stack.
	RSB					; And return.

;
;  An error occurred on the WRITE to the file.
;  Release the buffer and return.
;

ERRXFR:
	PUSHL	R0				; Save error code.
	BSBB	RLS				; Clean up, release the buffer.
	POPR	#^M<R0>				; restore status
	RSB


	.END
