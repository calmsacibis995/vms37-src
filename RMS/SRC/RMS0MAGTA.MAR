	$BEGIN	RMS0MAGTA,020,L$RMS0MAGTA,<$NXTVOL, $SPACE & OTHER MAGTAPE CODE>


;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
; Facility: RMS32
;
; Abstract:
;	This module provides the $SPACE and $NXTVOL RMS services as well
;	as the internal magtape rewind file code.
;
; Environment:
;		STAR processor running STARLET exec.
;
; Author: L F Laverdure,	 creation date: 13-DEC-1977
;
; Modified By:
;
;	V02-020	CDS0001		C Saether		20-Dec-1981
;		Clear BIO_LAST after rabset.
;
;	V02-019 DMW0001		David Michael Walp	30-Nov-1981
;		Return EOF error rather then DPE if "END OF VOLUME" error
;		and foreign tape
;
;	V2-018	MCN0001		Maria del C. Nasr,	25-Aug-1980
;		After the NXTVOL function is completed, if not at EOF, the
;		position context should be destroyed, by clearing the
;		offset into the block, setting NRP_VBN to 1, and EBK to -1.
;
;	V02-017	REFORMAT	Keith B. Thompson	29-Jul-1980
;
;	V016	PSK0012		P S Knibbe	15-Feb-1980	01:20
;		on space eof context should be destroyed. IRB$V_EOF bit
;		is cleared, NRP_VBN is set to one and ebk is set to -1
;
;	V015	PSK0011		P S Knibbe	13-Dec-1979	03:40
;		if an eof is returned on an ansi magtape, set the IRB$V_EOF bit
;		and set IRB$V_NRP_VBN equal to ebk to make sure that the bit
;		gets tested.
;
;	V014	PSK0001		P S Knibbe	20-Nov-1979	06:30
;		added routine to write tape marks at end of file.
;		also changed rewind to clear IFB$V_EOF bit and IRB$V_EOF bit
;
;	V013	JAK0020		J A Krycka	05-Sep-1979	12:00
;		release 2.0 work.
;
;	V011	RAN0004		R A Newell	20-Dec-1978	10:15
;		eliminate wait on tape rewind i/o function.
;
; Revision History:
;
;	L F Laverdure,	 31-Oct-1978  10:40	; set nowait for foreign mt rewind
;	R A Newell,      18-Sep-1978  09:09	; changed entry pt name for isam fit
;	R A Newell,      31-Aug-1978  12:01	; eliminate wait for i/o on mbx
;--
;


	.SBTTL	DECLARATIONS

;
; Include Files:
;

;
; Macros:
;

	$FIBDEF
	$RABDEF
	$DEVDEF
	$IFBDEF
	$IRBDEF
	$IODEF
	$RMSDEF

;
; Equated Symbols:
;

;
; Own Storage:
;


	.SBTTL	$SPACE ROUTINE

;++
;
;  RMS$$SPACE	-
;
;	this routine spaces a magtape or disk file forward or backward
;	a given number of blocks.  the file must be accessed for block i/o.
;
; Calling sequence:
;
;	entered as a result of user's calling sys$space
;
; Input Parameters:
;
;	AP	user's argument list
;
; Implicit Inputs:
;
;	the contents of the rab, in particular, the bkt field gives the number
;	of blocks to space, forward if positive, backward if negative.
;
; Output Parameters:
;
;	R0	status code
;	R1	destroyed
;
; Implicit Outputs:
;
;	the sts field of the rab
;	the stv field of the rab (set to # of blocks actually spaced, always
;	positive)
;
; Completion Codes:
;
;	standard rms
;
; Side Effects:
;
;	none
;
;--



;++
;
; verify operation allowed (accessed for block i/o to a magtape or disk)
; and call internal space magtape routine unless this is for a disk file.
;
;--

	$ENTRY	RMS$$SPACE
	$TSTPT	SPACE
	$RABSET	ANYFAC=1,-	; set up stream
		BIO=1,-		; any fac value o.k., must be accessed
		CFLG=1		;  for block i/o, clear find last

	CSB	#IRB$V_BIO_LAST,(R9)		; Clear bio_last.
	BBS	#IFB$V_DAP,(R10),NTSPACE	; branch if network operation
	BBC	#DEV$V_FOD,-			; branch if not disk or mt
		IFB$L_PRIM_DEV(R10),ERRIOP
	BSBW	RM$FLUSH			; write all dirty blocks
	BLBC	R0,EXIT				; get out on error
	CLRL	IRB$L_CURBDB(R9)		; say no current bdb
	CLRW	IRB$W_NRP_OFF(R9)		; start at beginning next block
	MOVL	RAB$L_BKT(R8),R6		; pick up space count
	BBC	#DEV$V_SQD,-			; branch if not magtape
		IFB$L_PRIM_DEV(R10),SPDISK
	CSB	#IRB$V_EOF,(R9)		; clear the eof bit - we're no
					;  longer at eof
	MOVL	#1,IRB$L_NRP_VBN(R9)	; nrp should equal 1 to avoid
					;  problems comparing with ebk
	MNEGL	#1,IFB$L_EBK(R10)	; ebk must be -1 for same reason
	BSBB	RM$SPACE_MT		; space the magtape
SPEXIT:	MOVL	R6,RAB$L_STV(R8)	; set stv from block count
EXIT:	BRW	RM$EXRMS		; back to user

;++
;
;  perform network space function
;
;--

NTSPACE:
	$PSECT_BR	NF$NETWORK
	MOVL	RAB$L_BKT(R8),R1	; get # blocks to space
	BSBW	NT$SPACE		; space the file via remote fal
	CMPW	R0,#<RMS$_SUP&^XFFFF>	; screen out unsupported error
	BEQL	30$			;  as rab$l_stv already has
					;  associated dap error code
	TSTL	RAB$L_BKT(R8)		; space foreward request?
	BLSS	10$			; branch if not
	ADDL2	R6,IRB$L_NRP_VBN(R9)	; update next block pointer
	BRB	20$			;
10$:	SUBL2	R6,IRB$L_NRP_VBN(R9)	; update next block pointer
20$:	BRW	SPEXIT			; join mainline
30$:	BRW	EXIT			; exit to user
	$PSECT_RESTORE


;
;  $space for disk file.
;
;  update nbp checking for beginning and end of file conditions
;

SPDISK:	$PSECT_BR	L$RMS0
	BLSS	20$				; branch if backspace
	ADDL2	R6,IRB$L_NRP_VBN(R9)		; bump nrp by space count
	SUBL3	IFB$L_EBK(R10),-		; past eof?
		IRB$L_NRP_VBN(R9),R1
	BLEQU	30$				; branch if not
	CMPL	R1,#1				; exactly 1 block past?
	BNEQ	10$				; branch if not
	TSTW	IFB$W_FFB(R10)			; something in last block?
	BNEQ	30$				; branch if yes (o.k.)

;
;  attempt to move past eof block (+1 if ffb not = 0).
;  position to eof block (+1 if ffb not = 0) and return an error.
;

10$:	MOVL	IFB$L_EBK(R10),IRB$L_NRP_VBN(R9); set to eof block
	TSTW	IFB$W_FFB(R10)			; block empty?
	BEQL	15$				; branch if yes
	INCL	IRB$L_NRP_VBN(R9)		; bump past partial blk
	DECL	R1				; adjust difference count
15$:	SUBL2	R1,R6				; adjust space count
						;  = (# wanted) - (# lacking)
	RMSERR	EOF			; indicate not all spaced
	BRB	30$			; continue

;
;  space backward for disk file.
;
;  check for beginning of file.
;

20$:	MNEGL	R6,R6				; get # blks to backspace
	CMPL	R6,IRB$L_NRP_VBN(R9)		; can we do entire backspace?
	BLSSU	25$				; branch if yes
	RMSERR	BOF				; no - change status code
	MOVL	IRB$L_NRP_VBN(R9),R6		; & adjust actual space count
	BBS	#DEV$V_FOR,-			; branch if mounted foreign
		IFB$L_PRIM_DEV(R10),25$
	DECL	R6				; leave nbp = 1
25$:	SUBL2	R6,IRB$L_NRP_VBN(R9)		; adjust nbp by space count
30$:	BRW	SPEXIT				; go finish up
	$PSECT_RESTORE


;++
;
;  RM$SPACE_MT	-  space file blocks routine for magtape.
;  RM$WRITEOF	-
;
;  inputs:
;
;	R6	# of blocks to space (forward if postive, backward if negative)
;	R8	rab/fab address
;	R9	irab/ifab address
;	R10	ifab address
;	R11	impure area address
;
;  outputs:
;
;	R0	status code
;	R6	# blocks actually spaced
;	R1-R5,AP	destroyed
;
;--

RM$SPACE_MT::
	BBS	#DEV$V_FOR,-		; branch if mounted foreign
		IFB$L_PRIM_DEV(R10),20$
	MOVZBL	#FIB$C_SPACE,R5		; magtape control function code
	BSBB	MTFNC1			; do the space
10$:	MOVZWL	IRB$L_IOS+2(R9),R6	; get # of blocks spaced
	RSB				; and return to caller

;
;  do space logical blocks for non-files-11 magtape
;

20$:	MOVZWL	#IO$_SKIPRECORD,R0	; lgogical space function code
	BSBB	MTFUNC_FOR		; do the space
	BRB	10$

;++
;
;  write an eof mark for close of output foreign magtape (or mailbox)
;
;--

RM$WRITEOF::
	MOVZWL	#IO$_WRITEOF,R0
	BBC	#DEV$V_MBX,-			; branch if not mailbox
		IFB$L_PRIM_DEV(R9),NOTMBX
	BISB2	#IO$M_NOW,R0			; eliminate wait for i/o
NOTMBX:
	BRB	MTFUNC_FOR1

	.SBTTL	$NXTVOL ROUTINE

;++
;
;  Entry point for $nxtvol.
;
;  check that this is for a magtape and, if so, do a $flush followed by
;  call to the magtape primitive to do the next volume processing.
;
;--

	$ENTRY	RMS$$NXTVOL
	$TSTPT	NXTVOL
	$RABSET				; set up stream
	BBC	#DEV$V_SQD,-		; branch if not magtape
		IFB$L_PRIM_DEV(R10),-
		ERRIOP
	BSBW	RM$FLUSH		; write any dirty blocks
	BLBC	R0,EXIT			; get out on error
	MOVZBL	#FIB$C_NEXTVOL,R5	; set magtape control function code
	BSBB	MTFUNC			; do the nextvol call
	BBS	#IRB$V_EOF,(R9),10$	; if at EOF, return
	CLRL	IRB$L_NRP_OFF(R9)	; set record offset to zero
	MOVL	#1,IRB$L_NRP_VBN(R9)	; reset VBN to 1
	MOVL	#-1,IFB$L_EBK(R10)	; indicate beginning of file section
10$:	BRB	EXIT			; and return to user



;++
;
;  handle invalid device error.
;
;--

ERRIOP:	$PSECT_BR	L$RMS0
	RMSERR	IOP
	BRW	RM$EXRMS		; get out
	$PSECT_RESTORE

	.SBTTL	RM$REWIND_MT - INTERNAL ROUTINE TO REWIND MT

;++
;
;  RM$REWIND_MT	-
;
;  rewind magtape to beginning of file
;
;
;  inputs:
;
;	R8	rab/fab address
;	R9	irab/ifab address
;	R10	ifab address
;	R11	impure area address
;
;  outputs:
;
;	R0	status code
;	R1-R6,AP	destroyed
;
;--

RM$REWIND_MT::
	MOVZWL	#FIB$C_REWINDFIL,R5		; set mt control function code
	BBC	#DEV$V_FOR,-			; branch if not mounted foreign
		IFB$L_PRIM_DEV(R10),MTFUNC

	MOVZWL	#IO$_REWIND!IO$M_NOWAIT,R0	; rewind tape i/o function
	CSB	#IFB$V_EOF,(R10)		; no longer at end of file
	CSB	#IRB$V_EOF,(R9)			; clear bit in irab also
MTFUNC_FOR1:
	CLRL	R6				; zero qio p1 parameter

MTFUNC_FOR:
	BSBW	RM$FORFNC			; do the foreign tape function
	BRB	MTSTS

	.SBTTL	MTFUNC - SUBROUTINE TO ISSUE A MAGTAPE CONTROL QIO

;++
;  mtfunc subroutine to issue user magtape control functions to the
;  magtape primitive.
;
;  entry at mtfnc1 if r6 contains a magtape control value.
;
;  inputs:
;
;	R5	magtape control function code
;	R6	magtape control value (not an input for entry at mtfunc)
;	R8	rab/fab address
;	R9	irab/ifab address
;	R10	ifab address
;	R11	impure area address
;
;  outputs:
;
;	R0	status code
;	R6	zeroed if entry at mtfunc, else unchanged
;	R1-R5,AP	destroyed
;
;  note: RM$FLUSH must already have been called for file
;
;--

MTFUNC:	CLRL	R6			; zero control value param
MTFNC1:					; entry point with r6 = control value
	MOVL	#FIB$C_MTALEN,R2	; set size of fib
	BSBW	RM$GETSPC1		; allocate fib
	BLBC	R0,MTXIT		; branch on error

;
; build descriptor for fib on stack
;

	PUSHL	R1			; addr of fib
	PUSHL	#FIB$C_MTALEN		; length of fib
	MOVW	R5,FIB$W_CNTRLFUNC(R1)	; set control function code
	MOVL	R6,FIB$L_CNTRLVAL(R1)	;  and value
	MOVZWL	#IO$_ACPCONTROL,R0	; set i/o function code
	BSBW	RM$FCPFNC_ALT1		; do the control function
	POPR	#^M<R2,R4>		; clean stack & get fib len & addr
	PUSHL	R0			; save status code
	BSBW	RM$RETSPC1		; deallocate fib
	POPR	#^M<R0>			; restore status
MTSTS:	BLBC	R0,MTERR		; branch on error
MTXIT:	RSB				; return to caller


;
;  Had an error.  Map to RMS version of status code.
;

MTERR:	CMPW	R0,#SS$_ENDOFFILE		; did we get end of file error?
	BEQL	10$				; branch if not
	CMPW	R0,#SS$_ENDOFVOLUME		; did we have end of volume
	BNEQ	40$				; branch if not
	BBC	#DEV$V_FOR,-			; and foreign mount
		IFB$L_PRIM_DEV(R10),50$		; branch if not
	BRB	20$			
10$:	BBS	#DEV$V_FOR,-			; if not foreign
		IFB$L_PRIM_DEV(R10),30$
20$:	SSB	#IRB$V_EOF,(R9)			; set the eof flag
	MOVL	IFB$L_EBK(R10),IRB$L_NRP_VBN(R9)
	MOVW	IFB$W_FFB(R10),IRB$L_NRP_OFF(R9); make sure the bit gets tested
30$:	RMSERR	EOF				; yes - change to rms version
	RSB

40$:	CMPW	R0,#SS$_BEGOFFILE		; was it beginning of file?
	BNEQ	50$				; branch if not
	RMSERR	BOF				; yes - change to rms version
	RSB

50$:	$PSECT_BR	L$RMS0
	RMSERR	DPE,R1				; default error code
	BRW	RM$MAPERR			; map error to rms & return
	$PSECT_RESTORE



	.SBTTL	RM$WTTAPMARK WRITE TAPE MARKS

;++
;
;    RM$WTTAPMARK	-
;
;
;	    this routine writes tape marks on foreign magtapes if
;	the IFB$V_EOF bit is set.  this bit gets set whenever a put
;	is done and cleared on rewind.
;
;	    the tape marks do not get written if the file was not
;	opened with write access.
;
;    input
;
;	none
;
;    implicit input
;
;	R9 - ifab address
;	IFB$V_WRTACC 	- 	set if writing is permitted
;	IFB$V_EOF	-	set if at end of file
;
;    output
;
;	R0 		- 	set to appropriate status code
;
;    implicit output
;
;  	none
;
;    side effects
;
;	none
;
;--

RM$WTTAPMARK::
	BBC	#IFB$V_WRTACC,(R9),40$	; write accessed?
	BBC	#IFB$V_EOF,(R9),40$	; eof ?
	BSBW	RM$WRITEOF		; yes - write eof
	BLBC	R0,30$			; write another one
	BSBW	RM$WRITEOF
	BLBC	R0,30$

	MNEGL	#1,R6			; space some
	BSBW	RM$SPACE_MT

	CMPW	R0,#RMS$_EOF&^XFFFF	; make sure error is eof
	BNEQ	30$			; if not - real error

40$:	RMSSUC
30$:	RSB
	.END
