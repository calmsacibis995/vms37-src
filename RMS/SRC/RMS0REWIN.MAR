	$BEGIN	RMS0REWIN,001,F$RMSCLOSE0,<FILE REWIND OPERATION>


;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
; Facility: rms32
;
; Abstract:
;		this routine is the highest level control
;		routine to perform the $rewind function.
;
; Environment:
;		star processor running starlet exec.
;
; Author: l f laverdure,	 creation date: 24-OCT-1977
;
; Modified By:
;
;	V03-001	CDS0002		C Saether	17-Feb-1982
;		Don't clear IRB$V_GBLBUFF on rewind.
;
;	V02-014	CDS0001		C Saether	03-Aug-1981
;		Remove SQO check around PPF check.
;
;	V02-013	KPL0001		P Lieberwirth	39-Jul-1981
;		Change entry point to $$ form so we can get here via
;		RMS0BRNCH.
;
;	V02-012	KRM0002		K R Malik	09-DEC-1980
;		modify BKPMASK to prevent clearing IRB$V_DAP_CON.
;
;	V02-011	REFORMAT	P S Knibbe	25-Jul-1980
;
;	V010	JAK0020		J A Krycka	05-SEP-1979	09:00
;		release 2.0 work.
;
;	V008	RAN0002		R A Newell	06-SEP-1978	08:53
;		rms32 isam modification.
;
;--


	.SBTTL	DECLARATIONS

;
; Include Files:
;

;
; Macros:
;

	$DEVDEF
	$IFBDEF
	$IRBDEF
	$RMSDEF

;
; Equated Symbols:
;

	BKP=IRB$L_BKPBITS*8		; bit offset to bookkeeping bits
	BKPMASK=^C<<1@<IRB$V_BUSY-BKP>>!-
		<1@<IRB$V_ASYNC-BKP>>!-
		<1@<IRB$V_ASYNCWAIT-BKP>>!-
		<1@<IRB$V_RAHWBH-BKP>>!-
		<1@<IRB$V_GBLBUFF-BKP>>!-
		<1@<IRB$V_DAP_CONN-BKP>>>	; mask to reset bits

;
; Own Storage:
;


	.SBTTL	RMS$$REWIND - $REWIND FILE ROUTINE

;++
; RMS$$REWIND - Rewind file
;
; this routine performs common rab function setup followed by an
; implicit $free and $flush and then by dispatch to organization-dependent
; $rewind code
;
; Calling sequence:
;
;	entered from exec as a result of user's calling sys$rewind
;	(e.g., by using the $rewind macro)
;
; Input Parameters:
;
;	ap	user's argument list addr
;
; Implicit Inputs:
;
;	the contents of the rab and related irab and ifab.
;
; Output Parameters:
;
;	r1	destroyed
;	r0	status code
;
; Implicit Outputs:
;
;	all locked records for the stream are freed, and the stream is
;	repositioned at the start of the file.  the file attributes are also
;	rewritten.
;	for the sequential org., all bdb's and buffers are released.
;	rab$l_sts and rab$l_stv reflect the status of the rewind.
;
;	a completion ast is queued if specified in the user arglist.
;
; Completion Codes:
;
;	standard rms (see functional spec for list).
;
; Side Effects:
;
;	none
;
;--


	$ENTRY	RMS$$REWIND
	$TSTPT	REWIND
	$RABSET				; do common setup with no specific checks

;
; returns to user on error
;

	BBS	#IFB$V_DAP,(R10),NTRWND	; branch if network operation
	BBS	#IRB$V_PPF_IMAGE,-
		(R9),ERRIOP		; branch if indirect ppf
	BBC	#DEV$V_FOD,-
		IFB$L_PRIM_DEV(R10),-
		ERRIOP			; or if unit rec device
	BBS	#IFB$V_NORECLK,(R10),10$; omit record unlock if no locking
	BSBW	RM$UNLOCKALL		; free any locked records
					; (ignore possible error)
10$:

;
; dispatch to org-dependent code
;

	CASE	TYPE=B,-
		SRC=IFB$B_ORGCASE(R10),-; and dispatch
		DISPLIST=<RWSEQ,RWREL,RWIDX>

;
;************************************************************************
;
;		indexed specific rewind
;
;*************************************************************************
;

RWIDX:	BSBW	RM$REWIND3		; do indexed specific rewind
	BRB	DONE

;****************************************************************************
;
;  sequential file org rewind
;
;****************************************************************************

RWSEQ:	BSBW	RM$FLUSH		; write and release any bdbs
					; rewriting file attributes
	BLBC	R0,EXIT			; get out on error
	CLRW	IRB$W_CSIZ(R9)		; reset to no current record
	BBC	#DEV$V_SQD,-
		IFB$L_PRIM_DEV(R10),-
		RWREL			; branch if not magtape

;
;  magtape support
;

	MNEGL	#1,IFB$L_EBK(R10)	; set eof block to max value
	CLRW	IFB$W_FFB(R10)		; reset eof offset
	BSBW	RM$REWIND_MT		; do rewind
	BLBC	R0,EXIT			; get out on error
					; else fall thru

;****************************************************************************
;
;  relative file org rewind
;
;***************************************************************************

	ASSUME	IRB$L_NRP_OFF EQ IRB$L_NRP_VBN+4

RWREL:	CLRQ	IRB$L_NRP_VBN(R9)	; reset nrp
	BBS	#DEV$V_FOR,-
		IFB$L_PRIM_DEV(R10),10$	; branch if non-file-struc.
	INCB	IRB$L_NRP_VBN(R9)	; nrp = vbn 1

10$:	ASSUME	IRB$L_RP_OFF EQ IRB$L_RP_VBN+4

	CLRQ	IRB$L_RP_VBN(R9)

;
;  clear all irab bookkeeping bits except busy, async, asyncwait, rahwbh
;  gblbuff & dap_con.
;

DONE:	BICL	#BKPMASK,IRB$L_BKPBITS(R9)
	RMSSUC
EXIT:	BRW	RM$EXRMS		; return to caller

;++
;
;  perform network rewind function
;
;--

NTRWND:	$PSECT_BR	NF$NETWORK
	BSBW	NT$REWIND		; rewind the file
	BLBC	R0,10$			; branch on error
	MOVL	#1,IRB$L_NRP_VBN(R9)	; reset next block pointer
	BRW	DONE			; rejoin mainline
10$:	BRW	EXIT			; branch aid (rm$exrms
					;  is out-of-range)
	$PSECT_RESTORE

;
;  handle error
;

ERRIOP:	$PSECT_BR	L$RMS0
	RMSERR	IOP			; can't rewind unit rec dev. or	
					; process perm. file if indirectly
					; connected
	BRW	RM$EXRMS
	$PSECT_RESTORE
	.END
