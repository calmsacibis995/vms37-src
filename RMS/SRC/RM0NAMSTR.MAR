$BEGIN	RM0NAMSTR,001,F$RMSOPEN0NAM,<RETURN FILENAME STRINGS>


;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; Facility: RMS
;
; Abstract:
;
;	This module builds either an expanded name string or a resultant
;	name string (as requested on entry) and returns it to the user via
;	the Name Block.
;
; Environment: VAX/VMS, executive mode
;
; Author: Leo F. Laverdure,	Creation Date:  01-MAR-1977
;
; Modified By:
;
;	V03-001	JAK0073		J A Krycka		12-Apr-1982
;		Eliminate the practice of prefixing a <del> character to an
;		expanded or resultant name string to indicate that the password
;		has been masked out of the nodespec.
;
;	V02-090	KEK018		K. E. Kinnear		17-Jan-1982
;		Add modifications for ANSI-"a" magtape filespecs.
;
;	V02-089	KEK0019		K. E. Kinnear		17-Jan-1982
;		Remove references to NAM$B_QUOTED and NAM$L_QUOTED and
;		replace with references to NAM$x_NAME.
;
;	V02-088 JWH0001		Jeffrey W. Horn		16-Dec-1981
;		If FWA$V_DIR bit is clear, return [] as directory
;		specification.
;
;	V02-087	RAS0039		Ron Schaefer		25-Sep-1981
;		Return the ESA device name string if the DVI device name
;		was used.  This hides the hidden device name for 
;		users doing explicit $PARSE before $OPEN or $CREATE.
;
;	V02-086	JAK0062		J A Krycka		14-AUG-1981
;		Return remote file system type in NAM$B_RFS.
;
;	V02-085	JAK0059		J A Krycka		11-JUN-1981
;		Multiplex the QUOTED descriptor in the NAM block with the
;		NAME descriptor instead of the DEV descriptor.
;
;	V02-084	JAK0058		J A Krycka	04-JUN-1981
;		Continuation of V02-084.
;
;	V02-083	KRM0015		K R Malik	26-May-1981
;		Fix bug in RM$EXPSTRING which returned incorrect values
;		for the extended NAM block TYPE and VER fields.
;
;	V02-082	JAK0058		J A Krycka	22-MAY-1981
;		This module was created from RM$EXPSTRING code previously
;		residing in RM0XPFN.
;
;	The following edit history entries were copied from RM0XPFN:
;
;	V02-081	KRM0014		K R Malik	11-MAY-1981
;		Fill in the extended NAM block fields with the resultant
;		name string filespec elements for a resultant name string
;		that was received from the remote FAL.
;
;	V02-078	KRM0013		K R Malik	22-APR-1981
;		Make RM$EXPSTRING fill in the extended NAM block fields with
;		the addresses & lengths of the various filespec elements
;		of the expanded or resultant name string (as appropriate for
;		the operation).
;
;	V01-073	JAK0044		J A Krycka	18-MAR-1980
;		Fix bug in return of network resultant name string.
;
;	V01-070	JAK0034		J A Krycka	06-JAN-1980
;		Quote resultant string returned by remote FAL as appropriate.
;		Disable NWA$B_NOP field options (which are not documented).
;		Change logical node spec escape character from SYN to DEL.
;
;	V01-068	JAK0027		J A Krycka	08-NOV-1979
;		Use filespec returned by remote FAL when constructing a
;		resultant name string.
;
;	V01-066	TMH0004		Tim Halvorsen	20-OCT-1979
;		Make RM$EXPSTRING return elipsis if present in string so that
;		related file names copy an elipsis properly.
;
;	V01-065	JAK0025		J A Krycka	08-OCT-1979
;		Continuation of V062. Adjust node and device descriptors earlier
;		to eliminate the need for duplicate code.
;
;	V01-062	JAK0025		J A Krycka	26-SEP-1979
;		Modify expanded and resultant name string processing to prefix
;		an underscore to node and device names that have been subject
;		to logical name translation.
;
;	V01-053	JAK0006		J A Krycka	14-FEB-1979
;		Allow multiple spaces and tabs to delimit elements in the
;		access control string.
;
;	V01-052	JAK0007		J A Krycka	07-FEB-1979
;		Create logical name for node-name-with-password-masked-out
;		string that is returned in expanded and resultant name strings.
;
;	V01-046	JAK0006		J A Krycka	21-NOV-1978
;		Revise parsing of the access control string and quoted string
;		portions of a file specification so that the password and
;		/netacp_string substrings are omitted (by default) from
;		the expanded and resultant name strings.
;
;--

	.SBTTL	DECLARATIONS

;
; Include Files:
;

	$FABDEF				; Define File Access Block symbols
	$FWADEF				; Define File Work Area symbols
	$IFBDEF				; Define IFAB symbols
	$LOGDEF				; Define Logical Name Table symbols
	$NAMDEF				; Define Name Block symbols
	$NWADEF				; Define Network Work Area symbols
	$PSLDEF				; Define Process Status Longword symbols

;
; Macros:
;
;	None
;
; Equated symbols:
;
;	The following symbol definitions were copied from RM0XFPN:
;

	FOP=FAB$L_FOP*8			; Bit offset to FOP

	V_ACS		= 10		; Field contains a node name followed by
					;  an access control string

	SPACE		= ^X20		; ASCII value for space
	HOR_TAB		= ^X09		; ASCII value for horizontal tab

	.SBTTL	RM$EXPSTRING - BUILD EXPANDED OR RESULTANT NAME STRING

;++
; RM$EXPSTRING - examines the user's NAM block for an expanded name string or
;	resultant name string buffer, and if found builds the string in the
;	buffer utilizing the separately parsed elements stored in the FWA and 
;	NWA control blocks.
;
; Calling Sequence:
;
;	BSBW	RM$EXPSTRING
;
; Input Parameters:
;
;	R7	NAM block address
;	R8	FAB address
;	R9	IFAB address
;	R10	FWA address
;	AP	Address of 5-byte argument list of the format:
;		.byte	offset to either NAM$L_ESA or NAM$L_RSA
;		RMSERR_WORD	NAM$_ESA (or _RST)
;		RMSERR_WORD	NAM$_ESS (or _RSS)
;
; Implicit Inputs:
;
;	The current contents of the FWA.
;	FAB$L_NAM, NAM$L_ESA (or _RSA), NAM$B_ESS (or _RSS)
;	NAM$B_BID, NAM$B_BLN
;
; Outputs:
;
;	R0	Status code
;	R1-R7	Destroyed
;	AP	Destroyed
;
; Implicit Outputs:
;
;	If the specified buffer exists, the buffer is filled in with the
;	expanded or resultant name string, and its length is stored in the
;	NAM$B_ESL or NAM$B_RSL field, as appropriate.
;
;	If the NAM$B_BLN field indicates that this is an extended NAM block
;	then the following filespec element fields are also filled in:
;
;		NAM$B_NODE	NAM$L_NODE
;		NAM$B_DEV	NAM$L_DEV
;		NAM$B_DIR	NAM$L_DIR
;		NAM$B_NAME	NAM$L_NAME
;		NAM$B_TYPE	NAM$L_TYPE
;		NAM$B_VER	NAM$L_VER
;
; Completion Codes:
;
;	Standard RMS completion codes, including SUC, ESA, ESS, RSA, RSS, NAM.
;
; Side Effects:
;
;	If a NAM block exists it will have been probed.
;
;--

;++
; Return the expanded or resultant name string to the user buffer and, if this
; is an 'extended' NAM block, fill in the various filespec element fields.
;--

	ASSUME	NAM$L_ESA EQ NAM$B_ESL+1
	ASSUME	NAM$B_ESL EQ NAM$B_ESS+1
	ASSUME	NAM$L_RSA EQ NAM$B_RSL+1
	ASSUME	NAM$B_RSL EQ NAM$B_RSS+1

RM$EXPSTRING::				; Entry point
	BSBW	RM$CHKNAMBLK		; Validate NAM block
	PUSHR	#^M<R8,R11>		; Save registers
	MOVZBL	(AP)+,R3		; Get offset to ESA or RSA field
	ADDL3	R3,R7,R8		;  and use to compute address
	MOVL	(R8),R3			; Get address of buffer
	BNEQ	10$			; Branch if non-zero
	BRW	EXIT_SUC		; Else exit if zero
10$:	MOVZBL	-2(R8),R4		; Get buffer size
	BNEQ	20$			; Branch if non-zero
	BRW	EXIT_SUC		; Else exit quietly if zero
20$:	BBC	#FAB$V_NAM+FOP,@0(SP),30$; Branch if not open by Name Block
	TSTL	NAM$W_FID(R7)		; File ID input?
	BEQL	30$			; Branch if not
	BRW	EXIT_SUC		; Branch, omitting directory
					;  and file name
30$:	IFWRT	R4,(R3),40$,IFB$B_MODE(R9)
	BRW	ERRSA			; Branch if no write access
40$:	CLRB	-(R8)			; Clear ESL (or RSL)

;
; If the DVI device name was used, and an 'extended NAM block' is present,
; and there is a non-zero DEV field; then use the DEV field as the device
; name and not the DVI name.   This hides the expansion of hidden devices.
;

	BBC	#FAB$V_NAM+FOP,@0(SP),45$; Branch if not open by Name Block
	TSTB	NAM$T_DVI(R7)		; Did we have a DVI?
	BEQL	45$			; Branch if not
	CMPB	NAM$B_BLN(R7),#NAM$C_BLN; Is this an extended NAM block?
	BLSSU	45$			; Branch if not
	MOVZBL	NAM$B_DEV(R7),R0	; Is there an ESA device name?
	BEQL	45$			; Branch if not
	SUBL3	#1,R0,FWA$Q_DEVICE(R10) ; Set new device descriptor
	MOVL	NAM$L_DEV(R7),-
		FWA$Q_DEVICE+4(R10)	; without ":"
45$:

;
; If this is an 'extended' NAM block, initialize the filespec element fields.
;

	ASSUME	NAM$B_NODE+1 EQ NAM$B_DEV
	ASSUME	NAM$B_DEV+1 EQ NAM$B_DIR
	ASSUME	NAM$B_DIR+1 EQ NAM$B_NAME
	ASSUME	NAM$B_NAME+1 EQ NAM$B_TYPE
	ASSUME	NAM$B_TYPE+1 EQ NAM$B_VER

	CMPB	NAM$B_BLN(R7),#NAM$C_BLN; Is this an extended NAM block?
	BLSSU	50$			; Branch if not
	CLRQ	NAM$B_NODE(R7)		; Initialize all filespec element
					;  length fields with a count of zero
	MOVL	R3,NAM$L_NODE(R7)	; Initialize all filespec element
	MOVL	R3,NAM$L_DEV(R7)	;  address fields with the address
	MOVL	R3,NAM$L_DIR(R7)	;  of the start of the user buffer
	MOVL	R3,NAM$L_NAME(R7)	;  "
	MOVL	R3,NAM$L_TYPE(R7)	;  "
	MOVL	R3,NAM$L_VER(R7)	;  "

;
; Check for the occurrence of a node name (and possilby a quoted string).
;

50$:	BBC	#FWA$V_NODE,(R10),-	; Check for node name
		COPY_DEVICE		;
	BRW	COPY_NODE		; Branch if node name found

;
; Move the device name string and, if this is an 'extended' NAM block, fill in
; the DEV element fields.
;

COPY_DEVICE:				;
	BBC	#FWA$V_DEVICE,(R10),10$	; Branch if no device seen
	CMPB	NAM$B_BLN(R7),#NAM$C_BLN; Is this an extended NAM block?
	BLSSU	10$			; Branch if not
	MOVL	R3,NAM$L_DEV(R7)	; Fill in DEV address field
	ADDB3	FWA$Q_DEVICE(R10),#1,-	; Fill in DEV length field (+ colon)
		NAM$B_DEV(R7)		;
10$:	MOVAQ	FWA$Q_DEVICE(R10),R6	; Get device descriptor address
	BSBW	MOVE_NEXT		; Copy device name (even if null)
	BBC	#FWA$V_DEVICE,(R10),-	; Branch if no device seen
		COPY_DIR		;
	MOVB	#^A/:/,R0		; Append a colon
	BSBW	MOVE_CHAR		;  to device name
20$:	TSTB	FWA$B_ESCFLG(R10)	; Branch if this is not a
	BEQL	COPY_DIR		;  process-permanent file
	BRW	EXIT_SUC		; All done if it is

;
; Build up full directory spec from the parts and, if this is an 'extended'
; NAM block, fill in the DIR element fields.
;

	ASSUME	FWA$Q_DIR1 EQ FWA$Q_DEVICE+8

COPY_DIR:				;
	CMPB	FWA$B_DIRTERM(R10),#^A/]/;Was there a right bracket?
	BEQL	5$			; Yes, continue
	CMPB	FWA$B_DIRTERM(R10),#^A/>/;Was there a right angle?
	BNEQ	COPY_NAME		; Branch if not
5$:	CMPB	NAM$B_BLN(R7),#NAM$C_BLN; Is this an extended NAM block?
	BLSSU	10$			; Branch if not
	MOVL	R3,NAM$L_DIR(R7)	; Fill in DIR address field
10$:	SUBB3	#2,FWA$B_DIRTERM(R10),R0; Copy left bracket
	BSBW	MOVE_CHAR		;  to user buffer
	BBC	#FWA$V_DIR,(R10),50$	; Branch if no directory wanted
	BBS	#FWA$V_GRPMBR,(R10),40$	; Branch if [group,member] format
	EXTZV	#FWA$V_DIR_LVLS,-	; Get number of subdirectories
		#FWA$S_DIR_LVLS,(R10),R11
20$:	BSBW	MOVE_NEXT		; Copy next directory name
	MOVB	#^A/./,R0		;
	BSBW	MOVE_CHAR		; And append delimiter
	MOVZWL	-6(R6),R5		; Elipsis following this name?
	BEQL	30$			; Branch if not
	BSBW	MOVE_CHAR		; If so, append '..'
	BSBW	MOVE_CHAR		;
30$:	SOBGEQ	R11,20$			; Loop until done
	TSTW	R5			; Trailing elipsis?
	BNEQ	50$			; If so, keep 3 dots there
	DECL	R3			; Remove trailing '.'
	DECB	(R8)			; Decrement string size
	BRB	50$			; Add right bracket
40$:	BSBW	MOVE_NEXT		; Copy group portion
	MOVB	#^A/,/,R0		; Copy UIC format separator
	BSBW	MOVE_CHAR		;  to user buffer
	BSBW	MOVE_NEXT		; Copy member portion
50$:	MOVB	FWA$B_DIRTERM(R10),R0	; Copy right bracket
	BSBW	MOVE_CHAR		;  (']' or '>') to user buffer
	CMPB	NAM$B_BLN(R7),#NAM$C_BLN; Is this an extended NAM block?
	BLSSU	COPY_NAME		; Branch if not
	SUBL3	NAM$L_DIR(R7),R3,R1	; Compute DIR length
	MOVB	R1,NAM$B_DIR(R7)	; Fill in DIR length field

;
; Now move the file name, type, and version (all stored in one string) and,
; if this is an 'extended' NAM block, fill in the individual filespec
; element fields.
;
; Note:	This concatenated name string is guaranteed to have the "." and ";"
;	delimiters present, and it may simply be ".;" if all elements are null.
;

COPY_NAME:				;
	CMPB	NAM$B_BLN(R7),#NAM$C_BLN; Is this an extended NAM block?
	BLSSU	10$			; Branch if not
	MOVQ	FWA$Q_NAME(R10),R4	; Get descriptor of name-type-ver string
					;  that will be copied to user buffer
	CMPB	#^A/"/,(R5)		; is the 1st character a quote?
	BNEQ	5$			; if neq no, continue

;
; Since the first character of the string is a quote we cannot simply scan
; for a . to find the end of the name.  We must instead look for the last
; quote in the string, and assume that that ends the name field.
;

	MOVQ	R4,R0			; copy descriptor of string
	ADDL2	R0,R1			; point past last char of string

3$:	CMPB	#^A/"/,-(R1)		; pick of next char from end
	BNEQ	3$			; if neq its not a quote, yet
	INCL	R1			; readjust address for later code
	SUBL3	R5,R1,R2		; calc length passed over in R2
	SUBL2	R2,R0			; calc lenght left
	BRB	6$			; continue like we found .

5$:	LOCC	#^A/./,R4,(R5)		; Find dot delimiter
	SUBL3	R5,R1,R2		; Compute NAME length
6$:	MOVL	R3,NAM$L_NAME(R7)	; Fill in NAME address field
	MOVB	R2,NAM$B_NAME(R7)	; Fill in NAME length field
	MOVQ	R0,R4			; Get descriptor of type-ver string
	LOCC	#^A/;/,R4,(R5)		; Find semi-colon delimiter
	ADDL3	R3,R2,NAM$L_TYPE(R7)	; Compute and fill in TYPE address field
	SUBL3	R5,R1,R2		; Compute TYPE length
	MOVB	R2,NAM$B_TYPE(R7)	; Fill in TYPE length field
	ADDL3	NAM$L_TYPE(R7),R2,-	; Compute and fill in VER address field
		NAM$L_VER(R7)		;
	MOVB	R0,NAM$B_VER(R7)	; Fill in VER length field
10$:	MOVAQ	FWA$Q_NAME(R10),R6	; Get address of descriptor of name
	BSBB	MOVE_NEXT		;  string and append it to user buffer
EXIT_SUC:				;
	RMSSUC				; Declare success
EXIT_ERR:				;
	POPR	#^M<R8,R11>		; Restore registers
	RSB				; Exit to caller

;
; User buffer is not writeable.
;

ERRSA:	MOVZWL	(AP),R0			; Get error code
	BRB	EXIT_ERR		; And take exit path

;++
; Copy node spec list to the user buffer and optionally mask out the
; password string in each node spec (if present). Also return the remote
; file system type to the user.
;
;	Inputs:
;
;	R3	Next user buffer address
;	R7	NAM block address
;	R9	IFAB address
;	R10	FWA address
;
;	Outputs:
;
;	R0-R2	Destroyed
;	R3	Next user buffer address (updated)
;	R4-R6	Destroyed
;	R11	Destroyed
;
;--

COPY_NODE:				;
	$PSECT_BR	NL$NETWORK	;

;+
; First return the remote file system type in the NAM block.
;
; Note:	The information is available only after FAL has been accessed. Thus
;	the information is valid only when returning a resultant name string.
;-

	MOVL	IFB$L_NWA_PTR(R9),R2	; Get address of NWA
	MOVB	NWA$B_FILESYS(R2),-	; Copy remote file system type stored
		NAM$B_RFS(R7)		;  in NWA to NAM block

;
; Now copy node spec list to the user buffer.
;

	CLRL	R11			; Zero loop counter
10$:	MOVAQ	FWA$Q_NODE1(R10)[R11],R6; Get address of next node spec desc
	BBC	#V_ACS,2(R6),20$	; Branch if this node spec has
					;  no access control string
					;  (flags word from NXTFLD is stored
					;  in bytes 2-3 of descriptor)
	BBC	#NAM$V_PWD,-		; Branch if password is to be
		NAM$B_NOP(R7),30$	;  masked out of access control string
20$:	BSBW	MOVE_NEXT		; Move this node spec string
	BRW	80$			;  to user buffer (unaltered)

;+
; The node spec string contains an embedded access control string, i.e.,
; the string is guaranteed to be of the form:
;
;	nodename"access_control_string"::
;
; Search the node spec string for a password substring and replace it with a
; dummy substring. Then copy the modified node spec string to the user buffer.
;
; Find delimiter before password (either space or tab).
;-

30$:	LOCC	#^A/"/,(R6),@4(R6)	; Locate start of ACS
	BEQL	20$			; Something is wrong!!
40$:	DECL	R0			; Make <R0,R1> point to next
	INCL	R1			;  character in string
	CMPB	(R1),#SPACE		; Look for space delimiter
	BEQL	50$			; Branch if found
	CMPB	(R1),#HOR_TAB		; Look for horizontal tab delimiter
	BEQL	50$			; Branch if found
	CMPB	(R1),#^A/"/		; Look for end of ACS
	BEQL	20$			; Branch if ACS is of the form:
					;  "" or "username"
	BRB	40$			; End-of-username not yet reached

;
; Delimiter before password has been found.
;

50$:	DECL	R0			; Make <R0,R1> point to possible
	INCL	R1			;  start of password string
	CMPB	(R1),#SPACE		; Skip over multiple spaces
	BEQL	50$			; "
	CMPB	(R1),#HOR_TAB		; Skip over multiple tabs
	BEQL	50$			; "

;
; Set-up three descriptors that will describe the modified node spec string.
;

	MOVL	IFB$L_NWA_PTR(R9),R2	; Get address of NWA
	MOVAB	NWA$T_TEMP(R2),R2	; Get address of scratch buffer
	MOVQ	(R6),(R2)		; 1st descriptor describes node name
	SUBL2	R0,(R2)			;  string up to password
	MOVZBL	#8,8(R2)		; 2nd descriptor describes dummy
	MOVAB	24(R2),12(R2)		;  string that replaces password
	MOVQ	#^A/password/,24(R2)	; Store dummy string

;
; Find delimiter after password (either quote, space, or tab).
;

60$:	CMPB	(R1),#^A/"/		; Branch if ACS is of the form:
	BEQL	70$			;  "username password"
	DECL	R0			; Make <R0,R1> point to next
	INCL	R1			;  character in string
	CMPB	(R1),#SPACE		; Branch if ACS is of the form:
	BEQL	70$			;  "username password account"
	CMPB	(R1),#HOR_TAB		; Branch if end-of-password not
	BNEQ	60$			;  yet reached
70$:	MOVQ	R0,16(R2)		; 3rd descriptor describes node
					;  name string after password

;
; Copy node spec string with password masked out.
;

	MOVL	R2,R6			; Copy address of 1st descriptor in set
	MOVL	IFB$L_NWA_PTR(R9),R2	; Get address of NWA
	MOVL	R3,NWA$Q_LNODE+4(R2)	; Save address of returned string
	BSBW	MOVE_NEXT		; Use 1st descriptor
	BSBW	MOVE_NEXT		; Use 2nd descriptor
	BSBW	MOVE_NEXT		; Use 3rd descriptor

;+
; Create special logical name in user mode entered in the process logical name
; table for the node-spec-string-with-password-masked-out with an equivalence
; string that is the merged-unaltered-node-spec string. This is done so that
; the expanded and resultant strings have password masked-out, yet are
; still valid when used as a related file input string.
;-

	MOVL	IFB$L_NWA_PTR(R9),R2	; Get address of NWA
	MOVL	NWA$Q_LNODE+4(R2),R5	; Get address of returned string
	SUBL3	R5,R3,R4		; Build descriptor of node spec string
	SUBL2	#2,R4			;  in <R4,R5>
	CMPB	(R5),#^A/_/		; Remove leading underscore (if present)
	BNEQ	75$			;  before creating special logical name
	DECL	R4			;  of node spec (less double colon)
	INCL	R5			;  with password masked out
75$:	MOVQ	R4,NWA$Q_LNODE(R2)	; Store desc of special logical name
	$CRELOG_S-			; Create the special logical name
		TBLFLG=#LOG$C_PROCESS-	;  Process logical name table
		LOGNAM=NWA$Q_LNODE(R2)-	;  String desc with dummy password
		EQLNAM=FWA$Q_NODE1(R10)[R11]- ;  String desc with real password
		ACMODE=#PSL$C_USER	;  Put in process table in user mode
	BLBC	R0,ERRDME		; Branch on failure
80$:	CMPB	NAM$B_BLN(R7),#NAM$C_BLN; Is this an extended NAM block?
	BLSSU	90$			; Branch if not
	SUBL3	NAM$L_NODE(R7),R3,R1	; Compute NODE length
	MOVB	R1,NAM$B_NODE(R7)	; Fill in NODE length field
90$:	BBS	#FWA$V_REMRESULT,(R10),-; Branch if remote FAL has
		COPY_REMRESULT		;  returned a resultant filespec
	ACBB	FWA$B_SUBNODCNT(R10),-	; Branch if there is another secondary
		#1,R11,10$		;  node spec to process
	BRB	COPY_QUOTED		; Check for quoted string
ERRDME:	RMSERR	DME			; Declare error
	BRW	EXIT_ERR		; Branch aid

;++
; Copy the quoted string to the user buffer and optionally mask out
; /netacp_string (if present).
;--

COPY_QUOTED:				;
	BBS	#FWA$V_QUOTED,(R10),10$	; Branch if quoted string follows
					;  node name string
	BRW	COPY_DEVICE		; Rejoin mainline
10$:	CMPB	NAM$B_BLN(R7),#NAM$C_BLN; Is this an extended NAM block
	BLSSU	20$			; Branch if not
	MOVL	R3,NAM$L_NAME(R7)	; Fill in NAME address field
20$:	MOVAQ	FWA$Q_QUOTED(R10),R6	; Get quoted string descriptor address
	BBC	#FWA$V_NETSTR,(R10),30$	; Branch if /netacp_string
					;  was not present in quoted string
	BBS	#NAM$V_ROD,-		; Branch if /netacp_string is not
		NAM$B_NOP(R7),30$	;  to be masked out of quoted string

;
; The quoted string contains an embedded /netacp_string. Replace it with a
; dummy string and copy the modified quoted string to the user buffer.
; Set-up two descriptors that will describe the modified quoted string.
;

	MOVL	IFB$L_NWA_PTR(R9),R0	; Get address of NWA
	MOVZBL	NWA$B_NETSTRSIZ(R0),R1	; Get length of /netacp_string"
	MOVAB	NWA$T_TEMP(R0),R2	; Get address of scratch buffer
	MOVQ	(R6),(R2)		; 1st descriptor describes quoted
	SUBL2	R1,(R2)			;  string up to slash
	MOVZBL	#8,8(R2)		; 2nd descriptor describes dummy
	MOVAB	16(R2),12(R2)		;  string that replaces /netacp_string"
	MOVQ	#^A\/opdata"\,16(R2)	; Store dummy string

;
; Copy quoted string with /netacp_string masked out.
;

	MOVL	R2,R6			; Copy descriptor set address
	BSBW	MOVE_NEXT		; Use 1st descriptor
					; Finish-up with 2nd descriptor
30$:	BSBW	MOVE_NEXT		; Copy quoted string
	CMPB	NAM$B_BLN(R7),#NAM$C_BLN; Is this an extended NAM block?
	BLSSU	40$			; Branch if not
	SUBL3	NAM$L_NAME(R7),R3,R1	; Compute NAME length
	MOVB	R1,NAM$B_NAME(R7)	; Fill in NAME length field
40$:	BRW	EXIT_SUC		; Rejoin mainline

;++
; Copy resultant string returned by remote FAL (which does not contain the
; leading node spec) to the user buffer.
;
; Note:	This resultant string is described by the quoted string descriptor.
;
; Note:	If the user quoted the filespec and entered only a primary node spec,
;	then the resultant string returned by FAL is quoted and copied to the
;	user buffer, because the quotes were removed by NT$GET_FILESPEC when
;	building the filespec to send to FAL, thus causing FAL to return a
;	resultant name string without quotes!
;--

COPY_REMRESULT:				;
	MOVAQ	FWA$Q_QUOTED(R10),R6	; Get result string descriptor address
	BBC	#FWA$V_QUOTED,(R10),10$	; Branch if user did not enclose
					;  filespec in quotes
	TSTB	FWA$B_SUBNODCNT(R10)	; Branch if there is more than one
	BNEQ	10$			;  node spec in node spec list
	MOVB	#^A/"/,R0		; Add leading quote to resultant
	BSBW	MOVE_CHAR		;  string
	BSBW	MOVE_NEXT		; Copy the returned resultant string
	MOVB	#^A/"/,R0		; Add trailing quote to resultant
	BSBW	MOVE_CHAR		;  string
	BRB	20$			;
10$:	BSBW	MOVE_NEXT		; Copy the returned resultant string
20$:	CMPB	NAM$B_BLN(R7),#NAM$C_BLN; Is this an extended NAM block?
	BGEQU	PARSE_REMRESULT		; Go parse the resultant name string
	BRW	EXIT_SUC		; Rejoin mainline

;++
; The resultant name string returned by FAL has not been parsed by RMS, so
; there will not be FWA descriptors of the various filespec elements setup.
; Therefore, hand-parse the string and fill in the extended NAM block fields.
;
; Note:	FWA$Q_QUOTED is used to describe the resultant string returned by FAL.
;	This does NOT imply that FAL has returned a quoted string.
;
; Note also that this code will not work if remote nodes ever return 
; a quoted file name string, e.g. an ANSI-"a" filespec.  Since magtape
; access is not allowed over the network this is not currently a problem.
;--

PARSE_REMRESULT:			;
	MOVL	NAM$L_NODE(R7),R5	; Get address of resultant name string
					;  already copied to user buffer
	MOVZBL	(R8),R6			; Get length of resultant name string
					;  in user buffer (size of first node
					;  name + size of FAL's returned string)

;
; Reparse the nodespec list, as the resultant string returned by FAL may have
; additional node names to contribute to the nodespec list.
;

REM_NODE:				;
	MOVW	#^A/::/,-(SP)		; Setup for MATCHC instruction
10$:	MATCHC	#2,(SP),R6,(R5)		; Now find the next "::"
	BNEQ	20$			; Branch if no more nodes
	MOVL	R3,R5			; Save the address
	MOVL	R2,R6			; Save the # of remaining bytes
	CMPB	#^A/"/,(R5)		; Do we have a quoted string?
	BNEQ	10$			; Branch if not; look for another node
20$:	SUBL3	NAM$L_NODE(R7),R5,R4	; Compute NODE length
	MOVB	R4,NAM$B_NODE(R7)	; Fill in NODE length field
	TSTW	(SP)+			; Pop the colons to adjust the stack
REM_QUOTED:				;
	CMPB	#^A/"/,(R5)		; Do we have a quoted string?
	BNEQ	REM_DEV			; Branch if not
	MOVL	R5,NAM$L_NAME(R7)	; Fill in NAME address field
	MOVB	R6,NAM$B_NAME(R7)	; Fill in NAME length field
	BRB	SUC			; All done
REM_DEV:				;
	LOCC	#^A/:/,R6,(R5)		; Find single colon device delimiter
	BEQL	REM_DIR			; Branch if no device seen
	MOVL	R5,NAM$L_DEV(R7)	; Fill in DEV address field
	INCL	R1			; Step past the colon
	SUBL3	R5,R1,R4		; Compute DEV length
	MOVB	R4,NAM$B_DEV(R7)	; Fill in DEV length field
	MOVL	R1,R5			; Move pointer to next field
	SUBL2	R4,R6			; Compute remaining length
	BEQL	SUC			; Branch if end of string
REM_DIR:				;
	LOCC	#^A/]/,R6,(R5)		; Look for closing square bracket
	BNEQ	10$			; Branch if directory found
	LOCC	#^A/>/,R6,(R5)		; Look for closing angle bracket
	BEQL	REM_NAME		; Branch if no directory found
10$:	MOVL	R5,NAM$L_DIR(R7)	; Fill in DIR address field
	INCL	R1			; Step past the bracket delimiter
	SUBL3	R5,R1,R4		; Compute DIR length
	MOVB	R4,NAM$B_DIR(R7)	; Fill in DIR length field
	MOVL	R1,R5			; Bump pointer to next field
	SUBL2	R4,R6			; Compute remaining length
	BEQL	SUC			; Branch if end of string
REM_NAME:				;
	LOCC	#^A/./,R6,(R5)		; Find dot delimiter
	MOVL	R5,NAM$L_NAME(R7)	; Fill in NAME address field
	SUBL3	R5,R1,R4		; Compute NAME length
	MOVB	R4,NAM$B_NAME(R7)	; Fill in NAME length field
	MOVL	R1,R5			; Bump pointer to next field
	SUBL2	R4,R6			; Compute remaining length
	BEQL	SUC			; Branch if end of string
REM_TYPE:				;
	LOCC	#^A/;/,R6,(R5)		; Look for semi-colon version delimiter
	BNEQ	10$			; Branch if found
	DECL	R6			; Skip past leading dot!
	LOCC	#^A/./,R6,1(R5)		; Look for dot version delimiter
10$:	MOVL	R5,NAM$L_TYPE(R7)	; Fill in TYPE address field
	SUBL3	R5,R1,R4		; Compute TYPE length
	MOVB	R4,NAM$B_TYPE(R7)	; Fill in TYPE length field
REM_VER:				;
	MOVB	R0,NAM$B_VER(R7)	; Fill in VER length field
	BEQL	SUC			; Branch if end of string
	MOVL	R1,NAM$L_VER(R7)	; Fill in VER address field
SUC:	BRW	EXIT_SUC		; Rejoin mainline
	$PSECT_RESTORE			;

;++
; This routine moves a field to the expanded or resultant string buffer.
;
; Update ESL (or RSL) count while checking for overflow, and if so, exit
; with ESS (or RSS) error.
;
; Inputs:
;
;	R3	Address of output buffer
;	R6	Address of descriptor of input string
;	R8	ESL (or RSL) address in NAM block
;	AP	Address of expanded or resultant string argument list
;
; Outputs:
;
;	R0-R2	Destroyed
;	R3	Address following string in the output buffer
;	R4-R5	Destroyed
;	R6	R6 on input + 8
;	R8,AP	Unchanged
;
;--

MOVE_NEXT:				;
	ADDB2	(R6),(R8)		; Count the string
	CMPB	(R8),-1(R8)		; Does it fit?
	BGTRU	POPPC			; Branch if not
	MOVL	(R6)+,R0		; Get length of string
	MOVC3	R0,@(R6)+,(R3)		; Move field
	RSB				;

;++
; This routine moves the character in R0 to the expanded or resultant string
; while checking for overflow.
;--

MOVE_CHAR:				;
	INCB	(R8)			; Count character
	CMPB	(R8),-1(R8)		; Does it fit?
	BGTRU	POPPC			; Branch if not
	MOVB	R0,(R3)+		; Move in the byte
	RSB				;

;+
; Field will overflow user (expanded or resultant string) buffer.
; Return ESS or RSS error.
;-

POPPC:	POPR	#^M<R0>			; Pop return PC
	MOVB	-1(R8),(R8)		; Make string length = buffer length

;
; User buffer is too small.
;

ERRSS:	TSTW	(AP)+			; Move to ESS or RSS error code
	BRW	ERRSA			; Branch aid

	.END				; End of module
