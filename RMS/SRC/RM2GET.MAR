	$BEGIN	RM2GET,032,$RMS2,<RELATIVE SPECIFIC GET AND FIND>

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
; Facility: rms32
;
; Abstract:
;		this module provides relative file organization-
;		specific processing for the $get and $find functions.
;
; Environment:
;		star processor running starlet exec.
;
; Author:	 L F Laverdure,	 creation date: 4-NOV-1977
;
; Modified By:
;
;	V02-032	RAS0063		Ron Schaefer		29-Jan-1982
;		Correct probes of the user's key and record buffers.
;
;	V02-031	CDS0002		C Saether		15-Dec-1981
;		Load R4 with CURBDB at SETR7 point such that it reflects
;		the fact that some errors from RM$LOCK will leave the
;		current bucket not accessed.
;
;	V02-030	CDS0001		C Saether		10-Dec-1981
;		Fix broken branch.
;
;	V02-029	KPL0001		Peter Lieberwirth	 9-Jul-1981
;		Add support for new record locking functions: lock for READ,
;		and WAIT on record lock conflict.  WAIT requires reaccessing
;		bucket after successful wait for record lock.
;
;		Also clean up some commentary that was incorrectly reformatted.
;
;	V02-028	CDS0075		C D Saether	28-Aug-1980	16:20
;		Make check for MRS correctly with VFC format records.
;
;	V027	REFORMAT	Ken Henderson	30-JUL-1980	6:41
;		the code was reformatted
;
;	V026	CDS0074		C D Saether	20-JAN-1980	20:47
;		correct record locking errors.  on random operation
;		do not release lock if same as current record.
;
;	V025	CDS0040		C Saether	10-OCT-1979	16:00
;		further fixes relevant to v023
;
;	V024	JAK0020		J A Krycka	11-SEP-1979	10:00
;		remove network code.
;
;	v023	CDS0023		C Saether	27-JUL-1979	2:10
;		add support for sharing on seq files with fix length records
;		take out knowledge of relative control byte where appropriate
;		remove refs to ifb$w_bks_recs, return and accept rfa for seq
;		file in vbn, offset form as opposed to rec #
;
;	V022	RAN0003		R A Newell	21-DEC-1978	9:55
;		file sharing code enhancements.
;
; Revision History:
;
;	L F Laverdure,      10-OCT-1978  14:16	; unlock error on manual lock
;--
;


	.SBTTL	DECLARATIONS

;
; Include Files:
;

;
; Macros:
;

	$FRBDEF				; file resource block definitions
	$IRBDEF
	$IFBDEF
	$RABDEF
	$FABDEF
	$DLCDEF
	$BDBDEF
	$CSHDEF
	$RMSDEF

;
; Equated Symbols:
;

	ROP=RAB$L_ROP*8			; bit offset to rop

;
; Own Storage:
;


	.SBTTL	RM$GET2/RM$FIND2 - REL. $GET & $FIND

;++
; RM$CLN2_PUT
; RM$CLN2_UPD
; RM$CLN2_DEL
; RM$GET2
; RM$RLS2
; RM$FIND2
;
; this module performs the following functions:
;
;	1. common $get/$find setup
;	2. accesses the bucket, locks the record if necessary, and
;	   for get, copies the record to the user buffer if move mode,
;	   setting the various rab fields as required.
;	3. set "last-operation-was-a-find" and nrp context
;
;
; Calling sequence:
;
;	entered via case branch from rms$get
;	or rms$find at rm$get2 or rm$find2 respectively.
;
;	exit is to user via rm$exrms.
;
;
; Input Parameters:
;
;	r11	impure area address
;	r10	ifab address
;	r9	irab address
;	r8	rab address
;
;
; Implicit Inputs:
;
;	the contents of the rab and related irab and ifab.
;	in particular, irb$v_find must be set if doing $find, else clear.
;
; Output Parameters:
;
;	r7 - r1		destroyed
;	r0		status
;
;
; Implicit Outputs:
;
;	various fields of the rab are filled in to reflect the status of
;	the operation (see functional spec for details).
;
;	the irab is similarly updated.
;
;
; Completion Codes:
;
;	standard rms (see functional spec).
;
; Side Effects:
;
;	none
;--


	.SBTTL	CLEANUP CODE

;
;  code to clean up on errors (note: this is not the entry point to rm$get2)
;
;  there are various entry points for the cleanup depending upon the function
;  being executed.  zeroes the rsz, bkt, and rfa fields of the rab, unlocks
;  the rp and resets various irab flags, releases the bucket, and exits rms.
;
;  inputs:
;	r7	status code
;	r4	bdb address or 0 if none
;

CLEANUP:
					; entry point for $get cleanup
	$PSECT_BR	L$RMS2
CLEAN1:	CLRW	RAB$W_RSZ(R8)		; indicate no record

;
;  entry point for $find and $put
;

RM$CLN2_PUT::
	ASSUME	RAB$C_SEQ EQ 0
	TSTB	RAB$B_RAC(R8)		; seq. access?
	BNEQ	RM$CLN2_UPD		; branch if not
	CLRL	RAB$L_BKT(R8)		; clear the record #

;
;  entry point for $update
;

RM$CLN2_UPD::
	CLRL	RAB$W_RFA(R8)		; zero the rfa
	CLRW	RAB$W_RFA+4(R8)		;   "

;
;  entry point for $delete
;

RM$CLN2_DEL::
	BBCC	#IRB$V_UNLOCK_RP,(R9),5$; don't unlock if manual lock
	MOVL	IRB$L_RP(R9),R1		; get rp
	BEQL	10$			; branch if none
	CLRL	R2			; high order lock value
	BSBW	RM$UNLOCK		; unlock record if locked (ignore error)
5$:	CLRL	IRB$L_RP(R9)		; show no current record
10$:	CSB	#IRB$V_FIND_LAST,(R9)	; clear find last
	BRW	RM$RLS2			; go release bucket
	$PSECT_RESTORE

	.SBTTL	$GET CODE

;
;  entry point for relative-specific get
;

RM$GET2::
	$TSTPT	GET2
	BSBW	GETREC2			; go access bucket
	BSBW	GETFIND2		; go access record
	BSBW	GETLOCK2		; lock the record, if necessary
NTRETG:	BLBC	R7,CLEANUP		; get out on error
	CSB	#IRB$V_FIND_LAST,(R9)	; clear find last flag
	CMPW	R7,#RMS$_OK_RNF&^XFFFF	; was status = record not found?
	BEQL	NULL_REC		; branch if yes

;
;  set the rab$w_rsz field based upon the record format
;

	CMPB	IFB$B_RFMORG(R10),#FAB$C_FIX ; rfm=fix?
	BEQL	RSZFIX			; branch if yes
	MOVZWL	(R5)+,R6		; set variable record length
	CMPB	IFB$B_RFMORG(R10), #FAB$C_VFC ; VFC record format?
	BEQL	VFCREC			; branch if vfc
	CMPW	R6,IFB$W_MRS(R10)	; size within range?
	BLEQU	CHKLOC			; size ok, br and continue
	BRB	ERRIRC			; size illegal, br to error

;
;  VFC record format.
;
;  Adjust record size for fixed header size. Check against MRS to see if legal.
;  Move the header to the record header buffer.
;

VFCREC:	$PSECT_BR	L$RMS2
	MOVZBL	IFB$B_FSZ(R10),R0	; pick up header size
	SUBW2	R0,R6			; adjust record length
	CMPW	R6, IFB$W_MRS(R10)	; record size within bounds?
	BGTRU	ERRIRC1			; gtru nope.  report error.
	MOVL	RAB$L_RHB(R8),R1	; get rhb address
	BEQL	10$			; and branch if none
	IFNOWRT	R0,(R1),ERRRHB,IRB$B_MODE(R9); branch if not writable
	PUSHL	R4			; save bdb address
	MOVC3	R0,(R5),(R1)		; move the record header
	POPR	#^M<R4>			; restore bdb address
	MOVL	R1,R5			; update record buffer addr
	BRB	20$
10$:	ADDL2	R0,R5			; skip unwanted header
20$:	BRW	CHKLOC			; go pick up main sequence
	$PSECT_RESTORE


;
;  status from getfind2 was ok_rnf.
;  this implies user has specified read of a non-existent record.
;

NULL_REC:
	$PSECT_BR	L$RMS2
	CLRW	R6			; show zero len
	CMPW	IFB$B_RFMORG(R10),#FAB$C_VFC; rfm = vfc?
	BNEQ	20$			; branch if not
	MOVL	RAB$L_RHB(R8),R1	; rhb specified?
	BEQL	20$			; branch if not
	MOVZBL	IFB$B_FSZ(R10),R0	; get header len
	IFNOWRT	R0,(R1),ERRRHB,IRB$B_MODE(R9); branch if not writable
10$:	CLRB	(R1)+			; clear the buffer
	SOBGTR	R0,10$			; loop
20$:	BRW	SETRSZ			; go finish up

;

ERRRHB:	RMSERR	RHB,R7			; bad record header buffer

;
;  note: all errors detected after successfully returning from getfind2
;  must exit thru here to determine whether the current record must be
;  unlocked on errors.  see notes in locking code in getfind2.
;

CLN1BR:
	BLBC	AP,10$			; lbc no special action to
					; unlock rp on error
	SSB	#IRB$V_UNLOCK_RP, (R9)	; make sure record is unlocked
10$:	BRW	CLEAN1			; go clean up
	$PSECT_RESTORE

;
;  handle errors
;

ERRIRC:	$PSECT_BR	L$RMS2
ERRIRC1:
	RMSERR	IRC,R7			; illegal record size in file
	MOVL	RAB$L_BKT(R8),RAB$L_STV(R8); indicate rrn of bad record
	BRB	CLN1BR			; go clean up
	$PSECT_RESTORE

;

ERRUSZ:	$PSECT_BR	L$RMS2
	RMSERR	USZ,R7			; 0 user buffer len
	BRB	CLN1BR			; go clean up
	$PSECT_RESTORE

;

ERRUBF:	$PSECT_BR	L$RMS2
ERRUBF1:
	RMSERR	UBF,R7			; invalid user buffer
	BRB	CLN1BR			; go clean up
	$PSECT_RESTORE


;
;  set record size from mrs for fixed length record format
;

RSZFIX:	MOVW	IFB$W_MRS(R10),R6

;
;  if locate mode asked for and allowable, return pointer to record,
;  else copy record to user buffer.
;

CHKLOC:	BBC	#RAB$V_LOC+ROP,(R8),MOVE_MODE; branch if locate mode not speced
	BBS	#FAB$V_UPD,IFB$B_FAC(R10),MOVE_MODE; or if update accessed
	BBS	#BDB$V_NOLOCATE,BDB$B_FLGS(R4),MOVE_MODE; or if bdb says no
	MOVL	R5,RAB$L_RBF(R8)	; set rbf from record address
	BRB	SETRSZ			; go set record size

;
;  move mode
;
;  check out the user buffer and copy the record.
;

MOVE_MODE:
	MOVZWL	RAB$W_USZ(R8),R0	; get user buffer size
	BEQL	ERRUSZ			; error if none
	CMPW	R0,R6			; usz < rsz?
	BLSSU	ERRRTB			; branch if yes
PROBEB:	MOVAL	@RAB$L_UBF(R8),R3	; get buffer addr
	CMPW	R6,#512			; record greater than 2 pages?
	BGTRU	LONG_PROBE		; branch if yes
	IFNOWRT	R6,(R3),ERRUBF,IRB$B_MODE(R9); branch if ubf not writable
MOVREC:	PUSHL	R4			; save bdb address
	MOVL	R3,RAB$L_RBF(R8)	; set record address
	MOVC3	R6,(R5),(R3)		; copy record
	POPR	#^M<R4>			; restore bdb address
SETRSZ:	MOVW	R6,RAB$W_RSZ(R8)	; and set record size
SETNRP:	ADDL3	IRB$L_RP(R9),#1,IRB$L_NRP(R9); set nrp from rp+1

;
;  release access to the bucket.
;  will cause write to occur if dirty and deferred write not set.
;

RM$RLS2::
	TSTL	R4			; is there a bdb?
	BEQL	10$			; branch if none
	CLRL	R3			; no options wanted
	BSBW	RM$RELEASE		; release access to bucket
	BLBC	R7,10$			; branch if already had error
	BLBC	R0,20$			; branch if release failed
10$:	MOVL	R7,R0			; status to r0
20$:	CSB	#IRB$V_FIND,(R9)	; clear 'doing find'
	BRW	RM$EXRMS		; exit rms


;
;  probe writeablity of all pages ( > 1) of user buffer
;

LONG_PROBE:
	$PSECT_BR	L$RMS2
	MOVL	R6,R0			; copy buffer length
	MOVL	R3,R1			; and address
	CVTWL	#-512,R2		; set address constant
10$:	IFNOWRT	R0,(R1),ERRUBF1,IRB$B_MODE(R9); branch if not writable
	SUBL2	R2,R1			; get address next page
	MOVAW	(R0)[R2],R0		; calculate new length
	BGTR	10$			; branch if more to probe
	SUBL2	R2,R0			; final page to probe?
	BGTR	10$			; branch if yes
	BRW	MOVREC			; return to main sequence
	$PSECT_RESTORE

;
;  record too long for user buffer.
;  note error and actual length and adjust count to fill user buffer.
;

ERRRTB:	$PSECT_BR	L$RMS2
	RMSERR	RTB,R7			; show record too big error
	MOVL	R6,RAB$L_STV(R8)	; tell user actual length
	MOVL	R0,R6			; but copy only usz amount
	BRW	PROBEB			; return to main sequence
	$PSECT_RESTORE

	.SBTTL	$FIND CODE

;
;  entry point for $find function.
;

RM$FIND2::
	$TSTPT	FIND2
	BSBB	GETREC2			; go access bucket
	BSBW	GETFIND2		; go access record
	BSBW	GETLOCK2		; lock the record, if necessary
					;
NTRETF:	SSB	#IRB$V_FIND_LAST,(R9)	; set last opr. was a find
	BLBC	R7,10$			; branch on error
	ASSUME	RAB$C_SEQ EQ 0
	TSTB	RAB$B_RAC(R8)		; sequential access?
	BNEQ	RM$RLS2			; branch if not
	BRB	SETNRP			; yes - set nrp
10$:	BRW	RM$CLN2_PUT		; clean up on error

	.SBTTL	GETREC2 - ROUTINE TO LOCATE RECORD IN BUFFER

;++
; RM$GETREC2_PUT
; RM$READBKT2_UPD
; RM$READBKT2
;
;  this routine performs the following functions:
;
;	1.  sets record number from rp, nrp, kbf or rfa depending upon
;	    rab$b_rac and irb$v_find_last
;	2.  if irb$v_unlock_rp set, unlocks record specified by rp on entry
;	    rp will not be unlocked if this is a sequential get following a
;	    find or if this is a random access for the same record as the
;	    current record.  this eliminates a window where the record lock
;	    could be lost accessing the same record.
;	3.  checks for record number valid
;	4.  calculates vbn and offset for record
;	5.  if bucket not past eof, calls rm$cachec to locate the record
;	    (possibly reading it in)
;	6.  calculates address of record in buffer
;
;  calling sequence:
;
;	bsbw	getrec2
;
;	alternate entry at rm$getrec2_put for $put
;
;  input parameters:
;
;	r11	impurea area address
;	r10	ifab address
;	r9	irab address
;	r8	rab address
;	r3	csh$m_lock flag if entry at rm$getrec2_put
;
;  implicit inputs:
;
;	rab$b_rac	record access mode
;	rab$w_rfa	if rac = rfa
;	rab$l_kbf	if rac = key
;	ifb$l_ebk	end of file block
;	ifb$l_mrn	max. record #
;	irb$l_rp	record #
;	irb$l_nrp	if rac = seq and irb$v_find_last = 0
;	irb$v_find	set if doing $find
;
;  output parameters:
;
;	r5		address of record in buffer
;	r4		bdb address, if any, else 0
;	r0		status code
;	rab$l_bkt	rrn of record accessed
;	r1-r3,r6,ap	destroyed
;
;  implicit outputs:
;
;	if error = eof, r2 has the requried hi vbn + 1
;
;  completion codes:
;
;	standard rms.
;
;  side effects:
;
;	process may have stalled waiting for access to the bucket.
;	bucket is left accessed.
;--



;
;  entry point for $get and $find
;

GETREC2:
	$CSHFLAGS	<>		; need read only access to bkt

;
;  alternate entry point for $put
;	(r3 already set to csh$m_lock)
;

RM$GETREC2_PUT::
	CLRL	R4			; zero bdb address

;
; (flag for no bucket accessed)
;
;  get the record # to use based upon rac
;

	ASSUME	RAB$C_SEQ EQ 0
	ASSUME	RAB$C_KEY EQ 1
	ASSUME	RAB$C_RFA EQ 2
	CASE	TYPE=B,SRC=RAB$B_RAC(R8),-
	DISPLIST=<SEQRAC,KEYRAC,RFARAC>	; dispatch to right routine

;
;  fall thru on bad rac value
;

ERRRAC:	$PSECT_BR	L$RMS2
	RMSERR	RAC			; bad rac value
	RSB
	$PSECT_RESTORE

RFAERR:
	SETERR_RSB	RFA		; rfa error (rfa=0)


;
;  subroutine to get number of records per bucket into r0
; outputs:
;	r0 = number of records per bucket
;	r2 = number of blocks per bucket
;

RECS_BKT:
	MOVZBL	IFB$B_BKS(R10),R2	; bucket size into r2
	ASHL	#9,R2,R0		; bytes/bucket now
	DIVW2	IRB$W_CSIZ(R9),R0	; records/bucket
	RSB

;
;  rac = rfa
;
;  set rp from rfa value in rab
;

RFARAC:
	MOVL	RAB$L_RFA0(R8),R5	; assume this really relative
	BEQL	RFAERR			; zero is error
	BBC	#CSH$V_LOCK,R3,ULKRP	; ok if read function
	BRB	ERRRAC			; rfa access error if put

;



;
;  handle key buffer errors
;

ERRKSZ:
	SETERR_RSB	KSZ		; invalid key length

;

ERRKBF:
	SETERR_RSB	KBF		; invalid key buffer

;

ERRKEY:	SETERR_RSB	KEY		; key < or = 0

;

ERRMRN:	$PSECT_BR	L$RMS2
	TSTL	R3			; do cache flags indicate $put
	BNEQ	10$			; branch if yes (err = mrn)
	ASSUME	RAB$C_SEQ EQ 0
	TSTB	RAB$B_RAC(R8)		; sequential access?
	BNEQ	10$			; branch if not
	BRW	ERREOF			; yes - give eof error
10$:	RMSERR	MRN			; key > max. rec. #
	RSB
	$PSECT_RESTORE


;
;  rac = key
;
;  set rp from relative record number in key buffer
;

KEYRAC:	TSTB	RAB$B_KSZ(R8)		; zero key size?
	BEQL	10$			; branch if yes (default)
	CMPB	RAB$B_KSZ(R8),#4	; is it 4?
	BNEQ	ERRKSZ			; branch if not
10$:	MOVAL	@RAB$L_KBF(R8),R5	; get key buffer addr
	IFNORD	#4,(R5),ERRKBF		; branch if not readable
	MOVL	(R5),R5			; pick up record #
	BBS	#RAB$V_KGT+ROP,(R8),KGT	; branch if kgt
	CMPL	IRB$L_RP(R9),R5		; same as current record?
	BNEQ	ULKRP			; nope, continue normally
	BRB	CHKNLK			; check if no lock set
KGT:	INCL	R5			; increment record #
	BRB	ULKRP

;
;  rac = seq
;
;  set rp from nrp unless doing a $get after a $find, in which case
;  the rp is correct as is
;

SEQRAC:
	MOVL	IRB$L_NRP(R9),R5	; assume next record
	BBS	#IRB$V_FIND,(R9),ULKRP	; branch if doing $find
	BBC	#IRB$V_FIND_LAST,(R9),ULKRP; or if last operation not $find
					; (note: this bit will be clear
					; for $put)

	MOVL	IRB$L_RP(R9),R5		; re-get last record
CHKNLK:	BBC	#RAB$V_NLK+ROP,(R8),SETRP; don't unlock current record
					; unless no lock desired on
					; the new record

;
;  if irb$v_unlock_rp set, unlock the current record
;

ULKRP:	BBCC	#IRB$V_UNLOCK_RP,(R9),SETRP; clear unlock flag and branch
					; if auto unlock not req'd.

	MOVL	IRB$L_RP(R9),R1		; get record #
	CLRL	R2			; clear hi word of rec #
	PUSHL	R3			; save cache flags
	BSBW	RM$UNLOCK		; unlock the record
					; (ignore possible error)
	POPR	#^M<R3>			; restore cache flags

;
;  set rp and check for validity
;  note: this is also an alternate entry point to get next record
;  specified by r5 (for sequential get and find after initially positioning
;  to a cell with no record)
;

SETRP:	MOVL	R5,IRB$L_RP(R9)		; save rec # in rp
	BLEQ	ERRKEY			; get out on bad rec #
	MOVL	R5,RAB$W_RFA(R8)	; set rfa from rec #
	CLRW	RAB$W_RFA+4(R8)		; be neat
	BBS	#IFB$V_SEQFIL,(R10),15$	; skip mrn check and don't
					; return bkt if seq file
	ASSUME	RAB$C_SEQ EQ 0
	TSTB	RAB$B_RAC(R8)		; sequential access?
	BNEQ	10$
	MOVL	R5, RAB$L_BKT(R8)	; only if sequential access
10$:	CMPL	IFB$L_MRN(R10),R5	; rec # within bounds?
	BLSS	ERRMRN			; branch if not

;
;  calculate vbn and offset
;

15$:	DECL	R5			; rec # - 1
	BSBW	RECS_BKT		; # records/bucket to r0
					; loads r2 with bucket size

	CLRL	R6			; zero extend dividend
	EDIV	R0,R5,R1,IRB$L_RP_OFF(R9); compute bkt # (in r1)
					; and rec-in-bkt (in rp_off)
	MULW2	IRB$W_CSIZ(R9),IRB$L_RP_OFF(R9); compute offset in bucket
	MULL2	R2,R1			; get relative vbn
	ADDL2	IFB$L_DVBN(R10),R1	; and point past prolog
	TSTL	R4			; already got buffer?
	BNEQ	SETOFF			; branch if yes
	MOVL	R1,IRB$L_CURVBN(R9)	; save vbn for later

RM$READBKT2_UPD::
	ADDL2	R1,R2			; compute end vbn+1
	BSBW	RM$SET_SIFB_ADR		; get sifab/ifab address
	CMPL	R2,IFB$L_EBK(AP)	; past eof?
	BGTRU	ERREOF			; branch if yes


;
;  entry point to read a bucket via rm$cachec
;
;  inputs:
;
;	r8-r11		same as for rm$get2
;	r3		cache flags
;	r1		vbn
;	irb$l_rp_off	offset to record cell in bucket
;
;  outputs:
;
;	r5		record address
;	r4		bdb address (0 on failure)
;	r0		status
;	r1-r3,ap	destroyed
;	irb$l_curbdb	bdb address
;

RM$READBKT2::
	MOVZBL	IFB$B_BKS(R10),R2	; bkt size to r2
	ASHL	#9,R2,R2		; transfer size
	$CACHEC	VBN=R1,SIZE=R2,FLAGS=R3,ERR=ERRCSH; access bkt
	MOVL	R4,IRB$L_CURBDB(R9)	; save bdb address
	ADDL2	IRB$L_RP_OFF(R9),R5	; add in record offset to buffer
					; addr giving record addr

	RSB

;
;  already have bdb.  compute new record buffer address.
;

SETOFF:	ADDL3	IRB$L_RP_OFF(R9),BDB$L_ADDR(R4),R5
	RMSSUC				; show success
	RSB

;
;  handle errors
;

ERREOF:	RMSERR	EOF			; say it's eof
	RSB

;

ERRCSH:	CLRL	R4			; show no bdb accessed
	RSB

	.SBTTL	GETFIND2 - COMMON $GET AND $FIND CODE TO ACCESSRECORD

;++
;
;  this routine performs the following functions:
;
;	1. checks r0 status code and if in error checks for eof.
;	   if eof and rac is not sequential, changes the status to rnf
;	   (record not found) unless the nxr rop bit is set, in which case
;	   it changes the status to ok_rnf.
;
;	2. if r0 does not indicate an error, checks the control byte of the
;	   record to see if record exists.  if not and rac not = seq,
;	   returns rnf (del if rac=rfa) unless the nxr rop bit is set, in which
;	   case it returns either ok_rnf or ok_del.  if rac = seq, non-existent
;	   records are skipped until either a valid record is found or eof
;	   is encountered.
;
;  inputs:
;
;	r0		status code
;	r4		bdb address if one, else 0
;	r5		record cell address
;	r8-r11		same as for rm$get2
;	irb$l_rp	current record #
;
;  outputs:
;
;	r7		status code
;	r5		record cell address + 1 (i.e., past control byte)
;	r0-r3,r6	destroyed
;	ap		if success (low bit set r7), ap = 0 if irb$v_unlock_rp
;			only to determine whether rp needs to be unlocked on
;			errors detected later.  ap = 1 if rp is to be unlocked
;			on later errors regardless of irb$v_unlock_rp
;--


GETFIND2:
	MOVL	R0,R7			; save status code
	BLBC	R0,CHKEOF		; branch on error
	BBS	#IFB$V_SEQFIL,(R10),LOCK; skip this junk if seq file
	ASSUME	FAB$C_SEQ EQ 0
	TSTB	RAB$B_RAC(R8)		; sequential access mode?
	BEQL	SEQACC			; branch if yes
	CMPB	RAB$B_RAC(R8),#RAB$C_KEY; is it key access?
	BNEQ	2$			; branch if not
	BITL	#RAB$M_KGE!RAB$M_KGT,RAB$L_ROP(R8); is kge or kgt set?
	BNEQ	SEQACC			; branch if yes
2$:	CMPB	(R5)+,#DLC$M_REC	; does record exist?
	BEQL	LOCK			; branch if yes
	BITB	#^C <DLC$M_DELETED!DLC$M_REC>,-1(R5); valid bit combination?
	BNEQ	ERRIRC_BR		; branch if not
	BBS	#RAB$V_NXR+ROP,(R8),RTNNXR; branch if user wants the
					; non-existent record
	CMPB	RAB$B_RAC(R8),#RAB$C_RFA; is rac=rfa?
	BNEQ	ERRRNF			; branch if not (err = rnf)
	RMSERR	DEL,R7			; set error code
	RSB				; return
ERRRNF:	RMSERR	RNF,R7
	RSB


RTNNXR:	$PSECT_BR	L$RMS2
	BBC	#DLC$V_DELETED,-1(R5),OK_RNF; branch if record not deleted
	RMSSUC	OK_DEL,R7		; indicate read of deleted record
	BRB	LOCKBR			; and continue
OK_RNF:	RMSSUC	OK_RNF,R7		; indicate read of non-ex rec.
LOCKBR:	BRW	LOCK			; and continue
	$PSECT_RESTORE

;
;  handle sequential access
;  if record deleted or never existed try next record.
;

SEQACC:	CMPB	(R5)+,#DLC$M_REC	; does record exist?
	BEQL	LOCK			; branch if yes
	BITB	#^C <DLC$M_DELETED!DLC$M_REC>,-1(R5); valid bit combination?
	BNEQ	ERRIRC_BR		; branch if not
	ASHL	#1,IRB$W_CSIZ(R9),R0	; get twice the cell size
	ADDW2	IRB$W_RP_OFF(R9),R0	; plus the record offset
					; (i.e. the end of the next rec)
	CMPW	BDB$W_SIZE(R4),R0	; next record in this bkt?
	BGEQU	10$			; branch if yes (omit release)
	CLRL	R3			; no options wanted
	BSBW	RM$RELEASE		; release access to bucket
	CLRL	R4			; show no bdb
	CLRL	IRB$L_CURBDB(R9)	; and no current bdb
10$:	ADDL3	IRB$L_RP(R9),#1,R5	; get next record #
	CLRL	R3			; indicate get
	BSBW	SETRP			; get the record
	BRB	GETFIND2		; and check it out


;
;  got an error.
;
;  if error = eof perform following:
;
;	if rac not = seq, change error code to record not found, unless
;	user is reading non-existent records, in which case set status to
;	ok_rnf and continue
;

CHKEOF:
	$PSECT_BR	L$RMS2
	CMPW	R0,#RMS$_EOF&^XFFFF	; was error = eof?
	BNEQ	GF2XT1			; branch if not
	ASSUME	RAB$C_SEQ EQ 0
	TSTB	RAB$B_RAC(R8)		; rac = seq?
	BEQL	GF2XT1			; branch if yes
	BBS	#RAB$V_NXR+ROP,(R8),OK_RNF1; modify status and continue
	BBS	#IFB$V_SEQFIL,(R10),GF2XT1; eof if really seq file
	RMSERR	RNF,R7			; set code to rec. not found
GF2XT1:	RSB
OK_RNF1:
	BRW	OK_RNF			; extended branch
	$PSECT_RESTORE

;

ERRIRC_BR:
	BRW	ERRIRC1			; extended branch
LOCK:	RSB				; return to caller

	.SBTTL	GETLOCK2 - LOCK RELATIVE RECORD IF NECESSARY

;++
;
; GETLOCK2
;
;  if record locking not required, return to caller.
;  otherwise, if the file is write accessed and the nlk (no lock) rop
;  bit is clear, lock the record.  if the file is either not write accessed or
;  nlk is set,  need merely check that no other user has record locked.
;
;  however, if file is not write-accessed, but user wants to lock for read,
;  allow him to.
;
;  inputs:
;
;	r0		status code
;	r4		bdb address if one, else 0
;	r5		record cell address
;	r8-r11		same as for rm$get2
;	irb$l_rp	current record number
;
;  outputs:
;
;	r7		status code
;	r4		may be loaded with contents of irb$l_curbdb
;
;  side effects
;
;	record locked
;
;--

GETLOCK2:				;
	BBS	#IFB$V_NORECLK,(R10),-	;
		GF2XIT			; branch if no locking
	MOVL	IRB$L_RP(R9),R1		; set rec #
	CLRL	R2			; and high half
	BBS	#RAB$V_NLK+ROP,-	;
		(R8),QLOCK		; branch if lock not wanted
	BBS	#IFB$V_WRTACC,(R10),10$	; branch if write accessed
	BBC	#RAB$V_REA+ROP,-	;
		(R8),QLOCK		; branch if not locking for read
10$:	BSBW	RM$LOCK			; lock record
	BLBC	R0,SETR7		; branch if failure
	TSTL	R4			; is a bucket accessed?
	BEQL	CHKEOF1			; branch if none
	CMPW	R0,#RMS$_OK_WAT&^XFFFF	; did we lock record only after wait?
	BNEQ	CHKULK			; if neq no, don't reaccess bucket
	BSBW	GETREC2			; reaccess bucket that STALL deaccessed
	BSBW	GETFIND2		; and reaccess record
CHKULK:
	CLRL	AP			; initialize
	BBSC	#IRB$V_UNLOCK_RP,-	; if already set, this means
		(R9),10$		; auto locked record not unlockd

	CMPW	R0,#RMS$_OK_ALK&^XFFFF	; was record already locked
	BEQL	CHKR7			; yes, don't unlock automatically
10$:	MOVL	#1,AP			; must unlock record if further
					; errors encountered

	BBS	#RAB$V_ULK+ROP, (R8), CHKR7; leave unlock_rp clear if
					; manual lock
	BBCS	#IRB$V_UNLOCK_RP,(R9),CHKR7; indicate unlock required
					; and branch
;
;  we have just locked a record but there is no bucket accessed.
;  could only be a lock on a non-existent record past eof.  check that
;  record is still past eof to avoid returning a false status of ok_rnf
;  if record has been added to file since we last checked.
;

CHKEOF1:
	$PSECT_BR	L$RMS2
	MOVZBL	IFB$B_BKS(R10),R3	; get # blks/bkt
	ADDL2	IRB$L_CURVBN(R9),R3	; + current vbn
	JSB	RM$SET_SIFB_ADR		; get sifab/ifab address
	CMPL	IFB$L_EBK(AP),R3	; still past eof?
	BGEQU	10$			; branch if not
	BRW	CHKULK			; continue
10$:	BSBW	RM$UNLOCK		; unlock the record
	MOVL	IRB$L_CURVBN(R9),R1	; restore vbn
	$CSHFLAGS	<>		; no need to lock
	BSBW	RM$READBKT2		; go read the bucket
	BSBW	GETFIND2		; and check it out
	BRW	GETLOCK2		; lock it again!
	$PSECT_RESTORE

;
;  either not write accessed or nlk set.
;  need merely check that record is not locked from readers.
;

QLOCK:	BSBW	RM$QUERY_LCK		; check if read ok
	BLBC	R0,SETR7		; branch on error

;
;  update status in r7 with the result of lock or querylock unless r7
;  already has some status other than rms$_normal
;

CHKR7:	CMPW	R7,#RMS$_NORMAL&^XFFFF	; r7 = normal?
	BNEQ	GF2XIT			; branch if not
SETR7:	MOVL	IRB$L_CURBDB(R9), R4	; Reload R4 with curbdb in case
					; a record lock error has left it
					; not accessed.
	MOVL	R0,R7			; update status
GF2XIT:	RSB

	.END
