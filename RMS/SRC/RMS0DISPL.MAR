	$BEGIN	RMS0DISPL,001,F$RMSDISPLAY0,<DISPATCH FOR DISPLAY OPERATION>


;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
; FACILITY: RMS32
;
; ABSTRACT:
;		This module is the highest level control routine
;		to perform the $DISPLAY function.
;
; ENVIRONMENT:
;		STAR processor running STARLET EXEC.
;
; AUTHOR: L F Laverdure,	 CREATION DATE: 19-Jan-1978
;
; MODIFIED BY:
;
;	V03-001	CDS0003		C Saether	30-Mar-1982
;		Correct display of isam xab's so that BIO connect
;		after BRO open works.
;
;	V02-015	CDS0002		C Saether	22-Jan-1982
;		Use RM$ALLOC_BUF routine to allocate/deallocate
;		buffers so that global buffers are handled correctly.
;
;	V02-014	CDS0001		C Saether	29-Aug-1981
;		Remove references to BCB's.  Use BLB's instead.
;
;	V02-013	JAK0063		J A Krycka	28-AUG-1981
;		Add support for network $DISPLAY.
;
;	V02-012	MCN0007		Maria del C. Nasr	12-May-1981
;		Define new symbol for old length of backup date and time XAB.
;
;	V02-011	REFORMAT	Frederick E. Deen, Jr.	    28-Jul-1980
;		This code was reformatted to adhere to RMS standards
;
;	V010	CDS0060		C Saether	6-Dec-1979
;		Fixup relative to V009.  Use RM$BDBALLOC_ALT to allocate
;		buffer, etc., for ISAM.
;
;	V009	CDS0051		C Saether	2-Nov-1979
;		Use RM$ALLOC_BUF to handle allocate buffer for
;		ISAM org only - others don't need it
;
;	V008	DMB0002		 D M Bousquet	13-Feb-1979
;		Modified to always allocate a BDB, BUFFER and BCB (if SHARED)
;		and release everything we allocated at finish
;
;	V007	DMB0001 	D M Bousquet	10-Jan-1979
;		Changed RM$RETBDB to a CACHE and RELEASE CALL
;
;	V006	CDS0001		C D Saether	2-Jan-1979
;		Resolve out of range BRANCH
;
;	V005	RAN0002		R A Newell	6-Sep-1978
;		RMS-32 ISAM modifications.  Processing of summary, key
;		and area xabs
;
;	V004	JAK0001		J A Krycka	27-Aug-1978
;		Revise NETWORK ERROR processing
;
; REVISION HISTORY:
;
;	L F Laverdure,      10-Oct-1978
; 	X0003 -	Deletion of call to CHK_IDLE
;
;	L F Laverdure,      11-Aug-1978
;	X0002 -	 Return real BLK RAT bit for MT
;
;--
;


	.SBTTL	DECLARATIONS

;
; INCLUDE FILES:
;

;
; MACROS:
;

	$IFBDEF
	$IODEF
	$SIFBDEF
	$FRBDEF
	$DEVDEF
	$FIBDEF
	$XABDEF
	$XABALLDEF
	$XABDATDEF
	$XABFHCDEF
	$XABPRODEF
	$XABRDTDEF
	$CSHDEF
	$RLSDEF

;
; EQUATED SYMBOLS:
;

	C_MAXATTR=12			; max. # attribute list entries / QIO

;
; OWN STORAGE:
;
;
;  Argument list for XAB chain processing (allocation XABS only)
;

ALL_XAB_ARGS:
	.BYTE	XAB$C_ALL,XAB$C_ALLLEN,XBC$C_DSPALL
	.BYTE	XAB$C_DAT,XAB$C_DATLEN_V2,XBC$C_OPNDAT	; (temporarily here)
	.BYTE	0

;
;  XAB scan args for other XABS requiring a READ attributes
;

DSP_XAB_ARGS:
	.BYTE	XAB$C_FHC,XAB$C_FHCLEN,XBC$C_DSPFHC
	.BYTE	XAB$C_PRO,XAB$C_PROLEN,XBC$C_OPNPRO
	.BYTE	XAB$C_RDT,XAB$C_RDTLEN,XBC$C_OPNRDT
	.BYTE	0

;
;  XAB scan args for XABS requiring modification after a READ attributes
;

DSP_XAB_ARGS1:
	.BYTE	XAB$C_FHC,XAB$C_FHCLEN,XBC$C_DSPFHC1
	.BYTE	XAB$C_ALL,XAB$C_ALLLEN,XBC$C_DSPALL1
	.BYTE	0

	.SBTTL	RMS$DISPLAY - $DISPLAY ROUTINE

;++
; RMS$DISPLAY - Highest level $DISPLAY processing
;
;  This routine performs the highest level $DISPLAY processing.
;  its functions include:
;
;	1. Common setup
;	2. Check for all streams idle, exiting if not
;	3. Allocate an attribute list work area and process the XAB chain
;	4. Do a READ of the file attributes
;	5. Reprocess the XAB chain for any XABS requiring modification
;	   after the READ attributes.
;	6. Deallocate the attribute list work area
;	7. Exit to the user, generating an AST if requested
;
;
; CALLING SEQUENCE:
;
;	Entered from EXEC as a result of user's calling SYS$DISPLAY
;	(e.g., by using the $DISPLAY macro).
;
; INPUT PARAMETERS:
;
;	AP	User's argument list addr
;
; IMPLICIT INPUTS:
;
;	The contents of the FAB and RELATED XABS.
;
; OUTPUT PARAMETERS:
;
;	R0	STATUS code
;	R1	Destroyed
;
; IMPLICIT OUTPUTS:
;
;	The various fields of the RELATED XABS are filled in.
;
;	A completion AST is queued if so specified by the user.
;
; COMPLETION CODES:
;
;	Standard RMS (see functional spec for list).
;
; SIDE EFFECTS:
;
;	None.
;
;--



;++
;
;  Entry point for $DISPLAY service
;
;--

	$ENTRY	RMS$$DISPLAY
	$TSTPT	DISPLAY
	BSBW	RM$FSET				; do common setup
						;  NOTE: does not return on
						;  error
	BBC	#IFB$V_DAP,(R10),10$		; Check for network operation
	BSBW	NT$DISPLAY			; Get file attributes from
	BRW	RM$EXRMS			;  remote system and exit RMS
10$:	RMSSUC					; anticipate SUCCESS
	BBC	#DEV$V_DIR,-			; err not file structured
		IFB$L_PRIM_DEV(R10),DSPXIT
	CMPB	#IFB$C_IDX,IFB$B_ORGCASE(R10)	; is this ISAM file?
	BNEQ	5$				; no, skip ISAM XABS

	BSBB	ISAM_XABS			; process ISAM XABS
	BLBC	R0,DSPXIT			; exit on error
5$:

;
;  Allocate attribute list work area
;

	MOVZBL	#C_MAXATTR*8,R2			; size for attr. list work area
	BSBW	RM$GETSPC1			; allocate attr. list work area
	BLBC	R0,DSPXIT			; get out on errors
	MOVL	R1,R5				; save attr. list area addr
	PUSHL	R5				;      "

;
;  Process ALLOCATION XAB, if any.
;

	BBC	#IFB$V_SEQFIL,(R10),7$		; really SEQUENTIAL FILE
						;  masquerading as RELATIVE?
	ASSUME	<IFB$C_SEQ + 1> EQ IFB$C_REL
	DECB	IFB$B_ORGCASE(R10)		; don't confuse XAB scan
7$:	MOVAB	ALL_XAB_ARGS,AP			; XAB scan arg. list addr
	BSBW	RM$XAB_SCAN			; process any ALLOCATION XAB
	BLBC	R0,DSPCLN			; get out on error

;++!!! temporary code !!!
;
	TSTL	R4				; any XAB processed?
	BEQL	9$				; branch if none
	BSBW	RM$READ_ATTR			; go read attributes
	BLBC	R0,DSPCLN			; get out on error
	MOVL	(SP),R5				; restore attr list work
						;  area addr
9$:

;
;--!!! end of temporary code !!!
;
;  Process other XABS, if any
;

	MOVAB	DSP_XAB_ARGS,AP			; XAB scan arg. list addr
	BSBW	RM$XAB_SCAN			; process the XABS
	BLBC	R0,DSPCLN			; get out on error
	CMPL	R5,(SP)				; any need to read attributes?
	BEQL	DSPCLN				; branch if not
	BSBB	RM$READ_ATTR			; read file attributes
	BLBC	R0,DSPCLN			; get out on error
	MOVAB	DSP_XAB_ARGS1,AP		; FHC & ALLOCATION XAB scan args
	BSBW	RM$XAB_SCAN			; process 2nd half of all or
						;  FHC XAB

;
;  Deallocate attribute list work area and exit RMS
;

DSPCLN:	POPR	#^M<R4>				; get addr of attr. list work
						;  area
	MOVZBL	#C_MAXATTR*8,R2			; and size
	PUSHL	R0				; save status
	BSBW	RM$RETSPC1			; deallocate work space
	POPR	#^M<R0>				; restore status
	BBC	#IFB$V_SEQFIL,(R10),DSPXIT	; skip if not SEQ file SHARED
	ASSUME	<IFB$C_SEQ + 1> EQ IFB$C_REL
	INCB	IFB$B_ORGCASE(R10)		; back to RELATIVE disguise
DSPXIT:	BRW	RM$EXRMS			; exit RMS

;
;  This does SCAN for INDEXED file org SUMMARY, KEY, and AREA XAB'S
;

ISAM_XABS:
	MOVQ	#1, R5				; 1 block buffer, no lock blb.
	BSBW	RM$ALLOC_BUF			; Allocate buffer, desc.
	BLBC	R0,50$				; out on allocation failure
						;  nothing will have been alloc
20$:	MOVAB	XABOPN_ARGS,AP			; move addr. of XAB table in AP
	BSBW	RM$XAB_SCAN			; scan XAB list
50$:	RSB					; return - this deallocates the
						; buffer and desc allocated on
						; the call to RM$ALLOC_BUF.

	.SBTTL	RM$READ_ATTR - SUBROUTINE TO READ FILE ATTRIBUTES

;++
;  RM$READ_ATTR - Read file attributes
;
;	This routine performs an IO$_ACCESS QIO to READ the file attributes
;
;  INPUTS:
;
;	R11	IMPURE AREA addr
;	R10	IFAB addr
;	R9	IFAB addr
;	R8	FAB addr
;	R5	ATTRIBUTE LIST END addr (a zero longword will be store here)
;	4(SP)	ATTRIBUTE LIST START addr
;
;  OUTPUTS:
;
;	R0		STATUS
;	R1-R5,AP	Destroyed
;
;--

RM$READ_ATTR::
	CLRL	(R5)				; flag end of attr. list

;
;  Allocate and initialize FIB
;

	MOVL	#FIB$C_ACCDATA,R2		; minimum size FIB to allocate
	BSBW	RM$GETSPC1			; allocate FIB
	BLBC	R0,10$				; get out on error
	PUSHL	R1				; build FIB descriptor (addr)
	PUSHL	#FIB$C_ACCDATA			; 	"		(len)
	SSB	#FIB$V_PRSRV_ATR,-		; specify real attributes (blk)
		FIB$L_ACCTL(R1)

;
;  Push P6 and P5 QIO parameters on the STACK and do the ACCESS QIO function
;

	PUSHL	#0				; P6 = 0
	PUSHL	16(SP)				; P5 = attr. list addr
	MOVZBL	#IO$_ACCESS,R0			; I/O function code
	BSBW	RM$FCPFNC_ALT5			; read attributes
	POPR	#^M<R2,R4>			; get FIB size and address
	PUSHL	R0				; save status code
	BSBW	RM$RETSPC1			; deallocate FIB
	POPR	#^M<R0>				; restore status
10$:	RSB


	.END
