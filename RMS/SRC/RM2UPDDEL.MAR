	$BEGIN	RM2UPDDEL,013,$RMS2,<RELATIVE SPECIFIC $UPDATE AND $DELETE>

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
; Facility: rms32
;
; Abstract:
;		This module provides relative file organization
;		specific processing for the $update and $delete functions.
;
;
; Environment:
;		star processor running starlet exec.
;
; Author: L F Laverdure,	 creation date: 8-NOV-1977
;
; Modified By:
;
;	V02-013	KPL0001		Peter Lieberwirth	22-Oct-1981
;		Call alternate lock routines QUERY_HARD and UNLOCK_HARD.
;		This maps an owner-held REA lock into a RNL error to prevent
;		updates or deletes on REA locked records.  (Because REA locks
;		on one record can be held by several streams.)
;
;	V02-012	REFORMAT	Maria del C. Nasr	24-Jul-1980
;
;	v011	CDS0044		C D Saether	31-MAR-1980	16:35
;		fix additional case that v008 missed
;
;	v010	CDS0043		C D Saether	20-OCT-1979	17:00
;		delete on shared seq file (looks like rel) is illegal iop
;
;	V009	JAK0020		J A Krycka	11-SEP-1979	10:00
;		Remove network code.
;
;	v008	CDS0012		 C D Saether	26-JUN-1979	17:50
;		Fix bug that crashes if $delete first operation after $connect.
;
;--
;


	.SBTTL	DECLARATIONS

;
; Include Files:
;

;
; Macros:
;

	$IFBDEF
	$CSHDEF
	$DLCDEF
	$FABDEF
	$RABDEF
	$IRBDEF
	$BDBDEF
	$RMSDEF
	
;
; Equated Symbols:
;

	ROP=RAB$L_ROP*8			; bit offset to rop field

;
; Own Storage:
;


	.SBTTL	RM$UPDATE2 - HIGH LEVEL RELATIVE $UPDATE

;++
; RM$UPDATE2
;
; This routine performs the following functions:
;	1. calls upddlt2 subroutine to access the bucket and do record locking
;	   as required
;	2. calls rm$putupd2 to move the updated record to the buffer
;	3. releases access to the bucket (causing it to be written unless
;	   deferred write was specified at open time) and exits rms
;
; Calling sequence:
;
; entered via case branch from rm$update at rm$update1.
;
; Input Parameters:
;
;	r11	impure area address
;	r10	ifab addr
;	r9	irab addr
;	r8	rab addr
;
; Implicit Inputs:
;
;	the contents of the rab and related irab and ifab.
;
; Output Parameters:
;
;	r7 thru r1	destroyed
;	r0		status
;
; Implicit Outputs:
;
;	various fields of the rab are filled in to reflect
;	the status of the operation (see functional spec
;	for details).
;
;	the irab is similarly updated.
;
; Completion Codes:
;
;	standard rms (see functional spec).
;
; Side Effects:
;
;	none
;
;--


RM$UPDATE2::
	$TSTPT	UPDATE2
	BSBB	UPDDLT2			; access bkt and do locking
	BLBC	R0,CLEAN		; get out on error
	MOVL	R1,RAB$W_RFA(R8)	; set rfa
	CLRW	RAB$W_RFA+4(R8)		; be neat
	CLRL	AP			; flag to rm$putupd2 for $update
	BSBW	RM$PUTUPD2		; go move the record
	BLBC	R7,CLEAN1		; get out on error

RLSXIT:	CLRL	IRB$L_RP(R9)		; say no current record
	BRW	RM$RLS2			; go release bucket

;
;  handle error
;

CLEAN:	MOVL	R0,R7			; get status code to r7
CLEAN1:	BRW	RM$CLN2_UPD		; go clean up

	.SBTTL	RM$DELETE2 - HIGH LEVEL RELATIVE $DELETE

;++
; RM$DELETE2
;
; This routine performs the following functions:
;;	1. calls upddlt2 subroutine to access the bucket and do record locking
;	   as required
;	2. sets the record deleted flag in the control byte and declares the
;	   buffer dirty.
;	3. releases access to the bucket (causing it to be written unless
;	   deferred write was specified at open time) and exits rms
;
; Calling sequence:
;
; entered via case branch from rm$delete at rm$delete1.
;
; Input Parameters:
;
;	r11	impure area address
;	r10	ifab addr
;	r9	irab addr
;	r8	rab addr
;
; Implicit Inputs:
;
;	the contents of the rab and related irab and ifab.
;
; Output Parameters:
;
;	r7 thru r1	destroyed
;	r0		status
;
; Implicit Outputs:
;
;	various fields of the rab are filled in to reflect
;	the status of the operation (see functional spec
;	for details).
;
;	the irab is similarly deleted.
;
; Completion Codes:
;
;	standard rms (see functional spec).
;
; Side Effects:
;
;	none
;
;--


RM$DELETE2::
	$TSTPT	DELETE2
	BBS	#IFB$V_SEQFIL,(R10),ERRIOP; illegal operation for seq fil
	BSBB	UPDDLT2			; access bucket and do locking
	MOVL	R0,R7			; copy status code
	BLBC	R0,CLEAN2		; get out on error
	MOVB	#DLC$M_REC!DLC$M_DELETED,-
		 (R5)			; set delete flag
	BISB2	#BDB$M_VAL!BDB$M_DRT,-
		 BDB$B_FLGS(R4)		; say buffer dirty
	BRB	RLSXIT			; go release bkt and exit

;
;  handle error
;

ERRIOP:	BRW	RM$ERRIOP		; illegal for seq file
CLEAN2:	BRW	RM$CLN2_DEL		; go clean up

	.SBTTL	UPDDLT2 - COMMON $UPDATE/$DELETE RELATIVE ROUTINE

;++
; UPDDLT2
;
;  This routine performs the following functions:
;	1. checks that there is a current record.
;	2. accesses the bucket with lock.
;	3. verifies that the record is locked.
;	4. unlocks the record unless manual locking is specified (rab$v_ulk = 1)
;
;  calling sequence:
;
;	bsbb	upddlt2
;
;  input parameters:
;
;	as for rm$update2
;
;  implicit inputs:
;
;  the fields of the various control blocks, including:
;
;	irb$l_rp	record #
;	irb$l_curvbn	starting vbn for bucket
;	irb$l_rp_off	offset to record in bucket
;	rab$v_ulk	manual locking flag
;
;  output parameters:
;
;	r5		record address in buffer
;	r4		bdb address
;	r1		record #
;	r0		status code
;	r2_r3,ap	destroyed
;
;  implicit outputs:
;
;	none.
;
;  completion codes:
;
;	standard rms.
;
;  side effects:
;
;	may have switched to running at ast level.
;--


UPDDLT2:
	CLRL	R4			; initialize r4
	MOVL	IRB$L_CURVBN(R9),R1	; get current vbn
	BEQL	ERRCUR			; error if none
	$CSHFLAGS	LOCK		; get lock on bucket
	MOVZBL	IFB$B_BKS(R10),R2	; set up for readbkt2
	BSBW	RM$READBKT2_UPD		; access the bucket
	BLBC	R0,50$			; get out on error
	MOVL	IRB$L_RP(R9),R1		; get record #
	BEQL	ERRCUR			; error if none
	BBS	#IFB$V_NORECLK,(R10),50$; branch if no locking
	BBCC	#IRB$V_UNLOCK_RP,(R9),30$; clear auto unlock flag
					; if manual lock, don't unlock

;
;  record locking required.  if record locked via automatic locking
;  (irb$v_unlock_rp = 1), unlock the record, giving an error if it was not
;  locked.  sinced the bucket is still locked, no other user can lock the
;  record before the bucket is released.
;
;  if manual locking (irb$v_unlock_rp = 0) need merely check that the
;  record is locked.
;

	CLRL	R2			; clear high order rp
	BSBW	RM$UNLOCK_HARD		; unlock record
	BLBC	R0,ERRRNL		; branch if not locked
	RSB				; all set
30$:	BSBW	RM$QUERY_HARD		; is record locked?
	CMPW	R0,#RMS$_OK_ALK&^XFFFF	; well is it?
	BNEQ	ERRRNL			; branch if not
	RMSSUC				; vanilla success
50$:	RSB				; all set

;
;  handle errors
;

ERRRNL:	$PSECT_BR	L$RMS2
	MOVL	#RMS$_RNL,RAB$L_STV(R8)	; sub error code of record not
					;  locked, and fall thru to errcur1
ERRCUR1:
	RMSERR	CUR			; no current record
	RSB
	$PSECT_RESTORE


ERRCUR:	BRW	ERRCUR1			; go set error code and return


	.END



;++
; BLDREC - Build record subroutine
;		 This subroutine moves a record from the user record buffer
;		 to the rms i/o buffer, crossing block boundaries as needed.
;
; Calling sequence:
;
;	bsbw	bldrec
;
; Input Parameters:
;
;	r11	impure area address
;	r10	ifab address
;	r9	irab address
;	r8	rab address
;	r7	end of block address + 1
;	r6	# of bytes in record
;	r5	address of record (source)
;	r1	address in rms i/o buffer (destination)
;
; Implicit Inputs:
;
;	the contents of the various structures,
;	in particular, irb$l_curbdb.
;
; Output Parameters:
;
;	r1	address of byte following the moved record
;		in rms i/o buffer
;	r0	status code
;	r2-r6	destroyed
;
; Implicit Outputs:
;
;	bdb$b_flgs - marked dirty
;	irb$l_curbdb - updated if block boundary crossed
;
;	irb$l_nrp_vbn - updated if block boundary crossed
;	irb$w_nrp_off - updated if block boundary crossed
;
; Completion Codes:
;
;	standard rms.
;
; Side Effects:
;
;	if i/o stall occurs will have changed to
;	running at ast level; reprobing any non-rab
;	user address will be required.
;--


BLDREC:
	SUBL3	R1,R7,R0		; get # bytes left in buffer
	CMPL	R0,R6			; < record size?
	BLEQU	20$			; branch if so
	MOVL	R6,R0			; no - just use buffer size
20$:	SUBL2	R0,R6			; adjust remaining count
	MOVC3	R0,(R5),(R1)		; move (partial) record to buffer
	MOVL	IRB$L_CURBDB(R9),R4	; get current bdb
	BISB2	#BDB$M_VAL!BDB$M_DRT,-
		 BDB$B_FLGS(R4)		; say valid & dirty
	TSTL	R6			; done?
	BEQL	40$			; branch if yes
	CMPL	R1,R3			; source = destination?
	BEQL	60$			; branch if yes
	PUSHL	R1			; save source addr
	BSBB	CHNGBF			; move to next buffer
	POPR	#^M<R5>			; restore source addr
	BLBC	R0,50$			; get out on error
	BSBW	RM$PROBEREAD		; reprobe user buffer
	BLBS	R0,BLDREC		; and go again if no error
	RSB

;
; move to buffer is complete
;

40$:	MOVL	R3,R1			; next byte pointer to correct reg.
	RMSSUC
50$:	RSB

;
;  since the source and destination pointers are equal, this is a
;  copy of the existing vfc header.  read the next buffer and simply
;  bump the pointer in the block as the vfc header is definitely not
;  longer than the new buffer.
;

60$:	BSBB	CHNGBF			; read in next block buffer
	ADDL2	R6,R1			; bump buffer addr past rest
					; of header
	RSB


;++
; change buffer/block subroutine
;
; calls rm$nxtblk1 subroutine with r3 set to read in the next block
; unless the block will be completely filled by the record, in which
; case no read is required.
; all other inputs and outputs same as for rm$nxtblk1
;
;--

CHNGBF:	MOVL	#1,R3			; flag no read required
	CMPW	R6,IFB$W_DEVBUFSIZ(R10)	; will block be filled?
	BGEQU	CHNGBF1			; branch if yes
	ADDL3	#1,IRB$L_NRP_VBN(R9),R0	; compute next vbn
	CMPL	R0,IFB$L_EBK(R10)	; past eof?
	BLSSU	10$			; branch if not (must read)
	BGTRU	CHNGBF1			; branch if yes (no read)

;
;  in the eof block  -  check for read required
;

	CMPW	R6,IFB$W_FFB(R10)	; any bytes that won't be overwritten?
	BGEQU	CHNGBF1			; branch if none (no read)
10$:	CLRL	R3			; flag read required
CHNGBF1:
	BRW	RM$NXTBLK1		; go read next block


	.END
