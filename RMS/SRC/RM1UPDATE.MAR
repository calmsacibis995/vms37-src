	$BEGIN	RM1UPDATE,015,$RMS1,<SEQUENTIAL SPECIFIC UPDATE>

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
; Facility: rms32
;
; Abstract:
;		this module provides sequential file organization
;		specific processing for the $update function.
;
;
; Environment:
;		star processor running starlet exec.
;
; Author: l f laverdure,	 creation date: 14-JUL-1977
;
; Modified By:
;
;	V02-015	TMK0034		Todd M. Katz	22-Dec-1981
;		Fix a broken branch by change a BRW RM$PUT_UNIT_REC
;		to a JMP.
;
;	V02-014	RAS0030		Ron Schaefer	25-Aug-1981
;		Fix broken branch caused by _device parsing.
;
;	V02-013	RAS0028		Ron Schaefer	20-Aug-1981
;		Change FAB$C_STM11 to FAB$C_STM.
;
;	V02-012	RAS0016		Ron Schaefer	6-Aug-1981
;		Add stream file support.
;
;	V02-011	REFORMAT	R A Schaefer	25-Jul-1980
;		Reformat the source
;
;	V010	JAK0040		J A Krycka	15-FEB-1980
;		fix bug in network $update.
;
;--
;


	.SBTTL	DECLARATIONS

;
; Include Files:
;

;
; Macros:
;

	$IFBDEF
	$DEVDEF
	$FABDEF
	$RABDEF
	$IRBDEF
	$BDBDEF
	$RMSDEF

;
; Equated Symbols:
;

	LF=10
	CR=13

;
; Own Storage:
;

;
; Stream format default terminators (DFT)
;
STM_FMT_DFT:
	.BYTE	2, CR, LF, 0		; FAB$C_STM
	.BYTE	1, LF,  0, 0		; FAB$C_STMLF
	.BYTE	1, CR,  0, 0		; FAB$C_STMCR


	.SBTTL	RM$UPDATE1 - HIGH LEVEL SEQUENTIAL $UPDATE

;++
; RM$UPDATE1:		high level sequential $update
; RM$UPDATE_ALT:	alternate entry point for put random
;
; this module performs the following functions:
;
;	1.  calls rm$putsetup1 to perform various setups
;	2.  verifies that the file is on disk, that we have a
;	    current record, and that the size is not changing
;	3.  reads the block containing the record if necessary
;	4.  moves the updated record to the block buffer setting
;	    the buffer dirty flag
;
; Calling sequence:
;
;	entered via case branch from rm$update at rm$update1.
;
; Input Parameters:
;
;	r11	impure area address
;	r10	ifab addr
;	r9	irab addr
;	r8	rab addr
;
; Implicit Inputs:
;
;	the contents of the rab and related irab and ifab.
;
; Output Parameters:
;
;	r7 thru r1	destroyed
;	r0		status
;
; Implicit Outputs:
;
;	various fields of the rab are filled in to reflect
;	the status of the operation (see functional spec
;	for details).
;
;	the irab is similarly updated.
;
; Completion Codes:
;
;	standard rms (see functional spec).
;
; Side Effects:
;
;	none
;
;--

RM$UPDATE1::
	$TSTPT	UPDATE1
	BSBW	RM$PUTSETUP1		; perform various update setups
	BLBC	R0,UPDERR
	BBS	#IFB$V_DAP,(R10),NTUPD	; branch if network file access

;
; make various legal operation checks
;

	TSTW	IRB$W_CSIZ(R9)		; was there a current rec
	BEQL	ERRCUR			; branch if no
	CMPB	IFB$B_RFMORG(R10),-	; stream format?
		#FAB$C_STM
	BGEQU	10$			; no size check for stream
	CMPW	R1,IRB$W_CSIZ(R9)	; new size = current rec size?
	BNEQ	ERRRSZ			; branch if not
10$:	BBS	#DEV$V_RND,IFB$L_PRIM_DEV(R10),RM$UPDATE ; branch if disk

;
;  handle errors
;

	$PSECT_BR	L$RMS1
	RMSERR	IOP			; device not disk
	BRB	UPDERR1
	$PSECT_RESTORE


ERRRSZ:	$PSECT_BR	L$RMS1
	RMSERR	RSZ			; record size change attempted
	BRB	UPDERR1
	$PSECT_RESTORE


ERRCUR:	$PSECT_BR	L$RMS1
	RMSERR	CUR			; no current record
	BRB	UPDERR1
	$PSECT_RESTORE


UPDERR_RSTNRP:
	$PSECT_BR	L$RMS1
	MOVQ	(SP)+,IRB$L_NRP_VBN(R9)	; restore nrp
	$PSECT_RESTORE			; and fall thru to upderr1
UPDERR:
	$PSECT_BR	L$RMS1
UPDERR1:
	CLRW	IRB$W_CSIZ(R9)		; indicate no current record
	CLRL	RAB$W_RFA(R8)		; zero rfa
	CLRW	RAB$W_RFA+4(R8)
	JMP	RM$EXRMS
	$PSECT_RESTORE

;
;  perform network update function
;

NTUPD:	$PSECT_BR	NF$NETWORK
	SSB	#IRB$V_UPDATE,(R9)	; mark this as an update function
	JMP	RM$PUT_UNIT_REC		; join network $put code
	$PSECT_RESTORE

;
; set cache read flags approriately based upon the situation
;
; in particular, r3 is set to 1 to indicate no read required
; (i.e., if the record to be updated starts on a block boundary
; and either ends on a block boundary or the end does not fit
; in the buffer), r3 is set to 2 to indicate a short read
; (r2 set to # of blocks to read), else r3 is cleared indicating
; a full buffer is to be read
;

NOFIT:					; all blocks of record don't fit in buffer
	TSTW	IRB$W_RP_OFF(R9)	; is the start offset = 0?
	BEQL	NOREAD			; branch if yes (no read required)
READ_FIRST:
	CLRW	R2			; only the 1st blk needs to be read
	BRB	GETBLK

;
; check for ending offset = 0 and if so omit entire read
;

CHKEND:	TSTW	R0			; is end offset 0?
	BNEQ	GETBLK			; branch if not (must read)
NOREAD:	CMPB	IFB$B_RFMORG(R10),#FAB$C_VFC ; rfm = vfc?
	BEQL	GETBLK			; branch if yes - can't optimize

;
; entry point for put past current eof block
;

NOREAD1:
	MOVL	#1,R3			; flag read not needed
	BRB	GETBLK

;
; entry point from put random
;
; check for past eof block implying no read required
;

RM$UPDATE_ALT::
	CMPL	IRB$L_RP_VBN(R9),IFB$L_EBK(R10) ; past eof block?
	BLSSU	RM$UPDATE		; branch if not
	BGTRU	NOREAD1			; branch if yes
	TSTW	IFB$W_FFB(R10)		; any data in block?
	BEQL	NOREAD1			; branch if none


;
; current register contents:
;
;	r11-r8	normal rms
;	r6	record data length in bytes
;	r5	record data address
;	r1	total record size including overhead bytes
;

RM$UPDATE::

;
; compute # of blocks to be read in if necessary
;

	MOVL	#2,R3			; set flag for read required,
					;  explicit # of blocks
	ADDW3	IRB$W_RP_OFF(R9),R1,R0	; get end offset
	EXTZV	#8,#8,R0,R2		; # blks to r2
	BICW2	#^XFE00,R0		; offset in last block
	CMPB	R2,IRB$B_MBC(R9)	; all blocks fit in buffer?
	BGTRU	NOFIT			; branch if not

;
; all blocks containing the desired record fit in the buffer
; check to see if either starting or ending offset is zero allowing
; for a short or null read
;

	TSTW	IRB$W_RP_OFF(R9)	; start offset = 0?
	BEQL	CHKEND			; branch if yes
	TSTW	R0			; end offset = 0?
	BEQL	READ_FIRST		; branch if yes (read blk 1 only)

;
; beginning and ending blocks are partially full.
; read blocks in before update.
;

GETBLK:

;
; save current nrp and set nrp from rp
;

	ASSUME	IRB$W_NRP_OFF EQ IRB$L_NRP_VBN+4
	MOVQ	IRB$L_NRP_VBN(R9),-(SP)
	MOVQ	IRB$L_RP_VBN(R9),IRB$L_NRP_VBN(R9)

;
; locate buffer, possibly reading in the current block(s) containing
; the record
;

	BSBW	RM$GETBLKNRP
	BLBC	R0,UPDERR_RSTNRP


;
; currrent register contents:
;
;	r11-r8	standard rms
;	r7	end block pointer
;	r6	record data length in bytes
;	r5	record data address in bytes
;	r4	address of current bdb
;	r1	address of current block in buffer
;

	ADDL2	IRB$L_NRP_OFF(R9),R1	; make offset into addr of record
	TSTW	IRB$W_ROVHDSZ(R9)	; any overhead?
	BEQL	MOVREC			; nope
	CMPB	IFB$B_RFMORG(R10),-	; stream record?
		#FAB$C_STM
	BGEQU	MOVREC			; branch if yes

;
; record is either var or vfc
; write out 2 byte binary size field
; (note: it is assumed we always have room for a size field in a block,
; otherwise we would be positioned to the next block already)
;

	MOVW	R6,(R1)+		; store size

	ASSUME	<FAB$C_VFC&1> EQ 1
	ASSUME	<FAB$C_VAR&1> EQ 0

	BLBC	IFB$B_RFMORG(R10),MOVREC ; branch if var rfm

;
; vfc format. store record header
;

	$PSECT_CALL	$RMS1VFC
	MOVQ	R5,-(SP)		; save record addr and size
	MOVZBL	IFB$B_FSZ(R10),R6	; get header length
	ADDW2	R6,-2(R1)		; increase record size
	MOVL	RAB$L_RHB(R8),R5	; get record address
	BNEQ	10$			; branch if specified
	MOVL	R1,R5			; just copy current header
					; (i.e., leaves it unchanged)
10$:	IFNORD	R6,(R5),ERRRHB,IRB$B_MODE(R9) ; probe it
	BSBW	BLDREC			; move vfc header
	MOVQ	(SP)+,R5		; restore user buffer regs
	BLBC	R0,UPDERR_BR		; get out on error
	BSBW	RM$PROBEREAD		; reprobe user buffer
	BLBC	R0,UPDERR_BR
	RSB				; return in line to previous psect

;
; handle errors
;

ERRRHB:	RMSERR	RHB			; bad record header buffer
UPDERR_BR:
	TSTL	(SP)+			; clean stack
	BRW	UPDERR_RSTNRP		; exit update
	$PSECT_RESTORE

;
; now move the data record
;

MOVREC:	BSBB	BLDREC			; move rec to buffer
UPDERR_RSTNRP_1:
	BLBC	R0,UPDERR_RSTNRP	; get out on error

;
; Now append DFT to stream format if necessary
;

	ASSUME	FAB$C_STM GT FAB$C_VFC
	ASSUME	<FAB$C_STM+1> EQ FAB$C_STMLF
	ASSUME	<FAB$C_STMLF+1> EQ FAB$C_STMCR

	MOVZBL	IFB$B_RFMORG(R10),R5	; get format type
	SUBL2	#FAB$C_STM,R5		; normalize type
	BLSSU	10$			; not stream format
	TSTW	IRB$W_ROVHDSZ(R9)	; anything to add?
	BEQL	10$			; nope
	MOVAL	W^STM_FMT_DFT[R5],R5	; point to DFT table
	MOVZBL	(R5)+,R6		; get length
	BSBB	BLDREC			; append the DFT
	BLBC	R0,UPDERR_RSTNRP_1	; quit on failure
10$:
;
; operation now complete.  restore nrp data and return rfa.
;

	CMPL	IRB$L_NRP_VBN(R9),IFB$L_EBK(R10) ; new eof?
	BGEQU	CHKEOF			; branch if maybe
UPDXIT:	MOVQ	(SP)+,IRB$L_NRP_VBN(R9)	; restore nrp
	MOVQ	IRB$L_RP_VBN(R9),RAB$W_RFA(R8)
	CLRW	IRB$W_CSIZ(R9)		; indicate no current rec.
	BRW	RM$EXSUC		; exit with success

;
;  check to see if this was a random put past current eof and if so
;  reset the eof pointer to correspond
;

CHKEOF:	

;
; (note: assumes buff page aligned)
;
	
	ASSUME	FAB$C_VFC GT FAB$C_VAR
	ASSUME	FAB$C_STM GT FAB$C_VFC

	CMPB	IFB$B_RFMORG(R10),-	; stream format?
		#FAB$C_STM
	BGEQU	5$			; don't round for stream
	INCL	R1			; round up offset
	BICW2	#1,R1
5$:	BICW2	#^XFE00,R1		; get offset within block
	BNEQ	10$			; branch if not end of block
	INCL	IRB$L_NRP_VBN(R9)	; bump nrp
10$:	CMPL	IRB$L_NRP_VBN(R9),IFB$L_EBK(R10) ; past eof?
	BGTRU	20$			; branch if yes
	CMPW	R1,IFB$W_FFB(R10)	; offset past eof offset?
	BLEQU	UPDXIT			; branch if not
20$:	MOVL	IRB$L_NRP_VBN(R9),IFB$L_EBK(R10) ; reset eof
	MOVW	R1,IFB$W_FFB(R10)
	SSB	#IFB$V_RW_ATTR,(R10)	; flag attr. rewrite needed
	BRB	UPDXIT



;++
; BLDREC:	build record subroutine
;
; this subroutine moves a record from the user record buffer
; to the rms i/o buffer, crossing block boundaries as needed.
;
; Calling sequence:
;
;	bsbw	bldrec
;
; Input Parameters:
;
;	r11	impure area address
;	r10	ifab address
;	r9	irab address
;	r8	rab address
;	r7	end of block address + 1
;	r6	# of bytes in record
;	r5	address of record (source)
;	r1	address in rms i/o buffer (destination)
;
; Implicit Inputs:
;
;	the contents of the various structures,
;	in particular, irb$l_curbdb.
;
; Output Parameters:
;
;	r1	address of byte following the moved record
;		in rms i/o buffer
;	r0	status code
;	r2-r6	destroyed
;
; Implicit Outputs:
;
;	bdb$b_flgs - marked dirty
;	irb$l_curbdb - updated if block boundary crossed
;
;	irb$l_nrp_vbn - updated if block boundary crossed
;	irb$w_nrp_off - updated if block boundary crossed
;
; Completion Codes:
;
;	standard rms.
;
; Side Effects:
;
;	if i/o stall occurs will have changed to
;	running at ast level; reprobing any non-rab
;	user address will be required.
;--

BLDREC:
	SUBL3	R1,R7,R0		; get # bytes left in buffer
	CMPL	R0,R6			; < record size?
	BLEQU	20$			; branch if so
	MOVL	R6,R0			; no - just use buffer size
20$:	SUBL2	R0,R6			; adjust remaining count
	MOVC3	R0,(R5),(R1)		; move (partial) record to buffer
	MOVL	IRB$L_CURBDB(R9),R4	; get current bdb
	BISB2	#BDB$M_VAL!BDB$M_DRT,BDB$B_FLGS(R4) ; say valid & dirty
	TSTL	R6			; done?
	BEQL	40$			; branch if yes
	CMPL	R1,R3			; source = destination?
	BEQL	60$			; branch if yes
	PUSHL	R1			; save source addr
	BSBB	CHNGBF			; move to next buffer
	POPR	#^M<R5>			; restore source addr
	BLBC	R0,50$			; get out on error
	BSBW	RM$PROBEREAD		; reprobe user buffer
	BLBS	R0,BLDREC		; and go again if no error
	RSB

;
; move to buffer is complete
;

40$:	MOVL	R3,R1			; next byte pointer to correct reg.
	RMSSUC
50$:	RSB

;
; since the source and destination pointers are equal, this is a
; copy of the existing vfc header.  read the next buffer and simply
; bump the pointer in the block as the vfc header is definitely not
; longer than the new buffer.
;

60$:	BSBB	CHNGBF			; read in next block buffer
	ADDL2	R6,R1			; bump buffer addr past rest
					; of header
	RSB

;
; change buffer/block subroutine
;
; calls rm$nxtblk1 subroutine with r3 set to read in the next block
; unless the block will be completely filled by the record, in which
; case no read is required.
; all other inputs and outputs same as for rm$nxtblk1
;

CHNGBF:	MOVL	#1,R3			; flag no read required
	CMPW	R6,IFB$W_DEVBUFSIZ(R10)	; will block be filled?
	BGEQU	CHNGBF1			; branch if yes
	ADDL3	#1,IRB$L_NRP_VBN(R9),R0	; compute next vbn
	CMPL	R0,IFB$L_EBK(R10)	; past eof?
	BLSSU	10$			; branch if not (must read)
	BGTRU	CHNGBF1			; branch if yes (no read)

;
; in the eof block  -  check for read required
;

	CMPW	R6,IFB$W_FFB(R10)	; any bytes that won't be overwritten?
	BGEQU	CHNGBF1			; branch if none (no read)
10$:	CLRL	R3			; flag read required
CHNGBF1:
	BRW	RM$NXTBLK1		; go read next block


	.END
