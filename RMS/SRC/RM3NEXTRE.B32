
MODULE RM3NEXTRE (LANGUAGE (BLISS32) ,
		IDENT = 'V03-001'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:	RMS32 INDEX SEQUENTIAL FILE ORGANIZATION
!
! ABSTRACT:
!	This module contains routines to skip records and skip
!	overhead for key compares
!
!
! ENVIRONMENT:
!
!		VAX/VMS OPERATING SYSTEM
!
!--

!
! AUTHOR:  C. Saether     RECREATION DATE:  2-JUN-1978
!
! Modified by:
!
!	V03-001	TMK0001		Todd M. Katz		 24-Mar-1982
!		Change all references to keybuffer 5 so that the macro
!		KEYBUF_ADDR is used.
!
!	V02-011	KPL0001		Peter Lieberwirth	 1-Mar-1982
!		Change made to RM$COMPARE_REC:
!
!		PLG 3 generic key searches didn't work because the shorter
!		search key was extended with zeroes for full key length
!		compare. Fix is to compare only for length of search key at
!		primary data level.
!
!		Also, add subtitles for each routine.
!
!	V02-010 LJA0004		Laurie Anderson
!		The arguments to CH$COMPARE were reversed.
!
!	V02-009	PSK0001		Paulina S. Knibbe
!		Change RM$NEXT_REC to work for prologue three records, too
!
!	V02-008	MCN0012		Maria del C. Nasr	30-Jul-1981
!		Add support for secondary keys and prologue 3 files in
!		RM$COMPARE_REC.  Eliminate RM$CMP_NULL_REC routine.
!
!	V02-007 MCN0011		Maria del C. Nasr	09-Jun-1981
!		Use key buffer 5 to build the key in RM$COMPARE_REC.
!
!	V02-006	MCN0009		Maria del C. Nasr	12-May-1981
!		Modify RM$COMPARE_REC to be able to handle records with
!		compressed primary keys.
!
!	V02-005	MCN0006		Maria del C. Nasr	23-Mar-1981
!		Modify RM$REC_OVHD to take into account the new size of the
!		record identifier (a word instead of a byte).
!
!	V02-004	REFORMAT	C Saether	01-Aug-1980	21:36
!
!
! REVISION HISTORY:
!
!   Christian Saether, 	9-OCT-78  11:10
!   '0002 - add routines REC_OVHD and CMP_NULL_KEY, modify others to use
! REC_OVHD
!
!   Wendy Koenig, 	24-OCT-78  14:02
!   '0003 - MAKE CHANGES CAUSED BY SHARING CONVENTIONS
!
!**

LIBRARY 'RMSLIB:RMS';

REQUIRE 'RMSSRC:RMSIDXDEF';

!
! define default psects for code
!

PSECT
    CODE = $$RMS3(PSECT_ATTR),
    PLIT = $$RMS3(PSECT_ATTR);

! declare linkage
!

LINKAGE
    L_COMPARE_KEY,
    L_COMPARE_REC,
    L_GETNEXT_REC,
    L_NULLKEY,
    L_REC_OVHD,
    L_RECORD_KEY;

! External routines
!

EXTERNAL ROUTINE
    RM$NULLKEY		: RL$NULLKEY,
    RM$COMPARE_KEY	: RL$COMPARE_KEY,
    RM$RECORD_KEY	: RL$RECORD_KEY;


%SBTTL 'RM$REC_OVHD'
GLOBAL ROUTINE RM$REC_OVHD : RL$REC_OVHD =

!++
!
! FUNCTIONAL DESCRIPTION:
! Routine value is size of record overhead and size of record itself
! is returned in REC_SIZE
!
!
! CALLING SEQUENCE:
!	RM$REC_OVHD()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	REC_SIZE - set to one of the following on input
!		0 - position for primary data level
!		-1 - position for alternate index data level
!		greater than 0 - position for any index level
!	IDX_DFN [ KEYSZ ] - size of key for index levels
!		[IDX$V_REC_COMPR] - record compressed flag
!	REC_ADDR - pointing to control byte of record
!	IFAB [ RFMORG ] - record format field
!	     [IFB$B_PLG_VER] - prologue version
!	     [ LRL ] - record size if fixed length record format
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	REC_SIZE - size of data portion of record
!
! ROUTINE VALUE:
!	size of overhead portion of record
!
! SIDE EFFECTS:
!	NONE
!
!--

    BEGIN

    EXTERNAL REGISTER
	R_REC_SIZE,
	R_REC_ADDR_STR,
	R_IDX_DFN_STR,
	R_IFAB_STR;

    LOCAL
	OVHD_SIZE;

    ! If not prologue 3 file, process as before
    !
    IF .IFAB[IFB$B_PLG_VER] LSSU PLG$C_VER_3
    THEN
	BEGIN

	! pick up pointer size and add pointer size base.
	! NOTE: that data pointer base size
	! and index pointer base plus overhead are equivalent.
	!
	OVHD_SIZE = .REC_ADDR[IRC$V_PTRSZ] + IRC$C_DATPTRBAS;

	IF .REC_SIZE GTR 0	! note that REC_SIZE still represents the input level
	THEN
	    BEGIN
	    REC_SIZE = .IDX_DFN[IDX$B_KEYSZ];
	    RETURN .OVHD_SIZE
	    END;

	! this is either a primary or secondary data level
	!

	IF .REC_ADDR[IRC$V_NOPTRSZ]
	THEN
	    OVHD_SIZE = 0;

	OVHD_SIZE = .OVHD_SIZE + IRC$C_DATOVHDSZ;

	IF .REC_SIZE EQL 0
	THEN
	    BEGIN

	    IF .REC_ADDR[IRC$V_RRV]
	    THEN
		RETURN .OVHD_SIZE;

	    IF .IFAB[IFB$B_RFMORG] EQL FAB$C_FIX
	    THEN
		BEGIN
		REC_SIZE = .IFAB[IFB$W_LRL];
		RETURN .OVHD_SIZE
		END;

	    END;
	
	END
    ELSE
	BEGIN

	! We know is prologue version 3 and primary data level, since this
	! routine will only be called for primary data level in plg 3 files.
	!

	IF .REC_ADDR[IRC$V_NOPTRSZ]
	THEN
	    OVHD_SIZE = 0
	ELSE
	    OVHD_SIZE = .REC_ADDR[IRC$V_PTRSZ] + IRC$C_DATPTRBS3;
	OVHD_SIZE = .OVHD_SIZE + IRC$C_DATOVHSZ3;	! control byte and id

	IF .REC_ADDR[IRC$V_RRV]
	THEN
	    RETURN .OVHD_SIZE;

	IF .IDX_DFN[IDX$B_DATBKTYP] EQLU IDX$C_NCMPNCMP
	  AND .IFAB[IFB$B_RFMORG] EQL FAB$C_FIX
	THEN
	    BEGIN
	    REC_SIZE = .IFAB[IFB$W_LRL];
	    RETURN .OVHD_SIZE;
	    END;
	END;

    ! If we are here then it is a SIDR data level, or variable length primary
    ! data record, or a prologue 3 compressed data record
    !
    OVHD_SIZE = .OVHD_SIZE + .REC_ADDR;		! point to size field
    REC_SIZE = .(.OVHD_SIZE)<0, 16>;
    OVHD_SIZE = .OVHD_SIZE + IRC$C_DATSZFLD;	! skip record size field
    OVHD_SIZE = .OVHD_SIZE - .REC_ADDR;
    RETURN .OVHD_SIZE;

    END;


%SBTTL 'RM$GETNEXT_REC'
GLOBAL ROUTINE RM$GETNEXT_REC : RL$GETNEXT_REC NOVALUE =

!++
!
!    RM$GETNEXT_REC
!
! with REC_ADDR pointing to the control byte of a record, update REC_ADDR
! to point to the first byte beyond the end of the record
!
!
! CALLING SEQUENCE:
!	RM$GETNEXT_REC()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	REC_ADDR - pointing to control byte of record to be skipped
!	IDX_DFN - required by RM$REC_OVHD
!		[ KEYREF ] - to determine if alternate or primary key
!	IFAB - required by RM$REC_OVHD
!	IRAB [ CURBDB ] - used to get BDB to get BKT_ADDR to get bucket level
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	REC_ADDR points to first byte beyond record pointed to on input
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
!--

    BEGIN

    MACRO
	KEYLEN = 0,0,8,0%;

    EXTERNAL REGISTER
	R_REC_ADDR_STR,
	R_IDX_DFN_STR,
	R_IRAB_STR,
	R_IFAB_STR;

    GLOBAL REGISTER
	R_REC_SIZE;

    IF .IFAB [IFB$B_PLG_VER] GEQU PLG$C_VER_3 
	AND (REC_SIZE = .BBLOCK[.BBLOCK[.IRAB[IRB$L_CURBDB], BDB$L_ADDR],
	    BKT$B_LEVEL]) GTR 0
    THEN

	! Prologue three index bucket
	!
	BEGIN

	IF .IDX_DFN [IDX$V_IDX_COMPR]
	THEN

	    ! Compressed keys
	    !
	    REC_ADDR = .REC_ADDR + .REC_ADDR [KEYLEN] + 2

	ELSE

	    ! Non-compressed keys
	    !
	    REC_ADDR = .REC_ADDR + .IDX_DFN [IDX$B_KEYSZ];

	IRAB [IRB$L_REC_COUNT] = .IRAB [IRB$L_REC_COUNT] + 1;
	RETURN;
	END;

    ! Set record size to the bucket level.  If it is equal to zero, then
    ! we are at the data level.
    !
    IF (REC_SIZE = .BBLOCK[.BBLOCK[.IRAB[IRB$L_CURBDB], BDB$L_ADDR],
	    BKT$B_LEVEL]) EQL 0
    THEN

	! If the key of reference is not the primary key, make REC_SIZE
	! negative for input to RM$REC_OVHD to indicate SIDR.
	!
	IF .IDX_DFN[IDX$B_KEYREF] NEQ 0
	THEN
	    REC_SIZE = .REC_SIZE - 1;

    REC_ADDR = .REC_ADDR + RM$REC_OVHD();
    REC_ADDR = .REC_ADDR + .REC_SIZE;
    END;


%SBTTL 'RM$COMPARE_REC'
GLOBAL ROUTINE RM$COMPARE_REC (SRCH_KEY_ADDR, SRCH_KEY_SIZE, LEVEL) :
    RL$COMPARE_REC =

!++
!
! FUNCTIONAL DESCRIPTION:
! This routine compares a given contiguous search key to a data record,
! a SIDR, or an index record.  For prologue 1 and 2 files, there is only
! one method of comparison.  However, for prologue 3 there are various
! depending of the items being compared:
!	- primary key vs data record :  key is extracted and expanded into
!		key buffer 5, and a straight compare is done
!	- secondary key vs data record :  The record is in expanded format
!		and the key in normal format, so do old compare
!	- secondary key vs SIDR :  extract and expand key into key buffer 5,
!		and do a straight compare
!	- any key vs index record : extract and expand key into key buffer 5,
!		and do a straight compare
!
! CALLING SEQUENCE:
!	RM$COMPARE_REC (SRCH_KEY_ADDR,SRCH_KEY_SIZE,LEVEL)
!
! INPUT PARAMETERS:
!	SRCH_KEY_ADDR - address of key string to compare against
!	SRCH_KEY_SIZE - length of key string to compare against
!			NOTE: SRCH_KEY is assumed to be in contiguous bytes
!	LEVEL - the level of this bucket in the index tree
!		LEVEL = -1 means primary data record irregardless of IDX_DFN[ KEYREF ]
!
! IMPLICIT INPUTS:
!	REC_ADDR - pointing to the control byte of the record with key to compare against
!	IDX_DFN - pointing to the index descriptor for this key of reference
!		NOTE: this is not referenced if LEVEL = -1 forcing primary data level comparison
!	IFAB - required by REC_OVHD
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	value of COMPARE_KEY or COMP_ASCII routine
!		0 - data record equal to search key
!	       -1 - data record > search key
!		1 - data record < search key
!
! SIDE EFFECTS:
!	AP is blown
!
!--

    BEGIN

    EXTERNAL REGISTER
	R_IDX_DFN_STR,
	R_IFAB_STR,
	R_IRAB_STR,
	R_REC_ADDR;

    GLOBAL REGISTER
	R_REC_SIZE;

    BUILTIN
	AP;

    AP = 3;		! initialize for data record and search key contiguous

    IF .LEVEL LEQ 0
    THEN

	IF .LEVEL LSS 0
	THEN
	    BEGIN

	    ! make this primary data level compare IDX_DFN has been setup to
	    ! compare against alternate key in UDR
	    !
	    LEVEL = 0;
	    AP = .AP - 1;		! signal non-contiguous data record
	    END
	ELSE

	    IF .IDX_DFN[IDX$B_KEYREF] NEQ 0
	    THEN
		LEVEL = .LEVEL - 1		! signal SIDR data level
	    ELSE
		AP = .AP - 1;		! signal non-contiguous data record

    IF .IFAB[IFB$B_PLG_VER] LSSU PLG$C_VER_3
    THEN
	BEGIN
	REC_SIZE = .LEVEL;
	RETURN RM$COMPARE_KEY ( .REC_ADDR + RM$REC_OVHD(),
				.SRCH_KEY_ADDR,
				.SRCH_KEY_SIZE );
	END;

    ! This is a prologue 3 file.  If AP=3, then we are doing a contiguous
    ! key compare.  REC_ADDR is pointing to an index record or a SIDR.
    ! Extract the key into key buffer 5, and do a straight compare.
    !
    ! (RECORD_KEY extracts the key from the retrieved data or index record and
    ! places it in the indicated key buffer.)
    !

    IF .AP EQL 3
    THEN
	BEGIN
	AP = 1;			! no record overhead / compressed
	RM$RECORD_KEY (KEYBUF_ADDR(5));
	RETURN CH$COMPARE ( .SRCH_KEY_SIZE,
			    .SRCH_KEY_ADDR,
			    .IDX_DFN[IDX$B_KEYSZ],
			    KEYBUF_ADDR(5));
	END;

    ! Otherwise, we have to compare a key against a data record.  If it
    ! is the primary key, we must extract the primary key out of the
    ! data record, and then do a straight compare.
    !
    ! Specify both key sizes as .SRCH_KEY_SIZE so that generic searches
    ! will work.  If IDX$B_KEYSZ is used, a zero-extended search key will
    ! be used, and generic compares will not work.
    !

    IF .IDX_DFN[IDX$B_KEYREF] EQL 0
    THEN
	BEGIN
	AP = 0;			! indicate record has overhead / compressed
	RM$RECORD_KEY (KEYBUF_ADDR(5));
	RETURN CH$COMPARE ( .SRCH_KEY_SIZE,
			    .SRCH_KEY_ADDR,
			    .SRCH_KEY_SIZE,
			    KEYBUF_ADDR(5));
	END
    ELSE
 
	! For secondary keys, we can assume that REC_ADDR points to an
	! expanded record with no overhead, and that the key is in
	! "normal" form.  Do the comparison the "old" way.
	!
	RETURN RM$COMPARE_KEY ( .REC_ADDR,
			    .SRCH_KEY_ADDR,
			    .SRCH_KEY_SIZE );
    END;

END

ELUDOM
