	$BEGIN	NT0OPEN,003,NF$NETWORK,<NETWORK OPEN FILE>


;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; Facility: RMS
;
; Abstract:
;
;	This module communicates with the File Access Listener (FAL) at the
;	remote node to open the specified file.
;
; Environment: VAX/VMS, executive mode
;
; Author: James A. Krycka,	Creation Date:	09-DEC-1977
;
; Modified By:
;
;	V03-003	JAK0074		J A Krycka	12-APR-1982
;		Send appropriate DAP ORG, RFM, and RAT file attributes to
;		non-VMS partners.
;
;	V03-002	JAK0073		J A Krycka	05-APR-1982
;		Continuation of V02-066 to treat stream-embedded as stream-
;		implied.
;
;	V03-001	KRM0047		K R Malik	 5-APR-1982
;		Substitute register for unnec. reference to user KNM field.
;
;	V02-068	JAK0071		J A Krycka	09-FEB-1982
;		Provide partial support for the FAB$V_BRO option to facilitate
;		block I/O file transfers of relative and indexed files from
;		non-VMS nodes.
;
;	V02-067	JAK0070		J A Krycka	31-JAN-1982
;		Fix bug that includes a DISPLAY field in the DAP Access message
;		when talking to a FAL that does not support this field.
;
;	V02-066	JAK0068		J A Krycka	30-DEC-1981
;		Continuation of V02-064 to properly handle stream-implied and
;		stream-embedded files.
;
;	V02-065	JAK0066		J A Krycka	01-OCT-1981
;		Continuation of V02-064.
;
;	V02-064	JAK0064		J A Krycka	28-AUG-1981
;		Track RMS-32 support of stream format files. In particular,
;		disable conversion of stream format files to variable length
;		format files.
;
;	V02-063	JAK0063		J A Krycka	28-AUG-1981
;		Add support for the Revision Date and Time XAB.
;
;	V02-062	JAK0063		J A Krycka	28-AUG-1981
;		Create NT$RECV_EXT_ATT routine from in-line code so that it
;		can be used by NT$CREATE, NT$DISPLAY, and NT$EXTEND routines.
;
;	V02-061	JAK0063		J A Krycka	25-AUG-1981
;		Update symbols to correspond to revised DAPDEF.MDL file.
;
;	V02-060	JAK0058		J A Krycka	02-JUN-1981
;		Move NT$EXCH_CNF and NT$GET_FILESPEC code to a new module
;		named NT0ACCFIL. Also call NT$CRC_INIT where appropriate.
;
;	V02-059	JAK0054		J A Krycka	24-FEB-1981
;		When building the DAP Attributes message, default the FSZ value
;		to 2 if user specifies 0.
;
;	V02-058	JAK0053		J A Krycka	22-JAN-1981
;		Continuation of V02-053.
;
;	V02-057	JAK0052		J A Krycka	08-JAN-1980
;		Modify the assignment of default values to selected fields of
;		the Allocation XAB when the remote FAL returns a DAP Allocation
;		message with the ALQ, AOP, BKZ, or DEQ fields missing. This is
;		in response to a clarification to the DAP specification.
;
;	V02-056	JAK0051		J A Krycka	19-DEC-1980
;		Change applies to code now in NT0ACCFIL.
;
;	V02-055	KRM0003		K R Malik	18-DEC-1980
;		When building the DAP Attributes message, send RFM = VAR if the
;		user specified RFM = UDF (zero value) to avoid this field being
;		rejected by a non-VAX remote FAL.
;
;	V02-054	JAK0049		J A Krycka	17-OCT-1980
;		Conditionally send DEQ field in DAP Attributes message.
;		Track entry point name changes in NT0DAPIO.
;
;	V02-053	JAK0046		J A Krycka	23-JUN-1980
;		If the remote node is RT-11 or TOPS-20, then for $OPEN use zero
;		as the default MRS value in the DAP Attributes message.
;
;	V02-052	JAK0044		J A Krycka	28-APR-1980
;		Change applies to code now in NT0ACCFIL.
;
;	V02-051	REFORMAT	J A Krycka	26-JUL-1980
;
;--

	.SBTTL	DECLARATIONS

;
; Include Files:
;

	$DAPPLGDEF			; Define DAP prologue symbols
	$DAPHDRDEF			; Define DAP message header
	$DAPSSPDEF			; Define DAP system specific field
	$DAPATTDEF			; Define DAP Attributes message
	$DAPACCDEF			; Define DAP Access message
	$DAPCMPDEF			; Define DAP Access Complete message
	$DAPKEYDEF			; Define DAP Key Definition message
	$DAPALLDEF			; Define DAP Allocation message
	$DAPSUMDEF			; Define DAP Summary message
	$DAPTIMDEF			; Define DAP Date and Time message
	$DAPPRODEF			; Define DAP Protection message
	$DAPNAMDEF			; Define DAP Name message
	$FABDEF				; Define File Access Block symbols
	$FWADEF				; Define File Work Area symbols
	$IFBDEF				; Define IFAB symbols
	$NWADEF				; Network Work Area symbols
	$XABDEF				; Define symbols common to all XABs
	$XABALLDEF			; Define Allocation XAB symbols
	$XABDATDEF			; Define Date and Time XAB symbols
	$XABFHCDEF			; Define File Header Char symbols
	$XABKEYDEF			; Define Key Definition XAB symbols
	$XABPRODEF			; Define Protection XAB symbols
	$XABRDTDEF			; Define Revision Date/Time XAB symbols
	$XABSUMDEF			; Define Summary XAB symobls

;
; Macros:
;
;	None
;
; Equated Symbols:
;

	ASSUME	DAP$Q_DCODE_FLG EQ 0
	ASSUME	NWA$Q_FLG EQ 0

;
; Own Storage:
;
;	None
;

	.SBTTL	NT$OPEN - PERFORM NETWORK OPEN FUNCTION

;++
; NT$OPEN - engages in a DAP dialogue with the remote FAL to open the
;	specified sequential, relative, or indexed file.
;
; Calling Sequence:
;
;	BSBW	NT$OPEN
;
; Input Parameters:
;
;	R8	FAB address
;	R9	IFAB address
;	R10	FWA address
;	R11	Impure Area address
;
; Implicit Inputs:
;
;	User FAB
;	DAP$V_FCS
;	DAP$V_STM_ONLY
;	DAP$V_VAXVMS
;	IFB fields
;
; Output Parameters:
;
;	R0	Status code (RMS)
;	R1-R7	Destroyed
;	AP	Destroyed
;
; Implicit Outputs:
;
;	User FAB
;	User ALL, DAT, FHC, KEY, PRO, RDT, and SUM XABs
;	IFB$V_DAP_OPEN
;	IFB fields
;	NWA$V_DAP_STM
;
; Completion Codes:
;
;	Standard RMS completion codes
;
; Side Effects:
;
;	None
;
;--

NT$OPEN::				; Entry point
	$TSTPT	NTOPEN			;

;+
; Exchange DAP Configuration messages with FAL.
;-

	MOVL	IFB$L_NWA_PTR(R9),R7	; Get address of NWA (and DAP)
	BSBW	NT$EXCH_CNF		; Exchange Configuration messages
	BLBS	R0,BUILD_MASK		; Branch on success
FAIL1:	RSB				; Exit with RMS code in R0

;+
; Build display field request mask which will be used in the Access message
; to request that optional DAP messages be returned by FAL.
; For $OPEN, these are the ALL, KEY, PRO, SUM, TIM, and NAM messages.
; (Note that the Attributes message is required which will supply information
; to update both the FAB and FHCXAB.)
;-

BUILD_MASK:				; Build NWA$W_DISPLAY
	CLRL	R6			; Indicate this is not a close operation
	BSBW	NT$SCAN_XABCHN		; Scan user XAB chain and check FAL's
					;  capabilities; request mask put in R2
	BLBC	R0,FAIL1		; Branch on failure to complete scan
	BSBW	NT$SCAN_NAMBLK		; Scan user NAM block and check FAL's
					;  capabilities; update request mask
	BLBC	R0,FAIL1		; Branch on failure to complete scan
	BISW2	#DAP$M_DSP_ATT,R2	; Request main Attributes message
	MOVW	R2,NWA$W_DISPLAY(R7)	; Save request mask

;+
; Build and send DAP Attributes message to partner.
;-

SEND_ATT:				; (required message)
	MOVL	#DAP$K_ATT_MSG,R0	; Get message type value
	BSBW	NT$BUILD_HEAD		; Construct message header

	ASSUME	DAP$K_SEQ EQ FAB$C_SEQ
	ASSUME	DAP$K_REL EQ FAB$C_REL
	ASSUME	DAP$K_IDX EQ FAB$C_IDX

	ASSUME	DAP$K_UDF EQ FAB$C_UDF
	ASSUME	DAP$K_FIX EQ FAB$C_FIX
	ASSUME	DAP$K_VAR EQ FAB$C_VAR
	ASSUME	DAP$K_VFC EQ FAB$C_VFC
	ASSUME	DAP$K_STM EQ FAB$C_STM

	ASSUME	DAP$V_FTN EQ FAB$V_FTN
	ASSUME	DAP$V_CR  EQ FAB$V_CR
	ASSUME	DAP$V_PRN EQ FAB$V_PRN
	ASSUME	DAP$V_BLK EQ FAB$V_BLK

	ASSUME	DAP$K_DATATYP_D EQ DAP$M_IMAGE
	ASSUME	DAP$K_ORG_D EQ DAP$K_SEQ
	ASSUME	DAP$K_RFM_D EQ DAP$K_FIX
	ASSUME	DAP$K_RAT_D EQ DAP$M_EMBEDDED

;
; Construct attriburtes menu mask.
;

	MOVL	#<<DAP$M_MRS>!-		; Always include MRS and FOP fields
		  <DAP$M_FOP1>!-	;  in mask
		0>,R1			;
	BBS	#FAB$V_BIO,-		; Branch if block I/O mode
		FAB$B_FAC(R8),10$	;
	BISL2	#<<DAP$M_DATATYPE>!-	; Add DATATYPE, ORG, RFM, and RAT fields
		  <DAP$M_ORG>!-		;  to mask
		  <DAP$M_RFM>!-		;
		  <DAP$M_RAT>!-		;
		0>,R1			;
	BBC	#DAP$V_VAXVMS,(R7),10$	; Branch if partner is not VAX/VMS
	CMPB	#FAB$C_VFC,FAB$B_RFM(R8); Check for VFC format
	BNEQ	10$			;
	$SETBIT	#DAP$V_FSZ,R1		; Add FSZ field to mask
10$:	TSTW	FAB$W_DEQ(R8)		; Branch if DEQ = 0
	BEQL	20$			;
	$SETBIT	#DAP$V_DEQ1,R1		; Add DEQ field to mask
20$:	MOVL	R1,R6			; Save attributes menu field
	BSBW	NT$CVT_BN4_EXT		; Store ATTMENU as an extensible field

;
; Store rest of fields per attributes menu.
;
; Note the following DAP field defaults:
;	DATATYPE = IMAGE
;	ORG      = SEQ
;	RFM      = FIX
;	RAT      = EMBEDDED
;

	BBC	#DAP$V_STM_ONLY,(R7),40$; Branch if not 'stream-only' machine

;
; We're talking to a 'stream-only' machine.
;
; This section deals with the DATATYPE, ORG, RFM, RAT, and MRS fields.
;

	BBS	#FAB$V_BIO,-		; Branch if block I/O mode
		FAB$B_FAC(R8),30$	;
	MOVB	#DAP$M_ASCII,(R5)+	; Store DATATYPE field
	MOVB	#DAP$K_SEQ,(R5)+	; Store ORG field
	MOVB	#DAP$K_STM,(R5)+	; Store RFM field
	MOVB	#DAP$M_EMBEDDED,(R5)+	; Store RAT field
	MOVW	#<512+2>,(R5)+		; Store MRS field
	BRB	70$			; Join common code
30$:	MOVW	#512,(R5)+		; Store MRS field
	BRB	70$			; Join common code

;
; We're NOT talking to a 'stream-only' machine.
;
; This section deals with the DATATYPE, ORG, RFM, RAT, and MRS fields.
;

40$:	BBS	#FAB$V_BIO,-		; Branch if block I/O mode
		FAB$B_FAC(R8),60$	;
	MOVB	#DAP$M_ASCII,(R5)+	; Store DATATYPE field
	BBS	#DAP$V_VAXVMS,(R7),50$	; Branch if partner is VAX/VMS
	MOVB	#DAP$K_SEQ,(R5)+	; Store ORG field
	MOVB	#DAP$K_VAR,(R5)+	; Store RFM field
	MOVB	#DAP$M_CR,(R5)+		; Store RAT field
	BRB	60$			;
50$:	MOVB	FAB$B_ORG(R8),(R5)+	; Store ORG field
	MOVB	FAB$B_RFM(R8),(R5)+	; Store RFM field
	MOVB	FAB$B_RAT(R8),(R5)+	; Store RAT field
60$:	CLRW	(R5)+			; Zero MRS field
	BBC	#DAP$V_FCS,(R7),70$	; Branch if partner is not FCS based
	MOVW	IFB$W_DEVBUFSIZ(R9),-2(R5); Specify maximum value

;
; This section deals with the FSZ, DEQ, and FOP fields.
;

70$:	BBC	#DAP$V_FSZ,R6,80$	; Used only if RFM = VFC
	MOVB	FAB$B_FSZ(R8),(R5)+	; Store FSZ field
	BNEQ	80$			; Branch if non-zero
	MOVB	#2,-1(R5)		; Use default FSZ value
80$:	BBC	#DAP$V_DEQ1,R6,90$	; Used only if DEQ > 0
	MOVW	FAB$W_DEQ(R8),(R5)+	; Store DEQ field
90$:	BSBW	NT$MAP_FOP		; Store FOP field
	BSBW	NT$BUILD_TAIL		; Finish building message
	BSBW	NT$TRANSMIT		; Send Attributes message to FAL
	BLBC	R0,FAIL2		; Branch on failure

;+
; Build and send DAP Access message to partner.
;-

SEND_ACC:				; (required message)
	$SETBIT	#NWA$V_LAST_MSG,(R7)	; Declare this last message to block
	MOVL	#DAP$K_ACC_MSG,R0	; Get message type value
	BSBW	NT$BUILD_HEAD		; Construct message header
	BBC	#FAB$V_UFO,-		; Branch if this is not a load image
		FAB$L_FOP(R8),10$	;  function (for image activator)
	BISB2	#DAP$M_SYSPEC,-1(R5)	; Modify flags field
	MOVB	#2,(R5)+		; Store SYSPEC as an image field
	MOVB	#DAP$M_SSP_FLG,(R5)+	; Store SSP_MENU sub-field
	MOVB	#DAP$M_LOAD,(R5)+	; Store SSP_FLG sub-field
					; Message header is now complete ...
10$:	MOVB	#DAP$K_OPEN,(R5)+	; Store ACCFUNC field
	MOVB	#DAP$M_NONFATAL,(R5)+	; Store ACCOPT field
	BSBW	NT$CRC_INIT		; Initialize CRC value if both parties
					;  support file level CRC computation
	BLBC	R0,20$			; Branch if CRC checking disabled
	BISB2	#DAP$M_RET_CRC,-1(R5)	; Request CRC checksum option
20$:	BSBW	NT$GET_FILESPEC		; Store FILESPEC as a counted
					;  ASCII string
	BSBW	NT$GET_FAC_SHR		; Store FAC and SHR fields
	MOVZWL	NWA$W_DISPLAY(R7),R1	; Get request mask
	CMPW	#DAP$M_DSP_ATT,R1	; Omit DISPLAY field from message if
	BEQL	30$			;  only Attributes message specified
					;  (because some older FALs do not
					;  support this field nor Ext Att msgs)
	BSBW	NT$CVT_BN4_EXT		; Store DISPLAY as an extensible field
30$:	BSBW	NT$BUILD_TAIL		; Finish building message
	BSBW	NT$TRANSMIT		; Send Access message to FAL
	BLBS	R0,RECV_ATT		; Branch on success
FAIL2:	RSB				; Exit with RMS code in R0

;+
; Receive DAP Attributes message from partner and update the user FAB and
; FHCXAB. Also update the user ALLXAB if an Allocation message will not be
; returned by FAL.
;
; Note:	The user XAB chain is scanned again to probe all user XABs to protect
;	RMS from a user who deletes the address space where an XAB was
;	previously found.
;-

RECV_ATT:				; (required message)
	$SETBIT	#DAP$K_ATT_MSG,DAP$L_MSG_MASK(R7)
					; Expect response of Attributes message
	BSBW	NT$RECEIVE		; Get reply from FAL
	BLBC	R0,FAIL3		; Branch on failure
	CLRL	R6			; Indicate this is not a close operation
	BSBW	NT$SCAN_XABCHN		; Scan user XAB list again
	BLBC	R0,FAIL3		; Branch on failure to scan XABs
	MOVB	DAP$B_ORG(R7),-		; Save file organization type
		NWA$B_ORG(R7)		;
	CMPB	DAP$B_RFM(R7),#DAP$K_STM; Branch if not stream format
	BNEQ	10$			;
	$SETBIT	#NWA$V_DAP_STM,(R7)	; Set flag to notify $GET/$PUT service
					;  that remote file has stream format
10$:	BSBW	NT$MAP_DEV_CHAR		; Process device characteristics
	BSBW	UPDATE_FAB		; Update user FAB
	BSBW	NT$UPDATE_FHC		; Update user FHCXAB
	BBS	#DAP$V_DSP_ALL,-	; Branch if Allocation message
		NWA$W_DISPLAY(R7),-	;  was requested
		RECV_EXT_ATT		;
	BSBW	NT$DECODE_ALL_A		; Update user ALLXAB from fields in
					;  Attributes message (unless ORG = IDX)

;+
; Receive DAP Extended Attributes messages from partner and update the user
; ALL, DAT, KEY, PRO, RDT, and SUM XABs.
;-

RECV_EXT_ATT:				; (optional--must be requested)
	BSBW	NT$RECV_EXT_ATT		; Process Extended Attributes messages
	BLBC	R0,FAIL3		; Branch on failure

;+
; Receive DAP (resultant) Name message from partner.
;-

RECV_NAM:				; (optional--must be requested)
	BBC	#DAP$V_DSP_NAM,-	; Branch if Name message was not
		NWA$W_DISPLAY(R7),-	;  requested
		RECV_ACK		;
	$SETBIT	#DAP$K_NAM_MSG,DAP$L_MSG_MASK(R7)
					; Expect response of Name message
	BSBW	NT$RECEIVE		; Get reply from FAL
	BLBC	R0,FAIL3		; Branch on failure
	BSBW	NT$DECODE_NAM		; Process resultant name string

;+
; Receive DAP Acknowledge message from partner.
;-

RECV_ACK:				; (required message)
	$SETBIT	#DAP$K_ACK_MSG,DAP$L_MSG_MASK(R7)
					; Expect response of Acknowledge message
	BSBW	NT$RECEIVE		; Get reply from FAL
	BLBC	R0,FAIL3		; Branch on failure
	BBS	#IFB$V_BRO,-		; Branch if BRO option set
		IFB$B_FAC(R9),FAC_BRO	;
SUC:	$SETBIT	#IFB$V_DAP_OPEN,(R9)	; Yes, denote FAL has opened file
	RMSSUC				; Return success
FAIL3:	RSB				; Exit with RMS code in R0

	.SBTTL	FAC_BRO

;++
; Convert FAB$V_BRO request to FAB$V_BIO request if partner node is not VMS
; and the file opened is a relative or indexed file. This is done to facilitate
; the transfer of such files from a non-VMS system in block I/O mode. See
; comments for the NT$RET_DEV_CHAR routine for related information.
;
; Note:	The FAB$V_BRO and RAB$V_BIO options are fully supported VMS to VMS and
;	and documented as such. However, these options are documented as being
;	unsupported when communicating with a non-VMS partner. Use of these
;	options with a non-VMS partner is strictly for Digital component use
;	only as their behavior in a heterogenoes environment may change in the
;	future.
;--

FAC_BRO:				; Special processing of BRO
	BBC	#DAP$V_GEQ_V56,(R7),SUC	; Branch if partner uses DAP before V5.6
	BBS	#DAP$V_VAXVMS,(R7),SUC	; Branch if partner is VAX/VMS
	CMPB	NWA$B_ORG(R7),#NWA$K_SEQ; Branch if SEQ organization
	BEQL	SUC			;  else fall thru if REL or IDX

;+
; Build and send DAP Access Complete message to partner.
;-

BRO_SEND_CMP:				;
	$SETBIT	#NWA$V_LAST_MSG,(R7)	; Declare this last message to block
	MOVL	#DAP$K_CMP_MSG,R0	; Get message type value
	BSBW	NT$BUILD_HEAD		; Construct message header
	MOVB	#DAP$K_CLOSE,(R5)+	; Store CMPFUNC field
	BSBW	NT$BUILD_TAIL		; Finish building message
	BSBW	NT$TRANSMIT		; Send Access Complete message to FAL
	BLBC	R0,FAIL3		; Branch on failure

;+
; Receive DAP Access Complete message from partner.
;-

BRO_RECV_CMP:				;
	$SETBIT	#DAP$K_CMP_MSG,DAP$L_MSG_MASK(R7)
					; Expect response of Access Complete msg
	BSBW	NT$RECEIVE		; Get reply from FAL
	BLBC	R0,FAIL3		; Branch on failure

;+
; Now reopen the file in block I/O mode.
;-

	$CLRBIT	#IFB$V_BRO,IFB$B_FAC(R9); Transform BRO request into a BIO
	$SETBIT	#IFB$V_BIO,IFB$B_FAC(R9);  request
	MOVW	#DAP$M_DSP_ATT,-	; Do not request return of XAB info
		NWA$W_DISPLAY(R7)	;  as we already have it from first open
	BRW	SEND_ATT		; Reopen the file in  block I/O mode

	.SBTTL	NT$RECV_EXT_ATT

;++
; This routine receives and decodes DAP Extended Attributes messages from
; partner and updates the user Allocation, Date and Time, Key Definition,
; Protection, Revision Date and Time, and Summary XABs as appropriate.
;
; A mask (NWA$L_MSG_MASK) is used to determine if all requested Extended
; Attributes messages (NWA$W_DISPLAY) have been received before allowing a
; DAP NAM or ACK message to be received and processed. NT$DECODE_xxx routines
; each clear their respective mask bit after processing a DAP message.
;
; Note:	For indexed files, multiple Allocation and Key Definition messages
;	may be returned.
;-

NT$RECV_EXT_ATT::			; Entry point
	MOVZWL	NWA$W_DISPLAY(R7),R1	; Get DAP message request mask
	CLRL	R2			; Clear valid messages to receive mask
	$MAPBIT	DAP$V_DSP_ALL,DAP$K_ALL_MSG; Map request for Allocation msg
	$MAPBIT	DAP$V_DSP_KEY,DAP$K_KEY_MSG; Map request for Key Definition msg
	$MAPBIT DAP$V_DSP_PRO,DAP$K_PRO_MSG; Map request for Protection msg
	$MAPBIT	DAP$V_DSP_SUM,DAP$K_SUM_MSG; Map request for Summary msg
	$MAPBIT	DAP$V_DSP_TIM,DAP$K_TIM_MSG; Map request for Date and Time msg
	MOVL	R2,NWA$L_MSG_MASK(R7)	; Save valid message mask for use again
LOOP:	MOVL	NWA$L_MSG_MASK(R7),-	; Expect response of any of these DAP
		DAP$L_MSG_MASK(R7)	;  messages
	BEQL	DONE			; Branch if no more to receive
LOOP1:	BSBW	NT$RECEIVE		; Get reply from FAL
	BLBC	R0,FAIL			; Branch on failure

	ASSUME	DAP$K_KEY_MSG EQ 10
	ASSUME	DAP$K_ALL_MSG EQ 11
	ASSUME	DAP$K_SUM_MSG EQ 12
	ASSUME	DAP$K_TIM_MSG EQ 13
	ASSUME	DAP$K_PRO_MSG EQ 14

	PUSHAB	B^LOOP2			; Push return address on stack
	$CASEB	SELECTOR=DAP$B_TYPE(R7)- ; Dispatch to process message:
		BASE=#DAP$K_KEY_MSG-	;
		DISPL=<-		;
		    NT$DECODE_KEY-	;  Key Definition message
		    NT$DECODE_ALL-	;  Allocation message
		    NT$DECODE_SUM-	;  Summary message
		    NT$DECODE_TIM-	;  Date and Time message
		    NT$DECODE_PRO-	;  Protection message
		>			;

;+
; If this is an indexed file and an Allocation or Key Definition message has just
; been processed, look ahead to see if the next message is of the same type.
; If so, process it; otherwise don't allow any more of this type (i.e.,
; multiple Allocation and Key Definition messages must be received as a block).
;-

LOOP2:	CMPB	NWA$B_ORG(R7),#NWA$K_IDX; Branch if not IDX organization
	BNEQ	LOOP			;
	$CASEB	SELECTOR=DAP$B_TYPE(R7)- ; Message just processed was:
		BASE=#DAP$K_KEY_MSG-	;
		DISPL=<-		;
		    DECODE_NXT_KEY-	;  Key Definition message
		    DECODE_NXT_ALL-	;  Allocation message
		>			;
	BRB	LOOP			;  all others
DECODE_NXT_KEY:				; Handle multiple KEY messages
	$SETBIT	#NWA$V_NODECODE,(R7)	; Read next DAP message (if required)
	BSBW	NT$RECEIVE		;  but don't parse it
	BLBC	R0,FAIL			; Branch on failure
	CMPB	@DAP$Q_MSG_BUF1+4(R7),-	; Branch if this is not another
		#DAP$K_KEY_MSG		;  Key Definition message
	BNEQ	LOOP			;  (disallow any more KEY messages)
	$SETBIT	#DAP$K_KEY_MSG,DAP$L_MSG_MASK(R7)
	BRB	LOOP1			; Process this Key Definition message
DECODE_NXT_ALL:				; Handle multiple Allocation messages
	$SETBIT	#NWA$V_NODECODE,(R7)	; Read next DAP message (if required)
	BSBW	NT$RECEIVE		;  but don't parse it
	BLBC	R0,FAIL			; Branch on failure
	CMPB	@DAP$Q_MSG_BUF1+4(R7),-	; Branch if this is not another
		#DAP$K_ALL_MSG		;  Allocation message
	BNEQ	LOOP			;  (disallow any more ALL messages)
	$SETBIT	#DAP$K_ALL_MSG,DAP$L_MSG_MASK(R7)
	BRB	LOOP1			; Process this Allocation message
DONE:	RMSSUC				; Return success
FAIL:	RSB				; FAIL with RMS code in R0

	.SBTTL	UPDATE_FAB

;++
; Update the user FAB from the Attributes message.
;
; Note:	BLS and MRN will be updated directly in the FAB, whereas, the other
;	fields will be updated in the IFB and then returned to the FAB by the
;	RMS0OPEN exit code.
;--

UPDATE_FAB:				; Entry point

;
; Process the DAP ORG, MRN, BLS, RFM, and RAT fields.
;

	EXTZV	#IFB$V_ORG,#IFB$S_ORG,-	; Note that DAP$B_ORG is in same
		DAP$B_ORG(R7),R1	;  format as IFB$B_RFMORG
	MOVB	R1,IFB$B_ORGCASE(R9)	; Store file organization
	CMPB	R1,#DAP$K_SEQ		; Branch if SEQ organization
	BEQL	10$			;
	CMPB	DAP$B_ORG(R7),#DAP$K_REL; Branch if not REL organization
	BNEQ	20$			;
	MOVL	DAP$L_MRN(R7),FAB$L_MRN(R8)
	BRB	20$			;
10$:	MOVW	DAP$W_BLS(R7),FAB$W_BLS(R8)
20$:	MOVB	DAP$B_RFM(R7),IFB$B_RFMORG(R9)
	BSBW	NT$MOD_RAT		; Modify RAT bits returned from FAL
					;  as required
	MOVB	DAP$B_RAT(R7),IFB$B_RAT(R9)

;
; Process the DAP MRS and LRL fields.
;

	MOVW	DAP$W_MRS(R7),IFB$W_MRS(R9)
	MOVW	DAP$W_LRL(R7),IFB$W_LRL(R9)
	BNEQ	30$			; Branch if non-zero
	CMPB	DAP$B_RFM(R7),#DAP$K_FIX; Branch if record format is not
	BNEQ	30$			;  fixed length
	MOVW	DAP$W_MRS(R7),IFB$W_LRL(R9)

;
; Process the DAP ALQ and HBK fields.
;
; Note:	ALQ and HBK are equivalent, but not all non-VAX nodes return HBK.
;

30$:	MOVL	DAP$L_ALQ1(R7),IFB$L_HBK(R9)

;
; Process the DAP BKS, FSZ, and DEQ fields.
;

40$:	MOVB	DAP$B_BKS(R7),IFB$B_BKS(R9)
	MOVB	DAP$B_FSZ(R7),IFB$B_FSZ(R9)
	MOVW	DAP$W_DEQ1(R7),IFB$W_DEQ(R9)

;
; Process the DAP FOP field.
;

	MOVL	DAP$L_FOP1(R7),R1	; Get DAP FOP bits
	CLRL	R2			; Clear resultant FOP bits
	$MAPBIT	DAP$V_CTG,FAB$V_CTG	; Map CTG bit
	$MAPBIT	DAP$V_CBT,FAB$V_CBT	; Map CBT bit
	$MAPBIT	DAP$V_RCK,FAB$V_RCK	; Map RCK bit
	$MAPBIT	DAP$V_WCK,FAB$V_WCK	; Map WCK bit
	BICL2	#<<FAB$M_CTG>!-		; Clear FOP bits in user FAB
		  <FAB$M_CBT>!-		;  that may be updated
		  <FAB$M_RCK>!-		;
		  <FAB$M_WCK>!-		;
		0>,FAB$L_FOP(R8)	;
	BISL2	R2,FAB$L_FOP(R8)	; Update FOP field
	RSB				; Exit

	.SBTTL	NT$UPDATE_FHC - UPDATE FHC XAB

;++
; Update the user File Header Characteristics XAB from the Attributes message.
;--

NT$UPDATE_FHC::				; Entry point
	MOVL	NWA$L_FHCXABADR(R7),R6	; Get address of user FHCXAB
	BEQL	30$			; Branch if none

;
; Process the DAP RAT, BKS, DEQ, EBK, FFB, FSZ, and SBN fields.
;

	BSBW	NT$MOD_RAT		; Modify RAT bits returned from FAL
					;  as required
	MOVB	DAP$B_RAT(R7),XAB$B_ATR(R6)
	MOVB	DAP$B_BKS(R7),XAB$B_BKZ(R6)
	MOVW	DAP$W_DEQ1(R7),XAB$W_DXQ(R6)
	MOVL	DAP$L_EBK(R7),XAB$L_EBK(R6)
	MOVW	DAP$W_FFB(R7),XAB$W_FFB(R6)
	MOVB	DAP$B_FSZ(R7),XAB$B_HSZ(R6)
	MOVL	DAP$L_SBN(R7),XAB$L_SBN(R6)

;
; Process the DAP MRS and LRL fields.
;

	MOVW	DAP$W_MRS(R7),XAB$W_MRZ(R6)
	MOVW	DAP$W_LRL(R7),XAB$W_LRL(R6)
	BNEQ	10$			; Branch if non-zero
	CMPB	DAP$B_RFM(R7),#DAP$K_FIX; Branch if format is not
	BNEQ	10$			;  fixed length
	MOVW	DAP$W_MRS(R7),XAB$W_LRL(R6)

;
; Process the DAP ALQ and HBK fields.
;
; Note:	ALQ and HBK are equivalent, but not all non-VAX nodes return HBK.
;

10$:	MOVL	DAP$L_ALQ1(R7),XAB$L_HBK(R6)

;
; Process the DAP RFM and ORG fields which are combined into one XAB RFO field.
;

	ASSUME	DAP$K_UDF EQ FAB$C_UDF
	ASSUME	DAP$K_FIX EQ FAB$C_FIX
	ASSUME	DAP$K_VAR EQ FAB$C_VAR
	ASSUME	DAP$K_VFC EQ FAB$C_VFC
	ASSUME	DAP$K_STM EQ FAB$C_STM

20$:	ADDB3	DAP$B_RFM(R7),DAP$B_ORG(R7),XAB$B_RFO(R6)
30$:	RSB				; Exit

	.SBTTL	NT$MOD_RAT

;++
; This routine converts the DAP RAT field received from the remote FAL to a
; form that may be retruned to the user. In particular, the DAP$V_EMBEDDED bit
; is cleared, and if the DAP RFM field = STM with no other carriage control
; bits set, RAT is forced to CR.
;--

NT$MOD_RAT::				; Entry point
	$CLRBIT	#DAP$V_EMBEDDED,DAP$B_RAT(R7) ; Discard the embedded bit
	CMPB	DAP$B_RFM(R7),#DAP$K_STM; Branch if not STM format
	BNEQ	10$			;
	BITB	#<<DAP$M_FTN>!-		; If RAT = embedded or none for STM
		  <DAP$M_CR>!-		;  format file ...
		  <DAP$M_PRN>!-		;
		0>,DAP$B_RAT(R7)	;
	BNEQ	10$			;
	$SETBIT	#DAP$V_CR,DAP$B_RAT(R7) ; Force implied carriage control
10$:	RSB				; Exit

	.SBTTL	NT$DECODE_KEY - UPDATE KEY XAB

;++
; A Key Definition message has been received and decoded in the DAP control
; Block. Update the next user Key Definition XAB in chain.
;
; Note:	Multiple Key Definition XABs are valid only for indexed files.
;--

NT$DECODE_KEY::				; Entry point
	TSTB	NWA$B_KEYXABCNT(R7)	; Branch if there are more KEYXABs
	BNEQ	10$			;  in chain
	BRW	30$			; Branch if none
10$:	MOVL	NWA$L_KEYXABADR(R7),R6	; Get address of next KEYXAB in chain

;
; Process the DAP FLG field.
;

	MOVZBL	DAP$B_FLG(R7),R1	; Get DAP FLG bits
	CLRL	R2			; Clear RMS FLG bits
	$MAPBIT	DAP$V_DUP,XAB$V_DUP	; Map DUP bit
	$MAPBIT	DAP$V_CHG,XAB$V_CHG	; Map CHG bit
	$MAPBIT	DAP$V_NUL_CHR,XAB$V_NUL	; Map NUL bit
	MOVB	R2,XAB$B_FLG(R6)	; Update FLG field in XAB

;
; Process the DAP DFL, IFL, REF, NUL, IAN, LAN, DAN, DTP, RVB, DVB,
; DBS, IBS, LVL, TKS, and MRL fields.
;

	MOVB	DAP$W_DFL(R7),XAB$W_DFL(R6)
	MOVB	DAP$W_IFL(R7),XAB$W_IFL(R6)
	MOVB	DAP$B_REF(R7),XAB$B_REF(R6)
	MOVB	DAP$B_NUL(R7),XAB$B_NUL(R6)
	MOVB	DAP$B_IAN(R7),XAB$B_IAN(R6)
	MOVB	DAP$B_LAN(R7),XAB$B_LAN(R6)
	MOVB	DAP$B_DAN(R7),XAB$B_DAN(R6)
	MOVB	DAP$B_DTP(R7),XAB$B_DTP(R6)
	MOVL	DAP$L_RVB(R7),XAB$L_RVB(R6)
	MOVL	DAP$L_DVB(R7),XAB$L_DVB(R6)
	MOVB	DAP$B_DBS(R7),XAB$B_DBS(R6)
	MOVB	DAP$B_IBS(R7),XAB$B_IBS(R6)
	MOVB	DAP$B_LVL(R7),XAB$B_LVL(R6)
	MOVB	DAP$B_TKS(R7),XAB$B_TKS(R6)
	MOVW	DAP$W_MRL(R7),XAB$W_MRL(R6)

;
; Process the DAP NSG, POS, and SIZ fields.
;
; Note:	NT$DECODE_MSG guarantees that 0 < DAP$B_NSG < 9.
;

	PUSHL	R8			; Save register
	MOVZBL	DAP$B_NSG(R7),R8	; Get # key segments
	MOVB	R8,XAB$B_NSG(R6)	; Update NSG field in XAB
	MOVC3	R8,DAP$B_SIZ(R7),-	; Copy 1 to 8 key size values
		XAB$B_SIZ(R6)		;  to XAB
	ASHL	#1,R8,R8		; Double byte count
	MOVC3	R8,DAP$W_POS(R7),-	; Copy 1 to 8 key position values
		XAB$W_POS(R6)		;  to XAB
	POPL	R8			; Restore register

;
; Process the DAP KNM field.
;

	MOVL	XAB$L_KNM(R6),R5	; Get address of key name buffer
	BEQL	20$			; Branch if no buffer supplied
	PROBEW	IFB$B_MODE(R9),#32,(R5)	; Test writeability
	BEQL	20$			; Branch on failure
	MOVC5	DAP$Q_KNM(R7),-		; Copy DAP key name string
		@DAP$Q_KNM+4(R7),-	;  to 32 byte XAB buffer
		#0,#32,(R5)		;

;
; Set-up for next time thru.
;

20$:	DECB	NWA$B_KEYXABCNT(R7)	; Reduce count of KEYXABs left
	MOVL	XAB$L_NXT(R6),-		; Save address of next KEYXAB in chain
		NWA$L_KEYXABADR(R7)	;  (valid only if NWA$B_KEYXABCNT > 0)
30$:	$CLRBIT	#DAP$K_KEY_MSG,NWA$L_MSG_MASK(R7); Check it off from list
	RSB				; Process next DAP message

	.SBTTL	NT$DECODE_ALL - UPDATE ALL XAB

;++
; An Allocation message has been received and decoded in the DAP control block.
; Update the next user Allocation XAB in chain.
;
; Note:	Multiple Allocation XABs are valid only for indexed files.
;--

NT$DECODE_ALL::				; Entry point
	TSTB	NWA$B_ALLXABCNT(R7)	; Branch if there are more ALLXABs
	BNEQ	10$			;  in chain
	BRW	60$			; Branch aid
10$:	MOVL	NWA$L_ALLXABADR(R7),R6	; Get address of next ALLXAB in chain

;
; Process the DAP ALN field.
;

	ASSUME	DAP$K_ANY EQ 0
	ASSUME	DAP$K_CYL EQ XAB$C_CYL
	ASSUME	DAP$K_LBN EQ XAB$C_LBN
	ASSUME	DAP$K_VBN EQ XAB$C_VBN

	MOVB	DAP$B_ALN(R7),XAB$B_ALN(R6)

;
; Process the DAP AOP field.
;

	MOVZBL	DAP$B_AOP(R7),R1	; Get DAP AOP bits
	CLRL	R2			; Clear RMS AOP bits
	$MAPBIT	DAP$V_HRD,XAB$V_HRD	; Map HRD bit
	$MAPBIT	DAP$V_CBT2,XAB$V_CBT	; Map CBT bit
	$MAPBIT	DAP$V_CTG2,XAB$V_CTG	; Map CTG bit
	$MAPBIT	DAP$V_ONC,XAB$V_ONC	; Map ONC bit
	MOVB	R2,XAB$B_AOP(R6)	; Update AOP field in XAB

;
; Process the DAP VOL, LOC, ALQ, AID, BKZ, and DEQ fields.
;

	MOVW	DAP$W_VOL(R7),XAB$W_VOL(R6)
	MOVL	DAP$L_LOC(R7),XAB$L_LOC(R6)
	MOVL	DAP$L_ALQ2(R7),XAB$L_ALQ(R6)
	MOVB	DAP$B_AID(R7),XAB$B_AID(R6)
	MOVB	DAP$B_BKZ(R7),XAB$B_BKZ(R6)
	MOVW	DAP$W_DEQ2(R7),XAB$W_DEQ(R6)

;
; If the DAP ALQ, BKZ, DEQ, or AOP fields are not explicitly returned in the
; Allocation message, they will be defaulted to values received in corresponding
; fields of the Attributes message.
;

	MOVZWL	DAP$W_ALLMENU(R7),R1	; Get allocation menu field
	BBS	#DAP$V_ALQ2,R1,20$	; Ok if explicit value returned
	MOVL	IFB$L_HBK(R9),-		; Default ALQ value
		XAB$L_ALQ(R6)		;
20$:	BBS	#DAP$V_BKZ,R1,30$	; Ok if explicit value returned
	MOVB	IFB$B_BKS(R9),-		; Default BKZ value
		XAB$B_BKZ(R6)		;
30$:	BBS	#DAP$V_DEQ2,R1,40$	; Ok if explicit value returned
	MOVW	IFB$W_DEQ(R9),-		; Default DEQ value
		XAB$W_DEQ(R6)		;
40$:	BBS	#DAP$V_AOP,R1,50$	; Ok if explicit value returned
	BBC	#FAB$V_CBT,FAB$L_FOP(R8),45$
	$SETBIT	#XAB$V_CBT,XAB$B_AOP(R6); Map CBT bit
45$:	BBC	#FAB$V_CTG,FAB$L_FOP(R8),50$
	$SETBIT	#XAB$V_CTG,XAB$B_AOP(R6); Map CTG bit

;
; Set-up for next time thru.
;

50$:	DECB	NWA$B_ALLXABCNT(R7)	; Reduce count of Allocation XABs left
	MOVL	XAB$L_NXT(R6),-		; Save address of next ALLXAB in chain
		NWA$L_ALLXABADR(R7)	;  (valid only if NWA$B_ALLXABCNT > 0)
60$:	$CLRBIT	#DAP$K_ALL_MSG,NWA$L_MSG_MASK(R7); Check it off from list
	RSB				; Process next DAP message

	.SBTTL	NT$DECODE_ALL_A - UPDATE ALL XAB

;++
; An Attributes message has been received and decoded in the DAP control block.
; Update the user Allocation XAB from the Attributes message (in lieu of the
; Allocation message) because the remote FAL does not support the Allocation
; message.
;--

NT$DECODE_ALL_A::			; Entry point
	MOVL	NWA$L_ALLXABADR(R7),R6	; Get address of user ALLXAB
	BEQL	10$			; Branch if none
	CMPB	NWA$B_ORG(R7),#NWA$K_IDX; Do not update user ALLXAB
	BEQL	10$			;  if ORG = IDX

;
; Process the DAP FOP field.
;
; Note:	The HRD and ONC bits are not mapped into the user AOP field because
;	the FOP field does not contain these.
;

	MOVL	DAP$L_FOP1(R7),R1	; Get DAP FOP bits
	CLRL	R2			; Clear resultant AOP bits
	$MAPBIT	DAP$V_CTG,XAB$V_CTG	; Map CTG bit
	$MAPBIT	DAP$V_CBT,XAB$V_CBT	; Map CBT bit
	MOVB	R2,XAB$B_AOP(R6)	; Update AOP field in XAB

;
; Process the DAP ALQ, BKS, and DEQ fields.
;

	MOVL	DAP$L_ALQ1(R7),XAB$L_ALQ(R6)
	MOVB	DAP$B_BKS(R7),XAB$B_BKZ(R6)
	MOVW	DAP$W_DEQ1(R7),XAB$W_DEQ(R6)

;
; Zero the XAB ALN, LOC, AID, and VOL fields because these are not obtainable
; from the Attributes message.
;

	CLRB	XAB$B_ALN(R6)		; Zero these fields
	CLRL	XAB$L_LOC(R6)		;
	CLRB	XAB$B_AID(R6)		;
	CLRW	XAB$W_VOL(R6)		;
10$:	RSB				; Exit

	.SBTTL	NT$DECODE_SUM - UPDATE SUM XAB

;++
; A Summary message has been received abd decoded in the DAP control block.
; Update the user Summary XAB.
;--

NT$DECODE_SUM::				; Entry point
	MOVL	NWA$L_SUMXABADR(R7),R6	; Get address of user SUMXAB
	BEQL	10$			; Branch if none

;
; Process the DAP NOK, NOA, and PRV fields.
;

	MOVB	DAP$B_NOK(R7),XAB$B_NOK(R6)
	MOVB	DAP$B_NOA(R7),XAB$B_NOA(R6)
	MOVW	DAP$W_PVN(R7),XAB$W_PVN(R6)
10$:	$CLRBIT	#DAP$K_SUM_MSG,NWA$L_MSG_MASK(R7); Check it off from list
	RSB				; Process next DAP message

	.SBTTL	NT$DECODE_TIM - UPDATE DAT XAB

;++
; A Date and Time message has been received and decoded in the DAP control
; block. Update both the user Date and Time XAB and the Revision Date and Time
; XAB as appropriate.
;--

NT$DECODE_TIM::				; Entry point

;
; First update the Date and Time XAB if present.
;

	MOVL	NWA$L_DATXABADR(R7),R6	; Get address of user DATXAB
	BEQL	10$			; Branch if none

;
; Process the DAP CDT, RDT, EDT, BDT, and RVN fields.
;

	MOVQ	DAP$Q_CDT(R7),-		; Copy creation date and time
		XAB$Q_CDT(R6)		;  binary value to XAB
	MOVQ	DAP$Q_RDT(R7),-		; Copy revision date and time
		XAB$Q_RDT(R6)		;  binary value to XAB
	MOVQ	DAP$Q_EDT(R7),-		; Copy expiration date and time
		XAB$Q_EDT(R6)		;  binary value to XAB
	MOVW	DAP$W_RVN(R7),-		; Store revision number value in XAB
		XAB$W_RVN(R6)		;
	CMPB	XAB$B_BLN(R6),-		; Branch if length of XAB is too small
		#XAB$C_DATLEN		;  to contain BDT field (i.e., it's a
	BLSSU	10$			;  V2 length XAB)
	MOVQ	DAP$Q_BDT(R7),-		; Copy backup date and time
		XAB$Q_BDT(R6)		;  binary value to XAB

;
; Next update the Revision Date and Time XAB if present.
;

10$:	MOVL	NWA$L_RDTXABADR(R7),R6	; Get address of user RDTXAB
	BEQL	20$			; Branch if none

;
; Process the DAP RDT and RVN fields again.
;

	MOVQ	DAP$Q_RDT(R7),-		; Copy revision date and time
		XAB$Q_RDT(R6)		;  binary value to XAB
	MOVW	DAP$W_RVN(R7),-		; Store revision number value in XAB
		XAB$W_RVN(R6)		;

20$:	$CLRBIT	#DAP$K_TIM_MSG,NWA$L_MSG_MASK(R7); Check it off from list
	RSB				; Process next DAP message

	.SBTTL	NT$DECODE_PRO - UPDATE PRO XAB

;++
; A Protection message has been received and decoded in the DAP control block.
; Update the user Protection XAB.
;--

NT$DECODE_PRO::				; Entry point
	MOVL	NWA$L_PROXABADR(R7),R6	; Get address of user PROXAB
	BEQL	40$			; Branch if none
	CLRL	XAB$L_UIC(R6)		; Set UIC to default value
	
;
; Process the DAP OWNER field.
;

	MOVQ	DAP$Q_OWNER(R7),R4	; Get descriptor of ASCII string
	CMPB	(R5),#^A\[\		; Branch if string does not begin
	BNEQ	30$			;  with bracket
	CMPB	-1(R5)[R4],#^A\]\	; Branch if string does not end
	BNEQ	30$			;  with bracket
	SUBL2	#2,R4			; Discard brackets
	INCL	R5			;
	LOCC	#^A\,\,R4,(R5)		; Locate group-member delimiter
	BEQL	30$			; Branch on failure
	SUBL3	R5,R1,R4		; <R4,R5> => group string
	DECL	R0			; <R0,R1> => member string
	INCL	R1			;
	CLRL	-(SP)			; Allocate space from stack
	PUSHL	SP			; Address of result
	PUSHL	R1			; Address of input string
	PUSHL	R0			; Size of input string
	CALLS	#3,G^LIB$CVT_OTB	; Convert octal string to binary
	BLBC	R0,10$			; Branch on failure
	MOVW	(SP),XAB$W_MBM(R6)	; Update member UIC value in XAB
10$:	PUSHL	SP			; Address of result
	PUSHL	R5			; Address of input string
	PUSHL	R4			; Size of input string
	CALLS	#3,G^LIB$CVT_OTB	; Convert octal string to binary
	BLBC	R0,20$			; Branch on failure
	MOVW	(SP),XAB$W_GRP(R6)	; Update group UIC value in XAB
20$:	CLRL	(SP)+			; Deallocate space from stack

;
; Process the DAP PROSYS, PROOWN, PROGRP, and PROWLD fields.
;

30$:	INSV	DAP$W_PROSYS(R7),#0,#4,R0 ; Map system bits
	INSV	DAP$W_PROOWN(R7),#4,#4,R0 ; Map owner bits
	INSV	DAP$W_PROGRP(R7),#8,#4,R0 ; Map group bits
	INSV	DAP$W_PROWLD(R7),#12,#4,R0; Map world bits
	MOVW	R0,XAB$W_PRO(R6)	; Update protection mask in XAB
40$:	$CLRBIT	#DAP$K_PRO_MSG,NWA$L_MSG_MASK(R7); Check it off from list
	RSB				; Process next DAP message

	.SBTTL	NT$DECODE_NAM - UPDATE RESULTANT NAME

;++
; Process (resultant) Name message from partner.
;--

NT$DECODE_NAM::				; Entry point
	BBC	#DAP$V_FILSPEC,-	; Ignore NAM message if it does not
		DAP$B_NAMETYPE(R7),10$	;  contain a full filespec string
	MOVQ	DAP$Q_NAMESPEC(R7),R0	; Get descriptor of resultant name
	MOVL	R0,FWA$Q_QUOTED(R10)	; Store it in quoted string buffer
	MOVC3	R0,(R1),@FWA$Q_QUOTED+4(R10)
	$SETBIT	#FWA$V_REMRESULT,(R10)	; Flag receipt of resultant name string
10$::	RSB				; Exit

	.END				; End of module
