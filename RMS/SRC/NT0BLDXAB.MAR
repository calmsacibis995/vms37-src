	$BEGIN	NT0BLDXAB,001,NF$NETWORK,<BUILD DAP XAB MESSAGES>


;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; Facility: RMS
;
; Abstract:
;
;	This module builds the DAP Extended Attributes messages.
;
; Environment: VAX/VMS, executive mode
;
; Author: James A. Krycka,	Creation Date:	24-MAY-1979
;
; Modified By:
;
;	V03-001	JAK0075		J A Krycka	15-PAR-1982
;		Do not set CBT bit in the DAP AOP field if parnter is not VMS.
;
;	V02-015	JAK0068		J A Krycka	29-DEC-1981
;		Be consistent in the processing of the ALQ field of the ALLXAB
;		and the FAB.
;
;	V02-014	JAK0064		J A Krycka	10-SEP-1981
;		Continuation of V02-013.
;
;	V02-013	JAK0063		J A Krycka	28-AUG-1981
;		Support the Revision Date and Time XAB.
;		Support the extended length Date and Time XAB.
;
;	V02-012	KRM0055		K R Malik	09-MAR-1981
;		Fixed a bug in KRM0054 wherein DAP$M_OWNER was tested
;		instead of DAP$V_OWNER to determine whether the OWNER
;		field was present.
;		
;	V02-011	KRM0054		K R Malik	18-FEB-1981
;		In building the DAP Protection message, do not include the
;		OWNER field if it is [0,0] nor the 4 protection fields if they
;		are defaulted. If neither the OWNER nor the protection fields
;		are included then do not include the PROMENU field either.
;
;	V02-010	JAK0047		J A Krycka	17-AUG-1980
;		In building the DAP Key Definition message, calculate the NSG
;		value and avoid including unnecessary fields in the message.
;
;	V02-009	REFORMAT	J A Krycka	26-JUL-1980
;
;--

	.SBTTL	DECLARATIONS

;
; Include Files:
;

	$DAPPLGDEF			; Define DAP prologue symbols
	$DAPHDRDEF			; Define DAP message header
	$DAPATTDEF			; Define DAP Attributes message
	$DAPKEYDEF			; Define DAP Key Definition message
	$DAPALLDEF			; Define DAP Allocation message
	$DAPTIMDEF			; Define DAP Date and Time message
	$DAPPRODEF			; Define DAP Protection message
	$IFBDEF				; Define IFAB symbols
	$NWADEF				; Define Network Work Area symbols
	$XABDEF				; Define symbols common to all XABs
	$XABALLDEF			; Define Allocation XAB symbols
	$XABDATDEF			; Define Date and Time XAB symbols
	$XABKEYDEF			; Define Key Definition XAB symbols
	$XABPRODEF			; Define Protection XAB symbols
	$XABRDTDEF			; Define Revision Date/Time XAB symbols

;
; Macros:
;
;	None
;
; Equated Symbols:
;

	ASSUME	DAP$Q_DCODE_FLG EQ 0
	ASSUME	NWA$Q_FLG EQ 0

;
; Own Storage:
;

T_UIC:	.ASCIC	\[!3OW,!3OW]\		; FAO control string

	.SBTTL	NT$ENCODE_KEY

;++
; NT$ENCODE_KEY - builds the DAP Key Definition message.
;
; Calling Sequence:
;
;	BSBW	NT$ENCODE_KEY
;
; Input Parameters:
;
;	R6	Key Definition XAB address
;	R7	NWA (=DAP) address
;	R8	FAB address
;	R9	IFAB address
;	R10	FWA address
;	R11	Impure Area address
;
; Implicit Inputs:
;
;	User KEYXAB
;
; Output Parameters:
;
;	R0-R5	Destroyed
;
; Implicit Outputs:
;
;	NWA$Q_XMT
;
; Completion Codes:
;
;	None
;
; Side Effects:
;
;	None
;
;--

NT$ENCODE_KEY::				; Entry point
	MOVL	#DAP$K_KEY_MSG,R0	; Get message type value
	BSBW	NT$BUILD_HEAD		; Construct message header
	MOVL	#<DAP$M_FLG!-		; Get key menu value
		  DAP$M_DFL!-		;
		  DAP$M_IFL!-		;
		  DAP$M_NSG!-		;
		  DAP$M_REF!-		;
		  DAP$M_KNM!-		;
		  DAP$M_NUL!-		;
		  DAP$M_IAN!-		;
		  DAP$M_LAN!-		;
		  DAP$M_DAN!-		;
		  DAP$M_DTP!-		;
		0>,R1			;
	BSBW	NT$CVT_BN4_EXT		; Store KEYMENU as an extensible field

;
; Include the FLG, DFL, and IFL fields in the message.
;

	MOVZBL	XAB$B_FLG(R6),R1	; Get FLG bits returned by RMS
	CLRL	R2			; Clear corresponding DAP bits
	$MAPBIT	XAB$V_DUP,DAP$V_DUP	; Map DUP bit
	$MAPBIT	XAB$V_CHG,DAP$V_CHG	; Map CHG bit
	$MAPBIT	XAB$V_NUL,DAP$V_NUL_CHR	; Map NUL bit
	MOVB	R2,(R5)+		; Store FLG as extensible field
	MOVW	XAB$W_DFL(R6),(R5)+	; Store data bucket fill quantity field
	MOVW	XAB$W_IFL(R6),(R5)+	; Store index bucket fill quantity field

;
; Include the NSG, POS, and SIZ fields in the message.
;

	CLRL	R0			; Initialize segment counter
	CMPB	XAB$B_DTP(R6),-		; Branch if the data type of the key
		#XAB$C_STG		;  is string
	BEQL	10$			;
	INCL	R0			; It's not string so there can be
	BRB	30$			;  only one segment for the key
10$:	MOVAB	XAB$B_SIZ(R6),R2	; Get address of SIZ array
20$:	TSTB	(R2)+			; Exit loop on segment size of zero
	BEQL	30$			;
	AOBLSS	#8,R0,20$		; Branch if more segments to examine
30$:	MOVB	R0,(R5)+		; Store NSG field
	BEQL	50$			; Branch if no segments found
	MOVAW	XAB$W_POS(R6),R1	; Get address of POS array
	MOVAB	XAB$B_SIZ(R6),R2	; Get address of SIZ array
40$:	MOVW	(R1)+,(R5)+		; Store next POS field
	MOVB	(R2)+,(R5)+		; Store next SIZ field
	SOBGTR	R0,40$			; Loop if more to go

;
; Include the REF, KNM, NUL, IAN, LAN, DAN, and DTP fields in the message.
;

50$:	MOVB	XAB$B_REF(R6),(R5)+	; Store key of reference field
	CLRB	(R5)+			; Assume no key name buffer
	MOVL	XAB$L_KNM(R6),R1	; Get address of key name buffer
	BEQL	60$			; Branch if none specified
	PROBER	IFB$B_MODE(R9),#32,(R1)	; Probe readability of user buffer
	BEQL	60$			; Branch if not accessible
	MOVB	#32,-1(R5)		; Store KNM as an image field
	MOVC3	#32,(R0),(R5)		; Copy 32-byte KNM field into message
	MOVL	R3,R5			; Update next byte pointer
60$:	MOVB	XAB$B_NUL(R6),(R5)+	; Store null key character field
	MOVB	XAB$B_IAN(R6),(R5)+	; Store index area number field
	MOVB	XAB$B_LAN(R6),(R5)+	; Store lowest level index area
					;  number field
	MOVB	XAB$B_DAN(R6),(R5)+	; Store data area number field
	MOVB	XAB$B_DTP(R6),(R5)+	; Store key data type field
	BSBW	NT$BUILD_TAIL		; Finish building message
	RSB				; Exit

	.SBTTL	NT$ENCODE_ALL

;++
; NT$ENCODE_ALL - builds the DAP Allocation message.
;
; Calling Sequence:
;
;	BSBW	NT$ENCODE_ALL
;
; Input Parameters:
;
;	R6	Allocation XAB address
;	R7	NWA (=DAP) address
;	R8	FAB address
;	R9	IFAB address
;	R10	IFAB/FWA address
;	R11	Impure Area address
;
; Implicit Inputs:
;
;	User ALLXAB
;	DAP$V_STM_ONLY
;	DAP$V_VAXVMS
;
; Output Parameters:
;
;	R0-R5	Destroyed
;
; Implicit Outputs:
;
;	NWA$Q_XMT
;
; Completion Codes:
;
;	None
;
; Side Effects:
;
;	None
;
;--

NT$ENCODE_ALL::				; Entry point
	MOVL	#DAP$K_ALL_MSG,R0	; Get message type value
	BSBW	NT$BUILD_HEAD		; Construct message header
	MOVZWL	#<DAP$M_VOL!-		; Get initial allocation menu value
		  DAP$M_AOP!-		;
		  DAP$M_ALQ2!-		;
		  DAP$M_AID!-		;
		  DAP$M_BKZ!-		;
		  DAP$M_DEQ2!-		;
		0>,R1			;
	BBC	#DAP$V_VAXVMS,(R7),10$	; Branch if partner is not VAX/VMS
	BISW2	#<<DAP$M_ALN>!-		; Add ALN and LOC fields to menu
		  <DAP$M_LOC>!-		;
		0>,R1			;
10$:	BSBW	NT$CVT_BN4_EXT		; Store ALLMENU as an extensible field

;
; Include the VOL, ALN, and AOP fields in the message.
;

	MOVW	XAB$W_VOL(R6),(R5)+	; Store relative volume number field
	BBC	#DAP$V_VAXVMS,(R7),20$	; Branch if partner is not VAX/VMS

	ASSUME	DAP$K_ANY EQ 0
	ASSUME	DAP$K_CYL EQ XAB$C_CYL
	ASSUME	DAP$K_LBN EQ XAB$C_LBN
	ASSUME	DAP$K_VBN EQ XAB$C_VBN

	MOVB	XAB$B_ALN(R6),(R5)+	; Store alignment options field
20$:	MOVZBL	XAB$B_AOP(R6),R1	; Get AOP bits returned by RMS
	CLRL	R2			; Clear corresponding DAP bits
	$MAPBIT	XAB$V_CTG,DAP$V_CTG2	; Map CTG bit
	BBC	#DAP$V_VAXVMS,(R7),30$	; Branch if partner is not VAX/VMS
	$MAPBIT	XAB$V_CBT,DAP$V_CBT2	; Map CBT bit
	$MAPBIT	XAB$V_HRD,DAP$V_HRD	; Map HRD bit
	$MAPBIT	XAB$V_ONC,DAP$V_ONC	; Map ONC bit
30$:	MOVL	R2,R1			; Move data to correct register
	BSBW	NT$CVT_BN4_EXT		; Store AOP as an extensible field

;
; Include the LOC, ALQ, AID, BKZ, and DEQ fields in the message.
;

	BBC	#DAP$V_VAXVMS,(R7),40$	; Branch if partner is not VAX/VMS
	MOVL	XAB$L_LOC(R6),R1	; Get starting location value
	BSBW	NT$CVT_BN4_IMG		; Store LOC as an image field
40$:	MOVL	XAB$L_ALQ(R6),R1	; Get allocation quantity value
	BBC	#DAP$V_STM_ONLY,(R7),50$; Branch if not a 'stream-only' machine
	CLRL	R1			; Send ALQ value of zero
50$:	BSBW	NT$CVT_BN4_IMG		; Store ALQ as an image field
	MOVB	XAB$B_AID(R6),(R5)+	; Store area identification field
	MOVB	XAB$B_BKZ(R6),(R5)+	; Store bucket size field
	MOVW	XAB$W_DEQ(R6),(R5)+	; Store default extension quantity field
	BSBW	NT$BUILD_TAIL		; Finish building message
	RSB				; Exit

	.SBTTL	NT$ENCODE_TIM_D

;++
; NT$ENCODE_TIM_D - builds the DAP Date and Time message using the Date and Time
;	XAB as input.
;
; Calling Sequence:
;
;	BSBW	NT$ENCODE_TIM_D
;
; Input Parameters:
;
;	R6	Date and Time XAB address
;	R7	NWA (=DAP) address
;	R8	FAB address
;	R9	IFAB address
;	R10	IFAB/FWA address
;	R11	Impure Area address
;
; Implicit Inputs:
;
;	User DATXAB
;	DAP$V_GEQ_V60
;
; Output Parameters:
;
;	R0-R5	Destroyed
;
; Implicit Outputs:
;
;	NWA$Q_XMT
;
; Completion Codes:
;
;	None
;
; Side Effects:
;
;	None
;
;--

NT$ENCODE_TIM_D::			; Entry point
	MOVL	#DAP$K_TIM_MSG,R0	; Get message type value
	BSBW	NT$BUILD_HEAD		; Construct message header

;
; Construct value for date and time menu field.
; Send only time fields that have a non-zero 64-bit time value, as zero means
; the current date and time, not 17-NOV-1858! (Actually only the upper 32-bits
; will be tested for zero.)
;

	ASSUME	DAP$V_CDT EQ 0
	ASSUME	DAP$V_CDT+1 EQ DAP$V_RDT
	ASSUME	DAP$V_RDT+1 EQ DAP$V_EDT
	ASSUME	DAP$V_EDT+1 EQ DAP$V_RVN
	ASSUME	DAP$V_RVN+1 EQ DAP$V_BDT

	CLRL	R4			; Initialize time menu field
	TSTL	XAB$Q_CDT+4(R6)		; Branch if creation date and time
	BEQL	10$			;  is zero
	BISB2	#DAP$M_CDT,R4		; Otherwise, send field
10$:	TSTL	XAB$Q_RDT+4(R6)		; Branch if revision date and time
	BEQL	20$			;  is zero
	BISB2	#DAP$M_RDT,R4		; Otherwise, send field
20$:	TSTL	XAB$Q_EDT+4(R6)		; Branch if expiration date and time
	BEQL	30$			;  is zero
	BISB2	#DAP$M_EDT,R4		; Otherwise, send field
30$:	BBC	#DAP$V_GEQ_V60,(R7),40$	; Branch if partner uses DAP before V6.0
	CMPB	XAB$B_BLN(R6),-		; Branch if length of XAB is too small
		#XAB$C_DATLEN		;  to contain BDT field (i.e., it's a
	BLSSU	40$			;  V2 length XAB)
	TSTL	XAB$Q_BDT+4(R6)		; Branch if backup date and time
	BEQL	40$			;  is zero
	BISB2	#DAP$M_BDT,R4		; Otherwise, send field
40$:	BISB2	#DAP$M_RVN,R4		; Send revision number field
	MOVB	R4,(R5)+		; Store TIMENU as an extensible field

;
; Now process each field.
;

	BBC	#DAP$V_CDT,R4,50$	; Branch if CDT is not to be included
	MOVAQ	XAB$Q_CDT(R6),R0	; Get address of 64-bit value for
					;  creation date and time
	BSBB	CONVERT_TIME		; Store CDT as an image field
50$:	BBC	#DAP$V_RDT,R4,60$	; Branch if RDT is not to be included
	MOVAQ	XAB$Q_RDT(R6),R0	; Get address of 64-bit value for
					;  revision date and time
	BSBB	CONVERT_TIME		; Store RDT as an image field
60$:	BBC	#DAP$V_EDT,R4,70$	; Branch if EDT is not to be included
	MOVAQ	XAB$Q_EDT(R6),R0	; Get address of 64-bit value for
					;  expiration date and time
	BSBB	CONVERT_TIME		; Store EDT as an image field
70$:	MOVW	XAB$W_RVN(R6),(R5)+	; Store revision number field
	BBC	#DAP$V_BDT,R4,80$	; Branch if BDT is not to be included
	MOVAQ	XAB$Q_BDT(R6),R0	; Get address of 64-bit value for
					;  backup date and time
	BSBB	CONVERT_TIME		; Store BDT as an image field
80$:	BSBW	NT$BUILD_TAIL		; Finish building message
	RSB				; Exit

;+
; This routine converts a time value in 64-bit binary format to an ASCII string.
; Then it stores the string as an 18-byte fixed length field in the DAP message
; with the first two digits of the year removed (per DAP spec).
;-

CONVERT_TIME:				; Entry point
	SUBL2	#<20+12>,SP		; Allocate space from the stack
	MOVL	SP,R2			; Save address of work area
	MOVL	#20,20(R2)		; Form descriptor of buffer to receive
	MOVL	SP,24(R2)		;  ASCII time string
	$ASCTIM_S-			; Convert binary time to ASCII time
		TIMLEN=28(R2)-		;  Address of word to receive string size
		TIMBUF=20(R2)-		;  Address of descriptor for buffer
		TIMADR=(R0)-		;  Address of 64-bit time value
		CVTFLG=#0		;  Flag set to request date and time
					; Assume success; ignore failure
					; Store time field omitting the two
					;  century digits
	PUSHR	#^M<R4>			; Save time menu mask
	MOVC3	#7,(R2),(R5)		; Copy bytes 1-7 of input string
	MOVC3	#11,2(R1),(R3)		; Copy bytes 9-20 of input string
	POPR	#^M<R4>			; Restore time menu mask
	MOVL	R3,R5			; Update next byte pointer
	ADDL2	#<20+12>,SP		; Deallocate space from the stack
	RSB				; Exit

	.SBTTL	NT$ENCODE_TIM_R

;++
; NT$ENCODE_TIM - builds the DAP Date and Time message using the Revision
;	Date and Time XAB as input.
;
; Calling Sequence:
;
;	BSBW	NT$ENCODE_TIM_R
;
; Input Parameters:
;
;	R6	Revision Date and Time XAB address
;	R7	NWA (=DAP) address
;	R8	FAB address
;	R9	IFAB address
;	R10	IFAB/FWA address
;	R11	Impure Area address
;
; Implicit Inputs:
;
;	User RDTXAB
;
; Output Parameters:
;
;	R0-R5	Destroyed
;
; Implicit Outputs:
;
;	NWA$Q_XMT
;
; Completion Codes:
;
;	None
;
; Side Effects:
;
;	None
;
;--

NT$ENCODE_TIM_R::			; Entry point
	MOVL	#DAP$K_TIM_MSG,R0	; Get message type value
	BSBW	NT$BUILD_HEAD		; Construct message header

;
; Construct value for date and time menu field.
; Send only time fields that have a non-zero 64-bit time value, as zero means
; the current date and time, not 17-NOV-1858! (Actually only the upper 32-bits
; will be tested for zero.)
;

	ASSUME	DAP$V_RDT LT 7
	ASSUME	DAP$V_RVN LT 7

	CLRL	R4			; Initialize time menu field
	TSTL	XAB$Q_RDT+4(R6)		; Branch if revision date and time
	BEQL	10$			;  is zero
	BISB2	#DAP$M_RDT,R4		; Otherwise, send field
10$:	BISB2	#DAP$M_RVN,R4		; Send revision number field
	MOVB	R4,(R5)+		; Store TIMENU as an extensible field

;
; Now process each field.
;

	BBC	#DAP$V_RDT,R4,30$	; Branch if RDT is not to be included
	MOVAQ	XAB$Q_RDT(R6),R0	; Get address of 64-bit value for
					;  revision date and time
	BSBB	CONVERT_TIME		; Store RDT as an image field
30$:	MOVW	XAB$W_RVN(R6),(R5)+	; Store revision number field
	BSBW	NT$BUILD_TAIL		; Finish building message
	RSB				; Exit

	.SBTTL	NT$ENCODE_PRO

;++
; NT$ENCODE_PRO - builds the DAP Protection message.
;
; Calling Sequence:
;
;	BSBW	NT$ENCODE_PRO
;
; Input Parameters:
;
;	R6	Protection XAB address
;	R7	NWA (=DAP) address
;	R8	FAB address
;	R9	IFAB address
;	R10	IFAB/FWA address
;	R11	Impure Area address
;
; Implicit Inputs:
;
;	User PROXAB
;
; Output Parameters:
;
;	R0-R5	Destroyed
;
; Implicit Outputs:
;
;	NWA$Q_XMT
;
; Completion Codes:
;
;	None
;
; Side Effects:
;
;	None
;
;--

NT$ENCODE_PRO::				; Entry point
	PUSHR	#^M<R11>		; Save register
	MOVL	#DAP$K_PRO_MSG,R0	; Get message type value
	BSBW	NT$BUILD_HEAD		; Construct message header

	ASSUME	DAP$V_OWNER LT 7
	ASSUME	DAP$V_PROSYS LT 7
	ASSUME	DAP$V_PROOWN LT 7
	ASSUME	DAP$V_PROGRP LT 7
	ASSUME	DAP$V_PROWLD LT 7

	CLRL	R11			; Initialize temp PROMENU
	TSTL	XAB$L_UIC(R6)		; Is UIC value [0,0]?
	BEQL	10$			; Branch if yes
	BISB2	#DAP$M_OWNER,R11	; Set OWNER bit in temp PROMENU
10$:	CMPW	#-1,XAB$W_PRO(R6)	; Are the 4 protection fields defaulted?
	BEQL	20$			; Branch if yes
	BISB2	#<DAP$M_PROSYS!-	; Set temp PROMENU bits
		  DAP$M_PROOWN!-	;
		  DAP$M_PROGRP!-	;
		  DAP$M_PROWLD>,R11	; 
20$:	TSTL	R11			; Were both (OWNER & PROT) defaulted?
	BNEQ	30$			; Branch if not
	BRW	70$			; Go finish up message
30$:	MOVB	R11,(R5)+		; Store PROMENU as an extensible field

;
; Include the OWNER field in the message.
;

	BBC	#DAP$V_OWNER,R11,60$	; Branch if no OWNER field
	SUBL2	#<16+8+8+4>,SP		; Allocate space from the stack
	MOVL	SP,R2			; Save address of work area
	MOVL	#16,16(R2)		; Form descriptor of buffer to receive
	MOVL	SP,20(R2)		;  ASCII string
	MOVZBL	W^T_UIC,24(R2)		; From descriptor of FAO control
	MOVAB	W^T_UIC+1,28(R2)	;  string
	MOVZWL	XAB$W_GRP(R6),R0	; Get group UIC value
	MOVZWL	XAB$W_MBM(R6),R1	; Get member UIC value
	$FAO_S-				; Format the UIC string
		CTRSTR=24(R2)-		;  FAO control string
		OUTLEN=32(R2)-		;  Address to receive string length
		OUTBUF=16(R2)-		;  Address of buffer descriptor
		P1=R0-			;  Group number of file owner
		P2=R1			;  Member number of file owner
	BLBS	R0,40$			; Branch on success
	CLRB	(R5)+			; Send null OWNER field
	BRB	50$			;
40$:	MOVZWL	32(R2),R0		; Get length of returned string
	MOVB	R0,(R5)+		; Store OWNER as an image field
	MOVC3	R0,(R2),(R5)		; Copy owner string to message
	MOVL	R3,R5			; Update next byte pointer
50$:	ADDL2	#<16+8+8+4>,SP		; Deallocate space from the stack

;
; Construct the four protection fields: PROSYS, PROOWN, PROGRP, and PROWLD.
;

60$:	EXTZV	#DAP$V_PROSYS,#4,R11,R0	; Get the protection bits to check
	BEQL	70$			; Branch if they're all defaulted

	ASSUME	DAP$V_RED_ACC EQ XAB$V_NOREAD
	ASSUME	DAP$V_WRT_ACC EQ XAB$V_NOWRITE
	ASSUME	DAP$V_EXE_ACC EQ XAB$V_NOEXE
	ASSUME	DAP$V_DLT_ACC EQ XAB$V_NODEL

	ASSUME	DAP$V_RED_ACC LT 7
	ASSUME	DAP$V_WRT_ACC LT 7
	ASSUME	DAP$V_EXE_ACC LT 7
	ASSUME	DAP$V_DLT_ACC LT 7

	MOVZWL	XAB$W_PRO(R6),R0	; Get protection value
	EXTZV	#XAB$V_SYS,#4,R0,R1	; Store system protection field
	MOVB	R1,(R5)+		;  as an extensible field
	EXTZV	#XAB$V_OWN,#4,R0,R1	; Store owner protection field
	MOVB	R1,(R5)+		;  as an extensible field
	EXTZV	#XAB$V_GRP,#4,R0,R1	; Store group protection field
	MOVB	R1,(R5)+		;  as an extensible field
	EXTZV	#XAB$V_WLD,#4,R0,R1	; Store world protection field
	MOVB	R1,(R5)+		;  as an extensible field
70$:	BSBW	NT$BUILD_TAIL		; Finish building message
	POPR	#^M<R11>		; Restore register
	RSB				; Exit

	.END				; End of module
