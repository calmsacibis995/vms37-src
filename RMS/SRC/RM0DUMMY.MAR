	$BEGIN	RM0DUMMY,036,L$RMS0DUMMY,<DUMMY ROUTINES>,<NOWRT,QUAD>

;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;	Modified By:
;
;	V02-036	TMK0023		Todd M. Katz	 	14-Dec-1981
;		Change entry point from RM$ERRORG to RM$$ERRORG to fix
;		broken branch.
;
;	V02-035	KPL0001		Peter Lieberwirth	 6-July-1981
;		Add a testpoint to count the number of times RMS
;		waits on record lock conflict.  Also add testpoints
;		to count calls to RM$LOCK and RM$QUERY_LCK.
;
;	V02-034	REFORMAT	Frederick E. Deen, Jr.	    25-Jul-1980
;		This code was reformatted to adhere to RMS standards
;
;	V033	JAK0026		J A Krycka	03-Oct-1979
;		Add, delete, and rearrange network testpoint counters.
;
;	V032	JAK0006		J A Krycka	15-Jan-1978
;		Reserve TPT space for use by network file name parsing code.
;
;	V031	RAN0003		R A Newell	19-Dec-1978
;		File sharing code enhancements
;
; REVISION HISTORY:
;
;	C Saether	 01-Nov-1978   10:00
;	X0001 - Make bug check non-fatal and delete process
;

	$RMSDEF

;++
; RM$BUG - RMS bug check routine
;
; RM$ERRORG - Error in file organization
;
; NOTE: The alignment of this code is critical in that the bugcheck
;	codes are not allowed to cause a page fault.
;--

RM$BUG::
					;
	PUSHL	R2			; free up a register
	CVTBL	@4(SP),R2		; get RMS bug code
	BGTR	10$			; branch if not fatal
	BUG_CHECK	RMSBUG,WARN	; log the bug check
	$DELPRC_S			; delete the process
10$:	BUG_CHECK	RMSBUG,WARN	; log the error
	POPR	#^M<R2>			; restore r2
	INCL	(SP)			; skip past bug code
	RSB				; back to caller
RM$$ERRORG::
					;
	RMSTBUG	FTL$_BADORGCASE

;
; Set default error code to RMS$_ENV
;

ENVERR:	RMSERR	ENV
	RSB


;++
;
; RMS$GQ_PATCH - Space for patching the RMS image.
;
;--

	.PSECT	ZZZZ,PAGE,NOWRT
RMS$GQ_PATCH::
	.LONG	<4*512>-8		; 4 pages worth
	.LONG	.+4			; starting immediately
	.BLKB	<4*512>-8


;++
; Define testpoint offsets for counters in PIO segment.
;--

	.MACRO	F NAM
	TPT$L_'NAM==..CNT
	..CNT=..CNT+4
	.ENDM	F
	..CNT=0

	F	ACCESS			; # of file access calls
	F	ASTDSA			; # of times ASTS disabled
	F	CLOSE			; # of times SYS$CLOSE function called
	F	COMCLNU			; # of DISCONNECT cleanups
	F	CONNECT			; # of times SYS$CONNECT function called
	F	CONNECT2		; # of calls to RM$CONNECT2
	F	CREATE			; # of times SYS$CREATE function called
	F	CREATE1			; # of calls to RM$CREATE1
	F	CREATE2			; # of calls to RM$CREATE2
	F	DEACCES			; # of file DEACCESS calls
; 10
	F	DELETE			; # of times SYS$DELETE function called
	F	DELETE2			; # of calls to RM$DELETE2
	F	DISCON0			; # of times SYS$DISCONNECT function called
	F	DISCON1			; # of calls to RM$DISCONNECT1
	F	DISCON2			; # of calls to RM$DISCONNECT2
	F	DISPLAY			; # of times SYS$DISPLAY function called
	F	ERASE			; # of times SYS$ERASE function called
	F	EXTEND			; # of times SYS$EXTEND function called
	F	FCPEXT			; # of FCP extends
	F	FCPFNC			; # of FCP functions requested
; 20
	F	FCPFNCA			; # of FCP functions requested (alternate entry point)
	F	FIND			; # of times SYS$FIND function called
	F	FIND1			; # of SEQ. org. FINDs
	F	FIND2			; # of REL. org. FINDs
	F	FLUSH			; # of times SYS$FLUSH function called
	F	FREE			; # of times SYS$FREE function called
	F	GET			; # of times SYS$GET function called
	F	GET1			; # of SEQ. org. GETs
	F	GET2			; # of REL. org. GETs
	F	GETBLKD			; # of SEQ. org. GETs to block devices
; 30
	F	INDPPF			; # of indirect opens of PPF'S
	F	LOCK			; # of times RM$LOCK called
	F	MODIFY			; # of times SYS$MODIFY function called
	F	MODIFY2			; # of calls to 'escape' MODIFY
	F	NXTBLK1			; # of calls to RM$NXTBLK1
	F	NXTVOL			; # of times SYS$NXTVOL function called
	F	OPEN			; # of times SYS$OPEN function called
	F	OPEN1			; # of SEQ. org. OPENs
	F	OPEN2			; # of REL. org. OPENs
	F	PARSE			; # of times SYS$PARSE function called
; 40
	F	PARSES			; # of calls to PARSE_STRING routine (RM0XPFN)
	F	PUT			; # of times SYS$PUT function called
	F	PUT1			; # of SEQ. org. puts
	F	PUT2			; # of REL. org. puts
	F	PUTBLD			; # of SEQ. org. puts to block devices
	F	PUTREC1			; # or SEQ. org. puts to unit record devices
	F	PUTSET1			; # of calls to RM$PUTSET1
	F	PUTSET2			; # of calls to RM$PUTSET2
	F	QUERY_LCK		; # of times RM$QUERY_LCK called
	F	READ			; # of times SYS$READ function called
; 50
	F	REC_WAT			; # of times waited on a record lock
	F	RELBLK1			; # of calls to RM$RELBLK1
	F	RELEASE			; # of buffer RELEASEs
	F	RELEASE0		; # of times SYS$RELEASE function called
	F	RENAME			; # of times SYS$RENAME function called
	F	REWIND			; # of times SYS$REWIND function called
	F	RUNDWN			; # of times SYS$RMSRUNDWN called
	F	SEARCH			; # of times SYS$SEARCH, SYS$REMOVE, and SYS$ENTER functions called
	F	SEQRD			; # of SEQ. org. READ QIO's
	F	SEQWTBD			; # of SEQ. org. WRITE QIO's for block devices
; 60
	F	SEQWTUR			; # of SEQ. org. WRITEs to unit record devices
	F	SETDDIR			; # of times SYS$SETDDIR function called
	F	SETDFPROT		; # of times SYS$SETDFPROT function called
	F	SETDID			; # of calls to RM$SETDID routine (directory id)
	F	SPACE			; # of times SYS$SPACE function called
	F	STALAST			; # of ASTs processed at RM$THREADGO
	F	STALL			; # of RMS stalls
	F	STALLAL			; # of RMS stalls requiring asb allocation
	F	STALLSIFB		; # of times STALL SIFAB is called
	F	TRUNCATE		; # of times SYS$TRUNCATE function called
; 70
	F	UPDATE			; # of times SYS$UPDATE function called
	F	UPDATE1			; # of SEQ. org. updates
	F	UPDATE2			; # of REL. org. updates
	F	WAIT			; # of times SYS$WAIT function called
	F	WRITE			; # of times SYS$WRITE function called
	F	WTLST1			; # of calls to RM$WTLST1
	F	XLATLOG			; # of RMS logical device name translations (rm0xpfn)
	F	XPFN			; # of calls to RM$XPFN
;
; network specific testpoints.
;

	F	NTACC_DAP		; # of network ACCESS calls at the DAP level
	F	NTACC_NSP		; # of network ACCESS calls at the NSP level
; 80
	F	NTCLOSE			; # of network CLOSE function calls
	F	NTCONN			; # of network CONNECT function calls
	F	NTCREATE		; # of network CREATE function calls
	F	NTDAP_RCV		; # of network DAP message receive QIO's
	F	NTDAP_XMT		; # of network DAP message transmit QIO's
	F	NTDEACCES		; # of network DEACCESS calls
	F	NTDELETE		; # of network DELETE function calls
	F	NTDISCON		; # of network DISCONNECT function calls
	F	NTDISPLAY		; # of network DISPLAY function calls
	F	NTERASE			; # of network ERASE function calls
; 90
	F	NTEXTEND		; # of network EXTEND function calls
	F	NTFIND			; # of network FIND function calls
	F	NTFLUSH			; # of network FLUSH function calls
	F	NTFREE			; # of network FREE function calls
	F	NTGET			; # of network GET function calls
	F	NTNXTVOL		; # of network NXTVOL function calls
	F	NTOPEN			; # of network OPEN function calls
	F	NTPUT			; # of network PUT function calls
	F	NTREAD			; # of network READ function calls
	F	NTRELEASE		; # of network RELEASE function calls
; 100
	F	NTRENAME		; # of network RENAME function calls
	F	NTREWIND		; # of network REWIND function calls
	F	NTSEARCH		; # of network SEARCH function calls
	F	NTSPACE			; # of network SPACE function calls
	F	NTTRUNC			; # of network TRUNCATE function calls
	F	NTUPDATE		; # of network UPDATE function calls
	F	NTWRITE			; # of network WRITE function calls
	F	NTXLATLOG		; # of RMS logical node name translations (rm0xpfn)
; 108
	.END
