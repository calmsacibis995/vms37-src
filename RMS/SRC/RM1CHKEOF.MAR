	$BEGIN	RM1CHKEOF,004,$RMS1,<CHECK FOR AT OR BEYOND EOF>

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
; Facility: rms32
;
; Abstract:
;	this module checks for current record position at or
;	beyond end of file.
;
; Environment:
;		star processor running starlet exec.
;
; Author: L F Laverdure,	 creation date: 17-FEB-1977
;
; Modified By:
;
;	V02-004	REFORMAT	C D Saether	30-Jul-1980	23:00
;
;--
;


	.SBTTL	DECLARATIONS

;
; Include Files:
;

;
; Macros:
;

	$IRBDEF
	$IFBDEF

;
; Equated Symbols:
;

;
; Own Storage:
;


	.SBTTL	RM$CHKEOF1

;++
; RM$CHKEOF1 - make extended end of file check
;
; this module checks for the current record position at or
; beyond the logical end of file, setting
; the irb$v_eof bit if so.
;
; Calling sequence:
;
;	BSBW	RM$CHKEOF1
;
; Input Parameters:
;
;	r10	ifab addr
;	r9	irab addr
;
; Implicit Inputs:
;
;	irb$v_eof
;
; Output Parameters:
;
;	irb$v_eof set to 1 if at or beyond eof, else left clear.
;
; Implicit Outputs:
;
;	none
;
; Completion Codes:
;
;	none
;
; Side Effects:
;
;	none
;
;--
;
;--

RM$CHKEOF1::
	BBS	#IRB$V_EOF,(R9),EXIT	; branch if already eof
	CMPL	IRB$L_NRP_VBN(R9),IFB$L_EBK(R10) ; at eof?
	BLSSU	EXIT			; branch if not yet
	BGTRU	10$			; branch if definitely

;
; in current eof block
; compare the byte offsets
;

	CMPW	IRB$W_NRP_OFF(R9),IFB$W_FFB(R10) ; how about byte position?
	BLSSU	EXIT			; nope - not there yet
10$:	SSB	#IRB$V_EOF,(R9)		; eof - set the flag
EXIT:	RSB
	.END
