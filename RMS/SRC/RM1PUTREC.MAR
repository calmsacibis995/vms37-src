	$BEGIN	RM1PUTREC,022,$RMS1,<INTERNAL PUT SEQ FOR UNIT RECORD DEVICE>

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
; Facility: rms32
;
; Abstract:
;		this module performs a $put for the sequential file
;		organization on a unit record device.
;
; Environment:
;		star processor running starlet exec.
;
; Author: L F Laverdure,	 creation date: 17-FEB-19-77
;
; Modified By:
;
;	V02-022	KPL0001		Peter Lieberwirth	31-Dec-1981
;		Fix more broken branches.
;
;	V02-021	TMK0043		Todd M. Katz		26-Dec-1981
;		Fix a broken branch by changing a BRW MOVDAT1 to a JMP.
;
;	V02-020	RAS0052		Ron Schaefer		15-Dec-1981
;		Fix carriage control for stm files, and non-CCL devices.
;
;	V02-019	REFORMAT	Maria del C. Nasr	24-Jul-1980
;
;	V018	JAK0033		J A Krycka	4-JAN-1980	11:00
;		Perform appropriate carriage control handling for network
;		process permanent files.
;
;	v017	CDS0062		C D Saether	7-DEC-1979	13:50
;		return second longword iosb in stv of rab
;
;	v016	PSK0001		P S Knibbe	23-NOV-1979	12:30
;		set irab end of file bit on foreign magtape put
;
;	v015	CDS0030		C D Saether	11-SEP-1979	16:15
;		stop breaking up records to terminals also
;
;	v014	CDS0027		C D Saether	18-AUG-1979	00:55
;		put to unit record device goes straight from user buffer
;		terminals are only device where records get broken up
;
;	V012	JAK0015		J A Krycka	15-DEC-1978	11:00
;		Fix network bug that drops first character of record for
;		files with fortran carriage control.
;
;--
;


	.SBTTL	DECLARATIONS

;
; Include Files:
;

;
; Macros:
;

	$IRBDEF
	$RABDEF
	$IFBDEF
	$DEVDEF
	$FABDEF
	$BDBDEF
	$IMPDEF
	$RMSDEF
	
;
; Equated Symbols:
;

	SPACE=32
	LF=10
	VT=11
	FF=12
	CR=13

;
; Own Storage:
;
;
;  fortran to 'pre/post' standard carriage control mapping table
;

CCTL_TABLE:
					; entries are fortran byte, pre, post
	.BYTE	^A/ /,1,128+CR		; " " - single space
	.BYTE	^A/0/,2,128+CR		; "0" - double space
	.BYTE	^A/1/,128+FF,128+CR	; "1" - form feed
	.BYTE	^A/+/,0,128+CR		; "+" - overprint
	.BYTE	^A/$/,1,0		; "$" - prompt
	.BYTE	0,0,0			; null

	.SBTTL	RM$MAPFTN - ROUTINE TO CONVERT FROM FTN TO PRN FORMAT

;++
; RM$MAPFTN - This routine converts the fortran carriage control
;	    character in R0 into the equivalent pre/post carriage
;	    control word.
;
; Calling sequence:
;
;	bsbw	rm$mapftn
;
; inputs:
;
;	r0	fortran carriage control character
;
; outputs:
;
;	r2	pre/post carriage control word
;
; note:  this routine always succeeds. no other registers destroyed.
;
;--

RM$MAPFTN::
	MOVAB	B^CCTL_TABLE,R2		; addr of mapping table
10$:	CMPB	R0,(R2)+		; match on char?
	BEQL	MAPCTL			; branch if yes
	TSTW	(R2)+			; bump to next entry
	BNEQ	10$			; continue if more

;
;  no match  -  give default of line feed before, cr after
;

	ASSUME	IRB$B_POST_CCTL EQ IRB$B_PRE_CCTL+1
	MOVW	#1+<<128+CR>@8>,R2	; lf-rec-cr
	RSB

;
;  pick up pre and post cctl from table
;

MAPCTL:	MOVW	(R2),R2			; get pre and post
	RSB

	.SBTTL	RM$PUT_UNIT_REC

;++
; RM$PUT_UNIT_REC - This routine performs a $PUT to a unit
;	record device, setting carriage control as required
;	and handling crossing of block boundaries.
;
; Calling sequence:
;
;	bsbw	rm$put_unit_rec
;
; Input Parameters:
;
;	r11	impure area pointer
;	r10	ifab addr
;	r9	irab addr
;	r8	rab addr
;	r6	user record size
;	r5	user record addr (first block probed)
;
; Implicit Inputs:
;
;	the contents of the rab and related irab and ifab.
;
; Output Parameters:
;
;	r0	status code
;	r1-r7	destroyed
;
; Implicit Outputs:
;
;	The RAB and the internal structures are updated to reflect
;	the results of the put. (see functional spec).
;
; Completion Codes:
;
;	standard rms.
;
; Side Effects:
;
;	none
;
;--


RM$PUT_UNIT_REC::
	$TSTPT	PUTREC1
	MOVL	IRB$L_CURBDB(R9),R4	; get current bdb addr
	BNEQ	10$
	MOVL	IRB$L_NXTBDB(R9),R4	; so use nxtbdb instead then

;++
;
; determine required carriage control
;
; 4 types of carriage control may be specified:
;	none		= record
;	fab$v_cr	= lf-record-cr
;	fab$v_ftn	= 1st char of record determines, as follows:
;			space = lf - record - cr
;			0     = lf,lf - record - cr
;			1     = ff - record - cr
;			$     = lf - record
;			+     = record - cr
;			null  = record
;			other = lf - record - cr
;	fab$v_prn	= print file carriage control specified in vfc header
;			  as a pre and post field indicating carriage control
;			  to be performed before and after printing the
;			  record.  the pre and post carriage control bytes
;			  have the following format:
;
;			    bit 7 = 0
;				bits 6-0 give # of new lines
;			    bit 7 = 1
;			      bit 6 = 0
;				bit 5 = 0
;				  bits 4-0 give the ascii control character
;				  to print (c0 set)
;				bit 5 = 1
;				  bits 4-0 give the ascii control character
;				  to print (c1 set)
;			      bit 6 = 1
;				bit 5 = 0
;				  bits 4-0 have device-specific interpretation
;				  (reserved)
;				bit 5 = 1
;				  (reserved)
;
;--

	ASSUME	IRB$B_POST_CCTL EQ IRB$B_PRE_CCTL+1
	ASSUME	IMP$W_RMSSTATUS EQ 0
	ASSUME	IMP$V_IIOS EQ 0
10$:	BBC	#DEV$V_CCL,-		; no cctl if not ccl device
		IFB$L_PRIM_DEV(R10),MOVDAT
	CLRW	IRB$B_PRE_CCTL(R9)	; initialize (null carriage ctl)
	MOVB	IFB$B_RAT(R10),R2	; get rat for file

;
; for a network $put function, determine pre and post carriage control only if
; it is a process permanent file in print file format.
; note:	this avoids fortran carriage control processing for network
;	non-process permanent files at the local node which is correct
;	because the carriage control character must be passed to the
;	remote fal where it will be handled.
;

	BBC	#IFB$V_DAP,(R10),20$	; branch if not network file access
	BLBS	(R11),MOVDAT		; branch if not ppf
	BBC	#FAB$V_PRN,R2,MOVDAT	; branch if not a 'print' file
	BRB	30$			; process pre/post carriage control
20$:	BBC	#FAB$V_PRN,R2,NOTPRN	; branch if not a 'print' file
	BLBS	(R11),PRNFMT		; branch if not ppf

;
;  this is a process-permanent print file.
;  extract rat value from isi.
;

30$:	EXTZV	#RAB$V_PPF_RAT,#RAB$S_PPF_RAT,RAB$W_ISI(R8),R2
	BBS	#FAB$V_PRN,R2,PRNFMT	; branch if print format

;
;  check for cr, ftn, or no carriage control
;

NOTPRN:	BBS	#FAB$V_CR,R2,LF_REC_CR	; branch if 'cr'
	ASSUME	FAB$V_FTN EQ 0
	BLBS	R2,FTN_REC		; branch if FTN cctl

;
;  null carriage control.  do nothing unless it's a stream file.
;

	ASSUME	FAB$C_STM+1 EQ FAB$C_STMLF
	ASSUME	FAB$C_STMLF+1 EQ FAB$C_STMCR
	ASSUME	FAB$C_STMCR EQ FAB$C_MAXRFM
	CMPB	IFB$B_RFMORG(R10),-	; stm file?
		#FAB$C_STM
	BLSSU	MOVDAT			; nope, proceed
	TSTW	R6			; zero len record
	BEQL	LF_REC_CR		; needs a terminator
	PUSHR	#^M<R1,R4,R5>		; save size, record and buff addr
	MOVAB	-1(R5)[R6],R1		; setup for term check
	MOVL	#1,R0			; check only last char
	MOVZBL	IFB$B_RFMORG(R10),R4	; get format type
	BSBW	RM$STM_TERM		; check for terminator
	POPR	#^M<R1,R4,R5>		; restore regs
	BLBS	R0,MOVDAT		; already have a terminator
	BRB	LF_REC_CR		; add one

;
;  fortran carriage control.  pick up control byte and interpret.
;

FTN_REC:TSTL	R6			; zero length record?
	BEQL	LF_REC_CR		; branch if yes (same as blank)
	DECL	R6			; decrement size
	MOVB	(R5)+,R0		; get fortran cctl byte
	BSBW	RM$MAPFTN		; and map to pre/post format
	BRB	MOVPREPOST

;
;  'prn' carriage control.
;  record header buffer contains explicit 'standard' carriage control.
;

PRNFMT:	MOVL	RAB$L_RHB(R8),R0	; get record header buffer addr
	BEQL	MOVDAT			; branch if none (=null cctl)
	IFNORD	#2,(R0),ERRRHB		; branch if rhb not readable by caller
	MOVW	(R0),IRB$B_PRE_CCTL(R9)	; set carriage control
	BRB	MOVDAT

;
;  line feed before, carriage return after record
;

LF_REC_CR:
	MOVW	#1+<<128+CR>@8>,R2	; convert to pre/post format

MOVPREPOST:
	MOVW	R2,IRB$B_PRE_CCTL(R9)	; save in irab for print


;
; move data record into buffer
;

MOVDAT:
	BBS	#IFB$V_DAP,(R10),NTMOVE	; branch if network file access
MOVDAT1:
					; return from ntmove
	MOVL	R5,BDB$L_CURBUFADR(R4)	; addr of buffer to put from
	MOVW	R6,BDB$W_NUMB(R4)	; size to put
	MOVW	IRB$B_PRE_CCTL(R9),-
		 BDB$B_PRE_CCTL(R4)	; reset carriage control
	BSBW	RM$SEQWTUR		; put the record
	BLBC	R0,EXIT
	BBC	#DEV$V_SQD,-
		 IFB$L_PRIM_DEV(R10),10$; branch if not magtape
	BBC	#DEV$V_FOR,-
		 IFB$L_PRIM_DEV(R10),10$; branch if not foreign
	SSB	#IRB$V_EOF,(R9)		; set end of file bit
10$:
	MOVL	IRB$L_IOS4(R9),-
		 RAB$L_STV(R8)		; 2nd longword iosb to stv
EXIT:	CLRQ	RAB$L_RFA0(R8)		; zero rfa
	BRW	RM$EXRMS

;++
;
;  handle bad record header buffer error
;
;--

ERRRHB:	$PSECT_BR	L$RMS0
	RMSERR	RHB
	BRW	EXIT
	$PSECT_RESTORE


;++
;
; network specific code to move record header (if vfc format) and data
; record into one bdb buffer. note: size of header + record can not
; exceed device buffer size ( = bdb buffer size) for this release!!!
;
;--

NTMOVE:	$PSECT_BR	NF$NETWORK

;
; check to see if record plus header fit
; ifb$b_fsz is zero for non-vfc record types
;

	MOVZBL	IFB$B_FSZ(R10),R0	; fixed size into r0
	ADDW2	R6,R0			; total size in r0
	BVS	35$			; error if overflow on add
	CMPW	R0,BDB$W_SIZE(R4)	; fit in buffer?
	BGTRU	35$			; error if record larger
	PUSHL	R4			; save bdb addr
	MOVL	BDB$L_ADDR(R4),R3	; addr of buffer to move to
	CMPB	IFB$B_RFMORG(R10),-
		 #FAB$C_VFC		; is this vfc rec?
	BNEQ	20$			; go move it

;
; move header and record into one buffer and put as one record
;

	MOVL	R3,R7			; save bdb buffer address
	MOVQ	R5,-(SP)		; push rec addr and size onto stack
	MOVZBL	IFB$B_FSZ(R10),R6	; size of record header
	MOVL	RAB$L_RHB(R8),R5	; address of header buffer
	BEQL	50$			; branch if none spec'd
	BSBW	RM$PROBEREAD		; check out header buffer
	BLBC	R0,40$			; branch if problems
	MOVC3	R6,(R5),(R3)		; move header part
10$:	MOVQ	(SP)+,R5		; rec addr to r5, rec len to r6
	BLBS	(R11),20$		; branch if not ppf
	BBC	#FAB$V_PRN,IFB$B_RAT(R10),20$
					; branch if not a 'print' file
	MOVW	IRB$B_PRE_CCTL(R9),(R7)	; jam pre/post carriage control into
					;  record header if ppf and prn set
20$:	MOVC3	R6,(R5),(R3)		; move record beyond header
	MOVL	(SP)+,R4		; get back bdb addr
	MOVL	BDB$L_ADDR(R4),R5	; addr of buffer to r5
	SUBL3	R5,R3,R6		; total length in r6
	JMP	MOVDAT1			; rejoin mainline

;
; error handling
;

35$:	RMSERR	RSZ			; record too big
	BRB	45$			; exit
40$:	POPR	#^M<R0,R1,R2>		; clean off stack - not same regs
	RMSERR	RHB			; can not access rhb
45$:	JMP	EXIT			; exit
50$:	MOVC5	#0,(R3),#0,R6,(R3)	; supply zero record header
	BRB	10$			;
	$PSECT_RESTORE
	.END
