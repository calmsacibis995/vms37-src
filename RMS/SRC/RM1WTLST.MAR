	$BEGIN	RM1WTLST,013,F$RMSCLOSE1,<WRITE LAST BLOCK SEQ.>

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
; Facility: rms32
;
; Abstract:
;
;	this module writes out the last block
;	of a sequential file if at eof and dirty.
;
; Environment:
;		star processor running starlet exec.
;
; Author: l f laverdure,	 creation date: 29-march-77
;
; Modified By:
;
;	V02-013	JWH0001		Jeffrey W. Horn	20-Jan-1982
;		On flush clear IFB$W_FFB if magtape.
;
;	V02-012	RAS0020		Ron Schaefer	6-Aug-1981
;		Correct minimum buffer size for magtape.
;
;	V02-011	RAS0016		Ron Schaefer	6-Aug-1981
;		Add stream file support.
;
;	V02-010	REFORMAT	Ron Schaefer	30-Jul-1980	09:13
;		Reformat the source.
;
;--
;


	.SBTTL	DECLARATIONS

;
; Include Files:
;

;
; Macros:
;

	$IFBDEF
	$IRBDEF
	$BDBDEF
	$FABDEF
	$RABDEF
	$DEVDEF

;
; Equated Symbols:
;

;
; Own Storage:
;


	.SBTTL	RM$WTLST1 - WRITE LAST BLOCK, PADDING IF AT EOF

;++
; RM$WTLST1:	write last block, padding if at eof
;
; Calling sequence:
;
;	bsbw	rm$wtlst1
;
; Input Parameters:
;
;	r11	impure area address
;	r10	ifab address
;	r9	irab address
;	r8	rab address
;
; Implicit Inputs:
;
; the contents of the various internal structures,
; in particular:
;
;	irb$l_curbdb
;	irb$v_eof
;	irb$w_nrp_off
;	bdb$v_drt
;	bdb$w_numb
;	ifb$b_rfm
;	ifb$v_ansi_d
;	ifb$l_prim_dev
;	the various inputs to rm$relblk1 and rm$mapblk1
;
; Output Parameters:
;
;	r0	status code
;	r1-r4,ap destroyed
;
; Implicit Outputs:
;
;	the current bdb is released, with
;	padding and writing if necessary.
;
; Completion Codes:
;
;	standard rms, as per rm$relblk1.
;
; Side Effects:
;
;	may have switched to running at ast level.
;
;--

RM$WTLST1::
	$TSTPT	WTLST1
	MOVL	IRB$L_CURBDB(R9),R4	; get current bdb
	BEQL	WTLXIT			; branch if none
	BBC	#IRB$V_EOF,(R9),REL1	; branch if not eof
	BBC	#BDB$V_DRT,BDB$B_FLGS(R4),REL1 ; or if buffer not dirty

;
; pad out last block if not full or make
; it a short write if appropriate
; (note: unit record device will not be dirty, hence won't come here).
;

	PUSHL	R7
	BSBW	RM$MAPBLK1		; map the buffer
					; r1 = buffer addr
					; r7 = buffer end addr+1
	MOVZWL	IRB$W_NRP_OFF(R9),R2	; get offset in block
	BNEQ	10$			; branch if non-zero
	BBC	#DEV$V_SQD,IFB$L_PRIM_DEV(R10),RELEASE ; branch if not magtape

;
;!!!!!
;
;  NOTE:
;	The above test causes a magtape that has been truncated (the only case
;	that could leave a zero length buffer dirty) to have a block written
;	back out so that the truncate really takes effect.  For variable length
;	records an entire block of pad characters is written.  For fixed length
;	records an attempt is made to write a zero length block, which eventually
;	fails.  This is a legitimate bug, which should be fixed in truncate by
;	telling the magtape acp that the function is truncate, not backspace,
;	if and when the acp gets the function.  When this occurs the above code
;	to special case for magtape can be reworked.
;
;!!!!!
;

10$:	ADDL2	R2,R1			; get addr of next byte
	SUBL3	R1,R7,R0		; get # bytes left
	BSBW	RM$PADBLK1		; pad out the block
	BBC	#DEV$V_SQD,IFB$L_PRIM_DEV(R10), -
		RELEASE			; branch if not magtape
	CLRW	IFB$W_FFB(R10)		; clear first free byte field
	CMPB	IFB$B_RFMORG(R10),#FAB$C_FIX ; fixed length records?
	BNEQ	RELEASE

;
; fixed length records.
; if tape, write a short block. (at least 18 bytes)
;

	ADDW3	#1,IRB$W_NRP_OFF(R9),R2	; round up # bytes used for magtape
	BICW2	#1,R2
	CMPW	R2,#18			; buffer big enough?
	BGEQU	20$			; OK
	MOVW	#18,R2			; at least 18 (already padded)
20$:	MOVW	R2,BDB$W_NUMB(R4)	; and set length of buffer

;
; release buffer, writing and extending if needed
;

RELEASE:
	MOVL	(SP)+,R7
REL1:	BSBW	RM$RELBLK1
	BLBS	R0,WTLXIT		; branch if all ok
	PUSHL	R0			; save status
	PUSHL	RAB$L_STV(R8)
	BSBB	WTLXIT			; quiet all other io if any
	MOVL	(SP)+,RAB$L_STV(R8)	; restore status
	POPR	#^M<R0>
	RSB

;
;  quiet all rah/wbh io if any and exit
;

WTLXIT:	BRW	RM$QUIET_SEQMBF		; make sure all io is done and return

	.END
