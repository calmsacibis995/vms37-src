	$BEGIN	NT0GET,038,NF$NETWORK,<NETWORK GET/FIND RECORD>


;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; Facility: RMS
;
; Abstract:
;
;	This module communicates with the File Access Listener (FAL) at the
;	remote node to perform the get and find operations.
;
; Environment: VAX/VMS, executive mode
;
; Author: James A. Krycka,	Creation Date:	09-DEC-1977
;
; Modified By:
;
;	V02-038	JAK0072		J A Krycka	14-FEB-1982
;		Fix bug in packaging a non-string key value for indexed file
;		access. Also fix problem with use of PROBE instruction.
;
;	V02-037	JAK0066		J A Krycka	01-OCT-1981
;		Add support for stream file format.
;
;	V02-036	JAK0063		J A Krycka	26-AUG-1981
;		Cleanup.
;
;	V02-035	KRM0018		K R Malik	01-JUL-1981
;		Support random access by RFA for $GET and $FIND.
;
;	V02-034	JAK0050		J A Krycka	22-NOV-1980
;		Fix bug in handling of end-of-file condition when not in DAP
;		file transfer mode.
;
;	V02-033	JAK0048		J A Krycka	23-SEP-1980
;		Fix access violation in $FIND function for network access.
;
;	V02-032	JAK0047		J A Krycka	14-AUG-1980
;		Declare RMS$_FTM error if the FOP SQO bit is set and the RAC
;		value is not SEQ on a call to $GET.
;
;	V02-031	JAK0044		J A Krycka	28-APR-1980
;		When retrieving a stream ASCII file, remove trailing CRLF from
;		records with more than 253 characters.
;
;	V02-030	REFORMAT	J A Krycka	26-JUL-1980
;
;--

	.SBTTL	DECLARATIONS

;
; Include Files:
;

	$BDBDEF				; Define BDB symbols
	$DAPPLGDEF			; Define DAP prologue symbols
	$DAPHDRDEF			; Define DAP message header
	$DAPCNFDEF			; Define DAP Configuration message
	$DAPCTLDEF			; Define DAP Control message
	$DAPDATDEF			; Define DAP Data message
	$DAPSTSDEF			; Define DAP Status message
	$IFBDEF				; Define IFAB symbols
	$IRBDEF				; Define IRAB symbols
	$NWADEF				; Define Network Work Area symbols
	$RABDEF				; Define Record Access Block symbols

;
; Macros:
;
;	None
;
; Equated Symbols:
;

CRLF=^X0A0D				; ASCII codes for CR and LF

	ASSUME	DAP$Q_DCODE_FLG EQ 0
	ASSUME	NWA$Q_FLG EQ 0

;
; Own Storage:
;
;	None
;

	.SBTTL	NT$GET - PERFORM NETWORK GET RECORD FUNCTION

;++
; NT$GET - engages in a DAP dialogue with the remote FAL to get (retrieve)
;	the specified record of a sequential, relative, or indexed file. This
;	routine supports both DAP file transfer and record transfer modes.
;
; Calling Sequence:
;
;	BSBW	NT$GET
;
; Input Parameters:
;
;	R4	BDB address
;	R8	RAB address
;	R9	IRAB address
;	R10	IFAB address
;	R11	Impure Area address
;
; Implicit Inputs:
;
;	BDB$L_ADDR
;	BDB$W_SIZE
;	DAP$V_DAPCRC
;	DAP$V_GEQ_V56
;	DAP$L_CRC_RSLT
;	IFB$L_NWA_PTR
;	IFB$V_SQO
;	IRB$B_MODE
;	NWA$V_DAP_STM
;	NWA$V_FTM_EOF
;	NWA$V_FTM_INIT
;	NWA$V_FTM_STORE
;	NWA$B_ORG
;	RAB$B_KSZ
;	RAB$B_RAC
;	RAB$W_RFA
;	RAB$L_ROP
;	RAB$L_KBF
;	RAB$B_KRF
;
; Output Parameters:
;
;	R0	Status code (RMS)
;	R1-R3	Destroyed
;	AP	Destroyed
;
; Implicit Outputs:
;
;	BDB buffer contents
;	BDB$W_NUMB
;	DAP$L_CRC_RSLT
;	IRB$L_IOS and IRB$L_IOS4 zeroed
;	NWA$V_FTM_EOF
;	NWA$V_FTM_INIT cleared
;	NWA$V_FTM_RETRV
;	RAB$W_RFA
;	RAB$L_STV
;
; Completion Codes:
;
;	Standard RMS completion codes
;
; Side Effects:
;
;	None
;
;--

NT$GET::				; Entry point
	$TSTPT	NTGET			;
	PUSHR	#^M<R4,R5,R6,R7>	; Save registers
	MOVL	R4,R6			; Copy BDB address
	MOVL	IFB$L_NWA_PTR(R10),R7	; Get address of NWA (and DAP)
	CLRW	BDB$W_NUMB(R6)		; Zero byte count in BDB
	BSBW	NT$CHK_RAC		; Validate record access mode
	BLBC	R0,10$			; Branch on failure
	BBS	#NWA$V_FTM_STORE,(R7),20$; $GET after $PUT not allowed in FTM

	ASSUME	RAB$C_SEQ EQ 0
	ASSUME	RAB$C_KEY EQ 1
	ASSUME	RAB$C_RFA EQ 2

	$CASEB	SELECTOR=RAB$B_RAC(R8)-	; Dispatch on access mode:
		DISPL=<-		;
		    GET_SEQ-		;  Sequential record access
		    GET_KEY-		;  Access by key value
		    GET_RFA-		;  Access by record file address
		>			; Value out-of-range
	BRW	ERRRAC			; Branch aid
10$:	BRW	EXIT			; Branch aid
20$:	BRW	ERRFTM			; Branch aid

;+
; Sequential access has been requested.
;
; Note:	In record transfer mode a Control message must be sent for each record
;	retrieved, whereas, in file transfer mode only an initial Control
;	message is required.
;-

GET_SEQ:				;
	BBS	#IFB$V_SQO,(R10),10$	; Branch if in file transfer mode
	MOVZBL	#DAP$K_SEQ_ACC,R1	; Set RAC for DAP message
	BRB	GET_SEND_CTL		; Join common code
10$:	BBC	#NWA$V_FTM_EOF,(R7),20$	; Check for EOF from a previous read
	BRW	ERREOF			; Branch aid
20$:	BBCC	#NWA$V_FTM_INIT,(R7),-	; Branch if no Control message required
		GET_RECV_DAT		;  and turn off single-shot flag
	$SETBIT	#NWA$V_FTM_RETRV,(R7)	; Set file transfer mode retrieval flag
	MOVZBL	#DAP$K_SEQ_FILE,R1	; Set RAC for DAP message

;+
; Build and send DAP Control message to partner.
;-

GET_SEND_CTL:				;
	$SETBIT	#NWA$V_LAST_MSG,(R7)	; Declare this last message to block
	MOVL	#DAP$K_CTL_MSG,R0	; Get message type value
	BSBW	NT$BUILD_HEAD		; Construct message header
	MOVB	#DAP$K_GET_READ,(R5)+	; Store CTLFUNC field
	MOVB	#<<DAP$M_RAC>!-		; Always include these fields in
		  <DAP$M_ROP>!-		;  control menu
		0>,(R5)+		;
	MOVB	R1,(R5)+		; Store RAC field
GET_SEND_CTL1:				;
	BSBW	NT$MAP_ROP		; Store ROP as an extensible field
	BSBW	NT$BUILD_TAIL		; Finish building message
	BSBW	NT$TRANSMIT		; Send Control message to FAL
	BLBS	R0,GET_RECV_DAT		; Branch on success
	BRW	EXIT			; Branch aid

;+
; Receive DAP Data message from partner containing user record.
;-

GET_RECV_DAT:				;
	$SETBIT	#DAP$K_DAT_MSG,DAP$L_MSG_MASK(R7)
					; Expect response of Data message
	BSBW	NT$RECEIVE		; Get record
	BLBC	R0,CHKEOF		; Branch on failure
	BBC	#DAP$V_DAPCRC,-		; Branch if partner does not support
		DAP$Q_SYSCAP(R7),10$	;  file level CRC checksum
	MOVQ	DAP$Q_FILEDATA(R7),R2	; Put descriptor of record in <R2,R3>
	CRC	W^NT$CRC_TABLE,-	; Compute CRC (destroying R0-R3)
		DAP$L_CRC_RSLT(R7),-	;  using result of previous CRC
		R2,(R3)			;  calculation as initial CRC value
	MOVL	R0,DAP$L_CRC_RSLT(R7)	; Store CRC resultant value
10$:	MOVQ	DAP$Q_FILEDATA(R7),R2	; Put descriptor of record in <R2,R3>
	BBC	#NWA$V_DAP_STM,(R7),20$	; Check if conversion is required

;
; We've received a record in stream format--strip trailing CRLF if present.
;

	CMPW	R2,#2			; Check record length
	BLSSU	20$			; Branch if less than two
	ADDL3	R2,R3,R1		; Get address past record
	CMPW	#CRLF,-2(R1)		; If record terminates with CRLF
	BNEQ	20$			;  then remove the characters
	SUBL2	#2,R2			;  and reduce the record length

;
; Copy record to BDB buffer.
;

20$:	CMPW	R2,BDB$W_SIZE(R6)	; Is record too big for BDB buffer?
	BLEQU	30$			; No
	BRW	ERRRTB			; Yes, record is too big
30$:	MOVW	R2,BDB$W_NUMB(R6)	; Update byte count in BDB
	MOVC3	R2,(R3),@BDB$L_ADDR(R6)	; Move record to BDB buffer

;+
; Receive DAP Status message from partner if we are in record transfer mode
; and return record file address of the first block accessed.
;-

GET_RECV_STS:				;
	RMSSUC				; Anticipate success
	BBS	#IFB$V_SQO,(R10),10$	; Branch if in file transfer mode
	BBC	#DAP$V_GEQ_V56,(R7),10$	; Branch if partner uses DAP before V5.6
; *****	$SETBIT	#DAP$K_STS_MSG,DAP$L_MSG_MASK(R7); Implied for receive
	BSBW	NT$RECEIVE		; Obtain status of get request
	BLBC	R0,10$			; Branch on failure
	BSBW	NT$RET_RFA		; Return RFA value to user RAB
10$:	BRW	EXIT			; Branch aid

;
; Check for end-of-file.
;

CHKEOF:	BBC	#IFB$V_SQO,(R10),10$	; Branch if record transfer mode
	CMPW	R0,#<RMS$_EOF&^XFFFF>	; Is it an end-of-file?
	BNEQ	10$			; Branch if not
	$SETBIT	#NWA$V_FTM_EOF,(R7)	; Denote that end-of-file has been
10$:	BRW	EXIT			;  reached so that EOF status can be
					;  returned on next read attempt

;+
; Access by relative record number or by key value has been requested.
; This operation must be performed in DAP record transfer mode.
;-

GET_KEY:				;
	BBS	#IFB$V_SQO,(R10),ERRFTM	; Disallow file transfer mode
	$SETBIT	#NWA$V_LAST_MSG,(R7)	; Declare this last message to block
	MOVL	#DAP$K_CTL_MSG,R0	; Get message type value
	BSBW	NT$BUILD_HEAD		; Construct message header
	MOVB	#DAP$K_GET_READ,(R5)+	; Store CTLFUNC field
	MOVB	#<<DAP$M_RAC>!-		; Always include these fields in
		  <DAP$M_KEY>!-		;  control menu
		  <DAP$M_ROP>!-		;
		0>,(R5)+		;
	CMPB	NWA$B_ORG(R7),#NWA$K_IDX; Branch if not IDX organization
	BNEQ	10$			;
	BISB2	#DAP$M_KRF,-1(R5)	; Add KRF to CTLMENU
10$:	MOVB	#DAP$K_KEY_ACC,(R5)+	; Store RAC field
	BSBB	NT$OBTAIN_KEY		; Store key value or key string
	CMPB	NWA$B_ORG(R7),#NWA$K_IDX; Branch if not IDX organization
	BNEQ	20$			;
	MOVB	RAB$B_KRF(R8),(R5)+	; Store KRF field
20$:	BRW	GET_SEND_CTL1		; Join common code

;+
; Access by record file address has been requested.
; This operation must be performed in DAP record transfer mode.
;-

GET_RFA:				;
	BBS	#IFB$V_SQO,(R10),ERRFTM	; Disallow file transfer mode
	$SETBIT	#NWA$V_LAST_MSG,(R7)	; Declare this last message to block
	MOVL	#DAP$K_CTL_MSG,R0	; Get message type value
	BSBW	NT$BUILD_HEAD		; Construct message header
	MOVB	#DAP$K_GET_READ,(R5)+	; Store CTLFUNC field
	MOVB	#<<DAP$M_RAC>!-		; Include these fields in
		  <DAP$M_KEY>!-		;  control menu
		  <DAP$M_ROP>!-		;
		0>,(R5)+		;
	MOVB	#DAP$K_RFA_ACC,(R5)+	; Store RAC field
	MOVB	#6,(R5)+		; Store RFA in KEY field
	MOVL	RAB$L_RFA0(R8),(R5)+	;
	MOVW	RAB$W_RFA4(R8),(R5)+	;
	BRW	GET_SEND_CTL1		; Join common code

;+
; Common exit code for $GET and $FIND.
;-

ERRKBF:	POPR	#^M<R0>			; Discard return address on stack
	RMSERR	KBF			; Key buffer error
	BRB	EXIT			;
ERRKSZ:	POPR	#^M<R0>			; Discard return address on stack
	RMSERR	KSZ			; Key buffer size error
	BRB	EXIT			;
ERRRTB:	RMSERR	RTB			; Record too big
	MOVZWL	R2,RAB$L_STV(R8)	; Return record size in STV
	BRB	EXIT			;
ERRRAC:	RMSERR	RAC			; Invalid record access value
	BRB	EXIT			;
ERRFTM:	RMSERR	FTM			; File transfer mode error
	BRB	EXIT			;
ERREOF:	RMSERR	EOF			; Declare end-of-file
EXIT:	CLRQ	IRB$L_IOS(R9)		; Zero I/O status block
					;  (pertinent status info is already in
					;  R0, BDB$W_NUMB, and RAB$L_STV)
	POPR	#^M<R4,R5,R6,R7>	; Restore registers
	RSB				; Exit with RMS code in R0

	.SBTTL	NT$OBTAIN_KEY - STORE KEY VALUE

;++
; NT$OBTAIN_KEY - stores the key value as an image field in the DAP message.
; For sequential and relative files, the key is a relative record number.
; For indexed files, the key is a string (text or packed decimal) or a bnary
; number (signed or unsigned).
;--

NT$OBTAIN_KEY::				; Entry point
	MOVZBL	RAB$B_KSZ(R8),R0	; Get length of key
	MOVL	RAB$L_KBF(R8),R1	; Get address of key buffer
	CMPB	NWA$B_ORG(R7),#NWA$K_IDX; Branch if IDX organization
	BEQL	20$			;

;
; This is a sequential or relative file.
;

	PROBER	IRB$B_MODE(R9),#4,(R1)	; Branch if key buffer is not
	BEQL	ERRKBF			;  readable
	TSTB	R0			; Check key size
	BEQL	10$			; Ok if default of zero specified
	CMPB	R0,#4			; Check key size again
	BNEQ	ERRKSZ			; Branch if not = 4
10$:	MOVL	(R1),R1			; Get key value
	BSBW	NT$CVT_BN4_IMG		; Store KEY as an image field
	RSB				; Exit

;
; This is an indexed file.
;
; Note:	At this point RMS does not know the type of key being used (DTP value);
;	FAL (actually the file system at the remote node) has this information,
;	but this has not be communicated back to RMS (at the local node).
;	Consequently, RMS will package the key value for remote access to an
;	indexed file as follows:
;	(1) If the key size is explicilty stated (required for string keys
;	    anyway), RMS will use the specified size to obtain the key value
;	    from the key buffer.
;	(2) If the key size in zero (normally allowed for binary keys), RMS
;	    will default the size to 4 and obtain the key value from the key
;	    buffer. This will result in a restriction, that for 2-byte binary
;	    keys (DTP = BN2 or IN2), the user will have to explicitly specify
;	    a key size of 2 for a network request. A more general solution
;	    should be considered for a future release to remove this
;	    restriction.
;

20$:	TSTL	R0			; Branch if key size is explicitly
	BNEQ	30$			;  stated
	MOVL	#4,R0			; Default to key size of 4 bytes
30$:	PROBER	IRB$B_MODE(R9),R0,(R1)	; Branch if key buffer is not
	BEQL	ERRKBF			;  readable
	MOVB	R0,(R5)+		; Store KEY as an image field but do not
	MOVC3	R0,(R1),(R5)		;  suppress leading zero bytes (as is
					;  done for relative record numbers)
	MOVL	R3,R5			; Restore pointer to correct register
	RSB				; Exit

	.SBTTL	NT$RET_RFA - RETURN RFA VALUE

;++
; NT$RET_RFA - returns the record file address value to the RFA field of the
; user RAB.
;
; R1 is destroyed on output.
;--

NT$RET_RFA::				; Entry point
	MOVAL	DAP$W_RFA(R7),R1	; Get address of RFA returned by FAL
	MOVL	(R1)+,RAB$L_RFA0(R8)	; Move 6-byte RFA value to user RAB
	MOVW	(R1),RAB$W_RFA4(R8)	;
	RSB				; Exit

	.SBTTL	NT$FIND - PERFORM NETWORK FIND RECORD FUNCTION

;++
; NT$FIND - engages in a DAP dialogue with the remote FAL to find (locate)
;	the specified record of a sequential, relative, or indexed file.
;
; Calling Sequence:
;
;	BSBW	NT$FIND
;
; Input Parameters:
;
;	R4	BDB address
;	R8	RAB address
;	R9	IRAB address
;	R10	IFAB address
;	R11	Impure Area address
;
; Implicit Inputs:
;
;	DAP$V_GEQ_V56
;	IFB$L_NWA_PTR
;	IFB$V_SQO
;	IRB$B_MODE
;	NWA$B_ORG
;	RAB$B_KSZ
;	RAB$B_RAC
;	RAB$W_RFA
;	RAB$L_ROP
;	RAB$L_KBF
;	RAB$B_KRF
;
; Output Parameters:
;
;	R0	Status code (RMS)
;	R1-R3	Destroyed
;	AP	Destroyed
;
; Implicit Outputs:
;
;	IRB$L_IOS and IRB$L_IOS4 zeroed
;	RAB$W_RFA
;
; Completion Codes:
;
;	Standard RMS completion codes
;
; Side Effects:
;
;	None
;
;--

NT$FIND::				; Entry point
	$TSTPT	NTFIND			;
	PUSHR	#^M<R4,R5,R6,R7>	; Save registers
	BBS	#IFB$V_SQO,(R10),ERRFTM	; Network find function not allowed
					;  if file transfer mode selected
	MOVL	IFB$L_NWA_PTR(R10),R7	; Get address of NWA (and DAP)
	CLRW	BDB$W_NUMB(R4)		; Zero byte count in BDB
	BSBW	NT$CHK_RAC		; Validate record access mode
	BLBC	R0,EXIT1		; Branch on failure

	ASSUME	RAB$C_SEQ EQ 0
	ASSUME	RAB$C_KEY EQ 1
	ASSUME	RAB$C_RFA EQ 2

	$CASEB	SELECTOR=RAB$B_RAC(R8)-	; Dispatch on access mode:
		DISPL=<-		;
		    FIND_SEQ-		;  Sequential record access
		    FIND_KEY-		;  Access by relative record #
		    FIND_RFA-		;  Access by record file address
		>			; Value out-of-range
	BRW	ERRRAC			; Branch aid

;+
; Sequential access has been requested.
;-

FIND_SEQ:				;

;+
; Build and send DAP Control message to partner.
;-

FIND_SEND_CTL:				;
	$SETBIT	#NWA$V_LAST_MSG,(R7)	; Declare this last message to block
	MOVL	#DAP$K_CTL_MSG,R0	; Get message type value
	BSBW	NT$BUILD_HEAD		; Construct message header
	MOVB	#DAP$K_FIND,(R5)+	; Store CTLFUNC field
	MOVB	#<<DAP$M_RAC>!-		; Always include these fields in
		  <DAP$M_ROP>!-		;  control menu
		0>,(R5)+		;
	MOVB	#DAP$K_SEQ_ACC,(R5)+	; Store RAC field
FIND_SEND_CTL1:				;
	BSBW	NT$MAP_ROP		; Store ROP as an extensible field
	BSBW	NT$BUILD_TAIL		; Finish building message
	BSBW	NT$TRANSMIT		; Send Control message to FAL
	BLBC	R0,EXIT1		; Branch on failure

;+
; Receive DAP Status message from partner.
;-

FIND_RECV_STS:				;
	BBC	#DAP$V_GEQ_V56,(R7),EXIT1
					; Branch if partner uses DAP before V5.6
; *****	$SETBIT	#DAP$K_STS_MSG,DAP$L_MSG_MASK(R7); Implied for receive
	BSBW	NT$RECEIVE		; Obtain status of find request
	BLBC	R0,EXIT1		; Branch on failure
	BSBW	NT$RET_RFA		; Return RFA value to user RAB
EXIT1:	BRW	EXIT			; Branch aid

;+
; Keyed access has been requested.
;-

FIND_KEY:				;
	$SETBIT	#NWA$V_LAST_MSG,(R7)	; Declare this last message to block
	MOVL	#DAP$K_CTL_MSG,R0	; Get message type value
	BSBW	NT$BUILD_HEAD		; Construct message header
	MOVB	#DAP$K_FIND,(R5)+	; Store CTLFUNC field
	MOVB	#<<DAP$M_RAC>!-		; Always include these fields in
		  <DAP$M_KEY>!-		;  control menu
		  <DAP$M_ROP>!-		;
		0>,(R5)+		;
	CMPB	NWA$B_ORG(R7),#NWA$K_IDX; Branch if not IDX organization
	BNEQ	10$			;
	BISB2	#DAP$M_KRF,-1(R5)	; Add KRF to CTLMENU
10$:	MOVB	#DAP$K_KEY_ACC,(R5)+	; Store RAC field
	BSBW	NT$OBTAIN_KEY		; Store key value or key string
	CMPB	NWA$B_ORG(R7),#NWA$K_IDX; Branch if not IDX organization
	BNEQ	20$			;
	MOVB	RAB$B_KRF(R8),(R5)+	; Store KRF field
20$:	BRW	FIND_SEND_CTL1		; Join common code

;+
; Access by record file address has been requested.
;-

FIND_RFA:				;
	$SETBIT	#NWA$V_LAST_MSG,(R7)	; Declare this last message to block
	MOVL	#DAP$K_CTL_MSG,R0	; Get message type value
	BSBW	NT$BUILD_HEAD		; Construct message header
	MOVB	#DAP$K_FIND,(R5)+	; Store CTLFUNC field
	MOVB	#<<DAP$M_RAC>!-		; Include these fields in
		  <DAP$M_KEY>!-		;  control menu
		  <DAP$M_ROP>!-		;
		0>,(R5)+		;
	MOVB	#DAP$K_RFA_ACC,(R5)+	; Store RAC field
	MOVB	#6,(R5)+		; Store RFA in KEY field
	MOVL	RAB$L_RFA0(R8),(R5)+	;
	MOVW	RAB$W_RFA4(R8),(R5)+	;
	BRW	FIND_SEND_CTL1		; Join common code

	.END				; End of module
