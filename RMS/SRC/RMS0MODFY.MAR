	$BEGIN	RMS0MODFY,005,F$RMS0MISC,<MODIFY FUNCTION>


;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
; Facility: RMS32
;
; Abstract:
;		This module performs the $MODIFY function.
;
; Environment:
;		Star processor running Starlet exec.
;
; Author: L. F. Laverdure	 Creation Date: 21-JUN-1977
;
; Modified By:
;
;	V02-005	RAS0018		Ron Schaefer		9-Aug-1981
;		Fix broken ASSUME caused by stream files.
;
;	V02-004 MCN0001		Maria del C. Nasr	29-Jul-1981
;		Rename entry point to RMS$$ to support long branches.
;
;	V02-003	REFORMAT	K. E. Kinnear		31-Jul-1980	9:46
;
;--


	.SBTTL	DECLARATIONS

;
; Include Files:
;

;
; Macros:
;

	$IFBDEF
	$FABDEF
	$RMEDEF
	$RMSDEF

;
; Equated Symbols:
;

	FOP=FAB$L_FOP*8			; bit offset to fop

;
; Own Storage:
;


	.SBTTL	RMS$$MODIFY - $MODIFY ROUTINE

;++
; RMS$$MODIFY -- Modify Routine.
;
;  This routine performs the $modify processing.
;  It has two main functions:
;
;	1. To rewrite modified file attributes.
;	2. To provide an 'escape' mechanism to perform non-standard
;	   rms functions.
;
; Calling Sequence:
;
;	Entered from exec as a result of user's calling SYS$MODIFY
;	(e.g., by using the $modify macro).
;
; Input Parameters:
;
;	AP	user's argument list addr
;
; Implicit Inputs:
;
;	The contents of the fab and possible related user interface
;	blocks.
;
; Output Parameters:
;
;	R0	status code
;	R1	destroyed
;
; Implicit Outputs:
;
;	The ifab and all related internal rms structures are modified
;	as per the requrements of the operation.
;	FAB$L_STS and FAB$L_STV
;
;	A completion ast is queued if so specified by the user.
;
; Completion Codes:
;
;	Standard rms (see functional spec for list).
;
; Side Effects:
;
;	Dependent upon the type of modify.
;
;--


	$ENTRY	RMS$$MODIFY
	BSBW	RM$FSET			; do common setup
					; note: does not return on error

;
;  Check for modify of 'escape' type and branch if bit set.
;

	BBS	#FAB$V_ESC+FOP,(R8),ESCAPE; branch if 'escape'

;
;  'normal' modify of file attributes
;
; \not yet implemented!\
;

	MOVZWL	#SS$_ILLSER,R0
MODXIT:	BRW	RM$EXRMS

	.SBTTL	PROCESS 'ESCAPE' SEQUENCE

;++
; ESCAPE -- Process Escape Sequence.
;
;  The esc bit was set in fop indicating that the caller desires
;  to execute one of the 'escape sequences', otherwise known as
;  'back doors' or 'kludges', that is, ways of tricking rms into
;  thinking that the situation is other than rms's current view of it.
;  These will, hopefully, remain few in number.  Implementing these
;  as a service is necessary due to the requirement for exec mode
;  privileges and additionally gives us a handle on the extent of the
;  cancer.  Improper use of an escape sequence can blow rms out of the
;  water.
;
; Calliing Sequence:
;
;	As above.
;
; Input Parameters:
;
;	FAB$V_CTX	'rme' code defining which escape sequence is desired.
;	other fab fields	as required by particular escape sequence
;
; Output Parameters:
;
;	sts,stv
;
; 	other fab & ifab fields			"
;
; Completion Codes:
;
;	Standard rms.
;
; Side Effects:
;
;	Unknown, potentially fatal if misused.
;
;--

ESCAPE:	$TSTPT	MODIFY2
	RMSERR	IAL			; anticipate error
	CMPL	FAB$L_CTX(R8),#RME$C_SETRFM; known 'escape' type?
	BNEQ	MODXIT			; branch if not


;++
;  Escape type one  -  set rfm
;
;  Inputs:
;
;	rfm,mrs, and fsz (if vfc)
;
;  Outputs:
;
;	Related ifab fields are changed to values specified by inputs.
;
;  Notes:
;
;	1.  User is responsible for saving the previous contents of the
;	    rfm, mrs, and fsz fields if needed for later restore.
;
;	2.  If the file is accessed for put, final attributes written
;	    to the file on close will be those currently in effect.
;
;	3.  There are no default values for any of the input fields.
;
;	4.  If setting rfm to udf and not block i/o accessed, results
;	    are unpredictable.
;
;	5.  If setting rfm to fix and mrs is 0, an error is generated
;	    but further rms calls will produce unpredictable results.
;--

	RMSERR	RFM			; anticipate problems
	CMPB	FAB$B_RFM(R8),#FAB$C_MAXRFM; within range?
	BGTRU	MODXIT			; branch if not

	CMPB	FAB$B_RFM(R8),#FAB$C_VFC
	BNEQ	10$			; branch if not vfc format
	MOVB	FAB$B_FSZ(R8),IFB$B_FSZ(R9); set fsz
10$:	MOVB	FAB$B_RFM(R8),IFB$B_RFMORG(R9); set rfm
	MOVW	FAB$W_MRS(R8),IFB$W_MRS(R9); set mrs
	CMPB	FAB$B_RFM(R8),#FAB$C_FIX; fixed rfm?
	BNEQ	20$			; branch if not
	RMSERR	MRS			; anticipate problem
	MOVW	FAB$W_MRS(R8),IFB$W_LRL(R9); set lrl
	BEQL	MODXIT			; branch if zero (error)
20$:	RMSSUC
	BRB	MODXIT
	.END
