	$BEGIN	KF0SCAN,001,F$RMSOPEN0,<KNOWN FILE SCANNER>

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; Facility:
;
; Abstract:
;
;
; Environment:
;	RM$KFISCN  	kernel mode RMS subroutine
;			known file mutex locked for at least reading
;	RM$KFI_PRS_DEV	kernel or exec mode RMS subroutine
;
; Author: Peter H. Lipman, creation date: 15-JUN-1978
;
; Modified By:
;
;	V03-001	RAS0079		Ron Schaefer	17-Mar-1982
;		Add translation table mask support (FAB$B_DSBMSK)
;		in RM$KFI_PRS_DEV.
;
;	V02-003	RAS0040		Ron Schaefer	26-Oct-1981
;		Implement rooted directories for concealed devices.
;		Add RM$KFI_PRS_DEV routine to parse a logical device
;		specification for both RMS and the INSTALL utility.
;
;	V02-002	REFORMAT	C Saether	01-Aug-1980	18:00
;
;--


	.SBTTL	DECLARATIONS

;
; Include Files:
;

	$KFIDEF				; known file entry definitions
	$KFPDEF				; known file pointer block definitions
	$LOGDEF				; logical name table definitions

;
; Macros:
;
;
; Equated Symbols:
;

	LOWERCASE_A	= ^X61		; ASCII value for lower case a
	LOWERCASE_Z	= ^X7A		; ASCII value for lower case z
	SPACE		= ^X20		; ASCII value for space
	HOR_TAB		= ^X09		; ASCII value for horizontal tab

;
; Own Storage:
;


	.SBTTL	RM$KFISCN - SCAN FOR A KNOWN FILE ENTRY

;++
; RM$KFISCN - scan for known file
;
; Calling sequence:
;
;	BSBW	RM$KFISCN
;
; inputs:
;
;	r8 = address of array of addresses of counted strings
;		0(r8) = address of device (ucb) string
;		4(r8) = address of directory string
;		8(r8) = address of file name string
;	       12(r8) = address of file type string
;	       16(r8) = 0 - stopper for vector of string addresses
;	known file mutex locked at least for reading
;
; outputs:
;
;	r7 = address of known file entry if found
;	   = 0 if not found
;	r10 = address of known file list head if one matched
;	    = 0 if there was no matching known file list head
;	r4,r5,r6,r7,r8,r9,r10 altered
;
;--

RM$KFISCN::

;
; now set up to scan the known file table
;

	MOVL	G^EXE$GL_KNOWNFIL,R9	; adr of array of known file queue addresses
	BEQL	NO_KFIHD		; branch if no table
	MOVZBL	<KFP$B_QUECOUNT-KFP$L_QUE0>(R9),R6 ; number of queues to scan
	BEQL	NO_KFIHD		; branch if none
CHECKLIST:
	MOVL	(R9)+,R10		; adr of next known file queue head
	BEQL	NEXTLIST		; branch if this list is empty
	MOVL	R10,R7			; set initial "next kfi entry"
	BRB	NEXTENTRY		; go process the next entry
CHECKENTRY:
	MOVL	R8,R4			; adr of vector of addresses
	MOVAB	KFI$B_DEVNAM(R7),R5	; adr of vector of byte offsets
					; to counted strings, 0 if not present
	CLRL	R0			; init high 24 bits to 0
	BRB	20$

;
; r0<9:31>=0 at this point and must remain 0 during this loop
;

10$:	MOVZBL	(R5)+,R1		; offset to corresponding string in kfi entry
	BEQL	20$			; not present is a match
	ADDB3	#1,(R2),R0		; string size including count byte
	CMPC3	R0,(R2),(R7)[R1]	; does this string match?
	BNEQ	NOMATCH			; branch if not
20$:	MOVL	(R4)+,R2		; next string address
	BNEQ	10$			; branch if not at the end

;
; all strings specified in the kfi entry match
; if this is the kfi header, then scan for an entry that matches
; otherwise this is the desired entry.
;

	BBC	#KFI$V_KFIHD,KFI$B_KFICTL(R7),MATCH ; if not hdr entry, match
	CLRL	R6			; do not scan another known file list
	BRB	NEXTENTRY

NOMATCH:
	BBS	#KFI$V_KFIHD,KFI$B_KFICTL(R7),- ; not a known file
	NEXTLIST			; if no match for header
NEXTENTRY:
	MOVL	(R7),R7			; get next kfi entry
	CMPL	R7,R10			; end of list?
	BNEQ	CHECKENTRY		; branch if not
NEXTLIST:
	SOBGTR	R6,CHECKLIST		; check the next known file list if any
	BLSS	NO_KFIENTRY		; branch if end of correct known file list
NO_KFIHD:
	CLRL	R10			; no known file list head
NO_KFIENTRY:
	CLRL	R7			; no known file entry found
MATCH:
	RSB



	.SBTTL	RM$KFI_PRS_DEV - PARSE A LOGICAL DEVICE FOR A KNOWN FILE ENTRY

;++
; RM$KFI_PRS_DEV - parse a logical device name for a known file
;
; Calling sequence:
;
;	CALLG	ARGLIST,RM$KFI_PRS_DEV
;
;	called in kernel or exec mode
;
; inputs:
;
;	AP = argument list
;		0(AP) = argument count
;		4(AP) = address of logical device descriptor
;		8(AP) = address of device buffer descriptor
;	       12(AP) = address of word for device length
;	       16(AP) = address of root directory buffer descriptor
;	       20(AP) = address of word for root directory length
;	       24(AP) = translation table mask in low byte.
;
; outputs:
;
;	R0 = 0 if not a concealed device
;	   = 1 if concealed device with/without a root directory
;	device buffer and length word filled in with device name
;	directory buffer and length word filled in with directory name
;	device and directory length words = 0 if not a concealed device
;
;--

DEV    = 4 		; address of logical device descriptor
DEVBUF = 8		; address of device buffer descriptor
DEVLEN = 12		; address of word for device length
DIRBUF = 16		; address of root directory buffer descriptor
DIRLEN = 20		; address of word for root directory length
MSK    = 24		; translation table mask

RM$KFI_PRS_DEV::
	.WORD	^M<R2,R3,R4,R5,R6,R7>

;++
;
;  Translate the device specification.   If it translates, then
;  parse it for a concealed device specification of the form:
;
;		__devnam:    or
;		__devnam:[root_dir.]
;
;  Note the trailing ".]" or ".>" signature.
;  Return failure if the translation is not one of these forms.
;
;--
	MOVAB	-LOG$C_NAMLENGTH(SP),SP	; Make  string buffer
	PUSHL	SP			; Make descriptor of buffer

	ASSUME	LOG$C_NAMLENGTH LE 255

	MOVZBL	#LOG$C_NAMLENGTH,-(SP)
	MOVL	SP,R6			; Address of descriptor
	$TRNLOG_S	-		; Translate the device name
		LOGNAM=@DEV(AP),-	; to see if its a concealed device
		RSLBUF=(R6),-		; Scratch buffer
		RSLLEN=(R6),-  		; Size of result
		DSBMSK=MSK(AP)		; Translation table mask
	MOVQ	(SP)+,R6		; Pop stack & get descriptor
	BLBC	R0,40$
	CMPW	R0,#SS$_NOTRAN		; Was there a translation?
	BEQL	40$			; If not then this must be the real
					; device name.
	MOVL	SP,R5			; Addr of buffer
	BSBW	UPCASE_COMPRESS		; Upcase and compress the string-inplace
	CMPW	#^A'__',(R7)		; Initial "__" chars?
	BNEQ	40$			; Bad syntax if not

	LOCC	#^A':',R6,(R7)		; Find device delimiter
	BEQL	40$			; Bad syntax if not there
	MOVL	R7,R5			; Make descriptor of device portion
	SUBL3	R7,R1,R4
	ADDL3	#1,R1,R7		; Remove device from string
	SUBL3	#1,R0,R6
	MOVQ	@DEVBUF(AP),R2		; Get device buffer desc
	CMPW	R4,R2			; Does it fit?
	BGTRU	40$			; Quit if not
	MOVW	R4,@DEVLEN(AP)		; Store device length
	MOVC3	R4,(R5),(R3)		; Copy string

;
;  Now see if there is also a root directory in the string.
;

	TSTL	R6			; Any string left?
	BNEQ	10$			; Yes
	CLRW	@DIRLEN(AP)		; Set no directory length
	BRB	30$			; no directory and success
10$:	CMPB	#^A'[',(R7)		; Is there a directory?
	BEQL	20$			; yes
	CMPB	#^A'<',(R7)		; Alternate directory syntax?
	BNEQ	40$			; Bad syntax if not
20$:	ADDB3	#2,(R7)+,R3		; Save correct directory delimiter
	DECL	R6			; Remove directory delimiter
	LOCC	#^A'.',R6,(R7)		; Find terminator
	BEQL	40$			; Bad syntax if not there
	CMPB	R3,1(R1)		; Is next char the dir delimiter?
	BNEQ	40$			; Bad syntax if not
	CMPL	R0,#2			; Exactly 2 chars left (".]")?
	BNEQ	40$			; Bad syntax if not
	MOVQ	@DIRBUF(AP),R2		; Get directory buffer desc
	SUBL2	R7,R1			; Compute length of root directory
	CMPW	R1,R2			; Does it fit?
	BGTRU	40$			; Quit if not
	MOVW	R1,@DIRLEN(AP)		; Store root directory length
	MOVC3	R1,(R7),(R3)		; Copy string
30$:	MOVL	#1,R0			; set success
	RET

40$:	CLRL	R0			; set failure
	CLRW	@DEVLEN(AP)		; Set no device length
	CLRW	@DIRLEN(AP)		; Set no directory length
	RET


;++
; Entry point for UPCASE_COMPRESS.
;
; This routine copies the source string to the destination buffer while
; upcasing lowercase characters and removing space, horizontal tab, and null
; characters, except that characters enclosed in quotes are moved unaltered.
;
; Inputs:
;
;	R5	Destination buffer descriptor
;	<R6,R7>	Source string descriptor
;
; Outputs:
;
;	R5	Destroyed
;	<R6,R7>	Destination string descriptor
;--

UPCASE_COMPRESS:			;
	TSTL	R6			; Branch if source string length is
	BEQL	50$			;  zero
	PUSHL	R5			; Save destination buffer address

;
; Examine each character in the source string.
; Take advantage of the fact that the ASCII values for space, horizontal tab,
; null, and quote are less than the ASCII values for lowercase characters.
;

10$:	CMPB	(R7),#^A\"\		; Check for quote
	BGTRU	20$			; Branch if greater than quote
	BEQL	70$			; Branch if quote
	CMPB	(R7),#SPACE		; Branch if space
	BEQL	60$			;
	CMPB	(R7),#HOR_TAB		; Branch if horizontal tab
	BEQL	60$			;
	TSTB	(R7)			; Branch if null
	BEQL	60$			;
20$:	MOVB	(R7)+,(R5)+		; Append character to destination string
	CMPB	-1(R5),#LOWERCASE_A	; Determine if this is a lowercase
	BLSSU	30$			;  character
	CMPB	-1(R5),#LOWERCASE_Z	;  "
	BGTRU	30$			;  "
	BICB	#^X20,-1(R5)		; If so, convert it to uppercase
30$:	SOBGTR	R6,10$			; Check for end of source string

;
; The source string is exhausted.
;

40$:	POPL	R7			; Restore destination buffer address
	SUBL3	R7,R5,R6		; Compute length of destination string
50$:	RSB				; Exit with <R6,R7> describing
					;  upcased and compressed string

;
; A space, tab, or null character has been found, simply discard it.
;

60$:	INCL	R7			; Discard character
	BRB	30$			;

;
; A leading quote character has been found.
; Copy all characters unaltered until the matching quote is found, unless
; the leading quote was preceeded by a colon which indicates that this is
; the start of a quoted string (as opposed to an access control string).
;

70$:	CMPL	R5,(SP)			; Branch if this is first character
	BEQL	80$			;  of string
	CMPB	-1(R5),#^A\:\		; Branch if previous non-compressed
	BEQL	100$			;  character was a colon
80$:	MOVB	(R7)+,(R5)+		; Append character to destination string
	SOBGTR	R6,90$			; End of source string?
	BRB	40$			; Branch if yes
90$:	CMPB	(R7),#^A\"\		; Is next character the matching quote?
	BNEQ	80$			; Branch if not
	BRB	20$			; Branch if yes

;
; This is the start of a quoted string. It may have embedded quote characters
; and it must be the last element of a file specification string. Therefore,
; copy all characters unaltered until end of string is reached, then work
; backwards to remove trailing spaces, tabs, and nulls.
;

100$:	MOVB	(R7)+,(R5)+		; Append the rest of the source string
	SOBGTR	R6,100$			;  to the destination string

;
; The source string has been exhausted. Truncate string after last non
; space, tab, or null character.
;

110$:	CMPB	-(R5),#SPACE		; Discard space
	BEQL	110$			;
	CMPB	(R5),#HOR_TAB		; Discard horizontal tab
	BEQL	110$			;
	TSTB	(R5)			; Discard null
	BEQL	110$			;
	INCL	R5			; Position pointer past new end of
	BRB	40$			;  destination string

	.END
