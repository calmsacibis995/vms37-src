
MODULE RM3ROOT (LANGUAGE (BLISS32) ,
		IDENT = 'V03-001'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:	RMS32 INDEX SEQUENTIAL FILE ORGANIZATION
!
! ABSTRACT:
!                Create new root bucket for index file organization
!
!
! ENVIRONMENT:
!
!		VAX/VMS OPERATING SYSTEM
!
!--

!
! AUTHOR:        Christian Saether	     CREATION DATE:        	8-AUG-78  20:30
!
! Modified by:
!
!	V03-001 MCN0001		Maria del C. Nasr	24-Mar-1982
!		Use macro to compute key buffer address.
!
!	V02-00	TMK0001		Todd M. Katz	01-Feb-1982
!		Take out all references to rear-end truncation. Support for
!		rear end truncation of prolog 3 compressed index keys does
!		not require any modification to the routines in this module.
!
!	V02-007	PSK0003		P Knibbe	16-Nov-1981
!		Add support for compressed indexes.
!
!	V02-006	PSK0002		P Knibbe	26-Oct-1981
!		Fix problem with BKT_ADDR not being CURBDB
!		for RECORD_SIZE.
!
!	V02-005	PSK0001		P Knibbe	09-Aug-1981
!		Add support for prologue three files.
!
!	V02-004	REFORMAT	C Saether	01-Aug-1980	22:32
!
!
! REVISION HISTORY:
!
!   Wendy Koenig, 	24-OCT-78  14:03
!   X0002 - MAKE CHANGES CAUSED BY SHARING CONVENTIONS
!
!   Wendy Koenig, 	26-JAN-79  9:19
!   X0003 - GET RID OF SETTING VALID
!
!*****

LIBRARY 'RMSLIB:RMS';

REQUIRE 'RMSSRC:RMSIDXDEF';

!
! define default psects for code
!

PSECT
    CODE = $L$PUT3(PSECT_ATTR),
    PLIT = $L$ROOT3(PSECT_ATTR);

! Linkages

LINKAGE
    L_MAKE_HIGH_KY,
    L_MAK_IDX_REC,
    L_MAKSUM,
    L_MOVE,
    L_MOVE_IN_VBN,
    L_NEW_ROOT,
    L_RECORD_SIZE,
    L_RELEASE,
    L_UPD_PLG,
    L_KEY_DESC,
    L_INS_REC;

!
!
! Forward Routines
!
!
! External Routines
!

EXTERNAL ROUTINE
    RM$MAKE_HIGH_KY	: RL$MAKE_HIGH_KY NOVALUE,
    RM$MAK_IDX_REC	: RL$MAK_IDX_REC NOVALUE,
    RM$MAKSUM		: RL$MAKSUM,
    RM$MOVE		: RL$MOVE,
    RM$MOVE_IN_VBN	: RL$MOVE_IN_VBN,
    RM$RECORD_SIZE	: RL$RECORD_SIZE,
    RM$RELEASE		: RL$RELEASE,
    RM$KEY_DESC		: RL$KEY_DESC,
    RM$INS_REC		: RL$INS_REC;


GLOBAL ROUTINE RM$NEW_ROOT : RL$NEW_ROOT NOVALUE =

!++
!
! RM$NEW_ROOT
!
! Create new record and high key record for new root bucket.
!
! CALLING SEQUENCE:
!	RM$NEW_ROOT()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	BKT_ADDR - address of new root bucket buffer
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_IO_STR,
	R_IRAB_STR,
	R_REC_ADDR_STR,
	R_IDX_DFN_STR,
	R_IFAB_STR;

    BKT_ADDR[BKT$L_NXTBKT] = .BDB[BDB$L_VBN];
    BKT_ADDR[BKT$B_LEVEL] = .BKT_ADDR[BKT$B_LEVEL] + 1;
    BKT_ADDR[BKT$V_LASTBKT] = 1;
    BKT_ADDR[BKT$V_ROOTBKT] = 1;
    REC_ADDR = .BKT_ADDR + BKT$C_OVERHDSZ;
    IRAB[IRB$L_LST_REC] = .REC_ADDR;

    IRAB [IRB$L_MIDX_TMP1] = .IRAB [IRB$L_VBN_LEFT];
    RM$MAK_IDX_REC(.BKT_ADDR);
    
    BKT_ADDR[BKT$W_FREESPACE] = .REC_ADDR - .BKT_ADDR;
    REC_ADDR = .IRAB[IRB$L_LST_REC];
    IRAB[IRB$W_POS_INS] = BKT$C_OVERHDSZ;
    IRAB[IRB$B_SPL_BITS] = 0;
    IRAB[IRB$L_REC_COUNT] = 0;

    BEGIN

    LOCAL
	TEMP_SIZE,
	SAVE_BDB;

    SAVE_BDB = .IRAB [IRB$L_CURBDB];
    IRAB [IRB$L_CURBDB] = .IRAB [IRB$L_NXTBDB];

    IF .IDX_DFN [IDX$V_IDX_COMPR]
    THEN
	BEGIN

	MACRO
	    KEYLEN	= 0,0,8,0 %,
	    COMPR	= 0,8,8,0 %;

	LOCAL
	    KEYBUF : REF BBLOCK;

	KEYBUF = KEYBUF_ADDR(2);

	RM$MOVE (.IDX_DFN [IDX$B_KEYSZ], .KEYBUF, .KEYBUF + 2);
	KEYBUF [KEYLEN] = .IDX_DFN [IDX$B_KEYSZ];
	KEYBUF [COMPR] = 0;
	END;	

    TEMP_SIZE = RM$RECORD_SIZE();

    IF NOT RM$INS_REC(.BKT_ADDR, .TEMP_SIZE)
    THEN
	BUG_CHECK;

    IRAB [IRB$L_CURBDB] = .SAVE_BDB;    
    END; ! Of local definition of temp_size and save_bdb

    IRAB[IRB$L_VBN_LEFT] = .BDB[BDB$L_VBN];
    END;


GLOBAL ROUTINE RM$UPD_PLG : RL$UPD_PLG =

!++
!
! FUNCTIONAL DESCRIPTION:
!
! Update prologue to reflect new root level and root vbn
!
! CALLING SEQUENCE:
!	RM$UPD_PLG ()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	success
!	tre - if rootlevel attempts to go beyond 255
!	wpl - prologue write error
!
! SIDE EFFECTS:
!	NONE
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_RAB_STR,
	R_IDX_DFN_STR;

    GLOBAL REGISTER
	R_BDB_STR;

    LOCAL
	KEY	: REF BBLOCK;

    ! set search and cache flags to force read with lock of prologue
    !
    IRAB[IRB$V_NEW_IDX] = 1;
    IRAB[IRB$B_CACHEFLGS] = CSH$M_LOCK;

    RETURN_ON_ERROR (RM$KEY_DESC(.IDX_DFN[IDX$B_KEYREF]));

    BDB = .IRAB[IRB$L_LOCK_BDB];
    IRAB[IRB$L_LOCK_BDB] = 0;
    KEY = 0;

    IF .IDX_DFN[IDX$B_KEYREF] NEQ 0
    THEN
	KEY = (.IDX_DFN[IDX$B_KEYREF] - 1) MOD 5;

    KEY = .KEY*(KEY$C_BLN + KEY$C_SPARE);
    KEY = .KEY + .BDB[BDB$L_ADDR];

    ! update level number and root vbn on the disk
    !
    KEY[KEY$B_ROOTLEV] = .KEY[KEY$B_ROOTLEV] + 1;

    IF .KEY[KEY$B_ROOTLEV] EQL 0
    THEN
	BEGIN
	RM$RELEASE(0);
	RETURN RMSERR(TRE);

	END;

    KEY[KEY$L_ROOTVBN] = .IRAB[IRB$L_VBN_LEFT];

    ! recalculate checksum
    !
    RM$MAKSUM(.BDB[BDB$L_ADDR]);
    BDB[BDB$V_DRT] = 1;

    ! force write of prologue
    !

    IF NOT RM$RELEASE(RLS$M_WRT_THRU)
    THEN
	RETURN RMSERR(WPL);

    ! prologue has been updated successfully so now udpate in core index
    ! descriptor
    !
    IDX_DFN[IDX$B_ROOTLEV] = .IDX_DFN[IDX$B_ROOTLEV] + 1;
    IDX_DFN[IDX$L_ROOTVBN] = .IRAB[IRB$L_VBN_LEFT];
    RETURN RMSSUC(SUC);

    END;

END

ELUDOM
