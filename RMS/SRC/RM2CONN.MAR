 	$BEGIN	RM2CONN,001,F$RMSOPEN2,<RELATIVE-SPECIFIC CONNECT>


;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
; Facility: rms32
;
; Abstract:
;	routine to perform relative file organization specific
;	connect stream processing.
;
; Environment:
;		star processor running starlet exec.
;
; Author: L F Laverdure,	 creation date: 19-OCT-1977
;
; Modified By:
;
;	V03-001	JWH0003		Jeffrey W. Horn		16-Mar-1982
;		Prevent connect to eof and block io to be used together
;		with relative files.
;
;	V02-016	JWH0002		Jeffrey W. Horn		19-Feb-1982
;		Fix problem with connect to eof option for shared sequential
;		files.
;
;	V02-015 JWH0001		Jeffrey W. Horn		26-Oct-1981
;		Added connect to eof option for relative files.  Search
;		backwards from EBK untill a record is found, set NRP to
;		that record plus 1.
;
;	V02-014	KPL0001		Peter Lieberwirth	24-Jul-1981
;		Fix broken branch.
;
;	V02-013	REFORMAT	C D Saether	30-Jul-1980	23:07
;
;	V012	CDS0044		C D Saether	22-Oct-1979	15:37
;		allow for connect to eof option for shared seq file
;		use seq mbf when shared seq file, blk io bdb handled
;		by rm$bdballoc now
;
;	V011	JAK0020		J A Krycka	11-Sep-1979	10:00
;		remove network code.
;
;	V010	CDS0012		C Saether	24-Jul-1979	14:35
;		remove references to ifb$w_bks_bytes and ifb$w_bks_recs.
;
;	V009	WSK0001		W Koenig	5-Feb-1979	12:50
;	on errors, branch to rm$ex_nirab_shr instead of rm$ex_nostr
;--
;


	.SBTTL	DECLARATIONS

;
; Include Files:
;

;
; Macros:
;

	$BKTDEF
	$DLCDEF
	$FABDEF
	$IFBDEF
	$IMPDEF
	$IRBDEF
	$RABDEF
	$RMSDEF

;
; Equated Symbols:
;

	ROP=RAB$L_ROP*8			; bit offset to rop

;
; Own Storage:
;


	.SBTTL	RM$CONNECT2 - RELATIVE-SPECIFIC CONNECT ROUTINE

;++
; RM$CONNECT2 - connect for relative file organization
; RM$CONNECT_BIO - just get bdb for block i/o connect
;
; this module performs the following functions required for
; connecting to relative files.
;
;	1.  performs various validity checks
;	2.  if connect for block i/o allocate a bdb  and exit
;	3.  allocate bdb's and buffers:
;		1 minimum, otherwise system default
;	4.  perform various irab initializations
;
; Calling sequence:
;
;	entered via case branch from rm$connect
;
; Input Parameters:
;
;	r11	impure area address
;	r10	ifab address
;	r9	irab address
;	r8	rab address
;
; Implicit Inputs:
;
; 	the contents of the rab and irab
;
; Output Parameters:
;
;	r0	status
;
; Implicit Outputs:
;
;	sets various fields in the irab and ifab.
;
; Completion Codes:
;
;	the standard rms status code is set into r0 and return
;	is made to user (not caller) via rm$exsuc (or rm$ex_nostr
;	after calling rm$ccln1 if an error is detected, thus
;	deallocating all irab - related internal structures).
;
; Side Effects:
;
;	none
;
;--


RM$CONNECT2::
	$TSTPT	CONNECT2

;
;  if open or create was done with bro specified (mixed block & record i/o),
;  use the bio rop bit to determine whether to connect for block or record
;  operations.  note: any subsequent connects must be of the same type.
;

	BBCC	#FAB$V_BRO,IFB$B_FAC(R10),5$ ; branch if bro not specified
	BBC	#RAB$V_BIO+ROP,(R8),CHKRFM ; branch if bio not wanted
	BBCS	#FAB$V_BIO,IFB$B_FAC(R10),RM$CONNECT_BIO ; set block i/o, branch
5$:	BBS	#FAB$V_BIO,IFB$B_FAC(R10),RM$CONNECT_BIO ; branch if block io

;
; record i/o.
;

	ASSUME	FAB$C_UDF EQ 0
CHKRFM:	TSTB	IFB$B_RFMORG(R10)	; rfm = undefined?
	BNEQ	50$			; continue if no
	BRW	ERRRFM			; branch if yes
50$:	CLRL	R4			; set default for rm$bdballoc
					; to seq disk file

;
; calculate cell size for records
;

	CMPB	IFB$B_RFMORG(R10),#FAB$C_VFC ; vfc rec format?
	BNEQ	60$			; branch if not
	MOVB	IFB$B_FSZ(R10),IRB$W_CSIZ(R9) ; yes-initialize record size
60$:	BBS	#IFB$V_SEQFIL,(R10),65$	; br if shared seq file
	INCW	IRB$W_CSIZ(R9)		; add in control byte
	MOVL	#3,R4			; index for relative defaults
65$:	CMPB	IFB$B_RFMORG(R10),#FAB$C_FIX ; fixed rec. len?
	BEQL	70$			; branch if yes
	ADDW2	#2,IRB$W_CSIZ(R9)	; add in 2-byte size field
70$:
	ADDW2	IFB$W_MRS(R10),IRB$W_CSIZ(R9) ; & max record size
					; giving total cell size
	MOVZBL	IFB$B_BKS(R10),R5	; get bkt size in blocks
	ASHL	#9,R5,R5		; r5 gets bkt size in bytes
	CMPW	IRB$W_CSIZ(R9),R5	; is cell size <= bkt size?
	BLEQU	RM$CONNECT_BIO		; LEQU means record fits
	BRW	ERRIFA			; Otherwise means record don't fit
					; so presume file header's been
					; messed with
RM$CONNECT_BIO::
	BSBW	RM$BDBALLOC		; allocate appropriate number
					; of buffers using r4 to index
					; to defaults, also allocates
					; a lock bdb if write accessed
					; allocates bdb without buffer
					; for block i/o connect

	BLBS	R0,SETNRP		; continue if success
	BRW	EXIT			; exit on error
SETNRP:	BBS	#RAB$V_EOF+ROP,(R8),CEOF ; branch if eof bit set in rop
	INCL	IRB$L_NRP_VBN(R9)	; set nrp to vbn1 (rp = 0)
	BRW	RM$EXSUC		; exit with success



;++
;
; Connect to EOF Processing 
;
;--

CEOF:	BBC	#IFB$V_SEQFIL,(R10),RELF ; br if rel file


;
;  SET NRP for Shared Sequential Files
;

	BSBW	RM$SET_SIFB_ADR		; get ifab/sifb addr to ap
	MOVL	IFB$L_EBK(AP),IRB$L_NRP(R9) ; set nrp from end block
	BNEQ	1$			; if non-zero leave it.
	INCL	IRB$L_NRP(R9)		; else set nrp to record 1
1$:	BRW	RM$EXSUC		; exit with success




;
;  Search for last record if CONNECT to EOF for relative files
;

RELF:	BBC	#RAB$V_BIO+ROP,(R8),5$	; Branch if not block io,
	BRW	ERRROP			; 	otherwise error.
5$:	BSBW	RM$LOCK_PROLOG		; Lock Prolog
	BLBS	R0,10$			; Continue on success
	BRW	EXIT
10$:	PUSHR	#^M<R4,R6,R7>		; Save plg bdb adr & R6,R7
	MOVZBL	IFB$B_BKS(R10),-(SP)	; Get Bucket Size
	SUBL3	IFB$L_DVBN(R10),IFB$L_EBK(R10),R6 ; Calculate VBN of block past
	DIVL	(SP),R6			;                last bucket
	EMUL	(SP),R6,IFB$L_DVBN(R10),R6
	ASHL	#9,(SP),-(SP)		; Calculate records per block
	DIVW	IRB$W_CSIZ(R9),(SP)
	DECL	(SP)			; One less, for ACBL instuction


;
;  Begining of Bucket Read/Check Loop
;		(SP) :   Records per block - 1
;		4(SP) :  Bucket Size as longword
;

20$:	SUBL	4(SP),R6		; Look at preivous bucket
	CMPL	R6,IFB$L_DVBN(R10)	; Branch if current VBN less then first
	BLSS	60$			;      data block.
	MOVL	R6,R1			; Read Bucket with : VBN
	CLRL	IRB$L_RP_OFF(R9)	;		     RP_OFF
	$CSHFLAGS	<>		;		     Cache Flags
	BSBW	RM$READBKT2		; Go read it
	BLBC	R0,ERRORE		; Branch if error
	ASSUME	IMP$W_RMSSTATUS EQ 0
	BBS	#IMP$V_IORUNDOWN,@#PIO$GW_PIOIMPA,50$ ; Exit if rundown in prog
	CLRL	R7			; Count of found records in R7


;
;  Loop to Check Bucket for exsisting records
;

30$:	BBC	#DLC$V_REC,(R5),40$	; Branch if record does not exist
	ADDW	IRB$W_CSIZ(R9),R5	; Point at next record
	ACBL	(SP),#1,R7,30$		; Loop if not last record

40$:	BSBW	RM$RLNERR		; Release bucket
	BLBC	R0,ERRORE		; Branch if error on release
	TSTL	R7			; Did we find a record?
	BEQL	20$			; No, go look at prev bucket

;
;  Found a record, compute it's Relitive Record Number
;

	SUBL	IFB$L_DVBN(R10),R6	; Number of data blocks before VBN fnd
	DIVL	4(SP),R6		; and compute # buckets before VBN fnd
	INCL	(SP)			; Restore temp to records per bucket
	MULL	(SP),R6			; Compute # records before VBN found
	MOVAB	1(R6)[R7],IRB$L_NRP_VBN(R9) ; Compute next record number

50$:	CLRQ	(SP)+			; Pop temp space
	POPR	#^M<R4,R6,R7>		; Restore plg bdb adr & R6,R7
	BSBW	RM$RLSPLG		; Release prolog
	BRW	RM$EXSUC


;
;  At Begining of file
;

60$:	INCL	IRB$L_NRP_VBN(R9)	; Set nrp to record #1
	BRB	50$



;++
;
; handle errors
;
;--

;
;  EOF and BIO combination illegal for relative files.
;

ERRROP:$PSECT_BR	L$RMS2
	RMSERR		ROP
	BRB	CLNUP
	$PSECT_RESTORE

;
;  read error on bucket, assume EBK messed up.
;

ERRORE:	CLRQ	(SP)+			; Pop temp space
	POPR	#^M<R4,R6,R7>		; Restore plg bdb adr & R6,R7
	BSBW	RM$RLSPLG		; release prolog
	$PSECT_BR L$RMS2
	CMPL	R0,#<RMS$_EOF & ^XFFFF>	; end of file error?
	BNEQ	CLNUP			; branch if not
	RMSERR	IFA			; assume file header messed up
;
; fall thru to cleanup
;

CLNUP:	BSBW	RM$CCLN1		; deallocate irab
EXIT:	JMP	RM$EX_NIRAB_SHR		; and exit
	$PSECT_RESTORE

;
;  calculated that bucket holds 0 records.  must be bad data in file header.
;

ERRIFA:	$PSECT_BR	L$RMS2
	MOVL	#RMS$_MRS,RAB$L_STV(R8)	; stv secondary error code
	RMSERR	IFA			; illegal file attributes
	BRB	CLNUP			; and cleanup
	$PSECT_RESTORE

;
;  undefined record format for record i/o
;

ERRRFM:	BRW	RM$CONN_ERRRFM		; go report error


	.END
