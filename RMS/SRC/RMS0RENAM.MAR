	$BEGIN	RMS0RENAM,010,F$RMS0MISC,<RENAME FILE SERVICE>


;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
;
; Abstract:
;	this routine performs the $rename file rms function.
;
; Environment:
;		star processor running starlet exec.
;
; Author: L F Laverdure,	 creation date: 24-MAY-1978
;
; Modified By:
;
;	V02-010	RAS0043		Ron Schaefer		29-Oct-1981
;		Implement root directory support for target filespec.
;		Must call RM$ASSIGN to assign the channel for the
;		target device in order to get the root directory
;		evaluated.
;
;	V02-009	KPL0001		Peter Lieberwirth	29-Jul-1981
;		Rename entry point to $$ form so we can dispatch here
;		via RMS0BRNCH.
;
;	V02-008	REFORMAT	Maria del C. Nasr	24-Jul-1980
;
;	v007	KEK001		K E Kinnear	11-MAR-1980	18:40
;		Change check for same device on old and new file name
;		from string check to check of ucb addresses.
;
;	v006	RAS0009		R A Schaefer	20-DEC-1979	15:40
;		Set-up for invalid directory rename operation check
;		in rm$setdid.
;
;	v005	JAK0001		J A Krycka	27-AUG-1978	09:50
;		Miscellaneous clean-up prior to decnet v1.0 code freeze.
;		revise network error processing.
;--
;


	.SBTTL	DECLARATIONS

;
; Include Files:
;

;
; Macros:
;

	$CCBDEF
	$FABDEF
	$NAMDEF
	$IFBDEF
	$FIBDEF
	$IODEF
	$FWADEF
	$IMPDEF
	
;
; Equated Symbols:
;

	FOP=FAB$L_FOP*8			; bit offset to fop bits

;
; Own Storage:
;


	.SBTTL	RMS$$RENAME - RENAME FILE ROUTINE

;++
; RMS$$RENAME - This routine performs the following steps:
;	1. calls rm$fseti to create an ifab.
;	2. saves the address of the old fab and new fab on the stack.
;	3. calls rm$parse_file to parse the old file name, including
;	   setting up its directory id.
;	4. verifies that the file spec contained no wild cards and did
;	   not specify a process permanent file or a network node.
;	5. issues an "access" qio to lookup the old file in the directory
;	   (but does not access the file).
;	6. calls rm$fillnam to fill in the old name block, if any.
;	7. verifies the new fab for goodness.
;	8. calls rm$parse_file to parse the new file spec
;	   (rm$parse_file keys off of the fact that a channel is already
;	   assigned and returns immediately after the parse without doing
;	   a call to set up the did).
;	9. step 4 is repeated for the new name.
;      10. the parsed device name (including unit) is checked for being
;	   the same for both the old and new file specs.
;      11. saves the old file's fid in fwa for directory rename check
;	   and calls rm$setdid for the new file.
;      12. issues a "create" qio to enter the new name in the new directory
;	   (with the old fid).
;      13. calls rm$fillnam to fill in the new nam block, if any.
;      14. issues a "delete" qio to remove the old name from the old directory.
;      15. branches to rm$clscu to deassign the channel and evaporate the ifab.
;
; Calling sequence:
;
;	entered as a result of user's calling sys$rename.
;
; Input Parameters:
;
;	ap user's argument list (note: 4 arguments required)
;
; Implicit Inputs:
;
;	the contents of the fab (bid, bln, ifi, nam) and the
;	related nam block.
;
; Output Parameters:
;
;	r1 destroyed
;	r0 status code
;
; Implicit Outputs:
;
;	the sts and stv fields of the fab are output along with
;	the fields of the nam block
;
;	a completion ast is queued if specified in the user arglist.
;
; Completion Codes:
;
;	standard rms, in particular acc, bln, dev, dir, dnf, dnr, drn,
;	ent, esa, esl, fab, fnd, fnf, fnm, ifi, iop, nam, prv,
;	rmv, rst, rss, sys, typ, ver, wld.
;
; Side Effects:
;
;	none
;
;--



;++
;
; entry point for $rename function
;
;--

	$ENTRY	RMS$$RENAME
	$TSTPT	RENAME			; flag rename done
	BSBW	RM$FSETI		; create ifab

;
; Return to user on error
;	r11=impure area addr
;	r9=ifab addr
;	r8=fab addr
;

	PUSHL	R8			; save old fab address
	PUSHL	16(AP)			; and the new fab address

;++
;
;  Parse the old file spec and look up the old file.
;
;--

	BSBW	RM$PARSE_FILE		; go parse the old file spec
	BSBW	CHECK_PARSE		; and perform various checks
	MOVZBL	#IO$_ACCESS,R5		; function code for file lookup
	BSBW	FILFNC			; go lookup old file
	BLBC	R0,ERRACC		; get out on error
	BSBW	RM$FILLNAM		; fill in the old nam blk, if any
	BLBC	R0,CLEAN		; get out on error

;++
;
;  save the old file name context and process new
;
;--

	PUSHL	R10			; save old fwa address
	BSBW	NEWFAB			; get new name fab addr in r8
	BSBW	RM$PARSE_FILE		; parse new file name
					;  (but doesn't set did, therefore
					;  it doesn't stall)
	MOVL	8(SP),R8		; restore old fab address
	BSBW	CHECK_PARSE		; go verify parse

;
; verify that old and new device names are the same.  use ucb address
; from ccb to do the comparison.
;
; must first assign channel for new file.  old file has channel in ifab.
;

	MOVW	IFB$W_CHNL(R9),-(SP)	; save old file channel
	BSBW	RM$ASSIGN		; assign channel for new file
	BLBC	R0,ERRDEV		; if error, say bad dev name
	BSBW	RM$GETCCB		; get ccb ptr for new file
	MOVL	CCB$L_UCB(R1),R4	; get ucb address into r4
	$DASSGN_S	CHAN=IFB$W_CHNL(R9)	; remove the channel
	MOVW	(SP)+,IFB$W_CHNL(R9)	; restore old channel
	BSBW	RM$GETCCB		; get ccb address of old fnm
	CMPL	R4,CCB$L_UCB(R1)	; are ucb addresses equal?
	BNEQ	ERRDEV			; if neq no -- error from rename
	MOVL	(SP),R0			; get old fwa ptr
	MOVC3	#6,FWA$T_FIBBUF+FIB$W_FID(R0),-; copy fid to special place
		FWA$T_RNM_FID(R10)	; for invalid directory rename check
	BSBW	RM$SETFIB		; set up fib descriptor
	BSBW	RM$SETDID_ALT		; look up new directory did
	BLBC	R0,CLEAN		; get out on error
	BRB	ENTER			; redistribute error handling


;
; handle error conditions
;

ERRACC:	$PSECT_BR	L$RMS0
	RMSERR	ACC,R1			; lookup failed
MAPERR:	BSBW	RM$MAPERR		; go map error to rms
					;  and fall thru to clean_up

	$PSECT_RESTORE

CLEAN:	$PSECT_BR	L$RMS0
CLEAN_UP:
	MOVL	IMP$L_SAVED_SP(R11),R8	; restore old fab addr from stack
					;  (saved as 1st item on stack)
	MOVL	-(R8),R8		; this is the fab addr
	BRW	RM$CLSCU		; go evaporate all internal structs
	$PSECT_RESTORE

ERRDEV:	$PSECT_BR	L$RMS0
	RMSERR	DEV			; not same device or unit
	BRB	CLEAN_UP
	$PSECT_RESTORE


;++
;
;  both old and new names parsed o.k., the device and unit are the same,
;  and the old file has been looked up.
;  now do enter of new name and remove of old.
;
;--

ENTER:	MOVL	(SP),R0			; get old fwa address
	MOVC3	#6,FWA$T_FIBBUF+FIB$W_FID(R0),-
	 	 FWA$T_FIBBUF+FIB$W_FID(R10); copy old fid to new fib
	MOVZBL	#IO$_CREATE,R5		; qio function code for enter
	BSBB	FILFNC			; go do the enter
	BLBC	R0,ERRENT		; get out on error
	BSBB	NEWFAB			; get new fab addr in r8
	BSBW	RM$FILLNAM		; fill in new nam blk, if any
	BLBC	R0,CLEAN		; get out on error
	TSTL	R7			; do we have a nam blk?
	BEQL	10$			; branch if not

;
;  set the lowver and highver flags in the nam block
;

	ASSUME	FIB$V_HIGHVER EQ FIB$V_LOWVER+1
	ASSUME	NAM$V_HIGHVER EQ NAM$V_LOWVER+1
	EXTZV	#FIB$V_LOWVER,#2,-
	FIB$W_NMCTL+FWA$T_FIBBUF(R10),R1; get version bits
	INSV	R1,#NAM$V_LOWVER,#2,-
		 NAM$L_FNB(R7)		; and set in nam blk
10$:	MOVL	(SP),R10		; restore old fwa addr
	MOVL	8(SP),R8		; and old fab address
	MOVZBL	#IO$_DELETE,R5		; qio function code for remove
	BSBB	FILFNC			; go do the remove
	BLBC	R0,ERRRMV		; get out on error
	BRW	RM$CLSCU		; go evaporate ifab
					;  + return to user



;++
;
; handle error conditions
;
;--

ERRENT:	$PSECT_BR	L$RMS0
	RMSERR	ENT,R1			; enter failed
	BRB	MAPERR
	$PSECT_RESTORE

;

ERRRMV:	$PSECT_BR	L$RMS0
	RMSERR	RMV,R1			; remove failed
	BRB	MAPERR
	$PSECT_RESTORE


;++
;
;  filfnc subroutine to issue a qio function.
;
;  inputs:
;
;	r5		io function code
;	r8		fab address
;	r9		ifab address
;	r10		fwa address
;	r11		impure area address
;
;  outputs:
;
;	r0		status code
;	r1-r4,ap	destroyed
;
;--

FILFNC:	POPR	#^M<R4>			; get return pc into r4
	CLRQ	-(SP)			; p6=p5=0
	BSBW	RM$FCP_P4_P2		; set up p4 thru p2 to
					;  process name from fwa
	MOVL	R5,R0			; io function code to right reg.
	BRW	RM$FCPFNC_R4		; do function and return to caller

;++
;
;  subroutine to load address of new fab into r8 and check it for goodness.
;
;  inputs:
;
;	r9	ifab address
;	8(sp)	new fab address
;
;  outputs:
;
;	r8	new fab address
;
;  note: does not return if fab is bad.
;
;--

NEWFAB:	MOVL	8(SP),R8		; get new fab address
	IFNORD	#FAB$C_BLN,(R8),ERRFAB,IFB$B_MODE(R9)
					; branch if new fab not readable
	CMPB	FAB$B_BID(R8),#FAB$C_BID; is it a fab?
	BNEQ	ERRFAB			; branch if not
	CMPB	FAB$B_BLN(R8),#FAB$C_BLN; is it long enough?
	BLSSU	ERRBLN			; branch if not
	RSB


;++
;
;  check_parse subroutine to verify that the parsed file spec contained
;  no wild cards and did not specify a process-permanent file or a network node.
;
;  inputs:
;
;	r0	status code (checked for success)
;	r10	fwa address
;
;  outputs:
;
;	none
;
;  note:  does not return on error.
;
;--

CHECK_PARSE:
	BLBC	R0,CLEAN		; get out if parse failed
	BBS	#FWA$V_WILDCARD,(R10),ERRWLD; get out if wild card speced
	TSTB	FWA$B_ESCFLG(R10)	; ppf?
	BNEQ	ERRIOP			; branch if yes
	BBS	#FWA$V_NODE,(R10),ERRSUP; branch if node speced
	RSB


;++
;
;  handle errors
;
;--

ERRFAB:	$PSECT_BR	L$RMS0
	RMSERR	FAB			; new fab bad
	BRB	CLEAN_UP
	$PSECT_RESTORE

;

ERRBLN:	$PSECT_BR	L$RMS0
	RMSERR	BLN
	BRB	CLEAN_UP
	$PSECT_RESTORE

;

ERRWLD:	$PSECT_BR	L$RMS0
	RMSERR	WLD			; wild card in spec
	BRB	CLEAN_UP
	$PSECT_RESTORE

;

ERRIOP:	$PSECT_BR	L$RMS0
	RMSERR	IOP			; attempt to rename ppf
	BRB	CLEAN_UP
	$PSECT_RESTORE

;

ERRSUP:	$PSECT_BR	L$RMS0
	BSBW	NT$SUP_CTLFUNC		; unsupported network function
	BRB	CLEAN_UP
	$PSECT_RESTORE


	.END
