	$BEGIN	NT0CREATE,003,NF$NETWORK,<NETWORK CREATE FILE>


;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; Facility: RMS
;
; Abstract:
;
;	This module communicates with the File Access Listener (FAL) at the
;	remote node to create the specified file.
;
; Environment: VAX/VMS, executive mode
;
; Author: James A. Krycka,	Creation Date:	09-DEC-1977
;
; Modified By:
;
;	V03-003	KRM0048		K R Malik	20-Apr-1982
;		Fix bug in the way XAB's are probed in SEND_KEY and
;		SEND_ALL.
;
;	V02-002	JAK0075		J A Krycka	15-APR-1982
;		Do not return RMS$_CRE_STM if user specifies STM format.
;		Also, force RAT=CR if user specifies RFM=STM and RAT=none.
;
;	V03-001	KRM0046		K R Malik	 5-Apr-1982
;		Add status check after call to NT$SCAN_NAMBLK and scan specific
;		XAB's by calling NT$SCAN_KEYXAB & NT$SCAN_ALLXAB.
;
;	V02-052	JAK0071		J A Krycka	07-FEB-1982
;		Return more specific messages for unsupported error conditions.
;
;	V02-051	JAK0070		J A Krycka	31-JAN-1982
;		Fix bug that includes a DISPLAY field in the DAP Access message
;		when talking to a FAL that does not support this field.
;
;	V02-050	JAK0068		J A Krycka	30-DEC-1981
;		Continuation of V02-047 to properly handle stream-implied and
;		stream-embedded files.
;
;	V02-049	JAK0066		J A Krycka	01-OCT-1981
;		Continuation of V02-047.
;
;	V02-048	JAK0063		J A Krycka	29-AUG-1981
;		Alter processing of the FAC and SHR fields to facilitate
;		communication with non-VMS RMS-based systems.
;
;	V02-047	JAK0063		J A Krycka	28-AUG-1981
;		Add support for stream format files.
;
;	V02-046	JAK0063		J A Krycka	28-AUG-1981
;		Call NT$RECV_EXT_XAB instead of using in-line code.
;
;	V02-045	JAK0063		J A Krycka	25-AUG-1981
;		Update symbols to correspond to revised DAPDEF.MDL file.
;
;	V02-044	JAK0058		J A Krycka	02-JUN-1981
;		Move the DAP CRC table to a new module named NT0DAPCRC.
;		Also, call NT$CRC_INIT where appropriate.
;
;	V02-043	JAK0054		J A Krycka	24-FEB-1981
;		Revise processing of the FOP options DLT, SCF, and SPL in
;		NT$MAP_FOP for open and close operations.
;
;	V02-042	JAK0054		J A Krycka	24-FEB-1981
;		When building the DAP Attributes message, default the FSZ value
;		to 2 if user specifies 0.
;
;	V02-041	JAK0053		J A Krycka	22-JAN-1981
;		If the remote node is RT-11 or TOPS-20, then for non-block I/O
;		access use 514 instead of 512 as the MRS value in the DAP
;		Attributes message to account for the extra CRLF characters.
;
;	V02-040	JAK0051		J A Krycka	27-DEC-1980
;		Revise building of the SHR field to support the UPI and NIL
;		file sharing options.
;
;	V02-039	JAK0050		J A Krycka	17-NOV-1980
;		For a network access ignore the FOP magtape processing options
;		(NEF, POS, RWC, and RWO) unless the remote node is VMS.
;
;	V02-038	JAK0049		J A Krycka	17-OCT-1980
;		Conditionally send the DEQ field in the DAP Atttributes message.
;		Track entry point name changes in NT0DAPIO.
;
;	V02-037	JAK0049		J A Krycka	15-OCT-1980
;		Consolodate the logic that overrides the ALQ, BKS, DEQ, and FOP
;		fields of the FAB with corresponding ALQ, BKZ, DEQ, and AOP
;		fields of the Allocation XAB, if one is present.
;
;	V02-036	JAK0049		J A Krycka	14-OCT-1980
;		Support the File Header Characteristics XAB on $CREATE, i.e.,
;		use XAB$W_LRL as an input on $CREATE.
;
;	V02-035	JAK0049		J A Krycka	11-OCT-1980
;		Remove the COPY_REL_FILE subroutne as it did not serve it's
;		intended purpose.
;
;	V02-034	JAK0044		J A Krycka	28-APR-1980
;		Default FAB$B_FAC = 0 to <PUT> on $CREATE.
;		Default FAB$B_FAC = 0 to <GET> on $OPEN.
;
;	V02-033	JAK0044		J A Krycka	28-APR-1980
;		If the remote node is RT-11 then mask out <GET> access
;		on $CREATE and mask out <PUT> access on $OPEN.
;
;	V02-032	REFORMAT	J A Krycka	26-JUL-1980
;
;--

	.SBTTL	DECLARATIONS

;
; Include Files:
;

	$DAPPLGDEF			; Define DAP prologue symbols
	$DAPHDRDEF			; Define DAP message header
	$DAPCNFDEF			; Define DAP Configuration message
	$DAPATTDEF			; Define DAP Attributes message
	$DAPACCDEF			; Define DAP Access message
	$FABDEF				; Define File Access Block symbols
	$IFBDEF				; Define IFAB symbols
	$NWADEF				; Define Network Work Area symbols
	$XABDEF				; Define symbols common to all XABs

;
; Macros:
;
;	None
;
; Equated Symbols:
;

	ASSUME	DAP$Q_DCODE_FLG EQ 0
	ASSUME	NWA$Q_FLG EQ 0

;
; Own Storage:
;
;	None
;

	.SBTTL	NT$CREATE - PERFORM NETWORK CREATE FUNCTION

;++
; NT$CREATE - engages in a DAP dialogue with the remote FAL to create the
;	specified sequential, relative, or indexed file.
;
; Calling Sequence:
;
;	BSBW	NT$CREATE
;
; Input Parameters:
;
;	R8	FAB address
;	R9	IFAB address
;	R10	FWA address
;	R11	Impure Area address
;
; Implicit Inputs:
;
;	User FAB
;	User ALL, DAT, FHC, KEY, PRO, and RDT XABs
;	DAP$V_GEQ_V54
;	DAP$V_GEQ_V56
;	DAP$V_VAXVMS
;	DAP fields
;	IFB$B_FAC
;	IFB$L_NWA_PTR
;	IFB$W_DEVBUFSIZ
;	IFB$V_CREATE
;	IFB fields
;	NWA$V_DAP_STM
;	NWA$V_CVT_STM
;
; Output Parameters:
;
;	R0	Status code (RMS)
;	R1-R7	Destroyed
;	AP	Destroyed
;
; Implicit Outputs:
;
;	User FAB
;	User ALLXABs
;	IFB$B_BKS
;	IFB$L_HBK
;	IFB$V_DAP_OPEN
;	Resultant name string stored in FWA
;
; Completion Codes:
;
;	Standard RMS completion codes
;
; Side Effects:
;
;	None
;
;--

NT$CREATE::				; Entry point
	$TSTPT	NTCREATE		;

;+
; Exchange DAP Configuration messages with FAL.
;-

	MOVL	IFB$L_NWA_PTR(R9),R7	; Get address of NWA (and DAP)
	BSBW	NT$EXCH_CNF		; Exchange Configuration messages
	BLBC	R0,FAIL1		; Branch on failure
	BSBW	NT$CHK_ORG		; Check for supported organization
	BLBS	R0,BUILD_MASK		; Branch on success
FAIL1:	RSB				; Exit with RMS code in R0

;+
; First, build a mask (NWA$W_BUILD) that will determine which optional DAP
; messages to send to FAL.
; For $CREATE, these are the ALL, KEY, TIM  and PRO messages.
;
; Second, build a request mask (NWA$W_DISPLAY) that will be used in the Access
; message to request that optional DAP messages be returned by FAL.
; For $CREATE, these are the ALL and NAM messages. (Note that the Attributes
; message is required which will supply information to update the FAB.)
;-

BUILD_MASK:				; Build NWA$W_DISPLAY
	CLRL	R6			; Indicate this is not a close operation
	BSBW	NT$SCAN_XABCHN		; Scan user XAB chain and check FAL's
					;  capabilities; build request mask
	BLBC	R0,FAIL1		; Branch on failure to complete scan
	BICW2	#DAP$M_DSP_SUM,R2	; Ignore Summary XAB in chain
	CMPB	FAB$B_ORG(R8),#FAB$C_IDX; Branch if IDX organization
	BEQL	10$			;
	BICW2	#DAP$M_DSP_KEY,R2	; Ignore Key Definition XAB in chain
10$:	MOVW	R2,NWA$W_BUILD(R7)	; Save build mask
	BICW2	#<<DAP$M_DSP_PRO>!-	; Ignore these XABs in chain because
		  <DAP$M_DSP_TIM>!-	;  they are not updated on create
		  <DAP$M_DSP_KEY>!-	;
		0>,R2			;
	BSBW	NT$SCAN_NAMBLK		; Scan user Name Block and check FAL's
					;  capabilities; update request mask
	BLBC	R0,FAIL1		; Branch on failure to complete scan
	BISW2	#DAP$M_DSP_ATT,R2	; Request main Attributes message
	MOVW	R2,NWA$W_DISPLAY(R7)	; Save request mask

;+
; Override the ALQ, BKS, DEQ, and FOP fields of the FAB with corresponding
; ALQ, BKZ, DEQ, and AOP fields of the Allocation XAB (area 0 for index files),
; if one is present.
;-

OVERRIDE_FAB:				; Update FAB from ALLXAB
	BSBW	RM$SETALLOC		; Update FAB with ALQ, BKS, and DEQ
					;  fields from Allocation XAB (if
					;  present) and set-up default DEQ
	CMPB	FAB$B_ORG(R8),#FAB$C_IDX; Branch if IDX organization
	BEQL	SEND_ATT		;
	MOVL	NWA$L_ALLXABADR(R7),R6	; Get address of ALLXAB
	BEQL	SEND_ATT		; Branch if not found
	MOVZBL	XAB$B_AOP(R6),R1	; Get AOP bits
	CLRL	R2			; Clear resultant FOP bits
	$MAPBIT	XAB$V_CTG,FAB$V_CTG	; Map CTG bit
	$MAPBIT	XAB$V_CBT,FAB$V_CBT	; Map CBT bit
	BICL2	#<<FAB$M_CTG>!-		; Clear affected FOP bits
		  <FAB$M_CBT>!-		;
		0>,FAB$L_FOP(R8)	;
	BISL2	R2,FAB$L_FOP(R8)	; Update FOP from AOP

;+
; Build and send DAP Attributes message to partner.
;
; If the remote node is not a 'stream only' machine then create a file with
; the file attributes specified by the user.
; If, however, the remote node is a 'stream only' machine then:
;   (1)	for block I/O mode accept any sequential file but specify to FAL that
;	ORG = SEQ, RFM = FIX, RAT = 0, MRS = 512, and ALQ = user value.
;   (2)	for record I/O mode accept a sequential file having stream-embedded
;	format, or convert a sequential file in fixed-implied, variable-implied,
;	or stream-implied format to stream-embedded format by specifying that
;	ORG = SEQ, RFM = STM, RAT = EMBEDDED, MRS = 514, and ALQ = 0.
;-

SEND_ATT:				; (required message)
	MOVL	#DAP$K_ATT_MSG,R0	; Get message type value
	BSBW	NT$BUILD_HEAD		; Construct message header

	ASSUME	DAP$K_SEQ EQ FAB$C_SEQ
	ASSUME	DAP$K_REL EQ FAB$C_REL
	ASSUME	DAP$K_IDX EQ FAB$C_IDX

	ASSUME	DAP$K_UDF EQ 0
	ASSUME	DAP$K_FIX EQ 1
	ASSUME	DAP$K_VAR EQ 2
	ASSUME	DAP$K_VFC EQ 3
	ASSUME	DAP$K_STM EQ 4
	ASSUME	DAP$K_UDF EQ FAB$C_UDF
	ASSUME	DAP$K_FIX EQ FAB$C_FIX
	ASSUME	DAP$K_VAR EQ FAB$C_VAR
	ASSUME	DAP$K_VFC EQ FAB$C_VFC
	ASSUME	DAP$K_STM EQ FAB$C_STM

	ASSUME	DAP$V_FTN EQ FAB$V_FTN
	ASSUME	DAP$V_CR  EQ FAB$V_CR
	ASSUME	DAP$V_PRN EQ FAB$V_PRN
	ASSUME	DAP$V_BLK EQ FAB$V_BLK

;
; Construct attributes menu mask.
;

	MOVL	#<<DAP$M_DATATYPE>!-	; Always include DATATYPE, ORG, RFM,
		  <DAP$M_ORG>!-		;  RAT, MRS, ALQ, and FOP fields in
		  <DAP$M_RFM>!-		;  mask
		  <DAP$M_RAT>!-		;
		  <DAP$M_MRS>!-		;
		  <DAP$M_ALQ1>!-	;
		  <DAP$M_FOP1>!-	;
		0>,R1			;
	CMPB	FAB$B_ORG(R8),#FAB$C_SEQ; Branch if SEQ organization
	BEQL	20$			; If not, it's REL or IDX organization
	$SETBIT	#DAP$V_BKS,R1		; Add BKS fiels to mask
	CMPB	FAB$B_ORG(R8),#FAB$C_IDX; Branch if IDX organization
	BEQL	20$			; If not, it's REL organization
	$SETBIT	#DAP$V_MRN,R1		; Add MRN field to mask
20$:	$CASEB	SELECTOR=FAB$B_RFM(R8)-	; Record format:
		DISPL=<-		;
		    25$-		;  UDF
		    30$-		;  FIX
		    25$-		;  VAR
		    22$-		;  VFC
		    25$-		;  STM
		>			;
	BRW	NT$LCL_RFM		; Declare RMS$_SUPPORT error and exit
22$:	$SETBIT	#DAP$V_FSZ,R1		; Add FSZ field to mask
25$:	BBC	#DAP$V_GEQ_V54,(R7),30$	; Branch if partner uses DAP before V5.4
	TSTL	NWA$L_FHCXABADR(R7)	; Branch if user did not specify a
	BEQL	30$			;  FHCXAB
	$SETBIT	#DAP$V_LRL,R1		; Add LRL field to mask
30$:	TSTW	FAB$W_DEQ(R8)		; Branch if DEQ = 0
	BEQL	35$			;
	$SETBIT	#DAP$V_DEQ1,R1		; Add DEQ field to mask
35$:	MOVL	R1,R6			; Save attributes menu
	BSBW	NT$CVT_BN4_EXT		; Store attmenu as an extensible field

;
; Store remaining attributes fields per attmenu mask.
;

	BBC	#DAP$V_STM_ONLY,(R7),90$; Branch if not 'stream-only' machine

;
; We're talking to a 'stream-only' machine.
; Assume that ORG = SEQ since the NT$CHK_ORG test was passed.
;
; This section deals with the DATATYPE, ORG, RFM, RAT, MRS, and ALQ fields.
;

	BBS	#FAB$V_BIO,-		; Branch if block I/O mode
		FAB$B_FAC(R8),80$	;

;
; Based on RFM and RAT values, perform the following record format conversions
; when creating a file in record I/O mode on a 'stream-only' machine:
;
;	FIX-implied	becomes STM-embedded
;	VAR-implied	becomes STM-embedded
;	STM-implied	becomes STM-embedded
;	STM-embedded	remains STM-embedded
;	All other formats will be rejected
;
; Note that implied means RAT = CR and embedded means RAT = no carriage control
; bits are set.
;

	$CASEB	SELECTOR=FAB$B_RFM(R8)-	; Record format:
		DISPL=<-		;
		    60$-		;  UDF
		    70$-		;  FIX
		    70$-		;  VAR
		    60$-		;  VFC
		    65$-		;  STM
		>			;
60$:	BRW	NT$RMT_RFM		; Declare RMS$_SUPPORT error and exit
65$:	BITB	#<<FAB$M_FTN>!-		; Disallow Fortran and print file
		  <FAB$M_PRN>!-		;  carriage control; implied and none
		0>,FAB$B_RAT(R8)	;  are allowed
	BEQL	75$			;
	BRW	NT$RMT_RAT		; Declare RMS$_SUPPORT error and exit
70$:	$SETBIT	#NWA$V_CVT_STM,(R7)	; Denote that file format will be
					;  converted to stream at remote node
	BBS	#FAB$V_CR,-		; Require implied carriage control
		FAB$B_RAT(R8),75$	;  (i.e., <LF-record-CR>)
	BRW	NT$RMT_RAT		; Declare RMS$_SUPPORT error and exit
75$:	MOVB	#DAP$M_ASCII,(R5)+	; Store DATATYPE field
	MOVB	#DAP$K_SEQ,(R5)+	; Store ORG field
	MOVB	#DAP$K_STM,(R5)+	; Store RFM field
	MOVB	#DAP$M_EMBEDDED,(R5)+	; Store RAT field
	MOVW	#<512+2>,(R5)+		; Store MRS field
	CLRB	(R5)+			; Store ALQ field as zero
	$SETBIT	#NWA$V_DAP_STM,(R7)	; Set flag to notify $PUT service
					;  that remote file has stream format
	BRB	110$			; Join common code
80$:	MOVB	#DAP$M_IMAGE,(R5)+	; Store DATATYPE field
	MOVB	#DAP$K_SEQ,(R5)+	; Store ORG field
	MOVB	#DAP$K_FIX,(R5)+	; Store RFM field
	CLRB	(R5)+			; Store RAT field
	MOVW	#512,(R5)+		; Store MRS field
	MOVL	FAB$L_ALQ(R8),R1	; Get allocation quantity value
	BSBW	NT$CVT_BN4_IMG		; Store ALQ as an image field
	BRB	110$			; Join common code

;
; We're NOT talking to a 'stream-only machine'.
;
; This section deals with the DATATYPE, ORG, RFM, RAT, MRS, and ALQ fields.
;

90$:	MOVB	#DAP$M_IMAGE,(R5)+	; Store IMAGE mode in DATATYPE field
	BBS	#FAB$V_BIO,-		;  for block I/O access
		FAB$B_FAC(R8),92$	;  and ASCII mode
	MOVB	#DAP$M_ASCII,-1(R5)	;  for record I/O access
92$:	MOVB	FAB$B_ORG(R8),(R5)+	; Store ORG field
	MOVB	FAB$B_RFM(R8),(R5)+	; Store RFM field
	CMPB	FAB$B_RFM(R8),#FAB$C_STM; Branch if not stream format
	BNEQ	95$			;
	$SETBIT	#NWA$V_DAP_STM,(R7)	; Set flag to notify $PUT service
					;  that remote file has stream format
	BITB	#<<FAB$M_FTN>!-		; Force implied carriage control if
		  <FAB$M_CR>!-		;  user specifies no explicit carriage
		  <FAB$M_PRN>!-		;  control
		0>,FAB$B_RAT(R8)	;
	BNEQ	95$			;
	MOVB	#FAB$M_CR,FAB$B_RAT(R8)	;
95$:	MOVB	FAB$B_RAT(R8),(R5)+	; Store RAT field
	MOVW	FAB$W_MRS(R8),(R5)+	; Store MRS field
	BNEQ	100$			; Branch if non-zero
	BBC	#DAP$V_FCS,(R7),100$	; Branch if partner is not FCS based
	MOVW	IFB$W_DEVBUFSIZ(R9),-2(R5); Specify maximum value
100$:	MOVL	FAB$L_ALQ(R8),R1	; Get allocation quantity value
	BSBW	NT$CVT_BN4_IMG		; Store ALQ as an image field

;
; This section deals with the BKS, FSZ, MRN, DEQ, FOP, and LRL fields.
;

110$:	BBC	#DAP$V_BKS,R6,120$	; Used only if ORG = REL or IDX
	MOVB	FAB$B_BKS(R8),(R5)+	; Store BKS field
120$:	BBC	#DAP$V_FSZ,R6,130$	; Used only if RFM = VFC
	MOVB	FAB$B_FSZ(R8),(R5)+	; Store FSZ field
	BNEQ	130$			; Branch if non-zero
	MOVB	#2,-1(R5)		; Use default FSZ value
130$:	BBC	#DAP$V_MRN,R6,140$	; Used only if ORG = REL
	MOVL	FAB$L_MRN(R8),R1	; Get maximum record number value
	BSBW	NT$CVT_BN4_IMG		; Store MRN as an image field
140$:	BBC	#DAP$V_DEQ1,R6,145$	; Used only if DEQ > 0
	MOVW	FAB$W_DEQ(R8),(R5)+	; Store DEQ field
145$:	BSBW	NT$MAP_FOP		; Store FOP field
	BBC	#DAP$V_LRL,R6,150$	; Used only if RFM not = FIX
	MOVL	NWA$L_FHCXABADR(R7),R1	; Get address of FHCXAB
	MOVW	XAB$W_LRL(R1),(R5)+	; Store LRL field
150$:	BSBW	NT$BUILD_TAIL		; Finish building message
	BSBW	NT$TRANSMIT		; Send Attributes message to FAL
	BLBS	R0,SEND_KEY		; Branch on success
	BRW	FAIL2			; Failure

;+
; Build and send DAP Key Definition message(s) to partner.
;
; Note:	NT$SCAN_XABCHN determined that Key Definition XABs were chained together.
;-

SEND_KEY:				; (optional message)
	BBC	#DAP$V_DSP_KEY,-	; Branch if Key Definition message
		NWA$W_BUILD(R7),-	;  should not be sent
		SEND_ALL		;
	MOVL	NWA$L_KEYXABADR(R7),R6	; Get address of first user KEYXAB
10$:	BSBW	NT$SCAN_KEYXAB		; Scan the Key Definition XAB
	BLBC	R0,FAIL2		; Branch on failure
	BSBW	NT$ENCODE_KEY		; Build message
	BSBW	NT$TRANSMIT		; Send Key Definition message to FAL
	BLBC	R0,FAIL2		; Branch on failure
	DECB	NWA$B_KEYXABCNT(R7)	; Any more KEYXABs to process?
	BLEQU	SEND_ALL		; Branch if not
	MOVL	XAB$L_NXT(R6),R6	; Get address on next XAB in chain
	BRB	10$			; Continue with next XAB

;+
; Build and send DAP Allocation message(s) to partner.
;
; Note:	NT$SCAN_XABCHN determined that Allocation XABs were chained together.
;-

SEND_ALL:				; (optional message)
	BBC	#DAP$V_DSP_ALL,-	; Branch if Allocation message
		NWA$W_BUILD(R7),-	;  should not be sent
		SEND_TIM		;
	MOVL	NWA$L_ALLXABADR(R7),R6	; Get address of first user ALLXAB
10$:	BSBW	NT$SCAN_ALLXAB		; Scan the Allocation XAB
	BLBC	R0,FAIL2		; Branch on failure
	BSBW	NT$ENCODE_ALL		; Build message
	BSBW	NT$TRANSMIT		; Send Allocation message to FAL
	BLBC	R0,FAIL2		; Branch on failure
	DECB	NWA$B_ALLXABCNT(R7)	; Any more Allocation XABs to process?
	BLEQU	SEND_TIM		; Branch if not
	MOVL	XAB$L_NXT(R6),R6	; Get address on next XAB in chain
	BRB	10$			; Continue with next XAB

;+
; Build and send DAP Date and Time message to partner.
;
; Note:	If the user supplied a Date and Time XAB it will be used to build the
;	message, else the user supplied Revision Date and Time XAB will be used.
;-

SEND_TIM:				; (optional message)
	BBC	#DAP$V_DSP_TIM,-	; Branch if Date and Time message
		NWA$W_BUILD(R7),-	;  should not be sent
		SEND_PRO		;
	MOVL	NWA$L_DATXABADR(R7),R6	; Get address of user DATXAB
	BEQL	10$			; Branch if none
	BSBW	NT$ENCODE_TIM_D		; Build message
	BRB	20$			; Join common code
10$:	MOVL	NWA$L_RDTXABADR(R7),R6	; Get address of user RDTXAB instead
	BSBW	NT$ENCODE_TIM_R		; Build message
20$:	BSBW	NT$TRANSMIT		; Send Date and Time message to FAL
	BLBC	R0,FAIL2		; Branch on failure

;+
; Build and send DAP Protection message to partner.
;-

SEND_PRO:				; (optional message)
	BBC	#DAP$V_DSP_PRO,-	; Branch if Protection message
		NWA$W_BUILD(R7),-	;  should not be sent
		SEND_ACC		;
	MOVL	NWA$L_PROXABADR(R7),R6	; Get address of user PROXAB
	BSBW	NT$ENCODE_PRO		; Build message
	BSBW	NT$TRANSMIT		; Send Protection message to FAL
	BLBS	R0,SEND_ACC		; Branch on success
FAIL2:	RSB				; Exit with RMS code in R0

;+
; Build and send DAP Access message to partner.
;-

SEND_ACC:				; (required message)
	$SETBIT	#NWA$V_LAST_MSG,(R7)	; Declare this last message to block
	MOVL	#DAP$K_ACC_MSG,R0	; Get message type value
	BSBW	NT$BUILD_HEAD		; Construct message header
	MOVB	#DAP$K_CREATE,(R5)+	; Store ACCFUNC field
	MOVB	#DAP$M_NONFATAL,(R5)+	; Store ACCOPT field
	BSBW	NT$CRC_INIT		; Initialize CRC value if both parties
					;  support file level CRC computation
	BLBC	R0,10$			; Branch if CRC checking disabled
	BISB2	#DAP$M_RET_CRC,-1(R5)	; Request checksum option
10$:	BSBW	NT$GET_FILESPEC		; Store FILESPEC as a counted
					;  ASCII string
	BSBW	NT$GET_FAC_SHR		; Store FAC and SHR fields
	MOVZWL	NWA$W_DISPLAY(R7),R1	; Get request mask
	CMPW	#DAP$M_DSP_ATT,R1	; Omit DISPLAY field from message if
	BEQL	20$			;  only Attributes message specified
					;  (because some older FALs do not
					;  support this field nor Ext Att msgs)
	BSBW	NT$CVT_BN4_EXT		; Store DISPLAY as an extensible field
20$:	BSBW	NT$BUILD_TAIL		; Finish building message
	BSBW	NT$TRANSMIT		; Send Access message to FAL
	BLBC	R0,FAIL2		; Branch on failure

;+
; Receive DAP Attributes message from partner and update the user FAB.
; Also update the user ALLXAB if an Allocation message will not be returned
; by FAL.
;
; Note: The user XAB chain is scanned again to probe all user XABs to protect
;	RMS from a user who deletes the address space where an XAB was
;	previously found.
;-

RECV_ATT:				; (required message)
	$SETBIT	#DAP$K_ATT_MSG,DAP$L_MSG_MASK(R7)
					; Expect response of Attributes message
	BSBW	NT$RECEIVE		; Get reply from FAL
	BLBC	R0,FAIL3		; Branch on failure
	CLRL	R6			; Indicate this is not a close operation
	BSBW	NT$SCAN_XABCHN		; Scan user XAB list again
	BLBC	R0,FAIL3		; Branch on failure to scan XABs
	MOVB	DAP$B_ORG(R7),-		; Save file organization type
		NWA$B_ORG(R7)		;
	BSBW	NT$MAP_DEV_CHAR		; Process device characteristics
	BSBW	UPDATE_FAB		; Update user FAB
	BBS	#DAP$V_DSP_ALL,-	; Branch if Allocation message
		NWA$W_DISPLAY(R7),-	;  was requested
		RECV_EXT_ATT		;
	BSBW	NT$DECODE_ALL_A		; Update user ALLXAB from fields in
					;  Attributes message (unless ORG = IDX)

;+
; Receive DAP Extended Attributes messages from partner and update the user
; ALLXABs.
;
; Note:	For indexed files, multiple Allocation messages may be returned.
;-

RECV_EXT_ATT:				; (optional--must be requested)
	BBC	#DAP$V_DSP_ALL,-	; Branch if Allocation message was not
		NWA$W_DISPLAY(R7),-	;  requested
		RECV_NAM		;
	BSBW	NT$RECV_EXT_ATT		; Process Extended Attributes messages
	BLBC	R0,FAIL3		; Branch on failure

;+
; Receive DAP (resultant) Name message from partner.
;-

RECV_NAM:				; (optional--must be requested)
	BBC	#DAP$V_DSP_NAM,-	; Branch if Name message was not
		NWA$W_DISPLAY(R7),-	;  requested
		RECV_ACK		;
	$SETBIT	#DAP$K_NAM_MSG,DAP$L_MSG_MASK(R7)
					; Expect response of Name message
	BSBW	NT$RECEIVE		; Get reply from FAL
	BLBC	R0,FAIL3		; Branch on failure
	BSBW	NT$DECODE_NAM		; Process resultant name string

;+
; Receive DAP Acknowledge message from partner.
;-

RECV_ACK:				; (required message)
	$SETBIT	#DAP$K_ACK_MSG,DAP$L_MSG_MASK(R7)
					; Expect response of Acknowledge message
	BSBW	NT$RECEIVE		; Get reply from FAL
	BLBC	R0,FAIL3		; Branch on failure
	$SETBIT	#IFB$V_DAP_OPEN,(R9)	; Yes, denote FAL has opened file
	RMSSUC				; Return success
	BBC	#NWA$V_CVT_STM,(R7),FAIL3;Branch if no conversion will occur
	RMSERR	CRE_STM			; Return alternate success to indicate
					;  that file format will become stream
FAIL3:	RSB				; Exit with RMS code in R0

	.SBTTL	UPDATE_FAB

;++
; Update the user FAB from the Attributes message.
;
; Note:	BLS will be updated directly in the FAB, whereas, ALQ will be updated
;	in the IFB and then returned to the FAB by RMS0OPEN exit code.
;--

UPDATE_FAB:				; Entry point

;
; Process the DAP BLS field.
;

	CMPB	DAP$B_ORG(R7),#DAP$K_SEQ; Branch if not SEQ organization
	BNEQ	10$			;
	MOVW	DAP$W_BLS(R7),FAB$W_BLS(R8)

;
; Process the DAP ALQ and HBK fields.
;
; Note:	ALQ and HBK are equivalent, but not all non-VAX nodes return HBK.
;

10$:	MOVL	DAP$L_ALQ1(R7),IFB$L_HBK(R9)

;
; Save FAB BKS field for use later by RMS0OPEN.
;

20$:	MOVB	FAB$B_BKS(R8),IFB$B_BKS(R9)
	RSB				; Exit

	.SBTTL	NT$CHK_ORG - CHECK FILE ORGANIZATION

;++
; NT$CHK_ORG checks the ORG value against that supported by the remote FAL.
;--

NT$CHK_ORG::				; Entry point
	CMPB	FAB$B_ORG(R8),#FAB$C_SEQ; Check for sequential organization
	BNEQ	10$			; Branch if not
	BBS	#DAP$V_SEQORG,-		; Branch if supported by partner
		DAP$Q_SYSCAP(R7),40$	;
	BRB	30$			; Error if not
10$:	CMPB	FAB$B_ORG(R8),#FAB$C_REL; Check for relative organization
	BNEQ	20$			; Branch if not
	BBS	#DAP$V_RELORG,-		; Branch if supported by partner
		DAP$Q_SYSCAP(R7),40$	;
	BRB	30$			; Error if not
20$:	CMPB	FAB$B_ORG(R8),#FAB$C_IDX; Check for indexed organization
	BNEQ	30$			; Error if not
	BBS	#DAP$V_IDXORG,-		; Branch if supported by partner
		DAP$Q_SYSCAP(R7),40$	;
30$:	BRW	NT$RMT_ORG		; Declare RMS$_SUPPORT error and exit
40$:	RMSSUC				; Return success
	RSB				; Exit with RMS code in R0

	.SBTTL	NT$GET_FAC_SHR

;++
; This routine builds the DAP FAC and SHR fields and stores them as extensible
; fields in the DAP message.
;
; Note:	It is assumed that each of these fields can be encoded into one byte
;	(i.e., that an extension byte is never needed).
;
; Note:	The definitions of the bit offsets for the FAC field in the DAP and FAB
;	control blocks are the same, whereas, the defintions of the bit offsets
;	for the SHR field in these control blocks are slightly different.
;--

NT$GET_FAC_SHR::			; Entry point

	ASSUME DAP$V_GET EQ FAB$V_GET
	ASSUME DAP$V_PUT EQ FAB$V_PUT
	ASSUME DAP$V_DEL EQ FAB$V_DEL
	ASSUME DAP$V_UPD EQ FAB$V_UPD
	ASSUME DAP$V_TRN EQ FAB$V_TRN
	ASSUME DAP$V_BIO EQ FAB$V_BIO
	ASSUME DAP$V_BRO EQ FAB$V_BRO

;+
; First the FAC field.
;
; Note:	If partner node is:
;   (1)	VAX/VMS since  DAP V5.6 then map <GET,PUT,DEL,UPD,TRN,BIO,BRO>.
;   (2)	VAX/VMS before DAP V5.6 then map <GET,PUT,DEL,UPD,TRN,BIO>.
;   (3) not VAX/VMS but RMS based    map <GET,PUT,DEL,UPD,TRN,BIO>.
;   (4)	not RMS based then map <GET,PUT,BIO> only.
; Also, if partner is RT-11, then mask out <GET> on $CREATE and mask out <PUT>
; on $OPEN.
;-

MAP_FAC:				;
	MOVB	IFB$B_FAC(R9),(R5)	; Store FAC field
	BICB2	#FAB$M_EXE,(R5)		; Mask out this option but don't
					;  complain about it
	BBS	#DAP$V_RMS,(R7),20$	; Branch if partner is RMS based
	BICB2	#<<DAP$M_DEL>!-		; Mask out more bits
		  <DAP$M_UPD>!-		;
		  <DAP$M_TRN>!-		;
		  <DAP$M_BRO>!-		;
		0>,(R5)			;
	CMPB	NWA$B_OSTYPE(R7),-	; Branch if remote node is not RT-11
		#DAP$K_RT11		;
	BNEQ	40$			;
	BBS	#IFB$V_CREATE,(R9),10$	; Branch on $CREATE
	BICB2	#DAP$M_PUT,(R5)		; Mask out <PUT> access on $OPEN
	BRB	40$			;
10$:	BICB2	#DAP$M_GET,(R5)		; Mask out <GET> access on $CREATE
	BRB	40$			;
20$:	BBC	#DAP$V_VAXVMS,(R7),30$	; Branch if partner is not VAX/VMS
	BBS	#DAP$V_GEQ_V56,(R7),40$	; Branch if partner uses DAP since V5.6
30$:	BICB2	#DAP$M_BRO,(R5)		; Mask out this option but don't
					;  complain about it
40$:	INCL	R5			; Advance to next field in message

;+
; Next the SHR field.
;
; Note:	If partner node is:
;   (1)	VAX/VMS since  DAP V5.6 then map <GET,PUT,DEL,UPD,UPI,NIL>.
;   (2)	VAX/VMS before DAP V5.6 then map <GET,PUT,DEL,UPD>.
;   (3)	not VAX/VMS then map <GET,PUT> only.
;-

MAP_SHR:				;
	MOVZBL	FAB$B_SHR(R8),R1	; Get SHR bits
	CLRL	R2			; Clear resultant SHR bits
	$MAPBIT	FAB$V_SHRPUT,DAP$V_SHRPUT; Map PUT bit
	$MAPBIT	FAB$V_SHRGET,DAP$V_SHRGET; Map GET bit
	BBC	#DAP$V_VAXVMS,(R7),10$	; Branch if partner is not VAX/VMS
	$MAPBIT	FAB$V_SHRDEL,DAP$V_SHRDEL; Map DEL bit
	$MAPBIT	FAB$V_SHRUPD,DAP$V_SHRUPD; Map UPD bit
	BBC	#DAP$V_GEQ_V56,(R7),10$	; Branch if partner uses DAP before V5.6
	$MAPBIT	FAB$V_UPI,DAP$V_UPI	;  Map UPI bit
	$MAPBIT	FAB$V_NIL,DAP$V_NIL	;  Map NIL bit
10$:	MOVB	R2,(R5)+		; Store SHR field

;
; The following is special code to handle an incompatibility in the processing
; of the FAC/SHR fields that exists between VAX-11 RMS V3.0 and RMS-11 V1.8
; (and possibly with other file systems).
;
; VAX-11 RMS allows FAC = <GET> and SHR = <GET!PUT> but RMS-11 objects to <PUT>
; in the SHR field unless <PUT> in the FAC field is also set.
;
; The temporary solution is to mask out <PUT> in the SHR field in this
; circumstance if the remote node is not VAX/VMS.
;

	BBS	#DAP$V_VAXVMS,(R7),20$	; Branch if partner is VAX/VMS
	BBC	#DAP$V_SHRPUT,-1(R5),20$; Branch if PUT bitnot set in SHR
	BBS	#DAP$V_PUT,-2(R5),20$	; Branch if PUT bitset in FAC
	$CLRBIT	#DAP$V_SHRPUT,-1(R5)	; Clear PUT bit in SHR field
20$:	RSB				; Exit

	.SBTTL	NT$MAP_FOP - MAP FOP OPTIONS

;++
; This routine builds the DAP FOP field and stores it as an extensible field
; in the DAP message.
;--

NT$MAP_FOP::				; Entry point
	MOVL	FAB$L_FOP(R8),R1	; Get FOP bits
	CLRL	R2			; Clear resultant FOP bits

;
; The following DAP bits are defined in the DAP V4.1 specification.
; These will be mapped.
;

	$MAPBIT	FAB$V_CTG,DAP$V_CTG	; Map CTG bit
	$MAPBIT	FAB$V_SUP,DAP$V_SUP	; Map SUP bit
	$MAPBIT	FAB$V_TMP,DAP$V_TMP	; Map TMP bit
	$MAPBIT	FAB$V_TMD,DAP$V_TMD	; Map TMD bit
	$MAPBIT	FAB$V_WCK,DAP$V_WCK	; Map WCK bit
	$MAPBIT	FAB$V_RCK,DAP$V_RCK	; Map RCK bit
; #####	$MAPBIT	FAB$V_DMO,DAP$V_DMO	; Map DMO bit
					; Note: this is not implemented in RMS32

;
; The following DAP bits are defined in the DAP V4.1 specification.
; These will be mapped iff partner is VAX/VMS.
;

	BBC	#DAP$V_VAXVMS,(R7),10$	; Branch if partner is not VAX/VMS
	$MAPBIT	FAB$V_RWO,DAP$V_RWO	; Map RWO bit
	$MAPBIT	FAB$V_RWC,DAP$V_RWC	; Map RWC bit
	$MAPBIT	FAB$V_POS,DAP$V_POS	; Map POS bit
	$MAPBIT	FAB$V_NEF,DAP$V_NEF	; Map NEF bit
; #####	$MAPBIT	FAB$V_CIF,DAP$V_CIF	; Map CIF bit
					; Note: this option is simulated, thus
					;  it is not requested via FOP field

;
; The following DAP bits were defined in the DAP V4.2 specification.
; These will be mapped iff partner supports all of the requested options; else
; ignored for now--they will be re-examined on close for potential alternate
; processing using a separate DAP access function.
;

	ASSUME	FAB$V_SPL+1 EQ FAB$V_SCF
	ASSUME	FAB$V_SCF+1 EQ FAB$V_DLT

	ASSUME	DAP$V_FOPSPL+1 EQ DAP$V_FOPSCF
	ASSUME	DAP$V_FOPSCF+1 EQ DAP$V_FOPDLT

10$:	EXTZV	#FAB$V_SPL,#3,R1,R4	; Extract the three FOP bits
	BEQL	20$			; Branch if none set
	EXTZV	#DAP$V_FOPSPL,#3,-	; Extract the three corresponding
		DAP$Q_SYSCAP(R7),R0	;  SYSCAP bits
	BICL2	R0,R4			; Mask out supported requests
	BNEQ	20$			; Branch if any are not supported
	$MAPBIT	FAB$V_SPL,DAP$V_SPL	; Map SPL bit
	$MAPBIT	FAB$V_SCF,DAP$V_SCF	; Map SCF bit
	$MAPBIT	FAB$V_DLT,DAP$V_DLT	; Map DLT bit

;
; The following DAP bits were defined in the DAP V4.2 specification or later.
; These will be mapped iff partner is VAX/VMS and for MXV additional checks
; will be made.
;

20$:	BBC	#DAP$V_VAXVMS,(R7),30$	; Branch if partner is not VAX/VMS
	$MAPBIT	FAB$V_SQO,DAP$V_SQO	; Map SQO bit
	$MAPBIT	FAB$V_MXV,DAP$V_MXV	; Map MXV bit
	$MAPBIT	FAB$V_CBT,DAP$V_CBT	; Map CBT bit
; *****	$MAPBIT	FAB$V_DFW,DAP$V_DFW	; Map DFW bit
	$MAPBIT	FAB$V_TEF,DAP$V_TEF	; Map TEF bit
; #####	$MAPBIT	FAB$V_OFP,DAP$V_OFP	; Map OFP bit
					; Note: it makes no sense to send this
					;  bit since all parsing is done locally
	BRB	40$			;
30$:	BBC	#DAP$V_RMS,(R7),40$	; Branch if partner is not RMS based
	BBC	#DAP$V_GEQ_V56,(R7),40$	; Branch if partner uses DAP before V5.6
	$MAPBIT	FAB$V_MXV,DAP$V_MXV	; Map MXV bit
40$:	MOVL	R2,R1			; Move data to correct register
	BSBW	NT$CVT_BN4_EXT		; Store FOP as an extensible field
	RSB				; Exit with RMS code in R0

	.END				; End of module
