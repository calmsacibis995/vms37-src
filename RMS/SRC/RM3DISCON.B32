MODULE RM3DISCON (LANGUAGE (BLISS32) ,
		IDENT = 'V03-001'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:	RMS32 INDEX SEQUENTIAL FILE ORGANIZATION
!
! ABSTRACT:
!                INDEXED SPECIFIC CODE FOR $DISCONNECT
!
!
! ENVIRONMENT:
!
!		VAX/VMS OPERATING SYSTEM
!
!--

!
! AUTHOR:        Wendy Koenig     CREATION DATE:        10-APR-78  15:10
!
!
! MODIFIED BY:
!
!	V03-001 LJA0007		Laurie Anderson 	25-Mar-1982
!		Change KBUFSZ to reference a macro when computing buffer 
!		size and make IFB$B_KBUFSZ a word, now: IFB$W_KBUFSZ.
!
!	V02-017	CDS0004		C Saether		10-Dec-1981
!		Rename the psect yet again.
!
!	V02-016	CDS0003		C Saether		29-Sep-1981
!		Deallocate 5 keybuffers always.
!
!	V02-015	PSK0002		Paulina S. Knibbe	08-Aug-1981
!		Remove support for truncated index keys on prologue
!		three files. (SPLCTX)
!
!	V02-014	KPL0001		Peter Lieberwirth	24-Jul-1981
!		Rename the PSECT again to fix broken banches.
!
!	V02-013	CDS0002		C D Saether		16-Jul-1981
!		Do not deallocate anything on indirect rundown.
!
!	V02-012	MCN0003		Maria del C. Nasr	19-Jun-1981
!		Deallocate the fifth key buffer for prologue 3 files.
!
!		PSK0001		Paulina S. Knibbe	12-Jun-1981
!		Dellocate the split context block in prologue three files
!
!		MCN0002		Maria del C. Nasr	15-May-1981
!		Deallocate the fourth key buffer in prologue 3 files.
!
!		MCN0001		Maria del C. Nasr	20-Apr-1981
!		Add code to deallocate record buffer for prologue 3 files.
!
!	V03-011	CDS0001		C D Saether		6-Feb-1981	23:57
!		Rename psect.
!
!	V02-010	REFORMAT	K. E. Kinnear		23-Jul-1980	10:06
!
! REVISION HISTORY:
!
!	V01-009			C. D. Saether		1-Nov-1979	6:00
!		RM$DISCONNOM returns lock BDB and BCB now.
!
!	V01-008			W. Koenig		6-Feb-1979	17:22
!		Decrement EXTRABUF IF BCNT GTR 2.
!
!	V01-007			W. Koenig		22-Jan-1979	13:09
!		Deallocate one lock BDB per stream, not per file.
!		(Was needed for UPDATE RRV.)
!
!	V01-006			W. Koenig		20-Nov-1978	11:19
!		More changes for sharing.
!
!	V01-005			W. Koenig		13-Nov-1978	13:36
!		Sharing implementation changes.
!
!	V01-004			W. Koenig		3-Nov-1978	9:12
!		Size of UPDBUF is NUM_KEYS, instead of UBUFSZ.
!
!	V01-003			W. Koenig		24-Oct-1978	14:01
!		Make changes caused by sharing conventions.
!
!	V01-002			W. Koenig		24-Jul-1978	14:00
!		Deallocate 3rd key buffer used to store primary key on put.
!
!*****

LIBRARY 'RMSLIB:RMS';

REQUIRE 'RMSSRC:RMSIDXDEF';

! define default psects for code
!

PSECT
    CODE = $RMS$3(PSECT_ATTR),
    PLIT = $RMS$3(PSECT_ATTR);

! Linkages
!

LINKAGE
    L_KEY_DESC,
    L_RETS0SPC,
    L_RETSPC,
    L_CACHE,
    L_RETSPC1,
    L_RELEASE,
    L_DISCONNECT3;

! Forward Routines
!
! External Routines
!

EXTERNAL ROUTINE
    RM$KEY_DESC	: RL$KEY_DESC,
    RM$RETS0SPC	: RL$RETS0SPC,
    RM$RETSPC	: RL$RETSPC,
    RM$RETSPC1	: RL$RETSPC1,
    RM$CACHE	: RL$CACHE,
    RM$RELEASE	: RL$RELEASE;


GLOBAL ROUTINE RM$DISCONNECT3B : RL$DISCONNECT3 =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!  This module performs the following functions required for
!	disconnecting indexed files:
!
!    1 -- return key buffers and update buffer
!    2 -- return the NRP cell
!    3 -- return record output buffer for prologue 3 files
!
! CALLING SEQUENCE:
!
!	BSBW	RM$DISCONNECT3B
!	 Entered via case branch from RMS$DISCONNECT or RMS$CLOSE and
!	 BSBW from RM$DISCONNECT3
!
!	Returns to RM$DISCONNECT3 
!	 and then branches to RM$DISCOMMON to finish up.
!
! INPUT PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	R8 -- RAB address
!	R9 -- IRAB address
!	R10 -- IFAB address
!	R11 -- IMPURE AREA address
!
! OUTPUT PARAMETERS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	Usual RMS status codes.
!
! SIDE EFFECTS:
!
!	Returns:	NRP cell
!			Key buffer
!			Update buffer
!			BCB & the lock BDB if they existed
!
!--

    BEGIN

    ASSUME_C( %QUOTE SIFB$L_NRP_LIST, %QUOTE IFB$L_NRP_LIST);

    EXTERNAL REGISTER
	COMMON_RAB_STR;

    GLOBAL REGISTER
	R_IDX_DFN_STR;

    ! If block I/O then return successfully, nothing needs doing.
    ! Also do nothing on indirect rundown.
    !

    IF .IFAB[IFB$V_BIO] OR .IFAB[IFB$V_PPF_IMAGE]
    THEN
	RETURN RMSSUC();

    ! Decrement the number of EXTRABUFS if we had extra buffers.
    !

    IF .IRAB[IRB$B_BCNT] GTR 2
    THEN
	IFAB[IFB$B_EXTRABUF] = .IFAB[IFB$B_EXTRABUF] - (.IRAB[IRB$B_BCNT] - 2);

    RM$KEY_DESC(0);

    ! Return the NRP cell, ignoring any errors. Unlink it first ( before
    ! returning the space) to avoid any conflicts. Create a block to 
    ! define S_IFAB.
    !
    BEGIN

    LOCAL
	S_IFAB	: REF BBLOCK;

    S_IFAB = .IFAB;

    IF .IFAB[IFB$L_FRB_PTR] NEQ 0
    THEN
	S_IFAB = .BBLOCK[.IFAB[IFB$L_FRB_PTR], FRB$L_SIFAB_PTR];

    IF .S_IFAB[IFB$L_NRP_LIST] EQL .IRAB[IRB$L_NRP_PTR]
    THEN
	S_IFAB[IFB$L_NRP_LIST] = .BBLOCK[.IRAB[IRB$L_NRP_PTR], NRP$L_LINK]
    ELSE
	BEGIN

	LOCAL
	    PTR	: REF BBLOCK;

	PTR = .S_IFAB[IFB$L_NRP_LIST];

	WHILE .PTR[NRP$L_LINK] NEQ .IRAB[IRB$L_NRP_PTR]
	DO
	    PTR = .PTR[NRP$L_LINK];

	PTR[NRP$L_LINK] = .BBLOCK[.IRAB[IRB$L_NRP_PTR], NRP$L_LINK];
	END;

    BEGIN

    GLOBAL REGISTER
	SIZE = 2;

    SIZE = NRP$C_BLN;

    IF .IFAB[IFB$L_FRB_PTR] NEQ 0
    THEN
	RM$RETS0SPC(.S_IFAB, .IRAB[IRB$L_NRP_PTR])
    ELSE
	RM$RETSPC(.IFAB, .IRAB[IRB$L_NRP_PTR]);

    IRAB[IRB$L_NRP_PTR] = 0
    END;
    END;				! { end of block defining s_ifab }

    ! Return key buffer, ignore errors
    !
    BEGIN

    GLOBAL REGISTER
	SIZE = 2;

    SIZE = .IFAB[IFB$W_KBUFSZ]*5;

    IF .SIZE LSS 12
    THEN
	SIZE = 12;

    RM$RETSPC1(KEYBUF_ADDR(1));

    ! Return update buffer ignoring errors
    !
    IF .IFAB[IFB$V_UPD]
    THEN
	BEGIN
	SIZE = .IFAB[IFB$B_NUM_KEYS];

	IF .SIZE LSS 12
	THEN
	    SIZE = 12;

	RM$RETSPC1(.IRAB[IRB$L_UPDBUF]);
	END;

    ! Return record buffer if prologue 3 file
    !
    IF .IFAB[IFB$B_PLG_VER] EQLU PLG$C_VER_3
    THEN
	BEGIN

	IF .IFAB[IFB$W_MRS] EQLU 0
	THEN
	    SIZE = .IDX_DFN[IDX$B_DATBKTSZ] * 512
	ELSE
	    SIZE = .IFAB[IFB$W_MRS] + IRC$C_KEYCMPOVH + IRC$C_DATCMPOVH;

	IF .SIZE LSS 12
	THEN
	    SIZE = 12;

	RM$RETSPC1(.IRAB[IRB$L_RECBUF]);

	END;
    END;
    RETURN RMSSUC()

    END;

END

ELUDOM
