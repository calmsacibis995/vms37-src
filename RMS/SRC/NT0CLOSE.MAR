	$BEGIN	NT0CLOSE,027,NF$NETWORK,<NETWORK CLOSE FILE>


;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; Facility: RMS
;
; Abstract:
;
;	This module communicates with the File Access Listener (FAL) at the
;	remote node to close the specified file.
;
; Environment: VAX/VMS, executive mode
;
; Author: James A. Krycka,	Creation Date:	09-DEC-1977
;
; Modified By:
;
;	V02-027	JAK0071		J A Krycka	04-FEB-1982
;		Fix problem with CRC calculation when file transfer retrieval
;		mode has been prematurely terminated.
;
;	V02-026	JAK0065		J A Krycka	21-SEP-1981
;		Send XABs on close only if the file is write accessed.
;
;	V02-025	JAK0064		J A Krycka	4-SEP-1981
;		Continuation of V02-024.
;
;	V02-024	JAK0063		J A Krycka	28-AUG-1981
;		Support the Protection XAB on close.
;		Support the Revision Date and Time XAB on close.
;
;	V02-023	JAK0062		J A Krycka	06-AUG-1981
;		Further process RMS$_CRC error on close.
;
;	V02-022	JAK0055		J A Krycka	12-MAR-1981
;		Continuation of V02-021 to correct case error in REEXAMINE_FOP.
;
;	V02-021	JAK0054		J A Krycka	23-FEB-1981
;		This module has been extensively edited to add comments and to
;		revise processing of the FOP options DLT, SCF, and SPL.
;
;	V02-020	JAK0050		J A Krycka	22-NOV-1980
;		Ignore the RWC option unless the remote node is VMS.
;
;	V02-019	REFORMAT	J A Krycka	26-JUL-1980
;
;--

	.SBTTL	DECLARATIONS

;
; Include Files:
;

	$DAPPLGDEF			; Define DAP prologue symbols
	$DAPHDRDEF			; Define DAP message header
	$DAPCNFDEF			; Define DAP Configuration message
	$DAPATTDEF			; Define DAP Attributes message
	$DAPACCDEF			; Define DAP Access message
	$DAPCMPDEF			; Define DAP Access Complete message
	$IFBDEF				; Define IFAB symbols
	$NAMDEF				; Define Name Block symbols
	$NWADEF				; Define Network Work Area symbols

;
; Macros:
;
;	None
;
; Equated Symbols:
;

	ASSUME	DAP$Q_DCODE_FLG EQ 0
	ASSUME	NWA$Q_FLG EQ 0

;
; Own Storage:
;
;	None
;

	.SBTTL	NT$CLOSE - PERFORM NETWORK CLOSE FUNCTION

;++
; NT$CLOSE - engages in a DAP dialogue with the remote FAL to close the
;	specified file and to process selected FOP options and XABs.
;
; Calling Sequence:
;
;	BSBW	NT$CLOSE
;
; Input Parameters:
;
;	R8	FAB address
;	R9	IFAB address
;	R10	IFAB address
;	R11	Impure Area address
;
; Implicit Inputs:
;
;	User PRO and RDT XABs
;	User NAM block
;	DAP$L_CRC_RSLT
;	DAP$V_DAPCRC
;	DAP$V_FOPDLT, FOPSCF, FOPSPL
;	DAP$V_VAXVMS
;	IFB$V_DLT, DMO, RWC, SCF, SPL
;	IFB$L_NWA_PTR
;	NWA$V_FTM_EOF
;	NWA$V_FTM_RETRV
;
; Output Parameters:
;
;	R0	Status code (RMS)
;	R1-R7	Destroyed
;	AP	Destroyed
;
; Implicit Outputs:
;
;	None
;
; Completion Codes:
;
;	Standard RMS completion codes
;
; Side Effects:
;
;	Optionally, a file may be deleted, executed, printed, submitted
;	(executed then deleted), or spooled (printed then deleted) on close
;	at the remote node. Note that there is a distinction between the DAP
;	execute and submit functions.  Furthermore, the DCL SUBMIT/REMOTE
;	command really maps into the DAP execute function (i.e., the file is
;	not deleted after the batch job completes). Also, the file's protection
;	and revision information may be optionally altered on close.
;
;	If an RMS$_CRC error is reported by FAL, then a message will be sent
;	to the DECnet Event Logger (EVL).
;--

NT$CLOSE::				; Entry point
	$TSTPT	NTCLOSE			;
	MOVL	IFB$L_NWA_PTR(R9),R7	; Get address of NWA (and DAP)

;+
; If the file was opened for write access then XABs are input on close. If so
; build a mask (NWA$W_BUILD) that will determine which optional DAP messages
; to send to FAL to modify the attributes of the file on close.
; For $CLOSE, these are the TIM and PRO messages.
;-

BUILD_MASK:				; Build NWA$W_DISPLAY
	BBC	#IFB$V_WRTACC,(R9),-	; Ignore XABs if file was opened for
		SEND_CMP_CLOSE		;  for read-only access
	MOVL	#1,R6			; Signal this as a close operation
	BSBW	NT$SCAN_XABCHN		; Scan user XAB chain and check FAL's
					;  capabilities; request mask put in R2
	BLBC	R0,FAIL1		; Branch on failure to complete scan
	BICW2	#<<DAP$M_DSP_ATT>!-	; Remove these messages from build mask
		  <DAP$M_DSP_ALL>!-	;  as their corresponding XABs are
		  <DAP$M_DSP_KEY>!-	;  not input to the close operation
		  <DAP$M_DSP_SUM>!-	;
		0>,R2			;
	MOVW	R2,NWA$W_BUILD(R7)	; Save build mask
	BEQL	SEND_CMP_CLOSE		; Branch if no pertinent XABs on chain

;+
; Build and send DAP Access Complete (change-begin) message to partner.
;-

SEND_CMP_BEGIN:				; (required message to modify file)
	MOVL	#DAP$K_CMP_MSG,R0	; Get message type value
	BSBW	NT$BUILD_HEAD		; Construct message header
	MOVB	#DAP$K_CHANGE_B,(R5)+	; Store CTLFUNC field
	BSBW	NT$BUILD_TAIL		; Finish building message
	BSBW	NT$TRANSMIT		; Send Access Complete message to FAL
	BLBC	R0,FAIL1		; Branch on failure

;+
; Build and send DAP Date and Time message to partner from the Revision
; Date and Time XAB.
;-

SEND_TIM:				; (optional message)
	BBC	#DAP$V_DSP_TIM,-	; Branch if Date and Time message
		NWA$W_BUILD(R7),-	;  should not be sent
		SEND_PRO		;
	MOVL	NWA$L_RDTXABADR(R7),R6	; Get address of user RDTXAB
	BSBW	NT$ENCODE_TIM_R		; Build message
	BSBW	NT$TRANSMIT		; Send Date and Time message to FAL
	BLBC	R0,FAIL1		; Branch on failure

;+
; Build and send DAP Protection message to partner.
;-

SEND_PRO:				; (optional message)
	BBC	#DAP$V_DSP_PRO,-	; Branch if Protection message
		NWA$W_BUILD(R7),-	;  should not be sent
		SEND_CMP_END		;
	MOVL	NWA$L_PROXABADR(R7),R6	; Get address of user PROXAB
	BSBW	NT$ENCODE_PRO		; Build message
	BSBW	NT$TRANSMIT		; Send Protection message to FAL
	BLBS	R0,SEND_CMP_END		; Branch on success
FAIL1:	RSB				; Exit with RMS code in R0

;+
; Build and send DAP Access Complete (change-end) message to partner if this is
; a change of file attributes on close sequence.
;
; OR
;
; Build and send DAP Access Complete (close) message to partner if this is a
; normal close operation.
;
; In either case, FOP options (DLT, SCF, SPL, ...) will be specified in this
; message.
;-

SEND_CMP_END:				; (required message to modify file)
	MOVL	#DAP$K_CHANGE_E,R1	; Get function code
	BRB	SEND_CMP		; Join common code
SEND_CMP_CLOSE:				; (required message for normal close)
	MOVL	#DAP$K_CLOSE,R1		; Get function code
SEND_CMP:				; Common code
	$SETBIT	#NWA$V_LAST_MSG,(R7)	; Declare this last message to block
	MOVL	#DAP$K_CMP_MSG,R0	; Get message type value
	BSBW	NT$BUILD_HEAD		; Construct message header
	MOVB	R1,(R5)+		; Store CTLFUNC field

;
; Map user specified FOP options to be performed on close into the DAP FOP
; field. The IFAB bookeepping field contains those FOP options requested on
; open/create combined (logically ORed) with those requested on close.
;
; In addition, the DLT, SCF, and SPL bits (treated as a set) will be mapped iff
; partner supports all of the requested options; else ignored for now--they
; will be re-examined after Access Complete messages have been exchanged for
; potential alternate processing using a separate DAP access function.
;

	MOVL	IFB$L_BKPBITS(R9),R1	; Get IFAB bits
	CLRL	R2			; Zero resultant FOP bits
	BBC	#DAP$V_VAXVMS,(R7),10$	; Branch if partner is not VAX/VMS
	$MAPBIT	<IFB$V_RWC-32>,DAP$V_RWC; Map RWC bit
; #####	$MAPBIT	<IFB$V_DMO-32>,DAP$V_DMO; Map DMO bit
					; Note: this is not implemented in RMS32

	ASSUME	IFB$V_SPL+1 EQ IFB$V_SCF
	ASSUME	IFB$V_SCF+1 EQ IFB$V_DLT

	ASSUME	DAP$V_FOPSPL+1 EQ DAP$V_FOPSCF
	ASSUME	DAP$V_FOPSCF+1 EQ DAP$V_FOPDLT

10$:	EXTZV	#<IFB$V_SPL-32>,#3,R1,R6; Extract the three FOP bits
	BEQL	20$			; Branch if none set
	EXTZV	#DAP$V_FOPSPL,#3,-	; Extract the three corresponding
		DAP$Q_SYSCAP(R7),R0	;  SYSCAP bits
	BICL2	R0,R6			; Mask out supported requests
	BNEQ	20$			; Branch if any are not supported
	$MAPBIT	<IFB$V_DLT-32>,DAP$V_DLT; Map DLT bit
	$MAPBIT	<IFB$V_SCF-32>,DAP$V_SCF; Map SCF bit
	$MAPBIT	<IFB$V_SPL-32>,DAP$V_SPL; Map SPL bit
20$:	MOVL	R2,R1			; Move data to correct register
	BSBW	NT$CVT_BN4_EXT		; Store FOP as an extensible field

;
; Include file level CRC checksum in message as required.
;

	BBC	#DAP$V_DAPCRC,-		; Branch if partner does not support
		DAP$Q_SYSCAP(R7),30$	;  file level CRC checksum
	BBS	#NWA$V_FTM_RETRV,(R7),30$;Branch if file transfer retrieval mode
					; has not been properly terminated
	MOVW	DAP$L_CRC_RSLT(R7),(R5)+; Store CRC checksum field (CHECK)
30$:	BSBW	NT$BUILD_TAIL		; Finish building message
	BSBW	NT$TRANSMIT		; Send Access Complete message to FAL
	BLBC	R0,FAIL2		; Branch on failure

;+
; Receive Access Complete message from partner (which may be preceded by other
; DAP messages in the pipe if we've prematurely terminated the access).
;-

RECV_CMP:				;
	BSBW	NT$LOOK_FOR_CMP		; Wait for response from FAL
	BLBC	R0,CHKCRC		; Branch on failure
	TSTL	R6			; Branch if there are no more FOP
	BEQL	SUC			;  options to process
	BSBB	REEXAMINE_FOP		; Try to process them another way
	BLBC	R0,FAIL2		; Branch on failure
SUC:	RMSSUC				; Return success
FAIL2:	RSB				; Exit with RMS code in R0

;
; Special case DAP level CRC checksum error reported by FAL.
;

CHKCRC:	CMPW	R0,#<RMS$_CRC&^XFFFF>	; Check for RMS$_CRC error from FAL
	BNEQ	10$			;
	BSBB	CRC_ERROR		; Process DAP level CRC checksum error
10$:	RSB				; Exit with RMS code in R0

	.SBTTL	CHECK_CRC_ERROR

;++
; This routine processes an RMS$_CRC error returned by FAL on a close operation.
; First, a DAP level CRC checksum error message is formatted and sent to the
; DECnet Event Logger. Then another Access Complete message is generated to
; direct FAL to close the file.
;--

CRC_ERROR:				; Entry point
	PUSHR	#^M<R0>			; Save completion code on entry
	BSBW	NT$CRC_LOGERR		; Send message to DECnet Event Logger
					; No status code is returned

;+
; Build and send Access Complete message to close the file.
;-

CRC_SEND_CMP:				;
	$SETBIT	#NWA$V_LAST_MSG,(R7)	; Declare this last message to block
	MOVL	#DAP$K_CMP_MSG,R0	; Get message type value
	BSBW	NT$BUILD_HEAD		; Construct message header
	MOVB	#DAP$K_CLOSE,(R5)+	; Store CTLFUNC field
	BSBW	NT$BUILD_TAIL		; Finish building message
	BSBW	NT$TRANSMIT		; Send Access Complete message to FAL
	BLBC	R0,CRC_EXIT		; Branch on failure

;+
; Receive Access Complete message from partner.
;-

CRC_RECV_CMP:				;
	$SETBIT	#DAP$K_CMP_MSG,DAP$L_MSG_MASK(R7)
					; Expect response of Access Complete msg
	BSBW	NT$RECEIVE		; Get reply from FAL
CRC_EXIT:				;
	POPR	#^M<R0>			; Restore completion code on entry
	RSB				; Exit with RMS$_CRC code in R0

	.SBTTL	REEXAMINE_FOP

;++
; This routine attempts to process selected FOP options via a separate DAP
; access function (which have not been processed because the remote FAL does not
; support passing these options in the DAP FOP field in the Access Complete
; message).
;--

REEXAMINE_FOP::				; Entry point

	ASSUME	IFB$V_SPL+1 EQ IFB$V_SCF
	ASSUME	IFB$V_SCF+1 EQ IFB$V_DLT

	EXTZV	#IFB$V_SPL,#3,(R9),R0	; Extract the three FOP bits
	$CASEB	SELECTOR=R0-		; Options requested:
		DISPL=<-		; Note:	SCF takes precedence over SPL
		    DONE-		;   0 ! 0 ! 0
		    ERRSUP-		;   0 ! 0 !SPL
		    EXECUTE-		;   0 !SCF! 0
		    EXECUTE-		;   0 !SCF!SPL ==> SCF
		    DELETE-		;  DLT! 0 ! 0
		    ERRSUP-		;  DLT! 0 !SPL
		    SUBMIT-		;  DLT!SCF! 0
		    SUBMIT-		;  DLT!SCF!SPL ==> SCF!DLT
		>			;
ERRSUP:	BRW	NT$RMT_FOP2		; Declare RMS$_SUPPORT error and
					;  exit with RMS code in R0
SUBMIT:	BRB	ERRSUP			; It's too late to perform DAP submit
					;  function--logically it's similar to
					;  create function
DELETE:	MOVB	#DAP$K_ERASE,R6		; Save DAP function code for erase
	BRB	REEX_SEND_ACC		; Delete the file
EXECUTE:MOVB	#DAP$K_EXECUTE,R6	; Save DAP function code for execute

;+
; Build and send Access message to partner.
;-

REEX_SEND_ACC:				;
	$SETBIT	#NWA$V_LAST_MSG,(R7)	; Declare this last message to block
	MOVL	#DAP$K_ACC_MSG,R0	; Get message type value
	BSBW	NT$BUILD_HEAD		; Construct message header
	MOVB	R6,(R5)+		; Store ACCFUNC field
	MOVB	#DAP$M_NONFATAL,(R5)+	; Store ACCOPT field

;
; Construct filespec string from resultant name string returned from previous
; open or create function just performed.
;
; Note:	A possible enhancement is for RMS to save the resultant string on an
;	open or create so that it does not have to reparsed here; the abreviated
;	parse logic that follows will report a failure if an access control
;	string contains a colon character!
;

	BSBW	RM$CLS_CHKNAM		; Check required Name Block
					;  (returns RSA in R7)
	BLBC	R0,ERRNAM		; Error if not found, or if bad format
	MOVZBL	NAM$B_RSL(R7),R2	; Get resultant string size
	BEQL	ERRRSS			; Error if zero
	MOVL	NAM$L_RSA(R7),R3	; Get resultant string address
	BEQL	ERRRST			; Error if zero
	PROBER	IFB$B_MODE(R9),R2,(R3)	; Check resultant string for readability
	BEQL	ERRRST			; Branch if not readable
					; Remove first nodespec from string:
	LOCC	#^A\:\,R2,(R3)		;  Search for a colon
	BEQL	ERRRST			;  Error if not found
	DECL	R0			;  Decrement string size
	BEQL	ERRRST			;  Error if end of string
	CMPB	#^A\:\,1(R1)		;  Is this a double colon delimiter?
	BNEQ	ERRRST			;  Error if not
	DECL	R0			;  Decrement string size
	BEQL	ERRRST			;  Error if end of string
	CMPB	#^A\"\,2(R1)		; Is this quoted string format?
	BEQL	30$			; Branch if yes
	MOVB	R0,(R5)+		; Store string count in message
	MOVC3	R0,2(R1),(R5)		; Copy filename string to message
	BRB	40$			; Continue
30$:	SUBL2	#2,R0			; Reduce string size by the quotes
	BLEQU	ERRRST			; Branch if no filename
	MOVB	R0,(R5)+		; Store string count in message
	MOVC3	R0,3(R1),(R5)		; Copy filename string to message
40$:	MOVL	R3,R5			; Copy next byte pointer
	MOVL	IFB$L_NWA_PTR(R9),R7	; Get address of NWA
	BSBW	NT$BUILD_TAIL		; Finish building message
	BSBW	NT$TRANSMIT		; Send Access message to FAL
	BLBC	R0,FAIL			; Branch on failure

;+
; Receive Access Complete message from partner.
;-

REEX_RECV_CMP:				;
	$SETBIT	#DAP$K_CMP_MSG,DAP$L_MSG_MASK(R7)
					; Expect response of Access Complete msg
	BSBW	NT$RECEIVE		; Get reply from FAL
	BLBC	R0,FAIL			; Branch on failure
DONE:	RMSSUC				; Return success
FAIL:	RSB				; Exit with RMS code in R0

;
; Additional error exit paths.
;

ERRNAM:	RMSERR	NAM			; Error in Name Block
	RSB				; Exit with RMS code in R0
ERRRSS:	RMSERR	RSS			; Error in resultant string size
	RSB				; Exit with RMS code in R0
ERRRST:	RMSERR	RST			; Error in resultant string address
	RSB				; Exit with RMS code in R0

	.END				; End of module
