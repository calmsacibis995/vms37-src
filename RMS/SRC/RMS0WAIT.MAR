

	$BEGIN	RMS0WAIT,006,$RMS0,<WAIT FOR AYNC OPERATION COMPLETION>

;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
; FACILITY: RMS32
;
; ABSTRACT:
;		Routine to perform the $WAIT function to allow
;		for synchronization with the completion of asynchronous
;		requests.
;
;
; ENVIRONMENT:
;
; AUTHOR: L F Laverdure,	 Creation Date: 3-Feb-1977
;
; Modified By:
;
;	V02-006	REFORMAT	Frederick E. Deen, Jr.	    29-Jul-1980
;		This code was reformatted to adhere to RMS standards
;
;--
;


	.SBTTL	DECLARATIONS

;
; INCLUDE FILES:
;

;
; MACROS:
;

	$IRBDEF
	$IFBDEF
	$RABDEF
	$IMPDEF
	$RMSDEF

;
; EQUATED SYMBOLS:
;

;
; OWN STORAGE:
;


	.SBTTL	RMS$WAIT - $WAIT ROUTINE

;++
; RMS$WAIT - Allow synchronization with the completion of asynchronous requests
;
;  This module performs the following functions:
;
;	1. Checks for valid IRAB (via ISI) and if none, assumes DISCONNECT
;	   was done,  therefore leaves STS alone unless it is zero, in
;	   which case it is set to RMS$_SUC.
;	2. Checks that the RAB is the same one for last operation,
;	   and if not merely declares success if not busy, else if busy sets
;	   flag in R4 to indicate different RAB and causes WAIT for same
;	   event flag.
;	3. If same RAB, tests STS for non-zero, indicating completion.
;	   if zero, checks IRAB busy bit and causes WAIT if busy, else returns
;	   success.
;	4. If STALL required, exits RMS with STATUS = RMS$_STALL
;
; CALLING SEQUENCE:
;
;	Entered from EXEC as a result of user's calling SYS$WAIT
;	(e.g., by using the $WAIT MACRO)
;
; INPUT PARAMETERS:
;
;	AP	User's argument list addr
;
; IMPLICIT INPUTS:
;
;	The contents of the RAB (STS) and RELATED IRAB.
;
; OUTPUT PARAMETERS:
;
;	R1	destroyed
;	R0	status code
;
; IMPLICIT OUTPUTS:
;
;	The IRAB is updated to reflect the STALL.
;
;	A COMPLETION AST is queued if specified in the original user arglist.
;
; COMPLETION CODES:
;
;	Standard RMS (see functional spec for list) as per the
;	operation waited upon.
;
; SIDE EFFECTS:
;
;	None
;
;--


	$ENTRY	RMS$WAIT
	$TSTPT	WAIT
	BSBW	RM$RABCHK			; valid RAB? (exits if bad)
						;  R11=IMAGE IMPURE AREA addr
						;  R9=ISI, R8=RAB addr, R7=MODE
;
;  Get the IRAB addr, check for validity
;

	MOVL	#IMP$L_IRABTBL/4,R0		; IRAB table offset/4
	BSBW	RM$GTIADR			; get IRAB addr
	BEQL	DISCONNECT			; branch if bad (assume DISCONNECT)
	.IF	NE $$RMSTEST&$$RMS_TBUGCHK
	CMPB	IRB$B_BID(R9),#IRB$C_BID
	BNEQ	ERRBUG				; branch if not a valid IRAB
	.ENDC

;
;  Also check the stored arg list RAB for sameness
;

	CLRL	R4				; clear flag assuming same RAB
	MOVL	IRB$L_ARGLST(R9),R5		; get old arg list
	IFNORD	#8,(R5),DIFRAB,R7		; assume diff if not readable
	CMPL	4(R5),R8			; same RAB?
	BNEQ	DIFRAB				; branch if not

;
;  Same RAB.  If STS has a non-zero value implying operation done, just exit.
;

	MOVL	RAB$L_STS(R8),R0		; pick up status
	BNEQ	EXIT				; branch if status indicates done
	BBC	#IRB$V_BUSY,(R9),SUCXIT		; all set if not busy
	ASSUME	IRB$V_ASYNC EQ IFB$V_ASYNC
CHKASY:	BBC	#IRB$V_ASYNC,(R9),SYNC_STALL	; branch if operation synch.
	SSB	#IRB$V_ASYNCWAIT,(R9)		; indicate set event flag req'd
	MOVZBL	#IMP$C_ASYEFN,R3		; set EFN to WAIT on
	$CLREF_S	R3			; clear it
SETSTALL:
	RMSSUC	STALL,AP			; get set to STALL
	BRW	RM$ENBAST			; go re-enable ASTS and exit

;
;  Wait upon a synchronous request (must be from AST level)
;

SYNC_STALL:
	ASSUME	IFB$B_EFN EQ IRB$B_EFN
	MOVZBL	IRB$B_EFN(R9),R3		; set EFN to WAIT on
	BRB	SETSTALL


;++
;
;  RAB for $WAIT and original operation are different.
;  All set if IRAB not busy, else clear STS and cause WAIT.
;
;--

DIFRAB:	BBC	#IRB$V_BUSY,(R9),SUCXIT		; branch if not busy
	INCL	R4				; set flag for different RABS
	CLRL	RAB$L_STS(R8)			; zero STS for WAIT
	BRB	CHKASY				; go check SYNC/ASYNC
						;  operation & STALL

;++
;
;  Bad ISI value.  Assume DISCONNECT has occurred.
;  Leave STS unchanged unless it is zero, in which case declare success.
;
;--

DISCONNECT:
	MOVL	RAB$L_STS(R8),R0		; get status
	BEQL	SUCXIT				; branch if zero
	CMPW	R0,#RMS$_STALL&^XFFFF		; did user set a weird
						;  value in here?
	BNEQ	EXIT				; branch if not (o.k.)
SUCXIT:	RMSSUC					; show normal success
EXIT:	BRW	RM$EX_NOSTR			; no need to WAIT (already done)

;++
;
;  Internal RMS problem  -  IRAB table pointed to an INVALID IRAB
;
;--

ERRBUG:	RMSTBUG	FTL$_BADIFAB


	.END
