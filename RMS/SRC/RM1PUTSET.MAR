	$BEGIN	RM1PUTSET,011,$RMS1,<SETUP FOR $PUT/$UPDATE SEQUENTIAL>

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
; Facility: rms32
;

;
; Abstract:	this module performs various setups for
;		$put and $update on the sequential file organization.
;
; Environment:
;		star processor running starlet exec.
;
; Author: L F Laverdure,	 creation date: 17-FEB-1977
;
; Modified By:
;
;	V02-011	RAS0049		Ron Schaefer		15-Dec-1981
;		Fix stm terminator check.
;
;	V02-010	RAS0028		Ron Schaefer		20-AUG-1981
;		Change FAB$C_STM11 to FAB$C_STM.
;
;	V02-009	RAS0016		Ron Schaefer		31-Jul-1981
;		Add support for stream format.
;
;	V02-008	MCN0003		Maria del C. Nasr	11-Nov-1980
;		Check that variable length records written to an ANSI tape
;		are not longer than to 9999 bytes, since this is the biggest
;		number that fits in the record control word.
;
;	V02-007	REFORMAT	Maria del C. Nasr	24-Jul-1980
;
;	V0006	CDS0001		C D Saether	11-MAR-1980
;		don't calculate record overhead for unit record devices
;
; Revision History:
;
;	L F Laverdure,     14-AUG-1978  15:39
;		 long probe fix
;
;--
;


	.SBTTL	DECLARATIONS

;
; Include Files:
;

;
; Macros:
;

	$DEVDEF
	$IFBDEF
	$IRBDEF
	$FABDEF
	$RABDEF
	$RMSDEF
	
;
; Equated Symbols:
;

;
; Own Storage:
;


	.SBTTL	RM$PUTSETUP1

;++
; RM$PUTSETUP1 - This module makes user input and operation
;		       valid checks and calculates record overhead size.
;
; Calling sequence:
;
;	bsbw	rm$putsetup1
;
; Input Parameters:
;
;	r10	ifab addr
;	r9	irab addr
;	r8	rab addr
;
; Implicit Inputs:
;
;	the contents of the rab and related irab and ifab.
;
;
; Output Parameters:
;
;	r6	record data length in bytes
;	r5	record address
;	r1	total record length including overhead bytes
;	r0	status code
;
; Implicit Outputs:
;
;	sequential file org temp.
;		irb$w_rovhdsz:  record overhead size in bytes
;		irb$w_rtotlsz:  total record length including overhead bytes
;
; Completion Codes:
;
;	standard rms, in particular, either suc, rbf, or rsz.
;
; Side Effects:
;
;	none
;--


RM$PUTSETUP1::
	$TSTPT	PUTSET1

;
; get the user record address & size and validate
;

	MOVL	RAB$L_RBF(R8),R5	; get record address
	CVTWL	RAB$W_RSZ(R8),R6	; get record length
	BLSS	ERRRSZ			; negative size invalid
	BEQL	CHKSIZ			; no need to probe a null rec
	CMPW	R6,#512			; long probe needed?
	BGTRU	LONG_PROBE		; branch if yes
	IFNORD	R6,(R5),ERRRBF		; probe buffer

;
; make record size checks and compute overhead based on
; record format type
;

CHKSIZ:	CLRL	R1			; compute record overhead in r1
	CASE	LIMIT=#FAB$C_UDF,-	; based on record format
		SRC=IFB$B_RFMORG(R10),-
	  	TYPE=B,DISPLIST=-
		<UDFLEN,-		; FAB$C_UDF
		FIXEDLEN,-		; FAB$C_FIX
		VARLEN,-		; FAB$C_VAR
		VFCLEN,-		; FAB$C_VFC
		STMLEN,-		; FAB$C_STM
		STMLEN,-		; FAB$C_STMLF
		STMLEN>			; FIX$C_STMCR

VFCLEN:	MOVB	IFB$B_FSZ(R10),R1	; get fixed header size for vfc

;
; variable length - add in size of record length bytes
;

VARLEN:	ASSUME	DEV$V_REC EQ 0
	BLBS	IFB$L_PRIM_DEV(R10), -
		LENCHK			; no size for unit record devices
	ADDW2	#2,R1			; normally 2 bytes
	BBC	#IFB$V_ANSI_D,(R10), -
		LENCHK			; all set unless ansi d
	ADDW2	#2,R1			; in which case it's 4
LENCHK:	TSTW	IFB$W_MRS(R10)		; omit check if limit is 0
	BEQL	CHKBLK
	CMPW	R6,IFB$W_MRS(R10)	; check record length
	BLEQU	CHKBLK			; and branch if le max. allowed

;
; record size too big
;

ERRRSZ:	$PSECT_BR	L$RMS1
	RMSERR	RSZ
	RSB
	$PSECT_RESTORE
ERRRBF:	$PSECT_BR	L$RMS1

	RMSERR	RBF			; bad user buffer
	RSB
	$PSECT_RESTORE

;
; stream format record - check whether a DFT must be added
;
STMLEN:	$PSECT_BR	L$RMS1STM
	ASSUME	DEV$V_REC EQ 0
	BLBS	IFB$L_PRIM_DEV(R10),10$	; no additional chars for unit-record
	TSTW	R6			; zero len record
	BEQL	5$			; needs a terminator
	PUSHR	#^M<R1,R5>		; save size and record addr
	MOVAB	-1(R5)[R6],R1		; setup for term check
	MOVL	#1,R0			; check only last char
	MOVZBL	IFB$B_RFMORG(R10),R4	; get format type
	BSBW	RM$STM_TERM		; check for terminator
	POPR	#^M<R1,R5>		; restore regs
	BLBS	R0,10$			; already have a terminator
5$:	INCW	R1			; add in the DFT size
	CMPB	IFB$B_RFMORG(R10),-	; STM format?
		#FAB$C_STM
	BNEQ	10$			; nope
	INCW	R1			; STM's DFT is 2 bytes long
10$:	BBC	#IFB$V_ANSI_D,(R10),20$	; need count field for ANSI
	ADDW2	#4,R1
20$:	BRW	LENCHK
	$PSECT_RESTORE

;
; fixed length record - check its size
;

FIXEDLEN:
	CMPW	R6,IFB$W_LRL(R10)	; compare against fixed size
	BNEQ	ERRRSZ			; branch if not equal

;
; if blk bit set (records can't cross block boundaries) check
; that total record size is less than a block
;
UDFLEN:
CHKBLK:	MOVW	R1,IRB$W_ROVHDSZ(R9)	; save overhead size
	ADDW2	R6,R1			; compute total record size
	BBC	#FAB$V_BLK,IFB$B_RAT(R10),10$; branch if no boundary
					; restriction
	CMPW	R1,IFB$W_DEVBUFSIZ(R10)	; compare against block size
	BGTRU	ERRRSZ			; and branch if too big

;
; If ANSI_D record (variable length in ANSI magtape) make sure that
; record is not bigger than 9999 bytes.
;

	BBC	#IFB$V_ANSI_D,(R10),10$ ; branch, if not ANSI_D
	CMPB	IFB$B_RFMORG(R10),#FAB$C_FIX ; branch, if fixed length
	BEQL	10$
	CMPW	R1,#9999		; within maximum size?
	BGTRU	ERRRSZ			; error if not
10$:	MOVW	R1,IRB$W_RTOTLSZ(R9)	; save total record size
	RMSSUC
	RSB

;
; long probe needed subroutine
;

LONG_PROBE:
	BSBB	RM$PROBEREAD		; check readability
	BLBS	R0,CHKSIZ		; all is ok continue
	RSB				; else exit

	.SBTTL	RM$PROBEREAD - PROBE BUFFER READABILITY

;++
; RM$PROBEREAD - This routine probes the caller's buffer
;		       for readability.
;
; Calling sequence:
;
;	bsbw	rm$proberead
;
; Input Parameters:
;
;	r10	ifab addr
;	r9	irab addr
;	r6	size of buffer
;	r5	addr of buffer
;
; Implicit Inputs:
;
;	irb$b_mode
;
; outputs:
;
;	r0	status code
;
; Implicit Outputs:
;
;	none
;
; condition codes:
;
;	standard rms, in particular, rbf or suc.
;
; Side Effects:
;
;	none
;
;--


RM$PROBEREAD::
	MOVQ	R5,-(SP)		; save r5,r6
	PUSHL	#1			; anticipate success
	TSTL	R6			; zero buffer size?
	BEQL	EXIT1			; omit probe if so

;
; probe all pages
;

	CVTWL	#-512,R0		; get address calc constant
10$:	IFNORD	R6,(R5),ERRRBF1,-
		 IRB$B_MODE(R9)		; branch if not readable
	SUBL2	R0,R5			; get address of next page
	MOVAW	(R6)[R0],R6		; calculate new length
	BGTR	10$			; continue probing if positive
	SUBL2	R0,R6			; need to handle last page?
	BGTR	10$			; branch if yes
EXIT1:	POPR	#^M<R0,R5,R6>		; restore buffer desc. & status
	RSB

;
; probe failure - set error code
;

ERRRBF1:
	$PSECT_BR	L$RMS1
	RMSERR	RBF,(SP)
	BRW	EXIT1
	$PSECT_RESTORE
	.END
