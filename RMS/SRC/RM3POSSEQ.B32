
MODULE RM3POSSEQ (LANGUAGE (BLISS32) ,
		IDENT = 'V03-003'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:	RMS32 Index Sequential File Organization
!
! ABSTRACT:
!		Routines to position sequentially to the next record
!
!
! ENVIRONMENT:
!
!		VAX/VMS Operating System
!
!--

!
! AUTHOR:	Wendy Koenig     CREATION DATE:		25-APR-78  9:57
!
!
! MODIFIED BY:
!
!
!	V03-003	TMK0003		Todd M. Katz		02-Apr-1982
!		When I restructured RM$POS_SEQ in TMK0002, I accidently
!		left out one code path which resulted in the inability to
!		sequential read records in an ISAM file past the first bucket.
!		When we have successfully positioned to the current record by
!		means of the NRP context (NRP or RP cell), and decide that
!		the record we want to position to is in fact the next record,
!		then after adjusting REC_ADDR to the next record we must set
!		up things so that if we have positioned past the last record
!		currently in the bucket, we will be able to access the first
!		record in the next data bucket. What this involves is setting
!		the IRB$V_SRCHGT (IRB$V_SRCHGE if duplicates are allowed) 
!		search flag which is used as input to RM$CSEARCH_TREE, the 
!		routine which will be called to position to the first record
!		in the next bucket if we have exhauseted all records in the
!		current bucket.
!
!	V03-002	TMK0002		Todd M. Katz		29-Mar-1982
!		Stream line the flow of control within the routine RM$POS_SEQ.
!		Basically, I collapsed several of the cases into one, and
!		changed the manner in which positioning through use of the NRP
!		cell is accomplished.
!
!		First of all, sequential positioning the first time through
!		is handled differently then subsequent positioning attempts.
!		Next, the non-first time positioning attempts are divided into
!		positioning making use of the RP cell (when the NRP cell is
!		invalid) and positioning making use of the NRP cell (the usaul
!		case). Finally, positioning using the NRP cell is further
!		subdivided into positioning from the beginning of the bucket
!		and positioning when the current record is not the first record
!		in the bucket.
!
!		Positioning using the NRP cell used to be done by calling the
!		routine RM$FIND_BY_RFA. However, if the NRP list had changed
!		between the time this routine was called and the time control
!		had been returned, then the record which had been accessed as
!		the current record could no longer be considered as such, and
!		we had to release our lock on the current bucket and reattempt
!		the positioning. Instead of doing this, we now worry only about
!		positioning to the current bucket, and not to the current
!		record in the current bucket. Having accessed the current 
!		bucket, the NRP list can no longer change from underneath us, 
!		and we can safely position to the current record.
!
!	V03-001	TMK0001		Todd M. Katz		18-Mar-1982
!		Clear the search flag byte within the IRAB, IRB$B_SRCHFLAGS,
!		whenever this routine is entered. This is because while this
!		field will be zeroed the first time this routine is called
!		during a $GET, if in attempting to access a primary data (or 
!		RRV) bucket from a SIDR the bucket is found to be locked and 
!		a RLK error is returned, when this routine is recalled to try
!		again some of the field's bits may still be set.
!
!		Change all references to keybuffer 2 so that the macro 
!		KEYBUF_ADDR is used.
!
!	V02-015	PSK0001		Paulina S. Knibbe	25-Jun-1981
!		Add BKT_ADDR to linkages
!
!	V02-014	MCN0008		Maria del C. Nasr	22-Apr-1981
!		Use macro to determine size of record identifier.
!
!	V02-013	MCN0007		Maria del C. Nasr	27-Apr-1981
!		Change calling sequence to RM$FIND_BY_RRV.
!
!	V02-012	MCN0006		Maria del C. Nasr	13-Mar-1981
!		Increase size of record identifier to a word in the IRB,
!		NRP, and RLB internal structures.
!		Modify routines to reflect changes required by the
!		prologue 3 data level structure (base level 1).
!
!	V02-011	REFORMAT	Maria del C. Nasr	24-Jul-1980
!
! REVISION HISTORY:
!
!   X0002	Wendy Koenig,	 	30-AUG-78  16:32
!		if first time leaves us pointed to an empty bucket, have to
!		scan past it
!
!   X0003	Wendy Koenig, 		25-SEP-78  10:24
!		redo positioning on rp field
!
!   X0004	Wendy Koenig,	 	6-OCT-78  10:00
!		set up curbdb after getbkt (beginning case)
!
!   X0005	Wendy Koenig,	 	9-OCT-78  16:53
!		bug fix -- set srchge on csearch_tree using rp info, secondary
!		key
!
!   X0006	Wendy Koenig,	 	17-OCT-78  14:13
!		if first time, move the key into keybuffer2 after the search tree
!
!   X0007	Wendy Koenig,	 	24-OCT-78  14:02
!		make changes caused by sharing conventions
!
!   X0008	Wendy Koenig,	 	3-NOV-78  11:02
!		turn some rnf's into eof's
!
!   X0009	Wendy Koenig,	 	13-DEC-78  14:16
!		on first time, set srchge for possible subsequent search_tree's
!
!   X0010	Wendy Koenig,	 	7-FEB-79  17:07
!		fix loop making sure nrp stayed the same across find by rfa
!
!*****

LIBRARY 'RMSLIB:RMS';

REQUIRE 'RMSSRC:RMSIDXDEF';

!
! define default psects for code
!

PSECT
    CODE = $$RMSGET3(PSECT_ATTR),
    PLIT = $$RMSGET3(PSECT_ATTR);

! Linkages
!

LINKAGE
    L_POS_SEQ,
    L_FIND_BY_ID,
    L_FIND_BY_RFA,
    L_FIND_BY_RRV,
    L_COMPARE_REC,
    L_GETBKT,
    L_CSEARCH_TREE,
    L_GETNEXT_REC,
    L_RECORD_KEY,
    L_REC_OVHD,
    L_RLSBKT,
    L_MOVE,
    L_SEARCH_SIDR;

!
! Forward Routines
!

FORWARD ROUTINE
    RM$POS_SEQ	: RL$POS_SEQ;

!
! External Routines
!

EXTERNAL ROUTINE
    RM$FIND_BY_ID	: RL$FIND_BY_ID,
    RM$FIND_BY_RFA	: RL$FIND_BY_RFA,
    RM$FIND_BY_RRV	: RL$FIND_BY_RRV,
    RM$COMPARE_REC	: RL$COMPARE_REC,
    RM$GETBKT		: RL$GETBKT,
    RM$CSEARCH_TREE	: RL$CSEARCH_TREE,
    RM$GETNEXT_REC	: RL$GETNEXT_REC,
    RM$RECORD_KEY	: RL$RECORD_KEY,
    RM$RLSBKT		: RL$RLSBKT,
    RM$REC_OVHD		: RL$REC_OVHD,
    RM$MOVE		: RL$MOVE,
    RM$SEARCH_SIDR	: RL$SEARCH_SIDR;

!
! define a local macro to return on error and
! to change a 'rnf' error to 'eof' ( this is seq. proccessing )
!

MACRO
    RET_ON_ERR_EOF (X) =
	(RETURN_ON_ERROR(X,
	IF .STATUS<0,16> EQL RMSERR(RNF) THEN STATUS = RMSERR(EOF))) %;


GLOBAL ROUTINE RM$POS_SEQ : RL$POS_SEQ =

!++
!
! FUNCTIONAL DESCRIPTION:
!	1 -- position to "current" record in data level or sidr array
!	2 -- if DELETED is set in the NRP list pointer, all bets are off
!	     this implies that the record last pointed to has been deleted
!	     and further positioning depends on the current situation
!		i.e., if we are still positioned to a key match,
!		if duplicates are allowed,
!		if this is a primary or secondary key
!		if skip_next is set or not.
!	if DELETED is clear, then all that matters is SKIP_NEXT
!	3 -- if SKIP_NEXT is set, skip to "next" record
!	4 -- if SKIP_NEXT is clear (last operation was a $FIND) then
!		a)  if primary key, we're there
!		b)  if secondary key, position to actual data recod
!			and store relevant rfa information about sidr array
!	NOTE: at this point the nrp and rp fields in the nrp list are our
!		source of positioning information
!		the nrp is always an rfa -- if a primary key, it is the
!		rfa of the actual data record, if secondary, the rfa of the sidr
!		therefore, it also has associated w/ it a changeable dup_pos
!		the rp is always an rrv ( in files which have such) -- in any
!		case, it is the rrv of the actual data record, which is always
!		valid and therefore, as long as the file has rrv's, need never
!		be updated. the rp does not have a dup_pos since we are never
!		positioned in a sidr.  on a secondary key, therefore, if we want
!		to use the rp, we must traverse the tree by key to get to the
!		sidr.  on a primary key, if we use the nrp we want to do a find
!		by rfa; if we use the rp, we need to do a find by rrv
!
!
! CALLING SEQUENCE:
!	BSBW RM$POS_SEQ()
!
! INPUT PARAMETERS:
!	none
!
! IMPLICIT INPUTS:
!	R11 -- index descriptor address
!	R9 -- IRAB address
!	R10 -- IFAB address
!	in IRAB --
!	    addresss of NRP cell which includes :
!		RP_ID, RP_VBN, DELETED bit,
!	         NRP_ID, NRP_VBN, DUP_POS, DELETED bit.
!	    if NRP_VBN is 0 and RP_VBN is 0, then this is the 1st sequential access
!		    after a $connect or $rewind. In this case, we want to
!		    get the 1st record w/ the lowest key value.
!	    if NRP_VBN is 0 and RP_VBN is non-zero, then use the RP
!	    SKIP_NEXT bit
!	    KEYSZ, KEYBUF2
!		(actually KEYBUF and KBUFSZ in IFAB to get at KEYBUF2)
!	    CURBDB
!		hopefully the bdb address corresponding to the bucket that
!			the record is in
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	REC_ADDR -- address of the record
!	CURBDB ( in IRAB) -- current BDB describing the REC_ADDR
!	NXTBDB ( in IRAB) -- BDB describing the RFA
!	SAVE_POS, RFA_VBN, RFA_ID ( in IRAB) --
!		if primary key, then RFA of data record
!		 else RFA of SIDR array record
!
! ROUTINE VALUE:
!	usual RMS codes, especially SUC, EOF
!
! SIDE EFFECTS:
!	R0-R5 and the AP are destroyed
!	the data bucket associated w/ the nrp data is released
!		w/ permanence attached
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_RAB_STR,
	R_IDX_DFN_STR,
	R_REC_ADDR_STR;

    LABEL
	LOOKING,
	NOTFIRST;

    LOCAL
	NRP	: REF BBLOCK;

    ! never want to stop anywhere but level 0, make sure stoplevel is cleared
    !
    !
    IRAB[IRB$B_STOPLEVEL] = 0;
    NRP = .IRAB[IRB$L_NRP_PTR];
    IRAB[IRB$B_SRCHFLAGS] = 0;

    ! if first time through, IRAB[IRB$W_SAVE_POS] will be handled 
    ! in a special way.
    !
    IRAB[IRB$W_SAVE_POS] = .NRP[NRP$W_DUP_POS];



LOOKING :
    BEGIN

    ! If this is the first time we are positioning after a $CONNECT or
    ! $REWIND (both NRP and RP information are zero) then position to 
    ! the very first non-RRV record in the very first data bucket.
    !
    IF (.NRP[NRP$L_VBN] EQL 0) AND (.NRP[NRP$L_RP_VBN] EQL 0)
    THEN
	BEGIN

	BUILTIN
	    AP;

	IRAB[IRB$V_FIRST_TIM] = 1;
	RET_ON_ERR_EOF(RM$CSEARCH_TREE(), IRAB[IRB$V_FIRST_TIM] = 0);

	! if csearch_tree left us positioned to an empty bucket, position past
	! it
	!
	WHILE .REC_ADDR[IRC$V_RRV]
	DO
	    BEGIN

	    LOCAL
		VBN;

	    GLOBAL REGISTER
		COMMON_IO_STR;

	    BKT_ADDR = .BBLOCK[.IRAB[IRB$L_CURBDB], BDB$L_ADDR];

	    IF .BKT_ADDR[BKT$V_LASTBKT]
	    THEN
		BEGIN
		RELEASE(IRAB[IRB$L_CURBDB]);
		RETURN RMSERR(EOF);
		END;

	    VBN = .BKT_ADDR[BKT$L_NXTBKT];
	    RELEASE(IRAB[IRB$L_CURBDB]);

	    RETURN_ON_ERROR (RM$GETBKT(.VBN, .IDX_DFN[IDX$B_DATBKTSZ]*512));

	    IRAB[IRB$L_CURBDB] = .BDB;
	    REC_ADDR = .BKT_ADDR + BKT$C_OVERHDSZ;
	    END;

	IRAB[IRB$V_FIRST_TIM] = 0;



	! move the key of this record into keybuffer 2
	!
	IF .IDX_DFN[IDX$B_KEYREF] NEQ 0
	THEN
	    BEGIN

	    LOCAL
		TMP;

	    GLOBAL REGISTER
		R_REC_SIZE;

	    REC_SIZE = -1;
	    TMP = .REC_ADDR + RM$REC_OVHD();
	    RM$MOVE(.IDX_DFN[IDX$B_KEYSZ], .TMP, KEYBUF_ADDR(2));
	    LEAVE LOOKING;

	    END;

	! primary key only, at this point
	!
	AP = 0;

	BEGIN

	GLOBAL REGISTER
	    R_BKT_ADDR;

	RM$RECORD_KEY(KEYBUF_ADDR(2));
	IRAB[IRB$V_SRCHGE] = 1;
	END;
	END


    ! This is not our first time positioning, so use the NRP information, 
    ! (if it is valid), or the RP information (if the NRP information is not).
    ELSE
NOTFIRST :
	BEGIN

	! if nrp is invalid (vbn = 0) use the rp instead on a primary key
	!
	! NOTE : this is done sneakily by changing the nrp pointer here
	!	 so that it points to the RP cell, and no other changes
	!	 are obvious.
	!	 on a secondary key, we must come down the tree again 
	!	 to get to the sidr
	!
	IF .NRP[NRP$L_VBN] EQL 0
	THEN
	    BEGIN
	    NRP = .NRP + NRP$C_CELL;
	    IRAB[IRB$W_SAVE_POS] = 0;

	    IF .IDX_DFN[IDX$B_KEYREF] NEQ 0
	    THEN
		BEGIN
		IRAB[IRB$L_CURBDB] = 0;
		IRAB[IRB$V_SRCHGE] = 1;
		RET_ON_ERR_EOF(RM$CSEARCH_TREE());
		LEAVE LOOKING
		END;

	    END;



	! We are using the NRP cell to reposition. First access the bucket
	! containing the current record and then find by its ID value.
	!
	! See note above in side effects, as to why we use the NRP cell vs.
	! the RP cell in the NRP list to find the current record.
	!
	IF .NRP EQLU .IRAB[IRB$L_NRP_PTR]
	THEN
	    BEGIN

	    GLOBAL REGISTER
		COMMON_IO_STR;

	    ! First, access the bucket containing the current record using NRP 
	    ! cell information. It is possible that while we are waiting for 
	    ! I/O or for someone else to release the bucket so we can have it,
	    ! someone else has changed the NRP list on us. Therefore, after we 
	    ! have accessed the bucket, make sure that the bucket we have 
	    ! accessed is still the one we want.
	    !
	    WHILE 1
	    DO
		BEGIN
		RETURN_ON_ERROR (RM$GETBKT(.NRP[NRP$L_VBN],
					   .IDX_DFN[IDX$B_DATBKTSZ]*512));
		IF .NRP[NRP$L_VBN] EQL .BDB[BDB$L_VBN]
		THEN
		    EXITLOOP
		ELSE
		    RM$RLSBKT(0);
		END;

	    IRAB[IRB$L_CURBDB] = .BDB;
	
	    ! If after accessing the bucket containing the current record
	    ! we find that we are positioned to the beginning of the bucket,
	    ! then the record we want to position to is the very first
	    ! record in the bucket. A call to RM$CSEARCH_TREE will accomplish
	    ! this positioning for us.
	    !
	    IF .NRP[NRP$V_BEGINNING]
	    THEN
		BEGIN
		REC_ADDR = .BKT_ADDR + BKT$C_OVERHDSZ;
		IRAB[IRB$V_SRCHGE] = 1;
		RET_ON_ERR_EOF(RM$CSEARCH_TREE());

		IRAB[IRB$W_SAVE_POS] = 0;

		IF NOT .IDX_DFN[IDX$V_DUPKEYS]
		THEN
		    BEGIN
		    IRAB[IRB$V_SRCHGE] = 0;
		    IRAB[IRB$V_SRCHGT] = 1;
		    END;
		LEAVE NOTFIRST;
		END



	    ! If the NRP list does not position us to the beginning of the 
	    ! bucket containing the current record, then use the NRP list ID
	    ! information to position us to the current record. If the record 
	    ! can not be found within the data bucket, then return an RMS$_BUG
	    ! error after releasing the locked data bucket.
	    !
	    ELSE
		BEGIN

		BUILTIN
		    AP;

		AP = .NRP[NRP$W_ID];
		IF NOT RM$FIND_BY_ID()
		THEN
		    BEGIN
		    RELEASE (IRAB[IRB$L_CURBDB]);
		    RETURN RMSERR(BUG);
		    END;
		END;
	    END


	! We are using the RP cell to reposition because the NRP cell is 
	! invalid. We will call RM$FIND_BY_RRV to reposition to the current 
	! record, and if it is deleted we will position to the next record 
	! by key value.
	!
	ELSE
	    BEGIN

	    LOCAL
		STATUS;

	    STATUS = RM$FIND_BY_RRV(.NRP[NRP$L_VBN], .NRP[NRP$W_ID], 0);

	    ! If we were unable to find the current record by its RRV
	    ! value, and the status returned is other then record deleted
	    ! then return an error of RMS$_BUG.
	    !
	    IF  NOT .STATUS
		 AND
		(.STATUS<0, 16> NEQ RMSERR(DEL))
	    THEN
		BEGIN
		RAB[RAB$L_STV] = .STATUS;
		RETURN RMSERR(BUG);
		END;

	    ! If the current record is deleted, then position by key value
	    ! to the next record and leave the loop.
	    !
	    IF NOT .STATUS
	    THEN
		BEGIN
		IRAB[IRB$V_SRCHGE] = 1;
		RET_ON_ERR_EOF(RM$CSEARCH_TREE());
		LEAVE NOTFIRST;
		END;

	    END;				! {end of find_by_rrv for rp }


	! Having positioned to the current record by means of the NRP cell
	! or RP cell information, compare its primary key with the key
	! of the last record retrieved sequentially.
	!
	IF NOT RM$COMPARE_REC(KEYBUF_ADDR(2), .IRAB[IRB$B_KEYSZ], 0)
	THEN
	    BEGIN

	    ! If the two keys match, and our key of reference is not the 
	    ! primary key, then adjust our position in the SIDR array to the
	    ! next element (or to the first element if duplicates are not 
	    ! allowed on this key of reference), provided we are to position 
	    ! to the next record, and this stream's current array element had 
	    ! not been deleted (in which case we are already positioned to the 
	    ! next element).
	    !
	    IF .IDX_DFN[IDX$B_KEYREF] NEQ 0
   	    THEN
		BEGIN

		IF .IRAB[IRB$V_SKIP_NEXT] AND (NOT .NRP[NRP$V_DELETED])
		THEN
		IRAB[IRB$W_SAVE_POS] = .IRAB[IRB$W_SAVE_POS] + 1;
		LEAVE LOOKING
		END;

	    ! If the two keys match, and our key of reference is the primary
	    ! key, then adjust our position to the next record provided we
	    ! are to position to the next record, and this stream's current
	    ! record has not been deleted (in which case we have already
	    ! positioned to the next record).
	    !
	    IF .IRAB[IRB$V_SKIP_NEXT] OR .NRP[NRP$V_DELETED]
	    THEN

		! If we are to position to the next record, do so, and set
		! up the environment for accessing records within the next
		! data bucket in case we have positioned past the last
		! record in the current bucket.
		!
		BEGIN
		RM$GETNEXT_REC();

		IRAB[IRB$V_SRCHGE] = 1;
		IRAB[IRB$W_SAVE_POS] = 0;

		IF NOT .IDX_DFN[IDX$V_DUPKEYS]
		THEN
		    BEGIN
		    IRAB[IRB$V_SRCHGE] = 0;
		    IRAB[IRB$V_SRCHGT] = 1;
		    END;
		END

	    ! If we are not to position to the next record, then we have
	    ! positioned to the record we want.
	    !
	    ELSE
		LEAVE LOOKING;

	    END				! { of key matches }



	! If the key of our current record does not match the key of the last
	! record retrieved, then it is a bug (and report it as such) if we
	! are positioning by means of the RP cell, or if this stream's current
	! record had not been deleted. Otherwise, position by key value to the
	! next record.
	!
	ELSE
	    BEGIN

	    GLOBAL REGISTER
		R_BDB_STR;

	    RELEASE(IRAB[IRB$L_CURBDB]);

	    IF  (.NRP NEQU .IRAB[IRB$L_NRP_PTR])
		 OR
		NOT .NRP[NRP$V_DELETED]
	    THEN
		RETURN RMSERR(BUG);

	    IRAB[IRB$V_SRCHGE] = 1;
	    RET_ON_ERR_EOF(RM$CSEARCH_TREE());

	    IRAB[IRB$W_SAVE_POS] = 0;

	    IF NOT .IDX_DFN[IDX$V_DUPKEYS]
	    THEN
		BEGIN
		IRAB[IRB$V_SRCHGE] = 0;
		IRAB[IRB$V_SRCHGT] = 1;
		END;
	    END;				! { end of key didn't match }

	END;					! { end - notfirst positioning}


    ! In some cases we are able to access the bucket containing the current
    ! record, and have positioned to a record in that bucket, but have yet to
    ! position to the next non-deleted record in the file. That is our purpose
    ! here. Having accessed the bucket and positioned to a record, often the
    ! very first record in the bucket, we now position to the next non-deleted
    ! record in the file.
    !
    BEGIN

    LABEL
	GET_NON_DEL;

GET_NON_DEL :
    BEGIN

    LOCAL
	END_OF_BKT	: REF BBLOCK;

    ! Until end-of-file or the first non-deleted record is encountered, 
    ! horizontally scan the file looking for the next non-deleted record.
    !
    WHILE 1
    DO
	BEGIN
	END_OF_BKT = .BBLOCK[.IRAB[IRB$L_CURBDB], BDB$L_ADDR];
	END_OF_BKT = .END_OF_BKT + .END_OF_BKT[BKT$W_FREESPACE];

	! Continue to scan the current bucket looking for the next non-deleted
	! record while there are still records in the current bucket to scan.
	!
	WHILE .REC_ADDR LSSU .END_OF_BKT
	DO
	    BEGIN

	    IF .REC_ADDR[IRC$V_RRV]
	    THEN
		EXITLOOP;

	    IF NOT .REC_ADDR[IRC$V_DELETED]
	    THEN
		LEAVE GET_NON_DEL;

	    RM$GETNEXT_REC();
	    END;

	! Having exhausted the current bucket in our horizontal scan, obtain 
	! the next bucket.
	!
	RET_ON_ERR_EOF(RM$CSEARCH_TREE());
	END;

    END;
    END;
    END;					!  { looking }



    ! If our key of reference is the primary key, then all we have to do is set
    ! up the next record list context for this record and we are done.
    !
    IF .IDX_DFN[IDX$B_KEYREF] EQL 0
    THEN
	BEGIN
	
	IRAB[IRB$W_RFA_ID] = IRC$_ID(REC_ADDR);
	IRAB[IRB$L_RFA_VBN] = .BBLOCK[.IRAB[IRB$L_CURBDB], BDB$L_VBN];
	IRAB[IRB$L_NXTBDB] = .IRAB[IRB$L_CURBDB];
	BBLOCK[.IRAB[IRB$L_CURBDB], BDB$V_PRM] = 1;
	RETURN RMSSUC()

	END;

    ! If it was a primary key, we must have exited by now, so we are only here
    ! if we are positioning on an alternate key. Let search_sidr handle the
    ! positioning on the SIDR array.
    !
    BEGIN

    LOCAL
	STATUS;

    STATUS = 1;

    WHILE .STATUS
    DO
	BEGIN
	IRAB[IRB$V_SRCHGE] = 0;
	IRAB[IRB$V_PRM] = 1;

	IF STATUS = RM$SEARCH_SIDR()
	THEN
	    RETURN .STATUS;

	IF .STATUS<0, 16> EQL RMSERR(RNF)
	THEN
	    BEGIN
	    IRAB[IRB$V_SRCHGE] = 1;
	    STATUS = RM$CSEARCH_TREE();

	    IF .STATUS<0, 16> EQL RMSERR(RNF)
	    THEN
		STATUS = RMSERR(EOF);

	    IRAB[IRB$W_SAVE_POS] = 0;
	    END;

	END;

    RETURN .STATUS;

    END

    END;					! { end of routine  }

END

ELUDOM
