	$BEGIN	RM0FSET,010,F$RMSCOM,<SETUP FOR A FAB FUNCTION>


;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; Facility: RMS32
;
; Abstract:
;		routine to perform common setup for a fab function
;
; Environment:
;		star processor running starlet exec.
;
; Author: L F Laverdure,	 creation date: 4-JAN-1977
;
; Modified By:
;
;	V02-010	REFORMAT	Keith B. Thompson	29-Jul-1980
;
;	V009	CDS0077		C D Saether	23-JAN-1980	14:00
;		clear busy bit in ifab if irab is busy (act error)
;
;	V008	RAN0003		R A Newell	9-NOV-1978	15:22
;		file sharing code enhancements
;
; Revision History:
;
;				L F Laverdure	10-OCT-1978	13:30
;		copy of CHK_IDLE from RM0FILFNC
;
;--


	.SBTTL	DECLARATIONS

;
; Include Files:
;

;
; Macros:
;

	$IRBDEF				; irab data defintions
	$IMPDEF
	$FABDEF
	$IFBDEF
	$RMSDEF

;
; Equated Symbols:
;

;
; Own Storage:
;


	.SBTTL	RM$FSET - COMMON SETUP FOR FAB FUNCTION ROUTINE

;++
;
;  RMS$FSET	- Set up for a FAB function call
;  RMS$FSET_ALT	- Bypass RMS$FABCHK call
;
;  this routine performs common setup for a fab function call
;  including the following:
;
;	1. call RM$FABCHK to check arglist, set base regs,
;	   and zero sts and stv fields in fab
;	2. check for valid ifi and set ifab addr
;	3. check for stream idle and set to busy
;	4. store the arglist addr and caller's mode in the ifab
;	5. save sp entry value in IMP$L_SAVED_SP
;
;
; Calling sequence:
;
;	BSBW	RM$FSET
;
;  alternate entry at RM$FSET_ALT to perform functions 3, 4, & 5 only
;	R7, R8, R9, and R11 must be set as per output prior to call.
;
;
; Input Parameters:
;
;	SP	stack pointer
;	AP	argument list addr
;
; Implicit Inputs:
;
;	the contents of the fab
;
; Output Parameters:
;
;	R11	impure area address
;	R10	ifab address
;	R9	ifab address
;	R8	fab address
;	R7	caller's mode
;	R0 thru R5 destroyed
;
; Implicit Outputs:
;
;	IMP$L_SAVED_SP is set to value of SP+4
;
; Completion Codes:
;
;	none.  if an error is detected returns to user (not caller)
;	after appropriate cleanup.  the user receives a standard
;	rms error code, in particular, ifi and those returned by
;	RM$FABCHK.
;
; Side Effects:
;
;	none
;
;--


RM$FSET::
	BSBW	RM$FABCHK		; valid fab?
					; returns only if o.k.
					;NOTE:
					; note: sets R11 to impure addr
					;     R9 to ifi
					;     R8 to fab addr
					;     R7 to caller's mode

;
;  get the ifab address and check for a valid ifab
;

	MOVL	#IMP$L_IFABTBL/4,R0	; ifab table offset divided by 4
	BSBW	RM$GTIADR		; get ifab addr
	BEQL	ERRIFI			; branch if bad
	ASSUME	IFB$B_BID EQ IFB$B_BLN-1
	.IF	NE $$RMSTEST&$$RMS_TBUGCHK
	CMPW	IFB$B_BID(R9),#IFB$C_BID+<<IFB$C_BLN/4>*256>
	BNEQ	ERRBUG			; branch if not a valid ifab
	.ENDC

;
;
;  alternate entry from fseti here
;
;  set busy, checking if already active
;  store caller's mode and arglist addr in ifab
;

RM$FSET_ALT::
	BBSS	#IFB$V_BUSY,(R9),ERRACT
	BBS	#FAB$V_PPF_IND+<FAB$W_IFI*8>,(R8),CHKIND; branch if indirect ppf
	CSB	#IFB$V_PPF_IMAGE,(R9)	; make sure indirect bit off
SETMOD:	MOVB	R7,IFB$B_MODE(R9)	; save caller's mode
	MOVL	AP,IFB$L_ARGLST(R9)	; save pointer to arglist
	MOVL	R9,R10			; copy ifab addr
	ADDL3	#4,SP,IMP$L_SAVED_SP(R11); save stack entry value

;
; (less return pc)
;

	.IF	NE $$RMSTEST&$$RMS_TBUGCHK
	MOVL	R8,IFB$L_LAST_FAB(R9)	; save addr this fab
	.ENDC

;
;   check that all irabs connected to an ifab are not busy.
;

	MOVL	R10,R0			; ifab addr to temp reg
	BRB	20$			; go check if any irabs linked
10$:	BBS	#IRB$V_BUSY,(R0),ERRACT0; error if busy
	ASSUME	IRB$L_IRAB_LNK EQ IFB$L_IRAB_LNK
20$:	MOVL	IRB$L_IRAB_LNK(R0),R0	; get next irab
	BNEQ	10$			; branch if we got one

;
;	if this is a shared file (IFB$L_FRB_PTR non-zero), take ownership
;	of the shared ifab.
;	note:  if called from RM$FSETI, IFB$L_FRB_PTR will be 0 so no attempt
;	       will be made to take the shared ifab here.
;

	MOVL	IFB$L_FRB_PTR(R10),R5	; get frb pointer from ifab
	BEQL	30$			; branch if not shared file
	BSBW	RM$TAKE_PPQ		; 1st take per process queue
	BRW	RM$TAKE_SIFAB		; get ownership of sifab & return
30$:	RSB

;
;  the ifi value indicates indirect processing of a process permanent file
;
;  set PPF_IMAGE flag
;

CHKIND:	SSB	#IFB$V_PPF_IMAGE,(R9)	; set indirect operation flag
	BRB	SETMOD			; and continue


;
;  error returns
;

ERRIFI:	$PSECT_BR	L$RMS0
	RMSERR	IFI			; invalid ifi value
ERROR:	BRW	RM$EX_NOSTR
	$PSECT_RESTORE

;

ERRACT0:
	CSB	#IFB$V_BUSY,(R10)	; don't leave ifab busy on irab busy
ERRACT:	$PSECT_BR	L$RMS0
	RMSERR	ACT			; stream already active
	BRB	ERROR
	$PSECT_RESTORE

;
;  internal rms problem  -  ifab table pointed to an invalid ifab!
;

ERRBUG:	RMSTBUG	FTL$_BADIFAB


	.END
