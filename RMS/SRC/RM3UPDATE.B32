MODULE RM3UPDATE (LANGUAGE (BLISS32) ,
		IDENT = 'V03-002'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:	RMS32 INDEX SEQUENTIAL FILE ORGANIZATION
!
! ABSTRACT:
!               High level update and other miscellaneous update specific
!		routines
!
!
! ENVIRONMENT:
!
!		VAX/VMS OPERATING SYSTEM
!
!--

!
! AUTHOR:        Christian Saether	     CREATION DATE:	11-OCT-78  14:38
!
!
! MODIFIED BY:
!	V03-002	MCN0009		Maria del C. Nasr	25-Mar-1982
!		Use macro to calculate key buffer address.
!
!	V03-001	TMK0001		Todd M. Katz		14-March-1982
!		Pass the address of OVHRECSZ instead of its value to
!		RM$INSERT_UDR. This routine has been changed so that its
!		lone parameter is both an input and an output parameter.
!
!	V02-020	DJD0001		Darrell Duffy		1-March-1982
!		Use irab RBF and RSZ to clean up probing.
!
!	V02-019	PSK0001		Paulina S. Knibbe	07-Oct-1981
!		Fix problem with update if of record with compressed key
!
!	V02-018	MCN0008		Maria del C. Nasr	29-Jun-1981
!		Modify to be able to update prologue 3 version files.
!
!	V02-017	MCN0007		Maria del C. Nasr	27-Apr-1981
!		Change calling sequence of RM$FIND_BY_RRV.
!
!	V02-016	MCN0006		Maria del C. Nasr	13-Mar-1981
!		Increase size of the record identifier to a word in the IRB,
!		NRP, and RLB internal structures.
!
!	V02-015	REFORMAT	Keith B. Thompson	23-Jul-1980
!
! REVISION HISTORY:
!
!	Wendy Koenig, 	24-Oct-78  14:03
!	X0002 - make changes caused by sharing conventions
!
!	Christian Saether, 	27-Oct-78  15:12
!	X0003 - implement update if and eliminate window between bucket locking
!		and record lock release
!
!	Christian Saether, 	3-Nov-78  8:23
!	X0004 - fix incorrect use of BDB$W_SIZE to BDB$W_NUMB
!
!	Christian Saether, 	9-Nov-78  9:49
!	X0005 - revert to only having record lock on UDR during SIDR inserts
!		(not enough BDB's to keep data bucket locked)
!
!	Christian Saether, 	12-Dec-78  20:55
!	X0006 - mark permanence on data bucket when doing SIDR inserts
!
!	Christian Saether, 	16-Jan-79  12:05
!	X0007 - clean up error paths, account for lockabove on update if
!
!	Christian Saether, 	22-Jan-79  11:03
!	X0008 - make sure abovelckd clear after INS_ALL_SIDR before inserting
!		data record
!
!	Wendy Koenig, 	26-Jan-79  9:21
!	X0009 - get rid of setting valid
!
!	Christian Saether, 	30-JAN-79  16:18
!	X0010 - don't clobber BDB when releasing level above
!
!	Wendy Koenig, 	9-Feb-79  16:07
!	X0011 - call clean_rec routine on errors
!
!	Christian Saether, 11-Feb-79  19:14
!	X0012 - record unlocking (error or not) moved to RM3FACE, don't call
!		CLEAN_REC
!
!	Christian Saether,  1-Jul-79 10:00
!	X0013 - fix so OK_DUP returned on update, release lock above BDB
!		when no alternates are changing
!
!	Christian Saether,  7-Dec-79  10:10
!	X0014 - fix bug not releasing bucket when RM$FIND_BY_RFA fails to
!		retrieve data bucket after alternate index update and clear
!		permanence.
!
!*****

LIBRARY 'RMSLIB:RMS';

REQUIRE 'RMSSRC:RMSIDXDEF';

!
! define default psects for code
!

PSECT
    CODE = $$RMS$UPDATE3(PSECT_ATTR),
    PLIT = $RMSUPDATE3(PSECT_ATTR);

! Linkages

LINKAGE
    L_CLEAN_BDB,
    L_CLEAN_SIDR,
    L_COMPARE_KEY,
    L_DELETE_SIDR,
    L_EXPAND_KEYD,
    L_FIND_BY_RFA,
    L_FIND_BY_RRV,
    L_GETBKT,
    L_INSERT_UDR,
    L_INS_ALL_SIDR,
    L_INSS_OR_IDX,
    L_KEY_DESC,
    L_MOVE,
    L_NULLKEY,
    L_PACK_REC,
    L_PUT_UPD_ERR,
    L_PUT_UPD_CHKS,
    L_PUT_UPD_FIN,
    L_PUT_UPD_SPL,
    L_RECORD_KEY,
    L_RECORD_VBN,
    L_REC_OVHD,
    L_REPLACE,
    L_RLSBKT,
    L_UNPACK_REC,
    L_UPDATE_SCAN,
    L_UPDDELCOM,
    L_UPDATE3B;

! External Routines
!

EXTERNAL ROUTINE
    RM$CLEAN_BDB	: RL$CLEAN_BDB NOVALUE,
    RM$CLEAN_SIDR	: RL$CLEAN_SIDR NOVALUE,
    RM$COMPARE_KEY	: RL$COMPARE_KEY,
    RM$DELETE_SIDR	: RL$DELETE_SIDR,
    RM$EXPAND_KEYD	: RL$EXPAND_KEYD,
    RM$FIND_BY_RFA	: RL$FIND_BY_RFA,
    RM$FIND_BY_RRV	: RL$FIND_BY_RRV,
    RM$GETBKT		: RL$GETBKT,
    RM$INSERT_UDR	: RL$INSERT_UDR,
    RM$INS_ALL_SIDR	: RL$INS_ALL_SIDR,
    RM$INSS_OR_IDX	: RL$INSS_OR_IDX,
    RM$KEY_DESC		: RL$KEY_DESC,
    RM$MOVE		: RL$MOVE,
    RM$NULLKEY		: RL$NULLKEY,
    RM$PACK_REC		: RL$PACK_REC,
    RM$PUT_UPD_CHKS	: RL$PUT_UPD_CHKS,
    RM$PUT_UPD_ERR	: RL$PUT_UPD_ERR NOVALUE,
    RM$PUT_UPD_FIN	: RL$PUT_UPD_FIN,
    RM$PUT_UPD_SPL	: RL$PUT_UPD_SPL,
    RM$RECORD_VBN	: RL$RECORD_VBN,
    RM$REC_OVHD		: RL$REC_OVHD,
    RM$RLSBKT		: RL$RLSBKT,
    RM$UNPACK_REC	: RL$UNPACK_REC,
    RM$UPDDELCOM	: RL$UPDDELCOM,
    RM$RECORD_KEY	: RL$RECORD_KEY;


GLOBAL ROUTINE RM$REPLACE(NEW_SIZE) : RL$REPLACE =

!++
!
! FUNCTIONAL DESCRIPTION:
! Update record pointed to by REC_ADDR if new record is same size or
! smaller than record being updated.  Save record at back end of NXTBDB
! buffer if it exists.
!
! CALLING SEQUENCE:
!	RM$REPLACE()
!
! INPUT PARAMETERS:
!	none
!
! IMPLICIT INPUTS:
!	BDB - same as CURBDB
!	BKT_ADDR - "	"
!	IRAB
!		[ NXTBDB ] - buffer to save record in if non-zero
!	RAB	[ RSZ ]
!		[ RBF ] - new record size and address
!	REC_ADDR	- points to record being updated
!	IDX_DFN		- required by REC_OVHD
!	IFAB		- "	"	"
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	BKT_ADDR [ FREESPACE ] - reflects change in record size, if reduced
!	record size - reflects change in record size, if reduced
!
! ROUTINE VALUE:
!	0 - if record not replaced
!	1 - if record was replaced
!
! SIDE EFFECTS:
!	if record not updated, it is removed completely from the bucket
!	AP may be cleared
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_IO_STR,
	R_REC_ADDR_STR,
	R_IDX_DFN_STR,
	R_RAB_STR,
	R_IRAB_STR,
	R_IFAB_STR;

    BUILTIN
	AP;

    LOCAL
	DIFF	: SIGNED,
	STATUS,
	S_REC_SIZE,
	OLD_REC;

    BEGIN

    GLOBAL REGISTER
	R_REC_SIZE;

    ! Get size of record as it currently exists in the bucket.
    !
    REC_SIZE = 0;		! signal primary data record to REC_OVHD
    OLD_REC = .REC_ADDR + RM$REC_OVHD();
    S_REC_SIZE = .REC_SIZE;
    END;

	
    ! If record must be saved during delete operations, do it now.  It will
    ! be saved compressed for prologue 3 files.
    !

    IF .IRAB[IRB$L_NXTBDB] NEQ 0
    THEN
	BEGIN

	LOCAL
	    TO_ADDR	: REF BBLOCK;

	TO_ADDR = .IRAB[IRB$L_NXTBDB];
	TO_ADDR = .TO_ADDR[BDB$L_ADDR] + .TO_ADDR[BDB$W_NUMB];
	TO_ADDR = .TO_ADDR - 2;
	(.TO_ADDR)<0, 16> = .S_REC_SIZE;
	TO_ADDR = .TO_ADDR - .S_REC_SIZE;
	RM$MOVE(.S_REC_SIZE, .OLD_REC, .TO_ADDR);
	END;

    ! If the key is compressed, save in key buffer 5 the key of the record
    ! that will be deleted, including the compression overhead.  This might
    ! be used by RM$EXPAND_KEYD later.
    !

    IF .IDX_DFN[IDX$V_KEY_COMPR]
    THEN
	RM$MOVE ( .(.OLD_REC)<0,8> + 2, .OLD_REC, KEYBUF_ADDR(5) );

    ! figure out what the difference in records sizes is
    !
    DIFF = .S_REC_SIZE - .NEW_SIZE;

    IF .DIFF LSS 0
    THEN

	! updated record is larger than original, so set up record size and
	! diff so that it is removed entirely from the bucket
	!
	BEGIN

	DIFF = .OLD_REC + .S_REC_SIZE - .REC_ADDR;
	OLD_REC = .REC_ADDR;

	! get primary key value into keybuffer 3 for use by PUT_UPD_SPL
	!
	REC_ADDR = .IRAB[IRB$L_RBF];
	AP = 3;					! no overhead / expanded
	RM$RECORD_KEY(KEYBUF_ADDR(3));
	STATUS = 0;
	REC_ADDR = .OLD_REC;
	END
    ELSE
	BEGIN

	IF .DIFF NEQ 0
	THEN

	    ! record is shrinking, so fix the record size for the record
	    !
	    (.OLD_REC - 2)<0, 16> = .NEW_SIZE;

	! move in the new record
	!

	IF .IFAB[IFB$B_PLG_VER] LSSU PLG$C_VER_3
	THEN
	    OLD_REC = RM$MOVE(.IRAB[IRB$W_RSZ], .IRAB[IRB$L_RBF], .OLD_REC)
	ELSE
	    OLD_REC = RM$MOVE(.NEW_SIZE, .IRAB[IRB$L_RECBUF], .OLD_REC);
	STATUS = 1;				! to return success
	END;

    ! if it did shrink, shuffle everyone else down in the bucket
    !

    IF .DIFF NEQ 0
    THEN
	BEGIN

	LOCAL
	    LEN;

	BKT_ADDR[BKT$W_FREESPACE] = .BKT_ADDR[BKT$W_FREESPACE] - .DIFF<0, 16>;
	LEN = .BKT_ADDR[BKT$W_FREESPACE] - (.OLD_REC - .BKT_ADDR)<0, 16>;

	IF .LEN NEQ 0
	THEN
	    RM$MOVE(.LEN, .OLD_REC + .DIFF, .OLD_REC);

	END;

    ! If STATUS is 0, then we know the record grew in size.  It has been
    ! deleted from the bucket, and a regular record insert must be done.
    ! If the key is compressed, the key of the following record must be expanded
    ! to reflect the deleted record.
    !

    IF .IDX_DFN[IDX$V_KEY_COMPR]
      AND .STATUS EQLU 0
	AND NOT .REC_ADDR[IRC$V_RRV]
    THEN
	BEGIN

	GLOBAL REGISTER
	    R_REC_SIZE;

	RM$EXPAND_KEYD ( KEYBUF_ADDR(5), .REC_ADDR + RM$REC_OVHD() );
	END;

    RETURN .STATUS;

    END;


GLOBAL ROUTINE RM$UPDATE_SCAN : RL$UPDATE_SCAN =

!++
!
! FUNCTIONAL DESCRIPTION:
! scan the old and new record to determine which new keys are to be
! inserted and which old keys are to be deleted
!
! CALLING SEQUENCE:
!	RM$UPDATE_SCAN()
!
! INPUT PARAMETERS:
!	none
!
! IMPLICIT INPUTS:
!	REC_ADDR - pointing to current record (to be updated)
!	IDX_DFN - set up for primary key
!		[ KEYSZ ] - key size
!		[ KEYREF ] - key of reference
!		[ MINRECSZ ] - mininimum record length to define key
!		[ CHGKEYS ] - changes are allowed for this key
!	IRAB
!		[ RBF ] - address of user buffer
!		[ RSZ ] - size of updated record
!		[ UPDBUF ] - address of update buffer
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	CHG - if primary key changes key value at all, or any alternate key
!		changes values and CHGKEYS not set
!	SUC - otherwise
!
! SIDE EFFECTS:
!	AP cleared
!	each byte in the update buffer corresponds to an index
!	INS_NEW is set if a new key value is to be inserted
!	OLD_DEL is set if the old key value requires deletion.
!	the same flags for the primary key byte indicate whether any
!	alternate keys require insertion or deletion at all
!
!--

    BEGIN

    EXTERNAL REGISTER
	R_IDX_DFN_STR,
	R_REC_ADDR_STR,
	COMMON_IO_STR,
	COMMON_RAB_STR;

    BUILTIN
	AP;

    LOCAL
	OLD_RA,
	OLD_RZ	: WORD,
	UPD_BUF	: REF BBLOCK;

    BEGIN

    GLOBAL REGISTER
	R_REC_SIZE;

    ! set up pointer to data part of old record and save size
    !
    REC_SIZE = 0;
    OLD_RA = .REC_ADDR + RM$REC_OVHD();
    OLD_RZ = .REC_SIZE;
    END;

    ! If it is a prologue 3 file, then we must unpack the record in the
    ! bucket to its expanded form.
    !

    IF .IFAB[IFB$B_PLG_VER] EQLU PLG$C_VER_3
    THEN
	BEGIN

	LOCAL
	    TMP_ADDR;

	TMP_ADDR = .REC_ADDR;
	REC_ADDR = .OLD_RA;
	OLD_RA = .IRAB[IRB$L_RECBUF] + 2;
	OLD_RZ = RM$UNPACK_REC( .OLD_RA, .OLD_RZ );
	(.IRAB[IRB$L_RECBUF])<0,16> = .OLD_RZ;
	REC_ADDR = .TMP_ADDR;
	END;

    AP = 0;					! record to record compare

    IF RM$COMPARE_KEY(.OLD_RA, .IRAB[IRB$L_RBF], .IDX_DFN[IDX$B_KEYSZ])
    THEN
	RETURN RMSERR(CHG);			! primary key cannot change

    ! point to update buffer INS_NEW and OLD_DEL flags for first byte (which
    ! would be key 0) are used to indicate whether any inserts or deletes are
    ! to be done at all
    !
    UPD_BUF = .IRAB[IRB$L_UPDBUF];
    UPD_BUF[UPD$B_FLAGS] = 0;
    UPD_BUF = .UPD_BUF + 1;

    WHILE RM$KEY_DESC(.IDX_DFN[IDX$B_KEYREF] + 1)
    DO
	BEGIN
	UPD_BUF[UPD$B_FLAGS] = 0;
	AP = 0;				! signal record compare for NULLKEY

	IF .RAB[RAB$W_RSZ] GEQU .IDX_DFN[IDX$W_MINRECSZ]
	    AND
	    RM$NULLKEY(.IRAB[IRB$L_RBF])
	THEN
	    UPD_BUF[UPD$V_INS_NEW] = 1;		! key in present in new record

	IF .OLD_RZ GEQU .IDX_DFN[IDX$W_MINRECSZ]
	    AND
	    RM$NULLKEY(.OLD_RA)
	THEN

	    IF NOT .UPD_BUF[UPD$V_INS_NEW]

		! key is present in old record, but not in new, so delete old
		!
	    THEN
		UPD_BUF[UPD$V_OLD_DEL] = 1
	    ELSE
		BEGIN
		AP = 0;

		IF RM$COMPARE_KEY(.OLD_RA, .IRAB[IRB$L_RBF],
			.IDX_DFN[IDX$B_KEYSZ])
		THEN

		    ! key present in old and new, and different key value, so
		    ! insert new and delete old
		    !
		    UPD_BUF[UPD$V_OLD_DEL] = 1
		ELSE

		    ! keys present in old and new, but haven't changed - do
		    ! nothing
		    !
		    UPD_BUF[UPD$V_INS_NEW] = 0;

		END;

	! if keys are changing and it is not allowed, that is an error
	!

	IF .UPD_BUF[UPD$B_FLAGS] NEQ 0
	    AND
	    NOT .IDX_DFN[IDX$V_CHGKEYS]
	THEN
	    RETURN RMSERR(CHG);

	BBLOCK[.IRAB[IRB$L_UPDBUF], UPD$B_FLAGS] =
	     .BBLOCK[.IRAB[IRB$L_UPDBUF],UPD$B_FLAGS] OR .UPD_BUF[UPD$B_FLAGS];
	UPD_BUF = .UPD_BUF + 1;
	END;

    ! reset to primary key descriptor and return success
    !
    RETURN RM$KEY_DESC(0);

    END;


GLOBAL ROUTINE RM$UPDATE3B : RL$UPDATE3B =

!++
!
! FUNCTIONAL DESCRIPTION:
! 	High level update routine, using the following update algorithm:
!	 - the current record is retrieved using FIND_BY_RRV
!	 - record sizes, null key status, and comparisons between the new and
!	   old record are used to set flags in the update buffer to determine
!	   which new secondary key values require insertion and which old key
!	   values require deletion - illegal key changes are caught here
!	 - new key values requiring insertion are inserted
!	 - the old data record is stored in a buffer before being replaced
!	   by the new data record
!	 - the new data record is inserted - index updating in the event of a
!	   data level split is not done yet
!	 - old key values requiring deletion are deleted using the old data
!	   record which has been saved
! 	 - index updating from primary data level split is performed if
!	   required
!
! CALLING SEQUENCE:
!	BSBW RM$UPDATE3B
!
! INPUT PARAMETERS:
!	none
!
! IMPLICIT INPUTS:
!	COMMON_RABREG
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	see errors from
!	UPDELCOM
!	PUT_UPD_CHKS
!	FIND_BY_RRV
!	FIND_BY_RFA
!	UPDATE_SCAN
!	INS_ALL_SIDR
!	RLSBKT
!	PUT_UPD_SPL
!	INSS_OR_IDX
!	PUT_UPD_FIN
!
! SIDE EFFECTS:
!	none
!
!--

    BEGIN

    BUILTIN
	AP,
	TESTBITSS,
	TESTBITCS;

    LABEL
	GETBACK;

    EXTERNAL REGISTER
	R_REC_ADDR_STR,
	R_IDX_DFN_STR,
	COMMON_RAB_STR;

    GLOBAL REGISTER
	COMMON_IO_STR;

    ! in update if mode, put would now be calling this routine w/ the bucket
    ! locked, positioned on the record, and locking would have been completed
    ! therefore, the update interface routine will set the update bit to let us
    ! know where we are being called from and we will use that as an indication
    ! of what to do
    !

    IF TESTBITSS(IRAB[IRB$V_UPDATE])
    THEN
	BEGIN

	! this is an update so make sure abovelckd is clear as there cannot be
	! any bucket above locked upddelcom will do the find_by_rrv to locate
	! the record
	!
	IRAB[IRB$V_ABOVELCKD] = 0;

	RETURN_ON_ERROR (RM$UPDDELCOM());

	END;

    ! note that if this has been called as an update if we must be sure to
    ! release the potential lock_bdb from lockabove optimization if any errors
    ! occur, hence the use of clean_bdb on the error returns put_upd_chks will
    ! make some common checks and set up primary key descriptor
    !

    RETURN_ON_ERROR (RM$PUT_UPD_CHKS(), RM$CLEAN_BDB());

    ! set up update buffer to tell which keys need inserting and deleting
    !

    RETURN_ON_ERROR (RM$UPDATE_SCAN(), RM$CLEAN_BDB());

    IRAB[IRB$W_LAST_ID] = IRC$_ID(REC_ADDR);

    ! if there are going to be any sidr inserts or deletes as a result of
    ! this update then we must release the lock_bdb from lockabove optimization
    ! on an update if if it exists... this is because the sidr inserts will try
    ! to do the same thing and during deletes the locked primary data bucket bdb
    ! will be stored in lock_bdb
    !

    IF .BBLOCK[.IRAB[IRB$L_UPDBUF], UPD$B_FLAGS] NEQ 0
	AND
	TESTBITSC(IRAB[IRB$V_ABOVELCKD])
    THEN
	BEGIN
	BDB = .IRAB[IRB$L_LOCK_BDB];
	IRAB[IRB$L_LOCK_BDB] = 0;
	RM$RLSBKT(0);
	END;

    BDB = .IRAB[IRB$L_CURBDB];

    IF .BBLOCK[.IRAB[IRB$L_UPDBUF], UPD$V_INS_NEW]
    THEN

	! new keys are to be inserted from the new record release the bucket
	! containing the old current record, insert all the alternate keys
	! required, and get the old current record back. set permanence to try
	! to hang on to this bucket because we know for sure that we will want
	! to get it back.  this should not ruin the setting of permanence for
	! roots on alternate indices with extra buffers because it will be
	! cleared when this bucket is reaccessed.
	!
GETBACK :
	BEGIN
	BDB[BDB$V_PRM] = 1;
	IRAB[IRB$L_LAST_VBN] = .BDB[BDB$L_VBN];
	IRAB[IRB$L_CURBDB] = 0;
	RM$RLSBKT(0);

	! insert all alternate keys requiring update
	!

	RETURN_ON_ERROR (RM$INS_ALL_SIDR());

	! get back to primary key descriptor
	!
	RM$KEY_DESC(0);

	! clear irb$v_abovelckd as sidr inserts may have left set
	!
	IRAB[IRB$V_ABOVELCKD] = 0;
	IRAB[IRB$B_CACHEFLGS] = CSH$M_LOCK;
	AP = .IRAB[IRB$W_LAST_ID];

	! try to get the record back using FIND_BY_RFA - unless the bucket the
	! record was in has split, this will get it. set norls_rnf so that we
	! can clear the permanence bit in the bdb always and it makes the logic
	! easier as we always release the bucket here.
	!
	BEGIN

	LOCAL
	    ST;

	IRAB[IRB$V_NORLS_RNF] = 1;
	ST = RM$FIND_BY_RFA(.IRAB[IRB$L_LAST_VBN]);
	BDB = .IRAB[IRB$L_CURBDB];	! will be zero on non rnf error

	IF .ST
	THEN

	    ! FIND_BY_RFA found something so confirm that in fact the back
	    ! pointers correspond to RRV of the record we are updating. if so -
	    ! all done.
	    !
	    BEGIN

	    IF .BBLOCK[.IRAB[IRB$L_NRP_PTR], NRP$W_RP_ID] EQL
		    .REC_ADDR[IRC$B_RRV_ID]
	    THEN
		BEGIN
		AP = 3;		! set up for data record for RECORD_VBN

		IF .BBLOCK[.IRAB[IRB$L_NRP_PTR], NRP$L_RP_VBN] EQL
		    RM$RECORD_VBN()
		THEN
		    BEGIN
		    BDB[BDB$V_PRM] = 0;	! don't leave bucket with permanence
		    LEAVE GETBACK;

		    END;

		END

	    END
	ELSE

	    ! if this is not an RNF error, it's serious so quit right now
	    !

	    IF .ST<0, 16> NEQ RMSERR(RNF)
	    THEN
		BEGIN
		RM$PUT_UPD_ERR();
		RETURN .ST;

		END;

	END;					! of local ST

	! if we are here, we either got an RNF or the back pointers didn't
	! match so fall back to doing a FIND_BY_RRV on the RP info after
	! clearing the permanence bit in the bdb and releasing the bucket
	! accessed by find_by_rfa.
	!
	BDB[BDB$V_PRM] = 0;
	RM$RLSBKT(0);
	IRAB[IRB$B_CACHEFLGS] = CSH$M_LOCK;

	RETURN_ON_ERROR (RM$FIND_BY_RRV(.BBLOCK[.IRAB[IRB$L_NRP_PTR],
		NRP$L_RP_VBN], .BBLOCK[.IRAB[IRB$L_NRP_PTR], NRP$W_RP_ID],0),
	    	RM$PUT_UPD_ERR());

	END;		! of block GETBACK and alternate keys were inserted

    IF .BBLOCK[.IRAB[IRB$L_UPDBUF], UPD$V_OLD_DEL]
    THEN

	! there are old key values to be deleted from the old current record,
	! so get a buffer to save the record in before the updated record
	! clobbers it.
	!
	BEGIN
	IRAB[IRB$B_CACHEFLGS] = CSH$M_NOREAD;
	RM$GETBKT(0, .BDB[BDB$W_NUMB]);
	IRAB[IRB$L_NXTBDB] = .BDB;
	END;

    BDB = .IRAB[IRB$L_CURBDB];
    BKT_ADDR = .BDB[BDB$L_ADDR];

    BEGIN

    LOCAL
	RECSZ,
	OVHRECSZ;

    ! We need to save two records sizes:  one with overhead, and one without
    !

    IF .IFAB[IFB$B_PLG_VER] LSSU PLG$C_VER_3
    THEN
	BEGIN
	RECSZ = .RAB[RAB$W_RSZ];
	OVHRECSZ = .RECSZ + IRC$C_FIXOVHDSZ;
	IF .IFAB[IFB$B_RFMORG] NEQU FAB$C_FIX
	THEN
	    OVHRECSZ = .OVHRECSZ + IRC$C_DATSZFLD;
	END
    ELSE
	BEGIN

	! Make sure we compress the record properly by starting
	! at the beginning of the bucket. (otherwise we will get
	! into trouble when the key isn't changing and it looks
	! like a dup)
	!

	IRAB [IRB$L_LST_NCMP] = .BKT_ADDR + BKT$C_OVERHDSZ;
	RECSZ = RM$PACK_REC();
	OVHRECSZ = .RECSZ + IRC$C_FIXOVHSZ3;
	IF .IFAB[IFB$B_RFMORG] NEQU FAB$C_FIX
	  OR ( .IFAB[IFB$B_RFMORG] EQLU FAB$C_FIX
	     AND .IDX_DFN[IDX$B_DATBKTYP] NEQU IDX$C_NCMPNCMP )
	THEN
	    OVHRECSZ = .OVHRECSZ + IRC$C_DATSZFLD;
	END;

    IF (RM$REPLACE(.RECSZ)
	OR
	RM$INSERT_UDR(OVHRECSZ))
    THEN

	! the updated record fits in the original bucket without requiring a
	! split so release it without forcing a write through
	!
	BEGIN
	BDB[BDB$V_DRT] = 1;			! this is still curbdb

	IF (BDB = .IRAB[IRB$L_LOCK_BDB]) NEQ 0
	THEN
	    BEGIN
	    RM$RLSBKT(0);
	    IRAB[IRB$L_LOCK_BDB] = 0;
	    END;

	BDB = .IRAB[IRB$L_CURBDB];
	IRAB[IRB$L_CURBDB] = 0;

	RETURN_ON_ERROR (RM$RLSBKT(0), RM$PUT_UPD_ERR());

	END					! of record fits w/o split
    ELSE

	! bucket is going to split
	!
	BEGIN

	IF .IRAB[IRB$L_NXTBDB] NEQ 0
	THEN

	    ! we have saved the old current record in another buffer, which we
	    ! must now give up, so the record will be moved from there into the
	    ! back end of the original bucket it was in, where there is now
	    ! room because it has been deleted from that bucket as a real
	    ! record
	    !
	    BEGIN

	    LOCAL
		FROM_ADDR,
		TO_ADDR,
		SIZE,
		SAV_BDB;

	    SAV_BDB = .BDB;
	    TO_ADDR = .BKT_ADDR + .BDB[BDB$W_NUMB];
	    BDB = .IRAB[IRB$L_NXTBDB];
	    FROM_ADDR = .BDB[BDB$L_ADDR] + .BDB[BDB$W_NUMB];
	    FROM_ADDR = .FROM_ADDR - 2;
	    SIZE = .(.FROM_ADDR)<0, 16>;
	    TO_ADDR = .TO_ADDR - 2;
	    (.TO_ADDR)<0, 16> = .SIZE;
	    RM$MOVE(.SIZE, .FROM_ADDR - .SIZE, .TO_ADDR - .SIZE);
	    BDB[BDB$V_VAL] = 0;
	    BDB[BDB$V_DRT] = 0;
	    RM$RLSBKT(0);
	    IRAB[IRB$L_NXTBDB] = 0;
	    BDB = .SAV_BDB;
	    END;				! of shuffle record back

	! perform data level split
	!
	IRAB[IRB$B_SPL_BITS] = 0;
	IRAB[IRB$B_KEYSZ] = .IDX_DFN[IDX$B_KEYSZ];

	RETURN_ON_ERROR (RM$PUT_UPD_SPL(.OVHRECSZ),
			BEGIN
			IRAB[IRB$V_UPDATE] = 1;
			RM$PUT_UPD_ERR()
			END);

	BDB = .IRAB[IRB$L_CURBDB];

	! PUT_UPD_SPL cleared the update flag if an index update is not
	! required
	!

	IF TESTBITCS(IRAB[IRB$V_UPDATE])
	THEN

	    ! index update not neccessary, so just release original bucket
	    !
	    BEGIN

	    IF (BDB = .IRAB[IRB$L_LOCK_BDB]) NEQ 0
	    THEN
		BEGIN
		RM$RLSBKT(0);
		IRAB[IRB$L_LOCK_BDB] = 0;
		END;

	    BDB = .IRAB[IRB$L_CURBDB];
	    IRAB[IRB$L_CURBDB] = 0;

	    RETURN_ON_ERROR (RM$RLSBKT(0), RM$PUT_UPD_ERR());

	    END
	ELSE

	    ! index update is required
	    !

	    IF NOT .BBLOCK[.IRAB[IRB$L_UPDBUF], UPD$V_OLD_DEL]
	    THEN

		! no deletions are to be done, so finish the primary index
		! updating and exit
		!
		BEGIN
		IRAB[IRB$B_STOPLEVEL] = 1;
		IRAB[IRB$B_SRCHFLAGS] = IRB$M_POSINSERT;

		IF NOT (RAB[RAB$L_STV] = RM$INSS_OR_IDX())
		THEN
		    IRAB[IRB$V_IDX_ERR] = 1;

		RETURN RM$PUT_UPD_FIN();

		END
	    ELSE

		! we will have to finish updating the primary index after
		! alternate keys from the old record have been deleted.
		! Save the contents of keybuffer 2 in keybuffer 3 so that it is
		! free for the delete operation, save the current BDB as lock
		! BDB
		!
		BEGIN
		RM$MOVE(.IDX_DFN[IDX$B_KEYSZ], KEYBUF_ADDR(2), KEYBUF_ADDR(3));
		IRAB[IRB$L_LOCK_BDB] = .BDB;
		IRAB[IRB$L_CURBDB] = 0;
		END;		! of index update and alternates need deleting

	END;					! of split was required
    END;				! end of block defining RECSZ

    IF .BBLOCK[.IRAB[IRB$L_UPDBUF], UPD$V_OLD_DEL]
    THEN

	! key from the old record need to be deleted set up REC_ADDR to point
	! to the saved record in the NXTBDB buffer for all keys requiring
	! deletion, load into keybuffer 2 and delete
	!
	BEGIN

	LOCAL
	    UPD_BUF	: REF BBLOCK;

	UPD_BUF = .IRAB[IRB$L_UPDBUF] + 1;
	BDB = .IRAB[IRB$L_NXTBDB];
	REC_ADDR = .BDB[BDB$L_ADDR] + .BDB[BDB$W_NUMB];
	REC_ADDR = .REC_ADDR - 2;
	REC_ADDR = .REC_ADDR - .(.REC_ADDR)<0, 16>;

	WHILE RM$KEY_DESC(.IDX_DFN[IDX$B_KEYREF] + 1)
	DO

	    IF .UPD_BUF[UPD$V_OLD_DEL]
	    THEN
		BEGIN
		UPD_BUF = .UPD_BUF + 1;
		AP = 1;				! no record overhead
		RM$RECORD_KEY(KEYBUF_ADDR(2));
		RM$DELETE_SIDR();
		END
	    ELSE
		UPD_BUF = .UPD_BUF + 1;

	BDB = .IRAB[IRB$L_NXTBDB];
	IRAB[IRB$L_NXTBDB] = 0;
	BDB[BDB$V_VAL] = 0;
	BDB[BDB$V_DRT] = 0;

	IF .IRAB[IRB$L_LOCK_BDB] NEQ 0
	THEN

	    ! we still have to finish updating the primary index from a data
	    ! level split restore keybuffer 2 from 3, and restore keybuffer 3
	    ! from the data record if required, release the buffer containing
	    ! the old record, and finish the index update
	    !
	    BEGIN
	    IRAB[IRB$L_CURBDB] = .IRAB[IRB$L_LOCK_BDB];
	    IRAB[IRB$L_LOCK_BDB] = 0;
	    RM$KEY_DESC(0);
	    IRAB[IRB$B_KEYSZ] = .IDX_DFN[IDX$B_KEYSZ];
	    RM$MOVE(.IDX_DFN[IDX$B_KEYSZ], KEYBUF_ADDR(3), KEYBUF_ADDR(2));

	    IF .IRAB[IRB$V_BIG_SPLIT]
	    THEN
		BEGIN
		AP = 1;				! w/o record overhead
		RM$RECORD_KEY(KEYBUF_ADDR(3));
		END;

	    ! release buffer containing old record
	    !
	    RM$RLSBKT(0);
	    IRAB[IRB$B_STOPLEVEL] = 1;
	    IRAB[IRB$B_SRCHFLAGS] = IRB$M_POSINSERT;

	    IF NOT (RAB[RAB$L_STV] = RM$INSS_OR_IDX())
	    THEN
		IRAB[IRB$V_IDX_ERR] = 1;

	    END				! of had to finish updating the index

	    ! release the buffer containing the old record
	    !
	ELSE
	    RM$RLSBKT(0);
	END;		! alternate keys from the old record required deletion

    RETURN RM$PUT_UPD_FIN();

    END;

END

ELUDOM
