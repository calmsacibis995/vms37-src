;	$BEGIN	NWADEF,024


;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; Facility: RMS
;
; Abstract:
;
;	This module defines the Network Work Area control block.
;
; Environment:
;
;	The MDL translator must be used to convert NWADEF.MDL into
;	NWADEF.MAR (and NWADEF.B32).
;
; Author: James A. Krycka,	Creation Date:	03-OCT-1978
;
; Modified By:
;
;	V02-024	JAK0066		J A Krycka	01-OCT-1981
;		Define NWA$V_DAP_STM.
;
;	V02-023	JAK0063		J A Krycka	25-AUG-1981
;		Define NWA$V_UPDATE.
;		Define NWA$L_RDTXABADR.
;		Change DAP$W_MAXDAPSIZ to DAP$W_DAPBUFSIZ.
;		Remove DAP$W_ACTUALSIZ.
;
;	V02-022	JAK0054		J A Krycka	25-FEB-1981
;		Define NWA$V_DEVMBX.
;
;	V02-021	JAK0051		J A Krycka	29-DEC-1980
;		Define NWA$V_FOP_FLK.
;
;	V02-020	JAK0050		J A Krycka	22-NOV-1980
;		Remove NWA$L_RCV_PC and NWA$L_XMT_PC.
;		Change NWA$V_EOF to NWA$V_FTM_EOF.
;		Change NWA$V_PS_SRCH to NWA$V_FTM_CONT.
;
;	V02-019	JAK0045		J A Krycka	08-MAY-1980
;		Add NWA$Q_IOSB and NWA$L_THREAD.
;		Add NWA$V_RCVQIO, NWA$V_RCVAST, and NWA$V_RCVSTALL.
;
;	V02-018	JAK0044		J A Krycka	28-APR-1980
;		Add NWA$B_OSTYPE and NWA$B_FILESYS.
;
;	V02-017	REFORMAT	J A Krycka	26-JUL-1980
;
;--

;++
; $NWADEF - Network Work Area definitions.
;
; The Network Work Area contains the DAP control block, storage for node and
; quoted strings, scratch buffers used for filespec string parsing (RM0XPFN),
; Transmit and receive buffers, etc.
;
; IFB$L_NWA_PTR points to it. The NWA is allocated by RM0XPFN (which calls
; NT0NWASET) when a nodename is detected and it is deallocated by RMS0CLOSE
; (which calls NT0NWASET) when the IFAB is deallocated.
;--

	$STRUCT NWA
	
	F DAP,T,192		; DAP control block
				; Its symbols are defined by $DAPDEF
	  C DAPSIZ,192		; DAP control block size
	  S FLG,0,Q		; Map NWA$Q_FLG over DAP$Q_FLG
				;  Bits 00-31 are defined by NWA
				;  Bits 32-63 are defined by DAP
	    V <			; Define NWA flags:
	      LAST_MSG		;  Declare this last DAP message in the sequence
				;  to be blocked; i.e., transmit blocked DAP
				;  messages in AUX buffer followed by this one
				;  (input to NT$TRANSMIT)
	      FLUSH_BUF		;  Flush AUX buffer; i.e., transmit blocked DAP
				;  messages in AUX buffer only--no new message
				;  (input to NT$TRANSMIT)
	      NODECODE		;  Obtain next DAP message but omit parsing it
				;  (input to NT$RECEIVE)
	      DAP_STM		;  Remote file is in stream format
				;  (input to NT$GET, NT$PUT, and NT$UPDATE)
	      RCVQIO		;  Special receive QIO posted
	      RCVAST		;  Special receive AST delivered
	      RCVSTALL		;  Resume execution (thread) after stall
				;  (input to NT$STALLAST)
	      CVT_STM		;  File format is converted to stream on create
	      RAC_FLG		;  First-time-thru flag for NT$CHK_RAC
	      UPDATE		;  Current operation is an $UPDATE
	      ,6		;
	      DEVTRM		;  Remote device is a terminal
	      DEVCHAR		;  FAL has returned real device characteristics
				;  via DEV field in DAP Attributes message
	      FOP_FLK		;  FAL has returned FLK (file locked) attribute
				;  in DAP Attributes message
	      DEVMBX		;  Remote device is a mailbox
	      ,4		;
	      FTM		;  File transfer mode in effect
				;  (currently unused--IFB$V_SQO is used instead)
	      FTM_INIT		;  File transfer mode initial CTL msg required
	      FTM_RETRV		;  File transfer mode retrieval ($GET or $READ)
	      FTM_STORE		;  File transfer mode storage ($PUT or $WRITE)
	      ERROR		;  FAL has returned error on previous operation
				;  (currently unused)
	      FTM_EOF		;  FAL has returned EOF while engaged in
				;  file transfer mode retrieval ($GET or $READ)
	      FTM_CONT		;  DAP Continue Transfer message required to
				;  restart DAP message stream from partner
				;  (i.e., DAP Status message received while in
				;  file transfer mode retrieval or performing
				;  directory-list operation)
	      ,1		;
	      >			;
	F DEV,L			; Copy of DAP$L_DEV with bits mapped to RMS defs
	F OSTYPE,B		; Copy of DAP$B_OSTYPE
	F FILESYS,B		; Copy of DAP$B_FILESYS
	F ORG,B			; Copy of DAP$B_ORG
	  K <			; File organization:
	    SEQ,0		;  Sequential
	    REL,16		;  Relative
	    IDX,32		;  Indexed
	    >			;
	F NETSTRSIZ,B		; # bytes in /netacp_string" (if present)
	F RMS_RAC,B		; RMS RAC value on first $GET or $PUT
	F DAP_RAC,B		; DAP RAC value on first $GET or $PUT
	F DAPBUFSIZ,W		; Maximum DAP message size (determined via
				;  exchange of Configuration messages)
	F DIR_OFF,W		; Offset to directory component of returned
				;  resultant name string (used by NT0SEARCH)
	F FIL_OFF,W		; Offset to filename component of returned
				;  resultant name string (used by NT0SEARCH)
	F DISPLAY,W		; Request mask
	F BUILD,W		; Build message mask
	F MSG_MASK,L		; Currently valid DAP Extended Attributes
				;  message mask (i.e., may be received now)
	F IOSB,Q		; I/O status block for special receive
	F RCV,Q			; Receive DAP message descriptor
	F XMT,Q			; Transmit DAP message descriptor
	F AUX,Q			; Transmit DAP message descriptor used
				;  for blocking messages
	F AUX_PTR,L		; Next byte pointer for auxiliary buffer
	F THREAD,L		; IFAB/IRAB address for NT$STALLAST so it can
				;  pick up thread from last call to RM$STALL
				; ***** offset = ^X100 = 256
	F UNDERLINE,B		; ASCII code for '_' stored here
	F NODEBUF,T,127		; Node name (node spec list) buffer
				;  (FWA$Q_NODE points to it)
	F QUOTEDBUF,T,128	; Quoted string buffer
				;  (FWA$Q_QUOTED points to it)
				; ***** offset = ^X200 = 512
	F SCAN,T,32		; XAB scan block (output from NT$SCAN_XABCHN)
	  C SCAN,32		; XAB scan block length
	  S ALLXABADR,0,L	;  Address of first Allocation XAB
	  S DATXABADR,4,L	;  Address of Date and Time XAB
	  S FHCXABADR,8,L	;  Address of File Header Characteristics XAB
	  S KEYXABADR,12,L	;  Address of first Key Definition XAB
	  S PROXABADR,16,L	;  Address of Protection XAB
	  S RDTXABADR,20,L	;  Address of Revision Date and Time XAB
	  S SUMXABADR,24,L	;  Address of Summary XAB
	  S ALLXABCNT,28,B	;  Number of Allocation XABs found
	  S KEYXABCNT,29,B	;  Number of Key Definition XABs found
	  S ,30,W		;  Spare
	F TEMP,T,64		; Temporary work space (used by RM0XPFN,
				;  RM0NAMSTR, NT0DAPCRC, NT0BLKIO, NT0PUT, ...)
	  C TEMP,64		;  Temporary work space size
	  S SAVE_DESC,0,Q	; Temporary save area for descriptor
	  S SAVE_FLGS,8,L	; Temporary save area for flags
	F LNODE,Q		; Logical (node) name descriptor used by
				;  RM0NAMSTR
	F ,L,78			; Spare
	M 1
	F RCVBUF,T,544		; Receive buffer
	F XMTBUF,T,544		; Transmit buffer
	F AUXBUF,T,544		; Auxiliary transmit buffer
	  C BUFFERSIZ,544	; Receive, transmit, and auxiliary buffer size
	L BLN			; ***** offset = ^XA00 = 2560
	P 1
				; The following space is available for use until
				;  DAP message exchange begins:
	F ,L,24			; Position to next page
				; ***** offset = ^X400 = 1024
	F ,L			; Padding for expansion
	F XLTCNT,L		; Logical (node) name translation counter
	F XLTBUFFLG,L		; Translation buffer in use flag
				;  (0 means XLTBUF2 in use; -1 means XLTBUF1)
	F XLTSIZ,L		; Size of equivalence string
	F LOGNAME,Q		; Logical (node) name descriptor
	F ACS,Q			; Access control string descriptor
	F XLTBUF1,Q		; Primary translation buffer descriptor
	F XLTBUF2,Q		; Secondary translation buffer descriptor
	F INODE,Q		; Intermediate node spec descriptor used by
				;  RM0XPFN (in NODE_SPEC_LIST)
	F NCB,Q			; Network connect block buffer descriptor
	F ACSBUF,T,64		; Access control string buffer
	  C MAXACS,44		; Maximum access control string size
	F XLTBUF1,T,64		; Primary translation buffer
	F XLTBUF2,T,64		; Secondary translation buffer
	  C XLTBUFSIZ,63	; Translation buffer size
				; ***** offset = ^X500 = 1280
	F INODEBUF,T,128	; Intermediate node spec buffer
	  C INODESIZ,128	; Intermediate node spec buffer size
	F NCBBUF,T,128		; Network connect block buffer
				; ***** offset = ^X600 = 1536
	E

				; End of module
