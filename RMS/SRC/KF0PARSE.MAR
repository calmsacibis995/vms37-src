	$BEGIN	KF0PARSE,003,F$RMSOPEN0,<KNOWN FILE PARSE>

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; Facility:
;
; Abstract:
;
;
; Environment:
;	exec mode rms subroutine
;
; Author: Peter H. Lipman, Creation date: 28-SEP-1977
;
; Modified By:
;
;	V02-003	RAS0040		Ron Schaefer		26-Oct-1981
;		Implement rooted directories for concealed devices.
;		Add the root directory to the dicrectory string.
;
;	V02-002	REFORMAT	C Saether		01-Aug-1980	17:45
;
;	V0201	KDM0066		Kathleen D. Morse	22-OCT-1979	10:30
;		change pcb$w_filcnt references to jib$w_filcnt.
;
; 01	-
;--


	.SBTTL	DECLARATIONS

;
; Include Files:
;

	$CCBDEF				; channel control block definitions
	$FABDEF				; file access block definitions
	$FCBDEF				; file control block definitions
	$FWADEF				; file work area definitions
	$IFBDEF				; internal fab definitions
	$JIBDEF				; job information block definitions
	$KFIDEF				; known file entry definitions
	$NAMDEF				; name block defintions
	$PCBDEF				; process control block definitions
	$RMSDEF				; rms status definitions
	$WCBDEF				; window control block definitions

;
; Macros:
;
;
; Equated Symbols:
;

	$OFFSET	0,POSITIVE,<-		; offsets into scratch area
	ARGLIST,-			; change mode to kernel arg list
	FAB,-				; file access block address
	IFB,-				; internal fab address
	CCB,-				; channel control block address
	DEV,-				; device name string address
	DIR,-				; directory name string address
	NAM,-				; file name string address (no typ or ver)
	TYP,-				; file type string address
	ZRO,-				; zero address stopper
	STR-				; string storage
	>

	NARG=<STR-4>/4			; number of arguments

	$OFFSET	0,NEGATIVE,<-		; fp offsets in kernel mode kfiscn routine
	STATUS,-			; return status code
	PCB,-				; process control block address
	KFIMTX-				; known file mutex address
	>

;
; Own Storage:
;


	.SBTTL	KNOWN FILE SCANNER

;++
; RM$KNOWNFILE - known file scanner
;
; Calling sequence:
;
;	JSB	RM$KNOWNFILE
;
; Input Parameters:
;
;	r8  = fab address
;	r9  = ifab address
;	ifb$w_chnl(r9) = channel assigned to the device
;	r10 = file work area address (fwa)
;
; Implicit Inputs:
;
;	none
;
; Output Parameters:
;
;	r0 = status code
;	r1-r7 altered
;	fab$l_ctx(r8) = known file entry address if found
;
; Implicit Outputs:
;
;	none
;
; Completion Codes:
;
;	ss$_normal if rms should continue with the file open
;	rm$_kff - known file found, indicates to rms that it should
;		not proceed with the open. (this is a success code)
;
; Side Effects:
;
;	none
;
;--


EXPLICIT_VER:
	MOVZWL	S^#SS$_NORMAL,R0
	RSB
RM$KNOWNFILE::
	BBS	#FWA$V_EXP_VER,FWA$Q_FLAGS(R10),- ; explicit vers not known file
		EXPLICIT_VER
	MOVAB	FWA$T_XLTBUFF1(R10),R7	; address of scratch area
	MOVQ	R8,FAB(R7)		; put fab and ifb addresses in arg list
	MOVL	#NARG,ARGLIST(R7)	; number of arguments in arg list

;
; get ccb address and device name from the channel
;

	MOVAB	STR(R7),R3		; address to store device string
	MOVL	R3,DEV(R7)		; set address of device string
	BSBW	RM$GETDEVNAM		; get device name string
					; r1=ccb address, r4=binary unit #
	MOVL	R1,CCB(R7)		; save ccb address
	MOVL	DEV(R7),R2		; address of device string byte count
	BSBW	RM$GETDEVUNI		; get device unit in ascii
					; appended to string, count byte updated
	MOVL	R3,DIR(R7)		; pointer to directory string

;
; prefix the directory string for lookup with the rooted directory,
; if necessary.
;

	BBC	#FWA$V_ROOT_DIR,(R10),10$; skip if not rooted-dir
	MOVAB	FWA$T_ROOT_DIR(R10),R1	; get addr of ASCIC dir string
	MOVZBW	(R1),R0			; get count
	MOVC3	R0,(R1),(R3)		; copy string & count byte
10$:	MOVAB	FWA$Q_DIR1(R10),R6	; address of directory descriptors
	BBC	#FWA$V_GRPMBR,FWA$Q_FLAGS(R10),20$ ; branch if not grp,mbr format
	MOVB	#6,(R3)+		; size of grp, mbr format string
	BSBW	RM$PREFIX_0		; form the name from its pieces
	BSBW	RM$PREFIX_0
	BRB	80$

;
; move directory name(s) to directory string
;

20$:	EXTZV	#FWA$V_DIR_LVLS,#FWA$S_DIR_LVLS,- ; # of directory levels - 1
		FWA$Q_FLAGS(R10),-(SP)
40$:	MOVL	(R6)+,R0		; size of string
	MOVB	#^A/./,(R3)+		; periods separate the names
	MOVC3	R0,@(R6)+,(R3)		; move the dir string
	SOBGEQ	(SP),40$		; repeat for each directory descriptor
	POPR	#^M<R0>			; clean off the exhausted count
	ADDL3	#1,DIR(R7),R0		; address of first character
	SUBL3	R0,R3,R1		; size of directory string
	MOVB	R1,-(R0)		; store the size (over leading ".")

;
; now move the nam and typ strings into the scratch area
;

80$:	MOVL	R3,NAM(R7)		; address of counted nam string
	MOVAB	FWA$Q_NAME+4(R10),R6	; address of nam string in work area
	MOVZWL	FWA$W_FNAMSIZ(R10),R0	; size of nam string
	MOVB	R0,(R3)+		; store the size
	MOVC3	R0,@(R6)+,(R3)		; and the string
	MOVL	R3,TYP(R7)		; set address of counted typ string
	MOVL	(R6)+,R0		; size of typ string in work area
	MOVB	R0,(R3)+		; store the size
	MOVC3	R0,@(R6)+,(R3)		; and the string
	CLRL	ZRO(R7)			; set zero stopper for vector of string adrs
	$CMKRNL_S	B^KFISCN,ARGLIST(R7) ; scan the known file table
100$:	RSB

	.SBTTL	KFISCN - KERNEL MODE ROUTINE TO SCAN KNOWN FILE TABLE

;
; Calling sequence:
;
;	CALLG	ARGLIST,KFISCN
;
;
; Input Parameters:
;
;	fab (ap) = file access block address
;	ifb (ap) = internal file access block address
;	ccb (ap) = channel control block address
;	dev (ap) = address of counted ascii device name (actually ucb address)
;	dir (ap) = address of counted ascii directory string
;	nam (ap) = address of counted ascii file name string
;	typ (ap) = address of counted ascii file type string
;	      r4 = current pcb address (provided by change mode dispatcher)
;
; Output Parameters:
;
;	r0 = status code
;	fab$l_ctx(r8) = known file entry address if found
;	if using file id, file id set in name block, and
;		nam set in fop
;

KFISCN:
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10>
	MOVAL	G^EXE$GL_KFIMTX,R0	; address of known file mutex
	PUSHL	S^#SS$_NORMAL		; save success status return
	PUSHR	#^M<R0,R4>		; and parameters to sch$unlock
	JSB	G^SCH$LOCKR		; get the mutex for reading, no writers

;
; returns with ipl = astdel
;

	MOVAB	DEV(AP),R8		; adr of list of addresses of counted strings
	BSBW	RM$KFISCN		; find the known file entry if any
	TSTL	R7			; found a known file entry?
	BEQL	UNLOCK			; branch if not
	MOVL	FAB(AP),R8		; get fab address
	EXTZV	#KFI$V_KFISEQ,#KFI$S_KFISEQ,-
		KFI$B_KFISEQ(R7),R0	; get known file entry seq no.
	BISL3	R0,R7,FAB$L_CTX(R8)	; store kfi entry adr and seq no.
	INCL	KFI$L_USECNT(R7)	; keep utilization statistics
	BBS	#KFI$V_DONOTOPEN,KFI$B_KFICTL(R7),-
		DO_NOT_OPEN		; branch if not opening file
	BBC	#KFI$V_FILIDOPEN,KFI$B_KFICTL(R7),-
		UNLOCK			; branch if not opening by file id
	MOVL	FAB$L_NAM(R8),R0	; name block address
	BEQL	UNLOCK			; branch if none specified
	MOVL	KFI$W_FID(R7),NAM$W_FID(R0) ; use file id if available
	MOVW	KFI$W_FID_RVN(R7),NAM$W_FID_RVN(R0) ; 3rd word of file id
	BBCS	#FAB$V_NAM+<FAB$L_FOP*8>,(R8),UNLOCK ; force open by name block
UNLOCK:
	POPR	#^M<R0,R4>		; recover mutex and pcb addresses
	JSB	G^SCH$UNLOCK		; release the mutex
	POPR	#^M<R0>			; get status code
	RET				; and return

;
; do not open this file
;

DO_NOT_OPEN:
	MOVL	PCB(FP),R4		; process control block address
	MOVL	PCB$L_JIB(R4),R0	; job information block address
	TSTW	JIB$W_FILCNT(R0)	; file quota exhausted?
	BEQL	40$			; branch if yes
	MOVL	CCB(AP),R1		; channel control block address
	MOVL	KFI$L_WINDOW(R7),R2	; get window address from known file entry
	BITB	#<FAB$M_PUT ! FAB$M_UPD !- ; if file is supposed to be
		FAB$M_DEL ! FAB$M_TRN>,FAB$B_FAC(R8) ; opened for writing
	BEQL	10$
	BBC	#WCB$V_WRITE,WCB$B_ACCESS(R2),60$ ; file must be accessed for write
10$:	MOVL	R2,CCB$L_WIND(R1)	; store window in channel
	DECW	JIB$W_FILCNT(R0)	; charge the user for another open file
	INCW	WCB$W_REFCNT(R2)	; and count another sharer of the window

	ASSUME	FAB$V_CTG GE 16
	ASSUME	FAB$V_CTG LT 24
	BISB	#FAB$M_CTG@-16,FAB$L_FOP+2(R8) ; assume file is contiguous
	MOVL	WCB$L_FCB(R2),R0	; get file control block address
	BEQL	20$			; branch if not an fcp window
	TSTL	FCB$L_STLBN(R0)		; is file contiguous?
	BNEQ	15$			; branch if it is
	BICB	#FAB$M_CTG@-16,FAB$L_FOP+2(R8) ; no, clear contig bit
15$:	MOVL	IFB(AP),R1		; internal fab address
	MOVL	FCB$L_FILESIZE(R0),IFB$L_HBK(R1) ; set high block, alq will get set
	BBC	#FCB$V_MARKDEL,FCB$W_STATUS(R0),20$ ; is marked for delete
	BBSSI	#KFI$V_MARKDEL,KFI$B_KFICTL(R7),20$ ; indicate that it is
					; marked for delete in kfi entry
20$:	MOVL	#RMS$_KFF,STATUS(FP)	; set return status
	BRB	UNLOCK
40$:	MOVZWL	#SS$_EXQUOTA,STATUS(FP)
	BRB	UNLOCK
60$:	MOVZWL	#SS$_NOPRIV,STATUS(FP)	; no privilege for this operation
	BRB	UNLOCK


	.END
