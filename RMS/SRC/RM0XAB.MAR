	$BEGIN	RM0XAB,001,F$RMSOPEN0,<XAB PROCESSING ROUTINES>


;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; Facility: rms32
;
; Abstract:
;		this module contains the routines to process xabs
;		for open, display, create and modify.
;
; Environment:
;		star processor running starlet exec.
;
; Author: l f laverdure	,creation date: 27-SEP-1977
;
; Modified By:
;
;	V03-001	RAS0084		Ron Schaefer		 2-Apr-1982
;		Return RAT=CR for stream format files even if
;		the file attribute is none.
;
;	V02-022	JWH0001		Jeffrey W. Horn		07-Jan-1982
;		Add Ansi Accessibility byte to Protection XAB
;		processing.
;
;	V02-021	MCN0007		Maria del C. Nasr	12-May-1981
;		Use the old symbol for the new backup date and time XAB
;		length.
;
;	V02-020 MCN0004		Maria del C. Nasr	22-Dec-1980
;		Implement support for backup date and time XAB.
;
;	V02-019	REFORMAT	R A Schaefer	25-Jul-1980
;		Reformat the source.
;
;	V018	JAK0043		J A Krycka	17-MAR-1980
;		remove extraneous network code.
;
;	V017	PSK0008		P S Knibbe	09-JAN-1980
;		translate zero's in xabdat cdt + rdt fields to current
;		date and time. leave edt zero's alone.
;
;	V016	RAN0002		R A Newell	05-SEP-1978
;		rms32 isam modifications for handling summary, allocation,
;		and key xab's.
;
;--


	.SBTTL	DECLARATIONS

;
; Include Files:
;

;
; Macros:
;

	$ATRDEF
	$FABDEF
	$FHDDEF
	$FIBDEF
	$FWADEF
	$IFBDEF
	$XABDEF
	$XABALLDEF
	$XABDATDEF
	$XABFHCDEF
	$XABKEYDEF
	$XABPRODEF
	$XABRDTDEF
	$XABSUMDEF
	$XABTRMDEF

;
; Equated Symbols:
;

	FOP=FAB$L_FOP*8			; bit offset to fop field

;
; define case index values for xab dispatching
; (note: these must correspond to the offsets in the xab case dispatch)
;

	XBC$C_OPNFHC	== 0		; fhc xab handler for open
	XBC$C_OPNFHC1	== 1		; fhc xab handler for open (part 2)
	XBC$C_OPNPRO	== 2		; pro xab handler for open
	XBC$C_OPNDAT	== 3		; dat xab handler for open
	XBC$C_CREALL0	== 4		; all xab handler for create
					; (for seq. and rel. f.o.)
	XBC$C_EXTALL	== 5		; all xab handler for extend
	XBC$C_CREALL1	== 6		; all xab handler for create (part 2)
	XBC$C_CREPRO	== 7		; pro xab handler for create
	XBC$C_OPNRDT	== 8		; rdt xab handler for open
	XBC$C_OPNALL	== 9		; all xab handler for open
	XBC$C_CLSPRO	== 10		; pro xab handler for close
	XBC$C_CLSRDT	== 11		; rdt xab handler for close
	XBC$C_DSPFHC	== 12		; fhc xab handler for display
	XBC$C_DSPFHC1	== 13		; fhc xab handler for display (part 2)
	XBC$C_DSPALL	== 14		; all xab handler for display
	XBC$C_DSPALL1	== 15		; all xab handler for display (part 2)
	XBC$C_CREALL2	== 16		; all xab handler for create (part 3)
	XBC$C_OPNSUM3	== 17		; summary xab handler / open and display
	XBC$C_OPNALL3	== 18		; alloc xab handler / open & display
	XBC$C_OPNKEY3	== 19		; key xab handler for open and display

;
; Own Storage:
;
;
;  table with all valid xab codes for validation
;

XABTBL:	.BYTE	XAB$C_ALL,XAB$C_DAT,XAB$C_FHC,XAB$C_KEY,XAB$C_PRO,-
		XAB$C_RDT,XAB$C_SUM,XAB$C_TRM
XABTBLLEN=.-XABTBL


	.SBTTL	RM$OPEN_XAB - PROCESS XABS FOR $OPEN

;++
; RM$OPEN_XAB:	Process XABs for $OPEN, first part
; RM$OPEN_XAB1:	Process XABs for $OPEN, second part
;
;  these subroutines process the xabs for open.  they are handled in
;  two parts, the first executing before doing the access qio,
;  the other after.
;
;  this section of the module also includes the common xab chain
;  following and dispatch code.
;
; Calling sequence:
;
;	bsbw	rm$open_xab		; first part
;	bsbw	rm$open_xab1		; second part
;
; Input Parameters:
;
;	r11	impure area address
;	r10	file work page address
;	r9	ifab address
;	r8	fab address
;	r6	fib address (if any)
;	r5	next attribute address (if applicable)
;
; Implicit Inputs:
;
;	fab$l_xab and the xabs within the chain thus defined
;
; Output Parameters:
;
;	attribute list entries are added such that the requested file
;	attributes are filled in.
;	r5	updated to point to the next available attribute address
;	r4	zero if no xabs processed, otherwise non-zero
;		(in general, bit corresponding to case handler index
;		is set for each handler called)
;	r1-r3,ap	destroyed
;	r0	status code
;
; Implicit Outputs:
;
;	the various fields of the xabs are filled in.
;
; Completion Codes:
;
;	standard rms, in particular suc, xab, cod, imx and various others.
;
; Side Effects:
;
;	none
;
;--



;
; the following table provides the dispatching information for those xabs
; that are input to $open and require an entry in the files attribute list.
; the entries consist of the xab code, its length, and its case index.
;

OPNXAB_ARGS:
	.BYTE	XAB$C_FHC,XAB$C_FHCLEN,XBC$C_OPNFHC
	.BYTE	XAB$C_PRO,XAB$C_PROLEN,XBC$C_OPNPRO
	.BYTE	XAB$C_DAT,XAB$C_DATLEN_V2,XBC$C_OPNDAT
	.BYTE	XAB$C_RDT,XAB$C_RDTLEN,XBC$C_OPNRDT
	.BYTE	0			; end of table flag

;
; the following table specifies those xabs to open that require processing
; after the access qio has been performed.
;

OPNXAB1_ARGS:
	.BYTE	XAB$C_FHC,XAB$C_FHCLEN,XBC$C_OPNFHC1
	.BYTE	XAB$C_ALL,XAB$C_ALLLEN,XBC$C_OPNALL
	.BYTE	0

;
; entry point for processing open xabs (part 2)
;

RM$OPEN_XAB1::
	MOVAB	OPNXAB1_ARGS,AP		; set arg list addr
	BRB	XAB_SCAN		; and go process

;
; entry point for processing open xabs (part 1)
;

RM$OPEN_XAB::
	MOVAB	OPNXAB_ARGS,AP		; set arg list addr

;
; and fall thru to xab_scan
;


	.SBTTL	XAB_SCAN - COMMON XAB DISPATCH ROUTINE

;
;++
; RM$XAB_SCAN:	Scan XAB chain for processing
;
; this routine scans the xab chain for a match on any of those xabs
; specified in the argument list.  if an xab is found it is probed
; and dispatch is made to the routine indicated by the argument list
; case index.
;
;--
;

RM$XAB_SCAN::
XAB_SCAN:
	CLRL	R4			; clear uniqueness vector
	MOVL	FAB$L_XAB(R8),R3	; get 1st xab address
CHKXAB:	BEQL	SUCXIT			; all done if none
	IFNORD	#XAB$L_NXT+4,(R3),ERRXAB,IFB$B_MODE(R9) ; probe readability
	MOVL	AP,R2			; get address of scan table
10$:	CMPB	(R2)+,XAB$B_COD(R3)	; xab code match this entry?
	BEQL	GOTXAB			; branch if yes
	ADDL2	#2,R2			; next table entry
	TSTB	(R2)			; end of table?
	BNEQ	10$			; branch if not

;
; found no match in the table.
; check against all xab codes for at least valid and if so ignore it.
;

	LOCC	XAB$B_COD(R3),#XABTBLLEN,XABTBL ; known code?
	BEQL	ERRCOD			; branch if not
NXTXAB:	MOVL	XAB$L_NXT(R3),R3	; get next xab in chain
	BRB	CHKXAB			; go process

;
; found a match in the xab table.
; check the length, probe it, and dispatch to the handler.
;

GOTXAB:	MOVZBL	XAB$B_BLN(R3),R0	; get xab length field
	CMPB	R0,(R2)+		; is length < min.?
	BLSSU	ERRXAB			; branch if yes
	PROBEW	IFB$B_MODE(R9),R0,(R3)	; probe writeability
	BEQL	ERRXAB			; branch if no access
	PUSHAB	NXTXAB			; push return pc
	CASE	TYPE=B,SRC=(R2),-	; and go process
	DISPLIST=<XABOPNFHC,XABOPNFHC1,XABOPNPRO,XABOPNDAT,-
		XABCREALL0,RM$EXTEND_XAB,XABCREALL1,XABCREPRO,-
		XABOPNRDT,XABOPNALL,XABCLSPRO,XABCLSRDT,-
		XABDSPFHC,XABDSPFHC1,XABDSPALL,XABDSPALL1,-
		XABCREALL2,RM$ISUMO3,RM$IALLO3,RM$IKEYO3>

;
; (note: should never fall thru)
;
; dispatch with standard r8 thru r11 and
;	r6 = fib address
;	r5 = addr to build next attribute list entry
;	r4 = xab uniqueness bit vector
;	r3 = xab address
;
; must return with r4 and r5 updated as necessary and only r0 thru r2
; modified.  note: ap must not be modified.
;
; error routine should clean return pc from stack and rsb with error code in r0.
;

SUCXIT:	RMSSUC
	RSB

;
; handle errors.  problem could be:
;
;	- non-accessible xab
;	- invalid xab length
;

ERRXAB:	$PSECT_BR	L$RMS0
	RMSERR	XAB			; declare error
SETSTV:	MOVL	R3,FAB$L_STV(R8)	; give address
	RSB
	$PSECT_RESTORE

;
; handle invalid xab code error
;

ERRCOD:	$PSECT_BR	L$RMS0
	RMSERR	COD
	BRB	SETSTV
	$PSECT_RESTORE

;
; handle invalid duplicate xab error
;

ERRIMX:	$PSECT_BR	L$RMS0
RM$ERRIMX::
	RMSERR	IMX
CLNSTK:	TSTL	(SP)+			; remove return pc from stack
	BRB	SETSTV
	$PSECT_RESTORE

	.SBTTL	FHC XAB PROCESSING ROUTINES

;++
; XABDSPFHC:	Process file header XAB for $DISPLAY, part 1
; XABOPNFHC:	Process file header XAB for $OPEN and $CREATE, part 1
; XABDSPFHC1:	Process file header XAB for $DISPLAY. part 2
; XABOPNFHC1:	Process file header XAB for $OPEN and $CREATE, part 2
;
;  xab routine to process the file header characteristics xab for $open,
;  $create, and $display
;
;  called in two parts.  the first part merely builds an attribute list
;  entry to read the record attributes into the user's xab.
;
;  the second part fills in the sbn and swaps the ebk and hbk fields.
;--

;++
;
; entry point for $display processing. (must read in statistics block)
;
;--

XABDSPFHC:
	MOVW	#4,(R5)+		; read only sbn longword
	MOVW	#ATR$C_STATBLK,(R5)+	;   of statistics block
	MOVAL	XAB$L_SBN(R3),(R5)+	; read directly into xab

;++
;
; entry point for $open and $create processing. (read in record attributes)
;
;--

XABOPNFHC:
	CMPB	#IFB$C_IDX,IFB$B_ORGCASE(R9) ; if this is not an indexed file
	BNEQ	5$			;    process xab
	TSTB	XAB$B_AID(R3)		; if not 1st area xab
	BNEQ	10$			;    skip processing
5$:	BBSS	#XBC$C_OPNFHC,R4,ERRIMX	; flag xab seen, error

;
; if already one
;

	MOVW	#32,(R5)+		; return all 32 bytes
	MOVW	#ATR$C_RECATTR,(R5)+	; read record attributes
	MOVAL	XAB$B_RFO(R3),(R5)+	; address to read attr.s
	CMPB	FAB$B_RFM(R8),#FAB$C_FIX ; fixed rec. format?
	BEQL	10$			; branch if yes
	MOVW	XAB$W_LRL(R3),IFB$W_LRL(R9); copy longest rec. len.

;
; in case this is $create
;

10$:	RSB

;++
;
;  part 2 (called after the access qio)
;
;--

;++
;
; entry point for $open
;
;--

XABOPNFHC1:
	MOVL	FWA$L_SBN(R10),XAB$L_SBN(R3) ; set starting lbn

;++
;
; entry point for $display
;
;--

XABDSPFHC1:
	ROTL	#16,XAB$L_SBN(R3),XAB$L_SBN(R3) ; swap halves of start lbn
	ROTL	#16,XAB$L_EBK(R3),XAB$L_EBK(R3) ; swap halves of ebk
	BNEQ	10$			; branch if non-zero
	ASSUME	FAB$C_SEQ EQ 0
	TSTB	IFB$B_ORGCASE(R9)	; sequential file org?
	BEQL	10$			; branch if yes
	ADDL3	#1,IFB$L_HBK(R9),XAB$L_EBK(R3) ; set ebk from hbk + 1
10$:	MOVL	IFB$L_HBK(R9),XAB$L_HBK(R3) ; set hbk from ifab

;
; force stream format files to appear to have RAT non-null,
; even if they don't.
;
	ASSUME	FAB$C_STM LT FAB$C_STMLF
	ASSUME	FAB$C_STM LT FAB$C_STMCR
	ASSUME	FAB$V_ORG EQ 4
	ASSUME	FAB$S_ORG EQ 4

	EXTZV	#0,#4,XAB$B_RFO(R3),R0	; extract record format
	CMPB	R0,#FAB$C_STM		; stream format?
	BLSSU	30$			; nope
	BITB	#<FAB$M_CR!FAB$M_FTN!FAB$M_PRN>,-
		XAB$B_ATR(R3)		; carriage control already set?
	BNEQ	30$			; ok
	BISB2	#FAB$M_CR,XAB$B_ATR(R3)	; force RAT=CR
30$:	RSB

	.SBTTL	DAT XAB ROUTINE

;++
;XABOPNDAT:  Process the date and time xab for $open, $create, & $display.
;
; in all three cases attribute list entries are made for creation date & time,
; expiration date & time, revision date & time, and revision count.
;
; !!! \note: this routine should be modified when a single attribute can
;	      handle all four.\ !!!
;
;--

XABOPNDAT:
	BBSS	#XBC$C_OPNDAT,R4,ERRIMX	; flag xab seen, error

;
; if already one
;
; make attrbute list entries for creation & expiration date & time
;

	MOVW	#8,(R5)+		; date length
	MOVW	#ATR$C_CREDATE,(R5)+	; xfer creation date

	BISL3	XAB$L_CDT0(R3),XAB$L_CDT4(R3),R0 ; is date 0?
	BNEQU	10$			; no - use date
	$GETTIM_S	TIMADR=XAB$Q_CDT(R3) ; yes - use current date
10$:	MOVAL	XAB$Q_CDT(R3),(R5)+	; xfer address

;
; don't default expiration date
;

	MOVW	#8,(R5)+		; date length
	MOVW	#ATR$C_EXPDATE,(R5)+	; xfer expiration date
	MOVAL	XAB$Q_EDT(R3),(R5)+	; xfer address

;
; Only process the backup date and time if the length of the XAB block
; includes it.  Do not default it.
;

	CMPB	XAB$B_BLN(R3),#XAB$C_DATLEN ; does it include backup date?
	BLSSU	20$			; branch, if it does not
	MOVW	#8,(R5)+		; date length
	MOVW	#ATR$C_BAKDATE,(R5)+	; transfer backup date attribute code
	MOVAL	XAB$Q_BDT(R3),(R5)+	; transfer address
20$:	BRB	REV_DATE_COUNT		; make attr entries for revision
					; date & count and return


	.SBTTL	RDT XAB ROUTINES

;++
; XABOPNRDT: process the revision date and time xab for $open, $create, & $display.
; XABCLSRDT: process the revision date and time xab for $close
;
;  in all three cases attribute list entries are made for revision date & time
;  and revision count.
;
;  !!! \note: this routine should be modified when a single attribute can
;	      handle both.\ !!!
;
;--

XABOPNRDT:
	BBCS	#XBC$C_OPNRDT,R4,10$	; flag xab seen,
	BRW	ERRIMX_BR1		; error if already set
10$:
REV_DATE_COUNT:
	MOVW	#8,(R5)+		; date length
	MOVW	#ATR$C_REVDATE,(R5)+	; xfer revision date

	BISL3	XAB$L_RDT0(R3),XAB$L_RDT4(R3),R0 ; is date 0 ?
	BNEQU	30$			; no - use it
	$GETTIM_S	TIMADR=XAB$Q_RDT(R3) ; yes - get current date
30$:	MOVAL	XAB$Q_RDT(R3),(R5)+	; xfer address

	MOVW	#2,(R5)+		; revision count length
	MOVW	#ATR$C_ASCDATES,(R5)+	; revision count attribute code
	MOVAW	XAB$W_RVN(R3),(R5)+	; address to xfer rvn
	RSB

;++
; routine to process rdt xab for $close.
;
; same processing as for $open rdt except that attribute list entries are
; built on the stack.
;
;--

XABCLSRDT:
	BBSS	#XBC$C_CLSRDT,R4,ERRIMX_BR1 ; flag xab seen , error

;
; if already one
;

	SUBL2	#8,SP			; create 8 bytes on stack
	MOVL	SP,R5			; build attr. list entries here
	MOVQ	8(SP),-(SP)		; return addrs to bottom of stk
	BRB	REV_DATE_COUNT		; build attr list entries

	.SBTTL	PRO XAB ROUTINES

;++
; XABOPNPRO: Process the pro xab for $open and $display
;
; attribute list entries to read the file's protection & owner uic are made
;
;--

XABOPNPRO:
	BBSS	#XBC$C_OPNPRO,R4,ERRIMX_BR1 ; flag xab seen, error

;
; if already one
;

	BSBB	UIC			; make uic attr. list entry
	BSBB	ACC			; make ansi accessibility entry

;
; make protection attribute list entry
;

PRO:	MOVW	#2,(R5)+		; length of protection attr.
	MOVW	#ATR$C_FPRO,(R5)+	; xfer file protection
	MOVAL	XAB$W_PRO(R3),(R5)+	; xfer directly to/from xab
	RSB

;
; put uic attribute code into attribute list
;

UIC:	MOVW	#4,(R5)+		; uic length
	MOVW	#ATR$C_UIC,(R5)+	; xfer file owner uic
	MOVAL	XAB$L_UIC(R3),(R5)+	; addr to xfer uic
	RSB

;
; put ansi accessibility attribute code into attribute list
;

ACC:	MOVW	#1,(R5)+		; length of accessibility attr
	MOVW	#ATR$C_HDR1_ACC,(R5)+	; xfer ansi accessibility byte
	MOVAL	XAB$B_MTACC(R3),(R5)+	; addr to xfer accessibility
	RSB


;++
; XABCREPRO: Process the pro xab for $create
;
; checks for default uic (i.e., 0) and if found then need merely read
; uic if cif set, else don't process uic, allowing acp default.
;
; also check for default pro (i.e., -1  -  no access to anyone), and if found
; use process default file protection
;
;--

XABCREPRO:
	BBSS	#XBC$C_CREPRO,R4,ERRIMX_BR1 ; flag xab seen, error

;
; if already one
;
; handle uic
;

	TSTL	XAB$L_UIC(R3)		; uic = 0?
	BNEQ	20$			; branch if not
	BBC	#FAB$V_CIF+FOP,(R8),40$	; branch unless cif set
	BSBB	UIC			; specify uic read
	MOVW	#ATR$C_UIC_RO,-6(R5)	; make sure uic not written

;
; if file created
;

	BRB	40$
20$:	BSBB	UIC			; use non-zero uic

;
; handle ansii accessibility
;

40$:	TSTB	XAB$B_MTACC(R3)		; any specified?
	BEQL	50$			; branch if yes
	BSBB	ACC
50$:

;
; handle protection
;

PRO_DEFAULT:
	ADDW3	#1,XAB$W_PRO(R3),R0	; is pro spec = -1?
	BNEQ	60$			; branch if not
	MOVW	@#PIO$GW_DFPROT,XAB$W_PRO(R3) ; yes - set default
60$:	BRB	PRO

;
; extended branch for error
;

ERRIMX_BR1:
	BRW	ERRIMX


;++
; XABCLSPRO:	Process the pro xab for $close
;
; checks for default uic (i.e., 0) and if found then don't process uic
;
; also check for default pro (i.e., -1  -  no access to anyone), and if found
; use process default file protection
;
;--

XABCLSPRO:
	BBSS	#XBC$C_CLSPRO,R4,ERRIMX_BR1 ; flag xab seen, error

;
; if already one
;
; handle uic
;

	TSTL	XAB$L_UIC(R3)		; uic = 0?
	BEQL	10$			; branch if yes
	MOVL	SP,R5			; point to attr. list entry on stack
	MOVQ	(SP),-(SP)		; create 8 bytes on stack

;
; for uic attribute entry
;

	BSBB	UIC			; specify uic write
10$:

;
; process pro
;

	MOVL	SP,R5			; point to attr. list entry on stack
	MOVQ	(SP),-(SP)		; create 8 free bytes on stack
	BRB	PRO_DEFAULT		; go process protection
	.SBTTL	ALL XAB ROUTINES

;++
; XABDSPALL:	Process allocation xab for $display, part 1
; XABOPNALL:	Process allocation xab for $open
; XABDSPALL:	Process allocation xab for $display, part 2
;
; sets the alq, deq, bkz, and aop (ctg and cbt bits only) fields of the xab
;
;--

;++
;
; entry point for $display to cause the user characteristics bits to
; be read into the xab.
;
;--

XABDSPALL:
	CMPB	#IFB$C_IDX,IFB$B_ORGCASE(R9) ; indexed file?
	BNEQ	10$			; branch if not
	TSTB	XAB$B_AID(R3)		; is this the first area id?
	BNEQ	20$			; branch if not
10$:	BBSS	#XBC$C_DSPALL,R4,ERRIMX_BR1 ; error is xab already seen
	MOVW	#1,(R5)+		; just read 1st byte
	MOVW	#ATR$C_UCHAR,(R5)+	; user char. attr. code
	MOVAB	XAB$B_AOP(R3),(R5)+	; addr for read
20$:	RSB

;++
;
; entry point for $open processing
;
;--

XABOPNALL:
	MOVB	FWA$W_UCHAR(R10),XAB$B_AOP(R3) ; set aop byte from user char.

;++
;
; entry point for 2nd part of $display processing
;
;--

XABDSPALL1:
	ASSUME	FHD$V_CONTIG EQ XAB$V_CTG
	ASSUME	FHD$V_CONTIGB EQ XAB$V_CBT
	BICB2	#255 \ <XAB$M_CTG!XAB$M_CBT>,XAB$B_AOP(R3) ; clear other bits
	CMPB	#IFB$C_IDX,IFB$B_ORGCASE(R9) ; indexed file?
	BEQL	IDXRET			; branch if indexed
	MOVW	IFB$W_DEQ(R9),XAB$W_DEQ(R3); set deq
	MOVB	IFB$B_BKS(R9),XAB$B_BKZ(R3); set bkz
SETALQ:	MOVL	IFB$L_HBK(R9),XAB$L_ALQ(R3); set alq
IDXRET:	RSB


;++
; XABCREALL1:	Process allocation xab for $create, part 1
; XABCREALL2:	Process allocation xab for $create, part 2
;
; assumes that this is area 0 (already checked by xabcreall0).
; uses the allocation xab parameters to set up the fib,  whose address
; must be in r6.
;
;--

XABCREALL1:
	BBSS	#XBC$C_CREALL1,R4,50$	; branch if not area 0 xab
	PUSHL	R6			; save fib address
	MOVL	R6,R1			; copy it to r1
	MOVL	R3,R6			; xab address to r6
	BSBW	RM$SET_XABALL		; set up fib from xab
	BLBC	R0,XABALL_ERR		; branch if bad values
	MOVL	(SP)+,R6		; restore fib addr
	BBC	#FIB$V_ALCONB,FIB$W_EXCTL(R6),10$ ; branch if not cbt
	BBCS	#FHD$V_CONTIGB,FWA$W_UCHAR(R10),50$ ; set cbt file attr. & branch
10$:	BBC	#FIB$V_ALCON,FIB$W_EXCTL(R6),50$ ; branch if not ctg
	BISB2	#1@FHD$V_CONTIG,FWA$W_UCHAR(R10) ; set ctg file attribute
50$:	RSB

;

XABALL_ERR:
	BRW	CLNSTK			; extended branch to get out

;++
;
; xabcreall2 routine to process filling in of alq field with actual
; first extent size on $create.
;
;--

XABCREALL2:
	CMPB	#IFB$C_IDX,IFB$B_ORGCASE(R9) ; indexed file?
	BNEQ	5$			; branch if not
	TSTB	XAB$B_AID(R3)		; first one?
	BEQL	5$			; branch if so
	RSB				; return
5$:	BRB	SETALQ

	.SBTTL	RM$SETALLOC - ROUTINE TO HANDLE ALLOC XAB FOR SEQ. & REL. F.O.

;++
; RM$SETALLOC:	Process the allocation xab for the sequential and relative
;		file organizations.
;
; XABCREALL0:	routine called by xab_scan if an allocation xab is found
;
; if an allocation xab is found, it is checked for defining area 0 only and
; it is used to provide the alq, deq, and bks fields, these being copied to
; the fab for later processing.  placement information is processed when the
; file creation is actually done.
;
; the entire xab chain is checked for validity.
;
;--

CREXAB0_ARGS:
	.BYTE	XAB$C_ALL,XAB$C_ALLLEN,XBC$C_CREALL0,0

RM$SETALLOC::
	MOVAB	CREXAB0_ARGS,AP		; set arg list addr
	BSBW	XAB_SCAN		; go scan xab chain

;
; use fab deq field to set both deq and run-time deq fields of ifab
;

	MOVW	FAB$W_DEQ(R8),IFB$W_DEQ(R9)
	MOVW	FAB$W_DEQ(R8),IFB$W_RTDEQ(R9)
	RSB

;++
; xabcreall0 routine called by xab_scan if an allocation xab is found
;
; verify this is the only allocation xab and that its aid = 0.
; copy the alq, deq, and bkz fields from the xab to the fab.
;
;--

XABCREALL0:
	CMPB	#IFB$C_IDX,IFB$B_ORGCASE(R9); indexed file?
	BNEQ	5$			; branch if not
	TSTB	XAB$B_AID(R3)		; is this the first area id?
	BNEQ	10$			; branch if not
5$:	BBSS	#XBC$C_CREALL0,R4,ERRIMX_BR ; error is all. xab already seen
	TSTB	XAB$B_AID(R3)		; aid = 0?
	BNEQ	ERRAID			; branch if not (error)
	MOVL	XAB$L_ALQ(R3),FAB$L_ALQ(R8) ; copy alq to fab
	MOVW	XAB$W_DEQ(R3),FAB$W_DEQ(R8) ; and deq
	CMPB	XAB$B_BKZ(R3),#32	; bkz in range?
	BGTRU	ERRBKZ			; branch if not
	MOVB	XAB$B_BKZ(R3),FAB$B_BKS(R8) ; and bks
	ASSUME	FAB$C_SEQ EQ 0
	TSTB	IFB$B_ORGCASE(R9)	; sequential file org?
	BEQL	10$			; branch if yes
	MOVB	XAB$B_BKZ(R3),IFB$B_BKS(R9) ; set ifab bks from xab bkz
10$:	RSB				; continue xab scan for validity

;

ERRIMX_BR:
	BRW	ERRIMX			; extended branch to handle error

;
; handle invalid aid field error (not = 0)
;

ERRAID:	$PSECT_BR	L$RMS0
RM$ERRAID::
	RMSERR	AID
	BRB	CLNSTK			; load stv with xab addr and return
	$PSECT_RESTORE

;
; handle invalid bkz field error
;

ERRBKZ:	$PSECT_BR	L$RMS0
	RMSERR	BKZ
	BRB	CLNSTK
	$PSECT_RESTORE


	.END
