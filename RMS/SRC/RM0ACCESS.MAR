	$BEGIN	RM0ACCESS,050,F$RMSOPEN0,<FILE ACCESS/DEACCESS ROUTINES>

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
; Facility: rms32
;
; Abstract:
;	this module performs the file access and
;	de-access fcp functions.
;
; Environment:
;		star processor running starlet exec.
;
; Author: L F Laverdure,	 creation date: 10-MAR-1977
;
; Modified By:
;
;	V02-050	KEK0018		K. E. Kinnear		3-Feb-1982
;		Replace FWA$C_RNSBUFSIZ with the real total size
; 		of the concatenated NAME,TYPE, and VER buffer sizes.
;
;	V02-049	CDS0030		C Saether		20-Dec-1981
;		Allow deferred write for shared files.
;
;	V02-048	KPL0009		Peter Lieberwirth	17-Dec-1981
;		Provide support for execute only command files by having ACP
;		check for execute protection in SUPER mode as well as EXEC
;		and KERNEL.
;
;	V02-047	CDS0029		C Saether		16-Sep-1981
;		Allow BIO, BRO with MSE for rel, isam.  (same as pre 040).
;
;	V02-046	CDS0028		C Saether		14-Sep-1981
;		Clear NORECLK before UPI check.
;
;	V02-045	CDS0027		C Saether		 6-Sep-1981
;		Init BLB queue header when noreclk is cleared.
;
;	V02-044	CDS0026		C Saether		 4-Sep-1981
;		NORECLK now set by fseti - clear if locking.
;
;	V02-043	CDS0025		C Saether		31-Aug-1981
;		Always set noreclk.
;
;	V02-042	CDS0024		C Saether		23-Aug-1981
;		Init queue header and allocate a BLB if sharing.
;		Fix bug so that SFSB is allocated for 512 fix len.
;
;	V02-041	KPL0008		Peter Lieberwirth	15-Jul-1981
;		Allocate an SFSB in all cases, including sequential.
;
;	V02-040	KPL0007		Peter Lieberwirth	28-Apr-1981
;		Allocate an SFSB via RM$INIT_SFSB if necessary.
;
;	V02-039	CDS0023		C Saether	24-Feb-81	8:30
;		Check fixed length against RSIZ record attribute (ifb$w_lrl)
;		instead of max rec size (ifb$w_mrs).
;
;	V02-038	CDS0022		C Saether	23-Dec-80	15:10
;		Reverse order of attributes on stack so that rewriting
;		record attributes occurs before protection changes.
;
;	V02-037	REFORMAT	C Saether	30-Jul-80	20:20
;
;	V036	JAK0020		J A Krycka	09-Nov-1979	12:00 
;		release 2.0 clean-up.
;
;	V034	CDS0021		C Saether	19-Oct-1979	15:15
;		make sharing checks before calling rm$open_shared
;		this is for sharing of fix len seq files
;		change orgcase to relative after checks, set ifb$v_seqfil
;		set ifb$b_bks and ifb$l_dvbn to work
;
;	V033	LFL0001		L F Laverdure	14-Feb-1979	 9:40
;		update comments only regarding register usage.
;
;	V032	RAN0003		R A Newell	19-Dec-1978	16:35
;		file sharing code enhancements.
;--
;


	.SBTTL	DECLARATIONS

;
; Include Files:
;

;
; Macros:
;

	$FABDEF
	$FWADEF
	$IFBDEF
	$FIBDEF
	$FHDDEF
	$ATRDEF
	$IODEF
	$PSLDEF
	$DEVDEF
	$XABPRODEF
	$XABRDTDEF
	$IMPDEF

;
; Equated Symbols:
;

	FOP=FAB$L_FOP*8

;
; Own Storage:
;


	.SBTTL	RM$ACCESS - PERFORM FCP ACCESS FUNCTION

;++
; RM$ACCESS - perform file access function
;
; This routine sets up the access control word of the fib
; from the various user specifications, builds the
; attribute list to read in the record attributes and
; statistics block, builds the qio parameter list on
; the stack using the filename descriptor, issues
; the qio to the acp to perform the access,
; and finally initializes the ebk and hbk fields of
; the ifab.
;
; Calling sequence:
;
;	BSBW	RM$ACCESS
;
; Input Parameters:
;
;	r11	impure area address
;	r10	fwa address
;	r9	ifab addresss
;	r8	fab address
;
; Implicit Inputs:
;
;	fwa$t_fibbuf (fid & did set as required, remainder zero)
;	ifb$v_wrtacc
;	ifb$b_fac
;	fab$l_fop
;	ifb$l_chnl
;	fwa$l_atrladr
;	fwa$q_name
;
; Output Parameters:
;
;	r0	status code
;	r1-r7,ap destroyed
;
;
; Implicit Outputs:
;
;	ifb$v_accessed set
;	the record attributes area of the ifab is initialized
;	the record string is set (fwa$q_rns) over-writing
;		the filename string
;	ifb$l_ios
;	fab$v_ctg set if file contiguous, else cleared
;	fab$l_stv set to system error code on failure
;
; Completion Codes:
;
;	standard rms including suc, fnf, rer, wer, flk, prv,
;	and acc.
;
; Side Effects:
;
;	may have switched to running at ast level.
;	all user structures except fab must be reprobed.
;--


RM$ACCESS::
	$TSTPT	ACCESS
	BBS	#DEV$V_DIR,IFB$L_PRIM_DEV(R9),RMACC ; branch if files-oriented
	BBS	#FWA$V_NODE,(R10),NTACC	; branch if network function
	RMSSUC				; show success
	RSB				; return to caller

;++
;
;  perform network access function
;
;--

NTACC:	$PSECT_BR	NF$NETWORK
	BBS	#IFB$V_DAP,(R9),10$	; branch if network file access
	BITL	#<<FAB$M_KFO>!-		; disallow kfo and ufo options
		<FAB$M_UFO>!-		;  if task-to-task (to prevent
		0>,FAB$L_FOP(R8)	;  '$run node::"task=abc"'
	BNEQ	50$			; branch if either bits set
10$:	BSBW	NT$ACCESS		; establish logical link
	BLBC	R0,60$			; branch on failure
	BBC	#FAB$V_SQO+FOP,(R8),20$	; branch if sqo not specified
	SSB	#IFB$V_SQO,(R9)		; and save bit in ifab
20$:	BBS	#IFB$V_NSP,(R9),30$	; branch if task-to-task oper.
	BSBW	NT$OPEN			; open file via remote fal
	BLBC	R0,40$			; branch on failure
30$:	SSB	#IFB$V_NORECLK,(R9)	; say no record locking needed
	RMSSUC				; show success
40$:	RSB				; return to caller
50$:	BRW	NT$SUP_FOP		; return to caller with rms$_sup
60$:	BRW	ERRACCESS		; branch aid
	$PSECT_RESTORE

RMACC:	BSBW	RM$CREACC_SET1		; perform first part of setups
	BSBW	RM$OPEN_XAB		; go process rms open xabs
	BLBC	R0,EXIT			; exit if problems
	BSBW	RM$CREACC_SET2		; finish setups

;
; set the qio function code and go access the file
;

10$:	MOVZBL	#IO$_ACCESS!IO$M_ACCESS,R0 ; function code
	BSBW	RM$FCPFNC		; do the access
	BLBS	R0,RM$SETHBK		; continue on success
	BRW	ERRACCESS		; branch on failure


;++
; RM$SETHBK - entry for "create if" that becomes an open
;
; check the file for contiguous and if so set the ctg bit in fop,
; then pick up highest allocated vbn from the statistics block
; and copy to ifab, overwriting the hi vbn field of
; the record attributes. note that the hi-and lo-order words of this vbn
; are reversed on disk and hence are read in reverse order.
; rearrange to give an understandable longword hi vbn. do same for
; eof vbn.
;
;  entry point for "create if" turned into an open
;
;
;  set fop output bits according to file attributes
;
;--

RM$SETHBK::
	EXTZV	#IFB$V_ORG,#IFB$S_ORG,IFB$B_RFMORG(R9),R1 ; get org
	MOVB	R1,IFB$B_ORGCASE(R9)	; into separate ifab byte
	BICL2	#<FAB$M_CTG!FAB$M_CBT!FAB$M_RCK!FAB$M_WCK>,-
		FAB$L_FOP(R8)		; clear fop output bits
	BBC	#FHD$V_CONTIG,FWA$W_UCHAR(R10),10$ ; branch if file not ctg.
	SSB	#FAB$V_CTG+FOP,(R8)	; set the ctg bit
10$:	BBC	#FHD$V_CONTIGB,FWA$W_UCHAR(R10),20$ ; branch if not ctg best try
	SSB	#FAB$V_CBT+FOP,(R8)	; set ctg best try in fop
20$:	BBC	#FHD$V_READCHECK,FWA$W_UCHAR(R10),30$ ; branch if no read checking
	SSB	#FAB$V_RCK+FOP,(R8)	; set fop rck bit
30$:	BBC	#FHD$V_WRITCHECK,FWA$W_UCHAR(R10),40$ ; branch if no write checking
	SSB	#FAB$V_WCK+FOP,(R8)	; set fop wck bit
40$:
	ROTL	#16,FWA$L_HBK(R10),IFB$L_HBK(R9) ; swap words of hbk

;
;  finish up xab processing
;

	BSBW	RM$OPEN_XAB1		; finish up xab processing



;++
; RM$SETEBK - check for shared access
;
;  entry point to swap the words of eof block and
;  set ifab bookeeping bit saying file accessed
;
;  input:
;	r9	ifab address
;  output:
;	ifb$v_accessed - set
;	ifb$l_ebk      - words swapped
;
;  furthermore, if this is not a sequential file, the shared ifab processing
;  is performed, if needed, and thus the following additional inputs and
;  outputs are required.
;
;  inputs:
;	r11	impure area address
;	r10	fwa address
;	r8	fab address
;  outputs:
;	r0	status
;	r1-r7, ap destroyed
;	the shared ifab is set up as required for the access
;--

RM$SETEBK::
	SSB	#IFB$V_ACCESSED,(R9)	; declare file accessed
	ROTL	#16,IFB$L_EBK(R9),IFB$L_EBK(R9) ; swap words of ebk
	INCW	IFB$W_AVLCL(R9)		; Note buffer available (used for FWA)
	BBC	#IFB$V_NORECLK,(R9),CHKSHR ; not set, then check sharing
EXIT:	RSB				; no rec lock, then just return
SETNORECLK:
	BBCS	#IFB$V_NORECLK,(R9),EXIT ; set NORECLK and exit. (always clear)
CHKSHR:

;
; check whether sharing is required
;

	BBS	#FAB$V_NIL,FAB$B_SHR(R8),SETNORECLK ; nil spec'd, exit
	ASSUME	FAB$C_SEQ EQ 0
	TSTB	IFB$B_ORGCASE(R9)	; is this sequential org?
	BEQL	CHKSEQSHR		; special checks for 512 fix len recs.
SHARE:
	BSBW	RM$INIT_SFSB		; get parent lock for record and
					; bucket locks.
	BLBC	R0, EXIT		; exit on error.
	PUSHL	R10			; Save FWA address.
	MOVL	R9, R10			; ALBLB wants ifab in r10.
	BSBW	RM$ALBLB		; allocate a BLB to go with BDB (FWA).
	POPL	R10			; Restore FWA address.
	BLBC	R0, EXIT		; exit on error.
	BITB	#FAB$M_SHRGET!FAB$M_SHRPUT -; any inter-process sharing?
		!FAB$M_SHRDEL!FAB$M_SHRUPD,-
		FAB$B_SHR(R8)
	BEQL	EXIT			; EQL then only multi-streaming.

;
; At this point inter-process sharing has been specified.  Only allow
; block i/o access if UPI is set.  Note also that the shared file lock
; will be retained until close.
;

	BITB	#FAB$M_BIO!FAB$M_BRO,FAB$B_FAC(R8) ; any form of block i/o?
	BNEQ	10$			; NEQ means block i/o.
	BRW	RM$OPEN_SHARED		; branch to inter-process shared open.
10$:	BBS	#FAB$V_UPI,FAB$B_SHR(R8),EXIT ; Ok if UPI set.
UPIERR:	RMSERR	UPI			; Can't share block i/o w/o UPI.
	RSB

CHKSEQSHR:

;
; want sharing on sequential file - make a few more checks
;

	BBS	#FAB$V_UPI,FAB$B_SHR(R8),SETNORECLK ; Branch if UPI.
	BITB	#FAB$M_BIO!FAB$M_BRO,FAB$B_FAC(R8) ; any form of block i/o?
	BNEQ	UPIERR			; UPI must be set for block i/o.
	$PSECT_BR	F$RMSOPEN23
	ASSUME	FAB$C_SEQ EQ 0
	CMPB	IFB$B_RFMORG(R9),#FAB$C_FIX ; only for fixed length recs
	BNEQ	SHRERR			; neq sorry
	CMPW	IFB$W_LRL(R9),#512	; 512 byte records only
	BNEQ	SHRERR			; sorry, can't share
	MOVB	#1,IFB$B_BKS(R9)	; bucket size is one
	ASSUME	<IFB$C_SEQ + 1> EQ IFB$C_REL
	INCB	IFB$B_ORGCASE(R9)	; presto - now you're relative
	MOVL	#1,IFB$L_DVBN(R9)	; no prologue for seq file
	SSB	#IFB$V_SEQFIL,(R9)	; note this is really seq file
	BRW	SHARE			; finish shared open
SHRERR:
	RMSERR	SHR			; can't do that
	RSB				; get back
	$PSECT_RESTORE

;++
;
;  handle access failure
;
;--

ERRACCESS:
	$PSECT_BR	L$RMS0
	RMSERR	ACC,R1			; default error code
	BRW	RM$MAPERR		; go map error code to rms
					; and return to caller
	$PSECT_RESTORE

	.SBTTL	RM$CREACC_SET - PERFORM FCP CREATE AND ACCESS SETUPS

;++
; RM$CREACC_SET1 - access, protection, datacheck options fib setup
;
;  this subroutine initializes the access control word of the fib from
;  the various fop options, sets the retrieval window size, and initializes
;  r5 to address at which to build a files attributes list
;
;  inputs:
;	r10	fwa address
;	r9	ifab address
;	r8	fab address
;
;  outputs:
;	r6	fib address
;	r5	address for next entry to be added to attribute's list
;	r0	destroyed
;
;--

RM$CREACC_SET1::
	MOVAB	@FWA$Q_FIB+4(R10),R6	; get fib address

;
; initialize the access control word.  it is zero; set desired bits.
;

	ASSUME	FIB$L_ACCTL EQ 0
	BBC	#IFB$V_WRTACC,(R9),5$	; branch if read access only
	SSB	#FIB$V_WRITE,(R6)	; set write access bit

;
;  set sharing as desired and determine whether record locking required.
;
;  record locking will be required if there is any form of sharing (inter
;  or intra process) and there can be any writers of the file.
;

5$:	MOVB	FAB$B_SHR(R8),R0	; get shr field
	BBC	#FAB$V_MSE,R0,10$	; branch if no multi-streams
	SSB	#IFB$V_MSE,(R9)		; set mse bit
10$:	BBS	#FAB$V_NIL,R0,20$	; branch if no sharing
	BITB	#FAB$M_PUT!FAB$M_UPD!FAB$M_DEL,R0 ; any form of write sharing?
	BNEQ	30$			; branch if yes
	BISB2	#FIB$M_NOWRITE,(R6)	; disallow other writers
					; at most "get" sharing
	BBC	#IFB$V_WRTACC,(R9),35$	; branch if not write accessed
	BBS	#FAB$V_GET,R0,30$	; branch if allowing other readers
					; default write accessor to nil
20$:	SSB	#FIB$V_NOREAD,(R6)	; disallow other readers
	BBC	#FAB$V_MSE,R0,35$	; branch if no multi streams
	BBC	#IFB$V_WRTACC,(R9),35$	; branch if not write accessed

;
;  record locking required - unless upi set.  require sharers to specify
;    rms locking.

30$:	CSB	#IFB$V_NORECLK, (R9)	; clear no locking flag.
	MOVAL	IFB$L_BLBFLNK(R9), IFB$L_BLBFLNK(R9) ; Init BLB queue header.
	MOVAL	IFB$L_BLBFLNK(R9), IFB$L_BLBBLNK(R9) ; Init BLB queue header.
	BBS	#FAB$V_UPI,R0,35$	;
	SSB	#FIB$V_RMSLOCK,(R6)	; set fib bit for locking

;
;  set deferred write ifab flag as required
;

35$:	BBC	#FAB$V_DFW+FOP,(R8),40$	; branch if deferred write not
					; specified
	SSB	#IFB$V_DFW,(R9)		; set deferred write flag

;
;  set read checking, write checking, and seq. operations only flags
;

40$:	BBC	#FAB$V_WCK+FOP,(R8),50$	; branch if no write-checking
	BISB2	#1@FIB$V_WRITECK,(R6)	; enable write-checking
	BISB2	#1@FHD$V_WRITCHECK,FWA$W_UCHAR(R10) ; & give file wck attribute
50$:	BBC	#FAB$V_RCK+FOP,(R8),60$	; branch if no read-checking
	SSB	#FIB$V_READCK,(R6)	; enable read-checking
	BISB2	#1@FHD$V_READCHECK,FWA$W_UCHAR(R10) ; & give file rck attribute
60$:	BBC	#FAB$V_SQO+FOP,(R8),70$	; branch if sqo not specified
	SSB	#FIB$V_SEQONLY,(R6)	; set sequential only bit
	SSB	#IFB$V_SQO,(R9)		; and save bit in ifab

;
; if magtape, check and set positioning flags (rwo, pos, nef)
;

70$:	BBC	#DEV$V_SQD,IFB$L_PRIM_DEV(R9),80$ ; branch if not magtape
	SSB	#FIB$V_PRSRV_ATR,(R6)	; read rat bits as stored

;
; the rms fop bits for magtape positioning are in the same
; relative position to each other as the corresponding fib bits
; and additionally have the same polarity - use an extract
; and insert field to set them appropriately
; (note:  the wck bit is imbedded - so it gets set or cleared again)
;

	ASSUME	<FAB$V_RWO+1> EQ FAB$V_POS
	ASSUME	<FAB$V_POS+1> EQ FAB$V_WCK
	ASSUME	<FAB$V_WCK+1> EQ FAB$V_NEF
	ASSUME	<FIB$V_REWIND+1> EQ FIB$V_CURPOS
	ASSUME	<FIB$V_CURPOS+1> EQ FIB$V_WRITECK
	ASSUME	<FIB$V_WRITECK+1> EQ FIB$V_UPDATE
	EXTZV	#FAB$V_RWO+FOP,#4,(R8),R0; get the fop bits
	INSV	R0,#FIB$V_REWIND,#4,(R6)

;
;  if this is ufo, set fib$v_notrunc unless trn bit set in fac, and check
;  for execute protection
;

80$:	BBC	#FAB$V_UFO+FOP,(R8),100$ ; branch if not ufo
	BBS	#FAB$V_TRN,FAB$B_FAC(R8),90$ ; branch if trn set
	SSB	#FIB$V_NOTRUNC,(R6)	; don't allow truncates

;
;  check for execute protection
;

90$:	BBC	#FAB$V_EXE,FAB$B_FAC(R8),100$ ; branch if not execute access
	CMPB	IFB$B_MODE(R9),-	;
		#PSL$C_SUPER		; super (or exec or kernel) mode?
	BGTRU	100$			; branch if not (ignore)
	SSB	#FIB$V_EXECUTE,(R6)	; have acp check on execute access
100$:

;
; set the retrieval window size
;

SETRTV:	MOVB	FAB$B_RTV(R8),FIB$B_WSIZE(R6)

;
; the fib is now set up.
; set the attribute control list address into r5
;

	MOVAB	FWA$T_ATR_LIST(R10),R5	; get addr of attribute list
					; area work buffer
	RSB


;++
; RM$CREACC_SET2 - set up stat block, fall thru to creac_3
;
;  subroutine to finish fcp access & create setups started by rm$creacc_set1
;
;  if this is for an access it puts an entry on the attributes list
;  to cause the statistics block to be read
;
;  it then adds attribute list entries for rms record attributes,
;  user characteristics, and, if device is magtape, block size.
;  it then ends the attributes list and builds p6 thru p2 of the fcp's
;  qio parameter block and returns.
;
;  inputs:
;	r10	fwa address
;	r5	attributes list next entry address
;
;  outputs:
;	p6 thru p2 on stack
;	r0, r5 destroyed
;--
;
;  entry point to finish fcp access setups
;
;--

RM$CREACC_SET2::
	POPR	#^M<R0>			; save return pc
	MOVW	#FWA$C_STATBLK,(R5)+	; specify # of bytes wanted
	MOVW	#ATR$C_STATBLK,(R5)+	; read statistics block
	MOVAB	FWA$T_STATBLK(R10),(R5)+ ; address for read
	BRB	CREACC_3

;++
; RM$CREACC_SET3 - set up for record attributes and user characteristics
;
;  entry point to finish create function setup without getting a statistics block
;
;	put in entries to cause record attributes and user characteristics
;	to be read/written
;
;--

RM$CREACC_SET3::
	POPR	#^M<R0>			; save return pc
CREACC_3:
	MOVW	#<IFB$C_FHAEND-IFB$B_RFMORG>,(R5)+ ; # bytes rec attr to xfer
	MOVW	#ATR$C_RECATTR,(R5)+	; get rms record attributes
	MOVAL	IFB$B_RFMORG(R9),(R5)+	; xfer attr's directly to/from ifab
	MOVW	#ATR$S_UCHAR,(R5)+	; size of user characteristics
	MOVW	#ATR$C_UCHAR,(R5)+	; specify read/write of   "
	MOVAW	FWA$W_UCHAR(R10),(R5)+	; addr to read/write      "
	BBC	#DEV$V_SQD,IFB$L_PRIM_DEV(R9),5$ ; branch if not magtape
	MOVW	#ATR$S_BLOCKSIZE,(R5)+	; specify blocksize size (2)
	MOVW	#ATR$C_BLOCKSIZE,(R5)+	; specify read/write of blocksize
	MOVAL	IFB$W_DEVBUFSIZ(R9),(R5)+ ; xfer directly to/from ifab
5$:
	CLRL	(R5)			; flag end of attribute list

;
; start building qio argument list on stack
;

	PUSHL	#0			; p6
	PUSHAL	FWA$T_ATR_LIST(R10)	; p5 = attribute list address
P4_P2:	PUSHAQ	FWA$Q_RNS(R10)		; p4 = resultant name string descriptor
	PUSHAL	FWA$Q_NAME(R10)		; p3 = address of long word
					; to receive resultant string length
	MOVL	#FWA$C_NAMBUFSIZ+FWA$C_TYPBUFSIZ+FWA$C_VERBUFSIZ,-
		FWA$Q_RNS(R10) 		; length of rns buffer
	MOVAB	FWA$T_NAMEBUF(R10),FWA$Q_RNS+4(R10) ; overlay input filename
					; with resultant string
	PUSHAQ	FWA$Q_NAME(R10)		; p2 = filename string
	JMP	(R0)			; return to caller

;++
; RM$FCP_P4_P2 - push p4 thru p2 onto stack
;
;  entry point to push p4 through p2 onto stack for fcp argument list
;  build for the $erase function (delete file)
;--

RM$FCP_P4_P2::
	POPR	#^M<R0>			; save return pc
	BRB	P4_P2			; go do it

	.SBTTL	RM$DEACCESS - PERFORM FCP DEACCESS FUNCTION

;++
; RM$DEACCESS - perform file deaccess function
;
; This routine builds an attribute list to cause the record
; attributes in the ifab to be rewritten to the file
; header, if the file was write accessed, and
; calls rm$fcpfnc to perform the deaccess.
;
; Calling sequence:
;
;	BSBW	RM$DEACCESS
;
; Input Parameters:
;
;	r11	impure area address
;	r9	ifab address
;	r8	fab address
;
; Implicit Inputs:
;
;	ifb$l_chnl
;
; outputs:
;
;	r0	status code
;	r1-r6,ap destroyed
;
; Implicit Outputs:
;
;	ifb$l_ios
;
; Completion Codes:
;
;	standard rms, in particular, suc, dac, fno.
;
; Side Effects:
;
;	on return rms may be running at ast level
;	requiring a reprobe of any user structures except
;	the fab.
;--


	.PSECT	F$RMSCLOSE0,GBL,NOWRT

;++
;
;  xab processing arguments for close
;
;--

CLS_XAB_ARGS:
	.BYTE	XAB$C_RDT,XAB$C_RDTLEN,XBC$C_CLSRDT ; handle rdt xab
	.BYTE	XAB$C_PRO,XAB$C_PROLEN,XBC$C_CLSPRO ; handle pro xab
	.BYTE	0

;++
;
;  perform network deaccess function
;
;--

NTDAC:	$PSECT_BR	NF$NETWORK
	BBCC	#IFB$V_DAP_OPEN,(R9),10$ ; branch if close not necessary
	BBS	#IMP$V_IORUNDOWN,(R11),10$ ; branch if i/o rundown in progress
	BSBW	NT$CLOSE		; yes, close it there
	BLBC	R0,20$			; branch on failure
10$:	BSBW	NT$DEACCESS		; destroy logical link with partner
	BLBC	R0,30$			; branch on failure
	RMSSUC				; show success
20$:	RSB				; exit to caller
30$:	BRW	ERRDAC			; branch aid
	$PSECT_RESTORE

;++
;
;  entry point for rm$deaccess
;
;--

RM$DEACCESS::
	$TSTPT	DEACCES
	BBS	#DEV$V_NET,IFB$L_PRIM_DEV(R9),NTDAC ; br if network device
	RMSSUC	SUC,R6			; indicate success

	PUSHL	#0			; signal end of attribute list
	MOVAB	CLS_XAB_ARGS,AP		; arg list addr for rm$xab_scan
	BSBW	RM$XAB_SCAN		; process xab chain
	MOVL	R0,R6			; save status
;
; build attribute list on stack to rewrite record attributes
;

	BBC	#IFB$V_WRTACC,(R9),10$	; branch if not write accessed
	BBC	#IFB$V_SEQFIL,(R9),5$	; skip next few lines if really rel
	ASSUME	<IFB$C_SEQ + 1> EQ IFB$C_REL
	DECB	IFB$B_ORGCASE(R9)	; turn back into sequential file
	CLRB	IFB$B_BKS(R9)		; make sure this clear also
5$:
	PUSHAL	IFB$B_RFMORG(R9)	; write attributes from ifab
	PUSHL	#<ATR$C_RECATTR@16>+<IFB$C_FHAEND-IFB$B_RFMORG>
					; length & record attriubtes code

;
;  put org back into rfmorg byte
;

	INSV	IFB$B_ORGCASE(R9),#IFB$V_ORG,#IFB$S_ORG,IFB$B_RFMORG(R9)

;
;  allocate a fib to handle various options
;

10$:	MOVZBL	#FIB$C_EXTDATA,R2	; set size of fib
	BSBW	RM$GETSPC1		; allocate fib
					; build fib descriptor on stack
	PUSHL	R1			; addr of fib
	PUSHL	#FIB$C_EXTDATA		; and length of fib

;
;  handle "tef" option (truncate at end of file) if this is a write-accessed
;  disk file.
;

	TSTL	IFB$L_FRB_PTR(R9)	; check for shared file
	BNEQ	20$			; bypass if shared file
	BBS	#IFB$V_TEF,(R9),15$	; branch if auto extend set flag
	BBC	#FAB$V_TEF+FOP,(R8),20$	; branch if option not speced
	BBC	#DEV$V_RND,IFB$L_PRIM_DEV(R9),20$ ; or if not disk
	BBC	#IFB$V_WRTACC,(R9),20$	; or if not write accessed
	ASSUME	FIB$V_TRUNC GE 8
15$:	BISB2	#<FIB$M_TRUNC @-8>,FIB$W_EXCTL+1(R1) ; ask for truncate
	MOVL	IFB$L_EBK(R9),FIB$L_EXVBN(R1) ; truncate at eof block
	TSTW	IFB$W_FFB(R9)		; any bytes used this block?
	BEQL	20$			; branch if none
	INCL	FIB$L_EXVBN(R1)		; yes - don't truncate block
20$:

;
;  check for magtape rewind
;

	BBC	#DEV$V_SQD,IFB$L_PRIM_DEV(R9),40$ ; branch if not magtape
	BBC	#IFB$V_RWC,(R9),40$	; branch if not speced
	BISB2	#FIB$M_REWIND,FIB$L_ACCTL(R1) ; cause rewind to happen
40$:

;
;  swap the words of ifb$l_hbk and ifb$l_ebk to match files-11
;  on-disk structure
;

	BSBW	RM$SET_SIFB_ADR		; get sifab/ifab address
	ROTL	#16,IFB$L_HBK(AP),IFB$L_HBK(R9)
	ROTL	#16,IFB$L_EBK(AP),IFB$L_EBK(R9)

;
;  do the deaccess qio
;

	MOVZBL	#IO$_DEACCESS,R0	; deaccess function code
	BSBW	RM$FCPFNC_ALT4		; go do the deaccess
	POPR	#^M<R2,R4>		; get fib len & addr
50$:	TSTL	(SP)+			; remove attribute list from stack
	BNEQ	50$			;    "
	PUSHL	R0			; save status code
	BSBW	RM$RETSPC1		; deallocate the fib
	POPR	#^M<R0>			; restore the status code
	BLBC	R0,ERRDAC		; branch if error
	BLBS	R6,60$			; branch if no xab error
	MOVL	R6,R0			; report xab error
60$:	RSB

;

ERRDAC:	$PSECT_BR	L$RMS0
	RMSERR	DAC,R1			; default error code
	BRW	RM$MAPERR		; go handle error
	$PSECT_RESTORE
	.END
