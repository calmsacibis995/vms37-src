
MODULE RM3POSKEY (LANGUAGE (BLISS32) ,
		IDENT = 'V03-001'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:	RMS32 index sequential file organization
!
! ABSTRACT:
!                This module positions to a record by key
!
!
! ENVIRONMENT:
!
!		VAX/VMS Operating System
!
!--

!
! AUTHOR:        D. H. Gillespie     CREATION DATE:        	8-MAY-78  9:06
!
!
! MODIFIED BY:
!
!	V03-001	TMK0001		Todd M. Katz		24-Mar-1982
!		Change all references to keybuffer 2 so that they use 
!		the macro KEYBUF_ADDR.
!
!	V02-006	MCN0007		Maria del C. Nasr	22-Apr-1981
!		Use macro to determine size of record identifier.
!
!	V02-005	MCN0006		Maria del C. Nasr	13-Mar-1981
!		Increase size of record identifier to a word in the IRB,
!		NRP, and RLB internal structures.
!
!	V02-004	REFORMAT	Maria del C. Nasr	24-Jul-1980
!
! REVISION HISTORY:
!
!   X0003		Christian Saether,  1-july-79  12:05
!		 fix bug GT positioning when deleted record with same key
!		 value present and stop counting dupes on primary key
!
!*****

LIBRARY 'RMSLIB:RMS';

REQUIRE 'RMSSRC:RMSIDXDEF';

!
! define default psects for code
!

PSECT
    CODE = $$RMSGET3(PSECT_ATTR),
    PLIT = $$RMSGET3(PSECT_ATTR);

!
! Linkages
!

LINKAGE
    L_POS_KEY,
    L_RECORD_KEY,
    L_GETNEXT_REC,
    L_CSEARCH_TREE,
    L_RLSBKT,
    L_SEARCH_SIDR;

!
! External Routines
!

EXTERNAL ROUTINE
    RM$CSEARCH_TREE	: RL$CSEARCH_TREE,
    RM$GETNEXT_REC	: RL$GETNEXT_REC,
    RM$RECORD_KEY	: RL$RECORD_KEY,
    RM$RLSBKT		: RL$RLSBKT,
    RM$SEARCH_SIDR	: RL$SEARCH_SIDR;


GLOBAL ROUTINE RM$POS_KEY : RL$POS_KEY =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine positions to a record by key
!
! CALLING SEQUENCE:
!	RM$POS_KEY()
!
! INPUT PARAMETERS:
!	none
!
! IMPLICIT INPUTS:
!	IRAB			- address of internal RAB
!	IRAB[IRB$V_SRCHGT]	- if set, this is a GT approximate search
!	IRAB[IRB$V_SRCHGE]	- if set, this is a GE approximate search
!	IRAB[IRB$B_KEYSZ]	- size of key to compare( not equal to key size
!				  in generic search)
!	IRAB[KEY BUFFER 2]	- address of search key
!	IDX_DFN			- address of current index descriptor
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	REC_ADDR		- address of data record
!	IRAB[IRB$L_CURBDB]	- address of BDB which describes the buffer that
!				  contains the record
!	IRAB[IRB$W_RFA_ID]	- ID of data record for primary
!				  or ID of SIDR record for secondary key
!	IRAB[IRB$L_RFA_VBN]	- VBN of data record for primary key
!				  or VBN of SIDR record for secondary key
!	IRAB[IRB$W_SAVE_POS]	- duplicate count for SIDR record pointer
!	IRAB[IRB$L_NXTBDB]	- if secondary key, BDB of SIDR record
!
! ROUTINE VALUE:
!	none
!
! SIDE EFFECTS:
!	none
!
!--

    BEGIN

    BUILTIN
	AP;

    EXTERNAL REGISTER
	COMMON_RAB_STR,
	R_IDX_DFN_STR,
	R_REC_ADDR_STR;

    IRAB[IRB$B_STOPLEVEL] = 0;			! stop at data level
    IRAB[IRB$L_CURBDB] = 0;			! start at root
    IRAB[IRB$W_SAVE_POS] = 0;			! initialize duplicate count

    RETURN_ON_ERROR (RM$CSEARCH_TREE());

    IF .IDX_DFN[IDX$B_KEYREF] EQLU 0
    THEN
	BEGIN

	WHILE .REC_ADDR[IRC$V_DELETED]
	DO
	    BEGIN
	    RM$GETNEXT_REC();

	    RETURN_ON_ERROR (RM$CSEARCH_TREE());

	    END;

	IRAB[IRB$W_RFA_ID] = IRC$_ID(REC_ADDR);
	IRAB[IRB$L_RFA_VBN] = .BBLOCK[.IRAB[IRB$L_CURBDB], BDB$L_VBN];
	AP = 0;					! for record_key
	RM$RECORD_KEY(KEYBUF_ADDR(2));
	RETURN RMSSUC();

	END;

    BEGIN

    LOCAL
	STATUS;

    STATUS = RM$SEARCH_SIDR();

    IF .STATUS<0, 16> EQL RMSERR(RNF)
    THEN
	BEGIN

	GLOBAL REGISTER
	    R_BDB_STR;

	IF .IRAB[IRB$L_CURBDB] NEQ 0
	THEN
	    RELEASE(IRAB[IRB$L_CURBDB]);

	END;

    RETURN .STATUS

    END;

    END;					! end of routine RM$POS_KEY

END

ELUDOM
