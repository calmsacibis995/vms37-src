	$BEGIN	NT0DISCON,019,NF$NETWORK,<NETWORK DISCONNECT STREAM>


;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; Facility: RMS
;
; Abstract:
;
;	This module communicates with the File Access Listener (FAL) at the
;	remote node to disconnect the specified record stream.
;
; Environment: VAX/VMS, executive mode
;
; Author: James A. Krycka,	Creation Date:	09-DEC-1977
;
; Modified By:
;
;	V02-019	JAK0071		J A Krycka	04-FEB-1982
;		CRC check DAP Data messages that are discarded when prematurely
;		terminating a file transfer retrieval request.
;
;	V02-018	JAK0066		J A Krycka	07-OCT-1981
;		Clear file transfer mode status bits on exit.
;
;	V02-017	JAK0056		J A Krycka	25-APR-1981
;		Support the disconnect function with a non-VMS partner if it
;		uses DAP V5.6 or later.
;
;	V02-016	REFORMAT	J A Krycka	26-JUL-1980
;
;--

	.SBTTL	DECLARATIONS

;
; Include Files:
;

	$DAPPLGDEF			; Define DAP prologue symbols
	$DAPHDRDEF			; Define DAP message header
	$DAPCMPDEF			; Define DAP Access Complete message
	$DAPCNFDEF			; Define DAP Configuration message
	$DAPDATDEF			; Define DAP Data message
	$IFBDEF				; Define IFAB symbols
	$NWADEF				; Define Network Work Area symbols

;
; Macros:
;
;	None
;
; Equated Symbols:
;

	ASSUME	DAP$Q_DCODE_FLG EQ 0
	ASSUME	NWA$Q_FLG EQ 0

;
; Own Storage:
;
;	None
;

	.SBTTL	NT$DISCONNECT - PERFORM NETWORK DISCONNECT FUNCTION

;++
;  NT$DISCONNECT - engages in a DAP dialogue with the remote FAL to disconnect
;	the record stream.
;
; Calling Sequence:
;
;	BSBW	NT$DISCONNECT
;
; Input Parameters:
;
;	R8	RAB address
;	R9	IRAB address
;	R10	IFAB address
;	R11	Impure Area address
;
; Implicit Inputs:
;
;	DAP$Q_SYSCAP
;	DAP$V_GEQ_V42
;	DAP$V_GEQ_V56
;	DAP$V_VAXVMS
;	IFB$V_SQO
;
; Output Parameters:
;
;	R0	Status code (RMS)
;	R1-R7	Destroyed
;	AP	Destroyed
;
; Implicit Outputs:
;
;	NWA$V_FTM_RETRV cleared
;	NWA$V_FTM_STORE cleared
;
; Completion Codes:
;
;	Standard RMS completion codes
;
; Side Effects:
;
;	None
;
;--

NT$DISCONNECT::				; Entry point
	$TSTPT	NTDISCON		;
	MOVL	IFB$L_NWA_PTR(R10),R7	; Get address of NWA (and DAP)

;++
; Build and send DAP Access Complete message to partner.
;--

SEND_CMP:				;
	BBS	#DAP$V_VAXVMS,(R7),10$	; Send message if partner is VAX/VMS
	BBC	#DAP$V_GEQ_V56,(R7),SUC	;  or if partner uses DAP since V5.6
10$:	$SETBIT	#NWA$V_LAST_MSG,(R7)	; Declare this last message to block
	MOVL	#DAP$K_CMP_MSG,R0	; Get message type value
	BSBW	NT$BUILD_HEAD		; Construct message header
	MOVB	#DAP$K_DISCONN,(R5)+	; Store CMPFUNC field
	BSBW	NT$BUILD_TAIL		; Finish building message
	BSBW	NT$TRANSMIT		; Send Access Complete message to FAL
	BLBC	R0,EXIT			; Branch on failure

;++
; Receive DAP Access Complete message from partner.
;--

RECV_CMP:				;
	BBC	#DAP$V_GEQ_V42,(R7),SUC	; Response to Access Complete required
					;  iff partner uses DAP since V4.2
	BSBB	NT$LOOK_FOR_CMP		; Wait for response from FAL
	BLBC	R0,EXIT			; Branch if not Access Complete message
SUC:	RMSSUC				; Return success
	$CLRBIT	#NWA$V_FTM_RETRV,(R7)	; Clear file transfer mode status bits
	$CLRBIT	#NWA$V_FTM_STORE,(R7)	;
EXIT:	RSB				; Exit with RMS code in R0

	.SBTTL	NT$LOOK_FOR_CMP

;++
; This routine checks for an Access Complete message response from FAL.
; If we are in file transfer mode, then messages in the pipe preceding the
; Access Complete response are discarded.
;--

NT$LOOK_FOR_CMP::			; Entry point
	BBS	#IFB$V_SQO,(R10),10$	; Branch if in file transfer mode

;
; We're in record transfer mode.
;

	$SETBIT	#DAP$K_CMP_MSG,DAP$L_MSG_MASK(R7)
					; Expect response of Access Complete msg
	BSBW	NT$RECEIVE		; Get reply from FAL
	RSB				; Exit with RMS code in R0

;
; We're in file transfer mode.
;

10$:	BISL2	#<<1@DAP$K_DAT_MSG>!-	; Expect response of Access Complete
		  <1@DAP$K_CMP_MSG>!-	;  message but also allow Data (or
		0>,DAP$L_MSG_MASK(R7)	;  Status) message
	BSBW	NT$RECEIVE		; Get reply from FAL
	CMPW	R0,#<RMS$_EOF&^XFFFF>	; Discard end-of-file Status message
	BEQL	10$			;  in pipe
	BLBC	R0,20$			; Branch on failure
	CMPB	DAP$B_TYPE(R7),-	; Is it an Access Complete response?
		#DAP$K_CMP_MSG		; If so, we're all done
	BEQL	20$			;
	CMPB	DAP$B_TYPE(R7),-	; Is it a Data message?
		#DAP$K_DAT_MSG		; If so, process it
	BNEQ	10$			; If not, it must be a Status message
					;  indicating success--discard it
	BBC	#DAP$V_DAPCRC,-		; Branch if partner does not support
		DAP$Q_SYSCAP(R7),10$	;  file level CRC checksum
	MOVQ	DAP$Q_FILEDATA(R7),R2	; Put descriptor of record in <R2,R3>
	CRC	W^NT$CRC_TABLE,-	; Compute CRC (destroying R0-R3)
		DAP$L_CRC_RSLT(R7),-	;  using result of previous CRC
		R2,(R3)			;  calculation as initial CRC value
	MOVL	R0,DAP$L_CRC_RSLT(R7)	; Store CRC resultant value
	BRB	10$			; Process next message
20$:	RSB				; Exit with RMS code in R0

	.END				; End of module
