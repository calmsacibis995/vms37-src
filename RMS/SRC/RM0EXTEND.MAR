	$BEGIN	RM0EXTEND,011,F$RMSEXTEND,<COMMON EXTEND FILE ROUTINE>


;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************

;++
; FACILITY: RMS32
;
; ABSTRACT:
;		Routine to perform common file extend processing for
;		all file organizations.
;
; ENVIRONMENT:
;		STAR processor running STARLET EXEC.
;
; AUTHOR: L F Laverdure,	 CREATION DATE: 2-Dec-1977
;
; MODIFIED BY:
;
;	V02-012	JWH0001		Jeffrey W. Horn	2-Mar-1982
;		Get rid of hack put in durring reformat that left
;		a check for invalid ALN options inoperative.
;
;	V02-011	REFORMAT	Frederick E. Deen, Jr.	    25-Jul-1980
;		This code was reformatted to adhere to RMS standards
;
;	V010	CDS0070	C D Saether	19-Dec-1979
;		Force header write thru even if ACP optimazations are
;		turned on.  This affects RELATIVE, ISAM, and explicit
;		$EXTEND.
;
;	V009	RAN0003	R A Newell	9-Nov-1978
;		File sharing code enhancements
; REVISION HISTORY:
;
;	R A Newell,	  9-Nov-1978
;	L F Laverdure,   17-Feb-1978
; 	X0001	- File sharing code enhancements
;--


	.SBTTL	DECLARATIONS

;
; Include Files:
;

;
; Macros:
;

	$FIBDEF
	$FRBDEF				; file resource block defs
	$FABDEF
	$IFBDEF
	$XABDEF
	$XABALLDEF

;
; Equated Symbols:
;

	FOP=FAB$L_FOP*8			; bit offset to file options longword

;
; Own Storage:
;


	.SBTTL	RM$EXTEND0 - COMMON FILE EXTEND ROUTINE

;++
; RM$EXTEND0 - Common file extend routine
;
;  This routine performs common file extension processing
;  including the following:
;
;	1. Allocates a FIB to build the file extension request.
;	2. Initializes the fields of the FIB based upon the type of extend.
;	3. Utilizes the placement information from the XAB, if provided.
;	4. Builds a descriptor for the FIB and calls RM$FCPEXTEND
;	   to perform the extend.
;	   Write thru is specified to force header write thru so that
;	   EOF data will match EOF in PROLOGUE for RELATIVE and ISAM.
;	6. Deallocates the FIB and returns
;
; CALLING SEQUENCE:
;
;	BSBW	RM$EXTEND0
;
;  Alternate entry at RM$EXTEND0_ALT to perform functions 4 & 5 only
;
;	the FIB must already have been allocated and the extend size
;	field filled in.  Address of FIB must be in R1 (R5 and R6 not inputs).
;
;
; INPUT PARAMETERS:
;
;	R11		IMPURE AREA address
;	R10		IFAB address
;	R9		IRAB/IFAB address (IFAB if entry at RM$EXTEND0)
;	R8		RAB/FAB address (FAB if entry at RM$EXTEND0)
;	R6		ALLOCATION XAB address, if any, else 0
;	R5		EXTEND size in blocks
;
; IMPLICIT INPUTS:
;
;	Contents of the FAB
;
; OUTPUT PARAMETERS:
;
;	R6		END VBN of extent + 1
;	R1		STARTING VBN of extent
;	R0		STATUS
;	R2-R5,AP	destroyed
;
; IMPLICIT OUTPUTS:
;
;	None
;
; COMPLETION CODES:
;
;	Standard RMS.
;
; SIDE EFFECTS:
;
;	May have switched to running at AST level.
;
;--


RM$EXTEND0::
	MOVL	#FIB$C_ALCDATA,R2		; size of FIB
	BSBW	RM$GETSPC1			; allocate FIB
	BLBC	R0,EXIT				; get out on error
	MOVL	R5,FIB$L_EXSZ(R1)		; set extend size
	BNEQ	10$				; branch if non-zero
	MOVZWL	IFB$W_RTDEQ(R9),FIB$L_EXSZ(R1)	; use default extend size
	BNEQ	10$				; branch if non-zero
	BISB2	#FIB$M_ALDEF,FIB$W_EXCTL(R1)	; else use volume default
10$:

;
;  Handle ALLOCATION XAB placement control, if any
;

	TSTL	R6				; any allocation XAB?
	BEQL	CBTCTG				; branch if none
	BSBB	RM$SET_XABALL			; handle placement control
	BLBS	R0,EXTND			; branch if ok
	$PSECT_BR	L$RMS0
	MOVL	R1,R4				; set up regs to return FIB
	MOVL	#FIB$C_ALCDATA,R2		; 	"
	BRB	DEALL_FIB			; go deallocate FIB & get out
	$PSECT_RESTORE

;
;  Set contiguous best try if specified in FOP
;

CBTCTG:	BBC	#FAB$V_CBT+FOP,(R8),20$		; branch if CBT bit off
	BBCS	#FIB$V_ALCONB,-			; ask primitive for best try
		FIB$W_EXCTL(R1),30$		;  and branch
20$:	BBC	#FAB$V_CTG+FOP,(R8),30$		; branch if CTG bit off
	BISB2	#FIB$M_ALCON,FIB$W_EXCTL(R1)	; ask for contiguous extend
	BSBW	RM$SET_SIFB_ADR			; get SIFAB/IFAB address
	TSTL	IFB$L_HBK(AP)			; is this first allocation?
	BNEQ	30$				; branch if not
	BISB2	#FIB$M_FILCON,FIB$W_EXCTL(R1)	; yes - also mark file CTG
30$:						; fall thru to RM$EXTEND0_ALT


;++
; RM$EXTEND0_ALT -  Entry point for automatic EXTEND on $PUT.
;
;	R8, R9 have RAB and IRAB addresses respectively
;	FIB must already have been allocated and extend size set, addr in R1.
;--

RM$EXTEND0_ALT::
	MOVB	#FIB$C_VBN,FIB$B_ALALIGN(R1)	; specify placement near EOF
EXTND:	BISB2	#FIB$M_EXTEND,FIB$W_EXCTL(R1)	; flag this as an EXTEND
	ASSUME	FIB$L_ACCTL EQ 0
	SSB	#FIB$V_WRITETHRU,(R1)		; force header to write thru
	PUSHL	R1				; build FIB descriptor - addr
	PUSHL	#FIB$C_ALCDATA			; 		       - length
	BSBW	RM$FCPEXTEND			; do the EXTEND
	POPR	#^M<R2,R4>			; clean STACK and get FIB len & addr
	BLBC	R0,ERREXT			; branch if EXTEND failed

;
;  EXTEND complete.
;  Save NEW HIGH VBN + 1 in R6, START VBN in R1, and deallocate FIB
;

	PUSHL	FIB$L_EXVBN(R4)			; save starting VBN of extent
	ADDL3	(SP),FIB$L_EXSZ(R4),R6		; and END VBN + 1
	BSBW	RM$RETSPC1			; deallocate FIB
	POPR	#^M<R1>				; restore STARTING VBN
	RMSSUC
EXIT:	RSB

;++
;
;  EXTEND failed.
;  Map error, deallocate FIB, and return.
;
;--

ERREXT:	$PSECT_BR	L$RMS0
	RMSERR	EXT,R1				; default status code
	BSBW	RM$MAPERR			; map the error code
DEALL_FIB:
	PUSHL	R0				; save it
	BSBW	RM$RETSPC1			; deallocate FIB
	POPR	#^M<R0>				; restore status
	RSB
	$PSECT_RESTORE


;++
;  RM$SET_XABALL - Handle ALLOCATION XAB placement control,
; 		   setting up the FIB according to the XAB inputs.
;
;  INPUTS:
;
;	R6	XAB address
;	R1	FIB address
;
;  OUTPUTS:
;
;	R0	STATUS code
;	the placement control section of the FIB is initialized.
;
;  NOTE: No registers other than R0 are modified.
;
;--

RM$SET_XABALL::
	BBC	#XAB$V_CBT,XAB$B_AOP(R6),20$	; branch if CBT off
	BBCS	#FIB$V_ALCONB,-			; ask primitive for contig.
		FIB$W_EXCTL(R1),30$		; best try and branch


20$:	BBC	#XAB$V_CTG,XAB$B_AOP(R6),30$	; branch if CTG off
	BISB2	#FIB$M_ALCON,FIB$W_EXCTL(R1)	; ask for contig. extend
	MOVL	IFB$L_FRB_PTR(R9),R0		; get FRB address
	BEQL	25$				; branch if none
	MOVL	FRB$L_SIFAB_PTR(R0),R0		; get SIFAB address
	BRB	26$				; bypass
25$:	MOVL	R9,R0				; copy IFAB address
26$:	TSTL	IFB$L_HBK(R0)			; is this first allocation?
	BNEQ	30$				; branch if not
	BISB2	#FIB$M_FILCON,FIB$W_EXCTL(R1)	; yes - also mark file CTG
30$:
	ASSUME	XAB$B_ALN EQ XAB$B_AOP+1
	ASSUME	FIB$B_ALALIGN EQ FIB$B_ALOPTS+1
	BICW3	#XAB$M_CBT!XAB$M_CTG,-		; set all. options &
		XAB$B_AOP(R6),FIB$B_ALOPTS(R1)	;  alignment type


	BITB	#^C<XAB$M_HRD!XAB$M_ONC>,-	; any unknown bits?
		FIB$B_ALOPTS(R1)
	BNEQ	ERRAOP				; branch if yes
	MOVW	XAB$W_VOL(R6),FIB$W_LOC_RVN(R1)	; set relative vol. #
	CMPB	XAB$B_ALN(R6),#XAB$C_RFI	; related file type alloc.?
	BLSSU	40$				; branch if less
	BGTRU	ERRALN				; branch if greater
	ASSUME	FIB$L_LOC_ADDR EQ FIB$W_LOC_FID+6
	MOVQ	XAB$W_RFI(R6),FIB$W_LOC_FID(R1)	; set related FILE ID
40$:	MOVL	XAB$L_LOC(R6),-			; set allocation location
		FIB$L_LOC_ADDR(R1)
	RMSSUC
	RSB

;++
;
;  Tell about unknown AOP or ALN values
;
;--

ERRAOP:	$PSECT_BR	L$RMS0
	RMSERR	AOP
	BRB	SETSTV
	$PSECT_RESTORE

;

ERRALN:	$PSECT_BR	L$RMS0
	RMSERR	ALN
SETSTV:	MOVL	R6,FAB$L_STV(R8)		; XAB address as STV value
	RSB
	$PSECT_RESTORE


	.END
