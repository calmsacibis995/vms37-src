	$BEGIN	RMS0BLKIO,001,$RMS0BLOCKIO,<BLOCK I/O ROUTINES>

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
; Facility: rms32
;
; Abstract:
;		this module performs the $read and $write functions.
;
; Environment:
;		star processor running starlet exec.
;
; Author: L F Laverdure,	 creation date: 23-MAY-1977
;
; Modified By:
;
;	V03-001	CDS0002		C Saether	2-Apr-1982
;		Clear IRB$V_BIO_LAST on buffer errors so that
;		subsequent disconnect will correctly release buffer.
;
;	V02-029	RAS0065		Ron Schaefer	8-Feb-1982
;		Position to end of file on block mode append.
;
;	V02-028	CDS0001		C Saether	30-Aug-1981
;		Remove calls to cache and release.
;
;	V02-027	RAS0021		Ron Schaefer	7-Aug-1981
;		Fix block i/o support for stream files.  This is an
;		interim fix to even-align write transfers by asking
;		if the user buffer can be extended 1 byte.
;		If not, the transfer fails.
;
;	V02-026	PSK00018	P S Knibbe	24-Jul-1981
;		Fix yet more broken branches, by keeping the network code in
;		the local PSECT.
;
;	V02-025 KPL0007		Peter Lieberwirth	 7-May-1981
;		Fix more broken branches.
;
;	V02-024	PSK0017		P S Knibbe	19-Jan-1981	
;		Fix broken branches
;
;	V02-023	REFORMAT	C Saether	30-Jul-1980	23:20
;
;	V022	PSK0016		P S Knibbe	11-Mar-1980	 3:15
;		successful read from magtape should clear irb$v_eof bit
;		only successful write should set irb$v_eof bit
;
;	V021	PSK0012		P S Knibbe	14-Feb-1980	 2:30
;		write to magtape should set irb$v_eof bit
;
;	V020	JAK0020		J A Krycka	05-Sep-1979	12:00
;		release 2.0 work.
;
;	V019	RAN0003		R A Newell	20-Dec-1978	03:10
;		file sharing enhancements.
;--
;


	.SBTTL	DECLARATIONS

;
; Include Files:
;

;
; Macros:
;

	$IFBDEF
	$IRBDEF
	$RABDEF
	$FABDEF
	$DEVDEF
	$RLSDEF
	$BDBDEF
	$RMSDEF

;

;
; Equated Symbols:
;

	ROP=RAB$L_ROP*8			; bit offset to record options

;
; Own Storage:
;


	.SBTTL	RM$READ - $READ ROUTINE

;++
; RMS$READ - highest level block i/o read routine
;
; this routine performs the $read specific code.
; it checks the user's parameters, calls the
; common block i/o setup, reads the buffer
; awaiting completion, sets the next block
; pointer and exits via the common block i/o
; co-routine.
;
; Calling sequence:
;
; entered from exec as a result of user's calling
; SYS$READ (e.g., by using the $READ macro).
;
; Input Parameters:
;
;	ap	user's argument list addr.
;
; Implicit Inputs:
;
; the contents of the various rab fields
; (see functional spec for detailed list).
;
; Output Parameters:
;
;	r0	status code
;	r1	destroyed
;
; Implicit Outputs:
;
;	various fields of the rab are filled in
;	to reflect the status of the $read operation.
;	(see rms functional spec for list.)
;
;	the irab is similarly updated.
;
;	a completion ast is queued if specified in the user arg list.
;
; Completion Codes:
;
;	standard rms.
;
; Side Effects:
;
;	if file was opened with 'bro' option specifying
;	mixed block and record i/o operations, the
;	current and next record context is destroyed.
;
; Note on BRO_SW and BIO_LAST:
;
;	The BRO_SW is set in RM0RSET when the current operation is a block i/o
;	operation and BIO_LAST is not set.  This is the signal to the blkio
;	co-routine to release the current buffer first before using the BDB
;	for the block i/o operation, as the buffer may be dirty and need to
;	be written first.  In addition, a disconnect will look at the BIO_LAST
;	for the same reason.  If BIO_LAST is set, it assumes that any necessary
;	release has already taken place.
;
;	BIO_LAST is set by RM0RSET before entering these routines.
;	For that reason, any errors that occur before the release section of
;	the BLKIO co-routine should clear BIO_LAST before exit, as the effect
;	of releasing the buffer from a record operation has not yet occured.
;
;--


	$ENTRY	RMS$READ
	$TSTPT	READ

	$RABSET	FAC=IFB$V_GET,BIO=1,CFLG=1

;
; initialize rbf and rsz and call blkio to do the i/o
;

	MOVZWL	RAB$W_USZ(R8),R6	; get buffer size
	BEQL	ERRUSZ			; branch if zero
	MOVL	RAB$L_UBF(R8),R7	; get buffer addr
	MOVL	R7,RAB$L_RBF(R8)	; set buffer addr
	CLRW	RAB$W_RSZ(R8)		; init read size
	CSB	#IRB$V_WRITE,(R9)	; flag as read
	BSBW	BLKIO			; do common block i/o setup
	BBC	#IFB$V_DAP,(R10),5$	; branch if not network operation
	BRW	NTREAD			; branch to NTREAD if network operation
5$:	BSBW	RM$RDBUFWT		; issue the read and await completion
	BLBC	R0,CHKEOF		; branch on error

;
;   on magtapes - clear the end of file bit on read
;

	BBC	#DEV$V_SQD,IFB$L_PRIM_DEV(R10),10$ ; branch if not magtape
	CSB	#IRB$V_EOF,(R9)		; clear the eof bit
10$:

;
;  check for logical eof if sequential file org
;

CHKLEOF:
	BBC	#DEV$V_RND,IFB$L_PRIM_DEV(R10),SETRSZ ; branch if not disk
	BSBB	SETNBP			; set next block pointer
	ASSUME	FAB$C_SEQ EQ 0
	TSTB	IFB$B_ORGCASE(R10)	; sequential org?
	BNEQ	SETRSZ			; branch if not

	CMPL	R1,IFB$L_EBK(R10)	; last block xferred > eof?
	BLSSU	SETRSZ			; branch if not
	CMPL	R5,IFB$L_EBK(R10)	; 1st block past eof?
	BLSSU	20$			; branch if definitely not
	BGTRU	10$			; branch if yes
	TSTW	IFB$W_FFB(R10)		; 1st block is eof block
	BNEQ	20$			; branch if any bytes in use
					; (i.e., not yet eof)
;
;  past logical eof
;  reset numb to reflect the number of bytes transferred before logical eof.
;

10$:	RMSERR	EOF
20$:	SUBL3	R5,IFB$L_EBK(R10),R1	; get # full vbn's before eof
	BLSS	RETURN			; if < 0 just return (rsz = 0)
	ROTL	#9,R1,R1		; get # of bytes
	ADDW3	IFB$W_FFB(R10),R1,BDB$W_NUMB(R4) ; + last block offset = total # bytes
	BSBB	SETNBP			; reset next block pointer

;

SETRSZ:	MOVW	BDB$W_NUMB(R4),RAB$W_RSZ(R8) ; set length of read
RETURN:	RSB				; return to block i/o co-routine


;++
;
; handle errors
;
;--

ERRUSZ:	$PSECT_BR	L$RMS0
	RMSERR	USZ
	BRB	EXIT1
	$PSECT_RESTORE
ERRUBF:	$PSECT_BR	L$RMS0
	RMSERR	UBF

EXIT1:	CSB	#IRB$V_BIO_LAST, (R9)	; No buffers were released, so
					; don't consider this operation as last
	BRW	RM$EXRMS
	$PSECT_RESTORE

;++
;
;  handle $write errors
;
;--

ERRRBF:	$PSECT_BR	L$RMS0
	RMSERR	RBF			; bad buffer address
	BRB	EXIT1
	$PSECT_RESTORE

;++
;
;  handle eof error
;
;--

CHKEOF:	CMPW	R0,#RMS$_EOF&^XFFFF	; was error eof?
	BNEQ	RETURN			; branch if not
	TSTW	BDB$W_NUMB(R4)		; any input?
	BEQL	SETRSZ			; branch if none (it's eof)
	RMSSUC				; return success instead
	BRB	CHKLEOF			; go check for logical eof


;++
;
;  subroutine to set next block pointer
;
; inputs:
;	r9		irab addr
;	r5		starting vbn for xfer
;	r4		bdb addr
;	bdb$w_numb	# bytes xfered
;
;  outputs:
;	irb$l_nrp_vbn	vbn of block following last transferred
;	r1		last vbn xferred
;	r2		# bytes xferred in last blk
;
; \assumes vbn significant for disk devices only\
;--

SETNBP:	MOVZWL	BDB$W_NUMB(R4),R1	; get xfer len
	BICW3	#^XFE00,R1,R2		; get # bytes in last blk
	BNEQ	10$			; branch if non-zero
	MOVW	#512,R2			; must have been 512!
10$:	DECL	R1			; round down # bytes
	ASHL	#-9,R1,R1		; get # vbn's xferred - 1
	ADDL2	R5,R1			; set last vbn xferred
	ADDL3	R1,#1,IRB$L_NRP_VBN(R9)	; set nbp
	RSB
	.SBTTL	BLKIO - COMMON $READ - $WRITE ROUTINE

;++
; BLKIO - common block i/o read/write routine
;
;	this routine performs common $read - $write function
;	setup and cleanup.  it functions as a co-routine
;	so that the $read or $write routine need
;	merely do an rsb to execute the common
;	block i/o cleanup.
;
; Calling sequence:
;
;	BSBW	BLKIO
;
; Input Parameters:
;
;	r11	impure area address
;	r10	ifab addr
;	r9	irab addr
;	r8	rab addr
;	r7	user buffer addr
;	r6	user buffer length
;
; Implicit Inputs:
;
;	irb$l_curbdb
;	irb$l_nrp_vbn
;	rab$l_bkt
;	irb$w_bkpbits
;
; Output Parameters:
;
;	r5	vbn for 1st block of xfer
;	r4	current bdb addr
;	r0-r3	destroyed
;
; Implicit Outputs:
;
;	current bdb possibly released
;	new current bdb locked
;	bdb setup for xfer
;	rab$w_rfa set to starting vbn
;
; Completion Codes:
;
;	none.  exits rms if any errors.
;
; Side Effects:
;
;	bdb buffer information saved in irab,
;	hence co-routine must be called in
;	order to clean up on exit.
;--

BLKIO:

;
;  probe the user's buffer for appropriate access
;

	TSTW	R6			; zero length?
	BEQL	40$			; branch if yes (avoiding probe)
	MOVQ	R6,R4			; copy size and address
	CVTWL	#-512,R0		; addressing constant
10$:	BBS	#IRB$V_WRITE,(R9),20$	; branch if write
	PROBEW	#0,R4,(R5)		; probe writeability
	BNEQ	30$			; branch if o.k.
	BRB	ERRUBF			; go handle error
20$:	IFNORD	R4,(R5),ERRRBF		; branch if not readable
30$:	SUBL2	R0,R5			; get address of next page
	MOVAW	(R4)[R0],R4		; calculate new length
	BGTR	10$			; branch if more to probe
	SUBL2	R0,R4			; need to handle last page?
	BGTR	10$			; branch if yes
40$:

;
;  get block number for i/o
;

	MOVL	RAB$L_BKT(R8),R5	; get block #
	BNEQ	RELBDB			; branch if non-zero

;
; sequential operation indicated - set nbp from saved value
;

	MOVL	IRB$L_NRP_VBN(R9),R5
	TSTW	IRB$L_NRP_OFF(R9)
	BEQL	RELBDB
	BBC	#IRB$V_EOF,(R9),RELBDB
	INCL	R5

;
; release the current bdb if any, unless
; it is for this vbn and we're writing
;

RELBDB:
	MOVL	IRB$L_CURBDB(R9),R4	; get current bdb
	BEQL	GETBDB			; branch if none
	BBS	#IRB$V_BRO_SW,(R9),RELEASE ; always release if
					; record i/o operation last
	BBC	#IRB$V_WRITE,(R9),RELEASE ; always release on read
	CMPL	BDB$L_VBN(R4),R5	; same block?
	BEQL	SETBDB			; yes (omit release)

;
; must release bdb - use rm$wtlst1 for sequential org if irb$v_bro_sw set,
;  else rm$release
;

RELEASE:
	ASSUME	FAB$C_SEQ EQ 0
	TSTB	IFB$B_ORGCASE(R10)	; seq org?
	BNEQ	REL23			; branch if not
	BBC	#IRB$V_BRO_SW,(R9),GBDB0 ; branch if block i/o last
					; (omitting unneeded release)
	BSBW	RM$WTLST1		; release last block (with padding)
	BLBC	R0,RELERR		; branch on error
GBDB0:	MOVL	IRB$L_NXTBDB(R9),R4	; get bdb addr to use
	MOVL	R5,BDB$L_VBN(R4)	; and set vbn into it
	BRB	SETBDB

;
;  need merely get a bdb (no release required).  branch based on file org.
;

	ASSUME	FAB$C_SEQ EQ 0
GETBDB:	TSTB	IFB$B_ORGCASE(R10)	; seq. file org?
	BEQL	GBDB0			; branch if yes
	BRB	GBDB23			; branch for rel. and idx.

;
;  release last block for relative and indexed file orgs
;  and get a bdb for the new operation
;

REL23:
	CLRL	IRB$L_CURBDB(R9)	; note no bdb
GBDB23:	MOVAL	IFB$L_BDB_FLNK(R10), R4	; get bdb for operation
	ASSUME	BDB$L_FLINK EQ 0
10$:	MOVL	(R4), R4		; get next one.
	TSTW	BDB$W_USERS(R4)		; in use?
	BNEQ	10$			; NEQ then someone has it.
	INCW	BDB$W_USERS(R4)		; bump count (to 1)
	MOVL	R5, BDB$L_VBN(R4)	; note VBN to transfer.
SETBDB:
	MOVL	R4,IRB$L_CURBDB(R9)	; note new current bdb

;
; save size and address of buffer associated
; with bdb in rp field of irab
;

	MOVL	BDB$L_ADDR(R4),IRB$L_RP_VBN(R9)
	MOVW	BDB$W_SIZE(R4),IRB$W_RP_OFF(R9)

;
; store user-supplied buffer info
;

	MOVW	R6, BDB$W_SIZE(R4)
	MOVW	R6, BDB$W_NUMB(R4)
	MOVL	R7, BDB$L_ADDR(R4)
	MOVL	R5, RAB$W_RFA(R8)	; set rfa from vbn
	JSB	@(SP)+			; co-routine call for caller
;
; finish block i/o co-routine
;
; called when read or write does 'rsb'
;
; restore real buffer info
; (r0 has status code)
;

	MOVL	IRB$L_RP_VBN(R9),BDB$L_ADDR(R4)
	MOVW	IRB$W_RP_OFF(R9),BDB$W_SIZE(R4)
RELERR:	BICB2	#BDB$M_VAL!BDB$M_DRT,BDB$B_FLGS(R4) ; clear valid and dirty
	CLRL	BDB$L_VBN(R4)		; clear vbn field
	CLRW	BDB$W_USERS(R4)		; not is use now.
	CLRL	IRB$L_CURBDB(R9)	; say no bdb
EXIT:	BRW	RM$EXRMS
	.SBTTL	RMS$WRITE - $WRITE ROUTINE

;++
; RMS$WRITE - highest level block i/o write routine
;
; this routine performs the $write specific code.
; it checks the user's parameters, calls the
; common block i/o setup, writes the buffer
; awaiting completion, sets the next block
; pointer and exits via the common block i/o
; co-routine.
;
; Calling sequence:
;
; entered from exec as a result of user's calling
; sys$write (e.g., by using the $write macro).
;
; Input Parameters:
;
;	ap	user's argument list addr.
;
; Implicit Inputs:
;
; the contents of the various rab fields
; (see functional spec for detailed list).
;
; Output Parameters:
;
;	r0	status code
;	r1	destroyed
;
; Implicit Outputs:
;
;	various fields of the rab are filled in
;	to reflect the status of the $write operation.
;	(see rms functional spec for list.)
;
;	the irab is similarly updated.
;
;	a completion ast is queued if specified in the user arg list.
;
; Completion Codes:
;
;	standard rms.
;
; Side Effects:
;
;	if file was opened with 'bro' option specifying
;	mixed block and record i/o operations, the
;	current and next record context is destroyed.
;
; Notes:
;	since the UNIBUS disks only allow even sized transfers, we
;	must lie to the driver about how many bytes are to be transfered
;	if the user gives an odd-sized buffer.
;	Currently the only case that is handled is $WRITE operations where
;	the next byte after the user-buffer is accessible, so that we can
;	just write one more byte(!)  The EOF mark is however properly
;	maintained.  This case occurs for the $COPY command for stream files.
;	SOMEDAY, we should fix all cases!!!
;
;	Also see note in the READ routine header regarding BRO_SW and BIO_LAST.
;
;--

	$ENTRY	RMS$WRITE
	$TSTPT	WRITE
	$RABSET	FAC=IFB$V_PUT,BIO=1,CFLG=1

;
; get record size and address and probe the buffer
;

	MOVZWL	RAB$W_RSZ(R8),R6	; get size

;
;  cope with the inadequacies of certain block-structured devices that
;  only permit even sized transfers (e.g. RK06/7, RL01/2, RX01/2,...)
;  
	BBC	#DEV$V_RND,IFB$L_PRIM_DEV(R10),-
		5$			; block structured device?
	BLBC	R6,5$			; even size buffer?
	INCW	R6			; round buffer up if odd

5$:	MOVL	RAB$L_RBF(R8),R7	; get addr
	SSB	#IRB$V_WRITE,(R9)	; flag as write
	BSBW	BLKIO			; do common block i/o setup
	BBS	#IFB$V_DAP,(R10),NTWRITE ; branch if network operation
	BBC	#DEV$V_RND,IFB$L_PRIM_DEV(R10),WT1 ; branch if not disk
	ASSUME	FAB$C_SEQ EQ 0
	TSTB	IFB$B_ORGCASE(R10)	; is this the seq. file org?
	BNEQ	WRTBLK			; branch if not (no auto extend)

;
;  check for file extend needed
;

	DECL	R6			; round down # of bytes
	ASHL	#-9,R6,R2		; get # blks to xfer - 1
	ADDL2	R5,R2			; get ending vbn for xfer
	SUBL2	IFB$L_HBK(R10),R2	; compute # blocks to extend
	BGTRU	EXTEND			; and branch if > 0
WRTBLK:	BSBW	RM$WTBUFWT		; write the block
	BLBC	R0,10$			; branch on error

;
; if requested block is past current eof, reset eof
;
	MOVW	RAB$W_RSZ(R8),-		; reset transfer size
		BDB$W_NUMB(R4)		; to number of real bytes
	BSBW	SETNBP			; set next block pointer
	BBS	#RAB$V_TPT+ROP,(R8),20$	; branch if new eof wanted
	CMPL	IFB$L_EBK(R10),R1	; past eof?
	BGTRU	10$			; branch if not
	BLSSU	5$			; branch if definite yes
	CMPW	R2,IFB$W_FFB(R10)	; past current eof byte?
	BLEQU	10$			; branch if not

;
;  store the new eof
;

5$:	SSB	#IFB$V_RW_ATTR,(R10)	; flag attribute rewrite needed
	CMPW	R2,IFB$W_DEVBUFSIZ(R10)	; is last block full?
	BLSSU	7$			; branch if not
	CLRW	R2			; yes - clear offset in block
	INCL	R1			; and bump eof vbn
7$:	MOVL	R1,IFB$L_EBK(R10)
	MOVW	R2,IFB$W_FFB(R10)
10$:	RSB

;
;  verify tpt option allowed by fac
;

20$:	BBS	#FAB$V_TRN,IFB$B_FAC(R10),5$ ; branch if allowed
	$PSECT_BR	L$RMS0
	RMSERR	FAC			; give error
	RSB				; and return to co-routine
	$PSECT_RESTORE

;
;  write for non disk devices
;

WT1:	BSBW	RM$WTBUFWT
	BLBC	R0,10$			; go away if error
	BBC	#DEV$V_SQD,IFB$L_PRIM_DEV(R10),10$ ; if magtape
	SSB	#IRB$V_EOF,(R9)		; set the eof bit
10$:
	RSB

;
;  extend file (i.e., for disk only)
;

EXTEND:	BSBW	RM$AUTOEXTEND
	BLBS	R0,WRTBLK		; if successful, rewrite
	RSB

;++
;
;  perform network write function
;
;--

NTWRITE:
	JSB	NT$WRITE		; write the block
	BLBC	R0,10$			; branch on error
	BSBW	SETNBP			; update next block pointer
10$:	RSB				; return to co-routine

;++
;
;  perform network read function
;
;--

NTREAD:
	JSB	NT$READ			; read the block
	BLBC	R0,10$			; branch on error
	BSBW	SETNBP			; update next block pointer
	BRW	SETRSZ			; rejoin mainline
10$:	BRW	CHKEOF			; branch aid

	.END
