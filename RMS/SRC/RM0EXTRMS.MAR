	$BEGIN	RM0EXTRMS,024,$RMS1,<CLEANUP AND RETURN ROUTINE>,<NOWRT,QUAD>

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; Facility: rms32
;
; Abstract:
;		this routine performs final cleanup and sets
;		status codes appropriately, generates user-level
;		asts as required, and exits rms returning to
;		the user via the exec.
;
; Environment:
;		star processor running starlet exec.
;
; Author:	L F Laverdure,	 creation date: 5-JAN-1977
;
; Modified By:
;
;	V024	JWH0001		Jeffrey W. Horn	12-Feb-1982
;		If no IFAB ASB is present, don't try to deallocate
;		it.  This fixes a bug that occurred when context was
;		kept between RMS/Network calls.
;
;	V023	TMK0011		Todd M. Katz	06-Nov-1981
;		Take out all checks for rundown in progress
;		in determining whether or not to deliver user
;		ASTs since we will never be in rundown when there
;		is a possibility of delivering one. The TYPE abort
;		problem will be handled within DCL.
;
;	V022	PSK0006		P S Knibbe	26-Aug-1981
;		Fix broken branches
;
;	V021	PSK0005		P S Knibbe	3-Aug-1981
;		If we are in rundown, don't deliver user AST's
;		(Reinstate V018)
;
;	V020	CDS0004		C D Saether	9-Mar-1981	13:45
;		Further correction to v019 and remove v018.
;
;	V019	CDS0003		C D Saether	26-Feb-1981	22:40
;		Make sure something is in r9 calling rls_sifab.
;
;	V018	PSK0001		Paulina Knibbe	06-Feb-1981
;		If we are doing an I/O rundown, don't issue
;		the users AST's. They only confuse things.
;
;	V017	REFORMAT	Ken Henderson	29-JUL-1980	14:17
;		code was reformatted
;
;	V016	RAN0012		R A Newell	12-MAR-1979	 8:30
;		don't clear ifb$v_busy until after file sharing code
;
;	V015	CDS0002		C D Saether	26-FEB-1979	18:40
;		don't clobber ap on way out when shared
;
;	V014	CDS0001		C D Saether	5-FEB-1979	11:43
;		new entry point for errors on connect
;
;	V013	RAN0004		R A Newell	4-JAN-1979	14:56
;		don't release sifab unless we have it
;
;	V012	RAN0003		R A Newell	4-JAN-1979	14:55
;		file sharing code enhancements
;
; REVISION HISTORY:
;
;	L F Laverdure,      10-OCT-1978  13:26	; file sharing modifications
;
;	L F Laverdure,      11-MAY-1978  15:50
; 01	-
;--


	.SBTTL	DECLARATIONS

;
; Include Files:
;

;
; Macros:
;

	$IFBDEF
	$ASBDEF
	$IRBDEF
	$RABDEF
	$FABDEF
	$IMPDEF
	$PIODEF
	$PSLDEF
	$RMSDEF
	$SIFBDEF
	$FRBDEF

;
; Equated Symbols:
;

;
; Own Storage:
;


	.SBTTL	RM$EXTRMS - EXIT RMS ROUTINE

;++
; RM$EX_NOSTR
; RM$EX_NIRAB_SHR
; RM$EXSUC
; RM$EXRMS
;
;  this routine cleans up rms structures and returns
;  to the user via the exec. there are three entry points as follows:
;
;	1. rm$exsuc	exit with success
;	2. rm$exrms	exit with status code in r0
;	3. rm$ex_nostr	exit with status code in r0
;			but without a valid ifab or irab
;			(in this case ap must point to user's argument
;			 list and r7 must contain user's mode)
;
;  the following functions are performed:
;
;	1. clear busy and restore the argument list pointer
;	2. prefix the rms32 facility code to the status
;	   code (16 bits) in r0 and store in sts
;	3. generate a user level completion ast if appropriate
;	4. re-enable rms internal asts
;	5. return to the user via the exec (ret)
;
; Calling sequence:
;
;	entered via jump to the appropriate entry point
;
; Input Parameters:
;
;	r0	status code (unless entry at rm$exsuc)
;		note: stv must be set already.
;	r8	user structure addr (fab or rab)
;	r9	internal structure addr (ifab or irab)
;		(not an input for entry at rm$ex_nostr)
;	r10	ifab address (if r9 is irab address)
;	r7	caller's mode (only if entry at rm$ex_nostr)
;	r11	impure area addr
;	ap	arglist addr (only if entry at rm$ex_nostr)
;
; Implicit Inputs:
;
;	none
;
; Output Parameters:
;
;	r0	full 32-bit rms status code
;
; Implicit Outputs:
;
;	the busy bit for the internal structure is cleared,
;	sts is set to the status code.
;
; Completion Codes:
;
;	standard rms
;
; Side Effects:
;
;	internal rms asts are re-enabled.
;
;--

;++
;
;  although the following offsets in the code
;  refer to the fab or ifab, the code works equally well
;  for the rab and irab as the definitions are equivalent
;
;--

	ASSUME	IFB$V_BUSY EQ IRB$V_BUSY
	ASSUME	IFB$L_ARGLST EQ IRB$L_ARGLST
	ASSUME	IFB$B_MODE EQ IRB$B_MODE
	ASSUME	FAB$L_STS EQ RAB$L_STS
	ASSUME	FAB$L_STV EQ RAB$L_STV

	$QUAD_ALIGN	.+7		; align rm$exrms entry point

;
;FOR GOOD PERFORMANCE
;



;++
;
;  entry point if exiting without r9 pointing to a valid internal structure
;	(ap=arglist addr, r7=caller's mode)
;--

RM$EX_NOSTR::
	CLRL	R9			; make sure r9 is 0
	BRB	SETSTS			; go set sts into fab/rab

;++
;
;  entry point to return a status code of success
;
;--

RM$EXSUC::
	RMSSUC

;++
;
;  entry point to clean up the internal structure
;  by clearing busy and restoring the user's ap
;
;--

RM$EXRMS::

;
; this line moved down to 30$ because rls_sifab and rls_ppq use ap
;	movl	ifb$l_arglst(r9),ap		;restore user ap
;

	ASSUME	IRB$B_BID EQ IFB$B_BID
	ASSUME	<IRB$C_BID&1> EQ 0
	ASSUME	<IFB$C_BID&1> EQ 1
	BLBS	IFB$B_BID(R9),10$	; branch if ifab
	MOVL	IFB$L_FRB_PTR(R10),R5	; get frb address
	BEQL	SETAP			; branch if none
	BRB	SHR_RLS			; release shared resources
10$:	MOVL 	IFB$L_FRB_PTR(R9),R5	; get frb address
	BNEQ	SHR_RLS			; release shared resources
SETAP:
	MOVL	IFB$L_ARGLST(R9),AP	; restore user ap
	CSB	#IFB$V_BUSY,(R9)	; clear the busy flag
;++
;
;  add the facility code to the 16-bit error code and store in sts
;
;--

SETSTS:	SSB	#16,R0			; add rms facility code
	MOVL	R0,FAB$L_STS(R8)	; and store in fab/rab

;++
;
;  if at ast level, go check for setting rms async i/o event flag
;  and return of ifab asb
;  (not necessary otherwise since no stall has occurred)
;
;--

	ASSUME	IMP$W_RMSSTATUS EQ 0
	BBSC	#IMP$V_AST,(R11),SETEFN	; clear at ast level, branch if there
	CMPB	(AP),#1			; completion routine speced?
	BGTRU	CHKAST			; branch if yes

;++
;
;  re-enable asts by clearing the ast inhibit bit
;  and if bit already clear perform an enable asts directive
;
;--

ENBAST:	BBCC	#PIO$V_INHAST,@#PIO$GW_STATUS,20$; branch if ast cleared
	RET				; exit rms


;++
;
;  must re-enable asts
;
;--

20$:	$SETAST_S	#1
	MOVL	FAB$L_STS(R8),R0	; restore status code
	RET				; exit rms


SHR_RLS:
	BSBB	RLS			; release shared file resources
	BRB	SETAP

;
; this is an entry point for rm2conn and rm3conn on errors instead of
; to ex_nostr. the irab has been deallocated.  Also from disconnect.
;  ap= arglist addr, r7=mode, r10=ifab
;

RM$EX_NIRAB_SHR::
	MOVL	IFB$L_FRB_PTR(R10),R5	; get frb address
	BEQL	10$			; branch if none
	MOVL	R10,R9			; put ifab into r9 in case rls_sifab stalls
	SSB	#IFB$V_BUSY,(R10)	; note ifab busy in case of stall
	BSBB	RLS			; release shared resources
	CSB	#IFB$V_BUSY,(R10)	; clear busy
10$:	CLRL	R9			; make sure R9 is cleared
	BRB	SETSTS			; and finish up

RLS:	PUSHL	R0			; save r0
	MOVL	FRB$L_SIFAB_PTR(R5),R0	; get sifab address
	CMPL	SIFB$L_FRB_FLNK(R0),R5	; do we own it?
					; (don't on some error paths)
	BEQL	27$			; bypass releasing them
	MOVAL	SIFB$L_TEMP_FRB(R0),R1	; get address of temp frb
	CMPL	R1,SIFB$L_FRB_FLNK(R0)	; owned by temp as on some errs
	BNEQ	29$			; branch if not
27$:	BSBW	RM$RLS_SIFAB		; release the sifab
29$:	BSBW	RM$RLS_PPQ		; release the per process queue
	POPL	R0			; restore r0
30$:
	RSB

;++
;
;  user argument count was greater than 1.  therefore must check to see
;  whether or not we must generate an ast for an error or success completion
;  routine.
;
;--

CHKAST:	BLBC	R0,10$			; branch on failure
	CMPB	(AP),#3			; is there a success routine?
	BLSSU	ENBAST			; branch if not
10$:	BSBB	CHECK_AST		; generate ast if needed
	BRB	ENBAST			; and continue




;++
;
;  at ast level, therefore this operation must have stalled before completing.
;  must:
;	1. generate user ast if indicated
;	2. check for deallocation of sync event flag or setting of async event flag
;	3. check for deallocation of ifab asb
;
;--

	ASSUME	<IFB$C_BID&1> EQ 1
	ASSUME	<IRB$C_BID&1> EQ 0
	ASSUME	IFB$B_BID EQ IRB$B_BID
	ASSUME	IRB$V_ASYNC EQ IFB$V_ASYNC

SETEFN:	BSBB	CHECK_AST		; generate completion ast if needed
	TSTL	R9			; zero ifab/irab addr?
	BEQL	SETIOR			; branch if yes

;
;(NOTE: THIS INDICATES THAT WE
; have just deallocated the ifab
; or irab in $close or $disconnect)
; (assumes async efn must be set)
;

	BBS	#IRB$V_ASYNC,(R9),ASYNCEFN; branch if async i/o

;++
;
;  deallocate the synchronous event flag
;
;--

	ASSUME	IFB$B_EFN EQ IRB$B_EFN
	SUBB2	#IMP$C_SYNCEFN,IRB$B_EFN(R9); was it normal efn?
	BNEQ	TRYEFN2			; branch if not
	BICB2	#1@PIO$V_SYNC1,@#PIO$GW_STATUS; deallocate the efn

;++
;
;  check for ifab and branch if so to deallocate the asb
;
;--

CHKIFB:	BLBS	IRB$B_BID(R9),RETASB	; branch if ifab

;
;(HAS ALWAYS STALLED IF IN AST)
;

RETURN:	BBS	#IMP$V_IORUNDOWN,(R11),SETIOR; branch if i/o rundown in progress
	RET				; exit rms


;++
;
;  synchronous operation but not 1st sync. event flag.
;  check for deallocation of alternate synchronous event flag
;
;--

TRYEFN2:
	DECB	IRB$B_EFN(R9)		; was it sync efn 2?
	BNEQ	10$			; branch if not (must be sync efn 3)
	BICB2	#1@PIO$V_SYNC2,@#PIO$GW_STATUS; yes - deallocate efn
10$:	CLRB	IRB$B_EFN(R9)		; show no efn alllocated
	BRB	CHKIFB

;++
;
;  check for setting of 'wait for async i/o' event flag
;
;--

ASYNCEFN:
	BBCC	#IRB$V_ASYNCWAIT,(R9),RETURN; branch if no wait issued
SETIOR:
	ASSUME	IMP$C_IOREFN EQ IMP$C_ASYEFN
	$SETEF_S	#IMP$C_ASYEFN	; kick off the stalled wait
	RET				; exit rms
;++
;
;  return the ifab's asb (if any) as operation is now complete
;
;--

RETASB:	MOVL	IFB$L_ASBADDR(R9),R4	; get asb addr
	BEQL	RETURN			; don't try to return if not present
	MOVL	R11,R3			; free space header at start of this page
	MOVZBL	#ASB$C_BLN_FAB,R2	; get asb length
	BSBW	RM$RETSPC		; free it up
	CLRL	IFB$L_ASBADDR(R9)	; show no asb
	BRB	RETURN


;++
;
;  routine to generate a user-level comletion ast if appropriate routine included
;
;  revalidate the user's argument list and check for completion routines
;
;--

CHECK_AST:
	TSTL	R9			; is this a structureless entry?
	BEQL	1$			; branch if yes
	MOVZBL	IFB$B_MODE(R9),R7	; get mode
1$:	IFNORD	#12,(AP),10$,R7		; branch if no access to arg list
	CMPB	(AP),#2			; completion routine speced?
	BLSSU	10$			; branch if none
	BLBS	R0,2$			; branch if successful return
	MOVAL	@8(AP),R1		; get error completion routine addr
	BRB	5$

;
;  check for successful completion routine present
;

2$:	BEQL	10$			; branch if just 2 params
					; (implies no success routine)

	IFNORD	#16,(AP),10$,R7		; branch if not readable
	MOVAL	@12(AP),R1		; get routine addr

;
;  and generate a user level ast
;

5$:	BEQL	10$			; branch if no routine
	$DCLAST_S	ASTADR=(R1),ASTPRM=R8,ACMODE=R7
	BLBC	R0,20$			; branch on error
	MOVL	FAB$L_STS(R8),R0	; restore status code
10$:	RSB				; return


;++
;
;  we received a no memory for ast error.  alter primary error code to rms$_cda,
;  setting stv to the previous contents of sts.
;
;--

20$:	$PSECT_BR	L$RMS0
	MOVL	FAB$L_STS(R8),FAB$L_STV(R8)
	MOVL	#RMS$_CDA,R0
	MOVL	R0,FAB$L_STS(R8)
	RSB
	$PSECT_RESTORE

	.END
