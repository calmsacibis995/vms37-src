
MODULE RM3NRP (LANGUAGE (BLISS32) ,
		IDENT = 'V03-000'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:	RMS32 INDEX SEQUENTIAL FILE ORGANIZATION
!
! ABSTRACT:
!                ROUTINES TO UPDATE THE NRP LIST IN THE CASE OF A SPLIT
!
!
! ENVIRONMENT:
!
!		VAX/VMS OPERATING SYSTEM
!
!--

!
! AUTHOR:        Wendy Koenig	     CREATION DATE:        	27-JUL-78  14:23
!
! Modified by:
!
!	V02-010	MCN0001		Maria del C. Nasr	27-May-1981
!		More changes to support prologue 3 files.
!		Increase size of record identifier to a word in NRP.
!
!	V02-009	CDS0001		C Saether	28-Aug-1980	17:00
!		Fix bug scanning up to previous record in bucket.
!
!	V02-008	REFORMAT	C Saether	01-Aug-1980	21:41
!
!
! REVISION HISTORY:
!
!   Wendy Koenig, 	25-SEP-78  10:00
!   X0002 - DON'T UPDATE RP ON SPLIT
!
!   Wendy Koenig, 	12-OCT-78  14:44
!   X0003 - PUT ALL THE NRP STUFF IN THIS MODULE
!
!   Wendy Koenig, 	24-OCT-78  14:02
!   X0004 - MAKE CHANGES CAUSED BY SHARING CONVENTIONS
!
!   Wendy Koenig, 	3-NOV-78  11:35
!   X0005 - ADD ROUTINE RM$ID_AND_NRP
!
!   Wendy Koenig, 	13-NOV-78  13:41
!   X0006 - SHARING IMPLEMENTATION CHANGES
!
!   Christian Saether, 	15-DEC-78  13:38
!   X0007 - fix looping loop in preupd_nrp when previous record deleted
!
!*****

LIBRARY 'RMSLIB:RMS';

REQUIRE 'RMSSRC:RMSIDXDEF';

!
! define default psects for code
!

PSECT
    CODE = $$RMSSPLIT3(PSECT_ATTR),
    PLIT = $$RMSSPLIT3(PSECT_ATTR);

! Linkages
!

LINKAGE
    L_ID_AND_NRP,
    L_UPD_NRP,
    L_SET_UPDATE,
    L_PREUPD_NRP,
    L_FIND_BY_ID,
    L_SELECT_VBN,
    L_CODE_VBN,
    L_ZERO_NRP,
    L_GETNEXT_REC;

!
! Forward Routines

FORWARD ROUTINE
    RM$ID_AND_NRP	: RL$ID_AND_NRP NOVALUE,
    RM$SET_UPDATE	: RL$SET_UPDATE NOVALUE,
    RM$PREUPD_NRP	: RL$PREUPD_NRP NOVALUE,
    RM$SELECT_VBN	: RL$SELECT_VBN,
    RM$CODE_VBN	: RL$CODE_VBN,
    RM$ZERO_NRP	: RL$ZERO_NRP NOVALUE,
    RM$UPD_NRP	: RL$UPD_NRP NOVALUE;

!
!
! External Routines

EXTERNAL ROUTINE
    RM$FIND_BY_ID	: RL$FIND_BY_ID,
    RM$GETNEXT_REC	: RL$GETNEXT_REC;

!
!
!
ASSUME_C( %QUOTE SIFB$L_NRP_LIST, %QUOTE IFB$L_NRP_LIST);
!
!


GLOBAL ROUTINE RM$UPD_NRP (VBN) : RL$UPD_NRP NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	after the original bucket has been successfully updated
!	and written out, it's now o.k. to officially update the nrp list
!	and release it for general consumption
!
! CALLING SEQUENCE:
!	bsbw rm$upd_nrp (vbn)
!
! INPUT PARAMETERS:
!	VBN of bucket that has been updated
!
! IMPLICIT INPUTS:
!	IFAB -- pointer to nrp list
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	nothing
!
! SIDE EFFECTS:
!	the nrp list entries are updated to reflect the changes
!	all such entries are now unlocked
!	NOTE:	the rp field in the nrp list does not have to be updated at this
!		time. the rp field is always the rrv of the actual data record
!		which is good for the life of the file and never changes
!		it was put in the nrp list to cover the no-rfa file which
!		has not been implemented for release 1.5
!
!--

    BEGIN

    !
    !

    EXTERNAL REGISTER
	R_IRAB_STR,
	R_IFAB_STR;

    LOCAL
	PTR	: REF BBLOCK;

    ! if there is nothing to update, just return
    !

    IF NOT .IRAB[IRB$V_UPD_NRP]
    THEN
	RETURN;

    ! use ptr as a temporary local to decide where to get the nrp list pointer
    ! from if we're sharing, get it from the shared ifab, otherwise from the
    ! ifab
    !
    PTR = .IFAB;

    IF .IFAB[IFB$L_FRB_PTR] NEQ 0
    THEN
	PTR = .BBLOCK[.IFAB[IFB$L_FRB_PTR], FRB$L_SIFAB_PTR];

    ! now get the head of the list into ptr
    !
    PTR = .PTR[IFB$L_NRP_LIST];

    ! scan through the whole nrp list (maybe someday just a list of pertinent
    ! entries) finding those entries which have been readied for updating
    ! and update them the UPD_NRP flag in conjunction with a match on VBN marks
    ! those cells which are updated by this routine
    !

    WHILE .PTR NEQ 0
    DO
	BEGIN

	IF .PTR[NRP$V_UPD_NRP]
	THEN

	    IF .PTR[NRP$L_VBN] EQLU .VBN
	    THEN
		BEGIN
		PTR[NRP$V_UPD_NRP] = 0;
		PTR[NRP$W_ID] = .PTR[NRP$W_NEW_NRP];
		PTR[NRP$L_VBN] = RM$SELECT_VBN(.PTR[NRP$V_NEW_VBN], .VBN);

		IF .PTR[NRP$V_NEW_DEL]
		THEN
		    PTR[NRP$V_DELETED] = 1;

		IF .PTR[NRP$V_NEW_BEG]
		THEN
		    PTR[NRP$V_BEGINNING] = 1;

		PTR[NRP$W_DUP_POS] = .PTR[NRP$W_NEW_POS];
		END;

	PTR = .PTR[NRP$L_LINK];
	END;

    RETURN;

    END;					! { end of rm$upd_nrp }


GLOBAL ROUTINE RM$PREUPD_NRP (REC_A, VBN, ID) : RL$PREUPD_NRP NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine prepares updates of the NRP list to reflecting the deletion of records.
!	The actual update takes place after the successful write of UDR bucket.
!
! CALLING SEQUENCE:
!	RM$PREUPD_NRP(VBN,ID)
!
! INPUT PARAMETERS:
!	VBN			- VBN of record or array element being deleted
!	ID			- ID of record or array element being deleted
!	REC_A			- positioned to record that is being deleted
!	AP<0,16>		- position within SIDR of array element being deleted
!				  (only applies to secondary keys)
!	AP<16,1>		- set if entire SIDR being deleted
!
! IMPLICIT INPUTS:
!	IDX_DFN		- address of index descriptor for current key of reference
!		[IDX$B_KEYREF]	- key of reference
!	BKT_ADDR		- address of bucket containing record about to
!				  be deleted
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NRP fields set to reflect delete about to be made
!	if update is no longer needed ( no id,dup_pos matches) NRP_UPD is cleared
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
!--

    BEGIN

    BUILTIN
	AP;

    GLOBAL REGISTER
	R_REC_ADDR_STR;

    MACRO
	DUP_POS = AP<0,16>%,
	DEL_SIDR = AP<16,1>%;

    EXTERNAL REGISTER
	R_IFAB_STR,
	R_IRAB_STR,
	R_IDX_DFN_STR,
	R_BKT_ADDR_STR;

    LOCAL
	PREV_ID,
	FLAG,			! indicates if further update is needed
	NRP	: REF BBLOCK;	! address of current element in NRP list

    REC_ADDR = .REC_A;

    ! if there's nothing to do just return
    !

    IF NOT .IRAB[IRB$V_UPD_NRP]
    THEN
	RETURN;

    ! use nrp as a temporary to decide where to get the nrp list pointer from
    !
    !
    NRP = .IFAB;

    IF .IFAB[IFB$L_FRB_PTR] NEQ 0
    THEN
	NRP = .BBLOCK[.IFAB[IFB$L_FRB_PTR], FRB$L_SIFAB_PTR];

    ! now pick up the nrp list pointer
    !
    NRP = .NRP[IFB$L_NRP_LIST];			! pickup start of list
    FLAG = 0;

    ! If this is the primary key or the entire SIDR record is beging deleted,
    ! it is necessary to find the previous record's ID.  If at beginning
    ! of bucket, set flag.  This is being called with the record to be deleted
    ! not marked deleted yet.  This loop will attempt to position to the first
    ! record prior to the one being deleted that is not also marked deleted.
    ! If the record to be deleted is the first non-deleted record in the bucket
    ! itself then that fact is noted so that the NEW_BEG flag is set later.
    !

    IF .IDX_DFN[IDX$B_KEYREF] EQL 0
	OR
	.DEL_SIDR			! entire SIDR record is being deleted
    THEN
	BEGIN

	LOCAL
	    S_REC_ADDR;

	BIND
	    PREV_REC = PREV_ID	: REF BBLOCK;

	PREV_REC = .REC_ADDR;			! initialize for first scan

	WHILE 1
	DO
	    BEGIN
	    S_REC_ADDR = .PREV_REC;		! scan up to previous record
	    REC_ADDR = .BKT_ADDR + BKT$C_OVERHDSZ;

	    UNTIL .REC_ADDR EQLU .S_REC_ADDR
	    DO
		BEGIN
		PREV_REC = .REC_ADDR;
		RM$GETNEXT_REC();
		END;

	    ! If the previous record is not deleted and we aren't at the
	    ! beginning of the bucket, that's the one we want, else if we
	    ! are at the beginning of the bucket, mark the id special so we'll
	    ! catch it a little further on and set the 'beginning' flag.
	    !

	    IF NOT .PREV_REC[IRC$V_DELETED]
	    THEN
		BEGIN

		IF .REC_ADDR EQLU (.BKT_ADDR + BKT$C_OVERHDSZ)
		THEN
		    PREV_ID = %X'10000'
		ELSE
		    PREV_ID = IRC$_ID(PREV_REC);

		EXITLOOP
		END;

	    ! The previous record is deleted.  If it's also at the beginning
	    ! of the bucket it means we couldn't find any non-deleted records
	    ! in front of us, therefore note that so the 'beginning' flag
	    ! flag will be set further on.  Otherwise we go around again
	    ! to find the record in front of this one.
	    !
	    
	    IF .PREV_REC EQLU (.BKT_ADDR + BKT$C_OVERHDSZ)
	    THEN
		BEGIN
		PREV_ID = %X'10000';
		EXITLOOP
		END;
	    END;

	REC_ADDR = .S_REC_ADDR;
	END;

    ! Go thru rest of NRP list, starting with first one that needs update,
    !  setting up for update of record pointer.
    !

    DO
	BEGIN

	IF .VBN EQL .NRP[NRP$L_VBN]
	THEN
	    BEGIN

	    IF .ID<0, 16> EQL .NRP[NRP$W_ID]
		AND
		(.IDX_DFN[IDX$B_KEYREF] EQL 0
		OR
		.DUP_POS LEQU .NRP[NRP$W_NEW_POS])
	    THEN
		BEGIN

		! An update is necessary.  Initialize all fields that apply.
		!
		FLAG = 1;
		NRP[NRP$V_UPD_NRP] = 1;

		IF (.IDX_DFN[IDX$B_KEYREF] EQL 0
		    OR
		    .DEL_SIDR)
		THEN
		    BEGIN
		    NRP[NRP$V_NEW_DEL] = 1;

		    IF .PREV_ID<16, 1>
		    THEN
			NRP[NRP$V_NEW_BEG] = 1;

		    NRP[NRP$W_NEW_NRP] = .PREV_ID<0, 16>
		    END
		ELSE
		    BEGIN
		    IF .DUP_POS EQL .NRP[NRP$W_NEW_POS]
		    THEN
			NRP[NRP$V_NEW_DEL] = 1
		    ELSE
			NRP[NRP$W_NEW_POS] = .NRP[NRP$W_NEW_POS] - 1;
		    END;

		END;

	    END;

	NRP = .NRP[NRP$L_LINK];
	END
    UNTIL .NRP EQL 0;

    ! if no id match, no more updates needed
    !

    IF NOT .FLAG
    THEN
	IRAB[IRB$V_UPD_NRP] = 0;

    RETURN;

    END;					! { end of preupd_nrp }


GLOBAL ROUTINE RM$SELECT_VBN (VALUE, VBN) : RL$SELECT_VBN =

!++
!
! FUNCTIONAL DESCRIPTION:
!
! converts the 0,1,2,3 which was stored in the rrv table into a relevant vbn
! NOTE: code_vbn and select_vbn are complimentary routines. outside
! of these routines only one other routine has any knowledge of the
! coded values assocaiated w/ new_vbn. this is the routine rm$id_and_nrp.
!
! CALLING SEQUENCE:
!	bsbw rm$select_vbn (value,vbn)
!
! INPUT PARAMETERS:
!	value -- 0,1,2,3 from the table entry
!	vbn -- if value is 0, vbn is the value we want returned
!
! IMPLICIT INPUTS:
!	IRAB -- vbn_right, vbn_mid, rfa_vbn
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	the actual vbn associated w/ this entry
!
! SIDE EFFECTS:
!	NONE
!
!--

    BEGIN

    EXTERNAL REGISTER
	R_IRAB_STR;

    RETURN (

	CASE .VALUE FROM 0 TO 3 OF
	    SET
	    [0] : .VBN;
	    [1] : .IRAB[IRB$L_VBN_RIGHT];
	    [2] : .IRAB[IRB$L_VBN_MID];
	    [3] : .IRAB[IRB$L_RFA_VBN];
	    TES);

    END;


GLOBAL ROUTINE RM$CODE_VBN (VBN) : RL$CODE_VBN =

!++
!
! FUNCTIONAL DESCRIPTION:
!
! converts the new vbn into a 1,2,3 to be stored away temporarily
! NOTE: code_vbn and select_vbn are complimentary routines. outside
! of these routines only one other routine has any knowledge of the
! coded values assocaiated w/ new_vbn. this is the routine rm$id_and_nrp.
!
! CALLING SEQUENCE:
!	bsbw rm$code_vbn (vbn)
!
! INPUT PARAMETERS:
!	the new vbn
!
! IMPLICIT INPUTS:
!	IRAB -- vbn_right, vbn_mid, rfa_vbn
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	1,2,3
!
! SIDE EFFECTS:
!	NONE
!
!--

    BEGIN

    EXTERNAL REGISTER
	R_IRAB_STR;

    RETURN (

	SELECTONE .VBN OF
	    SET
	    [.IRAB[IRB$L_VBN_RIGHT]] : 1;
	    [.IRAB[IRB$L_VBN_MID]] : 2;
	    [.IRAB[IRB$L_RFA_VBN]] : 3;
	    TES);

    END;					! { end of code_vbn }


GLOBAL ROUTINE RM$ZERO_NRP : RL$ZERO_NRP NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	determine if the nrp list needs updating at all
!	if it does, zeros out the entries which need to be updated
!
! CALLING SEQUENCE:
!	bsbw rm$zero_nrp
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	IFAB -- pointer to nrp list
!	IRAB -- curbdb, vbn of original bucket
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	UPD_NRP set/cleared
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	pertinent entries have had their update fields zeroed
!	NOTE:	the rp field in the nrp list does not have to be updated at this
!		time. the rp field is always the rrv of the actual data record
!		which is good for the life of the file and never changes
!		it was put in the nrp list to cover the no-rfa file which
!		has not been implemented for release 1.5
!
!--

    BEGIN

    EXTERNAL REGISTER
	R_IFAB_STR,
	R_IRAB_STR;

    LOCAL
	PTR	: REF BBLOCK;

    ! scan through the nrp list to determine if updating is needed also, more
    ! importantly set the update flags so that the second update routine can
    ! know whether or not we really want to update
    !
    IRAB[IRB$V_UPD_NRP] = 0;

    ! use pointer as a temporary to decide where to get the nrp list pointer
    ! from
    !
    PTR = .IFAB;

    IF .IFAB[IFB$L_FRB_PTR] NEQ 0
    THEN
	PTR = .BBLOCK[.IFAB[IFB$L_FRB_PTR], FRB$L_SIFAB_PTR];

    ! now pick up the list pointer from the appropriate place
    !
    PTR = .PTR[IFB$L_NRP_LIST];

    WHILE .PTR NEQ 0
    DO
	BEGIN

	IF .PTR[NRP$L_VBN] EQLU .BBLOCK[.IRAB[IRB$L_CURBDB], BDB$L_VBN]
	THEN
	    BEGIN
	    IRAB[IRB$V_UPD_NRP] = 1;
	    PTR[NRP$V_NEW_VBN] = 0;
	    PTR[NRP$V_UPD_NRP] = 0;
	    PTR[NRP$W_NEW_NRP] = .PTR[NRP$W_ID];
	    PTR[NRP$V_NEW_DEL] = 0;
	    PTR[NRP$V_NEW_BEG] = 0;
	    PTR[NRP$W_NEW_POS] = .PTR[NRP$W_DUP_POS];
	    END;

	PTR = .PTR[NRP$L_LINK]

	! {end of while loop to determine if nrp updating is neccessary }
	!
	!
	END;

    RETURN;

    END;					! { end of zero_nrp }


GLOBAL ROUTINE RM$SET_UPDATE (BKT_ADDR) : RL$SET_UPDATE NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	scan the nrp list, setting up the update fields
!
! CALLING SEQUENCE:
!	bsbw rm$set_update (bkt_addr)
!
! INPUT PARAMETERS:
!	address of the new bucket
!
! IMPLICIT INPUTS:
!	IFAB -- pointer to nrp list
!	REC_ADDR -- to get the old id of the record under consideration
!	IRAB -- curbdb to get the old vbn
!	AP -- the code for the new vbn
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	for all entries in the nrp list that apply to records that are
!	moving, the new id and new vbn fields are filled in
!	NOTE:	the rp field in the nrp list does not have to be updated at this
!		time. the rp field is always the rrv of the actual data record
!		which is good for the life of the file and never changes
!		it was put in the nrp list to cover the no-rfa file which
!		has not been implemented for release 1.5
!
!--

    BEGIN

    EXTERNAL REGISTER
	R_IFAB_STR,
	R_IRAB_STR,
	R_REC_ADDR_STR;

    BUILTIN
	AP;

    MAP
	BKT_ADDR	: REF BBLOCK;

    LOCAL
	PTR	: REF BBLOCK;

    ! if there is nothing to do just return
    !

    IF NOT .IRAB[IRB$V_UPD_NRP]
    THEN
	RETURN;

    ! use pointer as a temporary to decide where to get the list pointer from
    !
    PTR = .IFAB;

    IF .IFAB[IFB$L_FRB_PTR] NEQ 0
    THEN
	PTR = .BBLOCK[.IFAB[IFB$L_FRB_PTR], FRB$L_SIFAB_PTR];

    ! now pick up the pointer from the appropriate place
    !
    PTR = .PTR[IFB$L_NRP_LIST];

    IF .IFAB[IFB$B_PLG_VER] LSSU PLG$C_VER_3
    THEN
	BEGIN

	WHILE .PTR NEQ 0
	DO
	    BEGIN

	    IF .PTR[NRP$L_VBN] EQLU .BBLOCK[.IRAB[IRB$L_CURBDB], BDB$L_VBN]
	    THEN

		IF .PTR[NRP$W_ID] EQLU .REC_ADDR[IRC$B_ID]
		THEN
		    BEGIN
		    PTR[NRP$V_UPD_NRP] = 1;		! flag for update of NRP list
		    PTR[NRP$W_NEW_NRP] = .BKT_ADDR[BKT$B_NXTRECID];
		    PTR[NRP$V_NEW_VBN] = .AP;
		    END;

	    PTR = .PTR[NRP$L_LINK]
	    END;	! {end of while loop scanning through nrp list }
	END
    ELSE
	BEGIN

	WHILE .PTR NEQ 0
	DO
	    BEGIN

	    IF .PTR[NRP$L_VBN] EQLU .BBLOCK[.IRAB[IRB$L_CURBDB], BDB$L_VBN]
	    THEN

		IF .PTR[NRP$W_ID] EQLU .REC_ADDR[IRC$W_ID]
		THEN
		    BEGIN
		    PTR[NRP$V_UPD_NRP] = 1;		! flag for update of NRP list
		    PTR[NRP$W_NEW_NRP] = .BKT_ADDR[BKT$W_NXTRECID];
		    PTR[NRP$V_NEW_VBN] = .AP;
		    END;

	    PTR = .PTR[NRP$L_LINK]
	    END;	! {end of while loop scanning through nrp list }
	END;

    RETURN;

    END;			! {end of routine to update the nrp list }


GLOBAL ROUTINE RM$ID_AND_NRP (NEW_BKT) : RL$ID_AND_NRP NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
! scan the NRP list once to determine if anyone in the NRP list is
! positioned on VBN left and clear their UPD_NRP flag if so.  If there
! were any then scan the NRP list for each record that was moved to
! determine if that record was affected and store the new VBN and ID
! information in the cell, setting the UPD_NRP flag to cause updating
! after the original bucket is written out
! assign new ID's starting from 1 for the records in the new bucket
!
! CALLING SEQUENCE:
!	RM$ID_AND_NRP (NEW_BKT)
!
! INPUT PARAMETERS:
!	NEW_BKT - address of bucket that new records will be written to.
!
! IMPLICIT INPUTS:
!	IFAB - internal file context
!	    [frb_ptr] - if present, use to get shared ifab address from frb
!	    [nrp_list] - pointer to nrp list (either ifab or sifab)
!
!	IRAB - internal stream context
!	    [upd_nrp] - set if any updates required
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	update nrp list if necessary
!
!--

    BEGIN

    EXTERNAL REGISTER
	R_IDX_DFN_STR,
	R_IRAB_STR,
	R_IFAB_STR;

    GLOBAL REGISTER
	R_REC_ADDR_STR;

    MAP
	NEW_BKT	: REF BBLOCK;

    LOCAL
	VBN_LEFT,
	EOB,
	PTR	: REF BBLOCK,
	ID	: WORD;

    VBN_LEFT = .BBLOCK[.IRAB[IRB$L_CURBDB], BDB$L_VBN];
    ID = 1;
    REC_ADDR = .NEW_BKT + BKT$C_OVERHDSZ;
    EOB = .NEW_BKT + .NEW_BKT[BKT$W_FREESPACE];

    ! use ptr as a temporary to decide where to get the nrp list pointer from
    ! this way we don't have to recalculate this value for every record that
    ! moved
    !
    PTR = .IFAB;

    IF .IFAB[IFB$L_FRB_PTR] NEQ 0
    THEN
	PTR = .BBLOCK[.IFAB[IFB$L_FRB_PTR], FRB$L_SIFAB_PTR];

    ! now we can pick up the nrp list pointer from the correct place
    !
    PTR = .PTR[IFB$L_NRP_LIST];

    ! make record scan of new bucket.  this bucket has only old records from
    ! the original bucket in it as the new record (whether it belongs here or
    ! not) has not been inserted yet. for each record, scan the NRP list to see
    ! if any entries are affected by the split and store the new ID and VBN
    ! information if they are.
    !

    WHILE .REC_ADDR LSSA .EOB
    DO
	BEGIN

	IF .IRAB[IRB$V_UPD_NRP]
	THEN
	    BEGIN

	    LOCAL
		NRP_PTR	: REF BBLOCK;

	    NRP_PTR = .PTR;

	    UNTIL .NRP_PTR EQL 0
	    DO
		BEGIN

		! check NRP cell
		!

		IF .NRP_PTR[NRP$L_VBN] EQL .VBN_LEFT
		    AND
		    .NRP_PTR[NRP$W_ID] EQL IRC$_ID(REC_ADDR)
		THEN
		    BEGIN

		    ! ONE here signals VBN_RIGHT ( see select_vbn and code_vbn
		    ! routines)
		    !
		    NRP_PTR[NRP$V_NEW_VBN] = 1;
		    NRP_PTR[NRP$W_NEW_NRP] = .ID;
		    NRP_PTR[NRP$V_UPD_NRP] = 1;
		    END;

		NRP_PTR = .NRP_PTR[NRP$L_LINK];
		END;				! of UNTIL scan of NRP list

	    END;				! of need to scan NRP list

	! reassign the ID in the new bucket
	!
	
	IF .IFAB[IFB$B_PLG_VER] LSSU PLG$C_VER_3
	THEN
	    REC_ADDR[IRC$B_ID] = .ID
	ELSE
	    REC_ADDR[IRC$W_ID] = .ID;
	ID = .ID + 1;
	RM$GETNEXT_REC();
	END;					! of while .REC_ADDR lssa .EOB

    ! update next ID field in bucket header
    !

    IF .IFAB[IFB$B_PLG_VER] LSSU PLG$C_VER_3
    THEN
	NEW_BKT[BKT$B_NXTRECID] = .ID
    ELSE
	NEW_BKT[BKT$W_NXTRECID] = .ID;

    END;

END

ELUDOM
