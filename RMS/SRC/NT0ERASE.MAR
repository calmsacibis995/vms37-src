	$BEGIN	NT0ERASE,001,NF$NETWORK,<NETWORK ERASE FILE>


;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; Facility: RMS
;
; Abstract:
;
;	This module communicates with the file access listener at the remote
;	node to erase (delete) the specified file.
;
; Environment: VAX/VMS, executive mode
;
; Author: James A. Krycka,	Creation Date:	09-DEC-1977
;
; Modified By:
;
;	V03-001	KRM0045		K R Malik	 5-Apr-1982
;		Add status check after call to NT$SCAN_NAMBLK.
;
;	V02-016	JAK0049		J A Krycka	17-OCT-1980
;		Track entry point name changes in NT0DAPIO.
;
;	V02-015	REFORMAT	J A Krycka	26-JUL-1980
;
;--

	.SBTTL	DECLARATIONS

;
; Include Files:
;

	$DAPPLGDEF			; Define DAP prologue symbols
	$DAPHDRDEF			; Define DAP message header
	$DAPCNFDEF			; Define DAP Configuration message
	$DAPACCDEF			; Define DAP Access message
	$DAPNAMDEF			; Define DAP Name message
	$IFBDEF				; Define IFAB symbols
	$NWADEF				; Define Network Work Area symbols

;
; Macros:
;
;	None
;
; Equated Symbols:
;

	ASSUME	DAP$Q_DCODE_FLG EQ 0
	ASSUME	NWA$Q_FLG EQ 0

;
; Own Storage:
;
;	None
;

	.SBTTL	NT$ERASE - PERFORM NETWORK ERASE FUNCTION

;++
; NT$ERASE - engages in a DAP dialogue with the remote FAL to erase (delete)
;	the specified file.
;
; Calling Sequence:
;
;	BSBW	NT$ERASE
;
; Input Parameters:
;
;	R8	FAB address
;	R9	IFAB address
;	R10	FWA address
;	R11	Impure Area address
;
; Implicit Inputs:
;
;	FAB$L_NAM
;	IFB$L_NWA_PTR
;
; Output Parameters:
;
;	R0	Status code (RMS)
;	R1-R7	Destroyed
;	AP	Destroyed
;
; Implicit Outputs:
;
;	Resultant name string
;
; Completion Codes:
;
;	Standard RMS completion codes
;
; Side Effects:
;
;	None
;
;--

NT$ERASE::				; Entry point
	$TSTPT	NTERASE			;
	MOVL	IFB$L_NWA_PTR(R9),R7	; Get address of NWA (and DAP)

;+
; Exchange DAP Configuration messages with FAL.
;-

	BSBW	NT$EXCH_CNF_ALT		; Exchange Configuration messages
	BLBC	R0,EXIT			; Branch on failure

;+
; Next build a request mask (NWA$W_DISPLAY) that will be used in the Access
; message to request that optional DAP messages be returned by FAL.
; For $ERASE, the Name message is the only candidate.
;-

BUILD_MASK:				; Build NWA$W_DISPLAY
	CLRL	R2			; Initialize request mask
	BSBW	NT$SCAN_NAMBLK		; Scan user Name Block and check FAL's
					;  capabilities to update request mask
	BLBC	R0,EXIT			; Branch on failure
	MOVW	R2,NWA$W_DISPLAY(R7)	; Save request mask

;+
; Build and send DAP Access message to partner.
;-

SEND_ACC:				;
	$SETBIT	#NWA$V_LAST_MSG,(R7)	; Declare this last message to block
	MOVL	#DAP$K_ACC_MSG,R0	; Get message type value
	BSBW	NT$BUILD_HEAD		; Construct message header
	MOVB	#DAP$K_ERASE,(R5)+	; Store ACCFUNC field
	MOVB	#DAP$M_NONFATAL,(R5)+	; Store ACCOPT field
	BSBW	NT$GET_FILESPEC		; Store FILESPEC as a counted
					;  ASCII string
	MOVZWL	NWA$W_DISPLAY(R7),R1	; Get request mask
	BEQL	10$			; Branch if nothing set
	CLRW	(R5)+			; Store dummy FAC and SHR fields
	BSBW	NT$CVT_BN4_EXT		; Store DISPLAY as an extensible field
10$:	BSBW	NT$BUILD_TAIL		; Finish building message
	BSBW	NT$TRANSMIT		; Send Access message to FAL
	BLBC	R0,EXIT			; Branch on failure

;+
; Receive DAP (resultant) Name message from partner.
;-

RECV_NAM:				;
	TSTW	NWA$W_DISPLAY(R7)	; Branch if Name message was not
	BEQL	RECV_CMP		;  requested
	$SETBIT	#DAP$K_NAM_MSG,DAP$L_MSG_MASK(R7)
					; Expect response of Name message
	BSBW	NT$RECEIVE		; Get reply from FAL
	BLBC	R0,EXIT			; Branch on failure
	BSBW	NT$DECODE_NAM		; Process resultant name string

;+
; Receive DAP Access Complete message from partner to terminate the reply
; sequence.
;-

RECV_CMP:				;
	$SETBIT	#DAP$K_CMP_MSG,DAP$L_MSG_MASK(R7)
					; Expect response of Access Complete msg
	BSBW	NT$RECEIVE		; Get reply from FAL
EXIT:	RSB				; Exit with RMS code in R0

	.END				; End of module
