	$BEGIN	RM0CRECOM,028,F$RMSOPEN0C,<COMMON CREATE FILE>


;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
; Facility: rms32
;
; Abstract:	this module performs the create file fcp function.
;
; Environment:
;		star processor running starlet exec.
;
; Author: L F Laverdure,	 Creation Date: 11-MAY-1977
;
; Modified By:
;
;	V02-028	KPL0001		Peter Lieberwirth	28-Dec-1981
;		Do a better job deleting the file after errors returned by
;		RM$SETEBK by getting the DID from the FWA FIBBUF instead
;		of the user NAM block.  The problem is there may be no NAM
;		block, so a dangling directory entry can result.
;
;	V02-027	MCN0007		Maria del C. Nasr	12-May-1981
;		Define new symbol for old length of backup date and time XAB.
;
;	V02-026	JAK0048		J A KRYCKA	25-SEP-1980
;		Move network specific create code to RMS0CREAT and avoid
;		spurious setting of NAM$V_HIGHVER and NAM$V_LOWVER bits.
;
;	V025	REFORMAT	D M WALP	24-JUL-1980
;
;	V024	KEK003		K E KINNEAR	11-MAR-1980	17:45
;		fix create-if option to check tmd fop bit, and
;		if necessary pass thru to acp.
;
;	V023	RAN0003		R A NEWELL	19-DEC-1978	20:25
;		file sharing code enhancements
;
;	V022	JAK0002	J A KRYCKA	27-AUG-1978	16:35
;		add network check for sqo
;
;--
;


	.SBTTL	DECLARATIONS

;
; Include Files:
;

;
; Macros:
;

	$IMPDEF				; impure area definitions
	$FABDEF
	$NAMDEF
	$FHDDEF
	$FIBDEF
	$IFBDEF
	$ATRDEF
	$DEVDEF
	$FWADEF
	$XABALLDEF
	$XABDATDEF
	$XABFHCDEF
	$XABPRODEF
	$XABRDTDEF

;
; Equated Symbols:
;

	FOP=FAB$L_FOP*8			; bit offset to fop

;
; Own Storage:
;
;
;  initial xab processing arguments
;

CRE_XAB_ARGS:
	.BYTE	XAB$C_ALL,XAB$C_ALLLEN,XBC$C_CREALL1
	.BYTE	XAB$C_DAT,XAB$C_DATLEN_V2,XBC$C_OPNDAT
	.BYTE	XAB$C_FHC,XAB$C_FHCLEN,XBC$C_OPNFHC
	.BYTE	XAB$C_PRO,XAB$C_PROLEN,XBC$C_CREPRO
	.BYTE	XAB$C_RDT,XAB$C_RDTLEN,XBC$C_OPNRDT
	.BYTE	0

;
;  arguments for "all" xab processing to return alq from actual allocated size
;

CRE_XAB_ARGS2:
	.BYTE	XAB$C_ALL,XAB$C_ALLLEN,XBC$C_CREALL2
	.BYTE	0


	.SBTTL	RM$CREATECOM - PERFORM CREATE FILE FUNCTION

;++
; RM$CREATECOM
;
;       RM$CREATECOM -
;
;	this routine sets up the fib from the
;	various user options, directory id and
;	allocation information, builds the
;	attribute list to write the user record
;	and other attributes, builds
;	the qio parameter list on the stack
;	issues the qio to the acp to perform
;	the create (or access if 'cif' bit set),
;	initializes the hbk field of the ifab,
;	and finally calls rm$fillnam to return
; 	the resultant name string.
;
; Calling sequence:
;
;	bsbw	rm$createcom
;
; Input Parameters:
;
;	r11	impure area addr
;	r10	fwa address
;	r9	ifab address
;	r8	fab address
;
; Implicit Inputs:
;
;	the contents of the parameter blocks listed
;	above, especially:
;
;	ifb$l_prim_dev
;	fwa$q_dir
;	fwa$q_name
;	fwa$l_atrladr
;	ifb$l_chnl
;	ifb$b_fac
;	ifb$l_rfmorg thru ifb$c_fhaend
;	fab$l_fop
;	fab$l_alq
;	fab$l_xab
;	fab$l_nam
;
;
; Output Parameters:
;
;	r0	status code
;	r6	fib addr
;	r1-r5,r7,ap destroyed
;
; Implicit Outputs:
;
;	ifb$v_accessed set
;	nam$l_rsl set to length of resultant string, if any
;	ifb$l_ios
;	ifb$l_hbk
;	fab$l_stv set to system error code on failure
;
; Completion Codes:
;
;	standard rms, including suc,rer,wer,
;	flk,prv,dnf,ful, and cre.
;
; Side Effects:
;
;	may have switched to running at ast level.
;	all user structures except fab and nam
;	must be reprobed.
;--


RM$CREATECOM::
	BBS	#DEV$V_DIR,-
		IFB$L_PRIM_DEV(R9),10$	; branch if files-oriented
	RMSSUC				; show success
	BRW	FILNAM			; fill in nam block

;
; unless 'tmp' or 'tmd' set in fop, get the directory id
;

10$:	BITL	#FAB$M_TMP!FAB$M_TMD,-
		FAB$L_FOP(R8)		; tmp or tmd set?
	BNEQ	SETTMP			; branch if yes
	BSBW	RM$SETDID		; get directory id
	BLBS	R0,SETUP		; continue if ok
CREXIT:	RSB				; get out on error

;
;  handle bad alq value
;

ERRALQ:	$PSECT_BR	L$RMS0
	RMSERR	ALQ
	RSB
	$PSECT_RESTORE

;
;  set tmp bit to flag this as a temporary file
;

SETTMP:	SSB	#IFB$V_TMP,(R9)		; flag temporary file

;
; call rm$creacc_set1 to do common fib and attribute list set up
;

SETUP:	BSBW	RM$CREACC_SET1
	CLRW	FWA$W_UCHAR(R10)	; initialize user characteristics

;
; r6 now points to fib
; r5 has address of where to build attribute list entries
;
;!!!!!
; \must include code to handle magtape label xabs.\
;!!!!!
;
;  handle xabs
;

	MOVAB	CRE_XAB_ARGS,AP		; set xab scan args addr
	BSBW	RM$XAB_SCAN		; process xabs
	BLBC	R0,CREXIT		; get out on error
	BBS	S^#XBC$C_CREPRO,R4,21$	; branch if pro xab seen

;
;  set file protection from default file protection word
;

	MOVW	@#PIO$GW_DFPROT,-
		FWA$W_PRO(R10)		; get default
	MOVW	#2,(R5)+		; 2 bytes prot
	MOVW	#ATR$C_FPRO,(R5)+	; say it's prot
	MOVAL	FWA$W_PRO(R10),(R5)+	; and give addr

;
; if disk, process initial allocation request
;

21$:	BBS	#DEV$V_SQD,-
		IFB$L_PRIM_DEV(R9),30$	; branch if magtape
	MOVL	FAB$L_ALQ(R8),-
		FIB$L_EXSZ(R6)		; set alloc size
	BEQL	30$			; branch if none
	BLSS	ERRALQ			; branch if bad
	BBC	#FAB$V_UFO+FOP,(R8),22$	; branch if not ufo
	ADDL3	#1,FAB$L_ALQ(R8),-
		IFB$L_EBK(R9)		; set eof blk from alq
22$:	SSB	#FIB$V_EXTEND,-
		FIB$W_EXCTL(R6)		; enable extend
	BBS	S^#XBC$C_CREALL1,R4,30$	; branch if alq xab seen
	BBC	#FAB$V_CBT+FOP,(R8),25$	; branch if cbt bit off
	BISB2	#1@FHD$V_CONTIGB,-
		FWA$W_UCHAR(R10)	; give file cbt attribute
	BBCS	#FIB$V_ALCONB,-
		FIB$W_EXCTL(R6),30$	; ask primitive for best try
					; and branch
25$:	BBC	#FAB$V_CTG+FOP,(R8),30$	; branch if contig bit off
	BISB2	#FIB$M_ALCON!FIB$M_FILCON,-
		FIB$W_EXCTL(R6)		; ask acp for ctg extend
	BISB2	#1@FHD$V_CONTIG,-
		FWA$W_UCHAR(R10)	; give file ctg attribute
30$:

;
;  swap words of ebk to be files-11 compatible and insert org into rfm/org
;  so that it gets written with the file attributes.
;	(note: hbk is zero)
;

	ROTL	#16,IFB$L_EBK(R9),IFB$L_EBK(R9)
	INSV	IFB$B_ORGCASE(R9),#IFB$V_ORG,#IFB$S_ORG,IFB$B_RFMORG(R9)

;
; process the mxv, sup, and cif options
;
;	for mxv & sup, need merely copy to fib
;

	ASSUME	FAB$V_SUP EQ FAB$V_MXV+1
	ASSUME	FIB$V_SUPERSEDE EQ FIB$V_NEWVER+1
NAMCTL:	EXTZV	#FAB$V_MXV+FOP,#2,(R8),R0
	INSV	R0,#FIB$V_NEWVER,#2,FIB$W_NMCTL(R6)
	BBC	#FAB$V_CIF+FOP,(R8),5$
	BRW	DOCIF

;
; call rm$creacc_set3 to finish building the qio parameters for create
;

5$:	BSBW	RM$CREACC_SET3


;
; set i/o function code and do the create
;

	MOVZBL	#IO$_CREATE!IO$M_CREATE!IO$M_ACCESS,-
		R0			; set qio function code
	BBC	#FAB$V_TMD+FOP,(R8),10$	; branch unless tmd set
	SSB	S^#IO$V_DELETE, R0	; mark file for delete
10$:	BSBW	RM$FCPFNC		; do the create
	BLBS	R0,SETHBK		; branch if ok
	BRW	ERRCREATE		; branch on error
SETHBK:	MOVL	FIB$L_EXSZ(R6),-
		IFB$L_HBK(R9)		; set hi block
	PUSHL	R0			; save status code
	MOVAB	CRE_XAB_ARGS2,AP	; set xab arglist addr
	BSBW	RM$XAB_SCAN		; go set alq in xaball
	BLBC	R0,XITPOP		; get out on error
	BSBW	RM$SETEBK		; go set ebk, accessed
	BLBC	R0,DELSHR		; delete on error
	POPR	#^M<R0>			; restore status code
	ASSUME	IFB$V_RFM EQ 0
	ASSUME	IFB$S_RFM EQ 4
	BICB2	#^XF0,IFB$B_RFMORG(R9)	; leave only rfm in rfmorg
FILNAM:	PUSHL	R0			; save success code
	BSBW	RM$FILLNAM		; return resultant string
					; and other nam fields
	BLBC	R0,XITPOP		; branch on error
	TSTL	R7			; is there a nam blk?
	BEQL	10$			; branch if none

;
;  set the lowver and highver flags in the nam block
;

	ASSUME	FIB$V_HIGHVER EQ FIB$V_LOWVER+1
	ASSUME	NAM$V_HIGHVER EQ NAM$V_LOWVER+1
	EXTZV	#FIB$V_LOWVER,#2,-
		FIB$W_NMCTL+FWA$T_FIBBUF(R10),-
		R1			; get version bits
	INSV	R1,#NAM$V_LOWVER,#2,-
		NAM$L_FNB(R7)		; and set in nam blk
10$:	POPR	#^M<R0>			; restore success code
	RSB
XITPOP:	POPR	#^M<R1>			; remove success code
EXIT:	RSB				; and return with error

;
;	this code will only be executed if we return an error status from
;	rm$open_shared which is called in the subroutine rm$setebk.
;

DELSHR:	PUSHL	R0			; save status code
	MOVL	#FIB$C_DIRDATA,R2	; get length of fib
	CSB	#IMP$V_TEMP1,(R11)	; clear s0 flag
	BSBW	RM$GETSPC1		; go get fib
	BLBS	R0,20$			; branch if ok
	POPR	#^M<R1>			; clean up stack
	BRB	XITPOP			; leave
20$:	PUSHL	R1			; push fib address
	PUSHL	#FIB$C_DIRDATA		; push length of fib
	BBS	#IFB$V_TMP,(R9),DEL	; branch if temp file
	SSB	#FIB$V_FINDFID,-	;
		FIB$W_NMCTL(R1)		; set findfid bit
	MOVW	FIB$W_DID+FWA$T_FIBBUF(R10),-
		FIB$W_DID(R1)		; set did
	MOVL	FIB$W_DID_SEQ+FWA$T_FIBBUF(R10),-
		FIB$W_DID_SEQ(R1)	; set did sequence and rvn
DEL:	MOVZWL	#<IO$_DELETE!IO$M_DELETE>,-
		R0			; set i/o func code
	BSBW	RM$FCPFNC_ALT1		; go do the delete
	POPR	#^M<R2,R4>		; get fib addr, length
	BSBW	RM$RETSPC1		; return the space
	POPR	#^M<R0,R1>		; restore registers
	BRW	RM$CLSCU		; close cleanup


;++
;
; 'cif' bit is set indicating open file if it exists,
; otherwise create - do remaining setup & access
;
;--

DOCIF:	BSBW	RM$CREACC_SET2		; finish param setup
	MOVZBL	#IO$_ACCESS!IO$M_CREATE!IO$M_ACCESS,-
		R0			; set qio function code
	BBC	#FAB$V_TMD+FOP,(R8),5$	; if tmd not set
	SSB	S^#IO$V_DELETE,R0	; mark file for delete
5$:	BSBW	RM$FCPFNC		; do access/create
	BLBC	R0,ERRCREATE		; branch on error
	CMPW	R0,S^#SS$_NORMAL	; was file created?
	BEQL	9$			; branch if not
	BRW	SETHBK			; branch if created

;
; 'cif' and file already existed - switch to 'open'
;

9$:	CMPB	#IFB$C_IDX,-
		IFB$B_ORGCASE(R9)	; indexed, rm$create3b
	BEQL	10$			;
	MOVAB	W^RM$OPEN_CIF,(SP)	; change return pc
10$:	BRW	RM$SETHBK		; & go finish up open

;
; process error on create
;

ERRCREATE:
	$PSECT_BR	L$RMS0

	RMSERR	CRE,R1			; default error code
	BRW	RM$MAPERR		; go map the error
	$PSECT_RESTORE

	.END
