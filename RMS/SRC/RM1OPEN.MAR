	$BEGIN	RM1OPEN,015,F$RMSOPEN1,<SEQUENTIAL-SPECIFIC OPEN>


;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; Facility: RMS32
;
; Abstract:
;
;  this routine performs the sequential file organization-
;  specific open processing.
;
; Environment:
;		star processor running starlet exec.
;
; Author: L F Laverdure,	 creation date: 4-JAN-1977
;
; Modified By:
;
;	V02-015	REFORMAT	Keith B. Thompson	29-Jul-1980
;
;	V014	PSK001		P S Knibbe	5-DEC-1979	 3:00
;		on foreign magtape, always clear IFB$V_EOF. also
;		don't set IFB$V_ANSI_D.
;
;	V013	JAK0020		J A Krycka	14-NOV-1979	12:00
;		release 2.0 clean-up.
;
;--


	.SBTTL	DECLARATIONS

;
; Include Files:
;

;
; Macros:
;

	$FABDEF
	$DEVDEF
	$IFBDEF
	$RMSDEF

;
; Equated Symbols:
;

	FOP=FAB$L_FOP*8			; bit offset to fop

;
; Own Storage:
;


	.SBTTL	RM$OPEN1 - SEQUENTIAL OPEN ROUTINE

;++
;
;  RM$OPEN1	-
;
;  this routine performs all of the file open functions
;  that are specific to the sequential file organization,
;  including:
;
;	1. checking that write-sharing has not been specified
;	2. forcing var length and rat=FAB$B_RAT for unit record devices
;	3. setting the bls field of the fab to the device buffer size
;	4. performing magtape file positioning
;	5. setting the two close option bits as required
;	6. returning to the common open routine
;
; Calling sequence:
;
;  entered via case branch from RMS$OPEN
;  returns by jumping to RM$COPRTN
;
; Input Parameters:
;
;	R11	impure area address
;	R9	ifab address
;	R8	fab address
;
; Implicit Inputs:
;
;	the contents of the fab
;
; Output Parameters:
;
;	R0	status code
;	R1 thru R5 destroyed
;
; Implicit Outputs:
;
;	various fields in the ifab and fab are initialized
;
; Completion Codes:
;
;	standard rms in particular, success and shr.
;
; Side Effects:
;
;	none
;
;--


RM$OPEN1::
	$TSTPT	OPEN1

;
;  check that record locking not required
;

	BBS	#IFB$V_NORECLK,(R9),2$	; branch if no locking required
	BBC	#FAB$V_UPI,-		; error unless user providing
		FAB$B_SHR(R8),ERRSHR

;
; own interlocking
;

2$:

;
;  if a unit record device, force variable length record format
;  and record attributes from fab
;

	ASSUME	FAB$C_SEQ EQ 0
	ASSUME	DEV$V_REC EQ 0
	BLBC	IFB$L_PRIM_DEV(R9),10$	; branch if not unit rec.
	MOVB	#FAB$C_VAR,-		; force to variable
		IFB$B_RFMORG(R9)
	MOVB	FAB$B_RAT(R8),-		; and set rat from fab
		IFB$B_RAT(R9)
	BICB3	#255 \ <FAB$M_CR!FAB$M_FTN!FAB$M_PRN>,-
		FAB$B_RAT(R8),R1

;
; clear all bit carriage control
;

	BEQL	10$			; branch if none speced
	BBC	#FAB$V_PRN,R1,3$	; branch if prn not speced
	CMPB	FAB$B_RFM(R8),#FAB$C_VFC; rfm = vfc?
	BNEQ	ERRRAT			; branch if not
	MOVB	#FAB$C_VFC,-		; change rfm to vfc
		IFB$B_RFMORG(R9)
	ASSUME	FAB$V_FTN EQ FAB$V_CR-1
	ASSUME	FAB$V_PRN EQ FAB$V_CR+1
3$:	FFS	#FAB$V_FTN,#3,R1,R0	; find the first bit set
	CSB	R0,R1			; turn it off
	TSTB	R1			; another bit set
	BNEQ	ERRRAT			; branch if so

;
;  set bls equal to device buffer size
;

10$:	MOVW	IFB$W_ASDEVBSIZ(R9),-
		FAB$W_BLS(R8)
	BBS	#DEV$V_SPL,-		; branch if device spooled
		IFB$L_PRIM_DEV(R9),15$
	MOVW	IFB$W_DEVBUFSIZ(R9),-	; else return real block size
		FAB$W_BLS(R8)
15$:

;
;  if device is magtape, then assume eof at max vbn, byte 0
;  unless file is write accessed, in which case
;  look at nef and if clear then set "at eof" flag
;  and declare eof to be at vbn 1, byte 0
;  else utilize same positioning as for read access.
;

	BBC	#DEV$V_SQD,-		; branch if not magtape
		IFB$L_PRIM_DEV(R9),50$
	MNEGL	#1,IFB$L_EBK(R9)	; assume not write accessed
	BBS	#DEV$V_FOR,-		; foreign will never be
		IFB$L_PRIM_DEV(R9),20$

;
; positioned at eof
;

	SSB	#IFB$V_ANSI_D,(R9)	; set ansi flag
	BBC	#IFB$V_WRTACC,(R9),20$	; branch if true
	BBS	#FAB$V_NEF+FOP,(R8),20$	; or if nef set
	MOVL	#1,IFB$L_EBK(R9)	; set eof to vbn 1
	SSB	#IFB$V_EOF,(R9)		; and set at eof flg
20$:	CLRW	IFB$W_FFB(R9)		; always use byte 0 for mt

;
;  return to common open sequence
;

50$:	RMSSUC				; show success
OPNRET:	BRW	RM$COPRTN

;
;  write sharing specified on sequential file
;  -  return with error code
;

ERRSHR:	$PSECT_BR	L$RMS1
	RMSERR	SHR
	BRB	OPNRET1
	$PSECT_RESTORE

;

ERRRAT:	$PSECT_BR	L$RMS1
	RMSERR	RAT			; invalid rat value
OPNRET1:
	BRW	RM$COPRTN		; and get out
	$PSECT_RESTORE

	.END
