	$BEGIN	RMS0EXTEN,001,F$RMSEXTEND0,<DISPATCH FOR EXTEND OPERATION>


;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
; Facility: rms32
;
; Abstract:
;		this module is the highest level control routine
;		to perform the $extend function.
;
; Environment:
;		star processor running starlet exec.
;
; Author:	L F Laverdure,	 creation date: 11-JAN-1978
;
; Modified By:
;
;	V03-001	CDS0003		C Saether	30-Mar-1982
;		Always allocate buffer if block i/o in
;		RM$ALLOC_BUF routine.
;
;	V02-015	CDS0002		C Saether	 5-Feb-1982
;		Save previous error code in RM$ALLOC_BUF
;
;	V02-014	CDS0001		C Saether	22-Jan-1982
;		Make ALLOC_BUF a global routine so DISPLAY can
;		use it.
;
;	V02-013	JAK0063		J A Krycka	28-AUG-1981
;		Add support for network $EXTEND.
;
;	V012	reformat	Ken Henderson	30-JUL-1980	7:26
;		the code was reformatted
;
;	V011	cds0047		C Saether	29-OCT-1979	12:20
;		add co-routine to handle buffer allocation/deallocation
;		for different combos of file open (shared/non-shared) or
;		already connected
;
;	V010	cds0001		C D Saether	2-JAN-1979	11:15
;		resolve out of range branch
;
;--
;


	.SBTTL	DECLARATIONS

;
; Include Files:
;

;
; Macros:
;

	$IFBDEF
	$IRBDEF
	$FABDEF
	$DEVDEF
	$XABDEF
	$XABALLDEF
	$CSHDEF
	$FRBDEF
	$SIFBDEF
	$RLSDEF

;
; Equated Symbols:
;

	FOP=FAB$L_FOP*8

;
; Own Storage:
;
;
;  argument list for xab chain processing (allocation xabs only)
;

XAB_ARGS:
	.BYTE	XAB$C_ALL,XAB$C_ALLLEN,XBC$C_EXTALL,0

	.SBTTL	RMS$EXTEND - $EXTEND ROUTINE

;++
; RMS$$EXTEND
;
;  this routine performs the highest level $extend processing.
;  its functions include:
;
;	1. common setup
;	2. check for all streams idle, exiting if not
;	3. perform validity checking
;	4. call main body of extend logic (extend_it) subroutine - first thing
;	   it must do is to call the co-routine alloc_buf to allocate
;	   buffer and lock bdb if necessary.  it does co-routine call back
;	   if buffers allocated so that it can return them when extend_it
;	   exits, else does rsb (will not return to it) if no action required.
;	5. lock prolog for rel. f. o. not block i/o accessed
;	6. process any allocation xabs, performing the indicated extends
;	   and bucket formatting if relative.
;	   isam subroutine in rm3face will be called to do the isam stuff.
;	7. if no allocation xabs present, perform the extend based upon the fab.
;	8. release the prolog if locked (relative f.o.)
;	9. exit from extend_it may be call back to alloc_buf to cleanup
;	   buffers if allocated - this preserves error code in r0.
;	10. exit to the user, generating an ast if requested
;
;
; Calling sequence:
;
;	entered from exec as a result of user's calling sys$extend
;	(e.g., by using the $extend macro).
;
; Input Parameters:
;
;	ap	user's argument list addr
;
; Implicit Inputs:
;
;	the contents of the fab and possible related user interface
;	blocks.
;
; Output Parameters:
;
;	r0	status code
;	r1	destroyed
;
; Implicit Outputs:
;
;	the size of the extension is returned in fab$l_alq or xab$l_alq
;	if allocation xab(s) present.
;
;	a completion ast is queued if so specified by the user.
;
; Completion Codes:
;
;	standard rms (see functional spec for list).
;
; Side Effects:
;
;	any locate mode pointer for the file is invalidated.
;
;--



;++
;
;  extended branches for error conditions
;
;--

ERRIOP:	BRW	RM$ERRIOP		; extend on non-disk device
ERRFAC:	BRW	RM$ERRFAC		; file not write accessed

;++
;
;  entry point for $extend service
;
;--

	$ENTRY	RMS$$EXTEND
	$TSTPT	EXTEND
	BSBW	RM$FSET			; do common setup
					; note: does not return on error
	BBC	#IFB$V_DAP,(R10),10$	; Check for network operation
	BSBW	NT$EXTEND		; Extend file on remote system
	BRW	RM$EXRMS		;  and exit RMS

;
;  check that device is disk and that we are write accessed
;

10$:	BBC	#DEV$V_RND,IFB$L_PRIM_DEV(R10),ERRIOP; branch if not disk
	BBC	#IFB$V_WRTACC,(R10),ERRFAC; or if not write accessed
	BSBB	EXTEND_IT		; call extend routine
	BRW	RM$EXRMS		; and exit rms


;
;  main body of extend code to perform extend function.
;  first call alloc_buf which will allocate buffer and necessary control
;  blocks if no streams are connected.  if a stream is already connected,
;  no action is necessary as buffer and control blocks will already be present.
;

EXTEND_IT:
	BBS	#IFB$V_BIO,IFB$B_FAC(R10),GETXAB; if block i/o, just go
					; direct to allocate space to
					; file.  no checks on rel or idx
	ASSUME	IFB$C_SEQ EQ 0
	TSTB	IFB$B_ORGCASE(R10)	; sequential file ?
	BEQL	GETXAB			; if seq,  skip buffer alloc
	MOVZBL	IFB$B_BKS(R10), R5	; bucket size in blocks for alloc_buf
	MOVL	#1, R6			; needs a lock blb.
	BSBB	RM$ALLOC_BUF		; see comments above
	BLBC	R0,RETURN		; out on error
	CMPB	#IFB$C_REL,IFB$B_ORGCASE(R10); relative file ?
	BNEQ	10$			; branch if isam file
	BSBW	RM$LOCK_PROLOG		; read and lock prolog for rel
	BLBC	R0,RETURN		; get out on error
	MOVL	R4,IFB$L_LOCK_BDB(R10)	; save bdb address (for seq shr)
	BRB	GETXAB			; join rest of code
10$:	CLRL	R2			; zero buffer size
	$CACHE	VBN=#1, FLAGS=<LOCK,NOREAD,NOBUFFER>; lock vbn 1 to extend
20$:	BLBC	R0,RETURN		; exit on error
	PUSHL	R4			; we'll need this bdb later

;
;  process allocation xab(s), if any.
;
;  the subroutine rm$extend_xab is called for each allocation xab found.
;
;

GETXAB:	MOVAB	XAB_ARGS,AP		; set arg list addr
	BSBW	RM$XAB_SCAN		; go look for xab
	BLBC	R0,EXIT			; branch on error
	TSTL	R4			; any xabs found?
	BNEQ	EXIT			; branch if yes, allocation
					; occured processing xab(s)
;
;  there were no allocation xabs found.
;  use the alq field of the fab to specify the size of the allocation.
;

	MOVL	R8,R3			; cause fab alq to be used
					; xab, fab inputs at same offset
	CLRL	R6			; say no xab
	BSBW	XTND			; go do the extend

EXIT:	ASSUME	IFB$C_SEQ EQ 0
	TSTB	IFB$B_ORGCASE(R10)	; is this sequential f.o. ?
	BEQL	CLRTEF			; branch if yes
	BBS	#IFB$V_BIO,IFB$B_FAC(R10),RETURN; return if block i/o accessed
	CMPB	#IFB$C_REL,IFB$B_ORGCASE(R10); is this a relative file?
	BEQL	RETURN			; yes, then all done
	POPR	#^M<R4>			; restore lock bdb address
	BRW	RM$RLSPLG		; release lock and exit routine
					; with rsb which will deallocate
					; buffers if allocated before
;
;  clear the auto extend truncate at eof flag
;

CLRTEF:	CSB	#IFB$V_TEF,(R10)

;
;  all set
;

RETURN:
	RSB				; call back to alloc_buf
					; or return to caller

	.SBTTL	RM$ALLOC_BUF - CO-ROUTINE TO ALLOCATE/DEALLOCATE BUFFERS

;++
; RM$ALLOC_BUF
;
;  this routine is called to allocate a buffer and lock bdb for use in extend
;  processing if no streams connected.  the caller is called back so that
;  control returns to this routine to return the buffer when the caller
;  does an rsb.  if no action was taken on the initial call to this routine,
;  control will not return here.
;
;  inputs:
;
;	r11		impure area address
;	r10		ifab address
;	r5		size of buffer desired in blocks
;	r6		1 if lock blb needed, 0 otherwise.
;
;  outputs:
;
;	r9		set to ifab addr after initial return if buff allocated
;	r1-r6		destroyed
;
;	r0		status of buffer allocation if performed, else success
;			after initial return
;
;
;--

RM$ALLOC_BUF::
	MOVL	#1,R0			; assume success
	BBS	#IFB$V_BIO, IFB$B_FAC(R10), 10$ ; always allocate if bio.
	TSTL	IFB$L_IRAB_LNK(R10)	; any streams connected?
	BNEQ	40$			; NEQ if so, then just return and
					; no callback will occur.
10$:	ASHL	#9,R5,R5		; size of buffer in bytes
	CLRL	R9			; don't want bcnt (no irab)
	BSBW	RM$BDBALLOC_ALT		; get the buffer
	MOVL	R10,R9			; restore ifab addr to r9
	BLBC	R0,20$			; on error, cleanup and return
	JSB	@(SP)+			; call the caller back.  when
					; caller rsb's, come back here.
20$:
	PUSHL	R0			; Save status.
	BSBW	RM$RELEASALL		; Return all buffers, desc., unmap
					; global section if neccessary.
	POPR	#^M<R0>			; Restore status.
	BBC	#IFB$V_WRTACC, (R10), 30$ ; Branch if not write accessed.
	MOVL	IFB$L_FRB_PTR(R10), R1	; Pick up frb ptr, if any.
	BEQL	30$			; Branch if none.
	MOVL	FRB$L_SIFAB_PTR(R1), R1	; Get sifab address.
	DECW	SIFB$W_WACC_BUF(R1)	; Reduce count of wrt acc streams.
30$:	BBC	#IFB$V_BIO,IFB$B_FAC(R10),40$ ; All done if not block i/o.
	MOVL	R10, R5			; Get ifab addr into R5.
	ASSUME	IFB$L_IRAB_LNK EQ IRB$L_IRAB_LNK
35$:	MOVL	IFB$L_IRAB_LNK(R5), R5	; any more streams connected?
	BEQL	40$			; EQL no streams, just return.
	PUSHL	R0			; Save status code.
	BSBW	RM$ALBDB		; Restore BDB for block i/o.
	POPR	#^M<R0>			; Restore status code
	BRB	35$			; Look for more.
40$:	RSB				; And return.

	.SBTTL	RM$EXTEND_XAB - ROUTINE TO HANDLE ALLOCATION XABS

;++
; RM$EXTEND_XAB
;
;  this routine is called from rm$xab_scan whenever an allocation xab
;  is found on an $extend.
;
;  the xab is checked for validity and its parameters are used to extend
;  the file.  if there are no errors, this routine returns to continue
;  the xab scan.
;
;  inputs:
;
;	@sp	return address if successful
;	ap	rm$xab_scan argument list addr
;	r11	impure area addr
;	r10	ifab addr
;	r9	ifab addr
;	r8	fab addr
;	r4	zero if this is the first call, else the area i.d. of
;		the last area + 1
;	r3	xab addr
;
;  the xab has already been checked for basic validity
;
;  outputs:
;
;	r4		this xab's area i.d. + 1
;	r0-r2,r5-r6	destroyed
;
;  if an error occurs, the return address is popped from the stack,
;  r0 is set to the error code, and an rsb is performed back to caller
;  of rm$xab_scan.
;--

RM$EXTEND_XAB::
	CMPB	#IFB$C_IDX,IFB$B_ORGCASE(R10); if index file
	BNEQ	3$
	BBSS	#0,R4,2$
2$:	BRB	5$
3$:	BBSS	#0,R4,ERRIMX		; branch if duplicate xab

;
; !!! note - different test for
;     indexed f.o. required !!!
;

	TSTB	XAB$B_AID(R3)		; must be area 0
	BNEQ	ERRAID			; branch if not
5$:	MOVL	R3,R6			; xab addr to right reg
	BSBB	XTND			; go perform extension
	BLBS	R0,10$			; branch on success
	POPR	#^M<R1>			; pop return pc
10$:	RSB

;++
;
;  handle errors
;
;--

ERRIMX:	BRW	RM$ERRIMX		; duplicate alloc. xab

;

ERRAID:	BRW	RM$ERRAID		; bad area i.d.


;++
;  xtnd subroutine to perform the extend.
;
;  inputs:
;
;	r11	impure area addr
;	r10	ifab addr
;	r9	ifab addr
;	r8	fab addr
;	r6	xab addr if any, else 0
;	r3	xab or fab addr
;
;  outputs:
;
;	r0		status code
;	xab$l_alq or
;	fab$l_alq	# of blocks extended, 0 if none
;	fab$l_stv	fab$l_stv + # of blocks extended
;	r1,r2,r5,r6	destroyed
;
;--

XTND:	PUSHR	#^M<R3,R4,AP>
	ASSUME	XAB$L_ALQ EQ FAB$L_ALQ
	MOVL	XAB$L_ALQ(R3),R5	; set extend size
	BLEQ	ERRALQ			; branch if bad
	CLRL	XAB$L_ALQ(R3)		; and initialize actual extend size
	BBS	#IFB$V_BIO,IFB$B_FAC(R10),10$
	CMPB	#IFB$C_IDX,IFB$B_ORGCASE(R10)
	BNEQ	10$
	BSBW	RM$EXTEND3
	BRB	XTNDXIT
10$:	BSBW	RM$EXTEND0		; do the extend
	BLBC	R0,XTNDXIT		; branch on failure

;
; note: r1 = start vbn of extent
;	r6 = end vbn of extent + 1
;

	MOVL	(SP),R3			; restore xab/fab address
	SUBL3	R1,R6,FAB$L_ALQ(R3)	; calculate extend size
	ADDL2	FAB$L_ALQ(R3),FAB$L_STV(R8); and add it in to stv for total
	BBS	#IFB$V_BIO,IFB$B_FAC(R10),SEQEXT; branch if block i/o accessed
	CASE	TYPE=B,SRC=IFB$B_ORGCASE(R10),-
	DISPLIST=<SEQEXT,RELEXT>	; dispatch based on file org
	BRB	SEQEXT			; treat like sequential


;++
;
;  relative file extend  -  format the buckets
;
;--

RELEXT:
	BBS	#IFB$V_SEQFIL,(R10),SEQSHR; branch if seq file shr'd
	BSBW	RM$FMT_BKT2		; go format the buckets
	BSBW	RM$UPD_PROLOG2		; and update the prolog
X:	CLRL	IFB$L_LOCK_BDB(R10)	; say lock bdb gone
	BRB	XTNDXIT
SEQSHR:
	MOVL	IFB$L_LOCK_BDB(R10),R4	; set up r4 to release lock bdb
	PUSHL	R0			; save status
	BSBW	RM$SETHEBK		; set hbk and release lock on -1
	POPR	#^M<R0>			; restore status
	BRB	X			; and exit

;++
;
;  sequential file or block i/o extend  -  update high block
;
;--

SEQEXT:	SUBL3	#1,R6,IFB$L_HBK(R10)	; set new high block
XTNDXIT:
	POPR	#^M<R3,R4,AP>		; restore regs
	RSB

;++
;
;  handle invalid alq value error
;
;--

ERRALQ:	$PSECT_BR	L$RMS0
	RMSERR	ALQ
	BRW	XTNDXIT
	$PSECT_RESTORE

	.END
