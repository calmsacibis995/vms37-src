	$BEGIN	RM1STMFMT,002,L$RMS1STM,<STREAM FORMAT SUPPORT>

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
; Facility: RMS32
;
; Abstract:
;		This module provides stream format 
;		specific processing for the sequential file organization.
;
;
; Environment:
;		Star processor running Starlet exec.
;
; Author: Ron Schaefer				32-Jul-1981
;
; Modified By:
;
;	V03-002	RAS0083		Ron Schaefer		2-Apr-1982
;		Correct RAS0081 to do local EOF checking for blocks
;		between EBK and HBK, since RM$NEXT_BLK does not check.
;
;	V03-001	RAS0081		Ron Schaefer		22-Mar-1982
;		Correct end-of-file checking to treat EOF as a std
;		terminator and latch the EOF flag.
;		Clean up some other flow paths.
;
;	V02-010	RAS0066		Ron Schaefer		9-Feb-1982
;		Drop ^Z and ESC as stream file terminators.
;
;	V02-009	KPL0002		Peter Lieberwirth	31-Dec-1981
;		Fix yet another broken branch.
;
;	V02-008	RAS0054		Ron Schaefer	15-Dec-1981
;		Change the stream terminator set to match RMS-11 and
;		make it a global symbol to patch.
;
;	V02-007	RAS0046		Ron Schaefer	12-Nov-1981
;		Fix another broken branch.
;
;	V02-006	KPL0001		P Lieberwirth	30-Oct-1981
;		Fix another broken branch.
;
;	V02-005	RAS0041		Ron Schaefer	27-Oct-1981
;		Fix broken branches caused by root directories.
;
;	V02-004 RAS0028		Ron Schaefer	20-Aug-1981
;		Change FAB$C_STM11 to FAB$C_STM.
;
;	V02-003 RAS0024		Ron Schaefer	17-Aug-1981
;		Correct CTRL/Z checking for stream-11 files
;		used for PPF indirect input.
;
;--
;


	.SBTTL	DECLARATIONS

;
; Include Files:
;

;
; Macros:
;
	$FABDEF
	$RABDEF
	$RMSDEF
	$IFBDEF
	$IRBDEF
	$BDBDEF
	$DEVDEF

;
; Equated Symbols:
;
	NUL=0				; null character
	LF=10				; line feed
	VT=11				; vertical tab
	FF=12				; form feed
	CR=13				; carriage return
	DLE=16				; data link error
	DC1=17				; device control 1
	DC2=18				; device control 2
	DC3=19				; device control 3
	DC4=20				; device control 4
	CTRLZ=26			; control z
	ESC=27				; escape

;
; Own Storage:
;
; A 32-bit bitmask for each stream format, indexed by character value,
; where each bit is a 1 if that ASCII character is a terminator:  
;
; 	STM:	LF, FF, VT
;
; Character values greater than 31 are eliminated earlier.
; CRLF is handled as a special case.
;
RM$STM_MASK::
	.LONG	<<1@LF> + <1@FF> + <1@VT>>

	.SBTTL	RM$GET_STM_FMT - Get a stream format record

;++
; RM$GET_STM_FMT
;
;	this module includes the routine to perform get/find
;	record processing for stream formats the sequential file organization.
;
; Calling sequence:
;
;	bsbw	rm$get_stm_fmt	; for stream record formats
;
; Input Parameters:
;
;	r11	impure area addr
;	r10	ifab addr
;	r9	irab addr
;	r8	rab addr
;	r7	end of buffer addr
;	r1	addr of next datum
;
; Implicit Inputs:
;
;	the contents of the various structures.
;
; Output Parameters:
;
;	r0	status code
;	r1	updated addr of next datum
;	r2-r6	destroyed
;	r7	end of buffer addr
;
; Implicit Outputs:
;
;	the internal structures are updated to reflect the
;	results of the get or find. the rab fields
;	are updated to correspond to the found or gotten
;	record (see functional spec for list).
;
; Completion Codes:
;
;	standard rms.
;
; Side Effects:
;
;	none
;
;--

RM$GET_STM_FMT::
;
; quit if EOF flag is latched for STM format
;
	BBC	#IRB$V_EOF, (R9), 10$	; quit if EOF
	BRW	EOF			; return end-of-file

10$:	BBC	#IFB$V_PPF_INPUT, (R10),-
		NO_PPF_IN 		; br if not 'sys$input'
	BBC	#IRB$V_PPF_IMAGE, (R9),-
		NO_PPF_IN  		; branch if not indirect
	BBS	#DEV$V_TRM, IFB$L_PRIM_DEV(R10),-
		NO_PPF_IN 		; branch if terminal

;++
;
;  Fix up the buffer pointer so that the $EOD scan will complete
;  succesfully for the worst case record.
;  The worst case is defined as a 257 byte record, so that strategy is to
;  use the min(257,actual size to terminator)
;
;  This may involve re-positioning the buffer so that the current record is
;  in the first block.   We assume the RM$CONNECT1 has forced MBC>0 so that
;  at least 2 blocks are present in each buffer.
;
;  Check if entire record is contained in the buffer.
;  Note that the current record is not entirely contained within the buffer
;  can only happen with disk files.
;
;  This check assumes that mbc is non-zero for disk files where records cross
;  block boundaries.  in this case, bdb$b_val_vbns gives the number of valid
;  blocks in the buffer, and bdb$b_rel_vbn specifies which block within the
;  buffer is currently being processed, in the range of 0 to irb$b_mbc.
;
;  Calculate in r5 the total # of bytes remaining in this and any subsequent
;  blocks in the buffer.
;
;	note: if sys$input is from a disk file and records are allowed to
;	      cross block boundaries, irb$b_mbc must be greater than 0,
;	      otherwise the processing of a record crossing a block boundary
;	      will cause rms to loop.  it is assumed that rm$connect1 has
;	      forced mbc > 0.
;
;  If the record is not contained in the current buffer,
;  cause the buffer to be read again, but with the current block as the
;  first block in the buffer.  Since the buffer is a multiple block buffer,
;  the new read will cause the next part of the current record to be
;  resident also.
;
;--

	CMPL	R1, R7			; is this the end of the buffer?
	BNEQ	20$			; branch if not
	BSBW	RM$NEXT_BLK		; yes - go read another block
	BLBC	R0, ERRIO		; get out on error

20$:	SUBL3	R1, R7, R6		; compute # bytes left this block
	MOVL	IRB$L_CURBDB(R9), R4	; get current bdb address
	SUBB3	BDB$B_REL_VBN(R4),-	; # blocks to end of buffer
		BDB$B_VAL_VBNS(R4),R0	; # blocks in buffer
	DECB	R0			; adjust for current block
	MOVZBW	R0,R0			; correct data type
	MULW2	IFB$W_DEVBUFSIZ(R10), R0 ; # bytes after current block
	ADDW2	R0, R6			; total # valid bytes left
	CMPW	R6, #257		; is entire record within buff?
	BGEQU	30$			; branch if so

	BSBW	RM$RELBLK1		; release buffer
	BLBC	R0, ERRIO		; get out on error
	MOVQ	IRB$L_RP_VBN(R9),-
		IRB$L_NRP_VBN(R9)	; re-read this record
	CLRL	IRB$L_CURBDB(R9)	; make sure this bdb not reused
	JMP	RM$GET_BLK_DEV		; start over, re-mapping the buffer

30$:	MOVL	R6, R0			; build a descriptor of the memory buff
	MOVZBL	IFB$B_RFMORG(R10), R4	; get stream format type
	PUSHL	R1			; save original buffer addr
	BSBW	RM$STM_TERM		; discover if there was a terminator
	MOVL	(SP)+, R1		; restore buff addr
	BLBC	R0, 40$			; no terminator, so use buffer size
	MOVL	R4, R6			; use size till terminator

40$:	BSBW	RM$INPUT_SCAN		; compare string for
					; match with eod string
					; or '$deck' or '$eod'

	BLBS	R0, NO_PPF_IN		; continue on success
ERRIO:	RSB

;++
;
; user buffer errors
;
;--

ERRUSZ:	RMSERR	USZ			; user buffer size = 0
	RSB

ERRUBF1:ADDL2	#12, SP			; clear the stack
ERRUBF:	RMSERR	UBF			; no access to user buffer
	RSB

;++
;
; now deal with a regular data record
; currently stream format is always returned in movemode as locate mode
; is exceedingly complicated.
;
;--
NO_PPF_IN:

;
; get set up for copying the data
;
	BSBW	CHKEOF			; check for short buffer
	BLBC	R0, ERRIO		; quit if at EOF
	SUBL3	R1, R7, R0		; source buffer length
	BNEQ	30$			; if  zero, need a new blk
20$:	BSBW	NXT_BLK			; get the next block
	BLBC	R0, ERRIO		; quit on error
	SUBL3	R1, R7, R0		; compute new buffer length
	BEQL	20$			; go again to get the eof error
;
; now if we are doing STM, we have to ignore leading NULs (yecch)
;
30$:	CMPB	IFB$B_RFMORG(R10),-	; STM format?
		#FAB$C_STM 
	BNEQ	40$			; proceed if not
	SKPC	#NUL, R0, (R1)		; skip over NULs
	BEQL	20$			; skipped a whole block

;
; probe the user buffer and setup the ptrs.
;
40$:	BBS	#IRB$V_FIND, (R9), 50$	; no need for buffers on $FIND
	MOVL	RAB$L_UBF(R8), R3	; get user buffer
	MOVZWL	RAB$W_USZ(R8), R2	; and size
	BEQL	ERRUSZ			; can't be 0 length
	MOVL	R3, RAB$L_RBF(R8)	; set up result buffer
	MOVW	R2, IRB$W_CSIZ(R9)	; assume we'll fill 'er up
	BSBW	PROBE_WRITE		; probe the user buffer
	BLBC	R0,ERRUBF		; quit on error

;
; at this point, we have a descripter of the source buffer in R0/R1
; and a descriptor of the user's destination buffer in R2/R3.
; Now copy stream record fragments to the user buffer stopping when
; a terminator is encountered (return RMS$_NORMAL).
; If no terminator is seen before the end of the user buffer,
; then return RTB and skip to the terminator.
;
50$:	CLRL	-(SP)			; accumulated record length
	PUSHL	#1			; assume success status
	CLRL	-(SP)			; terminator seen flag
MOVEDATA:
	BLBS	(SP), DONE_1		; quit on terminator seen
	SUBL3	R1, R7, R0		; re-generate buffer length
	BNEQ	20$			; if there is any
5$:	BSBW	NXT_BLK			; get the next block
	BLBC	R0, ERRIO1		; quit on error
	BBS	#IRB$V_FIND, (R9), 10$	; no need for buffers on $FIND
	BSBW	PROBE_WRITE		; probe the user buffer
	BLBC	R0,ERRUBF1		; quit on error
10$:	SUBL3	R1, R7, R0		; get new source data length
	BEQL	5$			; go again to get the eof error
20$:	MOVZBL	IFB$B_RFMORG(R10), R4	; get stream format type
	BSBW	RM$STM_TERM		; find a terminator
	MOVL	R1, R6			; save the update buffer ptr
	ADDL2	R4, 8(SP)		; add in the chars seen
	MOVL	R0, (SP)		; and terminator seen flag
	BBS	#IRB$V_FIND, (R9),-	; no data copy needed for $FIND
		MOVEDATA

;
; now for a real bizarre check!  If we are doing STM and the last
; byte of the old buffer was CR, and the first byte of this buffer
; is LF, then we must delete the CR and finish with terminator encountered.
;
	BLBC	R0, COPY		; no terminator in this buffer
	CMPB	IFB$B_RFMORG(R10),-	; STM format?
		#FAB$C_STM
	BNEQ	COPY			; not STM
	CMPW	R4, #1			; 1-byte record?
	BNEQ	COPY			; nope
	CMPB	(R5), #LF		; is it LF?
	BNEQ	COPY			; nope
	CMPL	R3, RAB$L_RBF(R8)	; first time thru?
	BEQL	COPY			; no checking then
	IFNORD	#1, -1(R3), ERRUBF2,-	; probe the user buffer
		IRB$B_MODE(R9)
	CMPB	-1(R3), #CR		; was the last byte CR?
	BNEQ	COPY			; nope
	INCW	R2			; remove the CR from the count
	DECL	8(SP)			; and chars seen
DONE_1:	BRB	DONE_TERM		; and quit with terminator seen

ERRUBF2:BRW	ERRUBF1			; access failure

ERRIO1:	ADDL2	#12, SP			; clear the stack
	CMPW	R0, #<RMS$_EOF&^XFFFF>	; was error EOF?
	BNEQ	10$			; quit if not
	SSB	#IRB$V_EOF, (R9)	; set EOF flag
	BBS	#IRB$V_FIND, (R9), EOF	; always give EOF on $FIND
	SUBW3	R2, IRB$W_CSIZ(R9), -	; any data?
		RAB$W_RSZ(R8)
	BEQL	EOF			; if so, return the record, no error
	MOVL	R6,R1			; restore buffer ptr
	MOVQ	IRB$L_RP_VBN(R9),-	; set user RFA
		RAB$W_RFA(R8)
	RMSSUC				; claim success
10$:	RSB				; and return

EOF:	JMP	RM$GET_EOF		; return EOF

;
; now copy the smaller of the source buffer (upto terminator) or dest buffer
;
COPY:	CMPW	R4, R2			; source <> dest?
	BLSSU	60$			; branch if dest if larger
	BEQL	40$			; data segment = user buffer
	RMSERR	RTB, 4(SP)		; set return status
40$:	MOVC3	R2, (R5), (R3)		; copy the data
	BRB	80$

60$:
	SUBW3	R4, R2, -(SP)		; subtract this data portion
	MOVC3	R4, (R5), (R3)		; copy it
	MOVW	(SP)+, R2		; updated dest size
80$:	MOVL	R6, R1			; restore buffer ptr
	BRW	MOVEDATA		; and get another segment

DONE_TERM:
	BBS	#IRB$V_FIND, (R9), 10$	; no record length for $FIND
	SUBW3	R2, IRB$W_CSIZ(R9),-	; compute and store record length
		RAB$W_RSZ(R8)
10$:	ADDL2	#4, SP			; discard terminator status
	MOVQ	(SP)+, R0		; get return status and total recl
	BLBS	R0, 20$			; skip STV update on success
	MOVL	R1, RAB$L_STV(R8)	; tell user how big it was
20$:	MOVW	R1, IRB$W_CSIZ(R9)	; mark current record
	MOVL	R6, R1			; update buffer ptr past terminator
	JMP	RM$GET_DONE		; rejoin main flow

;
; get the next block in the file and check for logical EOF
;
NXT_BLK:PUSHR	#^M<R2,R3>		; save dest buffer desc
	BSBW	RM$NEXT_BLK		; get a new block
	POPR	#^M<R2,R3>		; restore buffer desc
	BLBC	R0, NXT			; quit on errors

;
; check for logical eof occuring in this buffer and correct
; the buffer size appropriately.
; R1 is the start addr of the record in the NRP_VBN block.
; R7 is the end-of-buffer + 1 address.
;
CHKEOF:	CMPL	IRB$L_NRP_VBN(R9),-	; in the eof block?
		IFB$L_EBK(R10)
	BLSSU	NXT			; nope, continue
	BGTRU	EOF1			; already past eof
	SUBW3	IRB$W_NRP_OFF(R9),-	; re-compute buffer end at eof
		IFB$W_FFB(R10),R7
	BLEQU	EOF1			; past FFB means EOF
	MOVZWL	R7,R7			; make into addr
	ADDL2	R1,R7			; set new end addr
	RMSSUC				; successful
NXT:	RSB

EOF1:	SSB	#IRB$V_EOF,(R9)		; set eof flag
	RMSERR	EOF			; and say eof error
	RSB

	.SBTTL	PROBE_WRITE - probe user buffers
;
; probe the user buffer
;
; inputs
;	r2 - user buffer size
;	r3 - user buffer addr
;
; outputs
;	r0 - status
;
; calling sequence
;	BSBW	PROBE_WRITE
;

PROBE_WRITE:
	CMPW	R2, #512		; short enough buffer?
	BGTRU	10$
	IFNOWRT	R2, (R3), PROBE_FAIL,-
		IRB$B_MODE(R9)
	BRB	30$

;
; probe for buffers greater than 512 bytes long
;

10$:	PUSHR	#^M<R2,R3>		; save byte count and address
	CVTWL	#-512, R0		; address computation constant
20$:	IFNOWRT	R2, (R3), PROBE_FAIL,-
		IRB$B_MODE(R9)		; branch if not writeable
	SUBL2	R0, R3			; get address next page
	MOVAW	(R2)[R0], R2		; adjust count (- 2 pages)
	BGTR	20$			; branch if more to probe
	SUBL2	R0, R2			; 'add' back in 1 page
	BGTR	20$			; branch if more to probe
	POPR	#^M<R2,R3>		; restore byte count and address
30$:	RMSSUC
	RSB

PROBE_FAIL:
	CLRL	R0			; failure
	RSB


	.SBTTL	RM$STM_TERM - Locate terminator for stream format

;++
; RM$STM_TERM - Locate the terminator in a stream format buffer.
;
; This module performs the following functions:
;
;	Locate the terminator (if any) in a buffer.
;	Return a string descriptor of the stream record identified.
;	Compute the buffer address after the terminator.
;	Include the terminator or not per format type and terminator type.
;
; Calling Sequence:
;
;	 BSBW	RM$STM_TERM
;
; Input Parameters:
;
;	R0	buffer length
;	R1	buffer address
;	R4	stream format code (uses FAB RFM field codes)
;
; Implicit Inputs:
;
;	none
;
; Output Parameters:
;
;	R0	status --  true IFF a terminator was found
;	R1	updated buffer address, past record or past all of buffer
;	R4	length of stream record identified
;	R5	start address of stream record
;
; Implicit Outputs:
;
;	none
;
; Completion Codes:
;
;	R0	status
;
; Side Effects:
;
;	none
;
;--


RM$STM_TERM::

	PUSHR	#^M<R0,R1>		; Save the original buffer desc

	ASSUME	<FAB$C_STM+1> EQ FAB$C_STMLF
	ASSUME	<FAB$C_STMLF+1> EQ FAB$C_STMCR
	CASE	TYPE=B, SRC=R4,-	; Dispatch based on stream format type
		LIMIT=#FAB$C_STM,-	;  first stream format is STM
		DISPLIST=< -
		STM,-			; FAB$C_STM
		STM_LF,-		; FAB$C_STMLF
		STM_CR>			; FAB$C_STMCR

;
;  all other format types have no terminator
;
NO_TERM:
	POPR	#^M<R4,R5>		; retrieve original buffer
	ADDL3	R4, R5, R1		; point R1 past entire buffer
	CLRL	R0			; return failure
	RSB

STM_LF:
	MOVB	#LF, R4			; only 1 terminator char
	BRB	SIMPLE_STM		; makes for an easy scan

STM_CR:
	MOVB	#CR, R4			; likewise for this mode
SIMPLE_STM:
	LOCC	R4, R0, (R1)		; was the terminator in the buffer?
	BEQL	NO_TERM			; nope, so return failure
	INCL	R1			; skip over the DFT
FND_TERM:
	SUBL2	R0, (SP)		; compute recl
	MOVQ	(SP)+, R4		; get original buffer desc
	RMSSUC				; flag success 
	RSB

;
; deal with the more complicated case of RMS-11 stream format
;
STM:
	MOVZBL	(R1)+, R4		; get the next char 
	CMPB	R4, #31			; eliminate non-control chars
	BGTRU	10$			; 
	BBS	R4, W^RM$STM_MASK,-
		TRM_11			; bit index by char to see if this
					; is a terminator
10$:	DECL	R0			; count this char
	BEQL	NO_TERM			; buffer is all gone without a term
	BRB	STM			; try next char

;
; found one of the STM terminators, check for CRLF
; which are deleted, otherwise include the terminator in the data
; note that R1 points past the terminator but R0 hasn't counted it yet
;
TRM_11:
	DECL	R0			; include the terminator 
	CMPB	#LF, R4			; was the terminator LF?
	BNEQ	FND_TERM

;
; found LF in STM, now drop both if the preceding char is CR.
;
DFT_11:
	ADDL3	#1, R0, R5		; was LF first char?
	CMPL	R5, (SP)
	BEQL	FND_TERM		; if so, just ignore it
	CMPB	#CR, -2(R1)		; is preceding char CR?
	BNEQ	FND_TERM		; if not, leave it in the data
	ADDL2	#2, R0			; discard CR and LF
	BRB	FND_TERM		; and return success

	.END
