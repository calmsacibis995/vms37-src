MODULE RM3XALLO (LANGUAGE (BLISS32) ,
		IDENT = 'V03-000'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:	RMS32 index sequential file organization
!
! ABSTRACT:
!		 This routine fills in the area definitions from the XAB
!
!
! ENVIRONMENT:
!
!		VAX/VMS OPERATING SYSTEM
!
!--

!
! AUTHOR:       	 D. M. BOUSQUET
! CREATION DATE:         10-AUG-78  10:33
!
!
! MODIFIED BY
!
!	V02-007	KBT0001		K B Thompson	30-Dec-1981
!		Fill in the ALQ field with SOMETHING.
!
!	V02-006	CDS0002		C Saether	 9-Aug-1981
!		Use alternate linkage for RELEASE.
!
!	V02-005 REFORMAT	D M WALP	24-JUL-1980
!
!	V02-004	CDS0001		C D SAETHER	11-MAR-1980
!		Return OK_NOP if area vbn zero (prologue not read)
!
! REVISION HISTORY:
!
!   Wendy Koenig, 	24-OCT-78  14:03
!   X0002 - MAKE CHANGES CAUSED BY SHARING CONVENTIONS
!
!   Wendy Koenig, 	8-FEB-79  16:46
!   X0003 - ZERO ALN FIELD IN XAB
!
!*****

LIBRARY 'RMSLIB:RMS';

REQUIRE 'RMSSRC:RMSIDXDEF';

! define default psects for code
!

PSECT
    CODE = F$OPEN3(PSECT_ATTR),
    PLIT = F$OPEN3(PSECT_ATTR);

! Linkages
!
LINKAGE
    L_CHKSUM,
    L_RELEASE_FAB,
    L_CACHE,
    L_XALLO3;

! External Routines
!
EXTERNAL ROUTINE
    RM$CHKSUM	: RL$CHKSUM,
    RM$RELEASE	: RL$RELEASE_FAB,
    RM$CACHE	: RL$CACHE;

GLOBAL ROUTINE RM$XALLO3 (XAB) : RL$XALLO3 =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine checks to make sure that the Area Descriptors
!	are never greater than the maximum number of descriptors
!	defined for the file, (found in the IFAB).
!
!	It then fills in the ALLOCATION XAB from the area descriptor
!
! CALLING SEQUENCE:
!	RM$XALLO3(XAB)
!
! INPUT PARAMETERS:
!	XAB		-  Pointer to the allocation XAB we are processing
!
!
! IMPLICIT INPUTS:
!	$XAB
!	    [XAB$B_AID] -  Area ID
!
!	$AREADEF
!	    [AREA$B_AOP]	-  Area id for this descriptor
!	    [AREA$B_ALN]	-  Alignment options
!	    [AREA$L_CNBLK]	-  Number of blocks in current extent
!	    [AREA$L_NXBLK]	-  Number of blocks in next extent
!	    [AREA$W_DEQ]	-  Extend allocation alignment
!	    [AREA$B_ARBKTSZ]	-  Bucket size for area
!	    [AREA$W_VOLUME]	-  Volume number
!	    [AREA$C_BLN]	-  Block length for area desc., 64 bytes
!
!	$STRUCT IFAB
!	    [IFB$B_AMAX]	-  Maximum number of area descriptors in file
!	    [IFB$B_AVBN]	-  Start vbn of first area descriptor
!	    [IFB$B_ORGCASE]	-  File organization
!	    [IFB$C_IDX]		-  Constant for index files
!
!
! OUTPUT PARAMETERS:
!	XAB  -  Untouched by this routine
!
! IMPLICIT OUTPUTS:
!	$XAB
!	    [XAB$B_AOP]		-  Alignment options
!	    [XAB$B_ALN]		-  Alignment
!	    [XAB$L_ALQ]		-  Allocation
!	    [XAB$W_DEQ]		-  Default extend quantity
!	    [XAB$B_BKZ]		-  Bucket size in blocks
!	    [XAB$W_VOL]		-  Volume number
!
!
! ROUTINE VALUE:
!	RMSERR
!	    (AID)  -  Invalid area id
!	    (SUC)  -  Success
!
!
! SIDE EFFECTS:
!	NONE
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_FAB_STR;

    MAP
	XAB	: REF BBLOCK;

    LOCAL
	AREA_VBN,
	AREA_DESC	: REF BBLOCK;

    ! Just to make sure this is an indexed file
    !
    IF .IFAB[IFB$B_ORGCASE] EQL IFB$C_IDX
    THEN
	BEGIN

	!  Before we do anything let's check validity of the AID, all we really
	! care about is that it isn't larger than the largest defined for this
	! field.  Don't care if areas are contiguous or if AID's are	in
	! ascending order.
	!

	IF .XAB[XAB$B_AID] GTRU .IFAB[IFB$B_AMAX]
	THEN
	    RETURN RMSERR(AID);

	! Now to compute the area vbn and the descriptor to work on If AVBN is
	! zero, the prologue wasn't read on OPEN (block i/o)
	!

	IF (AREA_VBN = .IFAB[IFB$B_AVBN]) EQL 0
	THEN
	    RETURN RMSSUC(OK_NOP);

	AREA_VBN = .AREA_VBN + .XAB[XAB$B_AID]/8;
	AREA_DESC = .XAB[XAB$B_AID] AND	%X'00000007';

	!	Now to read in the area_vbn
	!
	BEGIN
	GLOBAL REGISTER
	    COMMON_IO_STR;

	LOCAL
	    STATUS;

	STATUS = RM$CACHE(.AREA_VBN, 512, 0);

	!	If error then return with error code in status
	!

	IF NOT .STATUS
	THEN
	    RETURN .STATUS;

	!	Now to check bucket and release
	!
	RETURN_ON_ERROR (RM$CHKSUM(),
	    BEGIN
	    (RM$RELEASE(0))
	    END);

	!	Now to calculate the offset into the vbn
	!
	AREA_DESC = .AREA_DESC*AREA$C_BLN + .BKT_ADDR;


	!	Now to fill in the various fields
	!
	XAB[XAB$B_AOP] = .AREA_DESC[AREA$B_AOP];


	! we were setting up this field from the area desc, but just once the
	! rfi value was set and it caused all sorts of problems..... so let's
	! just zero it for now and worry about it later	XAB[XAB$B_ALN] =
	! .AREA_DESC[AREA$B_ALN];
	!
	XAB[XAB$B_ALN] = 0;

	! The best guess we can make about the allocation is by adding the
	! number of blocks in the two extents, current and next.
	!
	XAB[XAB$L_ALQ] = .AREA_DESC[AREA$L_CNBLK] + .AREA_DESC[AREA$L_NXBLK];
	XAB[XAB$W_DEQ] = .AREA_DESC[AREA$W_DEQ];
	XAB[XAB$B_BKZ] = .AREA_DESC[AREA$B_ARBKTSZ];
	XAB[XAB$W_VOL] = .AREA_DESC[AREA$W_VOLUME];
	RM$RELEASE(0);
	END;
	END;

    ! Now to return the value of the routine if all went well
    !
    RETURN RMSSUC(SUC);

    END;

END

ELUDOM
