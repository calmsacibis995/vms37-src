	$BEGIN	NT0DAPCRC,004,NF$NETWORK,<DAP LEVEL CRC>


;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; Facility: RMS
;
; Abstract:
;
;	This module contains the CRC table for DAP CRC checksum computation
;	plus routines related to CRC computation and error logging.
;
; Environment: VAX/VMS, executive mode
;
; Author: James A. Krycka,	Creation Date:	16-JUN-1979
;
; Modified By:
;
;
;	V02-004	KRM0024		K R Malik	 8-AUG-1981
;		Fix bugs in NT$CRC_LOGERR.
;
;	V02-003	KRM0023		K R Malik	31-JUL-1981
;		Add NT$CRC_LOGERR routine to log DAP CRC errors to the
;		DECnet Event Logger (EVL).
;
;	V02-002	JAK0058		J A Krycka	01-JUN-1981
;		This module was created from code previously residing in
;		NT0CREATE.
;
;--

	.SBTTL	DECLARATIONS

;
; Include Files:
;

	$DAPPLGDEF			; Define DAP prologue symbols
	$DAPCNFDEF			; Define DAP Configuration message
	$DAPCRCDEF			; Define DAP CRC checksum symbols
	$EVCDEF				; Define event class symbols
	$IFBDEF				; Define IFAB symbols
	$NFBDEF				; Define network function definition symbols
	$NMADEF				; Define network management symbols
	$NWADEF				; Define network work area symbols
	$RAWDEF				; Define raw event record format

;
; Macros:
;
;	None
;
; Equated Symbols:
;
;	None
;
; Own Storage:
;
;	None
;

	.SBTTL	NT$CRC_TABLE - CRC POLYNOMIAL TABLE

;++
; This is the CRC table for use in DAP CRC checksum computation.
; The CRC polynomial function (order 16) used is:
;
;	X**16 + x**15 + x**13 + x**7 + x**4 + x**2 + x**1 + 1
;--

	.SAVE
	.PSECT	ND$NETWORK,LONG,GBL,NOWRT

NT$CRC_TABLE::				; CRC polynomial table
	.LONG	DAP$K_CRC_TBL0		;  Table entry 0
	.LONG	DAP$K_CRC_TBL1		;  Table entry 1
	.LONG	DAP$K_CRC_TBL2		;  Table entry 2
	.LONG	DAP$K_CRC_TBL3		;  Table entry 3
	.LONG	DAP$K_CRC_TBL4		;  Table entry 4
	.LONG	DAP$K_CRC_TBL5		;  Table entry 5
	.LONG	DAP$K_CRC_TBL6		;  Table entry 6
	.LONG	DAP$K_CRC_TBL7		;  Table entry 7
	.LONG	DAP$K_CRC_TBL8		;  Table entry 8
	.LONG	DAP$K_CRC_TBL9		;  Table entry 9
	.LONG	DAP$K_CRC_TBLA		;  Table entry 10
	.LONG	DAP$K_CRC_TBLB		;  Table entry 11
	.LONG	DAP$K_CRC_TBLC		;  Table entry 12
	.LONG	DAP$K_CRC_TBLD		;  Table entry 13
	.LONG	DAP$K_CRC_TBLE		;  Table entry 14
	.LONG	DAP$K_CRC_TBLF		;  Table entry 15

	.RESTORE

	.SBTTL	NT$CRC_INIT - INITIALIZE CRC COMPUTATION

;++
; NT$CRC_INIT - performs DAP CRC computation initialization.
;
; Calling Sequence:
;
;	BSBW	NT$CRC_INIT
;
; Input Parameters:
;
;	R7	NWA (=DAP) address
;
; Implicit Inputs:
;
;	DAP$Q_SYSCAP
;
; Output Parameters:
;
;	R0	Status code (RMS)
;
; Implicit Outputs:
;
;	DAP$L_CRC_RSLT
;
; Completion Codes:
;
;	Standard RMS completion codes
;
; Side Effects:
;
;	None
;
;--

NT$CRC_INIT::				; Entry point
	CLRL	R0			; Initially set status to failure
	BBC	#DAP$V_DAPCRC,-		; Branch if partner does not support
		DAP$Q_SYSCAP(R7),10$	;  file level CRC checksum
	MOVL	#DAP$K_CRC_INIT,-	; Use initial CRC value as first
		DAP$L_CRC_RSLT(R7)	;  CRC resultant value
	RMSSUC				; Return success
10$:	RSB				; Exit with status code in R0

	.SBTTL	NT$CRC_LOGERR - LOG DAP CRC ERROR

;++
; NT$CRC_LOGERR - generates an appropriate message to the DECnet Event Logger
;	(EVL) to log the occurrence of a DAP level CRC checksum error.
;
; Calling Sequence:
;
;	BSBW	NT$CRC_LOGERR
;
; Input Parameters:
;
;	R7	NWA (=DAP) address
;	R8	RAB address
;	R9	IRAB address
;	R10	IFAB address
;	R11	Impure area address
;
; Implicit Inputs:
;
;	None
;
; Output Parameters:
;
;	None
;
; Implicit Outputs:
;
;	None
;
; Completion Codes:
;
;	None
;
; Side Effects:
;
;	An attempt is made to log a DAP CRC error to the DECnet Event Logger.
;	Return status of the request is neither checked nor returned.
;
;--

NT$CRC_LOGERR::				; Entry point
	PUSHR	#^M<R0,R1,R2,R3,R4,R5>	; Save registers
;
; Extract the name of the partner node
;
	MOVAB	NWA$T_NODEBUF(R7),R3	; Get address of node spec list
	LOCC	#^A/"/,#7,(R3)		; Find the quote (in case of access string)
	BNEQ	10$			; Branch if found
	LOCC	#^A/:/,#7,(R3)		; Find the colon
	BEQL	30$			; If neither colon nor quote then exit
10$:	SUBL3	R3,R1,R2		; Compute the nodename length
	CMPB	#^A/_/,(R3)		; Nodename start with an underscore?
	BNEQ	20$			; No
	DECL	R2			; Yes, lower the count
	INCL	R3			; and bump pointer past underscore

;
; Build the NFB descriptor, the NFB, the event buffer descriptor and
; the event buffer itself.
;

20$:	MOVAB	NWA$T_TEMP(R7),R5	; Get address to build event buffer
	MOVZBL	#5,(R5)+		; NFB desc count field
	MOVAL	4(R5),(R5)+		; NFB desc addr field
	MOVB	#NFB$C_LOGEVENT,(R5)+	; NFB
	CLRL	(R5)+			;
	ADDL3	#RAW$T_DATA+4,R2,(R5)+	; Event buffer desc count
	MOVAL	4(R5),(R5)+		; Event buffer desc address
	MOVW	-8(R5),(R5)+		; Put event count in event buffer
	$GETTIM_S -			; Get the system time
		TIMADR=(R5)		; Put time in the event buffer
	ADDL2	#8,R5			; Bump the event buffer pointer
	MOVW	#EVC$C_VMS_DPC,(R5)+	; Put in the event code
	MOVB	#EVC$C_SRC_NON,(R5)+	; Put in the source type
	ADDL2	#17,R5			; Skip the source ID field
	MOVW	#EVC$C_VMS_PNOD,(R5)+	; Remote node name
	MOVB	#NMA$M_PTY_ASC,(R5)+	; Data type
	MOVB	R2,(R5)+		; Put in the nodename count
	MOVC3	R2,(R3),(R5)		; Put in the nodename 
	MOVAB	NWA$T_TEMP(R7),R5	; Get address of TEMP
	MOVAB	13(R5),R4
	$QIO_S -			;
		CHAN=IFB$W_CHNL(R10),-	; Use already assigned channel
		FUNC=#IO$_ACPCONTROL,-	; Function code
		P1=(R5),-		; Adr of descriptor of NFB
		P2=R4			; Adr of descriptor of event buffer

;
; Do not bother to check the return status since we wish to preserve the
; original DAP CRC error status in R0 (and not the success or failure of
; our attempt to log it).
;

30$:	POPR	#^M<R0,R1,R2,R3,R4,R5>	; Restore registers
	RSB				; Exit

	.END				; End of module
