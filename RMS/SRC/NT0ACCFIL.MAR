	$BEGIN	NT0ACCFIL,007,NF$NETWORK,<COMMON FILE ACCESS ROUTINES>


;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; Facility: RMS
;
; Abstract:
;
;	This module contains commonly used file access support routines.
;
; Environment: VAX/VMS, executive mode
;
; Author: James A. Krycka,	Creation Date:	09-DEC-1977
;
; Modified By:
;
;	V02-007	JAK0071		J A Krycka	07-FEB-1982
;		Return more specific error when rejecting FOP request.
;
;	V02-006	JAK0063		J A Krycka	25-AUG-1981
;		Update symbols to correspond to revised DAPDEF.MDL file.
;
;	V02-005	JAK0061		J A Krycka	15-JUL-1981
;		Igonre FAB$V_INP instead of flagging it as an error to allow
;		'$ @node::file.com' to work.
;
;	V02-004	JAK0058		J A Krycka	01-JUN-1981
;		This module was created from code previously residing in
;		NT0OPEN.
;
;	The following edit history entries were copied from NT0OPEN:
;
;	V02-003	JAK0051		J A Krycka	19-DEC-1980
;		When building a filespec string to send to remote FAL, perform
;		the following system specific checks:
;		(1) if remote node is RT-11, eliminate the version number
;		    substring (";" or ";ver").
;		(2) if remote node is TOPS-20, convert the ";" version number
;		    delimiter to a "." delimiter.
;
;	V02-002	JAK0044		J A Krycka	28-APR-1980
;		Save DAP$B_OSTYPE and DAP$B_FILESYS fields in NWA.
;
;--

	.SBTTL	DECLARATIONS

;
; Include Files:
;

	$DAPPLGDEF			; Define DAP prologue symbols
	$DAPHDRDEF			; Define DAP message header
	$DAPCNFDEF			; Define DAP Configuration message
	$FABDEF				; Define File Access Block symbols
	$FWADEF				; Define File Work Area symbols
	$NWADEF				; Network Work Area symbols

;
; Macros:
;
;	None
;
; Equated Symbols:
;

	ASSUME	DAP$Q_DCODE_FLG EQ 0
	ASSUME	NWA$Q_FLG EQ 0

;
; Own Storage:
;
;	None
;

	.SBTTL	NT$EXCH_CNF - EXCHANGE DAP CONFIGURATION MESSAGES

;++
; NT$EXCH_CNF - engages in a DAP dialogue to exchange DAP Configuration
;	messages with the remote FAL.
;
; Calling Sequence:
;
;	BSBW	NT$EXCH_CNF
;
; Input Parameters:
;
;	R7	NWA address (=DAP)
;	R8	FAB address
;	R9	IFAB address
;	R10	FWA address
;	R11	Impure Area address
;
; Implicit Inputs:
;
;	DAPDEF constants
;	DAP$W_BUFSIZ
;
; Output Parameters:
;
;	R0	Status code (RMS)
;	R1-R5	Destroyed
;	AP	Destroyed
;
; Implicit Outputs:
;
;	None
;
; Completion Codes:
;
;	Standard RMS completion codes
;
; Side Effects:
;
;	None
;
;--

NT$EXCH_CNF::				; Entry point for $CREATE and $OPEN

;
; Ignore the FOP options CIF, DFW, and INP without returning an error.
; Disallow the FOP option NFS.
; Disallow the FOP options KFO and UFO set individually, but allow <KFO!UFO>
; to support the '$ RUN node::file.exe' DCL command.
;

	MOVL	FAB$L_FOP(R8),R0	; Get user FOP options
	BBS	#FAB$V_INP,R0,20$	; ***** Temporary until INP fixed *****
	BBS	#FAB$V_NFS,R0,20$	; Declare this option unsupported
	BBC	#FAB$V_KFO,R0,10$	; These options are each unsupported
	BBC	#FAB$V_UFO,R0,10$	;  unless both are set
	BRB	NT$EXCH_CNF_ALT		; Consider this a load image function
10$:	BITL	#<<FAB$M_KFO>!-		; Branch if none are specified;
		  <FAB$M_UFO>!-		;  otherwise declare these options
		0>,R0			;  unsupported over the network
	BEQL	NT$EXCH_CNF_ALT		;
20$:	BRW	NT$LCL_FOP		; Return RMS$_SUPPORT error and
					;  exit with RMS code in R0

;
; Initialize the DAP control block and
; initialize receive, transmit, and auxiliary buffers.
;

NT$EXCH_CNF_ALT::			; Entry point for $ERASE and $SEARCH
	$ZERO_FILL-			; Zero DAP control block
		DST=(R7)-		;
		SIZE=#DAP$C_BLN		;

	ASSUME	NWA$Q_XMT EQ NWA$Q_RCV+8
	ASSUME	NWA$Q_AUX EQ NWA$Q_XMT+8

	MOVAQ	NWA$Q_RCV(R7),R0	; Get start address of descriptors
	CLRL	(R0)+			; Initialize receive descriptor
	MOVAB	NWA$T_RCVBUF(R7),(R0)+	;
	CLRL	(R0)+			; Initialize transmit descriptor
	MOVAB	NWA$T_XMTBUF(R7),(R0)+	;
	CLRL	(R0)+			; Initialize auxiliary descriptor
	MOVAB	NWA$T_AUXBUF(R7),(R0)	;
	MOVL	(R0),NWA$L_AUX_PTR(R7)	; Copy auxiliary buffer address
					;  to next byte pointer
	MOVZWL	#NWA$C_BUFFERSIZ,-	; Declare maximum DAP message size
		NWA$W_DAPBUFSIZ(R7)	;  to be size of allocated buffer

;
; Build and send DAP Configuration message to partner.
;

SEND_CNF:				; (required message)
	$SETBIT	#NWA$V_LAST_MSG,(R7)	; Declare this last message to block
	MOVL	#DAP$K_CNF_MSG,R0	; Get message type value
	BSBW	NT$BUILD_HEAD		; Construct message header
	MOVW	#NWA$C_BUFFERSIZ,(R5)+	; Store BUFSIZ field
	MOVB	#DAP$K_VAXVMS,(R5)+	; Store OSTYPE field
	MOVB	#DAP$K_RMS32,(R5)+	; Store FILESYS field
	MOVB	#DAP$K_VERNUM_V,(R5)+	; Store VERNUM field
	MOVB	#DAP$K_ECONUM_V,(R5)+	; Store ECONUM field
	MOVB	#DAP$K_USRNUM_V,(R5)+	; Store USRNUM field
	MOVB	#DAP$K_SOFTVER_V,(R5)+	; Store SOFTVER field
	MOVB	#DAP$K_USRSOFT_V,(R5)+	; Store USRSOFT field
	MOVL	#DAP$K_SYSCAP1_V,R1	; Get VAX supported capabilities
	MOVL	#DAP$K_SYSCAP2_V,R2	;  quadword mask
	BSBW	NT$CVT_BN8_EXT		; Store SYSCAP as an extensible field
	BSBW	NT$BUILD_TAIL		; Finish building message
	BSBW	NT$TRANSMIT		; Send Configuration message to FAL
	BLBC	R0,ERROR		; Branch on failure

;+
; Receive DAP Configuration message response from partner.
;-

RECV_CNF:				; (required message)
	$SETBIT	#DAP$K_CNF_MSG,DAP$L_MSG_MASK(R7)
					; Expect response of configuration msg
	BSBW	NT$RECEIVE		; Get reply from FAL
	BLBC	R0,ERROR		; Branch on failure

	ASSUME	DAP$B_OSTYPE+1 EQ DAP$B_FILESYS
	ASSUME	NWA$B_OSTYPE+1 EQ NWA$B_FILESYS

	MOVW	DAP$B_OSTYPE(R7),-	; Save OSTYPE and FILESYS fields
		NWA$B_OSTYPE(R7)	;  in NWA

;
; Determine maximum DAP buffer size to use which is the smaller of partner's
; buffer size and RMS' buffer size.
;

	TSTW	DAP$W_BUFSIZ(R7)	; Use our buffer size if partner
	BEQL	10$			;  has unlimited buffer space
	CMPW	DAP$W_BUFSIZ(R7),-	; Use our buffer size if partner
		#NWA$C_BUFFERSIZ	;  has buffer size GEQ ours
	BGEQU	10$			;
	MOVZWL	DAP$W_BUFSIZ(R7),-	; Use partner's buffer size which is
		NWA$W_DAPBUFSIZ(R7)	;  smaller than ours
10$:	RMSSUC				; Return success
ERROR:	RSB				; Exit with RMS code in R0

	.SBTTL	NT$GET_FILESPEC - BUILDS A FILESPEC

;++
; NT$GET_FILESPEC - builds a filespec (less primary node name) from its
;	constituent parts and stores it as a counted ASCII string.
;
; Calling Sequence:
;
;	BSBW	NT$GET_FILESPEC
;
; Input Parameters:
;
;	R5	Address of buffer to receive counted ASCII string
;	R7	NWA address
;	R8	FAB address
;	R9	IFAB address
;	R10	FWA address
;	R11	Impure Area address
;
; Implicit Inputs:
;
;	FWA$B_DIRTERM
;	FWA$Q_DEVICE
;	FWA$Q_DIR1
;	FWA$Q_DIR2
;	FWA$Q_DIR2+8 thru FWA$Q_DIR2+48
;	FWA$Q_NAME
;	FWA$Q_QUOTED
;	FWA$Q_VERSION
;	FWA$V_DEVICE
;	FWA$V_EXP_VER
;	FWA$V_GRPMBR
;	FWA$V_DIR
;	FWA$V_DIR_LVLS
;	FWA$V_QUOTED
;	NWA$B_OSTYPE
;
; Output Parameters:
;
;	R0-R3	Destroyed
;	R5	Updated buffer pointer (address of end of string + 1)
;	AP	Destroyed
;
; Implicit Outputs:
;
;	None
;
; Completion Codes:
;
;	None
;
; Side Effects:
;
;	None
;
;--

NT$GET_FILESPEC::			; Entry point
	PUSHR	#^M<R4,R6,R8>		; Save registers
	MOVL	R5,R3			; Copy next byte pointer
	CLRB	(R3)+			; Skip over count byte
	MOVL	R3,R8			; Save pointer to start of DST string

;
; Process secondary node spec strings.
;

	TSTB	FWA$B_SUBNODCNT(R10)	; Branch if there is only one
	BEQL	10$			;  node spec in node spec list
	MOVZWL	FWA$Q_NODE1(R10),R0	; Get size of primary node spec
	SUBW3	R0,FWA$Q_NODE(R10),R1	; Compute descriptor of concatenated
	ADDL3	R0,FWA$Q_NODE+4(R10),R2	;  secondary node spec strings
	MOVC3	R1,(R2),(R3)		; Copy secondary node specs

;
; Process quoted string.
;
; Note:	If there is only a primary node spec, then the quoted string is copied
;	with the quote delimiters removed. Conversely, if secondary node specs
;	are present, then the quoted string is copied with the quote delimiters
;	intact.
;

	BBC	#FWA$V_QUOTED,(R10),30$	; Branch if no quoted string follows
	MOVQ	FWA$Q_QUOTED(R10),R0	; Get descriptor of quoted string
					;  (including quote delimiters)
	BRB	20$			; Join common code
10$:	BBC	#FWA$V_QUOTED,(R10),30$	; Branch if no quoted string follows
	SUBL3	#2,FWA$Q_QUOTED(R10),R0	; Get size of string less quotes
	ADDL3	#1,FWA$Q_QUOTED+4(R10),R1; Get address of string
20$:	MOVC3	R0,(R1),(R3)		; Copy quoted string
	BRW	120$			; Join common code

;
; Process device name.
;

30$:	BBC	#FWA$V_DEVICE,(R10),40$	; Branch if no device name present
	MOVC3	FWA$Q_DEVICE(R10),-	; Copy device name
		@FWA$Q_DEVICE+4(R10),(R3)
	MOVB	#^A\:\,(R3)+		; Append delimiter

;
; Process directory_list.
; It is either in the [group,member] or [directory_name_list] format.
;

40$:	BBC	#FWA$V_DIR,(R10),90$	; Branch if no directory present
	SUBB3	#2,FWA$B_DIRTERM(R10),-	; Store left bracket ('[' or '<')
		(R3)+			;  (ASCII code is right bracket + 2)
	BBS	#FWA$V_GRPMBR,(R10),70$	; Branch if [group,member] format
	MOVAQ	FWA$Q_DIR1(R10),R6	; Get address of directory descriptor
	EXTZV	#FWA$V_DIR_LVLS,-	; Get # of directory sub-levels
		#FWA$S_DIR_LVLS,(R10),AP;  (0 means UFD level only)
50$:	MOVL	(R6)+,R0		; Get size of string
	MOVC3	R0,@(R6)+,(R3)		; Copy next directory name
	MOVB	#^A\.\,(R3)+		; Copy directory separator
	TSTW	-6(R6)			; Branch if elipsis does not
	BEQL	60$			;  follow directory name
	MOVW	#^A\..\,(R3)+		; Append two dots to make an elipsis
60$:	SOBGEQ	AP,50$			; Branch if more directories
	TSTW	-6(R6)			; Branch if we just copied an
	BNEQ	80$			;  elipsis
	DECL	R3			; Otherwise, remove unwanted
	BRB	80$			;  (single) trailing dot
70$:	MOVC3	FWA$Q_DIR1(R10),-	; Copy group directory field
		@FWA$Q_DIR1+4(R10),(R3)	;
	MOVB	#^A\,\,(R3)+		; Copy directory separator
	MOVC3	FWA$Q_DIR2(R10),-	; Copy member directory field
		@FWA$Q_DIR2+4(R10),(R3)	;
80$:	MOVB	FWA$B_DIRTERM(R10),(R3)+; Store right bracket (']' or '>')

;
; Process file name, file type, and file version.
; To facilitate communication with non-VMS systems, several system specific
; version number checks will be made.
;
; Note:	The file name string described by FWA$Q_NAME is guaranteed to contain
;	both the "." and ";" delimiters, even if the user did not specify a
;	file type or file version number. Furthermore, a "." version number
;	delimiter entered by the user will have been converted to a ";"
;	delimiter by RM0XPFN!
;

90$:	MOVC3	FWA$Q_NAME(R10),-	; Copy file name string (assembled
		@FWA$Q_NAME+4(R10),(R3)	;  into one string by RM0XPFN)
	BBS	#DAP$V_VAXVMS,(R7),120$	; Branch if partner is VAX/VMS

;
; If the remote node is not VMS, delete the trailing semi-colon (null version
; number) if the user did not explicitly enter a version # in the primary
; filespec string.
;

	BBS	#FWA$V_EXP_VER,(R10),100$;Branch if version # was explicit
	CMPB	-1(R3),#^A\;\		; Is last character a semi-colon?
	BNEQ	100$			; Branch if not
	DECL	R3			; Otherwise delete it here and from
	DECW	FWA$Q_NAME(R10)		;  filename descriptor in FWA
	BRB	120$			; All done

;
; If the remote node is RT-11, remove the version number substring (either
; ";" or ";ver") because RT-11 does not recognize the version number element.
;

100$:	MOVZWL	FWA$Q_VERSION(R10),R0	; Get number of digits in version #
	INCL	R0			; Add semi-colon delimiter to count
	CMPB	NWA$B_OSTYPE(R7),-	; Branch if remote node is not RT-11
		#DAP$K_RT11		;
	BNEQ	110$			;
	SUBL2	R0,R3			; Delete version number substring here
	SUBW2	R0,FWA$Q_NAME(R10)	;  and from filename descriptor in FWA
	BRB	120$			; All done

;
; If the remote node is TOPS-20, convert the ";" version number delimiter to a
; "." delimiter because TOPS-20 requires uses the semi-colon character as a
; file attribute delimiter.
;

110$:	CMPB	NWA$B_OSTYPE(R7),-	; Branch if remote node is not TOPS-20
		#DAP$K_TOPS20		;
	BNEQ	120$			;
	SUBL3	R0,R3,R1		; Calculate address of delimiter
	MOVB	#^A\.\,(R1)		; Convert period to semi-colon

;
; Finish building counted ASCII string.
;

120$:	SUBL3	R8,R3,R0		; Calculate size of string
	MOVB	R0,-1(R8)		; Store the count
	MOVL	R3,R5			; Put next byte pointer in proper reg
	POPR	#^M<R4,R6,R8>		; Restore registers
	RSB				; Exit

	.END				; End of module
