	$BEGIN	RMS0SRCH,001,F$RMS0MISC,<SEARCH FOR NEXT WILDCARD FILE>

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
; Facility: rms32
;
; Abstract:
;	this is the highest level routine to perform the
;	$remove and $search functions
;
; Environment:
;	vax/vms
;
; Author:
;	tim halvorsen	AUG-1979
;
; Modified By:
;
;	V03-001	RAS0082		Ron Schaefer		26-Mar-1982
;		Correct the setting of IMP$L_SAVED_SP to account for
;		rooted directories and I/O that can occur inside
;		RM$RECOVER_FWA.
;
;	V02-025	RAS0062		Ron Schaefer		25-Jan-1982
;		Add probes of the NAM block.
;
;	V02-024	TMK0043		Todd M. Katz		05-Jan-1982
;		Add back the NMF stuff, however, do it very differently.
;		Whenever an error is detected, the bit NAM$V_SRCHNMF is
;		set within the NAM field NAM$L_WCC. This bit is set
;		before context (IFAB and FWA) are cleaned up, and it is
;		checked at the beginning of a new search. If it is
;		detected, the current invocation of search is immediately
;		terminated with a NMF status.
;
;	V02-023	TMK0042		Todd M. Katz		04-Jan-1982
;		Back out the NMF stuff of TMK0041.
;
;	V02-022	TMK0041		Todd M. Katz		26-Dec-1981
;		When directory wildcarding is not taking place, and NMF
;		occurs, zero out the FIB's DID. This will be saved in the NAM,
;		and if search is again called, the zeroed DID will force
;		RM$NEXTDIR to be called. That routine will immediately
;		return NMF. Thus, once NMF is encountered, it will continually
;		be returned as a status, until another $PARSE is done.
;
;		Also, whenever context is not being saved, the DIR_LVL field
;		within the NAM is being incorrectly set to 0. This is because
;		RM$RECOVER_FWA must be called to recover FWA context, whenever
;		it is not saved, the routine sets the number of directory 
;		levels to 1, regardless of whether there is more, and this
;		value is used to set the DIR_LVL field within the NAM. Add
;		code such that whenever, there are no wild directories, let
;		the current settings for subdirectory levels and directory
;		wildcards remain the same.
;		
;
;	V02-021	TMK0032		Todd M. Katz		22-Dec-1981
;		In TMK0026 I cleared all bits in the NAM refering to
;		directories if a nondisk device was involved. Remove
;		these instructions as these bits will be cleared within
;		RMS0PARSE (no need to do it twice) at the same time the
;		expanded-name string is rewritten so it will contain a null
;		length directory specification.
;
;	V02-020	TMK0026		Todd M. Katz		17-Dec-1981
;		Delete the instruction setting the FIB's DID field to the
;		MFD for SDI devices since this field has been set within
;		RM$RECOVER_FWA or within RMS0PARSE. Return the error
;		"illegal device type for operation" if the search is not
;		being done on a directory structured device. Finally, for
;		SDI devices, change NAM$L_FNB so that it contains no 
;		explicit or wildcard information about directories, and
;		directory level information indication no sublevels. For
;		disk devices, return new directory level information for
;		a successful search in the NAM's 3 bit bit-field starting
;		with the bit NAM$V_DIR_LVLS.
;
;	V02-019	DMW0002		David Michael Walp	 9-Dec-1981
;		Removed old Magnetic Tape ACP file spec wild card code
;
;	V02-018	TMK0013		Todd M. Katz		06-Nov-1981
;		Modify the probes done (to make sure RMS has write access
;		to the resultant name string and read access to the expanded
;		name string) so that the probes are made of the corresponding
;		buffer, and not starting at the the address of the buffer
;		within the NAM block.
;
;	V02-017	KEK0007		K. E. Kinnear		11-Aug-1981
;		Change use of IFB$L_AS_DEV to IFB$L_PRIM_DEV where necessary.
;
;	V02-016	KPL0001		P Lieberwirth	29-Jul-1981
;		Rename entry point to $$ form, so we can ge here via RMS0BRNCH.
;		This fixes broken branches due to additional ISAM code.
;
;	V02-015	TMH0015		Tim Halvorsen	15-May-1981
;		Do not use bit 15 in NAM$L_WCC to indicate IFAB
;		rather than ACP context, since that bit is used
;		to indicate process I/O segment IFAB.  Change to
;		use bit 16 instead.
;
;	V02-014	PSK0007		Paulina Knibbe	23-Apr-1981
;		Fix another broken branch
;
;	V02-013	PSK0006		Paulina Knibbe	19-Apr-1981
;		Clean up some problems with resultant string
;		handling
;
;	V02-012	PSK0005		Paulina Knibbe	12-Mar-1981
;		Fix broken branch
;
;	V02-011	PSK0004		Paulina Knibbe	07-Mar-1981
;		If there is something wrong with the name block,
;		take the no structure error exit because we haven't
;		allocated an IFAB yet.
;
;	V02-010 PSK0003		Paulina Knibbe	26-Jan-1980
;		If the probe of the expanded or resultant name string
;		fails, zero the RSL.
;
;	V02-009 PSK0002		Paulina Knibbe	15-Jan-1980
;		When FNF is returned from a wild directory search
;		copy the expanded name string to the resultant name
;		string instead of leaving garbage there.
;
;	V02-008	PSK0001		Paulina Knibbe	12-Nov-1980	
;		1. When you find an elipsis, set the appropriate wild
;		   directory bit.
;		2. Only convert NMF to FNF if we are maintaining context
;
;	V02-007	REFORMAT	Ron Schaefer	30-Jul-1980	09:41
;		Reformat the source.
;
;	V006	JAK0039		Jim Krycka	15-FEB-1980
;		return error on $search of node::"task=abc".
;		fix broken branch to rm$skip_subtree.
;
;	V005	TMH0004		Tim Halvorsen	05-FEB-1980
;		if not directory device, return error.
;		if sdi device, avoid any directory searches.
;
;	V004	JAK0035		Jim Krycka	20-DEC-1979
;		add support for $search over the network.
;
;	V003	TMH0003		Tim Halvorsen	13-NOV-1979
;		terminate sequence on fnf as well as nmf.
;		do not copy result string if there is no directory
;		left - happens when rm0wild backs up over all the
;		directory levels.
;
;	V002	TMH0002		Tim Halvorsen	07-NOV-1979
;		do not allow fseti to be called with a nonzero fab$w_ifi
;
;	V001	TMH0001		Tim Halvorsen	02-NOV-1979
;		set bit fwa$v_filefound if any file found at all.  used
;		to determine whether to return fnf or nmf.
;		remove temporary definition of dirbdb (now in rmsint)
;--
;


	.SBTTL	DEFINITIONS

;
; symbol definitions
;

	$FABDEF				; fab definitions
	$NAMDEF				; nam definitions
	$IFBDEF				; ifab definitions
	$FWADEF				; fwa definitions
	$FIBDEF				; fib definitions
	$IMPDEF				; impure area definitions
	$BDBDEF				; bdb definitions
	$DEVDEF				; device characteristics

	.SBTTL	SEARCH, SEARCH FOR NEXT FILENAME IN SEQUENCE

;++
; RMS$$SEARCH:	search for next filename in sequence
; RMS$$REMOVE:	remove a directory entry
;
; inputs:
;
;	ap = address of user argument list
;	wcc of nam block contains ifi of wildcard ifab
;
; outputs:
;
;	result name string is returned to user buffer
;	fid/did in nam block
;--
;

	$ENTRY	RMS$$REMOVE
	MOVZBL	#IO$_DELETE,-(SP)	; set acp function code = remove
	BRB	COMMON

	$ENTRY	RMS$$SEARCH
	MOVZBL	#IO$_ACCESS,-(SP)	; set acp function code = search
					; this cannot be popped until ret
					; since rm$fset saves the sp for stall
	.ENABL	LSB
COMMON:	$TSTPT	SEARCH

;
; get ifab and fwa addresses from ifi which resides in wcc
; of nam block.
;

	BSBW	RM$FABCHK		; check fab validity
					; returns only if ok
					; r11 = impure area
					; r8 = fab address
					; r7 = caller's access mode

	MOVL	FAB$L_NAM(R8),R7	; get nam address
	BSBW	RM$CHKNAM		; check nam validity
	BLBC	R0,ENS			; if error
					;  take the 'nostruct' error exit
	BITW	NAM$L_WCC+2(R7),-	; check to see that no spurious bits
		#^C<<NAM$M_SVCTX!-	; other than the IFI bit, the search
		     NAM$M_SRCHNMF-	; NMF bit, or the save context bit are 
		     @-16>!1>		; set within the field NAM$L_WCC
	BNEQ	ERRWCC			; error if illegal wcc value

	BBC	#NAM$V_SRCHNMF,-	; if NMF has been encountered,
		NAM$L_WCC(R7),1$	; then go immediately return 
	RMSERR	NMF			; a status of NMF
	BRB	ENS
	
1$:	MOVW	NAM$L_WCC(R7),R0	; get ifi of previous ifab
	BEQL	5$			; branch if none

	BBC	#NAM$V_IFI,-		; if the IFI bit is not set then
		NAM$L_WCC(R7),5$	; context has not been saved
	MOVW	R0,FAB$W_IFI(R8)	; set internal ifi into fab
	BSBW	RM$FSET			; setup with ifi in fab
	ADDL2	#4,IMP$L_SAVED_SP(R11)	; adjust FSET saved sp for acp code

	BBC	#IFB$V_SEARCH,(R9),5$	; branch if not our type of ifab
	MOVL	IFB$L_BDB_FLNK(R9),R10	; assume fwa has first bdb
	BEQL	5$			; branch if none

	MOVL	BDB$L_ADDR(R10),R10	; recover fwa address
	CMPB	FWA$B_UNDERLINE(R10),#^A'_' ; check fwa validity
	BEQL	8$			; branch if ok

;
; no previous context can be found, parse the expanded name
; string and proceed.
;

5$:	BSBW	RM$FSETI		; allocate ifab/ifi
	ADDL2	#4,IMP$L_SAVED_SP(R11)	; adjust FSET saved sp for acp code
	MOVL	FAB$L_NAM(R8),R7	; get nam address
	BSBW	RM$CHKNAM		; check nam validity
	BLBC	R0,EXIT1		; quit on failure
	BSBW	RM$RECOVER_FWA		; recover fwa context
	BLBC	R0,EXIT1		; branch if error

;
; context has been recovered.  check device characteristics. continue only 
; for directory structured devices.
;

8$:	BBS	#FWA$V_NODE,(R10),NTSRCH ; branch if network operation
	BBC	#DEV$V_DIR,-		; error if illegal device
		IFB$L_PRIM_DEV(R9),ERRIOP 
	BBS	#DEV$V_SPL,-		; error if spooled device
		IFB$L_AS_DEV(R9),ERRIOP 

;
; get the next file in sequence
;

	TSTW	FWA$T_FIBBUF+FIB$W_DID(R10) ; new directory needed?
	BNEQ	READ_DIR		; branch if not
	BRW	NEXT_DIR		; and get next directory

ERRIOP:	RMSERR	IOP			; illegal device type
EXIT1:	BRW	EXIT			; exit cleaning up ifab

ERRWCC:	RMSERR	WCC			; illegal wcc value
ENS:	BRW	RM$EX_NOSTR		; exit without ifab with status

;
; perform network search function.
;

	.DSABL	LSB
NTSRCH:	$PSECT_BR	NF$NETWORK
	BBS	#IFB$V_NSP,(R9),40$	; search of node::
					; search of node::"task=abc" is invalid
	CLRL	R0			; clear first-time-thru flag
	BBS	#IFB$V_ACCESSED,(R9),10$ ; branch if already connected to fal
	BSBW	NT$ACCESS		; establish logical link with fal
	BLBC	R0,20$			; branch on failure
					; note, first-time-thru flag is now set!
10$:	BSBW	NT$SEARCH		; perform search at remote node
	BLBC	R0,30$			; branch on failure
	SSB	#FWA$V_FILEFOUND,(R10)	; indicate at least one file found
	BRW	COPY_RESULT		; branch aid
20$:	RMSERR	FND,R1			; set default error code
	BSBW	RM$MAPERR		; map ss error to rms error if possible
	BRW	EXIT			; branch aid
30$:	BRW	NEXT_DIRERR		; branch aid
40$:	BRW	ERRIOP			; branch aid
	$PSECT_RESTORE

	.ENABL	LSB

READ_DIR:

;
; if we are saving context (ifab/fwa) and we are searching
; a wildcard specification and no directory file has been
; read yet, then read the directory file into memory to
; optimize on obtaining file names.
;

	MOVL	IFB$L_LAST_FAB(R9),R8	; get fab address
	BBC	#IFB$V_SEARCH,(R9),NEXT_FILE ; branch if not saving context
	BBC	#FWA$V_WILDCARD,(R10),NEXT_FILE ; branch if non-wild string
	TSTL	FWA$L_DIRBDB(R10)	; directory file read yet?
	BNEQ	NEXT_FILE		; if so, don't read again
	JSB	RM$READDIR		; read directory into memory
	BLBC	R0,NEXT_FILE		; branch if unable to read
	MOVL	R7,FWA$L_DIRBDB(R10)	; save bdb address

;
; get the file name pattern from the expanded name string
;

NEXT_FILE:
	MOVL	FAB$L_NAM(R8),R7	; and recover nam address again
	BSBW	RM$CHKNAM		; check nam validity
	BLBC	R0,EXIT2		; quit on failure
	MOVZBL	NAM$B_ESL(R7),R4	; length of expanded string
	BEQL	ERRESL			; error if none
	MOVL	NAM$L_ESA(R7),R5	; address of expanded string
	IFNORD	R4,(R5),ERRESA		; error if cannot read buffer
	LOCC	FWA$B_DIRTERM(R10),R4,(R5) ; find end of directory spec.
	BEQL	ERRESA			; error if no directory spec.
	INCL	R1			; bypass terminator character
	DECL	R0
	MOVQ	R0,FWA$Q_RNS(R10)	; set string descriptor
	BRB	10$

ERRESL:	RMSERR	ESL			; set esl error
	BRB	EXIT2

ERRESA:	RMSERR	ESA			; set esa error
EXIT2:	BRW	EXIT

;
; setup fib fields
;

10$:	MOVAB	FWA$T_FIBBUF(R10),R1	; fib address
	MOVW	#FIB$M_WILD,FIB$W_NMCTL(R1) ; set wildcarding on
	MOVL	#FIB$C_DIRDATA,FWA$Q_FIB(R10) ; create fib descriptor
	MOVL	R1,FWA$Q_FIB+4(R10)
	MOVZWL	#FWA$C_NAMBUFSIZ+FWA$C_TYPBUFSIZ+FWA$C_VERBUFSIZ,-
		FWA$Q_NAME(R10)		; set length of result buffer

;
; if remove and the nam fop bit is set, set fib bit to do
; find via fid rather than by name.
;

	CMPB	(SP),#IO$_DELETE	; remove function?
	BNEQ	20$			; branch if not
	BBC	#FAB$V_NAM,FAB$L_FOP(R8),20$ ; branch if nam bit not set
	TSTL	FIB$W_DID(R1)		; fid supplied?
	BEQL	20$			; branch if not
	SSB	#FIB$V_FINDFID,FIB$W_NMCTL(R1) ; find by fid

;
; if the directory file has already been read into virtual
; memory, then skip the call to the acp and look in memory
; for the next file name in sequence.
;

20$:	CMPB	(SP),#IO$_ACCESS	; access function?
	BNEQ	22$			; only on searches
	MOVL	FWA$L_DIRBDB(R10),R7	; is there a directory in memory?
	BEQL	22$			; call acp if not
	MOVQ	FWA$Q_RNS(R10),R2	; pass descriptor of file name
	JSB	RM$DIRSCAN		; find the next find in sequence
	BRB	24$			; re-join after acp call

;
; call acp for next file in this directory
;

22$:	MOVL	(SP),R0			; get acp function code
	CLRQ	-(SP)			; p5/p6 = 0
	PUSHAB	FWA$Q_NAME(R10)		; p4 = address of result descriptor
					; also input to acp as previous
					; position (file) in directory
	PUSHAB	IFB$L_RNS_LEN(R9)	; p3 = longword to receive length
					; also input to acp as previous
					; position (file) in directory
	PUSHAB	FWA$Q_RNS(R10)		; p2 = address of name descriptor
	BSBW	RM$FCPFNC		; call acp and wait for reply
24$:	BLBC	R0,ACPERR		; branch if error from acp
	SSB	#FWA$V_FILEFOUND,(R10)	; indicate at least one file found
	BRW	COPY_RESULT		; and copy result string

ACPERR:	BBC	#FWA$V_WILD_DIR,-	; if there are no wild directories 
		(R10),25$ 		; report fnf if none were
	CMPW	R0,#SS$_NOSUCHFILE	; no files in directory at all?
	BEQL	NEXT_DIR		; if so, get next directory
	CMPW	R0,#SS$_NOMOREFILES	; no more files in directory?
	BEQL	NEXT_DIR		; if so, get next directory
	CLRW	FWA$T_FIBBUF+FIB$W_DID(R10) ; mark fresh directory needed
	PUSHL	R0			; save status
	JSB	RM$SKIP_SUBTREE		; skip rest of subtree
					;  (bsbw won't reach)
	POPL	R0			; restore status
	CMPW	R0,#SS$_BADIRECTORY	; bad directory format?
	BEQL	NEXT_DIR		; ignore bad directories on traversal
25$:	RMSERR	FND,R1			; set default error
	BSBW	RM$MAPERR		; map error to rms error
	BRB	ERROR			; process other type of error

;
; if no more files in directory, skip to next directory
;

NEXT_DIR:
	BSBW	RM$RETDIRBDB		; deallocate directory buffer
	BBS	#DEV$V_SDI,IFB$L_PRIM_DEV(R9),ERRNMF ; nmf if sdi device
	JSB	RM$NEXTDIR		; get next directory
	BLBC	R0,NEXT_DIRERR		; if error, copy result and exit
	CLRL	FWA$T_FIBBUF+FIB$L_WCC(R10) ; start at 1st file in directory
	BRW	READ_DIR		; and then get next file

ERRNMF:	RMSERR	NMF			; no more files

; If there is no wild card directory and the user did not specify NAM$V_SVCTX,
; then the ACP is maintaining context and we should just return the error
; it gave us.
;
; If we are maintaining context (wild directory or NAM$V_SVCTX), then we should
; convert NMF to FNF based on FILEFOUND bit.
;

NEXT_DIRERR:
ERROR:	BBC	#IFB$V_SEARCH,(R9),35$	; we are not keeping context
	BBS	#FWA$V_FILEFOUND,(R10),35$ ; if no files found,
	CMPW	R0,#RMS$_NMF&^XFFFF	; and error was NMF
	BNEQ	35$	

;
; if there was a wild directory, move the expanded name string from
;  the namblk to the resultant name string and return file not found
;

	BBC	#FWA$V_WILD_DIR,(R10),35$ ; branch if dir not wild
	MOVL	IFB$L_LAST_FAB(R9),R8	; Get the last fab's addr
	MOVL	FAB$L_NAM(R8),R7	; Get the name block addr
	BSBW	RM$CHKNAM		; check nam validity
	BLBC	R0,44$			; quit on failure
	CLRB	NAM$B_RSL(R7)		; assume can't set result string
	MOVZBL	NAM$B_RSS(R7),R2	; Get length of resultant buffer
	MOVAL	@NAM$L_RSA(R7),R3	; Get addr of resultant buffer
	IFNOWRT R2,-			; Probe the resultant string buff
		(R3),50$		;  Error if can't write it
	MOVZBL	NAM$B_ESS(R7),R2  	; Get the buffer size into longword
	MOVAL	@NAM$L_ESA(R7),R1	; Get addr of expanded buffer
	IFNORD	R2,-			; Probe the expanded string buff
		(R1),50$		;  Error if can't read it
	MOVZBL	NAM$B_ESL(R7),R2	; Get the string's actual length 
	MOVB	R2,NAM$B_RSL(R7)	; Stuff the resultant length
	MOVC3	R2,(R1),(R3)		; Move the expanded string 
					;  to the resultant string 
	RMSERR	FNF			; Restore the error
	BRB	50$			;  and continue

;
; error has occurred - setup file name so that when result
; name string is copied, the file string sent to acp is returned.
;

35$:	BBS	#FWA$V_NODE,(R10),-
		COPY_RESULT 		; branch if network operation
	PUSHL	R0			; save status code
	MOVZWL	FWA$Q_RNS(R10),-
		IFB$L_RNS_LEN(R9) 	; set length of string
	MOVC3	FWA$Q_RNS(R10),-
		@FWA$Q_RNS+4(R10),-
		FWA$T_NAMEBUF(R10)
	POPL	R0			; restore status

;
; copy result file name to user result buffer
; unless no file was found
;

COPY_RESULT:
	PUSHL	R0			; save status code
	MOVL	IFB$L_LAST_FAB(R9),R8	; get fab address
	MOVL	FAB$L_NAM(R8),R7	; set nam address
	BSBW	RM$CHKNAM		; check nam validity
	BLBC	R0,42$			; quit on failure
	BSBW	RM$COPY_RESULT		; copy result name string
	BLBC	R0,42$			; branch if error
	POPL	R0			; restore status code
	BRB	50$			; and continue
42$:	ADDL	#4,SP			; ignore saved status code
44$:	BRB	EXIT			; and report one from copy_result

;
; if not remove, copy fid and did into nam block
;

50$:	CMPB	(SP),#IO$_DELETE	; remove function?
	BEQL	60$			; if so, skip this
	BBS	#FWA$V_NODE,(R10),60$	; skip also if network operation
	ASSUME	FIB$W_DID EQ FIB$W_FID+6
	ASSUME	NAM$W_DID EQ NAM$W_FID+6
	MOVQ	FWA$T_FIBBUF+FIB$W_FID(R10),NAM$W_FID(R7)
	MOVL	FWA$T_FIBBUF+FIB$W_FID+8(R10),NAM$W_FID+8(R7)

;
; if this is a temporary ifab/fwa created for this call
; only, then save the current acp position in the directory
; file and cleanup all internal structures.
;

60$:	BBS	#IFB$V_SEARCH,(R9),65$	; branch if ifab to be saved over calls
	BLBC	R0,75$			; go set NMF bit if any error
	MOVZWL	FWA$T_FIBBUF+FIB$L_WCC(R10),NAM$L_WCC(R7) ; save acp position
	BRB	EXIT

;
; this is a permanent ifab/fwa (that is, it is kept around between
; calls in order to speed up things or keep extended context.
; if the status was successful or not enough privilege,
; then keep the wildcard sequence context around so that
; search can be called again.  else, cleanup everything.
;

65$:	BLBS	R0,70$			; continue sequence if successful
	CMPW	R0,#RMS$_NMF&^XFFFF	; done with wildcard sequence?
	BEQL	75$			; if so, terminate sequence
	CMPW	R0,#RMS$_FNF&^XFFFF	; file not found?
	BEQL	75$			; if so, terminate sequence
	BBC	#FWA$V_WILD_DIR,(R10),75$ ; if nonwild, cleanup
	TSTL	FAB$L_STV(R8)		; error from acp?
	BEQL	75$			; if not, terminate sequence
70$:	CLRW	FAB$W_IFI(R8)		; mbz for subsequent operations on fab
	BRW	RM$EXRMS		; exit without cleaning up

75$:	MOVL	#NAM$M_SRCHNMF,-	; indicate that another search isn't
		NAM$L_WCC(R7)		; to be done with this NAM
EXIT:	BRW	RM$CLSCU		; cleanup ifab and buffers

	.DSABL	LSB

	.SBTTL	RM$COPY_RESULT, RETURN RESULT NAME STRING

;
;++
;
; RM$COPY_RESULT:	construct the result name string and return to
;			the caller via the rsa and rss fields of the nam.
;
; inputs:
;
;	r7		= address of NAM
;	r9 		= address of ifab
;	r10 		= address of fwa
;	ifb$l_rns_len 	= length of new file name
;	fwa$t_namebuf 	= new file name string
;	fwa$q_device 	= descriptor of device name
;	fwa$q_dir1-8 	= descriptors of directory names
;	fwa$b_dirlen 	= number of directory levels
;	fwa$b_dirterm 	= directory specification terminator
;
; outputs:
;
;	result string buffer is output if requested.
;	NAM$L_FNB 
;--
;

RM$COPY_RESULT::
	BBS	#FWA$V_NODE,(R10),5$	; branch if network operation
	MOVL	IFB$L_RNS_LEN(R9),FWA$Q_NAME(R10) ; set length of file name

	BBC	#FWA$V_DIR,(R10),5$	; skip if no directory in spec
	BBC	#FWA$V_WILD_DIR,(R10),5$; or if there are no wild directories

	SUBB3	#1,FWA$B_DIRLEN(R10),R0	; get number of subdirectory levels
	INSV	R0,#FWA$V_DIR_LVLS,-	; return current # of subdir. levels
		#FWA$S_DIR_LVLS,(R10)	; in the FWA
	INSV	R0,#NAM$V_DIR_LVLS,-	; return current # of subdir. levels
		#NAM$S_DIR_LVLS,-	; in the NAM
		NAM$L_FNB(R7)
	MOVB	FWA$B_DIRWCFLGS(R10),-	; if any ellipses were found, set the
		NAM$L_FNB+3(R7)		;  appropriate wild flags in the nam blk

5$:	MOVAB	B^10$,AP		; address of expstring arg list
	PUSHL	NAM$W_FID(R7)		; save contents of nam fid
	CLRL	NAM$W_FID(R7)		; clear fid so expstring will work
	BSBW	RM$EXPSTRING		; return result name string
	POPL	NAM$W_FID(R7)		; restore contents of nam fid
	RSB

10$:	.BYTE	NAM$L_RSA		; offset to result buffer address
	RMSERR_WORD	RST		; error in case of bad buffer
	RMSERR_WORD	RSS		; error in case of buffer too short

	.SBTTL	RM$RETDIRBDB, DEALLOCATE DIRECTORY BUFFER AND BDB

;
;++
;
; RM$RETDIRBDB:	this routine deallocates the directory buffer and the bdb
;		which is associated with it.
;
; inputs:
;
;	r10 = fwa address
;	r9 = ifab address
;	fwa$l_dirbdb = address of directory bdb
;
; outputs:
;
;	none
;--
;

RM$RETDIRBDB::
	MOVL	FWA$L_DIRBDB(R10),R4	; is there a directory in memory?
	BEQL	50$			; branch if not
	PUSHL	R10			; save r10
	MOVL	R9,R10			; rm$retbdb wants ifb address in r10
	BSBW	RM$RETBDB		; deallocate it if there is
	POPL	R10			; restore r10
	CLRL	FWA$L_DIRBDB(R10)	; and clear pointer
50$:	RSB

	.END
