	$BEGIN	RM0GETDVI,007,F$RMSOPEN0,<GET DEVICE INFO FROM SYSTEM>


;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; Facility: RMS32
;
; Abstract:
;		This module contains two routines to get the device id
;		and file id of the file open on a channel from the
;		system data base.
;
; Environment:
;		Star processor running Starlet exec.
;
; Author: L. F. Laverdure	 Creation date: 17-JUN-1978
;
; Modified By:
;
;	V02-007	REFORMAT	K. E. Kinnear		31-Jul-1980	8:47
;
;--


	.SBTTL	DECLARATIONS

;
; Include Files:
;

;
; Macros:
;

	$CCBDEF
	$DDBDEF
	$DEVDEF
	$FCBDEF
	$IFBDEF
	$UCBDEF
	$WCBDEF

;
; Equated Symbols:
;

;
; Own Storage:
;


	.SBTTL	RM$GETDEVNAM - GET DEVICE NAME AND UNIT #

;++
; RM$GETDEVNAM -- Get Device Name and Unit Number.
;
;  This routine returns the counted generic device name string
;  and the binary unit number for the file open on the channel.
;
;
; Calling sequence:
;
;	BSBW	RM$GETDEVNAM
;
; Input Parameters:
;
;	R9		IFAB address
;	R3		address of buffer to return device name string
;	IFB$W_CHNL	channel #
;
; Implicit Inputs:
;
;	none
;
; Output Parameters:
;
;	R6		UCB address
;	R4		unit # in binary
;	R3		address following device name in buffer
;	R1		CCB address
;	R0,R2,R5	destroyed
;
; Implicit Outputs:
;
;	The counted ascii string for the generic device name is moved
;	to the buffer provided.
;
; Completion Codes:
;
;	none
;
; Side Effects:
;
;	none
;
;--


RM$GETDEVNAM::
	MOVL	R3,R4			; save the caller's buffer address
	BSBB	RM$GETCCB		; get the ccb address into r5
	PUSHL	R1			; save the ccb address
	MOVL	CCB$L_UCB(R1),R6	; get the ucb address
	ADDL3	#DDB$T_NAME,UCB$L_DDB(R6),R1; get adr of device name
	MOVZBW	(R1),R0			; get length of device name
	INCW	R0			; increment to move count too
	MOVC3	R0,(R1),(R4)		; move the device name string
	POPR	#^M<R1>			; recover ccb address
	MOVZWL	UCB$W_UNIT(R6),R4	; get the unit number
	RSB				; return

;++
; RM$GETCCB --  subroutine to return the CCB address.
;
;  Input:	R9	IFAB address with channel in IFB$W_CHNL
;
;  Output:	R1	address of CCB
;		R0,R2,R3 destroyed
;
;--

RM$GETCCB::
	MOVZWL	IFB$W_CHNL(R9),R0	; set channel #
	JMP	@#IOC$VERIFYCHAN	; get the ccb address (in r1)

;
; and return
;


	.SBTTL	RM$GETDEVIFID - GET DEVICE ID AND FILE ID

;++
; RM$GETDEVIFID -- Get Device ID and File ID.
;
;  This routine returns the counted device name string and ascii unit number,
;  as well as the file id for the file open on the channel.
;
; Calling Sequence:
;
;	BSBW	RM$GETDVIFID
;
; Input Parameters:
;
;	R9		IFAB address
;	R3		address of 22-byte buffer to return device name string
;	IFB$W_CHNL	channel #
;
; Implicit Inputs:
;
;	none
;
; Output Parameters:
;
;	R3		address following file id in buffer if device is disk
;	R0-R2		destroyed
;
; Implicit Outputs:
;
;	The counted ascii string for the device name and unit is moved
;	to the buffer provided, followed by the file id starting 16 bytes
;	from the start of the buffer.
;
; Completion Codes:
;
;	none
;
; Side Effects:
;
;	none
;
;--


	$NEWPSECT	F$RMSCLOSERNDN
DIVTBL:	.LONG	10000,1000,100,10	; divisor table for ascii conversion


RM$GETDVIFID::
	PUSHR	#^M<R3,R4,R5,R6>
	BSBW	RM$GETDEVNAM		; get the device name (in buffer)
					;  and unit # (in r4)
	POPR	#^M<R2>			; adr of device name count
	PUSHL	R1			; save ccb address
	BSBB	RM$GETDEVUNI		; get unit number in ascii
	POPR	#^M<R1>			; recover ccb address

;
;  Now get the file ID from the FCB
;  R2 = address of the specified output buffer
;

	CLRL	16(R2)			; zero the file id
	CLRW	20(R2)			;   "
	BBS	#DEV$V_SQD,(R9),50$	; branch if magtape (no FCB)
	MOVL	CCB$L_WIND(R1),R5	; get the WCB address
	MOVL	WCB$L_FCB(R5),R5	; get the FCB address
	MOVC3	#6,FCB$W_FID(R5),16(R2)	; copy the file id to buffer
50$:	POPR	#^M<R4,R5,R6>
	RSB

	.SBTTL	RM$GETDEVUNI - GET DEVICE UNIT NUMBER IN ASCII

;++
; RM$GETDEVUNI -- Get Device Unit Number in ASCII.
;
;  This routine converts the binary unit number into decimal ascii
;  in the specified output string and updates the count field of
;  that string.
;
; Calling sequence:
;
;	BSBW	RM$GETDEVUNI
;
; Input Parameters:
;
;	R4		device unit # in binary
;	R3		address of buffer to return ascii unit number
;	R2		adr of byte count to augment with # of characters returned
;
; Implicit Inputs:
;
;	none
;
; Output Parameters:
;
;	R3		address of next byte in buffer after unit number
;	R2		preserved
;	R0-R1,R4-R6	destroyed
;
; Implicit Outputs:
;
;	The decimal ascii translation for the specified binary unit number
;	is placed in the buffer provided and the count of characters
;	generated is added to the byte addressed by R2.
;
; Completion Codes:
;
;	none
;
; Side Effects:
;
;	none
;
;--


RM$GETDEVUNI::
	CLRQ	R5			; work space
	CMPL	R4,#10			; fast path for single digit
	BLSS	50$			; branch if just one digit
	MOVAB	DIVTBL,R0		; divisor table address
10$:	EDIV	(R0)+,R4,R1,R4		; r1=quoient, r4=remainder
	BEQL	30$			; branch if 0 quotient
20$:	INCB	R6			; count # chars output
	BISB3	#^A/0/,R1,(R3)+		; add the digit to the device name
	BRB	40$
30$:	TSTB	R6			; already output a char?
	BNEQ	20$			; branch if yes, else ignore lead 0
40$:	CMPL	-4(R0),#10		; last divisor?
	BNEQ	10$			; continue if not
50$:	INCB	R6			; count the last digit
	BISB3	#^A/0/,R4,(R3)+		; add the digit to the device name
	ADDB2	R6,(R2)			; add to the device name count
	RSB


	.END
