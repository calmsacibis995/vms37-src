
MODULE RM3PUTERR (LANGUAGE (BLISS32) ,
		IDENT = 'V03-001'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:	RMS32 INDEX SEQUENTIAL FILE ORGANIZATION
!
! ABSTRACT:
!                Put specific error cleanup routines
!
!
! ENVIRONMENT:
!
!		VAX/VMS OPERATING SYSTEM
!
!--

!
! AUTHOR:        Christian Saether	     CREATION DATE:        	29-AUG-78  17:02
!
!
! Modified by:
!
!	V03-001 LJA0007		Laurie Anderson 	25-Mar-1982
!		Change KBUFSZ to reference a macro when computing buffer 
!		size and make IFB$B_KBUFSZ a word, now: IFB$W_KBUFSZ.
!
!	V02-013	MCN0007		Maria del C. Nasr	27-Apr-1981
!		Change calling sequence of RM$FIND_BY_RRV.
!
!	V02-012	MCN0006		Maria del C. Nasr	16-Mar-1981
!		Increase size of record identifier to a word in NRP.
!
!	V02-011	REFORMAT	C Saether	01-Aug-1980
!
!	V0010	CDS0001		C D Saether 	27-Feb-1980
!		Don't mark buffers invalid on errors.
!
! Revision history:
!
!   Wendy Koenig, 	24-OCT-78  14:02
!   X0002 - MAKE CHANGES CAUSED BY SHARING CONVENTIONS
!
!   Wendy Koenig, 	3-NOV-78  11:11
!   X0003 - TEAR PUT_UPD_ERR APART
!
!   Christian Saether, 	9-NOV-78  10:50
!   X0004 - eliminate MAK_IDX_SIDR (no longer needed)
!
!   Christian Saether, 	12-DEC-78  16:15
!   X0005 - take care of potential RRV when deleting UDR on error cleanup
!
!   Wendy Koenig, 	9-FEB-79  15:51
!   X0006 - BE BETTER ON ERRORS (UNLOCK CURRENT RECORD AND ZERO POINTER TO IT)
!
!   Christian Saether, 	11-FEB-79  19:10
!   X0007 - correct update if record unlock logic
!	record unlock logic for put, update, and update if has been moved
!	to the interface routine
!
!   Christian Saether, 	15-FEB-79  21:02
!   X0008 - correct error removing rrv in clean_sidr
!
!   Christian Saether, 	19-FEB-79  14:56
!   X0009 - when cleaning up UDR on errors, do nrp update, leave rrv
!
!*****

LIBRARY 'RMSLIB:RMS';

REQUIRE 'RMSSRC:RMSIDXDEF';

!
! define default psects for code
!

PSECT
    CODE = $L$PUT3(PSECT_ATTR),
    PLIT = $L$PUT3(PSECT_ATTR);

! Linkages

LINKAGE
    L_DEL_RRV,
    L_DELUDR_NRP,
    L_DELETE_SIDR,
    L_FIND_BY_ID,
    L_KEY_DESC,
    L_MAKE_INDEX,
    L_MOVE,
    L_NOREAD_LONG,
    L_NULLKEY,
    L_RECORD_KEY,
    L_FIND_BY_RRV,
    L_RLSBKT,
    L_UNLOCK,
    L_GETNEXT_REC,
    L_CLEAN_BDB,
    L_PUT_UPD_ERR,
    L_CLEAN_SIDR;

!
!
! Forward Routines
!

FORWARD ROUTINE
    RM$CLEAN_BDB	: RL$CLEAN_BDB NOVALUE;

!
! External Routines

EXTERNAL ROUTINE
    RM$DEL_RRV		: RL$DEL_RRV,
    RM$DELUDR_NRP	: RL$DELUDR_NRP,
    RM$DELETE_SIDR	: RL$DELETE_SIDR,
    RM$FIND_BY_ID	: RL$FIND_BY_ID,
    RM$FIND_BY_RRV	: RL$FIND_BY_RRV,
    RM$GETNEXT_REC	: RL$GETNEXT_REC,
    RM$KEY_DESC		: RL$KEY_DESC,
    RM$MAKE_INDEX	: RL$MAKE_INDEX,
    RM$MOVE		: RL$MOVE,
    RM$NOREAD_LONG	: RL$NOREAD_LONG,
    RM$NULLKEY		: RL$NULLKEY,
    RM$RECORD_KEY	: RL$RECORD_KEY,
    RM$RLSBKT		: RL$RLSBKT,
    RM$UNLOCK		: RL$UNLOCK;

!


GLOBAL ROUTINE RM$CLEAN_SIDR : RL$CLEAN_SIDR NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
! Delete SIDR entries and user data record on put errors
!
!
! CALLING SEQUENCE:
!	RM$CLEAN_SIDR
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	Uses the existing context from the aborted operation to back out
!	what has been accomplished so far.
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
!--

    BEGIN

    EXTERNAL REGISTER
	R_BDB_STR,
	R_REC_ADDR_STR,
	R_IDX_DFN_STR,
	COMMON_RAB_STR;

    BUILTIN
	AP;

    LOCAL
	KREF;

    LABEL
	BLK;

    ! is this routine gets called with the index descriptor for the primary key
    ! it deletes all SIDR entries otherwise, delete them starting from 1 less
    ! than the current index descriptor
    !
    KREF = .IDX_DFN[IDX$B_KEYREF];

    IF .KREF EQL 0
    THEN
	KREF = .IFAB[IFB$B_NUM_KEYS];

    KREF = .KREF - 1;

    ! loop through and delete all secondary keys
    !

    WHILE .KREF NEQ 0
    DO
	BEGIN
BLK :
	BEGIN

	! must get in index descriptor, have read access to user data record,
	! and have record length longer than minimum to have been inserted
	! if update mode, then do not delete record that has not been inserted
	!
	!

	IF NOT RM$KEY_DESC(.KREF)
	THEN LEAVE BLK;

	IF (.IRAB[IRB$V_UPDATE]
	    AND
	    NOT .BBLOCK[.IRAB[IRB$L_UPDBUF] + .KREF, UPD$V_INS_NEW])
	    OR
	    RM$NOREAD_LONG(.RAB[RAB$W_RSZ], .REC_ADDR, .IRAB[IRB$B_MODE])
	    OR
	    .RAB[RAB$W_RSZ] LSSU .IDX_DFN[IDX$W_MINRECSZ]
	THEN
	    LEAVE BLK;

	AP = 1;

	! get key into key buffer 2 and check for null key
	!
	RM$RECORD_KEY(KEYBUF_ADDR(2));

	IF NOT RM$NULLKEY(KEYBUF_ADDR(2))
	THEN
	    LEAVE BLK;

	RM$DELETE_SIDR();
	END;					! of BLK
	KREF = .KREF - 1;
	END;					! of while loop

    ! now take care of user data record if not update mode
    !

    IF .IRAB[IRB$V_UPDATE]
    THEN
	RETURN;

    RM$KEY_DESC(0);		! get back index descriptor for primary key
    IRAB[IRB$B_CACHEFLGS] = CSH$M_LOCK;

    ! do find by rrv with flag set to cause locking of RRV bucket if present
    ! which returns BDB in NXTBDB
    !
    IRAB[IRB$L_NXTBDB] = 0;

    IF RM$FIND_BY_RRV(.BBLOCK[.IRAB[IRB$L_NRP_PTR], NRP$L_RP_VBN],
	    .BBLOCK[.IRAB[IRB$L_NRP_PTR], NRP$W_RP_ID], 1)
    THEN
	BEGIN

	GLOBAL REGISTER
	    R_BKT_ADDR_STR;

	! nxtbdb neq 0 means there is an RRV to get rid of
	!

	IF (BDB = .IRAB[IRB$L_NXTBDB]) NEQ 0
	THEN
	    BEGIN

	    LOCAL
		ST,
		SAV_RA;

	    SAV_RA = .REC_ADDR;
	    ST = RM$DEL_RRV();
	    IRAB[IRB$L_NXTBDB] = 0;
	    REC_ADDR = .SAV_RA;

	    IF .ST
	    THEN
		AP = 0			! do not leave rrv when deleting udr
	    ELSE
		AP = 1				! leave rrv when deleting udr
	    END

	ELSE
	    AP = 1;

	BDB = .IRAB[IRB$L_CURBDB];
	RM$DELUDR_NRP();
	END;

    END;


GLOBAL ROUTINE RM$PUT_UPD_ERR : RL$PUT_UPD_ERR NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	clean up routine for put if an error occurs actually inserting
!	the record into the primary data level
!
!
! CALLING SEQUENCE:
!	bsbw rm$put_err
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	irab -- curbdb, nxtbdb, lock_bdb, nrp_ptr
!		nrp list -- rp_vbn and rp_id
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	if there is a bucket associated w/ nxtbdb, it is released
!	if there is a bucket associated w/ lock_bdb, it is released
!	if there is a bucket associated w/ curbdb, it is released
!
!--

    BEGIN

    EXTERNAL REGISTER
	R_BDB_STR,
	R_IDX_DFN,
	COMMON_RAB_STR;

    RM$CLEAN_BDB();

    ! if update then clean up the SIDR's inserted from new record record lock
    ! status has already been established ( same as without errors )
    !

    IF .IRAB[IRB$V_UPDATE]
    THEN
	BEGIN

	GLOBAL REGISTER
	    R_REC_ADDR;

	REC_ADDR = .RAB[RAB$L_RBF];
	RM$CLEAN_SIDR();
	END;

    ! unlock the record if neccessary and clear the current record pointer
    ! THIS LOGIC WAS MOVED TO RM3FACE 11-FEB-79
    !
    END;


GLOBAL ROUTINE RM$CLEAN_BDB : RL$CLEAN_BDB NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	release any buckets that we had
!
!
! CALLING SEQUENCE:
!	bsbw rm$clean_bdb
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	irab -- curbdb, nxtbdb, lock_bdb
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	if there is a bucket associated w/ nxtbdb, it is released
!	if there is a bucket associated w/ lock_bdb, it is released
!	if there is a bucket associated w/ curbdb, it is released
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_RAB_STR,
	R_BDB_STR;

    ! if there is an accessed bucket associated w/ nxtbdb, release it
    !

    IF (BDB = .IRAB[IRB$L_NXTBDB]) NEQ 0
    THEN
	(IRAB[IRB$L_NXTBDB] = 0;
	RM$RLSBKT(0));

    ! if there is an accessed bucket associated w/ lock_bdb, release it
    !
    !

    IF (BDB = .IRAB[IRB$L_LOCK_BDB]) NEQ 0
    THEN
	(IRAB[IRB$L_LOCK_BDB] = 0;
	RM$RLSBKT(0));

    ! if there is an accessed bucket associated w/ curbdb, release it
    !

    IF (BDB = .IRAB[IRB$L_CURBDB]) NEQ 0
    THEN
	BEGIN
	IRAB[IRB$L_CURBDB] = 0;
	RM$RLSBKT(0);
	END;

    END;

END

ELUDOM
