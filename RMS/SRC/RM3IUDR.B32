
MODULE RM3IUDR (LANGUAGE (BLISS32) ,
		IDENT = 'V03-001'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:	RMS32 INDEX SEQUENTIAL FILE ORGANIZATION
!
! ABSTRACT:
!                INSERT USER DATA RECORD
!
!
! ENVIRONMENT:
!
!		VAX/VMS OPERATING SYSTEM
!
!--

!
! AUTHOR:        Wendy Koenig     CREATION DATE:        	14-JUL-78  11:15
!
! MODIFIED BY:
!
!	V03-001	TMK0001		Todd M. Katz		14-March-1982
!		Change the use of RM$INSERT_UDR's lone parameter so that
!		it is both an input and an output parameter. This is 
!		because in one special case the size of the record to be
!		inserted may change, but the insertion does not take place
!		under the control of this routine. If there is insufficient
!		room in the bucket for the record, an attempt is made to
!		squish out the keys of all deleted records with keys currently
!		in the bucket. If this is a prologue 3 file with compressed
!		primary keys, and the record to be inserted follows such a
!		deleted record, this means the record must also be repacked as
!		its size could have changed. If there is still insufficient
!		room in the bucket for the new record, this new size value
!		must be returned, since a bucket split is to occur, and the
!		insertion of the new record will take place elsewhere.
!
!	V02-016	DJD0001		Darrell Duffy		1-March-1982
!		Fix reference to record buffer to prevent protection
!		hole.
!
!	V02-015	PSK0001		Paulina S. Knibbe	08-Oct-1981
!		Fix 014. When scanning a bucket for deleted records to
!		squish, this routine was getting confused after 
!		successfully squishing a record which also caused
!		the following key to be expanded (because of front-end
!		compression). 
!
!	V02-014	MCN0013		Maria del C. Nasr	04-Aug-1981
!		When we delete records, and expand keys the position of insert
!		must be updated to reflect characters moved.
!
!	V02-013	MCN0012		Maria del C. Nasr	07-Jul-1981
!		Fix problem in which if a record was to be added after a record
!		that was deleted by DEL_AND_TRY, the key compression did not
!		match anymore.  Record must be packed again.
!
!	V02-012	MCN0010		Maria del C. Nasr	15-May-1981
!		Make changes to be able to $PUT prologue 3 records.
!
!	V02-011	MCN0006		Maria del C. Nasr	13-Mar-1981
!		Increase size of record identifier to a word in NRP.
!
!	V02-010	REFORMAT	Paulina S. Knibbe	23-JUL-80
!
! REVISION HISTORY:
!
!   Wendy Koenig, 	28-SEP-78  8:51
!   X0002 - WHEN SQUISHING OUT DELETED RECORDS ALWAYS LEAVE A 2-BYTE RRV
!
!   Christian Saether, 	4-OCT-78  9:45
!   X0003 - modifications for UPDATE
!
!   Wendy Koenig, 	12-OCT-78  15:56
!   X0004 - IF ITS AN EMPTY BUCKET, FORCE RECORD ALWAYS TO FIT, REGARDLESS OF
!   LOA BIT
!
!   Wendy Koenig, 	24-OCT-78  14:02
!   X0005 - MAKE CHANGES CAUSED BY SHARING CONVENTIONS
!
!   Christian Saether, 	13-DEC-78  20:23
!   X0006 - DEL_AND_TRY forces DELETE_UDR to always remove record
!
!   Wendy Koenig, 	22-JAN-79  17:01
!   X0007 - IGNORE LOA BIT IF UPDATE
!
!   Wendy Koenig, 	25-JAN-79  11:25
!   X0008 - GET RID OF SETTING VALID
!
!   Christian Saether, 1-Jan-80  21:55
!   0009 - check for id available moved to rm$put3b from rm$insert_udr
!   because it's not relevant in update situation (fixes bug splitting
!   bucket on update when all id's are used)
!
!*****

LIBRARY 'RMSLIB:RMS';

REQUIRE 'RMSSRC:RMSIDXDEF';

!
! Define default psects for code
!

PSECT
    CODE = $$RMSPUT3(PSECT_ATTR),
    PLIT = $RMSPUT3(PSECT_ATTR);

! define local linkage

MACRO
    L_DEL_AND_TRY =
	RL$DEL_AND_TRY = JSB() :
		GLOBAL(R_IFAB,R_IRAB,R_BKT_ADDR,R_REC_ADDR,R_IDX_DFN) %;

!
! Linkages
!

LINKAGE
    L_DELETE_UDR,
    L_INSERT_REC,
    L_INSERT_UDR,
    L_MOVE,
    L_GETNEXT_REC,
    L_PACK_REC,
    L_DEL_AND_TRY,
    L_VBN_SIZE,
    L_RECOMPR_KEY,
    L_REC_OVHD,
    L_RECORD_VBN,
    L_BLDUDR;

! Forward Routines
!

FORWARD ROUTINE
    RM$INSERT_REC	: RL$INSERT_REC,
    RM$INSERT_UDR	: RL$INSERT_UDR;

! External Routines
!

EXTERNAL ROUTINE
    RM$DELETE_UDR	: RL$DELETE_UDR,
    RM$GETNEXT_REC	: RL$GETNEXT_REC,
    RM$PACK_REC		: RL$PACK_REC,
    RM$RECORD_VBN	: RL$RECORD_VBN,
    RM$RECOMPR_KEY	: RL$RECOMPR_KEY,
    RM$REC_OVHD		: RL$REC_OVHD,
    RM$MOVE		: RL$MOVE,
    RM$VBN_SIZE		: RL$VBN_SIZE;


ROUTINE RM$DEL_AND_TRY : RL$DEL_AND_TRY =

!++
!
! RM$DEL_AND_TRY
!
! If any deleted records exist in the bucket, create a tiny rrv at the
! end of the bucket.  A tiny rrv is 2 or 3 bytes long (depends on prologue
! version) with deleted, rrv, no pointer size flags set, and the record id.
! We have to create a tiny rrv even if the record has an rrv elsewhere since,
! without checking every one of those rrv's we have no guarantee that it was
! marked deleted (we may have had a system crash, etc. before writing out that
! bucket).  If we did completely get rid of this record and we still had a
! non-deleted rrv pointing to it, it could be disastorous.
!
! CALLING SEQUENCE:
!	bsbw rm$del_and_try()
!
! INPUT PARAMETERS:
!	none
!
! IMPLICIT INPUTS:
!    BKT_ADDR
!    REC_ADDR - indicates position of insert
!    IFAB -- rfmorg and lrl fields
!    IRAB -- curbdb
!    IDX_DFN -- for rm$getnext_rec
!
! OUTPUT PARAMETERS:
!	
! IMPLICIT OUTPUTS:
!	freespace and pos_ins are updated if some records were deleted
!
! ROUTINE VALUE:
!	0 if no records were deleted
!	1 if some records were deleted
!
! SIDE EFFECTS:
!	if we're lucky, some records were deleted
!
!--

    BEGIN

    EXTERNAL REGISTER
	R_BKT_ADDR_STR,
	R_IFAB_STR,
	R_IRAB_STR,
	R_IDX_DFN_STR,
	R_REC_ADDR_STR;

    BUILTIN
	AP;

    LOCAL
	SAVE_CHARS,
	TMP_REC_ADDR,
	SAVE_AP,
	FLAG;

    TMP_REC_ADDR = .REC_ADDR;
    FLAG = 0;
    SAVE_CHARS = 0;
    SAVE_AP = .AP;
    REC_ADDR = .BKT_ADDR + BKT$C_OVERHDSZ;

    ! loop through bucket squashing out all deleted records on sight
    !

    WHILE .REC_ADDR LSSU .BKT_ADDR + .BKT_ADDR[BKT$W_FREESPACE]
    DO
	BEGIN

	IF .REC_ADDR[IRC$V_RRV]
	THEN
	    EXITLOOP;

	IF .REC_ADDR[IRC$V_DELETED]
	THEN
	    BEGIN

	    ! set AP<0,1>=1 to signal building of an RRV
	    !

	    LOCAL
		CHARS_EXP,
		TMP	: REF BBLOCK;

	    AP = 0;
	    AP<0, 1> = 1;			! make tiny RRV
	    AP<1, 1> = 1;			! force delete of record
	    TMP = .REC_ADDR;
	    FLAG = 1;
	    CHARS_EXP = RM$DELETE_UDR();

	    IF .TMP_REC_ADDR GEQU .REC_ADDR
	    THEN
		BEGIN
		TMP_REC_ADDR = .TMP_REC_ADDR - (.REC_ADDR - .TMP) + .CHARS_EXP;
		END;

	    REC_ADDR = .TMP;
	    END
	ELSE
	    RM$GETNEXT_REC()

	END;

    ! Have to reset REC_ADDR before returning.  TMP_REC_ADDR was adjusted if
    ! any records were deleted.
    !
    IRAB[IRB$W_POS_INS] = .TMP_REC_ADDR - .BKT_ADDR;
    REC_ADDR = .TMP_REC_ADDR;
    AP = .SAVE_AP;
    RETURN .FLAG;

    END;


GLOBAL ROUTINE RM$BLDUDR(RECSZ) : RL$BLDUDR =

!++
!
! RM$BLDUDR
!
! insert the user's data record into the bucket w/ all its overhead
!
! CALLING SEQUENCE:
!	BSBW RM$BLDUDR(RECSZ)
!
! INPUT PARAMETERS:
!	RECSZ - record size of record to be inserted including overhead
!
! IMPLICIT INPUTS:
!	REC_ADDR -- pointer to place to insert record
!	BKT_ADDR -- nxtrecid field
!	IDX_DFN -- index descriptor for data bucket type
!	BDB -- vbn of bucket
!	RAB -- rsz, rbf fields
!	IFAB -- rfm field
!	IRAB -- mode field
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	record is inserted into bucket, nxtrecid is incremented if new record
!	REC_ADDR points to the first byte of the next record
!	RP_ID and RP_VBN in the NRP list are filled in
!
! ROUTINE VALUE:
!	rmssuc
!
! SIDE EFFECTS:
!	record is inserted into bucket
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_IO_STR,
	R_REC_ADDR_STR,
	R_IDX_DFN_STR,
	R_IFAB_STR,
	R_IRAB_STR,
	R_RAB_STR;

    LOCAL
	NRP_PTR		: REF BBLOCK;

    NRP_PTR = .IRAB[IRB$L_NRP_PTR];

    IF .IFAB[IFB$B_PLG_VER] LSSU PLG$C_VER_3
    THEN
	BEGIN

	IF NOT .IRAB[IRB$V_UPDATE]
	THEN

	    ! this is a put operation so the VBN and ID fields for this record must
	    ! be filled in the record pointer fields to build the record
	    !
	    BEGIN

	    IF .BDB NEQ .IRAB[IRB$L_CURBDB]

		! the record is going into a new bucket so zero the ID to signal
		! this. the ID's will get reassigned further on anyway
		!
	    THEN
		IRAB[IRB$W_LAST_ID] = 0
	    ELSE

		! the record goes into the original bucket so use the next ID
		!
		BEGIN
		IRAB[IRB$W_LAST_ID] = .BKT_ADDR[BKT$B_NXTRECID];
		NRP_PTR[NRP$W_RP_ID] = .BKT_ADDR[BKT$B_NXTRECID];
		BKT_ADDR[BKT$B_NXTRECID] = .BKT_ADDR[BKT$B_NXTRECID] + 1;
		END;

	    NRP_PTR[NRP$L_RP_VBN] = .BDB[BDB$L_VBN];
	    END;

	! Fill in the pointer size field
	! ******
	! If RMS-11 can handle var ptrs in the udr, it do it this way:
	! REC_ADDR[IRC$B_CONTROL] = RM$VBN_SIZE(.NRP_PTR[NRP$L_RP_VBN]) - 2; 
	! ******
	! However if they can't, or until they can, do it like this:
	!
	REC_ADDR[IRC$B_CONTROL] = 2;

	! fill in record ID and back pointer ID fields, being sure to use
	! the original ID if this is an update case
	!
	REC_ADDR[IRC$B_ID] = .IRAB[IRB$W_LAST_ID];
	REC_ADDR[IRC$B_RRV_ID] = .NRP_PTR[NRP$W_RP_ID];
	REC_ADDR = .REC_ADDR + 3;

	! move VBN into record
	! *****
	! If rms-11 can handle var ptrs in the udr, do it this way:
	!	(LOCAL SIZE; 
	!	SIZE = RM$VBN_SIZE (.BDB[BDB$L_VBN]);
	! 	(.REC_ADDR) <0,8 * .SIZE> = .BDB[BDB$L_VBN];
	!	REC_ADDR = .REC_ADDR + .SIZE);
	! *****
	! However if they can't, or until they can, do it like this:
	!
	(.REC_ADDR) = .NRP_PTR[NRP$L_RP_VBN];
	REC_ADDR = .REC_ADDR + 4;

	! if not fixed length records, move size field in
	!

	IF .IFAB[IFB$B_RFMORG] NEQ FAB$C_FIX
	THEN
	    BEGIN
	    (.REC_ADDR)<0, 16> = .RAB[RAB$W_RSZ];
	    REC_ADDR = .REC_ADDR + IRC$C_DATSZFLD;
	    END;

	! move user's data record in
	!
	REC_ADDR = RM$MOVE (.IRAB[IRB$W_RSZ], .IRAB[IRB$L_RBF], .REC_ADDR);
	END

    ELSE
	BEGIN

	IF NOT .IRAB[IRB$V_UPDATE]
	THEN

	    ! this is a put operation so the VBN and ID fields for this record must
	    ! be filled in the record pointer fields to build the record
	    !
	    BEGIN

	    IF .BDB NEQ .IRAB[IRB$L_CURBDB]

		! the record is going into a new bucket so zero the ID to signal
		! this. the ID's will get reassigned further on anyway
		!
	    THEN
		IRAB[IRB$W_LAST_ID] = 0
	    ELSE

		! the record goes into the original bucket so use the next ID
		!
		BEGIN
		IRAB[IRB$W_LAST_ID] = .BKT_ADDR[BKT$W_NXTRECID];
		NRP_PTR[NRP$W_RP_ID] = .BKT_ADDR[BKT$W_NXTRECID];
		BKT_ADDR[BKT$W_NXTRECID] = .BKT_ADDR[BKT$W_NXTRECID] + 1;
		END;

	    NRP_PTR[NRP$L_RP_VBN] = .BDB[BDB$L_VBN];
	    END;

	! Fill in the pointer size field
	!
	REC_ADDR[IRC$B_CONTROL] = 2;

	! fill in record ID and back pointer ID fields, being sure to use
	! the original ID if this is an update case.  Also, move VBN into
	! record.
	!
	REC_ADDR[IRC$W_ID] = .IRAB[IRB$W_LAST_ID];
	REC_ADDR[IRC$W_RRV_ID] = .NRP_PTR[NRP$W_RP_ID];
	REC_ADDR = .REC_ADDR + 5;
	(.REC_ADDR) = .NRP_PTR[NRP$L_RP_VBN];
	REC_ADDR = .REC_ADDR + 4;
	RECSZ = .RECSZ - IRC$C_FIXOVHSZ3;

	! if not fixed length records, or fixed length compressed records
	! move size field in
	!

	IF .IFAB[IFB$B_RFMORG] NEQ FAB$C_FIX
	  OR (.IFAB[IFB$B_RFMORG] EQL FAB$C_FIX
	    AND .IDX_DFN[IDX$B_DATBKTYP] NEQU IDX$C_NCMPNCMP)
	THEN
	    BEGIN
	    RECSZ = .RECSZ - IRC$C_DATSZFLD;
	    (.REC_ADDR)<0, 16> = .RECSZ;
	    REC_ADDR = .REC_ADDR + IRC$C_DATSZFLD;
	    END;

	! move user's data record in
	!
	REC_ADDR = RM$MOVE(.RECSZ, .IRAB[IRB$L_RECBUF], .REC_ADDR);

	END;

    RETURN RMSSUC()

    END;					! { end of routine }


GLOBAL ROUTINE RM$INSERT_REC(RECSZ) : RL$INSERT_REC =

!++
!
! RM$INSERT_REC - routine to put the record into the bkt w/o any checks
!
! CALLING SEQUENCE:
!	BSBW RM$INSERT_REC(RECSZ)
!
! INPUT PARAMETERS:
!	RECSZ - record size of record to be inserted including overhead
!
! IMPLICIT INPUTS:
!	BKT_ADDR, BDB of curbdb
!	IRAB -- pos_ins
!	REC_ADDR -- pos of insert for record
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	success
!
! SIDE EFFECTS:
!	the bucket is expanded to make room for the record
!	freespace is updated
!	the bucket is marked valid and dirty
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_IO_STR,
	COMMON_RAB_STR,
	R_IDX_DFN_STR,
	R_REC_ADDR_STR;

    ! The record will fit, get ready to move it in.
    !
    BEGIN

    IF .BKT_ADDR[BKT$W_FREESPACE] NEQU .IRAB[IRB$W_POS_INS]
    THEN
	BEGIN

    	! Since the record to be put is not the last one in the bucket, if
	! keys are compressed, recompress the key of the next record, if it is
	! not and RRV.  We are doing it for updates too, since when we deleted
	! the record to be udpated, we expanded the key.
	!
	IF .IDX_DFN[IDX$V_KEY_COMPR]
	  AND NOT .REC_ADDR[IRC$V_RRV]
	THEN
	    BEGIN

	    GLOBAL REGISTER
		R_REC_SIZE;

	    REC_SIZE = 0;			! primary data level
	    RM$RECOMPR_KEY(.IRAB[IRB$L_RECBUF], .REC_ADDR + RM$REC_OVHD());
	    END;

	! Since there is a hi set, move it down in the bucket to make room
	! for the record.
	!
	RM$MOVE(.BKT_ADDR[BKT$W_FREESPACE] - .IRAB[IRB$W_POS_INS],
		.REC_ADDR,
		.REC_ADDR + .RECSZ);
	END;
    END;

    BEGIN

    ! update freespace word
    !
    BKT_ADDR[BKT$W_FREESPACE] = .BKT_ADDR[BKT$W_FREESPACE] + .RECSZ;
    BDB[BDB$V_DRT] = 1;

    ! move new record into bucket
    !
    RETURN RM$BLDUDR(.RECSZ)

    END
    END;				! { end of routine rm$insert_rec }


GLOBAL ROUTINE RM$INSERT_UDR(RECSZ) : RL$INSERT_UDR =

!++
!
! RM$INSERT_UDR
!
! 	Insert user data record in bucket, if possible
!
! CALLING SEQUENCE:
!	BSBW RM$INSERT_UDR(RECSZ)
!
! INPUT PARAMETERS:
!	RECSZ - record size of record to be inserted including overhead
!
! IMPLICIT INPUTS:
!	RAB -- LOA bit, rsz
!	IDX_DFN -- datbktsiz and datfill for bucket
!	REC_ADDR -- pos of insert
!	IFAB -- rfm of file
!	IRAB -- curbdb
!	BDB and BKT_ADDR corresponding to curbdb
!			from these we get the vbn, starting addr of bucket,
!			freespace pointer, nxtrecid, lstrecid
!
! OUTPUT PARAMETERS:
!	RECSZ - record size of record to be inserted including overhead
!
! IMPLICIT OUTPUTS:
!	IRAB -- pos_ins
!	BKT_ADDR -- NXTRECID and FREESPACE are updated
!
! ROUTINE VALUE:
!	suc if record is successfully placed in bucket
!	0 if record does not fit
!
! SIDE EFFECTS:
!	if it fits, record is placed into bucket
!	and bucket is marked dirty and valid
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_IO_STR,
	R_IDX_DFN_STR,
	R_REC_ADDR_STR,
	COMMON_RAB_STR;

    LOCAL
	REC_DEL,
	BKT_SIZE	: WORD;

    MAP
	RECSZ		: REF VECTOR[1,LONG];

    IRAB[IRB$W_POS_INS] = .REC_ADDR - .BKT_ADDR;

    ! set up bkt_size to be the fill size if loa set, else datbktsz * 512
    ! if the bkt is empty or all rrv's, use the whole bkt not the fill size
    ! if this is an update, use the whole bkt
    !
    BKT_SIZE = .IDX_DFN[IDX$B_DATBKTSZ]*512;

    IF .RAB[RAB$V_LOA]
	AND
	NOT .IRAB[IRB$V_UPDATE]
    THEN
	BEGIN

	LOCAL
	    POINTER	: REF BBLOCK;

	POINTER = .BKT_ADDR + BKT$C_OVERHDSZ;

	IF .BKT_ADDR[BKT$W_FREESPACE] NEQU BKT$C_OVERHDSZ<0, 16>
	    AND
	    NOT .POINTER[IRC$V_RRV]
	THEN
	    BKT_SIZE = .IDX_DFN[IDX$W_DATFILL];
	END;

    IF .IFAB[IFB$B_PLG_VER] LSSU PLG$C_VER_3
    THEN
	BKT_SIZE = .BKT_SIZE - 1			! checksum byte
    ELSE
	BEGIN
	BKT_SIZE = .BKT_SIZE - BKT$C_DATBKTOVH;

	IF .IDX_DFN[IDX$V_DUPKEYS]
	THEN
	    BKT_SIZE = .BKT_SIZE - BKT$C_DUPBKTOVH;	! dup chain ptr and cnt
	END;

    REC_DEL = 0;			! assume no record deleted

    ! if freespace is already past usable space, or if rec size is
    ! greater than usable space, won't fit
    !

    IF .BKT_ADDR[BKT$W_FREESPACE] GTRU .BKT_SIZE
      OR .RECSZ[0] GTRU (.BKT_SIZE - .BKT_ADDR[BKT$W_FREESPACE])
    THEN

	IF NOT (REC_DEL = RM$DEL_AND_TRY())
	THEN
	    RETURN 0;

    ! If the key is compressed, and a record was deleted, it might have been
    ! the one before the record.  So pack the record again to fix the key
    ! compression.  Reset the last non-compressed record in case it was deleted.
    !

    IF .REC_DEL AND .IDX_DFN[IDX$V_KEY_COMPR]
    THEN
	BEGIN
	IRAB[IRB$L_LST_NCMP] = .BKT_ADDR + BKT$C_OVERHDSZ;
	RECSZ[0] = RM$PACK_REC();
	RECSZ[0] = .RECSZ[0] + IRC$C_FIXOVHSZ3;

	IF .IFAB[IFB$B_RFMORG] NEQU FAB$C_FIX
	  OR (.IFAB[IFB$B_RFMORG] EQL FAB$C_FIX
	    AND .IDX_DFN[IDX$B_DATBKTYP] NEQU IDX$C_NCMPNCMP)
	THEN
	    RECSZ[0] = .RECSZ[0] + IRC$C_DATSZFLD;
	END;

    ! If the key compression changed, the record might have grown,
    ! make sure it still fits.
    !

    IF .BKT_ADDR[BKT$W_FREESPACE] GTRU .BKT_SIZE
      OR .RECSZ[0] GTRU ( .BKT_SIZE - .BKT_ADDR[BKT$W_FREESPACE] )
    THEN
	RETURN 0;

    ! it's now o.k. to move the record in, so go do it
    !
    RETURN RM$INSERT_REC(.RECSZ[0]);

    END;

END

ELUDOM
