	$BEGIN	RMS0MISC,019,L$RMS0MISC,<$FREE,$RELEASE,$FLUSH>


;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
; Facility: RMS32
;
; Abstract:
;
;	This module provides the high level control for the
;	$FREE, $RELEASE, and $FLUSH RMS services.
;
; Environment:
;		Star processor running Starlet exec.
;
; Author: L. F. Laverdure	 Creation Date: 25-OCT-1977
;
; Modified By:
;
;	V02-019	CDS0003		C Saether		 5-Feb-1982
;		Reflect addition of GBC in record attributes.
;
;	V02-018	CDS0002		C Saether		15-Jan-1982
;		Always call cache to access dirty buffers instead
;		of simply incrementing the use count because of
;		the possibility of blocking ast's.
;
;	V02-017	RAS0041		Ron Schaefer		27-Oct-1981
;		Fix broken branches caused by root directories.
;		Change the psect to L$RMS0MISC.
;
;	V02-016	CDS0001		C D Saether		20-Aug-1981
;		Reference BDB$W_USERS instead of BDB$B_USECNT.
;		Flush nows calls cache to wait for bdb's in use.
;
;	V02-015	kpl0001		Peter Lieberwirth	20-Jul-1981
;		Remove references to RM$UNLOCK_ALT
;
;	V02-014	REFORMAT	K. E. Kinnear		31-Jul-1980	9:09
;
;	V01-013	CDS0053		C. D. Saether		16-Nov-1979	20:40
;		Force acp writethru when rewriting attributes on flush.
;
;	V01-012	JAK0020		J. A. Krycka		03-Oct-1979	17:00
;		Release 2.0 work.
;
;	V01-010	RAN0002		R. A. Newell		18-Sep-1978	8:58
;		RMS32 isam modification.  Redefinition of entry points to
;		resolve out of range branches.
;
;	V01-009	JAK0001		J. A. Krycka		27-Aug-1978	10:55
;		Miscellaneous clean-up prior to decnet v1.0 code freeze.
;		Revise network error processing.
;
;--
;


	.SBTTL	DECLARATIONS

;
; Include Files:
;

;
; Macros:
;

	$FABDEF
	$RABDEF
	$FIBDEF
	$DEVDEF
	$BDBDEF
	$IFBDEF
	$IRBDEF
	$IODEF
	$ATRDEF
	$RLSDEF
	$RMSDEF

;
; Equated Symbols:
;

	BKP	= IRB$L_BKPBITS*8	; bit offset to flags
	LSTMSK	= <1@<IRB$V_FIND_LAST-BKP>>-
		 !<1@<IRB$V_PUTS_LAST-BKP>> ; mask for resetting irab status
	FHCLEN	= IFB$C_FHAEND-IFB$B_RFMORG ; file header characteristics length

;
; Own Storage:
;


	.SBTTL	MISCELLANEOUS RECORD SERVICE ENTRY POINTS

;++
; Functional Description:
;
;	This module provides the high level control routines
;	for the miscellaneous rab functions $free, $release, and
;	$flush. see individual descriptions.
;
; Calling Sequence:
;
;	Entered as a result of user's calling SYS$FREE,
;	SYS$RELEASE, SYS$FLUSH.
;
; Input Parameters:
;
;	AP	user's argument list
;
; Implicit Inputs:
;
;	The contents of the rab.
;
; Output Parameters:
;
;	R0	status code
;	R1	destroyed
;
; Implicit Outputs:
;
;	The sts and stv fields of the rab are output by all of
;	these services. See individual service descriptions
;	for additional rab outputs.
;
; Completion Codes:
;
;	Standard rms
;
; Side Effects:
;
;	none
;
;--



;++
;
; Entry point for $free.
;
; Call RM$UNLOCKALL to release locks on all records.
;
;--

	$ENTRY	RMS$$FREE
	$TSTPT	FREE
	$RABSET				; set up stream
	BBS	#IFB$V_DAP,(R10),NTFREE	; branch if network operation
	BSBW	RM$UNLOCKALL		; free all locked records
	BRB	EXIT			; all set

;++
;
; Entry point for $release.
;
; Call RM$UNLOCK to release lock on record specified by
; the rfa field of the rab.
;
;--

	$ENTRY	RMS$$RELEASE
	$TSTPT	RELEASE0
	$RABSET				; set up stream
	BBS	#IFB$V_DAP,(R10),NTREL	; branch if network operation
	MOVL	RAB$W_RFA(R8),R1	; get rfa
	MOVZWL	RAB$W_RFA+4(R8),R2	; and zero extend last word
	BSBW	RM$UNLOCK		; release lock on record
	BRB	EXIT

;++
;
; Entry point for $$FLUSH.
;
; Call internal flush routine.
;
;--

	$ENTRY	RMS$$FLUSH
	$TSTPT	FLUSH
	$RABSET				; set up stream
	BBS	#IFB$V_DAP,(R10),NTFLUSH; branch if network operation
	BSBB	RM$FLUSH		; do flush
EXIT:	BRW	RM$EXRMS

;++
;
; Perform network functions.
;
;--

NTFREE:	$PSECT_BR	NF$NETWORK
	BSBW	NT$FREE			; perform function via
	BRB	NTEXIT			;  remote fal
	$PSECT_RESTORE
NTREL:	$PSECT_BR	NF$NETWORK
	BSBW	NT$RELEASE		; perform function via
	BRB	NTEXIT			;  remote fal
	$PSECT_RESTORE
NTFLUSH:
	$PSECT_BR	NF$NETWORK
	BSBW	NT$FLUSH		; perform function via
NTEXIT:	BRW	EXIT			;  remote fal
	$PSECT_RESTORE


	.SBTTL	RM$FLUSH - COMPLETE ACTIVITY ON STREAM

;++
; RM$FLUSH -- Complete Activity on Stream.
;
;	This routine performs the following steps to guarantee
; 	that all modified i/o buffers are written back to the
; 	file and the files attributes are written back to the
;	file header.
;
;	1.  If sequential file org, call RM$WTLST1.
;
;	2.  Get the bdb list head.
;
;	3.  Get next bdb, if no more call RM$WRITE_ATTR, clear the
;	    FIND_LAST, PUTS_LAST, and BIO_LAST IRAB bookkeeping
;	    bits and exit.
;
;	4.  If bdb not dirty, go to 3.
;
;	5.  Call cache to get exclusive access (lock) to the buffer.
;
;	6.  Release the buffer with write through.
;
;	7.  Go to step 2.
;
; Calling Sequence:
;
;	BSBW	RM$FLUSH
;
; Input Parameters:
;
;	R11	impure area address
;	R10	ifab address
;	R9	irab address
;	R8	rab address
;
; Implicit Inputs:
;
;	The contents of the ifab, irab, and rab.
;
; Output Parameters:
;
;	R0		status code
;	R1-R7,AP 	destroyed
;
; Implicit Outputs:
;
;	none.
;
; Side Effects:
;
; 	For the sequential file organization, guarantees that any
;	write behinds have terminated.
;
;	For the other organizations, $flush has a possibility of
;	never terminating if other streams continually leave
;	around dirty buffers. If this is a problem for a given
;	application, some other mechanism is required in addition
;	to flush to guarantee a quiet point. Note that these
;	problems only occur with the deferred write option.
;--


RM$FLUSH::
	BICB	#LSTMSK,IRB$L_BKPBITS(R9); reset irab flags

	ASSUME	FAB$C_SEQ EQ 0

	TSTB	IFB$B_ORGCASE(R10)	; seq. file org?
	BNEQ	SCAN_BDB_LIST		; branch if not
	BBS	#IFB$V_BIO,IFB$B_FAC(R10),10$; branch if block i/o
	BBSC	#IRB$V_BIO_LAST,(R9),10$; or last op was block i/o
					;  (i.e., mixed block and record op)
	BSBW	RM$WTLST1		; write out partial buffer
	CLRW	IRB$W_CSIZ(R9)		; say no current record
	BLBC	R0,FLXIT		; get out on error
10$:

;
; Scan bdb list for any dirty buffers and, if found, write them
; out. If any have a write in progress, wait for it to finish.
; NOTE:  This code is only executed for relative and isam orgs.
; Cache is called to access the buffer so that all necessary
; interlocking is done correctly there.
;

SCAN_BDB_LIST:
	MOVAL	IFB$L_BDB_FLNK(R10),R4	; get bdb list head addr

	ASSUME	BDB$L_FLINK EQ 0

NXTBDB:	MOVL	(R4),R4			; get next bdb addr
	CMPL	(R4),IFB$L_BDB_FLNK(R10); is this the list head?
	BEQL	RM$WRITE_ATTR		; branch if yes
CHKDRT:	BBC	#BDB$V_DRT,BDB$B_FLGS(R4),NXTBDB; branch if buffer not dirty

;
; Buffer is dirty.  Deferred write may be in use or another stream may
; currently have the buffer accessed.  At any rate, get exclusive access
; to the buffer, then release with write-through.
;

	$CSHFLAGS	LOCK		; say we want lock
	MOVL	BDB$L_VBN(R4), R1	; get vbn for this bdb
	MOVZWL	BDB$W_NUMB(R4), R2	; get size of this buffer.
	BSBW	RM$CACHE		; access the bucket.
	BLBC	R0, ERRX		; and go write it.
	MOVL	#RLS$M_WRT_THRU,R3	; flag to cause write
	JSB	RM$RELEASE		; and write bucket out
	BLBS	R0,SCAN_BDB_LIST	; and branch if o.k.
ERRX:	RSB				; get out on error


;
;  Clear nrp offset on magtape flush and avoid rewrite of file attributes.
;

CLRNRP:	CLRW	IRB$W_NRP_OFF(R9)	; get start of next block

;
; Successful exit for not write accessed.
;

SUCXIT:	RMSSUC				; show success
FLXIT:	RSB

	.SBTTL	RM$WRITE_ATTR - REWRITE FILE ATTRIBUTES

;++
; RM$WRITE_ATTR -- Rewrite File Attributes.
;
; This subroutine examines the IFB$V_RW_ATTR bookeeping
; bit and if set rewrites the file attributes, clearing the bit.
;
; Acp write through is forced by setting FIB$V_WRITETHRU.
;
; Attributes are currently only written for sequential files (does not
; include 512 fix len sharing) because the other orgs never set the
; IFB$V_RW_ATTR flag in the bookeeping bits.  Therefore the attributes
; are written from the local and not the shared ifab.
;
; Inputs:
;
;	R11		impure area address
;	R10		ifab address
;	R9		ifab or irab address
;	R8		fab or rab address
;
; Outputs:
;
;	R0		status code
;	R1-R6,AP	destroyed
;--

RM$WRITE_ATTR::
	BBCC	#IFB$V_RW_ATTR,(R10),SUCXIT; branch if nothing to do
	BBS	#DEV$V_SQD,IFB$L_PRIM_DEV(R10),CLRNRP; branch if magtape
	BBC	#DEV$V_DIR,IFB$L_PRIM_DEV(R10),CLRNRP; or if non-directory device

;
; Build attribute list to rewrite record attributes.
;
; Allocate space for the record attributes and move them there from 
; the ifab, converting them to their on disk format.
;

	MOVL	#FHCLEN+4,R2		; size of rec. attr. + fib
	BSBW	RM$GETSPC1		; get the space
	BLBC	R0,DONE			; get out on error
	CLRL	-(SP)			; end of attribute list
	PUSHL	R1			; push addr of allocated space
	PUSHL	#<ATR$C_RECATTR@16>+FHCLEN; and set attr. code and length

	ASSUME	IFB$B_RAT EQ IFB$B_RFMORG+1
	ASSUME	IFB$W_LRL EQ IFB$B_RFMORG+2

	MOVL	IFB$B_RFMORG(R10),(R1)	; copy rfm, rat, lrl
	INSV	IFB$B_ORGCASE(R9),#IFB$V_ORG,#IFB$S_ORG,(R1); insert org
	TSTL	(R1)+			; move to next field

	ASSUME	IFB$L_HBK EQ IFB$B_RFMORG+4

	ROTL	#16,IFB$L_HBK(R10),(R1)+; switch words of hbk

	ASSUME	IFB$L_EBK EQ IFB$B_RFMORG+8

	ROTL	#16,IFB$L_EBK(R10),(R1)+; switch words of ebk

	ASSUME	<IFB$W_GBC-IFB$W_FFB> EQ 8
	ASSUME	IFB$W_FFB EQ IFB$L_EBK+4

	MOVQ	IFB$W_FFB(R10),(R1)+	; copy record attributes to GBC
	ASSUME	IFB$C_FHAEND EQ <IFB$W_GBC+2>
	MOVW	IFB$W_GBC(R10), (R1)+	; copy GBC

	ASSUME	FIB$L_ACCTL EQ 0

	SSB	#FIB$V_WRITETHRU,(R1)	; force write thru
	PUSHL	R1			; push addr of fib
	PUSHL	#4			; and length of fib
	MOVZBL	#IO$_MODIFY,R0		; specify modify i/o function
	BSBW	RM$FCPFNC_ALT4		; go write the attributes
	ADDL2	#12,SP			; clean fib descriptor off stack

;
; And 1st long of attr stuff.
;

	MOVQ	(SP)+,R4		; addr of space to deallocate

;
; And rest of stack clean.
;

	MOVL	#FHCLEN+4,R2		; length of space to deallocate
	PUSHL	R0			; save status from write attr
	BSBW	RM$RETSPC1		; deallocate the space
	POPR	#^M<R0>			; restore status code
	BLBC	R0,RWERR		; branch on error
DONE:	RSB

;
; Map error code from qio to rms code.
;

RWERR:	$PSECT_BR	L$RMS0
	RMSERR	WER,R1			; default error code
	BRW	RM$MAPERR		; map the error code

;
; And return
;

	$PSECT_RESTORE
	.END
