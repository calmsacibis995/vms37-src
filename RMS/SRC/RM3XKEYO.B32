MODULE RM3XKEYO (LANGUAGE (BLISS32) ,
		IDENT = 'V03-002'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:	RMS32 index sequential file organization
!
! ABSTRACT:
!		 This routine fills in the KEY XAB from the disk
!
!
! ENVIRONMENT:
!
!		VAX/VMS operating system
!
!--

!
! AUTHOR:        D. M. BOUSQUET
! CREATION DATE: 18-AUG-78  14:19
!
! MODIFIED BY:
!
!	V03-002	KBT0017		Keith Thompson		19-Mar-1982
!		Ignore compression bits when filling in xab of a prologue
!		1,2 file
!
!	V03-001	JWH0001		Jeffrey W. Horn		16-March-1982
!		Fix writing into space beyond the old end of XABKEY.
!
!	V02-006	DJD0001		Darrell Duffy		1-March-1982
!		Fix probing in RM$XKEYO3.
!
!	V02-005	KBT0004		K B Thompson		 8-Feb-1982
!		Correct compression bits when filling in key xab from
!		prologue and stuff the prologue version if long key=0 xab
!
!	V02-004	CDS0001		C Saether		 9-Aug-1981
!		Use alternate linkage declaration for RELEASE.
!
!	V02-003 REFORMAT	D M WALP		24-JUL-1980
!
!
! REVISION HISTORY:
!
!   Wendy Koenig, 	24-OCT-78  14:03
!   X0002 - make changes caused by sharing conventions
!
!*****

LIBRARY 'RMSLIB:RMS';

REQUIRE 'RMSSRC:RMSIDXDEF';

! define default psects for code
!

PSECT
    CODE = F$OPEN3(PSECT_ATTR),
    PLIT = F$OPEN3(PSECT_ATTR);


LINKAGE
    L_CHKSUM,
    L_RELEASE_FAB,
    L_CACHE,
    L_XKEYO3;

! External Routines
!
EXTERNAL ROUTINE
    RM$CHKSUM	: RL$CHKSUM,
    RM$RELEASE	: RL$RELEASE_FAB,
    RM$CACHE	: RL$CACHE;

!
!


GLOBAL ROUTINE RM$XKEYO3 (XAB) : RL$XKEYO3 =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	The KEY XAB is filled in from the KEY descriptor
!
! CALLING SEQUENCE:
!	RM$XKEYO3(XAB)
!
! INPUT PARAMETERS:
!	XAB		-  Pointer to the KEY XAB we are filling in
!
!
! IMPLICIT INPUTS:
!	$XAB
!	    [REF]		-  Key of reference
!	    [KNM]		-  Pointer to key name buffer
!
!	$KEYDEF
!	    [KEY$S_KEYNAM]	-  Size of the keyname buffer, 32
!	    [KEY$T_KEYNAM]	-  Buffer of the keyname (table)
!
!	$IFAB
!	    [IFB$B_ORGCASE]	-  File organization
!	    [IFB$C_IDX]		-  Indexed file organization constant
!	    [IFB$B_MODE]	-  Mode of the key name buffer
!	    [IFB$B_PLG_VER]	-  Index file prologue version
!
!	$IDX_DFN
!	    [all fields in the index descriptor are input, 
!		but specifically reference a few]
!	    [IANUM]		-  Index area number
!	    [SEGMENTS]		-  Number of segments
!	    [FIXED_BLN]		-  Fixed block length analogous to the XAB
!	    [POSITION]		-  Position of first segment
!	    [SIZE]		-  Size of first segment
!
! OUTPUT PARAMETERS:
!	XAB			-  Untouched by this routine
!
!
! IMPLICIT OUTPUTS:
!	$XAB
!	    [all fields are filled in from the index descriptor]
!
! ROUTINE VALUE:
!	RMSERR
!	    (SUC)  - Success code
!
!
! SIDE EFFECTS:
!	NONE
!
!--

    BEGIN

    EXTERNAL REGISTER
	R_IDX_DFN_STR,
	COMMON_FAB_STR;

    MAP
	XAB	: REF BBLOCK;

    LOCAL
	SAV_BDB,
	KEY_VBN,
	KEY_DESC	: REF BBLOCK;

    ! If BIO was set in the FAB, then we only want to make sure user knows that
    ! the NUM_KEYS is not filled in
    !
    IF .IFAB[IFB$B_NUM_KEYS] EQL 0
    THEN
	RETURN RMSSUC(OK_NOP);

    ! Let's first check to see if this is a indexed file
    !
    IF .IFAB[IFB$B_ORGCASE] EQL IFB$C_IDX
    THEN
	BEGIN

	!	Now to make sure that the reference input in valid
	!
	IF .XAB[XAB$B_REF] GEQU .IFAB[IFB$B_NUM_KEYS]
	THEN
	    RETURN RMSERR(REF);

	! Now to compute the key_vbn and the offset into the vbn for this key
	!
	KEY_VBN = 1 + ((.XAB[XAB$B_REF] + 4)/5);
	KEY_DESC = 0;

	IF .XAB[XAB$B_REF] NEQ 0
	THEN
	    KEY_DESC = (.XAB[XAB$B_REF] - 1) MOD 5;

	!	Now to read in key_vbn
	!
	BEGIN
	GLOBAL REGISTER
	    COMMON_IO_STR;

	LOCAL
	    STATUS;

	STATUS = RM$CACHE(.KEY_VBN, 512, 0);

	!	If error then return with error code in status
	!
	IF NOT .STATUS
	THEN
	    RETURN .STATUS;


	!	Now to release the bucket and check it
	!
	RETURN_ON_ERROR (RM$CHKSUM(),
	    BEGIN
	    (RM$RELEASE(0))
	    END);

	!	Now to calculate the offset into the vbn
	!
	KEY_DESC = .KEY_DESC*(KEY$C_BLN + KEY$C_SPARE) + .BKT_ADDR;

	!	Now to save the BDB before CH$MOVE clobbers it
	!
	SAV_BDB = .BDB;
	END;

	!	Now to do a straight move from the key descriptor to the XAB
	!
	CH$MOVE($BYTEOFFSET(KEY$T_KEYNAM) - $BYTEOFFSET(KEY$B_IANUM),
	         KEY_DESC [ KEY$B_IANUM ], 
		 XAB [ XAB$B_IAN ]);

	! If this is a prologue 3 file correct the compression bits
	!
	IF .IFAB [ IFB$B_PLG_VER ] GEQU 3
	THEN

	    ! SET in the prologue = CLEAR in the xab
	    !
	    XAB [ XAB$B_FLG ] = .XAB [ XAB$B_FLG ] XOR ( XAB$M_IDX_NCMPR OR
							 XAB$M_KEY_NCMPR OR
							 XAB$M_DAT_NCMPR );

	! If this is a long key xab and it is key-0 (primary)
	! then fill in the prologue version number
	!
	IF ( .XAB [ XAB$B_BLN ] EQLU XAB$K_KEYLEN ) AND
	   ( .XAB [ XAB$B_REF ] EQLU 0 )
	THEN
	    XAB [ XAB$B_PROLOG ] = .IFAB [ IFB$B_PLG_VER ];

	! If the user has a key name buffer fill it in
	!
	IF .XAB [ XAB$L_KNM ] NEQ 0
	THEN
	    BEGIN
	    LOCAL
		KNM_ADDR;
	    KNM_ADDR = .XAB [XAB$L_KNM];

	    !		Probe it
	    !
	    IFNOWRT(%REF(KEY$S_KEYNAM), .KNM_ADDR, IFAB[IFB$B_MODE],
		BEGIN
		GLOBAL REGISTER
		    R_BDB_STR;

		BDB = .SAV_BDB;
		RM$RELEASE(0);
		RETURN RMSERR(KNM)
		END);


	    !		Now to move the buffer
	    !
	    CH$MOVE(KEY$S_KEYNAM, KEY_DESC[KEY$T_KEYNAM], .KNM_ADDR );
	    END;

	! Now move last long word.
	!
	XAB[XAB$L_DVB] = .KEY_DESC[KEY$L_LDVBN];

	BEGIN
	GLOBAL REGISTER
	    R_BDB_STR;

	BDB = .SAV_BDB;
	RM$RELEASE(0);
	END;
	END;

    ! Now to return the success code if all went well
    !
    RETURN RMSSUC(SUC);

    END;

END

ELUDOM
