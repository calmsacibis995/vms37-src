
MODULE RM3DELETE (LANGUAGE (BLISS32) ,
		IDENT = 'V03-002'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:	RMS32 INDEX SEQUENTIAL FILE ORGANIZATION
!
! ABSTRACT:
!	This module handles the deletion of index sequential records.
!
!
!
! ENVIRONMENT:
!
!		VAX/VMS OPERATING SYSTEM
!
!--

!
! AUTHOR:        D. H. Gillespie	     CREATION DATE:        	29-SEP-78  9:48
!
!
! MODIFIED BY:
!
!	V03-002	KPL0002		Peter Lieberwirth	26-Mar-1982
!		Completely delete RRV in place v02-014 forgot to.
!
!	V03-001 LJA0007		Laurie Anderson 	25-Mar-1982
!		Change KBUFSZ to reference a macro when computing buffer 
!		size and make IFB$B_KBUFSZ a word, now: IFB$W_KBUFSZ.
!
!	V02-015	CDS0002		C Saether		30-Aug-1981
!		Do not release with keep lock prior to nrp update.
!
!	V02-014	KPL0001		Peter Lieberwirth	17-Aug-1981
!		Change RM$DEL_RRV to entirely delete RRV for PLG 3 files.
!
!	V02-013	MCN0004		Maria del C. Nasr	22-Jul-1981
!		Make changes to support deletion of secondary keys for prologue
!		3 files.
!
!	V02-012	MCN0003		Maria del C. Nasr	04-Aug-1981
!		Have RM$DELETE_UDR return number of chars expanded by
!		RM$EXPAND_KEYD.
!
!	V02-011	MCN0002		Maria del C. Nasr	21-Jul-1981
!		Set significant count in bucket to zero when last record
!		in the bucket is deleted.
!
!		MCN0001		Maria del C. Nasr	22-Jun-1981
!		Implement record deletion by primary key for prologue 3 files.
!
!	V03-010	CDS0001		C D Saether		6-Feb-1981	23:45
!		Rename psect.
!
!	V02-099 REFORMAT	Ken Henderson		29-Jul-1980
!		The code was reformatted.
!
! REVISION HISTORY:
!
!   Wendy Koenig, 	12-OCT-78  11:10
!   X0002 -  reflect two routines to update nrp
!
!   Wendy Koenig, 	24-OCT-78  14:01
!   X0003 - make changes caused by sharing conventions
!
!   Christian Saether, 	27-OCT-78  15:18
!   X0004 - fix window between locking current record bucket and releasing lock
! on record
!
!   Christian Saether, 	12-DEC-78  15:51
!   X0005 - 1) put in bugchecks,2) do not physically remove last record in
! bucket - only mark deleted
!
!   Christian Saether, 	19-FEB-79  10:59
!   X0006 - subroutinize delete rrv and delete udr aspects of record deletion
!	for use by clean_sidr
!
!   Christian Saether, 	25-MAR-79  13:15
!   X0007 - fix incorrect length on move when deleting rrv
!
!   Christian Saether,  06-DEC-79  09:50
!   0008 - don't force write through when deleting primary data record
!
!*****

LIBRARY 'RMSLIB:RMS';

REQUIRE 'RMSSRC:RMSIDXDEF';

!
! define default psects for code
!

PSECT
    CODE = $$RMSDELETE3(PSECT_ATTR),
    PLIT = $$RMSDELETE3(PSECT_ATTR);

! Linkages
!

LINKAGE
    L_ZERO_NRP,
    L_NULLKEY,
    L_DEL_RRV,
    L_DELUDR_NRP,
    L_DELETE3B,
    L_DELETE_SIDR,
    L_DELETE_UDR,
    L_EXPAND_KEYD,
    L_FIND_BY_ID,
    L_KEY_DESC,
    L_MOVE,
    L_PREUPD_NRP,
    L_REC_OVHD,
    L_RECORD_KEY,
    L_RLSBKT,
    L_UNPACK_REC,
    L_UPDDELCOM,
    L_UPD_NRP;

! Forward Routines
!

FORWARD ROUTINE
    RM$DELETE_UDR	: RL$DELETE_UDR;

! External Routines
!

EXTERNAL ROUTINE
    RM$NULLKEY		: RL$NULLKEY,
    RM$ZERO_NRP		: RL$ZERO_NRP NOVALUE,
    RM$DELETE_SIDR	: RL$DELETE_SIDR,
    RM$EXPAND_KEYD	: RL$EXPAND_KEYD,
    RM$FIND_BY_ID	: RL$FIND_BY_ID,
    RM$KEY_DESC		: RL$KEY_DESC,
    RM$MOVE		: RL$MOVE,
    RM$PREUPD_NRP	: RL$PREUPD_NRP NOVALUE,
    RM$REC_OVHD		: RL$REC_OVHD,
    RM$RECORD_KEY	: RL$RECORD_KEY,
    RM$RLSBKT		: RL$RLSBKT,
    RM$UNPACK_REC	: RL$UNPACK_REC,
    RM$UPDDELCOM	: RL$UPDDELCOM,
    RM$UPD_NRP		: RL$UPD_NRP NOVALUE;


GLOBAL ROUTINE RM$DEL_RRV : RL$DEL_RRV =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	Mark the RRV deleted and squish it for PLG 2 files, and delete it
!	completely for PLG 3 files.
!
! CALLING SEQUENCE:
!	RM$DEL_RRV()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	BDB - bdb of buffer with rrv in it
!	REC_ADDR - points to record that rrv points to
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	value of RLSBKT when writing out bucket with rrv deleted
!
! SIDE EFFECTS:
!	AP destroyed
!	IDX_DFN set up for primary key
!	BKT_ADDR, REC_ADDR destroyed
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_IO_STR,
	R_IDX_DFN_STR,
	R_REC_ADDR_STR,
	COMMON_RAB_STR;

    LOCAL
	DEL_RRV_SIZE,
	RRV_SIZE;

    BUILTIN
	AP;

    RM$KEY_DESC(0);				! set up for primary key

    ! Get the rrv id of the record to be deleted, and set up constants based
    ! on prologue version.
    !

    IF .IFAB[IFB$B_PLG_VER] LSSU PLG$C_VER_3
    THEN
	BEGIN
	AP = .REC_ADDR[IRC$B_RRV_ID];
	DEL_RRV_SIZE = 2;
	RRV_SIZE = 7;
	END
    ELSE
	BEGIN
	AP = .REC_ADDR[IRC$W_RRV_ID];
	RRV_SIZE = 9;
	END;

    BKT_ADDR = .BDB[BDB$L_ADDR];

    ! This points REC_ADDR to RRV - this cannot fail because FIND_BY_RRV just
    ! found it and hasn't released the bucket since
    !
    RM$FIND_BY_ID();

    ! delete the RRV
    !
    IF .IFAB[IFB$B_PLG_VER] LSSU PLG$C_VER_3
    THEN
	! Squish the RRV for PLG 2 files
	!
	BEGIN

	! Set up the control byte
	!
	REC_ADDR[IRC$B_CONTROL] = IRC$M_RRV OR IRC$M_DELETED OR IRC$M_NOPTRSZ;

	RM$MOVE(.BKT_ADDR + .BKT_ADDR[BKT$W_FREESPACE] - .REC_ADDR - .RRV_SIZE,
		.REC_ADDR + .RRV_SIZE,
		.REC_ADDR + .DEL_RRV_SIZE);

	BKT_ADDR[BKT$W_FREESPACE] = .BKT_ADDR[BKT$W_FREESPACE] -
		.RRV_SIZE + .DEL_RRV_SIZE;
	END
    ELSE
	! Completely delete the RRV for PLG 3 files
	!
	BEGIN
	RM$MOVE(.BKT_ADDR + .BKT_ADDR[BKT$W_FREESPACE] - .REC_ADDR - .RRV_SIZE,
		.REC_ADDR + .RRV_SIZE,
		.REC_ADDR);

	BKT_ADDR[BKT$W_FREESPACE] = .BKT_ADDR[BKT$W_FREESPACE] - .RRV_SIZE;
	END;

    BDB[BDB$V_DRT] = 1;

    RETURN RM$RLSBKT(RLS$M_WRT_THRU)

    END;


GLOBAL ROUTINE RM$DELUDR_NRP : RL$DELUDR_NRP =

!++
!
! FUNCTIONAL DESCRIPTION:
!
! delete the user data record (UDR) and update the NRP list
!
! CALLING SEQUENCE:
!	RM$DELUDR_NRP()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	AP - 1  indicates leave 2 (or 3) byte RRV
!	     0  indicates delete UDR entirely
!	REC_ADDR - points to UDR to be deleted
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	value of RLSBKT which writes out modified bucket
!
! SIDE EFFECTS:
!	BDB, BKT_ADDR clobbered
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_IO_STR,
	R_REC_ADDR_STR,
	R_IDX_DFN,
	COMMON_RAB_STR;

    ! Set up BDB, BKT_ADDR for this bucket.  Set up NRP list.
    ! PREUPD_NRP set UPD_NRP flag in IRAB if anything in NRP list will
    ! be affected.
    !
    BDB = .IRAB[IRB$L_CURBDB];
    BKT_ADDR = .BDB[BDB$L_ADDR];
    RM$ZERO_NRP();
    RM$PREUPD_NRP(.REC_ADDR, .BDB[BDB$L_VBN], IRC$_ID(REC_ADDR));

    ! Delete the UDR - AP is input to this routine as described above.
    ! Note that AP<1,1> = 0 to let DELETE_UDR decide whether to really
    ! remove the record or just mark it deleted if it is the last record
    ! in the bucket.
    !
    RM$DELETE_UDR();
    BDB[BDB$V_DRT] = 1;
    IRAB[IRB$L_CURBDB] = 0;

    IF .IRAB[IRB$V_UPD_NRP]
    THEN
	RM$UPD_NRP(.BDB[BDB$L_VBN]);

    RETURN RM$RLSBKT(0)

    END;


GLOBAL ROUTINE RM$DELETE3B : RL$DELETE3B =

!++
!
! FUNCTIONAL DESCRIPTION:
!	This module deletes the record described by the current record pointer.
!	To establish a current record a $GET or $FIND must be done.
!	Fast delete (SIDR entries are not deleted when dups are allowed)
!	can only take place when dups are allowed because if no dups are
!	allowed then  the error condition "inserting dup when not allowed" can
!	not be detected.
!
! CALLING SEQUENCE:
!	RM$DELETE3B()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	IRAB				- address of internal RAB
!		[IRB$L_NRP_PTR]		- address of next record pointer cell for this IRAB
!	IFAB				- address of internal FAB
!		[IFB$B_NUM_KEYS]	- number of keys
!		[IFB$B_PLG_VER]		- file prologue version number
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	IRAB[IRB$V_FIND_LAST]	- 0, last operation was not find
!	IRAB[IRB$V_PUTS_LAST] 	- 0, last operation was put
!
! ROUTINE VALUE:
!	CUR		- illegal or no current record
!	RNL		- current record not locked
!
! SIDE EFFECTS:
!	If record locking is unnecessary then record lock is not checked.
!	If automatic locking specified, then record is unlock in all cases(
!	error or success).  If not automatic locking then record is never unlocked.
!
!--

    BEGIN

    BUILTIN
	AP;

    LABEL
	BLK;

    LOCAL
	S_REC_ADDR;

    EXTERNAL REGISTER
	COMMON_RAB_STR;

    GLOBAL REGISTER
	COMMON_IO_STR,
	R_REC_ADDR_STR,
	R_IDX_DFN_STR;

    ! In RMS-11 the data record (UDR) was never completely deleted.  Only bits
    ! indicating that the record was deleted were set.  They wrote out in the
    ! following order:  secondary key if not fast delete, UDR, then RRV.
    ! Since we are getting rid of UDR, if we wrote out in this order we could
    ! have the situation where an RRV pointed to a non-existent record or worse
    ! yet the wrong record.  So we chose to write out in this order: RRV,
    ! secondary keys, and then UDR.  If the UDR does not get written to the
    ! disk then that record could be retrieved by sequential get but not by
    ! random get, find by RFA or any secondary keys. Do common checks (record
    ! locked?, current record pter?, set FIND_LAST + PUTS_LAST Find current
    ! record by RRV, locking both the bucket containing the RFA and the RRV if
    ! it exists.
    !
    IRAB[IRB$V_UPDATE] = 0;

    RETURN_ON_ERROR (RM$UPDDELCOM());

    S_REC_ADDR = .REC_ADDR;		! end of def of global REC_ADDR

    ! Before anything else is done, the RRV, if there is one, is made into a
    ! 2 (or 3) byte deleted RRV.  This means the record can no longer be found
    ! through its secondary keys or by a user FIND_BY_RFA.
    !
    BEGIN
    BDB = .IRAB[IRB$L_NXTBDB];

    IF .BDB NEQ 0
    THEN

	! nxtbdb neq 0 means there was an rrv which must be deleted
	!

	RETURN_ON_ERROR (RM$DEL_RRV(),
	    BEGIN
	    IRAB[IRB$L_NXTBDB] = 0;
	    RELEASE(IRAB[IRB$L_CURBDB])
	    END);

    END;

    RM$KEY_DESC(0);			! get key descriptor for primary key

    ! After the RRV has been successfully written out as 2 (or 3) byte RRV,
    ! begin deleting SIDR entries.  Need SIDR key in UDR in order to delete
    ! SIDR entries.
    !
    BEGIN

    LOCAL
	REC_OVHD,
	REC_SZ;

    BEGIN

    GLOBAL REGISTER
	R_REC_SIZE;

    REC_ADDR = .S_REC_ADDR;		! restore REC_ADDR of primary key
    REC_SIZE = 0;			! flag primary data level
    REC_OVHD = RM$REC_OVHD();		! get size of data record and overhead
    REC_SZ = .REC_SIZE
    END;				! end def of GLOBAL REG REC_SIZE

    ! If there are secondary keys present, then the record must be unpacked
    ! so that the keys can be extracted.
    !

    IF .IFAB[IFB$B_PLG_VER] GEQU  PLG$C_VER_3
      AND .IFAB[IFB$B_NUM_KEYS] GTRU 1
    THEN
	BEGIN
	REC_ADDR = .REC_ADDR + .REC_OVHD;
	REC_SZ = RM$UNPACK_REC( .IRAB[IRB$L_RECBUF], .REC_SZ );
	END;

    DECR I FROM .IFAB[IFB$B_NUM_KEYS] - 1 TO 1 DO
BLK :
	BEGIN

	IF NOT RM$KEY_DESC(.I)
	THEN
	    LEAVE BLK;

	! If no dup allowed, then fast delete can not be done since duplicate
	! key could not be detected.
	!

	IF .RAB[RAB$V_FDL]
	    AND
	    .IDX_DFN[IDX$V_DUPKEYS]
	THEN
	    LEAVE BLK;

	! Check that record includes secondary keys.
	!

	IF .REC_SZ<0, 16> LSSU .IDX_DFN[IDX$W_MINRECSZ]
	THEN
	    LEAVE BLK;

	IF .IFAB[IFB$B_PLG_VER] LSSU PLG$C_VER_3
	THEN
	    REC_ADDR = .S_REC_ADDR + .REC_OVHD
	ELSE
	    REC_ADDR = .IRAB[IRB$L_RECBUF];

	AP = 0;

	IF NOT RM$NULLKEY(.REC_ADDR)
	THEN
	    LEAVE BLK;

	BEGIN

	LOCAL
	    KEYBUF2,
	    S_BDB;

	S_BDB = .IRAB[IRB$L_CURBDB];
	IRAB[IRB$L_CURBDB] = 0;

	! Put key in key buffer 2 for input to RM$DELETE_SIDR
	!
	KEYBUF2 = KEYBUF_ADDR(2);

	! no record overhead / expanded format for RM$RECORD_KEY
	! 
	AP = 3;
	RM$RECORD_KEY(.KEYBUF2);
	RM$DELETE_SIDR();
	IRAB[IRB$L_CURBDB] = .S_BDB
	END;
	END
	END;

    ! Now that the SIDR's are taken care of no need for UDR.  RMS-11 would not
    ! compress UDR if any fast deletes were done and set the bit no compress
    ! which would allow a non_existent utility to delete these SIDR's in a batch
    ! mode.  If you get next on the secondary key, any SIDR entries found to
    ! point to a deleted record are marked and eventually deleted thus acc
    ! omplishing the same function.
    !
    RM$KEY_DESC(0);			! get back to primary key descriptor
    REC_ADDR = .S_REC_ADDR;
    AP = 1;

    IF .IRAB[IRB$L_NXTBDB] NEQ 0
    THEN
	BEGIN
	IRAB[IRB$L_NXTBDB] = 0;
	AP = 0;
	END;

    RETURN RM$DELUDR_NRP()

    END;


GLOBAL ROUTINE RM$DELETE_UDR : RL$DELETE_UDR =

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine deletes the user data record and creates a 2 (or 3) byte
!	RRV if the data record is in its original place.
!	NOTE - if AP<1,1>=0 record is only marked deleted if it is the last record
!	in the bucket and not physically removed so that a key value is
!	present in the bucket to avoid long chains of empty buckets.
!
! CALLING SEQUENCE:
!	RM$DELETE_UDR()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	BKT_ADDR		- address of bucket containing record to delete
!	REC_ADDR		- address of record to deleted
!	AP<0,1>			- if set, indicates 2 (or 3) byte RRV should be made at end of bucket
!	AP<1,1>			- if set, always delete the record pointed to
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	BKT_ADDR[BKT$W_FREESPACE] is updated
!	REC_ADDR = value of REC_ADDR on input plus size of record removed
!		   This value is needed by routine DEL_AND_TRY to calculate
!		   size of record deleted.
!
! ROUTINE VALUE:
!	Number of characters expanded by RM$EXPAND_KEYD.
!
! SIDE EFFECTS:
!	NONE
!
!--

    BEGIN

    BUILTIN
	AP;

    EXTERNAL REGISTER
	R_BKT_ADDR_STR,
	R_IDX_DFN_STR,
	R_IFAB_STR,
	R_IRAB_STR,
	R_REC_ADDR_STR;

    LOCAL
	CHARS_EXP,
	REC_OVHD,
	EOB	: REF BBLOCK,
	NEW_RA	: REF BBLOCK;

    BEGIN

    GLOBAL REGISTER
	R_REC_SIZE;

    EOB = .BKT_ADDR + .BKT_ADDR[BKT$W_FREESPACE];
    REC_SIZE = 0;				! flag primary data level
    REC_OVHD = RM$REC_OVHD();
    NEW_RA = .REC_OVHD + .REC_SIZE + .REC_ADDR;
    END;

    IF NOT .AP<1, 1>
    THEN
	BEGIN

	! Calculate the end of this record relative to the beginning of the
	! bucket.  If this is the last data record in the bucket, only mark
	! it deleted but do not physically remove as its key value is useful to
	! the file.  If the space is needed on a put or update where the record
	! is growing the record will be removed at that point.
	!

	IF .NEW_RA EQLA .EOB
	    OR
	    .NEW_RA[IRC$V_RRV]
	THEN
	    BEGIN
	    REC_ADDR[IRC$V_DELETED] = 1;
	    RETURN 0
	    END;
	END;					! of first block

    BEGIN

    LOCAL
	LAST_REC,
	ID;

    ID = IRC$_ID(REC_ADDR);			! save record id for RRV

    ! Determine if we are deleting last record...
    !

    IF .NEW_RA EQLA .EOB
      OR
	.NEW_RA[IRC$V_RRV]
    THEN
	LAST_REC = 1
    ELSE
	LAST_REC = 0;

    ! If the key is compressed, save in keybuffer5 the key and compression
    ! overhead of the record being deleted.
    !

    IF .IDX_DFN[IDX$V_KEY_COMPR]
      AND NOT .LAST_REC
    THEN
	BEGIN

	LOCAL
	    KEY_ADDR,
	    LENGTH;

	KEY_ADDR = .REC_ADDR + .REC_OVHD;
	LENGTH = .(.KEY_ADDR)<0,8> + 2;		! the key + compr ovhdr
	RM$MOVE ( .LENGTH,
		  .KEY_ADDR,
		  KEYBUF_ADDR(5) );
	END;

    ! remove entire record
    !
    RM$MOVE(.EOB - .NEW_RA, .NEW_RA, .REC_ADDR);
    BKT_ADDR[BKT$W_FREESPACE] = .BKT_ADDR[BKT$W_FREESPACE]
				 - (.NEW_RA - .REC_ADDR);

    ! If the key is compressed, we must recompress the key of the record
    ! that follows the deleted record, if it is not an RRV or the last record
    ! in the bucket.
    !

    IF .IDX_DFN[IDX$V_KEY_COMPR]
      AND NOT .LAST_REC
    THEN
	BEGIN

	GLOBAL REGISTER
	    R_REC_SIZE;

	REC_SIZE = 0;
	CHARS_EXP = RM$EXPAND_KEYD( KEYBUF_ADDR(5),
		    		.REC_ADDR + RM$REC_OVHD() );
	END
    ELSE
	CHARS_EXP = 0;

    ! If last record, set significant count to zero.
    !

    IF .LAST_REC
      AND .IFAB[IFB$B_PLG_VER] EQLU PLG$C_VER_3
    THEN
	(.BKT_ADDR + .IDX_DFN[IDX$B_DATBKTSZ] * 512 - 2)<0,8> = 0;

    REC_ADDR = .NEW_RA;

    ! Do not make an RRV when deleting records in a PLG 3 file.
    ! (Note that RRVs are always placed at the end of the data bucket.)
    !
    IF .IFAB[IFB$B_PLG_VER] LSSU PLG$C_VER_3
    THEN
	IF .AP
	THEN 					! if RRV necessary,
	    BEGIN
	    EOB = .BKT_ADDR + .BKT_ADDR[BKT$W_FREESPACE];	! pter to freespace

	    ! Set control bits and id in deleted RRV
	    !
	    EOB[IRC$B_CONTROL] = IRC$M_DELETED OR IRC$M_NOPTRSZ OR IRC$M_RRV;
	    EOB[IRC$B_ID] = .ID;

	    BKT_ADDR[BKT$W_FREESPACE] = .BKT_ADDR[BKT$W_FREESPACE] + 2;

	    END;

    END;					! of second local block

    RETURN .CHARS_EXP;

    END;

END

ELUDOM
