
MODULE RM3PROBE (LANGUAGE (BLISS32) ,
		IDENT = 'V03-001'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:	RMS32 Index Sequential File Organization
!
! ABSTRACT:
!                Subroutines to probe large structures
!
!
! ENVIRONMENT:
!
!		VAX/VMS Operating System
!
!--

!
! AUTHOR:        Wendy Koenig     CREATION DATE:        	11-JUL-78  11:27
!
!
! MODIFIED BY:
!
!	V03-001	KPL0001		Peter Lieberwirth	22-Mar-1982
!		Change probe length to 512 from 1024 since 1024 could hit
!		first page of three, last page of three, and omit middle.
!
!	V02-004	REFORMAT	Maria del C. Nasr	24-Jul-1980
!
!
!*****

LIBRARY 'RMSLIB:RMS';

REQUIRE 'RMSSRC:RMSIDXDEF';

!
! define default psects for code
!

PSECT
    CODE = $L$PROBE3(PSECT_ATTR),
    PLIT = $L$PROBE3(PSECT_ATTR);

!
! Linkages
!

LINKAGE
    L_NOREAD_LONG,
    L_NOWRT_LONG;



GLOBAL ROUTINE RM$NOREAD_LONG (SIZE, ADDR, MODE) : RL$NOREAD_LONG =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	subroutine to perform a long or short probe
!
! CALLING SEQUENCE:
!	bsbw rm$noread_long (size,addr,mode)
!
! INPUT PARAMETERS:
!	size of structure to be probed
!	address of structure to be probed
!	mode to do probing in
!
! IMPLICIT INPUTS:
!	none
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	0 if structure is readable
!	1 if structure is NOT readable
!		(values are such since action is taken if the structure
!		is not readable and so the code looks cleaner)
!
! SIDE EFFECTS:
!	none
!
!--

    BEGIN

    LOCAL
	LEN,
	START;

    IF .SIZE<0, 16> LEQU 512
    THEN
	RETURN

	    IF PROBER(MODE, SIZE, .ADDR)
	    THEN
		0
	    ELSE
		1;

    ! need to do long probe
    !
    START = .ADDR;
    LEN = .SIZE;

    DO
	BEGIN

	IF NOT PROBER(MODE, LEN, .START)
	THEN
	    RETURN 1;

	START = .START + 512;
	LEN = .LEN - 512;
	END
    UNTIL .LEN LSS 1;

    RETURN 0

    END;


GLOBAL ROUTINE RM$NOWRT_LONG (SIZE, ADDR, MODE) : RL$NOWRT_LONG =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	subroutine to perform a long or short probe
!
! CALLING SEQUENCE:
!	bsbw rm$nowrite_long (size,addr,mode)
!
! INPUT PARAMETERS:
!	size of structure to be probed
!	address of structure to be probed
!	mode to do probing in
!
! IMPLICIT INPUTS:
!	none
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	0 if structure is writeable
!	1 if structure is NOT writeable
!		(values are such since action is taken if the structure
!		is not writeable and so the code looks cleaner)
!
! SIDE EFFECTS:
!	none
!
!--

    BEGIN

    LOCAL
	LEN,
	START;

    IF .SIZE<0, 16> LEQU 512
    THEN
	RETURN

	    IF PROBEW(MODE, SIZE, .ADDR)
	    THEN
		0
	    ELSE
		1;

    ! need to do long probe
    !
    LEN = .SIZE;
    START = .ADDR;

    DO
	BEGIN

	IF NOT PROBEW(MODE, LEN, .START)
	THEN
	    RETURN 1;

	START = .START + 512;
	LEN = .LEN - 512;
	END
    UNTIL .LEN LSS 1;

    RETURN 0

    END;

END

ELUDOM
