
MODULE RM3PUT (LANGUAGE (BLISS32) ,
		IDENT = 'V03-002'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
!
! FACILITY:	RMS32 Index Sequential File Organization
!
! ABSTRACT:
!                The high level put code
!
!
! ENVIRONMENT:
!
!		VAX/VMS Operating System
!
!--

!
! AUTHOR:        Wendy Koenig     CREATION DATE:        	23-MAY-78  13:18
!
! MODIFIED BY:
!
!	V03-002	TMK0002		Todd M. Katz		24-Mar-1982
!		Change all references to the keybuffers, so that they use
!		the macro KEYBUF_ADDR.
!
!	V03-001	TMK0001		Todd M. Katz		14-Feb-1982
!		Pass the address of RECSZ to RM$INSERT_UDR, since this
!		arguement is both an input and output parameter. This is
!		necessary because the value of RECSZ may change within the
!		routine for prologue 3 files with compressed primary keys.
!		If the record to be inserted follows a deleted record with key 
!		still present, and there is no room in the bucket for it, the 
!		key is squished out, and the record to be inserted must be
!		repacked (ie its size may change). If there is still no room
!		for the record, this size must be returned to RECSZ so that
!		the bucket splitting, and subsequent insertion, may be done 
!		correctly.
!
!	V02-028	KPL0002		Peter Lieberwirth	23-Nov-1981
!		Return ROP error on put to EOF on a secondary key.
!
!	V02-027	KPL0001		Peter Lieberwirth	 5-Nov-1981
!		Include support for PUT to EOF.
!
!	V02-026	MCN0012		Maria del C. Nasr	25-Jul-1981
!		Modify RM$PUT3B, and change parameter list of
!		RM$PCKDEC_CHECK to support key type conversion.
!
!	V02-025	PSK0007		Paulina S. Knibbe	18-Jul-1981
!		Back out part of PSK0006 because of change in order
!		of processing.
!
!	V02-024	MCN0011		Maria del C. Nasr	13-Jul-1981
!		Modify RM$UPDATE_IF to deal with prologue 3 records.
!
!	V02-023	PSK0006		Paulina S. Knibbe	13-Jun-1981
!		Make changes to support updating an index key when
!		necessary in file with compressed indexes
!
!	V02-022	MCN0010		Maria del C. Nasr	15-May-1981
!		Make changes to be able to $PUT prologue 3 version records.
!
!	V02-021	MCN0006		Maria del C. Nasr	16-Mar-1981
!		Increase size of record identifier to a word in NRP.
!
!	V03-020	CDS0001		C D Saether		7-Feb-1981	18:30
!		Fix error path on dup and update if errors.
!
!	V02-019	REFORMAT	Maria del C. Nasr	24-Jul-1980
!
!	X0015	PSK0005		P S KNIBBE	18-DEC-79	18:30
!		check that packed decimal keys are legal packed decimal strings
!
! REVISION HISTORY:
!
!   X0002	Wendy Koenig,	 	21-SEP-78  16:48
!		zero out the nrp list once before allocating any buckets
!
!   X0003	Wendy Koenig,	 	26-SEP-78  13:09
!		don't want to return w/ a current record
!
!   X0004	Wendy Koenig,	 	28-SEP-78  9:02
!		update_rrv_2 will not return a value anymore
!
!   X0005	Christian Saether, 	12-OCT-78  14:07
!		modifications for UPDATE
!
!   X0006	Wendy Koenig,	 	24-OCT-78  14:02
!		make changes caused by sharing conventions
!
!   X0007	Wendy Koenig,	 	27-OCT-78  15:10
!		implement uif
!
!   X0008	Christian Saether, 	9-NOV-78  14:41
!		turn off unlock_rp when manual unlocking
!
!   X0009	Wendy Koenig,	 	13-DEC-78  14:02
!		have to clean up if fac error (uif case)
!
!   X0010	Christian Saether, 	14-JAN-79  17:00
!		do not use lockabove when root is at level 1 - causes deadlock
!
!   X0011	Christian Saether, 	15-JAN-79  17:53
!		take lockabove decision out of PUT code
!
!   X0012	Wendy Koenig,	 	9-FEB-79  14:25
!		unlock current record before doing anything else
!		also change update_if code to lock record in all cases
!
!   X0013	Christian Saether, 	11-FEB-79  19:22
!		fix record unlocking logic for update if
!		affect rm$put3b and rm$update_if
!
!   X0014	Christian Saether,	  1-july-79  11:15
!		take out clearing IRB$V_DUP (is now in rm$put_upd_chks)
!
!   X0016	Christian Saether,	  1-Jan-80  21:20
!		move check for id's available to here from rm$insert_udr because
!	   	a new id is only required on a put, and insert_udr is also called
!		on update.
!
!   X0017	Paulina Knibbe,		 22-FEB-80 12:00
!		Fix packed decimal check
!
!   X0018	Paulina Knibbe,		 28-FEB-80 17:00
!		Change packed decimal check to look at sign digit correctly
!
!*****
!

LIBRARY 'RMSLIB:RMS';

REQUIRE 'RMSSRC:RMSIDXDEF';

! define default psects for code
!

PSECT
    CODE = $$RMSPUT3(PSECT_ATTR),
    PLIT = $$RMSPUT3(PSECT_ATTR);

! define a local linkage
!

MACRO
    L_UPDATE_IF =
	RL$UPDATE_IF = JSB() : GLOBAL(COMMON_RABREG,R_REC_ADDR,R_IDX_DFN) %;

! Linkages
!

LINKAGE
    L_BKT_SORT,
    L_CLEAN_BDB,
    L_COMPARE_KEY,
    L_CONFIRM_EOF,
    L_CSEARCH_TREE,
    L_GETBKT,
    L_INS_ALL_SIDR,
    L_INSERT_UDR,
    L_INSS_OR_IDX,
    L_KEY_TYPE_CONV,
    L_LOCK,
    L_PCKDEC_CHECK,
    L_MAKE_INDEX,
    L_PACK_REC,
    L_PUT3B,
    L_PUT_UPD_CHKS,
    L_PUT_UPD_ERR,
    L_PUT_UPD_FIN,
    L_PUT_UPD_SPL,
    L_RECORD_KEY,
    L_REC_OVHD,
    L_RLSBKT,
    L_GETNEXT_REC,
    L_RECORD_VBN,
    L_QUERY_LCK,
    L_UNLOCK,
    L_UPDATE3B,
    L_UPDATE_IF;

! Forward Routines
!

FORWARD ROUTINE
    RM$CONFIRM_EOF	: RL$CONFIRM_EOF,
    RM$UPDATE_IF	: RL$UPDATE_IF,
    RM$PCKDEC_CHECK	: RL$PCKDEC_CHECK,
    RM$PUT3B		: RL$PUT3B;

! External Routines
!

EXTERNAL ROUTINE
    RM$BKT_SORT		: RL$BKT_SORT,
    RM$CLEAN_BDB	: RL$CLEAN_BDB,
    RM$COMPARE_KEY	: RL$COMPARE_KEY,
    RM$CSEARCH_TREE	: RL$CSEARCH_TREE,
    RM$GETBKT		: RL$GETBKT,
    RM$INS_ALL_SIDR	: RL$INS_ALL_SIDR,
    RM$INSERT_UDR	: RL$INSERT_UDR,
    RM$INSS_OR_IDX	: RL$INSS_OR_IDX,
    RM$KEY_TYPE_CONV	: RL$KEY_TYPE_CONV NOVALUE,
    RM$LOCK		: RL$LOCK,
    RM$MAKE_INDEX	: RL$MAKE_INDEX,
    RM$PACK_REC		: RL$PACK_REC,
    RM$PUT_UPD_ERR	: RL$PUT_UPD_ERR NOVALUE,
    RM$PUT_UPD_CHKS	: RL$PUT_UPD_CHKS,
    RM$PUT_UPD_FIN	: RL$PUT_UPD_FIN,
    RM$PUT_UPD_SPL	: RL$PUT_UPD_SPL,
    RM$RECORD_KEY	: RL$RECORD_KEY,
    RM$REC_OVHD		: RL$REC_OVHD,
    RM$RLSBKT		: RL$RLSBKT,
    RM$GETNEXT_REC	: RL$GETNEXT_REC,
    RM$RECORD_VBN	: RL$RECORD_VBN,
    RM$QUERY_LCK	: RL$QUERY_LCK,
    RM$UNLOCK		: RL$UNLOCK,
    RM$UPDATE3B		: RL$UPDATE3B;

GLOBAL ROUTINE RM$PUT3B : RL$PUT3B =

!++
!
! FUNCTIONAL DESCRIPTION:
!	 high level code for put
!
! CALLING SEQUENCE:
!	bsbw rm$put3b
!
! INPUT PARAMETERS:
!	none
!
! IMPLICIT INPUTS:
!	RAB, IRAB, IFAB, IMPURE
!	in RAB --
!		rbf, rsz, rac
!	in IRAB --
!		find_last, puts_last, ifab address
!		if puts_last is set, keybuf contains the key of the last rec. put
!		eof bit passed from connect.
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	success usually
!	fac, iop, rbf, rsz, seq, dup, rvu, any hard i/o errors, etc.
!	success codes may be ok_dup  (dups seen) and ok_idx
!		(idx may not have updated optimally)
!
! SIDE EFFECTS:
!	if success of any type, the record has been put
!	if success ( but not ok_idx) then index has been updated
!	if rvu error, the record has been put and the index has probably
!		been updated, but some rrv has not been updated correctly
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_RAB_STR;

    GLOBAL REGISTER
	R_IDX_DFN_STR,
	R_REC_ADDR_STR;

    BUILTIN
	AP,
	TESTBITSC;

    LABEL
	BLK;

    ! do some validity checks and initialization
    !
    IRAB[IRB$V_UPDATE] = 0;

    IF TESTBITSC(IRAB[IRB$V_FIND_LAST])
    THEN
	IRAB[IRB$V_PUTS_LAST] = 0;

    ! unlock the current record
    !

    IF TESTBITSC(IRAB[IRB$V_UNLOCK_RP])
    THEN
	RM$UNLOCK(.BBLOCK[.IRAB[IRB$L_NRP_PTR], NRP$L_RP_VBN],
	    .BBLOCK[.IRAB[IRB$L_NRP_PTR], NRP$W_RP_ID]);

    ! invalidate the current record pointer information (always)
    !
    BBLOCK[.IRAB[IRB$L_NRP_PTR], NRP$L_RP_VBN] = 0;
    BBLOCK[.IRAB[IRB$L_NRP_PTR], NRP$W_RP_ID] = 0;

    RETURN_ON_ERROR (RM$PUT_UPD_CHKS());

    ! make sure the rac is valid -- only seq and key allowed
    !
    ASSUME_C(RAB$C_KEY, 1);

    IF .RAB[RAB$B_RAC] GTR RAB$C_KEY
    THEN
	RETURN RMSERR(RAC);

    ! is seq access, make sure the key > or = to the previous key,  move the
    ! key into keybuffer 1 for next time invalidate the next record pointer
    ! information
    !

    IF .RAB[RAB$B_RAC] EQL RAB$C_SEQ
    THEN
	BEGIN

	IF .IRAB[IRB$V_PUTS_LAST]
	THEN
	    BEGIN

	    LOCAL
		KEY_ADDR;

	    ! In prologue 3 files, we must convert the key in the key buffer
	    ! back to its "normal" type to be able to compare against the
	    ! user's buffer.
	    !

	    IF .IFAB[IFB$B_PLG_VER] LSSU PLG$C_VER_3
	    THEN
	   	KEY_ADDR = KEYBUF_ADDR(1)
	    ELSE
		BEGIN
		KEY_ADDR = KEYBUF_ADDR(5);
		RM$KEY_TYPE_CONV ( KEYBUF_ADDR(1),
				   .KEY_ADDR,
				   1 );
		END;

	    AP = 2;

	    IF RM$COMPARE_KEY ( .RAB[RAB$L_RBF],
				.KEY_ADDR,
				.IDX_DFN[IDX$B_KEYSZ] ) GTR 0    
	    THEN
		RETURN RMSERR(SEQ);

	    END;

	REC_ADDR = .RAB[RAB$L_RBF];
	AP = 3;				! no overhead and expanded
	RM$RECORD_KEY (KEYBUF_ADDR(1));
	IRAB[IRB$V_PUTS_LAST] = 1;
	BBLOCK[.IRAB[IRB$L_NRP_PTR], NRP$L_VBN] = 0;
	BBLOCK[.IRAB[IRB$L_NRP_PTR], NRP$W_ID] = 0;
	BBLOCK[.IRAB[IRB$L_NRP_PTR], NRP$B_FLAGS] = 0;
	BBLOCK[.IRAB[IRB$L_NRP_PTR], NRP$W_DUP_POS] = 0;
	END
    ELSE
	IRAB[IRB$V_PUTS_LAST] = 0;

    ! insert record in primary index set up for call to csearch_tree
    !
    IRAB[IRB$L_CURBDB] = 0;
    IRAB[IRB$B_STOPLEVEL] = 0;
    IRAB[IRB$B_KEYSZ] = .IDX_DFN[IDX$B_KEYSZ];
    IRAB[IRB$B_SRCHFLAGS] = IRB$M_POSINSERT;
    IRAB[IRB$B_SPL_BITS] = 0;
    REC_ADDR = .RAB[RAB$L_RBF];
    AP = 3;				! no overhead and expanded record

    ! move record's key into keybuffer 2
    !
    RM$RECORD_KEY (KEYBUF_ADDR(2));

    ! move record's key into keybuffer 3
    !
    CH$MOVE (.IDX_DFN[IDX$B_KEYSZ], KEYBUF_ADDR(2), KEYBUF_ADDR(3));

    ! If the key is a packed decimal string, or if there is more than one
    ! segment in the key, call packed decimal validation routine.
    !

    IF .IDX_DFN[IDX$B_DATATYPE] EQL IDX$C_PACKED
      OR (.IDX_DFN[IDX$B_SEGMENTS] GTR 1
	AND .IFAB[IFB$B_PLG_VER] EQLU PLG$C_VER_3)
    THEN

	RETURN_ON_ERROR (RM$PCKDEC_CHECK( .RAB[RAB$L_RBF], 1 ));

    BEGIN

    LOCAL
	STATUS;

    STATUS = RM$CSEARCH_TREE();

    IF .STATUS<0, 16> EQL RMSERR(IDX)
    THEN
	BEGIN

	RETURN_ON_ERROR (RM$MAKE_INDEX());

	STATUS = RM$CSEARCH_TREE();
	END;

    IF NOT .STATUS
    THEN
	RETURN .STATUS;

    END;					! { of block defining status }

    ! If EOF bit is set, verify that no record exists after the insert position
    ! which was just determined by CSEARCH_TREE.  This is a best guess in a
    ! shared environment, but it will have to do.  Can't keep the bucket
    ! containing the insert position locked while scanning horizontally
    ! rightward because an RRV update could keep a rightward bucket locked and
    ! be trying to access our bucket.  This is deadlock.  To avoid this,
    ! give up the lock on our bucket, and then re-position if everything checks
    ! out ok.
    !
    ! (Note: IRB$V_EOF is turned off after the first PUT or any random GET.
    ! Sequential GETs merely return RMS$_EOF until the IRB$V_EOF bit is off.)
    !
    IF .IRAB[ IRB$V_EOF ]
    THEN
	BEGIN

	LOCAL
	    STATUS;

	! Save the VBN of the bucket containing insert position.  If we have to
	! give it up, we can optimize re-access by knowing this VBN.  Use
	! GETBKT to reaquire the VBN saved in MIDX_TMP3 if CONFIRM_EOF released
	! the bucket.  Then, point CURBDB and BKT_ADDR to the output of GETBKT
	! and initialize REC_ADDR to the first record in the bucket and call
	! CSEARCH_TREE. If CONFIRM_EOF did not release the bucket merely point
	! REC_ADDR to the first record in the bucket and call CSEARCH_TREE.
	!
	! IRAB[ IRB$L_MIDX_TMP3 ] = BBLOCK[.IRAB[ IRB$L_CURBDB ], BDB$L_VBN];

	! Actually check to see if there is another record following this
	! position.
	!
	IF NOT (STATUS = RM$CONFIRM_EOF() )
	THEN
	    RETURN .STATUS
	ELSE
	    BEGIN

	    ! Must reposition (assumption is search context is still good)
	    !
	    IF NOT (STATUS = RM$CSEARCH_TREE() )
	    THEN
		RETURN .STATUS;

	    ! Turn off the flag:
	    !
	    IRAB [IRB$V_EOF ] = 0;

	    END;

	END;


    ! make sure that we didn't see any duplicates if duplicates aren't allowed
    ! if we did see them and they are allowed, set the dup bit
    !

    IF .IRAB[IRB$V_DUPS_SEEN]
    THEN
	BEGIN

	IF NOT .IDX_DFN[IDX$V_DUPKEYS]
	THEN
	    BEGIN

	    GLOBAL REGISTER
		R_BDB_STR;

	    ! we're going to have to do an update since the record exists
	    ! and duplicates aren't allowed make sure the user approves of the
	    ! sudden switch of plans
	    !

	    IF NOT .RAB[RAB$V_UIF]
	    THEN
		BEGIN
		RM$CLEAN_BDB();
		RETURN RMSERR(DUP);
		END;

	    ! now we can do the update if but the user must allow updates
	    !

	    IF NOT .IFAB[IFB$V_UPD]
	    THEN
		BEGIN
		RM$CLEAN_BDB();
		RETURN RMSERR(FAC);
		END;

	    RETURN_ON_ERROR (RM$UPDATE_IF(),RM$CLEAN_BDB());

	    BEGIN

	    LOCAL
		ST;

	    ST = RM$UPDATE3B();

	    IF NOT TESTBITSC(IRAB[IRB$V_UNLOCK_RP])
	    THEN
		BBLOCK[.IRAB[IRB$L_NRP_PTR], NRP$L_RP_VBN] = 0;

	    RETURN .ST;

	    END;				! of local ST
	    END;

	IRAB[IRB$V_DUP] = 1
	END;

    ! set up BDB and BKT_ADDR for INSERT_UDR
    !
    BEGIN

    LOCAL
	RECSZ;

    GLOBAL REGISTER
	COMMON_IO_STR;

    BDB = .IRAB[IRB$L_CURBDB];
    BKT_ADDR = .BDB[BDB$L_ADDR];

    ! Calculate real record size, depending on prologue version.  If a version
    ! 3 file, we must pack the record into compressed form to find its size.
    ! Check to see if an id is available - if not, will have to split bucket
    !

BLK :
    BEGIN

    IF .IFAB[IFB$B_PLG_VER] LSSU PLG$C_VER_3
    THEN
	BEGIN
	RECSZ = .RAB[RAB$W_RSZ] + IRC$C_FIXOVHDSZ;

	IF .IFAB[IFB$B_RFMORG] NEQ FAB$C_FIX
	THEN
	    RECSZ = .RECSZ + IRC$C_DATSZFLD;

	IF .BKT_ADDR[BKT$B_NXTRECID] EQL 0
	  OR
	  .BKT_ADDR[BKT$B_NXTRECID] GTRU .BKT_ADDR[BKT$B_LSTRECID]
	THEN

	    IF NOT RM$BKT_SORT(.BKT_ADDR)
	    THEN
		BEGIN

		! zero nxtrecid to signal put_upd_spl that this is a split because
		! no id's are available.  note that there may not be enough room
		! for the record either (it hasn't been checked) put put_upd_spl
		! will handle it. irb$w_pos_ins must be set to split (normally done
		! by insert_udr).
		!
		BKT_ADDR[BKT$B_NXTRECID] = 0;
		IRAB[IRB$W_POS_INS] = .REC_ADDR - .BKT_ADDR;
		RETURN_ON_ERROR (RM$PUT_UPD_SPL(.RECSZ),
			BEGIN
			IRAB[IRB$V_UPDATE] = 0;
			RM$PUT_UPD_ERR()
			END);

		LEAVE BLK;			! skip the insert_udr call below

		END;
	END

    ELSE
	BEGIN
	RECSZ = RM$PACK_REC();
	RECSZ = .RECSZ + IRC$C_FIXOVHSZ3;

	! All version 3 files have a record size, except fixed length records
	! that have not been compressed
	!
	IF .IFAB[IFB$B_RFMORG] NEQ FAB$C_FIX
	  OR (.IFAB[IFB$B_RFMORG] EQL FAB$C_FIX
	    AND .IDX_DFN[IDX$B_DATBKTYP] NEQU IDX$C_NCMPNCMP)
	THEN
	    RECSZ = .RECSZ + IRC$C_DATSZFLD;

	IF .BKT_ADDR[BKT$W_NXTRECID] EQL 0
	THEN
	    BEGIN
	    IRAB[IRB$W_POS_INS] = .REC_ADDR - .BKT_ADDR;
	    RETURN_ON_ERROR (RM$PUT_UPD_SPL(.RECSZ),
			BEGIN
			IRAB[IRB$V_UPDATE] = 0;
			RM$PUT_UPD_ERR()
			END);
	    LEAVE BLK;			! skip the insert_udr call below
	    END;
	END;
	    

    ! If id's are available (hopefully the normal case), or the bucket sort
    ! succeeded in finding some, then attempt to insert the record.  If
    ! that fails (because no room is available in the bucket), then we also
    ! need to split the bucket.
    !

    IF NOT RM$INSERT_UDR(RECSZ)
    THEN

	RETURN_ON_ERROR (RM$PUT_UPD_SPL(.RECSZ),
	    BEGIN
	    IRAB[IRB$V_UPDATE] = 0;
	    RM$PUT_UPD_ERR()
	    END);

    END;					! of block BLK

    ! lock the record
    !

    RETURN_ON_ERROR (RM$LOCK(.BBLOCK[.IRAB[IRB$L_NRP_PTR], NRP$L_RP_VBN],
	    .BBLOCK[.IRAB[IRB$L_NRP_PTR], NRP$W_RP_ID]),
	BEGIN
	IRAB[IRB$V_UPDATE] = 0;
	RM$PUT_UPD_ERR()
	END);

    ! this bit refers to idx upd, not $update
    !

    IF TESTBITSC (IRAB[IRB$V_UPDATE])
    THEN

	! a data level split has occured so the index must be updated
	! the index must also be updated if we have inserted a new
	! key into the range between two buckets which changes the
	! virtual range between them
	!
	BEGIN
	IRAB[IRB$B_STOPLEVEL] = 1;
	IRAB[IRB$B_SRCHFLAGS] = IRB$M_POSINSERT;

	IF NOT (RAB[RAB$L_STV] = RM$INSS_OR_IDX())
	THEN
	    IRAB[IRB$V_IDX_ERR] = 1;

	END
    ELSE

	! the data level did not split or no index update is required release
	! any level above that may be locked
	!
	BEGIN

	IF (BDB = .IRAB[IRB$L_LOCK_BDB]) NEQ 0
	THEN
	    BEGIN
	    RM$RLSBKT(0);
	    IRAB[IRB$L_LOCK_BDB] = 0;
	    END;

	BDB = .IRAB[IRB$L_CURBDB];
	IRAB[IRB$L_CURBDB] = 0;

	! note that the original bucket may have been written with a keep lock
	! or may not have been released at all yet, depending on the path taken
	! to get here.  this is assuming that we do not want to force a write of
	! the bucket if no split has taken place to take advantage of deferred
	! write. If this notion changes, so must this code.
	!

	RETURN_ON_ERROR (RM$RLSBKT(0),RM$PUT_UPD_ERR());

	END;

    ! Insert all of the alternate keys now
    !
    RETURN_ON_ERROR (RM$INS_ALL_SIDR(),	RM$PUT_UPD_ERR());

    RETURN RM$PUT_UPD_FIN();

    END						! of block defining IOREG
    END;					! { end of rm$put3b }


GLOBAL ROUTINE RM$UPDATE_IF : RL$UPDATE_IF =

!++
!
! FUNCTIONAL DESCRIPTION:
!	do all the setup neccessary to do an update out of put
!
! CALLING SEQUENCE:
!	bsbw rm$update_if
!
! INPUT PARAMETERS:
!	none
!
! IMPLICIT INPUTS:
!	rec_addr -- record immediately after the one we wanted
!	curbdb -- corresponding to rec_addr
!	some bits, like unlock_rp, noreclk, ulk
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	rlk, dme ( from rm$lock), suc
!
! SIDE EFFECTS:
!	none
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_RAB_STR,
	R_IDX_DFN_STR,
	R_REC_ADDR_STR;

    ! now we actually do the uif
    !
    BEGIN

    LOCAL
	TMP,
	LAST;

    TMP = .REC_ADDR;
    REC_ADDR = .BBLOCK[.IRAB[IRB$L_CURBDB], BDB$L_ADDR] + BKT$C_OVERHDSZ;
    LAST = .REC_ADDR;

    WHILE .REC_ADDR LSSU .TMP
    DO
	BEGIN
	LAST = .REC_ADDR;
	RM$GETNEXT_REC();
	END;

    REC_ADDR = .LAST;
    END;

    ! now positioned on record to be updated
    !
    BEGIN

    BUILTIN
	AP;

    REGISTER
	ID = 2;

    LOCAL
	VBN;

    AP = 3;
    VBN = RM$RECORD_VBN();
    BBLOCK[.IRAB[IRB$L_NRP_PTR], NRP$L_RP_VBN] = .VBN;

    IF .IFAB[IFB$B_PLG_VER] LSSU PLG$C_VER_3
    THEN
	ID = .REC_ADDR[IRC$B_RRV_ID]
    ELSE
	ID = .REC_ADDR[IRC$W_RRV_ID];

    BBLOCK[.IRAB[IRB$L_NRP_PTR], NRP$W_RP_ID] = .ID;

    ! make sure it's not locked and then lock it if necessary
    !

    IF NOT .IFAB[IFB$V_NORECLK]
    THEN
	BEGIN

	LOCAL
	    STATUS;

	STATUS = RM$LOCK(.VBN, .ID);

	IF NOT .STATUS
	THEN
	    RETURN .STATUS;

	IRAB[IRB$V_UNLOCK_RP] = 1;

	! unlock_rp will be turned off to indicate that record was already
	! locked before this put-update if operation, hence manually locked,
	! therefore we do not wish to unlock it on errors
	!

	IF .STATUS<0, 16> EQLU RMSSUC(OK_ALK)
	THEN
	    IRAB[IRB$V_UNLOCK_RP] = 0;

	END;				! {end of there is locking going on }

    END;				! {end of definitions of vbn and id }
    RETURN 1;

    END;


GLOBAL ROUTINE RM$PCKDEC_CHECK ( INPUT_KEY, INPUT_FLAG ) : RL$PCKDEC_CHECK =

!++
!
!   FUNCTIONAL DESCRIPTION
!	This routine checks verifies that a packed decimal key is valid.
!	For prologue 1 and 2 files, the input is assumed to be keybuffer 2.
!	For prologue 3 files, the input could be either a key buffer, or a
!	record buffer, indicated by the INPUT_FLAG parameter.  And since there
!	can be segments of different data types, we have to examine each
!	segment and validate those that are packed decimal strings.
!
!   CALLING SEQUENCE
!	RM$PCKDEC_CHECK (INPUT_KEY, INPUT_FLAG)
!
!   INPUT PARAMETERS
!	INPUT_KEY - a key buffer or record buffer containing key to be checked
!	INPUT_FLAG - 0 indicates a key buffer
!		     1 indicates a record buffer
!
!    IMPLICIT INPUT
!	IFAB address - IFB$B_PLG_VER, IFB$W_KBUFSZ
!	IRAB address - IRB$B_KEYSZ - size of key ( number of bytes )
!	IDX_DFN address - IDX$W_POSITION, IDX$B_SEGMENTS
!
!   ROUTINE_VALUE
!	RMS$_SUC - string is a correct packed decimal string
!	RMS$_KEY - string is not a packed decimal string
!	RMS$_KSZ - size > 31 digits
!
!   SIDE EFFECTS
!	none
!
!--

    BEGIN

    EXTERNAL REGISTER
	R_IDX_DFN_STR,
	R_IFAB_STR,
	R_IRAB_STR;

    LOCAL
	KEYBUF	: REF BLOCK [, BYTE];

    MACRO
	LOW_MASK = 0,4,0 %,			! low nibble - digit (or sign)
	HIGH_MASK = 4,4,0 %;			! high nibble - digit

    IF .IFAB[IFB$B_PLG_VER] LSSU PLG$C_VER_3
    THEN
	BEGIN
	KEYBUF = KEYBUF_ADDR(2);

	! check actual digits - each must be less than nine
	!

	INCR I FROM 0 TO (.IRAB[IRB$B_KEYSZ] - 2) DO
	    BEGIN

	    IF (.KEYBUF[.I, HIGH_MASK] GTRU 9)
	      OR
	        (.KEYBUF[.I, LOW_MASK] GTRU 9)
	    THEN
		RETURN RMSERR(KEY);

	    END;

	! check last byte : sign,digit
	!

	IF (.KEYBUF[(.IRAB[IRB$B_KEYSZ] - 1), HIGH_MASK] GTRU 9)
	  OR
	    (.KEYBUF[(.IRAB[IRB$B_KEYSZ] - 1), LOW_MASK] LEQU 9)
	THEN
	    RETURN RMSERR(KEY);
	END

    ELSE
	BEGIN

	LOCAL
	    SEG_INFO,
	    NUM_SEG,
	    LENGTH,
	    TYPE;

	SEG_INFO = IDX_DFN[IDX$W_POSITION];
	NUM_SEG = .IDX_DFN[IDX$B_SEGMENTS];
	LENGTH = 0;

	DO
	    BEGIN

	    ! Determine segment address depending if it is a key buffer
	    ! or record buffer
	    !

	    IF .INPUT_FLAG
	    THEN
		KEYBUF = .INPUT_KEY + .(.SEG_INFO)<0,16>
	    ELSE
		KEYBUF = .INPUT_KEY + .LENGTH;

	    SEG_INFO = .SEG_INFO + 2;
	    LENGTH = .(.SEG_INFO)<0,8>;
	    SEG_INFO = .SEG_INFO + 1;
	    TYPE = .(.SEG_INFO)<0,8>;
	    SEG_INFO = .SEG_INFO + 1;

	    ! If segment is packed decimal type, then validate it.
	    !

	    IF .TYPE EQLU IDX$C_PACKED
	    THEN
		BEGIN

		! check actual digits - each must be less than nine
		!

		INCR I FROM 0 TO (.LENGTH - 2) DO
		    BEGIN

		    IF (.KEYBUF[.I, HIGH_MASK] GTRU 9)
		      OR
			(.KEYBUF[.I, LOW_MASK] GTRU 9)
		    THEN
			RETURN RMSERR(KEY);

		    END;

		! check last byte : sign,digit
		!

		IF (.KEYBUF[(.LENGTH - 1), HIGH_MASK] GTRU 9)
		  OR
		    (.KEYBUF[(.LENGTH - 1), LOW_MASK] LEQU 9) 
		THEN
		    RETURN RMSERR(KEY);
		END;

	    NUM_SEG = .NUM_SEG - 1;
	    END

	UNTIL .NUM_SEG EQL 0;
	END;

    RETURN RMSSUC();

    END;

GLOBAL ROUTINE RM$CONFIRM_EOF : RL$CONFIRM_EOF =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	On position to EOF, while doing the first PUT, sequentially scan
!	the file to verify there are no non-deleted records following the
!	position of insert.
!
! CALLING SEQUENCE:
!	RM$CONFIRM_EOF()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	IRB$L_CURBDB	-	points to bucket with alleged high record
!	REC_ADDR	-	points to position of insert
!	IDX_DFN		-	has data bucket size
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	success if record is really EOF record, else SEQ error
!	ROP error if secondary key selected
!
! SIDE EFFECTS:
!	BKT_ADDR, REC_ADDR destroyed
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_RAB_STR,
	R_REC_ADDR_STR,
	R_IDX_DFN_STR;

    GLOBAL REGISTER
	COMMON_IO_STR;


    ! position to EOF not supported for secondary keys...
    !
    IF .IDX_DFN[ IDX$B_KEYREF ] NEQ 0
    THEN
	RETURN RMSERR(ROP);


    ! Get bucket address
    !
    BDB = .IRAB[ IRB$L_CURBDB ];
    BKT_ADDR = .BDB[ BDB$L_ADDR ];


    DO

	! Scan this and subsequent data level buckets in the horizontal
	! chain to prove there are no records following the one just PUT.
	!
	BEGIN

	LOCAL
	    NEXT_BUCKET,
	    EOB;


	! If not at primary data level there's a bad bug
	!
	IF .BKT_ADDR[ BKT$B_LEVEL ] NEQ 0
	THEN
	    BUG_CHECK;

	! Point to end of bucket
	!
	EOB = .BKT_ADDR + .BKT_ADDR[ BKT$W_FREESPACE ];


	! look through the bucket for records.
	!
	WHILE .REC_ADDR LSSA .EOB
	DO
	    BEGIN

	    GLOBAL REGISTER
		R_REC_SIZE;

	    ! If we find a real record then we didn't put at EOF and its an
	    ! error.
	    !
	    IF (NOT .REC_ADDR[IRC$V_DELETED] AND NOT .REC_ADDR[IRC$V_RRV])
	    THEN

		BEGIN

		! A real live record was found after the one just put, which
		! was supposed to have been at EOF.  Clean up and return SEQ
		! error.
		!
		RM$PUT_UPD_ERR();
		RETURN RMSERR(SEQ)

		END;
	
	    REC_SIZE = 0;

	    REC_ADDR = RM$REC_OVHD() + .REC_SIZE + .REC_ADDR;

	    END;

	! Always release the bucket. (no optimization yet...)
	!
	IF .BKT_ADDR[ BKT$V_LASTBKT ]
	THEN
	    BEGIN
	    IRAB[ IRB$L_CURBDB ] = 0;
	    RM$RLSBKT(0);
	    RETURN RMSSUC(SUC);
	    END;

	! Save next bucket VBN for use in call to GETBKT
	!
	NEXT_BUCKET = .BKT_ADDR[ BKT$L_NXTBKT ];

	! Release the current bucket
	!
	IRAB[ IRB$L_CURBDB ] = 0;
	RM$RLSBKT(0);

	! Since this isn't the last bucket in the chain, read the next one.
	!
	RETURN_ON_ERROR( RM$GETBKT( .NEXT_BUCKET,
				 .IDX_DFN[ IDX$B_DATBKTSZ] * 512 ));


	! Begin by looking at the first record
	!
	REC_ADDR = .BKT_ADDR + BKT$C_OVERHDSZ;

	END

    UNTIL 0;

    RETURN RMSSUC(SUC);

    END;
END

ELUDOM
