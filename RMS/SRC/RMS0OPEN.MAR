	$BEGIN	RMS0OPEN,002,F$RMSOPEN0,<DISPATCH FOR OPEN OPERATION>


;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
; Facility: RMS32
;
; Abstract:
;		This module is the highest level control routine
;		to perform the $open function.
;
; Environment:
;		Star processor running Starlet exec.
;
; Author: L. F. Laverdure	 Creation Date: 3-JAN-1977
;
; Modified By:
;
;	V03-002	RAS0084		Ron Schaefer		 2-Apr-1982
;		Return RAT=CR for stream format files even if
;		the file attribute is none.
;
;	V03-001	KPL0001		Peter Lieberwirth	22-Mar-1982
;		Fix bugcheck on shared file ISAM UFO open by making
;		sure IFAB address is in R10.
;
;	V02-052	CDS0002		C Saether		 5-Feb-1982
;		Return GBC field to FAB from ifab.
;
;	V02-051	TMK0001		Todd M. Katz		17-Jan-1982
;		If the device is mounted foreign, arrange it so that
;		when the resultant name string is written out it
;		contains a null length directory (ie []).
;
;	V02-050	RAS0051		Ron Schaefer		22-Dec-1981
;		Properly probe the NAM block whenever its address is
;		fetched from the user's FAB.
;
;	V02-049	JWH0001		Jeffrey W. Horn		16-Dec-1981
;		Clear FWA$V_DIR bit if either not directory device, or
;		SDI device.
;
;	V02-048	TMH0048		Tim Halvorsen		05-Sep-1981
;		Translate FWA$Q_DEVICE string once before storing it
;		into DVI, so that DVI always gets the actual device name.
;
;	V02-047	PSK0001		P. S. Knibbe		31-Aug-1981
;		Change default length for key xab's to be
;		keylen_v2. Anything longer will be legal.
;
;	V02-046	KEK0008		K. E. Kinnear		12-Aug-1981
;		On foreign devices, return both DEV and SDC characteristics
;		bits as we got them from the exec, not SDC with DIR clear.
;
;	V02-045	MCN0005		Maria del C. Nasr	10-Feb-1981
;		Make sure magtape is mounted before opening file.
;
;	V02-044 SPR35461	Maria del C. Nasr	02-Feb-1981
;		Change return from CIF processing to check for any errors
;
;	V02-043	REFORMAT	K. E. Kinnear		31-Jul-1980	9:47
;
;	V01-042	RAS0003		R. A. Schaefer		27-Nov-1979	13:50
;		Allow any record format for bio access.
;
;	V01-041	JAK0031		J. A. Krycka		26-Nov-1979	11:00
;		Call nt$ret_dev_char to return device characteristics obtained
;		from fal.
;
;	V01-040	JAK0020		J. A. Krycka		15-Nov-1979	19:00
;		Skip calls to RM$KNOWNFILE, RM$XAB_SCAN, and RM$CLOSE3 on
;		network operation.
;
;	V01-039	CDS0052		C. D. Saether		5-Nov-1979	15:00
;		Return bks and org correctly for seq file shared.
;
;	V01-038	RAN0002		R. A. Newell		6-Sep-1978	13:25
;		Rms32 isam modification.  Processing of summary, key and
;		allocation xab's.
;
;	V01-037	JAK0002		J. A. Krycka		31-Aug-1978	09:23
;		Fix failure to return deq value to fab on create.
;
;	V01-036	JAK0001		J. A. Krycka		23-Aug-1978	10:15
;		Miscellaneous clean-up prior to decnet v1.0 code freeze.
;		Skip organization dependent code on network operations.
;
;--
;


	.SBTTL	DECLARATIONS

;
; Include Files:
;

;
; Macros:
;

	$IFBDEF
	$FABDEF
	$NAMDEF
	$FWADEF
	$FIBDEF
	$DEVDEF
	$DEVDEF
	$RMSDEF
	$XABALLDEF			; allocation xab defs
	$XABSUMDEF			; summary xab defs
	$XABKEYDEF			; key xab defs

;
; Equated Symbols:
;

	FOP=FAB$L_FOP*8			; bit offset to fop

;
; Own Storage:
;

XABOPN_ARGS::
	.BYTE	XAB$C_SUM,XAB$C_SUMLEN,XBC$C_OPNSUM3
	.BYTE	XAB$C_KEY,XAB$C_KEYLEN_V2,XBC$C_OPNKEY3
	.BYTE	XAB$C_ALL,XAB$C_ALLLEN,XBC$C_OPNALL3
	.BYTE	0

	.SBTTL	RMS$OPEN - $OPEN ROUTINE

;++
; RMS$OPEN -- Open routine.
;
;  This routine performs the highest level $open processing.
;  its functions include:
;
;	1. Common setup.
;	2. Dispatch to organization-dependent code.
;	3. Dispatch to the display routine.
;
;
; Calling Sequence:
;
;	Entered from exec as a reult of user's calling sys$open
;	(e.g., by using the $open macro).
;
; Input Parameters:
;
;	AP	user's argument list addr
;
; Implicit Inputs:
;
;	The contents of the fab and possible related user interface
;	blocks.
;
; Output Parameters:
;
;	R0	status code
;	R1	destroyed
;
; Implicit Outputs:
;
;	The various fields of the fab are filled in to reflect
;	the status of the open file. (see rms functional spec for
;	a complete list.)
;	An ifab is initialized to reflect the open file.
;
;	A completion ast is queued if so specified by the user.
;
; Completion Codes:
;
;	Standard rms (see functional spec for list).
;
; Side Effects:
;
;	none
;
;--


	$ENTRY	RMS$$OPEN
	$TSTPT	OPEN
	BSBW	RM$FSETI		; do common setup
					; note: does not return on error

;
;  an ifab has been set up
;

	BSBW	RM$PRFLNM		; process file name
	BLBC	R0,ERROR		; exit on error

	ASSUME	FAB$V_BRO EQ FAB$V_BIO+1

	CMPZV	#FAB$V_BIO,#2,IFB$B_FAC(R9),#3; both bro & bio set?
	BNEQ	5$			; branch if not
	BICB2	#FAB$M_BIO,IFB$B_FAC(R9); clear bio (implied
					;  by bro without restrictions)
5$:	BBC	#FAB$V_KFO+FOP,(R8),10$	; branch if kfo not set
	BBS	#FWA$V_NODE,(R10),10$	; branch on network operation
	BSBW	RM$KNOWNFILE		; go try known file table
	CMPW	R0,#1			; normal success?
	BEQL	10$			; yes - continue normal path
	BRW	RM$CREATEXIT		; no - exit from open immediately
					;  (note: this may indicate success)
10$:	BSBW	RM$SETDID		; process the directory id
	BLBC	R0,ERROR		; exit on error
	BSBW	RM$ACCESS		; access the file

;
;  Return point for create turned into open via 'cif' bit.
;

RM$OPEN_CIF::
	BLBC	R0,ERROR		; exit on error
	BSBW	RM$FILLNAM		; fill in nam block
	BLBC	R0,ERROR		; exit on error

;
;  Make sure eof info is in "eof blk + 1, 0 offset" form.
;

	CMPW	IFB$W_FFB(R9),IFB$W_DEVBUFSIZ(R9); is last block full?
	BLSSU	10$			; branch if not
	INCL	IFB$L_EBK(R9)		; bump eof block
	CLRW	IFB$W_FFB(R9)		; and zero offset
10$:	BBS	#IFB$V_DAP,(R9),DAPRTN	; branch if network operation

;
;  Dispatch to organization-dependent open code.
;

	BBC	#DEV$V_SQD,IFB$L_PRIM_DEV(R9),20$	; branch if not magtape
	BBC	#DEV$V_MNT,IFB$L_PRIM_DEV(R9),ERRDNR	; error, if magtape not mounted
	BBS	#DEV$V_DMT,IFB$L_PRIM_DEV(R9),ERRDNR	; error, if magtape marked for dismount
20$:	CASE	TYPE=B,SRC=IFB$B_ORGCASE(R9),-
	DISPLIST=<RM$OPEN1,RM$OPEN2,RM$OPEN3>; pick up correct routine


;++
;
;  Error returns
;
;--
;
;  Unknown file organization  -  verify bio (or bro) accessed.
;
;--

	$PSECT_BR	L$RMS0
	RMSERR	ORG			; org not supported
RM$CHKBIOOPEN::
	BITB	#FAB$M_BIO!FAB$M_BRO,IFB$B_FAC(R9); either bio or bro set?
	BEQL	ERROR1			; branch if not (error)
	RMSSUC
	BRW	RM$COPRTN		; all finished open
	$PSECT_RESTORE


ERRRFM:	$PSECT_BR	L$RMS0
	RMSERR	RFM			; bad rfm field
	BRB	ERROR1
	$PSECT_RESTORE

ERRDNR:	$PSECT_BR	L$RMS0
	RMSERR	DNR			; device not mounted
	BRB	ERROR1
	$PSECT_RESTORE


ERRIRC:	$PSECT_BR	L$RMS0
	RMSERR	IRC			; illegal fixed record size
ERROR1:	BRW	ERROR			; clean up and return
	$PSECT_RESTORE
ERROR:	CSB	#IFB$V_ACCESSED,(R9)	; don't write file attributes
	CMPB	#IFB$C_IDX,IFB$B_ORGCASE(R9); indexed file?
	BNEQ	5$			; branch if not...clean up
	BBS	#IFB$V_DAP,(R9),5$	; branch if network operation
	PUSHL	R0			; push error code on stack
	MOVL	R9,R10			; RM$CLOSE3 expects IFAB address in R10
	BSBW	RM$CLOSE3		; close indexed file
	POPL	R0			; pop error code from stack
5$:	BRW	RM$CLSCU		; clean up and return


;
;  Return here from org-dependent routines.
;

RM$COPRTN::
	BLBC	R0,ERROR
	BBS	#IFB$V_DAP,(R9),DAPRTN	; branch if network operation

;
; Now handle summary, allocation, and key xab's.
;

	MOVAB	XABOPN_ARGS,AP		; move addr of xab table to ap
	BSBW	RM$XAB_SCAN		; scan the xab chain
	BLBC	R0,ERROR		; get out on error
DAPRTN:					;

;
;  Override run-time deq with user value, if any.
;

	MOVW	FAB$W_DEQ(R8),IFB$W_RTDEQ(R9)
	BNEQ	5$			; branch if speced
	MOVW	IFB$W_DEQ(R9),IFB$W_RTDEQ(R9); otherwise pick up deq

;
; From file header.
;

	MOVW	IFB$W_DEQ(R9),FAB$W_DEQ(R8); and put in fab

;
;  Return bdb and i/o buffer to free space and page lists.
;

5$:	BSBW	RM$RELEASALL		; return bdb and buffer

;
;  Validate rfm.
;

	ASSUME	IFB$V_RFM EQ 0
	ASSUME	IFB$S_RFM EQ 4

	BICB2	#^XF0,IFB$B_RFMORG(R9)	; leave only rfm in rfmorg

;
;  Check for rfm in supported range.
;

	BBS	#IFB$V_BIO,IFB$B_FAC(R9),10$; don't check if bio
	CMPB	IFB$B_RFMORG(R9),#FAB$C_MAXRFM
	BGTRU	ERRRFM

;
;  If fixed length record format, then set mrs from lrl in case this
;  is an fcs-11 file.
;

10$:	CMPB	IFB$B_RFMORG(R9),#FAB$C_FIX; fixed len rec?
	BNEQ	20$			; branch if not
	MOVW	IFB$W_LRL(R9),IFB$W_MRS(R9); set record length
	BLEQ	ERRIRC			; branch if invalid
20$:

;
; force stream format files to appear to have RAT non-null,
; even if they don't.
;
	ASSUME	FAB$C_STM LT FAB$C_STMLF
	ASSUME	FAB$C_STM LT FAB$C_STMCR

	CMPB	IFB$B_RFMORG(R9),-		; stream format?
		#FAB$C_STM
	BLSSU	30$			; nope
	BITB	#<FAB$M_CR!FAB$M_FTN!FAB$M_PRN>,-
		IFB$B_RAT(R9)		; carriage control already set?
	BNEQ	30$			; ok
	BISB2	#FAB$M_CR,IFB$B_RAT(R9)	; force RAT=CR
30$:


;
;  Return point for indirect open of process permanent file.
;
;
;  Set the rfm, rat, org, and mrs fields into the fab.
;

RM$COPRTN1::
	MOVB	IFB$B_RFMORG(R9),FAB$B_RFM(R8); set rfm
	MOVB	IFB$B_RAT(R9),FAB$B_RAT(R8); set rat

;
;  Return point for indirect open of process permanent file and rfm and
;  rat already set.
;

RM$COPRTN2::
	INSV	IFB$B_ORGCASE(R9),#FAB$V_ORG,#FAB$S_ORG,FAB$B_ORG(R8); set org
	BBC	#IFB$V_SEQFIL,(R9),10$	; branch if not seq file shr'd

	ASSUME	FAB$C_SEQ EQ 0

	CLRB	FAB$B_ORG(R8)		; this is really a sequential
					;  file.  Orgcase says relative
					;  when shared.
10$:
	MOVW	IFB$W_MRS(R9),FAB$W_MRS(R8); set mrs
	MOVW	IFB$W_GBC(R9),FAB$W_GBC(R8) ; set gbc

;
;  If vfc record format, check for 0 fixed header size and if
;  found make it 2 bytes.
;

	CMPB	IFB$B_RFMORG(R9),#FAB$C_VFC
	BNEQ	20$			; omit check if not vfc
	TSTB	IFB$B_FSZ(R9)		; check for default
	BNEQ	30$			; branch if value specified
	MOVB	#2,IFB$B_FSZ(R9)	; set default value
	BRB	30$			; continue
20$:	CLRB	IFB$B_FSZ(R9)		; guarantee 0 fsz for non-vfc rfm
					;  (note: fixes rms-11 bug of fsz=2)
30$:	RMSSUC				; inidcate successful open


;++
;
;  Common exit for $create and $open.
;
;--

CREOPEN_EXIT:
1$:	BLBS	R0,2$			; branch if no error
	BRW	ERROR			; otherwise go to exit on error
2$:

;
;  Save the various close option bits in ifab
;

	BBS	#IFB$V_PPF_IMAGE,(R9),5$; don't save options if indirect

	ASSUME	FAB$V_RWC+1 EQ FAB$V_DMO
	ASSUME	FAB$V_DMO+1 EQ FAB$V_SPL
	ASSUME	FAB$V_SPL+1 EQ FAB$V_SCF
	ASSUME	FAB$V_SCF+1 EQ FAB$V_DLT

	EXTZV	#FAB$V_RWC+FOP,#5,(R8),R1; get option bits

	ASSUME	IFB$V_RWC+1 EQ IFB$V_DMO
	ASSUME	IFB$V_DMO+1 EQ IFB$V_SPL
	ASSUME	IFB$V_SPL+1 EQ IFB$V_SCF
	ASSUME	IFB$V_SCF+1 EQ IFB$V_DLT

	INSV	R1,#IFB$V_RWC,#5,(R9)	; and save them

;
;  If this is foreign magtape, rewind the tape if rwo is set.
;

	BBC	#DEV$V_FOR,IFB$L_PRIM_DEV(R9),5$; branch if not foreign
	BBC	#DEV$V_SQD,IFB$L_PRIM_DEV(R9),5$; or if not magtape
	BBC	#FAB$V_RWO+FOP,(R8),5$	; or if rwo not speced
	BSBW	RM$REWIND_MT		; rewind the tape
	BLBC	R0,1$			; branch on error

;
;  Set 'blk' bit in ifab for magtape.
;

5$:	BBC	#DEV$V_SQD,IFB$L_PRIM_DEV(R9),8$; branch if not magtape
	BISB2	#FAB$M_BLK,IFB$B_RAT(R9); set no spanning bit
8$:

;
;  Set the fsz, bks, stv, alq, dev, and sdc fields into fab.
;

	MOVB	IFB$B_FSZ(R9),FAB$B_FSZ(R8); set fsz
	MOVB	IFB$B_BKS(R9),FAB$B_BKS(R8); set bks
	BBC	#IFB$V_SEQFIL,(R9),9$	; branch not seq file shared
	CLRB	FAB$B_BKS(R8)		; always zero for seq file
9$:
	MOVW	IFB$W_CHNL(R9),FAB$L_STV(R8); set stv to chan #
	MOVL	IFB$L_HBK(R9),FAB$L_ALQ(R8); set alq

;
;  Move device characteristics bits into the fab.
;
;
;   If device is foreign, move AS_DEV characteristics into both FAB 
;   characteristics words, since the PRIM_DEV has been altered for 
;   internal RMS processing requirements (e.g. DIR has been cleared, FOR
;   may have been set because of NFS, etc.).
;

	BBC	#DEV$V_FOR,IFB$L_PRIM_DEV(R9),10$
	MOVL	IFB$L_AS_DEV(R9),FAB$L_SDC(R8) ; set spooling dev. char.
	BRB	11$
10$:	MOVL	IFB$L_PRIM_DEV(R9),FAB$L_SDC(R8) ; set spooling dev. char.

	ASSUME	FAB$C_SEQ EQ 0

11$:	TSTB	IFB$B_ORGCASE(R9)	; sequential file org?
	BNEQ	50$			; branch if not
	MOVL	IFB$L_AS_DEV(R9),FAB$L_DEV(R8); set dev

;
;  If this is an indirect process-permanent file, set up the device characteristics
;  to make it look like a unit record device if sqo (sequential operations only)
;  is set.
;

	BBC	#IFB$V_PPF_IMAGE,(R9),15$; branch if not indirect ppf
	BBC	#IFB$V_SQO,(R9),15$	; or if sequential only clear
	BICL2	#DEV$M_DIR!DEV$M_FOD!DEV$M_RND -
		!DEV$M_SDI!DEV$M_SQD,FAB$L_DEV(R8); clear file characteristics
	BISL2	#DEV$M_REC!DEV$M_CCL,FAB$L_DEV(R8); and set unit record chars.

;
;  Network specific code for open/create.
;

15$:	BBC	#IFB$V_DAP,(R9),20$	; branch if not network operation
	CLRB	IFB$B_ORGCASE(R9)	; zero orgcase to subsequently
					; force rel and idx file oper
					; thru sequential code!!!
	BSBW	NT$RET_DEV_CHAR		; return real device char to user
					;  if they were returned by fal
;
;  Check for user file open option.
;

20$:	BBS	#FAB$V_UFO+FOP,(R8),40$	; branch if ufo option
	BRW	RM$EXRMS		; return to user

;
;  Leave file open for user but remove ifab
;  (no further rms operations available on this file).
;

40$:	BRW	RM$RETIFB

;
;  For all non-sequential file orgs the dev characteristics are
;  identical to the sdc since there can be no spooling.
;

50$:	MOVL	IFB$L_PRIM_DEV(R9),FAB$L_DEV(R8); set dev
	BRB	15$


;++
;
;  Common create clean up and exit
;
;  Return all bdb's and buffers to free space list, causing unlock if locked.
;
;--

RM$CREATEXIT::
	PUSHL	R0			; save status code

;
;  Entry point with status already pushed on the stack.
;

RM$CREATEXIT1::
	BSBW	RM$RELEASALL		; release all bdb's
	POPR	#^M<R0>			; restore status
	BRW	CREOPEN_EXIT		; & join open finish up code


;+
; EXPARGL --  subroutine to output resultant name string and other nam fields.
;
;  Inputs:
;	R11	impure area address
;	R10	fwa address
;	R9	ifab address
;	R8	fab address
;
;  Outputs:
;	R7	nam block address
;	R0	status code
;	R1-R6	destroyed
;-

EXPARGL:
	.BYTE	NAM$L_RSA		; arg list for rm$expstring
	RMSERR_WORD	RST
	RMSERR_WORD	RSS
RM$FILLNAM::
	MOVL	FAB$L_NAM(R8),R7	; get name block addr
	BEQL	30$			; branch if no nam block

	BBS	#DEV$V_FOR,-		; if the device is mounted foreign then
		IFB$L_PRIM_DEV(R9),5$	; the directory is to be of null length
	BBS	#DEV$V_RND,IFB$L_PRIM_DEV(R9),10$ ; branch if full directory dev

5$:	CSB	#FWA$V_DIR,(R10)		; clear DIR bit if not
10$:	MOVAB	EXPARGL,AP		; arg list for rm$expstring
	BSBW	RM$EXPSTRING		; fill in resultant name string
	BLBC	R0,40$			; quit on error
	BBS	#FWA$V_NODE,(R10),50$	; branch if nodename was found
	BSBW	RM$WRITE_DVI		; Write DVI field in NAM block
	MOVC3	#6,FWA$T_FIBBUF+FIB$W_FID(R10),NAM$W_FID(R7); copy fid
	TSTW	FWA$T_FIBBUF+FIB$W_DID(R10); any did?
	BEQL	30$			; branch if yes
	MOVC3	#6,FWA$T_FIBBUF+FIB$W_DID(R10),NAM$W_DID(R7); copy did
30$:	RMSSUC
40$:	RSB
50$:	MOVC5	#0,(SP),#0,#<16+6+6>,NAM$T_DVI(R7)
	BRB	30$			; zero dvi, fid, and did fields
	.END
