$	SET NOVER
$	WRITE SYS$OUTPUT ""
$	WRITE SYS$OUTPUT "Continuing with VAX/VMS V3.0 Upgrade Procedure"
$	WRITE SYS$OUTPUT ""
$	WRITE SYS$OUTPUT "		Upgrade Phase 2"
$	WRITE SYS$OUTPUT ""
$ @SYS$SYSTEM:STARTUP.COM UPGRADE
$ !
$ ! Install only those protected shareable images that will be used.
$ !
$	RUN SYS$SYSTEM:INSTALL
SYS$SHARE:DISMNTSHR	/OPEN /SHARED /PROTECT /HEADER
SYS$SHARE:MOUNTSHR	/OPEN /SHARED /PROTECT /HEADER
$	DEFDIR := "SYSUPD.VMS300"
$	SYSVER:="V3.0"
$	FILEOPEN:=""
$	SET ON
$	SET MESSAGE /FACILITY/SEVERITY/TEXT/IDENTIFICATION
$	ON ERROR THEN GOTO 7000
$	ON CONTROL_Y THEN GOTO 7000
$	ON CONTROL_C THEN GOTO 7000
$	SET PROCESS /PRIV=(CMK,SYSP,LOG,VOLPRO,BYPASS)
$	SET PROTECTION=(S:RWED,G:RWED,O:RWED,W:RE)/DEFAULT
$	COPY :== COPY
$	DELETE /SYMBOL /GLOBAL COPY
$	VALID_SAVESETS := REQ,LIB,OPT,ALL,EDTCAI
$	VALID_UPGRADES:=IGNORE,KEEP,OVER,UNDER
$	NEW_ROOT := "SYSF"
$	OLD_ROOT := "SYS0"
$	OLD_ROOT_DOT := "SYS0."
$	DOT_OLD_ROOT := ".SYS0"
$	IF F$SEARCH("[0,0]SYS0.DIR;1") .EQS. "" THEN OLD_ROOT := ""
$	IF OLD_ROOT .EQS. "" THEN OLD_ROOT_DOT := ""
$	IF OLD_ROOT .EQS. "" THEN DOT_OLD_ROOT := ""
$
$	SYSDEV := 'F$LOGICAL("SYS$SYSROOT")
$	SYSDEV = SYSDEV - "_"
$25:
$	L = 'F$LOCATE(":",SYSDEV) + 1
$	TARGET := 'F$EXT(0,L,SYSDEV)
$	L = 'F$LOCATE("[",SYSDEV)
$	M = 'F$LOCATE(".",SYSDEV)
$	IF M .EQ. 'F$LENGTH(SYSDEV) THEN GOTO NO_TOPSYS
$	N = M - L + 1
$	TARGET_TOPSYS_DOT := 'F$EXT(L,N,SYSDEV)
$	GOTO 30
$NO_TOPSYS:
$	TARGET_TOPSYS_DOT := ""
$ !
$ ! Determine type of cpu
$ !
$30:
$	CPUTYPE = F$GETSYI("CPU")
$	IF (CPUTYPE .EQ. 1).OR. (CPUTYPE .EQ. 2) THEN GOTO GOT_CPUTYPE
$	IF (CPUTYPE .EQ. 3) THEN -
	WRITE SYS$OUTPUT "Upgrade procedure not supported for cpu type "'cputype'"."
$	GOTO 7000
$GOT_CPUTYPE:
$	SET DEFAULT SYS$SYSTEM
$	SET UIC [1,4]
$	SET /PROTECTION=(S:RWED,G:RWED,O:RWED,W:RE) /DEFAULT
$	VERSION := 300
$	OPEN/READ DATAF UPGRADE.KIT
$	FILEOPEN:="YES"
$	READ DATAF KIT
$	READ DATAF YEAR
$	CLOSE DATAF
$	FILEOPEN:=""
$	L = F$LOCATE("-",YEAR) + 1
$	YEAR = F$EXTRACT(L,30,YEAR)
$	L = F$LOCATE("-",YEAR) + 1
$	YEAR = F$EXTRACT(L,4,YEAR)
$	DATE = F$TIME()
$	L = F$LOCATE("-",DATE) + 5
$	DAY = F$EXTRACT(0,L,DATE)
$	TIME = F$EXTRACT(L+5,30,DATE)
$	DATE = DAY + YEAR + ":" + TIME
$	SET TIME=('DATE')
$	KIT = KIT - ":"
$	OPEN/WRITE DATAF GENDEVICE.COM
$	FILEOPEN:="YES"
$	WRITE DATAF "$ RUN SYS$SYSTEM:SYSGEN"
$	WRITE DATAF "AUTOCONFIGURE ALL /SELECT=(''F$EXTRACT(0,3,KIT)')"
$	CLOSE DATAF
$	FILEOPEN:=""
$	@SYS$SYSTEM:GENDEVICE
$	DELETE GENDEVICE.COM;*
$	
$MNT_KIT:
$	MOUNT/FOREIGN 'KIT' VMS'VERSION'
$	SET DEFAULT 'TARGET'['NEW_ROOT'.SYSEXE]
$	FILENAME:='TARGET'['OLD_ROOT_DOT''DEFDIR']VMSKITBLD.V25
$60:
$	OPEN/READ DATAF 'FILENAME
$	IF $STATUS THEN GOTO 65
$	WRITE SYS$OUTPUT "Unable to open data parameter file",'FILENAME',"."
$	GOTO 7000
$65:
$	FILEOPEN:="YES"
$	CONDIT = 1+2+4+8+64+256	! Use UETP, HELP, DECnet, and Coding Examples
$	ON ERROR THEN GOTO 7000
$	WRITE SYS$OUTPUT ""
$	@['OLD_ROOT_DOT''DEFDIR']DIRCLENUP.COM 'TARGET' 'SYSVER'
$	SET PROC/PRIV=BYPASS
$	STOP JOB_CONTROL
$	STOP OPCOM
$	SET UIC [1,6]
$	STOP ERRFMT
$	SET UIC [1,4]
$	SET DEFAULT ['DEFDIR']
$ !
$ ! Now clean off all the remaining VAX/VMS V2 files, namely the files
$ ! required to reboot and execute this procedure.
$ !
$	WRITE SYS$OUTPUT ""
$	WRITE SYS$OUTPUT "Now removing the remainder of the VAX/VMS V2.5 files."
$	WRITE SYS$OUTPUT "(Please ignore any file not found messages.)"
$	WRITE SYS$OUTPUT ""
$ !
$ ! This is the main cleanup loop that is executed for each record
$ ! in the data file.
$ !
$ SET NOVER
$RECORD_LOOP:
$	READ/END_OF_FILE=3000 DATAF RECORD
$	IF "''F$EXTRACT(0,1,RECORD)'" .EQS. "$" THEN GOTO RECORD_LOOP
$	IF "''F$EXTRACT(0,1,RECORD)'" .EQS. "!" THEN GOTO RECORD_LOOP
$ !
$ ! Get the upgrade field from the current record.  (This time only
$ ! the files labelled UPGRADE=KEEP are of interest.)
$ !
$GET_UPGRADE:
$	L = 'F$LOCATE("UPG=",RECORD) + 4
$	UPGRADE := 'F$EXTRACT(L,132,RECORD)
$	L = 'F$LOCATE(",",UPGRADE)
$	UPGRADE := 'F$EXTRACT(0,L,UPGRADE)
$	IF 'F$LOCATE(UPGRADE,VALID_UPGRADES) .NE. 'F$LENGTH(VALID_UPGRADES) -
	THEN GOTO 240
$	WRITE SYS$OUTPUT "Bad upgrade field specified in record *''RECORD'*"
$	GOTO 7000
$240:
$ !
$ ! Get the saveset field from the current record.
$ !
$GET_SAVESET:
$	L = 'F$LOCATE("SET=",RECORD) + 4
$	SAVESET := 'F$EXTRACT(L,132,RECORD)
$	L = 'F$LOCATE(",",SAVESET)
$	SAVESET := 'F$EXTRACT(0,L,SAVESET)
$	IF SAVESET .EQS. "" THEN SAVESET := LIB
$	IF 'F$LOCATE(SAVESET,VALID_SAVESETS) .NE. 'F$LENGTH(VALID_SAVESETS) -
	THEN GOTO 250
$	WRITE SYS$OUTPUT "Bad saveset field specified in record *''RECORD'*"
$	GOTO 7000
$250:
$ !
$ ! Get the CONDITIONAL field from the current record.
$ !
$GET_CONDITIONAL:
$	CONDITIONAL := ""
$	L = 'F$LOCATE("COND=",RECORD) + 5
$	IF L .GE. 'F$LENGTH(RECORD) THEN GOTO GET_NAME
$	CONDITIONAL := 'F$EXTRACT(L,132,RECORD)
$	IF CONDITIONAL .EQS. "" THEN GOTO GET_NAME
$	L = 'F$LOCATE(",",CONDITIONAL)
$	CONDITIONAL := 'F$EXTRACT(0,L,CONDITIONAL)
$	IF (CONDITIONAL .AND. CONDIT) .EQ. 0 THEN GOTO RECORD_LOOP
$ !
$ ! Get the name from the current record.  (The name is always the first field
$ ! in the record, and doesn't have a keyword associated with it.)
$ !
$GET_NAME:
$	L = 'F$LOCATE(",",RECORD)
$	NAME := 'F$EXTRACT(0,L,RECORD)
$ !
$ ! Get the operation specified by the current record.
$ !
$GET_OPERATION:
$	L = 'F$LOCATE("OP=",RECORD) + 3
$	OPERATION := 'F$EXTRACT(L,132,RECORD)
$	IF OPERATION .EQS. "" THEN GOTO NORMAL
$	L = 'F$LOCATE(",",OPERATION)
$	OPERATION := 'F$EXTRACT(0,L,OPERATION)
$	IF (OPERATION .EQS. "BUILD") .OR. (OPERATION .EQS. "COPY") .OR. -
	(OPERATION .EQS. "CONTIG") -
	THEN GOTO NORMAL
$	IF (OPERATION .EQS. "SET") THEN GOTO SET
$	GOTO RECORD_LOOP
$
$NORMAL:
$	IF (UPGRADE .EQS. "OVER") .OR. (UPGRADE .EQS. "UNDER") THEN -
		GOTO RECORD_LOOP
$	OPEN/READ/ERROR=FNF DATA4 'NAME'
$	CLOSE DATA4
$	DELETE 'TARGET''NAME';*
$	IF 'F$LOCATE(".EXE",NAME) .EQ. 'F$LENGTH(NAME) THEN GOTO FNF
$	L = 'F$LOCATE(".EXE",NAME)
$	JOURNAL := 'F$EXTRACT(0,L,NAME)
$	OPEN/READ/ERROR=FNF DATA4 'JOURNAL'
$	CLOSE DATA4
$	DELETE 'TARGET''JOURNAL'.JNL;*
$FNF:
$	ON ERROR THEN GOTO 7000
$	GOTO RECORD_LOOP
$	
$SET:
$	SET DEFAULT ['OLD_ROOT_DOT''NAME']
$	SETDIR := 'NAME'
$	WRITE SYS$OUTPUT "Now working on files in ["'OLD_ROOT_DOT''NAME'"]."
$	GOTO RECORD_LOOP
$
$3000:
$	SET DEFAULT ['DEFDIR']
$	CLOSE DATAF
$	FILEOPEN:=""
$ !
$ ! Restore LIB saveset.  Use BACKUP/REPLACE for restartability.
$ !
$	WRITE SYS$OUTPUT ""
$	WRITE SYS$OUTPUT "Merging the library saveset into the kernel V3.0 system."
$	WRITE SYS$OUTPUT ""
$	BACKUP/REPLACE/VERIFY/NOREWIND 'KIT':LIBRARY/SAVE_SET -
		'TARGET'['NEW_ROOT'...] /SELECT=[SYS0...]
$ !
$ ! If installing a dual RL02 kit, do not automatically install the
$ ! optional saveset.
$ !
$	IF F$GETDEV(TARGET,"MAXBLOCK") .LT. 25000 THEN GOTO NO_ROOM
$ !
$ ! Restore OPT saveset.  Use /REPLACE for restartability.
$ !
$RESTORE_OPT:
$	WRITE SYS$OUTPUT ""
$	WRITE SYS$OUTPUT "Merging the optional saveset into the kernel V3.0 system."
$	WRITE SYS$OUTPUT ""
$	BACKUP/REPLACE/VERIFY/NOREWIND  'KIT':OPTIONAL/SAVE_SET -
		'TARGET'['NEW_ROOT'...] /SELECT=[SYS0...]
$	GOTO OPT_DONE
$NO_ROOM:
$	WRITE SYS$OUTPUT ""
$	WRITE SYS$OUTPUT "Insufficient room on system disk.  Optional saveset"
$	WRITE SYS$OUTPUT "not merged into system disk.  This may be done later"
$	WRITE SYS$OUTPUT "after the upgrade procedure completes, by"
$	WRITE SYS$OUTPUT "	1) Deleting unnecessary files
$	WRITE SYS$OUTPUT "	2) Mounting the distribution kit /FOREIGN"
$	WRITE SYS$OUTPUT "	3) Merging in the optional saveset with the
$	WRITE SYS$OUTPUT "	   following backup command:
$	WRITE SYS$OUTPUT "	   BACKUP kit:OPTIONAL/SAVE_SET -"
$	WRITE SYS$OUTPUT "	   SYS$SYSDISK:['NEW_ROOT'...] /SELECT=[*...]"

$	WRITE SYS$OUTPUT ""
$OPT_DONE:
$ !
$ ! Modify uaf to fix references to SYS$SYSDISK for rooted and non-rooted
$ ! directories.  Also make the default ENQLM entry at least 20.
$ !
$ ! Search for all rooted directories and make them SYS$SYSROOT if they are
$ ! SYS$SYSDISK.  Search for all other occurrences of SYS$SYSDISK and make
$ ! them SYS$SYSDEVICE.
$ !
$	WRITE SYS$OUTPUT ""
$	WRITE SYS$OUTPUT "Now the user authorization file is being modified."
$	WRITE SYS$OUTPUT "If  an  authorization  record has an ENQLM that is"
$	WRITE SYS$OUTPUT "less than the minimum value, it is silently raised"
$	WRITE SYS$OUTPUT "to  the  minimum  value.  If the default device is"
$	WRITE SYS$OUTPUT "null, or SYS$SYSDISK, or the physical device  name"
$	WRITE SYS$OUTPUT "of  the  system disk, it is changed to SYS$SYSROOT"
$	WRITE SYS$OUTPUT "or  SYS$SYSDEVICE   depending   on   the   default"
$	WRITE SYS$OUTPUT "directory.   All default device changes are logged"
$	WRITE SYS$OUTPUT "below.   The  SYSTEST  account   is   also   being"
$	WRITE SYS$OUTPUT "modified."
$	WRITE SYS$OUTPUT ""
$	set default sys$system:
$	uaf := $authorize
$	defenq = 20
$	rootlist = "SYSERR;SYSHLP;SYSMGR;SYSEXE;SYSLIB;SYSTEST;SYSMAINT;SYSCBI;SYSMSG;SYSUPD;;;"
$	uaf_sysdev = f$getdvi("SYS$SYSDEVICE", "ROOTDEVNAM")
$	uaf_dev_system = ""
$	uaf_dev_systest = ""
$	uaf_dev_field = ""
$	open /read /share=write uaffile sysuaf.dat
$	read /key=SYSTEM /err=uaf_no_system uaffile entry
$	lenstr = f$extract (64, 1, entry)
$	length = f$cvui (0, 8, lenstr)
$	uaf_dev_system = f$extract (65, length, entry)
$ uaf_no_system:
$	read /key=SYSTEST /err=uaf_no_systest uaffile entry
$	lenstr = f$extract (64, 1, entry)
$	length = f$cvui (0, 8, lenstr)
$	uaf_dev_systest = f$extract (65, length, entry)
$ uaf_no_systest:
$	read /key=FIELD /err=uaf_no_field uaffile entry
$	lenstr = f$extract (64, 1, entry)
$	length = f$cvui (0, 8, lenstr)
$	uaf_dev_field = f$extract (65, length, entry)
$ uaf_no_field:
$	close uaffile
$ !
$ ! Read the uaf directly, but use authorize to write it.
$ !
$	open /write uaffix uaffix.com
$	write uaffix "$ RUN SYS$SYSTEM:AUTHORIZE"
$	open /read /share=write uaffile sysuaf.dat
$	on error then goto uaf_error_exit
$ uaf_next_record:
$	command = ""
$	read /end=uaf_close uaffile entry
$ !
$ ! Obtain the parts of the uaf record that matter
$ !
$	username = f$extract (0, 12, entry)
$	username = f$extract (0, f$locate (" ", username), username)
$	lenstr = f$extract (32, 1, entry)
$	length = f$cvui (0, 8, lenstr)
$	uaf_defdir = f$extract (33, length, entry)
$	lenstr = f$extract (64, 1, entry)
$	length = f$cvui (0, 8, lenstr)
$	defdev = f$extract (65, length, entry)
$	enqstr = f$extract (120, 2, entry)
$	enqlm = f$cvui (0, 16, enqstr)
$ !
$ ! Catch the subdirectory case of a rooted directory.
$ !
$	dirend = f$locate (".", uaf_defdir)
$	dirstr = f$extract (0, dirend, uaf_defdir)
$	dirstr = dirstr - "[" - "]" - "." - "<" - ">"
$ !
$ ! If the device is a physical device name, get it into canonical form
$ !
$	tmpdev = defdev - ":" + ":"
$	if	tmpdev .eqs. "SYS$SYSROOT:" .or. -
		tmpdev .eqs. "SYS$SYSDEVICE:" -
	then	goto uaf_enqlm
$	if	defdev .eqs. "" .or. -
		defdev .eqs. uaf_dev_system .or. -
		defdev .eqs. uaf_dev_systest .or. -
		defdev .eqs. uaf_dev_field -
	then	goto uaf_sys$sysdisk
$	defdev = tmpdev
$	tmpdev = "_" + (defdev - "_" - "_")
$	if .not. f$getdvi(tmpdev, "EXISTS") then goto uaf_not_physical
$	tmpdev = f$getdvi(tmpdev, "ROOTDEVNAM")
$ uaf_not_physical:
$	if tmpdev .eqs. uaf_sysdev then goto uaf_sys$sysdisk
$	if defdev .nes. "SYS$SYSDISK:" then goto uaf_enqlm
$ uaf_sys$sysdisk:
$	defdev = "SYS$SYSDEVICE:"
$	if dirstr .eqs. "" then goto uaf_device
$	if f$locate (dirstr, rootlist) .eq. f$length (rootlist) -
		then goto uaf_device
$	defdev = "SYS$SYSROOT:"
$ uaf_device:
$	command = command + "/DEVICE=''defdev'"
$ !
$ ! Make the lock enqlm at least 20
$ !
$ uaf_enqlm:
$	if enqlm .ge. defenq then goto uaf_no_enqlm_change
$	command = command + "/ENQLM=''defenq'"
$ uaf_no_enqlm_change:
$	if username .eqs. "SYSTEST" then -
		command = command + "/PRIV=(SETPRV)/ASTLM=50
$	if username .eqs. "SYSTEM" .or. username .eqs. "SYSTEST" then -
		command = command + "/WSQUOTA=350/WSEXTENT=1024"
$	if command .eqs. "" then goto uaf_no_uaf_change
$ !
$ ! log all modifications that change more than just ENQLM
$ !
$	if command .eqs. "/ENQLM=''defenq'" then goto uaf_modify
$	write sys$output "MODIFY ''username' ''command'"
$ uaf_modify:
$	write uaffix "MODIFY ''username' ''command'"
$ uaf_no_uaf_change:
$	goto uaf_next_record
$ !
$ ! Close the file and finish up
$ !
$ uaf_close:
$	close uaffile
$	write uaffix "EXIT"
$	close uaffix
$	@uaffix/output=nl:
$	delete uaffix.com;*
$ 	on error then goto 7000
$	goto uaf_done
$ uaf_error_exit:
$	close uaffile
$	close uaffix
$	goto 7000
$ uaf_done:
$ !
$ ! Re-set the sysgen parameter that causes the time/date to be requested
$ ! at boot-time.
$ !
$	RUN SYSGEN
USE CURRENT
SET /STARTUP SYS$SYSTEM:STARTUP.UP3
SET SETTIME 0
WRITE CURRENT
$	WRITE SYS$OUTPUT ""
$	WRITE SYS$OUTPUT "Distribution kit may be removed from ''KIT'."
$	WRITE SYS$OUTPUT ""
$	DISMOUNT/NOUNLOAD 'KIT'
$	@SYS$SYSTEM:STARTUP.UP3 CONTINUE
$
$
$
$	!
$	! On error, exit from the upgrade procedure here.
$	!
$7000:
$	WRITE SYS$OUTPUT ""
$	WRITE SYS$OUTPUT "Upgrade to VAX/VMS Version 3.0 incomplete."
$	WRITE SYS$OUTPUT ""
$	WRITE SYS$OUTPUT "Error exit from upgrade procedure."
$	WRITE SYS$OUTPUT "Restart upgrade from last boot of system."
$	WRITE SYS$OUTPUT ""
$	IF (FILEOPEN .NES. "") THEN CLOSE DATAF
$	EXIT
