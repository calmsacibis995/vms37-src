$ SET NOVER
$	WRITE SYS$OUTPUT ""
$	WRITE SYS$OUTPUT "Continuing with VAX/VMS V3.0 Upgrade Procedure"
$	WRITE SYS$OUTPUT ""
$	WRITE SYS$OUTPUT "	Upgrade Phase 5"
$	WRITE SYS$OUTPUT ""
$	WRITE SYS$OUTPUT "This part of the procedure will create a new"
$	WRITE SYS$OUTPUT "site-specific sysgen parameter file, AUTOGEN.PAR."
$	WRITE SYS$OUTPUT ""
$	@SYS$SYSTEM:STARTUP.COM UPGRADE
$ !
$ ! Install only the protected shareable images that will be used.
$ !
$ RUN SYS$SYSTEM:INSTALL
SYS$SHARE:DISMNTSHR	/OPEN /SHARED /PROTECT /HEADER
SYS$SHARE:MOUNTSHR	/OPEN /SHARED /PROTECT /HEADER
$	DEFDIR := "SYSUPD.VMS300"
$	FILEOPEN:=""
$	SET ON
$	SET MESSAGE /FACILITY/SEVERITY/TEXT/IDENTIFICATION
$	ON ERROR THEN GOTO 7000
$	ON CONTROL_Y THEN GOTO 7000
$	ON CONTROL_C THEN GOTO 7000
$	SET PROCESS /PRIV=(CMK,SYSP,LOG,VOLPRO,BYPASS)
$	SET PROTECTION=(S:RWED,G:RWED,O:RWED,W:RE)/DEFAULT
$	COPY :== COPY
$	DELETE /SYMBOL /GLOBAL COPY
$	NEW_ROOT := "SYSF"
$
$	SYSDEV := 'F$LOGICAL("SYS$SYSROOT")
$	SYSDEV = SYSDEV - "_"
$25:
$	L = 'F$LOCATE(":",SYSDEV) + 1
$	TARGET := 'F$EXT(0,L,SYSDEV)
$	L = 'F$LOCATE("[",SYSDEV)
$	M = 'F$LOCATE(".",SYSDEV)
$	IF M .EQ. 'F$LENGTH(SYSDEV) THEN GOTO NO_TOPSYS
$	N = M - L
$	L = L + 1
$	TARGET_TOPSYS_DOT := 'F$EXT(L,N,SYSDEV)
$	GOTO 30
$NO_TOPSYS:
$	TARGET_TOPSYS_DOT := ""
$ !
$ ! Determine type of cpu
$ !
$30:
$	CPUTYPE = F$GETSYI("CPU")
$	IF (CPUTYPE .EQ. 1).OR. (CPUTYPE .EQ. 2) THEN GOTO GOT_CPUTYPE
$	IF (CPUTYPE .EQ. 3) THEN -
	WRITE SYS$OUTPUT "Upgrade procedure not supported for cpu type "'cputype'"."
$	GOTO 7000
$GOT_CPUTYPE:
$	SET DEFAULT SYS$SYSTEM
$	ON ERROR THEN GOTO 7000
$	WRITE SYS$OUTPUT ""
$	SYSVER:="V3.0"
$	@'TARGET'['TARGET_TOPSYS_DOT''DEFDIR']DIRCLENUP.COM 'TARGET' 'SYSVER'
$	SET PROC/PRIV=BYPASS
$	STOP JOB_CONTROL
$	STOP OPCOM
$	SET UIC [1,6]
$	STOP ERRFMT
$	SET UIC [1,4]
$CONTINUE:
$	SET FILE /REMOVE 'TARGET'['NEW_ROOT']001001.DIR;1
$	SET FILE /REMOVE 'TARGET'['NEW_ROOT']001002.DIR;1
$	SET FILE /REMOVE 'TARGET'['NEW_ROOT']SYSEXE.DIR;1
$	SET FILE /REMOVE 'TARGET'['NEW_ROOT']SYSLIB.DIR;1
$	SET FILE /REMOVE 'TARGET'['NEW_ROOT']SYSTEST.DIR;1
$	SET FILE /REMOVE 'TARGET'['NEW_ROOT']SYSMAINT.DIR;1
$	SET FILE /REMOVE 'TARGET'['NEW_ROOT']SYSMGR.DIR;1
$	SET FILE /REMOVE 'TARGET'['NEW_ROOT']SYSHLP.DIR;1
$	SET FILE /REMOVE 'TARGET'['NEW_ROOT']SYSUPD.DIR;1
$	SET FILE /REMOVE 'TARGET'['NEW_ROOT']SYSMSG.DIR;1
$	SET FILE /REMOVE 'TARGET'['NEW_ROOT']SYSERR.DIR;1
$	SET FILE /REMOVE 'TARGET'['NEW_ROOT']SYSCBI.DIR;1
$	CREATE/DIRECTORY/OWNER=[1,4]/PROT=(W:RWED) SYS$SYSDEVICE:[SYSEXEMIN]
$	IF F$SEARCH("SYS$SYSDEVICE:[0,0]SYSEXE.DIR;1") .NES. "" THEN -
		SET FILE /REMOVE SYS$SYSDEVICE:[0,0]SYSEXE.DIR;1
$	SET FILE /ENTER=SYS$SYSDEVICE:[0,0]SYSEXE.DIR;1 -
		SYS$SYSDEVICE:[0,0]SYSEXEMIN.DIR;1
$	IF F$SEARCH("SYS$SYSDEVICE:[SYSEXEMIN]SYSBOOT.EXE") THEN -
		SET FILE /REMOVE SYS$SYSDEVICE:[SYSEXEMIN]SYSBOOT.EXE;
$	SET FILE /ENTER=SYS$SYSDEVICE:[SYSEXEMIN]SYSBOOT.EXE -
		SYS$SYSDEVICE:[SYS0.SYSEXE]SYSBOOT.EXE
$	SET PROTECTION=(W:RWE) SYS$SYSDEVICE:[0,0]SYSEXEMIN.DIR;1
$	SET PROTECTION=(S:R,O:R,G,W) SYS$SYSDEVICE:[0,0]SYSEXEMIN.DIR;1
$	SET FILE /ENTER=SYS$SYSDEVICE:[0,0]SYSMAINT.DIR;1 -
		SYS$SYSDEVICE:[SYS0]SYSMAINT.DIR;1
$	SET FILE /REMOVE SYS$SYSDEVICE:[SYS0.SYSEXE]SYSBOOT.EXE;
$	SET FILE /ENTER=SYS$SYSDEVICE:[SYS0.SYSEXE]SYSBOOT.EXE -
		SYS$SYSDEVICE:[SYSEXEMIN]SYSBOOT.EXE
$	DELETE 'TARGET'[0,0]'NEW_ROOT'.DIR;1
$	DELETE SYS$SYSROOT:[SYSUPD.VMS300]*.*;*
$	DELETE SYS$SYSROOT:[SYSUPD]VMS300.DIR;1
$	DELETE SYS$SYSROOT:[SYSEXE]UPGRADE.KIT;*
$	DELETE SYS$SYSROOT:[SYSEXE]STARTUP.UP2;*,.UP3;*,.UP4;*,.INS;*
$ !
$ ! Create a new site-specific parameter file, AUTOGEN.PAR.
$ !
$	SET NOON
$	DELETE SYS$SYSTEM:SWAPFILE.SYS;*
$	RUN SYS$SYSTEM:SYSGEN
AUTOCONFIGURE ALL
$	WRITE SYS$OUTPUT ""
$	WRITE SYS$OUTPUT "Now computing new SYSGEN parameters."
$	WRITE SYS$OUTPUT "An attempt may be made to re-size the"
$	WRITE SYS$OUTPUT "pagefile or swapfile.  If there is"
$	WRITE SYS$OUTPUT "insufficient room on the disk, the"
$	WRITE SYS$OUTPUT "recommended size is displayed and a"
$	WRITE SYS$OUTPUT "message that the file should be created"
$	WRITE SYS$OUTPUT "manually by the system manager later on."
$	WRITE SYS$OUTPUT ""
$	@SYS$UPDATE:AUTOGEN CONFIG
$	@SYS$UPDATE:AUTOGEN GENPAR
$	!
$	! Shut down the system.  Reboot using normal site parameter file.
$ 	!
$	@SYS$UPDATE:AUTOGEN REBOOT
$
$	!
$	! On error, exit from the upgrade procedure here.
$	!
$7000:
$	ON ERROR THEN CONTINUE
$	WRITE SYS$OUTPUT ""
$	WRITE SYS$OUTPUT "Upgrade to VAX/VMS Version 3.0 incomplete."
$	WRITE SYS$OUTPUT ""
$	WRITE SYS$OUTPUT "Error exit from upgrade procedure."
$	WRITE SYS$OUTPUT "Restart upgrade from last boot of system."
$	WRITE SYS$OUTPUT ""
