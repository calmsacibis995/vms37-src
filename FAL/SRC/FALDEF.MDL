;	.TITLE	$FALDEF - FAL CONTROL BLOCK DEFINITIONS
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; Facility: FAL (DECnet File Access Listener)
;
; Abstract:
;
;	This module defines symbols for the FAL control blocks that are defined
;	by the $FALWRKDEF and $FALSTBDEF macros.
;
; Environment:
;
;	The MDL translator must be used to convert FALDEF.MDL into
;	FALDEF.MAR (and FALDEF.B32).
;
; Author: James A. Krycka,	Creation Date:	16-JUN-1977
;
; Modified By:
;
;	V02-035	JAK0022		J A Krycka	24-AUG-1981
;		Cleanup.
;
;	V02-034	JAK0020		J A Krycka	17-JUL-1981
;		Add FAL$W_QIOBUFSIZ.
;		Rename FAL$W_MAXDAPSIZ to FAL$W_DAPBUFSIZ.
;		Change value of FAL$K_MBXQUOTA from <64*4> to <64*2>.
;		Define bit definitions for FAL$W_RECEIVED.
;
;	V02-033	JAK0017		J A Krycka	01-MAY-1981
;		Increase size of allocated space for $NAM and $XABDAT blocks.
;
;--

;++
; $FALWRKDEF defines FAL work area offsets and symbols.
;--

	$STRUCT	FAL,WRKDEF
	F FLG,Q			; Miscellaneous flag
	  V <M			; Flags denote:
	    CNF_MSG		;  Processed Configuration message
	    ATT_MSG		;  Processed Attributes message
	    ,6			;
	    FTM			;  File transfer mode (vs record transfer mode)
	    BLK_IO		;  Block I/O mode (vs record I/O mode)
	    WILD		;  This is a wildcard operation (determined
				;  via parse of filespec string)
				; The next bit is input to FAL$TRANSMIT:
	    LAST_MSG		;  This is the last DAP message in the
				;  sequence to be blocked
				; The next 3 bits are input to FAL$ENCODE_STS:
	    RET_RFA		;  Include RFA field in Status message
	    RET_RECN		;  Include RECNUM field in Status message
	    RET_STV		;  Include STV field in Status message
	    ,1			;
	    RCVQIO		;  Link receive QIO outstanding flag
	    RCVAST		;  Link receive AST delivered flag
	    XMTQIO		;  Link transmit QIO outstanding flag
	    XMTAST		;  Link transmit AST delivered flag
	    MBXQIO		;  Mailbox receive QIO outstanding flag
	    MBXAST		;  Mailbox receive AST delivered flag
	    ,2			;
				; The next 5 bits control FAL logging output:
	    LOG_NAM		;  Enable logging of filename/function requests
	    LOG_STA		;  Enable logging of thruput statistics
	    LOG_MSG		;  Enable logging of individual DAP message
				;  Encode/decode processing
	    LOG_AST		;  Enable logging of DAP message packet AST
				;  completions
	    LOG_QIO		;  Enable logging of DAP message packet QIO
				;  requests
	    ,1			;
	    DIS_MBK		;  Disable DAP message blocking
	    DIS_CRC		;  Disable file level CRC checksum
	    >			;
	  S LOGFLG,3,B		; Define bits 23-31 above as logging flag mask
	F STATE_CTX,Q		; State transition table context:
;	  S TBL_ADDR,0,L	;  State table address
;	  S CUR_ADDR,4,L	;  Current table entry address
	F VALUE,B		; State transition value
	F RCVBUFIDX,B		; Receive buffer (address table) index
	F DAPBUFSIZ,W		; Maximum DAP message size (determined via
				;  exchange of Configuration messages)
	F LNKCHN,W		; Link channel #
	F MBXCHN,W		; Associated mailbox channel #
	F RCVIOSB,Q		; Link receive I/O status block
	F XMTIOSB,Q		; Link transmit I/O status block
	F MBXIOSB,Q		; Mailbox receive I/O status block
	F MBX,Q			; Mailbox message descriptor block
	  S NCB,0,Q		; NCB descriptor block
	F RCV,Q			; Receive DAP message descriptor
	F XMT,Q			; Transmit DAP message descriptor
				;  (used in building a DAP message)
	F AUX,Q			; Auxiliary transmit DAP message descriptor
				;  (used for blocking DAP messages)
	F AUX_PTR,L		; Next byte pointer for auxiliary buffer
	F RCVBUF,L,2		; Receive buffer address table
	  K RCVBUFCNT,2		; Number of receive buffers
	F DATATYPE,B		; Copy of DAP$B_DATATYPE
	F ACCOPT,B		; Copy of DAP$B_ACCOPT
	F RAC,B			; Copy of DAP$B_RAC
	F ACCFUNC,B		; Copy of DAP$B_ACCFUNC
	F FOP,L			; Copy of DAP$L_FOP
	F NUMBER,L		; Requested random record number
	F DISPLAY,W		; Mask of optional DAP messages to return, i.e.,
				;  copy of DAP$W_DISPLAY1 or DAP$W_DISPLAY2
	F RECEIVED,W		; Mask of received XABs to link to XAB chain
				;  (i.e., XABs generated as a result of
				;  receiving optional DAP messages)
	  V <M			; Meaning:
	    KEYXAB		;  Key Definition XAB(s)
	    ALLXAB		;  Allocation XAB(s)
	    DATXAB		;  Date and Time XAB
	    PROXAB		;  Protection XAB
	    RDTXAB		;  Revision Date and Time XAB
	    >
	F ALLXABINI,L		; List of Allocation XABs initialized
	F KEYXABINI,L		; List of Key Definition XABs initialized
	F CHAIN_NXT,L		; Address of last XAB chain pointer
	F QIOBUFSIZ,W		; Largest QIO request supported by process
	F ,W,3			; Unused locations
				; ******** offset = ^X0080 = 128 ********
	F ,L,16			; Unused locations
	F MBXBUF,T,64		; Mailbox buffer
	  K MBXBUF,64		; Mailbox buffer size
	  K MBXQUOTA,<64*2>	; Mailbox quota
	  S NCBBUF,0,T,64	; NCB buffer
	    K NCBBUF,64		; NCB buffer size
				; ******** offset = ^X0100 = 256 ********
	F DAP,T,192		; DAP control block storage area
	  K DAP,192		; DAP control block size
	F STB,L,16		; Statistics block
	  K STB,64		; Statistics block size
				; ******** offset = ^X0200 = 512 ********
	F FAB,L,20		; FAB storage area
	  K FAB,80		; FAB size
	F RAB,L,17		; RAB storage area
	  K RAB,68		; RAB size
	F NAM,L,24		; NAM block storage area
	  K NAM,96		; NAM control block size
	F FHCXAB,L,11		; File Header Characteristics XAB storage area
	  K FHCXAB,44		; File Header Characteristics XAB size
	F DATXAB,L,11		; Date and Time XAB storage area
	  K DATXAB,44		; Date and Time XAB size
	F PROXAB,L,4		; Protection XAB storage area
	  K PROXAB,16		; Protection XAB size
	F SUMXAB,L,3		; Summary XAB storage area
	  K SUMXAB,12		; Summary XAB size
	F RDTXAB,L,5		; Revision Date and Time XAB storage area
	  K RDTXAB,20		; Revision Date and Time XAB size
	F ,L,1			; Unused locations
	F FILESPEC,T,128	; File specification string buffer
	  K FILESPEC,128	; File specification string buffer size
				; ******** offset = ^X0400 = 1024 ********
	F EXPANDED,T,128	; Expanded name string buffer
	  K EXPANDED,128	; Expanded name string buffer size
	F RESULTANT,T,128	; Resultant name string buffer
	  K RESULTANT,128	; Resultant name string buffer size
	F KEYBUF,T,256		; Key buffer
	  K KEYBUF,255		; Key buffer size
				; Redefine space for use by directory function:
	  S VOLNAME,0,Q		; Volume name descriptor
	  S DIRNAME,8,Q		; Directory name descriptor
	  S ,16,Q,2		; Unused locations
	  S DFILESPEC,32,T,32	; Default file specification string buffer
	    K DFILESPEC,5	; Default file specification string buffer size
	  S VOLNAME,64,T,128	; Volume name string buffer
				;  (to store node specs plus device name)
	    K VOLNAME,128	; Volume name string buffer size
	  S DIRNAME,192,T,64	; Directory name string buffer
	    K DIRNAME,60	; Directory name string buffer size
				;  (buffer will store the string '*.*;*')
				; ******** offset = ^X0600 = 1536 ********
	F ALLXAB,L,8		; Allocation XAB storage area
	  K ALLXAB,32		; Allocation XAB size
	  K MAX_AID,15		; Largest area ID value allowed
	F ,L,120		; Space for secondary Allocation XABs in array
				; ******** offset = ^X0800 = 2048 ********
	F KEYXAB,L,16		; Key Definition XAB storage area
	  K KEYXAB,64		; Key Definition XAB size
	  K MAX_REF,15		; Largest key of reference value allowed
	F ,L,240		; Space for alternate Key Definition XABs in
				;  array
				; ******** offset = ^X0C00 = 3072 ********
	F KEYNAM,L,8		; Key Name buffer
	  K KEYNAM,32		; Key Name buffer size
	F ,L,120		; Space for alternate Key Name buffers in array
				;
				; Miscellaneous constants:
				;
	K RCVEFN,1		; Link receive QIO event flag
	K XMTEFN,2		; Link transmit QIO event flag
	K MBXEFN,3		; Mailbox receive QIO event flag
	K PRTBUF,256		; Print file buffer size
				; Note: LP truncates a line > 256 bytes
				;
				; ******** offset = ^X0E00 = 3584 ********
	L WRKBLN		; Define length of this control block
	E			;

;++
; $FALSTBDEF defines FAL statistics block offsets and symbols.
;--

	$STRUCT	FAL,STBDEF
	F RCV_PKT,L		; Total # DAP message packets received
	F RCV_MSG,L		; Total # DAP messages received
	F RCV_DAT,L		; Total # records/blocks received
				;	  (i.e., # DAP Data messages)
	F RCV_USR,L		; Total # bytes of user data received
				;	  (i.e., # bytes in all records/blocks)
	F RCV_LNK,L		; Total # bytes of link data received
				;	  (i.e., # bytes in all DAP messages)
	F XMT_PKT,L		; Total # DAP message packets transmitted
	F XMT_MSG,L		; Total # DAP messages transmitted
	F XMT_DAT,L		; Total # records/blocks transmitted
				;	  (i.e., # DAP Data messages)
	F XMT_USR,L		; Total # bytes of user data transmitted
				;	  (i.e., # bytes in all records/blocks)
	F XMT_LNK,L		; Total # bytes of link data transmitted
				;	  (i.e., # bytes in all DAP messages)
	F ,L,6			; Unused locations
	L STBBLN		; Define length of this control block
	E			;

				; End of module
