	.TITLE	FALDAPIO - DAP MESSAGE I/O ROUTINES
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; Facility: FAL (DECnet File Access Listener)
;
; Abstract:
;
;	This module is responsible for receiving and transmitting DAP messages
;	and for receiving messages in the mailbox associated with the logical
;	link.
;
; Environment: VAX/VMS, user mode
;
; Author: James A. Krycka,	Creation Date:	16-JUN-1977
;
; Modified By:
;
;	V02-019	JAK0020		J A Krycka	17-JUL-1981
;		Cleanup work.
;
;	V02-018	JAK0011		J A Krycka	01-MAR-1980
;		Use mailbox message descriptor for parse of interrupt message.
;		Also, remove extraneous setting of FAL$V_RCVQIO flag.
;
;--

	.SBTTL	DECLARATIONS

;
; Include Files:
;

	$DAPPLGDEF			; Define DAP prologue symbols
	$DAPHDRDEF			; Define DAP message header
	$DAPCNFDEF			; Define DAP Configuration message
	$FALWRKDEF			; Define FAL Work Area symobls
	$FALStBDEF			; Define Statistics Block symbols
	$MSGDEF				; Define mailbox message ID codes

;
; Macros:
;
;	None
;
; Equated Symbols:
;

	ASSUME	DAP$Q_DCODE_FLG EQ 0
	ASSUME	FAL$Q_FLG EQ 0

;
; Own Storage:
;
;	None

	.SBTTL	FAL$RECEIVE - READ AND PARSE DAP MESSAGE
	.PSECT	FAL$CODE	NOSHR,EXE,RD,NOWRT,BYTE

;++
; Functional Description:
;
;	FAL$RECEIVE returns the next DAP message read from the partner process
;	as a decoded message via the DAP control block.
;	DAP inbound message blocking is supported.
;
; Calling Sequence:
;
;	BSBW	FAL$RECEIVE
;
; Input Parameters:
;
;	R8	Address of FAL work area
;	R9	Address of DAP control block
;	R10	Address of FAB
;	R11	Address of RAB
;
; Implicit Inputs:
;
;	DAP$Q_MSG_BUF1
;
; Output Parameters:
;
;	R0-R1	Destroyed
;
; Implicit Outputs:
;
;	DAP control block is updated to reflect message parse
;
; Completion Codes:
;
;	DAP$Q_DCODE_STS
;
; Side Effects:
;
;	None
;
;--

FAL$RECEIVE::				; Entry Point
	TSTW	DAP$Q_MSG_BUF1(R9)	; Is there a blocked message in buffer?
	BNEQ	10$			; Branch if yes
	BSBB	FAL$RECEIVE_PK		; Read next DAP message packet
	MOVQ	FAL$Q_RCV(R8),-		; Copy message descriptor to
		DAP$Q_MSG_BUF1(R9)	;  DAP message descriptor

;
; Parse next DAP message.
;

10$:	PUSHL	R9			; Push address of DAP control block
	CALLS	#1,W^FAL$DECODE_MSG	; Parse the message

;
; Update counter and log the DAP message.
;

	INCL	FAL$L_STB+FAL$L_RCV_MSG(R8)
					; Count DAP message for logging
	BBC	#FAL$V_LOG_MSG,(R8),20$	; Branch if logging disabled
	PUSHL	DAP$Q_MSG_BUF2+4(R9)	; Adddress of DAP message just decoded
	PUSHL	DAP$Q_MSG_BUF2(R9)	; Size of DAP message just decoded
	PUSHAB	W^FAL$GT_DECODE		; Address of counted ASCII string
	CALLS	#3,W^FAL$DISPLAY_MSG	; Print the message
20$:	RSB				; Exit

	.SBTTL	FAL$RECEIVE_PK - RECEIVE DAP PACKET
	.PSECT	FAL$CODE	NOSHR,EXE,RD,NOWRT,BYTE

;++
; Functional Description:
;
;	FAL$RECEIVE_PK reads the next DAP message packet from partner process.
;
; Calling Sequence:
;
;	BSBW	FAL$RECEIVE_PK
;
; Input Parameters:
;
;	R8	Address of FAL work area
;	R9	Address of DAP control block
;	R10	Address of FAB
;	R11	Address of RAB
;
; Implicit Inputs:
;
;	None
;
; Output Parameters:
;
;	R0	Completion code
;	R1	Destroyed
;
; Implicit Outputs:
;
;	FAL$Q_RCV
;
; Completion Codes:
;
;	None
;
; Side Effects:
;
;	None
;
;--

FAL$RECEIVE_PK::			; Entry Point
	BBS	#FAL$V_RCVAST,(R8),10$	; Branch if receive has completed
	$WAITFR_S-			; Otherwise wait for it to complete
		EFN=#FAL$K_RCVEFN	;
	CHECK_SS			; Check status code
10$:	$CLRBIT	#FAL$V_RCVQIO,(R8)	; Clear receive QIO outstanding flag
	$CLRBIT	#FAL$V_RCVAST,(R8)	; Clear receive AST delivered flag

;
; Form receive descriptor pointing to the DAP message packet just read.
;

	MOVZBL	FAL$B_RCVBUFIDX(R8),R0	; Get index of buffer
	MOVZWL	FAL$Q_RCVIOSB+2(R8),-	; Store message size in receive
		FAL$Q_RCV(R8)		;  descriptor
	MOVL	FAL$L_RCVBUF(R8)[R0],-	; Store buffer address in receive
		FAL$Q_RCV+4(R8)		;  descriptor

;
; Post a receive to replenish the one just completed.
;

	BSBB	FAL$RCV_QIO		; Issue a read with an AST
	RSB				; Exit

	.SBTTL	FAL$RCV_QIO - QUEUE LINK RECEIVE
	.PSECT	FAL$CODE	NOSHR,EXE,RD,NOWRT,BYTE

;++
; Functional Description:
;
;	FAL$RCV_QIO issues a QIO read request with an AST for the logical link.
;
; Calling Sequence:
;
;	BSBW	FAL$RCV_QIO
;
; Input Parameters:
;
;	R8	Address of FAL work area
;	R9	Address of DAP control block
;	R10	Address of FAB
;	R11	Address of RAB
;
; Implicit Inputs:
;
;	None
;
; Output Parameters:
;
;	R0	Completion code
;	R1	Destroyed
;
; Implicit Outputs:
;
;	None
;
; Completion Codes:
;
;	None
;
; Side Effects:
;
;	None
;
;--

FAL$RCV_QIO::				; Entry Point
	$SETBIT	#FAL$V_RCVQIO,(R8)	; Signal receive QIO outstanding

;
; Log our intent to post a receive QIO.
;

	BBC	#FAL$V_LOG_QIO,(R8),10$	; Branch if logging disabled
	MOVAB	W^FAL$GT_RQIO,R1	; Get address of counted string
	BSBW	FAL$LOG_QIO		; Log QIO posted to print file

;
; Determine next receive buffer to use and update receive buffer index.
;

10$:	MOVZBL	FAL$B_RCVBUFIDX(R8),R0	; Get index of last buffer used
	INCL	R0			; Increment it
	CMPL	R0,#<FAL$K_RCVBUFCNT-1>	; Is it out of range?
	BLEQU	20$			; Branch if not
	CLRL	R0			; Reset it
20$:	MOVB	R0,FAL$B_RCVBUFIDX(R8)	; Store new index value

;
; Issue a read with an AST for the logical link.
;

	MOVL	FAL$L_RCVBUF(R8)[R0],R1	; Get address of receive buffer
	$QIO_S	EFN=#FAL$K_RCVEFN-	; Issue read with AST
		CHAN=FAL$W_LNKCHN(R8)-	;
		FUNC=#IO$_READVBLK-	;
		IOSB=FAL$Q_RCVIOSB(R8)-	;
		ASTADR=W^FAL$RCV_AST-	;
		ASTPRM=R8-		; FAL work area address
		P1=(R1)-		; Receive buffer address
		P2=FAL$W_DAPBUFSIZ(R8)	; Receive buffer size
	CHECK_SS			; Check status code
	RSB				; Exit

	.SBTTL	FAL$RCV_AST - LINK RECEIVE AST
	.PSECT	FAL$CODE	NOSHR,EXE,RD,NOWRT,BYTE

;++
; Functional Description:
;
;	FAL$RCV_AST processes a receive AST for the logical link.
;
; Calling Sequence:
;
;	Call	#5,FAL$RCV_AST	(invoked by VAX/VMS as an AST)
;
; Input Parameters:
;
;	4(AP)	Address of FAL work area
;
; Implicit Inputs:
;
;	None
;
; Output Parameters:
;
;	None
;
; Implicit Outputs:
;
;	FAL$V_RCVAST
;
; Completion Codes:
;
;	None
;
; Side Effects:
;
;	None
;
;--

	.ENTRY	FAL$RCV_AST,^M<R7,R8>	; Entry point from executive
	MOVL	4(AP),R8		; Get address of FAL work area
	$SETBIT	#FAL$V_RCVAST,(R8)	; Signal receive AST delivered
	BLBC	FAL$Q_RCVIOSB(R8),20$	; Branch on receive failure

;
; Update counters and log delivery of receive AST.
;

	MOVZWL	FAL$Q_RCVIOSB+2(R8),R0	; Get message size
	MOVAL	FAL$L_STB(R8),R7	; Get address of statistics block
	INCL	FAL$L_RCV_PKT(R7)	; Increment RCV message packet count
	ADDL2	R0,FAL$L_RCV_LNK(R7)	; Update RCV message byte count
	BBC	#FAL$V_LOG_AST,(R8),10$	; Branch if logging disabled
	MOVAB	W^FAL$GT_RECV,R1	; Get address of counted string
	BSBW	FAL$LOG_AST		; Log AST delivered to print file
10$:	RET				; Exit
20$:	MOVZWL	FAL$Q_RCVIOSB(R8),R0	; Save error code
	CHECK_SS			;  and exit FAL

	.SBTTL	FAL$TRANSMIT - SEND DAP MESSAGE
	.PSECT	FAL$CODE	NOSHR,EXE,RD,NOWRT,BYTE

;++
; Functional Description:
;
;	FAL$TRANSMIT writes the next DAP message to the partner process.
;	DAP outbound message blocking is supported.
;
; Calling Sequence:
;
;	BSBW	FAL$TRANSMIT
;
; Input Parameters:
;
;	R8	Address of FAL work area
;	R9	Address of DAP control block
;	R10	Address of FAB
;	R11	Address of RAB
;
; Implicit Inputs:
;
;	DAP$V_MSGBLK
;	FAL$L_AUX_PTR
;	FAL$Q_AUX
;	FAL$Q_XMT
;	FAL$W_DAPBUFSIZ
;	FAL$V_LAST_MSG
;	Flags field of the DAP message
;
; Output Parameters:
;
;	R0	Completion code
;	R1	Destroyed
;
; Implicit Outputs:
;
;	None
;
; Completion Codes:
;
;	None
;
; Side Effects:
;
;	None
;
;--

FAL$TRANSMIT::				; Entry Point
	PUSHR	#^M<R2,R3,R4,R5>	; Save registers

;
; Update counter and log the DAP message.
;

	INCL	FAL$L_STB+FAL$L_XMT_MSG(R8)
					; Count this message for logging
	BBC	#FAL$V_LOG_MSG,(R8),10$	; Branch if logging disabled
	PUSHL	FAL$Q_XMT+4(R8)		; Address of DAP message
	PUSHL	FAL$Q_XMT(R8)		; Size of DAP message
	PUSHAB	W^FAL$GT_ENCODE		; Address of counted ASCII string
	CALLS	#3,W^FAL$DISPLAY_MSG	; Print the message

;
; Does partner support message blocking?
;

10$:	BBC	#DAP$V_MSGBLK,-		; Branch is message blocking is
		DAP$Q_SYSCAP(R9),80$	;  disabled

;
; Are there any messages in AUX buffer waiting to go?
;

	TSTL	FAL$Q_AUX(R8)		;
	BEQL	20$			; Branch if not

;
; Will new message fit in AUX buffer with other messages?
;

	ADDL3	FAL$Q_XMT(R8),FAL$Q_AUX(R8),R0
	CMPW	R0,FAL$W_DAPBUFSIZ(R8)	; Check against max DAP transmission
	BLEQ	40$			; Branch if yes

;
; Flush out AUX buffer to make room for new message.
;

	MOVQ	FAL$Q_AUX(R8),R4	; Put buffer descriptor in <R4,R5>
	BSBB	FAL$TRANSMIT_PK		; Send the blocked messages
	CLRL	FAL$Q_AUX(R8)		; Initialize byte count descriptor
	MOVL	FAL$Q_AUX+4(R8),FAL$L_AUX_PTR(R8)
					; Initialize next byte pointer

;
; Does new message support message blocking?
;

20$:	BBC	#<DAP$V_LENGTH+8>,-	;
		@FAL$Q_XMT+4(R8),80$	; Branch if not (implied flush)

;
; Is this last message of sequence?
;

	BBS	#FAL$V_LAST_MSG,(R8),80$; Branch if yes (explicit flush)

;
; Move new message to AUX buffer.
;

	MOVL	FAL$Q_XMT(R8),FAL$Q_AUX(R8)
					; Update byte count in descriptor
	MOVC3	FAL$Q_XMT(R8),@FAL$Q_XMT+4(R8),@FAL$Q_AUX+4(R8)
	MOVL	R3,FAL$L_AUX_PTR(R8)	; Update next byte pointer
	BRB	100$			; Almost done
;
; Append new message to AUX buffer.
;

40$:	MOVL	R0,FAL$Q_AUX(R8)	; Update byte count in descriptor
	MOVC3	FAL$Q_XMT(R8),@FAL$Q_XMT+4(R8),@FAL$L_AUX_PTR(R8)
	MOVL	R3,FAL$L_AUX_PTR(R8)	; Update next byte pointer

;
; Does new message support message blocking?
;

	BBC	#<DAP$V_LENGTH+8>,-	;
		@FAL$Q_XMT+4(R8),60$	; Branch if not (implied flush)

;
; Is this last message of sequence?
;

	BBC	#FAL$V_LAST_MSG,(R8),100$ ; Branch if not

;
; Send blocked messages from AUX buffer.
;

60$:	MOVQ	FAL$Q_AUX(R8),R4	; Put buffer descriptor in <R4,R5>
	BSBB	FAL$TRANSMIT_PK		; Send the blocked messages
	CLRL	FAL$Q_AUX(R8)		; Initialize descriptor
	MOVL	FAL$Q_AUX+4(R8),FAL$L_AUX_PTR(R8)
	BRB	100$			; Almost done

;
; Send new message from XMT buffer.
;

80$:	MOVQ	FAL$Q_XMT(R8),R4	; Put buffer descriptor in <R4,R5>
	BSBB	FAL$TRANSMIT_PK		; Send the message

;
; Clean house and return.
;

100$:	$CLRBIT	#FAL$V_LAST_MSG,(R8)	; Enable message blocking
	POPR	#^M<R2,R3,R4,R5>	; Restore registers
	RSB				; Exit

	.SBTTL	FAL$TRANSMIT_PK - SEND DAP PACKET
	.PSECT	FAL$CODE	NOSHR,EXE,RD,NOWRT,BYTE

;++
; Functional Description:
;
;	FAL$TRANSMIT_PK sends the specified packet of DAP messages to the
;	partner process.
;
; Calling Sequence:
;
;	BSBW	FAL$TRANSMIT_PK
;
; Input Parameters:
;
;	R4-R5	Descriptor of message packet to transmit
;	R8	Address of FAL work area
;	R9	Address of DAP control block
;	R10	Address of FAB
;	R11	Address of RAB
;
; Implicit Inputs:
;
;	None
;
; Output Parameters:
;
;	R0	Completion code
;	R1	Destroyed
;
; Implicit Outputs:
;
;	None
;
; Completion Codes:
;
;	None
;
; Side Effects:
;
;	None
;
;--

FAL$TRANSMIT_PK::			; Entry Point
	BSBB	FAL$XMT_QIO		; Send packet to partner
	$WAITFR_S-			; Wait for I/O to complete
		EFN=#FAL$K_XMTEFN	;
	CHECK_SS			; Check status code
	$CLRBIT	#FAL$V_XMTQIO,(R8)	; Clear transmit QIO outstanding flag
	$CLRBIT	#FAL$V_XMTAST,(R8)	; Clear transmit AST delivered flag
	RSB				; Exit

	.SBTTL	FAL$XMT_QIO - QUEUE LINK TRANSMIT
	.PSECT	FAL$CODE	NOSHR,EXE,RD,NOWRT,BYTE

;++
; Functional Description:
;
;	FAL$XMT_QIO issues a QIO write request with an AST for the logical link.
;
; Calling Sequence:
;
;	BSBW	FAL$XMT_QIO
;
; Input Parameters:
;
;	R4-R5	Descriptor of message packet to transmit
;	R8	Address of FAL work area
;	R9	Address of DAP control block
;	R10	Address of FAB
;	R11	Address of RAB
;
; Implicit Inputs:
;
;	None
;
; Output Parameters:
;
;	R0	Completion code
;	R1	Destroyed
;
; Implicit Outputs:
;
;	None
;
; Completion Codes:
;
;	None
;
; Side Effects:
;
;	None
;
;--

FAL$XMT_QIO::				; Entry Point
	$SETBIT	#FAL$V_XMTQIO,(R8)	; Signal transmit QIO outstanding

;
; Log out intent to post a transmit QIO.
;

	BBC	#FAL$V_LOG_QIO,(R8),10$	; Branch if logging disabled
	MOVAB	W^FAL$GT_XQIO,R1	; Get address of counted string
	BSBW	FAL$LOG_QIO		; Log QIO posted to print file

;
; Issue a write with a AST for the logical link.
;

10$:	$QIO_S	EFN=#FAL$K_XMTEFN-	; Issue write with AST
		CHAN=FAL$W_LNKCHN(R8)-	;
		FUNC=#IO$_WRITEVBLK-	;
		IOSB=FAL$Q_XMTIOSB(R8)-	;
		ASTADR=W^FAL$XMT_AST-	;
		ASTPRM=R8-		; FAL work area address
		P1=(R5)-		; Transmit buffer address
		P2=R4			; Transmit buffer size
	CHECK_SS			; Check status code
	RSB				; Exit

	.SBTTL	FAL$XMT_AST - LINK TRANSMIT AST
	.PSECT	FAL$CODE	NOSHR,EXE,RD,NOWRT,BYTE

;++
; Functional Description:
;
;	FAL$XMT_AST processes a transmit AST for the logical link.
;
; Calling Sequence:
;
;	Call	#5,FAL$XMT_AST	(invoked by VAX/VMS as an AST)
;
; Input Parameters:
;
;	4(AP)	Address of FAL work area
;
; Implicit Inputs:
;
;	None
;
; Output Parameters:
;
;	None
;
; Implicit Outputs:
;
;	FAL$V_XMTAST
;
; Completion Codes:
;
;	None
;
; Side Effects:
;
;	None
;
;--

	.ENTRY	FAL$XMT_AST,^M<R7,R8>	; Entry point from executive
	MOVL	4(AP),R8		; Get address of FAL work area
	$SETBIT	#FAL$V_XMTAST,(R8)	; Signal transmit AST delivered
	BLBC	FAL$Q_XMTIOSB(R8),20$	; Branch on transmit failure

;
; Update counters and log delivery of transmit AST.
;

	MOVZWL	FAL$Q_XMTIOSB+2(R8),R0	; Save # bytes transmitted
	MOVAL	FAL$L_STB(R8),R7	; Get address of statistics block
	INCL	FAL$L_XMT_PKT(R7)	; Increment XMT message packet count
	ADDL2	R0,FAL$L_XMT_LNK(R7)	; Update XMT message byte count
	BBC	#FAL$V_LOG_AST,(R8),10$	; Branch if logging disabled
	MOVAB	W^FAL$GT_XMIT,R1	; Get address of counted string
	BSBW	FAL$LOG_AST		; Log AST delivered to print file
10$:	RET				; Exit
20$:	MOVZWL	FAL$Q_XMTIOSB(R8),R0	; Save error code
	CHECK_SS			;  and exit FAL

	.SBTTL	FAL$RECEIVE_MBX - READ AND PARSE INTERRUPT
	.PSECT	FAL$CODE	NOSHR,EXE,RD,NOWRT,BYTE

;++
; Functional Description:
;
;	FAL$RECEIVE_MBX returns the next DAP message sent as an interrupt
;	message by the partner process. It is returned as a decoded message
;	via the DAP control block.
;
; Calling Sequence:
;
;	BSBW	FAL$RECEIVE_MBX
;
; Input Parameters:
;
;	R8	Address of FAL work area
;	R9	Address of DAP control block
;	R10	Address of FAB
;	R11	Address of RAB
;
; Implicit Inputs:
;
;	FAL$Q_MBX
;
; Output Parameters:
;
;	R0-R1	Destroyed
;
; Implicit Outputs:
;
;	DAP control block is updated to reflect message parse.
;
; Completion Codes:
;
;	DAP$Q_DCODE_STS
;
; Side Effects:
;
;	None
;
;--

FAL$RECEIVE_MBX::			; Entry Point
	BBS	#FAL$V_MBXAST,(R8),10$	; Branch if receive has completed
	$WAITFR_S-			; Otherwise wait for it to complete
		EFN=#FAL$K_MBXEFN	;
	CHECK_SS			; Check status code
10$:	$CLRBIT	#FAL$V_MBXQIO,(R8)	; Clear mailbox QIO outstanding flag
	$CLRBIT	#FAL$V_MBXAST,(R8)	; Clear mailbox AST delivered flag

;
; Post a receive to replenish the one just completed.
; Note:	We run the risk of receiving another mailbox message immediately
;	which may overwrite the current message before we can process it.
;	This would be a very very unlikely occurrence from a timing point of
;	view, and the partner process would be misbehaving badly!
;

	BSBB	FAL$MBX_RCV_QIO		; Issue a read with an AST

;
; Parse next DAP message.
;

	MOVQ	FAL$Q_MBX(R8),-		; Copy mailbox message descriptor to
		DAP$Q_MSG_BUF1(R9)	;  DAP message descriptor
	PUSHL	R9			; Push address of DAP control block
	CALLS	#1,W^FAL$DECODE_MSG	; Parse the message

;
; Update counter and log the DAP message.
;

	INCL	FAL$L_STB+FAL$L_RCV_MSG(R8)
					; Count DAP message for logging
	BBC	#FAL$V_LOG_MSG,(R8),20$	; Branch if logging disabled
	PUSHL	DAP$Q_MSG_BUF2+4(R9)	; Adddress of DAP message just decoded
	PUSHL	DAP$Q_MSG_BUF2(R9)	; Size of DAP message just decoded
	PUSHAB	W^FAL$GT_DECODE		; Address of counted ASCII string
	CALLS	#3,W^FAL$DISPLAY_MSG	; Print the message
20$:	RSB				; Exit

	.SBTTL	FAL$MBX_RCV_QIO - QUEUE MAILBOX RECEIVE
	.PSECT	FAL$CODE	NOSHR,EXE,RD,NOWRT,BYTE

;++
; Functional Description:
;
;	FAL$MBX_RCV_QIO issues a QIO read request with an AST for the
;	mailbox associated with the logical link.
;
; Calling Sequence:
;
;	BSBW	FAL$MBX_RCV_QIO
;
; Input Parameters:
;
;	R8	Address of FAL work area
;	R9	Address of DAP control block
;	R10	Address of FAB
;	R11	Address of RAB
;
; Implicit Inputs:
;
;	None
;
; Output Parameters:
;
;	R0	Completion code
;	R1	Destroyed
;
; Implicit Outputs:
;
;	None
;
; Completion Codes:
;
;	None
;
; Side Effects:
;
;	None
;
;--

FAL$MBX_RCV_QIO::			; Entry Point
	$SETBIT	#FAL$V_MBXQIO,(R8)	; Signal mailbox QIO outstanding

;
; Log our intent to post a mailbox receive QIO.
;

	BBC	#FAL$V_LOG_QIO,(R8),10$	; Branch if logging disabled
	MOVAB	W^FAL$GT_MQIO,R1	; Get address of counted string
	BSBW	FAL$LOG_QIO		; Log QIO posted to print file

;
; Issue a read with an AST for the mailbox.
;

10$:	$QIO_S	EFN=#FAL$K_MBXEFN-	; Issue read with AST
		CHAN=FAL$W_MBXCHN(R8)-	;
		FUNC=#IO$_READVBLK-	;
		IOSB=FAL$Q_MBXIOSB(R8)-	;
		ASTADR=W^FAL$MBX_RCV_AST-
		ASTPRM=R8-		; FAL work area address
		P1=FAL$T_MBXBUF(R8)-	; Mailbox buffer address
		P2=#FAL$K_MBXBUF	; Mailbox buffer size
	CHECK_SS			; Check status code
	RSB				; Exit

	.SBTTL	FAL$MBX_RCV_AST - MAILBOX RECEIVE AST
	.PSECT	FAL$CODE	NOSHR,EXE,RD,NOWRT,BYTE

;++
; Functional Description:
;
;	FAL$MBX_RCV_AST processes an AST for the mailbox associated with the
;	logical link. Depending on the type of message, one of three actions is
;	performed:
;	(1) if it is an interrupt message, a descriptor is formed to point to
;	    the DAP message.
;	(2) if the message indicates that the link has been broken, FAL is
;	    terminated.
;	(3) if it is an extraneous message, it is simply discarded.
;
; Calling Sequence:
;
;	Call	#5,FAL$MBX_RCV_AST	(invoked by VAX/VMS as an AST)
;
; Input Parameters:
;
;	4(AP)	Address of FAL work area
;
; Implicit Inputs:
;
;	None
;
; Output Parameters:
;
;	None
;
; Implicit Outputs:
;
;	FAL$Q_MBX
;	FAL$V_MBXAST
;
; Completion Codes:
;
;	None
;
; Side Effects:
;
;	None
;
;--

	.ENTRY	FAL$MBX_RCV_AST,^M<R7,R8> ; Entry point from executive
	MOVL	4(AP),R8		; Get address of FAL work area
	$SETBIT	#FAL$V_MBXAST,(R8)	; Signal mailbox AST delivered
	BLBS	FAL$Q_MBXIOSB(R8),10$	; Branch on success
	MOVZWL	FAL$Q_RCVIOSB(R8),R0	; Save error code
	CHECK_SS			;  and exit FAL

;
; Log the mailbox message type code.
;

10$:	BBC	#FAL$V_LOG_STA,(R8),20$	; Branch if logging disabled
	$FAO_S	CTRSTR=W^FAL$GQ_MBXMSG-	; Format the message
		OUTLEN=W^FAL$GW_PRTLENA-;
		OUTBUF=W^FAL$GQ_PRTBUFA-;
		P1=FAL$T_MBXBUF(R8)	; First four bytes of mailbox message
	CHECK_SS			; Check status code
	BSBW	FAL$PRINT_FAOA		; Print message

;
; Take appropriate action depending on the mailbox message type.
;

20$:	MOVAB	FAL$T_MBXBUF(R8),R1	; Get address of mailbox buffer

	ASSUME	MSG$_ABORT EQ 48
	ASSUME	MSG$_CONFIRM EQ 49
	ASSUME	MSG$_CONNECT EQ 50
	ASSUME	MSG$_DISCON EQ 51
	ASSUME	MSG$_EXIT EQ 52
	ASSUME	MSG$_INTMSG EQ 53
	ASSUME	MSG$_PATHLOST EQ 54
	ASSUME	MSG$_PROTOCOL EQ 55
	ASSUME	MSG$_REJECT EQ 56
	ASSUME	MSG$_THIRDPARTY EQ 57

	$CASEW	SELECTOR=(R1)+,-	; Mailbox message type:
		BASE=#MSG$_ABORT-	;
		DISPL=<-		;
		    FAL$TERMINATE-	;  Disconnect abort
		    IGNORE-		;  Connect confirm
		    IGNORE-		;  Connect initiate
		    FAL$TERMINATE-	;  Synchronous disconnect
		    FAL$TERMINATE-	;  Partner exited prematurely
		    INTERRUPT-		;  Interrupt message
		    FAL$TERMINATE-	;  Partner no longer accessible
		    FAL$TERMINATE-	;  NSP protocol error
		    IGNORE-		;  Connect reject
		    FAL$TERMINATE-	;  Thirdparty disconnect
		>			;

;
; Ignore unexpected mailbox message.
;

IGNORE:					; Discard junk mail
	CLRL	R0			; Make this a null message
	MOVQ	R0,FAL$Q_MBX(R8)	; Store descriptor of interrupt data
	RET				; Exit

;
; An interrupt message has been received.
;

INTERRUPT:				;
	TSTW	(R1)+			; Skip over unit #
	MOVZBL	(R1)+,R0		; Skip over device name stored
	ADDL2	R0,R1			;  as a counted ASCII string
	MOVZBL	(R1)+,R0		; Get size of interrupt data field
	MOVQ	R0,FAL$Q_MBX(R8)	; Store descriptor of interrupt data

;
; Update counters and log delivery of mailbox AST containing a DAP interrupt
; message.
;

	MOVAL	FAL$L_STB(R8),R7	; Get address of statistics block
	INCL	FAL$L_RCV_PKT(R7)	; Increment RCV message packet count
	ADDL2	R0,FAL$L_RCV_LNK(R7)	; Update RCV message byte count
	BBC	#FAL$V_LOG_AST,(R8),30$	; Branch if logging disabled
	MOVAB	W^FAL$GT_INTE,R1	; Get address of counted string
	BSBW	FAL$LOG_AST		; Log AST delivered to print file
30$:	RET				; Exit

	.END				; End of module
