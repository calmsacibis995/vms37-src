	.TITLE	FALLOGGER - FAL LOGGING ROUTINES
	.IDENT	'V03-001'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; Facility: FAL (DECnet File Access Listener)
;
; Abstract:
;
;	This module contains FAL logging routines and associated text.
;
; Environment: VAX/VMS, user mode
;
; Author: James A. Krycka,	Creation Date:	16-JUN-1977
;
; Modified By:
;
;	V03-001	JAK0028		J A Krycka	23-APR-1982
;		Clarify text in statistics display.
;
;	V02-029	JAK0022		J A Krycka	31-AUG-1981
;		Add mnemonics for new message functions.
;
;	V02-028	JAK0016		J A Krycka	31-DEC-1980
;		Continuation of V02-027.
;
;	V02-027	JAK0015		J A Krycka	07-OCT-1980
;		Modifications to DAP message logging format.
;
;--

	.SBTTL	DECLARATIONS
	.PSECT	FAL$DATA_LOGGER	SHR,NOEXE,RD,WRT,QUAD

;
; Include Files:
;

	$DAPHDRDEF			; Define DAP message header
	$FALSTBDEF			; Define Statistics Block symbols
	$FALWRKDEF			; Define FAL Work Area symbols

;
; Macros:
;
;	None
;
; Equated Symbols:
;

	ASSUME	FAL$Q_FLG EQ 0

;
; Own Storage:
;

;
; Storage of status code to report on image exit:
;

FAL$GL_EXIT::				; Status code
	.LONG	SS$_NORMAL		; Initialize with success code

;
; Data structures for the print file:
;

	.ALIGN	LONG			; Required for FABs and RABs
FAL$PRTFAB::				; File Access Block
	$FAB	FAC=PUT-		;  Put access
		FOP=SQO-		;  Sequential-only access
		RAT=CR-			;  Carriage control
		FNA=FAL$GT_PRTNAM-	;  File name string address
		FNS=FAL$K_PRTNAM	;  File name string size
FAL$PRTRAB::				; Record Access Block
	$RAB	FAB=FAL$PRTFAB-		;  Address of associated FAB
		RBF=0-			;  Record buffer address--t.b.s. later
		RSZ=0			;  Record buffer size--t.b.s. later
FAL$GQ_PRTBUF::				; Output string descriptor for FAO
	.BLKQ	1			;  when called from non-AST-level code
FAL$GQ_PRTBUFA::			; Output string descriptor for FAO
	.BLKQ	1			;  when called from AST-level code
FAL$GW_PRTLEN::				; Formatted message length from FAO
	.BLKW	1			;
FAL$GW_PRTLENA::			; Formatted message length from FAO
	.BLKW	1			;
FAL$GT_PRTNAM::				; Print device name
	.ASCII	\SYS$OUTPUT\		;
FAL$K_PRTNAM=.-FAL$GT_PRTNAM		; Print device name length

;
; Time related storage:
;

	.ALIGN	LONG			; Required for FABs and RABs
FAL$GQ_TIME0::				; Time of link connect
	.BLKQ	1			;
FAL$GQ_TIME1::				; Time of link disconnect
	.BLKQ	1			;

;
; Flags to control logging printout:
;

FAL$GL_LOGFLG::				; Print file logging flags
	.LONG	0			; Default value
PERLINE=20				; Maximum number of DAP message bytes
					;  to display per line in print file
FAL$GL_LOGCNT::				; Maximum # bytes per message to log
	.LONG	PERLINE			; Default value

;
; FAO related descriptor blocks with text:
;

FAL$GQ_MBXNAM::				; Name of associated mailbox
	QBLOCK	TEXT=<<_!AC!UW:>>
FAL$GQ_UIC::				; File owner UIC string
	QBLOCK	TEXT=<<[!3OW,!3OW]>>
FAL$GQ_CALLER::				; Requestor ID message
	QBLOCK	TEXT=<!/-
		<FAL !AC started execution on !23%D!/>-
		<  from !AS using a log mask of !XB!/>-
	>
FAL$GQ_LINKUP::				; Link established message
	QBLOCK	TEXT=<<Logical link was established  on !23%D>>
FAL$GQ_REQNAM::				; Requested file name message
	QBLOCK	TEXT=<<Requested filename was !AS>>
FAL$GQ_RESNAM::				; Resultant file name message
	QBLOCK	TEXT=<<Resultant filename was !AD>>
FAL$GQ_STATUS::				; Status code message
	QBLOCK	TEXT=<<DAP error code of !XW generated>>
FAL$GQ_MBXMSG::				; Mailbox message type
	QBLOCK	TEXT=<<Mailbox message type !XW received>>
FAL$GQ_LINKDOWN::			; Link terminated message
	QBLOCK	TEXT=<<Logical link was  terminated  on !23%D>>
FAL$GQ_CONNTIME::			; Link connect time message
	QBLOCK	TEXT=<<!/Link connect time for file activity was !%D>>
FAL$GQ_STAT1::				; Statistics message part 1
	QBLOCK	TEXT=<!/-
		<File Access Statistics:      Receive  Transmit Composite!/>-
		<!23*-      !7*-  !8*- !9*-!/>-
		<# DAP Message Packets     !3(10UL)!/>-
		<# DAP Message Units       !3(10UL)>-
	>
FAL$GQ_STAT2::				; Statistics message part 2
	QBLOCK	TEXT=<-
		<# User Records/Blocks     !3(10UL)!/>-
		<# Bytes of User Data      !3(10UL)!/>-
		<# Bytes of Link Data      !3(10UL)>-
	>
FAL$GQ_STAT3::				; Statistics message part 3
	QBLOCK	TEXT=<-
		<User Throughput (bit/sec) !3(10UL)!/>-
		<Link Throughput (bit/sec) !3(10UL)>-
	>
FAL$GQ_STAT4::				; Statistics message part 4
	QBLOCK	TEXT=<-
		<Average Record/Block Size !3(10UL)>-
	>
FAL$GQ_STAT5::				; Statistics message part 5
	QBLOCK	TEXT=<-
		<DAP Protocol Efficiency   !7UB.!1UB%!7UB.!1UB%!7UB.!1UB%>-
	>
FAL$GQ_EXIT::				; Exit message
	QBLOCK	TEXT=<<!/!18*- FAL exited on !%D!/>>
FAL$GQ_LOGMSG::				; Print DAP message (first line)
	QBLOCK	TEXT=<<!AC !AC !AC!1(5UW) --!#(3XB)>>
FAL$GQ_LOGMSG2::			; Print DAP message (continuation lines)
	QBLOCK	TEXT=<<!18* --!#(3XB)>>
FAL$GQ_LOGQIO::				; Print QIO message
	QBLOCK	TEXT=<<!AC QIO issued>>
FAL$GQ_LOGAST::				; Print AST message
	QBLOCK	TEXT=<<!AC AST delivered!1(5UW) bytes>>

;
; Additional text stored in counted ASCII strings:
;

FAL$GT_RECV::				; Text for LOGAST
	.ASCIC	\Receive \		;
FAL$GT_XMIT::				; Text for LOGAST
	.ASCIC	\Transmit\		;
FAL$GT_INTE::				; Text for LOGAST
	.ASCIC	\Get Mail\		;
FAL$GT_RQIO::				; Text for LOGQIO
	.ASCIC	\Receive \		;
FAL$GT_XQIO::				; Text for LOGQIO
	.ASCIC	\Transmit\		;
FAL$GT_MQIO::				; Text for LOGQIO
	.ASCIC	\Get Mail\		;
FAL$GT_ENCODE::				; Text for LOGMSG
	.ASCIC	\<---\			;
FAL$GT_DECODE::				; Text for LOGMSG
	.ASCIC	\--->\			;
FAL$GT_MSG::				; Text for LOGMSG
	.ASCIC	\msg\			;

;
; The following counted ASCII strings are arranged in an array where each string
; must begin one longword apart to accomodate indexed addressing into the array.
;

	.ALIGN	LONG
FAL$GL_MSGTYPE::			; DAP message type text
	.ASCIC	\???\			; Unknown message type
	.ASCIC	\CNF\			; Configuration message
	.ASCIC	\ATT\			; Attributes message
	.ASCIC	\ACC\			; Access message
	.ASCIC	\CTL\			; Control message
	.ASCIC	\CON\			; Continue Transfer message
	.ASCIC	\ACK\			; Acknowledge messasge
	.ASCIC	\CMP\			; Access Complete message
	.ASCIC	\DAT\			; Data message
	.ASCIC	\STS\			; Status message
	.ASCIC	\KEY\			; Key Definition message
	.ASCIC	\ALL\			; Allocation message
	.ASCIC	\SUM\			; Summary message
	.ASCIC	\TIM\			; Date and Time message
	.ASCIC	\PRO\			; Protection messsage
	.ASCIC	\NAM\			; Name message

;
; The following counted ASCII strings are arranged in an array where each string
; must begin one longword apart to accomodate indexed addressing into the array.
;

	.ALIGN	LONG
FAL$GL_ACCFUNC::			; Access function code text
	.ASCIC	\???\			; Unknown function code
	.ASCIC	\OPN\			; OPEN
	.ASCIC	\CRE\			; CREATE
	.ASCIC	\REN\			; RENAME
	.ASCIC	\ERA\			; ERASE
	.ASCIC	\rsv\			; Reserved
	.ASCIC	\DIR\			; DIRECTORY-LIST
	.ASCIC	\SUB\			; SUBMIT
	.ASCIC	\EXE\			; EXECUTE

;
; The following counted ASCII strings are arranged in an array where each string
; must begin one longword apart to accomodate indexed addressing into the array.
;

	.ALIGN	LONG
FAL$GL_CTLFUNC::			; Control function code text
	.ASCIC	\???\			; Unknown function code
	.ASCIC	\GET\			; GET or READ
	.ASCIC	\CON\			; CONNECT
	.ASCIC	\UPD\			; UPDATE
	.ASCIC	\PUT\			; PUT or WRITE
	.ASCIC	\DEL\			; DELETE
	.ASCIC	\REW\			; REWIND
	.ASCIC	\TRU\			; TRUNCATE
	.ASCIC	\MOD\			; MODIFY (reserved)
	.ASCIC	\REL\			; RELEASE
	.ASCIC	\FRE\			; FREE
	.ASCIC	\XTB\			; EXTEND-BEGIN
	.ASCIC	\FLU\			; FLUSH
	.ASCIC	\NXV\			; NEXT VOLUME (reserved)
	.ASCIC	\FND\			; FIND
	.ASCIC	\XTE\			; EXTEND-END
	.ASCIC	\DSP\			; DISPLAY
	.ASCIC	\SPF\			; SPACE FORWARD
	.ASCIC	\SFB\			; SPACE BACKWARD

;
; The following counted ASCII strings are arranged in an array where each string
; must begin one longword apart to accomodate indexed addressing into the array.
;

	.ALIGN	LONG
FAL$GL_CONFUNC::			; Continue Transfer function code text
	.ASCIC	\???\			; Unknown function code
	.ASCIC	\TRY\			; TRY AGAIN
	.ASCIC	\SKR\			; SKIP to next record
	.ASCIC	\ABO\			; ABORT
	.ASCIC	\RES\			; RESUME

;
; The following counted ASCII strings are arranged in an array where each string
; must begin one longword apart to accomodate indexed addressing into the array.
;

	.ALIGN	LONG
FAL$GL_CMPFUNC::			; Access Complete function code text
	.ASCIC	\???\			; Unknown function code
	.ASCIC	\CLS\			; CLOSE
	.ASCIC	\RSP\			; RESPONSE
	.ASCIC	\RST\			; RESET
	.ASCIC	\DSC\			; DISCONNECT
	.ASCIC	\SKF\			; SKIP to next file
	.ASCIC	\CHB\			; CHANGE-BEGIN
	.ASCIC	\CHE\			; CHANGE-END
	.ASCIC	\TER\			; TERMINATE operation

	.SBTTL	FAL$STATISTICS - COMPUTE AND PRINT STATISTICS
	.PSECT	FAL$CODE_LOGGER	NOSHR,EXE,RD,NOWRT,BYTE

;++
; Functional Description:
;
;	FAL$STATISTICS computes and prints statistics to the print file.
;
; Calling Sequence:
;
;	BSBW	FAL$STATISTICS
;
; Input Parameters:
;
;	None
;
; Implicit Inputs:
;
;	None
;
; Output Parameters:
;
;	R0-R7	Destroyed
;	R9-R11	Destroyed
;
; Implicit Outputs:
;
;	None
;
; Completion Codes:
;
;	None
;
; Side Effects:
;
;	None
;
;--

FAL$STATISTICS::			; Entry point
	MOVAL	FAL$L_STB(R8),R7	; Get address of statistics block

;
; Compute total link connect time and store in delta time format.
; I.e., delta = -(end_time - start_time) = (start_time - end_time).
;

	SUBL2	W^FAL$GQ_TIME1,-	; Double precision subtraction of
		W^FAL$GQ_TIME0		;  time0 - time1
	SBWC	W^FAL$GQ_TIME1+4,-	;  "
		W^FAL$GQ_TIME0+4	;  "

;
; Output total link connect time to the print file.
;

	$FAO_S-				; Format the message
		CTRSTR=W^FAL$GQ_CONNTIME-; Address of FAO control string
		OUTLEN=W^FAL$GW_PRTLEN-	;  Address to receive string length
		OUTBUF=W^FAL$GQ_PRTBUF-	;  Address of buffer descriptor
		P1=#FAL$GQ_TIME0	;  Delta days and time address
	CHECK_SS			; Check status code
	BSBW	FAL$PRINT_FAO		; Print message

;
; Total the event counters.
;

	ADDL3	FAL$L_RCV_PKT(R7),-	; Total DAP message packets
		FAL$L_XMT_PKT(R7),R2	; "
	ADDL3	FAL$L_RCV_MSG(R7),-	; Total DAP messages
		FAL$L_XMT_MSG(R7),R3	; "
	ADDL3	FAL$L_RCV_DAT(R7),-	; Total user records/blocks
		FAL$L_XMT_DAT(R7),R4	; "
	ADDL3	FAL$L_RCV_USR(R7),-	; Total bytes of user data
		FAL$L_XMT_USR(R7),R5	; "
	ADDL3	FAL$L_RCV_LNK(R7),-	; Total bytes of link data
		FAL$L_XMT_LNK(R7),R6	; "

;
; Output statistics header and counters to the print file.
;

	$FAO_S-				; Format the message
		CTRSTR=W^FAL$GQ_STAT1-	;  Address of FAO control string
		OUTLEN=W^FAL$GW_PRTLEN-	;  Address to receive string length
		OUTBUF=W^FAL$GQ_PRTBUF-	;  Address of buffer descriptor
		P1=FAL$L_RCV_PKT(R7)-	;  # DAP message packets received
		P2=FAL$L_XMT_PKT(R7)-	;  # DAP message packets transmitted
		P3=R2-			;  # DAP messages packets exchanged
		P4=FAL$L_RCV_MSG(R7)-	;  # DAP messages received
		P5=FAL$L_XMT_MSG(R7)-	;  # DAP messages transmitted
		P6=R3			;  # DAP messages exchanged
	CHECK_SS			; Check status code
	BSBW	FAL$PRINT_FAO		; Print message
	$FAO_S-				; Format the message
		CTRSTR=W^FAL$GQ_STAT2-	;  Address of FAO control string
		OUTLEN=W^FAL$GW_PRTLEN-	;  Address to receive string length
		OUTBUF=W^FAL$GQ_PRTBUF-	;  Address of buffer descriptor
		P1=FAL$L_RCV_DAT(R7)-	;  # data records/blocks received
		P2=FAL$L_XMT_DAT(R7)-	;  # data records/blocks transmitted
		P3=R4-			;  # data records/blocks exchanged
		P4=FAL$L_RCV_USR(R7)-	;  # bytes of user data received
		P5=FAL$L_XMT_USR(R7)-	;  # bytes of user data transmitted
		P6=R5-			;  # bytes of user data exchanged
		P7=FAL$L_RCV_LNK(R7)-	;  # bytes of link data received
		P8=FAL$L_XMT_LNK(R7)-	;  # bytes of link data transmitted
		P9=R6			;  # bytes of link data exchanged
	CHECK_SS			; Check status code
	BSBW	FAL$PRINT_FAO		; Print message

;
; Convert link connect time from internal 64-bit binary format in 100
; nanosecond units to 32-bit binary format in 10 millisecond units
; (hundredths of a second).
;

	MOVL	W^FAL$GQ_PRTBUF+4,R9	; Get 14 byte scratch buffer address
	$NUMTIM_S TIMBUF=(R9)-		; Convert delta link connect time
		TIMADR=W^FAL$GQ_TIME0	;  to numeric values
	CHECK_SS			; Check status code
	TSTL	(R9)+			; Skip to day field address
	MOVZWL	(R9)+,R11		; Get day value
	MULL2	#24,R11			; Convert to hours
	MOVZWL	(R9)+,R10		; Get hour value
	ADDL2	R10,R11			; Obtain total hours
	MULL2	#60,R11			; Convert to minutes
	MOVZWL	(R9)+,R10		; Get minute value
	ADDL2	R10,R11			; Obtain total minutes
	MULL2	#60,R11			; Convert to seconds
	MOVZWL	(R9)+,R10		; Get seconds value
	ADDL2	R10,R11			; Obtain total seconds
	MULL2	#100,R11		; Convert to hundredths
	MOVZWL	(R9)+,R10		; Get hundredths value
	ADDL2	R10,R11			; Obtain total hundredths
	BEQL	AVERAGE			; Branch if zero (something is wrong!>

;
; Compute line throughput statistics where:
;
; Throughput = <#bits> / <#seconds>
;	     = <#bits * 100> / <#seconds / 100>
;	     = <#bytes * 8 * 100> / <#hundredths>
;	     = <#bytes> / <#hundredths / 800>
;

	CVTLF	R11,R9			; Put hundredths of second value
					;  in floating point format
	DIVF2	#800,R9			; Build divisor in desired form
	CVTLF	FAL$L_RCV_USR(R7),R0	; Put # bytes of user data received
					;  in floating point format
	DIVF2	R9,R0			; Compute receive baud rate
	CVTRFL	R0,R0			; Round result and store as integer
	CVTLF	FAL$L_XMT_USR(R7),R1	; Put # bytes of user data transmitted
					;  in floating point format
	DIVF2	R9,R1			; Compute transmit baud rate
	CVTRFL	R1,R1			; Round result and store as integer
	CVTLF	R5,R2			; Put # bytes of user data exchanged
					;  in floating point format
	DIVF2	R9,R2			; Compute full-duplex baud rate
	CVTRFL	R2,R2			; Round result and store as integer
	CVTLF	FAL$L_RCV_LNK(R7),R3	; Put # bytes of link data received
					;  in floating point format
	DIVF2	R9,R3			; Compute receive baud rate
	CVTRFL	R3,R3			; Round result and store as integer
	CVTLF	FAL$L_XMT_LNK(R7),R10	; Put # bytes of link data transmitted
					;  in floating point format
	DIVF2	R9,R10			; Compute transmit baud rate
	CVTRFL	R10,R10			; Round result and store as integer
	CVTLF	R6,R11			; Put # bytes of link data exchanged
					;  in floating point format
	DIVF2	R9,R11			; Compute full-duplex baud rate
	CVTRFL	R11,R11			; Round result and store as integer
;
; Output line throughput statistics to the print file.
;

	$FAO_S-				; Format the message
		CTRSTR=W^FAL$GQ_STAT3-	;  Address of FAO control string
		OUTLEN=W^FAL$GW_PRTLEN-	;  Address to receive string length
		OUTBUF=W^FAL$GQ_PRTBUF-	;  Address of buffer descriptor
		P1=R0-			;  User receive throughput
		P2=R1-			;  User transmit throughput
		P3=R2-			;  User full-duplex throughput
		P4=R3-			;  Link receive throughput
		P5=R10-			;  Link transmit throughput
		P6=R11			;  Link full-duplex throughput
	CHECK_SS			; Check status code
	BSBW	FAL$PRINT_FAO		; Print message

;
; Compute average record/block size.
;

AVERAGE:				;
	CLRL	R9			; Prepare for zero divisor
	CLRQ	R10			; "
	CVTLF	FAL$L_RCV_DAT(R7),R0	; Get divisor
	BEQL	10$			; Avoid division by zero
	CVTLF	FAL$L_RCV_USR(R7),R1	; Get dividend
	DIVF2	R0,R1			; Find average receive size
	CVTRFL	R1,R9			; Round an store as integer
10$:	CVTLF	FAL$L_XMT_DAT(R7),R0	; Get divisor
	BEQL	20$			; Avoid division by zero
	CVTLF	FAL$L_XMT_USR(R7),R1	; Get dividend
	DIVF2	R0,R1			; Find average transmit size
	CVTRFL	R1,R10			; Round an store as integer
20$:	CVTLF	R4,R0			; Get divisor
	BEQL	30$			; Avoid division by zero
	CVTLF	R5,R1			; Get dividend
	DIVF2	R0,R1			; Find overall average size
	CVTRFL	R1,R11			; Round an store as integer

;
; Output average record/block size statistics to the print file.
;

30$:	$FAO_S-				; Format the message
		CTRSTR=W^FAL$GQ_STAT4-	;  Address of FAO control string
		OUTLEN=W^FAL$GW_PRTLEN-	;  Address to receive string length
		OUTBUF=W^FAL$GQ_PRTBUF-	;  Address of buffer descriptor
		P1=R9-			;  Average receive record/block size
		P2=R10-			;  Average transmit record/block size
		P3=R11			;  Average overall record/block size
	CHECK_SS			; Check status code
	BSBW	FAL$PRINT_FAO		; Print message

;
; Compute (dap) protocol efficiency statistics where:
;
; Efficiency = <user_data_bytes> / <totaL_link_data_bytes>
;

	MOVL	FAL$L_RCV_LNK(R7),R0	; Get divisor
	MOVL	FAL$L_RCV_USR(R7),R1	; Get dividend
	BSBW	PERCENTAGE		; Compute receive percentage
	MOVQ	R0,R2			; Copy results to <R2,R3>
	MOVL	FAL$L_XMT_LNK(R7),R0	; Get divisor
	MOVL	FAL$L_XMT_USR(R7),R1	; Get dividend
	BSBW	PERCENTAGE		; Compute transmit percentage
	MOVQ	R0,R10			; Copy results to <R10,R11>
	MOVL	R6,R0			; Get divisor
	MOVL	R5,R1			; Get dividend
	BSBW	PERCENTAGE		; Compute full-duplex percentage
					;  results are in <R0,R1>

;
; Output (DAP) protocol efficeincy statistics to the print file.
;

	$FAO_S-				; Format the message
		CTRSTR=W^FAL$GQ_STAT5-	;  Address of FAO control string
		OUTLEN=W^FAL$GW_PRTLEN-	;  Address to receive string length
		OUTBUF=W^FAL$GQ_PRTBUF-	;  Address of buffer descriptor
		P1=R2-			;  Receive protocol efficiency
		P2=R3-			;  "
		P3=R10-			;  Transmit protocol efficiency
		P4=R11-			;  "
		P5=R0-			;  Overall protocol efficiency
		P6=R1			;  "
	CHECK_SS			; Check status code
	BSBW	FAL$PRINT_FAO		; Print message
	RSB				; Exit

;++
; This routine computes a percentage in xx.y format, given an integer divisor
; and an integer dividend.
;
; On input:
;
;	R0 = Divisor
;	R1 = Dividend
;
; On output:
;
;	R0 = xx part
;	R1 =  y part
;--

PERCENTAGE:				; Entry point
	CVTLF	R0,R0			; Put divisor in floating point format
	BEQL	10$			; Branch if division by zero
	CVTLF	R1,R1			; Put dividend in floating point format
	MULF2	#1000,R1		; Compute percentage x 10
	DIVF2	R0,R1			; "
	CVTRFL	R1,R0			; Round result and store as integer
10$:	CLRL	R1			; Prepare for double precision division
	EDIV	#10,R0,R0,R1		; Split result into xx.y format
	RSB				; Exit

	.SBTTL	FAL$PRINT_FAO AND FAL$PRINT_FAOA
	.PSECT	FAL$CODE_LOGGER	NOSHR,EXE,RD,NOWRT,BYTE

;++
; Functional Description:
;
;	FAL$PRINT_FAO outputs the buffer formatted by FAO to the print file
;	and is called from non-AST-level code.
;
;	FAL$PRINT_FAOA performs the same function, except it is called from
;	AST-level code.
;
; Calling Sequence:
;
;	BSBW	FAL$PRINT_FAO
;	BSBW	FAL$PRINT_FAOA
;
; Input Parameters:
;
;	None
;
; Implicit Inputs:
;
;	FAL$GQ_PRTBUF
;	FAL$GQ_PRTBUFA
;	FAL$GW_PRTLEN
;	FAL$GW_PRTLENA
;
; Output Parameters:
;
;	R0-R1	Destroyed
;
; Implicit Outputs:
;
;	FAL$PRTRAB is updated
;
; Completion Codes:
;
;	None
;
; Side Effects:
;
;	None
;
;--

FAL$PRINT_FAOA::			; Entry point
	MOVAL	W^FAL$PRTRAB,R0		; Get address of print RAB
	MOVL	W^FAL$GQ_PRTBUFA+4,-	; Update buffer address in RAB
		RAB$L_RBF(R0)		;
	MOVW	W^FAL$GW_PRTLENA,-	; Update buffer size in RAB
		RAB$W_RSZ(R0)		;
	BRB	PRINT_COMMON		; Join common code
FAL$PRINT_FAO::				; Entry point
	MOVAL	W^FAL$PRTRAB,R0		; Get address of print RAB
	MOVL	W^FAL$GQ_PRTBUF+4,-	; Update buffer address in RAB
		RAB$L_RBF(R0)		;
	MOVW	W^FAL$GW_PRTLEN,-	; Update buffer size in RAB
		RAB$W_RSZ(R0)		;
PRINT_COMMON:				; Common code path
	$PUT	RAB=R0			; Output the record
	CHECK_RMS			; Check completion code
	RSB				; Exit

	.SBTTL	FAL$DISPLAY_MSG - DISPLAY MESSAGE BUFFER
	.PSECT	FAL$CODE_LOGGER	NOSHR,EXE,RD,NOWRT,BYTE

;++
; Functional Description:
;
;	FAL$DISPLAY formats the specified DAP message and outputs it to the
;	print file.
;
; Calling Sequence:
;
;	Call	#3,FAL$DISPLAY_MSG
;
; Input Parameters:
;
;	4(AP)	Address of header text (counted ASCII string) for message
;	8(AP)	Size of the DAP message in bytes
;	12(AP)	Address of the DAP message
;
; Implicit Inputs:
;
;	FAL$GL_LOGCNT
;
; Output Parameters:
;
;	R0-R1	Destroyed
;
; Implicit Outputs:
;
;	None
;
; Completion Codes:
;
;	None
;
; Side Effects:
;
;	None
;
;--

	.ENTRY	FAL$DISPLAY_MSG,^M<R2,R3,R4> ; Entry point

;
; Determine total number of bytes to display of the DAP message and the number
; of bytes to display on the first line of the printout.
;

	MOVL	W^FAL$GL_LOGCNT,R0	; Get max # bytes to display
	CMPL	8(AP),R0		; Is message size GEQ max count?
	BGEQU	10$			; Yes
	MOVL	8(AP),R0		; No, use actual message size
10$:	MOVL	R0,R3			; Save count
	CMPL	R0,#PERLINE		; Branch if message will fit on one
	BLEQU	20$			;  line
	MOVL	#PERLINE,R0		; Specify count for this line
20$:	SUBL2	R0,R3			; Determine count remaining after this
					;  line
	MOVL	R0,R1			; Save count for this line
	BEQL	40$			; Branch on zero length message

;
; Construct parameter list on the stack for use by $FAOL routine.
;
;	R0=R1	# bytes to print on first line
;	R3	Total # bytes to display for message
;

	MOVL	12(AP),R2		; Get address of message buffer
30$:	MOVZBL	(R2)+,-(SP)		; Put each character in list
	SOBGTR	R0,30$			; Continue until done
40$:	PUSHL	R1			; Put # bytes to convert in list
	PUSHL	8(AP)			; Put actual message size in list
	BSBW	GET_FUNCTION		; Get function code
	PUSHL	R4			; Put address of string in list
	TSTL	8(AP)			; Branch on zero length message
	BEQL	50$			;
	MOVZBL	@12(AP),R0		; Get first byte of message (type field)
	CMPB	R0,#DAP$K_NAM_MSG	; Check limits
	BLEQU	60$			; Branch if within range
50$:	CLRL	R0			; Treat as reserved
60$:	PUSHAL	W^FAL$GL_MSGTYPE[R0]	; Put address of message type text
					;  in list
	PUSHL	4(AP)			; Put address of header text for message
					;  in list
	MOVL	SP,R1			; Get address of FAOL parameter list

;
; Format and print first line of message.
;

	$FAOL_S-			; Format the message
		CTRSTR=W^FAL$GQ_LOGMSG-	;  Address of FAOL control string
		OUTLEN=W^FAL$GW_PRTLEN-	;  Address to receive string length
		OUTBUF=W^FAL$GQ_PRTBUF- ;  Address of buffer descriptor
		PRMLST=(R1)		;  Address of parameter list
	CHECK_SS			; Check status code
	BSBW	FAL$PRINT_FAO		; Print message

;
; Print additional lines as required to display the entire DAP message.
;

DISPLAY_LOOP:				;
	MOVL	R3,R0			; Get # bytes remaining to display
	BEQL	DISPLAY_EXIT		; Branch if none
	CMPL	R0,#PERLINE		; Branch if message will fit on one
	BLEQU	10$			;  line
	MOVL	#PERLINE,R0		; Specify count for this line
10$:	SUBL2	R0,R3			; Determine count remaining after this
					;  line
	MOVL	R0,R1			; Save count for this line
20$:	MOVZBL	(R2)+,-(SP)		; Put each character in list
	SOBGTR	R0,20$			; Continue until done
	PUSHL	R1			; Put # bytes to convert in list
	MOVL	SP,R1			; Get address of FAOL parameter list

;
; Format and print next line of message.
;

	$FAOL_S-			; Format the message
		CTRSTR=W^FAL$GQ_LOGMSG2-;  Address of FAOL control string
		OUTLEN=W^FAL$GW_PRTLEN-	;  Address to receive string length
		OUTBUF=W^FAL$GQ_PRTBUF- ;  Address of buffer descriptor
		PRMLST=(R1)		;  Address of parameter list
	CHECK_SS			; Check status code
	BSBW	FAL$PRINT_FAO		; Print message
	BRB	DISPLAY_LOOP		;

;
; The "RET" instruction will adjust SP so that the parameter list for $FAOL
; that was constructed on the stack is eliminated.
;

DISPLAY_EXIT:				;
	RET				; Exit

;+
; This routine returns the address of a counted text string that describes the
; function code (if any) of the parsed DAP message.
;-

FUNCTION_CODE=^X40			; Offset of function code fields in DAP
					;  control block
GET_FUNCTION:				; Entry point
	CMPL	4(AP),#FAL$GT_DECODE	; Branch if this is not an incoming
	BNEQ	99$			;  message that has just been parsed
	$CASEB	SELECTOR=@12(AP)-	; Get DAP message type code
		BASE=#DAP$K_ACC_MSG-	;
		DISPL=<-		; Message type:
		    10$-		;  Access Complete
		    20$-		;  Control
		    30$-		;  Continue Transfer
		    99$-		;  Acknowledge
		    40$-		;  Access Complete
		>			;
99$:	MOVAB	W^FAL$GT_MSG,R4		; Get address of string
	RSB				;
10$:	MOVZBL	FUNCTION_CODE(R9),R0	; Get Access function code
	MOVAL	W^FAL$GL_ACCFUNC[R0],R4	;
	RSB				; Exit
20$:	MOVZBL	FUNCTION_CODE(R9),R0	; Get Control function code
	MOVAL	W^FAL$GL_CTLFUNC[R0],R4	;
	RSB				; Exit
30$:	MOVZBL	FUNCTION_CODE(R9),R0	; Get Continue Transfer function code
	MOVAL	W^FAL$GL_CONFUNC[R0],R4	;
	RSB				; Exit
40$:	MOVZBL	FUNCTION_CODE(R9),R0	; Get Access Complete function code
	MOVAL	W^FAL$GL_CMPFUNC[R0],R4	;
	RSB				; Exit

	.SBTTL	FAL$LOG_QIO AND FAL$LOG_AST
	.PSECT	FAL$CODE_LOGGER	NOSHR,EXE,RD,NOWRT,BYTE

;++
; Output QIO posted message to the print file.
;--

FAL$LOG_QIO::				; Entry point
	$FAO_S-				; Format the message
		CTRSTR=W^FAL$GQ_LOGQIO-	;  Address of FAO control string
		OUTLEN=W^FAL$GW_PRTLENA-;  Address to receive string length
		OUTBUF=W^FAL$GQ_PRTBUFA-;  Address of buffer descriptor
		P1=R1			;  Address of counted string
	BRB	LOG_COMMON		; Join common code

;++
; Output AST delivered message to the print file.
;--

FAL$LOG_AST::				; Entry point
	$FAO_S-				; Format the message
		CTRSTR=W^FAL$GQ_LOGAST-	;  Address of FAO control string
		OUTLEN=W^FAL$GW_PRTLENA-;  Address of receive string length
		OUTBUF=W^FAL$GQ_PRTBUFA-;  Address of buffer descriptor
		P1=R1-			;  Address of counted string
		P2=R0			;  # bytes in DAP message packet
LOG_COMMON:				; Common code
	CHECK_SS			; Check status code
	BSBW	FAL$PRINT_FAOA		; Print message
	RSB				;

	.SBTTL	FAL$LOG_REQNAM AND FAL$LOG_RESNAM
	.PSECT	FAL$CODE_LOGGER	NOSHR,EXE,RD,NOWRT,BYTE

;++
; Output requested file Name message to the print file.
; On input R1 = address of filespec string descriptor.
;--

FAL$LOG_REQNAM::			; Entry point
	BBC	#FAL$V_LOG_NAM,(R8),10$	; Branch if logging disabled
	$FAO_S-				; Format the message
		CTRSTR=W^FAL$GQ_REQNAM-	;  Address of FAL control string
		OUTLEN=W^FAL$GW_PRTLEN-	;  Address to receive string length
		OUTBUF=W^FAL$GQ_PRTBUF-	;  Address of buffer descriptor
		P2=R1			;  Address of filespec string descriptor
	CHECK_SS			; Check status code
	BSBW	FAL$PRINT_FAO		; Print message
10$:	RSB				; Exit

;++
; Output resultant file Name message to the print file.
;--

FAL$LOG_RESNAM::			; Entry point
	BBC	#FAL$V_LOG_NAM,(R8),10$	; Branch if logging disabled
	MOVZBL	FAL$L_NAM+NAM$B_RSL(R8),R0 ; Get resultant string length
	$FAO_S-				; Format the message
		CTRSTR=W^FAL$GQ_RESNAM-	;  Address of FAO control string
		OUTLEN=W^FAL$GW_PRTLEN-	;  Address to receive string length
		OUTBUF=W^FAL$GQ_PRTBUF-	;  Address of buffer descriptor
		P1=R0-			;  Resultant string length
		P2=FAL$L_NAM+NAM$L_RSA(R8);Resultant string address
	CHECK_SS			; Check status code
	BSBW	FAL$PRINT_FAO		; Print message
10$:	RSB				; Exit

	.END				; End of module
