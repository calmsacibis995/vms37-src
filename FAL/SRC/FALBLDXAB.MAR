	.TITLE	FALBLDXAB - BUILD DAP EXT ATT MESSAGES
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; Facility: FAL (DECnet File Access Listener)
;
; Abstract: This module builds the DAP extended Attributes messages.
;
; Environment: VAX/VMS, user mode
;
; Author: James A. Krycka,	Creation Date:	22-MAY-1979
;
; Modified By:
;
;	V02-012	JAK0023		J A Krycka	10-SEP-1981
;		Support the extended length Date and Time XAB.
;
;	V02-011	JAK0022		J A Krycka	24-AUG-1981
;		Update symbols to correspond to revised DAPDEF.MDL file.
;
;	V02-010	JAK0013		J A Krycka	28-AUG-1980
;		Enhance FAL$ENCODE_ALL and FAL$ENCODE_KEY to support multiple
;		(alternate) Allocation and Key Definition XABs.
;
;	V02-009	JAK0013		J A Krycka	25-AUG-1980
;		Send key name in Key Definition message only when necessary.
;
;--

	.SBTTL	DECLARATIONS

;
; Include Files:
;

	$DAPPLGDEF			; Define DAP prologue symbols
	$DAPHDRDEF			; Define DAP message header
	$DAPATTDEF			; Define DAP Attributes message
	$DAPKEYDEF			; Define DAP Key Definition message
	$DAPALLDEF			; Define DAP Allocation message
	$DAPSUMDEF			; Define DAP Summary message
	$DAPTIMDEF			; Define DAP Date and Time message
	$DAPPRODEF			; Define DAP Protection message
	$FALWRKDEF			; Define FAL Work Area symbols
	$FABDEF				; Define File Access Block symbols
	$XABDEF				; Define symbols common to all XABs
	$XABALLDEF			; Define Allocation XAB symbols
	$XABDATDEF			; Define Date and Time XAB symbols
	$XABKEYDEF			; Define Key Definition XAB symbols
	$XABPRODEF			; Define Protection XAB symbols
	$XABSUMDEF			; Define Summary XAB symobls

;
; Macros:
;
;	None
;
; Equated Symbols:
;

	ASSUME	DAP$Q_DCODE_FLG EQ 0
	ASSUME	FAL$Q_FLG EQ 0

;
; Own Storage:
;

	.SBTTL	FAL$ENCODE_KEY
	.PSECT	FAL$CODE	NOSHR,EXE,RD,NOWRT,BYTE

;++
; Functional Description:
;
;	FAL$ENCODE_KEY builds the specified DAP Key Definition message.
;
; Calling Sequence:
;
;	BSBW	FAL$ENCODE_KEY
;
; Input Parameters:
;
;	R6	Key of reference value
;	R8	Address of FAL work area
;	R9	Address of DAP control block
;	R10	Address of FAB
;	R11	Address of RAB
;
; Implicit Inputs:
;
;	FAB$B_ORG
;
; Output Parameters:
;
;	R0-R6	Destroyed
;	R7	Address of XAB
;
; Implicit Outputs:
;
;	None
;
; Completion Codes:
;
;	None
;
; Side Effects:
;
;	None
;
;--

FAL$ENCODE_KEY::			; Entry point
	MULL2	#FAL$K_KEYXAB,R6	; Using REF as an index, compute
	MOVAB	FAL$L_KEYXAB(R8)[R6],R7	;  address of Key Definition XAB to use
	MOVL	#DAP$K_KEY_MSG,R0	; Get message type value
	BSBW	FAL$BUILD_HEAD		; Construct message header
	CMPB	FAB$B_ORG(R10),#FAB$C_IDX ; Build dummy message (all fields
	BEQL	5$			;  defaulted) if file ORG is not IDX
	BRW	40$			; Branch aid
5$:	MOVL	#<DAP$M_FLG!-		; Get key menu value
		  DAP$M_DFL!-		;
		  DAP$M_IFL!-		;
		  DAP$M_NSG!-		;
		  DAP$M_REF!-		;
		  DAP$M_KNM!-		;
		  DAP$M_NUL!-		;
		  DAP$M_IAN!-		;
		  DAP$M_LAN!-		;
		  DAP$M_DAN!-		;
		  DAP$M_DTP!-		;
		  DAP$M_RVB!-		;
		  DAP$M_DVB!-		;
		  DAP$M_DBS!-		;
		  DAP$M_IBS!-		;
		  DAP$M_LVL!-		;
		  DAP$M_TKS!-		;
		  DAP$M_MRL!-		;
		0>,R1			;
	BSBW	FAL$CVT_BN4_EXT		; Store KEYMENU as an extensible field

;
; Include the FLG, DFL, and IFL fields in the message.
;

	MOVZBL	XAB$B_FLG(R7),R1	; Get FLG bits returned by RMS
	CLRL	R2			; Clear corresponding DAP bits
	$MAPBIT	XAB$V_DUP,DAP$V_DUP	; Map DUP bit
	$MAPBIT	XAB$V_CHG,DAP$V_CHG	; Map CHG bit
	$MAPBIT	XAB$V_NUL,DAP$V_NUL_CHR	; Map NUL bit
	MOVB	R2,(R3)+		; Store key options as extensible field
	MOVW	XAB$W_DFL(R7),(R3)+	; Store data bucket fill quantity field
	MOVW	XAB$W_IFL(R7),(R3)+	; Store index bucket fill quantity field

;
; Include the NSG, POS, and SIZ fields in the message.
;

	MOVB	XAB$B_NSG(R7),R0	; Get loop count
	MOVB	R0,(R3)+		; Store number of key segments field
	BEQL	20$			; Branch if zero
	MOVAW	XAB$W_POS(R7),R1	; Get address of POS array
	MOVAB	XAB$B_SIZ(R7),R2	; Get address of SIZ arrary
10$:	MOVW	(R1)+,(R3)+		; Store key segment position field
	MOVB	(R2)+,(R3)+		; Store key segment size field
	SOBGTR	R0,10$			; Loop if more to go

;
; Include the REF, KNM, NUL, IAN, LAN, DAN, and DTP fields in the message.
;

20$:	MOVB	XAB$B_REF(R7),(R3)+	; Store key of reference field
	CLRB	(R3)+			; Assume no key name buffer
	TSTL	XAB$L_KNM(R7)		; Branch if no key name buffer
	BEQL	30$			;
	MOVB	#32,-1(R3)		; Store KNM as an image field
	MOVC3	#32,@XAB$L_KNM(R7),(R3)	; Copy 32-byte key name field into msg
30$:	MOVB	XAB$B_NUL(R7),(R3)+	; Store null key character field
	MOVB	XAB$B_IAN(R7),(R3)+	; Store index area number field
	MOVB	XAB$B_LAN(R7),(R3)+	; Store lowest level index area
					;  number field
	MOVB	XAB$B_DAN(R7),(R3)+	; Store data area number field
	MOVB	XAB$B_DTP(R7),(R3)+	; Store key data type field

;
; Include the RVB, DVB, DBS, IBS, LVL, TKS, and MRL fields in the message.
;

	MOVL	XAB$L_RVB(R7),R1	; Get root bucket start VBN value
	BSBW	FAL$CVT_BN4_IMG		; Store RVB as an image field
	MOVL	XAB$L_DVB(R7),R1	; Get first data bucket start VBN value
	BSBW	FAL$CVT_BN4_IMG		; Store DVB as an image field
	MOVB	XAB$B_DBS(R7),(R3)+	; Store data bucket fill size field
	MOVB	XAB$B_IBS(R7),(R3)+	; Store index bucket fill size field
	MOVB	XAB$B_LVL(R7),(R3)+	; Store level of root buckets field
	MOVB	XAB$B_TKS(R7),(R3)+	; Store total key size field
	MOVW	XAB$W_MRL(R7),(R3)+	; Store minimum record length to contain
					;  key field
40$:	BSBW	FAL$BUILD_TAIL		; Finish building message
	RSB				; Exit

	.SBTTL	FAL$ENCODE_ALL
	.PSECT	FAL$CODE	NOSHR,EXE,RD,NOWRT,BYTE

;++
; Functional Description:
;
;	FAL$ENCODE_ALL builds the specified DAP Allocation message.
;
; Calling Sequence:
;
;	BSBW	FAL$ENCODE_ALL
;
; Input Parameters:
;
;	R6	Area ID value
;	R8	Address of FAL work area
;	R9	Address of DAP control block
;	R10	Address of FAB
;	R11	Address of RAB
;
; Implicit Inputs:
;
;	DAP$V_VAXVMS
;
; Output Parameters:
;
;	R0-R6	Destroyed
;	R7	Address of XAB
;
; Implicit Outputs:
;
;	None
;
; Completion Codes:
;
;	None
;
; Side Effects:
;
;	None
;
;--

FAL$ENCODE_ALL::			; Entry point
	MULL2	#FAL$K_ALLXAB,R6	; Using AID as an index, compute
	MOVAB	FAL$L_ALLXAB(R8)[R6],R7	;  address of Allocation XAB to use
	MOVL	#DAP$K_ALL_MSG,R0	; Get message type value
	BSBW	FAL$BUILD_HEAD		; Construct message header
	MOVZWL	#<DAP$M_VOL!-		; Get allocation menu value
		  DAP$M_AOP!-		;
		  DAP$M_ALQ2!-		;
		  DAP$M_AID!-		;
		  DAP$M_BKZ!-		;
		  DAP$M_DEQ2!-		;
		0>,R1			;
	BBC	#DAP$V_VAXVMS,(R9),10$	; Branch if partner is not VAX/VMS
	BISW2	#<DAP$M_ALN!DAP$M_LOC>,R1 ; Add to menu
10$:	BSBW	FAL$CVT_BN4_EXT		; Store ALLMENU as an extensible field

;
; Include the VOL, ALN, and AOP fields in the message.
;

	MOVW	XAB$W_VOL(R7),(R3)+	; Store relative volume number field
	BBC	#DAP$V_VAXVMS,(R9),20$	; Branch if partner is not VAX/VMS

	ASSUME	DAP$K_ANY EQ 0
	ASSUME	DAP$K_CYL EQ XAB$C_CYL
	ASSUME	DAP$K_LBN EQ XAB$C_LBN
	ASSUME	DAP$K_VBN EQ XAB$C_VBN

	MOVB	XAB$B_ALN(R7),(R3)+	; Store alignment options field
20$:	MOVZBL	XAB$B_AOP(R7),R1	; Get AOP bits returned by RMS
	CLRL	R2			; Clear corresponding DAP bits
	$MAPBIT	XAB$V_CBT,DAP$V_CBT2	; Map CBT bit
	$MAPBIT	XAB$V_CTG,DAP$V_CTG2	; Map CTG bit
	BBC	#DAP$V_VAXVMS,(R9),30$	; Branch if partner is not VAX/VMS
	$MAPBIT	XAB$V_HRD,DAP$V_HRD	; Map HRD bit
	$MAPBIT	XAB$V_ONC,DAP$V_ONC	; Map ONC bit
30$:	MOVL	R2,R1			; Move data to correct register
	BSBW	FAL$CVT_BN4_EXT		; Store AOP as an extensible field

;
; Include the LOC, ALQ, AID, BKZ, and DEQ fields in the message.
;

	BBC	#DAP$V_VAXVMS,(R9),40$	; Branch if partner is not VAX/VMS
	MOVL	XAB$L_LOC(R7),R1	; Get starting location value
	BSBW	FAL$CVT_BN4_IMG		; Store LOC as an image field
40$:	MOVL	XAB$L_ALQ(R7),R1	; Get allocation quantity value
	BSBW	FAL$CVT_BN4_IMG		; Store ALQ as an image field
	MOVB	XAB$B_AID(R7),(R3)+	; Store area identification field
	MOVB	XAB$B_BKZ(R7),(R3)+	; Store bucket size field
	MOVW	XAB$W_DEQ(R7),(R3)+	; Store default extension quantity field
	BSBW	FAL$BUILD_TAIL		; Finish building message
	RSB				; Exit

	.SBTTL	FAL$ENCODE_SUM
	.PSECT	FAL$CODE	NOSHR,EXE,RD,NOWRT,BYTE

;++
; Functional Description:
;
;	FAL$ENCODE_SUM builds the DAP Summary message.
;
; Calling Sequence:
;
;	BSBW	FAL$ENCODE_SUM
;
; Input Parameters:
;
;	R8	Address of FAL work area
;	R9	Address of DAP control block
;	R10	Address of FAB
;	R11	Address of RAB
;
; Implicit Inputs:
;
;	FAB$B_ORG
;
; Output Parameters:
;
;	R0-R6	Destroyed
;	R7	Address of XAB
;
; Implicit Outputs:
;
;	None
;
; Completion Codes:
;
;	None
;
; Side Effects:
;
;	None
;
;--

FAL$ENCODE_SUM::			; Entry point
	MOVAL	FAL$L_SUMXAB(R8),R7	; Get address of Summary XAB
	MOVL	#DAP$K_SUM_MSG,R0	; Get message type value
	BSBW	FAL$BUILD_HEAD		; Construct message header
	CMPB	FAB$B_ORG(R10),#FAB$C_IDX ; Build dummy message (all fields
	BNEQ	10$			;  defaulted) if file ORG is not IDX

	ASSUME	DAP$V_NOK LT 7
	ASSUME	DAP$V_NOA LT 7
	ASSUME	DAP$V_PVN LT 7

	MOVB	#<DAP$M_NOK!-		; Get summary menu value
		  DAP$M_NOA!-		;
		  DAP$M_PVN!-		;
		0>,(R3)+		; Store sumenu as an extensible field
	MOVB	XAB$B_NOK(R7),(R3)+	; Store number of keys field
	MOVB	XAB$B_NOA(R7),(R3)+	; Store number of allocation areas field
	MOVW	XAB$W_PVN(R7),(R3)+	; Store prologue version number field
10$:	BSBW	FAL$BUILD_TAIL		; Finish building message
	RSB				; Exit

	.SBTTL	FAL$ENCODE_TIM
	.PSECT	FAL$CODE	NOSHR,EXE,RD,NOWRT,BYTE

;++
; Functional Description:
;
;	FAL$ENCODE_TIM builds the DAP Date and Time message.
;
; Calling Sequence:
;
;	BSBW	FAL$ENCODE_TIM
;
; Input Parameters:
;
;	R8	Address of FAL work area
;	R9	Address of DAP control block
;	R10	Address of FAB
;	R11	Address of RAB
;
; Implicit Inputs:
;
;	DAP$V_GEQ_V60
;
; Output Parameters:
;
;	R0-R6	Destroyed
;	R7	Address of XAB
;
; Implicit Outputs:
;
;	None
;
; Completion Codes:
;
;	None
;
; Side Effects:
;
;	None
;
;--

FAL$ENCODE_TIM::			; Entry point
	MOVAL	FAL$L_DATXAB(R8),R7	; Get address of Date and Time XAB
	MOVL	#DAP$K_TIM_MSG,R0	; Get message type value
	BSBW	FAL$BUILD_HEAD		; Construct message header

;
; Construct date and time menu value.
; Send only time fields that have a non-zero 64-bit time value as zero means
; the current date and time, not 17-NOV-1858! (actually only the upper 32-bits
; will be tested for zero, i.e., any time on 17-NOV-1858 will be considered
; as the default time.)
;

	ASSUME	DAP$V_CDT EQ 0
	ASSUME	DAP$V_CDT+1 EQ DAP$V_RDT
	ASSUME	DAP$V_RDT+1 EQ DAP$V_EDT
	ASSUME	DAP$V_EDT+1 EQ DAP$V_RVN
	ASSUME	DAP$V_RVN+1 EQ DAP$V_BDT

	CLRL	R4			; Initialize time menu field
	TSTL	XAB$Q_CDT+4(R7)		; Branch if creation date and time
	BEQL	10$			;  is zero
	BISB2	#DAP$M_CDT,R4		; Otherwise, send field
10$:	TSTL	XAB$Q_RDT+4(R7)		; Branch if revision date and time
	BEQL	20$			;  is zero
	BISB2	#DAP$M_RDT,R4		; Otherwise, send field
20$:	TSTL	XAB$Q_EDT+4(R7)		; Branch if expiration date and time
	BEQL	30$			;  is zero
	BISB2	#DAP$M_EDT,R4		; Otherwise, send field
30$:	BBC	#DAP$V_GEQ_V60,(R9),40$	; Branch if partner uses DAP before V6.0
	TSTL	XAB$Q_BDT+4(R7)		; Branch if backup date and time
	BEQL	40$			;  is zero
	BISB2	#DAP$M_BDT,R4		; Otherwise, send field
40$:	BISB2	#DAP$M_RVN,R4		; Send revision number field
	MOVB	R4,(R3)+		; Store TIMENU as an extensible field

;
; Now process each time field.
;

	BBC	#DAP$V_CDT,R4,50$	; Branch if CDT is not to be included
	MOVAQ	XAB$Q_CDT(R7),R0	; Get address of 64-bit value for
					;  creation date and time
	BSBB	CONVERT_TIME		; Store CDT as an image field
50$:	BBC	#DAP$V_RDT,R4,60$	; Branch if RDT is not to be included
	MOVAQ	XAB$Q_RDT(R7),R0	; Get address of 64-bit value for
					;  revision date and time
	BSBB	CONVERT_TIME		; Store RDT as an image field
60$:	BBC	#DAP$V_EDT,R4,70$	; Branch if EDT is not to be included
	MOVAQ	XAB$Q_EDT(R7),R0	; Get address of 64-bit value for
					;  expiration date and time
	BSBB	CONVERT_TIME		; Store EDT as an image field
70$:	MOVW	XAB$W_RVN(R7),(R3)+	; Store revision number field
	BBC	#DAP$V_BDT,R4,80$	; Branch if BDT is not to be included
	MOVAQ	XAB$Q_BDT(R7),R0	; Get address of 64-bit value for
					;  backup date and time
	BSBB	CONVERT_TIME		; Store BDT as an image field
80$:	BSBW	FAL$BUILD_TAIL		; Finish building message
	RSB				; Exit

;
; This routine converts a time value in 64-bit binary format to an ASCII string.
; Then it stores the string as an 18-byte fixed length field in the DAP message
; with the first two digits of the year removed (per DAP specification).
;

CONVERT_TIME:				; Entry point
	SUBL2	#<20+12>,SP		; Allocate space from the stack
	MOVL	SP,R2			; Save address of work area
	MOVL	#20,20(R2)		; Form descriptor of buffer to receive
	MOVL	SP,24(R2)		;  ASCII time string
	$ASCTIM_S-			; Convert binary time to ASCII time
		TIMLEN=28(R2)-		;  Address of word to receive string size
		TIMBUF=20(R2)-		;  Address of descriptor for buffer
		TIMADR=(R0)-		;  Address of 64-bit time value
		CVTFLG=#0		;  Flag set to request date and time
	CHECK_SS			; Check status code
					; Store time field omitting the two
					;  century digits
	PUSHR	#^M<R4>			; Save time menu mask
	MOVC3	#7,(R2),(R3)		; Copy bytes 1-7 of input string
	MOVC3	#11,2(R1),(R3)		; Copy bytes 9-20 of input string
	POPR	#^M<R4>			; Restore time menu mask
	ADDL2	#<20+12>,SP		; Deallocate space from the stack
	RSB				; Exit

	.SBTTL	FAL$ENCODE_PRO
	.PSECT	FAL$CODE	NOSHR,EXE,RD,NOWRT,BYTE

;++
; Functional Description:
;
;	FAL$ENCODE_PRO builds the DAP Protection message.
;
; Calling Sequence:
;
;	BSBW	FAL$ENCODE_PRO
;
; Input Parameters:
;
;	R8	Address of FAL work area
;	R9	Address of DAP control block
;	R10	Address of FAB
;	R11	Address of RAB
;
; Implicit Inputs:
;
;	None
;
; Output Parameters:
;
;	R0-R6	Destroyed
;	R7	Address of XAB
;
; Implicit Outputs:
;
;	None
;
; Completion Codes:
;
;	None
;
; Side Effects:
;
;	None
;
;--

FAL$ENCODE_PRO::			; Entry point
	MOVAL	FAL$L_PROXAB(R8),R7	; Get address of Protection XAB
	MOVL	#DAP$K_PRO_MSG,R0	; Get message type value
	BSBW	FAL$BUILD_HEAD		; Construct message header

	ASSUME	DAP$V_OWNER LT 7
	ASSUME	DAP$V_PROSYS LT 7
	ASSUME	DAP$V_PROOWN LT 7
	ASSUME	DAP$V_PROGRP LT 7
	ASSUME	DAP$V_PROWLD LT 7

	MOVB	#<DAP$M_OWNER!-		; Get protection menu value
		  DAP$M_PROSYS!-	;
		  DAP$M_PROOWN!-	;
		  DAP$M_PROGRP!-	;
		  DAP$M_PROWLD!-	;
		0>,(R3)+		; Store PROMENU as an extensible field

;
; Include the OWNER field in the message.
;

	SUBL2	#<16+12>,SP		; Allocate space from the stack
	MOVL	SP,R2			; Save address of work area
	MOVL	#16,16(R2)		; Form descriptor of buffer to receive
	MOVL	SP,20(R2)		;  ASCII string
	MOVZWL	XAB$W_GRP(R7),R0	; Get group UIC value
	MOVZWL	XAB$W_MBM(R7),R1	; Get member UIC value
	$FAO_S-				; Format the UIC string
		CTRSTR=W^FAL$GQ_UIC-	;  Address of FAO control string
		OUTLEN=24(R2)-		;  Address of receive string length
		OUTBUF=16(R2)-		;  Address of buffer descriptor
		P1=R0-			;  Group number of file owner
		P2=R1			;  Member number of file owner
	CHECK_SS			; Check status code
	MOVZWL	24(R2),R0		; Get length of returned string
	MOVB	R0,(R3)+		; Store owner as an image field
	MOVC3	R0,(R2),(R3)		; Copy owner string to message
	ADDL2	#<16+12>,SP		; Deallocate space from the stack

;
; Construct the four protection fields: PROSYS, PROOWN, PROGRP, and PROWLD.
;

	ASSUME	DAP$V_RED_ACC EQ XAB$V_NOREAD
	ASSUME	DAP$V_WRT_ACC EQ XAB$V_NOWRITE
	ASSUME	DAP$V_EXE_ACC EQ XAB$V_NOEXE
	ASSUME	DAP$V_DLT_ACC EQ XAB$V_NODEL

	ASSUME	DAP$V_RED_ACC LT 7
	ASSUME	DAP$V_WRT_ACC LT 7
	ASSUME	DAP$V_EXE_ACC LT 7
	ASSUME	DAP$V_DLT_ACC LT 7

	MOVZWL	XAB$W_PRO(R7),R0	; Get protection value
	EXTZV	#XAB$V_SYS,#4,R0,R1	; Store system protection field
	MOVB	R1,(R3)+		;  as an extensible field
	EXTZV	#XAB$V_OWN,#4,R0,R1	; Store owner protection field
	MOVB	R1,(R3)+		;  as an extensible field
	EXTZV	#XAB$V_GRP,#4,R0,R1	; Store group protection field
	MOVB	R1,(R3)+		;  as an extensible field
	EXTZV	#XAB$V_WLD,#4,R0,R1	; Store world protection field
	MOVB	R1,(R3)+		;  as an extensible field
	BSBW	FAL$BUILD_TAIL		; Finish building message
	RSB				; Exit

	.END				; End of module
