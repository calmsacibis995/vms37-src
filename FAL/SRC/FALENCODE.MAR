	.TITLE	FALENCODE - ENCODE DAP MESSAGE
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; Facility: FAL (DECnet File Access Listener)
;
; Abstract:
;
;	This module contains support routines that encode (build) portions of
;	A DAP message. Included are routines to build a message header and to
;	convert binary data to extensible or image format.
;
; Environment: VAX/VMS, user mode
;
; Author: James A. Krycka,	Creation Date:	16-JUN-1977
;
; Modified By:
;
;	V02-009	JAK0019		J A Krycka	22-JUN-1981
;		Modify FAL$BUILD_HEAD and FAL$BUILD_TAIL to support optional
;		two byte length field in message header.
;
;--

	.SBTTL	DECLARATIONS

;
; Include Files:
;

	$DAPHDRDEF			; Define DAP message header
	$DAPCNFDEF			; Define DAP Configuration message
	$FALWRKDEF			; Define FAL Work Area symbols

;
; Macros:
;
;	None
;
; Equated Symbols:
;

	ASSUME	FAL$Q_FLG EQ 0

;
; Own Storage:
;
;	None

	.SBTTL	FAL$BUILD_HEAD - BUILD DAP MESSAGE HEADER
	.PSECT	FAL$CODE	NOSHR,EXE,RD,NOWRT,BYTE

;++
; Functional Description:
;
;	FAL$BUILD_HEAD obtains a buffer and constructs a DAP message header
;	in it. FAL$BUILD_TAIL is a companion routine that is called after the
;	message body has been formed to update the length value in the header.
;	Both 1-byte and 2-byte length fields are supported for DAP message
;	blocking.
;
;	Note that the algorithm for building the header does not support the
;	use of optional fields such as STREAMID or SYSPEC.
;
; Calling Sequence:
;
;	BSBW	FAL$BUILD_HEAD
;
; Input Parameters:
;
;	R0	DAP message type value
;	R8	Address of FAL work area
;	R9	Address of DAP control block
;
; Implicit Inputs:
;
;	DAP$V_BIGBLK
;	DAP$V_MSGBLK
;	FAL$Q_XMT
;	FAL$V_LAST_MSG
;
; Output Parameters:
;
;	R3	Address of next byte available for message body
;
; Implicit Outputs:
;
;	DAP message header is placed in the message buffer.
;
; Completion Codes:
;
;	None
;
; Side Effects:
;
;	None
;
;--

;++
; On exit from FAL$BUILD_HEAD the incomplete message header will be either
; 2, 3, or 4 bytes long in one of the following three formats:
;
;	TYPE=msg#	TYPE=msg#	TYPE=8
;	FLAGS=0		FLAGS=2		FLAGS=6
;			LENGTH=0	LENGTH=0
;					LEN256=0
;
; Note:	The four byte format containing the extended length field is used only
;	for a DAP Data message.
;--

	ASSUME	DAP$V_STREAMID+1 EQ DAP$V_LENGTH
	ASSUME	DAP$V_LENGTH+1 EQ DAP$V_LEN256

FAL$BUILD_HEAD::			; Entry point
	MOVL	FAL$Q_XMT+4(R8),R3	; Get address of transmit buffer
	MOVB	R0,(R3)+		; Store DAP message type value
	BBS	#FAL$V_LAST_MSG,(R8),20$; Branch if this will be last message
					;  to block, thus requiring no length
					;  field in header
	CMPB	R0,#DAP$K_DAT_MSG	; Branch if this is not a Data message
	BNEQ	10$			;  (because only a Data message is
					;  potentially longer than 255 bytes)
	BBC	#DAP$V_BIGBLK,-		; Branch if 2-byte length field is
		DAP$Q_SYSCAP(R9),10$	;  not supported by partner
	MOVB	#<<DAP$M_LENGTH>!-	; Store FLAGS field indicating that
		  <DAP$M_LEN256>!-	;  an extended length field will be
		0>,(R3)+		;  included
	CLRW	(R3)+			; Reserve space for 2-byte length value
					;  (to be filled in by FAL$BUILD_TAIL)
	RSB				; Exit
10$:	BBC	#DAP$V_MSGBLK,-		; Branch if 1-byte length field is
		DAP$Q_SYSCAP(R9),20$	;  not supported by partner
	MOVB	#DAP$M_LENGTH,(R3)+	; Store FLAGS field
20$:	CLRB	(R3)+			; Reserve space for 1-byte length value
					;  (to be filled in by FAL$BUILD_TAIL)
					;  OR overwrite FLAGS field with zero
					;  if message blocking is not being used
	RSB				; Exit

	.SBTTL	FAL$BUILD_TAIL - COMPLETE DAP MESSAGE HEADER
	.PSECT	FAL$CODE	NOSHR,EXE,RD,NOWRT,BYTE

;++
; Functional Description:
;
;	FAL$BUILD_TAIL completes construction of the DAP message header that
;	FAL$BUILD_HEAD initiated by updating the length value in the header.
;	Both 1-byte and 2-byte length fields are supported for DAP message
;	blocking.
;
;	Note that the algorithm for building the header does not support the
;	use of optional fields such as STREAMID or SYSPEC.
;
;	Note also that the LENGTH field will be converted to a STREAMID field
;	with a value of zero if a 1-byte length field was allocated by
;	FAL$BUILD_HEAD, but the message body turned out to be more than 255
;	bytes long which cannot be represented in a single byte field.
;
; Calling Sequence:
;
;	BSBW	FAL$BUILD_TAIL
;
; Input Parameters:
;
;	R3	Address of last byte of message + 1
;	R8	Address of FAL work area
;
; Implicit Inputs:
;
;	FAL$Q_XMT
;	DAP message header
;
; Output Parameters:
;
;	R0-R1	Destroyed
;
; Implicit Outputs:
;
;	FAL$Q_XMT
;	LENGTH and LEN256 fields (if present) in the header are updated.
;
; Completion Codes:
;
;	None
;
; Side Effects:
;
;	LENGTH field may be converted to a STREAMID field with a value of zero.
;
;--

;++
; On exit from FAL$BUILD_TAIL the completed message header will be either
; 2, 3, or 4 bytes long in one of the following four formats:
;
;	TYPE=msg#	TYPE=msg#	TYPE=8		TYPE=8
;	FLAGS=0		FLAGS=2		FLAGS=6		FLAGS=1
;			LENGTH=size	LENGTH=size0	STREAMID=0
;					LEN256=size1
;
; Note:	The four byte format containing the extended length field is used only
;	for a DAP Data message.
;--

	ASSUME	DAP$V_STREAMID+1 EQ DAP$V_LENGTH
	ASSUME	DAP$V_LENGTH+1 EQ DAP$V_LEN256

FAL$BUILD_TAIL::			; Entry point
	SUBL3	FAL$Q_XMT+4(R8),R3,-	; Compute size of DAP message
		FAL$Q_XMT(R8)		;  and update transmit descriptor
	MOVQ	FAL$Q_XMT(R8),R0	; Put message descriptor in <R0,R1>
	BBC	#<DAP$V_LEN256+8>,-	; Branch if 2-byte length field was
		(R1),10$		;  not allocated in message header
	SUBW3	#4,R0,2(R1)		; Compute size of message body and
					;  store value in <LEN256,LENGTH> field
	RSB				; Exit
10$:	BBC	#<DAP$V_LENGTH+8>,-	; Branch if 1-byte length field was
		(R1),30$		;  not allocated in message header
	SUBW2	#3,R0			; Compute size of message body
	CMPW	R0,#255			; Branch if length of message body
	BGTRU	20$			;  will not fit in LENGTH field
	MOVB	R0,2(R1)		; Update LENGTH field
	RSB				; Exit
20$:	MOVB	#DAP$M_STREAMID,1(R1)	; Rewrite FLAGS field (converting
					;  LENGTH field into STREAMID field)
30$:	RSB				; Exit

	.SBTTL	FAL$CVT_BN4_EXT - CONVERT BINARY TO EXTENSIBLE
	.PSECT	FAL$CODE	NOSHR,EXE,RD,NOWRT,BYTE

;++
; Functional Description:
;
;	FAL$CVT_BN4_EXT converts an unsigned longword value to an extensible
;	field format and stores the result in a minimal number of bytes.
;
; Calling Sequence:
;
;	BSBW	FAL$CVT_BN4_EXT
;
; Input Parameters:
;
;	R1	Binary value to convert and store
;	R3	Address of next byte in buffer to store result
;
; Implicit Inputs:
;
;	None
;
; Output Parameters:
;
;	R1	Zeroed
;	R3	Address of last byte of result + 1
;
; Implicit Outputs:
;
;	None
;
; Completion Codes:
;
;	None
;
; Side Effects:
;
;	None
;
;--

FAL$CVT_BN4_EXT::			; Entry point
	MOVB	R1,(R3)+		; Copy 7 bits to DST byte--the high
					;  bit will be corrected later
	BICB2	#^X7F,R1		; Discard SRC bits just copied
	ROTL	#-7,R1,R1		; Move next 7 bits into place
	BEQL	10$			; All done if remaining SRC bits
					;  are zero
	BISB2	#^X80,-1(R3)		; Set extensible bit in DST byte
	BRB	FAL$CVT_BN4_EXT		;  and process next byte
10$:	RSB				; Exit

	.SBTTL	FAL$CVT_BN8_EXT - CONVERT BINARY TO EXTENSIBLE
	.PSECT	FAL$CODE	NOSHR,EXE,RD,NOWRT,BYTE

;++
; Functional Description:
;
;	FAL$CVT_BN8_EXT converts an unsigned quadword value to an extensible
;	field format and stores the result in a minimal number of bytes.
;
;	Note that only source bits 00-62 are used; bit 63 is ignored.
;
; Calling Sequence:
;
;	BSBW	FAL$CVT_BN8_EXT
;
; Input Parameters:
;
;	R1	Binary value to convert and store (low order bits)
;	R2	Binary value to convert and store (high order bits)
;	R3	Address of next byte in buffer to store result
;
; Implicit Inputs:
;
;	None
;
; Output Parameters:
;
;	R1-R2	Zeroed
;	R3	Address of last byte of result + 1
;
; Implicit Outputs:
;
;	None
;
; Completion Codes:
;
;	None
;
; Side Effects:
;
;	None
;
;--

FAL$CVT_BN8_EXT::			; Entry point
	$CLRBIT	#31,R2			; Clear high order bit so that zero
					;  will always propogate on shift
10$:	MOVB	R1,(R3)+		; Copy 7 bits to DST byte--the high
					;  bit will be corrected later
	BICB2	#^X7F,R1		; Discard SRC bits just copied
	ASHQ	#-7,R1,R1		; Move next 7 bits into place
	BEQL	20$			; All done if remaining SRC bits
					;  are zero
	BISB2	#^X80,-1(R3)		; Set extensible bit in DST byte
	BRB	10$			;  and process next byte
20$:	RSB				; Exit

	.SBTTL	FAL$CVT_BN4_IMG - CONVERT BINARY TO IMAGE
	.PSECT	FAL$CODE	NOSHR,EXE,RD,NOWRT,BYTE

;++
; Functional Description:
;
;	FAL$CVT_BN4_IMG converts an unsigned longword value to an image
;	field format (counted binary string) and stores the result in a
;	minimal number of bytes.
;
; Calling Sequence:
;
;	BSBW	FAL$CVT_BN4_IMG
;
; Input Parameters:
;
;	R1	Binary value to convert and store
;	R3	Address of next byte in buffer to store result
;
; Implicit Inputs:
;
;	None
;
; Output Parameters:
;
;	R1	Zeroed
;	R2	Destroyed
;	R3	Address of last byte of result + 1
;
; Implicit Outputs:
;
;	None
;
; Completion Codes:
;
;	None
;
; Side Effects:
;
;	None
;
;--

FAL$CVT_BN4_IMG::			; Entry point
	MOVL	R3,R2			; Save address of DST count byte
	CLRB	(R3)+			; Zero DST count byte
	TSTL	R1			; Test value to convert
	BEQL	20$			; All done if value is zero
10$:	MOVB	R1,(R3)+		; Copy next byte to DST
	INCB	(R2)			; Increment byte counter
	CLRB	R1			; Discard byte just copied
	ROTL	#-8,R1,R1		; Move next byte into place
	BNEQ	10$			; There is more to do if any
					;  remaining bits are non-zero
20$:	RSB				; Exit

	.END				; End of module
