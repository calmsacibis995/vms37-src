	.TITLE	FALACTMSG - STATE TABLE ACTION ROUTINES
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; Facility: FAL (DECnet File Access Listener)
;
; Abstract:
;
;	This module contains action routines called by the state table manager.
;
; Environment: VAX/VMS, user mode
;
; Author: James A. Krycka,	Creation Date:	16-JUN-1977
;
; Modified By:
;
;	V02-011	JAK0025		J A Krycka	16-NOV-1981
;		When receiving file attributes and the requesting node is not
;		a VMS system, convert RFM = STM and RAT = xxx to RFM = STM and
;		and RAT = CR.
;
;	V02-010	JAK0025		J A Krycka	11-NOV-1981
;		Fix bug in wildcard file retrieval.
;
;	V02-009	JAK0023		J A Krycka	10-SEP-1981
;		Support the extended length Date and Time XAB.
;
;	V02-008	JAK0023		J A Krycka	04-SEP-1981
;		Save DISPLAY field from DAP Control message in FAL work area.
;
;	V02-007	JAK0022		J A Krycka	29-AUG-1981
;		Add support for the followin ROP field options:
;		FDL, LIM, NXR, REA, RRL, and WAT.
;
;	V02-006	JAK0022		J A Krycka	24-AUG-1981
;		Update symbols to correspond to revised DAPDEF.MDL file.
;
;	V02-005	JAK0021		J A Krycka	03-AUG-1981
;		Fix bug in specifying bucket size on create when no Allocation
;		XABs are present.
;
;	V02-004	JAK0020		J A Krycka	21-JUL-1981
;		Initialize the Revision Date and Time XAB when processing the
;		DAP Date and Time message.
;
;	V02-003	JAK0020		J A Krycka	17-JUL-1981
;		Use FAL$W_QIOBUFSIZ value instead of DAP$K_BUFSIZ_F to put in
;		BUFSIZ field of DAP Configuration message.
;
;	V02-002	JAK0018		J A Krycka	18-JUN-1981
;		This module was created from routines previously residing in
;		FALACTION.
;
;--

	.SBTTL	DECLARATIONS

;
; Include Files:
;

	$DAPPLGDEF			; Define DAP prologue symbols
	$DAPHDRDEF			; Define DAP message header
	$DAPSSPDEF			; Define DAP system specific field
	$DAPCNFDEF			; Define DAP Configuration message
	$DAPATTDEF			; Define DAP Attributes message
	$DAPACCDEF			; Define DAP Access message
	$DAPCTLDEF			; Define DAP Control message
	$DAPCONDEF			; Define DAP Continue Transfer message
	$DAPCMPDEF			; Define DAP Access Complete message
	$DAPKEYDEF			; Define DAP Key Definition message
	$DAPALLDEF			; Define DAP Allocation message
	$DAPTIMDEF			; Define DAP Date and Time message
	$DAPPRODEF			; Define DAP Protection message
	$DEVDEF				; Define Device Characteristics symbols
	$FABDEF				; Define File Access Block symbols
	$FALWRKDEF			; Define FAL Work Area symbols
	$RABDEF				; Define Record Access Block sym**
	$XABDEF				; Define symbols common to all XABs
	$XABALLDEF			; Define Allocation XAB symbols
	$XABDATDEF			; Define Date and Time XAB symbols
	$XABKEYDEF			; Define Key Definition XAB symbols
	$XABPRODEF			; Define Protection XAB symbols
;	$XABRDTDEF			; Define Revision Date and Time symbols

;
; Macros:
;
;	None
;
; Equated Symbols:
;
;

	ASSUME	DAP$Q_DCODE_FLG EQ 0
	ASSUME	FAL$Q_FLG EQ 0

;
; Own Storage:
;

	.SBTTL	ACTION ROUTINES
	.PSECT	FAL$CODE	NOSHR,EXE,RD,NOWRT,BYTE

;++
; Functional Description:
;
;	This module contains action routines invoked by the state table
;	manager (FAL$STATE).
;
;	The input parameters and completion codes listed below are applicable
;	for all of these action routines. Note that an action routine may use
;	R0-R7 and AP without restoring them on exit. R0 on exit, however, must
;	represent a status code to indicate success/failure of the routine or
;	a true/false condition, as appropriate. This status code is used by
;	the state table manager to advance to the next state.
;
; Calling Sequence:
;
;	BSBW	FAL$name
;
; Input Parameters:
;
;	R8	Address of FAL work area
;	R9	Address of DAP control block
;	R10	Address of FAB
;	R11	Address of RAB
;
; Implicit Inputs:
;
;	None
;
; Output Parameters:
;
;	R0	Status code
;	R1-R7	Destroyed
;	AP	Destroyed
;
; Implicit Outputs:
;
;	None
;
; Completion Codes:
;
;	R0	1 = success; 0 = failure
;
; Side Effects:
;
;	None
;
;--

	.SBTTL	FAL$DECODE_CNF

;++
; Process the Configuration message which has been received and validated.
; Return a Configuration message to partner and determine the DAP buffer size
; to use which is the smaller of partner's buffer size and FAL's buffer size.
;--

FAL$DECODE_CNF::			; Entry point
	$SETBIT	#FAL$V_CNF_MSG,(R8)	; Denote Configuration message received
	$CLRBIT	#FAL$V_ATT_MSG,(R8)	;  and discard any previous Attributes
					;  message
	MOVZWL	FAL$W_QIOBUFSIZ(R8),R7	; Get FAL's buffer size (i.e., largest
					;  I/O buffer size supported by process)

;+
; Build and send Configuration message to partner.
;-

SEND_CNF:				;
	$SETBIT	#FAL$V_LAST_MSG,(R8)	; Declare this last message to block
	MOVL	#DAP$K_CNF_MSG,R0	; Get message type value
	BSBW	FAL$BUILD_HEAD		; Construct message header
	MOVW	R7,(R3)+		; Store BUFSIZ field
	MOVB	#DAP$K_VAXVMS,(R3)+	; Store OSTYPE field
	MOVB	#DAP$K_RMS32,(R3)+	; Store FILESYS field
	MOVB	#DAP$K_VERNUM_V,(R3)+	; Store VERNUM field
	MOVB	#DAP$K_ECONUM_V,(R3)+	; Store ECONUM field
	MOVB	#DAP$K_USRNUM_V,(R3)+	; Store USRNUM field
	MOVB	#DAP$K_SOFTVER_V,(R3)+	; Store SOFTVER field
	MOVB	#DAP$K_USRSOFT_V,(R3)+	; Store USRSOFT field

;
; Construct the system capabilities field.
; Also, check the debugging options to disable message blocking and DAP level
; CRC checking.
;

	MOVL	#DAP$K_SYSCAP1_V,R1	; Get VAX supported capabilities
	MOVL	#DAP$K_SYSCAP2_V,R2	;  quadword bitmask
	BBC	#FAL$V_DIS_MBK,(R8),10$	; Is DAP message blocking disabled?
	BICL2	#<<1@DAP$V_MSGBLK>!-	; Yes, clear message blocking bits in
		  <1@DAP$V_BIGBLK>!-	;  system capabilities bitmask for
		0>,R1			;  Configuration message to transmit
	BICL2	#<<1@DAP$V_MSGBLK>!-	; Also, clear message blocking bits in
		  <1@DAP$V_BIGBLK>!-	;  system capabilities bitmask
		0>,DAP$Q_SYSCAP(R9)	;  received from partner
10$:	BBC	#FAL$V_DIS_CRC,(R8),20$	; Is file level CRC checksum disabled?
	$CLRBIT	#DAP$V_DAPCRC,R1	; Yes, clear bits in both XMT and RCV
	$CLRBIT	#DAP$V_DAPCRC,-		;  system capabilities fields
		DAP$Q_SYSCAP(R9)	;
20$:	BSBW	FAL$CVT_BN8_EXT		; Store SYSCAP as an extensible field
	BSBW	FAL$BUILD_TAIL		; Finish building message
	BSBW	FAL$TRANSMIT		; Send Configuration message

;+
; Determine the 'agreed upon' DAP buffer size to use and save this value.
;-

	MOVW	DAP$W_BUFSIZ(R9),-	; Assume we'll use partner's
		FAL$W_DAPBUFSIZ(R8)	;  buffer size
	BEQL	30$			; Branch if partner has unlimited space
	CMPW	DAP$W_BUFSIZ(R9),R7	; Compare partner's buffer size
					;  with FAL's buffer size
	BLEQU	40$			; Branch if partner has less capacity
30$:	MOVW	R7,FAL$W_DAPBUFSIZ(R8)	; We guessed wrong, so we'll use
					;  FAL's buffer size
40$:	BRW	EXIT_SUCCESS		; Exit state with success

	.SBTTL	FAL$DECODE_ATT

;++
; Process the Attributes message which has been received and validated.
; Update the FAB and FHCXAB with information from this message.
;--

FAL$DECODE_ATT::			; Entry point

	$SETBIT	#FAL$V_ATT_MSG,(R8)	; Denote Attributes message received

;
; Save the DAP DATATYPE field for use later.
;

	MOVB	DAP$B_DATATYPE(R9),FAL$B_DATATYPE(R8)

;
; Process the DAP ORG, RFM and RAT fields.
;

	ASSUME	DAP$K_SEQ EQ FAB$C_SEQ
	ASSUME	DAP$K_REL EQ FAB$C_REL
	ASSUME	DAP$K_IDX EQ FAB$C_IDX

	MOVB	DAP$B_ORG(R9),FAB$B_ORG(R10)
	
	ASSUME 	DAP$K_UDF EQ FAB$C_UDF
	ASSUME	DAP$K_FIX EQ FAB$C_FIX
	ASSUME	DAP$K_VAR EQ FAB$C_VAR
	ASSUME	DAP$K_VFC EQ FAB$C_VFC
	ASSUME	DAP$K_STM EQ FAB$C_STM

	MOVB	DAP$B_RFM(R9),FAB$B_RFM(R10)

	ASSUME	DAP$V_FTN EQ FAB$V_FTN
	ASSUME	DAP$V_CR  EQ FAB$V_CR
	ASSUME	DAP$V_PRN EQ FAB$V_PRN
	ASSUME	DAP$V_BLK EQ FAB$V_BLK

	MOVB	DAP$B_RAT(R9),FAB$B_RAT(R10)
	BICB2	#DAP$M_EMBEDDED,-	; Ignore this bit
		FAB$B_RAT(R10)		;
	BBS	#DAP$V_VAXVMS,(R9),10$	; Branch if partner is VAX/VMS
	CMPB	DAP$B_RFM(R9),#DAP$K_STM; Branch if not stream format
	BNEQ	10$			;
	MOVB	#FAB$M_CR,FAB$B_RAT(R10); If it is, declare cc to be implied

;
; Process the DAP BLS, MRS, ALQ, BKS, FSZ, MRN, and DEQ fields.
;

10$:	MOVW	DAP$W_BLS(R9),FAB$W_BLS(R10)
	MOVW	DAP$W_MRS(R9),FAB$W_MRS(R10)
	MOVL	DAP$L_ALQ1(R9),FAB$L_ALQ(R10)
	MOVB	DAP$B_BKS(R9),FAB$B_BKS(R10)
	MOVB	DAP$B_FSZ(R9),FAB$B_FSZ(R10)
	MOVL	DAP$L_MRN(R9),FAB$L_MRN(R10)
	MOVW	DAP$W_DEQ1(R9),FAB$W_DEQ(R10)

;
; Process the DAP FOP field after saving it for use later.
;

	MOVL	DAP$L_FOP1(R9),R1	; Get DAP FOP bits and
	MOVL	R1,FAL$L_FOP(R8)	;  save field for use later
	BSBW	MAP_FOP_FIELD		; Update FOP in FAB

;
; Process the DAP LRL field.
; This is the only FHCXAB field that is input to RMS, and then only for the
; $CREATE function where the record format is variable or VFC.
;

	MOVW	DAP$W_LRL(R9),-		; Copy value to FHCXAB
		FAL$L_FHCXAB+XAB$W_LRL(R8)
	BRW	EXIT_SUCCESS		; Exit state with success

	.SBTTL	FAL$DECODE_ACC

;++
; Process the Access message which has been received and validated.
; Update the FAB with information from this message.
;--

FAL$DECODE_ACC::			; Entry point

;
; Save the DAP ACCFUNC, ACCOPT, and DISPLAY fields for use later.
;

	MOVB	DAP$B_ACCFUNC(R9),FAL$B_ACCFUNC(R8)
	MOVB	DAP$B_ACCOPT(R9),FAL$B_ACCOPT(R8)
	MOVW	DAP$W_DISPLAY1(R9),FAL$W_DISPLAY(R8)

;
; Process the DAP file specification field.
;

	MOVB	DAP$Q_FILESPEC(R9),-	; Store size of filespec string
		FAB$B_FNS(R10)		;  in FAB
	MOVC3	DAP$Q_FILESPEC(R9),-	; Copy filespec string to buffer
		@DAP$Q_FILESPEC+4(R9),-	;
		@FAB$L_FNA(R10)		;
	MOVAQ	DAP$Q_FILESPEC(R9),R1	; Get address of filename descriptor
	BSBW	FAL$LOG_REQNAM		; Log requested name in print file

;
; Process the DAP FAC field.
;

	ASSUME	DAP$V_PUT EQ FAB$V_PUT
	ASSUME	DAP$V_GET EQ FAB$V_GET
	ASSUME	DAP$V_DEL EQ FAB$V_DEL
	ASSUME	DAP$V_UPD EQ FAB$V_UPD
	ASSUME	DAP$V_TRN EQ FAB$V_TRN
	ASSUME	DAP$V_BIO EQ FAB$V_BIO
	ASSUME	DAP$V_BRO EQ FAB$V_BRO
	ASSUME	DAP$V_APP EQ FAB$V_EXE	; Map APP to PUT

	MOVB	DAP$B_FAC(R9),FAB$B_FAC(R10)
	BBCC	#FAB$V_EXE,FAB$B_FAC(R10),10$
	BBSS	#FAB$V_PUT,FAB$B_FAC(R10),10$

;
; Process the DAP SHR field.
; 

10$:	CLRL	R2			; Clear RMS SHR bits
	MOVZBL	DAP$B_SHR(R9),R1	; Get DAP SHR bits
	BEQL	20$			; Branch if no bits to map
	$MAPBIT	DAP$V_SHRPUT,FAB$V_SHRPUT; Map SHRPUT bit
	$MAPBIT	DAP$V_SHRGET,FAB$V_SHRGET; Map SHRGET bit
	$MAPBIT	DAP$V_SHRDEL,FAB$V_SHRDEL; Map SHRDEL bit
	$MAPBIT	DAP$V_SHRUPD,FAB$V_SHRUPD; Map SHRUPD bit
	$MAPBIT	DAP$V_UPI,FAB$V_UPI	;  Map UPI bit
	$MAPBIT	DAP$V_NIL,FAB$V_NIL	;  Map NIL bit
20$:	MOVB	R2,FAB$B_SHR(R10)	; Update SHR field in FAB

;
; Use the ACCFUNC field value as the next state table value.
;

	MOVB	DAP$B_ACCFUNC(R9),-	; Store new state transition value
		FAL$B_VALUE(R8)		;
	BBC	#DAP$V_LOAD,-		; Branch if no system specific
		DAP$L_SSP_FLG(R9),30$	;  function modifier found
	$SETBIT	#FAB$V_SQO,FAB$L_FOP(R10)
					; Force sequential file transfer
					;  mode for efficiency
	MOVB	#DAP$K_LOAD,-		; Make new state transition value
		FAL$B_VALUE(R8)		;  the load image function
30$:	BRW	EXIT_SUCCESS		; Exit state with success

	.SBTTL	FAL$DECODE_CTL

;++
; Process the Control message which has been received and validated.
; Update the RAB with information from this message.
;--

FAL$DECODE_CTL::			; Entry point

;
; Save the DAP DISPLAY field for use later if we're not in a wildcard context.
; In wildcard file retrieval, for example, the DAP Access message is sent only
; once, thus FAL$W_DISPLAY must reflect the DISPLAY value from the Access
; message on subsequent file opens. Since the Control message functions of
; DISPLAY and EXTEND are not valid in a wildcard context (which require
; FAL$W_DISPLAY to be updated), this special check is an acceptible solution
; to a wildcard retrieval problem.
;

	BBS	#FAL$V_WILD,(R8),5$	; Branch if wildcard operation
	MOVW	DAP$W_DISPLAY2(R9),FAL$W_DISPLAY(R8)

;+
; Process the DAP RAC field.
; In addition to normal RMS-32 RAC information, this field specifies whether
; the access is to be in:
;   (1)	file transfer mode or record transfer mode
;   (2)	block I/O mode or record I/O mode
;
; Note:	If the RAC field is not present in the Control message, then the default
;	used is the previous value.
;-

	ASSUME	DAP$K_SEQ_ACC  EQ 0
	ASSUME	DAP$K_KEY_ACC  EQ 1
	ASSUME	DAP$K_RFA_ACC  EQ 2
	ASSUME	DAP$K_SEQ_FILE EQ 3
	ASSUME	DAP$K_BLK_VBN  EQ 4
	ASSUME	DAP$K_BLK_FILE EQ 5

5$:	BBS	#DAP$V_RAC,-		; Branch if RAC field was explicitly
		DAP$W_CTLMENU(R9),10$	;  specified
	MOVB	FAL$B_RAC(R8),-		; If not, use previous value
		DAP$B_RAC(R9)		;
10$:	MOVB	DAP$B_RAC(R9),-		; Save currently specified value as
		FAL$B_RAC(R8)		;  previous value for next-time-thru
	$CASEB	SELECTOR=DAP$B_RAC(R9)-	; Dispatch on DAP record access mode:
		DISPL=<-		;
		    20$-		;  Sequential record access
		    20$-		;  Random access by key value
		    20$-		;  Random access by RFA
		    30$-		;  Sequential file transfer
		    40$-		;  Block I/O access by VBN
		    50$-		;  Block I/O sequential file transfer
		>			;
;+
; Update the RAC field of the RAB unless block I/O mode is specified.
; (RMS-32 ignores the RAC field on block I/O operations.)
;
; Also update the file transfer mode and block I/O flags as appropriate
; for the access mode invoked.
;-

	ASSUME	DAP$K_SEQ_ACC EQ RAB$C_SEQ
	ASSUME	DAP$K_KEY_ACC EQ RAB$C_KEY
	ASSUME	DAP$K_RFA_ACC EQ RAB$C_RFA

20$:	MOVB	DAP$B_RAC(R9),RAB$B_RAC(R11) ; Update RAC (SEQ, KEY, RFA)
	$CLRBIT	#FAL$V_FTM,(R8)		; Say record transfer mode
	BRB	35$			;
30$:	MOVB	#RAB$C_SEQ,RAB$B_RAC(R11) ; Update RAC (SEQ)
	$SETBIT	#FAL$V_FTM,(R8)		; Say file transfer mode
35$:	$CLRBIT	#FAL$V_BLK_IO,(R8)	; Say record I/O mode
	BRB	KEY_FIELD		;
40$:	$CLRBIT	#FAL$V_FTM,(R8)		; Say record transfer mode
	BRB	55$			;
50$:	$SETBIT	#FAL$V_FTM,(R8)		; Say file transfer mode
55$:	$SETBIT	#FAL$V_BLK_IO,(R8)	; Say block I/O mode

;+
; Process the DAP KEY field.
; Its format and content are context dependent:
;   (1)	for block I/O access, it contains the virtual block number for
;	$READ/$WRITE, or the number of blocks for $SPACE.
;   (2) for sequential record access, this field is ignored because RMS uses
;	its internally stored next-record-pointer to locate the record.
;   (3)	for random access by key value for relative (or fixed length
;	sequential) files, it contains the relative record number.
;   (4)	for random access by key value for indexed files, it contains the
;	key value string.
;   (5) for random access by record file address, it contains the RFA value.
;-

KEY_FIELD:				;
	MOVQ	DAP$Q_KEY(R9),R0	; <R0,R1> => descriptor of key field
	BBS	#FAL$V_BLK_IO,(R8),40$	; Branch if block I/O access

	ASSUME	RAB$C_SEQ EQ 0
	ASSUME	RAB$C_KEY EQ 1
	ASSUME	RAB$C_RFA EQ 2

	$CASEB	SELECTOR=RAB$B_RAC(R11)-; Dispatch on RMS record access mode:
		BASE=#RAB$C_SEQ-	;
		DISPL=<-		;
		    90$-		;  Sequential record access
		    10$-		;  Random access by key value
		    30$-		;  Random access by RFA
		>			;
10$:	CMPB	FAB$B_ORG(R10),#FAB$C_IDX ; Branch if indexed file
	BEQL	20$			; Fall thru if sequential or relative

;
; Key field contains relative record number (RRN).
;

	MOVB	#4,RAB$B_KSZ(R11)	; Record number must be a longword
	MOVAL	FAL$L_NUMBER(R8),R3	; Prepare to store number as a longword
					;  (it may be NEQ 4-bytes now)
	MOVL	R3,RAB$L_KBF(R11)	; Point to number from RAB
	BRB	50$			; Join common code

;
; Key field contains key string.
;

20$:	MOVB	R0,RAB$B_KSZ(R11)	; Store size and address of key value
	MOVL	R1,RAB$L_KBF(R11)	;  string in RAB
	BRB	90$			; All done with key field

;
; Key field contains record file address (RFA).
;

30$:	MOVC5	R0,(R1),#0,#6,-		; Store RFA value in RAB
		RAB$W_RFA(R11)		;
	BRB	60$			; Join common code

;
; Key field contains virtual block number (VBN).
;

40$:	MOVAL	RAB$L_BKT(R11),R3	; Store 4-byte VBN in BKT field

;
; Common code to update field in RAB.
;

50$:	MOVC5	R0,(R1),#0,#4,(R3)	; Move data to specified RAB field
60$:	BLEQU	90$			; Done if all SRC bytes are copied
					;  (i.e., SRC size LEQU DST size)
70$:	TSTB	(R1)+			; Error if any unmoved bytes are
	BNEQ	80$			;  non-zero
	SOBGTR	R0,70$			; Continue until all extra bytes
	BRB	90$			;  are checked
80$:	BSBW	FAL$UNS_KEY		; Return error in Status message
	BRW	EXIT_FAILURE		; Exit state with failure

;+
; Process the DAP KRF field.
; Applicable only for indexed files.
;-

90$:	MOVB	DAP$B_KRF(R9),RAB$B_KRF(R11)

;+
; Process the DAP ROP field.
;-

	BBC	#DAP$V_ROP,-		; Branch if ROP field was not explicitly
		DAP$W_CTLMENU(R9),100$	;  specified making previous ROP value
					;  the current value
	MOVL	DAP$L_ROP(R9),R1	; Get DAP ROP bits
	BSBW	MAP_ROP_FIELD		; Update ROP in RAB

;
; Use the CTLFUNC field value as the next state table value.
;

100$:	MOVB	DAP$B_CTLFUNC(R9),-	; Store new state transition value
		FAL$B_VALUE(R8)		;
	BRW	EXIT_SUCCESS		; Exit state with success

	.SBTTL	FAL$DECODE_CON

;++
; Process the Continue Transfer message which has been received and validated.
;--

FAL$DECODE_CON::			; Entry point

;
; Use the CONFUNC field value as the next state transition table value.
;

	MOVB	DAP$B_CONFUNC(R9),-	; Store new state transition value
		FAL$B_VALUE(R8)		;
	BRW	EXIT_SUCCESS		; Exit state with success

	.SBTTL	FAL$DECODE_CMP

;++
; Process the Access Complete message which has been received and validated.
; Update the FAB if necessary.
;--

FAL$DECODE_CMP::			; Entry point

;
; Process the DAP FOP field.
; Do not update the FOP field in the FAB if this is a DAP DISCONNECT function
; or if no FOP field was included in the Access Complete message.
;

	MOVL	DAP$L_FOP2(R9),R1	; Get DAP FOP bits
	BEQL	10$			; Branch if no bits to map
	BSBW	MAP_FOP_FIELD		; Update FOP in FAB

;
; Use the CMPFUNC field value as the next state table value.
;

10$:	MOVB	DAP$B_CMPFUNC(R9),-	; Store new state transition value
		FAL$B_VALUE(R8)		;
	BRW	EXIT_SUCCESS		; Exit state with success

	.SBTTL	FAL$DECODE_KEY

;++
; Process the Key Definition message which has been received and validated.
; Update the KEYXAB (by key of reference) with information from this message.
;--

FAL$DECODE_KEY::			; Entry point

;
; Initialize the appropriate Key Definition XAB (in the FAL work area) and
; process the DAP REF field.
;

	MOVZBL	DAP$B_REF(R9),R6	; Get key of reference value
	BSBW	FAL$INIT_KEYXAB		; On return R7 = address of XAB
	BLBS	R0,10$			; Branch on success
	BRW	EXIT_FAILURE		; Exit state with failure
					; (i.e., ignore this DAP message)

;
; Process the DAP KNM field.
;

	ASSUME	FAL$K_KEYNAM EQ 32

10$:	TSTL	DAP$Q_KNM(R9)		; Branch if no key name string was
	BEQL	20$			;  specified
	MOVC5	DAP$Q_KNM(R9),-		; Copy DAP key name string
		@DAP$Q_KNM+4(R9),-	;  to 32 byte key name buffer
		#0,#32,@XAB$L_KNM(R7)	;  with zero fill
	BRB	30$			;
20$:	CLRL	XAB$L_KNM(R7)		; Zero key name buffer address

;
; Process the DAP FLG field.
;

30$:	MOVZBL	DAP$B_FLG(R9),R1	; Get DAP FLG bits
	CLRL	R2			; Clear RMS FLG bits
	$MAPBIT	DAP$V_DUP,XAB$V_DUP	; Map DUP bit
	$MAPBIT	DAP$V_CHG,XAB$V_CHG	; Map CHG bit
	$MAPBIT	DAP$V_NUL_CHR,XAB$V_NUL	; Map NUL bit
	MOVB	R2,XAB$B_FLG(R7)	; Update FLG field in XAB

;
; Process the DAP DFL, IFL, NUL, IAN, LAN, DAN, and DTP fields.
;

	MOVB	DAP$W_DFL(R9),XAB$W_DFL(R7)
	MOVB	DAP$W_IFL(R9),XAB$W_IFL(R7)
	MOVB	DAP$B_NUL(R9),XAB$B_NUL(R7)
	MOVB	DAP$B_IAN(R9),XAB$B_IAN(R7)
	MOVB	DAP$B_LAN(R9),XAB$B_LAN(R7)
	MOVB	DAP$B_DAN(R9),XAB$B_DAN(R7)
	MOVB	DAP$B_DTP(R9),XAB$B_DTP(R7)

;
; Process the DAP NSG, POS, and SIZ fields.
;
; Note: FAL$DECODE_MSG guarantees that 0 < DAP$B_NSG < 9.
;

	MOVZBL	DAP$B_NSG(R9),R6	; Get # key segments
	MOVB	R6,XAB$B_NSG(R7)	; Update NSG field in XAB
	MOVC3	R6,DAP$B_SIZ(R9),-	; Copy 1 to 8 key size values
		XAB$B_SIZ(R7)		;  to XAB
	ASHL	#1,R6,R6		; Double byte count
	MOVC3	R6,DAP$W_POS(R9),-	; Copy 1 to 8 key position values
		XAB$W_POS(R7)		;  to XAB

;
; Ignore the DAP RVB, DVB, DBS, IBS, LVL, TKS, and MRL fields as these are not
; inputs to RMS.
;
; Finish paper work and exit.
;

	$SETBIT	#FAL$V_KEYXAB,FAL$W_RECEIVED(R8)
					; Denote XAB to add to XAB chain
	BRW	EXIT_SUCCESS		; Exit state with success

	.SBTTL	FAL$DECODE_ALL

;++
; Process the Allocation message which has been received and validated.
; Update the ALLXAB (by AID) with information from this message.
;--

FAL$DECODE_ALL::			; Entry point

;
; Initialize the appropriate Allocation XAB (in the FAL work area) and
; process the DAP AID field.
;

	MOVZBL	DAP$B_AID(R9),R6	; Get area ID value
	BSBW	FAL$INIT_ALLXAB		; On return R7 = address of XAB
	BLBS	R0,10$			; Branch on success
	BRW	EXIT_FAILURE		; Exit state with failure
					; (i.e., ignore this DAP message)

;
; Process the DAP ALN field.
;

	ASSUME	DAP$K_ANY EQ 0
	ASSUME	DAP$K_CYL EQ XAB$C_CYL
	ASSUME	DAP$K_LBN EQ XAB$C_LBN
	ASSUME	DAP$K_VBN EQ XAB$C_VBN

10$:	MOVB	DAP$B_ALN(R9),XAB$B_ALN(R7)

;
; Process the DAP AOP field.
;

	MOVZBL	DAP$B_AOP(R9),R1	; Get DAP AOP bits
	CLRL	R2			; Clear RMS AOP bits
	$MAPBIT	DAP$V_HRD,XAB$V_HRD	; Map HRD bit
	$MAPBIT	DAP$V_CBT2,XAB$V_CBT	; Map CBT bit
	$MAPBIT	DAP$V_CTG2,XAB$V_CTG	; Map CTG bit
	$MAPBIT	DAP$V_ONC,XAB$V_ONC	; Map ONC bit
	MOVB	R2,XAB$B_AOP(R7)	; Update AOP field in XAB

;
; Process the DAP VOL, LOC, ALQ, BKZ, and DEQ fields.
;

	MOVW	DAP$W_VOL(R9),XAB$W_VOL(R7)
	MOVL	DAP$L_LOC(R9),XAB$L_LOC(R7)
	MOVL	DAP$L_ALQ2(R9),XAB$L_ALQ(R7)
	MOVB	DAP$B_BKZ(R9),XAB$B_BKZ(R7)
	MOVW	DAP$W_DEQ2(R9),XAB$W_DEQ(R7)

;
; Finish paper work and exit.
;

	$SETBIT	#FAL$V_ALLXAB,FAL$W_RECEIVED(R8)
					; Denote XAB to add to XAB chain
	BRW	EXIT_SUCCESS		; Exit state with success

	.SBTTL	FAL$DECODE_TIM

;++
; Process the Date and Time message which has been received and validated.
; Initialize both the DATXAB and RDTXAB and update them with information from
; this message. Other action routines will determine which of the two XABs to
; to use (or both) depending on the function that will be performed.
;--

FAL$DECODE_TIM::			; Entry point

;
; Initialize and fill-in the Date and Time XAB.
;

	BSBW	FAL$INIT_DATXAB		; On return R7 = address of XAB
	MOVQ	DAP$Q_CDT(R9),-		; Copy creation date and time
		XAB$Q_CDT(R7)		;  binary value to XAB
	MOVQ	DAP$Q_RDT(R9),-		; Copy revision date and time
		XAB$Q_RDT(R7)		;  binary value to XAB
	MOVQ	DAP$Q_EDT(R9),-		; Copy expiration date and time
		XAB$Q_EDT(R7)		;  binary value to XAB
	MOVQ	DAP$Q_BDT(R9),-		; Copy backup date and time
		XAB$Q_BDT(R7)		;  binary value to XAB
	MOVW	DAP$W_RVN(R9),-		; Store revision number value in XAB
		XAB$W_RVN(R7)		;

;
; Initialize and fill-in the Revision Date and Time XAB.
;

	BSBW	FAL$INIT_RDTXAB		; On return R7 = address of XAB
	MOVQ	DAP$Q_RDT(R9),-		; Copy revision date and time
		XAB$Q_RDT(R7)		;  binary value to XAB
	MOVW	DAP$W_RVN(R9),-		; Store revision number value in XAB
		XAB$W_RVN(R7)		;

;
; Finish paper work and exit.
;

	BISW2	#<<FAL$M_DATXAB>!-	; Denote XABs to add to XAB chain
		  <FAL$M_RDTXAB>!-	;
		0>,FAL$W_RECEIVED(R8)	;
	BRW	EXIT_SUCCESS		; Exit state with success

	.SBTTL	FAL$DECODE_PRO

;++
; Process the Protection message which has been received and validated.
; Update the PROXAB with information from this message.
;--

FAL$DECODE_PRO::			; Entry point
	BSBW	FAL$INIT_PROXAB		; On return R7 = address of XAB
	CLRL	XAB$L_UIC(R7)		; Initialize UIC and protection mask
	MOVW	#-1,XAB$W_PRO(R7)	;  fields to [0,0] and -1. These mean
					;  use process UIC and default process
					;  protection in effect, respectively
	
;
; Process the DAP OWNER field.
;

	MOVQ	DAP$Q_OWNER(R9),R4	; Get descriptor of ASCII string
	CMPB	(R5),#^A\[\		; Branch if string does not begin
	BNEQ	30$			;  with bracket
	CMPB	-1(R5)[R4],#^A\]\	; Branch if string does not end
	BNEQ	30$			;  with bracket
	SUBL2	#2,R4			; Discard brackets
	INCL	R5			;
	LOCC	#^A\,\,R4,(R5)		; Locate group-member delimiter
	BEQL	30$			; Branch on failure
	SUBL3	R5,R1,R4		; <R4,R5> => group string
	DECL	R0			; <R0,R1> => member string
	INCL	R1			;
	CLRL	-(SP)			; Allocate space from stack
	PUSHL	SP			; Address of result
	PUSHL	R1			; Address of input string
	PUSHL	R0			; Size of input string
	CALLS	#3,G^LIB$CVT_OTB	; Convert octal string to binary
	BLBC	R0,10$			; Branch on failure
	MOVW	(SP),XAB$W_MBM(R7)	; Update member UIC value in XAB
10$:	PUSHL	SP			; Address of result
	PUSHL	R5			; Address of input string
	PUSHL	R4			; Size of input string
	CALLS	#3,G^LIB$CVT_OTB	; Convert octal string to binary
	BLBC	R0,20$			; Branch on failure
	MOVW	(SP),XAB$W_GRP(R7)	; Update group UIC value in XAB
20$:	CLRL	(SP)+			; Deallocate space from stack

;
; Process the DAP PROSYS, PROOWN, PROGRP, PROWLD fields.
;

30$:	BITW	#<<DAP$M_PROSYS>!-	; Use default file protection in effect
		  <DAP$M_PROOWN>!-	;  for the user process if all four
		  <DAP$M_PROGRP>!-	;  protection fields of the DAP
		  <DAP$M_PROWLD>!-	;  Protection message were defaulted
		0>,DAP$W_PROMENU(R9)	;  (i.e., omitted from message)
	BEQL	40$			; Branch if no fields explicitly sent
	INSV	DAP$W_PROSYS(R9),#0,#4,R0 ; Map system bits
	INSV	DAP$W_PROOWN(R9),#4,#4,R0 ; Map owner bits
	INSV	DAP$W_PROGRP(R9),#8,#4,R0 ; Map group bits
	INSV	DAP$W_PROWLD(R9),#12,#4,R0; Map world bits
	MOVW	R0,XAB$W_PRO(R7)	; Update protection mask in XAB

;
; Finish paper work and exit.
;

40$:	$SETBIT	#FAL$V_PROXAB,FAL$W_RECEIVED(R8)
					; Denote XAB to add to XAB chain
	BRW	EXIT_SUCCESS		; Exit state with success

	.SBTTL	SUPPORT ROUTINES


	.SBTTL	MAP_FOP_FIELD

;++
; This routine maps DAP FOP bits into RMS FOP bits and stores the result in
; the FOP field of the FAB.
;
; R1 contains the DAP bitmask on input.
; R2 is destroyed on output.
;--

MAP_FOP_FIELD:				; Entry point
	CLRL	R2			; Clear RMS FOP bits
	TSTL	R1			; Examine FOP bitmask
	BNEQ	10$			; Begin mapping if any bits are set
	BRW	20$			; Branch if there are no bits to map
10$:	$MAPBIT	DAP$V_RWO,FAB$V_RWO	; Map RWO bit
	$MAPBIT	DAP$V_RWC,FAB$V_RWC	; Map RWC bit
	$MAPBIT	DAP$V_POS,FAB$V_POS	; Map POS bit
	$MAPBIT	DAP$V_CTG,FAB$V_CTG	; Map CTG bit
	$MAPBIT	DAP$V_SUP,FAB$V_SUP	; Map SUP bit
	$MAPBIT	DAP$V_NEF,FAB$V_NEF	; Map NEF bit
	$MAPBIT	DAP$V_TMP,FAB$V_TMP	; Map TMP bit
	$MAPBIT	DAP$V_TMD,FAB$V_TMD	; Map TMD bit
	$MAPBIT	DAP$V_DMO,FAB$V_DMO	; Map DMO bit
	$MAPBIT	DAP$V_WCK,FAB$V_WCK	; Map WCK bit
	$MAPBIT	DAP$V_RCK,FAB$V_RCK	; Map RCK bit
; *****	$MAPBIT	DAP$V_CIF,FAB$V_CIF	; Map CIF bit
	$MAPBIT	DAP$V_SQO,FAB$V_SQO	; Map SQO bit
	$MAPBIT	DAP$V_MXV,FAB$V_MXV	; Map MXV bit
	$MAPBIT	DAP$V_SPL,FAB$V_SPL	; Map SPL bit
	$MAPBIT	DAP$V_SCF,FAB$V_SCF	; Map SCF bit
	$MAPBIT	DAP$V_DLT,FAB$V_DLT	; Map DLT bit
	$MAPBIT	DAP$V_CBT,FAB$V_CBT	; Map CBT bit
; *****	$MAPBIT	DAP$V_DFW,FAB$V_DFW	; Map DFW bit
	$MAPBIT	DAP$V_TEF,FAB$V_TEF	; Map TEF bit
;	$MAPBIT	DAP$V_OFP,FAB$V_OFP	; Map OFP bit
					; Note:	this bit has no meaning here
					;  because only primary filespec
					;  is being given to RMS by FAL
20$:	BBC	#FAB$V_NAM,FAB$L_FOP(R10),30$
	$SETBIT	#FAB$V_NAM,R2		; Preserve state of NAM bit in FOP
30$:	MOVL	R2,FAB$L_FOP(R10)	; Update FOP field in FAB
	RSB				; Exit

	.SBTTL	MAP_ROP_FIELD

;+
; This routine maps DAP ROP bits into RMS ROP bits and stores the result in
; the ROP field of the RAB.
;
; R1 contains the DAP bitmask on input.
; R2 is destroyed on output.
;-

MAP_ROP_FIELD:				; Entry point
	CLRL	R2			; Clear RMS ROP bits
	TSTL	R1			; Examine ROP bitmask
	BNEQ	10$			; Begin mapping if any bits are set
	BRW	20$			; Branch if there are no bits to map
10$:	$MAPBIT	DAP$V_EOF,RAB$V_EOF	; Map EOF bit
	$MAPBIT	DAP$V_FDL,RAB$V_FDL	; Map FDL bit
	$MAPBIT	DAP$V_UIF,RAB$V_UIF	; Map UIF bit
	$MAPBIT	DAP$V_LOA,RAB$V_LOA	; Map LOA bit
	$MAPBIT	DAP$V_ULK,RAB$V_ULK	; Map ULK bit
	$MAPBIT	DAP$V_TPT,RAB$V_TPT	; Map TPT bit
	$MAPBIT	DAP$V_RAH,RAB$V_RAH	; Map RAH bit
	$MAPBIT	DAP$V_WBH,RAB$V_WBH	; Map WBH bit
	$MAPBIT	DAP$V_KGE,RAB$V_KGE	; Map KGE bit
	$MAPBIT	DAP$V_KGT,RAB$V_KGT	; Map KGT bit
	$MAPBIT	DAP$V_NLK,RAB$V_NLK	; Map NLK bit
	$MAPBIT	DAP$V_RLK,RAB$V_RLK	; Map RLK bit
	$MAPBIT	DAP$V_ROPBIO,RAB$V_BIO	; Map BIO bit
	$MAPBIT	DAP$V_LIM,RAB$V_LIM	; Map LIM bit
	$MAPBIT	DAP$V_NXR,RAB$V_NXR	; Map NXR bit
	$MAPBIT	DAP$V_ROPWAT,RAB$V_WAT	; Map WAT bit
	$MAPBIT	DAP$V_RRL,RAB$V_RRL	; Map RRL bit
	$MAPBIT	DAP$V_REA,RAB$V_REA	; Map REA bit
20$:	MOVL	R2,RAB$L_ROP(R11)	; Update ROP field in RAB
	RSB				; Exit

	.SBTTL	STATE EXIT ROUTINES

;++
; Exit state with failure.
;--

EXIT_FAILURE:				; Entry point
	CLRL	R0			; Signal state transition failure
	RSB				; Exit to state table manager

;++
; Exit state with success.
;--

EXIT_SUCCESS:				; Entry point
	MOVL	#1,R0			; Signal state transition success
	RSB				; Exit to state table manager

	.END				; End of module
