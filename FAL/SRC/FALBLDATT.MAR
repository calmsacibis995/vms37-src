	.TITLE	FALBLDATT - BUILD DAP ATTRIBUTES MESSAGE
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; Facility: FAL (DECnet File Access Listener)
;
; Abstract: This module builds the DAP Attributes and Name messages.
;
; Environment: VAX/VMS, user mode
;
; Author: James A. Krycka,	Creation Date:	16-JUN-1977
;
; Modified By:
;
;	V02-021	JAK0025		J A Krycka	16-NOV-1981
;		When returning file attributes and the requesting node is not
;		a VMS system, convert RFM = STM and RAT = xxx to RFM = STM and
;		RFM = embedded.
;
;	V02-020	JAK0024		J A Krycka	05-OCT-1981
;		Return additional file attribute information in DAP Attributes
;		message.
;
;	V02-019	JAK0022		J A Krycka	24-AUG-1981
;		Update symbols to correspond to revised DAPDEF.MDL file.
;
;	V02-018	JAK0012		J A Krycka	01-JUL-1980
;		Return DAP BKS field if file organization is relative or
;		indexed.
;
;	V02-017	JAK0011		J A Krycka	01-MAY-1980
;		Use default value for DAP DATATYPE field on directory function
;		instead of sending a zero value.
;		Also, return FHCXAB based fields in DAP Attributes message
;		after performing directory function error recovery.
;
;--

	.SBTTL	DECLARATIONS

;
; Include Files:
;

	$DAPPLGDEF			; Define DAP prologue symbols
	$DAPHDRDEF			; Define DAP message header
	$DAPATTDEF			; Define DAP Attributes message
	$DAPACCDEF			; Define DAP Access message
	$DAPNAMDEF			; Define DAP Name message
	$DEVDEF				; Define device characteristics symbols
	$FABDEF				; Define File Access Block symbols
	$FALWRKDEF			; Define FAL Work Area symbols
	$NAMDEF				; Define Name Block symbols
	$XABDEF				; Define symbols common to all XABs
	$XABFHCDEF			; Define File Header Char XAB symbols

;
; Macros:
;
;	None
;
; Equated Symbols:
;

	ASSUME	DAP$Q_DCODE_FLG EQ 0
	ASSUME	FAL$Q_FLG EQ 0

;
; Own Storage:
;

	.SBTTL	FAL$ENCODE_ATT
	.PSECT	FAL$CODE	NOSHR,EXE,RD,NOWRT,BYTE

;++
; Functional Description:
;
;	FAL$ENCODE_ATT builds the DAP Attributes message.
;
; Calling Sequence:
;
;	BSBW	FAL$ENCODE_ATT
;
; Input Parameters:
;
;	R8	Address of FAL work area
;	R9	Address of DAP control block
;	R10	Address of FAB
;	R11	Address of RAB
;
; Implicit Inputs:
;
;	DAP$V_GEQ_V54
;	DAP$V_GEQ_V56
;	DAP$V_VAXVMS
;	FAB fields
;	FAL$B_ACCFUNC
;	FAL$B_DATATYPE
;
; Output Parameters:
;
;	R0-R7	Destroyed
;
; Implicit Outputs:
;
;	None
;
; Completion Codes:
;
;	None
;
; Side Effects:
;
;	None
;
;--

FAL$ENCODE_ATT::			; Control point
	MOVL	#DAP$K_ATT_MSG,R0	; Get message type value
	BSBW	FAL$BUILD_HEAD		; Construct message header

;+
; Determine which fields to return as follows:
;   (1)	always send the ORG, RFM, RAT, MRS, ALQ, DEQ, and FOP fields.
;   (2)	send the DATATYPE and BLS fields only if they do not equal their
;	default values as defined in the DAP specification.
;   (3)	send the BKS field only if ORG = REL or IDX; and MRN only if ORG = REL.
;   (4)	send the FSZ field only if RFM = VFC.
;   (5)	send the DEV field only if accessing node is VAX/VMS or it is
;	implemented to DAP V5.6 or later.
;   (6) send the LRL, HBK, EBK, FFB, SDN fields if this is not a create
;	function (i.e., its an open or directory function) and the accessing
;	node speaks DAP V5.4 or later.
;   (7)	never send the RUNSYS field.
;-

	MOVL	#<<DAP$M_ORG>!-		; Always send ORG, RFM, RAT, MRS, ALQ
		  <DAP$M_RFM>!-		;  DEQ, and FOP fields
		  <DAP$M_RAT>!-		;
		  <DAP$M_MRS>!-		;
		  <DAP$M_ALQ1>!-	;
		  <DAP$M_DEQ1>!-	;
		  <DAP$M_FOP1>!-	;
		0>,R1			;
	CMPB	FAL$B_ACCFUNC(R8),-	; Default DATATYPE field on
		#DAP$K_DIR_LIST		;  directory_list function as
	BEQL	10$			;  FAL$B_ACCFUNC = 0
	CMPB	FAL$B_DATATYPE(R8),-	; Branch if DATATYPE = default value
		#DAP$K_DATATYP_D	;
	BEQL	10$			;
	$SETBIT	#DAP$V_DATATYPE,R1	; Send DATATYPE
10$:	CMPW	FAB$W_BLS(R10),-	; Branch if BLS = default value
		#DAP$K_BLS_D		;
	BEQL	20$			;
	$SETBIT	#DAP$V_BLS,R1		; Send BLS
20$:	CMPB	FAB$B_ORG(R10),#FAB$C_SEQ
	BEQL	30$			;
	$SETBIT	#DAP$V_BKS,R1		; Send BKS if org = REL or IDX
30$:	CMPB	FAB$B_ORG(R10),#FAB$C_REL
	BNEQ	40$			;
	$SETBIT	#DAP$V_MRN,R1		; Send MRN if ORG = REL
40$:	CMPB	FAB$B_RFM(R10),#FAB$C_VFC
	BNEQ	50$			;
	$SETBIT	#DAP$V_FSZ,R1		; Send FSZ if RFM = VFC
50$:	BBS	#DAP$V_VAXVMS,(R9),60$	; Branch if partner is VAX/VMS
	BBC	#DAP$V_GEQ_V56,(R9),70$	; Branch if partner uses DAP before V5.6
60$:	$SETBIT	#DAP$V_DEV,R1		; Send DEV
70$:	CMPB	FAL$B_ACCFUNC(R8),-	; Branch if create function
		#DAP$K_CREATE		;
	BEQL	80$			;  or
	BBC	#DAP$V_GEQ_V54,(R9),80$	; Branch if partner uses DAP before V5.4
	BISL2	#<<DAP$M_LRL>!-		; Send LRL, HBK, EBK, FFB, and SBN
		  <DAP$M_HBK>!-		;  fields
		  <DAP$M_EBK>!-		;
		  <DAP$M_FFB>!-		;
		  <DAP$M_SBN>!-		;
		0>,R1			;
80$:	MOVL	R1,R6			; Save the send field flags
	BSBW	FAL$CVT_BN4_EXT		; Store ATTMENU as an extensible field

;+
; Now store the designated fields in the order specified by ATTMENU.
;-

	BBC	#DAP$V_DATATYPE,R6,100$	;
	MOVB	FAL$B_DATATYPE(R8),(R3)+; Store DATATYPE field
100$:	MOVB	FAB$B_ORG(R10),(R3)+	; Store ORG field
	MOVB	FAB$B_RFM(R10),(R3)+	; Store RFM field
	CMPB	FAB$B_RFM(R10),#FAB$C_STM
	BLEQU	110$			; Branch if valid format for DAP
	MOVB	#FAB$C_UDF,-1(R3)	; If not, say format is undefined
110$:	MOVB	FAB$B_RAT(R10),(R3)+	; Store RAT field
	BBS	#DAP$V_VAXVMS,(R9),120$	; Branch if partner is VAX/VMS
	CMPB	FAB$B_RFM(R10),#FAB$C_STM;Branch if not stream format
	BNEQ	120$			;
	MOVB	#DAP$M_EMBEDDED,-1(R3)	; If it is, say cc is embedded
120$:	BBC	#DAP$V_BLS,R6,130$	;
	MOVW	FAB$W_BLS(R10),(R3)+	; Store BLS field
130$:	MOVW	FAB$W_MRS(R10),(R3)+	; Store MRS field
	MOVL	FAB$L_ALQ(R10),R1	; Get ALQ value
	BSBW	FAL$CVT_BN4_IMG		; Store ALQ as an image field
	BBC	#DAP$V_BKS,R6,140$	;
	MOVB	FAB$B_BKS(R10),(R3)+	; Store BKS field
140$:	BBC	#DAP$V_FSZ,R6,150$	;
	MOVB	FAB$B_FSZ(R10),(R3)+	; Store FSZ field
150$:	BBC	#DAP$V_MRN,R6,160$	;
	MOVL	FAB$L_MRN(R10),R1	; Get MRN value
	BSBW	FAL$CVT_BN4_IMG		; Store MRN as an image field
160$:	MOVW	FAB$W_DEQ(R10),(R3)+	; Store DEQ field

;+
; In constructing the DAP FOP field, take advantage of the fact that
; RMS-32 may modify only the CTG, CBT, RCK, and WCK bits on $OPEN (none
; are modified on $CREATE).
;-

	MOVL	FAL$L_FOP(R8),R2	; Get partner supplied FOP bits
	BICL2	#<<DAP$M_CTG>!-		; Clear bits that may have changed
		  <DAP$M_CBT>!-		;
		  <DAP$M_RCK>!-		;
		  <DAP$M_WCK>!-		;
		0>,R2			;
	MOVL	FAB$L_FOP(R10),R1	; Get FOP bits returned by RMS
	$MAPBIT	FAB$V_CTG,DAP$V_CTG	; Map CTG bit
	$MAPBIT	FAB$V_RCK,DAP$V_RCK	; Map RCK bit
	$MAPBIT	FAB$V_WCK,DAP$V_WCK	; Map WCK bit
	BBC	#DAP$V_VAXVMS,(R9),170$	; Branch if partner is not VAX/VMS
	$MAPBIT	FAB$V_CBT,DAP$V_CBT	; Map CBT bit
170$:	MOVL	R2,R1			; Move data to correct register
	BSBW	FAL$CVT_BN4_EXT		; Store FOP as an extensible field

;+
; Map and store the DEV field.
;-

	BBS	#DAP$V_DEV,R6,180$	; Determine if this field should be
	BRW	190$			;  included in message
180$:	MOVL	FAB$L_DEV(R10),R1	; Get DEV bits returned by RMS
	CLRL	R2			; Clear corresponding DAP bits
	$MAPBIT	DEV$V_REC,DAP$V_DEVREC	; Map REC bit
	$MAPBIT	DEV$V_CCL,DAP$V_DEVCCL	; Map CCL bit
	$MAPBIT	DEV$V_TRM,DAP$V_DEVTRM	; Map TRM bit
	$MAPBIT	DEV$V_DIR,DAP$V_DEVDIR	; Map DIR bit
	$MAPBIT	DEV$V_SDI,DAP$V_DEVSDI	; Map SDI bit
	$MAPBIT	DEV$V_SQD,DAP$V_DEVSQD	; Map SQD bit
	$MAPBIT	DEV$V_SPL,DAP$V_DEVSPL	; Map SPL bit
	$MAPBIT	DEV$V_NET,DAP$V_DEVNET	; Map NET bit
	$MAPBIT	DEV$V_FOD,DAP$V_DEVFOD	; Map FOD bit
	$MAPBIT	DEV$V_SHR,DAP$V_DEVSHR	; Map SHR bit
	$MAPBIT	DEV$V_GEN,DAP$V_DEVGEN	; Map GEN bit
	$MAPBIT	DEV$V_AVL,DAP$V_DEVAVL	; Map AVL bit
	$MAPBIT	DEV$V_MNT,DAP$V_DEVMNT	; Map MNT bit
	$MAPBIT	DEV$V_MBX,DAP$V_DEVMBX	; Map MBX bit
	$MAPBIT	DEV$V_DMT,DAP$V_DEVDMT	; Map DMT bit
	$MAPBIT	DEV$V_ELG,DAP$V_DEVELG	; Map ELG bit
	$MAPBIT	DEV$V_ALL,DAP$V_DEVALL	; Map ALL bit
	$MAPBIT	DEV$V_FOR,DAP$V_DEVFOR	; Map FOR bit
	$MAPBIT	DEV$V_SWL,DAP$V_DEVSWL	; Map SWL bit
	$MAPBIT	DEV$V_IDV,DAP$V_DEVIDV	; Map IDV bit
	$MAPBIT	DEV$V_ODV,DAP$V_DEVODV	; Map ODV bit
	$MAPBIT	DEV$V_RND,DAP$V_DEVRND	; Map RND bit
	$MAPBIT	DEV$V_RTM,DAP$V_DEVRTM	; Map RTM bit
	$MAPBIT	DEV$V_RCK,DAP$V_DEVRCK	; Map RCK bit
	$MAPBIT	DEV$V_WCK,DAP$V_DEVWCK	; Map WCK bit
	MOVL	R2,R1			; Move data to correct register
	BSBW	FAL$CVT_BN4_EXT		; Store DEV as an extensible field

;+
; Store fields derived from the File Header Characteristics XAB.
;-

190$:	BBC	#DAP$V_LRL,R6,200$	; LRL implies 5 FHC fields (shortcut)
	MOVAL	FAL$L_FHCXAB(R8),R7	; Get address of FHCXAB
	MOVW	XAB$W_LRL(R7),(R3)+	; Send LRL
	MOVL	XAB$L_HBK(R7),R1	; Get HBK value
	BSBW	FAL$CVT_BN4_IMG		; Store HBK as an image field
	MOVL	XAB$L_EBK(R7),R1	; Get EBK value
	BSBW	FAL$CVT_BN4_IMG		; Store EBK as an image field
	MOVW	XAB$W_FFB(R7),(R3)+	; Send FFB
	MOVL	XAB$L_SBN(R7),R1	; Get SBN value
	BSBW	FAL$CVT_BN4_IMG		; Store SBN as an image field
200$:	BSBW	FAL$BUILD_TAIL		; Finish building message
	RSB				; Exit

	.SBTTL	FAL$ENCODE_NAM
	.PSECT	FAL$CODE	NOSHR,EXE,RD,NOWRT,BYTE

;++
; Functional Description:
;
;	FAL$ENCODE_NAM builds the DAP (resultant) Name message.
;
;	FAL$ENCODE_NAM1 builds a DAP Name message as directed by input
;	parameters.
;
; Calling Sequence:
;
;	BSBW	FAL$ENCODE_NAM
;	BSBW	FAL$ENCODE_NAM1
;
; Input Parameters:
;
;	R8	Address of FAL work area
;	R9	Address of DAP control block
;	R10	Address of FAB
;	R11	Address of RAB
;
;	And for FAL$ENCODE_NAM1 only:
;
;	R5	Name type value
;	R6	Size of name string to use
;	R7	Address of name string to use
;
; Implicit Inputs:
;
;	For FAL$ENCODE_NAM only:
;
;	FAB$L_NAM
;	NAM$B_RSL
;	NAM$L_RSA
;
; Output Parameters:
;
;	R0-R7	Destroyed
;
; Implicit Outputs:
;
;	None
;
; Completion Codes:
;
;	None
;
; Side Effects:
;
;	None
;
;--

FAL$ENCODE_NAM::			; Control point
	MOVZBL	#DAP$M_FILSPEC,R5	; Get name type parameter
	MOVAL	FAL$L_NAM(R8),R0	; Get address of NAM block
	MOVZBL	NAM$B_RSL(R0),R6	; <R6,R0> = resultant name string
	MOVL	NAM$L_RSA(R0),R7	;  parameter
FAL$ENCODE_NAM1::			; Control point (with R5-R7 setup)
	MOVL	#DAP$K_NAM_MSG,R0	; Get message type value
	BSBW	FAL$BUILD_HEAD		; Construct message header
	MOVB	R5,(R3)+		; Store name type as an extensible field
	MOVB	R6,(R3)+		; Store filespec as an image field
	MOVC3	R6,(R7),(R3)		; Copy name string into message
	BSBW	FAL$BUILD_TAIL		; Finish building message
	RSB				; Exit

	.END				; End of module
