	.TITLE	FALDAPCRC - DAP LEVEL CRC
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; Facility: FAL (DECnet File Access Listener)
;
; Abstract:
;
;	This module contains the CRC table for DAP CRC checksum computation
;	plus routines related to CRC computation and error logging.
;
; Environment: VAX/VMS, user mode
;
; Author: James A. Krycka,	Creation Date:	16-JUN-1979
;
; Modified By:
;
;	V02-004	KRM0025		K R Malik	 8-Sep-1981
;		Fix bugs in NT$CRC_LOGERR
;
;	V02-003	KRM0021		K R Malik	14-AUG-1981
;		Add FAL$CRC_LOGERR routine to log DAP CRC errors to the
;		DECnet Event Logger.
;
;	V02-002	JAK0018		J A Krycka	18-JUN-1981
;		This module was created from code previously residing in
;		FALACTION.
;
;--

	.SBTTL	DECLARATIONS
	.PSECT	FAL$DATA		SHR,NOEXE,RD,WRT,BYTE
;
; Include Files:
;

	$DAPCRCDEF			; Define DAP CRC checksum symbols
	$EVCDEF				; Define event class symbols
	$FALWRKDEF			; Define FAL work area symbols
	$NFBDEF				; Define Network function definition symbols
	$NMADEF				; Define Network Management symbols
	$RAWDEF				; Define raw event record format

;
; Macros:
;
;	None
;
; Equated Symbols:
;
;	None
;
; Own Storage:
;

FAL$GT_NODENAME::
	.BLKB	7			; FALMAIN will have stored the
					; nodename of partner here (ascic)
NFB_DESC:
	.LONG	5			; Size of NFB
	.LONG	NFB			; Address of NFB
NFB:	.BYTE	NFB$C_LOGEVENT		; Network function block
	.LONG	0
EVTBUF_DESC:
	.LONG	40			; Length of event buffer
 	.LONG	EVTBUF			; Address of event buffer
EVTBUF:	.BLKB	40			; Event buffer

	.SBTTL	FAL$CRC_TABLE - CRC POLYNOMIAL TABLE
	.PSECT	FAL$CRC_TABLE	SHR,NOEXE,RD,NOWRT,LONG

;++
; This is the CRC table for use in DAP CRC checksum computation.
; The CRC polynomial function (order 16) used is:
;
;	X**16 + X**15 + X**13 + X**7 + X**4 + X**2 + X**1 + 1
;--

FAL$CRC_TABLE::				; CRC polynomial table
	.LONG	DAP$K_CRC_TBL0		;  Table entry 0
	.LONG	DAP$K_CRC_TBL1		;  Table entry 1
	.LONG	DAP$K_CRC_TBL2		;  Table entry 2
	.LONG	DAP$K_CRC_TBL3		;  Table entry 3
	.LONG	DAP$K_CRC_TBL4		;  Table entry 4
	.LONG	DAP$K_CRC_TBL5		;  Table entry 5
	.LONG	DAP$K_CRC_TBL6		;  Table entry 6
	.LONG	DAP$K_CRC_TBL7		;  Table entry 7
	.LONG	DAP$K_CRC_TBL8		;  Table entry 8
	.LONG	DAP$K_CRC_TBL9		;  Table entry 9
	.LONG	DAP$K_CRC_TBLA		;  Table entry 10
	.LONG	DAP$K_CRC_TBLB		;  Table entry 11
	.LONG	DAP$K_CRC_TBLC		;  Table entry 12
	.LONG	DAP$K_CRC_TBLD		;  Table entry 13
	.LONG	DAP$K_CRC_TBLE		;  Table entry 14
	.LONG	DAP$K_CRC_TBLF		;  Table entry 15


	.SBTTL	FAL$CRC_LOGERR - LOG DAP CRC ERROR
	.PSECT	FAL$CODE		NOSHR,EXE,RD,NOWRT,BYTE

;++
; FAL$CRC_LOGERR - Logs DAP CRC error to the DECnet error logger
;
; Calling Sequence:
;
;	BSBW	FAL$CRC_LOGERR
;
; Input Parameters:
;
;	R8	FAL work area address
;
; Implicit Inputs:
;
;	FAL$W_LNKCHN
;
; Output Parameters:
;
;	None
;
; Implicit Outputs:
;
;	None
;	
; Completion Codes:
;
;	None
;
; Side Effects:
;
;	An attempt is made to log a DAP CRC error to the DECnet Event Logger.
;	Return status of the request is neither checked nor returned.
;
;--

FAL$CRC_LOGERR::			; Entry point

	PUSHR	#^M<R0,R1,R2,R3,R4,R5>	; Save registers

;
; Build the event in the event buffer
;

	MOVAB	W^EVTBUF,R5		; Get address of event buffer
	ADDB3	#RAW$T_DATA+4,-		; Byte count for event
		W^FAL$GT_NODENAME,R0	;
	MOVZBW	R0,(R5)+		; Put event count in event buffer
	MOVZBL	R0,W^EVTBUF_DESC	; Update the event buffer descriptor
	$GETTIM_S -			; Get the system time
		TIMADR=(R5)		; Put time in the event buffer
	ADDL2	#8,R5			; Bump the event buffer pointer
	MOVW	#EVC$C_VMS_DPC,(R5)+	; Put in the event code
	MOVB	#EVC$C_SRC_NON,(R5)+	; Put in the source type
	ADDL2	#17,R5			; Skip source ID field
	MOVW	#EVC$C_VMS_PNOD,(R5)+	; Remote node name
	MOVB	#NMA$M_PTY_ASC,(R5)+	; Data type
	MOVAB	W^FAL$GT_NODENAME,R4	; Get the address of the nodename
	MOVB	(R4),(R5)+		; Put in the nodename count
	MOVZBL	(R4),R0			; Get nodename count as a longword
	MOVC3	R0,1(R4),(R5)		; Put in the nodename 
	$QIO_S -			;
		CHAN=FAL$W_LNKCHN(R8),-	; Use already assigned channel
		FUNC=#IO$_ACPCONTROL,-	; Function code
		P1=NFB_DESC,-		; Adr of descriptor of NFB
		P2=#EVTBUF_DESC		; Adr of descriptor of event buffer

;
; Do not bother to check the return status since we wish to preserve the
; original DAP CRC error status in R0 (and not the success or failure of
; our attempt to log it).
;

	POPR	#^M<R0,R1,R2,R3,R4,R5>	; Restore registers
	RSB				; Return
	.END				; End of module
