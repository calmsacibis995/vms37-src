	.TITLE	FALBLDSTS - BUILD DAP STATUS MESSAGE
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; Facility: FAL (DECnet File Access Listener)
;
; Abstract: This module builds the DAP Status message.
;
; Environment: VAX/VMS, user mode
;
; Author: James A. Krycka,	Creation Date:	16-JUN-1977
;
; Modified By:
;
;	V02-017	JAK0013		J A Krycka	02-SEP-1980
;		If logging is enabled, omit display of DAP status code that is
;		equivlanet to RMS$_SUC.
;
;--

	.SBTTL	DECLARATIONS

;
; Include Files:
;

	$DAPHDRDEF			; Define DAP message header
	$DAPCNFDEF			; Define DAP Configuration message
	$DAPSTSDEF			; Define DAP Status message
	$FALWRKDEF			; Define FAL Work Area symbols
	$RABDEF				; Define Record Access Block sym**

;
; Macros:
;
;	None
;
; Equated Symbols:
;

	ASSUME	FAL$Q_FLG EQ 0

;
; Own Storage:
;
;	None

	.SBTTL	FAL$ENCODE_STS - BUILD DAP STATUS MESSAGE
	.PSECT	FAL$CODE	NOSHR,EXE,RD,NOWRT,BYTE

;++
; Functional Description:
;
;	FAL$ENCODE_STS builds a DAP Status message based on the class of DAP
;	success or failure condition.
;
; Calling Sequence:
;
;	BSBW	FAL$ENCODE_STS
;
; Input Parameters:
;
;	R2	DAP MACCODE value (in bits 0-3)
;	R8	Address of FAL work area
;	R9	Address of DAP control block
;	R10	Address of File Access Block
;	R11	Address of RAB control block
;
;   and for file access status codes:
;
;	R0	RMS-32 completion code
;	R1	Secondary status value (STV of FAB or RAB)
;
;   and for DAP protocol errors:
;
;	R0	DAP field ID code (in bits 0-5)
;	R1	DAP message type (in bits 0-5)
;
;   and for message synchronization errors:
;
;	R0	Not used
;	R1	DAP message type (in bits 0-5)
;
; Implicit Inputs:
;
;	FAL$V_LAST_MSG
;	FAL$V_RET_RFA
;	FAL$V_RET_RECN
;	FAL$V_RET_STV
;
; Output Parameters:
;
;	R0-R5	Destroyed
;
; Implicit Outputs:
;
;	FAL$V_LAST_MSG cleared
;	FAL$V_RET_RFA cleared
;	FAL$V_RET_RECN cleared
;	FAL$V_RET_STV cleared
;
; Completion Codes:
;
;	None
;
; Side Effects:
;
;	None
;
;--

FAL$ENCODE_STS::			; Control point

	ASSUME	DAP$_PENDING EQ 0
	ASSUME	DAP$_SUCCESS EQ 1
	ASSUME	DAP$_UNSUPPORT EQ 2
	ASSUME	DAP$_FILE_OPEN EQ 4
	ASSUME	DAP$_FILE_XFER EQ 5
	ASSUME	DAP$_WARNING EQ 6
	ASSUME	DAP$_FILE_CLOS EQ 7
	ASSUME	DAP$_FORMAT EQ 8
	ASSUME	DAP$_INVALID EQ 9
	ASSUME	DAP$_MSG_SYNC EQ 10

;
; Examine DAP MACCODE parameter to determine which class of message it is.
;

	$CASEB	SELECTOR=R2,-		; MACCODE:
		DISPL=<-		;
		    FILE_ACCESS-	;  File operation pending
		    FILE_ACCESS-	;  File operation successful
		    PROTOCOL-		;  Request not supported
		    BUG-		;  Undefined value
		    FILE_ACCESS-	;  Errors related to opening a file
		    FILE_ACCESS-	;  Errors related to file transfer
		    BUG-		;  Undefined value
		    FILE_ACCESS-	;  Errors related to closing a file
		    PROTOCOL-		;  Incorrect message format
		    PROTOCOL-		;  Invalid field value
		    MSG_OUT_OF_SEQ-	;  Unexpected message for state
		    >		    	;
BUG:					;  Fall thru ...

;
; Process file access error. perform RMS-to-DAP status code look-up to obtain
; DAP MICCODE value.
;
; Note: If the RMS code does not match, a DAP MICCODE of zero is returned
;	which means unknown type of error.
;

FILE_ACCESS:				;
	MOVL	R1,R5			; Save STV value in R5
	MOVAL	W^FAL$RMS_TO_DAP,R1	; Get conversion table address
10$:	CMPW	R0,(R1)+		; Does RMS code match?
	BEQL	20$			; Yes, finish up
	TSTW	(R1)+			; Is this end of table?
	BNEQ	10$			; No, try again
20$:	MOVZWL	(R1),R0			; Store equivalent DAP status code
	BRB	ADD_MACCODE		; Continue

;
; Form MICCODE value for DAP protocol error.
;

PROTOCOL:				;
	INSV	R1,#6,#6,R0		; Add message type to field id
	BRB	ADD_MACCODE		; Continue

;
; Get MICCODE value for message-out-of-sequence error.
;

MSG_OUT_OF_SEQ:				;
	MOVL	R1,R0			; MACCODE = message type value

;
; Combine MACCODE value with MICCODE value to form DAP status code.
;

ADD_MACCODE:				;
	INSV	R2,#12,#4,R0		; Assemble DAP status code in bits 00-15
	MOVL	R0,R4			;  and save value in R4

;
; Begin constructing the Status message.
;

SEND_STS:				;
	MOVL	#DAP$K_STS_MSG,R0	; Get message type value
	BSBW	FAL$BUILD_HEAD		; Construct message header
	MOVW	R4,(R3)+		; Store status code field

;
; The required fields have been assembled (header plus STSCODE).
; Now assemble the optional fields (RFA, RECNUM, and STV) as requested.
;
; Note:	If FAL$V_RET_RECN is set, then get value from RAB$L_BKT.
;	If FAL$V_RET_RFA  is set, then get value from RAB$L_RFA0 and RAB$W_RFA4.
;	If FAL$V_RET_STV  is set, then get value from R5.
;	Finally, clear all three bits.
;

	ASSUME	FAL$V_RET_RECN EQ FAL$V_RET_RFA+1
	ASSUME	FAL$V_RET_STV EQ FAL$V_RET_RECN+1

	BBS	#DAP$V_RANRFA,-		; Branch if partner supports
		DAP$Q_SYSCAP(R9),10$	;  access by RFA
	$CLRBIT	#FAL$V_RET_RFA,(R8)	; Disable request to return RFA
10$:	EXTZV	#FAL$V_RET_RFA,#3,(R8),R0
	BEQL	40$			; Branch if RFA, RECNUM, and STV
					;  are not wanted
	CLRB	(R3)+			; Assume RFA is not wanted
	BBCC	#FAL$V_RET_RFA,(R8),20$	; Branch if RFA is not wanted
	MOVB	#6,-1(R3)		; Store RFA as an image field
	MOVL	RAB$L_RFA0(R11),(R3)+	; Copy 6-byte record file address
	MOVW	RAB$W_RFA4(R11),(R3)+	;  value to DAP message
20$:	EXTZV	#FAL$V_RET_RECN,#2,(R8),R0
	BEQL	40$			; Branch if RECNUM and STV
					;  are not wanted
	CLRL	R1			; Assume RECNUM is not wanted
	BBCC	#FAL$V_RET_RECN,(R8),30$; Branch if RECNUM is not wanted
	MOVL	RAB$L_BKT(R11),R1	; Get bucket value to use for RECNUM
30$:	BSBW	FAL$CVT_BN4_IMG		; Store RECNUM as an image field
	BBCC	#FAL$V_RET_STV,(R8),40$	; Branch if STV is not wanted
	MOVL	R5,R1			; Get status value
	BSBW	FAL$CVT_BN4_IMG		; Store STV as an image field
40$:	BSBW	FAL$BUILD_TAIL		; Finish building message

;
; Output status code to print file.
;

	BBC	#FAL$V_LOG_NAM,(R8),50$	; Branch if logging disabled
	CMPW	R4,#^X1095		; Omit display if DAP status code is
	BEQL	50$			;  equivalent to RMS$_SUC
	$FAO_S	CTRSTR=W^FAL$GQ_STATUS-	; Format the message
		OUTLEN=W^FAL$GW_PRTLEN-	;
		OUTBUF=W^FAL$GQ_PRTBUF-	;
		P1=R4			; DAP status word
	CHECK_SS			; Check status code
	BSBW	FAL$PRINT_FAO		; Print message
50$:	RSB				; Exit

	.END				; End of module
