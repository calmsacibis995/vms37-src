	.TITLE	FALSTATE - STATE TRANSITION PROCESSING
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; Facility: FAL (DECnet File Access Listener)
;
; Abstract:
;
;	This module contains the state table manager and the state transition
;	table for FAL.
;
; Environment: VAX/VMS, user mode
;
; Author: James A. Krycka,	Creation Date:	17-JUN-1977
;
; Modified By:
;
;	V02-034	JAK0027		J A Krycka	05-FEB-1982
;		Fix error recovery bug in wildcard file deletion and wildcard
;		file execution.
;
;	V02-033	JAK0023		J A Krycka	04-SEP-1981
;		Rearrange states ST2 and ST3 of the state transition table to
;		remove redundant sub-states and to provide more generalized
;		close processing.
;
;	V02-032	JAK0022		J A Krycka	29-AUG-1981
;		Support changing of file protection on close (PROXAB).
;		Support changing of revision date and number on close (RDTXAB).
;
;	V02-031	JAK0022		J A Krycka	24-AUG-1981
;		Update symbols to correspond to revised DAPDEF.MDL file.
;
;	V02-030	JAK0021		J A Krycka	04-AUG-1981
;		Support the RMS $DISPLAY function.
;		Support the RMS $EXTEND function.
;
;	V02-029	JAK0019		J A Krycka	01-JUL-1981
;		Support the DAP RELEASE function.
;
;--

	.SBTTL	DECLARATIONS

;
; Include Files:
;

	$DAPHDRDEF			; Define DAP message header
	$DAPACCDEF			; Define DAP Access message
	$DAPCTLDEF			; Define DAP Control message
	$DAPCONDEF			; Define DAP Continue Transfer message
	$DAPCMPDEF			; Define DAP Access Complete message
	$FALWRKDEF			; Define FAL Work Area symbols

;
; Macros:
;
;++
; STATE_INIT initializes the state transition table, where:
;
;	LABEL	= the global symbol to denote the start of the table.
;--

	.MACRO	STATE_INIT	LABEL
	.ALIGN	LONG
LABEL::
COUNT...=0
	.ENDM	STATE_INIT

;++
; STATE defines a transfer of control point in the state transition table
; (i.e., the state of a new state), where:
;
;	NAME	= the name of the state.
;--

	.MACRO	STATE	NAME
NAME=COUNT...
	.ENDM	STATE

;++
; TRAN defines a state transition table entry, where:
;
;	VALUE	= the value to compare against the state transition value.
;		  (Null denotes that state value is a match.)
;	ACTION	= address of optional action routine to execute.
;		  (Null denotes no action routine to execute.)
;	SUCCESS	= name of the state to goto on action rouitne success.
;		  (If no action routine is specified, then this path is taken.)
;		  (Null denotes goto next transition entry.)
;	FAILURE	= name of the state to goto on action routine failure.
;		  (Null denotes goto next transition entry.)
;--

	.MACRO	TRAN	VALUE,ACTION,SUCCESS,FAILURE
	.IF B	VALUE
	.WORD	M_MATCH
	.IFF
	.WORD	VALUE@8
	.ENDC
	.IF B	SUCCESS
	.BYTE	COUNT...+1
	.IFF
	.BYTE	SUCCESS
	.ENDC
	.IF B	FAILURE
	.BYTE	COUNT...+1
	.IFF
	.BYTE	FAILURE
	.ENDC
	.IF B	ACTION
	.ADDRESS 0
	.IFF
	.ADDRESS ACTION
	.ENDC
	COUNT...=COUNT...+1
	.ENDM	TRAN

;++
; RETURN defines a state transition table entry that directs the transition
; table manager (FAL$STATE) to exit to its caller.
;--

	.MACRO	RETURN
	.QUAD	M_EXIT
	.ENDM	RETURN

;
; Equated Symbols:
;
;	State table entry offsets:
;

V_MATCH=0
M_MATCH=<1@V_MATCH>
V_EXIT=1
M_EXIT=<1@V_EXIT>
FLAGS=0
VALUE=1
SUCCESS=2
FAILURE=3
ACTION=4

	ASSUME	FAL$Q_FLG EQ 0

;
; Own Storage:
;
;	None

	.SBTTL	FAL$STATE - STATE TABLE MANAGER
	.PSECT	FAL$CODE	NOSHR,EXE,RD,NOWRT,BYTE

;++
; Functional Description:
;
;	FAL$STATE controls the execution of FAL by maintaining its state context
;	and executing action routines as directed by the state transition table.
;
; Calling Sequence:
;
;	BSBW	FAL$STATE
;
; Input Parameters:
;
;	R2	Address of state transition table
;	R8	Address of FAL work area
;	R9	Address of DAP control block
;	R10	Address of FAB
;	R11	Address of RAB
;
; Implicit Inputs:
;
;	FAL$Q_STATE_CTX
;	FAL$B_VALUE
;
; Output Parameters:
;
;	R0-R7	Destroyed
;
; Implicit Outputs:
;
;	FAL$Q_STATE_CTX
;	FAL$B_VALUE
;
; Completion Codes:
;
;	Each action routine is required to return a success/failure (or a
;	true/false) code in R0 which is used by FAL$STATE to determine the
;	next state to enter.
;
; Side Effects:
;
;	None
;
;--

FAL$STATE::				; Entry point
	MOVL	R2,R3			; Initialize state transition
					;  entry address
10$:	BBS	#V_EXIT,FLAGS(R3),50$	; Branch if end of table
	BBS	#V_MATCH,FLAGS(R3),20$	; Branch if any value is a match
	CMPB	VALUE(R3),FAL$B_VALUE(R8) ; Is state value a match?
	BEQL	20$			; Branch if yes
	ADDL2	#8,R3			; No, form address of next table entry
	BRB	10$			; Try again
20$:	MOVL	ACTION(R3),R4		; Get address of action routine
	BEQL	30$			; Branch if no routine specified
	MOVQ	R2,FAL$Q_STATE_CTX(R8)	; Save state table context <R2,R3>
	JSB	(R4)			; Execute action routine
	MOVQ	FAL$Q_STATE_CTX(R8),R2	; Restore state table context <R2,R3>
	BLBS	R0,30$			; Branch on success
	EXTZV	#0,#8,FAILURE(R3),R4	; Get failure table entry index
	BRB	40$			;  (as an unsigned integer value)
30$:	EXTZV	#0,#8,SUCCESS(R3),R4	; Get success table entry index
					;  (as an unsigned integer value)
40$:	MOVAQ	(R2)[R4],R3		; Compute address of new table entry
					;  taking advantage of the fact that
					;  each entry is 8 bytes long
	BRB	10$			; Start again
50$:	RSB				; Exit

	.SBTTL	FAL$STATE_TABLE - FAL STATE TRANSITION TABLE
	.SBTTL	ST0 -- INITIALIZATION
	.PSECT	FAL$STATE_TABLE	SHR,NOEXE,RD,NOWRT,QUAD

;++
; Define beginning (entry point) of state transition table.
;--

STATE_INIT	FAL$STATE_TABLE

;++
; Initialization state (also called setup state in DAP specification).
;
; Note:	Success from FAL$INIT means that a Configuration message has been
;	received; failure denotes that one has not been received.
;--
;	State	Value		Action-Routine	Success	Failure	Comments

STATE	ST0
	TRAN	,		FAL$INIT,	ST1,		; See note above
	TRAN	,		FAL$NEXT_MSG,	,	ST0
	TRAN	DAP$K_CNF_MSG,	FAL$DECODE_CNF,	ST1,	ST0
	TRAN	,		FAL$OUT_OF_SEQ,	ST0,	ST0

	.SBTTL	ST1 -- FILE ACCESS

;++
; Generalized file access state.
;
; Note:	The check for a Continue Transfer message and response of an Access
;	Complete message in state ST1 is to help solve an error recovery problem
;	for wildcard file deletion and wildcard file execution.
;--
;	State	Value		Action-Routine	Success	Failure	Comments

STATE	ST1
	TRAN	,		FAL$NEXT_MSG,	,	ST1
	TRAN	DAP$K_CNF_MSG,	FAL$DECODE_CNF,	ST0,	ST1
	TRAN	DAP$K_ATT_MSG,	FAL$DECODE_ATT,	ST1,	ST1
	TRAN	DAP$K_ACC_MSG,	FAL$DECODE_ACC,	ST1_1,	ST1
	TRAN	DAP$K_TIM_MSG,	FAL$DECODE_TIM,	ST1,	ST1
	TRAN	DAP$K_PRO_MSG,	FAL$DECODE_PRO,	ST1,	ST1
	TRAN	DAP$K_ALL_MSG,	FAL$DECODE_ALL,	ST1,	ST1
	TRAN	DAP$K_KEY_MSG,	FAL$DECODE_KEY,	ST1,	ST1
	TRAN	DAP$K_CON_MSG,	FAL$DIR_END,	ST0,	ST0	; See note above
	TRAN	,		FAL$OUT_OF_SEQ,	ST1,	ST1

STATE	ST1_1
	TRAN	DAP$K_OPEN,	FAL$FIL_PARSE,	ST1_1A,	ST0
	TRAN	DAP$K_CREATE,	FAL$CREATE,	ST2,	ST0
	TRAN	DAP$K_DIR_LIST,	FAL$DIR_PARSE,	ST8,	ST0
	TRAN	DAP$K_ERASE,	FAL$FIL_PARSE,	ST1_1B,	ST0
	TRAN	DAP$K_SUBMIT,	FAL$SUBMIT,	ST2,	ST0
	TRAN	DAP$K_EXECUTE,	FAL$FIL_PARSE,	ST1_1C,	ST0
	TRAN	DAP$K_LOAD,	FAL$OPEN,	ST1_1D,	ST0
	TRAN	,		FAL$INV_ACCFUNC,ST1,	ST1

STATE	ST1_1A
	TRAN	,		FAL$CHECK_WILD,	ST9,		; True/False
	TRAN	,		FAL$OPEN,	ST2,	ST0

STATE	ST1_1B
	TRAN	,		FAL$CHECK_WILD,	ST10,		; True/False
	TRAN	,		FAL$ERASE,	ST0,	ST0

STATE	ST1_1C
	TRAN	,		FAL$CHECK_WILD,	ST11,		; True/False
	TRAN	,		FAL$EXECUTE,	ST0,	ST0

STATE	ST1_1D
	TRAN	,		FAL$LOAD_IMAGE,	EXIT,	EXIT	; VMS specific

	.SBTTL	ST2 -- RECORD ACCESS

;++
; Generalized record access state (including record stream establishment and
; termination.)
;--
;	State	Value		Action-Routine	Success	Failure	Comments

STATE	ST2
	TRAN	,		FAL$NEXT_MSG,	,	ST2
	TRAN	DAP$K_CTL_MSG,	FAL$DECODE_CTL,	ST2_1,	ST2
	TRAN	DAP$K_CMP_MSG,	FAL$DECODE_CMP,	ST2_2,	ST2
	TRAN	,		FAL$OUT_OF_SEQ,	ST2,	ST2

STATE	ST2_1
	TRAN	DAP$K_CONNECT,	FAL$CONNECT,	ST2,	ST2	; One stream max
	TRAN	DAP$K_GET_READ,	FAL$CHECK_FTM,	ST6,	ST4	; True/False
	TRAN	DAP$K_PUT_WRITE,FAL$CHECK_FTM,	ST7,	ST5	; True/False
	TRAN	DAP$K_UPDATE,	,		ST2A,	EXIT
	TRAN	DAP$K_DELETE,	FAL$DELETE,	ST2,	ST2
	TRAN	DAP$K_FIND,	FAL$FIND,	ST2,	ST2
	TRAN	DAP$K_REWIND,	FAL$REWIND,	ST2,	ST2
	TRAN	DAP$K_DISPLAY,	FAL$DISPLAY,	ST2,	ST2
	TRAN	DAP$K_EXTEND_B,	FAL$INIT_XABCHN,ST2B,	ST2
	TRAN	DAP$K_FREE,	FAL$FREE,	ST2,	ST2
	TRAN	DAP$K_RELEASE,	FAL$RELEASE,	ST2,	ST2
	TRAN	DAP$K_TRUNCATE,	FAL$TRUNCATE,	ST2,	ST2
	TRAN	DAP$K_FLUSH,	FAL$FLUSH,	ST2,	ST2
	TRAN	DAP$K_SPACE_FW,	FAL$SPACE_FW,	ST2,	ST2
	TRAN	DAP$K_SPACE_BW,	FAL$SPACE_BW,	ST2,	ST2
	TRAN	,		FAL$INV_CTLFUNC,ST2,	ST2

STATE	ST2_2							; Differentiate
	TRAN	DAP$K_DISCONN,	FAL$DISCONNECT,	ST2,	ST2	;  disconnect
	TRAN	,		,		ST3_1,	EXIT	;  request from
								;  close request

STATE	ST2A
	TRAN	,		FAL$NEXT_MSG,	,	ST2
	TRAN	DAP$K_DAT_MSG,	FAL$UPDATE	ST2,	ST2
	TRAN	,		FAL$OUT_OF_SEQ,	ST2,	ST2

STATE	ST2B
	TRAN	,		FAL$NEXT_MSG,	,	ST2
	TRAN	DAP$K_ALL_MSG,	FAL$DECODE_ALL,	ST2B,	ST2
	TRAN	DAP$K_CTL_MSG,	FAL$DECODE_CTL,	ST2B_1,	ST2
	TRAN	,		FAL$OUT_OF_SEQ,	ST2,	ST2

STATE	ST2B_1
	TRAN	DAP$K_EXTEND_E,	FAL$EXTEND,	ST2,	ST2
	TRAN	,		FAL$INV_CTLFUNC,ST2,	ST2

	.SBTTL	ST3 -- FILE CLOSE

;++
; Generalized file close state (for non-wildcard operations).
;
; Note:	Access Complete (disconnect) is logically a record processing operation,
;	not a file close operation. Consequently, it is handled by state ST2.
;
; Note:	State ST3_1 is nomally entered from state ST2_2.
;--
;	State	Value		Action-Routine	Success	Failure	Comments

STATE	ST3
	TRAN	,		FAL$NEXT_MSG,	,	ST3
	TRAN	DAP$K_CMP_MSG,	FAL$DECODE_CMP,	ST3_1,	ST3
	TRAN	,		FAL$OUT_OF_SEQ,	ST3,	ST3

STATE	ST3_1
	TRAN	DAP$K_CLOSE,	FAL$CLOSE,	ST0,	ST3
	TRAN	DAP$K_CHANGE_B,	FAL$INIT_XABCHN,ST3A,	ST3
	TRAN	DAP$K_RESET,	FAL$RESET,	ST0,	ST3
; *****	TRAN	DAP$K_TERMINATE,FAL$RESET,	ST0,	ST3	; Inappropriate
	TRAN	,		FAL$INV_CMPFUNC,ST3,	ST3

STATE	ST3A
	TRAN	,		FAL$NEXT_MSG,	,	ST3
	TRAN	DAP$K_TIM_MSG,	FAL$DECODE_TIM,	ST3A,	ST3
	TRAN	DAP$K_PRO_MSG,	FAL$DECODE_PRO,	ST3A,	ST3
	TRAN	DAP$K_CMP_MSG,	FAL$DECODE_CMP,	ST3A_1,	ST3
	TRAN	,		FAL$OUT_OF_SEQ,	ST3,	ST3

STATE	ST3A_1
	TRAN	DAP$K_CHANGE_E,	FAL$CHANGE,	ST0,	ST3
	TRAN	,		FAL$INV_CMPFUNC,ST3,	ST3

	.SBTTL	ST4 -- RTM RETRIEVAL

;++
; Record transfer mode retrieval state (for $GET/$READ).
;
; Send the specified record/block to the partner process. Engage in error
; recovery dialogue on encountering an end-of-file condition or on an error
; in accessing the data.
;--
;	State	Value		Action-Routine	Success	Failure	Comments

STATE	ST4
	TRAN	,		FAL$GET_READ,	ST2,	ST4A

STATE	ST4A
	TRAN	,		FAL$NEXT_MSG,	,	ST4A
	TRAN	DAP$K_CTL_MSG,	FAL$DECODE_CTL,	ST2_1,	ST4A
	TRAN	DAP$K_CMP_MSG,	FAL$DECODE_CMP,	ST2_2,	ST4A
	TRAN	DAP$K_CON_MSG,	FAL$DECODE_CON,	ST4A_1,	ST4A
	TRAN	,		FAL$OUT_OF_SEQ,	ST4A,	ST4A

STATE	ST4A_1
	TRAN	DAP$K_RESUME,	FAL$UNS_CONFUNC,ST4A,	ST4A
	TRAN	DAP$K_RETRY,	,		ST4,	EXIT
	TRAN	DAP$K_SKIP_REC,	,		ST4A,	EXIT
	TRAN	,		FAL$INV_CONFUNC,ST4A,	ST4A

	.SBTTL	ST5 -- RTM STORAGE

;++
; Record transfer mode storage state (for $PUT/$WRITE).
;
; Store each record/block received from the partner process until directed
; to perform another function. Engage in error recovery dialogue on an error
; in storing the data.
;--
;	State	Value		Action-Routine	Success	Failure	Comments

STATE	ST5
	TRAN	,		FAL$NEXT_MSG,	,	ST5
	TRAN	DAP$K_DAT_MSG,	FAL$PUT_WRITE,	ST5,	ST5A
	TRAN	DAP$K_CTL_MSG,	FAL$DECODE_CTL,	ST2_1,	ST5
	TRAN	DAP$K_CMP_MSG,	FAL$DECODE_CMP,	ST2_2,	ST5
	TRAN	,		FAL$OUT_OF_SEQ,	ST5,	ST5

STATE	ST5A
	TRAN	,		FAL$INTE_MSG,	,	ST5A
	TRAN	DAP$K_CON_MSG,	FAL$DECODE_CON,	ST5A_1,	ST5A
	TRAN	,		FAL$OUT_OF_SEQ,	ST5A,	ST5A

STATE	ST5A_1
	TRAN	DAP$K_ABORT,	,		ST5B,	EXIT
	TRAN	DAP$K_RESUME,	FAL$UNS_CONFUNC,ST5A,	ST5A
	TRAN	DAP$K_RETRY,	FAL$PUT_WRITE,	ST5,	ST5A
	TRAN	DAP$K_SKIP_REC,	,		ST5,	ST5
	TRAN	,		FAL$INV_CONFUNC,ST5A,	ST5A

STATE	ST5B
	TRAN	,		FAL$NEXT_MSG,	,	ST5B
	TRAN	DAP$K_CMP_MSG,	FAL$DECODE_CMP,	ST2_2,	ST5B
	TRAN	DAP$K_DAT_MSG,	,		ST5B,	EXIT
	TRAN	,		FAL$OUT_OF_SEQ,	ST5B,	ST5B

	.SBTTL	ST6 -- FTM RETRIEVAL

;++
; File transfer mode retrieval state (for $GET/$READ).
;
; Send each record/block remaining in the file to the partner process. Engage
; in error recovery dialogue on encountering an end-of-file condition, on an
; error in accessing the data, or if directed by partner to stop before the
; function is completed.
;--
;	State	Value		Action-Routine	Success	Failure	Comments

STATE	ST6
	TRAN	,		FAL$TEST_MSG,	ST6A,
	TRAN	,		FAL$GET_READ,	ST6,	ST6A

STATE	ST6A
	TRAN	,		FAL$NEXT_MSG,	,	ST6A
	TRAN	DAP$K_CMP_MSG,	FAL$DECODE_CMP,	ST2_2,	ST6A
	TRAN	DAP$K_CON_MSG,	FAL$DECODE_CON,	ST6A_1,	ST6A
	TRAN	,		FAL$OUT_OF_SEQ,	ST6A,	ST6A

STATE	ST6A_1
	TRAN	DAP$K_RESUME,	,		ST6,	EXIT
	TRAN	DAP$K_RETRY,	,		ST6,	EXIT
	TRAN	DAP$K_SKIP_REC,	FAL$UNS_CONFUNC,ST6A,	ST6A
	TRAN	,		FAL$INV_CONFUNC,ST6A,	ST6A

	.SBTTL	ST7 -- FTM STORAGE

;++
; File transfer mode storage/append state (for $PUT/$WRITE).
;
; Store each record/block received from partner process until directed to close
; the file. Engage in error recovery dialogue on an error in storing the data.
;--
;	State	Value		Action-Routine	Success	Failure	Comments

STATE	ST7
	TRAN	,		FAL$NEXT_MSG,	,	ST7
	TRAN	DAP$K_DAT_MSG,	FAL$PUT_WRITE,	ST7,	ST7A
	TRAN	DAP$K_CMP_MSG,	FAL$DECODE_CMP,	ST2_2,	ST7
	TRAN	,		FAL$OUT_OF_SEQ,	ST7,	ST7

STATE	ST7A
	TRAN	,		FAL$INTE_MSG,	,	ST7A
	TRAN	DAP$K_CON_MSG,	FAL$DECODE_CON,	ST7A_1,	ST7A
	TRAN	,		FAL$OUT_OF_SEQ,	ST7A,	ST7A

STATE	ST7A_1
	TRAN	DAP$K_ABORT,	,		ST7B,	EXIT
	TRAN	DAP$K_RESUME,	FAL$UNS_CONFUNC,ST7A,	ST7A
	TRAN	DAP$K_RETRY,	FAL$PUT_WRITE,	ST7,	ST7A
	TRAN	DAP$K_SKIP_REC,	,		ST7,	EXIT
	TRAN	,		FAL$INV_CONFUNC,ST7A,	ST7A

STATE	ST7B
	TRAN	,		FAL$NEXT_MSG,	,	ST7B	; Discard DAT
	TRAN	DAP$K_CMP_MSG,	FAL$DECODE_CMP,	ST2_2,	ST7B	;  msgs in pipe
	TRAN	DAP$K_DAT_MSG,	,		ST7B,	EXIT	;  until CMP msg
	TRAN	,		FAL$OUT_OF_SEQ,	ST7B,	ST7B	;  is received

	.SBTTL	ST8 -- DIRECTORY LIST

;++
; Directory list retrieval state.
;
; Send a file specification and requested file attributes for each directory
; found to partner process. Engage in error recovery dialogue on an error in
; accessing directory information or if directed by partner to stop before
; the function is completed.
;--
;	State	Value		Action-Routine	Success	Failure	Comments

STATE	ST8
	TRAN	,		FAL$TEST_MSG,	ST8A,
	TRAN	,		FAL$DIR_SEARCH,	,	ST8A
	TRAN	,		FAL$CHECK_NMF,	ST0,	ST8	; True/False

STATE	ST8A
	TRAN	,		FAL$NEXT_MSG,	,	ST8A
	TRAN	DAP$K_CMP_MSG,	FAL$DECODE_CMP,	ST8A_1,	ST8A
	TRAN	DAP$K_CON_MSG,	FAL$DECODE_CON,	ST8A_2,	ST8A
	TRAN	,		FAL$OUT_OF_SEQ,	ST8A,	ST8A

STATE	ST8A_1
	TRAN	DAP$K_CLOSE,	FAL$DIR_END,	ST0,	EXIT
; *****	TRAN	DAP$K_TERMINATE,FAL$DIR_END,	ST0,	ST3	; Inappropriate
	TRAN	,		FAL$OUT_OF_SEQ,	ST8A,	ST8A

STATE	ST8A_2
	TRAN	DAP$K_SKIP_REC,	,		ST8,	EXIT	; Goto next file
	TRAN	DAP$K_RETRY,	FAL$UNS_CONFUNC,ST8A,	ST8A
	TRAN	,		FAL$INV_CONFUNC,ST8A,	ST8A

	.SBTTL	ST9 -- WILDCARD FILE RETRIEVAL

;++
; Wildcard file retrieval state.
;--
;	State	Value		Action-Routine	Success	Failure	Comments

STATE	ST9
	TRAN	,		FAL$TEST_MSG,	ST9A,
	TRAN	,		FAL$FIL_SEARCH,	,	ST9A
	TRAN	,		FAL$CHECK_NMF,	ST0,		; True/False
	TRAN	,		FAL$OPEN,	ST9A,	ST9A

STATE	ST9A
	TRAN	,		FAL$NEXT_MSG,	,	ST9A
	TRAN	DAP$K_CTL_MSG,	FAL$DECODE_CTL,	ST9A_1,	ST9A
	TRAN	DAP$K_CMP_MSG,	FAL$DECODE_CMP,	ST9A_2,	ST9A
	TRAN	DAP$K_CON_MSG,	FAL$DECODE_CON,	ST9A_3,	ST9A
	TRAN	,		FAL$OUT_OF_SEQ,	ST9A,	ST9A

STATE	ST9A_1
	TRAN	DAP$K_CONNECT,	FAL$CONNECT,	ST9A,	ST9A
	TRAN	DAP$K_GET_READ,	FAL$CHECK_FTM,	ST9B,	EXIT
	TRAN	,		FAL$INV_CTLFUNC,ST9A,	ST9A

STATE	ST9A_2
	TRAN	DAP$K_DISCONN,	FAL$DISCONNECT,	ST9A,	ST9A
	TRAN	DAP$K_CLOSE,	FAL$CLOSE,	ST9,	ST9A	; Goto next file
	TRAN	DAP$K_SKIP_FILE,,		ST9,	EXIT	; Goto next file
	TRAN	DAP$K_TERMINATE,FAL$CLOSE,	ST0,	ST9A	; Stop operation
	TRAN	,		FAL$INV_CMPFUNC,ST9A,	ST9A

STATE	ST9A_3
	TRAN	DAP$K_RESUME,	,		ST9B,	EXIT
	TRAN	DAP$K_RETRY,	,		ST9B,	EXIT
	TRAN	DAP$K_SKIP_REC,	FAL$UNS_CONFUNC,ST9A,	ST9A
	TRAN	,		FAL$INV_CONFUNC,ST9A,	ST9A

STATE	ST9B
	TRAN	,		FAL$TEST_MSG,	ST9A,
	TRAN	,		FAL$GET_READ,	ST9B,	ST9A

	.SBTTL	ST10 -- WILDCARD FILE DELETION

;++
; Wildcard file deletion state.
;--
;	State	Value		Action-Routine	Success	Failure	Comments

STATE	ST10
	TRAN	,		FAL$FIL_SEARCH,	,	ST0
	TRAN	,		FAL$CHECK_NMF,	ST0,		; True/False
	TRAN	,		FAL$ERASE,	ST10,	ST10A

STATE	ST10A
	TRAN	,		FAL$NEXT_MSG,	,	ST10A
	TRAN	DAP$K_CON_MSG,	FAL$DECODE_CON,	ST10A_1,ST10A
	TRAN	,		FAL$OUT_OF_SEQ,	ST10A,	ST10A

STATE	ST10A_1
	TRAN	DAP$K_SKIP_REC,	,		ST10,	EXIT
	TRAN	DAP$K_RETRY,	FAL$UNS_CONFUNC,ST10A,	ST10A
	TRAN	,		FAL$INV_CONFUNC,ST10A,	ST10A

	.SBTTL	ST11 -- WILDCARD FILE EXECUTION

;++
; Wildcard file execution state.
;--
;	State	Value		Action-Routine	Success	Failure	Comments

STATE	ST11
	TRAN	,		FAL$FIL_SEARCH,	,	ST0
	TRAN	,		FAL$CHECK_NMF,	ST0,		; True/False
	TRAN	,		FAL$EXECUTE,	ST11,	ST11A

STATE	ST11A
	TRAN	,		FAL$NEXT_MSG,	,	ST11A
	TRAN	DAP$K_CON_MSG,	FAL$DECODE_CON,	ST11A_1,ST11A
	TRAN	,		FAL$OUT_OF_SEQ,	ST11A,	ST11A

STATE	ST11A_1
	TRAN	DAP$K_SKIP_REC,	,		ST11,	EXIT
	TRAN	DAP$K_RETRY,	FAL$UNS_CONFUNC,ST11A,	ST11A
	TRAN	,		FAL$INV_CONFUNC,ST11A,	ST11A

;++
; Termination state.
;--

STATE	EXIT
	RETURN

	.END				; End of module
