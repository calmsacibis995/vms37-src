	.TITLE	FALACTINI - STATE TABLE ACTION ROUTINES
	.IDENT	'V03-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; Facility: FAL (DECnet File Access Listener)
;
; Abstract:
;
;	This module contains action routines called by the state table manager.
;
; Environment: VAX/VMS, user mode
;
; Author: James A. Krycka,	Creation Date:	16-JUN-1977
;
; Modified By:
;
;	V02-004	JAK0023		J A Krycka	04-SEP-1981
;		Add FAL$INIT_XABCHN routine.
;
;	V02-003	JAK0021		J A Krycka	17-AUG-1981
;		Remove local definitions for symbols now in the NAM block.
;
;	V02-002	JAK0018		J A Krycka	18-JUN-1981
;		This module was created from routines previously residing in
;		FALACTION.
;
;--

	.SBTTL	DECLARATIONS

;
; Include Files:
;

	$DAPPLGDEF			; Define DAP prologue symbols
	$DAPHDRDEF			; Define DAP message header
	$DAPCTLDEF			; Define DAP Control message
	$FABDEF				; Define File Access Block symbols
	$FALWRKDEF			; Define FAL Work Area symbols
	$NAMDEF				; Define Name Block symbols
	$RABDEF				; Define Record Access Block sym**
	$XABDEF				; Define symbols common to all XABs
	$XABALLDEF			; Define Allocation XAB symbols
	$XABDATDEF			; Define Date and Time XAB symbols
	$XABFHCDEF			; Define File Header Char XAB symbols
	$XABKEYDEF			; Define Key Definition XAB symbols
	$XABPRODEF			; Define Protection XAB symbols
	$XABRDTDEF			; Define Revision Date and Time symbols
	$XABSUMDEF			; Define Summary XAB symobls

;
; Macros:
;
;	None
;
; Equated Symbols:
;

	ASSUME	DAP$Q_DCODE_FLG EQ 0
	ASSUME	FAL$Q_FLG EQ 0

;
; Own Storage:
;

	.SBTTL	ACTION ROUTINES
	.PSECT	FAL$CODE	NOSHR,EXE,RD,NOWRT,BYTE

;++
; Functional Description:
;
;	This module contains action routines invoked by the state table
;	manager (FAL$STATE).
;
;	The input parameters and completion codes listed below are applicable
;	for all of these action routines. Note that an action routine may use
;	R0-R7 and AP without restoring them on exit. R0 on exit, however, must
;	represent a status code to indicate success/failure of the routine or
;	a true/false condition, as appropriate. This status code is used by
;	the state table manager to advance to the next state.
;
; Calling Sequence:
;
;	BSBW	FAL$INIT (only routine at present)
;
; Input Parameters:
;
;	R8	Address of FAL work area
;	R9	Address of DAP control block
;	R10	Address of FAB
;	R11	Address of RAB
;
; Implicit Inputs:
;
;	None
;
; Output Parameters:
;
;	R0	Status code
;	R1-R7	Destroyed
;	AP	Destroyed
;
; Implicit Outputs:
;
;	None
;
; Completion Codes:
;
;	R0	1 = success; 0 = failure
;
; Side Effects:
;
;	None
;
;--

	.SBTTL	FAL$INIT

;++
; This routine initializes the FAL work area in preparation for the next file
; access request. This includes setting up the FAB, RAB, NAM, and FHCXAB control
; blocks and linking them together.
;--

FAL$INIT::				; Entry point
	BICL2	#<<FAL$M_ATT_MSG>!-	; Clear flags
		  <FAL$M_WILD>!-	;
		  <FAL$M_FTM>!-		;
		  <FAL$M_BLK_IO>!-	;
		0>,(R8)			;
	MOVL	#DAP$K_VALID_R2F,-	; Define which DAP messages are valid
		DAP$L_MSG_MASK(R9)	;  to receive from partner
	MOVB	#DAP$K_RAC_D,-		; Set previous RAC value to the DAP
		FAL$B_RAC(R8)		;  default RAC value

;
; Initialize the FAB, RAB, NAM, and FHCXAB control blocks.
;

	ASSUME	FAL$K_FAB GE FAB$C_BLN
	ASSUME	FAL$K_RAB GE RAB$C_BLN
	ASSUME	FAL$K_NAM GE NAM$C_BLN
	ASSUME	FAL$K_FHCXAB GE XAB$C_FHCLEN

	$ZERO_FILL-			; Zero FAB, RAB, NAM, FHCXAB blocks
		DST=(R10)-		;
		SIZE=#<FAL$K_FAB+FAL$K_RAB+FAL$K_NAM+FAL$K_FHCXAB>

	ASSUME	FAB$B_BID+1 EQ FAB$B_BLN
	ASSUME	RAB$B_BID+1 EQ RAB$B_BLN
	ASSUME	NAM$B_BID+1 EQ NAM$B_BLN
	ASSUME	XAB$B_COD+1 EQ XAB$B_BLN

	MOVW	#<FAB$C_BLN@8+FAB$C_BID>,-
		FAB$B_BID(R10)		; Insert FAB block ID and length
	MOVAB	FAL$T_FILESPEC(R8),-	; Store address of file specification
		FAB$L_FNA(R10)		;  string buffer in FAB
	$SETBIT	#FAB$V_NAM,FAB$L_FOP(R10) ; Denote NAM block is present
	MOVW	#<RAB$C_BLN@8+RAB$C_BID>,-
		RAB$B_BID(R11)		; Insert RAB block ID and length
	MOVAB	FAL$L_NAM(R8),R7	; Get address of NAM block
	MOVW	#<NAM$C_BLN@8+NAM$C_BID>,-
		NAM$B_BID(R7)		; Insert NAM block ID and length
	MOVAB	FAL$T_EXPANDED(R8),-	; Store address of expanded string
		NAM$L_ESA(R7)		;  buffer in NAM block
	MOVB	#FAL$K_EXPANDED,-	; Store size of expanded string
		NAM$B_ESS(R7)		;  buffer in NAM block
	MOVAB	FAL$T_RESULTANT(R8),-	; Store address of resultant string
		NAM$L_RSA(R7)		;  buffer in NAM block
	MOVB	#FAL$K_RESULTANT,-	; Store size of resultant string
		NAM$B_RSS(R7)		;  buffer in NAM block
	MOVB	#NAM$M_PWD,NAM$B_NOP(R7); Do not mask out password in node spec
	MOVW	#<XAB$C_FHCLEN@8+XAB$C_FHC>,-
		FAL$L_FHCXAB+XAB$B_COD(R8) ; Insert FHCXAB ID and length

;
; Link only the RAB, NAM, and FHCXAB to the FAB at this time.
; The other XABs will be chained in as required when the DAP Access message
; is processed.
;

	MOVL	R10,RAB$L_FAB(R11)	; Store FAB pointer in RAB
	MOVAL	FAL$L_NAM(R8),-		; Store NAM pointer in FAB
		FAB$L_NAM(R10)		;
	MOVAL	FAL$L_FHCXAB(R8),-	; Store FHCXAB pointer in XAB chain
		FAB$L_XAB(R10)		;
	MOVAL	FAL$L_FHCXAB+XAB$L_NXT(R8),-
		FAL$L_CHAIN_NXT(R8)	; Save address of next chain pointer

;
; Initialize XAB related fields in the FAL work area.
;

	CLRW	FAL$W_RECEIVED(R8)	; Zero mask of received XABs to chain
	CLRL	FAL$L_ALLXABINI(R8)	; Zero list of ALLXABs initialized
	CLRL	FAL$L_KEYXABINI(R8)	; Zero list of KEYXABs initialized

;
; Initialize volume and directory name descriptors for possible wildcard
; processing.
;

	ASSUME	FAL$Q_VOLNAME+8 EQ FAL$Q_DIRNAME

	MOVAQ	FAL$Q_VOLNAME(R8),R0	; Get address of first descriptor
	CLRL	(R0)+			; Initialize volume name descriptor
	MOVAB	FAL$T_VOLNAME(R8),(R0)+	;
	CLRL	(R0)+			; Initialize directory name descriptor
	MOVAB	FAL$T_DIRNAME(R8),(R0)+	;

;
; Exit state with success if a valid Configuration message has been processed;
; otherwise, exit state with failure.
;

	EXTZV	#FAL$V_CNF_MSG,#1,(R8),R0
	RSB				; Exit state with status code in R0

	.SBTTL	FAL$INIT_XABCHN

;++
; This routine initializes the XAB chain and related XAB fields in the FAL
; work area in preparation for receiving XAB related messages from partner
; after the file has been opened or created (e.g., XABs are input to the RMS
; $EXTEND and $CLOSE services).
;--

FAL$INIT_XABCHN::			; Entry point
	CLRL	FAB$L_XAB(R10)		; Remove any XABs from chain
	MOVAL	FAB$L_XAB(R10),-	;
		FAL$L_CHAIN_NXT(R8)	; Save address of next chain pointer
	CLRW	FAL$W_RECEIVED(R8)	; Zero mask of received XABs to chain
	CLRL	FAL$L_ALLXABINI(R8)	; Zero list of ALLXABs initialized
	CLRL	FAL$L_KEYXABINI(R8)	; Zero list of KEYXABs initialized
	MOVL	#1,R0			; Return success code
	RSB				; Exit state with status code in R0

	.SBTTL	SUPPORT ROUTINES
	.PSECT	FAL$CODE	NOSHR,EXE,RD,NOWRT,BYTE

;++
; Functional Description:
;
;	The following routines are called by other action routines, not by the
;	state table manager (FAL$STATE).
;
;	These routines initialize the specified XAB. For Allocation and Key
;	Definition XABs, the area ID and key of reference value, respectively,
;	is an input parameter.
;
; Calling Sequence:
;
;	BSBW	FAL$INIT_ALLXAB
;	BSBW	FAL$INIT_DATXAB
;	BSBW	FAL$INIT_KEYXAB
;	BSBW	FAL$INIT_PROXAB
;	BSBW	FAL$INIT_RDTXAB
;	BSBW	FAL$INIT_SUMXAB
;
; Input Parameters:
;
;	R6	AID value for FAL$INIT_ALLXAB; REF value for FAL$INIT_KEYXAB
;
; Implicit Inputs:
;
;	None
;
; Output Parameters:
;
;	R0	Status code
;	R1-R5	Destroyed
;	R6	Unchanged
;	R7	Address of XAB initialized
;
; Implicit Outputs:
;
;	None
;
; Completion Codes:
;
;	R0	1 = success; 0 = failure
;
; Side Effects:
;
;	None
;
;--

	ASSUME	XAB$B_COD+1 EQ XAB$B_BLN
	ASSUME	FAL$K_ALLXAB GE XAB$C_ALLLEN
	ASSUME	FAL$K_DATXAB GE XAB$C_DATLEN
	ASSUME	FAL$K_KEYXAB GE XAB$C_KEYLEN_V2
	ASSUME	FAL$K_PROXAB GE XAB$C_PROLEN
	ASSUME	FAL$K_RDTXAB GE XAB$C_RDTLEN
	ASSUME	FAL$K_SUMXAB GE XAB$C_SUMLEN

	.SBTTL	FAL$INIT_DATXAB, FAL$INIT_PROXAB
	.SBTTL	FAL$INIT_SUMXAB, FAL$INIT_RDTXAB
	.SBTTL	FAL$INIT_ALLXAB, FAL$INIT_KEYXAB

;++
; This routine initializes the Date and Time XAB.
;--

FAL$INIT_DATXAB::			; Entry point
	MOVAL	FAL$L_DATXAB(R8),R7	; Get address of DATXAB
	$ZERO_FILL-			; Zero DATXAB
		DST=(R7)-		;
		SIZE=#FAL$K_DATXAB	;
	MOVW	#<XAB$C_DATLEN@8+XAB$C_DAT>,-
		XAB$B_COD(R7)		; Insert DATXAB ID and length
	BRW	INIT_SUC		; All done

;++
; This routine initializes the Protection XAB.
;--

FAL$INIT_PROXAB::			; Entry point
	MOVAL	FAL$L_PROXAB(R8),R7	; Get address of PROXAB
	$ZERO_FILL-			; Zero PROXAB
		DST=(R7)-		;
		SIZE=#FAL$K_PROXAB	;
	MOVW	#<XAB$C_PROLEN@8+XAB$C_PRO>,-
		XAB$B_COD(R7)		; Insert PROXAB ID and length
	BRB	INIT_SUC		; All done

;++
; This routine initializes the Summary XAB.
;--

FAL$INIT_SUMXAB::			; Entry point
	MOVAL	FAL$L_SUMXAB(R8),R7	; Get address of SUMXAB
	$ZERO_FILL-			; Zero SUMXAB
		DST=(R7)-		;
		SIZE=#FAL$K_SUMXAB	;
	MOVW	#<XAB$C_SUMLEN@8+XAB$C_SUM>,-
		XAB$B_COD(R7)		; Insert SUMXAB ID and length
	BRB	INIT_SUC		; All done

;++
; This routine initializes the Revision Date and Time XAB.
;--

FAL$INIT_RDTXAB::			; Entry point
	MOVAL	FAL$L_RDTXAB(R8),R7	; Get address of RDTXAB
	$ZERO_FILL-			; Zero RDTXAB
		DST=(R7)-		;
		SIZE=#FAL$K_RDTXAB	;
	MOVW	#<XAB$C_RDTLEN@8+XAB$C_RDT>,-
		XAB$B_COD(R7)		; Insert RDTXAB ID and length
	BRB	INIT_SUC		; All done

;++
; This routine initializes the Allocation XAB (by area ID).
;--

FAL$INIT_ALLXAB::			; Entry point
	CMPL	R6,#FAL$K_MAX_AID	; Return error if area ID value
	BGTRU	INIT_ERR		;  is too large
	MULL3	R6,#FAL$K_ALLXAB,R0	; Using AID as an index, compute
	MOVAB	FAL$L_ALLXAB(R8)[R0],R7	;  address of Allocation XAB to use
	$ZERO_FILL-			; Zero ALLXAB
		DST=(R7)-		;
		SIZE=#FAL$K_ALLXAB	;
	MOVW	#<XAB$C_ALLLEN@8+XAB$C_ALL>,-
		XAB$B_COD(R7)		; Insert ALLXAB ID and length
	MOVB	R6,XAB$B_AID(R7)	; Store area ID value
	$SETBIT	R6,FAL$L_ALLXABINI(R8)	; Denote which ALLXAB was initialized
	BRB	INIT_SUC		; All done

;++
; This routine initializes the Key Definition XAB (by key of reference).
;--

FAL$INIT_KEYXAB::			; Entry point
	CMPL	R6,#FAL$K_MAX_REF	; Return error if key of reference value
	BGTRU	INIT_ERR		;  is too large
	MULL3	R6,#FAL$K_KEYXAB,R0	; Using REF as an index, compute
	MOVAB	FAL$L_KEYXAB(R8)[R0],R7	;  address of KEYXAB to use
	$ZERO_FILL-			; Zero KEYXAB
		DST=(R7)-		;
		SIZE=#FAL$K_KEYXAB	;
	MULL3	R6,#FAL$K_KEYNAM,R0	; Using REF as an index, compute
	MOVAB	FAL$L_KEYNAM(R8)[R0],-	;  address of key name buffer to use
		XAB$L_KNM(R7)		;  and store address in XAB
	MOVW	#<XAB$C_KEYLEN_V2@8+XAB$C_KEY>,-
		XAB$B_COD(R7)		; Insert KEYXAB ID and length
	MOVB	R6,XAB$B_REF(R7)	; Store key of reference value
	$SETBIT	R6,FAL$L_KEYXABINI(R8)	; Denote which KEYXAB was initialized

;++
; Common exit paths.
;--

INIT_SUC:				;
	MOVL	#1,R0			; Return success code
	RSB				; Exit
INIT_ERR:				;
	CLRL	R0			; Return failure code
	RSB				; Exit

	.END				; End of module
