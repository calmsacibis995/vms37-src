MODULE help_help (
		LANGUAGE (BLISS32),
		IDENT = 'V03-002',
		MAIN = HELP$START
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  DCL $HELP command
!
! ABSTRACT:
!
!	The DCL HELP command provides on-line information retrieval.
!
! ENVIRONMENT:
!
!	VAX native, user mode.
!
!--
!
!
! AUTHOR:  Peter George,	 CREATION DATE:  1-May-1981
!
! MODIFIED BY:
!
!	V03-002	PCG0012		Peter George		15-Apr-1982
!		Use LBR$_ENDTOPIC to abort help on a topic.
!
!	V03-001	PCG0011		Peter George		30-Mar-1982
!		Special case RMS$_EOF.
!
!	V02-010	PCG0010		Peter George		15-Jan-1982
!		Remove temporary symbols.
!
!	V02-009	PCG0009		Peter George		07-Dec-1981
!		Use HLP$M_HELP flag.
!
!	V02-008	PCG0008		Peter George		18-Nov-1981
!		Use LIB$GET_INPUT if SYS$INPUT is not a terminal.
!		Allow use of /NOLIBRARY qualifier.
!		Call LBR$OUTPUT_HELP with LIBLIST flag bit set.
!
!	V02-007 PCG0007		Peter George		11-Sep-1981
!		Add default file name string for /OUTPUT file.
!
!	V02-006	PCG0006		Peter George		27-Aug-1981
!		Change page break prompt.
!		Change page break prompt command interpreter.
!
!	V02-005	PCG0005		Peter George		10-Aug-1981
!		Eliminate /PAGE as the default.
!		Use different prompt at page break when not prompting.
!
!	V02-004	PCG0004		Peter George		19-Jun-1981
!		Generate page breaks only if terminal type is scope,
!		but not unknown.
!
!	V02-003	PCG0003		Peter George		08-Jun-1981
!		Generate page breaks only when help text is coming.
!
!	V02-002	PCG0002		Peter George		05-Jun-1981
!		Use ? instead of <LF> to get prompt at page breaks.
!		Make translation of SYS$INPUT recursive.
!
!	V02-001	PCG0001		Peter George		19-May-1981
!		Change purpose of /OUTPUT qualifier.
!		Allow <LF> at page breaks.	
!--

LIBRARY
    'SYS$LIBRARY:STARLET';

LIBRARY
    'SYS$LIBRARY:TPAMAC';

REQUIRE
    'HELPDEF';

!
! Define VMS block structures (BLOCK[,BYTE])
!

STRUCTURE
    BBLOCK [O, P, S, E; N] =
		[N]
		(BBLOCK + O) <P, S, E>;

!
! Macro to generate a counted string
!

MACRO
    COUNTEDSTRING(STRING) = VECTOR [%CHARCOUNT (STRING)+1, BYTE] INITIAL (BYTE(%CHARCOUNT(STRING),%ASCII STRING ))%;

EXTERNAL ROUTINE
    lib$get_foreign : ADDRESSING_MODE(GENERAL),	! Get a command line
    lib$get_input : ADDRESSING_MODE(GENERAL),	! Get a line from SYS$INPUT
    lib$tparse : ADDRESSING_MODE(GENERAL),	! Parse command line
    scr$erase_page : ADDRESSING_MODE(GENERAL),	! Clear screen
    lbr$output_help : ADDRESSING_MODE(GENERAL);	! Get help text

EXTERNAL
    lbr$gl_rmsstv : ADDRESSING_MODE(GENERAL);	! RMS STV from librarian

FORWARD ROUTINE
    qualifier_off,				! Turn off masked flag bits
    build_filename,				! Extract filename from parse string
    backup_char,				! Back up one char in parse string
    get_input,					! Get a line of input text
    print_help_line,				! Driver to call help output routines
    put_page_break,				! Put a page break
    put_output,					! Put a line of output text to the screen
    find_file_info,				! Determine characteristics of SYS$OUPUT
    open_sysinput,				! Open SYS$INPUT
    open_sysoutput,				! Open SYS$OUTPUT
    clean_up,					! Deassign, disconnect, close all open files
    make_upper_case;				! Upper case a string
    
EXTERNAL LITERAL
    lbr$_endtopic;				! Status telling lbr$output_help to abort
						! help on a particular topic

LITERAL
    true = 1,					! Truthness
    false = 0;					! Falsity

OWN
    sysinchan,					! Channel assigned to SYS$INPUT
    sysoutrab  : BBLOCK [rab$c_bln],		! RAB for output to SYS$OUTPUT
    sysout_name : BBLOCK [dsc$c_s_bln],		! String descriptor for result name
    listing_buf : BBLOCK [nam$c_maxrss],	! Buffer for listing file name
    sysoutdesc : BBLOCK [dsc$c_s_bln],		! String descriptor for output file name
    librarystring : BBLOCK [nam$c_maxrss]	! Default library name string
		    INITIAL ('HELPLIB'),
    libraryname : BBLOCK [dsc$c_s_bln],		! String descriptor for library name
    outputdesc : BBLOCK [dsc$c_s_bln],		! Local descriptor for prompt response
    outputbuf : BBLOCK [hlp$c_pagesize],	! Buffer for prompt
    current_height : INITIAL (0),		! Number of lines currently output
    list_height,				! Number of lines on a page
    help_flags : BBLOCK [4],			! Control flags
    tparse_block : BBLOCK [tpa$k_length0]	! Parser control block
		   INITIAL (tpa$k_count0, tpa$m_abbrev);

$INIT_STATE (state_table, key_table);

$STATE  (command,
	('/',qualifier),
	(tpa$_lambda, tpa$_exit)
	);

$STATE	(qualifier,
	('PROMPT', command, qualifier_off, hlp$m_prompt OR hlp$m_pmptdef, help_flags, hlp$m_help),
	('NOPROMPT', command, qualifier_off, hlp$m_pmptdef OR hlp$m_help, help_flags, hlp$m_prompt),
	('PAGE', command, , hlp$m_page, help_flags),
	('NOPAGE', command, qualifier_off, , , hlp$m_page),
	('OUTPUT', output, , hlp$m_output, help_flags),
	('NOOUTPUT', command, qualifier_off, , , hlp$m_output),
	('LIBRARY', helplibrary, , hlp$m_library, help_flags),
	('NOLIBRARY', command, qualifier_off, , , hlp$m_library),
	('USERLIBRARY', userlibrary),
	('NOUSERLIBRARY', command, qualifier_off, , , hlp$m_process 
		OR hlp$m_group OR hlp$m_system),
	(tpa$_lambda, tpa$_exit, backup_char)
	);

$STATE	(output,
	('=', command, build_filename, , , hlp$m_output),
	(tpa$_lambda, command)
	);

$STATE	(helplibrary,
	('=', command, build_filename, , , hlp$m_library)
	);

$STATE	(userlibrary,
	('=', userliblist, qualifier_off, , , hlp$m_process OR hlp$m_group
		OR hlp$m_system),
	(tpa$_lambda, command, , hlp$m_process OR hlp$m_group OR
		hlp$m_system, help_flags)
	);

$STATE	(userliblist,
	('ALL', command, , hlp$m_process OR hlp$m_group OR hlp$m_system,
		help_flags),
	('NONE', command, qualifier_off, , , hlp$m_process OR hlp$m_group 
		OR hlp$m_system), 
	('PROCESS', command, , hlp$m_process, help_flags),
	('GROUP', command, , hlp$m_group, help_flags),
	('SYSTEM', command, , hlp$m_system, help_flags),
	('(', list)
	);

$STATE	(list,
	('ALL', listend, , hlp$m_process OR hlp$m_group OR hlp$m_system,
		help_flags),
	('NONE', listend, qualifier_off, , , hlp$m_process OR hlp$m_group 
		OR hlp$m_system),
	('PROCESS', listend, , hlp$m_process, help_flags),
	('GROUP', listend, , hlp$m_group, help_flags),
	('SYSTEM', listend, , hlp$m_system, help_flags)
	);

$STATE	(listend,
	(',', list),
	(')', command)
	);

GLOBAL ROUTINE help$start (arglist) =
BEGIN

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine is called by CLI when the HELP command is entered.
!	The keys are parsed and the librarian is called to extract the
!	help from the help library.
!
! INPUTS:
!
!	User's command line.
!
! OUTPUTS:
!
!	The requested help text is displayed on the current SYS$OUTPUT:
!
! ROUTINE VALUE:
!
!	Always true.
!
!--

LOCAL
    getcmd_line : BBLOCK [hlp$c_pagesize],			! Command line buffer
    getcmd_desc : BBLOCK [dsc$c_s_bln],				! Command descriptor
    library_addr,						! Address of library name desc
    list_width,							! Number of chars per line
    listingfab  : BBLOCK [fab$c_bln],				! FAB for output to listing
    sysoutfab : BBLOCK [fab$c_bln],				! FAB for output to terminal
    sysoutnam  : BBLOCK [nam$c_bln],				! NAM block for SYS$OUTPUT
    status;

getcmd_desc = 0;						! Init command descriptor
getcmd_desc [dsc$w_length] = hlp$c_pagesize;
getcmd_desc [dsc$a_pointer] = getcmd_line;

!
! Get command line and the upper case it
! 

IF NOT (status = lib$get_foreign (getcmd_desc [dsc$w_length], 0,
		getcmd_desc [dsc$w_length]))
   THEN SIGNAL_STOP (.status);
make_upper_case (getcmd_desc, .getcmd_desc [dsc$a_pointer]);

help_flags = hlp$m_prompt OR hlp$m_process OR hlp$m_group 	! Set default qualifiers flag
	OR hlp$m_system OR hlp$m_liblist AND NOT hlp$m_help
	AND NOT hlp$m_page AND NOT hlp$m_output
	OR hlp$m_library AND NOT hlp$m_pmptdef 
	AND NOT hlp$m_pagedef;

libraryname [dsc$w_length] = %CHARCOUNT ('HELPLIB');		! Set default library name
libraryname [dsc$a_pointer] = librarystring;		

sysoutdesc [dsc$w_length] = 0;					! Init listing file desc
sysoutdesc [dsc$a_pointer] = listing_buf;

tparse_block [tpa$l_stringcnt] = .getcmd_desc [dsc$w_length];	! Put parse string into parse control block
tparse_block [tpa$l_stringptr] = .getcmd_desc [dsc$a_pointer];

!
! Call parser to parse command string
!

IF NOT (status = lib$tparse (tparse_block, state_table, key_table))
   THEN SIGNAL_STOP ( (shr$_syntax OR hlp$c_facility OR sts$k_error),
		      1, tparse_block [tpa$l_tokencnt] );

getcmd_desc [dsc$w_length] = .tparse_block [tpa$l_stringcnt];	! Get help keys left in command by parser
getcmd_desc [dsc$a_pointer] = .tparse_block [tpa$l_stringptr];

!
! Set prompt flag off by default, if output specified and no prompt flag specified
!
IF .help_flags [hlp$v_output] AND NOT .help_flags [hlp$v_pmptdef]
   THEN help_flags = (.help_flags AND NOT hlp$m_prompt) OR hlp$m_help;

IF .help_flags [hlp$v_prompt] OR .help_flags [hlp$v_page]	! Open SYS$INPUT if prompting or paging in effect
   THEN open_sysinput ();

IF NOT .help_flags [hlp$v_library]				! If /NOLIB specified
   THEN library_addr = 0					! Then use zero name address
   ELSE library_addr = libraryname;				! Else use specified name

open_sysoutput (sysoutfab, sysoutnam);				! Open SYS$OUTPUT
find_file_info (sysoutfab, list_width);				! Get characteristics of SYS$OUTPUT
current_height = .list_height - 3;				! Don't generate page break prompt
outputdesc [dsc$w_length] = 0;					! Init prompt command descriptor
outputdesc [dsc$a_pointer] = outputbuf;

!
! Call lbr$output_help to do all the real work.
!

IF NOT (status = lbr$output_help (print_help_line, list_width, getcmd_desc,
				  .library_addr, help_flags, get_input))
   THEN SIGNAL_STOP (.status);

clean_up (sysoutfab);						! Close all the files that have been opened

RETURN true;
END;								! Of help$start

ROUTINE qualifier_off =
BEGIN

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine is called by the parser to specify that a
!	qualifier is turned off.  The input mask is complemented and
!	then anded with the qualifier flag longword.
!
! INPUTS:
!
!	mask =	longword map indicating which qualifiers to turn off
!
! OUTPUTS:
!
!	The qualifer flags, help_flags, are updated appropriately.
!
! ROUTINE VALUE:
!
!	Always true.
!
!--
BUILTIN
    AP;						! Address of tparse block

MAP
    AP : REF BBLOCK;

BIND
    mask = AP [tpa$l_param];			! Routine parameter

help_flags = .help_flags AND NOT .mask;
RETURN true;
END;

ROUTINE build_filename =
BEGIN

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine is called by the parser to store the user-specified
!	filename included with a /OUTPUT or /LIBRARY command qualifier.
!
! INPUTS:
!
!	type =	longword indicating which qualifier is being processed
!
!	The tparse block is an implicit parameter pointed to by the AP.
!
! OUTPUTS:
!
!	Either libraryname or sysoutdesc is updated, depending on the 
!	value of type.  The tparse block is updated to reflect the
!	parsing of the file name.
!
! ROUTINE VALUE:
!
!	True, if file name successfully stored.
!	False, if syntax error.
!
!--

BUILTIN
    AP;						! Address of tparse block

LOCAL
    desc,					! Address of the file name descriptor to be updated
    stringbegin,				! Ptr to beginning of file name string
    stringend,					! Ptr to end of file name string
    stringlen,					! Length of file name string
    tempend;					! Temporary work ptr

MAP
    AP : REF BBLOCK,
    desc : REF BBLOCK;

BIND
    type = AP [tpa$l_param],			! Routine parameter
    parselen = AP [tpa$l_stringcnt],		! Length of string left unparsed
    parseptr = AP [tpa$l_stringptr];		! Address of string left unparsed

IF .parselen EQL 0				! If no parse string left
   THEN RETURN false;				! Then signal syntax error

IF .type EQL hlp$m_library			! Init descriptor on the basis
   THEN desc = libraryname			! of the input flag
   ELSE desc = sysoutdesc;

!
! Remove the file name from the parse string and store it.
!

IF (stringbegin = CH$FIND_NOT_CH (.parselen, .parseptr, %C' ')) EQL 0
   THEN stringbegin = .parseptr;

stringlen = .parselen + .parseptr - .stringbegin;

IF (stringend = CH$FIND_CH (.stringlen, .stringbegin, %C' ')) EQL 0
   THEN stringend = .parseptr + .parselen;

IF (tempend = CH$FIND_CH (.stringlen, .stringbegin, %C'/')) NEQ 0
   THEN IF .stringend GTR .tempend
	   THEN stringend = .tempend;

IF (stringlen = .stringend - .stringbegin) EQL 0
   THEN RETURN false;

desc [dsc$w_length] = .stringlen;
CH$MOVE (.stringlen, .stringbegin, .desc [dsc$a_pointer]);

!
! Update the parse string.
!

parselen = .parselen + .parseptr - .stringend;
parseptr = .stringend;

RETURN true;
END;

ROUTINE backup_char =
BEGIN

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine is called by the parser to restore the uparsed
!	parse string when it has parsed an unrecognized character and
!	decided that it must be part of a help key.
!
! INPUTS:
!
!	The tparse block is an implicit parameter pointed to by the AP.
!
! OUTPUTS:
!
!	The tparse block is updated as described above.
!
! ROUTINE VALUE:
!
!	Always true.
!
!--

BUILTIN
    AP;							! Address of the tparse block

MAP
    AP : REF BBLOCK;

BIND
    parselen = AP [tpa$l_stringcnt],			! Length of string left unparsed
    parseptr = AP [tpa$l_stringptr];			! Address of string left unparsed

parselen = .parselen + 1;
parseptr = .parseptr - 1;
RETURN true;
END;

ROUTINE get_input (get_str, prompt_str, out_len) =
BEGIN

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine prompts the user and gets a line of text from SYS$INPUT.
!
! INPUTS:
!
!	get_str =	address of the string descriptor to receive the input string
!
!	prompt_str =	address of the descriptor for the prompt string
!
!	out_len	=	address of a longword to receive the length of the input string
!
! OUTPUTS:
!
!	get_str : as described above
!
! ROUTINE VALUE:
!
!	The status of the QIO.
!
!--

MAP
    get_str : REF BBLOCK,
    prompt_str : REF BBLOCK;

BUILTIN
    NULLPARAMETER;

LOCAL
    iosb : VECTOR [2],							! I/O status block
    term_char : VECTOR [4],						! QIO input termination characters
    status;

IF (.outputdesc [dsc$w_length] NEQ 0) 					! If using old response
   THEN BEGIN
	get_str [dsc$w_length] = .outputdesc [dsc$w_length];		! Then copy it
	CH$MOVE (.outputdesc [dsc$w_length], .outputdesc [dsc$a_pointer], .get_str [dsc$a_pointer]);
	outputdesc [dsc$w_length] = 0;					! Clear old descriptor
	current_height = .list_height - 3;				! Generate page break with next help text
	RETURN true;
	END;

current_height = .list_height - 3;					! Generate page break with next help text

!
! If SYS$INPUT is not a terminal, then use LIB$GET_INPUT.  Otherwise,
! do QIO's to solicit input.
!

IF .help_flags [hlp$v_notterm]
   THEN (IF NOT (status = lib$get_input (.get_str, .prompt_str, .out_len))
	    THEN (IF .status NEQ RMS$_EOF 
		    THEN SIGNAL_STOP (.status)
		    ELSE RETURN .status)
	    ELSE RETURN .status);

!
! Initialize input termination characters.
! Use usual set plus '?'
!

term_char [0] = 8;				! Size of terminator mask
term_char [1] = term_char [2];			! Address of terminator mask
term_char [2] = %X'FFFFE0FF';			! Quadword terminator mask
term_char [3] = %X'80000000';

!
! Do QIO and wait.
!

IF NOT (status = $QIOW (CHAN = .sysinchan,
			IOSB = iosb,
			FUNC = IO$_READVBLK OR IO$_READPROMPT,
			P1 = .get_str [dsc$a_pointer],
			P2 = hlp$c_pagesize,
			P4 = term_char,
			P5 = .prompt_str [dsc$a_pointer],
			P6 = .prompt_str [dsc$w_length]))
   THEN SIGNAL_STOP (.status);

get_str [dsc$w_length] = .(iosb[0])<16,16> + 1;			! Set length of get string

RETURN .status;
END;

ROUTINE print_help_line (linedesc) =
BEGIN

!++
! FUNCTIONAL DESCRIPTION:
!
!	Driver for the two output routines in this module.
!	Calls put_page_brk and put_output.
!
! INPUTS:
!
!	linedesc =	address of string descriptor for the line of help
!			text to be output
!
! OUTPUTS:
!
!	None.
!
! ROUTINE VALUE:
!
!	Status returned by put_page_break
!
!--

IF NOT put_page_break ()				! Put a page break 
   THEN	RETURN LBR$_ENDTOPIC;				! Then terminate listing
put_output (.linedesc);					! Output help to terminal

RETURN true;
END;

ROUTINE put_page_break =
BEGIN

!++
! FUNCTIONAL DESCRIPTION:
!
!	If output is going to a video terminal, and paging is enabled, 
!	then a page break is forced if the screen is full of help text.
!
! INPUTS:
!
!	None.
!
! OUTPUTS:
!
!	None.
!
! ROUTINE VALUE:
!
!	False, if user responds with a '?' to a conditional page break.
!	True, otherwise.
!
!--

OWN
    pagebrk_prompt : 							! Page break prompt string 
	COUNTEDSTRING ('Press RETURN to continue  -  Press ? to select topics ... '),
    noprompt_prompt :							! Page break noprompt string
	COUNTEDSTRING ('Press RETURN to continue ...');

LOCAL
    prompt_desc : BBLOCK [dsc$c_s_bln];					! Descriptor for page break prompt

IF .help_flags [hlp$v_page] 						! If paging enabled
   THEN BEGIN
	IF (.current_height GEQ .list_height - 4) 			! Then if down to last three or less lines of the page
	   THEN BEGIN
		IF (.current_height EQL .list_height - 4)		! And in middle of some help information
		   THEN BEGIN					

			outputdesc [dsc$w_length] = 1;				! Init blank string
			outputbuf [0,0,8,0] = 10;
			put_output (outputdesc);				! Output a blank line

			IF .help_flags [hlp$v_prompt]				! Build prompt desc
			   THEN BEGIN
				prompt_desc [dsc$w_length] = .pagebrk_prompt [0];
				prompt_desc [dsc$a_pointer] = pagebrk_prompt [1];	
				END
			   ELSE BEGIN
				prompt_desc [dsc$w_length] = .noprompt_prompt [0];
				prompt_desc [dsc$a_pointer] = noprompt_prompt [1];
				END;

			outputdesc [dsc$w_length] = 0;				! Init input string
			get_input (outputdesc, prompt_desc, outputdesc);	! Get response to page break prompt
			
			SELECTONE (CH$RCHAR (.outputdesc [dsc$a_pointer] + 	! Test termination character
			   .outputdesc [dsc$w_length] - 1)) OF SET

			[%X'1A']:						! If CTRL/Z 
			$EXIT();						! Then exit help now

			[%C'?']:						! If ?
			IF .help_flags [hlp$v_prompt]				! And prompting
			   THEN BEGIN
				outputdesc [dsc$w_length] = 0;			! Clear reusable command
				RETURN false					! Then return false, thereby terminating listing
				END
			   ELSE true;						! Else, simply continue

			[OTHERWISE]:						! Anything else
			IF .outputdesc [dsc$w_length] EQL 1			! If no text
			   THEN outputdesc[dsc$w_length] = 0			! Then simply continue
			   ELSE BEGIN						! Use text as next command
				outputdesc [dsc$w_length] = .outputdesc [dsc$w_length] - 1;
				RETURN false;
				END;

			TES;

			END;

		scr$erase_page (1,1);					! Clear screen
		current_height = 1;					! Reset line count
		END

	   ELSE current_height = .current_height + 1;			! Otherwise, simply increment line count
	END;

RETURN true;
END;

ROUTINE put_output (linedesc) =
BEGIN

!++
! FUNCTIONAL DESCRIPTION:
!
!	Put a line of help text to SYS$OUTPUT.
!
! INPUTS:
!
!	linedesc =	address of string descriptor for the line of help
!			text to be output
!
! OUTPUTS:
!
!	None.
!
! ROUTINE VALUE:
!
!	Always true.
!
!--

MAP
    linedesc : REF BBLOCK;

LOCAL
    linebuf : BBLOCK [hlp$c_pagesize],
    status;

sysoutrab [rab$w_rsz] = 0;
sysoutrab [rab$l_rbf] = linebuf;

IF .linedesc [dsc$w_length] NEQ 0
   THEN BEGIN
	CH$MOVE (.linedesc [dsc$w_length], .linedesc [dsc$a_pointer], linebuf);
	sysoutrab [rab$w_rsz] = .linedesc [dsc$w_length];
	END;

IF NOT (status = $PUT (RAB = sysoutrab))
   THEN SIGNAL ( (shr$_writeerr OR hlp$c_facility OR sts$k_warning),
	1, sysout_name, .status, .sysoutrab [rab$l_stv]);

RETURN true;
END;						!Of put_output

ROUTINE find_file_info (fab, listwidth) =
BEGIN

!++
! FUNCTIONAL DESCRIPTION:
!
!	Determine the file characteristics, i.e., page height and line width,
!	of the file specified by the input fab.  Also, check to see if device
!	is suitable for page breaks.
!
! INPUTS:
!
!	fab =		address of FAB for file of interest
!
!	listwidth =	address of longword to contain line width
!
! OUTPUTS:
!
!	listwidth : as described above.  
!	Also implicitly:  list_height and help_flags.
!
! ROUTINE VALUE:
!
!	Always true.
!
!--

MAP
    fab : REF BBLOCK;

BIND
    namblk = .fab [fab$l_nam] : BBLOCK;		! NAM block associated with input FAB

MACRO
    dib$b_pagelen = 11,0,8,0%;			! *** Hardwired page length offset ***

LOCAL
    devnamdesc : BBLOCK [dsc$c_s_bln],
    devnambuf : VECTOR [nam$c_maxrss, BYTE],
    devnambufdesc : BBLOCK [dsc$c_s_bln],
    devinfobuf : BBLOCK [dib$k_length],
    devinfodesc : BBLOCK [dsc$c_s_bln],
    devchan;

.listwidth = hlp$c_liswidth;						! Assume default of 80
IF (.fab [fab$l_dev] AND dev$m_spl) NEQ 0				! If device is spooled
THEN BEGIN
    devnamdesc [dsc$w_length] = CH$FIND_CH (.namblk [nam$b_esl],
				.namblk [nam$l_esa], %ASCII ':')
				- .namblk [nam$l_esa];
    devnamdesc [dsc$a_pointer] = .namblk [nam$l_esa];
    END
ELSE BEGIN								! Device is not spooled
    devnamdesc [dsc$w_length] = CH$FIND_CH (.namblk [nam$b_rsl],
				.namblk [nam$l_rsa], %ASCII ':')
				- .namblk [nam$l_rsa];
    devnamdesc [dsc$a_pointer] = .namblk [nam$l_esa];
    END;

devnambufdesc [dsc$w_length] = nam$c_maxrss;				! Init device name buffer descriptor
devnambufdesc [dsc$a_pointer] = devnambuf;

$TRNLOG (LOGNAM = devnamdesc, RSLLEN = devnambufdesc, RSLBUF = devnambufdesc);

IF .devnambuf [0] EQL %X '1B'						!Check for process permanent file
THEN BEGIN
    devnambufdesc [dsc$w_length] = .devnambufdesc [dsc$w_length] - 4;
    devnambufdesc [dsc$a_pointer] = .devnambufdesc [dsc$a_pointer] + 4;
    END;

!
! Assign the device and then do a $GETCHN to get the parameters of interest.
!

IF $ASSIGN (DEVNAM = devnambufdesc, CHAN = devchan)
THEN BEGIN

    devinfodesc [dsc$w_length] = dib$k_length;				! Set up descriptor for $GETCHN
    devinfodesc [dsc$a_pointer] = devinfobuf;

    IF $GETCHN (CHAN = .devchan, SCDBUF = devinfodesc)
	THEN BEGIN
	     .listwidth = MINU (.devinfobuf [dib$w_devbufsiz], hlp$c_maxwidth);
	     list_height = .devinfobuf [dib$b_pagelen];
	     IF (( .devinfobuf [dib$b_devclass] NEQ dc$_term) OR			! IF output device is not a terminal
		((.devinfobuf [dib$l_devdepend] AND tt$m_scope) NEQ tt$m_scope) OR	! Or output device is not a video terminal
		(.devinfobuf [dib$b_devtype] EQL dt$_ttyunkn)) AND			! Or terminal type is unknown
		NOT .help_flags [hlp$v_pagedef]						! And page break flag not user set
		THEN help_flags = .help_flags AND NOT hlp$m_page;			! Then do not generate page breaks
	     END;

    $DASSGN (CHAN = .devchan);						! Deassign channel

    END;

RETURN true;		
END;									!Of find_file_info

ROUTINE open_sysinput =
BEGIN

!++
! FUNCTIONAL DESCRIPTION:
!
! 	Open SYS$INPUT.
!
! INPUTS:
!
!	None.
!
! OUTPUTS:
!
!	sysinchan =	longword containing channel assigned to SYS$INPUT
!
! ROUTINE VALUE:
!
!	Always true.
!
!--

OWN
    sysinput : COUNTEDSTRING ('SYS$INPUT');

LOCAL
    devinfobuf : BBLOCK [dib$k_length],			! DIB buffer
    devinfodesc : BBLOCK [dsc$c_s_bln],			! DIB desc
    sysinstring1 : VECTOR [nam$c_maxrss, BYTE],		! Space for SYS$INPUT resultant string
    sysinstring2 : VECTOR [nam$c_maxrss, BYTE],		! Space for SYS$INPUT resultant string
    sysindesc : BBLOCK [dsc$c_s_bln], 			! String descriptor for SYS$INPUT
    sysinname : BBLOCK [dsc$c_s_bln],			! String descriptor for resultant name
    status;

sysindesc [dsc$w_length] = .sysinput [0];		! Init input desc
sysindesc [dsc$a_pointer] = sysinput [1];

sysinname [dsc$w_length] = nam$c_maxrss;		! Init output desc
sysinname [dsc$a_pointer] = sysinstring2;

WHILE (status = $TRNLOG (LOGNAM = sysindesc,		! Recursively translate input desc
		RSLLEN = sysinname [dsc$w_length],
		RSLBUF = sysinname))
DO BEGIN

   IF (.status EQL SS$_NOTRAN) 				! Stop when not translatable
      THEN EXITLOOP
      ELSE IF NOT .status				! Signal any errors
	      THEN SIGNAL_STOP (.status);

   IF CH$RCHAR (.sysinname [dsc$a_pointer]) EQL %X'1B'
      THEN BEGIN
	   sysinname [dsc$w_length] = .sysinname [dsc$w_length] - 4;
	   sysinname [dsc$a_pointer] = .sysinname [dsc$a_pointer] + 4;
	   END;
   sysindesc [dsc$w_length] = .sysinname [dsc$w_length];  ! New input desc
   sysindesc [dsc$a_pointer] = .sysinname [dsc$a_pointer];
   sysinname [dsc$w_length] = nam$c_maxrss;		  ! New output desc
   sysinname [dsc$a_pointer] = 
	(IF .sysinname [dsc$a_pointer] EQL sysinstring1
	    THEN sysinstring2
	    ELSE sysinstring1);
   END;

IF NOT (status = $ASSIGN (DEVNAM = sysinname, CHAN = sysinchan))
   THEN SIGNAL_STOP (.status);

devinfodesc [dsc$w_length] = dib$k_length;
devinfodesc [dsc$a_pointer] = devinfobuf;
IF $GETCHN (CHAN = .sysinchan, SCDBUF = devinfodesc)
   THEN IF (.devinfobuf [dib$l_devchar] AND dev$m_trm) EQL 0
	   THEN BEGIN
		$DASSGN (CHAN = .sysinchan);
		help_flags [hlp$v_notterm] = true;
		END;

RETURN true;
END;

ROUTINE open_sysoutput (sysoutfab, sysoutnam)  =
BEGIN

!++
! FUNCTIONAL DESCRIPTION:
!
! 	Open SYS$OUTPUT.
!
! INPUTS:
!
!	sysoutfab =	address of FAB for SYS$OUTPUT
!
!	sysoutnam = 	address of NAM block for SYS$OUTPUT
!
! OUTPUTS:
!
!	sysoutfab, sysoutrab, sysout_name : updated as expected.
!
! ROUTINE VALUE:
!
!	Always true.
!
!--

MAP
    sysoutfab : REF BBLOCK,
    sysoutnam : REF BBLOCK;

OWN
    sysoutput : COUNTEDSTRING ('SYS$OUTPUT');

LOCAL
    sysoutstring : VECTOR [nam$c_maxrss, BYTE],			! Space for SYS$OUTPUT resultant filename
    status;

IF NOT .help_flags [hlp$v_output]
   THEN BEGIN
	sysoutdesc [dsc$w_length] = .sysoutput [0];
	sysoutdesc [dsc$a_pointer] = sysoutput [1];
	END;

$NAM_INIT (	NAM = .sysoutnam,
		ESS = nam$c_maxrss,
		ESA = sysoutstring,
		RSS = nam$c_maxrss,
		RSA = sysoutstring);

$FAB_INIT (	FAB = .sysoutfab,
		FNS = .sysoutdesc [dsc$w_length],
		FNA = .sysoutdesc [dsc$a_pointer],
		DNM = 'SYS$DISK:HELP.LIS',
		RAT = CR,
		FAC = PUT,
		NAM = .sysoutnam );

$RAB_INIT (	RAB = sysoutrab,
		FAB = .sysoutfab );

IF NOT (status = $CREATE (FAB = .sysoutfab))
   THEN BEGIN
	sysout_name [dsc$w_length] = .sysoutnam [nam$b_esl];
	sysout_name [dsc$a_pointer] = .sysoutnam [nam$l_esa];
	SIGNAL_STOP ( (shr$_openout OR hlp$c_facility OR sts$k_error),
			1, sysout_name, .status, .lbr$gl_rmsstv );
	END;

sysout_name [dsc$w_length] = .sysoutnam [nam$b_rsl];
sysout_name [dsc$a_pointer] = .sysoutnam [nam$l_rsa];

IF NOT (status = $CONNECT (RAB = sysoutrab))
   THEN SIGNAL_STOP ( (shr$_openout OR hlp$c_facility OR sts$k_error),
			1, sysout_name, .status, .sysoutrab [rab$l_stv] );

RETURN true;
END;

ROUTINE clean_up (sysoutfab) =
BEGIN

!++
! FUNCTIONAL DESCRIPTION:
!
! 	Deassign SYS$INPUT if assigned and disconnect and close output file.
!
! INPUTS:
!
!	sysoutfab =	address of FAB for SYS$OUTPUT
!
! OUTPUTS:
!
!	None.
!
! ROUTINE VALUE:
!
!	Always true.
!
!--

MAP
    sysoutfab : REF BBLOCK;

LOCAL
    status;

IF (.help_flags [hlp$v_prompt] OR .help_flags [hlp$v_page])
   AND NOT .help_flags [hlp$v_notterm]
   THEN IF NOT (status = $DASSGN (CHAN = .sysinchan))
		THEN SIGNAL (.status);

IF NOT (status = $DISCONNECT (RAB = sysoutrab))
   THEN SIGNAL ( (shr$_closeout OR hlp$c_facility OR sts$k_warning),
	1, sysout_name, .status, .sysoutrab [rab$l_stv]);

IF NOT (status = $CLOSE (FAB = .sysoutfab))
   THEN SIGNAL ( (shr$_closeout OR hlp$c_facility OR sts$k_warning),
	1, sysout_name, .status, .sysoutrab [rab$l_stv]);

RETURN true;
END;

%SBTTL 'Routine make_upper_case';
ROUTINE make_upper_case (idesc, oname) =
BEGIN

!++
! FUNCTIONAL DESCRIPTION:
!
! 	Upper case the name described by string descriptor idesc and
! 	put the name at location oname.
!
! INPUTS:
!
!	idesc = 	address of string descriptor for input text string
!
!	oname = 	address of buffer to contain uppercase output string
!
! OUTPUTS:
!
!	oname : as described above
!
! ROUTINE VALUE:
!
!	Always true.
!
!--

MAP
    idesc : REF BBLOCK,
    oname : REF VECTOR[,BYTE];

BIND
    namlen = idesc[dsc$w_length] : WORD,
    iname = idesc[dsc$a_pointer] : REF VECTOR[,BYTE];

IF .namlen GTRU 0						! If non-empty string
   THEN INCRU i FROM 0 TO .namlen-1				! Then for each character

DO IF .iname[.i] GEQU %ASCII'a'					! Convert character to uppercase and copy
      AND .iname[.i] LEQU %ASCII'z'
      THEN oname[.i] = .iname[.i] - (%ASCII'a' - %ASCII'A')
      ELSE IF .iname[.i] EQL 9
	      THEN oname[.i] = 32
	      ELSE oname[.i] = .iname[.i];

RETURN true

END;								!Of make_upper_case

END								!Of module
ELUDOM
