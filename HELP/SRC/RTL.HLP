1 RTL
 The  VAX-11  Run-Time  Library  is  a  collection  of  procedures
 available  to  native  mode images  at run  time.   These library
 procedures are  common to  all native  mode images, regardless of
 the language processor used to compile or assemble the program.

 Currently,  the  VAX-11  Run-Time  Library  Documentation  Set is
 comprised of:

  o  VAX-11 Run-Time Library User's Guide
  o  VAX-11 Run-Time Library Reference Manual
  o  VAX-11 Run-Time Library Language Support Reference Manual

 The  notation  used  to  describe  each  procedure  parameter  is
 explained  in the summary of Run-Time Library Entry Points in the
 back  of each  manual.   See  Chapter 1 of  the  VAX-11  Run-Time
 Library  Reference  Manual for a  functional summary of the entry
 points.
2 LIB$
 LIB$ Procedures
3 ADDX,SUBX
 Addition, Multiple-Precision Binary

Format

 ret-status.wlc.v = LIB$ADDX (a.rl.ra, b.rl.ra, result.wl.ra
                              [,len.rl.r])
 ret-status.wlc.v = LIB$SUBX (a.rl.ra, b.rl.ra, result.wl.ra
                              [,len.rl.r])

Arguments

 a
   A multiple-precision, signed two's complement integer.
 b
   A multiple-precision, signed two's complement integer.
 result
   The multiple-precision, signed two's complement integer result.
 len
   The length in longwords of the arrays to be operated on.
3 ANALYZE_SDESC
 Analyze String Descriptors

Format

 ret-status.wlc.v = LIB$ANALYZE_SDESC (inp-dsc.rt.dx, len.ww.r,
                                       data-adr.wa.r)
        JSB entry:  LIB$ANALYZE_SDESC_R2

Arguments

 inp-dsc (R0)
   The input descriptor.
 len (R1)
   The length of the data.
 data-adr (R2)
   The address of the data.
3 ASN_WTH_MBX
 Assign Channel with Mailbox

Format

 ret-status.wlc.v = LIB$ASN_WTH_MBX (dev-nam.rt.dx, max-msg.rl.r,
                             buf-quo.rl.r, dev-chn.ww.r, mbx-chn.ww.r)

Arguments

 dev-nam
   The device name.
 max-msg
   The maximum message size that can be sent to the mailbox.
 buf-quo
   The number of system dynamic memory bytes that can be used to
   buffer messages sent to the mailbox.
 dev-chn
   The device channel.
 mbx-chn
   The mailbox channel.
3 AST_IN_PROG
 AST in Progress

Format

 in-progress.wlu.v = LIB$AST_IN_PROG ( )

Arguments

 in-progress
   An indicator of whether an AST is currently in progress
   (value=1) or not (value=0).
3 ATTACH
 Attach Terminal to Process

Format

 ret-status.wlc.v = LIB$ATTACH (process-id.rlu.r)

Arguments

 process-id
   The process identification of the process to which to attach.
3 CALLG
 Call Procedure with General Argument List

Format

 value.wz.v = LIB$CALLG (arglist.rlu.ra, procedure.fz.rp)

Arguments

 arglist
   An array of longwords to be used as the argument list to the
   called procedure.
 procedure
   The procedure or function to be called.
 value
   The return value, if any, of the called procedure.
3 CHAR
 Character of String, Transform Byte to First

Format

 ret-status.wlc.v = LIB$CHAR (one-char-str.wt.dx, ascii-code.rbu.r)

Arguments

 one-char-str
  The one-character result.
 ascii-code
  The ASCII character code to be transformed to an ASCII string.
3 CRC
 Cyclic Redundancy Check (CRC), Calculate

Format

 crc.wlu.v = LIB$CRC (table.rlu.ra, inicrc.rlu.r, stream.rt.dx)

Arguments

 table
   The 16-longword cyclic redundancy check table.
 inicrc
   The initial cyclic redundancy check.
 stream
   The data stream.
 crc
   The computed cyclic redundancy check.
3 CRC_TABLE
 Cyclic Redundancy Check (CRC) Table, Construct

Format

 CALL LIB$CRC_TABLE (poly.rlu.r, table.wl.ra)

Arguments

 poly
   A bit mask indicating which polynomial coefficients are to be
   generated.
 table
   The 16-longword table that is to be produced.
3 CRF_INS_KEY
 Insert Key in Cross-Reference Table

Format

 CALL LIB$CRF_INS_KEY (ctl-tbl.rl.ra, key1.rt.dx, val1.rl.r, flags.rl.r)

Arguments

 ctl-tbl
  The control table associated with this cross-reference.
 key1
  A counted ASCII string that contains a symbol name or an
  unsigned binary longword.
 val1
  The symbol value.
 flags
  The 16-bit value used in selecting the contents of the KEY2 and
  VAL2 fields;
3 CRF_INS_REF
 Insert Reference to a Key in the Cross-Reference Table

Format

 CALL LIB$CRF_INS_REF (ctl-tbl.rl.ra, key1.rl.r,
                       ref2.rt.dx, ref1.rl.r, ref-def.rl.r)

Arguments

 ctl-tbl
   The control table associated with this cross-reference.
 key1
   The key referred to.
 ref2
   A counted ASCII string with a maximum of 31 characters, not
   including the byte count.
 ref1
   The 16-bit value used in selecting the contents of the REF1
   field.
 ref-def
   The reference/definition indicator.
3 CRF_OUTPUT
 Output Cross-Reference Table Information

Format

 CALL LIB$CRF_OUTPUT (ctl-tbl.rl.ra, width.rl.r, pag1.rl.r,
                      pag2.rl.r, mode-ind.rl.r, del-sav-ind.rl.r)

Arguments

 ctl-tbl
   The control table associated with the cross-reference.
 width
   The width of the output line.
 pag1
   The number of lines of the first page.
 pag2
   The number of lines for the other pages.
 mode-ind
   The output mode indicator.
 del-sav-ind
   The delete/save indicator.
3 CURRENCY
 Currency Symbol

Format

 ret-status.wlc.v = LIB$CURRENCY (currency-str.wt.dx [,out-len.wwu.r])

Arguments

 currency-str
   The currency string descriptor.
 out-len
   A word to receive the number of characters written into currency-str,
   not counting padding in the case of a fixed-length string.
3 CVT_DX_DX
 Conversion Routine, General Data Type

Format

 ret-status.wlc.v = LIB$CVT_DX_DX (src-str.rt.dx, dst-str.wt.dx
                                   [,dst-len.wwu.r])

Arguments

 src-str
   The source string.
 dst-str
   The destination string.
 dst-len
   The length of the destination in bytes, not including any space
   filling.
3 CVT_xTB
 Convert Text to Binary

Format

 ret-status.wlc.v = LIB$CVT_DTB (count.rl.v, string.rt.r, result.wl.r)
 ret-status.wlc.v = LIB$CVT_HTB (count.rl.v, string.rt.r, result.wl.r)
 ret-status.wlc.v = LIB$CVT_OTB (count.rl.v, string.rt.r, result.wl.r)

Arguments

 count
   Byte count of the input ASCII text string.
 string
   The input ASCII text string.
 result
   The longword result.
3 DATE_TIME
 Date and Time Returned as a String

Format

 ret-status.wlc.v = LIB$DATE_TIME (dst-str.wt.dx)

Arguments

 dst-str
   The destination string.
3 DAY
 Day Number Returned as a Longword Integer

Format

 ret-status.wlc.v = LIB$DAY (day-number.wl.r [,user-time.rq.r
                             [,day-time.wl.r]])

Arguments

 day-number
   The number of days since the system zero date.
 user-time
   A time in 100-nanosecond units.
 day-time
   The number of 10-millisecond units since midnight.
3 DECODE_FAULT
 Decode Instruction Stream During Fault

Format

 ret-status.wlc.v = LIB$DECODE_FAULT (signal-args.rlu.ra,
                  mechanism-args.rlu.ra, user-action.cx.dp
                  [, user-arg.rz.v [, instruction-definitions.rbu.ra]])

Arguments

 signal-args
   The signal arguments array which was passed to your condition
   handler.
 mechanism-args
   The mechanism arguments array which was passed to your
   condition handler.
 user-action
   A procedure which will be called by LIB$DECODE_FAULT to handle
   the exception.
 user-arg
   A value passed without interpretation to the user action
   procedure.
 instruction-definitions
   An array of bytes specifying instruction opcodes and operand
   definitions which are to replace or supplement the standard
   instruction definitions.
3 DEC_OVER
 Decimal Overflow Detection, Enable or Disable

Format

 old-setting.wlu.v = LIB$DEC_OVER (new-setting.rbu.r)

Arguments

 new-setting
   The new decimal overflow enable setting.
 old-setting
   The old decimal overflow enable setting (the previous contents
   of SF$W_PSW[PSW$V_DV] in the caller's frame).
3 DELETE_LOGICAL
 Delete Logical Name

Format

 ret-status.wlc.v = LIB$DELETE_LOGICAL (log-nam.rt.dx)

Arguments

 log-nam
   The logical name to be deleted.
3 DELETE_SYMBOL
 Delete CLI Symbol

Format

 ret-status.wlc.v = LIB$DELETE_SYMBOL (symbol.rt.dx [,tbl-ind.rl.r])

Arguments

 symbol
   The name of the symbol to be deleted.
 tbl-ind
   The indicator of which table contains the symbol to be deleted.
3 DIGIT_SEP
 Digit Separator Symbol

Format

 ret-status.wlc.v = LIB$DIGIT_SEP (digit-sep-str.wt.dx [,out-len.wwu.r])

Arguments

 digit-sep-str
   The digit separator string.
 out-len
   The number of characters written into digit-sep-str, not
   counting padding in the case of a fixed-length string.
3 DISABLE_CTRL
 Disable CLI Interception of Control Characters

Format

 ret-status.wlc.v = LIB$DISABLE_CTRL (disable-msk.rlu.r [,old-msk.wlu.r])

Arguments

 disable-msk
   A longword bit mask indicating for which control characters
   interception is to be disabled.
 old-msk
   The previous bit mask.
3 DOWN_SCROLL
 Down Scroll, Move Cursor Up One Line

Format

 ret-status.wlc.v = LIB$DOWN_SCROLL ()
 ret-status.wlc.v = SCR$DOWN_SCROLL ()
3 DO_COMMAND
 Execute Command

Format

 ret-status.wlc.v = LIB$DO_COMMAND (cmd-text.rt.dx)

Arguments

 cmd-text
   A character string containing the text of the command to be
   executed.
3 EDIV
 Extended-Precision Divide

Format

 ret-status.wlc.v = LIB$EDIV (divisor.rl.r, dividend.rq.r,
                              quotient.wl.r, remainder.wl.r)

Arguments

 divisor
   The longword integer divisor.
 dividend
   The quadword integer dividend.
 quotient
   The longword integer quotient.
 remainder
   The longword integer remainder.
3 EMODx
 Extended Multiply and Integerize Procedures

Format

 ret-status.wlc.v = LIB$EMODz (multiplier.rz.r, mult-ext.rb.r,
                               multiplicand.rz.r, int.wl.r, fract.wz.r)
 where z = F for F_floating, D for D_floating,
           G for G_floating, or H for H_floating.

Arguments

 multiplier
   The floating-point multiplier.
 mult-ext
   The left-justified multiplier-extension bits.
 multiplicand
   The floating-point multiplicand.
 int
   The integer portion of the result.
 fract
   The fractional portion of the result.
3 EMUL
 Extended-Precision Multiply

Format

 ret-status.wlc.v = LIB$EMUL (multiplier.rl.r, multiplicand.rl.r,
                              addend.rl.r, product.wq.r)

Arguments

 multiplier
   The longword integer multiplier.
 multiplicand
   The longword integer multiplicand.
 addend
   The longword integer addend.
 product
   The quadword integer product.
3 EMULATE
 Emulate Execution of VAX-11 Instructions

Format

 ret-status.wlc.v  = LIB$EMULATE (sig-args.ma.r, mch-args.ma.r)

Arguments

 sig-args
   The signal argument vector.
 mch-args
   The mechanism argument vector.
3 ENABLE_CTRL
 Enable CLI Interception of Control Characters

Format

 ret-status.wlc.v = LIB$ENABLE_CTRL (enable-msk.rlu.r [,old-msk.wlu.r])

Arguments

 enable-msk
   A longword bit mask indicating for which control characters
   interception is to be enabled.
 old-msk
   The previous bit mask.
3 ERASE_LINE
 Erase Line from Screen

Format

 ret-status.wlc.v = LIB$ERASE_LINE ([line-no.rw.r, col-no.rw.r])
 ret-status.wlc.v = SCR$ERASE_LINE ([line-no.rw.v, col-no.rw.v])

Arguments

 line-no
   The line number at which erasing begins.
 col-no
   The column number at which erasing begins.
3 ERASE_PAGE
 Erase Page from Screen

Format

 ret-status.wlc.v = LIB$ERASE_PAGE ([line-no.rw.r, col-no.rw.r])
 ret-status.wlc.v = SCR$ERASE_PAGE ([line-no.rw.v, col-no.rw.v])

Arguments

 line-no
   The line number at which erasing begins.
 col-no
   The column number at which erasing begins.
3 ESTABLISH
 Establish a Condition Handler

Format

 old-handler.flc.rp = LIB$ESTABLISH (new-handler.flc.rp)

Arguments

 new-handler
   Address of the routine to be set up as the condition handler.
 old-handler
   Previous contents of SF$A_HANDLER (longword 0) of the caller's
   stack frame.
3 EXTV
 Extract and Sign-Extend a Field

Format

 field.wlu.v = LIB$EXTV (pos.rl.r, size.rbu.r, base.ra.v)

Arguments

 pos
   The beginning bit position (relative to the base address).
 size
   The size of the bit field to be extracted.
 base
   The base address of the bit field to be extracted.
 field
   The field, sign-extended to a longword.
3 EXTZV
 Extract a Zero-Extended Field

Format

 field.wlu.v = LIB$EXTZV (pos.rl.r, size.rbu.r, base.ra.v)

Arguments

 pos
   The beginning bit position (relative to the base address).
 size
   The size of the bit field to be extracted.
 base
   The base address of the bit field to be extracted.
 field
   The field, zero-extended to a longword.
3 FFx
 Find First Clear or Set Bit

Format

 ret-status.wlc.v = LIB$FFC (start-pos.rl.r, size.rbu.r,
                             base.ra.r, find-pos.wl.r)
 ret-status.wlc.v = LIB$FFS (start-pos.rl.r, size.rbu.r,
                             base.ra.r,  find-pos.wl.r)

Arguments

 start-pos
   The start position relative to the base address.
 size
   The number of bits to be searched.
 base
   The base address of the bit field.
 find-pos
   The bit position relative to the base of the first bit in the
   desired state.
3 FILE_SCAN
 File Scan

Format

 ret-status.wlc.v = LIB$FILE_SCAN (fab.ra.r, success-rtn.flc.rp,
                                   error-rtn.flc.rp)

Arguments

 fab
   Address of a FAB with a pointer to a valid NAM block.
 success-rtn
   The file-scan success action routine.
 error-rtn
   The file-scan error action routine.
3 FIND_FILE
 Find File

Format

 ret-status.wlc.v = LIB$FIND_FILE (file-name.rt.dx, result-name.mt.dx,
                                   context.ma.r [,default-name.rt.dx
                                   [,related-name.rt.dx]])

Arguments

 file-name
   The file name.
 result-name
   The resultant file name.
 context
   Zero or an address of an internal FAB/NAM buffer from a
   previous call to LIB$FIND_FILE.
 default-name
   The default file name.
 related-name
   The related file name.
3 FIXUP_FLT
 Fix Floating Reserved Operand

Format

 ret-status.wlc.v = LIB$FIXUP_FLT (sig-args.rl.ra, mch-args.rl.ra
                                   [,new-operand.rf.r])

Arguments

 sig-args
   The signal argument vector.
 mch-args
   The mechanism argument vector.
 new-operand
   An F_floating value to replace the reserved operand.
3 FLT_UNDER
 Floating-Point Underflow Detection

Format

 old-setting.wlu.v = LIB$FLT_UNDER (new-setting.rbu.r)

Arguments

 new-setting
   The new floating-point underflow enable setting.
 old-setting
   The old floating-point underflow enable setting (the previous
   contents of the SF$W_PSW[PSW$V_FU] in the caller's frame).
3 FREE_EF
 Free Event Flag

Format

 ret-status.wlc.v = LIB$FREE_EF (event-flag-num.rl.r)

Arguments

 event-flag-num
   The event flag number to be deallocated.
3 FREE_LUN
 Free Logical Unit Number

Format

 ret-status.wlc.v = LIB$FREE_LUN (log-unit-num.rl.r)

Arguments

 log-unit-num
   The logical unit number to be deallocated.
3 FREE_TIMER
 Free Timer Storage

Format

 ret-status.wlc.v = LIB$FREE_TIMER (handle-adr.ml.r)

Arguments

 handle-adr
   A pointer to the control block in which the times and counts
   are stored.
3 FREE_VM
 Free Virtual Memory from Program Region

Format

 ret-status.wlc.v = LIB$FREE_VM (num-bytes.rlu.r, base-adr.ra.r)

Arguments

 num-bytes
   The number of virtually contiguous bytes to be deallocated.
 base-adr
   The address of the first byte to be deallocated.
3 GET_COMMAND
 Get Line from SYS$COMMAND
 See LIB$GET_INPUT for the description of this procedure.
3 GET_COMMON
 Get String from Common

Format

 ret-status.wlc.v = LIB$GET_COMMON (dst-str.wt.dx [,chars-copied.ww.r])

Arguments

 dst-str
   The destination string.
 chars-copied
   The number of characters written into dst-str, not counting
   padding in the case of a fixed-length string.
3 GET_EF
 Get Event Flag

Format

 ret-status.wlc.v = LIB$GET_EF (event-flag-num.wl.r)

Arguments

 event-flag-num
   The number of the allocated local event flag, or -1 if none was
   available.
3 GET_FOREIGN
 Get Foreign Command Line

Format

 ret-status.wlc.v = LIB$GET_FOREIGN (get-str.wt.dx [,[user-prompt.rt.dx]
                              [, [out-len.ww.r] [, force-prompt.ml.r]]])

Arguments

 get-str
   The string to receive the command line.
 user-prompt
   A string to be used as a prompt for text if no command-line
   text is available.
 out-len
   The number of bytes written into get-str, not counting padding
   in the case of a fixed-length get-str.
 force-prompt
   A longword integer value which controls whether or not
   prompting is to be performed.
3 GET_INPUT
 Get Line from SYS$INPUT

Format

 ret-status.wlc.v = LIB$GET_INPUT (get-str.wt.dx [,prompt-str.rt.dx
                                   [,out-len.wwu.r]])
 ret-status.wlc.v = LIB$GET_COMMAND (get-str.wt.dx [,prompt-str.rt.dx
                                     [,out-len.wwu.r]])

Arguments

 get-str
   The input string.
 prompt-str
   The prompt message that is displayed on the controlling
   terminal.
 out-len
   The number of bytes written into get-str, not counting padding
   in the case of a fixed string.
3 GET_LUN
 Get Logical Unit Number

Format

 ret-status.wlc.v = LIB$GET_LUN (log-unit-num.wl.r)

Arguments

 log-unit-num
   The allocated logical unit or a -1 if none was available.
3 GET_SCREEN
 Get Text from Screen

Format

 ret-status.wlc.v = LIB$GET_SCREEN (input-text.wt.dx
                                  [,prompt-str.rt.dx [,out-len.wwu.r]])
 ret-status.wlc.v = SCR$GET_SCREEN (input-text.wt.dx
                                  [,prompt-str.rt.dx [,out-len.wwu.r]])

Arguments

 input-text
   The text copied from the screen.
 prompt-str
   A string that is displayed prior to accepting input from the
   user terminal.
 out-len
   The number of characters written into input-text, not counting
   padding in the case of a fixed-length string.
3 GET_SYMBOL
 Get Value of CLI Symbol

Format

 ret-status.wlc.v = LIB$GET_SYMBOL (symbol.rt.dx, ret-buf.wt.dx
                                    [, ret-len.ww.r [, tbl-ind.wl.r]])

Arguments

 symbol
   The name of the symbol to be searched for.
 ret-buf
   The value of the returned symbol.
 ret-len
   The length of the returned symbol.
 tbl-ind
   The indicator of which table contained the symbol.
3 GET_VM
 Get Virtual Memory in Program Region

Format

 ret-status.wlc.v = LIB$GET_VM (num-bytes.rlu.r, base-adr.wa.r)

Arguments

 num-bytes
   The number of virtually contiguous bytes to be allocated.
 base-adr
   The first virtual address of the newly allocated contiguous
   block of bytes.
3 ICHAR
 Integer from First Character of String

Format

 first-char-value.wlu.v = LIB$ICHAR (src-str.rt.dx)

Arguments

 src-str
   The source string.
 first-char-value
   The string's first character returned as an 8-bit ASCII value
   extended to a longword.
3 INDEX
 Index to Relative Position of Substring

Format

 index.wlu.v = LIB$INDEX (src-str.rt.dx, sub-str.rt.dx)
 index.wlu.v = LIB$MATCHC (sub-str.rt.dx, src-str.rt.dx)

Arguments

 src-str
   The source string to be searched.
 sub-str
   The substring to be found.
 index
   The relative position of the first character of the substring
   if found, or zero if not found.
3 INIT_TIMER
 Initialize Times and Counts

Format

 ret-status.wlc.v = LIB$INIT_TIMER ([handle-adr.ml.r])

Arguments

 handle-adr
   A pointer to a control block where the values of times and
   counts will be stored.
3 INSERT_TREE
 Insert Entry in a Balanced Binary Tree

Format

 ret-status.wlc.v = LIB$INSERT_TREE (treehead.ra.r, sym-str.rt.dx,
                  ctrl-flg.rl.r, compare-rtn.fzem.rp, alloc-rtn.fzem.rp,
                  newnode.wa.r [,user-data.ra.r])

Arguments

 treehead
   The address of the tree head for the binary tree.
 sym-str
   The key to be inserted.
 ctrl-flg
   The control flags.  compare-rtn
   A routine that is called implicitly by LIB$INSERT_TREE to
   compare a symbol with a node.
 ret-value
   The result of comparing sym-str with the current node.
   Ret-value is:  +----------+------------------------+
                  | negative | sym-str < current node |
                  | zero     | sym-str = current node |
                  | positive | sym-str > current node |
                  +----------+------------------------+
 alloc-rtn
   A routine that is called implicitly by LIB$INSERT_TREE to
   allocate virtual memory for a node.
 newnode
   The address of the location where the new key was inserted.
 user-data
   A pointer to the user data.
3 INSQHI
 Insert Entry at Head of Queue

Format

 ret-status.wlc.v = LIB$INSQHI (entry.mq.ra, header.mq.r
                                [,retry-cnt.rlu.r])

Arguments

 entry
   A quadword-aligned array that must be at least eight bytes long.
 header
   An aligned quadword.
 retry-cnt
   The retry count to be used in case of secondary interlock
   failure of the queue instruction in a processor-shared memory
   application.
3 INSQTI
 Insert Entry at Tail of Queue

Format

 ret-status.wlc.v = LIB$INSQTI (entry.mq.ra, header.mq.r
                                [,retry-cnt.rlu.r])

Arguments

 entry
   A quadword-aligned array that must be at least eight bytes long.
 header
   An aligned quadword.
 retry-cnt
   The retry count to be used in case of secondary interlock
   failure of the queue instruction in a processor-shared memory
   application.
3 INSV
 Insert a Variable Bit Field

Format

 CALL LIB$INSV (src.rl.r, pos.rl.r, size.rbu.r, base.wv.r)

Arguments

 src
   The source field to be inserted.
 pos
   The bit position relative to the base address where insertion
   of src is to begin.
 size
   The size of the bit field to be inserted.
 base
   The base address of the output field in which the source is to
   be inserted.
3 INT_OVER
 Integer Overflow Detection

Format

 old-setting.wlu.v = LIB$INT_OVER (new-setting.rbu.r)

Arguments

 new-setting
   The new integer overflow enable setting.
 old-setting
   The old integer overflow enable setting (the previous contents
   of SF$W_PSW[PSW$V_IV] in the caller's frame).
3 LEN
 Length of String Returned as Longword Value

Format

 str-len.wlu.v = LIB$LEN (src-str.rt.dx)

Arguments

 src-str
   The source string.
 str-len
   The length of the source string is extracted and zero-extended
   to 32 bits.
3 LOCC
 Locate a Character

Format

 index.wlu.v = LIB$LOCC (char-str.rt.dx, src-str.rt.dx)

Arguments

 char-str
   The character string for which to search.
 src-str
   The string to be searched.
 index
   The relative position from the start of src-str of the first
   equal character or zero if no match is found.
3 LOOKUP_KEY
 Look Up Keyword in Table

Format

 ret-status.wlc.v = LIB$LOOKUP_KEY (search-str.rt.dx, key-table.rlu.ra
                  [,key-value.wlu.r [,full-str.wt.dx [,out-len.ww.r]]])

Arguments

 search-str
   The search string.
 key-table
   The keyword table.
 key-value
   The keyword value.
 full-str
   The full keyword matched.
 out-len
   The number of characters in the keyword, independent of
   padding.
3 LOOKUP_TREE
 Look Up an Entry in a Balanced Binary Tree

Format

 ret-status.wlc.v = LIB$LOOKUP_TREE (treehead.ra.r, sym-str.rt.dx,
                                     compare-rtn.fzem.rp, newnode.wa.r)

Arguments

 treehead
   The address of the tree head for the binary tree.
 sym-str
   The key to be looked up in the binary tree.
 compare-rtn
   A routine that is called implicitly by LIB$LOOKUP_TREE to
   compare a symbol with a node.
 ret-value
   The result of comparing sym-str with the current node.
   Ret-value is:  +----------+------------------------+
                  | Negative | sym-str < current node |
                  | Zero     | sym-str = current node |
                  | Positive | sym-str > current node |
                  +----------+------------------------+
 newnode
   The address of the location where the new symbol was found.
3 LP_LINES
 Lines per Printer Page

Format

 page-len.wl.v = LIB$LP_LINES ( )

Arguments

 page-len
   The default number of lines on a physical printer page.
3 MATCHC
 Match Characters, Return Relative Position
 See LIB$INDEX for write-up of this procedure.
3 MATCH_COND
 Match Condition Values

Format

 index.wlu.v = LIB$MATCH_COND (cond-val.rlc.r, cond-val-i.rlc.r, ...)

Arguments

 cond-val
   The condition value to be matched.
 cond-val-i
   The condition value(s) to be compared to cond-val.
 index
   A zero, if no match found;  or i-1, for a match between the
   first argument and the ith argument.
3 MOVC3
 Move Characters

Format

 CALL LIB$MOVC3 (length.rwu.r, source.rz.r, dest.wz.r)

Arguments

 length
   The number of bytes to be moved from source to dest.
 source
   The item to move.
 dest
   The item to which source will be moved.
3 MOVC5
 Move Characters with Fill

Format

 CALL LIB$MOVC5 (src-len.rwu.r, source.rz.r, fill.rb.r, dst-len.rwu.r,
                 dest.wz.r)

Arguments

 src-len
   The length of source in bytes.
 source
   The item to move.
 fill
   The character used to pad source to the length of dest.
 dst-len
   The length of dest in bytes.
 dest
   The item to which source will be moved.
3 MOVTC
 Move Translated Characters

Format

 ret-status.wlc.v = LIB$MOVTC (src-str.rt.dx, fill-char.rt.dx,
                               trans-tbl.rt.dx, dst-str.wt.dx)

Arguments

 src-str
   The source string.
 fill-char
   The fill character.
 trans-tbl
   The translation table.
 dst-str
   The destination string.
3 MOVTUC
 Move Translated Until Character

Format

 stop-index.wlu.v = LIB$MOVTUC (src-str.rt.dx, stop-char.rt.dx,
                     trans-tbl.rt.dx, dst-str.wt.dx [,fill-char.rt.dx])

Arguments

 src-str
   The source string.
 stop-char
   The stop character.
 trans-tbl
   The translation table.
 dst-str
   The destination string.
 fill-char
   The fill character.
 stop-index
   The relative position in the source string of the character
   that is translated to the stop character.
3 POLYz
 Polynomial Procedures, Evaluation of

Format

 ret-status.wlc.v = LIB$POLYz (arg.rz.r, degree.rw.r, coeff.rz.ra,
                               result.wz.r)
 where  z = F for F_floating, D for D_floating,
            G for G_floating, or H for H_floating.

Arguments

 arg
   The argument in the polynomial.
 degree
   The highest numbered coefficient to participate in the
   evaluation.
 coeff
   An array of floating-point values.
 result
   The floating-point result of the calculation.
3 PUT_BUFFER
 Put Current Buffer to Screen or to Previous Buffer

Format

 ret-status.wlc.v = LIB$PUT_BUFFER ([old-buffer.rl.r])
 ret-status.wlc.v = SCR$PUT_BUFFER ([old-buffer.rl.r])

Arguments

 old-buffer
   Zero or the address of an area previously used as a screen
   buffer.
3 PUT_COMMON
 Put String to Common

Format

 ret-status.wlc.v = LIB$PUT_COMMON (src-str.rt.dx [,chars-copied.ww.r])

Arguments

 src-str
   The source string.
 chars-copied
   The number of characters copied.
3 PUT_LINE
 Put Text to Screen in Line Mode

Format

 ret-status.wlc.v = LIB$PUT_LINE (text.rt.dx [,line-adv.rw.r]
                                  [,flags.rw.r])
 ret-status.wlc.v = SCR$PUT_LINE (text.rt.dx [,line-adv.rw.v]
                                  [,flags.rw.v])

Arguments

 text
   A character string that is written to the screen.
 line-adv
   The number of lines to advance after displaying the text.
 flags
   The attributes bit vector.
3 PUT_OUTPUT
 Put Line to SYS$OUTPUT

Format

 ret-status.wlc.v = LIB$PUT_OUTPUT (msg-str.rt.dx)

Arguments

 msg-str
   The message string.
3 PUT_SCREEN
 Put Text to Screen

Format

 ret-status.wlc.v = LIB$PUT_SCREEN (text.rt.dx
                            [,line-no.rw.r, col-no.rw.r] [,flags.rw.r])
 ret-status.wlc.v = SCR$PUT_SCREEN (text.rt.dx
                            [,line-no.rw.v, col-no.rw.v] [,flags.rw.v])

Arguments

 text
   A character string that is written to the screen.
 line-no
   The line number where the text begins.
 col-no
   The column number where the text begins.
 flags
   The attributes bit vector.
3 RADIX_POINT
 Radix Point Symbol

Format

 ret-status.wlc.v = LIB$RADIX_POINT (radix-point-str.wt.dx
                                     [,out-len.wwu.r])

Arguments

 radix-point-str
   The radix point string.
 out-len
   The number of characters written into radix-point-str, not
   counting padding in the case of a fixed-length string.
3 REMQHI
 Remove Entry from Head of Queue

Format

 ret-status.wlc.v = LIB$REMQHI (header.mq.r, remque-adr.wl.r
                                [,retry-cnt.rlu.r])

Arguments

 header
   An aligned quadword.
 remque-adr
   The address of the removed entry.
 retry-cnt
   The retry count to be used in case of secondary interlock
   failure of the queue instruction in a processor-shared memory
   application.
3 REMQTI
 Remove Entry from Tail of Queue

Format

 ret-status.wlc.v = LIB$REMQTI (header.mq.r, remque-adr.wl.r
                                [,retry-cnt.rlu.r])

Arguments

 header
   An aligned quadword.
 remque-adr
   The address of the removed entry.
 retry-cnt
   The retry count to be used in case of secondary interlock
   failure of the queue instruction in a processor-shared memory
   application.
3 RESERVE_EF
 Reserve Event Flag

Format

 ret-status.wlc.v = LIB$RESERVE_EF (event-flag-num.rl.r)

Arguments

 event-flag-num
   The event flag number to be allocated.
3 REVERT
 Revert to the Handler of the Procedure Activator

Format

 old-handler.wa.v = LIB$REVERT ( )

Arguments

 old-handler
   Previous contents of SF$A_HANDLER (longword 0) of the caller's
   stack frame.
3 RUN_PROGRAM
 Run New Program

Format

 ret-status.wlc.v = LIB$RUN_PROGRAM (pgm-name.rt.dx)

Arguments

 pgm-name
   A character string containing the file name of the program to
   be run in place of the current program.
3 SCANC
 Scan For Characters, Return Relative Position

Format

 index.wlu.v = LIB$SCANC (src-str.rt.dx, table-arr.rbu.ra, mask.rbu.r)

Arguments

 src-str
   The source string.
 table-arr
   The unsigned byte array.
 mask
   The mask.
 index
   The relative position in the source string of the character
   that terminated the operation or the value zero.
3 SCOPY_xxxx
 Strings, Copy Source to Destination

Format

 Source by descriptor:

    ret-status.wlc.v = LIB$SCOPY_DXDX (src-str.rt.dx, dst-str.wt.dx)
        JSB entry point:  LIB$SCOPY_DXDX6

 Source by reference:

    ret-status.wlc.v = LIB$SCOPY_R_DX (src-len.rwu.r, src-adr.rt.r,
                                       dst-str.wt.dx)
        JSB entry point:  LIB$SCOPY_R_DX6

Arguments

 dst-str (R1 for LIB$SCOPY_DXDX6, or R2 for LIB$SCOPY_R_DX6)
   The destination string.
 src-str (R0)
   The source string.
 src-len (R0<15:0>)
   The length of the source string.
 src-adr (R1)
   The source string.
3 SCREEN_INFO
 Screen Information Retrieval

Format

 ret-status.wlc.v = LIB$SCREEN_INFO (flags.wl.r [,dev-type.wb.r
                            [,line-width.ww.r [,lines-per-page.ww.r]]])
 ret-status.wlc.v = SCR$SCREEN_INFO (control-block.wl.r)

Arguments

 flags
   A bit map representing special terminal characteristics.
 dev-type
   The terminal type.
 line-width
   The width (in columns) for which the terminal is configured.
 lines-per-page
   The lines (per screen) for which the terminal is configured.
 control-block
   Nine bytes which correspond, in order, to the flags,
   line-width, lines-per-page, and dev-type parameters specified
   for LIB$SCREEN_INFO.
3 SET_BUFFER
 Set or Clear Screen Buffer Mode

Format

 ret-status.wlc.v = LIB$SET_BUFFER (buffer.mt.ds [,old-buffer.wl.r])
 ret-status.wlc.v = SCR$SET_BUFFER (buffer.mt.ds [,old-buffer.wl.r])

Arguments

 buffer
   A modifiable fixed-length string which is used as the buffer
   for storing characters that the other screen output procedures
   would normally send to the terminal without buffering until the
   next LIB$SET_BUFFER or LIB$PUT_BUFFER procedure call occurs.
 old-buffer
   The address of the previous buffer (if any).
3 SET_CURSOR
 Set Cursor to Character Position on Screen

Format

 ret-status.wlc.v = LIB$SET_CURSOR (line-no.rw.r, col-no.rw.r)
 ret-status.wlc.v = SCR$SET_CURSOR (line-no.rw.v, col-no.rw.v)

Arguments

 line-no
   The line number to which the cursor is moved.
 col-no
   The column number to which the cursor is moved.
3 SET_LOGICAL
 Set Logical Name

Format

 ret-status.wlc.v = LIB$SET_LOGICAL (log-nam.rt.dx, value.rt.dx)

Arguments

 log-nam
   The logical name to be defined or redefined.
 value
   The value to be given to the logical name.
3 SET_OUTPUT
 Set a Terminal or Screen Buffer for Output

Format

 ret-status.wlc.v = LIB$SET_OUTPUT (chan.rw.r [,file-spec.rt.dx
                [,user-routine.zem.rp [,user-arg.rl.r [,stream.wl.r]]]])
 ret-status.wlc.v = SCR$SET_OUTPUT (chan.rw.v [,file-spec.rt.dx
                [,user-routine.zem.rp [,user-arg.rl.r [,stream.wl.r]]]])

Arguments

 chan
   The channel or stream number.
 file-spec
   The output file specification.
 user-routine
   A user-supplied output routine.
 user-arg
   User-supplied argument for call to user-routine.
 stream
   Previous stream number.
3 SET_SCROLL
 Set Scrolling Region

Format

 ret-status.wlc.v = LIB$SET_SCROLL (start-line.rw.r, end-line.rw.r)
 ret-status.wlc.v = SCR$SET_SCROLL (start-line.rw.v, end-line.rw.v)

Arguments

 start-line
   The first line of the scrolling region.
 end-line
   The last line of the scrolling region.
3 SET_SYMBOL
 Set Value of CLI Symbol

Format

 ret-status.wlc.v = LIB$SET_SYMBOL (symbol.rt.dx, value.rt.dx
                                   [,tbl-ind.rl.r])

Arguments

 symbol
   The name of the symbol to be defined.
 value
   The value to be given to the symbol.
 tbl-ind
   An indicator of which table will contain the defined symbol.
3 SFREE1_DD
 Strings, Free One Dynamic

Format

 ret-status.wlc.v = LIB$SFREE1_DD (dsc-adr.mqu.r)
   JSB entry point: LIB$SFREE1_DD6

Arguments

 dsc-adr (R0)
   A dynamic descriptor which specifies the area to be
   deallocated.
3 SFREEN_DD
 Strings, Free n Dynamic

Format

 ret-status.wlc.v = LIB$SFREEN_DD (dsc-num.rlu.r, first-dsc.mqu.r)
   JSB entry point: LIB$SFREEN_DDR6

Arguments

 dsc-num (R0)
   The number of adjacent descriptors to be flagged as having no
   allocated area (DSC$A_POINTER = 0 and DSC$W_LENGTH = 0).
 first-dsc (R1)
   The first descriptor of an array of descriptors.
3 SGET1_DD
 Strings, Get One Dynamic

Format

 ret-status.wlc.v = LIB$SGET1_DD (len.rwu.r, str.mqu.r)
   JSB entry point: LIB$SGET1_DD_R6

Arguments

 len (R0<15:0>)
   The number of bytes to be allocated;  the amount of storage
   allocated may automatically be rounded up.
 str (R1)
   A dynamic string descriptor to which the area is to be
   allocated.
3 SHOW_TIMER
 Show Accumulated Times and Counts

Format

 ret-status.wlc.v = LIB$SHOW_TIMER ([[handle-adr.rl.r] [, [code.rl.r]
                          [, [action-rtn.flc.rp] [, [user-arg.rl.v]]]])

Arguments

 handle-adr
   A pointer to a block of storage.
 code
   A code specifying a particular statistic.
 action-rtn
   A function procedure to call.
 out-str
   A fixed-length string containing the statistics requested.
 user-arg
   A 32-bit value.
3 SHOW_VM
 Show Virtual Memory Statistics

Format

 ret-status.wlc.v = LIB$SHOW_VM ([code.rl.r] [,action-rtn.flc.rp]
                                 [,user-arg.xy.z])

Arguments

 code
   The code which specifies the particular statistic desired.
 action-rtn
   A function procedure to call.
 out-str
   The output string.
 user-arg
   A 32-bit value.
3 SIGNAL
 Signal Exception Condition

Format

 CALL LIB$SIGNAL (condition-value.rlc.v [,parameters.rl.v...])

Arguments

 condition-value
   A standard signal designating a VAX-11 32-bit condition value.
 parameters
   Additional FAO (formatted ASCII output) parameters for message.
3 SIG_TO_RET
 Signal Converted to a Return Status

Format

 ret-status.wlc.v = LIB$SIG_TO_RET  (sig-args.rl.ra, mch-args.rl.ra)

Arguments

 sig-args
   The signal arguments vector.
 mch-args
   The mechanism arguments vector.
3 SIM_TRAP
 Simulate Floating Trap

Format

 ret-status.wlc.v = LIB$SIM_TRAP (sig-args.ma.r, mch-args.ma.r)

Arguments

 sig-args
   The signal argument vector.
 mch-args
   The mechanism argument vector.
3 SKPC
 Skip Equal Characters

Format

 index.wlu.v = LIB$SKPC (char-str.rt.dx, src-str.rt.dx)

Arguments

 char-str
   The character string to be found.
 src-str
   The string to be searched.
 index
   The relative position in the source string of the first unequal
   character, or zero if none was found.
3 SPANC
 Skip Selected Characters

Format

 index.wlu.v = LIB$SPANC (src-str.rt.dx, table-arr.rbu.ra, mask.rbu.r)

Arguments

 src-str
   The source string.
 table-arr
   An unsigned byte array.
 mask
   The mask.
 index
   The relative position in the source string of the character
   that terminated the operation or zero.
3 SPAWN
 Spawn a Subprocess

Format

 ret-status.wlc.v = LIB$SPAWN ([command-string.rt.dx]
                [, [input-file.rt.dx] [, [output-file.rt.dx]
                [, [flags.rlu.r] [, [process-name.rt.dx]
                [, [process-id.wlu.r] [, [completion-status.wlc.r]
                [, [completion-efn.rbu.r] [, [completion-astadr.szem.r]
                [, [completion-astprm.rz.v] ]]]]]]]]])

Arguments

 command-string
   A CLI command to be executed by the spawned subprocess.
 input-file
   An equivalence name to be associated with the logical name
   SYS$INPUT in the logical name table for the subprocess.
 output-file
   An equivalence name to be associated with the logical names
   SYS$OUTPUT and SYS$ERROR in the logical name table for the
   subprocess.
 flags
   A longword of flag bits designating optional behavior.
 process-name
   The name desired for the subprocess.
 process-id
   The longword to receive the process identification of the
   spawned subprocess.
 completion-status
   The longword to receive the subprocess' final completion
   status.
 completion-efn
   The number of a local event flag to be set when the spawned
   subprocess completes.
 completion-astadr
   The entry mask of a procedure to be called by means of an AST
   when the subprocess completes.
 completion-astprm
   A value to be passed to the procedure specified by
   completion-astadr as an AST routine parameter.
3 STAT_TIMER
 Statistics, Return Accumulated Times and Counts

Format

 ret-status.wlc.v = LIB$STAT_TIMER (code.rl.r, value.wx.r
                                    [,handle-adr.rl.r])

Arguments

 code
   The code which specifies the statistic to be returned.
 value
   The result.
 handle-adr
   A pointer to a block of storage.
3 STAT_VM
 Statistics, Return Virtual Memory Statistic

Format

 ret-status.wlc.v = LIB$STAT_VM (code.rl.r, value.wl.r)

Arguments

 code
   The code that specifies which statistic is to be returned.
 value
   The result.
3 STOP
 Stop Execution via Signaling

Format

 CALL LIB$STOP (condition-value.rlc.v [,parameters.rl.v, ...])

Arguments

 condition-value
   A standard signal for a VAX-11 32-bit condition value.
 parameters
   Additional FAO parameters for message.
3 STOP_OUTPUT
 Stop Output to a Terminal or Screen Buffer

Format

 ret-status.wlc.v = LIB$STOP_OUTPUT (chan.rw.r)
 ret-status.wlc.v = SCR$STOP_OUTPUT (chan.rw.v)

Arguments

 chan
   The channel number to be deassigned.
3 SUBX
 Subtraction, Multiple Precision Binary
 See the description of LIB$ADDX.
3 SYS_ASCTIM
 System Service, $ASCTIM

Format

 ret-status.wlc.v = LIB$SYS_ASCTIM ([out-len.ww.r], dst-str.wt.dx,
                                    [user-time.rq.r], [cnv-flg.rlu.r])

Arguments

 out-len
   The number of bytes written into dst-str, not counting padding
   in the case of a fixed string.
 dst-str
   The destination string.
 user-time
   The value to be converted.
 cnv-flg
   The conversion indicator.
3 SYS_FAO
 System Service, $FAO

Format

 ret-status.wlc.v = LIB$SYS_FAO (ctr-str.rt.dx [,out-len.ww.r],
                             out-buf.wt.dx [,p1.xy.z ... [,pn.xy.z]])

Arguments

 ctr-str
   The ASCII control string.
 out-len
   The output string length.
 out-buf
   The fully formatted output string.
 p1 - pn
   Directive parameters contained in longwords.
3 SYS_FAOL
 System Service, $FAOL

Format

 ret-status.wlc. = LIB$SYS_FAOL (ctr-str.rt.dx [,out-len.ww.r],
                                 out-buf.wt.dx, prm-lst.ra.r)

Arguments

 ctr-str
   The ASCII control string.
 out-len
   The output string length.
 out-buf
   The fully formatted output string.
 prm-lst
   An array of longwords to be used as p1 through pn.
3 SYS_GETMSG
 System Service, $GETMSG

Format

 ret-status.wlc.v = LIB$SYS_GETMSG (msg-id.rl.r, [msg-len.ww.r],
                          dst-str.wt.dx [,flags.rl.r [,out-arr.wa.ra]])

Arguments

 msg-id
   The identification of the message to be retrieved.
 msg-len
   The number of characters written into dst-str, not counting
   padding in the case of a fixed-length string.
 dst-str
   The destination string.
 flags
   The flag bits for message content.
 out-arr
   A four-byte array to receive message-specific information.
3 SYS_TRNLOG
 System Service, $TRNLOG

Format

 ret-status.wlc.v = LIB$SYS_TRNLOG (logical-name.rt.dx, [dst-len.ww.r],
          dst-str.wt.dx [,table.wb.r [,acc-mode.wb.r [,dsb-msk.rbu.r]]])

Arguments

 logical-name
   The logical name string.
 dst-len
   The number of characters written into dst-str, not counting
   padding in the case of a fixed-length string.
 dst-str
   The destination string.
 table
   The logical name table number.
 acc-mode
   The access mode of entry (process table only).
 dsb-msk
   The table search disable mask.
3 TPARSE
 Table-Driven Finite-state Parser

Format

 ret-status.wlc.v = LIB$TPARSE (param-blk.mz.r, state-tbl.rz.r,
                                key-tbl.rz.r)

Arguments

 param-blk
   The LIB$TPARSE parameter block.
 state-tbl
   The starting state in the state table.
 key-tbl
   The keyword table.
3 TRAVERSE_TREE
 Traverse a Balanced Binary Tree

Format

 ret-status.wlc.v = LIB$TRAVERSE_TREE (currentnode.ra.r,
                                action-rtn.fzemlc.rp [,user-data.rl.r])

Arguments

 currentnode
   The address of the current node of the binary tree.
 action-rtn
   An action routine to be called for each node in the tree.
 user-data
   A pointer to the user data.
3 TRA_ASC_EBC
 Translate ASCII to EBCDIC

Format

 ret-status.wlc.v = LIB$TRA_ASC_EBC (src-str.rt.dx, dst-str.wbu.dx)

Arguments

 src-str
   The source (ASCII) string.
 dst-str
   The destination (EBCDIC) string.
3 TRA_EBC_ASC
 Translate EBCDIC to ASCII

Format

 ret-status.wlc.v = LIB$TRA_EBC_ASC (src-str.rbu.dx, dst-str.wt.dx)

Arguments

 src-str
   The source (EBCDIC) string.
 dst-str
   The destination (ASCII) string.
3 UP_SCROLL
 Up Scroll, Move Cursor Down One Line

Format

 ret-status.wlc.v = LIB$UP_SCROLL ()
 ret-status.wlc.v = SCR$UP_SCROLL ()
2 MTH$
 MTH$ Procedures

 All  MTH$ routines  return values in R0 or R0/R1 except those for
 which  the  values  cannot  fit  in  64 bits,  namely  D_complex,
 G_complex,  or  H_floating values.   The latter procedures return
 their  function  values via  the first  argument in  the argument
 list with  the nominal  argument list shifted one position to the
 right.

 Procedures  with JSB  entry points  accept a  single  argument in
 R0:Rm,  where m  = 0,1,1,  or 3 depending on the data type (F, D,
 G, or  H), and  return a  single value in R0:Rm.  When two values
 are  returned (for  example, MTH$SINCOS),  the second value is in
 R<m+1>:R<2*m+1>.
3 xACOSx
 Arc Cosine

Format

 degrees.wf.v = MTH$ACOSD (x.rf.r)      MTH$ACOSD_R4
 degrees.wd.v = MTH$DACOSD (x.rd.r)     MTH$DACOSD_R7
 degrees.wg.v = MTH$GACOSD (x.rg.r)     MTH$GACOSD_R7
 CALL MTH$HACOSD (degrees.wh.r, x.rh.r) MTH$HACOSD_R8

 radians.wf.v = MTH$ACOS (x.rf.r)       MTH$ACOS_R4
 radians.wd.v = MTH$DACOS (x.rd.r)      MTH$DACOS_R7
 radians.wg.v = MTH$GACOS (x.rg.r)      MTH$GACOS_R7
 CALL MTH$HACOS (radians.wh.r, x.rh.r)  MTH$HACOS_R8

Arguments

 x
   The cosine, x.
 degrees
   Angle in degrees:  0 to 180.
 radians
   Angle in radians:  0 to PI.
3 xASINx
 Arc Sine

Format

 degrees.wf.v = MTH$ASIND (x.rf.r)      MTH$ASIND_R4
 degrees.wd.v = MTH$DASIND (x.rd.r)     MTH$DASIND_R7
 degrees.wg.v = MTH$GASIND (x.rg.r)     MTH$GASIND_R7
 CALL MTH$HASIND (degrees.wh.r, x.rh.r) MTH$HASIND_R8

 radians.wf.v = MTH$ASIN (x.rf.r)       MTH$ASIN_R4
 radians.wd.v = MTH$DASIN (x.rd.r)      MTH$DASIN_R7
 radians.wg.v = MTH$GASIN (x.rg.r)      MTH$GASIN_R7
 CALL MTH$HASIN (radians.wh.r, x.rh.r)  MTH$HASIN_R8

Arguments

 x
   The sine, x.
 degrees
   Angle in degrees:  -90 to +90.
 radians
   Angle in radians:  -PI/2 to +PI/2.
3 xATANx
 Arc Tangent

Format

 degrees.wf.v = MTH$ATAND (x.rf.r)      MTH$ATAND_R4
 degrees.wd.v = MTH$DATAND (x.rd.r)     MTH$DATAND_R7
 degrees.wg.v = MTH$GATAND (x.rg.r)     MTH$GATAND_R7
 CALL MTH$HATAND (degrees.wh.r, x.rh.r) MTH$HATAND_R8

 radians.wf.v = MTH$ATAN (x.rf.r)       MTH$ATAN_R4
 radians.wd.v = MTH$DATAN (x.rd.r)      MTH$DATAN_R7
 radians.wg.v = MTH$GATAN (x.rg.r)      MTH$GATAN_R7
 CALL MTH$HATAN (radians.wh.r, x.rh.r)  MTH$HATAN_R8

Arguments

 x
   The tangent, x.
 degrees
   Angle in degrees:  -90 to +90.
 radians
   Angle in radians:  -PI/2 to +PI/2.
3 xATANx2
 Arc Tangent with Two Parameters

Format

 degrees.wf.v = MTH$ATAND2 (y.rf.r, x.rf.r)
 degrees.wd.v = MTH$DATAND2 (y.rd.r, x.rd.r)
 degrees.wg.v = MTH$GATAND2 (y.rg.r, x.rg.r)
 CALL MTH$HATAND2 (degrees.wh.r, y.rh.r, x.rh.r)

 radians.wf.v = MTH$ATAN2 (y.rf.r, x.rf.r)
 radians.wd.v = MTH$DATAN2 (y.rd.r, x.rd.r)
 radians.wg.v = MTH$GATAN2 (y.rg.r, x.rg.r)
 CALL MTH$HATAN2 (radians.wh.r, y.rh.r, x.rh.r)

Arguments

 y
   The dividend portion of the input parameter.
 x
   The divisor portion of the input parameter.
 degrees
   Angle in degrees.
 radians
   Angle in radians.
3 xATANH
 Arc Tangent, Hyperbolic

Format

 atanh.wf.v = MTH$ATANH (x.rf.r)
 atanh.wd.v = MTH$DATANH (x.rd.r)
 atanh.wg.v = MTH$GATANH (x.rg.r)
 CALL MTH$HATANH (atanh.wh.r, x.rh.r)

Arguments

 x
   The hyperbolic tangent, x.
 atanh
   The hyperbolic arc tangent of x.
3 CxABS
 Complex Absolute Value

Format

 absolute-value.wf.v = MTH$CABS (complex-number.rfc.r)
 CALL MTH$CDABS (absolute-value.wd.r, complex-number.rdc.r)
 CALL MTH$CGABS (absolute-value.wg.r, complex-number.rgc.r)

Arguments

 complex-number
   A complex number (r,i) where r and i are both floating-point
   values.
 absolute-value
   The absolute value of a complex number.
3 CxCOS
 Complex Cosine

Format

 complex-cosine.wfc.v = MTH$CCOS (complex-number.rfc.r)
 CALL MTH$CDCOS (complex-cosine.wdc.r, complex-number.rdc.r)
 CALL MTH$CGCOS (complex-cosine.wgc.r, complex-number.rgc.r)

Arguments

 complex-number
   A complex number (r,i) where r and i are floating-point
   numbers.
 complex-cosine
   The complex cosine of the complex input number.
3 CxEXP
 Complex Exponential

Format

 complex-exp.wfc.v = MTH$CEXP (x.rfc.r)
 CALL MTH$CDEXP (complex-exp.wdc.r, x.rdc.r)
 CALL MTH$CGEXP (complex-exp.wgc.r, x.wgc.r)

Arguments

 x
   The input complex number (r,i) where both r and i are
   floating-point numbers.
 complex-exp
   Complex exponential of the complex input number.
3 CxLOG
 Complex Natural Logarithm

Format

 complex-natlog.wfc.v = MTH$CLOG (arg.rfc.r)
 CALL MTH$CDLOG (complex-natlog.wdc.r, arg.rdc.r)
 CALL MTH$CGLOG (complex-natlog.wgc.r, arg.rgc.r)

Arguments

 arg
   The complex number(r,i), where r and i are floating-point
   numbers.
 complex-natlog
   Natural logarithm of the complex number.
3 xCMPLX
 Complex Number Made From Floating-Point

Format

 complx.wfc.v = MTH$CMPLX (real-part.rf.r, imag-part.rf.r)
 CALL MTH$DCMPLX (complx.wdc.r, real-part.rd.r, imag-part.rd.r)
 CALL MTH$GCMPLX (complx.wgc.r, real-part.rg.r, imag-part.rg.r)

Arguments

 real-part
   The floating-point value to become the real part of a complex
   number.
 imag-part
   The floating-point value to become the imaginary part of a
   complex number.
 complx
   The floating complex value of a complex number.
3 xCONJG
 Conjugate of a Complex Number

Format

 complex-conjugate.wfc.v = MTH$CONJG (complex-number.rfc.r)
 CALL MTH$DCONJG (complex-conjugate.wdc.r, complex-number.rdc.r)
 CALL MTH$GCONJG (complex-conjugate.wgc.r, complex-number.rgc.r)

Arguments

 complex-number
   A complex number (r,i), where r and i are floating-point
   numbers.
 complex-conjugate
   The complex value (r,-i) expressed in floating-point notation.
3 xCOSx
 Cosine

Format

 cosine.wf.v = MTH$COSD (d.rf.r)        MTH$COSD_R4
 cosine.wd.v = MTH$DCOSD (d.rd.r)       MTH$DCOSD_R7
 cosine.wg.v = MTH$GCOSD (d.rg.r)       MTH$GCOSD_R7
 CALL MTH$HCOSD (cosine.wh.r, d.rh.r)   MTH$HCOSD_R5

 cosine.wf.v = MTH$COS (r.rf.r) MTH$COS_R4
 cosine.wd.v = MTH$DCOS (r.rd.r)        MTH$DCOS_R7
 cosine.wg.v = MTH$GCOS (r.rg.r)        MTH$GCOS_R7
 CALL MTH$HCOS (cosine.wh.r, r.rh.r)    MTH$HCOS_R5

Arguments

 d
   The angle in degrees.
 r
   The angle in radians.
 cosine
   Cosine of the angle.
3 xCOSH
 Cosine, Hyperbolic

Format

 cosh.wf.v = MTH$COSH (x.rf.r)
 cosh.wd.v = MTH$DCOSH (x.rd.r)
 cosh.wg.v = MTH$GCOSH (x.rg.r)
 CALL MTH$HCOSH (cosh.wh.r, x.rh.r)

Arguments

 x
   The argument, x.
 cosh
   The hyperbolic cosine of x.
3 CxSIN
 Complex Sine

Format

 complex-sine.wfc.v = MTH$CSIN (complex-number.rfc.r)
 CALL MTH$CDSIN (complex-sine.wdc.r, complex-number.rdc.r)
 CALL MTH$CGSIN (complex-sine.wgc.r, complex-number.rgc.r)

Arguments

 complex-number
   A complex number (r,i),
 complex-sine
   The complex sine of the complex number.
3 CxSQRT
 Complex Square Root

Format

 complex-sqrt.wfc.v = MTH$CSQRT(x.rfc.r)
 CALL MTH$CDSQRT (complex-sqrt.wdc.r, x.rdc.r)
 CALL MTH$CGSQRT (complex-sqrt.wgc.r, x.rgc.r)

Arguments

 x
   The complex number (r,i).
 complex-sqrt
   The complex square root of x.
3 CVT_x_x
 Convert One Double Precision Value

Format

 result.wg.v = MTH$CVT_D_G (source.rd.r)
 result.wd.v = MTH$CVT_G_D (source.rg.r)

Arguments

 source
   The input value to be converted.
 result
   The converted value returned in R0:R1.
3 CVT_xA_xA
 Convert an Array of Double Precision Values

Format

 CALL MTH$CVT_DA_GA (source.rd.ra, dest.wg.ra [,count.rl.r])
 CALL MTH$CVT_GA_DA (source.rg.ra, dest.wd.ra [,count.rl.r])

Arguments

 source
   The input array of values to be converted.
 result
   The array of converted values.
 count
   The number of array elements to be converted.
3 xEXP
 Exponential

Format

 exp.wf.v = MTH$EXP (x.rf.r)    MTH$EXP_R4
 exp.wd.v = MTH$DEXP (x.rd.r)   MTH$DEXP_R6
 exp.wg.v = MTH$GEXP (x.rg.r)   MTH$GEXP_R6
 CALL MTH$HEXP (exp.wh.r, x.rh.r)       MTH$HEXP_R6

Arguments

 x
   The input parameter, x.
 exp
   The exponential of x.
3 xIMAG
 Imaginary Part of a Complex Number

Format

 imag-part.wf.v = MTH$AIMAG (complex-number.rfc.r)
 imag-part.wd.v = MTH$DIMAG (complex-number.rdc.r)
 imag-part.wg.v = MTH$GIMAG (complex-number.rgc.r)

Arguments

 complex-number
   The input complex number.
 imag-part
   The imaginary part of the input complex number.
3 xLOG
 Logarithm, Natural

Format

 natlog.wf.v = MTH$ALOG (x.rf.r)        MTH$ALOG_R5
 natlog.wd.v = MTH$DLOG (x.rd.r)        MTH$DLOG_R8
 natlog.wg.v = MTH$GLOG (x.rg.r)        MTH$GLOG_R8
 CALL MTH$HLOG (natlog.wh.r, x.rh.r)    MTH$HLOG_R8

Arguments

 x
   The input value, x.
 natlog
   The natural logarithm of x.
3 xLOG10
 Logarithm, Common

Format

 log10.wf.v = MTH$ALOG10 (x.rf.r)       MTH$ALOG10_R5
 log10.wd.v = MTH$DLOG10 (x.rd.r)       MTH$DLOG10_R8
 log10.wg.v = MTH$GLOG10 (x.rg.r)       MTH$GLOG10_R8
 CALL MTH$HLOG10 (log10.wh.r, x.rh.r)   MTH$HLOG10_R8

Arguments

 x
   The input value, x.
 log10
   The common logarithm of x.
3 xLOG2
 Logarithm, Base Two

Format

 log2.wf.v = MTH$ALOG2 (x.rf.r)
 log2.wd.v = MTH$DLOG2 (x.rd.r)
 log2.wg.v = MTH$GLOG2 (x.rg.r)
 CALL MTH$HLOG2 (log2.wh.r, x.rh.r)

Arguments

 x
   The input value, x.
 log2
   The base two logarithm of x.
3 RANDOM
 Random Number Generator, Uniformly Distributed

Format

 result.wf.v = MTH$RANDOM (seed.mlu.r)

Arguments

 seed
   An unsigned longword containing the integer seed.
 result
   The F_floating random number.
3 xREAL
 Real Part of a Complex Number

Format

 real-part.wf.v = MTH$REAL (complex-number.rfc.r)
 real-part.wd.v = MTH$DREAL (complex-number.rdc.r)
 real-part.wg.v = MTH$GREAL (complex-number.rgc.r)

Arguments

 complex-number
   The complex number.
 real-part
   The real part of the complex number.
3 xSINx
 Sine

Format

 sine.wf.v = MTH$SIND (d.rf.r)  MTH$SIND_R4
 sine.wd.v = MTH$DSIND (d.rd.r) MTH$DSIND_R7
 sine.wg.v = MTH$GSIND (d.rg.r) MTH$GSIND_R7
 CALL MTH$HSIND (sine.wh.r, d.rh.r)     MTH$HSIND_R5

 sine.wf.v = MTH$SIN (r.rf.r)   MTH$SIN_R4
 sine.wd.v = MTH$DSIN (r.rd.r)  MTH$DSIN_R7
 sine.wg.v = MTH$GSIN (r.rg.r)  MTH$GSIN_R7
 CALL MTH$HSIN (sine.wh.r, r.rh.r)      MTH$HSIN_R5

Arguments

 d
   The angle in degrees.
 r
   The angle in radians.
 sine
   The sine of the angle.
3 xSINCOSx
 Sine and Cosine

Format

 CALL MTH$SINCOSD (d.rf.r, sine.wf.r, cosine.wf.r)
      MTH$SINCOSD_R5
 CALL MTH$DSINCOSD (d.rd.r, sine.wd.r, cosine.wd.r)
      MTH$DSINCOSD_R7
 CALL MTH$GSINCOSD (d.rg.r, sine.wg.r, cosine.wg.r)
      MTH$GSINCOSD_R7
 CALL MTH$HSINCOSD (d.rh.r, sine.wh.r, cosine.wh.r)
      MTH$HSINCOSD_R7

 CALL MTH$SINCOS (r.rf.r, sine.wf.r, cosine.wf.r)
      MTH$SINCOS_R5
 CALL MTH$DSINCOS (r.rd.r, sine.wd.r, cosine.wd.r)
      MTH$DSINCOS_R7
 CALL MTH$GSINCOS (r.rg.r, sine.wg.r, cosine.wg.r)
      MTH$GSINCOS_R7
 CALL MTH$HSINCOS (r.rh.r, sine.wh.r, cosine.wh.r)
      MTH$HSINCOS_R7

Arguments

 d (R0:Rm, where m = 0,1,1, or 3 for F, D, G, or H_floating)
   The angle in degrees.
 r (R0:Rm)
   The angle in radians.
 sine (R0:Rm)
   The sine of the angle.
 cosine (R<m+1>:R<2*m+1>)
   The cosine of the angle.
3 xSINH
 Sine, Hyperbolic

Format

 sinh.wf.v = MTH$SINH (x.rf.r)
 sinh.wd.v = MTH$DSINH (x.rd.r)
 sinh.wg.v = MTH$GSINH (x.rg.r)
 CALL MTH$HSINH (sinh.wh.r, x.rh.r)

Arguments

 x
   The argument, x.
 sinh
   The hyperbolic sine of x.
3 xSQRT
 Square Root

Format

 sqrt.wf.v = MTH$SQRT (x.rf.r)  MTH$SQRT_R3
 sqrt.wd.v = MTH$DSQRT (x.rd.r) MTH$DSQRT_R5
 sqrt.wg.v = MTH$GSQRT (x.rg.r) MTH$GSQRT_R5
 CALL MTH$HSQRT (sqrt.wh.r, x.rh.r)     MTH$HSQRT_R8

Arguments

 x
   The input parameter, x.
 sqrt
   The square root of x.
3 xTANx
 Tangent

Format

 tangent.wf.v = MTH$TAND (d.rf.r)       MTH$TAND_R4
 tangent.wd.v = MTH$DTAND (d.rd.r)      MTH$DTAND_R7
 tangent.wg.v = MTH$GTAND (d.rg.r)      MTH$GTAND_R7
 CALL MTH$HTAND (tangent.wh.r, d.rh.r)  MTH$HTAND_R5

 tangent.wf.v = MTH$TAN (r.rf.r)        MTH$TAN_R4
 tangent.wd.v = MTH$DTAN (r.rd.r)       MTH$DTAN_R7
 tangent.wg.v = MTH$GTAN (r.rg.r)       MTH$GTAN_R7
 CALL MTH$HTAN (tangent.wh.r, r.rh.r)   MTH$HTAN_R5

Arguments

 d
   The angle in degrees.
 r
   The angle in radians.
 tangent
   The tangent of the angle.
3 xTANH
 Tangent, Hyperbolic

Format

 tanh.wf.v = MTH$TANH (x.rf.r)
 tanh.wd.v = MTH$DTANH (x.rd.r)
 tanh.wg.v = MTH$GTANH (x.rg.r)
 CALL MTH$HTANH (tanh.wh.r, x.rh.r)

Arguments

 x
   The argument, x.
 tanh
   The hyperbolic tangent of x.
2 OTS$
 OTS$ Procedures
3 CVT_L_TB
 Convert Longword to Text (Binary)

Format

 ret-status.wlc.v = OTS$CVT_L_TB (value.rz.r, out-str.wt.ds
                                 [,int-digits.rl.v [,value-size.rl.v]])

Arguments

 value
   The unsigned integer value to be converted.
 out-str
   The ASCII text string.
 int-digits
   The minimum number of digits to be generated.
 value-size
   The size of the value in bytes.
3 CVT_L_TI
 Convert Longword to Text (Signed Integer)

Format

 ret-status.wlc.v = OTS$CVT_L_TI (value.rz.r, out-str.wt.ds
                  [,int-digits.rl.v [,value-size.rl.v [,flags.rlu.v]]])
 ret-status.wlc.v = FOR$CNV_OUT_I (value.rl.v, out-str.wt.ds)

Arguments

 value
   The signed integer value to be converted to text.
 out-str
   The ASCII text string.
 int-digits
   The minimum number of digits to be generated.
 value-size
   The number of bytes occupied by the value to be converted to text.
 flags
   The caller-supplied flags,
3 CVT_L_TL
 Convert Longword to Text (Logical)

Format

 ret-status.wlc.v = OTS$CVT_L_TL (value.rl.r, out-str.wt.ds)
 ret-status.wlc.v = FOR$CNV_OUT_L (value.rl.v, out-str.wt.ds)

Arguments

 value
   The input value to be converted to text.
 out-str
   The ASCII text string.
3 CVT_L_TO
 Convert Longword to Text (Octal)

Format

 ret-status.wlc.v = OTS$CVT_L_TO (value.rz.r, out-str.wt.ds
                                [,int-digits.rl.v [,value-size.rl.v]])
 ret-status.wlc.v = FOR$CNV_OUT_O (value.rl.v, out-str.wt.ds)

Arguments

 value
   The integer value to be converted.
 out-str
   The ASCII text string.
 int-digits
   The minimum number of digits to be generated.
 value-size
   The size of value in bytes.
3 CVT_L_TZ
 Convert Longword to Text (Hexadecimal)

Format

 ret-status.wlc.v = OTS$CVT_L_TZ (value.rz.r, out-str.wt.ds
                                 [,int-digits.rl.v [,value-size.rl.v]])
 ret-status.wlc.v = FOR$CNV_OUT_Z (value.rl.v, out-str.wt.ds)

Arguments

 value
   The integer value to be converted.
 out-str
   The ASCII text string.
 int-digits
   The minimum number of digits to be generated.
 value-size
   The size of value in bytes.
3 CVT_TB_L
 Convert Text (Binary) to Longword

Format

 ret-status.wlc.v = OTS$CVT_TB_L (inp-str.rt.dx1, value.wz.r
                                  [,value-size.rl.v [,flags.rlu.v]])

Arguments

 inp-str
   The input string (fixed-length, dynamic, or varying).
 value
   The integer result of the conversion.
 value-size
   The number of bytes that the value will occupy.
 flags
   The caller-supplied flags,
3 CVT_TI_L
 Convert Text (Signed Integer) to Longword

Format

 ret-status.wlc.v = OTS$CVT_TI_L (inp-str.rt.dx1, value.wz.r
                                  [,value-size.rl.v [,flags.rlu.v]])

Arguments

 inp-str
   The input string.
 value
   A signed byte, word, or longword integer value, depending on
   value-size.
 value-size
   The number of bytes value will occupy.
 flags
   The caller-supplied flags,
3 CVT_TL_L
 Convert Text (Logical) to Longword

Format

 ret-status.wlc.v = OTS$CVT_TL_L (inp-str.rt.dx1, value.wz.r
                                  [,value-size.rl.v])

Arguments

 inp-str
   The input string.
 value
   The integer result of the conversion.
 value-size
   The number of bytes the result will occupy.
3 CVT_TO_L
 Convert Text (Octal) to Longword

Format

 ret-status.wlc.v = OTS$CVT_TO_L (inp-str.rt.dx1, value.wz.r
                                  [,value-size.rl.v [,flags.rlu.v]])

Arguments

 inp-str
   The input string.
 value
   The result of the conversion.
 value-size
   The number of bytes that value will occupy.
 flags
   The caller-supplied flags,
3 CVT_TZ_L
 Convert Text (Hexadecimal) to Longword

Format

 ret-status.wlc.v = OTS$CVT_TZ_L (inp-str.rt.dx1, value.wz.r
                                  [,value-size.rl.v [,flags.rlu.v]])

Arguments

 inp-str
   The input string.
 value
   The result of the conversion.
 value-size
   The number of bytes that value will occupy.
 flags
   The caller-supplied flags,
3 CVT_T_z
 Convert Text to Floating

Format

 ret-status.wlc.v = OTS$CVT_T_z (inp-str.rt.dx1, value.wz.r
             [,digits-in-fract.rlu.v [,scale-factor.rl.v [,flags.rlu.v
             [,ext-bits.ww.r]]]])
 where z is D for D_floating, F for F_floating,
            G for G_floating or H for H_floating.

Arguments

 inp-str
   The input string.
 value
   The floating-point result of the conversion.
 digits-in-fract
   The number of digits in the fraction if no decimal point is in
   the input string.
 scale-factor
   The scale factor.
 flags
   The caller-supplied flags,
 ext-bits
   The extra precision bits.
3 DIVCx
 Complex Division

Format

 complex-quotient.wfc.v = OTS$DIVC (dividend.rfc.v, divisor.rfc.v)
 complex-quotient.wdc.v = OTS$DIVCD_R3 (dividend.rdc.v, divisor.rdc.v)
 complex-quotient.wgc.v = OTS$DIVCG_R3 (dividend.rgc.v, divisor.rgc.v)

Arguments

 complex-quotient
   For F_floating, the complex value is returned in R0:R1.  For
   D_floating and G_floating, the complex value is returned in
   R0:R3.
 dividend, divisor
   The complex values of the dividend and divisor.
3 MULCx
 Complex Multiplication

Format

 product.wdc.v = OTS$MULCD_R3 (multiplier.rdc.v, multiplicand.rdc.v)
 product.wgc.v = OTS$MULCG_R3 (multiplier.rgc.v, multiplicand.rgc.v)

Arguments

 multiplier
   The multiplier.
 multiplicand
   The multiplicand.
 product
   D_complex or G_complex value returned in registers R0:R3.
3 POWCxCx
 Complex Exponentiation with a Complex Floating-Point Power

Format

 result.wfc.v = OTS$POWCC (base.rfc.v, exponent.rfc.v)
 result.wdc.v = OTS$POWCDCD_R3 (base.rdc.v, exponent.rdc.v)
 result.wgc.v = OTS$POWCGCG_R3 (base.rgc.v, exponent.rgc.v)

    In each format, the result, base, and exponent are of the same
    data type.

Arguments

 base
   F_complex (C), D_complex (CD), or G_complex (CG) base.
 exponent
   F_complex (C), D_complex (CD), or G_complex (CG) exponent.
 result
   F_complex, D_complex, or G_complex result.
3 POWCxJ
 Complex Exponentiation with a Signed Longword Integer Power

Format

 result.wfc.v = OTS$POWCJ (base.rfc.v, exponent.rl.v)
 result.wdc.v = OTS$POWCDJ_R3 (base.rdc.v, exponent.rl.v)
 result.wgc.v = OTS$POWCGJ_R3 (base.rgc.v, exponent.rl.v)

    In each format, the result and base are of the same data type.

Arguments

 base
   F_complex (C), D_complex (CD), or G_complex (CG) base.
 exponent
   Signed longword integer exponent.
 result
   F_complex, D_complex, or G_complex result.
3 POWDx
 Exponentiation, D_floating Base

Format

 result.wd.v = OTS$POWDD (base.rd.v, exponent.rd.v)
 result.wd.v = OTS$POWDJ (base.rd.v, exponent.rl.v)
 result.wd.v = OTS$POWDR (base.rd.v, exponent.rf.v)

Arguments

 base
   D_floating (D) base.
 exponent
   D_floating (D), signed longword (J), or F_floating (R)
   exponent.
 result
   The D_floating result.
3 POWGx
 Exponentiation, G_floating Base

Format

 result.wg.v = OTS$POWGG (base.rg.v, exponent.rg.v)
 result.wg.v = OTS$POWGJ (base.rg.v, exponent.rl.v)

Arguments

 base
   G_floating (G) base.
 exponent
   G_floating (G) or signed longword (J) exponent.
 result
   The G_floating result.
3 POWHx
 Exponentiation, H_floating Base

Format

 result.wh.v = OTS$POWHH_R3 (base.rh.v, exponent.rh.v)
 result.wh.v = OTS$POWHJ_R3 (base.rh.v, exponent.rl.v)

Arguments

 base
   H_floating (H) base.
 exponent
   H_floating (H) or signed longword (J) exponent.
 result
   The H_floating result.
3 POWII
 Exponentiation, Word Base

Format

 result.ww.v = OTS$POWII (base.rw.v, exponent.rw.v)

Arguments

 base
   Word base.
 exponent
   Word exponent.
 result
   The word result.
3 POWJJ
 Exponentiation, Longword Base

Format

 result.wl.v = OTS$POWJJ (base.rl.v, exponent.rl.v)

Arguments

 base
   Signed longword base.
 exponent
   Signed longword exponent.
 result
   The longword result.
3 POWRx
 Exponentiation, F_floating Base

Format

 result.wd.v = OTS$POWRD (base.rf.v, exponent.rd.v)
 result.wf.v = OTS$POWRJ (base.rf.v, exponent.rl.v)
 result.wf.v = OTS$POWRR (base.rf.v, exponent.rf.v)

Arguments

 base
   F_floating (R) base.
 exponent
   D_floating (D), signed longword (J), or F_floating (R) exponent.
 result
   The D_floating or F_floating result.
3 SCOPY_xxxx
 Strings, Copy a Source String to a Destination String

Format

 Source by descriptor:

  ret-status.wlc.v = OTS$SCOPY_DXDX (src-str.rt.dx, dst-str.wt.dx)
     JSB entry point: unmoved-src.wlu.v  = OTS$SCOPY_DXDX6

 Source by reference:

  ret-status.wlc.v = OTS$SCOPY_R_DX (src-len.rwu.v, src-adr.ra.v,
                                     dst-str.wt.dx)
     JSB entry point: unmoved-src.wlu.v = OTS$SCOPY_R_DX6

Arguments

 dst-str (R1 for OTS$SCOPY_DXDX6, R2 for OTS$SCOPY_R_DX)
   The destination string.
 src-str (R0)
   The source string.
 unmoved-src (R0)
   The number of unmoved source string bytes.
 src-len (R0<15:0>)
   The length of the source string.
 src-adr (R1)
   The address of the source string.
3 SFREE1_DD
 Strings, Free One Dynamic

Format

 CALL OTS$SFREE1_DD (dyn-dsc.mqu.r)
    JSB entry point: OTS$SFREE1_DD6

Arguments

 dyn-dsc (R0)
   A dynamic string descriptor.
3 SFREEN_DD
 Strings, Free n Dynamic

Format

 CALL OTS$SFREEN_DD (dsc-num.rlu.v, first-dsc.mqu.r)
    JSB entry point: OTS$SFREEN_DD6

Arguments

 dsc-num (R0)
   The number of adjacent descriptors to be flagged as having no
   allocated area (DSC$A_POINTER = 0 and DSC$W_LENGTH = 0) and to
   have their allocated areas returned to free storage.
 first-dsc (R1)
   The first string descriptor of an array of string descriptors.
3 SGET1_DD
 Strings, Get One Dynamic

Format

 CALL OTS$SGET1_DD (len.rwu.v, dyn-dsc.mqu.r)
     JSB entry point:    OTS$SGET1_DD_R6

Arguments

 len (R0<15:0>)
   The number of bytes to be allocated.
 dyn-dsc (R1)
   A dynamic string descriptor to which the area is to be allocated.



2 STR$
 STR$ Procedures
3 ADD
 Add Two Decimal Strings

Format

 ret-status.wlc.v = STR$ADD (asign.rv.r, aexp.rl.r, adigits.rnu.dx,
                             bsign.rv.r, bexp.rl.r, bdigits.rnu.dx,
                             csign.wl.r, cexp.wl.r, cdigits.wnu.dx)
Arguments

 asign
   The sign of the first operand.
 aexp
   The power of 10 by which the adigits have to be multiplied to
   get the absolute value of the first operand.
 adigits
   The first operand's numeric string.
 bsign
   The sign of the second operand.
 bexp
   The power of 10 by which the bdigits have to be multiplied to
   get the absolute value of the second operand.
 bdigits
   The second operand's numeric string.
 csign
   The sign of the result.
 cexp
   The power of 10 by which the cdigits have to be multiplied to
   get the absolute value of the result.
 cdigits
   The result's numeric string.
3 ANALYZE_SDESC
 Analyze String Descriptor

Format

 CALL STR$ANALYZE_SDESC (inp-dsc.rt.dx, len.ww.r, data-adr.wa.r)
    JSB entry:  STR$ANALYZE_SDESC_R1 (inp-dsc.rt.dx, len.ww.v,
                                      data-adr.wa.v)

Arguments

 inp-dsc (input in R0)
   The input descriptor.
 len (returned in R0)
   The length of the data.
 data-adr (returned in R1)
   The address of the data.
3 APPEND
 Append a String

Format

 ret-status.wlc.v = STR$APPEND (dst-str.wt.dx, src-str.rt.dx)

Arguments

 dst-str
   The destination string.
 src-str
   The source string.
3 COMPARE
 Compare Two Strings

Format

 match.wlu.v = STR$COMPARE (src1-str.rt.dx, src2-str.rt.dx)

Arguments

 src1-str
   The first string.
 src2-str
   The second string.
 match
   The return function value:
3 COMPARE_EQL
 Compare Two Strings for Equality

Format

 match.wlu.v = STR$COMPARE_EQL (src1-str.rt.dx, src2-str.rt.dx)

Arguments

 src1-str
   The first string.
 src2-str
   The second string.
 match
   The return function value.
3 CONCAT
 Concatenate Two or More Strings

Format

 ret-status.wlc.v = STR$CONCAT (dst-str.wt.dx, src1-str.rt.dx,
                  src2-str.rt.dx [,src3-str.rt.dx ... ,srcn-str.rt.dx])

Arguments

 dst-str
   The destination string.
 srcn-str
   The nth source string.
3 COPY_xx
 Copy a Source String to a Destination String

Format

 Source by descriptor:

  ret-status.wlc.v = STR$COPY_DX (dst-str.wt.dx, src-str.rt.dx)
      JSB entry point:  STR$COPY_DX_R8

 Source by reference:

  ret-status.wlc.v = STR$COPY_R (dst-str.wt.dx, src-len.rwu.r,
                                src-adr.ra.r)
      JSB entry point: STR$COPY_R_R8

Arguments

 dst-str (R0)
   The destination string.
 src-str (R1)
   The source string.
 src-len (R1<15:0>)
   The length of the source string.
 src-adr (R2)
   The address of the source string.
3 DIVIDE
 Divide Two Decimal Strings

Format

 ret-status.wlc.v = STR$DIVIDE (asign.rv.r, aexp.rl.r, adigits.rnu.dx,
                                bsign.rv.r, bexp.rl.r, bdigits.rnu.dx,
                                tot-digits.rl.r, rnd-trunc.rv.r,
                                csign.wl.r, cexp.wl.r, cdigits.wnu.dx)

Arguments

 asign
   The sign of the first operand.
 aexp
   The power of 10 by which the adigits have to be multiplied to
   get the absolute value of the first operand.
 adigits
   The first operand's numeric string.
 bsign
   The sign of the second operand.
 bexp
   The power of 10 by which the bdigits have to be multiplied to
   get the absolute value of the second operand.
 bdigits
   The second operand's numeric string.
 tot-digits
   The number of digits to the right of the decimal point.
 rnd-trunc
   An indicator of whether the result is to be rounded or
   truncated;  zero means truncate, one means round.
 csign
   The sign of the result.
 cexp
   The power of 10 by which the cdigits have to be multiplied to
   get the absolute value of the result.
 cdigits
   The result's numeric string.
3 DUPL_CHAR
 Duplicate Character n Times

Format

 ret-status.wlc.v = STR$DUPL_CHAR (dst-str.wt.dx
                                   [,length.rl.r [,char.rbu.r]])
    JSB entry point:  STR$DUPL_CHARR8

Arguments

 dst-str (R0)
   The destination string.
 length (R1)
   The number of times char will be duplicated.
 char (R2<8:0>)
   The ASCII character to be duplicated.
3 FREE1_DX
 Free One Dynamic String

Format

 ret-status.wlc.v = STR$FREE1_DX (dsc-adr.mqu.r)
         JSB entry point:  STR$FREE1_DX_R4

Arguments

 dsc-adr
   A dynamic string descriptor.
3 GET1_DX
 Get One Dynamic String

Format

 ret-status.wlc.v = STR$GET1_DX (len.rwu.r, str.mqu.r)
    JSB entry point:  STR$GET1_DX_R4

Arguments

 len (R0<15:0>)
   The unsigned number of bytes to be allocated.
 str (R1)
   A dynamic string descriptor to which the area is to be allocated.
3 LEFT
 Extract a Substring of a String
 See the description of STR$POS_EXTR.
3 LEN_EXTR
 Extract a Substring of a String
 See the description of STR$POS_EXTR.
3 MUL
 Multiply Two Decimal Strings

Format

 ret-status.wlc.v = STR$MUL (asign.rv.r, aexp.rl.r, adigits.rnu.dx,
                             bsign.rv.r, bexp.rl.r, bdigits.rnu.dx,
                             csign.wl.r, cexp.wl.r, cdigits.wnu.dx)

Arguments

 asign
   The sign of the first operand.
 aexp
   The power of 10 by which the adigits have to be multiplied to
   get the absolute value of the first operand.
 adigits
   The first operand's numeric string.
 bsign
   The sign of the second operand.
 bexp
   The power of 10 by which the bdigits have to be multiplied to
   get the absolute value of the second operand.
 bdigits
   The second operand's numeric string.
 csign
   The sign of the result.
 cexp
   The power of 10 by which the cdigits have to be multiplied to
   get the absolute value of the result.
 cdigits
   The result's numeric string.
3 POSITION
 Return Relative Position of Substring

Format

 index.wlu.v = STR$POSITION (src-str.rt.dx, sub-str.rt.dx
                             [,start-pos.rl.r])
    JSB entry point: STR$POSITION_R6

Arguments

 src-str (R0)
   The source string to be searched.
 sub-str (R1)
   The substring to be found.
 start-pos (R2)
   The relative starting position in the source string to begin
   the search.
 index
   The relative position of the first character of the substring
   if found, or zero if not found.  Passed by immediate value.
3 POS_EXTR
 Extract a Substring of a String

Format

 ret-status.wlc.v = STR$LEN_EXTR (dst-str.wt.dx, src-str.rt.dx,
                                  start-pos.rl.r, length.rl.r)
    JSB entry point:  STR$LEN_EXTR_R8
 ret-status.wlc.v = STR$POS_EXTR (dst-str.wt.dx, src-str.rt.dx,
                                  start-pos.rl.r, end-pos.rl.r)
    JSB entry point:  STR$POS_EXTR_R8
 ret-status.wlc.v = STR$LEFT (dst-str.wt.dx, src-str.rt.dx,
                              end-pos.rl.r)
    JSB entry point:  STR$LEFT_R8
 ret-status.wlc.v = STR$RIGHT (dst-str.wt.dx, src-str.rt.dx,
                               start-pos.rl.r)
    JSB entry point:  STR$RIGHT_R8

Arguments

 dst-str (R0)
   The destination string.
 src-str (R1)
   The source string.
 start-pos (R2)
   The relative starting position in the source string.
 end-pos (R3 for STR$POS_EXTR_R8, R2 for STR$LEFT_R8)
   The relative ending position in the source string.
 length (R3)
   The number of characters to be copied to the destination string.
3 PREFIX
 Prefix a String

Format

 ret-status.wlc.v = STR$PREFIX (dst-str.wt.dx, src-str.rt.dx)

Arguments

 dst-str
   The destination string (dynamic or varying).
 src-str
   The source string.
3 RECIP
 Reciprocal of a Decimal String

Format

 ret-status.wlc.v = STR$RECIP (asign.rv.r, aexp.rl.r, adigits.rnu.dx,
                               bsign.rv.r, bexp.rl.r, bdigits.rnu.dx,
                               csign.wl.r, cexp.wl.r, cdigits.wnu.dx)

Arguments

 asign
   The sign of the first operand.
 aexp
   The power of 10 by which the adigits have to be multiplied to
   get the absolute value of the first operand.
 adigits
   The first operand's numeric string.
 bsign
   The sign of the second operand.
 bexp
   The power of 10 by which the bdigits have to be multiplied to
   get the absolute value of the second operand.
 bdigits
   The second operand's numeric string.
 csign
   The sign of the result.
 cexp
   The power of 10 by which the cdigits have to be multiplied to
   get the absolute value of the result.
 cdigits
   The result's numeric string.
3 REPLACE
 Replace a Substring

Format

 ret-status.wlc.v = STR$REPLACE (dst-str.wt.dx, src-str.rt.dx,
                          start-pos.rl.r, end-pos.rl.r, rpl-str.rt.dx)
    JSB entry point:  STR$REPLACE_R8

Arguments

 dst-str (R0)
   The destination string.
 src-str (R1)
   The source string.
 start-pos (R2)
   The relative starting position in the source string of the
   substring to be replaced.
 end-pos (R3)
   The relative ending position in the source string of the
   substring to be replaced.
 rpl-str (R4)
   The replacement string.
3 RIGHT
 Extract a Substring of a String
 See the description of STR$POS_EXTR.
3 ROUND
 Round or Truncate a Decimal String

Format

 ret-status.wlc.v = STR$ROUND (places.rl.r, trunc-flg.rv.r,
                               asign.rv.r, aexp.rl.r, adigits.rnu.dx,
                               csign.wl.r, cexp.wl.r, cdigits.wnu.dx)

Arguments

 places
   The maximum number of decimal digits to retain in the result.
 trunc-flg
   The function flag;  zero means round, one means truncate.
 asign
   The sign of the first operand.
 aexp
   The power of 10 by which the adigits have to be multiplied to
   get the absolute value of the first operand.
 adigits
   The first operand's numeric string.
 csign
   The sign of the result.
 cexp
   The power of 10 by which the cdigits have to be multiplied to
   get the absolute value of the result.
 cdigits
   The result's numeric string.
3 TRANSLATE
 Translate Matched Characters

Format

 ret-status.wlc.v = STR$TRANSLATE (dst-str.wt.dx, src-str.rt.dx,
                                   trans-tbl.rt.dx, match-str.rt.dx)

Arguments

 dst-str
   The destination string.
 src-str
   The source string.
 trans-tbl
   The translate string.
 match-str
   The match string.
3 TRIM
 Trim Trailing Blanks and Tabs

Format

 ret-status.wlc.v = STR$TRIM (dst-str.wt.dx, src-str.rt.dx
                              [,out-len.wwu.r])

Arguments

 dst-str
   The destination string.
 src-str
   The source string.
 out-len
   The number of bytes written into dst-str, not counting padding
   in the case of a fixed-length string.
3 UPCASE
 Uppercase, Convert String to All Uppercase Characters

Format

 ret-status.wlc.v = STR$UPCASE (dst-str.wt.dx, src-str.rt.dx)

Arguments

 dst-str
   The destination string.
 src-str
   The source string.
