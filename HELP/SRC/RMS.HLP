1 RMS
 Record Management Services.

  VAX-11 Record  Management Services  (VAX-11 RMS) are generalized
  routines that  assist user  programs in  processing and managing
  files and records within files.  VAX-11 RMS provides transparent
  network  processing between  DECnet/VAX nodes.  VAX-11  RMS also
  includes a  set  of macro  instructions  that  you  can  use  to
  initialize control blocks and call VAX-11 RMS services.

  Also, see the VAX-11 Record Management Services Reference Manual.
2 FAB
File Access Block

 The  File  Access  Block  (FAB) is  a  user  control  block  that
 describes  a file.   The  FAB is  used with file-processing macro
 instructions which manipulate the file as a whole.

 The $FAB macro allocates and initializes storage for a FAB:

label: $FAB

  ALQ = allocation-qty            FOP = file-options: <value>
  BKS = bucket-size               FSZ = header-size
  BLS = block-size                GBC = global buffer count
  CTX = user-value                MRN = max-rec-number
  DEQ = extension-qty             MRS = max-rec-size
  DNA = default-filespec-address  NAM = nam-address
  DNM = <filespec>                ORG = file-organization
  DNS = default-filespec-size     RAT = record-attributes
  FAC = file access: <value>      RFM = record-format: <value>
  FNA = filespec-address          RTV = window-size
  FNM = <filespec>                SHR = file-sharing: <value>
  FNS = filespec-size             XAB = xab-address
3 FAC
 File access modes.  You specify all operations that your program
 will perform:

   BIO - block I/O
   BRO - block or record I/O
   DEL - $DELETE service
   GET - $FIND/$GET services
   PUT - $PUT service
   UPD - $UPDATE service
   TRN - $TRUNCATE service
3 FOP
 File options.  You specify any that are required:

   CBT - contiguous-best-try    RWC - rewind on close
   CIF - create-if              RWO - rewind on open
   CTG - contiguous             SCF - submit command file
   DFW - deferred write         SPL - spool on close
   DLT - delete on close        SQO - sequential operation only
   MXV - maximize version       SUP - supersede
   NAM - NAM-block input        TEF - truncate at end-of-file
   NEF - not at end-of-file     TMD - temporary file, delete
   NFS - non-file-structured    TMP - temporary file
   OFP - output file parse      UFO - user-file-open
   POS - current position       WCK - write-check
   RCK - read-check
3 ORG
 File organization. You must specify one of:

   SEQ - sequential (default)
   REL - relative
   IDX - indexed
3 RAT
 Record attributes.  You may specify:

   BLK - records do not span blocks

  and/or one of the following carriage control attributes:

   CR  - single-space records
   FTN - FORTRAN carriage control
   PRN - print file format
3 RFM
 Record format.  You specify one of:

   FIX   - fixed-length records
   STM   - Stream (valid only for sequential org)
   STMCR - CR stream (valid only for sequential org)
   STMLF - LF stream (valid only for sequential org)
   VAR   - variable-length records (default)
   VFC   - variable-length records with fixed control area
   UDF   - undefined format
3 SHR
 File  sharing  options.  You  specify what operations other users
 may perform on the  file while sharing  access to  the file.  You
 may specify:

   DEL - $DELETE service
   GET - $FIND/$GET services
   PUT - $PUT service
   UPD - $UPDATE service
   MSE - multi-stream access
   NIL - no access
   UPI - user-provided interlock
3 Non-Initializable-fields
 The following FAB fields  cannot be initialized.  They are either
 statically initialized, or VAX-11 RMS sets them for you.

   BID - block ID (FAB$C_BID)
   BLN - block length (FAB$C_BLN)
   DEV - device characteristics
   IFI - internal file identifier
   SDC - secondary device characterictics
   STS - completion status code
   STV - completion status value
2 RAB
Record Access Block

 The  Record Access  Block (RAB)  is user control block describing
 the records within a file. The RAB is used with record-processing
 macro  instructions that  operate on individual  records. The RAB
 defines the  logical record  being accessed and the attributes of
 that record.

 The $RAB macro allocates and initializes the storage for a RAB:

label: $RAB

   BKT = bucket-code            PSZ = prompt-buffer-size
   CTX = user-value             RAC = record-access-mode
   FAB = fab-address            RBF = record-buffer-address
   KBF = key-buffer-address     RHB = header-buffer-address
   KRF = key-number             ROP = record-options: <value>
   KSZ = key-size               RSZ = record-size
   MBC = blocks                 TMO = seconds
   MBF = buffers                UBF = user-buffer-address
   PBF = prompt-buffer-address  USZ = user-buffer-size
3 RAC
 Record access mode.  You must specify one of:

   SEQ - sequential access (default)
   KEY - random access by key value
   RFA - random access by record's file address (RFA)
3 ROP
 Record options.  You may specify:

   ASY - asynchronous operation   PTA - purge type-ahead
   BIO - block I/O access         RAH - read-ahead
   CCO - cancel control-O         REA - lock record for read only
   CVT - convert to uppercase     RLK - allow readers to locked record
   EOF - position to end-of-file  RNE - read no echo
   FDL - fast record deletion     RNF - read no filter
   KGE - key greater or equal     RRL - read regardless of lock
   KGT - key greater              TMO - timeout
   LIM - key limit check          TPT - truncate on put
   LOA - use fill numbers         UIF - update-if
   LOC - locate mode              ULK - manual locking
   NLK - no lock                  WAT - wait for locked record
   NXR - non-existent record      WBH - write-behind
   PMT - prompt
3 Non-Initializable-Fields
 The following  fields  cannot be  initialized.  They  are  either
 statically initialized, or VAX-11 RMS sets them for you.

   BID - block ID (RAB$C_BID)
   BLN - block length (RAB$C_BLN)
   ISI - internal stream identifier
   RFA - record file address
   STS - completion status code
   STV - completion status value
2 NAM
Name Block

 The Name Block  (NAM) is  a user  control structure that contains
 additional  information  for  use  with  the  file  specification
 used  to identify  a file. The NAM block can be used  to optimize
 file open processing.

 The $NAM macro allocates and initializes storage for a NAM block:

label: $NAM

   ESA = expanded-filespec-address
   ESS = expanded-filespec-size
   RLF = related-file-nam-address
   RSA = result-filespec-address
   RSS = result-filespec-size
3 Non-Initializable-fields
 The following  fields  cannot be  initialized.   They  are either
 statically initialized, or VAX-11 RMS sets them for you.

   BID    - block ID (NAM$C_BID)
   BLN    - block length (NAM$C_BLN)
   DEV    - device specification:
      NAM$B_DEV - device specification length
      NAM$L_DEV - device specification address
   DID    - directory identification
   DIR    - directory specification:
      NAM$B_DIR - directory specification length
      NAM$L_DIR - directory specification address
   DVI    - device identification
   ESL    - expanded string length
   FID    - file identification
   FNB    - file name status
   NAME   - filname specification:
      NAM$B_NAME - filename specification length
      NAM$L_NAME - filename specification address
   NODE   - node-specification:
      NAM$B_NODE - node specification length
      NAM$L_NODE - node specification address
   RSL    - resultant string length
   TYPE   - filetype specification:
      NAM$B_TYPE - filetype specification length
      NAM$L_TYPE - filetype specification address
   VER    - version number specification:
      NAM$B_VER - version number specification length
      NAM$L_VER - version number specification address
   WCC    - wild card context
2 XAB
 The  Extended Attribute  Control  Blocks  (XABs) are user control
 structures  that provide  additional file  attribute  information
 beyond that contained in the FAB.

 This  information is  input to VAX-11 RMS for $CREATE, $CLOSE and
 $EXTEND  operations; and  is  returned to  you by  VAX-11 RMS for
 $OPEN and $DISPLAY operations.

 XABs  are  associated  with  a FAB  thru  the  XAB  parameter and
 additional XABs are chained together with the XAB NXT parameter.

 There are 7 XAB types:

   * Allocation Control XAB (ALL)       * Date and Time XAB (DAT)
   * File Header Characteristics (FHC)  * Indexed Key Definition (KEY)
   * File Protection (PRO)              * Revision Date and Time (RDT)
   * Summary (SUM)
3 ALL
Allocation Control XAB

 The Allocation Control  XAB is a user control structure that pro-
 vides extended control of file storage allocation and placement.

 The $XABALL macro allocates and initializes an Allocation Control
 XAB:

label: $XABALL

   AID = area-number
   ALN = alignment-option: <value>
   ALQ = allocation-qty
   AOP = allocation-options: <value>
   BKZ = bucket-size
   DEQ = extension-qty
   LOC = location-number
   NXT = xab-address
   RFI = <related-file-id>
   VOL = relative-volume-number
4 ALN
 Alignment option.  You may specify one of:

   ANY - any allocation (default)
   CYL - cylinder boundary
   LBN - allocate at specified LBN
   VBN - allocate at specified VBN
   RFI - allocate near related file
4 AOP
 Allocation options.  You may specify any of:

   CBT - contiguous best try
   CTG - contiguous
   HRD - fail if requested alignment impossible
   ONC - locate allocted space within a cylinder
4 Non-Initializable-fields
 The  following fields  cannot be  initialized.  They  are  either
 statically initialized, or VAX-11 RMS sets them for you.

   BLN - block length (XAB$C_ALLEN)
   COD - type code (XAB$C_ALL)
3 DAT
Date and Time XAB

 The Date and  Time XAB  is a user control structure that provides
 extended  control of  the date  and time  of a  file's  creation,
 revision, backup, and expiration.

 The $XABDAT allocates and initializes a Date and Time XAB:

label: $XABDAT

   EDT = expiration-date-time
   NXT = xab-address
4 Non-Initializable-fields
 The  following fields  cannot  be initialized.   They  are either
 statically initialized, set by VAX/VMS, or by VAX-11 RMS.

   BDT - backup-date-time
   BLN - block length (XAB$C_DATLEN)
   CDT - creation-date-time
   COD - type code (XAB$C_DAT)
   RDT - revision-date-time
   RVN - revision number
3 FHC
File Header Characteristics XAB

 The  File Header  Characteristics  XAB is a user control structure
 that returns file attribute information stored in the file header.

 The  $XABFHC   macro  allocates  and  initializes  a  File  Header
 Characteristics XAB:

label: $XABFHC

   NXT = xab-address
4 Non-Initializable-fields
 The  following  fields cannot  be  initialized.  They  are either
 statically  initialized,  set  at run-time,  or  VAX-11  RMS sets
 them for you.

   ATR - record attributes (same as FAB RAT)
   BKZ - bucket size (same as FAB BKZ)
   BLN - block length (XAB$C_FHCLEN)
   COD - type code (XAB$C_FHC)
   DXQ - default extension quantity (same as FAB DEQ)
   EBK - end of file block
   FFB - first free byte in EBK
   GBC - global buffer count
   HBK - highest virtual block
   HSZ - fixed length control header size (same as FAB FSZ)
   LRL - longest record length
   MRZ - maximum record size (same as FAB MRS)
   RFO - file organization and record format (combines FAB RFM and ORG)
   SBN - starting logical block number
   VERLIMIT - version number limit
3 KEY
Key Definition XAB

 The  Key Definition  XAB is a user control structure that defines
 the key  fields  of an  indexed file.   Each key  definition  XAB
 specifies one key of the file.

 The $XABKEY macro allocates and initializes a Key Definition XAB:

label: $XABKEY

   DAN    = data-area-number
   DFL    = data-fill-size
   DTP    = key-data-type: <value>
   FLG    = key options: <value>
   IAN    = index-area-number
   IFL    = index-fill-size
   KNM    = key-name-address
   LAN    = lowest-level-index-area-number
   NUL    = null-key-value
   NXT    = xab-address
   POS    = <pos0, ... pos7>
   REF    = key-of-reference-number
   SIZ    = <siz0, ... siz7>
   PROLOG = prologue-version
4 DTP
 Key data type.  You may specify one of the folowing:

   BN2 - 2 byte binary
   BN4 - 4 byte binary
   IN2 - 2 byte signed integer
   IN4 - 4 byte signed integer
   PAC - packed decimal
   STG - string
4 FLG
 Key options flag.  You may specify any of the following:

   CHG       - key value may change
   DAT_NCMPR - data record is not compressed
   DUP       - duplicate keys allowed
   IDX_NCMPR - index records are not compressed
   KEY_NCMPR - primary key is not compressed in data record
   NUL       - null key character present
4 Non-Initializable-fields
 The  following  fields cannot  be initialized.   They are  either
 statically  initialized,  set at  run-time, or  VAX-11  RMS  sets
 them for you.

   BLN - block length (XAB$C_KEYLEN)
   COD - type code (XAB$C_KEY)
   DBS - data bucket size
   DVB - first data bucket VBN
   IBS - index bucket size
   LVL - number of index levels
   MRL - minimum record length
   NSG - number of key segments
   TKS - total key size
3 PRO
File Protection XAB

 The  File  Protection  XAB  is  a  user  control  structure  that
 provides extended control of file ownership and file protection.

 The $XABPRO macro allocates and initializes a File Protection XAB:

label: $XABPRO

   MTACC = ANSI magtape accessibility character
   NXT   = xab-address
   PRO   = <system,group,owner,world>
   UIC   = <group,member>
4 Non-Initializable-fields
 The following  fields  cannot be  initialized.  They  are  either
 statically initialized or VAX-11 RMS sets them for you.

   BLN - block length (XAB$C_PROLEN)
   COD - type code (XAB$C_PRO)
3 RDT
Revision Date and Time XAB

 The  Revision Date and Time XAB is a user  control structure that
 provides extended control of a file's revision date and time.

 The $XABRDT  macro allocates  and initializes a Revision Date and
 Time XAB:

label: $XABRDT

   NXT = xab-address
4 Non-Initializable-fields
 The following  fields  cannot be  initialized.   They  are either
 statically  initialized,  set at  run-time,  or  VAX-11  RMS sets
 them for you.

   BLN - block length (XAB$C_RDTLEN)
   COD - type code (XAB$C_RDT)
   RDT - revision-date-time
   RVN - revision-number
3 SUM
Summary XAB
 The Summary  XAB is  a user  control  structure  that returns the
 number of keys, number of areas and prolog version of a file.

 The $XABSUM macro allocates and initializes a Summary XAB:

label: $XABSUM

   NXT = xab-address
4 Non-Initializable-fields
 The  following fields  cannot  be initialized.   They are  either
 statically  initialized, set at run-time, or VAX-11 RMS sets them
 for you.

   BLN - block length (XAB$C_SUMLEN)
   COD - type code (XAB$C_SUM)
   NOA - number of allocation areas
   NOK - number of keys defined
   PVN - prologue version number
2 $CLOSE
 The $CLOSE service closes a file and optionally deletes the file,
 prints the  file, or  submits the  file as  a batch job.  The I/O
 channel is deassigned and all system resources are deallocated.

 $CLOSE   FAB = fab-address
          ERR = error-routine-entry
          SUC = success-routine-entry

2 $CONNECT
 The $CONNECT  service associates  a record stream, specified by a
 RAB, with  an open  file, specified  by a FAB.   I/O buffers  and
 internal control  structures necessary for  record operations are
 allocated.

 $CONNECT  RAB = rab-address
           ERR = error-routine-entry
           SUC = success-routine-entry

2 $CREATE
 The $CREATE service creates and opens a new file according to the
 attributes specified in the FAB and optional XABs.

 $CREATE   FAB = fab-address
           ERR = error-routine-entry
           SUC = success-routine-entry

2 $DELETE
 The $DELETE service removes an existing record from a relative or
 indexed file.  The  record to be  modified must first be accessed
 by a $FIND  or $GET  service.  This  service is not permitted for
 sequential organization files.

 $DELETE  RAB = rab-address
          ERR = error-routine-entry
          SUC = success-routine-entry

2 $DISCONNECT
 The $DISCONNECT  service terminates the  association of a FAB and
 RAB.  All I/O buffers and internal structures required for record
 operations are deallocated.

 $DISCONNECT  RAB = rab-address
              ERR = error-routine-entry
              SUC = success-routine-entry

2 $DISPLAY
 The $DISPLAY  service  retrieves file  attribute information  and
 stores it in the FAB and optional XABs.

 $DISPLAY  FAB = fab-address
           ERR = error-routine-entry
           SUC = success-routine-entry

2 $ENTER
 The $ENTER service  inserts a file name in a directory.  The file
 is described by the associated NAM block.

 $ENTER  FAB = fab-address
         ERR = error-routine-entry
         SUC = success-routine-entry

2 $ERASE
 The $ERASE service deletes a file and removes the directory entry
 for the file.  The file's disk storage space is released.

 $ERASE  FAB = fab-address
         ERR = error-routine-entry
         SUC = success-routine-entry

2 $EXTEND
 The $EXTEND  service increases the amount of disk space allocated
 to a  file. This service is  used to increase a file's allocation
 before  the  space  is  required.   Typically,  VAX-11  RMS  will
 automatically  extend files  when a  $PUT  or  $UPDATE  operation
 exceeds the allocated space for the file.

 $EXTEND  FAB = fab-address
          ERR = error-routine-entry
          SUC = success-routine-entry

2 $FIND
 The $FIND service locates a specified record in a file, locks the
 record, and returns the record's file address (RFA).

 $FIND  RAB = rab-address
        ERR = error-routine-entry
        SUC = success-routine-entry

2 $FLUSH
 The $FLUSH  service writes  out all modified I/O buffers and file
 attributes associated with the  file.  This  ensures that  record
 activity up to this point is actually reflected in the file.

 $FLUSH  RAB = rab-address
         ERR = error-routine-entry
         SUC = success-routine-entry

2 $FREE
 The $FREE service unlocks all records that were previously locked.

 $FREE  RAB = rab-address
        ERR = error-routine-entry
        SUC = success-routine-entry

2 $GET
 The $GET service  retrieves a record from a file. The access mode
 may  be  sequential,  random  or  record's  file  address  (RFA).
 Sequential access  may be used for any file organization.  Random
 access is allowed for sequential files with fixed-length records,
 relative and  indexed files.   Record's file address (RFA) access
 may be used for any file organization on disk devices.

 $GET  RAB = rab-address
       ERR = error-routine-entry
       SUC = success-routine-entry

2 $NXTVOL
 The $NXTVOL  service causes the  termination of processing on the
 current magnetic tape volume.  Processing continues with the next
 volume of the tape volume set.

 $NXTVOL  RAB = rab-address
          ERR = error-routine-entry
          SUC = success-routine-entry

2 $OPEN
 The $OPEN  service opens an existing file.  File attribute infor-
 mation is returned in the FAB and optional XABs.

 $OPEN  FAB = fab-address
        ERR = error-routine-entry
        SUC = success-routine-entry

2 $PARSE
 The $PARSE  service analyzes the  file specification,  translates
 logical names, applies  file specification  defaults and fills in
 the associated NAM block.

 $PARSE  FAB = fab-address
         ERR = error-routine-entry
         SUC = success-routine-entry

2 $PUT
 The $PUT service  inserts a  new  record into a file.  Sequential
 files  typically  append  new  records to  the end  of the  file.
 Sequential files with fixed-length  records, relative and indexed
 files allow random insertion of records into the file.

 $PUT  RAB = rab-address
       ERR = error-routine-entry
       SUC = success-routine-entry

2 $READ
 The $READ service transfers data in block I/O mode from a file to
 a user  buffer in  your program.   Synchronous  and  asynchronous
 modes are supported as well as network support between DECnet/VAX
 systems.  End-of-file checking is performed for sequential files.

 $READ  RAB = rab-address
        ERR = error-routine-entry
        SUC = success-routine-entry

2 $RELEASE
 The $RELEASE service releases the  locked record specified by the
 RFA field of the RAB.  Other locked records are unaffected.

 $RELEASE  RAB = rab-address
           ERR = error-routine-entry
           SUC = success-routine-entry

2 $REMOVE
 The $REMOVE  service deletes  a file name entry from a directory.
 The file itself is unaffected.

 $REMOVE  FAB = fab-address
          ERR = error-routine-entry
          SUC = success-routine-entry

2 $RENAME
 The $RENAME  service changes  the name of  a file in a directory.
 Only the directory entries are affected, not the file itself.

 $RENAME  OLDFAB = fab-address
          ERR = error-routine-entry
          SUC = success-routine-entry
          NEWFAB = fab-address

2 $REWIND
 The $REWIND service sets the current context of the record stream
 to the first record in the file.  The current context for indexed
 files  is set  to retrieve  the lowest  key value  record on  the
 specified key of reference.   Implicit $FLUSH  and $FREE services
 are executed as well.

 $REWIND  RAB = rab-address
          ERR = error-routine-entry
          SUC = success-routine-entry

2 $SEARCH
 The  $SEARCH service  scans a  directory file  and fills in a NAM
 block with information  about the specific  file that matches the
 contents of  the expanded  string area. This  service is  used in
 conjunction  with the  $PARSE service  to provide  wildcard  file
 specification processing.

 $SEARCH  FAB = fab-address
          ERR = error-routine-entry
          SUC = success-routine-entry

2 $SPACE
 The  $SPACE  service  positions  a file  forward  or  backward  a
 specified  number of blocks,  in block I/O mode.  This service is
 intended primarily for use with magnetic tape files.

 $SPACE  RAB = rab-address
         ERR = error-routine-entry
         SUC = success-routine-entry

2 $TRUNCATE
 The   $TRUNCATE  service  removes  records  from  the  end  of  a
 sequential file.

 $TRUNCATE  RAB = rab-address
            ERR = error-routine-entry
            SUC = success-routine-entry

2 $UPDATE
 The $UPDATE  service modifies  the contents of an existing record
 in a file.  The record to be modified must first be accessed by a
 $FIND or  $GET service.   If alternate  key values  change  while
 updating a record in  an indexed  file, all affected indicies are
 updated automatically.

 $UPDATE  RAB = rab-address
          ERR = error-routine-entry
          SUC = success-routine-entry

2 $WAIT
 The $WAIT service stalls  your program waiting for the completion
 of an asynchronous record operation.

 $WAIT  RAB = rab-address
        ERR = error-routine-entry
        SUC = success-routine-entry

2 $WRITE
 The $WRITE  service transfers data  in block I/O mode from a data
 buffer in your program to a file.  For sequential files, the file
 is automatically extended, if necessary.

 $WRITE  RAB = rab-address
         ERR = error-routine-entry
         SUC = success-routine-entry


2 Utilities

 Many  file utility  operations are  supported  through the use of
 various VMS commands.  See the HELP for the following:

   * ANALYZE/RMS       - File characteristics analysis and display
   * CREATE/FDL        - File creation
   * CONVERT           - File conversion and file loading
   * CONVERT/RECLAIM   - File compression
   * EDIT/FDL          - FDL editor
   * FDL               - File definition language

 Also see the VAX-11 RMS Utilities Reference Manual.
