1 System
This help category contains a summary of each of the VMS system services.
2 $ADJSTK
Adjust Outer Mode Stack Pointer

 $ADJSTK  [acmode] ,[adjust] ,newadr

 acmode = access mode for which to adjust stack pointer

 adjust = 16-bit signed adjustment value

 newadr = address of longword to store updated value
2 $ADJWSL
Adjust Working Set Limit

 $ADJWSL  [pagcnt] ,[wsetlm]

 pagcnt = number of pages by which to adjust

 wsetlm = address of longword to receive new limit, or current
          limit if pagcnt not specified
2 $ALLOC
Allocate Device

 $ALLOC  devnam ,[phylen] ,[phybuf] ,[acmode]

 devnam = address of device name or logical name descriptor

 phylen = address of word to receive length of physical name

 phybuf = address of physical name buffer descriptor

 acmode = access mode associated with allocated device
2 $ASCEFC
Associate Common Event Flag Cluster

 $ASCEFC  efn ,name ,[prot] ,[perm]

 efn    = number of any event flag in the cluster

 name   = address of the text name string descriptor

 prot   = protection indicator for the cluster
           0 -> any process in group   1 -> only owner's UIC

 perm   = permanent indicator
           0 -> temporary    1 -> permanent
2 $ASCTIM
Convert Binary Time to ASCII String

 $ASCTIM  [timlen] ,timbuf ,[timadr] ,[cvtflg]

 timlen = address of a word to receive the number of characters
          written

 timbuf = address of a character string descriptor describing
          the buffer to receive the converted time

 timadr = address of the quadword containing the 64-bit time to
          be converted to ASCII.  If 0, use current time.

 cvtflg = conversion indicator
            0 -> full date and time   1 -> time only
2 $ASSIGN
Assign I/O Channel

 $ASSIGN  devnam ,chan ,[acmode] ,[mbxnam]

 devnam = address of device name or logical name descriptor

 chan   = address of word to receive channel number

 acmode = access mode associated with channel

 mbxnam = address of mailbox logical name descriptor, if
          mailbox associated with device
2 $BINTIM
Convert ASCII String to Binary Time

 $BINTIM  timbuf ,timadr

 timbuf = address of string descriptor for ASCII time string

 timadr = address of quadword to receive 64-bit binary time

 See HELP SPECIFY DATE_TIME for absolute and delta time formats.
2 $BRDCST
Broadcast

 $BRDCST  msgbuf ,[devnam], [flags], [carcon]

 msgbuf = address of message buffer string descriptor

 devnam = terminal device name string descriptor.  If 0, send
          message  to  all  terminals.   If name length is 0,
          send to all allocated terminals.

 flags  = positioning bit mask  (defined by $BRDCSTDEF macro)

           BRDCST$M_ANSI  BRDCST$M_BOTTOM  BRDCST$M_REFRESH

 carcon = carriage control specifier
2 $CANCEL
Cancel I/O on Channel

 $CANCEL  chan

 chan   = number of the channel on which I/O is to be canceled
2 $CANEXH
Cancel Exit Handler

 $CANEXH  [desblk]

 desblk = address of exit control block describing exit handler
          to be deleted.  If 0, delete all.
2 $CANTIM
Cancel Timer Request

 $CANTIM  [reqidt] ,[acmode]

 reqidt = request id for request to be canceled.  If 0, cancel all

 acmode = access mode of requests to be canceled
2 $CANWAK
Cancel Wakeup

 $CANWAK  [pidadr] ,[prcnam]

 pidadr = address of process id for which wakeups are to be canceled

 prcnam = address of process name string descriptor

2 $CLREF
Clear Event Flag

 $CLREF  efn

 efn    = number of event flag to be cleared
2 $CMEXEC
Change to Executive Mode

 $CMEXEC  routin ,[arglst]

 routin = address of the routine to be executed in executive mode

 arglst = address of argument list to be supplied to the routine
2 $CMKRNL
Change to Kernel Mode

 $CMKRNL  routin ,[arglst]

 routin = address of routine to be executed in kernel mode

 arglst = address of argument list to be supplied to routine
2 $CNTREG
Contract Program/Control Region

 $CNTREG  pagcnt ,[retadr] ,[acmode] ,[region]

 pagcnt = number of pages to be deleted from end of region

 retadr = address  of  2-longword  array  to  receive   virtual
          addresses of starting and ending page of deleted area

 acmode = access mode for which service is performed

 region = region indicator
           0 -> program (P0) region   1 -> control (P1) region
2 $CRELOG
Create Logical Name

 $CRELOG  [tblflg] ,lognam ,eqlnam ,[acmode]

 tblflg = logical name table number
            0 -> system (default)   1 -> group    2 -> process

 lognam = address of logical name string descriptor

 eqlnam = address of equivalence name string descriptor

 acmode = access mode for logical name (process table only)
2 $CREMBX
Create Mailbox and Assign Channel

 $CREMBX  [prmflg] ,chan ,[maxmsg] ,[bufquo] ,[promsk] ,[acmode] ,[lognam]

 prmflg = permanent flag
            0 -> temporary (default)   1 -> permanent

 chan   = address of word to receive channel

 maxmsg = maximum message size that may be received

 bufquo = number of bytes that can be used to buffer messages

 promsk = protection mask

 acmode = access mode of created mailbox

 lognam = address of logical name string descriptor for mailbox
2 $CREPRC
Create Process

 $CREPRC  [pidadr] ,[image] ,[input] ,[output] ,[error] ,[prvadr]
          ,[quota] ,[prcnam] ,[baspri] ,[uic] ,[mbxunt] ,[stsflg]

 pidadr = address of longword to return id of created process

 image  = address of string descriptor for image name

 input  = address of string descriptor for SYS$INPUT

 output = address of string descriptor for SYS$OUTPUT

 error  = address of string descriptor for SYS$ERROR

 prvadr = address of quadword privilege list

 quota  = address of quota list

 prcnam = address of string descriptor for process name

 baspri = base priority (0-31)

 uic    = user identification code.  If 0, create a subprocess

 mbxunt = mailbox unit for termination message

 stsflg = status and mode flag bits

      Bit  Meaning

       0   disable resource wait mode
       1   enable system service failure exception mode
       2   inhibit process swapping
       3   disable accounting messages
       4   batch process
       5   cause created process to hibernate
       6   allow login without authorization file check
       7   process is a network connect object
2 $CRETVA
Create Virtual Address Space

 $CRETVA  inadr ,[retadr] ,[acmode]

 inadr  = address of 2-longword array containing  starting  and
          ending virtual address of pages to be created

 retadr = address of a 2-longword array to receive starting and
          ending virtual address of pages actually created

 acmode = access  mode  for  the  new  pages   (protection   is
          read/write for acmode and more privileged modes)
2 $CRMPSC
Create and Map Section

 $CRMPSC  [inadr] ,[retadr] ,[acmode] ,[flags] ,[gsdnam] ,[ident]
          ,[relpag] ,[chan] ,[pagcnt] ,[vbn] ,[prot] ,[pfc]

 inadr  = address of 2-longword array containing  starting  and
          ending virtual addresses of space to map section

 retadr = address of  2-longword  array  to  receive  addresses
          actually mapped

 acmode = access mode of owner of pages

 flags  = section characteristics

   Flag         Meaning

   SEC$M_GBL    Global section
   SEC$M_CRF    Copy-on-reference pages
   SEC$M_DZRO   Demand zero pages
   SEC$M_EXPREG Find first available space
   SEC$M_PERM   Permanent section
   SEC$M_PFNMAP Physical page frame section
   SEC$M_SYSGBL System global section
   SEC$M_WRT    Read/write section

 gsdnam = address of global section name string descriptor

 ident  = address of quadword containing version id and match control

 relpag = relative page number within section

 chan   = number of channel on which file is accessed

 pagcnt = number of pages in section

 vbn    = virtual block  number  of  beginning  of  section  or
          physical page frame number of beginning of section

 prot   = protection mask

 pfc    = page fault cluster size
2 $DACEFC
Disassociate Common Event Flag Cluster

 $DACEFC  efn

 efn    = number of any event flag in the cluster
2 $DALLOC
Deallocate Device

 $DALLOC  [devnam] ,[acmode]

 devnam = address of device name descriptor.  If 0, deallocate all

 acmode = access mode associated with device
2 $DASSGN
Deassign I/O Channel

 $DASSGN  chan

 chan   = number of channel to be deassigned
2 $DCLAST
Declare AST

 $DCLAST  astadr ,[astprm] ,[acmode]

 astadr = address of entry mask of AST routine

 astprm = value to be passed to AST routine

 acmode = access mode for which the AST is to be declared
2 $DCLCMH
Declare Change Mode or Compatibility Mode Handler

 $DCLCMH  addres ,[prvhnd] ,[type]

 addres = address of handler

 prvhnd = address of longword to receive previous handler address

 type   = handler type indicator
           0 -> change mode (current mode)   1 -> compatibility mode
2 $DCLEXH
Declare Exit Handler

 $DCLEXH  desblk

 desblk = address of exit control block containing:

  +-------------------------------+
  |         forward link          |
  +-------------------------------+
  |     exit handler address      |
  +-------------------------------+
  |        argument count         |
  +-------------------------------+
  |   address to store reason     |
  +-------------------------------+
  |     additional arguments      |
  +--      for exit handler,    --+
  |            if any             |
  +-------------------------------+
2 $DELLOG
Delete Logical Name

 $DELLOG  [tblflg] ,[lognam] ,[acmode]

 tblflg = logical name table number
            0 -> system   1 -> group   2 -> process

 lognam = address of logical name string descriptor.  If 0,
          delete all names

 acmode = access mode of logical name (process table only)
2 $DELMBX
Delete Mailbox

 $DELMBX  chan

 chan   = channel number assigned to the mailbox
2 $DELPRC
Delete Process

 $DELPRC  [pidadr] ,[prcnam]

 pidadr = address of longword containing id of process to be deleted

 prcnam = address of string descriptor for process name to be deleted
2 $DELTVA
Delete Virtual Address Space

 $DELTVA  inadr ,[retadr] ,[acmode]

 inadr  = address of 2-longword array containing  starting  and
          ending virtual addresses of pages to delete

 retadr = address of 2-longword array to receive  starting  and
          ending addresses of pages actually deleted

 acmode = access mode for which service is performed
2 $DEQ
Dequeue Lock

 $DEQ  [lkid] ,[valblk] ,[acmode] ,[flags]

 lkid   = lock ID of the lock to be dequeued

 valblk = address of the lock value block

 acmode = access mode of the locks to be dequeued

 flags  = optional flags.

               LCK$M_DEQALL
2 $DGBLSC
Delete Global Section

 $DGBLSC  [flags] ,gsdnam ,[ident]

 flags  = type of section
            0 -> group section   SEC$M_SYSGBL -> system section

 gsdnam = address of global section name string descriptor

 ident  = address of quadword containing version id and match control
2 $DISMOU
Dismount Volume

 $DISMOU devnam ,[flags]

 devnam = address of device name string descriptor

 flags  = 32-bit status mask  selecting options for  the  dismount
          The  symbols  for  the flags are  defined by the $DMTDEF
          macro.

           Flag      Meaning

       DMT$M_NOUNLOAD   Do not unload the volume.

       DMT$M_UNIT       Dismount the specified device, rather
                        than the entire volume set.
2 $DLCEFC
Delete Common Event Flag Cluster

 $DLCEFC  name

 name   = address of cluster name string descriptor
2 $ENQ
Enqueue Lock Request

 $ENQ     [efn] ,lkmode ,lksb ,[flags] ,[resnam] ,[parid]
 ($ENQW)  ,[astadr] ,[astprm] ,[blkast] ,[acmode]

 efn    = event flag to be set at completion

 lkmode = type of lock mode requested.  Modes are:

           LCK$K_NLMODE null lock
           LCK$K_CRMODE concurrent read
           LCK$K_CWMODE concurrent write
           LCK$K_PRMODE protected read
           LCK$K_PWMODE protected write
           LCK$K_EXMODE exclusive lock

 lksb  = address of the lock status block

 flags = flags defining the characteristics of the lock.  These are:

           LCK$M_NOQUEUE
           LCK$M_SYNCSTS
           LCK$M_SYSTEM
           LCK$M_VALBLK
           LCK$M_CONVERT

 resnam = address of string descriptor of the resource name

 parid  = lock ID of the parent lock

 astadr = address of entry mask of AST routine

 astprm = value to be passed to AST routine

 blkast = address of entry mask of blocking AST routine

 acmode = Access mode to be associated with the lock
2 $EXIT
Exit image

 $EXIT    [code]

 code   = longword completion status
2 $EXPREG
Expand Program/Control Region

 $EXPREG  pagcnt ,[retadr] ,[acmode] ,[region]

 pagcnt = number of pages to add to end of specified region

 retadr = address  of  2-longword  array  to  receive   virtual
          addresses of starting and ending pages

 acmode = access mode of the new pages

 region = region indicator
           0 -> program (P0) region   1 -> control (P1) region
2 $FAO
Formatted ASCII Output

 $FAO     ctrstr ,[outlen] ,outbuf ,[p1] ,[p2]...[pn]

 ctrstr = address of string descriptor for control string

 outlen = address of word in which to store output length

 outbuf = address of output buffer string descriptor

 p1...  = variable number of arguments to FAO
2 $FAOL
Formatted ASCII Output With List Parameter

 $FAOL    ctrstr ,[outlen] ,outbuf ,prmlst

 ctrstr = address of string descriptor for control string

 outlen = address of word to receive output string length

 outbuf = address of output buffer string descriptor

 prmlst = address of a list of longword parameters
2 $FORCEX
Force Exit

 $FORCEX  [pidadr] ,[prcnam] ,[code]

 pidadr = address of process id of process to be forced to exit

 prcnam = address of process name descriptor for forced process

 code   = longword completion status for exit service
2 $GETCHN
Get I/O Channel Information

 $GETCHN  chan ,[prilen] ,[pribuf] ,[scdlen] ,[scdbuf]

 chan   = number of a channel assigned to the device

 prilen = address of word to receive length of primary buffer

 pribuf = address of primary buffer descriptor

 scdlen = address of word to receive length of secondary buffer

 scdbuf = address of secondary buffer descriptor
2 $GETDEV
Get I/O Device Information

 $GETDEV  devnam ,[prilen] ,[pribuf] ,[scdlen] ,[scdbuf]

 devnam = address of device name or logical name descriptor

 prilen = address of word to receive length of primary buffer

 pribuf = address of primary buffer descriptor

 scdlen = address of word to receive length of secondary buffer

 scdbuf = address of secondary buffer descriptor
2 $GETDVI
Get Device/Volume Information

 $GETDVI  [efn] ,[chan] ,[devnam] ,itmlst ,[iosb] ,[astadr]
          ,[astprm] ,[nullarg]

 efn    = event flag to be set at completion

 chan   = number of a channel assigned to the device or
          0 if device is specified by the devnam parameter

 devnam = address of device name or logical name descriptor

 itmlst = address of a list of item descriptors

 iosb   = address of a quadword I/O status block

 astadr = address of entry mask of AST routine

 astprm = value to be passed to AST routine

 nullarg = reserved argument
3 ITMLST
 The format of the item list is as follows:

 +-----------------------------+
 !  ITEM CODE   !  BUF. LENGTH !
 +-----------------------------+
 !       BUFFER ADDRESS        !
 +-----------------------------+
 !  ADDRESS TO RETURN LENGTH   !
 +-----------------------------+

             ...
             ...

 +-----------------------------+
 !             0               !
 +-----------------------------+

3 ITEM_CODES
 The symbolic item code names are DVI$_item_name for the primary device
 and DVI$_item_name ! DVI$C_SECONDARY for the secondary device. An item
 is either a VALUE or a STRING.  A VALUE item requires 4 bytes of stor-
 age for  the result.  Each item that is a STRING specifies the maximum
 size of the string.  Strings are zero extended  or truncated as appro-
 priate to fill the string buffer.
4 ACPPID
 ACP Process ID - VALUE
4 ACPTYPE
 ACP type code - VALUE

 The following symbolic ACP type codes are defined:

  DVI$C_ACP_F11V1   ; FILES-11 STRUCTURE LEVEL 1
  DVI$C_ACP_F11V2   ; FILES-11 STRUCTURE LEVEL 2
  DVI$C_ACP_MTA     ; MAGTAPE
  DVI$C_ACP_NET     ; NETWORKS
  DVI$C_ACP_REM     ; REMOTE I/O
4 CLUSTER
 Allocation Cluster (disk) - VALUE
4 CYLINDERS
 Number of cylinders on the volume (disk) - VALUE
4 DEVBUFSIZ
 Device buffer size - VALUE
4 DEVCHAR
 Device characteristics - VALUE
4 DEVCLASS
 Device class - VALUE

 The following symbolic device class codes are defined by
 the $DCDEF macro:

   DC$_CARD      - card reader
   DC$_DISK      - disk device
   DC$_LP        - line printer
   DC$_MAILBOX   - mailbox
   DC$_REALTIME  - realtime device
   DC$_SCOM      - synchronous communications
   DC$_TAPE      - magnetic tape
   DC$_TERM      - terminal
4 DEVDEPEND
 Device dependent information - VALUE
4 DEVDEPEND2
 Additional device dependent data - VALUE
4 DEVNAM
 Device name - STRING - 64 bytes
4 DEVTYPE
 Device type - VALUE

 Symbolic names for device types are defined by the $DCDEF
 macro.
4 ERRCNT
 Error count - VALUE
4 FREEBLOCKS
 Number of free blocks on the volume (disk) - VALUE
4 LOGVOLNAM
 Logical volume name - STRING - 64 bytes
4 MAXBLOCK
 Number of logical blocks on the volume (disk) - VALUE
4 MAXFILES
 Maximum number of files on volume (disk) - VALUE
4 MOUNTCNT
 Mount count - VALUE
4 NEXTDEVNAM
 Device name of next volume in volume set (disk) - STRING - 64 bytes
4 OPCNT
 Operation count - VALUE
4 OWNUIC
 UIC of device owner - VALUE
4 PID
 Process identification of device owner - VALUE
4 RECSIZ
 Blocked record size - VALUE
4 REFCNT
 Reference count, number of channels assigned to the device - VALUE
4 ROOTDEVNAM
 Device name of root volume in volume set (disk) - STRING - 64 bytes
4 SECTORS
 Number of sectors per track (disk) - VALUE
4 SERIALNUM
 Volume serial number (disk) - VALUE
4 TRACKS
 Number of tracks per cylinder (disk) - VALUE
4 TRANSCNT
 Transaction count, number of files open on the volume - VALUE
4 UNIT
 Unit number - VALUE
4 VOLCOUNT
 Count of volumes in volume set (disk) - VALUE
4 VOLNAM
 Volume name - STRING - 12 bytes
4 VOLNUMBER
 Number of this volume in volume set (disk) - VALUE
4 VPROT
 Volume protection mask - VALUE
2 $GETJPI
Get Job/Process Information

 $GETJPI  [efn] ,[pidadr] ,[prcnam] ,itmlst ,[iosb], [astadr],
          [astprm]

 efn    = event flag to be set at completion

 pidadr = address of process identification

 prcnam = address of process name string descriptor

 itmlst = address of a list of item descriptors

 iosb   = address of a quadword I/O status block

 astadr = address of entry mask of AST routine

 astprm = value to be passed to AST routine as an argument
3 ITMLST
 The format of the item list is as follows:

 +-----------------------------+
 !  ITEM CODE   !  BUF. LENGTH !
 +-----------------------------+
 !       BUFFER ADDRESS        !
 +-----------------------------+
 !  ADDRESS TO RETURN LENGTH   !
 +-----------------------------+

             ...
             ...

 +-----------------------------+
 !              0              !
 +-----------------------------+

3 ITEM_CODES
 The  symbolic  item  code  names  are  JPI$_item_name.   An  item is
 either a VALUE, QUADWORD, or STRING.  A VALUE item should be assumed
 to require  4 bytes of storage.  A QUADWORD item requires 8 bytes of
 storage.  Each item  that is  a STRING specifies the maximum size of
 the string.   Items are  zero extended  or truncated  as required to
 fill the supplied buffer.
4 ACCOUNT
 Account - STRING - 8 bytes
4 APTCNT
 Active page table count - VALUE
4 ASTACT
 Access modes with active ASTs - VALUE

  Bit    Mode

   0   Kernel
   1   Executive
   2   Supervisor
   3   User
4 ASTCNT
 Remaining AST quota - VALUE
4 ASTEN
 Access modes with ASTs enabled - VALUE

  Bit    Mode

   0   Kernel
   1   Executive
   2   Supervisor
   3   User
4 ASTLM
 AST quota - VALUE
4 AUTHPRI
 Authorized base priority - VALUE
4 AUTHPRIV
 Authorized privileged mask - QUADWORD
4 BIOCNT
 Remaining buffered I/O operation quota - V ALUE
4 BIOLM
 Buffered I/O operation quota - VALUE
4 BUFIO
 Count of buffered I/O operatons - VALUE
4 BYTCNT
 Remaining buffered I/O byte count quota - VALUE
4 BYTLM
 Buffered I/O byte count quota - VALUE
4 CPULIM
 CPU time limit (10 millisecond units) - VALUE
4 CPUTIM
 Accumulated CPU time (10 millisecond units) - VALUE
4 CURPRIV
 Current process privilege mask - QUADWORD
4 DFPFC
 Default page fault cluster size - VALUE
4 DFWSCNT
 Default working set size - VALUE

 This is the parameter modified by the DCL command:

  $ SET WORKING_SET /LIMIT=size
4 DIOCNT
 Remaining direct I/O operation quota - VALUE
4 DIOLM
 Direct I/O operation quota - VALUE
4 DIRIO
 Count of direct I/O operations - VALUE
4 EFCS
 Local event flags 0 through 31 - VALUE
4 EFCU
 Local event flags 32 through 63 - VALUE
4 EFWM
 Event flag wait mask - VALUE
4 ENQCNT
 Remaining lock request quota - VALUE
4 ENQLM
 Lock request quota - VALUE
4 EXCVEC
 Address of list of exception vectors - VALUE

 Each exception vector is a longword containing the
 address of the exception handler entry mask or 0,
 if there is no exception handler declared.

         +-----------------------------+
 value ->! Primary, kernel mode        !
         +-----------------------------+
         ! Secondary, kernel mode      !
         +-----------------------------+
         ! Primary, executive mode     !
         +-----------------------------+
         ! Secondary, executive mode   !
         +-----------------------------+
         ! Primary, supervisor mode    !
         +-----------------------------+
         ! Secondary, supervisor mode  !
         +-----------------------------+
         ! Primary, user mode          !
         +-----------------------------+
         ! Secondary, user mode        !
         +-----------------------------+
4 FILCNT
 Remaining open file quota - VALUE
4 FILLM
 Open file quota - VALUE
4 FINALEXC
 Address of list of last chance exception vectors - VALUE

 Each exception vector is a longword containing the
 address of the exception handler entry mask or 0,
 if there is no exception handler declared.

         +------------------+
 value ->! Kernel mode      !
         +------------------+
         ! Executive mode   !
         +------------------+
         ! Supervisor mode  !
         +------------------+
         ! User mode        !
         +------------------+
4 FREP0VA
 First free page at end of program region - VALUE
4 FREP1VA
 First free page at end of control region - VALUE
4 FREPTECNT
 Count of pages available for expansion - VALUE
4 GPGCNT
 Global page count in working set - VALUE
4 GRP
 Group field of UIC - VALUE
4 IMAGNAME
 Current image file name - STRING - 128 bytes
4 IMAGPRIV
 Privileges with which current image was installed - QUADWORD
4 JOBPRCCNT
 Total subprocess count in job - VALUE
4 LOGINTIM
 Process creation time - QUADWORD
4 MEM
 Member field of UIC - VALUE
4 OWNER
 Process identification of process owner - VALUE
4 PAGEFLTS
 Count of page faults - VALUE
4 PAGFILCNT
 Current paging file usage - VALUE
4 PAGFILLOC
 Paging file index - VALUE
4 PGFLQUOTA
 Paging file quota - VALUE
4 PID
 Process identification - VALUE
4 PPGCNT
 Process page count in working set - VALUE
4 PRCCNT
 Count of subprocesses - VALUE
4 PRCLM
 Subprocess quota - VALUE
4 PRCNAM
 Process name - STRING - 15 characters
4 PRI
 Current process priority - VALUE
4 PRIB
 Process's base priority - VALUE
4 PROCPRIV
 Permanent process privilege mask - QUADWORD
4 SITESPEC
 Per-process site-specific cell - VALUE
4 STATE
 Process state - VALUE

 These values are defined by the $STATEDEF macro contained
 in SYS$LIBRARY:LIB.MLB.

    Value Meaning

  SCH$C_CEF    Common event flag wait
  SCH$C_COM    Compute
  SCH$C_COMO   Compute, out of balance set
  SCH$C_CUR    Current process
  SCH$C_COLPG  Collided page wait
  SCH$C_FPG    Freepage wait
  SCH$C_HIB    Hibernate wait
  SCH$C_HIBO   Hibernate wait, out of balance set
  SCH$C_LEF    Local event flag wait
  SCH$C_LEFO   Local event flag wait, out of balance set
  SCH$C_MWAIT  Mutex and miscellaneous resource wait
  SCH$C_PFW    Page fault wait
  SCH$C_SUSP   Suspended
  SCH$C_SUSPO  Suspended, out of balance set
4 STS
 Process status flags - VALUE

 These flags are defined by the $PCBDEF macro in
 SYS$LIBRARY:LIB.MLB.

    Flag    Meaning

  PCB$V_ASTPEN   AST pending
  PCB$V_BATCH    Process is a batch job
  PCB$V_DELPEN   Delete pending
  PCB$V_DISAWS   Disable automatic working set adjustment
  PCB$V_FORCPEN  Force exit pending
  PCB$V_HIBER    Hibernate after initial image activate
  PCB$V_INQUAN   Initial quantum in progress
  PCB$V_LOGIN    Login without reading authorization file
  PCB$V_NETWRK   Process is a network connect object
  PCB$V_NOACNT   No accounting for process
  PCB$V_NODELET  No delete
  PCB$V_PHDRES   Process header resident
  PCB$V_PSWAPM   Process swap mode (1=noswap)
  PCB$V_PWRAST   Power fail AST
  PCB$V_RES      Resident, in balance set
  PCB$V_RESPEN   Resume pending, skip suspend
  PCB$V_SSFEXC   System service exception enable (kernel)
  PCB$V_SSFEXCE  System service exception enable (exec)
  PCB$V_SSFEXCS  System service exception enable (super)
  PCB$V_SSFEXCU  System service exception enable (user)
  PCB$V_SSRWAIT  System service resource wait disable
  PCB$V_SUSPEN   Suspend pending
  PCB$V_SWPVBN   Write for swap VBN in progress
  PCB$V_WAKEPEN  Wake pending, skip hibernate
  PCB$V_WALL     Wait for all events in mask
4 SWPFILLOC
 Swap file backing store address - VALUE
4 TERMINAL
 Interactive login terminal name - STRING - 7 characters
4 TMBU
 Termination mailbox unit number - VALUE
4 TQCNT
 Remaining timer queue entry quota - VALUE
4 TQLM
 Timer queue entry quota - VALUE
4 UIC
 Process's UIC - VALUE
4 USERNAME
 User name - STRING - 12 bytes
4 VIRTPEAK
 Peak virtual address space size - VALUE
4 VOLUMES
 Count of mounted volumes - VALUE
4 WSAUTH
 Authorized working set quota - VALUE
4 WSAUTHEXT
 Authorized working set extent - VALUE
4 WSEXTENT
 Current working set extent - VALUE

 This value is the largest size that the $ADJWSL system service
 will allow.  It is also the value modified by the DCL command:

  $ SET WORKING_SET /EXTENT=size
4 WSPEAK
 Peak working set size - VALUE
4 WSQUOTA
 Current working set quota - VALUE

 This is the value modified by the DCL command:

  $ SET WORKING_SET /QUOTA=size
4 WSSIZE
 Current working set size - VALUE
2 $GETMSG
Get Message

 $GETMSG  msgid ,msglen ,bufadr ,[flags] ,[outadr]

 msgid  = identification of message to be retrieved

 msglen = address  of  a  word  to  receive  length  of  string
   returned

 bufadr = address of buffer descriptor  of  buffer  to  receive
   string

 flags  = flag bits for message content (macro default = 15)

       Bit  Value/Meaning

        0  1 Include text
           0 Do not include text
        1  1 Include identifier
           0 Do not include identifier
        2  1 Include severity
           0 Do not include severity
        3  1 Include component
           0 Do not include component

 outadr = address of 4-byte array to receive the following values:

   Byte       Contents

    0  Reserved
    1  Count of FAO arguments
    2  User value
    3  Reserved
2 $GETSYI
Get System-Wide Information

 $GETSYI  [efn] ,,,itmlst ,[iosb] ,[astadr] ,[astprm]

 efn    = event flag to be set at completion

 itmlst = address of a list of item descriptors

 iosb   = address of a quadword I/O status block

 astadr = address of entry mask of AST routine

 astprm = value to be passed to AST routine


 The second and third arguments in the $GETSYI argument list are
 not used; they are reserved for future use.
3 ITMLST
 The format of the item list is as follows:

 +-----------------------------+
 !  ITEM CODE   !  BUF. LENGTH !
 +-----------------------------+
 !        BUFFER ADDRESS       !
 +-----------------------------+
 !  ADDRESS TO RETURN LENGTH   !
 +-----------------------------+

             ...
             ...

 +-----------------------------+
 !            0                !
 +-----------------------------+

3 ITEM_CODES
 The symbolic item code names are SYI$_item_name.  An item is either
 a VALUE or STRING.   A VALUE item should be assumed to require four
 bytes of storage.  Each item that is a STRING specifies the maximum
 size of  the string.   All items are  zero extended or truncated as
 necessary to fill the supplied buffer.
4 CPU
 CPU type - VALUE

   Value    CPU

     1    VAX-11/780
     2    VAX-11/750
     3    VAX-11/730
4 SID
 System identification register - VALUE

 The system identification register is described in the VAX
 Hardware Handbook.
4 VERSION
 VMS version identification - STRING - 4 characters
2 $GETTIM
Get Time

 $GETTIM  timadr

 timadr = address of a quadword to receive 64-bit current time value
2 $HIBER
Hibernate

 $HIBER_S
2 $INPUT
$INPUT Macro

 $INPUT chan ,length ,buffer ,[iosb] ,[efn]

 chan   = number of the channel on which I/O is to be performed

 length = length of the input buffer

 buffer = address of the input buffer

 iosb   = address of quadword I/O status block

 efn    = event flag to set on completion
2 $LCKPAG
Lock Pages in Memory

 $LCKPAG  inadr ,[retadr] ,[acmode]

 inadr  = address of 2-longword array containing starting and
          ending addresses of pages to be locked

 retadr = address of 2-longword array to receive addresses of
          pages actually locked

 acmode = access mode to check against the owner of the pages
2 $LKWSET
Lock Pages in Working Set

 $LKWSET  inadr ,[retadr] ,[acmode]

 inadr  = address of 2-longword array containing starting and
          ending virtual addresses of pages to be locked

 retadr = address of a 2-longword array to receive starting and
          ending virtual addresses of pages actually locked

 acmode = access mode to be checked against the page owner
2 $MGBLSC
Map Global Section

 $MGBLSC  inadr ,[retadr] ,[acmode] ,[flags] ,gsdnam ,[ident] ,[relpag]

 inadr  = address of 2-longword array containing starting and
          ending addresses of pages to be mapped

 retadr = address of 2-longword array to receive virtual
          addresses of pages mapped

 acmode = access mode of owner of mapped pages

 flags  = flags overriding default section characteristics

     Flag        Meaning

   SEC$M_WRT      Read/write section
   SEC$M_SYSGBL   System global section
   SEC$M_EXPREG   Find first available space

 gsdnam = address of global section name descriptor

 ident  = address of quadword containing version id and match control

 relpag = relative page number within global section
2 $MOUNT
Mount Volume

 $MOUNT  itmlst

 itmlst = Address of a list of item identifiers
3 ITMLST
 The format of the item list is as follows:

  +-----------------------------+
  !  ITEM CODE   !  BUF. LENGTH !
  +-----------------------------+
  !        BUFFER ADDRESS       !
  +-----------------------------+
  !           (unused)          !
  +-----------------------------+

             ...
             ...

  +-----------------------------+
  !            0                !
  +-----------------------------+

 The third longword is unused, it is maintained for compatibility
 with other item lists.
3 ITEM_CODES
 The symbolic  item code  names are  MNT$_item_name.  Item  codes are
 defined by the  $MNTDEF macro.  An item is either a VALUE or STRING.
 A VALUE item should be assumed to require 4 bytes of storage.  Items
 are zero extended or truncated as required when they are read.
4 ACCESSED
 Number of directories that will be in concurrent use - VALUE
4 BLOCKSIZE
 Default block size for tape volumes - VALUE
4 COMMENT
 Text to be associated with an operator request - STRING
4 DENSITY
 Density for foreign or unlabeled tapes - VALUE
4 DEVNAM
 Device name - STRING
4 EXTENSION
 Number of blocks to extend files - VALUE
4 EXTENT
 Size of the extent cache - VALUE
4 FILEID
 Size of the file-id cache - VALUE
4 FLAGS
 A 32-bit mask defining options - VALUE

 The following flags have the prefix MNT$M_, and are defined
 by the $MNTDEF macro.
5 FOREIGN
 Volume is not Files-11 structured
5 GROUP
 Volume is to be made accessible to other users with the
 same UIC group number
5 MESSAGE
 Messages will be sent to the caller's SYS$OUTPUT device
5 NOASSIST
 Do not request operator assistance to recover from errors
5 NOCACHE
 Turn off all caching associated with this volume
5 NODISKQ
 Do not enforce disk quotas on the volume
5 NOHDR3
 Do not write ANSI HDR3 labels to magnetic tapes
5 NOMNTVER
 Do not mount verify this volume
5 NOWRITE
 Volume is to be mounted software write-locked
5 OVR_ACCESS
 Override a nonblank VOL1 or HDR1 accessibility field
5 OVR_EXP
 Write a tape that has not yet reached its expiration date.
5 OVR_IDENT
 Mount the volume without the volume name
5 OVR_LOCK
 Override the software writelock that occurs when a volume
 has a corrupted storage bit mask
5 OVR_SETID
 Inhibit checks on the volume set identification on a tape
 volume set
5 READCHECK
 Perform checks following all read operations
5 SHARE
 Volume is to be shared by other users
5 SYSTEM
 Volume is accessible to all other users
5 WRITECHECK
 Perform checks following all write operations
5 WRITETHRU
 Disable write-back caching
4 LIMIT
 Maximum amount of free space in extent cache - VALUE
4 LOGNAM
 Volume logical name - STRING
4 OWNER
 Longword integer specifying UIC to own the volume - VALUE
4 PROCESSOR
 Name of the ACP to process the volume - STRING

 The ACP name can be one of the following strings:

   UNIQUE      Create new process to execute default ACP

   ddcu:       Use ACP process in use by specified device

   file-spec   Create a new process to execute the ACP image
        specified by file-spec
4 QUOTA
 Size of the quota record cache - VALUE
4 RECORDSIZ
 Number of characters per record - VALUE
4 VOLNAM
 Volume name - STRING
4 VOLSET
 Name of a volume set - STRING
4 VPROT
 Protection mask - VALUE
4 WINDOW
 Number of mapping pointers - VALUE
2 $NUMTIM
Convert Binary Time to Numeric Time

 $NUMTIM  timbuf ,[timadr]

 timbuf = address of a 7-word buffer to receive numeric time
          information

 timadr = address of a quadword containing the 64-bit time.  If
          0, use current time
2 $OUTPUT
$OUTPUT Macro

 $OUTPUT  chan, length, buffer, [iosb], [efn]

 chan   = channel on which I/O is directed

 length = length of the output buffer

 buffer = address of the output buffer

 iosb   = address of quadword I/O status block

 efn    = event flag number to set on completion
2 $PURGWS
Purge Working Set

 $PURGWS  inadr

 inadr  = address of 2-longword array containing starting and
          ending addresses of pages to be removed
2 $PUTMSG
Put Message

 $PUTMSG  msgvec ,[actrtn] ,[facnam], [actprm]

 msgvec = address of message argument vector

 actrtn = address of entry mask of action routine

 facnam = address of facility name string descriptor

 actprm = parameter to pass to action routine
2 $QIO
Queue I/O Request

 $QIO     [efn] ,chan ,func ,[iosb] ,[astadr] ,[astprm]
 ($QIOW)  ,[p1] ,[p2] ,[p3] ,[p4] ,[p5] ,[p6]

 efn    = number of event flag to set on completion

 chan   = number of channel on which I/O is directed

 func   = function code specifying action to be performed

 iosb   = address of quadword I/O status block to receive final
          completion status

 astadr = address of entry mask of AST routine

 astprm = value to be passed to AST routine as argument

 p1...  = optional device- and function-specific parameters
2 $READEF
Read Event Flag

 $READEF  efn ,state

 efn    = event flag number of any flag in the cluster

 state  = address of a longword to receive current state of all
          flags in the cluster
2 $RESUME
Resume Suspended Process

 $RESUME  [pidadr] ,[prcnam]

 pidadr = address of process id of process to be resumed

 prcnam = address of process name string descriptor
2 $SCHDWK
Schedule Wakeup

 $SCHDWK  [pidadr] ,[prcnam] ,daytim ,[reptim]

 pidadr = address of process id of process to be awakened

 prcnam = address of process name string descriptor

 daytim = address of quadword containing time to wake

 reptim = address of quadword containing repeat time interval
2 $SETAST
Set AST Enable

 $SETAST  enbflg

 enbflg = AST enable indicator for current access mode
            0 -> disable    1 -> enable
2 $SETEF
Set Event Flag

 $SETEF  efn

 efn    = event flag number of flag to set
2 $SETEXV
Set Exception Vector

 $SETEXV  [vector] ,[addres] ,[acmode] ,[prvhnd]

 vector = vector number
            0 -> primary vector   1 -> secondary    2 -> last chance

 addres = exception handler address (0 indicates deassign vector)

 acmode = access mode for which vector is set

 prvhnd = address of longword to receive previous handler address
2 $SETIME
Set System Time

 $SETIME [timadr]

 timadr = address of quadword containing  new  system  time  in
          64-bit  format.   If 0, recalibrate system time using
          hardware time-of-year clock.
2 $SETIMR
Set Timer

 $SETIMR  [efn] ,daytim ,[astadr] ,[reqidt]

 efn    = event flag to set when timer expires

 daytim = address of quadword containing 64-bit time value

 astadr = address of entry mask of AST routine

 reqidt = request identification of this timer request
2 $SETPRA
Set Power Recovery AST

 $SETPRA  astadr ,[acmode]

 astadr = address of power recovery AST routine

 acmode = access mode of AST
2 $SETPRI
Set Priority

 $SETPRI  [pidadr] ,[prcnam] ,pri ,[prvpri]

 pidadr = address of process id of process to be set

 prcnam = address of process name string descriptor

 pri    = new base priority for the process

 prvpri = address of longword to receive previous base priority
2 $SETPRN
Set Process Name

 $SETPRN  [prcnam]

 prcnam = address of the process name string descriptor
2 $SETPRT
Set Protection on Pages

 $SETPRT  inadr ,[retadr] ,[acmode] ,prot ,[prvprt]

 inadr  = address of 2-longword array containing starting and
          ending virtual addresses of pages to change

 retadr = address of 2-longword array containing starting and
          ending addresses of pages which were changed

 acmode = access mode of request

 prot   = new protection

 prvprt = address of byte to receive previous protection of
          last page changed
2 $SETPRV
Set privileges.
 $SETPRV [enbflg] ,[prvadr] ,[prmflg] ,[prvprv]

 enbflg = enable indicator
            0 -> disable   1 -> enable

 prvadr = 64-bit mask defining the privileges to be enabled or
          disabled

 prmflg = permanent indicator
            0 -> temporary (for this image)  1 -> permanent

 prvprv = address of quadword buffer to receive previous privileges
2 $SETRWM
Set Resource Wait Mode

 $SETRWM  [watflg]

 watflg = wait indicator
            0 -> wait for resources   1 -> return failure immediately
2 $SETSFM
Set System Service Failure Mode

 $SETSFM  [enbflg]

 enbflg = enable indicator
            0 -> disable generation of exceptions on service failures
            1 -> generate exceptions for system service failures
2 $SETSWM
Set Process Swap Mode

 $SETSWM  [swpflg]

 swpflg = swap indicator
            0 -> enable swapping   1 -> disable swapping
2 $SNDACC
Send Message to Accounting Manager

 $SNDACC  msgbuf ,[chan]

 msgbuf = address of message buffer string descriptor

 chan   = number of channel assigned to mailbox to receive reply
2 $SNDERR
Send Message to Error Logger

 $SNDERR msgbuf

 msgbuf = address of message buffer string descriptor
2 $SNDOPR
Send Message to Operator

 $SNDOPR  msgbuf ,[chan]

 msgbuf = address of message buffer string descriptor

 chan   = number of channel assigned to mailbox to receive reply
2 $SNDSMB
Send Message to Symbiont Manager

 $SNDSMB  msgbuf ,[chan]

 msgbuf = address of message buffer string descriptor

 chan   = number of channel assigned to mailbox to receive reply
2 $SUSPND
Suspend Process

 $SUSPND  [pidadr] ,[prcnam]

 pidadr = address of process id of process to be suspended

 prcnam = address of name string descriptor of process
2 $TRNLOG
Translate Logical Name

 $TRNLOG  lognam ,[rsllen] ,rslbuf ,[table] ,[acmode] ,[dsbmsk]

 lognam = address of logical name string descriptor

 rsllen = address of word to receive length of resultant name

 rslbuf = address of descriptor for buffer to receive resultant
          string

 table  = address of byte to receive logical name table number

 acmode = address of byte to receive access mode of entry
          (process table only)

 dsbmsk = table search disable mask

   Bit Set    Meaning

      0       Do not search system table
      1       Do not search group table
      2       Do not search process table
2 $ULKPAG
Unlock Pages From Memory

 $ULKPAG  inadr ,[retadr] ,[acmode]

 inadr  = address of 2-longword array containing starting and
          ending virtual addresses of pages to be unlocked

 retadr = address of a 2-longword array to receive starting and
          ending virtual addresses of pages actually unlocked

 acmode = access mode to check against the owner of the pages
2 $ULWSET
Unlock Pages From Working Set

 $ULWSET  inadr ,[retadr] ,[acmode]

 inadr  = address of 2-longword array containing starting and
          ending virtual addresses of pages to be unlocked

 retadr = address of a 2-longword array to receive starting and
          ending virtual addresses of pages actually unlocked

 acmode = access mode to check against the owner of the pages
2 $UNWIND
Unwind Call Stack

 $UNWIND  [depadr] ,[newpc]

 depadr = address of longword containing number of logical frames
          (depth) to unwind call stack

 newpc  = address to be given control when the unwind is complete
2 $UPDSEC
Update Section File on Disk

 $UPDSEC  inadr ,[retadr] ,[acmode] ,[updflg] ,[efn] ,[iosb]
          ,[astadr] ,[astprm]

 inadr  = address of 2-longword array containing starting and
          ending  addresses  of  the  pages  to  be potentially
          written

 retadr = address of 2-longword array to receive  addresses  of
          the  first  and  last  page  queued  in the first I/O
          request

 acmode = access  mode  on  behalf  of  which  the  service  is
          performed

 updflg = update indicator for read/write global sections
            0 -> write all read/write pages in the section
            1 -> write all pages modified by the caller

 efn    = number of event flag to set when the section file  is
          updated

 iosb   = address of quadword I/O status block

 astadr = address of entry mask of an AST service routine

 astprm = AST parameter to be passed to the AST service routine
2 $WAITFR
Wait for Single Event Flag

 $WAITFR  efn

 efn    = event flag number to wait for
2 $WAKE
Wake

 $WAKE  [pidadr] ,[prcnam]

 pidadr = address of process id  of process to be awakened

 prcnam = address of name string descriptor of process to be
          awakened
2 $WFLAND
Wait for Logical AND of Event Flags

 $WFLAND  efn ,mask

 efn    = event flag number of any flag within the cluster

 mask   = 32-bit mask of flags that must be set
2 $WFLOR
Wait for Logical OR of Event Flags

 $WFLOR  efn ,mask

 efn    = event flag number of any flag within the cluster

 mask   = 32-bit mask of flags, any of which must be set
