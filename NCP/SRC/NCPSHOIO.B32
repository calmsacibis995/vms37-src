%TITLE	'I/O Support for Show and List'
MODULE NCPSHOIO	(IDENT = 'V03-000',
		ADDRESSING_MODE(EXTERNAL=GENERAL),
		ADDRESSING_MODE(NONEXTERNAL=GENERAL)) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	Network Control Program (NCP)
!
! ABSTRACT:
!
!	This module contains the routines to manage the output
!	file for the SHOW and LIST commands.  This file is specified by
!	the TO parameter and defaults to SYS$OUTPUT.
!
! ENVIRONMENT:	VAX/VMS Operating System
!
! AUTHOR:	Darrell Duffy	, CREATION DATE: 4-December-1979
!
! MODIFIED BY:
!
!	V001	TMH0001		Tim Halvorsen	28-Jul-1981
!		Add general addressing.
!--

%SBTTL	'Definitions'

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
	NCP$OPENSHO : NOVALUE,		! Open the show/list output file
	NCP$WRITESHO : NOVALUE,		! Write a record to it
	NCP$CLOSESHO : NOVALUE		! Close the file
	;		!

!
! INCLUDE FILES:
!

LIBRARY 'SYS$LIBRARY:STARLET.L32';
LIBRARY 'OBJ$:NCPLIBRY.L32';

!
! MACROS:
!

!
! EQUATED SYMBOLS:
!

!
! OWN STORAGE:
!

OWN
	SHOOUTFAB : $FAB (),		! Output FAB

	SHOOUTRAB : $RAB ()		! Output RAB
	;

!
! EXTERNAL REFERENCES:
!

EXTERNAL LITERAL
	NCP$_SHOFIL,			! File open error
	NCP$_SHOIO			! I/O error
	;		!

%SBTTL	'NCP$OPENSHO  Open Output File'
GLOBAL ROUTINE NCP$OPENSHO :NOVALUE =	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	Open the output file and connect the RAB.  If the TO parameter
!	has not been specified, use SYS$OUTPUT as the file.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	STATUS				! Status return value
	;

    EXTERNAL
	PDB$G_INF_TO : BBLOCK		! Filespec for output file
	;

    $FAB_INIT
	(
	FAB = SHOOUTFAB,
	RAT = (CR),			! Implied carriage control
	FAC = PUT,			! Using put
	DNM = '.LIS',			! Default filename
	ORG = SEQ,			! Sequential org
	FOP = (CIF,MXV,TEF)		! Create if, maximize versions,
					! Truncate at eof
	);

    $RAB_INIT
	(
	RAB = SHOOUTRAB,
	RAC = SEQ,
	FAB = SHOOUTFAB,
	ROP = EOF			! Position to end of file
	);

    IF .PDB$G_INF_TO [PDB$B_STS_FLG]	! Is there a filespec?
    THEN
	BEGIN				! Yes, setup the fab with it
	SHOOUTFAB [FAB$L_FNA] = PDB$G_INF_TO [PDB$T_DATA] + 1;
	SHOOUTFAB [FAB$B_FNS] = .(PDB$G_INF_TO [PDB$T_DATA]) <0, 8, 0>
	END
    ELSE
	BEGIN				! Set the default
	SHOOUTFAB [FAB$L_FNA] = UPLIT ('SYS$OUTPUT');
	SHOOUTFAB [FAB$B_FNS] = %CHARCOUNT ('SYS$OUTPUT')
	END
    ;

    STATUS = $CREATE (FAB = SHOOUTFAB);	! Create the file

    IF NOT .STATUS
    THEN				! Signal any status we get
	SIGNAL_STOP (NCP$_SHOFIL, 0, .STATUS)
    ;

    STATUS = $CONNECT (RAB = SHOOUTRAB); ! Connect the stream

    IF NOT .STATUS
    THEN				! Any signal any status here too
	SIGNAL_STOP (NCP$_SHOFIL, 0, .STATUS)
    ;

    RETURN

    END;

%SBTTL	'NCP$WRITESHO  Write a Record'
GLOBAL ROUTINE NCP$WRITESHO (BUFDSC) :NOVALUE =	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine writes a record to the output file for
!	SHOW and LIST.  If an error occurs, the file is closed
!	and the error is signaled.
!
! FORMAL PARAMETERS:
!
!	BUFDSC		Address of a buffer descriptor of the record
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	BUFDSC : REF VECTOR [2]			! Output record descriptor
	;

    LOCAL
	PTR,					! Pointer into buffer
	SIZE,					! Size of remaining text
	PEREC,					! Pointer to end of record
	PEND,					! Pointer to end of buffer
	REND,					! Pointer to end of a line
	STATUS					! Status return
	;


    PTR = CH$PTR (.BUFDSC [1]);			! Point into record
    SIZE = .BUFDSC [0];				! Size of remaining
    PEND = .PTR + .SIZE;			! Pointer to end

    WHILE .SIZE GTR 0				! While there is a record
    DO
	BEGIN
	SHOOUTRAB [RAB$L_RBF] = .PTR;		! The current buffer
	REND = CH$FIND_CH (.SIZE, .PTR, 13);	! Find the next line
	IF NOT CH$FAIL (.REND)			! If there was one
	THEN
	    BEGIN				! Set to write the line
	    SHOOUTRAB [RAB$W_RSZ] = .REND - .PTR; ! Its size
	    PTR = .REND + 2;			! Point beyond it
	    SIZE = .PEND - .PTR			! Size of remaining text
	    END
	ELSE
	    BEGIN				! The whole buffer
	    SHOOUTRAB [RAB$W_RSZ] = .SIZE;
	    SIZE = 0				! No more left
	    END
	;

!
!	Remove trailing spaces from record
!
	
	PEREC = .SHOOUTRAB [RAB$L_RBF] + .SHOOUTRAB [RAB$W_RSZ];
	WHILE CH$RCHAR (.PEREC - 1) EQL ' '
	DO
	    PEREC = .PEREC - 1
	;

	SHOOUTRAB [RAB$W_RSZ] = MAX (1, .PEREC - .SHOOUTRAB [RAB$L_RBF] );

	STATUS = $PUT (RAB = SHOOUTRAB);	! Put the record

	IF NOT .STATUS
	THEN					! If error, close file and
	    BEGIN				! signal status
	    NCP$CLOSESHO ();
	    SIGNAL_STOP (NCP$_SHOIO, 0, .STATUS)
	    END
	END
    ;

    RETURN

    END;

%SBTTL	'NCP$CLOSESHO  Close Output File'
GLOBAL ROUTINE NCP$CLOSESHO :NOVALUE =	!
!++
! FUNCTIONAL DESCRIPTION:
!
!	Close the output file
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    $CLOSE (FAB = SHOOUTFAB);		! Ignore any errors

    RETURN

    END;

END				!End of module
ELUDOM
