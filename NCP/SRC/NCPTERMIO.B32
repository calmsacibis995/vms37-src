%TITLE	'Terminal I/O'
MODULE NCPTERMIO (IDENT = 'V03-000',
		ADDRESSING_MODE(EXTERNAL=GENERAL),
		ADDRESSING_MODE(NONEXTERNAL=GENERAL)) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	NCP Network Control Program
!
! ABSTRACT:
!
!	NCP Terminal I/O Data and Routines
!
! ENVIRONMENT:	VAX/VMS Operating System
!
! AUTHOR:	Darrell Duffy	, CREATION DATE: 17-August-1979
!
! MODIFIED BY:
!
!	V001	TMH0001		Tim Halvorsen	28-Jul-1981
!		Add general addressing.
!--

%SBTTL	'Definitions'

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE

	NCP$READ_LINE,			! Read a line of sysinput
	NCP$WRITE_LINE			! Write a line to sysoutput
	;		!

!
! INCLUDE FILES:
!

LIBRARY 'OBJ$:NCPLIBRY.L32';
LIBRARY 'SYS$LIBRARY:STARLET.L32';

!
! MACROS:
!

!
! EQUATED SYMBOLS:
!


!
! OWN STORAGE:
!


!
! FABs and RABs for RMS I/O
!

OWN
	SYSINFAB:$FAB(
		FAC = (GET,PUT),
	        FNM = 'SYS$INPUT'
		),
	SYSINRAB:$RAB(
		RAC = SEQ,
		ROP = (PMT),
		FAB = SYSINFAB
		),
	SYSOUTFAB:$FAB(
		RAT = (CR),
		FAC = PUT,
		FNM = 'SYS$OUTPUT'
		),
	SYSOUTRAB:$RAB(
		RAC = SEQ,
		FAB = SYSOUTFAB
		)
		;

!
! EXTERNAL REFERENCES:
!


%SBTTL	'NCP$INIT_TRMIO  Initialize Terminal I/O'
GLOBAL ROUTINE NCP$INIT_TRMIO =	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	Open and connect terminal input and output files
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	RMS return if something failed
!
! SIDE EFFECTS:
!
!	SYSINRAB and SYSOUTRAB Open
!
!--

    BEGIN

    $OPEN (FAB=SYSINFAB);		! Open and connect input
    $OPEN (FAB=SYSOUTFAB);		! and output files
    $CONNECT (RAB=SYSINRAB);
    $CONNECT (RAB=SYSOUTRAB)

    END;

%SBTTL	'NCP$READ_LINE  Read a line from SYS$INPUT'
GLOBAL ROUTINE NCP$READ_LINE (INP_DSC, PMT_DSC, RTN_DSC) =	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	Read a line from sys$input and return it in a
!	line buffer.  If the calling CLI is in verify mode (sensed by
!	NCP$MAIN) and the input device is not a terminal, then we
!	echo the input lines here for reference.
!
! FORMAL PARAMETERS:
!
!	INP_DSC		Address of descriptor of the line buffer
!	PMT_DSC		Address of descriptor of prompt string
!   	RTN_DSC		Address of the descriptor for returned line
!
! IMPLICIT INPUTS:
!
!	SYSINRAB		File open and connected
!	NCP$GL_CLIVERIFY	Set to CLI verify mode
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	RMS status from $GET
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	INP_DSC: REF VECTOR [2],	! Input line buffer dsc
	RTN_DSC: REF VECTOR [2],	! Returned line dsc
	PMT_DSC: REF VECTOR [2]		! Prompt string descriptor
	;		!

    GLOBAL
	NCP$GL_CLIVERIFY		! Set to cli verify state
	;

    LOCAL
	CHAR,				! Char temporary
	STATUS				! Hold status from $GET
 	;

    SYSINRAB [RAB$B_PSZ] = .PMT_DSC [0];! Prompt size
    SYSINRAB [RAB$L_PBF] = .PMT_DSC [1];! Prompt address

    SYSINRAB [RAB$L_UBF] = .INP_DSC [1];! Setup buffer in rab
    SYSINRAB [RAB$W_USZ] = .INP_DSC [0];

    IF					! Obtain line and hold status
	NOT (STATUS = $GET (RAB = SYSINRAB))
    THEN    RETURN .STATUS		! if an error occurred
    ;

!
!   Convert the characters to upper case
!

    INCRA DEX FROM .SYSINRAB [RAB$L_RBF] ! Limits of the input buffer
    		TO .SYSINRAB [RAB$L_RBF] +
    		   .SYSINRAB [RAB$W_RSZ]
    DO
    BEGIN
	CHAR = CH$RCHAR			! Fetch a character
		(CH$PTR (.DEX) );
	IF	.CHAR GEQU 'a'		! Check for lower case
    		AND .CHAR LEQU 'z'
	THEN
	    CHAR = .CHAR - ('a' - 'A')	! Reduce to upper case
	;
	CH$WCHAR (.CHAR, CH$PTR (.DEX) )! Write the character back
    END
    ;

					! Return the line descriptor
	RTN_DSC [0] = .SYSINRAB [RAB$W_RSZ];
	RTN_DSC [1] = .SYSINRAB [RAB$L_RBF];

    IF					! Input is not a terminal
	(NOT .SYSINFAB [$FAB_DEV(TRM)])
	AND
	.NCP$GL_CLIVERIFY		! Cli is in verify mode
    THEN
	BEGIN
	NCP$WRITE_LINE (.RTN_DSC)	! Write the line to SYS$OUTPUT
	END
    ;
	RETURN .STATUS			! And the RMS status from $GET
    END;

%SBTTL	'NCP$WRITE_LINE  Write a line to SYS$OUTPUT'
GLOBAL ROUTINE NCP$WRITE_LINE (LINE_DSC) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Write a line of data to SYS$OUTPUT
!
! FORMAL PARAMETERS:
!
!	LINE_DSC	Address of line descriptor
!
! IMPLICIT INPUTS:
!
!	SYSOUTRAB	Output file RAB, Open for output
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	RMS status from $PUT
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN
    MAP
	LINE_DSC: REF VECTOR [2]
    ;

    SYSOUTRAB [RAB$L_RBF] = 		! Store address of line
		.LINE_DSC [1];
    SYSOUTRAB [RAB$W_RSZ] =		! Store size of line
		.LINE_DSC [0];
    RETURN $PUT (RAB = SYSOUTRAB)

    END;

%SBTTL	'NCP$CMD_TERM_Q  Is input device a terminal?'
GLOBAL ROUTINE NCP$CMD_TERM_Q =	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	Return true if input device is a terminal,
!	False otherwise.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    IF .SYSINFAB [$FAB_DEV (TRM)]	! Is the terminal bit set?
    THEN RETURN TRUE			! Yes
    ELSE RETURN FALSE			! No

    END;

%SBTTL	'NCP$EMPTY_INP  Is remainder of command blank'
GLOBAL ROUTINE NCP$EMPTY_INP (DSC) =	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	Return true if remainder of command line is blank
!	false otherwise.
!
! FORMAL PARAMETERS:
!
!	DSC		Address of descriptor of remainder of command
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Success or failure
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	DSC : REF VECTOR [2]		! Descriptor of command line
	;

    LITERAL
	SPACE = 32,			! Values of character codes
	TAB = 9
	;

    LOCAL
	LIN_ADR,			! Line address tmp
	END_ADR,			! End address
	CHAR				! Character temporary
	;

    END_ADR = .DSC [1] + .DSC [0] - 1;	! Set end address
    LIN_ADR = .DSC [1];			! Start address

    WHILE .LIN_ADR LEQA .END_ADR	! For the buffer
    DO
	BEGIN				! Look for a space or a tab
	CHAR = CH$RCHAR_A (LIN_ADR);	! Fetch a character and advance
	IF	.CHAR NEQ SPACE AND
		.CHAR NEQ TAB
	THEN RETURN FALSE		! If not, then not empty
	END
    ;
    RETURN TRUE				! An empty line

    END;



END				!End of module
ELUDOM
