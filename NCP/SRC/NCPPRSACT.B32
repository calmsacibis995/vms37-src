%TITLE	'Parse Data and Action Routines'
MODULE NCPPRSACT (IDENT = 'V03-000',
		ADDRESSING_MODE(EXTERNAL=GENERAL),
		ADDRESSING_MODE(NONEXTERNAL=GENERAL)) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	Network Control Program (NCP)
!
! ABSTRACT:
!
!	Data and Action routines for parsing
!
! ENVIRONMENT:	VAX/VMS Operating System
!
! AUTHOR:	Darrell Duffy	, CREATION DATE: 28-August-79
!
! MODIFIED BY:
!
!	V002	TMH0002		Tim Halvorsen	04-Nov-1981
!		Remove duplicate definition of NCP$_NXT_STATE as
!		both an external and a global.  It should have been
!		one or the other.
!
!	V001	TMH0001		Tim Halvorsen	18-Jun-1981
!		Make all external references longword relative.
!--

%SBTTL	'Definitions'

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
	NCP$SIG_CMDERR;			! Signal a command error

!
! INCLUDE FILES:
!

LIBRARY 'LIB$:NCPLIBRY.L32';
LIBRARY	'SYS$LIBRARY:STARLET.L32';

!
! OWN STORAGE
!

GLOBAL
	NCP$_NXT_STATE : VECTOR [2],	! Next state table and keytable to use
	NCP$_PRSCMD_DSC : VECTOR [2];	! Descriptor of the parsed command

!
! EXTERNAL REFERENCES:
!

EXTERNAL LITERAL
	NCP$_AMBCMD,			! Error status for ambiguous command
	NCP$_INVCMD,			! Error status for invalid command
	NCP$_CMDCAN,			! Command canceled
	NCP$_CMDERR,			! I/O error
	NCP$_NOTDONE,			! Prompt for non-terminal command
	NCP$_PRMRNG,			! Parameter range status code
	NCP$_PRMLEN,			! Parameter length status code
	NCP$_SYNTAX,			! Syntax error status
	LIB$_SYNTAXERR			! Syntax error status from LIB$TPARSE
	;

EXTERNAL ROUTINE
	LIB$TPARSE;			! The table parser

EXTERNAL ROUTINE
	NCP$WRITE_LINE,			! Write a line to sys$output
	NCP$READ_CMD,			! Read a command with continuation
	NCP$CMD_TERM_Q			! Is input device a terminal?
	;

EXTERNAL
	NCP$_CMDBUF_DSC : VECTOR,	! Command buffer descriptor
	ACT$GL_PMT_Q			! True for prompting active
	;

%SBTTL	'NCP$PARSE_CMD  Parse Command'
GLOBAL ROUTINE NCP$PARSE_CMD (INP_DSC, ST_TBL, KEY_TBL, RTN_DSC) =	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	Calls LIB$TPARSE with the parse state table
!
! FORMAL PARAMETERS:
!
!	INP_DSC		Address of descriptor of line
!	ST_TBL		Address of state table to use
!	KEY_TBL		Address of keyword table
!	RTN_DSC		Address of descriptor to receive remainder
!			of command line
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Return status from LIB$TPARSE is signaled if syntax error
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	INP_DSC : REF VECTOR [2],	! Dsc of input line
	RTN_DSC : REF VECTOR [2]	! Returned dsc of remainder
	;

    LOCAL
	STATUS				! Returned status
	;		!

    OWN
	PARSE_STATE :			! Parse state table to LIB$TPARSE
		BBLOCK [TPA$K_LENGTH0]
	;

    NCP$_PRSCMD_DSC [0] = .INP_DSC [0];	! Save the descriptor of the command
    NCP$_PRSCMD_DSC [1] = .INP_DSC [1];

    PARSE_STATE [TPA$L_COUNT] =		! Set count of arg block
    		TPA$K_COUNT0;
    PARSE_STATE [TPA$L_OPTIONS] =	! Set for minimum abbreviation
    		TPA$M_ABBREV;
    PARSE_STATE [TPA$L_STRINGCNT] =	! Setup the initial command string
    		.INP_DSC [0];
    PARSE_STATE [TPA$L_STRINGPTR] =
    		.INP_DSC [1];

    NCP$_NXT_STATE [0] = .ST_TBL;	! Setup the first round of state
    NCP$_NXT_STATE [1] = .KEY_TBL;

    DO
	BEGIN
	LOCAL
	    STATES,			! Temp for state table address
	    KEYS			! Temp for keyword table address
	    ;
	STATES = .NCP$_NXT_STATE [0];	! Set up this round
	KEYS   = .NCP$_NXT_STATE [1];

	NCP$_NXT_STATE = 0;		! Zero next round
	
	STATUS = LIB$TPARSE (PARSE_STATE,! Parse the string
		    .STATES, .KEYS);
	END
					! While no error and there is a next
    WHILE .STATUS AND (.NCP$_NXT_STATE [0] NEQ 0) ! round, keep going
    ;

    IF NOT .STATUS			! Returned an error?
    THEN
	BEGIN				! Yes, then signal it somehow
	IF .STATUS EQLU LIB$_SYNTAXERR	! Is it a vanilla syntax error?
	THEN				! Yes, then build the arguments
	    NCP$SIG_CMDERR		! Signal a command syntax error
		(   (IF .PARSE_STATE [TPA$V_AMBIG]
		    THEN NCP$_AMBCMD	! Ambiguous keyword or
		    ELSE NCP$_SYNTAX	! Syntax error
		    ) OR STS$K_SEVERE,	! Severe error to stop
		.PARSE_STATE [TPA$L_TOKENCNT],
		.PARSE_STATE [TPA$L_TOKENPTR],
		.PARSE_STATE [TPA$L_STRINGCNT],
		.PARSE_STATE [TPA$L_STRINGPTR]
	    	)
	ELSE
	    SIGNAL (.STATUS)		! Punt the signal of anything else
	
	END
    ;

    RTN_DSC [0] = .PARSE_STATE		! Return the remainder of the string
    		[TPA$L_STRINGCNT];
    RTN_DSC [1] = .PARSE_STATE
    		[TPA$L_STRINGPTR];
    RETURN .STATUS			! and the status of the call

    END;

%SBTTL	'NCP$SIG_CMDERR  Signal a command syntax error'
GLOBAL ROUTINE NCP$SIG_CMDERR (CODE, TKN_CNT, TKN_PTR, STR_CNT, STR_PTR) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	A command error is signalled for printing.  The signal name is
!	code. The remainder of the arguments give the user context for his
!	error.  The context is cleaned up and passed on for printing.
!
!	If prompting is not active, we signal stop to avoid further error
!	messages being printed.  If prompting is active, we signal so that
!	the prompt will allow the user to correct his mistake.
!
! FORMAL PARAMETERS:
!
!	CODE		Value of status code to signal
!	TKN_CNT		Value of size of token in error
!	TKN_PTR		Address of token in error
!	STR_CNT		Value of size of remaining part of command
!	STR_PTR		Address of remaining part of command
!
! IMPLICIT INPUTS:
!
!	ACT$GL_PMT_Q	True for prompting active
!	NCP$_PRSCMD_DSC	Descriptor of parsed command
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Error condition signalled
!
! SIDE EFFECTS:
!
!	NONE
!
!--
    BEGIN

    LITERAL
	WDO_SIZ = 30			! Window size for error text
	;

        LOCAL
	BFR_CNT,			! Before counter for error
	BFR_PTR,			! Before pointer for error
	AFT_CNT
	;

    IF	(				! Check token position for reasonable
    	( (.TKN_PTR + .TKN_CNT) GEQA .STR_PTR )
    	AND
    	( (.TKN_PTR + .TKN_CNT) LSSA (.STR_PTR + .STR_CNT) )
    	)
    THEN				! If so then fix it up
	BEGIN
	STR_CNT = (.STR_PTR + .STR_CNT)	! Position string beyond token
		- (.TKN_PTR + .TKN_CNT);
	STR_PTR = .TKN_PTR + .TKN_CNT
	END
    ELSE				! If not reasonable, then punt it
	BEGIN
	TKN_PTR = .STR_PTR;		! Make token zero length
	TKN_CNT = 0
	END
    ;

    IF (BFR_CNT =			! Use some characters on either side
	.TKN_PTR - .NCP$_PRSCMD_DSC [1]) ! of the bad token
	GTRU
	WDO_SIZ
    THEN				! But not too many since the command
	BEGIN				! may be quite long
	BFR_PTR = .TKN_PTR - WDO_SIZ;
	BFR_CNT = WDO_SIZ
	END
    ELSE				! On short commands use it all
	BFR_PTR = .NCP$_PRSCMD_DSC [1]
    ;
    IF (AFT_CNT = 			! Compute the after part too
	.STR_CNT)
	GTRU
	WDO_SIZ
    THEN				! for some following context
	AFT_CNT = WDO_SIZ
    ;
    IF .ACT$GL_PMT_Q			! Is prompting active?
    THEN
	SIGNAL				! Signal to allow correction of errors
	    (.CODE, 6,			! Signal a syntax error
	    .BFR_CNT, .BFR_PTR,		! with all the context
	    .TKN_CNT, .TKN_PTR,
	    .AFT_CNT, .STR_PTR
	    )
    ELSE
	SIGNAL_STOP			! Signal stop to prevent further msgs
	    (.CODE, 6,			! Signal a syntax error
	    .BFR_CNT, .BFR_PTR,		! with all the context
	    .TKN_CNT, .TKN_PTR,
	    .AFT_CNT, .STR_PTR
	    )

    END;		! End of routine

%SBTTL	'ACT$INV_COMMAND  Action routine for invalid command'
GLOBAL ROUTINE ACT$INV_COMMAND (OPT, STRCNT, STRPTR, TKNCNT, TKNPTR,
		CHR, NUM, PARAM) =	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	Action routine to signal an invalid command.  Signal is either
!	for invalid command or ambiguous command if the AMBIG bit is
!	set in the parse options.
!
! FORMAL PARAMETERS:
!
!	Parse state table
!	OPT		Value of the parse options
!	STRCNT		Size of the remainder of the command line
!	STRPTR		Address of the remainder of the command line
!	TKNCNT		Size of the token in error
!	TKNPTR		Address of the token in error
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    NCP$SIG_CMDERR 			! Signal the error
	(   ( IF (.OPT AND TPA$M_AMBIG)	! Use the appropriate code
		NEQ 0
	      THEN NCP$_AMBCMD		! based on the ambiguous option bit
	      ELSE NCP$_INVCMD
	    ) OR STS$K_SEVERE,		! Make severe to stop
	.TKNCNT, .TKNPTR,		! the token in error
	.STRCNT, .STRPTR		! the remainder of the command line
	)

    END;			! End of routine

%SBTTL	'ACT$TMPSTR  Save a temporary string'
GLOBAL ROUTINE ACT$TMPSTR (OPT, STRCNT, STRPTR, TKNCNT, TKNPTR,
    			CHR, NUM, PARAM) =	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	Action routine to save a temporary string in a descriptor
!
! FORMAL PARAMETERS:
!
!	Parse state table
!	TKNCNT		Count of string
!	TKNPTR		Address of string
!	PARAM		Address of string descriptor to return
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	SUCCESS
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	PARAM : REF VECTOR [2]		! Address of string descriptor
	;
    PARAM [0] = .TKNCNT;		! Fill in the string descriptor
    PARAM [1] = .TKNPTR;		
    RETURN SUCCESS
    END;

%SBTTL	'ACT$BLNK_SIG  Blanks are significant'
GLOBAL ROUTINE ACT$BLNK_SIG (OPTIONS) =	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	Set parse options so blanks (spaces, tabs) are significant
!
! FORMAL PARAMETERS:
!
!	Parse state table
!	OPT		Options longword
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Success
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    					! Blanks are significant
    OPTIONS = .OPTIONS OR TPA$M_BLANKS ;
    RETURN SUCCESS

    END;

%SBTTL	'ACT$BLNK_NSIG  Blanks are not significant'
GLOBAL ROUTINE ACT$BLNK_NSIG (OPTIONS) =	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	Parse options are set so blanks (spaces, tabs) are not significant
!
! FORMAL PARAMETERS:
!
!	Parse state table
!	OPT		Options longword
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Success
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    OPTIONS = .OPTIONS AND (NOT TPA$M_BLANKS) ;	! Blanks not significant
    RETURN SUCCESS

    END;

%SBTTL	'ACT$ZAPTMPDSC  Zero a temporary descriptor'
GLOBAL ROUTINE ACT$ZAPTMPDSC (OPT, STRCNT, STRPTR, TKNCTR,TKNPTR,
				CHR, NUM, PARAM) =	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	Zero a list of descriptors for temporary strings
!
! FORMAL PARAMETERS:
!
!	Parse state table
!	PARAM		Address of PLIT for addresses of descriptor
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	SUCCESS
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	PARAM : REF VECTOR [10]		! Expect a rather long list
	;		!

    INCRU IDX	FROM 0			! Scan the PLIT for addresses
    		TO .PARAM [-1] - 1	! PLIT count
    DO
	.PARAM [.IDX] = 0		! Zap the count for the descriptor
    ;
    RETURN SUCCESS

    END;

%SBTTL	'ACT$PRMPT  Action routine to prompt'
GLOBAL ROUTINE ACT$PRMPT (OPT, STRCNT, STRPTR, TKNCNT, TKNPTR,
		CHR, NUM, PARAM) =	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	Prompt for the remaining portion of a command if input is
!	interactive.
!
! FORMAL PARAMETERS:
!
!	Parse state table
!	PARAM		Address of descriptor of prompt string
!
! IMPLICIT INPUTS:
!
!	NCP$CMD_BUF_DSC	Descriptor of command line buffer
!
! IMPLICIT OUTPUTS:
!
!	NCP$_PRSCMD_DSC	Descriptor of new command line portion
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Success or error signaled
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	PARAM : REF VECTOR		! Descriptor of prompt string
	;

    LOCAL
	STATUS
	;

    IF NOT NCP$CMD_TERM_Q ()		! If we are not on a terminal,
    THEN
	SIGNAL_STOP (NCP$_NOTDONE)	! Dump off with a special error
    ;

    STATUS = NCP$READ_CMD		! Read another command portion
    		(NCP$_CMDBUF_DSC,
    		.PARAM,
    		NCP$_PRSCMD_DSC
    		)
    ;
    IF NOT .STATUS			! Any error dumps us off
    THEN
	BEGIN
	IF .STATUS EQL RMS$_EOF
	THEN SIGNAL_STOP (NCP$_CMDCAN) ! Command canceled if EOF
    					! Report any other error too
	ELSE SIGNAL_STOP (NCP$_CMDERR, 0, .STATUS)
	END
    ;

    STRPTR = .NCP$_PRSCMD_DSC [1];	! Set parse state to the portion
    STRCNT = .NCP$_PRSCMD_DSC [0];

    RETURN SUCCESS			! And continue with parse

    END;

%SBTTL	'ACT$NUM_RNG  Check numeric ranges'
GLOBAL ROUTINE ACT$NUM_RNG (OPT, STRCNT, STRPTR, TKNCNT, TKNPTR,
		CHR, NUM, PARAM) =	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	Action routine to check numeric range of numeric parameter
!
! FORMAL PARAMETERS:
!
!	Parse state table
!	NUM		Value of the numeric token
!	PARAM		Address of range as two long words, low first
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Success or error signal
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	PARAM : REF VECTOR [2]		! Address of UPLIT (low, high)
	;

    IF	.NUM GEQU .PARAM [0] AND	! If inbounds return success
    	.NUM LEQU .PARAM [1]
    THEN
	RETURN SUCCESS
    ELSE
	BEGIN
	NCP$SIG_CMDERR			! Signal parameter out of range
	    (NCP$_PRMRNG,
	    .TKNCNT, .TKNPTR,
	    .STRCNT, .STRPTR
	    )
	;
	RETURN FAILURE			! Fail transition in parse table
	END

    END;

%SBTTL	'ACT$STR_LEN  Check string length'
GLOBAL ROUTINE ACT$STR_LEN (OPT, STRCNT, STRPTR, TKNCNT, TKNPTR,
    		CHR, NUM, PARAM) =	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	Action routine to check length of a string token.
!	Length is checked for strings with trailing spaces and
!	quoted strings.  Trailing spaces and tabs are removed and
!	quoted strings which must begin with a " are counted with
!	the quotes parsed correctly.
!
! FORMAL PARAMETERS:
!
!	Parse state table
!	TKNCNT			Length of the string token
!	PARAM			Value of the maximum length of token
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Success or error signal
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	PTR,				! Point into token
	PEND,				! End of token
	CTR				! Size of string
	;

    IF CH$RCHAR (.TKNPTR) EQL '"'	! Quoted string?
    THEN
	BEGIN
	CTR = 0;			! Setup counters and pointers
	PTR = .TKNPTR + 1;
	PEND = .TKNPTR + .TKNCNT;
	WHILE .PTR LSS .PEND		! Scan string
	DO
	    BEGIN
	    IF  CH$RCHAR_A (PTR) EQL '"' ! Quote inside?
	    THEN
		BEGIN
		IF  CH$RCHAR (.PTR) EQL '"'
		    AND
		    .PTR LSS .PEND
		THEN PTR = .PTR + 1	! Count one quote for two
		ELSE EXITLOOP		! Single quote ends it
		END
	    ;
	    CTR = .CTR + 1
	    END
	END
    ELSE
	BEGIN
	PTR = .TKNPTR + .TKNCNT - 1;	! Strip trailing spaces from token
	WHILE PTR GTRU .TKNPTR
	    AND
	    (
	    CH$RCHAR (.PTR) EQL ' '	! Space
	    OR
	    CH$RCHAR (.PTR) EQL 9	! Tab
	    )
	DO
	    PTR = .PTR - 1
	;
	CTR = (.PTR + 1) - .TKNPTR	! Compute real size of token
	END
    ;

    IF .CTR LEQU .PARAM			! Check size of token
    THEN
	RETURN SUCCESS
    ELSE
	BEGIN
	NCP$SIG_CMDERR			! Signal to print error message
	    (NCP$_PRMLEN,
	    .TKNCNT, .TKNPTR,
	    .STRCNT, .STRPTR
	    )
	;
	RETURN FAILURE			! Fail transition in parse table
	END

    END;

%SBTTL	'ACT$NXT_STATE  Set next state table for parse'
GLOBAL ROUTINE ACT$NXT_STATE (OPT, STRCNT, STRPTR, TKNCNT, TKNPTR,
    		CHR, NUM, PARAM) =	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	Setup pointers to skip to another state table to finish parse
!
! FORMAL PARAMETERS:
!
!	Parse state table
!	PARAM		Address of address pair - state_table, key_table
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Success
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	PARAM : REF VECTOR
	;		!

    NCP$_NXT_STATE [0] = .PARAM [0];	! State table address
    NCP$_NXT_STATE [1] = .PARAM [1];	! Key table address
    RETURN SUCCESS

    END;

%SBTTL	'ACT$WRI_STR  Write a string to the output device'
GLOBAL ROUTINE ACT$WRI_STR (OPT, STRCNT, STRPTR, TKNCNT, TKNPTR,
    		CHR, NUM, PARAM) =	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	Write a string to SYS$OUTPUT
!
! FORMAL PARAMETERS:
!
!	Parse state table
!	PARAM		Address of descriptor of the string
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Success
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN


    NCP$WRITE_LINE (.PARAM);		! Write the line
    RETURN SUCCESS

    END;

%SBTTL	'ACT$SIGNAL  Signal and error from parse'
GLOBAL ROUTINE ACT$SIGNAL (OPT, STRCNT, STRPTR, TKNCNT, TKNPTR,
    		CHR, NUM, PARAM) =	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	Signal and error from parse and return to parse
!
! FORMAL PARAMETERS:
!
!	Parse state table
!	PARAM		Value of status code to signal
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Success
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN


    SIGNAL (.PARAM);		! Signal the condition to print the message

    RETURN SUCCESS

    END;

%SBTTL	'ACT$PMT_ON  Enable prompting'
GLOBAL ROUTINE ACT$PMT_ON =	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	Action routine to enable prompting for command prompting
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	ACT$GL_PMT_Q
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Success
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN


    GLOBAL
	ACT$GL_PMT_Q			! True for prompting enabled
	;

    ACT$GL_PMT_Q = TRUE;		! Enable prompting

    RETURN SUCCESS			! Continue the parse

    END;

%SBTTL	'ACT$PMT_OFF  Disable prompting'
GLOBAL ROUTINE ACT$PMT_OFF =	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	Action routine to disable command prompting
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	ACT$GL_PMT_Q
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Success
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    ACT$GL_PMT_Q = FALSE;		! Disable prompting

    RETURN SUCCESS			! Continue the parse

    END;

%SBTTL	'ACT$PMT_Q  Control command prompting'
GLOBAL ROUTINE ACT$PMT_Q (OPT, STRCNT, STRPTR, TKNCNT, TKNPTR,
    		CHR, NUM, PARAM) =	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	Action routine to control command prompting
!	These three routines work with the COMMAND_PROMPT
!	macro to control command prompting.  Keywords or
!	an entity is prompted if the state is entered with
!	the TPA$_EOS condition.  ACT$PMT_ON and _OFF are used
!	to set prompting on or off.  If prompting is on and
!	any other transition fails, this action routine is called
!	to signal an error and set the EOS condition so ACT$PRMPT
!	will obtain the next string to try.  The parse loops in the
!	state until an acceptable response is given or EOF causes
!	return to the initial command level.
!
! FORMAL PARAMETERS:
!
!	Parse state table
!	PARAM		Value of status code to signal if non-zero
!
! IMPLICIT INPUTS:
!
!	ACT$GL_PMT_Q
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Success of prompting, failure if not promting
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    IF .ACT$GL_PMT_Q			! If prompting
    THEN
	BEGIN
	IF .PARAM NEQ 0			! If condition to signal
	THEN  SIGNAL (.PARAM)		! Signal the condition
	;
	STRCNT = 0;			! Set for EOS parse to occur
	RETURN SUCCESS			! Continue parse
	END

    ELSE
	RETURN FAILURE			! Cause failure in state

    END;

%SBTTL	'ACT$EXECQ  Test if Component is Executor'
GLOBAL ROUTINE ACT$EXECQ (OPT, STRCNT, STRPTR, TKNCNT, TKNPTR,
    		CHR, NUM, PDB) =	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	Action routine to test if the current node component is the
!	executor node.  Called from the ncpstanod module to select
!	the correct parameters for prompting.
!	The executor is coded as an address of zero, that is three
!	data bytes of zero.
!
! FORMAL PARAMETERS:
!
!	Parse state table
!	PDB		Address of PDB data block for the component.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Success if component is executor node, failure if not
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	PDB : REF BBLOCK [PDB$C_SIZE]	! Pointer to the component PDB
	;

    IF .PDB [1, 0, 24, 0] EQL 0		! Look at three bytes of the data
    THEN
	RETURN SUCCESS			! It is the executor

    ELSE
	RETURN FAILURE			! Cause failure in state

    END;

%SBTTL	'ACT$PMTDONEQ  Terminate Prompts?'
GLOBAL ROUTINE ACT$PMTDONEQ (OPT, STRCNT, STRPTR, TKNCNT, TKNPTR,
    		CHR, NUM, PDB) =	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine checks the parsed token to see if it is "_DONE".
!	If so the routine returns success and the parse tables exit the
!	prompt sequence.  Otherwise the routine returns false and the
!	remainder of the prompts are processed.
!
! FORMAL PARAMETERS:
!
!	Parse state
!	TKNCNT			Descriptor of token just parsed
!	TKNPTR
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Success or failure
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    IF CH$EQL (.TKNCNT, .TKNPTR, 5, UPLIT BYTE ('_DONE'), 0)
    THEN
	RETURN SUCCESS
    ELSE
	RETURN FAILURE

    END;


END				!End of module
ELUDOM
