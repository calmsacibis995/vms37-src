%TITLE	'X.25 Protocol Module Parsing'
MODULE NCPSTAMPR (IDENT = 'V03-000',LIST(NOOBJECT)) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	Network Control Program (NCP)
!
! ABSTRACT:
!
!	States and data for the parsing of NCP X.25 protocol
!	module parameters.
!
! ENVIRONMENT:	VAX/VMS Operating System
!
! AUTHOR:	Tim Halvorsen, July 1981
!
! MODIFIED BY:
!
!--

%SBTTL	'Definitions'

!
! INCLUDE FILES:
!

	LIBRARY 'LIB$:NMALIBRY';
	LIBRARY 'LIB$:NCPLIBRY';
	LIBRARY 'SYS$LIBRARY:TPAMAC';

!
! EXTERNAL REFERENCES:
!

	ACT_DFN			! Action routine externals

%SBTTL	'Set Parameter blocks'

!
!	SET X25-PROTOCOL Parameter Blocks
!

	BUILD_PCL

	(MPR,					! Module X25-PROTOCOL

	DTE, TKN,	PCXP_DTE, ,
	GRP, TKN,	PCXP_GRP, ,

	STA, NUMB,	PCXP_STA, ,
	CTM, NUMW,	PCXP_CTM, ,
	NET, TKN,	PCXP_NET, ,
	LIN, TKN,	PCXP_LIN, ,
	CHN, SAD,	PCXP_CHN, ,
	MCH, NUMW,	PCXP_MCH, ,
	DBL, NUMW,	PCXP_DBL, ,
	DWI, NUMB,	PCXP_DWI, ,
	MBL, NUMW,	PCXP_MBL, ,
	MWI, NUMB, 	PCXP_MWI, ,
	MCL, NUMB,	PCXP_MCL, ,
	MRS, NUMB,	PCXP_MRS, ,
	MST, NUMB,	PCXP_MST, ,
	CAT, NUMB,	PCXP_CAT, ,
	CLT, NUMB,	PCXP_CLT, ,
	RST, NUMB,	PCXP_RST, ,
	STT, NUMB,	PCXP_STT, ,
	GDT, TKN,	PCXP_GDT, ,
	GNM, NUMW,	PCXP_GNM, ,
	GTY, NUMB,	PCXP_GTY, ,

	, END, , ,

	)

	BUILD_PBK

	(MPR,					! Module X25-PROTOCOL

	STAON,  LITB, NMA$C_XPRST_ON, MPR_STA,
	STAOFF, LITB, NMA$C_XPRST_OFF, MPR_STA,
	STASHU, LITB, NMA$C_XPRST_SHU, MPR_STA,
	CTM, NUMW, , ,
	DTE, TKN, , ,
	KDT, LITB, NMA$C_ENT_KNO, MPR_DTE,	! KNOWN DTES
	GRP, TKN, , ,
	KGR, LITB, NMA$C_ENT_KNO, MPR_GRP,	! KNOWN GROUPS
	NET, TKN, , ,
	LIN, TKN, , ,
	CHN, SAD, , ,
	MCH, NUMW, , ,
	DBL, NUMW, , ,
	DWI, NUMB, , ,
	MBL, NUMW, , ,
	MWI, NUMB, , ,
	MCL, NUMB, , ,
	MRS, NUMB, , ,
	MST, NUMB, , ,
	CAT, NUMB, , ,
	CLT, NUMB, , ,
	RST, NUMB, , ,
	STT, NUMB, , ,
	GDT, TKN, , ,
	GNM, NUMW, , ,
	GTYBIL, LITB, NMA$C_XPRTY_BIL, MPR_GTY,

	)

BIND	PDB$G_MPR_ENT =			! Protocol entity name
	UPLIT BYTE(0, %ASCIC 'X25-PROTOCOL');

	BUILD_SDB

	(MPR, NMA$C_ENT_MOD, MPR_ENT, MPR)

%SBTTL	'Clear Parameter blocks'

!
!	CLEAR X25-PROTOCOL Parameter Blocks
!

	BUILD_PCL

	(CPR,				! Module X25-PROTOCOL

	DTE, TKN,	PCXP_DTE, ,
	GRP, TKN,	PCXP_GRP, ,

	STA, LITB,	PCXP_STA, ,
	CTM, LITB,	PCXP_CTM, ,
	NET, LITB,	PCXP_NET, ,
	LIN, LITB,	PCXP_LIN, ,
	CHN, LITB,	PCXP_CHN, ,
	MCH, LITB,	PCXP_MCH, ,
	DBL, LITB,	PCXP_DBL, ,
	DWI, LITB,	PCXP_DWI, ,
	MBL, LITB,	PCXP_MBL, ,
	MWI, LITB, 	PCXP_MWI, ,
	MCL, LITB,	PCXP_MCL, ,
	MRS, LITB,	PCXP_MRS, ,
	MST, LITB,	PCXP_MST, ,
	CAT, LITB,	PCXP_CAT, ,
	CLT, LITB,	PCXP_CLT, ,
	RST, LITB,	PCXP_RST, ,
	STT, LITB,	PCXP_STT, ,
	GDT, LITB,	PCXP_GDT, ,
	GNM, LITB,	PCXP_GNM, ,
	GTY, LITB,	PCXP_GTY, ,

	, END, , ,

	)

	BUILD_PBK

	(CPR,					! Module X25-PROTOCOL

	ALL, LITB, 0, VRB_ALL,

	STA, LITB, 0, ,
	CTM, LITB, 0, ,
	DTE, TKN, , ,
	KDT, LITB, NMA$C_ENT_KNO, CPR_DTE,	! KNOWN DTES
	GRP, TKN, , ,
	KGR, LITB, NMA$C_ENT_KNO, CPR_GRP,	! KNOWN GROUPS
	NET, LITB, 0, ,
	LIN, LITB, 0, ,
	CHN, LITB, 0, ,
	MCH, LITB, 0, ,
	DBL, LITB, 0, ,
	DWI, LITB, 0, ,
	MBL, LITB, 0, ,
	MWI, LITB, 0, ,
	MCL, LITB, 0, ,
	MRS, LITB, 0, ,
	MST, LITB, 0, ,
	CAT, LITB, 0, ,
	CLT, LITB, 0, ,
	RST, LITB, 0, ,
	STT, LITB, 0, ,
	GDT, LITB, 0, ,
	GNM, LITB, 0, ,
	GTY, LITB, 0, ,

	)

	BUILD_SDB

	(CPR, NMA$C_ENT_MOD, MPR_ENT, CPR)

%SBTTL	'Prompt strings'

!
!	Build prompt strings
!

BIND

	PROMPT_STRINGS
	(MPR,

	DAT, '    (DTE number, GROUP name, or KNOWN): ',
	KWN, '                        (DTES, GROUPS): ',

	CAT, 'Call timer             (1-255 seconds): ',
	CLT, 'Clear timer            (1-255 seconds): ',
	DBL, 'Default block          (1-65535 bytes): ',
	DWI, 'Default window          (1-255 blocks): ',
	MBL, 'Maximum block          (1-65535 bytes): ',
	MCL, 'Maximum clears                 (1-255): ',
	MRS, 'Maximum resets                 (1-255): ',
	MST, 'Maximum restarts               (1-255): ',
	MWI, 'Maximum window          (1-255 blocks): ',
	NET, 'Network name         (1-16 characters): ',
	RST, 'Reset timer            (1-255 seconds): ',
	STT, 'Restart timer          (1-255 seconds): ',

	DTE, 'DTE number               (1-16 digits): ',
	CHN, 'Channel list     (delimited by commas): ',
	CTM, 'Counter timer        (1-65535 seconds): ',
	LIN, 'Line name                  (dev-c-u.t): ',
	STA, 'State                  (ON, OFF, SHUT): ',

	GRP, 'Group name           (1-16 characters): ',
	GDT, 'Group DTE number         (1-16 digits): ',
	GNM, 'Group number                  (0-9999): ',
	GTY, 'Group type                 (BILATERAL): ',
	),

	PROMPT_STRINGS
	(CPR,

	DAT, '    (DTE number, GROUP name, or KNOWN): ',
	KWN, '                        (DTES, GROUPS): ',

	ALL, 'All X.25 protocol parameters    (Y, N): ',
	CAT, 'Call timer                      (Y, N): ',
	CLT, 'Clear timer                     (Y, N): ',
	MCL, 'Maximum clears                  (Y, N): ',
	MRS, 'Maximum resets                  (Y, N): ',
	MST, 'Maximum restarts                (Y, N): ',
	MWI, 'Maximum window                  (Y, N): ',
	RST, 'Reset timer                     (Y, N): ',
	STT, 'Restart timer                   (Y, N): ',

	DTE, 'DTE number                      (Y, N): ',
	CTM, 'Counter timer                   (Y, N): ',
	LIN, 'Line name                       (Y, N): ',

	GRP, 'Group name                      (Y, N): ',
	GDT, 'Group DTE number                (Y, N): ',
	GTY, 'Group type                      (Y, N): ',
	);

%SBTTL	'Declare entry points to TPARSE tables'

!
!	Declare entry points to this TPARSE table
!

$INIT_STATE (NCP$G_STTBL_MPR, NCP$G_KYTBL_MPR);

FORWARD
	ST_CPR:	VECTOR [0];	! Clear X25-PROTOCOL

GLOBAL BIND
	NCP$G_STTBL_CPR = ST_CPR,
	NCP$G_KYTBL_CPR = NCP$G_KYTBL_MPR;

%SBTTL	'SET X25-PROTOCOL Module Parameters'

!
!	SET/DEFINE MODULE X25-PROTOCOL parameter states
!

$STATE	(ST_MPR,
	(TPA$_EOS, ST_MPR_PMT_DAT),
	(TPA$_LAMBDA, ST_MPR_PRC)
	);

!
!	Determine which protocol sub-database we are talking about
!	(due to grouping restrictions, the command must not mix
!	sub-database parameters).  The sub-database may be either
!	protocol, closed user group, or DTE parameters.
!

$STATE	(ST_MPR_PMT_DAT,
	(TPA$_LAMBDA,, ACT$PRMPT,,, PMT$G_MPR_DAT));

$STATE	(ST_MPR_DAT,		! Determine whether GROUP or DTE parameters
	('GROUP',	ST_MPR_DAT_GRP),
	('DTE',		ST_MPR_DAT_DTE),
	('KNOWN',	ST_MPR_DAT_KWN),
	(TPA$_EOS),
	(TPA$_LAMBDA,	ST_MPR_PMT_DAT, ACT$SIGNAL,,, NCP$_INVKEY)
	);

!
!	Prompt for protocol parameters
!

	PROMPT_STATES
	(MPR,
	CAT, CLT, DBL, DWI, MBL, MCL, MRS, MST, MWI, NET, RST,
	STT)

$STATE	(,
	(TPA$_LAMBDA, ST_MPR_DOIT));

!
!	Prompt for closed user group parameters
!

$STATE	(ST_MPR_DAT_GRP,
	((SE_GRP_NAME),, ACT$SAVPRM,,, PBK$G_MPR_GRP));

$STATE	(ST_MPR_PMT_GRP,
	(TPA$_LAMBDA));

	PROMPT_STATES
	(MPR,
	GDT, GNM, GTY)

$STATE	(,
	(TPA$_LAMBDA, ST_MPR_DOIT));

!
!	Prompt for DTE parameters
!

$STATE	(ST_MPR_DAT_DTE,
	((SE_DTE_NUMBER),, ACT$SAVPRM,,, PBK$G_MPR_DTE));

$STATE	(ST_MPR_PMT_DTE,
	(TPA$_LAMBDA));

	PROMPT_STATES
	(MPR,
	CHN, CTM, LIN, STA)

$STATE	(ST_MPR_DOIT,
	(TPA$_EOS, TPA$_EXIT, ACT$VRB_UTILITY, , , SDB$G_MPR),
	);

!
!	Dispatch on KNOWN keyword during prompting
!

$STATE	(ST_MPR_DAT_KWN,
	(TPA$_LAMBDA));

	COMMAND_PROMPT
	(MPR, KWN, NCP$_INVKEY,

	('DTES', ST_MPR_PMT_DTE, ACT$SAVPRM,,, PBK$G_MPR_KDT),
	('GROUPS', ST_MPR_PMT_GRP, ACT$SAVPRM,,, PBK$G_MPR_KGR)
	)


!
!	Dispatch States
!

$STATE	(ST_MPR_PRC,

	((SE_ALL), ST_MPR_DOIT),

	DISPATCH_STATES
	(MPR,

	CAT, 'CALL',
	CLT, 'CLEAR',
	CHN, 'CHANNELS',
	CTM, 'COUNTER',
	DEF, 'DEFAULT',
	DTE, 'DTE',
	GRP, 'GROUP',
	KWN, 'KNOWN',
	LIN, 'LINE',
	MAX, 'MAXIMUM',
	NET, 'NETWORK',
	GNM, 'NUMBER',
	RST, 'RESET',
	STT, 'RESTART',
	STA, 'STATE',
	GTY, 'TYPE',

	)
	,(TPA$_EOS, ST_MPR_DOIT)
	);


!
!	Dispatch on KNOWN keyword
!

$STATE	(ST_MPR_PRC_KWN,
	((SE_MPR_KWN), ST_MPR_PRC));

$STATE	(SE_MPR_KWN,

	KEYWORD_STATE
	(MPR,

	KDT, 'DTES',
	KGR, 'GROUPS',

	));

!
!	Dispatch on MAXIMUM keyword
!

$STATE	(ST_MPR_PRC_MAX,

	DISPATCH_STATES
	(MPR,

	MBL, 'BLOCK',
	MCL, 'CLEARS',
	MRS, 'RESETS',
	MST, 'RESTARTS',
	MWI, 'WINDOW',

	)
	);

!
!	Dispatch on DEFAULT keyword
!

$STATE	(ST_MPR_PRC_DEF,
	
	DISPATCH_STATES
	(MPR,

	DBL, 'BLOCK',
	DWI, 'WINDOW',

	)
	);


!
!	Process states - call subexpressions to store value
!

	PROCESS_STATES
	(MPR,

	STA, ,
	CTM, 'TIMER',
	DTE, ,
	GRP, ,
	NET, ,
	LIN, ,
	CHN, ,
	DBL, ,				! From DEF
	DWI, ,				! From DEF
	MBL, ,				! From MAX
	MWI, ,				! From MAX
	MCL, ,				! From MAX
	MRS, ,				! From MAX
	MST, ,				! From MAX
	CAT, 'TIMER',
	CLT, 'TIMER',
	RST, 'TIMER',
	STT, 'TIMER',
	GDT, ,
	GNM, ,
	GTY, ,

	)


!
!	Sub_expressions
!

	SUB_EXPRESSIONS
	(MPR,

	CTM, TPA$_DECIMAL,
	DTE, (SE_DTE_NUMBER),
	GRP, (SE_GRP_NAME),
	NET, (SE_NET_NAME),
	LIN, (SE_LINE_ID),
	CHN, (SE_SUBADR_RANGE),
	DBL, TPA$_DECIMAL,
	DWI, TPA$_DECIMAL,
	MBL, TPA$_DECIMAL,
	MWI, TPA$_DECIMAL,
	MCL, TPA$_DECIMAL,
	MRS, TPA$_DECIMAL,
	MST, TPA$_DECIMAL,
	CAT, TPA$_DECIMAL,
	CLT, TPA$_DECIMAL,
	RST, TPA$_DECIMAL,
	STT, TPA$_DECIMAL,
	GDT, (SE_DTE_NUMBER),
	GNM, TPA$_DECIMAL,

	)

!
!	X.25 protocol state
!

$STATE	(ST_MPR_STA,

	KEYWORD_STATE
	(MPR,

	STAOFF, 'OFF',
	STAON, 'ON',
	STASHU, 'SHUT',

	));

!
!	X.25 protocol type
!

$STATE	(ST_MPR_GTY,

	KEYWORD_STATE
	(MPR,

	GTYBIL, 'BILATERAL',

	));

%SBTTL	'CLEAR X25-PROTOCOL Module Parameters'

!
!	CLEAR/PURGE MODULE X25-PROTOCOL parameter states
!

$STATE	(ST_CPR,
	(TPA$_EOS, ST_CPR_PMT_DAT),
	(TPA$_LAMBDA, ST_CPR_PRC)
	);

!
!	Determine which protocol sub-database we are talking about
!	(due to grouping restrictions, the command must not mix
!	sub-database parameters).  The sub-database may be either
!	protocol, closed user group, or DTE parameters.
!

$STATE	(ST_CPR_PMT_DAT,
	(TPA$_LAMBDA,, ACT$PRMPT,,, PMT$G_CPR_DAT));

$STATE	(ST_CPR_DAT,		! Determine whether GROUP or DTE parameters
	('GROUP',	ST_CPR_DAT_GRP),
	('DTE',		ST_CPR_DAT_DTE),
	('KNOWN',	ST_CPR_DAT_KWN),
	(TPA$_EOS),
	(TPA$_LAMBDA,	ST_CPR_PMT_DAT, ACT$SIGNAL,,, NCP$_INVKEY)
	);

!
!	Prompt for protocol parameters
!

	QUERY_STATES
	(CPR,
	ALL, CAT, CLT, MCL, MRS, MST, RST, STT)

$STATE	(,
	(TPA$_LAMBDA, ST_CPR_DOIT));

!
!	Prompt for closed user group parameters
!

$STATE	(ST_CPR_DAT_GRP,
	((SE_GRP_NAME),, ACT$SAVPRM,,, PBK$G_CPR_GRP));

$STATE	(ST_CPR_PMT_GRP,
	(TPA$_LAMBDA));

	QUERY_STATES
	(CPR,
	GDT, GTY)

$STATE	(,
	(TPA$_LAMBDA, ST_CPR_DOIT));

!
!	Prompt for DTE parameters
!

$STATE	(ST_CPR_DAT_DTE,
	((SE_DTE_NUMBER),, ACT$SAVPRM,,, PBK$G_CPR_DTE));

$STATE	(ST_CPR_PMT_DTE,
	(TPA$_LAMBDA));

	QUERY_STATES
	(CPR,
	CTM, LIN)

$STATE	(ST_CPR_DOIT,
	(TPA$_EOS, TPA$_EXIT, ACT$VRB_UTILITY, , , SDB$G_CPR),
	);

!
!	Dispatch on KNOWN keyword during prompting
!

$STATE	(ST_CPR_DAT_KWN,
	(TPA$_LAMBDA));

	COMMAND_PROMPT
	(CPR, KWN, NCP$_INVKEY,

	('DTES', ST_CPR_PMT_DTE, ACT$SAVPRM,,, PBK$G_CPR_KDT),
	('GROUPS', ST_CPR_PMT_GRP, ACT$SAVPRM,,, PBK$G_CPR_KGR)
	)


!
!	Dispatch States
!

$STATE	(ST_CPR_PRC,

	DISPATCH_STATES
	(CPR,

	ALL, 'ALL',
	CAT, 'CALL',
	CLT, 'CLEAR',
	CHN, 'CHANNELS',
	CTM, 'COUNTER',
	DEF, 'DEFAULT',
	DTE, 'DTE',
	GRP, 'GROUP',
	KWN, 'KNOWN',
	LIN, 'LINE',
	MAX, 'MAXIMUM',
	NET, 'NETWORK',
	GNM, 'NUMBER',
	RST, 'RESET',
	STT, 'RESTART',
	STA, 'STATE',
	GTY, 'TYPE',
	)
	,(TPA$_EOS, ST_CPR_DOIT)
	);


!
!	Dispatch on KNOWN keyword
!

$STATE	(ST_CPR_PRC_KWN,
	((SE_CPR_KWN), ST_CPR_PRC));

$STATE	(SE_CPR_KWN,

	KEYWORD_STATE
	(CPR,

	KDT, 'DTES',
	KGR, 'GROUPS',

	));

!
!	Dispatch on MAXIMUM keyword
!

$STATE	(ST_CPR_PRC_MAX,

	DISPATCH_STATES
	(CPR,

	MBL, 'BLOCK',
	MCL, 'CLEARS',
	MRS, 'RESETS',
	MST, 'RESTARTS',
	MWI, 'WINDOW',

	)
	);

!
!	Dispatch on DEFAULT keyword
!

$STATE	(ST_CPR_PRC_DEF,
	
	DISPATCH_STATES
	(CPR,

	DBL, 'BLOCK',
	DWI, 'WINDOW',

	)
	);


!
!	Process states - call subexpressions to store parameter ID's
!

	PROCESS_STATES
	(CPR,

	ALL, ,
	STA, ,
	CTM, 'TIMER',
	DTE, ,
	GRP, ,
	NET, ,
	LIN, ,
	CHN, ,
	DBL, ,				! From DEF
	DWI, ,				! From DEF
	MBL, ,				! From MAX
	MWI, ,				! From MAX
	MCL, ,				! From MAX
	MRS, ,				! From MAX
	MST, ,				! From MAX
	CAT, 'TIMER',
	CLT, 'TIMER',
	RST, 'TIMER',
	STT, 'TIMER',
	GDT, ,
	GNM, ,
	GTY, ,

	)


!
!	Sub_expressions
!

	SUB_EXPRESSIONS
	(CPR,

	ALL, TPA$_EOS,

	STA, TPA$_LAMBDA,
	CTM, TPA$_LAMBDA,
	DTE, (SE_DTE_NUMBER),
	GRP, (SE_GRP_NAME),
	NET, TPA$_LAMBDA,
	LIN, TPA$_LAMBDA,
	CHN, TPA$_LAMBDA,
	DBL, TPA$_LAMBDA,
	DWI, TPA$_LAMBDA,
	MBL, TPA$_LAMBDA,
	MWI, TPA$_LAMBDA,
	MCL, TPA$_LAMBDA,
	MRS, TPA$_LAMBDA,
	MST, TPA$_LAMBDA,
	CAT, TPA$_LAMBDA,
	CLT, TPA$_LAMBDA,
	RST, TPA$_LAMBDA,
	STT, TPA$_LAMBDA,
	GDT, TPA$_LAMBDA,
	GNM, TPA$_LAMBDA,
	GTY, TPA$_LAMBDA,
	)

%SBTTL	'Define Subexpressions'

!
!	Define Subexpressions from Library
!

	SEM_ALL			! All parameter
	SEM_LINE_ID		! Device name string
	SEM_DTE_NUMBER		! DTE call number string
	SEM_GRP_NAME		! Group name
	SEM_NET_NAME		! Network name
	SEM_SUBADR_RANGE	! Subaddress range
	SEM_QUERY		! Query state subexpressions

END
ELUDOM
