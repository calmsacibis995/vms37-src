%TITLE	'Main Entry'
MODULE NCPMAIN (IDENT = 'V03-000', MAIN = NCP$MAIN,
		ADDRESSING_MODE(EXTERNAL=GENERAL),
		ADDRESSING_MODE(NONEXTERNAL=GENERAL)) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	NCP Network Control Program
!
! ABSTRACT:
!
!	NCP main entry and command line acceptance
!
! ENVIRONMENT:	VAX/VMS Operating System
!
! AUTHOR:	Darrell Duffy	, CREATION DATE: 17-August-1979
!
! MODIFIED BY:
!
!	V002	TMH0002		Tim Halvorsen	13-Jul-1981
!		Change all non-local references to general addressing.
!
!	V001	TMH0001		Tim Halvorsen	13-Jun-1981
!		If invoked via DCL foreign command and there is
!		text following the "verb", then execute the text
!		as a single NCP command and exit.
!--

%SBTTL	'Definitions'

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
	NCP$COND_HDLR,
	NCP$READ_CMD
	;		!

!
! INCLUDE FILES:
!

LIBRARY 'OBJ$:NCPLIBRY.L32';
LIBRARY 'SYS$LIBRARY:STARLET.L32';
LIBRARY 'SYS$LIBRARY:TPAMAC.L32';

!
! MACROS:
!

!
! EQUATED SYMBOLS:
!


!
! OWN STORAGE:
!


!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
	NCP$INIT_TRMIO,			! Initialize terminal I/O
	NCP$STARTNETACP : NOVALUE,	! Start the network if not
	NCP$READ_LINE,			! Read a line from SYS$INPUT
	NCP$WRITE_LINE,			! Write a line to SYS$OUTPUT
	NCP$PARSE_CMD,			! Parse a command line
	NCP$UNTELL,			! Remove the tell executor
	ACT$VRB_CLEXEC,			! Remove the current executor and
					! Establish the local node as exec
	LIB$GET_FOREIGN: ADDRESSING_MODE(GENERAL); ! Get foreign command line

%SBTTL	'NCP$MAIN  Main Entry'
ROUTINE NCP$MAIN =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Main entry for NCP
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NCP$GL_CLIVERIFY	Set to state of calling cli verify
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Exit code for NCP
!
! SIDE EFFECTS:
!
!	LOTS
!
!--

    BEGIN

    BUILTIN
	FP,				! Frame pointer
	AP				! Argument pointer
	;

    LITERAL
	SYSIN_BUF_SIZ = 512		! Size of input buffer
	;

    OWN
	CMD_DSC : VECTOR [2],		! Command line buffer descriptor
	SYSIN_BUF : 			! Sys$input buffer
	    VECTOR [SYSIN_BUF_SIZ, BYTE]
	;

    BIND
	NCP_PMT_DSC =			! Descriptor of NCP prompt
		ASCID ('NCP>'),
	CLIBLK = AP: REF BBLOCK		! Arg block from calling cli (DCL)
	;

    GLOBAL BIND
	NCP$_CMDBUF_DSC = 		! Descriptor for sysinbuf
		UPLIT (SYSIN_BUF_SIZ, SYSIN_BUF)
	;

    LOCAL
	RTN_DSC : VECTOR [2]		! Returned descriptor
	;

    EXTERNAL
	NCP$G_BEGIN_ZERO,		! Parameter data blocks to clear
	NCP$G_END_ZERO,			! End of the blocks
	NCP$G_STATE_TBL,		! State table for parsing
	NCP$G_KEY_TBL,
	NCP$GL_CLIVERIFY		! State of cli verify (set here)
	;

!
! 	Obtain setting for CLI verify.  We will echo commands to
! 	SYS$OUTPUT only if verify is set and SYS$OUTPUT is not a
! 	terminal device.
!

    NCP$GL_CLIVERIFY = .CLIBLK [CLI$V_VERIFY];

    NCP$INIT_TRMIO ();			! Initialize terminal I/O

    NCP$STARTNETACP ();			! Start the network, if not started
    .FP = NCP$COND_HDLR;		! Enable the handler

    ACT$VRB_CLEXEC ();			! Establish link to local node

    IF LIB$GET_FOREIGN(NCP$_CMDBUF_DSC,0,CMD_DSC) ! If a foreign command,
	AND .CMD_DSC [0] NEQ 0		! and there is a command line,
    THEN
	BEGIN
	CMD_DSC [1] = SYSIN_BUF;	! Construct descriptor of line
	CH$FILL(0,NCP$G_END_ZERO-NCP$G_BEGIN_ZERO,	! Zero parameters
		NCP$G_BEGIN_ZERO);
	NCP$PARSE_CMD(CMD_DSC,NCP$G_STATE_TBL,NCP$G_KEY_TBL,RTN_DSC);
	RETURN TRUE;
	END;
	
    WHILE NCP$READ_CMD 			! Read line into buffer
	    (
	    NCP$_CMDBUF_DSC,		! Buffer descriptor
	    NCP_PMT_DSC,		! Prompt descriptor
	    CMD_DSC			! Return dsc of line
	    )
    DO					! Do so until error returned
	BEGIN

	CH$FILL				! Zero the parameter block area
	    (
	    0,				! Fill character
	    NCP$G_END_ZERO - NCP$G_BEGIN_ZERO, ! Count
	    NCP$G_BEGIN_ZERO		! Beginning address
	    );

	NCP$PARSE_CMD			! Parse the command
	    (
	    CMD_DSC,
	    NCP$G_STATE_TBL,
	    NCP$G_KEY_TBL,
	    RTN_DSC
	    );

	NCP$UNTELL ()			! Remove the tell executor

	END
    ;
    RETURN TRUE				! Return with success
    END;

%SBTTL	'NCP$READ_CMD  Read and build a command'
GLOBAL ROUTINE NCP$READ_CMD (INP_DSC, PMT_DSC, RTN_DSC) =	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	Read a command with comments (!) and continuation lines (-)
!	and return a descriptor to the line within the input buffer.
!
! FORMAL PARAMETERS:
!
!	INP_DSC		Address of the input buffer descriptor
!	PMT_DSC		Address of a descriptor of a prompt string
!	RTN_DSC		Address of the descriptor to return
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Return code from NCP$READ_LINE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LITERAL
	SPACE	= 32,			! Character code for a space
	TAB	= 9			! Character code for a tab
	;

    MAP
	INP_DSC : REF VECTOR [2],	! Input buffer descriptor
	RTN_DSC : REF VECTOR [2],	! Return command descriptor
	PMT_DSC : REF VECTOR [2]	! Prompt descriptor
	;

    LOCAL
	CMD_DSC : VECTOR [2],		! Temp descriptor for command
	STATUS,				! Hold status value here
	CHAR,				! Temp for character
	LAST_ADR			! Temp for address of last byte of
					! command
	;		!

    CMD_DSC [0] = .INP_DSC [0];		! Initialize temp dsc
    CMD_DSC [1] = .INP_DSC [1];

    DO					! Read and skip comments
	IF NOT (STATUS =
		NCP$READ_LINE		! Read a line
		    (
		    CMD_DSC,		! Into here
		    .PMT_DSC,		! With this prompt
		    .RTN_DSC		! Return descriptor here
		    )
		)

	THEN RETURN .STATUS		! Return failure
    WHILE CH$RCHAR (CH$PTR(.RTN_DSC [1]) )
		EQLU '!'		! Comments begin with !
    ;

    DO
	BEGIN
	LAST_ADR = .RTN_DSC [1] +	! Address of last char + 1
		.RTN_DSC [0];
	DO
	    BEGIN
	    LAST_ADR = .LAST_ADR - 1;	! Backup last address
	    CHAR = CH$RCHAR (		! and fetch the character there
			CH$PTR (.LAST_ADR) )
	    END
	WHILE (.CHAR EQLU SPACE) OR	! Scan back until not blank
		(.CHAR EQLU TAB)
	;
	IF .CHAR NEQU '-'		! If this is not a continuation line
	THEN EXITLOOP			! nope, we are done
	;
	CMD_DSC [1] = .LAST_ADR;	! Read starting here
	CMD_DSC [0] = .CMD_DSC [0]	! For the remaining space
    		- .RTN_DSC [0]
	END
    WHILE 
	(
	STATUS = 
	NCP$READ_LINE 			! Read another line
	    (
	    CMD_DSC,
	    ASCID ('_ '),		! Prompt for continuation lines
	    .RTN_DSC
	    )
	)
    ;
    RTN_DSC [0] = .LAST_ADR		! Return appropriate length
    		- .INP_DSC [1] + 1 ;
    RTN_DSC [1] = .INP_DSC [1];		! and address
    RETURN .STATUS			! and the status code
    END;

%SBTTL	'NCP$COND_HDLR  Condition handler'
ROUTINE NCP$COND_HDLR (SIGARY, MCHARY) =	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	Main condition handler for NCP.  It receives a signal which is
!	either an internal error or a standard system status.  If it is
!	an internal error, it prints a message.  Otherwise it resignals
!	the condition.
!
! FORMAL PARAMETERS:
!
!	Standard condition handler argument list
!	SIGARY		Address of signal array
!	MCHARY		Address of mechanism array
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Condition Resignaled, stack unwound
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	SIGARY : REF BBLOCK,		! Signal array
	MCHARY : REF BBLOCK		! Mechanism array
	;

    LOCAL
	ERRCODE : BBLOCK [4]		! Error code value
	;		!

    EXTERNAL LITERAL
	NCP$_FACILITY			! NCP Facility code
	;

    ERRCODE = .SIGARY [CHF$L_SIG_NAME]; ! The value of the status code

    IF .ERRCODE [STS$V_FAC_NO]		! Is it ours?
	EQL NCP$_FACILITY
    THEN				! yes
	BEGIN
	SIGARY [CHF$L_SIG_ARGS] =	! Make signal array into message vec
	    .SIGARY [CHF$L_SIG_ARGS] - 2;
	$PUTMSG				! Write the message out
	    (
	    MSGVEC = .SIGARY
	    );
	SIGARY [CHF$L_SIG_ARGS] =	! Make mess vec into signal array
	    .SIGARY [CHF$L_SIG_ARGS] + 2
	END
    ELSE
	RETURN SS$_RESIGNAL		! Signal the error to the next handler
    ;

    MCHARY [CHF$L_MCH_SAVR0] = SUCCESS;! Set success for status on unwind
    IF
	.BBLOCK [SIGARY [CHF$L_SIG_NAME], STS$V_SEVERITY]
	EQL
	STS$K_SEVERE
    THEN				! If severe error then unwind
	BEGIN

!
!	Perform cleanup operations here
!

    					! Unwind the stack to the caller
    					! of the establisher
	$UNWIND (DEPADR = MCHARY [CHF$L_MCH_DEPTH] )
	END
    ;

    RETURN SS$_CONTINUE		! Otherwise, continue from error

    END;


END				!End of module
ELUDOM
