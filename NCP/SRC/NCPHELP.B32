%TITLE	'Interface to Librarian for Help'
MODULE NCPHELP	(IDENT = 'V03-000',
		ADDRESSING_MODE(EXTERNAL=GENERAL),
		ADDRESSING_MODE(NONEXTERNAL=GENERAL)) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	Network Control Program (NCP)
!
! ABSTRACT:
!
!	This module contains the routines which interface with the
!	VMS librarian to provide the help commands of NCP.
!	These routines expect a help library (NCPHELP.HLB) in
!	SYS$HELP.  This library may be incorporated into the system
!	help library to provide ncp help at the dcl level.
!
! ENVIRONMENT:	VAX/VMS Operating System
!
! AUTHOR:	Darrell Duffy	, CREATION DATE:  12-April-1980
!
! MODIFIED BY:
!
!	V001	TMH0001		Tim Halvorsen	28-Jul-1981
!		Add general addressing.
!--

%SBTTL	'Definitions'

!
! INCLUDE FILES:
!

LIBRARY 'SYS$LIBRARY:STARLET.L32';
LIBRARY 'OBJ$:NCPLIBRY.L32';

!
! EQUATED SYMBOLS:
!

LITERAL
	NCP$K_MAXHELPDSC = 8,		! Number of help descriptors
	NCP$K_MAXHELPSTR = 31		! Size of each symbol
	;

!
! OWN STORAGE:
!

OWN
	NCP$L_HELPIDX	: LONG		! Index returned from librarian
		INITIAL (-1)		! Not open yet
	;
OWN
	NCP$T_HLPNAMBLK : $NAM ()	! Name block for help library
	;


OWN
	NCP$T_HELPSTR1	: VECTOR [NCP$K_MAXHELPSTR, BYTE],
	NCP$T_HELPSTR2	: VECTOR [NCP$K_MAXHELPSTR, BYTE],
	NCP$T_HELPSTR3	: VECTOR [NCP$K_MAXHELPSTR, BYTE],
	NCP$T_HELPSTR4	: VECTOR [NCP$K_MAXHELPSTR, BYTE],
	NCP$T_HELPSTR5	: VECTOR [NCP$K_MAXHELPSTR, BYTE],
	NCP$T_HELPSTR6	: VECTOR [NCP$K_MAXHELPSTR, BYTE],
	NCP$T_HELPSTR7	: VECTOR [NCP$K_MAXHELPSTR, BYTE],
	NCP$T_HELPSTR8	: VECTOR [NCP$K_MAXHELPSTR, BYTE]
	;

GLOBAL
	NCP$GQ_HELPDSC1 : VECTOR [2],	! Descriptors loaded by parse
	NCP$GQ_HELPDSC2 : VECTOR [2],	! KEEP IN ORDER.  KEEP CONTIGUOUS.
	NCP$GQ_HELPDSC3 : VECTOR [2],
	NCP$GQ_HELPDSC4 : VECTOR [2],
	NCP$GQ_HELPDSC5 : VECTOR [2],
	NCP$GQ_HELPDSC6 : VECTOR [2],
	NCP$GQ_HELPDSC7 : VECTOR [2],
	NCP$GQ_HELPDSC8 : VECTOR [2],
	NCP$GQ_HELPTOPIC : VECTOR [2]
	;

BIND
	NCP$Q_HELPFIRST = NCP$GQ_HELPDSC1,	! First and last descriptor
	NCP$Q_HELPLAST = NCP$GQ_HELPDSC8	! addresses
	;
!
! EXTERNAL REFERENCES:
!

EXTERNAL LITERAL

	NCP$_HLPINI,		! Error initializing librarian
	NCP$_HLPLIB,		! Unable to open help library
	NCP$_HLPOUT,		! too many subtopics for help
	NCP$_HELP		! Error writing help text
	;

EXTERNAL ROUTINE

	LBR$INI_CONTROL		: ADDRESSING_MODE (GENERAL),
	LBR$OPEN		: ADDRESSING_MODE (GENERAL),
	LBR$GET_HELP		: ADDRESSING_MODE (GENERAL)
	;

%SBTTL	'NCP$HELP  Action Routine to Print Help'
GLOBAL ROUTINE NCP$HELP =	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine is activated as an action routine by the parse
!	after all the help descriptors are initialized.
!	This routine initializes and opens the help library if that has not
!	been done and then requests the librarian to print the help text.
!	As with all action routines it must return success.  Any errors
!	are signaled.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NCP$L_HELPIDX
!	NCP$GQ_HELPDSC1 ...
!
! IMPLICIT OUTPUTS:
!
!	NCP$L_HELPIDX
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Success
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	STATUS
	;

    IF .NCP$L_HELPIDX EQL -1			! Help library open?
    THEN
	BEGIN
	IF NOT					! So open it now
	    (
	    STATUS =
	    LBR$INI_CONTROL			! Setup librarian tables
		(
		NCP$L_HELPIDX,			! Return index here
		%REF (LBR$C_READ),		! Open for read
		%REF (LBR$C_TYP_HLP),		! Its a help library
		NCP$T_HLPNAMBLK			! Pass name block address
		)
	    )
	THEN
	    SIGNAL_STOP (NCP$_HLPINI, 0, .STATUS) ! Signal an error
	;
	IF NOT					! Now open the file
	    (
	    STATUS =
	    LBR$OPEN				! Open a library
		(
		NCP$L_HELPIDX,			! Pass the index back
		ASCID ('NCPHELP'),		! Our special help library
		0,				! ?
		ASCID ('SYS$HELP:.HLB')		! Default place for the lib
		)
	    )
	THEN
	    SIGNAL_STOP (NCP$_HLPLIB, 0, .STATUS)	! Signal an error
	END
    ;

!
!	Scan the descriptors and copy them to our private strings
!

    INCRU IDX FROM 0 TO NCP$K_MAXHELPDSC	! Scan the descriptors
    DO
	BEGIN
	MAP
	    NCP$GQ_HELPDSC1 : BLOCKVECTOR [1, 8, BYTE],	! Vector of descriptor
	    NCP$T_HELPSTR1  : BLOCKVECTOR [1, 31, BYTE] ! Vector of strings
	    ;
	IF .NCP$GQ_HELPDSC1 [.IDX, DSC$A_POINTER] NEQ 0
	THEN
	    BEGIN
	    CH$MOVE					! Copy the string
		(
		.NCP$GQ_HELPDSC1 [.IDX, DSC$W_LENGTH],
		.NCP$GQ_HELPDSC1 [.IDX, DSC$A_POINTER],
		NCP$T_HELPSTR1 [.IDX, 0, 0, 8, 0]
		);
	    NCP$GQ_HELPDSC1 [.IDX, DSC$A_POINTER] =	! Set the address
		NCP$T_HELPSTR1 [.IDX, 0, 0, 8, 0]
	    END
	END
    ;

    IF NOT					! Now print the help text
	(
	STATUS =
	LBR$GET_HELP				! Obtain the library service
	    (
	    NCP$L_HELPIDX,			! Our help library
	    0,					! Print width (use 80)
	    0,					! Routine, use sys$output
	    0,					! Don't pass no data
	    NCP$GQ_HELPDSC1,			! Just pass in the descriptors
	    NCP$GQ_HELPDSC2,
	    NCP$GQ_HELPDSC3,
	    NCP$GQ_HELPDSC4,
	    NCP$GQ_HELPDSC5,
	    NCP$GQ_HELPDSC6,
	    NCP$GQ_HELPDSC7,
	    NCP$GQ_HELPDSC8
	    )
	)
    THEN
	SIGNAL_STOP (NCP$_HELP, 0, .STATUS)	! Signal an error if so
    ;

    RETURN SUCCESS				! Action routines always work

    END;

%SBTTL	'NCP$HELPLAST  Return last used Help Descriptor'
ROUTINE NCP$HELPLAST (DSCRTN) =	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	Return address of last descriptor used in help chain.
!	Return failure if last one used. Return success otherwise.
!
! FORMAL PARAMETERS:
!
!	DSCRTN		Address to return descriptor address
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Success if more descriptors,  Failure if last.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	DSC : REF VECTOR
	;

!
!	Scan descriptor list backward
!

    DSC = NCP$Q_HELPLAST;			! Start at end

    WHILE .DSC GTRU NCP$Q_HELPFIRST		! To beginning
    DO
	BEGIN
	IF .DSC [0] NEQ 0			! Null string?
	THEN
	    EXITLOOP				! No, we are done
	;
	DSC = .DSC - 8				! Back up
	END
    ;

    .DSCRTN = .DSC;				! Return descriptor address
    IF .DSC EQL NCP$Q_HELPLAST			! Signal none left
    THEN RETURN FAILURE
    ELSE RETURN SUCCESS

    END;

%SBTTL	'NCP$HELPTOPIC  Specified Topic Help'
GLOBAL ROUTINE NCP$HELPTOPIC =	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	This is an action routine to aid in walking the help tree.
!	This routine has one parameter which is placed in the last
!	used parameter of the help descriptor chain.  This allows
!	a horizontal movement in the tree without respecifying the
!	entire set of topics to the help command.  If no parameter is
!	specified with the TOPIC command, the last descriptor in the
!	help chain is made null which has the effect of moving toward
!	the root of the help tree.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NCP$GQ_HELPTOPIC
!
! IMPLICIT OUTPUTS:
!
!	NCP$GQ_HELPDSCn 	Last topic descriptor used
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Success for an action routine
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	TOPIC : REF VECTOR
	;

    NCP$HELPLAST (TOPIC);			! Find the last topic
    TOPIC [0] = .NCP$GQ_HELPTOPIC [0];		! Copy this topic to it
    TOPIC [1] = .NCP$GQ_HELPTOPIC [1];
    NCP$HELP ()					! Display the help

    END;

%SBTTL	'NCP$HELPSUBTOPIC  Specified Subtopic Help'
GLOBAL ROUTINE NCP$HELPSUBTOPIC =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine is an action routine to display help for a specified
!	subtopic of the current help string.  The subtopic is added to the
!	current string of tokens for the help request.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NCP$GQ_HELPTOPIC
!
! IMPLICIT OUTPUTS:
!
!	NCP$GQ_HELPDSCn		Last topic + 1 added
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Success
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	TOPIC : REF VECTOR
	;

    IF NOT NCP$HELPLAST (TOPIC)			! Find last descriptor
    THEN
	SIGNAL_STOP (NCP$_HLPOUT)		! No more left
    ;

    IF .TOPIC [0] NEQ 0				! If there is a string here
    THEN
	TOPIC = .TOPIC + 8			! Look at next descriptor
    ;

    TOPIC [0] = .NCP$GQ_HELPTOPIC [0];		! Load up this subtopic
    TOPIC [1] = .NCP$GQ_HELPTOPIC [1];

    NCP$HELP ()					! Display the help

    END;

END				!End of module
ELUDOM
