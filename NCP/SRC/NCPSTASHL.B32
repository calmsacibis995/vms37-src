%TITLE	'Show/List Parse States and Data'
MODULE NCPSTASHL (IDENT = 'V03-000', LIST(NOOBJECT)) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	Network Control Program (NCP)
!
! ABSTRACT:
!
!	States and data for the parsing of NCP show and list commands
!
! ENVIRONMENT:	VAX/VMS Operating System
!
! AUTHOR:	Darrell Duffy	, CREATION DATE: 14-September-79
!
! MODIFIED BY:
!
!	V005	TMH0005		Tim Halvorsen	08-Nov-1981
!		Fix SHOW LOGGING when SUMMARY follows KNOWN SINKS
!		on the command line.
!
!	V004	TMH0004		Tim Halvorsen	25-Aug-1981
!		Add SHOW LINK nnn.
!
!	V003	TMH0003		Tim Halvorsen	05-Jul-1981
!		Add SHOW MODULE.
!
!	V002	TMH0002		Tim Halvorsen	20-Jul-1981
!		Remove special casing of "LIN" as a LINE entity
!		and require full spelling of "LINE" to distinguish
!		between lines and links.  This makes the ambiguity
!		rules consistent.
!
!	V001	TMH0001		Tim Halvorsen	17-Jun-1981
!		Indicate object & link as system-specific entity
!		types in their respective SDB's.
!		Add SHOW CIRCUIT.
!--

%SBTTL	'Definitions'

!
! INCLUDE FILES:
!

	LIBRARY 'OBJ$:NMALIBRY';
	LIBRARY 'OBJ$:NCPLIBRY';
	LIBRARY 'SYS$LIBRARY:TPAMAC';
	LIBRARY 'SYS$LIBRARY:STARLET';

!
! EXTERNAL REFERENCES:
!

	ACT_DFN				! External symbols for action routines

%SBTTL	'Parameter blocks'

!
! BIND DATA:
!

!
!	Parameter Blocks
!

!
!	For General Use
!

	BUILD_PCL

	(DUMMY,

	, END, , ,

	)

	BUILD_SDB
	(SNO, NMA$C_ENT_NOD, VRB_ENT, DUMMY)

	BUILD_SDB
	(SCI, NMA$C_ENT_CIR, VRB_ENT, DUMMY)

	BUILD_SDB
	(SLI, NMA$C_ENT_LIN, VRB_ENT, DUMMY)

	BUILD_SDB
	(SOB, -NMA$C_SENT_OBJ, VRB_ENT, DUMMY)


	BUILD_PBK

	(SHL,

	ACT, LITB, NMA$C_ENT_ACT, VRB_ENT,
	KWN, LITB, NMA$C_ENT_KNO, VRB_ENT,
	LUP, LITB, NMA$C_ENT_LOO, VRB_ENT,

	TKN, TKN, , VRB_ENT,
	NOD, NADR, , VRB_ENT,
	EXE, LITL, 0, VRB_ENT,
	INF, LITB, 0, ,

	)

	BUILD_PBK

	(INF,

	TO, TKN, , ,

	)


!
!	Show List Logging
!

	BUILD_PCL

	(SLO,

	SNO, NADR,	PCLO_SIN, ,

	, END, , ,

	)

	BUILD_PBK

	(SLO,

	SKN, LITB, NMA$C_ENT_KNO, SLO_SNO,
	SEX, LITL, 0, 		  SLO_SNO,
	SNO, NADR, , ,

	)

	BUILD_SDB

	(SLO, NMA$C_ENT_LOG, VRB_ENT, SLO)

!
!	Show List Links by node
!

	BUILD_PCL

	(SLK,

	NOD, NADR,	PCLK_NID, ,

	, END, , ,

	)

	BUILD_PBK

	(SLK,

	ENT, NADR, , VRB_ENT,		! Link address, not a node name
					! (but using same format as NADR)
	NOD, NADR, , ,

	)

	BUILD_SDB

	(SLK, -NMA$C_SENT_LNK, VRB_ENT, SLK)

!
!	Show Module
!

BIND	PDB$G_MPR_ENT =			! Protocol entity name
	UPLIT BYTE(0, %ASCIC 'X25-PROTOCOL');

BIND	PDB$G_MSE_ENT =			! Protocol entity name
	UPLIT BYTE(0, %ASCIC 'X25-SERVER');

	BUILD_SDB
	(SPR, NMA$C_ENT_MOD, MPR_ENT, DUMMY)

	BUILD_SDB
	(SSE, NMA$C_ENT_MOD, MSE_ENT, DUMMY)


%SBTTL	'Prompt strings'

!
!	Build prompt strings
!

BIND
	PROMPT_STRINGS
	(SHL,

	ACT, '(CIRCUITS, LINES, LOGGING, NODES): ',
	ENT, %STRING ('(ACTIVE, CIRCUIT, EXECUTOR, KNOWN,',CRLF,
	     ' LINE, LOGGING, LOOP, MODULE, NODE, OBJECT): '),
	KWN, '(CIRCUITS, LINES, LINKS, LOGGING, NODES, OBJECTS): ',
	MOD, 'Module         (X25-PROTOCOL, X25-SERVER): ',

	)
	,

	PROMPT_STRINGS
	(SCI,

	ENT, 'Circuit name (16 characters): ',

	),

	PROMPT_STRINGS
	(SLI,

	ENT, 'Line ID (dev-c-u.t): ',

	),

	PROMPT_STRINGS
	(SLK,

	ENT, 'Link address     (0-65535): ',

	)
	;


BIND
	PROMPT_STRINGS
	(SLO,

	ENT, 'Type of logging (CONSOLE, FILE, MONITOR): ',
	SNO, 'Sink node (node-id, EXECUTOR): ',

	)
	,

	PROMPT_STRINGS
	(SNO,

	ENT, 'Node ID (node-name, address): ',

	)
	,

	PROMPT_STRINGS
	(SOB,

	ENT, 'Object name (8 characters): ',

	)
	;

%SBTTL	'State Table Entry'

$INIT_STATE (NCP$G_STTBL_SHL, NCP$G_KYTBL_SHL);

!
!	Show / Purge Commands
!

!
!	Dispatch to entity types and prompt if end of string
!

	COMMAND_PROMPT
	(SHL, ENT, NCP$_INVKEY,

	( (SE_INFO_TYPES), ST_SHL_ENT),
	('ACTIVE',	ST_SHL_ACT,	ACT$SAVPRM, , , PBK$G_SHL_ACT),
	('CIRCUIT',	ST_SCI_ENT),
	('EXECUTOR',	ST_SNO_GO,	ACT$SAVPRM, NMA$C_ENT_NOD, 
					NCP$GL_OPTION, PBK$G_SHL_EXE),
	('KNOWN',	ST_SHL_KWN,	ACT$SAVPRM, , , PBK$G_SHL_KWN),
	('LINE',	ST_SLI_ENT),
	('LINK',	ST_SLK_ENT),
	('LOGGING',	ST_SLO_ENT),
	('LOOP',	ST_SHL_LUP,	ACT$SAVPRM, , , PBK$G_SHL_LUP),
	('NODE',	ST_SNO_ENT),
	('OBJECT',	ST_SOB_ENT),
	('MODULE',	ST_SHL_MOD),
	('X25',		ST_SHL_X25)

	)

%SBTTL	'Active, Known and Loop Entities'

!
!	For each, dispatch or prompt if end of string
!

!
!	Active Entities
!

	COMMAND_PROMPT
	(SHL, ACT, NCP$_INVKEY,

	('CIRCUITS',	ST_SCI_GO),
	('LINES',	ST_SLI_GO),
	('LOGGING',	ST_SLO_GO),
	('NODES',	ST_SNO_GO)

	)

!
!	Known Entities
!

	COMMAND_PROMPT
	(SHL, KWN, NCP$_INVKEY,

	('CIRCUITS',	ST_SCI_GO),
	('LINES',	ST_SLI_GO),
	('LINKS',	ST_SLK_KWN),
	('LOGGING',	ST_SLO_GO),
	('NODES',	ST_SNO_GO),
	('OBJECTS',	ST_SOB_GO)

	)

!
!	Loop Entities
!

$STATE	(ST_SHL_LUP,
	('NODES', ST_SNO_GO),			! Ignore noise word
	(TPA$_LAMBDA, ST_SNO_GO)		! Nodes only are valid
	);

%SBTTL	'Show / List Circuit'

!
!	Show / List Circuit
!

!
!	Collect the circuit name or prompt
!

	COMMAND_PROMPT
	(SCI, ENT, NCP$_INVVAL,

	( (SE_CIRC_ID), , ACT$SAVPRM, , , PBK$G_SHL_TKN)

	)

!
!	Collect the information type
!

$STATE	(ST_SCI_GO,
	( (ST_INF_TYPE2) )
	);

!
!	Perform the function
!

$STATE	(,
	(TPA$_LAMBDA, , , NMA$C_ENT_CIR, NCP$GL_OPTION, )
	);

$STATE	(,
	(TPA$_EOS, TPA$_EXIT, ACT$VRB_SHOLIS, , , SDB$G_SCI)
	);

%SBTTL	'Show / List Line'

!
!	Show / List Line
!

!
!	Collect the line ID or prompt
!

	COMMAND_PROMPT
	(SLI, ENT, NCP$_INVVAL,

	( (SE_LINE_ID), , ACT$SAVPRM, , , PBK$G_SHL_TKN)

	)

!
!	Collect the information type
!

$STATE	(ST_SLI_GO,
	( (ST_INF_TYPE2) )
	);

!
!	Perform the function
!

$STATE	(,
	(TPA$_LAMBDA, , , NMA$C_ENT_LIN, NCP$GL_OPTION, )
	);

$STATE	(,
	(TPA$_EOS, TPA$_EXIT, ACT$VRB_SHOLIS, , , SDB$G_SLI)
	);

%SBTTL	'Show / List Links'

!
!	Show / List Links
!

!
!	Collect the Link address or prompt
!

	COMMAND_PROMPT
	(SLK, ENT, NCP$_INVVAL,

	((SE_LINK_ID),ST_SLK_GO, ACT$SAVPRM,,, PBK$G_SLK_ENT)
	)

!
!	Show known links (and optionally select only those with a given node)
!

$STATE	(ST_SLK_KWN,
	('WITH'),
	(TPA$_LAMBDA, ST_SLK_GO)
	);

$STATE	(,
	('NODE'),
	);

$STATE	(,
	((SE_NODE_ID), ST_SLK_GO, ACT$SAVPRM, , , PBK$G_SLK_NOD),
	)

!
!	Collect the information type
!

$STATE	(ST_SLK_GO,
	( (ST_INF_TYPE1) )
	);

!
!	Perform the function
!

$STATE	(,
	(TPA$_LAMBDA, , , NMA$C_SENT_LNK, NCP$GL_OPTION)
	);

$STATE	(,
	(TPA$_EOS, TPA$_EXIT, ACT$VRB_SHOLIS, , , SDB$G_SLK)
	);


%SBTTL	'Show / List Logging'

!
!	Show / List Logging
!

!
!	Collect the logging type
!

	COMMAND_PROMPT
	(SLO, ENT, NCP$_INVVAL,

	( (SE_LOG_TYP) )

	)

!
!	Now the information type
!

$STATE	(ST_SLO_GO,
	( (ST_INF_TYPE3) )
	);

!
!	Now any remaining qualifiers
!

$STATE	(,
	('SINK',	ST_SLO_NOD),
	('KNOWN',	ST_SLO_SKN),
	(TPA$_LAMBDA,	ST_SLO_DOIT),
	);

!
!	Parse rest of SINK NODE xxx
!

$STATE	(ST_SLO_NOD,
	('NODE'),
	(TPA$_LAMBDA)
	);


!
!	The node id for the sink node
!

	COMMAND_PROMPT
	(SLO, SNO, NCP$_INVVAL,

	('EXECUTOR', ST_SLO_DOIT, ACT$SAVPRM, , , PBK$G_SLO_SEX),
	( (SE_NODE_ID), ST_SLO_DOIT, ACT$SAVPRM, , , PBK$G_SLO_SNO)

	)

!
!	Parse rest of KNOWN SINKS
!

$STATE	(ST_SLO_SKN,
	('SINKS'),
	(TPA$_LAMBDA)
	);

$STATE	(,
	(TPA$_LAMBDA, , ACT$SAVPRM, , , PBK$G_SLO_SKN)
	);

!
!	Perform the function
!

$STATE	(ST_SLO_DOIT,
	((ST_INF_TYPE3))		! Collect info type here too
	);

$STATE	(,
	(TPA$_LAMBDA, , , NMA$C_ENT_LOG, NCP$GL_OPTION)
	);

$STATE	(,
	(TPA$_EOS, TPA$_EXIT, ACT$VRB_SHOLIS, , , SDB$G_SLO)
	);

%SBTTL	'Show / List Node'

!
!	Show / List Node
!

!
!	Obtain the node id
!

	COMMAND_PROMPT
	(SNO, ENT, NCP$_INVVAL,

	( (SE_NODE_ID), , ACT$SAVPRM, , , PBK$G_SHL_NOD)

	)

!
!	Now the information type
!

$STATE	(ST_SNO_GO,
	( (ST_INF_TYPE2) )
	);

!
!	Now perform the function
!

$STATE	(,
	(TPA$_LAMBDA, , , NMA$C_ENT_NOD, NCP$GL_OPTION, )
	);

$STATE	(,
	(TPA$_EOS, TPA$_EXIT, ACT$VRB_SHOLIS, , , SDB$G_SNO)
	);

%SBTTL	'Show / List Objects'

!
!	Show / List Objects
!

!
!	Obtain the object name or prompt
!

	COMMAND_PROMPT
	(SOB, ENT, NCP$_INVVAL,

	( (SE_OBJECT_NAM), , ACT$SAVPRM, , , PBK$G_SHL_TKN)

	)

!
!	Obtain the information type desired
!

$STATE	(ST_SOB_GO,
	( (ST_INF_TYPE1) ),
	);

!
!	Perform the function
!

$STATE	(,
	(TPA$_LAMBDA, , , NMA$C_SENT_OBJ, NCP$GL_OPTION, )
	);

$STATE	(,
	(TPA$_EOS, TPA$_EXIT, ACT$VRB_SHOLIS, , , SDB$G_SOB)
	);


%SBTTL	'Show / List Module'

!
!	Show / List Module
!

!
!	Obtain the module name or prompt
!

	COMMAND_PROMPT
	(SHL, MOD, NCP$_INVVAL,

	('X25')
	)

$STATE	(ST_SHL_X25,
	('-'));
$STATE	(,
	('PROTOCOL',	ST_SPR_GO,, NMA$C_ENT_MOD, NCP$GL_OPTION),
	('SERVER',	ST_SSE_GO,, NMA$C_ENT_MOD, NCP$GL_OPTION)
	);

!
!	SHOW MODULE X25-PROTOCOL
!

$STATE	(ST_SPR_GO,
	((ST_INF_TYPE1))
	);

$STATE	(,
	(TPA$_EOS, TPA$_EXIT, ACT$VRB_SHOLIS, , , SDB$G_SPR)
	);

!
!	SHOW MODULE X25-SERVER
!

$STATE	(ST_SSE_GO,
	((ST_INF_TYPE1))
	);

$STATE	(,
	(TPA$_EOS, TPA$_EXIT, ACT$VRB_SHOLIS, , , SDB$G_SSE)
	);

%SBTTL	'Subexpressions'

!
!	Information type decoding
!

!
!	Type 1 is characteristics, status, summary and to
!

$STATE	(ST_INF_TYPE1,
	( (SE_INFO_TYPES), ST_INF_TYPE1),
	( (SE_INFO_TO), ST_INF_TYPE1),
	(TPA$_LAMBDA, TPA$_EXIT)
	);

!
!	Type 2 is characteristics, status, summary, counters and to
!

$STATE	(ST_INF_TYPE2,
	( (SE_INFO_TYPES), ST_INF_TYPE2),
	( (SE_INFO_TO), ST_INF_TYPE2),
	(TPA$_LAMBDA, TPA$_EXIT)
	);

!
!	Type 3 is characteristics, status, summary, events and to
!

$STATE	(ST_INF_TYPE3,
	( (SE_INFO_TYPES), ST_INF_TYPE3),
	( (SE_INFO_TO), ST_INF_TYPE3),
	(TPA$_LAMBDA, TPA$_EXIT)
	);


!
!	Common parsing of the common types
!

$STATE	(SE_INFO_TYPES,
	('CHARACTERISTICS',	TPA$_EXIT, ACT$SAVPRM,
			NMA$C_OPINF_CHA ^ $BITPOSITION(NMA$V_OPT_INF),
			NCP$GL_OPTION, PBK$G_SHL_INF),
	('STATUS',	TPA$_EXIT, ACT$SAVPRM,
			NMA$C_OPINF_STA ^ $BITPOSITION(NMA$V_OPT_INF),
			NCP$GL_OPTION, PBK$G_SHL_INF),
	('SUMMARY',	TPA$_EXIT, ACT$SAVPRM,
			NMA$C_OPINF_SUM ^ $BITPOSITION(NMA$V_OPT_INF),
			NCP$GL_OPTION, PBK$G_SHL_INF),
	('EVENTS', 		TPA$_EXIT, ACT$SAVPRM,
			NMA$C_OPINF_EVE ^ $BITPOSITION(NMA$V_OPT_INF),
			NCP$GL_OPTION, PBK$G_SHL_INF),
	('COUNTERS', 	TPA$_EXIT, ACT$SAVPRM,
			NMA$C_OPINF_COU ^ $BITPOSITION(NMA$V_OPT_INF),
			NCP$GL_OPTION, PBK$G_SHL_INF),
	);

!
!	Common handling of TO file-id
!

$STATE	(SE_INFO_TO,
	('TO'),
	);

$STATE	(,
	( (SE_FILE_ID), TPA$_EXIT, ACT$SAVPRM, , , PBK$G_INF_TO),
	);

%SBTTL	'Define Subexpressions from Library'

!
!	Define subexpressions from library
!

	SEM_FILE_ID		! File id strings
	SEM_LINE_ID		! Line id strings
	SEM_LOG_TYP		! Logging entity type
	SEM_NODE_ID		! Node id strings
	SEM_OBJECT_NAM		! Object name
	SEM_CIRC_ID		! Circuit name
	SEM_LINK_ID		! Link address

%SBTTL	'Object Listing of Parse Table'

END				!End of module
ELUDOM
