%TITLE	'Verb Parse States and Data'
MODULE NCPSTAVRB (IDENT = 'V03-000', LIST(NOOBJECT)) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	Network Control Program (NCP)
!
! ABSTRACT:
!
!	States and data for the parsing of NCP command verbs
!
! ENVIRONMENT:	VAX/VMS Operating System
!
! AUTHOR:	Darrell Duffy	, CREATION DATE: 10-September-79
!
! MODIFIED BY:
!
!	V003	TMH0003		Tim Halvorsen	20-Jan-1982
!		Fix prompt for object name to reflect an increase
!		in its maximum size (now 12 characters).
!
!	V002	TMH0002		Tim Halvorsen	10-Jul-1981
!		Add MODULE entity for SET/DEFINE.
!
!	V001	TMH0001		Tim Halvorsen	18-Jun-1981
!		Add CIRCUITS and misc. parameters.
!--

%SBTTL	'Definitions'

!
! INCLUDE FILES:
!

	LIBRARY 'LIB$:NMALIBRY';
	LIBRARY 'LIB$:NCPLIBRY';
	LIBRARY 'SYS$LIBRARY:TPAMAC';

!
! OWN STORAGE:
!

GLOBAL

	NCP$GL_OPTION,				! Place to build option
	NCP$GL_FNC_CODE,			! Place to build function code

	ACT$GL_ACC_MASK,			! Mask for access parsing
	ACT$GL_XIDACC_Q,			! Flag for access control with
						! Node specification

!
!	String descriptors for access parameters
!
	ACT$GQ_ACCUSR_DSC : VECTOR [2],	! User id
	ACT$GQ_ACCACC_DSC : VECTOR [2],	! Account
	ACT$GQ_ACCPSW_DSC : VECTOR [2],	! Password

	ACT$GQ_NODEID_DSC : VECTOR [2]	! Node id descriptor
	;



!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
	ACT$INV_COMMAND,		! Signal invalid command
	ACT$SAVPRM,			! Save a parameter
	ACT$TMPSTR,			! Save a temporary string
	ACT$BLNK_SIG,			! Blanks are now significant
	ACT$BLNK_NSIG,			! Blanks are not significant
	ACT$ZAPTMPDSC,			! Clear temporary descriptors
	ACT$PRMPT,			! Prompt for a parameter
	ACT$NUM_RNG,			! Validate a number
	ACT$STR_LEN,			! Validate a string length
	ACT$NXT_STATE,			! Set vector to next state table
	ACT$WRI_STR,			! Write a string to SYS$OUTPUT
	ACT$PMT_ON,			! Enable prompting
	ACT$PMT_OFF,			! Disable prompting
	ACT$PMT_Q,			! Control prompting
	ACT$CLRLONG,			! Clear a longword
	ACT$VRB_EXIT,			! Return control to VMS
	ACT$VRB_TELL,			! Perform tell function
	ACT$VRB_SETEXEC,		! Set executor node
	ACT$VRB_CLEXEC,			! Clear executor node
	NCP$HELP,			! Print help text
	NCP$HELPTOPIC,			! Print help for a topic
	NCP$HELPSUBTOPIC;		! Print help for a subtopic

!
!	External Data
!

EXTERNAL
	NCP$GQ_HELPDSC1,		! Help string descriptors
	NCP$GQ_HELPDSC2,
	NCP$GQ_HELPDSC3,
	NCP$GQ_HELPDSC4,
	NCP$GQ_HELPDSC5,
	NCP$GQ_HELPDSC6,
	NCP$GQ_HELPDSC7,
	NCP$GQ_HELPDSC8,
	NCP$GQ_HELPTOPIC,
	ACT$GL_NODADR_Q			! True for node is an address
	;

!
!	Error status values
!

EXTERNAL LITERAL
	NCP$_INVVAL,			! Invalid value
	NCP$_INVKEY			! Invalid keyword
	;



!
!	External state tables
!

EXTERNAL
	NCP$G_STTBL_CLP,		! Clear and Purge commands
	NCP$G_KYTBL_CLP,
	NCP$G_STTBL_DIS,		! Disconnect command
	NCP$G_KYTBL_DIS,
	NCP$G_STTBL_DUM,		! Dump command
	NCP$G_KYTBL_DUM,
	NCP$G_STTBL_LIN,		! Line parameters
	NCP$G_KYTBL_LIN,
	NCP$G_STTBL_CIR,		! Circuit parameters
	NCP$G_KYTBL_CIR,
	NCP$G_STTBL_MPR,		! Module X25-PROTOCOL parameters
	NCP$G_KYTBL_MPR,
	NCP$G_STTBL_MSE,		! Module X25-SERVER parameters
	NCP$G_KYTBL_MSE,
	NCP$G_STTBL_LOA,		! Load command
	NCP$G_KYTBL_LOA,
	NCP$G_STTBL_LOG,		! Logging parameters
	NCP$G_KYTBL_LOG,
	NCP$G_STTBL_LOO,		! Loop command
	NCP$G_KYTBL_LOO,
	NCP$G_STTBL_NOD,		! Remote node parameters
	NCP$G_KYTBL_NOD,
	NCP$G_STTBL_OBJ,		! Object parameters
	NCP$G_KYTBL_OBJ,
	NCP$G_STTBL_SHL,		! Show and List commands
	NCP$G_KYTBL_SHL,
	NCP$G_STTBL_TRI,		! Trigger command
	NCP$G_KYTBL_TRI,
	NCP$G_STTBL_ZER,		! Zero command
	NCP$G_KYTBL_ZER
	;

%SBTTL	'Parameter blocks'

!
! BIND DATA:
!

	BUILD_PBK

	(VRB,

	ALL, LITB, 0, ,
	XID, TKN, , ,
	KWN, LITB, NMA$C_ENT_KNO, VRB_ENT,

	)

	BUILD_PBK

	(ENT,

	ALI, TKN, , VRB_ENT,
	EXE, LITL, 0, VRB_ENT,
	CIR, TKN, , VRB_ENT,
	LIN, TKN, , VRB_ENT,
	NOD, NADR, , VRB_ENT,
	OBJ, TKN, , VRB_ENT,

	)

	BUILD_PBK

	(LOG,

	TYPCON, LITB, NMA$C_SNK_CON, VRB_ENT,
	TYPFIL, LITB, NMA$C_SNK_FIL, VRB_ENT,
	TYPMON, LITB, NMA$C_SNK_MON, VRB_ENT,

	)

	BUILD_PBK

	(EVE,

	ESET, ESET, , VRB_EVE,
	ECLS, ECLS, , VRB_EVE,
	EMSK, EMSK, , VRB_EVE,
	ERNG, ERNG, , VRB_EVE,
	EWLD, EWLD, , VRB_EVE,
	ESNO, ESNO, , VRB_EVE,
	ESLI, ESLI, , VRB_EVE,
	ESEX, ESEX, , VRB_EVE,

	)


!
!	Control blocks for ACT$ZAPTMPDSC
!

GLOBAL BIND

	PBK$G_ZAPACCDSC	=		! Zap descriptors for access control
		PLIT	(
			ACT$GQ_ACCUSR_DSC,
			ACT$GQ_ACCACC_DSC,
			ACT$GQ_ACCPSW_DSC
			),

	PBK$G_ZAPHELPDSC = 		! Zap help descriptors
		PLIT	(
			NCP$GQ_HELPDSC1,
			NCP$GQ_HELPDSC2,
			NCP$GQ_HELPDSC3,
			NCP$GQ_HELPDSC4,
			NCP$GQ_HELPDSC5,
			NCP$GQ_HELPDSC6,
			NCP$GQ_HELPDSC7,
			NCP$GQ_HELPDSC8
			),

	PBK$G_ZAPHELPTOPIC =
		PLIT	(
			NCP$GQ_HELPTOPIC
			)
	;


!
!	ID string
!

BIND
	PROMPT_STRINGS
	(VRB,

	ID, %STRING	(
CRLF,
'DECnet-VAX Network Control Program ',PRG_ID_STR,
CRLF
			),

	)
	;

%SBTTL	'Prompt Strings'

!
!	Prompt Strings
!

BIND
	PROMPT_STRINGS
	(ENT,

	CIR, 'Circuit ID string       (16 characters): ',
	LIN, 'Line ID                       (dev-c-u.t): ',
	LOG, 'Type of logging  (CONSOLE, FILE, MONITOR): ',
	KWN, '(CIRCUITS, LINES, LOGGING, NODES, OBJECTS): ',
	NOD, 'Node ID              (node-name, address): ',
	OBJ, 'Object name               (12 characters): ',
	MOD, 'Module         (X25-PROTOCOL, X25-SERVER): ',

	),

	PROMPT_STRINGS
	(VRB,

	XID, 'Executor node ID     (node-name, address): ',

	TELL, 'Executor node ID     (node-name, address): ',

	SDF1, %STRING(
		'(CIRCUIT, EXECUTOR, KNOWN, LINE,',CRLF,
		'   LOGGING, MODULE, NODE, OBJECT): '),

	VRB, %STRING (
		'(SET, DEFINE, DISCONNECT, CLEAR, PURGE, SHOW, LIST,',CRLF,
		' DUMP, LOAD, TRIGGER, LOOP, ZERO): '),

	)
	;

%SBTTL	'Root of the state table'

$INIT_STATE (NCP$G_STATE_TBL, NCP$G_KEY_TBL);

!
!	Allow TELL or a VERB here or EOS
!

$STATE	(ST_CMD,
	(TPA$_LAMBDA, , ACT$CLRLONG, , , NCP$GL_OPTION)
	);

$STATE	(,
	(TPA$_LAMBDA, , ACT$CLRLONG, , , NCP$GL_FNC_CODE)
	);

$STATE	(,
	('CLEAR',	ST_VRB_CLE),
	('EXIT',	TPA$_EXIT, ACT$VRB_EXIT),
	('HELP',	ST_HELP),
	('IDENTIFY',	TPA$_EXIT, ACT$WRI_STR, , , PMT$G_VRB_ID),
	('SET',		ST_VRB_EXN),
	('SUBTOPIC',	ST_HELP_SUBTOPIC),
	('TELL',	ST_VRB_TELL),
	('TOPIC',	ST_HELP_TOPIC),
	('WHAT',	ST_HELP_DOIT),
	(TPA$_EOS,	TPA$_EXIT),
	(TPA$_LAMBDA,	ST_VRB_VRB)
	);

!
!	For TELL require a node-id next
!

	COMMAND_PROMPT
	(VRB, TELL, NCP$_INVVAL,

	( (SE_NODE_SPEC), , ACT$SAVPRM, , , PBK$G_VRB_XID)

	)
!
!	And optional access information next
!

$STATE	(,
	( (SE_ACCESS) ),
	(TPA$_LAMBDA)
	);

$STATE	(,				! Dummy state to provide action
	(TPA$_LAMBDA, ST_VRB_VRB, ACT$VRB_TELL)
	);



!
!	Decode and perform Help command
!

!
!	Collect upto four strings into descriptors and then call the
!	help action routine.
!

$STATE	(ST_HELP,				! Zap the descriptors
	(TPA$_LAMBDA, , ACT$ZAPTMPDSC, , , PBK$G_ZAPHELPDSC)
	);

$STATE	(,					! Collect the tokens for help
	( (SE_HELP_SYMDOT), , ACT$TMPSTR, , , NCP$GQ_HELPDSC1),
	( (SE_HELP_SYM), , ACT$TMPSTR, , , NCP$GQ_HELPDSC1),
	(TPA$_EOS, ST_HELP_DOIT)
	);

$STATE	(,
	( (SE_HELP_SYM), , ACT$TMPSTR, , , NCP$GQ_HELPDSC2),
	(TPA$_EOS, ST_HELP_DOIT)
	);

$STATE	(,
	( (SE_HELP_SYM), , ACT$TMPSTR, , , NCP$GQ_HELPDSC3),
	(TPA$_EOS, ST_HELP_DOIT)
	);

$STATE	(,
	( (SE_HELP_SYM), , ACT$TMPSTR, , , NCP$GQ_HELPDSC4),
	(TPA$_EOS, ST_HELP_DOIT)
	);

$STATE	(,
	( (SE_HELP_SYM), , ACT$TMPSTR, , , NCP$GQ_HELPDSC5),
	(TPA$_EOS, ST_HELP_DOIT)
	);

$STATE	(,
	( (SE_HELP_SYM), , ACT$TMPSTR, , , NCP$GQ_HELPDSC6),
	(TPA$_EOS, ST_HELP_DOIT)
	);


$STATE	(,
	( (SE_HELP_SYM), , ACT$TMPSTR, , , NCP$GQ_HELPDSC7),
	(TPA$_EOS, ST_HELP_DOIT)
	);

$STATE	(,
	( (SE_HELP_SYM), , ACT$TMPSTR, , , NCP$GQ_HELPDSC8),
	(TPA$_EOS, ST_HELP_DOIT)
	);

$STATE	(ST_HELP_DOIT,
	(TPA$_LAMBDA, TPA$_EXIT, NCP$HELP)	! Call the action routine
	);

!
!	The topic command
!

$STATE	(ST_HELP_TOPIC,
	(TPA$_LAMBDA, , ACT$ZAPTMPDSC, , , PBK$G_ZAPHELPTOPIC)
	);

$STATE	(,
	( (SE_HELP_SYM), , ACT$TMPSTR, , , NCP$GQ_HELPTOPIC),
	(TPA$_LAMBDA)
	);

$STATE	(,
	(TPA$_EOS, TPA$_EXIT, NCP$HELPTOPIC)
	);

!
!	The subtopic command
!

$STATE	(ST_HELP_SUBTOPIC,
	(TPA$_LAMBDA, , ACT$ZAPTMPDSC, , , PBK$G_ZAPHELPTOPIC)
	);

$STATE	(,
	( (SE_HELP_SYM), , ACT$TMPSTR, , , NCP$GQ_HELPTOPIC),
	(TPA$_LAMBDA)
	);

$STATE	(,
	(TPA$_EOS, TPA$_EXIT, NCP$HELPSUBTOPIC)
	);


!
!	Help symbol token
!

$STATE	(SE_HELP_SYM,
	(TPA$_SYMBOL,	TPA$_EXIT),		! A topic
	('*',		TPA$_EXIT)		! All topics at this level
	);

$STATE	(SE_HELP_SYMDOT,			! Take a symbol...
	(TPA$_SYMBOL ),
	);

$STATE	(,
	('.')
	);

$STATE	(,
	('.')
	);

$STATE	(,
	('.', TPA$_EXIT)
	);


%SBTTL	'Decode verbs'

!
!	Verb decoding states
!

	COMMAND_PROMPT
	(VRB, VRB, NCP$_INVKEY,

	('CLEAR',	ST_VRB_CLPU),
	('DEFINE',	ST_VRB_SDF, , NMA$M_OPT_PER, NCP$GL_OPTION, ),
	('DISCONNECT',	ST_VRB_DIS),
	('DUMP',	ST_VRB_DUM),
	('LIST',	ST_VRB_SHL, , NMA$M_OPT_PER, NCP$GL_OPTION, ),
	('LOAD',	ST_VRB_LOA),
	('LOOP',	ST_VRB_LOO),
	('PURGE',	ST_VRB_CLPU, , NMA$M_OPT_PER, NCP$GL_OPTION, ),
	('SET',		ST_VRB_SDF),
	('SHOW',	ST_VRB_SHL),
	('TRIGGER',	ST_VRB_TRI),
	('ZERO',	ST_VRB_ZER),
	(TPA$_SYMBOL, TPA$_EXIT, ACT$INV_COMMAND)
	)

%SBTTL	'Set and Define Verbs'

!
!	Set and Define Verbs
!

$STATE	(ST_VRB_SDF,
	(TPA$_LAMBDA, , , NMA$C_FNC_CHA, NCP$GL_FNC_CODE)
	);

	COMMAND_PROMPT
	(VRB, SDF1, NCP$_INVKEY,

	('CIRCUIT',	ST_ENT_CIR),
	('EXECUTOR',	ST_ENT_EXE),
	('KNOWN',	ST_ENT_KWN),
	('LINE',	ST_ENT_LIN),
	('LOGGING',	ST_ENT_LOG),
	('MODULE',	ST_ENT_MOD),
	('NODE',	ST_ENT_NOD),
	('OBJECT',	ST_ENT_OBJ),
	('X25',		ST_ENT_X25),
	)

$STATE	(ST_VRB_EXN,			! SET as first VERB
	('EXECUTOR'),
	(TPA$_LAMBDA, ST_VRB_SDF)
	);

$STATE	(,				! EXECUTOR NODE?
	('NODE'),
	(TPA$_LAMBDA, ST_ENT_EXE, , NMA$C_FNC_CHA, NCP$GL_FNC_CODE,)
	);				! No, use normal SET EXECUTOR

	COMMAND_PROMPT
	(VRB, XID, NCP$_INVVAL,

	( (SE_NODE_SPEC), , ACT$SAVPRM, , , PBK$G_VRB_XID)

	)

$STATE	(,				! And optional access control
	( (SE_ACCESS) ),
	(TPA$_LAMBDA)
	);

$STATE	(,				! Dummy state to perform action
	(TPA$_EOS, TPA$_EXIT, ACT$VRB_SETEXEC)
	);

%SBTTL	'Set / Define Processing'

!
!	Set / Define Processing
!

!
!	Executor node
!

$STATE	(ST_ENT_EXE,
	(TPA$_LAMBDA, , ACT$SAVPRM, NMA$C_ENT_NOD,
					NCP$GL_OPTION, PBK$G_ENT_EXE)
	);

$STATE	(,
	(TPA$_LAMBDA, TPA$_EXIT, ACT$NXT_STATE, , , NEXT_STATE (NOD) )
	);

!
!	Circuits
!

	COMMAND_PROMPT
	(ENT, CIR, NCP$_INVVAL,

	( (SE_CIRC_ID), , ACT$SAVPRM, NMA$C_ENT_CIR,
					NCP$GL_OPTION, PBK$G_ENT_CIR)
	)

$STATE	(ST_KWN_CIR,
	(TPA$_LAMBDA, TPA$_EXIT, ACT$NXT_STATE, , , NEXT_STATE (CIR) )
	);

!
!	Lines
!

	COMMAND_PROMPT
	(ENT, LIN, NCP$_INVVAL,

	( (SE_LINE_ID), , ACT$SAVPRM, NMA$C_ENT_LIN,
					NCP$GL_OPTION, PBK$G_ENT_LIN)
	)

$STATE	(ST_KWN_LIN,
	(TPA$_LAMBDA, TPA$_EXIT, ACT$NXT_STATE, , , NEXT_STATE (LIN) )
	);

!
!	Modules
!

	COMMAND_PROMPT
	(ENT, MOD, NCP$_INVKEY,

	('X25')
	)

$STATE	(ST_ENT_X25,
	('-'));
$STATE	(,
	('PROTOCOL',	ST_ENT_MPR),
	('SERVER',	ST_ENT_MSE)
	);

$STATE	(ST_ENT_MPR,
	(TPA$_LAMBDA, TPA$_EXIT, ACT$NXT_STATE,
		NMA$C_ENT_MOD, NCP$GL_OPTION, NEXT_STATE(MPR))
	);

$STATE	(ST_ENT_MSE,
	(TPA$_LAMBDA, TPA$_EXIT, ACT$NXT_STATE,
		NMA$C_ENT_MOD, NCP$GL_OPTION, NEXT_STATE(MSE))
	);


!
!	Known Entities
!

	COMMAND_PROMPT
	(ENT, KWN, NCP$_INVKEY,

	('CIRCUITS',	ST_KWN_CIR, ACT$SAVPRM, NMA$C_ENT_CIR,
					NCP$GL_OPTION, PBK$G_VRB_KWN),
	('LINES',	ST_KWN_LIN, ACT$SAVPRM, NMA$C_ENT_LIN,
					NCP$GL_OPTION, PBK$G_VRB_KWN),
	('LOGGING',	ST_KWN_LOG, ACT$SAVPRM, NMA$C_ENT_LOG,
					NCP$GL_OPTION, PBK$G_VRB_KWN),
	('NODES',	ST_KWN_NOD, ACT$SAVPRM, NMA$C_ENT_NOD,
					NCP$GL_OPTION, PBK$G_VRB_KWN),
	('OBJECTS',	ST_KWN_OBJ, ACT$SAVPRM, NMA$C_SENT_OBJ,
					NCP$GL_OPTION, PBK$G_VRB_KWN),

	)

!
!	Logging
!

	COMMAND_PROMPT
	(ENT, LOG, NCP$_INVKEY,

	( (SE_LOG_TYP), , , NMA$C_ENT_LOG, NCP$GL_OPTION)

	)

$STATE	(ST_KWN_LOG,
	(TPA$_LAMBDA,	TPA$_EXIT, ACT$NXT_STATE, , , NEXT_STATE (LOG) )
	);


!
!	Nodes
!

	COMMAND_PROMPT
	(ENT, NOD, NCP$_INVVAL,

	( (SE_NODE_ID), , ACT$SAVPRM, NMA$C_ENT_NOD,
					NCP$GL_OPTION, PBK$G_ENT_NOD)

	)

$STATE	(ST_KWN_NOD,
	(TPA$_LAMBDA, TPA$_EXIT, ACT$NXT_STATE, , , NEXT_STATE (NOD) )
	);

!
!	Objects
!

	COMMAND_PROMPT
	(ENT, OBJ, NCP$_INVVAL,

	( (SE_OBJECT_NAM), , ACT$SAVPRM, NMA$C_SENT_OBJ,
					NCP$GL_OPTION, PBK$G_ENT_OBJ)

	)

$STATE	(ST_KWN_OBJ,
	(TPA$_LAMBDA, TPA$_EXIT, ACT$NXT_STATE, , , NEXT_STATE (OBJ) )
	);


%SBTTL	'Clear/Purge Dispatching'

!
!	Dispatching for Clear and Purge
!

!
!	CLEAR EXECUTOR NODE
!

$STATE	(ST_VRB_CLE,
	( (SE_VRB_CLEX) ),		! Is this clear executor node?
	(TPA$_LAMBDA, ST_VRB_CLPU)
	);

$STATE	(,				! Perform the clear executor node
	(TPA$_EOS, TPA$_EXIT, ACT$VRB_CLEXEC)
	);

$STATE	(SE_VRB_CLEX,			! Succeed if executor node
	('EXECUTOR')			! Otherwise fail
	);

$STATE	(,
	('NODE', TPA$_EXIT)
	);

!
!	Clear and Purge dispatch to another state table
!

$STATE	(ST_VRB_CLPU,
	(TPA$_LAMBDA, , , NMA$M_OPT_CLE, NCP$GL_OPTION)
	);

$STATE	(,
	(TPA$_LAMBDA, TPA$_EXIT, ACT$NXT_STATE, NMA$C_FNC_CHA,
					NCP$GL_FNC_CODE, NEXT_STATE (CLP) )
	);


%SBTTL	'Disconnect Verb'

!
!	Disconnect Verb
!

$STATE	(ST_VRB_DIS,
	(TPA$_LAMBDA, , , NMA$M_OPT_CLE, NCP$GL_OPTION)
	);

$STATE	(,
	(TPA$_LAMBDA, TPA$_EXIT, ACT$NXT_STATE, NMA$C_FNC_CHA,
					NCP$GL_FNC_CODE, NEXT_STATE (DIS) )
	);

%SBTTL	'Dump Verb'

!
!	Dump Verb
!

$STATE	(ST_VRB_DUM,
	(TPA$_LAMBDA, TPA$_EXIT, ACT$NXT_STATE, NMA$C_FNC_DUM,
					NCP$GL_FNC_CODE, NEXT_STATE (DUM) )
	);

%SBTTL	'Load Verb'

!
!	Load Verb
!

$STATE	(ST_VRB_LOA,
	(TPA$_LAMBDA, TPA$_EXIT, ACT$NXT_STATE, NMA$C_FNC_LOA, 
					NCP$GL_FNC_CODE, NEXT_STATE (LOA) )
	);


%SBTTL	'Loop Verb'

!
!	Loop Verb
!

$STATE	(ST_VRB_LOO,
	(TPA$_LAMBDA, TPA$_EXIT, ACT$NXT_STATE, NMA$C_FNC_TES, 
					NCP$GL_FNC_CODE, NEXT_STATE (LOO) )
	);

%SBTTL	'Show / List Verbs'

!
!	Show / List Verbs
!

$STATE	(ST_VRB_SHL,
	(TPA$_LAMBDA, TPA$_EXIT, ACT$NXT_STATE, NMA$C_FNC_REA, 
					NCP$GL_FNC_CODE, NEXT_STATE (SHL) ),
	);


%SBTTL	'Trigger Verb'

!
!	Trigger Verb
!

$STATE	(ST_VRB_TRI,
	(TPA$_LAMBDA, TPA$_EXIT, ACT$NXT_STATE, NMA$C_FNC_TRI, 
					NCP$GL_FNC_CODE, NEXT_STATE (TRI) )
	);


%SBTTL	'Zero Verb'

!
!	Zero Verb
!

$STATE	(ST_VRB_ZER,
	(TPA$_LAMBDA, TPA$_EXIT, ACT$NXT_STATE, NMA$C_FNC_ZER, 
					NCP$GL_FNC_CODE, NEXT_STATE (ZER) )
	);

%SBTTL	'Define Subexpressions'

!
!	Subexpression to decode a node specification
!

$STATE	(SE_NODE_SPEC,
	( (SE_NOD_SPC), , ACT$STR_LEN, , , LEN_FILE_SPEC),
	(TPA$_LAMBDA, TPA$_FAIL, ACT$BLNK_NSIG)
	);

$STATE	(,
	(':'),
	(TPA$_LAMBDA, TPA$_EXIT, ACT$BLNK_NSIG)
	);

$STATE	(,
	(':', TPA$_EXIT, ACT$BLNK_NSIG),
	(TPA$_LAMBDA, TPA$_FAIL, ACT$BLNK_NSIG)
	);


!
!	Decode the specification string
!

$STATE	(SE_NOD_SPC,				! Symbol for the node name
	(TPA$_SYMBOL, , ACT$CLRLONG, , , ACT$GL_XIDACC_Q) ! To allow logical
	);					! Names

$STATE	(,
	('"', , ACT$BLNK_SIG),			! Access control may follow
	(TPA$_LAMBDA, TPA$_EXIT)		! Or not
	);

$STATE	(,					! If access control,
	( (SE_SPC_STR), , , TRUE, ACT$GL_XIDACC_Q),	! Get the string or
	('"', TPA$_EXIT, , TRUE, ACT$GL_XIDACC_Q),	! Allow null accctl
	);

$STATE	(,					! Blank after string or
	(TPA$_BLANK),
	('"', TPA$_EXIT)			! End it
	);

$STATE	(,
	( (SE_SPC_STR) )			! Password string
	);

$STATE	(,
	(TPA$_BLANK),				! And blank or end
	('"', TPA$_EXIT)
	);

$STATE	(,
	( (SE_SPC_STR) )			! Account string
	);

$STATE	(,
	('"', TPA$_EXIT)			! And end it here or fail
	);


!
!	Decode a string acceptable for access control in a node spec
!


$STATE	(SE_SPC_STR,			! Accept a string for access control
	( (SE_SPC_CHR) )		! Start with a character
	);

$STATE	(SE_SPC_STR1,			! And accept any after that
	( (SE_SPC_CHR), SE_SPC_STR1),
	(TPA$_LAMBDA,	TPA$_EXIT)
	);

$STATE	(SE_SPC_CHR,			! A access control char is any except
	('"',		TPA$_FAIL),	! Double quote and
	(TPA$_BLANK,	TPA$_FAIL),	! Space or tab
	(TPA$_ANY,	TPA$_EXIT)
	);


!
!	Obtain access control in the more general case
!

$STATE	(SE_ACCESS,			! Dummy state to clear descriptors
	(TPA$_LAMBDA,	, ACT$ZAPTMPDSC, , , PBK$G_ZAPACCDSC)
	);

$STATE	(,				! Take any one first but there must be
	('ACCOUNT',	ST_ACCESS_ACC),	! at least one or fail
	('PASSWORD',	ST_ACCESS_PSW),
	('USER',	ST_ACCESS_USR)
	);

$STATE	(ST_ACCESS_1,			! Now there can be any remaining
	('ACCOUNT',	ST_ACCESS_ACC),	! number but there need not be
	('PASSWORD',	ST_ACCESS_PSW),
	('USER',	ST_ACCESS_USR),
	(TPA$_LAMBDA,	TPA$_EXIT)
	);

$STATE	(ST_ACCESS_ACC,			! State for an account string
	( (SE_ACCESS_ACC), ST_ACCESS_1),
	(TPA$_LAMBDA,	TPA$_FAIL, ACT$INV_COMMAND)
	);

$STATE	(SE_ACCESS_ACC,			! Subexpression for an account string
	( (SE_ACC_ACC), TPA$_EXIT ,ACT$TMPSTR, , ,ACT$GQ_ACCACC_DSC)
	);
$STATE	(ST_ACCESS_PSW,			! State for a password string
	( (SE_ACCESS_PSW), ST_ACCESS_1),
	(TPA$_LAMBDA,	TPA$_FAIL, ACT$INV_COMMAND)
	);

$STATE	(SE_ACCESS_PSW,			! Subexpression for a password string
	( (SE_ACC_PSW), TPA$_EXIT ,ACT$TMPSTR, , ,ACT$GQ_ACCPSW_DSC)
	);

$STATE	(ST_ACCESS_USR,			! State for a user id string
	( (SE_ACCESS_USR), ST_ACCESS_1),
	(TPA$_LAMBDA,	TPA$_FAIL, ACT$INV_COMMAND)
	);

$STATE	(SE_ACCESS_USR,			! Subexpression for a user id string
	( (SE_ACC_USR), TPA$_EXIT ,ACT$TMPSTR, , ,ACT$GQ_ACCUSR_DSC)
	);


!
!	Call subexpressions we need from the library
!

	SEM_NODE_ID		! Node id parsing
	SEM_ACCESS		! General access string parsing
	SEM_QUOT_STR		! Quoted string
	SEM_LINE_ID		! Line ID
	SEM_CIRC_ID		! Circuit ID
	SEM_LOG_TYP		! Logging type
	SEM_OBJECT_NAM		! Object name

%SBTTL	'Object Listing of Parse Table'

END				!End of module
ELUDOM
