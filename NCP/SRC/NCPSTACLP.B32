%TITLE	'Clear/Purge Parse States and Data'
MODULE NCPSTACLP (IDENT = 'V03-011', LIST(NOOBJECT)) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	Network Control Program (NCP)
!
! ABSTRACT:
!
!	States and data for the parsing of NCP clear and purge commands
!
! ENVIRONMENT:	VAX/VMS Operating System
!
! AUTHOR:	Darrell Duffy	, CREATION DATE: 14-September-79
!
! MODIFIED BY:
!
!	V011	TMH0011		Tim Halvorsen	08-Mar-1982
!		Remove prompting for CLEAR LINE, CIRCUIT and NODE
!		parameters, since it is somewhat confusing, and
!		these commands are normally used only to clear the
!		entire database entry, rather than a single parameter.
!		It also makes it easier to hide latent support of
!		parameters.
!
!	V010	TMH0010		Tim Halvorsen	20-Jan-1982
!		Add CIRCUIT TRANSPORT TYPE, VERIFICATION parameters.
!		Remove prompting of X25 specific parameters.
!
!	V009	TMH0009		Tim Halvorsen	08-Jan-1982
!		Remove TMH0004, thus restoring RETRANSMIT TIMER
!		to a line parameter, which is what NM V3.0 finally
!		came up with.
!		Add additional prompting for CLEAR LINE.
!
!	V008	TMH0008		Tim Halvorsen	18-Dec-1981
!		Add CLEAR OBJECT PROXY, EXECUTOR DEFAULT PROXY & NODE PROXY.
!
!	V007	TMH0007		Tim Halvorsen	11-Nov-1981
!		Add circuit source type to clear logging.
!
!	V006	TMH0006		Tim Halvorsen	22-Oct-1981
!		Fix CLEAR CIRCUIT TRIBUTARY to send the right
!		NICE parameter code.  Add CLEAR EXEC DEFAULT ACCESS
!		and CLEAR NODE ACCESS.
!
!	V005	TMH0005		Tim Halvorsen	18-Aug-1981
!		Change NODE MAXIMUM LINES to MAXIMUM CIRCUITS.
!		Change NODE SERVICE LINE to SERVICE CIRCUIT.
!		Change NODE LINE (loop line) to CIRCUIT.
!		Add CLEAR EXECUTOR PIPELINE QUOTA.
!
!	V004	TMH0004		Tim Halvorsen	05-Aug-1981
!		Change RETRANSMIT TIMER to a circuit parameter
!		from a line parameter.
!
!	V003	TMH0003		Tim Halvorsen	07-Jul-1981
!		Rename circuit maximum blocks to maximum transmits.
!		Add line clock parameter.
!		Add dispatching for CLEAR X25-xxx.
!		Add node subaddresses parameter.
!
!	V002	TMH0002		Tim Halvorsen	11-Jun-1981
!		Add CLEAR CIRCUIT
!
!	V001	LMK0001		Len Kawell		5-Jan-1981
!		Remove HOST ID prompt from CLEAR EXECUTOR.
!--

%SBTTL	'Definitions'

!
! INCLUDE FILES:
!

	LIBRARY 'LIB$:NMALIBRY';
	LIBRARY 'LIB$:NCPLIBRY';
	LIBRARY 'SYS$LIBRARY:TPAMAC';

!
! EXTERNAL REFERENCES:
!

EXTERNAL
	NCP$G_STTBL_CPR,		! Clear X25-PROTOCOL
	NCP$G_KYTBL_CPR,
	NCP$G_STTBL_CSE,		! Clear X25-SERVER
	NCP$G_KYTBL_CSE;

	ACT_DFN				! External symbols for action routines

EXTERNAL ROUTINE
	ACT$NXT_STATE;			! Set vector to next state table

%SBTTL	'Parameter blocks'

!
! BIND DATA:
!

!
!	Parameter Blocks
!

!
!	General blocks
!

	BUILD_PBK

	(CLP,

	ALL, LITB, 0, VRB_ALL,
	KWN, LITB, NMA$C_ENT_KNO, VRB_ENT,

	)


!
!	Parameter blocks for node & executor parameters
!

	BUILD_PCL

	(CNO,

	STA, LITB,	PCNO_STA, ,
	ID,  LITB,	PCNO_IDE, ,
	SLI, LITB,	PCNO_SLI, ,
	SPW, LITB,	PCNO_SPA, ,
	SDV, LITB,	PCNO_SDV, ,
	CPU, LITB,	PCNO_CPU, ,
	LFL, LITB,	PCNO_LOA, ,
	SLF, LITB,	PCNO_SLO, ,
	TLF, LITB,	PCNO_TLO, ,
	STY, LITB,	PCNO_STY, ,
	SID, LITB,	PCNO_SID, ,
	DFL, LITB,	PCNO_DUM, ,
	SDF, LITB,	PCNO_SDU, ,
	DAD, LITB,	PCNO_DAD, ,
	DCT, LITB,	PCNO_DCT, ,
	HOS, LITB,	PCNO_IHO, ,
	CTM, LITB,	PCNO_CTI, ,
	NAM, LITB,	PCNO_NNA, ,
	LIN, LITB,	PCNO_NLI, ,
	ADR, LITB,	PCNO_ADD, ,
	INT, LITB,	PCNO_ITI, ,
	OTM, LITB,	PCNO_OTI, ,
	MLK, LITB,	PCNO_MLK, ,
	DFC, LITB,	PCNO_DFA, ,
	DWT, LITB,	PCNO_DWE, ,
	IAT, LITB,	PCNO_IAT, ,
	RFC, LITB,	PCNO_RFA, ,
	TYP, LITB,	PCNO_ETY, ,
	RTM, LITB,	PCNO_RTI, ,
	SAD, LITB,	PCNO_SAD, ,
	MAD, LITB,	PCNO_MAD, ,
	MLN, LITB,	PCNO_MLN, ,
	MCO, LITB,	PCNO_MCO, ,
	MHP, LITB,	PCNO_MHO, ,
	MVS, LITB,	PCNO_MVI, ,
	MBF, LITB,	PCNO_MBU, ,
	BSZ, LITB,	PCNO_BUS, ,
	RPW, LITB,	PCNO_RPA, ,
	TPW, LITB,	PCNO_TPA, ,
	NAC, LITB,	PCNO_NAC, ,
	NPW, LITB,	PCNO_NPW, ,
	NUS, LITB,	PCNO_NUS, ,
	PAC, LITB,	PCNO_PAC, ,
	PPW, LITB,	PCNO_PPW, ,
	PUS, LITB,	PCNO_PUS, ,
	ACC, LITB,	PCNO_ACC, ,
	DAC, LITB,	PCNO_DAC, ,
	PIQ, LITB,	PCNO_PIQ, ,
	PRX, LITB,	PCNO_PRX, ,
	DPX, LITB,	PCNO_DPX, ,

	, END, , ,

	)


	BUILD_PBK

	(CNO,

	ALL, LITB, 0, VRB_ALL,
	ENT, NADR, , VRB_ENT,
	STA, LITB, 0, ,
	ID,  LITB, 0, ,
	SLI, LITB, 0, ,
	SPW, LITB, 0, ,
	SDV, LITB, 0, ,
	CPU, LITB, 0, ,
	LFL, LITB, 0, ,
	SLF, LITB, 0, ,
	TLF, LITB, 0, ,
	STY, LITB, 0, ,
	SID, LITB, 0, ,
	DFL, LITB, 0, ,
	SDF, LITB, 0, ,
	DAD, LITB, 0, ,
	DCT, LITB, 0, ,
	HOS, LITB, 0, ,
	HOE, LITB, 0, CNO_HOS,
	CTM, LITB, 0, ,
	CTE, LITB, 0, CNO_CTM,
	NAM, LITB, 0, ,
	NAE, LITB, 0, CNO_NAM,
	LIN, LITB, 0, ,
	ADR, LITB, 0, ,
	INT, LITB, 0, ,
	OTM, LITB, 0, ,
	MLK, LITB, 0, ,
	DFC, LITB, 0, ,
	DWT, LITB, 0, ,
	IAT, LITB, 0, ,
	RFC, LITB, 0, ,
	TYP, LITB, 0, ,
	RTM, LITB, 0, ,
	SAD, LITB, 0, ,
	MAD, LITB, 0, ,
	MLN, LITB, 0, ,
	MCO, LITB, 0, ,
	MHP, LITB, 0, ,
	MVS, LITB, 0, ,
	MBF, LITB, 0, ,
	BSZ, LITB, 0, ,
	RPW, LITB, 0, ,
	TPW, LITB, 0, ,
	NAC, LITB, 0, ,
	NPW, LITB, 0, ,
	NUS, LITB, 0, ,
	PAC, LITB, 0, ,
	PPW, LITB, 0, ,
	PUS, LITB, 0, ,
	ACC, LITB, 0, ,
	DAC, LITB, 0, ,
	PRX, LITB, 0, ,
	DPX, LITB, 0, ,
	PIQ, LITB, 0, ,

	)


	BUILD_PBK
	(CEX,

	ENT, LITL, 0, VRB_ENT,

	)


!
!	Executor and Node SDB
!

	BUILD_SDB

	(CNO, NMA$C_ENT_NOD, VRB_ENT, CNO)



!
!	Circuits
!

	BUILD_PCL
	(CCI,

	STA, LITB,	PCCI_STA, ,
	SER, LITB,	PCCI_SER, ,
	CTM, LITB,	PCCI_LCT, ,
	COS, LITB,	PCCI_COS, ,
	HET, LITB,	PCCI_HET, ,
	LIT, LITB,	PCCI_LIT, ,
	BLK, LITB,	PCCI_BLK, ,
	MRC, LITB,	PCCI_MRC, ,
	RCT, LITB,	PCCI_RCT, ,
	NUM, LITB,	PCCI_NUM, ,
	POL, LITB,	PCCI_POL, ,
	OWN, LITB,	PCCI_OWN, ,
	LIN, LITB,	PCCI_LIN, ,
	USE, LITB,	PCCI_USE, ,
	TYP, LITB,	PCCI_TYP, ,
	DTE, LITB,	PCCI_DTE, ,
	CHN, LITB,	PCCI_CHN, ,
	MBL, LITB,	PCCI_MBL, ,
	MWI, LITB,	PCCI_MWI, ,
	TRI, LITB,	PCCI_TRI, ,
	BBT, LITB,	PCCI_BBT, ,
	TRT, LITB,	PCCI_TRT, ,
	MRB, LITB,	PCCI_MRB, ,
	MTR, LITB,	PCCI_MTR, ,
	ACB, LITB,	PCCI_ACB, ,
	ACI, LITB,	PCCI_ACI, ,
	IAB, LITB,	PCCI_IAB, ,
	IAI, LITB,	PCCI_IAI, ,
	IAT, LITB,	PCCI_IAT, ,
	DYB, LITB,	PCCI_DYB, ,
	DYI, LITB,	PCCI_DYI, ,
	DYT, LITB,	PCCI_DYT, ,
	DTH, LITB,	PCCI_DTH, ,

	VER, LITB,	PCCI_VER, ,
	XPT, LITB,	PCCI_XPT, ,

	, END, , ,

	)

	BUILD_PBK

	(CCI,

	ALL, LITB, 0, VRB_ALL,
	ENT, TKN, , VRB_ENT,

	STA, LITB, 0, ,
	SER, LITB, 0, ,
	CTM, LITB, 0, ,
	COS, LITB, 0, ,
	HET, LITB, 0, ,
	LIT, LITB, 0, ,
	BLK, LITB, 0, ,
	MRC, LITB, 0, ,
	RCT, LITB, 0, ,
	NUM, LITB, 0, ,
	POL, LITB, 0, ,
	OWN, LITB, 0, ,
	LIN, LITB, 0, ,
	USE, LITB, 0, ,
	TYP, LITB, 0, ,
	DTE, LITB, 0, ,
	CHN, LITB, 0, ,
	MBL, LITB, 0, ,
	MWI, LITB, 0, ,
	TRI, LITB, 0, ,
	BBT, LITB, 0, ,
	TRT, LITB, 0, ,
	MRB, LITB, 0, ,
	MTR, LITB, 0, ,
	ACB, LITB, 0, ,
	ACI, LITB, 0, ,
	IAB, LITB, 0, ,
	IAI, LITB, 0, ,
	IAT, LITB, 0, ,
	DYB, LITB, 0, ,
	DYI, LITB, 0, ,
	DYT, LITB, 0, ,
	DTH, LITB, 0, ,

	VER, LITB, 0, ,
	XPT, LITB, 0, ,

	)

	BUILD_SDB

	(CCI, NMA$C_ENT_CIR, VRB_ENT, CCI)


!
!	Lines
!

	BUILD_PCL

	(CLI,

	STA, LITB,	PCLI_STA, ,
	SVM, LITB,	PCLI_SER, ,
	CTM, LITB,	PCLI_LCT, ,
	COS, LITB,	PCLI_COS, ,
	DEV, LITB,	PCLI_DEV, ,
	PRO, LITB,	PCLI_PRO, ,
	DPX, LITB,	PCLI_DUP, ,
	CON, LITB,	PCLI_CON, ,
	CLO, LITB,	PCLI_CLO, ,
	TYP, LITB,	PCLI_LTY, ,
	STM, LITB,	PCLI_STI, ,
	NTM, LITB,	PCLI_NTI, ,
	HTI, LITB,	PCLI_HTI, ,
	MBL, LITB,	PCLI_MBL, ,
	MRT, LITB,	PCLI_MRT, ,
	MWI, LITB,	PCLI_MWI, ,
	TRB, LITB,	PCLI_TRI, ,
	SLT, LITB,	PCLI_SLT, ,
	DDT, LITB,	PCLI_DDT, ,
	DLT, LITB,	PCLI_DLT, ,
	SRT, LITB,	PCLI_SRT, ,
	BFN, LITB,	PCLI_BFN, ,

	, END, , ,

	)

	BUILD_PBK

	(CLI,

	ALL, LITB, 0, VRB_ALL,
	ENT, TKN, , VRB_ENT,

	STA, LITB, 0, ,
	SVM, LITB, 0, ,
	CTM, LITB, 0, ,
	COS, LITB, 0, ,
	DEV, LITB, 0, ,
	PRO, LITB, 0, ,
	DPX, LITB, 0, ,
	CON, LITB, 0, ,
	CLO, LITB, 0, ,
	TYP, LITB, 0, ,
	STM, LITB, 0, ,
	NTM, LITB, 0, ,
	HTI, LITB, 0, ,
	MBL, LITB, 0, ,
	MRT, LITB, 0, ,
	MWI, LITB, 0, ,
	TRB, LITB, 0, ,
	SLT, LITB, 0, ,
	DDT, LITB, 0, ,
	DLT, LITB, 0, ,
	SRT, LITB, 0, ,
	BFN, LITB, 0, ,

	)

	BUILD_SDB

	(CLI, NMA$C_ENT_LIN, VRB_ENT, CLI)


!
!	Logging
!

	BUILD_PCL

	(CLO,

	NAM, LITB,	PCLO_LNA, ,
	SNO, NADR,	PCLO_SIN, ,
	EVL, ESET,	PCLO_EVE, VRB_EVE,

	, END, , ,

	)

	BUILD_PBK

	(CLO,

	ALL, LITB, 0, VRB_ALL,
	EVK, LITB, 0, CLO_EVL,
	KNE, LITB, 0, CLO_EVL,
	EVL, LITB, 0, ,
	SEX, LITL, 0, CLO_SNO,
	SNO, NADR, , ,
	NAM, LITB, 0, ,
	CIR, ESCI, , VRB_EVE,
	LIN, ESLI, , VRB_EVE,
	NOD, ESNO, , VRB_EVE,

	)

	BUILD_SDB

	(CLO, NMA$C_ENT_LOG, VRB_ENT, CLO)


!
!	Objects
!

	BUILD_PCL

	(COB,

	NUM, LITB,	PCOB_NUM, ,
	FIL, LITB,	PCOB_FID, ,
	PRV, LITB,	PCOB_PRV, ,
	USR, LITB,	PCOB_USR, ,
	ACC, LITB,	PCOB_ACC, ,
	PSW, LITB,	PCOB_PSW, ,
	PRX, LITB,	PCOB_PRX, ,

	, END, , ,

	)

	BUILD_PBK

	(COB,

	ENT, TKN, , VRB_ENT,

	ALL, LITB, 0, VRB_ALL,
	NUM, LITB, 0, ,
	FIL, LITB, 0, ,
	PRV, LITB, 0, ,
	USR, LITB, 0, ,
	ACC, LITB, 0, ,
	PSW, LITB, 0, ,
	PRX, LITB, 0, ,

	)

	BUILD_SDB

	(COB, -NMA$C_SENT_OBJ, VRB_ENT, COB)

%SBTTL	'Prompt strings'

!
!	Build prompt strings
!

BIND

	PROMPT_STRINGS
	(CLP,

	ENT, %STRING('(CIRCUIT, EXECUTOR, KNOWN, LINE,', CRLF,
	     '           LOGGING, MODULE, NODE, OBJECT): '),
	MOD, '                   (X25-PROTOCOL, X25-SERVER): ',
	KWN, '             (LINES, LOGGING, NODES, OBJECTS): ',

	)
	,

	PROMPT_STRINGS
	(CLI,

	ALL, 'All line parameters (Y, N): ',
	ENT, 'Line ID        (dev-c-u.t): ',
!	CTM, 'Counter timer       (Y, N): ',
!	DDT, 'Dead timer          (Y, N): ',
!	DLT, 'Delay timer         (Y, N): ',
!	HTI, 'Holdback timer      (Y, N): ',
!	MRT, 'Maximum retransmits (Y, N): ',
!	SLT, 'Scheduling timer    (Y, N): ',
!	SRT, 'Stream timer        (Y, N): ',

	)
	,

	PROMPT_STRINGS
	(CCI,

	ALL, 'All circuit parameters  (Y, N): ',
	ENT, 'Circuit ID     (16 characters): ',
!	BBT, 'Babble timer            (Y, N): ',
!	CTM, 'Counter timer           (Y, N): ',
!	MRB, 'Maximum receive buffers (Y, N): ',
!!	MRC, 'Maximum recalls         (Y, N): ',
!!	OWN, 'Owner                   (Y, N): ',
!!	RCT, 'Recall timer            (Y, N): ',
!	TRT, 'Transmit timer          (Y, N): ',
!	ACB, 'Active base             (Y, N): ',
!	ACI, 'Active increment        (Y, N): ',
!	IAB, 'Inactive base           (Y, N): ',
!	IAI, 'Inactive increment      (Y, N): ',
!	IAT, 'Inactive threshold      (Y, N): ',
!	DYB, 'Dying base              (Y, N): ',
!	DYI, 'Dying increment         (Y, N): ',
!	DYT, 'Dying threshold         (Y, N): ',
!	DTH, 'Dead threshold          (Y, N): ',

	)
	,

	PROMPT_STRINGS
	(CLO,

	ALL, 'All logging of the specified type      (Y, N): ',
	ENT, 'Type of logging      (CONSOLE, FILE, MONITOR): ',
	EVK, 'Event list           (cls.typ-typ,typ, KNOWN): ',
	NAM, 'Name of sink file                      (Y, N): ',
	SRC, %STRING('Source of events (LINE line-id, ', CRLF,
	     '               CIRCUIT circ-id, NODE node-id): '),
	SNO, 'Sink node                 (node-id, EXECUTOR): ',

	)
	;


!BIND

!	PROMPT_STRINGS
!	(CNO,

!	CTM, 'Counter timer     (Y, N): ',
!	CTE, 'Counter timer     (Y, N): ',
!	HOS, 'Host node ID      (Y, N): ',
!	HOE, 'Host node ID      (Y, N): ',
!	ID,  'System ID string  (Y, N): ',
!	ACC, 'Link access       (Y, N): ',
!	PRX, 'Proxy access      (Y, N): ',
!	PIQ, 'Pipeline quota    (Y, N): ',

!	)
!	;

BIND

	PROMPT_STRINGS
	(CNO,

	ALL, 'All parameters       (Y, N): ',
!	SDV, 'Service device       (Y, N): ',
!	CPU, 'Processor type       (Y, N): ',
!	STY, 'Software type        (Y, N): ',
!	SID, 'Software id          (Y, N): ',
!	DAD, 'Dump address         (Y, N): ',
!	DCT, 'Dump count           (Y, N): ',
!	DFL, 'Dump file            (Y, N): ',
!	LIN, 'Associated line      (Y, N): ',
!	LFL, 'Load file            (Y, N): ',
!	RPW, 'Receive password     (Y, N): ',
!	SDF, 'Secondary dumper     (Y, N): ',
!	SLF, 'Secondary loader     (Y, N): ',
!	SLI, 'Service line         (Y, N): ',
!	SPW, 'Service password     (Y, N): ',
!	TLF, 'Tertiary loader      (Y, N): ',
!	TPW, 'Transmit password    (Y, N): ',

!	NAC, 'Non-priv account     (Y, N): ',
!	NPW, 'Non-priv password    (Y, N): ',
!	NUS, 'Non-priv user ID     (Y, N): ',
!	PAC, 'Priv account         (Y, N): ',
!	PPW, 'Priv password        (Y, N): ',
!	PUS, 'Priv user ID         (Y, N): ',
!	DAC, 'Default link access  (Y, N): ',
!	DPX, 'Default proxy access (Y, N): ',

	ENT, 'Node ID (node-name, node-address): ',

	)
	;


BIND

	PROMPT_STRINGS
	(COB,

	ALL, 'All parameters     (Y, N): ',
	ENT, 'Object name (object-name): ',
	FIL, 'File name          (Y, N): ',
	NUM, 'Object number      (Y, N): ',
	PRV, 'Privileges         (Y, N): ',
	USR, 'User ID            (Y, N): ',
	PSW, 'Password           (Y, N): ',
	ACC, 'Account            (Y, N): ',
	PRX, 'Proxy access       (Y, N): ',

	)
	;

%SBTTL	'State Table Entry'

$INIT_STATE (NCP$G_STTBL_CLP, NCP$G_KYTBL_CLP);

!
!	CLEAR/PURGE Commands
!

!
!	Dispatch to entity types and prompt if end of string
!

	COMMAND_PROMPT
	(CLP, ENT, NCP$_INVKEY,

	('CIRCUIT',	ST_CCI_ENT, , NMA$C_ENT_CIR, NCP$GL_OPTION, ),
	('EXECUTOR',	ST_CEX_GO,  , NMA$C_ENT_NOD, NCP$GL_OPTION, ),
	('LINE',	ST_CLI_ENT, , NMA$C_ENT_LIN, NCP$GL_OPTION, ),
	('LOGGING',	ST_CLO_ENT, , NMA$C_ENT_LOG, NCP$GL_OPTION, ),
	('KNOWN',	ST_CLP_KWN, ACT$SAVPRM, , , PBK$G_CLP_KWN),
	('MODULE',	ST_CLP_MOD),
	('NODE',	ST_CNO_ENT, , NMA$C_ENT_NOD, NCP$GL_OPTION, ),
	('OBJECT',	ST_COB_ENT, , NMA$C_SENT_OBJ, NCP$GL_OPTION, ),
	('X25',		ST_CLP_X25)
	)

%SBTTL	'Clear/Purge Known'

!
!	Clear purge known
!

!
!	Dispatch for the entity types, prompt if none
!

	COMMAND_PROMPT
	(CLP, KWN, NCP$_INVKEY,

	('CIRCUITS',	ST_CCI_GO, , NMA$C_ENT_CIR, NCP$GL_OPTION, ),
	('LINES',	ST_CLI_GO, , NMA$C_ENT_LIN, NCP$GL_OPTION, ),
	('LOGGING',	ST_CLO_GO, , NMA$C_ENT_LOG, NCP$GL_OPTION, ),
	('NODES',	ST_CNO_GO, , NMA$C_ENT_NOD, NCP$GL_OPTION, ),
	('OBJECTS',	ST_COB_GO, , NMA$C_SENT_OBJ, NCP$GL_OPTION, )

	)

%SBTTL	'Clear/Purge Module'

!
!	Modules
!

	COMMAND_PROMPT
	(CLP, MOD, NCP$_INVKEY,

	('X25')
	)

$STATE	(ST_CLP_X25,
	('-'));
$STATE	(,
	('PROTOCOL',	ST_CLP_CPR),
	('SERVER',	ST_CLP_CSE)
	);

$STATE	(ST_CLP_CPR,
	(TPA$_LAMBDA, TPA$_EXIT, ACT$NXT_STATE,
		NMA$C_ENT_MOD, NCP$GL_OPTION, NEXT_STATE(CPR))
	);

$STATE	(ST_CLP_CSE,
	(TPA$_LAMBDA, TPA$_EXIT, ACT$NXT_STATE,
		NMA$C_ENT_MOD, NCP$GL_OPTION, NEXT_STATE(CSE))
	);

%SBTTL	'Clear/Purge Executor'

!
!	CLEAR/PURGE Executor
!

$STATE	(ST_CEX_GO,
	(TPA$_LAMBDA, , ACT$SAVPRM, , , PBK$G_CEX_ENT)
	);

$STATE	(,
	(TPA$_EOS),
	( (ST_CNO_PRC), ST_CEX_DOIT)
	);

$STATE	(,
	(TPA$_LAMBDA, ST_CNO_PMT_ALL));		! Use NODE prompting

$STATE	(ST_CEX_DOIT,
	(TPA$_LAMBDA, ST_CNO_DOIT)
	);

%SBTTL	'Clear/Purge Nodes'

!
!	Clear purge nodes
!

!
!	Collect the node id or prompt
!

	COMMAND_PROMPT
	(CNO, ENT, NCP$_INVVAL,

	( (SE_NODE_ID), , ACT$SAVPRM, , , PBK$G_CNO_ENT)

	)

!
!	Come here after KNOWN NODES
!	either prompt or process keywords
!

$STATE	(ST_CNO_GO,
	(TPA$_EOS),
	( (ST_CNO_PRC), ST_CNO_DOIT)
	);

	QUERY_STATES			! Query for node parameters
	(CNO,

	ALL
	
	)

$STATE	(ST_CNO_DOIT,			! Perform the function
	(TPA$_LAMBDA, , , NMA$C_ENT_NOD, NCP$GL_OPTION, )
	);

$STATE	(,
	(TPA$_EOS, TPA$_EXIT, ACT$VRB_UTILITY, , , SDB$G_CNO)
	);


%SBTTL	'Node Dispatch States'

!
!	Dispatch states
!

$STATE	(ST_CNO_PRC,

	DISPATCH_STATES
	(CNO,

	ACC, 'ACCESS',
	ADR, 'ADDRESS',
	ALL, 'ALL',
	BSZ, 'BUFFER',
	MCO, 'COST',
	CTM, 'COUNTER',
	CPU, 'CPU',
	DEF, 'DEFAULT',
	DLY, 'DELAY',
	DUM, 'DUMP',
	MHP, 'HOPS',
	HOS, 'HOST',
	ID,  'IDENTIFICATION',
	IAT, 'INACTIVITY',
	INT, 'INCOMING',
	LIN, 'CIRCUIT',
	LFL, 'LOAD',
	MLK, 'LINKS',
	MAX, 'MAXIMUM',
	NAM, 'NAME',
	NPR, 'NONPRIVILEGED',
	OTM, 'OUTGOING',
	PIQ, 'PIPELINE',
	PRV, 'PRIVILEGED',
	PRX, 'PROXY',
	RPW, 'RECEIVE',
	RFC, 'RETRANSMIT',
	RTM, 'ROUTING',
	SEC, 'SECONDARY',
	SOF, 'SOFTWARE',
	SVC, 'SERVICE',
	STA, 'STATE',
	SAD, 'SUBADDRESSES',
	TLF, 'TERTIARY',
	TPW, 'TRANSMIT',
	TYP, 'TYPE',
	MVS, 'VISITS'

	)

	,(TPA$_EOS, TPA$_EXIT)
	);

%SBTTL	'Node Process States'

!
!	Process states
!

	PROCESS_STATES
	(CNO,

	ADR, ,
	BSZ, 'SIZE',
	CTM, 'TIMER',
	DFC, ,
	DWT, ,
	HOS, ,
	ID, ,
	IAT, 'TIMER',
	INT, 'TIMER',
	MAD, ,
	MBF, ,
	MCO, ,
	MHP, ,
	MLN, ,
	MLK, ,
	MVS, ,
	NAM, ,
	OTM, 'TIMER',
	RFC, 'FACTOR',
	RTM, 'TIMER',
	SAD, ,
	STA, ,
	TYP, ,

	ALL, ,
	CPU, ,
	DAD, ,
	DCT, ,
	DFL, ,
	LIN, ,
	LFL, 'FILE',
	RPW, 'PASSWORD',
	SID, ,
	SLF, ,
	SDF, ,
	SDV, ,
	STY, ,
	SPW, ,
	SLI, ,
	TLF, 'LOADER',
	TPW, 'PASSWORD',
	ACC, ,
	DAC, ,
	PIQ, 'QUOTA',
	PRX, ,
	DPX, ,

	)



$STATE	(ST_CNO_PRC_MAX,		! MAXIMUM keyword dispatch

	DISPATCH_STATES
	(CNO,

	MAD, 'ADDRESS',
	MBF, 'BUFFERS',
	MCO, 'COST',
	MHP, 'HOPS',
	MLN, 'CIRCUITS',
	MLK, 'LINKS',
	MVS, 'VISITS',

	));

$STATE	(ST_CNO_PRC_DLY,			! DELAY keyword dispatch

	DISPATCH_STATES
	(CNO,

	DFC, 'FACTOR',
	DWT, 'WEIGHT',

	));

$STATE	(ST_CNO_PRC_SVC,			! SERVICE keyword dispatch

	DISPATCH_STATES
	(CNO,

	SDV, 'DEVICE',
	SLI, 'CIRCUIT',
	SPW, 'PASSWORD',

	));

$STATE	(ST_CNO_PRC_SEC,			! SECONDARY keyword dispatch

	DISPATCH_STATES
	(CNO,

	SDF, 'DUMPER',
	SLF, 'LOADER',

	));

$STATE	(ST_CNO_PRC_DUM,			! DUMP keyword dispatch

	DISPATCH_STATES
	(CNO,

	DFL, 'FILE',
	DAD, 'ADDRESS',
	DCT, 'COUNT',

	));

$STATE	(ST_CNO_PRC_SOF,			! SOFTWARE keyword dispatch

	DISPATCH_STATES
	(CNO,

	SID, 'IDENTIFICATION',
	STY, 'TYPE',

	));

$STATE	(ST_CNO_PRC_DEF,			! DEFAULT keyword dispatch

	DISPATCH_STATES
	(CNO,

	DAC, 'ACCESS',
	DPX, 'PROXY',

	));


!
!	Process states for nonprivileged parameters
!

$STATE	(ST_CNO_PRC_NPR,
	('ACCOUNT',	ST_CNO_PRC_NAC),
	('PASSWORD',	ST_CNO_PRC_NPW),
	('USER',	ST_CNO_PRC_NUS),
	(TPA$_LAMBDA,	ST_CNO_PRC)
	);

$STATE	(ST_CNO_PRC_NAC,
	( (ST_CNO_NAC), ST_CNO_PRC_NPR)
	);

$STATE	(ST_CNO_PRC_NPW,
	( (ST_CNO_NPW), ST_CNO_PRC_NPR)
	);

$STATE	(ST_CNO_PRC_NUS,
	( (ST_CNO_NUS), ST_CNO_PRC_NPR)
	);

!
!	Process states for privileged parameters
!

$STATE	(ST_CNO_PRC_PRV,
	('ACCOUNT',	ST_CNO_PRC_PAC),
	('PASSWORD',	ST_CNO_PRC_PPW),
	('USER',	ST_CNO_PRC_PUS),
	(TPA$_LAMBDA,	ST_CNO_PRC)
	);

$STATE	(ST_CNO_PRC_PAC,
	( (ST_CNO_PAC), ST_CNO_PRC_PRV)
	);

$STATE	(ST_CNO_PRC_PPW,
	( (ST_CNO_PPW), ST_CNO_PRC_PRV)
	);

$STATE	(ST_CNO_PRC_PUS,
	( (ST_CNO_PUS), ST_CNO_PRC_PRV)
	);

%SBTTL	'Node Subexpression States'

!
!	Subexpression states
!

!
!	Build sub-expressions to capture parameters
!

	SUB_EXPRESSIONS
	(CNO,

	ADR, TPA$_LAMBDA,
	BSZ, TPA$_LAMBDA,
	CTM, TPA$_LAMBDA,
	CTE, TPA$_LAMBDA,
	DFC, TPA$_LAMBDA,
	DWT, TPA$_LAMBDA,
	HOS, TPA$_LAMBDA,
	HOE, TPA$_LAMBDA,
	ID,  TPA$_LAMBDA,
	IAT, TPA$_LAMBDA,
	INT, TPA$_LAMBDA,
	MAD, TPA$_LAMBDA,
	MBF, TPA$_LAMBDA,
	MCO, TPA$_LAMBDA,
	MHP, TPA$_LAMBDA,
	MLN, TPA$_LAMBDA,
	MLK, TPA$_LAMBDA,
	MVS, TPA$_LAMBDA,
	NAM, TPA$_LAMBDA,
	NAE, TPA$_LAMBDA,
	OTM, TPA$_LAMBDA,
	RFC, TPA$_LAMBDA,
	RTM, TPA$_LAMBDA,
	SAD, TPA$_LAMBDA,
	STA, TPA$_LAMBDA,
	TYP, TPA$_LAMBDA,

	ALL, TPA$_EOS,
	CPU, TPA$_LAMBDA,
	DAD, TPA$_LAMBDA,
	DCT, TPA$_LAMBDA,
	DFL, TPA$_LAMBDA,
	LIN, TPA$_LAMBDA,
	LFL, TPA$_LAMBDA,
	RPW, TPA$_LAMBDA,
	SDV, TPA$_LAMBDA,
	SID, TPA$_LAMBDA,
	SLI, TPA$_LAMBDA,
	SPW, TPA$_LAMBDA,
	SDF, TPA$_LAMBDA,
	SLF, TPA$_LAMBDA,
	STY, TPA$_LAMBDA,
	TLF, TPA$_LAMBDA,
	TPW, TPA$_LAMBDA,
	NAC, TPA$_LAMBDA,
	NPW, TPA$_LAMBDA,
	NUS, TPA$_LAMBDA,
	PAC, TPA$_LAMBDA,
	PPW, TPA$_LAMBDA,
	PUS, TPA$_LAMBDA,
	ACC, TPA$_LAMBDA,
	DAC, TPA$_LAMBDA,
	PIQ, TPA$_LAMBDA,
	PRX, TPA$_LAMBDA,
	DPX, TPA$_LAMBDA,

	)

%SBTTL	'Clear/Purge Circuits'

!
!	Clear purge circuits
!

!
!	Collect the circuit id and save it, prompt if none
!

	COMMAND_PROMPT
	(CCI, ENT, NCP$_INVVAL,

	( (SE_CIRC_ID), , ACT$SAVPRM, , , PBK$G_CCI_ENT)

	)

!
!	Come here after KNOWN and either prompt
!	or dispatch to process args
!

$STATE	(ST_CCI_GO,
	(TPA$_EOS),
	(TPA$_LAMBDA, ST_CCI_PRC)
	);

	QUERY_STATES		! Build states to query for params
	(CCI,

	ALL

	)

!
!	Perform the function if there is no junk on the line
!

$STATE	(ST_CCI_DOIT,			! Set the option mask
	(TPA$_LAMBDA, , , NMA$C_ENT_CIR, NCP$GL_OPTION, )
	);

$STATE	(,				! Perform the function
	(TPA$_EOS, TPA$_EXIT, ACT$VRB_UTILITY, , , SDB$G_CCI)
	);


!
!	Dispatch for the parameters
!

$STATE	(ST_CCI_PRC,

	DISPATCH_STATES
	(CCI,

	ACT, 'ACTIVE',
	ALL, 'ALL',
	BBT, 'BABBLE',
	BLK, 'BLOCKING',
	CHN, 'CHANNEL',
	COS, 'COST',
	CTM, 'COUNTER',
	DTH, 'DEAD',
	DTE, 'DTE',
	DYE, 'DYING',
	HET, 'HELLO',
	IAC, 'INACTIVE',
	LIN, 'LINE',
	LIT, 'LISTEN',
	MAX, 'MAXIMUM',
	NUM, 'NUMBER',
	OWN, 'OWNER',
	POL, 'POLLING',
	RCT, 'RECALL',
	SER, 'SERVICE',
	STA, 'STATE',
	TRT, 'TRANSMIT',
	XPT, 'TRANSPORT',
	TRI, 'TRIBUTARY',
	TYP, 'TYPE',
	USE, 'USAGE',
	VER, 'VERIFICATION',

	)

	,(TPA$_EOS, ST_CCI_DOIT)
	);


!
!	These states take care of noise words
!	and call the subexpressions to do the work
!

	PROCESS_STATES
	(CCI,

	ALL, ,
	STA, ,
	SER, ,
	CTM, 'TIMER',
	COS, ,
	HET, 'TIMER',
	LIT, 'TIMER',
	BLK, ,
	MRC, ,				! From MAX below
	RCT, 'TIMER',
	NUM, ,
	POL, 'STATE',
	OWN, ,
	LIN, ,
	USE, ,
	TYP, ,
	DTE, ,
	CHN, ,
	MBL, ,				! From MAX below
	MWI, ,				! From MAX below
	TRI, ,
	BBT, 'TIMER',
	TRT, 'TIMER',
	MRB, ,				! From MAX below
	MTR, ,				! From MAX below
	ACB, ,				! From ACT below
	ACI, ,				! From ACT below
	IAB, ,				! From IAC below
	IAI, ,				! From IAC below
	IAT, ,				! From IAC below
	DYB, ,				! From DYE below
	DYI, ,				! From DYE below
	DYT, ,				! From DYE below
	DTH, 'THRESHOLD',

	VER, ,
	XPT, 'TYPE',

	)


!
!	These subexpressions store away the parameter id's
!

	SUB_EXPRESSIONS
	(CCI,

	ALL, TPA$_EOS,

	STA, TPA$_LAMBDA,
	SER, TPA$_LAMBDA,
	CTM, TPA$_LAMBDA,
	COS, TPA$_LAMBDA,
	HET, TPA$_LAMBDA,
	LIT, TPA$_LAMBDA,
	BLK, TPA$_LAMBDA,
	MRC, TPA$_LAMBDA,
	RCT, TPA$_LAMBDA,
	NUM, TPA$_LAMBDA,
	POL, TPA$_LAMBDA,
	OWN, TPA$_LAMBDA,
	LIN, TPA$_LAMBDA,
	USE, TPA$_LAMBDA,
	TYP, TPA$_LAMBDA,
	DTE, TPA$_LAMBDA,
	CHN, TPA$_LAMBDA,
	MBL, TPA$_LAMBDA,
	MWI, TPA$_LAMBDA,
	TRI, TPA$_LAMBDA,
	BBT, TPA$_LAMBDA,
	TRT, TPA$_LAMBDA,
	MRB, TPA$_LAMBDA,
	MTR, TPA$_LAMBDA,
	ACB, TPA$_LAMBDA,
	ACI, TPA$_LAMBDA,
	IAB, TPA$_LAMBDA,
	IAI, TPA$_LAMBDA,
	IAT, TPA$_LAMBDA,
	DYB, TPA$_LAMBDA,
	DYI, TPA$_LAMBDA,
	DYT, TPA$_LAMBDA,
	DTH, TPA$_LAMBDA,

	VER, TPA$_LAMBDA,
	XPT, TPA$_LAMBDA,

	)


!
!	Dispatch on MAXIMUM keyword
!

$STATE	(ST_CCI_PRC_MAX,

	DISPATCH_STATES
	(CCI,

	MBL, 'BLOCK',
	MRC, 'RECALLS',
	MTR, 'TRANSMITS',
	MWI, 'WINDOW',

	)
	);

!
!	Dispatch on ACTIVE keyword
!

$STATE	(ST_CCI_PRC_ACT,

	DISPATCH_STATES
	(CCI,

	ACB, 'BASE',
	ACI, 'INCREMENT',
	
	)
	);

!
!	Dispatch for INACTIVE keyword
!

$STATE	(ST_CCI_PRC_IAC,		! Inactive things

	DISPATCH_STATES
	(CCI,

	IAB, 'BASE',
	IAI, 'INCREMENT',
	IAT, 'THRESHOLD',

	)
	);

!
!	Dispatch for DYING keyword
!

$STATE	(ST_CCI_PRC_DYE,

	DISPATCH_STATES
	(CCI,

	DYB, 'BASE',
	DYI, 'INCREMENT',
	DYT, 'THRESHOLD',

	)
	);

%SBTTL	'Clear/Purge Lines'

!
!	Clear purge lines
!

!
!	Collect the line id and save it, prompt if none
!

	COMMAND_PROMPT
	(CLI, ENT, NCP$_INVVAL,

	( (SE_LINE_ID), , ACT$SAVPRM, , , PBK$G_CLI_ENT)

	)

!
!	Come here after KNOWN and either prompt
!	or dispatch to process args
!

$STATE	(ST_CLI_GO,
	(TPA$_EOS),
	(TPA$_LAMBDA, ST_CLI_PRC)
	);

	QUERY_STATES		! Build states to query for params
	(CLI,

	ALL

	)

!
!	Perform the function if there is no junk on the line
!

$STATE	(ST_CLI_DOIT,			! Set the option mask
	(TPA$_LAMBDA, , , NMA$C_ENT_LIN, NCP$GL_OPTION, )
	);

$STATE	(,				! Perform the function
	(TPA$_EOS, TPA$_EXIT, ACT$VRB_UTILITY, , , SDB$G_CLI)
	);


!
!	Dispatch for line parameters
!

$STATE	(ST_CLI_PRC,

	DISPATCH_STATES
	(CLI,

	ALL, 'ALL',
	CLO, 'CLOCK',
	CON, 'CONTROLLER',
	COS, 'COST',
	CTM, 'COUNTER',
	DDT, 'DEAD',
	DLT, 'DELAY',
	DEV, 'DEVICE',
	DPX, 'DUPLEX',
	HTI, 'HOLDBACK',
	MAX, 'MAXIMUM',
	NTM, 'RETRANSMIT',
	NTM, 'NORMAL',			! [V2 only]
	PRO, 'PROTOCOL',
	BFN, 'RECEIVE',
	SLT, 'SCHEDULING',
	SVC, 'SERVICE',
	STA, 'STATE',
	SRT, 'STREAM',
	TRB, 'TRIBUTARY',
	TYP, 'TYPE',

	)

	,(TPA$_EOS, ST_CLI_DOIT)
	);


!
!	These states take care of noise words
!	and call the subexpressions to do the work
!

	PROCESS_STATES
	(CLI,

	ALL, ,
	CLO, ,
	CON, ,
	COS, ,
	CTM, 'TIMER',
	DDT, 'TIMER',
	DLT, 'TIMER',
	DEV, ,
	DPX, ,
	HTI, 'TIMER',
	MWI, ,				! From MAX below
	MRT, ,				! From MAX below
	MBL, ,				! From MAX below
	NTM, 'TIMER',
	PRO, ,
	BFN, 'BUFFERS',
	SLT, 'TIMER',
	STM, ,
	SVM, ,
	STA, ,
	SRT, 'TIMER',
	TRB, ,
	TYP, ,

	)


!
!	These subexpressions store away the parameter id's
!

	SUB_EXPRESSIONS
	(CLI,

	ALL, TPA$_EOS,

	CLO, TPA$_LAMBDA,
	CON, TPA$_LAMBDA,
	COS, TPA$_LAMBDA,
	CTM, TPA$_LAMBDA,
	DDT, TPA$_LAMBDA,
	DLT, TPA$_LAMBDA,
	DEV, TPA$_LAMBDA,
	DPX, TPA$_LAMBDA,
	HTI, TPA$_LAMBDA,
	MBL, TPA$_LAMBDA,
	MRT, TPA$_LAMBDA,
	MWI, TPA$_LAMBDA,
	NTM, TPA$_LAMBDA,
	PRO, TPA$_LAMBDA,
	BFN, TPA$_LAMBDA,
	SLT, TPA$_LAMBDA,
	STM, TPA$_LAMBDA,
	SVM, TPA$_LAMBDA,
	STA, TPA$_LAMBDA,
	SRT, TPA$_LAMBDA,
	TRB, TPA$_LAMBDA,
	TYP, TPA$_LAMBDA,

	)

!
!	Dispatch on MAXIMUM keyword
!

$STATE	(ST_CLI_PRC_MAX,

	DISPATCH_STATES
	(CLI,

	MBL, 'BLOCK',
	MRT, 'RETRANSMITS',
	MWI, 'WINDOW',

	)
	);

!
!	Dispatch on line SERVICE keyword
!

$STATE	(ST_CLI_PRC_SVC,

	DISPATCH_STATES
	(CLI,

	SVM, 'MODE',
	STM, 'TIMER',

	)
	);

%SBTTL	'Clear/Purge Logging'

!
!	Clear purge logging
!

	COMMAND_PROMPT
	(CLO, ENT, NCP$_INVVAL,

	( (SE_LOG_TYP) )		! Collect the logging type or prompt

	)

$STATE	(ST_CLO_GO,			! Come here from elsewhere
	(TPA$_LAMBDA, , ACT$SAVPRM, , , PBK$G_EVE_ESET)
	);

$STATE	(,
	(TPA$_EOS),			! And prompt or
	(TPA$_LAMBDA, ST_CLO_PRC)	! Process command line
	);

	QUERY_STATES
	(CLO,

	ALL				! All is special, must query

	)

	PROMPT_STATES
	(CLO,

	SRC, EVK, SNO			! Obtain parameters

	)

	QUERY_STATES
	(CLO,

	NAM				! Only a query here

	)

$STATE	(ST_CLO_DOIT,			! Process the function
	(TPA$_LAMBDA, , , NMA$C_ENT_LOG, NCP$GL_OPTION, )
	);

$STATE	(,
	(TPA$_EOS, TPA$_EXIT, ACT$VRB_UTILITY, , , SDB$G_CLO)
	);



!
!	Dispatch States
!

$STATE	(ST_CLO_PRC,			! Dispatch to process parameters

	DISPATCH_STATES
	(CLO,

	ALL, 'ALL',
	CIR, 'CIRCUIT',
	EVL, 'EVENTS',
	KNE, 'KNOWN',
	LIN, 'LINE',
	NOD, 'NODE',
	NAM, 'NAME',
	SNK, 'SINK',

	)
	,(TPA$_EOS, ST_CLO_DOIT)	! Only if end of string
	);


!
!	Process states
!

	PROCESS_STATES
	(CLO,

	ALL, ,
	CIR, ,
	EVL, ,
	KNE, 'EVENTS',
	LIN, ,
	NOD, ,
	NAM, ,
	SNK, ,

	)

$STATE	(ST_CLO_SRC,			! Source must be line, circuit or node
	('CIRCUIT', ST_CLO_CIR),
	('LINE', ST_CLO_LIN),
	('NODE', ST_CLO_NOD),
	);

$STATE	(ST_CLO_SNK,			! Sub-dispatch for sink node or exec
	('EXECUTOR',	ST_CLO_SEX),
	('NODE',	ST_CLO_SNO)
	);


!
!	Subexpressions
!

	SUB_EXPRESSIONS
	(CLO,

	ALL, TPA$_EOS,
	CIR, (SE_CIRC_ID),
	EVL, (SE_EVENT_LIST),
	KNE, (SE_EVENT_KNOWN),
	LIN, (SE_LINE_ID),
	NOD, (SE_NODE_ID),
	NAM, TPA$_LAMBDA,
	SNO, (SE_NODE_ID),
	SEX, TPA$_LAMBDA,

	)


!
!	Subexpression to prompt for events
!

$STATE	(ST_CLO_EVK,
	( (SE_EVENT_LIST), TPA$_EXIT, ACT$SAVPRM, , , PBK$G_CLO_EVL),
	('KNOWN', , ACT$SAVPRM, , , PBK$G_CLO_EVL)
	);

$STATE	(,
	( (SE_EVENT_KNOWN), TPA$_EXIT)		! Store known event code
	);


%SBTTL	'Clear/Purge Objects'

!
!	Clear purge objects
!

!
!	Collect the object name or prompt
!

	COMMAND_PROMPT
	(COB, ENT, NCP$_INVVAL,

	( (SE_OBJECT_NAM), , ACT$SAVPRM, , , PBK$G_COB_ENT)

	)

!
!	Should we prompt or just process the remainder of the command?
!

$STATE	(ST_COB_GO,
	(TPA$_EOS),
	(TPA$_LAMBDA, ST_COB_PRC),
	);

	QUERY_STATES			! Prompt for selected parameters
	(COB,

	ALL, NUM, FIL, PRV, USR, PSW, PRX

	)


$STATE	(ST_COB_DOIT,
	(TPA$_LAMBDA, , , NMA$C_SENT_OBJ, NCP$GL_OPTION, ),
	);

$STATE	(,
	(TPA$_EOS, TPA$_EXIT, ACT$VRB_UTILITY, , , SDB$G_COB)
	);

%SBTTL	'Dispatch States'

!
!	Dispatch states
!

$STATE	(ST_COB_PRC,

	DISPATCH_STATES
	(COB,

	ALL, 'ALL',
	ACC, 'ACCOUNT',
	FIL, 'FILE',
	NUM, 'NUMBER',
	PRV, 'PRIVILEGES',
	PRX, 'PROXY',
	PSW, 'PASSWORD',
	USR, 'USER',

	)
	,(TPA$_EOS, ST_COB_DOIT)
	);

%SBTTL	'Process States'

!
!	Process states
!

	PROCESS_STATES
	(COB,

	ALL, ,
	ACC, ,
	FIL, ,
	NUM, ,
	PRV, ,
	PRX, ,
	PSW, ,
	USR, ,

	)

%SBTTL	'Subexpressions'

!
!	Sub_expressions
!

	SUB_EXPRESSIONS
	(COB,

	ALL, TPA$_EOS,
	ACC, TPA$_LAMBDA,
	FIL, TPA$_LAMBDA,
	NUM, TPA$_LAMBDA,
	PRV, TPA$_LAMBDA,
	PRX, TPA$_LAMBDA,
	PSW, TPA$_LAMBDA,
	USR, TPA$_LAMBDA,

	)

%SBTTL	'Define Subexpressions from Library'

!
!	Define subexpressions from library
!

	SEM_NODE_ID		! Node id strings
	SEM_CIRC_ID		! Circuit id strings
	SEM_LINE_ID		! Line id strings
	SEM_QUOT_STR		! Quoted strings
	SEM_OBJECT_NAM		! Object name
	SEM_LOG_TYP		! Logging entity type
	SEM_EVENT_LIST		! List of event numbers
	SEM_QUERY		! Query state subexpressions

%SBTTL	'Object Listing of Parse Table'

END				!End of module
ELUDOM
