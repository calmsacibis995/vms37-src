%TITLE	'NCPLIBRY  Symbol Definition Library'
!MODULE NCPLIBRY (IDENT = 'V03-000') =
!BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	NCP Network Control Program (NCP)
!
! ABSTRACT:
!
!	NCP Library of common definitions
!
! ENVIRONMENT:	VAX/VMS Operating System
!
! AUTHOR:	Darrell Duffy	, CREATION DATE: 28-August-1979
!
! MODIFIED BY:
!
!	V012	TMH0012		Tim Halvorsen	08-Jan-1982
!		Remove TMH0005, thus restoring RETRANSMIT TIMER
!		to a line parameter, which is what NM V3.0 finally
!		came up with.
!
!	V011	TMH0011		Tim Halvorsen	31-Dec-1981
!		Add DMF as a MOP service device.
!
!	V010	TMH0010		Tim Halvorsen	25-Nov-1981
!		Allow embedded spaces in filespecs as long as they
!		appear in double quotas (access control string).
!		This allows access control strings to be specified
!		in the filespec after the TO clause in the SHOW command.
!
!	V009	TMH0009		Tim Halvorsen	22-Oct-1981
!		Fix HEX_PSW sub-expression so that blank which terminates
!		hex password string does not get included in string.
!
!	V008	LMK0001		Len Kawell	19-Sep-1981
!		Change NICE version to 3.0.
!
!	V007	TMH0007		Tim Halvorsen	28-Aug-1981
!		Add macro to parse link ID
!
!	V006	TMH0006		Tim Halvorsen	15-Aug-1981
!		Add DMP, DMV and DPV service devices.
!		Add EXECUTOR PIPELINE QUOTA range.
!
!	V005	TMH0005		Tim Halvorsen	05-Aug-1981
!		Change RETRANSMIT TIMER to a circuit parameter
!		from a line parameter.
!
!	V004	TMH0004		Tim Halvorsen	07-Jul-1981
!		Rename maximum blocks to maximum transmits
!		Allow dashs in circuit names.
!
!	V003	TMH0003		Tim Halvorsen	11-Jun-1981
!		Add ranges for new V2.2 circuit parameters.
!		Remove obsolete line polling parameters.
!		Change NCP version number to 2.2.0
!
!	V02-002	LMK0001	Len Kawell	18-Dec-1980
!		Fix file-id parsing.
!--

%SBTTL	'Definitions'

!
! TABLE OF CONTENTS:
!

!
! MACROS:
!

!
!	Program Identification String
!

MACRO
    PRG_ID_STR =

	%STRING ('V3.00 ')
	%
	,

!
!	Build a cr lf pair in a string
!

    CRLF =
	%CHAR (13, 10)
	%
	;

!
! $FAB_DEV - a macro which defines a single FAB$L_DEV bit.
!
!	$FAB_DEV( bit_name )
!
!	where:
!	    "bit_name" is a 3-character device bit name
!
!

MACRO
    $FAB_DEV( BIT_NAME ) =
	FAB$DEV( FAB$L_DEV, %NAME('DEV$V_',BIT_NAME) ) %,

    FAB$DEV( FAB_BYTE, FAB_BIT, FAB_SIZE, FAB_SIGN, DEV_DISP,
    		DEV_BIT, DEV_SIZE, DEV_SIGN ) =
	FAB_BYTE, DEV_BIT, DEV_SIZE, DEV_SIGN %
    ;


!
!	Create a descriptor for a constant string
!

MACRO
    ASCID [] =
	(UPLIT BYTE			! Use byte alignment to save space
	    (
	    LONG (			! Parts must be longwords
		%CHARCOUNT( %STRING( %REMAINING)),
		UPLIT( %STRING( %REMAINING))
		)
	    )
	)%
    ;

!
!	Create pointer to counted string
!

MACRO
    ASCIC [] =
	( UPLIT BYTE (%ASCIC %STRING (%REMAINING) ) )
	%;

!
! Structure declarations used for system defined structures to
! save typing.  These structures are byte sized.
!	(Thanks to A. Goldstein)
!

STRUCTURE
	BBLOCK [O, P, S, E; N] =
	    [N]
	    (BBLOCK+O)<P,S,E>,

	BBLOCKVECTOR [I, O, P, S, E; N, BS] =
	    [N*BS]
	    ((BBLOCKVECTOR+I*BS)+O)<P,S,E>
	;



!
!	Concatenate text to the control string
!

MACRO
	ADDSTR (TXT) =
		NCP$ADDSTR (ASCIC (TXT), NCP$GQ_CTRDSC)
	%;

!
!	Add an entry to the fao list
!

MACRO
	ADDFAO (ITEM) =

	    NCP$ADDFAO (ITEM)
	%;


%SBTTL	'Macros to Build State Tables'

!
!	Macros to help build state tables
!

!
!   For the following macros:
!
!   CLS		Code for the sub-command
!   NAM		Parameter name
!

!
!   All state names have the form ST_CLS_...
!   There are two types of states, prompt and process. Prompt states
!   sequence the prompts for parameters.  Process states allow any
!   parameter in any order.
!

!
!	Build a sequence of prompt states
!	A prompt is printed and then it is parsed.  No answer is required
!	and if none is given the next prompt is issued.  If the response is
!	"_DONE" then the remainder of the prompts are skipped and the
!	function is performed.
!

MACRO
    PROMPT_STATES (CLS) [NAM] =

$STATE	(%NAME ('ST_', CLS, '_PMT_', NAM),
	(TPA$_LAMBDA, ,
	    ACT$PRMPT, , , %NAME ('PMT$G_', CLS, '_', NAM) )
	);

$STATE	(,
	(TPA$_SYMBOL, %NAME ('ST_', CLS, '_DOIT'), ACT$PMTDONEQ ),
	( (%NAME ('ST_', CLS, '_', NAM) ) ),
	(TPA$_EOS),
	(TPA$_LAMBDA, %NAME ('ST_', CLS, '_PMT_', NAM),
		ACT$SIGNAL, , , NCP$_INVVAL)
	);
    %;


!
!	Build a pair of states to accomplish command prompting
!
!	The idea is to cause prompting only if the state is entered
!	with TPA$_EOS true.  If prompting is true, then the state should
!	loop until either a transition is satisfied or the command is
!	canceled.  This is done by using ACT$PMT_ON and _OFF to remember
!	the state of prompting and ACT$PMT_Q to act on that state to
!	either fail (not prompting) or succeed and issue and error message
!	(prompting).
!

MACRO
	COMMAND_PROMPT (CLS, NAM, STATUS) =

$STATE	(%NAME ('ST_', CLS, '_', NAM),
	(TPA$_EOS, , ACT$PMT_ON),
	(TPA$_LAMBDA, , ACT$PMT_OFF),
	);

$STATE	(%NAME ('ST_', CLS, '_', NAM, '_1'),

	%REMAINING

	,
	(TPA$_EOS, %NAME ('ST_', CLS, '_', NAM, '_1'),
		ACT$PRMPT, , , %NAME ('PMT$G_', CLS, '_', NAM) ),
	(TPA$_LAMBDA, %NAME ('ST_', CLS, '_', NAM, '_1'),
		ACT$PMT_Q, , , STATUS)
	);

	%;


!
!	Build sequence of Query states
!	Query states are states which save a parameter
!	if the answer to a prompt is YES. No parameter is
!	saved for NO or CR.  If the response is "_DONE" then
!	the remainder of the queries are skipped and the function
!	is performed.
!

MACRO
	QUERY_STATES (CLS) [NAM] =

$STATE	(%NAME ('ST_', CLS, '_PMT_', NAM),
	(TPA$_LAMBDA, , ACT$PRMPT, , ,
			%NAME ('PMT$G_', CLS, '_', NAM) )
	);

$STATE	(,
	(TPA$_SYMBOL, %NAME ('ST_', CLS, '_DOIT'), ACT$PMTDONEQ ),
	( (SE_QRY_YES),
		%IF	%IDENTICAL (NAM, ALL)		! ALL IS SPECIAL
		%THEN	%NAME ('ST_', CLS, '_DOIT')	! IT MUST BE LAST
		%FI
			, ACT$SAVPRM, , ,
			%NAME ('PBK$G_', CLS, '_', NAM) ),
	( (SE_QRY_NO) ),
	(TPA$_EOS),
	(TPA$_LAMBDA, %NAME ('ST_', CLS, '_PMT_', NAM),
			ACT$SIGNAL, , , NCP$_INVVAL)
	);

	%;

!
!	Build transitions in a dispatch state
!
!   KEY		Keyword for dispatch from state
!

MACRO
    DISPATCH_STATES (CLS) [NAM, KEY] =

	(%STRING (KEY), %NAME ('ST_', CLS, '_PRC_', NAM) )
    %;


!
!	Build a sequence of process states
!
!   NOISE	Noise keyword
!

MACRO
    PROCESS_STATES (CLS) [NAM, NOISE] =

$STATE	(%NAME ('ST_', CLS, '_PRC_', NAM),
	%IF NOT %NULL (NOISE)
	%THEN
	(%STRING (NOISE)),
	(TPA$_LAMBDA)
	);
$STATE	(,
	%FI
	( (%NAME ('ST_', CLS, '_', NAM) ),
	    %NAME ('ST_', CLS, '_PRC') )
	);
    %;

!
!	Build a set of subexpressions to decode parameters
!
!   TYP		Type of transition desired
!

MACRO
    SUB_EXPRESSIONS (CLS) [NAM, TYP] =

$STATE	(%NAME ('ST_', CLS, '_', NAM),
	(TYP,

	%IF %IDENTICAL (TYP, TPA$_DECIMAL)
	%THEN
	    , ACT$NUM_RNG, , , 
			NUM_RANGE
			(
			%NAME ('LOW_', CLS, '_', NAM),
			%NAME ('HIGH_', CLS, '_', NAM)
			)
		)
	);
$STATE	(,
	(TPA$_LAMBDA,

	%FI

	TPA$_EXIT, ACT$SAVPRM, , ,
	    %NAME ('PBK$G_', CLS, '_', NAM) )
	);
    %;

!
!	Build transitions in a keyword state
!
!	Each transition saves a parameter based on the keyword
!	and exits the subexpression.
!

MACRO
	KEYWORD_STATE (CLS) [NAM, KEY] =

	(%STRING (KEY), TPA$_EXIT, ACT$SAVPRM, , , 
		%NAME ('PBK$G_', CLS, '_', NAM) )
	%;

%SBTTL	'Macro to Build Prompt Strings'

!
!	Build prompt strings
!

MACRO
    PROMPT_STRINGS (CLS) [NAM, STR] =

%NAME ('PMT$G_', CLS, '_', NAM) =
	ASCID (%STRING (STR) )
    %;

%SBTTL	'Macros to Build Parameter Control Blocks'

!
!	Build parameter blocks
!

!	There are four structures associated with building messages:
!	
!		SDB	Set/Define Block
!	
!	This block is a parameter to the verb routines.  It serves
!	to point to other structures and to declare the type of the
!	entity so that message headers can be properly built.
!	
!		PDB	Parameter Data Block
!	
!	This is a data area which holds the actual parameter data.
!	THe block is a status byte followed by the data as it
!	appears in the message.  The action routine ACT$SAVPRM
!	stores the data in this block in the correct format.
!	
!		PBK	Parameter Block
!	
!	This block is a parameter to ACT$SAVPRM and directs the
!	storage of the parameter in the PDB.  It contains the type
!	of the parameter, the PDB address and an optional parameter
!	for the type code.
!	
!		PCL	Parameter Control List
!	
!	This block is a list of items which control the building of
!	messages.  Each entry is a parameter type code, the
!	parameter ID code and the PDB address.  Using this block the
!	routines which build messages are able to add parameter
!	values or codes to the end of messages in the proper format.
!


!
!	Build the SDB
!

!
!	CLS	Class of the command
!	ENT	Entity type code.  If negative, then system-specific entity
!	PDB	Parameter data block suffix
!	PCL	PCL suffix
!

MACRO
    BUILD_SDB (CLS, ENT, PDB, PCL) =

!
!   Declare symbols which are not yet declared
!

    %IF NOT %DECLARED (%NAME ('PDB$G_', PDB) )
    %THEN
	EXTERNAL
	%NAME ('PDB$G_', PDB)
	;
    %FI

!
!   Build the PLIT for the SDB
!

    BIND

    %NAME ('SDB$G_', CLS) =

    UPLIT BYTE					! Use byte alignment to
	(					! Save space
	BYTE (ENT),
	LONG (%NAME ('PDB$G_', PDB) ),
	LONG (%NAME ('PCL$G_', PCL) )
	)
    ;
    %;


!
!	Build a PCL
!

!
!	CLS	Class of command
!
!	remaining repeated
!
!	NAM	Name of parameter concerned
!	TYP	Suffix for type code
!	ID	Suffix for parameter ID code
!	PDB	Suffix for PDB of data
!

MACRO
    BUILD_PCL (CLS) =

!
!   Declare the PDB's
!

    BUILD_PCL_PDB (CLS, %REMAINING)

!
!   Build the PCL PLIT
!

    BIND

    %NAME ('PCL$G_',CLS) =

    UPLIT BYTE				! Use byte alignment to save space
	(
	BUILD_PCL_LST (CLS, %REMAINING)
	)
    ;
    %,

!
!   Build the items in the PCL list
!

    BUILD_PCL_LST (CLS) [NAM, TYP, ID, PDB] =

    BYTE (%NAME ('PBK$K_', TYP) ),	! Data type code
    WORD (
	%IF %NULL (ID)			! Network management ID
	%THEN 0
	%ELSE %NAME ('NMA$C_',ID)
	%FI
	),
    LONG (				! Address of PDB
	%IF %NULL (NAM)
	%THEN 0
	%ELSE %NAME ('PDB$G_',
		    %IF %NULL (PDB)
		    %THEN CLS, '_', NAM
		    %ELSE PDB
		    %FI
		    )
	%FI
	)

    %,

!
!   Declare the PDB as external
!

    BUILD_PCL_PDB (CLS) [NAM, I2, I3, PDB] =

    %IF NOT %NULL (NAM)
    %THEN    
	%IF NOT %DECLARED
	      (%NAME ('PDB$G_',
		    %IF %NULL (PDB)
		    %THEN CLS, '_', NAM
		    %ELSE PDB
		    %FI
		    )
		)
	%THEN

	    EXTERNAL
		  %NAME ('PDB$G_',
			%IF %NULL (PDB)
			%THEN CLS, '_', NAM
			%ELSE PDB
			%FI
			)
		;
	%FI
    %FI
    %;


!
!	Build a list of PBK's
!

!
!	CLS	Class of command
!
!	remaining are repeated
!
!	NAM	Suffix name of parameter
!	TYP	Suffix of type code of parameter
!	PRM	Value of type code parameter
!	PDB	Suffix for PDB to save parameter
!


MACRO
    BUILD_PBK (CLS) [NAM, TYP, PRM, PDB] =

    %IF NOT %DECLARED				! Declare the pdb external
	(%NAME ('PDB$G_',
		    %IF %NULL (PDB)
		    %THEN CLS, '_', NAM
		    %ELSE PDB
		    %FI
		)
	)
    %THEN

	EXTERNAL
	    %NAME ('PDB$G_',
			%IF %NULL (PDB)
			%THEN CLS, '_', NAM
			%ELSE PDB
			%FI
		    )
	    ;

    %FI

    GLOBAL BIND				! Build PBK as a plit

    %NAME ('PBK$G_', CLS, '_', NAM) =

    UPLIT BYTE				! Use byte alignment to save space
	(
	BYTE (%NAME ('PBK$K_', TYP) ),	! Data type code
	LONG (%NAME ('PDB$G_',		! PDB address
			%IF %NULL (PDB)
			%THEN CLS, '_', NAM
			%ELSE PDB
			%FI
		    )
	    ),
	LONG (				! Parameter for type code routine
	    %IF %NULL (PRM)
	    %THEN 0
	    %ELSE PRM
	    %FI
	    )
	)

    ;
    %;


!
!	Build a PDB
!

!
!	CLS	Class of command
!	NAM	Suffix for parameter
!	SIZ	Size of parameter data in bytes
!

MACRO
    BUILD_PDB (CLS) [NAM, SIZ] =

    %NAME ('PDB$G_', CLS, '_', NAM) :		! Name in classic form
	    BLOCK [(SIZ) + 1, 1]		! Size + 1 for status byte
	    ALIGN (0)				! Byte align to save space

    %;


!
!	Build a numeric range parameter
!

MACRO
    NUM_RANGE (LOW, HIGH) =

	( UPLIT BYTE ( LONG ( (LOW), (HIGH) ) ) ) ! Byte align to save space
	%;

!
!	Build a next state parameter
!

MACRO
	NEXT_STATE (COD) =
	(UPLIT BYTE			! Byte align to save space
		(
		LONG			! Each is an address in a longword
		    (
		    %NAME ('NCP$G_STTBL_',COD),
		    %NAME ('NCP$G_KYTBL_', COD)
		    )
		)
	)
	%;


%SBTTL	'Equated Symbols'

!
! EQUATED SYMBOLS:
!

LITERAL
	TRUE		= 1,
	FALSE		= 0,
	SUCCESS		= 1,
	FAILURE		= 0,

	NCP$C_VRS	= 3,	! Version of ncp for messages
	NCP$C_ECO	= 0,	! Eco for messages
	NCP$C_UECO	= 0,	! User eco for messages

	NCP$C_MBXSIZ = 40,	! Size of the mailbox buffer for network io
	NCP$C_RSPSIZ = 1000,	! Size of the response buffer for network io

	LEN_OBJ_NAM	= 8,	! Length of an object name
	LEN_ID_STR	= 32,	! Length of an ID string
	LEN_NSP_PSW	= 8,	! Length of a nsp password
	LEN_FILE_SPEC	= 64,	! Length of a file spec
	LEN_FILE_NAM	= 9,	! Length of a file name
	LEN_FILE_TYP	= 3,	! Length of a file type
	LOW_NODE_ADR	= 1,	! Low limit of node address
	HIGH_NODE_ADR	= 255,	! High limit
	LEN_NODE_NAM	= 6,	! Length of node name
	LEN_CIRC_ID	= 16,	! Length of a circuit id
	LEN_LINE_ID	= 16,	! Length of a line id
	LEN_LINE_DEV	= 4,	! Length of a line device
	LOW_LINE_PART	= 0,	! Low limit of a line sub-device
	HIGH_LINE_PART	= 255,	! High limit
	LEN_HEX_PSW	= 16,	! Length of Hex password (64 bits)
	LEN_ACC_ACC	= 39,	! Length of the access account
	LEN_ACC_PSW	= 39,	! Length of the access password
	LEN_ACC_USR	= 39,	! Length of the access user id
	LOW_EVENT_CLS	= 0,	! Low limit of event class
	HIGH_EVENT_CLS	= 511,	! High limit
	LOW_EVENT_TYP	= 0,	! Low limit of event type
	HIGH_EVENT_TYP	= 31,	! High limit
	LEN_PRV_MSK	= 8,	! Length in bytes of a priv mask
	LEN_SOFT_ID	= 16,	! Length of a node software id
	LOW_UIC_PART	= 0,	! Low limit of uic number
	HIGH_UIC_PART	= 255,	! High limit
	LEN_DTE_NUM	= 16,	! Length of X.25 circuit DTE address
	LEN_ENT_NAM	= 16,	! Length of entity name
	LEN_GRP_NAME	= 16,	! Length of X.25 closed user group name
	LEN_NET_NAME	= 16,	! Length of X.25 network name
	LEN_DEST_NAME	= 16;	! Length of X.25 destination name


!
!	Macro to help define ranges
!

MACRO
	DEFRNG (CLS) [NAM, LO, HI] =

	LITERAL
		%NAME ('HIGH_', CLS, '_', NAM) = HI,
		%NAME ('LOW_',  CLS, '_', NAM) = LO
		;
	%;


DEFRNG (NOD,			! Executor node parameters

	ADR, 1, 255,		! Node address
	BSZ, 1, 65535,		! Buffer size
	DFC, 1, 255,		! Delay factor
	DWT, 1, 255,		! Delay weight
	IAT, 1, 65535,		! Inactivity timer
	INT, 1, 65535,		! Incoming timer
	MAD, 1, 65535,		! Max address
	MBF, 0, 65535,		! Max buffers
	MCO, 1, 1023,		! Max cost
	MHP, 1, 31,		! Max hops
	MLN, 1, 65535,		! Max lines
	MLK, 1, 65535,		! Max links
	MVS, 1, 255,		! Max visits
	OTM, 1, 65535,		! Outgoing timer
	RFC, 1, 65535,		! Retransmit factor
	RTM, 1, 65535,		! Routing timer
	PIQ, 0, 65535)		! Pipeline quota
	

DEFRNG (CIR,			! Circuit parameters

	CTM, 1, 65535,		! Counter timer
	COS, 1, 25,		! Cost
	HET, 1, 65535,		! Hello timer
	LIT, 1, 65535,		! Listen timer
	MRC, 0, 255,		! Maximum recalls
	RCT, 1, 65535,		! Recall timer
	CHN, 0, 4095,		! Channel number
	MBL, 1, 65535,		! Maximum block
	MWI, 1, 255,		! Maximum window
	TRI, 0, 255,		! Tributary address
	BBT, 1, 65535,		! Babble timer
	TRT, 0, 65535,		! Transmit timer
	MTR, 1, 255,		! Maximum transmits
	ACB, 0, 255,		! Active base
	ACI, 0, 255,		! Active increment
	IAB, 0, 255,		! Inactive base
	IAI, 0, 255,		! Inactive increment
	IAT, 0, 255,		! Inactive threshold
	DYB, 0, 255,		! Dying base
	DYI, 0, 255,		! Dying increment
	DYT, 0, 255,		! Dying threshold
	DTH, 0, 255)		! Dead threshold


DEFRNG (LIN,			! Line parameters

	CTM, 1, 65535,		! Counter timer
	BLO, 0, 65535,		! Block size
	COS, 1, 25,		! Cost of the line
	NTM, 1, 65535,		! Normal timer
	STM, 1, 65535,		! Service timer
	HTI, 1, 65535,		! Holdback timer
	MBL, 1, 65535,		! Maximum block
	MRT, 1, 255,		! Maximum retransmits
	MWI, 1, 255,		! Maximum window
	TRB, 0, 255,		! Tributary address
	SLT, 50, 65535,		! Scheduling timer
	DDT, 1, 65535,		! Dead timer
	DLT, 1, 65535,		! Delay timer
	SRT, 0, 65535,		! Stream timer
	BFN, 1, 1024)		! Number of buffers


DEFRNG (LOO,			! Loop parameters

	CNT, 1, 65535,		! Count of messages
	LEN, 1, 65535)		! Length of message in bytes
	

DEFRNG (LNK,			! Link parameter

	ADR, 1, 65535)		! Link address


DEFRNG (NOD,			! Node parameters

	CTM, 1, 65535,		! Counter timer
	DCT, 0, %X'FFFFFFFF')	! Dump count


DEFRNG (DUM,

	COU, 0, %X'FFFFFFFF')	! Dump count


DEFRNG (OBJ,			! Object parameters

	NUM, 0, 255)		! Object number

DEFRNG (MPR,			! X25-PROTOCOL

	CTM, 1, 65535,		! Counter timer
	DBL, 1, 65535,		! Default block
	DWI, 1, 255,		! Default window
	MBL, 1, 65535,		! Maximum block
	MWI, 1, 255,		! Maximum window
	MCL, 1, 255,		! Maximum clears
	MRS, 1, 255,		! Maximum resets
	MST, 1, 255,		! Maximum restarts
	CAT, 1, 255,		! Call timer
	CLT, 1, 255,		! Clear timer
	RST, 1, 255,		! Reset timer
	STT, 1, 255,		! Restart timer
	GNM, 0, 9999)		! Closed user group number

DEFRNG (MSE,			! X25-SERVER

	CTM, 1, 65535,		! Counter timer
	MCI, 1, 65535,		! Maximum circuits
	PRI, 0, 255)		! Priority

%SBTTL	'Macro to Define External Symbols'

!
! EXTERNAL REFERENCES:
!

!
!	Define externals for action routines
!

MACRO
	ACT_DFN =

EXTERNAL ROUTINE
	ACT$INV_COMMAND,		! Signal invalid command
	ACT$SAVPRM,			! Save a parameter
	ACT$TMPSTR,			! Save a temporary string
	ACT$BLNK_SIG,			! Blanks are now significant
	ACT$BLNK_NSIG,			! Blanks are not significant
	ACT$ZAPTMPDSC,			! Clear temporary descriptors
	ACT$PRMPT,			! Prompt for a parameter
	ACT$NUM_RNG,			! Validate a number
	ACT$STR_LEN,			! Validate a string length
	ACT$WRI_STR,			! Write a string to SYS$OUTPUT
	ACT$SIGNAL,			! Signal an error condition
	ACT$PMT_ON,			! Prompting on
	ACT$PMT_OFF,			! Prompting off
	ACT$PMT_Q,			! Check prompting
	ACT$VRB_LOOP,			! Loop Verb processing
	ACT$VRB_UTILITY,		! Most other Verbs
	ACT$VRB_SHOLIS,			! Show and List Verbs
	ACT$CLRLONG,			! Clear a longword
	ACT$COPY_VALUE,			! Copy a longword
	ACT$PMTDONEQ			! See if prompting done
	;


EXTERNAL
	PBK$G_ZAPACCDSC,		! Parameter block to zap descriptors

	PBK$G_VRB_ALL,			! Block for All parameter
	PBK$G_LOG_TYPCON,		! Block for logging types
	PBK$G_LOG_TYPFIL,
	PBK$G_LOG_TYPMON,

	PBK$G_EVE_ESET,			! Parameter blocks for events
	PBK$G_EVE_ECLS,
	PBK$G_EVE_EMSK,
	PBK$G_EVE_ERNG,
	PBK$G_EVE_EWLD,
	PBK$G_EVE_ESNO,
	PBK$G_EVE_ESLI,
	PBK$G_EVE_ESEX,

	NCP$GL_OPTION,			! Place to build option byte
	NCP$GL_FNC_CODE			! Place to build function code

	;


!
!	String descriptors for access parameters
!

EXTERNAL

	ACT$GL_NODADR_Q,		! Flag for node address

	ACT$GQ_ACCACC_DSC,		! Account
	ACT$GQ_ACCPSW_DSC,		! Password
	ACT$GQ_ACCUSR_DSC,		! User id

	ACT$GQ_NODEID_DSC,		! Node id descriptor

	ACT$GL_SAD_BEGIN,		! Subaddress beginning value
	ACT$GL_SAD_END;			! Subaddress ending value

!
!	Status return values
!

EXTERNAL LITERAL
	NCP$_INVVAL,			! Unrecognised value
	NCP$_INVKEY			! Unrecognised keyword
	;		!


	%;


%SBTTL	'Macros to Build Subexpressions'

!
!	The state tables for the NCP language have been broken into
!	smaller modules to reduce compile time of the separate
!	modules to reduce development time. The developement time
!	has been reduced at the expense of a slight increase in the
!	size of the tables since keywords and subexpression states
!	are duplicated in the separate tables. 
!
!	These macros define whole state subexpressions to parse
!	useful entities. Including these subexpressions as macros in
!	the library avoids having multiple copies of the source of
!	the subexpressions in each of the modules of the states
!	tables where they are used.
!
!	States and subexpressions are named in a distinctive way.
!	States are named ST_xxx. Subexpressions are named SE_xxx and
!	subexpression defining macros are named SEM_xxx.
!


!
!	Subexpression for a File ID
!

MACRO	SEM_FILE_ID =

$STATE	(SE_FILE_ID,			! Make blanks significant
	(TPA$_EOS, TPA$_FAIL),
	(TPA$_LAMBDA,	, ACT$BLNK_SIG));

!
!	Accept any string of characters for a filespec.  Format is not
!	enforced here.
!

$STATE	(SE_FILE_ID1,
	(TPA$_EOS, SE_FILE_IDX),
	(TPA$_BLANK, SE_FILE_IDX),
	('"', SE_FILE_ID2),		! Handle quoted portion separately
	(TPA$_ANY, SE_FILE_ID1));

$STATE	(SE_FILE_ID2,
	('"', SE_FILE_ID1),		! If ending double quote, rejoin loop
	(TPA$_EOS, SE_FILE_IDE),
	(TPA$_ANY, SE_FILE_ID2));

$STATE	(SE_FILE_IDX,
	(TPA$_LAMBDA,	TPA$_EXIT, ACT$BLNK_NSIG));

$STATE	(SE_FILE_IDE,
	(TPA$_LAMBDA,	TPA$_FAIL, ACT$BLNK_NSIG));

	%;			! End of File-id macro


!
!	Subexpression for Node-ID
!

MACRO	SEM_NODE_ID =

$STATE	(SE_NODE_ID,
	( (SE_NODE_NAM), TPA$_EXIT),
	( (SE_NODE_ADR), TPA$_EXIT, , TRUE, ACT$GL_NODADR_Q)
	);

$STATE	(SE_NODE_ADR,
	(TPA$_LAMBDA, , ACT$CLRLONG, , , ACT$GL_NODADR_Q)
	);
$STATE	(,
	(TPA$_DECIMAL,	TPA$_EXIT, ACT$NUM_RNG, , ,
		NUM_RANGE (LOW_NODE_ADR, HIGH_NODE_ADR))
	);

$STATE	(SE_NODE_NAM,
	(TPA$_LAMBDA,	, ACT$BLNK_SIG)
	);

$STATE	(,
	(TPA$_LAMBDA, , ACT$CLRLONG, , , ACT$GL_NODADR_Q)
	);

$STATE	(,
	( (SE_NODE_NAM1), , ACT$STR_LEN, , , LEN_NODE_NAM),
	(TPA$_LAMBDA,	TPA$_FAIL, ACT$BLNK_NSIG)
	);

$STATE	(,
	(TPA$_LAMBDA,	TPA$_EXIT, ACT$BLNK_NSIG)
	);

$STATE	(SE_NODE_NAM1,
	(TPA$_DIGIT,	SE_NODE_NAM1),
	(TPA$_ALPHA)
	);

$STATE	(ST_NODE_NAM2,
	(TPA$_DIGIT,	ST_NODE_NAM2),
	(TPA$_ALPHA,	ST_NODE_NAM2),
	(TPA$_LAMBDA,	TPA$_EXIT)
	);

	%;


!
!	Subexpression for Link ID
!
!	(This subexpression restricts the link ID to be a number within
!	the range of 0-65535.  However, the NADR entity is used to store
!	the link ID because the format is similiar: format byte of zero,
!	followed by the word link address.  The format byte is used to
!	enable requests of known links; format byte of -1).
!

MACRO	SEM_LINK_ID =

$STATE	(SE_LINK_ID,
	(TPA$_LAMBDA,, ACT$CLRLONG,,, ACT$GL_NODADR_Q));

$STATE	(,
	(TPA$_DECIMAL, TPA$_EXIT, ACT$NUM_RNG, TRUE, ACT$GL_NODADR_Q,
			NUM_RANGE(0, 65535)));

	%;


!
!	Hex Password for Service Operations
!

MACRO	SEM_HEX_PSW =

$STATE	(SE_HEX_PSW,
	( (SE_HEX_STR), TPA$_EXIT, ACT$STR_LEN, , , LEN_HEX_PSW));

$STATE	(SE_HEX_STR,
	(TPA$_LAMBDA, , ACT$BLNK_SIG));

$STATE	(,
	((SE_HEX_CHR)),		! Ensure at least one character given
	(TPA$_LAMBDA, TPA$_FAIL, ACT$BLNK_NSIG));

$STATE	(SE_HEX_STR1,
	((SE_HEX_CHR),	SE_HEX_STR1),	! Gobble remaining hex characters
	((SE_HEX_NONTERM), TPA$_FAIL, ACT$BLNK_NSIG),
	(TPA$_LAMBDA,	TPA$_EXIT, ACT$BLNK_NSIG));

$STATE	(SE_HEX_NONTERM,	! Return false if terminator, else true
	(TPA$_BLANK,TPA$_FAIL),	! (so that blank is not gobbled by TPARSE)
	(TPA$_EOS,TPA$_FAIL),
	(TPA$_LAMBDA,TPA$_EXIT));

$STATE	(SE_HEX_CHR,		! True if valid hex char (gobbled), else false
	(TPA$_DIGIT, TPA$_EXIT),
	('A', TPA$_EXIT),
	('B', TPA$_EXIT),
	('C', TPA$_EXIT),
	('D', TPA$_EXIT),
	('E', TPA$_EXIT),
	('F', TPA$_EXIT));

	%;

!
!	Subexpression for a circuit name
!

MACRO
	SEM_CIRC_ID =

$STATE	(SE_CIRC_ID,
	((SE_LINE), TPA$_EXIT, ACT$STR_LEN, , , LEN_CIRC_ID)
	);

	%;

!
!	Subexpression for a DTE call number
!

MACRO	SEM_DTE_NUMBER =

$STATE	(SE_DTE_NUMBER,
	(TPA$_STRING, TPA$_EXIT, ACT$STR_LEN,,, LEN_DTE_NUM)
	);

	%;

!
!	Subexpression for a closed user group name
!

MACRO	SEM_GRP_NAME =

$STATE	(SE_GRP_NAME,
	(TPA$_STRING, TPA$_EXIT, ACT$STR_LEN,,, LEN_GRP_NAME)
	);

	%;

!
!	Subexpression for an X.25 network name
!

MACRO	SEM_NET_NAME =

$STATE	(SE_NET_NAME,
	(TPA$_STRING, TPA$_EXIT, ACT$STR_LEN,,, LEN_NET_NAME)
	);

	%;

!
!	Subexpression for an X.25 destination name
!

MACRO	SEM_DEST_NAME =

$STATE	(SE_DEST_NAME,
	(TPA$_STRING, TPA$_EXIT, ACT$STR_LEN,,, LEN_DEST_NAME)
	);

	%;


!
!	Subexpression for a subaddress range of the form:
!
!	number
!	number-number
!

MACRO	SEM_SUBADR_RANGE =

$STATE	(SE_SUBADR_RANGE,
	(TPA$_DECIMAL,, ACT$NUM_RNG,, ACT$GL_SAD_BEGIN,
		NUM_RANGE (0, 9999)));

$STATE	(,
	(TPA$_LAMBDA,, ACT$COPY_VALUE,,, ACT$GL_SAD_END));

$STATE	(,
	('-'),
	(TPA$_LAMBDA, TPA$_EXIT));

$STATE	(,
	(TPA$_DECIMAL,TPA$_EXIT, ACT$NUM_RNG,, ACT$GL_SAD_END,
		NUM_RANGE (0, 9999)));

	%;


!
!	Subexpression for a line ID
!
!	Allow string of the form:
!
!	AAAA[.dd]
!	AAAA[-dd]	With upto 3 [--] at end
!	AAAA[.*]	Wildcards must follow
!	AAAA[-*]
!

MACRO	SEM_LINE_ID =

$STATE	(SE_LINE_ID,
	( (SE_LINE),	TPA$_EXIT, ACT$STR_LEN, , , LEN_LINE_ID)
	);

$STATE	(SE_LINE,
	(TPA$_LAMBDA, , ACT$BLNK_SIG)
	);

$STATE	(,
	( (SE_ALPHA_STR), , ACT$STR_LEN, , , LEN_LINE_DEV),
	(TPA$_LAMBDA,	SE_LINE_IDE)
	);

$STATE	(,
	( (SE_LINE_PART) ),
	( (SE_LINE_WILD), SE_LINE_ID1),
	(TPA$_LAMBDA,	SE_LINE_IDX)
	);

$STATE	(,
	( (SE_LINE_PART) ),
	( (SE_LINE_WILD), SE_LINE_ID2),
	(TPA$_LAMBDA,	SE_LINE_IDX)
	);

$STATE	(,
	( (SE_LINE_PART) ),
	( (SE_LINE_WILD), SE_LINE_ID3),
	(TPA$_LAMBDA,	SE_LINE_IDX)
	);


$STATE	(SE_LINE_ID1,
	( (SE_LINE_WILD), SE_LINE_ID2),
	(TPA$_LAMBDA,	SE_LINE_IDX)
	);

$STATE	(SE_LINE_ID2,
	( (SE_LINE_WILD), SE_LINE_ID3),
	(TPA$_LAMBDA,	SE_LINE_IDX)
	);

$STATE	(SE_LINE_ID3,
	(TPA$_LAMBDA,	SE_LINE_IDX)
	);

$STATE	(SE_LINE_IDX,
	(TPA$_LAMBDA,	TPA$_EXIT, ACT$BLNK_NSIG)
	);

$STATE	(SE_LINE_IDE,
	(TPA$_LAMBDA,	TPA$_FAIL, ACT$BLNK_NSIG)
	);

$STATE	(SE_LINE_PART,
	('-'),
	('.')
	);

$STATE	(,
	(TPA$_DECIMAL, TPA$_EXIT, ACT$NUM_RNG, , , 
		NUM_RANGE (LOW_LINE_PART, HIGH_LINE_PART) )
	);

$STATE	(SE_LINE_WILD,
	('-'),
	('.')
	);

$STATE	(,
	('*', TPA$_EXIT),
	);



!
!	Subexpression for an Alpha string of arbitrary length
!

$STATE	(SE_ALPHA_STR,
	(TPA$_ALPHA)
	);

$STATE	(SE_ALPHA_STR1,
	(TPA$_ALPHA, SE_ALPHA_STR1),
	(TPA$_LAMBDA, TPA$_EXIT)
	);

	%;


!
!	Subexpression for the ALL parameter
!

MACRO
	SEM_ALL =

$STATE	(SE_ALL,
	('ALL')		! If the word is here it must be last on the line
	);

$STATE	(,
	(TPA$_EOS, TPA$_EXIT, ACT$SAVPRM, , , PBK$G_VRB_ALL)
	);

	%;


!
!	Subexpression for Access Control Information
!

MACRO	SEM_ACCESS =


$STATE	(SE_ACC_ACC,
	( (SE_QUOT_STR), TPA$_EXIT, ACT$STR_LEN, , , LEN_ACC_ACC)
	);

$STATE	(SE_ACC_PSW,
	( (SE_QUOT_STR), TPA$_EXIT, ACT$STR_LEN, , , LEN_ACC_PSW)
	);

$STATE	(SE_ACC_USR,
	( (SE_QUOT_STR), TPA$_EXIT, ACT$STR_LEN, , , LEN_ACC_USR)
	);

	%;


!
!	Subexpression for a quoted string
!

MACRO	SEM_QUOT_STR =

$STATE	(SE_QUOT_STR,
	(TPA$_EOS,	TPA$_FAIL),		! Got to be something
	(TPA$_BLANK,	, 	ACT$BLNK_SIG),	! Make blanks significant
	(TPA$_LAMBDA,	, 	ACT$BLNK_SIG)
	);

$STATE	(,					! Quoted string or just string
	('"',		ST_QUOT_STR3),
	(TPA$_LAMBDA)
	);

$STATE	(ST_QUOT_STR2,				! Just a string
	(TPA$_SYMBOL,	ST_QUOT_STR2),
	(TPA$_BLANK,	ST_QUOT_STRX),
	(TPA$_ANY,	ST_QUOT_STR2),
	(TPA$_EOS,	ST_QUOT_STRX)
	);

$STATE	(ST_QUOT_STR3,				! A quoted string to be sure
	( (SE_QUOT_DBL), ST_QUOT_STR3),
	('"',		ST_QUOT_STRX),
	(TPA$_ANY,	ST_QUOT_STR3),
	(TPA$_EOS,	ST_QUOT_STRE)
	);

$STATE	(ST_QUOT_STRX,
	(TPA$_LAMBDA,	TPA$_EXIT, ACT$BLNK_NSIG)
	);

$STATE	(ST_QUOT_STRE,
	(TPA$_LAMBDA,	TPA$_FAIL, ACT$BLNK_NSIG)
	);

$STATE	(SE_QUOT_DBL,			! Do we have a double quote
	('"')
	);

$STATE	(,
	('"',	TPA$_EXIT)
	);

	%;


!
!	Event list subexpression
!

MACRO
	SEM_EVENT_LIST =

$STATE	(SE_EVENT_LIST,
	(TPA$_LAMBDA, , ACT$BLNK_SIG)
	);

$STATE	(,
	( (SE_EVENT), TPA$_EXIT, ACT$BLNK_NSIG),
	(TPA$_LAMBDA, TPA$_FAIL, ACT$BLNK_NSIG)
	);


!
!	Parse a single event
!

$STATE	(SE_EVENT,
	(TPA$_DECIMAL, ,ACT$NUM_RNG, , ,
			NUM_RANGE (LOW_EVENT_CLS, HIGH_EVENT_CLS) ),
	);

$STATE	(,
	(TPA$_LAMBDA, , ACT$SAVPRM, , , PBK$G_EVE_ECLS)
	);

$STATE	(,
	('.')
	);

$STATE	(ST_EVENT_1,
	( (SE_EVENT_TYP), , ACT$SAVPRM , , , PBK$G_EVE_EMSK),
	('*', TPA$_EXIT, ACT$SAVPRM, 2^(14+8), PDB$G_VRB_EVE, PBK$G_EVE_EWLD)
	);

$STATE	(,
	(',', ST_EVENT_1),
	('-', ST_EVENT_2),
	(TPA$_BLANK, TPA$_EXIT),
	(TPA$_EOS, TPA$_EXIT)
	);


$STATE	(ST_EVENT_2,
	( (SE_EVENT_TYP), , ACT$SAVPRM, , , PBK$G_EVE_ERNG)
	);

$STATE	(,
	(',', ST_EVENT_1),
	(TPA$_BLANK, TPA$_EXIT),
	(TPA$_EOS, TPA$_EXIT)
	);

!
!	Known events
!

$STATE	(SE_EVENT_KNOWN,
	(TPA$_LAMBDA, TPA$_EXIT, ACT$SAVPRM, 3^(14+8), PDB$G_VRB_EVE,
				PBK$G_EVE_EWLD)
	);


!
!	Parse the type for an event
!

$STATE	(SE_EVENT_TYP,
	(TPA$_DECIMAL, TPA$_EXIT, ACT$NUM_RNG, , ,
			NUM_RANGE (LOW_EVENT_TYP, HIGH_EVENT_TYP) )
	);

	%;



!
!	Logging type
!

MACRO
	SEM_LOG_TYP =

$STATE	(SE_LOG_TYP,

	KEYWORD_STATE
	(LOG,

	TYPCON, 'CONSOLE',
	TYPFIL, 'FILE',
	TYPMON, 'MONITOR',

	)
	);

	%;

!
!	Object name
!

MACRO
	SEM_OBJECT_NAM =

$STATE	(SE_OBJECT_NAM,
	(TPA$_STRING, TPA$_EXIT, ACT$STR_LEN, , , LEN_OBJ_NAM)
	);

	%;

!
!	Subexpressions for a query state
!

MACRO
	SEM_QUERY =

$STATE	(SE_QRY_YES,
	('YES'),
	);

$STATE	(,
	(TPA$_EOS, TPA$_EXIT)
	);

$STATE	(SE_QRY_NO,
	('NO'),
	);

$STATE	(,
	(TPA$_EOS, TPA$_EXIT)
	);

	%;


!
!	Subexpressions for load parameters
!

MACRO
	SEM_LOAD (CLS) =

!
!	Subexpression for service device
!

$STATE	(%NAME ('ST_',CLS,'_SDV'),

	KEYWORD_STATE
	(CLS,

	SDVA,  'DA',
	SDVL,  'DL',
	SDVMC, 'DMC',
	SDVP,  'DP',
	SDVQ,  'DQ',
	SDVTE, 'DTE',
	SDVU,  'DU',
	SDVUP, 'DUP',
	SDVKL, 'KL8',
	SDVMP, 'DMP',
	SDVMV, 'DMV',
	SDVPV, 'DPV',
	SDVMF, 'DMF',

	)
	);

!
!	Software identification
!

$STATE	(SE_SOFT_ID,
	( (SE_QUOT_STR), TPA$_EXIT, ACT$STR_LEN, , , LEN_SOFT_ID)
	);

!
!	Software type
!

$STATE	(%NAME ('ST_',CLS,'_STY'),

	DISPATCH_STATES
	(CLS,

	STSL, 'SECONDARY',
	STTL, 'TERTIARY',
	STOS, 'SYSTEM',

	)
	);


$STATE	(%NAME ('ST_', CLS, '_PRC_STSL'),		! Secondary loader
	( 'LOADER' ),
	(TPA$_LAMBDA)
	);

$STATE	(,
	( (%NAME ('ST_',CLS,'_STSL') ), TPA$_EXIT)
	);

$STATE	(%NAME ('ST_', CLS, '_PRC_STTL'),		! Tertiary loader
	( 'LOADER' ),
	(TPA$_LAMBDA)
	);

$STATE	(,
	( (%NAME ('ST_',CLS,'_STTL') ), TPA$_EXIT)
	);

$STATE	(%NAME ('ST_', CLS, '_PRC_STOS'),		! System
	( (%NAME ('ST_',CLS,'_STOS') ), TPA$_EXIT)
	);


	SUB_EXPRESSIONS
	(CLS,

	STSL, TPA$_LAMBDA,
	STTL, TPA$_LAMBDA,
	STOS, TPA$_LAMBDA

	)


!
!	Cpu type
!

$STATE	(%NAME ('ST_',CLS,'_CPU'),

	KEYWORD_STATE
	(CLS,

	CPU10, 'DECSYSTEM1020',
	CPU11, 'PDP11',
	CPU8,  'PDP8',
	VAX,   'VAX',

	)
	);

	%;

!END
!ELUDOM
