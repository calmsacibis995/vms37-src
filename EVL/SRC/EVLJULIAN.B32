%TITLE	'Julian Half Day Conversions'
MODULE EVLJULIAN (
		LANGUAGE (BLISS32),
		IDENT = 'V03-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	DECnet Event Logging (EVL)
!
! ABSTRACT:
!
!	This module contains the routines to convert to and from
!	the standard date-time format for event logging, Julian
!	halfday.  The internal date-time for DECnet-VAX is VAX
!	64 bit absolute time.
!
! ENVIRONMENT:	VAX/VMS Operating System
!
! AUTHOR:	Darrell Duffy	, CREATION DATE:  8-Jun-1980
!
! MODIFIED BY:
!
! 	, : VERSION
! 01	- 
!--

%SBTTL	'Definitions'

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
	EVL$JULIAN	: ,		! Convert from abstim to julian
	EVL$UNJULIAN	: NOVALUE	! Convert from julian to abstim
	;

!
! INCLUDE FILES:
!

LIBRARY 'SYS$LIBRARY:STARLET.L32';

!
! MACROS:
!

!
! EQUATED SYMBOLS:
!

LITERAL
	SUCCESS = 1,
	FAILURE = 0
	;

!
! OWN STORAGE:
!

!
! EXTERNAL REFERENCES:
!

!EXTERNAL ROUTINE
!	;

%SBTTL	'EVL$JULIAN  Convert Abstim to Julian Half Days'
GLOBAL ROUTINE EVL$JULIAN (ABSTIM, HALFDAY, SECONDS, MILISEC) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Convert from VMS abs time to julian half day, seconds and
!	milliseconds.  This computation is taken directly from the
!	DNA Network Management Functional Specification.
!
! FORMAL PARAMETERS:
!
!	ABSTIM		Address of quadword abs time
!	HALFDAY		Address to return halfday as a longword
!	SECONDS		Address to return seconds in half day as a longword
!	MILISEC		Address to return milliseconds as a longword
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Success if data returned, Failure if abs time is out of range
!	of julian half day, or conversion of abstime fails.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	TIMVEC : VECTOR [7, WORD],	! Vector of words to return disected
    					! Abs time
	STATUS				! Local status
	;

    BIND
	YEAR 	= TIMVEC [0] : WORD,	! Each piece of the disected time
	MONTH 	= TIMVEC [1] : WORD,
	DAY 	= TIMVEC [2] : WORD,
	HOUR	= TIMVEC [3] : WORD,
	MINUTE	= TIMVEC [4] : WORD,
	SECND 	= TIMVEC [5] : WORD,
	HNDRTH	= TIMVEC [6] : WORD
	;

    IF NOT				! Disect the abs time
	(STATUS = $NUMTIM
	    (
	    TIMBUF = TIMVEC,		! Buffer to place disected time
	    TIMADR = .ABSTIM		! Place to obtain 64 bit time
	    )
	)
    THEN
	RETURN .STATUS			! It was not valid
    ;

    IF  (				! Check the range of the date
	.YEAR GTRU 2021
	AND
	.MONTH GTR 10
	)
	OR
	.YEAR LSSU 1977
    THEN
	RETURN FAILURE			! Not expressible in julian halfday
    ;

    .HALFDAY =				! Compute the half day
	(
	( (3055 * (.MONTH+2) / 100) - ( (.MONTH+10) / 13) * 2 - 91)
	+
	( (1 - (.YEAR - .YEAR / 4 * 4 + 3) / 4) * (.MONTH+10) / 13 + .DAY - 1)
	+
	( (.YEAR-1977) * 365 + (.YEAR-1977) / 4)
	)* 2
	;

    .HALFDAY = ..HALFDAY + (.HOUR/12);	! Adjust for the odd half day
    HOUR = .HOUR MOD 12;

    .SECONDS = ( .HOUR*3600 + .MINUTE*60 + .SECND ); ! Now the second in day

    .MILISEC = .HNDRTH * 10;		! And the millisecond in the second

    RETURN SUCCESS

    END;

%SBTTL	'EVL$UNJULIAN  Convert Julian Halfday to Abs Time'
GLOBAL ROUTINE EVL$UNJULIAN (JULIAN, SECNDS, MILSECS, ABSTIM) :NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Convert julian halfday, seconds and milliseconds to VMS 64 bit
!	absolute time.  We need to do lots of monkeying around to not have
!	the one EMUL instruction overflow.  The important conversion factor
!	in this computation is the number of days between 17-NOV-1858 and
!	1-JAN-1977.
!
! FORMAL PARAMETERS:
!
!	JULIAN		Address of longword containing julian halfdays
!	SECNDS		Address of longword containing seconds in halfday
!	MILSECS		Address of longword containing milliseconds in second
!	ABSTIM		Address of quadword for abs time
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    BUILTIN EMUL ;			! Extended multiply instruction

    LOCAL
	NANOSECS,			! 100 nanosecs to add
	JULIAN_MINS,			! Minutes since 1-jan-1977
	NANOSPERMIN			! 100 nanosecs in a minute
	;

    BIND
	DATEOFFSET = 43144		! Days between 17-NOV-1858 and
	;				! 1-Jan-1977

    NANOSPERMIN = 60*10*1000*1000;
    NANOSECS = ( ( (..SECNDS MOD 60) *1000) + ..MILSECS ) * (10*1000);
    JULIAN_MINS = (..JULIAN + (DATEOFFSET*2) ) * (12*60) + (..SECNDS / 60);
    EMUL (JULIAN_MINS, NANOSPERMIN, NANOSECS, .ABSTIM)

    END;

END				!End of module
ELUDOM
