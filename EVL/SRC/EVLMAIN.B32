%TITLE	'DECnet Event Logger Main Module'
MODULE EVLMAIN	(
		LANGUAGE (BLISS32),
		IDENT = 'V03-000',
		MAIN = EVL$MAIN
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	DECnet Event Logging (EVL)
!
! ABSTRACT:
!
!	This module contains the main entry for the event logger.
!	A few routines of general utility are in the module too.
!
! ENVIRONMENT:	VAX/VMS Operating System
!
! AUTHOR:	Darrell Duffy	, CREATION DATE:  16-June-1980
!
! MODIFIED BY:
!
!	V001	TMH0001		Tim Halvorsen	25-Jun-1981
!		Purge working set to minimum before hibernating,
!		to limit system physical memory usage while not
!		doing anything.
!		Change references to ASCID macro to use %ASCID.
!--

%SBTTL	'Definitions'

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
	EVL$MAIN	:,		! Main entry
	EVL$INITLOG	: NOVALUE,	! Initialize for debug logging
	EVL$PRINTLOG	: NOVALUE	! Print data messages to log file
	;

!
! INCLUDE FILES:
!

LIBRARY 'LIB$:EVLIBRARY';		! EVL definitions
LIBRARY 'SYS$LIBRARY:STARLET';		! VMS common definitions

!
! OWN STORAGE:
!

GLOBAL
	EVL$GL_LOGMASK	: BBLOCK [8]		! Logging control mask
	;

!
! EXTERNAL REFERENCES:
!

EXTERNAL
	EVL$GW_NETSHOCHAN	: WORD,		! Channel to net for show
	EVL$B_RCVDONE		: BYTE,		! True if receive inactive
	EVL$GB_TRANSDONE	: BYTE;		! True if transmitter inactive

EXTERNAL ROUTINE
	EVL$RECEIVE		: NOVALUE,	! Activate the receiver
	EVL$TRANSMIT		: NOVALUE,	! Activate the transmitter
	WKQ$DO_WORK_ITEM	:,		! Perform a work item in queue
	EVL$OBTAINNETCHAN	: NOVALUE	! Obtain a channel to net
	;

EXTERNAL ROUTINE

	LIB$PUT_OUTPUT		: ADDRESSING_MODE (GENERAL),
	LIB$CVT_HTB		: ADDRESSING_MODE (GENERAL)
	;


%SBTTL	'EVL$MAIN  Main Entry'
GLOBAL ROUTINE EVL$MAIN =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This is the main entry point for the event logger.
!	It calls the initialization routines
!	and sits in a loop performing work from the work queue.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    EVL$INITLOG ();			! Initialize for debug logging
    EVL$OBTAINNETCHAN (EVL$GW_NETSHOCHAN); ! Obtain a channel to net
    EVL$RECEIVE ();			! Initialize receiver portion
    EVL$TRANSMIT ();			! Initialize transmitter portion

    WHILE NOT (.EVL$B_RCVDONE AND .EVL$GB_TRANSDONE) ! Until both sides finish,
    DO
	BEGIN
	$PURGWS(INADR=PLIT(0,%X'7FFFFFFF')); ! Purge entire working set
	$HIBER;				! Wait on some work to do
	WHILE WKQ$DO_WORK_ITEM () DO;	! Do work til empty queue
	END;

    RETURN TRUE;			! Exit sucessfully
    END;

%SBTTL 'EVL$INITLOG	Initialization debug logging'
ROUTINE EVL$INITLOG : NOVALUE =
 
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine initializes the internal logging flags for EVL debugging.
!	The logical name EVL$LOG is translated to obtain a hex number which is
!	converted to binary.  Each bit of the mask controls information to
!	be logged.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	EVL$LOG logical name
!
! IMPLICIT OUTPUTS:
!
!	EVL$GL_LOGMASK
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--
 
    BEGIN

    LITERAL
	RSLSIZE = 10				! Size of the result buffer
	;
 
    LOCAL
	RSLBFR : VECTOR [RSLSIZE, BYTE],	! Buffer for the translation
	RSLDSC : VECTOR [2]			! Descriptor for the buffer
	;

    EVL$GL_LOGMASK = 0;				! Initialize the logging mask
    RSLDSC [0] = RSLSIZE;			! Setup the descriptor
    RSLDSC [1] = RSLBFR;
 
    IF						! We must get a translation
	(
	$TRNLOG					! Translate the name once
	    (
	    LOGNAM = %ASCID 'EVL$LOG',		! This is the logical name
	    RSLLEN = RSLDSC [0],		! Place the length here
	    RSLBUF = RSLDSC			! Place the translation here
	    )
	)
	EQL
	SS$_NORMAL				! If a successful translation
    THEN					! Then convert the result
	LIB$CVT_HTB				! Convert hex to binary
	    (
	    .RSLDSC [0],			! Size of string
	    .RSLDSC [1],			! Address of string
	    EVL$GL_LOGMASK			! Address of longword result
	    )
    ;

    END;

%SBTTL	'EVL$PRINTLOG  Print a Data Message to the Log'
GLOBAL ROUTINE EVL$PRINTLOG (LOGBIT, HEADDSC, EXTRADSC, DATADSC) : NOVALUE =
 
!++
! FUNCTIONAL DESCRIPTION:
!
!	Check the logging control mask and if the corresponding bit is set
!	then print the special message to the log file.  The message
!	has a header and optionally some extra text which explains the
!	logged message.
!
! FORMAL PARAMETERS:
!
!	LOGBIT		Value of the logging bit to control the logging
!			as a bit number
!	HEADDSC		Address of a descriptor of the header text
!	EXTRADSC	Address of a descriptor of the extra text (optional)
!	DATADSC		Address of a descriptor of the data to be converted
!			and printed
!
! IMPLICIT INPUTS:
!
!	EVL$GL_LOGCONTROL
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--
 
    BEGIN
 
    MAP
	HEADDSC		: REF BBLOCK,
	EXTRADSC	: REF BBLOCK,
	DATADSC 	: REF BBLOCK
	;

    LITERAL
	FAOSIZ = 256			! The print buffer
	;

    LOCAL
	FAOBUF : VECTOR [FAOSIZ, BYTE],	! Print buffer
	FAOLST : VECTOR [100],		! List of args to $FAOL
	OUTDSC : VECTOR [2],		! Descriptor of the output line
	BYTES,				! Counter for bytes written
	CTR : SIGNED,			! A random counter
	PTR,				! A random pointer
	ITR_CNT				! Temporary iteration count
	;
 
!
!	See if this text should be logged, and if not then return
!

	IF NOT .EVL$GL_LOGMASK [0, .LOGBIT, 1, 0]
	THEN
	    RETURN
	;

	OUTDSC [0] = FAOSIZ;		! Initialize the output buffer dsc
	OUTDSC [1] = FAOBUF;
	FAOLST [0] = .HEADDSC;		! Header text
	FAOLST [1] = .DATADSC [DSC$W_LENGTH]; ! Data length
	FAOLST [2] =			! Extra text dsc
	    (
	    IF .EXTRADSC EQL 0
	    THEN
		%ASCID ''
	    ELSE
		.EXTRADSC
	    );
	$FAOL				! Write the header out
	    (
	    CTRSTR = %ASCID '!/  !AS  (length = !UL bytes)!/  !AS!/',
	    OUTLEN = OUTDSC [0],
	    OUTBUF = OUTDSC,
	    PRMLST = FAOLST
	    );
	LIB$PUT_OUTPUT (OUTDSC);

	CTR = .DATADSC [DSC$W_LENGTH];		! Size of message
	PTR = .DATADSC [DSC$A_POINTER];		! Its address
	WHILE .CTR GTR 0			! Process it all
	DO
	    BEGIN
	    OUTDSC [0] = FAOSIZ;		! Set a descriptor
	    OUTDSC [1] = FAOBUF;
	    ITR_CNT = MIN (.CTR, 20);		! Get byte count
	    FAOLST [0] = .ITR_CNT;		! Add count parameter
	    FAOLST [.ITR_CNT+1] = .ITR_CNT;	!
	    FAOLST [(.ITR_CNT+1)*2] = .ITR_CNT;	!
	    INCRU IDX FROM 1 TO .ITR_CNT	! A few bytes at a time
	    DO
		BEGIN
		FAOLST [.IDX] = .(.PTR) <0, 8, 0>; ! One for the hex
		FAOLST [.IDX + .ITR_CNT+1] = .(.PTR) <0, 8, 0>; ! Decimal
		FAOLST [2*(.IDX + .ITR_CNT)+1] = 1;	! One for character
		FAOLST [2*(.IDX + .ITR_CNT)+1 + 1] = .PTR;
		PTR = .PTR + 1;		! Next one
		CTR = .CTR - 1;		! One less
		END
	    ;
 
	    $FAOL			! Saviour of bored programmers
		(
		CTRSTR = %ASCID '!#(4XB)!/!#(4UB)!/   !#(4AF)!/',
		OUTLEN = OUTDSC [0],
		OUTBUF = OUTDSC,
		PRMLST = FAOLST
		);
 
	    LIB$PUT_OUTPUT (OUTDSC);	! Write to SYS$OUTPUT
	    END;
    END;

END				!End of module
ELUDOM
