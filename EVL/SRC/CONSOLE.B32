MODULE console (IDENT = 'V03-000') =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY:  DECnet V2.0 event logger
!
! ABSTRACT:
!
!	This module contains all console display formatting routines
!	for the event receiver.
!
! ENVIRONMENT:
!
!	VAX/VMS operating system. unprivileged user mode,
!
! AUTHOR:  Tim Halvorsen, June 1980
!
! Modified by:
!
!	V008	TMH0008		Tim Halvorsen	28-Dec-1981
!		Add PCL-11B and UNA counters.
!
!	V007	TMH0007		Tim Halvorsen	19-Aug-1981
!		Change text of CRC remote node parameter.
!
!	V006	TMH0006		Tim Halvorsen	05-Aug-1981
!		Add DAP CRC event formatting
!
!	V005	TMH0005		Tim Halvorsen	08-Jul-1981
!		Add PCL11-B line counters, and new 2.2 events and parameters.
!		Increase maximum size of output strings sent to OPCOM (monitor)
!		to 512, as a result of enhancements made to OPCOM and $BRDCST.
!
!	V004	TMH0004		Tim Halvorsen	07-Jul-1981
!		Use SHRLIB$ rather than LIB$ for NMALIBRY.L32.
!
!	V003	TMH0003		Tim Halvorsen	05-Jan-1981
!		Fix decoding of line service status and display
!		error message associated with status.
!
!	V002	TMH0002		Tim Halvorsen	19-Nov-1980
!		Make formatting routines callable with an action
!		routine to actually perform the output.  This allows
!		the monitor sink output routine to use the formatting
!		routines as well as the console sink.
!
!	V001	TMH0001		Tim Halvorsen	17-Nov-1980
!		Remove noise words in formatted event output to
!		reduce overall size of the output message so that
!		it won't be truncated by OPCOM.
!		Write the formatted output to SYS$OUTPUT if we are
!		logging received events.
!--

!
! Include files
!

LIBRARY 'SYS$LIBRARY:LIB';		! VAX/VMS common definitions
					! (only need LIB for $NFBDEF)

REQUIRE 'SYS$LIBRARY:UTILDEF';		! Common VMS definitions

LIBRARY 'SHRLIB$:NMALIBRY';		! Get counter type definitions

LIBRARY 'LIB$:EVCDEF';			! Event data definitions

REQUIRE 'LIB$:EVLDEF';			! Facility definitions

!
! Table of contents
!

FORWARD ROUTINE
    format_event:	NOVALUE,	! Format an event record
    append_strings:	NOVALUE,	! Append a string to another string
    format_parameter:	NOVALUE,	! Format a NICE parameter
    unknown_parameter:	NOVALUE,	! Format an unknown parameter
    unknown_param_data:	NOVALUE,	! Format unknown parameter data
    format_counter:	NOVALUE;	! Format a NICE counter

!
! Define macro for message reporting
!

MACRO
    msg(ident) =
	BEGIN
	%IF NOT %DECLARED(%NAME('evl$_',ident))
		%THEN EXTERNAL LITERAL %NAME('evl$_',ident); %FI
	%NAME('evl$_',ident)
	END%;

!
! Define all known events and the associated message text
!

MACRO
    evtdecl [name] = %NAME('evl$_',name)%,
    evtdef [name] = WORD(%NAME('evc$c_',name)),LONG(msg(name))%,
    event_list [] =
	EXTERNAL LITERAL evtdecl(%REMAINING);
	BIND known_events = UPLIT(evtdef(%REMAINING),LONG(0))%;

event_list(
	nma_los,
	nma_anc,
	nma_alc,
	nma_als,
	nma_lcz,
	nma_ncz,
	nma_psl,
	nma_abs,
	nma_ctr,
	nma_zer,

	scl_lns,
	scl_acr,

	nsl_ims,
	nsl_ifc,
	nsl_dbr,

	tpl_apl,
	tpl_upl,
	tpl_rpl,
	tpl_opl,
	tpl_pfm,
	tpl_pru,
	tpl_vfr,
	tpl_ldf,
	tpl_lds,
	tpl_ldo,
	tpl_lup,
	tpl_ilf,
	tpl_isf,
	tpl_iof,
	tpl_rch,

	dll_lsc,
	dll_rsc,
	dll_prs,
	dll_snd,
	dll_ret,
	dll_slc,
	dll_bhf,
	dll_sad,
	dll_stt,
	dll_lbs,
	dll_rst,
	dll_stc,
	dll_rme,

	pll_dsr,
	pll_rin,
	pll_car,
	pll_mem,
	pll_com,
	pll_pfm,

	vms_dbc,
	vms_dpc);

!
! Define all known counters and the associated message text
!

MACRO
    ctrdecl [name] = %NAME('evl$_',name)%,
    ctrdef [name] = WORD(%NAME('nma$c_',name)),LONG(msg(name))%,
    counter_list [] =
	EXTERNAL LITERAL ctrdecl(%REMAINING);
	BIND known_counters = UPLIT(ctrdef(%REMAINING),LONG(0))%;

counter_list(
	ctnod_zer,
	ctnod_brc,
	ctnod_bsn,
	ctnod_mrc,
	ctnod_msn,
	ctnod_crc,
	ctnod_csn,
	ctnod_rto,
	ctnod_rse,
	ctnod_mll,
	ctnod_apl,
	ctnod_nul,
	ctnod_nol,
	ctnod_opl,
	ctnod_pfe,
	ctnod_rul,
	ctnod_ver,

	ctcir_zer,
	ctcir_apr,
	ctcir_dps,
	ctcir_acl,
	ctcir_crl,
	ctcir_tpr,
	ctcir_tps,
	ctcir_tcl,
	ctcir_ldn,
	ctcir_ifl,
	ctcir_brc,
	ctcir_bsn,
	ctcir_dbr,
	ctcir_dbs,
	ctcir_dei,
	ctcir_deo,
	ctcir_rrt,
	ctcir_lrt,
	ctcir_rbe,
	ctcir_lbe,
	ctcir_sie,
	ctcir_slt,
	ctcir_rpe,
	ctcir_lpe,
	ctcir_lir,
	ctcir_rir,
	ctcir_nir,
	ctcir_mne,
	ctcir_eri,
	ctcir_ero,
	ctcir_rto,
	ctcir_lto,
	ctcir_ber,
	ctcir_bel,

	ctlin_apr,
	ctlin_dps,
	ctlin_acl,
	ctlin_tpr,
	ctlin_tps,
	ctlin_tcl,
	ctlin_ldn,
	ctlin_ifl,
	ctlin_brc,
	ctlin_bsn,
	ctlin_dbr,
	ctlin_dbs,
	ctlin_dei,
	ctlin_deo,
	ctlin_rrt,
	ctlin_lrt,
	ctlin_rbe,
	ctlin_lbe,
	ctlin_sie,
	ctlin_slt,
	ctlin_rpe,
	ctlin_lpe,
	ctlin_mbs,
	ctlin_mbr,
	ctlin_mrc,
	ctlin_ibe,
	ctlin_bs1,
	ctlin_bsm,
	ctlin_npt,
	ctlin_rme,
	ctlin_lce,
	ctlin_mse);

!
! Define a macro for constructing output strings
!

MACRO
    append(string) =
	append_strings(desc,UPLIT BYTE(%ASCIC string)
	%IF %LENGTH GTR 1 %THEN ,%REMAINING %FI)%;

!
! Literals
!

LITERAL
    max_output = 512;			! Maximum length of output string
!
! External storage
!

EXTERNAL
   evl$gl_logmask:	BBLOCK;		! Internal logging mask

!
! External routines
!

EXTERNAL ROUTINE
    evl$unjulian,			! Convert julian half-day time
    wkq$add_work_item;			! Add work to work queue

GLOBAL ROUTINE format_event (event, event_length,
			output_routine, output_parm): NOVALUE =

!---
!
!	Output an event record to the console sink.
!
! Inputs:
!
!	event = Address of event record
!	event_length = Length of event record
!	output_routine = Address of routine to call for each formatted line
!	output_parm = Optional parameter to be sent to output routine
!
! Outputs:
!
!	None
!---

BEGIN

MACRO
    new_line =
	BEGIN
	(.output_routine)(.output_parm, desc, .short_form); ! Call output action routine
	desc [0] = 0;				! Reset descriptor length
	END%;

MAP
    event:	REF BBLOCK;		! Address of event record

LOCAL
    ptr:	REF BBLOCK,		! Address of event data parameter
    days, seconds, msecs,		! For conversion of julian time
    comma_needed:	BYTE,		! Boolean; true if comma needed on line
    time:	VECTOR [2],		! Converted 64-bit system time
    short_form,				! Length of short form of display
    desc:	VECTOR [2],		! Descriptor of output buffer
    buffer:	VECTOR [max_output,BYTE]; ! Output buffer (extra for counters)

desc [0] = 0;				! Setup descriptor of buffer
desc [1] = buffer;
short_form = -1;			! Indicate no short form yet

append('DECnet event !UL.!UL', .event [evt$v_class], .event [evt$v_type]);

INCRA ptr FROM known_events BY 6	! Scan known event table
DO
    BEGIN
    MAP ptr: REF BBLOCK;
    IF ..ptr EQL 0			! If end of table,
    THEN
	EXITLOOP;			! then exit with failure
    IF .event [evt$w_code] EQLU .ptr [0,0,16,0]	! If known event,
    THEN
	BEGIN
	LOCAL
	    textbuf:	VECTOR [128,BYTE], ! Message text buffer
	    text:	VECTOR [2];	! Message text descriptor
	text [0] = 128;			! Setup descriptor
	text [1] = textbuf;
	$GETMSG(MSGID = .ptr [2,0,32,0],	! Get message text
		BUFADR = text,
		MSGLEN = text,
		FLAGS = 1);		! without any prefixing
	append(', !AS', text);
	EXITLOOP;
	END;
    END;

new_line;				! Start a new line

append('From node !UL', .event [evt$w_srcadr]);

IF .event [evt$b_srcnamlen] NEQ 0	! If source node name supplied
THEN
    append(' (!AC)', event [evt$b_srcnamlen]);

days = .event [evt$w_julian];		! Get julian values
seconds = .event [evt$w_seconds];
msecs = .event [evt$w_msecs];

evl$unjulian(days,seconds,msecs,time);	! Convert to system quadword time

append(', !%D', time);

new_line;				! Start third line of message
comma_needed = false;			! Start of line, no comma needed yet

ptr = event [evt$t_srcnam] + .event [evt$b_srcnamlen]; ! Point to event entity

SELECTU CH$RCHAR_A(ptr)			! Select entity based on entity ID
OF
    SET
    [evc$c_src_lin]:	BEGIN
			append('Line !AC', .ptr);
			ptr = CH$RCHAR_A(ptr) + .ptr;
			comma_needed = true;
			END;

    [evc$c_src_cir]:	BEGIN
			append('Circuit !AC', .ptr);
			ptr = CH$RCHAR_A(ptr) + .ptr;
			comma_needed = true;
			END;

    [evc$c_src_nod]:	BEGIN
			append('Node !UL', .ptr [0,0,16,0]);
			ptr = .ptr+2;
			IF CH$RCHAR(.ptr) GTRU 0
			THEN
			    append(' (!AC)', .ptr);
			ptr = CH$RCHAR_A(ptr) + .ptr;
			comma_needed = true;
			END;
    TES;

WHILE .ptr LSSU .event + .event_length	! Until end of event record
DO
    BEGIN
    LOCAL
	startlen;			! Starting string length

    IF .desc [0] GTR 45			! If line already too long,
    THEN
	BEGIN
	new_line;			! then start another line
	comma_needed = false;		! Indicate no comma on start of line
	END;

    startlen = .desc [0];		! Save starting string length

    IF .comma_needed			! If comma needed,
    THEN
	BEGIN
	append(', ');			! then add it
	comma_needed = false;		! and reset flag
	END;

    IF .ptr [0,15,1,0]			! If counter data (bit 15),
    THEN
	BEGIN
	IF .short_form LSS 0		! If first counter,
	THEN
	    short_form = .startlen	! set short form up to this point
					! and trailing comma
	ELSE
	    short_form = 0;		! else skip all counter output
	new_line;			! start a new line
	format_counter(desc, ptr,	! then format the counter; update ptr
	    .event + .event_length - .ptr);
	END
    ELSE
	format_parameter(desc, ptr,	! else format the parameter; update ptr
		.event + .event_length - .ptr,
		.event [evt$v_class]);

    IF .startlen NEQ .desc [0]		! If anything was appended to string,
    THEN
	comma_needed = true;		! then insert a comma
    END;
    
If .desc [0] GTR 0			! If something in buffer,
THEN
    new_line;				! Output the last line

END;

ROUTINE append_strings (result, string, args): NOVALUE =

!----
!
! Functional description
!
!	This routine appends an FAO result string to another
!	string.  The second argument is used as an FAO control
!	string with the following arguments used as parameters.
!	The result of the FAO operation is appended to the end
!	of the string described by the first operand and the
!	descriptor is updated.
!
! Input parameters
!
!	result = Address of descriptor of string to be appended
!	string = FAO control string (counted string)
!	args = 0 to n FAO arguments
!
! Output parameters
!
!	result = Updated descriptor of appended string
!
!----

BEGIN

MAP
    string: REF VECTOR [,BYTE],		! Address the counted string
    result: REF VECTOR;			! Address the descriptor

LOCAL
    faodesc:	VECTOR [2],		! FAO control string descriptor
    desc:	VECTOR [2];		! FAO result string descriptor

faodesc [0] = .string [0];		! Get length of counted string
faodesc [1] = string [1];

desc [0] = max_output - .result [0];	! Setup descriptor for FAO
desc [1] = .result [1] + .result [0];

$FAOL(CTRSTR=faodesc,			! Insert string into buffer
	OUTLEN=desc,
	OUTBUF=desc,
	PRMLST=args);

result [0] = .result [0] + .desc [0];	! Update string length

END;

ROUTINE format_parameter (string, param, maxlen, class): NOVALUE =

!---
!
!	Format a NICE parameter and append the
!	descriptive text to a given string.
!
! Inputs:
!
!	param = Address of longword containing pointer to parameter
!	string = Address of descriptor of existing string
!	maxlen = Maximum length that the parameter may be
!	class = Event class
!
! Outputs:
!
!	ptr = Address of longword pointing to location following parameter
!---

BEGIN

BIND
    desc = .string: VECTOR;	! Address of string descriptor

LOCAL
    ptr:	REF BBLOCK,	! Address of parameter
    param_type,			! Parameter type (specific to class)
    nextptr:	REF BBLOCK,	! Pointer to next parameter
    fields,			! # fields in parameter
    byte1:	BYTE,		! First data byte after data type
    byte2:	SIGNED BYTE;	! Second data byte after data type

MACRO
    choose(index) =
	CASE index FROM 0 TO %LENGTH-2
	OF
	    SET
	    choose_item(%REMAINING);
	    TES%,
    choose_item [string] =
	[%COUNT]: append('!AC',UPLIT BYTE(%ASCIC string))%;

ptr = ..param;			! Get address of parameter
param_type = .ptr [0,0,11,0];	! Get parameter type code
nextptr = .ptr+2;		! Assume first field follows
IF .nextptr [0,7,1,0]		! If coded
    AND .nextptr [0,6,1,0]	! and multiple number of fields,
THEN
    BEGIN
    fields = .nextptr [0,0,6,0];! Get # fields in parameter
    nextptr = .nextptr + 1;	! and skip to actual first data item
    END
ELSE
    fields = 1;			! Else, indicate only one field

INCR i FROM 1 TO .fields	! For each field
DO
    IF .nextptr [0,7,1,0]	! If coded
    THEN
	nextptr = .nextptr + 1 + .nextptr [0,0,6,0] ! Use # coded bytes
    ELSE
	IF .nextptr [0,6,1,0]	! If ASCII image field
	    OR .nextptr [0,0,4,0] EQL 0	! If zero, hex image field
	THEN
	    nextptr = .nextptr + 2 + CH$RCHAR(.nextptr+1) ! Use ASCIC length
	ELSE
	    nextptr = .nextptr + 1 + .nextptr [0,0,4,0]; ! Else, use binary data length
	
byte1 = CH$RCHAR(.ptr+3);	! Get first data byte
byte2 = CH$RCHAR(.ptr+4);	! and second data byte
SELECTONEU .class		! For each layer,
OF
    SET

    [evc$c_cls_nma]:		! Network management layer
	SELECTONEU .param_type	! Case on parameter type
	OF
	    SET
	    [evc$c_nma_pser]: choose(.byte1, 'Load', 'Dump');
	    [evc$c_nma_psts]:
		BEGIN
		choose(IF .byte2 EQL 0 THEN 0
			ELSE IF .byte2 LSS 0 THEN 1 ELSE 2,
			'Requested', '', 'Successful');
		IF .byte2 LSS 0
		THEN
		    choose(-.byte2-1,
			'Unrecognized function or option',
			'Invalid message format',
			'Privilege violation',
			'Oversized command message',
			'Management program error',
			'Unrecognized parameter type',
			'Incompatible management version',
			'Unrecognized component',
			'Invalid identification',
			'Line communication error',
			'Component in wrong state',
			'',
			'File open error',
			'Invalid file contents',
			'Resource error',
			'Invalid parameter value',
			'Line protocol error',
			'File I/O error',
			'Mirror link disconnected',
			'No room for new entry',
			'Mirror connect failed',
			'Parameter not applicable',
			'Parameter value too long',
			'Hardware failure',
			'Operation failure',
			'Function not supported',
			'Invalid parameter grouping',
			'Bad loopback response',
			'Parameter missing');
		IF .fields GEQ 2		! If NICE detail specified,
		THEN
		    SELECTONE .byte2		! Then for certain errors,
		    OF
			SET
			[nma$c_sts_fop]: (append(', ');
			    choose(CH$RCHAR(.ptr+6), ! Expand on FOP detail
				'Permanent database',
				'Load file',
				'Dump file',
				'Secondary loader',
				'Tertiary loader',
				'Secondary dumper'));
			[nma$c_sts_cmp,nma$c_sts_ide,nma$c_sts_sta]:
			    (append(', ');
			    choose(CH$RCHAR(.ptr+6), ! Show entity name
				'Node',
				'Line',
				'Logging',
				'Circuit',
				'Module'));
			[nma$c_sts_pty,nma$c_sts_pva,nma$c_sts_pms]:
			    (append(', ');
			    CASE .(.ptr+6)<0,16>   ! Show NODE parameter
			    FROM nma$c_pcno_loa TO nma$c_pcno_tlo
			    OF
				SET
				[nma$c_pcno_loa]: append('Load file');
				[nma$c_pcno_slo]: append('Secondary loader');
				[nma$c_pcno_tlo]: append('Tertiary loader');
				TES);
			TES;
			
		IF .fields GEQ 3		! If optional message text,
		    AND CH$RCHAR(.ptr+9) NEQ 0	! and its non-null,
		THEN
		    append('!/!AC',.ptr+9);	! print it
		END;
	    [evc$c_nma_popr]: (append('Operation ');
		choose(.byte1, 'Initiated', 'Terminated'));
	    [evc$c_nma_prsn]:
		choose(.byte1,
			'Receive timeout',
			'Receive error',
			'Line state change by higher level',
			'Unrecognized request',
			'Line open error');
	    [OTHERWISE]: unknown_parameter(desc, .ptr, .maxlen);
	    TES;

    [evc$c_cls_scl]:		! Session control layer
	SELECTU .param_type
	OF
	    SET
	    [evc$c_scl_prsn]:
		choose(.byte1,'Operator command','Normal operation');
	    [evc$c_scl_pold]: append('Old state = ');
	    [evc$c_scl_pnew]: append('New state = ');
	    [evc$c_scl_pold,evc$c_scl_pnew]:
		choose(.byte1, 'On', 'Off', 'Shut', 'Restricted');
	    [evc$c_scl_pnod]: (append('Source node = !UL', .ptr [4,0,16,0]);
		IF .fields GTR 1
		    AND CH$RCHAR(.ptr+7) NEQ 0
		THEN append(' (!AC)',.ptr+7));
	    [evc$c_scl_pspc]: append('Source process = ');
	    [evc$c_scl_pdpc]: append('Destination process = ');
	    [evc$c_scl_pspc,evc$c_scl_pdpc]:
		(append('!UL',CH$RCHAR(.ptr+4));
		IF .fields GTR 3
		THEN append(' (!AC)', .ptr+10));
	    [evc$c_scl_pusr]: append('User = !AC', .ptr+3);
	    [evc$c_scl_ppsw]: append('Password');
	    [evc$c_scl_pacc]: append('Account = !AC', .ptr+3);
	    [OTHERWISE]: unknown_parameter(desc, .ptr, .maxlen);
	    TES;

    [evc$c_cls_nsl]:		! Network services layer
	SELECTONEU .param_type
	OF
	    SET
	    [evc$c_nsl_pmsg]:
		(append('Message = ');
		unknown_param_data(desc, .ptr+2, .maxlen));
	    [evc$c_nsl_pflo]: append('Current flow control = !SB', .byte1);
	    [OTHERWISE]: unknown_parameter(desc, .ptr, .maxlen);
	    TES;

    [evc$c_cls_tpl]:		! Transport layer
	SELECTU .param_type
	OF
	    SET
	    [evc$c_tpl_ppkh]:
		(append('Packet header = ');
		unknown_param_data(desc, .ptr+2, .maxlen));
	    [evc$c_tpl_ppkb]:
		(append('Packet beginning = ');
		unknown_param_data(desc, .ptr+2, .maxlen));
	    [evc$c_tpl_phia]: append('Highest address = !UL', .ptr [3,0,16,0]);
	    [evc$c_tpl_pnod]: append('Node = ');
	    [evc$c_tpl_pexp]: append('Expected node = ');
	    [evc$c_tpl_pnod,evc$c_tpl_pexp]:
		(append('!UL', .ptr [4,0,16,0]);
		IF .fields GTR 1
		    AND CH$RCHAR(.ptr+7) NEQ 0
		THEN append(' (!AC)',.ptr+7));
	    [evc$c_tpl_prsn]:
		choose(.byte1,
			'Line synchronization lost',
			'Data errors',
			'Unexpected packet type',
			'Routing update checksum error',
			'Adjacent node address change',
			'Verification receive timeout',
			'Version skew',
			'Adjacent node address out of range',
			'Adjacent node block size too small',
			'Invalid verification seed value',
			'Adjacent node listener receive timeout',
			'Adjacent node listener received invalid data');
	    [evc$c_tpl_pvrs]: append('Received version = !UL.!UL.!UL',
				CH$RCHAR(.ptr+4),
				CH$RCHAR(.ptr+6),
				CH$RCHAR(.ptr+8));
	    [evc$c_tpl_psts]: (
		choose(.byte1,'Reachable', 'Unreachable'));
	    [OTHERWISE]: unknown_parameter(desc, .ptr, .maxlen);
	    TES;
			
    [evc$c_cls_dll]:		! Data link layer
	SELECTU .param_type
	OF
	    SET
	    [evc$c_dll_pold]: append('Old state = ');
	    [evc$c_dll_pnew]: append('New state = ');
	    [evc$c_dll_pold,evc$c_dll_pnew]:
		choose(.byte1,'Halted','ISTRT','ASTRT','Running',
				'Maintenance');
	    [evc$c_dll_phdr]:
		(append('Header = ');
		unknown_param_data(desc, .ptr+2, .maxlen));
	    [evc$c_dll_pslt]: append('Selected tributary = !UL',.byte1);
	    [evc$c_dll_ppvt]: append('Previous tributary = !UL',.byte1);
	    [evc$c_dll_ptst]: (append('Tributary status = ');
		choose(.byte1,
			'Streaming',
			'Continued send after timeout',
			'Continued send after deselect',
			'Ended streaming'));
	    [evc$c_dll_prtb]: append('Received tributary = !UL',.byte1);
	    [evc$c_dll_pbkl]: append('Block length = !UL', .ptr [3,0,16,0]);
	    [evc$c_dll_pbfl]: append('Buffer length = !UL', .ptr [3,0,16,0]);
	    [evc$c_dll_pdte]: append('DTE = !AC', .ptr+3);
	    [evc$c_dll_prsn]: (append('Reason = ');
		choose(.byte1,
			'Operator command',
			'Normal operation'));
	    [evc$c_dll_post]: append('Old state = ');
	    [evc$c_dll_pnst]: append('New state = ');
	    [evc$c_dll_post,evc$c_dll_pnst]:
		choose(.byte1,'Off', 'On', 'Shut');
	    [evc$c_dll_ptyp]: append('Parameter type = #!UL', .ptr [3,0,16,0]);
	    [evc$c_dll_pcau]: append('Cause = !UL', .byte1);
	    [evc$c_dll_pdia]: append('Diagnostic = !UL', .byte1);
	    [OTHERWISE]: unknown_parameter(desc, .ptr, .maxlen);
	    TES;

    [evc$c_cls_pll]:		! Physical link layer
	SELECTU .param_type
	OF
	    SET
	    [evc$c_pll_pdvr]: append('Device register = !XW', .ptr [3,0,16,0]);
	    [evc$c_pll_pnew]: (append('New state = ');
		choose(.byte1,'Off', 'On'));
	    [OTHERWISE]: unknown_parameter(desc, .ptr, .maxlen);
	    TES;

    [evc$c_cls_vms]:		! VMS specific events
	SELECTU .param_type
	OF
	    SET
	    [evc$c_vms_pnod]: (append('Remote node ');
			IF CH$RCHAR(.ptr+3) EQL 0	! 0=address, else name
			THEN
			    append('!UL', .ptr [4,0,16,0]) ! Write node address
			ELSE
			    append('!AC', .ptr+3));
	    [OTHERWISE]: unknown_parameter(desc, .ptr, .maxlen);
	    TES;

    [OTHERWISE]: unknown_parameter(desc, .ptr, .maxlen);
    TES;

.param = .nextptr;		! Skip to next parameter

END;

ROUTINE unknown_parameter (string, ptr, maxlen): NOVALUE =

!---
!
!	Append a unknown parameter to a given string.
!
! Inputs:
!
!	desc = Address of current string buffer
!	ptr = Address of parameter (data id, data type, ...)
!	maxlen = Maximum length that the parameter may be
!
! Outputs:
!
!	The string is updated.
!---

BEGIN

MAP
    ptr:	REF BBLOCK;		! Address of parameter data

BIND
    desc = .string: VECTOR;		! Address of string descriptor

append('Parameter #!UL = ', .ptr [0,0,11,0]);	! Show parameter type

unknown_param_data(desc, .ptr+2, .maxlen);	! Append unknown data

END;

ROUTINE unknown_param_data (string, param, maxlen): NOVALUE =

!---
!
!	Append a unknown parameter to a given string.
!
! Inputs:
!
!	desc = Address of current string buffer
!	param = Address of parameter data type
!	maxlen = Maximum length that the parameter may be
!
! Outputs:
!
!	The string is updated.
!---

BEGIN

BIND
    desc = .string: VECTOR;		! Address of string descriptor

LOCAL
    ptr:	REF BBLOCK,		! Address of parameter data
    fields;				! Number of fields in parameter

ptr = .param;				! Point to first data type

IF .ptr [0,7,1,0]			! If coded
    AND .ptr [0,6,1,0]			! and multiple number of fields,
THEN
    BEGIN
    fields = .ptr [0,0,6,0];		! Get # fields in parameter
    ptr = .ptr + 1;			! and skip to actual first data item
    END
ELSE
    fields = 1;				! Else, indicate only one field

INCR i FROM 1 TO .fields		! For each field
DO
    BEGIN
    IF .ptr [0,7,1,0]			! If coded
    THEN
	BEGIN
	INCRU j FROM 1 TO .ptr [0,0,6,0]	! For each byte in coded field
	DO
	    append('!XB ', .ptr [.j,0,8,0]);	! append the hex for that byte
	desc [0] = .desc [0] - 1;	! Strip off the last blank
	ptr = .ptr + 1 + .ptr [0,0,6,0];
	END
    ELSE
	IF .ptr [0,6,1,0]		! If ASCII image field
	THEN
	    BEGIN
	    append('!AC', .ptr+1);	! append the string
	    ptr = .ptr + 2 + CH$RCHAR(.ptr+1);	! Use ASCIC length
	    END
	ELSE
	    BEGIN
	    LOCAL bytes,longword;
	    bytes = .ptr [0,0,4,0];	! # bytes in field
	    IF .bytes EQL 0		! If zero,
	    THEN
		BEGIN			! then treat as hex image (counted)
		INCRU j FROM 1 TO CH$RCHAR(.ptr+1)	! For each byte in field
		DO
		    append('!XB', .ptr [.j+1,0,8,0]);	! append the hex for that byte
		ptr = .ptr + 2 + CH$RCHAR(.ptr+1);
		END
	    ELSE BEGIN
	    IF .bytes GTRU 4		! If greater than longword,
	    THEN
		bytes = 4;		! then truncate to longword
	    longword = .ptr [1,0,8*.bytes,0]; ! Extract unsigned to longword
	    SELECTONEU .ptr [0,4,2,0]	! Based on output format,
	    OF
		SET
		[0]: append('!UL',.longword);		! Unsigned decimal
		[1]: append('!SL',.ptr [1,0,8*.bytes,1]); ! Signed decimal
		[2]: SELECTONEU .bytes OF SET		! Hexidecimal
			[1]: append('!XB', .longword);	! byte
			[2]: append('!XW', .longword);	! word
			[4,OTHERWISE]: append('!XL', .longword); ! longword
			TES;
		[3]: SELECTONEU .bytes OF SET		! Octal
			[1]: append('!OB', .longword);	! byte
			[2]: append('!OW', .longword);	! word
			[4,OTHERWISE]: append('!OL', .longword); ! longword
			TES;
		TES;
	    ptr = .ptr + 1 + .ptr [0,0,4,0];
	    END;
	    END;

    IF .ptr - .param GTRU .maxlen	! If exceeded maximum allowable length
    THEN
	BEGIN
	SIGNAL(msg(badparam));		! Signal illegal NICE parameter
	RETURN;
	END;

    IF .i LSS .fields			! If not last field,
    THEN
	append(' ');			! then delimit fields with a blank
    END;

END;

ROUTINE format_counter (string, param, maxlen): NOVALUE =

!---
!
!	Format a NICE counter and append the
!	descriptive text to a given string.
!
! Inputs:
!
!	string = Address of descriptor of existing string
!	param = Address of longword containing pointer to counter
!	maxlen = Maximum length that the parameter may be
!
! Outputs:
!
!	param = Address of longword pointing to location following counter
!---

BEGIN

BIND
    desc = .string: VECTOR;	! Address of string descriptor

LOCAL
    ptr:	REF BBLOCK,	! Address of counter
    type,			! Counter type
    count,			! Actual counter value
    width;			! Width of counter field

ptr = ..param;			! Get address of counter

width = 4 ^ .ptr [0,13,2,0];	! Get the counter width

IF .ptr [0,12,1,0]		! If bit mapped,
THEN
    BEGIN
    count = .ptr [4,0,.width,0];	! Get unsigned counter
    .param = .ptr + 4 + .width/8;	! Update next position
    END
ELSE
    BEGIN
    count = .ptr [2,0,.width,0];	! Get unsigned counter
    .param = .ptr + 2 + .width/8;	! Update next position
    END;

append('!10UL  ',.count);	! Append the count value

type = .ptr [0,0,11,0];		! Get counter type

INCRA ptr FROM known_counters BY 6	! Scan known event table
DO
    BEGIN
    MAP ptr: REF BBLOCK;
    IF ..ptr EQL 0			! If end of table,
    THEN
	BEGIN
	append('Unknown counter type !UL',.type);
	EXITLOOP;			! then exit with failure
	END;
    IF .type EQLU .ptr [0,0,16,0]	! If known event,
    THEN
	BEGIN
	LOCAL
	    textbuf:	VECTOR [128,BYTE], ! Message text buffer
	    text:	VECTOR [2];	! Message text descriptor
	text [0] = 128;			! Setup descriptor
	text [1] = textbuf;
	$GETMSG(MSGID = .ptr [2,0,32,0],	! Get message text
		BUFADR = text,
		MSGLEN = text,
		FLAGS = 1);		! without any prefixing
	append('!AS', text);
	EXITLOOP;
	END;
    END;

END;

END
ELUDOM
