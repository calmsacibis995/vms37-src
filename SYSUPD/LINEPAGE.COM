$ !
$ ! LINEPAGE.COM - patch the number of print lines per printer page
$ !	used by certain compatibility mode utilities in their listing
$ !	formats.
$ !
$ !	p1 = actual number of lines on printer page (66 standard U.S.)
$ !	p2 = data file with fix information - 
$ !	     (D = SYS$UPDATE:LINEPAGE.DAT)
$ !
$ !	The format of the data file is as follows:
$ !
$ !		*CRF
$ !		25:110/63
$ !		25:422/63
$ !
$ !	The "*" must be in column 1, the file name contains no device
$ !	directory, file type, or version. SYS$SYSTEM:.EXE is assumed.
$ !	the numbers in the patch lines MUST all be OCTAL.  The first
$ !	two numbers are the virtual block number and byte within that
$ !	block, the 3rd value is that which appears in the standard
$ !	image when a 66 line-per-page printer is used.  In the case of
$ !	CRF above, that value is 63 octal (51 decimal).  The patch files
$ !	may be concatenated as they are in LINEPAGE.DAT.
$ !
$ if p1 .nes. "" then goto linppg_given
$ type sys$input

Please specify the number of lines per printer page from perforation
to perforation.  For standard DEC supplied printers the number is 66.

$ inquire p1 "Desired number of lines per page"
$linppg_given:
$ write sys$output ""
$ write sys$output "	The following programs have been patched to reflect"
$ write sys$output "a printer page of ''p1' lines:"
$ write sys$output ""
$ lincnt[0,32]='p1'
$ linppg:=""
$ bit_pos=0
$ !
$ ! convert lines-per-page parameter to octal for ZAP
$ !
$octal_loop:
$    linppg:='f$cvui(bit_pos,3,lincnt)''linppg'
$    bit_pos=bit_pos+3
$    if bit_pos .lt. 15 then goto octal_loop
$ data_file:='p2'
$ if data_file .eqs. "" then data_file:="SYS$UPDATE:LINEPAGE.DAT"
$ open /read in 'data_file'
$ read /end=eof in patch
$ !
$ ! create and execute a ZAP command file for each file to be patched
$ !
$next_prog:
$    prog:='patch'
$    if prog .eqs. "" then goto eof
$    if "''f$extract(0,1,prog)'" .nes. "*" then goto eof
$    size='f$length(prog)-1
$    prog:='f$extract(1,size,prog)
$    copy sys$system:'prog'.exe sys$system:
$    open /write out sys$update:linepage.tmp
$    write out "SYS$SYSTEM:''PROG'.EXE/AB"
$patch_loop:
$	patch:=""
$	read /end=end_patch_loop in patch
$	if "''f$extract(0,1,patch)'" .eqs. "*" then goto end_patch_loop
$	slash='f$locate("/",patch)+1
$	size='f$length(patch)-slash
$	values:='f$extract(slash,size,patch)
$	patch:='f$extract(0,slash,patch)
$	slash='f$locate("/",values)
$	val1:='f$extract(0,slash,values)
$ !
$ ! exclude spurious differences generated by binary comparing
$ ! two task builds with differerent lines-per-page parameters
$ !
$	size='f$length(values)
$	if slash .eq. size then goto no_second_value ! manually generated
$	slash=slash+1
$	size=size-slash
$	val2:='f$extract(slash,size,values)
$	temp[0,32]=%O'val2'
$	if "''f$cvsi(6,10,temp)'" .nes. "-1" then goto patch_loop
$no_second_value:
$	write out "''patch'"
$	write out "''linppg'-102+''val1'"
$	goto patch_loop
$end_patch_loop:
$    write out "X"
$    close out
$    define /user sys$output nl:
$    mcr zap @sys$update:linepage.tmp
$    delete sys$update:linepage.tmp;*
$    write sys$output "	SYS$SYSTEM:''PROG'.EXE"
$    goto next_prog
$eof:
$ close in
