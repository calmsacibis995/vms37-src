MODULE PUTNDO (
		IDENT = 'V03-000'
%BLISS32[,
	ADDRESSING_MODE(EXTERNAL=LONG_RELATIVE,NONEXTERNAL=LONG_RELATIVE)
	]
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY: RUNOFF document formatter
!
! ABSTRACT: Routines to save index information in a file.
!
!
! ENVIRONMENT: Transportable
!
! AUTHOR: R.W.Friday	 CREATION DATE: February, 1979
!
! MODIFIED BY:
!
!--

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    CLSNDX : NOVALUE,
    PUTNDY : NOVALUE,
    PUTXTN : NOVALUE;

!
! INCLUDE FILES:
!

LIBRARY 'NXPORT:XPORT';

REQUIRE 'REQ:BOOL.REQ';

REQUIRE 'REQ:PAGEN.REQ';

!
! MACROS:
!
!
! EQUATED SYMBOLS:
!

LITERAL
    NEW_SEQUENCE = 1,
    INDEX_XTN = 2,
    INDEX_ENTRY = 3;

!
! OWN STORAGE:
!

EXTERNAL
    NDXOOB : $XPO_IOB ();

!
! EXTERNAL REFERENCES:
!

EXTERNAL LITERAL 				!Error messages
    RNFILE;

EXTERNAL ROUTINE
    ERMS;

!


GLOBAL ROUTINE PUTNDY (ENTRY_LENGTH, ENTRY_ADDRESS, XTN, BAR_FLAG) : NOVALUE = 	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	PUTNDY writes an index entry to the index file.
!
! FORMAL PARAMETERS:
!
!	ENTRY_LENGTH is the number of bytes representing the entry.
!	ENTRY_ADDRESS is the address of the entry.
!	XTN is the associated transaction number.
!	BAR_FLAG is the change-bar flag.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	TEMP_RECORD : VECTOR [3];

    !Cursory check to make sure the file is opened.
    IF 						!
	NOT .NDXOOB [IOB$V_OPEN]
    THEN
	BEGIN
	ERMS (RNFILE, CH$PTR (UPLIT ('INI_INDEX_FILE')), 14);
	RETURN;
	END;

    !If there is no index entry to write, just return.  Note that this
    !can happen if the user says, for example, ".X;", which is a valid
    !RUNOFF command but causes nothing to happen in the index.
    IF						!
	.ENTRY_LENGTH LEQ 0
    THEN
	RETURN;

    !Create a one-word descriptor record.
    TEMP_RECORD [0] = INDEX_ENTRY;		!Contents says what comes next.

    !Write a descriptor identifying what is about to come as
    !an index entry.
    $XPO_PUT (IOB = NDXOOB, BINARY_DATA = (1, TEMP_RECORD));

    !Generate a descriptor record for this entry.
    TEMP_RECORD [0] = .ENTRY_LENGTH;
    TEMP_RECORD [1] = .XTN;
    TEMP_RECORD [2] = .BAR_FLAG;

    !Write out the descriptor record for this entry.
    $XPO_PUT (IOB = NDXOOB, BINARY_DATA = (3, TEMP_RECORD));

    !Write out the index entry.
    $XPO_PUT (IOB = NDXOOB, BINARY_DATA = (CH$ALLOCATION (.ENTRY_LENGTH), .ENTRY_ADDRESS));

    END;					!End of PUTNDY


GLOBAL ROUTINE PUTXTN (PAGE_REF, XTN) : NOVALUE = 	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	PUTXTN writes a transaction-number/page-reference pair
!	to the index file.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	TEMP_RECORD : VECTOR [1 + PAGE_SCT_SIZE];

    !Cursory check to make sure the file is opened.
    IF 						!
	NOT .NDXOOB [IOB$V_OPEN]
    THEN
	BEGIN
	ERMS (RNFILE, CH$PTR (UPLIT ('INI_INDEX_FILE')), 14);
	RETURN;
	END;

    !Create a one-word descriptor record.
    TEMP_RECORD [0] = INDEX_XTN;		!This indicates what comes next.

    !Write the descriptor record.
    $XPO_PUT (IOB = NDXOOB, BINARY_DATA = (1, TEMP_RECORD [0]));

    BEGIN

    MAP
	PAGE_REF : REF VECTOR [PAGE_SCT_SIZE];

    !Put transaction number into the temporary record.
    TEMP_RECORD [0] = .XTN;

    !Copy the page number in too.
    INCR I FROM 1 TO PAGE_SCT_SIZE DO
	TEMP_RECORD [.I] = .PAGE_REF [.I - 1];

    END;
    $XPO_PUT (IOB = NDXOOB, BINARY_DATA = (1 + PAGE_SCT_SIZE, TEMP_RECORD));

    END;					!End of PUTXTN


GLOBAL ROUTINE CLSNDX : NOVALUE = 		!

!++
! FUNCTIONAL DESCRIPTION:
!
!	CLSNDX does nothing more than close the file into which the
!	index is being written.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    IF 						!
	.NDXOOB [IOB$V_OPEN]
    THEN
	$XPO_CLOSE (IOB = NDXOOB);

    END;					!End of CLSNDX

END						!End of module

ELUDOM
