%title 'Second phase.  Build 2 column index'
MODULE XPASBO (					!
		IDENT = 'V03-000'
    %BLISS32 [, 
		ADDRESSING_MODE (EXTERNAL = LONG_RELATIVE, NONEXTERNAL = LONG_RELATIVE)
	     ]
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY: RUNOFF document formatter
!
! ABSTRACT: Generates a two-column index from a one-column index.
!
!
! ENVIRONMENT: Transportable
!
! AUTHOR: R.W.Friday	 CREATION DATE: February, 1979
!
! MODIFIED BY: K. A. Dawson, July 1980
!
!	013	REM00013	Ray Marshall	9-December-1981
!		Made $XPO_INPUT device handling more forgiving.  On
!		  encountering and end-of-file,  the current and all successive
!		  questions will take the default and no more questions will
!		  be asked.
!
!	012	REM00012	Ray Marshall	4-December-1981
!		Change all .SKIP directives to .BLANKs.
!		Modify routine XPASSB such that it now puts a .END LIST 0 at
!		  the end of the .RNX file.
!
!	011	REM00011	R. E. Marshall	April 1981
!		Modified prompts adding expected response and defaults.
!	  	Changed minimum lines/page from 1 to 13 to be compatible 
!		with DSR.
!
!	010	KAD00010	K. A. Dawson
!               Corrections for counting bold/underlined text properly.
!	009	KAD00009	K. A. Dawson
!	        Added support for reserve-count option (rwf).
!
!	008	KAD00008	K. A. Dawson
! 		For VERSION 1(124b) and later
!		Corrected counting logic in GET_EXT_LENGTH to handle flags
!		(__, %a%b%a...) properly.
!
!
!--

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    FILL_FIRST : NOVALUE,
    FIND_FIRST : NOVALUE,
    GET_A_LINE,
    GET_EXT_LENGTH : NOVALUE,
    FILL_SECOND : NOVALUE,
    APPEND_FIRST : NOVALUE,
    PUT_PAGE : NOVALUE,
    FILL_PAGE : NOVALUE;

!
! INCLUDE FILES:
!

LIBRARY 'NXPORT:XPORT';

!
! MACROS:
!
!The following macro, RNOPUT, is used to write a record to
!the output file.  If called with one argument, a quoted string,
!RNOPUT computes the length.  If called with two arguments RNOPUT
!assumes the first is a CH$PTR to the string, and the second is
!its length.

MACRO
    RNOPUT (S, L) =
	$XPO_PUT (IOB = NDXOOB,
		  STRING = (
				%IF %LENGTH EQL 1
				%THEN
					S
				%ELSE
					L,S
				%FI
			   ))		%;

!
! EQUATED SYMBOLS:
!

LITERAL
    COL_WIDTH = 35,				!Columns per column.
    MAX_LINES = 80;				!Number of lines per page.
!NOTE: This program can't generate a two-column index with more than 80
!	index lines per page.  Increase MAX_LINES for more.


LITERAL
    TRUE = 1,
    FALSE = 0;

!
! OWN STORAGE:
!

OWN
    ALLOWED_LINES : INITIAL (55 - 4),		!Usable lines per page.
						!Initial value is for first page.
    OTHER_PAGES : INITIAL (55),			!Default on pages other than first.
!NOTE:	55 is exactly right for a .PAGE SIZE of 58.
    FIRST_RESERVE : INITIAL (0),		!Leave this number free on first page for user-inserts.
    LINE_COUNT,					!Number of lines in first column.
    INT_LINE_LENGTH : VECTOR [MAX_LINES + 1],	!Number of characters used to represent the line.
    EXT_LINE_LENGTH : VECTOR [MAX_LINES + 1],	!Number of resulting print positions.
    INDEX_LINES : BLOCKVECTOR [MAX_LINES + 1, CH$ALLOCATION (200)];

! NOTE:  In the above, an extra line is allocated to avoid
!	 needing to subtract 1 all the time when indexing.

OWN
    STRING_PTR,					!CH$PTR to current input record.
    STRING_LENGTH;				!Length of current record.

OWN
    END_OF_FILE : INITIAL (FALSE);		!TRUE if end of file reached.

OWN
    SAVE_COUNT;					!Number of saved lines at the top.

!NOTE: SAVE_COUNT is the number of lines generated by this
!	program at the top of each page.
!
! EXTERNAL REFERENCES:
!
!

EXTERNAL
    NDXOOB : $XPO_IOB (),			!Output file.  Already opened.
    TMPIOB : $XPO_IOB (),			!Temporary file.  Contains a one-column index.
    TTIIOB : $XPO_IOB (),			!User responses.
    TTOIOB : $XPO_IOB ();			!Messages to the user.


%sbttl 'XPASSB -- Generate 2 col. index from 1 col. index'
GLOBAL ROUTINE XPASSB (TCX_EOF_STATUS): NOVALUE = 		!

!++
! FUNCTIONAL DESCRIPTION:
!
!
! FORMAL PARAMETERS:
!
!	TCX_EOF_STATUS	Value of RETURN_STATUS variable from TCX.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN
    LOCAL
	RETURN_CODE;		! Return codes from $XPO_GETs from TTIIOB

    RETURN_CODE = .TCX_EOF_STATUS;	!Pickup EOF status from calling routine

    !Get number of index lines per page.
    INCR I FROM 1 TO 3 DO		!Allow user three shots to input a valid line count.
	BEGIN
	LOCAL
	    COUNT,			!Number of index lines per page.
	    PTR;			!A working CH$PTR.

	!If previous read from $XPO_INPUT did not give an end-of-file,
	IF .RETURN_CODE NEQ XPO$_END_FILE THEN
	    BEGIN
	    !Ask user for the maximum number of index lines per page.
	    $XPO_PUT (IOB = TTOIOB,
		  STRING = ('Specify number of index lines per page: [13-80] (55)'));
	
	    !Get user's response.  An empty line means the default of 55 is ok.
	    RETURN_CODE = $XPO_GET (IOB = TTIIOB)
	    END;
	
	!Validate user's response.
	IF
	    (.RETURN_CODE EQL XPO$_END_FILE)
			OR
	    (.TTIIOB [IOB$H_STRING] EQL 0)
	THEN
	    EXITLOOP;				!User hit RETURN, so use the default.

	!User gave a response, so validate it.
	COUNT = 0;
	PTR = .TTIIOB [IOB$A_STRING];		!Copy the CH$PTR to the data.
	INCR I FROM 1 TO .TTIIOB [IOB$H_STRING] DO
	    BEGIN
	    LOCAL
		X;				!Temporary copy of current character.
	    X = CH$RCHAR_A (PTR);		!Get character.
	    !Validate this character.
	    IF
		(.X GEQ %C'0')
		AND (.X LEQ %C'9')
	    THEN
		COUNT = 10*.COUNT + (.X - %C'0') !Convert to decimal and add to current count.
	    ELSE
		BEGIN
		$XPO_PUT (IOB =TTOIOB,
			  STRING = ('Illegal character'));
		COUNT = -1;
		EXITLOOP
		END
	    END;
	
	!The scan character loop is exited with either syntactically
	!valid count, or a value of -1 for a bad character.
	!Validate the count given by the user.
	IF
	    .COUNT GTR MAX_LINES
	THEN
	    !Too many lines.
	    BEGIN
	    $XPO_PUT (IOB = TTOIOB,
		      STRING = ('Too many.  Maximum is 80.'));
	    END
	ELSE
	    IF
		.COUNT LSS 13
	    THEN
		!User's response was less then DSR's minimum of 13
		BEGIN
		$XPO_PUT (IOB = TTOIOB,
			  STRING = ('Too few.  Minimum is 13'));
		END
	    ELSE
		!This is a really valid count.
		!Update various counters.
		BEGIN
		ALLOWED_LINES = .COUNT - 4;	!This number of lines for first page.
		OTHER_PAGES = .COUNT;		!This number on all other pages.
		EXITLOOP			!This gets us out of the WHILE TRUE DO loop.
		END
	END;
!

    !Get number of lines to be reserved on the first page for user-inserts.
    INCR I FROM 1 TO 4 DO			!Allow user four shots to specify a valid reserve count.
	BEGIN
	LOCAL
	    COUNT,				!Number of reserved lines on the first page.
	    PTR;				!A working CH$PTR.

	!If previous read from $XPO_INPUT did not give an end-of-file,
	IF .RETURN_CODE NEQ XPO$_END_FILE THEN
	    BEGIN
	    !Ask user how many lines he wants left open on the first page (i.e., size of his insert)
	    $XPO_PUT (IOB = TTOIOB,
		  STRING = ('Specify reserve count for first page: [0-<lines/page-4>] (0)'));
	
	    !Get user's response.  An empty line means the default of 0 (i.e., no insert) is ok.
	    RETURN_CODE = $XPO_GET (IOB = TTIIOB)
	    END;
	
	!Validate user's response.
	IF
	    (.RETURN_CODE EQL XPO$_END_FILE)
			OR
	    (.TTIIOB [IOB$H_STRING] EQL 0)
	THEN
	    EXITLOOP;				!User hit RETURN, so use the default.

	!User gave a response, so validate it.
	COUNT = 0;
	PTR = .TTIIOB [IOB$A_STRING];		!Copy the CH$PTR to the data.
	INCR I FROM 1 TO .TTIIOB [IOB$H_STRING] DO
	    BEGIN
	    LOCAL
		X;				!Temporary copy of current character.
	    X = CH$RCHAR_A (PTR);		!Get character.
	    !Validate this character.
	    IF
		(.X GEQ %C'0')
		AND (.X LEQ %C'9')
	    THEN
		COUNT = 10*.COUNT + (.X - %C'0') !Convert to decimal and add to current count.
	    ELSE
		BEGIN
		$XPO_PUT (IOB =TTOIOB,
			  STRING = ('Illegal character'));
		COUNT = -1;
		EXITLOOP
		END
	    END;
	
	!The scan character loop is exited with either syntactically
	!valid count, or a value of -1 for a bad character.
	!Validate the count given by the user.
	IF
	    .COUNT GTR .ALLOWED_LINES
	THEN
	    !Too many lines.
	    BEGIN
	    $XPO_PUT (IOB = TTOIOB,
		      STRING = ('Too many.'));
	    END
	ELSE
	    IF
		.COUNT EQL 0
	    THEN
		!User said zero.
		BEGIN
		EXITLOOP;				!The default value holds.
		END
	    ELSE
		IF
		    .COUNT GTR 0
		THEN
		    !This is a really valid count.
		    !Now officially record the reservation count.
		    BEGIN
		    FIRST_RESERVE =  .COUNT;		!Reserve this number of lines on the first page.
		    EXITLOOP				!This gets us out of the WHILE TRUE DO loop.
		    END
	END;

    !Reduce number of lines to go on first page by the amount specified
    ALLOWED_LINES = .ALLOWED_LINES - .FIRST_RESERVE;

    !If the user specified a reserve count, increase the number of lines available
    !by 4, since otherwise a .CENTER;INDEX and a .BLANK3 would be output.
    IF
        .FIRST_RESERVE GTR 0
    THEN
        ALLOWED_LINES = .ALLOWED_LINES + 4;

    !
    !Open the file containing the one-column index.
    $XPO_OPEN (IOB = TMPIOB, OPTIONS = INPUT);
    !
    !Pass over all RUNOFF commands at the start of the file, copying
    !them unchanged into the output file.
    FIND_FIRST ();
    !
    !Output additional RUNOFF commands to cause the
    !the page number to go out at the top of the first page,
    !as well as the pages to be numbered a`la` .DO INDEX style.
    RNOPUT ('.FIRST TITLE');
    RNOPUT ('.NUMBER INDEX');
    RNOPUT ('.NUMBER PAGE 1');

    !If the user didn't want to reserve some lines for himself on the first page,
    !insert .CENTER;INDEX and  .BLANK 3 commands.  If the user did
    !say he wanted to insert something, don't insert those commands; instead,
    !prompt him for a single line that he can insert.
    !Note that the .CENTER and .BLANK3 lines have been counted or uncounted in previous coding.
    IF
	.FIRST_RESERVE EQL 0
    THEN
	!User didn't want any lines reserved.  Therefore, insert default commands.
	BEGIN
	RNOPUT ('.CENTER;INDEX');
	RNOPUT ('.BLANK3');
	END
    ELSE
	!User did want to insert something special, so allow him to input something here.
	BEGIN

	!If previous read from $XPO_INPUT did not give an end-of-file,
	IF .RETURN_CODE NEQ XPO$_END_FILE THEN
	    BEGIN
	    !First prompt him for a line of text to be included.
	    $XPO_PUT (IOB = TTOIOB,
		    STRING = ('Specify a single line of input for DSR: [Text or .REQ "<file>"]'));

	    !Now read what he wants inserted.
	    RETURN_CODE = $XPO_GET (IOB = TTIIOB)
	    END;

	!If the user said anything but <RETURN> copy it to the output file.
	IF
	    (.RETURN_CODE NEQ XPO$_END_FILE)
			AND
	    (.TTIIOB[IOB$H_STRING] GTR 0)
	THEN
	    !User specified some input
	    $XPO_PUT (IOB = NDXOOB,
		    STRING = TTIIOB[IOB$T_STRING]	);

	END;

    WHILE NOT .END_OF_FILE DO

	BEGIN
	LINE_COUNT = 0;				!First column is empty now.
	FILL_PAGE ();				!Fill the page with index entries.
	PUT_PAGE ();
	!
	!If still some more to be output, start a new page.

	IF 					!
	    NOT .END_OF_FILE
	THEN
	    $XPO_PUT (IOB = NDXOOB, STRING = ('.PAGE'));

	!
	!For all pages after the first page, the number of allowed
	!lines is the same as the maximum number of lines.
	ALLOWED_LINES = .OTHER_PAGES;		!Set number of allowed lines.
	END;

    $XPO_PUT (IOB = NDXOOB, STRING = ('.END LIST 0'));

    END;					!End of XPASSB


%sbttl 'FIND_FIRST -- Copy preamble from .TMP to .RNX'
ROUTINE FIND_FIRST : NOVALUE = 			!

!++
! FUNCTIONAL DESCRIPTION:
!
!	Copies preamble from .TMP file to .RNX file.  Stops when it finds
!	a record starting with .! and doesn't copy that record.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    WHILE TRUE DO
	BEGIN
	!
	!Get a record from the one-column index.
	$XPO_GET (IOB = TMPIOB);
	!
	!The end of the RUNOFF commands at the start of the one-column
	!index is indicated by the occurrence of a comment (.!).  Find it.

	IF 					!
	    CH$EQL (MIN (2, .TMPIOB [IOB$H_STRING]), .TMPIOB [IOB$A_STRING], 2, CH$PTR (UPLIT ('.!')))
	THEN
	    RETURN
	ELSE
	!Copy RUNOFF commands to the output file.
	    $XPO_PUT (IOB = NDXOOB, STRING = TMPIOB [IOB$T_STRING]);	!Write the page out.

	END

    END;					!End of FIND_FIRST


%sbttl 'FILL_PAGE -- build 2 col. index page'
GLOBAL ROUTINE FILL_PAGE : NOVALUE = 		!

!++
! FUNCTIONAL DESCRIPTION:
!
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN
    FILL_FIRST ();				!Fill first column
    FILL_SECOND ();				!Fill second column
    END;					!End of FILL_PAGE


%sbttl 'FILL_FIRST -- build left col. of 2 col. index'
GLOBAL ROUTINE FILL_FIRST : NOVALUE = 		!

!++
! FUNCTIONAL DESCRIPTION:
!
!	Fill first (i.e., left) column of a page of the index.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	L_PTR;

    WHILE (( NOT .END_OF_FILE) AND (.LINE_COUNT LSS .ALLOWED_LINES)) DO
	BEGIN

	IF 					!
	    .LINE_COUNT EQL 0			!Top of first column??
	THEN
	!
	!At the top of the first column, be sure what's going
	!out is not just a blank line.

	    WHILE TRUE DO
		BEGIN
		!
		!Read a one-column line.
		END_OF_FILE = GET_A_LINE ();

		IF 				!
		    .END_OF_FILE
		THEN
		    RETURN
		ELSE
		!
		!If the line is not blank, then exit this loop.
		!That allows this line to go out into the first column.
		!Otherwise, continue in this loop, skipping blank
		!lines.
		!NOTE: The one-column index probably won't have
		!	   sequences of blank lines: they will probably
		!	   occur singly.  But this code however handles the
		!	   general case.

		    IF 				!
			CH$NEQ (1, CH$PTR (UPLIT (' ')), .STRING_LENGTH, .STRING_PTR, %C' ')
		    THEN
			EXITLOOP

		END

	ELSE
	!
	!Not the top of the first column, so take whatever comes.
	    END_OF_FILE = GET_A_LINE ();

	IF NOT .END_OF_FILE
	THEN
	    BEGIN
	    !Count new line.
	    LINE_COUNT = .LINE_COUNT + 1;
	    !Set up internal length.
	    INT_LINE_LENGTH [.LINE_COUNT] = .STRING_LENGTH;
	    !Copy string from input buffer into a more permanent location.
	    L_PTR = CH$PTR (INDEX_LINES [.LINE_COUNT, 0, 0, 0, 0]);
	    CH$MOVE (.INT_LINE_LENGTH [.LINE_COUNT], .STRING_PTR, .L_PTR);
	    !Count width of line, and adjust accordingly.
	    GET_EXT_LENGTH (.LINE_COUNT);
	    END;

	END;

    END;					!End of FILL_FIRST


%sbttl 'GET_A_LINE -- get index text -- copy all others'
GLOBAL ROUTINE GET_A_LINE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Reads a line from the one-column index.  If the
!	line is just text, then that line is returned.
!	Records containing RUNOFF commands (except .BLANK and .!)
!	get copied 'as is' to the output file.
!	If .BLANK is found, a blank line is substituted.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	STATUS;

    WHILE TRUE DO
	BEGIN
	!
	!Get a line from the one-column index.
	STATUS = $XPO_GET (IOB = TMPIOB) NEQ XPO$_NORMAL;

	IF 					!
	    .STATUS
	THEN
	    RETURN .STATUS
	ELSE
	!
	!The GET was successful, so take a look at what's been read.
	    BEGIN
	    !
	    !Assume that the caller will want this record, and set
	    !up some global information telling him about it.
	    STRING_PTR = .TMPIOB [IOB$A_STRING];	!CH$PTR to contents.
	    STRING_LENGTH = .TMPIOB [IOB$H_STRING];	!Length of record.

	    IF 					!
		(CH$RCHAR (.STRING_PTR) NEQ %C'.')
	    THEN
	    !
	    !Record does not start with a '.', so return
	    !with the global information set up.
		BEGIN
		!Throw away trailing spaces so they don't give
		!any trouble later.  If they don't get thrown away
		!they may interfere with proper padding of the
		!first column.  These trailing spaces could come from
		!a variety of sources, and they shouldn't be here.
		!But it's easiest to remove them here rather than look
		!through hundreds of lines of code.

		LOCAL
		    L_PTR;

		L_PTR = CH$PLUS (.STRING_PTR, .STRING_LENGTH - 1);	!Point to last character.

		DECR I FROM .STRING_LENGTH TO 1 DO
		    BEGIN
		    !Decrease the line length as long as spaces are found.

		    IF 				!
			CH$RCHAR (.L_PTR) EQL %C' '
		    THEN
			BEGIN
			STRING_LENGTH = .STRING_LENGTH - 1;
			L_PTR = CH$PLUS (.L_PTR, -1);	!Move left a character.
			END
		    ELSE
			EXITLOOP;

		    END;

		RETURN FALSE
		END
	    ELSE
	    !
	    !Record starts with a '.', so it's a RUNOFF command.
	    !Analyze the record a bit.
		BEGIN

		IF 				!
		    CH$EQL (.STRING_LENGTH, .STRING_PTR, 6, CH$PTR (UPLIT ('.BLANK')))
		THEN
		!
		!The record is '.BLANK'.  Replace it with a blank
		!line, and give that blank line to the caller.
		    BEGIN
		    STRING_PTR = CH$PTR (UPLIT ('    '));
		    STRING_LENGTH = 4;
		    RETURN FALSE
		    END
		ELSE
		!
		!The record contains some other RUNOFF command.
		!Copy it directly to the output file unless it's a comment;  then continue
		!looking for something suitable to give to the caller.
		    IF
			CH$RCHAR( CH$PLUS(.STRING_PTR,1) ) NEQ %C'!'
		    THEN
			$XPO_PUT (IOB = NDXOOB, STRING = (.STRING_LENGTH, .STRING_PTR));

		END

	    END;

	END

    END;					!End of GET_A_LINE


%sbttl 'GET_EXT_LENGTH -- calculates # of printable characters'
GLOBAL ROUTINE GET_EXT_LENGTH (WHICH_LINE) : NOVALUE = 	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	Determines how many print positions (EXTernal length)
!	are represented by the record.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	L_PTR,
	XCHAR,
	HOLD_FLAG;

    L_PTR = CH$PTR (INDEX_LINES [.WHICH_LINE, 0, 0, 0, 0]);
    EXT_LINE_LENGTH [.WHICH_LINE] = 0;

    INCR I FROM 1 TO .INT_LINE_LENGTH [.WHICH_LINE] DO
	BEGIN
	XCHAR = CH$RCHAR_A (L_PTR);
	!
	!RUNOFF flag characters don't count, but what they modify
	!does.

	SELECTONE TRUE OF
	SET

	[(.XCHAR EQL %C'&')			!<UNDERLINE flag>
	  OR (.XCHAR EQL %C'*')] :		! or <BOLD flag>

	    !Just skip the flag. The emphasized character gets counted
	    !on the next iteration.
	    !I = .I + 1;
	    0;


	[(.XCHAR EQL %C'_')			!<ACCEPT flag> or
	 OR (.XCHAR EQL %C'%')] :		!<OVERSTRIKE> flag

	    !Skip the flag, since it won't appear in the Runoff output.
	    BEGIN
	    I = .I + 1;				!Bump input counter.

	    !Save the flag character.
	    HOLD_FLAG = .XCHAR;

	    !Get the character that will really be output.
	    XCHAR = CH$RCHAR_A (L_PTR);

	    IF 					!Printable? Count character only
		(.HOLD_FLAG EQL %C'_')		! if quoted, not if overstruck.
		AND (.XCHAR GEQ %C' ')		!Printable?
		AND (.XCHAR LSS %O'176')	!
	    THEN
	    !Printables count as one.
		EXT_LINE_LENGTH [.WHICH_LINE] = .EXT_LINE_LENGTH [.WHICH_LINE] + 1
	    ELSE
		IF 				!
		    (.HOLD_FLAG EQL %C'_')
		    AND (.XCHAR EQL %O'10')	!Backspace
		THEN
		    EXT_LINE_LENGTH [.WHICH_LINE] = .EXT_LINE_LENGTH [.WHICH_LINE] - 1
	    END;



	[OTHERWISE] :
	    !
	    !Character is not modified by a flag.  Therefore it is
	    !printable and counts as one.
	    EXT_LINE_LENGTH [.WHICH_LINE] = .EXT_LINE_LENGTH [.WHICH_LINE] + 1;

	TES;

	END;

    !If line is too wide, warn the user.

    IF 						!
	.EXT_LINE_LENGTH [.WHICH_LINE] GTR COL_WIDTH
    THEN
	BEGIN
	$XPO_PUT (IOB = TTOIOB, STRING = (41, CH$PTR (UPLIT ('The following indexing entry is too wide:'))));
	$XPO_PUT (IOB = TTOIOB,
	    STRING = (.INT_LINE_LENGTH [.WHICH_LINE], CH$PTR (INDEX_LINES [.WHICH_LINE,
		    0, 0, 0, 0])));
	END;

    !Extend line now to be exactly COL_WIDTH characters, by padding it with
    !spaces.
    !Note that the output of the previous analysis was an updated
    !L_PTR which points just past the last character.

    INCR I FROM 1 TO (COL_WIDTH - .EXT_LINE_LENGTH [.WHICH_LINE]) DO
	BEGIN
	CH$WCHAR_A (%C' ', L_PTR);
	EXT_LINE_LENGTH [.WHICH_LINE] = .EXT_LINE_LENGTH [.WHICH_LINE] + 1;
	INT_LINE_LENGTH [.WHICH_LINE] = .INT_LINE_LENGTH [.WHICH_LINE] + 1;
	END;

    END;					!End of GET_EXT_LENGTH


%sbttl 'FILL_SECOND -- Fills the right colomn of the index'
GLOBAL ROUTINE FILL_SECOND : NOVALUE = 		!

!++
! FUNCTIONAL DESCRIPTION:
!
!	Fills the second (i.e., right) column of a page of
!	the index.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    INCR I FROM 1 TO .LINE_COUNT DO
	BEGIN
	END_OF_FILE = GET_A_LINE ();

	IF 					!
	    .END_OF_FILE
	THEN
	    EXITLOOP
	ELSE
	!
	!Make sure the first line of the second column is
	!not a blank line.

	    IF 					!
		(.I EQL 1)
	    THEN

		WHILE TRUE DO
		    BEGIN

		    IF 				!
			CH$NEQ (1, CH$PTR (UPLIT (' ')), 	!
			    .STRING_LENGTH, .STRING_PTR, %C' ')
		    THEN
			EXITLOOP
		    ELSE
		    !
		    !The line just looked at is blank.  Read
		    !another line and try it.
			BEGIN
			END_OF_FILE = GET_A_LINE ();

			IF 			!
			    .END_OF_FILE
			THEN
			    RETURN;

			END

		    END;

	APPEND_FIRST (.STRING_LENGTH, .STRING_PTR, .I);
	END;

    END;					!End of FILL_SECOND


%sbttl 'APPEND_FIRST -- Adds text to a line'
GLOBAL ROUTINE APPEND_FIRST (COUNT, PTR, WHICH_LINE) : NOVALUE = 	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	Appends a given line to the right of another line.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	L_PTR;

    L_PTR = CH$PLUS (CH$PTR (INDEX_LINES [.WHICH_LINE, 0, 0, 0, 0]), .INT_LINE_LENGTH [.WHICH_LINE]);
    CH$MOVE (.COUNT, .PTR, .L_PTR);
    !Update size of the extended line.
    INT_LINE_LENGTH [.WHICH_LINE] = .INT_LINE_LENGTH [.WHICH_LINE] + .COUNT;
    END;					!End of APPEND_FIRST


%sbttl 'PUT_PAGE -- O/P completed 2 col. page'
GLOBAL ROUTINE PUT_PAGE : NOVALUE = 		!

!++
! FUNCTIONAL DESCRIPTION:
!
!	Writes a completed page into the output file.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    INCR I FROM 1 TO .LINE_COUNT DO
	BEGIN
	$XPO_PUT (IOB = NDXOOB, STRING = (.INT_LINE_LENGTH [.I], CH$PTR (INDEX_LINES [.I, 0, 0, 0, 0])));
	END;

    END;					!End of PUT_PAGE

END						!End of module

ELUDOM
