MODULE RSDERO (					!
		IDENT = 'V03-000'
%BLISS32[,
	ADDRESSING_MODE(EXTERNAL=LONG_RELATIVE,NONEXTERNAL=LONG_RELATIVE)
	]
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY: RUNOFF document formatter
!
! ABSTRACT: Residual error messages.  Issues error messages for various
!	    error conditions for which no error messages have been
!	    issued.
!
!	    Also contains error detection and error message routines
!	    that are called from more than one location.
!
! ENVIRONMENT: Transportable
!
! AUTHOR: R.W.Friday	 CREATION DATE: June, 1978
!
! MODIFIED BY:
!
!	002	REM00002	Ray Marshall	16-October-1981
!		Fixed bug where the MRC error didn't report the number of
!		  unreported MRG errors.
!
!--

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    NEGIND : NOVALUE,
    PNTBAC : NOVALUE,
    TSTBLK : NOVALUE,
    TSTCND : NOVALUE,
    TSTTFE : NOVALUE;

!
! INCLUDE FILES:
!

REQUIRE 'REQ:FRMSTK.REQ';

REQUIRE 'REQ:GCA.REQ';

REQUIRE 'REQ:IFSTK.REQ';

REQUIRE 'REQ:IRAC.REQ';

!
! MACROS:
!
!
! EQUATED SYMBOLS:
!
!
! OWN STORAGE:
!
!
! EXTERNAL REFERENCES:
!

EXTERNAL
    GCA : GCA_DEFINITION,
    IFSTK : IFSTACK,
    IRAC : IRAC_DEFINITION;

EXTERNAL
    FRMSTD,
    FRMSTK : FORM_STACK;

EXTERNAL LITERAL 				!Error messages
    RNFBAK,
    RNFMEI,
    RNFMRC,
    RNFMRG,
    RNFNIA,
    RNFNIC,
    RNFSKC,
    RNFTFE;

EXTERNAL ROUTINE
    ERM,
    ERML,
    ERMN,
    STKFRM;


GLOBAL ROUTINE TSTBLK (DEPTH) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION
!
!	This routine checks to see if FRMSTK is ok: i.e., certain open
!	.NOTE and .LIST commands have been closed.  If there are any
!	unclosed commands it issues an error message and pops the stack.
!
! FORMAL PARAMETERS:
!
!	DEPTH specifies the maximum allowed depth of .REQUIRE commands.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    IF 						!
	.FRMSTD EQL 0
    THEN
	RETURN;					!No unclosed lists, notes, or literals.

    IF 						!
	.DEPTH GTR .FRMSTK [.FRMSTD, FRMSTK_REQ_D]
    THEN
	RETURN;					!Unclosed lists or notes, but in files still open.

    ERM (RNFTFE, 0, 0);				!There are unclosed lists/notes to be reported.
    !Now point the user back to those commands that have not been closed

    WHILE ((.FRMSTD GTR 0) AND (.DEPTH LEQ .FRMSTK [.FRMSTD, FRMSTK_REQ_D])) DO
	BEGIN
	PNTBAC ();
	STKFRM (-1);				!Unstack one entry, regardless of identity.
	END;

    END;					!End of TSTBLK


GLOBAL ROUTINE TSTCND (DEPTH) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION
!
!
! FORMAL PARAMETERS:
!
!	DEPTH specifies the maximum allowed depth of .REQUIRE commands.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN
    !Check for missing .ENDIF commands.  This is temporary coding. In a
    !later version this code should point back to the opening commands,
    !like the code above does for .LIST and .NOTE commands.

    IF 						!
	.IFSTK [0, IFSTK_DEPTH] EQL 0		!
    THEN
	RETURN;					!There are no missing .ENDIF commands.

    IF 						!
	.DEPTH EQL 0
    THEN
	BEGIN
	!Missing .ENDIF commands, and end of file.
	ERML (RNFMEI);
	END
    ELSE
	IF					!
	    .IFSTK [.IFSTK [0, IFSTK_DEPTH], IFSTK_REQ_D] GEQ .DEPTH
	THEN
	BEGIN
	!Missing .ENDIF commands detected when unstacking .REQUIRE files
	ERML (RNFSKC);
	END;

    END;					!End of TSTCND


GLOBAL ROUTINE TSTTFE (DEPTH) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION
!
!	This routine checks to see if FRMSTK is ok: i.e., certain open
!	.NOTE and .LIST commands have been closed.  If there are any
!	unclosed commands it issues an error message and pops the stack.
!
! FORMAL PARAMETERS:
!
!	DEPTH specifies the maximum allowed depth of .REQUIRE commands.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN
    TSTBLK (.DEPTH);				!Check for unclosed lists, notes, and literals.
    TSTCND (.DEPTH);				!Check for unclosed ifs and ifnots.
    END;					!End of TSTTFE


GLOBAL ROUTINE PNTBAC : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION
!
!	This routine saves the input file line/page information.
!	It then substitutes information from FRMSTK for that information.
!	Then ERM is called to output a message indicating where to look
!	in the input file for the command that made the stack entry.
!	BUT ERM does not have enough flexibility to accept all that
!	information as parameters.  However, it can pick it up from
!	IRAC, which it does.  In other words, this routine fakes out
!	ERM a bit.
!
!	After ERM returns, the original information is restored.
    BEGIN

    LOCAL
	HOLD_ISEQN,
	HOLD_PAGE;

    HOLD_PAGE = .IRAC_IPAGEN;
    HOLD_ISEQN = .IRAC_ISEQN;
    IRAC_IPAGEN = .FRMSTK [.FRMSTD, FRMSTK_IPAGEN];
    IRAC_ISEQN = .FRMSTK [.FRMSTD, FRMSTK_ISEQN];
    ERM (RNFBAK, .FRMSTK [.FRMSTD, FRMSTK_FSPECP], .FRMSTK [.FRMSTD, FRMSTK_FSPECC]);
    IRAC_IPAGEN = .HOLD_PAGE;
    IRAC_ISEQN = .HOLD_ISEQN;
    END;					!End of PNTBAC


GLOBAL ROUTINE NEGIND : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	NEGIND keeps track of attempted indents past the left side
!	of the page.  To avoid issuing so many error
!	messages that the user would be annoyed, it only issues
!	an error message for the first such attempt.  Other violations
!	are simply counted; the summary count is output by REMNEG later.
!
! FORMAL PARAMETERS;
!
!	NONE
!
! IMPLICIT INPUTS
!
!	NONE
!
! IMPLICIT OUTPUTS
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    IF 						!
	.GCA_NIA EQL 0
    THEN
	BEGIN
	ERML (RNFNIA);
	END;

    GCA_NIA = .GCA_NIA + 1;
    END;					!End of NEGIND


GLOBAL ROUTINE REMNEG : NOVALUE = 		!

!++
! FUNCTIONAL DESCRIPTION:
!
!	Issues an error message indicating how many negative
! 	indents have been detected.  Then resets the count to zero.
!
!	Used together with NEGIND.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    IF 						!
	.GCA_NIA GTR 1
    THEN
	BEGIN					!1 or zero means all accounted for.
	ERMN (RNFNIC, .GCA_NIA - 1);		!Subtract off reported negative indent
	END;

    GCA_NIA = 0;				!This starts the counting over again.
    END;					!End of REMNEG


GLOBAL ROUTINE XMARG : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	XMARG keeps track of attempted margin crossings (i.e., left
!	margin exceeds right margin).  To avoid issuing so many
!	messages that the user would be annoyed, it only issues
!	an error message for the first such attempt.  Other violations
!	are simply counted; the summary count is output by REMMRG later.
!
! FORMAL PARAMETERS;
!
!	NONE
!
! IMPLICIT INPUTS
!
!	NONE
!
! IMPLICIT OUTPUTS
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    IF 						!
	.GCA_XMARG EQL 0
    THEN
	BEGIN
	ERML (RNFMRG);
	END;

    GCA_XMARG = .GCA_XMARG + 1;
    END;					!End of XMARG


GLOBAL ROUTINE REMMRG : NOVALUE = 		!

!++
! FUNCTIONAL DESCRIPTION:
!
!	Issues an error message indicating how many crossed
! 	margins have been detected.  Then resets the count to zero.
!
!	Used together with XMARG.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    IF 						!
	.GCA_XMARG GTR 1
    THEN
	BEGIN					!1 or zero means all accounted for.
	ERMN (RNFMRC, .GCA_XMARG - 1);	!Subtract off reported negative indent
	END;

    GCA_XMARG = 0;				!This starts the counting over again.
    END;					!End of REMMRG

END						!End of module

ELUDOM
