MODULE LITOOO (					!
		IDENT = 'V03-000'
%BLISS32[,
	ADDRESSING_MODE(EXTERNAL=LONG_RELATIVE,NONEXTERNAL=LONG_RELATIVE)
	]
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY: RUNOFF document formatter
!
! ABSTRACT: Processes the .LITERAL and .END LITERAL commands, as well
!		as the text within the literal.
!
!
! ENVIRONMENT: Transportable
!
! AUTHOR: R.W.Friday	 CREATION DATE: June, 1978
!
! MODIFIED BY:
!
!--

!
! TABLE OF CONTENTS:
!
!
! INCLUDE FILES:
!

REQUIRE 'REQ:BOOL.REQ';

REQUIRE 'REQ:FSPACK.REQ';

REQUIRE 'REQ:GCA.REQ';

REQUIRE 'REQ:NUMPRM.REQ';

REQUIRE 'REQ:RUNHAN.REQ';

REQUIRE 'REQ:SCA.REQ';

!
! MACROS:
!
!
! EQUATED SYMBOLS:
!
!
! OWN STORAGE:
!
!
! EXTERNAL REFERENCES:
!

EXTERNAL
    GCA : GCA_DEFINITION,
    IRA : FIXED_STRING,
    NUMPRM : NUMPRM_DEFINE,
    SCA : SCA_DEFINITION,
    SCALIT : VECTOR [SCA_CASE_SIZE];

EXTERNAL LITERAL 				! Error messages
    RNFELD,
    RNFINM,
    RNFLDE;

EXTERNAL ROUTINE
    ERMA,
    ERMB,
    OFT,
    STKFRM;


GLOBAL ROUTINE LIT (HANDLER_CODE) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	See the ABSTRACT, above.
!
! FORMAL PARAMETERS:
!
!	If HANDLER_CODE is zero, process text instead of commands.
!
! IMPLICIT INPUTS:
!
!	NUMPRM contains a number, as processed by GETNUM.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    SELECTONE .HANDLER_CODE OF
	SET

	[0] :
	    BEGIN				!Count text inside a literal.

	    LOCAL
		KOUNT;

	    IF 					!
		.GCA_CLIT
	    THEN

		IF 				!
		    .GCA_LIT_COUNT LEQ 0
		THEN
		    BEGIN			!Literal count is wrong (too big)
		    ERMB (RNFLDE, FALSE);
		    GCA_LITERAL = FALSE;	!Turn off literal mode
		    STKFRM (-1);		!Restore previous settings
		    OFT (.GCA_LIT_FLAG, 0);	!Restore flag status

		    INCR I FROM 0 TO SCA_CASE_SIZE - 1 DO
			SCA [.I] = .SCALIT [.I];	!Restore case rules.

		    END
		ELSE
		    GCA_LIT_COUNT = .GCA_LIT_COUNT - 1;

	    END;

	[H_LITERAL] :
	    BEGIN
	    GCA_LITERAL = TRUE;			!Turn on literal mode.
	    GCA_CLIT = FALSE;			!Assume not a counted literal
	    GCA_LIT_COUNT = 0;
	    !Remember current flag recognition status.
	    GCA_LIT_FLAG = .GCA_FLAG_CMD;
	    !Turn off flags
	    !Save current status
	    STKFRM (0);
	    OFT (H_NO_FLAGS_ALL, 0);
	    !Turn off filling and justifying
	    SCA_FILL = FALSE;
	    SCA_JUSTIFY = FALSE;
	    SCA_RM = 150;
	    SCA_KER = TRUE;

	    INCR I FROM 0 TO SCA_CASE_SIZE - 1 DO
		BEGIN
		SCALIT [.I] = .SCA [.I];	!Save case rules.
		SCA [.I] = 0;			!Set no translation.
		END;

	    !Validate the count, if given.  If the count
	    !is erroneous, the intended counted literal is
	    !handled like an uncounted literal instead.

	    IF 					!
		NOT .NUM_RESULT
	    THEN
		RETURN;

	    IF 					!
		.NUM_LENGTH NEQ 0
	    THEN
		BEGIN				!It's a counted literal

		IF 				!
		    .NUM_VALUE LEQ 0
		THEN
		    BEGIN
		    ERMA (RNFINM, FALSE);
		    RETURN;
		    END;

		GCA_CLIT = TRUE;
		GCA_LIT_COUNT = .NUM_VALUE;
		END;

	    END;

	[H_END_LITERAL] :
	    BEGIN

	    IF 					!
		NOT .GCA_LITERAL
	    THEN
		BEGIN				!.END LITERAL out of context

		IF 				!
		    .GCA_CLIT
		THEN
		    BEGIN			!Left over from mis-counted literal
		    GCA_CLIT = FALSE;
		    RETURN;
		    END;

		ERMA (RNFELD, FALSE);
		RETURN;
		END
	    ELSE
		BEGIN				!.END LITERAL in proper context
		GCA_LITERAL = FALSE;		!Turn off literal mode.
		!Restore flag rules, filling, and justifying
		OFT (.GCA_LIT_FLAG, 0);
		!Restore previous status
		STKFRM (-1);

		INCR I FROM 0 TO SCA_CASE_SIZE - 1 DO
		    SCA [.I] = .SCALIT [.I];	!Restore case rules.

		END;

	    END;
	TES;

    END;					!End of LIT

END						!End of module

ELUDOM
