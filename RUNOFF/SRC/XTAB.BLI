MODULE XTAB (					!
		IDENT = 'V03-000'
%BLISS32[,
	ADDRESSING_MODE(EXTERNAL=LONG_RELATIVE,NONEXTERNAL=LONG_RELATIVE)
	]
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY: RUNOFF document formatter
!
! ABSTRACT: Expands a tab, according to tab stop settings.
!
!
! ENVIRONMENT: Transportable
!
! AUTHOR: R.W.Friday	 CREATION DATE: July, 1978
!
! MODIFIED BY: K. A. Dawson, 21_OCT-1980
!
!	003	KAD00003	K. A. Dawson
!		For VERSION 1.124f
!   	        Fixed bug that caused tabs not to expand properly past the
!	        page-size in a .literal.
!	        Fixed a bug that ignored a tab if it started a line after a
!	        negative indent.
!--

!
! TABLE OF CONTENTS:
!
!
! INCLUDE FILES:
!

REQUIRE 'REQ:BOOL.REQ';

REQUIRE 'REQ:CLIST.REQ';

REQUIRE 'REQ:FSPACK.REQ';

REQUIRE 'REQ:GCA.REQ';

REQUIRE 'REQ:SCA.REQ';

REQUIRE 'REQ:TSF.REQ';

!
! MACROS:
!
!
! EQUATED SYMBOLS:
!

EXTERNAL LITERAL
    RINTES : UNSIGNED (8);

!
! OWN STORAGE:
!
!
! EXTERNAL REFERENCES:
!

EXTERNAL
    GCA : GCA_DEFINITION,
    MRA : REF FIXED_STRING,
    SCA : SCA_DEFINITION,
    TSF : TSF_DEFINITION,
    TTABLE : COUNTED_LIST;

EXTERNAL ROUTINE
    ENDCHR,
    ENDWRD,
    FCIMRA,
    REMNEG;


GLOBAL ROUTINE XTAB =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Expands tabs.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Returns TRUE if the tab could be expanded, otherwise FALSE.
!
! SIDE EFFECTS:
!
!	Generally causes a reorganization of TSF, MRA, and SCA.
!
!--

    BEGIN

    LOCAL
	CURRENT_EXT_HL,
	D_PTR,
	FILL_COUNT,
	HOLD_CNBITS,
	S_PTR;

    !Compute current length of line.  When doing this count trailing spaces,
    !etc.  If the SCA_rent word is not yet finished then SCA_WRD_CPEND will
    !count as a spacing character, otherwise as a non-spacer, since it will
    !contain RINTES.  Also, detect the fact that the tab may be the very
    !first character to be generated on the output line.

	!If a negative indent is pending, do not cancel it. Instead, subtract
	!it from the left margin before beginning the tab-expansion check.
	!(V1.124f, 21-OCT-1980, kad.)
	!
    IF 						!
	(.TSF_EXT_HL EQL 0)			!
	AND .SCA_FC
    THEN
	BEGIN
	!Any positive pending indentation is canceled because tabs are,i by
	!definition, relative to the left margin and do not include indentation.
	IF 
	    .SCA_INDENT GTR 0
	 THEN 
	    SCA_INDENT = 0;
	!Subtract the indent if it is negative.
	CURRENT_EXT_HL = .SCA_LM + .SCA_INDENT;
	END
    ELSE
	CURRENT_EXT_HL = .TSF_EXT_HL;

    IF 						!
	.CURRENT_EXT_HL LSS 0
    THEN
	BEGIN
	REMNEG ();				!Attempted negative indent.
	CURRENT_EXT_HL = 0;
	END;

    CURRENT_EXT_HL = .CURRENT_EXT_HL + .SCA_WRD_EXT_L + .SCA_WRD_LST_SP;

    IF 						!
	.SCA_WRD_CPEND GEQ %C' '
    THEN
	CURRENT_EXT_HL = .CURRENT_EXT_HL + 1;

    INCR I FROM 1 TO .TTABLE [CL_INDEX] DO
	BEGIN

	IF 					!
	    .TTABLE [.I] GTR .CURRENT_EXT_HL
	THEN
	    BEGIN				!found a suitable tab setting
	    !Compute number of spaces needed to be added to line.
	    !Do not allow user to tab past the right edge of his page.
	    !If the user is in a literal, the right margin will be larger
	    !than the page-width. In this case, allow him to expand tabs out
	    !to the right margin. (V1.124f, 21-OCT-1980, kad.)
	    IF 					!
		.TTABLE [.I] GEQ
		  (IF .GCA_LITERAL
		    THEN
		  .SCA_RM
		    ELSE
		  .GCA_LWIDTH)
	    THEN
		RETURN FALSE
	    ELSE
		FILL_COUNT = .TTABLE [.I] - .CURRENT_EXT_HL;

	    !At this point we are certain that this tab can be expanded.
	    !All spacing characters have been counted.  Now force the
	    !current word (if there is one) to be ended.  That resets lots
	    !of counters, and in particular, forces the final pending
	    !character into MRA.
	    ENDWRD (FALSE, FALSE, FALSE);	!Anticipate no spaces or justification.
	    !Now remove all justification marks from TSF.
	    !This is done by scanning the entire MRA, where the line is
	    !being built up.
	    S_PTR = .FS_START (MRA);
	    D_PTR = .S_PTR;

	    INCR I FROM 1 TO .TSF_INT_HL + .TSF_INT_VL DO
		BEGIN

		LOCAL
		    X,
		    Y;

!
		X = CH$RCHAR_A (S_PTR);

		IF 				!
		    .X EQL RINTES
		THEN
		    BEGIN
		    !See if this is a justification mark.
		    Y = CH$RCHAR_A (S_PTR);

		    IF 				!
			.Y EQL %C'J'
		    THEN
			BEGIN			!Throw away the justification mark
			S_PTR = CH$PLUS (.S_PTR, 1);
			I = .I + 2;
			END
		    ELSE
			BEGIN			!Save this escape sequence
			CH$WCHAR_A (RINTES, D_PTR);
			CH$WCHAR_A (.Y, D_PTR);
			CH$WCHAR_A (CH$RCHAR_A (S_PTR), D_PTR);
			I = .I + 2;
			END

		    END
		ELSE
		    CH$WCHAR_A (.X, D_PTR);	!Move a "normal" character

		END;				!end of compression

!
	    !Update TSF and SCA
	    TSF_JUS_CNT = 0;
	    SCA_WRD_PNTR = .D_PTR;
	    !Update MRA information
	    FS_NEXT (MRA) = .D_PTR;
	    FS_LENGTH (MRA) = CH$DIFF (.D_PTR, .FS_START (MRA));
	    TSF_INT_HL = .FS_LENGTH (MRA) - .TSF_INT_VL;
!
	    !Now put the required number of spaces onto the line.
	    !The spaces are inserted in such a way that they become
	    !part of the word that will later be built.  The assumption
	    !being made is that the next word will fit on the
	    !line being put together.  If it does not, then the
	    !word with the expanded tab prefixed to it will
	    !appear on the following line.  However, this will
	    !probably not happen, since RUNOFF users will use tabs
	    !to set up columns, and will have counted carefully.
	    !Another reason for going through the standard character
	    !processing is that the tab may be the first thing to
	    !be output.  In that case, it is important that
	    !certain information that appears before the first
	    !character be added in proper sequence.
	    !When outputting spaces, turn off underlining, bolding,
	    !etc.  This avoids the problem of having
	    !input such as ^&A     B\& generate A_____B.
	    HOLD_CNBITS = .SCA_WRD_CNBITS;
	    SCA_WRD_ACNBITS = FALSE;

	    INCR I FROM 1 TO .FILL_COUNT DO
		BEGIN
		SCA_WRD_CNBITS = FALSE;
		ENDCHR (%C' ');
		END;

	    SCA_WRD_CNBITS = .HOLD_CNBITS;
	    RETURN TRUE;			!Successful tab expansion.
	    END;				!End of processing of an applicable tab

	END;

    RETURN FALSE;				!Falling through means no suitable tab setting was found.
    END;					!End of XTAB

END						!End of module

ELUDOM
