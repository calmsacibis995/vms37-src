%TITLE 'Binary index formatter -- first pass'
MODULE XPASAO (	!
		IDENT = 'V03-000'
%BLISS32[,
	ADDRESSING_MODE(EXTERNAL=LONG_RELATIVE,NONEXTERNAL=LONG_RELATIVE)
	]
		) =
BEGIN
!
!
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY:
!
!	RUNOFF Binary Index formatter, first pass.
!
! ABSTRACT:
!
!
! ENVIRONMENT:
!
! AUTHOR: D. Knight	, CREATION DATE: July 1978
!
!	MODIFIED BY:
!
!	009	REM00009	Ray Marshall	3-December-1981
!		Change output of .SKIP directives in the .RNT file to .BLANK
!		  directives.  This is to be compatible with "Doc-Prep"
!		  conventions.
!		Changed preamble to put out a .LIST as the first directive.
!		  This is an attempt to preserve the user's context as best we
!		  can at this time.
!
!	008	REM00008	Ray Marshall	15-September-1981
!		The module XPASSA in divided into two modules.  The new one
!		  is PREAMBLE_WRITE and just writes the preamble into the
!		  temporary file which will contain the single column index.
!		  This way, TCX can always get the preamble written, but if
!		  there aren't any index entries, it doesn't call XPASSA.
!		  This fixes a bug where an empty or ASCII file would cause
!		  an access violation and crash TCX.
!
!	007	RWF00007	R. W. Friday
!		XPASAO was originally implemented as XPRT by
!		Dave Knight, for use in RUNOFF.  It was
!		extensively modified by R. W. Friday
!		into its present form.  The original form still
!		exists in RUNOFF.
!
!	006	KAD000006	K. A. Dawson	July 1980
!		For VERSION 1(34) [when released, 1(35)] of TCX.
!--

%SBTTL 'Module level declarations'
!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
	PREAMBLE_WRITE:	NOVALUE,	!Write preamble into temp file
	XPASSA:		NOVALUE,	!Print index
	GET_DATA,			!Return an index entry.
	GET_ENTRY,			!Get entry from storage
	FILL_LINE:	NOVALUE,	!Pack the print line
	INS_LINE_NO:	NOVALUE;	!Insert line number(s) in print line
!
! INCLUDE FILES:
!
REQUIRE 'REQ:BOOL';

REQUIRE 'REQ:INDEX';

REQUIRE 'REQ:NBITS';

REQUIRE 'REQ:PAGEN';

LIBRARY 'NXPORT:XPORT';


!
! MACROS:
!

MACRO
    REPEAT=
	WHILE 1 DO %;


FORWARD ROUTINE
	CQCHAR_C:	NOVALUE,	!Special character output routine.
	OUT_LP:		NOVALUE;	!Output LEVEL or PAGES directive

MACRO
    !Don't quote the character, and it doesn't count visually.
    NQCHAR_NC (X) =
	BEGIN
	CH$WCHAR_A(X, LINE_POINTER);
	INT_LINE_LENGTH = .INT_LINE_LENGTH + 1;
	END	%,

    !Don't quote the character, and it does count visually.
    NQCHAR_C (X) =
	BEGIN
	NQCHAR_NC (X);
	EXT_LINE_LENGTH = .EXT_LINE_LENGTH + 1;
	END	%,

    !Quote the character; it doesn't count visually.
    QCHAR_NC (X) =
	BEGIN
	NQCHAR_NC (%C'_');
	NQCHAR_NC (X);
	END	%,

    !Quote the character; it does count visually.
    QCHAR_C (X) =
	BEGIN
	NQCHAR_NC (%C'_');
	NQCHAR_C (X);
	END	%;

MACRO
    !Special macro to keep track of the backspace control character.
    BACKSPACE (X) =
	BEGIN
	QCHAR_NC (X);
	EXT_LINE_LENGTH = .EXT_LINE_LENGTH - 1;
	END	%;

MACRO
    !Clear the text lines being built up.
    CLR_RNO_LINE (_) =
	BEGIN
	LINE_POINTER = CH$PTR (RNO_LINE);
	INT_LINE_LENGTH = 0;
	EXT_LINE_LENGTH = 0;
	END	%;

MACRO
    !Write line to file, and clear all counters, etc.
    OUTNJ (_) =
	BEGIN
	$XPO_PUT (IOB = TMPIOB,
		  STRING = (.INT_LINE_LENGTH,
			    CH$PTR(RNO_LINE)) );
	CLR_RNO_LINE ();
	END	%;

MACRO
    !Insert specified character sequence into file, as is.
    DO_RNO (CMD) =
	$XPO_PUT (IOB = TMPIOB,
		 STRING = (CMD)  )  %;

MACRO
    !Generate RUNOFF code to skip a line.
    GCSKIP (_) =
	DO_RNO('.BLANK') %;

MACRO
    !Generate length and CH$PTR for a string
    STRING_P (X) =
	%CHARCOUNT(X),CH$PTR(UPLIT(X))	%;

!
! EQUATED SYMBOLS:
!

!
! OWN STORAGE:
!
EXTERNAL LITERAL
	RINTES:UNSIGNED(8);

OWN
	FILL_CNT,			!Size of line to fill
	IND_LVL,			!Index level
	LIST_PTR: REF BLOCK,
	LST_STK: VECTOR[11],		!Temporary stack for storing back links
	RUNNING_PAGES,			!True if running pages wanted instead of normal page numbers.
	SECTIONS;			!TRUE if chapters, and appendices.

OWN
    LINE_POINTER,
    RNO_LINE : VECTOR [CH$ALLOCATION(500)],
    INT_LINE_LENGTH,
    EXT_LINE_LENGTH;

EXTERNAL
    TMPIOB : $XPO_IOB ();

!
! EXTERNAL REFERENCES:
!

EXTERNAL
	BUCKET:	VECTOR;


EXTERNAL ROUTINE
	XTNPAG,			!Find position in index table
	PACBAS,
	PACPAG,
	PAGEQL,
	PAGMRG;

%SBTTL 'PREAMBLE_WRITE -- write preamble into 001TCX.TMP'
GLOBAL ROUTINE PREAMBLE_WRITE : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Write out the preamble into the single column index file.
!
! FORMAL PARAMETERS:
!
!	None
!
! IMPLICIT INPUTS:
!
!	None
!
! IMPLICIT OUTPUTS:
!
!	None
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	None
!
! SIDE EFFECTS:
!
!	None
!
!--

    BEGIN

    !Initialize counters.
    CLR_RNO_LINE ();

    !Preserve the user's current context as best we can
    DO_RNO('.LIST');

    !Generate "standard" RUNOFF environment
    DO_RNO('.NF.NJ.NO FLAGS ALL');
    DO_RNO('.NO FLAG UPPER');
    DO_RNO('.NO FLAG LOWER');
    DO_RNO('.NO FLAG CAPITALIZE');
    DO_RNO('.NO FLAG INDEX');
    DO_RNO('.NO FLAG SPACE');
    DO_RNO('.NO FLAG ENDFOOTNOTE');
    DO_RNO('.NO FLAG PERIOD');
    DO_RNO('.NO FLAG SUBSTITUTE');
    DO_RNO('.NO FLAG HYPHENATE');
    DO_RNO('.NO FLAG BREAK');
    DO_RNO('.FLAG QUOTE _');
    DO_RNO('.FLAG UNDERLINE &');
    DO_RNO('.FLAG BOLD *');
    DO_RNO('.FLAG OVERSTRIKE %');
    DO_RNO('.FLAGS ALL');
    DO_RNO('.LM0.PS,70');
    DO_RNO('.!End of preamble');
    END;			!End of WRITE_PREAMBLE

%SBTTL 'XPASSA -- print index built up by XOUT'
GLOBAL ROUTINE XPASSA (SECTION_FLAG, DOT_FLG, RUNNING_COUNT) :NOVALUE =	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	Print the index as built up by XOUT.
!
! FORMAL PARAMETERS:
!
!	SECTION_FLAG - True if document contains chapters, appendices, etc.
!	DOT_FLAG - TRUE if dots are to be used between the
!			text and the page numbers.  FALSE otherwise.
!	RUNNING_COUNT - True if running page numbers are to be output rather than
!			standard page numbers.
!
! IMPLICIT INPUTS:
!
!	None
!
! IMPLICIT OUTPUTS:
!
!	FILL_CNT	- blank fill count
!	IND_LVL		- indent level
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	None
!
! SIDE EFFECTS:
!
!	None
!
!--

    BEGIN

    LOCAL
	NOT_NULL;

    !Make "chapter-ness" attribute global to rest of module.
    SECTIONS = .SECTION_FLAG;

    !Make kind of page numbers available to rest of module.
    RUNNING_PAGES = .RUNNING_COUNT;

    !Make sure all buckets are examined.
    INCR I FROM 0 TO 26 DO
	BEGIN

	!Set starting point for listing at head
	LIST_PTR=0;

	IND_LVL=0;
	NOT_NULL=FALSE;

	!Set fill count to half page as default
	FILL_CNT = 30;

	REPEAT
	    BEGIN

	    !Get an entry
	    IF!
		NOT GET_ENTRY(.I,FALSE)
	    THEN
		EXITLOOP;

	    NOT_NULL=TRUE;

	    !Put out the entire line and its references.
	    FILL_LINE(.DOT_FLG)

	    END;

	!Put out blank line at end of each non-empty bucket
	IF!
	    .NOT_NULL
	THEN
	    BEGIN
	    DO_RNO('.!BREAK');
	    GCSKIP()
	    END
	END;

    END;			!End of XPASSA

%SBTTL 'GET_ENTRY -- from working storage'
ROUTINE GET_ENTRY (B_NO,NO_SUBX) =	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	Get a data entry from the working storage space.
!
! FORMAL PARAMETERS:
!
!	B_NO	- bucket #
!	NO_SUBX	- If true, ignore sub-index while advancing
!
! IMPLICIT INPUTS:
!
!	IND_LVL	-  indentation level
!	LIST_PTR - contains current position in list
!
! IMPLICIT OUTPUTS:
!
!	IND_LVL	 - indentation level
!	LIST_PTR - updated position in list.
!	LST_STK	 - temporary stack for saving sub-index lists
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	TRUE	- entry found
!	FALSE	- No more entries left in list
!
! SIDE EFFECTS:
!
!	Each time called, the pointer is advanced along the chain of entries
!	in the list.
!
!--

    BEGIN

    LOCAL
	L_PTR: REF BLOCK;

    IF!
	.LIST_PTR EQL 0
    THEN
	!Head of list processing
	BEGIN
	LIST_PTR=GET_DATA(DS_X_ENTRY,.BUCKET[.B_NO]);
	IF!
	    .LIST_PTR[X_TEXT] EQL 0
	THEN
	    RETURN FALSE
	END
    ELSE
	!Processing for all other list elements
	BEGIN
	L_PTR=GET_DATA(DS_X_ENTRY,.LIST_PTR);

	!Look for a sub-list entry
	IF!
	    .L_PTR[X_SUBX] NEQ 0!
	    AND NOT .NO_SUBX
	THEN
	    BEGIN

	    !Remember where we left off by placing top of sub-list on the stack
	    LST_STK[.IND_LVL]=.LIST_PTR;

	    !Point to sub-list
	    LIST_PTR=GET_DATA(DS_X_ENTRY,.L_PTR[X_SUBX]);

	    !Keep track of indentation level
	    IND_LVL=.IND_LVL+1;

	    RETURN TRUE

	    END;

	!Check for end of list
	IF!
	    .L_PTR[X_NEXT] NEQ 0
	THEN
	    LIST_PTR=GET_DATA(DS_X_ENTRY,.L_PTR[X_NEXT])
	ELSE
	    RETURN FALSE;

	!Look out for entries on a sub-list
	IF!
	    .LIST_PTR[X_NEXT] EQL 0
	THEN
	    BEGIN

	    !See if we need to unstack a sub-list
	    IF!
		.IND_LVL EQL 0
	    THEN
		!Nothing to unstack, quit
		RETURN FALSE
	    ELSE
		!Unstack branch of tree
		BEGIN
		IND_LVL=.IND_LVL-1;
		LIST_PTR=.LST_STK[.IND_LVL];
		RETURN GET_ENTRY (.B_NO,TRUE)
		END
	    END
	END;

    TRUE

    END;			!End of GET_ENTRY

%SBTTL 'FILL_LINE -- collect & print index line'
ROUTINE FILL_LINE (DOT_FLG) :NOVALUE =	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	Collect and print the entire index line, including
!	name and all line number references.
!
! FORMAL PARAMETERS:
!
!	DOT_FLG	- Index flag (TRUE - normal index, FALSE - abbreviated index)
!
! IMPLICIT INPUTS:
!
!	FILL_CNT
!	LIST_PTR - address of list item for index entry
!
! IMPLICIT OUTPUTS:
!
!	None
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	None
!
! SIDE EFFECTS:
!
!	None
!
!--

    BEGIN

    LOCAL
	CHAR_COUNT,
	OUT_COUNT,
	TEXT_PTR,
	FIRST_AREA : VECTOR [CH$ALLOCATION(100)],
	FIRST_FLAG,					!True if still waiting for first character.
	FIRST_PTR,
	FIRST_LENGTH,
	BLD_PTR,
	UND_PTR,
	CHR_PTR;

    !Make sure pointers are set up correctly
    GET_DATA(DS_X_ENTRY,.LIST_PTR);

    !Start building the .!FIRST:xyc...... directive
    FIRST_PTR = CH$PTR(FIRST_AREA);
    FIRST_PTR = CH$MOVE (STRING_P ('.!FIRST:'), .FIRST_PTR);
    !Remember location of where the bold indicator goes
    BLD_PTR = .FIRST_PTR;
    !Clear the bold indicator
    CH$WCHAR_A (%C' ', FIRST_PTR);
    !Remember location of where the underline indicator goes
    UND_PTR = .FIRST_PTR;
    !Clear the underline indicator
    CH$WCHAR_A (%C' ', FIRST_PTR);
    !Remember location of where the character goes
    CHR_PTR = .FIRST_PTR;
    !Clear the character field, and advance the pointer to the start of the
    !overstriking information field.
    CH$WCHAR_A (%C' ', FIRST_PTR);
    !Set length so far
    FIRST_LENGTH = 8 + 1 + 1 + 1;
    !Signal first character is wanted
    FIRST_FLAG = TRUE;

    !Get source text marker
    TEXT_PTR=CH$PTR(.LIST_PTR[X_TEXT]);

    CHAR_COUNT=CH$RCHAR_A(TEXT_PTR);
    OUT_COUNT=0;

    !Handle indenting
    IF!
	.IND_LVL NEQ 0
    THEN
	INCR I FROM 1 TO .IND_LVL DO
	    BEGIN
	    NQCHAR_C(%C' ');
	    NQCHAR_C(%C' ');
	    OUT_COUNT=.OUT_COUNT+2
	    END;

    !Output the .!LEVEL:n,m directive
    OUT_LP ( STRING_P('.!LEVEL:'), .IND_LVL, .EXT_LINE_LENGTH);

    !Now process the entire line
    INCR I FROM 1 TO .CHAR_COUNT DO
	BEGIN

	LOCAL
	    CHARACTER;

	CHARACTER=CH$RCHAR_A(TEXT_PTR);

	IF!
	    .CHARACTER EQL RINTES
	THEN
	    !Special handling for underscore and bold (overstrike disallowed)
	    BEGIN
	    LOCAL
		OPERAND;

	    !Get the special command
	    CHARACTER=CH$RCHAR_A(TEXT_PTR);

	    !Get the operand, for possible use later.
	    OPERAND=CH$RCHAR_A(TEXT_PTR);

	    !Count off the opcode and the operand.
	    I=.I+2;

	    !Process the special option
	    SELECT .CHARACTER OF
		SET

		[%C'B']:
		    !Bold
		    BEGIN
		    NQCHAR_NC(%C'*');
		    !Save first character if not already saved.
		    IF
			.FIRST_FLAG
		    THEN
			CH$WCHAR (%C'*', .BLD_PTR)
		    END;

		[%C'O']:
		    !Overstriking
		    BEGIN
		    !DO NOT quote character to be overstruck (changed
		    !in vers. 1(34), July 1980, kad.
		    NQCHAR_NC(.OPERAND);
		    NQCHAR_NC(%C'%');
		    IF
			.FIRST_FLAG
		    THEN
			BEGIN
			!Build up the overstriking sequence in
			!the .!FIRST line.
			CH$WCHAR_A (%C'%', FIRST_PTR);
			CH$WCHAR_A (.OPERAND, FIRST_PTR);
			FIRST_LENGTH = .FIRST_LENGTH + 2
			END
		    END;

		[%C'U']:
		    !Underscore
		    BEGIN
		    NQCHAR_NC(%C'&');
		    IF
			.FIRST_FLAG
		    THEN
			CH$WCHAR (%C'&', .UND_PTR)
		    END

		TES;

	    END
	ELSE
	    !Normal character
	    BEGIN
	    CQCHAR_C(.CHARACTER);
	    OUT_COUNT=.OUT_COUNT+1;
	    IF
		.FIRST_FLAG
	    THEN
		BEGIN
		CH$WCHAR (.CHARACTER, .CHR_PTR);
		FIRST_FLAG = FALSE
		END
	    END

	END;

    !Write the .!FIRST:xyc..... directive
    FIRST_PTR = CH$PTR (FIRST_AREA);
    $XPO_PUT (IOB = TMPIOB, STRING = (.FIRST_LENGTH, .FIRST_PTR) );

    !Now fill line
    IF!
	.LIST_PTR[X_REF] NEQ 0
    THEN
	BEGIN

	IF!
	    .DOT_FLG
	THEN
	    !Normal Index
	    BEGIN
	    !Generate one blank following the word
	    NQCHAR_C(%C' ');
	    OUT_COUNT=.OUT_COUNT+1;

	    !Pad line with '. ' until middle of page
	    WHILE (.OUT_COUNT LSS .FILL_CNT) DO
		BEGIN
		IF!
		    .OUT_COUNT
		THEN
		    NQCHAR_C(%C'.')
		ELSE
		    NQCHAR_C(%C' ');
		OUT_COUNT=.OUT_COUNT+1;
		END;
	
	
	    !Add one extra space before the page number
	    NQCHAR_C(%C' ');
	    END
	ELSE
	    !Abbreviated index
	    BEGIN
	    NQCHAR_C(%C',');
	    NQCHAR_C(%C' ');
	    FILL_CNT = .EXT_LINE_LENGTH
	    END;

	!Put out the line number(s), if any
	INS_LINE_NO(.LIST_PTR[X_REF])

	END;

    !Terminate the line
    OUTNJ()

    END;			!End of FILL_LINE

%SBTTL 'INS_LINE_NO -- generate line # list'
ROUTINE INS_LINE_NO (LIST_HEAD) :NOVALUE =	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	Generate the line number list for the index item
!
! FORMAL PARAMETERS:
!
!	LIST_HEAD - address of line number list
!
! IMPLICIT INPUTS:
!
!	FILL_CNT
!
! IMPLICIT OUTPUTS:
!
!	None
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	None
!
! SIDE EFFECTS:
!
!	None
!
!--

    BEGIN

    LOCAL
	ENTRY_LENGTH,
	ESTRING:	VECTOR[CH$ALLOCATION(100)],
	ESTRING_L,				!Number of characters in ESTRING.
	ESTRING_P,				!CH$PTR to next position in ESTRING.
	JOIN,
	MORE,
	NEXT_POSITION,
	NEXT_PTR:	REF BLOCK,
	PEEK_POSITION,
	PEEK_PTR,
	POSITION,
	POSIT_PTR:	REF BLOCK;

    POSIT_PTR=.LIST_HEAD;

    WHILE TRUE DO
	BEGIN

	LOCAL
	    HEAD_PNTR : REF BLOCK;


	!Get first position of triplet
	HEAD_PNTR=GET_DATA(DS_XX_ENTRY,.POSIT_PTR);
	IF!
	    .HEAD_PNTR EQL 0
	THEN
	    POSITION = 0
	ELSE
	    POSITION=XTNPAG(.HEAD_PNTR[XX_PAGE]);

	!Get second position of triplet
	NEXT_PTR=.POSIT_PTR[XX_LINK];
	HEAD_PNTR=GET_DATA(DS_XX_ENTRY,.NEXT_PTR);
	IF!
	    .HEAD_PNTR EQL 0
	THEN
	    NEXT_POSITION = 0
	ELSE
	    NEXT_POSITION=XTNPAG(.HEAD_PNTR[XX_PAGE]);
	
	!Remember if first two items should be joined.
	JOIN=PAGMRG(.POSITION,.NEXT_POSITION);

	!Cop a peek at third position in triplet.
	IF!
	    .NEXT_PTR NEQ 0
	THEN
	    BEGIN
	    PEEK_PTR=.NEXT_PTR[XX_LINK];
	    HEAD_PNTR=GET_DATA(DS_XX_ENTRY,.PEEK_PTR);
	    IF!
		.HEAD_PNTR EQL 0
	    THEN
		PEEK_POSITION=0
	    ELSE
		PEEK_POSITION=XTNPAG(.HEAD_PNTR[XX_PAGE]);
	    END
	ELSE
	    BEGIN
	    PEEK_PTR=0;
	    PEEK_POSITION=0;
	    END;
	

	IF!
	    .JOIN
	THEN
	!Skip over adjacent page numbers.  Keep first page number
	!of the triplet in POSITION.  Advance over all pages
	!for which NEXT and PEEK can be merged until
	!you can't peek any more (i.e., end of list) or
	!you can't merge NEXT and PEEK.
	    WHILE PAGMRG(.NEXT_POSITION,.PEEK_POSITION) DO
		BEGIN
		NEXT_POSITION=.PEEK_POSITION;
		NEXT_PTR=.PEEK_PTR;
		!Cop a peek at last item in triplet.
		IF!
		    .NEXT_PTR NEQ 0
		THEN
		    BEGIN
		    PEEK_PTR=.NEXT_PTR[XX_LINK];
		    HEAD_PNTR=GET_DATA(DS_XX_ENTRY,.PEEK_PTR);
		    IF!
			.HEAD_PNTR EQL 0
		    THEN
			PEEK_POSITION=0
		    ELSE
			PEEK_POSITION=XTNPAG(.HEAD_PNTR[XX_PAGE]);
		    END
		ELSE
		    BEGIN
		    PEEK_PTR=0;
		    PEEK_POSITION=0;
		    END;
	    END;
	!We now have something to output.
	!At this point, POSITION is the transaction number of
	!the first page number of a line entry in the index.
	!NEXT is another page number, or else 0; ditto for PEEK.

	!Build an entry to see how long it is.
	ESTRING_P=CH$PTR(ESTRING);		!Nothing to output yet.
	ESTRING_L=0;				!...
	!Determine the actual page number wanted.
	IF
	    .RUNNING_PAGES
	THEN
	    !User wants running pages rather than traditional page numbers.
	    BEGIN
	    BIND
		PAGE_NO = .POSITION : BLOCK;
	    ESTRING_L = PACBAS (.PAGE_NO [SCT_RUN_PAGE], ESTRING_P, 10);
	    END
	ELSE
	    !User wants traditional pages.
	    ESTRING_L=PACPAG(.POSITION,ESTRING_P);

	!Detect matching entries.  This arises if the file contains
	!two or more pages having the same page number and duplicate
	!index entries.
	IF!
	    .JOIN
	THEN
	    IF!
		(.POSITION NEQ .NEXT_POSITION)
		AND PAGEQL(.POSITION, .NEXT_POSITION, TRUE)
	    THEN
		JOIN = FALSE;

	IF!
	    .JOIN!
	    AND (.POSITION NEQ .NEXT_POSITION)	!Don't duplicate page numbers.
	THEN
	    !POSITION and NEXT can be merged.
	    BEGIN
	    !Connect POSITION and NEXT with '-' or ' to '.
	    IF!
		.SECTIONS
!!		AND NOT .RUNNING_PAGES		!Always use '-' with running page counters.
	    THEN
	    !In a chapter-oriented document join entries with ' to '.
		BEGIN
		ESTRING_P=CH$MOVE(4,CH$PTR(UPLIT(' to ')),.ESTRING_P);
		ESTRING_L=.ESTRING_L+4;
		END
	    ELSE
	    !Join entries in a non-chapter oriented document with '-'.
		BEGIN
		CH$WCHAR_A(%C'-',ESTRING_P);
		ESTRING_L=.ESTRING_L+1;
		END;
	    !Put second page number into entry.
	    IF
		.RUNNING_PAGES
	    THEN
		!User wants running pages
		BEGIN
		BIND
		    PAGE_NO = .NEXT_POSITION : BLOCK;
		ESTRING_L = .ESTRING_L + PACBAS (.PAGE_NO [SCT_RUN_PAGE], ESTRING_P, 10)
		END
	    ELSE
		!User wants traditional page numbers
		ESTRING_L=.ESTRING_L+PACPAG(.NEXT_POSITION,ESTRING_P)
	    END;

	!See if there will be something else after this entry
	!is put out.
	MORE=
	    (.JOIN
	     AND (.PEEK_POSITION NEQ 0))
	    OR
	    ((.NEXT_POSITION NEQ 0)
	     AND NOT .JOIN);

	!If there will be more, put ', ' after what's been built up
	!so far.
	IF!
	    .MORE
	THEN
	    BEGIN
	    CH$WCHAR_A(%C',',ESTRING_P);
	    CH$WCHAR_A(%C' ',ESTRING_P);
	    ESTRING_L=.ESTRING_L+2;
	    END;

	!Start a new line in the index if this entry won't fit.
	IF!
	    .ESTRING_L + .EXT_LINE_LENGTH GTR 32
	THEN
	    BEGIN
	    !Force out filled line.
	    OUTNJ();

	    !Fill line to align fields
	    INCR I FROM 1 TO (.IND_LVL+1) DO
		BEGIN
		NQCHAR_C(%C' ');
		NQCHAR_C(%C' ');
		END;

	    !Generate a .!PAGES: directive
	    OUT_LP ( STRING_P('.!PAGES:'), .IND_LVL, .EXT_LINE_LENGTH);

	    END;

	!Put entry onto the line.
	ESTRING_P=CH$PTR(ESTRING);
	INCR I FROM 1 TO .ESTRING_L DO
	    NQCHAR_C(CH$RCHAR_A(ESTRING_P));


	!See if list is exhausted.  If so, return.
	IF!
	    NOT .MORE
	THEN
	    RETURN;
	
	!Set up for next entry
	IF
	    .JOIN
	THEN
	    POSIT_PTR=.PEEK_PTR
	ELSE
	    POSIT_PTR=.NEXT_PTR;

	END;

    END;			!End of INS_LINE_NO

%SBTTL 'CQCHAR_C -- fix-up special characters'
ROUTINE CQCHAR_C (X) :NOVALUE =	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	The purpose of this routine is to dress up the RUNOFF input
!	file a bit that is generated by this module.  Basically, it
!	ensures that only special characters get output prefixed with
!	the QUOTE flag.
!
! FORMAL PARAMETERS:
!
!	None
!
! IMPLICIT INPUTS:
!
!	None
!
! IMPLICIT OUTPUTS:
!
!	None
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	None
!
! SIDE EFFECTS:
!
!	None
!
!--

    BEGIN
    IF!
	(.X LSS %C' ')		!Control character?
	OR (.X GTR %O'176')
    THEN			!Yup, it's a control character.
	    IF
		(.X NEQ %O'10')	!Backspace?
	    THEN
		QCHAR_C(.X)	!Nope, just a normal control character
	    ELSE
		BACKSPACE(.X)	!Yup, it's a backspace.
    ELSE			!Nope, not a control character.
	    IF!
		(.X EQL %C'&')	!Is it a RUNOFF flag????
		OR (.X EQL %C'*') !...
		OR (.X EQL %C'_') !...
		OR (.X EQL %C'.') !...
		OR (.X EQL %C'%') !...
	    THEN
		QCHAR_C(.X)	!Yup, it's a control character.
	    ELSE
		NQCHAR_C(.X);	!Nope, nothing special.


    END;			!End of CQCHAR_C

%SBTTL 'GET_DATA -- get internal address of data'
ROUTINE GET_DATA (DATASET,WSADDR) =	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	Get the internal address of a data item from the working storage.
!
! FORMAL PARAMETERS:
!
!	DATASET - Dataset name where data is to be found
!	WSADDR	- Address in dataset where data is to be found
!
! IMPLICIT INPUTS:
!
!	None
!
! IMPLICIT OUTPUTS:
!
!	None
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	The temporary in-core address of the data is returned.
!
! SIDE EFFECTS:
!
!	None
!
!--

    BEGIN

    !This routine is almost null since storage is
    !permanently in core in this version
    .WSADDR

    END;			!End of GET_DATA

%SBTTL 'OUT_LP -- output record as STRINGn,m'
GLOBAL ROUTINE OUT_LP (STRING_LENGTH, STRING_PTR, INDEX_LEVEL, SPACE_COUNT) :NOVALUE =	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine outputs a record of the form 'STRINGn,m'
!
! FORMAL PARAMETERS:
!
!	STRING_PTR is a CH$PTR to the character string whose length is given by
!	STRING_LENGTH.  The string is STRING in 'STRINGn,m'
!	INDEX_LEVEL is what will become "n"
!	SPACE_COUNT is what will become "m"
!
! IMPLICIT INPUTS:
!
!	None
!
! IMPLICIT OUTPUTS:
!
!	None
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	None
!
! SIDE EFFECTS:
!
!	None
!
!--

    BEGIN

    LOCAL
	WORK_AREA : VECTOR [CH$ALLOCATION(100)],
	WORK_PTR,
	WORK_LENGTH,
	TEMP_PTR;

    WORK_PTR = CH$PTR (WORK_AREA);

    !Insert STRING into the output record
    WORK_PTR = CH$MOVE(.STRING_LENGTH, .STRING_PTR, .WORK_PTR);
    WORK_LENGTH = .STRING_LENGTH;

    !Convert and copy the index level.
    WORK_LENGTH = .WORK_LENGTH + PACBAS (.INDEX_LEVEL, WORK_PTR, 10);

    !Insert a ',' as a separator
    CH$WCHAR_A (%C',', WORK_PTR);
    WORK_LENGTH = .WORK_LENGTH + 1;

    !Convert and copy the space count.
    WORK_LENGTH = .WORK_LENGTH + PACBAS (.SPACE_COUNT, WORK_PTR, 10);

    !Write directive to file
    WORK_PTR = CH$PTR (WORK_AREA);
    $XPO_PUT (IOB = TMPIOB, STRING = (.WORK_LENGTH, .WORK_PTR) );

    END;			!End of OUT_LP


END				!End of module
ELUDOM
