MODULE SCANTO (					!
		IDENT = 'V03-000'
%BLISS32[,
	ADDRESSING_MODE(EXTERNAL=LONG_RELATIVE,NONEXTERNAL=LONG_RELATIVE)
	]
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY: RUNOFF document formatter
!
! ABSTRACT: Text scanner and translator, creating the MRA.
!
!
! ENVIRONMENT: Transportable
!
! AUTHOR: R.W.Friday	 CREATION DATE: April, 1978
!
! MODIFIED BY:
!
!--

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    OUTXSP : NOVALUE;

!
! INCLUDE FILES:
!

REQUIRE 'REQ:ATCODE.REQ';

REQUIRE 'REQ:BOOL.REQ';

REQUIRE 'REQ:FLGT.REQ';

REQUIRE 'REQ:FSPACK.REQ';

REQUIRE 'REQ:KC.REQ';

REQUIRE 'REQ:NBITS.REQ';

REQUIRE 'REQ:SCA.REQ';

REQUIRE 'REQ:TSF.REQ';

!
! MACROS:
!
!
! EQUATED SYMBOLS:
!

EXTERNAL LITERAL
    RINTES : UNSIGNED (8);

!
! OWN STORAGE:
!
!
! EXTERNAL REFERENCES:
!

EXTERNAL
    FLGT : FLAG_TABLE,
    IRA : FIXED_STRING,
    MRA : REF FIXED_STRING,
    SCA : SCA_DEFINITION,
    TSF : TSF_DEFINITION;

EXTERNAL LITERAL 				!Error messages
    RNFFNA,
    RNFIBO,
    RNFIIF,
    RNFLOC,
    RNFSSR;

EXTERNAL
    ATABLE : VECTOR [128],
    KHAR;

EXTERNAL ROUTINE
    DOFLG,
    ENDCHR,
    ENDWRD,
    ERM,
    ERMS,
    FCIMRA,
    PUTMSG,
    RSKIPS,
    XTAB;


GLOBAL ROUTINE SCANT : NOVALUE = 		!

!++
! FUNCTIONAL DESCRIPTION:
!
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    WHILE .FS_REMAINS (IRA) GEQ 0 DO
	BEGIN

	LABEL
	    PRESCAN;

PRESCAN :
	BEGIN					!Start PRESCAN operation

	IF 					!
	    .SCA_PRESCAN
	THEN
	!If SCA_PRESCAN is TRUE, text scanning is stopped by a ';'.
	    BEGIN
	    !Make sure that a <QUOTE flag> is not forcing the character.

	    IF 					!
		.SCA_FLAGS			!
		AND .FLGT [QUO_FLAG, FLAG_ENABLED]
	    THEN

		IF 				!
		    .KHAR EQL .FLGT [QUO_FLAG, FLAG_CHARACTER]
		THEN
		!<QUOTE flag> forcing something
		!Normal processing will take care of it
		    LEAVE PRESCAN;

	    !See if <OVERSTRIKE flag> forces next character

	    IF 					!
		.SCA_FLAGS			!
		AND .FLGT [OVR_FLAG, FLAG_ENABLED]
	    THEN

		IF 				!
		    .KHAR EQL .FLGT [OVR_FLAG, FLAG_CHARACTER]
		THEN
		!<OVERSTRIKE flag> forcing next character.
		!Normal processing will take care of two characters.
		    LEAVE PRESCAN;

	    IF 					!
		.KHAR EQL %C';'
	    THEN
	    !Found a ';' terminating the scan.
		RETURN;

	    END;

	END;					!End of PRESCAN operation

	CASE .ATABLE [.KHAR] FROM 1 TO ACTION_COUNT OF
	    SET

	    [A_CONTROL] :
		BEGIN

		IF 				!
		    (.KHAR EQL 0)			!NULL??
		    OR (.KHAR EQL %O'177')	!DEL??
		THEN
		!Ignore NULL and DEL
		    (0)
		ELSE

		    IF 				!
			.SCA_CC_OK
		    THEN
		    !Control characters are ok.
			ENDCHR (.KHAR)
		    ELSE
		    !Control characters are not ok.
			BEGIN

			LOCAL
			    X,
			    Y;

			Y = CH$PTR (X);
			CH$WCHAR (.KHAR + %C'@', .Y);
			ERM (RNFIIF, .Y, 1);
			ERM (RNFLOC, 0, 0);
			END;

		KCNS ();
		END;

	    [A_DIGIT, A_OTHER] :
		BEGIN
		ENDCHR (.KHAR);
		KCNS ();
		END;

	    [A_PUNCT] :
		BEGIN
		!A punctuation mark, maybe.
		ENDCHR (.KHAR);
		SCA_WRD_LC_PNCT = .SCA_PERIOD AND .SCA_FILL;
		KCNS ();
		END;

	    [A_SPACE] :
		BEGIN

		IF 				!
		    .SCA_FC			!Was the previous character a space?
		THEN
		    BEGIN
		    !When filling, multiple spaces get replaced
		    !by a single space.
		    !In .NO FILL mode, all spaces are saved
		    IF 				!
			NOT .SCA_FILL
		    THEN
			OUTXSP ()
		    ELSE
			!Be sure user didn't say '& ', which
			!is an error in .FILL mode when there
			!is a string of spaces in a row
			IF			!Underline this space?
			    .SCA_WRD_AC_UND
			THEN
			    !User did say '& ', which is a
			    !problem for him.
			    BEGIN
			    SCA_WRD_AC_UND = FALSE;	!Fix it up.
			    ERMS (RNFFNA, .FS_START (IRA),
				 CH$DIFF (.FS_NEXT (IRA), .FS_START (IRA)) - 1);
			    END;

		    END
		ELSE
		    BEGIN			!this space terminates a word.
		    ENDWRD (TRUE, .SCA_JUSTIFY, FALSE);
		    END;

		KCNS ();			!Get next character.

		IF 				!
		    .SCA_RSKIPS
		THEN
		    RSKIPS (IRA);

		END;

	    [A_TAB] :
		BEGIN

		IF 				!
		    NOT XTAB ()
		THEN
		    BEGIN			!Couldn't expand tab, so handle like a space.

		    IF 				!
			.SCA_FC			!Was the previous character a space?
		    THEN
			BEGIN			!When filling, multiple spaces get replaced
						!by a single space.
						!In .NO FILL mode, all spaces are saved

			IF 			!
			    NOT .SCA_FILL
			THEN
			    OUTXSP ();

			END
		    ELSE
			BEGIN			!this space terminates a word.
			ENDWRD (TRUE, .SCA_JUSTIFY, FALSE);
			END;

		    END;

		KCNS ();			!Get next character

		IF 				!
		    .SCA_RSKIPS
		THEN
		!Skip multiple spaces.
		    RSKIPS (IRA);

		SCA_FC_CASE = TRUE;		!Set case rules
		END;

	    [A_U_LETTER] :
		BEGIN

		IF 				!
		    .SCA_FC_CASE
		THEN
		    KHAR = .KHAR + .SCA_WRD_FC_UT
		ELSE
		    KHAR = .KHAR + .SCA_WRD_OC_UT;

		ENDCHR (.KHAR);
		KCNS ();
		END;

	    [A_L_LETTER] :
		BEGIN

		IF 				!
		    .SCA_FC_CASE
		THEN
		    KHAR = .KHAR + .SCA_WRD_FC_LT
		ELSE
		    KHAR = .KHAR + .SCA_WRD_OC_LT;

		ENDCHR (.KHAR);
		KCNS ();
		END;

	    [A_FLAG] :
		BEGIN
		DOFLG ();
		END;

	    [A_INT_ESC] :
		BEGIN
		PUTMSG (RNFSSR, 0, 0);
		RETURN;
		END;
	    TES;

	END;

    END;					!End of SCANT


ROUTINE OUTXSP : NOVALUE = 			!

!++
! FUNCTIONAL DESCRIPTION:
!
! This routine is called in .NO FILL mode, when extra
! spaces are detected between words.  It appends them to any other
! such spaces until either a new word is started, or
! the current output line is filled.  In the latter case, such
! extra spaces get dropped.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    IF 						!
	CH$DIFF(.FS_NEXT(MRA),.FS_START(MRA)) EQL .TSF_INT_VL!
    THEN
	FCIMRA ();				!Will be first character going into MRA

!
    !Make sure that an extremely long string of spaces doesn't cause MRA
    !to overflow.  Stop 10 short so that underlining, bolding, etc can be 
    !forced out.
    IF 						!
	(.FS_MAXSIZE (MRA) - .FS_LENGTH (MRA)) LSS 10
    THEN
	BEGIN					!Character might not fit in storage

	EXTERNAL
	    IRA : FIXED_STRING;			!needed only for error handling.

	ERM (RNFIBO, .FS_NEXT (IRA), .FS_REMAINS (IRA));
	ERM (RNFLOC, 0, 0);
	ENDWRD (FALSE, FALSE, FALSE);
!!	OUTXSP ();
	WHILE .KHAR NEQ RINTES DO		!Skip to end of input line.
	    KCNS ();
	RETURN
	END;

    IF 						!
	.SCA_WRD_AC_UND
    THEN
	BEGIN					!Forced underlining for this space
	FS_WCHAR (MRA, RINTES);
	FS_WCHAR (MRA, %C'U');
	FS_WCHAR (MRA, %C' ');
	SCA_WRD_LST_UND = .SCA_WRD_LST_UND + 1;
	SCA_WRD_AC_UND = FALSE;
	END;

    FS_WCHAR (MRA, %C' ');			!Put out the actual space.
    SCA_WRD_LST_SP = .SCA_WRD_LST_SP + 1;
    !Update pointer to where next word will start.
    SCA_WRD_PNTR = .FS_NEXT (MRA);
    END;					!End of OUTXSP
END						!End of module

ELUDOM
