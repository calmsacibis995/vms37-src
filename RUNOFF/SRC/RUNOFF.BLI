MODULE RUNOFO (					!
		IDENT = 'V03-000'
%BLISS32[,
	ADDRESSING_MODE(EXTERNAL=LONG_RELATIVE,NONEXTERNAL=LONG_RELATIVE)
	]
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY: RUNOFF document formatter
!
! ABSTRACT: Main program
!
!
! ENVIRONMENT: Transportable
!
! AUTHOR: R.W.Friday	 CREATION DATE: April, 1978
!
! MODIFIED BY:
!
!	013	REM00013	Ray Marshall	9-December-1981
!		Change DOOPTS failure processing such that we now not only
!		  close any opened output file, but also delete it.
!
!	012	REM00012	Ray Marshall	20-September-1981
!		Add check for the message text file (MSGTXT.REQ) being alligned
!		  with the VMS message file (DSRMSG.MSG).  This is done here
!		  instead of in RNOVMS because the appropriate tables to get it
!		  through the error message handling haven't yet been setup.
!		  However you will note that it is compiled by BLISS32 only
!		  because the other implementations don't use two different
!		  files for handling error messages.  If the files don't match,
!		  it's a fatal error signaled with the global RNFAAA which
!		  should be the first message item in both files and therefor
!		  should properly report the error.  Unfortunately, this won't
!		  catch the problem where a message could be inserted into each
!		  file at a different place -- it only catches the case where a
!		  different number of messages have been defined between the
!		  two files.
!
!	011	KAD00011	Keith Dawson	21-August-1981
!		Add support for /QUICK qualifier: do not open an output file
!		  if specified.  For V2.1
!
!	010	REM00010	Ray Marshall	22-July-1981
!		Fix up revision history and comments.
!
!	009	KAD00009	K. A. Dawson	10-December-1980
!		Added REQ: to requires; missed this module somehow.
!
!	008x	KAD00008	K. A. Dawson	19-September-1980
!		Assert /CONT and /INDEX if no CLH.
!--

!
! TABLE OF CONTENTS:
!
!
! INCLUDE FILES:
!
REQUIRE 'REQ:RNODEF.REQ';		!RUNOFF characteristics.

LIBRARY 'NXPORT:XPORT';

REQUIRE 'REQ:FSPACK.REQ';

REQUIRE 'REQ:GCA.REQ';

REQUIRE 'REQ:KC.REQ';

%IF NOT NO_CLI
%THEN

REQUIRE 'REQ:RNOMAC.REQ';

%FI

!
! MACROS:
!
! This macro returns "1" if RUNOFF is running on TOPS-10 or TOPS-20.
! If we're running on VAX/VMS, the specified return code is used,
! with bit 28 set to inhibit generation of an error message.
! On other systems the specified code is returned without modification.
MACRO
    CRETURN (RETURN_CODE) =
	%IF
	    %BLISS (BLISS36)
	%THEN
	    RETURN 1
	%ELSE
	    RETURN RETURN_CODE + %IF
				    %BLISS(BLISS32)
				 %THEN
				    1^28	!Set inhibit message bit
				 %ELSE
				    0
				 %FI
	%FI
		%;		!End of CRETURN
!
! EQUATED SYMBOLS:
!

REQUIRE 'REQ:CLHOPS.REQ';

REQUIRE 'REQ:CLHCC.REQ';

!
! OWN STORAGE:
!

OWN
    TEMPOB : $XPO_IOB (),		!The IOB for the output file
    TEMPIB : $XPO_IOB ();		!The IOB for the primary input file

!
! EXTERNAL REFERENCES:
!

EXTERNAL
    RNEIOB : REF $XPO_IOB (),
    RNAIOB : REF $XPO_IOB (),
    RNOIOB : REF $XPO_IOB (),
    TTEIOB : $XPO_IOB ();

EXTERNAL ROUTINE
    CLH,

%IF NOT NO_CLI
%THEN
    DOOPTS,
%FI

    ERM,
    ERMS,
    PUS,
    RINIT,
    RTERM;

EXTERNAL
    GCA : GCA_DEFINITION,
    IRA : FIXED_STRING,
    KHAR;

EXTERNAL LITERAL 				!Error messages
    RNFCOI,
    RNFCOO,
    RNFFAB,
    RNFRTL,
    RNFURE;

%IF %BLISS(BLISS32)
%THEN
EXTERNAL LITERAL 				!Special error messages
	! Used to detect and signal bad error message pointers:
    RNFXFL,			! Last error defined by the message utility.
    LAST_RNF,			! Last error defined by RNFERM and MSGTXT.REQ
    RNFAAA;			! Message used to signal the inequality of the
				!   previous two literals.
%FI



GLOBAL ROUTINE RUNOFF (RNO_CMD) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This is the main program of RUNOFF.  The basic processing involves
!	calling CLH to open and close files, and read records that get passed
!	to PUS.  RINIT and RTERM are only marginally related to the formatting
!	processing, being used for initialization and termination.
!
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

%IF NOT NO_CLI
%THEN

    MAP
	RNO_CMD : REF $RNO_CMD;

%FI

    LOCAL
	CLH_RESULT;			!Completion code returned by CLH.

    WHILE 1 DO
	BEGIN

	RNEIOB = TEMPIB;
	RNAIOB = TEMPOB;

%IF NO_CLI
%THEN
	$XPO_IOB_INIT (IOB = .RNEIOB);
	$XPO_IOB_INIT (IOB = .RNAIOB);
%ELSE
	$XPO_IOB_INIT (IOB = .RNEIOB, FILE_SPEC = RNO_CMD [RNO$T_INPUT]);
	$XPO_IOB_INIT (IOB = .RNAIOB, FILE_SPEC = RNO_CMD [RNO$T_OUTPUT]);
%FI

	RINIT ();				!Initialize most everything.

%IF %BLISS(BLISS32)
%THEN
!
! Now we must see if the VMS message utility using DSRMSG.MSG as input has
! defined the same number of messages as RNFERM.BLI has put into the message
! vector using MSGTXT.REQ as input.  This is done by verifying that a global
! defined in RNFERM.BLI (LAST_RNF) is equal to the last message code defined
! by the message utility (RNFXFL).  If not, signal the FATAL error and exit!
!
    IF RNFXFL NEQ LAST_RNF THEN
	BEGIN
	ERM(RNFAAA, 0, 0);
%IF NOT NO_CLI
%THEN
	CRETURN (4)
%FI
	END;
%FI

! Now we can proceed with normal processing

	CLH_RESULT = CLH (CLH_OPEN_INPUT);	!Try to open input file.

	IF 					!
	    .CLH_RESULT NEQ CLH_NORMAL
	THEN
	    BEGIN
	    ERM (RNFCOI, 0, 0);			!Can't Open Input

%IF NOT NO_CLI
%THEN
	    CRETURN (4)
%FI

	    END
	ELSE
	    BEGIN
	    IF
		.RNO_CMD [RNO$V_QUICK]			!Did user specify quick processing?
	    THEN
		CLH_RESULT = CLH_NORMAL			!If so, don't open an output file.
	    ELSE
	        CLH_RESULT = CLH (CLH_OPEN_OUT);	!Try to open output file.

	    IF 					!
		.CLH_RESULT NEQ CLH_NORMAL
	    THEN
		BEGIN				!Could not open output
		BIND
		    TEMP = RNOIOB [IOB$T_RESULTANT] : $STR_DESCRIPTOR ();
		LOCAL
		    SPEC_LENGTH,
		    SPEC_PTR;

		SPEC_LENGTH = .TEMP [STR$H_LENGTH];
		SPEC_PTR    = .TEMP [STR$A_POINTER];
		ERM (RNFCOO, .SPEC_PTR, .SPEC_LENGTH);
		CLH (CLH_CLOSE_INPUT);

%IF NOT NO_CLI
%THEN
		CRETURN (4)
%FI

		END
	    ELSE

%IF NOT NO_CLI
%THEN

		IF 				!
		    NOT DOOPTS (.RNO_CMD)
		THEN
		    BEGIN
		    CLH (CLH_CLOSE_INPUT);
		    IF
			NOT .RNO_CMD [RNO$V_QUICK]  !If quick processing, no
		    THEN			    !output file was opened.
			CLH (CLH_CLOSE_DEL_OUT);    !ELSE, close and delete it
		    CRETURN (4)
		    END
		ELSE
%FI
		    BEGIN

		    !If the output file is the terminal, don't redirect error messages.
		    !Otherwise, direct messages as specified on the /MESSAGES switch.  The
		    !effect is that the user can determine where error messages go only if
		    !the output file is not the terminal; i.e., you cannot suppress error messages
		    !totally, but you can prevent them from going into the output file.
		    IF!
			NOT (.RNOIOB [IOB$V_TERMINAL] AND .TTEIOB [IOB$V_TERMINAL])
		    THEN
			GCA_ERR_DIR =.GCA_CMD_MSG;

		    WHILE 1 DO
			BEGIN			!Processing of text
			CLH_RESULT = CLH (CLH_READ_INPUT);

			SELECT .CLH_RESULT OF
			    SET

			    [CLH_NORMAL] :
				BEGIN		!Something was read successfully.
				KCNS ();
				PUS ()
				END;

			    [CLH_END_FILE] :
				BEGIN		!End of file
				RTERM ();
				CLH (CLH_CLOSE_INPUT);
				IF
				    NOT .RNO_CMD [RNO$V_QUICK]	!If quick processing, no
				THEN				!output file was opened.
				    CLH (CLH_CLOSE_OUT);

%IF NO_CLI
%THEN
				EXITLOOP
%ELSE
				IF
				    .GCA_FEHLER
				THEN
				    CRETURN (2)
			 	ELSE
				    CRETURN (1)
%FI

				END;

			    [CLH_TOO_LONG] :
				BEGIN		!Record would not fit in input area (ira).
				ERMS (RNFRTL, .FS_START (IRA), .FS_LENGTH (IRA));
				KCNS ();
				PUS ();
				END;

			    [OTHERWISE] :
				BEGIN		!Do this for all errors
				ERM (RNFURE, 0, 0);	!Unrecoverable error
				ERM (RNFFAB, 0, 0);
				CLH (CLH_CLOSE_INPUT);
				IF
				    NOT .RNO_CMD [RNO$V_QUICK]	!If quick processing, no
				THEN				!output file was opened.
				    CLH (CLH_CLOSE_OUT);
%IF NO_CLI
%THEN
				EXITLOOP
%ELSE
				CRETURN (4)
%FI

				END;
			    TES;

			END

		    END

	    END					!end of processing loop
	END

    END;					!End of RUNOFF
END						!End of module
ELUDOM
