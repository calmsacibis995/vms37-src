MODULE GETONO (					!
		IDENT = 'V03-000'
%BLISS32[,
	ADDRESSING_MODE(EXTERNAL=LONG_RELATIVE,NONEXTERNAL=LONG_RELATIVE)
	]
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY: RUNOFF document formatter
!
! ABSTRACT: Get one character, applying flag recognition.
!
!
! ENVIRONMENT: Transportable
!
! AUTHOR: R.W.Friday	 CREATION DATE: May, 1978
!
! MODIFIED BY:
!
!	007	REM00007	Ray Marshall	6-December-1981
!		Modified calling sequence of GETONE to allow an alternate
!		  flag character specification.  This was to special-case
!		  the .FLAGS SUBINDEX directive to allow it to set a flag
!		  character that might be different then the current one,
!		  but the same as the current INDEX flag.
!		Fill in revision history from CMS library and file comparisons.
!
!	006	REM00006	Ray Marshall	25-August-1980
!		Update copyright and reformat revision history
!
!	005	KAD00005	Keith Dawson	21-October-1980
!		Modified REQUIREs by adding the REQ: logical.
!
!	004	KAD00004	Keith Dawson	June-1981
! 		For VERSION 1(123)
!--

!
! TABLE OF CONTENTS:
!
!
! INCLUDE FILES:
!

REQUIRE 'REQ:ATCODE.REQ';

REQUIRE 'REQ:BOOL.REQ';

REQUIRE 'REQ:FLGT.REQ';

REQUIRE 'REQ:FSPACK.REQ';

REQUIRE 'REQ:KC.REQ';

REQUIRE 'REQ:LETTER.REQ';

REQUIRE 'REQ:SCA.REQ';

!
! MACROS:
!
!
! EQUATED SYMBOLS:
!

EXTERNAL LITERAL
    RINTES : UNSIGNED (8);

!
! OWN STORAGE:
!
!
! EXTERNAL REFERENCES:
!

EXTERNAL
    ATABLE : VECTOR [128],
    FLGT : FLAG_TABLE [FLAG_COUNT],
    IRA : FIXED_STRING,
    KHAR,
    SCA : SCA_DEFINITION;

EXTERNAL LITERAL 				! Error messages
    RNFFEL,
    RNFFNA;

EXTERNAL ROUTINE
    ERMA,
    ERMS,
    FNDFLG,
    RSKIPS;


GLOBAL ROUTINE GETONE (ACCEPTABLE,ALTERNATE) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Skip spaces and tabs until a different character is found.
! If that character is <CONTROL flag>, or RINTES (i.e., end of record),
! or a semicolon, return a zero (null character). If the character
! is the accept (quote)  flag, apply the flag against the next
! character. If the character is the flag already in effect for this
! flag operation or a special cased ALTERNATE, take it without complaining.
! If the character is any other flag, then complain (error message RNFFNA,
! flag not acceptable).
!
! FORMAL PARAMETERS:
!
!	ACCEPTABLE is the value of the flag character for the current
!	 .FLAGS or .NO FLAGS command.
!
!	ALTERNATE is the value of the flag character for an alternately
!	 acceptable flag.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN
    RSKIPS (IRA);				!Skip spaces and tabs.

    IF 						!
	.KHAR EQL RINTES
    THEN
	RETURN 0;				!End of record.

    IF 						!
	.KHAR EQL .FLGT [CON_FLAG, FLAG_CHARACTER]
    THEN
    !<CONTROL flag>
	RETURN 0;				!Start of a new command.

    IF 						!
	.ATABLE [.KHAR] EQL A_FLAG
    THEN 					!
    !Character is a flag.  Do it.
	BEGIN

	LOCAL
	    WHICH_FLAG;

	WHICH_FLAG = FNDFLG (.KHAR);		!Identify the flag.

	CASE .WHICH_FLAG FROM 0 TO FLAG_COUNT + 1 OF
	    SET
!!  Code for upp_flag and low_flag deleted, KAD: 6-10-1980.
!!
!!	    [UPP_FLAG] :
!!		BEGIN
!!		!<UPPERCASE flag>
!!		KCNS ();				!Get next character
!!
!!		IF 				!
!!		    .KHAR EQL RINTES
!!		THEN
!!		    BEGIN
!!		    ERMS (RNFFEL, CH$PTR (UPLIT ('UPPERCASE')), 9);
!!		    RETURN 0;			! Ignore <UPPERCASE flag>
!!		    END				! at the end of a line.
!!		ELSE
!!		    BEGIN
!!
!!		    LOCAL
!!			HOLD_KHAR;
!!
!!		    HOLD_KHAR = .KHAR;
!!		    KCNS ();
!!		    RETURN (IF LOWER_LETTER (.HOLD_KHAR)	!
!!			THEN UPPER_CASE (.HOLD_KHAR)	!
!!			ELSE .HOLD_KHAR);
!!		    END;
!!
!!		END;
!!
!!	    [LOW_FLAG] :
!!		BEGIN
!!		!<LOWERCASE flag>
!!		KCNS ();				!Get next character
!!
!!		IF 				!
!!		    .KHAR EQL RINTES
!!		THEN
!!		    BEGIN
!!		    ERMS (RNFFEL, CH$PTR (UPLIT ('LOWERCASE')), 9);
!!		    RETURN 0;			! Ignore <LOWERCASE flag>
!!		    END
!!		ELSE
!!		    BEGIN
!!
!!		    LOCAL
!!			HOLD_KHAR;
!!
!!		    HOLD_KHAR = .KHAR;
!!		    KCNS ();
!!		    RETURN (IF UPPER_LETTER (.HOLD_KHAR)	!
!!			THEN LOWER_CASE (.HOLD_KHAR)	!
!!			ELSE .HOLD_KHAR);
!!		    END;
!!
!!		END;
!!
	    [QUO_FLAG] :
		BEGIN
		!<QUOTE flag>
		LOCAL
		    HOLD_QUO;
		HOLD_QUO = .KHAR;
		KCNS ();			!Get next character

		IF 				!
		    .KHAR EQL RINTES
		THEN
		    IF
			.WHICH_FLAG EQL .ACCEPTABLE
				    OR
			.WHICH_FLAG EQL .ALTERNATE
		    THEN
		    ! User is redefining <QUOTE flag> to itself or an
		    ! acceptable alternate (if there is such a thing). Let him.
			RETURN .HOLD_QUO ! 
		    ELSE
		    ! User is trying to define some other flag to the
		    !  <QUOTE flag>,  Complain!
			BEGIN
			ERMS (RNFFEL, CH$PTR (UPLIT ('ACCEPT')), 6);
			RETURN 0;		! Ignore <QUOTE flag>
			END
		ELSE
		    BEGIN

		    LOCAL
			HOLD_KHAR;

		    HOLD_KHAR = .KHAR;
		    KCNS ();
		    RETURN .HOLD_KHAR;
		    END;

		END;

	    [FLAG_COUNT + 1] :
		BEGIN
		KCNS ();
		RETURN 0;
		END;

	    [INRANGE] :
		IF
		    .WHICH_FLAG EQL .ACCEPTABLE
				OR	
		    .WHICH_FLAG EQL .ALTERNATE
		THEN				
		!Let user redefine the flag to itself or an optional alternate.
		    BEGIN
		    LOCAL
			HOLD_CHAR;
		    HOLD_CHAR = .KHAR;
		    KCNS();
		    RETURN .HOLD_CHAR;
		    END
		ELSE
		! But, complain if he redefines it to the value of another flag.
		    BEGIN
		    ERMA (RNFFNA, FALSE);
		    KCNS ();
		    RETURN 0;
		    END;
	    TES;

	END;

    IF 						!
	.KHAR EQL %C';'
    THEN
	RETURN 0;				!End of command.

    BEGIN					!The usual case (i.e., just some character)

    LOCAL
	HOLD_KHAR;

    HOLD_KHAR = .KHAR;
    KCNS ();					!Position onto next character.
    RETURN .HOLD_KHAR
    END
    END;					!End of GETONE

END						!End of module

ELUDOM
