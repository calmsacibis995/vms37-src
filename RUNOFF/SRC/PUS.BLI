MODULE PUSOOO (					!
		IDENT = 'V03-000'
%BLISS32[,
	ADDRESSING_MODE(EXTERNAL=LONG_RELATIVE,NONEXTERNAL=LONG_RELATIVE)
	]
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY: RUNOFF document formatter
!
! ABSTRACT: Decide if record is a command, or contains text,
!		and dispatch accordingly.
!
!
! ENVIRONMENT: Transportable
!
! AUTHOR: R.W.Friday	 CREATION DATE: April, 1978
!
! MODIFIED BY:
!
!--

!
! TABLE OF CONTENTS:
!
!
! INCLUDE FILES:
!

REQUIRE 'REQ:ARECCC.REQ';

REQUIRE 'REQ:BOOL.REQ';

REQUIRE 'REQ:FSPACK.REQ';

REQUIRE 'REQ:GCA.REQ';

REQUIRE 'REQ:KC.REQ';

REQUIRE 'REQ:KWITEM.REQ';

REQUIRE 'REQ:RUNHAN.REQ';

REQUIRE 'REQ:SCA.REQ';

!
! MACROS:
!
!
! EQUATED SYMBOLS:
!

EXTERNAL LITERAL
    RINTES : UNSIGNED (8);

LITERAL
    FINISH_COMMAND = ARECCC_COUNT + 1,
    PROCESS_TEXT = ARECCC_COUNT + 2;

!
! OWN STORAGE:
!
!
! EXTERNAL REFERENCES:
!

EXTERNAL
    GCA : GCA_DEFINITION,
    IRA : FIXED_STRING,
    KHAR,
    SCA : SCA_DEFINITION;

EXTERNAL LITERAL 				!Error messages
    RNFDNS,
    RNFILC;

EXTERNAL ROUTINE
    AREC,
    DOCM,
    ENDCMT,
    ENDWRD,
    ERMA,
    ERML,
    GCSKIP,
    GUSKIP,
    LIT,
    OUTCRG,
    OUTJ,
    OUTNJ,
    PARAG,
    RCS,
    SCANT;


GLOBAL ROUTINE PUS : NOVALUE = 			!

!++
! FUNCTIONAL DESCRIPTION:
!
!	See the ABSTRACT, above.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	ACTION,
	NEW_RECORD,				!PUS needs to know if new record or continuing on.
	SAVE_COUNT,
	SAVE_KHAR,
	SAVE_NEXT;

    SAVE_COUNT = .FS_LENGTH (IRA);		!Needed if this turns out to be a literal line.
    SAVE_KHAR = .KHAR;				!...
    SAVE_NEXT = .FS_NEXT (IRA);			!...
    ACTION = AREC ();				!Find out what to do with this uneaten string.
    NEW_RECORD = TRUE;				!This is a brand new record.

    WHILE 1 DO 					!This loop allows the analysis results to be altered.
	BEGIN

	IF 					!
	    .ACTION NEQ FINISH_COMMAND
	THEN
	    BEGIN
	    !If in the FALSE branch of an .IF command, ignore everything
	    !that cannot possibly be a "normal" RUNOFF command.

	    IF 					!
		.GCA_SKIPPING
	    THEN

		IF 				!
		    .ACTION NEQ CF_LETTER
		THEN
		    RETURN;

!
!

	    IF 					!
		.GCA_LITERAL			!
		AND NOT 			!
		((.ACTION EQL END_OF_STRING) AND NOT .NEW_RECORD)
	    THEN
		BEGIN				!Special processing for literals

		LABEL
		    LITERAL_BLOCK;

		LOCAL
		    RCS_RESULT;

LITERAL_BLOCK :
		BEGIN
		!The following test is satisfied when a counted literal has
		!run out, or it's not a counted literal.
		!In the case where a counted literal is supposed to run out, but
		!the line does not contain a .END LITERAL command, the
		!appropriate error action is taken by LIT.

		IF 				!
		    .GCA_LIT_COUNT EQL 0
		THEN
		    BEGIN

		    IF 				!
			.ACTION EQL CF_LETTER
		    THEN
			BEGIN
			RCS_RESULT = RCS ();

			IF 			!
			    .RCS_RESULT NEQ 0
			THEN
			    BEGIN

			    MAP
				RCS_RESULT : REF VECTOR;

			    IF 			!
				.HANDLER_CODE (RCS_RESULT) EQL H_END_LITERAL
			    THEN
				BEGIN		!Terminate the literal.
				DOCM (H_END_LITERAL, 0);
				ACTION = FINISH_COMMAND;
				LEAVE LITERAL_BLOCK;
				END;

			    END;

			END;

		    END;

		!Just another literal line
		FS_LENGTH (IRA) = .SAVE_COUNT;	!restore possibly modified count.
		FS_NEXT (IRA) = .SAVE_NEXT;	!restore possibly modified pointer.
		KHAR = .SAVE_KHAR;		!restore stacked character.
		LIT (0);			!Let LIT count this line

		IF 				!
		    .ACTION NEQ END_OF_STRING
		THEN
		    ACTION = PROCESS_TEXT;

		END;				!end of LITERAL_BLOCK
		END;

	    END;

	CASE .ACTION FROM 1 TO PROCESS_TEXT OF
	    SET

	    [END_OF_STRING] :
		BEGIN

		IF 				!
		    .SCA_FILL			!
		    AND .GCA_AUTOPARA		!
		    AND .NEW_RECORD
		THEN
		    PARAG (-1)
		ELSE

		    IF 				!
			.SCA_FILL
		    THEN
			(IF 			!
			    NOT .SCA_FC		!
			THEN 			!
			    ENDWRD (.SCA_FILL, .SCA_JUSTIFY, FALSE))
		    ELSE
		    !NO FILL mode
			BEGIN

			IF 			!
			    .SCA_KER		!See if Keeping Empty Records.
			THEN 			!Force a blank line
			    BEGIN
			    GUSKIP (1);		!Generate 'blank-line' code.
			    OUTCRG ();		!Force out blank line NOW.
			    END

			END;

		RETURN;
		END;

	    [CF_CF] :
		BEGIN
		!Two <CONTROL flag>s
		ACTION = NOT_SPACE;
		END;

	    [CF_COMMENT] :
		BEGIN
		!A comment starting '.!' or '.;'.
		KCNS ();			!Position into comment
		ENDCMT ();
		ACTION = FINISH_COMMAND;
		END;

	    [CF_BREAK, CF_LETTER] :
		BEGIN				!Command recognition and processing

		LOCAL
		    RCS_RESULT;

		RCS_RESULT = RCS ();		!Try to recognize command.

		IF 				!
		    .RCS_RESULT EQL 0
		THEN
		!Command not recognized.
		    BEGIN
		    ACTION = CF_OTHER;
		    END
		ELSE
		    BEGIN

		    MAP
			RCS_RESULT : REF VECTOR;

		    DOCM (.HANDLER_CODE (RCS_RESULT), 	!Process command
			.ACTIONS (RCS_RESULT));	!
		    ACTION = FINISH_COMMAND;	!Finish processing command.
		    END;

		END;

	    [CF_OTHER] :
		BEGIN
		!Something that can't be recognized.
		ERMA (RNFILC, TRUE);		!Skip to end of "command" and issue an error message.
		ACTION = FINISH_COMMAND;	!Standard end-of-command processing.
		END;

	    [END_FOOTNOTE] :
		BEGIN
		!<ENDFOOTNOTE flag>
		KCNS ();			!Skip the <ENDFOOTNOTE flag>
		DOCM (H_END_FOOTNOTE, 0);	!Terminate a footnote.
		ACTION = FINISH_COMMAND;	!Finish processing coommand.
		END;

	    [FIRST_SPACE] :
		BEGIN

		IF 				!
		    .SCA_FILL			!
		    AND .GCA_AUTOPARA
		THEN
		    PARAG (-1);			!Found an auto'd paragraph.

		ACTION = PROCESS_TEXT;		!Do normal text processing.
		END;

	    [FIRST_SEMI] :
		BEGIN
		!A ';' following a command.
		ACTION = PROCESS_TEXT;		!Do normal text processing.
		END;

	    [NOT_SPACE] :
		BEGIN

		IF 				!
		    .SCA_FILL			!
		    AND .GCA_AUTOTABL
		THEN
		    PARAG (-1);			!Found an auto'd paragraph.

		ACTION = PROCESS_TEXT;		!Do normal text processing.
		END;

	    [PROCESS_TEXT] :
		BEGIN

		IF 				!
		    NOT (.GCA_CONCAT AND .SCA_CONT)
		THEN
		!Normal case, when end of line means end
		!of word.  The check on SCA_WRD_CPEND avoids
		!extra spaces if the input line ended with
		!a space or tab.

		    IF 				!
			.SCA_WRD_CPEND NEQ RINTES
		    THEN
		    !End pending word, if there is one.
			ENDWRD (.SCA_FILL, .SCA_JUSTIFY, FALSE);

		IF 				!
		    .GCA_CONCAT			!
		    AND ( NOT .SCA_CONT)
		THEN
		    BEGIN			!NO SPACE canceled by some other command
		    ERML (RNFDNS);		!Issue error message.
		    END;

		GCA_CONCAT = FALSE;		!Concatination no longer pending.
		SCANT ();			!Go scan text.
		!In .NO FILL mode, the end of an input line
		!corresponds to the end of an output line.

		IF 				!
		    NOT .SCA_FILL
		THEN
		IF!
		    .SCA_JUSTIFY		!NO FILL,JUSTIFY
		THEN
		    OUTJ ()
		ELSE
		    OUTNJ ();			!NO FILL, NO JUSTIFY

		RETURN;
		END;

	    [FINISH_COMMAND] :
		BEGIN
		NEW_RECORD = FALSE;		!Continue same record.
		ACTION = AREC ();		!Find out what to do.

		IF 				!
		    .ACTION EQL END_OF_STRING
		THEN
		    RETURN;

		IF 				!
		    .ACTION EQL FIRST_SEMI
		THEN
		    BEGIN
		    KCNS ();			!Skip the ';',
		    ACTION = AREC ();		!find out what to do with remainder,
		    NEW_RECORD = TRUE;		!and handle it like a brand new record.
		    END;

		!If the command just processed was a .LITERAL
		!command, don't let the old pointers, etc
		!get set back at the top of the loop.

		IF 				!
		    .GCA_LITERAL
		THEN
		    BEGIN
		    SAVE_COUNT = .FS_LENGTH (IRA);
		    SAVE_KHAR = .KHAR;
		    SAVE_NEXT = .FS_NEXT (IRA);
		    END;

		END;
	    TES;

	END;

    END;					!End of PUS

END						!End of module

ELUDOM
