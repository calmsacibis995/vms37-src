MODULE XOUTOO (	!
		IDENT = 'V03-000'
%BLISS32[,
	ADDRESSING_MODE(EXTERNAL=LONG_RELATIVE,NONEXTERNAL=LONG_RELATIVE)
	]
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY:
!
!	RUNOFF Index Processor
!
! ABSTRACT:
!	The routines contained in this module sort and store
!	index entries.  This module is part of both RUNOFF and TCX.
!
!
! ENVIRONMENT: Transportable
!
! AUTHOR: D. Knight	, CREATION DATE: July 1978
!
!	MODIFIED BY:
!
!	007	KAD00007	K. A. Dawson	August 1981
!		Fixed compiler complaints, null expression in value-
!		required context.
!
!	006	RWF00006	R. W. Friday	May 28,1980
!		For VERSION V1(123)
!		This module has been altered extensively
!		by Richard Friday.
!		Long-file-name bug (VMS) fixed for V1(123). 

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
	XOUT:		NOVALUE,	!Put away index item
	XSETUP:		NOVALUE,	!Initialize index processor
	CHRCMP:		NOVALUE,	!Compare two characters in internal format
	CVT_LCUC,			!Convert lower to upper case
	FIND_POS:	NOVALUE,	!Locate position for insertion
	GET_DATA,			!Get data from work storage
	INSERT_INX:	NOVALUE,	!Insert index item into list
	SAVE_DATA,			!Place data in work storage
	STRG_CMP,			!Compare string with entry
	UPDATE_DATA:	NOVALUE;	!Update data item in storage

!
! INCLUDE FILES:
!

REQUIRE 'REQ:INDEX';

REQUIRE 'REQ:LETTER';

!
! MACROS:
!

MACRO
    REPEAT=
	WHILE 1 DO %;

!This macro ensures there is sufficient free memory to accommodate
!index entries.
MACRO
    X_INDEX_MEM(AMOUNT)=
	BEGIN
	IF!
	    .NDXSGF LSS (AMOUNT)
	THEN
	!Not enough space in current segment, so get a new one.
	    BEGIN
	    NDXSGE = XPOOL (NDXPOL, 1000);	!Try to get about 1k.
	    IF!
		.NDXSGE NEQ 0
	    THEN
	    !The requested amount was available.
		BEGIN
		!Save size of segment
		NDXSGF = 1000;
		END
	    ELSE
	    !The requested amount could not be allocated (pool full)
		BEGIN
		!Complain to user.  Don't put the message in the
		!output file, so at least he gets a clean document.
		EXTERNAL ROUTINE XOVFLO;
		!XOVFLO is a routine that issues the INDEX OVERFLOW error message.
		!The message is issued by that routine rather than directly by this
		!module, so that the module ERROR is not required when *this*
		!module is linked into TCX.
		XOVFLO ();
		RETURN 0		!Avoid compiler complaint.
		END;
	    END
	END %;

 !Current call flags
%IF
    2*%BPADDR LEQ %BPVAL
%THEN
!For DECsystem -10s and -20s
MACRO
    C_CURR=0,0,18,0 %,		!Current cell
    C_PREV=0,18,18,0 %,		!Previous cell
    C_HEAD=1,0,18,0 %,		!Head of chain
    C_IDNS=1,18,1,0 %,		!Identical string flag	(BIT)
    C_SUBX=2,0,18,0 %;		!Sub index flag

LITERAL
    C_SIZE=3;			!Size of current call flags cell
%ELSE
!For -11s, VAXes, and -20s with extended addressing.

MACRO
    C_CURR=0,0,%BPVAL,0 %,		!Current cell
    C_PREV=1,0,%BPVAL,0 %,		!Previous cell
    C_HEAD=2,0,%BPVAL,0 %,		!Head of chain
    C_IDNS=3,0,%BPUNIT,0 %,		!Identical string flag	(BIT)
    C_SUBX=4,0,%BPVAL,0 %;		!Sub index flag

LITERAL
    C_SIZE=5;			!Size of current call flags cell
%FI

!
! EQUATED SYMBOLS:
!
EXTERNAL LITERAL
	RINTES:UNSIGNED(8);		!Special escape character

LITERAL
	TRUE = 1,
	FALSE = 0;

!
! OWN STORAGE:
!

GLOBAL
    BUCKET:	VECTOR[27];		!Hashing buckets (first character of entry)
					!There are 26 buckets for letters, and
					!one for all other characters.

OWN
    BAR,				!Change bar flag.
    CELL:	BLOCK[C_SIZE],		!Current call characteristics
    SUBX_LGT,				!Sub-index item length
    SUBX_STG,				!Sub-index string pointer
    XTN_NUMBER;				!Transaction number

!
! EXTERNAL REFERENCES:
!

EXTERNAL
	NDXPOL,				!Address of indexing pool.
	NDXSGE,				!Address of end of current segment.
	NDXSGF;				!Free space in current segment.

EXTERNAL ROUTINE
	GPOOL,
	XPOOL;

GLOBAL ROUTINE XOUT (ENTRY_LENGTH, ENTRY_PTR, XTN, BAR_FLAG) :NOVALUE =	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	Place an index or sub-index item into the index master storage
!	list in alphabetical order.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	CELL		- Information about current position in list
!	ENTRY_LENGTH	- Length of input string
!
! IMPLICIT OUTPUTS:
!
!	SUBX_STG - pointer to sub-index string
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Master index is built.
!
!--

    BEGIN

    LOCAL
	INT_HL,
	LAST_NB,
	STG_PTR,
	SUBX_CNT;
!!!	XSTRING:	VECTOR[CH$ALLOCATION(500)];
!!!NOTE***** See introductory comments for the commented-out
!!!code below.

    !Is this trip necessary?
    IF!
	.ENTRY_LENGTH EQL 0
    THEN
	RETURN;

    !If first call, initialize the index
    IF!
	.NDXPOL EQL 0
    THEN
	XSETUP();

    !Initialization
    BEGIN
    MAP
	CELL : VECTOR [C_SIZE];

    INCR I FROM 0 TO C_SIZE - 1 DO CELL [.I] = 0;
    END;

    !Get address of index string
    SUBX_STG=.ENTRY_PTR;
    !Get length of index string.
    INT_HL=.ENTRY_LENGTH;
    !Get transaction number and make it global
    XTN_NUMBER=.XTN;
    !Get change bar information and make it global
    BAR=.BAR_FLAG;
!!!
!!!    !TEMPORARY RESTRICTION: REMOVE ALL OVERSTRIKING FROM
!!!    !STRING ABOUT TO BE INDEXED.  THIS BLOCK OF CODE CAN
!!!    !BE REMOVED WITH NO FURTHER CHANGES WHEN OVERSTRIKING
!!!    !IS SUPPORTED.  THE DECLARATION FOR XSTRING CAN THEN 
!!!    !BE REMOVED TOO.
!!!    !THE NET EFFECT OF THIS CODE IS TO CREATE A COPY OF
!!!    !THE INDEX STRING IN XSTRING, BUT WITH THE OVERSTRIKING
!!!    !REMOVED.
!!!
!!!NOTE***** The code which is commented out is retained in
!!!this module to show what needs to be done if overstriking is
!!!not to be allowed in the index.  At one time it did work.
!!!However, it is possible that it won't compile successfully
!!!any more.
!!!    IF
!!!	.TSF_OVR			!IS THERE ANY OVERSTRIKING TO REMOVE?
!!!    THEN
!!!	BEGIN
!!!	LOCAL
!!!	    CHR,
!!!	    IPTR,
!!!	    NINT_L,
!!!	    OPTR;
!!!
!!!	NINT_L=0;
!!!	IPTR=.SUBX_STG;
!!!	OPTR=CH$PTR(XSTRING);
!!!
!!!	INCR I FROM 1 TO .INT_HL DO
!!!	    BEGIN
!!!	    CHR=CH$RCHAR_A(IPTR);
!!!	    IF
!!!		.CHR NEQ RINTES
!!!	    THEN
!!!		!KEEP ALL NORMAL CHARACTERS.
!!!		BEGIN
!!!		CH$WCHAR_A(.CHR,OPTR);
!!!		NINT_L=.NINT_L + 1;
!!!		END
!!!	    ELSE
!!!		!INTERPRET ESCAPE CODE, THROWING AWAY OVERSTRIKING.
!!!		BEGIN
!!!		CHR=CH$RCHAR_A(IPTR);
!!!		IF
!!!		    .CHR EQL %C'O'
!!!		THEN
!!!		    !IT IS AN OVERSTRIKE SEQUENCE TO BE DISCARDED.
!!!		    BEGIN
!!!		    !SKIP PARAMETER.
!!!		    CH$RCHAR_A(IPTR);
!!!		    I=.I+2;
!!!		    END
!!!		ELSE
!!!		    !SOME OTHER ESCAPE SEQUENCE TO KEEP
!!!		    BEGIN
!!!		    CH$WCHAR_A(RINTES,OPTR);
!!!		    CH$WCHAR_A(.CHR,OPTR);
!!!		    CH$WCHAR_A(CH$RCHAR_A(IPTR),OPTR);
!!!		    NINT_L=.NINT_L+3;
!!!		    I=.I+2;
!!!		    END;
!!!		END;
!!!	    END;
!!!	SUBX_STG=CH$PTR(XSTRING);
!!!	INT_HL=.NINT_L;
!!!	END;
!!!    !END OF TEMPORARY RESTRICTION CODE.

    STG_PTR=.SUBX_STG;
    LAST_NB=.SUBX_STG;
    SUBX_CNT=0;

    !Scan the entire character string
    INCR I FROM 1 TO .INT_HL DO
	BEGIN

	LOCAL
	    CHARACTER;

	CHARACTER=CH$RCHAR_A(STG_PTR);

	!Look for special handling
	IF!
	    .CHARACTER EQL RINTES
	THEN
	    !Interpret escape sequences.
	    BEGIN
	    CHARACTER=CH$RCHAR_A(STG_PTR);
	    I=.I+1;
	    IF!
		.CHARACTER EQL %C'J'
	    THEN
		!Set up sub-index
		BEGIN

		LOCAL
		    T_PTR: REF BLOCK;

		!Skip null argument
		CH$RCHAR_A(STG_PTR);
		I=.I+1;

		!Look for entry
		FIND_POS(.SUBX_STG,CH$DIFF(.LAST_NB,.SUBX_STG),.SUBX_CNT);

		!Enter it if it is not already there
		IF!
		    NOT .CELL[C_IDNS]
		THEN
		    INSERT_INX(.SUBX_STG,CH$DIFF(.LAST_NB,.SUBX_STG),0,.SUBX_CNT);

		!Skip over text
		SUBX_STG=.STG_PTR;
		LAST_NB=.SUBX_STG;
		SUBX_CNT=.SUBX_CNT+1;
		CELL[C_IDNS]=FALSE;

		!Is there a sub-index list?
		T_PTR=.CELL[C_CURR];
		IF!
		    .T_PTR[X_SUBX] EQL 0
		THEN
		    !Insert end of sub-index list
		    INSERT_INX(0,0,0,.SUBX_CNT)
		ELSE
		    !Set pointer to head of sub list
		    BEGIN
		    CELL[C_PREV]=.CELL[C_CURR];
		    CELL[C_CURR]=.T_PTR[X_SUBX]
		    END
		END
	    ELSE
		LAST_NB=.STG_PTR
	    END
	ELSE
	IF!
	    .CHARACTER NEQ %C' '
	THEN
	    LAST_NB=.STG_PTR
	END;

    !End of line was reached
    FIND_POS(.SUBX_STG,CH$DIFF(.LAST_NB,.SUBX_STG),.SUBX_CNT);

    INSERT_INX(.SUBX_STG,CH$DIFF(.LAST_NB,.SUBX_STG),.XTN_NUMBER,.SUBX_CNT)

    END;			!End of XOUT

ROUTINE XSETUP :NOVALUE =	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	Initialize the index processor.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NDXSGE 		- marker at end of work storage
!	SUBX_STG	- pointer to sub-index string
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	One null entry is placed in each bucket.
!
!--

    BEGIN

    LOCAL
	TEMP_BUF:	BLOCK[X_ENTRY];

    GPOOL(NDXPOL,200);		!Generate a pool with space for 200 segments.
    NDXSGE=0;			!Pool is empty, but allocated.
    NDXSGF=0;			!...

    !Fill in constant parts of bucket entry
    TEMP_BUF[X_PREV]=0;
    TEMP_BUF[X_NEXT]=0;
    TEMP_BUF[X_SUBX]=0;
    TEMP_BUF[X_SUBC]=0;
    TEMP_BUF[X_BARS]=FALSE;
    TEMP_BUF[X_REF]=0;
    TEMP_BUF[X_TEXT]=0;

    !Now place one entry in each bucket
    INCR I FROM 0 TO 26 DO
	!Place bucket entry in storage
	BUCKET[.I]=SAVE_DATA(TEMP_BUF,DS_X_ENTRY,X_ENTRY);

    SUBX_STG=0;

    END;			!End of XSETUP

ROUTINE CHRCMP (XA,XB,CASECMP,CHARCMP,EMPHCMP,REMAINDER_A,REMAINDER_B): NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
! CHRCMP compares two characters in RUNOFF internal format (i.e,
! as generated by SCANT).  It takes overstriking, underlining, and bolding into
! account when doing the comparison.  Basically, the comparison
! is done lexically, with the change that the characters which are
! not letters are lexically smaller than any letters.
! If two characters are identical except for their emphasis, the
! comparison is such that the character with the most emphasis is
! lexically smallest.  Underlining is considered to emphasize more
! than bolding, but less than both underlining and bolding together.
! Overstriking emphasizes more than underlining; but note that the
! overstriking sequence is NOT taken into account in the comparison.
! Upper case gives the most emphasis of all.
! Emphasis is always less significant than "naked character" differences.
!
! FORMAL PARAMETERS:
!
!	XA and XB are CH$PTRs to the characters to be compared.
!	CHARCMP - Returned as if computed by subtracting the internal
!		  representations of the characters, except that letters
!		  are "greater" than all other characters.
!	CASECMP - Returned as if computed by subtracting the
!		  "upper/lower caseness" of the characters.  Upper case
!		  has "value" 0, lower case 1.
!		  By definition, characters other than letters are in upper case.
!	EMPHCMP - Returned as SIGN(emphasis of A - emphasis of B) where
!		  each emphasis type requires one bit.  Overstriking has the value 4,
!		  underlining has the value 2 and bolding the value 1.
!	REMAINDER_A - the number of characters scanned in XA is subtracted from it.
!	REMAINDER_B - the number of characters scanned in XB in subtracted from it.
!
! IMPLICIT INPUTS:
!
!	The arrangement of the internal representation is implicit
!	in the algorithm.  Basically it assumes that the "naked"
!	character comes after the escape (=emphasis) sequences.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
! 	The result is returned as if it could be computed by
!	SIGN(.A-.B);
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    BIND
	PTR_A=.XA,
	PTR_B=.XB;

    LOCAL
	CA,
	CB,
	RA,
	RB;

    RA=0;				!Assume no emphasis for character A
    RB=0;				!Assume no emphasis for character B
    .CASECMP=0;				!Assume no case difference.
    .CHARCMP=0;				!Assume characters identical.
    .EMPHCMP=0;				!Assume no emphasis at all.

    WHILE 1 DO
	BEGIN
	CA=CH$RCHAR_A(PTR_A);
	.REMAINDER_A=..REMAINDER_A - 1;				!Subtract off scanned character.

	IF!
	    .CA EQL RINTES
	THEN
	    BEGIN
	    !Interpret escape sequence.
	    CA=CH$RCHAR_A(PTR_A);		!Long-file-name bug, V1(123).
	    .REMAINDER_A=..REMAINDER_A - 2;			!Subtract off scanned characters.
	    IF!
		.CA EQL %C'B'
	    THEN
	    !Emphasis value of bolding.
		RA=.RA OR 1
	    ELSE!
	    IF!
		.CA EQL %C'U'
	    THEN
	    !Emphasis value for underlining.
		RA=.RA OR 2
	    ELSE
	    IF!
		.CA EQL %C'O'
	    THEN
	    !Emphasis value for overstriking.
		RA=.RA OR 4;

	    CH$RCHAR_A(PTR_A);
	    END
	ELSE
	    BEGIN
	    IF!
		UPPER_LETTER(.CA)
	    THEN
		CA=LOWER_CASE(.CA)
	    ELSE
		.CASECMP=1;
	    EXITLOOP
	    END
	END;

    !Scan second character.
    WHILE 1 DO
	BEGIN
	CB=CH$RCHAR_A(PTR_B);
	.REMAINDER_B=..REMAINDER_B - 1;			!Subtract off scanned character

	IF!
	    .CB EQL RINTES
	THEN
	    BEGIN
	    !Interpret escape sequence.
	    CB=CH$RCHAR_A(PTR_B);		!Long-file-name bug, V1(123).
	    .REMAINDER_B=..REMAINDER_B - 2;		!Subtract off scanned characters
	    IF!
		.CB EQL %C'B'
	    THEN
	    !Emphasis value for bolding.
		RB=.RB OR 1
	    ELSE!
	    IF!
		.CB EQL %C'U'
	    THEN
		RB=.RB OR 2
	    ELSE!
	    IF!
		.CB EQL %C'O'
	    THEN
		RB = .RB OR 4;

	    CH$RCHAR_A(PTR_B);
	    END
	ELSE
	    BEGIN
	    IF!
		UPPER_LETTER(.CB)
	    THEN
		CB=LOWER_CASE(.CB)
	    ELSE
		.CASECMP=..CASECMP-1;
	    EXITLOOP
	    END
	END;

    !At this point, the "naked" characters are in CA and CB.
    !Decoded emphasis escape sequences are in RA and RB.

    !"Subtract" emphasis to get relationship.
    .EMPHCMP=SIGN(.RA-.RB);

    !Compare the "naked" part of the characters and
    !return the relationship.
    IF!					!If both characters are in lower case,
	LOWER_LETTER(.CA)		!... (checking for this possibility)
    THEN				!...
	IF!				!...
	    LOWER_LETTER(.CB)		!... (first was lower, is this one?)
	THEN				!...
	    .CHARCMP=SIGN(.CA-.CB)	!then return relationship between characters
	ELSE				!Otherwise
	    .CHARCMP=1			!second character (upper case) is "largest".
    ELSE!				!Similar logic if first character is uppercase.
	IF!
	    LOWER_LETTER(.CB)
	THEN
	    .CHARCMP=-1
	ELSE
	    .CHARCMP=SIGN(.CA-.CB);
    END;			!End of CHRCMP

ROUTINE CVT_LCUC (CHAR) =	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	Convert lower case to upper.
!
! FORMAL PARAMETERS:
!
!	CHAR - character to be converted
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Converted value of character
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    IF!
	.CHAR GEQ %C'a'!
	AND .CHAR LEQ %C'z'
    THEN
	RETURN .CHAR+%C'A'-%C'a';

    .CHAR

    END;			!End of CVT_LCUC

ROUTINE FIND_POS (STG_PTR,STG_LEN,SUB_CNT) :NOVALUE =	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	Locate the proper position in the master list for placing a new
!	item.  Also make sure the item is not a complete duplicate of an
!	existing entry.
!
! FORMAL PARAMETERS:
!
!	STG_PTR	- Address of input text.
!	STG_LEN	- Length of input text.
!	SUB_CNT - Sub-index level (0 to n)
!
! IMPLICIT INPUTS:
!
!	CELL		- Characteristics of current position in list
!
! IMPLICIT OUTPUTS:
!
!	CELL		- set up for insertion
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	CHARACTER,
	LINE_PTR,
	LIST_PTR;

    !Point to start of input text
    LINE_PTR=.STG_PTR;

    !Skip the bucket positioning for sub-indexes
    IF!
	.SUB_CNT EQL 0
    THEN
	BEGIN

	!Get the first character that is not a special sequence
	REPEAT
	    BEGIN

	    CHARACTER=CVT_LCUC(CH$RCHAR_A(LINE_PTR));

	    IF!
		.CHARACTER EQL RINTES
	    THEN
		BEGIN
		!Skip special sequence
		CH$RCHAR_A(LINE_PTR);
		CH$RCHAR_A(LINE_PTR)
		END
	    ELSE
		EXITLOOP
	    END;

	!Using the first non-special character, figure out which index
	!bucket is the right one to look into.
	IF!
	    .CHARACTER GEQ %C'A'!
	    AND .CHARACTER LEQ %C'Z'
	THEN
	    !Buckets 1 to 26 are alphabetic
	    LIST_PTR=.CHARACTER-%C'A'+1
	ELSE
	    !All other characters are in bucket zero.
	    LIST_PTR=0;

	!Now remember all of the information needed for future use.
	CELL[C_HEAD]=BUCKET[.LIST_PTR];
	CELL[C_CURR]=.BUCKET[.LIST_PTR];
	CELL[C_PREV]=0;
	CELL[C_IDNS]=FALSE;
	CELL[C_SUBX]=0
	END;

    !Now find the proper position for insertion
    REPEAT
	BEGIN

	LOCAL
	    CUR_CELL: REF BLOCK;

	!Point to data in storage
	CUR_CELL=GET_DATA(DS_X_ENTRY,.CELL[C_CURR]);

	!If this is the last item, return current position
	IF!
	    .CUR_CELL[X_NEXT] EQL 0!
	    AND .SUB_CNT EQL .CUR_CELL[X_SUBC]
	THEN
	    RETURN;

	!See if we are at the correct position for an insertion
	IF!
	    .SUB_CNT GTR .CUR_CELL[X_SUBC]
	THEN
	    RETURN;

	IF!
	    STRG_CMP(.STG_PTR,.STG_LEN)
	THEN
	    RETURN;

	!Make sure we still point at original data
	CUR_CELL=GET_DATA(DS_X_ENTRY,.CELL[C_CURR]);

	!Advance to next location
	CELL[C_CURR]=.CUR_CELL[X_NEXT]

	END

    END;			!End of FIND_POS

GLOBAL ROUTINE GET_DATA (DATASET,WSADDR) =	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	Get the internal address of a data item from the working storage.
!	Note that on -11s this routine could be replaced by an interface to
!	a work-file system.
!
! FORMAL PARAMETERS:
!
!	DATASET - Dataset name where data is to be found
!	WSADDR	- Address in dataset where data is to be found
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	The temporary in-core address of the data is returned.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    !This routine is almost null since storage is
    !permanently in core in this version
    .WSADDR

    END;			!End of GET_DATA

ROUTINE INSERT_INX (STRING,LNGTH,LINE,SUB_CNT) :NOVALUE =	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	Insert an index item into the index list.
!
! FORMAL PARAMETERS:
!
!	STRING	- Address of the string associated with the item.
!		  (zero is allowed).
!	LNGTH	- Length of the passed string.
!	LINE	- Transaction number of the page associated with this
!		  index item.
!	SUB_CNT	- Sub-index level of item (0 to n)
!
! IMPLICIT INPUTS:
!
!	CELL	- Information table about current position in list.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    IF!
	.CELL[C_IDNS]
    THEN
	!Identical string, add another page pointer to existing string
	BEGIN
	IF!
	    .LINE NEQ 0
	THEN
	    !There is a page pointer, so attach it.
	    BEGIN

		LOCAL
		    LINK,
		    REF_CELL: BLOCK[XX_ENTRY],
		    TEMP:	REF BLOCK;
	
		!Set up new ref cell
		REF_CELL[XX_PAGE]=.LINE;
		REF_CELL[XX_LINK]=0;
		LINK=SAVE_DATA(REF_CELL,DS_XX_ENTRY,XX_ENTRY);
	
		!Get current cell
		TEMP=GET_DATA(DS_X_ENTRY,.CELL[C_CURR]);
	
		IF!
		    .TEMP[X_REF] NEQ 0
		THEN	
		    BEGIN
		    !Get the start of the chain
		    TEMP=.TEMP[X_REF];
	
		    !Find the chain end
		    REPEAT
		        BEGIN
		        TEMP=GET_DATA(DS_XX_ENTRY,.TEMP);
	
		        IF!
		    	    .TEMP[XX_LINK] NEQ 0
		        THEN
		    	    TEMP=.TEMP[XX_LINK]
		        ELSE
		    	    EXITLOOP
	
		        END;
	
		    !Add new pointer to entry.
		    TEMP[XX_LINK]=.LINK
		    END
		ELSE
		    TEMP[X_REF]=.LINK;
	
		!Make sure it is updated in memory.
		UPDATE_DATA(.TEMP,DS_XX_ENTRY,.TEMP)
	
		END
	    END
    ELSE
	!String is different, insert new string
	BEGIN

	LOCAL
	    LAST_CELL,
	    NEXT_CELL,
	    REF_CELL:	BLOCK[XX_ENTRY],
	    REF_LINK,
	    TEMP:	REF BLOCK,
	    TEMP1,
	    TEMP_CELL: BLOCK[X_ENTRY];

	!Get links to chain
	TEMP=GET_DATA(DS_X_ENTRY,.CELL[C_CURR]);
	IF!
	    .SUB_CNT EQL .TEMP[X_SUBC]
	THEN
	    BEGIN
	    NEXT_CELL=.CELL[C_CURR];
	    LAST_CELL=.TEMP[X_PREV]
	    END
	ELSE
	    BEGIN
	    NEXT_CELL=0;
	    LAST_CELL=.CELL[C_CURR]
	    END;

	!Set up line number link
	IF!
	    .LINE NEQ 0
	THEN
	    BEGIN
	    REF_CELL[XX_LINK]=0;
	    REF_CELL[XX_PAGE]=.LINE;
	    REF_LINK=SAVE_DATA(REF_CELL,DS_XX_ENTRY,XX_ENTRY)
	    END
	ELSE
	    REF_LINK=0;

	!Start to set up new entry
	TEMP_CELL[X_PREV]=.LAST_CELL;
	TEMP_CELL[X_NEXT]=.NEXT_CELL;
	TEMP_CELL[X_SUBC]=.SUB_CNT;
	TEMP_CELL[X_BARS]=.BAR;
	TEMP_CELL[X_REF]=.REF_LINK;
	TEMP_CELL[X_SUBX]=0;

	!Remember text string also
	IF!
	    .STRING NEQ 0
	THEN
	    TEMP_CELL[X_TEXT]=SAVE_DATA(.STRING,DS_X_STRING,.LNGTH)
	ELSE
	    TEMP_CELL[X_TEXT]=0;

	!Now put away the entry proper
	TEMP1=SAVE_DATA(TEMP_CELL,DS_X_ENTRY,X_ENTRY);

	!Link to previous entry
	IF!
	    .LAST_CELL NEQ 0
	THEN
	    BEGIN
	    TEMP=GET_DATA(DS_X_ENTRY,.LAST_CELL);
	    IF!
		.SUB_CNT NEQ .TEMP[X_SUBC]
	    THEN
		TEMP[X_SUBX]=.TEMP1
	    ELSE
		TEMP[X_NEXT]=.TEMP1;
	    UPDATE_DATA(.TEMP,DS_X_ENTRY,.TEMP)
	    END
	ELSE
	    !Head of List
	    .CELL[C_HEAD]=.TEMP1;

	!Link to the following cell
	IF!
	    .NEXT_CELL NEQ 0
	THEN
	    BEGIN
	    TEMP=GET_DATA(DS_X_ENTRY,.NEXT_CELL);
	    TEMP[X_PREV]=.TEMP1;
	    UPDATE_DATA(.TEMP,DS_X_ENTRY,.TEMP)
	    END;

	!Remember where we left off
	CELL[C_CURR]=.TEMP1

	END

    END;			!End of INSERT_INX

ROUTINE SAVE_DATA (ADR,DATASET,SIZE) =	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	Place data item into work space.
!	Note that in this version all indexing information is
!	saved in core.  This routine could be replaced with
!	an interface to a work-file system on -11s.
!
! FORMAL PARAMETERS:
!
!	ADR	- Address of data to be saved
!	DATASET - Name of dataset where data will be stored
!	SIZE	- Number of characters (used only by DS_X_STRING)
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Work space address of data is returned.
!
! SIDE EFFECTS:
!
!	Work space pointers are updated
!
!--

    BEGIN

    MAP
	ADR: REF VECTOR;

    LOCAL
	WSADDR: REF VECTOR;

    !Handle strings differently from fixed length data
    IF!
	.DATASET NEQ DS_X_STRING
    THEN
	!Fixed length data
	BEGIN

	!Make sure there's sufficient dynamic memory to
	!accommodate this entry.
	X_INDEX_MEM(.DATASET);

	!Point to where data will be placed.
	WSADDR=.NDXSGE;			!At end of current segment.

	!Advance over allocated storage
	NDXSGE=.NDXSGE+.DATASET*%UPVAL;	!Point to next free memory in segment
	NDXSGF=.NDXSGF-.DATASET;	!Count off memory used.

	INCR I FROM 0 TO .DATASET-1 DO
	    WSADDR[.I]=.ADR[.I]

	END
    ELSE
	!Strings - variable length data
	BEGIN

	LOCAL
	    SRC_PTR,
	    WRD_PTR;

	!Ensure there's sufficient memory to accommodate this.
	X_INDEX_MEM(CH$ALLOCATION(.SIZE+1));

	!Point to where data will be placed.
	WSADDR=.NDXSGE;			!At end of current segment.

	!Advance over allocated storage
	NDXSGE=.NDXSGE+CH$ALLOCATION(.SIZE+1)*%UPVAL;	!Point past used memory.
	NDXSGF=.NDXSGF-CH$ALLOCATION(.SIZE+1);		!Count off used memory.

	!Set up string pointers
	SRC_PTR=.ADR;
	WRD_PTR=CH$PTR(.WSADDR);

	!Save length as part of string
	CH$WCHAR_A(.SIZE,WRD_PTR);

	!Store the string
	INCR I FROM 1 TO .SIZE DO
	    CH$WCHAR_A(CH$RCHAR_A(SRC_PTR),WRD_PTR)

	END;

    .WSADDR

    END;			!End of SAVE_DATA

ROUTINE STRG_CMP (STG_PTR,STG_LEN) =	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	Compare the passed string with the string pointed to by CELL.
!
! FORMAL PARAMETERS:
!
!	STG_PTR	- Address of string to be compared.
!	STG_LEN	- Length of string to be compared.
!
! IMPLICIT INPUTS:
!
!	CELL	- contains pointers to the list item for comparison.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	TRUE	- The Passed string is less than or equal to the string
!		  pointed to by CELL.
!	FALSE	- The passed string is greater than the one pointed to
!		  by CELL.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	CASECMP,
	CHARCMP,
	CHAR_CNT,
	COLUMN,
	EMPHCMP,
	ICASE,
	IEMPH,
	LINE_PTR,
	OLDCASE,
	OLDEMPH,
	STRG_PTR,
	REM_ENTRY,
	REM_INPUT,
	TEXT_PTR:	REF BLOCK;

    !Point to input line
    LINE_PTR=.STG_PTR;

    !Point to stored line
    TEXT_PTR=GET_DATA(DS_X_ENTRY,.CELL[C_CURR]);
    STRG_PTR=CH$PTR(.TEXT_PTR[X_TEXT]);

    !Get number of characters in internal line
    CHAR_CNT=CH$RCHAR_A(STRG_PTR);

!!!!Debugging code for comparing strings
!!!BEGIN
!!!EXTERNAL LITERAL RNFSTR;
!!!EXTERNAL ROUTINE PUTMSG;
!!!MACRO STRING_P (STRING) =
!!!CH$PTR(UPLIT(STRING)), %CHARCOUNT(STRING) %;
!!!
!!!PUTMSG (RNFSTR, STRING_P ('COMPARING:....') );
!!!PUTMSG (RNFSTR, STRING_P ('First string:') );
!!!PUTMSG (RNFSTR, .STRG_PTR, .CHAR_CNT);
!!!PUTMSG (RNFSTR, STRING_P ('Second string:') );
!!!PUTMSG (RNFSTR, .LINE_PTR, .STG_LEN);
!!!END;

    REM_ENTRY=.CHAR_CNT;				!Copy length of entry in the index
    REM_INPUT=.STG_LEN;					!Copy length of entry being input
    ICASE=0;						!No differences in case yet
    IEMPH=0;						!No differences in emphasis yet
    OLDCASE=0;						!No differences in case yet
    OLDEMPH=0;						!No differences in emphasis yet
    COLUMN=0;						!No print positions scanned yet.

    !Loop until done with both strings
    REPEAT
	BEGIN

	LOCAL
	    CHARACTER,
	    STRING_CHAR;


	!Update count of print columns, so positions of case and emphasis
	!differences can be remembered.
	COLUMN=.COLUMN+1;

	!Make sure neither string has run out.  If one has, this is
	!the place for insertion.
	IF!
	    (.REM_ENTRY LEQ 0)
	    OR (.REM_INPUT LEQ 0)
	THEN
	    !Check for exact string before leaving
	    BEGIN

	    IF!
		(.REM_ENTRY LEQ 0)
		AND (.REM_INPUT LEQ 0)
	    THEN
		!Both strings have run out.  They're identical if
		!there are no case or emphasis differences.
		CELL[C_IDNS]=(.ICASE EQL 0 AND .IEMPH EQL 0)
	    ELSE
		!Only one string has run out.  The longer of the two strings
		!is "greater" than the shorter string, or conversely, the
		!one that's run out is the "lesser" of the two.  Return TRUE
		!if the input string is the "lesser" of the two.
		RETURN (.REM_INPUT LEQ 0);

	    IF!
		.OLDEMPH NEQ 0
	    THEN
		RETURN (.OLDEMPH EQL -1)
	    ELSE
		IF!
		    .OLDCASE NEQ 0
		THEN
		    RETURN (.OLDCASE EQL -1)
		ELSE
		    RETURN TRUE;
	    END;

	CHRCMP(LINE_PTR,STRG_PTR,CASECMP,CHARCMP,EMPHCMP,REM_INPUT,REM_ENTRY);
	IF!
	    .CHARCMP NEQ 0
	THEN
	    RETURN (.CHARCMP EQL -1)
	ELSE
	    BEGIN
	    !Remember differences in the string so they can be
	    !applied if the string runs out.

	    !If there is a difference of cases, the very first place where
	    !case differs is the significant case difference.  All other
	    !positions are secondary.
	    IF!
		.ICASE EQL 0!
		AND .CASECMP NEQ 0
	    THEN
		(ICASE=.COLUMN;				!Remember column position where difference occurred
		 OLDCASE=.CASECMP);			!Remember what the case difference was.

	    !If there is a difference in emphasis, the very first place where
	    !emphasis differs is the significant emphasis difference.  All other
	    !positions are secondary.
	    IF!
		.IEMPH EQL 0!
		AND .EMPHCMP NEQ 0
	    THEN
		(IEMPH=.COLUMN;				!Remember column position where difference occurred.
		 OLDEMPH=.EMPHCMP);			!Remember what the difference in emphasis was.
	    END;

	END

    END;			!End of STRG_CMP

ROUTINE UPDATE_DATA (ADR,DATASET,WSADDR) :NOVALUE =	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	Replace an existing piece of data with a new one.
!	Entries in the string dataset cannot be updated.
!
! FORMAL PARAMETERS:
!
!	ADR	- Address of new data item.
!	DATASET	- Dataset name
!	WSADDR	- Work storage address of data to be replaced.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	New data replaces old in working storage
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	ADR: REF VECTOR,
	WSADDR: REF VECTOR;

    IF!
	.ADR EQL .WSADDR
    THEN
	RETURN;

    IF!
	.DATASET EQL DS_X_STRING
    THEN
	!Illegal call, generate error message and return
	!nyi
	RETURN;

    INCR I FROM 0 TO .DATASET-1 DO
	WSADDR[.I]=.ADR[.I]

    END;			!End of UPDATE_DATA

END				!End of module
ELUDOM
