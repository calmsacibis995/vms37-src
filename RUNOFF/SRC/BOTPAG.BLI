MODULE BOTPAG (					!
		IDENT = 'V03-000'
%BLISS32[,
	ADDRESSING_MODE(EXTERNAL=LONG_RELATIVE,NONEXTERNAL=LONG_RELATIVE)
	]
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY: RUNOFF document formatter
!
! ABSTRACT: Finishes that part of a page which occurs below the footnotes.
!
!
! ENVIRONMENT: Transportable
!
! AUTHOR: Rich Friday	 CREATION DATE: 6 November, 1981
!
! MODIFIED BY:
!
!	002	REM00002	Ray Marshall	2-December-1981
!		Merge in logic changes made since Rich took NEWPAG.BLI from
!		  which this was derived.
!		Fixup require file declarations so they now all come from REQ:
!		  and not the local directory.
!--

!
! TABLE OF CONTENTS:
!
FORWARD ROUTINE
    BOTPAG : NOVALUE,
    CPAGEB : NOVALUE;
!
! INCLUDE FILES:
!

REQUIRE 'REQ:BOOL.REQ';

REQUIRE 'REQ:GCA.REQ';

REQUIRE 'REQ:HCT.REQ';

REQUIRE 'REQ:LSTBTS.REQ';

REQUIRE 'REQ:PAGEN.REQ';

REQUIRE 'REQ:PHDEF.REQ';

REQUIRE 'REQ:TSF.REQ';
!
! MACROS:
!
! This macro makes certain that when blank lines at the top or bottom of a page
! are skipped change bars don't get output.
MACRO
    NO_BAR_SKIP (N) =
	BEGIN
	LOCAL
	    HOLD_BARS;
	HOLD_BARS = .TSF_BARS;
	TSF_BARS = FALSE;
	USKIPL (N);
	TSF_BARS = .HOLD_BARS;
	END			%;
!
! EQUATED SYMBOLS:
!

!
! OWN STORAGE:
!
!
! EXTERNAL REFERENCES:
!

EXTERNAL
    GCA : GCA_DEFINITION,
    HCT : HCT_DEFINITION,
    PAGEN : PAGE_DEFINITION,
    PHAN : PHAN_DEFINITION,
    TPAGER : BLOCKVECTOR [1,PAGE_SCT_SIZE],	!List of terminating pages.
    TSF : TSF_DEFINITION;

EXTERNAL ROUTINE
    OUTTXT,
    PACBAS,
    PACPAG,
    PAGFND,
    USKIPL;


GLOBAL ROUTINE BOTPAG : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	See ABSTRACT, above.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    !Output and center page number at bottom of page if
    !the user has specified that page layout.
    IF						!
	(.HCT_LAYOUTN NEQ 0)
	AND (.PHAN_LINES_TP NEQ 0)		!There must be something on the page.
    THEN
	CPAGEB ();

    !We've just finished the bottom of a page.  And we know how many
    !lines it contains.  At this point we need to remember exactly how many
    !physical lines were written so that /SIMULATE can get to the top of
    !the next page later.  Note that we can't simply go there because we
    !may be skipping pages due to a /PAGES switch;  that means that
    !the next physical page might not occur until several pages later,
    !if it occurs at all.
    IF 						!
	NOT .GCA_SKIP_OUT
    THEN
	PHAN_BOTTOM = .PHAN_LINES_TP;		!Save current count.

    !If currently generating output, but there is a list of
    !pages to be output, see if the page just finished terminates
    !a particular list of pages.  If so, turn off output.
    IF!
	.GCA_ORANGE_CNT NEQ 0
    THEN
	IF!
	    NOT .GCA_SKIP_OUT
	THEN
	!See if output should be turned off right now.
	    GCA_SKIP_OUT = (PAGFND(PAGEN,TPAGER,.GCA_ORANGE_CNT, FALSE) NEQ 0);

    END;					!End of BOTPAG

GLOBAL ROUTINE CPAGEB :NOVALUE =	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine centers and outputs the page number at the bottom of the
!	page.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	HOLD_TOP_PAGE,
	HOLD_PAGING;

    !If the user doesn't want page numbers then just return.  This
    !means that if he says .NO NUMBER, but says to center the page number
    !at the bottom, he still gets the white space.
    IF						!
	(NOT .HCT_NUMBER_PAGE)			!
	AND (.HCT_LAYOUT NEQ LAYOUT_RUN_BOTC)	!Generate the number if user wants running page numbers
    THEN
	RETURN;

    !Turn off paging so a new page is not accidentally started.
    HOLD_PAGING = .PHAN_PAGING;
    HOLD_TOP_PAGE = .PHAN_TOP_PAGE;
    PHAN_PAGING = FALSE;
    PHAN_TOP_PAGE = FALSE;

    !Position down to fill all lines except line where the page number goes.
    NO_BAR_SKIP (.PHAN_LLINES - (1 + .PHAN_LINES_TP));

    !Now generate the page number in a temporary buffer.
    BEGIN
    LOCAL
	WORK_AREA : VECTOR[CH$ALLOCATION(100)],
	WORK_LENGTH,
	WORK_PTR;

    WORK_PTR = CH$PTR (WORK_AREA);

     !Generate either the running page number between a dash-space combination,
     !or the regular page number.
    IF
	.HCT_LAYOUT EQL LAYOUT_RUN_BOTC
    THEN
	!User wants a running page number output.
	BEGIN
	!First generate "- " (dash space)
	CH$WCHAR_A (%C'-', WORK_PTR);
	CH$WCHAR_A (%C' ', WORK_PTR);
	WORK_LENGTH = 2;
	!Now insert the running page counter.
	WORK_LENGTH = .WORK_LENGTH + PACBAS (.PAGEN [SCT_RUN_PAGE], WORK_PTR, 10);
	!Now follow with " -" (space dash)
	CH$WCHAR_A (%C' ', WORK_PTR);
	CH$WCHAR_A (%C'-', WORK_PTR);
	WORK_LENGTH = .WORK_LENGTH + 2;
	END
    ELSE
	!Center the normal page number at the bottom.
	WORK_LENGTH = PACPAG (PAGEN, WORK_PTR);	!Convert page number and get length.

    !Finally, output the page number, centered.
    OUTTXT (CH$PTR(WORK_AREA), .WORK_LENGTH,.GCA_LWIDTH);
    END;

    !Now restore the paging status and return.
    PHAN_PAGING = .HOLD_PAGING;
    PHAN_TOP_PAGE = .HOLD_TOP_PAGE;
    END;			!End of CPAGEB

END						!End of module BOTPAG

ELUDOM
