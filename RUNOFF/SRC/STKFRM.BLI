MODULE STKFRO (					!
		IDENT = 'V03-000'
%BLISS32[,
	ADDRESSING_MODE(EXTERNAL=LONG_RELATIVE,NONEXTERNAL=LONG_RELATIVE)
	]
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY: RUNOFF document formatter
!
! ABSTRACT: Used by .NOTE, .LIST, .END NOTE and .END LIST to save/restore
!		various formatting information.
!
!
! ENVIRONMENT: Transportable
!
! AUTHOR: R.W.Friday	 CREATION DATE: June, 1978
!
! MODIFIED BY:
!
!--

!
! TABLE OF CONTENTS:
!
!
! INCLUDE FILES:
!

REQUIRE 'REQ:BOOL.REQ';

REQUIRE 'REQ:FRMSTK.REQ';

REQUIRE 'REQ:GCA.REQ';

REQUIRE 'REQ:IRAC.REQ';

REQUIRE 'REQ:RUNHAN.REQ';

REQUIRE 'REQ:SCA.REQ';

!
! MACROS:
!
!
! EQUATED SYMBOLS:
!
!
! OWN STORAGE:
!
!
! EXTERNAL REFERENCES:
!

EXTERNAL
    FRMSTD,
    FRMSTK : FORM_STACK,
    GCA : GCA_DEFINITION,
    IRAC : IRAC_DEFINITION,
    SCA : SCA_DEFINITION;

EXTERNAL LITERAL 				!Error messages
    RNFNSF,
    RNFSTD,
    RNFUME;

EXTERNAL ROUTINE
    ERM,
    ERMA,
    PNTBAC;


GLOBAL ROUTINE STKFRM (HANDLER_CODE) : =

!++
! FUNCTIONAL DESCRIPTION:
!
!	See ABSTRACT, above.
!
! FORMAL PARAMETERS:
!
!	Handler_code indicates which command requires formatting
!	information to be stacked or unstacked.
!	The value 0 means push without checking; the value -1
!	means pop without checking.  These two values are provided
!	for the indexing routines, which have to save this information.
!	Values -1 and 0 are also used for handling literals.
!	When FRMSTK is allocated, there will be one extra place allocated
!	so that at least one entry will remain, even when .NOTES
!	and .LISTS are nested to their limits.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Returns TRUE if no errors were detected.  Returns FALSE
!	if the operation was not done.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    SELECT .HANDLER_CODE OF
	SET

	[H_NOTE, H_LIST] :
	    BEGIN

	    IF 					!
		.FRMSTD EQL FRMSTK_LIMIT
	    THEN
		BEGIN				!Ignore command because of stack overflow
		ERMA (RNFSTD, FALSE);
		RETURN FALSE;
		END;

	    END;

	[0, H_NOTE, H_LIST] :
	    BEGIN
	    !Save items on stack.
	    FRMSTD = .FRMSTD + 1;
	    FRMSTK [.FRMSTD, FRMSTK_FILL]	= .SCA_FILL;
	    FRMSTK [.FRMSTD, FRMSTK_JUSTIFY]	= .SCA_JUSTIFY;
	    FRMSTK [.FRMSTD, FRMSTK_CROCK]	= .SCA_CROCK;
	    FRMSTK [.FRMSTD, FRMSTK_RM]		= .SCA_RM;
	    FRMSTK [.FRMSTD, FRMSTK_LM]		= .SCA_LM;
	    FRMSTK [.FRMSTD, FRMSTK_SPACING]	= .SCA_SPACING;
	    FRMSTK [.FRMSTD, FRMSTK_COMMAND]	= .HANDLER_CODE;
	    FRMSTK [.FRMSTD, FRMSTK_ISEQN]	= .IRAC_ISEQN;
	    FRMSTK [.FRMSTD, FRMSTK_IPAGEN]	= .IRAC_IPAGEN;
	    FRMSTK [.FRMSTD, FRMSTK_FSPECP]	= .IRAC_FSPECP;
	    FRMSTK [.FRMSTD, FRMSTK_FSPECC]	= .IRAC_FSPECC;
	    FRMSTK [.FRMSTD, FRMSTK_REQ_D]	= .GCA_REQ_DEPTH;
	    FRMSTK [.FRMSTD, FRMSTK_DO_NBITS]	= .SCA_DO_NBITS;
	    FRMSTK [.FRMSTD, FRMSTK_KER]	= .SCA_KER;
	    FRMSTK [.FRMSTD, FRMSTK_INDEX]	= .SCA_INDEX;
	    RETURN TRUE;
	    END;
!
	!Some general error checking before popping the stack

	[H_END_NOTE, H_END_LIST] :
	    BEGIN

	    IF 					!
		.FRMSTD EQL 0
	    THEN
		BEGIN				!The stack is empty
		ERMA (RNFUME, FALSE);
		RETURN FALSE;
		END;

	    END;

	[H_END_NOTE] :
	    BEGIN

	    IF 					!
		.FRMSTK [.FRMSTD, FRMSTK_COMMAND] NEQ H_NOTE
	    THEN
		BEGIN				!The entry was not made by a .NOTE command.
		ERMA (RNFUME, FALSE);
		PNTBAC ();
		RETURN FALSE;
		END;

	    END;

	[H_END_LIST] :
	    BEGIN

	    IF 					!
		.FRMSTK [.FRMSTD, FRMSTK_COMMAND] NEQ H_LIST
	    THEN
		BEGIN				!The entry was not made by a .LIST command.
		ERMA (RNFUME, FALSE);
		PNTBAC ();
		RETURN FALSE;
		END;

	    END;
!
	!Pop the stack.  Give a warning message if the .END command is not
	!in the same file as the command that started the list or note.

	[H_END_NOTE, -1, H_END_LIST] :
	    BEGIN

	    IF 					!
		.FRMSTK [.FRMSTD, FRMSTK_REQ_D] NEQ .GCA_REQ_DEPTH
	    THEN
		BEGIN
		ERMA (RNFNSF, FALSE);
		PNTBAC ();
		END;

	    !Restore items from stack.
	    SCA_FILL	= .FRMSTK [.FRMSTD, FRMSTK_FILL];
	    SCA_JUSTIFY	= .FRMSTK [.FRMSTD, FRMSTK_JUSTIFY];
	    SCA_CROCK	= .FRMSTK [.FRMSTD, FRMSTK_CROCK];
	    SCA_RM	= .FRMSTK [.FRMSTD, FRMSTK_RM];
	    SCA_LM	= .FRMSTK [.FRMSTD, FRMSTK_LM];
	    SCA_SPACING	= .FRMSTK [.FRMSTD, FRMSTK_SPACING];
	    SCA_DO_NBITS= .FRMSTK [.FRMSTD, FRMSTK_DO_NBITS];
	    SCA_KER	= .FRMSTK [.FRMSTD, FRMSTK_KER];
	    SCA_INDEX	= .FRMSTK [.FRMSTD, FRMSTK_INDEX];
	    FRMSTD	= .FRMSTD - 1;
	    RETURN TRUE;
	    END;
	TES;
	TRUE
    END;					!End of STKFRM

END						!End of module

ELUDOM
