MODULE NMOOOO (					!
		IDENT = 'V03-000'
%BLISS32[,
	ADDRESSING_MODE(EXTERNAL=LONG_RELATIVE,NONEXTERNAL=LONG_RELATIVE)
	]
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY: RUNOFF document formatter
!
! ABSTRACT: Processes .NUMBER PAGE,	.NUMBER SUBPAGE,
!		      .NUMBER INDEX,	.NUMBER CHAPTER,
!		      .NUMBER APPENDIX, .NUMBER LIST, and
!		      .NUMBER LEVEL commands.
!
!
! ENVIRONMENT: Transportable
!
! AUTHOR: R.W.Friday	 CREATION DATE: June, 1978
!
! MODIFICATION HISTORY: 
!
! MODIFIED BY:
!
!	008	RWF000008	Rich Friday	4-September-1981
!		Modify .NUMBER LIST to add support of the directive without
!		  the numeric parameter (i.e. .NMLS FOOBAR is equivalent to
!		  .NMLS #,FOOBAR).  If the number is specified, it still has
!		  the same meaning; but not that, where before, the comma was
!		  required, it isn't any longer.  This directive now accepts
!		  the same format as the other .NUMBER directives.
!
!	007	REM000007	Ray Marshall	25-August-1981
!		Added .NUMBER RUNNING to the list of directives that do NOT
!		  turn on page numbering on the next page.
!
!	006	REM000006	Ray Marshall	14-July-1981
!	     	Bug fix:  If .NUMBER PAGE set an even page number under the 
!		  following circumstances: in layout 2,
!			headers turned off,
!			on an odd numbered page.
!		  Subsequently enabling headers for the next page (and even
!		  one) will cause the header text to appear on the wrong side
!		  of the new page! The problem was the odd/even flag
!		  (HCT_ODD_EVEN) not being set.
!
!        *** I don't know what happened in versions 02 thru 005  /  REM ***
!
!	001	KAD0001	K. A. Dawson	
!		For[VERSION 1(124) <-- Keith's comment]
!     		Bug fixes:
!
!		- list numbering now uses a local variable
!
!		- number list and number level no longer turn on page numbering
!		  ('10 compatibility cludge).
!--

!
! TABLE OF CONTENTS:
!
!
! INCLUDE FILES:
!

REQUIRE 'REQ:BOOL.REQ';

REQUIRE 'REQ:CLIST.REQ';

REQUIRE 'REQ:FSPACK.REQ';

REQUIRE 'REQ:GCA.REQ';

REQUIRE 'REQ:GSLUCC.REQ';

REQUIRE 'REQ:HCT.REQ';

REQUIRE 'REQ:NMLST.REQ';

REQUIRE 'REQ:NUMPRM.REQ';

REQUIRE 'REQ:PAGEN.REQ';

REQUIRE 'REQ:PHDEF.REQ';

REQUIRE 'REQ:RUNHAN.REQ';

!
! MACROS:
!
!
! EQUATED SYMBOLS:
!
!
! OWN STORAGE:
!
!
! EXTERNAL REFERENCES:
!

EXTERNAL
    FS01 : FIXED_STRING,
    GCA : GCA_DEFINITION,
    HCT : HCT_DEFINITION,
    HLLIST : COUNTED_LIST,
    IRA : FIXED_STRING,
    LSTCNT : REF COUNTED_LIST,
    NMLST : NUMBER_LIST,
    NPAGEN : PAGE_DEFINITION,
    NUMPRM : NUMPRM_DEFINE,
    PAGEN : PAGE_DEFINITION,
    PHAN : PHAN_DEFINITION;

!

EXTERNAL LITERAL 				!Error messages
    RNFILC,
    RNFINM;

EXTERNAL ROUTINE
    CONVLB,
    ERMA,
    GLNM,
    GSLU,
    RSKIPS;


GLOBAL ROUTINE NM (HANDLER_CODE) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	See the ABSTRACT, above.
!
! FORMAL PARAMETERS:
!
!	HANDLER_CODE indicates which command is to processed.
!
! IMPLICIT INPUTS:
!
!	NUMPRM contains a number, as processed by GETNUM.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN
    !Except for NUMBER LIST, NUMBER LEVEL, and NUMBER RUNNING; all these
    ! directives turn on page numbering on the next page, at the latest.
    IF
	    (.HANDLER_CODE NEQ H_NUMBER_LIST)
	AND (.HANDLER_CODE NEQ H_NUMBER_LEVEL)
	AND (.HANDLER_CODE NEQ H_NUMBER_RUNNIN)
    THEN
	BEGIN
	HCT_NMPG_NP = TRUE;
	!At the top of the first page, or in the middle of a page
	!turn on page numbering immediately.
	IF
	    .PHAN_TOP_FIRST
	    OR NOT .PHAN_TOP_PAGE
	THEN
	    HCT_NUMBER_PAGE = TRUE;
	END;

    !Process the specified command.
    SELECTONE .HANDLER_CODE OF
	SET

	[H_NUMBER_APPEND, H_NUMBER_CHAPTE] :
	    BEGIN
	    LOCAL
		SECTION_NUMBER,
		SECTION_TYPE;

	    !Ignore command if an illegal number was given.
	    IF					!
		NOT .NUM_RESULT
	    THEN
		RETURN;

	    !Compute which type of major section is being defined
	    IF					!
		.HANDLER_CODE EQL H_NUMBER_APPEND
	    THEN
		SECTION_TYPE = SCT_APPEND
	    ELSE
		SECTION_TYPE = SCT_CHAPT;

	    !Assume user gives neither a number or a letter.
	    SECTION_NUMBER = 0;

	    !Signal that this document has major sections
	    GCA_CHAPT = TRUE;

	    !Try to get a string of letters if the user didn't supply a number.
	    IF					!
		.NUM_LENGTH EQL 0
	    THEN
		BEGIN
		LOCAL
		    GSLU_RESULT;

		!Initialize the temporary fixed string where the result is returned.
		FS_INIT(FS01);

		!Now try to get an appendix name specified as a string of letters.
		GSLU_RESULT = GSLU (IRA, FS01);

		!If the user specified a string of letters convert to binary representation.
		IF				!
		    .GSLU_RESULT NEQ GSLU_NONE
		THEN
		    SECTION_NUMBER = CONVLB (.FS_START(FS01), .FS_LENGTH(FS01) );

		END
	    ELSE
		SECTION_NUMBER = .NUM_VALUE;

	    !See if starting SECTION_TYPE for the first time, or already SECTION_TYPE.
	    IF					!
		.NPAGEN [SCT_TYP] EQL .SECTION_TYPE
	    THEN
		!Already doing SECTION_TYPE.
		BEGIN
		IF				!
		    (.SECTION_NUMBER EQL 0)
		    AND (.NUM_LENGTH EQL 0)
		THEN
		    !User said .NUMBER 'SECTION_TYPE', and we're already in 'SECTION_TYPE' mode,
		    !and he didn't specify any particular section number.  So he's
		    !effectivally said nothing new.  Everything's finished, so return
		    RETURN
		ELSE
		    BEGIN
		    !Distinguish between an absolute setting and an adjustment.
		    IF				
			.NUM_SIGN
		    THEN
			!User gave an adjustment.
			SECTION_NUMBER = ABS (.SECTION_NUMBER + .NPAGEN [SCT_NUMBER]);
		    !Save section number.
		    NPAGEN [SCT_NUMBER] = .SECTION_NUMBER;
		    END;
		END
	    ELSE
		!Not already a 'SECTION_TYPE'.
		BEGIN
		NPAGEN [SCT_TYP] = .SECTION_TYPE; !Make section a SECTION_TYPE
		NPAGEN [SCT_NUMBER] = ABS (.SECTION_NUMBER);
		END;

	    IF 					!
		.PHAN_TOP_FIRST
	    THEN
	    !Numbering takes effect immediately
		BEGIN
		PAGEN [SCT_TYP] = .SECTION_TYPE;
		PAGEN [SCT_NUMBER] = .SECTION_NUMBER;
		END;

	    !Signal that a specified chapter/appendix number is pending.
	    GCA_PCHAX = TRUE;
	    END;
!

	[H_NUMBER_INDEX] :
	    BEGIN
	    !NOTE:   It is sufficient to set SCT_TYP as shown to get the
	    !	     page numbering to be done correctly.  However, SCT_NUMBER
	    !	     must be cleared if PAGEQL is not to screw up later.

	    IF 					!
		.PHAN_TOP_FIRST
	    THEN
		!At top of first page this takes effect immediately.
		BEGIN
		PAGEN [SCT_NUMBER] = 0;
		PAGEN [SCT_TYP] = SCT_INDEX;
		END;

	    NPAGEN [SCT_NUMBER] = 0;
	    NPAGEN [SCT_TYP] = SCT_INDEX;
	    END;
!

	[H_NUMBER_LEVEL] :
	    BEGIN
	    !Get no more numbers than there are header levels.
	    GLNM (.HLLIST [CL_MAX_INDEX]);

	    INCR I FROM 1 TO .NMLST_COUNT DO
		BEGIN
		HLLIST [CL_INDEX] = .I;

		CASE .NMLST_DESCR (.I) FROM 0 TO 4 OF
		    SET

		    [NM_BAD] :
			BEGIN
			0
			END;

		    [NM_UNSIGNED] :
			BEGIN
			HLLIST [.I] = .NMLST_VALUE (.I);
			END;

		    [NM_NULL] :
			BEGIN
			0
			END;

		    [NM_PLUS, NM_MINUS] :
			BEGIN

			IF 			!
			    HLLIST [.I] + .NMLST_VALUE (.I) GEQ 0
			THEN
			    HLLIST [.I] = .HLLIST [.I] + .NMLST_VALUE (.I)
			ELSE
			    ERMA (RNFINM, FALSE)

			END;
		    TES;

		END;

	    HLLIST [.HLLIST [CL_INDEX]] = .HLLIST [.HLLIST [CL_INDEX]] - 1;
	    END;
!

	[H_NUMBER_LIST] :
	    BEGIN
	    LOCAL
		LIST_DEPTH;			!
	    !Set up defaults.  It's ok to have no numbers,
	    !so that will never get checked for.
	    NMLST_DESCR (1) = NM_NULL;
	    NMLST_DESCR (2) = NM_NULL;
	    GLNM (2);				!Now get parameters

	    !Sort out the following command formats:
	    !.NMLS
	    !.NMLS 1,2
	    !.NMLS foobar
	    !.NMLS 2
	    !.NMLS ,foobar
	    !.NMLS 1,foobar
	    !.NMLS 1 foobar
	    !All the various formats will be put into the "two parameter" format.

	    !This code checks to see if the GLNM scan stopped at character string foobar.
	    !The reason for this is that the number list scanning stops when it doesn't find a number.
	    !We want to allow the user to specify a letter string as a counter in this command.
	    IF
		(.NMLST_COUNT EQL 0)		!Found absolutely nothing resembling a number. MIGHT be .NMLS foobar
		OR (.NMLST_COUNT EQL 1)		!Might be .NMLS 1 foobar i.e., missing comma.
		OR ( (.NMLST_COUNT EQL 2)	!There were two arguments given, but
		  AND (.NMLST_DESCR (2) EQL NM_NULL)) !couldn't locate the second number. Might be .NMLS 1, foobar
	    THEN
		!Check to see if the reason nothing was found is that
		!a string of letters was given as a counter, instead of just a number.
		BEGIN
		FS_INIT (FS01);			!Initialize temporary fixed string.

		!Now, try to get a string of letters
		IF
		    GSLU (IRA, FS01) EQL GSLU_NORMAL
		THEN
		    !Guessed right!!!  The user gave a string of letters as a counter.
		    !Now convert to their numerical equivalent.
		    BEGIN
		    NMLST_VALUE (2) = CONVLB (.FS_START (FS01), .FS_LENGTH (FS01));
		    !Fake out the following code by telling it two arguments were given.
		    NMLST_DESCR (2) = NM_UNSIGNED;
		    NMLST_COUNT = 2;
		    END;
		END;
	    !At this point we've sorted out the following .NMLS dialects
	    !.NMLS (no arguments)
	    !.NMLS , (no arguments)
	    !.NMLS foobar
	    !.NMLS ,foobar
	    !.NMLS 1,foobar
	    !.NMLS 1 foobar
	    !.NMLS 1,2
	    !For all those cases, the value the next .LE command is to generate, if given,
	    !is in NMLST_VALUE (2), and the list depth is in NMLST_VALUE (1).

	    !Check for just a single number, nothing following.
	    IF
		.NMLST_COUNT EQL 1
	    THEN
		!Move the counter to the second position.
		BEGIN
		NMLST_VALUE (2) = .NMLST_VALUE (1);
		NMLST_DESCR (2) = .NMLST_DESCR (1);
		NMLST_DESCR (1) = NM_NULL;		!Cause the following code to ignore first argument.
		END;


	    !At this point all the valid variations of .NMLS have been sorted out
	    !and the arguments have been put in NMLST_VALUE (1) and NMLST_VALUE (2).
	    !From this point on, RUNOFF thinks the user said .NMLS n,m.

	    !Process first parameter, that indicates which
	    !list element counter is being set.
	    CASE .NMLST_DESCR (1) FROM 0 TO 4 OF
		SET

		[NM_BAD] :
		    BEGIN
		    RETURN;
		    END;

		[NM_PLUS, NM_MINUS] :
		    BEGIN
		    NMLST_VALUE (1) = .NMLST_VALUE (1) + .LSTCNT [CL_INDEX];
		    END;

		[NM_NULL] :
		    BEGIN
		    NMLST_VALUE (1) = .LSTCNT [CL_INDEX];
		    END;

		[NM_UNSIGNED] :
		    BEGIN
		    0
		    END;
		TES;

	    IF 					!
		.NMLST_VALUE (1) LEQ 0		!
		OR .NMLST_VALUE (1) GTR .LSTCNT [CL_MAX_INDEX]
	    THEN
		BEGIN
		ERMA (RNFINM, FALSE);
		RETURN;
		END;

	    LIST_DEPTH = .NMLST_VALUE (1);
!
	    !Process second parameter, that sets up the
	    !list element counter value.

	    CASE .NMLST_DESCR (2) FROM 0 TO 4 OF
		SET

		[NM_BAD] :
		    BEGIN
		    RETURN;
		    END;

		[NM_NULL] :
		    BEGIN
		    NMLST_VALUE (2) = .LSTCNT [.LIST_DEPTH] + 1;	!Add 1 to offset the -1 later.
		    END;

		[NM_PLUS, NM_MINUS] :
		    BEGIN
		    NMLST_VALUE (2) = .NMLST_VALUE (2) + .LSTCNT [.LIST_DEPTH];
		    END;

		[NM_UNSIGNED] :
		    BEGIN
		    0
		    END;
		TES;

	    IF 					!
		.NMLST_VALUE (2) LSS 0
	    THEN
		BEGIN
		ERMA (RNFINM, FALSE);
		RETURN;
		END;

	    !When assigning the value, subtract one
	    !to anticipate the .LIST ELEMENT
	    !command that will increment it.
	    LSTCNT [.LIST_DEPTH] = .NMLST_VALUE (2) - 1;
	    END;
!

	[H_NUMBER_SUBPAG, H_NUMBER_PAGE, H_NUMBER_RUNNIN] :
	    BEGIN

	    LOCAL
		X;				!Copy of page/subpage/running-page to be updated

	    !Copy the counter which is to be updated.
	    IF 					!
		.PHAN_TOP_FIRST
	    THEN
		!Start with this page
		IF			!
		     .HANDLER_CODE EQL H_NUMBER_SUBPAG
		THEN
		     !Copy subpage counter from current page
		     X = .PAGEN [SCT_SUB_PAGE]
		ELSE
		    IF
			.HANDLER_CODE EQL H_NUMBER_RUNNIN
		    THEN
			!Copy running page number for current page
			X = .PAGEN [SCT_RUN_PAGE]
		    ELSE
			 !Copy page counter from current page
			 X = .PAGEN [SCT_PAGE]
	    ELSE
		!Start it on next page
		IF				!
		    .HANDLER_CODE EQL H_NUMBER_SUBPAG
		THEN
		    !Get subpage counter from next page
		    X = .NPAGEN [SCT_SUB_PAGE]
		ELSE
		    IF
			.HANDLER_CODE EQL H_NUMBER_RUNNIN
		    THEN
			!Get running page counter from next page
			X = .NPAGEN [SCT_RUN_PAGE]
		    ELSE
			!Get page counter from next page
			X = .NPAGEN [SCT_PAGE];

	    IF 					!
		.NUM_RESULT
	    THEN
		BEGIN

		IF 				!
		    .NUM_SIGN NEQ 0
		THEN

		    X = .X + .NUM_VALUE

		ELSE

		    IF 				!
			.NUM_LENGTH NEQ 0
		    THEN
			X = .NUM_VALUE

		    ELSE
			!No number was given.  Try for letters.
			BEGIN
			FS_INIT(FS01);		!Initialize the temporary fixed string.

			!Now try to get a string of letters
			IF			!
			    GSLU (IRA, FS01) EQL GSLU_NONE
			THEN
			    !It's okay to say .NUMBER PAGE and not give a page number.
			    !The net result is that all that happens is that page numbering
			    !is turned on again.  (This happens as the result of the line of code
			    !just before the SELECT statement, above).  However, for
			    !subpages, a number must be given, since 0 is the same as no
			    !subpage specified.  In this case the program supplies a
			    !default value of 1.
			    BEGIN
			    IF						!
				.HANDLER_CODE EQL H_NUMBER_SUBPAG
			    THEN
				X = 1
			    END
			ELSE
			    !Convert letters to the binary internal form.
			    X = CONVLB (.FS_START (FS01), .FS_LENGTH (FS01))
			END

		END;
	    
	    !Validate the tentative page/subpage number
	    IF					!
		 ((.HANDLER_CODE EQL H_NUMBER_SUBPAG)	!ZERO is illegal only for .NUMBER SUBPAGE
		 AND (.X EQL 0))			!...
		OR
		(.X LSS 0)				!LSS 0 is always illegal
	    THEN
		BEGIN
		ERMA (RNFINM, TRUE);
		RETURN
		END;

	    !At this point X contains a valid counter.
	    !Now we need to put it where it will be picked up.
	    IF					!
		.HANDLER_CODE EQL H_NUMBER_SUBPAG
	    THEN
		!Save subpage counter
		IF				!
		    .PHAN_TOP_FIRST
		THEN
		    !Subpage number takes effect immediately
		    BEGIN
		    PAGEN [SCT_SUB_PAGE] = .X;
		    NPAGEN [SCT_SUB_PAGE] = .X + 1;
		    !Page numbers don't change while subpaging
		    NPAGEN [SCT_PAGE] = .PAGEN [SCT_PAGE];
		    END
		ELSE
		    !Subpage takes effect on next page
		    BEGIN
		    NPAGEN [SCT_SUB_PAGE] = .X;
		    !Page numbers don't change while subpaging
		    NPAGEN [SCT_PAGE] = .PAGEN [SCT_PAGE];
		    END
	    ELSE
		IF
		    .HANDLER_CODE EQL H_NUMBER_RUNNIN
		THEN
		    !User said .NUMBER RUNNING
		    IF
			.PHAN_TOP_FIRST
		    THEN
			!The running page number takes effect immediately
			BEGIN
			PAGEN [SCT_RUN_PAGE] = .X;
			NPAGEN [SCT_RUN_PAGE] = .X + 1;
			END
		    ELSE
			!The running page number takes effect on the next page
			NPAGEN [SCT_RUN_PAGE] = .X
		ELSE
		    !User said .NUMBER PAGE, not .NUMBER SUBPAGE or .NUMBER RUNNING
		    BEGIN
		    HCT_ODD_EVEN = NOT (.X MOD 2);	! Set odd/even page number flag appropriately.
		    IF
			.PHAN_TOP_FIRST
		    THEN
			!Page number takes effect immediately
			BEGIN
			PAGEN [SCT_PAGE] = .X;
			NPAGEN [SCT_PAGE] = .X + 1;
			END
		    ELSE
			!Page number takes effect on the next page
			NPAGEN [SCT_PAGE] = .X;
		    END;

	    END;
	TES;

    END;					!End of NM

END						!End of module

ELUDOM
