MODULE POOLOO (	!
		IDENT = 'V03-000'
%BLISS32[,
	ADDRESSING_MODE(EXTERNAL=LONG_RELATIVE,NONEXTERNAL=LONG_RELATIVE)
	]
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY: RUNOFF document formatter
!
! ABSTRACT: Pooling for dynamic memory is supported.
!
!
! ENVIRONMENT: Transportable
!
! AUTHOR: R.W.Friday	 CREATION DATE: January, 1979
!
! MODIFIED BY: K. A. Dawson	DATE: July 1980
!
!	003	KAD00003	K. A. Dawson
! 		For VERSION 124 Changed ADDRESS= keyword to RESULT= for BL7 
!		of XPORT. kad.
!--
!
! TABLE OF CONTENTS:
!
FORWARD ROUTINE
    CPOOL:	NOVALUE,			!Free all memory in a pool.
    FPOOL:	NOVALUE,			!Free a pool and all storage.
    GPOOL:	NOVALUE,					!Get and initialize a pool
    IPOOL:	NOVALUE,			!Initialize an area as a pool control area.
    XPOOL;					!Extend a pool.

!
! INCLUDE FILES:
!
LIBRARY 'NXPORT:XPORT';

REQUIRE 'REQ:BOOL.REQ';

REQUIRE 'REQ:POOL.REQ';

!
! MACROS:
!

!
! EQUATED SYMBOLS:
!

!
! OWN STORAGE:
!

!
! EXTERNAL REFERENCES:
!
GLOBAL ROUTINE CPOOL (AREA) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	CPOOL deallocates all memory allocated to a pool.
!
! FORMAL PARAMETERS:
!
!	AREA is the address of the pool.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    BIND					!Point to start of segment list.
	SEGMENT_LIST = ..AREA + POOL_CNTRL_SIZE*%UPVAL;
    BIND					!AREA is the address of the pool.
	XAREA = ..AREA : POOL;
  
    !Don't try to clear an empty pool.
    IF!
	..AREA EQL 0
    THEN
	!Pool is empty, so don't try to clear it.
	RETURN;

    INCR I FROM 0 TO .XAREA [POOL_ACT_PADS] - 1 DO
	BEGIN
	BIND					!Point to a descriptor.
	    SEGMENT = SEGMENT_LIST + (.I*PAD_CNTRL_SIZE*%UPVAL) : PAD;
	
						!Free this chunk of memory.
	$XPO_FREE_MEM ( BINARY_DATA =
			(.SEGMENT[PAD_SIZE],		!Size of segment
			 .SEGMENT[PAD_ADDRESS]) );	!Start of segment.
	END;

    END;			!End of CPOOL

GLOBAL ROUTINE FPOOL (AREA) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Free an entire storage pool.  All the areas pointed to
!	by the active PADs are freed.  Then the pool area itself
!	is freed.
!
! FORMAL PARAMETERS:
!
!	AREA is the address of the POOL
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    BIND			!AREA is the address of the pool.
	XAREA = ..AREA : POOL;

    CPOOL (.AREA);		!First, deallocate all associated storate.

    !Don't try to free the pool if it's empty.
    IF!
	..AREA NEQ 0
    THEN
    !Pool is not empty, so carry on.
				!Free the pool itself too.
    $XPO_FREE_MEM ( BINARY_DATA =
			(.XAREA [POOL_ACT_SIZE],		!Size of segment.
			 ..AREA) );			!Start of segment.

    .AREA = 0;			!Clear pool pointer holder.

    END;			!End of FPOOL
GLOBAL ROUTINE GPOOL (AREA, COUNT) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	GPOOL generates a pool area and initializes it.
!
! FORMAL PARAMETERS:
!
!	AREA is set to the address of the generated pool.
!	COUNT is the number of extensions to be supported.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Returns TRUE if generation was successful, otherwise FALSE.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN
    LOCAL
	SIZE;

    SIZE = .COUNT*PAD_CNTRL_SIZE + POOL_CNTRL_SIZE;	!Physical size of pool control area.

    $XPO_GET_MEM (FULLWORDS =.SIZE, RESULT = .AREA);		!Allocate pool control area.
    IPOOL(.AREA, .SIZE);				!Initialize pool control area.
    END;			!End of GPOOL
GLOBAL ROUTINE IPOOL (AREA, SIZE) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	IPOOL initializes a pool area.
!
! FORMAL PARAMETERS:
!
!	AREA is the address of the generated pool.
!	SIZE is the number of BPVALs in the area.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    BIND
	XAREA = ..AREA : POOL;
   
						!Maximum number of areas.
    XAREA [POOL_MAX_PADS] = (.SIZE - POOL_CNTRL_SIZE)/PAD_CNTRL_SIZE;
    XAREA [POOL_ACT_SIZE] = .SIZE;		!Physical size of pool control area.
    XAREA [POOL_ACT_PADS] = 0;			!No areas yet.
    END;			!End of IPOOL
GLOBAL ROUTINE XPOOL (AREA,SIZE) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	XPOOL extends a dynamic storage pool by allocating a
!	block of dynamic storage and chaining it into the pool.
!
! FORMAL PARAMETERS:
!
!	AREA is the address of the pool to be extended.
!	SIZE is the number of BPVALS needed.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Returns address of start of new segment if one could be 
!	could be allocated.  Otherwise returns 0.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN


    BIND			!AREA is the address of the pool.
	XAREA = ..AREA : POOL;

    IF!
	.XAREA [POOL_ACT_PADS] EQL .XAREA [POOL_MAX_PADS]
    THEN
	!Pool has maximum number of PADs already.
	RETURN 0;

    BEGIN
    BIND			!Point to where descriptor gets built.
	NEW_PAD = ..AREA + %UPVAL*( (.XAREA [POOL_ACT_PADS] * PAD_CNTRL_SIZE) + POOL_CNTRL_SIZE ) : PAD;

				!Allocate the segment.
    $XPO_GET_MEM ( FULLWORDS = .SIZE, RESULT = NEW_PAD [PAD_ADDRESS]);
    NEW_PAD [PAD_SIZE] = .SIZE;	!Remember physical size of segment.
				!Update PAD count
    XAREA [POOL_ACT_PADS] = .XAREA [POOL_ACT_PADS] + 1;
    
				!Tell user where the segment is.
    RETURN .NEW_PAD [ PAD_ADDRESS];
    END;

    END;			!End of XPOOL
END				!End of module
ELUDOM
