%TITLE 'Process .BIX files into .RNX files'
MODULE TCXOOO (		!
		MAIN = TCX,
		IDENT = 'V03-000'
		%BLISS36[, ENVIRONMENT (TOPS10), VERSION='2(4)']
%BLISS32[,
	ADDRESSING_MODE(EXTERNAL=LONG_RELATIVE,NONEXTERNAL=LONG_RELATIVE)
	]
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY: RUNOFF document formatter
!
! ABSTRACT: Read and process a RUNOFF binary index file.
!
!
! ENVIRONMENT: Transportable
!
! AUTHOR: R.W.Friday	 CREATION DATE: February, 1979
!
! MODIFIED BY:
!
!	V2.0-4	REM00021	Ray Marshall	9-December-1981
!		Made $XPO_INPUT device handling more forgiving.  On
!		  encountering an end-of-file, the current and all successive
!		  questions will take the default and no more questions will
!		  be asked.  If the EOF is given to the "Specify input file:"
!		  query, we now gracefully exit without doing any processing.
!
!	V2.0-3	REM00020	Ray Marshall	3-December-1981
!	V(3)	Undo the .TMP file deletion implemented in V2.0-1.  It seems
!		  that file is used by many people to generate their own form
!		  of an index.
!		Also made changes to XPASSA changing .SKIPs to .BLANKs to
!		  comply with the conventions of the DOC-PREP group.
!
!	V2.0-2	REM00019	Ray Marshall	14-September-1981
!	V(2)	Previous fix for crash bug was bad idea.  In this version, we
!		  perform rather extensive testing for file format.  We now
!		  recognize files with no records, good files with no index
!		  records,  and most bad files.  These files will cause a
!		  WARNING to be issued, but will procede with processing.  This
!		  way, the user will then be asked "Additional input" as has
!		  always happened.
!		  XPASSA was also changed by breaking it into two routines:
!		  PREAMBLE_WRITE and XPASSA.  Within TCX, we now always call
!		  PREAMBLE_WRITE, but only call XPASSA if there are index
!		  entries to be processed.  This way, if there are no index
!		  entries, there will at least be an RNX file generated that
!		  can be processed by DSR.
!
!	V2.0-1	REM00018	Ray Marshall	13-September-1981
!	V(1)	Added %TITLE & %SBTTL directive to source.
!		Fixed bug where an empty input file or one in the wrong format
!		  (like an ASCII file instead of a .BIX) would cause TCX to
!		  abort with a register dump!  The problem was that no index
!		  entries were ever put into the internal table and later on
!		  in the processing sequence, the assumption(!) is made that
!		  something is there.  It now abort with an appropriate error
!		  message if no index entries are found after processing all
!		  input files.
!		Added code to delete the 001TCX.TMP file after it's closed.
!
!	V2.0	REM00017	Ray Marshall	14-August-1981
!	2(0)	Formated revision history to match VMS format.  Also, set
!		  version for new major release.
!
!	V1.36b	REM00016	Ray Marshall	22-April-1981
!	1.2(36)	Updated version # for release using XPORT V1.0.
!		Made Ident match version.
!		Modified prompts adding defaults:  Possible answers between []s
!						   Defaults between ()s
!
!	V1.36a	KAD00015	K. A. Dawson	July-1980
!	1.1(36)	Changed name of temporary file created, to 001TCX.TMP.
!
!	V1.35	KAD00014	K. A. Dawson
!	1(35)	Version number only changed for release.
!
!	V1.34b	KAD00013	K. A. Dawson
!	1.2(34)	Change only verison number for fix in XPASSB regarding counting
!		  of bold/underlined entries.
!
!	V1.34	KAD00012	K. A. Dawson
!	1(34)	AGAIN!  It's still 34a. Bliss-36 doesn't like letters in the
!		  IDENT string. IDENT is back to "12".
!
!	V1.34a	KAD00011	K. A. Dawson
!	1.1(34)	Limit number of CONFUSED messages.
!
!	V1.34	KAD00010	K. A. Dawson
!	1(34)	Bug fixed, XPASSA: line-width with _ and *.
!
!*** NOTE on the idents:  One can see that each modification shows two idents.
!	  The upper one is for PDP-11 and VAX versions.  The lower one is for
!	  TOPS-20 & TOPS-10.  See the note for KAD00012 above.
!--
!
! TABLE OF CONTENTS:
!
FORWARD ROUTINE
    TCX,
    PROCESS_FILE;

!
! INCLUDE FILES:
!
REQUIRE 'REQ:PAGEN.REQ';

LIBRARY 'NXPORT:XPORT';

!
! MACROS:
!

!
! EQUATED SYMBOLS:
!
GLOBAL LITERAL
    RINTES = %O'34' : UNSIGNED (8);

LITERAL
    NEW_SEQUENCE = 1,
    INDEX_XTN = 2,
    INDEX_ENTRY = 3;

!This literal defines which .BIX format is appropriate for this program.
LITERAL
    INDEX_FORMAT = 2;

LITERAL
    TRUE = 1,
    FALSE = 0;

!
! OWN STORAGE:
!
OWN
    NDXIOB : $XPO_IOB ();		!IOB for binary index file.

GLOBAL
    NDXOOB : $XPO_IOB (),
    TTIIOB : $XPO_IOB (),		!Terminal input.
    TTOIOB : $XPO_IOB (),		!Terminal messages.
    TMPIOB : $XPO_IOB ();		!Workfile for indexing.

GLOBAL
    PAGEN : PAGE_DEFINITION,
    NDXPOL : INITIAL(0),		!Address of indexing pool
    NDXSGE : INITIAL(0),		!End of current segment.
    NDXSGF : INITIAL(0),		!No storage in current segment.
    XTNCNT : INITIAL(0),		!Number of XTNTAB entries
    XTNLSP : INITIAL(0),
    XTNLSX : INITIAL(0),
    XTNPOL : INITIAL(0),
    XTNSGP : INITIAL(0),
    XTNTAB : INITIAL(0),		!List of transaction numbers assigned
    XPAGEN : INITIAL(0);

OWN
    HIGHEST_XTN_IN : INITIAL (0),	!Highest XTN input so far.
    HIGHEST_XTN_OUT : INITIAL (0),	!Highest XTN output so far.
    XTN_OFFSET : INITIAL (0);

OWN
    CONFUSE_COUNT : INITIAL (0),	!Vers. 34a -- count of number of CONFUSED messages.
    RUNNING_COUNT : INITIAL (FALSE),	!TRUE if running page counters wanted.
    SECTIONS : INITIAL (FALSE),		!TRUE if document contains sections, such as chapters.
    FILES_RECORD_COUNT,			!Count of records in current file.
    NEW_SEQUENCE_FOUND,			!TRUE if SEQUENCE record is found within PROCESS_FILE routine.
    UNKNOWN_RECORD_FOUND;		!TRUE if an unrecognizable record has been detected.
	
!
! EXTERNAL REFERENCES:
!
EXTERNAL ROUTINE
    ASGXTN,
    PREAMBLE_WRITE,
    XOUT,
    XPASSA,
    XPASSB;


%SBTTL 'Control routine -- file handling'
GLOBAL ROUTINE TCX =

!++
! FUNCTIONAL DESCRIPTION:
!
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	Implicit is the order in which records are written, and
!	the format of the file.
!		1.	Each record is really a group of records, hereafter
!			called a record-group.
!		2.	The first record of a record-group is a single
!			BLISS value indicating what the remainder of the
!			record-group contains.
!		3.	The remainder of a record-group consists of one
!			or more records.
!		4.	The very first record of the file indicates
!			that a new binary index follows.  The program
!			can key on this to sort out concatenated binary
!			indexes.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	I,			! Temporary working storage
	INDEX_RECORD_COUNT,	! Count of number of index records processed.
	RETURN_CODE;		! Return codes from $XPO_GET functions.

    $XPO_IOB_INIT (IOB = NDXIOB);		!Initialize input IOB
    $XPO_IOB_INIT (IOB = NDXOOB);		!Initialize output IOB
    $XPO_IOB_INIT (IOB = TMPIOB);		!Initialize workfile IOB.
    $XPO_IOB_INIT (IOB = TTIIOB);		!Initialize terminal input IOB.
    $XPO_IOB_INIT (IOB = TTOIOB);		!Initialize terminal IOB

    $XPO_OPEN (IOB = TTIIOB,			!Open terminal input IOB.
		FILE_SPEC = $XPO_INPUT,
		OPTIONS = INPUT);

    $XPO_OPEN (IOB = TTOIOB,			!Open terminal IOB
		FILE_SPEC = $XPO_OUTPUT,
		OPTIONS = OUTPUT,
		ATTRIBUTES = RECORD);

    !Identify version of program.
%IF
    %BLISS(BLISS36)
%THEN
    $XPO_PUT (IOB = TTOIOB,
	      STRING = ('TCX, version 2(4)')	);
%ELSE
    $XPO_PUT (IOB = TTOIOB,
	      STRING = ('TCX, Version V2.0-004')	);
%FI

    INDEX_RECORD_COUNT = 0;	! Initialize index entry counter

    !Process all .BIX files that the user wants
    !included in the resulting .RNX file.
    !This consists of simply reading each .BIX file
    !and passing the information on to either XOUT (if the current record
    !is an index entry) or ASGXTN (if the current record is a
    !page-transaction number-pair).  Note that this loop just gets the
    !name of each file and opens it; the actual processing is done
    !by the routine PROCESS_FILE.
    WHILE TRUE DO
	BEGIN

	!Request name of the .BIX file to be processed.  Get the name and process the file.
	!Prompt the user for the name of the file
	$XPO_PUT (IOB = TTOIOB,
		    STRING = ('Specify input file: ')	);

	IF
	    (RETURN_CODE = $XPO_GET (IOB = TTIIOB))	!Read name of file.
		    EQL XPO$_END_FILE
	THEN
	    RETURN 1;	! On END-OF-FILE, exit from TOC

	!Now open the specified file
	$XPO_OPEN (IOB = NDXIOB,
		    FILE_SPEC = TTIIOB [IOB$T_STRING],
		    DEFAULT = ('.BIX'),
		    OPTIONS = INPUT,
		    ATTRIBUTES = BINARY);

	!If the output file has not already been opened, then open
	!it.  Effectively, what this does, is give the .RNX file the
	!name of the first (or only) .BIX file that's processed.
	IF
	    NOT .NDXOOB [IOB$V_OPEN]
	THEN
	    !The output file is not yet open.  Open it.
	    !Note however that the file is not actually
	    !written into until this loop is terminated
	    !and the routine XPASSB is called.
	    $XPO_OPEN (IOB = NDXOOB,
			FILE_SPEC = ('.RNX'),
			RELATED = NDXIOB [IOB$T_RESULTANT],
			OPTIONS = OUTPUT);

	!And now read in the index entries and save them.
	I = PROCESS_FILE ();

	!If no index records were found, we'll be reporting an error.
	IF .I EQL 0
	    THEN	! Which one?

	    !If a SEQUENCE record was found, report empty file:
	    IF NEW_SEQUENCE_FOUND
		THEN $XPO_PUT_MSG (	SEVERITY = WARNING,
			STRING = 'Input file contained no index entries'
			)

	    !If no SEQUENCE record was found, file wasn't a .BIX file.
	    ELSE
		IF .FILES_RECORD_COUNT EQL 0
		     THEN	! if record count for file is zero, report that.
		     $XPO_PUT_MSG (	SEVERITY = WARNING,
			STRING = 'Input file contains NO records'
			)

		ELSE		! if file contained records, report wrong format.
		     $XPO_PUT_MSG (	SEVERITY = WARNING,
			STRING = 'Input file isn''t in correct format'
			)

	!If index records were found, add them to total counter.
	ELSE
	    INDEX_RECORD_COUNT = .INDEX_RECORD_COUNT + I;

	!See if user has any other files to be processed
	IF
	    NOT BEGIN

		!If previous read from $XPO_INPUT did not give an end-of-file,
		IF .RETURN_CODE NEQ XPO$_END_FILE THEN
		    BEGIN
		    !Prompt the user for a yes/no response.  Note that only "Y" or "y"
		    !is actually checked for.  All other responses mean no.
		    $XPO_PUT (IOB = TTOIOB,
			    STRING = ('Additional input? [Y/N] (N)')	);

		    !Read the user's response.
		    RETURN_CODE = $XPO_GET (IOB = TTIIOB)
		    END;

		!Interpret response.
		!Note that only "Y" and 'y' are looked for.  All other
		!responses, in spite of what the prompt says, are
		!interpreted as NO.
		IF
		    (.RETURN_CODE EQL XPO$_END_FILE)	! Catch EOF or just
				OR
		    (.TTIIOB [IOB$H_STRING] LEQ 0)	!   <CRLF> as NO
		THEN
		    FALSE
		ELSE
		    !Check for "Y" or 'y'
		    (CH$RCHAR (.TTIIOB [IOB$A_STRING]) EQL %C'Y')
		    OR
		    (CH$RCHAR (.TTIIOB [IOB$A_STRING]) EQL %C'y')
		END
	    THEN
		!User has no more files.  Therefore exit this loop
		!so the generation of the .RNX file can get underway.
		EXITLOOP;
	END;


    !Open the file in which the one column index is built.
    $XPO_OPEN (IOB = TMPIOB,
		FILE_SPEC = ('001TCX.TMP'),
		OPTIONS = OUTPUT);

    !If previous read from $XPO_INPUT did not give an end-of-file,
    IF .RETURN_CODE NEQ XPO$_END_FILE THEN
	BEGIN
	!Determine whether user wants running page numbers or normal page numbers.
	$XPO_PUT (IOB = TTOIOB, STRING = ('Running page counters? [Y/N] (N)')	);

	RETURN_CODE = $XPO_GET (IOB = TTIIOB)		!Get user's response
	END;

    !Interpret response

    !Look at just first character of response.
    !Indeed, recognize "Y" and "y" as meaning YES, but all
    !other responses at being NO.
    IF
	(.RETURN_CODE NEQ XPO$_END_FILE)
		AND
	(.TTIIOB [IOB$H_STRING] GTR 0)
    THEN
	BEGIN
	LOCAL X;
	X = CH$RCHAR (.TTIIOB [IOB$A_STRING]);
	IF
	    (.X EQL %C'Y')
	    OR (.X EQL %C'y')
	THEN
	    RUNNING_COUNT = TRUE
	END;

    !Write the preamble into the single column index temporary file.
    PREAMBLE_WRITE ();

    !Generate the index;
    !This results in a one-column index in the file
    !defined via the IOB called TMPIOB.
        IF .INDEX_RECORD_COUNT GTR 0 THEN
	    XPASSA (.SECTIONS, FALSE, .RUNNING_COUNT);

    $XPO_CLOSE (IOB = TMPIOB,			!Close temporary file,
		OPTIONS = REMEMBER);		! but don't forget the 
						! name of the resultant file.

    !Generate the two-column index.
    !The routine reads the one-column index and folds it,
    !and writes the results to the file defined via the IOB
    !called NDXOOB.  Note that up until this time that IOB
    !has not been used, except to open the appropriate file.
    XPASSB (.RETURN_CODE);

    $XPO_CLOSE (IOB = TMPIOB,			!Close temporary file,
		OPTIONS = REMEMBER);		! but don't forget the 
						! name of the resultant file.

!!! Although I thought the following line was needed, I now realize that many
!!! people use this temp file.  As a result, it is no longer being delete.  I
!!! am preserving the code so that it can be put on a switch in a later version.
!!!    $XPO_DELETE (IOB = TMPIOB);			!Now, remove it

    $XPO_CLOSE (IOB = NDXOOB);			!Close file containing the
						! two-column index.


    $XPO_PUT (IOB = TTOIOB,			!Tell user we're done.
		STRING = (8,
			   CH$PTR(UPLIT('FINISHED'))) );

    $XPO_CLOSE (IOB = TTOIOB);			!Close the terminal.

    RETURN 1					!Successful completion (by definition)

    END;			!End of TCX

%SBTTL 'process_file -- process input file'
GLOBAL ROUTINE PROCESS_FILE =

!++
! FUNCTIONAL DESCRIPTION:
!
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--
   
    BEGIN

    LOCAL
	INDEX_RECORD_COUNT;	! Count of number of index records processed.

    FILES_RECORD_COUNT = 0;	! Initialize index entry counter
    INDEX_RECORD_COUNT = 0;	! Initialize index entry counter
    NEW_SEQUENCE_FOUND = FALSE;	! Initialize SEQUENCE record flag

    !Read record-groups until end of file.  Process each record group
    !in turn.  Return at end-of-file.
    WHILE TRUE DO
	BEGIN

	LOCAL
	    FORMAT_DESCR,
	    RECORD_DESCR,
	    STATUS;

	!Get record-group descriptor.
	STATUS = $XPO_GET ( IOB = NDXIOB,
			    FULLWORDS = 1);

	IF!
	    .STATUS NEQ XPO$_NORMAL
	THEN
	!No record-group descriptor, and therefore no record-group.
	!I.e., end-of-file.
	    EXITLOOP;

	FILES_RECORD_COUNT = .FILES_RECORD_COUNT + 1;	! Count this record

	!Separate out the record descriptor and the format descriptor.
	RECORD_DESCR = .(.NDXIOB[IOB$A_DATA])<0,%BPVAL/2>;		!Record descriptor
	FORMAT_DESCR = .(.NDXIOB[IOB$A_DATA])<%BPVAL/2, %BPVAL/2>;	!Format descriptor

!!	SELECTONE .(.NDXIOB[IOB$A_DATA]) OF
	SELECTONE .RECORD_DESCR OF
	SET
	[NEW_SEQUENCE] : BEGIN
!!!			$XPO_PUT (IOB = TTOIOB,
!!!				  STRING = (8,
!!!					    CH$PTR(UPLIT('SEQUENCE'))) );

			!Reset confuse-count.
			CONFUSE_COUNT = 0;

			!Signal that a SEQUENCE record has been detected.
			NEW_SEQUENCE_FOUND = TRUE;

			!Start a new indexing sequence.
			XTN_OFFSET = .HIGHEST_XTN_OUT;

			!Make sure this file is in the format expected.
			IF				!
			    .FORMAT_DESCR NEQ INDEX_FORMAT
			THEN
			    !Warn the user that something's mucked up!!
			    $XPO_PUT (IOB = TTOIOB,
				      STRING = (37,
						CH$PTR(UPLIT('INCOMPATIBLE VERSIONS OF DSR AND TCX.'))) );

			 END;

	[INDEX_XTN]	: BEGIN
!!!			  $XPO_PUT ( IOB =TTOIOB,
!!!				     STRING = (3,
!!!						CH$PTR(UPLIT('XTN'))) );

			!Transaction number records can not occur until a
			!SEQUENCE record has been detected.  Check for this:
			IF NOT .NEW_SEQUENCE_FOUND
			THEN    EXITLOOP;
			    !This file doesn't look like a .BIX file.  Exit
			    !the loop so that routine TCX gets a chance to
			    !report the error and the user gets a chance to
			    !specify another filename.

			!Reset confuse-count.
			CONFUSE_COUNT = 0;
			  $XPO_GET (IOB = NDXIOB,
				    FULLWORDS = PAGE_SCT_SIZE + 1);

			    BEGIN
			    BIND
				XTN_AND_PAGE = .NDXIOB [IOB$A_DATA] : VECTOR,
				PAGE_REF = XTN_AND_PAGE [1] : PAGE_DEFINITION;


			   !Pass the transaction number on only if
			   !it's not zero.
			   IF!
				.XTN_AND_PAGE [0] NEQ 0
			   THEN
				BEGIN
				!Remember highest input XTN in this set.
				HIGHEST_XTN_IN = .XTN_AND_PAGE [0];
				!Map XTN into correct range.
				HIGHEST_XTN_OUT = .HIGHEST_XTN_IN + .XTN_OFFSET;

				!Output new transaction number.
				ASGXTN (PAGE_REF, .HIGHEST_XTN_OUT);

				!See if this document contains sections.
				IF!
				    .PAGE_REF [SCT_TYP] NEQ 0
				    AND .PAGE_REF [SCT_TYP] NEQ SCT_INDEX
				THEN
				    SECTIONS = TRUE;
				END;
			    END;
			  END;

	[INDEX_ENTRY]	: BEGIN
			  LOCAL
				DESCRIPTOR : VECTOR [3];
!!!			  $XPO_PUT (IOB = TTOIOB,
!!!				     STRING = (5,
!!!						CH$PTR(UPLIT('ENTRY'))) );

			!Transaction number records can not occur until a
			!SEQUENCE record has been detected.  Check for this:
			IF NOT .NEW_SEQUENCE_FOUND
			THEN    EXITLOOP;
			    !This file doesn't look like a .BIX file.  Exit
			    !the loop so that routine TCX gets a chance to
			    !report the error and the user gets a chance to
			    !specify another filename.

			!Reset confuse-count.
			CONFUSE_COUNT = 0;

			!First get the descriptor.
			$XPO_GET (IOB = NDXIOB,
				  FULLWORDS = 3);

			!Now copy the descriptor into a holding area.
			BEGIN
			BIND
			    X = .NDXIOB [IOB$A_DATA] : VECTOR;

			INCR I FROM 1 TO 3 DO
			    DESCRIPTOR[.I-1] = .X[.I-1];
			END;
			  
			!Now, pick up the actual index entry.
			$XPO_GET (IOB = NDXIOB,
				  FULLWORDS = CH$ALLOCATION(.DESCRIPTOR[0]));

!!!			!Echo the text of the index entry.
!!!			$XPO_PUT (IOB = TTOIOB,
!!!				  STRING = (.DESCRIPTOR [0],
!!!					    CH$PTR(.NDXIOB[IOB$A_DATA])));


			!Map the transaction number into the correct
			!range, unless this came from a .ENTRY command.
			IF  .DESCRIPTOR [1] NEQ 0
			    THEN
				DESCRIPTOR [1] = .DESCRIPTOR [1] + .XTN_OFFSET;
			    !Now, put this into the index and count it.
			    XOUT (.DESCRIPTOR[0], CH$PTR(.NDXIOB[IOB$A_DATA]), .DESCRIPTOR[1], .DESCRIPTOR[2]);
			    INDEX_RECORD_COUNT = .INDEX_RECORD_COUNT + 1;
			    END;

	[OTHERWISE]	: BEGIN
			  UNKNOWN_RECORD_FOUND = TRUE;
			  CONFUSE_COUNT = .CONFUSE_COUNT + 1;
			  IF 
				.CONFUSE_COUNT LEQ 5 
			  THEN
			  $XPO_PUT (IOB = TTOIOB,
				    STRING = (8,
					      CH$PTR(UPLIT('CONFUSED')))  )
			  ELSE
				EXITLOOP;
			  END;
	TES;
	END;

    !Finished processing file.
    $XPO_CLOSE (IOB = NDXIOB);			!Close index file

    .INDEX_RECORD_COUNT
    END;			!End of PROCESS_FILE
END				!End of module
ELUDOM
