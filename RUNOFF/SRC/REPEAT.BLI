MODULE REPEAO (					!
		IDENT = 'V03-000'
%BLISS32[,
	ADDRESSING_MODE(EXTERNAL=LONG_RELATIVE,NONEXTERNAL=LONG_RELATIVE)
	]
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY: RUNOFF document formatter
!
! ABSTRACT: Processes the .REPEAT command.
!
!
! ENVIRONMENT: Transportable
!
! AUTHOR: R.W.Friday	 CREATION DATE: December, 1978
!
! MODIFIED BY:
!
!--

!
! TABLE OF CONTENTS:
!
!
! INCLUDE FILES:
!

REQUIRE 'REQ:BOOL.REQ';

REQUIRE 'REQ:FLGT.REQ';

REQUIRE 'REQ:FSPACK.REQ';

REQUIRE 'REQ:GCA.REQ';

REQUIRE 'REQ:GETQSC.REQ';

REQUIRE 'REQ:KC.REQ';

REQUIRE 'REQ:NUMPRM.REQ';

REQUIRE 'REQ:SCA.REQ';

!
! MACROS:
!
!
! EQUATED SYMBOLS:
!
!
! OWN STORAGE:
!
!
! EXTERNAL REFERENCES:
!

EXTERNAL
    FLGT : FLAG_TABLE,
    FS01 : FIXED_STRING,
    GCA : GCA_DEFINITION,
    IRA : FIXED_STRING,
    KHAR,
    NUMPRM : NUMPRM_DEFINE,
    SCA : SCA_DEFINITION;

EXTERNAL LITERAL 				!Error messages
    RNFCEM,
    RNFILC,
    RNFINM,
    RNFMNL,
    RNFMQS,
    RNFQST;

EXTERNAL ROUTINE
    ENDCMT,
    ERMA,
    GETQS,
    OUTJ,
    OUTNJ,
    SCANT,
    SKPSEP;


GLOBAL ROUTINE REPEAT (HANDLER_CODE) : NOVALUE = 	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	See the ABSTRACT, above.
!
! FORMAL PARAMETERS:
!
!	HANDLER_CODE is a dummy argument, used only for conformance
!	with other routines.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	HOLD_ERR_COUNT,
	HOLD_IRA : VECTOR [4],
	HOLD_KHAR,
	REPEAT_COUNT,
	RESULT;

    IF 						!
	NOT .NUM_RESULT
    THEN
	BEGIN
	ENDCMT ();
	RETURN;
	END;

    IF 						!
	.NUM_LENGTH EQL 0
    THEN
	BEGIN
	ERMA (RNFMNL, TRUE);
	RETURN;
	END;

    IF 						!
	.NUM_VALUE LEQ 0
    THEN
	BEGIN
	ERMA (RNFINM, TRUE);
	RETURN;
	END;

    SKPSEP (IRA);				!Skip spaces, tabs, and a comma.
!
    RESULT = GETQS (FS01);			!Try to get what's to be repeated.

    IF 						!
	.RESULT NEQ GETQS_NORMAL
    THEN
    !Analyze error a bit more closely.

	IF 					!
	    .RESULT EQL GETQS_TOO_LONG
	THEN
	    BEGIN
	    ERMA (RNFQST, FALSE);
	    RETURN;
	    END
	ELSE
	!Missing or improperly delimited quoted string.
	    BEGIN
	    ERMA (RNFMQS, TRUE);
	    RETURN;
	    END;

!
    !Check to see if user is trying to repeat a command.  If
    !so, tell him it won't work and refuse to even try it.
    !NOTE: This restriction may be lifted later, when instead
    !of calling SCANT, PUS gets called instead.
    BEGIN

    LOCAL
	PTR,
	X;

    PTR = .FS_START (FS01);			!Cop a peek at first character.
    X = CH$RCHAR (.PTR);			!...

    IF 						!
    !<CONTROL flag> ?
	.X EQL .FLGT [CON_FLAG, FLAG_CHARACTER]
    THEN
    !User is trying to do something not yet allowed.
	BEGIN
	ERMA (RNFILC, FALSE);
	RETURN;
	END;

    END;
!
    !Save status of current input string, and
    !substitute what the user wants repeated instead.
    BEGIN					!Save status of IRA.

    MAP 					!...
	IRA : VECTOR;				!...

    INCR I FROM 0 TO 3 DO 			!...
	HOLD_IRA [.I] = .IRA [.I];		!...

    HOLD_KHAR = .KHAR;				!Preserve next character.
    HOLD_ERR_COUNT = .GCA_ERRCNT;		!Remember error status.
    END;
    REPEAT_COUNT = .NUM_VALUE;			!Pick up repeat count.

    INCR I FROM 1 TO .REPEAT_COUNT DO
	BEGIN
	FS_MAXSIZE (IRA) = .FS_MAXSIZE (FS01);	!Substitute user's string.
	FS_LENGTH (IRA) = .FS_LENGTH (FS01);	!...
	FS_START (IRA) = .FS_START (FS01);	!...
	FS_NEXT (IRA) = .FS_START (FS01);	!...
	KCNS ();					!Initialize scan.
	SCANT ();				!Scan user's string as if it were text.

	IF 					!End of line means end of record if not filling.
	    NOT .SCA_FILL			!...
	THEN 					!...

	    IF 					!
		.SCA_JUSTIFY
	    THEN
		OUTJ ()				!NO FILL, JUSTIFY
	    ELSE
		OUTNJ ();			!NO FILL, NO JUSTIFY

	IF 					!
	    .HOLD_ERR_COUNT NEQ .GCA_ERRCNT
	THEN
	!Abhort processing if an error occurs.
	    EXITLOOP;

	END;

!
    !Restore previous status of IRA and KHAR
    BEGIN

    MAP
	IRA : VECTOR;

    INCR I FROM 0 TO 3 DO
	IRA [.I] = .HOLD_IRA [.I];

    KHAR = .HOLD_KHAR;
    END;
    END;					!End of REPEAT

END						!End of module

ELUDOM
