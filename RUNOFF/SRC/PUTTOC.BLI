MODULE PUTTOO (
		IDENT = 'V03-000'
%BLISS32[,
	ADDRESSING_MODE(EXTERNAL=LONG_RELATIVE,NONEXTERNAL=LONG_RELATIVE)
	]
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY: RUNOFF document formatter
!
! ABSTRACT: Routines to save table of contents information in a file.
!
!
! ENVIRONMENT: Transportable
!
! AUTHOR: R.W.Friday	 CREATION DATE: May, 1979
!
! MODIFIED BY:
!
!--

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    CLSTOC : NOVALUE,
    PUTHLI : NOVALUE,
    PUTRTY : NOVALUE,
    PUTTXT : NOVALUE;

!
! INCLUDE FILES:
!

LIBRARY 'NXPORT:XPORT';

REQUIRE 'REQ:BOOL.REQ';

REQUIRE 'REQ:CLIST.REQ';

REQUIRE 'REQ:PAGEN.REQ';

REQUIRE 'REQ:TOCRTY.REQ';
!
! MACROS:
!
!
! EQUATED SYMBOLS:
!
LITERAL
    MAX_LEVELS = 6;				!Maximum number of header levels.

!
! OWN STORAGE:
!

EXTERNAL
    TOCOOB : $XPO_IOB ();

!
! EXTERNAL REFERENCES:
!
EXTERNAL
    HLDSP : VECTOR [MAX_LEVELS],
    HLLIST : COUNTED_LIST [MAX_LEVELS];

EXTERNAL LITERAL 				!Error messages
    RNFILE;

EXTERNAL ROUTINE
    ERMS;

!


GLOBAL ROUTINE PUTRTY (MAJOR_CODE, MINOR_CODE) : NOVALUE = 	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	PUTRTY writes a record descriptor to the table of contents file
!
! FORMAL PARAMETERS:
!
!	MAJOR_CODE is the major record type
!	MINOR_CODE is the minor record type
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	TEMP_RECORD : VECTOR [2];

    !Cursory check to make sure the file is opened.
    IF 						!
	NOT .TOCOOB [IOB$V_OPEN]
    THEN
	BEGIN
	ERMS (RNFILE, CH$PTR (UPLIT ('PUTRTY')), 6);
	RETURN;
	END;

    !Create a two-word descriptor record.
    TEMP_RECORD [0] = .MAJOR_CODE;
    TEMP_RECORD [1] = .MINOR_CODE;

    !Now really do write the record type descriptor record.
    $XPO_PUT (IOB = TOCOOB, BINARY_DATA = (2, TEMP_RECORD));

    !That's all there is
    RETURN;

    END;					!End of PUTRTY


GLOBAL ROUTINE PUTTXT (TEXT_LENGTH, TEXT_PTR, MAJOR_CODE, MINOR_CODE) : NOVALUE = 	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	PUTTXT writes parsed text to the table of contents file.
!
! FORMAL PARAMETERS:
!
!	TEXT_LENGTH is the number of bytes representing the text.
!	TEXT_ADDRESS is the address of the text.
!	MAJOR_CODE and MINOR code are the major and minor record descriptors
!	associated with the text.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	TEMP_RECORD : VECTOR [1000];

    !Cursory check to make sure the file is opened.
    IF 						!
	NOT .TOCOOB [IOB$V_OPEN]
    THEN
	BEGIN
	ERMS (RNFILE, CH$PTR (UPLIT ('PUTTXT')), 6);
	RETURN;
	END;

    !Write out the descriptor record
    PUTRTY (.MAJOR_CODE, .MINOR_CODE);

    !Write out the number of characters of text.
    $XPO_PUT (IOB = TOCOOB, BINARY_DATA = (1, TEXT_LENGTH));

    !Only write text if there's some to write.  In other words, if the
    !count word that was just written is not greater than zero, don't
    !write anything else.
    IF
	.TEXT_LENGTH LEQ 0
    THEN
	!No text to write
	RETURN;

    !Copy the text into an area which is guaranteed to start on a word boundary.
    CH$MOVE (.TEXT_LENGTH, .TEXT_PTR, CH$PTR (TEMP_RECORD));

    !Write out the index entry.
    $XPO_PUT (IOB = TOCOOB, BINARY_DATA = (CH$ALLOCATION (.TEXT_LENGTH), TEMP_RECORD));

    END;					!End of PUTTXT


GLOBAL ROUTINE PUTTPG (PAGE_REF) : NOVALUE = 	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	PUTTPG writes a page number into the table of contents file
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	TEMP_RECORD : VECTOR [PAGE_SCT_SIZE];

    !Cursory check to make sure the file is opened.
    IF 						!
	NOT .TOCOOB [IOB$V_OPEN]
    THEN
	BEGIN
	ERMS (RNFILE, CH$PTR (UPLIT ('PUTTPG')), 14);
	RETURN;
	END;

    !Write a descriptor record identifying what's to come as a page number
    PUTRTY (MAJ_RUNOFF, MIN_PAGE);

    BEGIN

    MAP
	PAGE_REF : REF VECTOR [PAGE_SCT_SIZE];

    !Copy the page number in too.
    INCR I FROM 1 TO PAGE_SCT_SIZE DO
	TEMP_RECORD [.I - 1] = .PAGE_REF [.I - 1];

    END;
    $XPO_PUT (IOB = TOCOOB, BINARY_DATA = (PAGE_SCT_SIZE, TEMP_RECORD));

    END;					!End of PUTTPG


GLOBAL ROUTINE PUTHLI : NOVALUE = 	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	PUTHLI write header level information into the table of contents file.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    !Cursory check to make sure the file is opened.
    IF 						!
	NOT .TOCOOB [IOB$V_OPEN]
    THEN
	BEGIN
	ERMS (RNFILE, CH$PTR (UPLIT ('PUTHLI')), 6);
	RETURN;
	END;

    !Write a descriptor record identifying what's to come as header level information.
    PUTRTY (MAJ_RUNOFF, MIN_HL_INF);

    !First write the header level numbers themselves
    $XPO_PUT (IOB = TOCOOB, BINARY_DATA = (2 + MAX_LEVELS, HLLIST));

    !Now write the display information
    $XPO_PUT (IOB = TOCOOB, BINARY_DATA = (MAX_LEVELS, HLDSP));

    !And that's it for header levels
    RETURN

    END;					!End of PUTHLI


GLOBAL ROUTINE CLSTOC : NOVALUE = 		!

!++
! FUNCTIONAL DESCRIPTION:
!
!	CLSTOC does nothing more than close the file into which the
!	table of contents is being written.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    IF 						!
	.TOCOOB [IOB$V_OPEN]
    THEN
	$XPO_CLOSE (IOB = TOCOOB);

    END;					!End of CLSTOC

END						!End of module

ELUDOM


