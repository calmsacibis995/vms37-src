MODULE FOOOUO (					!
		IDENT = 'V03-000'
%BLISS32[,
	ADDRESSING_MODE(EXTERNAL=LONG_RELATIVE,NONEXTERNAL=LONG_RELATIVE)
	]
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY: RUNOFF document formatter
!
! ABSTRACT: Puts out footnotes.
!
!
! ENVIRONMENT: Transportable
!
! AUTHOR: R.W.Friday	 CREATION DATE: September, 1978
!
! REVISION HISTORY:
!
!	007	REM00007	Ray Marshall	15-December-1981
!		Built up revision history based on CMS library generations.
!
!	006	RWF00006	Rich Friday	11-November-1981
!		Fairly extensive changes were made as a result of the re-
!		  design of footnote processing.
!
!	005	REM00005	Ray Marshall	25-August-1981
!		Updated copyright and more work on revision history format.
!
!	004	REM00004	Ray Marshall	14-August-1981
!		Made some minor changes in revision history.
!		Removed unneeded reference to XPORT library.
!
!	003	KAD00003	Keith Dawson 	28-January-1981
!		For V1.126b: delete footnote temporary file when done with it.
!
!	002	KAD00002	Keith Dawson	September 1980
!		Removed FOOFIL to its own module, so it can be overlayed with
!		  the rest of FN.  (NOTE ON HISTORY by REM:  This was the first
!		  entry in the CMS library.  It obviously contained a change
!		  from the initial version, so I changed it from 001 to 002.)
!--

!
! TABLE OF CONTENTS:
!

!
! INCLUDE FILES:
!

REQUIRE 'REQ:BOOL.REQ';

REQUIRE 'REQ:CLIST.REQ';

REQUIRE 'REQ:FNCT.REQ';

REQUIRE 'REQ:FOOFIL.REQ';		!Operations performed by FOOFIL.

REQUIRE 'REQ:FSPACK.REQ';

REQUIRE 'REQ:GCA.REQ';

REQUIRE 'REQ:PHDEF.REQ';

REQUIRE 'REQ:TSF.REQ';

!
! MACROS:
!

!
! EQUATED SYMBOLS:
!

EXTERNAL LITERAL
    RINTES : UNSIGNED (8);

EXTERNAL LITERAL
    RNFILE;				!Error messages

!
! OWN STORAGE:
!

!
! EXTERNAL REFERENCES:
!

EXTERNAL
    FNCT : FNCT_DEFINITION,
    FNISIZ : FN_INT_SIZE_DEFINITION,
    GCA : GCA_DEFINITION,
    MRA : REF FIXED_STRING,
    PHAN : PHAN_DEFINITION,
    TSF : TSF_DEFINITION;

EXTERNAL
    FOOMRA : FIXED_STRING,		!Substitute MRA.
    FOOTSF : VECTOR [TSF_SIZE];		!Substitute TSF area
!
EXTERNAL
    FOHMRA,
    FOHTSF;

EXTERNAL ROUTINE
    ERMS,
    FOOFIL,
    OUTLIN;


GLOBAL ROUTINE FOOOUT (OUTPUT_COUNT) : NOVALUE = 		!

!++
! FUNCTIONAL DESCRIPTION:
!
!	FOOOUT outputs as many footnotes as it is requested to do.
!	For each footnote, all it does is read the appropriate
!	number of TSF/MRA pairs from the footnote file, and
!	calls OUTLIN to process the information.
!	The number of TSF/MRA sets for any particular footnote
!	is stored at FNISIZ [n].
!
!	FOOOUT also takes care of index entries that it finds.
!	The transaction numbers are remapped into a different set,
!	so that they get merged with entries from the main body
!	of the document.
!
!	After FOOOUT has output the footnotes it's supposed to output,
!	it leaves the file open.  It does not close the file, or attempt to
!	clean it up in any way.
!
! FORMAL PARAMETERS:
!
!	OUTPUT_COUNT is the number of footnotes to be output.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	COUNT,
	FOO_FIRST_XTN,
	HOLD_PAGING,
	MAP_FIRST_XTN,
	STATUS;

    !Ignore meaningless calls.
    IF
	.OUTPUT_COUNT LEQ 0
    THEN
	!Ignore this request
	RETURN
    ELSE
	!Check the validity of the request
	BEGIN
	IF
	    .OUTPUT_COUNT GTR .FNCT_READY
	THEN
	    !User asked for more footnotes to be output than are ready to be output.
	    BEGIN
	    ERMS (RNFILE, CH$PTR (UPLIT ('FOOOUT')), 6);
	    COUNT = .FNCT_READY
	    END
	ELSE
	    !The user made a valid request
	    COUNT = .OUTPUT_COUNT;
	END;

    !NOTE: The change to not using pool for footnotes necessitated
    !changing a test for .FNPOOL. This change MAY have reintroduced
    !an old bug, either no. 020 or no. 025. Check for it and beware.
    !Version 2(1) of Runoff, version 008 of FN, 9-2-1980. kad.

    IF 						!
	FOOFIL (FOO_OPIN) NEQ FOO_NORMAL
    THEN
    !Can't read back footnotes: give up and forget them.
	BEGIN
	FOOFIL (FOO_CLOS);
	FOOFIL (FOO_DELE);
	FNCT_COUNT = 0;
	FNCT_READY = 0;
	FNCT_WAITING = 0;
	FNCT_OLD = 0;
	RETURN
	END;

    !The footnote file was opened successfully.
    FNCT_EXPANDING = TRUE;			!Signal the fact that footnotes are being expanded.
    HOLD_PAGING = .PHAN_PAGING;			!Go into non-paging mode to
    PHAN_PAGING = FALSE;			!avoid spurious page breaks.
    !Use the footnote working areas to save results in.
    FOHTSF = .TSF;				!Save current status.
    FOHMRA = .MRA;				!...
    TSF = FOOTSF;				!Switch to other working area.
    MRA = FOOMRA;				!...
    FOO_FIRST_XTN = 0;				!Initialize transaction number
    MAP_FIRST_XTN = 0;				!...
    !Now actually read back the records.

    INCR I FROM 0 TO (.COUNT - 1) DO
    INCR J FROM 1 TO .FNISIZ [.FNCT_OLD + .I] DO		!(J is a dummy counter, not really used anywhere)
	BEGIN
	STATUS = FOOFIL (FOO_READ);

	IF 					!
	    .STATUS NEQ FOO_NORMAL
	THEN
	!Exit loop if record can't be read.
	    EXITLOOP;


	!See if this record has anything to do with indexing.
	!If so, the record either contains an entry for the index,
	!or else it contains text that refers to something in the
	!index (or the index refers to it, depending on your point of
	!view.
	!
	!Records containing index entries always occur before the
	!record to which they apply; each record describes one
	!entry.  Further, each index entry has associated with it
	!a unique number, TSF_FIRST_XTN.  These transaction numbers
	!are strictly increasing from record to record.  Assume that
	!there are n such records, and let the transaction numbers
	!be designated by X(1), X(2), .... X(n).
	!
	!Records which refer to index entries come after the index
	!entry records; they are chained to the index entries by
	!having the transaction numbers recorded in the corresponding
	!TSF.  TSF_FIRST_XTN will have the value X(1), and TSF_LAST_XTN
	!will have the value X(n).  
	!
	!The problem is that X(1).....X(n) cannot be directly used
	!by the routine ASGXTN (which is in the module XTN).  That
	!is because the association of transaction numbers to pages
	!requires that the transaction numbers passing through ASGXTN
	!be steadily increasing, with no gaps, FOR THE ENTIRE FILE.
	!Now, X(1)......X(n) are steadily increasing, but only
	!for the footnote.  However, they can be mapped into the
	!"correct" set, which is accomplished here.
	!Note that the new set will be designated by Y(1)......Y(n).
	!Further, Y(1) is guaranteed to be GCA_NORMAL_XTN.
	IF 					!
	    .TSF_FIRST_XTN NEQ 0
	THEN
	!This record has something to do with indexing.

	    IF 					!
		.TSF_INDEX
	    THEN
	    !Process index entry.
		BEGIN

		IF 				!
		    .FOO_FIRST_XTN EQL 0
		THEN 				!
		!Establish start of mapping from temporarily assigned
		!transaction numbers to the normal set.
		    BEGIN
		    MAP_FIRST_XTN = .GCA_NORMAL_XTN;	!Establish Y(1).
		    FOO_FIRST_XTN = .TSF_FIRST_XTN;	!Establish X(1).
		    END;

		!Translate the temporary transaction number assigned
		!to this index entry into a normal one.
		!This is done by simply substituting the current Y(1)
		!(which is GCA_NORMAL_XTN) for the given X(1).
		!Then, GCA_NORMAL_XTN is bumped, thereby giving a
		!new Y(1) for the next index entry, if any.
		TSF_FIRST_XTN = .GCA_NORMAL_XTN;
		TSF_LAST_XTN = .GCA_NORMAL_XTN;
		GCA_NORMAL_XTN = .GCA_NORMAL_XTN + 1;
		END
	    ELSE 				!
	    !Process reference to index entry.
	    !Notice that earlier, the starting X(1) and Y(1) were
	    !established.  But that was for the start of the
	    !footnote, not for the current record.  In the meantime,
	    !several sets of index entries and references may have
	    !gone through here.  And there is no way to separate them.
	    !That means you can't simply use MAP_FIRST_XTN as the
	    !new Y(1).
		BEGIN

		LOCAL
		    XTN_OFFSET;

		!Compute the gap between the X(1) on this record
		!and that at the start of the footnote processing.
		!XTN_OFFSET, the result, will be zero for the very first
		!record that comes through.
		XTN_OFFSET = .TSF_FIRST_XTN - .FOO_FIRST_XTN;

		!Now, compute the desired Y(n).
		!The value MAP_FIRST_XTN+XTN_OFFSET gets you the Y(1)
		!you need.  The value TSF_LAST_XTN-TSF_FIRST_XTN gets
		!you "n".
		TSF_LAST_XTN = .MAP_FIRST_XTN + .XTN_OFFSET + (.TSF_LAST_XTN - .TSF_FIRST_XTN);
		
		!This is left as an exercise for the reader.
		TSF_FIRST_XTN = .MAP_FIRST_XTN + .XTN_OFFSET;

		!As an additional exercise, prove that it's
		!not necessary to clear FOO_FIRST_XTN now, or later;
		!Further, show that it doesn't matter whether or
		!not you do clear it.  Using the results of these
		!exercises simplify this block of code.
		END;

	!Write out the record.
	OUTLIN (0);				!(Parameter is meaningless in this case).
	END;

    TSF = .FOHTSF;				!Restore interrupted status.
    MRA = .FOHMRA;				!...
    PHAN_PAGING = .HOLD_PAGING;			!...
    FNCT_READY = .FNCT_READY - .COUNT;		!Count off the footnotes that have been output.
    FNCT_COUNT = .FNCT_COUNT - .COUNT;		!Count off the footnotes that have been output.
    FNCT_OLD = .FNCT_OLD + .COUNT;		!Update count of obsolete footnotes.
    FNCT_EXPANDING = FALSE;			!No longer expanding footnotes

    !Get rid of the work files if there are no more footnotes to be output.
    IF
	.FNCT_COUNT LEQ 0
    THEN
	!All footnotes have been output.
	BEGIN
	FOOFIL (FOO_CLOS);			!Close the file
	FOOFIL (FOO_DELE);			!and delete it.
	FNCT_OLD = 0;				!And clean up the tables a bit.
	FNCT_READY = 0;				!...
	FNCT_WAITING = 0;			!...
	END;

    END;					!End of FOOOUT

END						!End of module

ELUDOM
