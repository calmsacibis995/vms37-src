MODULE DOFLGO (					!
		IDENT = 'V03-000'
%BLISS32[,
	ADDRESSING_MODE(EXTERNAL=LONG_RELATIVE,NONEXTERNAL=LONG_RELATIVE)
	]
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY: RUNOFF document formatter
!
! ABSTRACT: Flag processing
!
!
! ENVIRONMENT: Transportable
!
! AUTHOR: R.W.Friday	 CREATION DATE: April, 1978
!
! MODIFIED BY:
!
!	010	REM00010	Ray Marshall	3-November-1981
!		Fill in rev history based on the previous generations in the
!		  CMS library.
!
!	009	KAD00009	K. A. Dawson	2 November 1981
!		For V2.0-005: Prevent Hyphenate and Break flags from causing 
!		  the next character to be upcased in headers. Now that long 
!		  headers wrap, it is reasonable for users to use these flags
!		  in them.
!
!	008	REM00008	Ray Marshall	20-August-1981
!		Update copyright.  Initialize rev history.
!
!	007	KAD00007	K. A. Dawson
!		For V1.124h
!		Change meaning of SCA_XROUTINE. It is now a bit, not an address
!		  address. If TRUE, then call SUBXR for index-phrase processing
!		  If FALSE (as initialized in RINIT), then call XR.
!
!	006	KAD00006	Keith Dawson	21-October-1980
!		Modify REQUIREs to point the the logical REQ:.
!
!--

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    SUBXR : NOVALUE,				!Used by .SUBINDEX and .ENTRY commands
    XR : NOVALUE;				!Used for processing <INDEX flag>

!
! INCLUDE FILES:
!

REQUIRE 'REQ:BOOL.REQ';

REQUIRE 'REQ:FLGT.REQ';

REQUIRE 'REQ:FSPACK.REQ';

REQUIRE 'REQ:KC.REQ';

REQUIRE 'REQ:NBITS.REQ';

REQUIRE 'REQ:SCA.REQ';

REQUIRE 'REQ:SETCAS.REQ';

REQUIRE 'REQ:TSF.REQ';

!
! MACROS:
!
!
! EQUATED SYMBOLS:
!
!
! OWN STORAGE:
!
!
! EXTERNAL REFERENCES:
!

EXTERNAL LITERAL
    RINTES : UNSIGNED (8);

EXTERNAL
    FLGT : FLAG_TABLE [FLAG_COUNT],
    IRA : FIXED_STRING,
    KHAR,
    MRA : REF FIXED_STRING,
    SCA : SCA_DEFINITION,
    TSF : TSF_DEFINITION,
    XMRA : FIXED_STRING,
    XTSF : VECTOR;

!

EXTERNAL LITERAL 				! Error messages
    RNFFEL,
    RNFFNA,
    RNFLOC,
    RNFLTC,
    RNFSTR;

EXTERNAL ROUTINE
    ENDCHR,
    ENDWRD,
    ERM,
    ERMS,
    FNDFLG,
    OUTLIN,
    OUTXPH,
    RSKIPS,
    SETCAS,
    SUBST;


GLOBAL ROUTINE DOFLG : NOVALUE = 		!

!++
! FUNCTIONAL DESCRIPTION:
!
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	KHAR contains the character (flag) to be processed.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	WHICH_FLAG;

    WHICH_FLAG = FNDFLG (.KHAR);		!Identify the flag to be processed.

    CASE .WHICH_FLAG FROM 0 TO FLAG_COUNT - 1 OF
	SET

	[SUB_FLAG] :
	    BEGIN
	    !<SUBSTITUTE flag>
	    SUBST ();
	    RETURN;
	    END;

	[QUO_FLAG] :
	    BEGIN
	    !<QUOTE flag>
	    KCNS ();				!Get next character.

	    IF 					!
		.KHAR EQL RINTES
	    THEN 				!
		BEGIN
		ERM (RNFFEL, CH$PTR (UPLIT ('ACCEPT')), 6);
		ERMS  (RNFSTR, .FS_START (IRA), CH$DIFF (.FS_NEXT (IRA), .FS_START (IRA)));
		RETURN;				! Ignore a <QUOTE flag> at the end of the line.
		END
	    ELSE 				!
		BEGIN
		SCA_FRC_CHR = TRUE;		!Don't translate this character.
		ENDCHR (.KHAR);			!Output character as is.
		KCNS ();			!Get next character.
		RETURN;
		END;

	    END;

	[UPP_FLAG] :
	    BEGIN
	    !<UPPERCASE flag>
	    KCNS ();				!Get next character.

	    IF 					!
		.KHAR EQL .FLGT [UPP_FLAG, FLAG_CHARACTER]
	    THEN 				!
		BEGIN				!Doubled <UPPERCASE flag>s
		SETCAS (LEAVE_CASE);
		SCA_FRC_CASE = TRUE;
		KCNS ();
		RETURN;
		END;

	    IF
		(.KHAR EQL .FLGT [CAP_FLAG, FLAG_CHARACTER])	!
		AND .FLGT [CAP_FLAG, FLAG_ENABLED]
	    THEN
	    !<UPPERCASE flag> followed by <CAPITALIZE flag> (i.e., ^<)
		BEGIN
		SETCAS (FORCE_UPPER);
		SCA_FRC_CASE = TRUE;
		KCNS ();
		RETURN
		END;

	    IF 					!
		(.KHAR EQL .FLGT [UND_FLAG, FLAG_CHARACTER])	!
		AND .FLGT [UND_FLAG, FLAG_ENABLED]
	    THEN 				!
	    !<UPPERCASE flag> followed by <UNDERLINE flag> (i.e., ^&)
		BEGIN				!Turn on global underlining
		SCA_UND = TRUE;
		SCA_WRD_C_UND = .SCA_DO_UND;
		KCNS ();
		RETURN;
		END;

	    IF 					!
		(.KHAR EQL .FLGT [BLD_FLAG, FLAG_CHARACTER])	!
		AND .FLGT [BLD_FLAG, FLAG_ENABLED]
	    THEN 				!
	    !<UPPERCASE flag> followed by <BOLD flag> (i.e., ^*)
		BEGIN				!Turn on global bolding
		SCA_BLD = TRUE;
		SCA_WRD_C_BLD = .SCA_DO_BLD;
		KCNS ();
		RETURN;
		END;

	    !This gets done for an <UPPERCASE flag> standing alone.
	    SCA_FRC_CHR = TRUE;
	    SCA_WRD_FC_LT = %C'A' - %C'a';
	    SCA_WRD_OC_LT = %C'A' - %C'a';
	    SCA_WRD_FC_UT = 0;
	    SCA_WRD_OC_UT = 0;
	    RETURN;
	    END;

	[LOW_FLAG] :
	    BEGIN
	    !<LOWERCASE flag>
	    KCNS ();				!Get next character.

	    IF 					!
		.KHAR EQL .FLGT [LOW_FLAG, FLAG_CHARACTER]
	    THEN 				!
		BEGIN				! Doubled <LOWERCASE flag>s
		SETCAS (FORCE_LOWER);
		SCA_FRC_CASE = TRUE;
		KCNS ();
		RETURN;
		END;

	    IF 					!
		(.KHAR EQL .FLGT [UND_FLAG, FLAG_CHARACTER])	!
		AND .FLGT [UND_FLAG, FLAG_ENABLED]
	    THEN 				!
	    !<LOWERCASE flag> followed by <UNDERLINE flag> (i.e., \&)
		BEGIN				!Turn off global underlining
		SCA_UND = FALSE;
		SCA_WRD_C_UND = FALSE;
		KCNS ();
		RETURN;
		END;

	    IF 					!
		(.KHAR EQL .FLGT [BLD_FLAG, FLAG_CHARACTER])	!
		AND .FLGT [BLD_FLAG, FLAG_ENABLED]
	    THEN 				!
	    !<LOWERCASE flag> followed by <BOLD flag> (i.e., \*)
		BEGIN				!Turn off global bolding
		SCA_BLD = FALSE;
		SCA_WRD_C_BLD = FALSE;
		KCNS ();
		RETURN;
		END;

	    !<LOWERCASE flag> standing alone
	    SCA_FRC_CHR = TRUE;
	    SCA_WRD_FC_UT = %C'a' - %C'A';
	    SCA_WRD_OC_UT = %C'a' - %C'A';
	    SCA_WRD_FC_LT = 0;
	    SCA_WRD_OC_LT = 0;
	    RETURN;
	    END;

	[PER_FLAG] :
	    BEGIN
	    !<CAPITALIZE flag>

	    SCA_WRD_LC_PNCT = .SCA_FILL;	!Double space only if .FILL.
	    KCNS ();				!Discard the flag.
	    END;

	[BRK_FLAG] :
	    BEGIN
	    !<BREAK flag>
	
	    KCNS ();				!Skip over flag.
 
	    IF					!
		(.SCA_WRD_CPEND EQL RINTES)	!
		OR (.KHAR EQL %C' ')		!Space?
		OR (.KHAR EQL %O'011')		!TAB??
	    THEN
		!'|' Before/after a space/tab or starting a line
		ERMS  (RNFFNA, .FS_START (IRA), CH$DIFF (.FS_NEXT (IRA), .FS_START (IRA)))
	    ELSE

		IF 					!
		    .KHAR EQL RINTES
		THEN 				!
		    BEGIN
		    ERM (RNFFEL, CH$PTR (UPLIT ('BREAK')), 5);
		    ERMS  (RNFSTR, .FS_START (IRA), CH$DIFF (.FS_NEXT (IRA), .FS_START (IRA)));
		    END
		ELSE
		    !'|' after some text is ok.
		    BEGIN
		    ENDWRD (FALSE,FALSE, FALSE);	!End word with no spacing or justification.
		    SCA_FC_CASE = FALSE;		!Do not cap next character.
		    END;
	    END;

	[CAP_FLAG] :
	    BEGIN
	    !<CAPITALIZE flag>

	    IF 					!
		.SCA_WORD_SET
	    THEN 				!
	    !A <CAPITALIZE flag> is already in effect.
	    !Turn it off.  I.e. "<" is a flip-flop.
		BEGIN				!Restore global case rules
		SCA_WORD_SET = FALSE;
		SCA_FC_UT = .SCA_FCBE_UT;
		SCA_OC_UT = .SCA_OCBE_UT;
		SCA_FC_LT = .SCA_FCBE_LT;
		SCA_OC_LT = .SCA_OCBE_LT;
		SCA_WRD_FC_UT = .SCA_FCBE_UT;
		SCA_WRD_OC_UT = .SCA_OCBE_UT;
		SCA_WRD_FC_LT = .SCA_FCBE_LT;
		SCA_WRD_OC_LT = .SCA_OCBE_LT;
		END
	    ELSE 				!
		BEGIN
		SCA_WORD_SET = TRUE;
		SCA_FCBE_UT = .SCA_FC_UT;
		SCA_FCBE_LT = .SCA_FC_LT;
		SCA_OCBE_UT = .SCA_OC_UT;
		SCA_OCBE_LT = .SCA_OC_LT;
		! Establish new case rules for this word.
		SCA_WRD_FC_LT = %C'A' - %C'a';
		SCA_WRD_OC_LT = %C'A' - %C'a';
		SCA_WRD_FC_UT = 0;
		SCA_WRD_OC_UT = 0;
		SCA_FC_LT = %C'A' - %C'a';
		SCA_OC_LT = %C'A' - %C'a';
		SCA_FC_UT = 0;
		SCA_OC_UT = 0;
		END;

	    KCNS ();
	    RETURN;
	    END;

	[UND_FLAG] :
	    BEGIN
	    !<UNDERLINE flag> alone.
	    SCA_WRD_AC_UND = .SCA_DO_UND;	! Underline a single character
	    KCNS ();
	    RETURN;
	    END;

	[BLD_FLAG] :
	    BEGIN
	    !<BOLD flag> alone.
	    SCA_WRD_AC_BLD = .SCA_DO_BLD;	! Bold a single character
	    KCNS ();
	    RETURN;
	    END;

	[SPA_FLAG] :
	    BEGIN
	    !<SPACE flag>

	    IF 					!
		.SCA_X_FLAG
	    THEN 				!
	    !A <SPACE flag> completes a sequence started by
	    !the <INDEX flag>.
		XR ();

	    IF 					!
		.SCA_WORD_SET
	    THEN 				!
	    !A <SPACE flag> terminates a sequence started by
	    !the <CAPITALIZE flag>.
		BEGIN				!Restore global case rules
		SCA_WORD_SET = FALSE;
		SCA_FC_UT = .SCA_FCBE_UT;
		SCA_OC_UT = .SCA_OCBE_UT;
		SCA_FC_LT = .SCA_FCBE_LT;
		SCA_OC_LT = .SCA_OCBE_LT;
		SCA_WRD_FC_UT = .SCA_FCBE_UT;
		SCA_WRD_OC_UT = .SCA_OCBE_UT;
		SCA_WRD_FC_LT = .SCA_FCBE_LT;
		SCA_WRD_OC_LT = .SCA_OCBE_LT;
		END;

	    SCA_WRD_C_UND = FALSE;		!Do not underline this type of space unless forced.
	    ENDCHR (%C' ');			!Output a space
	    SCA_FRC_CASE = FALSE;
	    SCA_FC_CASE = TRUE;			!Handle case as if a new word.
	    KCNS ();
	    RETURN;
	    END;

	[IND_FLAG] :
	    BEGIN
	    !<INDEX flag>
	    IF
		.SCA_XROUTINE
	    THEN
		SUBXR ()
	    ELSE
		XR ();
	    RETURN;
	    END;

	[HYP_FLAG] :
	    BEGIN
	    !<HYPHENATION flag>
	    KCNS ();				!Skip flag.
	    IF					!
		(.SCA_WRD_CPEND EQL RINTES)	!
		OR (.KHAR EQL %C' ')		!Space?
		OR (.KHAR EQL %O'011')		!TAB??
	    THEN
		!Hyphenate before/after a space/tab or starting a line
		ERMS  (RNFFNA, .FS_START (IRA), CH$DIFF (.FS_NEXT (IRA), .FS_START (IRA)))
	    ELSE

		IF 					!
		    .KHAR EQL RINTES
		THEN 				!
		    BEGIN
		    ERM (RNFFEL, CH$PTR (UPLIT ('HYPHENATE')), 9);
		    ERMS  (RNFSTR, .FS_START (IRA), CH$DIFF (.FS_NEXT (IRA), .FS_START (IRA)));
		    END
		ELSE
		    !Hyphenation between some text is ok.
		    IF
			.SCA_DO_HYP
		    THEN
			!Hyphenation is only done if user said
			!to do it (.HYPHENATION).  Otherwise it's ignored.
			BEGIN
			ENDWRD (FALSE,FALSE, TRUE);	!End word with hyphenation.
			SCA_FC_CASE = FALSE;		!Do not cap next character.
			END;
	    RETURN;
	    END;

	[OVR_FLAG] :
	    BEGIN
	    !<OVERSTRIKE flag>
	    KCNS ();

	    IF 					!
		.KHAR EQL RINTES
	    THEN 				!
		BEGIN
		ERM (RNFFEL, CH$PTR (UPLIT ('OVERSTRIKE')), 10);
		ERMS  (RNFSTR, .FS_START (IRA), CH$DIFF (.FS_NEXT (IRA), .FS_START (IRA)));
		RETURN;				! Ignore <OVERSTRIKE flag>
						! at the end of a line.
		END;

!

	    IF 					!
		.SCA_WRD_CPEND EQL RINTES
	    THEN 				!
		BEGIN
		!OVERSTRIKE flag standing alone
		ERMS  (RNFFNA, .FS_START (IRA), CH$DIFF (.FS_NEXT (IRA), .FS_START (IRA)));
		END
	    ELSE 				!

		IF 				!
		    .SCA_DO_OVR
		THEN 				!
						!User did not say .NO OVERSTRIKING, so really overstrike.
		    BEGIN

		    IF 				!
			(.FS_MAXSIZE (MRA) - .FS_LENGTH (MRA)) LSS 3
		    THEN 			!
			BEGIN			!No room for overstriking code
			ERMS (RNFLTC, .FS_NEXT (IRA), .FS_REMAINS (IRA));
			END
		    ELSE 			!
		    				!Generate overstriking code.
			BEGIN
			FS_WCHAR (MRA, RINTES);
			FS_WCHAR (MRA, %C'O');
			FS_WCHAR (MRA, .KHAR);
			SCA_WRD_INT_L = .SCA_WRD_INT_L + 3;
			SCA_WRD_OVR = TRUE
			END;

		    END;

	    KCNS ();				! Get next character.
	    RETURN;
	    END;

	[INRANGE] :
	    BEGIN
	    KCNS ();
	    RETURN;
	    END;

	[OUTRANGE] :
	    BEGIN
	    KCNS ();
	    RETURN;
	    END;
	TES;

    RETURN;
    END;					!End of DOFLG


GLOBAL ROUTINE SUBXR : NOVALUE = 		!

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine is called when RUNOFF is processing a
!	.SUBINDEX or .ENTRY command, and a <SUBINDEX flag>
!	is encountered.
!	The character sequence that the previous <SUBINDEX flag>
!	started is terminated, and the next one is set up.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN
    !Always position past the <SUBINDEX flag>
    KCNS ();
    !Skip spaces/tabs preceeding the next item.
    RSKIPS (IRA);

    !Make sure user didn't put the <SUBINDEX flag> at the end of
    !the line.
    IF!
	.KHAR EQL RINTES			!End of line?
    THEN
	BEGIN
	ERM (RNFFEL, CH$PTR (UPLIT ('SUBINDEX')), 8);
	ERMS  (RNFSTR, .FS_START (IRA), CH$DIFF (.FS_NEXT (IRA), .FS_START (IRA)) - 1);
	RETURN
	END;

    !Make sure user didn't put the <SUBINDEX flag> at the start of
    !the line.
    !The check for the start of the line is done by seeing if there
    !is anything in the index output buffer yet, as would be the case
    !if the two pointers are indeed equal.  On top of that, it's
    !important to take account of single-character entires.  Remember
    !that ENDCHR won't put a character into the MRA until the next
    !character forces it out.  So checking for it being the first character detects the
    !one-character-entry case.
    IF!
	.SCA_FC					!First character?
	AND (.FS_START (MRA) EQL .FS_NEXT (MRA))!Start of line?
    THEN
	BEGIN
	ERMS (RNFFNA,
	     .FS_START (IRA),
	     CH$DIFF (.FS_NEXT (IRA), .FS_START (IRA)) - 1);
	RETURN
	END;

    !Detect ">>" and complain.
    !The check is done by looking back at what's been generated to see if
    !all there is is a justification mark, to separate words.  Similarily,
    !the case of a one-character entry is taken into account.
    BEGIN
    LOCAL
	TEMP_PTR;
    TEMP_PTR = CH$PLUS(.FS_NEXT (MRA), -3);	!Point to start of a sequence.
    IF						!
	(CH$RCHAR_A (TEMP_PTR) EQL RINTES)	!
	 AND (CH$RCHAR (.TEMP_PTR) EQL %C'J')	!
	  AND .SCA_FC
    THEN
	BEGIN
	ERMS (RNFFNA,
	     .FS_START (IRA),
	     CH$DIFF (.FS_NEXT (IRA), .FS_START (IRA)) - 1);
	RETURN
	END
    END;

    IF 						!
	.SCA_WRD_CPEND NEQ RINTES
    THEN 					!
	ENDWRD (FALSE, FALSE, FALSE)
    ELSE 					!
    !Dump trailing spaces
	BEGIN
	LOCAL
	    TEMP_PTR;

	FS_NEXT (MRA) = CH$PLUS (.FS_NEXT (MRA), -.SCA_WRD_LST_SP);
	FS_LENGTH (MRA) = .FS_LENGTH (MRA) - .SCA_WRD_LST_SP;
	SCA_WRD_LST_SP = 0;

	!Check for wierd things like .X ^^(spaces only), or .X a>^^(spaces)>etc
	TEMP_PTR = CH$PLUS(.FS_NEXT (MRA), -3);	!Point to start of a sequence.
	IF						!
	    ((CH$RCHAR_A (TEMP_PTR) EQL RINTES)		!
	    AND (CH$RCHAR (.TEMP_PTR) EQL %C'J'))	!Catches .X whatever>^^(spaces)>whatever
	    OR (.FS_START(MRA) EQL .FS_NEXT(MRA))	!Catches .X^^(spaces)>whatever
	THEN
	    BEGIN
	    ERMS (RNFFNA,
		 .FS_START (IRA),
		 CH$DIFF (.FS_NEXT (IRA), .FS_START (IRA)) - 1);
	    RETURN
	    END
	END;

    !An end of word marker separates character sequences.
    FS_WCHAR (MRA, RINTES);
    FS_WCHAR (MRA, %C'J');
    FS_WCHAR (MRA, %C' ');
    TSF_INT_HL = .TSF_INT_HL + 3;
    TSF_JUS_CNT = .TSF_JUS_CNT + 1;
    SCA_WRD_PNTR = .FS_NEXT (MRA)
    END;					!End of SUBXR


GLOBAL ROUTINE XR : NOVALUE = 			!

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine is called when an <INDEX flag> is seen.
!	It is also called when a space is seen at the end of a word,
!	and that word is to be entered into the index.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    IF 						!
	.KHAR EQL .FLGT [IND_FLAG, FLAG_CHARACTER]
    THEN 					!
	KCNS ();				!Position past <INDEX flag>

    !If indexing is already on, terminate current phrase and enter
    !it into the idex.

    IF 						!
	.SCA_X_FLAG
    THEN 					!
	BEGIN
	OUTXPH ();				!Output word to index.
	RETURN;
	END
    ELSE 					!
    !Turn on indexing if indexing is wanted.
	SCA_X_FLAG = .SCA_DO_IND;

    IF 						!
	.SCA_X_FLAG
    THEN 					!
    !The index flag has just been turned on.  Initialize the
    !work areas for the <INDEX flag>.
	BEGIN
	FS_INIT (XMRA);

	INCR I FROM 0 TO TSF_SIZE - 1 DO
	    XTSF [.I] = 0;

	END;

    END;					!End of XR

END						!End of module

ELUDOM
