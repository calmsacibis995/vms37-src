!	RNOMAC.REQ	Command line information declaration
!
!			      IDENT = 'V03-000'
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY:
!   Digital Standard Runoff
!
! ABSTRACT:
!
! 	RUNOFF Command Information.  Initialized by the command line interface
!	and picked up for distribution by DOOPTS.
!
! ENVIRONMENT:
!   Compatible BLISS
!
! MODULES REQUIRING IN THIS FILE:
!
!	DOOPTS	GLBDAT	RUNOFF		<=== common to all implementations
!
!	RNOVMS.B32	VAX/VMS
!	RNOT10.B36	TOPS-10/20
!	RNORSX.B16	RSX & RSTS
!
! AUTHOR:  Rich Friday,   CREATION DATE:  ?
!
! MODIFIED BY:
!
!	005	KAD00005	Keith Dawson	16-DEC-1981
!		Made each single-bit switch value into a 2-bit field. This 
!		  allows the CLI to pass information not only on the ultimate
!		  setting of the bit, but on whether it was explicitly 
!		  specified or defaulted.
!
!	004	REM00004	Ray Marshall	2-NOV-1981
!		Added RNO$H_DBG1 & RNO$H_DBG2 to be set by the /DEC_INTERNAL
!		  qualifier.
!		Added RNO$V_FLIP, RNO$V_TERM_ANSI, and RNO$V_TERM_LIST also to
!		  be set by the /DEC_INTERNAL qualifier.
!		Added RNO$V_LOG which will be set by the /LOG qualifier.
!
!	003	REM00003	Ray Marshall	28-SEP-1981
!		Added heading information and history.
!
!	002	KAD00002	Keith Dawson	21-AUG-1981
!		Added /SEPERATE_UNDERLINE, /NONSPACING_UNDERLINE, and /QUICK
!		  switch information.
!		For DSR V1.26i
!--

$FIELD	$rno$cmd_fields	= SET
    RNO$T_INPUT		= [$DESCRIPTOR(FIXED)] ,	! Input file-spec descriptor
    RNO$T_OUTPUT	= [$DESCRIPTOR(FIXED)] ,	! Output file-spec descriptor
    RNO$T_CONTENTS	= [$DESCRIPTOR(FIXED)] ,	! Binary table-of-contents file-spec descriptor
    RNO$T_INDEX		= [$DESCRIPTOR(FIXED)] ,	! Binary index file-spec descriptor

    RNO$V_OPTIONS	= [$BYTES(6)] ,			! Command option indicators:
        $OVERLAY( RNO$V_OPTIONS )
    RNO$V_OPTION1	= [$BYTES(2)] ,
    RNO$V_OPTION2	= [$BYTES(2)] ,
    RNO$V_OPTION3	= [$BYTES(2)] ,
!
        $OVERLAY( RNO$V_OPTION1 )
!
    RNO$V_2_OUTPUT	= [$BITS(2)] ,			!  output file requested
	$OVERLAY ( RNO$V_2_OUTPUT )
    RNO$V_OUTPUT	= [$BIT] ,			!  output file requested
    RNO$V_S_OUTPUT	= [$BIT] ,			!  /OUTPUT explicitly specified

    RNO$V_2_BACKSPACE	= [$BITS(2)] ,			!  backspace on same line
	$OVERLAY ( RNO$V_2_BACKSPACE )
    RNO$V_BACKSPACE	= [$BIT] ,			!  backspace on same line
    RNO$V_S_BACKSPACE	= [$BIT] ,			!  /BACKSPACE explicitly specified

    RNO$V_2_CHANGE	= [$BITS(2)] ,			!  change bars requested
	$OVERLAY ( RNO$V_2_CHANGE )
    RNO$V_CHANGE	= [$BIT] ,			!  change bars allowed
    RNO$V_S_CHANGE	= [$BIT] ,			!  /CHANGE explicitly specified

    RNO$V_CHNG_CHAR	= [$BIT] ,			!  change bar character specified (see below)

    RNO$V_2_CONTENTS	= [$BITS(2)] ,			!  table-of-contents file requested
	$OVERLAY ( RNO$V_2_CONTENTS )
    RNO$V_CONTENTS	= [$BIT] ,			!  table-of-contents file requested
    RNO$V_S_CONTENTS	= [$BIT] ,			!  /CONTENTS explicitly specified

    RNO$V_DEB_COND	= [$BIT] ,			!  go through all paths of .IFs and output draft flags
    RNO$V_DEB_CONT	= [$BIT] ,			!  echo toc entries in output file
    RNO$V_DEB_FILES	= [$BIT] ,			!  put file names in the output.
    RNO$V_DEB_INDEX	= [$BIT] ,			!  echo index entries in output file
    RNO$V_FLIP		= [$BIT] ,			!  "FLIP" processing requested

    RNO$V_2_INDEX	= [$BITS(2)] ,			!  index file requested
	$OVERLAY ( RNO$V_2_INDEX )
    RNO$V_INDEX		= [$BIT] ,			!  index file requested
    RNO$V_S_INDEX	= [$BIT] ,			!  /CONTENTS explicitly specified
!
        $OVERLAY( RNO$V_OPTION2 )
!
    RNO$V_2_LOG		= [$BITS(2)] ,			!  print final statistics 
	$OVERLAY ( RNO$V_2_LOG )
    RNO$V_LOG		= [$BIT] ,			!  print final statistics 
    RNO$V_S_LOG		= [$BIT] ,			!  /LOG explicitly specified

    RNO$V_MSG_OUT	= [$BIT] ,			!  put DSR messages in the output file
    RNO$V_MSG_USER	= [$BIT] ,			!  send DSR messages to the user

    RNO$V_2_OVERPRINT	= [$BITS(2)] ,			!  overprint on same line
	$OVERLAY ( RNO$V_2_OVERPRINT )
    RNO$V_OVERPRINT	= [$BIT] ,			!  overprint on same line
    RNO$V_S_OVERPRINT	= [$BIT] ,			!  /OVERPRINT  explicitly specified

    RNO$V_2_PAUSE	= [$BITS(2)] ,			!  pause at page boundary requested
	$OVERLAY ( RNO$V_2_PAUSE )
    RNO$V_PAUSE		= [$BIT] ,			!  pause at page boundary requested
    RNO$V_S_PAUSE	= [$BIT] ,			!  /PAUSE explicitly specified

    RNO$V_QUICK		= [$BIT] ,			!  do quick processing (for contents, index)

    RNO$V_2_SEQUENCE	= [$BITS(2)] ,			!  output sequence numbers requested
	$OVERLAY ( RNO$V_2_SEQUENCE )
    RNO$V_SEQUENCE	= [$BIT] ,			!  output sequence numbers requested
    RNO$V_S_SEQUENCE	= [$BIT] ,			!  /SEQUENCE explicitly specified

    RNO$V_2_SIMULATE	= [$BITS(2)] ,			!  simulate printer form feeds
	$OVERLAY ( RNO$V_2_SIMULATE )
    RNO$V_SIMULATE	= [$BIT] ,			!  simulate printer form feeds
    RNO$V_S_SIMULATE	= [$BIT] ,			!  /SIMULATE explicitly specified
	$CONTINUE
! (3 free bits in OPTION2)
!
        $OVERLAY( RNO$V_OPTION3 )
!
    RNO$V_OUTCTL1	= [$BIT] ,			!  ANSI bolding & underlining
    RNO$V_OUTCTL2	= [$BIT] ,			!  standard bolding & underlining

    RNO$V_2_UNDERLINE	= [$BITS(2)] ,			!  underlining requested
	$OVERLAY ( RNO$V_2_UNDERLINE )
    RNO$V_UNDERLINE	= [$BIT] ,			!  underlining requested: (default)
    RNO$V_S_UNDERLINE	= [$BIT] ,			!  /UNDERLINE explicitly specified

    RNO$V_2_UND_SEPAR	= [$BITS(2)] ,			!    underlining on separate line
	$OVERLAY ( RNO$V_2_UND_SEPAR )
    RNO$V_UND_SEPAR	= [$BIT] ,			!    underlining on separate line
    RNO$V_S_UND_SEPAR	= [$BIT] ,			!    /SEPARATE_UNDERLINE explicitly specified

    RNO$V_2_UND_NONSP	= [$BITS(2)] ,			!    underlining non-spacing inline
	$OVERLAY ( RNO$V_2_UND_NONSP )
    RNO$V_UND_NONSP	= [$BIT] ,			!    non-spacing inline
    RNO$V_S_UND_NONSP	= [$BIT] ,			!    /NONSPACING explicitly specified

    RNO$V_UND_CHAR	= [$BIT] ,			!    character specified (see below)
        $CONTINUE
! (7 free bits in OPTION3)

    RNO$C_CHANGE	= [$BYTE] ,			! Change bar character (RNO$V_CHNG_CHAR set)
    RNO$C_UNDERLINE	= [$BYTE] ,			! Underline character (RNO$V_UND_CHAR set)

    RNO$H_BOLD		= [$SHORT_INTEGER] ,		! Bolding overprint count
    RNO$H_DBG1		= [$SHORT_INTEGER] ,		! Debug flags, 1st word
    RNO$H_DBG2		= [$SHORT_INTEGER] ,		! Debug flags, 2nd word
    RNO$H_DOWN		= [$SHORT_INTEGER] ,		! Down shift count (number of lines)
    RNO$H_RIGHT		= [$SHORT_INTEGER] ,		! Right shift count (number of characters)
    RNO$H_FORM_SIZE	= [$SHORT_INTEGER] ,		! Form size (number of lines)

    RNO$T_PAGES		= [$DESCRIPTOR(FIXED)] ,	! Page range string descriptor:
        $OVERLAY( $SUB_FIELD( RNO$T_PAGES, STR$H_LENGTH ) )
    RNO$H_PAGES		= [$BYTES(2)] ,			!  length of page range string
        $OVERLAY( $SUB_FIELD( RNO$T_PAGES, STR$A_POINTER ) )
    RNO$A_PAGES		= [$POINTER] ,			!  pointer to page range string
        $CONTINUE

    RNO$T_VARIANT	= [$DESCRIPTOR(FIXED)] ,	! Variant string descriptor:
        $OVERLAY( $SUB_FIELD( RNO$T_VARIANT, STR$H_LENGTH ) )
    RNO$H_VARIANT	= [$BYTES(2)] ,			!  length of variant string
        $OVERLAY( $SUB_FIELD( RNO$T_VARIANT, STR$A_POINTER ) )
    RNO$A_VARIANT	= [$POINTER]			!  pointer to variant string
        $CONTINUE
    TES;
LITERAL	RNO$K_CMD_LEN	= $FIELD_SET_SIZE ;		! Length of RUNOFF command block

! End of RNOMAC

MACRO
    $RNO_CMD =
    	BLOCK [ RNO$K_CMD_LEN ]  FIELD ( $rno$cmd_fields ) %;
